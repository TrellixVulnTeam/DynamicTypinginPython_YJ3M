commit 6efed854908ae00f0f476ac926fbce7b1f1a2210
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Thu Dec 12 01:22:02 2019 +0000

    lib,cli: Add suppressed colab flag

diff --git a/lib/cli.py b/lib/cli.py
index 89310b1..d4d448a 100644
--- a/lib/cli.py
+++ b/lib/cli.py
@@ -434,6 +434,12 @@ class FaceSwapArgs():
             "dest": "redirect_gui",
             "default": False,
             "help": argparse.SUPPRESS})
+        global_args.append({
+            "opts": ("-colab", "--colab"),
+            "action": "store_true",
+            "dest": "colab",
+            "default": False,
+            "help": argparse.SUPPRESS})
         return global_args
 
     @staticmethod
diff --git a/plugins/train/trainer/_base.py b/plugins/train/trainer/_base.py
index 04ae7be..75b3239 100644
--- a/plugins/train/trainer/_base.py
+++ b/plugins/train/trainer/_base.py
@@ -231,7 +231,7 @@ class TrainerBase():
         logger.debug(kwargs)
         return kwargs
 
-    def __print_loss(self, loss):
+    def __print_loss(self, loss, is_colab):
         """ Outputs the loss for the current iteration to the console.
 
         Parameters
@@ -240,16 +240,20 @@ class TrainerBase():
             The loss for each side. The dictionary should contain 2 keys ("a" and "b") with the
             values being a list of loss values for the current iteration corresponding to
             each side.
+        is_colab: bool
+            ``True`` if FaceSwap is executing in a Google Colab session, otherwise ``False``
          """
         logger.trace(loss)
         output = ["Loss {}: {:.5f}".format(side.capitalize(), loss[side][0])
                   for side in sorted(loss.keys())]
         output = ", ".join(output)
-        print("[{}] [#{:05d}] {}".format(self._timestamp,
-                                         self._model.iterations,
-                                         output), end='\r')
+        output = "[{}] [#{:05d}] {}".format(self._timestamp, self._model.iterations, output)
+        if not is_colab:
+            print(output, end='\r')
+        else:
+            print(output)
 
-    def train_one_step(self, viewer, timelapse_kwargs):
+    def train_one_step(self, viewer, timelapse_kwargs, is_colab):
         """ Running training on a batch of images for each side.
 
         Triggered from the training cycle in :class:`scripts.train.Train`.
@@ -267,6 +271,8 @@ class TrainerBase():
             The keyword arguments for generating time-lapse previews. If a time-lapse preview is
             not required then this should be ``None``. Otherwise all values should be full paths
             the keys being `input_a`, `input_b`, `output`.
+        is_colab: bool
+            ``True`` if FaceSwap is executing in a Google Colab session, otherwise ``False``
         """
         logger.trace("Training one step: (iteration: %s)", self._model.iterations)
         do_preview = viewer is not None
@@ -297,11 +303,11 @@ class TrainerBase():
                 self._log_tensorboard(side, side_loss)
 
             if not self._pingpong.active:
-                self.__print_loss(loss)
+                self.__print_loss(loss, is_colab)
             else:
                 for key, val in loss.items():
                     self._pingpong.loss[key] = val
-                self.__print_loss(self._pingpong.loss)
+                self.__print_loss(self._pingpong.loss, is_colab)
 
             if do_preview:
                 samples = self._samples.show_sample()
diff --git a/scripts/train.py b/scripts/train.py
index 2679d3d..0cd4f6c 100644
--- a/scripts/train.py
+++ b/scripts/train.py
@@ -121,12 +121,12 @@ class Train():
             image_dir = getattr(self._args, "input_{}".format(side))
             if not os.path.isdir(image_dir):
                 logger.error("Error: '%s' does not exist", image_dir)
-                exit(1)
+                sys.exit(1)
 
             images[side] = get_image_paths(image_dir)
             if not images[side]:
                 logger.error("Error: '%s' contains no images", image_dir)
-                exit(1)
+                sys.exit(1)
 
         logger.info("Model A Directory: %s", self._args.input_a)
         logger.info("Model B Directory: %s", self._args.input_b)
@@ -219,7 +219,7 @@ class Train():
                 trainer.clear_tensorboard()
             except KeyboardInterrupt:
                 logger.info("Saving model weights has been cancelled!")
-            exit(0)
+            sys.exit(0)
         except Exception as err:
             raise err
 
@@ -300,7 +300,7 @@ class Train():
             save_iteration = iteration % self._args.save_interval == 0
             viewer = display_func if save_iteration or self._save_now else None
             timelapse = self._timelapse if save_iteration else None
-            trainer.train_one_step(viewer, timelapse)
+            trainer.train_one_step(viewer, timelapse, self._args.colab)
             if self._stop:
                 logger.debug("Stop received. Terminating")
                 break
@@ -335,8 +335,8 @@ class Train():
         if is_preview:
             logger.info("  Using live preview")
         logger.info("  Press '%s' to save and quit",
-                    "Terminate" if self._args.redirect_gui else "ENTER")
-        if not self._args.redirect_gui:
+                    "Stop" if self._args.redirect_gui or self._args.colab else "ENTER")
+        if not self._args.redirect_gui and not self._args.colab:
             logger.info("  Press 'S' to save model weights immediately")
         logger.info("===================================================")
 
