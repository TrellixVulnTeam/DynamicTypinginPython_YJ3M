commit 0867cc8026723a03cbada46179a4f473bba15dd2
Author: Artem Ivanov <37909402+andenixa@users.noreply.github.com>
Date:   Sat Apr 13 13:50:11 2019 +0300

    new DFL jpeg alignments support (#705)
    
    * new DFL jpeg alignments support
    
    - Added DFL Jpeg alignments conversion
    
    * linting
    
    * Move import PIL to top of module

diff --git a/tools/lib_alignments/jobs.py b/tools/lib_alignments/jobs.py
index 20248c2..9516421 100644
--- a/tools/lib_alignments/jobs.py
+++ b/tools/lib_alignments/jobs.py
@@ -6,6 +6,7 @@ import os
 import pickle
 import struct
 from datetime import datetime
+from PIL import Image
 
 import numpy as np
 from scipy import signal
@@ -529,8 +530,8 @@ class Reformat():
         """ Load alignments from DeepFaceLab and format for Faceswap """
         alignments = dict()
         for face in tqdm(self.faces.file_list_sorted, desc="Converting DFL Faces"):
-            if face["face_extension"] != ".png":
-                logger.verbose("'%s' is not a png. Skipping", face["face_fullname"])
+            if face["face_extension"] not in (".png", ".jpg"):
+                logger.verbose("'%s' is not a png or jpeg. Skipping", face["face_fullname"])
                 continue
             f_hash = face["face_hash"]
             fullpath = os.path.join(self.faces.folder, face["face_fullname"])
@@ -545,6 +546,18 @@ class Reformat():
     @staticmethod
     def get_dfl_alignment(filename):
         """ Process the alignment of one face """
+        ext = os.path.splitext(filename)[1]
+
+        if ext.lower() in (".jpg", ".jpeg"):
+            img = Image.open(filename)
+            try:
+                dfl_alignments = pickle.loads(img.app["APP15"])
+                dfl_alignments["source_rect"] = [n.item()  # comes as non-JSONable np.int32
+                                                 for n in dfl_alignments["source_rect"]]
+                return dfl_alignments
+            except pickle.UnpicklingError:
+                return None
+
         with open(filename, "rb") as dfl:
             header = dfl.read(8)
             if header != b"\x89PNG\r\n\x1a\n":
