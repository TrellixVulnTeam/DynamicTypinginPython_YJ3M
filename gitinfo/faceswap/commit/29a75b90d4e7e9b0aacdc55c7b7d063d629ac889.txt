commit 29a75b90d4e7e9b0aacdc55c7b7d063d629ac889
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Sun Sep 29 12:06:04 2019 +0100

    Extract: Expose "allow_growth" option

diff --git a/lib/model/session.py b/lib/model/session.py
index 3db05a0..a9a825a 100644
--- a/lib/model/session.py
+++ b/lib/model/session.py
@@ -27,14 +27,19 @@ class KSession():
         The name of the model that is to be loaded
     model_path: str
         The path to the keras model file
-    model_kwargs: dict
-        Any kwargs that need to be passed to :func:`keras.models.load_models()`
+    model_kwargs: dict, optional
+        Any kwargs that need to be passed to :func:`keras.models.load_models()`. Default: None
+    allow_growth: bool, optional
+        Enable the Tensorflow GPU allow_growth configuration option. This option prevents "
+        Tensorflow from allocating all of the GPU VRAM, but can lead to higher fragmentation and "
+        slower performance. Default: False
     """
-    def __init__(self, name, model_path, model_kwargs=None):
-        logger.trace("Initializing: %s (name: %s, model_path: %s, model_kwargs: %s)",
-                     self.__class__.__name__, name, model_path, model_kwargs)
+    def __init__(self, name, model_path, model_kwargs=None, allow_growth=False):
+        logger.trace("Initializing: %s (name: %s, model_path: %s, model_kwargs: %s, "
+                     "allow_growth: %s)",
+                     self.__class__.__name__, name, model_path, model_kwargs, allow_growth)
         self._name = name
-        self._session = self._set_session()
+        self._session = self._set_session(allow_growth)
         self._model_path = model_path
         self._model_kwargs = model_kwargs
         self._model = None
@@ -92,7 +97,7 @@ class KSession():
             return np.concatenate(results)
         return [np.concatenate(x) for x in zip(*results)]
 
-    def _set_session(self):
+    def _set_session(self, allow_growth):
         """ Sets the session and graph.
 
         If the backend is AMD then this does nothing and the global ``Keras`` ``Session``
@@ -103,6 +108,8 @@ class KSession():
 
         self.graph = tf.Graph()
         config = tf.ConfigProto()
+        if allow_growth and get_backend() == "nvidia":
+            config.gpu_options.allow_growth = True  # pylint:disable=no-member
         session = tf.Session(graph=tf.Graph(), config=config)
         logger.debug("Creating tf.session: (graph: %s, session: %s, config: %s)",
                      session.graph, session, config)
diff --git a/plugins/extract/_config.py b/plugins/extract/_config.py
index 2cb5e3f..b9768fb 100644
--- a/plugins/extract/_config.py
+++ b/plugins/extract/_config.py
@@ -13,11 +13,12 @@ logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
 
 
 class Config(FaceswapConfig):
-    """ Config File for Models """
+    """ Config File for Extraction """
 
     def set_defaults(self):
         """ Set the default values for config """
         logger.debug("Setting defaults")
+        self.set_globals()
         current_dir = os.path.dirname(__file__)
         for dirpath, _, filenames in os.walk(current_dir):
             default_files = [fname for fname in filenames if fname.endswith("_defaults.py")]
@@ -41,3 +42,17 @@ class Config(FaceswapConfig):
         for key, val in mod._DEFAULTS.items():  # pylint:disable=protected-access
             self.add_item(section=section, title=key, **val)
         logger.debug("Added defaults: %s", section)
+
+    def set_globals(self):
+        """
+        Set the global options for extract
+        """
+        logger.debug("Setting global config")
+        section = "global"
+        self.add_section(title=section, info="Options that apply to all extraction plugins")
+        self.add_item(
+            section=section, title="allow_growth", datatype=bool, default=False,
+            info="[Nvidia Only]. Enable the Tensorflow GPU `allow_growth` configuration option. "
+                 "This option prevents Tensorflow from allocating all of the GPU VRAM at launch "
+                 "but can lead to higher VRAM fragmentation and slower performance. Should only "
+                 "be enabled if you are having problems running extraction.")
diff --git a/plugins/extract/align/fan.py b/plugins/extract/align/fan.py
index 0c0306e..71e5606 100644
--- a/plugins/extract/align/fan.py
+++ b/plugins/extract/align/fan.py
@@ -30,7 +30,10 @@ class Align(Aligner):
     def init_model(self):
         """ Initialize FAN model """
         model_kwargs = dict(custom_objects={'TorchBatchNorm2D': TorchBatchNorm2D})
-        self.model = KSession(self.name, self.model_path, model_kwargs=model_kwargs)
+        self.model = KSession(self.name,
+                              self.model_path,
+                              model_kwargs=model_kwargs,
+                              allow_growth=self.config["allow_growth"])
         self.model.load_model()
         # Feed a placeholder so Aligner is primed for Manual tool
         placeholder = np.zeros((self.batchsize, 3, self.input_size, self.input_size),
diff --git a/plugins/extract/detect/mtcnn.py b/plugins/extract/detect/mtcnn.py
index d1901f7..4ba013b 100755
--- a/plugins/extract/detect/mtcnn.py
+++ b/plugins/extract/detect/mtcnn.py
@@ -53,7 +53,7 @@ class Detect(Detector):
 
     def init_model(self):
         """ Initialize S3FD Model"""
-        self.model = MTCNN(self.model_path, **self.kwargs)
+        self.model = MTCNN(self.model_path, self.config["allow_growth"], **self.kwargs)
 
     def process_input(self, batch):
         """ Compile the detection image(s) for prediction """
@@ -105,8 +105,8 @@ class Detect(Detector):
 
 class PNet(KSession):
     """ Keras PNet model for MTCNN """
-    def __init__(self, model_path):
-        super().__init__("MTCNN-PNet", model_path)
+    def __init__(self, model_path, allow_growth):
+        super().__init__("MTCNN-PNet", model_path, allow_growth=allow_growth)
         self.define_model(self.model_definition)
         self.load_model_weights()
 
@@ -128,8 +128,8 @@ class PNet(KSession):
 
 class RNet(KSession):
     """ Keras RNet model for MTCNN """
-    def __init__(self, model_path):
-        super().__init__("MTCNN-RNet", model_path)
+    def __init__(self, model_path, allow_growth):
+        super().__init__("MTCNN-RNet", model_path, allow_growth=allow_growth)
         self.define_model(self.model_definition)
         self.load_model_weights()
 
@@ -158,8 +158,8 @@ class RNet(KSession):
 
 class ONet(KSession):
     """ Keras ONet model for MTCNN """
-    def __init__(self, model_path):
-        super().__init__("MTCNN-ONet", model_path)
+    def __init__(self, model_path, allow_growth):
+        super().__init__("MTCNN-ONet", model_path, allow_growth=allow_growth)
         self.define_model(self.model_definition)
         self.load_model_weights()
 
@@ -193,7 +193,7 @@ class MTCNN():
     """ MTCNN Detector for face alignment """
     # TODO Batching for rnet and onet
 
-    def __init__(self, model_path, minsize, threshold, factor):
+    def __init__(self, model_path, allow_growth, minsize, threshold, factor):
         """
         minsize: minimum faces' size
         threshold: threshold=[th1, th2, th3], th1-3 are three steps's threshold
@@ -201,15 +201,16 @@ class MTCNN():
                 detect in the image.
         pnet, rnet, onet: caffemodel
         """
-        logger.debug("Initializing: %s: (model_path: '%s')",
-                     self.__class__.__name__, model_path)
+        logger.debug("Initializing: %s: (model_path: '%s', allow_growth: %s, minsize: %s, "
+                     "threshold: %s, factor: %s)", self.__class__.__name__, model_path,
+                     allow_growth, minsize, threshold, factor)
         self.minsize = minsize
         self.threshold = threshold
         self.factor = factor
 
-        self.pnet = PNet(model_path[0])
-        self.rnet = RNet(model_path[1])
-        self.onet = ONet(model_path[2])
+        self.pnet = PNet(model_path[0], allow_growth)
+        self.rnet = RNet(model_path[1], allow_growth)
+        self.onet = ONet(model_path[2], allow_growth)
         self._pnet_scales = None
         logger.debug("Initialized: %s", self.__class__.__name__)
 
diff --git a/plugins/extract/detect/s3fd.py b/plugins/extract/detect/s3fd.py
index 238a11a..469db17 100644
--- a/plugins/extract/detect/s3fd.py
+++ b/plugins/extract/detect/s3fd.py
@@ -38,7 +38,7 @@ class Detect(Detector):
                                                 O2K_Pow=O2K_Pow,
                                                 O2K_ConstantLayer=O2K_ConstantLayer,
                                                 O2K_Div=O2K_Div))
-        self.model = S3fd(self.model_path, model_kwargs, confidence)
+        self.model = S3fd(self.model_path, model_kwargs, self.config["allow_growth"], confidence)
 
     def process_input(self, batch):
         """ Compile the detection image(s) for prediction """
@@ -214,10 +214,10 @@ class O2K_Div(O2K_ElementwiseLayer):
 
 class S3fd(KSession):
     """ Keras Network """
-    def __init__(self, model_path, model_kwargs, confidence):
-        logger.debug("Initializing: %s: (model_path: '%s')",
-                     self.__class__.__name__, model_path)
-        super().__init__("S3FD", model_path, model_kwargs)
+    def __init__(self, model_path, model_kwargs, allow_growth, confidence):
+        logger.debug("Initializing: %s: (model_path: '%s', allow_growth: %s)",
+                     self.__class__.__name__, model_path, allow_growth)
+        super().__init__("S3FD", model_path, model_kwargs=model_kwargs, allow_growth=allow_growth)
         self.load_model()
         self.confidence = confidence
         logger.debug("Initialized: %s", self.__class__.__name__)
