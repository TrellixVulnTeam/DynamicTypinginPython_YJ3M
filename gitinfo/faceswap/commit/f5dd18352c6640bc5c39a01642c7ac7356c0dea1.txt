commit f5dd18352c6640bc5c39a01642c7ac7356c0dea1
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Fri Jun 28 18:34:23 2019 +0100

    Fixups
    
    - GPUStats: Add more useful advice for pynvml errors
    - Setup.py - Fix missing Cuda Path on Windows
    - Setup.py - Handle Nonetype error on required packages

diff --git a/lib/gpu_stats.py b/lib/gpu_stats.py
index cd40c69..11a7b4f 100644
--- a/lib/gpu_stats.py
+++ b/lib/gpu_stats.py
@@ -89,7 +89,13 @@ class GPUStats():
                     if plaidlib is not None:
                         self.plaid = plaidlib(log=log)
                     else:
-                        raise err
+                        msg = ("There was an error reading from the Nvidia Machine Learning "
+                               "Library. The most likely cause is incorrectly installed drivers. "
+                               "Please remove and reinstall your Nvidia drivers before reporting."
+                               "Original Error: {}".format(str(err)))
+                        if self.logger:
+                            self.logger.error(msg)
+                        raise ValueError(msg)
             self.initialized = True
             self.get_device_count()
             self.get_active_devices()
diff --git a/setup.py b/setup.py
index 3f0f52b..842bbad 100755
--- a/setup.py
+++ b/setup.py
@@ -351,6 +351,11 @@ class Checks():
         if self.env.os_version[0] == "Windows":
             self.tips.pip()
 
+    @property
+    def cuda_keys_windows(self):
+        """ Return the OS Environ CUDA Keys for Windows """
+        return [key for key in os.environ.keys() if key.lower().startswith("cuda_path_v")]
+
     def amd_ask_enable(self):
         """ Enable or disable Plaidml for AMD"""
         self.output.info("AMD Support: AMD GPU support is currently limited.\r\n"
@@ -439,16 +444,14 @@ class Checks():
 
     def cuda_check_windows(self):
         """ Check Windows CUDA Version """
-        cuda_keys = [key
-                     for key in os.environ.keys()
-                     if key.lower().startswith("cuda_path_v")]
+        cuda_keys = self.cuda_keys_windows
         if not cuda_keys:
             self.output.error("CUDA not found. See "
                               "https://github.com/deepfakes/faceswap/blob/master/INSTALL.md#cuda "
                               "for instructions")
             return
 
-        self.env.cuda_version = cuda_keys[0].replace("CUDA_PATH_V", "").replace("_", ".")
+        self.env.cuda_version = cuda_keys[0].lower().replace("cuda_path_v", "").replace("_", ".")
         self.env.cuda_path = os.environ[cuda_keys[0]]
         self.output.info("CUDA version: " + self.env.cuda_version)
 
@@ -457,6 +460,14 @@ class Checks():
         if self.env.os_version[0] == "Linux":
             cudnn_checkfiles = self.cudnn_checkfiles_linux()
         elif self.env.os_version[0] == "Windows":
+            if not self.env.cuda_path and not self.cuda_keys_windows:
+                self.output.error(
+                    "CUDA not found. See "
+                    "https://github.com/deepfakes/faceswap/blob/master/INSTALL.md#cuda "
+                    "for instructions")
+                return
+            if not self.env.cuda_path:
+                self.env.cuda_path = os.environ[self.cuda_keys_windows[0]]
             cudnn_checkfiles = self.cudnn_checkfiles_windows()
 
         cudnn_checkfile = None
@@ -541,6 +552,8 @@ class Install():
             self.env.required_packages.extend(self.env.macos_required_packages)
         for pkg in self.env.required_packages:
             pkg = self.check_os_requirements(pkg)
+            if pkg is None:
+                continue
             key = pkg.split("==")[0]
             if key not in self.env.installed_packages:
                 self.env.missing_packages.append(pkg)
