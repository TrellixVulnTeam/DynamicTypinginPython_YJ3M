commit 26836a4907445e376863f71b25fd56fa8239e0c3
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Fri May 31 17:48:53 2019 +0100

    Bugfixes
    
    Facefilter - Variable reference before assignment
    masks - Facehull initialize to 255.0 instead of 1.0
    Alignments tool - Stop tool from ignoring upper case extensions
    pep8 fixes

diff --git a/lib/face_filter.py b/lib/face_filter.py
index 5c11e71..aca13b6 100644
--- a/lib/face_filter.py
+++ b/lib/face_filter.py
@@ -164,6 +164,9 @@ class FaceFilter():
                 msg = ("Rejecting face as k-nearest neighbors classification is less than "
                        "0.5: {}".format(round(ratio, 2)))
                 retval = False
+            else:
+                msg = None
+                retval = True
         else:
             msg = None
             retval = True
diff --git a/lib/model/masks.py b/lib/model/masks.py
index e998908..ae8a2d6 100644
--- a/lib/model/masks.py
+++ b/lib/model/masks.py
@@ -127,5 +127,5 @@ class facehull(Mask):  # pylint: disable=invalid-name
         mask = np.zeros(self.face.shape[0:2] + (1, ), dtype=np.float32)
         hull = cv2.convexHull(  # pylint: disable=no-member
             np.array(self.landmarks).reshape((-1, 2)))
-        cv2.fillConvexPoly(mask, hull, 1.0, lineType=cv2.LINE_AA)  # pylint: disable=no-member
+        cv2.fillConvexPoly(mask, hull, 255.0, lineType=cv2.LINE_AA)  # pylint: disable=no-member
         return mask
diff --git a/plugins/convert/_config.py b/plugins/convert/_config.py
index 6b4bf83..59b89aa 100644
--- a/plugins/convert/_config.py
+++ b/plugins/convert/_config.py
@@ -126,7 +126,7 @@ class Config(FaceswapConfig):
             section=section, title="colorspace", datatype=str, default="HSV", gui_radio=True,
             choices=["RGB", "HSV", "LAB", "YCrCb"],
             info="The colorspace to use for adjustment: The three adjustment sliders will effect "
-                  "the image differently depending on which colorspace is selected:"
+                 "the image differently depending on which colorspace is selected:"
                  "\n\t RGB: Red, Green, Blue. An additive colorspace where colors are obtained by "
                  "a linear combination of Red, Green, and Blue values. The three channels are "
                  "correlated by the amount of light hitting the surface. In RGB color space the "
@@ -144,7 +144,7 @@ class Config(FaceswapConfig):
                  "blue component from Luma. Separates the luminance and chrominance components "
                  "into different channels.")
         self.add_item(
-            section=section, title="balance_1",  datatype=float, default=0.0, rounding=1,
+            section=section, title="balance_1", datatype=float, default=0.0, rounding=1,
             min_max=(-100.0, 100.0),
             info="Balance of channel 1: "
                  "\n\tRGB: Red "
@@ -152,7 +152,7 @@ class Config(FaceswapConfig):
                  "\n\tLAB: Lightness "
                  "\n\tYCrCb: Luma ")
         self.add_item(
-            section=section, title="balance_2",  datatype=float, default=0.0, rounding=1,
+            section=section, title="balance_2", datatype=float, default=0.0, rounding=1,
             min_max=(-100.0, 100.0),
             info="Balance of channel 2: "
                  "\n\tRGB: Green "
@@ -160,7 +160,7 @@ class Config(FaceswapConfig):
                  "\n\tLAB: Green > Magenta "
                  "\n\tYCrCb: Distance of red from Luma")
         self.add_item(
-            section=section, title="balance_3",  datatype=float, default=0.0, rounding=1,
+            section=section, title="balance_3", datatype=float, default=0.0, rounding=1,
             min_max=(-100.0, 100.0),
             info="Balance of channel 3: "
                  "\n\tRGB: Blue "
diff --git a/tools/lib_alignments/media.py b/tools/lib_alignments/media.py
index c588a53..30f5601 100644
--- a/tools/lib_alignments/media.py
+++ b/tools/lib_alignments/media.py
@@ -134,7 +134,7 @@ class MediaLoader():
     def valid_extension(filename):
         """ Check whether passed in file has a valid extension """
         extension = os.path.splitext(filename)[1]
-        retval = extension in _image_extensions
+        retval = extension.lower() in _image_extensions
         logger.trace("Filename has valid extension: '%s': %s", filename, retval)
         return retval
 
