commit 044832769aa829e7c2e827b405b22a91ecbebcd1
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Wed Jul 3 16:40:53 2019 +0000

    setup.py: Don't error out if cudnn can't be found on linux

diff --git a/INSTALL.md b/INSTALL.md
index f90d1dd..747e2d3 100755
--- a/INSTALL.md
+++ b/INSTALL.md
@@ -151,8 +151,8 @@ Git is required for obtaining the code and keeping your codebase up to date.
 Obtain git for your distribution from the [git website](https://git-scm.com/downloads).
 
 ### Python
-The recommended install method is to use a Conda3 Environment as this will handle the installation of Nvidia's CUDA and cuDNN straight into your Conda Environment.
-  - [MiniConda3](https://docs.conda.io/en/latest/miniconda.html)
+The recommended install method is to use a Conda3 Environment as this will handle the installation of Nvidia's CUDA and cuDNN straight into your Conda Environment. This is by far the easiest and most reliable way to setup the project.
+  - MiniConda3 is recommended: [MiniConda3](https://docs.conda.io/en/latest/miniconda.html)
   
 Alternatively you can install Python (>= 3.2-3.7 64-bit) for your distribution (links below.) If you go down this route and are using an Nvidia GPU you should install CUDA (https://developer.nvidia.com/cuda-zone) and cuDNN (https://developer.nvidia.com/cudnn). for your system. If you do not plan to build Tensorflow yourself, make sure you install no higher than version 10.0 of CUDA and 7.5.x of CUDNN.
   - Python distributions:
diff --git a/setup.py b/setup.py
index db82b7d..4a25ccb 100755
--- a/setup.py
+++ b/setup.py
@@ -522,6 +522,8 @@ class Checks():
         """ Return the checkfile locations for linux """
         chk = os.popen("ldconfig -p | grep -P \"libcudnn.so.\\d+\" | head -n 1").read()
         chk = chk.strip().replace("libcudnn.so.", "")
+        if not chk:
+            return list()
         cudnn_vers = chk[0]
         cudnn_path = chk[chk.find("=>") + 3:chk.find("libcudnn") - 1]
         cudnn_path = cudnn_path.replace("lib", "include")
