commit 80a6c73c84a8441abc1269b26d0a7e07d800ab52
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Tue Mar 12 12:36:27 2019 +0000

    Fix effmpeg fps detection and better GUI handling

diff --git a/lib/gui/wrapper.py b/lib/gui/wrapper.py
index c536369..7c966a0 100644
--- a/lib/gui/wrapper.py
+++ b/lib/gui/wrapper.py
@@ -139,7 +139,8 @@ class FaceswapControl():
         self.consoleregex = {
             "loss": re.compile(r"([a-zA-Z_]+):.*?(\d+\.\d+)"),
             "tqdm": re.compile(r".*?(?P<pct>\d+%).*?(?P<itm>\d+/\d+)\W\["
-                               r"(?P<tme>\d+:\d+<.*),\W(?P<rte>.*)[a-zA-Z/]*\]")}
+                               r"(?P<tme>\d+:\d+<.*),\W(?P<rte>.*)[a-zA-Z/]*\]"),
+            "ffmpeg": re.compile(r"([a-zA-Z]+)=\s*([\d|N/A]\S+)")}
         logger.debug("Initialized %s", self.__class__.__name__)
 
     def execute_script(self, command, args):
@@ -170,8 +171,9 @@ class FaceswapControl():
             if output == "" and self.process.poll() is not None:
                 break
             if output:
-                if (self.command == "train" and self.capture_loss(output)) or (
-                        self.command != "train" and self.capture_tqdm(output)):
+                if ((self.command == "train" and self.capture_loss(output)) or
+                        (self.command == "effmpeg" and self.capture_ffmpeg(output)) or
+                        (self.command not in ("train", "effmpeg") and self.capture_tqdm(output))):
                     continue
                 if self.command == "train" and output.strip().endswith("saved models"):
                     logger.debug("Trigger update preview")
@@ -302,6 +304,25 @@ class FaceswapControl():
         logger.trace("Succesfully captured tqdm message: %s", message)
         return True
 
+    def capture_ffmpeg(self, string):
+        """ Capture tqdm output for progress bar """
+        logger.trace("Capturing ffmpeg")
+        ffmpeg = self.consoleregex["ffmpeg"].findall(string)
+        if len(ffmpeg) < 7:
+            logger.trace("Not ffmpeg message. Returning False")
+            return False
+
+        message = ""
+        for item in ffmpeg:
+            message += "{}: {}  ".format(item[0], item[1])
+        if not message:
+            logger.trace("Error creating ffmpeg message. Returning False")
+            return False
+
+        self.statusbar.progress_update(message, 0, False)
+        logger.trace("Succesfully captured ffmpeg message: %s", message)
+        return True
+
     def terminate(self):
         """ Terminate the subprocess """
         logger.debug("Terminating wrapper")
diff --git a/tools/effmpeg.py b/tools/effmpeg.py
index 5930a4a..1a36db4 100644
--- a/tools/effmpeg.py
+++ b/tools/effmpeg.py
@@ -13,6 +13,7 @@ import os
 import sys
 import subprocess
 import datetime
+from collections import OrderedDict
 
 from ffmpy import FFprobe, FFmpeg, FFRuntimeError
 
@@ -333,7 +334,9 @@ class Effmpeg():
         filename = Effmpeg.__get_extracted_filename(input_.path)
         _input_opts = Effmpeg._common_ffmpeg_args[:]
         _input_path = os.path.join(input_.path, filename)
-        _output_opts = '-vf fps="' + str(fps) + '" '
+        _fps_arg = '-r ' + str(fps) + ' '
+        _input_opts += _fps_arg + "-f image2 "
+        _output_opts = _fps_arg
         if not preview:
             _output_opts = '-y ' + _output_opts + ' -c:v libx264'
         if mux_audio:
@@ -342,7 +345,7 @@ class Effmpeg():
                 raise ValueError("Preview for gen-vid with audio muxing is "
                                  "not supported.")
             _output_opts = _ref_vid_opts + ' ' + _output_opts
-            _inputs = {_input_path: _input_opts, ref_vid.path: None}
+            _inputs = OrderedDict([(_input_path, _input_opts), (ref_vid.path, None)])
         else:
             _inputs = {_input_path: _input_opts}
         _outputs = {output.path: _output_opts}
@@ -359,9 +362,13 @@ class Effmpeg():
             _inputs = {input_: _input_opts}
         else:
             _inputs = {input_.path: _input_opts}
+        logger.debug(_inputs)
         ffp = FFprobe(inputs=_inputs)
         _fps = ffp.run(stdout=subprocess.PIPE)[0].decode("utf-8")
         _fps = _fps.strip()
+        if "/" in _fps:
+            _fps = _fps.split("/")
+            _fps = str(round(int(_fps[0])/int(_fps[1]), 2))
         if print_:
             logger.info("Video fps: %s", _fps)
         logger.debug(_fps)
@@ -429,7 +436,7 @@ class Effmpeg():
             raise ValueError("Preview with audio muxing is not supported.")
         # if not preview:
         #    _output_opts = '-y ' + _output_opts
-        _inputs = {input_.path: _input_opts, ref_vid.path: _ref_vid_opts}
+        _inputs = OrderedDict([(input_.path, _input_opts), (ref_vid.path, _ref_vid_opts)])
         _outputs = {output.path: _output_opts}
         Effmpeg.__run_ffmpeg(exe=exe, inputs=_inputs, outputs=_outputs)
 
