commit 0a7e5d397ed2bb9b61ee54d73e38d7ef6d890e46
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Wed Jun 26 19:52:24 2019 +0100

    Graphing Updates
    
    Add smoothing to Analysis and Training Graph
    Replace Trend with Smoothing on Training Graph
    Add Smoothing Parameter to Training Graph

diff --git a/lib/gui/display_analysis.py b/lib/gui/display_analysis.py
index 92756fd..11cfaee 100644
--- a/lib/gui/display_analysis.py
+++ b/lib/gui/display_analysis.py
@@ -11,7 +11,7 @@ from .display_graph import SessionGraph
 from .display_page import DisplayPage
 from .stats import Calculations, Session
 from .tooltip import Tooltip
-from .utils import FileHandler, get_config, get_images
+from .utils import ControlBuilder, FileHandler, get_config, get_images
 
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
 
@@ -61,11 +61,11 @@ class Analysis(DisplayPage):  # pylint: disable=too-many-ancestors
         """ Load previously saved sessions """
         logger.debug("Loading session")
         get_config().set_cursor_busy()
-        self.clear_session()
         fullpath = FileHandler("filename", "state").retfile
         if not fullpath:
             get_config().set_cursor_default()
             return
+        self.clear_session()
         logger.debug("state_file: '%s'", fullpath)
         model_dir, state_file = os.path.split(fullpath)
         logger.debug("model_dir: '%s'", model_dir)
@@ -316,7 +316,7 @@ class StatsData(ttk.Frame):  # pylint: disable=too-many-ancestors
 
             The default view is rolling average over 500 points.
             If there are fewer data points than this, switch the default
-            to raw
+            to smoothed
         """
         get_config().set_cursor_busy()
         get_config().root.update_idletasks()
@@ -388,7 +388,7 @@ class SessionPopUp(tk.Toplevel):
         super().__init__()
 
         self.default_avg = 500
-        self.default_view = "avg" if datapoints > self.default_avg * 2 else "raw"
+        self.default_view = "avg" if datapoints > self.default_avg * 2 else "smoothed"
         self.session_id = session_id
         self.session = Session(model_dir=model_dir, model_name=model_name)
         self.initialize_session()
@@ -446,7 +446,7 @@ class SessionPopUp(tk.Toplevel):
         self.opts_combobox(frame)
         self.opts_checkbuttons(frame)
         self.opts_loss_keys(frame)
-        self.opts_entry(frame)
+        self.opts_slider(frame)
         self.opts_buttons(frame)
         sep = ttk.Frame(frame, height=2, relief=tk.RIDGE)
         sep.pack(fill=tk.X, pady=(5, 0), side=tk.BOTTOM)
@@ -482,10 +482,20 @@ class SessionPopUp(tk.Toplevel):
             Tooltip(cmbframe, text=hlp, wraplength=200)
         logger.debug("Built Combo boxes")
 
+    @staticmethod
+    def add_section(frame, title):
+        """ Add a seperator and section title """
+        sep = ttk.Frame(frame, height=2, relief=tk.SOLID)
+        sep.pack(fill=tk.X, pady=(5, 0), side=tk.TOP)
+        lbl = ttk.Label(frame, text=title)
+        lbl.pack(side=tk.TOP, padx=5, pady=0, anchor=tk.CENTER)
+
     def opts_checkbuttons(self, frame):
         """ Add the options check buttons """
         logger.debug("Building Check Buttons")
-        for item in ("raw", "trend", "avg", "outliers"):
+
+        self.add_section(frame, "Display")
+        for item in ("raw", "trend", "avg", "smoothed", "outliers"):
             if item == "avg":
                 text = "Show Rolling Average"
             elif item == "outliers":
@@ -511,6 +521,7 @@ class SessionPopUp(tk.Toplevel):
         logger.debug("Building Loss Key Check Buttons")
         loss_keys = self.session.loss_keys
         lk_vars = dict()
+        section_added = False
         for loss_key in sorted(loss_keys):
             text = loss_key.replace("_", " ").title()
             helptext = "Display {}".format(text)
@@ -523,6 +534,10 @@ class SessionPopUp(tk.Toplevel):
                 # Don't display if there's only one item
                 break
 
+            if not section_added:
+                self.add_section(frame, "Keys")
+                section_added = True
+
             ctl = ttk.Checkbutton(frame, variable=var, text=text)
             ctl.pack(side=tk.TOP, padx=5, pady=5, anchor=tk.W)
             Tooltip(ctl, text=helptext, wraplength=200)
@@ -530,28 +545,35 @@ class SessionPopUp(tk.Toplevel):
         self.vars["loss_keys"] = lk_vars
         logger.debug("Built Loss Key Check Buttons")
 
-    def opts_entry(self, frame):
+    def opts_slider(self, frame):
         """ Add the options entry boxes """
-        logger.debug("Building Entry Boxes")
-        for item in ("avgiterations", ):
+
+        self.add_section(frame, "Parameters")
+        logger.debug("Building Slider Controls")
+        for item in ("avgiterations", "smoothamount"):
             if item == "avgiterations":
+                dtype = int
                 text = "Iterations to Average:"
-                default = "500"
-
-            entframe = ttk.Frame(frame)
-            entframe.pack(fill=tk.X, pady=5, padx=5, side=tk.TOP)
-            lbl = ttk.Label(entframe, text=text, anchor=tk.W)
-            lbl.pack(padx=(0, 2), side=tk.LEFT)
-
-            ctl = ttk.Entry(entframe, width=4, justify=tk.RIGHT)
-            ctl.pack(side=tk.RIGHT, anchor=tk.W)
-            ctl.insert(0, default)
-
-            hlp = self.set_help(item)
-            Tooltip(entframe, text=hlp, wraplength=200)
-
-            self.vars[item] = ctl
-        logger.debug("Built Entry Boxes")
+                default = 500
+                rounding = 25
+                min_max = (25, 2500)
+            elif item == "smoothamount":
+                dtype = float
+                text = "Smoothing Amount:"
+                default = 0.90
+                rounding = 2
+                min_max = (0, 0.99)
+
+            ctl = ControlBuilder(frame,
+                                 text,
+                                 dtype,
+                                 default,
+                                 label_width=19,
+                                 rounding=rounding,
+                                 min_max=min_max,
+                                 helptext=self.set_help(item))
+            self.vars[item] = ctl.tk_var
+        logger.debug("Built Sliders")
 
     def opts_buttons(self, frame):
         """ Add the option buttons """
@@ -626,11 +648,15 @@ class SessionPopUp(tk.Toplevel):
             hlp = "Save display data to csv"
         elif control == "avgiterations":
             hlp = "Number of data points to sample for rolling average"
+        elif control == "smoothamount":
+            hlp = "Set the smoothing amount. 0 is no smoothing, 0.99 is maximum smoothing"
         elif control == "outliers":
             hlp = "Flatten data points that fall more than 1 standard " \
                   "deviation from the mean to the mean value."
         elif control == "avg":
             hlp = "Display rolling average of the data"
+        elif control == "smoothed":
+            hlp = "Smooth the data"
         elif control == "raw":
             hlp = "Display raw data"
         elif control == "trend":
@@ -659,6 +685,7 @@ class SessionPopUp(tk.Toplevel):
                                          loss_keys=loss_keys,
                                          selections=selections,
                                          avg_samples=self.vars["avgiterations"].get(),
+                                         smooth_amount=self.vars["smoothamount"].get(),
                                          flatten_outliers=self.vars["outliers"].get(),
                                          is_totals=self.is_totals)
         if not self.check_valid_data():
diff --git a/lib/gui/display_command.py b/lib/gui/display_command.py
index 804c554..5c1bf85 100644
--- a/lib/gui/display_command.py
+++ b/lib/gui/display_command.py
@@ -12,7 +12,7 @@ from .display_graph import TrainingGraph
 from .display_page import DisplayOptionalPage
 from .tooltip import Tooltip
 from .stats import Calculations
-from .utils import FileHandler, get_config, get_images
+from .utils import FileHandler, get_config, get_images, set_slider_rounding
 
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
 
@@ -172,11 +172,15 @@ class PreviewTrainCanvas(ttk.Frame):  # pylint: disable=too-many-ancestors
 
 class GraphDisplay(DisplayOptionalPage):  # pylint: disable=too-many-ancestors
     """ The Graph Tab of the Display section """
+    def __init__(self, parent, tabname, helptext, waittime, command=None):
+        self.trace_var = None
+        super().__init__(parent, tabname, helptext, waittime, command)
 
     def add_options(self):
         """ Add the additional options """
         self.add_option_refresh()
         super().add_options()
+        self.add_option_smoothing()
 
     def add_option_refresh(self):
         """ Add refresh button to refresh graph immediately """
@@ -189,25 +193,61 @@ class GraphDisplay(DisplayOptionalPage):  # pylint: disable=too-many-ancestors
         Tooltip(btnrefresh,
                 text="Graph updates every 100 iterations. Click to refresh now.",
                 wraplength=200)
+        logger.debug("Added refresh option")
+
+    def add_option_smoothing(self):
+        """ Add refresh button to refresh graph immediately """
+        logger.debug("Adding Smoothing Slider")
+        tk_var = get_config().tk_vars["smoothgraph"]
+        min_max = (0, 0.99)
+
+        ctl_frame = ttk.Frame(self.optsframe)
+        ctl_frame.pack(padx=2, side=tk.RIGHT)
+
+        lbl = ttk.Label(ctl_frame, text="Smoothing Amount:", anchor=tk.W)
+        lbl.pack(padx=5, pady=5, side=tk.LEFT, anchor=tk.N, expand=True)
+
+        tbox = ttk.Entry(ctl_frame, width=8, textvariable=tk_var, justify=tk.RIGHT)
+        tbox.pack(padx=(0, 5), side=tk.RIGHT)
+        ctl = ttk.Scale(
+            ctl_frame,
+            variable=tk_var,
+            command=lambda val, var=tk_var, dt=float, rn=2, mm=(0, 0.99):
+            set_slider_rounding(val, var, dt, rn, mm))
+        ctl["from_"] = min_max[0]
+        ctl["to"] = min_max[1]
+        ctl.pack()
+        Tooltip(ctl,
+                text="Set the smoothing amount. 0 is no smoothing, 0.99 is maximum smoothing.",
+                wraplength=200)
+        logger.debug("Added Smoothing Slider")
 
     def display_item_set(self):
         """ Load the graph(s) if available """
         session = get_config().session
+        smooth_amount_var = get_config().tk_vars["smoothgraph"]
         if session.initialized and session.logging_disabled:
             logger.trace("Logs disabled. Hiding graph")
             self.set_info("Graph is disabled as 'no-logs' or 'pingpong' has been selected")
             self.display_item = None
+            if self.trace_var is not None:
+                smooth_amount_var.trace_vdelete("w", self.trace_var)
+                self.trace_var = None
         elif session.initialized:
             logger.trace("Loading graph")
             self.display_item = session
+            if self.trace_var is None:
+                self.trace_var = smooth_amount_var.trace("w", self.smooth_amount_callback)
         else:
             self.display_item = None
+            if self.trace_var is not None:
+                smooth_amount_var.trace_vdelete("w", self.trace_var)
+                self.trace_var = None
 
     def display_item_process(self):
         """ Add a single graph to the graph window """
         logger.trace("Adding graph")
         existing = list(self.subnotebook_get_titles_ids().keys())
-
         for loss_key in self.display_item.loss_keys:
             tabname = loss_key.replace("_", " ").title()
             if tabname in existing:
@@ -216,9 +256,18 @@ class GraphDisplay(DisplayOptionalPage):  # pylint: disable=too-many-ancestors
             data = Calculations(session=get_config().session,
                                 display="loss",
                                 loss_keys=[loss_key],
-                                selections=["raw", "trend"])
+                                selections=["raw", "smoothed"],
+                                smooth_amount=get_config().tk_vars["smoothgraph"].get())
             self.add_child(tabname, data)
 
+    def smooth_amount_callback(self, *args):
+        """ Update each graph's smooth amount on variable change """
+        smooth_amount = get_config().tk_vars["smoothgraph"].get()
+        logger.debug("Updating graph smooth_amount: (new_value: %s, args: %s)",
+                     smooth_amount, args)
+        for graph in self.subnotebook.children.values():
+            graph.calcs.args["smooth_amount"] = smooth_amount
+
     def add_child(self, name, data):
         """ Add the graph for the selected keys """
         logger.debug("Adding child: %s", name)
@@ -237,6 +286,9 @@ class GraphDisplay(DisplayOptionalPage):  # pylint: disable=too-many-ancestors
 
     def close(self):
         """ Clear the plots from RAM """
+        if self.trace_var is not None:
+            get_config().tk_vars["smoothgraph"].trace_vdelete("w", self.trace_var)
+            self.trace_var = None
         if self.subnotebook is None:
             logger.debug("No graphs to clear. Returning")
             return
diff --git a/lib/gui/display_graph.py b/lib/gui/display_graph.py
index aefd0d8..591eaac 100755
--- a/lib/gui/display_graph.py
+++ b/lib/gui/display_graph.py
@@ -185,10 +185,10 @@ class GraphBase(ttk.Frame):  # pylint: disable=too-many-ancestors
         sorted_lines = list()
         for key in sorted(keys):
             title = key.replace("_", " ").title()
-            if key.startswith(("avg", "trend")):
-                sorted_lines.append([key, title])
-            else:
+            if key.startswith("raw"):
                 raw_lines.append([key, title])
+            else:
+                sorted_lines.append([key, title])
 
         groupsize = self.lines_groupsize(raw_lines, sorted_lines)
         sorted_lines = raw_lines + sorted_lines
@@ -203,11 +203,10 @@ class GraphBase(ttk.Frame):  # pylint: disable=too-many-ancestors
         groupsize = 1
         if raw_lines:
             groupsize = len(raw_lines)
-        else:
-            for check in ("avg", "trend"):
-                if any(item[0].startswith(check) for item in sorted_lines):
-                    groupsize = len([item for item in sorted_lines if item[0].startswith(check)])
-                    break
+        elif sorted_lines:
+            keys = [key[0][:key[0].find("_")] for key in sorted_lines]
+            distinct_keys = set(keys)
+            groupsize = len(keys) // len(distinct_keys)
         logger.trace(groupsize)
         return groupsize
 
diff --git a/lib/gui/stats.py b/lib/gui/stats.py
index bcf4f25..fa777ed 100644
--- a/lib/gui/stats.py
+++ b/lib/gui/stats.py
@@ -338,11 +338,11 @@ class SessionsSummary():
 class Calculations():
     """ Class to pull raw data for given session(s) and perform calculations """
     def __init__(self, session, display="loss", loss_keys=["loss"], selections=["raw"],
-                 avg_samples=10, flatten_outliers=False, is_totals=False):
+                 avg_samples=500, smooth_amount=0.90, flatten_outliers=False, is_totals=False):
         logger.debug("Initializing %s: (session: %s, display: %s, loss_keys: %s, selections: %s, "
-                     "avg_samples: %s, flatten_outliers: %s, is_totals: %s",
+                     "avg_samples: %s, smooth_amount: %s, flatten_outliers: %s, is_totals: %s",
                      self.__class__.__name__, session, display, loss_keys, selections, avg_samples,
-                     flatten_outliers, is_totals)
+                     smooth_amount, flatten_outliers, is_totals)
 
         warnings.simplefilter("ignore", np.RankWarning)
 
@@ -351,7 +351,8 @@ class Calculations():
         self.loss_keys = loss_keys
         self.selections = selections
         self.is_totals = is_totals
-        self.args = {"avg_samples": int(avg_samples),
+        self.args = {"avg_samples": avg_samples,
+                     "smooth_amount": smooth_amount,
                      "flatten_outliers": flatten_outliers}
         self.iterations = 0
         self.stats = None
@@ -496,6 +497,18 @@ class Calculations():
         logger.debug("Calculated Average")
         return avgs
 
+    def calc_smoothed(self, data):
+        """ Smooth the data """
+        last = data[0]  # First value in the plot (first timestep)
+        weight = self.args["smooth_amount"]
+        smoothed = list()
+        for point in data:
+            smoothed_val = last * weight + (1 - weight) * point  # Calculate smoothed value
+            smoothed.append(smoothed_val)                        # Save it
+            last = smoothed_val                                  # Anchor the last smoothed value
+
+        return smoothed
+
     @staticmethod
     def calc_trend(data):
         """ Compile trend data """
diff --git a/lib/gui/utils.py b/lib/gui/utils.py
index 0733e97..a3b47c6 100644
--- a/lib/gui/utils.py
+++ b/lib/gui/utils.py
@@ -597,6 +597,9 @@ class Config():
         refreshgraph = tk.BooleanVar()
         refreshgraph.set(False)
 
+        smoothgraph = tk.DoubleVar()
+        smoothgraph.set(0.90)
+
         updatepreview = tk.BooleanVar()
         updatepreview.set(False)
 
@@ -609,6 +612,7 @@ class Config():
                    "generate": generatecommand,
                    "consoleclear": consoleclear,
                    "refreshgraph": refreshgraph,
+                   "smoothgraph": smoothgraph,
                    "updatepreview": updatepreview,
                    "traintimeout": traintimeout}
         logger.debug(tk_vars)
