commit 83c36b9489a3e0c6c3d2b48309e75691ec544e5c
Author: babilio <11932505+babilio@users.noreply.github.com>
Date:   Sun Mar 11 05:36:50 2018 -0500

    Improving performance of extraction. Two main changes to improve the â€¦ (#259)
    
    * Improving performance of extraction. Two main changes to improve the most recent modifications to extract: 1st FaceLandmarkExtractor would try to use cnn first, then try hog. The problem was that this reduced the speed by 4 for images where cnn didn't find anything, and most of the times hog wouldn't find anything either or it would be a bad extract. For me it wasn't worth it. With this you can specify on input -D if you want to use hog, cnn, or all. 'all' will try cnn, then hog like FaceLandmarkExtractor was doing. cnn or hog will just use 1 detection method. 2nd change is a rehaul of the verbose parameter. Now warnings when a face is not detected will just be shown if indicated by -v or --verbose. This restores the verbose function to what it once was. With this change I was able to process 1,000 per each 4 minutes regardless if faces were detected or not. Performance improvement just applies to not detected images but I normally will have lots of images without clear faces in my set, so I figured it would impact others. Also the introduction of 'all' would allow trying other models together more easily in the future.
    
    * Update faces_detect.py
    
    * Update extract.py
    
    * Update FaceLandmarksExtractor.py
    
    * spacing fix

diff --git a/lib/FaceLandmarksExtractor/FaceLandmarksExtractor.py b/lib/FaceLandmarksExtractor/FaceLandmarksExtractor.py
index f2b1252..4546ba7 100644
--- a/lib/FaceLandmarksExtractor/FaceLandmarksExtractor.py
+++ b/lib/FaceLandmarksExtractor/FaceLandmarksExtractor.py
@@ -105,25 +105,26 @@ def get_pts_from_predict(a, center, scale):
     c += 0.5
     return [ transform (c[i], center, scale, a.shape[2]) for i in range(a.shape[0]) ]
 
-def initialize(scale_to=2048):
+def initialize(detector, scale_to=2048):
     global dlib_detectors
     global keras_model
     global is_initialized
-    if not is_initialized:       
-        
+    if not is_initialized:
         dlib_cnn_face_detector_path = os.path.join(os.path.dirname(__file__), "mmod_human_face_detector.dat")
         if not os.path.exists(dlib_cnn_face_detector_path):
             raise Exception ("Error: Unable to find %s, reinstall the lib !" % (dlib_cnn_face_detector_path) )
-        else:
+        
+        if detector == 'cnn' or detector == "all":
             dlib_cnn_face_detector = dlib.cnn_face_detection_model_v1(dlib_cnn_face_detector_path)            
             #DLIB and TF competiting for VRAM, so dlib must do first allocation to prevent OOM error 
             dlib_cnn_face_detector ( np.zeros ( (scale_to, scale_to, 3), dtype=np.uint8), 0 ) 
             dlib_detectors.append(dlib_cnn_face_detector)
-    
-        dlib_face_detector = dlib.get_frontal_face_detector()
-        dlib_face_detector ( np.zeros ( (scale_to, scale_to, 3), dtype=np.uint8), 0 )
-        dlib_detectors.append(dlib_face_detector)        
         
+        if detector == "hog" or detector == "all":
+            dlib_face_detector = dlib.get_frontal_face_detector()
+            dlib_face_detector ( np.zeros ( (scale_to, scale_to, 3), dtype=np.uint8), 0 )
+            dlib_detectors.append(dlib_face_detector)        
+    
         keras_model_path = os.path.join( os.path.dirname(__file__) , "2DFAN-4.h5" )
         if not os.path.exists(keras_model_path):
             print ("Error: Unable to find %s, reinstall the lib !" % (keras_model_path) )
@@ -134,8 +135,8 @@ def initialize(scale_to=2048):
         is_initialized = True
 
 #scale_to=2048 with dlib upsamples=0 for 3GB VRAM Windows 10 users        
-def extract(input_image, use_cnn_face_detector=True, all_faces=True, scale_to=2048 ):
-    initialize(scale_to)
+def extract(input_image, detector, verbose, all_faces=True, scale_to=2048):
+    initialize(detector, scale_to)
     global dlib_detectors
     global keras_model
     
@@ -147,16 +148,10 @@ def extract(input_image, use_cnn_face_detector=True, all_faces=True, scale_to=20
     input_images = [input_image, input_image_bgr]
  
     detected_faces = []
-    if use_cnn_face_detector:
-        for detector, input_image in ((detector, input_image) for detector in dlib_detectors for input_image in input_images):
-            detected_faces = detector(input_image, 0)
-            if len(detected_faces) != 0:
-                break
-    else:        
-        for input_image in input_images:
-            detected_faces = dlib_detectors[1](input_image, 0)
-            if len(detected_faces) != 0:
-                break
+    for current_detector, input_image in ((current_detector, input_image) for current_detector in dlib_detectors for input_image in input_images):
+        detected_faces = current_detector(input_image, 0)
+        if len(detected_faces) != 0:
+            break
 
     landmarks = []
     if len(detected_faces) > 0:        
@@ -180,7 +175,7 @@ def extract(input_image, use_cnn_face_detector=True, all_faces=True, scale_to=20
             pts_img = get_pts_from_predict ( keras_model.predict (image)[-1][0], center, scale)
             pts_img = [ ( int(pt[0]/input_scale), int(pt[1]/input_scale) ) for pt in pts_img ]             
             landmarks.append ( ((  int(left/input_scale), int(top/input_scale), int(right/input_scale), int(bottom/input_scale) ),pts_img) )
-    else:
+    elif verbose:
         print("Warning: No faces were detected.")
         
-    return landmarks
\ No newline at end of file
+    return landmarks
diff --git a/lib/cli.py b/lib/cli.py
index 36d041c..522195d 100644
--- a/lib/cli.py
+++ b/lib/cli.py
@@ -146,7 +146,8 @@ class DirectoryProcessor(object):
             if face.r != 0: image = rotate_image(image, face.r)
             face.image = image[face.y : face.y + face.h, face.x : face.x + face.w]
             if self.filter is not None and not self.filter.check(face):
-                print('Skipping not recognized face!')
+                if self.arguments.verbose:
+                    print('Skipping not recognized face!')
                 continue
 
             yield faces_count, face
@@ -158,11 +159,12 @@ class DirectoryProcessor(object):
 
     def get_faces(self, image, rotation=0):
         faces_count = 0
-        faces = detect_faces(image, rotation, self.arguments.detector)
+        faces = detect_faces(image, self.arguments.detector, self.arguments.verbose, rotation)
         
         for face in faces:
             if self.filter is not None and not self.filter.check(face):
-                print('Skipping not recognized face!')
+                if self.arguments.verbose:
+                    print('Skipping not recognized face!')
                 continue
             yield faces_count, face
 
diff --git a/lib/faces_detect.py b/lib/faces_detect.py
index be453da..5ce4eb2 100644
--- a/lib/faces_detect.py
+++ b/lib/faces_detect.py
@@ -1,7 +1,7 @@
 from lib import FaceLandmarksExtractor
 
-def detect_faces(frame, rotation=0, model="hog"):
-    fd = FaceLandmarksExtractor.extract (frame, True if model == "cnn" else False )
+def detect_faces(frame, detector, verbose, rotation=0):
+    fd = FaceLandmarksExtractor.extract (frame, detector, verbose)
     for face in fd:
         x, y, right, bottom, landmarks = face[0][0], face[0][1], face[0][2], face[0][3], face[1]
         yield DetectedFace(frame[y: bottom, x: right], rotation, x, right - x, y, bottom - y, landmarksXY=landmarks)
@@ -17,4 +17,4 @@ class DetectedFace(object):
         self.landmarksXY = landmarksXY
 
     def landmarksAsXY(self):
-        return self.landmarksXY
\ No newline at end of file
+        return self.landmarksXY
diff --git a/scripts/extract.py b/scripts/extract.py
index 24e7a2e..09a76b6 100644
--- a/scripts/extract.py
+++ b/scripts/extract.py
@@ -22,7 +22,7 @@ class ExtractTrainingData(DirectoryProcessor):
     def add_optional_arguments(self, parser):
         parser.add_argument('-D', '--detector',
                             type=str,
-                            choices=("hog", "cnn"), # case sensitive because this is used to load a plugin.
+                            choices=("hog", "cnn", "all"), # case sensitive because this is used to load a plugin.
                             default="hog",
                             help="Detector to use. 'cnn' detects much more angles but will be much more resource intensive and may fail on large files.")
 
@@ -92,7 +92,8 @@ class ExtractTrainingData(DirectoryProcessor):
                         image = cv2.imread(filename)
                         self.faces_detected[os.path.basename(filename)] = self.handleImage(image, filename)
                     except Exception as e:
-                        print('Failed to extract from image: {}. Reason: {}'.format(filename, e))
+                        if self.arguments.verbose:
+                            print('Failed to extract from image: {}. Reason: {}'.format(filename, e))
                         pass
         finally:
             self.write_alignments()
@@ -102,7 +103,8 @@ class ExtractTrainingData(DirectoryProcessor):
             image = cv2.imread(filename)
             return filename, self.handleImage(image, filename)
         except Exception as e:
-            print('Failed to extract from image: {}. Reason: {}'.format(filename, e))
+            if self.arguments.verbose:
+                print('Failed to extract from image: {}. Reason: {}'.format(filename, e))
             pass
         return filename, []
 
