commit 8bd1389b1437ef490da6d9834d90f6f995d17e10
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Fri Jun 28 00:52:12 2019 +0100

    bugfix: Stop convert hanging at the last few frames on some input videos

diff --git a/lib/convert.py b/lib/convert.py
index 644846d..0ad6a10 100644
--- a/lib/convert.py
+++ b/lib/convert.py
@@ -73,10 +73,10 @@ class Converter():
                 disable_logging=disable_logging)(configfile=self.configfile, config=config)
         logger.debug("Loaded plugins: %s", self.adjustments)
 
-    def process(self, in_queue, out_queue):
+    def process(self, in_queue, out_queue, completion_queue=None):
         """ Process items from the queue """
-        logger.debug("Starting convert process. (in_queue: %s, out_queue: %s)",
-                     in_queue, out_queue)
+        logger.debug("Starting convert process. (in_queue: %s, out_queue: %s, completion_queue: "
+                     "%s)", in_queue, out_queue, completion_queue)
         while True:
             item = in_queue.get()
             if item == "EOF":
@@ -104,6 +104,9 @@ class Converter():
             logger.trace("Out queue put: %s", item["filename"])
             out_queue.put((item["filename"], image))
         logger.debug("Completed convert process")
+        # Signal that this process has finished
+        if completion_queue is not None:
+            completion_queue.put(1)
 
     def patch_image(self, predicted):
         """ Patch the image """
diff --git a/scripts/convert.py b/scripts/convert.py
index 6b36f3d..fa28261 100644
--- a/scripts/convert.py
+++ b/scripts/convert.py
@@ -5,7 +5,6 @@ import logging
 import re
 import os
 import sys
-from time import sleep
 from threading import Event
 
 import numpy as np
@@ -17,7 +16,7 @@ from lib.convert import Converter
 from lib.faces_detect import DetectedFace
 from lib.gpu_stats import GPUStats
 from lib.multithreading import MultiThread, PoolProcess, total_cpus
-from lib.queue_manager import queue_manager
+from lib.queue_manager import queue_manager, QueueEmpty
 from lib.utils import get_folder, get_image_paths, hash_image_file
 from plugins.extract.pipeline import Extractor
 from plugins.plugin_loader import PluginLoader
@@ -111,14 +110,26 @@ class Convert():
         logger.debug("Converting images")
         save_queue = queue_manager.get_queue("convert_out")
         patch_queue = queue_manager.get_queue("patch")
+        completion_queue = queue_manager.get_queue("patch_completed")
         pool = PoolProcess(self.converter.process, patch_queue, save_queue,
+                           completion_queue=completion_queue,
                            processes=self.pool_processes)
         pool.start()
+        completed_count = 0
         while True:
             self.check_thread_error()
             if self.disk_io.completion_event.is_set():
+                logger.debug("DiskIO completion event set. Joining Pool")
+                break
+            try:
+                completed = completion_queue.get(True, 1)
+            except QueueEmpty:
+                continue
+            completed_count += completed
+            logger.debug("Total process pools completed: %s of %s", completed_count, pool.procs)
+            if completed_count == pool.procs:
+                logger.debug("All processes completed. Joining Pool")
                 break
-            sleep(1)
         pool.join()
 
         logger.debug("Putting EOF")
diff --git a/scripts/fsmedia.py b/scripts/fsmedia.py
index c6454f9..e70819a 100644
--- a/scripts/fsmedia.py
+++ b/scripts/fsmedia.py
@@ -10,6 +10,7 @@ import os
 from pathlib import Path
 
 import cv2
+import imageio_ffmpeg as im_ffm
 import numpy as np
 
 from lib.aligner import Extract as AlignerExtract
@@ -144,9 +145,7 @@ class Images():
     def images_found(self):
         """ Number of images or frames """
         if self.is_video:
-            cap = cv2.VideoCapture(self.args.input_dir)  # pylint: disable=no-member
-            retval = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))  # pylint: disable=no-member
-            cap.release()
+            retval = int(im_ffm.count_frames_and_secs(self.args.input_dir)[0])
         else:
             retval = len(self.input_images)
         return retval
diff --git a/tools/lib_alignments/media.py b/tools/lib_alignments/media.py
index 42eb3d1..174aca2 100644
--- a/tools/lib_alignments/media.py
+++ b/tools/lib_alignments/media.py
@@ -7,6 +7,7 @@ import os
 from tqdm import tqdm
 
 import cv2
+import imageio_ffmpeg as im_ffm
 
 from lib.alignments import Alignments
 from lib.faces_detect import DetectedFace
@@ -102,7 +103,7 @@ class MediaLoader():
     def count(self):
         """ Number of faces or frames """
         if self.vid_cap:
-            retval = int(self.vid_cap.get(cv2.CAP_PROP_FRAME_COUNT))  # pylint: disable=no-member
+            retval = int(im_ffm.count_frames_and_secs(self.folder)[0])
         else:
             retval = len(self.file_list_sorted)
         return retval
