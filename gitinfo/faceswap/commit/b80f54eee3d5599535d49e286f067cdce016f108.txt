commit b80f54eee3d5599535d49e286f067cdce016f108
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Wed Jun 5 23:40:02 2019 +0100

    More responsive FaceSwap update code

diff --git a/lib/gui/menu.py b/lib/gui/menu.py
index 98809cf..c133648 100644
--- a/lib/gui/menu.py
+++ b/lib/gui/menu.py
@@ -10,6 +10,7 @@ import tkinter as tk
 from importlib import import_module
 from subprocess import Popen, PIPE, STDOUT
 
+from lib.multithreading import MultiThread
 from lib.Serializer import JSONSerializer
 
 from .utils import get_config
@@ -19,41 +20,86 @@ from .popup_configure import popup_config
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
 
 
-class MainMenuBar(tk.Menu):
+class MainMenuBar(tk.Menu):  # pylint:disable=too-many-ancestors
     """ GUI Main Menu Bar """
     def __init__(self, master=None):
         logger.debug("Initializing %s", self.__class__.__name__)
         super().__init__(master)
         self.root = master
-        self.config = get_config()
 
-        self.file_menu = tk.Menu(self, tearoff=0)
-        self.recent_menu = tk.Menu(self.file_menu, tearoff=0, postcommand=self.refresh_recent_menu)
+        self.file_menu = FileMenu(self)
         self.edit_menu = tk.Menu(self, tearoff=0)
-        self.tools_menu = tk.Menu(self, tearoff=0)
+        self.tools_menu = ToolsMenu(self)
 
-        self.build_file_menu()
+        self.add_cascade(label="File", menu=self.file_menu, underline=0)
         self.build_edit_menu()
-        self.build_tools_menu()
+        self.add_cascade(label="Tools", menu=self.tools_menu, underline=0)
         logger.debug("Initialized %s", self.__class__.__name__)
 
-    def build_file_menu(self):
+    def build_edit_menu(self):
+        """ Add the edit menu to the menu bar """
+        logger.debug("Building Edit menu")
+        configs = self.scan_for_configs()
+        for name in sorted(list(configs.keys())):
+            label = "Configure {} Plugins...".format(name.title())
+            config = configs[name]
+            self.edit_menu.add_command(
+                label=label,
+                underline=10,
+                command=lambda conf=(name, config), root=self.root: popup_config(conf, root))
+        self.add_cascade(label="Edit", menu=self.edit_menu, underline=0)
+        logger.debug("Built Edit menu")
+
+    def scan_for_configs(self):
+        """ Scan for config.ini file locations """
+        root_path = os.path.abspath(os.path.dirname(sys.argv[0]))
+        plugins_path = os.path.join(root_path, "plugins")
+        logger.debug("Scanning path: '%s'", plugins_path)
+        configs = dict()
+        for dirpath, _, filenames in os.walk(plugins_path):
+            if "_config.py" in filenames:
+                plugin_type = os.path.split(dirpath)[-1]
+                config = self.load_config(plugin_type)
+                configs[plugin_type] = config
+        logger.debug("Configs loaded: %s", sorted(list(configs.keys())))
+        return configs
+
+    @staticmethod
+    def load_config(plugin_type):
+        """ Load the config to generate config file if it doesn't exist and get filename """
+        # Load config to generate default if doesn't exist
+        mod = ".".join(("plugins", plugin_type, "_config"))
+        module = import_module(mod)
+        config = module.Config(None)
+        logger.debug("Found '%s' config at '%s'", plugin_type, config.configfile)
+        return config
+
+
+class FileMenu(tk.Menu):  # pylint:disable=too-many-ancestors
+    """ File menu items and functions """
+    def __init__(self, parent):
+        logger.debug("Initializing %s", self.__class__.__name__)
+        super().__init__(parent, tearoff=0)
+        self.root = parent.root
+        self.config = get_config()
+        self.recent_menu = tk.Menu(self, tearoff=0, postcommand=self.refresh_recent_menu)
+        self.build()
+        logger.debug("Initialized %s", self.__class__.__name__)
+
+    def build(self):
         """ Add the file menu to the menu bar """
         logger.debug("Building File menu")
-        self.file_menu.add_command(
-            label="Load full config...", underline=0, command=self.config.load)
-        self.file_menu.add_command(
-            label="Save full config...", underline=0, command=self.config.save)
-        self.file_menu.add_separator()
-        self.file_menu.add_cascade(label="Open recent", underline=6, menu=self.recent_menu)
-        self.file_menu.add_separator()
-        self.file_menu.add_command(
-            label="Reset all to default", underline=0, command=self.config.cli_opts.reset)
-        self.file_menu.add_command(
-            label="Clear all", underline=0, command=self.config.cli_opts.clear)
-        self.file_menu.add_separator()
-        self.file_menu.add_command(label="Quit", underline=0, command=self.root.close_app)
-        self.add_cascade(label="File", menu=self.file_menu, underline=0)
+        self.add_command(label="Load full config...", underline=0, command=self.config.load)
+        self.add_command(label="Save full config...", underline=0, command=self.config.save)
+        self.add_separator()
+        self.add_cascade(label="Open recent", underline=6, menu=self.recent_menu)
+        self.add_separator()
+        self.add_command(label="Reset all to default",
+                         underline=0,
+                         command=self.config.cli_opts.reset)
+        self.add_command(label="Clear all", underline=0, command=self.config.cli_opts.clear)
+        self.add_separator()
+        self.add_command(label="Quit", underline=0, command=self.root.close_app)
         logger.debug("Built File menu")
 
     def build_recent_menu(self):
@@ -69,9 +115,6 @@ class MainMenuBar(tk.Menu):
         for recent_item in recent_files:
             filename, command = recent_item
             logger.debug("processing: ('%s', %s)", filename, command)
-            if not os.path.isfile(filename):
-                logger.debug("File does not exist")
-                continue
             lbl_command = command if command else "All"
             self.recent_menu.add_command(
                 label="{} ({})".format(filename, lbl_command.title()),
@@ -97,111 +140,116 @@ class MainMenuBar(tk.Menu):
         self.recent_menu.delete(0, "end")
         self.build_recent_menu()
 
-    def build_edit_menu(self):
-        """ Add the edit menu to the menu bar """
-        logger.debug("Building Edit menu")
-        configs = self.scan_for_configs()
-        for name in sorted(list(configs.keys())):
-            label = "Configure {} Plugins...".format(name.title())
-            config = configs[name]
-            self.edit_menu.add_command(
-                label=label,
-                underline=10,
-                command=lambda conf=(name, config), root=self.root: popup_config(conf, root))
-        self.add_cascade(label="Edit", menu=self.edit_menu, underline=0)
-        logger.debug("Built Edit menu")
-
-    def scan_for_configs(self):
-        """ Scan for config.ini file locations """
-        root_path = os.path.abspath(os.path.dirname(sys.argv[0]))
-        plugins_path = os.path.join(root_path, "plugins")
-        logger.debug("Scanning path: '%s'", plugins_path)
-        configs = dict()
-        for dirpath, _, filenames in os.walk(plugins_path):
-            if "_config.py" in filenames:
-                plugin_type = os.path.split(dirpath)[-1]
-                config = self.load_config(plugin_type)
-                configs[plugin_type] = config
-        logger.debug("Configs loaded: %s", sorted(list(configs.keys())))
-        return configs
 
-    @staticmethod
-    def load_config(plugin_type):
-        """ Load the config to generate config file if it doesn't exist and get filename """
-        # Load config to generate default if doesn't exist
-        mod = ".".join(("plugins", plugin_type, "_config"))
-        module = import_module(mod)
-        config = module.Config(None)
-        logger.debug("Found '%s' config at '%s'", plugin_type, config.configfile)
-        return config
+class ToolsMenu(tk.Menu):  # pylint:disable=too-many-ancestors
+    """ Tools menu items and functions """
+    def __init__(self, parent):
+        logger.debug("Initializing %s", self.__class__.__name__)
+        super().__init__(parent, tearoff=0)
+        self.root = parent.root
+        self.build()
+        logger.debug("Initialized %s", self.__class__.__name__)
 
-    def build_tools_menu(self):
-        """ Add the file menu to the menu bar """
+    def build(self):
+        """ Build the tools menu """
         logger.debug("Building Tools menu")
-        self.tools_menu.add_command(
-            label="Check for updates...", underline=0, command=self.check_updates)
-        self.tools_menu.add_command(
-            label="Output System Information", underline=0, command=self.output_sysinfo)
-        self.add_cascade(label="Tools", menu=self.tools_menu, underline=0)
+        self.add_command(label="Check for updates...",
+                         underline=0,
+                         command=lambda action="update": self.in_thread(action))
+        self.add_command(label="Output System Information",
+                         underline=0,
+                         command=lambda action="output_sysinfo": self.in_thread(action))
         logger.debug("Built Tools menu")
 
+    def in_thread(self, action):
+        """ Perform selected action inside a thread """
+        logger.debug("Performing tools action: %s", action)
+        thread = MultiThread(getattr(self, action), thread_count=1)
+        thread.start()
+        logger.debug("Performed tools action: %s", action)
+
     @staticmethod
-    def output_sysinfo():
-        """ Output system information to console """
+    def clear_console():
+        """ Clear the console window """
         get_config().tk_vars["consoleclear"].set(True)
+
+    def output_sysinfo(self):
+        """ Output system information to console """
+        logger.debug("Obtaining system information")
+        self.root.config(cursor="watch")
+        self.clear_console()
+        print("Obtaining system information...")
         from lib.sysinfo import SysInfo
-        print(SysInfo().full_info())
+        info = SysInfo().full_info()
+        self.clear_console()
+        logger.debug("Obtained system information: %s", info)
+        print(info)
+        self.root.config(cursor="")
 
-    @staticmethod
-    def check_updates():
+    def update(self):
         """ Check for updates and clone repo """
-        get_config().tk_vars["consoleclear"].set(True)
+        logger.debug("Updating Faceswap")
+        self.root.config(cursor="watch")
+        self.clear_console()
         encoding = locale.getpreferredencoding()
+        logger.debug("Encoding: %s", encoding)
+        if self.check_for_updates(encoding):
+            self.do_update(encoding)
+        self.root.config(cursor="")
 
+    def check_for_updates(self, encoding):
+        """ Check whether an update is required """
         # Do the check
-        cmd = Popen("git remote update && git status -uno", shell=True, stdout=PIPE, stderr=STDOUT)
+        logger.info("Checking for updates...")
+        update = False
+        msg = ""
+        gitcmd = "git remote update && git status -uno"
+        cmd = Popen(gitcmd, shell=True, stdout=PIPE, stderr=STDOUT)
         stdout, _ = cmd.communicate()
         retcode = cmd.poll()
-        logger.debug("Check output: %s", stdout.decode(encoding))
-        logger.debug("Check returncode: %s", retcode)
+        logger.debug("'%s' output: %s", gitcmd, stdout.decode(encoding))
+        logger.debug("'%s' returncode: %s", gitcmd, retcode)
         if retcode != 0:
-            print("Git is not installed or you are not running a cloned repo. "
-                  "Unable to check for updates")
-            return
-        chk = stdout.decode(encoding).splitlines()
-
-        update = False
-        for line in chk:
-            if line.lower().startswith("your branch is ahead"):
-                print("Your branch is ahead of the remote repo. Not updating")
-                break
-            if line.lower().startswith("your branch is up to date"):
-                print("Faceswap is up to date.")
-                break
-            if line.lower().startswith("your branch is behind"):
-                update = True
-                break
-            if "have diverged" in line.lower():
-                print("Your branch has diverged from the remote repo. Not updating")
-                break
-        logger.debug("update: %s", update)
+            msg = ("Git is not installed or you are not running a cloned repo. "
+                   "Unable to check for updates")
+        else:
+            chk = stdout.decode(encoding).splitlines()
+            for line in chk:
+                if line.lower().startswith("your branch is ahead"):
+                    msg = "Your branch is ahead of the remote repo. Not updating"
+                    break
+                if line.lower().startswith("your branch is up to date"):
+                    msg = "Faceswap is up to date."
+                    break
+                if line.lower().startswith("your branch is behind"):
+                    update = True
+                    break
+                if "have diverged" in line.lower():
+                    msg = "Your branch has diverged from the remote repo. Not updating"
+                    break
+        self.clear_console()
         if not update:
-            return
+            logger.info(msg)
+        logger.debug("Checked for update. Update required: %s", update)
+        return update
 
-        # Do the update
-        print("A new version is available. Updating...")
-        cmd = Popen("git pull", shell=True, stdout=PIPE, stderr=STDOUT, bufsize=1)
+    @staticmethod
+    def do_update(encoding):
+        """ Update Faceswap """
+        logger.info("A new version is available. Updating...")
+        gitcmd = "git pull"
+        cmd = Popen(gitcmd, shell=True, stdout=PIPE, stderr=STDOUT, bufsize=1)
         while True:
             output = cmd.stdout.readline().decode(encoding)
             if output == "" and cmd.poll() is not None:
                 break
             if output:
-                logger.debug("Update output: '%s'", output.strip())
+                logger.debug("'%s' output: '%s'", gitcmd, output.strip())
                 print(output.strip())
         retcode = cmd.poll()
-        logger.debug("Update returncode: %s", retcode)
+        logger.debug("'%s' returncode: %s", gitcmd, retcode)
         if retcode != 0:
-            print("An error occurred during update. return code: {}".format(retcode))
-            return
-
-        print("\nPlease restart Faceswap to complete the update.")
+            msg = "An error occurred during update. return code: {}".format(retcode)
+        else:
+            msg = "Please restart Faceswap to complete the update."
+        logger.info(msg)
diff --git a/lib/gui/utils.py b/lib/gui/utils.py
index 0cd2d57..33dd859 100644
--- a/lib/gui/utils.py
+++ b/lib/gui/utils.py
@@ -556,6 +556,10 @@ class Config():
         """ Pop up load dialog for a saved config file """
         logger.debug("Loading config: (command: '%s')", command)
         if filename:
+            if not os.path.isfile(filename):
+                msg = "File does not exist: '{}'".format(filename)
+                logger.error(msg)
+                return
             with open(filename, "r") as cfgfile:
                 cfg = self.serializer.unmarshal(cfgfile.read())
         else:
