commit 2f0fe704af7d1a17d6a86475127c78db4cc151ec
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Sat Jul 6 16:27:11 2019 +0000

    Fixups
    
    GUI: Fix thumbnail calculation + add borders
    cv2-dnn aligner: Remove debug code
    Convert: FFMpeg plugin - retry muxing audio on failure and properly error handle

diff --git a/lib/gui/utils.py b/lib/gui/utils.py
index 9968020..4d80f51 100644
--- a/lib/gui/utils.py
+++ b/lib/gui/utils.py
@@ -11,7 +11,7 @@ from threading import Event, Thread
 from queue import Queue
 import numpy as np
 
-from PIL import Image, ImageTk
+from PIL import Image, ImageDraw, ImageTk
 
 from lib.Serializer import JSONSerializer
 from .tooltip import Tooltip
@@ -314,13 +314,18 @@ class Images():
         show_files = sorted(imagefiles, key=os.path.getctime)[start_idx: end_idx]
         for fname in show_files:
             img = Image.open(fname)
-            img.thumbnail((thumbnail_size, thumbnail_size))
+            width, height = img.size
+            scaling = thumbnail_size / max(width, height)
+            logger.debug("image width: %s, height: %s, scaling: %s", width, height, scaling)
+            img = img.resize((int(width * scaling), int(height * scaling)))
             if img.size[0] != img.size[1]:
                 # Pad to square
                 new_img = Image.new("RGB", (thumbnail_size, thumbnail_size))
                 new_img.paste(img, ((thumbnail_size - img.size[0])//2,
                                     (thumbnail_size - img.size[1])//2))
                 img = new_img
+            draw = ImageDraw.Draw(img)
+            draw.rectangle(((0, 0), (thumbnail_size, thumbnail_size)), outline="#E5E5E5", width=1)
             samples.append(np.array(img))
         samples = np.array(samples)
         logger.trace("Samples shape: %s", samples.shape)
diff --git a/plugins/convert/writer/ffmpeg.py b/plugins/convert/writer/ffmpeg.py
index b85ad20..a6f3383 100644
--- a/plugins/convert/writer/ffmpeg.py
+++ b/plugins/convert/writer/ffmpeg.py
@@ -6,7 +6,7 @@ from math import ceil
 
 import imageio
 import imageio_ffmpeg as im_ffm
-from ffmpy import FFmpeg
+from ffmpy import FFmpeg, FFRuntimeError
 
 from ._base import Output, logger
 
@@ -139,6 +139,22 @@ class Writer(Output):
                      inputs=inputs,
                      outputs=outputs)
         logger.debug("Executing: %s", ffm.cmd)
-        ffm.run()
+        # Sometimes ffmpy exits for no discernible reason, but then works on a later attempt,
+        # so take 5 shots at this
+        attempts = 5
+        for attempt in range(attempts):
+            logger.debug("Muxing attempt: %s", attempt + 1)
+            try:
+                ffm.run()
+            except FFRuntimeError as err:
+                logger.debug("ffmpy runtime error: %s", str(err))
+                if attempt != attempts - 1:
+                    continue
+                logger.error("There was a problem muxing audio. The output video has been "
+                             "created but you will need to mux audio yourself either with the "
+                             "EFFMpeg tool or an external application.")
+                os.rename(self.video_tmp_file, self.video_file)
+            break
         logger.debug("Removing temp file")
-        os.remove(self.video_tmp_file)
+        if os.path.isfile(self.video_tmp_file):
+            os.remove(self.video_tmp_file)
diff --git a/plugins/extract/align/cv2_dnn.py b/plugins/extract/align/cv2_dnn.py
index 22d2768..ecf3dcf 100644
--- a/plugins/extract/align/cv2_dnn.py
+++ b/plugins/extract/align/cv2_dnn.py
@@ -136,7 +136,6 @@ class Align(Aligner):
             top += abs(top)
 
         # Make sure box is always square.
-        print(right, left, bottom, top)
         assert ((right - left) == (bottom - top)), 'Box is not square.'
 
         return [left, top, right, bottom]
