commit 1cb67c585efe448791c1b4a3d3050b9f399a7fac
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Thu Aug 8 00:43:44 2019 +0100

    Move gaussian_blur to losses (fixes plaidml race condition)

diff --git a/lib/model/losses.py b/lib/model/losses.py
index 01ac133..95d77db 100644
--- a/lib/model/losses.py
+++ b/lib/model/losses.py
@@ -15,7 +15,6 @@ import numpy as np
 import tensorflow as tf
 from tensorflow.distributions import Beta
 
-from .masks import gaussian_blur
 from .normalization import InstanceNormalization
 if K.backend() == "plaidml.keras.backend":
     from plaidml.op import extract_image_patches
@@ -913,3 +912,31 @@ def ms_ssim_loss(y_true, y_pred):
     loss = K.expand_dims(expanded, axis=-1)
     # need to expand to [1,height,width] dimensions for Keras. modify to not be hard-coded
     return K.tile(loss, [1, 64, 64])
+
+
+# Gaussian Blur is here as it is only used for losses.
+# It was previously kept in lib/model/masks but the import of keras backend
+# breaks plaidml
+def gaussian_blur(radius=2.0):
+    """ From https://github.com/iperov/DeepFaceLab
+        Used for blurring mask in training """
+    def gaussian(var_x, radius, sigma):
+        return np.exp(-(float(var_x) - float(radius)) ** 2 / (2 * sigma ** 2))
+
+    def make_kernel(sigma):
+        kernel_size = max(3, int(2 * 2 * sigma + 1))
+        mean = np.floor(0.5 * kernel_size)
+        kernel_1d = np.array([gaussian(x, mean, sigma) for x in range(kernel_size)])
+        np_kernel = np.outer(kernel_1d, kernel_1d).astype(dtype=K.floatx())
+        kernel = np_kernel / np.sum(np_kernel)
+        return kernel
+
+    gauss_kernel = make_kernel(radius)
+    gauss_kernel = gauss_kernel[:, :, np.newaxis, np.newaxis]
+
+    def func(input_):
+        inputs = [input_[:, :, :, i:i + 1] for i in range(K.int_shape(input_)[-1])]
+        outputs = [K.conv2d(inp, K.constant(gauss_kernel), strides=(1, 1), padding="same")
+                   for inp in inputs]
+        return K.concatenate(outputs, axis=-1)
+    return func
diff --git a/lib/model/masks.py b/lib/model/masks.py
index 3745548..cb41bf7 100644
--- a/lib/model/masks.py
+++ b/lib/model/masks.py
@@ -5,7 +5,6 @@ import inspect
 import logging
 import sys
 
-import keras.backend as K
 import cv2
 import numpy as np
 
@@ -30,31 +29,6 @@ def get_default_mask():
     return default
 
 
-def gaussian_blur(radius=2.0):
-    """ From https://github.com/iperov/DeepFaceLab
-        Used for blurring mask in training """
-    def gaussian(var_x, radius, sigma):
-        return np.exp(-(float(var_x) - float(radius)) ** 2 / (2 * sigma ** 2))
-
-    def make_kernel(sigma):
-        kernel_size = max(3, int(2 * 2 * sigma + 1))
-        mean = np.floor(0.5 * kernel_size)
-        kernel_1d = np.array([gaussian(x, mean, sigma) for x in range(kernel_size)])
-        np_kernel = np.outer(kernel_1d, kernel_1d).astype(dtype=K.floatx())
-        kernel = np_kernel / np.sum(np_kernel)
-        return kernel
-
-    gauss_kernel = make_kernel(radius)
-    gauss_kernel = gauss_kernel[:, :, np.newaxis, np.newaxis]
-
-    def func(input_):
-        inputs = [input_[:, :, :, i:i + 1] for i in range(K.int_shape(input_)[-1])]
-        outputs = [K.conv2d(inp, K.constant(gauss_kernel), strides=(1, 1), padding="same")
-                   for inp in inputs]
-        return K.concatenate(outputs, axis=-1)
-    return func
-
-
 class Mask():
     """ Parent class for masks
 
diff --git a/plugins/train/model/_base.py b/plugins/train/model/_base.py
index b0a4728..cca6e90 100644
--- a/plugins/train/model/_base.py
+++ b/plugins/train/model/_base.py
@@ -21,8 +21,7 @@ from keras.utils import get_custom_objects, multi_gpu_model
 from lib import Serializer
 from lib.model.backup_restore import Backup
 from lib.model.losses import (DSSIMObjective, PenalizedLoss, gradient_loss, mask_loss_wrapper,
-                              generalized_loss, l_inf_norm, gmsd_loss)
-from lib.model.masks import gaussian_blur
+                              generalized_loss, l_inf_norm, gmsd_loss, gaussian_blur)
 from lib.model.nn_blocks import NNBlocks
 from lib.model.optimizers import Adam
 from lib.multithreading import MultiThread
