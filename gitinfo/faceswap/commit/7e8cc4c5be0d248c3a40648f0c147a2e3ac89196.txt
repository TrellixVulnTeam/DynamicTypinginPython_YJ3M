commit 7e8cc4c5be0d248c3a40648f0c147a2e3ac89196
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Sun Mar 3 13:05:25 2019 +0000

    Move mp logging functions to multithreading module

diff --git a/lib/multithreading.py b/lib/multithreading.py
index 55e9bb0..832a0ee 100644
--- a/lib/multithreading.py
+++ b/lib/multithreading.py
@@ -21,8 +21,9 @@ class PoolProcess():
 
         self.procs = self.set_procs(processes)
         ctx = mp.get_context("spawn")
-        self.pool = ctx.Pool(processes=self.procs)
-
+        self.pool = ctx.Pool(processes=self.procs,
+                             initializer=set_root_logger,
+                             initargs=(logger.getEffectiveLevel(), LOG_QUEUE))
         self._method = method
         self._kwargs = self.build_target_kwargs(in_queue, out_queue, kwargs)
         self._args = args
@@ -32,8 +33,6 @@ class PoolProcess():
     @staticmethod
     def build_target_kwargs(in_queue, out_queue, kwargs):
         """ Add standard kwargs to passed in kwargs list """
-        kwargs["log_init"] = set_root_logger
-        kwargs["log_queue"] = LOG_QUEUE
         kwargs["in_queue"] = in_queue
         kwargs["out_queue"] = out_queue
         return kwargs
@@ -83,10 +82,19 @@ class SpawnProcess(mp.context.SpawnProcess):
         kwargs["event"] = self.event
         kwargs["log_init"] = set_root_logger
         kwargs["log_queue"] = LOG_QUEUE
+        kwargs["log_level"] = logger.getEffectiveLevel()
         kwargs["in_queue"] = in_queue
         kwargs["out_queue"] = out_queue
         return kwargs
 
+    def run(self):
+        """ Add logger to spawned process """
+        logger_init = self._kwargs["log_init"]
+        log_queue = self._kwargs["log_queue"]
+        log_level = self._kwargs["log_level"]
+        logger_init(log_level, log_queue)
+        super().run()
+
     def start(self):
         """ Add logging to start function """
         logger.debug("Spawning Process: (name: '%s', args: %s, kwargs: %s, daemon: %s)",
diff --git a/plugins/extract/align/_base.py b/plugins/extract/align/_base.py
index b2b7c62..a0c35d1 100644
--- a/plugins/extract/align/_base.py
+++ b/plugins/extract/align/_base.py
@@ -25,7 +25,6 @@ from io import StringIO
 
 from lib.aligner import Extract
 from lib.gpu_stats import GPUStats
-from lib.faces_detect import DetectedFace
 
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
 
@@ -64,9 +63,6 @@ class Aligner():
         """ Inititalize the aligner
             Tasks to be run before any alignments are performed.
             Override for specific detector """
-        logger_init = kwargs["log_init"]
-        log_queue = kwargs["log_queue"]
-        logger_init(self.loglevel, log_queue)
         logger.debug("_base initialize %s: (PID: %s, args: %s, kwargs: %s)",
                      self.__class__.__name__, os.getpid(), args, kwargs)
         self.init = kwargs["event"]
@@ -91,7 +87,7 @@ class Aligner():
             self.align(*args, **kwargs)
         except Exception:  # pylint: disable=broad-except
             logger.error("Caught exception in child process: %s", os.getpid())
-            # Display traceback if in initialization stage 
+            # Display traceback if in initialization stage
             if not self.init.is_set():
                 logger.exception("Traceback:")
             tb_buffer = StringIO()
diff --git a/plugins/extract/detect/_base.py b/plugins/extract/detect/_base.py
index 440343f..ef8f935 100644
--- a/plugins/extract/detect/_base.py
+++ b/plugins/extract/detect/_base.py
@@ -15,7 +15,6 @@ import logging
 import os
 import traceback
 from io import StringIO
-from math import sqrt
 
 import cv2
 import dlib
@@ -80,9 +79,6 @@ class Detector():
         """ Inititalize the detector
             Tasks to be run before any detection is performed.
             Override for specific detector """
-        logger_init = kwargs["log_init"]
-        log_queue = kwargs["log_queue"]
-        logger_init(self.loglevel, log_queue)
         logger.debug("initialize %s (PID: %s, args: %s, kwargs: %s)",
                      self.__class__.__name__, os.getpid(), args, kwargs)
         self.init = kwargs.get("event", False)
