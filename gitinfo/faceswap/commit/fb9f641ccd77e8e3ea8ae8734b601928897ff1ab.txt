commit fb9f641ccd77e8e3ea8ae8734b601928897ff1ab
Author: Clorr <colin@clorr.fr>
Date:   Thu Dec 21 21:31:05 2017 +0100

    Adding a DetectedFace class to retain face data

diff --git a/convert_photo.py b/convert_photo.py
index 060a14e..879f0f9 100644
--- a/convert_photo.py
+++ b/convert_photo.py
@@ -12,9 +12,9 @@ images_SRC = get_image_paths('original')
 
 for fn in images_SRC:
     image = cv2.imread(fn)
-    for ((x, w), (y, h), face) in crop_faces(image):
-        new_face = convert_one_image(cv2.resize(face, (256, 256)))
-        image[slice(y, y + h), slice(x, x + w)] = cv2.resize(new_face, (w, h))
+    for face in crop_faces(image):
+        new_face = convert_one_image(cv2.resize(face.image, (256, 256)))
+        image[slice(face.y, face.y + face.h), slice(face.x, face.x + face.w)] = cv2.resize(new_face, (face.w, face.h))
 
     output_file = output_dir / Path(fn).name
     cv2.imwrite(str(output_file), image)
diff --git a/extract.py b/extract.py
index b23a5ac..56a4dd5 100644
--- a/extract.py
+++ b/extract.py
@@ -49,20 +49,20 @@ for fn in images_SRC:
 
     try:
         image = cv2.imread(fn)
-        for (idx, (p1, p2, img)) in enumerate(crop_faces(image)):
+        for (idx, face) in enumerate(crop_faces(image)):
             if idx > 0 and arguments.verbose:
                 print('- Found more than one face!')
                 verify_output = True
 
             # resize and save
-            final = cv2.resize(img, (256, 256))
+            final = cv2.resize(face.image, (256, 256))
             output_file = output_dir / Path(fn).stem
             cv2.imwrite(str(output_file) + str(idx) + Path(fn).suffix, final)
             faces_detected = faces_detected + 1
 
         images_processed = images_processed + 1
     except Exception as e:
-        print('Failed to extract from image: {}' . fn)
+        print('Failed to extract from image: {}. reason: {}'.format(fn,e))
 
 print('-------------------------')
 print('Images found:        {}'.format(images_found))
diff --git a/lib/DetectedFace.py b/lib/DetectedFace.py
new file mode 100644
index 0000000..02bd54d
--- /dev/null
+++ b/lib/DetectedFace.py
@@ -0,0 +1,9 @@
+
+class DetectedFace(object):
+    def __init__(self, image, x, w, y, h, landmarks):
+        self.image = image
+        self.x = x
+        self.w = w
+        self.y = y
+        self.h = h
+        self.landmarks = landmarks
\ No newline at end of file
diff --git a/lib/faces_detect.py b/lib/faces_detect.py
index 3adc65a..8618ba7 100644
--- a/lib/faces_detect.py
+++ b/lib/faces_detect.py
@@ -1,9 +1,9 @@
 import cv2
+from DetectedFace import DetectedFace
 
 # Give right path to the xml file or put it directly in current folder
 face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
 
-
 def crop_faces(image):
     # Add : cv.EqualizeHist(image, image) ?
     gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
@@ -11,4 +11,4 @@ def crop_faces(image):
     faces = face_cascade.detectMultiScale(gray, 1.3, 5)
 
     for (x, y, w, h) in faces:
-        yield ((x, w), (y, h), image[y: y + h, x: x + w])
+        yield DetectedFace(image[y: y + h, x: x + w], x, w, y, h, None)
