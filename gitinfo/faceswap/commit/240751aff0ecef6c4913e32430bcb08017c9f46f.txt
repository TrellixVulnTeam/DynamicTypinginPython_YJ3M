commit 240751aff0ecef6c4913e32430bcb08017c9f46f
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Sun Jun 23 17:57:09 2019 +0100

    PlaidML Updates
    
    - Add fan-amd details to Cli
    - Update Extract Parallel Processing rules for plaidML
    - Handle missing plaidML lib on amd flag
    - Pass through correct loglevel from GPUStats to plaidml_tools

diff --git a/lib/cli.py b/lib/cli.py
index b660ce0..f366b8a 100644
--- a/lib/cli.py
+++ b/lib/cli.py
@@ -114,8 +114,10 @@ class ScriptExecutor():
         log_setup(arguments.loglevel, arguments.logfile, self.command, is_gui)
         logger.debug("Executing: %s. PID: %s", self.command, os.getpid())
         if hasattr(arguments, "amd") and arguments.amd:
-            from lib.plaidml_tools import setup_plaidml
-            setup_plaidml(arguments.loglevel)
+            plaidml_found = self.setup_amd(arguments.loglevel)
+            if not plaidml_found:
+                safe_shutdown()
+                exit(1)
         try:
             script = self.import_script()
             process = script(arguments)
@@ -134,6 +136,20 @@ class ScriptExecutor():
         finally:
             safe_shutdown()
 
+    @staticmethod
+    def setup_amd(loglevel):
+        """ Test for plaidml and setup for AMD """
+        logger.debug("Setting up for AMD")
+        try:
+            import plaidml  # noqa pylint:disable=unused-import
+        except ImportError:
+            logger.error("PlaidML not found. Run `pip install plaidml-keras` for AMD support")
+            return False
+        from lib.plaidml_tools import setup_plaidml
+        setup_plaidml(loglevel)
+        logger.debug("setup up for PlaidML")
+        return True
+
 
 class Radio(argparse.Action):  # pylint: disable=too-few-public-methods
     """ Adds support for the GUI Radio buttons
@@ -516,7 +532,8 @@ class ExtractArgs(ExtractConvertArgs):
             "type": str.lower,
             "choices":  PluginLoader.get_available_extractors("detect"),
             "default": "mtcnn",
-            "help": "R|Detector to use. Some of these have configurable settings in "
+            "help": "R|Detector to use. NB: Unless stated, all aligners will run on CPU for AMD "
+                    "GPUs. Some of these have configurable settings in "
                     "'/config/extract.ini' or 'Edit > Configure Extract Plugins':"
                     "\nL|'cv2-dnn': A CPU only extractor, is the least reliable, but uses least "
                     "resources and runs fast on CPU. Use this if not using a GPU and time is "
@@ -531,12 +548,15 @@ class ExtractArgs(ExtractConvertArgs):
             "type": str.lower,
             "choices": PluginLoader.get_available_extractors("align"),
             "default": "fan",
-            "help": "R|Aligner to use."
+            "help": "R|Aligner to use. NB: Unless stated, all aligners will run on CPU for AMD "
+                    "GPUs."
                     "\nL|'cv2-dnn': A cpu only CNN based landmark detector. Faster, less "
                     "resource intensive, but less accurate. Only use this if not using a gpu "
                     " and time is important."
-                    "\nL|'fan': Face Alignment Network. Best aligner. "
-                    "GPU heavy, slow when not running on GPU"})
+                    "\nL|'fan': Face Alignment Network. Best aligner. GPU heavy, slow when not "
+                    "running on GPU"
+                    "\nL|'fan-amd': Face Alignment Network. Uses Keras backend to support AMD "
+                    "Cards. Best aligner. GPU heavy, slow when not running on GPU"})
         argument_list.append({"opts": ("-nm", "--normalization"),
                               "action": Radio,
                               "type": str.lower,
@@ -580,7 +600,10 @@ class ExtractArgs(ExtractConvertArgs):
                               "help": "Don't run extraction in parallel. Will run detection first "
                                       "then alignment (2 passes). Useful if VRAM is at a premium. "
                                       "Only has an effect if both the aligner and detector use "
-                                      "the GPU, otherwise this is automatically off."})
+                                      "the GPU, otherwise this is automatically off. NB: AMD "
+                                      "cards do not support parallel processing, so if both "
+                                      "aligner and detector use an AMD GPU this will "
+                                      "automatically be enabled."})
         argument_list.append({"opts": ("-sz", "--size"),
                               "type": int,
                               "action": Slider,
diff --git a/lib/gpu_stats.py b/lib/gpu_stats.py
index 6b13121..cd40c69 100644
--- a/lib/gpu_stats.py
+++ b/lib/gpu_stats.py
@@ -65,9 +65,11 @@ class GPUStats():
         """ Initialize pynvml """
         if not self.initialized:
             if K.backend() == "plaidml.keras.backend":
+                loglevel = "INFO"
                 if self.logger:
                     self.logger.debug("plaidML Detected. Using plaidMLStats")
-                self.plaid = plaidlib(log=log)
+                    loglevel = self.logger.getEffectiveLevel()
+                self.plaid = plaidlib(loglevel=loglevel, log=log)
             elif IS_MACOS:
                 if self.logger:
                     self.logger.debug("macOS Detected. Using pynvx")
diff --git a/lib/plaidml_tools.py b/lib/plaidml_tools.py
index 67d2e36..8ac2935 100644
--- a/lib/plaidml_tools.py
+++ b/lib/plaidml_tools.py
@@ -23,7 +23,8 @@ class PlaidMLStats():
             # when obtaining system stats on crash
             global _LOGGER  # pylint:disable=global-statement
             _LOGGER = logging.getLogger(__name__)  # pylint:disable=invalid-name
-            _LOGGER.debug("Initializing: %s: (loglevel: %s)", self.__class__.__name__, loglevel)
+            _LOGGER.debug("Initializing: %s: (loglevel: %s, log: %s)",
+                          self.__class__.__name__, loglevel, log)
         self.initialize(loglevel)
         self.ctx = plaidml.Context()
         self.supported_devices = self.get_supported_devices()
@@ -121,7 +122,10 @@ class PlaidMLStats():
         """ Set the PlaidML Verbosity """
         if _LOGGER:
             _LOGGER.debug("Setting PlaidML Loglevel: %s", loglevel)
-        numeric_level = getattr(logging, loglevel.upper(), None)
+        if isinstance(loglevel, int):
+            numeric_level = loglevel
+        else:
+            numeric_level = getattr(logging, loglevel.upper(), None)
         if numeric_level < 10:
             # DEBUG Logging
             plaidml._internal_set_vlog(1)  # pylint:disable=protected-access
diff --git a/plugins/extract/pipeline.py b/plugins/extract/pipeline.py
index d7ee84b..a93b012 100644
--- a/plugins/extract/pipeline.py
+++ b/plugins/extract/pipeline.py
@@ -113,6 +113,12 @@ class Extractor():
                          "Enabling parallel processing.")
             return True
 
+        if gpu_stats.is_plaidml and (self.detector.supports_plaidml and
+                                     self.aligner.supports_plaidml):
+            logger.debug("Both aligner and detector support plaidML. Disabling parallel "
+                         "processing.")
+            return False
+
         if gpu_stats.device_count == 0:
             logger.debug("No GPU detected. Enabling parallel processing.")
             return True
