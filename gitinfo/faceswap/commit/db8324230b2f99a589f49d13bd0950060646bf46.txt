commit db8324230b2f99a589f49d13bd0950060646bf46
Author: bryanlyon <bryanlyon@mail.weber.edu>
Date:   Wed Mar 14 03:53:33 2018 -0700

    Fix gan128 (#288)
    
    * Complete parity fix for GAN128.
    
    This brings GAN128 to parity with GAN in terms of multi GPU support.
    
    Unfortunately, it fails to run due to a naming error.
    
    ('The name "model_4" is used 2 times in the model. All layer names should be unique. Layer names: ', ['input_6', 'lambda_1', 'lambda_2', 'model_6', 'model_4', 'model_4'])
    
    * Fix for GAN128 until #287 can be resolved
    
    Issue #287 details why GAN128 cannot be fixed until Keras is fixed upstream.
    
    * Changes to PR as per Clorr
    
    Made changes to error handling to split into separate PR as requested by Clorr.

diff --git a/plugins/Model_GAN128/Model.py b/plugins/Model_GAN128/Model.py
index 88e0583..ba399ea 100644
--- a/plugins/Model_GAN128/Model.py
+++ b/plugins/Model_GAN128/Model.py
@@ -12,6 +12,8 @@ from keras.optimizers import Adam
 from lib.PixelShuffler import PixelShuffler
 from .instance_normalization import InstanceNormalization
 
+from keras.utils import multi_gpu_model
+
 netGAH5 = 'netGA_GAN128.h5'
 netGBH5 = 'netGB_GAN128.h5'
 netDAH5 = 'netDA_GAN128.h5'
@@ -43,6 +45,7 @@ class GANModel():
     def __init__(self, model_dir, gpus):
         self.model_dir = model_dir
         self.gpus = gpus
+        assert self.gpus == 1, "Error: GAN128 cannot use multiple gpus right now. See https://github.com/deepfakes/faceswap/issues/287"
 
         optimizer = Adam(1e-4, 0.5)
 
@@ -128,7 +131,7 @@ class GANModel():
 
         self.netGA_sm = netGA
         self.netGB_sm = netGB
-        
+
         try:
             netGA.load_weights(str(self.model_dir / netGAH5))
             netGB.load_weights(str(self.model_dir / netGBH5))
@@ -181,8 +184,12 @@ class GANModel():
         return True
 
     def save_weights(self):
-        self.netGA.save_weights(str(self.model_dir / netGAH5))
-        self.netGB.save_weights(str(self.model_dir / netGBH5))
+        if self.gpus > 1:
+            self.netGA_sm.save_weights(str(self.model_dir / netGAH5))
+            self.netGB_sm.save_weights(str(self.model_dir / netGBH5))
+        else:
+            self.netGA.save_weights(str(self.model_dir / netGAH5))
+            self.netGB.save_weights(str(self.model_dir / netGBH5))
         self.netDA.save_weights(str(self.model_dir / netDAH5))
         self.netDB.save_weights(str(self.model_dir / netDBH5))
         print ("Models saved.")
