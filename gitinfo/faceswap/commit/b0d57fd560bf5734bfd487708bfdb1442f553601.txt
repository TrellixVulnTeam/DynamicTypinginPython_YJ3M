commit b0d57fd560bf5734bfd487708bfdb1442f553601
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Sun Jun 30 16:04:22 2019 +0000

    Color code log messages in GUI Console

diff --git a/lib/gui/utils.py b/lib/gui/utils.py
index ac0a60f..a2d1f92 100644
--- a/lib/gui/utils.py
+++ b/lib/gui/utils.py
@@ -3,6 +3,7 @@
 import logging
 import os
 import platform
+import re
 import sys
 import tkinter as tk
 from tkinter import filedialog, ttk
@@ -468,6 +469,7 @@ class ConsoleOut(ttk.Frame):  # pylint: disable=too-many-ancestors
         self.set_console_clear_var_trace()
         self.debug = debug
         self.build_console()
+        self.add_tags()
         logger.debug("Initialized %s", self.__class__.__name__)
 
     def set_console_clear_var_trace(self):
@@ -479,7 +481,7 @@ class ConsoleOut(ttk.Frame):  # pylint: disable=too-many-ancestors
     def build_console(self):
         """ Build and place the console """
         logger.debug("Build console")
-        self.console.config(width=100, height=6, bg="gray90", fg="black")
+        self.console.config(width=100, height=6, bg="#1E1E1E", fg="white")
         self.console.pack(side=tk.LEFT, anchor=tk.N, fill=tk.BOTH, expand=True)
 
         scrollbar = ttk.Scrollbar(self, command=self.console.yview)
@@ -489,6 +491,17 @@ class ConsoleOut(ttk.Frame):  # pylint: disable=too-many-ancestors
         self.redirect_console()
         logger.debug("Built console")
 
+    def add_tags(self):
+        """ Add tags to text widget to color based on output """
+        logger.debug("Adding text color tags")
+        self.console.tag_config("default", foreground="#A6A7A8")
+        self.console.tag_config("stderr", foreground="#E25056")
+        self.console.tag_config("info", foreground="#98CCFD")
+        self.console.tag_config("verbose", foreground="#6A9955")
+        self.console.tag_config("warning", foreground="#CE9178")
+        self.console.tag_config("critical", foreground="red")
+        self.console.tag_config("error", foreground="red")
+
     def redirect_console(self):
         """ Redirect stdout/stderr to console frame """
         logger.debug("Redirect console")
@@ -518,13 +531,24 @@ class SysOutRouter():
                      self.__class__.__name__, console, out_type)
         self.console = console
         self.out_type = out_type
-        self.color = ("black" if out_type == "stdout" else "red")
+        self.recolor = re.compile(r".+?(\s\d+:\d+:\d+\s)(?P<lvl>[A-Z]+)\s")
         logger.debug("Initialized %s", self.__class__.__name__)
 
+    def get_tag(self, string):
+        """ Set the tag based on regex of log output """
+        if self.out_type == "stderr":
+            # Output all stderr in red
+            return self.out_type
+
+        output = self.recolor.match(string)
+        if not output:
+            return "default"
+        tag = output.groupdict()["lvl"].strip().lower()
+        return tag
+
     def write(self, string):
         """ Capture stdout/stderr """
-        self.console.insert(tk.END, string, self.out_type)
-        self.console.tag_config(self.out_type, foreground=self.color)
+        self.console.insert(tk.END, string, self.get_tag(string))
         self.console.see(tk.END)
 
     @staticmethod
