commit 2a2dda0ca94bd37ac84b531f78c129201d9f1f17
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Mon Mar 11 18:15:25 2019 +0000

    Add radio buttons for certain GUI options

diff --git a/lib/cli.py b/lib/cli.py
index 78c5143..1f8646a 100644
--- a/lib/cli.py
+++ b/lib/cli.py
@@ -120,6 +120,20 @@ class ScriptExecutor():
             safe_shutdown()
 
 
+class Radio(argparse.Action):  # pylint: disable=too-few-public-methods
+    """ Adds support for the GUI Radio buttons
+
+        Just a wrapper class to tell the gui to use radio buttons instead of combo boxes
+        """
+    def __init__(self, option_strings, dest, nargs=None, **kwargs):
+        if nargs is not None:
+            raise ValueError("nargs not allowed")
+        super().__init__(option_strings, dest, **kwargs)
+
+    def __call__(self, parser, namespace, values, option_string=None):
+        setattr(namespace, self.dest, values)
+
+
 class Slider(argparse.Action):  # pylint: disable=too-few-public-methods
     """ Adds support for the GUI slider
 
@@ -443,6 +457,7 @@ class ExtractArgs(ExtractConvertArgs):
                                       "fallback."})
         argument_list.append({
             "opts": ("-D", "--detector"),
+            "action": Radio,
             "type": str.lower,
             "choices":  PluginLoader.get_available_extractors(
                 "detect"),
@@ -460,6 +475,7 @@ class ExtractArgs(ExtractConvertArgs):
                     "\n\t is a lot more resource intensive"})
         argument_list.append({
             "opts": ("-A", "--aligner"),
+            "action": Radio,
             "type": str.lower,
             "choices": PluginLoader.get_available_extractors(
                 "align"),
@@ -602,18 +618,21 @@ class ConvertArgs(ExtractConvertArgs):
                                       "specified, all faces will be "
                                       "converted"})
         argument_list.append({"opts": ("-t", "--trainer"),
+                              "action": Radio,
                               "type": str.lower,
                               "choices": PluginLoader.get_available_models(),
                               "default": PluginLoader.get_default_model(),
                               "help": "Select the trainer that was used to "
                                       "create the model"})
         argument_list.append({"opts": ("-c", "--converter"),
+                              "action": Radio,
                               "type": str.lower,
                               "choices": PluginLoader.get_available_converters(),
                               "default": "masked",
                               "help": "Converter to use"})
         argument_list.append({
             "opts": ("-M", "--mask-type"),
+            "action": Radio,
             "type": str.lower,
             "dest": "mask_type",
             "choices": ["ellipse",
@@ -656,6 +675,7 @@ class ConvertArgs(ExtractConvertArgs):
                               "default": 1,
                               "help": "Number of GPUs to use for conversion"})
         argument_list.append({"opts": ("-sh", "--sharpen"),
+                              "action": Radio,
                               "type": str.lower,
                               "dest": "sharpen_image",
                               "choices": ["box_filter", "gaussian_filter", "none"],
@@ -775,26 +795,27 @@ class TrainArgs(FaceSwapArgs):
                                       "training data will be stored. "
                                       "Defaults to 'model'"})
         argument_list.append({"opts": ("-t", "--trainer"),
+                              "action": Radio,
                               "type": str.lower,
                               "choices": PluginLoader.get_available_models(),
                               "default": PluginLoader.get_default_model(),
-                              "help": "R|Select which trainer to use. Trainers can be\n"
-                                      "configured from the edit menu or the config folder.\n"
-                                      "original: The original model created by /u/deepfakes.\n"
-                                      "dfaker: 64px in/128px out model from dfaker.\n"
-                                      "\tEnable 'warp-to-landmarks' for full dfaker method.\n"
-                                      "dfl-h128. 128px in/out model from deepfacelab\n"
-                                      "iae: A model that uses intermediate layers to try to \n"
-                                      "\tget better details\n"
-                                      "lightweight. A lightweight model for low-end cards. Don't\n"
-                                      "\texpect great results. Can train as low as 1.6GB with\n"
-                                      "\tbatch size 8.\n"
-                                      "unbalanced. 128px in/out model from andenixa. The\n"
-                                      "\tautoencoders are unbalanced so B>A swaps won't work so\n"
-                                      "well. Very configurable,\n"
-                                      "villain: 128px in/out model from villainguy. Very resource"
-                                      "\n\thungry (11GB for batchsize 16). Good for details, but\n"
-                                      "\tmore susceptible to color differences"})
+                              "help": "R|Select which trainer to use. Trainers can be"
+                                      "\nconfigured from the edit menu or the config folder."
+                                      "\n'original': The original model created by /u/deepfakes."
+                                      "\n'dfaker': 64px in/128px out model from dfaker."
+                                      "\n\tEnable 'warp-to-landmarks' for full dfaker method."
+                                      "\n'dfl-h128'. 128px in/out model from deepfacelab"
+                                      "\n'iae': A model that uses intermediate layers to try to"
+                                      "\n\tget better details"
+                                      "\n'lightweight': A lightweight model for low-end cards."
+                                      "\n\tDon't expect great results. Can train as low as 1.6GB"
+                                      "\n\twith batch size 8."
+                                      "\n'unbalanced': 128px in/out model from andenixa. The"
+                                      "\n\tautoencoders are unbalanced so B>A swaps won't work so"
+                                      "\n\twell. Very configurable,"
+                                      "\n'villain': 128px in/out model from villainguy. Very"
+                                      "\n\tresource hungry (11GB for batchsize 16). Good for"
+                                      "\n\tdetails, but more susceptible to color differences"})
         argument_list.append({"opts": ("-s", "--save-interval"),
                               "type": int,
                               "action": Slider,
diff --git a/lib/gui/command.py b/lib/gui/command.py
index 2b6e608..f414a7e 100644
--- a/lib/gui/command.py
+++ b/lib/gui/command.py
@@ -131,13 +131,12 @@ class OptionsFrame(ttk.Frame):  # pylint: disable=too-many-ancestors
         lbl.pack(padx=5, pady=5, side=tk.LEFT, anchor=tk.N)
 
         chkframe = ttk.Frame(container)
-        chkframe.pack(side=tk.BOTTOM, expand=True)
-
         chkleft = ttk.Frame(chkframe, name="leftFrame")
-        chkleft.pack(side=tk.LEFT, anchor=tk.N, expand=True)
-
         chkright = ttk.Frame(chkframe, name="rightFrame")
-        chkright.pack(side=tk.RIGHT, anchor=tk.N, expand=True)
+
+        chkframe.pack(fill=tk.X, expand=True)
+        chkleft.pack(padx=5, pady=5, fill=tk.X, expand=True, side=tk.LEFT, anchor=tk.N)
+        chkright.pack(padx=5, pady=5, fill=tk.X, expand=True, side=tk.RIGHT, anchor=tk.N)
         logger.debug("Added Options CheckButtons Frame")
 
         return container, chkframe
@@ -205,7 +204,7 @@ class OptionControl():
             dflt = ' '.join(str(val) for val in dflt)
         if ctl == ttk.Checkbutton:
             dflt = self.option.get("default", False)
-        choices = self.option["choices"] if ctl == ttk.Combobox else None
+        choices = self.option["choices"] if ctl in(ttk.Combobox, ttk.Radiobutton) else None
         min_max = self.option["min_max"] if ctl == ttk.Scale else None
 
         ctlframe = self.build_one_control_frame()
@@ -265,25 +264,42 @@ class OptionControl():
             self.add_browser_buttons(frame, sysbrowser, var)
 
         if control == ttk.Checkbutton:
-            self.checkbutton_to_checkframe(control,
-                                           control_title,
-                                           var,
-                                           helptext)
+            self.checkbutton_to_checkframe(control, control_title, var, helptext)
+        elif control == ttk.Radiobutton:
+            self.radio_control(frame, control_title, var, choices, helptext)
         elif control == ttk.Scale:
-            self.slider_control(control,
-                                frame,
-                                var,
-                                min_max,
-                                helptext)
+            self.slider_control(control, frame, var, min_max, helptext)
         else:
-            self.control_to_optionsframe(control,
-                                         frame,
-                                         var,
-                                         choices,
-                                         helptext)
+            self.control_to_optionsframe(control, frame, var, choices, helptext)
         logger.debug("Built control: '%s'", control_title)
         return var
 
+    @staticmethod
+    def radio_control(frame, control_title, var, choices, helptext):
+        """ Create a group of radio buttons """
+        logger.debug("Adding radio group: %s", control_title)
+        radio_frame_left = ttk.Frame(frame)
+        radio_frame_middle = ttk.Frame(frame)
+        radio_frame_right = ttk.Frame(frame)
+
+        radio_frame_left.pack(padx=5, pady=5, fill=tk.X, expand=True, side=tk.LEFT, anchor=tk.N)
+        radio_frame_middle.pack(padx=5, pady=5, fill=tk.X, expand=True, side=tk.LEFT, anchor=tk.N)
+        radio_frame_right.pack(padx=5, pady=5, fill=tk.X, expand=True, side=tk.RIGHT, anchor=tk.N)
+
+        for idx, choice in enumerate(choices):
+            pos = idx + 1
+            if pos % 3 == 0:
+                radio_frame = radio_frame_right
+            elif (pos + 1) % 3 == 0:
+                radio_frame = radio_frame_middle
+            else:
+                radio_frame = radio_frame_left
+
+            ctl = ttk.Radiobutton(radio_frame, text=choice.title(), value=choice, variable=var)
+            ctl.pack(anchor=tk.W)
+            Tooltip(ctl, text=helptext, wraplength=720)
+        logger.debug("Added radio group: '%s'", control_title)
+
     def checkbutton_to_checkframe(self, control, control_title, var, helptext):
         """ Add checkbuttons to the checkbutton frame """
         logger.debug("Add control checkframe: '%s'", control_title)
@@ -294,7 +310,7 @@ class OptionControl():
         frame = leftframe if chkbtn_count % 2 == 0 else rightframe
 
         ctl = control(frame, variable=var, text=control_title)
-        ctl.pack(side=tk.TOP, padx=5, pady=5, anchor=tk.W)
+        ctl.pack(side=tk.TOP, anchor=tk.W)
 
         Tooltip(ctl, text=helptext, wraplength=200)
         logger.debug("Added control checkframe: '%s'", control_title)
diff --git a/lib/gui/options.py b/lib/gui/options.py
index 32eb40e..8906bbc 100644
--- a/lib/gui/options.py
+++ b/lib/gui/options.py
@@ -126,6 +126,8 @@ class CliOptions():
                                                         action_option)
         elif option.get("min_max", None):
             ctl = ttk.Scale
+        elif option.get("action", "") == cli.Radio:
+            ctl = ttk.Radiobutton
         elif option.get("choices", "") != "":
             ctl = ttk.Combobox
         elif option.get("action", "") == "store_true":
diff --git a/tools/cli.py b/tools/cli.py
index d243561..5b03bb3 100644
--- a/tools/cli.py
+++ b/tools/cli.py
@@ -2,7 +2,7 @@
 """ Command Line Arguments for tools """
 from lib.cli import FaceSwapArgs
 from lib.cli import (ContextFullPaths, DirFullPaths,
-                     FileFullPaths, SaveFileFullPaths, Slider)
+                     FileFullPaths, SaveFileFullPaths, Radio, Slider)
 from lib.utils import _image_extensions
 
 
@@ -20,8 +20,8 @@ class AlignmentsArgs(FaceSwapArgs):
         align_eyes = "\n\tCan optionally use the align-eyes switch (-ae)."
         argument_list = list()
         argument_list.append({
-
             "opts": ("-j", "--job"),
+            "action": Radio,
             "type": str,
             "choices": ("draw", "extract", "extract-large", "manual", "merge",
                         "missing-alignments", "missing-frames", "legacy", "leftover-faces",
@@ -113,6 +113,7 @@ class AlignmentsArgs(FaceSwapArgs):
                                       "data in. Defaults to same as source."})
         argument_list.append({
             "opts": ("-o", "--output"),
+            "action": Radio,
             "type": str,
             "choices": ("console", "file", "move"),
             "default": "console",
@@ -170,6 +171,7 @@ class EffmpegArgs(FaceSwapArgs):
     def get_argument_list(self):
         argument_list = list()
         argument_list.append({"opts": ('-a', '--action'),
+                              "action": Radio,
                               "dest": "action",
                               "choices": ("extract", "gen-vid", "get-fps",
                                           "get-info", "mux-audio", "rescale",
@@ -229,6 +231,7 @@ class EffmpegArgs(FaceSwapArgs):
                                       "videos."})
 
         argument_list.append({"opts": ("-ef", "--extract-filetype"),
+                              "action": Radio,
                               "choices": _image_extensions,
                               "dest": "extract_ext",
                               "default": ".png",
@@ -368,6 +371,7 @@ class SortArgs(FaceSwapArgs):
                                       "faces."})
 
         argument_list.append({"opts": ('-fp', '--final-process'),
+                              "action": Radio,
                               "type": str,
                               "choices": ("folders", "rename"),
                               "dest": 'final_process',
@@ -392,6 +396,7 @@ class SortArgs(FaceSwapArgs):
                                       "same directory."})
 
         argument_list.append({"opts": ('-s', '--sort-by'),
+                              "action": Radio,
                               "type": str,
                               "choices": ("blur", "face", "face-cnn",
                                           "face-cnn-dissim", "face-dissim",
@@ -404,6 +409,7 @@ class SortArgs(FaceSwapArgs):
                                       "Default: hist"})
 
         argument_list.append({"opts": ('-g', '--group-by'),
+                              "action": Radio,
                               "type": str,
                               "choices": ("blur", "face", "face-cnn",
                                           "face-yaw", "hist"),
