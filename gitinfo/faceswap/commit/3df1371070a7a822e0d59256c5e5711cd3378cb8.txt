commit 3df1371070a7a822e0d59256c5e5711cd3378cb8
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Sun Nov 25 17:58:08 2018 +0000

    Fix face filter

diff --git a/lib/faces_detect.py b/lib/faces_detect.py
index 54d0e3c..09bfef5 100644
--- a/lib/faces_detect.py
+++ b/lib/faces_detect.py
@@ -7,8 +7,9 @@ from lib.aligner import Extract as AlignerExtract, get_align_mat
 
 class DetectedFace():
     """ Detected face and landmark information """
-    def __init__(self, image=None, x=None, w=None, y=None, h=None,
-                 frame_dims=None, landmarksXY=None):
+    def __init__(  # pylint: disable=invalid-name
+            self, image=None, x=None, w=None, y=None, h=None,
+            frame_dims=None, landmarksXY=None):
         self.image = image
         self.x = x
         self.w = w
@@ -31,7 +32,7 @@ class DetectedFace():
         bottom = self.y + self.h
         return d_rectangle(left, top, right, bottom)
 
-    def from_dlib_rect(self, d_rect):
+    def from_dlib_rect(self, d_rect, image=None):
         """ Set Bounding Box from a Dlib Rectangle """
         if not isinstance(d_rect, d_rectangle):
             raise ValueError("Supplied Bounding Box is not a dlib.rectangle.")
@@ -39,6 +40,8 @@ class DetectedFace():
         self.w = d_rect.right() - d_rect.left()
         self.y = d_rect.top()
         self.h = d_rect.bottom() - d_rect.top()
+        if image.any():
+            self.image_to_face(image)
 
     def image_to_face(self, image):
         """ Crop an image around bounding box to the face
diff --git a/scripts/extract.py b/scripts/extract.py
index 9abc5a4..d5fc15c 100644
--- a/scripts/extract.py
+++ b/scripts/extract.py
@@ -196,7 +196,7 @@ class Extract():
         detected_faces = faces["detected_faces"]
         for idx, face in enumerate(detected_faces):
             detected_face = DetectedFace()
-            detected_face.from_dlib_rect(face)
+            detected_face.from_dlib_rect(face, image)
             detected_face.landmarksXY = landmarks[idx]
             detected_face.frame_dims = image.shape[:2]
             detected_face.load_aligned(image,
