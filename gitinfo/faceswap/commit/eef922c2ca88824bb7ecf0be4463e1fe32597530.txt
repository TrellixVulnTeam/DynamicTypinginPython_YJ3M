commit eef922c2ca88824bb7ecf0be4463e1fe32597530
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Tue Apr 30 22:35:38 2019 +0000

    Bugfix: Filter and NFilter for convert

diff --git a/scripts/convert.py b/scripts/convert.py
index dade0e9..944d917 100644
--- a/scripts/convert.py
+++ b/scripts/convert.py
@@ -162,6 +162,7 @@ class DiskIO():
         self.alignments = alignments
         self.images = images
         self.args = arguments
+        self.pre_process = PostProcess(arguments)
         self.completion_event = Event()
         self.frame_ranges = self.get_frame_ranges()
         self.writer = self.get_writer()
@@ -298,6 +299,7 @@ class DiskIO():
 
             detected_faces = self.get_detected_faces(filename, image, extract_queue)
             item = dict(filename=filename, image=image, detected_faces=detected_faces)
+            self.pre_process.do_actions(item)
             self.load_queue.put(item)
 
         self.load_queue.put("EOF")
@@ -396,7 +398,6 @@ class Predict():
         self.serializer = Serializer.get_serializer("json")
         self.faces_count = 0
         self.verify_output = False
-        self.pre_process = PostProcess(arguments)
         self.model = self.load_model()
         self.predictor = self.model.converter(self.args.swap_model)
         self.queues = dict()
@@ -478,9 +479,7 @@ class Predict():
             if item != "EOF":
                 logger.trace("Got from queue: '%s'", item["filename"])
                 faces_count = len(item["detected_faces"])
-                if faces_count != 0:
-                    self.pre_process.do_actions(item)
-                    self.faces_count += faces_count
+                self.faces_count += faces_count
                 if faces_count > 1:
                     self.verify_output = True
                     logger.verbose("Found more than one face in an image! '%s'",
@@ -496,10 +495,15 @@ class Predict():
                 continue
 
             if batch:
+                logger.trace("Batching to predictor. Frames: %s, Faces: %s",
+                             len(batch), faces_seen)
                 detected_batch = [detected_face for item in batch
                                   for detected_face in item["detected_faces"]]
-                feed_faces = self.compile_feed_faces(detected_batch)
-                predicted = self.predict(feed_faces)
+                if faces_seen != 0:
+                    feed_faces = self.compile_feed_faces(detected_batch)
+                    predicted = self.predict(feed_faces)
+                else:
+                    predicted = list()
 
                 self.queue_out_frames(batch, predicted)
 
diff --git a/scripts/fsmedia.py b/scripts/fsmedia.py
index 1c03af8..71cfea7 100644
--- a/scripts/fsmedia.py
+++ b/scripts/fsmedia.py
@@ -414,14 +414,14 @@ class FaceFilter(PostProcessAction):
         """ Filter in/out wanted/unwanted faces """
         if not self.filter:
             return
-
         ret_faces = list()
-        for idx, detected_face in enumerate(output_item["detected_faces"]):
-            if not self.filter.check(detected_face["face"]):
+        for idx, detect_face in enumerate(output_item["detected_faces"]):
+            check_item = detect_face["face"] if isinstance(detect_face, dict) else detect_face
+            if not self.filter.check(check_item):
                 logger.verbose("Skipping not recognized face! Frame: %s Face %s",
-                               detected_face["file_location"].parts[-1], idx)
+                               output_item["filename"], idx)
                 continue
             logger.trace("Accepting recognised face. Frame: %s. Face: %s",
-                         detected_face["file_location"].parts[-1], idx)
-            ret_faces.append(detected_face)
+                         output_item["filename"], idx)
+            ret_faces.append(detect_face)
         output_item["detected_faces"] = ret_faces
