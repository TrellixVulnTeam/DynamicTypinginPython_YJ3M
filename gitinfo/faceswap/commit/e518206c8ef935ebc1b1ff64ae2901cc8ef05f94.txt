commit e518206c8ef935ebc1b1ff64ae2901cc8ef05f94
Author: Clorr <github@clorr.fr>
Date:   Wed Jan 3 14:01:02 2018 +0100

    Adding PluginLoader

diff --git a/plugins/Convert_Adjust.py b/plugins/Convert_Adjust.py
index 4d23ca9..ca062ae 100644
--- a/plugins/Convert_Adjust.py
+++ b/plugins/Convert_Adjust.py
@@ -9,7 +9,7 @@ class Convert(object):
         self.use_smooth_mask=True
         self.use_avg_color_adjust=True
 
-    def convert_one_image( self, original, face_detected ):
+    def patch_image( self, original, face_detected ):
         #assert image.shape == (256, 256, 3)
         image = cv2.resize(face_detected.image, (256, 256))
         crop = slice(48, 208)
diff --git a/plugins/Convert_Masked.py b/plugins/Convert_Masked.py
index a29eb1c..0ec50e3 100644
--- a/plugins/Convert_Masked.py
+++ b/plugins/Convert_Masked.py
@@ -19,7 +19,7 @@ class Convert():
         self.seamlessClone = False
         self.maskType = 'Rect' # Choose in 'FaceHullAndRect','FaceHull','Rect'
 
-    def convert_one_image( self, image, face_detected ):
+    def patch_image( self, image, face_detected ):
         size = 64
         image_size = image.shape[1], image.shape[0]
 
@@ -29,6 +29,9 @@ class Convert():
 
         image_mask = self.get_image_mask( image, new_face, face_detected, mat, image_size )
 
+        return self.apply_new_face(image, new_face, image_mask, mat, image_size, size)
+
+    def apply_new_face(self, image, new_face, image_mask, mat, image_size, size):
         base_image = numpy.copy( image )
         new_image = numpy.copy( image )
 
diff --git a/plugins/PluginLoader.py b/plugins/PluginLoader.py
new file mode 100644
index 0000000..3b66cb8
--- /dev/null
+++ b/plugins/PluginLoader.py
@@ -0,0 +1,15 @@
+
+class PluginLoader():
+    @staticmethod
+    def get_extractor(name="Align"):
+        module = PluginLoader._import("Extract_{0}".format(name))
+        return getattr(module, "Extract")
+    
+    @staticmethod
+    def get_converter(name="Adjust"):
+        module = PluginLoader._import("Convert_{0}".format(name))
+        return getattr(module, "Convert")
+    
+    @staticmethod
+    def _import(name):
+        return __import__(name, globals(), locals(), [], 1)
diff --git a/plugins/__init__.py b/plugins/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/scripts/convert.py b/scripts/convert.py
index d2f4b88..896ed60 100644
--- a/scripts/convert.py
+++ b/scripts/convert.py
@@ -8,8 +8,7 @@ from lib.model import autoencoder_A
 from lib.model import autoencoder_B
 from lib.model import encoder, decoder_A, decoder_B
 
-#from plugins.Convert_Adjust import Convert
-from plugins.Convert_Masked import Convert
+from plugins.PluginLoader import PluginLoader
 
 class ConvertImage(DirectoryProcessor):
     filename = ''
@@ -45,7 +44,7 @@ class ConvertImage(DirectoryProcessor):
         decoder_A.load_weights(model_dir + face_A)
         decoder_B.load_weights(model_dir + face_B)
 
-        converter = Convert(autoencoder_B)
+        converter = PluginLoader.get_converter("Masked")(autoencoder_B)
 
         try:
             image = cv2.imread(filename)
@@ -54,7 +53,7 @@ class ConvertImage(DirectoryProcessor):
                     print('- Found more than one face!')
                     self.verify_output = True
 
-                image = converter.convert_one_image(image, face)
+                image = converter.patch_image(image, face)
                 self.faces_detected = self.faces_detected + 1
 
             output_file = self.output_dir / Path(filename).name
diff --git a/scripts/extract.py b/scripts/extract.py
index b8e7be3..3b84da4 100644
--- a/scripts/extract.py
+++ b/scripts/extract.py
@@ -3,7 +3,7 @@ import cv2
 from pathlib import Path
 from lib.cli import DirectoryProcessor
 from lib.faces_detect import detect_faces
-from plugins.Extract_Align import Extract
+from plugins.PluginLoader import PluginLoader
 
 class ExtractTrainingData(DirectoryProcessor):
     def create_parser(self, subparser, command, description):
@@ -16,7 +16,8 @@ class ExtractTrainingData(DirectoryProcessor):
         )
         
     def process_image(self, filename):
-        extractor = Extract()
+        extractor = PluginLoader.get_extractor("Align")()
+
         try:
             image = cv2.imread(filename)
             for (idx, face) in enumerate(detect_faces(image)):
