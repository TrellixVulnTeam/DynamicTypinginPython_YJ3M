commit 9461c597736ad6ac419a392edeca9221aa53e238
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Thu Apr 9 14:33:29 2020 +0100

    Bugfixes and minor updates:
      - Remove preview option from effmpeg tool
      - Remove json filetypes from GUI for alignments files
      - Capture and raise empty timelapse folder errors
      - Move convert to use centralized ImagesLoader

diff --git a/lib/gui/utils.py b/lib/gui/utils.py
index e26d151..e9dad56 100644
--- a/lib/gui/utils.py
+++ b/lib/gui/utils.py
@@ -140,7 +140,7 @@ class FileHandler():  # pylint:disable=too-few-public-methods
         """ dict: The accepted extensions for each file type for opening/saving """
         all_files = ("All files", "*.*")
         filetypes = {"default": (all_files,),
-                     "alignments": [("Faceswap Alignments", "*.fsa *.json"),
+                     "alignments": [("Faceswap Alignments", "*.fsa"),
                                     all_files],
                      "config_project": [("Faceswap Project files", "*.fsw"), all_files],
                      "config_task": [("Faceswap Task files", "*.fst"), all_files],
diff --git a/scripts/convert.py b/scripts/convert.py
index b9cbdff..23da2a0 100644
--- a/scripts/convert.py
+++ b/scripts/convert.py
@@ -14,12 +14,12 @@ import tensorflow as tf
 from keras.backend.tensorflow_backend import set_session
 from tqdm import tqdm
 
-from scripts.fsmedia import Alignments, Images, PostProcess, finalize
+from scripts.fsmedia import Alignments, PostProcess, finalize
 from lib.serializer import get_serializer
 from lib.convert import Converter
 from lib.faces_detect import DetectedFace
 from lib.gpu_stats import GPUStats
-from lib.image import read_image_hash
+from lib.image import read_image_hash, ImagesLoader
 from lib.multithreading import MultiThread, total_cpus
 from lib.queue_manager import queue_manager
 from lib.utils import FaceswapError, get_folder, get_image_paths
@@ -52,10 +52,10 @@ class Convert():  # pylint:disable=too-few-public-methods
         self._args = arguments
 
         self._patch_threads = None
-        self._images = Images(self._args)
+        self._images = ImagesLoader(self._args.input_dir, fast_count=True)
         self._alignments = Alignments(self._args, False, self._images.is_video)
 
-        self._opts = OptionalActions(self._args, self._images.input_images, self._alignments)
+        self._opts = OptionalActions(self._args, self._images.file_list, self._alignments)
 
         self._add_queues()
         self._disk_io = DiskIO(self._alignments, self._images, arguments)
@@ -90,9 +90,9 @@ class Convert():  # pylint:disable=too-few-public-methods
         if self._args.singleprocess:
             retval = 1
         elif self._args.jobs > 0:
-            retval = min(self._args.jobs, total_cpus(), self._images.images_found)
+            retval = min(self._args.jobs, total_cpus(), self._images.count)
         else:
-            retval = min(total_cpus(), self._images.images_found)
+            retval = min(total_cpus(), self._images.count)
         retval = 1 if retval == 0 else retval
         logger.debug(retval)
         return retval
@@ -158,7 +158,7 @@ class Convert():  # pylint:disable=too-few-public-methods
             self._disk_io.save_thread.join()
             queue_manager.terminate_queues()
 
-            finalize(self._images.images_found,
+            finalize(self._images.count,
                      self._predictor.faces_count,
                      self._predictor.verify_output)
             logger.debug("Completed Conversion")
@@ -215,7 +215,7 @@ class DiskIO():
     ----------
     alignments: :class:`lib.alignmnents.Alignments`
         The alignments for the input video
-    images: :class:`scripts.fsmedia.Images`
+    images: :class:`lib.image.ImagesLoader`
         The input images
     arguments: :class:`argparse.Namespace`
         The arguments that were passed to the convert process as generated from Faceswap's command
@@ -288,7 +288,7 @@ class DiskIO():
         if self._frame_ranges and not self._args.keep_unchanged:
             retval = sum([fr[1] - fr[0] + 1 for fr in self._frame_ranges])
         else:
-            retval = self._images.images_found
+            retval = self._images.count
         logger.debug(retval)
         return retval
 
@@ -331,10 +331,10 @@ class DiskIO():
 
         minframe, maxframe = None, None
         if self._images.is_video:
-            minframe, maxframe = 1, self._images.images_found
+            minframe, maxframe = 1, self._images.count
         else:
             indices = [int(self._imageidxre.findall(os.path.basename(filename))[0])
-                       for filename in self._images.input_images]
+                       for filename in self._images.file_list]
             if indices:
                 minframe, maxframe = min(indices), max(indices)
         logger.debug("minframe: %s, maxframe: %s", minframe, maxframe)
@@ -594,9 +594,7 @@ class DiskIO():
          """
         self._extractor.input_queue.put(ExtractMedia(filename, image))
         faces = next(self._extractor.detected_faces())
-
-        final_faces = [face for face in faces.detected_faces]
-        return final_faces
+        return faces.detected_faces
 
     # Saving tasks
     def _save(self, completion_event):
@@ -1082,7 +1080,7 @@ class OptionalActions():  # pylint:disable=too-few-public-methods
             logger.warning("Aligned directory not found. All faces listed in the "
                            "alignments file will be converted")
         else:
-            file_list = [path for path in get_image_paths(input_aligned_dir)]
+            file_list = get_image_paths(input_aligned_dir)
             logger.info("Getting Face Hashes for selected Aligned Images")
             for face in tqdm(file_list, desc="Hashing Faces"):
                 face_hashes.append(read_image_hash(face))
diff --git a/scripts/train.py b/scripts/train.py
index 947dccb..7976d43 100644
--- a/scripts/train.py
+++ b/scripts/train.py
@@ -15,7 +15,8 @@ from keras.backend.tensorflow_backend import set_session
 from lib.image import read_image
 from lib.keypress import KBHit
 from lib.multithreading import MultiThread
-from lib.utils import get_folder, get_image_paths, deprecation_warning
+from lib.utils import (get_folder, get_image_paths, deprecation_warning, FaceswapError,
+                       _image_extensions)
 from plugins.plugin_loader import PluginLoader
 
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
@@ -85,21 +86,22 @@ class Train():
                 not self._args.timelapse_input_b and
                 not self._args.timelapse_output):
             return None
-        if not self._args.timelapse_input_a or not self._args.timelapse_input_b:
-            raise ValueError("To enable the timelapse, you have to supply "
-                             "all the parameters (--timelapse-input-A and "
-                             "--timelapse-input-B).")
-
-        timelapse_output = None
-        if self._args.timelapse_output is not None:
-            timelapse_output = str(get_folder(self._args.timelapse_output))
-
-        for folder in (self._args.timelapse_input_a,
-                       self._args.timelapse_input_b,
-                       timelapse_output):
-            if folder is not None and not os.path.isdir(folder):
-                raise ValueError("The Timelapse path '{}' does not exist".format(folder))
+        if (not self._args.timelapse_input_a or
+                not self._args.timelapse_input_b or
+                not self._args.timelapse_output):
+            raise FaceswapError("To enable the timelapse, you have to supply all the parameters "
+                                "(--timelapse-input-A, --timelapse-input-B and "
+                                "--timelapse-output).")
 
+        timelapse_output = str(get_folder(self._args.timelapse_output))
+
+        for folder in (self._args.timelapse_input_a, self._args.timelapse_input_b):
+            if folder is not None and not os.path.isdir(folder):
+                raise FaceswapError("The Timelapse path '{}' does not exist".format(folder))
+            exts = [os.path.splitext(fname)[-1] for fname in os.listdir(folder)]
+            if not any(ext in _image_extensions for ext in exts):
+                raise FaceswapError("The Timelapse path '{}' does not contain any valid "
+                                    "images".format(folder))
         kwargs = {"input_a": self._args.timelapse_input_a,
                   "input_b": self._args.timelapse_input_b,
                   "output": timelapse_output}
diff --git a/tools/effmpeg/cli.py b/tools/effmpeg/cli.py
index bd10282..1ff08fc 100644
--- a/tools/effmpeg/cli.py
+++ b/tools/effmpeg/cli.py
@@ -1,7 +1,5 @@
 #!/usr/bin/env python3
 """ Command Line Arguments for tools """
-from argparse import SUPPRESS
-
 from lib.cli import FaceSwapArgs
 from lib.cli import ContextFullPaths, FileFullPaths, Radio
 from lib.utils import _image_extensions
@@ -53,7 +51,6 @@ class EffmpegArgs(FaceSwapArgs):
                                       "\nL|'rotate' rotate video."
                                       "\nL|'slice' cuts a portion of the video into a separate "
                                       "video file."})
-
         argument_list.append({"opts": ('-i', '--input'),
                               "action": ContextFullPaths,
                               "dest": "input",
@@ -63,7 +60,6 @@ class EffmpegArgs(FaceSwapArgs):
                               "required": True,
                               "action_option": "-a",
                               "filetypes": "video"})
-
         argument_list.append({"opts": ('-o', '--output'),
                               "action": ContextFullPaths,
                               "group": "data",
@@ -83,7 +79,6 @@ class EffmpegArgs(FaceSwapArgs):
                                       "encoding.",
                               "action_option": "-a",
                               "filetypes": "video"})
-
         argument_list.append({"opts": ('-r', '--reference-video'),
                               "action": FileFullPaths,
                               "dest": "ref_vid",
@@ -92,7 +87,6 @@ class EffmpegArgs(FaceSwapArgs):
                               "help": "Path to reference video if 'input' "
                                       "was not a video.",
                               "filetypes": "video"})
-
         argument_list.append({"opts": ('-fps', '--fps'),
                               "type": str,
                               "dest": "fps",
@@ -103,7 +97,6 @@ class EffmpegArgs(FaceSwapArgs):
                                       "will make the program try to get the "
                                       "fps from the input or reference "
                                       "videos."})
-
         argument_list.append({"opts": ("-ef", "--extract-filetype"),
                               "action": Radio,
                               "choices": _image_extensions,
@@ -116,7 +109,6 @@ class EffmpegArgs(FaceSwapArgs):
                                       "will take the most storage space. "
                                       "'.png' will be slower but will take "
                                       "less storage."})
-
         argument_list.append({"opts": ('-s', '--start'),
                               "type": str,
                               "dest": "start",
@@ -128,7 +120,6 @@ class EffmpegArgs(FaceSwapArgs):
                                       "format. You can also enter the time "
                                       "with or without the colons, e.g. "
                                       "00:0000 or 026010."})
-
         argument_list.append({"opts": ('-e', '--end'),
                               "type": str,
                               "dest": "end",
@@ -140,7 +131,6 @@ class EffmpegArgs(FaceSwapArgs):
                                       "time will be used and the duration "
                                       "will be ignored. "
                                       "Default: 00:00:00, in HH:MM:SS."})
-
         argument_list.append({"opts": ('-d', '--duration'),
                               "type": str,
                               "dest": "duration",
@@ -156,7 +146,6 @@ class EffmpegArgs(FaceSwapArgs):
                                       "format. You can also enter the time "
                                       "with or without the colons, e.g. "
                                       "00:0000 or 026010."})
-
         argument_list.append({"opts": ('-m', '--mux-audio'),
                               "action": "store_true",
                               "dest": "mux_audio",
@@ -167,7 +156,6 @@ class EffmpegArgs(FaceSwapArgs):
                                       "option is only used for the 'gen-vid' "
                                       "action. 'mux-audio' action has this "
                                       "turned on implicitly."})
-
         argument_list.append(
             {"opts": ('-tr', '--transpose'),
              "choices": ("(0, 90CounterClockwise&VerticalFlip)",
@@ -184,7 +172,6 @@ class EffmpegArgs(FaceSwapArgs):
                      "or the long command name, "
                      "e.g. to use (1, 90Clockwise) "
                      "-tr 1 or -tr 90Clockwise"})
-
         argument_list.append({"opts": ('-de', '--degrees'),
                               "type": str,
                               "dest": "degrees",
@@ -192,7 +179,6 @@ class EffmpegArgs(FaceSwapArgs):
                               "group": "rotate",
                               "help": "Rotate the video clockwise by the "
                                       "given number of degrees."})
-
         argument_list.append({"opts": ('-sc', '--scale'),
                               "type": str,
                               "dest": "scale",
@@ -200,19 +186,6 @@ class EffmpegArgs(FaceSwapArgs):
                               "default": "1920x1080",
                               "help": "Set the new resolution scale if the "
                                       "chosen action is 'rescale'."})
-
-        argument_list.append({"opts": ('-pr', '--preview'),
-                              "action": "store_true",
-                              "dest": "preview",
-                              "default": False,
-                              # TODO Fix preview or remove
-                              "help": SUPPRESS,
-                              # "help": "Uses ffplay to preview the effects of "
-                              #         "actions that have a video output. "
-                              #         "Currently preview does not work when "
-                              #         "muxing audio."
-                              })
-
         argument_list.append({"opts": ('-q', '--quiet'),
                               "action": "store_true",
                               "dest": "quiet",
@@ -222,7 +195,6 @@ class EffmpegArgs(FaceSwapArgs):
                                       "serious errors are printed. If both "
                                       "quiet and verbose are set, verbose "
                                       "will override quiet."})
-
         argument_list.append({"opts": ('-v', '--verbose'),
                               "action": "store_true",
                               "dest": "verbose",
@@ -231,5 +203,4 @@ class EffmpegArgs(FaceSwapArgs):
                               "help": "Increases output verbosity. If both "
                                       "quiet and verbose are set, verbose "
                                       "will override quiet."})
-
         return argument_list
diff --git a/tools/effmpeg/effmpeg.py b/tools/effmpeg/effmpeg.py
index 32eedbd..025b7d4 100644
--- a/tools/effmpeg/effmpeg.py
+++ b/tools/effmpeg/effmpeg.py
@@ -5,9 +5,6 @@ Created on 2018-03-16 15:14
 
 @author: Lev Velykoivanenko (velykoivanenko.lev@gmail.com)
 """
-# TODO: integrate preview into gui window
-# TODO: add preview support when muxing audio
-#       -> figure out if ffmpeg | ffplay would work on windows and mac
 import logging
 import os
 import subprocess
@@ -128,8 +125,6 @@ class Effmpeg():
 
     _actions_req_fps = ["extract", "gen_vid"]
     _actions_req_ref_video = ["mux_audio"]
-    _actions_can_preview = ["gen_vid", "mux_audio", "rescale", "rotate",
-                            "slice"]
     _actions_can_use_ref_video = ["gen_vid"]
     _actions_have_dir_output = ["extract"]
     _actions_have_vid_output = ["gen_vid", "mux_audio", "rescale", "rotate",
@@ -269,11 +264,6 @@ class Effmpeg():
                              self.args.degrees)
                 sys.exit(1)
 
-        # Set executable based on whether previewing or not
-        if self.args.preview and self.args.action in self._actions_can_preview:
-            self.exe = 'ffplay'
-            self.output = DataItem()
-
         # Set verbosity of output
         self.__set_verbosity(self.args.quiet, self.args.verbose)
 
@@ -298,7 +288,6 @@ class Effmpeg():
                   "transpose": self.args.transpose,
                   "scale": self.args.scale,
                   "print_": self.print_,
-                  "preview": self.args.preview,
                   "exe": self.exe}
         action = getattr(self, self.args.action)
         action(**kwargs)
@@ -322,23 +311,18 @@ class Effmpeg():
 
     @staticmethod
     def gen_vid(input_=None, output=None, fps=None,  # pylint:disable=unused-argument
-                mux_audio=False, ref_vid=None, preview=False, exe=None, **kwargs):
+                mux_audio=False, ref_vid=None, exe=None, **kwargs):
         """ Generate Video """
-        logger.debug("input: %s, output: %s, fps: %s, mux_audio: %s, ref_vid: '%s', preview: %s, "
-                     "exe: '%s'", input, output, fps, mux_audio, ref_vid, preview, exe)
+        logger.debug("input: %s, output: %s, fps: %s, mux_audio: %s, ref_vid: '%s'exe: '%s'",
+                     input, output, fps, mux_audio, ref_vid, exe)
         filename = Effmpeg.__get_extracted_filename(input_.path)
         _input_opts = Effmpeg._common_ffmpeg_args[:]
         _input_path = os.path.join(input_.path, filename)
         _fps_arg = '-r ' + str(fps) + ' '
         _input_opts += _fps_arg + "-f image2 "
-        _output_opts = _fps_arg
-        if not preview:
-            _output_opts = '-y ' + _output_opts + ' -c:v libx264'
+        _output_opts = '-y ' + _fps_arg + ' -c:v libx264'
         if mux_audio:
             _ref_vid_opts = '-c copy -map 0:0 -map 1:1'
-            if preview:
-                raise ValueError("Preview for gen-vid with audio muxing is "
-                                 "not supported.")
             _output_opts = _ref_vid_opts + ' ' + _output_opts
             _inputs = OrderedDict([(_input_path, _input_opts), (ref_vid.path, None)])
         else:
@@ -380,19 +364,17 @@ class Effmpeg():
 
     @staticmethod
     def rescale(input_=None, output=None, scale=None,  # pylint:disable=unused-argument
-                preview=False, exe=None, **kwargs):
+                exe=None, **kwargs):
         """ Rescale Video """
         _input_opts = Effmpeg._common_ffmpeg_args[:]
-        _output_opts = '-vf scale="' + str(scale) + '"'
-        if not preview:
-            _output_opts = '-y ' + _output_opts
+        _output_opts = '-y -vf scale="' + str(scale) + '"'
         _inputs = {input_.path: _input_opts}
         _outputs = {output.path: _output_opts}
         Effmpeg.__run_ffmpeg(exe=exe, inputs=_inputs, outputs=_outputs)
 
     @staticmethod
     def rotate(input_=None, output=None, degrees=None,  # pylint:disable=unused-argument
-               transpose=None, preview=None, exe=None, **kwargs):
+               transpose=None, exe=None, **kwargs):
         """ Rotate Video """
         if transpose is None and degrees is None:
             raise ValueError("You have not supplied a valid transpose or "
@@ -400,9 +382,7 @@ class Effmpeg():
                              "{}".format(transpose, degrees))
 
         _input_opts = Effmpeg._common_ffmpeg_args[:]
-        _output_opts = '-vf '
-        if not preview:
-            _output_opts = '-y -c:a copy ' + _output_opts
+        _output_opts = '-y -c:a copy -vf '
         _bilinear = ''
         if transpose is not None:
             _output_opts += 'transpose="' + str(transpose) + '"'
@@ -418,28 +398,22 @@ class Effmpeg():
 
     @staticmethod
     def mux_audio(input_=None, output=None, ref_vid=None,  # pylint:disable=unused-argument
-                  preview=None, exe=None, **kwargs):
+                  exe=None, **kwargs):
         """ Mux Audio """
         _input_opts = Effmpeg._common_ffmpeg_args[:]
         _ref_vid_opts = None
         _output_opts = '-y -c copy -map 0:0 -map 1:1 -shortest'
-        if preview:
-            raise ValueError("Preview with audio muxing is not supported.")
-        # if not preview:
-        #    _output_opts = '-y ' + _output_opts
         _inputs = OrderedDict([(input_.path, _input_opts), (ref_vid.path, _ref_vid_opts)])
         _outputs = {output.path: _output_opts}
         Effmpeg.__run_ffmpeg(exe=exe, inputs=_inputs, outputs=_outputs)
 
     @staticmethod
     def slice(input_=None, output=None, start=None,  # pylint:disable=unused-argument
-              duration=None, preview=None, exe=None, **kwargs):
+              duration=None, exe=None, **kwargs):
         """ Slice Video """
         _input_opts = Effmpeg._common_ffmpeg_args[:]
         _input_opts += "-ss " + start
         _output_opts = "-t " + duration + " "
-        if not preview:
-            _output_opts = '-y ' + _output_opts + "-vcodec copy -acodec copy"
         _inputs = {input_.path: _input_opts}
         _output = {output.path: _output_opts}
         Effmpeg.__run_ffmpeg(exe=exe, inputs=_inputs, outputs=_output)
