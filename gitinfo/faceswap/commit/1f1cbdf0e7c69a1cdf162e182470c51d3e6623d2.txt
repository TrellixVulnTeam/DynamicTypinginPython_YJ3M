commit 1f1cbdf0e7c69a1cdf162e182470c51d3e6623d2
Author: facepainter <36064366+facepainter@users.noreply.github.com>
Date:   Sun Feb 4 08:57:00 2018 +0000

    Adds information about running scripts with help (#111)
    
    Updated information so that users can quickly see the available parameters for the various scripts.
    Also made the section headers correspond with the actual scripts - e.g. extract, train, convert

diff --git a/USAGE.md b/USAGE.md
index 994ca9d..7f16221 100644
--- a/USAGE.md
+++ b/USAGE.md
@@ -8,7 +8,7 @@ The basic operation of this script is simple. It trains a machine learning model
 
 So here's our plan. We want to create a reality where Donald Trump lost the presidency to Nic Cage; we have his inauguration video; let's replace Trump with Cage.
 
-## Gather training data
+## Gathering raw data
 
 In order to accomplish this, the bot needs to learn to recognize both face A (Trump) and face B (Nic Cage). By default, the bot doesn't know what a Trump or a Nic Cage looks like. So we need to show it some pictures and let it guess which is which. So we need pictures of both of these faces first.
 
@@ -18,7 +18,7 @@ Feel free to list your image sets in the [faceswap-playground](https://github.co
 
 So now we have a folder full of pictures of Trump and a separate folder of Nic Cage. Let's save them in our directory where we put the faceswap project. Example: `~/faceswap/photo/trump` and `~/faceswap/photo/cage`
 
-## Extracting our training data
+## EXTRACT
 
 So here's a problem. We have a ton of pictures of both our subjects, but they're just pictures of them doing stuff or in an environment with other people. Their bodies are on there, they're on there with other people... It's a mess. We can only train our bot if the data we have is consistent and focusses on the subject we want to swap. This is where faceswap first comes in.
 
@@ -31,7 +31,7 @@ python faceswap.py extract -i ~/faceswap/photo/cage -o ~/faceswap/data/cage
 
 We specify our photo input directory and the output folder where our training data will be saved. The script will then try its best to recognize face landmarks, crop the image to that size, and save it to the output folder. Note: this script will make grabbing test data much easier, but it is not perfect. It will (incorrectly) detect multiple faces in some photos and does not recognize if the face is the person who we want to swap. Therefore: **Always check your training data before you start training.** The training data will influence how good your model will be at swapping.
 
-## Training
+## TRAIN
 
 The training process will take the longest, especially on CPU. We specify the folders where the two faces are, and where we will save our training model. It will start hammering the training data once you run the command. I personally really like to go by the preview and quit the processing once I'm happy with the results.
 
@@ -43,10 +43,22 @@ python faceswap.py train -A ~/faceswap/data/trump -B ~/faceswap/data/cage -m ~/f
 
 If you use the preview feature, select the preview window and press Q to save your processed data and quit gracefully. Without the preview enabled, you might have to forcefully quit by hitting Ctrl+C to cancel the command. Note that it will save the model once it's gone through about 100 iterations, which can take quite a while. So make sure you save before stopping the process.
 
-## SWAPPING
+You can see the full list of arguments for training via help flag. i.e.
+
+```bash
+python faceswap.py train -h
+````
+
+## CONVERT
 
 Now that we're happy with our trained model, we can convert our video. How does it work? Similarly to the extraction script, actually! The conversion script basically detects a face in a picture using the same algorithm, quickly crops the image to the right size, runs our bot on this cropped image of the face it has found, and then (crudely) pastes the processed face back into the picture.
 
+You can see the full list of arguments available for converting via help flag. i.e.
+
+```bash
+python faceswap.py convert -h
+````
+
 ### Testing out our bot
 
 Remember those initial pictures we had of Trump? Let's try swapping a face there. We will use that directory as our input directory, create a new folder where the output will be saved, and tell them which model to use.
