commit ea5e02471762344f04b5f52084f5d7f704f96e1d
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Wed Mar 6 13:11:54 2019 +0000

    Extract plugin amends

diff --git a/plugins/extract/detect/_base.py b/plugins/extract/detect/_base.py
old mode 100644
new mode 100755
index ef8f935..321a4ce
--- a/plugins/extract/detect/_base.py
+++ b/plugins/extract/detect/_base.py
@@ -145,10 +145,12 @@ class Detector():
         return retval
 
     # <<< DETECTION IMAGE COMPILATION METHODS >>> #
-    def compile_detection_image(self, image, is_square, scale_up):
+    def compile_detection_image(self, input_image, is_square, scale_up, to_rgb):
         """ Compile the detection image """
+        image = input_image[:, :, ::-1].copy() if to_rgb else input_image.copy()
         scale = self.set_scale(image, is_square=is_square, scale_up=scale_up)
-        return [self.set_detect_image(image, scale), scale]
+        image = self.scale_image(image, scale)
+        return [image, scale]
 
     def set_scale(self, image, is_square=False, scale_up=False):
         """ Set the scale factor for incoming image """
@@ -174,10 +176,9 @@ class Detector():
         return scale
 
     @staticmethod
-    def set_detect_image(input_image, scale):
-        """ Convert the image to RGB and scale """
+    def scale_image(image, scale):
+        """ Scale the image """
         # pylint: disable=no-member
-        image = input_image[:, :, ::-1].copy()
         if scale == 1.0:
             return image
 
@@ -317,14 +318,14 @@ class Detector():
     # <<< MISC METHODS >>> #
     @staticmethod
     def get_vram_free():
-        """ Return total free VRAM on largest card """
+        """ Return free and total VRAM on card with most VRAM free"""
         stats = GPUStats()
         vram = stats.get_card_most_free()
         logger.verbose("Using device %s with %sMB free of %sMB",
                        vram["device"],
                        int(vram["free"]),
                        int(vram["total"]))
-        return int(vram["free"])
+        return int(vram["card_id"]), int(vram["free"]), int(vram["total"])
 
     @staticmethod
     def set_predetected(width, height):
diff --git a/plugins/extract/detect/dlib_cnn.py b/plugins/extract/detect/dlib_cnn.py
old mode 100644
new mode 100755
index 40de072..2a60a4e
--- a/plugins/extract/detect/dlib_cnn.py
+++ b/plugins/extract/detect/dlib_cnn.py
@@ -41,7 +41,7 @@ class Detect(Detector):
         is_cuda = self.compiled_for_cuda()
         if is_cuda:
             logger.debug("Using GPU")
-            vram_free = self.get_vram_free()
+            _, vram_free, _ = self.get_vram_free()
         else:
             logger.verbose("Using CPU")
             vram_free = 2048
@@ -72,6 +72,7 @@ class Detect(Detector):
             for item in batch:
                 filenames.append(item["filename"])
                 images.append(item["image"])
+
             [detect_images, scales] = self.compile_detection_images(images)
             batch_detected = self.detect_batch(detect_images)
             processed = self.process_output(batch_detected,
@@ -103,8 +104,8 @@ class Detect(Detector):
         detect_images = list()
         scales = list()
         for image in images:
-            scale = self.set_scale(image, is_square=True, scale_up=True)
-            detect_images.append(self.set_detect_image(image, scale))
+            detect_image, scale = self.compile_detection_image(image, True, True, True)
+            detect_images.append(detect_image)
             scales.append(scale)
         logger.trace("Compiled Detection Images")
         return [detect_images, scales]
diff --git a/plugins/extract/detect/dlib_hog.py b/plugins/extract/detect/dlib_hog.py
old mode 100644
new mode 100755
index 2f91d0d..0df0c97
--- a/plugins/extract/detect/dlib_hog.py
+++ b/plugins/extract/detect/dlib_hog.py
@@ -37,7 +37,7 @@ class Detect(Detector):
             if item == "EOF":
                 break
             logger.trace("Detecting faces: %s", item["filename"])
-            [detect_image, scale] = self.compile_detection_image(item["image"], True, True)
+            [detect_image, scale] = self.compile_detection_image(item["image"], True, True, True)
 
             for angle in self.rotation:
                 current_image, rotmat = self.rotate_image(detect_image, angle)
diff --git a/plugins/extract/detect/mtcnn.py b/plugins/extract/detect/mtcnn.py
old mode 100644
new mode 100755
index d6aa42c..0d29126
--- a/plugins/extract/detect/mtcnn.py
+++ b/plugins/extract/detect/mtcnn.py
@@ -79,7 +79,7 @@ class Detect(Detector):
         # Must import tensorflow inside the spawned process
         # for Windows machines
         import_tensorflow()
-        vram_free = self.get_vram_free()
+        _, vram_free, _ = self.get_vram_free()
         mtcnn_graph = tf.Graph()
 
         # Windows machines sometimes misreport available vram, and overuse
@@ -138,7 +138,7 @@ class Detect(Detector):
             if item == "EOF":
                 break
             logger.trace("Detecting faces: '%s'", item["filename"])
-            [detect_image, scale] = self.compile_detection_image(item["image"], False, False)
+            [detect_image, scale] = self.compile_detection_image(item["image"], False, False, True)
 
             for angle in self.rotation:
                 current_image, rotmat = self.rotate_image(detect_image, angle)
