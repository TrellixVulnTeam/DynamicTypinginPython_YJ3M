commit d972d51cc20c7c55829fb52f0d71263d420d2095
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Fri Dec 14 18:40:06 2018 +0000

    Add Merge Faces to Alignments Tool (#551)
    
    * Add Merge Alignments to Alignments Tool

diff --git a/tools/alignments.py b/tools/alignments.py
index c864b74..103b83a 100644
--- a/tools/alignments.py
+++ b/tools/alignments.py
@@ -3,7 +3,7 @@
 
 from lib.utils import set_system_verbosity
 from .lib_alignments import (AlignmentData, Check, Draw, # noqa pylint: disable=unused-import
-                             Extract, Legacy, Manual, Reformat, Rename,
+                             Extract, Legacy, Manual, Merge, Reformat, Rename,
                              RemoveAlignments, Sort, Spatial)
 
 
diff --git a/tools/cli.py b/tools/cli.py
index bcee33f..e186031 100644
--- a/tools/cli.py
+++ b/tools/cli.py
@@ -23,10 +23,10 @@ class AlignmentsArgs(FaceSwapArgs):
 
             "opts": ("-j", "--job"),
             "type": str,
-            "choices": ("draw", "extract", "extract-large", "manual", "missing-alignments",
-                        "missing-frames", "legacy", "leftover-faces", "multi-faces", "no-faces",
-                        "reformat", "remove-faces", "remove-frames", "rename", "sort-x", "sort-y",
-                        "spatial", "update-hashes"),
+            "choices": ("draw", "extract", "extract-large", "manual", "merge",
+                        "missing-alignments", "missing-frames", "legacy", "leftover-faces",
+                        "multi-faces", "no-faces", "reformat", "remove-faces", "remove-frames",
+                        "rename", "sort-x", "sort-y", "spatial", "update-hashes"),
             "required": True,
             "help": "R|Choose which action you want to perform.\n"
                     "NB: All actions require an alignments file (-a) to"
@@ -44,6 +44,9 @@ class AlignmentsArgs(FaceSwapArgs):
                     "\n\ttraining set" + frames_and_faces_dir + align_eyes +
                     "\n'manual': Manually view and edit landmarks." +
                     frames_dir + align_eyes +
+                    "\n'merge': Merge multiple alignment files into one."
+                    "\n\tSpecify the main alignments file with the -a flag"
+                    "\n\tand the file to be merged with the -a2 flag."
                     "\n'missing-alignments': Identify frames that do not"
                     "\n\texist in the alignments file." + output_opts +
                     frames_dir +
@@ -103,6 +106,14 @@ class AlignmentsArgs(FaceSwapArgs):
                               "filetypes": "alignments",
                               "help": "Full path to the alignments "
                                       "file to be processed."})
+        argument_list.append({"opts": ("-a2", "--alignments_file2"),
+                              "action": FileFullPaths,
+                              "dest": "alignments_file2",
+                              "required": False,
+                              "filetypes": "alignments",
+                              "help": "Full path to the alignments file to "
+                                      "be merged into the main alignments "
+                                      "file (merge only)"})
         argument_list.append({"opts": ("-fc", "-faces_folder"),
                               "action": DirFullPaths,
                               "dest": "faces_dir",
diff --git a/tools/lib_alignments/__init__.py b/tools/lib_alignments/__init__.py
index f0e732e..3eb0103 100644
--- a/tools/lib_alignments/__init__.py
+++ b/tools/lib_alignments/__init__.py
@@ -1,4 +1,4 @@
 from tools.lib_alignments.media import AlignmentData, ExtractedFaces, Faces, Frames
 from tools.lib_alignments.annotate import Annotate
-from tools.lib_alignments.jobs import Check, Draw, Extract, Legacy, Reformat, RemoveAlignments, Rename, Sort, Spatial
+from tools.lib_alignments.jobs import Check, Draw, Extract, Legacy, Merge, Reformat, RemoveAlignments, Rename, Sort, Spatial
 from tools.lib_alignments.jobs_manual import Manual
diff --git a/tools/lib_alignments/jobs.py b/tools/lib_alignments/jobs.py
index d0e3105..fb84064 100644
--- a/tools/lib_alignments/jobs.py
+++ b/tools/lib_alignments/jobs.py
@@ -13,7 +13,7 @@ from scipy import signal
 from sklearn import decomposition
 from tqdm import tqdm
 
-from . import Annotate, ExtractedFaces, Faces, Frames
+from . import AlignmentData, Annotate, ExtractedFaces, Faces, Frames
 
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
 
@@ -354,6 +354,63 @@ class Extract():
         return valid_faces
 
 
+class Merge():
+    """ Merge two alignments files into one """
+    def __init__(self, alignments, arguments):
+        self.alignments = alignments
+        self.alignments2 = AlignmentData(arguments.alignments_file2, "json")
+
+    def process(self):
+        """Process the alignments file merge """
+        logger.info("[MERGE ALIGNMENTS]")  # Tidy up cli output
+        skip_count = 0
+        merge_count = 0
+        for _, src_alignments, _, frame in tqdm(self.alignments2.yield_faces(),
+                                                desc="Merging Alignments",
+                                                total=self.alignments2.frames_count):
+            for idx, alignment in enumerate(src_alignments):
+                if not alignment.get("hash", None):
+                    logger.warning("Alignment '%s':%s has no Hash! Skipping", frame, idx)
+                    skip_count += 1
+                    continue
+                if self.check_exists(frame, alignment, idx):
+                    skip_count += 1
+                    continue
+                self.merge_alignment(frame, alignment, idx)
+                merge_count += 1
+        logger.info("Alignments Merged: %s", merge_count)
+        logger.info("Alignments Skipped: %s", skip_count)
+        if merge_count != 0:
+            self.set_destination_filename()
+            self.alignments.save()
+
+    def check_exists(self, frame, alignment, idx):
+        """ Check whether this has already exists """
+        existing_frame = self.alignments.hashes_to_frame.get(alignment["hash"], None)
+        if not existing_frame:
+            return False
+        if existing_frame[0] == frame:
+            logger.verbose("Face '%s': %s already exists in destination at position %s. "
+                           "Skipping", frame, idx, existing_frame[1])
+        elif existing_frame[0] != frame:
+            logger.verbose("Face '%s': %s exists in destination as face '%s': %s. "
+                           "Skipping", frame, idx, existing_frame[0], existing_frame[1])
+        return True
+
+    def merge_alignment(self, frame, alignment, idx):
+        """ Merge the source alignment into the destination """
+        logger.debug("Merging alignment: (frame: %s, src_idx: %s, hash: %s)",
+                     frame, idx, alignment["hash"])
+        self.alignments.data.setdefault(frame, list()).append(alignment)
+
+    def set_destination_filename(self):
+        """ Set the destination filename """
+        orig, ext = os.path.splitext(self.alignments.file)
+        filename = "{}_merged{}".format(orig, ext)
+        logger.debug("Output set to: '%s'", filename)
+        self.alignments.file = filename
+
+
 class Reformat():
     """ Reformat Alignment file """
     def __init__(self, alignments, arguments):
