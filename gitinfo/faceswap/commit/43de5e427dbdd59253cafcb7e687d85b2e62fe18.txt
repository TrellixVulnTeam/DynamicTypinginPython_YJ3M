commit 43de5e427dbdd59253cafcb7e687d85b2e62fe18
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Wed May 1 11:00:35 2019 +0000

    gpu_stats: Respect CUDA_VISIBLE_DEVICES

diff --git a/lib/gpu_stats.py b/lib/gpu_stats.py
index 79622e9..c015113 100644
--- a/lib/gpu_stats.py
+++ b/lib/gpu_stats.py
@@ -2,6 +2,7 @@
 """ Information on available Nvidia GPUs """
 
 import logging
+import os
 import platform
 
 if platform.system() == 'Darwin':
@@ -24,6 +25,7 @@ class GPUStats():
 
         self.initialized = False
         self.device_count = 0
+        self.active_devices = None
         self.handles = None
         self.driver = None
         self.devices = None
@@ -34,7 +36,7 @@ class GPUStats():
         self.driver = self.get_driver()
         self.devices = self.get_devices()
         self.vram = self.get_vram()
-        if self.device_count == 0:
+        if not self.active_devices:
             if self.logger:
                 self.logger.warning("No GPU detected. Switching to CPU mode")
             return
@@ -59,13 +61,14 @@ class GPUStats():
                     if self.logger:
                         self.logger.debug("OS is not macOS. Using pynvml")
                     pynvml.nvmlInit()
-                except (pynvml.NVMLError_LibraryNotFound,
-                        pynvml.NVMLError_DriverNotLoaded,
-                        pynvml.NVMLError_NoPermission):
+                except (pynvml.NVMLError_LibraryNotFound,  # pylint: disable=no-member
+                        pynvml.NVMLError_DriverNotLoaded,  # pylint: disable=no-member
+                        pynvml.NVMLError_NoPermission):  # pylint: disable=no-member
                     self.initialized = True
                     return
             self.initialized = True
             self.get_device_count()
+            self.get_active_devices()
             self.get_handles()
 
     def shutdown(self):
@@ -88,6 +91,18 @@ class GPUStats():
         if self.logger:
             self.logger.debug("GPU Device count: %s", self.device_count)
 
+    def get_active_devices(self):
+        """ Return list of active Nvidia devices """
+        devices = os.environ.get("CUDA_VISIBLE_DEVICES", None)
+        if self.device_count == 0:
+            self.active_devices = list()
+        elif devices is not None:
+            self.active_devices = [int(i) for i in devices.split(",") if devices]
+        else:
+            self.active_devices = list(range(self.device_count))
+        if self.logger:
+            self.logger.debug("Active GPU Devices: %s", self.active_devices)
+
     def get_handles(self):
         """ Return all listed Nvidia handles """
         if IS_MACOS:
@@ -172,20 +187,20 @@ class GPUStats():
         return vram
 
     def get_card_most_free(self):
-        """ Return the card and available VRAM for card with
+        """ Return the card and available VRAM for active card with
             most VRAM free """
         if self.device_count == 0:
             return {"card_id": -1,
                     "device": "No Nvidia devices found",
                     "free": 2048,
                     "total": 2048}
-        free_vram = self.get_free()
+        free_vram = [self.get_free()[i] for i in self.active_devices]
         vram_free = max(free_vram)
-        card_id = free_vram.index(vram_free)
+        card_id = self.active_devices[free_vram.index(vram_free)]
         retval = {"card_id": card_id,
                   "device": self.devices[card_id],
                   "free": vram_free,
                   "total": self.vram[card_id]}
         if self.logger:
-            self.logger.debug("GPU Card with most free VRAM: %s", retval)
+            self.logger.debug("Active GPU Card with most free VRAM: %s", retval)
         return retval
diff --git a/lib/sysinfo.py b/lib/sysinfo.py
index c487180..d6d04b3 100644
--- a/lib/sysinfo.py
+++ b/lib/sysinfo.py
@@ -32,6 +32,7 @@ class SysInfo():
         self.vram = gpu_stats.vram
         self.gfx_driver = gpu_stats.driver
         self.gfx_devices = gpu_stats.devices
+        self.gfx_devices_active = gpu_stats.active_devices
 
     @property
     def encoding(self):
@@ -319,9 +320,11 @@ class SysInfo():
                     "gpu_devices": ", ".join(["GPU_{}: {}".format(idx, device)
                                               for idx, device in enumerate(self.gfx_devices)]),
                     "gpu_vram": ", ".join(["GPU_{}: {}MB".format(idx, int(vram))
-                                           for idx, vram in enumerate(self.vram)])}
+                                           for idx, vram in enumerate(self.vram)]),
+                    "gpu_devices_active": ", ".join(["GPU_{}".format(idx)
+                                                     for idx in self.gfx_devices_active])}
         for key in sorted(sys_info.keys()):
-            retval += ("{0: <18} {1}\n".format(key + ":", sys_info[key]))
+            retval += ("{0: <20} {1}\n".format(key + ":", sys_info[key]))
         retval += "\n=============== Pip Packages ===============\n"
         retval += self.installed_pip
         if not self.is_conda:
