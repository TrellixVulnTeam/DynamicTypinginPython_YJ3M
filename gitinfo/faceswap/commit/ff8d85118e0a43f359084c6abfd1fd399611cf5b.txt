commit ff8d85118e0a43f359084c6abfd1fd399611cf5b
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Wed Apr 22 00:04:21 2020 +0100

    Cli Restructure + Multi-Mask Select on Extract (#1012)
    
    - Split up cli.py to smaller modules
    - Enable Multi Mask Selection in Extraction
    - Handle multi option selection options in the GUI
    - Document lib/cli

diff --git a/docs/full/lib/cli.rst b/docs/full/lib/cli.rst
new file mode 100644
index 0000000..2a0d2c7
--- /dev/null
+++ b/docs/full/lib/cli.rst
@@ -0,0 +1,65 @@
+***********
+cli package
+***********
+
+The CLI Package handles the Command Line Arguments that act as the entry point into Faceswap.
+
+.. contents:: Contents
+   :local:
+
+args module
+===========
+
+.. rubric:: Module Summary
+
+.. autosummary::
+   :nosignatures:
+   
+   ~lib.cli.args.ConvertArgs
+   ~lib.cli.args.ExtractArgs
+   ~lib.cli.args.ExtractConvertArgs
+   ~lib.cli.args.FaceSwapArgs
+   ~lib.cli.args.FullHelpArgumentParser
+   ~lib.cli.args.GuiArgs
+   ~lib.cli.args.SmartFormatter
+   ~lib.cli.args.TrainArgs
+
+.. rubric:: Module
+
+.. automodule:: lib.cli.args
+   :members:
+   :undoc-members:
+   :show-inheritance:
+
+actions module
+==============
+
+.. rubric:: Module Summary
+
+.. autosummary::
+   :nosignatures:
+   
+   ~lib.cli.actions.ContextFullPaths
+   ~lib.cli.actions.DirFullPaths
+   ~lib.cli.actions.DirOrFileFullPaths
+   ~lib.cli.actions.FileFullPaths
+   ~lib.cli.actions.FilesFullPaths
+   ~lib.cli.actions.MultiOption
+   ~lib.cli.actions.Radio
+   ~lib.cli.actions.SaveFileFullPaths
+   ~lib.cli.actions.Slider
+
+.. rubric:: Module
+
+.. automodule:: lib.cli.actions
+   :members:
+   :undoc-members:
+   :show-inheritance:
+
+launcher module
+===============
+
+.. automodule:: lib.cli.launcher
+   :members:
+   :undoc-members:
+   :show-inheritance:
\ No newline at end of file
diff --git a/docs/full/lib/gui.rst b/docs/full/lib/gui.rst
index 6064630..8655ca3 100755
--- a/docs/full/lib/gui.rst
+++ b/docs/full/lib/gui.rst
@@ -3,7 +3,7 @@ gui package
 ***********
 
 The GUI Package contains the entire code base for Faceswap's optional GUI. The GUI itself itself
-is largely self-generated from the command line options specified in :mod:`lib.cli`.
+is largely self-generated from the command line options specified in :mod:`lib.cli.args`.
 
 .. contents:: Contents
    :local:
@@ -18,6 +18,7 @@ custom\_widgets module
    
    ~lib.gui.custom_widgets.ConsoleOut
    ~lib.gui.custom_widgets.ContextMenu
+   ~lib.gui.custom_widgets.MultiOption
    ~lib.gui.custom_widgets.RightClickMenu
    ~lib.gui.custom_widgets.StatusBar
    ~lib.gui.custom_widgets.Tooltip
diff --git a/faceswap.py b/faceswap.py
index a426d6a..c3d825d 100755
--- a/faceswap.py
+++ b/faceswap.py
@@ -2,7 +2,7 @@
 """ The master faceswap.py script """
 import sys
 
-import lib.cli as cli
+from lib.cli import args
 from lib.config import generate_configs
 
 if sys.version_info[0] < 3:
@@ -11,28 +11,37 @@ if sys.version_info[0] == 3 and sys.version_info[1] < 6:
     raise Exception("This program requires at least python3.6")
 
 
-def bad_args(args):
-    """ Print help on bad arguments """
-    PARSER.print_help()
+_PARSER = args.FullHelpArgumentParser()
+
+
+def _bad_args():
+    """ Print help to console when bad arguments are provided. """
+    _PARSER.print_help()
     sys.exit(0)
 
 
-if __name__ == "__main__":
+def _main():
+    """ The main entry point into Faceswap.
+
+    - Generates the config files, if they don't pre-exist.
+    - Compiles the :class:`~lib.cli.args.FullHelpArgumentParser` objects for each section of
+      Faceswap.
+    - Sets the default values and launches the relevant script.
+    - Outputs help if invalid parameters are provided.
+    """
     generate_configs()
-    PARSER = cli.FullHelpArgumentParser()
-    SUBPARSER = PARSER.add_subparsers()
-    EXTRACT = cli.ExtractArgs(SUBPARSER,
-                              "extract",
-                              "Extract the faces from pictures")
-    TRAIN = cli.TrainArgs(SUBPARSER,
-                          "train",
-                          "This command trains the model for the two faces A and B")
-    CONVERT = cli.ConvertArgs(SUBPARSER,
-                              "convert",
-                              "Convert a source image to a new one with the face swapped")
-    GUI = cli.GuiArgs(SUBPARSER,
-                      "gui",
-                      "Launch the Faceswap Graphical User Interface")
-    PARSER.set_defaults(func=bad_args)
-    ARGUMENTS = PARSER.parse_args()
-    ARGUMENTS.func(ARGUMENTS)
+
+    subparser = _PARSER.add_subparsers()
+    args.ExtractArgs(subparser, "extract", "Extract the faces from pictures")
+    args.TrainArgs(subparser, "train", "This command trains the model for the two faces A and B")
+    args.ConvertArgs(subparser,
+                     "convert",
+                     "Convert a source image to a new one with the face swapped")
+    args.GuiArgs(subparser, "gui", "Launch the Faceswap Graphical User Interface")
+    _PARSER.set_defaults(func=_bad_args)
+    arguments = _PARSER.parse_args()
+    arguments.func(arguments)
+
+
+if __name__ == "__main__":
+    _main()
diff --git a/lib/cli.py b/lib/cli.py
deleted file mode 100644
index bc1ac30..0000000
--- a/lib/cli.py
+++ /dev/null
@@ -1,1309 +0,0 @@
-#!/usr/bin/env python3
-""" Command Line Arguments """
-
-# pylint: disable=too-many-lines
-
-import argparse
-import logging
-import os
-import platform
-import re
-import sys
-import textwrap
-
-from importlib import import_module
-
-from lib.logger import crash_log, log_setup
-from lib.utils import FaceswapError, get_backend, safe_shutdown, set_system_verbosity
-from plugins.plugin_loader import PluginLoader
-
-logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
-
-
-class ScriptExecutor():
-    """ Loads the relevant script modules and executes the script.
-        This class is initialized in each of the argparsers for the relevant
-        command, then execute script is called within their set_default
-        function. """
-
-    def __init__(self, command, subparsers=None):
-        self.command = command.lower()
-        self.subparsers = subparsers
-
-    def import_script(self):
-        """ Only import a script's modules when running that script."""
-        self.test_for_tf_version()
-        self.test_for_gui()
-        cmd = os.path.basename(sys.argv[0])
-        src = "tools.{}".format(self.command.lower()) if cmd == "tools.py" else "scripts"
-        mod = ".".join((src, self.command.lower()))
-        module = import_module(mod)
-        script = getattr(module, self.command.title())
-        return script
-
-    @staticmethod
-    def test_for_tf_version():
-        """ Check that the minimum required Tensorflow version is installed """
-        min_ver = 1.12
-        max_ver = 1.15
-        try:
-            # Ensure tensorflow doesn't pin all threads to one core when using Math Kernel Library
-            os.environ["KMP_AFFINITY"] = "disabled"
-            import tensorflow as tf  # pylint:disable=import-outside-toplevel
-        except ImportError as err:
-            raise FaceswapError("There was an error importing Tensorflow. This is most likely "
-                                "because you do not have TensorFlow installed, or you are trying "
-                                "to run tensorflow-gpu on a system without an Nvidia graphics "
-                                "card. Original import error: {}".format(str(err)))
-        tf_ver = float(".".join(tf.__version__.split(".")[:2]))  # pylint:disable=no-member
-        if tf_ver < min_ver:
-            raise FaceswapError("The minimum supported Tensorflow is version {} but you have "
-                                "version {} installed. Please upgrade Tensorflow.".format(
-                                    min_ver, tf_ver))
-        if tf_ver > max_ver:
-            raise FaceswapError("The maximumum supported Tensorflow is version {} but you have "
-                                "version {} installed. Please downgrade Tensorflow.".format(
-                                    max_ver, tf_ver))
-        logger.debug("Installed Tensorflow Version: %s", tf_ver)
-
-    def test_for_gui(self):
-        """ If running the gui, check the prerequisites """
-        if self.command != "gui":
-            return
-        self.test_tkinter()
-        self.check_display()
-
-    @staticmethod
-    def test_tkinter():
-        """ If the user is running the GUI, test whether the
-            tkinter app is available on their machine. If not
-            exit gracefully.
-
-            This avoids having to import every tkinter function
-            within the GUI in a wrapper and potentially spamming
-            traceback errors to console """
-
-        try:
-            # pylint: disable=unused-variable
-            import tkinter  # noqa pylint: disable=unused-import,import-outside-toplevel
-        except ImportError:
-            logger.error(
-                "It looks like TkInter isn't installed for your OS, so "
-                "the GUI has been disabled. To enable the GUI please "
-                "install the TkInter application. You can try:")
-            logger.info("Anaconda: conda install tk")
-            logger.info("Windows/macOS: Install ActiveTcl Community Edition from "
-                        "http://www.activestate.com")
-            logger.info("Ubuntu/Mint/Debian: sudo apt install python3-tk")
-            logger.info("Arch: sudo pacman -S tk")
-            logger.info("CentOS/Redhat: sudo yum install tkinter")
-            logger.info("Fedora: sudo dnf install python3-tkinter")
-            raise FaceswapError("TkInter not found")
-
-    @staticmethod
-    def check_display():
-        """ Check whether there is a display to output the GUI. If running on
-            Windows then assume not running in headless mode """
-        if not os.environ.get("DISPLAY", None) and os.name != "nt":
-            if platform.system() == "Darwin":
-                logger.info("macOS users need to install XQuartz. "
-                            "See https://support.apple.com/en-gb/HT201341")
-            raise FaceswapError("No display detected. GUI mode has been disabled.")
-
-    def execute_script(self, arguments):
-        """ Run the script for called command """
-        set_system_verbosity(arguments.loglevel)
-        is_gui = hasattr(arguments, "redirect_gui") and arguments.redirect_gui
-        log_setup(arguments.loglevel, arguments.logfile, self.command, is_gui)
-        logger.debug("Executing: %s. PID: %s", self.command, os.getpid())
-        success = False
-        if get_backend() == "amd":
-            plaidml_found = self.setup_amd(arguments.loglevel)
-            if not plaidml_found:
-                safe_shutdown(got_error=True)
-                return
-        try:
-            script = self.import_script()
-            process = script(arguments)
-            process.process()
-            success = True
-        except FaceswapError as err:
-            for line in str(err).splitlines():
-                logger.error(line)
-        except KeyboardInterrupt:  # pylint: disable=try-except-raise
-            raise
-        except SystemExit:
-            pass
-        except Exception:  # pylint: disable=broad-except
-            crash_file = crash_log()
-            logger.exception("Got Exception on main handler:")
-            logger.critical("An unexpected crash has occurred. Crash report written to '%s'. "
-                            "You MUST provide this file if seeking assistance. Please verify you "
-                            "are running the latest version of faceswap before reporting",
-                            crash_file)
-
-        finally:
-            safe_shutdown(got_error=not success)
-
-    @staticmethod
-    def setup_amd(loglevel):
-        """ Test for plaidml and setup for AMD """
-        logger.debug("Setting up for AMD")
-        try:
-            import plaidml  # noqa pylint:disable=unused-import,import-outside-toplevel
-        except ImportError:
-            logger.error("PlaidML not found. Run `pip install plaidml-keras` for AMD support")
-            return False
-        from lib.plaidml_tools import setup_plaidml  # pylint:disable=import-outside-toplevel
-        setup_plaidml(loglevel)
-        logger.debug("setup up for PlaidML")
-        return True
-
-
-class Radio(argparse.Action):  # pylint: disable=too-few-public-methods
-    """ Adds support for the GUI Radio buttons
-
-        Just a wrapper class to tell the gui to use radio buttons instead of combo boxes
-        """
-    def __init__(self, option_strings, dest, nargs=None, **kwargs):
-        if nargs is not None:
-            raise ValueError("nargs not allowed")
-        super().__init__(option_strings, dest, **kwargs)
-
-    def __call__(self, parser, namespace, values, option_string=None):
-        setattr(namespace, self.dest, values)
-
-
-class Slider(argparse.Action):  # pylint: disable=too-few-public-methods
-    """ Adds support for the GUI slider
-
-        An additional option 'min_max' must be provided containing tuple of min and max accepted
-        values.
-
-        'rounding' sets the decimal places for floats or the step interval for ints.
-        """
-    def __init__(self, option_strings, dest, nargs=None, min_max=None, rounding=None, **kwargs):
-        if nargs is not None:
-            raise ValueError("nargs not allowed")
-        super().__init__(option_strings, dest, **kwargs)
-        self.min_max = min_max
-        self.rounding = rounding
-
-    def _get_kwargs(self):
-        names = ["option_strings",
-                 "dest",
-                 "nargs",
-                 "const",
-                 "default",
-                 "type",
-                 "choices",
-                 "help",
-                 "metavar",
-                 "min_max",  # Tuple containing min and max values of scale
-                 "rounding"]  # Decimal places to round floats to or step interval for ints
-        return [(name, getattr(self, name)) for name in names]
-
-    def __call__(self, parser, namespace, values, option_string=None):
-        setattr(namespace, self.dest, values)
-
-
-class FullPaths(argparse.Action):  # pylint: disable=too-few-public-methods
-    """ Expand user- and relative-paths """
-    def __call__(self, parser, namespace, values, option_string=None):
-        if isinstance(values, (list, tuple)):
-            vals = [os.path.abspath(os.path.expanduser(val)) for val in values]
-        else:
-            vals = os.path.abspath(os.path.expanduser(values))
-        setattr(namespace, self.dest, vals)
-
-
-class DirFullPaths(FullPaths):
-    """ Class that gui uses to determine if you need to open a directory """
-    # pylint: disable=too-few-public-methods,unnecessary-pass
-    pass
-
-
-class FileFullPaths(FullPaths):
-    """
-    Class that gui uses to determine if you need to open a file.
-
-    see lib/gui/utils.py FileHandler for current GUI filetypes
-    """
-    # pylint: disable=too-few-public-methods
-    def __init__(self, option_strings, dest, nargs=None, filetypes=None, **kwargs):
-        super().__init__(option_strings, dest, nargs, **kwargs)
-        self.filetypes = filetypes
-
-    def _get_kwargs(self):
-        names = ["option_strings",
-                 "dest",
-                 "nargs",
-                 "const",
-                 "default",
-                 "type",
-                 "choices",
-                 "help",
-                 "metavar",
-                 "filetypes"]
-        return [(name, getattr(self, name)) for name in names]
-
-
-class FilesFullPaths(FileFullPaths):  # pylint: disable=too-few-public-methods
-    """ Class that the gui uses to determine that the input can take multiple files as an input.
-        Inherits functionality from FileFullPaths
-        Has the effect of giving the user 2 Open Dialogue buttons in the gui """
-    pass  # pylint: disable=unnecessary-pass
-
-
-class DirOrFileFullPaths(FileFullPaths):  # pylint: disable=too-few-public-methods
-    """ Class that the gui uses to determine that the input can take a folder or a filename.
-        Inherits functionality from FileFullPaths
-        Has the effect of giving the user 2 Open Dialogue buttons in the gui """
-    pass  # pylint: disable=unnecessary-pass
-
-
-class SaveFileFullPaths(FileFullPaths):
-    """
-    Class that gui uses to determine if you need to save a file.
-
-    see lib/gui/utils.py FileHandler for current GUI filetypes
-    """
-    # pylint: disable=too-few-public-methods,unnecessary-pass
-    pass
-
-
-class ContextFullPaths(FileFullPaths):
-    """
-    Class that gui uses to determine if you need to open a file or a
-    directory based on which action you are choosing
-
-    To use ContextFullPaths the action_option item should indicate which
-    cli option dictates the context of the filesystem dialogue
-
-    Bespoke actions are then set in lib/gui/utils.py FileHandler
-    """
-    # pylint: disable=too-few-public-methods, too-many-arguments
-    def __init__(self, option_strings, dest, nargs=None, filetypes=None,
-                 action_option=None, **kwargs):
-        if nargs is not None:
-            raise ValueError("nargs not allowed")
-        super(ContextFullPaths, self).__init__(option_strings, dest,
-                                               filetypes=None, **kwargs)
-        self.action_option = action_option
-        self.filetypes = filetypes
-
-    def _get_kwargs(self):
-        names = ["option_strings",
-                 "dest",
-                 "nargs",
-                 "const",
-                 "default",
-                 "type",
-                 "choices",
-                 "help",
-                 "metavar",
-                 "filetypes",
-                 "action_option"]
-        return [(name, getattr(self, name)) for name in names]
-
-
-class FullHelpArgumentParser(argparse.ArgumentParser):
-    """ Identical to the built-in argument parser, but on error it
-        prints full help message instead of just usage information """
-    def error(self, message):
-        self.print_help(sys.stderr)
-        args = {"prog": self.prog, "message": message}
-        self.exit(2, "%(prog)s: error: %(message)s\n" % args)
-
-
-class SmartFormatter(argparse.HelpFormatter):
-    """ Smart formatter for allowing raw formatting in help
-        text and lists in the help text
-
-        To use: prefix the help item with "R|" to override
-        default formatting. List items can be marked with "L|"
-        at the start of a newline
-
-        adapted from: https://stackoverflow.com/questions/3853722 """
-
-    def __init__(self,
-                 prog,
-                 indent_increment=2,
-                 max_help_position=24,
-                 width=None):
-
-        super().__init__(prog, indent_increment, max_help_position, width)
-        self._whitespace_matcher_limited = re.compile(r'[ \r\f\v]+', re.ASCII)
-
-    def _split_lines(self, text, width):
-        if text.startswith("R|"):
-            text = self._whitespace_matcher_limited.sub(' ', text).strip()[2:]
-            output = list()
-            for txt in text.splitlines():
-                indent = ""
-                if txt.startswith("L|"):
-                    indent = "    "
-                    txt = "  - {}".format(txt[2:])
-                output.extend(textwrap.wrap(txt, width, subsequent_indent=indent))
-            return output
-        return argparse.HelpFormatter._split_lines(self, text, width)
-
-
-class FaceSwapArgs():
-    """ Faceswap argument parser functions that are universal
-        to all commands. Should be the parent function of all
-        subsequent argparsers """
-    def __init__(self, subparser, command,
-                 description="default", subparsers=None):
-
-        self.global_arguments = self.get_global_arguments()
-        self.info = self.get_info()
-        self.argument_list = self.get_argument_list()
-        self.optional_arguments = self.get_optional_arguments()
-        self.process_suppressions()
-        if not subparser:
-            return
-
-        self.parser = self.create_parser(subparser, command, description)
-
-        self.add_arguments()
-
-        script = ScriptExecutor(command, subparsers)
-        self.parser.set_defaults(func=script.execute_script)
-
-    @staticmethod
-    def get_info():
-        """ Return command information for display in the GUI.
-            Override for command specific info """
-        return None
-
-    @staticmethod
-    def get_argument_list():
-        """ Put the arguments in a list so that they are accessible from both
-            argparse and gui override for command specific arguments """
-        argument_list = []
-        return argument_list
-
-    @staticmethod
-    def get_optional_arguments():
-        """ Put the arguments in a list so that they are accessible from both
-            argparse and gui. This is used for when there are sub-children
-            (e.g. convert and extract) Override this for custom arguments """
-        argument_list = []
-        return argument_list
-
-    @staticmethod
-    def get_global_arguments():
-        """ Arguments that are used in ALL parts of Faceswap
-            DO NOT override this """
-        global_args = list()
-        global_args.append({
-            "opts": ("-C", "--configfile"),
-            "action": FileFullPaths,
-            "filetypes": "ini",
-            "type": str,
-            "group": "Global Options",
-            "help": "Optionally overide the saved config with the path to a custom config file."})
-        global_args.append({
-            "opts": ("-L", "--loglevel"),
-            "type": str.upper,
-            "dest": "loglevel",
-            "default": "INFO",
-            "choices": ("INFO", "VERBOSE", "DEBUG", "TRACE"),
-            "group": "Global Options",
-            "help": "Log level. Stick with INFO or VERBOSE unless you need to file an error "
-                    "report. Be careful with TRACE as it will generate a lot of data"})
-        global_args.append({
-            "opts": ("-LF", "--logfile"),
-            "action": SaveFileFullPaths,
-            "filetypes": 'log',
-            "type": str,
-            "dest": "logfile",
-            "group": "Global Options",
-            "help": "Path to store the logfile. Leave blank to store in the faceswap folder",
-            "default": None})
-        # This is a hidden argument to indicate that the GUI is being used,
-        # so the preview window should be redirected Accordingly
-        global_args.append({
-            "opts": ("-gui", "--gui"),
-            "action": "store_true",
-            "dest": "redirect_gui",
-            "default": False,
-            "help": argparse.SUPPRESS})
-        global_args.append({
-            "opts": ("-colab", "--colab"),
-            "action": "store_true",
-            "dest": "colab",
-            "default": False,
-            "help": argparse.SUPPRESS})
-        return global_args
-
-    @staticmethod
-    def create_parser(subparser, command, description):
-        """ Create the parser for the selected command """
-        parser = subparser.add_parser(
-            command,
-            help=description,
-            description=description,
-            epilog="Questions and feedback: https://faceswap.dev/forum",
-            formatter_class=SmartFormatter)
-        return parser
-
-    def add_arguments(self):
-        """ Parse the arguments passed in from argparse """
-        options = self.global_arguments + self.argument_list + self.optional_arguments
-        for option in options:
-            args = option["opts"]
-            kwargs = {key: option[key]
-                      for key in option.keys() if key not in ("opts", "group")}
-            self.parser.add_argument(*args, **kwargs)
-
-    def process_suppressions(self):
-        """ Suppress option if it is not available for running backend """
-        fs_backend = get_backend()
-        for opt_list in [self.global_arguments, self.argument_list, self.optional_arguments]:
-            for opts in opt_list:
-                if opts.get("backend", None) is None:
-                    continue
-                opt_backend = opts.pop("backend")
-                if isinstance(opt_backend, (list, tuple)):
-                    opt_backend = [backend.lower() for backend in opt_backend]
-                else:
-                    opt_backend = [opt_backend.lower()]
-                if fs_backend not in opt_backend:
-                    opts["help"] = argparse.SUPPRESS
-
-
-class ExtractConvertArgs(FaceSwapArgs):
-    """ This class is used as a parent class to capture arguments that
-        will be used in both the extract and convert process.
-
-        Arguments that can be used in both of these processes should be
-        placed here, but no further processing should be done. This class
-        just captures arguments """
-
-    @staticmethod
-    def get_argument_list():
-        """ Put the arguments in a list so that they are accessible from both
-        argparse and gui """
-        argument_list = list()
-        argument_list.append({
-            "opts": ("-i", "--input-dir"),
-            "action": DirOrFileFullPaths,
-            "filetypes": "video",
-            "dest": "input_dir",
-            "required": True,
-            "group": "Data",
-            "help": "Input directory or video. Either a directory containing the image files you "
-                    "wish to process or path to a video file. NB: This should be the source video/"
-                    "frames NOT the source faces."})
-        argument_list.append({
-            "opts": ("-o", "--output-dir"),
-            "action": DirFullPaths,
-            "dest": "output_dir",
-            "required": True,
-            "group": "Data",
-            "help": "Output directory. This is where the converted files will be saved."})
-        argument_list.append({
-            "opts": ("-al", "--alignments"),
-            "action": FileFullPaths,
-            "filetypes": "alignments",
-            "type": str,
-            "dest": "alignments_path",
-            "group": "Data",
-            "help": "Optional path to an alignments file. Leave blank if the alignments file is "
-                    "at the default location."})
-        return argument_list
-
-
-class ExtractArgs(ExtractConvertArgs):
-    """ Class to parse the command line arguments for extraction.
-        Inherits base options from ExtractConvertArgs where arguments
-        that are used for both extract and convert should be placed """
-
-    @staticmethod
-    def get_info():
-        """ Return command information """
-        return ("Extract faces from image or video sources.\n"
-                "Extraction plugins can be configured in the 'Settings' Menu")
-
-    @staticmethod
-    def get_optional_arguments():
-        """ Put the arguments in a list so that they are accessible from both
-        argparse and gui """
-        if get_backend() == "cpu":
-            default_detector = default_aligner = "cv2-dnn"
-        else:
-            default_detector = "s3fd"
-            default_aligner = "fan"
-
-        argument_list = []
-        argument_list.append({
-            "opts": ("-D", "--detector"),
-            "action": Radio,
-            "type": str.lower,
-            "choices":  PluginLoader.get_available_extractors("detect"),
-            "default": default_detector,
-            "group": "Plugins",
-            "help": "R|Detector to use. Some of these have configurable settings in "
-                    "'/config/extract.ini' or 'Settings > Configure Extract 'Plugins':"
-                    "\nL|cv2-dnn: A CPU only extractor which is the least reliable and least "
-                    "resource intensive. Use this if not using a GPU and time is important."
-                    "\nL|mtcnn: Good detector. Fast on CPU, faster on GPU. Uses fewer resources "
-                    "than other GPU detectors but can often return more false positives."
-                    "\nL|s3fd: Best detector. Fast on GPU, slow on CPU. Can detect more faces and "
-                    "fewer false positives than other GPU detectors, but is a lot more resource "
-                    "intensive."})
-        argument_list.append({
-            "opts": ("-A", "--aligner"),
-            "action": Radio,
-            "type": str.lower,
-            "choices": PluginLoader.get_available_extractors("align"),
-            "default": default_aligner,
-            "group": "Plugins",
-            "help": "R|Aligner to use."
-                    "\nL|cv2-dnn: A CPU only landmark detector. Faster, less resource intensive, "
-                    "but less accurate. Only use this if not using a GPU and time is important."
-                    "\nL|fan: Best aligner. Fast on GPU, slow on CPU."})
-        mask_choices = [mask
-                        for mask in PluginLoader.get_available_extractors("mask", add_none=True)
-                        if mask not in ("components", "extended")]
-        argument_list.append({
-            "opts": ("-M", "--masker"),
-            "action": Radio,
-            "type": str.lower,
-            "choices": mask_choices,
-            "default": "none",
-            "group": "Plugins",
-            "help": "R|Additional Masker to use. NB: The Extended and Components (landmark based) "
-                    "masks are automatically generated on extraction. Any mask selected here "
-                    "will be generated in addition to these default masks."
-                    "\nL|none: Don't use a mask."
-                    "\nL|vgg-clear: Mask designed to provide smart segmentation of mostly frontal "
-                    "faces clear of obstructions. Profile faces and obstructions may result in "
-                    "sub-par performance."
-                    "\nL|vgg-obstructed: Mask designed to provide smart segmentation of mostly "
-                    "frontal faces. The mask model has been specifically trained to recognize "
-                    "some facial obstructions (hands and eyeglasses). Profile faces may result in "
-                    "sub-par performance."
-                    "\nL|unet-dfl: Mask designed to provide smart segmentation of mostly frontal "
-                    "faces. The mask model has been trained by community members and will need "
-                    "testing for further description. Profile faces may result in sub-par "
-                    "performance."
-                    "\nThe auto generated masks are as follows:"
-                    "\nL|components: Mask designed to provide facial segmentation based on the "
-                    "positioning of landmark locations. A convex hull is constructed around the "
-                    "exterior of the landmarks to create a mask."
-                    "\nL|extended: Mask designed to provide facial segmentation based on the "
-                    "positioning of landmark locations. A convex hull is constructed around the "
-                    "exterior of the landmarks and the mask is extended upwards onto the "
-                    "forehead."})
-        argument_list.append({
-            "opts": ("-nm", "--normalization"),
-            "action": Radio,
-            "type": str.lower,
-            "dest": "normalization",
-            "choices": ["none", "clahe", "hist", "mean"],
-            "default": "none",
-            "group": "plugins",
-            "help": "R|Performing normalization can help the aligner better align faces with "
-                    "difficult lighting conditions at an extraction speed cost. Different methods "
-                    "will yield different results on different sets. NB: This does not impact the "
-                    "output face, just the input to the aligner."
-                    "\nL|none: Don't perform normalization on the face."
-                    "\nL|clahe: Perform Contrast Limited Adaptive Histogram Equalization on the "
-                    "face."
-                    "\nL|hist: Equalize the histograms on the RGB channels."
-                    "\nL|mean: Normalize the face colors to the mean."})
-        argument_list.append({
-            "opts": ("-r", "--rotate-images"),
-            "type": str,
-            "dest": "rotate_images",
-            "default": None,
-            "group": "plugins",
-            "help": "If a face isn't found, rotate the images to try to find a face. Can find "
-                    "more faces at the cost of extraction speed. Pass in a single number to use "
-                    "increments of that size up to 360, or pass in a list of numbers to enumerate "
-                    "exactly what angles to check."})
-        argument_list.append({
-            "opts": ("-min", "--min-size"),
-            "type": int,
-            "action": Slider,
-            "dest": "min_size",
-            "min_max": (0, 1080),
-            "default": 0,
-            "rounding": 20,
-            "group": "Face Processing",
-            "help": "Filters out faces detected below this size. Length, in pixels across the "
-                    "diagonal of the bounding box. Set to 0 for off"})
-        argument_list.append({
-            "opts": ("-n", "--nfilter"),
-            "action": FilesFullPaths,
-            "filetypes": "image",
-            "dest": "nfilter",
-            "nargs": "+",
-            "default": None,
-            "group": "Face Processing",
-            "help": "Optionally filter out people who you do not wish to process by passing in an "
-                    "image of that person. Should be a front portrait with a single person in the "
-                    "image. Multiple images can be added space separated. NB: Using face filter "
-                    "will significantly decrease extraction speed and its accuracy cannot be "
-                    "guaranteed."})
-        argument_list.append({
-            "opts": ("-f", "--filter"),
-            "action": FilesFullPaths,
-            "filetypes": "image",
-            "dest": "filter",
-            "nargs": "+",
-            "default": None,
-            "group": "Face Processing",
-            "help": "Optionally select people you wish to process by passing in an image of that "
-                    "person. Should be a front portrait with a single person in the image. "
-                    "Multiple images can be added space separated. NB: Using face filter will "
-                    "significantly decrease extraction speed and its accuracy cannot be "
-                    "guaranteed."})
-        argument_list.append({
-            "opts": ("-l", "--ref_threshold"),
-            "action": Slider,
-            "min_max": (0.01, 0.99),
-            "rounding": 2,
-            "type": float,
-            "dest": "ref_threshold",
-            "default": 0.4,
-            "group": "Face Processing",
-            "help": "For use with the optional nfilter/filter files. Threshold for positive face "
-                    "recognition. Lower values are stricter. NB: Using face filter will "
-                    "significantly decrease extraction speed and its accuracy cannot be "
-                    "guaranteed."})
-        argument_list.append({
-            "opts": ("-een", "--extract-every-n"),
-            "type": int,
-            "action": Slider,
-            "dest": "extract_every_n",
-            "min_max": (1, 100),
-            "default": 1,
-            "rounding": 1,
-            "group": "output",
-            "help": "Extract every 'nth' frame. This option will skip frames when extracting "
-                    "faces. For example a value of 1 will extract faces from every frame, a value "
-                    "of 10 will extract faces from every 10th frame."})
-        argument_list.append({
-            "opts": ("-sz", "--size"),
-            "type": int,
-            "action": Slider,
-            "min_max": (128, 512),
-            "default": 256,
-            "rounding": 64,
-            "group": "output",
-            "help": "The output size of extracted faces. Make sure that the model you intend to "
-                    "train supports your required size. This will only need to be changed for "
-                    "hi-res models."})
-        argument_list.append({
-            "opts": ("-si", "--save-interval"),
-            "dest": "save_interval",
-            "type": int,
-            "action": Slider,
-            "min_max": (0, 1000),
-            "rounding": 10,
-            "default": 0,
-            "group": "output",
-            "help": "Automatically save the alignments file after a set amount of frames. By "
-                    "default the alignments file is only saved at the end of the extraction "
-                    "process. NB: If extracting in 2 passes then the alignments file will only "
-                    "start to be saved out during the second pass. WARNING: Don't interrupt the "
-                    "script when writing the file because it might get corrupted. Set to 0 to "
-                    "turn off"})
-        argument_list.append({
-            "opts": ("-dl", "--debug-landmarks"),
-            "action": "store_true",
-            "dest": "debug_landmarks",
-            "group": "output",
-            "default": False,
-            "help": "Draw landmarks on the ouput faces for debugging purposes."})
-        argument_list.append({
-            "opts": ("-sp", "--singleprocess"),
-            "action": "store_true",
-            "default": False,
-            "backend": "nvidia",
-            "group": "settings",
-            "help": "Don't run extraction in parallel. Will run each part of the extraction "
-                    "process separately (one after the other) rather than all at the smae time. "
-                    "Useful if VRAM is at a premium."})
-        argument_list.append({
-            "opts": ("-s", "--skip-existing"),
-            "action": "store_true",
-            "dest": "skip_existing",
-            "group": "settings",
-            "default": False,
-            "help": "Skips frames that have already been extracted and exist in the alignments "
-                    "file"})
-        argument_list.append({
-            "opts": ("-sf", "--skip-existing-faces"),
-            "action": "store_true",
-            "dest": "skip_faces",
-            "group": "settings",
-            "default": False,
-            "help": "Skip frames that already have detected faces in the alignments file"})
-        return argument_list
-
-
-class ConvertArgs(ExtractConvertArgs):
-    """ Class to parse the command line arguments for conversion.
-        Inherits base options from ExtractConvertArgs where arguments
-        that are used for both extract and convert should be placed """
-
-    @staticmethod
-    def get_info():
-        """ Return command information """
-        return ("Swap the original faces in a source video/images to your final faces.\n"
-                "Conversion plugins can be configured in the 'Settings' Menu")
-
-    @staticmethod
-    def get_optional_arguments():
-        """ Put the arguments in a list so that they are accessible from both
-        argparse and gui """
-        argument_list = []
-        argument_list.append({
-            "opts": ("-ref", "--reference-video"),
-            "action": FileFullPaths,
-            "dest": "reference_video",
-            "filetypes": "video",
-            "type": str,
-            "group": "data",
-            "help": "Only required if converting from images to video. Provide The original video "
-                    "that the source frames were extracted from (for extracting the fps and "
-                    "audio)."})
-        argument_list.append({
-            "opts": ("-m", "--model-dir"),
-            "action": DirFullPaths,
-            "dest": "model_dir",
-            "required": True,
-            "group": "data",
-            "help": "Model directory. The directory containing the trained model you wish to use "
-                    "for conversion."})
-        argument_list.append({
-            "opts": ("-c", "--color-adjustment"),
-            "action": Radio,
-            "type": str.lower,
-            "dest": "color_adjustment",
-            "choices": PluginLoader.get_available_convert_plugins("color", True),
-            "default": "avg-color",
-            "group": "plugins",
-            "help": "R|Performs color adjustment to the swapped face. Some of these options have "
-                    "configurable settings in '/config/convert.ini' or 'Settings > Configure "
-                    "Convert Plugins':"
-                    "\nL|avg-color: Adjust the mean of each color channel in the swapped "
-                    "reconstruction to equal the mean of the masked area in the original image."
-                    "\nL|color-transfer: Transfers the color distribution from the source to the "
-                    "target image using the mean and standard deviations of the L*a*b* "
-                    "color space."
-                    "\nL|manual-balance: Manually adjust the balance of the image in a variety of "
-                    "color spaces. Best used with the Preview tool to set correct values."
-                    "\nL|match-hist: Adjust the histogram of each color channel in the swapped "
-                    "reconstruction to equal the histogram of the masked area in the original "
-                    "image."
-                    "\nL|seamless-clone: Use cv2's seamless clone function to remove extreme "
-                    "gradients at the mask seam by smoothing colors. Generally does not give "
-                    "very satisfactory results."
-                    "\nL|none: Don't perform color adjustment."})
-        argument_list.append({
-            "opts": ("-M", "--mask-type"),
-            "action": Radio,
-            "dest": "mask_type",
-            "type": str.lower,
-            "choices": PluginLoader.get_available_extractors("mask",
-                                                             add_none=True) + ["predicted"],
-            "default": "extended",
-            "group": "Plugins",
-            "help": "R|Masker to use. NB: The mask you require must exist within the alignments "
-                    "file. You can add additional masks with the Mask Tool."
-                    "\nL|none: Don't use a mask."
-                    "\nL|components: Mask designed to provide facial segmentation based on the "
-                    "positioning of landmark locations. A convex hull is constructed around the "
-                    "exterior of the landmarks to create a mask."
-                    "\nL|extended: Mask designed to provide facial segmentation based on the "
-                    "positioning of landmark locations. A convex hull is constructed around the "
-                    "exterior of the landmarks and the mask is extended upwards onto the forehead."
-                    "\nL|vgg-clear: Mask designed to provide smart segmentation of mostly frontal "
-                    "faces clear of obstructions. Profile faces and obstructions may result in "
-                    "sub-par performance."
-                    "\nL|vgg-obstructed: Mask designed to provide smart segmentation of mostly "
-                    "frontal faces. The mask model has been specifically trained to recognize "
-                    "some facial obstructions (hands and eyeglasses). Profile faces may result in "
-                    "sub-par performance."
-                    "\nL|unet-dfl: Mask designed to provide smart segmentation of mostly frontal "
-                    "faces. The mask model has been trained by community members and will need "
-                    "testing for further description. Profile faces may result in sub-par "
-                    "performance."})
-        argument_list.append({
-            "opts": ("-sc", "--scaling"),
-            "action": Radio,
-            "type": str.lower,
-            "choices": PluginLoader.get_available_convert_plugins("scaling", True),
-            "group": "plugins",
-            "default": "none",
-            "help": "R|Performs a scaling process to attempt to get better definition on the "
-                    "final swap. Some of these options have configurable settings in "
-                    "'/config/convert.ini' or 'Settings > Configure Convert Plugins':"
-                    "\nL|sharpen: Perform sharpening on the final face."
-                    "\nL|none: Don't perform any scaling operations."})
-        argument_list.append({
-            "opts": ("-w", "--writer"),
-            "action": Radio,
-            "type": str,
-            "choices": PluginLoader.get_available_convert_plugins("writer", False),
-            "group": "plugins",
-            "default": "opencv",
-            "help": "R|The plugin to use to output the converted images. The writers are "
-                    "configurable in '/config/convert.ini' or 'Settings > Configure Convert "
-                    "Plugins:'"
-                    "\nL|ffmpeg: [video] Writes out the convert straight to video. When the input "
-                    "is a series of images then the '-ref' (--reference-video) parameter must be "
-                    "set."
-                    "\nL|gif: [animated image] Create an animated gif."
-                    "\nL|opencv: [images] The fastest image writer, but less options and formats "
-                    "than other plugins."
-                    "\nL|pillow: [images] Slower than opencv, but has more options and supports "
-                    "more formats."})
-        argument_list.append({
-            "opts": ("-osc", "--output-scale"),
-            "dest": "output_scale",
-            "action": Slider,
-            "type": int,
-            "default": 100,
-            "min_max": (25, 400),
-            "rounding": 1,
-            "group": "Frame Processing",
-            "help": "Scale the final output frames by this amount. 100%% will output the frames "
-                    "at source dimensions. 50%% at half size 200%% at double size"})
-        argument_list.append({
-            "opts": ("-fr", "--frame-ranges"),
-            "nargs": "+",
-            "type": str,
-            "group": "Frame Processing",
-            "help": "Frame ranges to apply transfer to e.g. For frames 10 to 50 and 90 to 100 use "
-                    "--frame-ranges 10-50 90-100. Frames falling outside of the selected range "
-                    "will be discarded unless '-k' (--keep-unchanged) is selected. NB: If you are "
-                    "converting from images, then the filenames must end with the frame-number!"})
-        argument_list.append({
-            "opts": ("-a", "--input-aligned-dir"),
-            "action": DirFullPaths,
-            "dest": "input_aligned_dir",
-            "group": "Face Processing",
-            "default": None,
-            "help": "If you have not cleansed your alignments file, then you can filter out faces "
-                    "by defining a folder here that contains the faces extracted from your input "
-                    "files/video. If this folder is defined, then only faces that exist within "
-                    "your alignments file and also exist within the specified folder will be "
-                    "converted. Leaving this blank will convert all faces that exist within the "
-                    "alignments file."})
-        argument_list.append({
-            "opts": ("-n", "--nfilter"),
-            "action": FilesFullPaths,
-            "filetypes": "image",
-            "dest": "nfilter",
-            "nargs": "+",
-            "default": None,
-            "group": "Face Processing",
-            "help": "Optionally filter out people who you do not wish to process by passing in an "
-                    "image of that person. Should be a front portrait with a single person in the "
-                    "image. Multiple images can be added space separated. NB: Using face filter "
-                    "will significantly decrease extraction speed and its accuracy cannot be "
-                    "guaranteed."})
-        argument_list.append({
-            "opts": ("-f", "--filter"),
-            "action": FilesFullPaths,
-            "filetypes": "image",
-            "dest": "filter",
-            "nargs": "+",
-            "default": None,
-            "group": "Face Processing",
-            "help": "Optionally select people you wish to process by passing in an image of that "
-                    "person. Should be a front portrait with a single person in the image. "
-                    "Multiple images can be added space separated. NB: Using face filter will "
-                    "significantly decrease extraction speed and its accuracy cannot be "
-                    "guaranteed."})
-        argument_list.append({
-            "opts": ("-l", "--ref_threshold"),
-            "action": Slider,
-            "min_max": (0.01, 0.99),
-            "rounding": 2,
-            "type": float,
-            "dest": "ref_threshold",
-            "default": 0.4,
-            "group": "Face Processing",
-            "help": "For use with the optional nfilter/filter files. Threshold for positive face "
-                    "recognition. Lower values are stricter. NB: Using face filter will "
-                    "significantly decrease extraction speed and its accuracy cannot be "
-                    "guaranteed."})
-        argument_list.append({
-            "opts": ("-j", "--jobs"),
-            "dest": "jobs",
-            "action": Slider,
-            "group": "settings",
-            "type": int,
-            "default": 0,
-            "min_max": (0, 40),
-            "rounding": 1,
-            "help": "The maximum number of parallel processes for performing conversion. "
-                    "Converting images is system RAM heavy so it is possible to run out of memory "
-                    "if you have a lot of processes and not enough RAM to accommodate them all. "
-                    "Setting this to 0 will use the maximum available. No matter what you set "
-                    "this to, it will never attempt to use more processes than are available on "
-                    "your system. If singleprocess is enabled this setting will be ignored."})
-        argument_list.append({
-            "opts": ("-g", "--gpus"),
-            "type": int,
-            "backend": "nvidia",
-            "action": Slider,
-            "min_max": (1, 10),
-            "rounding": 1,
-            "group": "settings",
-            "default": 1,
-            "help": "Number of GPUs to use for conversion"})
-        argument_list.append({
-            "opts": ("-t", "--trainer"),
-            "type": str.lower,
-            "choices": PluginLoader.get_available_models(),
-            "group": "settings",
-            "help": "[LEGACY] This only needs to be selected if a legacy model is being loaded or "
-                    "if there are multiple models in the model folder"})
-        argument_list.append({
-            "opts": ("-ag", "--allow-growth"),
-            "action": "store_true",
-            "dest": "allow_growth",
-            "group": "settings",
-            "default": False,
-            "backend": "nvidia",
-            "help": "Sets allow_growth option of Tensorflow to spare memory on some "
-                    "configurations."})
-        argument_list.append({
-            "opts": ("-otf", "--on-the-fly"),
-            "action": "store_true",
-            "dest": "on_the_fly",
-            "group": "settings",
-            "default": False,
-            "help": "Enable On-The-Fly Conversion. NOT recommended. You should generate a clean "
-                    "alignments file for your destination video. However, if you wish you can "
-                    "generate the alignments on-the-fly by enabling this option. This will use "
-                    "an inferior extraction pipeline and will lead to substandard results. If an "
-                    "alignments file is found, this option will be ignored."})
-        argument_list.append({
-            "opts": ("-k", "--keep-unchanged"),
-            "action": "store_true",
-            "dest": "keep_unchanged",
-            "group": "Frame Processing",
-            "default": False,
-            "help": "When used with --frame-ranges outputs the unchanged frames that are not "
-                    "processed instead of discarding them."})
-        argument_list.append({
-            "opts": ("-s", "--swap-model"),
-            "action": "store_true",
-            "dest": "swap_model",
-            "group": "settings",
-            "default": False,
-            "help": "Swap the model. Instead converting from of A -> B, converts B -> A"})
-        argument_list.append({
-            "opts": ("-sp", "--singleprocess"),
-            "action": "store_true",
-            "group": "settings",
-            "default": False,
-            "help": "Disable multiprocessing. Slower but less resource intensive."})
-        return argument_list
-
-
-class TrainArgs(FaceSwapArgs):
-    """ Class to parse the command line arguments for training """
-
-    @staticmethod
-    def get_info():
-        """ Return command information """
-        return ("Train a model on extracted original (A) and swap (B) faces.\n"
-                "Training models can take a long time. Anything from 24hrs to over a week\n"
-                "Model plugins can be configured in the 'Settings' Menu")
-
-    @staticmethod
-    def get_argument_list():
-        """ Put the arguments in a list so that they are accessible from both
-        argparse and gui """
-        argument_list = list()
-        argument_list.append({"opts": ("-A", "--input-A"),
-                              "action": DirFullPaths,
-                              "dest": "input_a",
-                              "required": True,
-                              "group": "faces",
-                              "help": "Input directory. A directory containing training images "
-                                      "for face A. This is the original face, i.e. the face that "
-                                      "you want to remove and replace with face B."})
-        argument_list.append({"opts": ("-ala", "--alignments-A"),
-                              "action": FileFullPaths,
-                              "filetypes": 'alignments',
-                              "type": str,
-                              "dest": "alignments_path_a",
-                              "default": None,
-                              "group": "faces",
-                              "help": "Path to alignments file for training set A. Only required "
-                                      "if you are using a masked model or warp-to-landmarks is "
-                                      "enabled. Defaults to <input-A>/alignments.json if not "
-                                      "provided."})
-        argument_list.append({"opts": ("-B", "--input-B"),
-                              "action": DirFullPaths,
-                              "dest": "input_b",
-                              "required": True,
-                              "group": "faces",
-                              "help": "Input directory. A directory containing training images "
-                                      "for face B. This is the swap face, i.e. the face that "
-                                      "you want to place onto the head of person A."})
-        argument_list.append({"opts": ("-alb", "--alignments-B"),
-                              "action": FileFullPaths,
-                              "filetypes": 'alignments',
-                              "type": str,
-                              "dest": "alignments_path_b",
-                              "default": None,
-                              "group": "faces",
-                              "help": "Path to alignments file for training set B. Only required "
-                                      "if you are using a masked model or warp-to-landmarks is "
-                                      "enabled. Defaults to <input-B>/alignments.json if not "
-                                      "provided."})
-        argument_list.append({"opts": ("-m", "--model-dir"),
-                              "action": DirFullPaths,
-                              "dest": "model_dir",
-                              "required": True,
-                              "group": "model",
-                              "help": "Model directory. This is where the training data will be "
-                                      "stored. You should always specify a new folder for new "
-                                      "models. If starting a new model, select either an empty "
-                                      "folder, or a folder which does not exist (which will be "
-                                      "created). If continuing to train an existing model, "
-                                      "specify the location of the existing model."})
-        argument_list.append({"opts": ("-t", "--trainer"),
-                              "action": Radio,
-                              "type": str.lower,
-                              "choices": PluginLoader.get_available_models(),
-                              "default": PluginLoader.get_default_model(),
-                              "group": "model",
-                              "help": "R|Select which trainer to use. Trainers can be "
-                                      "configured from the Settings menu or the config folder."
-                                      "\nL|original: The original model created by /u/deepfakes."
-                                      "\nL|dfaker: 64px in/128px out model from dfaker. "
-                                      "Enable 'warp-to-landmarks' for full dfaker method."
-                                      "\nL|dfl-h128. 128px in/out model from deepfacelab"
-                                      "\nL|dfl-sae. Adaptable model from deepfacelab"
-                                      "\nL|dlight. A lightweight, high resolution DFaker variant."
-                                      "\nL|iae: A model that uses intermediate layers to try to "
-                                      "get better details"
-                                      "\nL|lightweight: A lightweight model for low-end cards. "
-                                      "Don't expect great results. Can train as low as 1.6GB "
-                                      "with batch size 8."
-                                      "\nL|realface: A high detail, dual density model based on "
-                                      "DFaker, with customizable in/out resolution. The "
-                                      "autoencoders are unbalanced so B>A swaps won't work "
-                                      "so well. By andenixa et al. Very configurable."
-                                      "\nL|unbalanced: 128px in/out model from andenixa. The "
-                                      "autoencoders are unbalanced so B>A swaps won't work so "
-                                      "well. Very configurable."
-                                      "\nL|villain: 128px in/out model from villainguy. Very "
-                                      "resource hungry (11GB for batchsize 16). Good for "
-                                      "details, but more susceptible to color differences."})
-        argument_list.append({"opts": ("-bs", "--batch-size"),
-                              "type": int,
-                              "action": Slider,
-                              "min_max": (2, 256),
-                              "rounding": 2,
-                              "dest": "batch_size",
-                              "default": 64,
-                              "group": "training",
-                              "help": "Batch size. This is the number of images processed through "
-                                      "the model for each iteration. Larger batches require more "
-                                      "GPU RAM."})
-        argument_list.append({"opts": ("-it", "--iterations"),
-                              "type": int,
-                              "action": Slider,
-                              "min_max": (0, 5000000),
-                              "rounding": 20000,
-                              "default": 1000000,
-                              "group": "training",
-                              "help": "Length of training in iterations. This is only really used "
-                                      "for automation. There is no 'correct' number of iterations "
-                                      "a model should be trained for. You should stop training "
-                                      "when you are happy with the previews. However, if you want "
-                                      "the model to stop automatically at a set number of "
-                                      "iterations, you can set that value here."})
-        argument_list.append({"opts": ("-g", "--gpus"),
-                              "type": int,
-                              "backend": "nvidia",
-                              "action": Slider,
-                              "min_max": (1, 10),
-                              "rounding": 1,
-                              "group": "training",
-                              "default": 1,
-                              "help": "Number of GPUs to use for training"})
-        argument_list.append({"opts": ("-msg", "--memory-saving-gradients"),
-                              "action": "store_true",
-                              "dest": "memory_saving_gradients",
-                              "group": "VRAM Savings",
-                              "default": False,
-                              "backend": "nvidia",
-                              "help": "Trades off VRAM usage against computation time. Can fit "
-                                      "larger models into memory at a cost of slower training "
-                                      "speed. 50%%-150%% batch size increase for 20%%-50%% longer "
-                                      "training time. NB: Launch time will be significantly "
-                                      "delayed. Switching sides using ping-pong training will "
-                                      "take longer."})
-        argument_list.append({"opts": ("-o", "--optimizer-savings"),
-                              "dest": "optimizer_savings",
-                              "action": "store_true",
-                              "default": False,
-                              "group": "VRAM Savings",
-                              "backend": "nvidia",
-                              "help": "To save VRAM some optimizer gradient calculations can be "
-                                      "performed on the CPU rather than the GPU. This allows you "
-                                      "to increase batchsize at a training speed/system RAM "
-                                      "cost."})
-        argument_list.append({"opts": ("-pp", "--ping-pong"),
-                              "action": "store_true",
-                              "dest": "pingpong",
-                              "group": "VRAM Savings",
-                              "default": False,
-                              "backend": "nvidia",
-                              "help": "Enable ping pong training. Trains one side at a time, "
-                                      "switching sides at each save iteration. Training will "
-                                      "take 2 to 4 times longer, with about a 30%%-50%% reduction "
-                                      "in VRAM useage. NB: Preview won't show until both sides "
-                                      "have been trained once."})
-        argument_list.append({"opts": ("-s", "--save-interval"),
-                              "type": int,
-                              "action": Slider,
-                              "min_max": (10, 1000),
-                              "rounding": 10,
-                              "dest": "save_interval",
-                              "group": "Saving",
-                              "default": 100,
-                              "help": "Sets the number of iterations between each model save."})
-        argument_list.append({"opts": ("-ss", "--snapshot-interval"),
-                              "type": int,
-                              "action": Slider,
-                              "min_max": (0, 100000),
-                              "rounding": 5000,
-                              "dest": "snapshot_interval",
-                              "group": "Saving",
-                              "default": 25000,
-                              "help": "Sets the number of iterations before saving a backup "
-                                      "snapshot of the model in it's current state. Set to 0 for "
-                                      "off."})
-        argument_list.append({"opts": ("-tia", "--timelapse-input-A"),
-                              "action": DirFullPaths,
-                              "dest": "timelapse_input_a",
-                              "default": None,
-                              "group": "timelapse",
-                              "help": "Optional for creating a timelapse. Timelapse will save an "
-                                      "image of your selected faces into the timelapse-output "
-                                      "folder at every save iteration. This should be the "
-                                      "input folder of 'A' faces that you would like to use for "
-                                      "creating the timelapse. You must also supply a "
-                                      "--timelapse-output and a --timelapse-input-B parameter."})
-        argument_list.append({"opts": ("-tib", "--timelapse-input-B"),
-                              "action": DirFullPaths,
-                              "dest": "timelapse_input_b",
-                              "default": None,
-                              "group": "timelapse",
-                              "help": "Optional for creating a timelapse. Timelapse will save an "
-                                      "image of your selected faces into the timelapse-output "
-                                      "folder at every save iteration. This should be the "
-                                      "input folder of 'B' faces that you would like to use for "
-                                      "creating the timelapse. You must also supply a "
-                                      "--timelapse-output and a --timelapse-input-A parameter."})
-        argument_list.append({"opts": ("-to", "--timelapse-output"),
-                              "action": DirFullPaths,
-                              "dest": "timelapse_output",
-                              "default": None,
-                              "group": "timelapse",
-                              "help": "Optional for creating a timelapse. Timelapse will save an "
-                                      "image of your selected faces into the timelapse-output "
-                                      "folder at every save iteration. If the input folders are "
-                                      "supplied but no output folder, it will default to your "
-                                      "model folder /timelapse/"})
-        argument_list.append({"opts": ("-ps", "--preview-scale"),
-                              "type": int,
-                              "action": Slider,
-                              "dest": "preview_scale",
-                              "min_max": (25, 200),
-                              "group": "preview",
-                              "rounding": 25,
-                              "default": 50,
-                              "help": "Percentage amount to scale the preview by."})
-        argument_list.append({"opts": ("-p", "--preview"),
-                              "action": "store_true",
-                              "dest": "preview",
-                              "group": "preview",
-                              "default": False,
-                              "help": "Show training preview output. in a separate window."})
-        argument_list.append({"opts": ("-w", "--write-image"),
-                              "action": "store_true",
-                              "dest": "write_image",
-                              "group": "preview",
-                              "default": False,
-                              "help": "Writes the training result to a file. The image will be "
-                                      "stored in the root of your FaceSwap folder."})
-        argument_list.append({"opts": ("-ag", "--allow-growth"),
-                              "action": "store_true",
-                              "dest": "allow_growth",
-                              "group": "model",
-                              "default": False,
-                              "backend": "nvidia",
-                              "help": "Sets allow_growth option of Tensorflow to spare memory "
-                                      "on some configurations."})
-        argument_list.append({"opts": ("-nl", "--no-logs"),
-                              "action": "store_true",
-                              "dest": "no_logs",
-                              "group": "training",
-                              "default": False,
-                              "help": "Disables TensorBoard logging. NB: Disabling logs means "
-                                      "that you will not be able to use the graph or analysis "
-                                      "for this session in the GUI."})
-        argument_list.append({"opts": ("-wl", "--warp-to-landmarks"),
-                              "action": "store_true",
-                              "dest": "warp_to_landmarks",
-                              "group": "training",
-                              "default": False,
-                              "help": "Warps training faces to closely matched Landmarks from the "
-                                      "opposite face-set rather than randomly warping the face. "
-                                      "This is the 'dfaker' way of doing warping. Alignments "
-                                      "files for both sets of faces must be provided if using "
-                                      "this option."})
-        argument_list.append({"opts": ("-nf", "--no-flip"),
-                              "action": "store_true",
-                              "dest": "no_flip",
-                              "group": "training",
-                              "default": False,
-                              "help": "To effectively learn, a random set of images are flipped "
-                                      "horizontally. Sometimes it is desirable for this not to "
-                                      "occur. Generally this should be left off except for "
-                                      "during 'fit training'."})
-        argument_list.append({"opts": ("-nac", "--no-augment-color"),
-                              "action": "store_true",
-                              "dest": "no_augment_color",
-                              "group": "training",
-                              "default": False,
-                              "help": "Color augmentation helps make the model less susceptible "
-                                      "to color differences between the A and B sets, at an "
-                                      "increased training time cost. Enable this option to "
-                                      "disable color augmentation."})
-        return argument_list
-
-
-class GuiArgs(FaceSwapArgs):
-    """ Class to parse the command line arguments for training """
-
-    @staticmethod
-    def get_argument_list():
-        """ Put the arguments in a list so that they are accessible from both
-        argparse and gui """
-        argument_list = []
-        argument_list.append({
-            "opts": ("-d", "--debug"),
-            "action": "store_true",
-            "dest": "debug",
-            "default": False,
-            "help": "Output to Shell console instead of GUI console"})
-        return argument_list
diff --git a/lib/cli/__init__.py b/lib/cli/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/lib/cli/actions.py b/lib/cli/actions.py
new file mode 100644
index 0000000..c5599d2
--- /dev/null
+++ b/lib/cli/actions.py
@@ -0,0 +1,367 @@
+#!/usr/bin/env python3
+""" Custom :class:`argparse.Action` objects for Faceswap's Command Line Interface.
+
+The custom actions within this module allow for custom manipulation of Command Line Arguments
+as well as adding a mechanism for indicating to the GUI how specific options should be rendered.
+"""
+
+import argparse
+import os
+
+
+# << FILE HANDLING >>
+
+class _FullPaths(argparse.Action):  # pylint: disable=too-few-public-methods
+    """ Parent class for various file type and file path handling classes.
+
+    Expands out given paths to their full absolute paths. This class should not be
+    called directly. It is the base class for the various different file handling
+    methods.
+    """
+    def __call__(self, parser, namespace, values, option_string=None):
+        if isinstance(values, (list, tuple)):
+            vals = [os.path.abspath(os.path.expanduser(val)) for val in values]
+        else:
+            vals = os.path.abspath(os.path.expanduser(values))
+        setattr(namespace, self.dest, vals)
+
+
+class DirFullPaths(_FullPaths):
+    """ Adds support for a Directory browser in the GUI.
+
+    This is a standard :class:`argparse.Action` (with stock parameters) which indicates to the GUI
+    that a dialog box should be opened in order to browse for a folder.
+
+    No additional parameters are required.
+
+    Example
+    -------
+    >>> argument_list = []
+    >>> argument_list.append(dict(
+    >>>        opts=("-f", "--folder_location"),
+    >>>        action=DirFullPaths)),
+    """
+    # pylint: disable=too-few-public-methods,unnecessary-pass
+    pass
+
+
+class FileFullPaths(_FullPaths):
+    """ Adds support for a File browser to select a single file in the GUI.
+
+    This extends the standard :class:`argparse.Action` and adds an additional parameter
+    :attr:`filetypes`, indicating to the GUI that it should pop a file browser for opening a file
+    and limit the results to the file types listed. As well as the standard parameters, the
+    following parameter is required:
+
+    Parameters
+    ----------
+    filetypes: str
+        The accepted file types for this option. This is the key for the GUIs lookup table which
+        can be found in :class:`lib.gui.utils.FileHandler`
+
+    Example
+    -------
+    >>> argument_list = []
+    >>> argument_list.append(dict(
+    >>>        opts=("-f", "--video_location"),
+    >>>        action=FileFullPaths,
+    >>>        filetypes="video))"
+    """
+    # pylint: disable=too-few-public-methods
+    def __init__(self, *args, filetypes=None, **kwargs):
+        super().__init__(*args, **kwargs)
+        self.filetypes = filetypes
+
+    def _get_kwargs(self):
+        names = ["option_strings",
+                 "dest",
+                 "nargs",
+                 "const",
+                 "default",
+                 "type",
+                 "choices",
+                 "help",
+                 "metavar",
+                 "filetypes"]
+        return [(name, getattr(self, name)) for name in names]
+
+
+class FilesFullPaths(FileFullPaths):  # pylint: disable=too-few-public-methods
+    """ Adds support for a File browser to select multiple files in the GUI.
+
+    This extends the standard :class:`argparse.Action` and adds an additional parameter
+    :attr:`filetypes`, indicating to the GUI that it should pop a file browser, and limit
+    the results to the file types listed. Multiple files can be selected for opening, so the
+    :attr:`nargs` parameter must be set. As well as the standard parameters, the following
+    parameter is required:
+
+    Parameters
+    ----------
+    filetypes: str
+        The accepted file types for this option. This is the key for the GUIs lookup table which
+        can be found in :class:`lib.gui.utils.FileHandler`
+
+    Example
+    -------
+    >>> argument_list = []
+    >>> argument_list.append(dict(
+    >>>        opts=("-f", "--images"),
+    >>>        action=FilesFullPaths,
+    >>>        filetypes="image",
+    >>>        nargs="+"))
+    """
+    def __init__(self, *args, filetypes=None, **kwargs):
+        if kwargs.get("nargs", None) is None:
+            opt = kwargs["option_strings"]
+            raise ValueError("nargs must be provided for FilesFullPaths: {}".format(opt))
+        super().__init__(*args, **kwargs)
+
+
+class DirOrFileFullPaths(FileFullPaths):  # pylint: disable=too-few-public-methods
+    """ Adds support to the GUI to launch either a file browser or a folder browser.
+
+    Some inputs (for example source frames) can come from a folder of images or from a
+    video file. This indicates to the GUI that it should place 2 buttons (one for a folder
+    browser, one for a file browser) for file/folder browsing.
+
+    The standard :class:`argparse.Action` is extended with the additional parameter
+    :attr:`filetypes`, indicating to the GUI that it should pop a file browser, and limit
+    the results to the file types listed. As well as the standard parameters, the following
+    parameter is required:
+
+    Parameters
+    ----------
+    filetypes: str
+        The accepted file types for this option. This is the key for the GUIs lookup table which
+        can be found in :class:`lib.gui.utils.FileHandler`. NB: This parameter is only used for
+        the file browser and not the folder browser
+
+    Example
+    -------
+    >>> argument_list = []
+    >>> argument_list.append(dict(
+    >>>        opts=("-f", "--input_frames"),
+    >>>        action=DirOrFileFullPaths,
+    >>>        filetypes="video))"
+    """
+    pass  # pylint: disable=unnecessary-pass
+
+
+class SaveFileFullPaths(FileFullPaths):
+    """ Adds support for a Save File dialog in the GUI.
+
+    This extends the standard :class:`argparse.Action` and adds an additional parameter
+    :attr:`filetypes`, indicating to the GUI that it should pop a save file browser, and limit
+    the results to the file types listed. As well as the standard parameters, the following
+    parameter is required:
+
+    Parameters
+    ----------
+    filetypes: str
+        The accepted file types for this option. This is the key for the GUIs lookup table which
+        can be found in :class:`lib.gui.utils.FileHandler`
+
+    Example
+    -------
+    >>> argument_list = []
+    >>> argument_list.append(dict(
+    >>>        opts=("-f", "--video_out"),
+    >>>        action=SaveFileFullPaths,
+    >>>        filetypes="video"))
+    """
+    # pylint: disable=too-few-public-methods,unnecessary-pass
+    pass
+
+
+class ContextFullPaths(FileFullPaths):
+    """ Adds support for context sensitive browser dialog opening in the GUI.
+
+    For some tasks, the type of action (file load, folder open, file save etc.) can vary
+    depending on the task to be performed (a good example of this is the effmpeg tool).
+    Using this action indicates to the GUI that the type of dialog to be launched can change
+    depending on another option. As well as the standard parameters, the below parameters are
+    required. NB: :attr:`nargs` are explicitly disallowed.
+
+    Parameters
+    ----------
+    filetypes: str
+        The accepted file types for this option. This is the key for the GUIs lookup table which
+        can be found in :class:`lib.gui.utils.FileHandler`
+    action_option: str
+        The command line option that dictates the context of the file dialog to be opened.
+        Bespoke actions are set in :class:`lib.gui.utils.FileHandler`
+
+    Example
+    -------
+    Assuming an argument has already been set with option string `-a` indicating the action to be
+    performed, the following will pop a different type of dialog depending on the action selected:
+
+    >>> argument_list = []
+    >>> argument_list.append(dict(
+    >>>        opts=("-f", "--input_video"),
+    >>>        action=ContextFullPaths,
+    >>>        filetypes="video",
+    >>>        action_option="-a"))
+    """
+    # pylint: disable=too-few-public-methods, too-many-arguments
+    def __init__(self, *args, filetypes=None, action_option=None, **kwargs):
+        opt = kwargs["option_strings"]
+        if kwargs.get("nargs", None) is not None:
+            raise ValueError("nargs not allowed for ContextFullPaths: {}".format(opt))
+        if filetypes is None:
+            raise ValueError("filetypes is required for ContextFullPaths: {}".format(opt))
+        if action_option is None:
+            raise ValueError("action_option is required for ContextFullPaths: {}".format(opt))
+        super().__init__(*args, filetypes=filetypes, **kwargs)
+        self.action_option = action_option
+
+    def _get_kwargs(self):
+        names = ["option_strings",
+                 "dest",
+                 "nargs",
+                 "const",
+                 "default",
+                 "type",
+                 "choices",
+                 "help",
+                 "metavar",
+                 "filetypes",
+                 "action_option"]
+        return [(name, getattr(self, name)) for name in names]
+
+
+# << GUI DISPLAY OBJECTS >>
+
+class Radio(argparse.Action):  # pylint: disable=too-few-public-methods
+    """ Adds support for a GUI Radio options box.
+
+    This is a standard :class:`argparse.Action` (with stock parameters) which indicates to the GUI
+    that the options passed should be rendered as a group of Radio Buttons rather than a combo box.
+
+    No additional parameters are required, but the :attr:`choices` parameter must be provided as
+    these will be the Radio Box options. :attr:`nargs` are explicitly disallowed.
+
+    Example
+    -------
+    >>> argument_list = []
+    >>> argument_list.append(dict(
+    >>>        opts=("-f", "--foobar"),
+    >>>        action=Radio,
+    >>>        choices=["foo", "bar"))
+    """
+    def __init__(self, *args, **kwargs):
+        opt = kwargs["option_strings"]
+        if kwargs.get("nargs", None) is not None:
+            raise ValueError("nargs not allowed for Radio buttons: {}".format(opt))
+        if not kwargs.get("choices", []):
+            raise ValueError("Choices must be provided for Radio buttons: {}".format(opt))
+        super().__init__(*args, **kwargs)
+
+    def __call__(self, parser, namespace, values, option_string=None):
+        setattr(namespace, self.dest, values)
+
+
+class MultiOption(argparse.Action):  # pylint: disable=too-few-public-methods
+    """ Adds support for multiple option checkboxes in the GUI.
+
+    This is a standard :class:`argparse.Action` (with stock parameters) which indicates to the GUI
+    that the options passed should be rendered as a group of Radio Buttons rather than a combo box.
+
+    The :attr:`choices` parameter must be provided as this provides the valid option choices.
+
+    Example
+    -------
+    >>> argument_list = []
+    >>> argument_list.append(dict(
+    >>>        opts=("-f", "--foobar"),
+    >>>        action=MultiOption,
+    >>>        choices=["foo", "bar"))
+    """
+    def __init__(self, *args, **kwargs):
+        opt = kwargs["option_strings"]
+        if not kwargs.get("nargs", []):
+            raise ValueError("nargs must be provided for MultiOption: {}".format(opt))
+        if not kwargs.get("choices", []):
+            raise ValueError("Choices must be provided for MultiOption: {}".format(opt))
+        super().__init__(*args, **kwargs)
+
+    def __call__(self, parser, namespace, values, option_string=None):
+        setattr(namespace, self.dest, values)
+
+
+class Slider(argparse.Action):  # pylint: disable=too-few-public-methods
+    """ Adds support for a slider in the GUI.
+
+    The standard :class:`argparse.Action` is extended with the additional parameters listed below.
+    The :attr:`default` value must be supplied and the :attr:`type` must be either :class:`int` or
+    :class:`float`. :attr:`nargs` are explicitly disallowed.
+
+    Parameters
+    ----------
+    min_max: tuple
+        The (`min`, `max`) values that the slider's range should be set to. The values should be a
+        pair of `float` or `int` data types, depending on the data type of the slider. NB: These
+        min/max values are not enforced, they are purely for setting the slider range. Values
+        outside of this range can still be explicitly passed in from the cli.
+    rounding: int
+        If the underlying data type for the option is a `float` then this value is the number of
+        decimal places to round the slider values to. If the underlying data type for the option is
+        an `int` then this is the step interval between each value for the slider.
+
+    Examples
+    --------
+    For integer values:
+
+    >>> argument_list = []
+    >>> argument_list.append(dict(
+    >>>        opts=("-f", "--foobar"),
+    >>>        action=Slider,
+    >>>        min_max=(0, 10)
+    >>>        rounding=1
+    >>>        type=int,
+    >>>        default=5))
+
+    For floating point values:
+
+    >>> argument_list = []
+    >>> argument_list.append(dict(
+    >>>        opts=("-f", "--foobar"),
+    >>>        action=Slider,
+    >>>        min_max=(0.00, 1.00)
+    >>>        rounding=2
+    >>>        type=float,
+    >>>        default=5.00))
+    """
+    def __init__(self, *args, min_max=None, rounding=None, **kwargs):
+        opt = kwargs["option_strings"]
+        if kwargs.get("nargs", None) is not None:
+            raise ValueError("nargs not allowed for Slider: {}".format(opt))
+        if kwargs.get("default", None) is None:
+            raise ValueError("A default value must be supplied for Slider: {}".format(opt))
+        if kwargs.get("type", None) not in (int, float):
+            raise ValueError("Sliders only accept int and float data types: {}".format(opt))
+        if min_max is None:
+            raise ValueError("min_max must be provided for Sliders: {}".format(opt))
+        if rounding is None:
+            raise ValueError("rounding must be provided for Sliders: {}".format(opt))
+
+        super().__init__(*args, **kwargs)
+        self.min_max = min_max
+        self.rounding = rounding
+
+    def _get_kwargs(self):
+        names = ["option_strings",
+                 "dest",
+                 "nargs",
+                 "const",
+                 "default",
+                 "type",
+                 "choices",
+                 "help",
+                 "metavar",
+                 "min_max",  # Tuple containing min and max values of scale
+                 "rounding"]  # Decimal places to round floats to or step interval for ints
+        return [(name, getattr(self, name)) for name in names]
+
+    def __call__(self, parser, namespace, values, option_string=None):
+        setattr(namespace, self.dest, values)
diff --git a/lib/cli/args.py b/lib/cli/args.py
new file mode 100644
index 0000000..a205c64
--- /dev/null
+++ b/lib/cli/args.py
@@ -0,0 +1,1138 @@
+#!/usr/bin/env python3
+""" The Command Line Argument options for faceswap.py """
+import argparse
+import logging
+import re
+import sys
+import textwrap
+
+from lib.utils import get_backend
+from plugins.plugin_loader import PluginLoader
+
+from .actions import (DirFullPaths, DirOrFileFullPaths, FileFullPaths, FilesFullPaths, MultiOption,
+                      Radio, SaveFileFullPaths, Slider)
+from .launcher import ScriptExecutor
+
+logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
+
+
+class FullHelpArgumentParser(argparse.ArgumentParser):
+    """ Extends :class:`argparse.ArgumentParser` to output full help on bad arguments. """
+    def error(self, message):
+        self.print_help(sys.stderr)
+        self.exit(2, "{}: error: {}\n".format(self.prog, message))
+
+
+class SmartFormatter(argparse.HelpFormatter):
+    """ Extends the class :class:`argparse.HelpFormatter` to allow custom formatting in help text.
+
+    Adapted from: https://stackoverflow.com/questions/3853722
+
+    Notes
+    -----
+    Prefix help text with "R|" to override default formatting and use explicitly defined formatting
+    within the help text.
+    Prefixing a new line within the help text with "L|" will turn that line into a list item in
+    both the cli help text and the GUI.
+    """
+    def __init__(self, prog, indent_increment=2, max_help_position=24, width=None):
+        super().__init__(prog, indent_increment, max_help_position, width)
+        self._whitespace_matcher_limited = re.compile(r'[ \r\f\v]+', re.ASCII)
+
+    def _split_lines(self, text, width):
+        """ Split the given text by the given display width.
+
+        If the text is not prefixed with "R|" then the standard
+        :func:`argparse.HelpFormatter._split_lines` function is used, otherwise raw
+        formatting is processed,
+
+        Parameters
+        ----------
+        text: str
+            The help text that is to be formatted for display
+        width: int
+            The display width, in characters, for the help text
+        """
+        if text.startswith("R|"):
+            text = self._whitespace_matcher_limited.sub(' ', text).strip()[2:]
+            output = list()
+            for txt in text.splitlines():
+                indent = ""
+                if txt.startswith("L|"):
+                    indent = "    "
+                    txt = "  - {}".format(txt[2:])
+                output.extend(textwrap.wrap(txt, width, subsequent_indent=indent))
+            return output
+        return argparse.HelpFormatter._split_lines(self, text, width)
+
+
+class FaceSwapArgs():
+    """ Faceswap argument parser functions that are universal to all commands.
+
+    This is the parent class to all subsequent argparsers which holds global arguments that pertain
+    to all commands.
+
+    Process the incoming command line arguments, validates then launches the relevant faceswap
+    script with the given arguments.
+
+    Parameters
+    ----------
+    subparser: :class:`argparse._SubParsersAction`
+        The subparser for the given command
+    command: str
+        The faceswap command that is to be executed
+    description: str, optional
+        The description for the given command. Default: "default"
+    """
+    def __init__(self, subparser, command, description="default"):
+        self.global_arguments = self._get_global_arguments()
+        self.info = self.get_info()
+        self.argument_list = self.get_argument_list()
+        self.optional_arguments = self.get_optional_arguments()
+        self._process_suppressions()
+        if not subparser:
+            return
+        self.parser = self._create_parser(subparser, command, description)
+        self._add_arguments()
+        script = ScriptExecutor(command)
+        self.parser.set_defaults(func=script.execute_script)
+
+    @staticmethod
+    def get_info():
+        """ Returns the information text for the current command.
+
+        This function should be overridden with the actual command help text for each
+        commands' parser.
+
+        Returns
+        -------
+        str
+            The information text for this command.
+        """
+        return None
+
+    @staticmethod
+    def get_argument_list():
+        """ Returns the argument list for the current command.
+
+        The argument list should be a list of dictionaries pertaining to each option for a command.
+        This function should be overridden with the actual argument list for each command's
+        argument list.
+
+        See existing parsers for examples.
+
+        Returns
+        -------
+        list
+            The list of command line options for the given command
+        """
+        argument_list = []
+        return argument_list
+
+    @staticmethod
+    def get_optional_arguments():
+        """ Returns the optional argument list for the current command.
+
+        The optional arguments list is not always required, but is used when there are shared
+        options between multiple commands (e.g. convert and extract). Only override if required.
+
+        Returns
+        -------
+        list
+            The list of optional command line options for the given command
+        """
+        argument_list = []
+        return argument_list
+
+    @staticmethod
+    def _get_global_arguments():
+        """ Returns the global Arguments list that are required for ALL commands in Faceswap.
+
+        This method should NOT be overridden.
+
+        Returns
+        -------
+        list
+            The list of global command line options for all Faceswap commands.
+        """
+        global_args = list()
+        global_args.append(dict(
+            opts=("-C", "--configfile"),
+            action=FileFullPaths,
+            filetypes="ini",
+            type=str,
+            group="Global Options",
+            help="Optionally overide the saved config with the path to a custom config file."))
+        global_args.append(dict(
+            opts=("-L", "--loglevel"),
+            type=str.upper,
+            dest="loglevel",
+            default="INFO",
+            choices=("INFO", "VERBOSE", "DEBUG", "TRACE"),
+            group="Global Options",
+            help="Log level. Stick with INFO or VERBOSE unless you need to file an error report. "
+                 "Be careful with TRACE as it will generate a lot of data"))
+        global_args.append(dict(
+            opts=("-LF", "--logfile"),
+            action=SaveFileFullPaths,
+            filetypes='log',
+            type=str,
+            dest="logfile",
+            default=None,
+            group="Global Options",
+            help="Path to store the logfile. Leave blank to store in the faceswap folder"))
+        # These are hidden arguments to indicate that the GUI/Colab is being used
+        global_args.append(dict(
+            opts=("-gui", "--gui"),
+            action="store_true",
+            dest="redirect_gui",
+            default=False,
+            help=argparse.SUPPRESS))
+        global_args.append(dict(
+            opts=("-colab", "--colab"),
+            action="store_true",
+            dest="colab",
+            default=False,
+            help=argparse.SUPPRESS))
+        return global_args
+
+    @staticmethod
+    def _create_parser(subparser, command, description):
+        """ Create the parser for the selected command.
+
+        Parameters
+        ----------
+        command: str
+            The faceswap command that is to be executed
+        description: str
+            The description for the given command
+
+        Returns
+        -------
+        :class:`~lib.cli.args.FullHelpArgumentParser`
+            The parser for the given command
+        """
+        parser = subparser.add_parser(command,
+                                      help=description,
+                                      description=description,
+                                      epilog="Questions and feedback: https://faceswap.dev/forum",
+                                      formatter_class=SmartFormatter)
+        return parser
+
+    def _add_arguments(self):
+        """ Parse the list of dictionaries containing the command line arguments and convert to
+        argparse parser arguments. """
+        options = self.global_arguments + self.argument_list + self.optional_arguments
+        for option in options:
+            args = option["opts"]
+            kwargs = {key: option[key] for key in option.keys() if key not in ("opts", "group")}
+            self.parser.add_argument(*args, **kwargs)
+
+    def _process_suppressions(self):
+        """ Certain options are only available for certain backends.
+
+        Suppresses command line options that are not available for the running backend.
+        """
+        fs_backend = get_backend()
+        for opt_list in [self.global_arguments, self.argument_list, self.optional_arguments]:
+            for opts in opt_list:
+                if opts.get("backend", None) is None:
+                    continue
+                opt_backend = opts.pop("backend")
+                if isinstance(opt_backend, (list, tuple)):
+                    opt_backend = [backend.lower() for backend in opt_backend]
+                else:
+                    opt_backend = [opt_backend.lower()]
+                if fs_backend not in opt_backend:
+                    opts["help"] = argparse.SUPPRESS
+
+
+class ExtractConvertArgs(FaceSwapArgs):
+    """ Parent class to capture arguments that will be used in both extract and convert processes.
+
+    Extract and Convert share a fair amount of arguments, so arguments that can be used in both of
+    these processes should be placed here.
+
+    No further processing is done in this class (this is handled by the children), this just
+    captures the shared arguments.
+    """
+
+    @staticmethod
+    def get_argument_list():
+        """ Returns the argument list for shared Extract and Convert arguments.
+
+        Returns
+        -------
+        list
+            The list of command line options for the given Extract and Convert
+        """
+        argument_list = list()
+        argument_list.append(dict(
+            opts=("-i", "--input-dir"),
+            action=DirOrFileFullPaths,
+            filetypes="video",
+            dest="input_dir",
+            required=True,
+            group="Data",
+            help="Input directory or video. Either a directory containing the image files you "
+                 "wish to process or path to a video file. NB: This should be the source video/"
+                 "frames NOT the source faces."))
+        argument_list.append(dict(
+            opts=("-o", "--output-dir"),
+            action=DirFullPaths,
+            dest="output_dir",
+            required=True,
+            group="Data",
+            help="Output directory. This is where the converted files will be saved."))
+        argument_list.append(dict(
+            opts=("-al", "--alignments"),
+            action=FileFullPaths,
+            filetypes="alignments",
+            type=str,
+            dest="alignments_path",
+            group="Data",
+            help="Optional path to an alignments file. Leave blank if the alignments file is "
+                 "at the default location."))
+        return argument_list
+
+
+class ExtractArgs(ExtractConvertArgs):
+    """ Creates the command line arguments for extraction.
+
+    This class inherits base options from :class:`ExtractConvertArgs` where arguments that are used
+    for both Extract and Convert should be placed.
+
+    Commands explicit to Extract should be added in :func:`get_optional_arguments`
+    """
+
+    @staticmethod
+    def get_info():
+        """ The information text for the Extract command.
+
+        Returns
+        -------
+        str
+            The information text for the Extract command.
+        """
+        return ("Extract faces from image or video sources.\n"
+                "Extraction plugins can be configured in the 'Settings' Menu")
+
+    @staticmethod
+    def get_optional_arguments():
+        """ Returns the argument list unique to the Extract command.
+
+        Returns
+        -------
+        list
+            The list of optional command line options for the Extract command
+        """
+        if get_backend() == "cpu":
+            default_detector = default_aligner = "cv2-dnn"
+        else:
+            default_detector = "s3fd"
+            default_aligner = "fan"
+
+        argument_list = []
+        argument_list.append(dict(
+            opts=("-D", "--detector"),
+            action=Radio,
+            type=str.lower,
+            default=default_detector,
+            choices=PluginLoader.get_available_extractors("detect"),
+            group="Plugins",
+            help="R|Detector to use. Some of these have configurable settings in "
+                 "'/config/extract.ini' or 'Settings > Configure Extract 'Plugins':"
+                 "\nL|cv2-dnn: A CPU only extractor which is the least reliable and least "
+                 "resource intensive. Use this if not using a GPU and time is important."
+                 "\nL|mtcnn: Good detector. Fast on CPU, faster on GPU. Uses fewer resources "
+                 "than other GPU detectors but can often return more false positives."
+                 "\nL|s3fd: Best detector. Fast on GPU, slow on CPU. Can detect more faces and "
+                 "fewer false positives than other GPU detectors, but is a lot more resource "
+                 "intensive."))
+        argument_list.append(dict(
+            opts=("-A", "--aligner"),
+            action=Radio,
+            type=str.lower,
+            default=default_aligner,
+            choices=PluginLoader.get_available_extractors("align"),
+            group="Plugins",
+            help="R|Aligner to use."
+                 "\nL|cv2-dnn: A CPU only landmark detector. Faster, less resource intensive, "
+                 "but less accurate. Only use this if not using a GPU and time is important."
+                 "\nL|fan: Best aligner. Fast on GPU, slow on CPU."))
+        argument_list.append(dict(
+            opts=("-M", "--masker"),
+            action=MultiOption,
+            type=str.lower,
+            nargs="+",
+            choices=[mask for mask in PluginLoader.get_available_extractors("mask")
+                     if mask not in ("components", "extended")],
+            group="Plugins",
+            help="R|Additional Masker(s) to use. The masks generated here will all take up GPU "
+                 "RAM. You can select none, one or multiple masks, but the extraction may take "
+                 "longer the more you select. NB: The Extended and Components (landmark based) "
+                 "masks are automatically generated on extraction."
+                 "\nL|vgg-clear: Mask designed to provide smart segmentation of mostly frontal "
+                 "faces clear of obstructions. Profile faces and obstructions may result in "
+                 "sub-par performance."
+                 "\nL|vgg-obstructed: Mask designed to provide smart segmentation of mostly "
+                 "frontal faces. The mask model has been specifically trained to recognize "
+                 "some facial obstructions (hands and eyeglasses). Profile faces may result in "
+                 "sub-par performance."
+                 "\nL|unet-dfl: Mask designed to provide smart segmentation of mostly frontal "
+                 "faces. The mask model has been trained by community members and will need "
+                 "testing for further description. Profile faces may result in sub-par "
+                 "performance."
+                 "\nThe auto generated masks are as follows:"
+                 "\nL|components: Mask designed to provide facial segmentation based on the "
+                 "positioning of landmark locations. A convex hull is constructed around the "
+                 "exterior of the landmarks to create a mask."
+                 "\nL|extended: Mask designed to provide facial segmentation based on the "
+                 "positioning of landmark locations. A convex hull is constructed around the "
+                 "exterior of the landmarks and the mask is extended upwards onto the "
+                 "forehead."
+                 "\n(eg: `-M unet-dfl vgg-clear`, `--masker vgg-obstructed`)"))
+        argument_list.append(dict(
+            opts=("-nm", "--normalization"),
+            action=Radio,
+            type=str.lower,
+            dest="normalization",
+            default="none",
+            choices=["none", "clahe", "hist", "mean"],
+            group="plugins",
+            help="R|Performing normalization can help the aligner better align faces with "
+                 "difficult lighting conditions at an extraction speed cost. Different methods "
+                 "will yield different results on different sets. NB: This does not impact the "
+                 "output face, just the input to the aligner."
+                 "\nL|none: Don't perform normalization on the face."
+                 "\nL|clahe: Perform Contrast Limited Adaptive Histogram Equalization on the "
+                 "face."
+                 "\nL|hist: Equalize the histograms on the RGB channels."
+                 "\nL|mean: Normalize the face colors to the mean."))
+        argument_list.append(dict(
+            opts=("-r", "--rotate-images"),
+            type=str,
+            dest="rotate_images",
+            default=None,
+            group="plugins",
+            help="If a face isn't found, rotate the images to try to find a face. Can find "
+                 "more faces at the cost of extraction speed. Pass in a single number to use "
+                 "increments of that size up to 360, or pass in a list of numbers to enumerate "
+                 "exactly what angles to check."))
+        argument_list.append(dict(
+            opts=("-min", "--min-size"),
+            action=Slider,
+            min_max=(0, 1080),
+            rounding=20,
+            type=int,
+            dest="min_size",
+            default=0,
+            group="Face Processing",
+            help="Filters out faces detected below this size. Length, in pixels across the "
+                 "diagonal of the bounding box. Set to 0 for off"))
+        argument_list.append(dict(
+            opts=("-n", "--nfilter"),
+            action=FilesFullPaths,
+            filetypes="image",
+            dest="nfilter",
+            default=None,
+            nargs="+",
+            group="Face Processing",
+            help="Optionally filter out people who you do not wish to process by passing in an "
+                 "image of that person. Should be a front portrait with a single person in the "
+                 "image. Multiple images can be added space separated. NB: Using face filter "
+                 "will significantly decrease extraction speed and its accuracy cannot be "
+                 "guaranteed."))
+        argument_list.append(dict(
+            opts=("-f", "--filter"),
+            action=FilesFullPaths,
+            filetypes="image",
+            dest="filter",
+            default=None,
+            nargs="+",
+            group="Face Processing",
+            help="Optionally select people you wish to process by passing in an image of that "
+                 "person. Should be a front portrait with a single person in the image. "
+                 "Multiple images can be added space separated. NB: Using face filter will "
+                 "significantly decrease extraction speed and its accuracy cannot be "
+                 "guaranteed."))
+        argument_list.append(dict(
+            opts=("-l", "--ref_threshold"),
+            action=Slider,
+            min_max=(0.01, 0.99),
+            rounding=2,
+            type=float,
+            dest="ref_threshold",
+            default=0.4,
+            group="Face Processing",
+            help="For use with the optional nfilter/filter files. Threshold for positive face "
+                 "recognition. Lower values are stricter. NB: Using face filter will "
+                 "significantly decrease extraction speed and its accuracy cannot be "
+                 "guaranteed."))
+        argument_list.append(dict(
+            opts=("-een", "--extract-every-n"),
+            action=Slider,
+            min_max=(1, 100),
+            rounding=1,
+            type=int,
+            dest="extract_every_n",
+            default=1,
+            group="output",
+            help="Extract every 'nth' frame. This option will skip frames when extracting "
+                 "faces. For example a value of 1 will extract faces from every frame, a value "
+                 "of 10 will extract faces from every 10th frame."))
+        argument_list.append(dict(
+            opts=("-sz", "--size"),
+            action=Slider,
+            min_max=(128, 512),
+            rounding=64,
+            type=int,
+            default=256,
+            group="output",
+            help="The output size of extracted faces. Make sure that the model you intend to "
+                 "train supports your required size. This will only need to be changed for "
+                 "hi-res models."))
+        argument_list.append(dict(
+            opts=("-si", "--save-interval"),
+            action=Slider,
+            min_max=(0, 1000),
+            rounding=10,
+            type=int,
+            dest="save_interval",
+            default=0,
+            group="output",
+            help="Automatically save the alignments file after a set amount of frames. By "
+                 "default the alignments file is only saved at the end of the extraction "
+                 "process. NB: If extracting in 2 passes then the alignments file will only "
+                 "start to be saved out during the second pass. WARNING: Don't interrupt the "
+                 "script when writing the file because it might get corrupted. Set to 0 to "
+                 "turn off"))
+        argument_list.append(dict(
+            opts=("-dl", "--debug-landmarks"),
+            action="store_true",
+            dest="debug_landmarks",
+            default=False,
+            group="output",
+            help="Draw landmarks on the ouput faces for debugging purposes."))
+        argument_list.append(dict(
+            opts=("-sp", "--singleprocess"),
+            action="store_true",
+            default=False,
+            backend="nvidia",
+            group="settings",
+            help="Don't run extraction in parallel. Will run each part of the extraction "
+                 "process separately (one after the other) rather than all at the smae time. "
+                 "Useful if VRAM is at a premium."))
+        argument_list.append(dict(
+            opts=("-s", "--skip-existing"),
+            action="store_true",
+            dest="skip_existing",
+            default=False,
+            group="settings",
+            help="Skips frames that have already been extracted and exist in the alignments "
+                 "file"))
+        argument_list.append(dict(
+            opts=("-sf", "--skip-existing-faces"),
+            action="store_true",
+            dest="skip_faces",
+            default=False,
+            group="settings",
+            help="Skip frames that already have detected faces in the alignments file"))
+        return argument_list
+
+
+class ConvertArgs(ExtractConvertArgs):
+    """ Creates the command line arguments for conversion.
+
+    This class inherits base options from :class:`ExtractConvertArgs` where arguments that are used
+    for both Extract and Convert should be placed.
+
+    Commands explicit to Convert should be added in :func:`get_optional_arguments`
+    """
+
+    @staticmethod
+    def get_info():
+        """ The information text for the Convert command.
+
+        Returns
+        -------
+        str
+            The information text for the Convert command.
+        """
+        return ("Swap the original faces in a source video/images to your final faces.\n"
+                "Conversion plugins can be configured in the 'Settings' Menu")
+
+    @staticmethod
+    def get_optional_arguments():
+        """ Returns the argument list unique to the Convert command.
+
+        Returns
+        -------
+        list
+            The list of optional command line options for the Convert command
+        """
+
+        argument_list = []
+        argument_list.append(dict(
+            opts=("-ref", "--reference-video"),
+            action=FileFullPaths,
+            filetypes="video",
+            type=str,
+            dest="reference_video",
+            group="data",
+            help="Only required if converting from images to video. Provide The original video "
+                 "that the source frames were extracted from (for extracting the fps and "
+                 "audio)."))
+        argument_list.append(dict(
+            opts=("-m", "--model-dir"),
+            action=DirFullPaths,
+            dest="model_dir",
+            required=True,
+            group="data",
+            help="Model directory. The directory containing the trained model you wish to use "
+                 "for conversion."))
+        argument_list.append(dict(
+            opts=("-c", "--color-adjustment"),
+            action=Radio,
+            type=str.lower,
+            dest="color_adjustment",
+            default="avg-color",
+            choices=PluginLoader.get_available_convert_plugins("color", True),
+            group="plugins",
+            help="R|Performs color adjustment to the swapped face. Some of these options have "
+                 "configurable settings in '/config/convert.ini' or 'Settings > Configure "
+                 "Convert Plugins':"
+                 "\nL|avg-color: Adjust the mean of each color channel in the swapped "
+                 "reconstruction to equal the mean of the masked area in the original image."
+                 "\nL|color-transfer: Transfers the color distribution from the source to the "
+                 "target image using the mean and standard deviations of the L*a*b* "
+                 "color space."
+                 "\nL|manual-balance: Manually adjust the balance of the image in a variety of "
+                 "color spaces. Best used with the Preview tool to set correct values."
+                 "\nL|match-hist: Adjust the histogram of each color channel in the swapped "
+                 "reconstruction to equal the histogram of the masked area in the original "
+                 "image."
+                 "\nL|seamless-clone: Use cv2's seamless clone function to remove extreme "
+                 "gradients at the mask seam by smoothing colors. Generally does not give "
+                 "very satisfactory results."
+                 "\nL|none: Don't perform color adjustment."))
+        argument_list.append(dict(
+            opts=("-M", "--mask-type"),
+            action=Radio,
+            type=str.lower,
+            dest="mask_type",
+            default="extended",
+            choices=PluginLoader.get_available_extractors("mask", add_none=True) + ["predicted"],
+            group="Plugins",
+            help="R|Masker to use. NB: The mask you require must exist within the alignments "
+                 "file. You can add additional masks with the Mask Tool."
+                 "\nL|none: Don't use a mask."
+                 "\nL|components: Mask designed to provide facial segmentation based on the "
+                 "positioning of landmark locations. A convex hull is constructed around the "
+                 "exterior of the landmarks to create a mask."
+                 "\nL|extended: Mask designed to provide facial segmentation based on the "
+                 "positioning of landmark locations. A convex hull is constructed around the "
+                 "exterior of the landmarks and the mask is extended upwards onto the forehead."
+                 "\nL|vgg-clear: Mask designed to provide smart segmentation of mostly frontal "
+                 "faces clear of obstructions. Profile faces and obstructions may result in "
+                 "sub-par performance."
+                 "\nL|vgg-obstructed: Mask designed to provide smart segmentation of mostly "
+                 "frontal faces. The mask model has been specifically trained to recognize "
+                 "some facial obstructions (hands and eyeglasses). Profile faces may result in "
+                 "sub-par performance."
+                 "\nL|unet-dfl: Mask designed to provide smart segmentation of mostly frontal "
+                 "faces. The mask model has been trained by community members and will need "
+                 "testing for further description. Profile faces may result in sub-par "
+                 "performance."))
+        argument_list.append(dict(
+            opts=("-sc", "--scaling"),
+            action=Radio,
+            type=str.lower,
+            default="none",
+            choices=PluginLoader.get_available_convert_plugins("scaling", True),
+            group="plugins",
+            help="R|Performs a scaling process to attempt to get better definition on the "
+                 "final swap. Some of these options have configurable settings in "
+                 "'/config/convert.ini' or 'Settings > Configure Convert Plugins':"
+                 "\nL|sharpen: Perform sharpening on the final face."
+                 "\nL|none: Don't perform any scaling operations."))
+        argument_list.append(dict(
+            opts=("-w", "--writer"),
+            action=Radio,
+            type=str,
+            default="opencv",
+            choices=PluginLoader.get_available_convert_plugins("writer", False),
+            group="plugins",
+            help="R|The plugin to use to output the converted images. The writers are "
+                 "configurable in '/config/convert.ini' or 'Settings > Configure Convert "
+                 "Plugins:'"
+                 "\nL|ffmpeg: [video] Writes out the convert straight to video. When the input "
+                 "is a series of images then the '-ref' (--reference-video) parameter must be "
+                 "set."
+                 "\nL|gif: [animated image] Create an animated gif."
+                 "\nL|opencv: [images] The fastest image writer, but less options and formats "
+                 "than other plugins."
+                 "\nL|pillow: [images] Slower than opencv, but has more options and supports "
+                 "more formats."))
+        argument_list.append(dict(
+            opts=("-osc", "--output-scale"),
+            action=Slider,
+            min_max=(25, 400),
+            rounding=1,
+            type=int,
+            dest="output_scale",
+            default=100,
+            group="Frame Processing",
+            help="Scale the final output frames by this amount. 100%% will output the frames "
+                 "at source dimensions. 50%% at half size 200%% at double size"))
+        argument_list.append(dict(
+            opts=("-fr", "--frame-ranges"),
+            type=str,
+            nargs="+",
+            group="Frame Processing",
+            help="Frame ranges to apply transfer to e.g. For frames 10 to 50 and 90 to 100 use "
+                 "--frame-ranges 10-50 90-100. Frames falling outside of the selected range "
+                 "will be discarded unless '-k' (--keep-unchanged) is selected. NB: If you are "
+                 "converting from images, then the filenames must end with the frame-number!"))
+        argument_list.append(dict(
+            opts=("-a", "--input-aligned-dir"),
+            action=DirFullPaths,
+            dest="input_aligned_dir",
+            default=None,
+            group="Face Processing",
+            help="If you have not cleansed your alignments file, then you can filter out faces "
+                 "by defining a folder here that contains the faces extracted from your input "
+                 "files/video. If this folder is defined, then only faces that exist within "
+                 "your alignments file and also exist within the specified folder will be "
+                 "converted. Leaving this blank will convert all faces that exist within the "
+                 "alignments file."))
+        argument_list.append(dict(
+            opts=("-n", "--nfilter"),
+            action=FilesFullPaths,
+            filetypes="image",
+            dest="nfilter",
+            default=None,
+            nargs="+",
+            group="Face Processing",
+            help="Optionally filter out people who you do not wish to process by passing in an "
+                 "image of that person. Should be a front portrait with a single person in the "
+                 "image. Multiple images can be added space separated. NB: Using face filter "
+                 "will significantly decrease extraction speed and its accuracy cannot be "
+                 "guaranteed."))
+        argument_list.append(dict(
+            opts=("-f", "--filter"),
+            action=FilesFullPaths,
+            filetypes="image",
+            dest="filter",
+            default=None,
+            nargs="+",
+            group="Face Processing",
+            help="Optionally select people you wish to process by passing in an image of that "
+                 "person. Should be a front portrait with a single person in the image. "
+                 "Multiple images can be added space separated. NB: Using face filter will "
+                 "significantly decrease extraction speed and its accuracy cannot be "
+                 "guaranteed."))
+        argument_list.append(dict(
+            opts=("-l", "--ref_threshold"),
+            action=Slider,
+            min_max=(0.01, 0.99),
+            rounding=2,
+            type=float,
+            dest="ref_threshold",
+            default=0.4,
+            group="Face Processing",
+            help="For use with the optional nfilter/filter files. Threshold for positive face "
+                 "recognition. Lower values are stricter. NB: Using face filter will "
+                 "significantly decrease extraction speed and its accuracy cannot be "
+                 "guaranteed."))
+        argument_list.append(dict(
+            opts=("-j", "--jobs"),
+            action=Slider,
+            min_max=(0, 40),
+            rounding=1,
+            type=int,
+            dest="jobs",
+            default=0,
+            group="settings",
+            help="The maximum number of parallel processes for performing conversion. "
+                 "Converting images is system RAM heavy so it is possible to run out of memory "
+                 "if you have a lot of processes and not enough RAM to accommodate them all. "
+                 "Setting this to 0 will use the maximum available. No matter what you set "
+                 "this to, it will never attempt to use more processes than are available on "
+                 "your system. If singleprocess is enabled this setting will be ignored."))
+        argument_list.append(dict(
+            opts=("-g", "--gpus"),
+            action=Slider,
+            min_max=(1, 10),
+            rounding=1,
+            type=int,
+            default=1,
+            backend="nvidia",
+            group="settings",
+            help="Number of GPUs to use for conversion"))
+        argument_list.append(dict(
+            opts=("-t", "--trainer"),
+            type=str.lower,
+            choices=PluginLoader.get_available_models(),
+            group="settings",
+            help="[LEGACY] This only needs to be selected if a legacy model is being loaded or "
+                 "if there are multiple models in the model folder"))
+        argument_list.append(dict(
+            opts=("-ag", "--allow-growth"),
+            action="store_true",
+            dest="allow_growth",
+            default=False,
+            backend="nvidia",
+            group="settings",
+            help="Sets allow_growth option of Tensorflow to spare memory on some "
+                 "configurations."))
+        argument_list.append(dict(
+            opts=("-otf", "--on-the-fly"),
+            action="store_true",
+            dest="on_the_fly",
+            default=False,
+            group="settings",
+            help="Enable On-The-Fly Conversion. NOT recommended. You should generate a clean "
+                 "alignments file for your destination video. However, if you wish you can "
+                 "generate the alignments on-the-fly by enabling this option. This will use "
+                 "an inferior extraction pipeline and will lead to substandard results. If an "
+                 "alignments file is found, this option will be ignored."))
+        argument_list.append(dict(
+            opts=("-k", "--keep-unchanged"),
+            action="store_true",
+            dest="keep_unchanged",
+            default=False,
+            group="Frame Processing",
+            help="When used with --frame-ranges outputs the unchanged frames that are not "
+                 "processed instead of discarding them."))
+        argument_list.append(dict(
+            opts=("-s", "--swap-model"),
+            action="store_true",
+            dest="swap_model",
+            default=False,
+            group="settings",
+            help="Swap the model. Instead converting from of A -> B, converts B -> A"))
+        argument_list.append(dict(
+            opts=("-sp", "--singleprocess"),
+            action="store_true",
+            default=False,
+            group="settings",
+            help="Disable multiprocessing. Slower but less resource intensive."))
+        return argument_list
+
+
+class TrainArgs(FaceSwapArgs):
+    """ Creates the command line arguments for training. """
+
+    @staticmethod
+    def get_info():
+        """ The information text for the Train command.
+
+        Returns
+        -------
+        str
+            The information text for the Train command.
+        """
+        return ("Train a model on extracted original (A) and swap (B) faces.\n"
+                "Training models can take a long time. Anything from 24hrs to over a week\n"
+                "Model plugins can be configured in the 'Settings' Menu")
+
+    @staticmethod
+    def get_argument_list():
+        """ Returns the argument list for Train arguments.
+
+        Returns
+        -------
+        list
+            The list of command line options for training
+        """
+        argument_list = list()
+        argument_list.append(dict(
+            opts=("-A", "--input-A"),
+            action=DirFullPaths,
+            dest="input_a",
+            required=True,
+            group="faces",
+            help="Input directory. A directory containing training images for face A. This is "
+                 "the original face, i.e. the face that you want to remove and replace with "
+                 "face B."))
+        argument_list.append(dict(
+            opts=("-ala", "--alignments-A"),
+            action=FileFullPaths,
+            filetypes='alignments',
+            type=str,
+            dest="alignments_path_a",
+            default=None,
+            group="faces",
+            help="Path to alignments file for training set A. Only required if you are using a "
+                 "masked model or warp-to-landmarks is enabled. Defaults to "
+                 "<input-A>/alignments.json if not provided."))
+        argument_list.append(dict(
+            opts=("-B", "--input-B"),
+            action=DirFullPaths,
+            dest="input_b",
+            required=True,
+            group="faces",
+            help="Input directory. A directory containing training images for face B. This is "
+                 "the swap face, i.e. the face that you want to place onto the head of person "
+                 "A."))
+        argument_list.append(dict(
+            opts=("-alb", "--alignments-B"),
+            action=FileFullPaths,
+            filetypes='alignments',
+            type=str,
+            dest="alignments_path_b",
+            default=None,
+            group="faces",
+            help="Path to alignments file for training set B. Only required if you are using a "
+                 "masked model or warp-to-landmarks is enabled. Defaults to "
+                 "<input-B>/alignments.json if not provided."))
+        argument_list.append(dict(
+            opts=("-m", "--model-dir"),
+            action=DirFullPaths,
+            dest="model_dir",
+            required=True,
+            group="model",
+            help="Model directory. This is where the training data will be stored. You should "
+                 "always specify a new folder for new models. If starting a new model, select "
+                 "either an empty folder, or a folder which does not exist (which will be "
+                 "created). If continuing to train an existing model, specify the location of "
+                 "the existing model."))
+        argument_list.append(dict(
+            opts=("-t", "--trainer"),
+            action=Radio,
+            type=str.lower,
+            default=PluginLoader.get_default_model(),
+            choices=PluginLoader.get_available_models(),
+            group="model",
+            help="R|Select which trainer to use. Trainers can be configured from the Settings "
+                 "menu or the config folder."
+                 "\nL|original: The original model created by /u/deepfakes."
+                 "\nL|dfaker: 64px in/128px out model from dfaker. Enable 'warp-to-landmarks' "
+                 "for full dfaker method."
+                 "\nL|dfl-h128. 128px in/out model from deepfacelab"
+                 "\nL|dfl-sae. Adaptable model from deepfacelab"
+                 "\nL|dlight. A lightweight, high resolution DFaker variant."
+                 "\nL|iae: A model that uses intermediate layers to try to get better details"
+                 "\nL|lightweight: A lightweight model for low-end cards. Don't expect great "
+                 "results. Can train as low as 1.6GB with batch size 8."
+                 "\nL|realface: A high detail, dual density model based on DFaker, with "
+                 "customizable in/out resolution. The autoencoders are unbalanced so B>A swaps "
+                 "won't work so well. By andenixa et al. Very configurable."
+                 "\nL|unbalanced: 128px in/out model from andenixa. The autoencoders are "
+                 "unbalanced so B>A swaps won't work so well. Very configurable."
+                 "\nL|villain: 128px in/out model from villainguy. Very resource hungry (11GB "
+                 "for batchsize 16). Good for details, but more susceptible to color "
+                 "differences."))
+        argument_list.append(dict(
+            opts=("-bs", "--batch-size"),
+            action=Slider,
+            min_max=(2, 256),
+            rounding=2,
+            type=int,
+            dest="batch_size",
+            default=64,
+            group="training",
+            help="Batch size. This is the number of images processed through the model for "
+                 "each iteration. Larger batches require more GPU RAM."))
+        argument_list.append(dict(
+            opts=("-it", "--iterations"),
+            action=Slider,
+            min_max=(0, 5000000),
+            rounding=20000,
+            type=int,
+            default=1000000,
+            group="training",
+            help="Length of training in iterations. This is only really used for automation. "
+                 "There is no 'correct' number of iterations a model should be trained for. "
+                 "You should stop training when you are happy with the previews. However, if "
+                 "you want the model to stop automatically at a set number of iterations, you "
+                 "can set that value here."))
+        argument_list.append(dict(
+            opts=("-g", "--gpus"),
+            action=Slider,
+            min_max=(1, 10),
+            rounding=1,
+            type=int,
+            default=1,
+            backend="nvidia",
+            group="training",
+            help="Number of GPUs to use for training"))
+        argument_list.append(dict(
+            opts=("-msg", "--memory-saving-gradients"),
+            action="store_true",
+            dest="memory_saving_gradients",
+            default=False,
+            backend="nvidia",
+            group="VRAM Savings",
+            help="Trades off VRAM usage against computation time. Can fit larger models into "
+                 "memory at a cost of slower training speed. 50%%-150%% batch size increase "
+                 "for 20%%-50%% longer training time. NB: Launch time will be significantly "
+                 "delayed. Switching sides using ping-pong training will take longer."))
+        argument_list.append(dict(
+            opts=("-o", "--optimizer-savings"),
+            action="store_true",
+            dest="optimizer_savings",
+            default=False,
+            backend="nvidia",
+            group="VRAM Savings",
+            help="To save VRAM some optimizer gradient calculations can be performed on the "
+                 "CPU rather than the GPU. This allows you to increase batchsize at a training "
+                 "speed/system RAM cost."))
+        argument_list.append(dict(
+            opts=("-pp", "--ping-pong"),
+            action="store_true",
+            dest="pingpong",
+            default=False,
+            backend="nvidia",
+            group="VRAM Savings",
+            help="Enable ping pong training. Trains one side at a time, switching sides at "
+                 "each save iteration. Training will take 2 to 4 times longer, with about a "
+                 "30%%-50%% reduction in VRAM useage. NB: Preview won't show until both sides "
+                 "have been trained once."))
+        argument_list.append(dict(
+            opts=("-s", "--save-interval"),
+            action=Slider,
+            min_max=(10, 1000),
+            rounding=10,
+            type=int,
+            dest="save_interval",
+            default=100,
+            group="Saving",
+            help="Sets the number of iterations between each model save."))
+        argument_list.append(dict(
+            opts=("-ss", "--snapshot-interval"),
+            action=Slider,
+            min_max=(0, 100000),
+            rounding=5000,
+            type=int,
+            dest="snapshot_interval",
+            default=25000,
+            group="Saving",
+            help="Sets the number of iterations before saving a backup snapshot of the model "
+                 "in it's current state. Set to 0 for off."))
+        argument_list.append(dict(
+            opts=("-tia", "--timelapse-input-A"),
+            action=DirFullPaths,
+            dest="timelapse_input_a",
+            default=None,
+            group="timelapse",
+            help="Optional for creating a timelapse. Timelapse will save an image of your "
+                 "selected faces into the timelapse-output folder at every save iteration. "
+                 "This should be the input folder of 'A' faces that you would like to use for "
+                 "creating the timelapse. You must also supply a --timelapse-output and a "
+                 "--timelapse-input-B parameter."))
+        argument_list.append(dict(
+            opts=("-tib", "--timelapse-input-B"),
+            action=DirFullPaths,
+            dest="timelapse_input_b",
+            default=None,
+            group="timelapse",
+            help="Optional for creating a timelapse. Timelapse will save an image of your "
+                 "selected faces into the timelapse-output folder at every save iteration. "
+                 "This should be the input folder of 'B' faces that you would like to use for "
+                 "creating the timelapse. You must also supply a --timelapse-output and a "
+                 "--timelapse-input-A parameter."))
+        argument_list.append(dict(
+            opts=("-to", "--timelapse-output"),
+            action=DirFullPaths,
+            dest="timelapse_output",
+            default=None,
+            group="timelapse",
+            help="Optional for creating a timelapse. Timelapse will save an image of your "
+                 "selected faces into the timelapse-output folder at every save iteration. If "
+                 "the input folders are supplied but no output folder, it will default to your "
+                 "model folder /timelapse/"))
+        argument_list.append(dict(
+            opts=("-ps", "--preview-scale"),
+            action=Slider,
+            min_max=(25, 200),
+            rounding=25,
+            type=int,
+            dest="preview_scale",
+            default=50,
+            group="preview",
+            help="Percentage amount to scale the preview by."))
+        argument_list.append(dict(
+            opts=("-p", "--preview"),
+            action="store_true",
+            dest="preview",
+            default=False,
+            group="preview",
+            help="Show training preview output. in a separate window."))
+        argument_list.append(dict(
+            opts=("-w", "--write-image"),
+            action="store_true",
+            dest="write_image",
+            default=False,
+            group="preview",
+            help="Writes the training result to a file. The image will be stored in the root "
+                 "of your FaceSwap folder."))
+        argument_list.append(dict(
+            opts=("-ag", "--allow-growth"),
+            action="store_true",
+            dest="allow_growth",
+            default=False,
+            backend="nvidia",
+            group="model",
+            help="Sets allow_growth option of Tensorflow to spare memory on some "
+                 "configurations."))
+        argument_list.append(dict(
+            opts=("-nl", "--no-logs"),
+            action="store_true",
+            dest="no_logs",
+            default=False,
+            group="training",
+            help="Disables TensorBoard logging. NB: Disabling logs means that you will not be "
+                 "able to use the graph or analysis for this session in the GUI."))
+        argument_list.append(dict(
+            opts=("-wl", "--warp-to-landmarks"),
+            action="store_true",
+            dest="warp_to_landmarks",
+            default=False,
+            group="training",
+            help="Warps training faces to closely matched Landmarks from the opposite face-set "
+                 "rather than randomly warping the face. This is the 'dfaker' way of doing "
+                 "warping. Alignments files for both sets of faces must be provided if using "
+                 "this option."))
+        argument_list.append(dict(
+            opts=("-nf", "--no-flip"),
+            action="store_true",
+            dest="no_flip",
+            default=False,
+            group="training",
+            help="To effectively learn, a random set of images are flipped horizontally. "
+                 "Sometimes it is desirable for this not to occur. Generally this should be "
+                 "left off except for during 'fit training'."))
+        argument_list.append(dict(
+            opts=("-nac", "--no-augment-color"),
+            action="store_true",
+            dest="no_augment_color",
+            default=False,
+            group="training",
+            help="Color augmentation helps make the model less susceptible to color "
+                 "differences between the A and B sets, at an increased training time cost. "
+                 "Enable this option to disable color augmentation."))
+        return argument_list
+
+
+class GuiArgs(FaceSwapArgs):
+    """ Creates the command line arguments for the GUI. """
+
+    @staticmethod
+    def get_argument_list():
+        """ Returns the argument list for GUI arguments.
+
+        Returns
+        -------
+        list
+            The list of command line options for the GUI
+        """
+        argument_list = []
+        argument_list.append(dict(
+            opts=("-d", "--debug"),
+            action="store_true",
+            dest="debug",
+            default=False,
+            help="Output to Shell console instead of GUI console"))
+        return argument_list
diff --git a/lib/cli/launcher.py b/lib/cli/launcher.py
new file mode 100644
index 0000000..aaa9b97
--- /dev/null
+++ b/lib/cli/launcher.py
@@ -0,0 +1,193 @@
+#!/usr/bin/env python3
+""" Launches the correct script with the given Command Line Arguments """
+import logging
+import os
+import platform
+import sys
+
+from importlib import import_module
+from lib.logger import crash_log, log_setup
+from lib.utils import FaceswapError, get_backend, safe_shutdown, set_system_verbosity
+
+logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
+
+
+class ScriptExecutor():  # pylint:disable=too-few-public-methods
+    """ Loads the relevant script modules and executes the script.
+
+        This class is initialized in each of the argparsers for the relevant
+        command, then execute script is called within their set_default
+        function.
+
+        Parameters
+        ----------
+        command: str
+            The faceswap command that is being executed
+        """
+    def __init__(self, command):
+        self._command = command.lower()
+
+    def _import_script(self):
+        """ Imports the relevant script as indicated by :attr:`_command` from the scripts folder.
+
+        Returns
+        -------
+        class: Faceswap Script
+            The uninitialized script from the faceswap scripts folder.
+        """
+        self._test_for_tf_version()
+        self._test_for_gui()
+        cmd = os.path.basename(sys.argv[0])
+        src = "tools.{}".format(self._command.lower()) if cmd == "tools.py" else "scripts"
+        mod = ".".join((src, self._command.lower()))
+        module = import_module(mod)
+        script = getattr(module, self._command.title())
+        return script
+
+    @staticmethod
+    def _test_for_tf_version():
+        """ Check that the required Tensorflow version is installed.
+
+        Raises
+        ------
+        FaceswapError
+            If Tensorflow is not found, or is not between versions 1.12 and 1.15
+        """
+        min_ver = 1.12
+        max_ver = 1.15
+        try:
+            # Ensure tensorflow doesn't pin all threads to one core when using Math Kernel Library
+            os.environ["KMP_AFFINITY"] = "disabled"
+            import tensorflow as tf  # pylint:disable=import-outside-toplevel
+        except ImportError as err:
+            raise FaceswapError("There was an error importing Tensorflow. This is most likely "
+                                "because you do not have TensorFlow installed, or you are trying "
+                                "to run tensorflow-gpu on a system without an Nvidia graphics "
+                                "card. Original import error: {}".format(str(err)))
+        tf_ver = float(".".join(tf.__version__.split(".")[:2]))  # pylint:disable=no-member
+        if tf_ver < min_ver:
+            raise FaceswapError("The minimum supported Tensorflow is version {} but you have "
+                                "version {} installed. Please upgrade Tensorflow.".format(
+                                    min_ver, tf_ver))
+        if tf_ver > max_ver:
+            raise FaceswapError("The maximumum supported Tensorflow is version {} but you have "
+                                "version {} installed. Please downgrade Tensorflow.".format(
+                                    max_ver, tf_ver))
+        logger.debug("Installed Tensorflow Version: %s", tf_ver)
+
+    def _test_for_gui(self):
+        """ If running the gui, performs check to ensure necessary prerequisites are present. """
+        if self._command != "gui":
+            return
+        self._test_tkinter()
+        self._check_display()
+
+    @staticmethod
+    def _test_tkinter():
+        """ If the user is running the GUI, test whether the tkinter app is available on their
+        machine. If not exit gracefully.
+
+        This avoids having to import every tkinter function within the GUI in a wrapper and
+        potentially spamming traceback errors to console.
+
+        Raises
+        ------
+        FaceswapError
+            If tkinter cannot be imported
+        """
+        try:
+            # pylint: disable=unused-variable
+            import tkinter  # noqa pylint: disable=unused-import,import-outside-toplevel
+        except ImportError:
+            logger.error("It looks like TkInter isn't installed for your OS, so the GUI has been "
+                         "disabled. To enable the GUI please install the TkInter application. You "
+                         "can try:")
+            logger.info("Anaconda: conda install tk")
+            logger.info("Windows/macOS: Install ActiveTcl Community Edition from "
+                        "http://www.activestate.com")
+            logger.info("Ubuntu/Mint/Debian: sudo apt install python3-tk")
+            logger.info("Arch: sudo pacman -S tk")
+            logger.info("CentOS/Redhat: sudo yum install tkinter")
+            logger.info("Fedora: sudo dnf install python3-tkinter")
+            raise FaceswapError("TkInter not found")
+
+    @staticmethod
+    def _check_display():
+        """ Check whether there is a display to output the GUI to.
+
+        If running on Windows then it is assumed that we are not running in headless mode
+
+        Raises
+        ------
+        FaceswapError
+            If a DISPLAY environmental cannot be found
+        """
+        if not os.environ.get("DISPLAY", None) and os.name != "nt":
+            if platform.system() == "Darwin":
+                logger.info("macOS users need to install XQuartz. "
+                            "See https://support.apple.com/en-gb/HT201341")
+            raise FaceswapError("No display detected. GUI mode has been disabled.")
+
+    def execute_script(self, arguments):
+        """ Performs final set up and launches the requested :attr:`_command` with the given
+        command line arguments.
+
+        Monitors for errors and attempts to shut down the process cleanly on exit.
+
+        Parameters
+        ----------
+        arguments: :class:`argparse.Namespace`
+            The command line arguments to be passed to the executing script.
+        """
+        set_system_verbosity(arguments.loglevel)
+        is_gui = hasattr(arguments, "redirect_gui") and arguments.redirect_gui
+        log_setup(arguments.loglevel, arguments.logfile, self._command, is_gui)
+        logger.debug("Executing: %s. PID: %s", self._command, os.getpid())
+        success = False
+        if get_backend() == "amd":
+            plaidml_found = self._setup_amd(arguments.loglevel)
+            if not plaidml_found:
+                safe_shutdown(got_error=True)
+                return
+        try:
+            script = self._import_script()
+            process = script(arguments)
+            process.process()
+            success = True
+        except FaceswapError as err:
+            for line in str(err).splitlines():
+                logger.error(line)
+        except KeyboardInterrupt:  # pylint: disable=try-except-raise
+            raise
+        except SystemExit:
+            pass
+        except Exception:  # pylint: disable=broad-except
+            crash_file = crash_log()
+            logger.exception("Got Exception on main handler:")
+            logger.critical("An unexpected crash has occurred. Crash report written to '%s'. "
+                            "You MUST provide this file if seeking assistance. Please verify you "
+                            "are running the latest version of faceswap before reporting",
+                            crash_file)
+
+        finally:
+            safe_shutdown(got_error=not success)
+
+    @staticmethod
+    def _setup_amd(log_level):
+        """ Test for plaidml and perform setup for AMD.
+
+        Parameters
+        ----------
+        log_level: str
+            The requested log level to run at
+        """
+        logger.debug("Setting up for AMD")
+        try:
+            import plaidml  # noqa pylint:disable=unused-import,import-outside-toplevel
+        except ImportError:
+            logger.error("PlaidML not found. Run `pip install plaidml-keras` for AMD support")
+            return False
+        from lib.plaidml_tools import setup_plaidml  # pylint:disable=import-outside-toplevel
+        setup_plaidml(log_level)
+        logger.debug("setup up for PlaidML")
+        return True
diff --git a/lib/gui/control_helper.py b/lib/gui/control_helper.py
index af2f6b7..e878646 100644
--- a/lib/gui/control_helper.py
+++ b/lib/gui/control_helper.py
@@ -10,8 +10,7 @@ from functools import partial
 
 from _tkinter import Tcl_Obj, TclError
 
-from .custom_widgets import ContextMenu
-from .custom_widgets import Tooltip
+from .custom_widgets import ContextMenu, MultiOption, Tooltip
 from .utils import FileHandler, get_config, get_images
 
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
@@ -95,6 +94,8 @@ class ControlPanelOption():
         Used for combo boxes and radio control option setting
     is_radio: bool, optional
         Specifies to use a Radio control instead of combobox if choices are passed
+    is_multi_option:
+        Specifies to use a Multi Check Button option group for the specified control
     rounding: int or float, optional
         For slider controls. Sets the stepping
     min_max: int or float, optional
@@ -113,13 +114,14 @@ class ControlPanelOption():
 
     def __init__(self, title, dtype,  # pylint:disable=too-many-arguments
                  group=None, default=None, initial_value=None, choices=None, is_radio=False,
-                 rounding=None, min_max=None, sysbrowser=None, helptext=None,
-                 track_modified=False, command=None):
+                 is_multi_option=False, rounding=None, min_max=None, sysbrowser=None,
+                 helptext=None, track_modified=False, command=None):
         logger.debug("Initializing %s: (title: '%s', dtype: %s, group: %s, default: %s, "
-                     "initial_value: %s, choices: %s, is_radio: %s, rounding: %s, min_max: %s, "
-                     "sysbrowser: %s, helptext: '%s', track_modified: %s, command: '%s')",
-                     self.__class__.__name__, title, dtype, group, default, initial_value, choices,
-                     is_radio, rounding, min_max, sysbrowser, helptext, track_modified, command)
+                     "initial_value: %s, choices: %s, is_radio: %s, is_multi_option: %s, "
+                     "rounding: %s, min_max: %s, sysbrowser: %s, helptext: '%s', "
+                     "track_modified: %s, command: '%s')", self.__class__.__name__, title, dtype,
+                     group, default, initial_value, choices, is_radio, is_multi_option, rounding,
+                     min_max, sysbrowser, helptext, track_modified, command)
 
         self.dtype = dtype
         self.sysbrowser = sysbrowser
@@ -130,6 +132,7 @@ class ControlPanelOption():
                              initial_value=initial_value,
                              choices=choices,
                              is_radio=is_radio,
+                             is_multi_option=is_multi_option,
                              rounding=rounding,
                              min_max=min_max,
                              helptext=helptext)
@@ -176,6 +179,12 @@ class ControlPanelOption():
         """ Return is_radio """
         return self._options["is_radio"]
 
+    @property
+    def is_multi_option(self):
+        """ bool: ``True`` if the control should be contained in a multi check button group,
+        otherwise ``False``. """
+        return self._options["is_multi_option"]
+
     @property
     def rounding(self):
         """ Return rounding """
@@ -241,13 +250,15 @@ class ControlPanelOption():
     def get_control(self):
         """ Set the correct control type based on the datatype or for this option """
         if self.choices and self.is_radio:
-            control = ttk.Radiobutton
+            control = "radio"
+        elif self.choices and self.is_multi_option:
+            control = "multi"
         elif self.choices:
             control = ttk.Combobox
         elif self.dtype == bool:
             control = ttk.Checkbutton
         elif self.dtype in (int, float):
-            control = ttk.Scale
+            control = "scale"
         else:
             control = ttk.Entry
         logger.debug("Setting control '%s' to %s", self.title, control)
@@ -590,7 +601,9 @@ class AutoFillContainer():
                                 "pack_info": self.pack_config_cleaner(child),
                                 "name": child.winfo_name(),
                                 "config": self.config_cleaner(child),
-                                "children": self.get_all_children_config(child, [])}
+                                "children": self.get_all_children_config(child, []),
+                                # Some children have custom kwargs, so keep dicts in sync
+                                "custom_kwargs": dict()}
                                for idx, child in enumerate(children)]
         logger.debug("Compiled AutoFillContainer children: %s", self._widget_config)
 
@@ -599,6 +612,15 @@ class AutoFillContainer():
         for child in widget.winfo_children():
             if child.winfo_ismapped():
                 id_ = str(child)
+                if child.__class__.__name__ == "MultiOption":
+                    # MultiOption checkbox groups are a custom object with additional parameter
+                    # requirements.
+                    custom_kwargs = dict(
+                        value=child._value,  # pylint:disable=protected-access
+                        variable=child._master_variable)  # pylint:disable=protected-access
+                else:
+                    custom_kwargs = dict()
+
                 child_list.append({
                     "class": child.__class__,
                     "id": id_,
@@ -607,7 +629,8 @@ class AutoFillContainer():
                     "pack_info": self.pack_config_cleaner(child),
                     "name": child.winfo_name(),
                     "config": self.config_cleaner(child),
-                    "parent": child.winfo_parent()})
+                    "parent": child.winfo_parent(),
+                    "custom_kwargs": custom_kwargs})
             self.get_all_children_config(child, child_list)
         return child_list
 
@@ -668,7 +691,9 @@ class AutoFillContainer():
             else:
                 # Get the next sub-frame if this doesn't have a logged parent
                 parent = self.subframe
-            clone = widget_dict["class"](parent, name=widget_dict["name"])
+            clone = widget_dict["class"](parent,
+                                         name=widget_dict["name"],
+                                         **widget_dict["custom_kwargs"])
             if widget_dict["config"] is not None:
                 clone.configure(**widget_dict["config"])
             if widget_dict["tooltip"] is not None:
@@ -746,7 +771,7 @@ class ControlBuilder():
     def build_control(self):
         """ Build the correct control type for the option passed through """
         logger.debug("Build config option control")
-        if self.option.control not in (ttk.Checkbutton, ttk.Radiobutton):
+        if self.option.control not in (ttk.Checkbutton, "radio", "multi"):
             self.build_control_label()
         self.build_one_control()
         logger.debug("Built option control")
@@ -764,10 +789,10 @@ class ControlBuilder():
     def build_one_control(self):
         """ Build and place the option controls """
         logger.debug("Build control: '%s')", self.option.name)
-        if self.option.control == ttk.Scale:
+        if self.option.control == "scale":
             ctl = self.slider_control()
-        elif self.option.control == ttk.Radiobutton:
-            ctl = self.radio_control()
+        elif self.option.control in ("radio", "multi"):
+            ctl = self._multi_option_control(self.option.control)
         elif self.option.control == ttk.Checkbutton:
             ctl = self.control_to_checkframe()
         else:
@@ -779,35 +804,65 @@ class ControlBuilder():
 
         logger.debug("Built control: '%s'", self.option.name)
 
-    def radio_control(self):
-        """ Create a group of radio buttons """
-        logger.debug("Adding radio group: %s", self.option.name)
-        all_help = [line for line in self.option.helptext.splitlines()]
-        if any(line.startswith(" - ") for line in all_help):
-            intro = all_help[0]
-        helpitems = {re.sub(r'[^A-Za-z0-9\-]+', '',
-                            line.split()[1].lower()): " ".join(line.split()[1:])
-                     for line in all_help
-                     if line.startswith(" - ")}
+    def _multi_option_control(self, option_type):
+        """ Create a group of buttons for single or multi-select
+
+        Parameters
+        ----------
+        option_type: {"radio", "multi"}
+            The type of boxes that this control should hold. "radio" for single item select,
+            "multi" for multi item select.
+
+        """
+        logger.debug("Adding %s group: %s", option_type, self.option.name)
+        help_intro, help_items = self._get_multi_help_items(self.option.helptext)
         ctl = ttk.LabelFrame(self.frame,
                              text=self.option.title,
-                             name="radio_labelframe")
-        radio_holder = AutoFillContainer(ctl, self.option_columns, self.option_columns)
+                             name="{}_labelframe".format(option_type))
+        holder = AutoFillContainer(ctl, self.option_columns, self.option_columns)
         for choice in self.option.choices:
-            radio = ttk.Radiobutton(radio_holder.subframe,
-                                    text=choice.replace("_", " ").title(),
-                                    value=choice,
-                                    variable=self.option.tk_var)
-            if choice.lower() in helpitems:
+            ctl = ttk.Radiobutton if option_type == "radio" else MultiOption
+            ctl = ctl(holder.subframe,
+                      text=choice.replace("_", " ").title(),
+                      value=choice,
+                      variable=self.option.tk_var)
+            if choice.lower() in help_items:
                 self.helpset = True
-                helptext = helpitems[choice.lower()].capitalize()
+                helptext = help_items[choice.lower()].capitalize()
                 helptext = "{}\n\n - {}".format(
                     '. '.join(item.capitalize() for item in helptext.split('. ')),
-                    intro)
-                _get_tooltip(radio, text=helptext, wraplength=600)
-            radio.pack(anchor=tk.W)
-            logger.debug("Added radio option %s", choice)
-        return radio_holder.parent
+                    help_intro)
+                _get_tooltip(ctl, text=helptext, wraplength=600)
+            ctl.pack(anchor=tk.W)
+            logger.debug("Added %s option %s", option_type, choice)
+        return holder.parent
+
+    @staticmethod
+    def _get_multi_help_items(helptext):
+        """ Split the help text up, for formatted help text, into the individual options
+        for multi/radio buttons.
+
+        Parameters
+        ----------
+        helptext: str
+            The raw help text for this cli. option
+
+        Returns
+        -------
+        tuple (`str`, `dict`)
+            The help text intro and a dictionary containing the help text split into separate
+            entries for each option choice
+        """
+        logger.debug("raw help: %s", helptext)
+        all_help = helptext.splitlines()
+        intro = ""
+        if any(line.startswith(" - ") for line in all_help):
+            intro = all_help[0]
+        retval = (intro, {re.sub(r'[^A-Za-z0-9\-]+', '',
+                                 line.split()[1].lower()): " ".join(line.split()[1:])
+                          for line in all_help if line.startswith(" - ")})
+        logger.debug("help items: %s", retval)
+        return retval
 
     def slider_control(self):
         """ A slider control with corresponding Entry box """
@@ -829,7 +884,7 @@ class ControlBuilder():
                       d_type=self.option.dtype,
                       round_to=self.option.rounding,
                       min_max=self.option.min_max)
-        ctl = self.option.control(self.frame, variable=self.option.tk_var, command=cmd)
+        ctl = ttk.Scale(self.frame, variable=self.option.tk_var, command=cmd)
         _add_command(ctl.cget("command"), cmd)
         rc_menu = _get_contextmenu(tbox)
         rc_menu.cm_bind()
@@ -885,7 +940,7 @@ class ControlBuilder():
             rc_menu.cm_bind()
         if self.option.choices:
             logger.debug("Adding combo choices: %s", self.option.choices)
-            ctl["values"] = [choice for choice in self.option.choices]
+            ctl["values"] = self.option.choices
             ctl["state"] = "readonly"
         logger.debug("Added control to Options Frame: %s", self.option.name)
         return ctl
diff --git a/lib/gui/custom_widgets.py b/lib/gui/custom_widgets.py
index a5d6b7f..8228bb2 100644
--- a/lib/gui/custom_widgets.py
+++ b/lib/gui/custom_widgets.py
@@ -679,3 +679,84 @@ class Tooltip:
         if topwidget:
             topwidget.destroy()
         self._topwidget = None
+
+
+class MultiOption(ttk.Checkbutton):  # pylint: disable=too-many-ancestors
+    """ Similar to the standard :class:`ttk.Radio` widget, but with the ability to select
+    multiple pre-defined options. Selected options are generated as `nargs` for the argument
+    parser to consume.
+
+    Parameters
+    ----------
+    parent: :class:`ttk.Frame`
+        The tkinter parent widget for the check button
+    value: str
+        The raw option value for this check button
+    variable: :class:`tkinter.StingVar`
+        The master variable for the group of check buttons that this check button will belong to.
+        The output of this variable will be a string containing a space separated list of the
+        selected check button options
+    """
+    def __init__(self, parent, value, variable, **kwargs):
+        self._tk_var = tk.BooleanVar()
+        self._tk_var.set(False)
+        super().__init__(parent, variable=self._tk_var, **kwargs)
+        self._value = value
+        self._master_variable = variable
+        self._tk_var.trace("w", self._on_update)
+        self._master_variable.trace("w", self._on_master_update)
+
+    @property
+    def _master_list(self):
+        """ list: The contents of the check box group's :attr:`_master_variable` in list form.
+        Selected check boxes will appear in this list. """
+        retval = self._master_variable.get().split()
+        logger.trace(retval)
+        return retval
+
+    @property
+    def _master_needs_update(self):
+        """ bool: ``True`` if :attr:`_master_variable` requires updating otherwise ``False``. """
+        active = self._tk_var.get()
+        retval = ((active and self._value not in self._master_list) or
+                  (not active and self._value in self._master_list))
+        logger.trace(retval)
+        return retval
+
+    def _on_update(self, *args):  # pylint: disable=unused-argument
+        """ Update the master variable on a check button change.
+
+        The value for this checked option is added or removed from the :attr:`_master_variable`
+        on a ``True``, ``False`` change for this check button.
+
+        Parameters
+        ----------
+        args: tuple
+            Required for variable callback, but unused
+        """
+        if not self._master_needs_update:
+            return
+        new_vals = self._master_list + [self._value] if self._tk_var.get() else [
+            val
+            for val in self._master_list
+            if val != self._value]
+        val = " ".join(new_vals)
+        logger.trace("Setting master variable to: %s", val)
+        self._master_variable.set(val)
+
+    def _on_master_update(self, *args):  # pylint: disable=unused-argument
+        """ Update the check button on a master variable change (e.g. load .fsw file in the GUI).
+
+        The value for this option is set to ``True`` or ``False`` depending on it's existence in
+        the :attr:`_master_variable`
+
+        Parameters
+        ----------
+        args: tuple
+            Required for variable callback, but unused
+        """
+        if not self._master_needs_update:
+            return
+        state = self._value in self._master_list
+        logger.trace("Setting '%s' to %s", self._value, state)
+        self._tk_var.set(state)
diff --git a/lib/gui/options.py b/lib/gui/options.py
index 89a982e..a207c43 100644
--- a/lib/gui/options.py
+++ b/lib/gui/options.py
@@ -9,7 +9,7 @@ import re
 import sys
 from collections import OrderedDict
 
-from lib import cli
+from lib.cli import actions, args as cli
 from .utils import get_images
 from .control_helper import ControlPanelOption
 
@@ -121,7 +121,8 @@ class CliOptions():
                 group=opt.get("group", None),
                 default=opt.get("default", None),
                 choices=opt.get("choices", None),
-                is_radio=opt.get("action", "") == cli.Radio,
+                is_radio=opt.get("action", "") == actions.Radio,
+                is_multi_option=opt.get("action", "") == actions.MultiOption,
                 rounding=self.get_rounding(opt),
                 min_max=opt.get("min_max", None),
                 sysbrowser=self.get_sysbrowser(opt, command_options, command),
@@ -167,13 +168,12 @@ class CliOptions():
     def get_sysbrowser(self, option, options, command):
         """ Return the system file browser and file types if required else None """
         action = option.get("action", None)
-        if action not in (cli.FullPaths,
-                          cli.DirFullPaths,
-                          cli.FileFullPaths,
-                          cli.FilesFullPaths,
-                          cli.DirOrFileFullPaths,
-                          cli.SaveFileFullPaths,
-                          cli.ContextFullPaths):
+        if action not in (actions.DirFullPaths,
+                          actions.FileFullPaths,
+                          actions.FilesFullPaths,
+                          actions.DirOrFileFullPaths,
+                          actions.SaveFileFullPaths,
+                          actions.ContextFullPaths):
             return None
 
         retval = dict()
@@ -182,15 +182,15 @@ class CliOptions():
             self.expand_action_option(option, options)
             action_option = option["action_option"]
         retval["filetypes"] = option.get("filetypes", "default")
-        if action == cli.FileFullPaths:
+        if action == actions.FileFullPaths:
             retval["browser"] = ["load"]
-        elif action == cli.FilesFullPaths:
+        elif action == actions.FilesFullPaths:
             retval["browser"] = ["multi_load"]
-        elif action == cli.SaveFileFullPaths:
+        elif action == actions.SaveFileFullPaths:
             retval["browser"] = ["save"]
-        elif action == cli.DirOrFileFullPaths:
+        elif action == actions.DirOrFileFullPaths:
             retval["browser"] = ["folder", "load"]
-        elif action == cli.ContextFullPaths and action_option:
+        elif action == actions.ContextFullPaths and action_option:
             retval["browser"] = ["context"]
             retval["command"] = command
             retval["action_option"] = action_option
diff --git a/plugins/extract/pipeline.py b/plugins/extract/pipeline.py
index f9e2d2b..cadf2b5 100644
--- a/plugins/extract/pipeline.py
+++ b/plugins/extract/pipeline.py
@@ -43,8 +43,9 @@ class Extractor():
         The name of a detector plugin as exists in :mod:`plugins.extract.detect`
     aligner: str
         The name of an aligner plugin as exists in :mod:`plugins.extract.align`
-    masker: str
-        The name of a masker plugin as exists in :mod:`plugins.extract.mask`
+    masker: str or list
+        The name of a masker plugin(s) as exists in :mod:`plugins.extract.mask`.
+        This can be a single masker or a list of multiple maskers
     configfile: str, optional
         The path to a custom ``extract.ini`` configfile. If ``None`` then the system
         :file:`config/extract.ini` file will be used.
@@ -65,7 +66,7 @@ class Extractor():
         images fed to the aligner.Default: ``None``
     image_is_aligned: bool, optional
         Used to set the :attr:`plugins.extract.mask.image_is_aligned` attribute. Indicates to the
-        masker that the fed in image is an aligned face rather than a frame.Default: ``False``
+        masker that the fed in image is an aligned face rather than a frame. Default: ``False``
 
     Attributes
     ----------
diff --git a/scripts/convert.py b/scripts/convert.py
index 23da2a0..bdc28df 100644
--- a/scripts/convert.py
+++ b/scripts/convert.py
@@ -149,7 +149,7 @@ class Convert():  # pylint:disable=too-few-public-methods
     def process(self):
         """ The entry point for triggering the Conversion Process.
 
-        Should only be called from  :class:`lib.cli.ScriptExecutor`
+        Should only be called from  :class:`lib.cli.launcher.ScriptExecutor`
         """
         logger.debug("Starting Conversion")
         # queue_manager.debug_monitor(5)
diff --git a/scripts/extract.py b/scripts/extract.py
index 4f50262..71a284f 100644
--- a/scripts/extract.py
+++ b/scripts/extract.py
@@ -38,7 +38,6 @@ class Extract():  # pylint:disable=too-few-public-methods
     def __init__(self, arguments):
         logger.debug("Initializing %s: (args: %s", self.__class__.__name__, arguments)
         self._args = arguments
-
         self._output_dir = str(get_folder(self._args.output_dir))
 
         logger.info("Output Directory: %s", self._args.output_dir)
@@ -51,9 +50,12 @@ class Extract():  # pylint:disable=too-few-public-methods
         self._post_process = PostProcess(arguments)
         configfile = self._args.configfile if hasattr(self._args, "configfile") else None
         normalization = None if self._args.normalization == "none" else self._args.normalization
+
+        maskers = ["components", "extended"]
+        maskers += self._args.masker if self._args.masker else []
         self._extractor = Extractor(self._args.detector,
                                     self._args.aligner,
-                                    [self._args.masker, "components", "extended"],
+                                    maskers,
                                     configfile=configfile,
                                     multiprocess=not self._args.singleprocess,
                                     rotate_images=self._args.rotate_images,
@@ -106,7 +108,7 @@ class Extract():  # pylint:disable=too-few-public-methods
     def process(self):
         """ The entry point for triggering the Extraction Process.
 
-        Should only be called from  :class:`lib.cli.ScriptExecutor`
+        Should only be called from  :class:`lib.cli.launcher.ScriptExecutor`
         """
         logger.info('Starting, this may take a while...')
         # from lib.queue_manager import queue_manager ; queue_manager.debug_monitor(3)
diff --git a/scripts/train.py b/scripts/train.py
index 7976d43..fecc53d 100644
--- a/scripts/train.py
+++ b/scripts/train.py
@@ -139,7 +139,7 @@ class Train():
     def process(self):
         """ The entry point for triggering the Training Process.
 
-        Should only be called from  :class:`lib.cli.ScriptExecutor`
+        Should only be called from  :class:`lib.cli.launcher.ScriptExecutor`
         """
         logger.debug("Starting Training Process")
         logger.info("Training data directory: %s", self._args.model_dir)
diff --git a/tools.py b/tools.py
index ab690bf..d842885 100755
--- a/tools.py
+++ b/tools.py
@@ -6,7 +6,7 @@ import sys
 from importlib import import_module
 
 # Importing the various tools
-from lib.cli import FullHelpArgumentParser
+from lib.cli.args import FullHelpArgumentParser
 
 # Python version check
 if sys.version_info[0] < 3:
diff --git a/tools/alignments/alignments.py b/tools/alignments/alignments.py
index a6c6b8a..fb103c3 100644
--- a/tools/alignments/alignments.py
+++ b/tools/alignments/alignments.py
@@ -1,5 +1,5 @@
 #!/usr/bin/env python3
-""" Tools for manipulating the alignments seralized file """
+""" Tools for manipulating the alignments serialized file """
 import sys
 import logging
 
diff --git a/tools/alignments/cli.py b/tools/alignments/cli.py
index 9b86ab0..60dd6f9 100644
--- a/tools/alignments/cli.py
+++ b/tools/alignments/cli.py
@@ -1,7 +1,7 @@
 #!/usr/bin/env python3
 """ Command Line Arguments for tools """
-from lib.cli import FaceSwapArgs
-from lib.cli import DirOrFileFullPaths, DirFullPaths, FilesFullPaths, Radio, Slider
+from lib.cli.args import FaceSwapArgs
+from lib.cli.actions import DirOrFileFullPaths, DirFullPaths, FilesFullPaths, Radio, Slider
 
 _HELPTEXT = "This command lets you perform various tasks pertaining to an alignments file."
 
diff --git a/tools/effmpeg/cli.py b/tools/effmpeg/cli.py
index 1ff08fc..7af0aca 100644
--- a/tools/effmpeg/cli.py
+++ b/tools/effmpeg/cli.py
@@ -1,7 +1,7 @@
 #!/usr/bin/env python3
 """ Command Line Arguments for tools """
-from lib.cli import FaceSwapArgs
-from lib.cli import ContextFullPaths, FileFullPaths, Radio
+from lib.cli.args import FaceSwapArgs
+from lib.cli.actions import ContextFullPaths, FileFullPaths, Radio
 from lib.utils import _image_extensions
 
 _HELPTEXT = "This command allows you to easily execute common ffmpeg tasks."
diff --git a/tools/mask/cli.py b/tools/mask/cli.py
index 491cbab..5407c4e 100644
--- a/tools/mask/cli.py
+++ b/tools/mask/cli.py
@@ -1,7 +1,7 @@
 #!/usr/bin/env python3
 """ Command Line Arguments for tools """
-from lib.cli import FaceSwapArgs
-from lib.cli import (DirOrFileFullPaths, DirFullPaths, FileFullPaths, Radio, Slider)
+from lib.cli.args import FaceSwapArgs
+from lib.cli.actions import (DirOrFileFullPaths, DirFullPaths, FileFullPaths, Radio, Slider)
 from plugins.plugin_loader import PluginLoader
 
 _HELPTEXT = "This command lets you generate masks for existing alignments."
diff --git a/tools/preview/cli.py b/tools/preview/cli.py
index 2bd04e2..4e767cc 100644
--- a/tools/preview/cli.py
+++ b/tools/preview/cli.py
@@ -1,7 +1,7 @@
 #!/usr/bin/env python3
 """ Command Line Arguments for tools """
-from lib.cli import FaceSwapArgs
-from lib.cli import DirOrFileFullPaths, DirFullPaths, FileFullPaths
+from lib.cli.args import FaceSwapArgs
+from lib.cli.actions import DirOrFileFullPaths, DirFullPaths, FileFullPaths
 
 _HELPTEXT = "This command allows you to preview swaps to tweak convert settings."
 
diff --git a/tools/preview/preview.py b/tools/preview/preview.py
index ddd8e81..0fbe3b7 100644
--- a/tools/preview/preview.py
+++ b/tools/preview/preview.py
@@ -16,7 +16,7 @@ import numpy as np
 from PIL import Image, ImageTk
 
 from lib.aligner import Extract as AlignerExtract
-from lib.cli import ConvertArgs
+from lib.cli.args import ConvertArgs
 from lib.gui.utils import get_images, get_config, initialize_config, initialize_images
 from lib.gui.custom_widgets import Tooltip
 from lib.gui.control_helper import ControlPanel, ControlPanelOption
diff --git a/tools/restore/cli.py b/tools/restore/cli.py
index 52f1b95..4376eef 100644
--- a/tools/restore/cli.py
+++ b/tools/restore/cli.py
@@ -1,7 +1,7 @@
 #!/usr/bin/env python3
 """ Command Line Arguments for tools """
-from lib.cli import FaceSwapArgs
-from lib.cli import DirFullPaths
+from lib.cli.args import FaceSwapArgs
+from lib.cli.actions import DirFullPaths
 
 _HELPTEXT = "This command lets you restore models from backup."
 
diff --git a/tools/sort/cli.py b/tools/sort/cli.py
index 8d9abe8..c2f27c1 100644
--- a/tools/sort/cli.py
+++ b/tools/sort/cli.py
@@ -1,7 +1,7 @@
 #!/usr/bin/env python3
 """ Command Line Arguments for tools """
-from lib.cli import FaceSwapArgs
-from lib.cli import DirFullPaths, SaveFileFullPaths, Radio, Slider
+from lib.cli.args import FaceSwapArgs
+from lib.cli.actions import DirFullPaths, SaveFileFullPaths, Radio, Slider
 
 _HELPTEXT = "This command lets you sort images using various methods."
 
