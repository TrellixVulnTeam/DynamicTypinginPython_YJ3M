commit 9fbaaa5d38dc30871aa9e73832e66cf6432033d1
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Tue Dec 11 12:51:19 2018 +0000

    setup.py - Get system encoding

diff --git a/setup.py b/setup.py
index e73a279..562e420 100755
--- a/setup.py
+++ b/setup.py
@@ -4,6 +4,7 @@
 # >>> ENV
 import ctypes
 import importlib
+import locale
 import os
 import re
 import sys
@@ -11,6 +12,7 @@ import platform
 
 from subprocess import run, PIPE, Popen
 
+ENCODING = locale.getpreferredencoding()
 # Revisions of tensorflow-gpu and cuda/cudnn requirements
 TENSORFLOW_REQUIREMENTS = {"1.2": ["8.0", "5.1"],
                            "1.4": ["8.0", "6.0"],
@@ -191,7 +193,7 @@ def get_installed_packages():
     global INSTALLED_PACKAGES
     chk = Popen("{} -m pip freeze".format(sys.executable),
                 shell=True, stdout=PIPE)
-    installed = chk.communicate()[0].decode().splitlines()
+    installed = chk.communicate()[0].decode(ENCODING).splitlines()
     for pkg in installed:
         item = pkg.split("==")
         INSTALLED_PACKAGES[item[0]] = item[1]
@@ -217,7 +219,7 @@ def check_gcc():
         out_error("gcc not installed. Please install gcc for your distribution")
         return
     gcc = [re.sub(" +", " ", line.strip())
-           for line in stdout.decode().splitlines()
+           for line in stdout.decode(ENCODING).splitlines()
            if line.lower().strip().startswith("gcc")][0]
     version = gcc[gcc.rfind(" ") + 1:]
     out_info("gcc version: {}".format(version))
@@ -231,7 +233,7 @@ def check_gpp():
         out_error("g++ not installed. Please install g++ for your distribution")
         return
     gpp = [re.sub(" +", " ", line.strip())
-           for line in stdout.decode().splitlines()
+           for line in stdout.decode(ENCODING).splitlines()
            if line.lower().strip().startswith("g++")][0]
     version = gpp[gpp.rfind(" ") + 1:]
     out_info("g++ version: {}".format(version))
@@ -241,7 +243,7 @@ def check_cmake():
     """ Check CMake is installed for Windows """
     chk = Popen("cmake --version", shell=True, stdout=PIPE, stderr=PIPE)
     stdout, stderr = chk.communicate()
-    stdout = stdout.decode()
+    stdout = stdout.decode(ENCODING)
     if stderr and OS_VERSION[0] == "Windows":
         stdout, stderr = check_cmake_windows()
     if stderr:
@@ -264,7 +266,7 @@ def check_cmake_windows():
     if stderr:
         return False, stderr
     lines = [re.sub(" +", " ", line.strip())
-             for line in stdout.decode().splitlines()
+             for line in stdout.decode(ENCODING).splitlines()
              if line.strip()]
     stdout = lines[1]
     location = stdout[:stdout.rfind(" ")] + "bin"
@@ -308,7 +310,7 @@ def check_cplus_plus():
                   "https://www.microsoft.com/en-us/download/details.aspx?id=48145")
         return
     vscpp = [re.sub(" +", " ", line.strip())
-             for line in stdout.decode().splitlines()
+             for line in stdout.decode(ENCODING).splitlines()
              if line.lower().strip().startswith(("displayname", "version"))][0]
     version = vscpp[vscpp.find("REG_SZ") + 7:]
     out_info("Visual Studio C++ version: {}".format(version))
