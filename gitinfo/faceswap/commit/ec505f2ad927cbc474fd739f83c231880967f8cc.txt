commit ec505f2ad927cbc474fd739f83c231880967f8cc
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Sat Aug 17 00:11:58 2019 +0000

    Tensorflow 1.14 Support
    
    
    Fix Keras Tensorboard callback for TF1.14
    Default install on CPU to TF 1.14.0
    Default Conda install to TF 1.14.0
    Move pynvx for macOS to conditional requirements.txt

diff --git a/lib/cli.py b/lib/cli.py
index 0dd256c..cb8b28e 100644
--- a/lib/cli.py
+++ b/lib/cli.py
@@ -46,7 +46,7 @@ class ScriptExecutor():
     def test_for_tf_version():
         """ Check that the minimum required Tensorflow version is installed """
         min_ver = 1.12
-        max_ver = 1.13
+        max_ver = 1.14
         try:
             import tensorflow as tf
         except ImportError as err:
diff --git a/plugins/train/trainer/_base.py b/plugins/train/trainer/_base.py
index aa4b5a7..0e1332e 100644
--- a/plugins/train/trainer/_base.py
+++ b/plugins/train/trainer/_base.py
@@ -148,6 +148,8 @@ class TrainerBase():
         logger.debug("Tensorflow version: %s", tf_version)
         if tf_version[0] > 1 or (tf_version[0] == 1 and tf_version[1] > 12):
             kwargs["update_freq"] = "batch"
+        if tf_version[0] > 1 or (tf_version[0] == 1 and tf_version[1] > 13):
+            kwargs["profile_batch"] = 0
         logger.debug(kwargs)
         return kwargs
 
diff --git a/requirements.txt b/requirements.txt
index b50bce7..8efc45d 100755
--- a/requirements.txt
+++ b/requirements.txt
@@ -18,6 +18,7 @@ git+https://github.com/deepfakes/nvidia-ml-py3.git
 h5py==2.9.0
 Keras==2.2.4
 pywin32 ; sys_platform == "win32"
+pynvx==0.0.4 ; sys_platform == "darwin"
 
 # tensorflow is included within the docker image.
 # If you are looking for dependencies for a manual install,
@@ -26,4 +27,4 @@ pywin32 ; sys_platform == "win32"
 #    If your graphics card support is below Cuda 9.0 you will need to either
 #    compile tensorflow yourself or download a custom version.
 #    Install 1.12.0<=tensorflow-gpu<=1.13.0 for CUDA 9.0
-#    or tensorflow-gpu==1.13.1 for CUDA 10.0
+#    or 1.13.1<=tensorflow-gpu<1.15 for CUDA 10.0
diff --git a/setup.py b/setup.py
index 9383ed8..fe28c7b 100755
--- a/setup.py
+++ b/setup.py
@@ -14,7 +14,7 @@ from subprocess import CalledProcessError, run, PIPE, Popen
 INSTALL_FAILED = False
 # Revisions of tensorflow-gpu and cuda/cudnn requirements
 TENSORFLOW_REQUIREMENTS = {"==1.12.0": ["9.0", "7.2"],
-                           ">=1.13.1,<1.14": ["10.0", "7.4"]}  # TF 1.14+ Not currently supported
+                           ">=1.13.1,<1.15": ["10.0", "7.4"]}  # TF 2.0 Not currently supported
 # Mapping of Python packages to their conda names if different from pypi or in non-default channel
 CONDA_MAPPING = {
     # "opencv-python": ("opencv", "conda-forge"),  # Periodic issues with conda-forge opencv
@@ -29,7 +29,6 @@ class Environment():
         """ logger will override built in Output() function if passed in
             updater indicates that this is being run from update_deps.py
             so certain steps can be skipped/output limited """
-        self.macos_required_packages = ["pynvx==0.0.4"]
         self.conda_required_packages = [("tk", )]
         self.output = logger if logger else Output()
         self.updater = updater
@@ -71,11 +70,6 @@ class Environment():
         """ Get Python Verion """
         return platform.python_version(), platform.architecture()[0]
 
-    @property
-    def is_macos(self):
-        """ Check whether MacOS """
-        return bool(platform.system() == "Darwin")
-
     @property
     def is_conda(self):
         """ Check whether using Conda """
@@ -225,7 +219,7 @@ class Environment():
             return
 
         if not self.enable_cuda:
-            self.required_packages.append("tensorflow==1.13.1")
+            self.required_packages.append("tensorflow==1.14.0")
             return
 
         tf_ver = None
@@ -271,9 +265,9 @@ class Environment():
     def update_tf_dep_conda(self):
         """ Update Conda TF Dependency """
         if not self.enable_cuda:
-            self.required_packages.append("tensorflow==1.13.1")
+            self.required_packages.append("tensorflow==1.14.0")
         else:
-            self.required_packages.append("tensorflow-gpu==1.13.1")
+            self.required_packages.append("tensorflow-gpu==1.14.0")
 
     def update_amd_dep(self):
         """ Update amd dependency for AMD cards """
@@ -571,8 +565,6 @@ class Install():
 
     def check_missing_dep(self):
         """ Check for missing dependencies """
-        if self.env.enable_cuda and self.env.is_macos:
-            self.env.required_packages.extend(self.env.macos_required_packages)
         for pkg in self.env.required_packages:
             pkg = self.check_os_requirements(pkg)
             if pkg is None:
