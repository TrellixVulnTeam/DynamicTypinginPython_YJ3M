commit fc5a88518da1b87943ead7545809b455d1a41ee2
Author: babilio <11932505+babilio@users.noreply.github.com>
Date:   Sat Mar 3 05:01:07 2018 -0600

    Allows applying dilation by passing negative erosion kernel values. If value is negative, â€¦ (#238)
    
    * Allows for negative erosion kernel for -e arg. If value is negative, it turns it into a dilation kernel, which allow facehullandrect to cover more space. Can help to cover double eyebrows. Also could be useful with Masked converter for GAN that oatsss is working on.
    
    * Update convert.py
    
    Modified argument help to clarify the effects of erosion and dilation as parameters

diff --git a/plugins/Convert_Masked.py b/plugins/Convert_Masked.py
index d54a534..d2f6fc2 100644
--- a/plugins/Convert_Masked.py
+++ b/plugins/Convert_Masked.py
@@ -8,11 +8,13 @@ from lib.aligner import get_align_mat
 class Convert():
     def __init__(self, encoder, blur_size=2, seamless_clone=False, mask_type="facehullandrect", erosion_kernel_size=None, **kwargs):
         self.encoder = encoder
-
         self.erosion_kernel = None
+        self.erosion_kernel_size = erosion_kernel_size       
         if erosion_kernel_size is not None:
-            self.erosion_kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE,(erosion_kernel_size,erosion_kernel_size))
-
+            if erosion_kernel_size > 0:
+                self.erosion_kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE,(erosion_kernel_size,erosion_kernel_size))
+            elif erosion_kernel_size < 0:
+                self.erosion_kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE,(abs(erosion_kernel_size),abs(erosion_kernel_size)))
         self.blur_size = blur_size
         self.seamless_clone = seamless_clone
         self.mask_type = mask_type.lower() # Choose in 'FaceHullAndRect','FaceHull','Rect'
@@ -86,7 +88,11 @@ class Convert():
 
 
         if self.erosion_kernel is not None:
-            image_mask = cv2.erode(image_mask,self.erosion_kernel,iterations = 1)
+            if self.erosion_kernel_size > 0:
+                image_mask = cv2.erode(image_mask,self.erosion_kernel,iterations = 1)
+            elif self.erosion_kernel_size < 0:
+                dilation_kernel = abs(self.erosion_kernel)
+                image_mask = cv2.dilate(image_mask,dilation_kernel,iterations = 1)
 
         if self.blur_size!=0:
             image_mask = cv2.blur(image_mask,(self.blur_size,self.blur_size))
diff --git a/scripts/convert.py b/scripts/convert.py
index dbde363..f10ffba 100644
--- a/scripts/convert.py
+++ b/scripts/convert.py
@@ -97,7 +97,8 @@ class ConvertImage(DirectoryProcessor):
                             dest="erosion_kernel_size",
                             type=int,
                             default=None,
-                            help="Erosion kernel size. (Masked converter only)")
+                            help="Erosion kernel size. (Masked converter only). Positive values apply erosion which reduces the edge \ 
+                            of the swapped face. Negative values apply dilation which allows the swapped face to cover more space.")
 
         parser.add_argument('-sm', '--smooth-mask',
                             action="store_true",
