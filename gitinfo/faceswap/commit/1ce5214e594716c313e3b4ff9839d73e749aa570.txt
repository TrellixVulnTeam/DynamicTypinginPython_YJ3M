commit 1ce5214e594716c313e3b4ff9839d73e749aa570
Author: 1132719438 <lijinpeng1132@gmail.com>
Date:   Mon Oct 1 18:38:59 2018 +0800

    Fixed face extract with dlib on OS X (#510)
    
    * fix: gpu stat for OS X
    - Use pynvx to get GPU info on OS X
    - fix face extract with dlib
    
    Issue #488

diff --git a/lib/gpu_stats.py b/lib/gpu_stats.py
index 2af71fd..ec790ea 100644
--- a/lib/gpu_stats.py
+++ b/lib/gpu_stats.py
@@ -1,7 +1,14 @@
 #!/usr/bin python3
 """ Information on available Nvidia GPUs """
 
-import pynvml
+import platform
+
+if platform.system() == 'Darwin':
+    import pynvx
+    is_macos = True
+else:
+    import pynvml
+    is_macos = False
 
 
 class GPUStats(object):
@@ -30,11 +37,18 @@ class GPUStats(object):
     def initialize(self):
         """ Initialize pynvml """
         if not self.initialized:
-            try:
-                pynvml.nvmlInit()
-            except pynvml.NVMLError_LibraryNotFound:
-                self.initialized = True
-                return
+            if is_macos:
+                try:
+                    pynvx.cudaInit()
+                except RuntimeError:
+                    self.initialized = True
+                    return
+            else:
+                try:
+                    pynvml.nvmlInit()
+                except pynvml.NVMLError_LibraryNotFound:
+                    self.initialized = True
+                    return
             self.initialized = True
             self.get_device_count()
             self.get_handles()
@@ -43,47 +57,71 @@ class GPUStats(object):
         """ Shutdown pynvml """
         if self.initialized:
             self.handles = None
-            pynvml.nvmlShutdown()
+            if not is_macos:
+                pynvml.nvmlShutdown()
             self.initialized = False
 
     def get_device_count(self):
         """ Return count of Nvidia devices """
-        try:
-            self.device_count = pynvml.nvmlDeviceGetCount()
-        except pynvml.NVMLError:
-            self.device_count = 0
+        if is_macos:
+            self.device_count = pynvx.cudaDeviceGetCount(ignore=True)
+        else:
+            try:
+                self.device_count = pynvml.nvmlDeviceGetCount()
+            except pynvml.NVMLError:
+                self.device_count = 0
 
     def get_handles(self):
         """ Return all listed Nvidia handles """
-        self.handles = [pynvml.nvmlDeviceGetHandleByIndex(i)
-                        for i in range(self.device_count)]
+        if is_macos:
+            self.handles = pynvx.cudaDeviceGetHandles(ignore=True)
+        else:
+            self.handles = [pynvml.nvmlDeviceGetHandleByIndex(i)
+                            for i in range(self.device_count)]
 
     @staticmethod
     def get_driver():
         """ Get the driver version """
-        try:
-            driver = pynvml.nvmlSystemGetDriverVersion().decode("utf-8")
-        except pynvml.NVMLError:
-            driver = "No Nvidia driver found"
+        if is_macos:
+            driver = pynvx.cudaSystemGetDriverVersion(ignore=True)
+        else:
+            try:
+                driver = pynvml.nvmlSystemGetDriverVersion().decode("utf-8")
+            except pynvml.NVMLError:
+                driver = "No Nvidia driver found"
         return driver
 
     def get_devices(self):
-        """ Return total vram in megabytes per device """
-        vram = [pynvml.nvmlDeviceGetName(handle).decode("utf-8")
-                for handle in self.handles]
-        return vram
+        """ Return name of devices """
+        self.initialize()
+        if is_macos:
+            names = [pynvx.cudaGetName(handle, ignore=True)
+                    for handle in self.handles]
+        else:
+            names = [pynvml.nvmlDeviceGetName(handle).decode("utf-8")
+                    for handle in self.handles]
+        return names
 
     def get_vram(self):
         """ Return total vram in megabytes per device """
-        vram = [pynvml.nvmlDeviceGetMemoryInfo(handle).total / (1024 * 1024)
-                for handle in self.handles]
+        self.initialize()
+        if is_macos:
+            vram = [pynvx.cudaGetMemTotal(handle, ignore=True) / (1024 * 1024)
+                    for handle in self.handles]
+        else:
+            vram = [pynvml.nvmlDeviceGetMemoryInfo(handle).total / (1024 * 1024)
+                    for handle in self.handles]
         return vram
 
     def get_used(self):
         """ Return the vram in use """
         self.initialize()
-        vram = [pynvml.nvmlDeviceGetMemoryInfo(handle).used / (1024 * 1024)
-                for handle in self.handles]
+        if is_macos:
+            vram = [pynvx.cudaGetMemUsed(handle, ignore=True) / (1024 * 1024)
+                    for handle in self.handles]
+        else:
+            vram = [pynvml.nvmlDeviceGetMemoryInfo(handle).used / (1024 * 1024)
+                    for handle in self.handles]
         self.shutdown()
 
         if self.verbose:
@@ -94,8 +132,12 @@ class GPUStats(object):
     def get_free(self):
         """ Return the vram available """
         self.initialize()
-        vram = [pynvml.nvmlDeviceGetMemoryInfo(handle).free / (1024 * 1024)
-                for handle in self.handles]
+        if is_macos:
+            vram = [pynvx.cudaGetMemFree(handle, ignore=True) / (1024 * 1024)
+                    for handle in self.handles]
+        else:
+            vram = [pynvml.nvmlDeviceGetMemoryInfo(handle).free / (1024 * 1024)
+                    for handle in self.handles]
         self.shutdown()
         return vram
 
diff --git a/setup.py b/setup.py
index e62187c..3e53cba 100755
--- a/setup.py
+++ b/setup.py
@@ -6,6 +6,7 @@ import sys
 import platform
 OS_Version = (platform.system(), platform.release())
 Py_Version = (platform.python_version(), platform.architecture()[0])
+Is_MacOS = (platform.system() == 'Darwin')
 LD_LIBRARY_PATH = os.environ.get("LD_LIBRARY_PATH", None)
 IS_ADMIN = False
 IS_VIRTUALENV = False
@@ -16,6 +17,9 @@ COMPILE_DLIB_WITH_AVX_CUDA = True
 Required_Packages = [
 "tensorflow"
 ]
+MacOS_Required_Packages = [
+"pynvx==0.0.4"
+]
 Installed_Packages = {}
 Missing_Packages = []
 
@@ -180,7 +184,9 @@ def Continue():
         ERROR('Please install system dependencies to continue')
 
 def Check_Missing_Dep():
-    global Missing_Packages, Installed_Packages
+    global Missing_Packages, Installed_Packages, ENABLE_CUDA, Is_MacOS
+    if ENABLE_CUDA and Is_MacOS:
+        Required_Packages.extend(MacOS_Required_Packages)
     Missing_Packages = []
     for pkg in Required_Packages:
         key = pkg.split("==")[0]
diff --git a/tools/cli.py b/tools/cli.py
index 068d0b4..0d46767 100644
--- a/tools/cli.py
+++ b/tools/cli.py
@@ -20,6 +20,7 @@ class AlignmentsArgs(FaceSwapArgs):
         align_eyes = "\n\tCan optionally use the align-eyes switch (-ae)."
         argument_list = list()
         argument_list.append({
+
             "opts": ("-j", "--job"),
             "type": str,
             "choices": ("draw", "extract", "extract-large", "manual",
