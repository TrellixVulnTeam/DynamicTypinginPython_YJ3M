commit ae74e804834628d920e1be8c02aa446d9c48b14f
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Fri Jul 5 10:28:56 2019 +0000

    Deprecation Warnings, Error Handling and Bugfix
    
    Deprecation Warning: Rotation in Extract
    Deprecation Warning: Multiple models within a single folder
    Error Handling: Useful message for training size assertion error
    Error Handling: Useful message for fewer images than batch size
    Bugfix: BoundingBox object sometimes not available inside spawned process

diff --git a/lib/training_data.py b/lib/training_data.py
index 26d988a..672f30e 100644
--- a/lib/training_data.py
+++ b/lib/training_data.py
@@ -133,7 +133,12 @@ class TrainingDataGenerator():
         msg = ("Number of images is lower than batch-size (Note that too few "
                "images may lead to bad training). # images: {}, "
                "batch-size: {}".format(length, self.batchsize))
-        assert length >= self.batchsize, msg
+        try:
+            assert length >= self.batchsize, msg
+        except AssertionError as err:
+            msg += ("\nYou should increase the number of images in your training set or lower "
+                    "your batch-size.")
+            raise FaceswapError(msg) from err
 
     @staticmethod
     def minibatch(side, is_display, load_process):
@@ -352,7 +357,15 @@ class ImageManipulation():
         logger.trace("Randomly warping image")
         height, width = image.shape[0:2]
         coverage = self.get_coverage(image)
-        assert height == width and height % 2 == 0
+        try:
+            assert height == width and height % 2 == 0
+        except AssertionError as err:
+            msg = ("Training images should be square with an even number of pixels across each "
+                   "side. An image was found with width: {}, height: {}."
+                   "\nMost likely this is a frame rather than a face within your training set. "
+                   "\nMake sure that the only images within your training set are faces generated "
+                   "from the Extract process.".format(width, height))
+            raise FaceswapError(msg) from err
 
         range_ = np.linspace(height // 2 - coverage // 2,
                              height // 2 + coverage // 2,
diff --git a/lib/utils.py b/lib/utils.py
index df59ea8..c63e88c 100644
--- a/lib/utils.py
+++ b/lib/utils.py
@@ -186,6 +186,16 @@ def set_system_verbosity(loglevel):
             warnings.simplefilter(action='ignore', category=warncat)
 
 
+def deprecation_warning(func_name, additional_info=None):
+    """ Log at warning level that a function will be removed in future """
+    logger = logging.getLogger(__name__)  # pylint:disable=invalid-name
+    logger.debug("func_name: %s, additional_info: %s", func_name, additional_info)
+    msg = "{}  has been deprecated and will be removed from a future update.".format(func_name)
+    if additional_info is not None:
+        msg += " {}".format(additional_info)
+    logger.warning(msg)
+
+
 def rotate_landmarks(face, rotation_matrix):
     # pylint:disable=c-extension-no-member
     """ Rotate the landmarks and bounding box for faces
diff --git a/plugins/extract/detect/_base.py b/plugins/extract/detect/_base.py
index 7917a9c..7b2de45 100755
--- a/plugins/extract/detect/_base.py
+++ b/plugins/extract/detect/_base.py
@@ -20,7 +20,7 @@ import cv2
 
 from lib.faces_detect import BoundingBox
 from lib.gpu_stats import GPUStats
-from lib.utils import rotate_landmarks, GetModel
+from lib.utils import deprecation_warning, rotate_landmarks, GetModel
 from plugins.extract._config import Config
 
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
@@ -71,6 +71,12 @@ class Detector():
         # will support. It is also used for holding the number of threads/
         # processes for parallel processing plugins
         self.batch_size = 1
+
+        if rotation is not None:
+            deprecation_warning("Rotation ('-r', '--rotation')",
+                                additional_info="It is not necessary for most detectors and will "
+                                                "be moved to plugin config for those detectors "
+                                                "that require it.")
         logger.debug("Initialized _base %s", self.__class__.__name__)
 
     # <<< OVERRIDE METHODS >>> #
@@ -80,6 +86,11 @@ class Detector():
             Override for specific detector """
         logger.debug("initialize %s (PID: %s, args: %s, kwargs: %s)",
                      self.__class__.__name__, os.getpid(), args, kwargs)
+        # Sometimes BoundingBox doesn't get imported from the parent process
+        # Hacky fix to import it inside the process
+        global BoundingBox  # pylint:disable=global-statement,invalid-name
+        from lib.faces_detect import BoundingBox as bb  # pylint:disable=reimported
+        BoundingBox = bb
         self.init = kwargs.get("event", False)
         self.error = kwargs.get("error", False)
         self.queues["in"] = kwargs["in_queue"]
diff --git a/plugins/train/model/_base.py b/plugins/train/model/_base.py
index 6c11e53..3e6f608 100644
--- a/plugins/train/model/_base.py
+++ b/plugins/train/model/_base.py
@@ -23,7 +23,7 @@ from lib.model.backup_restore import Backup
 from lib.model.losses import DSSIMObjective, PenalizedLoss
 from lib.model.nn_blocks import NNBlocks
 from lib.multithreading import MultiThread
-from lib.utils import FaceswapError
+from lib.utils import deprecation_warning, FaceswapError
 from plugins.train._config import Config
 
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
@@ -62,6 +62,7 @@ class ModelBase():
 
         self.predict = predict
         self.model_dir = model_dir
+
         self.backup = Backup(self.model_dir, self.name)
         self.gpus = gpus
         self.configfile = configfile
@@ -98,6 +99,11 @@ class ModelBase():
                               "snapshot_interval": snapshot_interval}
 
         self.set_gradient_type(memory_saving_gradients)
+        if self.multiple_models_in_folder:
+            deprecation_warning("Support for multiple model types within the same folder",
+                                additional_info="Please split each model into separate folders to "
+                                                "avoid issues in future.")
+
         self.build()
         self.set_training_data()
         logger.debug("Initialized ModelBase (%s)", self.__class__.__name__)
@@ -140,6 +146,14 @@ class ModelBase():
         logger.debug("Pre-existing models exist: %s", retval)
         return retval
 
+    @property
+    def multiple_models_in_folder(self):
+        """ Return true if there are multiple model types in the same folder, else false """
+        model_files = [fname for fname in os.listdir(self.model_dir) if fname.endswith(".h5")]
+        retval = os.path.commonprefix(model_files) == ""
+        logger.debug("model_files: %s, retval: %s", model_files, retval)
+        return retval
+
     @staticmethod
     def set_gradient_type(memory_saving_gradients):
         """ Monkeypatch Memory Saving Gradients if requested """
