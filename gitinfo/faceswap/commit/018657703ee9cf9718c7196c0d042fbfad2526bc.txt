commit 018657703ee9cf9718c7196c0d042fbfad2526bc
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Sun Feb 10 18:27:34 2019 +0000

    dlib-cnn rotation scale bugfix

diff --git a/plugins/extract/detect/_base.py b/plugins/extract/detect/_base.py
index 88c1be5..b2fee17 100644
--- a/plugins/extract/detect/_base.py
+++ b/plugins/extract/detect/_base.py
@@ -15,10 +15,10 @@ import logging
 import os
 import traceback
 from io import StringIO
+from math import sqrt
 
 import cv2
 import dlib
-from math import sqrt
 
 from lib.gpu_stats import GPUStats
 from lib.utils import rotate_landmarks
@@ -100,9 +100,9 @@ class Detector():
             Do not override """
         try:
             self.detect_faces(*args, **kwargs)
-        except Exception:  # pylint: disable=broad-except
-            logger.error("Caught exception in child process: %s", os.getpid())
-            # Display traceback if in initialization stage 
+        except Exception as err:  # pylint: disable=broad-except
+            logger.error("Caught exception in child process: %s: %s", os.getpid(), str(err))
+            # Display traceback if in initialization stage
             if not self.init.is_set():
                 logger.exception("Traceback:")
             tb_buffer = StringIO()
@@ -149,10 +149,11 @@ class Detector():
         else:
             scale = 1.0
         logger.trace("Detector scale: %s", scale)
-        
+
         return scale
 
-    def set_detect_image(self, input_image, scale):
+    @staticmethod
+    def set_detect_image(input_image, scale):
         """ Convert the image to RGB and scale """
         # pylint: disable=no-member
         image = input_image[:, :, ::-1].copy()
diff --git a/plugins/extract/detect/dlib_cnn.py b/plugins/extract/detect/dlib_cnn.py
index 69bb5c3..306a1de 100644
--- a/plugins/extract/detect/dlib_cnn.py
+++ b/plugins/extract/detect/dlib_cnn.py
@@ -80,7 +80,7 @@ class Detect(Detector):
                                             output=None,
                                             scales=scales)
             if not all(faces for faces in processed) and self.rotation != [0]:
-                processed = self.process_rotations(detect_images, processed)
+                processed = self.process_rotations(detect_images, processed, scales)
             for idx, faces in enumerate(processed):
                 filename = filenames[idx]
                 for b_idx, item in enumerate(batch):
@@ -137,7 +137,8 @@ class Detect(Detector):
                        indexes=None, rotation_matrix=None, output=None, scales=None):
         """ Process the output images """
         logger.trace("Processing Output: (batch_detected: %s, indexes: %s, rotation_matrix: %s, "
-                     "output: %s", batch_detected, indexes, rotation_matrix, output)
+                     "output: %s, scales: %s",
+                     batch_detected, indexes, rotation_matrix, output, scales)
         output = output if output else list()
         for idx, faces in enumerate(batch_detected):
             detected_faces = list()
@@ -163,7 +164,7 @@ class Detect(Detector):
         logger.trace("Processed Output: %s", output)
         return output
 
-    def process_rotations(self, detect_images, processed):
+    def process_rotations(self, detect_images, processed, scales):
         """ Rotate frames missing faces until face is found """
         logger.trace("Processing Rotations")
         for angle in self.rotation:
@@ -182,7 +183,8 @@ class Detect(Detector):
             processed = self.process_output(batch_detected,
                                             indexes=indexes,
                                             rotation_matrix=rotmat,
-                                            output=processed)
+                                            output=processed,
+                                            scales=scales)
         logger.trace("Processed Rotations")
         return processed
 
