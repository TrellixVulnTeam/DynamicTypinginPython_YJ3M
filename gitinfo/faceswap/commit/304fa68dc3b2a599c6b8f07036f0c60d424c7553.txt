commit 304fa68dc3b2a599c6b8f07036f0c60d424c7553
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Mon Mar 18 00:24:36 2019 +0000

    Correct dfaker config.
    Make lr configurable

diff --git a/plugins/train/_config.py b/plugins/train/_config.py
index aea9ca7..eddace0 100644
--- a/plugins/train/_config.py
+++ b/plugins/train/_config.py
@@ -38,21 +38,23 @@ class Config(FaceswapConfig):
                  "Might increase speed at cost of VRAM")
         self.add_item(
             section=section, title="reflect_padding", datatype=bool, default=False,
-            info="Use reflect padding rather than zero padding.")
-        self.add_item(
-            section=section, title="dssim_mask_loss", datatype=bool, default=True,
-            info="If using a mask, Use DSSIM loss for Mask training rather than Mean Absolute "
-                 "Error\nMay increase overall quality.")
+            info="Use reflect padding rather than zero padding. Only enable this option if the "
+                 "model you are training has a distinct line appearing around the edge of the "
+                 "swap area.")
         self.add_item(
             section=section, title="penalized_mask_loss", datatype=bool, default=True,
-            info="If using a mask, Use Penalized loss for Mask training. Can stack with DSSIM.\n"
-                 "May increase overall quality.")
+            info="If using a mask, Use Penalized loss for Mask training. \n"
+                 "May increase overall quality. This should probably be left at True")
 
         # << DFAKER OPTIONS >> #
         section = "model.dfaker"
         self.add_section(title=section,
                          info="Dfaker Model (Adapted from https://github.com/dfaker/df)" +
                          ADDITIONAL_INFO)
+        self.add_item(
+            section=section, title="dssim_loss", datatype=bool, default=True,
+            info="Use DSSIM for Loss rather than Mean Absolute Error\n"
+                 "May increase overall quality.")
         self.add_item(
             section=section, title="mask_type", datatype=str, default="dfaker",
             choices=MASK_TYPES, info=MASK_INFO)
diff --git a/plugins/train/model/_base.py b/plugins/train/model/_base.py
index fbddf0a..5a28088 100644
--- a/plugins/train/model/_base.py
+++ b/plugins/train/model/_base.py
@@ -250,7 +250,8 @@ class ModelBase():
     def compile_predictors(self, initialize=True):
         """ Compile the predictors """
         logger.debug("Compiling Predictors")
-        optimizer = self.get_optimizer(lr=5e-5, beta_1=0.5, beta_2=0.999)
+        learning_rate = self.config.get("learning_rate", 5e-5)
+        optimizer = self.get_optimizer(lr=learning_rate, beta_1=0.5, beta_2=0.999)
 
         for side, model in self.predictors.items():
             loss_names = ["loss"]
@@ -299,14 +300,9 @@ class ModelBase():
     def mask_loss_function(self, mask, side, initialize):
         """ Set the loss function for masks
             Side is input so we only log once """
-        if self.config.get("dssim_mask_loss", False):
-            if side == "a" and not self.predict and initialize:
-                logger.verbose("Using DSSIM Loss for mask")
-            mask_loss_func = DSSIMObjective()
-        else:
-            if side == "a" and not self.predict:
-                logger.verbose("Using Mean Absolute Error Loss for mask")
-            mask_loss_func = losses.mean_absolute_error
+        if side == "a" and not self.predict:
+            logger.verbose("Using Mean Absolute Error Loss for mask")
+        mask_loss_func = losses.mean_absolute_error
 
         if self.config.get("penalized_mask_loss", False):
             if side == "a" and not self.predict and initialize:
