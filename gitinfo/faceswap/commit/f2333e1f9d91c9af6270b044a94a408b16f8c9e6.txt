commit f2333e1f9d91c9af6270b044a94a408b16f8c9e6
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Mon Dec 30 18:10:54 2019 +0000

    tools.preview - Limit mask selection to only masks available for all faces
    plugins.mask - Correctly set dtype for "None" mask

diff --git a/plugins/convert/mask/mask_blend.py b/plugins/convert/mask/mask_blend.py
index a09d4b6..1beadc7 100644
--- a/plugins/convert/mask/mask_blend.py
+++ b/plugins/convert/mask/mask_blend.py
@@ -72,7 +72,7 @@ class Mask(Adjustment):
         """
         if self.mask_type == "none":
             # Return a dummy mask if not using a mask
-            mask = np.ones_like(self.dummy[:, :, 1])
+            mask = np.ones_like(self.dummy[:, :, 1], dtype="uint8") * 255
         elif self.mask_type == "predicted":
             mask = predicted_mask
         else:
diff --git a/tools/preview.py b/tools/preview.py
index 7040732..922a400 100644
--- a/tools/preview.py
+++ b/tools/preview.py
@@ -6,6 +6,7 @@ import random
 import tkinter as tk
 from tkinter import ttk
 import os
+import sys
 
 from configparser import ConfigParser
 from threading import Event, Lock
@@ -75,6 +76,14 @@ class Preview(tk.Tk):  # pylint:disable=too-few-public-methods
         self._cli_frame = None  # cli frame holds cli options
         logger.debug("Initialized %s", self.__class__.__name__)
 
+    @property
+    def _available_masks(self):
+        """ list: The mask names that are available for every face in the alignmnets file """
+        retval = [key
+                  for key, val in self._samples.alignments.mask_summary.items()
+                  if val == self._samples.alignments.faces_count]
+        return retval
+
     def _initialize_tkinter(self):
         """ Initialize a standalone tkinter instance. """
         logger.debug("Initializing tkinter")
@@ -148,7 +157,7 @@ class Preview(tk.Tk):  # pylint:disable=too-few-public-methods
         options_frame = ttk.Frame(container)
         self._cli_frame = ActionFrame(
             options_frame,
-            list(self._samples.alignments.mask_summary.keys()),
+            self._available_masks,
             self._samples.predictor.has_predicted_mask,
             self._patch.converter.cli_arguments.color_adjustment.replace("-", "_"),
             self._patch.converter.cli_arguments.mask_type.replace("-", "_"),
@@ -205,7 +214,7 @@ class Samples():
                                       input_is_video=self._images.is_video)
         if not self._alignments.have_alignments_file:
             logger.error("Alignments file not found at: '%s'", self._alignments.file)
-            exit(1)
+            sys.exit(1)
         self._filelist = self._get_filelist()
         self._indices = self._get_indices()
 
