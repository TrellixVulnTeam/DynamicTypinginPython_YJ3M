commit 0d567f1696583dcbec68c759b136578035b132f8
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Mon Feb 25 12:51:50 2019 +0000

    Fix on-the-fly conversion

diff --git a/lib/faces_detect.py b/lib/faces_detect.py
index c0fa299..c060a71 100644
--- a/lib/faces_detect.py
+++ b/lib/faces_detect.py
@@ -49,7 +49,7 @@ class DetectedFace():
         self.w = d_rect.right() - d_rect.left()
         self.y = d_rect.top()
         self.h = d_rect.bottom() - d_rect.top()
-        if image.any():
+        if image is not None and image.any():
             self.image_to_face(image)
         logger.trace("Created from dlib_rectangle: (x: %s, w: %s, y: %s. h: %s)",
                      self.x, self.w, self.y, self.h)
diff --git a/scripts/convert.py b/scripts/convert.py
index fd2a826..dbee8ec 100644
--- a/scripts/convert.py
+++ b/scripts/convert.py
@@ -12,11 +12,13 @@ from tqdm import tqdm
 
 from scripts.fsmedia import Alignments, Images, PostProcess, Utils
 from lib.faces_detect import DetectedFace
-from lib.multithreading import BackgroundGenerator, SpawnProcess
+from lib.multithreading import BackgroundGenerator
 from lib.queue_manager import queue_manager
 from lib.utils import get_folder, get_image_paths, hash_image_file
 from plugins.plugin_loader import PluginLoader
 
+from .extract import Plugins as Extractor
+
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
 
 
@@ -26,7 +28,7 @@ class Convert():
         logger.debug("Initializing %s: (args: %s)", self.__class__.__name__, arguments)
         self.args = arguments
         self.output_dir = get_folder(self.args.output_dir)
-        self.extract_faces = False
+        self.extractor = None
         self.faces_count = 0
 
         self.images = Images(self.args)
@@ -59,7 +61,7 @@ class Convert():
         for item in batch.iterator():
             self.convert(converter, item)
 
-        if self.extract_faces:
+        if self.extractor:
             queue_manager.terminate_queues()
 
         Utils.finalize(self.images.images_found,
@@ -72,33 +74,12 @@ class Convert():
         logger.warning("NB: This will use the inferior dlib-hog for extraction "
                        "and dlib pose predictor for landmarks. It is recommended "
                        "to perfom Extract first for superior results")
-        for task in ("load", "detect", "align"):
-            queue_manager.add_queue(task, maxsize=0)
-
-        detector = PluginLoader.get_detector("dlib_hog")(loglevel=self.args.loglevel)
-        aligner = PluginLoader.get_aligner("dlib")(loglevel=self.args.loglevel)
-
-        d_kwargs = {"in_queue": queue_manager.get_queue("load"),
-                    "out_queue": queue_manager.get_queue("detect")}
-        a_kwargs = {"in_queue": queue_manager.get_queue("detect"),
-                    "out_queue": queue_manager.get_queue("align")}
-
-        d_process = SpawnProcess(detector.run, **d_kwargs)
-        d_event = d_process.event
-        d_process.start()
-
-        a_process = SpawnProcess(aligner.run, **a_kwargs)
-        a_event = a_process.event
-        a_process.start()
-
-        d_event.wait(10)
-        if not d_event.is_set():
-            raise ValueError("Error inititalizing Detector")
-        a_event.wait(10)
-        if not a_event.is_set():
-            raise ValueError("Error inititalizing Aligner")
-
-        self.extract_faces = True
+        extract_args = {"detector": "dlib-hog",
+                        "aligner": "dlib",
+                        "loglevel": self.args.loglevel}
+        self.extractor = Extractor(None, extract_args)
+        self.extractor.launch_detector()
+        self.extractor.launch_aligner()
 
     def load_model(self):
         """ Load the model requested for conversion """
@@ -120,6 +101,8 @@ class Convert():
     def prepare_images(self):
         """ Prepare the images for conversion """
         filename = ""
+        if self.extractor:
+            load_queue = queue_manager.get_queue("load")
         for filename, image in tqdm(self.images.load(),
                                     total=self.images.images_found,
                                     file=sys.stdout):
@@ -129,8 +112,8 @@ class Convert():
                 continue
 
             frame = os.path.basename(filename)
-            if self.extract_faces:
-                detected_faces = self.detect_faces(filename, image)
+            if self.extractor:
+                detected_faces = self.detect_faces(load_queue, filename, image)
             else:
                 detected_faces = self.alignments_faces(frame, image)
 
@@ -148,13 +131,23 @@ class Convert():
 
             yield filename, image, detected_faces
 
-    @staticmethod
-    def detect_faces(filename, image):
-        """ Extract the face from a frame (If not alignments file found) """
-        queue_manager.get_queue("load").put((filename, image))
-        item = queue_manager.get_queue("align").get()
-        detected_faces = item["detected_faces"]
-        return detected_faces
+    def detect_faces(self, load_queue, filename, image):
+        """ Extract the face from a frame (If alignments file not found) """
+        inp = {"filename": filename,
+               "image": image}
+        load_queue.put(inp)
+        faces = next(self.extractor.detect_faces())
+
+        landmarks = faces["landmarks"]
+        detected_faces = faces["detected_faces"]
+        final_faces = list()
+
+        for idx, face in enumerate(detected_faces):
+            detected_face = DetectedFace()
+            detected_face.from_dlib_rect(face)
+            detected_face.landmarksXY = landmarks[idx]
+            final_faces.append(detected_face)
+        return final_faces
 
     def alignments_faces(self, frame, image):
         """ Get the face from alignments file """
diff --git a/scripts/extract.py b/scripts/extract.py
index cc1b081..74c3b35 100644
--- a/scripts/extract.py
+++ b/scripts/extract.py
@@ -245,9 +245,15 @@ class Extract():
 
 class Plugins():
     """ Detector and Aligner Plugins and queues """
-    def __init__(self, arguments):
+    def __init__(self, arguments, converter_args=None):
         logger.debug("Initializing %s", self.__class__.__name__)
         self.args = arguments
+        self.converter_args = converter_args  # Arguments from converter for on the fly extract
+        if converter_args is not None:
+            self.loglevel = converter_args["loglevel"]
+        else:
+            self.loglevel = self.args.loglevel
+
         self.detector = self.load_detector()
         self.aligner = self.load_aligner()
         self.is_parallel = self.set_parallel_processing()
@@ -297,7 +303,10 @@ class Plugins():
 
     def load_detector(self):
         """ Set global arguments and load detector plugin """
-        detector_name = self.args.detector.replace("-", "_").lower()
+        if not self.converter_args:
+            detector_name = self.args.detector.replace("-", "_").lower()
+        else:
+            detector_name = self.converter_args["detector"]
         logger.debug("Loading Detector: '%s'", detector_name)
         # Rotation
         rotation = None
@@ -305,18 +314,22 @@ class Plugins():
             rotation = self.args.rotate_images
 
         detector = PluginLoader.get_detector(detector_name)(
-            loglevel=self.args.loglevel,
+            loglevel=self.loglevel,
             rotation=rotation)
 
         return detector
 
     def load_aligner(self):
         """ Set global arguments and load aligner plugin """
-        aligner_name = self.args.aligner.replace("-", "_").lower()
+        if not self.converter_args:
+            aligner_name = self.args.aligner.replace("-", "_").lower()
+        else:
+            aligner_name = self.converter_args["aligner"]
+
         logger.debug("Loading Aligner: '%s'", aligner_name)
 
         aligner = PluginLoader.get_aligner(aligner_name)(
-            loglevel=self.args.loglevel)
+            loglevel=self.loglevel)
 
         return aligner
 
@@ -351,7 +364,8 @@ class Plugins():
         out_queue = queue_manager.get_queue("detect")
         kwargs = {"in_queue": queue_manager.get_queue("load"),
                   "out_queue": out_queue}
-
+        if self.converter_args:
+            kwargs["processes"] = 1
         mp_func = PoolProcess if self.detector.parent_is_pool else SpawnProcess
         self.process_detect = mp_func(self.detector.run, **kwargs)
 
diff --git a/scripts/fsmedia.py b/scripts/fsmedia.py
index 8199afb..1c03af8 100644
--- a/scripts/fsmedia.py
+++ b/scripts/fsmedia.py
@@ -94,6 +94,8 @@ class Alignments(AlignmentsBase):
         """ Override  parent loader to handle skip existing on extract """
         data = dict()
         if not self.is_extract:
+            if not self.have_alignments_file:
+                return data
             data = super().load()
             return data
 
