commit 120535eb11b6d606d5c72d80c88c890aeff9eee2
Author: Pablo <pabloprieto@live.com>
Date:   Mon Mar 5 09:57:56 2018 -0600

    Skip already extracted frames when using extract.py (#214)
    
    * Pytorch and face-alignment
    
    * Skip processed frames when extracting faces.
    
    * Reset to master version
    
    * Reset to master
    
    * Added --skip-existing argument to Extract script. Default is to NOT skip already processed frames.
    Added logic to write_alignments to append new alignments (and preserve existing ones)
    to existing alignments file when the skip-existing option is used.
    
    * Fixed exception for --skip-existing when using the convert script
    
    * Sync with upstream
    
    * Fixed error when using Convert script.
    
    * Bug fix
    
    * Merges alignments only if --skip-existing is used.
    
    * Creates output dir when not found, even when using --skip-existing.

diff --git a/lib/cli.py b/lib/cli.py
index 848ee22..b4b615a 100644
--- a/lib/cli.py
+++ b/lib/cli.py
@@ -50,10 +50,23 @@ class DirectoryProcessor(object):
         print("Using {} serializer".format(self.serializer.ext))
 
         print('Starting, this may take a while...')
-
+        
+        try:
+            if self.arguments.skip_existing:
+                self.already_processed = get_image_paths(self.arguments.output_dir)
+        except AttributeError:
+            pass
+    
         self.output_dir = get_folder(self.arguments.output_dir)
         try:
-            self.input_dir = get_image_paths(self.arguments.input_dir)
+            try:
+                if self.arguments.skip_existing:
+                    self.input_dir = get_image_paths(self.arguments.input_dir, self.already_processed)
+                    print('Excluding %s files' % len(self.already_processed))
+                else:
+                    self.input_dir = get_image_paths(self.arguments.input_dir)
+            except AttributeError:
+                self.input_dir = get_image_paths(self.arguments.input_dir)
         except:
             print('Input directory not found. Please ensure it exists.')
             exit(1)
@@ -82,6 +95,16 @@ class DirectoryProcessor(object):
         fn = os.path.join(str(self.arguments.input_dir), "alignments.{}".format(self.serializer.ext))
         if self.arguments.alignments_path is not None:
             fn = self.arguments.alignments_path
+        print("Alignments filepath: %s" % fn)
+        
+        if self.arguments.skip_existing:
+            if os.path.exists(fn):
+                with open(fn, self.serializer.roptions) as inf:
+                    data = self.serializer.unmarshal(inf.read())
+                    for k, v in data.items():
+                        self.faces_detected[k] = v
+            else:
+                print('Existing alignments file "%s" not found.' % fn)
         try:
             print("Writing alignments to: {}".format(fn))
             with open(fn, self.serializer.woptions) as fh:
@@ -116,13 +139,13 @@ class DirectoryProcessor(object):
             self.num_faces_detected += 1
             faces_count += 1
         if faces_count > 1 and self.arguments.verbose:
-            print('Note: Found more than one face in an image!')
+            print('Note: Found more than one face in an image! File: %s' % filename)
             self.verify_output = True
 
     def get_faces(self, image):
         faces_count = 0
         faces = detect_faces(image, self.arguments.detector)
-
+        
         for face in faces:
             if self.filter is not None and not self.filter.check(face):
                 print('Skipping not recognized face!')
@@ -133,7 +156,6 @@ class DirectoryProcessor(object):
             faces_count += 1
 
         if faces_count > 1 and self.arguments.verbose:
-            print('Note: Found more than one face in an image!')
             self.verify_output = True
 
     def load_filter(self):
diff --git a/lib/utils.py b/lib/utils.py
index 8ef81e3..c07a066 100644
--- a/lib/utils.py
+++ b/lib/utils.py
@@ -1,5 +1,6 @@
 import argparse
 import sys
+from os.path import basename, exists
 
 from pathlib import Path
 from scandir import scandir
@@ -11,9 +12,24 @@ def get_folder(path):
     output_dir.mkdir(parents=True, exist_ok=True)
     return output_dir
 
-def get_image_paths(directory):
-    return [x.path for x in scandir(directory) if
-     any(map(lambda ext: x.name.lower().endswith(ext), image_extensions))]
+def get_image_paths(directory, exclude=[], debug=False):
+    exclude_names = [basename(Path(x).stem[:-1] + Path(x).suffix) for x in exclude]
+    dir_contents = []
+
+    if not exists(directory):
+        directory = get_folder(directory).path
+
+    dir_scanned = list(scandir(directory))
+    for x in dir_scanned:
+        if any([x.name.lower().endswith(ext) for ext in image_extensions]):
+            if x.name in exclude_names:
+                if debug:
+                    print("Already processed %s" % x.name)
+                continue
+            else:
+                dir_contents.append(x.path)
+
+    return dir_contents
 
 class FullHelpArgumentParser(argparse.ArgumentParser):
     """
diff --git a/scripts/extract.py b/scripts/extract.py
index 972806b..d190fbb 100644
--- a/scripts/extract.py
+++ b/scripts/extract.py
@@ -17,7 +17,7 @@ class ExtractTrainingData(DirectoryProcessor):
             description=description,
             epilog="Questions and feedback: \
             https://github.com/deepfakes/faceswap-playground"
-        )
+            )
 
     def add_optional_arguments(self, parser):
         parser.add_argument('-D', '--detector',
@@ -38,11 +38,18 @@ class ExtractTrainingData(DirectoryProcessor):
                             default=1,
                             help="Number of processes to use.")
         
+        parser.add_argument('-s', '--skip-existing',
+                            action='store_true',
+                            dest='skip_existing',
+                            default=False,
+                            help="Skips frames already extracted.")
+        
         parser.add_argument('-dl', '--debug-landmarks',
                             action="store_true",
                             dest="debug_landmarks",
                             default=False,
                             help="Draw landmarks for debug.")
+        
         return parser
 
     def process(self):
