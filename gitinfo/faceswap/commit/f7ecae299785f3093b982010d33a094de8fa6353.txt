commit f7ecae299785f3093b982010d33a094de8fa6353
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Thu Aug 8 00:09:30 2019 +0100

    Add "mask_blur" option for training

diff --git a/lib/model/losses.py b/lib/model/losses.py
index 2d0c2b2..01ac133 100644
--- a/lib/model/losses.py
+++ b/lib/model/losses.py
@@ -26,6 +26,22 @@ else:
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
 
 
+def mask_loss_wrapper(loss_func, preprocessing_func=None):
+    """ A wrapper for mask loss that can perform pre-processing on the input
+        prior to calling the loss function
+        loss_func: The loss function to use
+        preprocessing_func: The preprocessing function to use. Should take a Keras Input
+        as it's only argument """
+
+    def func(y_true, y_pred):
+        """ Process input if a processing function has been passed, otherwise just return loss """
+        if preprocessing_func is not None:
+            y_true = K.reshape(y_true, [-1] + list(K.int_shape(y_pred)[1:]))
+            y_true = preprocessing_func(y_true)
+        return loss_func(y_true, y_pred)
+    return func
+
+
 class DSSIMObjective():
     """ DSSIM Loss Function
 
@@ -163,8 +179,15 @@ class DSSIMObjective():
 
 
 # <<< START: from Dfaker >>> #
-def PenalizedLoss(mask, loss_func, mask_prop=1.0, mask_scaling=1.0):  # pylint: disable=invalid-name
-    """ Plaidml + tf Penalized loss function """
+def PenalizedLoss(mask, loss_func,  # pylint: disable=invalid-name
+                  mask_prop=1.0, mask_scaling=1.0, preprocessing_func=None):
+    """ Plaidml + tf Penalized loss function
+        mask_scaling: For multi-decoder output the target mask will likely be at
+                      full size scaling, so this is the scaling factor to reduce
+                      the mask by.
+        preprocessing_func: The preprocessing function to use. Should take a Keras Input
+                            as it's only input
+    """
 
     def scale_mask(mask, scaling):
         """ Scale the input mask to be the same size as the input face """
@@ -180,6 +203,8 @@ def PenalizedLoss(mask, loss_func, mask_prop=1.0, mask_scaling=1.0):  # pylint:
         return mask
 
     mask = scale_mask(mask, mask_scaling)
+    if preprocessing_func is not None:
+        mask = preprocessing_func(mask)
     mask_as_k_inv_prop = 1 - mask_prop
     mask = (mask * mask_prop) + mask_as_k_inv_prop
 
diff --git a/plugins/train/_config.py b/plugins/train/_config.py
index e738bb2..d2a41f9 100644
--- a/plugins/train/_config.py
+++ b/plugins/train/_config.py
@@ -125,17 +125,21 @@ class Config(FaceswapConfig):
                  "pixel spatial difference in each image and then minimize that difference "
                  "between two images. Allows for large color shifts,but maintains the structure "
                  "of the image.\n")
-        self.add_item(section=section, title="mask_type", datatype=str, default="none",
-                      choices=get_available_masks(),
-                      info="The mask to be used for training:"
-                           "\n\t none: Doesn't use any mask."
-                           "\n\t components: An improved face hull mask using a facehull of 8 "
-                           "facial parts"
-                           "\n\t dfl_full: An improved face hull mask using a facehull of 3 "
-                           "facial parts"
-                           "\n\t extended: Based on components mask. Extends the eyebrow points "
-                           "to further up the forehead. May perform badly on difficult angles."
-                           "\n\t facehull: Face cutout based on landmarks")
+        self.add_item(
+            section=section, title="mask_type", datatype=str, default="none",
+            choices=get_available_masks(),
+            info="The mask to be used for training:"
+                 "\n\t none: Doesn't use any mask."
+                 "\n\t components: An improved face hull mask using a facehull of 8 facial parts"
+                 "\n\t dfl_full: An improved face hull mask using a facehull of 3 facial parts"
+                 "\n\t extended: Based on components mask. Extends the eyebrow points to further "
+                 "up the forehead. May perform badly on difficult angles."
+                 "\n\t facehull: Face cutout based on landmarks")
+        self.add_item(
+            section=section, title="mask_blur", datatype=bool, default=False,
+            info="Apply gaussian blur to the mask input. This has the effect of smoothing the "
+                 "edges of the mask, which can help with poorly calculated masks, and give less "
+                 "of a hard edge to the predicted mask.")
         self.add_item(
             section=section, title="learning_rate", datatype=float, default=5e-5,
             min_max=(1e-6, 1e-4), rounding=6, fixed=False,
diff --git a/plugins/train/model/_base.py b/plugins/train/model/_base.py
index 80b706e..b0a4728 100644
--- a/plugins/train/model/_base.py
+++ b/plugins/train/model/_base.py
@@ -20,8 +20,9 @@ from keras.utils import get_custom_objects, multi_gpu_model
 
 from lib import Serializer
 from lib.model.backup_restore import Backup
-from lib.model.losses import DSSIMObjective, PenalizedLoss, gradient_loss
-from lib.model.losses import generalized_loss, l_inf_norm, gmsd_loss
+from lib.model.losses import (DSSIMObjective, PenalizedLoss, gradient_loss, mask_loss_wrapper,
+                              generalized_loss, l_inf_norm, gmsd_loss)
+from lib.model.masks import gaussian_blur
 from lib.model.nn_blocks import NNBlocks
 from lib.model.optimizers import Adam
 from lib.multithreading import MultiThread
@@ -676,6 +677,15 @@ class Loss():
         """ Return the global _CONFIG variable """
         return _CONFIG
 
+    @property
+    def mask_preprocessing_func(self):
+        """ The selected pre-processing function for the mask """
+        retval = None
+        if self.config.get("mask_blur", False):
+            retval = gaussian_blur(max(1, self.mask_shape[1] // 32))
+        logger.debug(retval)
+        return retval
+
     @property
     def selected_loss(self):
         """ Return the selected loss function """
@@ -685,9 +695,13 @@ class Loss():
 
     @property
     def selected_mask_loss(self):
-        """ Return the selected mask loss function. Currently returns mse """
-        retval = self.loss_dict["mse"]
-        logger.debug(retval)
+        """ Return the selected mask loss function. Currently returns mse
+            If a processing function has been requested wrap the loss function
+            in loss wrapper """
+        loss_func = self.loss_dict["mse"]
+        func = self.mask_preprocessing_func
+        logger.debug("loss_func: %s, func: %s", loss_func, func)
+        retval = mask_loss_wrapper(loss_func, preprocessing_func=func)
         return retval
 
     @property
@@ -746,7 +760,8 @@ class Loss():
                 logger.debug("face_size: %s mask_size: %s, mask_scaling: %s",
                              face_size, mask_size, scaling)
                 loss_funcs.append(PenalizedLoss(self.mask_input, self.selected_loss,
-                                                mask_scaling=scaling))
+                                                mask_scaling=scaling,
+                                                preprocessing_func=self.mask_preprocessing_func))
             else:
                 loss_funcs.append(self.selected_loss)
             logger.debug("%s: %s", loss_name, loss_funcs[-1])
