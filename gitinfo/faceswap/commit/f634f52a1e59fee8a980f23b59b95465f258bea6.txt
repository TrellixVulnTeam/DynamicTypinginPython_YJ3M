commit f634f52a1e59fee8a980f23b59b95465f258bea6
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Mon Jul 6 11:00:17 2020 +0000

    lib.gui.utils - Spelling fixes
    lib.gui.custom_widgets - popup progressbar

diff --git a/lib/gui/custom_widgets.py b/lib/gui/custom_widgets.py
index 8228bb2..5d20e9a 100644
--- a/lib/gui/custom_widgets.py
+++ b/lib/gui/custom_widgets.py
@@ -8,6 +8,8 @@ import sys
 import tkinter as tk
 from tkinter import ttk, TclError
 
+import numpy as np
+
 from .utils import get_config
 
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
@@ -760,3 +762,118 @@ class MultiOption(ttk.Checkbutton):  # pylint: disable=too-many-ancestors
         state = self._value in self._master_list
         logger.trace("Setting '%s' to %s", self._value, state)
         self._tk_var.set(state)
+
+
+class PopupProgress(tk.Toplevel):
+    """ A simple pop up progress bar that appears of the center of the root window.
+
+    When this is called, the root will be disabled until the :func:`close` method is called.
+
+    Parameters
+    ----------
+    title: str
+        The title to appear above the progress bar
+    total: int or float
+        The total count of items for the progress bar
+
+    Example
+    -------
+    >>> total = 100
+    >>> progress = PopupProgress("My title...", total)
+    >>> for i in range(total):
+    >>>     progress.update(1)
+    >>> progress.close()
+    """
+    def __init__(self, title, total):
+        super().__init__()
+        self._total = total
+        if platform.system() == "Darwin":  # For Mac OS
+            self.tk.call("::tk::unsupported::MacWindowStyle",
+                         "style", self._w,  # pylint:disable=protected-access
+                         "help", "none")
+        # Leaves only the label and removes the app window
+        self.wm_overrideredirect(True)
+        self.transient()
+
+        self._lbl_title = self._set_title(title)
+        self._progress_bar = self._get_progress_bar()
+
+        offset = np.array((self.master.winfo_rootx(), self.master.winfo_rooty()))
+        # TODO find way to get dimensions of the pop up without it flicking onto the screen
+        self.update_idletasks()
+        center = np.array((
+            (self.master.winfo_width() // 2) - (self.winfo_width() // 2),
+            (self.master.winfo_height() // 2) - (self.winfo_height() // 2))) + offset
+        self.wm_geometry("+{}+{}".format(*center))
+        get_config().set_cursor_busy()
+        self.grab_set()
+
+    @property
+    def progress_bar(self):
+        """ :class:`tkinter.ttk.Progressbar`: The progress bar object within the pop up window. """
+        return self._progress_bar
+
+    def _set_title(self, title):
+        """ Set the initial title of the pop up progress bar.
+
+        Parameters
+        ----------
+        title: str
+            The title to appear above the progress bar
+
+        Returns
+        -------
+        :class:`tkinter.ttk.Label`
+            The heading label for the progress bar
+        """
+        frame = ttk.Frame(self)
+        frame.pack(side=tk.TOP, padx=5, pady=5)
+        lbl = ttk.Label(frame, text=title)
+        lbl.pack(side=tk.TOP, pady=(5, 0), expand=True, fill=tk.X)
+        return lbl
+
+    def _get_progress_bar(self):
+        """ Set up the progress bar with the supplied total.
+
+        Returns
+        -------
+        :class:`tkinter.ttk.Progressbar`
+            The configured progress bar for the pop up window
+        """
+        frame = ttk.Frame(self)
+        frame.pack(side=tk.BOTTOM, padx=5, pady=(0, 5))
+        pbar = ttk.Progressbar(frame,
+                               length=400,
+                               maximum=self._total,
+                               mode="determinate")
+        pbar.pack(side=tk.LEFT)
+        return pbar
+
+    def step(self, amount):
+        """ Increment the progress bar.
+
+        Parameters
+        ----------
+        amount: int or float
+            The amount to increment the progress bar by
+        """
+        self._progress_bar.step(amount)
+        self._progress_bar.update_idletasks()
+
+    def stop(self):
+        """ Stop the progress bar, re-enable the root window and destroy the pop up window. """
+        self._progress_bar.stop()
+        get_config().set_cursor_default()
+        self.grab_release()
+        self.destroy()
+
+    def update_title(self, title):
+        """ Update the title that displays above the progress bar.
+
+        Parameters
+        ----------
+        title: str
+            The title to appear above the progress bar
+        """
+        self._lbl_title.config(text=title)
+        self._lbl_title.update_idletasks()
diff --git a/lib/gui/project.py b/lib/gui/project.py
index c0bdb02..20ba01c 100644
--- a/lib/gui/project.py
+++ b/lib/gui/project.py
@@ -385,7 +385,7 @@ class _GuiSession():  # pylint:disable=too-few-public-methods
         cfgfile = self._file_handler("save",
                                      "config_{}".format(session_type),
                                      title=title,
-                                     initialdir=self._dirname).retfile
+                                     initial_folder=self._dirname).retfile
         if not cfgfile:
             logger.debug("No filename provided. session_type: '%s'", session_type)
             return False
@@ -851,7 +851,7 @@ class Project(_GuiSession):
         cfgfile = self._file_handler("save",
                                      "config_project",
                                      title="New Project...",
-                                     initialdir=self._basename).retfile
+                                     initial_folder=self._basename).retfile
         if not cfgfile:
             logger.debug("No filename selected")
             return
diff --git a/lib/gui/utils.py b/lib/gui/utils.py
index e9dad56..31adfad 100644
--- a/lib/gui/utils.py
+++ b/lib/gui/utils.py
@@ -86,20 +86,21 @@ class FileHandler():  # pylint:disable=too-few-public-methods
 
     Parameters
     ----------
-    handletype: ['open', 'save', 'filename', 'filename_multi', 'savefilename', 'context']
+    handle_type: ['open', 'save', 'filename', 'filename_multi', 'savefilename', 'context', `dir`]
         The type of file dialog to return. `open` and `save` will perform the open and save actions
         and return the file. `filename` returns the filename from an `open` dialog.
         `filename_multi` allows for multi-selection of files and returns a list of files selected.
         `savefilename` returns the filename from a `save as` dialog. `context` is a context
-        sensitive parameter that returns a certain dialog based on the current options
-    filetype: ['default', 'alignments', 'config_project', 'config_task', 'config_all', 'csv', \
+        sensitive parameter that returns a certain dialog based on the current options. `dir` asks
+        for a folder location.
+    file_type: ['default', 'alignments', 'config_project', 'config_task', 'config_all', 'csv', \
                'image', 'ini', 'state', 'log', 'video']
         The type of file that this dialog is for. `default` allows selection of any files. Other
         options limit the file type selection
     title: str, optional
         The title to display on the file dialog. If `None` then the default title will be used.
         Default: ``None``
-    initialdir: str, optional
+    initial_folder: str, optional
         The folder to initially open with the file dialog. If `None` then tkinter will decide.
         Default: ``None``
     command: str, optional
@@ -123,15 +124,20 @@ class FileHandler():  # pylint:disable=too-few-public-methods
     '/path/to/selected/video.mp4'
     """
 
-    def __init__(self, handletype, filetype, title=None, initialdir=None, command=None,
+    def __init__(self, handle_type, file_type, title=None, initial_folder=None, command=None,
                  action=None, variable=None):
-        logger.debug("Initializing %s: (Handletype: '%s', filetype: '%s', title: '%s', "
-                     "initialdir: '%s, 'command: '%s', action: '%s', variable: %s)",
-                     self.__class__.__name__, handletype, filetype, title, initialdir, command,
-                     action, variable)
-        self._handletype = handletype
+        logger.debug("Initializing %s: (handle_type: '%s', file_type: '%s', title: '%s', "
+                     "initial_folder: '%s, 'command: '%s', action: '%s', variable: %s)",
+                     self.__class__.__name__, handle_type, file_type, title, initial_folder,
+                     command, action, variable)
+        self._handletype = handle_type
         self._defaults = self._set_defaults()
-        self._kwargs = self._set_kwargs(title, initialdir, filetype, command, action, variable)
+        self._kwargs = self._set_kwargs(title,
+                                        initial_folder,
+                                        file_type,
+                                        command,
+                                        action,
+                                        variable)
         self.retfile = getattr(self, "_{}".format(self._handletype.lower()))()
         logger.debug("Initialized %s", self.__class__.__name__)
 
