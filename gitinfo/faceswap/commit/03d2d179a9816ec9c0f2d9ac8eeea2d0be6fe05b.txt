commit 03d2d179a9816ec9c0f2d9ac8eeea2d0be6fe05b
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Thu Jul 9 11:41:03 2020 +0000

    scripts.extract - Save jpg thumbnails to alignments file

diff --git a/lib/image.py b/lib/image.py
index 0393c1c..8d25b83 100644
--- a/lib/image.py
+++ b/lib/image.py
@@ -427,6 +427,32 @@ def encode_image_with_hash(image, extension):
     return image_hash, encoded_image
 
 
+def generate_thumbnail(image, size=80, quality=60):
+    """ Generate a jpg thumbnail for the given image.
+
+    Parameters
+    ----------
+    image: :class:`numpy.ndarray`
+        Three channel BGR image to convert to a jpg thumbnail
+    size: int
+        The width and height, in pixels, that the thumbnail should be generated at
+    quality: int
+        The jpg quality setting to use
+
+    Returns
+    :class:`numpy.ndarray`
+        The given image encoded to a jpg at the given size and quality settings
+    """
+    logger.trace("Input shape: %s, size: %s, quality: %s", image.shape, size, quality)
+    orig_size = image.shape[0]
+    if orig_size != size:
+        interp = cv2.INTER_AREA if orig_size > size else cv2.INTER_CUBIC
+        image = cv2.resize(image, (size, size), interpolation=interp)
+    retval = cv2.imencode(".jpg", image, [cv2.IMWRITE_JPEG_QUALITY, quality])[1]
+    logger.trace("Output shape: %s", retval.shape)
+    return retval
+
+
 def batch_convert_color(batch, colorspace):
     """ Convert a batch of images from one color space to another.
 
diff --git a/scripts/extract.py b/scripts/extract.py
index 40880f3..69b96fe 100644
--- a/scripts/extract.py
+++ b/scripts/extract.py
@@ -7,7 +7,7 @@ import sys
 
 from tqdm import tqdm
 
-from lib.image import encode_image_with_hash, ImagesLoader, ImagesSaver
+from lib.image import encode_image_with_hash, generate_thumbnail, ImagesLoader, ImagesSaver
 from lib.multithreading import MultiThread
 from lib.utils import get_folder
 from plugins.extract.pipeline import Extractor, ExtractMedia
@@ -236,7 +236,8 @@ class Extract():  # pylint:disable=too-few-public-methods
     def _output_processing(self, extract_media, size):
         """ Prepare faces for output
 
-        Loads the aligned face, perform any processing actions and verify the output.
+        Loads the aligned face, generate the thumbnail, perform any processing actions and verify
+        the output.
 
         Parameters
         ----------
@@ -247,7 +248,7 @@ class Extract():  # pylint:disable=too-few-public-methods
         """
         for face in extract_media.detected_faces:
             face.load_aligned(extract_media.image, size=size)
-
+            face.thumbnail = generate_thumbnail(face.aligned_face, size=80, quality=60)
         self._post_process.do_actions(extract_media)
         extract_media.remove_image()
 
