commit c2063909e3614d0ae8a7ac61aaf5cb43bcf28dc2
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Sat Jul 6 10:47:14 2019 +0000

    Add jobs parameter to convert for limiting parallel processes

diff --git a/lib/cli.py b/lib/cli.py
index bc06e0d..66855f2 100644
--- a/lib/cli.py
+++ b/lib/cli.py
@@ -797,6 +797,21 @@ class ConvertArgs(ExtractConvertArgs):
                               "help": "Scale the final output frames by this amount. 100%% will "
                                       "output the frames at source dimensions. 50%% at half size "
                                       "200%% at double size"})
+        argument_list.append({"opts": ("-j", "--jobs"),
+                              "dest": "jobs",
+                              "action": Slider,
+                              "type": int,
+                              "default": 0,
+                              "min_max": (0, 40),
+                              "rounding": 1,
+                              "help": "The maximum number of parallel processes for performing "
+                                      "conversion. Converting images is system RAM heavy so it is "
+                                      "possible to run out of memory if you have a lot of "
+                                      "processes and not enough RAM to accomodate them all. "
+                                      "Setting this to 0 will use the maximum available. No "
+                                      "matter what you set this to, it will never attempt to use "
+                                      "more processes than are available on your system. If "
+                                      "singleprocess is enabled this setting will be ignored."})
         argument_list.append({"opts": ("-g", "--gpus"),
                               "type": int,
                               "action": Slider,
diff --git a/scripts/convert.py b/scripts/convert.py
index dc915e2..6dfcceb 100644
--- a/scripts/convert.py
+++ b/scripts/convert.py
@@ -17,7 +17,7 @@ from lib.faces_detect import DetectedFace
 from lib.gpu_stats import GPUStats
 from lib.multithreading import MultiThread, PoolProcess, total_cpus
 from lib.queue_manager import queue_manager, QueueEmpty
-from lib.utils import get_folder, get_image_paths, hash_image_file
+from lib.utils import FaceswapError, get_folder, get_image_paths, hash_image_file
 from plugins.extract.pipeline import Extractor
 from plugins.plugin_loader import PluginLoader
 
@@ -55,11 +55,11 @@ class Convert():
 
     @property
     def queue_size(self):
-        """ Set q-size to double number of cpus available """
+        """ Set 16 for singleprocess otherwise 32 """
         if self.args.singleprocess:
-            retval = 2
+            retval = 16
         else:
-            retval = total_cpus() * 2
+            retval = 32
         logger.debug(retval)
         return retval
 
@@ -68,6 +68,8 @@ class Convert():
         """ return the maximum number of pooled processes to use """
         if self.args.singleprocess:
             retval = 1
+        elif self.args.jobs > 0:
+            retval = min(self.args.jobs, total_cpus(), self.images.images_found)
         else:
             retval = min(total_cpus(), self.images.images_found)
         retval = 1 if retval == 0 else retval
@@ -95,15 +97,23 @@ class Convert():
     def process(self):
         """ Process the conversion """
         logger.debug("Starting Conversion")
-        # queue_manager.debug_monitor(3)
-        self.convert_images()
-        self.disk_io.save_thread.join()
-        queue_manager.terminate_queues()
-
-        Utils.finalize(self.images.images_found,
-                       self.predictor.faces_count,
-                       self.predictor.verify_output)
-        logger.debug("Completed Conversion")
+        queue_manager.debug_monitor(5)
+        try:
+            self.convert_images()
+            self.disk_io.save_thread.join()
+            queue_manager.terminate_queues()
+
+            Utils.finalize(self.images.images_found,
+                           self.predictor.faces_count,
+                           self.predictor.verify_output)
+            logger.debug("Completed Conversion")
+        except MemoryError as err:
+            msg = ("Faceswap ran out of RAM running convert. Conversion is very system RAM "
+                   "heavy, so this can happen in certain circumstances when you have a lot of "
+                   "cpus but not enough RAM to support them all."
+                   "\nYou should lower the number of processes in use by either setting the "
+                   "'singleprocess' flag (-sp) or lowering the number of parallel jobs (-j).")
+            raise FaceswapError(msg) from err
 
     def convert_images(self):
         """ Convert the images """
