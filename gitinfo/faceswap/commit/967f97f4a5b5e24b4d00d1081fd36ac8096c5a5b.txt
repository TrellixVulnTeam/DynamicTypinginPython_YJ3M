commit 967f97f4a5b5e24b4d00d1081fd36ac8096c5a5b
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Thu Aug 29 18:31:34 2019 +0000

    Minor extract fixups

diff --git a/plugins/extract/detect/_base.py b/plugins/extract/detect/_base.py
index 08ec612..56f193b 100755
--- a/plugins/extract/detect/_base.py
+++ b/plugins/extract/detect/_base.py
@@ -21,7 +21,7 @@ from io import StringIO
 import cv2
 
 from lib.gpu_stats import GPUStats
-from lib.utils import deprecation_warning, rotate_landmarks, GetModel
+from lib.utils import rotate_landmarks, GetModel
 from plugins.extract._config import Config
 
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
@@ -34,7 +34,7 @@ def get_config(plugin_name, configfile=None):
 
 class Detector():
     """ Detector object """
-    def __init__(self, loglevel, configfile=None,
+    def __init__(self, loglevel, configfile=None,  # pylint:disable=too-many-arguments
                  git_model_id=None, model_filename=None, rotation=None, min_size=0):
         logger.debug("Initializing %s: (loglevel: %s, configfile: %s, git_model_id: %s, "
                      "model_filename: %s, rotation: %s, min_size: %s)",
@@ -169,7 +169,7 @@ class Detector():
         return retval
 
     # <<< DETECTION IMAGE COMPILATION METHODS >>> #
-    def compile_detection_image(self, input_image,
+    def compile_detection_image(self, input_image,  # pylint:disable=too-many-arguments
                                 is_square=False, scale_up=False, to_rgb=False,
                                 to_grayscale=False, pad_to=None):
         """ Compile the detection image """
@@ -218,8 +218,8 @@ class Detector():
         if scale != 1.0:
             dims = (int(width * scale), int(height * scale))
             if scale < 1.0:
-                logger.verbose("Resizing image from %sx%s to %s. Scale=%s",
-                               width, height, "x".join(str(i) for i in dims), scale)
+                logger.debug("Resizing image from %sx%s to %s. Scale=%s",
+                             width, height, "x".join(str(i) for i in dims), scale)
             image = cv2.resize(image, dims, interpolation=interpln)
         if pad_to:
             image = Detector.pad_image(image, pad_to)
@@ -227,15 +227,16 @@ class Detector():
 
     @staticmethod
     def pad_image(image, target):
+        """ Pad an image to a square """
         height, width = image.shape[:2]
         if width < target[0] or height < target[1]:
             pad_l = (target[0] - width) // 2
             pad_r = (target[0] - width) - pad_l
             pad_t = (target[1] - height) // 2
             pad_b = (target[1] - height) - pad_t
-            img = cv2.copyMakeBorder(
+            img = cv2.copyMakeBorder(  # pylint:disable=no-member
                 image, pad_t, pad_b, pad_l, pad_r,
-                cv2.BORDER_CONSTANT, (0, 0, 0)
+                cv2.BORDER_CONSTANT, (0, 0, 0)  # pylint:disable=no-member
             )
             return img
         return image
