commit d8843abe2e91753581defefada257ef61fd5b2a4
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Sat Mar 9 12:51:09 2019 +0000

    Better aligner error handling on initialization

diff --git a/plugins/extract/align/_base.py b/plugins/extract/align/_base.py
index a0c35d1..baf13a1 100644
--- a/plugins/extract/align/_base.py
+++ b/plugins/extract/align/_base.py
@@ -37,6 +37,7 @@ class Aligner():
         self.cachepath = os.path.join(os.path.dirname(__file__), ".cache")
         self.extract = Extract()
         self.init = None
+        self.error = None
 
         # The input and output queues for the plugin.
         # See lib.queue_manager.QueueManager for getting queues
@@ -66,6 +67,7 @@ class Aligner():
         logger.debug("_base initialize %s: (PID: %s, args: %s, kwargs: %s)",
                      self.__class__.__name__, os.getpid(), args, kwargs)
         self.init = kwargs["event"]
+        self.error = kwargs["error"]
         self.queues["in"] = kwargs["in_queue"]
         self.queues["out"] = kwargs["out_queue"]
 
diff --git a/plugins/extract/align/dlib.py b/plugins/extract/align/dlib.py
index 5e8d367..3fd97e2 100644
--- a/plugins/extract/align/dlib.py
+++ b/plugins/extract/align/dlib.py
@@ -21,12 +21,16 @@ class Align(Aligner):
 
     def initialize(self, *args, **kwargs):
         """ Initialization tasks to run prior to alignments """
-        super().initialize(*args, **kwargs)
-        logger.info("Initializing Dlib Pose Predictor...")
-        logger.debug("dlib initialize: (args: %s kwargs: %s)", args, kwargs)
-        self.model = dlib.shape_predictor(self.model_path)  # pylint: disable=c-extension-no-member
-        self.init.set()
-        logger.info("Initialized Dlib Pose Predictor.")
+        try:
+            super().initialize(*args, **kwargs)
+            logger.info("Initializing Dlib Pose Predictor...")
+            logger.debug("dlib initialize: (args: %s kwargs: %s)", args, kwargs)
+            self.model = dlib.shape_predictor(self.model_path)  # pylint: disable=c-extension-no-member
+            self.init.set()
+            logger.info("Initialized Dlib Pose Predictor.")
+        except Exception as err:
+            self.error.set()
+            raise err
 
     def align(self, *args, **kwargs):
         """ Perform alignments on detected faces """
diff --git a/plugins/extract/align/fan.py b/plugins/extract/align/fan.py
index 8da9269..56c3183 100644
--- a/plugins/extract/align/fan.py
+++ b/plugins/extract/align/fan.py
@@ -30,22 +30,26 @@ class Align(Aligner):
 
     def initialize(self, *args, **kwargs):
         """ Initialization tasks to run prior to alignments """
-        super().initialize(*args, **kwargs)
-        logger.info("Initializing Face Alignment Network...")
-        logger.debug("fan initialize: (args: %s kwargs: %s)", args, kwargs)
-
-        _, _, vram_total = self.get_vram_free()
-
-        if vram_total <= self.vram:
-            tf_ratio = 1.0
-        else:
-            tf_ratio = self.vram / vram_total
-        logger.verbose("Reserving %sMB for face alignments", self.vram)
-
-        self.model = FAN(self.model_path, ratio=tf_ratio)
-
-        self.init.set()
-        logger.info("Initialized Face Alignment Network.")
+        try:
+            super().initialize(*args, **kwargs)
+            logger.info("Initializing Face Alignment Network...")
+            logger.debug("fan initialize: (args: %s kwargs: %s)", args, kwargs)
+
+            _, _, vram_total = self.get_vram_free()
+
+            if vram_total <= self.vram:
+                tf_ratio = 1.0
+            else:
+                tf_ratio = self.vram / vram_total
+            logger.verbose("Reserving %sMB for face alignments", self.vram)
+
+            self.model = FAN(self.model_path, ratio=tf_ratio)
+
+            self.init.set()
+            logger.info("Initialized Face Alignment Network.")
+        except Exception as err:
+            self.error.set()
+            raise err
 
     def align(self, *args, **kwargs):
         """ Perform alignments on detected faces """
diff --git a/scripts/extract.py b/scripts/extract.py
index 40f5442..8a93e18 100644
--- a/scripts/extract.py
+++ b/scripts/extract.py
@@ -354,6 +354,7 @@ class Plugins():
 
         self.process_align = SpawnProcess(self.aligner.run, **kwargs)
         event = self.process_align.event
+        error = self.process_align.error
         self.process_align.start()
 
         # Wait for Aligner to take it's VRAM
@@ -361,10 +362,15 @@ class Plugins():
         # up to 3-4 minutes, hence high timeout.
         # TODO investigate why this is and fix if possible
         for mins in reversed(range(5)):
-            event.wait(60)
+            for seconds in range(60):
+                event.wait(seconds)
+                if event.is_set():
+                    break
+                if error.is_set():
+                    break
             if event.is_set():
                 break
-            if mins == 0:
+            if mins == 0 or error.is_set():
                 raise ValueError("Error initializing Aligner")
             logger.info("Waiting for Aligner... Time out in %s minutes", mins)
 
