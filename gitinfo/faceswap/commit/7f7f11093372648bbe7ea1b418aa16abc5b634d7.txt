commit 7f7f11093372648bbe7ea1b418aa16abc5b634d7
Author: Hidde Jansen <Ganonmaster@users.noreply.github.com>
Date:   Fri Dec 22 01:52:47 2017 +0100

    Command line options for convert.py (#13)
    
    * Rewrite extract.py, make code re-usable for conversion too.
    
    * Add convert.py, adding command line options

diff --git a/convert.py b/convert.py
new file mode 100644
index 0000000..bf43225
--- /dev/null
+++ b/convert.py
@@ -0,0 +1,28 @@
+import cv2
+from lib.cli import DirectoryProcessor
+from pathlib import Path
+from lib.faces_process import convert_one_image
+from lib.faces_detect import crop_faces
+
+
+class ConvertImage(DirectoryProcessor):
+    filename = ''
+
+    def process_image(self, filename):
+        try:
+            image = cv2.imread(filename)
+            for (idx, face) in enumerate(crop_faces(image)):
+                if idx > 0 and self.arguments.verbose:
+                    print('- Found more than one face!')
+                    self.verify_output = True
+
+                new_face = convert_one_image(cv2.resize(face.image, (256, 256)))
+                image[slice(face.y, face.y + face.h), slice(face.x, face.x + face.w)] = cv2.resize(new_face, (face.w, face.h))
+                self.faces_detected = self.faces_detected + 1
+            output_file = self.output_dir / Path(filename).name
+            cv2.imwrite(str(output_file), image)
+        except Exception as e:
+            print('Failed to extract from image: {}. Reason: {}'.format(filename, e))
+
+
+extract_cli = ConvertImage(description='Swaps faces for images in a directory')
diff --git a/extract.py b/extract.py
index 56a4dd5..f819238 100644
--- a/extract.py
+++ b/extract.py
@@ -1,78 +1,15 @@
-import argparse
 import cv2
+from lib.cli import DirectoryProcessor
 from pathlib import Path
-import os
 
-from lib.utils import get_image_paths, get_folder, FullPaths
-from lib.faces_detect import crop_faces
 
-parser = argparse.ArgumentParser(
-    description='Extracts faces from a collection of pictures and saves them to a separate directory',
-    epilog="Questions and feedback: https://github.com/deepfakes/faceswap-playground"
-)
+class ExtractTrainingData(DirectoryProcessor):
+    def process_face(self, face, index, filename):
+        resized_image = cv2.resize(face.image, (256, 256))
+        output_file = self.output_dir / Path(filename).stem
+        cv2.imwrite(str(output_file) + str(index) + Path(filename).suffix,
+                    resized_image)
 
-parser.add_argument('-i', '--input-dir',
-                    action=FullPaths,
-                    dest="input_dir",
-                    default="src",
-                    help="Input directory. A directory containing the files \
-                    you wish to extract faces from. Defaults to 'src'")
-parser.add_argument('-o', '--output-dir',
-                    action=FullPaths,
-                    dest="output_dir",
-                    default="extract",
-                    help="Output directory. This is where the cropped faces will \
-                    be stored. Defaults to 'extract'")
-parser.add_argument('-v', action="store_true", dest="verbose", default=False, help="Show verbose output")
 
-arguments = parser.parse_args()
-
-print("Input Directory: {}".format(arguments.input_dir))
-print("Output Directory: {}".format(arguments.output_dir))
-print('Starting, this may take a while...')
-
-output_dir = get_folder(arguments.output_dir)
-try:
-    images_SRC = get_image_paths(arguments.input_dir)
-except FileNotFoundError:
-    print('Input directory not found. Please ensure it exists.')
-    exit(1)
-
-verify_output = False
-images_found = len(images_SRC)
-images_processed = 0
-faces_detected = 0
-
-for fn in images_SRC:
-    if arguments.verbose:
-        print('Processing image: {}'.format(os.path.basename(fn)))
-
-    try:
-        image = cv2.imread(fn)
-        for (idx, face) in enumerate(crop_faces(image)):
-            if idx > 0 and arguments.verbose:
-                print('- Found more than one face!')
-                verify_output = True
-
-            # resize and save
-            final = cv2.resize(face.image, (256, 256))
-            output_file = output_dir / Path(fn).stem
-            cv2.imwrite(str(output_file) + str(idx) + Path(fn).suffix, final)
-            faces_detected = faces_detected + 1
-
-        images_processed = images_processed + 1
-    except Exception as e:
-        print('Failed to extract from image: {}. reason: {}'.format(fn,e))
-
-print('-------------------------')
-print('Images found:        {}'.format(images_found))
-print('Images processed:    {}'.format(images_processed))
-print('Faces detected:      {}'.format(faces_detected))
-print('-------------------------')
-
-if verify_output:
-    print('Note:')
-    print('Multiple faces were detected in one or more pictures.')
-    print('Please double check your results before you start training.')
-    print('-------------------------')
-print('Done!')
+extract_cli = ExtractTrainingData(description='Extracts faces from a collection of pictures \
+    and saves them to a separate directory')
diff --git a/lib/cli.py b/lib/cli.py
new file mode 100644
index 0000000..41bf9a7
--- /dev/null
+++ b/lib/cli.py
@@ -0,0 +1,116 @@
+import argparse
+import os
+import cv2
+
+from lib.utils import get_image_paths, get_folder
+from lib.faces_detect import crop_faces
+
+
+class FullPaths(argparse.Action):
+    """Expand user- and relative-paths"""
+    def __call__(self, parser, namespace, values, option_string=None):
+        setattr(namespace, self.dest, os.path.abspath(os.path.expanduser(values)))
+
+
+class DirectoryProcessor():
+    '''
+    Abstract class that processes a directory of images
+    and writes output to the specified folder
+    '''
+    arguments = None
+
+    input_dir = None
+    output_dir = None
+
+    verify_output = False
+    images_found = 0
+    images_processed = 0
+    faces_detected = 0
+
+    def __init__(self, description='default'):
+        print('Initializing')
+        self.parse_arguments(description)
+
+        print("Input Directory: {}".format(self.arguments.input_dir))
+        print("Output Directory: {}".format(self.arguments.output_dir))
+        print('Starting, this may take a while...')
+
+        self.output_dir = get_folder(self.arguments.output_dir)
+        try:
+            self.input_dir = get_image_paths(self.arguments.input_dir)
+        except FileNotFoundError:
+            print('Input directory not found. Please ensure it exists.')
+            exit(1)
+
+        self.images_found = len(self.input_dir)
+
+        for filename in self.input_dir:
+            if self.arguments.verbose:
+                print('Processing: {}'.format(os.path.basename(filename)))
+
+            self.process_image(filename)
+            self.images_processed = self.images_processed + 1
+
+        self.finalize()
+
+    def parse_arguments(self, description):
+        parser = argparse.ArgumentParser(
+            description=description,
+            epilog="Questions and feedback: \
+            https://github.com/deepfakes/faceswap-playground"
+        )
+
+        parser.add_argument('-i', '--input-dir',
+                            action=FullPaths,
+                            dest="input_dir",
+                            default="input",
+                            help="Input directory. A directory containing the files \
+                            you wish to process. Defaults to 'input'")
+        parser.add_argument('-o', '--output-dir',
+                            action=FullPaths,
+                            dest="output_dir",
+                            default="output",
+                            help="Output directory. This is where the converted files will \
+                                be stored. Defaults to 'output'")
+        parser.add_argument('-v', '--verbose',
+                            action="store_true",
+                            dest="verbose",
+                            default=False,
+                            help="Show verbose output")
+        parser = self.add_optional_arguments(parser)
+        self.arguments = parser.parse_args()
+
+    def add_optional_arguments(self, parser):
+        # Override this for custom arguments
+        return parser
+
+    def process_image(self, filename):
+        try:
+            image = cv2.imread(filename)
+            for (idx, face) in enumerate(crop_faces(image)):
+                if idx > 0 and self.arguments.verbose:
+                    print('- Found more than one face!')
+                    self.verify_output = True
+
+                self.process_face(face, idx, filename)
+                self.faces_detected = self.faces_detected + 1
+        except Exception as e:
+            print('Failed to extract from image: {}. Reason: {}'.format(filename, e))
+
+    def process_face(self, face, index, filename):
+        # implement your face processing!
+        raise NotImplementedError()
+
+    def finalize(self):
+        print('-------------------------')
+        print('Images found:        {}'.format(self.images_found))
+        print('Images processed:    {}'.format(self.images_processed))
+        print('Faces detected:      {}'.format(self.faces_detected))
+        print('-------------------------')
+
+        if self.verify_output:
+            print('Note:')
+            print('Multiple faces were detected in one or more pictures.')
+            print('Double check your results.')
+            print('-------------------------')
+        print('Done!')
diff --git a/lib/faces_detect.py b/lib/faces_detect.py
index b98a599..8e1e655 100644
--- a/lib/faces_detect.py
+++ b/lib/faces_detect.py
@@ -1,5 +1,5 @@
 import face_recognition
-from DetectedFace import DetectedFace
+from .DetectedFace import DetectedFace
 
 def crop_faces(frame):
     face_locations = face_recognition.face_locations(frame)
diff --git a/lib/utils.py b/lib/utils.py
index 0fa6df9..719bd10 100644
--- a/lib/utils.py
+++ b/lib/utils.py
@@ -1,18 +1,10 @@
 import cv2
 import numpy
-import argparse
-import os
 
 from pathlib import Path
 from scandir import scandir
 
 
-class FullPaths(argparse.Action):
-    """Expand user- and relative-paths"""
-    def __call__(self, parser, namespace, values, option_string=None):
-        setattr(namespace, self.dest, os.path.abspath(os.path.expanduser(values)))
-
-
 def get_folder(path):
     output_dir = Path(path)
     # output_dir.mkdir(parents=True, exist_ok=True)
