commit ff10868476170d21030b6740459a94117a58a16e
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Sun Oct 28 16:57:51 2018 +0000

    Increase FAN timeout. Fallback sort and manual align to Dlib for CPU

diff --git a/plugins/extract/align/fan.py b/plugins/extract/align/fan.py
index 2c99554..a717130 100644
--- a/plugins/extract/align/fan.py
+++ b/plugins/extract/align/fan.py
@@ -39,7 +39,7 @@ class Align(Aligner):
             self.queues["out"].put("No Graphics Card Detected! FAN is not "
                                    "supported on CPU. Use another aligner.")
             self.init.set()
-            return
+            exit(0)
 
         if vram_total <= self.vram:
             tf_ratio = 1.0
@@ -164,6 +164,7 @@ class Align(Aligner):
         new_img[new_y[0] - 1:new_y[1],
                 new_x[0] - 1:new_x[1]] = image[old_y[0] - 1:old_y[1],
                                                old_x[0] - 1:old_x[1], :]
+        # pylint: disable=no-member
         new_img = cv2.resize(new_img,
                              dsize=(int(resolution), int(resolution)),
                              interpolation=cv2.INTER_LINEAR)
@@ -212,6 +213,7 @@ class FAN():
 
     def load_graph(self):
         """ Load the tensorflow Model and weights """
+        # pylint: disable=not-context-manager
         if self.verbose:
             print("Initializing Face Alignment Network model...")
 
@@ -225,6 +227,7 @@ class FAN():
 
     def set_session(self, vram_ratio):
         """ Set the TF Session and initialize """
+        # pylint: disable=not-context-manager, no-member
         placeholder = np.zeros((1, 3, 256, 256))
         with self.graph.as_default():
             config = tf.ConfigProto()
diff --git a/scripts/extract.py b/scripts/extract.py
index ae55e82..70e81a8 100644
--- a/scripts/extract.py
+++ b/scripts/extract.py
@@ -98,6 +98,7 @@ class Extract():
             out_filename = "{}_{}{}".format(str(output_file),
                                             str(idx),
                                             Path(filename).suffix)
+            # pylint: disable=no-member
             cv2.imwrite(out_filename, resized_face)
 
     def run_extraction(self, save_thread):
@@ -295,7 +296,10 @@ class Plugins():
         align_process.in_process(self.aligner.align, **kwargs)
 
         # Wait for Aligner to take it's VRAM
-        event.wait(60)
+        # The first ever load of the model for FAN has reportedly taken
+        # up to 3-4 minutes, hence high timeout.
+        # TODO investigate why this is and fix if possible
+        event.wait(300)
         if not event.is_set():
             raise ValueError("Error inititalizing Aligner")
 
diff --git a/tools/lib_alignments/jobs_manual.py b/tools/lib_alignments/jobs_manual.py
index 6d51f0a..54ac51e 100644
--- a/tools/lib_alignments/jobs_manual.py
+++ b/tools/lib_alignments/jobs_manual.py
@@ -7,7 +7,7 @@ import cv2
 import numpy as np
 
 from lib.multithreading import SpawnProcess
-from lib.queue_manager import queue_manager
+from lib.queue_manager import queue_manager, QueueEmpty
 from plugins.plugin_loader import PluginLoader
 from . import Annotate, ExtractedFaces, Frames, Rotate
 
@@ -335,6 +335,7 @@ class Help():
 
     def render(self):
         """ Render help text to image window """
+        # pylint: disable=no-member
         image = self.background()
         display_text = self.helptext + self.compile_status()
         self.text_to_image(image, display_text)
@@ -343,6 +344,7 @@ class Help():
 
     def background(self):
         """ Create an image to hold help text """
+        # pylint: disable=no-member
         height = 880
         width = 480
         image = np.zeros((height, width, 3), np.uint8)
@@ -373,6 +375,7 @@ class Help():
     @staticmethod
     def text_to_image(image, display_text):
         """ Write out and format help text to image """
+        # pylint: disable=no-member
         pos_y = 0
         for line in display_text.split("\n"):
             if line.startswith("==="):
@@ -418,6 +421,7 @@ class Manual():
 
     def display_frames(self):
         """ Iterate through frames """
+        # pylint: disable=no-member
         is_windows = True if platform.system() == "Windows" else False
         is_conda = True if "conda" in sys.version.lower() else False
         cv2.namedWindow("Frame")
@@ -465,7 +469,7 @@ class Manual():
         Conda (tested on Windows) doesn't sppear to read the window
         state property or negative key press properly, so we arbitarily
         use another property """
-
+        # pylint: disable=no-member
         closed = False
         prop_autosize = cv2.getWindowProperty('Frame', cv2.WND_PROP_AUTOSIZE)
         prop_visible = cv2.getWindowProperty('Frame', cv2.WND_PROP_VISIBLE)
@@ -597,6 +601,7 @@ class FrameDisplay():
 
     def resize_frame(self, image):
         """ Set the displayed frame size and add state border"""
+        # pylint: disable=no-member
         height, width = image.shape[:2]
         color = self.interface.get_state_color()
         cv2.rectangle(image, (0, 0), (width - 1, height - 1),
@@ -674,6 +679,7 @@ class FacesDisplay():
 
     def build_faces_row(self, faces, size):
         """ Build a row of 4 faces """
+        # pylint: disable=no-member
         if len(faces) != 4:
             remainder = 4 - (len(faces) % self.row_length)
             for _ in range(remainder):
@@ -696,10 +702,8 @@ class MouseHandler():
         self.alignments = interface.alignments
         self.frames = interface.frames
 
-        self.extractor = {
-            "detect": PluginLoader.get_detector("manual")(verbose=verbose),
-            "align": PluginLoader.get_aligner("fan")(verbose=verbose)}
-        self.init_extractor()
+        self.extractor = dict()
+        self.init_extractor(verbose)
 
         self.mouse_state = None
         self.last_move = None
@@ -711,11 +715,8 @@ class MouseHandler():
                       "bounding_last": list(),
                       "bounding_box_orig": list()}
 
-    def init_extractor(self):
+    def init_extractor(self, verbose):
         """ Initialize FAN """
-        aligner = self.extractor["align"]
-        detector = self.extractor["detect"]
-
         in_queue = queue_manager.get_queue("in")
         align_queue = queue_manager.get_queue("align")
         out_queue = queue_manager.get_queue("out")
@@ -724,31 +725,56 @@ class MouseHandler():
                     "out_queue": align_queue}
         a_kwargs = {"in_queue": align_queue,
                     "out_queue": out_queue}
-
         detect_process = SpawnProcess()
         align_process = SpawnProcess()
-
         d_event = detect_process.event
         a_event = align_process.event
 
+        detector = PluginLoader.get_detector("manual")(verbose=verbose)
         detect_process.in_process(detector.detect_faces, **d_kwargs)
-        align_process.in_process(aligner.align, **a_kwargs)
 
-        # Wait for Aligner to take init
-        a_event.wait(60)
-        if not a_event.is_set():
-            raise ValueError("Error inititalizing Aligner")
+        for plugin in ("fan", "dlib"):
+            aligner = PluginLoader.get_aligner(plugin)(verbose=verbose)
+            align_process.in_process(aligner.align, **a_kwargs)
+
+            # Wait for Aligner to take init
+            # The first ever load of the model for FAN has reportedly taken
+            # up to 3-4 minutes, hence high timeout.
+            a_event.wait(300)
+            if not a_event.is_set():
+                if plugin == "fan":
+                    align_process.join()
+                    print("Error initializing FAN. Trying Dlib")
+                    continue
+                else:
+                    raise ValueError("Error inititalizing Aligner")
+            if plugin == "dlib":
+                break
+
+            try:
+                err = None
+                err = out_queue.get(True, 1)
+            except QueueEmpty:
+                pass
+            if not err:
+                break
+            align_process.join()
+            print("Error initializing FAN. Trying Dlib")
 
         d_event.wait(10)
         if not d_event.is_set():
             raise ValueError("Error inititalizing Detector")
 
+        self.extractor["detect"] = detector
+        self.extractor["align"] = aligner
+
     def on_event(self, event, x, y, flags, param):
         """ Handle the mouse events """
+        # pylint: disable=no-member
         if self.interface.get_edit_mode() != "Edit":
             return
-        elif not self.mouse_state and event not in (cv2.EVENT_LBUTTONDOWN,
-                                                    cv2.EVENT_MBUTTONDOWN):
+        if not self.mouse_state and event not in (cv2.EVENT_LBUTTONDOWN,
+                                                  cv2.EVENT_MBUTTONDOWN):
             return
 
         self.initialize()
diff --git a/tools/sort.py b/tools/sort.py
index f3838e7..c2e6c6b 100644
--- a/tools/sort.py
+++ b/tools/sort.py
@@ -18,7 +18,7 @@ from lib.cli import FullHelpArgumentParser
 from lib import Serializer
 from lib.faces_detect import DetectedFace
 from lib.multithreading import SpawnProcess
-from lib.queue_manager import queue_manager
+from lib.queue_manager import queue_manager, QueueEmpty
 from plugins.plugin_loader import PluginLoader
 
 from . import cli
@@ -26,6 +26,7 @@ from . import cli
 
 class Sort():
     """ Sorts folders of faces based on input criteria """
+    # pylint: disable=no-member
     def __init__(self, arguments):
         self.args = arguments
         self.changes = None
@@ -80,16 +81,39 @@ class Sort():
     @staticmethod
     def launch_aligner():
         """ Load the aligner plugin to retrieve landmarks """
-        aligner = PluginLoader.get_aligner("fan")()
+        out_queue = queue_manager.get_queue("out")
         kwargs = {"in_queue": queue_manager.get_queue("in"),
-                  "out_queue": queue_manager.get_queue("out")}
+                  "out_queue": out_queue}
         process = SpawnProcess()
         event = process.event
 
-        process.in_process(aligner.align, **kwargs)
-        event.wait(60)
-        if not event.is_set():
-            raise ValueError("Error inititalizing Aligner")
+        for plugin in ("fan", "dlib"):
+            aligner = PluginLoader.get_aligner(plugin)()
+            process.in_process(aligner.align, **kwargs)
+            # Wait for Aligner to take init
+            # The first ever load of the model for FAN has reportedly taken
+            # up to 3-4 minutes, hence high timeout.
+            event.wait(300)
+
+            if not event.is_set():
+                if plugin == "fan":
+                    process.join()
+                    print("Error initializing FAN. Trying Dlib")
+                    continue
+                else:
+                    raise ValueError("Error inititalizing Aligner")
+            if plugin == "dlib":
+                return
+
+            try:
+                err = None
+                err = out_queue.get(True, 1)
+            except QueueEmpty:
+                pass
+            if not err:
+                break
+            process.join()
+            print("Error initializing FAN. Trying Dlib")
 
     @staticmethod
     def alignment_dict(image):
