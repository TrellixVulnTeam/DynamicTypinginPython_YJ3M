commit 9b58b35183084be661f8402af6e3d1e573817805
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Wed Apr 25 08:20:33 2018 +0100

    Cli/Scripts Refactor (#374)
    
    * Refactor for PEP 8 and split process function
    
    * Remove backwards compatibility for skip frames
    
    * Split optional functions into own class. Make functions more modular
    
    * train.py - Fix write image bug. Make more modular
    
    * convert.py: Extract alignments from frames if they don't exist
    
    * BugFix: SkipExisting broken since face name refactor
    
    * train.py - Semi-fix for hang on reaching target iteration. Now quits on preview mode
    Make tensorflow / system warning less verbose
    
    * Final bugfixes
    
    * Add 'all' back in for selectable detectors
    
    * Final minor tweaks

diff --git a/lib/cli.py b/lib/cli.py
index bdea9d4..7336223 100644
--- a/lib/cli.py
+++ b/lib/cli.py
@@ -135,7 +135,7 @@ class ExtractConvertArgs(FaceSwapArgs):
         argument_list.append({"opts": ("-D", "--detector"),
                               "type": str,
                               # case sensitive because this is used to load a plugin.
-                              "choices": ("hog", "cnn"),
+                              "choices": ("hog", "cnn", "all"),
                               "default": "hog",
                               "help": "Detector to use. 'cnn' detects many more angles but "
                                       "will be much more resource intensive and may fail "
diff --git a/lib/utils.py b/lib/utils.py
index 09f71ac..94ed269 100644
--- a/lib/utils.py
+++ b/lib/utils.py
@@ -18,7 +18,8 @@ def get_folder(path):
 def get_image_paths(directory, exclude=list(), debug=False):
     """ Return a list of images that reside in a folder """
     image_extensions = [".jpg", ".jpeg", ".png", ".tif", ".tiff"]
-    exclude_names = [basename(Path(x).stem[:-2] + Path(x).suffix) for x in exclude]
+    exclude_names = [basename(Path(x).stem[:Path(x).stem.rfind('_')] +
+        Path(x).suffix) for x in exclude]
     dir_contents = list()
 
     if not exists(directory):
diff --git a/scripts/convert.py b/scripts/convert.py
index 5ec0b40..397abac 100644
--- a/scripts/convert.py
+++ b/scripts/convert.py
@@ -30,7 +30,7 @@ class Convert(object):
             Note: GAN prediction outputs a mask + an image, while other predicts only an image """
         Utils.set_verbosity(self.args.verbose)
 
-        if not self.alignments.have_alignments():
+        if not self.alignments.have_alignments_file:
             self.generate_alignments()
 
         self.faces.faces_detected = self.alignments.read_alignments()
diff --git a/scripts/fsmedia.py b/scripts/fsmedia.py
index f15d4d7..64dc69a 100644
--- a/scripts/fsmedia.py
+++ b/scripts/fsmedia.py
@@ -272,6 +272,8 @@ class Alignments(object):
     def __init__(self, arguments):
         self.args = arguments
         self.serializer = self.get_serializer()
+        self.alignments_path = self.get_alignments_path()
+        self.have_alignments_file = os.path.exists(self.alignments_path)
 
     def get_serializer(self):
         """ Set the serializer to be used for loading and saving alignments """
@@ -296,34 +298,31 @@ class Alignments(object):
 
     def read_alignments(self):
         """ Read the serialized alignments file """
-        alignfile = self.get_alignments_path()
         try:
-            with open(alignfile, self.serializer.roptions) as align:
+            with open(self.alignments_path, self.serializer.roptions) as align:
                 faces_detected = self.serializer.unmarshal(align.read())
         except Exception as err:
-            print("{} not read!".format(alignfile))
+            print("{} not read!".format(self.alignments_path))
             print(str(err))
             faces_detected = dict()
         return faces_detected
 
     def write_alignments(self, faces_detected):
         """ Write the serialized alignments file """
-        alignfile = self.get_alignments_path()
-
         if hasattr(self.args, 'skip_existing') and self.args.skip_existing:
-            faces_detected = self.load_skip_alignments(alignfile, faces_detected)
+            faces_detected = self.load_skip_alignments(self.alignments_path, faces_detected)
 
         try:
-            print("Writing alignments to: {}".format(alignfile))
-            with open(alignfile, self.serializer.woptions) as align:
+            print("Writing alignments to: {}".format(self.alignments_path))
+            with open(self.alignments_path, self.serializer.woptions) as align:
                 align.write(self.serializer.marshal(faces_detected))
         except Exception as err:
-            print("{} not written!".format(alignfile))
+            print("{} not written!".format(self.alignments_path))
             print(str(err))
 
     def load_skip_alignments(self, alignfile, faces_detected):
         """ Load existing alignments if skipping existing images """
-        if self.have_alignments():
+        if self.have_alignments_file:
             existing_alignments = self.read_alignments()
             for key, val in existing_alignments.items():
                 if val:
@@ -331,8 +330,3 @@ class Alignments(object):
         else:
             print("Existing alignments file '%s' not found." % alignfile)
         return faces_detected
-
-    def have_alignments(self):
-        """ Check if an alignments file exists """
-        alignfile = self.get_alignments_path()
-        return os.path.exists(alignfile)
