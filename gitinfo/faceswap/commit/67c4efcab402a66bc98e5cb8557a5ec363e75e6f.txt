commit 67c4efcab402a66bc98e5cb8557a5ec363e75e6f
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Tue Feb 26 23:39:03 2019 +0000

    Add "Minumum Size" filter for extract

diff --git a/lib/cli.py b/lib/cli.py
index c1f1cff..21eef4e 100644
--- a/lib/cli.py
+++ b/lib/cli.py
@@ -490,6 +490,16 @@ class ExtractArgs(ExtractConvertArgs):
                               "help": "The output size of extracted faces. Make sure that the "
                                       "model you intend to train supports your required size. "
                                       "This will only need to be changed for hi-res models."})
+        argument_list.append({"opts": ("-min", "--min-size"),
+                              "type": int,
+                              "action": Slider,
+                              "dest": "min_size",
+                              "min_max": (0, 1080),
+                              "default": 0,
+                              "rounding": 20,
+                              "help": "Filters out faces detected below this size. Length, in "
+                                      "pixels across the diagonal of the bounding box. Set to 0 "
+                                      "for off"})
         argument_list.append({"opts": ("-s", "--skip-existing"),
                               "action": "store_true",
                               "dest": "skip_existing",
diff --git a/plugins/extract/detect/_base.py b/plugins/extract/detect/_base.py
index 0f3ad37..d65b202 100644
--- a/plugins/extract/detect/_base.py
+++ b/plugins/extract/detect/_base.py
@@ -34,12 +34,14 @@ def get_config(plugin_name):
 
 class Detector():
     """ Detector object """
-    def __init__(self, loglevel, rotation=None):
-        logger.debug("Initializing %s: (rotation: %s)", self.__class__.__name__, rotation)
+    def __init__(self, loglevel, rotation=None, min_size=0):
+        logger.debug("Initializing %s: (rotation: %s, min_size: %s)",
+                     self.__class__.__name__, rotation, min_size)
         self.config = get_config(".".join(self.__module__.split(".")[-2:]))
         self.loglevel = loglevel
         self.cachepath = os.path.join(os.path.dirname(__file__), ".cache")
         self.rotation = self.get_rotation_angles(rotation)
+        self.min_size = min_size
         self.parent_is_pool = False
         self.init = None
 
@@ -127,10 +129,25 @@ class Detector():
             logger.trace("Item out: %s", {key: val
                                           for key, val in output.items()
                                           if key != "image"})
+            if self.min_size > 0 and output.get("detected_faces", None):
+                output["detected_faces"] = self.filter_small_faces(output["detected_faces"])
         else:
             logger.trace("Item out: %s", output)
         self.queues["out"].put(output)
 
+    def filter_small_faces(self, detected_faces):
+        """ Filter out any faces smaller than the min size threshold """
+        retval = list()
+        for face in detected_faces:
+            face_size = ((face.right() - face.left()) ** 2 +
+                         (face.bottom() - face.top()) ** 2) ** 0.5
+            if face_size < self.min_size:
+                logger.debug("Removing detected face: (face_size: %s, min_size: %s",
+                             face_size, self.min_size)
+                continue
+            retval.append(face)
+        return retval
+
     # <<< DETECTION IMAGE COMPILATION METHODS >>> #
     def compile_detection_image(self, image, is_square, scale_up):
         """ Compile the detection image """
diff --git a/scripts/extract.py b/scripts/extract.py
index 74c3b35..ef3f87b 100644
--- a/scripts/extract.py
+++ b/scripts/extract.py
@@ -309,13 +309,14 @@ class Plugins():
             detector_name = self.converter_args["detector"]
         logger.debug("Loading Detector: '%s'", detector_name)
         # Rotation
-        rotation = None
-        if hasattr(self.args, "rotate_images"):
-            rotation = self.args.rotate_images
+        rotation = self.args.rotate_images if hasattr(self.args, "rotate_images") else None
+        # Min acceptable face size:
+        min_size = self.args.min_size if hasattr(self.args, "min_size") else 0
 
         detector = PluginLoader.get_detector(detector_name)(
             loglevel=self.loglevel,
-            rotation=rotation)
+            rotation=rotation,
+            min_size=min_size)
 
         return detector
 
