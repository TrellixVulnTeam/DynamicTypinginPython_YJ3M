commit f16ea566f0565e7fb1eee3477e66e51c3ba87b1c
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Wed Apr 4 22:35:02 2018 +0100

    Only import DLIB related modules when required and minor import relocations (#315)
    
    * Move imports to top and add conditions to load modules requiring GPU
    
    * Fix type
    
    * Fix typo
    
    * Import relocation and dlib import on demand
    
    * refactor to remove extra code lines
    
    * remove unnecessary sys import

diff --git a/lib/cli.py b/lib/cli.py
index 372bd09..e66931c 100644
--- a/lib/cli.py
+++ b/lib/cli.py
@@ -4,11 +4,30 @@ import sys
 import time
 
 from pathlib import Path
-from lib.FaceFilter import FaceFilter
-from lib.faces_detect import detect_faces, DetectedFace
 from lib.utils import get_image_paths, get_folder, rotate_image
 from lib import Serializer
 
+# DLIB is a GPU Memory hog, so the following modules should only be imported when required
+detect_faces = None
+DetectedFace = None
+FaceFilter = None
+
+def import_faces_detect():
+    ''' Import the faces_detect module only when it is required '''
+    global detect_faces
+    global DetectedFace
+    if detect_faces is None or DetectedFace is None:
+        import lib.faces_detect 
+        detect_faces = lib.faces_detect.detect_faces
+        DetectedFace = lib.faces_detect.DetectedFace
+
+def import_FaceFilter():
+    ''' Import the FaceFilter module only when it is required '''
+    global FaceFilter
+    if FaceFilter is None:
+        import lib.FaceFilter
+        FaceFilter = lib.FaceFilter.FaceFilter
+
 class FullPaths(argparse.Action):
     """Expand user- and relative-paths"""
 
@@ -153,6 +172,7 @@ class DirectoryProcessor(object):
         return os.path.exists(fn)
 
     def get_faces_alignments(self, filename, image):
+        import_faces_detect()
         faces_count = 0
         faces = self.faces_detected[os.path.basename(filename)]
         for rawface in faces:
@@ -173,6 +193,7 @@ class DirectoryProcessor(object):
             self.verify_output = True
 
     def get_faces(self, image, rotation=0):
+        import_faces_detect()
         faces_count = 0
         faces = detect_faces(image, self.arguments.detector, self.arguments.verbose, rotation)
         
@@ -201,6 +222,7 @@ class DirectoryProcessor(object):
         filter_files = list(filter(lambda fn: Path(fn).exists(), filter_files))
         
         if filter_files:
+            import_FaceFilter()
             print('Loading reference images for filtering: %s' % filter_files)
             return FaceFilter(filter_files, nfilter_files, self.arguments.ref_threshold)
 
diff --git a/scripts/train.py b/scripts/train.py
index b08d1cd..638d3e6 100644
--- a/scripts/train.py
+++ b/scripts/train.py
@@ -2,17 +2,29 @@ import cv2
 import numpy
 import time
 
-from threading import Lock
+import threading 
 from lib.utils import get_image_paths, get_folder
 from lib.cli import FullPaths
 from plugins.PluginLoader import PluginLoader
 
+tf = None
+set_session = None
+def import_tensorflow_keras():
+    ''' Import the TensorFlow and keras set_session modules only when they are required '''
+    global tf
+    global set_session
+    if tf is None or set_session is None:
+        import tensorflow
+        import keras.backend.tensorflow_backend
+        tf = tensorflow
+        set_session = keras.backend.tensorflow_backend.set_session
+
 class TrainingProcessor(object):
     arguments = None
 
     def __init__(self, subparser, command, description='default'):
         self.parse_arguments(description, subparser, command)
-        self.lock = Lock()
+        self.lock = threading.Lock()
 
     def process_arguments(self, arguments):
         self.arguments = arguments
@@ -105,7 +117,6 @@ class TrainingProcessor(object):
         return parser
 
     def process(self):
-        import threading
         self.stop = False
         self.save_now = False
 
@@ -182,8 +193,7 @@ class TrainingProcessor(object):
             exit(1)
 
     def set_tf_allow_growth(self):
-        import tensorflow as tf
-        from keras.backend.tensorflow_backend import set_session
+        import_tensorflow_keras()
         config = tf.ConfigProto()
         config.gpu_options.allow_growth = True
         config.gpu_options.visible_device_list="0"
diff --git a/tools/sort.py b/tools/sort.py
index 2024baa..f077a1d 100644
--- a/tools/sort.py
+++ b/tools/sort.py
@@ -6,18 +6,32 @@ import operator
 import numpy as np
 import cv2
 from tqdm import tqdm
-import face_recognition
 from shutil import copyfile
 import json
 import re
 
+# DLIB is a GPU Memory hog, so the following modules should only be imported when required
+face_recognition = None
+FaceLandmarksExtractor = None
+
+def import_face_recognition():
+    ''' Import the face_recognition module only when it is required '''
+    global face_recognition
+    if face_recognition is None:
+        import face_recognition
+
+def import_FaceLandmarksExtractor():
+    ''' Import the FaceLandmarksExtractor module only when it is required '''
+    global FaceLandmarksExtractor
+    if FaceLandmarksExtractor is None:
+        import lib.FaceLandmarksExtractor
+        FaceLandmarksExtractor = lib.FaceLandmarksExtractor
 
 if sys.version_info[0] < 3:
     raise Exception("This program requires at least python3.2")
 if sys.version_info[0] == 3 and sys.version_info[1] < 2:
     raise Exception("This program requires at least python3.2")
 
-
 class SortProcessor(object):
     def __init__(self, subparser, command, description='default'):
         self.arguments = None
@@ -232,6 +246,8 @@ class SortProcessor(object):
         return img_list
 
     def sort_face(self):
+        import_face_recognition()
+       
         input_dir = self.arguments.input_dir
 
         print ("Sorting by face similarity...")
@@ -259,6 +275,8 @@ class SortProcessor(object):
         return img_list
 
     def sort_face_dissim(self):
+        import_face_recognition()
+        
         input_dir = self.arguments.input_dir
 
         print ("Sorting by face dissimilarity...")
@@ -284,7 +302,7 @@ class SortProcessor(object):
         return img_list
 
     def sort_face_cnn(self):
-        from lib import FaceLandmarksExtractor
+        import_FaceLandmarksExtractor()
 
         input_dir = self.arguments.input_dir
 
@@ -313,7 +331,7 @@ class SortProcessor(object):
         return img_list
 
     def sort_face_cnn_dissim(self):
-        from lib import FaceLandmarksExtractor
+        import_FaceLandmarksExtractor()
 
         input_dir = self.arguments.input_dir
 
@@ -351,7 +369,7 @@ class SortProcessor(object):
             r = ( (fl[16][0]-fl[27][0]) + (fl[15][0]-fl[28][0]) + (fl[14][0]-fl[29][0]) ) / 3.0
             return r-l
             
-        from lib import FaceLandmarksExtractor
+        import_FaceLandmarksExtractor()
         input_dir = self.arguments.input_dir
     
         img_list = []
@@ -634,6 +652,8 @@ class SortProcessor(object):
         :return: img_list but with the comparative values that the chosen
         grouping method expects.
         """
+        import_face_recognition()
+
         input_dir = self.arguments.input_dir
         print("Preparing to group...")
         if group_method == 'group_blur':
@@ -641,7 +661,7 @@ class SortProcessor(object):
         elif group_method == 'group_face':
             temp_list = [[x, face_recognition.face_encodings(cv2.imread(x))] for x in tqdm(self.find_images(input_dir), desc="Reloading", file=sys.stdout)]
         elif group_method == 'group_face_cnn':
-            from lib import FaceLandmarksExtractor
+            import_FaceLandmarksExtractor()
             temp_list = []
             for x in tqdm(self.find_images(input_dir), desc="Reloading", file=sys.stdout):
                 d = FaceLandmarksExtractor.extract(cv2.imread(x), 'cnn', True, input_is_predetected_face=True)
@@ -764,6 +784,7 @@ class SortProcessor(object):
 
     @staticmethod
     def get_avg_score_faces(f1encs, references):
+        import_face_recognition()
         scores = []
         for f2encs in references:
             score = face_recognition.face_distance(f1encs, f2encs)[0]
