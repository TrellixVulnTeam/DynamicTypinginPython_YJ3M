commit c817835d6e85803118def12bafb2cdb7a8769709
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Mon Feb 11 14:21:01 2019 +0000

    Add adjust's 'smooth-mask' (smooth-box) back as option

diff --git a/lib/cli.py b/lib/cli.py
index 8ce3552..48adcfb 100644
--- a/lib/cli.py
+++ b/lib/cli.py
@@ -577,21 +577,17 @@ class ConvertArgs(ExtractConvertArgs):
             "type": str.lower,
             "dest": "mask_type",
             "choices": ["ellipse",
-                        "smoothed",
                         "facehull",
                         "dfl",
                         #  "cnn",  Removed until implemented
                         "none"],
             "default": "facehull_rect",
             "help": "R|Mask to use to replace faces."
-                    "\nrect: Rectangle around face."
                     "\nellipse: Oval around face."
-                    "\nsmoothed: Rectangle around face with smoothing."
                     "\nfacehull: Face cutout based on landmarks."
-                    "\nfacehull_rect: Rectangle around faces with facehull"
-                    "\n\tbetween the edges of the face and the background."
                     "\ndfl: A Face Hull mask from DeepFaceLabs."
-                    "\ncnn: Not yet implemented"})
+                    #  "\ncnn: Not yet implemented"  Removed until implemented
+                    "\nnone: No mask. Can still use blur and erode on the edges of the swap box."})
         argument_list.append({"opts": ("-b", "--blur-size"),
                               "type": float,
                               "action": Slider,
@@ -672,6 +668,13 @@ class ConvertArgs(ExtractConvertArgs):
                                       " in the swapped reconstruction to "
                                       "equal the mean of the masked area in "
                                       "the orginal image"})
+        argument_list.append({"opts": ("-sb", "--smooth-box"),
+                              "action": "store_true",
+                              "dest": "smooth_box",
+                              "default": False,
+                              "help": "Perform a Gaussian blur on the edges of the face box "
+                                      "received from the model. Helps reduce pronounced edges "
+                                      "of the swap area"})
         argument_list.append({"opts": ("-dt", "--draw-transparent"),
                               "action": "store_true",
                               "dest": "draw_transparent",
diff --git a/plugins/convert/masked.py b/plugins/convert/masked.py
index ba058fc..9b6e52a 100644
--- a/plugins/convert/masked.py
+++ b/plugins/convert/masked.py
@@ -56,6 +56,7 @@ class Convert():
         logger.trace("coverage: %s", coverage)
         src_face = detected_face.aligned_face
         coverage_face = src_face[self.crop, self.crop]
+        old_face = coverage_face.copy()
         coverage_face = cv2.resize(coverage_face,  # pylint: disable=no-member
                                    (self.input_size, self.input_size),
                                    interpolation=cv2.INTER_AREA)  # pylint: disable=no-member
@@ -77,6 +78,10 @@ class Convert():
                               (coverage, coverage),
                               interpolation=cv2.INTER_CUBIC)  # pylint: disable=no-member
         np.clip(new_face * 255.0, 0.0, 255.0, out=new_face)
+
+        if self.args.smooth_box:
+            self.smooth_box(old_face, new_face)
+
         src_face[self.crop, self.crop] = new_face
         background = image.copy()
         interpolator = detected_face.adjusted_interpolators[1]
@@ -89,6 +94,19 @@ class Convert():
             borderMode=cv2.BORDER_TRANSPARENT)  # pylint: disable=no-member
         return new_image
 
+    @staticmethod
+    def smooth_box(old_face, new_face):
+        """ Perform gaussian blur on the edges of the output rect """
+        width, height, _ = new_face.shape
+        crop = slice(0, width)
+        mask = np.zeros_like(new_face)
+        mask[height // 15:-height // 15, width // 15:-width // 15, :] = 255
+        mask = cv2.GaussianBlur(mask,  # pylint: disable=no-member
+                                (15, 15),
+                                10)
+        new_face[crop, crop] = (mask / 255 * new_face +
+                                (1 - mask / 255) * old_face)
+
     def get_image_mask(self, detected_face, image_size):
         """ Get the image mask """
         mask = self.mask.get_mask(detected_face, image_size)
