commit 38d03ac88566e6cf0c6967dc86ef0f84b4833d94
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Thu Aug 2 09:01:49 2018 +0100

    Extract - Detector reinitialization bugfix

diff --git a/lib/face_alignment/detectors.py b/lib/face_alignment/detectors.py
index cbcbec0..c1f7b4e 100644
--- a/lib/face_alignment/detectors.py
+++ b/lib/face_alignment/detectors.py
@@ -60,9 +60,6 @@ class DLibDetector(Detector):
 
     def create_detector(self, verbose, detector, placeholder):
         """ Add the requested detectors """
-        if self.initialized:
-            return
-
         self.verbose = verbose
 
         if detector == "dlib-cnn" or detector == "dlib-all":
@@ -130,9 +127,6 @@ class MTCNNDetector(Detector):
 
     def create_detector(self, verbose, mtcnn_kwargs):
         """ Create the mtcnn detector """
-        if self.initialized:
-            return
-
         self.verbose = verbose
 
         if self.verbose:
diff --git a/lib/face_alignment/extractor.py b/lib/face_alignment/extractor.py
index e4ca335..80d2905 100644
--- a/lib/face_alignment/extractor.py
+++ b/lib/face_alignment/extractor.py
@@ -241,7 +241,6 @@ class Extract(object):
 
     def __init__(self, input_image_bgr, detector, mtcnn_kwargs=None,
                  verbose=False, input_is_predetected_face=False):
-        self.initialized = False
         self.verbose = verbose
         self.keras = KERAS_MODEL
         self.detector = None
@@ -263,20 +262,27 @@ class Extract(object):
 
     def initialize(self, detector, mtcnn_kwargs):
         """ initialize Keras and Dlib """
-        if self.initialized:
-            return
-        self.initialize_vram(detector)
-        self.initialize_keras(detector)
-        # VRAM Scaling factor must be set AFTER Keras has loaded
-        VRAM.set_scale_to(detector)
+        if not VRAM.initialized:
+            self.initialize_vram(detector)
 
-        self.initialize_detector(detector, mtcnn_kwargs)
-        self.initialized = True
+        if not self.keras.initialized:
+            self.initialize_keras(detector)
+            # VRAM Scaling factor must be set AFTER Keras has loaded
+            VRAM.set_scale_to(detector)
+
+        if detector == "mtcnn":
+            self.detector = MTCNN_DETECTOR
+        else:
+            self.detector = DLIB_DETECTORS
+
+        if not self.detector.initialized:
+            self.initialize_detector(detector, mtcnn_kwargs)
 
     def initialize_vram(self, detector):
         """ Initialize vram based on detector """
         VRAM.verbose = self.verbose
         VRAM.detector = detector
+        VRAM.initialized = True
         VRAM.output_stats()
 
     def initialize_keras(self, detector):
@@ -294,13 +300,10 @@ class Extract(object):
         """ Initialize face detector """
         kwargs = {"verbose": self.verbose}
         if detector == "mtcnn":
-            self.detector = MTCNN_DETECTOR
             mtcnn_kwargs = self.detector.validate_kwargs(mtcnn_kwargs)
             kwargs["mtcnn_kwargs"] = mtcnn_kwargs
         else:
-            self.detector = DLIB_DETECTORS
             kwargs["detector"] = detector
-
             scale_to = int(VRAM.scale_to ** 0.5)
 
             if self.verbose:
diff --git a/lib/face_alignment/model.py b/lib/face_alignment/model.py
index fc2faa9..1db8520 100644
--- a/lib/face_alignment/model.py
+++ b/lib/face_alignment/model.py
@@ -104,9 +104,6 @@ class KerasModel(object):
 
     def load_model(self, verbose, dummy, ratio):
         """ Load the Keras Model """
-        if self.initialized:
-            return
-
         self.verbose = verbose
         if self.verbose:
             print("Initializing keras model...")
diff --git a/lib/face_alignment/vram_allocation.py b/lib/face_alignment/vram_allocation.py
index 1aa1299..239089a 100644
--- a/lib/face_alignment/vram_allocation.py
+++ b/lib/face_alignment/vram_allocation.py
@@ -9,8 +9,8 @@ class GPUMem(object):
         and the ratio of vram to use for tensorflow """
 
     def __init__(self):
+        self.initialized = False
         self.verbose = False
-        self.output_shown = False
         self.stats = GPUStats()
         self.vram_free = None
         self.vram_total = None
@@ -50,13 +50,12 @@ class GPUMem(object):
 
     def output_stats(self):
         """ Output stats in verbose mode """
-        if self.output_shown or not self.verbose:
+        if not self.verbose:
             return
         print("\n----- Initial GPU Stats -----")
         self.stats.print_info()
         print("GPU VRAM free:    {}".format(self.vram_free))
         print("-----------------------------\n")
-        self.output_shown = True
 
     def get_tensor_gpu_ratio(self):
         """ Set the ratio of GPU memory to use for tensorflow session for
