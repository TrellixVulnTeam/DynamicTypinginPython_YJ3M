commit e99fa49e48a92e3e27cc731c0835fca131e8fd86
Author: kvrooman <vrooman.kyle@gmail.com>
Date:   Thu Mar 21 10:58:25 2019 -0500

    Mask optimizations (#673)
    
    * Mask optimizations
    
    - Remove repetitive np.array() of items that are already np.arrays
    - Remove repetitive reshaping
    - Perform dilation on single channel only
    - Clarify dfl_full mask parts
    - Simplify with for loop
    - Add more complex mask based on facial components
    - Prep for convert masks
    
    * Line width clarity
    
    Line width clarity
    
    * docstring
    
    * style consistency
    
    * flake8 fixes
    
    * Update _config.py
    
    descritions

diff --git a/lib/model/masks.py b/lib/model/masks.py
index 6fc6ee1..346b8c0 100644
--- a/lib/model/masks.py
+++ b/lib/model/masks.py
@@ -4,7 +4,6 @@
         dfaker: https://github.com/dfaker/df"""
 
 import logging
-
 import cv2
 import numpy as np
 
@@ -27,32 +26,49 @@ def dfaker(landmarks, face, channels=4):
     logger.trace("face_shape: %s, coverage: %s, landmarks: %s", face.shape, coverage, landmarks)
 
     mat = umeyama(landmarks[17:], True)[0:2]
-    mat = np.array(mat.ravel()).reshape(2, 3)
+    mat = mat.reshape(-1).reshape(2, 3)
     mat = mat * coverage
     mat[:, 2] += padding
 
-    points = np.array(landmarks).reshape((-1, 2))
-    facepoints = np.array(points).reshape((-1, 2))
-
-    mask = np.zeros_like(face, dtype=np.uint8)
-
-    hull = cv2.convexHull(facepoints.astype(int))  # pylint: disable=no-member
-    hull = cv2.transform(hull.reshape(1, -1, 2),  # pylint: disable=no-member
-                         mat).reshape(-1, 2).astype(int)
-    cv2.fillConvexPoly(mask, hull, (255, 255, 255))  # pylint: disable=no-member
+    mask = np.zeros(face.shape[0:2] + (1, ), dtype=np.float32)
+    hull = cv2.convexHull(landmarks).reshape(1, -1, 2)  # pylint: disable=no-member
+    hull = cv2.transform(hull, mat).reshape(-1, 2)  # pylint: disable=no-member
+    cv2.fillConvexPoly(mask, hull, 255.)  # pylint: disable=no-member
 
     kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (15, 15))  # pylint: disable=no-member
-    mask = cv2.dilate(mask,  # pylint: disable=no-member
-                      kernel,
-                      iterations=1,
-                      borderType=cv2.BORDER_REFLECT)  # pylint: disable=no-member
-    mask = mask[:, :, :1]
+    mask = cv2.dilate(mask, kernel, borderType=cv2.BORDER_REFLECT)  # pylint: disable=no-member
+    mask = np.expand_dims(mask, axis=-1)
 
     return merge_mask(face, mask, channels)
 
 
 def dfl_full(landmarks, face, channels=4):
-    """ DFL Face Full Mask
+    """ DFL facial mask
+
+        channels: 1, 3 or 4:
+            1 - Return a single channel mask
+            3 - Return a 3 channel mask
+            4 - Return the original image with the mask in the alpha channel
+        """
+    logger.trace("face_shape: %s, landmarks: %s", face.shape, landmarks)
+    mask = np.zeros(face.shape[0:2] + (1, ), dtype=np.float32)
+
+    nose_ridge = (landmarks[27:31], landmarks[33:34])
+    jaw = (landmarks[0:17], landmarks[48:68], landmarks[0:1],
+           landmarks[8:9], landmarks[16:17])
+    eyes = (landmarks[17:27], landmarks[0:1], landmarks[27:28],
+            landmarks[16:17], landmarks[33:34])
+    parts = [jaw, nose_ridge, eyes]
+
+    for item in parts:
+        merged = np.concatenate(item)
+        cv2.fillConvexPoly(mask, cv2.convexHull(merged), 255.)  # pylint: disable=no-member
+
+    return merge_mask(face, mask, channels)
+
+
+def components(landmarks, face, channels=4):
+    """ Component model mask
 
         channels: 1, 3 or 4:
             1 - Return a single channel mask
@@ -61,25 +77,23 @@ def dfl_full(landmarks, face, channels=4):
         """
     logger.trace("face_shape: %s, landmarks: %s", face.shape, landmarks)
     mask = np.zeros(face.shape[0:2] + (1, ), dtype=np.float32)
-    jaw = cv2.convexHull(np.concatenate((  # pylint: disable=no-member
-                                         landmarks[0:17],   # jawline
-                                         landmarks[48:68],  # mouth
-                                         [landmarks[0]],    # temple
-                                         [landmarks[8]],    # chin
-                                         [landmarks[16]]))) # temple
-    nose_ridge = cv2.convexHull(np.concatenate((  # pylint: disable=no-member
-                                                landmarks[27:31],  # nose line
-                                                [landmarks[33]]))) # nose point 
-    eyes = cv2.convexHull(np.concatenate((  # pylint: disable=no-member
-                                          landmarks[17:27],  # eyebrows
-                                          [landmarks[0]],    # temple
-                                          [landmarks[27]],   # nose top
-                                          [landmarks[16]],   # temple
-                                          [landmarks[33]]))) # nose point
-
-    cv2.fillConvexPoly(mask, jaw, (255, 255, 255))  # pylint: disable=no-member
-    cv2.fillConvexPoly(mask, nose_ridge, (255, 255, 255))  # pylint: disable=no-member
-    cv2.fillConvexPoly(mask, eyes, (255, 255, 255))  # pylint: disable=no-member
+
+    r_jaw = (landmarks[0:9], landmarks[17:18])
+    l_jaw = (landmarks[8:17], landmarks[26:27])
+    r_cheek = (landmarks[17:20], landmarks[8:9])
+    l_cheek = (landmarks[24:27], landmarks[8:9])
+    nose_ridge = (landmarks[19:25], landmarks[8:9],)
+    r_eye = (landmarks[17:22], landmarks[27:28],
+             landmarks[31:36], landmarks[8:9])
+    l_eye = (landmarks[22:27], landmarks[27:28],
+             landmarks[31:36], landmarks[8:9])
+    nose = (landmarks[27:31], landmarks[31:36])
+    parts = [r_jaw, l_jaw, r_cheek, l_cheek, nose_ridge, r_eye, l_eye, nose]
+
+    for item in parts:
+        merged = np.concatenate(item)
+        cv2.fillConvexPoly(mask, cv2.convexHull(merged), 255.)  # pylint: disable=no-member
+
     return merge_mask(face, mask, channels)
 
 
diff --git a/plugins/train/_config.py b/plugins/train/_config.py
index eddace0..3814058 100644
--- a/plugins/train/_config.py
+++ b/plugins/train/_config.py
@@ -7,8 +7,12 @@ from lib.config import FaceswapConfig
 
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
 
-MASK_TYPES = ["none", "dfaker", "dfl_full"]
-MASK_INFO = "The mask to be used for training. Select none to not use a mask"
+MASK_TYPES = ["none", "dfaker", "dfl_full", "components"]
+MASK_INFO = ("The mask to be used for training:"
+             "\n\tnone: Doesn't use any mask."
+             "\n\tdfaker: A basic face hull mask using a facehull of all 68 landmarks."
+             "\n\tdfl_full: An improved face hull mask using a facehull of 3 facial parts"
+             "\n\tcomponents: An improved face hull mask using a facehull of 8 facial parts")
 COVERAGE_INFO = ("How much of the extracted image to train on. Generally the model is optimized\n"
                  "to the default value. Sensible values to use are:"
                  "\n\t62.5%% spans from eyebrow to eyebrow."
