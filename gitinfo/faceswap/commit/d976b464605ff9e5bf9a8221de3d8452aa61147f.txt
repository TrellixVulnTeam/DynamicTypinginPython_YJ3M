commit d976b464605ff9e5bf9a8221de3d8452aa61147f
Author: Tim van den Essen <tim3345@live.nl>
Date:   Tue Aug 21 11:27:36 2018 +0200

    alignments.json save interval for extracting (#477)
    
    * implement save interval

diff --git a/lib/cli.py b/lib/cli.py
index 398c28e..f6a21d1 100644
--- a/lib/cli.py
+++ b/lib/cli.py
@@ -427,6 +427,16 @@ class ExtractArgs(ExtractConvertArgs):
                               "help": "Perform extra alignment to ensure "
                                       "left/right eyes are  at the same "
                                       "height"})
+        argument_list.append({"opts": ("-si", "--save-interval"),
+                              "dest": "save_interval",
+                              "type": int,
+                              "default": None,
+                              "help": "Automatically save the alignments file "
+                                      "after a set amount of frames. Will only "
+                                      "save at the end of extracting by "
+                                      "default. WARNING: Don't interrupt the "
+                                      "script when writing the file because "
+                                      "it might get corrupted."})
         return argument_list
 
 
diff --git a/scripts/extract.py b/scripts/extract.py
index 2b966e5..e6b31c8 100644
--- a/scripts/extract.py
+++ b/scripts/extract.py
@@ -27,6 +27,7 @@ class Extract(object):
         self.output_dir = self.faces.output_dir
 
         self.export_face = True
+        self.save_interval = self.args.save_interval if hasattr(self.args, "save_interval") else None
 
     def process(self):
         """ Perform the extraction process """
@@ -44,22 +45,31 @@ class Extract(object):
         else:
             self.extract_single_process()
 
-        self.alignments.write_alignments(self.faces.faces_detected)
-
+        self.write_alignments()
         images, faces = Utils.finalize(self.images.images_found,
                                        self.faces.num_faces_detected,
                                        self.faces.verify_output)
         self.images.images_found = images
         self.faces.num_faces_detected = faces
 
+    def write_alignments(self):
+        self.alignments.write_alignments(self.faces.faces_detected)
+
+
     def extract_single_process(self):
         """ Run extraction in a single process """
+        frame_no = 0
         for filename in tqdm(self.images.input_images, file=sys.stdout):
             filename, faces = self.process_single_image(filename)
             self.faces.faces_detected[os.path.basename(filename)] = faces
+            frame_no += 1
+            if frame_no == self.save_interval:
+                self.write_alignments()
+                frame_no = 0
 
     def extract_multi_process(self):
         """ Run the extraction on the correct number of processes """
+        frame_no = 0
         for filename, faces in tqdm(
                 pool_process(
                     self.process_single_image,
@@ -68,6 +78,10 @@ class Extract(object):
                 file=sys.stdout):
             self.faces.num_faces_detected += 1
             self.faces.faces_detected[os.path.basename(filename)] = faces
+            frame_no += 1
+            if frame_no == self.save_interval:
+                self.write_alignments()
+                frame_no = 0
 
     def process_single_image(self, filename):
         """ Detect faces in an image. Rotate the image the specified amount
