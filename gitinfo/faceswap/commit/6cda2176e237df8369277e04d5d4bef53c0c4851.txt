commit 6cda2176e237df8369277e04d5d4bef53c0c4851
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Thu Oct 24 09:30:37 2019 +0000

    lib.alignments - cache hashes_to_frame

diff --git a/lib/alignments.py b/lib/alignments.py
index 64f7ba9..e50dfa5 100644
--- a/lib/alignments.py
+++ b/lib/alignments.py
@@ -29,6 +29,7 @@ class Alignments():
 
         self.data = self.load()
         self.update_legacy()
+        self._hashes_to_frame = dict()
         logger.debug("Initialized %s", self.__class__.__name__)
 
     # << PROPERTIES >> #
@@ -56,14 +57,16 @@ class Alignments():
 
     @property
     def hashes_to_frame(self):
-        """ Return a dict of each face_hash with their parent
-            frame name(s) and their index in the frame
-            """
-        hash_faces = dict()
-        for frame_name, faces in self.data.items():
-            for idx, face in enumerate(faces):
-                hash_faces.setdefault(face["hash"], dict())[frame_name] = idx
-        return hash_faces
+        """ Return :attr:`_hashes_to_frame`. Generate it if it does not exist.
+            The dict is of each face_hash with their parent frame name(s) and their index
+            in the frame
+        """
+        if not self._hashes_to_frame:
+            logger.debug("Generating hashes to frame")
+            for frame_name, faces in self.data.items():
+                for idx, face in enumerate(faces):
+                    self._hashes_to_frame.setdefault(face["hash"], dict())[frame_name] = idx
+        return self._hashes_to_frame
 
     # << INIT FUNCTIONS >> #
 
diff --git a/tools/lib_alignments/jobs.py b/tools/lib_alignments/jobs.py
index df01729..7d33674 100644
--- a/tools/lib_alignments/jobs.py
+++ b/tools/lib_alignments/jobs.py
@@ -114,12 +114,11 @@ class Check():
         """ Return Faces when there are multiple faces in a frame """
         self.output_message = "Multiple faces in frame"
         seen_hash_dupes = set()
-        hashes_to_frame = self.alignments.hashes_to_frame
         for item in tqdm(self.items, desc=self.output_message):
             filename = item["face_fullname"]
             f_hash = item["face_hash"]
             frame_idx = [(frame, idx)
-                         for frame, idx in hashes_to_frame[f_hash].items()]
+                         for frame, idx in self.alignments.hashes_to_frame[f_hash].items()]
 
             if len(frame_idx) > 1:
                 # If the same hash exists in multiple frames, select arbitrary frame
@@ -160,10 +159,9 @@ class Check():
     def get_leftover_faces(self):
         """yield each face that isn't in the alignments file."""
         self.output_message = "Faces missing from the alignments file"
-        hashes_to_frame = self.alignments.hashes_to_frame
         for face in tqdm(self.items, desc=self.output_message):
             f_hash = face["face_hash"]
-            if f_hash not in hashes_to_frame:
+            if f_hash not in self.alignments.hashes_to_frame:
                 logger.debug("Returning: '%s'", face["face_fullname"])
                 yield face["face_fullname"], -1
 
