commit 01df9c1090a922a6129c6e43b3a65bfd43b56b8d
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Sun Feb 24 03:23:53 2019 +0000

    Convert FAN to run on CPU as well as GPU

diff --git a/lib/cli.py b/lib/cli.py
index 23a25fa..c1f1cff 100644
--- a/lib/cli.py
+++ b/lib/cli.py
@@ -449,7 +449,7 @@ class ExtractArgs(ExtractConvertArgs):
                     "\n'dlib': Dlib Pose Predictor. Faster, less "
                     "\n\tresource intensive, but less accurate."
                     "\n'fan': Face Alignment Network. Best aligner."
-                    "\n\tGPU heavy."})
+                    "\n\tGPU heavy, slow when not running on GPU"})
         argument_list.append({"opts": ("-r", "--rotate-images"),
                               "type": str,
                               "dest": "rotate_images",
diff --git a/plugins/extract/align/.cache/2DFAN-4.pb b/plugins/extract/align/.cache/2DFAN-4.pb
old mode 100644
new mode 100755
index fec04ef..6e52218
Binary files a/plugins/extract/align/.cache/2DFAN-4.pb and b/plugins/extract/align/.cache/2DFAN-4.pb differ
diff --git a/plugins/extract/align/fan.py b/plugins/extract/align/fan.py
index 062cd7f..8da9269 100644
--- a/plugins/extract/align/fan.py
+++ b/plugins/extract/align/fan.py
@@ -34,11 +34,7 @@ class Align(Aligner):
         logger.info("Initializing Face Alignment Network...")
         logger.debug("fan initialize: (args: %s kwargs: %s)", args, kwargs)
 
-        card_id, _, vram_total = self.get_vram_free()
-        if card_id == -1:
-            self.init.set()
-            raise ValueError("No Graphics Card Detected! FAN is not currently supported on CPU. "
-                             "Use another aligner such as DLIB ( -A dlib ).")
+        _, _, vram_total = self.get_vram_free()
 
         if vram_total <= self.vram:
             tf_ratio = 1.0
@@ -225,14 +221,15 @@ class FAN():
 
         self.model_path = model_path
         self.graph = self.load_graph()
-        self.input = self.graph.get_tensor_by_name("fa/0:0")
-        self.output = self.graph.get_tensor_by_name("fa/Add_95:0")
+        self.input = self.graph.get_tensor_by_name("fa/input_1:0")
+        self.output = self.graph.get_tensor_by_name("fa/transpose_647:0")
         self.session = self.set_session(ratio)
 
     def load_graph(self):
         """ Load the tensorflow Model and weights """
         # pylint: disable=not-context-manager
         logger.verbose("Initializing Face Alignment Network model...")
+
         with self.tf.gfile.GFile(self.model_path, "rb") as gfile:
             graph_def = self.tf.GraphDef()
             graph_def.ParseFromString(gfile.read())
@@ -250,6 +247,10 @@ class FAN():
             config.gpu_options.per_process_gpu_memory_fraction = vram_ratio
             session = self.tf.Session(config=config)
             with session.as_default():
+                if any("gpu" in str(device).lower() for device in session.list_devices()):
+                    logger.debug("Using GPU")
+                else:
+                    logger.warning("Using CPU")
                 session.run(self.output, feed_dict={self.input: placeholder})
         return session
 
diff --git a/setup.py b/setup.py
index b29e9cb..6c0c87f 100755
--- a/setup.py
+++ b/setup.py
@@ -8,6 +8,7 @@ import os
 import re
 import sys
 import platform
+import warnings
 
 from subprocess import CalledProcessError, run, PIPE, Popen
 
@@ -184,6 +185,8 @@ class Environment():
         installed = chk.communicate()[0].decode(self.encoding).splitlines()
 
         for pkg in installed:
+            if "==" not in pkg:
+                continue
             item = pkg.split("==")
             installed_packages[item[0]] = item[1]
         return installed_packages
