commit 86d039c24202d5d39f008e56b9b50a22adecfa8d
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Fri Jan 3 14:13:58 2020 +0000

    Convert - bugfixes
    - Default mask to an available mask in Preview tool
    - Correctly output predicted mask

diff --git a/plugins/convert/mask/mask_blend.py b/plugins/convert/mask/mask_blend.py
index 1beadc7..778be9e 100644
--- a/plugins/convert/mask/mask_blend.py
+++ b/plugins/convert/mask/mask_blend.py
@@ -49,10 +49,8 @@ class Mask(Adjustment):
         raw_mask = mask.copy()
         if not self.skip and self._do_erode:
             mask = self._erode(mask)
-        raw_mask = np.expand_dims(raw_mask, axis=-1) if raw_mask.ndim != 3 else raw_mask
-        mask = np.expand_dims(mask, axis=-1) if mask.ndim != 3 else mask
         logger.trace("mask shape: %s, raw_mask shape: %s", mask.shape, raw_mask.shape)
-        return mask.astype("float32") / 255.0, raw_mask.astype("float32") / 255.0
+        return mask, raw_mask
 
     def _get_mask(self, detected_face, predicted_mask):
         """ Return the requested mask with any requested blurring applied.
@@ -72,9 +70,9 @@ class Mask(Adjustment):
         """
         if self.mask_type == "none":
             # Return a dummy mask if not using a mask
-            mask = np.ones_like(self.dummy[:, :, 1], dtype="uint8") * 255
+            mask = np.ones_like(self.dummy[:, :, 1], dtype="float32")[..., None]
         elif self.mask_type == "predicted":
-            mask = predicted_mask
+            mask = predicted_mask[..., None]
         else:
             mask = detected_face.mask[self.mask_type]
             mask.set_blur_and_threshold(blur_kernel=self.config["kernel_size"],
@@ -82,7 +80,6 @@ class Mask(Adjustment):
                                         blur_passes=self.config["passes"],
                                         threshold=self.config["threshold"])
             mask = self._crop_to_coverage(mask.mask)
-
             mask_size = mask.shape[0]
             face_size = self.dummy.shape[0]
             if mask_size != face_size:
@@ -90,6 +87,7 @@ class Mask(Adjustment):
                 mask = cv2.resize(mask,
                                   self.dummy.shape[:2],
                                   interpolation=interp)[..., None]
+            mask = mask.astype("float32") / 255.0
         logger.trace(mask.shape)
         return mask
 
diff --git a/tools/preview.py b/tools/preview.py
index 37cd45d..ddd8e81 100644
--- a/tools/preview.py
+++ b/tools/preview.py
@@ -62,6 +62,7 @@ class Preview(tk.Tk):  # pylint:disable=too-few-public-methods
         trigger_patch = Event()
         self._samples = Samples(arguments, 5, self._display, self._lock, trigger_patch)
         self._patch = Patch(arguments,
+                            self._available_masks,
                             self._samples,
                             self._display,
                             self._lock,
@@ -356,6 +357,8 @@ class Patch():
     ----------
     arguments: :class:`argparse.Namespace`
         The :mod:`argparse` arguments as passed in from :mod:`tools.py`
+    available_masks: list
+        The masks that are available for convert
     samples: :class:`Samples`
         The Samples for display.
     display: :class:`FacesDisplay`
@@ -376,10 +379,12 @@ class Patch():
     current_config::class:`lib.config.FaceswapConfig`
         The currently set configuration for the patch queue
     """
-    def __init__(self, arguments, samples, display, lock, trigger, config_tools, tk_vars):
-        logger.debug("Initializing %s: (arguments: '%s', samples: %s: display: %s, lock: %s,"
-                     " trigger: %s, config_tools: %s, tk_vars %s)", self.__class__.__name__,
-                     arguments, samples, display, lock, trigger, config_tools, tk_vars)
+    def __init__(self, arguments, available_masks, samples,
+                 display, lock, trigger, config_tools, tk_vars):
+        logger.debug("Initializing %s: (arguments: '%s', available_masks: %s, samples: %s, "
+                     "display: %s, lock: %s, trigger: %s, config_tools: %s, tk_vars %s)",
+                     self.__class__.__name__, arguments, available_masks, samples, display, lock,
+                     trigger, config_tools, tk_vars)
         self._samples = samples
         self._queue_patch_in = queue_manager.get_queue("preview_patch_in")
         self._display = display
@@ -393,7 +398,8 @@ class Patch():
                                     coverage_ratio=self._samples.predictor.coverage_ratio,
                                     draw_transparent=False,
                                     pre_encode=None,
-                                    arguments=self._generate_converter_arguments(arguments),
+                                    arguments=self._generate_converter_arguments(arguments,
+                                                                                 available_masks),
                                     configfile=configfile)
         self._shutdown = Event()
 
@@ -419,20 +425,23 @@ class Patch():
         return self._converter
 
     @staticmethod
-    def _generate_converter_arguments(arguments):
-        """ Add the default converter arguments to the initial arguments.
+    def _generate_converter_arguments(arguments, available_masks):
+        """ Add the default converter arguments to the initial arguments. Ensure the mask selection
+        is available.
 
         Parameters
         ----------
         arguments: :class:`argparse.Namespace`
             The :mod:`argparse` arguments as passed in from :mod:`tools.py`
-
+        available_masks: list
+            The masks that are available for convert
         Returns
         ----------
         arguments: :class:`argparse.Namespace`
             The :mod:`argparse` arguments as passed in with converter default
             arguments added
         """
+        valid_masks = available_masks + ["none"]
         converter_arguments = ConvertArgs(None, "convert").get_optional_arguments()
         for item in converter_arguments:
             value = item.get("default", None)
@@ -440,6 +449,9 @@ class Patch():
             if value is None:
                 continue
             option = item.get("dest", item["opts"][1].replace("--", ""))
+            if option == "mask_type" and value not in valid_masks:
+                logger.debug("Amending default mask from '%s' to '%s'", value, valid_masks[0])
+                value = valid_masks[0]
             # Skip options already in arguments
             if hasattr(arguments, option):
                 continue
