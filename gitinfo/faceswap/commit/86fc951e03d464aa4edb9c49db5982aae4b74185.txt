commit 86fc951e03d464aa4edb9c49db5982aae4b74185
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Sun Aug 18 12:37:07 2019 +0000

    Bugfix: Manual tool for AMD updates

diff --git a/tools/lib_alignments/jobs_manual.py b/tools/lib_alignments/jobs_manual.py
index 2097ac8..af261c7 100644
--- a/tools/lib_alignments/jobs_manual.py
+++ b/tools/lib_alignments/jobs_manual.py
@@ -9,6 +9,7 @@ import numpy as np
 
 from lib.multithreading import SpawnProcess
 from lib.queue_manager import queue_manager, QueueEmpty
+from lib.utils import get_backend
 from plugins.plugin_loader import PluginLoader
 from . import Annotate, ExtractedFaces, Frames, Legacy
 
@@ -337,6 +338,7 @@ class Interface():
                 break
         return frame_idx
 
+
 class Help():
     """ Generate and display help in cli and in window """
     def __init__(self, interface):
@@ -367,7 +369,7 @@ class Help():
 
         for section in sections:
             spacer = "=" * int((40 - len(section)) / 2)
-            display = "\n{} {} {}\n".format(spacer, section.upper(), spacer)
+            display = "\n{0} {1} {0}\n".format(spacer, section.upper())
             helpsection = sorted(helpout[section])
             if section == "navigation":
                 helpsection = sorted(helpout[section], reverse=True)
@@ -464,8 +466,7 @@ class Manual():
                                               align_eyes=self.align_eyes)
         self.interface = Interface(self.alignments, self.frames)
         self.help = Help(self.interface)
-        self.mouse_handler = MouseHandler(self.interface, self.arguments.loglevel,
-                                          amd=self.arguments.amd)
+        self.mouse_handler = MouseHandler(self.interface, self.arguments.loglevel)
 
         print(self.help.helptext)
         max_idx = self.frames.count - 1
@@ -644,7 +645,7 @@ class FrameDisplay():
         for item in ("bounding_box", "extract_box", "landmarks", "landmarks_mesh"):
             color = self.interface.get_color(item)
             size = self.interface.get_size(item)
-            state[item]["display"] = False if color == 7 else True
+            state[item]["display"] = color != 7
             if not state[item]["display"]:
                 continue
             logger.trace("Annotating: '%s'", item)
@@ -764,15 +765,15 @@ class FacesDisplay():
 
 class MouseHandler():
     """ Manual Extraction """
-    def __init__(self, interface, loglevel, amd=False):
-        logger.debug("Initializing %s: (interface: %s, loglevel: %s, amd: %s)",
-                     self.__class__.__name__, interface, loglevel, amd)
+    def __init__(self, interface, loglevel):
+        logger.debug("Initializing %s: (interface: %s, loglevel: %s)",
+                     self.__class__.__name__, interface, loglevel)
         self.interface = interface
         self.alignments = interface.alignments
         self.frames = interface.frames
 
         self.extractor = dict()
-        self.init_extractor(loglevel, amd)
+        self.init_extractor(loglevel)
 
         self.mouse_state = None
         self.last_move = None
@@ -785,7 +786,7 @@ class MouseHandler():
                       "bounding_box_orig": list()}
         logger.debug("Initialized %s", self.__class__.__name__)
 
-    def init_extractor(self, loglevel, amd):
+    def init_extractor(self, loglevel):
         """ Initialize Aligner """
         logger.debug("Initialize Extractor")
         out_queue = queue_manager.get_queue("out")
@@ -800,7 +801,7 @@ class MouseHandler():
         d_event = detect_process.event
         detect_process.start()
 
-        plugins = ["fan_amd"] if amd else ["fan"]
+        plugins = ["fan_amd"] if get_backend() == "amd" else ["fan"]
         plugins.append("cv2_dnn")
         for plugin in plugins:
             aligner = PluginLoader.get_aligner(plugin)(loglevel=loglevel,
