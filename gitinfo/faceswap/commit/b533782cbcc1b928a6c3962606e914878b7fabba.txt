commit b533782cbcc1b928a6c3962606e914878b7fabba
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Tue Oct 23 11:26:20 2018 +0100

    Alignments Tool - Fix DFL Index bug (#526)
    
    * Alignments tool. Fix DFL Alignments index bug

diff --git a/tools/lib_alignments/jobs.py b/tools/lib_alignments/jobs.py
index 4ad53c1..b9b175d 100644
--- a/tools/lib_alignments/jobs.py
+++ b/tools/lib_alignments/jobs.py
@@ -340,7 +340,8 @@ class Reformat():
         self.alignments = alignments
         if self.alignments.src_format == "dfl":
             self.faces = Faces(arguments.faces_dir,
-                               self.verbose)
+                               self.verbose,
+                               dfl=True)
 
     def process(self):
         """ Run reformat """
@@ -388,8 +389,7 @@ class Reformat():
                 if chunk_name == b"fcWp":
                     chunk = dfl.read(chunk_length + 12)
                     return pickle.loads(chunk[8:-4])
-                else:
-                    dfl.seek(chunk_length+12, os.SEEK_CUR)
+                dfl.seek(chunk_length+12, os.SEEK_CUR)
             print("ERROR: Couldn't find DFL alignments: {}".format(filename))
 
     @staticmethod
@@ -471,8 +471,7 @@ class RemoveAlignments():
         """ Check the selected face exits """
         frame_name, number_alignments = item[0], item[2]
         number_faces = len(self.items.items.get(frame_name, list()))
-        return bool(number_alignments == 0
-                    or number_alignments == number_faces)
+        return bool(number_alignments in(0, number_faces))
 
     def remove_alignment(self, item):
         """ Remove the alignment from the alignments file """
diff --git a/tools/lib_alignments/media.py b/tools/lib_alignments/media.py
index 7ddd76f..60d061e 100644
--- a/tools/lib_alignments/media.py
+++ b/tools/lib_alignments/media.py
@@ -288,6 +288,9 @@ class MediaLoader():
 
 class Faces(MediaLoader):
     """ Object to hold the faces that are to be swapped out """
+    def __init__(self, folder, verbose, dfl=False):
+        self.dfl = dfl
+        super().__init__(folder, verbose)
 
     def process_folder(self):
         """ Iterate through the faces dir pulling out various information """
@@ -297,8 +300,11 @@ class Faces(MediaLoader):
                 continue
             filename = os.path.splitext(face)[0]
             file_extension = os.path.splitext(face)[1]
-            index = int(filename[filename.rindex("_") + 1:])
-            original_file = "{}".format(filename[:filename.rindex("_")])
+            index = 0
+            original_file = ""
+            if not self.dfl:
+                index = int(filename[filename.rindex("_") + 1:])
+                original_file = "{}".format(filename[:filename.rindex("_")])
             yield {"face_fullname": face,
                    "face_name": filename,
                    "face_extension": file_extension,
@@ -452,7 +458,7 @@ class ExtractedFaces():
         sizes = list()
         for matrix in self.matrices:
             original_roi = self.original_roi(matrix)[0].squeeze()
-            top_left, top_right  = original_roi[0], original_roi[3]
+            top_left, top_right = original_roi[0], original_roi[3]
             len_x = top_right[0] - top_left[0]
             len_y = top_right[1] - top_left[1]
             if top_left[1] == top_right[1]:
@@ -462,7 +468,6 @@ class ExtractedFaces():
             sizes.append(length)
         return sizes
 
-
     def get_aligned_landmarks_for_frame(self, frame, landmarks_xy,
                                         update=False):
         """ Return the original rois for the selected frame """
