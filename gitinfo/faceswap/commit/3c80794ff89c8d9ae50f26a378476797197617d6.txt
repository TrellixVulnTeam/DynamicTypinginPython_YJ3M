commit 3c80794ff89c8d9ae50f26a378476797197617d6
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Fri Jun 14 12:25:29 2019 +0000

    GUI: Show more previews for extract and convert

diff --git a/lib/gui/display.py b/lib/gui/display.py
index 28e7c7d..61aac59 100644
--- a/lib/gui/display.py
+++ b/lib/gui/display.py
@@ -64,12 +64,12 @@ class DisplayNotebook(ttk.Notebook):  # pylint: disable=too-many-ancestors
         build_tabs = getattr(self, "{}_tabs".format(command))
         build_tabs()
 
-    def extract_tabs(self):
+    def extract_tabs(self, command="extract"):
         """ Build the extract tabs """
         logger.debug("Build extract tabs")
         helptext = ("Updates preview from output every 5 "
                     "seconds to limit disk contention")
-        PreviewExtract(self, "preview", helptext, 5000)
+        PreviewExtract(self, "preview", helptext, 5000, command)
         logger.debug("Built extract tabs")
 
     def train_tabs(self):
@@ -88,7 +88,7 @@ class DisplayNotebook(ttk.Notebook):  # pylint: disable=too-many-ancestors
         """ Build the convert tabs
             Currently identical to Extract, so just call that """
         logger.debug("Build convert tabs")
-        self.extract_tabs()
+        self.extract_tabs(command="convert")
         logger.debug("Built convert tabs")
 
     def remove_tabs(self):
diff --git a/lib/gui/display_command.py b/lib/gui/display_command.py
index 72174f1..ac23e10 100644
--- a/lib/gui/display_command.py
+++ b/lib/gui/display_command.py
@@ -23,7 +23,9 @@ class PreviewExtract(DisplayOptionalPage):  # pylint: disable=too-many-ancestors
     def display_item_set(self):
         """ Load the latest preview if available """
         logger.trace("Loading latest preview")
-        get_images().load_latest_preview()
+        size = 256 if self.command == "convert" else 128
+        get_images().load_latest_preview(thumbnail_size=int(size * get_config().scaling_factor),
+                                         frame_dims=(self.winfo_width(), self.winfo_height()))
         self.display_item = get_images().previewoutput
 
     def display_item_process(self):
diff --git a/lib/gui/display_page.py b/lib/gui/display_page.py
index af1528d..d944754 100644
--- a/lib/gui/display_page.py
+++ b/lib/gui/display_page.py
@@ -150,9 +150,10 @@ class DisplayPage(ttk.Frame):  # pylint: disable=too-many-ancestors
 class DisplayOptionalPage(DisplayPage):  # pylint: disable=too-many-ancestors
     """ Parent Context Sensitive Display Tab """
 
-    def __init__(self, parent, tabname, helptext, waittime):
+    def __init__(self, parent, tabname, helptext, waittime, command=None):
         DisplayPage.__init__(self, parent, tabname, helptext)
 
+        self.command = command
         self.display_item = None
 
         self.set_info_text()
diff --git a/lib/gui/utils.py b/lib/gui/utils.py
index 79e5e5f..f04b266 100644
--- a/lib/gui/utils.py
+++ b/lib/gui/utils.py
@@ -5,8 +5,10 @@ import os
 import platform
 import sys
 import tkinter as tk
-
 from tkinter import filedialog, ttk
+
+import numpy as np
+
 from PIL import Image, ImageTk
 
 from lib.Serializer import JSONSerializer
@@ -276,21 +278,62 @@ class Images():
         logger.trace("Image files: %s", files)
         return files
 
-    def load_latest_preview(self):
+    def load_latest_preview(self, thumbnail_size, frame_dims):
         """ Load the latest preview image for extract and convert """
-        logger.trace("Loading preview image")
+        logger.trace("Loading preview image: (thumbnail_size: %s, frame_dims: %s)",
+                     thumbnail_size, frame_dims)
         imagefiles = self.get_images(self.pathoutput)
         if not imagefiles or len(imagefiles) == 1:
             logger.debug("No preview to display")
             self.previewoutput = None
             return
-        # Get penultimate file so we don't accidentally
-        # load a file that is being saved
-        show_file = sorted(imagefiles, key=os.path.getctime)[-2]
-        img = Image.open(show_file)
-        img.thumbnail((768, 432))
-        logger.trace("Displaying preview: '%s'", show_file)
-        self.previewoutput = (img, ImageTk.PhotoImage(img))
+        logger.trace("Image Files: %s", len(imagefiles))
+        num_images = (frame_dims[0] // thumbnail_size) * (frame_dims[1] // thumbnail_size)
+        if num_images > len(imagefiles):
+            logger.debug("Not enough images to generate display. (to display: %s, available "
+                         "images: %s)", num_images, len(imagefiles))
+            self.previewoutput = None
+            return
+        filenames, samples = self.get_preview_samples(imagefiles, num_images, thumbnail_size)
+        show_image = self.place_previews(samples, frame_dims)
+        logger.trace("Displaying preview: '%s'", filenames)
+        self.previewoutput = (show_image, ImageTk.PhotoImage(show_image))
+
+    @staticmethod
+    def get_preview_samples(imagefiles, num_images, thumbnail_size):
+        """ Return a subset of the imagefiles images
+            Exclude final file so we don't accidentally load a file that is being saved """
+        logger.trace("num_images: %s", num_images)
+        samples = list()
+        start_idx = len(imagefiles) - (num_images + 1)
+        end_idx = len(imagefiles) - 1
+        logger.trace("start_idx: %s, end_idx: %s", start_idx, end_idx)
+        show_files = sorted(imagefiles, key=os.path.getctime)[start_idx: end_idx]
+        for fname in show_files:
+            img = Image.open(fname)
+            img.thumbnail((thumbnail_size, thumbnail_size))
+            if img.size[0] != img.size[1]:
+                # Pad to square
+                new_img = Image.new("RGB", (thumbnail_size, thumbnail_size))
+                new_img.paste(img, ((thumbnail_size - img.size[0])//2,
+                                    (thumbnail_size - img.size[1])//2))
+                img = new_img
+            samples.append(np.array(img))
+        samples = np.array(samples)
+        logger.trace("Samples shape: %s", samples.shape)
+        return show_files, samples
+
+    @staticmethod
+    def place_previews(samples, frame_dims):
+        """ Stack the preview images to fit display """
+        num_images, thumbnail_size = samples.shape[:2]
+        logger.trace("num_images: %s, thumbnail_size: %s", num_images, thumbnail_size)
+        cols, rows = frame_dims[0] // thumbnail_size, frame_dims[1] // thumbnail_size
+        logger.trace("cols: %s, rows: %s", cols, rows)
+        display = np.vstack([np.hstack(samples[row * cols: (row + 1) * cols])
+                             for row in range(rows)])
+        logger.trace("display shape: %s", display.shape)
+        return Image.fromarray(display)
 
     def load_training_preview(self):
         """ Load the training preview images """
diff --git a/plugins/extract/pipeline.py b/plugins/extract/pipeline.py
index 8583893..ea920bf 100644
--- a/plugins/extract/pipeline.py
+++ b/plugins/extract/pipeline.py
@@ -107,8 +107,7 @@ class Extractor():
             return True
 
         if not multiprocess:
-            logger.info("NB: Parallel processing disabled.You may get faster "
-                        "extraction speeds by enabling it with the -mp switch")
+            logger.debug("Parallel processing disabled by cli.")
             return False
 
         required_vram = detector_vram + aligner_vram + 320  # 320MB buffer
