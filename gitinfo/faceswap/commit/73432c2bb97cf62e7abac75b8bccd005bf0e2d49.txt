commit 73432c2bb97cf62e7abac75b8bccd005bf0e2d49
Author: Clorr <colin@clorr.fr>
Date:   Sun Dec 17 15:41:43 2017 +0100

    Adding an extract tool for faces

diff --git a/README_EXTRACT.md b/README_EXTRACT.md
new file mode 100644
index 0000000..5d6a46d
--- /dev/null
+++ b/README_EXTRACT.md
@@ -0,0 +1,10 @@
+### Simple face extractor
+
+Takes pictures in the 'src' folder and extracts faces in 'extract'
+
+Note : the cropped area may have to be improved
+
+From https://docs.opencv.org/3.3.0/d7/d8b/tutorial_py_face_detection.html
+And https://stackoverflow.com/questions/13211745/detect-face-then-autocrop-pictures
+
+You can also look tools like https://github.com/leblancfg/autocrop
\ No newline at end of file
diff --git a/extract.py b/extract.py
new file mode 100644
index 0000000..8cbf743
--- /dev/null
+++ b/extract.py
@@ -0,0 +1,29 @@
+import cv2
+import numpy
+from pathlib import Path
+
+from utils import get_image_paths
+
+images_SRC = get_image_paths( "src" )
+
+# Give right path to the xml file or put it directly in current folder
+face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
+
+def crop_faces( image ):
+    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
+
+    faces = face_cascade.detectMultiScale(gray, 1.3, 5)
+    for (x,y,w,h) in faces:
+        crop_img = image[y: y + h, x: x + w]
+        final = cv2.resize(crop_img, (255,255))
+        yield final
+
+output_dir = Path( 'extract' )
+#output_dir.mkdir( parents=True, exist_ok=True )
+
+for fn in images_SRC:
+    image = cv2.imread(fn)
+#Add : cv.EqualizeHist(image, image) ?
+    for (idx, img) in enumerate(crop_faces( image )):
+        output_file = output_dir / Path(fn).stem
+        cv2.imwrite( str(output_file) + str(idx) + Path(fn).suffix, img )
