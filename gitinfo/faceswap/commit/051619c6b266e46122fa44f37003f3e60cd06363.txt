commit 051619c6b266e46122fa44f37003f3e60cd06363
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Fri Feb 22 14:40:50 2019 +0000

    Update setup.py for Conda

diff --git a/.install/windows/install.nsi b/.install/windows/install.nsi
index 9505512..a94ec48 100644
--- a/.install/windows/install.nsi
+++ b/.install/windows/install.nsi
@@ -384,7 +384,7 @@ Function DesktopShortcut
     SetOutPath "$INSTDIR"
     StrCpy $0 "faceswap_win_launcher.bat"
     FileOpen $9 "$INSTDIR\$0" w
-    FileWrite $9 "$dirConda\scripts\activate.bat && conda activate ${envName} && python $INSTDIR/faceswap.py gui$\r$\n"
+    FileWrite $9 "$\"$dirConda\scripts\activate.bat$\" && conda activate ${envName} && python $\"$INSTDIR/faceswap.py gui$\"$\r$\n"
     FileClose $9
     CreateShortCut "$DESKTOP\${envName}.lnk" "$INSTDIR\$0" "" "$INSTDIR\.install\windows\fs_logo_32.ico"
 FunctionEnd
\ No newline at end of file
diff --git a/lib/cli.py b/lib/cli.py
index 36e127a..23a25fa 100644
--- a/lib/cli.py
+++ b/lib/cli.py
@@ -581,7 +581,7 @@ class ConvertArgs(ExtractConvertArgs):
                         "dfl",
                         #  "cnn",  Removed until implemented
                         "none"],
-            "default": "facehull_rect",
+            "default": "facehull",
             "help": "R|Mask to use to replace faces."
                     "\nellipse: Oval around face."
                     "\nfacehull: Face cutout based on landmarks."
diff --git a/requirements.txt b/requirements.txt
index 7bb07ab..e9c9460 100755
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,7 +1,7 @@
 tqdm
 psutil
-pathlib==1.0.1
-scandir==1.7
+pathlib
+scandir
 numpy==1.15.4
 opencv-python
 scikit-image
@@ -9,7 +9,7 @@ scikit-learn
 matplotlib==2.2.2
 ffmpy==0.2.2
 nvidia-ml-py3
-h5py==2.8.0
+h5py==2.9.0
 Keras==2.2.4
 cmake
 dlib
@@ -17,5 +17,5 @@ face-recognition
 
 # tensorflow is included within the docker image.
 # If you are looking for dependencies for a manual install,
-# you may want to install tensorflow-gpu==1.4.0 for CUDA 8.0 or tensorflow-gpu>=1.6.0 for CUDA 9.0
+# you may want to install tensorflow-gpu==1.4.0 for CUDA 8.0 or tensorflow-gpu>=1.11.0 for CUDA 9.0
 # NB: MTCNN will not work with tensorflow releases prior to 1.6.0
diff --git a/setup.py b/setup.py
index 902f452..d44cb3f 100755
--- a/setup.py
+++ b/setup.py
@@ -9,7 +9,7 @@ import re
 import sys
 import platform
 
-from subprocess import run, PIPE, Popen
+from subprocess import CalledProcessError, run, PIPE, Popen
 
 INSTALL_FAILED = False
 # Revisions of tensorflow-gpu and cuda/cudnn requirements
@@ -44,7 +44,7 @@ class Environment():
         self.upgrade_pip()
 
         self.installed_packages = self.get_installed_packages()
-        self.installed_conda_packages = self.get_installed_conda_packages()
+        self.get_installed_conda_packages()
 
     @property
     def encoding(self):
@@ -190,16 +190,14 @@ class Environment():
 
     def get_installed_conda_packages(self):
         """ Get currently installed conda packages """
-        installed_packages = dict()
         if not self.is_conda:
-            return installed_packages
+            return
         chk = os.popen("conda list").read()
         installed = [re.sub(" +", " ", line.strip())
                      for line in chk.splitlines() if not line.startswith("#")]
         for pkg in installed:
             item = pkg.split(" ")
-            installed_packages[item[0]] = item[1]
-        return installed_packages
+            self.installed_packages[item[0]] = item[1]
 
     def update_tf_dep(self):
         """ Update Tensorflow Dependency """
@@ -253,9 +251,9 @@ class Environment():
     def update_tf_dep_conda(self):
         """ Update Conda TF Dependency """
         if not self.enable_cuda:
-            self.conda_required_packages.append(("tensorflow==1.12.0", ))
+            self.required_packages.append("tensorflow==1.12.0")
         else:
-            self.conda_required_packages.append(("tensorflow-gpu==1.12.0", ))
+            self.required_packages.append("tensorflow-gpu==1.12.0")
 
 
 class Output():
@@ -599,11 +597,11 @@ class Install():
 
     def check_conda_missing_dep(self):
         """ Check for conda missing dependencies """
-        if not self.env.enable_cuda:
+        if not self.env.is_conda:
             return
         for pkg in self.env.conda_required_packages:
             key = pkg[0].split("==")[0]
-            if key not in self.env.installed_conda_packages:
+            if key not in self.env.installed_packages:
                 self.env.conda_missing_packages.append(pkg)
                 continue
             else:
@@ -615,58 +613,81 @@ class Install():
     def install_missing_dep(self):
         """ Install missing dependencies """
         if self.env.missing_packages:
-            self.output.info("Installing Required Python Packages. "
-                             "This may take some time...")
-            self.install_pip_packages()
+            self.install_python_packages()
         if self.env.conda_missing_packages:
-            self.output.info("Installing Required Conda Packages. "
-                             "This may take some time...")
             self.install_conda_packages()
 
-    def install_pip_packages(self):
+    def install_python_packages(self):
         """ Install required pip packages """
+        self.output.info("Installing Required Python Packages. This may take some time...")
         for pkg in self.env.missing_packages:
-            pipexe = [sys.executable, "-m", "pip"]
-            # hide info/warning and fix cache hang
-            pipexe.extend(["install", "-qq", "--no-cache-dir"])
-            # install as user to solve perm restriction
-            if not self.env.is_admin and not self.env.is_virtualenv:
-                pipexe.append("--user")
-            if pkg.startswith("dlib"):
-                opt = "yes" if self.env.enable_cuda else "no"
-                pipexe.extend(["--install-option=--{}".format(opt),
-                               "--install-option=DLIB_USE_CUDA"])
-                if self.env.os_version[0] == "Windows":
-                    pipexe.extend(["--global-option=-G",
-                                   "--global-option=Visual Studio 14 2015"])
-                msg = ("Compiling {}. This will take a while...\n"
-                       "Please ignore the following UserWarning: "
-                       "'Disabling all use of wheels...'".format(pkg))
-            else:
-                msg = "Installing {}".format(pkg)
-            self.output.info(msg)
-            pipexe.append(pkg)
-            run(pipexe)
+            if self.env.is_conda:
+                verbose = pkg.startswith("tensorflow")
+                if self.conda_installer(pkg, verbose=verbose):
+                    continue
+            self.pip_installer(pkg)
 
     def install_conda_packages(self):
         """ Install required conda packages """
+        self.output.info("Installing Required Conda Packages. This may take some time...")
         for pkg in self.env.conda_missing_packages:
-            condaexe = ["conda", "install", "-y"]
-            if not pkg[0].startswith("tensorflow"):
-                # Let TF be verbose because it takes a long time
-                condaexe.append("-q")
-            if len(pkg) == 2:
-                condaexe.extend(["-c", pkg[1]])
-            condaexe.append(pkg[0])
-            self.output.info("Installing {}".format(pkg[0]))
-
-            if pkg[0].startswith("tensorflow"):
-                # Let TF be verbose because it takes a long time
-                run(condaexe)
-                continue
-
-            with open(os.devnull, "w") as devnull:
-                run(condaexe, stdout=devnull)
+            channel = None if len(pkg) !=2 else pkg[1]
+            self.conda_installer(pkg[0], channel=channel, conda_only=True)
+
+    def conda_installer(self, package, channel=None, verbose=False, conda_only=False):
+        """ Install a conda package """
+        #TODO Remove this
+        verbose = True       
+        success = True
+        condaexe = ["conda", "install", "-y"]
+        if not verbose:
+            condaexe.append("-q")
+        if channel:
+            condaexe.extend(["-c", channel])
+        condaexe.append(package)
+        self.output.info("Installing {}".format(package))
+        try:
+            if verbose:
+                run(condaexe, check=True)
+            else:
+                with open(os.devnull, "w") as devnull:
+                    run(condaexe, stdout=devnull, stderr=devnull, check=True)
+        except CalledProcessError:
+            if not conda_only:
+                self.output.info("Couldn't install {} with Conda. Trying pip".format(package))
+            else:
+                self.output.warning("Couldn't install {} with Conda. "
+                                    "Please install this package manually".format(package))
+            success = False
+        return success
+
+    def pip_installer(self, package):
+        """ Install a pip package """
+        pipexe = [sys.executable, "-m", "pip"]
+        # hide info/warning and fix cache hang
+        pipexe.extend(["install", "-qq", "--no-cache-dir"])
+        # install as user to solve perm restriction
+        if not self.env.is_admin and not self.env.is_virtualenv:
+            pipexe.append("--user")
+        if package.startswith("dlib"):
+            opt = "yes" if self.env.enable_cuda else "no"
+            pipexe.extend(["--install-option=--{}".format(opt),
+                           "--install-option=DLIB_USE_CUDA"])
+            if self.env.os_version[0] == "Windows":
+                pipexe.extend(["--global-option=-G",
+                               "--global-option=Visual Studio 14 2015"])
+            msg = ("Compiling {}. This will take a while...\n"
+                   "Please ignore the following UserWarning: "
+                   "'Disabling all use of wheels...'".format(package))
+        else:
+            msg = "Installing {}".format(package)
+        self.output.info(msg)
+        pipexe.append(package)
+        try:
+            run(pipexe, check=True)
+        except CalledProcessError:
+            self.output.warning("Couldn't install {} with pip. "
+                                "Please install this package manually".format(package))
 
 
 class Tips():
