commit bb3e3d0f1633b66023dd0a0b82b41f69381af6ff
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Mon Mar 30 19:24:29 2020 +0100

    Extraction - Auto generate Components and Extended Masks

diff --git a/lib/alignments.py b/lib/alignments.py
index 8d648af..de54b0e 100644
--- a/lib/alignments.py
+++ b/lib/alignments.py
@@ -231,7 +231,7 @@ class Alignments():
         """
         sample_filename = next(fname for fname in self.data)
         basename = sample_filename[:sample_filename.rfind("_")]
-        logger.info("sample filename: %s, base filename: %s", sample_filename, basename)
+        logger.debug("sample filename: %s, base filename: %s", sample_filename, basename)
         logger.info("Saving video meta information to Alignments file")
         for idx, pts in enumerate(pts_time):
             meta = dict(pts_time=pts, keyframe=idx in keyframes)
diff --git a/lib/cli.py b/lib/cli.py
index d16ffdb..4f7ac22 100644
--- a/lib/cli.py
+++ b/lib/cli.py
@@ -47,15 +47,15 @@ class ScriptExecutor():
         min_ver = 1.12
         max_ver = 1.15
         try:
-            # Ensure tensorflow doesn't pin all threads to one core when using tf-mkl
+            # Ensure tensorflow doesn't pin all threads to one core when using Math Kernel Library
             os.environ["KMP_AFFINITY"] = "disabled"
-            import tensorflow as tf
+            import tensorflow as tf  # pylint:disable=import-outside-toplevel
         except ImportError as err:
             raise FaceswapError("There was an error importing Tensorflow. This is most likely "
                                 "because you do not have TensorFlow installed, or you are trying "
                                 "to run tensorflow-gpu on a system without an Nvidia graphics "
                                 "card. Original import error: {}".format(str(err)))
-        tf_ver = float(".".join(tf.__version__.split(".")[:2]))
+        tf_ver = float(".".join(tf.__version__.split(".")[:2]))  # pylint:disable=no-member
         if tf_ver < min_ver:
             raise FaceswapError("The minimum supported Tensorflow is version {} but you have "
                                 "version {} installed. Please upgrade Tensorflow.".format(
@@ -85,7 +85,7 @@ class ScriptExecutor():
 
         try:
             # pylint: disable=unused-variable
-            import tkinter  # noqa pylint: disable=unused-import
+            import tkinter  # noqa pylint: disable=unused-import,import-outside-toplevel
         except ImportError:
             logger.error(
                 "It looks like TkInter isn't installed for your OS, so "
@@ -153,11 +153,11 @@ class ScriptExecutor():
         """ Test for plaidml and setup for AMD """
         logger.debug("Setting up for AMD")
         try:
-            import plaidml  # noqa pylint:disable=unused-import
+            import plaidml  # noqa pylint:disable=unused-import,import-outside-toplevel
         except ImportError:
             logger.error("PlaidML not found. Run `pip install plaidml-keras` for AMD support")
             return False
-        from lib.plaidml_tools import setup_plaidml
+        from lib.plaidml_tools import setup_plaidml  # pylint:disable=import-outside-toplevel
         setup_plaidml(loglevel)
         logger.debug("setup up for PlaidML")
         return True
@@ -255,14 +255,14 @@ class FilesFullPaths(FileFullPaths):  # pylint: disable=too-few-public-methods
     """ Class that the gui uses to determine that the input can take multiple files as an input.
         Inherits functionality from FileFullPaths
         Has the effect of giving the user 2 Open Dialogue buttons in the gui """
-    pass
+    pass  # pylint: disable=unnecessary-pass
 
 
 class DirOrFileFullPaths(FileFullPaths):  # pylint: disable=too-few-public-methods
     """ Class that the gui uses to determine that the input can take a folder or a filename.
         Inherits functionality from FileFullPaths
         Has the effect of giving the user 2 Open Dialogue buttons in the gui """
-    pass
+    pass  # pylint: disable=unnecessary-pass
 
 
 class SaveFileFullPaths(FileFullPaths):
@@ -568,21 +568,20 @@ class ExtractArgs(ExtractConvertArgs):
                     "\nL|cv2-dnn: A CPU only landmark detector. Faster, less resource intensive, "
                     "but less accurate. Only use this if not using a GPU and time is important."
                     "\nL|fan: Best aligner. Fast on GPU, slow on CPU."})
+        mask_choices = [mask
+                        for mask in PluginLoader.get_available_extractors("mask", add_none=True)
+                        if mask not in ("components", "extended")]
         argument_list.append({
             "opts": ("-M", "--masker"),
             "action": Radio,
             "type": str.lower,
-            "choices": PluginLoader.get_available_extractors("mask", add_none=True),
-            "default": "extended",
+            "choices": mask_choices,
+            "default": "none",
             "group": "Plugins",
-            "help": "R|Masker to use."
+            "help": "R|Additional Masker to use. NB: The Extended and Components (landmark based) "
+                    "masks are automatically generated on extraction. Any mask selected here "
+                    "will be generated in addition to these default masks."
                     "\nL|none: Don't use a mask."
-                    "\nL|components: Mask designed to provide facial segmentation based on the "
-                    "positioning of landmark locations. A convex hull is constructed around the "
-                    "exterior of the landmarks to create a mask."
-                    "\nL|extended: Mask designed to provide facial segmentation based on the "
-                    "positioning of landmark locations. A convex hull is constructed around the "
-                    "exterior of the landmarks and the mask is extended upwards onto the forehead."
                     "\nL|vgg-clear: Mask designed to provide smart segmentation of mostly frontal "
                     "faces clear of obstructions. Profile faces and obstructions may result in "
                     "sub-par performance."
@@ -593,7 +592,15 @@ class ExtractArgs(ExtractConvertArgs):
                     "\nL|unet-dfl: Mask designed to provide smart segmentation of mostly frontal "
                     "faces. The mask model has been trained by community members and will need "
                     "testing for further description. Profile faces may result in sub-par "
-                    "performance."})
+                    "performance."
+                    "\nThe auto generated masks are as follows:"
+                    "\nL|components: Mask designed to provide facial segmentation based on the "
+                    "positioning of landmark locations. A convex hull is constructed around the "
+                    "exterior of the landmarks to create a mask."
+                    "\nL|extended: Mask designed to provide facial segmentation based on the "
+                    "positioning of landmark locations. A convex hull is constructed around the "
+                    "exterior of the landmarks and the mask is extended upwards onto the "
+                    "forehead."})
         argument_list.append({
             "opts": ("-nm", "--normalization"),
             "action": Radio,
diff --git a/plugins/extract/_base.py b/plugins/extract/_base.py
index 8cb3ffc..5f1df4e 100644
--- a/plugins/extract/_base.py
+++ b/plugins/extract/_base.py
@@ -77,7 +77,7 @@ class Extractor():
     input_size: int
         The input size to the model in pixels across one edge. The input size should always be
         square.
-    colorformat: str
+    color_format: str
         Color format for model. Must be ``'BGR'``, ``'RGB'`` or ``'GRAY'``. Defaults to ``'BGR'``
         if not explicitly set.
     vram: int
@@ -113,7 +113,7 @@ class Extractor():
         # << SET THE FOLLOWING IN PLUGINS __init__ IF DIFFERENT FROM DEFAULT >> #
         self.name = None
         self.input_size = None
-        self.colorformat = "BGR"
+        self.color_format = "BGR"
         self.vram = None
         self.vram_warnings = None  # Will run at this with warnings
         self.vram_per_batch = None
@@ -328,7 +328,10 @@ class Extractor():
                      self.__class__.__name__, args, kwargs)
         logger.info("Initializing %s (%s)...", self.name, self._plugin_type.title())
         self.queue_size = 1
-        self._add_queues(kwargs["in_queue"], kwargs["out_queue"], ["predict", "post"])
+        name = self.name.replace(" ", "_").lower()
+        self._add_queues(kwargs["in_queue"],
+                         kwargs["out_queue"],
+                         ["predict_{}".format(name), "post_{}".format(name)])
         self._compile_threads()
         try:
             self.init_model()
@@ -362,17 +365,19 @@ class Extractor():
     def _compile_threads(self):
         """ Compile the threads into self._threads list """
         logger.debug("Compiling %s threads", self._plugin_type)
-        self._add_thread("{}_input".format(self._plugin_type),
+        name = self.name.replace(" ", "_").lower()
+        base_name = "{}_{}".format(self._plugin_type, name)
+        self._add_thread("{}_input".format(base_name),
                          self.process_input,
                          self._queues["in"],
-                         self._queues["predict"])
-        self._add_thread("{}_predict".format(self._plugin_type),
+                         self._queues["predict_{}".format(name)])
+        self._add_thread("{}_predict".format(base_name),
                          self._predict,
-                         self._queues["predict"],
-                         self._queues["post"])
-        self._add_thread("{}_output".format(self._plugin_type),
+                         self._queues["predict_{}".format(name)],
+                         self._queues["post_{}".format(name)])
+        self._add_thread("{}_output".format(base_name),
                          self.process_output,
-                         self._queues["post"],
+                         self._queues["post_{}".format(name)],
                          self._queues["out"])
         logger.debug("Compiled %s threads: %s", self._plugin_type, self._threads)
 
diff --git a/plugins/extract/align/_base.py b/plugins/extract/align/_base.py
index 885d101..a0aeb7f 100644
--- a/plugins/extract/align/_base.py
+++ b/plugins/extract/align/_base.py
@@ -125,7 +125,7 @@ class Aligner(Extractor):  # pylint:disable=abstract-method
                 self._queues["out"].put(item)
                 continue
 
-            converted_image = item.get_image_copy(self.colorformat)
+            converted_image = item.get_image_copy(self.color_format)
             for f_idx, face in enumerate(item.detected_faces):
                 batch.setdefault("image", []).append(converted_image)
                 batch.setdefault("detected_faces", []).append(face)
@@ -219,7 +219,7 @@ class Aligner(Extractor):  # pylint:disable=abstract-method
     def _normalize_faces(self, faces):
         """ Normalizes the face for feeding into model
 
-        The normalization method is dictated by the command line argument `-nh (--normalization)`
+        The normalization method is dictated by the normalization command line argument
         """
         if self._normalize_method is None:
             return faces
diff --git a/plugins/extract/align/cv2_dnn.py b/plugins/extract/align/cv2_dnn.py
index 317518b..1458cef 100644
--- a/plugins/extract/align/cv2_dnn.py
+++ b/plugins/extract/align/cv2_dnn.py
@@ -39,7 +39,7 @@ class Align(Aligner):
 
         self.name = "cv2-DNN Aligner"
         self.input_size = 128
-        self.colorformat = "RGB"
+        self.color_format = "RGB"
         self.vram = 0  # Doesn't use GPU
         self.vram_per_batch = 0
         self.batchsize = 1
diff --git a/plugins/extract/align/fan.py b/plugins/extract/align/fan.py
index a4924bf..3be1d14 100644
--- a/plugins/extract/align/fan.py
+++ b/plugins/extract/align/fan.py
@@ -20,7 +20,7 @@ class Align(Aligner):
         super().__init__(git_model_id=git_model_id, model_filename=model_filename, **kwargs)
         self.name = "FAN"
         self.input_size = 256
-        self.colorformat = "RGB"
+        self.color_format = "RGB"
         self.vram = 2240
         self.vram_warnings = 512  # Will run at this with warnings
         self.vram_per_batch = 64
diff --git a/plugins/extract/align/fan_defaults.py b/plugins/extract/align/fan_defaults.py
index 1c08acd..a790c6e 100644
--- a/plugins/extract/align/fan_defaults.py
+++ b/plugins/extract/align/fan_defaults.py
@@ -18,7 +18,7 @@
     The following keys are expected for the _DEFAULTS <metadata> dict:
         datatype:  [required] A python type class. This limits the type of data that can be
                    provided in the .ini file and ensures that the value is returned in the
-                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
+                   correct type to faceswap. Valid data types are: <class 'int'>, <class 'float'>,
                    <class 'str'>, <class 'bool'>.
         default:   [required] The default value for this option.
         info:      [required] A string describing what this option does.
@@ -29,10 +29,10 @@
                    a combobox / radio option in the GUI.
         gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
                    radio buttons rather than a combobox to display this option.
-        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
+        min_max:   [partial] For <class 'int'> and <class 'float'> data types this is required
                    otherwise it is ignored. Should be a tuple of min and max accepted values.
                    This is used for controlling the GUI slider range. Values are not enforced.
-        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
+        rounding:  [partial] For <class 'int'> and <class 'float'> data types this is
                    required otherwise it is ignored. Used for the GUI slider. For floats, this
                    is the number of decimal places to display. For ints this is the step size.
         fixed:     [optional] [train only]. Training configurations are fixed when the model is
diff --git a/plugins/extract/detect/_base.py b/plugins/extract/detect/_base.py
index e562e97..345903a 100644
--- a/plugins/extract/detect/_base.py
+++ b/plugins/extract/detect/_base.py
@@ -229,7 +229,7 @@ class Detector(Extractor):  # pylint:disable=abstract-method
         item: :class:`plugins.extract.pipeline.ExtractMedia`
             The input item from the pipeline
         """
-        image = item.get_image_copy(self.colorformat)
+        image = item.get_image_copy(self.color_format)
         scale = self._set_scale(item.image_size)
         pad = self._set_padding(item.image_size, scale)
 
diff --git a/plugins/extract/detect/cv2_dnn_defaults.py b/plugins/extract/detect/cv2_dnn_defaults.py
index 3402385..ad2f995 100755
--- a/plugins/extract/detect/cv2_dnn_defaults.py
+++ b/plugins/extract/detect/cv2_dnn_defaults.py
@@ -18,7 +18,7 @@
     The following keys are expected for the _DEFAULTS <metadata> dict:
         datatype:  [required] A python type class. This limits the type of data that can be
                    provided in the .ini file and ensures that the value is returned in the
-                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
+                   correct type to faceswap. Valid data types are: <class 'int'>, <class 'float'>,
                    <class 'str'>, <class 'bool'>.
         default:   [required] The default value for this option.
         info:      [required] A string describing what this option does.
@@ -29,10 +29,10 @@
                    a combobox / radio option in the GUI.
         gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
                    radio buttons rather than a combobox to display this option.
-        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
+        min_max:   [partial] For <class 'int'> and <class 'float'> data types this is required
                    otherwise it is ignored. Should be a tuple of min and max accepted values.
                    This is used for controlling the GUI slider range. Values are not enforced.
-        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
+        rounding:  [partial] For <class 'int'> and <class 'float'> data types this is
                    required otherwise it is ignored. Used for the GUI slider. For floats, this
                    is the number of decimal places to display. For ints this is the step size.
         fixed:     [optional] [train only]. Training configurations are fixed when the model is
diff --git a/plugins/extract/detect/mtcnn.py b/plugins/extract/detect/mtcnn.py
index 13942d9..4e623aa 100644
--- a/plugins/extract/detect/mtcnn.py
+++ b/plugins/extract/detect/mtcnn.py
@@ -25,7 +25,7 @@ class Detect(Detector):
         self.vram_per_batch = 32
         self.batchsize = self.config["batch-size"]
         self.kwargs = self.validate_kwargs()
-        self.colorformat = "RGB"
+        self.color_format = "RGB"
 
     def validate_kwargs(self):
         """ Validate that config options are correct. If not reset to default """
diff --git a/plugins/extract/detect/mtcnn_defaults.py b/plugins/extract/detect/mtcnn_defaults.py
index f2d28bc..2d7a725 100755
--- a/plugins/extract/detect/mtcnn_defaults.py
+++ b/plugins/extract/detect/mtcnn_defaults.py
@@ -18,7 +18,7 @@
     The following keys are expected for the _DEFAULTS <metadata> dict:
         datatype:  [required] A python type class. This limits the type of data that can be
                    provided in the .ini file and ensures that the value is returned in the
-                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
+                   correct type to faceswap. Valid data types are: <class 'int'>, <class 'float'>,
                    <class 'str'>, <class 'bool'>.
         default:   [required] The default value for this option.
         info:      [required] A string describing what this option does.
@@ -29,10 +29,10 @@
                    a combobox / radio option in the GUI.
         gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
                    radio buttons rather than a combobox to display this option.
-        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
+        min_max:   [partial] For <class 'int'> and <class 'float'> data types this is required
                    otherwise it is ignored. Should be a tuple of min and max accepted values.
                    This is used for controlling the GUI slider range. Values are not enforced.
-        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
+        rounding:  [partial] For <class 'int'> and <class 'float'> data types this is
                    required otherwise it is ignored. Used for the GUI slider. For floats, this
                    is the number of decimal places to display. For ints this is the step size.
         fixed:     [optional] [train only]. Training configurations are fixed when the model is
diff --git a/plugins/extract/detect/s3fd_defaults.py b/plugins/extract/detect/s3fd_defaults.py
index 3d65ad3..1f7100f 100755
--- a/plugins/extract/detect/s3fd_defaults.py
+++ b/plugins/extract/detect/s3fd_defaults.py
@@ -18,7 +18,7 @@
     The following keys are expected for the _DEFAULTS <metadata> dict:
     datatype:  [required] A python type class. This limits the type of data that can be
                 provided in the .ini file and ensures that the value is returned in the
-                correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
+                correct type to faceswap. Valid data types are: <class 'int'>, <class 'float'>,
                 <class 'str'>, <class 'bool'>.
     default:   [required] The default value for this option.
     info:      [required] A string describing what this option does.
@@ -29,10 +29,10 @@
                 a combobox / radio option in the GUI.
     gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
                 radio buttons rather than a combobox to display this option.
-    min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
+    min_max:   [partial] For <class 'int'> and <class 'float'> data types this is required
                 otherwise it is ignored. Should be a tuple of min and max accepted values.
                 This is used for controlling the GUI slider range. Values are not enforced.
-    rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
+    rounding:  [partial] For <class 'int'> and <class 'float'> data types this is
                 required otherwise it is ignored. Used for the GUI slider. For floats, this
                 is the number of decimal places to display. For ints this is the step size.
     fixed:     [optional] [train only]. Training configurations are fixed when the model is
diff --git a/plugins/extract/mask/_base.py b/plugins/extract/mask/_base.py
index 13b9096..3dd3ece 100644
--- a/plugins/extract/mask/_base.py
+++ b/plugins/extract/mask/_base.py
@@ -114,7 +114,7 @@ class Masker(Extractor):  # pylint:disable=abstract-method
                 self._queues["out"].put(item)
                 continue
             for f_idx, face in enumerate(item.detected_faces):
-                face.load_feed_face(item.get_image_copy(self.colorformat),
+                face.load_feed_face(item.get_image_copy(self.color_format),
                                     size=self.input_size,
                                     coverage_ratio=1.0,
                                     dtype="float32",
diff --git a/plugins/extract/mask/components.py b/plugins/extract/mask/components.py
index 3c2ffec..6dd6f02 100644
--- a/plugins/extract/mask/components.py
+++ b/plugins/extract/mask/components.py
@@ -44,7 +44,7 @@ class Mask(Masker):
 
     @staticmethod
     def parse_parts(landmarks):
-        """ Component facehull mask """
+        """ Component face hull mask """
         r_jaw = (landmarks[0:9], landmarks[17:18])
         l_jaw = (landmarks[8:17], landmarks[26:27])
         r_cheek = (landmarks[17:20], landmarks[8:9])
diff --git a/plugins/extract/mask/extended.py b/plugins/extract/mask/extended.py
index a182c0a..93995f0 100644
--- a/plugins/extract/mask/extended.py
+++ b/plugins/extract/mask/extended.py
@@ -44,7 +44,7 @@ class Mask(Masker):
 
     @staticmethod
     def parse_parts(landmarks):
-        """ Extended facehull mask """
+        """ Extended face hull mask """
         # mid points between the side of face and eye point
         ml_pnt = (landmarks[36] + landmarks[0]) // 2
         mr_pnt = (landmarks[16] + landmarks[45]) // 2
diff --git a/plugins/extract/mask/unet_dfl_defaults.py b/plugins/extract/mask/unet_dfl_defaults.py
index a00b170..5956610 100644
--- a/plugins/extract/mask/unet_dfl_defaults.py
+++ b/plugins/extract/mask/unet_dfl_defaults.py
@@ -18,7 +18,7 @@
     The following keys are expected for the _DEFAULTS <metadata> dict:
         datatype:  [required] A python type class. This limits the type of data that can be
                    provided in the .ini file and ensures that the value is returned in the
-                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
+                   correct type to faceswap. Valid data types are: <class 'int'>, <class 'float'>,
                    <class 'str'>, <class 'bool'>.
         default:   [required] The default value for this option.
         info:      [required] A string describing what this option does.
@@ -29,10 +29,10 @@
                    a combobox / radio option in the GUI.
         gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
                    radio buttons rather than a combobox to display this option.
-        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
+        min_max:   [partial] For <class 'int'> and <class 'float'> data types this is required
                    otherwise it is ignored. Should be a tuple of min and max accepted values.
                    This is used for controlling the GUI slider range. Values are not enforced.
-        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
+        rounding:  [partial] For <class 'int'> and <class 'float'> data types this is
                    required otherwise it is ignored. Used for the GUI slider. For floats, this
                    is the number of decimal places to display. For ints this is the step size.
         fixed:     [optional] [train only]. Training configurations are fixed when the model is
diff --git a/plugins/extract/mask/vgg_clear_defaults.py b/plugins/extract/mask/vgg_clear_defaults.py
index 6ce28a9..ef2c307 100644
--- a/plugins/extract/mask/vgg_clear_defaults.py
+++ b/plugins/extract/mask/vgg_clear_defaults.py
@@ -18,7 +18,7 @@
     The following keys are expected for the _DEFAULTS <metadata> dict:
         datatype:  [required] A python type class. This limits the type of data that can be
                    provided in the .ini file and ensures that the value is returned in the
-                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
+                   correct type to faceswap. Valid data types are: <class 'int'>, <class 'float'>,
                    <class 'str'>, <class 'bool'>.
         default:   [required] The default value for this option.
         info:      [required] A string describing what this option does.
@@ -29,10 +29,10 @@
                    a combobox / radio option in the GUI.
         gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
                    radio buttons rather than a combobox to display this option.
-        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
+        min_max:   [partial] For <class 'int'> and <class 'float'> data types this is required
                    otherwise it is ignored. Should be a tuple of min and max accepted values.
                    This is used for controlling the GUI slider range. Values are not enforced.
-        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
+        rounding:  [partial] For <class 'int'> and <class 'float'> data types this is
                    required otherwise it is ignored. Used for the GUI slider. For floats, this
                    is the number of decimal places to display. For ints this is the step size.
         fixed:     [optional] [train only]. Training configurations are fixed when the model is
diff --git a/plugins/extract/mask/vgg_obstructed.py b/plugins/extract/mask/vgg_obstructed.py
index 95d7056..487712f 100644
--- a/plugins/extract/mask/vgg_obstructed.py
+++ b/plugins/extract/mask/vgg_obstructed.py
@@ -28,7 +28,7 @@ class Mask(Masker):
         self.name = "VGG Obstructed"
         self.input_size = 500
         self.vram = 3936
-        self.vram_warnings = 1088  # at BS 1. OOMs at higher batchsizes
+        self.vram_warnings = 1088  # at BS 1. OOMs at higher batch sizes
         self.vram_per_batch = 304
         self.batchsize = self.config["batch-size"]
 
diff --git a/plugins/extract/mask/vgg_obstructed_defaults.py b/plugins/extract/mask/vgg_obstructed_defaults.py
index 9a21d76..0588ee1 100644
--- a/plugins/extract/mask/vgg_obstructed_defaults.py
+++ b/plugins/extract/mask/vgg_obstructed_defaults.py
@@ -18,7 +18,7 @@
     The following keys are expected for the _DEFAULTS <metadata> dict:
         datatype:  [required] A python type class. This limits the type of data that can be
                    provided in the .ini file and ensures that the value is returned in the
-                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
+                   correct type to faceswap. Valid data types are: <class 'int'>, <class 'float'>,
                    <class 'str'>, <class 'bool'>.
         default:   [required] The default value for this option.
         info:      [required] A string describing what this option does.
@@ -29,10 +29,10 @@
                    a combobox / radio option in the GUI.
         gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
                    radio buttons rather than a combobox to display this option.
-        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
+        min_max:   [partial] For <class 'int'> and <class 'float'> data types this is required
                    otherwise it is ignored. Should be a tuple of min and max accepted values.
                    This is used for controlling the GUI slider range. Values are not enforced.
-        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
+        rounding:  [partial] For <class 'int'> and <class 'float'> data types this is
                    required otherwise it is ignored. Used for the GUI slider. For floats, this
                    is the number of decimal places to display. For ints this is the step size.
         fixed:     [optional] [train only]. Training configurations are fixed when the model is
diff --git a/plugins/extract/pipeline.py b/plugins/extract/pipeline.py
index f1c9e16..092f597 100644
--- a/plugins/extract/pipeline.py
+++ b/plugins/extract/pipeline.py
@@ -73,6 +73,7 @@ class Extractor():
                      "normalize_method: %s, image_is_aligned: %s)",
                      self.__class__.__name__, detector, aligner, masker, configfile,
                      multiprocess, rotate_images, min_size, normalize_method, image_is_aligned)
+        masker = [masker] if not isinstance(masker, list) else masker
         self._flow = self._set_flow(detector, aligner, masker)
         self.phase = self._flow[0]
         # We only ever need 1 item in each queue. This is 2 items cached (1 in queue 1 waiting
@@ -81,7 +82,7 @@ class Extractor():
         self._vram_buffer = 256  # Leave a buffer for VRAM allocation
         self._detect = self._load_detect(detector, rotate_images, min_size, configfile)
         self._align = self._load_align(aligner, configfile, normalize_method)
-        self._mask = self._load_mask(masker, image_is_aligned, configfile)
+        self._mask = [self._load_mask(mask, image_is_aligned, configfile) for mask in masker]
         self._is_parallel = self._set_parallel_processing(multiprocess)
         self._set_extractor_batchsize()
         self._queues = self._add_queues()
@@ -255,10 +256,18 @@ class Extractor():
     @property
     def _total_vram_required(self):
         """ Return vram required for all phases plus the buffer """
-        vrams = [getattr(self, "_{}".format(p)).vram for p in self._flow]
-        vram_required_count = sum(1 for p in vrams if p > 0)
-        retval = (sum(vrams) * self._parallel_scaling[vram_required_count]) + self._vram_buffer
-        logger.trace(retval)
+        vrams = dict()
+        for phase in self._flow:
+            plugin_type, idx = self._get_plugin_type_and_index(phase)
+            attr = getattr(self, "_{}".format(plugin_type))
+            attr = attr[idx] if idx is not None else attr
+            vrams[phase] = attr.vram
+        vram_required_count = sum(1 for p in vrams.values() if p > 0)
+        logger.debug("VRAM requirements: %s. Plugins requiring VRAM: %s",
+                     vrams, vram_required_count)
+        retval = (sum(vrams.values()) *
+                  self._parallel_scaling[vram_required_count]) + self._vram_buffer
+        logger.debug("Total VRAM required: %s", retval)
         return retval
 
     @property
@@ -289,7 +298,13 @@ class Extractor():
     @property
     def _all_plugins(self):
         """ Return list of all plugin objects in this pipeline """
-        retval = [getattr(self, "_{}".format(phase)) for phase in self._flow]
+        retval = []
+        for phase in self._flow:
+            plugin_type, idx = self._get_plugin_type_and_index(phase)
+            attr = getattr(self, "_{}".format(plugin_type))
+            attr = attr[idx] if idx is not None else attr
+            retval.append(attr)
+            attr = getattr(self, "_{}".format(plugin_type))
         logger.trace("All Plugins: %s", retval)
         return retval
 
@@ -312,14 +327,46 @@ class Extractor():
             retval.append("detect")
         if aligner is not None and aligner.lower() != "none":
             retval.append("align")
-        if masker is not None and masker.lower() != "none":
-            retval.append("mask")
+        for idx, mask in enumerate(masker):
+            if mask is not None and mask.lower() != "none":
+                retval.append("mask_{}".format(idx))
         logger.debug("flow: %s", retval)
         return retval
 
+    @staticmethod
+    def _get_plugin_type_and_index(flow_phase):
+        """ Obtain the plugin type and index for the plugin for the given flow phase.
+
+        When multiple plugins for the same phase are allowed (e.g. Mask) this will return
+        the plugin type and the index of the plugin required. If only one plugin is allowed
+        then the plugin type will be returned and the index will be ``None``.
+
+        Parameters
+        ----------
+        flow_phase: str
+            The phase within :attr:`_flow` that is to have the plugin type and index returned
+
+        Returns
+        -------
+        plugin_type: str
+            The plugin type for the given flow phase
+        index: int
+            The index of this plugin type within the flow, if there are multiple plugins in use
+            otherwise ``None`` if there is only 1 plugin in use for the given phase
+        """
+        idx = flow_phase.split("_")[-1]
+        if idx.isdigit():
+            idx = int(idx)
+            plugin_type = "_".join(flow_phase.split("_")[:-1])
+        else:
+            plugin_type = flow_phase
+            idx = None
+        return plugin_type, idx
+
     def _add_queues(self):
         """ Add the required processing queues to Queue Manager """
         queues = dict()
+        tasks = []
         tasks = ["extract_{}_in".format(phase) for phase in self._flow]
         tasks.append("extract_{}_out".format(self._final_phase))
         for task in tasks:
@@ -407,7 +454,9 @@ class Extractor():
         logger.debug("in_qname: %s, out_qname: %s", in_qname, out_qname)
         kwargs = dict(in_queue=self._queues[in_qname], out_queue=self._queues[out_qname])
 
-        plugin = getattr(self, "_{}".format(phase))
+        plugin_type, idx = self._get_plugin_type_and_index(phase)
+        plugin = getattr(self, "_{}".format(plugin_type))
+        plugin = plugin[idx] if idx is not None else plugin
         plugin.initialize(**kwargs)
         plugin.start()
         logger.debug("Launched %s plugin", phase)
diff --git a/scripts/extract.py b/scripts/extract.py
index 6275aca..eacaed4 100644
--- a/scripts/extract.py
+++ b/scripts/extract.py
@@ -53,7 +53,7 @@ class Extract():  # pylint:disable=too-few-public-methods
         normalization = None if self._args.normalization == "none" else self._args.normalization
         self._extractor = Extractor(self._args.detector,
                                     self._args.aligner,
-                                    self._args.masker,
+                                    [self._args.masker, "components", "extended"],
                                     configfile=configfile,
                                     multiprocess=not self._args.singleprocess,
                                     rotate_images=self._args.rotate_images,
