commit 1c3b9d968f3e42851adc684282a11bd71912e1f3
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Thu Aug 29 13:27:06 2019 +0100

    Bugfix: Clean font list selection for config

diff --git a/lib/gui/_config.py b/lib/gui/_config.py
index 47552c6..cf6a864 100644
--- a/lib/gui/_config.py
+++ b/lib/gui/_config.py
@@ -45,8 +45,8 @@ class Config(FaceswapConfig):
             info="How tall the bottom console panel is as a percentage of GUI height at startup.")
         self.add_item(
             section=section, title="font", datatype=str,
-            choices=["default"] + sorted(font.families()), default="default", group="font",
-            info="Global font")
+            choices=get_clean_fonts(),
+            default="default", group="font", info="Global font")
         self.add_item(
             section=section, title="font_size", datatype=int, default=9,
             min_max=(6, 12), rounding=1, group="font",
@@ -67,3 +67,11 @@ def get_commands():
              and os.path.splitext(item)[0] not in ("gui", "cli")
              and not os.path.splitext(item)[0].startswith("_")]
     return commands + tools
+
+
+def get_clean_fonts():
+    """ Return the font list with any @prefixed or non-unicode characters stripped
+        and default prefixed """
+    cleaned_fonts = sorted([fnt for fnt in font.families()
+                            if not fnt.startswith("@") and not any([ord(c) > 127 for c in fnt])])
+    return ["default"] + cleaned_fonts
diff --git a/lib/gui/control_helper.py b/lib/gui/control_helper.py
index fa6abd5..1239651 100644
--- a/lib/gui/control_helper.py
+++ b/lib/gui/control_helper.py
@@ -41,7 +41,7 @@ def add_command(name, func):
     """ For controls that execute commands, the command must be added to the _COMMAND list so that
         it can be added back to the widget during cloning """
     logger.debug("Adding to commands: %s - %s", name, func)
-    _RECREATE_OBJECTS["commands"][name] = func
+    _RECREATE_OBJECTS["commands"][str(name)] = func
 
 
 def set_slider_rounding(value, var, d_type, round_to, min_max):
