commit 091bed36462d97ca4b25429c99b813db1eb9ce71
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Wed Oct 2 17:44:45 2019 +0100

    nn_blocks: Update naming convention

diff --git a/lib/model/nn_blocks.py b/lib/model/nn_blocks.py
index 9c0567f..2ebc352 100644
--- a/lib/model/nn_blocks.py
+++ b/lib/model/nn_blocks.py
@@ -81,6 +81,8 @@ class NNBlocks():
         """ A standard conv2D layer with correct initialization """
         logger.debug("inp: %s, filters: %s, kernel_size: %s, strides: %s, padding: %s, "
                      "kwargs: %s)", inp, filters, kernel_size, strides, padding, kwargs)
+        if kwargs.get("name", None) is None:
+            kwargs["name"] = self.get_name("conv2d_{}".format(inp.shape[1]))
         kwargs = self.set_default_initializer(kwargs)
         var_x = Conv2D(filters, kernel_size,
                        strides=strides,
@@ -94,7 +96,7 @@ class NNBlocks():
         """ Convolution Layer"""
         logger.debug("inp: %s, filters: %s, kernel_size: %s, strides: %s, use_instance_norm: %s, "
                      "kwargs: %s)", inp, filters, kernel_size, strides, use_instance_norm, kwargs)
-        name = self.get_name("conv")
+        name = self.get_name("conv_{}".format(inp.shape[1]))
         if self.use_reflect_padding:
             inp = ReflectionPadding2D(stride=strides,
                                       kernel_size=kernel_size,
@@ -117,7 +119,7 @@ class NNBlocks():
         """ Upscale Layer """
         logger.debug("inp: %s, filters: %s, kernel_size: %s, use_instance_norm: %s, kwargs: %s)",
                      inp, filters, kernel_size, use_instance_norm, kwargs)
-        name = self.get_name("upscale")
+        name = self.get_name("upscale_{}".format(inp.shape[1]))
         if self.use_reflect_padding:
             inp = ReflectionPadding2D(stride=1,
                                       kernel_size=kernel_size,
@@ -151,7 +153,7 @@ class NNBlocks():
         """ Residual block """
         logger.debug("inp: %s, filters: %s, kernel_size: %s, kwargs: %s)",
                      inp, filters, kernel_size, kwargs)
-        name = self.get_name("residual")
+        name = self.get_name("residual_{}".format(inp.shape[1]))
         var_x = LeakyReLU(alpha=0.2, name="{}_leakyrelu_0".format(name))(inp)
         if self.use_reflect_padding:
             var_x = ReflectionPadding2D(stride=1,
@@ -189,7 +191,7 @@ class NNBlocks():
         """ Seperable Convolution Layer """
         logger.debug("inp: %s, filters: %s, kernel_size: %s, strides: %s, kwargs: %s)",
                      inp, filters, kernel_size, strides, kwargs)
-        name = self.get_name("separableconv2d")
+        name = self.get_name("separableconv2d_{}".format(inp.shape[1]))
         kwargs = self.set_default_initializer(kwargs)
         var_x = SeparableConv2D(filters,
                                 kernel_size=kernel_size,
