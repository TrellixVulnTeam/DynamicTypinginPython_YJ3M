commit 8d7ca46b2c1fcf0fe8983b0d6effc5fd9d009bff
Author: yangchen8710 <chen.yang8710@hotmail.com>
Date:   Thu Dec 28 00:36:18 2017 +0800

    Adjust color average and smooth mask (#31)

diff --git a/lib/faces_process.py b/lib/faces_process.py
index a5577ae..b9931b3 100644
--- a/lib/faces_process.py
+++ b/lib/faces_process.py
@@ -7,9 +7,36 @@ from .model import autoencoder_A
 from .model import autoencoder_B
 from .model import encoder, decoder_A, decoder_B
 
+def adjust_avg_color(img_old,img_new):
+    w,h,c = img_new.shape
+    for i in range(img_new.shape[-1]):
+        old_avg = img_old[:, :, i].mean()
+        new_avg = img_new[:, :, i].mean()
+        diff_int = (int)(old_avg - new_avg)
+        for m in range(img_new.shape[0]):
+            for n in range(img_new.shape[1]):
+                temp = (img_new[m,n,i] + diff_int)
+                if temp < 0:
+                    img_new[m,n,i] = 0
+                elif temp > 255:
+                    img_new[m,n,i] = 255
+                else:
+                    img_new[m,n,i] = temp
 
-def convert_one_image(image, model_dir="models", swap_model=False, use_aligner=False):
+def smooth_mask(img_old,img_new):
+    w,h,c = img_new.shape
+    crop = slice(0,w)
+    mask = numpy.zeros_like(img_new)
+    mask[h//15:-h//15,w//15:-w//15,:] = 255
+    mask = cv2.GaussianBlur(mask,(15,15),10)
+    img_new[crop,crop] = mask/255*img_new + (1-mask/255)*img_old
 
+def convert_one_image(image, 
+                      model_dir="models",
+                      swap_model=False,
+                      use_aligner=False,
+                      use_smooth_mask=True,
+                      use_avg_color_adjust=True):
     face_A = '/decoder_A.h5' if not swap_model else '/decoder_B.h5'
     face_B = '/decoder_B.h5' if not swap_model else '/decoder_A.h5'
 
@@ -32,11 +59,19 @@ def convert_one_image(image, model_dir="models", swap_model=False, use_aligner=F
     assert image.shape == (256, 256, 3)
     crop = slice(48, 208)
     face = image[crop, crop]
+    old_face = face.copy()
+
     face = cv2.resize(face, (64, 64))
     face = numpy.expand_dims(face, 0)
     new_face = autoencoder.predict(face / 255.0)[0]
     new_face = numpy.clip(new_face * 255, 0, 255).astype(image.dtype)
     new_face = cv2.resize(new_face, (160, 160))
+
+    if use_avg_color_adjust:
+        adjust_avg_color(old_face,new_face)
+    if use_smooth_mask:
+        smooth_mask(old_face,new_face)
+
     # Aligner is not ready to use yet
     if use_aligner:
         return aligner.align(image.copy(), new_face)
