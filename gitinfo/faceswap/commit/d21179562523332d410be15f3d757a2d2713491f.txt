commit d21179562523332d410be15f3d757a2d2713491f
Author: Lorjuo <julien.seitz@gmail.com>
Date:   Fri Jan 18 01:45:48 2019 +0100

    Staging sort fix (#584)
    
    * fixed several bugs that prevented sort algorithms from beeing working in staging branch.
    face-cnn, face-cnn-dissim and face-yaw now working again
    blur, face, hist, hist-dissim already worked before
    face-dissim still has an error
    
    * applied requested changes from torzdf

diff --git a/plugins/extract/align/_base.py b/plugins/extract/align/_base.py
index cf5b921..b2b7c62 100644
--- a/plugins/extract/align/_base.py
+++ b/plugins/extract/align/_base.py
@@ -25,6 +25,7 @@ from io import StringIO
 
 from lib.aligner import Extract
 from lib.gpu_stats import GPUStats
+from lib.faces_detect import DetectedFace
 
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
 
diff --git a/tools/sort.py b/tools/sort.py
index 313eea3..96af08d 100644
--- a/tools/sort.py
+++ b/tools/sort.py
@@ -82,14 +82,14 @@ class Sort():
         self.sort_process()
 
     @staticmethod
-    def launch_aligner():
+    def launch_aligner(loglevel):
         """ Load the aligner plugin to retrieve landmarks """
         out_queue = queue_manager.get_queue("out")
         kwargs = {"in_queue": queue_manager.get_queue("in"),
                   "out_queue": out_queue}
 
         for plugin in ("fan", "dlib"):
-            aligner = PluginLoader.get_aligner(plugin)()
+            aligner = PluginLoader.get_aligner(plugin)(loglevel=loglevel)
             process = SpawnProcess(aligner.run, **kwargs)
             event = process.event
             process.start()
@@ -123,15 +123,18 @@ class Sort():
         """ Set the image to a dict for alignment """
         height, width = image.shape[:2]
         face = DetectedFace(x=0, w=width, y=0, h=height)
+        face = face.to_dlib_rect()
         return {"image": image,
                 "detected_faces": [face]}
 
-    def get_landmarks(self, filename):
-        """ Get landmarks for current image """
+    @staticmethod
+    def get_landmarks(filename):
+        """ Extract the face from a frame (If not alignments file found) """
         image = cv2.imread(filename)
-        queue_manager.get_queue("in").put(self.alignment_dict(image))
+        queue_manager.get_queue("in").put(Sort.alignment_dict(image))
         face = queue_manager.get_queue("out").get()
-        return face["detected_faces"][0].landmarksXY
+        landmarks = face["landmarks"][0]
+        return landmarks
 
     def sort_process(self):
         """
@@ -231,6 +234,7 @@ class Sort():
                         [img_list[i][1]],
                         [img_list[j][1]])
                 except:
+                    logger.info("except")
                     pass
 
             img_list[i][2] = score_total
@@ -241,7 +245,7 @@ class Sort():
 
     def sort_face_cnn(self):
         """ Sort by CNN similarity """
-        self.launch_aligner()
+        self.launch_aligner(self.args.loglevel)
         input_dir = self.args.input_dir
 
         logger.info("Sorting by face-cnn similarity...")
@@ -276,7 +280,7 @@ class Sort():
 
     def sort_face_cnn_dissim(self):
         """ Sort by CNN dissimilarity """
-        self.launch_aligner()
+        self.launch_aligner(self.args.loglevel)
         input_dir = self.args.input_dir
 
         logger.info("Sorting by face-cnn dissimilarity...")
@@ -311,7 +315,7 @@ class Sort():
 
     def sort_face_yaw(self):
         """ Sort by yaw of face """
-        self.launch_aligner()
+        self.launch_aligner(self.args.loglevel)
         input_dir = self.args.input_dir
 
         img_list = []
