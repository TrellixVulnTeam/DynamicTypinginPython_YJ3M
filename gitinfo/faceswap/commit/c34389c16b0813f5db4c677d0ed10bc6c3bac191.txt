commit c34389c16b0813f5db4c677d0ed10bc6c3bac191
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Sat Jun 1 15:42:42 2019 +0000

    Alignments tool updates
    
    Merge alignments: Add ability to filter out faces that do not appear in the final alignments file
    GUI: Add icon to open video file for frames

diff --git a/tools/cli.py b/tools/cli.py
index d11d7a7..2b3e557 100644
--- a/tools/cli.py
+++ b/tools/cli.py
@@ -43,7 +43,9 @@ class AlignmentsArgs(FaceSwapArgs):
                     frames_and_faces_dir + align_eyes +
                     "\nL|'manual': Manually view and edit landmarks." + frames_dir + align_eyes +
                     "\nL|'merge': Merge multiple alignment files into one. Specify a space "
-                    "separated list of alignments files with the -a flag."
+                    "separated list of alignments files with the -a flag. Optionally specify a "
+                    "faces (-fc) folder to filter the final alignments file to only those faces "
+                    "that appear within the provided folder."
                     "\nL|'missing-alignments': Identify frames that do not exist in the "
                     "alignments file." + output_opts + frames_dir +
                     "\nL|'missing-frames': Identify frames in the alignments file that do not "
@@ -95,8 +97,9 @@ class AlignmentsArgs(FaceSwapArgs):
                               "dest": "faces_dir",
                               "help": "Directory containing extracted faces."})
         argument_list.append({"opts": ("-fr", "-frames_folder"),
-                              "action": DirFullPaths,
+                              "action": DirOrFileFullPaths,
                               "dest": "frames_dir",
+                              "filetypes": "video",
                               "help": "Directory containing source frames "
                                       "that faces were extracted from."})
         argument_list.append({"opts": ("-fmt", "--alignment_format"),
diff --git a/tools/lib_alignments/jobs.py b/tools/lib_alignments/jobs.py
index bb684de..f38a167 100644
--- a/tools/lib_alignments/jobs.py
+++ b/tools/lib_alignments/jobs.py
@@ -457,15 +457,28 @@ class Legacy():
 class Merge():
     """ Merge two alignments files into one """
     def __init__(self, alignments, arguments):
+        self.alignments = alignments
+        self.faces = self.get_faces(arguments)
         self.final_alignments = alignments[0]
         self.process_alignments = alignments[1:]
 
+    @staticmethod
+    def get_faces(arguments):
+        """ If faces argument is specified, load faces_dir
+            otherwise return None """
+        if not hasattr(arguments, "faces_dir") or not arguments.faces_dir:
+            return None
+        return Faces(arguments.faces_dir)
+
     def process(self):
         """Process the alignments file merge """
         logger.info("[MERGE ALIGNMENTS]")  # Tidy up cli output
+        if self.faces is not None:
+            self.remove_faces()
         skip_count = 0
         merge_count = 0
         total_count = sum([alignments.frames_count for alignments in self.process_alignments])
+
         with tqdm(desc="Merging Alignments", total=total_count) as pbar:
             for alignments in self.process_alignments:
                 for _, src_alignments, _, frame in alignments.yield_faces():
@@ -486,6 +499,33 @@ class Merge():
             self.set_destination_filename()
             self.final_alignments.save()
 
+    def remove_faces(self):
+        """ Process to remove faces from an alignments file """
+        face_hashes = list(self.faces.items.keys())
+        del_faces_count = 0
+        del_frames_count = 0
+        if not face_hashes:
+            logger.error("No face hashes. This would remove all faces from your alignments file.")
+            return
+        for alignments in tqdm(self.alignments, desc="Filtering out faces"):
+            pre_face_count = alignments.faces_count
+            pre_frames_count = alignments.frames_count
+            alignments.filter_hashes(face_hashes, filter_out=False)
+            # Remove frames with no faces
+            frames = list(alignments.data.keys())
+            for frame in frames:
+                if not alignments.frame_has_faces(frame):
+                    del alignments.data[frame]
+            post_face_count = alignments.faces_count
+            post_frames_count = alignments.frames_count
+            removed_faces = pre_face_count - post_face_count
+            removed_frames = pre_frames_count - post_frames_count
+            del_faces_count += removed_faces
+            del_frames_count += removed_frames
+            logger.verbose("Removed %s faces and %s frames from %s",
+                           removed_faces, removed_frames, os.path.basename(alignments.file))
+        logger.info("Total removed - faces: %s, frames: %s", del_faces_count, del_frames_count)
+
     def check_exists(self, frame, alignment, idx):
         """ Check whether this face already exists """
         existing_frame = self.final_alignments.hashes_to_frame.get(alignment["hash"], None)
