commit 0eff0a1719f9e77bc505a8c7daea23218fc0bab5
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Tue Jun 11 01:13:42 2019 +0000

    Config Changes + Bugfixes
    
    Bugfix: Fully disable keypress monitor for GUI
    Bugfix: Preview - Handle missing alignments file
    Config changes:
        - Separate plugin defaults into their own files
        - Move mask_type to global training config
        - Add ability to pass in custom config files

diff --git a/lib/cli.py b/lib/cli.py
index e557878..aa4f877 100644
--- a/lib/cli.py
+++ b/lib/cli.py
@@ -352,6 +352,12 @@ class FaceSwapArgs():
         """ Arguments that are used in ALL parts of Faceswap
             DO NOT override this """
         global_args = list()
+        global_args.append({"opts": ("-C", "--configfile"),
+                            "action": FileFullPaths,
+                            "filetypes": "ini",
+                            "type": str,
+                            "help": "Optionally overide the saved config with the path to a "
+                                    "custom config file."})
         global_args.append({"opts": ("-L", "--loglevel"),
                             "type": str.upper,
                             "dest": "loglevel",
diff --git a/lib/config.py b/lib/config.py
index 563ef44..a19cf52 100644
--- a/lib/config.py
+++ b/lib/config.py
@@ -1,7 +1,6 @@
 #!/usr/bin/env python3
 """ Default configurations for faceswap
-    Extends out configparser funcionality
-    by checking for default config updates
+    Extends out configparser funcionality by checking for default config updates
     and returning data in it's correct format """
 
 import logging
@@ -15,10 +14,10 @@ logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
 
 class FaceswapConfig():
     """ Config Items """
-    def __init__(self, section):
+    def __init__(self, section, configfile=None):
         """ Init Configuration  """
         logger.debug("Initializing: %s", self.__class__.__name__)
-        self.configfile = self.get_config_file()
+        self.configfile = self.get_config_file(configfile)
         self.config = ConfigParser(allow_no_value=True)
         self.defaults = OrderedDict()
         self.config.optionxform = str
@@ -93,8 +92,14 @@ class FaceswapConfig():
         logger.debug("Returning item: (type: %s, value: %s)", datatype, retval)
         return retval
 
-    def get_config_file(self):
-        """ Return the config file from the calling folder """
+    def get_config_file(self, configfile):
+        """ Return the config file from the calling folder or the provided file """
+        if configfile is not None:
+            if not os.path.isfile(configfile):
+                err = "Config file does not exist at: {}".format(configfile)
+                logger.error(err)
+                raise ValueError(err)
+            return configfile
         dirname = os.path.dirname(sys.modules[self.__module__].__file__)
         folder, fname = os.path.split(dirname)
         retval = os.path.join(os.path.dirname(folder), "config", "{}.ini".format(fname))
diff --git a/lib/convert.py b/lib/convert.py
index 8b157e2..4381afc 100644
--- a/lib/convert.py
+++ b/lib/convert.py
@@ -17,11 +17,11 @@ logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
 class Converter():
     """ Swap a source face with a target """
     def __init__(self, output_dir, output_size, output_has_mask,
-                 draw_transparent, pre_encode, arguments):
+                 draw_transparent, pre_encode, arguments, configfile=None):
         logger.debug("Initializing %s: (output_dir: '%s', output_size: %s,  output_has_mask: %s, "
-                     "draw_transparent: %s, pre_encode: %s, arguments: %s)",
+                     "draw_transparent: %s, pre_encode: %s, arguments: %s, configfile: %s)",
                      self.__class__.__name__, output_dir, output_size, output_has_mask,
-                     draw_transparent, pre_encode, arguments)
+                     draw_transparent, pre_encode, arguments, configfile)
         self.output_dir = output_dir
         self.draw_transparent = draw_transparent
         self.writer_pre_encode = pre_encode
@@ -29,6 +29,7 @@ class Converter():
         self.output_size = output_size
         self.output_has_mask = output_has_mask
         self.args = arguments
+        self.configfile = configfile
         self.adjustments = dict(box=None, mask=None, color=None, seamless=None, scaling=None)
         self.load_plugins()
         logger.debug("Initialized %s", self.__class__.__name__)
@@ -48,6 +49,7 @@ class Converter():
             "box_blend",
             disable_logging=disable_logging)("none",
                                              self.output_size,
+                                             configfile=self.configfile,
                                              config=config)
 
         self.adjustments["mask"] = PluginLoader.get_converter(
@@ -56,19 +58,20 @@ class Converter():
             disable_logging=disable_logging)(self.args.mask_type,
                                              self.output_size,
                                              self.output_has_mask,
+                                             configfile=self.configfile,
                                              config=config)
 
         if self.args.color_adjustment != "none" and self.args.color_adjustment is not None:
             self.adjustments["color"] = PluginLoader.get_converter(
                 "color",
                 self.args.color_adjustment,
-                disable_logging=disable_logging)(config=config)
+                disable_logging=disable_logging)(configfile=self.configfile, config=config)
 
         if self.args.scaling != "none" and self.args.scaling is not None:
             self.adjustments["scaling"] = PluginLoader.get_converter(
                 "scaling",
                 self.args.scaling,
-                disable_logging=disable_logging)(config=config)
+                disable_logging=disable_logging)(configfile=self.configfile, config=config)
         logger.debug("Loaded plugins: %s", self.adjustments)
 
     def process(self, in_queue, out_queue):
diff --git a/lib/gui/utils.py b/lib/gui/utils.py
index 2f10e4f..79e5e5f 100644
--- a/lib/gui/utils.py
+++ b/lib/gui/utils.py
@@ -105,13 +105,14 @@ class FileHandler():
                                     ("Pickle", "*.p"),
                                     ("YAML", "*.yaml" "*.yml"),  # pylint: disable=W1403
                                     all_files],
-                     "config": [("Faceswap config files", "*.fsw"), all_files],
+                     "config": [("Faceswap GUI config files", "*.fsw"), all_files],
                      "csv": [("Comma separated values", "*.csv"), all_files],
                      "image": [("Bitmap", "*.bmp"),
                                ("JPG", "*.jpeg" "*.jpg"),  # pylint: disable=W1403
                                ("PNG", "*.png"),
                                ("TIFF", "*.tif" "*.tiff"),  # pylint: disable=W1403
                                all_files],
+                     "ini": [("Faceswap config files", "*.ini"), all_files],
                      "state": [("State files", "*.json"), all_files],
                      "log": [("Log files", "*.log"), all_files],
                      "video": [("Audio Video Interleave", "*.avi"),
diff --git a/lib/keypress.py b/lib/keypress.py
index a36a049..a4434d4 100644
--- a/lib/keypress.py
+++ b/lib/keypress.py
@@ -56,16 +56,16 @@ class KBHit:
         else:
             termios.tcsetattr(self.file_desc, termios.TCSAFLUSH, self.old_term)
 
-    @staticmethod
-    def getch():
+    def getch(self):
         """ Returns a keyboard character after kbhit() has been called.
             Should not be called in the same program as getarrow(). """
+        if self.is_gui:
+            return None
         if os.name == "nt":
             return msvcrt.getch().decode("utf-8")
         return sys.stdin.read(1)
 
-    @staticmethod
-    def getarrow():
+    def getarrow(self):
         """ Returns an arrow-key code after kbhit() has been called. Codes are
         0 : up
         1 : right
@@ -73,6 +73,8 @@ class KBHit:
         3 : left
         Should not be called in the same program as getch(). """
 
+        if self.is_gui:
+            return None
         if os.name == "nt":
             msvcrt.getch()  # skip 0xE0
             char = msvcrt.getch()
@@ -83,9 +85,10 @@ class KBHit:
 
         return vals.index(ord(char.decode("utf-8")))
 
-    @staticmethod
-    def kbhit():
+    def kbhit(self):
         """ Returns True if keyboard character was hit, False otherwise. """
+        if self.is_gui:
+            return None
         if os.name == "nt":
             return msvcrt.kbhit()
         d_r, _, _ = select([sys.stdin], [], [], 0)
diff --git a/plugins/convert/_config.py b/plugins/convert/_config.py
index ca8c54f..88b9a9a 100644
--- a/plugins/convert/_config.py
+++ b/plugins/convert/_config.py
@@ -2,18 +2,15 @@
 """ Default configurations for convert """
 
 import logging
+import os
+import sys
+
+from importlib import import_module
 
 from lib.config import FaceswapConfig
-from lib.utils import _video_extensions
 
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
 
-BLUR_TYPES = ["gaussian", "normalized", "none"]
-BLUR_INFO = ("The type of blending to use:"
-             "\n\t gaussian: Blend with Gaussian filter. Slower, but often better than Normalized"
-             "\n\t normalized: Blend with Normalized box filter. Faster than Gaussian"
-             "\n\t none: Don't perform blending")
-
 
 class Config(FaceswapConfig):
     """ Config File for Convert """
@@ -21,363 +18,26 @@ class Config(FaceswapConfig):
     def set_defaults(self):
         """ Set the default values for config """
         logger.debug("Setting defaults")
-
-        # << GLOBAL OPTIONS >> #
-#        section = "global"
-#        self.add_section(title=section,
-#                         info="Options that apply to all models")
-
-        # << MASK OPTIONS >> #
-        section = "mask.box_blend"
-        self.add_section(title=section,
-                         info="Options for blending the edges of the swapped box with the "
-                              "background image")
-        self.add_item(
-            section=section, title="type", datatype=str, choices=BLUR_TYPES, default="gaussian",
-            info=BLUR_INFO, gui_radio=True)
-        self.add_item(
-            section=section, title="distance", datatype=float, default=11.0, rounding=1,
-            min_max=(0.1, 25.0),
-            info="The distance from the edges of the swap box to start blending. "
-                 "\nThe distance is set as percentage of the swap box size to give the number of "
-                 "pixels from the edge of the box. Eg: For a swap area of 256px and a percentage "
-                 "of 4%, blending would commence 10 pixels from the edge."
-                 "\nHigher percentages start the blending from closer to the center of the face, "
-                 "so will reveal more of the source face.")
-        self.add_item(
-            section=section, title="radius", datatype=float, default=5.0, rounding=1,
-            min_max=(0.1, 25.0),
-            info="Radius dictates how much blending should occur, or more specifically, how far "
-                 "the blending will spread away from the 'distance' parameter."
-                 "\nThis figure is set as a percentage of the swap box size to give the radius in "
-                 "pixels. Eg: For a swap area of 256px and a percentage of 5%, the radius would "
-                 "be 13 pixels"
-                 "\nNB: Higher percentage means more blending, but too high may reveal more of "
-                 "the source face, or lead to hard lines at the border.")
-        self.add_item(
-            section=section, title="passes", datatype=int, default=1, rounding=1,
-            min_max=(1, 8),
-            info="The number of passes to perform. Additional passes of the blending "
-                 "algorithm can improve smoothing at a time cost. This is more useful for 'box' "
-                 "type blending."
-                 "\nAdditional passes have exponentially less effect so it's not worth setting "
-                 "this too high")
-
-        section = "mask.mask_blend"
-        self.add_section(title=section,
-                         info="Options for blending the edges between the mask and the "
-                              "background image")
-        self.add_item(
-            section=section, title="type", datatype=str, choices=BLUR_TYPES, default="normalized",
-            info=BLUR_INFO, gui_radio=True)
-        self.add_item(
-            section=section, title="radius", datatype=float, default=3.0, rounding=1,
-            min_max=(0.1, 25.0),
-            info="Radius dictates how much blending should occur."
-                 "\nThis figure is set as a percentage of the mask diameter to give the radius in "
-                 "pixels. Eg: for a mask with diameter 200px, a percentage of 6% would give a "
-                 "final radius of 3px."
-                 "\nHigher percentage means more blending")
-        self.add_item(
-            section=section, title="passes", datatype=int, default=4, rounding=1,
-            min_max=(1, 8),
-            info="The number of passes to perform. Additional passes of the blending "
-                 "algorithm can improve smoothing at a time cost. This is more useful for 'box' "
-                 "type blending."
-                 "\nAdditional passes have exponentially less effect so it's not worth setting "
-                 "this too high")
-        self.add_item(
-            section=section, title="erosion", datatype=float, default=0.0, rounding=1,
-            min_max=(-100.0, 100.0),
-            info="Erosion kernel size as a percentage of the mask radius area.\n"
-                 "Positive values apply erosion which reduces the size of the swapped area.\n"
-                 "Negative values apply dilation which increases the swapped area")
-
-        # <<<<<< COLOUR  OPTIONS >>>>>> #
-        section = "color.color_transfer"
-        self.add_section(title=section,
-                         info="Options for transfering the color distribution from the source to "
-                              "the target image using the mean and standard deviations of the "
-                              "L*a*b* color space.\n"
-                              "This implementation is (loosely) based on to the 'Color Transfer "
-                              "between Images' paper by Reinhard et al., 2001. matching the "
-                              "histograms between the source and destination faces.")
-        self.add_item(
-            section=section, title="clip", datatype=bool, default=True,
-            info="Should components of L*a*b* image be scaled by np.clip before converting back "
-                 "to BGR color space?\n"
-                 "If False then components will be min-max scaled appropriately.\n"
-                 "Clipping will keep target image brightness truer to the input.\n"
-                 "Scaling will adjust image brightness to avoid washed out portions in the "
-                 "resulting color transfer that can be caused by clipping.")
-        self.add_item(
-            section=section, title="preserve_paper", datatype=bool, default=True,
-            info="Should color transfer strictly follow methodology layed out in original paper?\n"
-                 "The method does not always produce aesthetically pleasing results.\n"
-                 "If False then L*a*b* components will be scaled using the reciprocal of the "
-                 "scaling factor proposed in the paper. This method seems to produce more "
-                 "consistently aesthetically pleasing results")
-
-        section = "color.manual_balance"
-        self.add_section(title=section,
-                         info="Options for manually altering the balance of colors of the swapped "
-                              "face")
-        self.add_item(
-            section=section, title="colorspace", datatype=str, default="HSV", gui_radio=True,
-            choices=["RGB", "HSV", "LAB", "YCrCb"],
-            info="The colorspace to use for adjustment: The three adjustment sliders will effect "
-                 "the image differently depending on which colorspace is selected:"
-                 "\n\t RGB: Red, Green, Blue. An additive colorspace where colors are obtained by "
-                 "a linear combination of Red, Green, and Blue values. The three channels are "
-                 "correlated by the amount of light hitting the surface. In RGB color space the "
-                 "color information is separated into three channels but the same three channels "
-                 "also encode brightness information."
-                 "\n\t HSV: Hue, Saturation, Value. Hue - Dominant wavelength. Saturation - "
-                 "Purity / shades of color. Value - Intensity. Best thing is that it uses only "
-                 "one channel to describe color (H), making it very intuitive to specify color."
-                 "\n\t LAB: Lightness, A, B. Lightness - Intensity. A - Color range from green to "
-                 "magenta. B - Color range from blue to yellow. The L channel is independent of "
-                 "color information and encodes brightness only. The other two channels encode "
-                 "color."
-                 "\n\t YCrCb: Y - Luminance or Luma component obtained from RGB after gamma "
-                 "correction. Cr - how far is the red component from Luma. Cb - how far is the "
-                 "blue component from Luma. Separates the luminance and chrominance components "
-                 "into different channels.")
-        self.add_item(
-            section=section, title="balance_1", datatype=float, default=0.0, rounding=1,
-            min_max=(-100.0, 100.0),
-            info="Balance of channel 1: "
-                 "\n\tRGB: Red "
-                 "\n\tHSV: Hue "
-                 "\n\tLAB: Lightness "
-                 "\n\tYCrCb: Luma ")
-        self.add_item(
-            section=section, title="balance_2", datatype=float, default=0.0, rounding=1,
-            min_max=(-100.0, 100.0),
-            info="Balance of channel 2: "
-                 "\n\tRGB: Green "
-                 "\n\tHSV: Saturation "
-                 "\n\tLAB: Green > Magenta "
-                 "\n\tYCrCb: Distance of red from Luma")
-        self.add_item(
-            section=section, title="balance_3", datatype=float, default=0.0, rounding=1,
-            min_max=(-100.0, 100.0),
-            info="Balance of channel 3: "
-                 "\n\tRGB: Blue "
-                 "\n\tHSV: Intensity "
-                 "\n\tLAB: Blue > Yellow "
-                 "\n\tYCrCb: Distance of blue from Luma")
-        section = "color.match_hist"
-        self.add_section(title=section,
-                         info="Options for matching the histograms between the source and "
-                              "destination faces")
-        self.add_item(
-            section=section, title="threshold", datatype=float, default=99.0, rounding=1,
-            min_max=(90.0, 100.0),
-            info="Adjust the threshold for histogram matching. Can reduce extreme colors leaking "
-                 "in by filtering out colors at the extreme ends of the histogram spectrum")
-
-        # <<<<<< SCALING  OPTIONS >>>>>> #
-        section = "scaling.sharpen"
-        self.add_section(title=section,
-                         info="Options for sharpening the face after placement")
-        self.add_item(
-            section=section, title="method", datatype=str,
-            choices=["box", "gaussian", "unsharp_mask"], default="unsharp_mask",
-            gui_radio=True,
-            info="The type of sharpening to use: "
-                 "\n\t box: Fastest, but weakest method. Uses a box filter to assess edges."
-                 "\n\t gaussian: Slower, but better than box. Uses a gaussian filter to assess "
-                 "edges."
-                 "\n\t unsharp-mask: Slowest, but most tweakable. Uses the unsharp-mask method "
-                 "to assess edges.")
-        self.add_item(
-            section=section, title="amount", datatype=int, default=150, rounding=1,
-            min_max=(100, 500),
-            info="Percentage that controls the magnitude of each overshoot "
-                 "(how much darker and how much lighter the edge borders become)."
-                 "\nThis can also be thought of as how much contrast is added at the edges. It "
-                 "does not affect the width of the edge rims.")
-        self.add_item(
-            section=section, title="radius", datatype=float, default=0.3, rounding=1,
-            min_max=(0.1, 5.0),
-            info="Affects the size of the edges to be enhanced or how wide the edge rims become, "
-                 "so a smaller radius enhances smaller-scale detail."
-                 "\nRadius is set as a percentage of the final frame width and rounded to the "
-                 "nearest pixel. E.g for a 1280 width frame, a 0.6 percenatage will give a radius "
-                 "of 8px."
-                 "\nHigher radius values can cause halos at the edges, a detectable faint light "
-                 "rim around objects. Fine detail needs a smaller radius. "
-                 "\nRadius and amount interact; reducing one allows more of the other.")
-        self.add_item(
-            section=section, title="threshold", datatype=float, default=5.0, rounding=1,
-            min_max=(1.0, 10.0),
-            info="[unsharp_mask only] Controls the minimal brightness change that will be "
-                 "sharpened or how far apart adjacent tonal values have to be before the filter "
-                 "does anything."
-                 "\nThis lack of action is important to prevent smooth areas from becoming "
-                 "speckled. The threshold setting can be used to sharpen more pronounced edges, "
-                 "while leaving subtler edges untouched. "
-                 "\nLow values should sharpen more because fewer areas are excluded. "
-                 "\nHigher threshold values exclude areas of lower contrast.")
-
-        # <<<<<< OUTPUT  OPTIONS >>>>>> #
-        section = "writer.gif"
-        self.add_section(title=section,
-                         info="Options for outputting converted frames to an animated gif.")
-        self.add_item(
-            section=section, title="fps", datatype=int, min_max=(1, 60),
-            rounding=1, default=25,
-            info="Frames per Second.")
-        self.add_item(
-            section=section, title="loop", datatype=int, min_max=(0, 100),
-            rounding=1, default=0,
-            info="The number of iterations. Set to 0 to loop indefinitely.")
-        self.add_item(
-            section=section, title="palettesize", datatype=str, default="256",
-            choices=["2", "4", "8", "16", "32", "64", "128", "256"],
-            info="The number of colors to quantize the image to. Is rounded to the nearest power "
-                 "of two.")
-        self.add_item(
-            section=section, title="subrectangles", datatype=bool, default=False,
-            info="If True, will try and optimize the GIF by storing only the rectangular parts of "
-                 "each frame that change with respect to the previous.")
-
-        section = "writer.opencv"
-        self.add_section(title=section,
-                         info="Options for outputting converted frames to a series of images "
-                              "using OpenCV\n"
-                              "OpenCV can be faster than other image writers, but lacks some of "
-                              " configuration options and formats.")
-        self.add_item(
-            section=section, title="format", datatype=str, default="png",
-            choices=["bmp", "jpg", "jp2", "png", "ppm"],
-            gui_radio=True,
-            info="Image format to use:"
-                 "\n\t bmp: Windows bitmap"
-                 "\n\t jpg: JPEG format"
-                 "\n\t jp2: JPEG 2000 format"
-                 "\n\t png: Portable Network Graphics"
-                 "\n\t ppm: Portable Pixmap Format")
-        self.add_item(
-            section=section, title="draw_transparent", datatype=bool, default=False,
-            info="Place the swapped face on a transparent layer rather than the original frame.\n"
-                 "NB: This is only compatible with images saved in png format. If an "
-                 "incompatible format is selected then the image will be saved as a png.")
-        self.add_item(
-            section=section, title="jpg_quality", datatype=int, min_max=(1, 95),
-            rounding=1, default=75,
-            info="[jpg only] Set the jpg quality. 1 is worst 95 is best. Higher quality leads to "
-                 "larger file sizes.")
-        self.add_item(
-            section=section, title="png_compress_level", datatype=int, min_max=(0, 9),
-            rounding=1, default=3,
-            info="[png only] ZLIB compression level, 1 gives best speed, 9 gives best "
-                 "compression, 0 gives no compression at all.")
-
-        section = "writer.pillow"
-        self.add_section(title=section,
-                         info="Options for outputting converted frames to a series of images "
-                              "using Pillow\n"
-                              "Pillow is more feature rich than OpenCV but can be slower.")
-        self.add_item(
-            section=section, title="format", datatype=str, default="png",
-            choices=["bmp", "gif", "jpg", "jp2", "png", "ppm", "tif"],
-            gui_radio=True,
-            info="Image format to use:"
-                 "\n\t bmp: Windows bitmap"
-                 "\n\t gif: Graphics Interchange Format (NB: Not animated)"
-                 "\n\t jpg: JPEG format"
-                 "\n\t jp2: JPEG 2000 format"
-                 "\n\t png: Portable Network Graphics"
-                 "\n\t ppm: Portable Pixmap Format"
-                 "\n\t tif: Tag Image File Format")
-        self.add_item(
-            section=section, title="draw_transparent", datatype=bool, default=False,
-            info="Place the swapped face on a transparent layer rather than the original frame.\n"
-                 "NB: This is only compatible with images saved in png or tif format. If an "
-                 "incompatible format is selected then the image will be saved as a png.")
-        self.add_item(
-            section=section, title="optimize", datatype=bool, default=False,
-            info="[gif, jpg and png only] If enabled, indicates that the encoder should make an "
-                 "extra pass over the image in order to select optimal encoder settings.")
-        self.add_item(
-            section=section, title="gif_interlace", datatype=bool, default=True,
-            info="[gif only] Set whether to save the gif as interlaced or not.")
-        self.add_item(
-            section=section, title="jpg_quality", datatype=int, min_max=(1, 95),
-            rounding=1, default=75,
-            info="[jpg only] Set the jpg quality. 1 is worst 95 is best. Higher quality leads to "
-                 "larger file sizes.")
-        self.add_item(
-            section=section, title="png_compress_level", datatype=int, min_max=(0, 9),
-            rounding=1, default=3,
-            info="[png only] ZLIB compression level, 1 gives best speed, 9 gives best "
-                 "compression, 0 gives no compression at all. When optimize option is set to True "
-                 "this has no effect (it is set to 9 regardless of a value passed).")
-        self.add_item(
-            section=section, title="tif_compression", datatype=str, default="tiff_deflate",
-            choices=["none", "tiff_ccitt", "group3", "group4", "tiff_jpeg", "tiff_adobe_deflate",
-                     "tiff_thunderscan", "tiff_deflate", "tiff_sgilog", "tiff_sgilog24",
-                     "tiff_raw_16"],
-            info="[tif only] The desired compression method for the file.")
-
-        section = "writer.ffmpeg"
-        self.add_section(title=section,
-                         info="Options for encoding converted frames to video.")
-        self.add_item(
-            section=section, title="container", datatype=str, default="mp4",
-            choices=[ext.replace(".", "") for ext in _video_extensions],
-            gui_radio=True,
-            info="Video container to use.")
-        self.add_item(
-            section=section, title="codec", datatype=str,
-            choices=["libx264", "libx265"], default="libx264",
-            gui_radio=True,
-            info="Video codec to use:"
-                 "\n\t libx264: H.264. A widely supported and commonly used codec."
-                 "\n\t libx265: H.265 / HEVC video encoder application library.")
-        self.add_item(
-            section=section, title="crf", datatype=int, min_max=(0, 51), rounding=1, default=23,
-            info="Constant Rate Factor:  0 is lossless and 51 is worst quality possible. A lower "
-                 "value generally leads to higher quality, and a subjectively sane range is "
-                 "17-28. Consider 17 or 18 to be visually lossless or nearly so; it should look "
-                 "the same or nearly the same as the input but it isn't technically lossless.\n"
-                 "The range is exponential, so increasing the CRF value +6 results in roughly "
-                 "half the bitrate / file size, while -6 leads to roughly twice the bitrate.\n"
-                 "Choose the highest CRF value that still provides an acceptable quality. If the "
-                 "output looks good, then try a higher value. If it looks bad, choose a lower "
-                 "value.")
-        self.add_item(
-            section=section, title="preset", datatype=str, default="medium",
-            choices=["ultrafast", "superfast", "veryfast", "faster", "fast", "medium", "slow",
-                     "slower", "veryslow"],
-            gui_radio=True,
-            info="A preset is a collection of options that will provide a certain encoding speed "
-                 "to compression ratio.\nA slower preset will provide better compression "
-                 "(compression is quality per filesize).\nUse the slowest preset that you have "
-                 "patience for")
-        self.add_item(
-            section=section, title="tune", datatype=str, default="none",
-            choices=["none", "film", "animation", "grain", "stillimage", "fastdecode",
-                     "zerolatency"],
-            info="Change settings based upon the specifics of your input:"
-                 "\n\t none: Don't perform any additional tuning."
-                 "\n\t film: [H.264 only] Use for high quality movie content; lowers deblocking."
-                 "\n\t animation: [H.264 only] Good for cartoons; uses higher deblocking and more "
-                 "reference frames."
-                 "\n\t grain: Preserves the grain structure in old, grainy film material."
-                 "\n\t stillimage: [H.264 only] Good for slideshow-like content."
-                 "\n\t fastdecode: Allows faster decoding by disabling certain filters."
-                 "\n\t zerolatency: Good for fast encoding and low-latency streaming.")
-        self.add_item(
-            section=section, title="profile", datatype=str, default="auto",
-            choices=["auto", "baseline", "main", "high", "high10", "high422", "high444"],
-            info="[H.264 Only] Limit the output to a specific H.264 profile. Don't change this "
-                 "unless your target device only supports a certain profile.")
-        self.add_item(
-            section=section, title="level", datatype=str, default="auto",
-            choices=["auto", "1", "1b", "1.1", "1.2", "1.3", "2", "2.1", "2.2", "3", "3.1", "3.2",
-                     "4", "4.1", "4.2", "5", "5.1", "5.2", "6", "6.1", "6.2"],
-            info="[H.264 Only] Set the encoder level, Don't change this unless your target device "
-                 "only supports a certain level.")
+        current_dir = os.path.dirname(__file__)
+        for dirpath, _, filenames in os.walk(current_dir):
+            default_files = [fname for fname in filenames if fname.endswith("_defaults.py")]
+            if not default_files:
+                continue
+            base_path = os.path.dirname(os.path.realpath(sys.argv[0]))
+            import_path = dirpath.replace(base_path, "").replace("/", ".")[1:]
+            plugin_type = import_path.split(".")[-1]
+            for filename in default_files:
+                self.load_module(filename, import_path, plugin_type)
+
+    def load_module(self, filename, module_path, plugin_type):
+        """ Load the defaults module and add defaults """
+        logger.debug("Adding defaults: (filename: %s, module_path: %s, plugin_type: %s",
+                     filename, module_path, plugin_type)
+        module = os.path.splitext(filename)[0]
+        section = ".".join((plugin_type, module.replace("_defaults", "")))
+        logger.debug("Importing defaults module: %s.%s", module_path, module)
+        mod = import_module("{}.{}".format(module_path, module))
+        self.add_section(title=section, info=mod._HELPTEXT)  # pylint:disable=protected-access
+        for key, val in mod._DEFAULTS.items():  # pylint:disable=protected-access
+            self.add_item(section=section, title=key, **val)
+        logger.debug("Added defaults: %s", section)
diff --git a/plugins/convert/color/_base.py b/plugins/convert/color/_base.py
index 964c3df..1a5c4eb 100644
--- a/plugins/convert/color/_base.py
+++ b/plugins/convert/color/_base.py
@@ -9,24 +9,25 @@ from plugins.convert._config import Config
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
 
 
-def get_config(plugin_name):
+def get_config(plugin_name, configfile=None):
     """ Return the config for the requested model """
-    return Config(plugin_name).config_dict
+    return Config(plugin_name, configfile=configfile).config_dict
 
 
 class Adjustment():
     """ Parent class for adjustments """
-    def __init__(self, config=None):
-        logger.debug("Initializing %s: (config: %s)", self.__class__.__name__, config)
-        self.config = self.set_config(config)
+    def __init__(self, configfile=None, config=None):
+        logger.debug("Initializing %s: (configfile: %s, config: %s)",
+                     self.__class__.__name__, configfile, config)
+        self.config = self.set_config(configfile, config)
         logger.debug("config: %s", self.config)
         logger.debug("Initialized %s", self.__class__.__name__)
 
-    def set_config(self, config):
+    def set_config(self, configfile, config):
         """ Set the config to either global config or passed in config """
         section = ".".join(self.__module__.split(".")[-2:])
         if config is None:
-            retval = get_config(section)
+            retval = get_config(section, configfile)
         else:
             config.section = section
             retval = config.config_dict
diff --git a/plugins/convert/color/color_transfer_defaults.py b/plugins/convert/color/color_transfer_defaults.py
new file mode 100755
index 0000000..b1b0bc4
--- /dev/null
+++ b/plugins/convert/color/color_transfer_defaults.py
@@ -0,0 +1,81 @@
+#!/usr/bin/env python3
+"""
+    The default options for the faceswap Color_Transfer Color plugin.
+
+    Defaults files should be named <plugin_name>_defaults.py
+    Any items placed into this file will automatically get added to the relevant config .ini files
+    within the faceswap/config folder.
+
+    The following variables should be defined:
+        _HELPTEXT: A string describing what this plugin does
+        _DEFAULTS: A dictionary containing the options, defaults and meta information. The
+                   dictionary should be defined as:
+                       {<option_name>: {<metadata>}}
+
+                   <option_name> should always be lower text.
+                   <metadata> dictionary requirements are listed below.
+
+    The following keys are expected for the _DEFAULTS <metadata> dict:
+        datatype:  [required] A python type class. This limits the type of data that can be
+                   provided in the .ini file and ensures that the value is returned in the
+                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
+                   <class 'str'>, <class 'bool'>.
+        default:   [required] The default value for this option.
+        info:      [required] A string describing what this option does.
+        choices:   [optional] If this option's datatype is of <class 'str'> then valid
+                   selections can be defined here. This validates the option and also enables
+                   a combobox / radio option in the GUI.
+        gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
+                   radio buttons rather than a combobox to display this option.
+        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
+                   otherwise it is ignored. Should be a tuple of min and max accepted values.
+                   This is used for controlling the GUI slider range. Values are not enforced.
+        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
+                   required otherwise it is ignored. Used for the GUI slider. For floats, this
+                   is the number of decimal places to display. For ints this is the step size.
+        fixed:     [optional] [train only]. Training configurations are fixed when the model is
+                   created, and then reloaded from the state file. Marking an item as fixed=False
+                   indicates that this value can be changed for existing models, and will override
+                   the value saved in the state file with the updated value in config. If not
+                   provided this will default to True.
+"""
+
+
+_HELPTEXT = (
+    "Options for transfering the color distribution from the source to the target image using the "
+    "mean and standard deviations of the L*a*b* color space.\nThis implementation is (loosely) "
+    "based on the 'Color Transfer between Images' paper by Reinhard et al., 2001. matching the "
+    "histograms between the source and destination faces."
+)
+
+
+_DEFAULTS = {
+    "clip": {
+        "default": True,
+        "info": "Should components of L*a*b* image be scaled by np.clip before converting "
+                "back to BGR color space?\nIf False then components will be min-max scaled "
+                "appropriately.\nClipping will keep target image brightness truer to the "
+                "input.\nScaling will adjust image brightness to avoid washed out portions in "
+                "the resulting color transfer that can be caused by clipping.",
+        "datatype": bool,
+        "rounding": None,
+        "min_max": None,
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "preserve_paper": {
+        "default": True,
+        "info": "Should color transfer strictly follow methodology layed out in original "
+                "paper?\nThe method does not always produce aesthetically pleasing results.\n"
+                "If False then L*a*b* components will be scaled using the reciprocal of the "
+                "scaling factor proposed in the paper. This method seems to produce more "
+                "consistently aesthetically pleasing results.",
+        "datatype": bool,
+        "rounding": None,
+        "min_max": None,
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+}
diff --git a/plugins/convert/color/manual_balance_defaults.py b/plugins/convert/color/manual_balance_defaults.py
new file mode 100755
index 0000000..6663131
--- /dev/null
+++ b/plugins/convert/color/manual_balance_defaults.py
@@ -0,0 +1,117 @@
+#!/usr/bin/env python3
+"""
+    The default options for the faceswap Manual_Balance Color plugin.
+
+    Defaults files should be named <plugin_name>_defaults.py
+    Any items placed into this file will automatically get added to the relevant config .ini files
+    within the faceswap/config folder.
+
+    The following variables should be defined:
+        _HELPTEXT: A string describing what this plugin does
+        _DEFAULTS: A dictionary containing the options, defaults and meta information. The
+                   dictionary should be defined as:
+                       {<option_name>: {<metadata>}}
+
+                   <option_name> should always be lower text.
+                   <metadata> dictionary requirements are listed below.
+
+    The following keys are expected for the _DEFAULTS <metadata> dict:
+        datatype:  [required] A python type class. This limits the type of data that can be
+                   provided in the .ini file and ensures that the value is returned in the
+                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
+                   <class 'str'>, <class 'bool'>.
+        default:   [required] The default value for this option.
+        info:      [required] A string describing what this option does.
+        choices:   [optional] If this option's datatype is of <class 'str'> then valid
+                   selections can be defined here. This validates the option and also enables
+                   a combobox / radio option in the GUI.
+        gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
+                   radio buttons rather than a combobox to display this option.
+        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
+                   otherwise it is ignored. Should be a tuple of min and max accepted values.
+                   This is used for controlling the GUI slider range. Values are not enforced.
+        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
+                   required otherwise it is ignored. Used for the GUI slider. For floats, this
+                   is the number of decimal places to display. For ints this is the step size.
+        fixed:     [optional] [train only]. Training configurations are fixed when the model is
+                   created, and then reloaded from the state file. Marking an item as fixed=False
+                   indicates that this value can be changed for existing models, and will override
+                   the value saved in the state file with the updated value in config. If not
+                   provided this will default to True.
+"""
+
+
+_HELPTEXT = "Options for manually altering the balance of colors of the swapped face"
+
+
+_DEFAULTS = {
+    "colorspace": {
+        "default": "HSV",
+        "info": "The colorspace to use for adjustment: The three adjustment sliders will "
+                "effect the image differently depending on which colorspace is selected:"
+                "\n\t RGB: Red, Green, Blue. An additive colorspace where colors are obtained "
+                "by a linear combination of Red, Green, and Blue values. The three channels "
+                "are correlated by the amount of light hitting the surface. In RGB color "
+                "space the color information is separated into three channels but the same "
+                "three channels also encode brightness information."
+                "\n\t HSV: Hue, Saturation, Value. Hue - Dominant wavelength. Saturation - "
+                "Purity / shades of color. Value - Intensity. Best thing is that it uses only "
+                "one channel to describe color (H), making it very intuitive to specify color."
+                "\n\t LAB: Lightness, A, B. Lightness - Intensity. A - Color range from green "
+                "to magenta. B - Color range from blue to yellow. The L channel is "
+                "independent of color information and encodes brightness only. The other two "
+                "channels encode color."
+                "\n\t YCrCb: Y - Luminance or Luma component obtained from RGB after gamma "
+                "correction. Cr - how far is the red component from Luma. Cb - how far is the "
+                "blue component from Luma. Separates the luminance and chrominance components "
+                "into different channels.",
+        "datatype": str,
+        "rounding": None,
+        "min_max": None,
+        "choices": ["RGB", "HSV", "LAB", "YCrCb"],
+        "gui_radio": True,
+        "fixed": True,
+    },
+    "balance_1": {
+        "default": 0.0,
+        "info": "Balance of channel 1:"
+                "\n\tRGB: Red"
+                "\n\tHSV: Hue"
+                "\n\tLAB: Lightness"
+                "\n\tYCrCb: Luma",
+        "datatype": float,
+        "rounding": 1,
+        "min_max": (-100.0, 100.0),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "balance_2": {
+        "default": 0.0,
+        "info": "Balance of channel 2:"
+                "\n\tRGB: Green"
+                "\n\tHSV: Saturation"
+                "\n\tLAB: Green > Magenta"
+                "\n\tYCrCb: Distance of red from Luma",
+        "datatype": float,
+        "rounding": 1,
+        "min_max": (-100.0, 100.0),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "balance_3": {
+        "default": 0.0,
+        "info": "Balance of channel 3:"
+                "\n\tRGB: Blue"
+                "\n\tHSV: Intensity"
+                "\n\tLAB: Blue > Yellow"
+                "\n\tYCrCb: Distance of blue from Luma",
+        "datatype": float,
+        "rounding": 1,
+        "min_max": (-100.0, 100.0),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+}
diff --git a/plugins/convert/color/match_hist_defaults.py b/plugins/convert/color/match_hist_defaults.py
new file mode 100755
index 0000000..3cbea17
--- /dev/null
+++ b/plugins/convert/color/match_hist_defaults.py
@@ -0,0 +1,60 @@
+#!/usr/bin/env python3
+"""
+    The default options for the faceswap Match_Hist Color plugin.
+
+    Defaults files should be named <plugin_name>_defaults.py
+    Any items placed into this file will automatically get added to the relevant config .ini files
+    within the faceswap/config folder.
+
+    The following variables should be defined:
+        _HELPTEXT: A string describing what this plugin does
+        _DEFAULTS: A dictionary containing the options, defaults and meta information. The
+                   dictionary should be defined as:
+                       {<option_name>: {<metadata>}}
+
+                   <option_name> should always be lower text.
+                   <metadata> dictionary requirements are listed below.
+
+    The following keys are expected for the _DEFAULTS <metadata> dict:
+        datatype:  [required] A python type class. This limits the type of data that can be
+                   provided in the .ini file and ensures that the value is returned in the
+                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
+                   <class 'str'>, <class 'bool'>.
+        default:   [required] The default value for this option.
+        info:      [required] A string describing what this option does.
+        choices:   [optional] If this option's datatype is of <class 'str'> then valid
+                   selections can be defined here. This validates the option and also enables
+                   a combobox / radio option in the GUI.
+        gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
+                   radio buttons rather than a combobox to display this option.
+        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
+                   otherwise it is ignored. Should be a tuple of min and max accepted values.
+                   This is used for controlling the GUI slider range. Values are not enforced.
+        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
+                   required otherwise it is ignored. Used for the GUI slider. For floats, this
+                   is the number of decimal places to display. For ints this is the step size.
+        fixed:     [optional] [train only]. Training configurations are fixed when the model is
+                   created, and then reloaded from the state file. Marking an item as fixed=False
+                   indicates that this value can be changed for existing models, and will override
+                   the value saved in the state file with the updated value in config. If not
+                   provided this will default to True.
+"""
+
+
+_HELPTEXT = "Options for matching the histograms between the source and destination faces"
+
+
+_DEFAULTS = {
+    "threshold": {
+        "default": 99.0,
+        "info": "Adjust the threshold for histogram matching. Can reduce extreme colors "
+                "leaking in by filtering out colors at the extreme ends of the histogram "
+                "spectrum.",
+        "datatype": float,
+        "rounding": 1,
+        "min_max": (90.0, 100.0),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    }
+}
diff --git a/plugins/convert/mask/_base.py b/plugins/convert/mask/_base.py
index 2506246..190d53c 100644
--- a/plugins/convert/mask/_base.py
+++ b/plugins/convert/mask/_base.py
@@ -12,18 +12,19 @@ from plugins.convert._config import Config
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
 
 
-def get_config(plugin_name):
+def get_config(plugin_name, configfile=None):
     """ Return the config for the requested model """
-    return Config(plugin_name).config_dict
+    return Config(plugin_name, configfile=configfile).config_dict
 
 
 class Adjustment():
     """ Parent class for adjustments """
-    def __init__(self, mask_type, output_size, predicted_available, config=None):
+    def __init__(self, mask_type, output_size, predicted_available, configfile=None, config=None):
         logger.debug("Initializing %s: (arguments: '%s', output_size: %s, "
-                     "predicted_available: %s, config: %s)",
-                     self.__class__.__name__, mask_type, output_size, predicted_available, config)
-        self.config = self.set_config(config)
+                     "predicted_available: %s, configfile: %s, config: %s)",
+                     self.__class__.__name__, mask_type, output_size, predicted_available,
+                     configfile, config)
+        self.config = self.set_config(configfile, config)
         logger.debug("config: %s", self.config)
         self.mask_type = self.get_mask_type(mask_type, predicted_available)
         self.dummy = np.zeros((output_size, output_size, 3), dtype='float32')
@@ -31,11 +32,11 @@ class Adjustment():
         self.skip = self.config.get("type", None) is None
         logger.debug("Initialized %s", self.__class__.__name__)
 
-    def set_config(self, config):
+    def set_config(self, configfile, config):
         """ Set the config to either global config or passed in config """
         section = ".".join(self.__module__.split(".")[-2:])
         if config is None:
-            retval = get_config(section)
+            retval = get_config(section, configfile=configfile)
         else:
             config.section = section
             retval = config.config_dict
diff --git a/plugins/convert/mask/box_blend.py b/plugins/convert/mask/box_blend.py
index f421774..c1d34f7 100644
--- a/plugins/convert/mask/box_blend.py
+++ b/plugins/convert/mask/box_blend.py
@@ -13,8 +13,8 @@ class Mask(Adjustment):
         For actions that occur identically for each frame (e.g. blend_box), constants can
         be placed into self.func_constants to be compiled at launch, then referenced for
         each face. """
-    def __init__(self, mask_type, output_size, predicted_available=False, config=None):
-        super().__init__(mask_type, output_size, predicted_available, config)
+    def __init__(self, mask_type, output_size, predicted_available=False, **kwargs):
+        super().__init__(mask_type, output_size, predicted_available, **kwargs)
         self.mask = self.get_mask() if not self.skip else None
 
     def get_mask(self):
diff --git a/plugins/convert/mask/box_blend_defaults.py b/plugins/convert/mask/box_blend_defaults.py
new file mode 100755
index 0000000..3895a2d
--- /dev/null
+++ b/plugins/convert/mask/box_blend_defaults.py
@@ -0,0 +1,105 @@
+#!/usr/bin/env python3
+"""
+    The default options for the faceswap Box_Blend Mask plugin.
+
+    Defaults files should be named <plugin_name>_defaults.py
+    Any items placed into this file will automatically get added to the relevant config .ini files
+    within the faceswap/config folder.
+
+    The following variables should be defined:
+        _HELPTEXT: A string describing what this plugin does
+        _DEFAULTS: A dictionary containing the options, defaults and meta information. The
+                   dictionary should be defined as:
+                       {<option_name>: {<metadata>}}
+
+                   <option_name> should always be lower text.
+                   <metadata> dictionary requirements are listed below.
+
+    The following keys are expected for the _DEFAULTS <metadata> dict:
+        datatype:  [required] A python type class. This limits the type of data that can be
+                   provided in the .ini file and ensures that the value is returned in the
+                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
+                   <class 'str'>, <class 'bool'>.
+        default:   [required] The default value for this option.
+        info:      [required] A string describing what this option does.
+        choices:   [optional] If this option's datatype is of <class 'str'> then valid
+                   selections can be defined here. This validates the option and also enables
+                   a combobox / radio option in the GUI.
+        gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
+                   radio buttons rather than a combobox to display this option.
+        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
+                   otherwise it is ignored. Should be a tuple of min and max accepted values.
+                   This is used for controlling the GUI slider range. Values are not enforced.
+        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
+                   required otherwise it is ignored. Used for the GUI slider. For floats, this
+                   is the number of decimal places to display. For ints this is the step size.
+        fixed:     [optional] [train only]. Training configurations are fixed when the model is
+                   created, and then reloaded from the state file. Marking an item as fixed=False
+                   indicates that this value can be changed for existing models, and will override
+                   the value saved in the state file with the updated value in config. If not
+                   provided this will default to True.
+"""
+
+
+_HELPTEXT = "Options for blending the edges of the swapped box with the background image"
+
+
+_DEFAULTS = {
+    "type": {
+        "default": "gaussian",
+        "info": "The type of blending to use:"
+                "\n\t gaussian: Blend with Gaussian filter. Slower, but often better than "
+                "Normalized"
+                "\n\t normalized: Blend with Normalized box filter. Faster than Gaussian"
+                "\n\t none: Don't perform blending",
+        "datatype": str,
+        "rounding": None,
+        "min_max": None,
+        "choices": ["gaussian", "normalized", "none"],
+        "gui_radio": True,
+        "fixed": True,
+    },
+    "distance": {
+        "default": 11.0,
+        "info": "The distance from the edges of the swap box to start blending.\nThe distance "
+                "is set as percentage of the swap box size to give the number of pixels from "
+                "the edge of the box. Eg: For a swap area of 256px and a percentage of 4%, "
+                "blending would commence 10 pixels from the edge.\nHigher percentages start "
+                "the blending from closer to the center of the face, so will reveal more of "
+                "the source face.",
+        "datatype": float,
+        "rounding": 1,
+        "min_max": (0.1, 25.0),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "radius": {
+        "default": 5.0,
+        "info": "Radius dictates how much blending should occur, or more specifically, how "
+                "far the blending will spread away from the 'distance' parameter.\nThis "
+                "figure is set as a percentage of the swap box size to give the radius in "
+                "pixels. Eg: For a swap area of 256px and a percentage of 5%, the radius "
+                "would be 13 pixels\nNB: Higher percentage means more blending, but too high "
+                "may reveal more of the source face, or lead to hard lines at the border.",
+        "datatype": float,
+        "rounding": 1,
+        "min_max": (0.1, 25.0),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "passes": {
+        "default": 1,
+        "info": "The number of passes to perform. Additional passes of the blending algorithm "
+                "can improve smoothing at a time cost. This is more useful for 'box' type "
+                "blending.\nAdditional passes have exponentially less effect so it's not "
+                "worth setting this too high.",
+        "datatype": int,
+        "rounding": 1,
+        "min_max": (1, 8),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+}
diff --git a/plugins/convert/mask/mask_blend.py b/plugins/convert/mask/mask_blend.py
index c81f72f..e626a10 100644
--- a/plugins/convert/mask/mask_blend.py
+++ b/plugins/convert/mask/mask_blend.py
@@ -10,8 +10,8 @@ from ._base import Adjustment, BlurMask, logger
 
 class Mask(Adjustment):
     """ Return the requested mask """
-    def __init__(self, mask_type, output_size, predicted_available, config=None):
-        super().__init__(mask_type, output_size, predicted_available, config)
+    def __init__(self, mask_type, output_size, predicted_available, **kwargs):
+        super().__init__(mask_type, output_size, predicted_available, **kwargs)
         self.do_erode = self.config.get("erosion", 0) != 0
         self.do_blend = self.config.get("type", None) is not None
 
diff --git a/plugins/convert/mask/mask_blend_defaults.py b/plugins/convert/mask/mask_blend_defaults.py
new file mode 100755
index 0000000..a46e8b7
--- /dev/null
+++ b/plugins/convert/mask/mask_blend_defaults.py
@@ -0,0 +1,100 @@
+#!/usr/bin/env python3
+"""
+    The default options for the faceswap Mask_Blend Mask plugin.
+
+    Defaults files should be named <plugin_name>_defaults.py
+    Any items placed into this file will automatically get added to the relevant config .ini files
+    within the faceswap/config folder.
+
+    The following variables should be defined:
+        _HELPTEXT: A string describing what this plugin does
+        _DEFAULTS: A dictionary containing the options, defaults and meta information. The
+                   dictionary should be defined as:
+                       {<option_name>: {<metadata>}}
+
+                   <option_name> should always be lower text.
+                   <metadata> dictionary requirements are listed below.
+
+    The following keys are expected for the _DEFAULTS <metadata> dict:
+        datatype:  [required] A python type class. This limits the type of data that can be
+                   provided in the .ini file and ensures that the value is returned in the
+                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
+                   <class 'str'>, <class 'bool'>.
+        default:   [required] The default value for this option.
+        info:      [required] A string describing what this option does.
+        choices:   [optional] If this option's datatype is of <class 'str'> then valid
+                   selections can be defined here. This validates the option and also enables
+                   a combobox / radio option in the GUI.
+        gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
+                   radio buttons rather than a combobox to display this option.
+        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
+                   otherwise it is ignored. Should be a tuple of min and max accepted values.
+                   This is used for controlling the GUI slider range. Values are not enforced.
+        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
+                   required otherwise it is ignored. Used for the GUI slider. For floats, this
+                   is the number of decimal places to display. For ints this is the step size.
+        fixed:     [optional] [train only]. Training configurations are fixed when the model is
+                   created, and then reloaded from the state file. Marking an item as fixed=False
+                   indicates that this value can be changed for existing models, and will override
+                   the value saved in the state file with the updated value in config. If not
+                   provided this will default to True.
+"""
+
+
+_HELPTEXT = "Options for blending the edges between the mask and the background image"
+
+
+_DEFAULTS = {
+    "type": {
+        "default": "normalized",
+        "info": "The type of blending to use:"
+                "\n\t gaussian: Blend with Gaussian filter. Slower, but often better than "
+                "Normalized"
+                "\n\t normalized: Blend with Normalized box filter. Faster than Gaussian"
+                "\n\t none: Don't perform blending",
+        "datatype": str,
+        "rounding": None,
+        "min_max": None,
+        "choices": ["gaussian", "normalized", "none"],
+        "gui_radio": True,
+        "fixed": True,
+    },
+    "radius": {
+        "default": 3.0,
+        "info": "Radius dictates how much blending should occur.\nThis figure is set as a "
+                "percentage of the mask diameter to give the radius in pixels. Eg: for a mask "
+                "with diameter 200px, a percentage of 6% would give a final radius of 3px.\n"
+                "Higher percentage means more blending.",
+        "datatype": float,
+        "rounding": 1,
+        "min_max": (0.1, 25.0),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "passes": {
+        "default": 4,
+        "info": "The number of passes to perform. Additional passes of the blending algorithm "
+                "can improve smoothing at a time cost. This is more useful for 'box' type "
+                "blending.\nAdditional passes have exponentially less effect so it's not "
+                "worth setting this too high.",
+        "datatype": int,
+        "rounding": 1,
+        "min_max": (1, 8),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "erosion": {
+        "default": 0.0,
+        "info": "Erosion kernel size as a percentage of the mask radius area.\nPositive "
+                "values apply erosion which reduces the size of the swapped area.\nNegative "
+                "values apply dilation which increases the swapped area.",
+        "datatype": float,
+        "rounding": 1,
+        "min_max": (-100.0, 100.0),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+}
diff --git a/plugins/convert/scaling/_base.py b/plugins/convert/scaling/_base.py
index acd3f61..bee1321 100644
--- a/plugins/convert/scaling/_base.py
+++ b/plugins/convert/scaling/_base.py
@@ -9,25 +9,26 @@ from plugins.convert._config import Config
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
 
 
-def get_config(plugin_name):
+def get_config(plugin_name, configfile=None):
     """ Return the config for the requested model """
-    return Config(plugin_name).config_dict
+    return Config(plugin_name, configfile=configfile).config_dict
 
 
 class Adjustment():
     """ Parent class for scaling adjustments """
-    def __init__(self, config=None):
-        logger.debug("Initializing %s: (config: %s)", self.__class__.__name__, config)
-        self.config = self.set_config(config)
+    def __init__(self, configfile=None, config=None):
+        logger.debug("Initializing %s: (configfile: %s, config: %s)",
+                     self.__class__.__name__, configfile, config)
+        self.config = self.set_config(configfile, config)
         logger.debug("config: %s", self.config)
         logger.debug("Initialized %s", self.__class__.__name__)
 
-    def set_config(self, config):
+    def set_config(self, configfile, config):
         """ Set the config to either global config or passed in config """
         section = ".".join(self.__module__.split(".")[-2:])
         if config is None:
             logger.debug("Loading base config")
-            retval = get_config(section)
+            retval = get_config(section, configfile=configfile)
         else:
             logger.debug("Loading passed in config")
             config.section = section
diff --git a/plugins/convert/scaling/sharpen_defaults.py b/plugins/convert/scaling/sharpen_defaults.py
new file mode 100755
index 0000000..5f020d2
--- /dev/null
+++ b/plugins/convert/scaling/sharpen_defaults.py
@@ -0,0 +1,108 @@
+#!/usr/bin/env python3
+"""
+    The default options for the faceswap Sharpen Scaling plugin.
+
+    Defaults files should be named <plugin_name>_defaults.py
+    Any items placed into this file will automatically get added to the relevant config .ini files
+    within the faceswap/config folder.
+
+    The following variables should be defined:
+        _HELPTEXT: A string describing what this plugin does
+        _DEFAULTS: A dictionary containing the options, defaults and meta information. The
+                   dictionary should be defined as:
+                       {<option_name>: {<metadata>}}
+
+                   <option_name> should always be lower text.
+                   <metadata> dictionary requirements are listed below.
+
+    The following keys are expected for the _DEFAULTS <metadata> dict:
+        datatype:  [required] A python type class. This limits the type of data that can be
+                   provided in the .ini file and ensures that the value is returned in the
+                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
+                   <class 'str'>, <class 'bool'>.
+        default:   [required] The default value for this option.
+        info:      [required] A string describing what this option does.
+        choices:   [optional] If this option's datatype is of <class 'str'> then valid
+                   selections can be defined here. This validates the option and also enables
+                   a combobox / radio option in the GUI.
+        gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
+                   radio buttons rather than a combobox to display this option.
+        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
+                   otherwise it is ignored. Should be a tuple of min and max accepted values.
+                   This is used for controlling the GUI slider range. Values are not enforced.
+        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
+                   required otherwise it is ignored. Used for the GUI slider. For floats, this
+                   is the number of decimal places to display. For ints this is the step size.
+        fixed:     [optional] [train only]. Training configurations are fixed when the model is
+                   created, and then reloaded from the state file. Marking an item as fixed=False
+                   indicates that this value can be changed for existing models, and will override
+                   the value saved in the state file with the updated value in config. If not
+                   provided this will default to True.
+"""
+
+
+_HELPTEXT = "Options for sharpening the face after placement"
+
+
+_DEFAULTS = {
+    "method": {
+        "default": "unsharp_mask",
+        "info": "The type of sharpening to use:"
+                "\n\t box: Fastest, but weakest method. Uses a box filter to assess edges."
+                "\n\t gaussian: Slower, but better than box. Uses a gaussian filter to assess "
+                "edges."
+                "\n\t unsharp-mask: Slowest, but most tweakable. Uses the unsharp-mask method "
+                "to assess edges.",
+        "datatype": str,
+        "rounding": None,
+        "min_max": None,
+        "choices": ["box", "gaussian", "unsharp_mask"],
+        "gui_radio": True,
+        "fixed": True,
+    },
+    "amount": {
+        "default": 150,
+        "info": "Percentage that controls the magnitude of each overshoot (how much darker "
+                "and how much lighter the edge borders become).\nThis can also be thought of "
+                "as how much contrast is added at the edges. It does not affect the width of "
+                "the edge rims.",
+        "datatype": int,
+        "rounding": 1,
+        "min_max": (100, 500),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "radius": {
+        "default": 0.3,
+        "info": "Affects the size of the edges to be enhanced or how wide the edge rims "
+                "become, so a smaller radius enhances smaller-scale detail.\nRadius is set as "
+                "a percentage of the final frame width and rounded to the nearest pixel. E.g "
+                "for a 1280 width frame, a 0.6 percenatage will give a radius of 8px.\nHigher "
+                "radius values can cause halos at the edges, a detectable faint light rim "
+                "around objects. Fine detail needs a smaller radius. \nRadius and amount "
+                "interact; reducing one allows more of the other.",
+        "datatype": float,
+        "rounding": 1,
+        "min_max": (0.1, 5.0),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "threshold": {
+        "default": 5.0,
+        "info": "[unsharp_mask only] Controls the minimal brightness change that will be "
+                "sharpened or how far apart adjacent tonal values have to be before the "
+                "filter does anything.\nThis lack of action is important to prevent smooth "
+                "areas from becoming speckled. The threshold setting can be used to sharpen "
+                "more pronounced edges, while leaving subtler edges untouched. \nLow values "
+                "should sharpen more because fewer areas are excluded. \nHigher threshold "
+                "values exclude areas of lower contrast.",
+        "datatype": float,
+        "rounding": 1,
+        "min_max": (1.0, 10.0),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+}
diff --git a/plugins/convert/writer/_base.py b/plugins/convert/writer/_base.py
index 9c5c8c6..ed0c8a7 100644
--- a/plugins/convert/writer/_base.py
+++ b/plugins/convert/writer/_base.py
@@ -10,17 +10,17 @@ from plugins.convert._config import Config
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
 
 
-def get_config(plugin_name):
+def get_config(plugin_name, configfile=None):
     """ Return the config for the requested model """
-    return Config(plugin_name).config_dict
+    return Config(plugin_name, configfile=configfile).config_dict
 
 
 class Output():
     """ Parent class for scaling adjustments """
-    def __init__(self, output_folder):
+    def __init__(self, output_folder, configfile=None):
         logger.debug("Initializing %s: (output_folder: '%s')",
                      self.__class__.__name__, output_folder)
-        self.config = get_config(".".join(self.__module__.split(".")[-2:]))
+        self.config = get_config(".".join(self.__module__.split(".")[-2:]), configfile=configfile)
         logger.debug("config: %s", self.config)
         self.output_folder = output_folder
         self.output_dimensions = None
diff --git a/plugins/convert/writer/ffmpeg.py b/plugins/convert/writer/ffmpeg.py
index 0b071e3..7947104 100644
--- a/plugins/convert/writer/ffmpeg.py
+++ b/plugins/convert/writer/ffmpeg.py
@@ -13,8 +13,8 @@ from ._base import Output, logger
 
 class Writer(Output):
     """ Video output writer using imageio """
-    def __init__(self, output_folder, total_count, source_video):
-        super().__init__(output_folder)
+    def __init__(self, output_folder, total_count, source_video, **kwargs):
+        super().__init__(output_folder, **kwargs)
         self.source_video = source_video
         self.frame_order = list(range(1, total_count + 1))
         self.output_dimensions = None  # Fix dims of 1st frame in case of different sized images
diff --git a/plugins/convert/writer/ffmpeg_defaults.py b/plugins/convert/writer/ffmpeg_defaults.py
new file mode 100755
index 0000000..4f1bb84
--- /dev/null
+++ b/plugins/convert/writer/ffmpeg_defaults.py
@@ -0,0 +1,180 @@
+#!/usr/bin/env python3
+"""
+    The default options for the faceswap Ffmpeg Writer plugin.
+
+    Defaults files should be named <plugin_name>_defaults.py
+    Any items placed into this file will automatically get added to the relevant config .ini files
+    within the faceswap/config folder.
+
+    The following variables should be defined:
+        _HELPTEXT: A string describing what this plugin does
+        _DEFAULTS: A dictionary containing the options, defaults and meta information. The
+                   dictionary should be defined as:
+                       {<option_name>: {<metadata>}}
+
+                   <option_name> should always be lower text.
+                   <metadata> dictionary requirements are listed below.
+
+    The following keys are expected for the _DEFAULTS <metadata> dict:
+        datatype:  [required] A python type class. This limits the type of data that can be
+                   provided in the .ini file and ensures that the value is returned in the
+                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
+                   <class 'str'>, <class 'bool'>.
+        default:   [required] The default value for this option.
+        info:      [required] A string describing what this option does.
+        choices:   [optional] If this option's datatype is of <class 'str'> then valid
+                   selections can be defined here. This validates the option and also enables
+                   a combobox / radio option in the GUI.
+        gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
+                   radio buttons rather than a combobox to display this option.
+        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
+                   otherwise it is ignored. Should be a tuple of min and max accepted values.
+                   This is used for controlling the GUI slider range. Values are not enforced.
+        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
+                   required otherwise it is ignored. Used for the GUI slider. For floats, this
+                   is the number of decimal places to display. For ints this is the step size.
+        fixed:     [optional] [train only]. Training configurations are fixed when the model is
+                   created, and then reloaded from the state file. Marking an item as fixed=False
+                   indicates that this value can be changed for existing models, and will override
+                   the value saved in the state file with the updated value in config. If not
+                   provided this will default to True.
+"""
+
+
+_HELPTEXT = "Options for encoding converted frames to video."
+
+
+_DEFAULTS = {
+    "container": {
+        "default": "mp4",
+        "info": "Video container to use.",
+        "datatype": str,
+        "rounding": None,
+        "min_max": None,
+        "choices": ["avi", "flv", "mkv", "mov", "mp4", "mpeg", "webm"],
+        "gui_radio": True,
+        "fixed": True,
+    },
+    "codec": {
+        "default": "libx264",
+        "info": "Video codec to use:"
+                "\n\t libx264: H.264. A widely supported and commonly used codec."
+                "\n\t libx265: H.265 / HEVC video encoder application library.",
+        "datatype": str,
+        "rounding": None,
+        "min_max": None,
+        "choices": ["libx264", "libx265"],
+        "gui_radio": True,
+        "fixed": True,
+    },
+    "crf": {
+        "default": 23,
+        "info": "Constant Rate Factor:  0 is lossless and 51 is worst quality possible. A "
+                "lower value generally leads to higher quality, and a subjectively sane range "
+                "is 17-28. Consider 17 or 18 to be visually lossless or nearly so; it should "
+                "look the same or nearly the same as the input but it isn't technically "
+                "lossless.\nThe range is exponential, so increasing the CRF value +6 results "
+                "in roughly half the bitrate / file size, while -6 leads to roughly twice the "
+                "bitrate.",
+        "datatype": int,
+        "rounding": 1,
+        "min_max": (0, 51),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "preset": {
+        "default": "medium",
+        "info": "A preset is a collection of options that will provide a certain encoding "
+                "speed to compression ratio.\nA slower preset will provide better compression "
+                "(compression is quality per filesize).\nUse the slowest preset that you have "
+                "patience for.",
+        "datatype": str,
+        "rounding": None,
+        "min_max": None,
+        "choices": [
+            "ultrafast",
+            "superfast",
+            "veryfast",
+            "faster",
+            "fast",
+            "medium",
+            "slow",
+            "slower",
+            "veryslow",
+        ],
+        "gui_radio": True,
+        "fixed": True,
+    },
+    "tune": {
+        "default": "none",
+        "info": "Change settings based upon the specifics of your input:"
+                "\n\t none: Don't perform any additional tuning."
+                "\n\t film: [H.264 only] Use for high quality movie content; lowers "
+                "deblocking."
+                "\n\t animation: [H.264 only] Good for cartoons; uses higher deblocking and "
+                "more reference frames."
+                "\n\t grain: Preserves the grain structure in old, grainy film material."
+                "\n\t stillimage: [H.264 only] Good for slideshow-like content."
+                "\n\t fastdecode: Allows faster decoding by disabling certain filters."
+                "\n\t zerolatency: Good for fast encoding and low-latency streaming.",
+        "datatype": str,
+        "rounding": None,
+        "min_max": None,
+        "choices": [
+            "none",
+            "film",
+            "animation",
+            "grain",
+            "stillimage",
+            "fastdecode",
+            "zerolatency",
+        ],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "profile": {
+        "default": "auto",
+        "info": "[H.264 Only] Limit the output to a specific H.264 profile. Don't change this "
+                "unless your target device only supports a certain profile.",
+        "datatype": str,
+        "rounding": None,
+        "min_max": None,
+        "choices": ["auto", "baseline", "main", "high", "high10", "high422", "high444"],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "level": {
+        "default": "auto",
+        "info": "[H.264 Only] Set the encoder level, Don't change this unless your target "
+                "device only supports a certain level.",
+        "datatype": str,
+        "rounding": None,
+        "min_max": None,
+        "choices": [
+            "auto",
+            "1",
+            "1b",
+            "1.1",
+            "1.2",
+            "1.3",
+            "2",
+            "2.1",
+            "2.2",
+            "3",
+            "3.1",
+            "3.2",
+            "4",
+            "4.1",
+            "4.2",
+            "5",
+            "5.1",
+            "5.2",
+            "6",
+            "6.1",
+            "6.2",
+        ],
+        "gui_radio": False,
+        "fixed": True,
+    },
+}
diff --git a/plugins/convert/writer/gif.py b/plugins/convert/writer/gif.py
index 9be157f..01ca03a 100644
--- a/plugins/convert/writer/gif.py
+++ b/plugins/convert/writer/gif.py
@@ -10,8 +10,8 @@ from ._base import Output, logger
 
 class Writer(Output):
     """ Video output writer using imageio """
-    def __init__(self, output_folder, total_count):
-        super().__init__(output_folder)
+    def __init__(self, output_folder, total_count, **kwargs):
+        super().__init__(output_folder, **kwargs)
         self.frame_order = list(range(1, total_count + 1))
         self.output_dimensions = None  # Fix dims of 1st frame in case of different sized images
         self.writer = None  # Need to know dimensions of first frame, so set writer then
diff --git a/plugins/convert/writer/gif_defaults.py b/plugins/convert/writer/gif_defaults.py
new file mode 100755
index 0000000..42fb328
--- /dev/null
+++ b/plugins/convert/writer/gif_defaults.py
@@ -0,0 +1,90 @@
+#!/usr/bin/env python3
+"""
+    The default options for the faceswap Gif Writer plugin.
+
+    Defaults files should be named <plugin_name>_defaults.py
+    Any items placed into this file will automatically get added to the relevant config .ini files
+    within the faceswap/config folder.
+
+    The following variables should be defined:
+        _HELPTEXT: A string describing what this plugin does
+        _DEFAULTS: A dictionary containing the options, defaults and meta information. The
+                   dictionary should be defined as:
+                       {<option_name>: {<metadata>}}
+
+                   <option_name> should always be lower text.
+                   <metadata> dictionary requirements are listed below.
+
+    The following keys are expected for the _DEFAULTS <metadata> dict:
+        datatype:  [required] A python type class. This limits the type of data that can be
+                   provided in the .ini file and ensures that the value is returned in the
+                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
+                   <class 'str'>, <class 'bool'>.
+        default:   [required] The default value for this option.
+        info:      [required] A string describing what this option does.
+        choices:   [optional] If this option's datatype is of <class 'str'> then valid
+                   selections can be defined here. This validates the option and also enables
+                   a combobox / radio option in the GUI.
+        gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
+                   radio buttons rather than a combobox to display this option.
+        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
+                   otherwise it is ignored. Should be a tuple of min and max accepted values.
+                   This is used for controlling the GUI slider range. Values are not enforced.
+        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
+                   required otherwise it is ignored. Used for the GUI slider. For floats, this
+                   is the number of decimal places to display. For ints this is the step size.
+        fixed:     [optional] [train only]. Training configurations are fixed when the model is
+                   created, and then reloaded from the state file. Marking an item as fixed=False
+                   indicates that this value can be changed for existing models, and will override
+                   the value saved in the state file with the updated value in config. If not
+                   provided this will default to True.
+"""
+
+
+_HELPTEXT = "Options for outputting converted frames to an animated gif."
+
+
+_DEFAULTS = {
+    "fps": {
+        "default": 25,
+        "info": "Frames per Second.",
+        "datatype": int,
+        "rounding": 1,
+        "min_max": (1, 60),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "loop": {
+        "default": 0,
+        "info": "The number of iterations. Set to 0 to loop indefinitely.",
+        "datatype": int,
+        "rounding": 1,
+        "min_max": (0, 100),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "palettesize": {
+        "default": "256",
+        "info": "The number of colors to quantize the image to. Is rounded to the nearest "
+                "power of two.",
+        "datatype": str,
+        "rounding": None,
+        "min_max": None,
+        "choices": ["2", "4", "8", "16", "32", "64", "128", "256"],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "subrectangles": {
+        "default": False,
+        "info": "If True, will try and optimize the GIF by storing only the rectangular parts "
+                "of each frame that change with respect to the previous.",
+        "datatype": bool,
+        "rounding": None,
+        "min_max": None,
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+}
diff --git a/plugins/convert/writer/opencv.py b/plugins/convert/writer/opencv.py
index f681c7d..cabd0ab 100644
--- a/plugins/convert/writer/opencv.py
+++ b/plugins/convert/writer/opencv.py
@@ -9,8 +9,8 @@ from ._base import Output, logger
 
 class Writer(Output):
     """ Images output writer using cv2 """
-    def __init__(self, output_folder):
-        super().__init__(output_folder)
+    def __init__(self, output_folder, **kwargs):
+        super().__init__(output_folder, **kwargs)
         self.extension = ".{}".format(self.config["format"])
         self.check_transparency_format()
         self.args = self.get_save_args()
diff --git a/plugins/convert/writer/opencv_defaults.py b/plugins/convert/writer/opencv_defaults.py
new file mode 100755
index 0000000..58fd24c
--- /dev/null
+++ b/plugins/convert/writer/opencv_defaults.py
@@ -0,0 +1,101 @@
+#!/usr/bin/env python3
+"""
+    The default options for the faceswap Opencv Writer plugin.
+
+    Defaults files should be named <plugin_name>_defaults.py
+    Any items placed into this file will automatically get added to the relevant config .ini files
+    within the faceswap/config folder.
+
+    The following variables should be defined:
+        _HELPTEXT: A string describing what this plugin does
+        _DEFAULTS: A dictionary containing the options, defaults and meta information. The
+                   dictionary should be defined as:
+                       {<option_name>: {<metadata>}}
+
+                   <option_name> should always be lower text.
+                   <metadata> dictionary requirements are listed below.
+
+    The following keys are expected for the _DEFAULTS <metadata> dict:
+        datatype:  [required] A python type class. This limits the type of data that can be
+                   provided in the .ini file and ensures that the value is returned in the
+                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
+                   <class 'str'>, <class 'bool'>.
+        default:   [required] The default value for this option.
+        info:      [required] A string describing what this option does.
+        choices:   [optional] If this option's datatype is of <class 'str'> then valid
+                   selections can be defined here. This validates the option and also enables
+                   a combobox / radio option in the GUI.
+        gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
+                   radio buttons rather than a combobox to display this option.
+        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
+                   otherwise it is ignored. Should be a tuple of min and max accepted values.
+                   This is used for controlling the GUI slider range. Values are not enforced.
+        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
+                   required otherwise it is ignored. Used for the GUI slider. For floats, this
+                   is the number of decimal places to display. For ints this is the step size.
+        fixed:     [optional] [train only]. Training configurations are fixed when the model is
+                   created, and then reloaded from the state file. Marking an item as fixed=False
+                   indicates that this value can be changed for existing models, and will override
+                   the value saved in the state file with the updated value in config. If not
+                   provided this will default to True.
+"""
+
+
+_HELPTEXT = (
+    "Options for outputting converted frames to a series of images using OpenCV\n"
+    "OpenCV can be faster than other image writers, but lacks some configuration "
+    "options and formats."
+)
+
+
+_DEFAULTS = {
+    "format": {
+        "default": "png",
+        "info": "Image format to use:"
+                "\n\t bmp: Windows bitmap"
+                "\n\t jpg: JPEG format"
+                "\n\t jp2: JPEG 2000 format"
+                "\n\t png: Portable Network Graphics"
+                "\n\t ppm: Portable Pixmap Format",
+        "datatype": str,
+        "rounding": None,
+        "min_max": None,
+        "choices": ["bmp", "jpg", "jp2", "png", "ppm"],
+        "gui_radio": True,
+        "fixed": True,
+    },
+    "draw_transparent": {
+        "default": False,
+        "info": "Place the swapped face on a transparent layer rather than the original frame."
+                "\nNB: This is only compatible with images saved in png format. If an "
+                "incompatible format is selected then the image will be saved as a png.",
+        "datatype": bool,
+        "rounding": None,
+        "min_max": None,
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "jpg_quality": {
+        "default": 75,
+        "info": "[jpg only] Set the jpg quality. 1 is worst 95 is best. Higher quality leads "
+                "to larger file sizes.",
+        "datatype": int,
+        "rounding": 1,
+        "min_max": (1, 95),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "png_compress_level": {
+        "default": 3,
+        "info": "[png only] ZLIB compression level, 1 gives best speed, 9 gives best "
+                "compression, 0 gives no compression at all.",
+        "datatype": int,
+        "rounding": 1,
+        "min_max": (0, 9),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+}
diff --git a/plugins/convert/writer/pillow.py b/plugins/convert/writer/pillow.py
index 21c5e75..e207183 100644
--- a/plugins/convert/writer/pillow.py
+++ b/plugins/convert/writer/pillow.py
@@ -9,8 +9,8 @@ from ._base import Output, logger
 
 class Writer(Output):
     """ Images output writer using cv2 """
-    def __init__(self, output_folder):
-        super().__init__(output_folder)
+    def __init__(self, output_folder, **kwargs):
+        super().__init__(output_folder, **kwargs)
         self.check_transparency_format()
         # Correct format namings for writing to byte stream
         self.format_dict = dict(jpg="JPEG", jp2="JPEG 2000", tif="TIFF")
diff --git a/plugins/convert/writer/pillow_defaults.py b/plugins/convert/writer/pillow_defaults.py
new file mode 100755
index 0000000..c875771
--- /dev/null
+++ b/plugins/convert/writer/pillow_defaults.py
@@ -0,0 +1,146 @@
+#!/usr/bin/env python3
+"""
+    The default options for the faceswap Pillow Writer plugin.
+
+    Defaults files should be named <plugin_name>_defaults.py
+    Any items placed into this file will automatically get added to the relevant config .ini files
+    within the faceswap/config folder.
+
+    The following variables should be defined:
+        _HELPTEXT: A string describing what this plugin does
+        _DEFAULTS: A dictionary containing the options, defaults and meta information. The
+                   dictionary should be defined as:
+                       {<option_name>: {<metadata>}}
+
+                   <option_name> should always be lower text.
+                   <metadata> dictionary requirements are listed below.
+
+    The following keys are expected for the _DEFAULTS <metadata> dict:
+        datatype:  [required] A python type class. This limits the type of data that can be
+                   provided in the .ini file and ensures that the value is returned in the
+                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
+                   <class 'str'>, <class 'bool'>.
+        default:   [required] The default value for this option.
+        info:      [required] A string describing what this option does.
+        choices:   [optional] If this option's datatype is of <class 'str'> then valid
+                   selections can be defined here. This validates the option and also enables
+                   a combobox / radio option in the GUI.
+        gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
+                   radio buttons rather than a combobox to display this option.
+        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
+                   otherwise it is ignored. Should be a tuple of min and max accepted values.
+                   This is used for controlling the GUI slider range. Values are not enforced.
+        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
+                   required otherwise it is ignored. Used for the GUI slider. For floats, this
+                   is the number of decimal places to display. For ints this is the step size.
+        fixed:     [optional] [train only]. Training configurations are fixed when the model is
+                   created, and then reloaded from the state file. Marking an item as fixed=False
+                   indicates that this value can be changed for existing models, and will override
+                   the value saved in the state file with the updated value in config. If not
+                   provided this will default to True.
+"""
+
+
+_HELPTEXT = (
+    "Options for outputting converted frames to a series of images using Pillow\n"
+    "Pillow is more feature rich than OpenCV but can be slower."
+)
+
+
+_DEFAULTS = {
+    "format": {
+        "default": "png",
+        "info": "Image format to use:"
+                "\n\t bmp: Windows bitmap"
+                "\n\t gif: Graphics Interchange Format (NB: Not animated)"
+                "\n\t jpg: JPEG format"
+                "\n\t jp2: JPEG 2000 format"
+                "\n\t png: Portable Network Graphics"
+                "\n\t ppm: Portable Pixmap Format"
+                "\n\t tif: Tag Image File Format",
+        "datatype": str,
+        "rounding": None,
+        "min_max": None,
+        "choices": ["bmp", "gif", "jpg", "jp2", "png", "ppm", "tif"],
+        "gui_radio": True,
+        "fixed": True,
+    },
+    "draw_transparent": {
+        "default": False,
+        "info": "Place the swapped face on a transparent layer rather than the original frame."
+                "\nNB: This is only compatible with images saved in png or tif format. If an "
+                "incompatible format is selected then the image will be saved as a png.",
+        "datatype": bool,
+        "rounding": None,
+        "min_max": None,
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "optimize": {
+        "default": False,
+        "info": "[gif, jpg and png only] If enabled, indicates that the encoder should make "
+                "an extra pass over the image in order to select optimal encoder settings.",
+        "datatype": bool,
+        "rounding": None,
+        "min_max": None,
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "gif_interlace": {
+        "default": True,
+        "info": "[gif only] Set whether to save the gif as interlaced or not.",
+        "datatype": bool,
+        "rounding": None,
+        "min_max": None,
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "jpg_quality": {
+        "default": 75,
+        "info": "[jpg only] Set the jpg quality. 1 is worst 95 is best. Higher quality leads "
+                "to larger file sizes.",
+        "datatype": int,
+        "rounding": 1,
+        "min_max": (1, 95),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "png_compress_level": {
+        "default": 3,
+        "info": "[png only] ZLIB compression level, 1 gives best speed, 9 gives best "
+                "compression, 0 gives no compression at all. When optimize option is set to "
+                "True this has no effect (it is set to 9 regardless of a value passed).",
+        "datatype": int,
+        "rounding": 1,
+        "min_max": (0, 9),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "tif_compression": {
+        "default": "tiff_deflate",
+        "info": "[tif only] The desired compression method for the file.",
+        "datatype": str,
+        "rounding": None,
+        "min_max": None,
+        "choices": [
+            "none",
+            "tiff_ccitt",
+            "group3",
+            "group4",
+            "tiff_jpeg",
+            "tiff_adobe_deflate",
+            "tiff_thunderscan",
+            "tiff_deflate",
+            "tiff_sgilog",
+            "tiff_sgilog24",
+            "tiff_raw_16",
+        ],
+        "gui_radio": False,
+        "fixed": True,
+    },
+}
diff --git a/plugins/extract/_config.py b/plugins/extract/_config.py
index ad59985..5cfdc8a 100644
--- a/plugins/extract/_config.py
+++ b/plugins/extract/_config.py
@@ -2,7 +2,10 @@
 """ Default configurations for extract """
 
 import logging
+import os
+import sys
 
+from importlib import import_module
 from lib.config import FaceswapConfig
 
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
@@ -14,65 +17,26 @@ class Config(FaceswapConfig):
     def set_defaults(self):
         """ Set the default values for config """
         logger.debug("Setting defaults")
-
-        # << GLOBAL OPTIONS >> #
-#        section = "global"
-#        self.add_section(title=section,
-#                         info="Options that apply to all models")
-
-        # << S3FD DETECTOR OPTIONS >> #
-        section = "detect.cv2_dnn"
-        self.add_section(title=section,
-                         info="CV2 DNN Detector options."
-                              "\nA CPU only extractor, is the least reliable, but uses least "
-                              "resources and runs fast on CPU. Use this if not using a GPU and "
-                              "time is important")
-        self.add_item(
-            section=section, title="confidence", datatype=int, default=50, rounding=5,
-            min_max=(25, 100),
-            info="The confidence level at which the detector has succesfully found a face.\n"
-                 "Higher levels will be more discriminating, lower levels will have more false "
-                 "positives")
-
-        # << MTCNN DETECTOR OPTIONS >> #
-        section = "detect.mtcnn"
-        self.add_section(title=section,
-                         info="MTCNN Detector options."
-                              "\nFast on GPU, slow on CPU. Uses fewer resources than other GPU "
-                              "detectors but can often return more false positives.")
-        self.add_item(
-            section=section, title="minsize", datatype=int, default=20, rounding=10,
-            min_max=(20, 1000),
-            info="The minimum size of a face (in pixels) to be accepted as a positive match.\n"
-                 "Lower values use significantly more VRAM and will detect more false positives")
-        self.add_item(
-            section=section, title="threshold_1", datatype=float, default=0.6, rounding=2,
-            min_max=(0.1, 0.9),
-            info="First stage threshold for face detection. This stage obtains face candidates")
-        self.add_item(
-            section=section, title="threshold_2", datatype=float, default=0.7, rounding=2,
-            min_max=(0.1, 0.9),
-            info="Second stage threshold for face detection. This stage refines face candidates")
-        self.add_item(
-            section=section, title="threshold_3", datatype=float, default=0.7, rounding=2,
-            min_max=(0.1, 0.9),
-            info="Third stage threshold for face detection. This stage further refines face "
-                 "candidates")
-        self.add_item(
-            section=section, title="scalefactor", datatype=float, default=0.709, rounding=3,
-            min_max=(0.1, 0.9),
-            info="The scale factor for the image pyramid")
-
-        # << S3FD DETECTOR OPTIONS >> #
-        section = "detect.s3fd"
-        self.add_section(title=section,
-                         info="S3FD Detector options."
-                              "Fast on GPU, slow on CPU. Can detect more faces and fewer false "
-                              "positives than other GPU detectors, but is a lot more resource "
-                              "intensive.")
-        self.add_item(
-            section=section, title="confidence", datatype=int, default=50, rounding=5,
-            min_max=(25, 100),
-            info="The confidence level at which the detector has succesfully found a face.\n"
-                 "Higher levels will be more discriminating, lower levels will have more false "
-                 "positives")
+        current_dir = os.path.dirname(__file__)
+        for dirpath, _, filenames in os.walk(current_dir):
+            default_files = [fname for fname in filenames if fname.endswith("_defaults.py")]
+            if not default_files:
+                continue
+            base_path = os.path.dirname(os.path.realpath(sys.argv[0]))
+            import_path = dirpath.replace(base_path, "").replace("/", ".")[1:]
+            plugin_type = import_path.split(".")[-1]
+            for filename in default_files:
+                self.load_module(filename, import_path, plugin_type)
+
+    def load_module(self, filename, module_path, plugin_type):
+        """ Load the defaults module and add defaults """
+        logger.debug("Adding defaults: (filename: %s, module_path: %s, plugin_type: %s",
+                     filename, module_path, plugin_type)
+        module = os.path.splitext(filename)[0]
+        section = ".".join((plugin_type, module.replace("_defaults", "")))
+        logger.debug("Importing defaults module: %s.%s", module_path, module)
+        mod = import_module("{}.{}".format(module_path, module))
+        self.add_section(title=section, info=mod._HELPTEXT)  # pylint:disable=protected-access
+        for key, val in mod._DEFAULTS.items():  # pylint:disable=protected-access
+            self.add_item(section=section, title=key, **val)
+        logger.debug("Added defaults: %s", section)
diff --git a/plugins/extract/align/_base.py b/plugins/extract/align/_base.py
index ab6193c..dd3c12a 100644
--- a/plugins/extract/align/_base.py
+++ b/plugins/extract/align/_base.py
@@ -34,11 +34,12 @@ logger = logging.getLogger(__name__)  # pylint:disable=invalid-name
 
 class Aligner():
     """ Landmarks Aligner Object """
-    def __init__(self, loglevel,
+    def __init__(self, loglevel, configfile=None,
                  git_model_id=None, model_filename=None, colorspace="BGR", input_size=256):
-        logger.debug("Initializing %s: (loglevel: %s, git_model_id: %s, model_filename: '%s', "
-                     "colorspace: '%s'. input_size: %s)", self.__class__.__name__, loglevel,
-                     git_model_id, model_filename, colorspace, input_size)
+        logger.debug("Initializing %s: (loglevel: %s, configfile: %s, git_model_id: %s, "
+                     "model_filename: '%s', colorspace: '%s'. input_size: %s)",
+                     self.__class__.__name__, loglevel, configfile, git_model_id, model_filename,
+                     colorspace, input_size)
         self.loglevel = loglevel
         self.colorspace = colorspace.upper()
         self.input_size = input_size
diff --git a/plugins/extract/detect/_base.py b/plugins/extract/detect/_base.py
index b737b63..f75626a 100755
--- a/plugins/extract/detect/_base.py
+++ b/plugins/extract/detect/_base.py
@@ -26,19 +26,20 @@ from plugins.extract._config import Config
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
 
 
-def get_config(plugin_name):
+def get_config(plugin_name, configfile=None):
     """ Return the config for the requested model """
-    return Config(plugin_name).config_dict
+    return Config(plugin_name, configfile=configfile).config_dict
 
 
 class Detector():
     """ Detector object """
-    def __init__(self, loglevel,
+    def __init__(self, loglevel, configfile=None,
                  git_model_id=None, model_filename=None, rotation=None, min_size=0):
-        logger.debug("Initializing %s: (loglevel: %s, git_model_id: %s, model_filename: %s, "
-                     "rotation: %s, min_size: %s)", self.__class__.__name__, loglevel,
-                     git_model_id, model_filename, rotation, min_size)
-        self.config = get_config(".".join(self.__module__.split(".")[-2:]))
+        logger.debug("Initializing %s: (loglevel: %s, configfile: %s, git_model_id: %s, "
+                     "model_filename: %s, rotation: %s, min_size: %s)",
+                     self.__class__.__name__, loglevel, configfile, git_model_id,
+                     model_filename, rotation, min_size)
+        self.config = get_config(".".join(self.__module__.split(".")[-2:]), configfile=configfile)
         self.loglevel = loglevel
         self.rotation = self.get_rotation_angles(rotation)
         self.min_size = min_size
diff --git a/plugins/extract/detect/cv2_dnn_defaults.py b/plugins/extract/detect/cv2_dnn_defaults.py
new file mode 100755
index 0000000..9bee627
--- /dev/null
+++ b/plugins/extract/detect/cv2_dnn_defaults.py
@@ -0,0 +1,64 @@
+#!/usr/bin/env python3
+"""
+    The default options for the faceswap Cv2_Dnn Detect plugin.
+
+    Defaults files should be named <plugin_name>_defaults.py
+    Any items placed into this file will automatically get added to the relevant config .ini files
+    within the faceswap/config folder.
+
+    The following variables should be defined:
+        _HELPTEXT: A string describing what this plugin does
+        _DEFAULTS: A dictionary containing the options, defaults and meta information. The
+                   dictionary should be defined as:
+                       {<option_name>: {<metadata>}}
+
+                   <option_name> should always be lower text.
+                   <metadata> dictionary requirements are listed below.
+
+    The following keys are expected for the _DEFAULTS <metadata> dict:
+        datatype:  [required] A python type class. This limits the type of data that can be
+                   provided in the .ini file and ensures that the value is returned in the
+                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
+                   <class 'str'>, <class 'bool'>.
+        default:   [required] The default value for this option.
+        info:      [required] A string describing what this option does.
+        choices:   [optional] If this option's datatype is of <class 'str'> then valid
+                   selections can be defined here. This validates the option and also enables
+                   a combobox / radio option in the GUI.
+        gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
+                   radio buttons rather than a combobox to display this option.
+        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
+                   otherwise it is ignored. Should be a tuple of min and max accepted values.
+                   This is used for controlling the GUI slider range. Values are not enforced.
+        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
+                   required otherwise it is ignored. Used for the GUI slider. For floats, this
+                   is the number of decimal places to display. For ints this is the step size.
+        fixed:     [optional] [train only]. Training configurations are fixed when the model is
+                   created, and then reloaded from the state file. Marking an item as fixed=False
+                   indicates that this value can be changed for existing models, and will override
+                   the value saved in the state file with the updated value in config. If not
+                   provided this will default to True.
+"""
+
+
+_HELPTEXT = (
+    "CV2 DNN Detector options.\n"
+    "A CPU only extractor, is the least reliable, but uses least resources and runs fast on CPU. "
+    "Use this if not using a GPU and time is important"
+)
+
+
+_DEFAULTS = {
+    "confidence": {
+        "default": 50,
+        "info": "The confidence level at which the detector has succesfully found a face.\n"
+                "Higher levels will be more discriminating, lower levels will have more false "
+                "positives.",
+        "datatype": int,
+        "rounding": 5,
+        "min_max": (25, 100),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    }
+}
diff --git a/plugins/extract/detect/mtcnn_defaults.py b/plugins/extract/detect/mtcnn_defaults.py
new file mode 100755
index 0000000..6692527
--- /dev/null
+++ b/plugins/extract/detect/mtcnn_defaults.py
@@ -0,0 +1,107 @@
+#!/usr/bin/env python3
+"""
+    The default options for the faceswap Mtcnn Detect plugin.
+
+    Defaults files should be named <plugin_name>_defaults.py
+    Any items placed into this file will automatically get added to the relevant config .ini files
+    within the faceswap/config folder.
+
+    The following variables should be defined:
+        _HELPTEXT: A string describing what this plugin does
+        _DEFAULTS: A dictionary containing the options, defaults and meta information. The
+                   dictionary should be defined as:
+                       {<option_name>: {<metadata>}}
+
+                   <option_name> should always be lower text.
+                   <metadata> dictionary requirements are listed below.
+
+    The following keys are expected for the _DEFAULTS <metadata> dict:
+        datatype:  [required] A python type class. This limits the type of data that can be
+                   provided in the .ini file and ensures that the value is returned in the
+                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
+                   <class 'str'>, <class 'bool'>.
+        default:   [required] The default value for this option.
+        info:      [required] A string describing what this option does.
+        choices:   [optional] If this option's datatype is of <class 'str'> then valid
+                   selections can be defined here. This validates the option and also enables
+                   a combobox / radio option in the GUI.
+        gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
+                   radio buttons rather than a combobox to display this option.
+        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
+                   otherwise it is ignored. Should be a tuple of min and max accepted values.
+                   This is used for controlling the GUI slider range. Values are not enforced.
+        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
+                   required otherwise it is ignored. Used for the GUI slider. For floats, this
+                   is the number of decimal places to display. For ints this is the step size.
+        fixed:     [optional] [train only]. Training configurations are fixed when the model is
+                   created, and then reloaded from the state file. Marking an item as fixed=False
+                   indicates that this value can be changed for existing models, and will override
+                   the value saved in the state file with the updated value in config. If not
+                   provided this will default to True.
+"""
+
+
+_HELPTEXT = (
+    "MTCNN Detector options.\n"
+    "Fast on GPU, slow on CPU. Uses fewer resources than other GPU detectors but can often return "
+    "more false positives."
+)
+
+
+_DEFAULTS = {
+    "minsize": {
+        "default": 20,
+        "info": "The minimum size of a face (in pixels) to be accepted as a positive match.\n"
+                "Lower values use significantly more VRAM and will detect more false "
+                "positives.",
+        "datatype": int,
+        "rounding": 10,
+        "min_max": (20, 1000),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "threshold_1": {
+        "default": 0.6,
+        "info": "First stage threshold for face detection. This stage obtains face "
+                "candidates.",
+        "datatype": float,
+        "rounding": 2,
+        "min_max": (0.1, 0.9),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "threshold_2": {
+        "default": 0.7,
+        "info": "Second stage threshold for face detection. This stage refines face "
+                "candidates.",
+        "datatype": float,
+        "rounding": 2,
+        "min_max": (0.1, 0.9),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "threshold_3": {
+        "default": 0.7,
+        "info": "Third stage threshold for face detection. This stage further refines face "
+                "candidates.",
+        "datatype": float,
+        "rounding": 2,
+        "min_max": (0.1, 0.9),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "scalefactor": {
+        "default": 0.709,
+        "info": "The scale factor for the image pyramid.",
+        "datatype": float,
+        "rounding": 3,
+        "min_max": (0.1, 0.9),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+}
diff --git a/plugins/extract/detect/s3fd_defaults.py b/plugins/extract/detect/s3fd_defaults.py
new file mode 100755
index 0000000..0f55892
--- /dev/null
+++ b/plugins/extract/detect/s3fd_defaults.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+"""
+    The default options for the faceswap S3Fd Detect plugin.
+
+    Defaults files should be named <plugin_name>_defaults.py
+    Any items placed into this file will automatically get added to the relevant config .ini files
+    within the faceswap/config folder.
+
+    The following variables should be defined:
+        _HELPTEXT: A string describing what this plugin does
+        _DEFAULTS: A dictionary containing the options, defaults and meta information. The
+                   dictionary should be defined as:
+                       {<option_name>: {<metadata>}}
+
+                   <option_name> should always be lower text.
+                   <metadata> dictionary requirements are listed below.
+
+    The following keys are expected for the _DEFAULTS <metadata> dict:
+        datatype:  [required] A python type class. This limits the type of data that can be
+                   provided in the .ini file and ensures that the value is returned in the
+                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
+                   <class 'str'>, <class 'bool'>.
+        default:   [required] The default value for this option.
+        info:      [required] A string describing what this option does.
+        choices:   [optional] If this option's datatype is of <class 'str'> then valid
+                   selections can be defined here. This validates the option and also enables
+                   a combobox / radio option in the GUI.
+        gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
+                   radio buttons rather than a combobox to display this option.
+        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
+                   otherwise it is ignored. Should be a tuple of min and max accepted values.
+                   This is used for controlling the GUI slider range. Values are not enforced.
+        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
+                   required otherwise it is ignored. Used for the GUI slider. For floats, this
+                   is the number of decimal places to display. For ints this is the step size.
+        fixed:     [optional] [train only]. Training configurations are fixed when the model is
+                   created, and then reloaded from the state file. Marking an item as fixed=False
+                   indicates that this value can be changed for existing models, and will override
+                   the value saved in the state file with the updated value in config. If not
+                   provided this will default to True.
+"""
+
+
+_HELPTEXT = (
+    "S3FD Detector options.Fast on GPU, slow on CPU. Can detect more faces and fewer false "
+    "positives than other GPU detectors, but is a lot more resource intensive."
+    )
+
+
+_DEFAULTS = {
+    "confidence": {
+        "default": 50,
+        "info": "The confidence level at which the detector has succesfully found a face.\n"
+                "Higher levels will be more discriminating, lower levels will have more false "
+                "positives.",
+        "datatype": int,
+        "rounding": 5,
+        "min_max": (25, 100),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    }
+}
diff --git a/plugins/extract/pipeline.py b/plugins/extract/pipeline.py
index ccbcc06..e926c6e 100644
--- a/plugins/extract/pipeline.py
+++ b/plugins/extract/pipeline.py
@@ -23,13 +23,14 @@ class Extractor():
             Extractor.input_queue
     """
     def __init__(self, detector, aligner, loglevel,
-                 multiprocess=False, rotate_images=None, min_size=20):
-        logger.debug("Initializing %s: (detector: %s, aligner: %s, loglevel: %s, multiprocess: %s"
-                     ", rotate_images: %s, min_size: %s)", self.__class__.__name__, detector,
-                     aligner, loglevel, multiprocess, rotate_images, min_size)
+                 configfile=None, multiprocess=False, rotate_images=None, min_size=20):
+        logger.debug("Initializing %s: (detector: %s, aligner: %s, loglevel: %s, configfile: %s, "
+                     "multiprocess: %s, rotate_images: %s, min_size: %s)", self.__class__.__name__,
+                     detector, aligner, loglevel, configfile, multiprocess, rotate_images,
+                     min_size)
         self.phase = "detect"
-        self.detector = self.load_detector(detector, loglevel, rotate_images, min_size)
-        self.aligner = self.load_aligner(aligner, loglevel)
+        self.detector = self.load_detector(detector, loglevel, rotate_images, min_size, configfile)
+        self.aligner = self.load_aligner(aligner, loglevel, configfile)
         self.is_parallel = self.set_parallel_processing(multiprocess)
         self.processes = list()
         self.queues = self.add_queues()
@@ -69,21 +70,22 @@ class Extractor():
         return retval
 
     @staticmethod
-    def load_detector(detector, loglevel, rotation, min_size):
+    def load_detector(detector, loglevel, rotation, min_size, configfile):
         """ Set global arguments and load detector plugin """
         detector_name = detector.replace("-", "_").lower()
         logger.debug("Loading Detector: '%s'", detector_name)
         detector = PluginLoader.get_detector(detector_name)(loglevel=loglevel,
                                                             rotation=rotation,
-                                                            min_size=min_size)
+                                                            min_size=min_size,
+                                                            configfile=configfile)
         return detector
 
     @staticmethod
-    def load_aligner(aligner, loglevel):
+    def load_aligner(aligner, loglevel, configfile):
         """ Set global arguments and load aligner plugin """
         aligner_name = aligner.replace("-", "_").lower()
         logger.debug("Loading Aligner: '%s'", aligner_name)
-        aligner = PluginLoader.get_aligner(aligner_name)(loglevel=loglevel)
+        aligner = PluginLoader.get_aligner(aligner_name)(loglevel=loglevel, configfile=configfile)
         return aligner
 
     def set_parallel_processing(self, multiprocess):
diff --git a/plugins/train/_config.py b/plugins/train/_config.py
index 010e737..f92c07c 100644
--- a/plugins/train/_config.py
+++ b/plugins/train/_config.py
@@ -2,24 +2,16 @@
 """ Default configurations for models """
 
 import logging
+import os
+import sys
+
+from importlib import import_module
 
 from lib.config import FaceswapConfig
 from lib.model.masks import get_available_masks
 
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
 
-MASK_TYPES = get_available_masks()
-MASK_INFO = ("The mask to be used for training:"
-             "\n\t none: Doesn't use any mask."
-             "\n\t components: An improved face hull mask using a facehull of 8 facial parts"
-             "\n\t dfl_full: An improved face hull mask using a facehull of 3 facial parts"
-             "\n\t facehull: Face cutout based on landmarks")
-COVERAGE_INFO = ("How much of the extracted image to train on. Generally the model is optimized\n"
-                 "to the default value. Sensible values to use are:"
-                 "\n\t62.5%% spans from eyebrow to eyebrow."
-                 "\n\t75.0%% spans from temple to temple."
-                 "\n\t87.5%% spans from ear to ear."
-                 "\n\t100.0%% is a mugshot.")
 ADDITIONAL_INFO = ("\nNB: Unless specifically stated, values changed here will only take effect "
                    "when creating a new model.")
 
@@ -30,10 +22,33 @@ class Config(FaceswapConfig):
     def set_defaults(self):
         """ Set the default values for config """
         logger.debug("Setting defaults")
-        # << GLOBAL OPTIONS >> #
+        self.set_globals()
+        current_dir = os.path.dirname(__file__)
+        for dirpath, _, filenames in os.walk(current_dir):
+            default_files = [fname for fname in filenames if fname.endswith("_defaults.py")]
+            if not default_files:
+                continue
+            base_path = os.path.dirname(os.path.realpath(sys.argv[0]))
+            import_path = dirpath.replace(base_path, "").replace("/", ".")[1:]
+            plugin_type = import_path.split(".")[-1]
+            for filename in default_files:
+                self.load_module(filename, import_path, plugin_type)
+
+    def set_globals(self):
+        """ Set the global options for training """
+        logger.debug("Setting global config")
         section = "global"
         self.add_section(title=section,
                          info="Options that apply to all models" + ADDITIONAL_INFO)
+        self.add_item(section=section, title="mask_type", datatype=str, default="none",
+                      choices=get_available_masks(), gui_radio=True,
+                      info="The mask to be used for training:"
+                           "\n\t none: Doesn't use any mask."
+                           "\n\t components: An improved face hull mask using a facehull of 8 "
+                           "facial parts"
+                           "\n\t dfl_full: An improved face hull mask using a facehull of 3 "
+                           "facial parts"
+                           "\n\t facehull: Face cutout based on landmarks")
         self.add_item(
             section=section, title="icnr_init", datatype=bool, default=False,
             info="Use ICNR Kernel Initializer for upscaling.\nThis can help reduce the "
@@ -56,190 +71,18 @@ class Config(FaceswapConfig):
             info="If using a mask, This penalizes the loss for the masked area, to give higher "
                  "priority to the face area. \nShould increase overall quality and speed up "
                  "training. This should probably be left at True")
+        logger.debug("Set global config")
 
-        # << DFAKER OPTIONS >> #
-        section = "model.dfaker"
-        self.add_section(title=section,
-                         info="Dfaker Model (Adapted from https://github.com/dfaker/df)" +
-                         ADDITIONAL_INFO)
-        self.add_item(
-            section=section, title="mask_type", datatype=str, default="facehull",
-            choices=MASK_TYPES, gui_radio=True, info=MASK_INFO)
-        self.add_item(
-            section=section, title="coverage", datatype=float, default=100.0, rounding=1,
-            min_max=(62.5, 100.0), info=COVERAGE_INFO)
-
-        # << DFL MODEL OPTIONS >> #
-        section = "model.dfl_h128"
-        self.add_section(title=section,
-                         info="DFL H128 Model (Adapted from "
-                              "https://github.com/iperov/DeepFaceLab)" + ADDITIONAL_INFO)
-        self.add_item(
-            section=section, title="lowmem", datatype=bool, default=False,
-            info="Lower memory mode. Set to 'True' if having issues with VRAM useage.\nNB: Models "
-                 "with a changed lowmem mode are not compatible with each other.")
-        self.add_item(
-            section=section, title="mask_type", datatype=str, default="dfl_full",
-            choices=MASK_TYPES, gui_radio=True, info=MASK_INFO)
-        self.add_item(
-            section=section, title="coverage", datatype=float, default=62.5, rounding=1,
-            min_max=(62.5, 100.0), info=COVERAGE_INFO)
-
-        # << IAE MODEL OPTIONS >> #
-        section = "model.iae"
-        self.add_section(title=section,
-                         info="Intermediate Auto Encoder. Based on Original Model, uses "
-                              "intermediate layers to try to better get details" + ADDITIONAL_INFO)
-        self.add_item(
-            section=section, title="mask_type", datatype=str, default="none",
-            choices=MASK_TYPES, gui_radio=True, info=MASK_INFO)
-        self.add_item(
-            section=section, title="coverage", datatype=float, default=62.5, rounding=1,
-            min_max=(62.5, 100.0), info=COVERAGE_INFO)
-
-        # << LIGHTWEIGHT MODEL OPTIONS >> #
-        section = "model.lightweight"
-        self.add_section(title=section,
-                         info="A lightweight version of the Original Faceswap Model, designed to "
-                              "run on lower end GPUs (~2GB).\nDon't expect great results, but it "
-                              "allows users with lower end cards to play with the "
-                              "software." + ADDITIONAL_INFO)
-        self.add_item(
-            section=section, title="mask_type", datatype=str, default="none",
-            choices=MASK_TYPES, gui_radio=True, info=MASK_INFO)
-        self.add_item(
-            section=section, title="coverage", datatype=float, default=62.5, rounding=1,
-            min_max=(62.5, 100.0), info=COVERAGE_INFO)
-
-        # << ORIGINAL MODEL OPTIONS >> #
-        section = "model.original"
-        self.add_section(title=section,
-                         info="Original Faceswap Model" + ADDITIONAL_INFO)
-        self.add_item(
-            section=section, title="lowmem", datatype=bool, default=False,
-            info="Lower memory mode. Set to 'True' if having issues with VRAM useage.\nNB: Models "
-                 "with a changed lowmem mode are not compatible with each other.")
-        self.add_item(
-            section=section, title="mask_type", datatype=str, default="none",
-            choices=MASK_TYPES, gui_radio=True, info=MASK_INFO)
-        self.add_item(
-            section=section, title="coverage", datatype=float, default=62.5, rounding=1,
-            min_max=(62.5, 100.0), info=COVERAGE_INFO)
-
-        # << UNBALANCED MODEL OPTIONS >> #
-        section = "model.unbalanced"
-        self.add_section(title=section,
-                         info="An unbalanced model with adjustable input size options.\nThis is "
-                              "an unbalanced model so b>a swaps may not work "
-                              "well" + ADDITIONAL_INFO)
-        self.add_item(
-            section=section, title="lowmem", datatype=bool, default=False,
-            info="Lower memory mode. Set to 'True' if having issues with VRAM useage.\nNB: Models "
-                 "with a changed lowmem mode are not compatible with each other. NB: lowmem will "
-                 "override cutom nodes and complexity settings.")
-        self.add_item(
-            section=section, title="clipnorm", datatype=bool, default=True,
-            info="Controls gradient clipping of the optimizer. Can prevent model corruption at "
-                 "the expense of VRAM")
-        self.add_item(
-            section=section, title="mask_type", datatype=str, default="none",
-            choices=MASK_TYPES, gui_radio=True, info=MASK_INFO)
-        self.add_item(
-            section=section, title="nodes", datatype=int, default=1024, rounding=64,
-            min_max=(512, 4096),
-            info="Number of nodes for decoder. Don't change this unless you "
-                 "know what you are doing!")
-        self.add_item(
-            section=section, title="complexity_encoder", datatype=int, default=128,
-            rounding=16, min_max=(64, 1024),
-            info="Encoder Convolution Layer Complexity. sensible ranges: "
-                 "128 to 160")
-        self.add_item(
-            section=section, title="complexity_decoder_a", datatype=int, default=384,
-            rounding=16, min_max=(64, 1024),
-            info="Decoder A Complexity.")
-        self.add_item(
-            section=section, title="complexity_decoder_b", datatype=int, default=512,
-            rounding=16, min_max=(64, 1024),
-            info="Decoder B Complexity.")
-        self.add_item(
-            section=section, title="input_size", datatype=int, default=128,
-            rounding=64, min_max=(64, 512),
-            info="Resolution (in pixels) of the image to train on.\n"
-                 "BE AWARE Larger resolution will dramatically increase"
-                 "VRAM requirements.\n"
-                 "Make sure your resolution is divisible by 64 (e.g. 64, 128, 256 etc.).\n"
-                 "NB: Your faceset must be at least 1.6x larger than your required input size.\n"
-                 "    (e.g. 160 is the maximum input size for a 256x256 faceset)")
-        self.add_item(
-            section=section, title="coverage", datatype=float, default=62.5, rounding=1,
-            min_max=(62.5, 100.0), info=COVERAGE_INFO)
-
-        # << PEGASUS MODEL OPTIONS >> #
-        section = "model.realface"
-        self.add_section(title=section,
-                         info="An extra detailed variant of Original model.\n"
-                              "Incorporates ideas from Bryanlyon and inspiration from the Villain "
-                              "model.\n"
-                              "Requires about 6GB-8GB of VRAM (batchsize 8-16)." + ADDITIONAL_INFO)
-        self.add_item(
-            section=section, title="mask_type", datatype=str, default="components",
-            choices=MASK_TYPES, gui_radio=True, info=MASK_INFO)
-        self.add_item(
-            section=section, title="coverage", datatype=float, default=62.5, rounding=1,
-            min_max=(62.5, 100.0),
-            info="{}\nThe model is essentially created for 60-80% coverage as it follows "
-                 "Original paradigm.\nYou may try higher values but good results are not "
-                 "guaranteed.".format(COVERAGE_INFO))
-        self.add_item(
-            section=section, title="input_size", datatype=int, default=64,
-            rounding=16, min_max=(64, 128),
-            info="Resolution (in pixels) of the input image to train on.\n"
-                 "BE AWARE Larger resolution will dramatically increase"
-                 "VRAM requirements.\n"
-                 "Higher resolutions may increase prediction accuracy, but does not effect the "
-                 "resulting output size.\n"
-                 "Must be between 64 and 128 and be divisible by 16.")
-        self.add_item(
-            section=section, title="output_size", datatype=int, default=128,
-            rounding=16, min_max=(64, 256),
-            info="Output image resolution (in pixels).\n"
-                 "Be aware that larger resolution will increase VRAM requirements.\n"
-                 "NB: Must be between 64 and 256 and be divisible by 16.")
-        self.add_item(
-            section=section, title="dense_nodes", datatype=int, default=1536, rounding=64,
-            min_max=(768, 2048),
-            info="Number of nodes for decoder. Might affect your model's ability to learn in "
-                 "general.\n"
-                 "Note that: Lower values will affect the ability to predict details.")
-        self.add_item(
-            section=section, title="complexity_encoder", datatype=int, default=128,
-            min_max=(96, 160), rounding=4,
-            info="Encoder Convolution Layer Complexity. sensible ranges: "
-                 "128 to 150")
-        self.add_item(
-            section=section, title="complexity_decoder", datatype=int, default=512,
-            rounding=4, min_max=(512, 544),
-            info="Decoder Complexity.")
-        self.add_item(
-            section=section, title="learning_rate", datatype=float, default=5e-5,
-            min_max=(5e-6, 1e-4), rounding=6, fixed=False,
-            info="Learning rate - how fast your network will learn.\n"
-                 "Note that: Higher values might result in RSoD failure.")
-
-        # << VILLAIN MODEL OPTIONS >> #
-        section = "model.villain"
-        self.add_section(title=section,
-                         info="A Higher resolution version of the Original "
-                              "Model by VillainGuy.\nExtremely VRAM heavy. Full model requires "
-                              "9GB+ for batchsize 16" + ADDITIONAL_INFO)
-        self.add_item(
-            section=section, title="lowmem", datatype=bool, default=False,
-            info="Lower memory mode. Set to 'True' if having issues with VRAM useage.\nNB: Models "
-                 "with a changed lowmem mode are not compatible with each other.")
-        self.add_item(
-            section=section, title="mask_type", datatype=str, default="none",
-            choices=MASK_TYPES, gui_radio=True, info=MASK_INFO)
-        self.add_item(
-            section=section, title="coverage", datatype=float, default=62.5, rounding=1,
-            min_max=(62.5, 100.0), info=COVERAGE_INFO)
+    def load_module(self, filename, module_path, plugin_type):
+        """ Load the defaults module and add defaults """
+        logger.debug("Adding defaults: (filename: %s, module_path: %s, plugin_type: %s",
+                     filename, module_path, plugin_type)
+        module = os.path.splitext(filename)[0]
+        section = ".".join((plugin_type, module.replace("_defaults", "")))
+        logger.debug("Importing defaults module: %s.%s", module_path, module)
+        mod = import_module("{}.{}".format(module_path, module))
+        helptext = mod._HELPTEXT + ADDITIONAL_INFO  # pylint:disable=protected-access
+        self.add_section(title=section, info=helptext)
+        for key, val in mod._DEFAULTS.items():  # pylint:disable=protected-access
+            self.add_item(section=section, title=key, **val)
+        logger.debug("Added defaults: %s", section)
diff --git a/plugins/train/model/_base.py b/plugins/train/model/_base.py
index 11f2570..04a2f05 100644
--- a/plugins/train/model/_base.py
+++ b/plugins/train/model/_base.py
@@ -35,6 +35,7 @@ class ModelBase():
     def __init__(self,
                  model_dir,
                  gpus,
+                 configfile=None,
                  no_logs=False,
                  warp_to_landmarks=False,
                  augment_color=False,
@@ -48,17 +49,20 @@ class ModelBase():
                  pingpong=False,
                  memory_saving_gradients=False,
                  predict=False):
-        logger.debug("Initializing ModelBase (%s): (model_dir: '%s', gpus: %s, no_logs: %s"
-                     "warp_to_landmarks: %s, augment_color: %s, no_flip: %s, training_image_size, "
-                     "%s, alignments_paths: %s, preview_scale: %s, input_shape: %s, encoder_dim: "
-                     "%s, trainer: %s, pingpong: %s, memory_saving_gradients: %s, predict: %s)",
-                     self.__class__.__name__, model_dir, gpus, no_logs, warp_to_landmarks,
-                     augment_color, no_flip, training_image_size, alignments_paths, preview_scale,
-                     input_shape, encoder_dim, trainer, pingpong, memory_saving_gradients, predict)
+        logger.debug("Initializing ModelBase (%s): (model_dir: '%s', gpus: %s, configfile: %s, "
+                     "no_logs: %s, warp_to_landmarks: %s, augment_color: %s, no_flip: %s, "
+                     "training_image_size, %s, alignments_paths: %s, preview_scale: %s, "
+                     "input_shape: %s, encoder_dim: %s, trainer: %s, pingpong: %s, "
+                     "memory_saving_gradients: %s, predict: %s)",
+                     self.__class__.__name__, model_dir, gpus, configfile, no_logs,
+                     warp_to_landmarks, augment_color, no_flip, training_image_size,
+                     alignments_paths, preview_scale, input_shape, encoder_dim, trainer, pingpong,
+                     memory_saving_gradients, predict)
 
         self.predict = predict
         self.model_dir = model_dir
         self.gpus = gpus
+        self.configfile = configfile
         self.blocks = NNBlocks(use_subpixel=self.config["subpixel_upscaling"],
                                use_icnr_init=self.config["icnr_init"],
                                use_reflect_padding=self.config["reflect_padding"])
@@ -109,14 +113,14 @@ class ModelBase():
         if not _CONFIG:
             model_name = self.config_section
             logger.debug("Loading config for: %s", model_name)
-            _CONFIG = Config(model_name).config_dict
+            _CONFIG = Config(model_name, configfile=self.configfile).config_dict
         return _CONFIG
 
     @property
     def config_changeable_items(self):
         """ Return the dict of config items that can be updated after the model
             has been created """
-        return Config(self.config_section).changeable_items
+        return Config(self.config_section, configfile=self.configfile).changeable_items
 
     @property
     def name(self):
diff --git a/plugins/train/model/dfaker_defaults.py b/plugins/train/model/dfaker_defaults.py
new file mode 100755
index 0000000..b9f8196
--- /dev/null
+++ b/plugins/train/model/dfaker_defaults.py
@@ -0,0 +1,63 @@
+#!/usr/bin/env python3
+"""
+    The default options for the faceswap Dfaker Model plugin.
+
+    Defaults files should be named <plugin_name>_defaults.py
+    Any items placed into this file will automatically get added to the relevant config .ini files
+    within the faceswap/config folder.
+
+    The following variables should be defined:
+        _HELPTEXT: A string describing what this plugin does
+        _DEFAULTS: A dictionary containing the options, defaults and meta information. The
+                   dictionary should be defined as:
+                       {<option_name>: {<metadata>}}
+
+                   <option_name> should always be lower text.
+                   <metadata> dictionary requirements are listed below.
+
+    The following keys are expected for the _DEFAULTS <metadata> dict:
+        datatype:  [required] A python type class. This limits the type of data that can be
+                   provided in the .ini file and ensures that the value is returned in the
+                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
+                   <class 'str'>, <class 'bool'>.
+        default:   [required] The default value for this option.
+        info:      [required] A string describing what this option does.
+        choices:   [optional] If this option's datatype is of <class 'str'> then valid
+                   selections can be defined here. This validates the option and also enables
+                   a combobox / radio option in the GUI.
+        gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
+                   radio buttons rather than a combobox to display this option.
+        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
+                   otherwise it is ignored. Should be a tuple of min and max accepted values.
+                   This is used for controlling the GUI slider range. Values are not enforced.
+        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
+                   required otherwise it is ignored. Used for the GUI slider. For floats, this
+                   is the number of decimal places to display. For ints this is the step size.
+        fixed:     [optional] [train only]. Training configurations are fixed when the model is
+                   created, and then reloaded from the state file. Marking an item as fixed=False
+                   indicates that this value can be changed for existing models, and will override
+                   the value saved in the state file with the updated value in config. If not
+                   provided this will default to True.
+"""
+
+
+_HELPTEXT = "Dfaker Model (Adapted from https://github.com/dfaker/df)"
+
+
+_DEFAULTS = {
+    "coverage": {
+        "default": 100.0,
+        "info": "How much of the extracted image to train on. Generally the model is optimized"
+                "\nto the default value. Sensible values to use are:"
+                "\n\t62.5%% spans from eyebrow to eyebrow."
+                "\n\t75.0%% spans from temple to temple."
+                "\n\t87.5%% spans from ear to ear."
+                "\n\t100.0%% is a mugshot.",
+        "datatype": float,
+        "rounding": 1,
+        "min_max": (62.5, 100.0),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+}
diff --git a/plugins/train/model/dfl_h128.py b/plugins/train/model/dfl_h128.py
index 6d972c9..87c7e66 100644
--- a/plugins/train/model/dfl_h128.py
+++ b/plugins/train/model/dfl_h128.py
@@ -15,6 +15,7 @@ class Model(OriginalModel):
         logger.debug("Initializing %s: (args: %s, kwargs: %s",
                      self.__class__.__name__, args, kwargs)
 
+        self.configfile = kwargs.get("configfile", None)
         kwargs["input_shape"] = (128, 128, 3)
         kwargs["encoder_dim"] = 256 if self.config["lowmem"] else 512
 
diff --git a/plugins/train/model/dfl_h128_defaults.py b/plugins/train/model/dfl_h128_defaults.py
new file mode 100755
index 0000000..cd0fa52
--- /dev/null
+++ b/plugins/train/model/dfl_h128_defaults.py
@@ -0,0 +1,74 @@
+#!/usr/bin/env python3
+"""
+    The default options for the faceswap Dfl_H128 Model plugin.
+
+    Defaults files should be named <plugin_name>_defaults.py
+    Any items placed into this file will automatically get added to the relevant config .ini files
+    within the faceswap/config folder.
+
+    The following variables should be defined:
+        _HELPTEXT: A string describing what this plugin does
+        _DEFAULTS: A dictionary containing the options, defaults and meta information. The
+                   dictionary should be defined as:
+                       {<option_name>: {<metadata>}}
+
+                   <option_name> should always be lower text.
+                   <metadata> dictionary requirements are listed below.
+
+    The following keys are expected for the _DEFAULTS <metadata> dict:
+        datatype:  [required] A python type class. This limits the type of data that can be
+                   provided in the .ini file and ensures that the value is returned in the
+                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
+                   <class 'str'>, <class 'bool'>.
+        default:   [required] The default value for this option.
+        info:      [required] A string describing what this option does.
+        choices:   [optional] If this option's datatype is of <class 'str'> then valid
+                   selections can be defined here. This validates the option and also enables
+                   a combobox / radio option in the GUI.
+        gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
+                   radio buttons rather than a combobox to display this option.
+        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
+                   otherwise it is ignored. Should be a tuple of min and max accepted values.
+                   This is used for controlling the GUI slider range. Values are not enforced.
+        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
+                   required otherwise it is ignored. Used for the GUI slider. For floats, this
+                   is the number of decimal places to display. For ints this is the step size.
+        fixed:     [optional] [train only]. Training configurations are fixed when the model is
+                   created, and then reloaded from the state file. Marking an item as fixed=False
+                   indicates that this value can be changed for existing models, and will override
+                   the value saved in the state file with the updated value in config. If not
+                   provided this will default to True.
+"""
+
+
+_HELPTEXT = "DFL H128 Model (Adapted from https://github.com/iperov/DeepFaceLab)"
+
+
+_DEFAULTS = {
+    "lowmem": {
+        "default": False,
+        "info": "Lower memory mode. Set to 'True' if having issues with VRAM useage.\n"
+                "NB: Models with a changed lowmem mode are not compatible with each other.",
+        "datatype": bool,
+        "rounding": None,
+        "min_max": None,
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "coverage": {
+        "default": 62.5,
+        "info": "How much of the extracted image to train on. Generally the model is optimized"
+                "\nto the default value. Sensible values to use are:"
+                "\n\t62.5%% spans from eyebrow to eyebrow."
+                "\n\t75.0%% spans from temple to temple."
+                "\n\t87.5%% spans from ear to ear."
+                "\n\t100.0%% is a mugshot.",
+        "datatype": float,
+        "rounding": 1,
+        "min_max": (62.5, 100.0),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+}
diff --git a/plugins/train/model/iae_defaults.py b/plugins/train/model/iae_defaults.py
new file mode 100755
index 0000000..50c16a1
--- /dev/null
+++ b/plugins/train/model/iae_defaults.py
@@ -0,0 +1,66 @@
+#!/usr/bin/env python3
+"""
+    The default options for the faceswap Iae Model plugin.
+
+    Defaults files should be named <plugin_name>_defaults.py
+    Any items placed into this file will automatically get added to the relevant config .ini files
+    within the faceswap/config folder.
+
+    The following variables should be defined:
+        _HELPTEXT: A string describing what this plugin does
+        _DEFAULTS: A dictionary containing the options, defaults and meta information. The
+                   dictionary should be defined as:
+                       {<option_name>: {<metadata>}}
+
+                   <option_name> should always be lower text.
+                   <metadata> dictionary requirements are listed below.
+
+    The following keys are expected for the _DEFAULTS <metadata> dict:
+        datatype:  [required] A python type class. This limits the type of data that can be
+                   provided in the .ini file and ensures that the value is returned in the
+                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
+                   <class 'str'>, <class 'bool'>.
+        default:   [required] The default value for this option.
+        info:      [required] A string describing what this option does.
+        choices:   [optional] If this option's datatype is of <class 'str'> then valid
+                   selections can be defined here. This validates the option and also enables
+                   a combobox / radio option in the GUI.
+        gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
+                   radio buttons rather than a combobox to display this option.
+        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
+                   otherwise it is ignored. Should be a tuple of min and max accepted values.
+                   This is used for controlling the GUI slider range. Values are not enforced.
+        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
+                   required otherwise it is ignored. Used for the GUI slider. For floats, this
+                   is the number of decimal places to display. For ints this is the step size.
+        fixed:     [optional] [train only]. Training configurations are fixed when the model is
+                   created, and then reloaded from the state file. Marking an item as fixed=False
+                   indicates that this value can be changed for existing models, and will override
+                   the value saved in the state file with the updated value in config. If not
+                   provided this will default to True.
+"""
+
+
+_HELPTEXT = (
+    "Intermediate Auto Encoder. Based on Original Model, uses intermediate layers to try to "
+    "better get details"
+)
+
+
+_DEFAULTS = {
+    "coverage": {
+        "default": 62.5,
+        "info": "How much of the extracted image to train on. Generally the model is optimized"
+                "\nto the default value. Sensible values to use are:"
+                "\n\t62.5%% spans from eyebrow to eyebrow."
+                "\n\t75.0%% spans from temple to temple."
+                "\n\t87.5%% spans from ear to ear."
+                "\n\t100.0%% is a mugshot.",
+        "datatype": float,
+        "rounding": 1,
+        "min_max": (62.5, 100.0),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+}
diff --git a/plugins/train/model/lightweight_defaults.py b/plugins/train/model/lightweight_defaults.py
new file mode 100755
index 0000000..04554f0
--- /dev/null
+++ b/plugins/train/model/lightweight_defaults.py
@@ -0,0 +1,67 @@
+#!/usr/bin/env python3
+"""
+    The default options for the faceswap Lightweight Model plugin.
+
+    Defaults files should be named <plugin_name>_defaults.py
+    Any items placed into this file will automatically get added to the relevant config .ini files
+    within the faceswap/config folder.
+
+    The following variables should be defined:
+        _HELPTEXT: A string describing what this plugin does
+        _DEFAULTS: A dictionary containing the options, defaults and meta information. The
+                   dictionary should be defined as:
+                       {<option_name>: {<metadata>}}
+
+                   <option_name> should always be lower text.
+                   <metadata> dictionary requirements are listed below.
+
+    The following keys are expected for the _DEFAULTS <metadata> dict:
+        datatype:  [required] A python type class. This limits the type of data that can be
+                   provided in the .ini file and ensures that the value is returned in the
+                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
+                   <class 'str'>, <class 'bool'>.
+        default:   [required] The default value for this option.
+        info:      [required] A string describing what this option does.
+        choices:   [optional] If this option's datatype is of <class 'str'> then valid
+                   selections can be defined here. This validates the option and also enables
+                   a combobox / radio option in the GUI.
+        gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
+                   radio buttons rather than a combobox to display this option.
+        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
+                   otherwise it is ignored. Should be a tuple of min and max accepted values.
+                   This is used for controlling the GUI slider range. Values are not enforced.
+        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
+                   required otherwise it is ignored. Used for the GUI slider. For floats, this
+                   is the number of decimal places to display. For ints this is the step size.
+        fixed:     [optional] [train only]. Training configurations are fixed when the model is
+                   created, and then reloaded from the state file. Marking an item as fixed=False
+                   indicates that this value can be changed for existing models, and will override
+                   the value saved in the state file with the updated value in config. If not
+                   provided this will default to True.
+"""
+
+
+_HELPTEXT = (
+    "A lightweight version of the Original Faceswap Model, designed to run on lower end GPUs "
+    "(~2GB).\nDon't expect great results, but it allows users with lower end cards to play with "
+    "the software.\n"
+)
+
+
+_DEFAULTS = {
+    "coverage": {
+        "default": 62.5,
+        "info": "How much of the extracted image to train on. Generally the model is optimized\n"
+                "to the default value. Sensible values to use are:"
+                "\n\t62.5%% spans from eyebrow to eyebrow."
+                "\n\t75.0%% spans from temple to temple."
+                "\n\t87.5%% spans from ear to ear."
+                "\n\t100.0%% is a mugshot.",
+        "datatype": float,
+        "rounding": 1,
+        "min_max": (62.5, 100.0),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+}
diff --git a/plugins/train/model/original.py b/plugins/train/model/original.py
index e065aa0..43de0e7 100644
--- a/plugins/train/model/original.py
+++ b/plugins/train/model/original.py
@@ -16,6 +16,7 @@ class Model(ModelBase):
         logger.debug("Initializing %s: (args: %s, kwargs: %s",
                      self.__class__.__name__, args, kwargs)
 
+        self.configfile = kwargs.get("configfile", None)
         if "input_shape" not in kwargs:
             kwargs["input_shape"] = (64, 64, 3)
         if "encoder_dim" not in kwargs:
diff --git a/plugins/train/model/original_defaults.py b/plugins/train/model/original_defaults.py
new file mode 100755
index 0000000..f15d211
--- /dev/null
+++ b/plugins/train/model/original_defaults.py
@@ -0,0 +1,74 @@
+#!/usr/bin/env python3
+"""
+    The default options for the faceswap Original Model plugin.
+
+    Defaults files should be named <plugin_name>_defaults.py
+    Any items placed into this file will automatically get added to the relevant config .ini files
+    within the faceswap/config folder.
+
+    The following variables should be defined:
+        _HELPTEXT: A string describing what this plugin does
+        _DEFAULTS: A dictionary containing the options, defaults and meta information. The
+                   dictionary should be defined as:
+                       {<option_name>: {<metadata>}}
+
+                   <option_name> should always be lower text.
+                   <metadata> dictionary requirements are listed below.
+
+    The following keys are expected for the _DEFAULTS <metadata> dict:
+        datatype:  [required] A python type class. This limits the type of data that can be
+                   provided in the .ini file and ensures that the value is returned in the
+                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
+                   <class 'str'>, <class 'bool'>.
+        default:   [required] The default value for this option.
+        info:      [required] A string describing what this option does.
+        choices:   [optional] If this option's datatype is of <class 'str'> then valid
+                   selections can be defined here. This validates the option and also enables
+                   a combobox / radio option in the GUI.
+        gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
+                   radio buttons rather than a combobox to display this option.
+        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
+                   otherwise it is ignored. Should be a tuple of min and max accepted values.
+                   This is used for controlling the GUI slider range. Values are not enforced.
+        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
+                   required otherwise it is ignored. Used for the GUI slider. For floats, this
+                   is the number of decimal places to display. For ints this is the step size.
+        fixed:     [optional] [train only]. Training configurations are fixed when the model is
+                   created, and then reloaded from the state file. Marking an item as fixed=False
+                   indicates that this value can be changed for existing models, and will override
+                   the value saved in the state file with the updated value in config. If not
+                   provided this will default to True.
+"""
+
+
+_HELPTEXT = "Original Faceswap Model."
+
+
+_DEFAULTS = {
+    "lowmem": {
+        "default": False,
+        "info": "Lower memory mode. Set to 'True' if having issues with VRAM useage.\n"
+                "NB: Models with a changed lowmem mode are not compatible with each other.",
+        "datatype": bool,
+        "rounding": None,
+        "min_max": None,
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "coverage": {
+        "default": 62.5,
+        "info": "How much of the extracted image to train on. Generally the model is optimized"
+                "\nto the default value. Sensible values to use are:"
+                "\n\t62.5%% spans from eyebrow to eyebrow."
+                "\n\t75.0%% spans from temple to temple."
+                "\n\t87.5%% spans from ear to ear."
+                "\n\t100.0%% is a mugshot.",
+        "datatype": float,
+        "rounding": 1,
+        "min_max": (62.5, 100.0),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+}
diff --git a/plugins/train/model/realface.py b/plugins/train/model/realface.py
index f499955..d6f208a 100644
--- a/plugins/train/model/realface.py
+++ b/plugins/train/model/realface.py
@@ -21,6 +21,7 @@ class Model(ModelBase):
         logger.debug("Initializing %s: (args: %s, kwargs: %s",
                      self.__class__.__name__, args, kwargs)
 
+        self.configfile = kwargs.get("configfile", None)
         self.check_input_output()
         self.dense_width, self.upscalers_no = self.get_dense_width_upscalers_numbers()
         kwargs["input_shape"] = (self.config["input_size"], self.config["input_size"], 3)
@@ -46,13 +47,13 @@ class Model(ModelBase):
 
     def check_input_output(self):
         """ Confirm valid input and output sized have been provided """
-        if not 64 <= self.config["input_size"] <=128 or self.config["input_size"] % 16 != 0:
+        if not 64 <= self.config["input_size"] <= 128 or self.config["input_size"] % 16 != 0:
             logger.error("Config error: input_size must be between 64 and 128 and be divisible by "
                          "16.")
             exit(1)
-        if not 64 <= self.config["output_size"] <=256 or self.config["output_size"] % 16 != 0:
-            logger.error("Config error: output_size must be between 64 and 256 and be divisible by "
-                         "16.")
+        if not 64 <= self.config["output_size"] <= 256 or self.config["output_size"] % 16 != 0:
+            logger.error("Config error: output_size must be between 64 and 256 and be divisible "
+                         "by 16.")
             exit(1)
         logger.debug("Input and output sizes are valid")
 
diff --git a/plugins/train/model/realface_defaults.py b/plugins/train/model/realface_defaults.py
new file mode 100755
index 0000000..0129dba
--- /dev/null
+++ b/plugins/train/model/realface_defaults.py
@@ -0,0 +1,136 @@
+#!/usr/bin/env python3
+"""
+    The default options for the faceswap Realface Model plugin.
+
+    Defaults files should be named <plugin_name>_defaults.py
+    Any items placed into this file will automatically get added to the relevant config .ini files
+    within the faceswap/config folder.
+
+    The following variables should be defined:
+        _HELPTEXT: A string describing what this plugin does
+        _DEFAULTS: A dictionary containing the options, defaults and meta information. The
+                   dictionary should be defined as:
+                       {<option_name>: {<metadata>}}
+
+                   <option_name> should always be lower text.
+                   <metadata> dictionary requirements are listed below.
+
+    The following keys are expected for the _DEFAULTS <metadata> dict:
+        datatype:  [required] A python type class. This limits the type of data that can be
+                   provided in the .ini file and ensures that the value is returned in the
+                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
+                   <class 'str'>, <class 'bool'>.
+        default:   [required] The default value for this option.
+        info:      [required] A string describing what this option does.
+        choices:   [optional] If this option's datatype is of <class 'str'> then valid
+                   selections can be defined here. This validates the option and also enables
+                   a combobox / radio option in the GUI.
+        gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
+                   radio buttons rather than a combobox to display this option.
+        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
+                   otherwise it is ignored. Should be a tuple of min and max accepted values.
+                   This is used for controlling the GUI slider range. Values are not enforced.
+        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
+                   required otherwise it is ignored. Used for the GUI slider. For floats, this
+                   is the number of decimal places to display. For ints this is the step size.
+        fixed:     [optional] [train only]. Training configurations are fixed when the model is
+                   created, and then reloaded from the state file. Marking an item as fixed=False
+                   indicates that this value can be changed for existing models, and will override
+                   the value saved in the state file with the updated value in config. If not
+                   provided this will default to True.
+"""
+
+
+_HELPTEXT = (
+    "An extra detailed variant of Original model.\n"
+    "Incorporates ideas from Bryanlyon and inspiration from the Villain model.\n"
+    "Requires about 6GB-8GB of VRAM (batchsize 8-16).\n"
+)
+
+
+_DEFAULTS = {
+    "coverage": {
+        "default": 62.5,
+        "info": "How much of the extracted image to train on. Generally the model is optimized"
+                "\nto the default value. Sensible values to use are:"
+                "\n\t62.5%% spans from eyebrow to eyebrow."
+                "\n\t75.0%% spans from temple to temple."
+                "\n\t87.5%% spans from ear to ear."
+                "\n\t100.0%% is a mugshot.",
+        "datatype": float,
+        "rounding": 1,
+        "min_max": (62.5, 100.0),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "input_size": {
+        "default": 64,
+        "info": "Resolution (in pixels) of the input image to train on.\n"
+                "BE AWARE Larger resolution will dramatically increase VRAM requirements.\n"
+                "Higher resolutions may increase prediction accuracy, but does not effect the "
+                "resulting output size.\nMust be between 64 and 128 and be divisible by 16.",
+        "datatype": int,
+        "rounding": 16,
+        "min_max": (64, 128),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "output_size": {
+        "default": 128,
+        "info": "Output image resolution (in pixels).\nBe aware that larger resolution will "
+                "increase VRAM requirements.\nNB: Must be between 64 and 256 and be divisible "
+                "by 16.",
+        "datatype": int,
+        "rounding": 16,
+        "min_max": (64, 256),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "dense_nodes": {
+        "default": 1536,
+        "info": "Number of nodes for decoder. Might affect your model's ability to learn in "
+                "general.\nNote that: Lower values will affect the ability to predict "
+                "details.",
+        "datatype": int,
+        "rounding": 64,
+        "min_max": (768, 2048),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "complexity_encoder": {
+        "default": 128,
+        "info": "Encoder Convolution Layer Complexity. sensible ranges: 128 to 150.",
+        "datatype": int,
+        "rounding": 4,
+        "min_max": (96, 160),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "complexity_decoder": {
+        "default": 512,
+        "info": "Decoder Complexity.",
+        "datatype": int,
+        "rounding": 4,
+        "min_max": (512, 544),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "learning_rate": {
+        "default": 5e-05,
+        "info": "Learning rate - how fast your network will learn.\n"
+                "Note that: Higher values might result in RSoD failure.\n"
+                "This option can be updated for existing models.",
+        "datatype": float,
+        "rounding": 6,
+        "min_max": (5e-06, 0.0001),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": False,
+    },
+}
diff --git a/plugins/train/model/unbalanced.py b/plugins/train/model/unbalanced.py
index 85ede86..25f9e51 100644
--- a/plugins/train/model/unbalanced.py
+++ b/plugins/train/model/unbalanced.py
@@ -16,6 +16,7 @@ class Model(OriginalModel):
         logger.debug("Initializing %s: (args: %s, kwargs: %s",
                      self.__class__.__name__, args, kwargs)
 
+        self.configfile = kwargs.get("configfile", None)
         self.lowmem = self.config.get("lowmem", False)
         kwargs["input_shape"] = (self.config["input_size"], self.config["input_size"], 3)
         kwargs["encoder_dim"] = 512 if self.lowmem else self.config["nodes"]
diff --git a/plugins/train/model/unbalanced_defaults.py b/plugins/train/model/unbalanced_defaults.py
new file mode 100755
index 0000000..3382747
--- /dev/null
+++ b/plugins/train/model/unbalanced_defaults.py
@@ -0,0 +1,144 @@
+#!/usr/bin/env python3
+"""
+    The default options for the faceswap Unbalanced Model plugin.
+
+    Defaults files should be named <plugin_name>_defaults.py
+    Any items placed into this file will automatically get added to the relevant config .ini files
+    within the faceswap/config folder.
+
+    The following variables should be defined:
+        _HELPTEXT: A string describing what this plugin does
+        _DEFAULTS: A dictionary containing the options, defaults and meta information. The
+                   dictionary should be defined as:
+                       {<option_name>: {<metadata>}}
+
+                   <option_name> should always be lower text.
+                   <metadata> dictionary requirements are listed below.
+
+    The following keys are expected for the _DEFAULTS <metadata> dict:
+        datatype:  [required] A python type class. This limits the type of data that can be
+                   provided in the .ini file and ensures that the value is returned in the
+                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
+                   <class 'str'>, <class 'bool'>.
+        default:   [required] The default value for this option.
+        info:      [required] A string describing what this option does.
+        choices:   [optional] If this option's datatype is of <class 'str'> then valid
+                   selections can be defined here. This validates the option and also enables
+                   a combobox / radio option in the GUI.
+        gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
+                   radio buttons rather than a combobox to display this option.
+        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
+                   otherwise it is ignored. Should be a tuple of min and max accepted values.
+                   This is used for controlling the GUI slider range. Values are not enforced.
+        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
+                   required otherwise it is ignored. Used for the GUI slider. For floats, this
+                   is the number of decimal places to display. For ints this is the step size.
+        fixed:     [optional] [train only]. Training configurations are fixed when the model is
+                   created, and then reloaded from the state file. Marking an item as fixed=False
+                   indicates that this value can be changed for existing models, and will override
+                   the value saved in the state file with the updated value in config. If not
+                   provided this will default to True.
+"""
+
+
+_HELPTEXT = (
+    "An unbalanced model with adjustable input size options.\n"
+    "This is an unbalanced model so b>a swaps may not work well\n"
+)
+
+
+_DEFAULTS = {
+    "lowmem": {
+        "default": False,
+        "info": "Lower memory mode. Set to 'True' if having issues with VRAM useage.\n"
+                "NB: Models with a changed lowmem mode are not compatible with each other.\n"
+                "NB: lowmem will override cutom nodes and complexity settings.",
+        "datatype": bool,
+        "rounding": None,
+        "min_max": None,
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "clipnorm": {
+        "default": True,
+        "info": "Controls gradient clipping of the optimizer. Can prevent model corruption at "
+                "the expense of VRAM.",
+        "datatype": bool,
+        "rounding": None,
+        "min_max": None,
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "nodes": {
+        "default": 1024,
+        "info": "Number of nodes for decoder. Don't change this unless you know what you are "
+                "doing!",
+        "datatype": int,
+        "rounding": 64,
+        "min_max": (512, 4096),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "complexity_encoder": {
+        "default": 128,
+        "info": "Encoder Convolution Layer Complexity. sensible ranges: 128 to 160.",
+        "datatype": int,
+        "rounding": 16,
+        "min_max": (64, 1024),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "complexity_decoder_a": {
+        "default": 384,
+        "info": "Decoder A Complexity.",
+        "datatype": int,
+        "rounding": 16,
+        "min_max": (64, 1024),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "complexity_decoder_b": {
+        "default": 512,
+        "info": "Decoder B Complexity.",
+        "datatype": int,
+        "rounding": 16,
+        "min_max": (64, 1024),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "input_size": {
+        "default": 128,
+        "info": "Resolution (in pixels) of the image to train on.\n"
+                "BE AWARE Larger resolution will dramatically increaseVRAM requirements.\n"
+                "Make sure your resolution is divisible by 64 (e.g. 64, 128, 256 etc.).\n"
+                "NB: Your faceset must be at least 1.6x larger than your required input "
+                "size.\n(e.g. 160 is the maximum input size for a 256x256 faceset).",
+        "datatype": int,
+        "rounding": 64,
+        "min_max": (64, 512),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "coverage": {
+        "default": 62.5,
+        "info": "How much of the extracted image to train on. Generally the model is optimized"
+                "\nto the default value. Sensible values to use are:"
+                "\n\t62.5%% spans from eyebrow to eyebrow."
+                "\n\t75.0%% spans from temple to temple."
+                "\n\t87.5%% spans from ear to ear."
+                "\n\t100.0%% is a mugshot.",
+        "datatype": float,
+        "rounding": 1,
+        "min_max": (62.5, 100.0),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+}
diff --git a/plugins/train/model/villain.py b/plugins/train/model/villain.py
index c4d18ac..fd873b9 100644
--- a/plugins/train/model/villain.py
+++ b/plugins/train/model/villain.py
@@ -17,6 +17,7 @@ class Model(OriginalModel):
         logger.debug("Initializing %s: (args: %s, kwargs: %s",
                      self.__class__.__name__, args, kwargs)
 
+        self.configfile = kwargs.get("configfile", None)
         kwargs["input_shape"] = (128, 128, 3)
         kwargs["encoder_dim"] = 512 if self.config["lowmem"] else 1024
         self.kernel_initializer = RandomNormal(0, 0.02)
diff --git a/plugins/train/model/villain_defaults.py b/plugins/train/model/villain_defaults.py
new file mode 100755
index 0000000..18dcba9
--- /dev/null
+++ b/plugins/train/model/villain_defaults.py
@@ -0,0 +1,77 @@
+#!/usr/bin/env python3
+"""
+    The default options for the faceswap Villain Model plugin.
+
+    Defaults files should be named <plugin_name>_defaults.py
+    Any items placed into this file will automatically get added to the relevant config .ini files
+    within the faceswap/config folder.
+
+    The following variables should be defined:
+        _HELPTEXT: A string describing what this plugin does
+        _DEFAULTS: A dictionary containing the options, defaults and meta information. The
+                   dictionary should be defined as:
+                       {<option_name>: {<metadata>}}
+
+                   <option_name> should always be lower text.
+                   <metadata> dictionary requirements are listed below.
+
+    The following keys are expected for the _DEFAULTS <metadata> dict:
+        datatype:  [required] A python type class. This limits the type of data that can be
+                   provided in the .ini file and ensures that the value is returned in the
+                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
+                   <class 'str'>, <class 'bool'>.
+        default:   [required] The default value for this option.
+        info:      [required] A string describing what this option does.
+        choices:   [optional] If this option's datatype is of <class 'str'> then valid
+                   selections can be defined here. This validates the option and also enables
+                   a combobox / radio option in the GUI.
+        gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
+                   radio buttons rather than a combobox to display this option.
+        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
+                   otherwise it is ignored. Should be a tuple of min and max accepted values.
+                   This is used for controlling the GUI slider range. Values are not enforced.
+        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
+                   required otherwise it is ignored. Used for the GUI slider. For floats, this
+                   is the number of decimal places to display. For ints this is the step size.
+        fixed:     [optional] [train only]. Training configurations are fixed when the model is
+                   created, and then reloaded from the state file. Marking an item as fixed=False
+                   indicates that this value can be changed for existing models, and will override
+                   the value saved in the state file with the updated value in config. If not
+                   provided this will default to True.
+"""
+
+
+_HELPTEXT = (
+    "A Higher resolution version of the Original Model by VillainGuy.\n"
+    "Extremely VRAM heavy. Full model requires 9GB+ for batchsize 16\n"
+)
+
+
+_DEFAULTS = {
+    "lowmem": {
+        "default": False,
+        "info": "Lower memory mode. Set to 'True' if having issues with VRAM useage.\n"
+                "NB: Models with a changed lowmem mode are not compatible with each other.",
+        "datatype": bool,
+        "rounding": None,
+        "min_max": None,
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+    "coverage": {
+        "default": 62.5,
+        "info": "How much of the extracted image to train on. Generally the model is optimized"
+                "\nto the default value. Sensible values to use are:"
+                "\n\t62.5%% spans from eyebrow to eyebrow."
+                "\n\t75.0%% spans from temple to temple."
+                "\n\t87.5%% spans from ear to ear."
+                "\n\t100.0%% is a mugshot.",
+        "datatype": float,
+        "rounding": 1,
+        "min_max": (62.5, 100.0),
+        "choices": [],
+        "gui_radio": False,
+        "fixed": True,
+    },
+}
diff --git a/scripts/convert.py b/scripts/convert.py
index 1827919..9dc7911 100644
--- a/scripts/convert.py
+++ b/scripts/convert.py
@@ -42,12 +42,15 @@ class Convert():
         self.add_queues()
         self.disk_io = DiskIO(self.alignments, self.images, arguments)
         self.predictor = Predict(self.disk_io.load_queue, self.queue_size, arguments)
+
+        configfile = self.args.configfile if hasattr(self.args, "configfile") else None
         self.converter = Converter(get_folder(self.args.output_dir),
                                    self.predictor.output_size,
                                    self.predictor.has_predicted_mask,
                                    self.disk_io.draw_transparent,
                                    self.disk_io.pre_encode,
-                                   arguments)
+                                   arguments,
+                                   configfile=configfile)
 
         logger.debug("Initialized %s", self.__class__.__name__)
 
@@ -193,7 +196,8 @@ class DiskIO():
             else:
                 args.append(self.args.reference_video)
         logger.debug("Writer args: %s", args)
-        return PluginLoader.get_converter("writer", self.args.writer)(*args)
+        configfile = self.args.configfile if hasattr(self.args, "configfile") else None
+        return PluginLoader.get_converter("writer", self.args.writer)(*args, configfile=configfile)
 
     def get_frame_ranges(self):
         """ split out the frame ranges and parse out 'min' and 'max' values """
diff --git a/scripts/extract.py b/scripts/extract.py
index 4ca7e32..9d7edbb 100644
--- a/scripts/extract.py
+++ b/scripts/extract.py
@@ -30,9 +30,11 @@ class Extract():
         self.images = Images(self.args)
         self.alignments = Alignments(self.args, True, self.images.is_video)
         self.post_process = PostProcess(arguments)
+        configfile = self.args.configfile if hasattr(self.args, "configfile") else None
         self.extractor = Extractor(self.args.detector,
                                    self.args.aligner,
                                    self.args.loglevel,
+                                   configfile,
                                    self.args.multiprocess,
                                    self.args.rotate_images,
                                    self.args.min_size)
diff --git a/scripts/train.py b/scripts/train.py
index 6ff1d61..50c0e42 100644
--- a/scripts/train.py
+++ b/scripts/train.py
@@ -152,9 +152,11 @@ class Train():
         """ Load the model requested for training """
         logger.debug("Loading Model")
         model_dir = get_folder(self.args.model_dir)
+        configfile = self.args.configfile if hasattr(self.args, "configfile") else None
         model = PluginLoader.get_model(self.trainer_name)(
             model_dir,
             self.args.gpus,
+            configfile=configfile,
             no_logs=self.args.no_logs,
             warp_to_landmarks=self.args.warp_to_landmarks,
             augment_color=self.args.augment_color,
diff --git a/tools/preview.py b/tools/preview.py
index b338650..d21f2b8 100644
--- a/tools/preview.py
+++ b/tools/preview.py
@@ -151,6 +151,9 @@ class Samples():
         self.alignments = Alignments(arguments,
                                      is_extract=False,
                                      input_is_video=self.images.is_video)
+        if not self.alignments.have_alignments_file:
+            logger.error("Alignments file not found at: '%s'", self.alignments.file)
+            exit(1)
         self.filelist = self.get_filelist()
         self.indices = self.get_indices()
 
@@ -259,11 +262,13 @@ class Patch():
         self.current_config = config_tools.config
         self.converter_arguments = None  # Updated converter arguments dict
 
+        configfile = arguments.configfile if hasattr(arguments, "configfile") else None
         self.converter = Converter(output_dir=None,
                                    output_size=self.samples.predictor.output_size,
                                    output_has_mask=self.samples.predictor.has_predicted_mask,
                                    draw_transparent=False,
                                    pre_encode=None,
+                                   configfile=configfile,
                                    arguments=self.generate_converter_arguments(arguments))
 
         self.shutdown = Event()
