commit a8e8f9157b38314bb12910fe13fa7f34739d9c2b
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Fri Apr 12 08:33:39 2019 +0000

    Alignments Tool: Allow merging of many alignments file
    
    Adds multi select functionality to GUI, meaning multiple alignments files can now be selected for merging.
    
    Extract: nFilter, Filter now have a file dialog in gui for selecting 1/multiple files

diff --git a/lib/cli.py b/lib/cli.py
index ec74616..93b2121 100644
--- a/lib/cli.py
+++ b/lib/cli.py
@@ -170,8 +170,11 @@ class Slider(argparse.Action):  # pylint: disable=too-few-public-methods
 class FullPaths(argparse.Action):  # pylint: disable=too-few-public-methods
     """ Expand user- and relative-paths """
     def __call__(self, parser, namespace, values, option_string=None):
-        setattr(namespace, self.dest, os.path.abspath(
-            os.path.expanduser(values)))
+        if isinstance(values, (list, tuple)):
+            vals = [os.path.abspath(os.path.expanduser(val)) for val in values]
+        else:
+            vals = os.path.abspath(os.path.expanduser(values))
+        setattr(namespace, self.dest, vals)
 
 
 class DirFullPaths(FullPaths):
@@ -188,9 +191,7 @@ class FileFullPaths(FullPaths):
     """
     # pylint: disable=too-few-public-methods
     def __init__(self, option_strings, dest, nargs=None, filetypes=None, **kwargs):
-        super(FileFullPaths, self).__init__(option_strings, dest, **kwargs)
-        if nargs is not None:
-            raise ValueError("nargs not allowed")
+        super().__init__(option_strings, dest, nargs, **kwargs)
         self.filetypes = filetypes
 
     def _get_kwargs(self):
@@ -207,6 +208,13 @@ class FileFullPaths(FullPaths):
         return [(name, getattr(self, name)) for name in names]
 
 
+class FilesFullPaths(FileFullPaths):  # pylint: disable=too-few-public-methods
+    """ Class that the gui uses to determine that the input can take multiple files as an input.
+        Inherits functionality from FileFullPaths
+        Has the effect of giving the user 2 Open Dialogue buttons in the gui """
+    pass
+
+
 class DirOrFileFullPaths(FileFullPaths):  # pylint: disable=too-few-public-methods
     """ Class that the gui uses to determine that the input can take a folder or a filename.
         Inherits functionality from FileFullPaths
@@ -402,7 +410,7 @@ class ExtractConvertArgs(FaceSwapArgs):
                                       "Defaults to 'output'"})
         argument_list.append({"opts": ("-al", "--alignments"),
                               "action": FileFullPaths,
-                              "filetypes": 'alignments',
+                              "filetypes": "alignments",
                               "type": str,
                               "dest": "alignments_path",
                               "help": "Optional path to an alignments file."})
@@ -416,7 +424,8 @@ class ExtractConvertArgs(FaceSwapArgs):
                               "help": "Threshold for positive face recognition. For use with "
                                       "nfilter or filter. Lower values are stricter."})
         argument_list.append({"opts": ("-n", "--nfilter"),
-                              "type": str,
+                              "action": FilesFullPaths,
+                              "filetypes": "image",
                               "dest": "nfilter",
                               "nargs": "+",
                               "default": None,
@@ -425,7 +434,8 @@ class ExtractConvertArgs(FaceSwapArgs):
                                       "portrait. Multiple images can be added "
                                       "space separated"})
         argument_list.append({"opts": ("-f", "--filter"),
-                              "type": str,
+                              "action": FilesFullPaths,
+                              "filetypes": "image",
                               "dest": "filter",
                               "nargs": "+",
                               "default": None,
diff --git a/lib/gui/command.py b/lib/gui/command.py
index 757099d..47306c9 100644
--- a/lib/gui/command.py
+++ b/lib/gui/command.py
@@ -297,7 +297,7 @@ class OptionControl():
 
             ctl = ttk.Radiobutton(radio_frame, text=choice.title(), value=choice, variable=var)
             ctl.pack(anchor=tk.W)
-            Tooltip(ctl, text=helptext, wraplength=720)
+            Tooltip(ctl, text=helptext, wraplength=920)
         logger.debug("Added radio group: '%s'", control_title)
 
     def checkbutton_to_checkframe(self, control, control_title, var, helptext):
@@ -334,8 +334,8 @@ class OptionControl():
         ctl["from_"] = min_max[0]
         ctl["to"] = min_max[1]
 
-        Tooltip(ctl, text=helptext, wraplength=720)
-        Tooltip(tbox, text=helptext, wraplength=720)
+        Tooltip(ctl, text=helptext, wraplength=920)
+        Tooltip(tbox, text=helptext, wraplength=920)
         logger.debug("Added slider control to Options Frame: %s", control)
 
     @staticmethod
@@ -387,6 +387,15 @@ class OptionControl():
             logger.debug(filename)
             filepath.set(filename)
 
+    @staticmethod
+    def ask_load_multi(filepath, filetypes):
+        """ Pop-up to get path to a file """
+        filenames = FileHandler("filename_multi", filetypes).retfile
+        if filenames:
+            final_names = " ".join("\"{}\"".format(fname) for fname in filenames)
+            logger.debug(final_names)
+            filepath.set(final_names)
+
     @staticmethod
     def ask_save(filepath, filetypes=None):
         """ Pop-up to get path to save a new file """
diff --git a/lib/gui/options.py b/lib/gui/options.py
index 8906bbc..8e8e71c 100644
--- a/lib/gui/options.py
+++ b/lib/gui/options.py
@@ -3,6 +3,7 @@
 import inspect
 from argparse import SUPPRESS
 import logging
+import re
 from tkinter import ttk
 
 from lib import cli
@@ -118,6 +119,7 @@ class CliOptions():
         if action in (cli.FullPaths,
                       cli.DirFullPaths,
                       cli.FileFullPaths,
+                      cli.FilesFullPaths,
                       cli.DirOrFileFullPaths,
                       cli.SaveFileFullPaths,
                       cli.ContextFullPaths):
@@ -142,6 +144,8 @@ class CliOptions():
         filetypes = "default" if not filetypes else filetypes
         if action == cli.FileFullPaths:
             sysbrowser = ["load"]
+        elif action == cli.FilesFullPaths:
+            sysbrowser = ["load_multi"]
         elif action == cli.SaveFileFullPaths:
             sysbrowser = ["save"]
         elif action == cli.DirOrFileFullPaths:
@@ -235,7 +239,10 @@ class CliOptions():
                 yield (opt, )
             else:
                 if option.get("nargs", None):
-                    optval = optval.split(" ")
+                    if "\"" in optval:
+                        optval = [arg[1:-1] for arg in re.findall(r"\".+?\"", optval)]
+                    else:
+                        optval = optval.split(" ")
                     opt = [opt] + optval
                 else:
                     opt = (opt, optval)
diff --git a/lib/gui/utils.py b/lib/gui/utils.py
index dd3a473..d0ea108 100644
--- a/lib/gui/utils.py
+++ b/lib/gui/utils.py
@@ -96,14 +96,14 @@ class FileHandler():
         filetypes = {"default": (all_files,),
                      "alignments": [("JSON", "*.json"),
                                     ("Pickle", "*.p"),
-                                    ("YAML", "*.yaml"),
+                                    ("YAML", "*.yaml" "*.yml"),  # pylint: disable=W1403
                                     all_files],
                      "config": [("Faceswap config files", "*.fsw"), all_files],
                      "csv": [("Comma separated values", "*.csv"), all_files],
                      "image": [("Bitmap", "*.bmp"),
-                               ("JPG", "*.jpeg", "*.jpg"),
+                               ("JPG", "*.jpeg" "*.jpg"),  # pylint: disable=W1403
                                ("PNG", "*.png"),
-                               ("TIFF", "*.tif", "*.tiff"),
+                               ("TIFF", "*.tif" "*.tiff"),  # pylint: disable=W1403
                                all_files],
                      "state": [("State files", "*.json"), all_files],
                      "log": [("Log files", "*.log"), all_files],
@@ -144,7 +144,7 @@ class FileHandler():
             self.set_context_handletype(command, action, variable)
 
         if self.handletype.lower() in (
-                "open", "save", "filename", "savefilename"):
+                "open", "save", "filename", "filename_multi", "savefilename"):
             kwargs["filetypes"] = self.filetypes[filetype]
             if self.defaults.get(filetype, None):
                 kwargs['defaultextension'] = self.defaults[filetype]
@@ -189,6 +189,11 @@ class FileHandler():
         logger.debug("Popping Filename browser")
         return filedialog.askopenfilename(**self.kwargs)
 
+    def filename_multi(self):
+        """ Get multiple existing file locations """
+        logger.debug("Popping Filename browser")
+        return filedialog.askopenfilenames(**self.kwargs)
+
     def savefilename(self):
         """ Get a save file location """
         logger.debug("Popping SaveFilename browser")
@@ -221,6 +226,8 @@ class Images():
             self.pathicons, "open_folder.png"))
         self.icons["load"] = ImageTk.PhotoImage(file=os.path.join(
             self.pathicons, "open_file.png"))
+        self.icons["load_multi"] = ImageTk.PhotoImage(file=os.path.join(
+            self.pathicons, "open_file.png"))
         self.icons["context"] = ImageTk.PhotoImage(file=os.path.join(
             self.pathicons, "open_file.png"))
         self.icons["save"] = ImageTk.PhotoImage(file=os.path.join(self.pathicons, "save.png"))
diff --git a/lib/gui/wrapper.py b/lib/gui/wrapper.py
index 3cf2b3a..4028959 100644
--- a/lib/gui/wrapper.py
+++ b/lib/gui/wrapper.py
@@ -97,7 +97,9 @@ class ProcessWrapper():
             args.append("-gui")  # Indicate to Faceswap that we are running the GUI
         if generate:
             # Delimit args with spaces
-            args = ['"{}"'.format(arg) if " " in arg else arg for arg in args]
+            args = ['"{}"'.format(arg) if " " in arg and not arg.startswith(("[", "("))
+                    and not arg.endswith(("]", ")")) else arg
+                    for arg in args]
         logger.debug("Built cli arguments: (%s)", args)
         return args
 
diff --git a/tools/alignments.py b/tools/alignments.py
index 2d5b65c..96ec6d7 100644
--- a/tools/alignments.py
+++ b/tools/alignments.py
@@ -1,26 +1,48 @@
 #!/usr/bin/env python3
 """ Tools for manipulating the alignments seralized file """
+import logging
 
 from lib.utils import set_system_verbosity
 from .lib_alignments import (AlignmentData, Check, Draw, # noqa pylint: disable=unused-import
                              Extract, Legacy, Manual, Merge, Reformat, Rename,
                              RemoveAlignments, Sort, Spatial, UpdateHashes)
 
+logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
+
 
 class Alignments():
     """ Perform tasks relating to alignments file """
     def __init__(self, arguments):
+        logger.debug("Initializing %s: (arguments: '%s'", self.__class__.__name__, arguments)
         self.args = arguments
         set_system_verbosity(self.args.loglevel)
+        self.alignments = self.load_alignments()
+        logger.debug("Initialized %s", self.__class__.__name__)
+
+    def load_alignments(self):
+        """ Loading alignments """
+        logger.debug("Loading alignments")
+        if len(self.args.alignments_file) > 1 and self.args.job != "merge":
+            logger.error("Multiple alignments files are only permitted for merging")
+            exit(0)
+        if len(self.args.alignments_file) == 1 and self.args.job == "merge":
+            logger.error("More than one alignments file required for merging")
+            exit(0)
 
         dest_format = self.get_dest_format()
-        self.alignments = AlignmentData(self.args.alignments_file, dest_format)
+        if len(self.args.alignments_file) == 1:
+            retval = AlignmentData(self.args.alignments_file[0], dest_format)
+        else:
+            retval = [AlignmentData(a_file, dest_format) for a_file in self.args.alignments_file]
+        logger.debug("Alignments: %s", retval)
+        return retval
 
     def get_dest_format(self):
         """ Set the destination format for Alignments """
         dest_format = None
         if hasattr(self.args, 'alignment_format') and self.args.alignment_format:
             dest_format = self.args.alignment_format
+        logger.debug(dest_format)
         return dest_format
 
     def process(self):
@@ -39,4 +61,5 @@ class Alignments():
         else:
             job = globals()[self.args.job.title()]
         job = job(self.alignments, self.args)
+        logger.debug(job)
         job.process()
diff --git a/tools/cli.py b/tools/cli.py
index 5b03bb3..b82be50 100644
--- a/tools/cli.py
+++ b/tools/cli.py
@@ -1,8 +1,8 @@
 #!/usr/bin/env python3
 """ Command Line Arguments for tools """
 from lib.cli import FaceSwapArgs
-from lib.cli import (ContextFullPaths, DirFullPaths,
-                     FileFullPaths, SaveFileFullPaths, Radio, Slider)
+from lib.cli import (ContextFullPaths, DirFullPaths, FileFullPaths, FilesFullPaths,
+                     SaveFileFullPaths, Radio, Slider)
 from lib.utils import _image_extensions
 
 
@@ -40,9 +40,8 @@ class AlignmentsArgs(FaceSwapArgs):
                     "\n\tfor excluding low-res images from a training set." +
                     frames_and_faces_dir + align_eyes +
                     "\n'manual': Manually view and edit landmarks." + frames_dir + align_eyes +
-                    "\n'merge': Merge multiple alignment files into one. Specify the main"
-                    "\n\talignments file with the -a flag and the file to be merged with the"
-                    "\n\t-a2 flag."
+                    "\n'merge': Merge multiple alignment files into one. Specify a space "
+                    "\n\tseparated list of alignments files with the -a flag."
                     "\n'missing-alignments': Identify frames that do not exist in the alignments"
                     "\n\tfile." + output_opts + frames_dir +
                     "\n'missing-frames': Identify frames in the alignments file that do no "
@@ -83,20 +82,14 @@ class AlignmentsArgs(FaceSwapArgs):
                     "\n\tnamed '<frame_name>_face index' (i.e. how they are named after running"
                     "\n\textract)." + faces_dir})
         argument_list.append({"opts": ("-a", "--alignments_file"),
-                              "action": FileFullPaths,
+                              "action": FilesFullPaths,
                               "dest": "alignments_file",
+                              "nargs": "+",
                               "required": True,
                               "filetypes": "alignments",
-                              "help": "Full path to the alignments "
-                                      "file to be processed."})
-        argument_list.append({"opts": ("-a2", "--alignments_file2"),
-                              "action": FileFullPaths,
-                              "dest": "alignments_file2",
-                              "required": False,
-                              "filetypes": "alignments",
-                              "help": "Full path to the alignments file to "
-                                      "be merged into the main alignments "
-                                      "file (merge only)"})
+                              "help": "Full path to the alignments file to be processed. If "
+                                      "merging alignments, then multiple files can be selected, "
+                                      "space separated"})
         argument_list.append({"opts": ("-fc", "-faces_folder"),
                               "action": DirFullPaths,
                               "dest": "faces_dir",
diff --git a/tools/lib_alignments/jobs.py b/tools/lib_alignments/jobs.py
index 02b748d..20248c2 100644
--- a/tools/lib_alignments/jobs.py
+++ b/tools/lib_alignments/jobs.py
@@ -12,7 +12,7 @@ from scipy import signal
 from sklearn import decomposition
 from tqdm import tqdm
 
-from . import AlignmentData, Annotate, ExtractedFaces, Faces, Frames
+from . import Annotate, ExtractedFaces, Faces, Frames
 
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
 
@@ -449,36 +449,38 @@ class Legacy():
 class Merge():
     """ Merge two alignments files into one """
     def __init__(self, alignments, arguments):
-        self.alignments = alignments
-        self.alignments2 = AlignmentData(arguments.alignments_file2, "json")
+        self.final_alignments = alignments[0]
+        self.process_alignments = alignments[1:]
 
     def process(self):
         """Process the alignments file merge """
         logger.info("[MERGE ALIGNMENTS]")  # Tidy up cli output
         skip_count = 0
         merge_count = 0
-        for _, src_alignments, _, frame in tqdm(self.alignments2.yield_faces(),
-                                                desc="Merging Alignments",
-                                                total=self.alignments2.frames_count):
-            for idx, alignment in enumerate(src_alignments):
-                if not alignment.get("hash", None):
-                    logger.warning("Alignment '%s':%s has no Hash! Skipping", frame, idx)
-                    skip_count += 1
-                    continue
-                if self.check_exists(frame, alignment, idx):
-                    skip_count += 1
-                    continue
-                self.merge_alignment(frame, alignment, idx)
-                merge_count += 1
+        total_count = sum([alignments.frames_count for alignments in self.process_alignments])
+        with tqdm(desc="Merging Alignments", total=total_count) as pbar:
+            for alignments in self.process_alignments:
+                for _, src_alignments, _, frame in alignments.yield_faces():
+                    for idx, alignment in enumerate(src_alignments):
+                        if not alignment.get("hash", None):
+                            logger.warning("Alignment '%s':%s has no Hash! Skipping", frame, idx)
+                            skip_count += 1
+                            continue
+                        if self.check_exists(frame, alignment, idx):
+                            skip_count += 1
+                            continue
+                        self.merge_alignment(frame, alignment, idx)
+                        merge_count += 1
+                    pbar.update(1)
         logger.info("Alignments Merged: %s", merge_count)
         logger.info("Alignments Skipped: %s", skip_count)
         if merge_count != 0:
             self.set_destination_filename()
-            self.alignments.save()
+            self.final_alignments.save()
 
     def check_exists(self, frame, alignment, idx):
         """ Check whether this face already exists """
-        existing_frame = self.alignments.hashes_to_frame.get(alignment["hash"], None)
+        existing_frame = self.final_alignments.hashes_to_frame.get(alignment["hash"], None)
         if not existing_frame:
             return False
         if frame in existing_frame.keys():
@@ -493,14 +495,16 @@ class Merge():
         """ Merge the source alignment into the destination """
         logger.debug("Merging alignment: (frame: %s, src_idx: %s, hash: %s)",
                      frame, idx, alignment["hash"])
-        self.alignments.data.setdefault(frame, list()).append(alignment)
+        self.final_alignments.data.setdefault(frame, list()).append(alignment)
 
     def set_destination_filename(self):
         """ Set the destination filename """
-        orig, ext = os.path.splitext(self.alignments.file)
-        filename = "{}_merged{}".format(orig, ext)
+        folder = os.path.split(self.final_alignments.file)[0]
+        ext = os.path.splitext(self.final_alignments.file)[1]
+        now = datetime.now().strftime("%Y%m%d_%H%M%S")
+        filename = os.path.join(folder, "alignments_merged_{}{}".format(now, ext))
         logger.debug("Output set to: '%s'", filename)
-        self.alignments.file = filename
+        self.final_alignments.file = filename
 
 
 class Reformat():
