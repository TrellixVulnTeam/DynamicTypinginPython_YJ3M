commit dacbcf38785a3ff0914084aa04ff080edc9d1972
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Thu Dec 6 12:22:19 2018 +0000

    Log GUI to seperate file

diff --git a/lib/cli.py b/lib/cli.py
index e8aee26..2382bf7 100644
--- a/lib/cli.py
+++ b/lib/cli.py
@@ -54,7 +54,7 @@ class ScriptExecutor():
 
         try:
             # pylint: disable=unused-variable
-            import tkinter  # noqa
+            import tkinter  # noqa pylint: disable=unused-import
         except ImportError:
             logger.warning(
                 "It looks like TkInter isn't installed for your OS, so "
@@ -82,7 +82,7 @@ class ScriptExecutor():
 
     def execute_script(self, arguments):
         """ Run the script for called command """
-        log_setup(arguments.loglevel)
+        log_setup(arguments.loglevel, self.command)
         logger.debug("Executing: %s. PID: %s", self.command, os.getpid())
         try:
             script = self.import_script()
@@ -113,7 +113,7 @@ class FullPaths(argparse.Action):
 
 class DirFullPaths(FullPaths):
     """ Class that gui uses to determine if you need to open a directory """
-    # pylint: disable=too-few-public-methods
+    # pylint: disable=too-few-public-methods,unnecessary-pass
     pass
 
 
@@ -153,7 +153,7 @@ class SaveFileFullPaths(FileFullPaths):
 
     see lib/gui/utils.py FileHandler for current GUI filetypes
     """
-    # pylint: disable=too-few-public-methods
+    # pylint: disable=too-few-public-methods,unnecessary-pass
     pass
 
 
diff --git a/lib/gui/display_analysis.py b/lib/gui/display_analysis.py
index f3c4d34..75aff1f 100644
--- a/lib/gui/display_analysis.py
+++ b/lib/gui/display_analysis.py
@@ -12,7 +12,7 @@ from .tooltip import Tooltip
 from .utils import Images, FileHandler
 
 
-class Analysis(DisplayPage):
+class Analysis(DisplayPage):  # pylint: disable=too-many-ancestors
     """ Session analysis tab """
     def __init__(self, parent, tabname, helptext, scaling_factor):
         DisplayPage.__init__(self, parent, tabname, helptext)
@@ -107,7 +107,7 @@ class Analysis(DisplayPage):
                 csvout.writerow(row)
 
 
-class Options(object):
+class Options():
     """ Options bar of Analysis tab """
     def __init__(self, parent):
         self.optsframe = parent.optsframe
@@ -143,7 +143,7 @@ class Options(object):
         return hlp
 
 
-class StatsData(ttk.Frame):
+class StatsData(ttk.Frame):  # pylint: disable=too-many-ancestors
     """ Stats frame of analysis tab """
     def __init__(self,
                  parent,
@@ -287,7 +287,7 @@ class SessionPopUp(tk.Toplevel):
     def __init__(self, data, session_id):
         tk.Toplevel.__init__(self)
 
-        self.is_totals = True if session_id == "Total" else False
+        self.is_totals = session_id == "Total"
         self.data = self.set_session_data(data, session_id)
 
         self.graph = None
diff --git a/lib/gui/display_command.py b/lib/gui/display_command.py
index 79b9d46..9a424f4 100644
--- a/lib/gui/display_command.py
+++ b/lib/gui/display_command.py
@@ -56,7 +56,7 @@ class PreviewExtract(DisplayOptionalPage):
         print("Saved preview to {}".format(filename))
 
 
-class PreviewTrain(DisplayOptionalPage):
+class PreviewTrain(DisplayOptionalPage):  # pylint: disable=too-many-ancestors
     """ Training preview image(s) """
 
     def display_item_set(self):
@@ -99,7 +99,7 @@ class PreviewTrain(DisplayOptionalPage):
             preview.save_preview(location)
 
 
-class PreviewTrainCanvas(ttk.Frame):
+class PreviewTrainCanvas(ttk.Frame):  # pylint: disable=too-many-ancestors
     """ Canvas to hold a training preview image """
     def __init__(self, parent, previewname):
         ttk.Frame.__init__(self, parent)
@@ -141,7 +141,7 @@ class PreviewTrainCanvas(ttk.Frame):
         print("Saved preview to {}".format(filename))
 
 
-class GraphDisplay(DisplayOptionalPage):
+class GraphDisplay(DisplayOptionalPage):  # pylint: disable=too-many-ancestors
     """ The Graph Tab of the Display section """
 
     def display_item_set(self):
diff --git a/lib/gui/display_graph.py b/lib/gui/display_graph.py
index 728bae1..83665be 100755
--- a/lib/gui/display_graph.py
+++ b/lib/gui/display_graph.py
@@ -18,7 +18,7 @@ from .tooltip import Tooltip
 from .utils import Images
 
 
-class NavigationToolbar(NavigationToolbar2Tk):
+class NavigationToolbar(NavigationToolbar2Tk):  # pylint: disable=too-many-ancestors
     """ Same as default, but only including buttons we need
         with custom icons and layout
         From: https://stackoverflow.com/questions/12695678 """
@@ -73,7 +73,7 @@ class NavigationToolbar(NavigationToolbar2Tk):
         self.pack(side=tk.BOTTOM, fill=tk.X)
 
 
-class GraphBase(ttk.Frame):
+class GraphBase(ttk.Frame):  # pylint: disable=too-many-ancestors
     """ Base class for matplotlib line graphs """
     def __init__(self, parent, data, ylabel):
         ttk.Frame.__init__(self, parent)
@@ -235,7 +235,7 @@ class GraphBase(ttk.Frame):
         self.toolbar.update()
 
 
-class TrainingGraph(GraphBase):
+class TrainingGraph(GraphBase):  # pylint: disable=too-many-ancestors
     """ Live graph to be displayed during training. """
 
     def __init__(self, parent, data, ylabel):
@@ -299,7 +299,7 @@ class TrainingGraph(GraphBase):
 
     def resize_fig(self):
         """ Resize the figure back to the canvas """
-        class Event(object):
+        class Event():
             """ Event class that needs to be passed to
                 plotcanvas.resize """
             pass
@@ -308,7 +308,7 @@ class TrainingGraph(GraphBase):
         self.plotcanvas.resize(Event)
 
 
-class SessionGraph(GraphBase):
+class SessionGraph(GraphBase):  # pylint: disable=too-many-ancestors
     """ Session Graph for session pop-up """
     def __init__(self, parent, data, ylabel, scale):
         GraphBase.__init__(self, parent, data, ylabel)
diff --git a/lib/gui/stats.py b/lib/gui/stats.py
index 468b0ad..781e9c4 100644
--- a/lib/gui/stats.py
+++ b/lib/gui/stats.py
@@ -1,6 +1,7 @@
 #!/usr/bin python3
 """ Stats functions for the GUI """
 
+import logging
 import time
 import os
 import warnings
@@ -11,6 +12,8 @@ import numpy as np
 
 from lib.Serializer import PickleSerializer
 
+logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
+
 
 def convert_time(timestamp):
     """ Convert time stamp to total hours, mins and second """
@@ -22,7 +25,7 @@ def convert_time(timestamp):
     return hrs, mins, secs
 
 
-class SavedSessions(object):
+class SavedSessions():
     """ Saved Training Session """
     def __init__(self, sessions_data):
         self.serializer = PickleSerializer
@@ -40,10 +43,10 @@ class SavedSessions(object):
         """ Save the session file  """
         with open(filename, self.serializer.woptions) as session:
             session.write(self.serializer.marshal(self.sessions))
-        print("Saved session stats to: {}".format(filename))
+        logger.info("Saved session stats to: %s", filename)
 
 
-class CurrentSession(object):
+class CurrentSession():
     """ The current training session """
     def __init__(self):
         self.stats = {"iterations": 0,
@@ -93,11 +96,11 @@ class CurrentSession(object):
     def save_session(self):
         """ Save the session file to the modeldir """
         if self.stats["iterations"] > 0:
-            print("Saving session stats...")
+            logger.info("Saving session stats...")
             self.historical.save_sessions(self.filename)
 
 
-class SessionsTotals(object):
+class SessionsTotals():
     """ The compiled totals of all saved sessions """
     def __init__(self, all_sessions):
         self.stats = {"split": [],
@@ -134,7 +137,7 @@ class SessionsTotals(object):
             self.stats["loss"][idx].extend(loss)
 
 
-class SessionsSummary(object):
+class SessionsSummary():
     """ Calculations for analysis summary stats """
 
     def __init__(self, raw_data):
@@ -211,7 +214,7 @@ class SessionsSummary(object):
         self.summary = raw_summaries
 
 
-class Calculations(object):
+class Calculations():
     """ Class to hold calculations against raw session data """
     def __init__(self,
                  session,
@@ -339,7 +342,7 @@ class Calculations(object):
         datapoints = len(data)
 
         if datapoints <= (self.args["avg_samples"] * 2):
-            print("Not enough data to compile rolling average")
+            logger.info("Not enough data to compile rolling average")
             return avgs
 
         for idx in range(0, datapoints):
diff --git a/lib/gui/utils.py b/lib/gui/utils.py
index 19e9c31..6f46500 100644
--- a/lib/gui/utils.py
+++ b/lib/gui/utils.py
@@ -288,7 +288,7 @@ class Images(metaclass=Singleton):
         self.previewtrain[name][1] = ImageTk.PhotoImage(displayimg)
 
 
-class ConsoleOut(ttk.Frame):
+class ConsoleOut(ttk.Frame):  # pylint: disable=too-many-ancestors
     """ The Console out section of the GUI """
 
     def __init__(self, parent, debug, tk_vars):
diff --git a/lib/logger.py b/lib/logger.py
index 6cd898b..48a6aad 100644
--- a/lib/logger.py
+++ b/lib/logger.py
@@ -14,78 +14,6 @@ from time import sleep
 from lib.queue_manager import queue_manager
 from lib.sysinfo import sysinfo
 
-# ### << START: ROTATING FILE HANDLER - WINDOWS PERMISSION FIX >> ###
-# This works around file locking issue on Windows specifically in the case of
-# long lived child processes.
-#
-# Python opens files with inheritable handle and without file sharing by
-# default. This causes the RotatingFileHandler file handle to be duplicated in
-# the subprocesses even if the log file is not used in it. Because of this
-# handle in the child process, when the RotatingFileHandler tries to os.rename()
-# the file in the parent process, it fails with:
-#     WindowsError: [Error 32] The process cannot access the file because
-#     it is being used by another process
-# Taken from: https://github.com/luci/client-py/blob/master/utils/logging_utils.py
-# # Copyright 2015 The LUCI Authors. All rights reserved.
-# Use of this source code is governed under the Apache License, Version 2.0
-
-
-if sys.platform == "win32":
-    import codecs
-    import ctypes
-    import msvcrt  # pylint: disable=F0401
-    import _subprocess  # noqa pylint: disable=F0401,W0611
-
-    FILE_ATTRIBUTE_NORMAL = 0x00000080
-    FILE_SHARE_READ = 1
-    FILE_SHARE_WRITE = 2
-    FILE_SHARE_DELETE = 4
-    GENERIC_READ = 0x80000000
-    GENERIC_WRITE = 0x40000000
-    OPEN_ALWAYS = 4
-
-    def shared_open(path):
-        """Opens a file with full sharing mode and without inheritance.
-
-        The file is open for both read and write.
-
-        See https://bugs.python.org/issue15244 for inspiration.
-        """
-        path = str(path)
-        handle = ctypes.windll.kernel32.CreateFileW(
-            path,
-            GENERIC_READ | GENERIC_WRITE,
-            FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE,
-            None,
-            OPEN_ALWAYS,
-            FILE_ATTRIBUTE_NORMAL,
-            None)
-        ctr_handle = msvcrt.open_osfhandle(
-            handle,
-            os.O_BINARY | os.O_NOINHERIT)  # pylint: disable=no-member
-        return os.fdopen(ctr_handle, "r+b")
-
-    class NoInheritRotatingFileHandler(RotatingFileHandler):
-        """ Overide Rotating FileHandler for Windows """
-        def _open(self):
-            """Opens the log file without handle inheritance but with file sharing.
-
-            Ignores self.mode.
-            """
-            winf = shared_open(self.baseFilename)
-            if self.encoding:
-                # Do the equivalent of
-                # codecs.open(self.baseFilename, self.mode, self.encoding)
-                info = codecs.lookup(self.encoding)
-                winf = codecs.StreamReaderWriter(
-                    winf, info.streamreader, info.streamwriter, "replace")
-                winf.encoding = self.encoding
-            return winf
-else:  # Not Windows.
-    NoInheritRotatingFileHandler = RotatingFileHandler
-# ### << END: ROTATING FILE HANDLER - WINDOWS PERMISSION FIX >> ###
-
-
 LOG_QUEUE = queue_manager._log_queue  # pylint: disable=protected-access
 
 
@@ -140,7 +68,7 @@ def set_root_logger(loglevel=logging.INFO, queue=LOG_QUEUE):
     rootlogger.setLevel(loglevel)
 
 
-def log_setup(loglevel):
+def log_setup(loglevel, command):
     """ initial log set up. """
     numeric_loglevel = get_loglevel(loglevel)
     root_loglevel = min(logging.DEBUG, numeric_loglevel)
@@ -148,7 +76,7 @@ def log_setup(loglevel):
     log_format = FaceswapFormatter("%(asctime)s %(processName)-15s %(threadName)-15s "
                                    "%(module)-15s %(funcName)-25s %(levelname)-8s %(message)s",
                                    datefmt="%m/%d/%Y %H:%M:%S")
-    f_handler = file_handler(numeric_loglevel, log_format)
+    f_handler = file_handler(numeric_loglevel, log_format, command)
     s_handler = stream_handler(numeric_loglevel)
     c_handler = crash_handler(log_format)
 
@@ -158,11 +86,13 @@ def log_setup(loglevel):
     logging.info("Log level set to: %s", loglevel.upper())
 
 
-def file_handler(loglevel, log_format):
+def file_handler(loglevel, log_format, command):
     """ Add a logging rotating file handler """
-    filename = os.path.join(os.path.dirname(os.path.realpath(sys.argv[0])), "faceswap.log")
+    filename = os.path.join(os.path.dirname(os.path.realpath(sys.argv[0])), "faceswap")
+    # Windows has issues sharing the log file with subprocesses, so log GUI seperately
+    filename += "_gui.log" if command == "gui" else ".log"
     should_rotate = os.path.isfile(filename)
-    log_file = NoInheritRotatingFileHandler(filename, backupCount=1)
+    log_file = RotatingFileHandler(filename, backupCount=1)
     if should_rotate:
         log_file.doRollover()
     log_file.setFormatter(log_format)
