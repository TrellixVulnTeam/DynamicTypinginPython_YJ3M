commit dea984efc1c720832d7c32513c806b4b67cc6560
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Wed Jan 16 00:18:01 2019 +0000

    Enable custom logfile location

diff --git a/lib/cli.py b/lib/cli.py
index 0d848c0..777c558 100644
--- a/lib/cli.py
+++ b/lib/cli.py
@@ -82,7 +82,7 @@ class ScriptExecutor():
 
     def execute_script(self, arguments):
         """ Run the script for called command """
-        log_setup(arguments.loglevel, self.command)
+        log_setup(arguments.loglevel, arguments.logfile, self.command)
         logger.debug("Executing: %s. PID: %s", self.command, os.getpid())
         try:
             script = self.import_script()
@@ -147,7 +147,7 @@ class FileFullPaths(FullPaths):
         return [(name, getattr(self, name)) for name in names]
 
 
-class DirOrFileFullPaths(FileFullPaths):
+class DirOrFileFullPaths(FileFullPaths):  # pylint: disable=too-few-public-methods
     """ Class that the gui uses to determine that the input can take a folder or a filename.
         Inherits functionality from FileFullPaths
         Has the effect of giving the user 2 Open Dialogue buttons in the gui """
@@ -271,10 +271,17 @@ class FaceSwapArgs():
                             "dest": "loglevel",
                             "default": "INFO",
                             "choices": ("INFO", "VERBOSE", "DEBUG", "TRACE"),
-                            "help": "Log level. Stick with INFO or VERBOSE "
-                                    "unless you need to file an error report. Be "
-                                    "careful with TRACE as it will generate a lot "
-                                    "of data"})
+                            "help": "Log level. Stick with INFO or VERBOSE unless you need to "
+                                    "file an error report. Be careful with TRACE as it will "
+                                    "generate a lot of data"})
+        global_args.append({"opts": ("-LF", "--logfile"),
+                            "action": FileFullPaths,
+                            "filetypes": 'log',
+                            "type": str,
+                            "dest": "logfile",
+                            "help": "Path to store the logfile. Leave blank to store in the "
+                                    "faceswap folder",
+                            "default": None})
         return global_args
 
     @staticmethod
diff --git a/lib/gui/utils.py b/lib/gui/utils.py
index 3b30ac7..cca114a 100644
--- a/lib/gui/utils.py
+++ b/lib/gui/utils.py
@@ -45,17 +45,15 @@ class FileHandler():
                                          ("Pickle", "*.p"),
                                          ("YAML", "*.yaml"),
                                          all_files),
-                          "config": (("Faceswap config files", "*.fsw"),
-                                     all_files),
-                          "csv": (("Comma separated values", "*.csv"),
-                                  all_files),
+                          "config": (("Faceswap config files", "*.fsw"), all_files),
+                          "csv": (("Comma separated values", "*.csv"), all_files),
                           "image": (("Bitmap", "*.bmp"),
                                     ("JPG", "*.jpeg", "*.jpg"),
                                     ("PNG", "*.png"),
                                     ("TIFF", "*.tif", "*.tiff"),
                                     all_files),
-                          "session": (("Faceswap session files", "*.fss"),
-                                      all_files),
+                          "log": (("Log files", "*.log"), all_files),
+                          "session": (("Faceswap session files", "*.fss"), all_files),
                           "video": (("Audio Video Interleave", "*.avi"),
                                     ("Flash Video", "*.flv"),
                                     ("Matroska", "*.mkv"),
@@ -331,7 +329,7 @@ class Images(metaclass=Singleton):
         self.previewtrain[name][1] = ImageTk.PhotoImage(displayimg)
 
 
-class ContextMenu(tk.Menu):
+class ContextMenu(tk.Menu):  # pylint: disable=too-many-ancestors
     """ Pop up menu """
     def __init__(self, widget):
         logger.debug("Initializing %s: (widget_class: '%s')",
diff --git a/lib/logger.py b/lib/logger.py
index 48a6aad..fc0b1f4 100644
--- a/lib/logger.py
+++ b/lib/logger.py
@@ -68,7 +68,7 @@ def set_root_logger(loglevel=logging.INFO, queue=LOG_QUEUE):
     rootlogger.setLevel(loglevel)
 
 
-def log_setup(loglevel, command):
+def log_setup(loglevel, logfile, command):
     """ initial log set up. """
     numeric_loglevel = get_loglevel(loglevel)
     root_loglevel = min(logging.DEBUG, numeric_loglevel)
@@ -76,7 +76,7 @@ def log_setup(loglevel, command):
     log_format = FaceswapFormatter("%(asctime)s %(processName)-15s %(threadName)-15s "
                                    "%(module)-15s %(funcName)-25s %(levelname)-8s %(message)s",
                                    datefmt="%m/%d/%Y %H:%M:%S")
-    f_handler = file_handler(numeric_loglevel, log_format, command)
+    f_handler = file_handler(numeric_loglevel, logfile, log_format, command)
     s_handler = stream_handler(numeric_loglevel)
     c_handler = crash_handler(log_format)
 
@@ -86,11 +86,15 @@ def log_setup(loglevel, command):
     logging.info("Log level set to: %s", loglevel.upper())
 
 
-def file_handler(loglevel, log_format, command):
+def file_handler(loglevel, logfile, log_format, command):
     """ Add a logging rotating file handler """
-    filename = os.path.join(os.path.dirname(os.path.realpath(sys.argv[0])), "faceswap")
-    # Windows has issues sharing the log file with subprocesses, so log GUI seperately
-    filename += "_gui.log" if command == "gui" else ".log"
+    if logfile is not None:
+        filename = logfile
+    else:
+        filename = os.path.join(os.path.dirname(os.path.realpath(sys.argv[0])), "faceswap")
+        # Windows has issues sharing the log file with subprocesses, so log GUI seperately
+        filename += "_gui.log" if command == "gui" else ".log"
+
     should_rotate = os.path.isfile(filename)
     log_file = RotatingFileHandler(filename, backupCount=1)
     if should_rotate:
