commit ab4ef756710a16a318e5f57a1c3ffca8ea28913a
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Thu Apr 2 15:53:29 2020 +0100

    Extract - Allow multiple pipelines to be loaded

diff --git a/plugins/extract/_base.py b/plugins/extract/_base.py
index 5f1df4e..005c12e 100644
--- a/plugins/extract/_base.py
+++ b/plugins/extract/_base.py
@@ -65,7 +65,10 @@ class Extractor():
     ----------------
     configfile: str, optional
         Path to a custom configuration ``ini`` file. Default: Use system configfile
-
+    instance: int, optional
+        If this plugin is being executed multiple times (i.e. multiple pipelines have been
+        launched), the instance of the plugin must be passed in for naming convention reasons.
+        Default: 0
 
     The following attributes should be set in the plugin's :func:`__init__` method after
     initializing the parent.
@@ -98,11 +101,12 @@ class Extractor():
     plugins.extract.pipeline : The extract pipeline that configures and calls all plugins
 
     """
-    def __init__(self, git_model_id=None, model_filename=None, configfile=None):
-        logger.debug("Initializing %s: (git_model_id: %s, model_filename: %s, "
-                     " configfile: %s)", self.__class__.__name__, git_model_id,
-                     model_filename, configfile)
+    def __init__(self, git_model_id=None, model_filename=None, configfile=None, instance=0):
+        logger.debug("Initializing %s: (git_model_id: %s, model_filename: %s, instance: %s, "
+                     "configfile: %s, )", self.__class__.__name__, git_model_id, model_filename,
+                     instance, configfile)
 
+        self._instance = instance
         self.config = _get_config(".".join(self.__module__.split(".")[-2:]), configfile=configfile)
         """ dict: Config for this plugin, loaded from ``extract.ini`` configfile """
 
@@ -358,7 +362,7 @@ class Extractor():
         self._queues["out"] = out_queue
         for q_name in queues:
             self._queues[q_name] = queue_manager.get_queue(
-                name="{}_{}".format(self._plugin_type, q_name),
+                name="{}{}_{}".format(self._plugin_type, self._instance, q_name),
                 maxsize=self.queue_size)
 
     # <<< THREAD METHODS >>> #
diff --git a/plugins/extract/align/_base.py b/plugins/extract/align/_base.py
index a0aeb7f..e016418 100644
--- a/plugins/extract/align/_base.py
+++ b/plugins/extract/align/_base.py
@@ -50,12 +50,13 @@ class Aligner(Extractor):  # pylint:disable=abstract-method
     """
 
     def __init__(self, git_model_id=None, model_filename=None,
-                 configfile=None, normalize_method=None):
+                 configfile=None, instance=0, normalize_method=None):
         logger.debug("Initializing %s: (normalize_method: %s)", self.__class__.__name__,
                      normalize_method)
         super().__init__(git_model_id,
                          model_filename,
-                         configfile=configfile)
+                         configfile=configfile,
+                         instance=instance)
         self._normalize_method = None
         self.set_normalize_method(normalize_method)
 
diff --git a/plugins/extract/detect/_base.py b/plugins/extract/detect/_base.py
index 345903a..3cf7b3f 100644
--- a/plugins/extract/detect/_base.py
+++ b/plugins/extract/detect/_base.py
@@ -58,12 +58,13 @@ class Detector(Extractor):  # pylint:disable=abstract-method
     """
 
     def __init__(self, git_model_id=None, model_filename=None,
-                 configfile=None, rotation=None, min_size=0):
+                 configfile=None, instance=0, rotation=None, min_size=0):
         logger.debug("Initializing %s: (rotation: %s, min_size: %s)", self.__class__.__name__,
                      rotation, min_size)
         super().__init__(git_model_id,
                          model_filename,
-                         configfile=configfile)
+                         configfile=configfile,
+                         instance=instance)
         self.rotation = self._get_rotation_angles(rotation)
         self.min_size = min_size
 
diff --git a/plugins/extract/mask/_base.py b/plugins/extract/mask/_base.py
index 3dd3ece..9c4cfc9 100644
--- a/plugins/extract/mask/_base.py
+++ b/plugins/extract/mask/_base.py
@@ -50,11 +50,12 @@ class Masker(Extractor):  # pylint:disable=abstract-method
     """
 
     def __init__(self, git_model_id=None, model_filename=None, configfile=None,
-                 image_is_aligned=False):
+                 instance=0, image_is_aligned=False):
         logger.debug("Initializing %s: (configfile: %s, )", self.__class__.__name__, configfile)
         super().__init__(git_model_id,
                          model_filename,
-                         configfile=configfile)
+                         configfile=configfile,
+                         instance=instance)
         self.input_size = 256  # Override for model specific input_size
         self.coverage_ratio = 1.0  # Override for model specific coverage_ratio
 
diff --git a/plugins/extract/pipeline.py b/plugins/extract/pipeline.py
index 620fe1e..f9e2d2b 100644
--- a/plugins/extract/pipeline.py
+++ b/plugins/extract/pipeline.py
@@ -20,6 +20,14 @@ from lib.utils import get_backend
 from plugins.plugin_loader import PluginLoader
 
 logger = logging.getLogger(__name__)  # pylint:disable=invalid-name
+_INSTANCES = -1  # Tracking for multiple instances of pipeline
+
+
+def _get_instance():
+    """ Increment the global :attr:`_INSTANCES` and obtain the current instance value """
+    global _INSTANCES  # pylint:disable=global-statement
+    _INSTANCES += 1
+    return _INSTANCES
 
 
 class Extractor():
@@ -73,6 +81,7 @@ class Extractor():
                      "normalize_method: %s, image_is_aligned: %s)",
                      self.__class__.__name__, detector, aligner, masker, configfile,
                      multiprocess, rotate_images, min_size, normalize_method, image_is_aligned)
+        self._instance = _get_instance()
         masker = [masker] if not isinstance(masker, list) else masker
         self._flow = self._set_flow(detector, aligner, masker)
         # We only ever need 1 item in each queue. This is 2 items cached (1 in queue 1 waiting
@@ -102,7 +111,7 @@ class Extractor():
         For align/mask (2nd/3rd pass operations) the :attr:`ExtractMedia.detected_faces` should
         also be populated by calling :func:`ExtractMedia.set_detected_faces`.
         """
-        qname = "extract_{}_in".format(self._current_phase[0])
+        qname = "extract{}_{}_in".format(self._instance, self._current_phase[0])
         retval = self._queues[qname]
         logger.trace("%s: %s", qname, retval)
         return retval
@@ -302,9 +311,10 @@ class Extractor():
     def _output_queue(self):
         """ Return the correct output queue depending on the current phase """
         if self.final_pass:
-            qname = "extract_{}_out".format(self._final_phase)
+            qname = "extract{}_{}_out".format(self._instance, self._final_phase)
         else:
-            qname = "extract_{}_in".format(self._phases[self._phase_index + 1][0])
+            qname = "extract{}_{}_in".format(self._instance,
+                                             self._phases[self._phase_index + 1][0])
         retval = self._queues[qname]
         logger.trace("%s: %s", qname, retval)
         return retval
@@ -380,9 +390,8 @@ class Extractor():
     def _add_queues(self):
         """ Add the required processing queues to Queue Manager """
         queues = dict()
-        tasks = []
-        tasks = ["extract_{}_in".format(phase) for phase in self._flow]
-        tasks.append("extract_{}_out".format(self._final_phase))
+        tasks = ["extract{}_{}_in".format(self._instance, phase) for phase in self._flow]
+        tasks.append("extract{}_{}_out".format(self._instance, self._final_phase))
         for task in tasks:
             # Limit queue size to avoid stacking ram
             queue_manager.add_queue(task, maxsize=self._queue_size)
@@ -488,8 +497,7 @@ class Extractor():
         return phases
 
     # << INTERNAL PLUGIN HANDLING >> #
-    @staticmethod
-    def _load_align(aligner, configfile, normalize_method):
+    def _load_align(self, aligner, configfile, normalize_method):
         """ Set global arguments and load aligner plugin """
         if aligner is None or aligner.lower() == "none":
             logger.debug("No aligner selected. Returning None")
@@ -497,11 +505,11 @@ class Extractor():
         aligner_name = aligner.replace("-", "_").lower()
         logger.debug("Loading Aligner: '%s'", aligner_name)
         aligner = PluginLoader.get_aligner(aligner_name)(configfile=configfile,
-                                                         normalize_method=normalize_method)
+                                                         normalize_method=normalize_method,
+                                                         instance=self._instance)
         return aligner
 
-    @staticmethod
-    def _load_detect(detector, rotation, min_size, configfile):
+    def _load_detect(self, detector, rotation, min_size, configfile):
         """ Set global arguments and load detector plugin """
         if detector is None or detector.lower() == "none":
             logger.debug("No detector selected. Returning None")
@@ -510,11 +518,11 @@ class Extractor():
         logger.debug("Loading Detector: '%s'", detector_name)
         detector = PluginLoader.get_detector(detector_name)(rotation=rotation,
                                                             min_size=min_size,
-                                                            configfile=configfile)
+                                                            configfile=configfile,
+                                                            instance=self._instance)
         return detector
 
-    @staticmethod
-    def _load_mask(masker, image_is_aligned, configfile):
+    def _load_mask(self, masker, image_is_aligned, configfile):
         """ Set global arguments and load masker plugin """
         if masker is None or masker.lower() == "none":
             logger.debug("No masker selected. Returning None")
@@ -522,18 +530,19 @@ class Extractor():
         masker_name = masker.replace("-", "_").lower()
         logger.debug("Loading Masker: '%s'", masker_name)
         masker = PluginLoader.get_masker(masker_name)(image_is_aligned=image_is_aligned,
-                                                      configfile=configfile)
+                                                      configfile=configfile,
+                                                      instance=self._instance)
         return masker
 
     def _launch_plugin(self, phase):
         """ Launch an extraction plugin """
         logger.debug("Launching %s plugin", phase)
-        in_qname = "extract_{}_in".format(phase)
+        in_qname = "extract{}_{}_in".format(self._instance, phase)
         if phase == self._final_phase:
-            out_qname = "extract_{}_out".format(self._final_phase)
+            out_qname = "extract{}_{}_out".format(self._instance, self._final_phase)
         else:
             next_phase = self._flow[self._flow.index(phase) + 1]
-            out_qname = "extract_{}_in".format(next_phase)
+            out_qname = "extract{}_{}_in".format(self._instance, next_phase)
         logger.debug("in_qname: %s, out_qname: %s", in_qname, out_qname)
         kwargs = dict(in_queue=self._queues[in_qname], out_queue=self._queues[out_qname])
 
