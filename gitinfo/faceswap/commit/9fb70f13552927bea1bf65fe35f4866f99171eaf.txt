commit 9fb70f13552927bea1bf65fe35f4866f99171eaf
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Sat Mar 9 18:42:02 2019 +0000

    New model: Lightweight for 2GB gpus

diff --git a/plugins/train/_config.py b/plugins/train/_config.py
index f5be229..aea9ca7 100644
--- a/plugins/train/_config.py
+++ b/plugins/train/_config.py
@@ -92,6 +92,24 @@ class Config(FaceswapConfig):
             section=section, title="coverage", datatype=float, default=62.5, rounding=1,
             min_max=(62.5, 100.0), info=COVERAGE_INFO)
 
+        # << LIGHTWEIGHT MODEL OPTIONS >> #
+        section = "model.lightweight"
+        self.add_section(title=section,
+                         info="A lightweight version of the Original Faceswap Model, designed to "
+                              "run on lower end GPUs (~2GB).\nDon't expect great results, but it "
+                              "allows users with lower end cards to play with the "
+                              "software." + ADDITIONAL_INFO)
+        self.add_item(
+            section=section, title="dssim_loss", datatype=bool, default=False,
+            info="Use DSSIM for Loss rather than Mean Absolute Error\n"
+                 "May increase overall quality.")
+        self.add_item(
+            section=section, title="mask_type", datatype=str, default="none",
+            choices=MASK_TYPES, info=MASK_INFO)
+        self.add_item(
+            section=section, title="coverage", datatype=float, default=62.5, rounding=1,
+            min_max=(62.5, 100.0), info=COVERAGE_INFO)
+
         # << ORIGINAL MODEL OPTIONS >> #
         section = "model.original"
         self.add_section(title=section,
diff --git a/plugins/train/model/lightweight.py b/plugins/train/model/lightweight.py
new file mode 100644
index 0000000..d19511c
--- /dev/null
+++ b/plugins/train/model/lightweight.py
@@ -0,0 +1,53 @@
+#!/usr/bin/env python3
+""" Original Model
+    Based on the original https://www.reddit.com/r/deepfakes/
+    code sample + contribs """
+
+from keras.layers import Conv2D, Dense, Flatten, Input, Reshape
+from keras.models import Model as KerasModel
+
+from .original import logger, Model as OriginalModel
+
+
+class Model(OriginalModel):
+    """ Lightweight Model for ~2GB Graphics Cards """
+    def __init__(self, *args, **kwargs):
+        logger.debug("Initializing %s: (args: %s, kwargs: %s",
+                     self.__class__.__name__, args, kwargs)
+
+        kwargs["input_shape"] = (64, 64, 3)
+        kwargs["encoder_dim"] = 512
+        super().__init__(*args, **kwargs)
+        logger.debug("Initialized %s", self.__class__.__name__)
+
+    def encoder(self):
+        """ Encoder Network """
+        input_ = Input(shape=self.input_shape)
+        var_x = input_
+        var_x = self.blocks.conv(var_x, 128)
+        var_x = self.blocks.conv(var_x, 256)
+        var_x = self.blocks.conv(var_x, 512)
+        var_x = Dense(self.encoder_dim)(Flatten()(var_x))
+        var_x = Dense(4 * 4 * 512)(var_x)
+        var_x = Reshape((4, 4, 512))(var_x)
+        var_x = self.blocks.upscale(var_x, 256)
+        return KerasModel(input_, var_x)
+
+    def decoder(self):
+        """ Decoder Network """
+        input_ = Input(shape=(8, 8, 256))
+        var_x = input_
+        var_x = self.blocks.upscale(var_x, 512)
+        var_x = self.blocks.upscale(var_x, 256)
+        var_x = self.blocks.upscale(var_x, 128)
+        var_x = Conv2D(3, kernel_size=5, padding="same", activation="sigmoid")(var_x)
+        outputs = [var_x]
+
+        if self.config.get("mask_type", None):
+            var_y = input_
+            var_y = self.blocks.upscale(var_y, 512)
+            var_y = self.blocks.upscale(var_y, 256)
+            var_y = self.blocks.upscale(var_y, 128)
+            var_y = Conv2D(1, kernel_size=5, padding='same', activation='sigmoid')(var_y)
+            outputs.append(var_y)
+        return KerasModel(input_, outputs=outputs)
