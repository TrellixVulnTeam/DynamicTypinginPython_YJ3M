commit 0d1b146d767b703ceeda59efd85a89353187a51a
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Tue Dec 10 17:57:33 2019 +0000

    Generate default config files on launch
    Will also generate the config files just running `-h`

diff --git a/faceswap.py b/faceswap.py
index 13e4311..a426d6a 100755
--- a/faceswap.py
+++ b/faceswap.py
@@ -3,6 +3,7 @@
 import sys
 
 import lib.cli as cli
+from lib.config import generate_configs
 
 if sys.version_info[0] < 3:
     raise Exception("This program requires at least python3.6")
@@ -13,10 +14,11 @@ if sys.version_info[0] == 3 and sys.version_info[1] < 6:
 def bad_args(args):
     """ Print help on bad arguments """
     PARSER.print_help()
-    exit(0)
+    sys.exit(0)
 
 
 if __name__ == "__main__":
+    generate_configs()
     PARSER = cli.FullHelpArgumentParser()
     SUBPARSER = PARSER.add_subparsers()
     EXTRACT = cli.ExtractArgs(SUBPARSER,
diff --git a/lib/config.py b/lib/config.py
index c4e41f7..6f81c6f 100644
--- a/lib/config.py
+++ b/lib/config.py
@@ -8,6 +8,7 @@ import os
 import sys
 from collections import OrderedDict
 from configparser import ConfigParser
+from importlib import import_module
 
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
 
@@ -339,3 +340,22 @@ class FaceswapConfig():
         self.load_config()
         self.validate_config()
         logger.debug("Handled config")
+
+
+def generate_configs():
+    """ Generate config files if they don't exist.
+
+    This script is run prior to anything being set up, so don't use logging
+    Generates the default config files for plugins in the faceswap config folder
+    """
+
+    base_path = os.path.realpath(os.path.dirname(sys.argv[0]))
+    plugins_path = os.path.join(base_path, "plugins")
+    configs_path = os.path.join(base_path, "config")
+    for dirpath, _, filenames in os.walk(plugins_path):
+        if "_config.py" in filenames:
+            section = os.path.split(dirpath)[-1]
+            config_file = os.path.join(configs_path, "{}.ini".format(section))
+            if not os.path.exists(config_file):
+                mod = import_module("plugins.{}.{}".format(section, "_config"))
+                mod.Config(None)
