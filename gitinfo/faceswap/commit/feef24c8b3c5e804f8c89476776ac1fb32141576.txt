commit feef24c8b3c5e804f8c89476776ac1fb32141576
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Fri May 10 12:06:36 2019 +0000

    Use tqdm.write for StreamLogger. Reduce extract resize loglevel.

diff --git a/lib/logger.py b/lib/logger.py
index 0e64687..8d69422 100644
--- a/lib/logger.py
+++ b/lib/logger.py
@@ -10,6 +10,7 @@ import traceback
 
 from datetime import datetime
 from time import sleep
+from tqdm import tqdm
 
 from lib.queue_manager import queue_manager
 from lib.sysinfo import sysinfo
@@ -64,6 +65,13 @@ class RollingBuffer(collections.deque):
             self.append(line + "\n")
 
 
+class TqdmHandler(logging.StreamHandler):
+    """ Use TQDM Write for outputting to console """
+    def emit(self, record):
+        msg = self.format(record)
+        tqdm.write(msg)
+
+
 def set_root_logger(loglevel=logging.INFO, queue=LOG_QUEUE):
     """ Setup the root logger.
         Loaded in main process and into any spawned processes
@@ -117,7 +125,7 @@ def stream_handler(loglevel):
     log_format = FaceswapFormatter("%(asctime)s %(levelname)-8s %(message)s",
                                    datefmt="%m/%d/%Y %H:%M:%S")
 
-    log_console = logging.StreamHandler(sys.stdout)
+    log_console = TqdmHandler(sys.stdout)
     log_console.setFormatter(log_format)
     log_console.setLevel(loglevel)
     return log_console
@@ -158,11 +166,9 @@ def crash_log():
     return filename
 
 
-# Add a flag to logging.LogRecord to not strip formatting from particular records
-old_factory = logging.getLogRecordFactory()
-
-
+old_factory = logging.getLogRecordFactory()  # pylint: disable=invalid-name
 def faceswap_logrecord(*args, **kwargs):
+    """ Add a flag to logging.LogRecord to not strip formatting from particular records """
     record = old_factory(*args, **kwargs)
     record.strip_spaces = True
     return record
diff --git a/plugins/extract/detect/_base.py b/plugins/extract/detect/_base.py
index 820468a..d11a535 100755
--- a/plugins/extract/detect/_base.py
+++ b/plugins/extract/detect/_base.py
@@ -197,8 +197,8 @@ class Detector():
         dims = (int(width * scale), int(height * scale))
 
         if scale < 1.0:
-            logger.verbose("Resizing image from %sx%s to %s.",
-                           width, height, "x".join(str(i) for i in dims))
+            logger.trace("Resizing image from %sx%s to %s.",
+                         width, height, "x".join(str(i) for i in dims))
 
         image = cv2.resize(image, dims, interpolation=interpln)
         return image
