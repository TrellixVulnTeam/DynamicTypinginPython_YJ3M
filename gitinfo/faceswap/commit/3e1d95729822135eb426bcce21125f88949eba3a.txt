commit 3e1d95729822135eb426bcce21125f88949eba3a
Author: kvrooman <vrooman.kyle@gmail.com>
Date:   Wed Mar 28 10:30:17 2018 -0500

    Revert " Fix to an UnboundLocalError due to rename." -- Bind the variable in question, rather than replace it with another parameter (#320)
    
    * Switching naming of _bgr as discussed to reverse detector call
    
    Switching naming of _bgr as discussed to reverse detector call
    renaming iterator in loop for clarity
    
    * Revert "Adds support for arbitrary image rotations (#309)"
    
    This reverts commit 44dfd9d6b0cc1a9bcdf3269616a6aace56d1d0de.
    
    * Revert "FaceLandmarksExtractor comment (#317)"
    
    This reverts commit f79c48703b51ae15379829b52515179906a2dad2.
    
    * Revert "Fix to an UnboundLocalError due to rename. (#318)"
    
    This reverts commit 2e2dc846e3af7417ed8840bdd003832aa3737eee.
    
    * Correction to UnboundLocalError
    
    Tested that "sort -s face-cnn" works correctly after chagnes to FaceLandmarksExtractor.py

diff --git a/lib/FaceLandmarksExtractor/FaceLandmarksExtractor.py b/lib/FaceLandmarksExtractor/FaceLandmarksExtractor.py
index 363ca90..7487857 100644
--- a/lib/FaceLandmarksExtractor/FaceLandmarksExtractor.py
+++ b/lib/FaceLandmarksExtractor/FaceLandmarksExtractor.py
@@ -148,6 +148,7 @@ def extract(input_image_bgr, detector, verbose, all_faces=True, input_is_predete
     if input_is_predetected_face:
         input_scale = 1.0
         detected_faces = [ dlib.rectangle(0, 0, w, h) ]
+        input_image = input_image_bgr[:,:,::-1].copy()
     else:
         input_scale = scale_to / (w if w > h else h)
         input_image_bgr = cv2.resize (input_image_bgr, ( int(w*input_scale), int(h*input_scale) ), interpolation=cv2.INTER_LINEAR)
@@ -174,7 +175,7 @@ def extract(input_image_bgr, detector, verbose, all_faces=True, input_is_predete
             center[1] -= (bottom - top) * 0.12
             scale = (right - left + bottom - top) / 195.0
         
-            image = crop(input_image_bgr, center, scale).transpose ( (2,0,1) ).astype(np.float32) / 255.0
+            image = crop(input_image, center, scale).transpose ( (2,0,1) ).astype(np.float32) / 255.0
             image = np.expand_dims(image, 0)
             
             pts_img = get_pts_from_predict ( keras_model.predict (image)[-1][0], center, scale)
