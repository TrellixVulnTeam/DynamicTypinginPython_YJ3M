commit 79252f07ef33a21fa9f84cb6c2cba9d693d80652
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Tue Sep 25 17:08:09 2018 +0100

    Alignments tool: Extract non-upsized. MTCNN Detector changes (#508)
    
    * Manual alignments: Add progress bars to check task
    
    * Alignments Tool: Extract faces that haven't been upscaled
    
    * MTCNN Update. Center on landmarks

diff --git a/lib/face_alignment/detectors.py b/lib/face_alignment/detectors.py
index 0790cec..c0d4c95 100644
--- a/lib/face_alignment/detectors.py
+++ b/lib/face_alignment/detectors.py
@@ -181,40 +181,36 @@ class MTCNNDetector(Detector):
         """ Detect faces in rgb image """
         self.detected_faces = None
         detected_faces, points = detect_face(image, **self.kwargs)
-        detected_faces = self.tighten_bounding_box(detected_faces, points)
+        detected_faces = self.recalculate_bounding_box(detected_faces, points)
         self.detected_faces = [dlib.rectangle(int(face[0]), int(face[1]),
                                               int(face[2]), int(face[3]))
                                for face in detected_faces]
 
     @staticmethod
-    def tighten_bounding_box(faces, landmarks):
-        """ Tighten the bounding box for Face Alignment.
+    def recalculate_bounding_box(faces, landmarks):
+        """ Recalculate the bounding box for Face Alignment.
 
             Face Alignment was built to expect a DLIB bounding
-            box and sometimes can't calculate landmarks on edge
-            cases. Tightening up the bounding box along the
-            longest edge improves it's chances and helps remove
-            'jitter' """
+            box and calculates center and scale based on that.
+            Resize the bounding box around features to present
+            a better box to Face Alignment. Helps its chances
+            on edge cases and helps remove 'jitter' """
         retval = list()
-        if len(faces) == 0:
+        no_faces = len(faces)
+        if no_faces == 0:
             return retval
-        face_landmarks = np.hsplit(landmarks, len(faces))
-        for idx, face in enumerate(faces):
+        face_landmarks = np.hsplit(landmarks, no_faces)
+        for idx in range(no_faces):
             pts = np.vsplit(face_landmarks[idx], 2)
-            boundary = (np.amin(pts[0]), np.amin(pts[1]),
-                        np.amax(pts[0]), np.amax(pts[1]))
+            boundary = [np.amin(pts[0]), np.amin(pts[1]),
+                        np.amax(pts[0]), np.amax(pts[1])]
 
-            len_x, len_y = face[2] - face[0], face[3] - face[1]
-            raw = 1 if len_x > len_y else 0 if len_x < len_y else -1
-            bounding = list()
-
-            for i in range(4):
-                if i % 2 == raw:
-                    bounding.append(int(face[i]))
-                else:
-                    # Reduce bounding box by 75% around landmarks
-                    remove = (boundary[i] - face[i]) / 4
-                    bounding.append(int(boundary[i] - remove))
+            pad_x = (boundary[2] - boundary[0]) * 0.5
+            pad_y = (boundary[3] - boundary[1]) * 0.5
 
+            bounding = [boundary[0] - pad_x, boundary[1] - pad_y,
+                        boundary[2] + pad_x, boundary[3] + pad_y]
+            
             retval.append(bounding)
         return retval
+
diff --git a/tools/alignments.py b/tools/alignments.py
index f6878c1..7b9472c 100644
--- a/tools/alignments.py
+++ b/tools/alignments.py
@@ -34,7 +34,9 @@ class Alignments():
 
     def process(self):
         """ Main processing function of the Align tool """
-        if self.args.job.startswith("remove-"):
+        if self.args.job.startswith("extract"):
+            job = Extract
+        elif self.args.job.startswith("remove-"):
             job = RemoveAlignments
         elif self.args.job.startswith("sort-"):
             job = Sort
diff --git a/tools/cli.py b/tools/cli.py
index 69944ed..068d0b4 100644
--- a/tools/cli.py
+++ b/tools/cli.py
@@ -22,7 +22,7 @@ class AlignmentsArgs(FaceSwapArgs):
         argument_list.append({
             "opts": ("-j", "--job"),
             "type": str,
-            "choices": ("draw", "extract", "manual",
+            "choices": ("draw", "extract", "extract-large", "manual",
                         "missing-alignments", "missing-frames",
                         "leftover-faces", "multi-faces", "no-faces",
                         "reformat", "remove-faces", "remove-frames",
@@ -39,6 +39,9 @@ class AlignmentsArgs(FaceSwapArgs):
                     "\n\tbased on alignment data. This is a"
                     "\n\tlot quicker than re-detecting faces." +
                     frames_and_faces_dir + align_eyes +
+                    "\n'extract-large' - Extract all faces that have not been"
+                    "\n\tupscaled. Useful for excluding low-res images from a"
+                    "\n\ttraining set" + frames_and_faces_dir + align_eyes +
                     "\n'manual': Manually view and edit landmarks." +
                     frames_dir + align_eyes +
                     "\n'missing-alignments': Identify frames that do not"
diff --git a/tools/lib_alignments/jobs.py b/tools/lib_alignments/jobs.py
index ef9c7ae..b73f8ae 100644
--- a/tools/lib_alignments/jobs.py
+++ b/tools/lib_alignments/jobs.py
@@ -72,7 +72,7 @@ class Check():
     def get_no_faces(self):
         """ yield each frame that has no face match in alignments file """
         self.output_message = "Frames with no faces"
-        for frame in self.items:
+        for frame in tqdm(self.items, total=len(self.items)):
             frame_name = frame["frame_fullname"]
             if not self.alignments.frame_has_faces(frame_name):
                 yield frame_name
@@ -89,7 +89,7 @@ class Check():
             frame_key = "frame_fullname"
             retval_key = "frame_fullname"
 
-        for item in self.items:
+        for item in tqdm(self.items, total=len(self.items)):
             frame = item[frame_key]
             if self.type == "faces":
                 frame = self.alignments.get_full_frame_name(frame)
@@ -102,7 +102,7 @@ class Check():
         """ yield each frame that does not exist in alignments file """
         self.output_message = "Frames missing from alignments file"
         exclude_filetypes = ["yaml", "yml", "p", "json", "txt"]
-        for frame in self.items:
+        for frame in tqdm(self.items, total=len(self.items)):
             frame_name = frame["frame_fullname"]
             if (frame["frame_extension"] not in exclude_filetypes
                     and not self.alignments.frame_in_alignments(frame_name)):
@@ -113,14 +113,15 @@ class Check():
             not have a matching file """
         self.output_message = "Missing frames that are in alignments file"
         frames = [item["frame_fullname"] for item in self.items]
-        for frame in self.alignments.alignments.keys():
+        for frame in tqdm(self.alignments.alignments.keys(),
+                          total=len(self.alignments.count)):
             if frame not in frames:
                 yield frame
 
     def get_leftover_faces(self):
         """yield each face that isn't in the alignments file."""
         self.output_message = "Faces missing from the alignments file"
-        for face in self.items:
+        for face in tqdm(self.items, total=len(self.items)):
             frame = self.alignments.get_full_frame_name(face["frame_name"])
             alignment_faces = self.alignments.count_alignments_in_frame(frame)
 
@@ -252,11 +253,12 @@ class Draw():
 
 
 class Extract():
-    """ Re-extract faces from source frames based on
+    """ Re-extract faces from source frames based on 
         Alignment data """
     def __init__(self, alignments, arguments):
         self.verbose = arguments.verbose
         self.alignments = alignments
+        self.type = arguments.job.replace("extract-", "")
         self.faces_dir = arguments.faces_dir
         self.frames = Frames(arguments.frames_dir, self.verbose)
         self.extracted_faces = ExtractedFaces(self.frames,
@@ -307,13 +309,25 @@ class Extract():
         face_count = 0
         frame_fullname = frame["frame_fullname"]
         frame_name = frame["frame_name"]
-        faces = self.extracted_faces.get_faces_for_frame(frame_fullname)
+        faces = self.select_valid_faces(frame_fullname)
+
         for idx, face in enumerate(faces):
             output = "{}_{}{}".format(frame_name, str(idx), ".png")
             self.frames.save_image(self.faces_dir, output, face)
             face_count += 1
         return face_count
 
+    def select_valid_faces(self, frame):
+        """ Return valid faces for extraction """
+        faces = self.extracted_faces.get_faces_for_frame(frame)
+        if self.type != "large":
+            return faces
+        valid_faces = list()
+        sizes = self.extracted_faces.get_roi_size_for_frame(frame)
+        for idx, size in enumerate(sizes):
+            if size >= self.extracted_faces.size:
+                valid_faces.append(faces[idx])
+        return valid_faces
 
 class Reformat():
     """ Reformat Alignment file """
diff --git a/tools/lib_alignments/media.py b/tools/lib_alignments/media.py
index e463b0c..7ddd76f 100644
--- a/tools/lib_alignments/media.py
+++ b/tools/lib_alignments/media.py
@@ -444,6 +444,25 @@ class ExtractedFaces():
             self.get_faces(frame)
         return [self.original_roi(matrix) for matrix in self.matrices]
 
+    def get_roi_size_for_frame(self, frame):
+        """ Return the size of the original extract box for
+            the selected frame """
+        if self.current_frame != frame:
+            self.get_faces(frame)
+        sizes = list()
+        for matrix in self.matrices:
+            original_roi = self.original_roi(matrix)[0].squeeze()
+            top_left, top_right  = original_roi[0], original_roi[3]
+            len_x = top_right[0] - top_left[0]
+            len_y = top_right[1] - top_left[1]
+            if top_left[1] == top_right[1]:
+                length = len_y
+            else:
+                length = int(((len_x ** 2) + (len_y ** 2)) ** 0.5)
+            sizes.append(length)
+        return sizes
+
+
     def get_aligned_landmarks_for_frame(self, frame, landmarks_xy,
                                         update=False):
         """ Return the original rois for the selected frame """
