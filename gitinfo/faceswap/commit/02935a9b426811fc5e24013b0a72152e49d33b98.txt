commit 02935a9b426811fc5e24013b0a72152e49d33b98
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Mon Nov 19 13:18:06 2018 +0000

    multiprocessing race condition bugfix

diff --git a/plugins/extract/detect/_base.py b/plugins/extract/detect/_base.py
index 7114319..bcc6c6b 100644
--- a/plugins/extract/detect/_base.py
+++ b/plugins/extract/detect/_base.py
@@ -13,10 +13,11 @@
 
 import os
 
+from copy import copy
+
 import cv2
 import dlib
 
-from lib.faces_detect import DetectedFace
 from lib.gpu_stats import GPUStats
 from lib.utils import rotate_image_by_angle, rotate_landmarks
 
@@ -30,6 +31,9 @@ class Detector():
         self.parent_is_pool = False
         self.init = None
 
+        # Detected_Face Object. Passed in from initialization to avoid race condition
+        self.obj_detected_face = None
+
         # The input and output queues for the plugin.
         # See lib.multithreading.QueueManager for getting queues
         self.queues = {"in": None, "out": None}
@@ -71,6 +75,7 @@ class Detector():
         self.init = init
         self.queues["in"] = kwargs["in_queue"]
         self.queues["out"] = kwargs["out_queue"]
+        self.obj_detected_face = kwargs["detected_face"]
 
     def detect_faces(self, *args, **kwargs):
         """ Detect faces in rgb image
@@ -92,8 +97,7 @@ class Detector():
         output["detected_faces"] = detected_faces
         self.queues["out"].put(output)
 
-    @staticmethod
-    def to_detected_face(image, dlib_rects):
+    def to_detected_face(self, image, dlib_rects):
         """ Convert list of dlib rectangles to a
             list of DetectedFace objects
             and add the cropped face """
@@ -104,11 +108,11 @@ class Detector():
                     dlib.rectangle):  # pylint: disable=c-extension-no-member
                 retval.append(list())
                 continue
-            detected_face = DetectedFace()
-            detected_face.from_dlib_rect(d_rect)
-            detected_face.image_to_face(image)
-            detected_face.frame_dims = image.shape[:2]
-            retval.append(detected_face)
+            this_face = copy(self.obj_detected_face)
+            this_face.from_dlib_rect(d_rect)
+            this_face.image_to_face(image)
+            this_face.frame_dims = image.shape[:2]
+            retval.append(this_face)
         return retval
 
     # <<< DETECTION IMAGE COMPILATION METHODS >>> #
diff --git a/scripts/extract.py b/scripts/extract.py
index a1bb0ed..c57e788 100644
--- a/scripts/extract.py
+++ b/scripts/extract.py
@@ -8,6 +8,7 @@ from pathlib import Path
 import cv2
 from tqdm import tqdm
 
+from lib.faces_detect import DetectedFace
 from lib.gpu_stats import GPUStats
 from lib.multithreading import MultiThread, PoolProcess, SpawnProcess
 from lib.queue_manager import queue_manager, QueueEmpty
@@ -320,7 +321,9 @@ class Plugins():
         """ Launch the face detector """
         out_queue = queue_manager.get_queue("detect")
         kwargs = {"in_queue": queue_manager.get_queue("load"),
-                  "out_queue": out_queue}
+                  "out_queue": out_queue,
+                  "detected_face": DetectedFace()}  # Passed in to avoid race condition
+
         if self.args.detector == "mtcnn":
             mtcnn_kwargs = self.detector.validate_kwargs(
                 self.get_mtcnn_kwargs())
