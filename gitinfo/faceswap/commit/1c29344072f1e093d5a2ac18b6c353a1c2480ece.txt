commit 1c29344072f1e093d5a2ac18b6c353a1c2480ece
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Fri Aug 9 12:17:25 2019 +0100

    Bugfix: Fix extract/convert hanging when ffmpeg fails to get frame count

diff --git a/lib/utils.py b/lib/utils.py
index 008eee2..7be4e5e 100644
--- a/lib/utils.py
+++ b/lib/utils.py
@@ -3,15 +3,17 @@
 
 import logging
 import os
+import subprocess
 import sys
 import urllib
 import warnings
 import zipfile
-from socket import timeout as socket_timeout, error as socket_error
-
 from hashlib import sha1
 from pathlib import Path
 from re import finditer
+from socket import timeout as socket_timeout, error as socket_error
+
+import imageio_ffmpeg as im_ffm
 from tqdm import tqdm
 
 import numpy as np
@@ -140,6 +142,93 @@ def hash_encode_image(image, extension):
     return f_hash, img
 
 
+def convert_to_secs(*args):
+    """ converts a time to second. Either convert_to_secs(min, secs) or
+        convert_to_secs(hours, mins, secs). """
+    logger = logging.getLogger(__name__)  # pylint:disable=invalid-name
+    logger.debug("from time: %s", args)
+    retval = 0.0
+    if len(args) == 1:
+        retval = float(args[0])
+    elif len(args) == 2:
+        retval = 60 * float(args[0]) + float(args[1])
+    elif len(args) == 3:
+        retval = 3600 * float(args[0]) + 60 * float(args[1]) + float(args[2])
+    logger.debug("to secs: %s", retval)
+    return retval
+
+
+def count_frames_and_secs(path, timeout=15):
+    """
+    Adapted From ffmpeg_imageio, to handle occasional hanging issue:
+    https://github.com/imageio/imageio-ffmpeg
+
+    Get the number of frames and number of seconds for the given video
+    file. Note that this operation can be quite slow for large files.
+
+    Disclaimer: I've seen this produce different results from actually reading
+    the frames with older versions of ffmpeg (2.x). Therefore I cannot say
+    with 100% certainty that the returned values are always exact.
+    """
+    # https://stackoverflow.com/questions/2017843/fetch-frame-count-with-ffmpeg
+
+    logger = logging.getLogger(__name__)  # pylint:disable=invalid-name
+    assert isinstance(path, str), "Video path must be a string"
+    exe = im_ffm.get_ffmpeg_exe()
+    iswin = sys.platform.startswith("win")
+    logger.debug("iswin: '%s'", iswin)
+    cmd = [exe, "-i", path, "-map", "0:v:0", "-c", "copy", "-f", "null", "-"]
+    logger.debug("FFMPEG Command: '%s'", " ".join(cmd))
+    attempts = 3
+    for attempt in range(attempts):
+        try:
+            logger.debug("attempt: %s of %s", attempt + 1, attempts)
+            proc = subprocess.Popen(cmd,
+                                    stdout=subprocess.PIPE,
+                                    stderr=subprocess.STDOUT,
+                                    shell=iswin)
+            out, _ = proc.communicate(timeout=timeout)
+            logger.debug("Succesfully communicated with FFMPEG")
+            break
+        except subprocess.CalledProcessError as err:
+            out = err.output.decode(errors="ignore")
+            raise RuntimeError("FFMEG call failed with {}:\n{}".format(err.returncode, out))
+        except subprocess.TimeoutExpired as err:
+            proc.kill()
+            this_attempt = attempt + 1
+            if this_attempt == attempts:
+                msg = ("FFMPEG hung while attempting to obtain the frame count. "
+                       "Sometimes this issue resolves itself, so you can try running again. "
+                       "Otherwise use the Effmpeg Tool to extract the frames from your video into "
+                       "a folder, and then run the requested Faceswap process on that folder.")
+                raise FaceswapError(msg) from err
+            logger.warning("FFMPEG hung while attempting to obtain the frame count. "
+                           "Retrying %s of %s", this_attempt + 1, attempts)
+            continue
+
+    # Note that other than with the subprocess calls below, ffmpeg wont hang here.
+    # Worst case Python will stop/crash and ffmpeg will continue running until done.
+
+    nframes = nsecs = None
+    for line in out.splitlines():
+        if not line.startswith(b"frame="):
+            continue
+        line = line.decode(errors="ignore")
+        logger.debug("frame line: '%s'", line)
+        idx = line.find("frame=")
+        if idx >= 0:
+            splitframes = line[idx:].split("=", 1)[-1].lstrip().split(" ", 1)[0].strip()
+            nframes = int(splitframes)
+        idx = line.find("time=")
+        if idx >= 0:
+            splittime = line[idx:].split("=", 1)[-1].lstrip().split(" ", 1)[0].strip()
+            nsecs = convert_to_secs(*splittime.split(":"))
+        logger.debug("nframes: %s, nsecs: %s", nframes, nsecs)
+        return nframes, nsecs
+
+    raise RuntimeError("Could not get number of frames")  # pragma: no cover
+
+
 def backup_file(directory, filename):
     """ Backup a given file by appending .bk to the end """
     logger = logging.getLogger(__name__)  # pylint:disable=invalid-name
diff --git a/scripts/fsmedia.py b/scripts/fsmedia.py
index 0037c8a..c48d9a3 100644
--- a/scripts/fsmedia.py
+++ b/scripts/fsmedia.py
@@ -11,14 +11,13 @@ from pathlib import Path
 
 import cv2
 import imageio
-import imageio_ffmpeg as im_ffm
 import numpy as np
 
 from lib.aligner import Extract as AlignerExtract
 from lib.alignments import Alignments as AlignmentsBase
 from lib.face_filter import FaceFilter as FilterFunc
-from lib.utils import (camel_case_split, cv2_read_img, get_folder, get_image_paths,
-                       set_system_verbosity, _video_extensions)
+from lib.utils import (camel_case_split, count_frames_and_secs, cv2_read_img, get_folder,
+                       get_image_paths, set_system_verbosity, _video_extensions)
 
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
 
@@ -146,7 +145,7 @@ class Images():
     def images_found(self):
         """ Number of images or frames """
         if self.is_video:
-            retval = int(im_ffm.count_frames_and_secs(self.args.input_dir)[0])
+            retval = int(count_frames_and_secs(self.args.input_dir)[0])
         else:
             retval = len(self.input_images)
         return retval
diff --git a/tools/lib_alignments/media.py b/tools/lib_alignments/media.py
index 5d5e953..1bb0096 100644
--- a/tools/lib_alignments/media.py
+++ b/tools/lib_alignments/media.py
@@ -9,12 +9,11 @@ from tqdm import tqdm
 import cv2
 # TODO imageio single frame seek seems slow. Look into this
 # import imageio
-import imageio_ffmpeg as im_ffm
 
 from lib.alignments import Alignments
 from lib.faces_detect import DetectedFace
-from lib.utils import (_image_extensions, _video_extensions, cv2_read_img, hash_image_file,
-                       hash_encode_image)
+from lib.utils import (_image_extensions, _video_extensions, count_frames_and_secs, cv2_read_img,
+                       hash_image_file, hash_encode_image)
 
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
 
@@ -110,7 +109,7 @@ class MediaLoader():
     def count(self):
         """ Number of faces or frames """
         if self.is_video:
-            retval = int(im_ffm.count_frames_and_secs(self.folder)[0])
+            retval = int(count_frames_and_secs(self.folder)[0])
         else:
             retval = len(self.file_list_sorted)
         return retval
