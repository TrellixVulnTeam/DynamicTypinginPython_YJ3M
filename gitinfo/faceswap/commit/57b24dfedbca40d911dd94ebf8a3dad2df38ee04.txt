commit 57b24dfedbca40d911dd94ebf8a3dad2df38ee04
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Thu Nov 14 12:31:13 2019 +0000

    Bugfix: Extract - Fix serial processing

diff --git a/lib/faces_detect.py b/lib/faces_detect.py
index 6512482..85eb380 100644
--- a/lib/faces_detect.py
+++ b/lib/faces_detect.py
@@ -580,7 +580,7 @@ class Mask():
         """
         logger.trace("mask shape: %s, mask dtype: %s, mask min: %s, mask max: %s, "
                      "affine_matrix: %s, interpolator: %s)", mask.shape, mask.dtype, mask.min(),
-                     mask.max(), interpolator)
+                     affine_matrix, mask.max(), interpolator)
         self._affine_matrix = self._adjust_affine_matrix(mask.shape[0], affine_matrix)
         self._interpolator = interpolator
         mask = (cv2.resize(mask,
diff --git a/lib/image.py b/lib/image.py
index 642a3a3..0b26f24 100644
--- a/lib/image.py
+++ b/lib/image.py
@@ -393,13 +393,15 @@ class ImageIO():
 
     def _set_thread(self):
         """ Set the load/save thread """
-        if self._thread is not None:
+        logger.debug("Setting thread")
+        if self._thread is not None and self._thread.is_alive():
+            logger.debug("Thread pre-exists and is alive: %s", self._thread)
             return
         self._thread = MultiThread(self._process,
                                    self._queue,
                                    name=self.__class__.__name__,
                                    thread_count=1)
-        logger.trace(self._thread)
+        logger.debug("Set thread: %s", self._thread)
         self._thread.start()
 
     def _process(self, queue):
@@ -578,7 +580,7 @@ class ImagesLoader(ImageIO):
         for retval in iterator():
             filename, image = retval[:2]
             if image is None or (not image.any() and image.ndim not in (2, 3)):
-                # All black frames will return not np.any() so check dims too
+                # All black frames will return not numpy.any() so check dims too
                 logger.warning("Unable to open image. Skipping: '%s'", filename)
                 continue
             logger.trace("Putting to queue: %s", [v.shape if isinstance(v, np.ndarray) else v
@@ -671,6 +673,7 @@ class ImagesLoader(ImageIO):
             initialized with :attr:`load_with_hash` set to ``True`` and the :attr:`location`
             is a folder of images.
         """
+        logger.debug("Initializing Load Generator")
         self._set_thread()
         while True:
             self._thread.check_and_raise_error()
@@ -684,6 +687,7 @@ class ImagesLoader(ImageIO):
             logger.trace("Yielding: %s", [v.shape if isinstance(v, np.ndarray) else v
                                           for v in retval])
             yield retval
+        logger.debug("Closing Load Generator")
         self._thread.join()
 
 
diff --git a/lib/multithreading.py b/lib/multithreading.py
index 3fe141a..58f72eb 100644
--- a/lib/multithreading.py
+++ b/lib/multithreading.py
@@ -83,6 +83,10 @@ class MultiThread():
         error = self.errors[0]
         raise error[1].with_traceback(error[2])
 
+    def is_alive(self):
+        """ Return true if any thread is alive else false """
+        return any(thread.is_alive() for thread in self._threads)
+
     def start(self):
         """ Start a thread with the given method and args """
         logger.debug("Starting thread(s): '%s'", self._name)
diff --git a/scripts/extract.py b/scripts/extract.py
index bce58c1..a348d12 100644
--- a/scripts/extract.py
+++ b/scripts/extract.py
@@ -222,6 +222,8 @@ class Extract():
                         self._alignments.save()
                 else:
                     del faces["image"]
+                    # cache detected faces for next run
+                    detected_faces[faces["filename"]] = faces
                 status_bar.update(1)
 
             if not is_final:
