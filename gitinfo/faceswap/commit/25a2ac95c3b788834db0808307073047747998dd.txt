commit 25a2ac95c3b788834db0808307073047747998dd
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Mon Oct 21 23:10:26 2019 +0000

    Add faster image hash reading mechanism
    
    Add batch hash reader to lib.images
    Utilize batch hash reader in tools.alignments

diff --git a/lib/image.py b/lib/image.py
index f822d2b..e346eca 100644
--- a/lib/image.py
+++ b/lib/image.py
@@ -140,6 +140,45 @@ def read_image_hash(filename):
     return image_hash
 
 
+def read_image_hash_batch(filenames):
+    """ Return the `sha` hash of a batch of images
+
+    Leverages multi-threading to load multiple images from disk at the same time
+    leading to vastly reduced image read times. Creates a generator to retrieve filenames
+    with their hashes as they are calculated.
+
+    Notes
+    -----
+    The order of returned values is non-deterministic so will most likely not be returned in the
+    same order as the filenames
+
+    Parameters
+    ----------
+    filenames: list
+        A list of ``str`` full paths to the images to be loaded.
+    show_progress: bool, optional
+        Display a progress bar. Default: False
+
+    Yields
+    -------
+    tuple: (`filename`, :func:`hashlib.hexdigest()` representation of the `sha1` hash of the image)
+    Example
+    -------
+    >>> image_filenames = ["/path/to/image_1.png", "/path/to/image_2.png", "/path/to/image_3.png"]
+    >>> for filename, hash in read_image_hash_batch(image_filenames):
+    >>>         <do something>
+    """
+    logger.trace("Requested batch: '%s'", filenames)
+    executor = futures.ThreadPoolExecutor()
+    with executor:
+        read_hashes = {executor.submit(read_image_hash, filename): filename
+                       for filename in filenames}
+        for future in futures.as_completed(read_hashes):
+            retval = (read_hashes[future], future.result())
+            logger.trace("Yielding: %s", retval)
+            yield retval
+
+
 def encode_image_with_hash(image, extension):
     """ Encode an image, and get the encoded image back with its `sha1` hash.
 
diff --git a/tools/lib_alignments/media.py b/tools/lib_alignments/media.py
index f9a3941..01b69d5 100644
--- a/tools/lib_alignments/media.py
+++ b/tools/lib_alignments/media.py
@@ -14,7 +14,8 @@ from tqdm import tqdm
 from lib.aligner import Extract as AlignerExtract
 from lib.alignments import Alignments
 from lib.faces_detect import DetectedFace
-from lib.image import count_frames_and_secs, encode_image_with_hash, read_image, read_image_hash
+from lib.image import (count_frames_and_secs, encode_image_with_hash, read_image,
+                       read_image_hash_batch)
 from lib.utils import _image_extensions, _video_extensions
 
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
@@ -171,15 +172,18 @@ class Faces(MediaLoader):
     def process_folder(self):
         """ Iterate through the faces dir pulling out various information """
         logger.info("Loading file list from %s", self.folder)
-        for face in tqdm(os.listdir(self.folder), desc="Reading Face Hashes"):
-            if not self.valid_extension(face):
-                continue
-            filename = os.path.splitext(face)[0]
-            file_extension = os.path.splitext(face)[1]
-            face_hash = read_image_hash(os.path.join(self.folder, face))
-            retval = {"face_fullname": face,
-                      "face_name": filename,
-                      "face_extension": file_extension,
+
+        filelist = [os.path.join(self.folder, face)
+                    for face in os.listdir(self.folder)
+                    if self.valid_extension(face)]
+        for fullpath, face_hash in tqdm(read_image_hash_batch(filelist),
+                                        total=len(filelist),
+                                        desc="Reading Face Hashes"):
+            filename = os.path.basename(fullpath)
+            face_name, extension = os.path.splitext(filename)
+            retval = {"face_fullname": filename,
+                      "face_name": face_name,
+                      "face_extension": extension,
                       "face_hash": face_hash}
             logger.trace(retval)
             yield retval
