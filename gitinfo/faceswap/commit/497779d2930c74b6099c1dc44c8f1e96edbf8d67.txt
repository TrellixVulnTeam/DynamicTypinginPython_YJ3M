commit 497779d2930c74b6099c1dc44c8f1e96edbf8d67
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Tue Dec 31 17:27:45 2019 +0000

    lib.gui
    Centralize get_scaling and set_geometry to utils.config
    Suppress Error when rebuilding GUI for TreeView

diff --git a/lib/gui/display_analysis.py b/lib/gui/display_analysis.py
index 8bd3da2..aa1e797 100644
--- a/lib/gui/display_analysis.py
+++ b/lib/gui/display_analysis.py
@@ -352,8 +352,12 @@ class StatsData(ttk.Frame):  # pylint: disable=too-many-ancestors
     def tree_clear(self):
         """ Clear the totals tree """
         logger.debug("Clearing treeview data")
-        self.tree.delete(* self.tree.get_children())
-        self.tree.configure(height=1)
+        try:
+            self.tree.delete(* self.tree.get_children())
+            self.tree.configure(height=1)
+        except tk.TclError:
+            # Catch non-existent tree view when rebuilding the GUI
+            pass
 
     def select_item(self, event):
         """ Update the session summary info with
diff --git a/lib/gui/utils.py b/lib/gui/utils.py
index abfacd7..e26d151 100644
--- a/lib/gui/utils.py
+++ b/lib/gui/utils.py
@@ -1044,6 +1044,35 @@ class Config():
         title += " - {}".format(text) if text is not None and text else ""
         self.root.title(title)
 
+    def set_geometry(self, width, height, fullscreen=False):
+        """ Set the geometry for the root tkinter object.
+
+        Parameters
+        ----------
+        width: int
+            The width to set the window to (prior to scaling)
+        height: int
+            The height to set the window to (prior to scaling)
+        fullscreen: bool, optional
+            Whether to set the window to full-screen mode. If ``True`` then :attr:`width` and
+            :attr:`height` are ignored. Default: ``False``
+        """
+        self.root.tk.call("tk", "scaling", self.scaling_factor)
+        if fullscreen:
+            initial_dimensions = (self.root.winfo_screenwidth(), self.root.winfo_screenheight())
+        else:
+            initial_dimensions = (round(width * self.scaling_factor),
+                                  round(height * self.scaling_factor))
+
+        if fullscreen and sys.platform == "win32":
+            self.root.state('zoomed')
+        elif fullscreen:
+            self.root.attributes('-zoomed', True)
+        else:
+            self.root.geometry("{}x{}+80+80".format(str(initial_dimensions[0]),
+                                                    str(initial_dimensions[1])))
+        logger.debug("Geometry: %sx%s", *initial_dimensions)
+
 
 class LongRunningTask(Thread):
     """ Runs long running tasks in a background thread to prevent the GUI from becoming
diff --git a/scripts/gui.py b/scripts/gui.py
index 1d39a2c..a390f11 100644
--- a/scripts/gui.py
+++ b/scripts/gui.py
@@ -24,7 +24,7 @@ class FaceswapGui(tk.Tk):
         self._config = self.initialize_globals()
         self.set_fonts()
         self.set_styles()
-        self.set_geometry()
+        self._config.set_geometry(1200, 640, self._config.user_config_dict["fullscreen"])
 
         self.wrapper = ProcessWrapper()
         self.objects = dict()
@@ -57,25 +57,6 @@ class FaceswapGui(tk.Tk):
         gui_style = ttk.Style()
         gui_style.configure('TLabelframe.Label', foreground="#0046D5", relief=tk.SOLID)
 
-    def set_geometry(self):
-        """ Set GUI geometry """
-        fullscreen = self._config.user_config_dict["fullscreen"]
-        scaling_factor = self._config.scaling_factor
-
-        if fullscreen:
-            initial_dimensions = (self.winfo_screenwidth(), self.winfo_screenheight())
-        else:
-            initial_dimensions = (round(1200 * scaling_factor), round(640 * scaling_factor))
-
-        if fullscreen and sys.platform == "win32":
-            self.state('zoomed')
-        elif fullscreen:
-            self.attributes('-zoomed', True)
-        else:
-            self.geometry("{}x{}+80+80".format(str(initial_dimensions[0]),
-                                               str(initial_dimensions[1])))
-        logger.debug("Geometry: %sx%s", *initial_dimensions)
-
     def build_gui(self, rebuild=False):
         """ Build the GUI """
         logger.debug("Building GUI")
@@ -183,7 +164,7 @@ class FaceswapGui(tk.Tk):
         get_images().delete_preview()
         self.quit()
         logger.debug("Closed GUI")
-        exit()
+        sys.exit(0)
 
     def _confirm_close_on_running_task(self):
         """ Pop a confirmation box to close the GUI if a task is running
diff --git a/tools/preview.py b/tools/preview.py
index 922a400..37cd45d 100644
--- a/tools/preview.py
+++ b/tools/preview.py
@@ -17,7 +17,7 @@ from PIL import Image, ImageTk
 
 from lib.aligner import Extract as AlignerExtract
 from lib.cli import ConvertArgs
-from lib.gui.utils import get_images, initialize_config, initialize_images
+from lib.gui.utils import get_images, get_config, initialize_config, initialize_images
 from lib.gui.custom_widgets import Tooltip
 from lib.gui.control_helper import ControlPanel, ControlPanelOption
 from lib.convert import Converter
@@ -53,7 +53,6 @@ class Preview(tk.Tk):  # pylint:disable=too-few-public-methods
         super().__init__()
         self._config_tools = ConfigTools()
         self._lock = Lock()
-        self._scaling = self._get_scaling()
 
         self._tk_vars = dict(refresh=tk.BooleanVar(), busy=tk.BooleanVar())
         for val in self._tk_vars.values():
@@ -78,7 +77,7 @@ class Preview(tk.Tk):  # pylint:disable=too-few-public-methods
 
     @property
     def _available_masks(self):
-        """ list: The mask names that are available for every face in the alignmnets file """
+        """ list: The mask names that are available for every face in the alignments file """
         retval = [key
                   for key, val in self._samples.alignments.mask_summary.items()
                   if val == self._samples.alignments.faces_count]
@@ -89,7 +88,7 @@ class Preview(tk.Tk):  # pylint:disable=too-few-public-methods
         logger.debug("Initializing tkinter")
         initialize_config(self, None, None, None)
         initialize_images()
-        self._set_geometry()
+        get_config().set_geometry(940, 600, fullscreen=False)
         self.title("Faceswap.py - Convert Settings")
         self.tk.call(
             "wm",
@@ -97,26 +96,6 @@ class Preview(tk.Tk):  # pylint:disable=too-few-public-methods
             self._w, get_images().icons["favicon"])  # pylint:disable=protected-access
         logger.debug("Initialized tkinter")
 
-    def _get_scaling(self):
-        """ Get dpi and update scaling for the display.
-
-        Returns
-        -------
-        float: The scaling factor for display
-        """
-        dpi = self.winfo_fpixels("1i")
-        scaling = dpi / 72.0
-        logger.debug("dpi: %s, scaling: %s'", dpi, scaling)
-        return scaling
-
-    def _set_geometry(self):
-        """ Set the GUI window geometry. """
-        self.tk.call("tk", "scaling", self._scaling)
-        width = int(940 * self._scaling)
-        height = int(600 * self._scaling)
-        logger.debug("Geometry: %sx%s", width, height)
-        self.geometry("{}x{}+80+80".format(str(width), str(height)))
-
     def process(self):
         """ The entry point for the Preview tool from :file:`lib.tools.cli`.
 
@@ -152,7 +131,7 @@ class Preview(tk.Tk):  # pylint:disable=too-few-public-methods
         container.pack(fill=tk.BOTH, expand=True)
         container.preview_display = self._display
         self._image_canvas = ImagesCanvas(container, self._tk_vars)
-        container.add(self._image_canvas, height=400 * self._scaling)
+        container.add(self._image_canvas, height=400 * get_config().scaling_factor)
 
         options_frame = ttk.Frame(container)
         self._cli_frame = ActionFrame(
@@ -168,8 +147,7 @@ class Preview(tk.Tk):  # pylint:disable=too-few-public-methods
             self._tk_vars)
         self._opts_book = OptionsBook(options_frame,
                                       self._config_tools,
-                                      self._refresh,
-                                      self._scaling)
+                                      self._refresh)
         container.add(options_frame)
 
 
@@ -1320,21 +1298,18 @@ class OptionsBook(ttk.Notebook):  # pylint:disable=too-many-ancestors
         Tools for loading and saving configuration files
     patch_callback: python function
         The function to execute when a patch callback is received
-    scaling: float
-        The scaling factor for display
 
     Attributes
     ----------
     config_tools: :class:`ConfigTools`
         Tools for loading and saving configuration files
     """
-    def __init__(self, parent, config_tools, patch_callback, scaling):
-        logger.debug("Initializing %s: (parent: %s, config: %s, scaling: %s)",
-                     self.__class__.__name__, parent, config_tools, scaling)
+    def __init__(self, parent, config_tools, patch_callback):
+        logger.debug("Initializing %s: (parent: %s, config: %s)",
+                     self.__class__.__name__, parent, config_tools)
         super().__init__(parent)
         self.pack(side=tk.RIGHT, anchor=tk.N, fill=tk.BOTH, expand=True)
         self.config_tools = config_tools
-        self._scaling = scaling
 
         self._tabs = dict()
         self._build_tabs()
