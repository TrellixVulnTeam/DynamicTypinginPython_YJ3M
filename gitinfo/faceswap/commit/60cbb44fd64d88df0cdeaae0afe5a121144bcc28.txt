commit 60cbb44fd64d88df0cdeaae0afe5a121144bcc28
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Fri Sep 21 12:39:17 2018 +0100

    Manual alignments: Copy previous/next frame alignments to current frame

diff --git a/tools/lib_alignments/jobs_manual.py b/tools/lib_alignments/jobs_manual.py
index 9a93cfd..81f4bb3 100644
--- a/tools/lib_alignments/jobs_manual.py
+++ b/tools/lib_alignments/jobs_manual.py
@@ -72,6 +72,12 @@ class Interface():
                                 "args": ["edit", "selected"],
                                 "help": "Select/Deselect Face at this Index",
                                 "key_type": range},
+                    "c": {"action": self.copy_alignments,
+                          "args": ("edit", -1),
+                          "help": "Copy Previous Frame's Alignments"},
+                    "v": {"action": self.copy_alignments,
+                          "args": ("edit", 1),
+                          "help": "Copy Next Frame's Alignments"},
                     "y": {"action": self.toggle_state,
                           "args": ("image", "display"),
                           "help": "Toggle Image"},
@@ -166,6 +172,23 @@ class Interface():
             self.state["edit"]["update_faces"] = True
             self.set_redraw(True)
 
+    def copy_alignments(self, *args):
+        """ Copy the alignments from the previous or next frame
+            to the current frame """
+        if self.get_edit_mode() != "Edit":
+            return
+        frame_id = self.state["navigation"]["frame_idx"] + args[1]
+        if not 0 <= frame_id <= self.state["navigation"]["max_frame"]:
+            return
+        current_frame = self.get_frame_name()
+        get_frame = self.frames.file_list_sorted[frame_id]["frame_fullname"]
+        alignments = self.alignments.get_alignments_for_frame(get_frame)
+        for alignment in alignments:
+            self.alignments. add_alignment(current_frame, alignment)
+        self.state["edit"]["updated"] = True
+        self.state["edit"]["update_faces"] = True
+        self.set_redraw(True)
+
     def toggle_state(self, item, category):
         """ Toggle state of requested item """
         self.state[item][category] = not self.state[item][category]
@@ -318,7 +341,7 @@ class Help():
 
     def background(self):
         """ Create an image to hold help text """
-        height = 850
+        height = 880
         width = 480
         image = np.zeros((height, width, 3), np.uint8)
         color = self.interface.get_state_color()
