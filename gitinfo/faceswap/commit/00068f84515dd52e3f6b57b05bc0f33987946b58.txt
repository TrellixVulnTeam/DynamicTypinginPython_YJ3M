commit 00068f84515dd52e3f6b57b05bc0f33987946b58
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Tue Mar 10 13:32:09 2020 +0000

    Core updates (#981)
    
    * Icon + minor files update
    
    * lib.faces_detect
          - Add option to force reload an aligned face
          - Make sure a default blur and threshold parameter is set
          - Add ability to replace an existing mask

diff --git a/.gitignore b/.gitignore
index cea035a..c859bd4 100644
--- a/.gitignore
+++ b/.gitignore
@@ -33,6 +33,7 @@
 !.pylintrc
 !tools
 !tools/lib*
+!tools/lib*/*
 !_travis
 !_travis/*
 !.travis.yml
diff --git a/docs/full/lib.alignments.rst b/docs/full/lib.alignments.rst
index 850dc4a..ed994b4 100644
--- a/docs/full/lib.alignments.rst
+++ b/docs/full/lib.alignments.rst
@@ -4,4 +4,4 @@ lib.alignments module
 .. automodule:: lib.alignments
    :members:
    :undoc-members:
-   :show-inheritance:
\ No newline at end of file
+   :show-inheritance:
diff --git a/lib/faces_detect.py b/lib/faces_detect.py
index ec068c2..b253cad 100644
--- a/lib/faces_detect.py
+++ b/lib/faces_detect.py
@@ -216,7 +216,7 @@ class DetectedFace():
                            self.left: self.right]
 
     # <<< Aligned Face methods and properties >>> #
-    def load_aligned(self, image, size=256, dtype=None):
+    def load_aligned(self, image, size=256, dtype=None, force=False):
         """ Align a face from a given image.
 
         Aligning a face is a relatively expensive task and is not required for all uses of
@@ -235,6 +235,8 @@ class DetectedFace():
             The size of the output face in pixels
         dtype: str, optional
             Optionally set a ``dtype`` for the final face to be formatted in. Default: ``None``
+        force: bool, optional
+            Force an update of the aligned face, even if it is already loaded. Default: ``False``
 
         Notes
         -----
@@ -244,7 +246,7 @@ class DetectedFace():
             - :func:`aligned_face`
             - :func:`adjusted_interpolators`
         """
-        if self.aligned:
+        if self.aligned and not force:
             # Don't reload an already aligned face
             logger.trace("Skipping alignment calculation for already aligned face")
         else:
@@ -254,7 +256,7 @@ class DetectedFace():
             self.aligned["padding"] = padding
             self.aligned["matrix"] = get_align_mat(self)
             self.aligned["face"] = None
-        if image is not None and self.aligned["face"] is None:
+        if image is not None and (self.aligned["face"] is None or force):
             logger.trace("Getting aligned face")
             face = AlignerExtract().transform(image, self.aligned["matrix"], size, padding)
             self.aligned["face"] = face if dtype is None else face.astype(dtype)
@@ -522,6 +524,7 @@ class Mask():
         self._blur = dict()
         self._blur_kernel = 0
         self._threshold = 0.0
+        self.set_blur_and_threshold()
 
     @property
     def mask(self):
@@ -542,6 +545,29 @@ class Mask():
         logger.trace("mask shape: %s", mask.shape)
         return mask
 
+    @property
+    def original_roi(self):
+        """ :class: `numpy.ndarray`: The original region of interest of the mask in the
+        source frame. """
+        points = np.array([[0, 0],
+                           [0, self.stored_size - 1],
+                           [self.stored_size - 1, self.stored_size - 1],
+                           [self.stored_size - 1, 0]], np.int32).reshape((-1, 1, 2))
+        matrix = cv2.invertAffineTransform(self._affine_matrix)
+        roi = cv2.transform(points, matrix).reshape((4, 2))
+        logger.trace("Returning: %s", roi)
+        return roi
+
+    @property
+    def affine_matrix(self):
+        """ :class: `numpy.ndarray`: The affine matrix to transpose the mask to a full frame. """
+        return self._affine_matrix
+
+    @property
+    def interpolator(self):
+        """ int: The cv2 interpolator required to transpose the mask to a full frame. """
+        return self._interpolator
+
     def get_full_frame_mask(self, width, height):
         """ Return the stored mask in a full size frame of the given dimensions
 
@@ -587,6 +613,17 @@ class Mask():
                      affine_matrix, mask.max(), interpolator)
         self._affine_matrix = self._adjust_affine_matrix(mask.shape[0], affine_matrix)
         self._interpolator = interpolator
+        self.replace_mask(mask)
+
+    def replace_mask(self, mask):
+        """ Replace the existing :attr:`_mask` with the given mask.
+
+        Parameters
+        ----------
+        mask: numpy.ndarray
+            The mask that is to be added as output from :mod:`plugins.extract.mask`.
+            It should be in the range 0.0 - 1.0 ideally with a ``dtype`` of ``float32``
+        """
         mask = (cv2.resize(mask,
                            (self.stored_size, self.stored_size),
                            interpolation=cv2.INTER_AREA) * 255.0).astype("uint8")
diff --git a/lib/gui/.cache/icons/beginning.png b/lib/gui/.cache/icons/beginning.png
new file mode 100755
index 0000000..a9fdb1f
Binary files /dev/null and b/lib/gui/.cache/icons/beginning.png differ
diff --git a/lib/gui/.cache/icons/boundingbox.png b/lib/gui/.cache/icons/boundingbox.png
new file mode 100755
index 0000000..1863fcb
Binary files /dev/null and b/lib/gui/.cache/icons/boundingbox.png differ
diff --git a/lib/gui/.cache/icons/copy_next.png b/lib/gui/.cache/icons/copy_next.png
new file mode 100755
index 0000000..e6df6fc
Binary files /dev/null and b/lib/gui/.cache/icons/copy_next.png differ
diff --git a/lib/gui/.cache/icons/copy_prev.png b/lib/gui/.cache/icons/copy_prev.png
new file mode 100755
index 0000000..41b84b3
Binary files /dev/null and b/lib/gui/.cache/icons/copy_prev.png differ
diff --git a/lib/gui/.cache/icons/draw.png b/lib/gui/.cache/icons/draw.png
new file mode 100755
index 0000000..c79809b
Binary files /dev/null and b/lib/gui/.cache/icons/draw.png differ
diff --git a/lib/gui/.cache/icons/end.png b/lib/gui/.cache/icons/end.png
new file mode 100755
index 0000000..c79ee55
Binary files /dev/null and b/lib/gui/.cache/icons/end.png differ
diff --git a/lib/gui/.cache/icons/erase.png b/lib/gui/.cache/icons/erase.png
new file mode 100755
index 0000000..113e4b8
Binary files /dev/null and b/lib/gui/.cache/icons/erase.png differ
diff --git a/lib/gui/.cache/icons/extractbox.png b/lib/gui/.cache/icons/extractbox.png
new file mode 100755
index 0000000..bd82f0c
Binary files /dev/null and b/lib/gui/.cache/icons/extractbox.png differ
diff --git a/lib/gui/.cache/icons/landmarks.png b/lib/gui/.cache/icons/landmarks.png
new file mode 100755
index 0000000..a098e13
Binary files /dev/null and b/lib/gui/.cache/icons/landmarks.png differ
diff --git a/lib/gui/.cache/icons/mask.png b/lib/gui/.cache/icons/mask.png
new file mode 100755
index 0000000..ffdc2fa
Binary files /dev/null and b/lib/gui/.cache/icons/mask.png differ
diff --git a/lib/gui/.cache/icons/next.png b/lib/gui/.cache/icons/next.png
new file mode 100755
index 0000000..47d5578
Binary files /dev/null and b/lib/gui/.cache/icons/next.png differ
diff --git a/lib/gui/.cache/icons/pause.png b/lib/gui/.cache/icons/pause.png
new file mode 100755
index 0000000..c10c193
Binary files /dev/null and b/lib/gui/.cache/icons/pause.png differ
diff --git a/lib/gui/.cache/icons/play.png b/lib/gui/.cache/icons/play.png
new file mode 100755
index 0000000..225f777
Binary files /dev/null and b/lib/gui/.cache/icons/play.png differ
diff --git a/lib/gui/.cache/icons/prev.png b/lib/gui/.cache/icons/prev.png
new file mode 100755
index 0000000..f538795
Binary files /dev/null and b/lib/gui/.cache/icons/prev.png differ
diff --git a/lib/gui/.cache/icons/reload3.png b/lib/gui/.cache/icons/reload3.png
new file mode 100755
index 0000000..5526f55
Binary files /dev/null and b/lib/gui/.cache/icons/reload3.png differ
diff --git a/lib/gui/.cache/icons/view.png b/lib/gui/.cache/icons/view.png
new file mode 100755
index 0000000..879ad44
Binary files /dev/null and b/lib/gui/.cache/icons/view.png differ
