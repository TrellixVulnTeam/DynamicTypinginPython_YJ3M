commit a5fc60c07054463b04165ebf05f20762964c59d0
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Mon Apr 1 11:12:50 2019 +0100

    Correct the mask decoders for dfl_h128 and IAE

diff --git a/plugins/train/model/dfl_h128.py b/plugins/train/model/dfl_h128.py
index 7e780c7..6d972c9 100644
--- a/plugins/train/model/dfl_h128.py
+++ b/plugins/train/model/dfl_h128.py
@@ -38,16 +38,19 @@ class Model(OriginalModel):
     def decoder(self):
         """ DFL H128 Decoder """
         input_ = Input(shape=(16, 16, self.encoder_dim))
-        var = input_
-        var = self.blocks.upscale(var, self.encoder_dim)
-        var = self.blocks.upscale(var, self.encoder_dim // 2)
-        var = self.blocks.upscale(var, self.encoder_dim // 4)
-
         # Face
-        var_x = Conv2D(3, kernel_size=5, padding="same", activation="sigmoid")(var)
+        var_x = input_
+        var_x = self.blocks.upscale(var_x, self.encoder_dim)
+        var_x = self.blocks.upscale(var_x, self.encoder_dim // 2)
+        var_x = self.blocks.upscale(var_x, self.encoder_dim // 4)
+        var_x = Conv2D(3, kernel_size=5, padding="same", activation="sigmoid")(var_x)
         outputs = [var_x]
         # Mask
         if self.config.get("mask_type", None):
-            var_y = Conv2D(1, kernel_size=5, padding="same", activation="sigmoid")(var)
+            var_y = input_
+            var_y = self.blocks.upscale(var_y, self.encoder_dim)
+            var_y = self.blocks.upscale(var_y, self.encoder_dim // 2)
+            var_y = self.blocks.upscale(var_y, self.encoder_dim // 4)
+            var_y = Conv2D(1, kernel_size=5, padding="same", activation="sigmoid")(var_y)
             outputs.append(var_y)
         return KerasModel(input_, outputs=outputs)
diff --git a/plugins/train/model/iae.py b/plugins/train/model/iae.py
index 667cbe3..aaf7a29 100644
--- a/plugins/train/model/iae.py
+++ b/plugins/train/model/iae.py
@@ -79,6 +79,11 @@ class Model(ModelBase):
         outputs = [var_x]
 
         if self.config.get("mask_type", None):
-            var_y = Conv2D(1, kernel_size=5, padding="same", activation="sigmoid")(var_x)
+            var_y = input_
+            var_y = self.blocks.upscale(var_y, 512)
+            var_y = self.blocks.upscale(var_y, 256)
+            var_y = self.blocks.upscale(var_y, 128)
+            var_y = self.blocks.upscale(var_y, 64)
+            var_y = Conv2D(1, kernel_size=5, padding="same", activation="sigmoid")(var_y)
             outputs.append(var_y)
         return KerasModel(input_, outputs=outputs)
