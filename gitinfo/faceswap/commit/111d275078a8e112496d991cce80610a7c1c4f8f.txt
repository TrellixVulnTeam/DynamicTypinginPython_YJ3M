commit 111d275078a8e112496d991cce80610a7c1c4f8f
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Sat Aug 3 12:09:13 2019 +0000

    Post PR Fixups
    
    - train/_config.py: PEP8 Fixes. Slight description change on coverage
    - models/_base.py:
       - Remove unused variables from Loss()
       - Delete legacy config items from state file
       - Save state file on Legacy update
       - PEP8
    - Remove _defaults.py for models with no config options

diff --git a/plugins/train/_config.py b/plugins/train/_config.py
index 8d16d00..7767f75 100644
--- a/plugins/train/_config.py
+++ b/plugins/train/_config.py
@@ -120,8 +120,7 @@ class Config(FaceswapConfig):
                  "the absolute value of each pixel in two reference images, compute the pixel to "
                  "pixel spatial difference in each image and then minimize that difference "
                  "between two images. Allows for large color shifts,but maintains the structure "
-                 "of the image.\n"
-                 )
+                 "of the image.\n")
         self.add_item(section=section, title="mask_type", datatype=str, default="none",
                       choices=get_available_masks(),
                       info="The mask to be used for training:"
@@ -145,10 +144,11 @@ class Config(FaceswapConfig):
         self.add_item(
             section=section, title="coverage", datatype=float, default=68.75,
             min_max=(62.5, 100.0), rounding=2, fixed=True,
-            info="How much of the extracted image to train on. A lower coverage will limit the model's "
-                 "scope to a zoomed-in central area while higher amounts can include the entire face. "
-                 "A trade-off exists between lower amounts given a bit more detail versus higher amounts "
-                 "avoiding noticeable swap transitions. Sensible values to use are:"
+            info="How much of the extracted image to train on. A lower coverage will limit the "
+                 "model's scope to a zoomed-in central area while higher amounts can include the "
+                 "entire face. A trade-off exists between lower amounts given more detail "
+                 "versus higher amounts avoiding noticeable swap transitions. Sensible values to "
+                 "use are:"
                  "\n\t62.5%% spans from eyebrow to eyebrow."
                  "\n\t75.0%% spans from temple to temple."
                  "\n\t87.5%% spans from ear to ear."
diff --git a/plugins/train/model/_base.py b/plugins/train/model/_base.py
index 3da5949..d0fe5ab 100644
--- a/plugins/train/model/_base.py
+++ b/plugins/train/model/_base.py
@@ -373,7 +373,7 @@ class ModelBase():
 
         for side, model in self.predictors.items():
             mask_input = [inp for inp in model.inputs if inp.name.startswith("mask")]
-            loss = Loss(side, model.outputs, mask_input, self.predict)
+            loss = Loss(model.outputs, mask_input)
             model.compile(optimizer=optimizer, loss=loss.funcs)
             if initialize:
                 self.state.add_session_loss_names(side, loss.names)
@@ -612,12 +612,12 @@ class ModelBase():
 
 class Loss():
     """ Holds loss names and functions for an Autoencoder """
-    def __init__(self, side, outputs, mask_input, predict):
-        logger.debug("Initializing %s: (side: '%s', outputs: '%s', mask_input: '%s', predict: %s",
-                     self.__class__.__name__, side, outputs, mask_input, predict)
+    def __init__(self, outputs, mask_input):
+        logger.debug("Initializing %s: (outputs: '%s', mask_input: '%s')",
+                     self.__class__.__name__, outputs, mask_input)
         self.outputs = outputs
         self.names = self.get_loss_names()
-        self.funcs = self.get_loss_functions(side, predict, mask_input)
+        self.funcs = self.get_loss_functions(mask_input)
         if len(self.names) > 1:
             self.names.insert(0, "total_loss")
         logger.debug("Initialized: %s", self.__class__.__name__)
@@ -663,7 +663,7 @@ class Loss():
         logger.debug("Renamed loss names to: %s", loss_names)
         return loss_names
 
-    def get_loss_functions(self, side, predict, mask):
+    def get_loss_functions(self, mask):
         """ Set the loss function """
         loss_funcs = []
         largest_face = self.largest_output
@@ -691,6 +691,7 @@ class Loss():
         logger.debug(loss_funcs)
         return loss_funcs
 
+
 class NNMeta():
     """ Class to hold a neural network and it's meta data
 
@@ -888,7 +889,6 @@ class State():
                 self.inputs = state.get("inputs", dict())
                 self.config = state.get("config", dict())
                 logger.debug("Loaded state: %s", state)
-                self.update_legacy_config()
                 self.replace_config(config_changeable_items)
         except IOError as err:
             logger.warning("No existing state file found. Generating.")
@@ -926,12 +926,28 @@ class State():
             if key not in self.config.keys():
                 logger.info("Adding new config item to state file: '%s': '%s'", key, val)
                 self.config[key] = val
+        legacy_update = self.update_legacy_config()
         self.update_changed_config_items(config_changeable_items)
         logger.debug("Replacing config. Old config: %s", _CONFIG)
         _CONFIG = self.config
+        if legacy_update:
+            self.save()
         logger.debug("Replaced config. New config: %s", _CONFIG)
         logger.info("Using configuration saved in state file")
 
+    def update_legacy_config(self):
+        """ Update legacy state config files with the new loss formating
+        """
+        prior = "dssim_loss"
+        new = "loss_function"
+        if prior not in self.config:
+            return False
+        self.config[new] = "ssim" if self.config[prior] else "mae"
+        del self.config[prior]
+        logger.info("Updated config from older dssim format. New config loss function: %s",
+                    self.config[new])
+        return True
+
     def update_changed_config_items(self, config_changeable_items):
         """ Update any parameters which are not fixed and have been changed """
         if not config_changeable_items:
@@ -943,13 +959,3 @@ class State():
                 continue
             self.config[key] = val
             logger.info("Config item: '%s' has been updated from '%s' to '%s'", key, old_val, val)
-
-    def update_legacy_config(self):
-        """ Update legacy state config files with the new loss formating
-        """
-        prior = "dssim_loss"
-        new = "loss_function"
-        if prior in self.config.keys() and new not in self.config.keys():
-            self.config[new] = "ssim" if self.config[prior] is True else "mae"
-            logger.debug("Updated config from older dssim format. New config loss function: %s",
-                         self.config[new])
diff --git a/plugins/train/model/dfaker_defaults.py b/plugins/train/model/dfaker_defaults.py
deleted file mode 100755
index 3dc6d6c..0000000
--- a/plugins/train/model/dfaker_defaults.py
+++ /dev/null
@@ -1,47 +0,0 @@
-#!/usr/bin/env python3
-"""
-    The default options for the faceswap Dfaker Model plugin.
-
-    Defaults files should be named <plugin_name>_defaults.py
-    Any items placed into this file will automatically get added to the relevant config .ini files
-    within the faceswap/config folder.
-
-    The following variables should be defined:
-        _HELPTEXT: A string describing what this plugin does
-        _DEFAULTS: A dictionary containing the options, defaults and meta information. The
-                   dictionary should be defined as:
-                       {<option_name>: {<metadata>}}
-
-                   <option_name> should always be lower text.
-                   <metadata> dictionary requirements are listed below.
-
-    The following keys are expected for the _DEFAULTS <metadata> dict:
-        datatype:  [required] A python type class. This limits the type of data that can be
-                   provided in the .ini file and ensures that the value is returned in the
-                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
-                   <class 'str'>, <class 'bool'>.
-        default:   [required] The default value for this option.
-        info:      [required] A string describing what this option does.
-        choices:   [optional] If this option's datatype is of <class 'str'> then valid
-                   selections can be defined here. This validates the option and also enables
-                   a combobox / radio option in the GUI.
-        gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
-                   radio buttons rather than a combobox to display this option.
-        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
-                   otherwise it is ignored. Should be a tuple of min and max accepted values.
-                   This is used for controlling the GUI slider range. Values are not enforced.
-        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
-                   required otherwise it is ignored. Used for the GUI slider. For floats, this
-                   is the number of decimal places to display. For ints this is the step size.
-        fixed:     [optional] [train only]. Training configurations are fixed when the model is
-                   created, and then reloaded from the state file. Marking an item as fixed=False
-                   indicates that this value can be changed for existing models, and will override
-                   the value saved in the state file with the updated value in config. If not
-                   provided this will default to True.
-"""
-
-
-_HELPTEXT = "Dfaker Model (Adapted from https://github.com/dfaker/df)"
-
-
-_DEFAULTS = {}
diff --git a/plugins/train/model/iae_defaults.py b/plugins/train/model/iae_defaults.py
deleted file mode 100755
index 915df47..0000000
--- a/plugins/train/model/iae_defaults.py
+++ /dev/null
@@ -1,50 +0,0 @@
-#!/usr/bin/env python3
-"""
-    The default options for the faceswap Iae Model plugin.
-
-    Defaults files should be named <plugin_name>_defaults.py
-    Any items placed into this file will automatically get added to the relevant config .ini files
-    within the faceswap/config folder.
-
-    The following variables should be defined:
-        _HELPTEXT: A string describing what this plugin does
-        _DEFAULTS: A dictionary containing the options, defaults and meta information. The
-                   dictionary should be defined as:
-                       {<option_name>: {<metadata>}}
-
-                   <option_name> should always be lower text.
-                   <metadata> dictionary requirements are listed below.
-
-    The following keys are expected for the _DEFAULTS <metadata> dict:
-        datatype:  [required] A python type class. This limits the type of data that can be
-                   provided in the .ini file and ensures that the value is returned in the
-                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
-                   <class 'str'>, <class 'bool'>.
-        default:   [required] The default value for this option.
-        info:      [required] A string describing what this option does.
-        choices:   [optional] If this option's datatype is of <class 'str'> then valid
-                   selections can be defined here. This validates the option and also enables
-                   a combobox / radio option in the GUI.
-        gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
-                   radio buttons rather than a combobox to display this option.
-        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
-                   otherwise it is ignored. Should be a tuple of min and max accepted values.
-                   This is used for controlling the GUI slider range. Values are not enforced.
-        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
-                   required otherwise it is ignored. Used for the GUI slider. For floats, this
-                   is the number of decimal places to display. For ints this is the step size.
-        fixed:     [optional] [train only]. Training configurations are fixed when the model is
-                   created, and then reloaded from the state file. Marking an item as fixed=False
-                   indicates that this value can be changed for existing models, and will override
-                   the value saved in the state file with the updated value in config. If not
-                   provided this will default to True.
-"""
-
-
-_HELPTEXT = (
-    "Intermediate Auto Encoder. Based on Original Model, uses intermediate layers to try to "
-    "better get details"
-)
-
-
-_DEFAULTS = {}
diff --git a/plugins/train/model/lightweight_defaults.py b/plugins/train/model/lightweight_defaults.py
deleted file mode 100755
index cdada18..0000000
--- a/plugins/train/model/lightweight_defaults.py
+++ /dev/null
@@ -1,51 +0,0 @@
-#!/usr/bin/env python3
-"""
-    The default options for the faceswap Lightweight Model plugin.
-
-    Defaults files should be named <plugin_name>_defaults.py
-    Any items placed into this file will automatically get added to the relevant config .ini files
-    within the faceswap/config folder.
-
-    The following variables should be defined:
-        _HELPTEXT: A string describing what this plugin does
-        _DEFAULTS: A dictionary containing the options, defaults and meta information. The
-                   dictionary should be defined as:
-                       {<option_name>: {<metadata>}}
-
-                   <option_name> should always be lower text.
-                   <metadata> dictionary requirements are listed below.
-
-    The following keys are expected for the _DEFAULTS <metadata> dict:
-        datatype:  [required] A python type class. This limits the type of data that can be
-                   provided in the .ini file and ensures that the value is returned in the
-                   correct type to faceswap. Valid datatypes are: <class 'int'>, <class 'float'>,
-                   <class 'str'>, <class 'bool'>.
-        default:   [required] The default value for this option.
-        info:      [required] A string describing what this option does.
-        choices:   [optional] If this option's datatype is of <class 'str'> then valid
-                   selections can be defined here. This validates the option and also enables
-                   a combobox / radio option in the GUI.
-        gui_radio: [optional] If <choices> are defined, this indicates that the GUI should use
-                   radio buttons rather than a combobox to display this option.
-        min_max:   [partial] For <class 'int'> and <class 'float'> datatypes this is required
-                   otherwise it is ignored. Should be a tuple of min and max accepted values.
-                   This is used for controlling the GUI slider range. Values are not enforced.
-        rounding:  [partial] For <class 'int'> and <class 'float'> datatypes this is
-                   required otherwise it is ignored. Used for the GUI slider. For floats, this
-                   is the number of decimal places to display. For ints this is the step size.
-        fixed:     [optional] [train only]. Training configurations are fixed when the model is
-                   created, and then reloaded from the state file. Marking an item as fixed=False
-                   indicates that this value can be changed for existing models, and will override
-                   the value saved in the state file with the updated value in config. If not
-                   provided this will default to True.
-"""
-
-
-_HELPTEXT = (
-    "A lightweight version of the Original Faceswap Model, designed to run on lower end GPUs "
-    "(~2GB).\nDon't expect great results, but it allows users with lower end cards to play with "
-    "the software.\n"
-)
-
-
-_DEFAULTS = {}
