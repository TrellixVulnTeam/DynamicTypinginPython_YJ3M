commit 00990c4a353c26ed565af903ff9005813efe8864
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Tue Aug 27 23:52:04 2019 +0100

    Gui Updates (#847)
    
    * GUI Improvements
    
     - Add basic GUI Config options (available in settings menu)
     - Dynamically add/remove columns on settings panel resize
     - Wrap text properly on info headers
     - Fix helptext formatting for configs
     - Standardize Tooltip widths
     - [code] Apply some widget naming
     - [code] Rename radio_columns to option_columns
     - [code] fix column count checking
     - Add Starting Tab config item
     - Add info boxes to main pages
     - Global font settings
     - Add resources to help menu

diff --git a/lib/cli.py b/lib/cli.py
index d2e5d06..4a8686d 100644
--- a/lib/cli.py
+++ b/lib/cli.py
@@ -355,6 +355,7 @@ class FaceSwapArgs():
                  description="default", subparsers=None):
 
         self.global_arguments = self.get_global_arguments()
+        self.info = self.get_info()
         self.argument_list = self.get_argument_list()
         self.optional_arguments = self.get_optional_arguments()
         self.process_suppressions()
@@ -368,6 +369,12 @@ class FaceSwapArgs():
         script = ScriptExecutor(command, subparsers)
         self.parser.set_defaults(func=script.execute_script)
 
+    @staticmethod
+    def get_info():
+        """ Return command information for display in the GUI.
+            Override for command specific info """
+        return None
+
     @staticmethod
     def get_argument_list():
         """ Put the arguments in a list so that they are accessible from both
@@ -504,6 +511,11 @@ class ExtractArgs(ExtractConvertArgs):
         Inherits base options from ExtractConvertArgs where arguments
         that are used for both extract and convert should be placed """
 
+    @staticmethod
+    def get_info():
+        """ Return command information """
+        return "Extract faces from image or video sources"
+
     @staticmethod
     def get_optional_arguments():
         """ Put the arguments in a list so that they are accessible from both
@@ -732,6 +744,11 @@ class ConvertArgs(ExtractConvertArgs):
         Inherits base options from ExtractConvertArgs where arguments
         that are used for both extract and convert should be placed """
 
+    @staticmethod
+    def get_info():
+        """ Return command information """
+        return "Swap the original faces in a source video/images to your final faces"
+
     @staticmethod
     def get_optional_arguments():
         """ Put the arguments in a list so that they are accessible from both
@@ -960,6 +977,13 @@ class ConvertArgs(ExtractConvertArgs):
 class TrainArgs(FaceSwapArgs):
     """ Class to parse the command line arguments for training """
 
+    @staticmethod
+    def get_info():
+        """ Return command information """
+        return ("Train a model on extracted original (A) and swap (B) faces\n"
+                "Training models can take a long time. Anything from 24hrs to "
+                "over a week")
+
     @staticmethod
     def get_argument_list():
         """ Put the arguments in a list so that they are accessible from both
diff --git a/lib/gui/_config.py b/lib/gui/_config.py
new file mode 100644
index 0000000..47552c6
--- /dev/null
+++ b/lib/gui/_config.py
@@ -0,0 +1,69 @@
+#!/usr/bin/env python3
+""" Default configurations for models """
+
+import logging
+import sys
+import os
+from tkinter import font
+
+from lib.config import FaceswapConfig
+
+logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
+
+
+class Config(FaceswapConfig):
+    """ Config File for GUI """
+    # pylint: disable=too-many-statements
+    def set_defaults(self):
+        """ Set the default values for config """
+        logger.debug("Setting defaults")
+        self.set_globals()
+
+    def set_globals(self):
+        """
+        Set the global options for GUI
+        """
+        logger.debug("Setting global config")
+        section = "global"
+        self.add_section(title=section,
+                         info="Faceswap GUI Options.\nNB: Faceswap will need to be restarted for "
+                              "any changes to take effect.")
+        self.add_item(
+            section=section, title="fullscreen", datatype=bool, default=False, group="startup",
+            info="Start Faceswap maximized.")
+        self.add_item(
+            section=section, title="tab", datatype=str, default="extract", group="startup",
+            choices=get_commands(),
+            info="Start Faceswap in this tab.")
+        self.add_item(
+            section=section, title="options_panel_width", datatype=int, default=30,
+            min_max=(10, 90), rounding=1, group="layout",
+            info="How wide the lefthand option panel is as a percentage of GUI width at startup.")
+        self.add_item(
+            section=section, title="console_panel_height", datatype=int, default=20,
+            min_max=(10, 90), rounding=1, group="layout",
+            info="How tall the bottom console panel is as a percentage of GUI height at startup.")
+        self.add_item(
+            section=section, title="font", datatype=str,
+            choices=["default"] + sorted(font.families()), default="default", group="font",
+            info="Global font")
+        self.add_item(
+            section=section, title="font_size", datatype=int, default=9,
+            min_max=(6, 12), rounding=1, group="font",
+            info="Global font size.")
+
+
+def get_commands():
+    """ Return commands formatted for GUI """
+    root_path = os.path.abspath(os.path.dirname(sys.argv[0]))
+    command_path = os.path.join(root_path, "scripts")
+    tools_path = os.path.join(root_path, "tools")
+    commands = [os.path.splitext(item)[0] for item in os.listdir(command_path)
+                if os.path.splitext(item)[1] == ".py"
+                and os.path.splitext(item)[0] not in ("gui", "fsmedia")
+                and not os.path.splitext(item)[0].startswith("_")]
+    tools = [os.path.splitext(item)[0] for item in os.listdir(tools_path)
+             if os.path.splitext(item)[1] == ".py"
+             and os.path.splitext(item)[0] not in ("gui", "cli")
+             and not os.path.splitext(item)[0].startswith("_")]
+    return commands + tools
diff --git a/lib/gui/command.py b/lib/gui/command.py
index ad967c0..f237564 100644
--- a/lib/gui/command.py
+++ b/lib/gui/command.py
@@ -17,12 +17,8 @@ class CommandNotebook(ttk.Notebook):  # pylint:disable=too-many-ancestors
 
     def __init__(self, parent):
         logger.debug("Initializing %s: (parent: %s)", self.__class__.__name__, parent)
-        scaling_factor = get_config().scaling_factor
-        width = int(420 * scaling_factor)
-        height = int(500 * scaling_factor)
-
         self.actionbtns = dict()
-        super().__init__(parent, width=width, height=height)
+        super().__init__(parent)
         parent.add(self)
 
         self.tools_notebook = ToolsNotebook(self)
@@ -57,8 +53,8 @@ class CommandNotebook(ttk.Notebook):  # pylint:disable=too-many-ancestors
         logger.debug("Update Action Buttons: (args: %s", args)
         tk_vars = get_config().tk_vars
 
-        for cmd in self.actionbtns.keys():
-            btnact = self.actionbtns[cmd]
+        for cmd, action in self.actionbtns.items():
+            btnact = action
             if tk_vars["runningtask"].get():
                 ttl = "Terminate"
                 hlp = "Exit the running process"
@@ -83,7 +79,7 @@ class CommandTab(ttk.Frame):  # pylint:disable=too-many-ancestors
     def __init__(self, parent, category, command):
         logger.debug("Initializing %s: (category: '%s', command: '%s')",
                      self.__class__.__name__, category, command)
-        super().__init__(parent)
+        super().__init__(parent, name="tab_{}".format(command.lower()))
 
         self.category = category
         self.actionbtns = parent.actionbtns
@@ -96,7 +92,11 @@ class CommandTab(ttk.Frame):  # pylint:disable=too-many-ancestors
         """ Build the tab """
         logger.debug("Build Tab: '%s'", self.command)
         options = get_config().cli_opts.opts[self.command]
-        ControlPanel(self, options, label_width=16, radio_columns=3, columns=1)
+        info = options.get("helptext", None)
+        if info is not None:
+            del options["helptext"]
+        ControlPanel(self, options,
+                     label_width=16, option_columns=3, columns=1, header_text=info)
         self.add_frame_separator()
 
         ActionFrame(self)
diff --git a/lib/gui/control_helper.py b/lib/gui/control_helper.py
index d654dfa..b54590a 100644
--- a/lib/gui/control_helper.py
+++ b/lib/gui/control_helper.py
@@ -5,12 +5,27 @@ import re
 
 import tkinter as tk
 from tkinter import ttk
+from itertools import zip_longest
 
 from .tooltip import Tooltip
-from .utils import ContextMenu, FileHandler, get_images
+from .utils import ContextMenu, FileHandler, get_config, get_images
 
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
 
+# We store Tooltips globally when they are created
+# Because we need to add them back to newly cloned widgets
+_TOOLTIPS = dict()
+
+
+def get_tooltip(widget, text, wraplength=600):
+    """ Store the tooltip layout and widget id in _TOOLTIPS and return a tooltip """
+    global _TOOLTIPS  # pylint:disable=global-statement
+    _TOOLTIPS[str(widget)] = {"text": text,
+                              "wraplength": wraplength}
+    logger.debug("Adding to tooltips dict: (widget: %s. text: '%s', wraplength: %s)",
+                 widget, text, wraplength)
+    return Tooltip(widget, text=text, wraplength=wraplength)
+
 
 def set_slider_rounding(value, var, d_type, round_to, min_max):
     """ Set the underlying variable to correct number based on slider rounding """
@@ -33,15 +48,12 @@ class ControlPanel(ttk.Frame):  # pylint:disable=too-many-ancestors
         Also keeps tally if groups passed in, so that any options with special
         processing needs are processed in the correct group frame """
 
-    def __init__(self, parent, options, label_width=20, columns=1, radio_columns=4,
+    def __init__(self, parent, options, label_width=20, columns=1, option_columns=4,
                  header_text=None, blank_nones=True):
         logger.debug("Initializing %s: (parent: '%s', options: %s, label_width: %s, columns: %s, "
-                     "radio_columns: %s, header_text: %s, blank_nones: %s)",
-                     self.__class__.__name__, parent, options, label_width, columns, radio_columns,
-                     header_text, blank_nones)
-        gui_style = ttk.Style()
-
-        gui_style.configure('BlueText.TLabelframe.Label', foreground="#0046D5", relief=tk.SOLID)
+                     "option_columns: %s, header_text: %s, blank_nones: %s)",
+                     self.__class__.__name__, parent, options, label_width, columns,
+                     option_columns, header_text, blank_nones)
         super().__init__(parent)
 
         self.pack(side=tk.TOP, fill=tk.BOTH, expand=True)
@@ -49,7 +61,7 @@ class ControlPanel(ttk.Frame):  # pylint:disable=too-many-ancestors
         self.options = options
         self.label_width = label_width
         self.columns = columns
-        self.radio_columns = radio_columns
+        self.option_columns = option_columns
 
         self.header_text = header_text
         self.group_frames = dict()
@@ -60,7 +72,8 @@ class ControlPanel(ttk.Frame):  # pylint:disable=too-many-ancestors
         self.mainframe, self.optsframe = self.get_opts_frame()
         self.optscanvas = self.canvas.create_window((0, 0), window=self.mainframe, anchor=tk.NW)
 
-        self.build_panel(radio_columns, blank_nones)
+        self.build_panel(blank_nones)
+
         logger.debug("Initialized %s", self.__class__.__name__)
 
     def get_opts_frame(self):
@@ -68,7 +81,7 @@ class ControlPanel(ttk.Frame):  # pylint:disable=too-many-ancestors
         mainframe = ttk.Frame(self.canvas)
         if self.header_text is not None:
             self.add_info(mainframe)
-        optsframe = ttk.Frame(mainframe)
+        optsframe = ttk.Frame(mainframe, name="opts_frame")
         optsframe.pack(expand=True, fill=tk.BOTH)
         holder = AutoFillContainer(optsframe, self.columns)
         logger.debug("Opts frames: '%s'", holder)
@@ -78,8 +91,11 @@ class ControlPanel(ttk.Frame):  # pylint:disable=too-many-ancestors
         """ Plugin information """
         gui_style = ttk.Style()
         gui_style.configure('White.TFrame', background='#FFFFFF')
-        gui_style.configure('Header.TLabel', background='#FFFFFF', font=("", 9, "bold"))
-        gui_style.configure('Body.TLabel', background='#FFFFFF', font=("", 9))
+        gui_style.configure('Header.TLabel',
+                            background='#FFFFFF',
+                            font=get_config().default_font + ("bold", ))
+        gui_style.configure('Body.TLabel',
+                            background='#FFFFFF')
 
         info_frame = ttk.Frame(frame, style='White.TFrame', relief=tk.SOLID)
         info_frame.pack(fill=tk.X, side=tk.TOP, expand=True, padx=10, pady=10)
@@ -90,10 +106,10 @@ class ControlPanel(ttk.Frame):  # pylint:disable=too-many-ancestors
                 continue
             style = "Header.TLabel" if idx == 0 else "Body.TLabel"
             info = ttk.Label(label_frame, text=line, style=style, anchor=tk.W)
+            info.bind("<Configure>", adjust_wraplength)
             info.pack(fill=tk.X, padx=0, pady=0, expand=True, side=tk.TOP)
-        info.bind("<Configure>", adjust_wraplength)
 
-    def build_panel(self, radio_columns, blank_nones):
+    def build_panel(self, blank_nones):
         """ Build the options frame for this command """
         logger.debug("Add Config Frame")
         self.add_scrollbar()
@@ -117,7 +133,7 @@ class ControlPanel(ttk.Frame):  # pylint:disable=too-many-ancestors
                                  helptext=val["helptext"],
                                  sysbrowser=val.get("sysbrowser", None),
                                  checkbuttons_frame=group_frame["chkbtns"],
-                                 radio_columns=radio_columns,
+                                 option_columns=self.option_columns,
                                  blank_nones=blank_nones)
             if group_frame["chkbtns"].items > 0:
                 group_frame["chkbtns"].parent.pack(side=tk.BOTTOM, fill=tk.X, anchor=tk.NW)
@@ -143,7 +159,7 @@ class ControlPanel(ttk.Frame):  # pylint:disable=too-many-ancestors
             else:
                 group_frame = ttk.LabelFrame(opts_frame,
                                              text="" if is_master else group.title(),
-                                             name=group.lower(), style="BlueText.TLabelframe")
+                                             name=group.lower())
 
             group_frame.pack(side=tk.TOP, fill=tk.X, padx=5, pady=5, anchor=tk.NW)
 
@@ -170,6 +186,7 @@ class ControlPanel(ttk.Frame):  # pylint:disable=too-many-ancestors
         logger.debug("Resize Config Frame")
         canvas_width = event.width
         self.canvas.itemconfig(self.optscanvas, width=canvas_width)
+        self.optsframe.rearrange_columns(canvas_width)
         logger.debug("Resized Config Frame")
 
     def checkbuttons_frame(self, frame):
@@ -178,7 +195,7 @@ class ControlPanel(ttk.Frame):  # pylint:disable=too-many-ancestors
             otherwise in a standard frame """
         logger.debug("Add Options CheckButtons Frame")
         chk_frame = ttk.Frame(frame, name="chkbuttons")
-        holder = AutoFillContainer(chk_frame, self.radio_columns)
+        holder = AutoFillContainer(chk_frame, self.option_columns)
         logger.debug("Added Options CheckButtons Frame")
         return holder
 
@@ -188,13 +205,29 @@ class AutoFillContainer():
     def __init__(self, parent, columns):
         logger.debug("Initializing: %s: (parent: %s, columns: %s)", self.__class__.__name__,
                      parent, columns)
+        self.max_columns = 4
+        self.single_column_width = self.scale_column_width(288, 9)
+        self.max_width = self.max_columns * self.single_column_width
         self.parent = parent
-        self.columns = columns
+        self.columns = min(columns, self.max_columns)
         self._items = 0
         self._idx = 0
+        self._widget_config = []  # Master list of all children in order
         self.subframes = self.set_subframes()
         logger.debug("Initialized: %s: (items: %s)", self.__class__.__name__, self.items)
 
+    @staticmethod
+    def scale_column_width(original_size, original_fontsize):
+        """ Scale the column width based on selected font size """
+        font_size = get_config().user_config_dict["font_size"]
+        if font_size == original_fontsize:
+            return original_size
+        scale = 1 + (((font_size / original_fontsize) - 1) / 2)
+        retval = round(original_size * scale)
+        logger.debug("scaled column width: (old_width: %s, scale: %s, new_width:%s)",
+                     original_size, scale, retval)
+        return retval
+
     @property
     def items(self):
         """ Returns the number if items held in this containter """
@@ -204,32 +237,141 @@ class AutoFillContainer():
     def subframe(self):
         """ Returns the next subframe to be populated """
         frame = self.subframes[self._idx]
-        next_idx = self._idx + 1 if self._idx + 1 != self.columns else 0
+        next_idx = self._idx + 1 if self._idx + 1 < self.columns else 0
         logger.debug("current_idx: %s, next_idx: %s", self._idx, next_idx)
         self._idx = next_idx
+        self._items += 1
         return frame
 
-    @property
-    def last_subframe(self):
-        """ Returns the last column """
-        return self.subframes[self.columns - 1]
-
     def set_subframes(self):
-        """ Set a subrame for each requested column """
+        """ Set a subrame for each possible column """
         subframes = []
-        for idx in range(self.columns):
-            if self.columns != 1:
-                name = "{}_{}".format(self.parent.winfo_name(), idx)
-                subframe = ttk.Frame(self.parent, name=name)
+        for idx in range(self.max_columns):
+            name = "af_subframe_{}".format(idx)
+            subframe = ttk.Frame(self.parent, name=name)
+            if idx < self.columns:
+                # Only pack visible columns
                 subframe.pack(padx=5, pady=5, side=tk.LEFT, anchor=tk.N, expand=True, fill=tk.X)
-                subframes.append(subframe)
-                logger.debug("Added subframe: %s", name)
-            else:
-                subframes.append(self.parent)
-                logger.debug("Using parent as subframe: %s", self.parent.winfo_name())
-            self._items += 1
+            subframes.append(subframe)
+            logger.debug("Added subframe: %s", name)
         return subframes
 
+    def rearrange_columns(self, width):
+        """ On column number change redistribute widgets """
+        if not self.single_column_width < width < self.max_width:
+            logger.debug("width outside min/max thresholds: (min: %s, width: %s, max: %s)",
+                         self.single_column_width, width, self.max_width)
+            return
+        range_min = self.columns * self.single_column_width
+        range_max = (self.columns + 1) * self.single_column_width
+        if range_min < width < range_max:
+            logger.debug("width outside next step refresh threshold: (step down: %s, width: %s,"
+                         "step up: %s)", range_min, width, range_max)
+            return
+        new_columns = width // self.single_column_width
+        logger.debug("Rearranging columns: (width: %s, old_columns: %s, new_columns: %s)",
+                     width, self.columns, new_columns)
+        self.columns = new_columns
+        if not self._widget_config:
+            self.compile_widget_config()
+        self.destroy_children()
+        self.repack_columns()
+        self.pack_widget_clones(self._widget_config)
+
+    def compile_widget_config(self):
+        """ Compile all children recursively in correct order if not already compiled """
+        zipped = zip_longest(*(subframe.winfo_children() for subframe in self.subframes))
+        children = [child for group in zipped for child in group if child is not None]
+        self._widget_config = [{"class": child.__class__,
+                                "id": str(child),
+                                "tooltip": _TOOLTIPS.get(str(child), None),
+                                "pack_info": self.pack_config_cleaner(child),
+                                "name": child.winfo_name(),
+                                "config": self.config_cleaner(child),
+                                "children": self.get_all_children_config(child, [])}
+                               for idx, child in enumerate(children)]
+        logger.debug("Compiled AutoFillContainer children: %s", self._widget_config)
+
+    def get_all_children_config(self, widget, child_list):
+        """ Return all children, recursively, of given widget """
+        for child in widget.winfo_children():
+            if child.winfo_ismapped():
+                id_ = str(child)
+                child_list.append({"class": child.__class__,
+                                   "id": id_,
+                                   "tooltip": _TOOLTIPS.get(id_, None),
+                                   "pack_info": self.pack_config_cleaner(child),
+                                   "name": child.winfo_name(),
+                                   "config": self.config_cleaner(child),
+                                   "parent": child.winfo_parent()})
+            self.get_all_children_config(child, child_list)
+        return child_list
+
+    @staticmethod
+    def config_cleaner(widget):
+        """ Some options don't like to be copied, so this returns a cleaned
+            configuration from a widget """
+        new_config = dict()
+        if widget.configure() is None:
+            return None
+        for key, val in widget.configure().items():
+            if key == "class":
+                continue
+            if key in ("anchor", "justify") and val[3] == "":
+                continue
+            new_config[key] = widget.cget(key)
+        return new_config
+
+    @staticmethod
+    def pack_config_cleaner(widget):
+        """ Some options don't like to be copied, so this returns a cleaned
+            configuration from a widget """
+        return {key: val for key, val in widget.pack_info().items() if key != "in"}
+
+    def unpack_originals(self):
+        """ The original widgets must be unpacked but not destroyed
+            as we need to reference them for cloning """
+        for subframe in self.subframes:
+            for child in subframe.winfo_children():
+                child.pack_forget()
+
+    def destroy_children(self):
+        """ Destroy the currently existing widgets """
+        for subframe in self.subframes:
+            for child in subframe.winfo_children():
+                child.destroy()
+
+    def repack_columns(self):
+        """ Repack or unpack columns based on display columns """
+        for idx, subframe in enumerate(self.subframes):
+            if idx < self.columns and not subframe.winfo_ismapped():
+                subframe.pack(padx=5, pady=5, side=tk.LEFT, anchor=tk.N, expand=True, fill=tk.X)
+            elif idx >= self.columns and subframe.winfo_ismapped():
+                subframe.pack_forget()
+
+    def pack_widget_clones(self, widget_dicts, old_children=None, new_children=None):
+        """ Widgets cannot be given a new parent so we need to clone
+            them and then pack the new widget """
+        for widget_dict in widget_dicts:
+            logger.debug(widget_dict["id"])
+            old_children = [] if old_children is None else old_children
+            new_children = [] if new_children is None else new_children
+            if widget_dict.get("parent", None) is not None:
+                parent = new_children[old_children.index(widget_dict["parent"])]
+            else:
+                # Get the next subframe if this doesn't have a logged parent
+                parent = self.subframe
+            clone = widget_dict["class"](parent, name=widget_dict["name"])
+            if widget_dict["config"] is not None:
+                clone.configure(**widget_dict["config"])
+            if widget_dict["tooltip"] is not None:
+                Tooltip(clone, **widget_dict["tooltip"])
+            clone.pack(**widget_dict["pack_info"])
+            old_children.append(widget_dict["id"])
+            new_children.append(clone)
+            if widget_dict.get("children", None) is not None:
+                self.pack_widget_clones(widget_dict["children"], old_children, new_children)
+
 
 class ControlBuilder():
     """
@@ -262,7 +404,7 @@ class ControlBuilder():
         Expects a dict: {sysbrowser: str, filetypes: str}
     helptext: str, optional
         Sets the tooltip text
-    radio_columns: int, optional
+    option_columns: int, optional
         Sets the number of columns to use for grouping radio buttons
     label_width: int, optional
         Sets the width of the control label. Defaults to 20
@@ -276,14 +418,14 @@ class ControlBuilder():
     """
     def __init__(self, parent, title, dtype, default,
                  selected_value=None, choices=None, is_radio=False, rounding=None,
-                 min_max=None, sysbrowser=None, helptext=None, radio_columns=3, label_width=20,
+                 min_max=None, sysbrowser=None, helptext=None, option_columns=3, label_width=20,
                  checkbuttons_frame=None, control_width=None, blank_nones=True):
         logger.debug("Initializing %s: (parent: %s, title: %s, dtype: %s, default: %s, "
                      "selected_value: %s, choices: %s, is_radio: %s, rounding: %s, min_max: %s, "
-                     "sysbrowser: %s, helptext: %s, radio_columns: %s, label_width: %s, "
+                     "sysbrowser: %s, helptext: %s, option_columns: %s, label_width: %s, "
                      "checkbuttons_frame: %s, control_width: %s, blank_nones: %s)",
                      self.__class__.__name__, parent, title, dtype, default, selected_value,
-                     choices, is_radio, rounding, min_max, sysbrowser, helptext, radio_columns,
+                     choices, is_radio, rounding, min_max, sysbrowser, helptext, option_columns,
                      label_width, checkbuttons_frame, control_width, blank_nones)
 
         self.title = title
@@ -303,7 +445,7 @@ class ControlBuilder():
                            rounding,
                            min_max,
                            sysbrowser,
-                           radio_columns,
+                           option_columns,
                            control_width)
         logger.debug("Initialized: %s", self.__class__.__name__)
 
@@ -325,7 +467,7 @@ class ControlBuilder():
         if helptext.startswith("R|"):
             helptext = helptext[2:].replace("\nL|", "\n - ").replace("\n", "\n\n")
         else:
-            helptext = helptext.replace("\n\t", "\n  - ").replace("%%", "%")
+            helptext = helptext.replace("\n\t", "\n - ").replace("%%", "%")
         helptext = ". ".join(i.capitalize() for i in helptext.split(". "))
         helptext = self.title + " - " + helptext
         logger.debug("Formatted control help: (title: '%s', help: '%s'", self.title, helptext)
@@ -368,7 +510,7 @@ class ControlBuilder():
         return var
 
     # Build the full control
-    def build_control(self, choices, dtype, rounding, min_max, sysbrowser, radio_columns,
+    def build_control(self, choices, dtype, rounding, min_max, sysbrowser, option_columns,
                       control_width):
         """ Build the correct control type for the option passed through """
         logger.debug("Build confog option control")
@@ -379,7 +521,7 @@ class ControlBuilder():
                                rounding,
                                min_max,
                                sysbrowser,
-                               radio_columns,
+                               option_columns,
                                control_width)
         logger.debug("Built option control")
 
@@ -390,21 +532,20 @@ class ControlBuilder():
         lbl = ttk.Label(self.frame, text=title, width=self.label_width, anchor=tk.W)
         lbl.pack(padx=5, pady=5, side=tk.LEFT, anchor=tk.N)
         if self.helptext is not None:
-            Tooltip(lbl, text=self.helptext, wraplength=720)
-
+            get_tooltip(lbl, text=self.helptext, wraplength=600)
         logger.debug("Built control label: '%s'", self.title)
 
     def build_one_control(self, choices, dtype, rounding, min_max,
-                          sysbrowser, radio_columns, control_width):
+                          sysbrowser, option_columns, control_width):
         """ Build and place the option controls """
         logger.debug("Build control: (title: '%s', control: %s, choices: %s, dtype: %s, "
-                     "rounding: %s, sysbrowser: %s, min_max: %s: radio_columns: %s, "
+                     "rounding: %s, sysbrowser: %s, min_max: %s: option_columns: %s, "
                      "control_width: %s)", self.title, self.control, choices, dtype, rounding,
-                     sysbrowser, min_max, radio_columns, control_width)
+                     sysbrowser, min_max, option_columns, control_width)
         if self.control == ttk.Scale:
             ctl = self.slider_control(dtype, rounding, min_max)
         elif self.control == ttk.Radiobutton:
-            ctl = self.radio_control(choices, radio_columns)
+            ctl = self.radio_control(choices, option_columns)
         elif self.control == ttk.Checkbutton:
             ctl = self.control_to_checkframe()
         else:
@@ -413,7 +554,7 @@ class ControlBuilder():
         if self.control != ttk.Checkbutton:
             ctl.pack(padx=5, pady=5, fill=tk.X, expand=True)
             if self.helptext is not None and not self.helpset:
-                Tooltip(ctl, text=self.helptext, wraplength=720)
+                get_tooltip(ctl, text=self.helptext, wraplength=600)
 
         logger.debug("Built control: '%s'", self.title)
 
@@ -433,10 +574,9 @@ class ControlBuilder():
                             line.split()[1].lower()): " ".join(line.split()[1:])
                      for line in all_help
                      if line.startswith(" - ")}
-
         ctl = ttk.LabelFrame(self.frame,
                              text=self.title.replace("_", " ").title(),
-                             style="BlueText.TLabelframe")
+                             name="radio_labelframe")
         radio_holder = AutoFillContainer(ctl, columns)
         for idx, choice in enumerate(choices):
             frame_id = idx % columns
@@ -448,9 +588,9 @@ class ControlBuilder():
                 self.helpset = True
                 helptext = helpitems[choice.lower()].capitalize()
                 helptext = "{}\n\n - {}".format(
-                    intro,
-                    '. '.join(item.capitalize() for item in helptext.split('. ')))
-                Tooltip(radio, text=helptext, wraplength=400)
+                    '. '.join(item.capitalize() for item in helptext.split('. ')),
+                    intro)
+                get_tooltip(radio, text=helptext, wraplength=600)
             radio.pack(anchor=tk.W)
             logger.debug("Adding radio option %s to column %s", choice, frame_id)
         return radio_holder.parent
@@ -459,7 +599,11 @@ class ControlBuilder():
         """ A slider control with corresponding Entry box """
         logger.debug("Add slider control to Options Frame: (title: '%s', dtype: %s, rounding: %s, "
                      "min_max: %s)", self.title, dtype, rounding, min_max)
-        tbox = ttk.Entry(self.frame, width=8, textvariable=self.tk_var, justify=tk.RIGHT)
+        tbox = ttk.Entry(self.frame,
+                         width=8,
+                         textvariable=self.tk_var,
+                         justify=tk.RIGHT,
+                         font=get_config().default_font)
         tbox.pack(padx=(0, 5), side=tk.RIGHT)
         ctl = self.control(
             self.frame,
@@ -482,7 +626,9 @@ class ControlBuilder():
         else:
             if sysbrowser is not None:
                 self.filebrowser = FileBrowser(self.tk_var, self.frame, sysbrowser)
-            ctl = self.control(self.frame, textvariable=self.tk_var)
+            ctl = self.control(self.frame,
+                               textvariable=self.tk_var,
+                               font=get_config().default_font)
             rc_menu = ContextMenu(ctl)
             rc_menu.cm_bind()
         if choices:
@@ -499,7 +645,7 @@ class ControlBuilder():
                            variable=self.tk_var,
                            text=self.title.replace("_", " ").title(),
                            name=self.title.lower())
-        Tooltip(ctl, text=self.helptext, wraplength=200)
+        get_tooltip(ctl, text=self.helptext, wraplength=600)
         ctl.pack(side=tk.TOP, anchor=tk.W)
         logger.debug("Added control checkframe: '%s'", self.title)
         return ctl
@@ -540,7 +686,7 @@ class FileBrowser():
                                  image=img,
                                  command=lambda cmd=action: cmd(self.tk_var, self.filetypes))
             fileopn.pack(padx=(0, 5), side=tk.RIGHT)
-            Tooltip(fileopn, text=self.helptext[browser], wraplength=200)
+            get_tooltip(fileopn, text=self.helptext[browser], wraplength=600)
             logger.debug("Added browser buttons: (action: %s, filetypes: %s",
                          action, self.filetypes)
 
diff --git a/lib/gui/display.py b/lib/gui/display.py
index 61aac59..6e0f1d7 100644
--- a/lib/gui/display.py
+++ b/lib/gui/display.py
@@ -20,7 +20,7 @@ class DisplayNotebook(ttk.Notebook):  # pylint: disable=too-many-ancestors
 
     def __init__(self, parent):
         logger.debug("Initializing %s", self.__class__.__name__)
-        ttk.Notebook.__init__(self, parent, width=780)
+        super().__init__(parent)
         parent.add(self)
         tk_vars = get_config().tk_vars
         self.wrapper_var = tk_vars["display"]
diff --git a/lib/gui/menu.py b/lib/gui/menu.py
index 6970ca2..a5d1e26 100644
--- a/lib/gui/menu.py
+++ b/lib/gui/menu.py
@@ -6,6 +6,8 @@ import logging
 import os
 import sys
 import tkinter as tk
+import webbrowser
+
 
 from importlib import import_module
 from subprocess import Popen, PIPE, STDOUT
@@ -17,6 +19,10 @@ import update_deps
 from .utils import get_config
 from .popup_configure import popup_config
 
+_RESOURCES = [("faceswap.dev - Guides and Forum", "https://www.faceswap.dev"),
+              ("Patreon - Support this project", "https://www.patreon.com/faceswap"),
+              ("Discord - The FaceSwap Discord server", "https://discord.gg/VasFUAy"),
+              ("Github - Our Source Code", "https://github.com/deepfakes/faceswap")]
 
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
 
@@ -29,29 +35,26 @@ class MainMenuBar(tk.Menu):  # pylint:disable=too-many-ancestors
         self.root = master
 
         self.file_menu = FileMenu(self)
-        self.edit_menu = tk.Menu(self, tearoff=0)
-        self.tools_menu = ToolsMenu(self)
+        self.settings_menu = SettingsMenu(self)
+        self.help_menu = HelpMenu(self)
 
         self.add_cascade(label="File", menu=self.file_menu, underline=0)
-        self.build_edit_menu()
-        self.add_cascade(label="Tools", menu=self.tools_menu, underline=0)
+        self.add_cascade(label="Settings", menu=self.settings_menu, underline=0)
+        self.add_cascade(label="Help", menu=self.help_menu, underline=0)
         logger.debug("Initialized %s", self.__class__.__name__)
 
-    def build_edit_menu(self):
-        """ Add the edit menu to the menu bar """
-        logger.debug("Building Edit menu")
-        configs = self.scan_for_configs()
-        for name in sorted(list(configs.keys())):
-            label = "Configure {} Plugins...".format(name.title())
-            config = configs[name]
-            self.edit_menu.add_command(
-                label=label,
-                underline=10,
-                command=lambda conf=(name, config), root=self.root: popup_config(conf, root))
-        self.add_cascade(label="Edit", menu=self.edit_menu, underline=0)
-        logger.debug("Built Edit menu")
 
-    def scan_for_configs(self):
+class SettingsMenu(tk.Menu):  # pylint:disable=too-many-ancestors
+    """ Settings menu items and functions """
+    def __init__(self, parent):
+        logger.debug("Initializing %s", self.__class__.__name__)
+        super().__init__(parent, tearoff=0)
+        self.root = parent.root
+        self.configs = self.scan_for_plugin_configs()
+        self.build()
+        logger.debug("Initialized %s", self.__class__.__name__)
+
+    def scan_for_plugin_configs(self):
         """ Scan for config.ini file locations """
         root_path = os.path.abspath(os.path.dirname(sys.argv[0]))
         plugins_path = os.path.join(root_path, "plugins")
@@ -75,6 +78,24 @@ class MainMenuBar(tk.Menu):  # pylint:disable=too-many-ancestors
         logger.debug("Found '%s' config at '%s'", plugin_type, config.configfile)
         return config
 
+    def build(self):
+        """ Add the settings menu to the menu bar """
+        logger.debug("Building settings menu")
+        for name in sorted(list(self.configs.keys())):
+            label = "Configure {} Plugins...".format(name.title())
+            config = self.configs[name]
+            self.add_command(
+                label=label,
+                underline=10,
+                command=lambda conf=(name, config), root=self.root: popup_config(conf, root))
+        self.add_separator()
+        conf = get_config().user_config
+        self.add_command(
+            label="GUI Settings...",
+            underline=10,
+            command=lambda conf=("GUI", conf), root=self.root: popup_config(conf, root))
+        logger.debug("Built settings menu")
+
 
 class FileMenu(tk.Menu):  # pylint:disable=too-many-ancestors
     """ File menu items and functions """
@@ -142,32 +163,50 @@ class FileMenu(tk.Menu):  # pylint:disable=too-many-ancestors
         self.build_recent_menu()
 
 
-class ToolsMenu(tk.Menu):  # pylint:disable=too-many-ancestors
-    """ Tools menu items and functions """
+class HelpMenu(tk.Menu):  # pylint:disable=too-many-ancestors
+    """ Help menu items and functions """
     def __init__(self, parent):
         logger.debug("Initializing %s", self.__class__.__name__)
         super().__init__(parent, tearoff=0)
         self.root = parent.root
+        self.recources_menu = tk.Menu(self, tearoff=0)
         self.build()
         logger.debug("Initialized %s", self.__class__.__name__)
 
     def build(self):
-        """ Build the tools menu """
-        logger.debug("Building Tools menu")
+        """ Build the help menu """
+        logger.debug("Building Help menu")
+
         self.add_command(label="Check for updates...",
+                         underline=0,
+                         command=lambda action="check": self.in_thread(action))
+        self.add_command(label="Update Faceswap...",
                          underline=0,
                          command=lambda action="update": self.in_thread(action))
+        self.add_separator()
+        self.build_recources_menu()
+        self.add_cascade(label="Resources", underline=0, menu=self.recources_menu)
+        self.add_separator()
         self.add_command(label="Output System Information",
                          underline=0,
                          command=lambda action="output_sysinfo": self.in_thread(action))
-        logger.debug("Built Tools menu")
+        logger.debug("Built help menu")
+
+    def build_recources_menu(self):
+        """ Build resources menu """
+        logger.debug("Building Resources Files menu")
+        for resource in _RESOURCES:
+            self.recources_menu.add_command(
+                label=resource[0],
+                command=lambda link=resource[1]: webbrowser.open_new(link))
+        logger.debug("Built resources menu")
 
     def in_thread(self, action):
         """ Perform selected action inside a thread """
-        logger.debug("Performing tools action: %s", action)
+        logger.debug("Performing help action: %s", action)
         thread = MultiThread(getattr(self, action), thread_count=1)
         thread.start()
-        logger.debug("Performed tools action: %s", action)
+        logger.debug("Performed help action: %s", action)
 
     @staticmethod
     def clear_console():
@@ -190,6 +229,15 @@ class ToolsMenu(tk.Menu):  # pylint:disable=too-many-ancestors
         print(info)
         self.root.config(cursor="")
 
+    def check(self):
+        """ Check for updates and clone repo """
+        logger.debug("Checking for updates...")
+        self.root.config(cursor="watch")
+        encoding = locale.getpreferredencoding()
+        logger.debug("Encoding: %s", encoding)
+        self.check_for_updates(encoding, check=True)
+        self.root.config(cursor="")
+
     def update(self):
         """ Check for updates and clone repo """
         logger.debug("Updating Faceswap...")
@@ -205,7 +253,7 @@ class ToolsMenu(tk.Menu):  # pylint:disable=too-many-ancestors
         self.root.config(cursor="")
 
     @staticmethod
-    def check_for_updates(encoding):
+    def check_for_updates(encoding, check=False):
         """ Check whether an update is required """
         # Do the check
         logger.info("Checking for updates...")
@@ -215,8 +263,6 @@ class ToolsMenu(tk.Menu):  # pylint:disable=too-many-ancestors
         cmd = Popen(gitcmd, shell=True, stdout=PIPE, stderr=STDOUT)
         stdout, _ = cmd.communicate()
         retcode = cmd.poll()
-        logger.debug("'%s' output: %s", gitcmd, stdout.decode(encoding))
-        logger.debug("'%s' returncode: %s", gitcmd, retcode)
         if retcode != 0:
             msg = ("Git is not installed or you are not running a cloned repo. "
                    "Unable to check for updates")
@@ -230,12 +276,13 @@ class ToolsMenu(tk.Menu):  # pylint:disable=too-many-ancestors
                     msg = "Faceswap is up to date."
                     break
                 if line.lower().startswith("your branch is behind"):
+                    msg = "There are updates available"
                     update = True
                     break
                 if "have diverged" in line.lower():
                     msg = "Your branch has diverged from the remote repo. Not updating"
                     break
-        if not update:
+        if not update or check:
             logger.info(msg)
         logger.debug("Checked for update. Update required: %s", update)
         return update
diff --git a/lib/gui/options.py b/lib/gui/options.py
index 573d127..fbd8983 100644
--- a/lib/gui/options.py
+++ b/lib/gui/options.py
@@ -71,8 +71,9 @@ class CliOptions():
         for classname in mod_classes:
             logger.debug("Processing: (classname: '%s')", classname)
             command = self.format_command_name(classname)
-            options = self.get_cli_arguments(cli_source, classname, command)
+            info, options = self.get_cli_arguments(cli_source, classname, command)
             options = self.process_options(options, command)
+            options["helptext"] = info
             logger.debug("Processed: (classname: '%s', command: '%s', options: %s)",
                          classname, command, options)
             subopts[command] = options
@@ -82,7 +83,7 @@ class CliOptions():
     def get_cli_arguments(cli_source, classname, command):
         """ Extract the options from the main and tools cli files """
         meth = getattr(cli_source, classname)(None, command)
-        return meth.argument_list + meth.optional_arguments + meth.global_arguments
+        return meth.info, meth.argument_list + meth.optional_arguments + meth.global_arguments
 
     def process_options(self, command_options, command):
         """ Process the options for a single command """
diff --git a/lib/gui/popup_configure.py b/lib/gui/popup_configure.py
index d11a485..7f77d6e 100644
--- a/lib/gui/popup_configure.py
+++ b/lib/gui/popup_configure.py
@@ -94,7 +94,7 @@ class ConfigurePlugins(tk.Toplevel):
         """ Build a plugin config page """
         logger.debug("Building plugin config page: '%s'", category)
         plugins = sorted(list(key for key in self.config_dict_gui[category].keys()))
-        panel_kwargs = dict(columns=2, radio_columns=2, blank_nones=False)
+        panel_kwargs = dict(columns=2, option_columns=2, blank_nones=False)
         if any(plugin != category for plugin in plugins):
             page = ttk.Notebook(container)
             page.pack(side=tk.TOP, fill=tk.BOTH, expand=True)
diff --git a/lib/gui/utils.py b/lib/gui/utils.py
index f0142ae..b51eefb 100644
--- a/lib/gui/utils.py
+++ b/lib/gui/utils.py
@@ -15,6 +15,8 @@ from PIL import Image, ImageDraw, ImageTk
 
 from lib.Serializer import JSONSerializer
 
+from ._config import Config as UserConfig
+
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
 _CONFIG = None
 _IMAGES = None
@@ -629,10 +631,24 @@ class Config():
         self.statusbar = statusbar
         self.serializer = JSONSerializer
         self.tk_vars = self.set_tk_vars()
+        self.user_config = UserConfig(None)
         self.command_notebook = None  # set in command.py
         self.session = session
         logger.debug("Initialized %s", self.__class__.__name__)
 
+    @property
+    def user_config_dict(self):
+        """ Return the dictionary from user_config """
+        return self.user_config.config_dict
+
+    @property
+    def default_font(self):
+        """ Return the selected font """
+        font = self.user_config_dict["font"]
+        if font == "default":
+            font = tk.font.nametofont("TkDefaultFont").configure()["family"]
+        return (font, self.user_config_dict["font_size"])
+
     @property
     def command_tabs(self):
         """ Return dict of command tab titles with their IDs """
diff --git a/scripts/gui.py b/scripts/gui.py
index cc44210..f2032d9 100644
--- a/scripts/gui.py
+++ b/scripts/gui.py
@@ -22,8 +22,12 @@ class FaceswapGui(tk.Tk):
         super().__init__()
 
         self.initialize_globals(pathscript)
+        self.set_fonts()
+        self.set_styles()
         self.set_geometry()
+
         self.wrapper = ProcessWrapper(pathscript)
+        self.objects = dict()
 
         get_images().delete_preview()
         self.protocol("WM_DELETE_WINDOW", self.close_app)
@@ -39,6 +43,20 @@ class FaceswapGui(tk.Tk):
         initialize_config(self, cliopts, scaling_factor, pathcache, statusbar, session)
         initialize_images()
 
+    @staticmethod
+    def set_fonts():
+        """ Set global default font """
+        tk.font.nametofont("TkFixedFont").configure(size=get_config().default_font[1])
+        for font in ("TkDefaultFont", "TkHeadingFont", "TkMenuFont"):
+            tk.font.nametofont(font).configure(family=get_config().default_font[0],
+                                               size=get_config().default_font[1])
+
+    @staticmethod
+    def set_styles():
+        """ Set global custom styles """
+        gui_style = ttk.Style()
+        gui_style.configure('TLabelframe.Label', foreground="#0046D5", relief=tk.SOLID)
+
     def get_scaling(self):
         """ Get the display DPI """
         dpi = self.winfo_fpixels("1i")
@@ -48,12 +66,22 @@ class FaceswapGui(tk.Tk):
 
     def set_geometry(self):
         """ Set GUI geometry """
+        fullscreen = get_config().user_config_dict["fullscreen"]
         scaling_factor = get_config().scaling_factor
-        self.tk.call("tk", "scaling", scaling_factor)
-        width = int(1200 * scaling_factor)
-        height = int(640 * scaling_factor)
-        logger.debug("Geometry: %sx%s", width, height)
-        self.geometry("{}x{}+80+80".format(str(width), str(height)))
+
+        if fullscreen:
+            initial_dimensions = (self.winfo_screenwidth(), self.winfo_screenheight())
+        else:
+            initial_dimensions = (round(1200 * scaling_factor), round(640 * scaling_factor))
+
+        if fullscreen and sys.platform == "win32":
+            self.state('zoomed')
+        elif fullscreen:
+            self.attributes('-zoomed', True)
+        else:
+            self.geometry("{}x{}+80+80".format(str(initial_dimensions[0]),
+                                               str(initial_dimensions[1])))
+        logger.debug("Geometry: %sx%s", *initial_dimensions)
 
     def build_gui(self, debug_console):
         """ Build the GUI """
@@ -62,11 +90,13 @@ class FaceswapGui(tk.Tk):
         self.tk.call('wm', 'iconphoto', self._w, get_images().icons["favicon"])
         self.configure(menu=MainMenuBar(self))
 
-        topcontainer, bottomcontainer = self.add_containers()
+        self.add_containers()
 
-        CommandNotebook(topcontainer)
-        DisplayNotebook(topcontainer)
-        ConsoleOut(bottomcontainer, debug_console)
+        self.objects["command"] = CommandNotebook(self.objects["containers"]["top"])
+        self.objects["display"] = DisplayNotebook(self.objects["containers"]["top"])
+        self.objects["console"] = ConsoleOut(self.objects["containers"]["bottom"], debug_console)
+        self.set_initial_focus()
+        self.set_layout()
         logger.debug("Built GUI")
 
     def add_containers(self):
@@ -74,20 +104,62 @@ class FaceswapGui(tk.Tk):
             hold each main area of the gui """
         logger.debug("Adding containers")
         maincontainer = tk.PanedWindow(self,
-                                       sashrelief=tk.RAISED,
-                                       orient=tk.VERTICAL)
+                                       sashrelief=tk.RIDGE,
+                                       sashwidth=4,
+                                       sashpad=8,
+                                       orient=tk.VERTICAL,
+                                       name="pw_main")
         maincontainer.pack(fill=tk.BOTH, expand=True)
 
         topcontainer = tk.PanedWindow(maincontainer,
-                                      sashrelief=tk.RAISED,
-                                      orient=tk.HORIZONTAL)
+                                      sashrelief=tk.RIDGE,
+                                      sashwidth=4,
+                                      sashpad=8,
+                                      orient=tk.HORIZONTAL,
+                                      name="pw_top")
         maincontainer.add(topcontainer)
 
-        bottomcontainer = ttk.Frame(maincontainer, height=150)
+        bottomcontainer = ttk.Frame(maincontainer, name="frame_bottom")
         maincontainer.add(bottomcontainer)
+        self.objects["containers"] = dict(main=maincontainer,
+                                          top=topcontainer,
+                                          bottom=bottomcontainer)
 
         logger.debug("Added containers")
-        return topcontainer, bottomcontainer
+
+    @staticmethod
+    def set_initial_focus():
+        """ Set the tab focus from settings """
+        config = get_config()
+        tab = config.user_config_dict["tab"]
+        logger.debug("Setting focus for tab: %s", tab)
+        tabs = config.command_tabs
+        if tab in tabs:
+            config.command_notebook.select(tabs[tab])
+        else:
+            tool_tabs = config.tools_command_tabs
+            if tab in tool_tabs:
+                config.command_notebook.select(tabs["tools"])
+                config.command_notebook.tools_notebook.select(tool_tabs[tab])
+        logger.debug("Focus set to: %s", tab)
+
+    def set_layout(self):
+        """ Set initial layout """
+        self.update_idletasks()
+        root = get_config().root
+        config = get_config().user_config_dict
+        r_width = root.winfo_width()
+        r_height = root.winfo_height()
+        w_ratio = config["options_panel_width"] / 100.0
+        h_ratio = 1 - (config["console_panel_height"] / 100.0)
+        width = round(r_width * w_ratio)
+        height = round(r_height * h_ratio)
+        logger.debug("Setting Initial Layout: (root_width: %s, root_height: %s, width_ratio: %s, "
+                     "height_ratio: %s, width: %s, height: %s", r_width, r_height, w_ratio,
+                     h_ratio, width, height)
+        self.objects["containers"]["top"].sash_place(0, width, 1)
+        self.objects["containers"]["main"].sash_place(0, 1, height)
+        self.update_idletasks()
 
     def close_app(self):
         """ Close Python. This is here because the graph
diff --git a/tools/cli.py b/tools/cli.py
index a3586f4..f780e1d 100644
--- a/tools/cli.py
+++ b/tools/cli.py
@@ -11,6 +11,12 @@ from lib.utils import _image_extensions
 class AlignmentsArgs(FaceSwapArgs):
     """ Class to parse the command line arguments for Aligments tool """
 
+    @staticmethod
+    def get_info():
+        """ Return command information """
+        return ("Alignments tool\nThis tool allows you to perform numerous actions on or using an "
+                "alignments file against its corresponding faceset/frame source.")
+
     def get_argument_list(self):
         frames_dir = " Must Pass in a frames folder/source video file (-fr)."
         faces_dir = " Must Pass in a faces folder (-fc)."
@@ -168,6 +174,12 @@ class AlignmentsArgs(FaceSwapArgs):
 
 class PreviewArgs(FaceSwapArgs):
     """ Class to parse the command line arguments for Preview (Convert Settings) tool """
+
+    @staticmethod
+    def get_info():
+        """ Return command information """
+        return "Preview tool\nAllows you to configure your convert settings with a live preview"
+
     def get_argument_list(self):
 
         argument_list = list()
@@ -208,6 +220,11 @@ class PreviewArgs(FaceSwapArgs):
 class EffmpegArgs(FaceSwapArgs):
     """ Class to parse the command line arguments for EFFMPEG tool """
 
+    @staticmethod
+    def get_info():
+        """ Return command information """
+        return "A wrapper for ffmpeg for performing image <> video converting."
+
     @staticmethod
     def __parse_transpose(value):
         index = 0
@@ -235,10 +252,15 @@ class EffmpegArgs(FaceSwapArgs):
                               "default": "extract",
                               "help": "R|Choose which action you want ffmpeg "
                                       "ffmpeg to do."
-                                      "\nL|'slice' cuts a portion of the video "
-                                      "into a separate video file."
-                                      "\nL|'get-fps' returns the chosen video's "
-                                      "fps."})
+                                      "\nL|'extract': turns videos into images "
+                                      "\nL|'gen-vid': turns images into videos "
+                                      "\nL|'get-fps' returns the chosen video's fps."
+                                      "\nL|'get-info' returns information about a video."
+                                      "\nL|'mux-audio' add audio from one video to another."
+                                      "\nL|'rescale' resize video."
+                                      "\nL|'rotate' rotate video."
+                                      "\nL|'slice' cuts a portion of the video into a separate "
+                                      "video file."})
 
         argument_list.append({"opts": ('-i', '--input'),
                               "action": ContextFullPaths,
@@ -424,6 +446,11 @@ class EffmpegArgs(FaceSwapArgs):
 class RestoreArgs(FaceSwapArgs):
     """ Class to restore model files from backup """
 
+    @staticmethod
+    def get_info():
+        """ Return command information """
+        return "A tool for restoring models from backup (.bk) files"
+
     @staticmethod
     def get_argument_list():
         """ Put the arguments in a list so that they are accessible from both argparse and gui """
@@ -440,6 +467,11 @@ class RestoreArgs(FaceSwapArgs):
 class SortArgs(FaceSwapArgs):
     """ Class to parse the command line arguments for sort tool """
 
+    @staticmethod
+    def get_info():
+        """ Return command information """
+        return "Sort faces using a number of different techniques"
+
     @staticmethod
     def get_argument_list():
         """ Put the arguments in a list so that they are accessible from both argparse and gui """
@@ -458,18 +490,6 @@ class SortArgs(FaceSwapArgs):
                               "help": "Output directory for sorted aligned "
                                       "faces."})
 
-        argument_list.append({"opts": ('-k', '--keep'),
-                              "action": 'store_true',
-                              "dest": 'keep_original',
-                              "default": False,
-                              "group": "output",
-                              "help": "Keeps the original files in the input "
-                                      "directory. Be careful when using this "
-                                      "with rename grouping and no specified "
-                                      "output directory as this would keep "
-                                      "the original and renamed files in the "
-                                      "same directory."})
-
         argument_list.append({"opts": ('-s', '--sort-by'),
                               "action": Radio,
                               "type": str,
@@ -477,7 +497,7 @@ class SortArgs(FaceSwapArgs):
                                           "face-yaw", "hist", "hist-dissim"),
                               "dest": 'sort_method',
                               "group": "sort settings",
-                              "default": "hist",
+                              "default": "face",
                               "help": "R|Sort by method. Choose how images are sorted. "
                                       "\nL|'blur': Sort faces by blurriness."
                                       "\nL|'face': Use VGG Face to sort by face similarity. This "
@@ -498,7 +518,17 @@ class SortArgs(FaceSwapArgs):
                                       "\nL|'hist-dissim': Like 'hist' but sorts by "
                                       "dissimilarity."
                                       "\nDefault: hist"})
-
+        argument_list.append({"opts": ('-k', '--keep'),
+                              "action": 'store_true',
+                              "dest": 'keep_original',
+                              "default": False,
+                              "group": "output",
+                              "help": "Keeps the original files in the input "
+                                      "directory. Be careful when using this "
+                                      "with rename grouping and no specified "
+                                      "output directory as this would keep "
+                                      "the original and renamed files in the "
+                                      "same directory."})
         argument_list.append({"opts": ('-t', '--ref_threshold'),
                               "action": Slider,
                               "min_max": (-1.0, 10.0),
diff --git a/tools/preview.py b/tools/preview.py
index fed1bb9..2d11e63 100644
--- a/tools/preview.py
+++ b/tools/preview.py
@@ -115,7 +115,11 @@ class Preview():
 
     def build_ui(self):
         """ Build the UI elements for displaying preview and options """
-        container = tk.PanedWindow(self.root, sashrelief=tk.RAISED, orient=tk.VERTICAL)
+        container = tk.PanedWindow(self.root,
+                                   sashrelief=tk.RIDGE,
+                                   sashwidth=4,
+                                   sashpad=8,
+                                   orient=tk.VERTICAL)
         container.pack(fill=tk.BOTH, expand=True)
         container.preview_display = self.display
         self.image_canvas = ImagesCanvas(container, self.tk_vars)
