commit 2b4ae91b02d0b3b42e2a634c4f432df6d20d3b7c
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Sun Nov 4 12:07:38 2018 +0000

    gui bugfix - termination on extract

diff --git a/lib/gui/wrapper.py b/lib/gui/wrapper.py
index d421006..77a4fc0 100644
--- a/lib/gui/wrapper.py
+++ b/lib/gui/wrapper.py
@@ -10,10 +10,12 @@ import tkinter as tk
 from threading import Thread
 from time import time
 
+import psutil
+
 from .utils import Images
 
 
-class ProcessWrapper(object):
+class ProcessWrapper():
     """ Builds command, launches and terminates the underlying
         faceswap process. Updates GUI display depending on state """
 
@@ -130,7 +132,7 @@ class ProcessWrapper(object):
         print("Process exited.")
 
 
-class FaceswapControl(object):
+class FaceswapControl():
     """ Control the underlying Faceswap tasks """
     __group_processes = ["effmpeg"]
 
@@ -141,8 +143,9 @@ class FaceswapControl(object):
         self.command = None
         self.args = None
         self.process = None
-        self.consoleregex = {"loss": re.compile(r"([a-zA-Z_]+):.*?(\d+\.\d+)"),
-                             "tqdm": re.compile(r"(\d+%|\d+/\d+|\d+:\d+|\d+\.\d+[a-zA-Z/]+)")}
+        self.consoleregex = {
+            "loss": re.compile(r"([a-zA-Z_]+):.*?(\d+\.\d+)"),
+            "tqdm": re.compile(r"(\d+%|\d+/\d+|\d+:\d+|\d+\.\d+[a-zA-Z/]+)")}
 
     def execute_script(self, command, args):
         """ Execute the requested Faceswap Script """
@@ -258,7 +261,9 @@ class FaceswapControl(object):
             try:
                 now = time()
                 if os.name == "nt":
-                    os.kill(self.process.pid, signal.CTRL_BREAK_EVENT)
+                    os.kill(
+                        self.process.pid,
+                        signal.CTRL_BREAK_EVENT) # pylint: disable=no-member
                 else:
                     self.process.send_signal(signal.SIGINT)
                 while True:
@@ -283,18 +288,28 @@ class FaceswapControl(object):
                 print("Killed")
         else:
             print("Terminating Process...")
-            try:
-                self.process.terminate()
-                self.process.wait(timeout=10)
+            children = psutil.Process().children(recursive=True)
+            for child in children:
+                child.terminate()
+            _, alive = psutil.wait_procs(children, timeout=10)
+            if not alive:
                 print("Terminated")
-            except TimeoutExpired:
-                print("Termination timed out. Killing Process...")
-                self.process.kill()
+                return
+
+            print("Termination timed out. Killing Process...")
+            for child in alive:
+                child.kill()
+            _, alive = psutil.wait_procs(alive, timeout=10)
+            if not alive:
                 print("Killed")
+            else:
+                for child in alive:
+                    print("Process {} survived SIGKILL. "
+                          "Giving up".format(child))
 
     def set_final_status(self, returncode):
         """ Set the status bar output based on subprocess return code """
-        if returncode == 0 or returncode == 3221225786:
+        if returncode in (0, 3221225786):
             status = "Ready"
         elif returncode == -15:
             status = "Terminated - {}.py".format(self.command)
diff --git a/requirements.txt b/requirements.txt
index 457db96..98e6209 100755
--- a/requirements.txt
+++ b/requirements.txt
@@ -2,6 +2,7 @@ pathlib==1.0.1
 scandir==1.7
 h5py==2.8.0
 Keras==2.2.4
+psutil
 opencv-python
 scikit-image
 scikit-learn
