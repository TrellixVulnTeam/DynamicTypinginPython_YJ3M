commit 48cfcbaee5a491c68ba7be9f503bb6acb1b118f9
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Mon Feb 11 13:42:50 2019 +0000

    Auto apply rect to hull masks. Some minor convert changes

diff --git a/lib/cli.py b/lib/cli.py
index 4e775d4..8ce3552 100644
--- a/lib/cli.py
+++ b/lib/cli.py
@@ -576,13 +576,12 @@ class ConvertArgs(ExtractConvertArgs):
             "opts": ("-M", "--mask-type"),
             "type": str.lower,
             "dest": "mask_type",
-            "choices": ["rect",
-                        "ellipse",
+            "choices": ["ellipse",
                         "smoothed",
                         "facehull",
-                        "facehull_rect",
                         "dfl",
-                        "cnn"],
+                        #  "cnn",  Removed until implemented
+                        "none"],
             "default": "facehull_rect",
             "help": "R|Mask to use to replace faces."
                     "\nrect: Rectangle around face."
@@ -623,8 +622,8 @@ class ConvertArgs(ExtractConvertArgs):
         argument_list.append({"opts": ("-sh", "--sharpen"),
                               "type": str.lower,
                               "dest": "sharpen_image",
-                              "choices": ["box_filter", "gaussian_filter"],
-                              "default": None,
+                              "choices": ["box_filter", "gaussian_filter", "none"],
+                              "default": "none",
                               "help": "Sharpen the masked facial region of "
                                       "the converted images. Choice of filter "
                                       "to use in sharpening process -- box"
diff --git a/plugins/convert/masked.py b/plugins/convert/masked.py
index f3415b5..ba058fc 100644
--- a/plugins/convert/masked.py
+++ b/plugins/convert/masked.py
@@ -136,7 +136,7 @@ class Convert():
             image_mask = np.concatenate(image_mask, alpha, axis=2)
             frame = np.concatenate(frame, alpha, axis=2)
 
-        if self.args.sharpen_image is not None:
+        if self.args.sharpen_image is not None and self.args.sharpen_image.lower() != "none":
             np.clip(masked, 0.0, 255.0, out=masked)
             if self.args.sharpen_image == "box_filter":
                 kernel = np.ones((3, 3)) * (-1)
@@ -294,6 +294,10 @@ class Mask():
         return mask
 
     def rect(self, **kwargs):
+        """ Namespace for rect mask. This is the same as 'none' in the cli """
+        return self.none(**kwargs)
+
+    def none(self, **kwargs):
         """ Rect Mask """
         logger.trace("Getting mask")
         interpolator = kwargs["interpolators"][1]
@@ -315,6 +319,7 @@ class Mask():
         logger.trace("Getting mask")
         dummy = np.zeros((kwargs["image_size"][1], kwargs["image_size"][0], 3), dtype='float32')
         mask = dfl_full(kwargs["landmarks"], dummy, channels=3)
+        mask = self.intersect_rect(mask, **kwargs)
         return mask
 
     def facehull(self, **kwargs):
@@ -327,14 +332,7 @@ class Mask():
                            hull,
                            (1.0, 1.0, 1.0),
                            lineType=cv2.LINE_AA)  # pylint: disable=no-member
-        return mask
-
-    def facehull_rect(self, **kwargs):
-        """ Facehull Rect Mask """
-        logger.trace("Getting mask")
-        mask = self.rect(**kwargs)
-        hull_mask = self.facehull(**kwargs)
-        mask *= hull_mask
+        mask = self.intersect_rect(mask, **kwargs)
         return mask
 
     def ellipse(self, **kwargs):
@@ -349,6 +347,13 @@ class Mask():
                     thickness=-1)
         return mask
 
+    def intersect_rect(self, hull_mask, **kwargs):
+        """ Intersect the given hull mask with the roi """
+        logger.trace("Intersecting rect")
+        mask = self.rect(**kwargs)
+        mask *= hull_mask
+        return mask
+
     @staticmethod
     def finalize_mask(mask):
         """ Finalize the mask """
