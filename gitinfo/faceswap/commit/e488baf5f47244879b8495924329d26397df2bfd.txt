commit e488baf5f47244879b8495924329d26397df2bfd
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Fri Oct 25 17:25:06 2019 +0000

    Mask Updates
    
    - Remove storage of original frame_dims from alignments file
    - Require frame dims to be passed in to faces_detect.Mask when requesting full frame mask
    - Create copy of read only mask when adding blurring/threshold

diff --git a/lib/faces_detect.py b/lib/faces_detect.py
index 84ba7cf..8244189 100644
--- a/lib/faces_detect.py
+++ b/lib/faces_detect.py
@@ -118,7 +118,7 @@ class DetectedFace():
         """ float: The ratio of padding to add for training images """
         return 0.375
 
-    def add_mask(self, name, mask, affine_matrix, frame_dims, interpolator, storage_size=128):
+    def add_mask(self, name, mask, affine_matrix, interpolator, storage_size=128):
         """ Add a :class:`Mask` to this detected face
 
         The mask should be the original output from  :mod:`plugins.extract.mask`
@@ -135,17 +135,15 @@ class DetectedFace():
             It should be in the range 0.0 - 1.0 ideally with a ``dtype`` of ``float32``
         affine_matrix: numpy.ndarray
             The transformation matrix required to transform the mask to the original frame.
-        frame_dims: tuple
-            The `(height, width)` dimensions of the original frame that this mask was created from.
         interpolator, int:
-            The CV2 interpolator required to transform this mask to it's original frame
+            The CV2 interpolator required to transform this mask to it's original frame.
         storage_size, int (optional):
-            The size the mask is to be stored at.
+            The size the mask is to be stored at. Default: 128
         """
-        logger.trace("name: '%s', mask shape: %s, affine_matrix: %s, frame_dims: %s, "
-                     "interpolator: %s", name, mask.shape, affine_matrix, frame_dims, interpolator)
+        logger.trace("name: '%s', mask shape: %s, affine_matrix: %s, interpolator: %s)",
+                     name, mask.shape, affine_matrix, interpolator)
         fsmask = Mask(storage_size=storage_size)
-        fsmask.add(mask, affine_matrix, frame_dims, interpolator)
+        fsmask.add(mask, affine_matrix, interpolator)
         self.mask[name] = fsmask
 
     def to_alignment(self):
@@ -519,7 +517,6 @@ class Mask():
 
         self._mask = None
         self._affine_matrix = None
-        self._frame_dims = None
         self._interpolator = None
 
         self._blur_kernel = 0
@@ -531,6 +528,8 @@ class Mask():
         and threshold amount applied."""
         dims = (self.stored_size, self.stored_size, 1)
         mask = np.frombuffer(decompress(self._mask), dtype="uint8").reshape(dims)
+        if self._threshold != 0.0 or self._blur_kernel != 0:
+            mask = mask.copy()
         if self._threshold != 0.0:
             mask[mask < self._threshold] = 0.0
             mask[mask > 255.0 - self._threshold] = 255.0
@@ -539,13 +538,24 @@ class Mask():
         logger.trace("mask shape: %s", mask.shape)
         return mask
 
-    @property
-    def full_frame_mask(self):
-        """ numpy.ndarray: The mask affined to the original full frame """
-        frame = np.zeros(self._frame_dims + (1, ), dtype="uint8")
+    def get_full_frame_mask(self, width, height):
+        """ Return the stored mask in a full size frame of the given dimensions
+
+        Parameters
+        ----------
+        width: int
+            The width of the original frame that the mask was extracted from
+        height: int
+            The height of the original frame that the mask was extracted from
+
+        Returns
+        -------
+        numpy.ndarray: The mask affined to the original full frame of the given dimensions
+        """
+        frame = np.zeros((width, height, 1), dtype="uint8")
         mask = cv2.warpAffine(self.mask,
                               self._affine_matrix,
-                              self._frame_dims,
+                              (width, height),
                               frame,
                               flags=cv2.WARP_INVERSE_MAP | self._interpolator,
                               borderMode=cv2.BORDER_CONSTANT)
@@ -553,7 +563,7 @@ class Mask():
                      mask.shape, mask.dtype, mask.min(), mask.max())
         return mask
 
-    def add(self, mask, affine_matrix, frame_dims, interpolator):
+    def add(self, mask, affine_matrix, interpolator):
         """ Add a Faceswap mask to this :class:`Mask`.
 
         The mask should be the original output from  :mod:`plugins.extract.mask`
@@ -565,16 +575,13 @@ class Mask():
             It should be in the range 0.0 - 1.0 ideally with a ``dtype`` of ``float32``
         affine_matrix: numpy.ndarray
             The transformation matrix required to transform the mask to the original frame.
-        frame_dims: tuple
-            The `(height, width)` dimensions of the original frame that this mask was created from.
-        interpolator:
+        interpolator, int:
             The CV2 interpolator required to transform this mask to it's original frame
         """
         logger.trace("mask shape: %s, mask dtype: %s, mask min: %s, mask max: %s, "
-                     "affine_matrix: %s, frame_dims: %s, interpolator: %s", mask.shape, mask.dtype,
-                     mask.min(), mask.max(), affine_matrix, frame_dims, interpolator)
+                     "affine_matrix: %s, interpolator: %s)", mask.shape, mask.dtype, mask.min(),
+                     mask.max(), interpolator)
         self._affine_matrix = self._adjust_affine_matrix(mask.shape[0], affine_matrix)
-        self._frame_dims = frame_dims
         self._interpolator = interpolator
         mask = (cv2.resize(mask,
                            (self.stored_size, self.stored_size),
@@ -627,10 +634,10 @@ class Mask():
         -------
         dict:
             The :class:`Mask` for saving to an alignments file. Contains the keys ``mask``,
-            ``affine_matrix``, ``frame_dims``, ``interpolator``, ``stored_size``
+            ``affine_matrix``, ``interpolator``, ``stored_size``
         """
         retval = dict()
-        for key in ("mask", "affine_matrix", "frame_dims", "interpolator", "stored_size"):
+        for key in ("mask", "affine_matrix", "interpolator", "stored_size"):
             retval[key] = getattr(self, self._attr_name(key))
         logger.trace({k: v if k != "mask" else type(v) for k, v in retval.items()})
         return retval
@@ -642,9 +649,9 @@ class Mask():
         ----------
         mask_dict: dict
             A dictionary stored in an alignments file containing the keys ``mask``,
-            ``affine_matrix``, ``frame_dims``, ``interpolator``, ``stored_size``
+            ``affine_matrix``, ``interpolator``, ``stored_size``
         """
-        for key in ("mask", "affine_matrix", "frame_dims", "interpolator", "stored_size"):
+        for key in ("mask", "affine_matrix", "interpolator", "stored_size"):
             setattr(self, self._attr_name(key), mask_dict[key])
             logger.trace("%s - %s", key, mask_dict[key] if key != "mask" else type(mask_dict[key]))
 
diff --git a/plugins/extract/mask/_base.py b/plugins/extract/mask/_base.py
index e76d159..da15912 100644
--- a/plugins/extract/mask/_base.py
+++ b/plugins/extract/mask/_base.py
@@ -194,7 +194,6 @@ class Masker(Extractor):  # pylint:disable=abstract-method
             face.add_mask(self._storage_name,
                           mask,
                           face.feed_matrix,
-                          (face.image.shape[1], face.image.shape[0]),
                           face.feed_interpolators[1],
                           storage_size=self._storage_size)
             face.feed = dict()
