commit 9265b64fd27b4f1f030e53fee9e9440af4cd9be8
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Tue Jun 25 18:01:51 2019 +0000

    GUI Fixups
    
    - Analysis: Handle missing session Ids
    - Analysis: Handle invalid data selections
    - Analysis: Don't update graph on check box selection
    - Analysis: Add cursor events to analysis tab
    - Analysis: Change default graph view
    - Training: Prevent GUI from attempting to close graphs which do not exist
    - Extract/Convert: Make file extensions case-insensitive for preview
    - Progress bar: Make compatible for downloads
    - Progress bar: Add TQDM Description to progress bar stats text

diff --git a/lib/gui/display_analysis.py b/lib/gui/display_analysis.py
index de759a6..f96f96e 100644
--- a/lib/gui/display_analysis.py
+++ b/lib/gui/display_analysis.py
@@ -60,15 +60,18 @@ class Analysis(DisplayPage):  # pylint: disable=too-many-ancestors
     def load_session(self):
         """ Load previously saved sessions """
         logger.debug("Loading session")
+        get_config().set_cursor_busy()
         self.clear_session()
         fullpath = FileHandler("filename", "state").retfile
         if not fullpath:
+            get_config().set_cursor_default()
             return
         logger.debug("state_file: '%s'", fullpath)
         model_dir, state_file = os.path.split(fullpath)
         logger.debug("model_dir: '%s'", model_dir)
         model_name = self.get_model_name(model_dir, state_file)
         if not model_name:
+            get_config().set_cursor_default()
             return
         self.session = Session(model_dir=model_dir, model_name=model_name)
         self.session.initialize_session(is_training=False)
@@ -76,6 +79,7 @@ class Analysis(DisplayPage):  # pylint: disable=too-many-ancestors
         if len(msg) > 70:
             msg = "...{}".format(msg[-70:])
         self.set_session_summary(msg)
+        get_config().set_cursor_default()
 
     @staticmethod
     def get_model_name(model_dir, state_file):
@@ -92,17 +96,20 @@ class Analysis(DisplayPage):  # pylint: disable=too-many-ancestors
     def reset_session(self):
         """ Reset currently training sessions """
         logger.debug("Reset current training session")
+        get_config().set_cursor_busy()
         self.clear_session()
-        session = get_config().session
+        session = get_config()().session
         if not session.initialized:
             logger.debug("Training not running")
             print("Training not running")
+            get_config().set_cursor_default()
             return
         msg = "Currently running training session"
         self.session = session
         # Reload the state file to get approx currently training iterations
         self.session.load_state_file()
         self.set_session_summary(msg)
+        get_config().set_cursor_default()
 
     def set_session_summary(self, message):
         """ Set the summary data and info message """
@@ -123,13 +130,16 @@ class Analysis(DisplayPage):  # pylint: disable=too-many-ancestors
     def save_session(self):
         """ Save sessions stats to csv """
         logger.debug("Saving session")
+        get_config().set_cursor_busy()
         if not self.summary:
             logger.debug("No summary data loaded. Nothing to save")
             print("No summary data loaded. Nothing to save")
+            get_config().set_cursor_default()
             return
         savefile = FileHandler("save", "csv").retfile
         if not savefile:
             logger.debug("No save file. Returning")
+            get_config().set_cursor_default()
             return
 
         write_dicts = [val for val in self.summary.values()]
@@ -141,6 +151,7 @@ class Analysis(DisplayPage):  # pylint: disable=too-many-ancestors
             csvout.writeheader()
             for row in write_dicts:
                 csvout.writerow(row)
+        get_config().set_cursor_default()
 
 
 class Options():
@@ -264,7 +275,10 @@ class StatsData(ttk.Frame):  # pylint: disable=too-many-ancestors
 
         for item in sessions_summary:
             values = [item[column] for column in self.columns]
-            kwargs = {"values": values, "image": get_images().icons["graph"]}
+            kwargs = {"values": values}
+            if self.check_valid_data(values):
+                # Don't show graph icon for non-existent sessions
+                kwargs["image"] = get_images().icons["graph"]
             if values[0] == "Total":
                 kwargs["tags"] = "total"
             self.tree.insert("", "end", **kwargs)
@@ -284,18 +298,39 @@ class StatsData(ttk.Frame):  # pylint: disable=too-many-ancestors
         if values:
             logger.debug("Selected values: %s", values)
             self.selected_id.set(values[0])
-            if region == "tree":
-                self.data_popup()
+            if region == "tree" and self.check_valid_data(values):
+                datapoints = int(values[self.columns.index("iterations")])
+                self.data_popup(datapoints)
+
+    def check_valid_data(self, values):
+        """ Check there is valid data available for popping up a graph """
+        col_indices = [self.columns.index("batch"), self.columns.index("iterations")]
+        for idx in col_indices:
+            if (isinstance(values[idx], int) or values[idx].isdigit()) and int(values[idx]) == 0:
+                logger.warning("No data to graph for selected session")
+                return False
+        return True
+
+    def data_popup(self, datapoints):
+        """ Pop up a window and control it's position
 
-    def data_popup(self):
-        """ Pop up a window and control it's position """
+            The default view is rolling average over 500 points.
+            If there are fewer data points than this, switch the default
+            to raw
+        """
+        get_config().set_cursor_busy()
+        get_config().root.update_idletasks()
         logger.debug("Popping up data window")
         scaling_factor = get_config().scaling_factor
         toplevel = SessionPopUp(self.session.modeldir,
                                 self.session.modelname,
-                                self.selected_id.get())
+                                self.selected_id.get(),
+                                datapoints)
         toplevel.title(self.data_popup_title())
-        toplevel.tk.call('wm', 'iconphoto', toplevel._w, get_images().icons["favicon"])
+        toplevel.tk.call(
+            'wm',
+            'iconphoto',
+            toplevel._w, get_images().icons["favicon"])  # pylint:disable=protected-access
         position = self.data_popup_get_position()
         height = int(720 * scaling_factor)
         width = int(400 * scaling_factor)
@@ -304,6 +339,7 @@ class StatsData(ttk.Frame):  # pylint: disable=too-many-ancestors
                                                str(position[0]),
                                                str(position[1])))
         toplevel.update()
+        get_config().set_cursor_default()
 
     def data_popup_title(self):
         """ Set the data popup title """
@@ -345,11 +381,14 @@ class StatsData(ttk.Frame):  # pylint: disable=too-many-ancestors
 
 class SessionPopUp(tk.Toplevel):
     """ Pop up for detailed graph/stats for selected session """
-    def __init__(self, model_dir, model_name, session_id):
-        logger.debug("Initializing: %s: (model_dir: %s, model_name: %s, session_id: %s)",
-                     self.__class__.__name__, model_dir, model_name, session_id)
+    def __init__(self, model_dir, model_name, session_id, datapoints):
+        logger.debug("Initializing: %s: (model_dir: %s, model_name: %s, session_id: %s, "
+                     "datapoints: %s)", self.__class__.__name__, model_dir, model_name, session_id,
+                     datapoints)
         super().__init__()
 
+        self.default_avg = 500
+        self.default_view = "avg" if datapoints > self.default_avg * 2 else "raw"
         self.session_id = session_id
         self.session = Session(model_dir=model_dir, model_name=model_name)
         self.initialize_session()
@@ -455,9 +494,9 @@ class SessionPopUp(tk.Toplevel):
                 text = "Show {}".format(item.title())
             var = tk.BooleanVar()
 
-            if item == "raw":
+            if item == self.default_view:
                 var.set(True)
-            var.trace("w", self.optbtn_reset)
+
             self.vars[item] = var
 
             ctl = ttk.Checkbutton(frame, variable=var, text=text)
@@ -476,8 +515,8 @@ class SessionPopUp(tk.Toplevel):
             text = loss_key.replace("_", " ").title()
             helptext = "Display {}".format(text)
             var = tk.BooleanVar()
-            var.set(True)
-            var.trace("w", self.optbtn_reset)
+            if loss_key.startswith("loss"):
+                var.set(True)
             lk_vars[loss_key] = var
 
             if len(loss_keys) == 1:
@@ -497,7 +536,7 @@ class SessionPopUp(tk.Toplevel):
         for item in ("avgiterations", ):
             if item == "avgiterations":
                 text = "Iterations to Average:"
-                default = "10"
+                default = "500"
 
             entframe = ttk.Frame(frame)
             entframe.pack(fill=tk.X, pady=5, padx=5, side=tk.TOP)
@@ -603,6 +642,7 @@ class SessionPopUp(tk.Toplevel):
         selections = self.selections_to_list()
 
         if not self.check_valid_selection(loss_keys, selections):
+            logger.warning("No data to display. Not refreshing")
             return False
         self.display_data = Calculations(session=self.session,
                                          display=self.vars["display"].get(),
@@ -611,6 +651,9 @@ class SessionPopUp(tk.Toplevel):
                                          avg_samples=self.vars["avgiterations"].get(),
                                          flatten_outliers=self.vars["outliers"].get(),
                                          is_totals=self.is_totals)
+        if not self.check_valid_data():
+            logger.warning("No valid data to display. Not refreshing")
+            return False
         logger.debug("Compiled Display Data")
         return True
 
@@ -620,9 +663,17 @@ class SessionPopUp(tk.Toplevel):
         logger.debug("Validating selection. (loss_keys: %s, selections: %s, display: %s)",
                      loss_keys, selections, display)
         if not selections or (display == "loss" and not loss_keys):
-            msg = "No data to display. Not refreshing"
-            logger.debug(msg)
-            print(msg)
+            return False
+        return True
+
+    def check_valid_data(self):
+        """ Check that the selections holds valid data to display
+            NB: len-as-condition is used as data could be a list or a numpy array
+        """
+        logger.debug("Validating data. %s",
+                     {key: len(val) for key, val in self.display_data.stats.items()})
+        if any(len(val) == 0  # pylint:disable=len-as-condition
+               for val in self.display_data.stats.values()):
             return False
         return True
 
diff --git a/lib/gui/display_command.py b/lib/gui/display_command.py
index ac23e10..804c554 100644
--- a/lib/gui/display_command.py
+++ b/lib/gui/display_command.py
@@ -237,6 +237,9 @@ class GraphDisplay(DisplayOptionalPage):  # pylint: disable=too-many-ancestors
 
     def close(self):
         """ Clear the plots from RAM """
+        if self.subnotebook is None:
+            logger.debug("No graphs to clear. Returning")
+            return
         for name, graph in self.subnotebook.children.items():
             logger.debug("Clearing: %s", name)
             graph.clear()
diff --git a/lib/gui/stats.py b/lib/gui/stats.py
index bd7dce9..6985bbe 100644
--- a/lib/gui/stats.py
+++ b/lib/gui/stats.py
@@ -163,7 +163,7 @@ class Session():
     @property
     def session(self):
         """ Return current session dictionary """
-        return self.state["sessions"][str(self.session_id)]
+        return self.state["sessions"].get(str(self.session_id), dict())
 
     @property
     def session_ids(self):
@@ -239,7 +239,11 @@ class Session():
 
     def get_iterations_for_session(self, session_id):
         """ Return the number of iterations for the given session id """
-        return self.state["sessions"][str(session_id)]["iterations"]
+        session = self.state["sessions"].get(str(session_id), None)
+        if session is None:
+            logger.warning("No session data found for session id: %s", session_id)
+            return 0
+        return session["iterations"]
 
 
 class SessionsSummary():
@@ -267,7 +271,7 @@ class SessionsSummary():
         for sess_idx, ts_data in self.time_stats.items():
             iterations = self.session.get_iterations_for_session(sess_idx)
             elapsed = ts_data["end_time"] - ts_data["start_time"]
-            batchsize = self.session.total_batchsize[sess_idx]
+            batchsize = self.session.total_batchsize.get(sess_idx, 0)
             compiled.append({"session": sess_idx,
                              "start": ts_data["start_time"],
                              "end": ts_data["end_time"],
diff --git a/lib/gui/statusbar.py b/lib/gui/statusbar.py
index 45aff6c..f6bdb0e 100644
--- a/lib/gui/statusbar.py
+++ b/lib/gui/statusbar.py
@@ -47,7 +47,7 @@ class StatusBar(ttk.Frame):  # pylint: disable=too-many-ancestors
         pbar = ttk.Progressbar(progressframe,
                                length=200,
                                variable=self.pbar_position,
-                               maximum=1000,
+                               maximum=100,
                                mode="determinate")
         pbar.pack(side=tk.LEFT, padx=2, fill=tk.X, expand=True)
         pbar.pack_forget()
@@ -73,7 +73,7 @@ class StatusBar(ttk.Frame):  # pylint: disable=too-many-ancestors
             self.pbar.start()
         else:
             self.pbar.stop()
-            self.pbar.config(maximum=1000)
+            self.pbar.config(maximum=100)
 
     def progress_update(self, message, position, update_position=True):
         """ Update the GUIs progress bar and position """
diff --git a/lib/gui/utils.py b/lib/gui/utils.py
index f04b266..0733e97 100644
--- a/lib/gui/utils.py
+++ b/lib/gui/utils.py
@@ -19,14 +19,15 @@ _CONFIG = None
 _IMAGES = None
 
 
-def initialize_config(cli_opts, scaling_factor, pathcache, statusbar, session):
+def initialize_config(root, cli_opts, scaling_factor, pathcache, statusbar, session):
     """ Initialize the config and add to global constant """
     global _CONFIG  # pylint: disable=global-statement
     if _CONFIG is not None:
         return
-    logger.debug("Initializing config: (cli_opts: %s, tk_vars: %s, pathcache: %s, statusbar: %s, "
-                 "session: %s)", cli_opts, scaling_factor, pathcache, statusbar, session)
-    _CONFIG = Config(cli_opts, scaling_factor, pathcache, statusbar, session)
+    logger.debug("Initializing config: (root: %s, cli_opts: %s, tk_vars: %s, pathcache: %s, "
+                 "statusbar: %s, session: %s)", root, cli_opts, scaling_factor, pathcache,
+                 statusbar, session)
+    _CONFIG = Config(root, cli_opts, scaling_factor, pathcache, statusbar, session)
 
 
 def get_config():
@@ -274,7 +275,7 @@ class Images():
             logger.debug("Folder does not exist")
             return None
         files = [os.path.join(imgpath, f)
-                 for f in os.listdir(imgpath) if f.endswith((".png", ".jpg"))]
+                 for f in os.listdir(imgpath) if f.lower().endswith((".png", ".jpg"))]
         logger.trace("Image files: %s", files)
         return files
 
@@ -537,10 +538,11 @@ class Config():
         Don't call directly. Call get_config()
     """
 
-    def __init__(self, cli_opts, scaling_factor, pathcache, statusbar, session):
-        logger.debug("Initializing %s: (cli_opts: %s, scaling_factor: %s, pathcache: %s, "
-                     "statusbar: %s, session: %s)", self.__class__.__name__, cli_opts,
+    def __init__(self, root, cli_opts, scaling_factor, pathcache, statusbar, session):
+        logger.debug("Initializing %s: (root %s, cli_opts: %s, scaling_factor: %s, pathcache: %s, "
+                     "statusbar: %s, session: %s)", self.__class__.__name__, root, cli_opts,
                      scaling_factor, pathcache, statusbar, session)
+        self.root = root
         self.cli_opts = cli_opts
         self.scaling_factor = scaling_factor
         self.pathcache = pathcache
@@ -563,6 +565,16 @@ class Config():
         return {self.command_notebook.tools_notebook.tab(tab_id, "text").lower(): tab_id
                 for tab_id in range(0, self.command_notebook.tools_notebook.index("end"))}
 
+    def set_cursor_busy(self):
+        """ Set the root cursor to busy """
+        logger.trace("Setting cursor to busy")
+        self.root.config(cursor="watch")
+
+    def set_cursor_default(self):
+        """ Set the root cursor to default """
+        logger.trace("Setting cursor to default")
+        self.root.config(cursor="")
+
     @staticmethod
     def set_tk_vars():
         """ TK Variables to be triggered by to indicate
diff --git a/lib/gui/wrapper.py b/lib/gui/wrapper.py
index f56c961..64cf879 100644
--- a/lib/gui/wrapper.py
+++ b/lib/gui/wrapper.py
@@ -14,7 +14,7 @@ import psutil
 from .utils import get_config, get_images
 
 if os.name == "nt":
-    import win32console
+    import win32console  # pylint: disable=import-error
 
 
 logger = logging.getLogger(__name__)  # pylint: disable=invalid-name
@@ -144,7 +144,7 @@ class FaceswapControl():
         self.train_stats = {"iterations": 0, "timestamp": None}
         self.consoleregex = {
             "loss": re.compile(r"([a-zA-Z_]+):.*?(\d+\.\d+)"),
-            "tqdm": re.compile(r".*?(?P<pct>\d+%).*?(?P<itm>\d+/\d+)\W\["
+            "tqdm": re.compile(r"(?P<dsc>.*?)(?P<pct>\d+%).*?(?P<itm>\S+/\S+)\W\["
                                r"(?P<tme>\d+:\d+<.*),\W(?P<rte>.*)[a-zA-Z/]*\]"),
             "ffmpeg": re.compile(r"([a-zA-Z]+)=\s*(-?[\d|N/A]\S+)")}
         logger.debug("Initialized %s", self.__class__.__name__)
@@ -296,15 +296,18 @@ class FaceswapControl():
         if any("?" in val for val in tqdm.values()):
             logger.trace("tqdm initializing. Skipping")
             return True
+        description = tqdm["dsc"].strip()
+        description = description if description == "" else "{}  |  ".format(description[:-1])
         processtime = "Elapsed: {}  Remaining: {}".format(tqdm["tme"].split("<")[0],
                                                           tqdm["tme"].split("<")[1])
-        message = "{}  |  {}  |  {}  |  {}".format(processtime,
-                                                   tqdm["rte"],
-                                                   tqdm["itm"],
-                                                   tqdm["pct"])
-
-        current, total = tqdm["itm"].split("/")
-        position = int((float(current) / float(total)) * 1000)
+        message = "{}{}  |  {}  |  {}  |  {}".format(description,
+                                                     processtime,
+                                                     tqdm["rte"],
+                                                     tqdm["itm"],
+                                                     tqdm["pct"])
+
+        position = tqdm["pct"].replace("%", "")
+        position = int(position) if position.isdigit() else 0
 
         self.statusbar.progress_update(message, position, True)
         logger.trace("Succesfully captured tqdm message: %s", message)
diff --git a/lib/utils.py b/lib/utils.py
index a4e2c0f..dd20d73 100644
--- a/lib/utils.py
+++ b/lib/utils.py
@@ -479,7 +479,11 @@ class GetModel():
         length = sum(f.file_size for f in zip_file.infolist())
         fnames = zip_file.namelist()
         self.logger.debug("Zipfile: Filenames: %s, Total Size: %s", fnames, length)
-        pbar = tqdm(desc="Extracting", unit="B", total=length, unit_scale=True, unit_divisor=1024)
+        pbar = tqdm(desc="Decompressing",
+                    unit="B",
+                    total=length,
+                    unit_scale=True,
+                    unit_divisor=1024)
         for fname in fnames:
             out_fname = os.path.join(self.cache_dir, fname)
             self.logger.debug("Extracting from: '%s' to '%s'", self._model_zip_path, out_fname)
diff --git a/scripts/gui.py b/scripts/gui.py
index da2b815..cc44210 100644
--- a/scripts/gui.py
+++ b/scripts/gui.py
@@ -36,7 +36,7 @@ class FaceswapGui(tk.Tk):
         pathcache = os.path.join(pathscript, "lib", "gui", ".cache")
         statusbar = StatusBar(self)
         session = Session()
-        initialize_config(cliopts, scaling_factor, pathcache, statusbar, session)
+        initialize_config(self, cliopts, scaling_factor, pathcache, statusbar, session)
         initialize_images()
 
     def get_scaling(self):
