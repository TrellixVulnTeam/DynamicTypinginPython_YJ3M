commit 6ac422ac27b4c5bf93a2044e17e5fbde1b9ebfcb
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Thu Jun 13 15:22:56 2019 +0000

    Extraction Improvements
    
    Default to parallel processing
    Add Image normalization options for aligners

diff --git a/lib/cli.py b/lib/cli.py
index 01b7548..730c923 100644
--- a/lib/cli.py
+++ b/lib/cli.py
@@ -520,6 +520,21 @@ class ExtractArgs(ExtractConvertArgs):
                     " and time is important."
                     "\nL|'fan': Face Alignment Network. Best aligner. "
                     "GPU heavy, slow when not running on GPU"})
+        argument_list.append({"opts": ("-nm", "--normalization"),
+                              "action": Radio,
+                              "type": str.lower,
+                              "dest": "normalization",
+                              "choices": ["none", "clahe", "hist", "mean"],
+                              "default": "none",
+                              "help": "R|Performing normalization can help the aligner better "
+                                      "align faces with difficult lighting conditions at an "
+                                      "extraction speed cost. Different methods will yield "
+                                      "different results on different sets."
+                                      "\nL|'none': Don't perform normalization on the face."
+                                      "\nL|`clahe`: Perform Contrast Limited Adaptive Histogram "
+                                      "Equalization on the face."
+                                      "\nL|'hist': Equalize the histograms on the RGB channels."
+                                      "\nL|'mean': Normalize the face colors to the mean."})
         argument_list.append({"opts": ("-r", "--rotate-images"),
                               "type": str,
                               "dest": "rotate_images",
@@ -542,15 +557,13 @@ class ExtractArgs(ExtractConvertArgs):
                                       "threshold. Discarded images are moved into a \"blurry\" "
                                       "sub-folder. Lower values allow more blur. Set to 0.0 to "
                                       "turn off."})
-        argument_list.append({"opts": ("-mp", "--multiprocess"),
+        argument_list.append({"opts": ("-sp", "--singleprocess"),
                               "action": "store_true",
                               "default": False,
-                              "help": "Run extraction in parallel. Offers "
-                                      "speed up for some extractor/detector "
-                                      "combinations, less so for others. "
-                                      "Only has an effect if both the "
-                                      "aligner and detector use the GPU, "
-                                      "otherwise this is automatic."})
+                              "help": "Don't run extraction in parallel. Will run detection first "
+                                      "then alignment (2 passes). Useful if VRAM is at a premium. "
+                                      "Only has an effect if both the aligner and detector use "
+                                      "the GPU, otherwise this is automatically off."})
         argument_list.append({"opts": ("-sz", "--size"),
                               "type": int,
                               "action": Slider,
diff --git a/plugins/extract/align/_base.py b/plugins/extract/align/_base.py
index dd3c12a..2f4f902 100644
--- a/plugins/extract/align/_base.py
+++ b/plugins/extract/align/_base.py
@@ -34,13 +34,14 @@ logger = logging.getLogger(__name__)  # pylint:disable=invalid-name
 
 class Aligner():
     """ Landmarks Aligner Object """
-    def __init__(self, loglevel, configfile=None,
+    def __init__(self, loglevel, configfile=None, normalize_method=None,
                  git_model_id=None, model_filename=None, colorspace="BGR", input_size=256):
-        logger.debug("Initializing %s: (loglevel: %s, configfile: %s, git_model_id: %s, "
-                     "model_filename: '%s', colorspace: '%s'. input_size: %s)",
-                     self.__class__.__name__, loglevel, configfile, git_model_id, model_filename,
-                     colorspace, input_size)
+        logger.debug("Initializing %s: (loglevel: %s, configfile: %s, normalize_method: %s, "
+                     "git_model_id: %s, model_filename: '%s', colorspace: '%s'. input_size: %s)",
+                     self.__class__.__name__, loglevel, configfile, normalize_method, git_model_id,
+                     model_filename, colorspace, input_size)
         self.loglevel = loglevel
+        self.normalize_method = normalize_method
         self.colorspace = colorspace.upper()
         self.input_size = input_size
         self.extract = Extract()
@@ -161,12 +162,49 @@ class Aligner():
         retval = list()
         for detected_face in detected_faces:
             feed_dict = self.align_image(detected_face, image)
+            self.normalize_face(feed_dict)
             landmarks = self.predict_landmarks(feed_dict)
             retval.append(landmarks)
         logger.trace("Processed landmarks: %s", retval)
         return retval
 
-    # <<< FINALIZE METHODS>>> #
+    # <<< FACE NORMALIZATION METHODS >>> #
+    def normalize_face(self, feed_dict):
+        """ Normalize the face for feeding into model """
+        if self.normalize_method is None:
+            return
+        logger.trace("Normalizing face")
+        meth = getattr(self, "normalize_{}".format(self.normalize_method.lower()))
+        feed_dict["image"] = meth(feed_dict["image"])
+        logger.trace("Normalized face")
+
+    @staticmethod
+    def normalize_mean(face):
+        """ Normalize Face to the Mean """
+        face = face / 255.0
+        for chan in range(3):
+            layer = face[:, :, chan]
+            layer = (layer - layer.min()) / (layer.max() - layer.min())
+            face[:, :, chan] = layer
+        return face * 255.0
+
+    @staticmethod
+    def normalize_hist(face):
+        """ Equalize the RGB histogram channels """
+        for chan in range(3):
+            face[:, :, chan] = cv2.equalizeHist(face[:, :, chan])  # pylint: disable=no-member
+        return face
+
+    @staticmethod
+    def normalize_clahe(face):
+        """ Perform Contrast Limited Adaptive Histogram Equalization """
+        clahe = cv2.createCLAHE(clipLimit=2.0,  # pylint: disable=no-member
+                                tileGridSize=(4, 4))
+        for chan in range(3):
+            face[:, :, chan] = clahe.apply(face[:, :, chan])
+        return face
+
+    # <<< FINALIZE METHODS >>> #
     def finalize(self, output):
         """ This should be called as the final task of each plugin
             aligns faces and puts to the out queue """
diff --git a/plugins/extract/pipeline.py b/plugins/extract/pipeline.py
index e926c6e..8583893 100644
--- a/plugins/extract/pipeline.py
+++ b/plugins/extract/pipeline.py
@@ -23,14 +23,16 @@ class Extractor():
             Extractor.input_queue
     """
     def __init__(self, detector, aligner, loglevel,
-                 configfile=None, multiprocess=False, rotate_images=None, min_size=20):
+                 configfile=None, multiprocess=False, rotate_images=None, min_size=20,
+                 normalize_method=None):
         logger.debug("Initializing %s: (detector: %s, aligner: %s, loglevel: %s, configfile: %s, "
-                     "multiprocess: %s, rotate_images: %s, min_size: %s)", self.__class__.__name__,
-                     detector, aligner, loglevel, configfile, multiprocess, rotate_images,
-                     min_size)
+                     "multiprocess: %s, rotate_images: %s, min_size: %s, "
+                     "normalize_method: %s)", self.__class__.__name__, detector, aligner,
+                     loglevel, configfile, multiprocess, rotate_images, min_size,
+                     normalize_method)
         self.phase = "detect"
         self.detector = self.load_detector(detector, loglevel, rotate_images, min_size, configfile)
-        self.aligner = self.load_aligner(aligner, loglevel, configfile)
+        self.aligner = self.load_aligner(aligner, loglevel, configfile, normalize_method)
         self.is_parallel = self.set_parallel_processing(multiprocess)
         self.processes = list()
         self.queues = self.add_queues()
@@ -81,11 +83,13 @@ class Extractor():
         return detector
 
     @staticmethod
-    def load_aligner(aligner, loglevel, configfile):
+    def load_aligner(aligner, loglevel, configfile, normalize_method):
         """ Set global arguments and load aligner plugin """
         aligner_name = aligner.replace("-", "_").lower()
         logger.debug("Loading Aligner: '%s'", aligner_name)
-        aligner = PluginLoader.get_aligner(aligner_name)(loglevel=loglevel, configfile=configfile)
+        aligner = PluginLoader.get_aligner(aligner_name)(loglevel=loglevel,
+                                                         configfile=configfile,
+                                                         normalize_method=normalize_method)
         return aligner
 
     def set_parallel_processing(self, multiprocess):
diff --git a/scripts/extract.py b/scripts/extract.py
index 9d7edbb..ac76cec 100644
--- a/scripts/extract.py
+++ b/scripts/extract.py
@@ -31,14 +31,15 @@ class Extract():
         self.alignments = Alignments(self.args, True, self.images.is_video)
         self.post_process = PostProcess(arguments)
         configfile = self.args.configfile if hasattr(self.args, "configfile") else None
+        normalization = None if self.args.normalization == "none" else self.args.normalization
         self.extractor = Extractor(self.args.detector,
                                    self.args.aligner,
                                    self.args.loglevel,
-                                   configfile,
-                                   self.args.multiprocess,
-                                   self.args.rotate_images,
-                                   self.args.min_size)
-
+                                   configfile=configfile,
+                                   multiprocess=not self.args.singleprocess,
+                                   rotate_images=self.args.rotate_images,
+                                   min_size=self.args.min_size,
+                                   normalize_method=normalization)
         self.save_queue = queue_manager.get_queue("extract_save")
         self.verify_output = False
         self.save_interval = None
diff --git a/tools/lib_alignments/jobs_manual.py b/tools/lib_alignments/jobs_manual.py
index cd43e95..7a0e448 100644
--- a/tools/lib_alignments/jobs_manual.py
+++ b/tools/lib_alignments/jobs_manual.py
@@ -785,7 +785,8 @@ class MouseHandler():
         detect_process.start()
 
         for plugin in ("fan", "cv2_dnn"):
-            aligner = PluginLoader.get_aligner(plugin)(loglevel=loglevel)
+            aligner = PluginLoader.get_aligner(plugin)(loglevel=loglevel,
+                                                       normalize_method="hist")
             align_process = SpawnProcess(aligner.run, **a_kwargs)
             a_event = align_process.event
             align_process.start()
