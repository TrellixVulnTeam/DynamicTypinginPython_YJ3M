commit 790b04a3147c4408ef9f497f7f83b3700bf0f530
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Sun Dec 8 18:06:16 2019 +0000

    lib.alignments - Auto update legacy list landmarks to numpy array

diff --git a/lib/alignments.py b/lib/alignments.py
index 90a77e6..3f985b9 100644
--- a/lib/alignments.py
+++ b/lib/alignments.py
@@ -6,6 +6,8 @@ import logging
 import os
 from datetime import datetime
 
+import numpy as np
+
 from lib.serializer import get_serializer, get_serializer_from_filename
 from lib.utils import FaceswapError
 
@@ -248,9 +250,17 @@ class Alignments():
 
     def update_legacy(self):
         """ Update legacy alignments """
+        updated = False
         if self.has_legacy_landmarksxy():
-            logger.info("Updating legacy alignments")
+            logger.info("Updating legacy landmarksXY to landmarks_xy")
             self.update_legacy_landmarksxy()
+            updated = True
+        if self.has_legacy_landmarks_list():
+            logger.info("Updating legacy landmarks from list to numpy array")
+            self.update_legacy_landmarks_list()
+            updated = True
+        if updated:
+            self.save()
 
     # <File Format> #
     # Serializer is now a compressed pickle .fsa format. This used to be any number of serializers
@@ -304,4 +314,23 @@ class Alignments():
                 alignment["landmarks_xy"] = alignment.pop("landmarksXY")
                 update_count += 1
         logger.debug("Updated landmarks_xy: %s", update_count)
-        self.save()
+
+    # Landmarks stored as list instead of numpy array
+    def has_legacy_landmarks_list(self):
+        """ check for legacy landmarks stored as list """
+        logger.debug("checking legacy landmarks as list")
+        retval = not all(isinstance(face["landmarks_xy"], np.ndarray)
+                         for faces in self.data.values()
+                         for face in faces)
+        return retval
+
+    def update_legacy_landmarks_list(self):
+        """ Update landmarksXY to landmarks_xy and save alignments """
+        update_count = 0
+        for alignments in self.data.values():
+            for alignment in alignments:
+                test = alignment["landmarks_xy"]
+                if not isinstance(test, np.ndarray):
+                    alignment["landmarks_xy"] = np.array(test, dtype="float32")
+                    update_count += 1
+        logger.debug("Updated landmarks_xy: %s", update_count)
diff --git a/tools/lib_alignments/jobs_manual.py b/tools/lib_alignments/jobs_manual.py
index ead991e..7617289 100644
--- a/tools/lib_alignments/jobs_manual.py
+++ b/tools/lib_alignments/jobs_manual.py
@@ -479,18 +479,21 @@ class Manual():
 
         frame, faces = self.get_frame()
         press = self.get_keys()
+        self.interface.set_redraw(True)
 
         while True:
-            self.help.render()
-            cv2.imshow("Frame", frame)
-            cv2.imshow("Faces", faces)
-            key = cv2.waitKey(1)
+            if self.interface.redraw():
+                self.help.render()
+                cv2.imshow("Frame", frame)
+                cv2.imshow("Faces", faces)
+                self.interface.set_redraw(False)
+            key = cv2.waitKey(1000)
 
             if self.window_closed(is_windows, is_conda, key):
                 queue_manager.terminate_queues()
                 break
 
-            if key:
+            if key and key != -1:
                 logger.trace("Keypress received: '%s'", key)
             if key in press.keys():
                 action = press[key]["action"]
@@ -509,7 +512,6 @@ class Manual():
 
             logger.trace("Redraw requested")
             frame, faces = self.get_frame()
-            self.interface.set_redraw(False)
 
         cv2.destroyAllWindows()
 
@@ -584,23 +586,18 @@ class Manual():
         while True:
             if navigation["last_request"] == 0:
                 break
-            elif navigation["frame_idx"] in (0, navigation["max_frame"]):
+            if navigation["frame_idx"] in (0, navigation["max_frame"]):
                 break
-            elif skip_mode == "standard":
+            if skip_mode == "standard":
                 break
-            elif (skip_mode == "no faces"
-                  and not self.alignments.frame_has_faces(frame)):
+            if skip_mode == "no faces" and not self.alignments.frame_has_faces(frame):
                 break
-            elif (skip_mode == "multi-faces"
-                  and self.alignments.frame_has_multiple_faces(frame)):
+            if skip_mode == "multi-faces" and self.alignments.frame_has_multiple_faces(frame):
                 break
-            elif (skip_mode == "has faces"
-                  and self.alignments.frame_has_faces(frame)):
+            if skip_mode == "has faces" and self.alignments.frame_has_faces(frame):
                 break
-            else:
-                self.interface.iterate_frame("navigation",
-                                             navigation["last_request"])
-                frame = frame_list[navigation["frame_idx"]]["frame_fullname"]
+            self.interface.iterate_frame("navigation", navigation["last_request"])
+            frame = frame_list[navigation["frame_idx"]]["frame_fullname"]
 
         image = self.frames.load_image(frame)
         navigation["last_request"] = 0
