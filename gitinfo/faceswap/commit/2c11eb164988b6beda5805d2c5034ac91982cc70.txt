commit 2c11eb164988b6beda5805d2c5034ac91982cc70
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Wed Apr 4 22:39:23 2018 +0100

    Built in GUI [ALPHA] (#325)
    
    * Alpha Build - Pre Testing
    
    * Minor code amends
    
    * Add in the actual script execution

diff --git a/.gitignore b/.gitignore
index 5d41a2c..b0a71df 100644
--- a/.gitignore
+++ b/.gitignore
@@ -2,8 +2,10 @@
 !*.py
 !*.md
 !*.txt
+!*.png
 !Dockerfile*
 !requirements*
+!icons
 !lib
 !scripts
 !plugins
diff --git a/faceswap.py b/faceswap.py
index 6e4939b..1070ec0 100755
--- a/faceswap.py
+++ b/faceswap.py
@@ -10,6 +10,7 @@ from lib.cli import FullHelpArgumentParser
 from scripts.extract import ExtractTrainingData
 from scripts.train import TrainingProcessor
 from scripts.convert import ConvertImage
+from scripts.gui import TKGui
 
 def bad_args(args):
     parser.print_help()
@@ -24,6 +25,9 @@ if __name__ == "__main__":
         subparser, "train", "This command trains the model for the two faces A and B.")
     convert = ConvertImage(
         subparser, "convert", "Convert a source image to a new one with the face swapped.")
+    guiparsers = {'extract': extract, 'train': train, 'convert': convert}
+    gui = TKGui(
+        subparser, guiparsers, parser, "gui", "Launch the Faceswap Graphical User Interface.")
     parser.set_defaults(func=bad_args)
     arguments = parser.parse_args()
     arguments.func(arguments)
diff --git a/icons/clear.png b/icons/clear.png
new file mode 100755
index 0000000..0f2c636
Binary files /dev/null and b/icons/clear.png differ
diff --git a/icons/open_file.png b/icons/open_file.png
new file mode 100755
index 0000000..e91a27b
Binary files /dev/null and b/icons/open_file.png differ
diff --git a/icons/open_folder.png b/icons/open_folder.png
new file mode 100755
index 0000000..8e4b2aa
Binary files /dev/null and b/icons/open_folder.png differ
diff --git a/icons/reset.png b/icons/reset.png
new file mode 100755
index 0000000..bc5cd44
Binary files /dev/null and b/icons/reset.png differ
diff --git a/icons/save.png b/icons/save.png
new file mode 100755
index 0000000..97dc732
Binary files /dev/null and b/icons/save.png differ
diff --git a/lib/cli.py b/lib/cli.py
index e66931c..7a36a08 100644
--- a/lib/cli.py
+++ b/lib/cli.py
@@ -63,9 +63,50 @@ class DirectoryProcessor(object):
     rotation_angles = None
 
     def __init__(self, subparser, command, description='default'):
+        self.argument_list = self.get_argument_list()
+        self.optional_arguments = self.get_optional_arguments()
         self.create_parser(subparser, command, description)
         self.parse_arguments(description, subparser, command)
 
+    @staticmethod
+    def get_argument_list():
+        ''' Put the arguments in a list so that they are accessible from both argparse and gui '''
+        argument_list = []
+        argument_list.append({ "opts": ('-i', '--input-dir'),
+                               "action": FullPaths,
+                               "dest": "input_dir",
+                               "default": "input",
+                               "help": "Input directory. A directory containing the files \
+                                you wish to process. Defaults to 'input'"})
+        argument_list.append({ "opts": ('-o', '--output-dir'),
+                               "action": FullPaths,
+                               "dest": "output_dir",
+                               "default": "output",
+                               "help": "Output directory. This is where the converted files will \
+                                be stored. Defaults to 'output'"})
+        argument_list.append({ "opts": ('--serializer', ),
+                               "type": str.lower,
+                               "dest": "serializer",
+                               "choices": ("yaml", "json", "pickle"),
+                               "help": "serializer for alignments file"})
+        argument_list.append({ "opts": ('--alignments', ),
+                               "type": str,
+                               "dest": "alignments_path",
+                               "help": "optional path to alignments file."})
+        argument_list.append({ "opts": ('-v', '--verbose'),
+                               "action": "store_true",
+                               "dest": "verbose",
+                               "default": False,
+                               "help": "Show verbose output"})
+        return argument_list
+
+    @staticmethod
+    def get_optional_arguments():
+        ''' Put the arguments in a list so that they are accessible from both argparse and gui '''
+        # Override this for custom arguments
+        argument_list = []
+        return argument_list
+
     def process_arguments(self, arguments):
         self.arguments = arguments
         print("Input Directory: {}".format(self.arguments.input_dir))
@@ -232,35 +273,11 @@ class DirectoryProcessor(object):
         raise NotImplementedError()
 
     def parse_arguments(self, description, subparser, command):
-        self.parser.add_argument('-i', '--input-dir',
-                            action=FullPaths,
-                            dest="input_dir",
-                            default="input",
-                            help="Input directory. A directory containing the files \
-                            you wish to process. Defaults to 'input'")
-        self.parser.add_argument('-o', '--output-dir',
-                            action=FullPaths,
-                            dest="output_dir",
-                            default="output",
-                            help="Output directory. This is where the converted files will \
-                                be stored. Defaults to 'output'")
-
-        self.parser.add_argument('--serializer',
-                                type=str.lower,
-                                dest="serializer",
-                                choices=("yaml", "json", "pickle"),
-                                help="serializer for alignments file")
-
-        self.parser.add_argument('--alignments',
-                                type=str,
-                                dest="alignments_path",
-                                help="optional path to alignments file.")
-
-        self.parser.add_argument('-v', '--verbose',
-                            action="store_true",
-                            dest="verbose",
-                            default=False,
-                            help="Show verbose output")
+        for option in self.argument_list:
+            args = option['opts']
+            kwargs = {key: option[key] for key in option.keys() if key != 'opts'}
+            self.parser.add_argument(*args, **kwargs)
+        
         self.parser = self.add_optional_arguments(self.parser)
         self.parser.set_defaults(func=self.process_arguments)
 
@@ -274,7 +291,10 @@ class DirectoryProcessor(object):
         return parser
 
     def add_optional_arguments(self, parser):
-        # Override this for custom arguments
+        for option in self.optional_arguments:
+            args = option['opts']
+            kwargs = {key: option[key] for key in option.keys() if key != 'opts'}
+            parser.add_argument(*args, **kwargs)
         return parser
 
     def finalize(self):
diff --git a/scripts/convert.py b/scripts/convert.py
index a85ff54..d9fd88b 100644
--- a/scripts/convert.py
+++ b/scripts/convert.py
@@ -13,6 +13,7 @@ from plugins.PluginLoader import PluginLoader
 class ConvertImage(DirectoryProcessor):
     filename = ''
     def create_parser(self, subparser, command, description):
+        self.optional_arguments = self.get_optional_arguments()
         self.parser = subparser.add_parser(
             command,
             help="Convert a source image to a new one with the face swapped.",
@@ -21,140 +22,117 @@ class ConvertImage(DirectoryProcessor):
             https://github.com/deepfakes/faceswap-playground"
         )
 
-    def add_optional_arguments(self, parser):
-        parser.add_argument('-m', '--model-dir',
-                            action=FullPaths,
-                            dest="model_dir",
-                            default="models",
-                            help="Model directory. A directory containing the trained model \
-                            you wish to process. Defaults to 'models'")
-
-        parser.add_argument('-a', '--input-aligned-dir',
-                            action=FullPaths,
-                            dest="input_aligned_dir",
-                            default=None,
-                            help="Input \"aligned directory\". A directory that should contain the \
-                            aligned faces extracted from the input files. If you delete faces from \
-                            this folder, they'll be skipped during conversion. If no aligned dir is \
-                            specified, all faces will be converted.")
-
-        parser.add_argument('-t', '--trainer',
-                            type=str,
-                            choices=PluginLoader.get_available_models(), # case sensitive because this is used to load a plug-in.
-                            default=PluginLoader.get_default_model(),
-                            help="Select the trainer that was used to create the model.")
-
-        parser.add_argument('-s', '--swap-model',
-                            action="store_true",
-                            dest="swap_model",
-                            default=False,
-                            help="Swap the model. Instead of A -> B, swap B -> A.")
-
-        parser.add_argument('-c', '--converter',
-                            type=str,
-                            choices=("Masked", "Adjust"), # case sensitive because this is used to load a plugin.
-                            default="Masked",
-                            help="Converter to use.")
-
-        parser.add_argument('-D', '--detector',
-                            type=str,
-                            choices=("hog", "cnn"), # case sensitive because this is used to load a plugin.
-                            default="hog",
-                            help="Detector to use. 'cnn' detects much more angles but will be much more resource intensive and may fail on large files.")
-
-        parser.add_argument('-fr', '--frame-ranges',
-                            nargs="+",
-                            type=str,
-                            help="frame ranges to apply transfer to e.g. For frames 10 to 50 and 90 to 100 use --frame-ranges 10-50 90-100. \
-                            Files must have the frame-number as the last number in the name!"
-                            )
-
-        parser.add_argument('-d', '--discard-frames',
-                            action="store_true",
-                            dest="discard_frames",
-                            default=False,
-                            help="When used with --frame-ranges discards frames that are not processed instead of writing them out unchanged."
-                            )
-
-        parser.add_argument('-l', '--ref_threshold',
-                            type=float,
-                            dest="ref_threshold",
-                            default=0.6,
-                            help="Threshold for positive face recognition"
-                            )
-
-        parser.add_argument('-n', '--nfilter',
-                            type=str,
-                            dest="nfilter",
-                            nargs='+',
-                            default="nfilter.jpg",
-                            help="Reference image for the persons you do not want to process. Should be a front portrait"
-                            )
-
-        parser.add_argument('-f', '--filter',
-                            type=str,
-                            dest="filter",
-                            nargs="+",
-                            default="filter.jpg",
-                            help="Reference images for the person you want to process. Should be a front portrait"
-                            )
-
-        parser.add_argument('-b', '--blur-size',
-                            type=int,
-                            default=2,
-                            help="Blur size. (Masked converter only)")
-
-
-        parser.add_argument('-S', '--seamless',
-                            action="store_true",
-                            dest="seamless_clone",
-                            default=False,
-                            help="Use cv2's seamless clone. (Masked converter only)")
-
-        parser.add_argument('-M', '--mask-type',
-                            type=str.lower, #lowercase this, because its just a string later on.
-                            dest="mask_type",
-                            choices=["rect", "facehull", "facehullandrect"],
-                            default="facehullandrect",
-                            help="Mask to use to replace faces. (Masked converter only)")
-
-        parser.add_argument('-e', '--erosion-kernel-size',
-                            dest="erosion_kernel_size",
-                            type=int,
-                            default=None,
-                            help="Erosion kernel size. (Masked converter only). Positive values apply erosion which reduces the edge of the swapped face. Negative values apply dilation which allows the swapped face to cover more space.")
-
-        parser.add_argument('-mh', '--match-histgoram',
-                            action="store_true",
-                            dest="match_histogram",
-                            default=False,
-                            help="Use histogram matching. (Masked converter only)")
-        
-        parser.add_argument('-sh',
-                            type=str.lower,
-                            dest="sharpen_image",
-                            choices=["bsharpen", "gsharpen"],
-                            default="none",
-                            help="Use Sharpen Image - bsharpen = Box Blur, gsharpen = Gaussian Blur (Masked converter only)")
-
-        parser.add_argument('-sm', '--smooth-mask',
-                            action="store_true",
-                            dest="smooth_mask",
-                            default=True,
-                            help="Smooth mask (Adjust converter only)")
-
-        parser.add_argument('-aca', '--avg-color-adjust',
-                            action="store_true",
-                            dest="avg_color_adjust",
-                            default=True,
-                            help="Average color adjust. (Adjust converter only)")
-
-        parser.add_argument('-g', '--gpus',
-                            type=int,
-                            default=1,
-                            help="Number of GPUs to use for conversion")
-
-        return parser
+    @staticmethod
+    def get_optional_arguments():
+        ''' Put the arguments in a list so that they are accessible from both argparse and gui '''
+        argument_list = []
+        argument_list.append({ "opts": ('-m', '--model-dir'),
+                               "action": FullPaths,
+                               "dest": "model_dir",
+                               "default": "models",
+                               "help": "Model directory. A directory containing the trained model \
+                               you wish to process. Defaults to 'models'"})
+        argument_list.append({ "opts": ('-a', '--input-aligned-dir'),
+                               "action": FullPaths,
+                               "dest": "input_aligned_dir",
+                               "default": None,
+                               "help": "Input \"aligned directory\". A directory that should contain the \
+                               aligned faces extracted from the input files. If you delete faces from \
+                               this folder, they'll be skipped during conversion. If no aligned dir is \
+                               specified, all faces will be converted."})
+        argument_list.append({ "opts": ('-t', '--trainer'),
+                               "type": str,
+                               "choices": PluginLoader.get_available_models(), # case sensitive because this is used to load a plug-in.
+                               "default": PluginLoader.get_default_model(),
+                               "help": "Select the trainer that was used to create the model."})
+        argument_list.append({ "opts": ('-s', '--swap-model'),
+                               "action": "store_true",
+                               "dest": "swap_model",
+                               "default": False,
+                               "help": "Swap the model. Instead of A -> B, swap B -> A."})
+        argument_list.append({ "opts": ('-c', '--converter'),
+                               "type": str,
+                               "choices": ("Masked", "Adjust"), # case sensitive because this is used to load a plugin.
+                               "default": "Masked",
+                               "help": "Converter to use."})
+        argument_list.append({ "opts": ('-D', '--detector'),
+                               "type": str,
+                               "choices": ("hog", "cnn"), # case sensitive because this is used to load a plugin.
+                               "default": "hog",
+                               "help": "Detector to use. 'cnn' detects much more angles but will be much more resource intensive and may fail on large files."})
+        argument_list.append({ "opts": ('-fr', '--frame-ranges'),
+                               "nargs": "+",
+                               "type": str,
+                               "help": "frame ranges to apply transfer to e.g. For frames 10 to 50 and 90 to 100 use --frame-ranges 10-50 90-100. \
+                               Files must have the frame-number as the last number in the name!"})
+        argument_list.append({ "opts": ('-d', '--discard-frames'),
+                               "action": "store_true",
+                               "dest": "discard_frames",
+                               "default": False,
+                               "help": "When used with --frame-ranges discards frames that are not processed instead of writing them out unchanged."})
+        argument_list.append({ "opts": ('-l', '--ref_threshold'),
+                               "type": float,
+                               "dest": "ref_threshold",
+                               "default": 0.6,
+                               "help": "Threshold for positive face recognition"})
+        argument_list.append({ "opts": ('-n', '--nfilter'),
+                               "type": str,
+                               "dest": "nfilter",
+                               "nargs": '+',
+                               "default": "nfilter.jpg",
+                               "help": "Reference image for the persons you do not want to process. Should be a front portrait"})
+        argument_list.append({ "opts": ('-f', '--filter'),
+                               "type": str,
+                               "dest": "filter",
+                               "nargs": "+",
+                               "default": "filter.jpg",
+                               "help": "Reference images for the person you want to process. Should be a front portrait"})
+        argument_list.append({ "opts": ('-b', '--blur-size'),
+                               "type": int,
+                               "default": 2,
+                               "help": "Blur size. (Masked converter only)"})
+        argument_list.append({ "opts": ('-S', '--seamless'),
+                               "action": "store_true",
+                               "dest": "seamless_clone",
+                               "default": False,
+                               "help": "Use cv2's seamless clone. (Masked converter only)"})
+        argument_list.append({ "opts": ('-M', '--mask-type'),
+                               "type": str.lower, #lowercase this, because its just a string later on.
+                               "dest": "mask_type",
+                               "choices": ["rect", "facehull", "facehullandrect"],
+                               "default": "facehullandrect",
+                               "help": "Mask to use to replace faces. (Masked converter only)"})
+        argument_list.append({ "opts": ('-e', '--erosion-kernel-size'),
+                               "dest": "erosion_kernel_size",
+                               "type": int,
+                               "default": None,
+                               "help": "Erosion kernel size. (Masked converter only). Positive values apply erosion which reduces the edge of the swapped face. Negative values apply dilation which allows the swapped face to cover more space."})
+        argument_list.append({ "opts": ('-mh', '--match-histgoram'),
+                               "action": "store_true",
+                               "dest": "match_histogram",
+                               "default": False,
+                               "help": "Use histogram matching. (Masked converter only)"})
+        argument_list.append({ "opts": ('-sh', ),
+                               "type": str.lower,
+                               "dest": "sharpen_image",
+                               "choices": ["bsharpen", "gsharpen"],
+                               "default": "none",
+                               "help": "Use Sharpen Image - bsharpen = Box Blur, gsharpen = Gaussian Blur (Masked converter only)"})
+        argument_list.append({ "opts": ('-sm', '--smooth-mask'),
+                               "action": "store_true",
+                               "dest": "smooth_mask",
+                               "default": True,
+                               "help": "Smooth mask (Adjust converter only)"})
+        argument_list.append({ "opts": ('-aca', '--avg-color-adjust'),
+                               "action": "store_true",
+                               "dest": "avg_color_adjust",
+                               "default": True,
+                               "help": "Average color adjust. (Adjust converter only)"})
+        argument_list.append({ "opts": ('-g', '--gpus'),
+                               "type": int,
+                               "default": 1,
+                               "help": "Number of GPUs to use for conversion"})
+        return argument_list
 
     def process(self):
         # Original & LowMem models go with Adjust or Masked converter
diff --git a/scripts/extract.py b/scripts/extract.py
index e53ea6c..f44b9f9 100644
--- a/scripts/extract.py
+++ b/scripts/extract.py
@@ -13,6 +13,7 @@ from plugins.PluginLoader import PluginLoader
 
 class ExtractTrainingData(DirectoryProcessor):
     def create_parser(self, subparser, command, description):
+        self.optional_arguments = self.get_optional_arguments()
         self.parser = subparser.add_parser(
             command,
             help="Extract the faces from a pictures.",
@@ -21,74 +22,64 @@ class ExtractTrainingData(DirectoryProcessor):
             https://github.com/deepfakes/faceswap-playground"
             )
 
-    def add_optional_arguments(self, parser):
-        parser.add_argument('-D', '--detector',
-                            type=str,
-                            choices=("hog", "cnn", "all"), # case sensitive because this is used to load a plugin.
-                            default="hog",
-                            help="Detector to use. 'cnn' detects much more angles but will be much more resource intensive and may fail on large files.")
-
-        parser.add_argument('-l', '--ref_threshold',
-                            type=float,
-                            dest="ref_threshold",
-                            default=0.6,
-                            help="Threshold for positive face recognition"
-                            )
-
-        parser.add_argument('-n', '--nfilter',
-                            type=str,
-                            dest="nfilter",
-                            nargs='+',
-                            default="nfilter.jpg",
-                            help="Reference image for the persons you do not want to process. Should be a front portrait"
-                            )
-
-        parser.add_argument('-f', '--filter',
-                            type=str,
-                            dest="filter",
-                            nargs='+',
-                            default="filter.jpg",
-                            help="Reference image for the person you want to process. Should be a front portrait"
-                            )
-
-        parser.add_argument('-j', '--processes',
-                            type=int,
-                            default=1,
-                            help="Number of processes to use.")
-
-        parser.add_argument('-s', '--skip-existing',
-                            action='store_true',
-                            dest='skip_existing',
-                            default=False,
-                            help="Skips frames already extracted.")
-
-        parser.add_argument('-dl', '--debug-landmarks',
-                            action="store_true",
-                            dest="debug_landmarks",
-                            default=False,
-                            help="Draw landmarks for debug.")
-
-        parser.add_argument('-r', '--rotate-images',
-                            type=str,
-                            dest="rotate_images",
-                            default=None,
-                            help="If a face isn't found, rotate the images to try to find a face. Can find more faces at the "
+    @staticmethod
+    def get_optional_arguments():
+        ''' Put the arguments in a list so that they are accessible from both argparse and gui '''
+        argument_list = []
+        argument_list.append({ "opts": ('-D', '--detector'),
+                               "type": str,
+                               "choices": ("hog", "cnn", "all"), # case sensitive because this is used to load a plugin.
+                               "default": "hog",
+                               "help": "Detector to use. 'cnn' detects much more angles but will be much more resource intensive and may fail on large files."})
+        argument_list.append({ "opts": ('-l', '--ref_threshold'),
+                               "type": float,
+                               "dest": "ref_threshold",
+                               "default": 0.6,
+                               "help": "Threshold for positive face recognition"})
+        argument_list.append({ "opts": ('-n', '--nfilter'),
+                               "type": str,
+                               "dest": "nfilter",
+                               "nargs": '+',
+                               "default": "nfilter.jpg",
+                               "help": "Reference image for the persons you do not want to process. Should be a front portrait"})
+        argument_list.append({ "opts": ('-f', '--filter'),
+                               "type": str,
+                               "dest": "filter",
+                               "nargs": '+',
+                               "default": "filter.jpg",
+                               "help": "Reference image for the person you want to process. Should be a front portrait"})
+        argument_list.append({ "opts": ('-j', '--processes'),
+                               "type": int,
+                               "default": 1,
+                               "help": "Number of processes to use."})
+        argument_list.append({ "opts": ('-s', '--skip-existing'),
+                               "action": 'store_true',
+                               "dest": 'skip_existing',
+                               "default": False,
+                               "help": "Skips frames already extracted."})
+        argument_list.append({ "opts": ('-dl', '--debug-landmarks'),
+                               "action": "store_true",
+                               "dest": "debug_landmarks",
+                               "default": False,
+                               "help": "Draw landmarks for debug."})
+        argument_list.append({ "opts": ('-r', '--rotate-images'),
+                               "type": str,
+                               "dest": "rotate_images",
+                               "default": None,
+                               "help": "If a face isn't found, rotate the images to try to find a face. Can find more faces at the "
                                  "cost of extraction speed.  Pass in a single number to use increments of that size up to 360, "
-                                 "or pass in a list of numbers to enumerate exactly what angles to check.")
-
-        parser.add_argument('-ae', '--align-eyes',
-                            action="store_true",
-                            dest="align_eyes",
-                            default=False,
-                            help="Perform extra alignment to ensure left/right eyes lie at the same height")
-
-        parser.add_argument('-bt', '--blur-threshold',
-                            type=int,
-                            dest="blur_thresh",
-                            default=None,
-                            help="Automatically discard images blurrier than the specified threshold. Discarded images are moved into a \"blurry\" sub-folder. Lower values allow more blur")
-
-        return parser
+                                 "or pass in a list of numbers to enumerate exactly what angles to check."})
+        argument_list.append({ "opts": ('-ae', '--align-eyes'),
+                               "action": "store_true",
+                               "dest": "align_eyes",
+                               "default": False,
+                               "help": "Perform extra alignment to ensure left/right eyes lie at the same height"})
+        argument_list.append({ "opts": ('-bt', '--blur-threshold'),
+                               "type": int,
+                               "dest": "blur_thresh",
+                               "default": None,
+                               "help": "Automatically discard images blurrier than the specified threshold. Discarded images are moved into a \"blurry\" sub-folder. Lower values allow more blur"})
+        return argument_list
 
     def process(self):
         extractor_name = "Align" # TODO Pass as argument
diff --git a/scripts/gui.py b/scripts/gui.py
new file mode 100644
index 0000000..784a24c
--- /dev/null
+++ b/scripts/gui.py
@@ -0,0 +1,402 @@
+import sys
+from threading import Thread
+import tkinter as tk
+
+from tkinter import ttk
+from tkinter import filedialog
+
+from lib.cli import FullPaths
+from lib.Serializer import JSONSerializer
+
+class TKGui(object):
+    ''' The Graphical User Interface '''
+    def __init__(self, subparser, subparsers, parser, command, description='default'):
+        self.root = tk.Tk()
+        self.parser = parser
+        self.opts = self.extract_options(subparsers)
+        self.icofolder = tk.PhotoImage(file='icons/open_folder.png')
+        self.icofile = tk.PhotoImage(file='icons/open_file.png')
+        self.icosave = tk.PhotoImage(file='icons/save.png')
+        self.icoreset = tk.PhotoImage(file='icons/reset.png')
+        self.icoclear = tk.PhotoImage(file='icons/clear.png')
+        self.helptext = tk.StringVar()
+        self.statustext = tk.StringVar()
+        self.serializer = JSONSerializer
+        self.filetypes=(('Faceswap files', '*.fsw'),  ('All files', '*.*'))
+       
+        self.parse_arguments(description, subparser, command)
+
+    def bad_args(self, args):
+        self.parser.print_help()
+        exit(0)
+
+    def extract_options(self, subparsers):
+        ''' Extract the existing ArgParse Options '''
+        options = {command: subparsers[command].argument_list + subparsers[command].optional_arguments for command in subparsers.keys()}
+        for command in options.values():
+            for option in command:
+                option['control_title'] = self.set_control_title(option.get('opts',''))
+                option['control_type'] = self.set_control_type(option)
+        return options
+
+    @staticmethod
+    def set_control_title(opts):
+        ''' Take the option switch and format it nicely '''
+        ctl_title = opts[0]
+        if len(opts) == 2:
+            ctl_title = opts[1]
+        ctl_title = ctl_title.replace('-',' ').replace('_',' ')
+        ctl_title = ctl_title.title().strip()
+        return ctl_title
+ 
+    @staticmethod
+    def set_control_type(option):
+        ''' Set what control type we should use for an option based on existence of various variables '''
+        if option.get('dest', '') == 'alignments_path':
+            ctl_type = 'filechooser'
+        elif option.get('action', '') == FullPaths:
+            ctl_type = 'folderchooser'
+        elif option.get('choices', '') != '':
+            ctl_type = 'combobox'
+        elif option.get('type', '') in (str, float, int):
+            ctl_type = 'entrybox'
+        elif option.get('action', '') == 'store_true':
+            ctl_type = 'checkbox'
+        return ctl_type
+
+    def parse_arguments(self, description, subparser, command):
+        parser = subparser.add_parser(
+            command,
+            help="This Launches a GUI for Faceswap.",
+            description=description,
+            epilog="Questions and feedback: \
+            https://github.com/deepfakes/faceswap-playground"
+        )
+        parser.set_defaults(func=self.process)
+
+    def process(self, arguments):
+        ''' Builds the GUI '''
+        self.arguments = arguments
+        self.root.title('faceswap.py')
+        self.menu()
+        notebook = ttk.Notebook(self.root)
+        notebook.pack(fill=tk.BOTH, expand=True)
+
+        # extract, train and convert are explicitly stated to ensure they are always displayed in the same order
+        for command in ('extract', 'train', 'convert'):
+            title = command.title()
+            page = ttk.Frame(notebook)
+            
+            self.add_left_frame(page, command)
+            self.add_frame_seperator(page)
+            opt_frame = self.add_right_frame(page)
+            
+            for option in self.opts[command]:
+                self.build_tabs(option, opt_frame)
+            
+            notebook.add(page, text=title)
+
+        self.root.mainloop()
+
+# All pages stuff
+    def menu(self):
+        ''' Menu bar for loading and saving configs '''
+        menubar = tk.Menu(self.root)
+        filemenu = tk.Menu(menubar, tearoff=0)
+        filemenu.add_command(label='Load full config...', command=self.load_config)
+        filemenu.add_command(label='Save full config...', command=self.save_config)
+        filemenu.add_separator()
+        filemenu.add_command(label='Reset all to default', command=self.reset_config)
+        filemenu.add_command(label='Clear all', command=self.clear_config)
+        filemenu.add_separator()
+        filemenu.add_command(label='Quit', command=self.root.quit)
+        menubar.add_cascade(label="File", menu=filemenu)
+        self.root.config(menu=menubar)
+
+    def load_config(self, command=None):
+        ''' Load a saved config file '''
+        config_file = filedialog.askopenfile(mode='r', filetypes=self.filetypes)
+        if not config_file:
+            return
+        config = self.serializer.unmarshal(config_file.read())
+        if command is None:
+            for command, options in config.items():
+                self.set_command_args(command, options)
+        else:
+            options = config[command]
+            self.set_command_args(command, options)
+                
+    def set_command_args(self, command, options):
+        ''' Pass the saved config items back to the GUI '''
+        for src_option, src_value in options.items():
+            for dst_options in self.opts[command]:
+                if dst_options['control_title'] == src_option:
+                    dst_options['value'].set(src_value)
+                    break
+        
+    def save_config(self, command=None):
+        ''' Save the current GUI state to a config file in json format '''
+        config_file = filedialog.asksaveasfile(mode='w', filetypes=self.filetypes, defaultextension='.fsw')
+        if not config_file:
+            return
+        if command is None:
+            config = {command: {option['control_title']: option['value'].get() for option in options} for command, options in self.opts.items()}
+        else:
+            config = {command: {option['control_title']: option['value'].get() for option in self.opts[command]}}
+        config_file.write(self.serializer.marshal(config))
+        config_file.close
+
+    def reset_config(self, command=None):
+        ''' Reset the GUI to the default values '''
+        if command is None:
+            options = [option for options in self.opts.values() for option in options]
+        else:
+            options = [option for option in self.opts[command]]
+        for option in options:
+            default = option.get('default', '')
+            default = '' if default is None else default
+            option['value'].set(default)
+
+    def clear_config(self, command=None):
+        ''' Clear all values from the GUI '''
+        if command is None:
+            options = [option for options in self.opts.values() for option in options]
+        else:
+            options = [option for option in self.opts[command]]
+        for option in options:
+            if isinstance(option['value'].get(), bool):
+                option['value'].set(False)
+            elif isinstance(option['value'].get(), int):
+                option['value'].set(0)
+            else:
+                option['value'].set('')
+
+    @staticmethod
+    def add_frame_seperator(page):
+        ''' Add a seperator between left and right frames '''
+        separator = tk.Frame(page, width=2, bd=1, relief=tk.SUNKEN)
+        separator.pack(fill=tk.Y, padx=5, side=tk.LEFT)
+
+# Left Frame stuff
+    def add_left_frame(self, page, title):
+        ''' Add help display and execute button to the left frame of each page '''
+        frame = tk.Frame(page)
+        frame.pack(fill=tk.X, padx=(10,5), side=tk.LEFT, anchor=tk.N)
+
+        topframe = tk.Frame(frame)
+        topframe.pack(fill=tk.X, side=tk.TOP)
+        bottomframe = tk.Frame(frame)
+        bottomframe.pack(fill=tk.X, side=tk.BOTTOM)
+        self.add_info_section(topframe)
+        self.add_action_buttons(topframe, title)
+        self.add_util_buttons(bottomframe, title)
+        self.add_status_section(bottomframe)
+        
+    def add_info_section(self, frame):
+        ''' Build the info text section page '''
+        helpframe=tk.Frame(frame)
+        helpframe.pack(fill=tk.X, side=tk.TOP, pady=5)
+        lbl_title = tk.Label(helpframe, text='Info', width=15, anchor=tk.SW)
+        lbl_title.pack(side=tk.TOP)
+        self.helptext.set('')
+        lbl_help = tk.Label(helpframe, height=20, width=15, textvariable=self.helptext,  wraplength=120, justify=tk.LEFT, anchor=tk.NW, bg="gray90")
+        lbl_help.pack(side=tk.BOTTOM, anchor=tk.N)
+
+    def bind_help(self, control, helptext):
+        ''' Controls the help text displayed on mouse hover '''
+        control.bind('<Enter>', lambda event: self.helptext.set(helptext))
+        control.bind('<FocusIn>', lambda event: self.helptext.set(helptext))
+        control.bind('<Leave>', lambda event: self.helptext.set(''))
+        control.bind('<FocusOut>', lambda event: self.helptext.set(''))
+
+    def add_action_buttons(self, frame, title):
+        ''' Add the action buttons for page '''
+        command = title.lower()
+        title = title.capitalize()
+
+        actframe = tk.Frame(frame)
+        actframe.pack(fill=tk.X, side=tk.BOTTOM, pady=(15, 0))
+
+        btnexecute = tk.Button(actframe, text=title, height=2, width=12, command=lambda: self.execute_script(command))
+        btnexecute.pack()
+        self.bind_help(btnexecute, 'Run the {} script'.format(title))
+
+    def add_util_buttons(self, frame, title):
+        ''' Add the section utility buttons '''
+        command = title.lower()
+        title = title.capitalize()
+
+        utilframe = tk.Frame(frame)
+        utilframe.pack(side=tk.TOP, pady=(5,0))
+
+        btnload = tk.Button(utilframe, image=self.icofile, height=16, width=16, command=lambda: self.load_config(command))
+        btnload.pack(padx=2, pady=2, side=tk.LEFT)
+        self.bind_help(btnload, 'Load existing {} config'.format(title))
+
+        btnsave = tk.Button(utilframe, image=self.icosave, height=16, width=16, command=lambda: self.save_config(command))
+        btnsave.pack(padx=2, pady=2, side=tk.LEFT)
+        self.bind_help(btnsave, 'Save {} config'.format(title))
+
+        btnreset = tk.Button(utilframe, image=self.icoreset, height=16, width=16, command=lambda: self.reset_config(command))
+        btnreset.pack(padx=2, pady=2, side=tk.RIGHT)
+        self.bind_help(btnreset, 'Reset {} config to default'.format(title))
+
+        btnclear = tk.Button(utilframe, image=self.icoclear, height=16, width=16, command=lambda: self.clear_config(command))
+        btnclear.pack(padx=2, pady=2, side=tk.RIGHT)
+        self.bind_help(btnclear, 'Clear all entries for {} config'.format(title))
+
+    def add_status_section(self, frame):
+        ''' Build the info text section page '''
+        statusframe = tk.Frame(frame)
+        statusframe.pack(side=tk.BOTTOM, pady=(5,0))
+        
+        lbl_title = tk.Label(statusframe, text='Status', width=15, anchor=tk.SW)
+        lbl_title.pack(side=tk.TOP)
+        self.statustext.set('Idle')
+        lbl_status = tk.Label(statusframe, height=1, width=15, textvariable=self.statustext,  wraplength=120, justify=tk.LEFT, anchor=tk.NW, bg="gray90")
+        lbl_status.pack(side=tk.BOTTOM, anchor=tk.N)
+
+    def execute_script(self, command):
+        
+        optlist = ['faceswap.py', command]
+        for item in self.opts[command]:
+            opt_value = str(item.get('value','').get())
+            opt = item['opts'][0]
+            if opt_value == 'False' or opt_value == '':
+                continue
+            elif opt_value == 'True':
+                optlist.append(opt)
+            else:
+                optlist.extend((opt, opt_value))
+        sys.argv = optlist
+        process = Thread(target=self.launch_thread, args=(command,))
+        process.start()
+
+    def launch_thread(self, command):
+        ''' Launch the script inside a subprocess to keep the GUI active '''
+        title = command.capitalize()
+        self.statustext.set('Running - {}'.format(title))
+        self.parser.set_defaults(func=self.bad_args)
+        arguments = self.parser.parse_args()
+        arguments.func(arguments)
+        self.statustext.set('Idle')
+        
+# Right Frame setup    
+    def add_right_frame(self, page):
+        ''' Add the options panel to the right frame of each page '''
+        frame = tk.Frame(page)
+        frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(0,5))
+
+        canvas = tk.Canvas(frame, width=490, height=450, bd=0, highlightthickness=0)
+        canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
+
+        self.add_scrollbar(frame, canvas)
+
+        opts_frame = tk.Frame(canvas)
+        canvas.create_window((0,0), window=opts_frame, anchor=tk.NW)
+
+        return opts_frame
+
+    def add_scrollbar(self, frame, canvas):
+        ''' Add a scrollbar to the options frame '''
+        scrollbar = tk.Scrollbar(frame, command=canvas.yview)
+        scrollbar.pack(side=tk.LEFT, fill='y')
+        canvas.configure(yscrollcommand = scrollbar.set)
+        canvas.bind('<Configure>', lambda event, opt_canvas=canvas: self.update_scrollbar(event, opt_canvas))
+
+    @staticmethod
+    def update_scrollbar(event, canvas):
+        canvas.configure(scrollregion=canvas.bbox('all'))
+
+# Build the Right Frame Options
+    def build_tabs(self, option, page):
+        ''' Build the correct control type for the option passed through '''
+        ctl_type = option['control_type']
+        ctl_title = option['control_title']
+        ctl_help = ' '.join(option.get('help', '').split())
+        ctl_help = '. '.join(i.capitalize() for i in ctl_help.split('. '))
+        ctl_help = ctl_title + ' - ' + ctl_help
+        ctl_frame = self.build_control_frame(page)
+        self.build_control_label(ctl_frame, ctl_title)
+        if ctl_type == 'combobox':
+            option['value'] = self.build_combobox(ctl_frame, ctl_help, option.get('default',''), option['choices'])
+        if ctl_type == 'checkbox':
+            option['value'] = self.build_checkbox(ctl_frame, ctl_help, option.get('default', False), ctl_title)
+        if ctl_type == 'entrybox':
+            option['value'] = self.build_entrybox(ctl_frame, ctl_help, option.get('default',''), None)
+        if ctl_type in ('filechooser', 'folderchooser'):
+            option['value'] = self.build_entrybox(ctl_frame, ctl_help, option.get('default',''), ctl_type)
+
+    @staticmethod
+    def build_control_frame(page):
+        ''' Build the frame to hold the control '''
+        frame = tk.Frame(page)
+        frame.pack(fill=tk.X)
+        return frame
+    
+    @staticmethod
+    def build_control_label(frame, title):
+        ''' Build and place the control label '''
+        label = tk.Label(frame, text=title, width=15, anchor=tk.W)
+        label.pack(padx=5, pady=5, side=tk.LEFT, anchor=tk.N)
+
+    def build_combobox(self, frame, helptext, default, items):
+        ''' Build and place combobox controls '''
+        default = default if default in items else ''
+        cmbvar = tk.StringVar(frame)
+        cmbvar.set(default)
+                        
+        cmbbox = ttk.Combobox(frame, textvariable=cmbvar, width=40)
+        cmbbox['values'] = [item for item in items]
+        cmbbox.pack(fill=tk.X, padx=5, pady=5)
+
+        self.bind_help(cmbbox, helptext)
+        return cmbvar
+
+    def build_checkbox(self, frame, helptext, default, title):
+        ''' Build and place checkbox controls '''
+        chkvar = tk.BooleanVar(frame)
+        chkvar.set(default)
+
+        chkbox = tk.Checkbutton(frame, variable=chkvar)
+        chkbox.pack(padx=5, pady=5, anchor=tk.W)
+        
+        self.bind_help(chkbox, helptext)
+        return chkvar
+
+    def build_entrybox(self, frame, helptext, default, opentype = None):
+        ''' Build and place entry controls '''
+        default = default if default is not None else ''
+        etyvar = tk.StringVar(frame)
+        etyvar.set(default)
+
+        if opentype is not None:
+            self.add_browser_buttons(frame, opentype, etyvar)
+
+        etybox = tk.Entry(frame, textvariable=etyvar)
+        etybox.pack(fill=tk.X, padx=5, pady=5)
+
+        self.bind_help(etybox, helptext)
+        return etyvar
+
+    def add_browser_buttons(self, frame, opentype, filepath):
+        ''' Add correct file browser button for control '''
+        if opentype == 'filechooser':
+            fileopn = tk.Button(frame, image=self.icofile, command=lambda: self.askfile(filepath), width=16, height=16)
+        else:
+            fileopn = tk.Button(frame, image=self.icofolder, command=lambda: self.askdirectory(filepath))
+        fileopn.pack(side=tk.RIGHT)
+
+    @staticmethod
+    def askdirectory(filepath):
+        ''' Pop-up to get path to a directory '''
+        dirname = filedialog.askdirectory()
+        if dirname:
+            filepath.set(dirname)
+   
+    @staticmethod
+    def askfile(filepath):
+        ''' Pop-up to get path to a file '''
+        filename = filedialog.askopenfilename()
+        if filename:
+            filepath.set(filename)
diff --git a/scripts/train.py b/scripts/train.py
index 638d3e6..d7c26f7 100644
--- a/scripts/train.py
+++ b/scripts/train.py
@@ -23,6 +23,8 @@ class TrainingProcessor(object):
     arguments = None
 
     def __init__(self, subparser, command, description='default'):
+        self.argument_list = self.get_argument_list()
+        self.optional_arguments = self.get_optional_arguments()
         self.parse_arguments(description, subparser, command)
         self.lock = threading.Lock()
 
@@ -33,6 +35,85 @@ class TrainingProcessor(object):
         print("Training data directory: {}".format(self.arguments.model_dir))
 
         self.process()
+    
+    @staticmethod
+    def get_argument_list():
+        ''' Put the arguments in a list so that they are accessible from both argparse and gui '''
+        argument_list = []
+        argument_list.append({ "opts": ("-A", "--input-A"),
+                               "action": FullPaths,
+                               "dest": "input_A",
+                               "default": "input_A",
+                               "help": "Input directory. A directory containing training images for face A.\
+                               Defaults to 'input'"})
+        argument_list.append({ "opts": ("-B", "--input-B"),
+                               "action": FullPaths,
+                               "dest": "input_B",
+                               "default": "input_B",
+                               "help": "Input directory. A directory containing training images for face B.\
+                               Defaults to 'input'"})
+        argument_list.append({ "opts": ("-m", "--model-dir"),
+                               "action": FullPaths,
+                               "dest": "model_dir",
+                               "default": "models",
+                               "help": "Model directory. This is where the training data will \
+                               be stored. Defaults to 'model'"})
+        argument_list.append({ "opts": ("-p", "--preview"),
+                               "action": "store_true",
+                               "dest": "preview",
+                               "default": False,
+                               "help": "Show preview output. If not specified, write progress \
+                               to file."})
+        argument_list.append({ "opts": ("-v", "--verbose"),
+                               "action": "store_true",
+                               "dest": "verbose",
+                               "default": False,
+                               "help": "Show verbose output"})
+        argument_list.append({ "opts": ("-s", "--save-interval"),
+                               "type": int,
+                               "dest": "save_interval",
+                               "default": 100,
+                               "help": "Sets the number of iterations before saving the model."})
+        argument_list.append({ "opts": ("-w", "--write-image"),
+                               "action": "store_true",
+                               "dest": "write_image",
+                               "default": False,
+                               "help": "Writes the training result to a file even on preview mode."})
+        argument_list.append({ "opts": ("-t", "--trainer"),
+                               "type": str,
+                               "choices": PluginLoader.get_available_models(),
+                               "default": PluginLoader.get_default_model(),
+                               "help": "Select which trainer to use, LowMem for cards < 2gb."})
+        argument_list.append({ "opts": ("-pl", "--use-perceptual-loss"),
+                               "action": "store_true",
+                               "dest": "perceptual_loss",
+                               "default": False,
+                               "help": "Use perceptual loss while training"})
+        argument_list.append({ "opts": ("-bs", "--batch-size"),
+                               "type": int,
+                               "default": 64,
+                               "help": "Batch size, as a power of 2 (64, 128, 256, etc)"})
+        argument_list.append({ "opts": ("-ag", "--allow-growth"),
+                               "action": "store_true",
+                               "dest": "allow_growth",
+                               "default": False,
+                               "help": "Sets allow_growth option of Tensorflow to spare memory on some configs"})
+        argument_list.append({ "opts": ("-ep", "--epochs"),
+                               "type": int,
+                               "default": 1000000,
+                               "help": "Length of training in epochs."})
+        argument_list.append({ "opts": ("-g", "--gpus"),
+                               "type": int,
+                               "default": 1,
+                               "help": "Number of GPUs to use for training"})
+        return argument_list
+
+    @staticmethod
+    def get_optional_arguments():
+        ''' Put the arguments in a list so that they are accessible from both argparse and gui '''
+        # Override this for custom arguments
+        argument_list = []
+        return argument_list
 
     def parse_arguments(self, description, subparser, command):
         parser = subparser.add_parser(
@@ -40,80 +121,21 @@ class TrainingProcessor(object):
             help="This command trains the model for the two faces A and B.",
             description=description,
             epilog="Questions and feedback: \
-            https://github.com/deepfakes/faceswap-playground"
-        )
-
-        parser.add_argument('-A', '--input-A',
-                            action=FullPaths,
-                            dest="input_A",
-                            default="input_A",
-                            help="Input directory. A directory containing training images for face A.\
-                             Defaults to 'input'")
-        parser.add_argument('-B', '--input-B',
-                            action=FullPaths,
-                            dest="input_B",
-                            default="input_B",
-                            help="Input directory. A directory containing training images for face B.\
-                             Defaults to 'input'")
-        parser.add_argument('-m', '--model-dir',
-                            action=FullPaths,
-                            dest="model_dir",
-                            default="models",
-                            help="Model directory. This is where the training data will \
-                                be stored. Defaults to 'model'")
-        parser.add_argument('-p', '--preview',
-                            action="store_true",
-                            dest="preview",
-                            default=False,
-                            help="Show preview output. If not specified, write progress \
-                            to file.")
-        parser.add_argument('-v', '--verbose',
-                            action="store_true",
-                            dest="verbose",
-                            default=False,
-                            help="Show verbose output")
-        parser.add_argument('-s', '--save-interval',
-                            type=int,
-                            dest="save_interval",
-                            default=100,
-                            help="Sets the number of iterations before saving the model.")
-        parser.add_argument('-w', '--write-image',
-                            action="store_true",
-                            dest="write_image",
-                            default=False,
-                            help="Writes the training result to a file even on preview mode.")
-        parser.add_argument('-t', '--trainer',
-                            type=str,
-                            choices=PluginLoader.get_available_models(),
-                            default=PluginLoader.get_default_model(),
-                            help="Select which trainer to use, LowMem for cards < 2gb.")
-        parser.add_argument('-pl', '--use-perceptual-loss',
-                            action="store_true",
-                            dest="perceptual_loss",
-                            default=False,
-                            help="Use perceptual loss while training")
-        parser.add_argument('-bs', '--batch-size',
-                            type=int,
-                            default=64,
-                            help="Batch size, as a power of 2 (64, 128, 256, etc)")
-        parser.add_argument('-ag', '--allow-growth',
-                            action="store_true",
-                            dest="allow_growth",
-                            default=False,
-                            help="Sets allow_growth option of Tensorflow to spare memory on some configs")
-        parser.add_argument('-ep', '--epochs',
-                            type=int,
-                            default=1000000,
-                            help="Length of training in epochs.")
-        parser.add_argument('-g', '--gpus',
-                            type=int,
-                            default=1,
-                            help="Number of GPUs to use for training")
+            https://github.com/deepfakes/faceswap-playground")
+
+        for option in self.argument_list:
+            args = option['opts']
+            kwargs = {key: option[key] for key in option.keys() if key != 'opts'}
+            parser.add_argument(*args, **kwargs)
+
         parser = self.add_optional_arguments(parser)
         parser.set_defaults(func=self.process_arguments)
 
     def add_optional_arguments(self, parser):
-        # Override this for custom arguments
+        for option in self.optional_arguments:
+            args = option['opts']
+            kwargs = {key: option[key] for key in option.keys() if key != 'opts'}
+            parser.add_argument(*args, **kwargs)
         return parser
 
     def process(self):
