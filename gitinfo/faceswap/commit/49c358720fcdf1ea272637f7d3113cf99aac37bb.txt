commit 49c358720fcdf1ea272637f7d3113cf99aac37bb
Author: torzdf <36920800+torzdf@users.noreply.github.com>
Date:   Thu Mar 7 13:03:08 2019 +0000

    Extract: Add option to extract faces from every nth frame

diff --git a/lib/cli.py b/lib/cli.py
index d7dd627..8ccdba1 100644
--- a/lib/cli.py
+++ b/lib/cli.py
@@ -517,6 +517,17 @@ class ExtractArgs(ExtractConvertArgs):
                               "help": "Filters out faces detected below this size. Length, in "
                                       "pixels across the diagonal of the bounding box. Set to 0 "
                                       "for off"})
+        argument_list.append({"opts": ("-een", "--extract-every-n"),
+                              "type": int,
+                              "action": Slider,
+                              "dest": "extract_every_n",
+                              "min_max": (1, 100),
+                              "default": 1,
+                              "rounding": 1,
+                              "help": "Extract every 'nth' frame. This option will skip frames "
+                                      "when extracting faces. For example a value of 1 will "
+                                      "extract faces from every frame, a value of 10 will extract "
+                                      "faces from every 10th frame."})
         argument_list.append({"opts": ("-s", "--skip-existing"),
                               "action": "store_true",
                               "dest": "skip_existing",
diff --git a/scripts/extract.py b/scripts/extract.py
index ef3f87b..b88a184 100644
--- a/scripts/extract.py
+++ b/scripts/extract.py
@@ -39,6 +39,11 @@ class Extract():
             self.save_interval = self.args.save_interval
         logger.debug("Initialized %s", self.__class__.__name__)
 
+    @property
+    def skip_num(self):
+        """ Number of frames to skip if extract_every_n is passed """
+        return self.args.extract_every_n if hasattr(self.args, "extract_every_n") else 1
+
     def process(self):
         """ Perform the extraction process """
         logger.info('Starting, this may take a while...')
@@ -49,7 +54,7 @@ class Extract():
         self.run_extraction()
         save_thread.join()
         self.alignments.save()
-        Utils.finalize(self.images.images_found,
+        Utils.finalize(self.images.images_found // self.skip_num,
                        self.alignments.faces_count,
                        self.verify_output)
 
@@ -71,10 +76,16 @@ class Extract():
         """ Load the images """
         logger.debug("Load Images: Start")
         load_queue = queue_manager.get_queue("load")
+        idx = 0
         for filename, image in self.images.load():
+            idx += 1
             if load_queue.shutdown.is_set():
                 logger.debug("Load Queue: Stop signal received. Terminating")
                 break
+            if idx % self.skip_num != 0:
+                logger.trace("Skipping image '%s' due to extract_every_n = %s",
+                             filename, self.skip_num)
+                continue
             if image is None or not image.any():
                 logger.warning("Unable to open image. Skipping: '%s'", filename)
                 continue
@@ -184,7 +195,7 @@ class Extract():
         if processed != 0 and self.args.skip_faces:
             logger.info("Skipping frames with detected faces: %s", processed)
 
-        to_process = self.images.images_found - processed
+        to_process = (self.images.images_found - processed) // self.skip_num
         logger.debug("Items to be Processed: %s", to_process)
         if to_process == 0:
             logger.error("No frames to process. Exiting")
