commit 18177f712af80a4f1a286c896d5928b82334e100
Author: Kenneth Reitz <me@kennethreitz.org>
Date:   Fri Mar 2 18:03:14 2018 -0500

    omg it works
    
    Signed-off-by: Kenneth Reitz <me@kennethreitz.org>

diff --git a/pipenv/patched/piptools/repositories/pypi.py b/pipenv/patched/piptools/repositories/pypi.py
index fbf33047..8b8dea51 100755
--- a/pipenv/patched/piptools/repositories/pypi.py
+++ b/pipenv/patched/piptools/repositories/pypi.py
@@ -37,8 +37,9 @@ class PyPIRepository(BaseRepository):
     config), but any other PyPI mirror can be used if index_urls is
     changed/configured on the Finder.
     """
-    def __init__(self, pip_options, session):
+    def __init__(self, pip_options, session, use_json=True):
         self.session = session
+        self.use_json = use_json
 
         index_urls = [pip_options.index_url] + pip_options.extra_index_urls
         if pip_options.no_index:
@@ -63,6 +64,7 @@ class PyPIRepository(BaseRepository):
         # of all secondary dependencies for the given requirement, so we
         # only have to go to disk once for each requirement
         self._dependencies_cache = {}
+        self._json_dep_cache = {}
 
         # Setup file paths
         self.freshen_build_caches()
@@ -123,12 +125,52 @@ class PyPIRepository(BaseRepository):
             best_candidate.project, best_candidate.version, ireq.extras, ireq.markers, constraint=ireq.constraint
         )
 
+    def get_json_dependencies(self, ireq):
+        from pip.req import InstallRequirement
+
+        if not (is_pinned_requirement(ireq)):
+            raise TypeError('Expected pinned InstallRequirement, got {}'.format(ireq))
+
+        def gen():
+
+            url = str(ireq.link.comes_from)
+            url = url.replace('pypi.python.org', 'pypi.org')
+            url = url.replace('/simple/', '/pypi/')
+            url = '{0}json'.format(url)
+
+            r = self.session.get(url)
+
+            latest = list(r.json()['releases'].keys())[-1]
+            if str(ireq.req.specifier) == '=={0}'.format(latest):
+
+                for requires in r.json().get('info', {}).get('requires_dist', {}):
+                    i = InstallRequirement.from_line(requires)
+
+                    if 'extra' not in repr(i.markers):
+                        yield i
+
+        if ireq not in self._json_dep_cache:
+            self._json_dep_cache[ireq] = [g for g in gen()]
+
+        return set(self._json_dep_cache[ireq])
+
     def get_dependencies(self, ireq):
+        legacy_results = self.get_legacy_dependencies(ireq)
+        try:
+            json_results = self.get_json_dependencies(ireq)
+            legacy_results.update(json_results)
+        except TypeError:
+            pass
+
+        return legacy_results
+
+    def get_legacy_dependencies(self, ireq):
         """
         Given a pinned or an editable InstallRequirement, returns a set of
         dependencies (also InstallRequirements, but not necessarily pinned).
         They indicate the secondary dependencies for the given requirement.
         """
+
         if not (ireq.editable or is_pinned_requirement(ireq)):
             raise TypeError('Expected pinned or editable InstallRequirement, got {}'.format(ireq))
 
diff --git a/pipenv/patched/piptools/resolver.py b/pipenv/patched/piptools/resolver.py
index 297f00f2..3b5df483 100755
--- a/pipenv/patched/piptools/resolver.py
+++ b/pipenv/patched/piptools/resolver.py
@@ -270,6 +270,7 @@ class Resolver(object):
         Editable requirements will never be looked up, as they may have
         changed at any time.
         """
+
         if ireq.editable:
             for dependency in self.repository.get_dependencies(ireq):
                 yield dependency
@@ -294,7 +295,7 @@ class Resolver(object):
         if ireq not in self.dependency_cache:
             log.debug('  {} not in cache, need to check index'.format(format_requirement(ireq)), fg='yellow')
             dependencies = self.repository.get_dependencies(ireq)
-            self.dependency_cache[ireq] = sorted(str(ireq.req) for ireq in dependencies)
+            self.dependency_cache[ireq] = sorted('{0}; {1}'.format(str(ireq.req), str(ireq.markers)) if ireq.markers else str(ireq.req) for ireq in dependencies)
 
         # Example: ['Werkzeug>=0.9', 'Jinja2>=2.4']
         dependency_strings = self.dependency_cache[ireq]
diff --git a/pipenv/utils.py b/pipenv/utils.py
index 66fcead7..731758a6 100644
--- a/pipenv/utils.py
+++ b/pipenv/utils.py
@@ -306,7 +306,7 @@ def actually_resolve_reps(deps, index_lookup, markers_lookup, project, sources,
     pip_options, _ = pip_command.parse_args(pip_args)
 
     session = pip_command._build_session(pip_options)
-    pypi = PyPIRepository(pip_options=pip_options, session=session)
+    pypi = PyPIRepository(pip_options=pip_options, use_json=True, session=session)
 
     if verbose:
         logging.log.verbose = True
