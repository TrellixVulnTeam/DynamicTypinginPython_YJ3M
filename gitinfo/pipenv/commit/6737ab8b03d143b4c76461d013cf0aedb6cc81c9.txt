commit 6737ab8b03d143b4c76461d013cf0aedb6cc81c9
Author: Dan Ryan <dan@danryan.co>
Date:   Sun May 27 13:00:08 2018 -0400

    SpecifierSet logic fix
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/patched/piptools/repositories/pypi.py b/pipenv/patched/piptools/repositories/pypi.py
index cfdc4aa7..e73cb2d0 100644
--- a/pipenv/patched/piptools/repositories/pypi.py
+++ b/pipenv/patched/piptools/repositories/pypi.py
@@ -166,8 +166,7 @@ class PyPIRepository(BaseRepository):
         py_version = parse_version(os.environ.get('PIP_PYTHON_VERSION', str(sys.version_info[:3])))
         all_candidates = []
         for c in self.find_all_candidates(ireq.name):
-            python_specifier = SpecifierSet(c.requires_python)
-            if c.requires_python and not python_specifier.contains(py_version):
+            if c.requires_python and not SpecifierSet(c.requires_python).contains(py_version):
                 continue
             all_candidates.append(c)
 
diff --git a/tasks/vendoring/patches/patched/piptools.patch b/tasks/vendoring/patches/patched/piptools.patch
index 1d219032..e3ff1c35 100644
--- a/tasks/vendoring/patches/patched/piptools.patch
+++ b/tasks/vendoring/patches/patched/piptools.patch
@@ -19,7 +19,7 @@ index 4e6174c..75f9b49 100644
  # NOTE
  # We used to store the cache dir under ~/.pip-tools, which is not the
 diff --git a/pipenv/patched/piptools/repositories/pypi.py b/pipenv/patched/piptools/repositories/pypi.py
-index 1c4b943..a15c23b 100644
+index 1c4b943..29e771e 100644
 --- a/pipenv/patched/piptools/repositories/pypi.py
 +++ b/pipenv/patched/piptools/repositories/pypi.py
 @@ -4,6 +4,7 @@ from __future__ import (absolute_import, division, print_function,
@@ -129,7 +129,7 @@ index 1c4b943..a15c23b 100644
  
      def freshen_build_caches(self):
          """
-@@ -114,10 +163,20 @@ class PyPIRepository(BaseRepository):
+@@ -114,10 +163,19 @@ class PyPIRepository(BaseRepository):
          if ireq.editable:
              return ireq  # return itself as the best match
  
@@ -137,8 +137,7 @@ index 1c4b943..a15c23b 100644
 +        py_version = parse_version(os.environ.get('PIP_PYTHON_VERSION', str(sys.version_info[:3])))
 +        all_candidates = []
 +        for c in self.find_all_candidates(ireq.name):
-+            python_specifier = SpecifierSet(c.requires_python)
-+            if c.requires_python and not python_specifier.contains(py_version):
++            if c.requires_python and not SpecifierSet(c.requires_python).contains(py_version):
 +                continue
 +            all_candidates.append(c)
 +
@@ -152,7 +151,7 @@ index 1c4b943..a15c23b 100644
  
          # Reuses pip's internal candidate sort key to sort
          matching_candidates = [candidates_by_version[ver] for ver in matching_versions]
-@@ -126,11 +185,71 @@ class PyPIRepository(BaseRepository):
+@@ -126,11 +184,71 @@ class PyPIRepository(BaseRepository):
          best_candidate = max(matching_candidates, key=self.finder._candidate_sort_key)
  
          # Turn the candidate into a pinned InstallRequirement
@@ -227,7 +226,7 @@ index 1c4b943..a15c23b 100644
          """
          Given a pinned or an editable InstallRequirement, returns a set of
          dependencies (also InstallRequirements, but not necessarily pinned).
-@@ -139,6 +258,21 @@ class PyPIRepository(BaseRepository):
+@@ -139,6 +257,21 @@ class PyPIRepository(BaseRepository):
          if not (ireq.editable or is_pinned_requirement(ireq)):
              raise TypeError('Expected pinned or editable InstallRequirement, got {}'.format(ireq))
  
@@ -249,7 +248,7 @@ index 1c4b943..a15c23b 100644
          if ireq not in self._dependencies_cache:
              if ireq.editable and (ireq.source_dir and os.path.exists(ireq.source_dir)):
                  # No download_dir for locally available editable requirements.
-@@ -164,11 +298,14 @@ class PyPIRepository(BaseRepository):
+@@ -164,11 +297,14 @@ class PyPIRepository(BaseRepository):
                      download_dir=download_dir,
                      wheel_download_dir=self._wheel_download_dir,
                      session=self.session,
@@ -266,7 +265,7 @@ index 1c4b943..a15c23b 100644
                  )
              except TypeError:
                  # Pip >= 10 (new resolver!)
-@@ -190,14 +327,44 @@ class PyPIRepository(BaseRepository):
+@@ -190,14 +326,44 @@ class PyPIRepository(BaseRepository):
                      upgrade_strategy="to-satisfy-only",
                      force_reinstall=False,
                      ignore_dependencies=False,
@@ -313,7 +312,7 @@ index 1c4b943..a15c23b 100644
              reqset.cleanup_files()
          return set(self._dependencies_cache[ireq])
  
-@@ -224,17 +391,10 @@ class PyPIRepository(BaseRepository):
+@@ -224,17 +390,10 @@ class PyPIRepository(BaseRepository):
          matching_candidates = candidates_by_version[matching_versions[0]]
  
          return {
