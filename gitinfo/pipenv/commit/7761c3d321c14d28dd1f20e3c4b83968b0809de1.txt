commit 7761c3d321c14d28dd1f20e3c4b83968b0809de1
Author: Dan Ryan <dan@danryan.co>
Date:   Fri Jun 29 20:23:54 2018 -0400

    Fix patches
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/patched/piptools/resolver.py b/pipenv/patched/piptools/resolver.py
index 61c49f29..00b08705 100644
--- a/pipenv/patched/piptools/resolver.py
+++ b/pipenv/patched/piptools/resolver.py
@@ -281,12 +281,13 @@ class Resolver(object):
             return
         elif ireq.markers:
             for dependency in self.repository.get_dependencies(_iter_ireq):
-                dependency.prepared = False
+                # dependency.prepared = False
                 yield dependency
+            return
         elif ireq.extras:
             valid_markers = default_environment().keys()
             for dependency in self.repository.get_dependencies(_iter_ireq):
-                dependency.prepared = False
+                # dependency.prepared = False
                 if dependency.markers and not any(dependency.markers._markers[0][0].value.startswith(k) for k in valid_markers):
                     dependency.markers = None
                 if hasattr(ireq, 'extra'):
@@ -296,6 +297,7 @@ class Resolver(object):
                         ireq.extras = ireq.extra
 
                 yield dependency
+            return
         elif not is_pinned_requirement(ireq):
             raise TypeError('Expected pinned or editable requirement, got {}'.format(ireq))
 
@@ -306,8 +308,7 @@ class Resolver(object):
         if ireq not in self.dependency_cache:
             log.debug('  {} not in cache, need to check index'.format(format_requirement(ireq)), fg='yellow')
             dependencies = self.repository.get_dependencies(ireq)
-            import sys
-            self.dependency_cache[ireq] = sorted(format_requirement(ireq) for ireq in dependencies)
+            self.dependency_cache[ireq] = sorted(format_requirement(_ireq) for _ireq in dependencies)
 
         # Example: ['Werkzeug>=0.9', 'Jinja2>=2.4']
         dependency_strings = self.dependency_cache[ireq]
diff --git a/pipenv/patched/piptools/utils.py b/pipenv/patched/piptools/utils.py
index 4a16e30d..2f389eec 100644
--- a/pipenv/patched/piptools/utils.py
+++ b/pipenv/patched/piptools/utils.py
@@ -57,7 +57,11 @@ def simplify_markers(ireq):
         marker_list.append(tuple(_single_marker,))
     marker_str = ' and '.join(list(dedup(tuple(marker_list,)))) if marker_list else ''
     new_markers = Marker(marker_str)
-    return make_install_requirement(ireq.name, first(ireq.specifier).version, ireq.extras, new_markers, constraint=ireq.constraint)
+    ireq.markers = new_markers
+    new_ireq = InstallRequirement.from_line(format_requirement(ireq))
+    if ireq.constraint:
+        new_ireq.constraint = ireq.constraint
+    return new_ireq
 
 
 def clean_requires_python(candidates):
@@ -163,7 +167,7 @@ def format_requirement(ireq, marker=None):
     else:
         line = _requirement_to_str_lowercase_name(ireq.req)
 
-    if marker:
+    if marker and ';' not in line:
         line = '{}; {}'.format(line, marker)
 
     return line
diff --git a/tasks/vendoring/patches/patched/piptools.patch b/tasks/vendoring/patches/patched/piptools.patch
index cad127f5..289071aa 100644
--- a/tasks/vendoring/patches/patched/piptools.patch
+++ b/tasks/vendoring/patches/patched/piptools.patch
@@ -19,7 +19,7 @@ index 4e6174c..75f9b49 100644
  # NOTE
  # We used to store the cache dir under ~/.pip-tools, which is not the
 diff --git a/pipenv/patched/piptools/repositories/pypi.py b/pipenv/patched/piptools/repositories/pypi.py
-index 1c4b943..c922be1 10064
+index 1c4b943..c922be1 100644
 --- a/pipenv/patched/piptools/repositories/pypi.py
 +++ b/pipenv/patched/piptools/repositories/pypi.py
 @@ -4,6 +4,7 @@ from __future__ import (absolute_import, division, print_function,
@@ -406,7 +406,7 @@ index 1c4b943..c922be1 10064
      def allow_all_wheels(self):
          """
 diff --git a/pipenv/patched/piptools/resolver.py b/pipenv/patched/piptools/resolver.py
-index 05ec8fd..465414c 100644
+index 05ec8fd..3100f9d 100644
 --- a/pipenv/patched/piptools/resolver.py
 +++ b/pipenv/patched/piptools/resolver.py
 @@ -8,13 +8,14 @@ from itertools import chain, count
@@ -473,7 +473,7 @@ index 05ec8fd..465414c 100644
                  # Return a sorted, de-duped tuple of extras
                  combined_ireq.extras = tuple(sorted(set(tuple(combined_ireq.extras) + tuple(ireq.extras))))
              yield combined_ireq
-@@ -269,10 +274,28 @@ class Resolver(object):
+@@ -269,8 +274,28 @@ class Resolver(object):
          Editable requirements will never be looked up, as they may have
          changed at any time.
          """
@@ -481,16 +481,17 @@ index 05ec8fd..465414c 100644
          if ireq.editable:
 -            for dependency in self.repository.get_dependencies(ireq):
 +            for dependency in self.repository.get_dependencies(_iter_ireq):
-                 yield dependency
-             return
++                yield dependency
++            return
 +        elif ireq.markers:
 +            for dependency in self.repository.get_dependencies(_iter_ireq):
-+                dependency.prepared = False
++                # dependency.prepared = False
 +                yield dependency
++            return
 +        elif ireq.extras:
 +            valid_markers = default_environment().keys()
 +            for dependency in self.repository.get_dependencies(_iter_ireq):
-+                dependency.prepared = False
++                # dependency.prepared = False
 +                if dependency.markers and not any(dependency.markers._markers[0][0].value.startswith(k) for k in valid_markers):
 +                    dependency.markers = None
 +                if hasattr(ireq, 'extra'):
@@ -499,17 +500,15 @@ index 05ec8fd..465414c 100644
 +                    else:
 +                        ireq.extras = ireq.extra
 +
-+                yield dependency
+                 yield dependency
+             return
          elif not is_pinned_requirement(ireq):
-             raise TypeError('Expected pinned or editable requirement, got {}'.format(ireq))
- 
-@@ -283,14 +306,25 @@ class Resolver(object):
+@@ -283,14 +308,24 @@ class Resolver(object):
          if ireq not in self.dependency_cache:
              log.debug('  {} not in cache, need to check index'.format(format_requirement(ireq)), fg='yellow')
              dependencies = self.repository.get_dependencies(ireq)
 -            self.dependency_cache[ireq] = sorted(str(ireq.req) for ireq in dependencies)
-+            import sys
-+            self.dependency_cache[ireq] = sorted(format_requirement(ireq) for ireq in dependencies)
++            self.dependency_cache[ireq] = sorted(format_requirement(_ireq) for _ireq in dependencies)
  
          # Example: ['Werkzeug>=0.9', 'Jinja2>=2.4']
          dependency_strings = self.dependency_cache[ireq]
@@ -545,7 +544,7 @@ index 08dabe1..480ad1e 100644
          else:
              return self.repository.find_best_match(ireq, prereleases)
 diff --git a/pipenv/patched/piptools/utils.py b/pipenv/patched/piptools/utils.py
-index fde5816..8732673 100644
+index fde5816..23a05f2 100644
 --- a/pipenv/patched/piptools/utils.py
 +++ b/pipenv/patched/piptools/utils.py
 @@ -2,6 +2,7 @@
@@ -556,7 +555,7 @@ index fde5816..8732673 100644
  import os
  import sys
  from itertools import chain, groupby
-@@ -11,13 +12,75 @@ from contextlib import contextmanager
+@@ -11,13 +12,79 @@ from contextlib import contextmanager
  from ._compat import InstallRequirement
  
  from first import first
@@ -606,7 +605,11 @@ index fde5816..8732673 100644
 +        marker_list.append(tuple(_single_marker,))
 +    marker_str = ' and '.join(list(dedup(tuple(marker_list,)))) if marker_list else ''
 +    new_markers = Marker(marker_str)
-+    return make_install_requirement(ireq.name, first(ireq.specifier).version, ireq.extras, new_markers, constraint=ireq.constraint)
++    ireq.markers = new_markers
++    new_ireq = InstallRequirement.from_line(format_requirement(ireq))
++    if ireq.constraint:
++        new_ireq.constraint = ireq.constraint
++    return new_ireq
 +
 +
 +def clean_requires_python(candidates):
@@ -633,7 +636,7 @@ index fde5816..8732673 100644
  def key_from_ireq(ireq):
      """Get a standardized key for an InstallRequirement."""
      if ireq.req is None and ireq.link is not None:
-@@ -43,16 +106,51 @@ def comment(text):
+@@ -43,16 +110,51 @@ def comment(text):
      return style(text, fg='green')
  
  
@@ -689,15 +692,16 @@ index fde5816..8732673 100644
  
  
  def format_requirement(ireq, marker=None):
-@@ -63,10 +161,10 @@ def format_requirement(ireq, marker=None):
+@@ -63,10 +165,10 @@ def format_requirement(ireq, marker=None):
      if ireq.editable:
          line = '-e {}'.format(ireq.link)
      else:
 -        line = str(ireq.req).lower()
 +        line = _requirement_to_str_lowercase_name(ireq.req)
  
-     if marker:
+-    if marker:
 -        line = '{} ; {}'.format(line, marker)
++    if marker and ';' not in line:
 +        line = '{}; {}'.format(line, marker)
  
      return line
