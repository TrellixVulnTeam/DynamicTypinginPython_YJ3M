commit 9f71a1bfbe7a3c21588fb58b67509fa1e1991e58
Author: Dan Ryan <dan@danryan.co>
Date:   Sat Jun 30 21:39:46 2018 -0400

    Reimplement `get_workon_home` to save import
    
    - Pew import is super expensive
    - Fixes #2843
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/_compat.py b/pipenv/_compat.py
index fa9e0a1d..96026089 100644
--- a/pipenv/_compat.py
+++ b/pipenv/_compat.py
@@ -78,9 +78,6 @@ def pip_import(module_path, subimport=None, old_path=None):
     return _tmp
 
 
-vcs = pip_import('vcs', 'VcsSupport')
-
-
 class TemporaryDirectory(object):
     """Create and return a temporary directory.  This has the same
     behavior as mkdtemp but can be used as a context manager.  For
diff --git a/pipenv/core.py b/pipenv/core.py
index dec98d36..fbc2ae54 100644
--- a/pipenv/core.py
+++ b/pipenv/core.py
@@ -16,11 +16,8 @@ import delegator
 from first import first
 import pipfile
 from blindspin import spinner
-from requests.packages import urllib3
-from requests.packages.urllib3.exceptions import InsecureRequestWarning
 import six
 
-from .cmdparse import ScriptEmptyError
 from .project import Project, SourceNotFound
 from .utils import (
     convert_deps_to_pip,
@@ -135,6 +132,8 @@ def which(command, location=None, allow_global=False):
 
 # Disable warnings for Python 2.6.
 if 'urllib3' in globals():
+    import urllib3
+    from urllib3.exceptions import InsecureRequestWarning
     urllib3.disable_warnings(InsecureRequestWarning)
 project = Project(which=which)
 
@@ -2247,6 +2246,7 @@ def do_run(command, args, three=None, python=False, pypi_mirror=None):
 
     Args are appended to the command in [scripts] section of project if found.
     """
+    from .cmdparse import ScriptEmptyError
     # Ensure that virtualenv is available.
     ensure_project(three=three, python=python, validate=False, pypi_mirror=pypi_mirror)
     load_dot_env()
diff --git a/pipenv/project.py b/pipenv/project.py
index 03d160fd..a0841ce4 100644
--- a/pipenv/project.py
+++ b/pipenv/project.py
@@ -32,6 +32,7 @@ from .utils import (
     python_version,
     safe_expandvars,
     is_star,
+    get_workon_home,
 )
 from .environments import (
     PIPENV_MAX_DEPTH,
@@ -240,7 +241,6 @@ class Project(object):
 
     @classmethod
     def _get_virtualenv_location(cls, name):
-        from .patched.pew.pew import get_workon_home
         venv = get_workon_home() / name
         if not venv.exists():
             return ''
diff --git a/pipenv/utils.py b/pipenv/utils.py
index 3b906d02..ca5f3d5b 100644
--- a/pipenv/utils.py
+++ b/pipenv/utils.py
@@ -1279,3 +1279,14 @@ def fs_str(string):
 
 
 _fs_encoding = sys.getfilesystemencoding() or sys.getdefaultencoding()
+
+
+def get_workon_home():
+    from ._compat import Path
+    workon_home = os.environ.get('WORKON_HOME')
+    if not workon_home:
+        if os.name == 'nt':
+            workon_home = '~/.virtualenvs'
+        else:
+            workon_home = os.sep.join([os.environ.get('XDG_DATA_HOME', '~/.local/share'), 'virtualenvs'])
+    return Path(os.path.expandvars(workon_home)).expanduser()
