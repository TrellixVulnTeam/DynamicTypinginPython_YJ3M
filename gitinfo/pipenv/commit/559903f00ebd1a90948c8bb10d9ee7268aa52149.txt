commit 559903f00ebd1a90948c8bb10d9ee7268aa52149
Author: Tzu-ping Chung <uranusjr@gmail.com>
Date:   Fri Aug 10 13:03:34 2018 +0800

    Improve "run" behavior on Windows
    
    Some Windows users are used to launch files without specifying a command,
    e.g.::
    
        > my-script.py
    
    This works in the shell because Windows will automatically choose an
    command based on file association, and with newer Python versions, the Py
    Launcher (py.exe) automatically chooses the correct Python based on
    shebang-parsing.
    
    A similar syntax, unfortunately, does not currently work in Pipenv::
    
        > pipenv run my-script.py
    
    Since my-script.py will be treated as a real application by the subprocess
    module.
    
    This patch catch Windows error 193 during subprocess initialization, and
    fall back to use COMSPEC (shell=True) when it happens, to provide better
    support for this use case.

diff --git a/news/2718.behavior b/news/2718.behavior
new file mode 100644
index 00000000..c00b1d46
--- /dev/null
+++ b/news/2718.behavior
@@ -0,0 +1 @@
+Fallback to shell mode if `run` fails with Windows error 193 to handle non-executable commands. This should improve usability on Windows, where some users run non-executable files without specifying a command, relying on Windows file association to choose the current command.
diff --git a/pipenv/core.py b/pipenv/core.py
index db60ee94..9a74bd9a 100644
--- a/pipenv/core.py
+++ b/pipenv/core.py
@@ -2087,15 +2087,30 @@ def inline_activate_virtual_environment():
         os.environ["VIRTUAL_ENV"] = root
 
 
-def do_run_nt(script):
+def _launch_windows_subprocess(script):
     import subprocess
 
     command = system_which(script.command)
     options = {"universal_newlines": True}
-    if command:  # Try to use CreateProcess directly if possible.
-        p = subprocess.Popen([command] + script.args, **options)
-    else:  # Command not found, maybe this is a shell built-in?
-        p = subprocess.Popen(script.cmdify(), shell=True, **options)
+
+    # Command not found, maybe this is a shell built-in?
+    if not command:
+        return subprocess.Popen(script.cmdify(), shell=True, **options)
+
+    # Try to use CreateProcess directly if possible.
+    try:
+        return subprocess.Popen([command] + script.args, **options)
+    except WindowsError as e:
+        if e.winerror != 193:
+            raise
+
+    # Windows error 193 "Command is not a valid Win32 application".
+    # Try shell mode to use Windows's file association for file launch.
+    return subprocess.Popen(script.cmdify(), shell=True, **options)
+
+
+def do_run_nt(script):
+    p = _launch_windows_subprocess(script)
     p.communicate()
     sys.exit(p.returncode)
 
