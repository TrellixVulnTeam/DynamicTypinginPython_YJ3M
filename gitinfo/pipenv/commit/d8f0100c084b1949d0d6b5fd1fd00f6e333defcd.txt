commit d8f0100c084b1949d0d6b5fd1fd00f6e333defcd
Author: Dan Ryan <dan.ryan@canonical.com>
Date:   Mon Apr 27 15:28:30 2020 -0400

    Update patches for pip and piptools
    
    Signed-off-by: Dan Ryan <dan.ryan@canonical.com>

diff --git a/tasks/vendoring/patches/patched/_post-pip-update-pep425tags.patch b/tasks/vendoring/patches/patched/_post-pip-update-pep425tags.patch
deleted file mode 100644
index b552a7b0..00000000
--- a/tasks/vendoring/patches/patched/_post-pip-update-pep425tags.patch
+++ /dev/null
@@ -1,50 +0,0 @@
-diff --git a/pipenv/patched/notpip/_internal/pep425tags.py b/pipenv/patched/notpip/_internal/pep425tags.py
-index 369275a8..16d041d9 100644
---- a/pipenv/patched/notpip/_internal/pep425tags.py
-+++ b/pipenv/patched/notpip/_internal/pep425tags.py
-@@ -3,6 +3,7 @@ from __future__ import absolute_import
- 
- import distutils.util
- import logging
-+import os
- import platform
- import re
- import sys
-@@ -170,8 +171,9 @@ def is_linux_armhf():
-         return False
-     # hard-float ABI can be detected from the ELF header of the running
-     # process
-+    sys_executable = os.environ.get('PIP_PYTHON_PATH', sys.executable)
-     try:
--        with open(sys.executable, 'rb') as f:
-+        with open(sys_executable, 'rb') as f:
-             elf_header_raw = f.read(40)  # read 40 first bytes of ELF header
-     except (IOError, OSError, TypeError):
-         return False
-@@ -205,7 +207,7 @@ def is_manylinux1_compatible():
-         pass
- 
-     # Check glibc version. CentOS 5 uses glibc 2.5.
--    return pip._internal.utils.glibc.have_compatible_glibc(2, 5)
-+    return pipenv.patched.notpip._internal.utils.glibc.have_compatible_glibc(2, 5)
- 
- 
- def is_manylinux2010_compatible():
-@@ -223,7 +225,7 @@ def is_manylinux2010_compatible():
-         pass
- 
-     # Check glibc version. CentOS 6 uses glibc 2.12.
--    return pip._internal.utils.glibc.have_compatible_glibc(2, 12)
-+    return pipenv.patched.notpip._internal.utils.glibc.have_compatible_glibc(2, 12)
- 
- 
- def is_manylinux2014_compatible():
-@@ -249,7 +251,7 @@ def is_manylinux2014_compatible():
-         pass
- 
-     # Check glibc version. CentOS 7 uses glibc 2.17.
--    return pip._internal.utils.glibc.have_compatible_glibc(2, 17)
-+    return pipenv.patched.notpip._internal.utils.glibc.have_compatible_glibc(2, 17)
- 
- 
- def get_darwin_arches(major, minor, machine):
diff --git a/tasks/vendoring/patches/patched/pip19.patch b/tasks/vendoring/patches/patched/pip20.patch
similarity index 86%
rename from tasks/vendoring/patches/patched/pip19.patch
rename to tasks/vendoring/patches/patched/pip20.patch
index fa0a7dea..940647f0 100644
--- a/tasks/vendoring/patches/patched/pip19.patch
+++ b/tasks/vendoring/patches/patched/pip20.patch
@@ -1,5 +1,5 @@
 diff --git a/pipenv/patched/pip/_internal/build_env.py b/pipenv/patched/pip/_internal/build_env.py
-index 5e6dc460..0412f635 100644
+index f55f0e6b..dc7ece39 100644
 --- a/pipenv/patched/pip/_internal/build_env.py
 +++ b/pipenv/patched/pip/_internal/build_env.py
 @@ -169,8 +169,9 @@ class BuildEnvironment(object):
@@ -13,11 +13,98 @@ index 5e6dc460..0412f635 100644
              '--ignore-installed', '--no-user', '--prefix', prefix.path,
              '--no-warn-script-location',
          ]  # type: List[str]
+diff --git a/pipenv/patched/pip/_internal/commands/__init__.py b/pipenv/patched/pip/_internal/commands/__init__.py
+index 2a311f8f..9f2f1aaa 100644
+--- a/pipenv/patched/pip/_internal/commands/__init__.py
++++ b/pipenv/patched/pip/_internal/commands/__init__.py
+@@ -21,7 +21,7 @@ CommandInfo = namedtuple('CommandInfo', 'module_path, class_name, summary')
+ 
+ # The ordering matters for help display.
+ #    Also, even though the module path starts with the same
+-# "pip._internal.commands" prefix in each case, we include the full path
++# "pipenv.patched.notpip._internal.commands" prefix in each case, we include the full path
+ # because it makes testing easier (specifically when modifying commands_dict
+ # in test setup / teardown by adding info for a FakeCommand class defined
+ # in a test-related module).
+@@ -29,59 +29,59 @@ CommandInfo = namedtuple('CommandInfo', 'module_path, class_name, summary')
+ # so that the ordering won't be lost when using Python 2.7.
+ commands_dict = OrderedDict([
+     ('install', CommandInfo(
+-        'pip._internal.commands.install', 'InstallCommand',
++        'pipenv.patched.notpip._internal.commands.install', 'InstallCommand',
+         'Install packages.',
+     )),
+     ('download', CommandInfo(
+-        'pip._internal.commands.download', 'DownloadCommand',
++        'pipenv.patched.notpip._internal.commands.download', 'DownloadCommand',
+         'Download packages.',
+     )),
+     ('uninstall', CommandInfo(
+-        'pip._internal.commands.uninstall', 'UninstallCommand',
++        'pipenv.patched.notpip._internal.commands.uninstall', 'UninstallCommand',
+         'Uninstall packages.',
+     )),
+     ('freeze', CommandInfo(
+-        'pip._internal.commands.freeze', 'FreezeCommand',
++        'pipenv.patched.notpip._internal.commands.freeze', 'FreezeCommand',
+         'Output installed packages in requirements format.',
+     )),
+     ('list', CommandInfo(
+-        'pip._internal.commands.list', 'ListCommand',
++        'pipenv.patched.notpip._internal.commands.list', 'ListCommand',
+         'List installed packages.',
+     )),
+     ('show', CommandInfo(
+-        'pip._internal.commands.show', 'ShowCommand',
++        'pipenv.patched.notpip._internal.commands.show', 'ShowCommand',
+         'Show information about installed packages.',
+     )),
+     ('check', CommandInfo(
+-        'pip._internal.commands.check', 'CheckCommand',
++        'pipenv.patched.notpip._internal.commands.check', 'CheckCommand',
+         'Verify installed packages have compatible dependencies.',
+     )),
+     ('config', CommandInfo(
+-        'pip._internal.commands.configuration', 'ConfigurationCommand',
++        'pipenv.patched.notpip._internal.commands.configuration', 'ConfigurationCommand',
+         'Manage local and global configuration.',
+     )),
+     ('search', CommandInfo(
+-        'pip._internal.commands.search', 'SearchCommand',
++        'pipenv.patched.notpip._internal.commands.search', 'SearchCommand',
+         'Search PyPI for packages.',
+     )),
+     ('wheel', CommandInfo(
+-        'pip._internal.commands.wheel', 'WheelCommand',
++        'pipenv.patched.notpip._internal.commands.wheel', 'WheelCommand',
+         'Build wheels from your requirements.',
+     )),
+     ('hash', CommandInfo(
+-        'pip._internal.commands.hash', 'HashCommand',
++        'pipenv.patched.notpip._internal.commands.hash', 'HashCommand',
+         'Compute hashes of package archives.',
+     )),
+     ('completion', CommandInfo(
+-        'pip._internal.commands.completion', 'CompletionCommand',
++        'pipenv.patched.notpip._internal.commands.completion', 'CompletionCommand',
+         'A helper command used for command completion.',
+     )),
+     ('debug', CommandInfo(
+-        'pip._internal.commands.debug', 'DebugCommand',
++        'pipenv.patched.notpip._internal.commands.debug', 'DebugCommand',
+         'Show information useful for debugging.',
+     )),
+     ('help', CommandInfo(
+-        'pip._internal.commands.help', 'HelpCommand',
++        'pipenv.patched.notpip._internal.commands.help', 'HelpCommand',
+         'Show help for commands.',
+     )),
+ ])  # type: OrderedDict[str, CommandInfo]
 diff --git a/pipenv/patched/pip/_internal/commands/install.py b/pipenv/patched/pip/_internal/commands/install.py
-index 5842d18d..4e56d0bb 100644
+index 02a187c8..f917e645 100644
 --- a/pipenv/patched/pip/_internal/commands/install.py
 +++ b/pipenv/patched/pip/_internal/commands/install.py
-@@ -388,7 +388,7 @@ class InstallCommand(RequirementCommand):
+@@ -337,7 +337,7 @@ class InstallCommand(RequirementCommand):
                  else:
                      # If we're not replacing an already installed pip,
                      # we're not modifying it.
@@ -26,11 +113,11 @@ index 5842d18d..4e56d0bb 100644
                  protect_pip_from_modification_on_windows(
                      modifying_pip=modifying_pip
                  )
-diff --git a/pipenv/patched/pip/_internal/index.py b/pipenv/patched/pip/_internal/index.py
-index 897444aa..4c61043c 100644
---- a/pipenv/patched/pip/_internal/index.py
-+++ b/pipenv/patched/pip/_internal/index.py
-@@ -119,6 +119,7 @@ class LinkEvaluator(object):
+diff --git a/pipenv/patched/pip/_internal/index/package_finder.py b/pipenv/patched/pip/_internal/index/package_finder.py
+index a74d78db..11128f4d 100644
+--- a/pipenv/patched/pip/_internal/index/package_finder.py
++++ b/pipenv/patched/pip/_internal/index/package_finder.py
+@@ -121,6 +121,7 @@ class LinkEvaluator(object):
          target_python,   # type: TargetPython
          allow_yanked,    # type: bool
          ignore_requires_python=None,  # type: Optional[bool]
@@ -38,7 +125,7 @@ index 897444aa..4c61043c 100644
      ):
          # type: (...) -> None
          """
-@@ -137,15 +138,20 @@ class LinkEvaluator(object):
+@@ -139,15 +140,20 @@ class LinkEvaluator(object):
          :param ignore_requires_python: Whether to ignore incompatible
              PEP 503 "data-requires-python" values in HTML links. Defaults
              to False.
@@ -59,7 +146,7 @@ index 897444aa..4c61043c 100644
  
          self.project_name = project_name
  
-@@ -176,10 +182,10 @@ class LinkEvaluator(object):
+@@ -178,10 +184,10 @@ class LinkEvaluator(object):
                  return (False, 'not a file')
              if ext not in SUPPORTED_EXTENSIONS:
                  return (False, 'unsupported archive format: %s' % ext)
@@ -72,7 +159,7 @@ index 897444aa..4c61043c 100644
                  return (False, 'macosx10 one')
              if ext == WHEEL_EXTENSION:
                  try:
-@@ -191,7 +197,7 @@ class LinkEvaluator(object):
+@@ -193,7 +199,7 @@ class LinkEvaluator(object):
                      return (False, reason)
  
                  supported_tags = self._target_python.get_tags()
@@ -81,7 +168,7 @@ index 897444aa..4c61043c 100644
                      # Include the wheel's tags in the reason string to
                      # simplify troubleshooting compatibility issues.
                      file_tags = wheel.get_formatted_file_tags()
-@@ -228,7 +234,7 @@ class LinkEvaluator(object):
+@@ -230,7 +236,7 @@ class LinkEvaluator(object):
              link, version_info=self._target_python.py_version_info,
              ignore_requires_python=self._ignore_requires_python,
          )
@@ -90,9 +177,9 @@ index 897444aa..4c61043c 100644
              # Return None for the reason text to suppress calling
              # _log_skipped_link().
              return (False, None)
-@@ -479,8 +485,8 @@ class CandidateEvaluator(object):
-             project_name=self._project_name,
-         )
+@@ -483,8 +489,8 @@ class CandidateEvaluator(object):
+ 
+         return sorted(filtered_applicable_candidates, key=self._sort_key)
  
 -    def _sort_key(self, candidate):
 -        # type: (InstallationCandidate) -> CandidateSortingKey
@@ -101,7 +188,7 @@ index 897444aa..4c61043c 100644
          """
          Function to pass as the `key` argument to a call to sorted() to sort
          InstallationCandidates by preference.
-@@ -518,14 +524,18 @@ class CandidateEvaluator(object):
+@@ -522,14 +528,18 @@ class CandidateEvaluator(object):
          if link.is_wheel:
              # can raise InvalidWheelFilename
              wheel = Wheel(link.filename)
@@ -122,7 +209,7 @@ index 897444aa..4c61043c 100644
              if wheel.build_tag is not None:
                  match = re.match(r'^(\d+)(.*)$', wheel.build_tag)
                  build_tag_groups = match.groups()
-@@ -603,6 +613,7 @@ class PackageFinder(object):
+@@ -607,6 +617,7 @@ class PackageFinder(object):
          format_control=None,  # type: Optional[FormatControl]
          candidate_prefs=None,         # type: CandidatePreferences
          ignore_requires_python=None,  # type: Optional[bool]
@@ -130,7 +217,7 @@ index 897444aa..4c61043c 100644
      ):
          # type: (...) -> None
          """
-@@ -617,6 +628,8 @@ class PackageFinder(object):
+@@ -621,6 +632,8 @@ class PackageFinder(object):
          """
          if candidate_prefs is None:
              candidate_prefs = CandidatePreferences()
@@ -139,7 +226,7 @@ index 897444aa..4c61043c 100644
  
          format_control = format_control or FormatControl(set(), set())
  
-@@ -625,12 +638,16 @@ class PackageFinder(object):
+@@ -629,12 +642,16 @@ class PackageFinder(object):
          self._ignore_requires_python = ignore_requires_python
          self._link_collector = link_collector
          self._target_python = target_python
@@ -156,7 +243,7 @@ index 897444aa..4c61043c 100644
      # Don't include an allow_yanked default value to make sure each call
      # site considers whether yanked releases are allowed. This also causes
      # that decision to be made explicit in the calling code, which helps
-@@ -668,6 +685,23 @@ class PackageFinder(object):
+@@ -672,6 +689,23 @@ class PackageFinder(object):
              ignore_requires_python=selection_prefs.ignore_requires_python,
          )
  
@@ -180,7 +267,7 @@ index 897444aa..4c61043c 100644
      @property
      def search_scope(self):
          # type: () -> SearchScope
-@@ -715,6 +749,7 @@ class PackageFinder(object):
+@@ -719,6 +753,7 @@ class PackageFinder(object):
              target_python=self._target_python,
              allow_yanked=self._allow_yanked,
              ignore_requires_python=self._ignore_requires_python,
@@ -188,7 +275,7 @@ index 897444aa..4c61043c 100644
          )
  
      def _sort_links(self, links):
-@@ -763,6 +798,7 @@ class PackageFinder(object):
+@@ -767,6 +802,7 @@ class PackageFinder(object):
              # Convert the Text result to str since InstallationCandidate
              # accepts str.
              version=str(result),
@@ -197,10 +284,10 @@ index 897444aa..4c61043c 100644
  
      def evaluate_links(self, link_evaluator, links):
 diff --git a/pipenv/patched/pip/_internal/legacy_resolve.py b/pipenv/patched/pip/_internal/legacy_resolve.py
-index c24158f4..37c3197f 100644
+index ca269121..999922b8 100644
 --- a/pipenv/patched/pip/_internal/legacy_resolve.py
 +++ b/pipenv/patched/pip/_internal/legacy_resolve.py
-@@ -126,6 +126,7 @@ class Resolver(object):
+@@ -121,6 +121,7 @@ class Resolver(object):
          force_reinstall,  # type: bool
          upgrade_strategy,  # type: str
          py_version_info=None,  # type: Optional[Tuple[int, ...]]
@@ -208,7 +295,7 @@ index c24158f4..37c3197f 100644
      ):
          # type: (...) -> None
          super(Resolver, self).__init__()
-@@ -152,6 +153,10 @@ class Resolver(object):
+@@ -143,6 +144,10 @@ class Resolver(object):
          self.ignore_requires_python = ignore_requires_python
          self.use_user_site = use_user_site
          self._make_install_req = make_install_req
@@ -218,18 +305,16 @@ index c24158f4..37c3197f 100644
 +            self.ignore_requires_python = True
  
          self._discovered_dependencies = \
-             defaultdict(list)  # type: DefaultDict[str, List]
-@@ -344,7 +349,8 @@ class Resolver(object):
-     def _resolve_one(
+             defaultdict(list)  # type: DiscoveredDependencies
+@@ -313,6 +318,7 @@ class Resolver(object):
          self,
          requirement_set,  # type: RequirementSet
--        req_to_install  # type: InstallRequirement
-+        req_to_install,  # type: InstallRequirement
+         req_to_install,  # type: InstallRequirement
 +        ignore_requires_python=False,  # type: bool
      ):
          # type: (...) -> List[InstallRequirement]
          """Prepare a single requirements file.
-@@ -368,11 +374,21 @@ class Resolver(object):
+@@ -336,11 +342,21 @@ class Resolver(object):
          dist = abstract_dist.get_pkg_resources_distribution()
          # This will raise UnsupportedPythonVersion if the given Python
          # version isn't compatible with the distribution's Requires-Python.
@@ -253,14 +338,15 @@ index c24158f4..37c3197f 100644
          more_reqs = []  # type: List[InstallRequirement]
  
          def add_req(subreq, extras_requested):
-@@ -397,9 +413,13 @@ class Resolver(object):
-             # can refer to it when adding dependencies.
-             if not requirement_set.has_requirement(req_to_install.name):
+@@ -367,9 +383,14 @@ class Resolver(object):
                  # 'unnamed' requirements will get added here
+                 # 'unnamed' requirements can only come from being directly
+                 # provided by the user.
++                req_to_install.is_direct = True
+                 assert req_to_install.is_direct
 +                available_requested = sorted(
 +                    set(dist.extras) & set(req_to_install.extras)
 +                )
-                 req_to_install.is_direct = True
                  requirement_set.add_requirement(
                      req_to_install, parent_req_name=None,
 +                    extras_requested=available_requested,
@@ -268,60 +354,60 @@ index c24158f4..37c3197f 100644
  
              if not self.ignore_dependencies:
 diff --git a/pipenv/patched/pip/_internal/models/candidate.py b/pipenv/patched/pip/_internal/models/candidate.py
-index 4d49604d..cdfe65aa 100644
+index 1dc1a576..4cc06026 100644
 --- a/pipenv/patched/pip/_internal/models/candidate.py
 +++ b/pipenv/patched/pip/_internal/models/candidate.py
-@@ -16,11 +16,12 @@ class InstallationCandidate(KeyBasedCompareMixin):
+@@ -12,11 +12,12 @@ class InstallationCandidate(KeyBasedCompareMixin):
      """Represents a potential "candidate" for installation.
      """
  
--    def __init__(self, project, version, link):
--        # type: (Any, str, Link) -> None
-+    def __init__(self, project, version, link, requires_python=None):
-+        # type: (Any, str, Link, Any) -> None
-         self.project = project
+-    def __init__(self, name, version, link):
+-        # type: (str, str, Link) -> None
++    def __init__(self, name, version, link, requies_python=None):
++        # type: (str, str, Link, Any) -> None
+         self.name = name
          self.version = parse_version(version)  # type: _BaseVersion
          self.link = link
 +        self.requires_python = requires_python
  
          super(InstallationCandidate, self).__init__(
-             key=(self.project, self.version, self.link),
+             key=(self.name, self.version, self.link),
 diff --git a/pipenv/patched/pip/_internal/operations/prepare.py b/pipenv/patched/pip/_internal/operations/prepare.py
-index d0930458..91527ae8 100644
+index 0b61f205..ddfb75a6 100644
 --- a/pipenv/patched/pip/_internal/operations/prepare.py
 +++ b/pipenv/patched/pip/_internal/operations/prepare.py
-@@ -140,14 +140,7 @@ class RequirementPreparer(object):
+@@ -429,14 +429,7 @@ class RequirementPreparer(object):
              # FIXME: this won't upgrade when there's an existing
              # package unpacked in `req.source_dir`
              if os.path.exists(os.path.join(req.source_dir, 'setup.py')):
 -                raise PreviousBuildDirError(
--                    "pip can't proceed with requirements '%s' due to a"
--                    " pre-existing build directory (%s). This is "
+-                    "pip can't proceed with requirements '{}' due to a"
+-                    " pre-existing build directory ({}). This is "
 -                    "likely due to a previous installation that failed"
 -                    ". pip is being responsible and not assuming it "
 -                    "can delete this. Please delete it and try again."
--                    % (req, req.source_dir)
+-                    .format(req, req.source_dir)
 -                )
 +                rmtree(req.source_dir)
  
              # Now that we have the real link, we can tell what kind of
              # requirements we have and raise some more informative errors
 diff --git a/pipenv/patched/pip/_internal/req/req_set.py b/pipenv/patched/pip/_internal/req/req_set.py
-index b34a2bb1..afcd2e4f 100644
+index 087ac592..01e7394a 100644
 --- a/pipenv/patched/pip/_internal/req/req_set.py
 +++ b/pipenv/patched/pip/_internal/req/req_set.py
 @@ -24,8 +24,8 @@ logger = logging.getLogger(__name__)
  
  class RequirementSet(object):
  
--    def __init__(self, require_hashes=False, check_supported_wheels=True):
--        # type: (bool, bool) -> None
-+    def __init__(self, require_hashes=False, check_supported_wheels=True, ignore_compatibility=True):
-+        # type: (bool) -> None
+-    def __init__(self, check_supported_wheels=True):
+-        # type: (bool) -> None
++    def __init__(self, check_supported_wheels=True, ignore_compatibility=True):
++        # type: (bool, bool) -> None
          """Create a RequirementSet.
          """
  
-@@ -36,6 +36,9 @@ class RequirementSet(object):
+@@ -35,6 +35,9 @@ class RequirementSet(object):
          self.unnamed_requirements = []  # type: List[InstallRequirement]
          self.successfully_downloaded = []  # type: List[InstallRequirement]
          self.reqs_to_cleanup = []  # type: List[InstallRequirement]
@@ -331,7 +417,7 @@ index b34a2bb1..afcd2e4f 100644
  
      def __str__(self):
          # type: () -> str
-@@ -199,7 +202,7 @@ class RequirementSet(object):
+@@ -198,7 +201,7 @@ class RequirementSet(object):
          if project_name in self.requirements:
              return self.requirements[project_name]
  
@@ -374,10 +460,10 @@ index 7767111a..52738e16 100644
              },
          },
 diff --git a/pipenv/patched/pip/_internal/utils/misc.py b/pipenv/patched/pip/_internal/utils/misc.py
-index b8482635..2fae4e08 100644
+index 4a581601..ef0c127f 100644
 --- a/pipenv/patched/pip/_internal/utils/misc.py
 +++ b/pipenv/patched/pip/_internal/utils/misc.py
-@@ -136,8 +136,8 @@ def get_prog():
+@@ -132,8 +132,8 @@ def get_prog():
  @retry(stop_max_delay=3000, wait_fixed=500)
  def rmtree(dir, ignore_errors=False):
      # type: (str, bool) -> None
@@ -410,7 +496,7 @@ index 68aa86ed..8577d387 100644
  
  
 diff --git a/pipenv/patched/pip/_internal/utils/setuptools_build.py b/pipenv/patched/pip/_internal/utils/setuptools_build.py
-index 12d866e0..28649a4d 100644
+index 4147a650..f05fb11c 100644
 --- a/pipenv/patched/pip/_internal/utils/setuptools_build.py
 +++ b/pipenv/patched/pip/_internal/utils/setuptools_build.py
 @@ -1,3 +1,4 @@
@@ -426,16 +512,16 @@ index 12d866e0..28649a4d 100644
 +    sys_executable = os.environ.get('PIP_PYTHON_PATH', sys.executable)
 +    args = [sys_executable]
      if unbuffered_output:
-         args.append('-u')
-     args.extend(['-c', _SETUPTOOLS_SHIM.format(setup_py_path)])
+         args += ["-u"]
+     args += ["-c", _SETUPTOOLS_SHIM.format(setup_py_path)]
 diff --git a/pipenv/patched/pip/_internal/utils/temp_dir.py b/pipenv/patched/pip/_internal/utils/temp_dir.py
-index 77d40be6..8a32cf2d 100644
+index 65e41bc7..9eabf28e 100644
 --- a/pipenv/patched/pip/_internal/utils/temp_dir.py
 +++ b/pipenv/patched/pip/_internal/utils/temp_dir.py
-@@ -8,9 +8,11 @@ import itertools
- import logging
- import os.path
- import tempfile
+@@ -8,9 +8,11 @@ import tempfile
+ from contextlib import contextmanager
+ 
+ from pip._vendor.contextlib2 import ExitStack
 +import warnings
  
  from pip._internal.utils.misc import rmtree
@@ -443,15 +529,19 @@ index 77d40be6..8a32cf2d 100644
 +from pipenv.vendor.vistir.compat import finalize, ResourceWarning
  
  if MYPY_CHECK_RUNNING:
-     from typing import Optional
-@@ -60,6 +62,20 @@ class TempDirectory(object):
+     from typing import Any, Dict, Iterator, Optional, TypeVar
+@@ -119,11 +121,25 @@ class TempDirectory(object):
          self._deleted = False
          self.delete = delete
          self.kind = kind
 +        self._finalizer = None
 +        if self._path:
 +            self._register_finalizer()
-+
+ 
+         if globally_managed:
+             assert _tempdir_manager is not None
+             _tempdir_manager.enter_context(self)
+ 
 +    def _register_finalizer(self):
 +        if self.delete and self._path:
 +            self._finalizer = finalize(
@@ -462,10 +552,11 @@ index 77d40be6..8a32cf2d 100644
 +            )
 +        else:
 +            self._finalizer = None
- 
++
      @property
      def path(self):
-@@ -92,12 +108,28 @@ class TempDirectory(object):
+         # type: () -> str
+@@ -166,13 +182,29 @@ class TempDirectory(object):
          logger.debug("Created temporary directory: {}".format(path))
          return path
  
@@ -482,6 +573,7 @@ index 77d40be6..8a32cf2d 100644
 +                warnings.warn(warn_message, ResourceWarning)
 +
      def cleanup(self):
+         # type: () -> None
          """Remove the temporary directory created and reset state
          """
 -        self._deleted = True
@@ -497,97 +589,3 @@ index 77d40be6..8a32cf2d 100644
  
  
  class AdjacentTempDirectory(TempDirectory):
-@@ -169,4 +201,4 @@ class AdjacentTempDirectory(TempDirectory):
-             )
- 
-         logger.debug("Created temporary directory: {}".format(path))
--        return path
-+        return path
-\ No newline at end of file
-diff --git a/pipenv/patched/pip/_internal/commands/__init__.py b/pipenv/patched/pip/_internal/commands/__init__.py
-index abcafa55..ca155a94 100644
---- a/pipenv/patched/pip/_internal/commands/__init__.py
-+++ b/pipenv/patched/pip/_internal/commands/__init__.py
-@@ -21,7 +21,7 @@ CommandInfo = namedtuple('CommandInfo', 'module_path, class_name, summary')
- 
- # The ordering matters for help display.
- #    Also, even though the module path starts with the same
--# "pip._internal.commands" prefix in each case, we include the full path
-+# "pipenv.patched.notpip._internal.commands" prefix in each case, we include the full path
- # because it makes testing easier (specifically when modifying commands_dict
- # in test setup / teardown by adding info for a FakeCommand class defined
- # in a test-related module).
-@@ -29,59 +29,59 @@ CommandInfo = namedtuple('CommandInfo', 'module_path, class_name, summary')
- # so that the ordering won't be lost when using Python 2.7.
- commands_dict = OrderedDict([
-     ('install', CommandInfo(
--        'pip._internal.commands.install', 'InstallCommand',
-+        'pipenv.patched.notpip._internal.commands.install', 'InstallCommand',
-         'Install packages.',
-     )),
-     ('download', CommandInfo(
--        'pip._internal.commands.download', 'DownloadCommand',
-+        'pipenv.patched.notpip._internal.commands.download', 'DownloadCommand',
-         'Download packages.',
-     )),
-     ('uninstall', CommandInfo(
--        'pip._internal.commands.uninstall', 'UninstallCommand',
-+        'pipenv.patched.notpip._internal.commands.uninstall', 'UninstallCommand',
-         'Uninstall packages.',
-     )),
-     ('freeze', CommandInfo(
--        'pip._internal.commands.freeze', 'FreezeCommand',
-+        'pipenv.patched.notpip._internal.commands.freeze', 'FreezeCommand',
-         'Output installed packages in requirements format.',
-     )),
-     ('list', CommandInfo(
--        'pip._internal.commands.list', 'ListCommand',
-+        'pipenv.patched.notpip._internal.commands.list', 'ListCommand',
-         'List installed packages.',
-     )),
-     ('show', CommandInfo(
--        'pip._internal.commands.show', 'ShowCommand',
-+        'pipenv.patched.notpip._internal.commands.show', 'ShowCommand',
-         'Show information about installed packages.',
-     )),
-     ('check', CommandInfo(
--        'pip._internal.commands.check', 'CheckCommand',
-+        'pipenv.patched.notpip._internal.commands.check', 'CheckCommand',
-         'Verify installed packages have compatible dependencies.',
-     )),
-     ('config', CommandInfo(
--        'pip._internal.commands.configuration', 'ConfigurationCommand',
-+        'pipenv.patched.notpip._internal.commands.configuration', 'ConfigurationCommand',
-         'Manage local and global configuration.',
-     )),
-     ('search', CommandInfo(
--        'pip._internal.commands.search', 'SearchCommand',
-+        'pipenv.patched.notpip._internal.commands.search', 'SearchCommand',
-         'Search PyPI for packages.',
-     )),
-     ('wheel', CommandInfo(
--        'pip._internal.commands.wheel', 'WheelCommand',
-+        'pipenv.patched.notpip._internal.commands.wheel', 'WheelCommand',
-         'Build wheels from your requirements.',
-     )),
-     ('hash', CommandInfo(
--        'pip._internal.commands.hash', 'HashCommand',
-+        'pipenv.patched.notpip._internal.commands.hash', 'HashCommand',
-         'Compute hashes of package archives.',
-     )),
-     ('completion', CommandInfo(
--        'pip._internal.commands.completion', 'CompletionCommand',
-+        'pipenv.patched.notpip._internal.commands.completion', 'CompletionCommand',
-         'A helper command used for command completion.',
-     )),
-     ('debug', CommandInfo(
--        'pip._internal.commands.debug', 'DebugCommand',
-+        'pipenv.patched.notpip._internal.commands.debug', 'DebugCommand',
-         'Show information useful for debugging.',
-     )),
-     ('help', CommandInfo(
--        'pip._internal.commands.help', 'HelpCommand',
-+        'pipenv.patched.notpip._internal.commands.help', 'HelpCommand',
-         'Show help for commands.',
-     )),
- ])  # type: OrderedDict[str, CommandInfo]
diff --git a/tasks/vendoring/patches/patched/piptools.patch b/tasks/vendoring/patches/patched/piptools.patch
index 45eb963b..65378168 100644
--- a/tasks/vendoring/patches/patched/piptools.patch
+++ b/tasks/vendoring/patches/patched/piptools.patch
@@ -1,101 +1,100 @@
 diff --git a/pipenv/patched/piptools/_compat/__init__.py b/pipenv/patched/piptools/_compat/__init__.py
-index eccbf36..fd8ecdd 100644
+index fda80d5..4f7efbf 100644
 --- a/pipenv/patched/piptools/_compat/__init__.py
 +++ b/pipenv/patched/piptools/_compat/__init__.py
-@@ -11,6 +11,7 @@ from .pip_compat import (
-     FormatControl,
-     InstallationCandidate,
-     InstallCommand,
+@@ -4,7 +4,37 @@ from __future__ import absolute_import, division, print_function, unicode_litera
+ 
+ import six
+ 
+-from .pip_compat import PIP_VERSION, parse_requirements
++from .pip_compat import (
++    DEV_PKGS,
++    FAVORITE_HASH,
++    PIP_VERSION,
++    FormatControl,
++    InstallationCandidate,
++    InstallCommand,
 +    InstallationError,
-     InstallRequirement,
-     Link,
-     PackageFinder,
-@@ -18,6 +19,8 @@ from .pip_compat import (
-     RequirementSet,
-     RequirementTracker,
-     Resolver,
++    InstallRequirement,
++    Link,
++    PackageFinder,
++    PyPI,
++    RequirementSet,
++    RequirementTracker,
++    Resolver,
 +    SafeFileCache,
 +    VcsSupport,
-     Wheel,
-     WheelCache,
-     cmdoptions,
-@@ -29,6 +32,7 @@ from .pip_compat import (
-     is_vcs_url,
-     parse_requirements,
-     path_to_url,
++    Wheel,
++    WheelCache,
++    cmdoptions,
++    get_installed_distributions,
++    install_req_from_editable,
++    install_req_from_line,
++    parse_requirements,
++    path_to_url,
 +    pip_version,
-     stdlib_pkgs,
-     url_to_path,
-     user_cache_dir,
++    stdlib_pkgs,
++    url_to_path,
++    user_cache_dir,
++    normalize_path,
++)
+ 
+ if six.PY2:
+     from .tempfile import TemporaryDirectory
 diff --git a/pipenv/patched/piptools/_compat/pip_compat.py b/pipenv/patched/piptools/_compat/pip_compat.py
-index 67da307..765bd49 100644
+index 9508b75..103b831 100644
 --- a/pipenv/patched/piptools/_compat/pip_compat.py
 +++ b/pipenv/patched/piptools/_compat/pip_compat.py
-@@ -1,26 +1,24 @@
+@@ -1,22 +1,72 @@
  # -*- coding=utf-8 -*-
  from __future__ import absolute_import
--
- import importlib
--from contextlib import contextmanager
--
--import pip
--from pip._vendor.packaging.version import parse as parse_version
--
--PIP_VERSION = tuple(map(int, parse_version(pip.__version__).base_version.split(".")))
++import importlib
 +import os
 +from appdirs import user_cache_dir
 +os.environ["PIP_SHIMS_BASE_MODULE"] = str("pipenv.patched.notpip")
 +import pip_shims.shims
 +from pip_shims.models import ShimmedPathCollection, ImportTypes
  
--try:
--    from pip._internal.req.req_tracker import RequirementTracker
--except ImportError:
+-import pip
+-from pip._internal.req import parse_requirements as _parse_requirements
+-from pip._vendor.packaging.version import parse as parse_version
 +InstallationCandidate = ShimmedPathCollection("InstallationCandidate", ImportTypes.CLASS)
 +InstallationCandidate.create_path("models.candidate", "18.0", "9999")
 +InstallationCandidate.create_path("index", "7.0.3", "10.9.9")
  
--    @contextmanager
--    def RequirementTracker():
--        yield
+-PIP_VERSION = tuple(map(int, parse_version(pip.__version__).base_version.split(".")))
 +PIP_VERSION = tuple(map(int, pip_shims.shims.parsed_pip_version.parsed_version.base_version.split(".")))
  
 +RequirementTracker = pip_shims.shims.RequirementTracker
  
- def do_import(module_path, subimport=None, old_path=None):
-     old_path = old_path or module_path
--    prefixes = ["pip._internal", "pip"]
+-if PIP_VERSION[:2] <= (20, 0):
++def do_import(module_path, subimport=None, old_path=None):
++    old_path = old_path or module_path
 +    pip_path = os.environ.get("PIP_SHIMS_BASE_MODULE", "pip")
 +    prefixes = ["{}._internal".format(pip_path), pip_path]
-     paths = [module_path, old_path]
-     search_order = [
-         "{0}.{1}".format(p, pth) for p in prefixes for pth in paths if pth is not None
-@@ -37,31 +35,29 @@ def do_import(module_path, subimport=None, old_path=None):
-             return getattr(imported, package)
- 
- 
--InstallRequirement = do_import("req.req_install", "InstallRequirement")
--InstallationCandidate = do_import(
--    "models.candidate", "InstallationCandidate", old_path="index"
--)
--parse_requirements = do_import("req.req_file", "parse_requirements")
--RequirementSet = do_import("req.req_set", "RequirementSet")
--user_cache_dir = do_import("utils.appdirs", "user_cache_dir")
--FAVORITE_HASH = do_import("utils.hashes", "FAVORITE_HASH")
--path_to_url = do_import("utils.urls", "path_to_url", old_path="download")
--url_to_path = do_import("utils.urls", "url_to_path", old_path="download")
--PackageFinder = do_import("index.package_finder", "PackageFinder", old_path="index")
--FormatControl = do_import("models.format_control", "FormatControl", old_path="index")
--InstallCommand = do_import("commands.install", "InstallCommand")
--Wheel = do_import("wheel", "Wheel")
--cmdoptions = do_import("cli.cmdoptions", old_path="cmdoptions")
--get_installed_distributions = do_import(
--    "utils.misc", "get_installed_distributions", old_path="utils"
--)
--PyPI = do_import("models.index", "PyPI")
--stdlib_pkgs = do_import("utils.compat", "stdlib_pkgs", old_path="compat")
--DEV_PKGS = do_import("commands.freeze", "DEV_PKGS")
--Link = do_import("models.link", "Link", old_path="index")
++    paths = [module_path, old_path]
++    search_order = [
++        "{0}.{1}".format(p, pth) for p in prefixes for pth in paths if pth is not None
++    ]
++    package = subimport if subimport else None
++    for to_import in search_order:
++        if not subimport:
++            to_import, _, package = to_import.rpartition(".")
++        try:
++            imported = importlib.import_module(to_import)
++        except ImportError:
++            continue
++        else:
++            return getattr(imported, package)
+ 
++if PIP_VERSION[:2] <= (20, 0):
+     def install_req_from_parsed_requirement(req, **kwargs):
+         return req
+ 
+-
+ else:
+     from pip._internal.req.constructors import install_req_from_parsed_requirement
+ 
 +InstallRequirement = pip_shims.shims.InstallRequirement
 +InstallationError = pip_shims.shims.InstallationError
 +parse_requirements = pip_shims.shims.parse_requirements
@@ -114,21 +113,41 @@ index 67da307..765bd49 100644
 +stdlib_pkgs = pip_shims.shims.stdlib_pkgs
 +DEV_PKGS = pip_shims.shims.DEV_PKGS
 +Link = pip_shims.shims.Link
- Session = do_import("_vendor.requests.sessions", "Session")
--Resolver = do_import("legacy_resolve", "Resolver", old_path="resolve")
--WheelCache = do_import("cache", "WheelCache", old_path="wheel")
++Session = do_import("_vendor.requests.sessions", "Session")
 +Resolver = pip_shims.shims.Resolver
 +VcsSupport = pip_shims.shims.VcsSupport
 +WheelCache = pip_shims.shims.WheelCache
 +pip_version = pip_shims.shims.pip_version
++normalize_path = do_import("utils.misc", "normalize_path")
++install_req_from_line = pip_shims.shims.install_req_from_line
++install_req_from_editable = pip_shims.shims.install_req_from_editable
+ 
+ def parse_requirements(
+     filename, session, finder=None, options=None, constraint=False, isolated=False
+diff --git a/pipenv/patched/piptools/cache.py b/pipenv/patched/piptools/cache.py
+index 9b6bf55..983ddb6 100644
+--- a/pipenv/patched/piptools/cache.py
++++ b/pipenv/patched/piptools/cache.py
+@@ -6,7 +6,7 @@ import os
+ import platform
+ import sys
  
- # pip 18.1 has refactored InstallRequirement constructors use by pip-tools.
- if PIP_VERSION < (18, 1):
+-from pip._vendor.packaging.requirements import Requirement
++from pipenv.vendor.packaging.requirements import Requirement
+ 
+ from .exceptions import PipToolsError
+ from .utils import as_tuple, key_from_req, lookup_table
 diff --git a/pipenv/patched/piptools/locations.py b/pipenv/patched/piptools/locations.py
-index fb66cf3..bb199f6 100644
+index 9ca0ffe..37125c9 100644
 --- a/pipenv/patched/piptools/locations.py
 +++ b/pipenv/patched/piptools/locations.py
-@@ -5,7 +5,10 @@ from ._compat import user_cache_dir
+@@ -1,12 +1,15 @@
+ import os
+ from shutil import rmtree
+ 
+-from pip._internal.utils.appdirs import user_cache_dir
++from ._compat import user_cache_dir
+ 
  from .click import secho
  
  # The user_cache_dir helper comes straight from pip itself
@@ -141,10 +160,21 @@ index fb66cf3..bb199f6 100644
  # NOTE
  # We used to store the cache dir under ~/.pip-tools, which is not the
 diff --git a/pipenv/patched/piptools/repositories/local.py b/pipenv/patched/piptools/repositories/local.py
-index f389784..c1bcf9d 100644
+index ec3a796..1aa29f0 100644
 --- a/pipenv/patched/piptools/repositories/local.py
 +++ b/pipenv/patched/piptools/repositories/local.py
-@@ -61,7 +61,8 @@ class LocalRequirementsRepository(BaseRepository):
+@@ -3,9 +3,7 @@ from __future__ import absolute_import, division, print_function, unicode_litera
+ 
+ from contextlib import contextmanager
+ 
+-from pip._internal.utils.hashes import FAVORITE_HASH
+-
+-from .._compat import PIP_VERSION
++from .._compat import PIP_VERSION, FAVORITE_HASH
+ from .base import BaseRepository
+ 
+ from piptools.utils import as_tuple, key_from_ireq, make_install_requirement
+@@ -65,7 +63,8 @@ class LocalRequirementsRepository(BaseRepository):
          if existing_pin and ireq_satisfied_by_existing_pin(ireq, existing_pin):
              project, version, _ = as_tuple(existing_pin)
              return make_install_requirement(
@@ -155,10 +185,10 @@ index f389784..c1bcf9d 100644
          else:
              return self.repository.find_best_match(ireq, prereleases)
 diff --git a/pipenv/patched/piptools/repositories/pypi.py b/pipenv/patched/piptools/repositories/pypi.py
-index acbd680..13378ae 100644
+index ef5ba4e..fe6e735 100644
 --- a/pipenv/patched/piptools/repositories/pypi.py
 +++ b/pipenv/patched/piptools/repositories/pypi.py
-@@ -2,21 +2,29 @@
+@@ -2,28 +2,48 @@
  from __future__ import absolute_import, division, print_function, unicode_literals
  
  import collections
@@ -166,46 +196,61 @@ index acbd680..13378ae 100644
  import hashlib
  import os
  from contextlib import contextmanager
- from functools import partial
  from shutil import rmtree
  
+-from pip._internal.cache import WheelCache
+-from pip._internal.commands import create_command
+-from pip._internal.models.index import PyPI
+-from pip._internal.models.link import Link
+-from pip._internal.models.wheel import Wheel
+-from pip._internal.req import RequirementSet
+-from pip._internal.req.req_tracker import get_requirement_tracker
+-from pip._internal.utils.hashes import FAVORITE_HASH
+-from pip._internal.utils.misc import normalize_path
+-from pip._internal.utils.temp_dir import TempDirectory, global_tempdir_manager
+-from pip._internal.utils.urls import path_to_url, url_to_path
+-
+-from .._compat import PIP_VERSION, TemporaryDirectory, contextlib
++from pip_shims.shims import (
++    TempDirectory,
++    global_tempdir_manager,
++    get_requirement_tracker,
++    InstallCommand
++)
 +from packaging.requirements import Requirement
 +from packaging.specifiers import Specifier, SpecifierSet
 +
- from .._compat import (
-     FAVORITE_HASH,
-     PIP_VERSION,
++from .._compat import (
++    FAVORITE_HASH,
++    PIP_VERSION,
 +    InstallationError,
 +    InstallRequirement,
-     Link,
-     PyPI,
-     RequirementSet,
-     RequirementTracker,
-     Resolver as PipResolver,
++    Link,
++    normalize_path,
++    PyPI,
++    RequirementSet,
++    RequirementTracker,
 +    SafeFileCache,
-     TemporaryDirectory,
++    TemporaryDirectory,
 +    VcsSupport,
-     Wheel,
-     WheelCache,
-     contextlib,
-@@ -24,6 +32,7 @@ from .._compat import (
-     is_file_url,
-     is_vcs_url,
-     path_to_url,
++    Wheel,
++    WheelCache,
++    contextlib,
++    path_to_url,
 +    pip_version,
-     url_to_path,
- )
- from ..cache import CACHE_DIR
-@@ -31,6 +40,8 @@ from ..click import progressbar
++    url_to_path,
++)
++from ..locations import CACHE_DIR
+ from ..click import progressbar
  from ..exceptions import NoCandidateFound
  from ..logging import log
  from ..utils import (
 +    dedup,
 +    clean_requires_python,
-     create_install_command,
      fs_str,
      is_pinned_requirement,
-@@ -40,10 +51,50 @@ from ..utils import (
+     is_url_requirement,
+@@ -32,10 +52,50 @@ from ..utils import (
  )
  from .base import BaseRepository
  
@@ -256,29 +301,38 @@ index acbd680..13378ae 100644
  class PyPIRepository(BaseRepository):
      DEFAULT_INDEX_URL = PyPI.simple_url
  
-@@ -54,8 +105,9 @@ class PyPIRepository(BaseRepository):
+@@ -46,19 +106,27 @@ class PyPIRepository(BaseRepository):
      changed/configured on the Finder.
      """
  
--    def __init__(self, pip_args, build_isolation=False):
-+    def __init__(self, pip_args, session=None, build_isolation=False, use_json=False):
-         self.build_isolation = build_isolation
+-    def __init__(self, pip_args, cache_dir):
++    def __init__(self, pip_args, cache_dir=CACHE_DIR, session=None, build_isolation=False, use_json=False):
++        self.build_isolation = build_isolation
 +        self.use_json = use_json
- 
++        self.cache_dir = cache_dir
++
          # Use pip's parser for pip.conf management and defaults.
          # General options (find_links, index_url, extra_index_url, trusted_host,
-@@ -63,7 +115,9 @@ class PyPIRepository(BaseRepository):
-         command = create_install_command()
-         self.options, _ = command.parse_args(pip_args)
- 
--        self.session = command._build_session(self.options)
+         # and pre) are deferred to pip.
+-        self.command = create_command("install")
++        self.command = InstallCommand()
+         self.options, _ = self.command.parse_args(pip_args)
++        if self.build_isolation is not None:
++            self.options.build_isolation = build_isolation
+         if self.options.cache_dir:
+             self.options.cache_dir = normalize_path(self.options.cache_dir)
+ 
+         self.options.require_hashes = False
+         self.options.ignore_dependencies = False
+ 
+-        self.session = self.command._build_session(self.options)
 +        if session is None:
-+            session = command._build_session(self.options)
++            session = self.command._build_session(self.options)
 +        self.session = session
-         self.finder = command._build_package_finder(
+         self.finder = self.command._build_package_finder(
              options=self.options, session=self.session
          )
-@@ -78,6 +132,10 @@ class PyPIRepository(BaseRepository):
+@@ -73,6 +141,10 @@ class PyPIRepository(BaseRepository):
          # of all secondary dependencies for the given requirement, so we
          # only have to go to disk once for each requirement
          self._dependencies_cache = {}
@@ -289,7 +343,7 @@ index acbd680..13378ae 100644
  
          # Setup file paths
          self.freshen_build_caches()
-@@ -118,13 +176,15 @@ class PyPIRepository(BaseRepository):
+@@ -114,13 +186,15 @@ class PyPIRepository(BaseRepository):
          if ireq.editable or is_url_requirement(ireq):
              return ireq  # return itself as the best match
  
@@ -309,8 +363,8 @@ index acbd680..13378ae 100644
  
          # Reuses pip's internal candidate sort key to sort
          matching_candidates = [candidates_by_version[ver] for ver in matching_versions]
-@@ -153,11 +213,74 @@ class PyPIRepository(BaseRepository):
-             best_candidate.project,
+@@ -136,9 +210,66 @@ class PyPIRepository(BaseRepository):
+             best_candidate.name,
              best_candidate.version,
              ireq.extras,
 +            ireq.markers,
@@ -374,85 +428,12 @@ index acbd680..13378ae 100644
 +            return set()
 +
      def resolve_reqs(self, download_dir, ireq, wheel_cache):
-         results = None
-+        ireq.isolated = self.build_isolation
-+        ireq._wheel_cache = wheel_cache
-+        if ireq and not ireq.link:
-+            ireq.populate_link(self.finder, False, False)
-+        if ireq.link and not ireq.link.is_wheel:
-+            ireq.ensure_has_source_dir(self.source_dir)
- 
-         if PIP_VERSION < (10,):
-             reqset = RequirementSet(
-@@ -166,11 +289,13 @@ class PyPIRepository(BaseRepository):
-                 download_dir=download_dir,
-                 wheel_download_dir=self._wheel_download_dir,
-                 session=self.session,
-+                ignore_installed=True,
-+                ignore_compatibility=False,
-                 wheel_cache=wheel_cache,
-             )
--            results = reqset._prepare_file(self.finder, ireq)
-+            results = reqset._prepare_file(self.finder, ireq, ignore_requires_python=True)
-         else:
--            from pip._internal.operations.prepare import RequirementPreparer
-+            from pip_shims.shims import RequirementPreparer
- 
-             preparer_kwargs = {
-                 "build_dir": self.build_dir,
-@@ -186,21 +311,24 @@ class PyPIRepository(BaseRepository):
-                 "upgrade_strategy": "to-satisfy-only",
-                 "force_reinstall": False,
-                 "ignore_dependencies": False,
--                "ignore_requires_python": False,
-+                "ignore_requires_python": True,
-                 "ignore_installed": True,
-                 "use_user_site": False,
-+                "ignore_compatibility": False,
-+                "use_pep517": True,
-             }
-             make_install_req_kwargs = {"isolated": False, "wheel_cache": wheel_cache}
- 
-             if PIP_VERSION < (19, 3):
-                 resolver_kwargs.update(**make_install_req_kwargs)
-             else:
--                from pip._internal.req.constructors import install_req_from_req_string
-+                from pipenv.vendor.pip_shims.shims import install_req_from_req_string
- 
-                 make_install_req = partial(
-                     install_req_from_req_string, **make_install_req_kwargs
-                 )
-                 resolver_kwargs["make_install_req"] = make_install_req
-+                del resolver_kwargs["use_pep517"]
- 
-             if PIP_VERSION >= (20,):
-                 preparer_kwargs["session"] = self.session
-@@ -208,6 +336,7 @@ class PyPIRepository(BaseRepository):
- 
-             resolver = None
-             preparer = None
-+            reqset = None
-             with RequirementTracker() as req_tracker:
-                 # Pip 18 uses a requirement tracker to prevent fork bombs
-                 if req_tracker:
-@@ -216,7 +345,6 @@ class PyPIRepository(BaseRepository):
-                 resolver_kwargs["preparer"] = preparer
-                 reqset = RequirementSet()
-                 ireq.is_direct = True
--                reqset.add_requirement(ireq)
- 
-                 resolver = PipResolver(**resolver_kwargs)
-                 require_hashes = False
-@@ -225,12 +353,16 @@ class PyPIRepository(BaseRepository):
-                     results = resolver._resolve_one(reqset, ireq)
-                 else:
-                     results = resolver._resolve_one(reqset, ireq, require_hashes)
-+        try:
-+            reqset.cleanup_files()
-+        except (AttributeError, OSError):
-+            pass
+         with get_requirement_tracker() as req_tracker, TempDirectory(
+             kind="resolver"
+@@ -173,10 +304,11 @@ class PyPIRepository(BaseRepository):
  
--                reqset.cleanup_files()
+             if PIP_VERSION[:2] <= (20, 0):
+                 reqset.cleanup_files()
 +        results = set(results) if results else set()
  
 -        return set(results)
@@ -463,19 +444,19 @@ index acbd680..13378ae 100644
          """
          Given a pinned, URL, or editable InstallRequirement, returns a set of
          dependencies (also InstallRequirements, but not necessarily pinned).
-@@ -265,9 +397,8 @@ class PyPIRepository(BaseRepository):
-             wheel_cache = WheelCache(CACHE_DIR, self.options.format_control)
-             prev_tracker = os.environ.get("PIP_REQ_TRACKER")
-             try:
--                self._dependencies_cache[ireq] = self.resolve_reqs(
--                    download_dir, ireq, wheel_cache
--                )
-+                results, ireq = self.resolve_reqs(download_dir, ireq, wheel_cache)
-+                self._dependencies_cache[ireq] = results
-             finally:
-                 if "PIP_REQ_TRACKER" in os.environ:
-                     if prev_tracker:
-@@ -305,7 +436,7 @@ class PyPIRepository(BaseRepository):
+@@ -212,9 +344,10 @@ class PyPIRepository(BaseRepository):
+                 wheel_cache = WheelCache(self._cache_dir, self.options.format_control)
+                 prev_tracker = os.environ.get("PIP_REQ_TRACKER")
+                 try:
+-                    self._dependencies_cache[ireq] = self.resolve_reqs(
++                    results, ireq = self.resolve_reqs(
+                         download_dir, ireq, wheel_cache
+                     )
++                    self._dependencies_cache[ireq] = results
+                 finally:
+                     if "PIP_REQ_TRACKER" in os.environ:
+                         if prev_tracker:
+@@ -252,7 +385,7 @@ class PyPIRepository(BaseRepository):
                      cached_link = Link(path_to_url(cached_path))
                  else:
                      cached_link = link
@@ -484,7 +465,7 @@ index acbd680..13378ae 100644
  
          if not is_pinned_requirement(ireq):
              raise TypeError("Expected pinned requirement, got {}".format(ireq))
-@@ -313,12 +444,10 @@ class PyPIRepository(BaseRepository):
+@@ -260,39 +393,19 @@ class PyPIRepository(BaseRepository):
          # We need to get all of the candidates that match our current version
          # pin, these will represent all of the files that could possibly
          # satisfy this constraint.
@@ -500,14 +481,10 @@ index acbd680..13378ae 100644
  
          log.debug("  {}".format(ireq.name))
  
-@@ -328,30 +457,11 @@ class PyPIRepository(BaseRepository):
-             return candidate.link
- 
          return {
--            self._get_file_hash(get_candidate_link(candidate))
--            for candidate in matching_candidates
+-            self._get_file_hash(candidate.link) for candidate in matching_candidates
 +            h for h in
-+            map(lambda c: self._hash_cache.get_hash(get_candidate_link(c)), matching_candidates)
++            map(lambda c: self._hash_cache.get_hash(c.link), matching_candidates)
 +            if h is not None
          }
  
@@ -535,30 +512,31 @@ index acbd680..13378ae 100644
      def allow_all_wheels(self):
          """
 diff --git a/pipenv/patched/piptools/resolver.py b/pipenv/patched/piptools/resolver.py
-index fc53f18..7e856fe 100644
+index 0116992..550069d 100644
 --- a/pipenv/patched/piptools/resolver.py
 +++ b/pipenv/patched/piptools/resolver.py
-@@ -6,6 +6,9 @@ import os
+@@ -6,7 +6,9 @@ import os
  from functools import partial
  from itertools import chain, count
  
+-from pip._internal.req.constructors import install_req_from_line
++from pip_shims.shims import install_req_from_line
 +from pipenv.vendor.requirementslib.models.markers import normalize_marker_str
 +from packaging.markers import Marker
-+
+ 
  from . import click
- from ._compat import install_req_from_line
- from .cache import DependencyCache
-@@ -34,6 +37,7 @@ class RequirementSummary(object):
+ from .logging import log
+@@ -33,6 +35,7 @@ class RequirementSummary(object):
          self.req = ireq.req
-         self.key = key_from_req(ireq.req)
+         self.key = key_from_ireq(ireq)
          self.extras = str(sorted(ireq.extras))
 +        self.markers = ireq.markers
          self.specifier = str(ireq.specifier)
  
      def __eq__(self, other):
-@@ -63,6 +67,17 @@ def combine_install_requirements(ireqs):
-         # NOTE we may be losing some info on dropped reqs here
-         combined_ireq.req.specifier &= ireq.req.specifier
+@@ -63,6 +66,17 @@ def combine_install_requirements(ireqs):
+         if combined_ireq.req is not None and ireq.req is not None:
+             combined_ireq.req.specifier &= ireq.req.specifier
          combined_ireq.constraint &= ireq.constraint
 +        if ireq.markers and not combined_ireq.markers:
 +            combined_ireq.markers = copy.deepcopy(ireq.markers)
@@ -574,10 +552,10 @@ index fc53f18..7e856fe 100644
          # Return a sorted, de-duped tuple of extras
          combined_ireq.extras = tuple(
              sorted(set(tuple(combined_ireq.extras) + tuple(ireq.extras)))
-@@ -335,10 +350,19 @@ class Resolver(object):
-         Editable requirements will never be looked up, as they may have
-         changed at any time.
-         """
+@@ -337,10 +351,19 @@ class Resolver(object):
+         if ireq.constraint:
+             return
+ 
 -        if ireq.editable or is_url_requirement(ireq):
 +        if ireq.editable or (is_url_requirement(ireq) and not ireq.link.is_wheel):
              for dependency in self.repository.get_dependencies(ireq):
@@ -595,7 +573,7 @@ index fc53f18..7e856fe 100644
          elif not is_pinned_requirement(ireq):
              raise TypeError(
                  "Expected pinned or editable requirement, got {}".format(ireq)
-@@ -356,7 +380,7 @@ class Resolver(object):
+@@ -358,7 +381,7 @@ class Resolver(object):
                  fg="yellow",
              )
              dependencies = self.repository.get_dependencies(ireq)
@@ -604,7 +582,7 @@ index fc53f18..7e856fe 100644
  
          # Example: ['Werkzeug>=0.9', 'Jinja2>=2.4']
          dependency_strings = self.dependency_cache[ireq]
-@@ -372,7 +396,8 @@ class Resolver(object):
+@@ -374,7 +397,8 @@ class Resolver(object):
              )
  
      def reverse_dependencies(self, ireqs):
@@ -614,11 +592,73 @@ index fc53f18..7e856fe 100644
 +            ireq for ireq in ireqs if not (ireq.editable or is_non_wheel_url(ireq))
          ]
          return self.dependency_cache.reverse_dependencies(non_editable)
+diff --git a/pipenv/patched/piptools/scripts/compile.py b/pipenv/patched/piptools/scripts/compile.py
+index 03232a8..a7bfb4c 100755
+--- a/pipenv/patched/piptools/scripts/compile.py
++++ b/pipenv/patched/piptools/scripts/compile.py
+@@ -7,8 +7,8 @@ import sys
+ import tempfile
+ 
+ from click.utils import safecall
+-from pip._internal.commands import create_command
+-from pip._internal.req.constructors import install_req_from_line
++from ._compat import InstallCommand
++from ._compat import install_req_from_line
+ 
+ from .. import click
+ from .._compat import parse_requirements
+@@ -25,7 +25,7 @@ DEFAULT_REQUIREMENTS_FILE = "requirements.in"
+ DEFAULT_REQUIREMENTS_OUTPUT_FILE = "requirements.txt"
+ 
+ # Get default values of the pip's options (including options from pip.conf).
+-install_command = create_command("install")
++install_command = InstallComand()
+ pip_defaults = install_command.parser.get_default_values()
+ 
+ 
+diff --git a/pipenv/patched/piptools/scripts/sync.py b/pipenv/patched/piptools/scripts/sync.py
+index 137e813..4a7b3d5 100755
+--- a/pipenv/patched/piptools/scripts/sync.py
++++ b/pipenv/patched/piptools/scripts/sync.py
+@@ -6,8 +6,7 @@ import os
+ import shlex
+ import sys
+ 
+-from pip._internal.commands import create_command
+-from pip._internal.utils.misc import get_installed_distributions
++from ._compat import get_installed_distributions, InstallCommand
+ 
+ from .. import click, sync
+ from .._compat import parse_requirements
+@@ -112,7 +111,7 @@ def cli(
+             log.error("ERROR: " + msg)
+             sys.exit(2)
+ 
+-    install_command = create_command("install")
++    install_command = InstallCommand()
+     options, _ = install_command.parse_args([])
+     session = install_command._build_session(options)
+     finder = install_command._build_package_finder(options=options, session=session)
+diff --git a/pipenv/patched/piptools/sync.py b/pipenv/patched/piptools/sync.py
+index 430b4bb..015ff7a 100644
+--- a/pipenv/patched/piptools/sync.py
++++ b/pipenv/patched/piptools/sync.py
+@@ -4,8 +4,8 @@ import sys
+ import tempfile
+ from subprocess import check_call  # nosec
+ 
+-from pip._internal.commands.freeze import DEV_PKGS
+-from pip._internal.utils.compat import stdlib_pkgs
++from ._compat import DEV_PKGS
++from ._compat import stdlib_pkgs
+ 
+ from . import click
+ from .exceptions import IncompatibleRequirements
 diff --git a/pipenv/patched/piptools/utils.py b/pipenv/patched/piptools/utils.py
-index 8727f1e..c9f53f7 100644
+index 7733447..aa93ec8 100644
 --- a/pipenv/patched/piptools/utils.py
 +++ b/pipenv/patched/piptools/utils.py
-@@ -1,6 +1,7 @@
+@@ -1,14 +1,19 @@
  # coding: utf-8
  from __future__ import absolute_import, division, print_function, unicode_literals
  
@@ -626,18 +666,20 @@ index 8727f1e..c9f53f7 100644
  import sys
  from collections import OrderedDict
  from itertools import chain, groupby
-@@ -8,6 +9,10 @@ from itertools import chain, groupby
+ 
  import six
  from click.utils import LazyFile
+-from pip._internal.req.constructors import install_req_from_line
++from ._compat import install_req_from_line
  from six.moves import shlex_quote
 +from pipenv.vendor.packaging.specifiers import SpecifierSet, InvalidSpecifier
 +from pipenv.vendor.packaging.version import Version, InvalidVersion, parse as parse_version
 +from pipenv.vendor.packaging.markers import Marker, Op, Value, Variable
 +
  
- from ._compat import PIP_VERSION, InstallCommand, install_req_from_line
+ from ._compat import PIP_VERSION
  from .click import style
-@@ -23,6 +28,70 @@ COMPILE_EXCLUDE_OPTIONS = {
+@@ -25,6 +30,70 @@ COMPILE_EXCLUDE_OPTIONS = {
  }
  
  
@@ -708,7 +750,7 @@ index 8727f1e..c9f53f7 100644
  def key_from_ireq(ireq):
      """Get a standardized key for an InstallRequirement."""
      if ireq.req is None and ireq.link is not None:
-@@ -48,16 +117,51 @@ def comment(text):
+@@ -50,16 +119,51 @@ def comment(text):
      return style(text, fg="green")
  
  
@@ -738,13 +780,13 @@ index 8727f1e..c9f53f7 100644
 +    Formats a packaging.requirements.Requirement with a lowercase name.
 +
 +    This is simply a copy of
-+    https://github.com/pypa/packaging/blob/16.8/packaging/requirements.py#L109-L124
++    https://github.com/pypa/pipenv/patched/packaging/blob/pipenv/patched/16.8/packaging/requirements.py#L109-L124
 +    modified to lowercase the dependency name.
 +
 +    Previously, we were invoking the original Requirement.__str__ method and
 +    lowercasing the entire result, which would lowercase the name, *and* other,
 +    important stuff that should not be lowercased (such as the marker). See
-+    this issue for more information: https://github.com/pypa/pipenv/issues/2113.
++    this issue for more information: https://github.com/pypa/pipenv/patched/pipenv/issues/2113.
 +    """
 +    parts = [requirement.name.lower()]
 +
@@ -764,7 +806,7 @@ index 8727f1e..c9f53f7 100644
  
  
  def is_url_requirement(ireq):
-@@ -78,10 +182,10 @@ def format_requirement(ireq, marker=None, hashes=None):
+@@ -80,10 +184,10 @@ def format_requirement(ireq, marker=None, hashes=None):
      elif is_url_requirement(ireq):
          line = ireq.link.url
      else:
