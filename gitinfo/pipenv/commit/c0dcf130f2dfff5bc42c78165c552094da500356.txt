commit c0dcf130f2dfff5bc42c78165c552094da500356
Author: Felipe Arruda Pontes <felipe.arruda.pontes@gmail.com>
Date:   Fri Feb 17 10:30:21 2017 -0200

    some tests to check if pip_download is using all sources

diff --git a/tests/test_pipenv.py b/tests/test_pipenv.py
index 219376e7..aceac502 100644
--- a/tests/test_pipenv.py
+++ b/tests/test_pipenv.py
@@ -7,7 +7,7 @@ import delegator
 import toml
 
 from pipenv.cli import (activate_virtualenv, ensure_proper_casing,
-    parse_download_fname, parse_install_output, pip_install)
+    parse_download_fname, parse_install_output, pip_install, pip_download, which_pip)
 from pipenv.project import Project
 
 
@@ -184,3 +184,53 @@ class TestPipenv():
         c = pip_install('package')
         assert c.return_code == 0
         assert c == first_cmd_return
+
+    @patch('pipenv.project.Project.sources', new_callable=PropertyMock)
+    @patch('delegator.run')
+    def test_pip_download_should_try_every_possible_source(self, mocked_delegator, mocked_sources):
+        sources = [
+            {'url': 'http://dontexistis.in.pypi/simple'},
+            {'url': 'http://existis.in.pypi/simple'}
+        ]
+        mocked_sources.return_value = sources
+        first_cmd_return = Mock()
+        first_cmd_return.return_code = 1
+        second_cmd_return = Mock()
+        second_cmd_return.return_code = 0
+        mocked_delegator.side_effect = [first_cmd_return, second_cmd_return]
+        c = pip_download('package')
+        assert c.return_code == 0
+
+    @patch('pipenv.project.Project.sources', new_callable=PropertyMock)
+    @patch('delegator.run')
+    def test_pip_download_should_return_the_last_error_if_no_cmd_worked(self, mocked_delegator, mocked_sources):
+        sources = [
+            {'url': 'http://dontexistis.in.pypi/simple'},
+            {'url': 'http://dontexistis.in.pypi/simple'}
+        ]
+        mocked_sources.return_value = sources
+        first_cmd_return = Mock()
+        first_cmd_return.return_code = 1
+        second_cmd_return = Mock()
+        second_cmd_return.return_code = 1
+        mocked_delegator.side_effect = [first_cmd_return, second_cmd_return]
+        c = pip_download('package')
+        assert c.return_code == 1
+        assert c == second_cmd_return
+
+    @patch('pipenv.project.Project.sources', new_callable=PropertyMock)
+    @patch('delegator.run')
+    def test_pip_download_should_return_the_first_cmd_that_worked(self, mocked_delegator, mocked_sources):
+        sources = [
+            {'url': 'http://existis.in.pypi/simple'},
+            {'url': 'http://existis.in.pypi/simple'}
+        ]
+        mocked_sources.return_value = sources
+        first_cmd_return = Mock()
+        first_cmd_return.return_code = 0
+        second_cmd_return = Mock()
+        second_cmd_return.return_code = 0
+        mocked_delegator.side_effect = [first_cmd_return, second_cmd_return]
+        c = pip_download('package')
+        assert c.return_code == 0
+        assert c == first_cmd_return
