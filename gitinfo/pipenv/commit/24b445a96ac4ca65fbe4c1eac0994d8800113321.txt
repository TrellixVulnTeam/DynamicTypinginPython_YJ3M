commit 24b445a96ac4ca65fbe4c1eac0994d8800113321
Author: Dan Ryan <dan@danryan.co>
Date:   Mon Oct 23 13:14:41 2017 -0400

    WIP: Relative file and path installation
    
    * Issues - #949, #939, #936 and to a lesser extent #817 #540 and more
    * Fixed: Local file path installation (resolves in pipfile as relative
    path)
    * Pass file:// URI to Requirements library for resolving
    
    TODO:
    * Ignore non-explicit directory paths lacking os.sep or ./
    * Add tests

diff --git a/pipenv/cli.py b/pipenv/cli.py
index 6e4e5d43..e72faa4b 100644
--- a/pipenv/cli.py
+++ b/pipenv/cli.py
@@ -1872,16 +1872,18 @@ def install(
 
         # pip install:
         with spinner():
-
-            c = pip_install(package_name, ignore_hashes=True, allow_global=system, no_deps=False, verbose=verbose, pre=pre)
+            # So that we still write the provided path to the pipfile but convert for installing
+            pip_dep_name = package_name
+            if is_file(package_name):
+                pip_dep_name = convert_path_to_uri(package_name)
+            c = pip_install(pip_dep_name, ignore_hashes=True, allow_global=system, no_deps=False, verbose=verbose, pre=pre)
 
             # Warn if --editable wasn't passed.
             try:
-                converted = convert_deps_from_pip(package_name)
+                converted = convert_deps_from_pip(pip_dep_name)
             except ValueError as e:
                 click.echo('{0}: {1}'.format(crayons.red('WARNING'), e))
                 sys.exit(1)
-
             key = [k for k in converted.keys()][0]
             if is_vcs(key) or is_vcs(converted[key]) and not converted[key].get('editable'):
                 click.echo(
diff --git a/pipenv/project.py b/pipenv/project.py
index a2c7c593..9d90f557 100644
--- a/pipenv/project.py
+++ b/pipenv/project.py
@@ -13,7 +13,8 @@ import toml
 
 from .utils import (
     mkdir_p, convert_deps_from_pip, pep423_name, recase_file,
-    find_requirements, is_file, is_vcs, python_version, cleanup_toml
+    find_requirements, is_file, is_vcs, python_version, cleanup_toml,
+    convert_path_to_uri, convert_file_uri_to_path
 )
 from .environments import PIPENV_MAX_DEPTH, PIPENV_VENV_IN_PROJECT
 from .environments import PIPENV_VIRTUALENV, PIPENV_PIPFILE
@@ -460,8 +461,18 @@ class Project(object):
         # Read and append Pipfile.
         p = self._pipfile
 
+        # Always use file:// URIs for local path installation
+        # But allow local relpaths in pipfile
+        pip_dep_name = package_name
+        pipfile_package_path = None
+        if is_file(package_name) and not package_name.startswith('file://'):
+            pip_dep_name = convert_path_to_uri(package_name)
+            pipfile_package_path = os.path.join('.', os.path.relpath(
+                convert_file_uri_to_path(pip_dep_name), start=self.project_directory)
+            )
+
         # Don't re-capitalize file URLs or VCSs.
-        converted = convert_deps_from_pip(package_name)
+        converted = convert_deps_from_pip(pip_dep_name)
         converted = converted[[k for k in converted.keys()][0]]
 
         if not (is_file(package_name) or is_vcs(converted) or 'path' in converted):
@@ -473,10 +484,13 @@ class Project(object):
         if key not in p:
             p[key] = {}
 
-        package = convert_deps_from_pip(package_name)
+        package = convert_deps_from_pip(pip_dep_name)
         package_name = [k for k in package.keys()][0]
 
         # Add the package to the group.
+        if pipfile_package_path and 'file' in package[package_name]:
+            del package[package_name]['file']
+            package[package_name]['path'] = pipfile_package_path
         p[key][package_name] = package[package_name]
 
         # Write Pipfile.
diff --git a/pipenv/utils.py b/pipenv/utils.py
index b43b2a21..fc65932d 100644
--- a/pipenv/utils.py
+++ b/pipenv/utils.py
@@ -885,6 +885,23 @@ def find_windows_executable(bin_path, exe_name):
     return find_executable(exe_name)
 
 
+def convert_path_to_uri(path):
+    """Given a path, return a file:// URI pointer"""
+    # Adapted and borrowed from pip
+    drive, path = os.path.splitdrive(os.path.abspath(path))
+    filepath = path.split(os.path.sep)
+    url = '/'.join(filepath)
+    if drive:
+        return 'file:///' + drive + url
+    return 'file://' + url
+
+
+def convert_file_uri_to_path(uri):
+    """Given a URI, return an OS path"""
+    path = urlparse(uri)
+    return os.path.abspath(os.path.join(path.netloc, path.path))
+
+
 def walk_up(bottom):
     """Mimic os.walk, but walk 'up' instead of down the directory tree.
     From: https://gist.github.com/zdavkeos/1098474
