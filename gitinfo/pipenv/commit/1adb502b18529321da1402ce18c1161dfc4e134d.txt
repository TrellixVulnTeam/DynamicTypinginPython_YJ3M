commit 1adb502b18529321da1402ce18c1161dfc4e134d
Author: Dan Ryan <dan@danryan.co>
Date:   Mon Jun 3 21:52:29 2019 -0400

    Update test runner code and contribution guide
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/docs/dev/contributing.rst b/docs/dev/contributing.rst
index db7f14cc..9ccb5166 100644
--- a/docs/dev/contributing.rst
+++ b/docs/dev/contributing.rst
@@ -128,10 +128,15 @@ Three ways of running the tests are as follows:
 
 1. ``make test`` (which uses ``docker``)
 2. ``./run-tests.sh`` or ``run-tests.bat``
-3. Using pipenv::
+3. Using pipenv:
 
-    pipenv install --dev
-    pipenv run pytest
+.. code-block:: console
+
+    $ git clone https://github.com/pypa/pipenv.git
+    $ cd pipenv
+    $ git submodule sync && git submodule update --init --recursive
+    $ pipenv install --dev
+    $ pipenv run pytest
 
 For the last two, it is important that your environment is setup correctly, and
 this may take some work, for example, on a specific Mac installation, the following
diff --git a/run-tests.bat b/run-tests.bat
index a511fa45..973425af 100644
--- a/run-tests.bat
+++ b/run-tests.bat
@@ -1,7 +1,15 @@
-rem imdisk  -a -s 964515b -m R: -p "/FS:NTFS /Y"
+rem If you want to use a ramdisk, use this section:
+
+rem imdisk -a -s 4G -m R: -p "FS:NTFS /y"
+rem if you are using a ram disk, you should comment the following substitution line out
+subst R: %TEMP%
+
+set TMP=R:\\
+set TEMP=R:\\
+set WORKON_HOME=R:\\
+set RAM_DISK=R:\\
 
-virtualenv R:\.venv
 R:\.venv\Scripts\pip install -e .[test] --upgrade --upgrade-strategy=only-if-needed
 R:\.venv\Scripts\pipenv install --dev
 git submodule sync && git submodule update --init --recursive
-SET RAM_DISK=R: && R:\.venv\Scripts\pipenv run pytest -n auto -v tests --tap-stream > report.tap
+R:\.venv\Scripts\pipenv run pytest -n auto -v tests
diff --git a/run-tests.sh b/run-tests.sh
index a99c0461..aef44f63 100755
--- a/run-tests.sh
+++ b/run-tests.sh
@@ -7,6 +7,8 @@ set -eo pipefail
 export PYTHONIOENCODING="utf-8"
 export LANG=C.UTF-8
 export PIP_PROCESS_DEPENDENCY_LINKS="1"
+# Let's use a temporary cache directory
+export PIPENV_CACHE_DIR=`mktemp -d 2>/dev/null || mktemp -d -t 'pipenv_cache'`
 
 prefix() {
 	sed "s/^/   $1:    /"
@@ -25,49 +27,27 @@ fi
 if [[ ! -z "$HOME" ]]; then
     export PATH="${HOME}/.local/bin:${PATH}"
 fi
-# pip uninstall -y pipenv
 pip install certifi
 export GIT_SSL_CAINFO=$(python -m certifi)
 echo "Path: $PATH"
 echo "Installing Pipenv…"
-PIP_USER="1" python -m pip install --upgrade setuptools
-PIP_USER="1" python3 -m pip install --upgrade setuptools
-python -m pip install -e "$(pwd)" --upgrade && python3 -m pip install -e "$(pwd)" --upgrade
-python3 -m pipenv install --deploy --dev --system
-
-# Otherwise, we're on a development machine.
-# First, try MacOS…
-if [[ $(python -c "import sys; print(sys.platform)") == "darwin" ]]; then
-
-	echo "Clearing Caches…"
-	rm -fr ~/Library/Caches/pip
-	rm -fr ~/Library/Caches/pipenv
-
-# Otherwise, assume Linux…
-else
-	echo "Clearing Caches…"
-	rm -fr ~/.cache/pip
-	rm -fr ~/.cache/pipenv
-fi
+python -m pip install --upgrade -e "$(pwd)" setuptools wheel pip
+VENV_CMD="python -m pipenv --venv"
+RM_CMD="pipenv --rm"
+echo "$ PIPENV_PYTHON=2.7 $VENV_CMD && PIPENV_PYTHON=2.7 $RM_CMD"
+echo "$ PIPENV_PYTHON=3.7 $VENV_CMD && PIPENV_PYTHON=3.7 $RM_CMD"
+{ PIPENV_PYTHON=2.7 $VENV_CMD && PIPENV_PYTHON=2.7 $RM_CMD ; PIPENV_PYTHON=3.7 $VENV_CMD && PIPENV_PYTHON=3.7 $RM_CMD ; }
 
 echo "Installing dependencies…"
-PIPENV_PYTHON=2.7 python3 -m pipenv --venv && pipenv --rm && pipenv install --dev
-PIPENV_PYTHON=3.7 python3 -m pipenv --venv && pipenv --rm && pipenv install --dev
-PIPENV_PYTHON=2.7 python3 -m pipenv run pip install --upgrade -e .[test]
-PIPENV_PYTHON=3.7 python3 -m pipenv run pip install --upgrade -e .[test]
+INSTALL_CMD="python -m pipenv install --deploy --dev"
+echo "$ PIPENV_PYTHON=2.7 $INSTALL_CMD"
+echo "$ PIPENV_PYTHON=3.7 $INSTALL_CMD"
+
+{ ( PIPENV_PYTHON=2.7 $INSTALL_CMD & ); PIPENV_PYTHON=3.7 $INSTALL_CMD ; }
 echo "$ git submodule sync && git submodule update --init --recursive"
 
 git submodule sync && git submodule update --init --recursive
 
-echo "$ pipenv run time pytest -v -n auto tests -m \"$TEST_SUITE\""
-# PIPENV_PYTHON=2.7 pipenv run time pytest -v -n auto tests -m "$TEST_SUITE" | prefix 2.7 &
-# PIPENV_PYTHON=3.6 pipenv run time pytest -v -n auto tests -m "$TEST_SUITE" | prefix 3.6
-# Better to run them sequentially.
-PIPENV_PYTHON=2.7 python3 -m pipenv run time pytest
-PIPENV_PYTHON=3.7 python3 -m pipenv run time pytest
-
-# test revendoring
-pip3 install --upgrade invoke requests parver vistir
-python3 -m invoke vendoring.update
-# Cleanup junk.
-rm -fr .venv
+echo "$ pipenv run time pytest"
+PIPENV_PYTHON=2.7 python -m pipenv run time pytest
+PIPENV_PYTHON=3.7 python -m pipenv run time pytest
