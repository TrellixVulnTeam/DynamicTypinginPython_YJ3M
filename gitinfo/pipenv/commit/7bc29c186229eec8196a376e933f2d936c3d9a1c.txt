commit 7bc29c186229eec8196a376e933f2d936c3d9a1c
Author: Dan Ryan <dan@danryan.co>
Date:   Fri Sep 7 02:21:36 2018 -0400

    update patch for piptools
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/tasks/vendoring/patches/patched/piptools.patch b/tasks/vendoring/patches/patched/piptools.patch
index 80b3f9e5..1f1ab655 100644
--- a/tasks/vendoring/patches/patched/piptools.patch
+++ b/tasks/vendoring/patches/patched/piptools.patch
@@ -1,23 +1,78 @@
-diff --git a/pipenv/patched/piptools/locations.py b/pipenv/patched/piptools/locations.py
-index 4e6174c..75f9b49 100644
---- a/pipenv/patched/piptools/locations.py
-+++ b/pipenv/patched/piptools/locations.py
-@@ -2,10 +2,13 @@ import os
- from shutil import rmtree
-
- from .click import secho
--from ._compat import user_cache_dir
-+# Patch by vphilippon 2017-11-22: Use pipenv cache path.
-+# from ._compat import user_cache_dir
-+from pipenv.environments import PIPENV_CACHE_DIR
-
- # The user_cache_dir helper comes straight from pip itself
--CACHE_DIR = user_cache_dir('pip-tools')
-+# CACHE_DIR = user_cache_dir(os.path.join('pip-tools'))
-+CACHE_DIR = PIPENV_CACHE_DIR
-
- # NOTE
- # We used to store the cache dir under ~/.pip-tools, which is not the
+diff --git a/pipenv/patched/piptools/_compat/__init__.py b/pipenv/patched/piptools/_compat/__init__.py
+index 674674a..feadad8 100644
+--- a/pipenv/patched/piptools/_compat/__init__.py
++++ b/pipenv/patched/piptools/_compat/__init__.py
+@@ -27,4 +27,6 @@ from .pip_compat import (
+     cmdoptions,
+     get_installed_distributions,
+     PyPI,
++    SafeFileCache,
++    InstallationError,
+ )
+diff --git a/pipenv/patched/piptools/_compat/pip_compat.py b/pipenv/patched/piptools/_compat/pip_compat.py
+index 1ba2cc7..3ea0826 100644
+--- a/pipenv/patched/piptools/_compat/pip_compat.py
++++ b/pipenv/patched/piptools/_compat/pip_compat.py
+@@ -1,9 +1,10 @@
+ # -*- coding=utf-8 -*-
+ import importlib
+ 
+-def do_import(module_path, subimport=None, old_path=None):
++def do_import(module_path, subimport=None, old_path=None, vendored_name=None):
+     old_path = old_path or module_path
+-    prefixes = ["pip._internal", "pip"]
++    prefix = vendored_name if vendored_name else "pip"
++    prefixes = ["{0}._internal".format(prefix), "{0}".format(prefix)]
+     paths = [module_path, old_path]
+     search_order = ["{0}.{1}".format(p, pth) for p in prefixes for pth in paths if pth is not None]
+     package = subimport if subimport else None
+@@ -18,17 +19,19 @@ def do_import(module_path, subimport=None, old_path=None):
+             return getattr(imported, package)
+ 
+ 
+-InstallRequirement = do_import('req.req_install', 'InstallRequirement')
+-parse_requirements = do_import('req.req_file', 'parse_requirements')
+-RequirementSet = do_import('req.req_set', 'RequirementSet')
+-user_cache_dir = do_import('utils.appdirs', 'user_cache_dir')
+-FAVORITE_HASH = do_import('utils.hashes', 'FAVORITE_HASH')
+-is_file_url = do_import('download', 'is_file_url')
+-url_to_path = do_import('download', 'url_to_path')
+-PackageFinder = do_import('index', 'PackageFinder')
+-FormatControl = do_import('index', 'FormatControl')
+-Wheel = do_import('wheel', 'Wheel')
+-Command = do_import('cli.base_command', 'Command', old_path='basecommand')
+-cmdoptions = do_import('cli.cmdoptions', old_path='cmdoptions')
+-get_installed_distributions = do_import('utils.misc', 'get_installed_distributions', old_path='utils')
+-PyPI = do_import('models.index', 'PyPI')
++InstallRequirement = do_import('req.req_install', 'InstallRequirement', vendored_name="notpip")
++parse_requirements = do_import('req.req_file', 'parse_requirements', vendored_name="notpip")
++RequirementSet = do_import('req.req_set', 'RequirementSet', vendored_name="notpip")
++user_cache_dir = do_import('utils.appdirs', 'user_cache_dir', vendored_name="notpip")
++FAVORITE_HASH = do_import('utils.hashes', 'FAVORITE_HASH', vendored_name="notpip")
++is_file_url = do_import('download', 'is_file_url', vendored_name="notpip")
++url_to_path = do_import('download', 'url_to_path', vendored_name="notpip")
++PackageFinder = do_import('index', 'PackageFinder', vendored_name="notpip")
++FormatControl = do_import('index', 'FormatControl', vendored_name="notpip")
++Wheel = do_import('wheel', 'Wheel', vendored_name="notpip")
++Command = do_import('cli.base_command', 'Command', old_path='basecommand', vendored_name="notpip")
++cmdoptions = do_import('cli.cmdoptions', old_path='cmdoptions', vendored_name="notpip")
++get_installed_distributions = do_import('utils.misc', 'get_installed_distributions', old_path='utils', vendored_name="notpip")
++PyPI = do_import('models.index', 'PyPI', vendored_name='notpip')
++SafeFileCache = do_import('download', 'SafeFileCache', vendored_name='notpip')
++InstallationError = do_import('exceptions', 'InstallationError', vendored_name='notpip')
+diff --git a/pipenv/patched/piptools/repositories/local.py b/pipenv/patched/piptools/repositories/local.py
+index 08dabe1..480ad1e 100644
+--- a/pipenv/patched/piptools/repositories/local.py
++++ b/pipenv/patched/piptools/repositories/local.py
+@@ -56,7 +56,7 @@ class LocalRequirementsRepository(BaseRepository):
+         if existing_pin and ireq_satisfied_by_existing_pin(ireq, existing_pin):
+             project, version, _ = as_tuple(existing_pin)
+             return make_install_requirement(
+-                project, version, ireq.extras, constraint=ireq.constraint
++                project, version, ireq.extras, constraint=ireq.constraint, markers=ireq.markers
+             )
+         else:
+             return self.repository.find_best_match(ireq, prereleases)
 diff --git a/pipenv/patched/piptools/repositories/pypi.py b/pipenv/patched/piptools/repositories/pypi.py
 index bf69803..eb20560 100644
 --- a/pipenv/patched/piptools/repositories/pypi.py
@@ -434,43 +489,27 @@ index bf69803..eb20560 100644
      def allow_all_wheels(self):
          """
 diff --git a/pipenv/patched/piptools/resolver.py b/pipenv/patched/piptools/resolver.py
-index 05ec8fd..2f94f6b 100644
+index c2d323c..d5a471d 100644
 --- a/pipenv/patched/piptools/resolver.py
 +++ b/pipenv/patched/piptools/resolver.py
-@@ -8,13 +8,14 @@ from itertools import chain, count
- import os
-
- from first import first
-+from pip._vendor.packaging.markers import default_environment
- from ._compat import InstallRequirement
-
- from . import click
+@@ -13,7 +13,7 @@ from . import click
  from .cache import DependencyCache
  from .exceptions import UnsupportedConstraint
  from .logging import log
 -from .utils import (format_requirement, format_specifier, full_groupby,
 +from .utils import (format_requirement, format_specifier, full_groupby, dedup, simplify_markers,
                      is_pinned_requirement, key_from_ireq, key_from_req, UNSAFE_PACKAGES)
-
+ 
  green = partial(click.style, fg='green')
-@@ -28,6 +29,7 @@ class RequirementSummary(object):
+@@ -27,6 +27,7 @@ class RequirementSummary(object):
      def __init__(self, ireq):
          self.req = ireq.req
          self.key = key_from_req(ireq.req)
 +        self.markers = ireq.markers
          self.extras = str(sorted(ireq.extras))
          self.specifier = str(ireq.specifier)
-
-@@ -71,7 +73,7 @@ class Resolver(object):
-         with self.repository.allow_all_wheels():
-             return {ireq: self.repository.get_hashes(ireq) for ireq in ireqs}
-
--    def resolve(self, max_rounds=10):
-+    def resolve(self, max_rounds=12):
-         """
-         Finds concrete package versions for all the given InstallRequirements
-         and their recursive dependencies.  The end result is a flat list of
-@@ -120,7 +122,7 @@ class Resolver(object):
+ 
+@@ -119,7 +120,7 @@ class Resolver(object):
      @staticmethod
      def check_constraints(constraints):
          for constraint in constraints:
@@ -479,23 +518,9 @@ index 05ec8fd..2f94f6b 100644
                  msg = ('pip-compile does not support URLs as packages, unless they are editable. '
                         'Perhaps add -e option?')
                  raise UnsupportedConstraint(msg, constraint)
-@@ -147,15 +149,23 @@ class Resolver(object):
-             if editable_ireq:
-                 yield editable_ireq  # ignore all the other specs: the editable one is the one that counts
-                 continue
--
-             ireqs = iter(ireqs)
-             # deepcopy the accumulator so as to not modify the self.our_constraints invariant
-             combined_ireq = copy.deepcopy(next(ireqs))
--            combined_ireq.comes_from = None
-             for ireq in ireqs:
+@@ -155,6 +156,13 @@ class Resolver(object):
                  # NOTE we may be losing some info on dropped reqs here
--                combined_ireq.req.specifier &= ireq.req.specifier
-+                try:
-+                    combined_ireq.req.specifier &= ireq.req.specifier
-+                except TypeError:
-+                    if ireq.req.specifier._specs and not combined_ireq.req.specifier._specs:
-+                        combined_ireq.req.specifier._specs = ireq.req.specifier._specs
+                 combined_ireq.req.specifier &= ireq.req.specifier
                  combined_ireq.constraint &= ireq.constraint
 +                if not combined_ireq.markers:
 +                    combined_ireq.markers = ireq.markers
@@ -503,80 +528,59 @@ index 05ec8fd..2f94f6b 100644
 +                    _markers = combined_ireq.markers._markers
 +                    if not isinstance(_markers[0], (tuple, list)):
 +                        combined_ireq.markers._markers = [_markers, 'and', ireq.markers._markers]
++
                  # Return a sorted, de-duped tuple of extras
                  combined_ireq.extras = tuple(sorted(set(tuple(combined_ireq.extras) + tuple(ireq.extras))))
              yield combined_ireq
-@@ -273,6 +283,14 @@ class Resolver(object):
+@@ -272,6 +280,15 @@ class Resolver(object):
              for dependency in self.repository.get_dependencies(ireq):
                  yield dependency
              return
 +
 +        # fix our malformed extras
 +        if ireq.extras:
-+            if hasattr(ireq, 'extra'):
++            if getattr(ireq, "extra", None):
 +                if ireq.extras:
 +                    ireq.extras.extend(ireq.extra)
 +                else:
 +                    ireq.extras = ireq.extra
++
          elif not is_pinned_requirement(ireq):
              raise TypeError('Expected pinned or editable requirement, got {}'.format(ireq))
-
-@@ -283,14 +301,14 @@ class Resolver(object):
+ 
+@@ -282,7 +299,7 @@ class Resolver(object):
          if ireq not in self.dependency_cache:
              log.debug('  {} not in cache, need to check index'.format(format_requirement(ireq)), fg='yellow')
              dependencies = self.repository.get_dependencies(ireq)
 -            self.dependency_cache[ireq] = sorted(str(ireq.req) for ireq in dependencies)
-+            self.dependency_cache[ireq] = sorted(format_requirement(_ireq) for _ireq in dependencies)
-
++            self.dependency_cache[ireq] = sorted(set(format_requirement(ireq) for ireq in dependencies))
+ 
          # Example: ['Werkzeug>=0.9', 'Jinja2>=2.4']
          dependency_strings = self.dependency_cache[ireq]
-         log.debug('  {:25} requires {}'.format(format_requirement(ireq),
-                                                ', '.join(sorted(dependency_strings, key=lambda s: s.lower())) or '-'))
-         for dependency_string in dependency_strings:
--            yield InstallRequirement.from_line(dependency_string, constraint=ireq.constraint)
-+                yield InstallRequirement.from_line(dependency_string, constraint=ireq.constraint)
-
-     def reverse_dependencies(self, ireqs):
-         non_editable = [ireq for ireq in ireqs if not ireq.editable]
-diff --git a/pipenv/patched/piptools/repositories/local.py b/pipenv/patched/piptools/repositories/local.py
-index 08dabe1..480ad1e 100644
---- a/pipenv/patched/piptools/repositories/local.py
-+++ b/pipenv/patched/piptools/repositories/local.py
-@@ -56,7 +56,7 @@ class LocalRequirementsRepository(BaseRepository):
-         if existing_pin and ireq_satisfied_by_existing_pin(ireq, existing_pin):
-             project, version, _ = as_tuple(existing_pin)
-             return make_install_requirement(
--                project, version, ireq.extras, constraint=ireq.constraint
-+                project, version, ireq.extras, constraint=ireq.constraint, markers=ireq.markers
-             )
-         else:
-             return self.repository.find_best_match(ireq, prereleases)
 diff --git a/pipenv/patched/piptools/utils.py b/pipenv/patched/piptools/utils.py
-index fde5816..23a05f2 100644
+index a164334..6225d7e 100644
 --- a/pipenv/patched/piptools/utils.py
 +++ b/pipenv/patched/piptools/utils.py
-@@ -2,6 +2,7 @@
- from __future__ import (absolute_import, division, print_function,
-                         unicode_literals)
-
-+import six
+@@ -4,6 +4,7 @@ from __future__ import (absolute_import, division, print_function,
+ 
  import os
  import sys
++import six
  from itertools import chain, groupby
-@@ -11,13 +12,79 @@ from contextlib import contextmanager
+ from collections import OrderedDict
+ from contextlib import contextmanager
+@@ -11,11 +12,78 @@ from contextlib import contextmanager
  from ._compat import InstallRequirement
-
- from first import first
--
+ 
+ from .click import style
 +from pip._vendor.packaging.specifiers import SpecifierSet, InvalidSpecifier
 +from pip._vendor.packaging.version import Version, InvalidVersion, parse as parse_version
 +from pip._vendor.packaging.markers import Marker, Op, Value, Variable
- from .click import style
-
-
+ 
+ 
  UNSAFE_PACKAGES = {'setuptools', 'distribute', 'pip'}
-
-
+ 
+ 
 +def simplify_markers(ireq):
 +    """simplify_markers "This code cleans up markers for a specific :class:`~InstallRequirement`"
 +
@@ -644,10 +648,10 @@ index fde5816..23a05f2 100644
  def key_from_ireq(ireq):
      """Get a standardized key for an InstallRequirement."""
      if ireq.req is None and ireq.link is not None:
-@@ -43,16 +110,51 @@ def comment(text):
+@@ -41,30 +109,61 @@ def comment(text):
      return style(text, fg='green')
-
-
+ 
+ 
 -def make_install_requirement(name, version, extras, constraint=False):
 +def make_install_requirement(name, version, extras, markers, constraint=False):
      # If no extras are specified, the extras string is blank
@@ -655,7 +659,7 @@ index fde5816..23a05f2 100644
      if extras:
          # Sort extras for stability
          extras_string = "[{}]".format(",".join(sorted(extras)))
-
+ 
 -    return InstallRequirement.from_line(
 -        str('{}{}=={}'.format(name, extras_string, version)),
 -        constraint=constraint)
@@ -667,10 +671,13 @@ index fde5816..23a05f2 100644
 +        return InstallRequirement.from_line(
 +            str('{}{}=={}; {}'.format(name, extras_string, version, str(markers))),
 +            constraint=constraint)
-+
-+
+ 
+ 
+-def format_requirement(ireq, marker=None):
 +def _requirement_to_str_lowercase_name(requirement):
-+    """
+     """
+-    Generic formatter for pretty printing InstallRequirements to the terminal
+-    in a less verbose way than using its `__str__` method.
 +    Formats a packaging.requirements.Requirement with a lowercase name.
 +
 +    This is simply a copy of
@@ -681,7 +688,7 @@ index fde5816..23a05f2 100644
 +    lowercasing the entire result, which would lowercase the name, *and* other,
 +    important stuff that should not be lowercased (such as the marker). See
 +    this issue for more information: https://github.com/pypa/pipenv/issues/2113.
-+    """
+     """
 +    parts = [requirement.name.lower()]
 +
 +    if requirement.extras:
@@ -697,108 +704,19 @@ index fde5816..23a05f2 100644
 +        parts.append("; {0}".format(requirement.marker))
 +
 +    return "".join(parts)
-
-
- def format_requirement(ireq, marker=None):
-@@ -63,10 +165,10 @@ def format_requirement(ireq, marker=None):
++
++
++def format_requirement(ireq, marker=None):
      if ireq.editable:
          line = '-e {}'.format(ireq.link)
      else:
 -        line = str(ireq.req).lower()
 +        line = _requirement_to_str_lowercase_name(ireq.req)
-
+ 
 -    if marker:
 -        line = '{} ; {}'.format(line, marker)
 +    if marker and ';' not in line:
 +        line = '{}; {}'.format(line, marker)
-
-     return line
-
-diff --git a/pipenv/patched/piptools/_compat/pip_compat.py b/pipenv/patched/piptools/_compat/pip_compat.py
-index 7e8cdf3..0a0d27d 100644
---- a/pipenv/patched/piptools/_compat/pip_compat.py
-+++ b/pipenv/patched/piptools/_compat/pip_compat.py
-@@ -1,30 +1,42 @@
- # -*- coding=utf-8 -*-
- import importlib
  
--def do_import(module_path, subimport=None, old_path=None):
-+
-+def do_import(module_path, subimport=None, old_path=None, vendored_name=None):
-     internal = 'pip._internal.{0}'.format(module_path)
-     old_path = old_path or module_path
-     pip9 = 'pip.{0}'.format(old_path)
--    try:
--        _tmp = importlib.import_module(internal)
--    except ImportError:
--        _tmp = importlib.import_module(pip9)
-+    _tmp = None
-+    if vendored_name:
-+        vendor = '{0}._internal'.format(vendored_name)
-+        vendor = '{0}.{1}'.format(vendor, old_path if old_path else module_path)
-+        try:
-+            _tmp = importlib.import_module(vendor)
-+        except ImportError:
-+            pass
-+    if not _tmp:
-+        try:
-+            _tmp = importlib.import_module(internal)
-+        except ImportError:
-+            _tmp = importlib.import_module(pip9)
-     if subimport:
-         return getattr(_tmp, subimport, _tmp)
-     return _tmp
--    
+     return line
  
--InstallRequirement = do_import('req.req_install', 'InstallRequirement')
--parse_requirements = do_import('req.req_file', 'parse_requirements')
--RequirementSet = do_import('req.req_set', 'RequirementSet')
--user_cache_dir = do_import('utils.appdirs', 'user_cache_dir')
--FAVORITE_HASH = do_import('utils.hashes', 'FAVORITE_HASH')
--is_file_url = do_import('download', 'is_file_url')
--url_to_path = do_import('download', 'url_to_path')
--PackageFinder = do_import('index', 'PackageFinder')
--FormatControl = do_import('index', 'FormatControl')
--Wheel = do_import('wheel', 'Wheel')
--Command = do_import('basecommand', 'Command')
--cmdoptions = do_import('cmdoptions')
--get_installed_distributions = do_import('utils.misc', 'get_installed_distributions', old_path='utils')
--PyPI = do_import('models.index', 'PyPI')
-+
-+InstallRequirement = do_import('req.req_install', 'InstallRequirement', vendored_name='notpip')
-+parse_requirements = do_import('req.req_file', 'parse_requirements', vendored_name='notpip')
-+RequirementSet = do_import('req.req_set', 'RequirementSet', vendored_name='notpip')
-+user_cache_dir = do_import('utils.appdirs', 'user_cache_dir', vendored_name='notpip')
-+FAVORITE_HASH = do_import('utils.hashes', 'FAVORITE_HASH', vendored_name='notpip')
-+is_file_url = do_import('download', 'is_file_url', vendored_name='notpip')
-+url_to_path = do_import('download', 'url_to_path', vendored_name='notpip')
-+PackageFinder = do_import('index', 'PackageFinder', vendored_name='notpip')
-+FormatControl = do_import('index', 'FormatControl', vendored_name='notpip')
-+Wheel = do_import('wheel', 'Wheel', vendored_name='notpip')
-+Command = do_import('basecommand', 'Command', vendored_name='notpip')
-+cmdoptions = do_import('cmdoptions', vendored_name='notpip')
-+get_installed_distributions = do_import('utils.misc', 'get_installed_distributions', old_path='utils', vendored_name='notpip')
-+PyPI = do_import('models.index', 'PyPI', vendored_name='notpip')
-+SafeFileCache = do_import('download', 'SafeFileCache', vendored_name='notpip')
-+InstallationError = do_import('exceptions', 'InstallationError', vendored_name='notpip')
-diff --git a/pipenv/patched/piptools/_compat/__init__.py b/pipenv/patched/piptools/_compat/__init__.py
-index 674674a..feadad8 100644
---- a/pipenv/patched/piptools/_compat/__init__.py
-+++ b/pipenv/patched/piptools/_compat/__init__.py
-@@ -27,4 +27,6 @@ from .pip_compat import (
-     cmdoptions,
-     get_installed_distributions,
-     PyPI,
-+    SafeFileCache,
-+    InstallationError,
- )
-diff --git a/pipenv/patched/pip/_vendor/__init__.py b/pipenv/patched/pip/_vendor/__init__.py
-index 774f1bf3..40ce7a01 100644
---- a/pipenv/patched/pip/_vendor/__init__.py
-+++ b/pipenv/patched/pip/_vendor/__init__.py
-@@ -107,3 +107,5 @@ if DEBUNDLED:
-     vendored("requests.packages.urllib3.util.ssl_")
-     vendored("requests.packages.urllib3.util.timeout")
-     vendored("requests.packages.urllib3.util.url")
-+
-+import requests
