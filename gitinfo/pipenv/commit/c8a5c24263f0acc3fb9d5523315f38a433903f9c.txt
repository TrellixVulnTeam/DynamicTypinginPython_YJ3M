commit c8a5c24263f0acc3fb9d5523315f38a433903f9c
Author: Dan Ryan <dan@danryan.co>
Date:   Wed May 23 18:41:25 2018 -0400

    Fix extras parsing for pip10
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/patched/notpip/_internal/operations/prepare.py b/pipenv/patched/notpip/_internal/operations/prepare.py
index 5e9f8a6b..b3f6ce56 100644
--- a/pipenv/patched/notpip/_internal/operations/prepare.py
+++ b/pipenv/patched/notpip/_internal/operations/prepare.py
@@ -233,15 +233,15 @@ class RequirementPreparer(object):
             # FIXME: this won't upgrade when there's an existing
             # package unpacked in `req.source_dir`
             # package unpacked in `req.source_dir`
-            if os.path.exists(os.path.join(req.source_dir, 'setup.py')):
-                raise PreviousBuildDirError(
-                    "pip can't proceed with requirements '%s' due to a"
-                    " pre-existing build directory (%s). This is "
-                    "likely due to a previous installation that failed"
-                    ". pip is being responsible and not assuming it "
-                    "can delete this. Please delete it and try again."
-                    % (req, req.source_dir)
-                )
+            # if os.path.exists(os.path.join(req.source_dir, 'setup.py')):
+            #     raise PreviousBuildDirError(
+            #         "pip can't proceed with requirements '%s' due to a"
+            #         " pre-existing build directory (%s). This is "
+            #         "likely due to a previous installation that failed"
+            #         ". pip is being responsible and not assuming it "
+            #         "can delete this. Please delete it and try again."
+            #         % (req, req.source_dir)
+            #     )
             req.populate_link(finder, upgrade_allowed, require_hashes)
 
             # We can't hit this spot and have populate_link return None.
diff --git a/pipenv/patched/piptools/resolver.py b/pipenv/patched/piptools/resolver.py
index 9a1c3810..c5eb728d 100644
--- a/pipenv/patched/piptools/resolver.py
+++ b/pipenv/patched/piptools/resolver.py
@@ -8,6 +8,7 @@ from itertools import chain, count
 import os
 
 from first import first
+from notpip._vendor.packaging.markers import default_environment
 from ._compat import InstallRequirement
 
 from . import click
@@ -283,8 +284,17 @@ class Resolver(object):
                 yield dependency
             return
         elif ireq.extras:
+            valid_markers = default_environment().keys()
             for dependency in self.repository.get_dependencies(ireq):
                 dependency.prepared = False
+                if dependency.markers and not any(dependency.markers._markers[0][0].value.startswith(k) for k in valid_markers):
+                    dependency.markers = None
+                if hasattr(ireq, 'extra'):
+                    if ireq.extras:
+                        ireq.extras.extend(ireq.extra)
+                    else:
+                        ireq.extras = ireq.extra
+
                 yield dependency
             return
         elif not is_pinned_requirement(ireq):
diff --git a/tasks/vendoring/patches/patched/pip10.patch b/tasks/vendoring/patches/patched/pip10.patch
index 89e3edd1..1c507ba7 100644
--- a/tasks/vendoring/patches/patched/pip10.patch
+++ b/tasks/vendoring/patches/patched/pip10.patch
@@ -501,6 +501,35 @@ index c71f17d2..3e29a49d 100644
              SETUPTOOLS_SHIM % req.setup_py
          ] + list(self.global_options)
  
+diff --git a/pipenv/patched/pip/_internal/operations/prepare.py b/pipenv/patched/pip/_internal/operations/prepare.py
+index 27e3a5dd..0be76f70 100644
+--- a/pipenv/patched/pip/_internal/operations/prepare.py
++++ b/pipenv/patched/pip/_internal/operations/prepare.py
+@@ -233,15 +233,15 @@ class RequirementPreparer(object):
+             # FIXME: this won't upgrade when there's an existing
+             # package unpacked in `req.source_dir`
+             # package unpacked in `req.source_dir`
+-            if os.path.exists(os.path.join(req.source_dir, 'setup.py')):
+-                raise PreviousBuildDirError(
+-                    "pip can't proceed with requirements '%s' due to a"
+-                    " pre-existing build directory (%s). This is "
+-                    "likely due to a previous installation that failed"
+-                    ". pip is being responsible and not assuming it "
+-                    "can delete this. Please delete it and try again."
+-                    % (req, req.source_dir)
+-                )
++            # if os.path.exists(os.path.join(req.source_dir, 'setup.py')):
++            #     raise PreviousBuildDirError(
++            #         "pip can't proceed with requirements '%s' due to a"
++            #         " pre-existing build directory (%s). This is "
++            #         "likely due to a previous installation that failed"
++            #         ". pip is being responsible and not assuming it "
++            #         "can delete this. Please delete it and try again."
++            #         % (req, req.source_dir)
++            #     )
+             req.populate_link(finder, upgrade_allowed, require_hashes)
+ 
+             # We can't hit this spot and have populate_link return None.
 diff --git a/pipenv/patched/pip/_internal/pep425tags.py b/pipenv/patched/notpip/_internal/pep425tags.py
 index c2290ab9..bea31585 100644
 --- a/pipenv/patched/pip/_internal/pep425tags.py
diff --git a/tasks/vendoring/patches/patched/piptools.patch b/tasks/vendoring/patches/patched/piptools.patch
index 9a44883e..a6c56e48 100644
--- a/tasks/vendoring/patches/patched/piptools.patch
+++ b/tasks/vendoring/patches/patched/piptools.patch
@@ -300,10 +300,17 @@ index 1c4b943..e412a1f 100644
      def allow_all_wheels(self):
          """
 diff --git a/pipenv/patched/piptools/resolver.py b/pipenv/patched/piptools/resolver.py
-index 05ec8fd..6380e8f 100644
+index 05ec8fd..c5eb728 100644
 --- a/pipenv/patched/piptools/resolver.py
 +++ b/pipenv/patched/piptools/resolver.py
-@@ -14,7 +14,7 @@ from . import click
+@@ -8,13 +8,14 @@ from itertools import chain, count
+ import os
+ 
+ from first import first
++from pip._vendor.packaging.markers import default_environment
+ from ._compat import InstallRequirement
+ 
+ from . import click
  from .cache import DependencyCache
  from .exceptions import UnsupportedConstraint
  from .logging import log
@@ -312,7 +319,7 @@ index 05ec8fd..6380e8f 100644
                      is_pinned_requirement, key_from_ireq, key_from_req, UNSAFE_PACKAGES)
  
  green = partial(click.style, fg='green')
-@@ -28,6 +28,7 @@ class RequirementSummary(object):
+@@ -28,6 +29,7 @@ class RequirementSummary(object):
      def __init__(self, ireq):
          self.req = ireq.req
          self.key = key_from_req(ireq.req)
@@ -320,7 +327,7 @@ index 05ec8fd..6380e8f 100644
          self.extras = str(sorted(ireq.extras))
          self.specifier = str(ireq.specifier)
  
-@@ -71,7 +72,7 @@ class Resolver(object):
+@@ -71,7 +73,7 @@ class Resolver(object):
          with self.repository.allow_all_wheels():
              return {ireq: self.repository.get_hashes(ireq) for ireq in ireqs}
  
@@ -329,7 +336,7 @@ index 05ec8fd..6380e8f 100644
          """
          Finds concrete package versions for all the given InstallRequirements
          and their recursive dependencies.  The end result is a flat list of
-@@ -120,7 +121,7 @@ class Resolver(object):
+@@ -120,7 +122,7 @@ class Resolver(object):
      @staticmethod
      def check_constraints(constraints):
          for constraint in constraints:
@@ -338,7 +345,7 @@ index 05ec8fd..6380e8f 100644
                  msg = ('pip-compile does not support URLs as packages, unless they are editable. '
                         'Perhaps add -e option?')
                  raise UnsupportedConstraint(msg, constraint)
-@@ -147,15 +148,18 @@ class Resolver(object):
+@@ -147,15 +149,18 @@ class Resolver(object):
              if editable_ireq:
                  yield editable_ireq  # ignore all the other specs: the editable one is the one that counts
                  continue
@@ -360,24 +367,33 @@ index 05ec8fd..6380e8f 100644
                  # Return a sorted, de-duped tuple of extras
                  combined_ireq.extras = tuple(sorted(set(tuple(combined_ireq.extras) + tuple(ireq.extras))))
              yield combined_ireq
-@@ -273,6 +277,16 @@ class Resolver(object):
+@@ -271,6 +276,25 @@ class Resolver(object):
+         """
+         if ireq.editable:
              for dependency in self.repository.get_dependencies(ireq):
-                 yield dependency
-             return
++                yield dependency
++            return
 +        elif ireq.markers:
 +            for dependency in self.repository.get_dependencies(ireq):
 +                dependency.prepared = False
 +                yield dependency
 +            return
 +        elif ireq.extras:
++            valid_markers = default_environment().keys()
 +            for dependency in self.repository.get_dependencies(ireq):
 +                dependency.prepared = False
-+                yield dependency
-+            return
++                if dependency.markers and not any(dependency.markers._markers[0][0].value.startswith(k) for k in valid_markers):
++                    dependency.markers = None
++                if hasattr(ireq, 'extra'):
++                    if ireq.extras:
++                        ireq.extras.extend(ireq.extra)
++                    else:
++                        ireq.extras = ireq.extra
++
+                 yield dependency
+             return
          elif not is_pinned_requirement(ireq):
-             raise TypeError('Expected pinned or editable requirement, got {}'.format(ireq))
- 
-@@ -283,14 +297,25 @@ class Resolver(object):
+@@ -283,14 +307,25 @@ class Resolver(object):
          if ireq not in self.dependency_cache:
              log.debug('  {} not in cache, need to check index'.format(format_requirement(ireq)), fg='yellow')
              dependencies = self.repository.get_dependencies(ireq)
@@ -389,7 +405,7 @@ index 05ec8fd..6380e8f 100644
          dependency_strings = self.dependency_cache[ireq]
          log.debug('  {:25} requires {}'.format(format_requirement(ireq),
                                                 ', '.join(sorted(dependency_strings, key=lambda s: s.lower())) or '-'))
-+        from notpip._vendor.packaging.markers import InvalidMarker
++        from pip._vendor.packaging.markers import InvalidMarker
          for dependency_string in dependency_strings:
 -            yield InstallRequirement.from_line(dependency_string, constraint=ireq.constraint)
 +            try:
