commit 6e32b6fc49b44c1018d1f18d84e54ad0f8675b7b
Author: Dan Ryan <dan@danryan.co>
Date:   Sun Oct 1 22:58:49 2017 -0400

    Refactor project package code and add VCS checks

diff --git a/pipenv/project.py b/pipenv/project.py
index 5b7c90fb..3205e0e8 100644
--- a/pipenv/project.py
+++ b/pipenv/project.py
@@ -51,6 +51,26 @@ class Project(object):
 
         return os.sep.join([self._original_dir, p])
 
+    def _build_package_list(self, package_section):
+        """Returns a list of packages for pip-tools to consume."""
+        ps = {}
+        for k, v in self.parsed_pipfile.get(package_section, {}).items():
+            # Skip editable VCS deps.
+            if hasattr(v, 'keys'):
+                # When a vcs url is gven without editable it only appears as a key
+                if is_vcs(v) or is_vcs(k):
+                    if 'editable' not in v:
+                        continue
+                    else:
+                        ps.update({k: v})
+                else:
+                    if 'file' not in v and not is_vcs(v) and not is_vcs(k):
+                        ps.update({k: v})
+            else:
+                if not is_vcs(k):
+                    ps.update({k: v})
+        return ps
+
     @property
     def name(self):
         if self._name is None:
@@ -301,7 +321,7 @@ class Project(object):
         """Returns a list of VCS packages, for not pip-tools to consume."""
         ps = {}
         for k, v in self.parsed_pipfile.get('packages', {}).items():
-            if is_vcs(v):
+            if is_vcs(v) or is_vcs(k):
                 ps.update({k: v})
         return ps
 
@@ -310,7 +330,7 @@ class Project(object):
         """Returns a list of VCS packages, for not pip-tools to consume."""
         ps = {}
         for k, v in self.parsed_pipfile.get('dev-packages', {}).items():
-            if is_vcs(v):
+            if is_vcs(v) or is_vcs(k):
                 ps.update({k: v})
         return ps
 
@@ -324,40 +344,12 @@ class Project(object):
     @property
     def packages(self):
         """Returns a list of packages, for pip-tools to consume."""
-        ps = {}
-        for k, v in self.parsed_pipfile.get('packages', {}).items():
-            # Skip editable VCS deps.
-            if hasattr(v, 'keys'):
-                if is_vcs(v):
-                    if 'editable' not in v:
-                        continue
-                    else:
-                        ps.update({k: v})
-                else:
-                    if 'file' not in v:
-                        ps.update({k: v})
-            else:
-                ps.update({k: v})
-        return ps
+        return self._build_package_list('packages')
 
     @property
     def dev_packages(self):
         """Returns a list of dev-packages, for pip-tools to consume."""
-        ps = {}
-        for k, v in self.parsed_pipfile.get('dev-packages', {}).items():
-            # Skip editable VCS deps.
-            if hasattr(v, 'keys'):
-                if is_vcs(v):
-                    if 'editable' not in v:
-                        continue
-                    else:
-                        ps.update({k: v})
-                else:
-                    if 'file' not in v:
-                        ps.update({k: v})
-            else:
-                ps.update({k: v})
-        return ps
+        return self._build_package_list('dev-packages')
 
     def touch_pipfile(self):
         """Simply touches the Pipfile, for later use."""
