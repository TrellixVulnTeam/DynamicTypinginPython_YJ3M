commit 81502e03ba305ae1523a904becf6f6efe18d5531
Author: Gleb Kozyrev <gleb@gkoz.com>
Date:   Thu Feb 14 08:39:32 2019 +0200

    Always put process handles in the queue
    
    In sequential (blocking) mode only the first `pip install` process handle
    was being put in the queue, the subsequent ones never reaching cleanup,
    where the exit code is checked, hiding installation errors and logs.
    
    Remove the nprocs argument and set `procs.maxsize` to 1 in sequential mode
    instead.
    
    Remove redundant `Command.block` call, `delegate.run` takes care of that.
    
    Simplify queue cleanup condition. It's only necessary to cleanup inside the
    loop if `procs` is full.

diff --git a/news/3537.bugfix.rst b/news/3537.bugfix.rst
new file mode 100644
index 00000000..779b9d7c
--- /dev/null
+++ b/news/3537.bugfix.rst
@@ -0,0 +1 @@
+Fix ``sync --sequential`` ignoring ``pip install`` errors and logs.
diff --git a/pipenv/core.py b/pipenv/core.py
index 7b00eb59..18011a1d 100644
--- a/pipenv/core.py
+++ b/pipenv/core.py
@@ -679,7 +679,7 @@ def _cleanup_procs(procs, concurrent, failed_deps_queue, retry=True):
 def batch_install(deps_list, procs, failed_deps_queue,
                   requirements_dir, no_deps=False, ignore_hashes=False,
                   allow_global=False, blocking=False, pypi_mirror=None,
-                  nprocs=PIPENV_MAX_SUBPROCESS, retry=True):
+                  retry=True):
     from .vendor.requirementslib.models.utils import strip_extras_markers_from_requirement
     failed = (not retry)
     if not failed:
@@ -750,11 +750,10 @@ def batch_install(deps_list, procs, failed_deps_queue,
                 extra_indexes=extra_indexes,
                 use_pep517=not failed,
             )
-            if procs.qsize() < nprocs:
-                c.dep = dep
-                procs.put(c)
+            c.dep = dep
 
-            if procs.full() or procs.qsize() == len(deps_list):
+            procs.put(c)
+            if procs.full():
                 _cleanup_procs(procs, not blocking, failed_deps_queue, retry=retry)
 
 
@@ -815,7 +814,11 @@ def do_install_dependencies(
         )
         sys.exit(0)
 
-    procs = queue.Queue(maxsize=PIPENV_MAX_SUBPROCESS)
+    if concurrent:
+        nprocs = PIPENV_MAX_SUBPROCESS
+    else:
+        nprocs = 1
+    procs = queue.Queue(maxsize=nprocs)
     failed_deps_queue = queue.Queue()
     if skip_lock:
         ignore_hashes = True
@@ -824,10 +827,6 @@ def do_install_dependencies(
         "no_deps": no_deps, "ignore_hashes": ignore_hashes, "allow_global": allow_global,
         "blocking": blocking, "pypi_mirror": pypi_mirror
     }
-    if concurrent:
-        install_kwargs["nprocs"] = PIPENV_MAX_SUBPROCESS
-    else:
-        install_kwargs["nprocs"] = 1
 
     # with project.environment.activated():
     batch_install(
@@ -847,7 +846,6 @@ def do_install_dependencies(
             failed_dep = failed_deps_queue.get()
             retry_list.append(failed_dep)
         install_kwargs.update({
-            "nprocs": 1,
             "retry": False,
             "blocking": True,
         })
@@ -1784,8 +1782,8 @@ def do_py(system=False):
             ),
             err=True,
         )
-        return    
-    
+        return
+
     try:
         click.echo(which("python", allow_global=system))
     except AttributeError:
