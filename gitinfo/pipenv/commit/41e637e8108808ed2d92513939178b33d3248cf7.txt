commit 41e637e8108808ed2d92513939178b33d3248cf7
Author: Dan Ryan <dan@danryan.co>
Date:   Thu Nov 1 18:54:14 2018 -0400

    Fix uninstallation passthrough
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/core.py b/pipenv/core.py
index 8c8d7e39..85f9b2e9 100644
--- a/pipenv/core.py
+++ b/pipenv/core.py
@@ -1146,21 +1146,20 @@ def do_purge(bare=False, downloads=False, allow_global=False):
         return
 
     # Remove comments from the output, if any.
-    installed = [
+    installed = set([
         pep423_name(pkg.project_name) for pkg in project.get_installed_packages()
-    ]
-    # Remove setuptools and friends from installed, if present.
-    for package_name in BAD_PACKAGES:
-        for i, package in enumerate(installed):
-            if package.startswith(package_name):
-                del installed[i]
+    ])
+    bad_pkgs = set([pep423_name(pkg) for pkg in BAD_PACKAGES])
+    # Remove setuptools, pip, etc from targets for removal
+    to_remove = installed - bad_pkgs
+
     if not bare:
         click.echo(
-            fix_utf8("Found {0} installed package(s), purging…".format(len(installed)))
+            fix_utf8("Found {0} installed package(s), purging…".format(len(to_remove)))
         )
     command = "{0} uninstall {1} -y".format(
         escape_grouped_arguments(which_pip(allow_global=allow_global)),
-        " ".join(installed),
+        " ".join(to_remove),
     )
     if environments.is_verbose():
         click.echo("$ {0}".format(command))
@@ -2053,23 +2052,19 @@ def do_uninstall(
     if not any([packages, editable_packages, all_dev, all]):
         raise exceptions.MissingParameter(crayons.red("No package provided!"), ctx=ctx,
                                                                     param_type="parameter")
-    if all:
-        click.echo(
-            crayons.normal(fix_utf8("Un-installing all packages from virtualenv…"), bold=True)
-        )
-        removed_packages = do_purge(allow_global=system)
-        project.remove_packages_from_pipfile(removed_packages)
-        if lock:
-            do_lock(system=system, keep_outdated=keep_outdated, pypi_mirror=pypi_mirror)
-        return
     editable_pkgs = [
         Requirement.from_line("-e {0}".format(p)).name for p in editable_packages if p
     ]
-    package_names = [p for p in packages if p] + editable_pkgs
+    packages = packages + editable_pkgs
+    package_names = [p for p in packages if p]
+    package_map = {
+        canonicalize_name(p): p for p in packages if p
+    }
     installed_package_names = set([
         canonicalize_name(pkg.project_name) for pkg in project.get_installed_packages()
     ])
     # Intelligently detect if --dev should be used or not.
+    lockfile_packages = set()
     if project.lockfile_exists:
         develop = set(
             [canonicalize_name(k) for k in project.lockfile_content["develop"].keys()]
@@ -2077,6 +2072,7 @@ def do_uninstall(
         default = set(
             [canonicalize_name(k) for k in project.lockfile_content["default"].keys()]
         )
+        lockfile_packages |= develop | default
     else:
         develop = set(
             [canonicalize_name(k) for k in project.dev_packages.keys()]
@@ -2103,24 +2099,40 @@ def do_uninstall(
         package_names = develop
     fix_venv_site(project.env_paths["lib"])
     # Remove known "bad packages" from the list.
+    bad_pkgs = set([canonicalize_name(pkg) for pkg in BAD_PACKAGES])
     for bad_package in BAD_PACKAGES:
-        if canonicalize_name(bad_package) in package_names:
+        normalized_bad_pkg = canonicalize_name(bad_package)
+        if normalized_bad_pkg in package_map:
             if environments.is_verbose():
                 click.echo("Ignoring {0}.".format(repr(bad_package)), err=True)
-            del package_names[package_names.index(
-                canonicalize_name(bad_package)
-            )]
+            pkg_name_index = package_names.index(package_map[normalized_bad_pkg])
+            del package_names[pkg_name_index]
     used_packages = develop | default & installed_package_names
     failure = False
     packages_to_remove = set()
+    if all:
+        package_names = develop | default
+        click.echo(
+            crayons.normal(fix_utf8("Un-installing all packages from virtualenv…"), bold=True)
+        )
+        do_purge(allow_global=system)
+        removed = package_names - bad_pkgs
+        project.remove_packages_from_pipfile(removed)
+        if lock:
+            do_lock(system=system, keep_outdated=keep_outdated, pypi_mirror=pypi_mirror)
+        return
     if all_dev:
-        packages_to_remove |= develop & installed_package_names
-    package_names = set([pkg_name for pkg_name in package_names])
+        package_names = develop
+    else:
+        package_names = set([pkg_name for pkg_name in package_names])
+    selected_pkg_map = {
+        canonicalize_name(p): p for p in package_names
+    }
     packages_to_remove = [
-        pkg_name for pkg_name in packages
-        if canonicalize_name(pkg_name) in used_packages
+        p for normalized, p in selected_pkg_map.items()
+        if (normalized in used_packages and normalized not in bad_pkgs)
     ]
-    for package_name in package_names:
+    for normalized, package_name in selected_pkg_map.items():
         click.echo(
             crayons.white(
                 fix_utf8("Uninstalling {0}…".format(repr(package_name))), bold=True
@@ -2142,7 +2154,9 @@ def do_uninstall(
             in_dev_packages = project.get_package_name_in_pipfile(
                 package_name, dev=True
             )
-            if not in_dev_packages and not in_packages:
+            if not (in_dev_packages or in_packages):
+                if normalized in lockfile_packages:
+                    continue
                 click.echo(
                     "No package {0} to remove from Pipfile.".format(
                         crayons.green(package_name)
diff --git a/pipenv/project.py b/pipenv/project.py
index 74debc24..33b8c106 100644
--- a/pipenv/project.py
+++ b/pipenv/project.py
@@ -934,7 +934,10 @@ class Project(object):
         has_comments_as_lines = False
         for section in ("dev-packages", "packages"):
             pipfile_section = self.parsed_pipfile.get(section, {})
-            lines = [l for l in p[section].serialized().splitlines()]
+            lines = [
+                l for l in parsed[section].serialized().splitlines()
+                if section in parsed.keys()
+            ]
             pipfile_packages = [
                 pkg_name for pkg_name in pipfile_section.keys()
                 if pep423_name(pkg_name) in packages
diff --git a/pipenv/vendor/requirementslib/models/requirements.py b/pipenv/vendor/requirementslib/models/requirements.py
index 28d90799..112791ab 100644
--- a/pipenv/vendor/requirementslib/models/requirements.py
+++ b/pipenv/vendor/requirementslib/models/requirements.py
@@ -430,12 +430,12 @@ class FileRequirement(BaseRequirement):
 
     @property
     def pipfile_part(self):
-        pipfile_dict = attr.asdict(self, filter=filter_none).copy()
+        excludes = ["_base_line", "_has_hashed_name", "setup_path"]
+        filter_func = lambda k, v: bool(v) is True and k.name not in excludes
+        pipfile_dict = attr.asdict(self, filter=filter_func).copy()
         name = pipfile_dict.pop("name")
         if "_uri_scheme" in pipfile_dict:
             pipfile_dict.pop("_uri_scheme")
-        if "setup_path" in pipfile_dict:
-            pipfile_dict.pop("setup_path")
         # For local paths and remote installable artifacts (zipfiles, etc)
         collision_keys = {"file", "uri", "path"}
         if self._uri_scheme:
@@ -754,7 +754,7 @@ class VCSRequirement(FileRequirement):
 
     @property
     def pipfile_part(self):
-        excludes = ["_repo", "_base_line", "setup_path"]
+        excludes = ["_repo", "_base_line", "setup_path", "_has_hashed_name"]
         filter_func = lambda k, v: bool(v) is True and k.name not in excludes
         pipfile_dict = attr.asdict(self, filter=filter_func).copy()
         if "vcs" in pipfile_dict:
