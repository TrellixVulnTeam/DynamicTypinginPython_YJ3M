commit 6e38560a7f8026caeeaa4a3b486115ff430a24c9
Author: Dan Ryan <dan@danryan.co>
Date:   Tue Jul 24 19:35:44 2018 -0400

    Add chdir context manager and properly run setup.py files during resolution
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/news/2643.feature b/news/2643.feature
new file mode 100644
index 00000000..052398c7
--- /dev/null
+++ b/news/2643.feature
@@ -0,0 +1 @@
+Enhanced resolution of editable and VCS dependencies.
diff --git a/pipenv/patched/piptools/repositories/pypi.py b/pipenv/patched/piptools/repositories/pypi.py
index daaa5902..94879f2f 100644
--- a/pipenv/patched/piptools/repositories/pypi.py
+++ b/pipenv/patched/piptools/repositories/pypi.py
@@ -280,8 +280,10 @@ class PyPIRepository(BaseRepository):
             dist = None
             if ireq.editable:
                 try:
-                    from setuptools.build_meta import _run_setup
-                    _run_setup(ireq.setup_py)
+                    from pipenv.utils import chdir
+                    with chdir(ireq.setup_py_dir):
+                        from setuptools.dist import distutils
+                        distutils.core.run_setup(ireq.setup_py)
                 except (ImportError, InstallationError):
                     pass
                 try:
diff --git a/pipenv/utils.py b/pipenv/utils.py
index 08c08381..b45081fe 100644
--- a/pipenv/utils.py
+++ b/pipenv/utils.py
@@ -1361,3 +1361,15 @@ def is_virtual_environment(path):
             if python_like.is_file() and os.access(str(python_like), os.X_OK):
                 return True
     return False
+
+
+@contextmanager
+def chdir(path):
+    """Context manager to change working directories."""
+    from ._compat import Path
+    prev_cwd = Path.cwd()
+    os.chdir(str(path))
+    try:
+        yield
+    finally:
+        os.chdir(prev_cwd)
diff --git a/tasks/vendoring/patches/patched/piptools.patch b/tasks/vendoring/patches/patched/piptools.patch
index 8dd58066..17f2e2b5 100644
--- a/tasks/vendoring/patches/patched/piptools.patch
+++ b/tasks/vendoring/patches/patched/piptools.patch
@@ -19,7 +19,7 @@ index 4e6174c..75f9b49 100644
  # NOTE
  # We used to store the cache dir under ~/.pip-tools, which is not the
 diff --git a/pipenv/patched/piptools/repositories/pypi.py b/pipenv/patched/piptools/repositories/pypi.py
-index 1c4b943..9461709 100644
+index 1c4b943..91902dc 100644
 --- a/pipenv/patched/piptools/repositories/pypi.py
 +++ b/pipenv/patched/piptools/repositories/pypi.py
 @@ -1,9 +1,10 @@
@@ -230,7 +230,7 @@ index 1c4b943..9461709 100644
          """
          Given a pinned or an editable InstallRequirement, returns a set of
          dependencies (also InstallRequirements, but not necessarily pinned).
-@@ -155,20 +273,45 @@ class PyPIRepository(BaseRepository):
+@@ -155,20 +273,47 @@ class PyPIRepository(BaseRepository):
                      os.makedirs(download_dir)
              if not os.path.isdir(self._wheel_download_dir):
                  os.makedirs(self._wheel_download_dir)
@@ -242,8 +242,10 @@ index 1c4b943..9461709 100644
 +            dist = None
 +            if ireq.editable:
 +                try:
-+                    from setuptools.build_meta import _run_setup
-+                    _run_setup(ireq.setup_py)
++                    from pipenv.utils import chdir
++                    with chdir(ireq.setup_py_dir):
++                        from setuptools.dist import distutils
++                        distutils.core.run_setup(ireq.setup_py)
 +                except (ImportError, InstallationError):
 +                    pass
 +                try:
@@ -280,7 +282,7 @@ index 1c4b943..9461709 100644
                  )
              except TypeError:
                  # Pip >= 10 (new resolver!)
-@@ -188,17 +331,97 @@ class PyPIRepository(BaseRepository):
+@@ -188,17 +333,97 @@ class PyPIRepository(BaseRepository):
                      finder=self.finder,
                      session=self.session,
                      upgrade_strategy="to-satisfy-only",
@@ -381,7 +383,7 @@ index 1c4b943..9461709 100644
          return set(self._dependencies_cache[ireq])
  
      def get_hashes(self, ireq):
-@@ -210,6 +433,10 @@ class PyPIRepository(BaseRepository):
+@@ -210,6 +435,10 @@ class PyPIRepository(BaseRepository):
          if ireq.editable:
              return set()
  
@@ -392,7 +394,7 @@ index 1c4b943..9461709 100644
          if not is_pinned_requirement(ireq):
              raise TypeError(
                  "Expected pinned requirement, got {}".format(ireq))
-@@ -217,24 +444,22 @@ class PyPIRepository(BaseRepository):
+@@ -217,24 +446,22 @@ class PyPIRepository(BaseRepository):
          # We need to get all of the candidates that match our current version
          # pin, these will represent all of the files that could possibly
          # satisfy this constraint.
