commit 5e2ab186d7b8ef9e4295207e1e0221054e7cf858
Author: Dan Ryan <dan@danryan.co>
Date:   Wed Mar 20 20:38:15 2019 -0400

    Update resolver to fix tempdir usage
    
    - Fix piptools patch
    - Fix windows ansi/colorama implementation
    - Write output even if no newline is found during resolution
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/__init__.py b/pipenv/__init__.py
index 51aafed7..97625ddd 100644
--- a/pipenv/__init__.py
+++ b/pipenv/__init__.py
@@ -47,7 +47,10 @@ else:
 
 sys.stderr = get_wrapped_stream(stderr)
 sys.stdout = get_wrapped_stream(stdout)
-
+from .vendor.colorama import AnsiToWin32
+if os.name == "nt":
+    sys.stderr = AnsiToWin32(sys.stderr)
+    sys.stdout = AnsiToWin32(sys.stdout)
 
 from .cli import cli
 from . import resolver
diff --git a/pipenv/patched/piptools/repositories/pypi.py b/pipenv/patched/piptools/repositories/pypi.py
index dff7cb88..8dd369ac 100644
--- a/pipenv/patched/piptools/repositories/pypi.py
+++ b/pipenv/patched/piptools/repositories/pypi.py
@@ -248,9 +248,10 @@ class PyPIRepository(BaseRepository):
 
     def resolve_reqs(self, download_dir, ireq, wheel_cache):
         results = None
+        ireq.isolated = False
+        ireq._wheel_cache = wheel_cache
         try:
             from pipenv.patched.notpip._internal.operations.prepare import RequirementPreparer
-            from pipenv.patched.notpip._internal.resolve import Resolver as PipResolver
         except ImportError:
             # Pip 9 and below
             reqset = RequirementSet(
@@ -272,13 +273,13 @@ class PyPIRepository(BaseRepository):
                 'download_dir': download_dir,
                 'wheel_download_dir': self._wheel_download_dir,
                 'progress_bar': 'off',
-                'build_isolation': self.build_isolation,
+                'build_isolation': False,
             }
             resolver_kwargs = {
                 'finder': self.finder,
                 'session': self.session,
                 'upgrade_strategy': "to-satisfy-only",
-                'force_reinstall': False,
+                'force_reinstall': True,
                 'ignore_dependencies': False,
                 'ignore_requires_python': True,
                 'ignore_installed': True,
diff --git a/pipenv/resolver.py b/pipenv/resolver.py
index 693c85ad..4f91350b 100644
--- a/pipenv/resolver.py
+++ b/pipenv/resolver.py
@@ -124,9 +124,6 @@ def resolve_packages(pre, clear, verbose, system, requirements_dir, packages):
         if "PIPENV_PYPI_MIRROR" in os.environ
         else None
     )
-    # os.environ["PIP_NO_BUILD_ISOLATION"] = "1"
-    # os.environ["PIP_NO_USE_PEP517"] = "1"
-    # os.environ["PIP_NO_DEPS"] = "1"
 
     def resolve(packages, pre, project, sources, clear, system, requirements_dir=None):
         return resolve_deps(
@@ -189,6 +186,9 @@ def main():
     sys.stdout = get_wrapped_stream(stdout)
     from pipenv.vendor import colorama
     colorama.init()
+    if os.name == "nt":
+        sys.stderr = colorama.AnsiToWin32(sys.stderr)
+        sys.stdout = colorama.AnsiToWin32(sys.stdout)
     os.environ["PIP_DISABLE_PIP_VERSION_CHECK"] = str("1")
     os.environ["PYTHONIOENCODING"] = str("utf-8")
     parsed = handle_parsed_args(parsed)
diff --git a/pipenv/utils.py b/pipenv/utils.py
index 7b43c1f0..e615faca 100644
--- a/pipenv/utils.py
+++ b/pipenv/utils.py
@@ -840,18 +840,15 @@ def resolve(cmd, sp):
             result = c.expect(u"\n", timeout=environments.PIPENV_INSTALL_TIMEOUT)
         except (EOF, TIMEOUT):
             pass
-        if result is None:
-            break
         _out = c.subprocess.before
         if _out is not None:
             _out = decode_output("{0}".format(_out))
             out += _out
             sp.text = to_native_string("{0}".format(_out[:100]))
         if environments.is_verbose():
-            if _out is not None:
-                sp._hide_cursor()
-                sp.write(_out.rstrip())
-                sp._show_cursor()
+            sp.hide_and_write(_out.rstrip())
+        if result is None:
+            break
     c.block()
     if c.return_code != 0:
         sp.red.fail(environments.PIPENV_SPINNER_FAIL_TEXT.format(
diff --git a/tasks/vendoring/patches/patched/piptools.patch b/tasks/vendoring/patches/patched/piptools.patch
index 87b5247c..3d3cb99b 100644
--- a/tasks/vendoring/patches/patched/piptools.patch
+++ b/tasks/vendoring/patches/patched/piptools.patch
@@ -142,7 +142,7 @@ index 08dabe1..36bafdb 100644
          else:
              return self.repository.find_best_match(ireq, prereleases)
 diff --git a/pipenv/patched/piptools/repositories/pypi.py b/pipenv/patched/piptools/repositories/pypi.py
-index e54ae08..4ff20e0 100644
+index e54ae08..75b8208 100644
 --- a/pipenv/patched/piptools/repositories/pypi.py
 +++ b/pipenv/patched/piptools/repositories/pypi.py
 @@ -2,14 +2,22 @@
@@ -287,7 +287,7 @@ index e54ae08..4ff20e0 100644
  
          # Reuses pip's internal candidate sort key to sort
          matching_candidates = [candidates_by_version[ver] for ver in matching_versions]
-@@ -135,9 +187,65 @@ class PyPIRepository(BaseRepository):
+@@ -135,14 +187,71 @@ class PyPIRepository(BaseRepository):
  
          # Turn the candidate into a pinned InstallRequirement
          return make_install_requirement(
@@ -353,8 +353,15 @@ index e54ae08..4ff20e0 100644
 +
      def resolve_reqs(self, download_dir, ireq, wheel_cache):
          results = None
++        ireq.isolated = False
++        ireq._wheel_cache = wheel_cache
          try:
-@@ -151,9 +259,11 @@ class PyPIRepository(BaseRepository):
+             from pip._internal.operations.prepare import RequirementPreparer
+-            from pip._internal.resolve import Resolver as PipResolver
+         except ImportError:
+             # Pip 9 and below
+             reqset = RequirementSet(
+@@ -151,9 +260,11 @@ class PyPIRepository(BaseRepository):
                  download_dir=download_dir,
                  wheel_download_dir=self._wheel_download_dir,
                  session=self.session,
@@ -367,7 +374,16 @@ index e54ae08..4ff20e0 100644
          else:
              # pip >= 10
              preparer_kwargs = {
-@@ -170,8 +280,9 @@ class PyPIRepository(BaseRepository):
+@@ -162,7 +273,7 @@ class PyPIRepository(BaseRepository):
+                 'download_dir': download_dir,
+                 'wheel_download_dir': self._wheel_download_dir,
+                 'progress_bar': 'off',
+-                'build_isolation': self.build_isolation,
++                'build_isolation': False,
+             }
+             resolver_kwargs = {
+                 'finder': self.finder,
+@@ -170,8 +281,9 @@ class PyPIRepository(BaseRepository):
                  'upgrade_strategy': "to-satisfy-only",
                  'force_reinstall': False,
                  'ignore_dependencies': False,
@@ -378,7 +394,12 @@ index e54ae08..4ff20e0 100644
                  'isolated': False,
                  'wheel_cache': wheel_cache,
                  'use_user_site': False
-@@ -190,11 +301,18 @@ class PyPIRepository(BaseRepository):
+@@ -186,15 +298,22 @@ class PyPIRepository(BaseRepository):
+                 resolver_kwargs['preparer'] = preparer
+                 reqset = RequirementSet()
+                 ireq.is_direct = True
+-                reqset.add_requirement(ireq)
++                # reqset.add_requirement(ireq)
                  resolver = PipResolver(**resolver_kwargs)
                  resolver.require_hashes = False
                  results = resolver._resolve_one(reqset, ireq)
@@ -400,7 +421,7 @@ index e54ae08..4ff20e0 100644
          """
          Given a pinned or an editable InstallRequirement, returns a set of
          dependencies (also InstallRequirements, but not necessarily pinned).
-@@ -223,7 +341,8 @@ class PyPIRepository(BaseRepository):
+@@ -223,7 +342,8 @@ class PyPIRepository(BaseRepository):
              wheel_cache = WheelCache(CACHE_DIR, self.pip_options.format_control)
              prev_tracker = os.environ.get('PIP_REQ_TRACKER')
              try:
@@ -410,7 +431,7 @@ index e54ae08..4ff20e0 100644
              finally:
                  if 'PIP_REQ_TRACKER' in os.environ:
                      if prev_tracker:
-@@ -245,6 +364,10 @@ class PyPIRepository(BaseRepository):
+@@ -245,6 +365,10 @@ class PyPIRepository(BaseRepository):
          if ireq.editable:
              return set()
  
@@ -421,7 +442,7 @@ index e54ae08..4ff20e0 100644
          if not is_pinned_requirement(ireq):
              raise TypeError(
                  "Expected pinned requirement, got {}".format(ireq))
-@@ -252,24 +375,16 @@ class PyPIRepository(BaseRepository):
+@@ -252,24 +376,16 @@ class PyPIRepository(BaseRepository):
          # We need to get all of the candidates that match our current version
          # pin, these will represent all of the files that could possibly
          # satisfy this constraint.
