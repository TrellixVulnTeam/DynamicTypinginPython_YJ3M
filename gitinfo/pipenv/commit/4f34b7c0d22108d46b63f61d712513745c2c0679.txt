commit 4f34b7c0d22108d46b63f61d712513745c2c0679
Author: Dan Ryan <dan.ryan@xyleminc.com>
Date:   Fri Mar 22 20:27:52 2019 -0400

    Update vistir to fix permissionerrors
    
    Signed-off-by: Dan Ryan <dan.ryan@xyleminc.com>

diff --git a/pipenv/vendor/vistir/compat.py b/pipenv/vendor/vistir/compat.py
index d3f42e46..ecc6bc26 100644
--- a/pipenv/vendor/vistir/compat.py
+++ b/pipenv/vendor/vistir/compat.py
@@ -169,30 +169,7 @@ class TemporaryDirectory(object):
     def _rmtree(cls, name):
         from .path import rmtree
 
-        def onerror(func, path, exc_info):
-            if issubclass(exc_info[0], (PermissionError, OSError)):
-                try:
-                    try:
-                        if path != name:
-                            os.chflags(os.path.dirname(path), 0)
-                        os.chflags(path, 0)
-                    except AttributeError:
-                        pass
-                    if path != name:
-                        os.chmod(os.path.dirname(path), 0o70)
-                    os.chmod(path, 0o700)
-
-                    try:
-                        os.unlink(path)
-                    # PermissionError is raised on FreeBSD for directories
-                    except (IsADirectoryError, PermissionError, OSError):
-                        rmtree(path)
-                except FileNotFoundError:
-                    pass
-            elif issubclass(exc_info[0], FileNotFoundError):
-                pass
-
-        rmtree(name, onerror=onerror)
+        rmtree(name)
 
     @classmethod
     def _cleanup(cls, name, warn_message):
diff --git a/pipenv/vendor/vistir/path.py b/pipenv/vendor/vistir/path.py
index 9eb11379..429c826e 100644
--- a/pipenv/vendor/vistir/path.py
+++ b/pipenv/vendor/vistir/path.py
@@ -20,6 +20,7 @@ from .compat import (
     ResourceWarning,
     TemporaryDirectory,
     FileNotFoundError,
+    PermissionError,
     _fs_encoding,
     _NamedTemporaryFile,
     finalize,
@@ -307,10 +308,11 @@ def set_write_bit(fn):
     file_stat = os.stat(fn).st_mode
     os.chmod(fn, file_stat | stat.S_IRWXU | stat.S_IRWXG | stat.S_IRWXO)
     if not os.path.isdir(fn):
-        try:
-            os.chflags(fn, 0)
-        except AttributeError:
-            pass
+        for path in [fn, os.path.dirname(fn)]:
+            try:
+                os.chflags(path, 0)
+            except AttributeError:
+                pass
     for root, dirs, files in os.walk(fn, topdown=False):
         for dir_ in [os.path.join(root, d) for d in dirs]:
             set_write_bit(dir_)
@@ -338,7 +340,7 @@ def rmtree(directory, ignore_errors=False, onerror=None):
         onerror = handle_remove_readonly
     try:
         shutil.rmtree(directory, ignore_errors=ignore_errors, onerror=onerror)
-    except (IOError, OSError, FileNotFoundError) as exc:
+    except (IOError, OSError, FileNotFoundError, PermissionError) as exc:
         # Ignore removal failures where the file doesn't exist
         if exc.errno != errno.ENOENT:
             raise
