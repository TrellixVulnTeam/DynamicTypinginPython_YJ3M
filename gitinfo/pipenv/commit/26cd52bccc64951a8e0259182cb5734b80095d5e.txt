commit 26cd52bccc64951a8e0259182cb5734b80095d5e
Author: Dan Ryan <dan@danryan.co>
Date:   Sat Oct 14 03:07:20 2017 -0400

    Fix tests for windows venv nested shells

diff --git a/tests/test_pipenv.py b/tests/test_pipenv.py
index 943b648d..e56b89ac 100644
--- a/tests/test_pipenv.py
+++ b/tests/test_pipenv.py
@@ -464,9 +464,11 @@ requests = {version = "*"}
         with temp_environ():
             os.environ['PIPENV_VENV_IN_PROJECT'] = '1'
             os.environ['PIPENV_IGNORE_VIRTUALENVS'] = '1'
-            with PipenvInstance() as p:
+            os.environ['PIPENV_SHELL_COMPAT'] = '1'
+            with PipenvInstance(chdir=True) as p:
                 # Signal to pew to look in the project directory for the environment
                 os.environ['WORKON_HOME'] = p.path
+                project = Project()
                 c = p.pipenv('install requests')
                 assert c.return_code == 0
                 assert 'requests' in p.pipfile['packages']
@@ -477,23 +479,25 @@ requests = {version = "*"}
                 # Check for the venv directory 
                 c = delegator.run('pew dir .venv')
                 # Compare pew's virtualenv path to what we expect
-                venv_path = get_windows_path(p.path, '.venv')
+                venv_path = get_windows_path(project.project_directory, '.venv')
                 # os.path.normpath will normalize slashes
-                assert os.path.normpath(venv_path) == os.path.normpath(c.out.strip())
+                assert venv_path == os.path.normpath(c.out.strip())
                 # Have pew run 'pip freeze' in the virtualenv
                 # This is functionally the same as spawning a subshell
                 # If we can do this we can theoretically amke a subshell
-                args = ['pew', 'in', '.venv', 'pip', 'freeze']
-                process = subprocess.Popen(
-                    args,
-                    shell=True, 
-                    universal_newlines=True, 
-                    stdin=subprocess.PIPE,
-                    stdout=subprocess.PIPE,
-                    stderr=subprocess.PIPE
-                )
-                out, _ = process.communicate()
-                assert any(req.startswith('requests') for req in out.splitlines()) is True
+                # This test doesn't work on *nix
+                if os.name == 'nt':
+                    args = ['pew', 'in', '.venv', 'pip', 'freeze']
+                    process = subprocess.Popen(
+                        args,
+                        shell=True,
+                        universal_newlines=True,
+                        stdin=subprocess.PIPE,
+                        stdout=subprocess.PIPE,
+                        stderr=subprocess.PIPE
+                    )
+                    out, _ = process.communicate()
+                    assert any(req.startswith('requests') for req in out.splitlines()) is True
 
 
     @pytest.mark.run
