commit 9e0d6bc1e39264cb83292aacbe2584c376863e34
Author: Dan Ryan <dan@danryan.co>
Date:   Sat Nov 24 20:53:37 2018 -0500

    Update release scripts, fix packaging scripts
    
    - Fix `PIPENV_PYTHON` envvar which auto-recreated environments due to
      `auto_envvar_prefix`, now it is not pulled from the environment
      automatically
    - Fix formatting of some news entries
    - Automate release via `inv release.release` (will be aliased)
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/.azure-pipelines/jobs/run-vendor-scripts.yml b/.azure-pipelines/jobs/run-vendor-scripts.yml
index 7fe75731..330f014e 100644
--- a/.azure-pipelines/jobs/run-vendor-scripts.yml
+++ b/.azure-pipelines/jobs/run-vendor-scripts.yml
@@ -33,7 +33,7 @@ jobs:
       pip install certifi
       export GIT_SSL_CAINFO=$(python -m certifi)
       export LANG=C.UTF-8
-      python -m pip install --upgrade invoke requests parver
+      python -m pip install --upgrade invoke requests parver bs4 vistir
       python -m invoke vendoring.update
 
   - template: ./run-manifest-check.yml
diff --git a/news/3280.vendor.rst b/news/3280.vendor.rst
index 70b58c57..00157b70 100644
--- a/news/3280.vendor.rst
+++ b/news/3280.vendor.rst
@@ -1,4 +1,4 @@
 Update vendored dependencies to resolve resolution output parsing and python finding:
-  - `pythonfinder 1.1.9 -> 1.1.10`
-  - `requirementslib 1.3.1 -> 1.3.3`
-  - `vistir 0.2.3 -> 0.2.5`
+- `pythonfinder 1.1.9 -> 1.1.10`
+- `requirementslib 1.3.1 -> 1.3.3`
+- `vistir 0.2.3 -> 0.2.5`
diff --git a/pipenv/cli/options.py b/pipenv/cli/options.py
index 4e9121fb..caa67e38 100644
--- a/pipenv/cli/options.py
+++ b/pipenv/cli/options.py
@@ -212,7 +212,7 @@ def python_option(f):
         return value
     return option("--python", default=False, nargs=1, callback=callback,
                   help="Specify which version of Python virtualenv should use.",
-                  expose_value=False)(f)
+                  expose_value=False, allow_from_autoenv=False)(f)
 
 
 def pypi_mirror_option(f):
diff --git a/tasks/release.py b/tasks/release.py
index 03546069..030f1832 100644
--- a/tasks/release.py
+++ b/tasks/release.py
@@ -1,16 +1,23 @@
 # -*- coding=utf-8 -*-
 import datetime
-import invoke
+import pathlib
+import os
+import re
 import sys
-from pipenv.__version__ import __version__
+
+import invoke
+
 from parver import Version
-from .vendoring import _get_git_root, drop_dir
-import pathlib
 from towncrier._builder import (
-    find_fragments, render_fragments, split_fragments,
+    find_fragments, render_fragments, split_fragments
 )
 from towncrier._settings import load_config
 
+from pipenv.__version__ import __version__
+from pipenv.vendor.vistir.contextmanagers import temp_environ
+
+from .vendoring import _get_git_root, drop_dir
+
 
 VERSION_FILE = 'pipenv/__version__.py'
 ROOT = pathlib.Path(".").parent.parent.absolute()
@@ -27,8 +34,7 @@ def get_version_file(ctx):
 
 def find_version(ctx):
     version_file = get_version_file(ctx).read_text()
-    version_match = re.search(r"^__version__ = ['\"]([^'\"]*)['\"]",
-                              version_file, re.M)
+    version_match = re.search(r"^__version__ = ['\"]([^'\"]*)['\"]",version_file, re.M)
     if version_match:
         return version_match.group(1)
     raise RuntimeError("Unable to find version string.")
@@ -71,11 +77,11 @@ def _render_log():
 @invoke.task
 def release(ctx, dry_run=False):
     drop_dist_dirs(ctx)
-    bump_version(ctx)
+    bump_version(ctx, dry_run=dry_run)
     version = find_version(ctx)
     tag_content = _render_log()
     if dry_run:
-        ctx.run('towncrier --draft')
+        ctx.run('towncrier --draft > CHANGELOG.draft.rst')
         log('would remove: news/*')
         log('would remove: CHANGELOG.draft.rst')
         log(f'Would commit with message: "Release v{version}"')
@@ -87,8 +93,8 @@ def release(ctx, dry_run=False):
 
     tag_content = tag_content.replace('"', '\\"')
     if dry_run:
-        log("Generated tag content: f{tag_content}")
-        markdown = ctx.run("towncrier --draft | pandoc -f rst -t markdown -o CHANGELOG.md", hide=True).stdout.strip()
+        log(f"Generated tag content: {tag_content}")
+        markdown = ctx.run("pandoc CHANGELOG.draft.rst -f rst -t markdown", hide=True).stdout.strip()
         content = clean_mdchangelog(ctx, markdown)
         log(f"would generate markdown: {content}")
     else:
@@ -116,16 +122,19 @@ def drop_dist_dirs(ctx):
 @invoke.task
 def build_dists(ctx):
     drop_dist_dirs(ctx)
-    log('Building sdist using %s ....' % sys.executable)
     for py_version in ['3.6', '2.7']:
         env = {'PIPENV_PYTHON': py_version}
-        ctx.run('pipenv install --dev', env=env)
-        ctx.run('pipenv run pip install -e . --upgrade --upgrade-strategy=eager', env=env)
-        if py_version == '3.6':
-            ctx.run('pipenv run python setup.py sdist bdist_wheel', env=env)
-        else:
-            ctx.run('pipenv run python setup.py bdist_wheel', env=env)
-        log('Building wheel using python %s ....' % py_version)
+        with ctx.cd(ROOT.as_posix()), temp_environ():
+            executable = ctx.run("python -c 'import sys; print(sys.executable)'", hide=True).stdout.strip()
+            log('Building sdist using %s ....' % executable)
+            os.environ["PIPENV_PYTHON"] = py_version
+            ctx.run('pipenv install --dev', env=env)
+            ctx.run('pipenv run pip install -e . --upgrade --upgrade-strategy=eager', env=env)
+            log('Building wheel using python %s ....' % py_version)
+            if py_version == '3.6':
+                ctx.run('pipenv run python setup.py sdist bdist_wheel', env=env)
+            else:
+                ctx.run('pipenv run python setup.py bdist_wheel', env=env)
 
 
 @invoke.task(build_dists)
@@ -197,8 +206,8 @@ def bump_version(ctx, dry_run=False, dev=False, pre=False, tag=None, commit=Fals
     current_version = Version.parse(__version__)
     today = datetime.date.today()
     tomorrow = today + datetime.timedelta(days=1)
-    next_month = today + datetime.timedelta(months=1)
-    next_year = today + datetime.timedelta(years=1)
+    next_month = datetime.date.today().replace(month=today.month+1, day=1)
+    next_year =  datetime.date.today().replace(year=today.year+1, month=1, day=1)
     if pre and not tag:
         print('Using "pre" requires a corresponding tag.')
         return
@@ -219,8 +228,10 @@ def bump_version(ctx, dry_run=False, dev=False, pre=False, tag=None, commit=Fals
         log('Would update to: %s' % new_version.normalize())
     else:
         log('Updating to: %s' % new_version.normalize())
+        version_file = get_version_file(ctx)
+        file_contents = version_file.read_text()
         version_file.write_text(file_contents.replace(version, str(new_version.normalize())))
         if commit:
-            ctx.run('git add {0}'.format(version_file))
+            ctx.run('git add {0}'.format(version_file.as_posix()))
             log('Committing...')
             ctx.run('git commit -s -m "Bumped version."')
