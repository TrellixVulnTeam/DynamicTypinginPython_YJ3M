commit b6ca4cadfe55f7c92281b5f46a4d0566a40c5e96
Author: Kenneth Reitz <me@kennethreitz.org>
Date:   Thu Sep 28 15:57:36 2017 -0400

    make magic happpen
    
    Signed-off-by: Kenneth Reitz <me@kennethreitz.org>

diff --git a/pipenv/patched/pip/download.py b/pipenv/patched/pip/download.py
index 54d3131d..9ecb3f79 100644
--- a/pipenv/patched/pip/download.py
+++ b/pipenv/patched/pip/download.py
@@ -739,7 +739,7 @@ def _copy_dist_from_dir(link_path, location):
 
     # build an sdist
     setup_py = 'setup.py'
-    sdist_args = [sys.executable]
+    sdist_args = [os.environ['PIP_PYTHON_PATH']]
     sdist_args.append('-c')
     sdist_args.append(SETUPTOOLS_SHIM % setup_py)
     sdist_args.append('sdist')
diff --git a/pipenv/patched/pip/req/req_install.py b/pipenv/patched/pip/req/req_install.py
index 89ad6787..9b5117a9 100644
--- a/pipenv/patched/pip/req/req_install.py
+++ b/pipenv/patched/pip/req/req_install.py
@@ -53,15 +53,6 @@ logger = logging.getLogger(__name__)
 
 operators = specifiers.Specifier._operators.keys()
 
-
-PIP_PYTHON_PATH = os.environ.get('PIP_PYTHON_PATH')
-
-def update_python_path():
-    global PIP_PYTHON_PATH
-    PIP_PYTHON_PATH = os.environ.get('PIP_PYTHON_PATH')
-    sys.executable = PIP_PYTHON_PATH
-
-
 def _strip_extras(path):
     m = re.match(r'^(.+)(\[[^\]]+\])$', path)
     extras = None
@@ -427,8 +418,7 @@ class InstallRequirement(object):
 
         with indent_log():
             script = SETUPTOOLS_SHIM % self.setup_py
-            update_python_path()
-            base_cmd = [PIP_PYTHON_PATH or sys.executable, '-c', script]
+            base_cmd = [os.environ['PIP_PYTHON_PATH'], '-c', script]
             if self.isolated:
                 base_cmd += ["--no-user-cfg"]
             egg_info_cmd = base_cmd + ['egg_info']
@@ -950,8 +940,7 @@ class InstallRequirement(object):
         return self.source_dir
 
     def get_install_args(self, global_options, record_filename, root, prefix):
-        update_python_path()
-        install_args = [PIP_PYTHON_PATH or sys.executable, "-u"]
+        install_args = [os.environ['PIP_PYTHON_PATH'], "-u"]
         install_args.append('-c')
         install_args.append(SETUPTOOLS_SHIM % self.setup_py)
         install_args += list(global_options) + \
@@ -1003,10 +992,9 @@ class InstallRequirement(object):
 
         with indent_log():
             # FIXME: should we do --install-headers here too?
-            update_python_path()
             call_subprocess(
                 [
-                    PIP_PYTHON_PATH or sys.executable,
+                    os.environ['PIP_PYTHON_PATH'],
                     '-c',
                     SETUPTOOLS_SHIM % self.setup_py
                 ] +
diff --git a/pipenv/patched/pip/utils/__init__.py b/pipenv/patched/pip/utils/__init__.py
index 815bd338..44e1f856 100644
--- a/pipenv/patched/pip/utils/__init__.py
+++ b/pipenv/patched/pip/utils/__init__.py
@@ -89,7 +89,7 @@ def ensure_dir(path):
 def get_prog():
     try:
         if os.path.basename(sys.argv[0]) in ('__main__.py', '-c'):
-            return "%s -m pip" % sys.executable
+            return "%s -m pip" % os.environ['PIP_PYTHON_PATH']
     except (AttributeError, TypeError, IndexError):
         pass
     return 'pip'
diff --git a/pipenv/patched/pip/utils/packaging.py b/pipenv/patched/pip/utils/packaging.py
index 2190429e..5cddff81 100644
--- a/pipenv/patched/pip/utils/packaging.py
+++ b/pipenv/patched/pip/utils/packaging.py
@@ -14,10 +14,6 @@ from pip import exceptions
 
 logger = logging.getLogger(__name__)
 
-
-if 'PIP_PYTHON_VERSION' not in os.environ:
-    os.environ['PIP_PYTHON_VERSION'] = '.'.join(map(str, sys.version_info[:3]))
-
 def check_requires_python(requires_python):
     """
     Check if the python version in use match the `requires_python` specifier.
@@ -32,9 +28,8 @@ def check_requires_python(requires_python):
         # The package provides no information
         return True
     requires_python_specifier = specifiers.SpecifierSet(requires_python)
-
     # We only use major.minor.micro
-    python_version = version.parse('.'.join(map(str, os.environ.get('PIP_PYTHON_VERSION', '').split('.') or sys.version_info[:3])))
+    python_version = version.parse(os.environ['PIP_PYTHON_VERSION'])
     return python_version in requires_python_specifier
 
 
@@ -58,7 +53,8 @@ def check_dist_requires_python(dist):
                 "%s requires Python '%s' but the running Python is %s" % (
                     dist.project_name,
                     requires_python,
-                    '.'.join(map(str, os.environ.get('PIP_PYTHON_VERSION', '').split('.') or sys.version_info[:3])),)
+                    os.environ['PIP_PYTHON_VERSION']
+                )
             )
     except specifiers.InvalidSpecifier as e:
         logger.warning(
diff --git a/pipenv/patched/pip/wheel.py b/pipenv/patched/pip/wheel.py
index 3bc0ea61..72c34877 100644
--- a/pipenv/patched/pip/wheel.py
+++ b/pipenv/patched/pip/wheel.py
@@ -44,7 +44,6 @@ from pip._vendor.six.moves import configparser
 
 wheel_ext = '.whl'
 
-PIP_PYTHON_PATH = os.environ.get('PIP_PYTHON_PATH')
 VERSION_COMPATIBLE = (1, 0)
 
 
@@ -182,7 +181,7 @@ def fix_script(path):
             firstline = script.readline()
             if not firstline.startswith(b'#!python'):
                 return False
-            exename = (PIP_PYTHON_PATH or sys.executable).encode(sys.getfilesystemencoding())
+            exename = os.environ['PIP_PYTHON_PATH'].encode(sys.getfilesystemencoding())
             firstline = b'#!' + exename + os.linesep.encode("ascii")
             rest = script.read()
         with open(path, 'wb') as script:
diff --git a/pipenv/patched/piptools/repositories/pypi.py b/pipenv/patched/piptools/repositories/pypi.py
index 598fc972..f6b58cc8 100755
--- a/pipenv/patched/piptools/repositories/pypi.py
+++ b/pipenv/patched/piptools/repositories/pypi.py
@@ -138,7 +138,7 @@ class PyPIRepository(BaseRepository):
 
         # Turn the candidate into a pinned InstallRequirement
         return make_install_requirement(
-            best_candidate.project, best_candidate.version, ireq.extras, constraint=ireq.constraint
+            best_candidate.project, best_candidate.version, ireq.extras, ireq.markers, constraint=ireq.constraint
         )
 
     def get_dependencies(self, ireq):
diff --git a/pipenv/patched/piptools/resolver.py b/pipenv/patched/piptools/resolver.py
index 2906265c..ad60d194 100755
--- a/pipenv/patched/piptools/resolver.py
+++ b/pipenv/patched/piptools/resolver.py
@@ -247,6 +247,7 @@ class Resolver(object):
             # NOTE: it's much quicker to immediately return instead of
             # hitting the index server
             best_match = ireq
+
         elif is_pinned_requirement(ireq):
             # NOTE: it's much quicker to immediately return instead of
             # hitting the index server
@@ -272,6 +273,10 @@ class Resolver(object):
             for dependency in self.repository.get_dependencies(ireq):
                 yield dependency
             return
+        elif ireq.markers:
+            for dependency in self.repository.get_dependencies(ireq):
+                yield dependency
+            return
         elif not is_pinned_requirement(ireq):
             raise TypeError('Expected pinned or editable requirement, got {}'.format(ireq))
 
diff --git a/pipenv/patched/piptools/utils.py b/pipenv/patched/piptools/utils.py
index 35317f0d..cf13db0a 100755
--- a/pipenv/patched/piptools/utils.py
+++ b/pipenv/patched/piptools/utils.py
@@ -59,16 +59,21 @@ def comment(text):
     return style(text, fg='green')
 
 
-def make_install_requirement(name, version, extras, constraint=False):
+def make_install_requirement(name, version, extras, markers, constraint=False):
     # If no extras are specified, the extras string is blank
     extras_string = ""
     if extras:
         # Sort extras for stability
         extras_string = "[{}]".format(",".join(sorted(extras)))
 
-    return InstallRequirement.from_line(
-        str('{}{}=={}'.format(name, extras_string, version)),
-        constraint=constraint)
+    if not markers:
+        return InstallRequirement.from_line(
+            str('{}{}=={}'.format(name, extras_string, version)),
+            constraint=constraint)
+    else:
+        return InstallRequirement.from_line(
+            str('{}{}=={}; {}'.format(name, extras_string, version, str(markers))),
+            constraint=constraint)
 
 
 def format_requirement(ireq, marker=None):
diff --git a/pipenv/utils.py b/pipenv/utils.py
index 16211819..b0dc8f01 100644
--- a/pipenv/utils.py
+++ b/pipenv/utils.py
@@ -441,7 +441,12 @@ def resolve_deps(deps, which, which_pip, project, sources=None, verbose=False, p
             name = pep423_name(result.name)
             version = clean_pkg_version(result.specifier)
             index = index_lookup.get(result.name)
-            markers = markers_lookup.get(result.name)
+
+            if not markers_lookup.get(result.name):
+                markers = str(result.markers) if result.markers else None
+            else:
+                markers = '{0} and {1}'.format(markers_lookup.get(result.name), str(result.markers))
+
 
             collected_hashes = []
             if 'python.org' in '|'.join([source['url'] for source in sources]):
