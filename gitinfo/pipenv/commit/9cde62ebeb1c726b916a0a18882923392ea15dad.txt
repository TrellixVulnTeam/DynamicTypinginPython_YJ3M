commit 9cde62ebeb1c726b916a0a18882923392ea15dad
Author: Dan Ryan <dan@danryan.co>
Date:   Sun May 20 01:00:57 2018 -0400

    Fix patched libraries to use proper pip references
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/patched/notpip/_internal/download.py b/pipenv/patched/notpip/_internal/download.py
index e9223a6a..f00e3984 100644
--- a/pipenv/patched/notpip/_internal/download.py
+++ b/pipenv/patched/notpip/_internal/download.py
@@ -71,7 +71,7 @@ def user_agent():
     Return a string representing the user agent.
     """
     data = {
-        "installer": {"name": "pip", "version": pip.__version__},
+        "installer": {"name": "pip", "version": pipenv.patched.notpip.__version__},
         "python": platform.python_version(),
         "implementation": {
             "name": platform.python_implementation(),
diff --git a/pipenv/patched/notpip/_internal/pep425tags.py b/pipenv/patched/notpip/_internal/pep425tags.py
index c2290ab9..bea31585 100644
--- a/pipenv/patched/notpip/_internal/pep425tags.py
+++ b/pipenv/patched/notpip/_internal/pep425tags.py
@@ -10,7 +10,10 @@ import sysconfig
 import warnings
 from collections import OrderedDict
 
-import pipenv.patched.notpip._internal.utils.glibc
+try:
+    import pip._internal.utils.glibc
+except ImportError:
+    import pip.utils.glibc
 
 logger = logging.getLogger(__name__)
 
diff --git a/pipenv/patched/notpip/_vendor/packaging/specifiers.py b/pipenv/patched/notpip/_vendor/packaging/specifiers.py
index 2281ad8e..9b6353f0 100644
--- a/pipenv/patched/notpip/_vendor/packaging/specifiers.py
+++ b/pipenv/patched/notpip/_vendor/packaging/specifiers.py
@@ -586,7 +586,7 @@ def _pad_version(left, right):
     )
 
 
-class SpecifierSet(BaseSpecifier, set):
+class SpecifierSet(BaseSpecifier):
 
     def __init__(self, specifiers="", prereleases=None):
         # Split on , to break each indidivual specifier into it's own item, and
@@ -673,36 +673,6 @@ class SpecifierSet(BaseSpecifier, set):
     def __iter__(self):
         return iter(self._specs)
 
-    def __iadd__(self, other):
-        if isinstance(other, string_types):
-            other = SpecifierSet(other)
-        elif not isinstance(other, SpecifierSet):
-            return NotImplemented
-
-        if self._prereleases is not None and other._prereleases is not None and self._prereleases != other._prereleases:
-            raise ValueError(
-                "Cannot combine SpecifierSets with True and False prerelease "
-                "overrides."
-            )
-        specs = set(self._specs)
-        specs.intersection_update(other._specs)
-        self._specs = frozenset(specs)
-
-    def intersection_update(self, other):
-        if isinstance(other, string_types):
-            other = SpecifierSet(other)
-        elif not isinstance(other, SpecifierSet):
-            return NotImplemented
-
-        if self._prereleases is not None and other._prereleases is not None and self._prereleases != other._prereleases:
-            raise ValueError(
-                "Cannot combine SpecifierSets with True and False prerelease "
-                "overrides."
-            )
-        specs = set(self._specs)
-        specs.intersection_update(other._specs)
-        self._specs = frozenset(specs)
-
     @property
     def prereleases(self):
         # If we have been given an explicit prerelease modifier, then we'll
diff --git a/pipenv/patched/piptools/_compat/pip_compat.py b/pipenv/patched/piptools/_compat/pip_compat.py
index e0ab660e..4e4e1b2d 100644
--- a/pipenv/patched/piptools/_compat/pip_compat.py
+++ b/pipenv/patched/piptools/_compat/pip_compat.py
@@ -8,7 +8,8 @@ def do_import(module_path, subimport=None, old_path=None, vendored_name=None):
     pip9 = 'pip.{0}'.format(old_path)
     _tmp = None
     if vendored_name:
-        vendor = '{0}.{1}'.format(vendored_name, old_path)
+        vendor = '{0}._internal'.format(vendored_name)
+        vendor = '{0}.{1}'.format(vendor, old_path if old_path else module_path)
         try:
             _tmp = importlib.import_module(vendor)
         except ImportError:
diff --git a/pipenv/patched/piptools/resolver.py b/pipenv/patched/piptools/resolver.py
index 79343cbb..9a1c3810 100644
--- a/pipenv/patched/piptools/resolver.py
+++ b/pipenv/patched/piptools/resolver.py
@@ -153,7 +153,11 @@ class Resolver(object):
             combined_ireq = copy.deepcopy(next(ireqs))
             for ireq in ireqs:
                 # NOTE we may be losing some info on dropped reqs here
-                combined_ireq.req.specifier &= ireq.req.specifier
+                try:
+                    combined_ireq.req.specifier &= ireq.req.specifier
+                except TypeError:
+                    if ireq.req.specifier._specs and not combined_ireq.req.specifier._specs:
+                        combined_ireq.req.specifier._specs = ireq.req.specifier._specs
                 combined_ireq.constraint &= ireq.constraint
                 combined_ireq.markers = ireq.markers
                 # Return a sorted, de-duped tuple of extras
diff --git a/pipenv/utils.py b/pipenv/utils.py
index 1754573b..e7619fa4 100644
--- a/pipenv/utils.py
+++ b/pipenv/utils.py
@@ -307,24 +307,28 @@ def prepare_pip_source_args(sources, pip_args=None):
 
 
 def actually_resolve_reps(
-    deps, index_lookup, markers_lookup, project, sources, verbose, clear, pre
+    deps, index_lookup, markers_lookup, project, sources, verbose, clear, pre, req_dir=None
 ):
-    from notpip._internal import basecommand, req
-    from notpip._vendor import requests as pip_requests
-    from notpip._internal.exceptions import DistributionNotFound
-    from notpip._vendor.requests.exceptions import HTTPError
+    from .patched.notpip._internal import basecommand, req
+    from .patched.notpip._vendor import requests as pip_requests
+    from .patched.notpip._internal.exceptions import DistributionNotFound
+    from .patched.notpip._vendor.requests.exceptions import HTTPError
     from pipenv.patched.piptools.resolver import Resolver
     from pipenv.patched.piptools.repositories.pypi import PyPIRepository
     from pipenv.patched.piptools.scripts.compile import get_pip_command
     from pipenv.patched.piptools import logging as piptools_logging
     from pipenv.patched.piptools.exceptions import NoCandidateFound
+    from ._compat import TemporaryDirectory
 
     class PipCommand(basecommand.Command):
         """Needed for pip-tools."""
         name = 'PipCommand'
 
     constraints = []
-    req_dir = tempfile.mkdtemp(prefix='pipenv-', suffix='-requirements')
+    cleanup_req_dir = False
+    if not req_dir:
+        req_dir = TemporaryDirectory(suffix='-requirements', prefix='pipenv-')
+        cleanup_req_dir = True
     for dep in deps:
         if dep:
             if dep.startswith('-e '):
@@ -333,7 +337,7 @@ def actually_resolve_reps(
                 )
             else:
                 fd, t = tempfile.mkstemp(
-                    prefix='pipenv-', suffix='-requirement.txt', dir=req_dir
+                    prefix='pipenv-', suffix='-requirement.txt', dir=req_dir.name
                 )
                 with os.fdopen(fd, 'w') as f:
                     f.write(dep)
@@ -356,7 +360,6 @@ def actually_resolve_reps(
                     '"', "'"
                 )
             constraints.append(constraint)
-    rmtree(req_dir)
     pip_command = get_pip_command()
     pip_args = []
     if sources:
@@ -372,6 +375,7 @@ def actually_resolve_reps(
         logging.log.verbose = True
         piptools_logging.log.verbose = True
     resolved_tree = set()
+
     resolver = Resolver(
         constraints=constraints,
         repository=pypi,
@@ -403,7 +407,10 @@ def actually_resolve_reps(
                     'Please check your version specifier and version number. See PEP440 for more information.'
                 )
             )
+        req_dir.cleanup()
         raise RuntimeError
+    if cleanup_req_dir:
+        req_dir.cleanup()
 
     return resolved_tree, resolver
 
@@ -411,10 +418,11 @@ def actually_resolve_reps(
 def venv_resolve_deps(
     deps, which, project, pre=False, verbose=False, clear=False, allow_global=False
 ):
-    import delegator
+    from .vendor import delegator
     from . import resolver
     import json
-
+    if not deps:
+        return []
     resolver = escape_grouped_arguments(resolver.__file__.rstrip('co'))
     cmd = '{0} {1} {2} {3} {4} {5}'.format(
         escape_grouped_arguments(which('python', allow_global=allow_global)),
@@ -424,9 +432,9 @@ def venv_resolve_deps(
         '--clear' if clear else '',
         '--system' if allow_global else '',
     )
-    os.environ['PIPENV_PACKAGES'] = '\n'.join(deps)
-    c = delegator.run(cmd, block=True)
-    del os.environ['PIPENV_PACKAGES']
+    with temp_environ():
+        os.environ['PIPENV_PACKAGES'] = '\n'.join(deps)
+        c = delegator.run(cmd, block=True)
     try:
         assert c.return_code == 0
     except AssertionError:
@@ -459,14 +467,17 @@ def resolve_deps(
     """Given a list of dependencies, return a resolved list of dependencies,
     using pip-tools -- and their hashes, using the warehouse API / pip.
     """
-    from notpip._vendor.requests.exceptions import ConnectionError
-
+    from .patched.notpip._vendor.requests.exceptions import ConnectionError
+    from ._compat import TemporaryDirectory
     index_lookup = {}
     markers_lookup = {}
     python_path = which('python', allow_global=allow_global)
     backup_python_path = sys.executable
     results = []
+    if not deps:
+        return results
     # First (proper) attempt:
+    req_dir = TemporaryDirectory(prefix='pipenv-', suffix='-requirements')
     with HackedPythonVersion(python_version=python, python_path=python_path):
         try:
             resolved_tree, resolver = actually_resolve_reps(
@@ -478,6 +489,7 @@ def resolve_deps(
                 verbose,
                 clear,
                 pre,
+                req_dir=req_dir,
             )
         except RuntimeError:
             # Don't exit here, like usual.
@@ -500,8 +512,10 @@ def resolve_deps(
                     verbose,
                     clear,
                     pre,
+                    req_dir=req_dir,
                 )
             except RuntimeError:
+                req_dir.cleanup()
                 sys.exit(1)
     for result in resolved_tree:
         if not result.editable:
@@ -519,18 +533,16 @@ def resolve_deps(
             collected_hashes = []
             if any('python.org' in source['url'] or 'pypi.org' in source['url']
                    for source in sources):
+                pkg_url = 'https://pypi.org/pypi/{0}/json'.format(name)
+                session = _get_requests_session()
                 try:
                     # Grab the hashes from the new warehouse API.
-                    r = _get_requests_session().get(
-                        'https://pypi.org/pypi/{0}/json'.format(name),
-                        timeout=10,
-                    )
+                    r = session.get(pkg_url, timeout=10)
                     api_releases = r.json()['releases']
                     cleaned_releases = {}
                     for api_version, api_info in api_releases.items():
-                        cleaned_releases[
-                            clean_pkg_version(api_version)
-                        ] = api_info
+                        api_version = clean_pkg_version(api_version)
+                        cleaned_releases[api_version] = api_info
                     for release in cleaned_releases[version]:
                         collected_hashes.append(release['digests']['sha256'])
                     collected_hashes = [
@@ -558,6 +570,7 @@ def resolve_deps(
             if markers:
                 d.update({'markers': markers.replace('"', "'")})
             results.append(d)
+    req_dir.cleanup()
     return results
 
 
diff --git a/tasks/vendoring/patches/patched/pip10.patch b/tasks/vendoring/patches/patched/pip10.patch
index 77f9e52a..89e3edd1 100644
--- a/tasks/vendoring/patches/patched/pip10.patch
+++ b/tasks/vendoring/patches/patched/pip10.patch
@@ -1,5 +1,5 @@
 diff --git a/pipenv/patched/pip/_internal/download.py b/pipenv/patched/pip/_internal/download.py
-index e0e2d24c..d6d07e77 100644
+index 06d72019..c3501bbf 100644
 --- a/pipenv/patched/pip/_internal/download.py
 +++ b/pipenv/patched/pip/_internal/download.py
 @@ -19,6 +19,7 @@ from pip._vendor.lockfile import LockError
@@ -10,6 +10,15 @@ index e0e2d24c..d6d07e77 100644
  from pip._vendor.requests.structures import CaseInsensitiveDict
  from pip._vendor.requests.utils import get_netrc_auth
  # NOTE: XMLRPC Client is not annotated in typeshed as on 2017-07-17, which is
+@@ -70,7 +71,7 @@ def user_agent():
+     Return a string representing the user agent.
+     """
+     data = {
+-        "installer": {"name": "pip", "version": pip.__version__},
++        "installer": {"name": "pip", "version": pipenv.patched.notpip.__version__},
+         "python": platform.python_version(),
+         "implementation": {
+             "name": platform.python_implementation(),
 @@ -323,7 +324,7 @@ class InsecureHTTPAdapter(HTTPAdapter):
          conn.ca_certs = None
  
@@ -19,9 +28,7 @@ index e0e2d24c..d6d07e77 100644
  
      timeout = None
  
---- a/pipenv/patched/pip/_internal/download.py
-+++ b/pipenv/patched/pip/_internal/download.py
-@@ -753,7 +753,7 @@ def _copy_dist_from_dir(link_path, location):
+@@ -753,7 +754,7 @@ def _copy_dist_from_dir(link_path, location):
  
      # build an sdist
      setup_py = 'setup.py'
@@ -472,56 +479,6 @@ index 5f9bb93d..83edd874 100644
          logger.warning(
              "Package %s has an invalid Requires-Python entry %s - %s",
  
-diff --git a/pipenv/patched/pip/_vendor/packaging/specifiers.py b/pipenv/patched/pip/_vendor/packaging/specifiers.py
-index 9b6353f0..2281ad8e 100644
---- a/pipenv/patched/pip/_vendor/packaging/specifiers.py
-+++ b/pipenv/patched/pip/_vendor/packaging/specifiers.py
-@@ -586,7 +586,7 @@ def _pad_version(left, right):
-     )
- 
- 
--class SpecifierSet(BaseSpecifier):
-+class SpecifierSet(BaseSpecifier, set):
- 
-     def __init__(self, specifiers="", prereleases=None):
-         # Split on , to break each indidivual specifier into it's own item, and
-@@ -673,6 +673,36 @@ class SpecifierSet(BaseSpecifier):
-     def __iter__(self):
-         return iter(self._specs)
- 
-+    def __iadd__(self, other):
-+        if isinstance(other, string_types):
-+            other = SpecifierSet(other)
-+        elif not isinstance(other, SpecifierSet):
-+            return NotImplemented
-+
-+        if self._prereleases is not None and other._prereleases is not None and self._prereleases != other._prereleases:
-+            raise ValueError(
-+                "Cannot combine SpecifierSets with True and False prerelease "
-+                "overrides."
-+            )
-+        specs = set(self._specs)
-+        specs.intersection_update(other._specs)
-+        self._specs = frozenset(specs)
-+
-+    def intersection_update(self, other):
-+        if isinstance(other, string_types):
-+            other = SpecifierSet(other)
-+        elif not isinstance(other, SpecifierSet):
-+            return NotImplemented
-+
-+        if self._prereleases is not None and other._prereleases is not None and self._prereleases != other._prereleases:
-+            raise ValueError(
-+                "Cannot combine SpecifierSets with True and False prerelease "
-+                "overrides."
-+            )
-+        specs = set(self._specs)
-+        specs.intersection_update(other._specs)
-+        self._specs = frozenset(specs)
-+
-     @property
-     def prereleases(self):
-         # If we have been given an explicit prerelease modifier, then we'll
 diff --git a/pipenv/patched/pip/_internal/wheel.py b/pipenv/patched/pip/_internal/wheel.py
 index c71f17d2..3e29a49d 100644
 --- a/pipenv/patched/pip/_internal/wheel.py
@@ -544,3 +501,19 @@ index c71f17d2..3e29a49d 100644
              SETUPTOOLS_SHIM % req.setup_py
          ] + list(self.global_options)
  
+diff --git a/pipenv/patched/pip/_internal/pep425tags.py b/pipenv/patched/notpip/_internal/pep425tags.py
+index c2290ab9..bea31585 100644
+--- a/pipenv/patched/pip/_internal/pep425tags.py
++++ b/pipenv/patched/pip/_internal/pep425tags.py
+@@ -10,7 +10,10 @@ import sysconfig
+ import warnings
+ from collections import OrderedDict
+ 
+-import pipenv.patched.notpip._internal.utils.glibc
++try:
++    import pip._internal.utils.glibc
++except ImportError:
++    import pip.utils.glibc
+ 
+ logger = logging.getLogger(__name__)
+ 
diff --git a/tasks/vendoring/patches/patched/piptools.patch b/tasks/vendoring/patches/patched/piptools.patch
index ff22c361..60ba96fd 100644
--- a/tasks/vendoring/patches/patched/piptools.patch
+++ b/tasks/vendoring/patches/patched/piptools.patch
@@ -338,15 +338,29 @@ index 05ec8fd..6380e8f 100644
                  msg = ('pip-compile does not support URLs as packages, unless they are editable. '
                         'Perhaps add -e option?')
                  raise UnsupportedConstraint(msg, constraint)
-@@ -156,6 +157,7 @@ class Resolver(object):
+@@ -147,15 +148,18 @@ class Resolver(object):
+             if editable_ireq:
+                 yield editable_ireq  # ignore all the other specs: the editable one is the one that counts
+                 continue
+-
+             ireqs = iter(ireqs)
+             # deepcopy the accumulator so as to not modify the self.our_constraints invariant
+             combined_ireq = copy.deepcopy(next(ireqs))
+-            combined_ireq.comes_from = None
+             for ireq in ireqs:
                  # NOTE we may be losing some info on dropped reqs here
-                 combined_ireq.req.specifier &= ireq.req.specifier
+-                combined_ireq.req.specifier &= ireq.req.specifier
++                try:
++                    combined_ireq.req.specifier &= ireq.req.specifier
++                except TypeError:
++                    if ireq.req.specifier._specs and not combined_ireq.req.specifier._specs:
++                        combined_ireq.req.specifier._specs = ireq.req.specifier._specs
                  combined_ireq.constraint &= ireq.constraint
 +                combined_ireq.markers = ireq.markers
                  # Return a sorted, de-duped tuple of extras
                  combined_ireq.extras = tuple(sorted(set(tuple(combined_ireq.extras) + tuple(ireq.extras))))
              yield combined_ireq
-@@ -273,6 +275,16 @@ class Resolver(object):
+@@ -273,6 +277,16 @@ class Resolver(object):
              for dependency in self.repository.get_dependencies(ireq):
                  yield dependency
              return
@@ -363,7 +377,7 @@ index 05ec8fd..6380e8f 100644
          elif not is_pinned_requirement(ireq):
              raise TypeError('Expected pinned or editable requirement, got {}'.format(ireq))
  
-@@ -283,14 +295,25 @@ class Resolver(object):
+@@ -283,14 +297,25 @@ class Resolver(object):
          if ireq not in self.dependency_cache:
              log.debug('  {} not in cache, need to check index'.format(format_requirement(ireq)), fg='yellow')
              dependencies = self.repository.get_dependencies(ireq)
@@ -431,10 +445,10 @@ index fde5816..d76695d 100644
      return line
  
 diff --git a/pipenv/patched/piptools/_compat/pip_compat.py b/pipenv/patched/piptools/_compat/pip_compat.py
-index 7e8cdf3..96c8a1e 100644
+index 7e8cdf3..4e4e1b2 100644
 --- a/pipenv/patched/piptools/_compat/pip_compat.py
 +++ b/pipenv/patched/piptools/_compat/pip_compat.py
-@@ -1,30 +1,40 @@
+@@ -1,30 +1,41 @@
  # -*- coding=utf-8 -*-
  import importlib
  
@@ -450,7 +464,8 @@ index 7e8cdf3..96c8a1e 100644
 -        _tmp = importlib.import_module(pip9)
 +    _tmp = None
 +    if vendored_name:
-+        vendor = '{0}.{1}'.format(vendored_name, old_path)
++        vendor = '{0}._internal'.format(vendored_name)
++        vendor = '{0}.{1}'.format(vendor, old_path if old_path else module_path)
 +        try:
 +            _tmp = importlib.import_module(vendor)
 +        except ImportError:
