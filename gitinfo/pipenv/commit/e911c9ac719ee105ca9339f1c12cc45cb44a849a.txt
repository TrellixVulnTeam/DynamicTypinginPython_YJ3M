commit e911c9ac719ee105ca9339f1c12cc45cb44a849a
Author: Dan Ryan <dan.ryan@canonical.com>
Date:   Fri Apr 3 22:34:37 2020 -0400

    Use monkeypatch instead of mock for setting dotenv test attributes
    
    Signed-off-by: Dan Ryan <dan.ryan@canonical.com>

diff --git a/pipenv/__init__.py b/pipenv/__init__.py
index 481b4608..624397c5 100644
--- a/pipenv/__init__.py
+++ b/pipenv/__init__.py
@@ -37,22 +37,20 @@ except Exception:
     pass
 
 from pipenv.vendor.vistir.misc import get_text_stream
-from pipenv.environments import PIPENV_IS_CI
 
-if not PIPENV_IS_CI:
-    stdout = get_text_stream("stdout")
-    stderr = get_text_stream("stderr")
+stdout = get_text_stream("stdout")
+stderr = get_text_stream("stderr")
 
-    if os.name == "nt":
-        from pipenv.vendor.vistir.misc import _can_use_color, _wrap_for_color
+if os.name == "nt":
+    from pipenv.vendor.vistir.misc import _can_use_color, _wrap_for_color
 
-        if _can_use_color(stdout):
-            stdout = _wrap_for_color(stdout)
-        if _can_use_color(stderr):
-            stderr = _wrap_for_color(stderr)
+    if _can_use_color(stdout):
+        stdout = _wrap_for_color(stdout)
+    if _can_use_color(stderr):
+        stderr = _wrap_for_color(stderr)
 
-    sys.stdout = stdout
-    sys.stderr = stderr
+sys.stdout = stdout
+sys.stderr = stderr
 
 from .cli import cli
 from . import resolver  # noqa
diff --git a/tests/unit/test_core.py b/tests/unit/test_core.py
index eb799850..71a7681f 100644
--- a/tests/unit/test_core.py
+++ b/tests/unit/test_core.py
@@ -31,8 +31,9 @@ def test_load_dot_env_from_environment_variable_location(monkeypatch, capsys):
         with open(dotenv_path, 'w') as f:
             f.write('{}={}'.format(key, val))
 
-        with mock.patch('pipenv.environments.PIPENV_DOTENV_LOCATION', dotenv_path):
-            load_dot_env()
+        m.setenv("PIPENV_DOTENV_LOCATION", dotenv_path)
+        m.setattr("pipenv.environments", "PIPENV_DOTENV_LOCATION", dotenv_path)
+        load_dot_env()
         assert os.environ[key] == val
 
 
@@ -48,13 +49,14 @@ def test_doesnt_load_dot_env_if_disabled(monkeypatch, capsys):
         with open(dotenv_path, 'w') as f:
             f.write('{}={}'.format(key, val))
 
-        with mock.patch('pipenv.environments.PIPENV_DOTENV_LOCATION', dotenv_path):
-            with mock.patch('pipenv.environments.PIPENV_DONT_LOAD_ENV', '1'):
-                load_dot_env()
-            assert key not in os.environ
-
-            load_dot_env()
-            assert key in os.environ
+        m.setenv("PIPENV_DOTENV_LOCATION", dotenv_path)
+        m.setattr("pipenv.environments.PIPENV_DOTENV_LOCATION", dotenv_path)
+        m.setattr("pipenv.environments.PIPENV_DONT_LOAD_ENV", True)
+        load_dot_env()
+        assert key not in os.environ
+        m.setattr("pipenv.environments.PIPENV_DONT_LOAD_ENV", False)
+        load_dot_env()
+        assert key in os.environ
 
 
 @pytest.mark.core
@@ -65,7 +67,8 @@ def test_load_dot_env_warns_if_file_doesnt_exist(monkeypatch, capsys):
             is_console = False
             m.setattr(click._winconsole, "_is_console", lambda x: is_console)
         dotenv_path = os.path.join(tempdir.name, 'does-not-exist.env')
-        with mock.patch('pipenv.environments.PIPENV_DOTENV_LOCATION', dotenv_path):
-            load_dot_env()
+        m.setenv("PIPENV_DOTENV_LOCATION", dotenv_path)
+        m.setattr("pipenv.environments.PIPENV_DOTENV_LOCATION", dotenv_path)
+        load_dot_env()
         output, err = capsys.readouterr()
         assert 'Warning' in err
