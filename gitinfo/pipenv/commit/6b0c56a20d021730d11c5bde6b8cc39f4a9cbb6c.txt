commit 6b0c56a20d021730d11c5bde6b8cc39f4a9cbb6c
Author: Kenneth Reitz <me@kennethreitz.org>
Date:   Thu Sep 21 19:04:57 2017 -0400

    specify a specific index for a specific dependency
    
    Signed-off-by: Kenneth Reitz <me@kennethreitz.org>

diff --git a/HISTORY.txt b/HISTORY.txt
index 4381ba0d..a30a7bdd 100644
--- a/HISTORY.txt
+++ b/HISTORY.txt
@@ -1,3 +1,5 @@
+7.4.6:
+- Specify a specific index for a specific dependency.
 7.4.5:
  - Support for custom indexes!
  - Random bugfixes.
diff --git a/Pipfile b/Pipfile
index 118b4750..c22f6927 100644
--- a/Pipfile
+++ b/Pipfile
@@ -8,12 +8,4 @@ sphinx = "<=1.5.5"
 twine = "*"
 sphinx-click = "*"
 
-[packages]
-requests = "*"
 
-
-
-
-
-[requires]
-python_version = "3.6"
diff --git a/pipenv/cli.py b/pipenv/cli.py
index 05e41c27..57c3cbf8 100644
--- a/pipenv/cli.py
+++ b/pipenv/cli.py
@@ -689,11 +689,11 @@ def do_install_dependencies(
                 del v['hash']
 
     # Convert the deps to pip-compatible arguments.
-    deps_list = [(d, ignore_hashes) for d in convert_deps_to_pip(deps, r=False)]
+    deps_list = [(d, ignore_hashes) for d in convert_deps_to_pip(deps, project, r=False, include_index=True)]
     failed_deps_list = []
 
     if len(vcs_deps):
-        deps_list.extend((d, True) for d in convert_deps_to_pip(vcs_deps, r=False))
+        deps_list.extend((d, True) for d in convert_deps_to_pip(vcs_deps, project, r=False))
 
     # --requirements was passed.
     if requirements:
@@ -703,6 +703,12 @@ def do_install_dependencies(
     procs = []
 
     for dep, ignore_hash in deps_list:
+        # Use a specific index, if specified.
+        index = None
+        if ' -i ' in dep:
+            dep, index = dep.split(' -i ')
+            dep = '{0} {1}'.format(dep, ' '.join(index.split()[1:])).strip()
+            index = index.split()[0]
 
         # Install the module.
         c = pip_install(
@@ -711,8 +717,10 @@ def do_install_dependencies(
             allow_global=allow_global,
             no_deps=no_deps,
             verbose=verbose,
-            block=False
+            block=False,
+            index=index
         )
+        c.dep = dep
         procs.append(c)
 
     for c in progress.bar(procs, label=INSTALL_LABEL if os.name != 'nt' else ''):
@@ -729,7 +737,7 @@ def do_install_dependencies(
             click.echo(
                 '{0} {1}! Will try again.'.format(
                     crayons.red('An error occured while installing'),
-                    crayons.green(dep.split('--hash')[0].strip())
+                    crayons.green(c.dep.split('--hash')[0].strip())
                 )
             )
 
@@ -739,13 +747,20 @@ def do_install_dependencies(
         click.echo(crayons.white(u'Installing initially–failed dependencies…', bold=True))
 
         for dep, ignore_hash in progress.bar(failed_deps_list, label=INSTALL_LABEL2):
+            index = None
+            if ' -i ' in dep:
+                dep, index = dep.split(' -i ')
+                dep = '{0} {1}'.format(dep, ' '.join(index.split()[1:])).strip()
+                index = index.split()[0]
+
             # Install the module.
             c = pip_install(
                 dep,
                 ignore_hashes=ignore_hash,
                 allow_global=allow_global,
                 no_deps=no_deps,
-                verbose=verbose
+                verbose=verbose,
+                index=index
             )
 
             # The Installtion failed...
@@ -931,7 +946,7 @@ def do_lock(verbose=False, system=False, clear=False):
                 del lockfile[section][k]
 
     # Resolve dev-package dependencies, with pip-tools.
-    deps = convert_deps_to_pip(project.dev_packages, r=False)
+    deps = convert_deps_to_pip(project.dev_packages, project, r=False, include_index=True)
     results = resolve_deps(
         deps,
         sources=project.sources,
@@ -945,12 +960,19 @@ def do_lock(verbose=False, system=False, clear=False):
 
     # Add develop dependencies to lockfile.
     for dep in results:
+        # Add version information to lockfile.
         lockfile['develop'].update({dep['name']: {'version': '=={0}'.format(dep['version'])}})
+
+        # Add Hashes to lockfile
         lockfile['develop'][dep['name']]['hashes'] = dep['hashes']
 
+        # Add index metadata to lockfile.
+        if 'index' in dep:
+            lockfile['develop'][dep['name']]['index'] = dep['index']
+
     # Add refs for VCS installs.
     # TODO: be smarter about this.
-    vcs_deps = convert_deps_to_pip(project.vcs_dev_packages, r=False)
+    vcs_deps = convert_deps_to_pip(project.vcs_dev_packages, project, r=False)
     pip_freeze = delegator.run('{0} freeze'.format(which_pip())).out
 
     for dep in vcs_deps:
@@ -976,7 +998,7 @@ def do_lock(verbose=False, system=False, clear=False):
     )
 
     # Resolve package dependencies, with pip-tools.
-    deps = convert_deps_to_pip(project.packages, r=False)
+    deps = convert_deps_to_pip(project.packages, project, r=False, include_index=True)
     results = resolve_deps(
         deps,
         sources=project.sources,
@@ -989,12 +1011,19 @@ def do_lock(verbose=False, system=False, clear=False):
 
     # Add default dependencies to lockfile.
     for dep in results:
+        # Add version information to lockfile.
         lockfile['default'].update({dep['name']: {'version': '=={0}'.format(dep['version'])}})
+
+        # Add Hashes to lockfile
         lockfile['default'][dep['name']]['hashes'] = dep['hashes']
 
+        # Add index metadata to lockfile.
+        if 'index' in dep:
+            lockfile['default'][dep['name']]['index'] = dep['index']
+
     # Add refs for VCS installs.
     # TODO: be smarter about this.
-    vcs_deps = convert_deps_to_pip(project.vcs_packages, r=False)
+    vcs_deps = convert_deps_to_pip(project.vcs_packages, project, r=False)
     pip_freeze = delegator.run('{0} freeze'.format(which_pip())).out
 
     for dep in vcs_deps:
@@ -1155,7 +1184,7 @@ def do_init(
 
 def pip_install(
     package_name=None, r=None, allow_global=False, ignore_hashes=False,
-    no_deps=True, verbose=False, block=True
+    no_deps=True, verbose=False, block=True, index=None
 ):
 
     # Create files for hash mode.
@@ -1169,6 +1198,11 @@ def pip_install(
         no_deps = False
 
     # Try installing for each source in project.sources.
+    if index:
+        sources = [{'url': index}]
+    else:
+        sources = project.sources
+
     for source in project.sources:
         if r:
             install_reqs = ' -r {0}'.format(r)
@@ -2049,7 +2083,7 @@ def update(dev=False, three=None, python=None, dry_run=False, bare=False, dont_u
             packages.update(project.dev_packages)
 
         installed_packages = {}
-        deps = convert_deps_to_pip(packages, r=False)
+        deps = convert_deps_to_pip(packages, project, r=False)
         c = delegator.run('{0} freeze'.format(which_pip()))
 
         for r in c.out.strip().split('\n'):
diff --git a/pipenv/project.py b/pipenv/project.py
index 40e796b2..a883af7b 100644
--- a/pipenv/project.py
+++ b/pipenv/project.py
@@ -322,7 +322,7 @@ class Project(object):
         data = {
             # Default source.
             u'source': [
-                {u'url': u'https://pypi.python.org/simple', u'verify_ssl': True}
+                {u'url': u'https://pypi.python.org/simple', u'verify_ssl': True, 'name': 'pypi'}
             ],
 
             # Default packages.
@@ -374,7 +374,16 @@ class Project(object):
         if 'source' in self.parsed_pipfile:
             return self.parsed_pipfile['source']
         else:
-            return [{u'url': u'https://pypi.python.org/simple', u'verify_ssl': True}]
+            return [{u'url': u'https://pypi.python.org/simple', u'verify_ssl': True, 'name': 'pypi'}]
+
+    def get_source(self, name=None, url=None):
+        for source in self.sources:
+            if name:
+                if source.get('name') == name:
+                    return source
+            elif url:
+                if source.get('url') in url:
+                    return source
 
     def destroy_lockfile(self):
         """Deletes the lockfile."""
diff --git a/pipenv/utils.py b/pipenv/utils.py
index 1095ccf4..bc7c4705 100644
--- a/pipenv/utils.py
+++ b/pipenv/utils.py
@@ -362,11 +362,37 @@ def best_matches_from(path, which, which_pip, project):
             return []
 
 
+def prepare_pip_source_args(sources, pip_args=None):
+    if pip_args is None:
+        pip_args = []
+
+    if sources:
+        # Add the source to pip.
+        pip_args.extend(['-i', sources[0]['url']])
+
+        # Trust the host if it's not verified.
+        if not sources[0].get('verify_ssl', True):
+            pip_args.extend(['--trusted-host', urlparse(sources[0]['url']).netloc.split(':')[0]])
+
+        # Add additional sources as extra indexes.
+        if len(sources) > 1:
+            for source in sources[1:]:
+                pip_args.extend(['--extra-index-url', source['url']])
+
+                # Trust the host if it's not verified.
+                if not source.get('verify_ssl', True):
+                    pip_args.extend(['--trusted-host', urlparse(source['url']).netloc.split(':')[0]])
+
+    return pip_args
+
+
 def resolve_deps(deps, which, which_pip, project, sources=None, verbose=False, python=False, clear=False):
     """Given a list of dependencies, return a resolved list of dependencies,
     using pip-tools -- and their hashes, using the warehouse API / pip.
     """
 
+    index_lookup = {}
+
     with HackedPythonVersion(python):
 
         class PipCommand(pip.basecommand.Command):
@@ -393,26 +419,15 @@ def resolve_deps(deps, which, which_pip, project, sources=None, verbose=False, p
             constraints.append(constraint)
             constraints.extend(extra_constraints)
 
+            if ' -i ' in dep:
+                index_lookup[constraint.name] = project.get_source(url=dep.split(' -i ')[1]).get('name')
+
         pip_command = get_pip_command()
 
         pip_args = []
 
         if sources:
-            # Add the source to pip.
-            pip_args.extend(['-i', sources[0]['url']])
-
-            # Trust the host if it's not verified.
-            if not sources[0].get('verify_ssl', True):
-                pip_args.extend(['--trusted-host', urlparse(sources[0]['url']).netloc.split(':')[0]])
-
-            # Add additional sources as extra indexes.
-            if len(sources) > 1:
-                for source in sources[1:]:
-                    pip_args.extend(['--extra-index-url', source['url']])
-
-                    # Trust the host if it's not verified.
-                    if not source.get('verify_ssl', True):
-                        pip_args.extend(['--trusted-host', urlparse(source['url']).netloc.split(':')[0]])
+            pip_args = prepare_pip_source_args(sources, pip_args)
 
         if verbose:
             print('Using pip: {0}'.format(' '.join(pip_args)))
@@ -433,6 +448,7 @@ def resolve_deps(deps, which, which_pip, project, sources=None, verbose=False, p
     for result in resolved_tree:
         name = pep423_name(result.name)
         version = clean_pkg_version(result.specifier)
+        index = index_lookup.get(result.name)
 
         collected_hashes = []
         if 'python.org' in '|'.join([source['url'] for source in sources]):
@@ -457,7 +473,10 @@ def resolve_deps(deps, which, which_pip, project, sources=None, verbose=False, p
             except (ValueError, KeyError):
                 pass
 
-        results.append({'name': name, 'version': version, 'hashes': collected_hashes})
+        if index:
+            results.append({'name': name, 'version': version, 'hashes': collected_hashes, 'index': index})
+        else:
+            results.append({'name': name, 'version': version, 'hashes': collected_hashes})
 
     return results
 
@@ -553,7 +572,7 @@ def convert_deps_from_pip(dep):
     return dependency
 
 
-def convert_deps_to_pip(deps, r=True):
+def convert_deps_to_pip(deps, project=None, r=True, include_index=False):
     """"Converts a Pipfile-formatted dependency to a pip-formatted one."""
 
     dependencies = []
@@ -563,6 +582,7 @@ def convert_deps_to_pip(deps, r=True):
         # Default (e.g. '>1.10').
         extra = deps[dep] if isinstance(deps[dep], six.string_types) else ''
         version = ''
+        index = ''
 
         # Get rid of '*'.
         if deps[dep] == '*' or str(extra) == '{}':
@@ -582,7 +602,13 @@ def convert_deps_to_pip(deps, r=True):
             extra = '[{0}]'.format(deps[dep]['extras'][0])
 
         if 'version' in deps[dep]:
-            version = deps[dep]['version']
+            if not deps[dep]['version'] == '*':
+                version = deps[dep]['version']
+
+        if include_index:
+            if 'index' in deps[dep]:
+                pip_args = prepare_pip_source_args([project.get_source(deps[dep]['index'])])
+                index = ' '.join(pip_args)
 
         # Support for version control
         maybe_vcs = [vcs for vcs in VCS_LIST if vcs in deps[dep]]
@@ -628,7 +654,7 @@ def convert_deps_to_pip(deps, r=True):
             else:
                 dep = ''
 
-        dependencies.append('{0}{1}{2}{3}'.format(dep, extra, version, hash))
+        dependencies.append('{0}{1}{2}{3} {4}'.format(dep, extra, version, hash, index))
 
     if not r:
         return dependencies
diff --git a/pipenv/vendor/pipfile/api.py b/pipenv/vendor/pipfile/api.py
index 382c2003..a7b6c254 100644
--- a/pipenv/vendor/pipfile/api.py
+++ b/pipenv/vendor/pipfile/api.py
@@ -26,7 +26,7 @@ def walk_up(bottom):
     # get files in current dir
     try:
         names = os.listdir(bottom)
-    except Exception as e:
+    except Exception:
         return
 
     dirs, nondirs = [], []
@@ -69,7 +69,7 @@ class PipfileParser(object):
 
         # Load the default configuration.
         default_config = {
-            u'source': [{u'url': u'https://pypi.python.org/simple', u'verify_ssl': True}],
+            u'source': [{u'url': u'https://pypi.python.org/simple', u'verify_ssl': True, 'name': "pypi"}],
             u'packages': {},
             u'requires': {},
             u'dev-packages': {}
@@ -142,7 +142,7 @@ class Pipfile(object):
         """Returns a JSON representation of the Pipfile."""
         data = self.data
         data['_meta']['hash'] = {"sha256": self.hash}
-        data['_meta']['pipfile-spec'] = 4
+        data['_meta']['pipfile-spec'] = 5
         return json.dumps(data, indent=4, separators=(',', ': '))
 
     def assert_requirements(self):
