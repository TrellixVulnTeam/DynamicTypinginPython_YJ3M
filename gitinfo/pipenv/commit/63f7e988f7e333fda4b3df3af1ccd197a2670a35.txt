commit 63f7e988f7e333fda4b3df3af1ccd197a2670a35
Author: luz.paz <luzpaz@users.noreply.github.com>
Date:   Tue Mar 27 06:45:04 2018 -0400

    Misc. typos
    
    Found via `codespell -q 3`

diff --git a/docs/advanced.rst b/docs/advanced.rst
index be2d8905..a97ee2de 100644
--- a/docs/advanced.rst
+++ b/docs/advanced.rst
@@ -12,7 +12,7 @@ This document covers some of Pipenv's more glorious and advanced features.
 
 - Dependencies of wheels provided in a ``Pipfile`` will not be captured by ``$ pipenv lock``.
 - There are some known issues with using private indexes, related to hashing. We're actively working to solve this problem. You may have great luck with this, however.
-- Installation is intended to be as determinstic as possible — use the ``--sequential`` flag to increase this, if experiencing issues.
+- Installation is intended to be as deterministic as possible — use the ``--sequential`` flag to increase this, if experiencing issues.
 
 ☤ Specifying Package Indexes
 ----------------------------
@@ -517,9 +517,9 @@ at all, use the `PIP_IGNORE_INSTALLED` setting::
 
 There is a subtle but very important distinction to be made between **applications** and **libraries**. This is a very common source of confusion in the Python community.
 
-Libraries provide reusable functionality to other libraries and applications (let's use the umbrella term **projects** here). They are required to work alongside other libraries, all with their own set of subdependencies. They define **abstract dependencies**. To avoid version conflicts in subdependencies of different libraries within a project, libraries should never ever pin dependency versions. Although they may specifiy lower or (less frequently) upper bounds, if they rely on some specific feature/fix/bug. Library dependencies are specified via ``install_requires`` in ``setup.py``.
+Libraries provide reusable functionality to other libraries and applications (let's use the umbrella term **projects** here). They are required to work alongside other libraries, all with their own set of subdependencies. They define **abstract dependencies**. To avoid version conflicts in subdependencies of different libraries within a project, libraries should never ever pin dependency versions. Although they may specify lower or (less frequently) upper bounds, if they rely on some specific feature/fix/bug. Library dependencies are specified via ``install_requires`` in ``setup.py``.
 
-Libaries are ultimately meant to be used in some **application**. Applications are different in that they usually are not depended on by other projects. They are meant to be deployed into some specific environment and only then should the exact versions of all their dependencies and subdependencies be made concrete. To make this process easier is currently the main goal of ``pipenv``.
+Libraries are ultimately meant to be used in some **application**. Applications are different in that they usually are not depended on by other projects. They are meant to be deployed into some specific environment and only then should the exact versions of all their dependencies and subdependencies be made concrete. To make this process easier is currently the main goal of ``pipenv``.
 
 To summarize:
 
diff --git a/docs/basics.rst b/docs/basics.rst
index c8dd89eb..f77d850b 100644
--- a/docs/basics.rst
+++ b/docs/basics.rst
@@ -124,7 +124,7 @@ Example Pipfile.lock
 -------------------------------------------
 
 - Generally, keep both ``Pipfile`` and ``Pipfile.lock`` in version control.
-- Do not keep ``Pipfile.lock`` in version control if multiple versions of Python are being targetted.
+- Do not keep ``Pipfile.lock`` in version control if multiple versions of Python are being targeted.
 - Specify your target Python version in your `Pipfile`'s ``[requires]`` section. Ideally, you should only have one target Python version, as this is a deployment tool.
 
 
diff --git a/run-tests.sh b/run-tests.sh
index f66a7fd2..92dadae5 100755
--- a/run-tests.sh
+++ b/run-tests.sh
@@ -37,7 +37,7 @@ else
 
 		echo "Clearing Caches…"
 		rm -fr ~/Library/Caches/pip
-		rm -fr ~/Libary/Caches/pipenv
+		rm -fr ~/Library/Caches/pipenv
 
 	# Otherwise, assume Linux…
 	else
@@ -48,7 +48,7 @@ else
 
 	# If the lockfile hasn't changed, skip installs.
 
-	echo "Instaling Pipenv…"
+	echo "Installing Pipenv…"
 	pip install -e "$(pwd)" --upgrade-strategy=only-if-needed
 
 	echo "Installing dependencies…"
diff --git a/tests/pytest-pypi/README.md b/tests/pytest-pypi/README.md
index cb830b04..a9ba37c2 100644
--- a/tests/pytest-pypi/README.md
+++ b/tests/pytest-pypi/README.md
@@ -103,7 +103,7 @@ and your tests executed by pytest all will have access to the `httpbin` and `htt
 
 ## Support and dependencies
 
-pytest-httpbin suports Python 2.6, 2.7, 3.4, and pypy.  It will automatically install httpbin and flask when you install it from pypi.
+pytest-httpbin supports Python 2.6, 2.7, 3.4, and pypy.  It will automatically install httpbin and flask when you install it from pypi.
 
 [httpbin](https://github.com/kennethreitz/httpbin) itself does not support python 2.6 as of version 0.6.0, when the Flask-common dependency was added.  If you need python 2.6 support pin the httpbin version to 0.5.0
 
