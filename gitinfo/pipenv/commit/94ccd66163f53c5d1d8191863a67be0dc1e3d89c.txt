commit 94ccd66163f53c5d1d8191863a67be0dc1e3d89c
Author: Erin O'Connell <erinocon5@gmail.com>
Date:   Mon Sep 4 22:19:07 2017 -0600

    finished porting test_pipenv to windows

diff --git a/test_windows/test_basic.py b/test_windows/test_basic.py
index 8e7e3cd5..47ea8996 100644
--- a/test_windows/test_basic.py
+++ b/test_windows/test_basic.py
@@ -1,7 +1,7 @@
 import os
 import shutil
 
-#from mock import patch, Mock, PropertyMock
+from mock import patch, Mock, PropertyMock
 
 import pytest
 import delegator
@@ -219,4 +219,158 @@ class TestPipenvWindows():
         assert 'pytest' in p['dev-packages']
         assert 'PyTEST' not in p['dev-packages']
 
-        assert changed is True
\ No newline at end of file
+        assert changed is True
+
+    def test_parse_install_output(self):
+        """Ensure pip output is parsed properly."""
+        install_output = ("Collecting requests\n"
+                          "Using cached requests-2.13.0-py2.py3-none-any.whl\n"
+                          "Successfully downloaded requests-2.13.0\n"
+                          "Collecting honcho\n"
+                          "Using cached honcho-0.7.1.tar.gz\n"
+                          "Successfully downloaded honcho-0.7.1\n"
+                          "Collecting foursquare\n"
+                          "Downloading foursquare-1%212015.4.7.tar.gz\n"
+                          "Saved ./foursquare-1%212015.4.7.tar.gz\n"
+                          "Successfully downloaded foursquare\n"
+                          "Collecting django-debug-toolbar\n"
+                          "Using cached django_debug_toolbar-1.6-py2.py3-none-any.whl\n"
+                          "Collecting sqlparse>=0.2.0 (from django-debug-toolbar)\n"
+                          "Using cached sqlparse-0.2.2-py2.py3-none-any.whl\n")
+
+        names_map = dict(parse_install_output(install_output))
+
+        # Verify files are added to names map with appropriate project name.
+        assert 'requests-2.13.0-py2.py3-none-any.whl' in names_map
+        assert names_map['requests-2.13.0-py2.py3-none-any.whl'] == 'requests'
+
+        # Verify percent-encoded characters are unencoded (%21 -> !).
+        assert 'foursquare-1!2015.4.7.tar.gz' in names_map
+
+        # Verify multiple dashes in name is parsed correctly.
+        assert 'django_debug_toolbar-1.6-py2.py3-none-any.whl' in names_map
+        assert names_map['django_debug_toolbar-1.6-py2.py3-none-any.whl'] == 'django-debug-toolbar'
+
+    @patch('pipenv.project.Project.sources', new_callable=PropertyMock)
+    @patch('delegator.run')
+    def test_pip_install_should_try_every_possible_source(self, mocked_delegator, mocked_sources):
+        sources = [
+            {'url': 'http://dontexistis.in.pypi/simple'},
+            {'url': 'http://existis.in.pypi/simple'}
+        ]
+        mocked_sources.return_value = sources
+        first_cmd_return = Mock()
+        first_cmd_return.return_code = 1
+        second_cmd_return = Mock()
+        second_cmd_return.return_code = 0
+        mocked_delegator.side_effect = [first_cmd_return, second_cmd_return]
+        c = pip_install('package')
+        assert c.return_code == 0
+
+    @patch('pipenv.project.Project.sources', new_callable=PropertyMock)
+    @patch('delegator.run')
+    def test_pip_install_should_return_the_last_error_if_no_cmd_worked(self, mocked_delegator, mocked_sources):
+        sources = [
+            {'url': 'http://dontexistis.in.pypi/simple'},
+            {'url': 'http://dontexistis.in.pypi/simple'}
+        ]
+        mocked_sources.return_value = sources
+        first_cmd_return = Mock()
+        first_cmd_return.return_code = 1
+        second_cmd_return = Mock()
+        second_cmd_return.return_code = 1
+        mocked_delegator.side_effect = [first_cmd_return, second_cmd_return]
+        c = pip_install('package')
+        assert c.return_code == 1
+        assert c == second_cmd_return
+
+    @patch('pipenv.project.Project.sources', new_callable=PropertyMock)
+    @patch('delegator.run')
+    def test_pip_install_should_return_the_first_cmd_that_worked(self, mocked_delegator, mocked_sources):
+        sources = [
+            {'url': 'http://existis.in.pypi/simple'},
+            {'url': 'http://existis.in.pypi/simple'}
+        ]
+        mocked_sources.return_value = sources
+        first_cmd_return = Mock()
+        first_cmd_return.return_code = 0
+        second_cmd_return = Mock()
+        second_cmd_return.return_code = 0
+        mocked_delegator.side_effect = [first_cmd_return, second_cmd_return]
+        c = pip_install('package')
+        assert c.return_code == 0
+        assert c == first_cmd_return
+
+    @patch('pipenv.project.Project.sources', new_callable=PropertyMock)
+    @patch('delegator.run')
+    def test_pip_download_should_try_every_possible_source(self, mocked_delegator, mocked_sources):
+        sources = [
+            {'url': 'http://dontexistis.in.pypi/simple'},
+            {'url': 'http://existis.in.pypi/simple'}
+        ]
+        mocked_sources.return_value = sources
+        first_cmd_return = Mock()
+        first_cmd_return.return_code = 1
+        second_cmd_return = Mock()
+        second_cmd_return.return_code = 0
+        mocked_delegator.side_effect = [first_cmd_return, second_cmd_return]
+        c = pip_download('package')
+        assert c.return_code == 0
+
+    @patch('pipenv.project.Project.sources', new_callable=PropertyMock)
+    @patch('delegator.run')
+    def test_pip_download_should_return_the_last_error_if_no_cmd_worked(self, mocked_delegator, mocked_sources):
+        sources = [
+            {'url': 'http://dontexistis.in.pypi/simple'},
+            {'url': 'http://dontexistis.in.pypi/simple'}
+        ]
+        mocked_sources.return_value = sources
+        first_cmd_return = Mock()
+        first_cmd_return.return_code = 1
+        second_cmd_return = Mock()
+        second_cmd_return.return_code = 1
+        mocked_delegator.side_effect = [first_cmd_return, second_cmd_return]
+        c = pip_download('package')
+        assert c.return_code == 1
+        assert c == second_cmd_return
+
+    @patch('pipenv.project.Project.sources', new_callable=PropertyMock)
+    @patch('delegator.run')
+    def test_pip_download_should_return_the_first_cmd_that_worked(self, mocked_delegator, mocked_sources):
+        sources = [
+            {'url': 'http://existis.in.pypi/simple'},
+            {'url': 'http://existis.in.pypi/simple'}
+        ]
+        mocked_sources.return_value = sources
+        first_cmd_return = Mock()
+        first_cmd_return.return_code = 0
+        second_cmd_return = Mock()
+        second_cmd_return.return_code = 0
+        mocked_delegator.side_effect = [first_cmd_return, second_cmd_return]
+        c = pip_download('package')
+        assert c.return_code == 0
+        assert c == first_cmd_return
+
+    def test_lock_requirements_file(self):
+        delegator.run('mkdir test_pipenv_requirements')
+        os.chdir('test_pipenv_requirements')
+
+        os.environ['PIPENV_VENV_IN_PROJECT'] = '1'
+
+        assert delegator.run('copy /y nul Pipfile').return_code == 0
+        assert delegator.run('pipenv --python python').return_code == 0
+        assert delegator.run('pipenv install requests==2.14.0').return_code == 0
+        assert delegator.run('pipenv install flask==0.12.2').return_code == 0
+        assert delegator.run('pipenv install --dev pytest==3.1.1').return_code == 0
+
+        req_list = ("requests==2.14.0", "flask==0.12.2", "pytest==3.1.1")
+        
+        # Validate requirements.txt.
+        c = delegator.run('pipenv lock -r')
+        assert c.return_code == 0
+        for req in req_list:
+            assert req in c.out
+
+        # Cleanup.
+        os.chdir('..')
+        shutil.rmtree('test_pipenv_requirements')
\ No newline at end of file
