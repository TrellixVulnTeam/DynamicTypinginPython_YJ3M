commit b7de7c1cdfcc459bc9814fd2c335320441967e68
Author: Dan Ryan <dan@danryan.co>
Date:   Fri May 10 23:14:51 2019 -0400

    Fix marker formatting and inclusion
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/resolver.py b/pipenv/resolver.py
index 497d2343..ca42b44c 100644
--- a/pipenv/resolver.py
+++ b/pipenv/resolver.py
@@ -238,6 +238,7 @@ class Entry(object):
             self.entry_dict["hashes"] = list(entry_hashes | locked_hashes)
         self.entry_dict["name"] = self.name
         self.entry_dict["version"] = self.strip_version(self.entry_dict["version"])
+        _, self.entry_dict = self.get_markers_from_dict(self.entry_dict)
         return self.entry_dict
 
     @property
@@ -603,6 +604,7 @@ class Entry(object):
 
 
 def clean_results(results, resolver, project, dev=False):
+    from pipenv.utils import translate_markers
     if not project.lockfile_exists:
         return results
     lockfile = project.lockfile_content
@@ -614,7 +616,7 @@ def clean_results(results, resolver, project, dev=False):
         name = result.get("name")
         entry_dict = result.copy()
         entry = Entry(name, entry_dict, project, resolver, reverse_deps=reverse_deps, dev=dev)
-        entry_dict = entry.get_cleaned_dict(keep_outdated=False)
+        entry_dict = translate_markers(entry.get_cleaned_dict(keep_outdated=False))
         new_results.append(entry_dict)
     return new_results
 
@@ -681,7 +683,6 @@ def parse_packages(packages, pre, clear, system, requirements_dir=None):
                 sys.path.insert(0, req.req.setup_info.base_dir)
                 req.req._setup_info.get_info()
                 req.update_name_from_path(req.req.setup_info.base_dir)
-        print(os.listdir(req.req.setup_info.base_dir))
         try:
             name, entry = req.pipfile_entry
         except Exception:
diff --git a/pipenv/utils.py b/pipenv/utils.py
index b4d7817b..d7aa4c56 100644
--- a/pipenv/utils.py
+++ b/pipenv/utils.py
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+from __future__ import print_function
 import contextlib
 import errno
 import logging
@@ -353,7 +354,10 @@ class Resolver(object):
         index_lookup,  # type: Dict[str, str]
         markers_lookup,  # type: Dict[str, str]
         project,  # type: Project
-        sources  # type: Dict[str, str]
+        sources,  # type: Dict[str, str]
+        req_dir=None,  # type: Optional[str]
+        pre=False,  # type: bool
+        clear=False,  # type: bool
     ):
         # type: (...) -> Tuple[Set[str], Dict[str, Dict[str, Union[str, bool, List[str]]]], Dict[str, str], Dict[str, str]]
         constraints = set()  # type: Set[str]
@@ -362,6 +366,13 @@ class Resolver(object):
             index_lookup = {}
         if markers_lookup is None:
             markers_lookup = {}
+        if not req_dir:
+            from .vendor.vistir.path import create_tracked_tempdir
+            req_dir = create_tracked_tempdir(prefix="pipenv-", suffix="-reqdir")
+        transient_resolver = cls(
+            [], req_dir, project, sources, index_lookup=index_lookup,
+            markers_lookup=markers_lookup, clear=clear, pre=pre
+        )
         for dep in deps:
             if not dep:
                 continue
@@ -370,7 +381,9 @@ class Resolver(object):
             )
             index_lookup.update(req_idx)
             markers_lookup.update(markers_idx)
-            constraint_update, lockfile_update = cls.get_deps_from_req(req)
+            constraint_update, lockfile_update = cls.get_deps_from_req(
+                req, resolver=transient_resolver
+            )
             constraints |= constraint_update
             skipped.update(lockfile_update)
         return constraints, skipped, index_lookup, markers_lookup
@@ -427,12 +440,13 @@ class Resolver(object):
         return cls.get_deps_from_req(req)
 
     @classmethod
-    def get_deps_from_req(cls, req):
-        # type: (Requirement) -> Tuple[Set[str], Dict[str, Dict[str, Union[str, bool, List[str]]]]]
-        from requirementslib.models.utils import _requirement_to_str_lowercase_name
+    def get_deps_from_req(cls, req, resolver=None):
+        # type: (Requirement, Optional["Resolver"]) -> Tuple[Set[str], Dict[str, Dict[str, Union[str, bool, List[str]]]]]
+        from .vendor.requirementslib.models.utils import _requirement_to_str_lowercase_name
+        from .vendor.requirementslib.models.requirements import Requirement
         constraints = set()  # type: Set[str]
         locked_deps = dict()  # type: Dict[str, Dict[str, Union[str, bool, List[str]]]]
-        if req.is_file_or_url or req.is_vcs and not req.is_wheel:
+        if (req.is_file_or_url or req.is_vcs) and not req.is_wheel:
             # for local packages with setup.py files and potential direct url deps:
             if req.is_vcs:
                 req_list, lockfile = get_vcs_deps(reqs=[req])
@@ -464,7 +478,9 @@ class Resolver(object):
                                 pep423_name(new_req.normalized_name): new_entry
                             }
                         else:
-                            new_constraints, new_lock = cls.get_deps_from_req(new_req)
+                            new_constraints, new_lock = cls.get_deps_from_req(
+                                new_req, resolver
+                            )
                         locked_deps.update(new_lock)
                         constraints |= new_constraints
                 # if there is no marker or there is a valid marker, add the constraint line
@@ -493,6 +509,14 @@ class Resolver(object):
             if req and req.requirement and (
                 req.requirement.marker and not req.requirement.marker.evaluate()
             ):
+                pypi = resolver.repository if resolver else None
+                best_match = pypi.find_best_match(req.ireq) if pypi else None
+                if best_match:
+                    hashes = resolver.collect_hashes(best_match) if resolver else []
+                    new_req = Requirement.from_ireq(best_match)
+                    new_req = new_req.add_hashes(hashes)
+                    name, entry = new_req.pipfile_entry
+                    locked_deps[pep423_name(name)] = translate_markers(entry)
                 return constraints, locked_deps
             constraints.add(req.constraint_line)
             return constraints, locked_deps
@@ -524,7 +548,8 @@ class Resolver(object):
         if sources is None:
             sources = project.sources
         constraints, skipped, index_lookup, markers_lookup = cls.get_metadata(
-            deps, index_lookup, markers_lookup, project, sources,
+            deps, index_lookup, markers_lookup, project, sources, req_dir=req_dir,
+            pre=pre, clear=clear
         )
         return Resolver(
             constraints, req_dir, project, sources, index_lookup=index_lookup,
@@ -673,7 +698,6 @@ class Resolver(object):
             else:
                 candidate = self.fetch_candidate(result)
                 if getattr(candidate, "requires_python", None):
-                    print(candidate.requires_python)
                     marker = make_marker_from_specifier(candidate.requires_python)
                     self.markers[result.name] = marker
                     result.markers = marker
@@ -837,6 +861,7 @@ class Resolver(object):
             name, entry = format_requirement_for_lockfile(
                 req, self.markers_lookup, self.index_lookup, collected_hashes
             )
+            entry = translate_markers(entry)
             if name in results:
                 results[name].update(entry)
             else:
@@ -844,6 +869,7 @@ class Resolver(object):
         for k in list(self.skipped.keys()):
             req = Requirement.from_pipfile(k, self.skipped[k])
             name, entry = self._clean_skipped_result(req, self.skipped[k])
+            entry = translate_markers(entry)
             if name in results:
                 results[name].update(entry)
             else:
@@ -1026,6 +1052,7 @@ def prepare_lockfile(results, pipfile, lockfile):
                 lockfile[name] = lockfile_entry[name]
             else:
                 lockfile[name].update(lockfile_entry[name])
+                lockfile[name] = translate_markers(lockfile[name])
         else:
             lockfile[name] = lockfile_entry[name]
     return lockfile
@@ -1708,13 +1735,12 @@ def translate_markers(pipfile_entry):
     """
     if not isinstance(pipfile_entry, Mapping):
         raise TypeError("Entry is not a pipfile formatted mapping.")
-    from .vendor.distlib.markers import DEFAULT_CONTEXT as marker_context
-    from .vendor.packaging.markers import Marker
+    from .vendor.packaging.markers import Marker, default_environment
     from .vendor.vistir.misc import dedup
 
-    allowed_marker_keys = ["markers"] + [k for k in marker_context.keys()]
+    allowed_marker_keys = ["markers"] + list(default_environment().keys())
     provided_keys = list(pipfile_entry.keys()) if hasattr(pipfile_entry, "keys") else []
-    pipfile_markers = [k for k in provided_keys if k in allowed_marker_keys]
+    pipfile_markers = set(provided_keys) & set(allowed_marker_keys)
     new_pipfile = dict(pipfile_entry).copy()
     marker_set = set()
     if "markers" in new_pipfile:
@@ -1724,7 +1750,7 @@ def translate_markers(pipfile_entry):
     for m in pipfile_markers:
         entry = "{0}".format(pipfile_entry[m])
         if m != "markers":
-            marker_set.add(str(Marker("{0}{1}".format(m, entry))))
+            marker_set.add(str(Marker("{0} {1}".format(m, entry))))
             new_pipfile.pop(m)
     if marker_set:
         new_pipfile["markers"] = str(Marker(" or ".join(
@@ -2062,13 +2088,4 @@ def make_marker_from_specifier(spec):
         spec = "=={0}".format(spec.lstrip("="))
     specset = cleanup_pyspecs(SpecifierSet(spec))
     marker_str = " and ".join([format_pyversion(pv) for pv in specset])
-    print(marker_str, file=sys.stderr)
     return Marker(marker_str)
-        # spec_match = next(iter(c for c in Specifier._operators if c in spec), None)
-        # if spec_match:
-        #     spec_index = spec.index(spec_match)
-        #     spec_end = spec_index + len(spec_match)
-        #     op = spec[spec_index:spec_end].strip()
-        #     version = spec[spec_end:].strip()
-        #     spec = " {0} '{1}'".format(op, version)
-    # return Marker("python_version {0}".format(spec))
diff --git a/pipenv/vendor/requirementslib/models/markers.py b/pipenv/vendor/requirementslib/models/markers.py
index b5f55b34..e1014917 100644
--- a/pipenv/vendor/requirementslib/models/markers.py
+++ b/pipenv/vendor/requirementslib/models/markers.py
@@ -149,7 +149,6 @@ def _format_pyspec(specifier):
     try:
         op = REPLACE_RANGES[specifier.operator]
     except KeyError:
-        print(specifier)
         return specifier
     curr_tuple = _tuplize_version(version)
     try:
@@ -161,10 +160,8 @@ def _format_pyspec(specifier):
             op = "<="
             next_tuple = (next_tuple[0], curr_tuple[1])
         else:
-            # print(specifier)
             return specifier
     specifier = Specifier("{0}{1}".format(op, _format_version(next_tuple)))
-    # print(specifier)
     return specifier
 
 
@@ -181,20 +178,16 @@ def _get_specs(specset):
     if isinstance(specset, str):
         specset = SpecifierSet(specset)
     result = []
-    try:
-        for spec in set(specset):
-            version = spec.version
-            op = spec.operator
-            if op in ("in", "not in"):
-                versions = version.split(",")
-                op = "==" if op == "in" else "!="
-                for ver in versions:
-                    result.append((op, _tuplize_version(ver.strip())))
-            else:
-                result.append((spec.operator, _tuplize_version(spec.version)))
-    except Exception:
-        print(specset)
-        raise
+    for spec in set(specset):
+        version = spec.version
+        op = spec.operator
+        if op in ("in", "not in"):
+            versions = version.split(",")
+            op = "==" if op == "in" else "!="
+            for ver in versions:
+                result.append((op, _tuplize_version(ver.strip())))
+        else:
+            result.append((spec.operator, _tuplize_version(spec.version)))
     return sorted(result, key=operator.itemgetter(1))
 
 
diff --git a/tests/integration/test_install_markers.py b/tests/integration/test_install_markers.py
index 96f6edff..1d3fb1bd 100644
--- a/tests/integration/test_install_markers.py
+++ b/tests/integration/test_install_markers.py
@@ -25,7 +25,7 @@ tablib = {version = "*", markers="os_name=='splashwear'"}
         c = p.pipenv('install')
         assert c.return_code == 0
         assert 'Ignoring' in c.out
-        assert 'markers' in p.lockfile['default']['tablib']
+        assert 'markers' in p.lockfile['default']['tablib'], p.lockfile["default"]["tablib"]
 
         c = p.pipenv('run python -c "import tablib;"')
         assert c.return_code == 1
@@ -95,8 +95,8 @@ funcsigs = {version = "*", os_name = "== 'splashwear'"}
 
         c = p.pipenv('install')
         assert c.return_code == 0
-
-        assert p.lockfile['default']['funcsigs']['markers'] == "os_name == 'splashwear'"
+        assert "markers" in p.lockfile['default']['funcsigs'], p.lockfile['default']['funcsigs']
+        assert p.lockfile['default']['funcsigs']['markers'] == "os_name == 'splashwear'", p.lockfile['default']['funcsigs']
 
 
 @pytest.mark.markers
diff --git a/tests/integration/test_install_twists.py b/tests/integration/test_install_twists.py
index 98236b8a..08b2ef1e 100644
--- a/tests/integration/test_install_twists.py
+++ b/tests/integration/test_install_twists.py
@@ -1,5 +1,6 @@
 import os
 import shutil
+import sys
 
 import pytest
 
@@ -51,10 +52,9 @@ testpipenv = {path = ".", editable = true, extras = ["dev"]}
         assert "testpipenv" in p.lockfile["default"]
         assert p.lockfile["default"]["testpipenv"]["extras"] == ["dev"]
         assert "six" in p.lockfile["default"]
-        c = p.pipenv("--rm")
+        c = p.pipenv("uninstall --all")
         assert c.return_code == 0
-        project = Project()
-        project.write_toml({"packages": {}, "dev-packages": {}})
+        print("Current directory: {0}".format(os.getcwd()), file=sys.stderr)
         c = p.pipenv("install {0}".format(line))
         assert c.return_code == 0
         assert "testpipenv" in p.pipfile["packages"]
