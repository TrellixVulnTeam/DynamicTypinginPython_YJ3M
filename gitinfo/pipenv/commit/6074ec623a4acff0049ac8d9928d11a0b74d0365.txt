commit 6074ec623a4acff0049ac8d9928d11a0b74d0365
Author: Kenneth Reitz <me@kennethreitz.org>
Date:   Tue Jan 24 15:18:21 2017 -0500

    preliminary support for hashes

diff --git a/pipenv/cli.py b/pipenv/cli.py
index 43aa179f..aa1b95a9 100644
--- a/pipenv/cli.py
+++ b/pipenv/cli.py
@@ -148,6 +148,46 @@ def do_install_dependencies(dev=False, only=False, bare=False, allow_global=Fals
             click.echo(crayons.blue(c.out))
 
 
+def do_download_dependencies(dev=False, only=False, bare=False):
+    """"Executes the install functionality."""
+
+    # Load the Pipfile.
+    p = pipfile.load(project.pipfile_location)
+
+    # Load the lockfile if it exists, else use the Pipfile as a seed.
+    if not project.lockfile_exists:
+        if not bare:
+            click.echo(crayons.yellow('Installing dependencies from Pipfile...'))
+        lockfile = json.loads(p.lock())
+    else:
+        if not bare:
+            click.echo(crayons.yellow('Installing dependencies from Pipfile.lock...'))
+        with open(project.lockfile_location, 'r') as f:
+            lockfile = json.load(f)
+
+    # Install default dependencies, always.
+    deps = lockfile['default'] if not only else {}
+
+    # Add development deps if --dev was passed.
+    if dev:
+        deps.update(lockfile['develop'])
+
+    # Convert the deps to pip-compatible arguments.
+    deps = convert_deps_to_pip(deps)
+
+    # Actually install each dependency into the virtualenv.
+    for package_name in deps:
+
+        if not bare:
+            click.echo('Downloading {0}...'.format(crayons.green(package_name)))
+
+        # pip install:
+        c = pip_download(package_name)
+
+        if not bare:
+            click.echo(crayons.blue(c.out))
+
+
 def do_create_virtualenv(three=None):
     """Creates a virtualenv."""
     click.echo(crayons.yellow('Creating a virtualenv for this project...'))
@@ -169,47 +209,68 @@ def do_create_virtualenv(three=None):
     do_where(virtualenv=True, bare=False)
 
 
+def get_downloads_info():
+
+    info = []
+
+    for fname in os.listdir(project.download_location):
+        name = fname.split('-')[0]
+
+        # Remove file extensions from name.
+        version = fname.split('-')[1]
+        version = version.replace('.tar.gz', '').replace('.zip', '').replace('.egg', '')
+
+        # Get the hash of each file.
+        c = delegator.run('pip hash {}'.format(os.sep.join([project.download_location, fname])))
+        hash = c.out.split('--hash=')[1].strip()
+
+        info.append(dict(name=name, version=version, hash=hash))
+
+    return info
+
 def do_lock(dev=False):
     """Executes the freeze functionality."""
 
     click.echo(crayons.yellow('Assuring all dependencies from Pipfile are installed...'))
 
     # Purge the virtualenv, for development dependencies.
-    do_purge(bare=True)
+    do_purge(downloads=True)
 
     click.echo(crayons.yellow('Locking {0} dependencies...'.format(crayons.red('[dev-packages]'))))
 
     # Install only development dependencies.
-    do_install_dependencies(dev=True, only=True, bare=True)
+    do_download_dependencies(dev=True, only=True, bare=True)
 
     # Load the Pipfile and generate a lockfile.
     p = pipfile.load(project.pipfile_location)
     lockfile = json.loads(p.lock())
 
     # Pip freeze development dependencies.
-    c = delegator.run('{0} freeze'.format(which_pip()))
+    # c = delegator.run('{0} freeze'.format(which_pip()))
+    results = get_downloads_info()
 
     # Add Development dependencies to lockfile.
-    for dep in c.out.split('\n'):
+    for dep in results:
         if dep:
-            lockfile['develop'].update(convert_deps_from_pip(dep))
+            lockfile['develop'].update({dep['name']: {'hash': dep['hash'], 'version': '=={0}'.format(dep['version'])}})
 
 
     # Purge the virtualenv.
-    do_purge(bare=True)
+    do_purge(downloads=True)
 
     click.echo(crayons.yellow('Locking {0} dependencies...'.format(crayons.red('[packages]'))))
 
     # Install only development dependencies.
-    do_install_dependencies(bare=True)
+    do_download_dependencies(bare=True)
 
     # Pip freeze default dependencies.
-    c = delegator.run('{0} freeze'.format(which_pip()))
+    # c = delegator.run('{0} freeze'.format(which_pip()))
+    results = get_downloads_info()
 
     # Add default dependencies to lockfile.
-    for dep in c.out.split('\n'):
+    for dep in results:
         if dep:
-            lockfile['default'].update(convert_deps_from_pip(dep))
+            lockfile['default'].update({dep['name']: {'hash': dep['hash'], 'version': '=={0}'.format(dep['version'])}})
 
     # Write out lockfile.
     with open(project.lockfile_location, 'w') as f:
@@ -254,8 +315,13 @@ def do_activate_virtualenv(bare=False):
             click.echo(activate_virtualenv())
 
 
-def do_purge(bare=False, allow_global=False):
+def do_purge(bare=False, downloads=False, allow_global=False):
     """Executes the purge functionality."""
+
+    if downloads:
+        shutil.rmtree(project.download_location)
+        return
+
     freeze = delegator.run('{0} freeze'.format(which_pip(allow_global=allow_global))).out
     installed = freeze.split()
 
@@ -311,6 +377,10 @@ def pip_install(package_name, allow_global=False):
     c = delegator.run('{0} install "{1}" -i {2}'.format(which_pip(allow_global=allow_global), package_name, project.source['url']))
     return c
 
+def pip_download(package_name):
+    c = delegator.run('{0} download "{1}" -d {2}'.format(which_pip(), package_name, project.download_location))
+    return c
+
 def which(command):
     return os.sep.join([project.virtualenv_location] + ['bin/{0}'.format(command)])
 
@@ -408,7 +478,7 @@ def install(package_name=False, more_packages=False, r=False, dev=False, three=F
 
     for package_name in package_names:
         # Lower-case incoming package name.
-        package_name = package_name.lower()
+        package_name = package_name
 
         click.echo('Installing {0}...'.format(crayons.green(package_name)))
 
diff --git a/pipenv/project.py b/pipenv/project.py
index 8204518e..9dd4f776 100644
--- a/pipenv/project.py
+++ b/pipenv/project.py
@@ -6,6 +6,26 @@ from . import _pipfile as pipfile
 from .utils import format_toml, multi_split
 from .utils import convert_deps_from_pip, convert_deps_to_pip
 
+def mkdir_p(newdir):
+    """works the way a good mkdir should :)
+        - already exists, silently complete
+        - regular file in the way, raise an exception
+        - parent directory(ies) does not exist, make them as well
+        From: http://code.activestate.com/recipes/82465-a-friendly-mkdir/
+    """
+    if os.path.isdir(newdir):
+        pass
+    elif os.path.isfile(newdir):
+        raise OSError("a file with the same name as the desired " \
+                      "dir, '%s', already exists." % newdir)
+    else:
+        head, tail = os.path.split(newdir)
+        if head and not os.path.isdir(head):
+            _mkdir(head)
+        #print "_mkdir %s" % repr(newdir)
+        if tail:
+            os.mkdir(newdir)
+
 
 class Project(object):
     """docstring for Project"""
@@ -28,6 +48,16 @@ class Project(object):
     def virtualenv_location(self):
         return os.sep.join(self.pipfile_location.split(os.sep)[:-1] + ['.venv'])
 
+    @property
+    def download_location(self):
+        d_dir = os.sep.join(self.pipfile_location.split(os.sep)[:-1] + ['.venv', 'downloads'])
+
+        # Create the directory, if it doesn't exist.
+        mkdir_p(d_dir)
+
+        return d_dir
+
+
     @property
     def pipfile_location(self):
         try:
@@ -80,7 +110,7 @@ class Project(object):
 
     def add_package_to_pipfile(self, package_name, dev=False):
         # Lower-case package name.
-        package_name = package_name.lower()
+        package_name = package_name
 
         # Find the Pipfile.
         pipfile_path = pipfile.Pipfile.find()
