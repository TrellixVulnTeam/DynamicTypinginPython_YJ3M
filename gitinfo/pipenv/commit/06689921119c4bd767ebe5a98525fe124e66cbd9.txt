commit 06689921119c4bd767ebe5a98525fe124e66cbd9
Author: Dan Ryan <dan@danryan.co>
Date:   Tue Mar 20 23:31:49 2018 -0400

    Format code

diff --git a/pipenv/core.py b/pipenv/core.py
index 915fcd07..e1a82e5a 100644
--- a/pipenv/core.py
+++ b/pipenv/core.py
@@ -169,8 +169,6 @@ def add_to_path(p):
         )
 
 
-
-
 def cleanup_virtualenv(bare=True):
     """Removes the virtualenv directory from the system."""
     if not bare:
@@ -1635,6 +1633,7 @@ def format_pip_output(out, r=None):
     out = '\n'.join([l for l in gen(out)])
     return out
 
+
 def warn_in_virtualenv():
     if PIPENV_USE_SYSTEM:
         # Only warn if pipenv isn't already active.
@@ -1866,19 +1865,21 @@ def do_install(
     if package_name == '.':
         package_name = False
     # Install editable local packages before locking - this givves us acceess to dist-info
-    if project.pipfile_exists and (not project.lockfile_exists or not project.virtualenv_exists):
+    if project.pipfile_exists and (
+        not project.lockfile_exists or not project.virtualenv_exists
+    ):
         section = project.editable_packages if not dev else project.dev_editable_packages
         for package in section.keys():
-            converted = convert_deps_to_pip({package: section[package]}, project=project, r=False)
+            converted = convert_deps_to_pip(
+                {package: section[package]}, project=project, r=False
+            )
             if not package_name:
                 if converted:
                     package_name = converted.pop(0)
             if converted:
                 more_packages.extend(converted)
-                
     # Allow more than one package to be provided.
     package_names = [package_name] + more_packages
-
     # Install all dependencies, if none was provided.
     if package_name is False:
         # Update project settings with pre preference.
@@ -1911,7 +1912,9 @@ def do_install(
                 ):
                     # Support for VCS dependencies.
                     package_names[i] = convert_deps_to_pip(
-                        {package_name: section[package__name]}, project=project, r=False
+                        {package_name: section[package__name]},
+                        project=project,
+                        r=False,
                     )[
                         0
                     ]
@@ -2458,12 +2461,12 @@ def do_clean(
     # Ensure that virtualenv is available.
     ensure_project(three=three, python=python, validate=False)
     ensure_lockfile()
-    installed_packages = filter(None, delegator.run(
-        '{0} freeze'.format(which('pip'))
-    ).out.strip(
-    ).split(
-        '\n'
-    ))
+    installed_packages = filter(
+        None,
+        delegator.run('{0} freeze'.format(which('pip'))).out.strip().split(
+            '\n'
+        ),
+    )
     installed_package_names = []
     for installed in installed_packages:
         r = get_requirement(installed)
diff --git a/pipenv/project.py b/pipenv/project.py
index 628c212a..c2ecc557 100644
--- a/pipenv/project.py
+++ b/pipenv/project.py
@@ -46,8 +46,6 @@ if PIPENV_PIPFILE:
 
     else:
         PIPENV_PIPFILE = normalize_drive(os.path.abspath(PIPENV_PIPFILE))
-
-
 # (path, file contents) => TOMLFile
 # keeps track of pipfiles that we've seen so we do not need to re-parse 'em
 _pipfile_cache = {}
@@ -410,7 +408,9 @@ class Project(object):
     def editable_packages(self):
         packages = {}
         for k, v in self.parsed_pipfile.get('packages', {}).items():
-            if v.get('editable') and any(v.get(key) for key in('file', 'path') + VCS_LIST):
+            if v.get('editable') and any(
+                v.get(key) for key in ('file', 'path') + VCS_LIST
+            ):
                 packages.update({k: v})
         return packages
 
@@ -418,7 +418,9 @@ class Project(object):
     def editable_dev_packages(self):
         packages = {}
         for k, v in self.parsed_pipfile.get('dev-packages', {}).items():
-            if v.get('editable') and any(v.get(key) for key in('file', 'path') + VCS_LIST):
+            if v.get('editable') and any(
+                v.get(key) for key in ('file', 'path') + VCS_LIST
+            ):
                 packages.update({k: v})
         return packages
 
