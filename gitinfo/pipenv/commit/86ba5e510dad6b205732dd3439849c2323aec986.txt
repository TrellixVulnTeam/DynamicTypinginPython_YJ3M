commit 86ba5e510dad6b205732dd3439849c2323aec986
Author: Nate Prewitt <Nate.Prewitt@gmail.com>
Date:   Tue Feb 28 09:13:40 2017 -0700

    moving util-type functions into utils.py

diff --git a/pipenv/cli.py b/pipenv/cli.py
index b56ef045..568ac398 100644
--- a/pipenv/cli.py
+++ b/pipenv/cli.py
@@ -22,7 +22,7 @@ from requests.packages.urllib3.exceptions import InsecureRequestWarning
 
 from .project import Project
 from .utils import (convert_deps_from_pip, convert_deps_to_pip, is_required_version,
-    proper_case, pep426_name)
+    proper_case, pep426_name, split_vcs, recase_file)
 from .__version__ import __version__
 from . import pep508checker
 from .environments import PIPENV_COLORBLIND, PIPENV_NOSPIN, PIPENV_SHELL_COMPAT, PIPENV_VENV_IN_PROJECT
@@ -190,12 +190,12 @@ def do_install_dependencies(dev=False, only=False, bare=False, requirements=Fals
     if only or not project.lockfile_exists:
         if not bare:
             click.echo(crayons.yellow('Installing dependencies from Pipfile...'))
-            lockfile = project.split_vcs(project._lockfile)
+            lockfile = split_vcs(project._lockfile)
     else:
         if not bare:
             click.echo(crayons.yellow('Installing dependencies from Pipfile.lock...'))
         with open(project.lockfile_location) as f:
-            lockfile = project.split_vcs(json.load(f))
+            lockfile = split_vcs(json.load(f))
 
     # Install default dependencies, always.
     deps = lockfile['default'] if not only else {}
@@ -251,7 +251,7 @@ def do_download_dependencies(dev=False, only=False, bare=False):
     """"Executes the download functionality."""
 
     # Load the Lockfile.
-    lockfile = project.split_vcs(project._lockfile)
+    lockfile = split_vcs(project._lockfile)
 
     if not bare:
         click.echo(crayons.yellow('Downloading dependencies from Pipfile...'))
@@ -435,7 +435,8 @@ def do_lock():
         if dep:
             lockfile['default'].update({dep['name']: {'hash': dep['hash'], 'version': '=={0}'.format(dep['version'])}})
 
-    lockfile = project.recase_file(lockfile)
+    # Properly case package names.
+    lockfile = recase_file(lockfile)
 
     # Write out lockfile.
     with open(project.lockfile_location, 'w') as f:
diff --git a/pipenv/project.py b/pipenv/project.py
index b81bf87e..f0f2c3d0 100644
--- a/pipenv/project.py
+++ b/pipenv/project.py
@@ -12,7 +12,7 @@ import delegator
 from requests.compat import OrderedDict
 
 from .utils import (format_toml, mkdir_p, convert_deps_from_pip,
-    proper_case, pep426_name, is_vcs)
+    proper_case, pep426_name, is_vcs, recase_file)
 from .environments import PIPENV_MAX_DEPTH, PIPENV_VENV_IN_PROJECT
 
 
@@ -144,39 +144,6 @@ class Project(object):
 
         return pfile
 
-    def split_vcs(self, split_file):
-        """Split VCS dependencies out from file."""
-        if 'packages' in split_file or 'dev-packages' in split_file:
-            sections = ('packages', 'dev-packages')
-        elif 'default' in split_file or 'develop' in split_file:
-            sections = ('default', 'develop')
-
-        for section in sections:
-            entries = split_file.get(section, {})
-            vcs_dict = dict((k, entries.pop(k)) for k in list(entries.keys()) if is_vcs(entries[k]))
-            split_file[section+'-vcs'] = vcs_dict
-
-        return split_file
-
-    def recase_file(self, in_file):
-        """Recase file before writing to output."""
-        if 'packages' in in_file or 'dev-packages' in in_file:
-            sections = ('packages', 'dev-packages')
-        elif 'default' in in_file or 'develop' in in_file:
-            sections = ('default', 'develop')
-
-        for section in sections:
-            file_section = in_file.get(section, {})
-
-            for key in list(file_section.keys()):
-                try:
-                    cased_key = proper_case(key)
-                except IOError:
-                    cased_key = key
-                file_section[cased_key] = file_section.pop(key)
-
-        return in_file
-
     @property
     def _lockfile(self):
         """Pipfile.lock divided by PyPI and external dependencies."""
@@ -242,7 +209,7 @@ class Project(object):
             del p[key][package_name]
 
         # Write Pipfile.
-        self.write_toml(self.recase_file(p))
+        self.write_toml(recase_file(p))
 
     def add_package_to_pipfile(self, package_name, dev=False):
 
@@ -262,4 +229,4 @@ class Project(object):
         p[key][package_name] = package[package_name]
 
         # Write Pipfile.
-        self.write_toml(self.recase_file(p))
+        self.write_toml(recase_file(p))
diff --git a/pipenv/utils.py b/pipenv/utils.py
index 025ef86b..e34aed47 100644
--- a/pipenv/utils.py
+++ b/pipenv/utils.py
@@ -166,6 +166,7 @@ def is_vcs(pipfile_entry):
         return any(key for key in pipfile_entry.keys() if key in VCS_LIST)
     return False
 
+
 def pep426_name(name):
     """Normalize package name to pep426 style standard."""
     return name.lower().replace('_','-')
@@ -196,3 +197,40 @@ def proper_case(package_name):
     good_name = r['name']
 
     return good_name
+
+
+def split_vcs(split_file):
+    """Split VCS dependencies out from file."""
+    if 'packages' in split_file or 'dev-packages' in split_file:
+        sections = ('packages', 'dev-packages')
+    elif 'default' in split_file or 'develop' in split_file:
+        sections = ('default', 'develop')
+
+     # For each vcs entry in a given section, move it to section-vcs.
+    for section in sections:
+        entries = split_file.get(section, {})
+        vcs_dict = dict((k, entries.pop(k)) for k in list(entries.keys()) if is_vcs(entries[k]))
+        split_file[section+'-vcs'] = vcs_dict
+
+    return split_file
+
+
+def recase_file(file_dict):
+    """Recase file before writing to output."""
+    if 'packages' in file_dict or 'dev-packages' in file_dict:
+        sections = ('packages', 'dev-packages')
+    elif 'default' in file_dict or 'develop' in file_dict:
+        sections = ('default', 'develop')
+
+    for section in sections:
+        file_section = file_dict.get(section, {})
+
+        # Try to properly case each key if we can.
+        for key in list(file_section.keys()):
+            try:
+                cased_key = proper_case(key)
+            except IOError:
+                cased_key = key
+            file_section[cased_key] = file_section.pop(key)
+
+    return file_dict
