commit e59a7a91f55819339d6c7d56354d1378585fcbff
Author: Kenneth Reitz <me@kennethreitz.org>
Date:   Sat Sep 16 13:59:48 2017 -0400

    i don't like adding code, but when i do, it's because it's awesome
    
    Signed-off-by: Kenneth Reitz <me@kennethreitz.org>

diff --git a/pipenv/cli.py b/pipenv/cli.py
index e205b4f3..aca100c2 100644
--- a/pipenv/cli.py
+++ b/pipenv/cli.py
@@ -37,7 +37,8 @@ from . import pep508checker, progress
 from .environments import (
     PIPENV_COLORBLIND, PIPENV_NOSPIN, PIPENV_SHELL_COMPAT,
     PIPENV_VENV_IN_PROJECT, PIPENV_USE_SYSTEM, PIPENV_TIMEOUT,
-    PIPENV_SKIP_VALIDATION, PIPENV_HIDE_EMOJIS
+    PIPENV_SKIP_VALIDATION, PIPENV_HIDE_EMOJIS, PIPENV_INSTALL_TIMEOUT,
+    PYENV_INSTALLED
 )
 
 # Backport required for earlier versions of Python.
@@ -326,6 +327,14 @@ def find_a_system_python(python):
 
 def ensure_python(three=None, python=None):
 
+    def abort():
+        puts(
+            'You can specify specific versions of Python with:\n  {0}'.format(
+                crayons.red('$ pipenv --python {0}'.format(os.sep.join(('path', 'to', 'python'))))
+            ), err=True
+        )
+        sys.exit(1)
+
     global USING_DEFAULT_PYTHON
 
     path_to_python = None
@@ -347,15 +356,87 @@ def ensure_python(three=None, python=None):
             u'{0}: Python {1} {2}'.format(
                 crayons.red('Warning', bold=True),
                 crayons.blue(python),
-                u'was not found on your system… ',
+                u'was not found on your system…',
             ), err=True
         )
-        puts(
-            'You can specify specific versions of Python with:\n  {0}'.format(
-                crayons.red('$ pipenv --python {0}'.format(os.sep.join(('path', 'to', 'python'))))
-            ), err=True
-        )
-        sys.exit(1)
+        # Pyenv is installed
+        if not PYENV_INSTALLED:
+            abort()
+        else:
+            s = (
+                '{0} {1} {2}'.format(
+                    'Would you like us to install latest',
+                    crayons.green('CPython {0}'.format(python)),
+                    'with pyenv?'
+                )
+            )
+
+            # Find the latest version of Python available.
+            # TODO: Keep this up to date!
+            version_map = {
+                # These versions appear incompatible with pew:
+                # '2.5': '2.5.6',
+                '2.6': '2.6.9',
+                '2.7': '2.7.13',
+                # '3.1': '3.1.5',
+                # '3.2': '3.2.6',
+                '3.3': '3.3.6',
+                '3.4': '3.4.7',
+                '3.5': '3.5.4',
+                '3.6': '3.6.2',
+            }
+            try:
+                version = version_map[python]
+            except KeyError:
+                # click.echo(
+                #     '{0}: The version of Python you selected is incompatible '
+                #     'with virtualenv, and is no longer supported'
+                #     ''.format(
+                #         crayons.red('Warning', bold=True)
+                #     )
+                # )
+                abort()
+
+            # Prompt the user to continue...
+            if not click.confirm(s, default=True):
+                abort()
+            else:
+
+                # Tell the user we're installing Python.
+                click.echo(
+                    u'{0} {1} {2} {3}{4}'.format(
+                        crayons.white(u'Installing', bold=True),
+                        crayons.green(u'CPython {0}'.format(version), bold=True),
+                        crayons.white(u'with pyenv', bold=True),
+                        crayons.white(u'(this may take a few minutes)'),
+                        crayons.white(u'…', bold=True)
+                    )
+                )
+
+                with spinner():
+                    # Install Python.
+                    c = delegator.run(
+                        'pyenv install {0} -s'.format(version),
+                        timeout=PIPENV_INSTALL_TIMEOUT,
+                        block=False
+                    )
+
+                    # Wait until the process has finished...
+                    c.block()
+
+                    # Print the results, in a beautiful blue...
+                    puts(crayons.blue(c.out), err=True)
+
+                click.echo(
+                    crayons.white(u'Making Python installation global…', bold=True)
+                )
+
+                c = delegator.run(
+                    'pyenv global system {0}'.format(version)
+                )
+
+                # Find the newly installed Python, hopefully.
+                path_to_python = find_a_system_python(python)
 
     return path_to_python
 
diff --git a/pipenv/environments.py b/pipenv/environments.py
index f2472c6f..c5bf94c6 100644
--- a/pipenv/environments.py
+++ b/pipenv/environments.py
@@ -48,3 +48,7 @@ if os.name == 'nt':
 
 # Tells pipenv how long to wait for virtualenvs to be created in seconds
 PIPENV_TIMEOUT = int(os.environ.get('PIPENV_TIMEOUT', 120))
+
+PIPENV_INSTALL_TIMEOUT = 60 * 15
+
+PYENV_INSTALLED = os.environ.get('PYENV_ROOT')
\ No newline at end of file
diff --git a/pipenv/utils.py b/pipenv/utils.py
index 298ec678..d56ad2c3 100644
--- a/pipenv/utils.py
+++ b/pipenv/utils.py
@@ -35,8 +35,13 @@ def python_version(path_to_python):
     @parse.with_pattern(r'.*')
     def allow_empty(text):
         return text
+
     TEMPLATE = 'Python {}.{}.{:d}{:AllowEmpty}'
-    parsed = parse.parse(TEMPLATE, output, dict(AllowEmpty=allow_empty)).fixed
+    parsed = parse.parse(TEMPLATE, output, dict(AllowEmpty=allow_empty))
+    if parsed:
+        parsed = parsed.fixed
+    else:
+        return None
 
     return u"{v[0]}.{v[1]}.{v[2]}".format(v=parsed)
 
@@ -175,7 +180,7 @@ def convert_deps_from_pip(dep):
 
         # {file: uri} TOML (spec 3 I guess...)
         dependency[req.name] = {'file': hashable_path}
-        
+
         # Add --editable if applicable
         if req.editable:
             dependency[req.name].update({'editable': True})
