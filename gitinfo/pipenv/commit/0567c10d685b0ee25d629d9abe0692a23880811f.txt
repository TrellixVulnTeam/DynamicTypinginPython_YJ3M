commit 0567c10d685b0ee25d629d9abe0692a23880811f
Author: Jeremy Fleischman <jeremyfleischman@gmail.com>
Date:   Wed May 2 10:03:05 2018 -0700

    When formatting a requirement, only lowercase its name.
    
    This fixes https://github.com/pypa/pipenv/issues/2113.
    
    This bug was introduced in
    <https://github.com/jazzband/pip-tools/pull/452> as a band-aid fix to
    <https://github.com/jazzband/pip-tools/issues/431>. Pipenv then copied
    that code in <https://github.com/pypa/pipenv/commit/2553ebcbf7e2574c997a9164234e0adf077ffcac#diff-b56b95ccea8595a0f6f24ea753842976>, and inherited this latent bug.
    
    Maybe the right fix is for pypa/packaging to lowercase the name? There's
    a comment here
    <https://github.com/pypa/packaging/blob/16.8/packaging/requirements.py#L86>
    about normalizing the requirement's name, which might be what this is
    referring to.
    
    To test this, I invented a new, very simple python package called
    `depends-on-marked-package`. The setup.py for this package is just:
    
    ```python
    import setuptools
    
    setuptools.setup(
        name="depends-on-marked-package",
        version="0.0.1",
        packages=setuptools.find_packages(),
        install_requires=['pytz; platform_python_implementation=="CPython"'],
    )
    ```
    
    This is a simplified version of gevent's setup.py's install_requires upon greenlet.

diff --git a/pipenv/patched/piptools/utils.py b/pipenv/patched/piptools/utils.py
index db8bb9b3..f3de3dd3 100644
--- a/pipenv/patched/piptools/utils.py
+++ b/pipenv/patched/piptools/utils.py
@@ -58,6 +58,36 @@ def make_install_requirement(name, version, extras, markers, constraint=False):
             constraint=constraint)
 
 
+def _requirement_to_str_lowercase_name(requirement):
+    """
+    Formats a packaging.requirements.Requirement with a lowercase name.
+
+    This is simply a copy of
+    https://github.com/pypa/packaging/blob/16.8/packaging/requirements.py#L109-L124
+    modified to lowercase the dependency name.
+
+    Previously, we were invoking the original Requirement.__str__ method and
+    lowercasing the entire result, which would lowercase the name, *and* other,
+    important stuff that should not be lowercased (such as the marker). See
+    this issue for more information: https://github.com/pypa/pipenv/issues/2113.
+    """
+    parts = [requirement.name.lower()]
+
+    if requirement.extras:
+        parts.append("[{0}]".format(",".join(sorted(requirement.extras))))
+
+    if requirement.specifier:
+        parts.append(str(requirement.specifier))
+
+    if requirement.url:
+        parts.append("@ {0}".format(requirement.url))
+
+    if requirement.marker:
+        parts.append("; {0}".format(requirement.marker))
+
+    return "".join(parts)
+
+
 def format_requirement(ireq, marker=None):
     """
     Generic formatter for pretty printing InstallRequirements to the terminal
@@ -66,7 +96,7 @@ def format_requirement(ireq, marker=None):
     if ireq.editable:
         line = '-e {}'.format(ireq.link)
     else:
-        line = str(ireq.req).lower()
+        line = _requirement_to_str_lowercase_name(ireq.req)
 
     if marker:
         line = '{}; {}'.format(line, marker)
diff --git a/tests/integration/test_install_markers.py b/tests/integration/test_install_markers.py
index 87235d4a..9e3fa1d2 100644
--- a/tests/integration/test_install_markers.py
+++ b/tests/integration/test_install_markers.py
@@ -33,6 +33,26 @@ tablib = {version = "*", markers="os_name=='splashwear'"}
         c = p.pipenv('run python -c "import tablib;"')
         assert c.return_code == 1
 
+@pytest.mark.markers
+@flaky
+def test_platform_python_implementation_marker(PipenvInstance, pypi):
+    """Markers should be converted during locking to help users who input this incorrectly
+    """
+    with PipenvInstance(pypi=pypi) as p:
+        with open(p.pipfile_path, 'w') as f:
+            contents = """
+[packages]
+depends-on-marked-package = "*"
+            """.strip()
+            f.write(contents)
+
+        c = p.pipenv('install')
+        assert c.return_code == 0
+
+        # depends-on-marked-package has an install_requires of 'pytz; platform_python_implementation=="CPython"'
+        # Verify that that marker shows up in our lockfile unaltered.
+        assert p.lockfile['default']['pytz']['markers'] == "platform_python_implementation == 'CPython'"
+
 
 @pytest.mark.run
 @pytest.mark.alt
diff --git a/tests/pypi/depends-on-marked-package/depends_on_marked_package-0.0.1-py2.py3-none-any.whl b/tests/pypi/depends-on-marked-package/depends_on_marked_package-0.0.1-py2.py3-none-any.whl
new file mode 100644
index 00000000..d320deb3
Binary files /dev/null and b/tests/pypi/depends-on-marked-package/depends_on_marked_package-0.0.1-py2.py3-none-any.whl differ
