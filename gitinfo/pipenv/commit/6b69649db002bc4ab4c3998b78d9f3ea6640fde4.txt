commit 6b69649db002bc4ab4c3998b78d9f3ea6640fde4
Author: Kenneth Reitz <me@kennethreitz.org>
Date:   Thu Sep 7 12:03:32 2017 -0400

    make --hahes default
    
    Signed-off-by: Kenneth Reitz <me@kennethreitz.org>

diff --git a/pipenv/cli.py b/pipenv/cli.py
index 1543aa3c..977a743a 100644
--- a/pipenv/cli.py
+++ b/pipenv/cli.py
@@ -491,24 +491,6 @@ def do_lock(no_hashes=True, verbose=False, legacy=False):
         deps = convert_deps_to_pip(project.packages, r=False)
         results = resolve_deps(deps, sources=project.sources, hashes=(not no_hashes))
 
-        # Add default dependencies to lockfile.
-        for dep in results:
-            lockfile['default'].update({dep['name']: {'version': '=={0}'.format(dep['version'])}})
-            if not no_hashes:
-                lockfile['default'][dep['name']]['hashes'] = dep['hashes']
-
-        # Run the PEP 508 checker in the virtualenv, add it to the lockfile.
-        c = delegator.run('"{0}" {1}'.format(which('python'), shellquote(pep508checker.__file__.rstrip('cdo'))))
-        lockfile['_meta']['host-environment-markers'] = json.loads(c.out)
-
-        # Write out the lockfile.
-        with open(project.lockfile_location, 'w') as f:
-            json.dump(lockfile, f, indent=4, separators=(',', ': '), sort_keys=True)
-            # Write newline at end of document. GH Issue #319.
-            f.write('\n')
-
-        click.echo('{0} Pipfile.lock{1}'.format(crayons.yellow('Updated'), crayons.yellow('!')), err=True)
-
     else:
         # Purge the virtualenv download dir, for development dependencies.
         do_purge(downloads=True, bare=True)
@@ -545,27 +527,23 @@ def do_lock(no_hashes=True, verbose=False, legacy=False):
         # Pip freeze default dependencies.
         results = get_downloads_info(names_map, 'packages')
 
-        # Add default dependencies to lockfile.
-        for dep in results:
-            lockfile['default'].update({dep['name']: {'version': '=={0}'.format(dep['version'])}})
-            if not no_hashes:
-                lockfile['default'][dep['name']]['hash'] = dep['hash']
-
-        # Run the PEP 508 checker in the virtualenv, add it to the lockfile.
-        c = delegator.run('"{0}" {1}'.format(which('python'), shellquote(pep508checker.__file__.rstrip('cdo'))))
-        lockfile['_meta']['host-environment-markers'] = json.loads(c.out)
+    # Add default dependencies to lockfile.
+    for dep in results:
+        lockfile['default'].update({dep['name']: {'version': '=={0}'.format(dep['version'])}})
+        if not no_hashes:
+            lockfile['default'][dep['name']]['hashes'] = dep['hashes']
 
-        # Write out lockfile.
-        with open(project.lockfile_location, 'w') as f:
-            json.dump(lockfile, f, indent=4, separators=(',', ': '), sort_keys=True)
-            # Write newline at end of document. GH Issue #319.
-            f.write('\n')
+    # Run the PEP 508 checker in the virtualenv, add it to the lockfile.
+    c = delegator.run('"{0}" {1}'.format(which('python'), shellquote(pep508checker.__file__.rstrip('cdo'))))
+    lockfile['_meta']['host-environment-markers'] = json.loads(c.out)
 
-        # Purge the virtualenv download dir, for next time.
-        with spinner():
-            do_purge(downloads=True, bare=True)
+    # Write out the lockfile.
+    with open(project.lockfile_location, 'w') as f:
+        json.dump(lockfile, f, indent=4, separators=(',', ': '), sort_keys=True)
+        # Write newline at end of document. GH Issue #319.
+        f.write('\n')
 
-        click.echo('{0} Pipfile.lock{1}'.format(crayons.yellow('Updated'), crayons.yellow('!')), err=True)
+    click.echo('{0} Pipfile.lock{1}'.format(crayons.yellow('Updated'), crayons.yellow('!')), err=True)
 
 
 def activate_virtualenv(source=True):
diff --git a/pipenv/environments.py b/pipenv/environments.py
index 713cfee9..e86f48ac 100644
--- a/pipenv/environments.py
+++ b/pipenv/environments.py
@@ -26,7 +26,7 @@ PIPENV_MAX_DEPTH = int(os.environ.get('PIPENV_MAX_DEPTH', '3')) + 1
 PIPENV_USE_SYSTEM = os.environ.get('VIRTUAL_ENV') if 'PIPENV_IGNORE_VIRTUALENVS' not in os.environ else False
 
 # Tells Pipenv to use hashing mode.
-PIPENV_USE_HASHES = os.environ.get('PIPENV_USE_HASHES')
+PIPENV_USE_HASHES = True
 
 # Tells pipenv to skip case-checking (slow internet connections).
 PIPENV_SKIP_VALIDATION = os.environ.get('PIPENV_SKIP_VALIDATION')
