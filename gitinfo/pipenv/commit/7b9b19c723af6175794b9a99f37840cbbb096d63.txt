commit 7b9b19c723af6175794b9a99f37840cbbb096d63
Author: Dan Ryan <dan@danryan.co>
Date:   Tue May 15 18:07:19 2018 -0400

    Lock vcs refs properly
    
    - Still need to actually run setup.py
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/_compat.py b/pipenv/_compat.py
index 14326813..8ccf025a 100644
--- a/pipenv/_compat.py
+++ b/pipenv/_compat.py
@@ -5,6 +5,7 @@ Exposes a standard API that enables compatibility across python versions,
 operating systems, etc.
 """
 import functools
+import importlib
 import io
 import os
 import six
@@ -50,6 +51,24 @@ if six.PY2:
     class ResourceWarning(Warning):
         pass
 
+# -*- coding=utf-8 -*-
+
+
+def pip_import(module_path, subimport=None, old_path=None):
+    internal = 'pip._internal.{0}'.format(module_path)
+    old_path = old_path or module_path
+    pip9 = 'pip.{0}'.format(old_path)
+    try:
+        _tmp = importlib.import_module(internal)
+    except ImportError:
+        _tmp = importlib.import_module(pip9)
+    if subimport:
+        return getattr(_tmp, subimport, _tmp)
+    return _tmp
+
+
+vcs = pip_import('vcs', 'VcsSupport')
+
 
 class TemporaryDirectory(object):
     """Create and return a temporary directory.  This has the same
diff --git a/pipenv/core.py b/pipenv/core.py
index 92ae3293..dec3e103 100644
--- a/pipenv/core.py
+++ b/pipenv/core.py
@@ -16,6 +16,7 @@ import crayons
 import dotenv
 import delegator
 from .vendor import pexpect
+from first import first
 import pipfile
 from blindspin import spinner
 from requests.packages import urllib3
@@ -46,9 +47,11 @@ from .utils import (
     is_star,
     rmtree,
     split_argument,
+    extract_uri_from_vcs_dep,
 )
 from ._compat import (
     TemporaryDirectory,
+    vcs
 )
 from .import pep508checker, progress
 from .environments import (
@@ -1068,18 +1071,45 @@ def do_lock(
     pip_freeze = delegator.run(
         '{0} freeze'.format(escape_grouped_arguments(which_pip(allow_global=system)))
     ).out
+    vcs_registry = vcs()
     if vcs_deps:
+        vcs_uri_map = {extract_uri_from_vcs_dep(v): k for k, v in project.vcs_dev_packages.items()}
         for line in pip_freeze.strip().split('\n'):
             # if the line doesn't match a vcs dependency in the Pipfile,
             # ignore it
-            if not any(dep in line for dep in vcs_deps):
+            _vcs_match = first(_uri for _uri in vcs_uri_map.keys() if _uri in line)
+            if not _vcs_match:
                 continue
 
+            pipfile_name = vcs_uri_map[_vcs_match]
+            src_loc = os.path.join(project.virtualenv_location, pipfile_name)
+            pipfile_rev = project.vcs_packages[pipfile_name].get('ref', None)
+            _pip_uri = line.lstrip('-e ')
+            backend_name = str(_pip_uri.split('+', 1)[0])
+            backend = vcs_registry._registry[first(b for b in vcs_registry if b == backend_name)]
+            __vcs = backend(url=_pip_uri)
+            __target_rev = __vcs.make_rev_options(pipfile_rev)
+
             try:
                 installed = convert_deps_from_pip(line)
-                name = list(installed.keys())[0]
-                if is_vcs(installed[name]):
-                    lockfile['develop'].update(installed)
+                lock_name = first(installed.keys())
+                locked_rev = None
+                lockfile_src_loc = os.path.join(project.virtualenv_location, lock_name)
+                paths = set([loc for loc in [src_loc, lockfile_src_loc] if os.path.exists(loc)])
+                paths = list(paths)
+                if paths:
+                    # If the pipfile rev and the installed rev don't match
+                    if pipfile_rev != __vcs.get_url_rev()[1]:
+                        for _p in paths:
+                            __vcs.update(_p, __target_rev)
+                            locked_rev = __vcs.get_revision(_p)
+                else:
+                    __vcs.obtain(src_loc)
+                    __vcs.update(src_loc, __target_rev)
+                    locked_rev = __vcs.get_revision(src_loc)
+                if is_vcs(installed[lock_name]):
+                    installed[lock_name]['ref'] = locked_rev
+                    lockfile['develop'].update({pipfile_name: installed[lock_name]})
             except IndexError:
                 pass
     if write:
@@ -1132,21 +1162,45 @@ def do_lock(
     # TODO: be smarter about this.
     vcs_deps = convert_deps_to_pip(project.vcs_packages, project, r=False)
     if vcs_deps:
+        vcs_uri_map = {extract_uri_from_vcs_dep(v): k for k, v in project.vcs_packages.items()}
         for line in pip_freeze.strip().split('\n'):
             # if the line doesn't match a vcs dependency in the Pipfile,
             # ignore it
-            if not any(dep in line for dep in vcs_deps):
+            _vcs_match = first(_uri for _uri in vcs_uri_map.keys() if _uri in line)
+            if not _vcs_match:
                 continue
 
+            pipfile_name = vcs_uri_map[_vcs_match]
+            src_loc = os.path.join(project.virtualenv_location, pipfile_name)
+            pipfile_rev = project.vcs_packages[pipfile_name].get('ref', None)
+            _pip_uri = line.lstrip('-e ')
+            backend_name = str(_pip_uri.split('+', 1)[0])
+            backend = vcs_registry._registry[first(b for b in vcs_registry if b == backend_name)]
+            __vcs = backend(url=_pip_uri)
+            __target_rev = __vcs.make_rev_options(pipfile_rev)
+
             try:
                 installed = convert_deps_from_pip(line)
-                name = list(installed.keys())[0]
-                if is_vcs(installed[name]):
-                    # Convert name to PEP 423 name.
-                    installed = {pep423_name(name): installed[name]}
-                    lockfile['default'].update(installed)
+                lock_name = first(installed.keys())
+                locked_rev = None
+                lockfile_src_loc = os.path.join(project.virtualenv_location, lock_name)
+                paths = [loc for loc in [src_loc, lockfile_src_loc] if os.path.exists(loc)]
+                if paths:
+                    # If the pipfile rev and the installed rev don't match
+                    if pipfile_rev != __vcs.get_url_rev()[1]:
+                        for _p in paths:
+                            __vcs.update(_p, __target_rev)
+                            locked_rev = __vcs.get_revision(_p)
+                else:
+                    __vcs.obtain(src_loc)
+                    __vcs.update(src_loc, __target_rev)
+                    locked_rev = __vcs.get_revision(src_loc)
+                if is_vcs(installed[lock_name]):
+                    installed[lock_name]['ref'] = locked_rev
+                    lockfile['default'].update({pipfile_name: installed[lock_name]})
             except IndexError:
                 pass
+
     # Support for --keep-outdatedâ€¦
     if keep_outdated:
         for section_name, section in (
diff --git a/pipenv/project.py b/pipenv/project.py
index 2294d43f..76bcdadc 100644
--- a/pipenv/project.py
+++ b/pipenv/project.py
@@ -497,41 +497,41 @@ class Project(object):
     def lockfile_content(self):
         return self.load_lockfile()
 
-    @property
-    def editable_packages(self):
+    def _get_editable_packages(self, dev=False):
+        section = 'dev-packages' if dev else 'packages'
         packages = {
             k: v
-            for k, v in self.parsed_pipfile.get('packages', {}).items()
+            for k, v in self.parsed_pipfile.get(section, {}).items()
             if is_editable(v)
         }
         return packages
 
-    @property
-    def editable_dev_packages(self):
+    def _get_vcs_packages(self, dev=False):
+        section = 'dev-packages' if dev else 'packages'
         packages = {
             k: v
-            for k, v in self.parsed_pipfile.get('dev-packages', {}).items()
-            if is_editable(v)
+            for k, v in self.parsed_pipfile.get(section, {}).items()
+            if is_vcs(v) or is_vcs(k)
         }
-        return packages
+        return packages or {}
+
+    @property
+    def editable_packages(self):
+        return self._get_editable_packages(dev=False)
+
+    @property
+    def editable_dev_packages(self):
+        return self._get_editable_packages(dev=True)
 
     @property
     def vcs_packages(self):
         """Returns a list of VCS packages, for not pip-tools to consume."""
-        ps = {}
-        for k, v in self.parsed_pipfile.get('packages', {}).items():
-            if is_vcs(v) or is_vcs(k):
-                ps.update({k: v})
-        return ps
+        return self._get_vcs_packages(dev=False)
 
     @property
     def vcs_dev_packages(self):
         """Returns a list of VCS packages, for not pip-tools to consume."""
-        ps = {}
-        for k, v in self.parsed_pipfile.get('dev-packages', {}).items():
-            if is_vcs(v) or is_vcs(k):
-                ps.update({k: v})
-        return ps
+        return self._get_vcs_packages(dev=True)
 
     @property
     def all_packages(self):
diff --git a/pipenv/utils.py b/pipenv/utils.py
index 973b1c83..2ba75154 100644
--- a/pipenv/utils.py
+++ b/pipenv/utils.py
@@ -1358,3 +1358,10 @@ def safe_expandvars(value):
     if isinstance(value, six.string_types):
         return os.path.expandvars(value)
     return value
+
+
+def extract_uri_from_vcs_dep(dep):
+    valid_keys = VCS_LIST + ('uri', 'file')
+    if hasattr(dep, 'keys'):
+        return first(dep[k] for k in valid_keys if k in dep) or None
+    return None
