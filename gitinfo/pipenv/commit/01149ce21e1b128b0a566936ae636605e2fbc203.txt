commit 01149ce21e1b128b0a566936ae636605e2fbc203
Author: Dan Ryan <dan@danryan.co>
Date:   Fri May 18 00:23:14 2018 -0400

    Use vendor scripts for import rewrites
    
     - Ditch patches
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/tasks/vendoring/patches/patched/_post-pip-update-imports.patch b/tasks/vendoring/patches/patched/_post-pip-update-imports.patch
deleted file mode 100644
index b115809e..00000000
--- a/tasks/vendoring/patches/patched/_post-pip-update-imports.patch
+++ /dev/null
@@ -1,176 +0,0 @@
-diff --git a/pipenv/patched/notpip/__init__.py b/pipenv/patched/notpip/__init__.py
-index 6e580da..5957d31 100644
---- a/pipenv/patched/notpip/__init__.py
-+++ b/pipenv/patched/notpip/__init__.py
-@@ -17,7 +17,7 @@ import re
- # the stderr output) and is just plain annoying in normal usage.  I don't want
- # to add socks as yet another dependency for pip, nor do I want to allow-stder
- # in the DEP-8 tests, so just suppress the warning.  pdb tells me this has to
--# be done before the import of pip.vcs.
-+# be done before the import of notpip.vcs.
- from notpip._vendor.urllib3.exceptions import DependencyWarning
- warnings.filterwarnings("ignore", category=DependencyWarning)  # noqa
- 
-diff --git a/pipenv/patched/notpip/_vendor/requests/__init__.py b/pipenv/patched/notpip/_vendor/requests/__init__.py
-index d679f2f..33667fd 100644
---- a/pipenv/patched/notpip/_vendor/requests/__init__.py
-+++ b/pipenv/patched/notpip/_vendor/requests/__init__.py
-@@ -40,8 +40,8 @@ is at <http://python-requests.org>.
- :license: Apache 2.0, see LICENSE for more details.
- """
- 
--from pip._vendor import urllib3
--from pip._vendor import chardet
-+from notpip._vendor import urllib3
-+from notpip._vendor import chardet
- import warnings
- from .exceptions import RequestsDependencyWarning
- 
-@@ -81,13 +81,13 @@ except (AssertionError, ValueError):
- 
- # Attempt to enable urllib3's SNI support, if possible
- # try:
--#     from pip._vendor.urllib3.contrib import pyopenssl
-+#     from notpip._vendor.urllib3.contrib import pyopenssl
- #     pyopenssl.inject_into_urllib3()
- # except ImportError:
- #     pass
- 
- # urllib3's DependencyWarnings should be silenced.
--from pip._vendor.urllib3.exceptions import DependencyWarning
-+from notpip._vendor.urllib3.exceptions import DependencyWarning
- warnings.simplefilter('ignore', DependencyWarning)
- 
- from .__version__ import __title__, __description__, __url__, __version__
-diff --git a/pipenv/patched/notpip/_vendor/requests/adapters.py b/pipenv/patched/notpip/_vendor/requests/adapters.py
-index 5787638..4cdbf7e 100644
---- a/pipenv/patched/notpip/_vendor/requests/adapters.py
-+++ b/pipenv/patched/notpip/_vendor/requests/adapters.py
-@@ -11,20 +11,20 @@ and maintain connections.
- import os.path
- import socket
- 
--from pip._vendor.urllib3.poolmanager import PoolManager, proxy_from_url
--from pip._vendor.urllib3.response import HTTPResponse
--from pip._vendor.urllib3.util import Timeout as TimeoutSauce
--from pip._vendor.urllib3.util.retry import Retry
--from pip._vendor.urllib3.exceptions import ClosedPoolError
--from pip._vendor.urllib3.exceptions import ConnectTimeoutError
--from pip._vendor.urllib3.exceptions import HTTPError as _HTTPError
--from pip._vendor.urllib3.exceptions import MaxRetryError
--from pip._vendor.urllib3.exceptions import NewConnectionError
--from pip._vendor.urllib3.exceptions import ProxyError as _ProxyError
--from pip._vendor.urllib3.exceptions import ProtocolError
--from pip._vendor.urllib3.exceptions import ReadTimeoutError
--from pip._vendor.urllib3.exceptions import SSLError as _SSLError
--from pip._vendor.urllib3.exceptions import ResponseError
-+from notpip._vendor.urllib3.poolmanager import PoolManager, proxy_from_url
-+from notpip._vendor.urllib3.response import HTTPResponse
-+from notpip._vendor.urllib3.util import Timeout as TimeoutSauce
-+from notpip._vendor.urllib3.util.retry import Retry
-+from notpip._vendor.urllib3.exceptions import ClosedPoolError
-+from notpip._vendor.urllib3.exceptions import ConnectTimeoutError
-+from notpip._vendor.urllib3.exceptions import HTTPError as _HTTPError
-+from notpip._vendor.urllib3.exceptions import MaxRetryError
-+from notpip._vendor.urllib3.exceptions import NewConnectionError
-+from notpip._vendor.urllib3.exceptions import ProxyError as _ProxyError
-+from notpip._vendor.urllib3.exceptions import ProtocolError
-+from notpip._vendor.urllib3.exceptions import ReadTimeoutError
-+from notpip._vendor.urllib3.exceptions import SSLError as _SSLError
-+from notpip._vendor.urllib3.exceptions import ResponseError
- 
- from .models import Response
- from .compat import urlparse, basestring
-@@ -38,7 +38,7 @@ from .exceptions import (ConnectionError, ConnectTimeout, ReadTimeout, SSLError,
- from .auth import _basic_auth_str
- 
- try:
--    from pip._vendor.urllib3.contrib.socks import SOCKSProxyManager
-+    from notpip._vendor.urllib3.contrib.socks import SOCKSProxyManager
- except ImportError:
-     def SOCKSProxyManager(*args, **kwargs):
-         raise InvalidSchema("Missing dependencies for SOCKS support.")
-diff --git a/pipenv/patched/notpip/_vendor/requests/certs.py b/pipenv/patched/notpip/_vendor/requests/certs.py
-index 06a594e..2439625 100644
---- a/pipenv/patched/notpip/_vendor/requests/certs.py
-+++ b/pipenv/patched/notpip/_vendor/requests/certs.py
-@@ -12,7 +12,7 @@ If you are packaging Requests, e.g., for a Linux distribution or a managed
- environment, you can change the definition of where() to return a separately
- packaged CA bundle.
- """
--from pip._vendor.certifi import where
-+from notpip._vendor.certifi import where
- 
- if __name__ == '__main__':
-     print(where())
-diff --git a/pipenv/patched/notpip/_vendor/requests/compat.py b/pipenv/patched/notpip/_vendor/requests/compat.py
-index 9c7d6d8..7a9ba56 100644
---- a/pipenv/patched/notpip/_vendor/requests/compat.py
-+++ b/pipenv/patched/notpip/_vendor/requests/compat.py
-@@ -8,7 +8,7 @@ This module handles import compatibility issues between Python 2 and
- Python 3.
- """
- 
--from pip._vendor import chardet
-+from notpip._vendor import chardet
- 
- import sys
- 
-@@ -44,7 +44,7 @@ if is_py2:
-     from Cookie import Morsel
-     from StringIO import StringIO
- 
--    from pip._vendor.urllib3.packages.ordered_dict import OrderedDict
-+    from notpip._vendor.urllib3.packages.ordered_dict import OrderedDict
- 
-     builtin_str = str
-     bytes = str
-diff --git a/pipenv/patched/notpip/_vendor/requests/exceptions.py b/pipenv/patched/notpip/_vendor/requests/exceptions.py
-index 3e5d0b2..c116f8e 100644
---- a/pipenv/patched/notpip/_vendor/requests/exceptions.py
-+++ b/pipenv/patched/notpip/_vendor/requests/exceptions.py
-@@ -6,7 +6,7 @@ requests.exceptions
- 
- This module contains the set of Requests' exceptions.
- """
--from pip._vendor.urllib3.exceptions import HTTPError as BaseHTTPError
-+from notpip._vendor.urllib3.exceptions import HTTPError as BaseHTTPError
- 
- 
- class RequestException(IOError):
-diff --git a/pipenv/patched/notpip/_vendor/requests/help.py b/pipenv/patched/notpip/_vendor/requests/help.py
-index 7c4b193..96f656f 100644
---- a/pipenv/patched/notpip/_vendor/requests/help.py
-+++ b/pipenv/patched/notpip/_vendor/requests/help.py
-@@ -6,9 +6,9 @@ import platform
- import sys
- import ssl
- 
--from pip._vendor import idna
--from pip._vendor import urllib3
--from pip._vendor import chardet
-+from notpip._vendor import idna
-+from notpip._vendor import urllib3
-+from notpip._vendor import chardet
- 
- from . import __version__ as requests_version
- 
-diff --git a/pipenv/patched/notpip/_vendor/requests/models.py b/pipenv/patched/notpip/_vendor/requests/models.py
-index 4254fbd..a7efaa0 100644
---- a/pipenv/patched/notpip/_vendor/requests/models.py
-+++ b/pipenv/patched/notpip/_vendor/requests/models.py
-@@ -16,10 +16,10 @@ import sys
- # such as in Embedded Python. See https://github.com/requests/requests/issues/3578.
- import encodings.idna
- 
--from pip._vendor.urllib3.fields import RequestField
--from pip._vendor.urllib3.filepost import encode_multipart_formdata
--from pip._vendor.urllib3.util import parse_url
--from pip._vendor.urllib3.exceptions import (
-+from notpip._vendor.urllib3.fields import RequestField
-+from notpip._vendor.urllib3.filepost import encode_multipart_formdata
-+from notpip._vendor.urllib3.util import parse_url
-+from notpip._vendor.urllib3.exceptions import (
-     DecodeError, ReadTimeoutError, ProtocolError, LocationParseError)
- 
- from io import UnsupportedOperation
diff --git a/tasks/vendoring/patches/patched/_post-update-pkg-resources.patch b/tasks/vendoring/patches/patched/_post-update-pkg-resources.patch
deleted file mode 100644
index b30bb2d2..00000000
--- a/tasks/vendoring/patches/patched/_post-update-pkg-resources.patch
+++ /dev/null
@@ -1,137 +0,0 @@
-diff --git a/pipenv/patched/notpip/_vendor/pkg_resources/__init__.py b/pipenv/patched/notpip/_vendor/pkg_resources/__init__.py
-index eed9228..7b7da00 100644
---- a/pipenv/patched/notpip/_vendor/pkg_resources/__init__.py
-+++ b/pipenv/patched/notpip/_vendor/pkg_resources/__init__.py
-@@ -74,13 +74,8 @@ __import__('notpip._vendor.packaging.specifiers')
- __import__('notpip._vendor.packaging.requirements')
- __import__('notpip._vendor.packaging.markers')
- 
--
- if (3, 0) < sys.version_info < (3, 3):
--    msg = (
--        "Support for Python 3.0-3.2 has been dropped. Future versions "
--        "will fail here."
--    )
--    warnings.warn(msg)
-+    raise RuntimeError("Python 3.3 or later is required")
- 
- # declare some globals that will be defined later to
- # satisfy the linters.
-@@ -791,7 +786,7 @@ class WorkingSet(object):
-         self._added_new(dist)
- 
-     def resolve(self, requirements, env=None, installer=None,
--            replace_conflicting=False):
-+                replace_conflicting=False, extras=None):
-         """List all distributions needed to (recursively) meet `requirements`
- 
-         `requirements` must be a sequence of ``Requirement`` objects.  `env`,
-@@ -807,6 +802,12 @@ class WorkingSet(object):
-         the wrong version.  Otherwise, if an `installer` is supplied it will be
-         invoked to obtain the correct version of the requirement and activate
-         it.
-+
-+        `extras` is a list of the extras to be used with these requirements.
-+        This is important because extra requirements may look like `my_req;
-+        extra = "my_extra"`, which would otherwise be interpreted as a purely
-+        optional requirement.  Instead, we want to be able to assert that these
-+        requirements are truly required.
-         """
- 
-         # set up the stack
-@@ -830,7 +831,7 @@ class WorkingSet(object):
-                 # Ignore cyclic or redundant dependencies
-                 continue
- 
--            if not req_extras.markers_pass(req):
-+            if not req_extras.markers_pass(req, extras):
-                 continue
- 
-             dist = best.get(req.key)
-@@ -1009,7 +1010,7 @@ class _ReqExtras(dict):
-     Map each requirement to the extras that demanded it.
-     """
- 
--    def markers_pass(self, req):
-+    def markers_pass(self, req, extras=None):
-         """
-         Evaluate markers for req against each extra that
-         demanded it.
-@@ -1019,7 +1020,7 @@ class _ReqExtras(dict):
-         """
-         extra_evals = (
-             req.marker.evaluate({'extra': extra})
--            for extra in self.get(req, ()) + (None,)
-+            for extra in self.get(req, ()) + (extras or (None,))
-         )
-         return not req.marker or any(extra_evals)
- 
-@@ -1956,6 +1957,12 @@ def find_eggs_in_zip(importer, path_item, only=False):
-             subpath = os.path.join(path_item, subitem)
-             for dist in find_eggs_in_zip(zipimport.zipimporter(subpath), subpath):
-                 yield dist
-+        elif subitem.lower().endswith('.dist-info'):
-+            subpath = os.path.join(path_item, subitem)
-+            submeta = EggMetadata(zipimport.zipimporter(subpath))
-+            submeta.egg_info = subpath
-+            yield Distribution.from_location(path_item, subitem, submeta)
-+
- 
- 
- register_finder(zipimport.zipimporter, find_eggs_in_zip)
-@@ -2118,6 +2125,10 @@ def _rebuild_mod_path(orig_path, package_name, module):
-         parts = path_parts[:-module_parts]
-         return safe_sys_path_index(_normalize_cached(os.sep.join(parts)))
- 
-+    if not isinstance(orig_path, list):
-+        # Is this behavior useful when module.__path__ is not a list?
-+        return
-+
-     orig_path.sort(key=position_in_sys_path)
-     module.__path__[:] = [_normalize_cached(p) for p in orig_path]
- 
-@@ -2304,8 +2315,14 @@ class EntryPoint(object):
-     def require(self, env=None, installer=None):
-         if self.extras and not self.dist:
-             raise UnknownExtra("Can't require() without a distribution", self)
-+
-+        # Get the requirements for this entry point with all its extras and
-+        # then resolve them. We have to pass `extras` along when resolving so
-+        # that the working set knows what extras we want. Otherwise, for
-+        # dist-info distributions, the working set will assume that the
-+        # requirements for that extra are purely optional and skip over them.
-         reqs = self.dist.requires(self.extras)
--        items = working_set.resolve(reqs, env, installer)
-+        items = working_set.resolve(reqs, env, installer, extras=self.extras)
-         list(map(working_set.add, items))
- 
-     pattern = re.compile(
-@@ -3010,9 +3027,11 @@ def _initialize(g=globals()):
-     "Set up global resource manager (deliberately not state-saved)"
-     manager = ResourceManager()
-     g['_manager'] = manager
--    for name in dir(manager):
--        if not name.startswith('_'):
--            g[name] = getattr(manager, name)
-+    g.update(
-+        (name, getattr(manager, name))
-+        for name in dir(manager)
-+        if not name.startswith('_')
-+    )
- 
- 
- @_call_aside
-@@ -3041,10 +3060,10 @@ def _initialize_master_working_set():
-     # ensure that all distributions added to the working set in the future
-     # (e.g. by calling ``require()``) will get activated as well,
-     # with higher priority (replace=True).
--    dist = None  # ensure dist is defined for del dist below
--    for dist in working_set:
-+    tuple(
-         dist.activate(replace=False)
--    del dist
-+        for dist in working_set
-+    )
-     add_activation_listener(lambda dist: dist.activate(replace=True), existing=False)
-     working_set.entries = []
-     # match order
