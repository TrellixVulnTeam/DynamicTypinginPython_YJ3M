commit 729e790ef4dfa91ac9db789b7621039d2a4c264a
Author: Dan Ryan <dan@danryan.co>
Date:   Tue Mar 19 01:12:54 2019 -0400

    Update pip version
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/patched/patched.txt b/pipenv/patched/patched.txt
index e7dadd8e..41cb516e 100644
--- a/pipenv/patched/patched.txt
+++ b/pipenv/patched/patched.txt
@@ -2,4 +2,4 @@ safety
 crayons==0.1.2
 pipfile==0.0.2
 pip-tools==3.1.0
-pip==18.1
+pip==19.0.3
diff --git a/tasks/vendoring/patches/patched/_post-pip-update-pep425tags.patch b/tasks/vendoring/patches/patched/_post-pip-update-pep425tags.patch
index fce6ae89..b4ffbc9f 100644
--- a/tasks/vendoring/patches/patched/_post-pip-update-pep425tags.patch
+++ b/tasks/vendoring/patches/patched/_post-pip-update-pep425tags.patch
@@ -1,8 +1,8 @@
 diff --git a/pipenv/patched/notpip/_internal/pep425tags.py b/pipenv/patched/notpip/_internal/pep425tags.py
-index f3b9b5b4..182c1c88 100644
+index 3c760ca3..3b11b965 100644
 --- a/pipenv/patched/notpip/_internal/pep425tags.py
 +++ b/pipenv/patched/notpip/_internal/pep425tags.py
-@@ -159,7 +159,7 @@ def is_manylinux1_compatible():
+@@ -178,7 +178,7 @@ def is_manylinux1_compatible():
          pass
  
      # Check glibc version. CentOS 5 uses glibc 2.5.
@@ -10,4 +10,13 @@ index f3b9b5b4..182c1c88 100644
 +    return pipenv.patched.notpip._internal.utils.glibc.have_compatible_glibc(2, 5)
  
  
+ def is_manylinux2010_compatible():
+@@ -196,7 +196,7 @@ def is_manylinux2010_compatible():
+         pass
+ 
+     # Check glibc version. CentOS 6 uses glibc 2.12.
+-    return pip._internal.utils.glibc.have_compatible_glibc(2, 12)
++    return pipenv.patched.notpip._internal.utils.glibc.have_compatible_glibc(2, 12)
+ 
+ 
  def get_darwin_arches(major, minor, machine):
diff --git a/tasks/vendoring/patches/patched/_post-pip-update-pypi-uri.patch b/tasks/vendoring/patches/patched/_post-pip-update-pypi-uri.patch
index 99269a90..93f7ccbc 100644
--- a/tasks/vendoring/patches/patched/_post-pip-update-pypi-uri.patch
+++ b/tasks/vendoring/patches/patched/_post-pip-update-pypi-uri.patch
@@ -12,7 +12,7 @@ index 2406be21..7a87cdcf 100644
  
  class PackageIndex(object):
 diff --git a/pipenv/patched/notpip/_vendor/distlib/locators.py b/pipenv/patched/notpip/_vendor/distlib/locators.py
-index 11d26361..cb05b184 100644
+index 5c655c3e..a7ed9469 100644
 --- a/pipenv/patched/notpip/_vendor/distlib/locators.py
 +++ b/pipenv/patched/notpip/_vendor/distlib/locators.py
 @@ -36,7 +36,7 @@ logger = logging.getLogger(__name__)
@@ -33,7 +33,7 @@ index 11d26361..cb05b184 100644
                  is_downloadable, is_wheel, compatible, basename)
  
      def prefer_url(self, url1, url2):
-@@ -1046,7 +1046,7 @@ class AggregatingLocator(Locator):
+@@ -1049,7 +1049,7 @@ class AggregatingLocator(Locator):
  # versions which don't conform to PEP 426 / PEP 440.
  default_locator = AggregatingLocator(
                      JSONLocator(),
diff --git a/tasks/vendoring/patches/patched/_post-pip-update-requests-imports.patch b/tasks/vendoring/patches/patched/_post-pip-update-requests-imports.patch
index e2f4f7de..79e12659 100644
--- a/tasks/vendoring/patches/patched/_post-pip-update-requests-imports.patch
+++ b/tasks/vendoring/patches/patched/_post-pip-update-requests-imports.patch
@@ -1,5 +1,5 @@
 diff --git a/pipenv/patched/notpip/_vendor/requests/packages.py b/pipenv/patched/notpip/_vendor/requests/packages.py
-index 9582fa7..928d1bb 100644
+index 9582fa73..258c89ed 100644
 --- a/pipenv/patched/notpip/_vendor/requests/packages.py
 +++ b/pipenv/patched/notpip/_vendor/requests/packages.py
 @@ -4,13 +4,13 @@ import sys
diff --git a/tasks/vendoring/patches/patched/pip18.patch b/tasks/vendoring/patches/patched/pip19.patch
similarity index 74%
rename from tasks/vendoring/patches/patched/pip18.patch
rename to tasks/vendoring/patches/patched/pip19.patch
index f4e607c1..dc45c445 100644
--- a/tasks/vendoring/patches/patched/pip18.patch
+++ b/tasks/vendoring/patches/patched/pip19.patch
@@ -1,16 +1,8 @@
 diff --git a/pipenv/patched/pip/_internal/download.py b/pipenv/patched/pip/_internal/download.py
-index 96f3b65c..cc5b3d15 100644
+index 2bbe1762..872af328 100644
 --- a/pipenv/patched/pip/_internal/download.py
 +++ b/pipenv/patched/pip/_internal/download.py
-@@ -19,6 +19,7 @@ from pip._vendor.lockfile import LockError
- from pip._vendor.requests.adapters import BaseAdapter, HTTPAdapter
- from pip._vendor.requests.auth import AuthBase, HTTPBasicAuth
- from pip._vendor.requests.models import CONTENT_CHUNK_SIZE, Response
-+from pip._vendor.requests.sessions import Session
- from pip._vendor.requests.structures import CaseInsensitiveDict
- from pip._vendor.requests.utils import get_netrc_auth
- # NOTE: XMLRPC Client is not annotated in typeshed as on 2017-07-17, which is
-@@ -69,7 +70,7 @@ def user_agent():
+@@ -77,7 +77,7 @@ def user_agent():
      Return a string representing the user agent.
      """
      data = {
@@ -19,78 +11,11 @@ index 96f3b65c..cc5b3d15 100644
          "python": platform.python_version(),
          "implementation": {
              "name": platform.python_implementation(),
-diff --git a/pipenv/patched/pip/_internal/utils/temp_dir.py b/pipenv/patched/pip/_internal/utils/temp_dir.py
-index edc506bf..84d57dac 100644
---- a/pipenv/patched/pip/_internal/utils/temp_dir.py
-+++ b/pipenv/patched/pip/_internal/utils/temp_dir.py
-@@ -3,8 +3,10 @@ from __future__ import absolute_import
- import logging
- import os.path
- import tempfile
-+import warnings
- 
- from pip._internal.utils.misc import rmtree
-+from pipenv.vendor.vistir.compat import finalize, ResourceWarning
- 
- logger = logging.getLogger(__name__)
- 
-@@ -45,6 +47,20 @@ class TempDirectory(object):
-         self.path = path
-         self.delete = delete
-         self.kind = kind
-+        self._finalizer = None
-+        if path:
-+            self._register_finalizer()
-+
-+    def _register_finalizer(self):
-+        if self.delete and self.path:
-+            self._finalizer = finalize(
-+                self,
-+                self._cleanup,
-+                self.path,
-+                warn_message=None
-+            )
-+        else:
-+            self._finalizer = None
- 
-     def __repr__(self):
-         return "<{} {!r}>".format(self.__class__.__name__, self.path)
-@@ -72,11 +88,27 @@ class TempDirectory(object):
-         self.path = os.path.realpath(
-             tempfile.mkdtemp(prefix="pip-{}-".format(self.kind))
-         )
-+        self._register_finalizer()
-         logger.debug("Created temporary directory: {}".format(self.path))
- 
-+    @classmethod
-+    def _cleanup(cls, name, warn_message=None):
-+        try:
-+            rmtree(name)
-+        except OSError:
-+            pass
-+        else:
-+            if warn_message:
-+                warnings.warn(warn_message, ResourceWarning)
-+
-     def cleanup(self):
-         """Remove the temporary directory created and reset state
-         """
--        if self.path is not None and os.path.exists(self.path):
--            rmtree(self.path)
--        self.path = None
-+        if getattr(self._finalizer, "detach", None) and self._finalizer.detach():
-+            if os.path.exists(self.path):
-+                try:
-+                    rmtree(self.path)
-+                except OSError:
-+                    pass
-+                else:
-+                    self.path = None
 diff --git a/pipenv/patched/pip/_internal/index.py b/pipenv/patched/pip/_internal/index.py
-index 8c2f24f1..cdd48874 100644
+index 9eda3a35..67dd952c 100644
 --- a/pipenv/patched/pip/_internal/index.py
 +++ b/pipenv/patched/pip/_internal/index.py
-@@ -246,6 +246,9 @@ class PackageFinder(object):
+@@ -331,6 +331,9 @@ class PackageFinder(object):
          # The Session we'll use to make requests
          self.session = session
  
@@ -100,9 +25,9 @@ index 8c2f24f1..cdd48874 100644
          # The valid tags to check potential found wheel candidates against
          self.valid_tags = get_supported(
              versions=versions,
-@@ -298,6 +301,25 @@ class PackageFinder(object):
+@@ -369,6 +372,23 @@ class PackageFinder(object):
              )
-             self.dependency_links.extend(links)
+         return "\n".join(lines)
  
 +    @staticmethod
 +    def get_extras_links(links):
@@ -119,23 +44,23 @@ index 8c2f24f1..cdd48874 100644
 +                extras[link[1:-1]] = current_list
 +            else:
 +                current_list.append(link)
-+
 +        return extras
-+
 +
      @staticmethod
      def _sort_locations(locations, expand_dir=False):
-         """
-@@ -350,7 +372,7 @@ class PackageFinder(object):
+         # type: (Sequence[str], bool) -> Tuple[List[str], List[str]]
+@@ -427,8 +447,8 @@ class PackageFinder(object):
  
          return files, urls
  
 -    def _candidate_sort_key(self, candidate):
+-        # type: (InstallationCandidate) -> CandidateSortingKey
 +    def _candidate_sort_key(self, candidate, ignore_compatibility=True):
++        # type: (InstallationCandidate, bool) -> CandidateSortingKey
          """
          Function used to generate link sort key for link tuples.
          The greater the return value, the more preferred it is.
-@@ -370,14 +392,19 @@ class PackageFinder(object):
+@@ -448,14 +468,18 @@ class PackageFinder(object):
          if candidate.location.is_wheel:
              # can raise InvalidWheelFilename
              wheel = Wheel(candidate.location.filename)
@@ -153,11 +78,10 @@ index 8c2f24f1..cdd48874 100644
 +                pri = -(wheel.support_index_min(tags=tags))
 +            except TypeError:
 +                pri = -(support_num)
-+
              if wheel.build_tag is not None:
                  match = re.match(r'^(\d+)(.*)$', wheel.build_tag)
                  build_tag_groups = match.groups()
-@@ -528,7 +555,10 @@ class PackageFinder(object):
+@@ -608,7 +632,10 @@ class PackageFinder(object):
  
          page_versions = []
          for page in self._get_pages(url_locations, project_name):
@@ -169,96 +93,90 @@ index 8c2f24f1..cdd48874 100644
              with indent_log():
                  page_versions.extend(
                      self._package_versions(page.iter_links(), search)
-@@ -562,7 +592,7 @@ class PackageFinder(object):
-             dependency_versions
-         )
+@@ -628,8 +655,8 @@ class PackageFinder(object):
+         # This is an intentional priority ordering
+         return file_versions + find_links_versions + page_versions
  
 -    def find_requirement(self, req, upgrade):
+-        # type: (InstallRequirement, bool) -> Optional[Link]
 +    def find_requirement(self, req, upgrade, ignore_compatibility=False):
++        # type: (InstallRequirement, bool, bool) -> Optional[Link]
          """Try to find a Link matching req
  
          Expects req, an InstallRequirement and upgrade, a boolean
-@@ -672,7 +702,10 @@ class PackageFinder(object):
-                 continue
-             seen.add(location)
- 
--            page = self._get_page(location)
-+            try:
-+                page = self._get_page(location)
-+            except requests.HTTPError:
-+                continue
-             if page is None:
-                 continue
- 
-@@ -709,7 +742,7 @@ class PackageFinder(object):
+@@ -784,8 +811,8 @@ class PackageFinder(object):
              logger.debug('Skipping link %s; %s', link, reason)
              self.logged_links.add(link)
  
 -    def _link_package_versions(self, link, search):
+-        # type: (Link, Search) -> Optional[InstallationCandidate]
 +    def _link_package_versions(self, link, search, ignore_compatibility=True):
++        # type: (Link, Search, bool) -> Optional[InstallationCandidate]
          """Return an InstallationCandidate or None"""
          version = None
          if link.egg_fragment:
-@@ -725,12 +758,12 @@ class PackageFinder(object):
+@@ -801,12 +828,12 @@ class PackageFinder(object):
                      link, 'unsupported archive format: %s' % ext,
                  )
-                 return
--            if "binary" not in search.formats and ext == wheel_ext:
-+            if "binary" not in search.formats and ext == wheel_ext and not ignore_compatibility:
+                 return None
+-            if "binary" not in search.formats and ext == WHEEL_EXTENSION:
++            if "binary" not in search.formats and ext == WHEEL_EXTENSION and not ignore_compatibility:
                  self._log_skipped_link(
                      link, 'No binaries permitted for %s' % search.supplied,
                  )
-                 return
+                 return None
 -            if "macosx10" in link.path and ext == '.zip':
 +            if "macosx10" in link.path and ext == '.zip' and not ignore_compatibility:
                  self._log_skipped_link(link, 'macosx10 one')
-                 return
-             if ext == wheel_ext:
-@@ -744,7 +777,7 @@ class PackageFinder(object):
+                 return None
+             if ext == WHEEL_EXTENSION:
+@@ -820,7 +847,7 @@ class PackageFinder(object):
                          link, 'wrong project name (not %s)' % search.supplied)
-                     return
+                     return None
  
 -                if not wheel.supported(self.valid_tags):
 +                if not wheel.supported(self.valid_tags) and not ignore_compatibility:
                      self._log_skipped_link(
                          link, 'it is not compatible with this Python')
-                     return
-@@ -780,14 +813,14 @@ class PackageFinder(object):
+                     return None
+@@ -856,14 +883,14 @@ class PackageFinder(object):
                           link.filename, link.requires_python)
              support_this_python = True
  
 -        if not support_this_python:
 +        if not support_this_python and not ignore_compatibility:
-             logger.debug("The package %s is incompatible with the python"
-                          "version in use. Acceptable python versions are:%s",
+             logger.debug("The package %s is incompatible with the python "
+                          "version in use. Acceptable python versions are: %s",
                           link, link.requires_python)
-             return
+             return None
          logger.debug('Found link %s, version: %s', link, version)
  
 -        return InstallationCandidate(search.supplied, version, link)
 +        return InstallationCandidate(search.supplied, version, link, link.requires_python)
  
-     def _get_page(self, link):
-         return _get_html_page(link, session=self.session)
+ 
+ def _find_name_version_sep(egg_info, canonical_name):
 diff --git a/pipenv/patched/pip/_internal/models/candidate.py b/pipenv/patched/pip/_internal/models/candidate.py
-index c736de6c..a78566c1 100644
+index 4475458a..6748957d 100644
 --- a/pipenv/patched/pip/_internal/models/candidate.py
 +++ b/pipenv/patched/pip/_internal/models/candidate.py
-@@ -7,10 +7,11 @@ class InstallationCandidate(KeyBasedCompareMixin):
+@@ -13,11 +13,12 @@ class InstallationCandidate(KeyBasedCompareMixin):
      """Represents a potential "candidate" for installation.
      """
  
 -    def __init__(self, project, version, location):
+-        # type: (Any, str, Link) -> None
 +    def __init__(self, project, version, location, requires_python=None):
++        # type: (Any, str, Link, Any) -> None
          self.project = project
-         self.version = parse_version(version)
+         self.version = parse_version(version)  # type: _BaseVersion
          self.location = location
 +        self.requires_python = requires_python
  
          super(InstallationCandidate, self).__init__(
              key=(self.project, self.version, self.location),
 diff --git a/pipenv/patched/pip/_internal/operations/prepare.py b/pipenv/patched/pip/_internal/operations/prepare.py
-index 104bea33..ecf78b9a 100644
+index 4f31dd5a..ed0c86b2 100644
 --- a/pipenv/patched/pip/_internal/operations/prepare.py
 +++ b/pipenv/patched/pip/_internal/operations/prepare.py
 @@ -17,7 +17,7 @@ from pip._internal.exceptions import (
@@ -267,27 +185,12 @@ index 104bea33..ecf78b9a 100644
  from pip._internal.utils.logging import indent_log
 -from pip._internal.utils.misc import display_path, normalize_path
 +from pip._internal.utils.misc import display_path, normalize_path, rmtree
+ from pip._internal.utils.typing import MYPY_CHECK_RUNNING
  from pip._internal.vcs import vcs
  
- logger = logging.getLogger(__name__)
-@@ -123,7 +123,11 @@ class IsSDist(DistAbstraction):
-                     " and ".join(map(repr, sorted(missing)))
-                 )
- 
--        self.req.run_egg_info()
-+        try:
-+            self.req.run_egg_info()
-+        except (OSError, TypeError):
-+            self.req._correct_build_location()
-+            self.req.run_egg_info()
-         self.req.assert_source_matches_version()
- 
- 
-@@ -205,16 +209,8 @@ class RequirementPreparer(object):
-             # installation.
-             # FIXME: this won't upgrade when there's an existing
+@@ -258,14 +258,7 @@ class RequirementPreparer(object):
+             # package unpacked in `req.source_dir`
              # package unpacked in `req.source_dir`
--            # package unpacked in `req.source_dir`
              if os.path.exists(os.path.join(req.source_dir, 'setup.py')):
 -                raise PreviousBuildDirError(
 -                    "pip can't proceed with requirements '%s' due to a"
@@ -302,10 +205,10 @@ index 104bea33..ecf78b9a 100644
  
              # We can't hit this spot and have populate_link return None.
 diff --git a/pipenv/patched/pip/_internal/pep425tags.py b/pipenv/patched/pip/_internal/pep425tags.py
-index ab1a0298..763c0a24 100644
+index 1e782d1a..3c760ca3 100644
 --- a/pipenv/patched/pip/_internal/pep425tags.py
 +++ b/pipenv/patched/pip/_internal/pep425tags.py
-@@ -10,7 +10,11 @@ import sysconfig
+@@ -10,7 +10,10 @@ import sysconfig
  import warnings
  from collections import OrderedDict
  
@@ -314,30 +217,28 @@ index ab1a0298..763c0a24 100644
 +    import pip._internal.utils.glibc
 +except ImportError:
 +    import pip.utils.glibc
-+
  from pip._internal.utils.compat import get_extension_suffixes
+ from pip._internal.utils.typing import MYPY_CHECK_RUNNING
  
- logger = logging.getLogger(__name__)
 diff --git a/pipenv/patched/pip/_internal/req/req_install.py b/pipenv/patched/pip/_internal/req/req_install.py
-index c2624fee..ee75acd6 100644
+index a4834b00..2c22e141 100644
 --- a/pipenv/patched/pip/_internal/req/req_install.py
 +++ b/pipenv/patched/pip/_internal/req/req_install.py
-@@ -452,7 +452,8 @@ class InstallRequirement(object):
- 
-         with indent_log():
-             script = SETUPTOOLS_SHIM % self.setup_py
--            base_cmd = [sys.executable, '-c', script]
-+            sys_executable = os.environ.get('PIP_PYTHON_PATH', sys.executable)
-+            base_cmd = [sys_executable, '-c', script]
-             if self.isolated:
-                 base_cmd += ["--no-user-cfg"]
-             egg_info_cmd = base_cmd + ['egg_info']
-@@ -613,10 +614,11 @@ class InstallRequirement(object):
- 
+@@ -588,7 +588,8 @@ class InstallRequirement(object):
+                 self.setup_py, self.link,
+             )
+         script = SETUPTOOLS_SHIM % self.setup_py
+-        base_cmd = [sys.executable, '-c', script]
++        sys_executable = os.environ.get('PIP_PYTHON_PATH', sys.executable)
++        base_cmd = [sys_executable, '-c', script]
+         if self.isolated:
+             base_cmd += ["--no-user-cfg"]
+         egg_info_cmd = base_cmd + ['egg_info']
+@@ -746,9 +747,10 @@ class InstallRequirement(object):
          with indent_log():
              # FIXME: should we do --install-headers here too?
-+            sys_executable = os.environ.get('PIP_PYTHON_PATH', sys.executable)
              with self.build_env:
++                sys_executable = os.environ.get('PIP_PYTHON_PATH', sys.executable)
                  call_subprocess(
                      [
 -                        sys.executable,
@@ -345,10 +246,10 @@ index c2624fee..ee75acd6 100644
                          '-c',
                          SETUPTOOLS_SHIM % self.setup_py
                      ] +
-@@ -834,7 +836,8 @@ class InstallRequirement(object):
- 
-     def get_install_args(self, global_options, record_filename, root, prefix,
-                          pycompile):
+@@ -995,7 +997,8 @@ class InstallRequirement(object):
+         pycompile  # type: bool
+     ):
+         # type: (...) -> List[str]
 -        install_args = [sys.executable, "-u"]
 +        sys_executable = os.environ.get('PIP_PYTHON_PATH', sys.executable)
 +        install_args = [sys_executable, "-u"]
@@ -356,28 +257,29 @@ index c2624fee..ee75acd6 100644
          install_args.append(SETUPTOOLS_SHIM % self.setup_py)
          install_args += list(global_options) + \
 diff --git a/pipenv/patched/pip/_internal/req/req_set.py b/pipenv/patched/pip/_internal/req/req_set.py
-index b1983171..0bab231d 100644
+index d1410e93..69a53bf2 100644
 --- a/pipenv/patched/pip/_internal/req/req_set.py
 +++ b/pipenv/patched/pip/_internal/req/req_set.py
-@@ -12,13 +12,16 @@ logger = logging.getLogger(__name__)
+@@ -18,7 +18,7 @@ logger = logging.getLogger(__name__)
  
  class RequirementSet(object):
  
 -    def __init__(self, require_hashes=False, check_supported_wheels=True):
 +    def __init__(self, require_hashes=False, check_supported_wheels=True, ignore_compatibility=True):
+         # type: (bool, bool) -> None
          """Create a RequirementSet.
          """
- 
-         self.requirements = OrderedDict()
+@@ -26,6 +26,9 @@ class RequirementSet(object):
+         self.requirements = OrderedDict()  # type: Dict[str, InstallRequirement]  # noqa: E501
          self.require_hashes = require_hashes
          self.check_supported_wheels = check_supported_wheels
 +        if ignore_compatibility:
 +            self.check_supported_wheels = False
-+        self.ignore_compatibility = True if (check_supported_wheels is False or ignore_compatibility is True) else False
++        self.ignore_compatibility = (check_supported_wheels is False or ignore_compatibility is True)
  
          # Mapping of alias: real_name
-         self.requirement_aliases = {}
-@@ -171,7 +174,7 @@ class RequirementSet(object):
+         self.requirement_aliases = {}  # type: Dict[str, str]
+@@ -186,7 +189,7 @@ class RequirementSet(object):
                  return self.requirements[name]
              if name in self.requirement_aliases:
                  return self.requirements[self.requirement_aliases[name]]
@@ -385,47 +287,50 @@ index b1983171..0bab231d 100644
 +        pass
  
      def cleanup_files(self):
-         """Clean up files, remove builds."""
+         # type: () -> None
 diff --git a/pipenv/patched/pip/_internal/resolve.py b/pipenv/patched/pip/_internal/resolve.py
-index 2d9f1c56..bedc2582 100644
+index 33f572f1..fc8fcbe8 100644
 --- a/pipenv/patched/pip/_internal/resolve.py
 +++ b/pipenv/patched/pip/_internal/resolve.py
-@@ -35,7 +35,7 @@ class Resolver(object):
- 
-     def __init__(self, preparer, session, finder, wheel_cache, use_user_site,
-                  ignore_dependencies, ignore_installed, ignore_requires_python,
--                 force_reinstall, isolated, upgrade_strategy):
-+                 force_reinstall, isolated, upgrade_strategy, ignore_compatibility=False):
+@@ -58,7 +58,8 @@ class Resolver(object):
+         force_reinstall,  # type: bool
+         isolated,  # type: bool
+         upgrade_strategy,  # type: str
+-        use_pep517=None  # type: Optional[bool]
++        use_pep517=None,  # type: Optional[bool]
++        ignore_compatibility=False,  # type: bool
+     ):
+         # type: (...) -> None
          super(Resolver, self).__init__()
-         assert upgrade_strategy in self._allowed_strategies
- 
-@@ -55,7 +55,11 @@ class Resolver(object):
+@@ -81,8 +82,12 @@ class Resolver(object):
          self.ignore_dependencies = ignore_dependencies
          self.ignore_installed = ignore_installed
          self.ignore_requires_python = ignore_requires_python
 +        self.ignore_compatibility = ignore_compatibility
          self.use_user_site = use_user_site
+         self.use_pep517 = use_pep517
 +        self.requires_python = None
 +        if self.ignore_compatibility:
 +            self.ignore_requires_python = True
  
-         self._discovered_dependencies = defaultdict(list)
- 
-@@ -237,7 +241,7 @@ class Resolver(object):
- 
-         return abstract_dist
- 
--    def _resolve_one(self, requirement_set, req_to_install):
-+    def _resolve_one(self, requirement_set, req_to_install, ignore_requires_python=False):
+         self._discovered_dependencies = \
+             defaultdict(list)  # type: DefaultDict[str, List]
+@@ -273,7 +278,8 @@ class Resolver(object):
+     def _resolve_one(
+         self,
+         requirement_set,  # type: RequirementSet
+-        req_to_install  # type: InstallRequirement
++        req_to_install,  # type: InstallRequirement
++        ignore_requires_python=False  # type: bool
+     ):
+         # type: (...) -> List[InstallRequirement]
          """Prepare a single requirements file.
- 
-         :return: A list of additional InstallRequirements to also install.
-@@ -260,11 +264,17 @@ class Resolver(object):
+@@ -298,11 +304,18 @@ class Resolver(object):
          try:
              check_dist_requires_python(dist)
          except UnsupportedPythonVersion as err:
 -            if self.ignore_requires_python:
-+            if self.ignore_requires_python or self.ignore_compatibility:
++            if self.ignore_requires_python or ignore_requires_python or self.ignore_compatibility:
                  logger.warning(err.args[0])
              else:
                  raise
@@ -436,16 +341,18 @@ index 2d9f1c56..bedc2582 100644
 +        except TypeError:
 +            self.requires_python = None
 +
-         more_reqs = []
++
+         more_reqs = []  # type: List[InstallRequirement]
  
          def add_req(subreq, extras_requested):
-@@ -291,9 +301,13 @@ class Resolver(object):
+@@ -329,10 +342,14 @@ class Resolver(object):
+             # We add req_to_install before its dependencies, so that we
              # can refer to it when adding dependencies.
              if not requirement_set.has_requirement(req_to_install.name):
-                 # 'unnamed' requirements will get added here
 +                available_requested = sorted(
 +                    set(dist.extras) & set(req_to_install.extras)
 +                )
+                 # 'unnamed' requirements will get added here
                  req_to_install.is_direct = True
                  requirement_set.add_requirement(
                      req_to_install, parent_req_name=None,
@@ -453,7 +360,7 @@ index 2d9f1c56..bedc2582 100644
                  )
  
              if not self.ignore_dependencies:
-@@ -317,6 +331,19 @@ class Resolver(object):
+@@ -356,6 +373,20 @@ class Resolver(object):
                  for subreq in dist.requires(available_requested):
                      add_req(subreq, extras_requested=available_requested)
  
@@ -461,11 +368,12 @@ index 2d9f1c56..bedc2582 100644
 +                for available in available_requested:
 +                    if hasattr(dist, '_DistInfoDistribution__dep_map'):
 +                        for req in dist._DistInfoDistribution__dep_map[available]:
-+                            req = install_req_from_req(
++                            req = InstallRequirement(
 +                                str(req),
 +                                req_to_install,
 +                                isolated=self.isolated,
 +                                wheel_cache=self.wheel_cache,
++                                use_pep517=None
 +                            )
 +
 +                            more_reqs.append(req)
@@ -474,10 +382,10 @@ index 2d9f1c56..bedc2582 100644
                  # XXX: --no-install leads this to report 'Successfully
                  # downloaded' for only non-editable reqs, even though we took
 diff --git a/pipenv/patched/pip/_internal/utils/packaging.py b/pipenv/patched/pip/_internal/utils/packaging.py
-index c43142f0..f241cce0 100644
+index 7aaf7b5e..d56f0512 100644
 --- a/pipenv/patched/pip/_internal/utils/packaging.py
 +++ b/pipenv/patched/pip/_internal/utils/packaging.py
-@@ -29,7 +29,7 @@ def check_requires_python(requires_python):
+@@ -37,7 +37,7 @@ def check_requires_python(requires_python):
      requires_python_specifier = specifiers.SpecifierSet(requires_python)
  
      # We only use major.minor.micro
@@ -486,12 +394,12 @@ index c43142f0..f241cce0 100644
      return python_version in requires_python_specifier
  
  
-@@ -48,9 +48,11 @@ def get_metadata(dist):
+@@ -57,9 +57,11 @@ def get_metadata(dist):
      return feed_parser.close()
  
  
 -def check_dist_requires_python(dist):
-+def check_dist_requires_python(dist, absorb=True):
++def check_dist_requires_python(dist, absorb=False):
      pkg_info_dict = get_metadata(dist)
      requires_python = pkg_info_dict.get('Requires-Python')
 +    if absorb:
@@ -499,11 +407,81 @@ index c43142f0..f241cce0 100644
      try:
          if not check_requires_python(requires_python):
              raise exceptions.UnsupportedPythonVersion(
+diff --git a/pipenv/patched/pip/_internal/utils/temp_dir.py b/pipenv/patched/pip/_internal/utils/temp_dir.py
+index 2c81ad55..fbf0292a 100644
+--- a/pipenv/patched/pip/_internal/utils/temp_dir.py
++++ b/pipenv/patched/pip/_internal/utils/temp_dir.py
+@@ -5,8 +5,10 @@ import itertools
+ import logging
+ import os.path
+ import tempfile
++import warnings
+ 
+ from pip._internal.utils.misc import rmtree
++from pipenv.vendor.vistir.compat import finalize, ResourceWarning
+ 
+ logger = logging.getLogger(__name__)
+ 
+@@ -47,6 +49,20 @@ class TempDirectory(object):
+         self.path = path
+         self.delete = delete
+         self.kind = kind
++        self._finalizer = None
++        if path:
++            self._register_finalizer()
++
++    def _register_finalizer(self):
++        if self.delete and self.path:
++            self._finalizer = finalize(
++                self,
++                self._cleanup,
++                self.path,
++                warn_message = None
++            )
++        else:
++            self._finalizer = None
+ 
+     def __repr__(self):
+         return "<{} {!r}>".format(self.__class__.__name__, self.path)
+@@ -74,14 +90,30 @@ class TempDirectory(object):
+         self.path = os.path.realpath(
+             tempfile.mkdtemp(prefix="pip-{}-".format(self.kind))
+         )
++        self._register_finalizer()
+         logger.debug("Created temporary directory: {}".format(self.path))
+ 
++    @classmethod
++    def _cleanup(cls, name, warn_message=None):
++        try:
++            rmtree(name)
++        except OSError:
++            pass
++        else:
++            if warn_message:
++                warnings.warn(warn_message, ResourceWarning)
++
+     def cleanup(self):
+         """Remove the temporary directory created and reset state
+         """
+-        if self.path is not None and os.path.exists(self.path):
+-            rmtree(self.path)
+-        self.path = None
++        if getattr(self._finalizer, "detach", None) and self._finalizer.detach():
++            if os.path.exists(self.path):
++                try:
++                    rmtree(self.path)
++                except OSError:
++                    pass
++                else:
++                    self.path = None
+ 
+ 
+ class AdjacentTempDirectory(TempDirectory):
 diff --git a/pipenv/patched/pip/_internal/wheel.py b/pipenv/patched/pip/_internal/wheel.py
-index 5ce890eb..46c0181c 100644
+index 67bcc7f7..968cdff9 100644
 --- a/pipenv/patched/pip/_internal/wheel.py
 +++ b/pipenv/patched/pip/_internal/wheel.py
-@@ -83,7 +83,7 @@ def fix_script(path):
+@@ -114,7 +114,7 @@ def fix_script(path):
              firstline = script.readline()
              if not firstline.startswith(b'#!python'):
                  return False
@@ -512,7 +490,7 @@ index 5ce890eb..46c0181c 100644
              firstline = b'#!' + exename + os.linesep.encode("ascii")
              rest = script.read()
          with open(path, 'wb') as script:
-@@ -167,7 +167,8 @@ def message_about_scripts_not_on_PATH(scripts):
+@@ -201,7 +201,8 @@ def message_about_scripts_not_on_PATH(scripts):
      ]
      # If an executable sits with sys.executable, we don't warn for it.
      #     This covers the case of venv invocations without activating the venv.
@@ -522,7 +500,7 @@ index 5ce890eb..46c0181c 100644
      warn_for = {
          parent_dir: scripts for parent_dir, scripts in grouped_by_dir.items()
          if os.path.normcase(parent_dir) not in not_warn_dirs
-@@ -667,8 +668,9 @@ class WheelBuilder(object):
+@@ -901,8 +902,9 @@ class WheelBuilder(object):
          # isolating. Currently, it breaks Python in virtualenvs, because it
          # relies on site.py to find parts of the standard library outside the
          # virtualenv.
