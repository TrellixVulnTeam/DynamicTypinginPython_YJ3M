commit beaf6791dd7613f508c6cc6d837b98a2fe135278
Author: Kenneth Reitz <me@kennethreitz.org>
Date:   Sat Jan 21 16:57:14 2017 -0500

    overall improvements

diff --git a/pipenv/cli.py b/pipenv/cli.py
index 4598c450..891ed282 100644
--- a/pipenv/cli.py
+++ b/pipenv/cli.py
@@ -19,15 +19,14 @@ __version__ = '0.1.5'
 project = Project()
 
 def ensure_latest_pip():
-
     # Ensure that pip is installed.
-    c = delegator.run('pip install pip')
+    c = delegator.run('{} install pip'.format(which_pip()))
 
     # Check if version is out of date.
     if 'however' in c.err:
         # If version is out of date, update.
         click.echo(crayons.yellow('Pip is out of date... updating to latest.'))
-        c = delegator.run('pip install pip --upgrade', block=False)
+        c = delegator.run('{} install pip --upgrade'.format(which_pip()), block=False)
         click.echo(crayons.blue(c.out))
 
 
@@ -79,7 +78,7 @@ def do_install_dependencies(dev=False, only=False, bare=False):
         if not bare:
             click.echo(crayons.blue(c.out))
 
-def do_freeze():
+def do_lock():
     """Executes the freeze functionality."""
 
     click.echo(crayons.yellow('Assuring all dependencies from Pipfile are installed...'))
@@ -147,7 +146,7 @@ def do_purge(bare=False):
     installed = freeze.split()
 
     if not bare:
-        click.echo('Found {} dirty packages installed, purging...'.format(len(installed)))
+        click.echo('Found {} installed package(s), purging...'.format(len(installed)))
     command = '{} uninstall {} -y'.format(which_pip(), ' '.join(installed))
     c = delegator.run(command)
 
@@ -156,25 +155,9 @@ def do_purge(bare=False):
 
         click.echo(crayons.yellow('Virtualenv now purged and fresh!'))
 
-def which_pip():
-    """Returns the location of virtualenv-installed pip."""
-    return os.sep.join([project.virtualenv_location] + ['bin/pip'])
-
-def which_python():
-    """Returns the location of virtualenv-installed Python."""
-    return os.sep.join([project.virtualenv_location] + ['bin/python'])
-
 
-@click.group()
-@click.version_option(prog_name=crayons.yellow('pipenv'), version=__version__)
-def cli(*args, **kwargs):
-    # Ensure that pip is installed and up-to-date.
-    ensure_latest_pip()
-
-
-@click.command()
-@click.option('--dev', '-d', is_flag=True, default=False)
-def init(dev=False):
+def do_init(dev=False):
+    """Executes the init functionality."""
 
     # Assert Pipfile exists.
     if not project.pipfile_exists:
@@ -186,14 +169,14 @@ def init(dev=False):
 
         # Create the Pipfile.freeze too.
         click.echo(crayons.yellow('Creating a Pipfile.lock as well...'))
-        do_freeze()
+        do_lock()
 
     # Display where the Project is established.
     do_where(bare=False)
     click.echo(crayons.yellow('Creating a virtualenv for this project...'))
 
     # Actually create the virtualenv.
-    c = delegator.run('virtualenv {} --prompt=({})'.format(project.virtualenv_location, project.name), block=False)
+    c = delegator.run(['virtualenv', project.virtualenv_location, '--prompt=({})'.format(project.name)], block=False)
     click.echo(crayons.blue(c.out))
 
     # Say where the virtualenv is.
@@ -213,7 +196,7 @@ def init(dev=False):
         if not lockfile['_meta']['Pipfile-sha256'] == p.hash:
             click.echo(crayons.red('Pipfile.lock out of date, updating...'))
 
-            do_freeze()
+            do_lock()
 
         click.echo(crayons.yellow('Installing dependencies from Pipfile.lock...'))
 
@@ -236,6 +219,29 @@ def init(dev=False):
     do_activate_virtualenv()
 
 
+def which_pip():
+    """Returns the location of virtualenv-installed pip."""
+    return os.sep.join([project.virtualenv_location] + ['bin/pip'])
+
+def which_python():
+    """Returns the location of virtualenv-installed Python."""
+    return os.sep.join([project.virtualenv_location] + ['bin/python'])
+
+
+@click.group()
+@click.version_option(prog_name=crayons.yellow('pipenv'), version=__version__)
+def cli(*args, **kwargs):
+    # Ensure that pip is installed and up-to-date.
+    # ensure_latest_pip()
+    pass
+
+
+@click.command()
+@click.option('--dev', '-d', is_flag=True, default=False)
+def init(dev=False):
+    do_init(dev=dev)
+
+
 @click.command()
 @click.option('--virtualenv', '--venv', '-v', is_flag=True, default=False)
 @click.option('--bare', '-b', is_flag=True, default=False)
@@ -249,10 +255,22 @@ def where(venv=False, bare=False):
 def install(package_name, dev=False):
     click.echo('Installing {}...'.format(crayons.green(package_name)))
 
-    c = delegator.run('{} install {}'.format(which_pip(), package_name))
+    c = delegator.run([which_pip(), 'install', str(package_name)])
     click.echo(crayons.blue(c.out))
 
-    click.echo('Adding {} to Pipfile...'.format(crayons.green(package_name)))
+    # Ensure that package was successfully installed.
+    try:
+        assert c.return_code == 0
+    except AssertionError:
+        click.echo('{} An error occured while installing {}'.format(crayons.red('Error: '), crayons.green(package_name)))
+        sys.exit(1)
+
+    if dev:
+        click.echo('Adding {} to Pipfile\'s [dev-packages]...'.format(crayons.green(package_name)))
+    else:
+        click.echo('Adding {} to Pipfile\'s [packages]...'.format(crayons.green(package_name)))
+
+    # Add the package to the Pipfile.
     project.add_package_to_pipfile(package_name, dev)
 
 
@@ -270,7 +288,7 @@ def uninstall(package_name):
 
 @click.command()
 def lock():
-    do_freeze()
+    do_lock()
 
 
 @click.command()
@@ -283,9 +301,10 @@ def python(args):
 @click.command()
 def shell():
     # Spawn the Python process, and iteract with it.pip
-    click.echo(crayons.yellow('Spawning virtualenv shell.'))
 
     shell = os.environ['SHELL']
+    click.echo(crayons.yellow('Spawning virtualenv shell ({}).'.format(crayons.red(shell))))
+
     c = pexpect.spawn("{} -c '. {}; exec {} -i'".format(shell, activate_virtualenv(source=False), shell))
     c.send(activate_virtualenv() + '\n')
 
@@ -313,11 +332,27 @@ def check():
     # Assert the given requirements.
     p.assert_requirements()
 
+@click.command()
+@click.option('--dev','-d', is_flag=True, default=False)
+def update(dev=False):
+
+    # Update pip to latest version.
+    ensure_latest_pip()
+
+    click.echo(crayons.yellow('Updating all dependencies from Pipfile...'))
+
+    do_purge()
+    do_init(dev=dev)
+
+    click.echo(crayons.yellow('All dependencies are now up-to-date!'))
+
+
 # Install click commands.
 cli.add_command(init)
 cli.add_command(where)
 cli.add_command(install)
 cli.add_command(uninstall)
+cli.add_command(update)
 cli.add_command(lock)
 cli.add_command(python)
 cli.add_command(venv)
