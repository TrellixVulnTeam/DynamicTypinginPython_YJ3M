commit e934ccc73ccf8f1c75a9cb8e5b4414493b06d227
Author: Dan Ryan <dan@danryan.co>
Date:   Wed Aug 22 02:24:51 2018 -0400

    Minor adjustments to get CI passing
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/project.py b/pipenv/project.py
index 36161ecf..c6e9e4fa 100644
--- a/pipenv/project.py
+++ b/pipenv/project.py
@@ -34,6 +34,7 @@ from .utils import (
     is_star,
     get_workon_home,
     is_virtual_environment,
+    looks_like_dir
 )
 from .environments import (
     PIPENV_MAX_DEPTH,
@@ -271,13 +272,12 @@ class Project(object):
         name = self.virtualenv_name
         if self.project_directory:
             venv_path = os.path.join(self.project_directory, ".venv")
-            if os.path.isfile(venv_path):
-                with open(venv_path, "r") as f:
-                    name = f.read()
+            if os.path.exists(venv_path) and not os.path.isdir(".venv"):
+                with io.open(venv_path, "r") as f:
+                    name = f.read().strip()
                 # Assume file's contents is a path if it contains slashes.
-                if '/' in name or '\\' in name:
-                    return name
-
+                if looks_like_dir(name):
+                    return Path(name).absolute().as_posix()
         return str(get_workon_home().joinpath(name))
 
     def get_installed_packages(self):
diff --git a/pipenv/utils.py b/pipenv/utils.py
index 21a1ec20..fa7a809b 100644
--- a/pipenv/utils.py
+++ b/pipenv/utils.py
@@ -1376,3 +1376,8 @@ def chdir(path):
         yield
     finally:
         os.chdir(prev_cwd)
+
+
+def looks_like_dir(path):
+    seps = (sep for sep in (os.path.sep, os.path.altsep) if sep is not None)
+    return any(sep in path for sep in seps)
diff --git a/run-tests.sh b/run-tests.sh
index 1243e033..64d79648 100755
--- a/run-tests.sh
+++ b/run-tests.sh
@@ -6,6 +6,7 @@ set -eo pipefail
 
 export PYTHONIOENCODING="utf-8"
 export LANG=C.UTF-8
+export PIP_PROCESS_DEPENDENCY_LINKS="1"
 
 prefix() {
 	sed "s/^/   $1:    /"
diff --git a/tests/integration/conftest.py b/tests/integration/conftest.py
index 9cb4b7b1..d8ac3686 100644
--- a/tests/integration/conftest.py
+++ b/tests/integration/conftest.py
@@ -15,6 +15,7 @@ if six.PY2:
     class ResourceWarning(Warning):
         pass
 
+HAS_WARNED_GITHUB = False
 
 def check_internet():
     try:
@@ -40,13 +41,15 @@ def check_github_ssh():
         res = True if c.return_code == 1 else False
     except Exception:
         pass
-    if not res:
+    global HAS_WARNED_GITHUB
+    if not res and not HAS_WARNED_GITHUB:
         warnings.warn(
             'Cannot connect to GitHub via SSH', ResourceWarning
         )
         warnings.warn(
             'Will skip tests requiring SSH access to GitHub', ResourceWarning
         )
+        HAS_WARNED_GITHUB = True
     return res
 
 
diff --git a/tests/integration/test_dot_venv.py b/tests/integration/test_dot_venv.py
index 259a78cd..82e39e39 100644
--- a/tests/integration/test_dot_venv.py
+++ b/tests/integration/test_dot_venv.py
@@ -43,13 +43,13 @@ def test_reuse_previous_venv(PipenvInstance, pypi):
 
 
 @pytest.mark.dotvenv
-def test_venv_file_with_name(PipenvInstance, pypi):
+@pytest.mark.parametrize('venv_name', ('test-venv', os.path.join('foo', 'test-venv')))
+def test_venv_file(venv_name, PipenvInstance, pypi):
     """Tests virtualenv creation when a .venv file exists at the project root
     and contains a venv name.
     """
     with PipenvInstance(pypi=pypi, chdir=True) as p:
         file_path = os.path.join(p.path, '.venv')
-        venv_name = 'test-project'
         with open(file_path, 'w') as f:
             f.write(venv_name)
 
@@ -63,9 +63,17 @@ def test_venv_file_with_name(PipenvInstance, pypi):
             c = p.pipenv('install')
             assert c.return_code == 0
 
-            venv_loc = Path(p.pipenv('--venv').out.strip())
+            c = p.pipenv('--venv')
+            assert c.return_code == 0
+            venv_loc = Path(c.out.strip()).absolute()
+            assert venv_loc.exists()
             assert venv_loc.joinpath('.project').exists()
-            assert Path(venv_loc.name) == Path(venv_name)
+            venv_path = venv_loc.as_posix()
+            if os.path.sep in venv_name:
+                venv_expected_path = Path(p.path).joinpath(venv_name).absolute().as_posix()
+            else:
+                venv_expected_path = Path(workon_home.name).joinpath(venv_name).absolute().as_posix()
+            assert venv_path == venv_expected_path
 
 
 @pytest.mark.dotvenv
@@ -90,25 +98,3 @@ def test_venv_file_with_path(PipenvInstance, pypi):
             venv_loc = Path(p.pipenv('--venv').out.strip())
             assert venv_loc.joinpath('.project').exists()
             assert venv_loc == Path(venv_path.name)
-
-
-@pytest.mark.dotvenv
-def test_venv_file_with_relative_path(PipenvInstance, pypi):
-    """Tests virtualenv creation when a .venv file exists at the project root
-    and contains a relative path.
-    """
-    with temp_environ(), PipenvInstance(chdir=True, pypi=pypi) as p:
-        if 'PIPENV_VENV_IN_PROJECT' in os.environ:
-            del os.environ['PIPENV_VENV_IN_PROJECT']
-
-        file_path = os.path.join(p.path, '.venv')
-        venv_path = 'foo/test-venv'
-        with open(file_path, 'w') as f:
-            f.write(venv_path)
-
-        c = p.pipenv('install')
-        assert c.return_code == 0
-
-        venv_loc = Path(p.pipenv('--venv').out.strip()).resolve()
-        assert venv_loc.joinpath(".project").exists()
-        assert venv_loc == Path(venv_path).resolve()
