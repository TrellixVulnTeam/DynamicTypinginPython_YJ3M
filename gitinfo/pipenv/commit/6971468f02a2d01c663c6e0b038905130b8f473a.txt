commit 6971468f02a2d01c663c6e0b038905130b8f473a
Author: Dan Ryan <dan.ryan@xyleminc.com>
Date:   Sun Mar 24 13:10:17 2019 -0400

    Write resolution results to temp json file instead of stdout
    
    Signed-off-by: Dan Ryan <dan.ryan@xyleminc.com>

diff --git a/pipenv/core.py b/pipenv/core.py
index 8e2059a6..e3c61618 100644
--- a/pipenv/core.py
+++ b/pipenv/core.py
@@ -1314,6 +1314,11 @@ def pip_install(
             delete=False
         )
         line = requirement.as_line(include_hashes=not ignore_hashes)
+        if environments.is_verbose():
+            click.echo(
+                "Writing requirement line to temporary file: {0!r}".format(line),
+                err=True
+            )
         f.write(vistir.misc.to_bytes(line))
         r = f.name
         f.close()
@@ -1380,6 +1385,8 @@ def pip_install(
             no_deps = False
 
         if src_dir is not None:
+            if environments.is_verbose():
+                click.echo("Using source directory: {0!r}".format(src_dir))
             repo = requirement.req.get_vcs_repo(src_dir=src_dir)
         else:
             repo = requirement.req.get_vcs_repo()
@@ -1403,6 +1410,10 @@ def pip_install(
                 line = "{0}&subdirectory={1}".format(line, repo.subdirectory)
         else:
             line = requirement.as_line(**line_kwargs)
+        click.echo(
+            "Writing requirement line to temporary file: {0!r}".format(line),
+            err=True
+        )
         f.write(vistir.misc.to_bytes(line))
         r = f.name
         f.close()
@@ -1419,6 +1430,10 @@ def pip_install(
         ignore_hashes = True if not requirement.hashes else ignore_hashes
         line = requirement.as_line(include_hashes=not ignore_hashes)
         line = "{0} {1}".format(line, " ".join(src))
+        click.echo(
+            "Writing requirement line to temporary file: {0!r}".format(line),
+            err=True
+        )
         f.write(vistir.misc.to_bytes(line))
         r = f.name
         f.close()
@@ -2005,6 +2020,7 @@ def do_install(
                 pypi_mirror=pypi_mirror,
                 skip_lock=skip_lock,
             )
+        pip_shims_module = os.environ.pop("PIP_SHIMS_BASE_MODULE", None)
         for pkg_line in pkg_list:
             click.echo(
                 crayons.normal(
@@ -2113,6 +2129,8 @@ def do_install(
             # Update project settings with pre preference.
             if pre:
                 project.update_settings({"allow_prereleases": pre})
+        if pip_shims_module:
+            os.environ["PIP_SHIMS_BASE_MODULE"] = pip_shims_module
         do_init(
             dev=dev,
             system=system,
diff --git a/pipenv/resolver.py b/pipenv/resolver.py
index 126dc809..c7314b22 100644
--- a/pipenv/resolver.py
+++ b/pipenv/resolver.py
@@ -65,6 +65,8 @@ def get_parser():
                         default=os.environ.get("PIPENV_SITE_DIR"))
     parser.add_argument("--requirements-dir", metavar="requirements_dir", action="store",
                         default=os.environ.get("PIPENV_REQ_DIR"))
+    parser.add_argument("--write", metavar="write", action="store",
+                        default=os.environ.get("PIPENV_RESOLVER_FILE"))
     parser.add_argument("packages", nargs="*")
     return parser
 
@@ -117,7 +119,7 @@ def parse_packages(packages, pre, clear, system, requirements_dir=None):
         print(json.dumps([]))
 
 
-def resolve_packages(pre, clear, verbose, system, requirements_dir, packages):
+def resolve_packages(pre, clear, verbose, system, write, requirements_dir, packages):
     from pipenv.utils import create_mirror_source, resolve_deps, replace_pypi_sources
     pypi_mirror_source = (
         create_mirror_source(os.environ["PIPENV_PYPI_MIRROR"])
@@ -145,14 +147,21 @@ def resolve_packages(pre, clear, verbose, system, requirements_dir, packages):
     )
     results = resolve(packages, pre=pre, project=project, sources=sources, clear=clear,
                       system=system, requirements_dir=requirements_dir)
-    print("RESULTS:")
-    if results:
-        print(json.dumps(results))
+    if write:
+        with open(write, "w") as fh:
+            if not results:
+                json.dump([], fh)
+            else:
+                json.dump(results, fh)
     else:
-        print(json.dumps([]))
+        print("RESULTS:")
+        if results:
+            print(json.dumps(results))
+        else:
+            print(json.dumps([]))
 
 
-def _main(pre, clear, verbose, system, requirements_dir, packages, parse_only=False):
+def _main(pre, clear, verbose, system, write, requirements_dir, packages, parse_only=False):
     os.environ["PIP_PYTHON_VERSION"] = ".".join([str(s) for s in sys.version_info[:3]])
     os.environ["PIP_PYTHON_PATH"] = str(sys.executable)
     if parse_only:
@@ -164,7 +173,7 @@ def _main(pre, clear, verbose, system, requirements_dir, packages, parse_only=Fa
             requirements_dir=requirements_dir,
         )
     else:
-        resolve_packages(pre, clear, verbose, system, requirements_dir, packages)
+        resolve_packages(pre, clear, verbose, system, write, requirements_dir, packages)
 
 
 def main():
@@ -198,8 +207,9 @@ def main():
         colorama.init()
     os.environ["PIP_DISABLE_PIP_VERSION_CHECK"] = str("1")
     os.environ["PYTHONIOENCODING"] = str("utf-8")
+    os.environ["PYTHONUNBUFFERED"] = str("1")
     parsed = handle_parsed_args(parsed)
-    _main(parsed.pre, parsed.clear, parsed.verbose, parsed.system,
+    _main(parsed.pre, parsed.clear, parsed.verbose, parsed.system, parsed.write,
           parsed.requirements_dir, parsed.packages, parse_only=parsed.parse_only)
 
 
diff --git a/pipenv/utils.py b/pipenv/utils.py
index e615faca..524374e0 100644
--- a/pipenv/utils.py
+++ b/pipenv/utils.py
@@ -951,7 +951,7 @@ def venv_resolve_deps(
     """
 
     from .vendor.vistir.misc import fs_str
-    from .vendor.vistir.compat import Path, JSONDecodeError
+    from .vendor.vistir.compat import Path, JSONDecodeError, NamedTemporaryFile
     from .vendor.vistir.path import create_tracked_tempdir
     from . import resolver
     from ._compat import decode_for_output
@@ -984,6 +984,9 @@ def venv_resolve_deps(
         cmd.append("--system")
     if dev:
         cmd.append("--dev")
+    target_file = NamedTemporaryFile(prefix="resolver", suffix=".json", delete=False)
+    target_file.close()
+    cmd.extend(["--write", make_posix(target_file.name)])
     with temp_environ():
         os.environ.update({fs_str(k): fs_str(val) for k, val in os.environ.items()})
         if pypi_mirror:
@@ -1007,15 +1010,27 @@ def venv_resolve_deps(
             c = resolve(cmd, sp)
             results = c.out.strip()
             sp.green.ok(environments.PIPENV_SPINNER_OK_TEXT.format("Success!"))
-    if environments.is_verbose():
-        click_echo(results.split("RESULTS:")[1], err=True)
     try:
-        results = json.loads(results.split("RESULTS:")[1].strip())
-
+        with open(target_file.name, "r") as fh:
+            results = json.load(fh)
     except (IndexError, JSONDecodeError):
         click_echo(c.out.strip(), err=True)
         click_echo(c.err.strip(), err=True)
+        if os.path.exists(target_file.name):
+            target_file.delete()
         raise RuntimeError("There was a problem with locking.")
+    if os.path.exists(target_file.name):
+        target_file.delete()
+    if environments.is_verbose():
+        #click_echo(results.split("RESULTS:")[1], err=True)
+        click_echo(results, err=True)
+    # try:
+        # results = json.loads(results.split("RESULTS:")[1].strip())
+    # except (IndexError, JSONDecodeError):
+        # click_echo(c.out.strip(), err=True)
+        # click_echo(c.err.strip(), err=True)
+        # raise RuntimeError("There was a problem with locking.")
+
     if lockfile_section not in lockfile:
         lockfile[lockfile_section] = {}
     prepare_lockfile(results, pipfile, lockfile[lockfile_section])
diff --git a/tests/integration/conftest.py b/tests/integration/conftest.py
index b6fba7cf..cd2b08e5 100644
--- a/tests/integration/conftest.py
+++ b/tests/integration/conftest.py
@@ -6,16 +6,15 @@ import shutil
 import sys
 import warnings
 
-from functools import partial
 from shutil import rmtree as _rmtree
 
 import pytest
 
-from vistir.compat import ResourceWarning, fs_str, fs_encode, FileNotFoundError, PermissionError
+from vistir.compat import ResourceWarning, fs_str, fs_encode, FileNotFoundError, PermissionError, TemporaryDirectory
 from vistir.contextmanagers import temp_environ
-from vistir.path import mkdir_p, create_tracked_tempdir, rmtree, handle_remove_readonly
+from vistir.path import mkdir_p, create_tracked_tempdir, handle_remove_readonly
 
-from pipenv._compat import Path, TemporaryDirectory
+from pipenv._compat import Path
 from pipenv.exceptions import VirtualenvActivationException
 from pipenv.vendor import delegator, requests, toml, tomlkit
 from pytest_pypi.app import prepare_fixtures
@@ -244,6 +243,7 @@ class _PipenvInstance(object):
         venv_root=None, ignore_virtualenvs=True, venv_in_project=True, name=None
     ):
         self.pypi = pypi
+        os.environ["PIPENV_VERBOSE"] = fs_str("1")
         if ignore_virtualenvs:
             os.environ["PIPENV_IGNORE_VIRTUALENVS"] = fs_str("1")
         if venv_root:
@@ -328,8 +328,8 @@ class _PipenvInstance(object):
         # Pretty output for failing tests.
         if block:
             print('$ pipenv {0}'.format(cmd))
-            print(c.out)
-            print(c.err)
+            print('Output: {0}'.format(c.out))
+            print('Error: {0}'.format(c.err))
             if c.return_code != 0:
                 print("Command failed...")
 
@@ -384,9 +384,9 @@ def PipenvInstance(monkeypatch):
 
 
 @pytest.fixture(autouse=True)
-def pip_src_dir(request, pathlib_tmpdir):
+def pip_src_dir(request, vistir_tmpdir):
     old_src_dir = os.environ.get('PIP_SRC', '')
-    os.environ['PIP_SRC'] = pathlib_tmpdir.as_posix()
+    os.environ['PIP_SRC'] = vistir_tmpdir.as_posix()
 
     def finalize():
         os.environ['PIP_SRC'] = fs_str(old_src_dir)
