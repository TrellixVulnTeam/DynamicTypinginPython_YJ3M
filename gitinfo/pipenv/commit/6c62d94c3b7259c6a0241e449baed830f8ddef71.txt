commit 6c62d94c3b7259c6a0241e449baed830f8ddef71
Author: Dan Ryan <dan@danryan.co>
Date:   Thu Jun 21 14:38:44 2018 -0400

    Fix pip cahce dir argument
    
    Signed-off-by: Dan Ryan <dan@danryan.co>
    
    Add snaptime sdist
    
    Signed-off-by: Dan Ryan <dan@danryan.co>
    
    Update core.py encoding and add gitattributes
    
    Signed-off-by: Dan Ryan <dan@danryan.co>
    
    Fix deploy test
    
    Signed-off-by: Dan Ryan <dan@danryan.co>
    
    Add pytest things
    
    Signed-off-by: Dan Ryan <dan@danryan.co>
    
    Add py sdist
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/.gitattributes b/.gitattributes
new file mode 100644
index 00000000..d215fe68
--- /dev/null
+++ b/.gitattributes
@@ -0,0 +1,11 @@
+# Defaults people to autocrlf if they dont have it set
+* text=auto
+
+# binaries
+*.png
+*.jpg
+*.tar.gz
+*.zip
+*.whl
+*.exe
+*.gif
diff --git a/pipenv/core.py b/pipenv/core.py
index c365f7ed..1eca5c1f 100644
--- a/pipenv/core.py
+++ b/pipenv/core.py
@@ -1,4 +1,4 @@
-# -*- coding: utf-8 -*-
+# -*- coding=utf-8 -*-
 import contextlib
 import logging
 import os
@@ -101,7 +101,7 @@ if not PIPENV_HIDE_EMOJIS:
     ):
         INSTALL_LABEL = 'üéÖ   '
     else:
-        INSTALL_LABEL = 'üùù   '
+        INSTALL_LABEL = 'üêç   '
     INSTALL_LABEL2 = crayons.normal('‚ò§  ', bold=True)
     STARTING_LABEL = '    '
 else:
@@ -159,7 +159,7 @@ def load_dot_env():
         if os.path.isfile(denv):
             click.echo(
                 crayons.normal(
-                    'Loading .env environment variables‚Ä¶', bold=True
+                    'Loading .env environment variables...', bold=True
                 ),
                 err=True,
             )
@@ -278,7 +278,7 @@ def ensure_pipfile(validate=True, skip_requirements=False, system=False):
         if project.requirements_exists and not skip_requirements:
             click.echo(
                 crayons.normal(
-                    u'requirements.txt found, instead of Pipfile! Converting‚Ä¶',
+                    u'requirements.txt found, instead of Pipfile! Converting...',
                     bold=True,
                 )
             )
@@ -301,7 +301,7 @@ def ensure_pipfile(validate=True, skip_requirements=False, system=False):
         else:
             click.echo(
                 crayons.normal(
-                    u'Creating a Pipfile for this project‚Ä¶', bold=True
+                    u'Creating a Pipfile for this project...', bold=True
                 ),
                 err=True,
             )
@@ -315,7 +315,7 @@ def ensure_pipfile(validate=True, skip_requirements=False, system=False):
         # Write changes out to disk.
         if changed:
             click.echo(
-                crayons.normal(u'Fixing package names in Pipfile‚Ä¶', bold=True),
+                crayons.normal(u'Fixing package names in Pipfile...', bold=True),
                 err=True,
             )
             project.write_toml(p)
@@ -412,7 +412,6 @@ def ensure_python(three=None, python=None):
         sys.exit(1)
 
     def activate_pyenv():
-        import notpip
         from notpip._vendor.packaging.version import parse as parse_version
 
         """Adds all pyenv installations to the PATH."""
@@ -461,7 +460,7 @@ def ensure_python(three=None, python=None):
             u'{0}: Python {1} {2}'.format(
                 crayons.red('Warning', bold=True),
                 crayons.blue(python),
-                u'was not found on your system‚Ä¶',
+                u'was not found on your system...',
             ),
             err=True,
         )
@@ -511,7 +510,7 @@ def ensure_python(three=None, python=None):
                             ),
                             crayons.normal(u'with pyenv', bold=True),
                             crayons.normal(u'(this may take a few minutes)'),
-                            crayons.normal(u'‚Ä¶', bold=True),
+                            crayons.normal(u'...', bold=True),
                         )
                     )
                     with spinner():
@@ -526,7 +525,7 @@ def ensure_python(three=None, python=None):
                         try:
                             assert c.return_code == 0
                         except AssertionError:
-                            click.echo(u'Something went wrong‚Ä¶')
+                            click.echo(u'Something went wrong...')
                             click.echo(crayons.blue(c.err), err=True)
                         # Print the results, in a beautiful blue...
                         click.echo(crayons.blue(c.out), err=True)
@@ -593,7 +592,7 @@ def ensure_virtualenv(three=None, python=None, site_packages=False):
             ):
                 abort()
         click.echo(
-            crayons.normal(u'Removing existing virtualenv‚Ä¶', bold=True),
+            crayons.normal(u'Removing existing virtualenv...', bold=True),
             err=True,
         )
         # Remove the virtualenv.
@@ -718,7 +717,7 @@ def do_install_dependencies(
     verbose=False,
     concurrent=True,
     requirements_dir=None,
-    pypi_mirror = False,
+    pypi_mirror=False,
 ):
     """"Executes the install functionality.
 
@@ -753,7 +752,7 @@ def do_install_dependencies(
         if not bare:
             click.echo(
                 crayons.normal(
-                    u'Installing dependencies from Pipfile‚Ä¶', bold=True
+                    u'Installing dependencies from Pipfile...', bold=True
                 )
             )
             lockfile = split_file(project._lockfile)
@@ -763,7 +762,7 @@ def do_install_dependencies(
         if not bare:
             click.echo(
                 crayons.normal(
-                    u'Installing dependencies from Pipfile.lock ({0})‚Ä¶'.format(
+                    u'Installing dependencies from Pipfile.lock ({0})...'.format(
                         lockfile['_meta'].get('hash', {}).get('sha256')[-6:]
                     ),
                     bold=True,
@@ -834,7 +833,7 @@ def do_install_dependencies(
     if failed_deps_list:
         click.echo(
             crayons.normal(
-                u'Installing initially‚Äìfailed dependencies‚Ä¶', bold=True
+                u'Installing initially√¢‚Ç¨‚Äúfailed dependencies...', bold=True
             )
         )
         for dep, ignore_hash in progress.bar(
@@ -889,7 +888,7 @@ def convert_three_to_python(three, python):
 def do_create_virtualenv(python=None, site_packages=False):
     """Creates a virtualenv."""
     click.echo(
-        crayons.normal(u'Creating a virtualenv for this project‚Ä¶', bold=True),
+        crayons.normal(u'Creating a virtualenv for this project...', bold=True),
         err=True,
     )
     click.echo(u'Pipfile: {0}'.format(
@@ -924,7 +923,7 @@ def do_create_virtualenv(python=None, site_packages=False):
         u'{0} {1} {3} {2}'.format(
             crayons.normal('Using', bold=True),
             crayons.red(python, bold=True),
-            crayons.normal(u'to create virtualenv‚Ä¶', bold=True),
+            crayons.normal(u'to create virtualenv...', bold=True),
             crayons.green('({0})'.format(python_version(python))),
         ),
         err=True,
@@ -950,7 +949,7 @@ def do_create_virtualenv(python=None, site_packages=False):
     # Enable site-packages, if desired...
     if not project.is_venv_in_project() and site_packages:
         click.echo(
-            crayons.normal(u'Making site-packages available‚Ä¶', bold=True),
+            crayons.normal(u'Making site-packages available...', bold=True),
             err=True,
         )
         os.environ['VIRTUAL_ENV'] = project.virtualenv_location
@@ -1130,7 +1129,7 @@ def do_lock(
             vcs_lockfile.update(dep_lockfile)
         lockfile[settings['lockfile_key']].update(vcs_lockfile)
 
-    # Support for --keep-outdated‚Ä¶
+    # Support for --keep-outdated...
     if keep_outdated:
         for section_name, section in (
             ('default', project.packages), ('develop', project.dev_packages)
@@ -1195,7 +1194,7 @@ def do_purge(bare=False, downloads=False, allow_global=False, verbose=False):
     if downloads:
         if not bare:
             click.echo(
-                crayons.normal(u'Clearing out downloads directory‚Ä¶', bold=True)
+                crayons.normal(u'Clearing out downloads directory...', bold=True)
             )
         shutil.rmtree(project.download_location)
         return
@@ -1227,7 +1226,7 @@ def do_purge(bare=False, downloads=False, allow_global=False, verbose=False):
             actually_installed.append(dep)
     if not bare:
         click.echo(
-            u'Found {0} installed package(s), purging‚Ä¶'.format(
+            u'Found {0} installed package(s), purging...'.format(
                 len(actually_installed)
             )
         )
@@ -1259,6 +1258,7 @@ def do_init(
     pypi_mirror=None,
 ):
     """Executes the init functionality."""
+    cleanup_reqdir = False
     global PIPENV_VIRTUALENV
     if not system:
         if not project.virtualenv_exists:
@@ -1270,6 +1270,7 @@ def do_init(
     # Ensure the Pipfile exists.
     ensure_pipfile(system=system)
     if not requirements_dir:
+        cleanup_reqdir = True
         requirements_dir = TemporaryDirectory(
             suffix='-requirements', prefix='pipenv-'
         )
@@ -1308,14 +1309,14 @@ def do_init(
             else:
                 click.echo(
                     crayons.red(
-                        u'Pipfile.lock ({0}) out of date, updating to ({1})‚Ä¶'.format(
+                        u'Pipfile.lock ({0}) out of date, updating to ({1})...¬¶'.format(
                             old_hash[-6:], new_hash[-6:]
                         ),
                         bold=True,
                     ),
                     err=True,
                 )
-                do_lock(system=system, pre=pre, keep_outdated=keep_outdated, pypi_mirror=pypi_mirror)
+                do_lock(system=system, pre=pre, keep_outdated=keep_outdated, write=True, pypi_mirror=pypi_mirror)
     # Write out the lockfile if it doesn't exist.
     if not project.lockfile_exists and not skip_lock:
         # Unless we're in a virtualenv not managed by pipenv, abort if we're
@@ -1333,7 +1334,7 @@ def do_init(
             sys.exit(1)
         else:
             click.echo(
-                crayons.normal(u'Pipfile.lock not found, creating‚Ä¶', bold=True),
+                crayons.normal(u'Pipfile.lock not found, creating...¬¶', bold=True),
                 err=True,
             )
             do_lock(
@@ -1341,6 +1342,7 @@ def do_init(
                 pre=pre,
                 keep_outdated=keep_outdated,
                 verbose=verbose,
+                write=True,
                 pypi_mirror=pypi_mirror,
             )
     do_install_dependencies(
@@ -1353,7 +1355,8 @@ def do_init(
         requirements_dir=requirements_dir.name,
         pypi_mirror=pypi_mirror,
     )
-    requirements_dir.cleanup()
+    if cleanup_reqdir:
+        requirements_dir.cleanup()
 
     # Hint the user what to do to activate the virtualenv.
     if not allow_global and not deploy and 'PIPENV_ACTIVE' not in os.environ:
@@ -1676,7 +1679,7 @@ def warn_in_virtualenv():
 
 
 def ensure_lockfile(keep_outdated=False, pypi_mirror=None):
-    """Ensures that the lockfile is up‚Äìto‚Äìdate."""
+    """Ensures that the lockfile is up√¢‚Ç¨‚Äúto√¢‚Ç¨‚Äúdate."""
     if not keep_outdated:
         keep_outdated = project.settings.get('keep_outdated')
     # Write out the lockfile if it doesn't exist, but not if the Pipfile is being ignored
@@ -1686,7 +1689,7 @@ def ensure_lockfile(keep_outdated=False, pypi_mirror=None):
         if new_hash != old_hash:
             click.echo(
                 crayons.red(
-                    u'Pipfile.lock ({0}) out of date, updating to ({1})‚Ä¶'.format(
+                    u'Pipfile.lock ({0}) out of date, updating to ({1})...¬¶'.format(
                         old_hash[-6:], new_hash[-6:]
                     ),
                     bold=True,
@@ -1735,7 +1738,7 @@ def do_outdated(pypi_mirror=None):
                 )
     for package, new_version, old_version in outdated:
         click.echo(
-            'Package {0!r} out‚Äìof‚Äìdate: {1!r} installed, {2!r} available.'.format(
+            'Package {0!r} out√¢‚Ç¨‚Äúof√¢‚Ç¨‚Äúdate: {1!r} installed, {2!r} available.'.format(
                 package, old_version, new_version
             )
         )
@@ -1818,7 +1821,7 @@ def do_install(
         # Download requirements file
         click.echo(
             crayons.normal(
-                u'Remote requirements file provided! Downloading‚Ä¶', bold=True
+                u'Remote requirements file provided! Downloading...¬¶', bold=True
             ),
             err=True,
         )
@@ -1842,7 +1845,7 @@ def do_install(
         error, traceback = None, None
         click.echo(
             crayons.normal(
-                u'Requirements file provided! Importing into Pipfile‚Ä¶',
+                u'Requirements file provided! Importing into Pipfile...¬¶',
                 bold=True,
             ),
             err=True,
@@ -1878,7 +1881,7 @@ def do_install(
     if code:
         click.echo(
             crayons.normal(
-                u'Discovering imports from local codebase‚Ä¶', bold=True
+                u'Discovering imports from local codebase...', bold=True
             )
         )
         for req in import_from_code(code):
@@ -1926,26 +1929,6 @@ def do_install(
                 more_packages.extend(converted)
     # Allow more than one package to be provided.
     package_names = [package_name] + more_packages
-    # Install all dependencies, if none was provided.
-    if package_name is False:
-        # Update project settings with pre preference.
-        if pre:
-            project.update_settings({'allow_prereleases': pre})
-        do_init(
-            dev=dev,
-            allow_global=system,
-            ignore_pipfile=ignore_pipfile,
-            system=system,
-            skip_lock=skip_lock,
-            verbose=verbose,
-            concurrent=concurrent,
-            deploy=deploy,
-            pre=pre,
-            requirements_dir=requirements_directory,
-            pypi_mirror=pypi_mirror,
-        )
-        requirements_directory.cleanup()
-        sys.exit(0)
     # Support for --selective-upgrade.
     if selective_upgrade:
         for i, package_name in enumerate(package_names[:]):
@@ -1966,107 +1949,129 @@ def do_install(
                     ]
             except KeyError:
                 pass
-    for package_name in package_names:
-        click.echo(
-            crayons.normal(
-                u'Installing {0}‚Ä¶'.format(
-                    crayons.green(package_name, bold=True)
-                ),
-                bold=True,
-            )
-        )
-        # pip install:
-        with spinner():
-            c = pip_install(
-                package_name,
-                ignore_hashes=True,
-                allow_global=system,
-                selective_upgrade=selective_upgrade,
-                no_deps=False,
-                verbose=verbose,
-                pre=pre,
-                requirements_dir=requirements_directory.name,
-                index=index,
-                extra_indexes=extra_indexes,
-                pypi_mirror=pypi_mirror,
-            )
-            # Warn if --editable wasn't passed.
-            try:
-                converted = Requirement.from_line(package_name)
-            except ValueError as e:
-                click.echo('{0}: {1}'.format(crayons.red('WARNING'), e))
-                requirements_directory.cleanup()
-                sys.exit(1)
-            if converted.is_vcs and not converted.editable:
-                click.echo(
-                    '{0}: You installed a VCS dependency in non‚Äìeditable mode. '
-                    'This will work fine, but sub-dependencies will not be resolved by {1}.'
-                    '\n  To enable this sub‚Äìdependency functionality, specify that this dependency is editable.'
-                    ''.format(
-                        crayons.red('Warning', bold=True),
-                        crayons.red('$ pipenv lock'),
-                    )
-                )
-        click.echo(crayons.blue(format_pip_output(c.out)))
-        # Ensure that package was successfully installed.
-        try:
-            assert c.return_code == 0
-        except AssertionError:
-            click.echo(
-                '{0} An error occurred while installing {1}!'.format(
-                    crayons.red('Error: ', bold=True),
-                    crayons.green(package_name),
-                ),
-                err=True,
-            )
-            click.echo(crayons.blue(format_pip_error(c.err)), err=True)
-            if 'setup.py egg_info' in c.err:
-                click.echo(
-                    "This is likely caused by a bug in {0}. "
-                    "Report this to its maintainers.".format(
-                        crayons.green(package_name),
-                    ),
-                    err=True,
-                )
-            requirements_directory.cleanup()
-            sys.exit(1)
-        click.echo(
-            '{0} {1} {2} {3}{4}'.format(
-                crayons.normal('Adding', bold=True),
-                crayons.green(package_name, bold=True),
-                crayons.normal("to Pipfile's", bold=True),
-                crayons.red(
-                    '[dev-packages]' if dev else '[packages]', bold=True
-                ),
-                crayons.normal('‚Ä¶', bold=True),
-            )
-        )
-        # Add the package to the Pipfile.
-        try:
-            project.add_package_to_pipfile(package_name, dev)
-        except ValueError as e:
-            click.echo(
-                '{0} {1}'.format(
-                    crayons.red('ERROR (PACKAGE NOT INSTALLED):'), e
-                )
-            )
+    # Install all dependencies, if none was provided.
+    if package_name is False:
         # Update project settings with pre preference.
         if pre:
             project.update_settings({'allow_prereleases': pre})
-    if lock and not skip_lock:
         do_init(
             dev=dev,
-            system=system,
             allow_global=system,
-            concurrent=concurrent,
+            ignore_pipfile=ignore_pipfile,
+            system=system,
+            skip_lock=skip_lock,
             verbose=verbose,
-            keep_outdated=keep_outdated,
-            requirements_dir=requirements_directory,
+            concurrent=concurrent,
             deploy=deploy,
+            pre=pre,
+            requirements_dir=requirements_directory,
             pypi_mirror=pypi_mirror,
         )
         requirements_directory.cleanup()
 
+    else:
+        for package_name in package_names:
+            click.echo(
+                crayons.normal(
+                    u'Installing {0}...'.format(
+                        crayons.green(package_name, bold=True)
+                    ),
+                    bold=True,
+                )
+            )
+            # pip install:
+            with spinner():
+                c = pip_install(
+                    package_name,
+                    ignore_hashes=True,
+                    allow_global=system,
+                    selective_upgrade=selective_upgrade,
+                    no_deps=False,
+                    verbose=verbose,
+                    pre=pre,
+                    requirements_dir=requirements_directory.name,
+                    index=index,
+                    extra_indexes=extra_indexes,
+                    pypi_mirror=pypi_mirror,
+                )
+                # Warn if --editable wasn't passed.
+                try:
+                    converted = Requirement.from_line(package_name)
+                except ValueError as e:
+                    click.echo('{0}: {1}'.format(crayons.red('WARNING'), e))
+                    requirements_directory.cleanup()
+                    sys.exit(1)
+                if converted.is_vcs and not converted.editable:
+                    click.echo(
+                        '{0}: You installed a VCS dependency in non√¢‚Ç¨‚Äúeditable mode. '
+                        'This will work fine, but sub-dependencies will not be resolved by {1}.'
+                        '\n  To enable this sub√¢‚Ç¨‚Äúdependency functionality, specify that this dependency is editable.'
+                        ''.format(
+                            crayons.red('Warning', bold=True),
+                            crayons.red('$ pipenv lock'),
+                        )
+                    )
+            click.echo(crayons.blue(format_pip_output(c.out)))
+            # Ensure that package was successfully installed.
+            try:
+                assert c.return_code == 0
+            except AssertionError:
+                click.echo(
+                    '{0} An error occurred while installing {1}!'.format(
+                        crayons.red('Error: ', bold=True),
+                        crayons.green(package_name),
+                    ),
+                    err=True,
+                )
+                click.echo(crayons.blue(format_pip_error(c.err)), err=True)
+                if 'setup.py egg_info' in c.err:
+                    click.echo(
+                        "This is likely caused by a bug in {0}. "
+                        "Report this to its maintainers.".format(
+                            crayons.green(package_name),
+                        ),
+                        err=True,
+                    )
+                requirements_directory.cleanup()
+                sys.exit(1)
+            click.echo(
+                '{0} {1} {2} {3}{4}'.format(
+                    crayons.normal('Adding', bold=True),
+                    crayons.green(package_name, bold=True),
+                    crayons.normal("to Pipfile's", bold=True),
+                    crayons.red(
+                        '[dev-packages]' if dev else '[packages]', bold=True
+                    ),
+                    crayons.normal('...', bold=True),
+                )
+            )
+            # Add the package to the Pipfile.
+            try:
+                project.add_package_to_pipfile(package_name, dev)
+            except ValueError as e:
+                click.echo(
+                    '{0} {1}'.format(
+                        crayons.red('ERROR (PACKAGE NOT INSTALLED):'), e
+                    )
+                )
+            # Update project settings with pre preference.
+            if pre:
+                project.update_settings({'allow_prereleases': pre})
+        if lock and not skip_lock:
+            do_init(
+                dev=dev,
+                system=system,
+                allow_global=system,
+                concurrent=concurrent,
+                verbose=verbose,
+                keep_outdated=keep_outdated,
+                requirements_dir=requirements_directory,
+                deploy=deploy,
+                pypi_mirror=pypi_mirror,
+            )
+    requirements_directory.cleanup()
+    sys.exit(0)
+
 
 def do_uninstall(
     package_name=False,
@@ -2092,7 +2097,7 @@ def do_uninstall(
     if all is True:
         click.echo(
             crayons.normal(
-                u'Un-installing all packages from virtualenv‚Ä¶', bold=True
+                u'Un-installing all packages from virtualenv...', bold=True
             )
         )
         do_purge(allow_global=system, verbose=verbose)
@@ -2111,7 +2116,7 @@ def do_uninstall(
             sys.exit(0)
         click.echo(
             crayons.normal(
-                u'Un-installing {0}‚Ä¶'.format(crayons.red('[dev-packages]')),
+                u'Un-installing {0}...'.format(crayons.red('[dev-packages]')),
                 bold=True,
             )
         )
@@ -2121,7 +2126,7 @@ def do_uninstall(
         click.echo(crayons.red('No package provided!'), err=True)
         sys.exit(1)
     for package_name in package_names:
-        click.echo(u'Un-installing {0}‚Ä¶'.format(crayons.green(package_name)))
+        click.echo(u'Un-installing {0}...'.format(crayons.green(package_name)))
         cmd = '{0} uninstall {1} -y'.format(
             escape_grouped_arguments(which_pip(allow_global=system)),
             package_name,
@@ -2144,7 +2149,7 @@ def do_uninstall(
                 continue
 
             click.echo(
-                u'Removing {0} from Pipfile‚Ä¶'.format(
+                u'Removing {0} from Pipfile...'.format(
                     crayons.green(package_name)
                 )
             )
@@ -2251,7 +2256,7 @@ def inline_activate_virtualenv():
         if not activate_this or not os.path.exists(activate_this):
             click.echo(
                 u'{0}: activate_this.py not found. Your environment is most '
-                u'certainly not activated. Continuing anyway‚Ä¶'
+                u'certainly not activated. Continuing anyway...'
                 u''.format(crayons.red('Warning', bold=True)),
                 err=True,
             )
@@ -2262,7 +2267,7 @@ def inline_activate_virtualenv():
     # Catch all errors, just in case.
     except Exception:
         click.echo(
-            u'{0}: There was an unexpected error while activating your virtualenv. Continuing anyway‚Ä¶'
+            u'{0}: There was an unexpected error while activating your virtualenv. Continuing anyway...'
             ''.format(crayons.red('Warning', bold=True)),
             err=True,
         )
@@ -2322,7 +2327,7 @@ def do_run(command, args, three=None, python=False):
     try:
         script = project.build_script(command, args)
     except ScriptEmptyError:
-        click.echo("Can't run script {0!r}‚Äîit's empty?", err=True)
+        click.echo("Can't run script {0!r}√¢‚Ç¨‚Äùit's empty?", err=True)
     if os.name == 'nt':
         do_run_nt(script)
     else:
@@ -2354,7 +2359,7 @@ def do_check(three=None, python=False, system=False, unused=False, args=None):
             sys.exit(1)
         else:
             sys.exit(0)
-    click.echo(crayons.normal(u'Checking PEP 508 requirements‚Ä¶', bold=True))
+    click.echo(crayons.normal(u'Checking PEP 508 requirements...', bold=True))
     if system:
         python = system_which('python')
     else:
@@ -2392,7 +2397,7 @@ def do_check(three=None, python=False, system=False, unused=False, args=None):
     else:
         click.echo(crayons.green('Passed!'))
     click.echo(
-        crayons.normal(u'Checking installed package safety‚Ä¶', bold=True)
+        crayons.normal(u'Checking installed package safety...', bold=True)
     )
     path = pep508checker.__file__.rstrip('cdo')
     path = os.sep.join(__file__.split(os.sep)[:-1] + ['patched', 'safety.zip'])
@@ -2436,7 +2441,7 @@ def do_graph(bare=False, json=False, json_tree=False, reverse=False):
         click.echo(
             u'{0}: {1}'.format(
                 crayons.red('Warning', bold=True),
-                u'Unable to display currently‚Äìinstalled dependency graph information here. '
+                u'Unable to display currently√¢‚Ç¨‚Äúinstalled dependency graph information here. '
                 u'Please run within a Pipenv project.',
             ),
             err=True,
@@ -2629,7 +2634,7 @@ def do_clean(
         else:
             click.echo(
                 crayons.white(
-                    'Uninstalling {0}‚Ä¶'.format(repr(apparent_bad_package)),
+                    'Uninstalling {0}...'.format(repr(apparent_bad_package)),
                     bold=True,
                 )
             )
diff --git a/pipenv/patched/piptools/repositories/pypi.py b/pipenv/patched/piptools/repositories/pypi.py
index e0023060..cd49dbf7 100644
--- a/pipenv/patched/piptools/repositories/pypi.py
+++ b/pipenv/patched/piptools/repositories/pypi.py
@@ -164,7 +164,6 @@ class PyPIRepository(BaseRepository):
         if ireq.editable:
             return ireq  # return itself as the best match
 
-        py_version = parse_version(os.environ.get('PIP_PYTHON_VERSION', str(sys.version_info[:3])))
         all_candidates = clean_requires_python(self.find_all_candidates(ireq.name))
 
         candidates_by_version = lookup_table(all_candidates, key=lambda c: c.version, unique=True)
diff --git a/pipenv/patched/piptools/utils.py b/pipenv/patched/piptools/utils.py
index 5827a555..12c3991a 100644
--- a/pipenv/patched/piptools/utils.py
+++ b/pipenv/patched/piptools/utils.py
@@ -28,9 +28,9 @@ def clean_requires_python(candidates):
             if c.requires_python.isdigit():
                 c.requires_python = '>={0},<{1}'.format(c.requires_python, int(c.requires_python) + 1)
             try:
-                specifier_set = SpecifierSet(c.requires_python)
+                SpecifierSet(c.requires_python)
             except InvalidSpecifier:
-                pass
+                continue
         all_candidates.append(c)
     return all_candidates
 
diff --git a/pipenv/utils.py b/pipenv/utils.py
index 8e270bac..4c0db27c 100644
--- a/pipenv/utils.py
+++ b/pipenv/utils.py
@@ -268,7 +268,6 @@ def actually_resolve_deps(
         pip_args = prepare_pip_source_args(sources, pip_args)
     if verbose:
         print('Using pip: {0}'.format(' '.join(pip_args)))
-    pip_args = pip_args.extend(['--cache-dir', PIPENV_CACHE_DIR])
     with NamedTemporaryFile(mode='w', prefix='pipenv-', suffix='-constraints.txt', dir=req_dir.name, delete=False) as f:
         if sources:
             requirementstxt_sources = ' '.join(pip_args) if pip_args else ''
@@ -277,6 +276,7 @@ def actually_resolve_deps(
         f.write(u'\n'.join([_constraint for _constraint in constraints]))
         constraints_file = f.name
     pip_options, _ = pip_command.parser.parse_args(pip_args)
+    pip_options.cache_dir = PIPENV_CACHE_DIR
     session = pip_command._build_session(pip_options)
     pypi = PyPIRepository(
         pip_options=pip_options, use_json=False, session=session
diff --git a/tasks/vendoring/patches/patched/piptools.patch b/tasks/vendoring/patches/patched/piptools.patch
index 9b050291..80cfaac7 100644
--- a/tasks/vendoring/patches/patched/piptools.patch
+++ b/tasks/vendoring/patches/patched/piptools.patch
@@ -19,7 +19,7 @@ index 4e6174c..75f9b49 100644
  # NOTE
  # We used to store the cache dir under ~/.pip-tools, which is not the
 diff --git a/pipenv/patched/piptools/repositories/pypi.py b/pipenv/patched/piptools/repositories/pypi.py
-index 1c4b943..c645e08 100644
+index 1c4b943..4155869 100644
 --- a/pipenv/patched/piptools/repositories/pypi.py
 +++ b/pipenv/patched/piptools/repositories/pypi.py
 @@ -4,6 +4,7 @@ from __future__ import (absolute_import, division, print_function,
@@ -130,12 +130,11 @@ index 1c4b943..c645e08 100644
  
      def freshen_build_caches(self):
          """
-@@ -114,10 +164,15 @@ class PyPIRepository(BaseRepository):
+@@ -114,10 +164,14 @@ class PyPIRepository(BaseRepository):
          if ireq.editable:
              return ireq  # return itself as the best match
  
 -        all_candidates = self.find_all_candidates(ireq.name)
-+        py_version = parse_version(os.environ.get('PIP_PYTHON_VERSION', str(sys.version_info[:3])))
 +        all_candidates = clean_requires_python(self.find_all_candidates(ireq.name))
 +
          candidates_by_version = lookup_table(all_candidates, key=lambda c: c.version, unique=True)
@@ -148,7 +147,7 @@ index 1c4b943..c645e08 100644
  
          # Reuses pip's internal candidate sort key to sort
          matching_candidates = [candidates_by_version[ver] for ver in matching_versions]
-@@ -126,11 +181,71 @@ class PyPIRepository(BaseRepository):
+@@ -126,11 +180,71 @@ class PyPIRepository(BaseRepository):
          best_candidate = max(matching_candidates, key=self.finder._candidate_sort_key)
  
          # Turn the candidate into a pinned InstallRequirement
@@ -223,7 +222,7 @@ index 1c4b943..c645e08 100644
          """
          Given a pinned or an editable InstallRequirement, returns a set of
          dependencies (also InstallRequirements, but not necessarily pinned).
-@@ -155,6 +270,20 @@ class PyPIRepository(BaseRepository):
+@@ -155,6 +269,20 @@ class PyPIRepository(BaseRepository):
                      os.makedirs(download_dir)
              if not os.path.isdir(self._wheel_download_dir):
                  os.makedirs(self._wheel_download_dir)
@@ -244,7 +243,7 @@ index 1c4b943..c645e08 100644
  
              try:
                  # Pip < 9 and below
-@@ -164,11 +293,14 @@ class PyPIRepository(BaseRepository):
+@@ -164,11 +292,14 @@ class PyPIRepository(BaseRepository):
                      download_dir=download_dir,
                      wheel_download_dir=self._wheel_download_dir,
                      session=self.session,
@@ -261,7 +260,7 @@ index 1c4b943..c645e08 100644
                  )
              except TypeError:
                  # Pip >= 10 (new resolver!)
-@@ -188,17 +320,99 @@ class PyPIRepository(BaseRepository):
+@@ -188,17 +319,99 @@ class PyPIRepository(BaseRepository):
                      finder=self.finder,
                      session=self.session,
                      upgrade_strategy="to-satisfy-only",
@@ -364,7 +363,7 @@ index 1c4b943..c645e08 100644
          return set(self._dependencies_cache[ireq])
  
      def get_hashes(self, ireq):
-@@ -217,24 +431,22 @@ class PyPIRepository(BaseRepository):
+@@ -217,24 +430,22 @@ class PyPIRepository(BaseRepository):
          # We need to get all of the candidates that match our current version
          # pin, these will represent all of the files that could possibly
          # satisfy this constraint.
@@ -561,9 +560,9 @@ index fde5816..5827a55 100644
 +            if c.requires_python.isdigit():
 +                c.requires_python = '>={0},<{1}'.format(c.requires_python, int(c.requires_python) + 1)
 +            try:
-+                specifier_set = SpecifierSet(c.requires_python)
++                SpecifierSet(c.requires_python)
 +            except InvalidSpecifier:
-+                pass
++                continue
 +        all_candidates.append(c)
 +    return all_candidates
 +
diff --git a/tests/pypi/py/py-1.5.3.tar.gz b/tests/pypi/py/py-1.5.3.tar.gz
new file mode 100644
index 00000000..a0592b18
Binary files /dev/null and b/tests/pypi/py/py-1.5.3.tar.gz differ
diff --git a/tests/pypi/pytest/pytest-3.1.0.tar.gz b/tests/pypi/pytest/pytest-3.1.0.tar.gz
new file mode 100644
index 00000000..bb1e3573
Binary files /dev/null and b/tests/pypi/pytest/pytest-3.1.0.tar.gz differ
diff --git a/tests/pypi/pytest/pytest-3.1.1.tar.gz b/tests/pypi/pytest/pytest-3.1.1.tar.gz
new file mode 100644
index 00000000..5b5f6dc4
Binary files /dev/null and b/tests/pypi/pytest/pytest-3.1.1.tar.gz differ
diff --git a/tests/pypi/snaptime/snaptime-0.2.4.tar.gz b/tests/pypi/snaptime/snaptime-0.2.4.tar.gz
new file mode 100644
index 00000000..df152642
Binary files /dev/null and b/tests/pypi/snaptime/snaptime-0.2.4.tar.gz differ
