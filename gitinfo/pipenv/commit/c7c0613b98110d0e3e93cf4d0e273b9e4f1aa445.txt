commit c7c0613b98110d0e3e93cf4d0e273b9e4f1aa445
Author: Kenneth Reitz <me@kennethreitz.org>
Date:   Thu Mar 8 11:41:23 2018 -0500

    fixes #1586
    
    break all the things!

diff --git a/pipenv/patched/pip/index.py b/pipenv/patched/pip/index.py
index 369679cb..a89167ac 100644
--- a/pipenv/patched/pip/index.py
+++ b/pipenv/patched/pip/index.py
@@ -59,15 +59,16 @@ logger = logging.getLogger(__name__)
 
 class InstallationCandidate(object):
 
-    def __init__(self, project, version, location):
+    def __init__(self, project, version, location, requires_python=''):
         self.project = project
         self.version = parse_version(version)
         self.location = location
         self._key = (self.project, self.version, self.location)
+        self.requires_python = requires_python
 
     def __repr__(self):
         return "<InstallationCandidate({0!r}, {1!r}, {2!r})>".format(
-            self.project, self.version, self.location,
+            self.project, self.version, self.location
         )
 
     def __hash__(self):
@@ -629,7 +630,7 @@ class PackageFinder(object):
             logger.debug('Skipping link %s; %s', link, reason)
             self.logged_links.add(link)
 
-    def _link_package_versions(self, link, search):
+    def _link_package_versions(self, link, search, ignore_requires_python=True):
         """Return an InstallationCandidate or None"""
         version = None
         if link.egg_fragment:
@@ -697,14 +698,13 @@ class PackageFinder(object):
                          link.filename, link.requires_python)
             support_this_python = True
 
-        if not support_this_python:
+        if not support_this_python and not ignore_requires_python:
             logger.debug("The package %s is incompatible with the python"
                          "version in use. Acceptable python versions are:%s",
                          link, link.requires_python)
             return
         logger.debug('Found link %s, version: %s', link, version)
-
-        return InstallationCandidate(search.supplied, version, link)
+        return InstallationCandidate(search.supplied, version, link, link.requires_python)
 
     def _get_page(self, link):
         return HTMLPage.get_page(link, session=self.session)
diff --git a/pipenv/patched/pip/req/req_set.py b/pipenv/patched/pip/req/req_set.py
index 2c54fbad..c3a88f63 100644
--- a/pipenv/patched/pip/req/req_set.py
+++ b/pipenv/patched/pip/req/req_set.py
@@ -465,7 +465,8 @@ class RequirementSet(object):
                       finder,
                       req_to_install,
                       require_hashes=False,
-                      ignore_dependencies=False):
+                      ignore_dependencies=False,
+                      ignore_requires_python=False):
         """Prepare a single requirements file.
 
         :return: A list of additional InstallRequirements to also install.
@@ -473,6 +474,10 @@ class RequirementSet(object):
         # Tell user what we are doing for this requirement:
         # obtain (editable), skipping, processing (local url), collecting
         # (remote url or package name)
+
+        if ignore_requires_python:
+            self.ignore_requires_python = True
+
         if req_to_install.constraint or req_to_install.prepared:
             return []
 
@@ -667,14 +672,6 @@ class RequirementSet(object):
             # # parse dependencies # #
             # ###################### #
             dist = abstract_dist.dist(finder)
-            try:
-                check_dist_requires_python(dist)
-            except UnsupportedPythonVersion as e:
-                if self.ignore_requires_python:
-                    logger.warning(e.args[0])
-                else:
-                    req_to_install.remove_temporary_source()
-                    raise
             more_reqs = []
 
             def add_req(subreq, extras_requested):
@@ -689,6 +686,18 @@ class RequirementSet(object):
                     sub_install_req, req_to_install.name,
                     extras_requested=extras_requested))
 
+            try:
+                check_dist_requires_python(dist)
+            except UnsupportedPythonVersion as e:
+                if self.ignore_requires_python:
+                    logger.warning(e.args[0])
+                else:
+                    req_to_install.remove_temporary_source()
+                    raise
+
+            # A huge hack, by Kenneth Reitz.
+            self.requires_python = check_dist_requires_python(dist, absorb=False)
+
             # We add req_to_install before its dependencies, so that we
             # can refer to it when adding dependencies.
             if not self.has_requirement(req_to_install.name):
@@ -721,6 +730,10 @@ class RequirementSet(object):
                 for subreq in dist.requires(available_requested):
                     add_req(subreq, extras_requested=available_requested)
 
+
+
+
+
                 # Hack for deep-resolving extras.
                 for available in available_requested:
                     if hasattr(dist, '_DistInfoDistribution__dep_map'):
@@ -743,12 +756,6 @@ class RequirementSet(object):
                 # action on them.
                 self.successfully_downloaded.append(req_to_install)
 
-        # print(self.requirements)
-        # print()
-        # print(more_reqs)
-        # print('\n')
-        # print('\n')
-
         return more_reqs
 
     def cleanup_files(self):
diff --git a/pipenv/patched/pip/utils/packaging.py b/pipenv/patched/pip/utils/packaging.py
index 4718b52c..c4af27b3 100644
--- a/pipenv/patched/pip/utils/packaging.py
+++ b/pipenv/patched/pip/utils/packaging.py
@@ -41,12 +41,15 @@ def get_metadata(dist):
         return dist.get_metadata('PKG-INFO')
 
 
-def check_dist_requires_python(dist):
+def check_dist_requires_python(dist, absorb=True):
     metadata = get_metadata(dist)
     feed_parser = FeedParser()
     feed_parser.feed(metadata)
     pkg_info_dict = feed_parser.close()
     requires_python = pkg_info_dict.get('Requires-Python')
+    if not absorb:
+        return requires_python
+
     try:
         if not check_requires_python(requires_python):
             # raise exceptions.UnsupportedPythonVersion(
diff --git a/pipenv/patched/piptools/repositories/pypi.py b/pipenv/patched/piptools/repositories/pypi.py
index 146aaa2d..d6d8c6c9 100755
--- a/pipenv/patched/piptools/repositories/pypi.py
+++ b/pipenv/patched/piptools/repositories/pypi.py
@@ -121,10 +121,14 @@ class PyPIRepository(BaseRepository):
         best_candidate = max(matching_candidates, key=self.finder._candidate_sort_key)
 
         # Turn the candidate into a pinned InstallRequirement
-        return make_install_requirement(
+        new_req = make_install_requirement(
             best_candidate.project, best_candidate.version, ireq.extras, ireq.markers, constraint=ireq.constraint
         )
 
+        # KR TODO: Marker here?
+
+        return new_req
+
     def get_json_dependencies(self, ireq):
         from pip.req import InstallRequirement
 
@@ -196,8 +200,19 @@ class PyPIRepository(BaseRepository):
                                     download_dir=download_dir,
                                     wheel_download_dir=self._wheel_download_dir,
                                     session=self.session,
-                                    ignore_installed=True)
-            result = reqset._prepare_file(self.finder, ireq)
+                                    ignore_installed=True,
+                                    ignore_requires_python=True
+                                    )
+
+            result = reqset._prepare_file(self.finder, ireq, ignore_requires_python=True)
+            if not result:
+                if reqset.requires_python:
+                    from pip.req.req_install import InstallRequirement
+
+                    marker = 'python_version=="{0}"'.format(reqset.requires_python.replace(' ', ''))
+                    new_req = InstallRequirement.from_line('{0}; {1}'.format(str(ireq.req), marker))
+                    result = [new_req]
+
             self._dependencies_cache[ireq] = result
         return set(self._dependencies_cache[ireq])
 
diff --git a/pipenv/patched/piptools/resolver.py b/pipenv/patched/piptools/resolver.py
index b6f7a878..d0aaa6e1 100755
--- a/pipenv/patched/piptools/resolver.py
+++ b/pipenv/patched/piptools/resolver.py
@@ -27,6 +27,7 @@ class RequirementSummary(object):
     def __init__(self, ireq):
         self.req = ireq.req
         self.key = key_from_req(ireq.req)
+        self.markers = ireq.markers
         self.extras = str(sorted(ireq.extras))
         self.specifier = str(ireq.specifier)
 
@@ -148,6 +149,7 @@ class Resolver(object):
                 continue
 
             ireqs = iter(ireqs)
+
             # deepcopy the accumulator so as to not modify the self.our_constraints invariant
             combined_ireq = copy.deepcopy(next(ireqs))
             combined_ireq.comes_from = None
@@ -155,7 +157,7 @@ class Resolver(object):
                 # NOTE we may be losing some info on dropped reqs here
                 combined_ireq.req.specifier &= ireq.req.specifier
                 combined_ireq.constraint &= ireq.constraint
-                # combined_ireq.markers = ireq.markers
+                combined_ireq.markers = ireq.markers
                 # Return a sorted, de-duped tuple of extras
                 combined_ireq.extras = tuple(sorted(set(tuple(combined_ireq.extras) + tuple(ireq.extras))))
             yield combined_ireq
@@ -305,10 +307,7 @@ class Resolver(object):
                                                ', '.join(sorted(dependency_strings, key=lambda s: s.lower())) or '-'))
         from pip._vendor.packaging.markers import InvalidMarker
         for dependency_string in dependency_strings:
-            try:
-                yield InstallRequirement.from_line(dependency_string, constraint=ireq.constraint)
-            except InvalidMarker:
-                yield InstallRequirement.from_line(';'.join(dependency_string.split(';')[:-1]), constraint=ireq.constraint)
+            yield InstallRequirement.from_line(dependency_string, constraint=ireq.constraint)
 
 
     def reverse_dependencies(self, ireqs):
diff --git a/pipenv/resolver.py b/pipenv/resolver.py
index 7b493f86..5577ad8c 100644
--- a/pipenv/resolver.py
+++ b/pipenv/resolver.py
@@ -9,24 +9,39 @@ for _dir in ('vendor', 'patched', '..'):
     dirpath = os.path.sep.join([os.path.dirname(__file__), _dir])
     sys.path.insert(0, dirpath)
 
-import pipenv.utils
-import pipenv.core
-from docopt import docopt
-
 
 def which(*args, **kwargs):
     return sys.executable
 
+
 def resolve(packages, pre, sources, verbose, clear):
+    import pipenv.utils
     return pipenv.utils.resolve_deps(packages, which, project=project, pre=pre, sources=sources, clear=clear, verbose=verbose)
 
+
 if __name__ == '__main__':
+    is_verbose = '--verbose' in ' '.join(sys.argv)
+    do_pre = '--pre' in ' '.join(sys.argv)
+    do_clear = '--clear' in ' '.join(sys.argv)
+    is_debug = '--debug' in ' '.join(sys.argv)
+
+    new_sys_argv = []
+    for v in sys.argv:
+        if v.startswith('--'):
+            continue
+        else:
+            new_sys_argv.append(v)
+
+    sys.argv = new_sys_argv
+
+    import pipenv.core
 
-    is_verbose = '--verbose' in sys.argv
-    do_pre = '--pre' in sys.argv
-    do_clear = '--clear' in sys.argv
     if is_verbose:
         logging.getLogger('pip').setLevel(logging.INFO)
+    if is_debug:
+        # Shit's getting real at this point.
+        logging.getLogger('pip').setLevel(logging.DEBUG)
+
     if 'PIPENV_PACKAGES' in os.environ:
         packages = os.environ['PIPENV_PACKAGES'].strip().split('\n')
     else:
diff --git a/pipenv/utils.py b/pipenv/utils.py
index 66577083..be2f4dc0 100644
--- a/pipenv/utils.py
+++ b/pipenv/utils.py
@@ -432,7 +432,7 @@ def resolve_deps(deps, which, project, sources=None, verbose=False, python=False
                         collected_hashes.append(release['digests']['sha256'])
                     collected_hashes = ['sha256:' + s for s in collected_hashes]
 
-                except (ValueError, KeyError, ConnectionError):
+                except (ValueError, KeyError, ConnectionError) as e:
                     if verbose:
                         click.echo('{0}: Error generating hash for {1}'.format(crayons.red('Warning', bold=True), name))
 
