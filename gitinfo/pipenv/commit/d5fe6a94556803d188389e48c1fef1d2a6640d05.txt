commit d5fe6a94556803d188389e48c1fef1d2a6640d05
Author: Dan Ryan <dan@danryan.co>
Date:   Sat Aug 25 13:23:09 2018 -0400

    Update ptyprocess (better error handling)
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/vendor/ptyprocess/__init__.py b/pipenv/vendor/ptyprocess/__init__.py
index fff62f39..e633d0cd 100644
--- a/pipenv/vendor/ptyprocess/__init__.py
+++ b/pipenv/vendor/ptyprocess/__init__.py
@@ -1,4 +1,4 @@
 """Run a subprocess in a pseudo terminal"""
 from .ptyprocess import PtyProcess, PtyProcessUnicode, PtyProcessError
 
-__version__ = '0.5.2'
+__version__ = '0.6.0'
diff --git a/pipenv/vendor/ptyprocess/_fork_pty.py b/pipenv/vendor/ptyprocess/_fork_pty.py
index d00eb65e..a8d05fe5 100644
--- a/pipenv/vendor/ptyprocess/_fork_pty.py
+++ b/pipenv/vendor/ptyprocess/_fork_pty.py
@@ -4,6 +4,7 @@ import os
 import errno
 
 from pty import (STDIN_FILENO, STDOUT_FILENO, STDERR_FILENO, CHILD)
+from .util import PtyProcessError
 
 def fork_pty():
     '''This implements a substitute for the forkpty system call. This
@@ -63,7 +64,7 @@ def pty_make_controlling_tty(tty_fd):
     try:
         fd = os.open("/dev/tty", os.O_RDWR | os.O_NOCTTY)
         os.close(fd)
-        raise ExceptionPexpect("OSError of errno.ENXIO should be raised.")
+        raise PtyProcessError("OSError of errno.ENXIO should be raised.")
     except OSError as err:
         if err.errno != errno.ENXIO:
             raise
@@ -74,4 +75,4 @@ def pty_make_controlling_tty(tty_fd):
 
     # Verify we now have a controlling tty.
     fd = os.open("/dev/tty", os.O_WRONLY)
-    os.close(fd)
\ No newline at end of file
+    os.close(fd)
diff --git a/pipenv/vendor/ptyprocess/ptyprocess.py b/pipenv/vendor/ptyprocess/ptyprocess.py
index cb3efae7..29b4e43b 100644
--- a/pipenv/vendor/ptyprocess/ptyprocess.py
+++ b/pipenv/vendor/ptyprocess/ptyprocess.py
@@ -19,7 +19,7 @@ except ImportError:
 # Constants
 from pty import (STDIN_FILENO, CHILD)
 
-from .util import which
+from .util import which, PtyProcessError
 
 _platform = sys.platform.lower()
 
@@ -60,11 +60,18 @@ def _make_eof_intr():
     # inherit EOF and INTR definitions from controlling process.
     try:
         from termios import VEOF, VINTR
-        try:
-            fd = sys.__stdin__.fileno()
-        except ValueError:
-            # ValueError: I/O operation on closed file
-            fd = sys.__stdout__.fileno()
+        fd = None
+        for name in 'stdin', 'stdout':
+            stream = getattr(sys, '__%s__' % name, None)
+            if stream is None or not hasattr(stream, 'fileno'):
+                continue
+            try:
+                fd = stream.fileno()
+            except ValueError:
+                continue
+        if fd is None:
+            # no fd, raise ValueError to fallback on CEOF, CINTR
+            raise ValueError("No stream has a fileno")
         intr = ord(termios.tcgetattr(fd)[6][VINTR])
         eof = ord(termios.tcgetattr(fd)[6][VEOF])
     except (ImportError, OSError, IOError, ValueError, termios.error):
@@ -81,14 +88,11 @@ def _make_eof_intr():
     _INTR = _byte(intr)
     _EOF = _byte(eof)
 
-class PtyProcessError(Exception):
-    """Generic error class for this package."""
-
 # setecho and setwinsize are pulled out here because on some platforms, we need
 # to do this from the child before we exec()
     
 def _setecho(fd, state):
-    errmsg = 'setecho() may not be called on this platform'
+    errmsg = 'setecho() may not be called on this platform (it may still be possible to enable/disable echo when spawning the child process)'
 
     try:
         attr = termios.tcgetattr(fd)
@@ -251,7 +255,10 @@ class PtyProcess(object):
 
             # Do not allow child to inherit open file descriptors from parent,
             # with the exception of the exec_err_pipe_write of the pipe
-            max_fd = resource.getrlimit(resource.RLIMIT_NOFILE)[0]
+            # Impose ceiling on max_fd: AIX bugfix for users with unlimited
+            # nofiles where resource.RLIMIT_NOFILE is 2^63-1 and os.closerange()
+            # occasionally raises out of range error
+            max_fd = min(1048576, resource.getrlimit(resource.RLIMIT_NOFILE)[0])
             os.closerange(3, exec_err_pipe_write)
             os.closerange(exec_err_pipe_write+1, max_fd)
 
diff --git a/pipenv/vendor/ptyprocess/util.py b/pipenv/vendor/ptyprocess/util.py
index d7fb7b27..aadbd62c 100644
--- a/pipenv/vendor/ptyprocess/util.py
+++ b/pipenv/vendor/ptyprocess/util.py
@@ -64,4 +64,8 @@ except ImportError:
                     name = os.path.join(dir, thefile)
                     if _access_check(name, mode):
                         return name
-        return None
\ No newline at end of file
+        return None
+
+
+class PtyProcessError(Exception):
+    """Generic error class for this package."""
