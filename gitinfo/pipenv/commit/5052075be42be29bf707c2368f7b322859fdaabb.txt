commit 5052075be42be29bf707c2368f7b322859fdaabb
Author: Kenneth Reitz <me@kennethreitz.org>
Date:   Wed Feb 1 20:38:03 2017 -0500

    $PIPENV_VENV_IN_PROJECT

diff --git a/pipenv/cli.py b/pipenv/cli.py
index 8e8f6440..0d33a221 100644
--- a/pipenv/cli.py
+++ b/pipenv/cli.py
@@ -22,7 +22,7 @@ from .project import Project
 from .utils import convert_deps_from_pip, convert_deps_to_pip, is_required_version
 from .__version__ import __version__
 from . import pep508checker
-from .environments import PIPENV_COLORBLIND, PIPENV_SHELL_COMPAT
+from .environments import PIPENV_COLORBLIND, PIPENV_SHELL_COMPAT, PIPENV_VENV_IN_PROJECT
 
 try:
     from HTMLParser import HTMLParser
@@ -310,8 +310,12 @@ def do_create_virtualenv(three=None, python=None):
     """Creates a virtualenv."""
     click.echo(crayons.yellow('Creating a virtualenv for this project...'), err=True)
 
-    # The command to create the virtualenv.
-    cmd = ['pew', 'new', project.name, '-d']
+    # The user wants the virtualenv in the project.
+    if PIPENV_VENV_IN_PROJECT:
+        cmd = ['virtualenv', project.virtualenv_location, '--prompt=({0})'.format(project.name)]
+    else:
+        # Default: use pew.
+        cmd = ['pew', 'new', project.name, '-d']
 
     # Pass a Python version to virtualenv, if needed.
     if python:
diff --git a/pipenv/environments.py b/pipenv/environments.py
index 4d6719ef..d4184d4d 100644
--- a/pipenv/environments.py
+++ b/pipenv/environments.py
@@ -3,6 +3,9 @@ import os
 # Shell compatibility mode, for mis-configured shells.
 PIPENV_SHELL_COMPAT = os.environ.get('PIPENV_SHELL_COMPAT')
 
+# Create the virtualenv in the project, isntead of with pew.
+PIPENV_VENV_IN_PROJECT = os.environ.get('PIPENV_SHELL_COMPAT')
+
 # No color mode, for unfun people.
 PIPENV_COLORBLIND = os.environ.get('PIPENV_COLORBLIND')
 
diff --git a/pipenv/project.py b/pipenv/project.py
index 18283124..f20a7c52 100644
--- a/pipenv/project.py
+++ b/pipenv/project.py
@@ -9,7 +9,7 @@ from requests.compat import OrderedDict
 
 from .utils import format_toml, mkdir_p
 from .utils import convert_deps_from_pip
-from .environments import PIPENV_MAX_DEPTH
+from .environments import PIPENV_MAX_DEPTH, PIPENV_VENV_IN_PROJECT
 
 
 class Project(object):
@@ -31,8 +31,13 @@ class Project(object):
 
     @property
     def virtualenv_location(self):
-        c = delegator.run('pew dir {0}'.format(self.name))
-        return c.out.strip()
+        # The user wants the virtualenv in the project.
+        if not PIPENV_VENV_IN_PROJECT:
+            c = delegator.run('pew dir {0}'.format(self.name))
+            return c.out.strip()
+        # Default mode.
+        else:
+            return os.sep.join(self.pipfile_location.split(os.sep)[:-1] + ['.venv'])
 
     @property
     def download_location(self):
