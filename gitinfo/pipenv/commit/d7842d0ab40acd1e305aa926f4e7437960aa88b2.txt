commit d7842d0ab40acd1e305aa926f4e7437960aa88b2
Author: Nick Coghlan <ncoghlan@gmail.com>
Date:   Sat Apr 11 01:50:17 2020 +1000

    Address cosmetic parts of PEEP 6

diff --git a/pipenv/cli/command.py b/pipenv/cli/command.py
index c6f1e7ec..65f02af5 100644
--- a/pipenv/cli/command.py
+++ b/pipenv/cli/command.py
@@ -298,6 +298,19 @@ def uninstall(
     if retcode:
         sys.exit(retcode)
 
+LOCK_HEADER = """\
+#
+# These requirements were autogenerated by pipenv
+# To regenerate from the project's Pipfile, run:
+#
+#    pipenv lock {options}
+#
+"""
+
+LOCK_DEV_NOTE="""\
+# Note: in pipenv 2020.x, "--dev" changed to emit both default and development
+# requirements. To emit only development requirements, pass "--dev-only".
+"""
 
 @cli.command(short_help="Generates Pipfile.lock.", context_settings=CONTEXT_SETTINGS)
 @lock_options
@@ -317,15 +330,28 @@ def lock(
         three=state.three, python=state.python, pypi_mirror=state.pypi_mirror,
         warn=(not state.quiet), site_packages=state.site_packages,
     )
-    if state.lockoptions.emit_requirements:
-        # Setting "requirements=True" means do_init() just emits the
+    emit_requirements = state.lockoptions.emit_requirements
+    dev = state.installstate.dev
+    dev_only = state.lockoptions.dev_only
+    pre = state.installstate.pre
+    if emit_requirements:
+        # Emit requirements file header (unless turned off with --no-header)
+        if state.lockoptions.emit_requirements_header:
+            header_options = ["--requirements"]
+            if dev_only:
+                header_options.append("--dev-only")
+            elif dev:
+                header_options.append("--dev")
+            click.echo(LOCK_HEADER.format(options=" ".join(header_options)))
+            # TODO: Emit pip-compile style header
+            if dev and not dev_only:
+                click.echo(LOCK_DEV_NOTE)
+        # Setting "emit_requirements=True" means do_init() just emits the
         # install requirements file to stdout, it doesn't install anything
-        if state.installstate.dev:
-            pass # TODO: Emit behaviour change warning as per PEEP 006
         do_init(
-            dev=state.installstate.dev,
-            dev_only=state.lockoptions.dev_only,
-            emit_requirements=state.lockoptions.emit_requirements,
+            dev=dev,
+            dev_only=dev_only,
+            emit_requirements=emit_requirements,
             pypi_mirror=state.pypi_mirror,
             pre=state.installstate.pre,
         )
diff --git a/pipenv/cli/options.py b/pipenv/cli/options.py
index 0c4433c6..f958dd09 100644
--- a/pipenv/cli/options.py
+++ b/pipenv/cli/options.py
@@ -87,6 +87,7 @@ class LockOptions(object):
     def __init__(self):
         self.dev_only = False
         self.emit_requirements = False
+        self.emit_requirements_header = False
 
 pass_state = make_pass_decorator(State, ensure=True)
 
@@ -172,16 +173,28 @@ def ignore_pipfile_option(f):
                   callback=callback, type=click.types.BOOL, show_envvar=True)(f)
 
 
-def dev_option(f):
+def _dev_option(f, help_text):
     def callback(ctx, param, value):
         state = ctx.ensure_object(State)
         state.installstate.dev = value
         return value
     return option("--dev", "-d", is_flag=True, default=False, type=click.types.BOOL,
-                  help="Install both develop and default packages.", callback=callback,
+                  help=help_text, callback=callback,
                   expose_value=False, show_envvar=True)(f)
 
 
+def install_dev_option(f):
+    return _dev_option(f, "Install both develop and default packages")
+
+
+def lock_dev_option(f):
+    return _dev_option(f, "Generate both develop and default requirements")
+
+
+def uninstall_dev_option(f):
+    return _dev_option(f, "Uninstall both develop and default requirements")
+
+
 def pre_option(f):
     def callback(ctx, param, value):
         state = ctx.ensure_object(State)
@@ -314,6 +327,15 @@ def emit_requirements_flag(f):
     return option("--requirements", "-r", default=False, is_flag=True, expose_value=False,
                   help="Generate output in requirements.txt format.", callback=callback)(f)
 
+def emit_requirements_header_flag(f):
+    def callback(ctx, param, value):
+        state = ctx.ensure_object(State)
+        if value:
+            state.lockoptions.emit_requirements_header = value
+        return value
+    return option("--header/--no-header", default=True, is_flag=True, expose_value=False,
+                  help="Add header to generated requirements", callback=callback)(f)
+
 def dev_only_flag(f):
     def callback(ctx, param, value):
         state = ctx.ensure_object(State)
@@ -393,7 +415,6 @@ def common_options(f):
 
 def install_base_options(f):
     f = common_options(f)
-    f = dev_option(f)
     f = pre_option(f)
     f = keep_outdated_option(f)
     return f
@@ -401,6 +422,7 @@ def install_base_options(f):
 
 def uninstall_options(f):
     f = install_base_options(f)
+    f = uninstall_dev_option(f)
     f = skip_lock_option(f)
     f = editable_option(f)
     f = package_arg(f)
@@ -409,6 +431,7 @@ def uninstall_options(f):
 
 def lock_options(f):
     f = install_base_options(f)
+    f = lock_dev_option(f)
     f = emit_requirements_flag(f)
     f = dev_only_flag(f)
     return f
@@ -416,6 +439,7 @@ def lock_options(f):
 
 def sync_options(f):
     f = install_base_options(f)
+    f = install_dev_option(f)
     f = sequential_option(f)
     return f
 
diff --git a/pipenv/core.py b/pipenv/core.py
index 54ad73a5..f1102c0c 100644
--- a/pipenv/core.py
+++ b/pipenv/core.py
@@ -791,8 +791,8 @@ def do_install_dependencies(
     from six.moves import queue
     if emit_requirements:
         bare = True
-    # Load the lockfile if it exists, or if only is being used (e.g. lock is being used).
-    if skip_lock or only or not project.lockfile_exists:
+    # Load the lockfile if it exists, or if dev_only is being used.
+    if skip_lock or dev_only or not project.lockfile_exists:
         if not bare:
             click.echo(
                 crayons.normal(fix_utf8("Installing dependencies from Pipfileâ€¦"), bold=True)
