commit e89072bffa14af1d40ad93eb677ed0db1c1b1926
Author: Dan Ryan <dan@danryan.co>
Date:   Thu May 17 20:58:02 2018 -0400

    Update imports and vendor requirements
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/core.py b/pipenv/core.py
index 5ad0cd25..3e0a381b 100644
--- a/pipenv/core.py
+++ b/pipenv/core.py
@@ -191,8 +191,8 @@ def cleanup_virtualenv(bare=True):
 
 
 def import_requirements(r=None, dev=False):
-    import pip9
-    from .vendor.pip9.req.req_file import parse_requirements
+    from .patched.notpip._vendor import requests as pip_requests
+    from .patched.notpip._internal.req.req_file import parse_requirements
 
     # Parse requirements.txt file with Pip's parser.
     # Pip requires a `PipSession` which is a subclass of requests.Session.
@@ -209,7 +209,7 @@ def import_requirements(r=None, dev=False):
     for line in contents.split('\n'):
         if line.startswith(('-i ', '--index ', '--index-url ')):
             indexes.append(line.split()[1])
-    reqs = [f for f in parse_requirements(r, session=pip9._vendor.requests)]
+    reqs = [f for f in parse_requirements(r, session=pip_requests)]
     for package in reqs:
         if package.name not in BAD_PACKAGES:
             if package.link is not None:
@@ -410,7 +410,8 @@ def ensure_python(three=None, python=None):
         sys.exit(1)
 
     def activate_pyenv():
-        import pip9
+        import notpip
+        from notpip._vendor.packaging.version import parse as parse_version
 
         """Adds all pyenv installations to the PATH."""
         if PYENV_INSTALLED:
@@ -423,7 +424,7 @@ def ensure_python(three=None, python=None):
                         found, os.sep
                     )
                 for version_str, pyenv_path in pyenv_paths.items():
-                    version = pip9._vendor.packaging.version.parse(version_str)
+                    version = parse_version(version_str)
                     if version.is_prerelease and pyenv_paths.get(
                         version.base_version
                     ):
@@ -1393,14 +1394,15 @@ def pip_install(
     requirements_dir=None,
     extra_indexes=None,
 ):
-    import pip9
+    from notpip._internal import logger as piplogger
+    from notpip._vendor.pyparsing import ParseException
 
     if verbose:
         click.echo(
             crayons.normal('Installing {0!r}'.format(package_name), bold=True),
             err=True,
         )
-        pip9.logger.setLevel(logging.INFO)
+        piplogger.setLevel(logging.INFO)
     # Create files for hash mode.
     if not package_name.startswith('-e ') and (not ignore_hashes) and (
         r is None
@@ -1415,7 +1417,7 @@ def pip_install(
         req = get_requirement(
             package_name.split('--hash')[0].split('--trusted-host')[0]
         ).vcs
-    except (pip9._vendor.pyparsing.ParseException, ValueError) as e:
+    except (ParseException, ValueError) as e:
         click.echo('{0}: {1}'.format(crayons.red('WARNING'), e), err=True)
         click.echo(
             '{0}... You will have to reinstall any packages that failed to install.'.format(
@@ -1516,7 +1518,7 @@ def pip_download(package_name):
 
 
 def which_pip(allow_global=False):
-    """Returns the location of virtualenv-installed pip9."""
+    """Returns the location of virtualenv-installed pip."""
     if allow_global:
         if 'VIRTUAL_ENV' in os.environ:
             return which('pip', location=os.environ['VIRTUAL_ENV'])
@@ -1756,7 +1758,7 @@ def do_install(
     keep_outdated=False,
     selective_upgrade=False,
 ):
-    import pip9
+    from notpip._internal.exceptions import PipError
 
     requirements_directory = TemporaryDirectory(
         suffix='-requirements', prefix='pipenv-'
@@ -1839,7 +1841,7 @@ def do_install(
         )
         try:
             import_requirements(r=project.path_to(requirements), dev=dev)
-        except (UnicodeDecodeError, pip9.exceptions.PipError) as e:
+        except (UnicodeDecodeError, PipError) as e:
             # Don't print the temp file path if remote since it will be deleted.
             req_path = requirements_url if remote else project.path_to(
                 requirements
diff --git a/pipenv/patched/patched.txt b/pipenv/patched/patched.txt
index 4fc8f274..075f608b 100644
--- a/pipenv/patched/patched.txt
+++ b/pipenv/patched/patched.txt
@@ -5,4 +5,4 @@ git+https://github.com/berdario/pew.git@1.1.5#egg=pew
 pipfile==0.0.2
 git+https://github.com/jazzband/pip-tools.git@9cb41d828fcb0967a32cc140c1dcaca94e5f4daa#egg=piptools
 prettytoml==0.3
-pip==9.0.3
+pip==10.0.1
diff --git a/pipenv/project.py b/pipenv/project.py
index 76bcdadc..d24ddb68 100644
--- a/pipenv/project.py
+++ b/pipenv/project.py
@@ -567,7 +567,7 @@ class Project(object):
 
     def create_pipfile(self, python=None):
         """Creates the Pipfile, filled with juicy defaults."""
-        from .vendor.pip9 import ConfigOptionParser
+        from .patched.notpip._internal import ConfigOptionParser
         config_parser = ConfigOptionParser(name=self.name)
         install = dict(config_parser.get_config_section('install'))
         indexes = install.get('extra-index-url', '').lstrip('\n').split('\n')
diff --git a/pipenv/resolver.py b/pipenv/resolver.py
index 7e4b95d3..5bce5768 100644
--- a/pipenv/resolver.py
+++ b/pipenv/resolver.py
@@ -37,11 +37,9 @@ def main():
     import pipenv.core
 
     if is_verbose:
-        logging.getLogger('pip9').setLevel(logging.INFO)
         logging.getLogger('notpip').setLevel(logging.INFO)
     if is_debug:
         # Shit's getting real at this point.
-        logging.getLogger('pip9').setLevel(logging.DEBUG)
         logging.getLogger('notpip').setLevel(logging.DEBUG)
     if 'PIPENV_PACKAGES' in os.environ:
         packages = os.environ['PIPENV_PACKAGES'].strip().split('\n')
diff --git a/pipenv/utils.py b/pipenv/utils.py
index 9ad18c7b..1754573b 100644
--- a/pipenv/utils.py
+++ b/pipenv/utils.py
@@ -82,8 +82,8 @@ def _get_requests_session():
 
 
 def get_requirement(dep):
-    from .vendor.pip9.req.req_install import _strip_extras, Wheel
-    from .vendor.pip9.index import Link
+    from .patched.notpip._internal.req.req_install import _strip_extras, Wheel
+    from .patched.notpip._internal.index import Link
     from .vendor import requirements
     """Pre-clean requirement strings passed to the requirements parser.
 
@@ -106,7 +106,7 @@ def get_requirement(dep):
         # Use the user supplied path as the written dependency
         dep = dep.split(' ', 1)[1]
     # Split out markers if they are present - similar to how pip does it
-    # See pip9.req.req_install.InstallRequirement.from_line
+    # See notpip.req.req_install.InstallRequirement.from_line
     if not any(dep.startswith(uri_prefix) for uri_prefix in SCHEME_LIST):
         marker_sep = ';'
     else:
@@ -281,7 +281,7 @@ def prepare_pip_source_args(sources, pip_args=None):
     if pip_args is None:
         pip_args = []
     if sources:
-        # Add the source to pip9.
+        # Add the source to notpip.
         pip_args.extend(['-i', sources[0]['url']])
         # Trust the host if it's not verified.
         if not sources[0].get('verify_ssl', True):
@@ -309,10 +309,10 @@ def prepare_pip_source_args(sources, pip_args=None):
 def actually_resolve_reps(
     deps, index_lookup, markers_lookup, project, sources, verbose, clear, pre
 ):
-    from pip9 import basecommand, req
-    from pip9._vendor import requests as pip_requests
-    from pip9.exceptions import DistributionNotFound
-    from pip9._vendor.requests.exceptions import HTTPError
+    from notpip._internal import basecommand, req
+    from notpip._vendor import requests as pip_requests
+    from notpip._internal.exceptions import DistributionNotFound
+    from notpip._vendor.requests.exceptions import HTTPError
     from pipenv.patched.piptools.resolver import Resolver
     from pipenv.patched.piptools.repositories.pypi import PyPIRepository
     from pipenv.patched.piptools.scripts.compile import get_pip_command
@@ -457,9 +457,9 @@ def resolve_deps(
     allow_global=False,
 ):
     """Given a list of dependencies, return a resolved list of dependencies,
-    using pip-tools -- and their hashes, using the warehouse API / pip9.
+    using pip-tools -- and their hashes, using the warehouse API / pip.
     """
-    from pip9._vendor.requests.exceptions import ConnectionError
+    from notpip._vendor.requests.exceptions import ConnectionError
 
     index_lookup = {}
     markers_lookup = {}
@@ -809,7 +809,7 @@ def strip_ssh_from_git_uri(uri):
 
 
 def clean_git_uri(uri):
-    """Cleans VCS uris from pip9 format"""
+    """Cleans VCS uris from pip format"""
     if isinstance(uri, six.string_types):
         # Add scheme for parsing purposes, this is also what pip does
         if uri.startswith('git+') and '://' not in uri:
@@ -844,9 +844,9 @@ def is_vcs(pipfile_entry):
 
 def is_installable_file(path):
     """Determine if a path can potentially be installed"""
-    from .vendor.pip9.utils import is_installable_dir
-    from .vendor.pip9.utils.packaging import specifiers
-    from .vendor.pip9.download import is_archive_file
+    from .patched.notpip._internal.utils.misc import is_installable_dir
+    from .patched.notpip._internal.utils.packaging import specifiers
+    from .patched.notpip._internal.download import is_archive_file
 
     if hasattr(path, 'keys') and any(
         key for key in path.keys() if key in ['file', 'path']
@@ -897,7 +897,7 @@ def is_file(package):
 
 def pep440_version(version):
     """Normalize version to PEP 440 standards"""
-    from .vendor.pip9.index import parse_version
+    from .patched.notpip._internal.index import parse_version
 
     # Use pip built-in version parser.
     return str(parse_version(version))
diff --git a/pipenv/vendor/vendor.txt b/pipenv/vendor/vendor.txt
index 05a24182..326cf902 100644
--- a/pipenv/vendor/vendor.txt
+++ b/pipenv/vendor/vendor.txt
@@ -21,11 +21,6 @@ git+https://github.com/naiquevin/pipdeptree.git@2e9e5119160184f359131ea99993f015
 pipreqs==0.4.9
 ptyprocess==0.5.2
 pytoml==0.1.14
-requests==2.18.4
-    chardet==3.0.4
-    idna==2.6
-    urllib3==1.22
-    certifi==2018.1.18
 requirements-parser==0.2.0
 six==1.10.0
 semver==2.7.8
diff --git a/setup.py b/setup.py
index 8dc09a32..7ba9c3d6 100644
--- a/setup.py
+++ b/setup.py
@@ -120,10 +120,6 @@ setup(
         "pipenv.patched.notpip._vendor.requests": ["*.pem"],
         "pipenv.patched.notpip._vendor.distlib._backport": ["sysconfig.cfg"],
         "pipenv.patched.notpip._vendor.distlib": ["t32.exe", "t64.exe", "w32.exe", "w64.exe"],
-        "pipenv.vendor.pip9._vendor.certifi": ["*.pem"],
-        "pipenv.vendor.pip9._vendor.requests": ["*.pem"],
-        "pipenv.vendor.pip9._vendor.distlib._backport": ["sysconfig.cfg"],
-        "pipenv.vendor.pip9._vendor.distlib": ["t32.exe", "t64.exe", "w32.exe", "w64.exe"],
     },
     install_requires=required,
     extras_require={},
