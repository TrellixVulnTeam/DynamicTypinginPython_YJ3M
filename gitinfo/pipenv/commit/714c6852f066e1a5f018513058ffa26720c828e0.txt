commit 714c6852f066e1a5f018513058ffa26720c828e0
Author: Dan Ryan <dan@danryan.co>
Date:   Sat May 19 15:44:14 2018 -0400

    Update vendored pip
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/patched/notpip/__main__.py b/pipenv/patched/notpip/__main__.py
index 28cfefb3..e63d7ae9 100644
--- a/pipenv/patched/notpip/__main__.py
+++ b/pipenv/patched/notpip/__main__.py
@@ -9,11 +9,11 @@ if __package__ == '':
     # __file__ is pip-*.whl/pip/__main__.py
     # first dirname call strips of '/__main__.py', second strips off '/pip'
     # Resulting path is the name of the wheel itself
-    # Add that to sys.path so we can import notpip
+    # Add that to sys.path so we can import pipenv.patched.notpip
     path = os.path.dirname(os.path.dirname(__file__))
     sys.path.insert(0, path)
 
-from notpip._internal import main as _main  # noqa
+from pipenv.patched.notpip._internal import main as _main  # noqa
 
 if __name__ == '__main__':
     sys.exit(_main())
diff --git a/pipenv/patched/notpip/_internal/__init__.py b/pipenv/patched/notpip/_internal/__init__.py
index 753f8879..dadf6e11 100644
--- a/pipenv/patched/notpip/_internal/__init__.py
+++ b/pipenv/patched/notpip/_internal/__init__.py
@@ -17,7 +17,7 @@ import sys
 # to add socks as yet another dependency for pip, nor do I want to allow-stder
 # in the DEP-8 tests, so just suppress the warning.  pdb tells me this has to
 # be done before the import of pip.vcs.
-from notpip._vendor.urllib3.exceptions import DependencyWarning
+from pipenv.patched.notpip._vendor.urllib3.exceptions import DependencyWarning
 warnings.filterwarnings("ignore", category=DependencyWarning)  # noqa
 
 # We want to inject the use of SecureTransport as early as possible so that any
@@ -32,24 +32,24 @@ else:
     # Checks for OpenSSL 1.0.1 on MacOS
     if sys.platform == "darwin" and ssl.OPENSSL_VERSION_NUMBER < 0x1000100f:
         try:
-            from notpip._vendor.urllib3.contrib import securetransport
+            from pipenv.patched.notpip._vendor.urllib3.contrib import securetransport
         except (ImportError, OSError):
             pass
         else:
             securetransport.inject_into_urllib3()
 
-from notpip import __version__
-from notpip._internal import cmdoptions
-from notpip._internal.exceptions import CommandError, PipError
-from notpip._internal.utils.misc import get_installed_distributions, get_prog
-from notpip._internal.utils import deprecation
-from notpip._internal.vcs import git, mercurial, subversion, bazaar  # noqa
-from notpip._internal.baseparser import (
+from pipenv.patched.notpip import __version__
+from pipenv.patched.notpip._internal import cmdoptions
+from pipenv.patched.notpip._internal.exceptions import CommandError, PipError
+from pipenv.patched.notpip._internal.utils.misc import get_installed_distributions, get_prog
+from pipenv.patched.notpip._internal.utils import deprecation
+from pipenv.patched.notpip._internal.vcs import git, mercurial, subversion, bazaar  # noqa
+from pipenv.patched.notpip._internal.baseparser import (
     ConfigOptionParser, UpdatingDefaultsHelpFormatter,
 )
-from notpip._internal.commands import get_summaries, get_similar_commands
-from notpip._internal.commands import commands_dict
-from notpip._vendor.urllib3.exceptions import InsecureRequestWarning
+from pipenv.patched.notpip._internal.commands import get_summaries, get_similar_commands
+from pipenv.patched.notpip._internal.commands import commands_dict
+from pipenv.patched.notpip._vendor.urllib3.exceptions import InsecureRequestWarning
 
 logger = logging.getLogger(__name__)
 
diff --git a/pipenv/patched/notpip/_internal/basecommand.py b/pipenv/patched/notpip/_internal/basecommand.py
index e81ea9db..e35bf3d1 100644
--- a/pipenv/patched/notpip/_internal/basecommand.py
+++ b/pipenv/patched/notpip/_internal/basecommand.py
@@ -8,29 +8,29 @@ import os
 import sys
 import warnings
 
-from notpip._internal import cmdoptions
-from notpip._internal.baseparser import (
+from pipenv.patched.notpip._internal import cmdoptions
+from pipenv.patched.notpip._internal.baseparser import (
     ConfigOptionParser, UpdatingDefaultsHelpFormatter,
 )
-from notpip._internal.compat import WINDOWS
-from notpip._internal.download import PipSession
-from notpip._internal.exceptions import (
+from pipenv.patched.notpip._internal.compat import WINDOWS
+from pipenv.patched.notpip._internal.download import PipSession
+from pipenv.patched.notpip._internal.exceptions import (
     BadCommand, CommandError, InstallationError, PreviousBuildDirError,
     UninstallationError,
 )
-from notpip._internal.index import PackageFinder
-from notpip._internal.locations import running_under_virtualenv
-from notpip._internal.req.req_file import parse_requirements
-from notpip._internal.req.req_install import InstallRequirement
-from notpip._internal.status_codes import (
+from pipenv.patched.notpip._internal.index import PackageFinder
+from pipenv.patched.notpip._internal.locations import running_under_virtualenv
+from pipenv.patched.notpip._internal.req.req_file import parse_requirements
+from pipenv.patched.notpip._internal.req.req_install import InstallRequirement
+from pipenv.patched.notpip._internal.status_codes import (
     ERROR, PREVIOUS_BUILD_DIR_ERROR, SUCCESS, UNKNOWN_ERROR,
     VIRTUALENV_NOT_FOUND,
 )
-from notpip._internal.utils import deprecation
-from notpip._internal.utils.logging import IndentingFormatter
-from notpip._internal.utils.misc import get_prog, normalize_path
-from notpip._internal.utils.outdated import pip_version_check
-from notpip._internal.utils.typing import MYPY_CHECK_RUNNING
+from pipenv.patched.notpip._internal.utils import deprecation
+from pipenv.patched.notpip._internal.utils.logging import IndentingFormatter
+from pipenv.patched.notpip._internal.utils.misc import get_prog, normalize_path
+from pipenv.patched.notpip._internal.utils.outdated import pip_version_check
+from pipenv.patched.notpip._internal.utils.typing import MYPY_CHECK_RUNNING
 
 if MYPY_CHECK_RUNNING:
     from typing import Optional
diff --git a/pipenv/patched/notpip/_internal/baseparser.py b/pipenv/patched/notpip/_internal/baseparser.py
index 888f837a..f82093bf 100644
--- a/pipenv/patched/notpip/_internal/baseparser.py
+++ b/pipenv/patched/notpip/_internal/baseparser.py
@@ -7,10 +7,10 @@ import sys
 import textwrap
 from distutils.util import strtobool
 
-from notpip._vendor.six import string_types
+from pipenv.patched.notpip._vendor.six import string_types
 
-from notpip._internal.compat import get_terminal_size
-from notpip._internal.configuration import Configuration, ConfigurationError
+from pipenv.patched.notpip._internal.compat import get_terminal_size
+from pipenv.patched.notpip._internal.configuration import Configuration, ConfigurationError
 
 logger = logging.getLogger(__name__)
 
diff --git a/pipenv/patched/notpip/_internal/build_env.py b/pipenv/patched/notpip/_internal/build_env.py
index ea2b5a08..c41696ef 100644
--- a/pipenv/patched/notpip/_internal/build_env.py
+++ b/pipenv/patched/notpip/_internal/build_env.py
@@ -5,7 +5,7 @@ import os
 from distutils.sysconfig import get_python_lib
 from sysconfig import get_paths
 
-from notpip._internal.utils.temp_dir import TempDirectory
+from pipenv.patched.notpip._internal.utils.temp_dir import TempDirectory
 
 
 class BuildEnvironment(object):
diff --git a/pipenv/patched/notpip/_internal/cache.py b/pipenv/patched/notpip/_internal/cache.py
index 2d5873a3..a3a28fd8 100644
--- a/pipenv/patched/notpip/_internal/cache.py
+++ b/pipenv/patched/notpip/_internal/cache.py
@@ -6,13 +6,13 @@ import hashlib
 import logging
 import os
 
-from notpip._vendor.packaging.utils import canonicalize_name
+from pipenv.patched.notpip._vendor.packaging.utils import canonicalize_name
 
-from notpip._internal import index
-from notpip._internal.compat import expanduser
-from notpip._internal.download import path_to_url
-from notpip._internal.utils.temp_dir import TempDirectory
-from notpip._internal.wheel import InvalidWheelFilename, Wheel
+from pipenv.patched.notpip._internal import index
+from pipenv.patched.notpip._internal.compat import expanduser
+from pipenv.patched.notpip._internal.download import path_to_url
+from pipenv.patched.notpip._internal.utils.temp_dir import TempDirectory
+from pipenv.patched.notpip._internal.wheel import InvalidWheelFilename, Wheel
 
 logger = logging.getLogger(__name__)
 
diff --git a/pipenv/patched/notpip/_internal/cmdoptions.py b/pipenv/patched/notpip/_internal/cmdoptions.py
index 3fd940fe..0b1c031a 100644
--- a/pipenv/patched/notpip/_internal/cmdoptions.py
+++ b/pipenv/patched/notpip/_internal/cmdoptions.py
@@ -13,14 +13,14 @@ import warnings
 from functools import partial
 from optparse import SUPPRESS_HELP, Option, OptionGroup
 
-from notpip._internal.index import (
+from pipenv.patched.notpip._internal.index import (
     FormatControl, fmt_ctl_handle_mutual_exclude, fmt_ctl_no_binary,
 )
-from notpip._internal.locations import USER_CACHE_DIR, src_prefix
-from notpip._internal.models import PyPI
-from notpip._internal.utils.hashes import STRONG_HASHES
-from notpip._internal.utils.typing import MYPY_CHECK_RUNNING
-from notpip._internal.utils.ui import BAR_TYPES
+from pipenv.patched.notpip._internal.locations import USER_CACHE_DIR, src_prefix
+from pipenv.patched.notpip._internal.models import PyPI
+from pipenv.patched.notpip._internal.utils.hashes import STRONG_HASHES
+from pipenv.patched.notpip._internal.utils.typing import MYPY_CHECK_RUNNING
+from pipenv.patched.notpip._internal.utils.ui import BAR_TYPES
 
 if MYPY_CHECK_RUNNING:
     from typing import Any
diff --git a/pipenv/patched/notpip/_internal/commands/__init__.py b/pipenv/patched/notpip/_internal/commands/__init__.py
index 580f87ee..101fa373 100644
--- a/pipenv/patched/notpip/_internal/commands/__init__.py
+++ b/pipenv/patched/notpip/_internal/commands/__init__.py
@@ -3,25 +3,25 @@ Package containing all pip commands
 """
 from __future__ import absolute_import
 
-from notpip._internal.commands.completion import CompletionCommand
-from notpip._internal.commands.configuration import ConfigurationCommand
-from notpip._internal.commands.download import DownloadCommand
-from notpip._internal.commands.freeze import FreezeCommand
-from notpip._internal.commands.hash import HashCommand
-from notpip._internal.commands.help import HelpCommand
-from notpip._internal.commands.list import ListCommand
-from notpip._internal.commands.check import CheckCommand
-from notpip._internal.commands.search import SearchCommand
-from notpip._internal.commands.show import ShowCommand
-from notpip._internal.commands.install import InstallCommand
-from notpip._internal.commands.uninstall import UninstallCommand
-from notpip._internal.commands.wheel import WheelCommand
-
-from notpip._internal.utils.typing import MYPY_CHECK_RUNNING
+from pipenv.patched.notpip._internal.commands.completion import CompletionCommand
+from pipenv.patched.notpip._internal.commands.configuration import ConfigurationCommand
+from pipenv.patched.notpip._internal.commands.download import DownloadCommand
+from pipenv.patched.notpip._internal.commands.freeze import FreezeCommand
+from pipenv.patched.notpip._internal.commands.hash import HashCommand
+from pipenv.patched.notpip._internal.commands.help import HelpCommand
+from pipenv.patched.notpip._internal.commands.list import ListCommand
+from pipenv.patched.notpip._internal.commands.check import CheckCommand
+from pipenv.patched.notpip._internal.commands.search import SearchCommand
+from pipenv.patched.notpip._internal.commands.show import ShowCommand
+from pipenv.patched.notpip._internal.commands.install import InstallCommand
+from pipenv.patched.notpip._internal.commands.uninstall import UninstallCommand
+from pipenv.patched.notpip._internal.commands.wheel import WheelCommand
+
+from pipenv.patched.notpip._internal.utils.typing import MYPY_CHECK_RUNNING
 
 if MYPY_CHECK_RUNNING:
     from typing import List, Type
-    from notpip._internal.basecommand import Command
+    from pipenv.patched.notpip._internal.basecommand import Command
 
 commands_order = [
     InstallCommand,
diff --git a/pipenv/patched/notpip/_internal/commands/check.py b/pipenv/patched/notpip/_internal/commands/check.py
index 278f6ba6..c9acaff5 100644
--- a/pipenv/patched/notpip/_internal/commands/check.py
+++ b/pipenv/patched/notpip/_internal/commands/check.py
@@ -1,10 +1,10 @@
 import logging
 
-from notpip._internal.basecommand import Command
-from notpip._internal.operations.check import (
+from pipenv.patched.notpip._internal.basecommand import Command
+from pipenv.patched.notpip._internal.operations.check import (
     check_package_set, create_package_set_from_installed,
 )
-from notpip._internal.utils.misc import get_installed_distributions
+from pipenv.patched.notpip._internal.utils.misc import get_installed_distributions
 
 logger = logging.getLogger(__name__)
 
diff --git a/pipenv/patched/notpip/_internal/commands/completion.py b/pipenv/patched/notpip/_internal/commands/completion.py
index 6e2cb586..f4c31c1b 100644
--- a/pipenv/patched/notpip/_internal/commands/completion.py
+++ b/pipenv/patched/notpip/_internal/commands/completion.py
@@ -3,8 +3,8 @@ from __future__ import absolute_import
 import sys
 import textwrap
 
-from notpip._internal.basecommand import Command
-from notpip._internal.utils.misc import get_prog
+from pipenv.patched.notpip._internal.basecommand import Command
+from pipenv.patched.notpip._internal.utils.misc import get_prog
 
 BASE_COMPLETION = """
 # pip %(shell)s completion start%(script)s# pip %(shell)s completion end
diff --git a/pipenv/patched/notpip/_internal/commands/configuration.py b/pipenv/patched/notpip/_internal/commands/configuration.py
index d76a0212..090109c5 100644
--- a/pipenv/patched/notpip/_internal/commands/configuration.py
+++ b/pipenv/patched/notpip/_internal/commands/configuration.py
@@ -2,12 +2,12 @@ import logging
 import os
 import subprocess
 
-from notpip._internal.basecommand import Command
-from notpip._internal.configuration import Configuration, kinds
-from notpip._internal.exceptions import PipError
-from notpip._internal.locations import venv_config_file
-from notpip._internal.status_codes import ERROR, SUCCESS
-from notpip._internal.utils.misc import get_prog
+from pipenv.patched.notpip._internal.basecommand import Command
+from pipenv.patched.notpip._internal.configuration import Configuration, kinds
+from pipenv.patched.notpip._internal.exceptions import PipError
+from pipenv.patched.notpip._internal.locations import venv_config_file
+from pipenv.patched.notpip._internal.status_codes import ERROR, SUCCESS
+from pipenv.patched.notpip._internal.utils.misc import get_prog
 
 logger = logging.getLogger(__name__)
 
diff --git a/pipenv/patched/notpip/_internal/commands/download.py b/pipenv/patched/notpip/_internal/commands/download.py
index 95e69325..e2cdae5e 100644
--- a/pipenv/patched/notpip/_internal/commands/download.py
+++ b/pipenv/patched/notpip/_internal/commands/download.py
@@ -3,16 +3,16 @@ from __future__ import absolute_import
 import logging
 import os
 
-from notpip._internal import cmdoptions
-from notpip._internal.basecommand import RequirementCommand
-from notpip._internal.exceptions import CommandError
-from notpip._internal.index import FormatControl
-from notpip._internal.operations.prepare import RequirementPreparer
-from notpip._internal.req import RequirementSet
-from notpip._internal.resolve import Resolver
-from notpip._internal.utils.filesystem import check_path_owner
-from notpip._internal.utils.misc import ensure_dir, normalize_path
-from notpip._internal.utils.temp_dir import TempDirectory
+from pipenv.patched.notpip._internal import cmdoptions
+from pipenv.patched.notpip._internal.basecommand import RequirementCommand
+from pipenv.patched.notpip._internal.exceptions import CommandError
+from pipenv.patched.notpip._internal.index import FormatControl
+from pipenv.patched.notpip._internal.operations.prepare import RequirementPreparer
+from pipenv.patched.notpip._internal.req import RequirementSet
+from pipenv.patched.notpip._internal.resolve import Resolver
+from pipenv.patched.notpip._internal.utils.filesystem import check_path_owner
+from pipenv.patched.notpip._internal.utils.misc import ensure_dir, normalize_path
+from pipenv.patched.notpip._internal.utils.temp_dir import TempDirectory
 
 logger = logging.getLogger(__name__)
 
diff --git a/pipenv/patched/notpip/_internal/commands/freeze.py b/pipenv/patched/notpip/_internal/commands/freeze.py
index f0fcbaae..6959b6ab 100644
--- a/pipenv/patched/notpip/_internal/commands/freeze.py
+++ b/pipenv/patched/notpip/_internal/commands/freeze.py
@@ -2,11 +2,11 @@ from __future__ import absolute_import
 
 import sys
 
-from notpip._internal import index
-from notpip._internal.basecommand import Command
-from notpip._internal.cache import WheelCache
-from notpip._internal.compat import stdlib_pkgs
-from notpip._internal.operations.freeze import freeze
+from pipenv.patched.notpip._internal import index
+from pipenv.patched.notpip._internal.basecommand import Command
+from pipenv.patched.notpip._internal.cache import WheelCache
+from pipenv.patched.notpip._internal.compat import stdlib_pkgs
+from pipenv.patched.notpip._internal.operations.freeze import freeze
 
 DEV_PKGS = {'pip', 'setuptools', 'distribute', 'wheel'}
 
diff --git a/pipenv/patched/notpip/_internal/commands/hash.py b/pipenv/patched/notpip/_internal/commands/hash.py
index 37aedc47..a86574da 100644
--- a/pipenv/patched/notpip/_internal/commands/hash.py
+++ b/pipenv/patched/notpip/_internal/commands/hash.py
@@ -4,10 +4,10 @@ import hashlib
 import logging
 import sys
 
-from notpip._internal.basecommand import Command
-from notpip._internal.status_codes import ERROR
-from notpip._internal.utils.hashes import FAVORITE_HASH, STRONG_HASHES
-from notpip._internal.utils.misc import read_chunks
+from pipenv.patched.notpip._internal.basecommand import Command
+from pipenv.patched.notpip._internal.status_codes import ERROR
+from pipenv.patched.notpip._internal.utils.hashes import FAVORITE_HASH, STRONG_HASHES
+from pipenv.patched.notpip._internal.utils.misc import read_chunks
 
 logger = logging.getLogger(__name__)
 
diff --git a/pipenv/patched/notpip/_internal/commands/help.py b/pipenv/patched/notpip/_internal/commands/help.py
index ed461ae8..aaf0f87e 100644
--- a/pipenv/patched/notpip/_internal/commands/help.py
+++ b/pipenv/patched/notpip/_internal/commands/help.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import
 
-from notpip._internal.basecommand import SUCCESS, Command
-from notpip._internal.exceptions import CommandError
+from pipenv.patched.notpip._internal.basecommand import SUCCESS, Command
+from pipenv.patched.notpip._internal.exceptions import CommandError
 
 
 class HelpCommand(Command):
@@ -13,7 +13,7 @@ class HelpCommand(Command):
     ignore_require_venv = True
 
     def run(self, options, args):
-        from notpip._internal.commands import commands_dict, get_similar_commands
+        from pipenv.patched.notpip._internal.commands import commands_dict, get_similar_commands
 
         try:
             # 'pip help' with no args is handled by pip.__init__.parseopt()
diff --git a/pipenv/patched/notpip/_internal/commands/install.py b/pipenv/patched/notpip/_internal/commands/install.py
index ffd40a61..136310de 100644
--- a/pipenv/patched/notpip/_internal/commands/install.py
+++ b/pipenv/patched/notpip/_internal/commands/install.py
@@ -7,22 +7,22 @@ import os
 import shutil
 from optparse import SUPPRESS_HELP
 
-from notpip._internal import cmdoptions
-from notpip._internal.basecommand import RequirementCommand
-from notpip._internal.cache import WheelCache
-from notpip._internal.exceptions import (
+from pipenv.patched.notpip._internal import cmdoptions
+from pipenv.patched.notpip._internal.basecommand import RequirementCommand
+from pipenv.patched.notpip._internal.cache import WheelCache
+from pipenv.patched.notpip._internal.exceptions import (
     CommandError, InstallationError, PreviousBuildDirError,
 )
-from notpip._internal.locations import distutils_scheme, virtualenv_no_global
-from notpip._internal.operations.check import check_install_conflicts
-from notpip._internal.operations.prepare import RequirementPreparer
-from notpip._internal.req import RequirementSet, install_given_reqs
-from notpip._internal.resolve import Resolver
-from notpip._internal.status_codes import ERROR
-from notpip._internal.utils.filesystem import check_path_owner
-from notpip._internal.utils.misc import ensure_dir, get_installed_version
-from notpip._internal.utils.temp_dir import TempDirectory
-from notpip._internal.wheel import WheelBuilder
+from pipenv.patched.notpip._internal.locations import distutils_scheme, virtualenv_no_global
+from pipenv.patched.notpip._internal.operations.check import check_install_conflicts
+from pipenv.patched.notpip._internal.operations.prepare import RequirementPreparer
+from pipenv.patched.notpip._internal.req import RequirementSet, install_given_reqs
+from pipenv.patched.notpip._internal.resolve import Resolver
+from pipenv.patched.notpip._internal.status_codes import ERROR
+from pipenv.patched.notpip._internal.utils.filesystem import check_path_owner
+from pipenv.patched.notpip._internal.utils.misc import ensure_dir, get_installed_version
+from pipenv.patched.notpip._internal.utils.temp_dir import TempDirectory
+from pipenv.patched.notpip._internal.wheel import WheelBuilder
 
 try:
     import wheel
@@ -442,7 +442,7 @@ class InstallCommand(RequirementCommand):
         package_set, _dep_info = check_install_conflicts(to_install)
         missing, conflicting = _dep_info
 
-        # NOTE: There is some duplication here from notpip check
+        # NOTE: There is some duplication here from pipenv.patched.notpip check
         for project_name in missing:
             version = package_set[project_name][0]
             for dependency in missing[project_name]:
diff --git a/pipenv/patched/notpip/_internal/commands/list.py b/pipenv/patched/notpip/_internal/commands/list.py
index 2bb460b5..dc3c0f2c 100644
--- a/pipenv/patched/notpip/_internal/commands/list.py
+++ b/pipenv/patched/notpip/_internal/commands/list.py
@@ -4,18 +4,18 @@ import json
 import logging
 import warnings
 
-from notpip._vendor import six
-from notpip._vendor.six.moves import zip_longest
-
-from notpip._internal.basecommand import Command
-from notpip._internal.cmdoptions import index_group, make_option_group
-from notpip._internal.exceptions import CommandError
-from notpip._internal.index import PackageFinder
-from notpip._internal.utils.deprecation import RemovedInPip11Warning
-from notpip._internal.utils.misc import (
+from pipenv.patched.notpip._vendor import six
+from pipenv.patched.notpip._vendor.six.moves import zip_longest
+
+from pipenv.patched.notpip._internal.basecommand import Command
+from pipenv.patched.notpip._internal.cmdoptions import index_group, make_option_group
+from pipenv.patched.notpip._internal.exceptions import CommandError
+from pipenv.patched.notpip._internal.index import PackageFinder
+from pipenv.patched.notpip._internal.utils.deprecation import RemovedInPip11Warning
+from pipenv.patched.notpip._internal.utils.misc import (
     dist_is_editable, get_installed_distributions,
 )
-from notpip._internal.utils.packaging import get_installer
+from pipenv.patched.notpip._internal.utils.packaging import get_installer
 
 logger = logging.getLogger(__name__)
 
diff --git a/pipenv/patched/notpip/_internal/commands/search.py b/pipenv/patched/notpip/_internal/commands/search.py
index 58b9acd8..32a111ae 100644
--- a/pipenv/patched/notpip/_internal/commands/search.py
+++ b/pipenv/patched/notpip/_internal/commands/search.py
@@ -5,19 +5,19 @@ import sys
 import textwrap
 from collections import OrderedDict
 
-from notpip._vendor import pkg_resources
-from notpip._vendor.packaging.version import parse as parse_version
+from pipenv.patched.notpip._vendor import pkg_resources
+from pipenv.patched.notpip._vendor.packaging.version import parse as parse_version
 # NOTE: XMLRPC Client is not annotated in typeshed as on 2017-07-17, which is
 #       why we ignore the type on this import
-from notpip._vendor.six.moves import xmlrpc_client  # type: ignore
-
-from notpip._internal.basecommand import SUCCESS, Command
-from notpip._internal.compat import get_terminal_size
-from notpip._internal.download import PipXmlrpcTransport
-from notpip._internal.exceptions import CommandError
-from notpip._internal.models import PyPI
-from notpip._internal.status_codes import NO_MATCHES_FOUND
-from notpip._internal.utils.logging import indent_log
+from pipenv.patched.notpip._vendor.six.moves import xmlrpc_client  # type: ignore
+
+from pipenv.patched.notpip._internal.basecommand import SUCCESS, Command
+from pipenv.patched.notpip._internal.compat import get_terminal_size
+from pipenv.patched.notpip._internal.download import PipXmlrpcTransport
+from pipenv.patched.notpip._internal.exceptions import CommandError
+from pipenv.patched.notpip._internal.models import PyPI
+from pipenv.patched.notpip._internal.status_codes import NO_MATCHES_FOUND
+from pipenv.patched.notpip._internal.utils.logging import indent_log
 
 logger = logging.getLogger(__name__)
 
diff --git a/pipenv/patched/notpip/_internal/commands/show.py b/pipenv/patched/notpip/_internal/commands/show.py
index f761b08f..3bac8b4f 100644
--- a/pipenv/patched/notpip/_internal/commands/show.py
+++ b/pipenv/patched/notpip/_internal/commands/show.py
@@ -4,11 +4,11 @@ import logging
 import os
 from email.parser import FeedParser  # type: ignore
 
-from notpip._vendor import pkg_resources
-from notpip._vendor.packaging.utils import canonicalize_name
+from pipenv.patched.notpip._vendor import pkg_resources
+from pipenv.patched.notpip._vendor.packaging.utils import canonicalize_name
 
-from notpip._internal.basecommand import Command
-from notpip._internal.status_codes import ERROR, SUCCESS
+from pipenv.patched.notpip._internal.basecommand import Command
+from pipenv.patched.notpip._internal.status_codes import ERROR, SUCCESS
 
 logger = logging.getLogger(__name__)
 
diff --git a/pipenv/patched/notpip/_internal/commands/uninstall.py b/pipenv/patched/notpip/_internal/commands/uninstall.py
index cb4207f2..262c2c45 100644
--- a/pipenv/patched/notpip/_internal/commands/uninstall.py
+++ b/pipenv/patched/notpip/_internal/commands/uninstall.py
@@ -1,10 +1,10 @@
 from __future__ import absolute_import
 
-from notpip._vendor.packaging.utils import canonicalize_name
+from pipenv.patched.notpip._vendor.packaging.utils import canonicalize_name
 
-from notpip._internal.basecommand import Command
-from notpip._internal.exceptions import InstallationError
-from notpip._internal.req import InstallRequirement, parse_requirements
+from pipenv.patched.notpip._internal.basecommand import Command
+from pipenv.patched.notpip._internal.exceptions import InstallationError
+from pipenv.patched.notpip._internal.req import InstallRequirement, parse_requirements
 
 
 class UninstallCommand(Command):
diff --git a/pipenv/patched/notpip/_internal/commands/wheel.py b/pipenv/patched/notpip/_internal/commands/wheel.py
index e3db0b9d..e97d5988 100644
--- a/pipenv/patched/notpip/_internal/commands/wheel.py
+++ b/pipenv/patched/notpip/_internal/commands/wheel.py
@@ -4,15 +4,15 @@ from __future__ import absolute_import
 import logging
 import os
 
-from notpip._internal import cmdoptions
-from notpip._internal.basecommand import RequirementCommand
-from notpip._internal.cache import WheelCache
-from notpip._internal.exceptions import CommandError, PreviousBuildDirError
-from notpip._internal.operations.prepare import RequirementPreparer
-from notpip._internal.req import RequirementSet
-from notpip._internal.resolve import Resolver
-from notpip._internal.utils.temp_dir import TempDirectory
-from notpip._internal.wheel import WheelBuilder
+from pipenv.patched.notpip._internal import cmdoptions
+from pipenv.patched.notpip._internal.basecommand import RequirementCommand
+from pipenv.patched.notpip._internal.cache import WheelCache
+from pipenv.patched.notpip._internal.exceptions import CommandError, PreviousBuildDirError
+from pipenv.patched.notpip._internal.operations.prepare import RequirementPreparer
+from pipenv.patched.notpip._internal.req import RequirementSet
+from pipenv.patched.notpip._internal.resolve import Resolver
+from pipenv.patched.notpip._internal.utils.temp_dir import TempDirectory
+from pipenv.patched.notpip._internal.wheel import WheelBuilder
 
 logger = logging.getLogger(__name__)
 
diff --git a/pipenv/patched/notpip/_internal/compat.py b/pipenv/patched/notpip/_internal/compat.py
index c99a737e..3407880c 100644
--- a/pipenv/patched/notpip/_internal/compat.py
+++ b/pipenv/patched/notpip/_internal/compat.py
@@ -9,13 +9,13 @@ import os
 import shutil
 import sys
 
-from notpip._vendor.six import text_type
+from pipenv.patched.notpip._vendor.six import text_type
 
 try:
     import ipaddress
 except ImportError:
     try:
-        from notpip._vendor import ipaddress  # type: ignore
+        from pipenv.patched.notpip._vendor import ipaddress  # type: ignore
     except ImportError:
         import ipaddr as ipaddress  # type: ignore
         ipaddress.ip_address = ipaddress.IPAddress
diff --git a/pipenv/patched/notpip/_internal/configuration.py b/pipenv/patched/notpip/_internal/configuration.py
index 0aa53c7c..7b9b5a45 100644
--- a/pipenv/patched/notpip/_internal/configuration.py
+++ b/pipenv/patched/notpip/_internal/configuration.py
@@ -15,16 +15,16 @@ import locale
 import logging
 import os
 
-from notpip._vendor import six
-from notpip._vendor.six.moves import configparser
+from pipenv.patched.notpip._vendor import six
+from pipenv.patched.notpip._vendor.six.moves import configparser
 
-from notpip._internal.exceptions import ConfigurationError
-from notpip._internal.locations import (
+from pipenv.patched.notpip._internal.exceptions import ConfigurationError
+from pipenv.patched.notpip._internal.locations import (
     legacy_config_file, new_config_file, running_under_virtualenv,
     site_config_files, venv_config_file,
 )
-from notpip._internal.utils.misc import ensure_dir, enum
-from notpip._internal.utils.typing import MYPY_CHECK_RUNNING
+from pipenv.patched.notpip._internal.utils.misc import ensure_dir, enum
+from pipenv.patched.notpip._internal.utils.typing import MYPY_CHECK_RUNNING
 
 if MYPY_CHECK_RUNNING:
     from typing import Any, Dict, Iterable, List, NewType, Optional, Tuple
diff --git a/pipenv/patched/notpip/_internal/download.py b/pipenv/patched/notpip/_internal/download.py
index 635b0453..e9223a6a 100644
--- a/pipenv/patched/notpip/_internal/download.py
+++ b/pipenv/patched/notpip/_internal/download.py
@@ -12,42 +12,42 @@ import re
 import shutil
 import sys
 
-from notpip._vendor import requests, six, urllib3
-from notpip._vendor.cachecontrol import CacheControlAdapter
-from notpip._vendor.cachecontrol.caches import FileCache
-from notpip._vendor.lockfile import LockError
-from notpip._vendor.requests.adapters import BaseAdapter, HTTPAdapter
-from notpip._vendor.requests.auth import AuthBase, HTTPBasicAuth
-from notpip._vendor.requests.models import CONTENT_CHUNK_SIZE, Response
-from notpip._vendor.requests.sessions import Session
-from notpip._vendor.requests.structures import CaseInsensitiveDict
-from notpip._vendor.requests.utils import get_netrc_auth
+from pipenv.patched.notpip._vendor import requests, six, urllib3
+from pipenv.patched.notpip._vendor.cachecontrol import CacheControlAdapter
+from pipenv.patched.notpip._vendor.cachecontrol.caches import FileCache
+from pipenv.patched.notpip._vendor.lockfile import LockError
+from pipenv.patched.notpip._vendor.requests.adapters import BaseAdapter, HTTPAdapter
+from pipenv.patched.notpip._vendor.requests.auth import AuthBase, HTTPBasicAuth
+from pipenv.patched.notpip._vendor.requests.models import CONTENT_CHUNK_SIZE, Response
+from pipenv.patched.notpip._vendor.requests.sessions import Session
+from pipenv.patched.notpip._vendor.requests.structures import CaseInsensitiveDict
+from pipenv.patched.notpip._vendor.requests.utils import get_netrc_auth
 # NOTE: XMLRPC Client is not annotated in typeshed as on 2017-07-17, which is
 #       why we ignore the type on this import
-from notpip._vendor.six.moves import xmlrpc_client  # type: ignore
-from notpip._vendor.six.moves.urllib import parse as urllib_parse
-from notpip._vendor.six.moves.urllib import request as urllib_request
-from notpip._vendor.six.moves.urllib.parse import unquote as urllib_unquote
-from notpip._vendor.urllib3.util import IS_PYOPENSSL
-
-import notpip
-from notpip._internal.compat import WINDOWS
-from notpip._internal.exceptions import HashMismatch, InstallationError
-from notpip._internal.locations import write_delete_marker_file
-from notpip._internal.models import PyPI
-from notpip._internal.utils.encoding import auto_decode
-from notpip._internal.utils.filesystem import check_path_owner
-from notpip._internal.utils.glibc import libc_ver
-from notpip._internal.utils.logging import indent_log
-from notpip._internal.utils.misc import (
+from pipenv.patched.notpip._vendor.six.moves import xmlrpc_client  # type: ignore
+from pipenv.patched.notpip._vendor.six.moves.urllib import parse as urllib_parse
+from pipenv.patched.notpip._vendor.six.moves.urllib import request as urllib_request
+from pipenv.patched.notpip._vendor.six.moves.urllib.parse import unquote as urllib_unquote
+from pipenv.patched.notpip._vendor.urllib3.util import IS_PYOPENSSL
+
+import pipenv.patched.notpip
+from pipenv.patched.notpip._internal.compat import WINDOWS
+from pipenv.patched.notpip._internal.exceptions import HashMismatch, InstallationError
+from pipenv.patched.notpip._internal.locations import write_delete_marker_file
+from pipenv.patched.notpip._internal.models import PyPI
+from pipenv.patched.notpip._internal.utils.encoding import auto_decode
+from pipenv.patched.notpip._internal.utils.filesystem import check_path_owner
+from pipenv.patched.notpip._internal.utils.glibc import libc_ver
+from pipenv.patched.notpip._internal.utils.logging import indent_log
+from pipenv.patched.notpip._internal.utils.misc import (
     ARCHIVE_EXTENSIONS, ask_path_exists, backup_dir, call_subprocess, consume,
     display_path, format_size, get_installed_version, rmtree, splitext,
     unpack_file,
 )
-from notpip._internal.utils.setuptools_build import SETUPTOOLS_SHIM
-from notpip._internal.utils.temp_dir import TempDirectory
-from notpip._internal.utils.ui import DownloadProgressProvider
-from notpip._internal.vcs import vcs
+from pipenv.patched.notpip._internal.utils.setuptools_build import SETUPTOOLS_SHIM
+from pipenv.patched.notpip._internal.utils.temp_dir import TempDirectory
+from pipenv.patched.notpip._internal.utils.ui import DownloadProgressProvider
+from pipenv.patched.notpip._internal.vcs import vcs
 
 try:
     import ssl  # noqa
@@ -96,7 +96,7 @@ def user_agent():
         data["implementation"]["version"] = platform.python_version()
 
     if sys.platform.startswith("linux"):
-        from notpip._vendor import distro
+        from pipenv.patched.notpip._vendor import distro
         distro_infos = dict(filter(
             lambda x: x[1],
             zip(["name", "version", "id"], distro.linux_distribution()),
diff --git a/pipenv/patched/notpip/_internal/exceptions.py b/pipenv/patched/notpip/_internal/exceptions.py
index 367a0e27..43595977 100644
--- a/pipenv/patched/notpip/_internal/exceptions.py
+++ b/pipenv/patched/notpip/_internal/exceptions.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 
 from itertools import chain, groupby, repeat
 
-from notpip._vendor.six import iteritems
+from pipenv.patched.notpip._vendor.six import iteritems
 
 
 class PipError(Exception):
@@ -163,7 +163,7 @@ class HashMissing(HashError):
 
     def body(self):
         # Dodge circular import.
-        from notpip._internal.utils.hashes import FAVORITE_HASH
+        from pipenv.patched.notpip._internal.utils.hashes import FAVORITE_HASH
 
         package = None
         if self.req:
diff --git a/pipenv/patched/notpip/_internal/index.py b/pipenv/patched/notpip/_internal/index.py
index 5225dcab..8fa39c4f 100644
--- a/pipenv/patched/notpip/_internal/index.py
+++ b/pipenv/patched/notpip/_internal/index.py
@@ -12,31 +12,31 @@ import sys
 import warnings
 from collections import namedtuple
 
-from notpip._vendor import html5lib, requests, six
-from notpip._vendor.distlib.compat import unescape
-from notpip._vendor.packaging import specifiers
-from notpip._vendor.packaging.utils import canonicalize_name
-from notpip._vendor.packaging.version import parse as parse_version
-from notpip._vendor.requests.exceptions import SSLError
-from notpip._vendor.six.moves.urllib import parse as urllib_parse
-from notpip._vendor.six.moves.urllib import request as urllib_request
-
-from notpip._internal.compat import ipaddress
-from notpip._internal.download import HAS_TLS, is_url, path_to_url, url_to_path
-from notpip._internal.exceptions import (
+from pipenv.patched.notpip._vendor import html5lib, requests, six
+from pipenv.patched.notpip._vendor.distlib.compat import unescape
+from pipenv.patched.notpip._vendor.packaging import specifiers
+from pipenv.patched.notpip._vendor.packaging.utils import canonicalize_name
+from pipenv.patched.notpip._vendor.packaging.version import parse as parse_version
+from pipenv.patched.notpip._vendor.requests.exceptions import SSLError
+from pipenv.patched.notpip._vendor.six.moves.urllib import parse as urllib_parse
+from pipenv.patched.notpip._vendor.six.moves.urllib import request as urllib_request
+
+from pipenv.patched.notpip._internal.compat import ipaddress
+from pipenv.patched.notpip._internal.download import HAS_TLS, is_url, path_to_url, url_to_path
+from pipenv.patched.notpip._internal.exceptions import (
     BestVersionAlreadyInstalled, DistributionNotFound, InvalidWheelFilename,
     UnsupportedWheel,
 )
-from notpip._internal.models import PyPI
-from notpip._internal.pep425tags import get_supported
-from notpip._internal.utils.deprecation import RemovedInPip11Warning
-from notpip._internal.utils.logging import indent_log
-from notpip._internal.utils.misc import (
+from pipenv.patched.notpip._internal.models import PyPI
+from pipenv.patched.notpip._internal.pep425tags import get_supported
+from pipenv.patched.notpip._internal.utils.deprecation import RemovedInPip11Warning
+from pipenv.patched.notpip._internal.utils.logging import indent_log
+from pipenv.patched.notpip._internal.utils.misc import (
     ARCHIVE_EXTENSIONS, SUPPORTED_EXTENSIONS, cached_property, normalize_path,
     splitext,
 )
-from notpip._internal.utils.packaging import check_requires_python
-from notpip._internal.wheel import Wheel, wheel_ext
+from pipenv.patched.notpip._internal.utils.packaging import check_requires_python
+from pipenv.patched.notpip._internal.wheel import Wheel, wheel_ext
 
 __all__ = ['FormatControl', 'fmt_ctl_handle_mutual_exclude', 'PackageFinder']
 
@@ -804,7 +804,7 @@ class HTMLPage(object):
         url = url.split('#', 1)[0]
 
         # Check for VCS schemes that do not support lookup as web pages.
-        from notpip._internal.vcs import VcsSupport
+        from pipenv.patched.notpip._internal.vcs import VcsSupport
         for scheme in VcsSupport.schemes:
             if url.lower().startswith(scheme) and url[len(scheme)] in '+:':
                 logger.debug('Cannot look at %s URL %s', scheme, link)
@@ -1086,7 +1086,7 @@ class Link(object):
         Determines if this points to an actual artifact (e.g. a tarball) or if
         it points to an "abstract" thing like a path or a VCS location.
         """
-        from notpip._internal.vcs import vcs
+        from pipenv.patched.notpip._internal.vcs import vcs
 
         if self.scheme in vcs.all_schemes:
             return False
diff --git a/pipenv/patched/notpip/_internal/locations.py b/pipenv/patched/notpip/_internal/locations.py
index 5ef8075d..43586f4b 100644
--- a/pipenv/patched/notpip/_internal/locations.py
+++ b/pipenv/patched/notpip/_internal/locations.py
@@ -10,8 +10,8 @@ import sysconfig
 from distutils import sysconfig as distutils_sysconfig
 from distutils.command.install import SCHEME_KEYS, install  # type: ignore
 
-from notpip._internal.compat import WINDOWS, expanduser
-from notpip._internal.utils import appdirs
+from pipenv.patched.notpip._internal.compat import WINDOWS, expanduser
+from pipenv.patched.notpip._internal.utils import appdirs
 
 # Application Directories
 USER_CACHE_DIR = appdirs.user_cache_dir("pip")
diff --git a/pipenv/patched/notpip/_internal/models/__init__.py b/pipenv/patched/notpip/_internal/models/__init__.py
index 73edc8e5..e4de2e9d 100644
--- a/pipenv/patched/notpip/_internal/models/__init__.py
+++ b/pipenv/patched/notpip/_internal/models/__init__.py
@@ -1,4 +1,4 @@
-from notpip._internal.models.index import Index, PyPI
+from pipenv.patched.notpip._internal.models.index import Index, PyPI
 
 
 __all__ = ["Index", "PyPI"]
diff --git a/pipenv/patched/notpip/_internal/models/index.py b/pipenv/patched/notpip/_internal/models/index.py
index 564df119..f9e84894 100644
--- a/pipenv/patched/notpip/_internal/models/index.py
+++ b/pipenv/patched/notpip/_internal/models/index.py
@@ -1,4 +1,4 @@
-from notpip._vendor.six.moves.urllib import parse as urllib_parse
+from pipenv.patched.notpip._vendor.six.moves.urllib import parse as urllib_parse
 
 
 class Index(object):
diff --git a/pipenv/patched/notpip/_internal/operations/check.py b/pipenv/patched/notpip/_internal/operations/check.py
index c8a1928f..bc2c2b61 100644
--- a/pipenv/patched/notpip/_internal/operations/check.py
+++ b/pipenv/patched/notpip/_internal/operations/check.py
@@ -3,15 +3,15 @@
 
 from collections import namedtuple
 
-from notpip._vendor.packaging.utils import canonicalize_name
+from pipenv.patched.notpip._vendor.packaging.utils import canonicalize_name
 
-from notpip._internal.operations.prepare import make_abstract_dist
+from pipenv.patched.notpip._internal.operations.prepare import make_abstract_dist
 
-from notpip._internal.utils.misc import get_installed_distributions
-from notpip._internal.utils.typing import MYPY_CHECK_RUNNING
+from pipenv.patched.notpip._internal.utils.misc import get_installed_distributions
+from pipenv.patched.notpip._internal.utils.typing import MYPY_CHECK_RUNNING
 
 if MYPY_CHECK_RUNNING:
-    from notpip._internal.req.req_install import InstallRequirement
+    from pipenv.patched.notpip._internal.req.req_install import InstallRequirement
     from typing import Any, Dict, Iterator, Set, Tuple, List
 
     # Shorthands
diff --git a/pipenv/patched/notpip/_internal/operations/freeze.py b/pipenv/patched/notpip/_internal/operations/freeze.py
index 6cc259d4..e81cc1cb 100644
--- a/pipenv/patched/notpip/_internal/operations/freeze.py
+++ b/pipenv/patched/notpip/_internal/operations/freeze.py
@@ -6,15 +6,15 @@ import os
 import re
 import warnings
 
-from notpip._vendor import pkg_resources, six
-from notpip._vendor.packaging.utils import canonicalize_name
-from notpip._vendor.pkg_resources import RequirementParseError
-
-from notpip._internal.exceptions import InstallationError
-from notpip._internal.req import InstallRequirement
-from notpip._internal.req.req_file import COMMENT_RE
-from notpip._internal.utils.deprecation import RemovedInPip11Warning
-from notpip._internal.utils.misc import (
+from pipenv.patched.notpip._vendor import pkg_resources, six
+from pipenv.patched.notpip._vendor.packaging.utils import canonicalize_name
+from pipenv.patched.notpip._vendor.pkg_resources import RequirementParseError
+
+from pipenv.patched.notpip._internal.exceptions import InstallationError
+from pipenv.patched.notpip._internal.req import InstallRequirement
+from pipenv.patched.notpip._internal.req.req_file import COMMENT_RE
+from pipenv.patched.notpip._internal.utils.deprecation import RemovedInPip11Warning
+from pipenv.patched.notpip._internal.utils.misc import (
     dist_is_editable, get_installed_distributions,
 )
 
@@ -170,7 +170,7 @@ class FrozenRequirement(object):
     def from_dist(cls, dist, dependency_links):
         location = os.path.normcase(os.path.abspath(dist.location))
         comments = []
-        from notpip._internal.vcs import vcs, get_src_requirement
+        from pipenv.patched.notpip._internal.vcs import vcs, get_src_requirement
         if dist_is_editable(dist) and vcs.get_backend_name(location):
             editable = True
             try:
diff --git a/pipenv/patched/notpip/_internal/operations/prepare.py b/pipenv/patched/notpip/_internal/operations/prepare.py
index f0ac1cbc..5e9f8a6b 100644
--- a/pipenv/patched/notpip/_internal/operations/prepare.py
+++ b/pipenv/patched/notpip/_internal/operations/prepare.py
@@ -7,26 +7,26 @@ import os
 import sys
 from copy import copy
 
-from notpip._vendor import pkg_resources, requests
+from pipenv.patched.notpip._vendor import pkg_resources, requests
 
-from notpip._internal.build_env import NoOpBuildEnvironment
-from notpip._internal.compat import expanduser
-from notpip._internal.download import (
+from pipenv.patched.notpip._internal.build_env import NoOpBuildEnvironment
+from pipenv.patched.notpip._internal.compat import expanduser
+from pipenv.patched.notpip._internal.download import (
     is_dir_url, is_file_url, is_vcs_url, unpack_url, url_to_path,
 )
-from notpip._internal.exceptions import (
+from pipenv.patched.notpip._internal.exceptions import (
     DirectoryUrlHashUnsupported, HashUnpinned, InstallationError,
     PreviousBuildDirError, VcsHashUnsupported,
 )
-from notpip._internal.index import FormatControl
-from notpip._internal.req.req_install import InstallRequirement
-from notpip._internal.utils.hashes import MissingHashes
-from notpip._internal.utils.logging import indent_log
-from notpip._internal.utils.misc import (
+from pipenv.patched.notpip._internal.index import FormatControl
+from pipenv.patched.notpip._internal.req.req_install import InstallRequirement
+from pipenv.patched.notpip._internal.utils.hashes import MissingHashes
+from pipenv.patched.notpip._internal.utils.logging import indent_log
+from pipenv.patched.notpip._internal.utils.misc import (
     call_subprocess, display_path, normalize_path,
 )
-from notpip._internal.utils.ui import open_spinner
-from notpip._internal.vcs import vcs
+from pipenv.patched.notpip._internal.utils.ui import open_spinner
+from pipenv.patched.notpip._internal.vcs import vcs
 
 logger = logging.getLogger(__name__)
 
diff --git a/pipenv/patched/notpip/_internal/pep425tags.py b/pipenv/patched/notpip/_internal/pep425tags.py
index 0cb2c709..c2290ab9 100644
--- a/pipenv/patched/notpip/_internal/pep425tags.py
+++ b/pipenv/patched/notpip/_internal/pep425tags.py
@@ -10,7 +10,7 @@ import sysconfig
 import warnings
 from collections import OrderedDict
 
-import notpip._internal.utils.glibc
+import pipenv.patched.notpip._internal.utils.glibc
 
 logger = logging.getLogger(__name__)
 
diff --git a/pipenv/patched/notpip/_internal/req/__init__.py b/pipenv/patched/notpip/_internal/req/__init__.py
index d4bb7e91..9eece6ec 100644
--- a/pipenv/patched/notpip/_internal/req/__init__.py
+++ b/pipenv/patched/notpip/_internal/req/__init__.py
@@ -5,7 +5,7 @@ import logging
 from .req_install import InstallRequirement
 from .req_set import RequirementSet
 from .req_file import parse_requirements
-from notpip._internal.utils.logging import indent_log
+from pipenv.patched.notpip._internal.utils.logging import indent_log
 
 
 __all__ = [
diff --git a/pipenv/patched/notpip/_internal/req/req_file.py b/pipenv/patched/notpip/_internal/req/req_file.py
index 274fcc65..66a58022 100644
--- a/pipenv/patched/notpip/_internal/req/req_file.py
+++ b/pipenv/patched/notpip/_internal/req/req_file.py
@@ -10,13 +10,13 @@ import re
 import shlex
 import sys
 
-from notpip._vendor.six.moves import filterfalse
-from notpip._vendor.six.moves.urllib import parse as urllib_parse
+from pipenv.patched.notpip._vendor.six.moves import filterfalse
+from pipenv.patched.notpip._vendor.six.moves.urllib import parse as urllib_parse
 
-from notpip._internal import cmdoptions
-from notpip._internal.download import get_file_content
-from notpip._internal.exceptions import RequirementsFileParseError
-from notpip._internal.req.req_install import InstallRequirement
+from pipenv.patched.notpip._internal import cmdoptions
+from pipenv.patched.notpip._internal.download import get_file_content
+from pipenv.patched.notpip._internal.exceptions import RequirementsFileParseError
+from pipenv.patched.notpip._internal.req.req_install import InstallRequirement
 
 __all__ = ['parse_requirements']
 
diff --git a/pipenv/patched/notpip/_internal/req/req_install.py b/pipenv/patched/notpip/_internal/req/req_install.py
index 442bf3ad..6347200c 100644
--- a/pipenv/patched/notpip/_internal/req/req_install.py
+++ b/pipenv/patched/notpip/_internal/req/req_install.py
@@ -12,39 +12,39 @@ import zipfile
 from distutils.util import change_root
 from email.parser import FeedParser  # type: ignore
 
-from notpip._vendor import pkg_resources, pytoml, six
-from notpip._vendor.packaging import specifiers
-from notpip._vendor.packaging.markers import Marker
-from notpip._vendor.packaging.requirements import InvalidRequirement, Requirement
-from notpip._vendor.packaging.utils import canonicalize_name
-from notpip._vendor.packaging.version import parse as parse_version
-from notpip._vendor.packaging.version import Version
-from notpip._vendor.pkg_resources import RequirementParseError, parse_requirements
-
-from notpip._internal import wheel
-from notpip._internal.build_env import BuildEnvironment
-from notpip._internal.compat import native_str
-from notpip._internal.download import (
+from pipenv.patched.notpip._vendor import pkg_resources, pytoml, six
+from pipenv.patched.notpip._vendor.packaging import specifiers
+from pipenv.patched.notpip._vendor.packaging.markers import Marker
+from pipenv.patched.notpip._vendor.packaging.requirements import InvalidRequirement, Requirement
+from pipenv.patched.notpip._vendor.packaging.utils import canonicalize_name
+from pipenv.patched.notpip._vendor.packaging.version import parse as parse_version
+from pipenv.patched.notpip._vendor.packaging.version import Version
+from pipenv.patched.notpip._vendor.pkg_resources import RequirementParseError, parse_requirements
+
+from pipenv.patched.notpip._internal import wheel
+from pipenv.patched.notpip._internal.build_env import BuildEnvironment
+from pipenv.patched.notpip._internal.compat import native_str
+from pipenv.patched.notpip._internal.download import (
     is_archive_file, is_url, path_to_url, url_to_path,
 )
-from notpip._internal.exceptions import InstallationError, UninstallationError
-from notpip._internal.locations import (
+from pipenv.patched.notpip._internal.exceptions import InstallationError, UninstallationError
+from pipenv.patched.notpip._internal.locations import (
     PIP_DELETE_MARKER_FILENAME, running_under_virtualenv,
 )
-from notpip._internal.req.req_uninstall import UninstallPathSet
-from notpip._internal.utils.deprecation import RemovedInPip11Warning
-from notpip._internal.utils.hashes import Hashes
-from notpip._internal.utils.logging import indent_log
-from notpip._internal.utils.misc import (
+from pipenv.patched.notpip._internal.req.req_uninstall import UninstallPathSet
+from pipenv.patched.notpip._internal.utils.deprecation import RemovedInPip11Warning
+from pipenv.patched.notpip._internal.utils.hashes import Hashes
+from pipenv.patched.notpip._internal.utils.logging import indent_log
+from pipenv.patched.notpip._internal.utils.misc import (
     _make_build_dir, ask_path_exists, backup_dir, call_subprocess,
     display_path, dist_in_site_packages, dist_in_usersite, ensure_dir,
     get_installed_version, is_installable_dir, read_text_file, rmtree,
 )
-from notpip._internal.utils.setuptools_build import SETUPTOOLS_SHIM
-from notpip._internal.utils.temp_dir import TempDirectory
-from notpip._internal.utils.ui import open_spinner
-from notpip._internal.vcs import vcs
-from notpip._internal.wheel import Wheel, move_wheel_files
+from pipenv.patched.notpip._internal.utils.setuptools_build import SETUPTOOLS_SHIM
+from pipenv.patched.notpip._internal.utils.temp_dir import TempDirectory
+from pipenv.patched.notpip._internal.utils.ui import open_spinner
+from pipenv.patched.notpip._internal.vcs import vcs
+from pipenv.patched.notpip._internal.wheel import Wheel, move_wheel_files
 
 logger = logging.getLogger(__name__)
 
@@ -88,7 +88,7 @@ class InstallRequirement(object):
         if link is not None:
             self.link = self.original_link = link
         else:
-            from notpip._internal.index import Link
+            from pipenv.patched.notpip._internal.index import Link
             self.link = self.original_link = req and req.url and Link(req.url)
 
         if extras:
@@ -132,7 +132,7 @@ class InstallRequirement(object):
     @classmethod
     def from_editable(cls, editable_req, comes_from=None, isolated=False,
                       options=None, wheel_cache=None, constraint=False):
-        from notpip._internal.index import Link
+        from pipenv.patched.notpip._internal.index import Link
 
         name, url, extras_override = parse_editable(editable_req)
         if url.startswith('file:'):
@@ -178,7 +178,7 @@ class InstallRequirement(object):
         """Creates an InstallRequirement from a name, which might be a
         requirement, directory containing 'setup.py', filename, or URL.
         """
-        from notpip._internal.index import Link
+        from pipenv.patched.notpip._internal.index import Link
 
         if is_url(name):
             marker_sep = '; '
@@ -1032,7 +1032,7 @@ def parse_editable(editable_req):
         .[some_extra]
     """
 
-    from notpip._internal.index import Link
+    from pipenv.patched.notpip._internal.index import Link
 
     url = editable_req
 
diff --git a/pipenv/patched/notpip/_internal/req/req_set.py b/pipenv/patched/notpip/_internal/req/req_set.py
index d2c83b5e..2fd09f5e 100644
--- a/pipenv/patched/notpip/_internal/req/req_set.py
+++ b/pipenv/patched/notpip/_internal/req/req_set.py
@@ -3,9 +3,9 @@ from __future__ import absolute_import
 import logging
 from collections import OrderedDict
 
-from notpip._internal.exceptions import InstallationError
-from notpip._internal.utils.logging import indent_log
-from notpip._internal.wheel import Wheel
+from pipenv.patched.notpip._internal.exceptions import InstallationError
+from pipenv.patched.notpip._internal.utils.logging import indent_log
+from pipenv.patched.notpip._internal.wheel import Wheel
 
 logger = logging.getLogger(__name__)
 
diff --git a/pipenv/patched/notpip/_internal/req/req_uninstall.py b/pipenv/patched/notpip/_internal/req/req_uninstall.py
index 4d3b6743..0104a09e 100644
--- a/pipenv/patched/notpip/_internal/req/req_uninstall.py
+++ b/pipenv/patched/notpip/_internal/req/req_uninstall.py
@@ -7,17 +7,17 @@ import os
 import sys
 import sysconfig
 
-from notpip._vendor import pkg_resources
+from pipenv.patched.notpip._vendor import pkg_resources
 
-from notpip._internal.compat import WINDOWS, cache_from_source, uses_pycache
-from notpip._internal.exceptions import UninstallationError
-from notpip._internal.locations import bin_py, bin_user
-from notpip._internal.utils.logging import indent_log
-from notpip._internal.utils.misc import (
+from pipenv.patched.notpip._internal.compat import WINDOWS, cache_from_source, uses_pycache
+from pipenv.patched.notpip._internal.exceptions import UninstallationError
+from pipenv.patched.notpip._internal.locations import bin_py, bin_user
+from pipenv.patched.notpip._internal.utils.logging import indent_log
+from pipenv.patched.notpip._internal.utils.misc import (
     FakeFile, ask, dist_in_usersite, dist_is_local, egg_link_path, is_local,
     normalize_path, renames,
 )
-from notpip._internal.utils.temp_dir import TempDirectory
+from pipenv.patched.notpip._internal.utils.temp_dir import TempDirectory
 
 logger = logging.getLogger(__name__)
 
diff --git a/pipenv/patched/notpip/_internal/resolve.py b/pipenv/patched/notpip/_internal/resolve.py
index 14e3d298..5b3d0c00 100644
--- a/pipenv/patched/notpip/_internal/resolve.py
+++ b/pipenv/patched/notpip/_internal/resolve.py
@@ -14,15 +14,15 @@ import logging
 from collections import defaultdict
 from itertools import chain
 
-from notpip._internal.exceptions import (
+from pipenv.patched.notpip._internal.exceptions import (
     BestVersionAlreadyInstalled, DistributionNotFound, HashError, HashErrors,
     UnsupportedPythonVersion,
 )
 
-from notpip._internal.req.req_install import InstallRequirement
-from notpip._internal.utils.logging import indent_log
-from notpip._internal.utils.misc import dist_in_usersite, ensure_dir
-from notpip._internal.utils.packaging import check_dist_requires_python
+from pipenv.patched.notpip._internal.req.req_install import InstallRequirement
+from pipenv.patched.notpip._internal.utils.logging import indent_log
+from pipenv.patched.notpip._internal.utils.misc import dist_in_usersite, ensure_dir
+from pipenv.patched.notpip._internal.utils.packaging import check_dist_requires_python
 
 logger = logging.getLogger(__name__)
 
diff --git a/pipenv/patched/notpip/_internal/utils/appdirs.py b/pipenv/patched/notpip/_internal/utils/appdirs.py
index f84ada95..291de7a9 100644
--- a/pipenv/patched/notpip/_internal/utils/appdirs.py
+++ b/pipenv/patched/notpip/_internal/utils/appdirs.py
@@ -7,9 +7,9 @@ from __future__ import absolute_import
 import os
 import sys
 
-from notpip._vendor.six import PY2, text_type
+from pipenv.patched.notpip._vendor.six import PY2, text_type
 
-from notpip._internal.compat import WINDOWS, expanduser
+from pipenv.patched.notpip._internal.compat import WINDOWS, expanduser
 
 
 def user_cache_dir(appname):
diff --git a/pipenv/patched/notpip/_internal/utils/deprecation.py b/pipenv/patched/notpip/_internal/utils/deprecation.py
index 66ee504c..e5ab59ab 100644
--- a/pipenv/patched/notpip/_internal/utils/deprecation.py
+++ b/pipenv/patched/notpip/_internal/utils/deprecation.py
@@ -6,7 +6,7 @@ from __future__ import absolute_import
 import logging
 import warnings
 
-from notpip._internal.utils.typing import MYPY_CHECK_RUNNING
+from pipenv.patched.notpip._internal.utils.typing import MYPY_CHECK_RUNNING
 
 if MYPY_CHECK_RUNNING:
     from typing import Any
diff --git a/pipenv/patched/notpip/_internal/utils/filesystem.py b/pipenv/patched/notpip/_internal/utils/filesystem.py
index 0eee26a7..91976486 100644
--- a/pipenv/patched/notpip/_internal/utils/filesystem.py
+++ b/pipenv/patched/notpip/_internal/utils/filesystem.py
@@ -1,7 +1,7 @@
 import os
 import os.path
 
-from notpip._internal.compat import get_path_uid
+from pipenv.patched.notpip._internal.compat import get_path_uid
 
 
 def check_path_owner(path):
diff --git a/pipenv/patched/notpip/_internal/utils/hashes.py b/pipenv/patched/notpip/_internal/utils/hashes.py
index 1e8fd889..818f5505 100644
--- a/pipenv/patched/notpip/_internal/utils/hashes.py
+++ b/pipenv/patched/notpip/_internal/utils/hashes.py
@@ -2,12 +2,12 @@ from __future__ import absolute_import
 
 import hashlib
 
-from notpip._vendor.six import iteritems, iterkeys, itervalues
+from pipenv.patched.notpip._vendor.six import iteritems, iterkeys, itervalues
 
-from notpip._internal.exceptions import (
+from pipenv.patched.notpip._internal.exceptions import (
     HashMismatch, HashMissing, InstallationError,
 )
-from notpip._internal.utils.misc import read_chunks
+from pipenv.patched.notpip._internal.utils.misc import read_chunks
 
 # The recommended hash algo of the moment. Change this whenever the state of
 # the art changes; it won't hurt backward compatibility.
diff --git a/pipenv/patched/notpip/_internal/utils/logging.py b/pipenv/patched/notpip/_internal/utils/logging.py
index 3b40c83f..5864fe14 100644
--- a/pipenv/patched/notpip/_internal/utils/logging.py
+++ b/pipenv/patched/notpip/_internal/utils/logging.py
@@ -5,8 +5,8 @@ import logging
 import logging.handlers
 import os
 
-from notpip._internal.compat import WINDOWS
-from notpip._internal.utils.misc import ensure_dir
+from pipenv.patched.notpip._internal.compat import WINDOWS
+from pipenv.patched.notpip._internal.utils.misc import ensure_dir
 
 try:
     import threading
@@ -15,7 +15,7 @@ except ImportError:
 
 
 try:
-    from notpip._vendor import colorama
+    from pipenv.patched.notpip._vendor import colorama
 # Lots of different errors can come from this, including SystemError and
 # ImportError.
 except Exception:
diff --git a/pipenv/patched/notpip/_internal/utils/misc.py b/pipenv/patched/notpip/_internal/utils/misc.py
index b77907a1..459b309a 100644
--- a/pipenv/patched/notpip/_internal/utils/misc.py
+++ b/pipenv/patched/notpip/_internal/utils/misc.py
@@ -18,16 +18,16 @@ import tarfile
 import zipfile
 from collections import deque
 
-from notpip._vendor import pkg_resources
+from pipenv.patched.notpip._vendor import pkg_resources
 # NOTE: retrying is not annotated in typeshed as on 2017-07-17, which is
 #       why we ignore the type on this import.
-from notpip._vendor.retrying import retry  # type: ignore
-from notpip._vendor.six import PY2
-from notpip._vendor.six.moves import input
+from pipenv.patched.notpip._vendor.retrying import retry  # type: ignore
+from pipenv.patched.notpip._vendor.six import PY2
+from pipenv.patched.notpip._vendor.six.moves import input
 
-from notpip._internal.compat import console_to_str, expanduser, stdlib_pkgs
-from notpip._internal.exceptions import InstallationError
-from notpip._internal.locations import (
+from pipenv.patched.notpip._internal.compat import console_to_str, expanduser, stdlib_pkgs
+from pipenv.patched.notpip._internal.exceptions import InstallationError
+from pipenv.patched.notpip._internal.locations import (
     running_under_virtualenv, site_packages, user_site, virtualenv_no_global,
     write_delete_marker_file,
 )
@@ -582,7 +582,7 @@ def unpack_file(filename, location, content_type, link):
     elif (content_type and content_type.startswith('text/html') and
             is_svn_page(file_contents(filename))):
         # We don't really care about this
-        from notpip._internal.vcs.subversion import Subversion
+        from pipenv.patched.notpip._internal.vcs.subversion import Subversion
         Subversion('svn+' + link.url).unpack(location)
     else:
         # FIXME: handle?
diff --git a/pipenv/patched/notpip/_internal/utils/outdated.py b/pipenv/patched/notpip/_internal/utils/outdated.py
index c0f401f2..87911380 100644
--- a/pipenv/patched/notpip/_internal/utils/outdated.py
+++ b/pipenv/patched/notpip/_internal/utils/outdated.py
@@ -6,14 +6,14 @@ import logging
 import os.path
 import sys
 
-from notpip._vendor import lockfile
-from notpip._vendor.packaging import version as packaging_version
-
-from notpip._internal.compat import WINDOWS
-from notpip._internal.index import PackageFinder
-from notpip._internal.locations import USER_CACHE_DIR, running_under_virtualenv
-from notpip._internal.utils.filesystem import check_path_owner
-from notpip._internal.utils.misc import ensure_dir, get_installed_version
+from pipenv.patched.notpip._vendor import lockfile
+from pipenv.patched.notpip._vendor.packaging import version as packaging_version
+
+from pipenv.patched.notpip._internal.compat import WINDOWS
+from pipenv.patched.notpip._internal.index import PackageFinder
+from pipenv.patched.notpip._internal.locations import USER_CACHE_DIR, running_under_virtualenv
+from pipenv.patched.notpip._internal.utils.filesystem import check_path_owner
+from pipenv.patched.notpip._internal.utils.misc import ensure_dir, get_installed_version
 
 SELFCHECK_DATE_FMT = "%Y-%m-%dT%H:%M:%SZ"
 
diff --git a/pipenv/patched/notpip/_internal/utils/packaging.py b/pipenv/patched/notpip/_internal/utils/packaging.py
index a8d0e674..eee21469 100644
--- a/pipenv/patched/notpip/_internal/utils/packaging.py
+++ b/pipenv/patched/notpip/_internal/utils/packaging.py
@@ -5,10 +5,10 @@ import os
 import sys
 from email.parser import FeedParser  # type: ignore
 
-from notpip._vendor import pkg_resources
-from notpip._vendor.packaging import specifiers, version
+from pipenv.patched.notpip._vendor import pkg_resources
+from pipenv.patched.notpip._vendor.packaging import specifiers, version
 
-from notpip._internal import exceptions
+from pipenv.patched.notpip._internal import exceptions
 
 logger = logging.getLogger(__name__)
 
diff --git a/pipenv/patched/notpip/_internal/utils/temp_dir.py b/pipenv/patched/notpip/_internal/utils/temp_dir.py
index a425a81c..ba472b0d 100644
--- a/pipenv/patched/notpip/_internal/utils/temp_dir.py
+++ b/pipenv/patched/notpip/_internal/utils/temp_dir.py
@@ -4,7 +4,7 @@ import logging
 import os.path
 import tempfile
 
-from notpip._internal.utils.misc import rmtree
+from pipenv.patched.notpip._internal.utils.misc import rmtree
 
 logger = logging.getLogger(__name__)
 
diff --git a/pipenv/patched/notpip/_internal/utils/typing.py b/pipenv/patched/notpip/_internal/utils/typing.py
index fc5186c6..170cc6c0 100644
--- a/pipenv/patched/notpip/_internal/utils/typing.py
+++ b/pipenv/patched/notpip/_internal/utils/typing.py
@@ -18,7 +18,7 @@ curious maintainer can reach here to read this.
 
 In pip, all static-typing related imports should be guarded as follows:
 
-    from notpip.utils.typing import MYPY_CHECK_RUNNING
+    from pipenv.patched.notpip.utils.typing import MYPY_CHECK_RUNNING
 
     if MYPY_CHECK_RUNNING:
         from typing import ...
diff --git a/pipenv/patched/notpip/_internal/utils/ui.py b/pipenv/patched/notpip/_internal/utils/ui.py
index 276dcea3..2b692a81 100644
--- a/pipenv/patched/notpip/_internal/utils/ui.py
+++ b/pipenv/patched/notpip/_internal/utils/ui.py
@@ -7,24 +7,24 @@ import sys
 import time
 from signal import SIGINT, default_int_handler, signal
 
-from notpip._vendor import six
-from notpip._vendor.progress.bar import (
+from pipenv.patched.notpip._vendor import six
+from pipenv.patched.notpip._vendor.progress.bar import (
     Bar, ChargingBar, FillingCirclesBar, FillingSquaresBar, IncrementalBar,
     ShadyBar,
 )
-from notpip._vendor.progress.helpers import HIDE_CURSOR, SHOW_CURSOR, WritelnMixin
-from notpip._vendor.progress.spinner import Spinner
+from pipenv.patched.notpip._vendor.progress.helpers import HIDE_CURSOR, SHOW_CURSOR, WritelnMixin
+from pipenv.patched.notpip._vendor.progress.spinner import Spinner
 
-from notpip._internal.compat import WINDOWS
-from notpip._internal.utils.logging import get_indentation
-from notpip._internal.utils.misc import format_size
-from notpip._internal.utils.typing import MYPY_CHECK_RUNNING
+from pipenv.patched.notpip._internal.compat import WINDOWS
+from pipenv.patched.notpip._internal.utils.logging import get_indentation
+from pipenv.patched.notpip._internal.utils.misc import format_size
+from pipenv.patched.notpip._internal.utils.typing import MYPY_CHECK_RUNNING
 
 if MYPY_CHECK_RUNNING:
     from typing import Any
 
 try:
-    from notpip._vendor import colorama
+    from pipenv.patched.notpip._vendor import colorama
 # Lots of different errors can come from this, including SystemError and
 # ImportError.
 except Exception:
diff --git a/pipenv/patched/notpip/_internal/vcs/__init__.py b/pipenv/patched/notpip/_internal/vcs/__init__.py
index 07de36d9..f115de4c 100644
--- a/pipenv/patched/notpip/_internal/vcs/__init__.py
+++ b/pipenv/patched/notpip/_internal/vcs/__init__.py
@@ -8,17 +8,17 @@ import os
 import shutil
 import sys
 
-from notpip._vendor.six.moves.urllib import parse as urllib_parse
+from pipenv.patched.notpip._vendor.six.moves.urllib import parse as urllib_parse
 
-from notpip._internal.exceptions import BadCommand
-from notpip._internal.utils.misc import (
+from pipenv.patched.notpip._internal.exceptions import BadCommand
+from pipenv.patched.notpip._internal.utils.misc import (
     display_path, backup_dir, call_subprocess, rmtree, ask_path_exists,
 )
-from notpip._internal.utils.typing import MYPY_CHECK_RUNNING
+from pipenv.patched.notpip._internal.utils.typing import MYPY_CHECK_RUNNING
 
 if MYPY_CHECK_RUNNING:
     from typing import Dict, Optional, Tuple
-    from notpip._internal.basecommand import Command
+    from pipenv.patched.notpip._internal.basecommand import Command
 
 __all__ = ['vcs', 'get_src_requirement']
 
diff --git a/pipenv/patched/notpip/_internal/vcs/bazaar.py b/pipenv/patched/notpip/_internal/vcs/bazaar.py
index a78ac8b9..f9a36a93 100644
--- a/pipenv/patched/notpip/_internal/vcs/bazaar.py
+++ b/pipenv/patched/notpip/_internal/vcs/bazaar.py
@@ -3,12 +3,12 @@ from __future__ import absolute_import
 import logging
 import os
 
-from notpip._vendor.six.moves.urllib import parse as urllib_parse
+from pipenv.patched.notpip._vendor.six.moves.urllib import parse as urllib_parse
 
-from notpip._internal.download import path_to_url
-from notpip._internal.utils.misc import display_path, rmtree
-from notpip._internal.utils.temp_dir import TempDirectory
-from notpip._internal.vcs import VersionControl, vcs
+from pipenv.patched.notpip._internal.download import path_to_url
+from pipenv.patched.notpip._internal.utils.misc import display_path, rmtree
+from pipenv.patched.notpip._internal.utils.temp_dir import TempDirectory
+from pipenv.patched.notpip._internal.vcs import VersionControl, vcs
 
 logger = logging.getLogger(__name__)
 
diff --git a/pipenv/patched/notpip/_internal/vcs/git.py b/pipenv/patched/notpip/_internal/vcs/git.py
index 581db323..dd862bfe 100644
--- a/pipenv/patched/notpip/_internal/vcs/git.py
+++ b/pipenv/patched/notpip/_internal/vcs/git.py
@@ -4,15 +4,15 @@ import logging
 import os.path
 import re
 
-from notpip._vendor.packaging.version import parse as parse_version
-from notpip._vendor.six.moves.urllib import parse as urllib_parse
-from notpip._vendor.six.moves.urllib import request as urllib_request
-
-from notpip._internal.compat import samefile
-from notpip._internal.exceptions import BadCommand
-from notpip._internal.utils.misc import display_path
-from notpip._internal.utils.temp_dir import TempDirectory
-from notpip._internal.vcs import VersionControl, vcs
+from pipenv.patched.notpip._vendor.packaging.version import parse as parse_version
+from pipenv.patched.notpip._vendor.six.moves.urllib import parse as urllib_parse
+from pipenv.patched.notpip._vendor.six.moves.urllib import request as urllib_request
+
+from pipenv.patched.notpip._internal.compat import samefile
+from pipenv.patched.notpip._internal.exceptions import BadCommand
+from pipenv.patched.notpip._internal.utils.misc import display_path
+from pipenv.patched.notpip._internal.utils.temp_dir import TempDirectory
+from pipenv.patched.notpip._internal.vcs import VersionControl, vcs
 
 urlsplit = urllib_parse.urlsplit
 urlunsplit = urllib_parse.urlunsplit
diff --git a/pipenv/patched/notpip/_internal/vcs/mercurial.py b/pipenv/patched/notpip/_internal/vcs/mercurial.py
index 58289894..e28228fc 100644
--- a/pipenv/patched/notpip/_internal/vcs/mercurial.py
+++ b/pipenv/patched/notpip/_internal/vcs/mercurial.py
@@ -3,12 +3,12 @@ from __future__ import absolute_import
 import logging
 import os
 
-from notpip._vendor.six.moves import configparser
+from pipenv.patched.notpip._vendor.six.moves import configparser
 
-from notpip._internal.download import path_to_url
-from notpip._internal.utils.misc import display_path
-from notpip._internal.utils.temp_dir import TempDirectory
-from notpip._internal.vcs import VersionControl, vcs
+from pipenv.patched.notpip._internal.download import path_to_url
+from pipenv.patched.notpip._internal.utils.misc import display_path
+from pipenv.patched.notpip._internal.utils.temp_dir import TempDirectory
+from pipenv.patched.notpip._internal.vcs import VersionControl, vcs
 
 logger = logging.getLogger(__name__)
 
diff --git a/pipenv/patched/notpip/_internal/vcs/subversion.py b/pipenv/patched/notpip/_internal/vcs/subversion.py
index d7caa653..6f480ae3 100644
--- a/pipenv/patched/notpip/_internal/vcs/subversion.py
+++ b/pipenv/patched/notpip/_internal/vcs/subversion.py
@@ -4,12 +4,12 @@ import logging
 import os
 import re
 
-from notpip._vendor.six.moves.urllib import parse as urllib_parse
+from pipenv.patched.notpip._vendor.six.moves.urllib import parse as urllib_parse
 
-from notpip._internal.index import Link
-from notpip._internal.utils.logging import indent_log
-from notpip._internal.utils.misc import display_path, rmtree
-from notpip._internal.vcs import VersionControl, vcs
+from pipenv.patched.notpip._internal.index import Link
+from pipenv.patched.notpip._internal.utils.logging import indent_log
+from pipenv.patched.notpip._internal.utils.misc import display_path, rmtree
+from pipenv.patched.notpip._internal.vcs import VersionControl, vcs
 
 _svn_xml_url_re = re.compile('url="([^"]+)"')
 _svn_rev_re = re.compile(r'committed-rev="(\d+)"')
@@ -165,7 +165,7 @@ class Subversion(VersionControl):
         return self._get_svn_url_rev(location)[0]
 
     def _get_svn_url_rev(self, location):
-        from notpip._internal.exceptions import InstallationError
+        from pipenv.patched.notpip._internal.exceptions import InstallationError
 
         entries_path = os.path.join(location, self.dirname, 'entries')
         if os.path.exists(entries_path):
diff --git a/pipenv/patched/notpip/_internal/wheel.py b/pipenv/patched/notpip/_internal/wheel.py
index 03364a59..fe3bf7d2 100644
--- a/pipenv/patched/notpip/_internal/wheel.py
+++ b/pipenv/patched/notpip/_internal/wheel.py
@@ -18,28 +18,28 @@ import warnings
 from base64 import urlsafe_b64encode
 from email.parser import Parser
 
-from notpip._vendor import pkg_resources
-from notpip._vendor.distlib.scripts import ScriptMaker
-from notpip._vendor.packaging.utils import canonicalize_name
-from notpip._vendor.six import StringIO
-
-from notpip._internal import pep425tags
-from notpip._internal.build_env import BuildEnvironment
-from notpip._internal.download import path_to_url, unpack_url
-from notpip._internal.exceptions import (
+from pipenv.patched.notpip._vendor import pkg_resources
+from pipenv.patched.notpip._vendor.distlib.scripts import ScriptMaker
+from pipenv.patched.notpip._vendor.packaging.utils import canonicalize_name
+from pipenv.patched.notpip._vendor.six import StringIO
+
+from pipenv.patched.notpip._internal import pep425tags
+from pipenv.patched.notpip._internal.build_env import BuildEnvironment
+from pipenv.patched.notpip._internal.download import path_to_url, unpack_url
+from pipenv.patched.notpip._internal.exceptions import (
     InstallationError, InvalidWheelFilename, UnsupportedWheel,
 )
-from notpip._internal.locations import (
+from pipenv.patched.notpip._internal.locations import (
     PIP_DELETE_MARKER_FILENAME, distutils_scheme,
 )
-from notpip._internal.utils.logging import indent_log
-from notpip._internal.utils.misc import (
+from pipenv.patched.notpip._internal.utils.logging import indent_log
+from pipenv.patched.notpip._internal.utils.misc import (
     call_subprocess, captured_stdout, ensure_dir, read_chunks,
 )
-from notpip._internal.utils.setuptools_build import SETUPTOOLS_SHIM
-from notpip._internal.utils.temp_dir import TempDirectory
-from notpip._internal.utils.typing import MYPY_CHECK_RUNNING
-from notpip._internal.utils.ui import open_spinner
+from pipenv.patched.notpip._internal.utils.setuptools_build import SETUPTOOLS_SHIM
+from pipenv.patched.notpip._internal.utils.temp_dir import TempDirectory
+from pipenv.patched.notpip._internal.utils.typing import MYPY_CHECK_RUNNING
+from pipenv.patched.notpip._internal.utils.ui import open_spinner
 
 if MYPY_CHECK_RUNNING:
     from typing import Dict, List, Optional
@@ -699,7 +699,7 @@ class WheelBuilder(object):
             newly built wheel, in preparation for installation.
         :return: True if all the wheels built correctly.
         """
-        from notpip._internal import index
+        from pipenv.patched.notpip._internal import index
 
         building_is_possible = self._wheel_dir or (
             autobuilding and self.wheel_cache.cache_dir
diff --git a/pipenv/patched/notpip/_vendor/__init__.py b/pipenv/patched/notpip/_vendor/__init__.py
index 41975818..774f1bf3 100644
--- a/pipenv/patched/notpip/_vendor/__init__.py
+++ b/pipenv/patched/notpip/_vendor/__init__.py
@@ -36,7 +36,7 @@ def vendored(modulename):
             __import__(modulename, globals(), locals(), level=0)
         except ImportError:
             # We can just silently allow import failures to pass here. If we
-            # got to this point it means that ``import notpip._vendor.whatever``
+            # got to this point it means that ``import pipenv.patched.notpip._vendor.whatever``
             # failed and so did ``import whatever``. Since we're importing this
             # upfront in an attempt to alias imports, not erroring here will
             # just mean we get a regular import error whenever pip *actually*
diff --git a/pipenv/patched/notpip/_vendor/cachecontrol/_cmd.py b/pipenv/patched/notpip/_vendor/cachecontrol/_cmd.py
index 6158c60e..b5e44db8 100644
--- a/pipenv/patched/notpip/_vendor/cachecontrol/_cmd.py
+++ b/pipenv/patched/notpip/_vendor/cachecontrol/_cmd.py
@@ -1,10 +1,10 @@
 import logging
 
-from notpip._vendor import requests
+from pipenv.patched.notpip._vendor import requests
 
-from notpip._vendor.cachecontrol.adapter import CacheControlAdapter
-from notpip._vendor.cachecontrol.cache import DictCache
-from notpip._vendor.cachecontrol.controller import logger
+from pipenv.patched.notpip._vendor.cachecontrol.adapter import CacheControlAdapter
+from pipenv.patched.notpip._vendor.cachecontrol.cache import DictCache
+from pipenv.patched.notpip._vendor.cachecontrol.controller import logger
 
 from argparse import ArgumentParser
 
diff --git a/pipenv/patched/notpip/_vendor/cachecontrol/adapter.py b/pipenv/patched/notpip/_vendor/cachecontrol/adapter.py
index 03ce13a8..bcf107ee 100644
--- a/pipenv/patched/notpip/_vendor/cachecontrol/adapter.py
+++ b/pipenv/patched/notpip/_vendor/cachecontrol/adapter.py
@@ -2,7 +2,7 @@ import types
 import functools
 import zlib
 
-from notpip._vendor.requests.adapters import HTTPAdapter
+from pipenv.patched.notpip._vendor.requests.adapters import HTTPAdapter
 
 from .controller import CacheController
 from .cache import DictCache
diff --git a/pipenv/patched/notpip/_vendor/cachecontrol/caches/file_cache.py b/pipenv/patched/notpip/_vendor/cachecontrol/caches/file_cache.py
index 77fb92e5..cbe75851 100644
--- a/pipenv/patched/notpip/_vendor/cachecontrol/caches/file_cache.py
+++ b/pipenv/patched/notpip/_vendor/cachecontrol/caches/file_cache.py
@@ -60,8 +60,8 @@ class FileCache(BaseCache):
             raise ValueError("Cannot use use_dir_lock and lock_class together")
 
         try:
-            from notpip._vendor.lockfile import LockFile
-            from notpip._vendor.lockfile.mkdirlockfile import MkdirLockFile
+            from pipenv.patched.notpip._vendor.lockfile import LockFile
+            from pipenv.patched.notpip._vendor.lockfile.mkdirlockfile import MkdirLockFile
         except ImportError:
             notice = dedent("""
             NOTE: In order to use the FileCache you must have
diff --git a/pipenv/patched/notpip/_vendor/cachecontrol/caches/redis_cache.py b/pipenv/patched/notpip/_vendor/cachecontrol/caches/redis_cache.py
index 94300cf1..c0458856 100644
--- a/pipenv/patched/notpip/_vendor/cachecontrol/caches/redis_cache.py
+++ b/pipenv/patched/notpip/_vendor/cachecontrol/caches/redis_cache.py
@@ -1,7 +1,7 @@
 from __future__ import division
 
 from datetime import datetime
-from notpip._vendor.cachecontrol.cache import BaseCache
+from pipenv.patched.notpip._vendor.cachecontrol.cache import BaseCache
 
 
 def total_seconds(td):
diff --git a/pipenv/patched/notpip/_vendor/cachecontrol/compat.py b/pipenv/patched/notpip/_vendor/cachecontrol/compat.py
index cea3d3be..67092cb6 100644
--- a/pipenv/patched/notpip/_vendor/cachecontrol/compat.py
+++ b/pipenv/patched/notpip/_vendor/cachecontrol/compat.py
@@ -13,14 +13,14 @@ except ImportError:
 # Handle the case where the requests module has been patched to not have
 # urllib3 bundled as part of its source.
 try:
-    from notpip._vendor.requests.packages.urllib3.response import HTTPResponse
+    from pipenv.patched.notpip._vendor.requests.packages.urllib3.response import HTTPResponse
 except ImportError:
-    from notpip._vendor.urllib3.response import HTTPResponse
+    from pipenv.patched.notpip._vendor.urllib3.response import HTTPResponse
 
 try:
-    from notpip._vendor.requests.packages.urllib3.util import is_fp_closed
+    from pipenv.patched.notpip._vendor.requests.packages.urllib3.util import is_fp_closed
 except ImportError:
-    from notpip._vendor.urllib3.util import is_fp_closed
+    from pipenv.patched.notpip._vendor.urllib3.util import is_fp_closed
 
 # Replicate some six behaviour
 try:
diff --git a/pipenv/patched/notpip/_vendor/cachecontrol/controller.py b/pipenv/patched/notpip/_vendor/cachecontrol/controller.py
index 1d705ccd..1621813c 100644
--- a/pipenv/patched/notpip/_vendor/cachecontrol/controller.py
+++ b/pipenv/patched/notpip/_vendor/cachecontrol/controller.py
@@ -7,7 +7,7 @@ import calendar
 import time
 from email.utils import parsedate_tz
 
-from notpip._vendor.requests.structures import CaseInsensitiveDict
+from pipenv.patched.notpip._vendor.requests.structures import CaseInsensitiveDict
 
 from .cache import DictCache
 from .serialize import Serializer
diff --git a/pipenv/patched/notpip/_vendor/cachecontrol/serialize.py b/pipenv/patched/notpip/_vendor/cachecontrol/serialize.py
index 884fb70e..0f552ba8 100644
--- a/pipenv/patched/notpip/_vendor/cachecontrol/serialize.py
+++ b/pipenv/patched/notpip/_vendor/cachecontrol/serialize.py
@@ -3,8 +3,8 @@ import io
 import json
 import zlib
 
-from notpip._vendor import msgpack
-from notpip._vendor.requests.structures import CaseInsensitiveDict
+from pipenv.patched.notpip._vendor import msgpack
+from pipenv.patched.notpip._vendor.requests.structures import CaseInsensitiveDict
 
 from .compat import HTTPResponse, pickle, text_type
 
diff --git a/pipenv/patched/notpip/_vendor/chardet/cli/chardetect.py b/pipenv/patched/notpip/_vendor/chardet/cli/chardetect.py
index 6f19789b..76038aac 100644
--- a/pipenv/patched/notpip/_vendor/chardet/cli/chardetect.py
+++ b/pipenv/patched/notpip/_vendor/chardet/cli/chardetect.py
@@ -18,9 +18,9 @@ from __future__ import absolute_import, print_function, unicode_literals
 import argparse
 import sys
 
-from notpip._vendor.chardet import __version__
-from notpip._vendor.chardet.compat import PY2
-from notpip._vendor.chardet.universaldetector import UniversalDetector
+from pipenv.patched.notpip._vendor.chardet import __version__
+from pipenv.patched.notpip._vendor.chardet.compat import PY2
+from pipenv.patched.notpip._vendor.chardet.universaldetector import UniversalDetector
 
 
 def description_of(lines, name='stdin'):
diff --git a/pipenv/patched/notpip/_vendor/html5lib/__init__.py b/pipenv/patched/notpip/_vendor/html5lib/__init__.py
index 99d9e89f..17e2e2e0 100644
--- a/pipenv/patched/notpip/_vendor/html5lib/__init__.py
+++ b/pipenv/patched/notpip/_vendor/html5lib/__init__.py
@@ -6,7 +6,7 @@ is largely compatible with modern desktop web browsers.
 
 Example usage::
 
-    from notpip._vendor import html5lib
+    from pipenv.patched.notpip._vendor import html5lib
     with open("my_document.html", "rb") as f:
         tree = html5lib.parse(f)
 
diff --git a/pipenv/patched/notpip/_vendor/html5lib/_inputstream.py b/pipenv/patched/notpip/_vendor/html5lib/_inputstream.py
index fcae4c04..38149dbb 100644
--- a/pipenv/patched/notpip/_vendor/html5lib/_inputstream.py
+++ b/pipenv/patched/notpip/_vendor/html5lib/_inputstream.py
@@ -1,12 +1,12 @@
 from __future__ import absolute_import, division, unicode_literals
 
-from notpip._vendor.six import text_type, binary_type
-from notpip._vendor.six.moves import http_client, urllib
+from pipenv.patched.notpip._vendor.six import text_type, binary_type
+from pipenv.patched.notpip._vendor.six.moves import http_client, urllib
 
 import codecs
 import re
 
-from notpip._vendor import webencodings
+from pipenv.patched.notpip._vendor import webencodings
 
 from .constants import EOF, spaceCharacters, asciiLetters, asciiUppercase
 from .constants import _ReparseException
@@ -489,7 +489,7 @@ class HTMLBinaryInputStream(HTMLUnicodeInputStream):
         # Guess with chardet, if available
         if chardet:
             try:
-                from notpip._vendor.chardet.universaldetector import UniversalDetector
+                from pipenv.patched.notpip._vendor.chardet.universaldetector import UniversalDetector
             except ImportError:
                 pass
             else:
diff --git a/pipenv/patched/notpip/_vendor/html5lib/_tokenizer.py b/pipenv/patched/notpip/_vendor/html5lib/_tokenizer.py
index f20c935a..150ac96c 100644
--- a/pipenv/patched/notpip/_vendor/html5lib/_tokenizer.py
+++ b/pipenv/patched/notpip/_vendor/html5lib/_tokenizer.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import, division, unicode_literals
 
-from notpip._vendor.six import unichr as chr
+from pipenv.patched.notpip._vendor.six import unichr as chr
 
 from collections import deque
 
diff --git a/pipenv/patched/notpip/_vendor/html5lib/_trie/datrie.py b/pipenv/patched/notpip/_vendor/html5lib/_trie/datrie.py
index 03083212..16b48e9a 100644
--- a/pipenv/patched/notpip/_vendor/html5lib/_trie/datrie.py
+++ b/pipenv/patched/notpip/_vendor/html5lib/_trie/datrie.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import, division, unicode_literals
 
 from datrie import Trie as DATrie
-from notpip._vendor.six import text_type
+from pipenv.patched.notpip._vendor.six import text_type
 
 from ._base import Trie as ABCTrie
 
diff --git a/pipenv/patched/notpip/_vendor/html5lib/_trie/py.py b/pipenv/patched/notpip/_vendor/html5lib/_trie/py.py
index b5b1736f..bb62a43f 100644
--- a/pipenv/patched/notpip/_vendor/html5lib/_trie/py.py
+++ b/pipenv/patched/notpip/_vendor/html5lib/_trie/py.py
@@ -1,5 +1,5 @@
 from __future__ import absolute_import, division, unicode_literals
-from notpip._vendor.six import text_type
+from pipenv.patched.notpip._vendor.six import text_type
 
 from bisect import bisect_left
 
diff --git a/pipenv/patched/notpip/_vendor/html5lib/_utils.py b/pipenv/patched/notpip/_vendor/html5lib/_utils.py
index 7e1d61dd..92c69ecd 100644
--- a/pipenv/patched/notpip/_vendor/html5lib/_utils.py
+++ b/pipenv/patched/notpip/_vendor/html5lib/_utils.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import, division, unicode_literals
 
 from types import ModuleType
 
-from notpip._vendor.six import text_type
+from pipenv.patched.notpip._vendor.six import text_type
 
 try:
     import xml.etree.cElementTree as default_etree
diff --git a/pipenv/patched/notpip/_vendor/html5lib/filters/lint.py b/pipenv/patched/notpip/_vendor/html5lib/filters/lint.py
index 67f8bd67..51144bf2 100644
--- a/pipenv/patched/notpip/_vendor/html5lib/filters/lint.py
+++ b/pipenv/patched/notpip/_vendor/html5lib/filters/lint.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import, division, unicode_literals
 
-from notpip._vendor.six import text_type
+from pipenv.patched.notpip._vendor.six import text_type
 
 from . import base
 from ..constants import namespaces, voidElements
diff --git a/pipenv/patched/notpip/_vendor/html5lib/filters/sanitizer.py b/pipenv/patched/notpip/_vendor/html5lib/filters/sanitizer.py
index 11b5ca11..b55686cf 100644
--- a/pipenv/patched/notpip/_vendor/html5lib/filters/sanitizer.py
+++ b/pipenv/patched/notpip/_vendor/html5lib/filters/sanitizer.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import, division, unicode_literals
 import re
 from xml.sax.saxutils import escape, unescape
 
-from notpip._vendor.six.moves import urllib_parse as urlparse
+from pipenv.patched.notpip._vendor.six.moves import urllib_parse as urlparse
 
 from . import base
 from ..constants import namespaces, prefixes
diff --git a/pipenv/patched/notpip/_vendor/html5lib/html5parser.py b/pipenv/patched/notpip/_vendor/html5lib/html5parser.py
index 3dae3829..baeec1ec 100644
--- a/pipenv/patched/notpip/_vendor/html5lib/html5parser.py
+++ b/pipenv/patched/notpip/_vendor/html5lib/html5parser.py
@@ -1,5 +1,5 @@
 from __future__ import absolute_import, division, unicode_literals
-from notpip._vendor.six import with_metaclass, viewkeys
+from pipenv.patched.notpip._vendor.six import with_metaclass, viewkeys
 
 import types
 from collections import OrderedDict
diff --git a/pipenv/patched/notpip/_vendor/html5lib/serializer.py b/pipenv/patched/notpip/_vendor/html5lib/serializer.py
index 04f90857..383f3ee1 100644
--- a/pipenv/patched/notpip/_vendor/html5lib/serializer.py
+++ b/pipenv/patched/notpip/_vendor/html5lib/serializer.py
@@ -1,5 +1,5 @@
 from __future__ import absolute_import, division, unicode_literals
-from notpip._vendor.six import text_type
+from pipenv.patched.notpip._vendor.six import text_type
 
 import re
 
diff --git a/pipenv/patched/notpip/_vendor/html5lib/treeadapters/__init__.py b/pipenv/patched/notpip/_vendor/html5lib/treeadapters/__init__.py
index e5d7e88f..eeeb79e5 100644
--- a/pipenv/patched/notpip/_vendor/html5lib/treeadapters/__init__.py
+++ b/pipenv/patched/notpip/_vendor/html5lib/treeadapters/__init__.py
@@ -4,8 +4,8 @@ Example:
 
 .. code-block:: python
 
-   from notpip._vendor import html5lib
-   from notpip._vendor.html5lib.treeadapters import genshi
+   from pipenv.patched.notpip._vendor import html5lib
+   from pipenv.patched.notpip._vendor.html5lib.treeadapters import genshi
 
    doc = '<html><body>Hi!</body></html>'
    treebuilder = html5lib.getTreeBuilder('etree')
diff --git a/pipenv/patched/notpip/_vendor/html5lib/treebuilders/base.py b/pipenv/patched/notpip/_vendor/html5lib/treebuilders/base.py
index 2e2f7da6..d10a170c 100644
--- a/pipenv/patched/notpip/_vendor/html5lib/treebuilders/base.py
+++ b/pipenv/patched/notpip/_vendor/html5lib/treebuilders/base.py
@@ -1,5 +1,5 @@
 from __future__ import absolute_import, division, unicode_literals
-from notpip._vendor.six import text_type
+from pipenv.patched.notpip._vendor.six import text_type
 
 from ..constants import scopingElements, tableInsertModeElements, namespaces
 
diff --git a/pipenv/patched/notpip/_vendor/html5lib/treebuilders/etree.py b/pipenv/patched/notpip/_vendor/html5lib/treebuilders/etree.py
index 84859e10..6801a492 100644
--- a/pipenv/patched/notpip/_vendor/html5lib/treebuilders/etree.py
+++ b/pipenv/patched/notpip/_vendor/html5lib/treebuilders/etree.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import, division, unicode_literals
 # pylint:disable=protected-access
 
-from notpip._vendor.six import text_type
+from pipenv.patched.notpip._vendor.six import text_type
 
 import re
 
diff --git a/pipenv/patched/notpip/_vendor/html5lib/treewalkers/etree.py b/pipenv/patched/notpip/_vendor/html5lib/treewalkers/etree.py
index dc891ee8..72ed5aec 100644
--- a/pipenv/patched/notpip/_vendor/html5lib/treewalkers/etree.py
+++ b/pipenv/patched/notpip/_vendor/html5lib/treewalkers/etree.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import, division, unicode_literals
 from collections import OrderedDict
 import re
 
-from notpip._vendor.six import string_types
+from pipenv.patched.notpip._vendor.six import string_types
 
 from . import base
 from .._utils import moduleFactoryFactory
diff --git a/pipenv/patched/notpip/_vendor/html5lib/treewalkers/etree_lxml.py b/pipenv/patched/notpip/_vendor/html5lib/treewalkers/etree_lxml.py
index 136c075a..4641bf07 100644
--- a/pipenv/patched/notpip/_vendor/html5lib/treewalkers/etree_lxml.py
+++ b/pipenv/patched/notpip/_vendor/html5lib/treewalkers/etree_lxml.py
@@ -1,5 +1,5 @@
 from __future__ import absolute_import, division, unicode_literals
-from notpip._vendor.six import text_type
+from pipenv.patched.notpip._vendor.six import text_type
 
 from lxml import etree
 from ..treebuilders.etree import tag_regexp
diff --git a/pipenv/patched/notpip/_vendor/msgpack/__init__.py b/pipenv/patched/notpip/_vendor/msgpack/__init__.py
index d33621ff..a15e5769 100644
--- a/pipenv/patched/notpip/_vendor/msgpack/__init__.py
+++ b/pipenv/patched/notpip/_vendor/msgpack/__init__.py
@@ -1,6 +1,6 @@
 # coding: utf-8
-from notpip._vendor.msgpack._version import version
-from notpip._vendor.msgpack.exceptions import *
+from pipenv.patched.notpip._vendor.msgpack._version import version
+from pipenv.patched.notpip._vendor.msgpack.exceptions import *
 
 from collections import namedtuple
 
@@ -19,13 +19,13 @@ class ExtType(namedtuple('ExtType', 'code data')):
 
 import os
 if os.environ.get('MSGPACK_PUREPYTHON'):
-    from notpip._vendor.msgpack.fallback import Packer, unpackb, Unpacker
+    from pipenv.patched.notpip._vendor.msgpack.fallback import Packer, unpackb, Unpacker
 else:
     try:
-        from notpip._vendor.msgpack._packer import Packer
-        from notpip._vendor.msgpack._unpacker import unpackb, Unpacker
+        from pipenv.patched.notpip._vendor.msgpack._packer import Packer
+        from pipenv.patched.notpip._vendor.msgpack._unpacker import unpackb, Unpacker
     except ImportError:
-        from notpip._vendor.msgpack.fallback import Packer, unpackb, Unpacker
+        from pipenv.patched.notpip._vendor.msgpack.fallback import Packer, unpackb, Unpacker
 
 
 def pack(o, stream, **kwargs):
diff --git a/pipenv/patched/notpip/_vendor/msgpack/fallback.py b/pipenv/patched/notpip/_vendor/msgpack/fallback.py
index c5e4a80e..d3a7d558 100644
--- a/pipenv/patched/notpip/_vendor/msgpack/fallback.py
+++ b/pipenv/patched/notpip/_vendor/msgpack/fallback.py
@@ -49,7 +49,7 @@ else:
     newlist_hint = lambda size: []
 
 
-from notpip._vendor.msgpack.exceptions import (
+from pipenv.patched.notpip._vendor.msgpack.exceptions import (
     BufferFull,
     OutOfData,
     UnpackValueError,
@@ -57,7 +57,7 @@ from notpip._vendor.msgpack.exceptions import (
     PackOverflowError,
     ExtraData)
 
-from notpip._vendor.msgpack import ExtType
+from pipenv.patched.notpip._vendor.msgpack import ExtType
 
 
 EX_SKIP                 = 0
diff --git a/pipenv/patched/notpip/_vendor/packaging/__about__.py b/pipenv/patched/notpip/_vendor/packaging/__about__.py
index 4255c5b5..95d330ef 100644
--- a/pipenv/patched/notpip/_vendor/packaging/__about__.py
+++ b/pipenv/patched/notpip/_vendor/packaging/__about__.py
@@ -12,7 +12,7 @@ __title__ = "packaging"
 __summary__ = "Core utilities for Python packages"
 __uri__ = "https://github.com/pypa/packaging"
 
-__version__ = "17.1"
+__version__ = "16.8"
 
 __author__ = "Donald Stufft and individual contributors"
 __email__ = "donald@stufft.io"
diff --git a/pipenv/patched/notpip/_vendor/packaging/_structures.py b/pipenv/patched/notpip/_vendor/packaging/_structures.py
index e9fc4a04..ccc27861 100644
--- a/pipenv/patched/notpip/_vendor/packaging/_structures.py
+++ b/pipenv/patched/notpip/_vendor/packaging/_structures.py
@@ -33,7 +33,6 @@ class Infinity(object):
     def __neg__(self):
         return NegativeInfinity
 
-
 Infinity = Infinity()
 
 
@@ -66,5 +65,4 @@ class NegativeInfinity(object):
     def __neg__(self):
         return Infinity
 
-
 NegativeInfinity = NegativeInfinity()
diff --git a/pipenv/patched/notpip/_vendor/packaging/markers.py b/pipenv/patched/notpip/_vendor/packaging/markers.py
index a6c7f3e5..b41d0760 100644
--- a/pipenv/patched/notpip/_vendor/packaging/markers.py
+++ b/pipenv/patched/notpip/_vendor/packaging/markers.py
@@ -8,7 +8,9 @@ import os
 import platform
 import sys
 
-from notpip._vendor.pyparsing import ParseException, ParseResults, stringStart, stringEnd
+from notpip._vendor.pyparsing import (
+    ParseException, ParseResults, stringStart, stringEnd,
+)
 from notpip._vendor.pyparsing import ZeroOrMore, Group, Forward, QuotedString
 from notpip._vendor.pyparsing import Literal as L  # noqa
 
diff --git a/pipenv/patched/notpip/_vendor/packaging/oldpackaging/LICENSE b/pipenv/patched/notpip/_vendor/packaging/oldpackaging/LICENSE
new file mode 100644
index 00000000..6f62d44e
--- /dev/null
+++ b/pipenv/patched/notpip/_vendor/packaging/oldpackaging/LICENSE
@@ -0,0 +1,3 @@
+This software is made available under the terms of *either* of the licenses
+found in LICENSE.APACHE or LICENSE.BSD. Contributions to this software is made
+under the terms of *both* these licenses.
diff --git a/pipenv/patched/notpip/_vendor/packaging/oldpackaging/LICENSE.APACHE b/pipenv/patched/notpip/_vendor/packaging/oldpackaging/LICENSE.APACHE
new file mode 100644
index 00000000..4947287f
--- /dev/null
+++ b/pipenv/patched/notpip/_vendor/packaging/oldpackaging/LICENSE.APACHE
@@ -0,0 +1,177 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
\ No newline at end of file
diff --git a/pipenv/patched/notpip/_vendor/packaging/oldpackaging/LICENSE.BSD b/pipenv/patched/notpip/_vendor/packaging/oldpackaging/LICENSE.BSD
new file mode 100644
index 00000000..42ce7b75
--- /dev/null
+++ b/pipenv/patched/notpip/_vendor/packaging/oldpackaging/LICENSE.BSD
@@ -0,0 +1,23 @@
+Copyright (c) Donald Stufft and individual contributors.
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+
+    1. Redistributions of source code must retain the above copyright notice,
+       this list of conditions and the following disclaimer.
+
+    2. Redistributions in binary form must reproduce the above copyright
+       notice, this list of conditions and the following disclaimer in the
+       documentation and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
diff --git a/pipenv/patched/notpip/_vendor/packaging/oldpackaging/__about__.py b/pipenv/patched/notpip/_vendor/packaging/oldpackaging/__about__.py
new file mode 100644
index 00000000..4255c5b5
--- /dev/null
+++ b/pipenv/patched/notpip/_vendor/packaging/oldpackaging/__about__.py
@@ -0,0 +1,21 @@
+# This file is dual licensed under the terms of the Apache License, Version
+# 2.0, and the BSD License. See the LICENSE file in the root of this repository
+# for complete details.
+from __future__ import absolute_import, division, print_function
+
+__all__ = [
+    "__title__", "__summary__", "__uri__", "__version__", "__author__",
+    "__email__", "__license__", "__copyright__",
+]
+
+__title__ = "packaging"
+__summary__ = "Core utilities for Python packages"
+__uri__ = "https://github.com/pypa/packaging"
+
+__version__ = "17.1"
+
+__author__ = "Donald Stufft and individual contributors"
+__email__ = "donald@stufft.io"
+
+__license__ = "BSD or Apache License, Version 2.0"
+__copyright__ = "Copyright 2014-2016 %s" % __author__
diff --git a/pipenv/patched/notpip/_vendor/packaging/oldpackaging/__init__.py b/pipenv/patched/notpip/_vendor/packaging/oldpackaging/__init__.py
new file mode 100644
index 00000000..5ee62202
--- /dev/null
+++ b/pipenv/patched/notpip/_vendor/packaging/oldpackaging/__init__.py
@@ -0,0 +1,14 @@
+# This file is dual licensed under the terms of the Apache License, Version
+# 2.0, and the BSD License. See the LICENSE file in the root of this repository
+# for complete details.
+from __future__ import absolute_import, division, print_function
+
+from .__about__ import (
+    __author__, __copyright__, __email__, __license__, __summary__, __title__,
+    __uri__, __version__
+)
+
+__all__ = [
+    "__title__", "__summary__", "__uri__", "__version__", "__author__",
+    "__email__", "__license__", "__copyright__",
+]
diff --git a/pipenv/patched/notpip/_vendor/packaging/oldpackaging/_compat.py b/pipenv/patched/notpip/_vendor/packaging/oldpackaging/_compat.py
new file mode 100644
index 00000000..210bb80b
--- /dev/null
+++ b/pipenv/patched/notpip/_vendor/packaging/oldpackaging/_compat.py
@@ -0,0 +1,30 @@
+# This file is dual licensed under the terms of the Apache License, Version
+# 2.0, and the BSD License. See the LICENSE file in the root of this repository
+# for complete details.
+from __future__ import absolute_import, division, print_function
+
+import sys
+
+
+PY2 = sys.version_info[0] == 2
+PY3 = sys.version_info[0] == 3
+
+# flake8: noqa
+
+if PY3:
+    string_types = str,
+else:
+    string_types = basestring,
+
+
+def with_metaclass(meta, *bases):
+    """
+    Create a base class with a metaclass.
+    """
+    # This requires a bit of explanation: the basic idea is to make a dummy
+    # metaclass for one level of class instantiation that replaces itself with
+    # the actual metaclass.
+    class metaclass(meta):
+        def __new__(cls, name, this_bases, d):
+            return meta(name, bases, d)
+    return type.__new__(metaclass, 'temporary_class', (), {})
diff --git a/pipenv/patched/notpip/_vendor/packaging/oldpackaging/_structures.py b/pipenv/patched/notpip/_vendor/packaging/oldpackaging/_structures.py
new file mode 100644
index 00000000..e9fc4a04
--- /dev/null
+++ b/pipenv/patched/notpip/_vendor/packaging/oldpackaging/_structures.py
@@ -0,0 +1,70 @@
+# This file is dual licensed under the terms of the Apache License, Version
+# 2.0, and the BSD License. See the LICENSE file in the root of this repository
+# for complete details.
+from __future__ import absolute_import, division, print_function
+
+
+class Infinity(object):
+
+    def __repr__(self):
+        return "Infinity"
+
+    def __hash__(self):
+        return hash(repr(self))
+
+    def __lt__(self, other):
+        return False
+
+    def __le__(self, other):
+        return False
+
+    def __eq__(self, other):
+        return isinstance(other, self.__class__)
+
+    def __ne__(self, other):
+        return not isinstance(other, self.__class__)
+
+    def __gt__(self, other):
+        return True
+
+    def __ge__(self, other):
+        return True
+
+    def __neg__(self):
+        return NegativeInfinity
+
+
+Infinity = Infinity()
+
+
+class NegativeInfinity(object):
+
+    def __repr__(self):
+        return "-Infinity"
+
+    def __hash__(self):
+        return hash(repr(self))
+
+    def __lt__(self, other):
+        return True
+
+    def __le__(self, other):
+        return True
+
+    def __eq__(self, other):
+        return isinstance(other, self.__class__)
+
+    def __ne__(self, other):
+        return not isinstance(other, self.__class__)
+
+    def __gt__(self, other):
+        return False
+
+    def __ge__(self, other):
+        return False
+
+    def __neg__(self):
+        return Infinity
+
+
+NegativeInfinity = NegativeInfinity()
diff --git a/pipenv/patched/notpip/_vendor/packaging/oldpackaging/markers.py b/pipenv/patched/notpip/_vendor/packaging/oldpackaging/markers.py
new file mode 100644
index 00000000..dc3cef81
--- /dev/null
+++ b/pipenv/patched/notpip/_vendor/packaging/oldpackaging/markers.py
@@ -0,0 +1,301 @@
+# This file is dual licensed under the terms of the Apache License, Version
+# 2.0, and the BSD License. See the LICENSE file in the root of this repository
+# for complete details.
+from __future__ import absolute_import, division, print_function
+
+import operator
+import os
+import platform
+import sys
+
+from pipenv.patched.notpip._vendor.pyparsing import ParseException, ParseResults, stringStart, stringEnd
+from pipenv.patched.notpip._vendor.pyparsing import ZeroOrMore, Group, Forward, QuotedString
+from pipenv.patched.notpip._vendor.pyparsing import Literal as L  # noqa
+
+from ._compat import string_types
+from .specifiers import Specifier, InvalidSpecifier
+
+
+__all__ = [
+    "InvalidMarker", "UndefinedComparison", "UndefinedEnvironmentName",
+    "Marker", "default_environment",
+]
+
+
+class InvalidMarker(ValueError):
+    """
+    An invalid marker was found, users should refer to PEP 508.
+    """
+
+
+class UndefinedComparison(ValueError):
+    """
+    An invalid operation was attempted on a value that doesn't support it.
+    """
+
+
+class UndefinedEnvironmentName(ValueError):
+    """
+    A name was attempted to be used that does not exist inside of the
+    environment.
+    """
+
+
+class Node(object):
+
+    def __init__(self, value):
+        self.value = value
+
+    def __str__(self):
+        return str(self.value)
+
+    def __repr__(self):
+        return "<{0}({1!r})>".format(self.__class__.__name__, str(self))
+
+    def serialize(self):
+        raise NotImplementedError
+
+
+class Variable(Node):
+
+    def serialize(self):
+        return str(self)
+
+
+class Value(Node):
+
+    def serialize(self):
+        return '"{0}"'.format(self)
+
+
+class Op(Node):
+
+    def serialize(self):
+        return str(self)
+
+
+VARIABLE = (
+    L("implementation_version") |
+    L("platform_python_implementation") |
+    L("implementation_name") |
+    L("python_full_version") |
+    L("platform_release") |
+    L("platform_version") |
+    L("platform_machine") |
+    L("platform_system") |
+    L("python_version") |
+    L("sys_platform") |
+    L("os_name") |
+    L("os.name") |  # PEP-345
+    L("sys.platform") |  # PEP-345
+    L("platform.version") |  # PEP-345
+    L("platform.machine") |  # PEP-345
+    L("platform.python_implementation") |  # PEP-345
+    L("python_implementation") |  # undocumented setuptools legacy
+    L("extra")
+)
+ALIASES = {
+    'os.name': 'os_name',
+    'sys.platform': 'sys_platform',
+    'platform.version': 'platform_version',
+    'platform.machine': 'platform_machine',
+    'platform.python_implementation': 'platform_python_implementation',
+    'python_implementation': 'platform_python_implementation'
+}
+VARIABLE.setParseAction(lambda s, l, t: Variable(ALIASES.get(t[0], t[0])))
+
+VERSION_CMP = (
+    L("===") |
+    L("==") |
+    L(">=") |
+    L("<=") |
+    L("!=") |
+    L("~=") |
+    L(">") |
+    L("<")
+)
+
+MARKER_OP = VERSION_CMP | L("not in") | L("in")
+MARKER_OP.setParseAction(lambda s, l, t: Op(t[0]))
+
+MARKER_VALUE = QuotedString("'") | QuotedString('"')
+MARKER_VALUE.setParseAction(lambda s, l, t: Value(t[0]))
+
+BOOLOP = L("and") | L("or")
+
+MARKER_VAR = VARIABLE | MARKER_VALUE
+
+MARKER_ITEM = Group(MARKER_VAR + MARKER_OP + MARKER_VAR)
+MARKER_ITEM.setParseAction(lambda s, l, t: tuple(t[0]))
+
+LPAREN = L("(").suppress()
+RPAREN = L(")").suppress()
+
+MARKER_EXPR = Forward()
+MARKER_ATOM = MARKER_ITEM | Group(LPAREN + MARKER_EXPR + RPAREN)
+MARKER_EXPR << MARKER_ATOM + ZeroOrMore(BOOLOP + MARKER_EXPR)
+
+MARKER = stringStart + MARKER_EXPR + stringEnd
+
+
+def _coerce_parse_result(results):
+    if isinstance(results, ParseResults):
+        return [_coerce_parse_result(i) for i in results]
+    else:
+        return results
+
+
+def _format_marker(marker, first=True):
+    assert isinstance(marker, (list, tuple, string_types))
+
+    # Sometimes we have a structure like [[...]] which is a single item list
+    # where the single item is itself it's own list. In that case we want skip
+    # the rest of this function so that we don't get extraneous () on the
+    # outside.
+    if (isinstance(marker, list) and len(marker) == 1 and
+            isinstance(marker[0], (list, tuple))):
+        return _format_marker(marker[0])
+
+    if isinstance(marker, list):
+        inner = (_format_marker(m, first=False) for m in marker)
+        if first:
+            return " ".join(inner)
+        else:
+            return "(" + " ".join(inner) + ")"
+    elif isinstance(marker, tuple):
+        return " ".join([m.serialize() for m in marker])
+    else:
+        return marker
+
+
+_operators = {
+    "in": lambda lhs, rhs: lhs in rhs,
+    "not in": lambda lhs, rhs: lhs not in rhs,
+    "<": operator.lt,
+    "<=": operator.le,
+    "==": operator.eq,
+    "!=": operator.ne,
+    ">=": operator.ge,
+    ">": operator.gt,
+}
+
+
+def _eval_op(lhs, op, rhs):
+    try:
+        spec = Specifier("".join([op.serialize(), rhs]))
+    except InvalidSpecifier:
+        pass
+    else:
+        return spec.contains(lhs)
+
+    oper = _operators.get(op.serialize())
+    if oper is None:
+        raise UndefinedComparison(
+            "Undefined {0!r} on {1!r} and {2!r}.".format(op, lhs, rhs)
+        )
+
+    return oper(lhs, rhs)
+
+
+_undefined = object()
+
+
+def _get_env(environment, name):
+    value = environment.get(name, _undefined)
+
+    if value is _undefined:
+        raise UndefinedEnvironmentName(
+            "{0!r} does not exist in evaluation environment.".format(name)
+        )
+
+    return value
+
+
+def _evaluate_markers(markers, environment):
+    groups = [[]]
+
+    for marker in markers:
+        assert isinstance(marker, (list, tuple, string_types))
+
+        if isinstance(marker, list):
+            groups[-1].append(_evaluate_markers(marker, environment))
+        elif isinstance(marker, tuple):
+            lhs, op, rhs = marker
+
+            if isinstance(lhs, Variable):
+                lhs_value = _get_env(environment, lhs.value)
+                rhs_value = rhs.value
+            else:
+                lhs_value = lhs.value
+                rhs_value = _get_env(environment, rhs.value)
+
+            groups[-1].append(_eval_op(lhs_value, op, rhs_value))
+        else:
+            assert marker in ["and", "or"]
+            if marker == "or":
+                groups.append([])
+
+    return any(all(item) for item in groups)
+
+
+def format_full_version(info):
+    version = '{0.major}.{0.minor}.{0.micro}'.format(info)
+    kind = info.releaselevel
+    if kind != 'final':
+        version += kind[0] + str(info.serial)
+    return version
+
+
+def default_environment():
+    if hasattr(sys, 'implementation'):
+        iver = format_full_version(sys.implementation.version)
+        implementation_name = sys.implementation.name
+    else:
+        iver = '0'
+        implementation_name = ''
+
+    return {
+        "implementation_name": implementation_name,
+        "implementation_version": iver,
+        "os_name": os.name,
+        "platform_machine": platform.machine(),
+        "platform_release": platform.release(),
+        "platform_system": platform.system(),
+        "platform_version": platform.version(),
+        "python_full_version": platform.python_version(),
+        "platform_python_implementation": platform.python_implementation(),
+        "python_version": platform.python_version()[:3],
+        "sys_platform": sys.platform,
+    }
+
+
+class Marker(object):
+
+    def __init__(self, marker):
+        try:
+            self._markers = _coerce_parse_result(MARKER.parseString(marker))
+        except ParseException as e:
+            err_str = "Invalid marker: {0!r}, parse error at {1!r}".format(
+                marker, marker[e.loc:e.loc + 8])
+            raise InvalidMarker(err_str)
+
+    def __str__(self):
+        return _format_marker(self._markers)
+
+    def __repr__(self):
+        return "<Marker({0!r})>".format(str(self))
+
+    def evaluate(self, environment=None):
+        """Evaluate a marker.
+
+        Return the boolean from evaluating the given marker against the
+        environment. environment is an optional argument to override all or
+        part of the determined environment.
+
+        The environment is determined from the current Python process.
+        """
+        current_environment = default_environment()
+        if environment is not None:
+            current_environment.update(environment)
+
+        return _evaluate_markers(self._markers, current_environment)
diff --git a/pipenv/patched/notpip/_vendor/packaging/oldpackaging/requirements.py b/pipenv/patched/notpip/_vendor/packaging/oldpackaging/requirements.py
new file mode 100644
index 00000000..0da25914
--- /dev/null
+++ b/pipenv/patched/notpip/_vendor/packaging/oldpackaging/requirements.py
@@ -0,0 +1,130 @@
+# This file is dual licensed under the terms of the Apache License, Version
+# 2.0, and the BSD License. See the LICENSE file in the root of this repository
+# for complete details.
+from __future__ import absolute_import, division, print_function
+
+import string
+import re
+
+from pipenv.patched.notpip._vendor.pyparsing import stringStart, stringEnd, originalTextFor, ParseException
+from pipenv.patched.notpip._vendor.pyparsing import ZeroOrMore, Word, Optional, Regex, Combine
+from pipenv.patched.notpip._vendor.pyparsing import Literal as L  # noqa
+from pipenv.patched.notpip._vendor.six.moves.urllib import parse as urlparse
+
+from .markers import MARKER_EXPR, Marker
+from .specifiers import LegacySpecifier, Specifier, SpecifierSet
+
+
+class InvalidRequirement(ValueError):
+    """
+    An invalid requirement was found, users should refer to PEP 508.
+    """
+
+
+ALPHANUM = Word(string.ascii_letters + string.digits)
+
+LBRACKET = L("[").suppress()
+RBRACKET = L("]").suppress()
+LPAREN = L("(").suppress()
+RPAREN = L(")").suppress()
+COMMA = L(",").suppress()
+SEMICOLON = L(";").suppress()
+AT = L("@").suppress()
+
+PUNCTUATION = Word("-_.")
+IDENTIFIER_END = ALPHANUM | (ZeroOrMore(PUNCTUATION) + ALPHANUM)
+IDENTIFIER = Combine(ALPHANUM + ZeroOrMore(IDENTIFIER_END))
+
+NAME = IDENTIFIER("name")
+EXTRA = IDENTIFIER
+
+URI = Regex(r'[^ ]+')("url")
+URL = (AT + URI)
+
+EXTRAS_LIST = EXTRA + ZeroOrMore(COMMA + EXTRA)
+EXTRAS = (LBRACKET + Optional(EXTRAS_LIST) + RBRACKET)("extras")
+
+VERSION_PEP440 = Regex(Specifier._regex_str, re.VERBOSE | re.IGNORECASE)
+VERSION_LEGACY = Regex(LegacySpecifier._regex_str, re.VERBOSE | re.IGNORECASE)
+
+VERSION_ONE = VERSION_PEP440 ^ VERSION_LEGACY
+VERSION_MANY = Combine(VERSION_ONE + ZeroOrMore(COMMA + VERSION_ONE),
+                       joinString=",", adjacent=False)("_raw_spec")
+_VERSION_SPEC = Optional(((LPAREN + VERSION_MANY + RPAREN) | VERSION_MANY))
+_VERSION_SPEC.setParseAction(lambda s, l, t: t._raw_spec or '')
+
+VERSION_SPEC = originalTextFor(_VERSION_SPEC)("specifier")
+VERSION_SPEC.setParseAction(lambda s, l, t: t[1])
+
+MARKER_EXPR = originalTextFor(MARKER_EXPR())("marker")
+MARKER_EXPR.setParseAction(
+    lambda s, l, t: Marker(s[t._original_start:t._original_end])
+)
+MARKER_SEPARATOR = SEMICOLON
+MARKER = MARKER_SEPARATOR + MARKER_EXPR
+
+VERSION_AND_MARKER = VERSION_SPEC + Optional(MARKER)
+URL_AND_MARKER = URL + Optional(MARKER)
+
+NAMED_REQUIREMENT = \
+    NAME + Optional(EXTRAS) + (URL_AND_MARKER | VERSION_AND_MARKER)
+
+REQUIREMENT = stringStart + NAMED_REQUIREMENT + stringEnd
+# pyparsing isn't thread safe during initialization, so we do it eagerly, see
+# issue #104
+REQUIREMENT.parseString("x[]")
+
+
+class Requirement(object):
+    """Parse a requirement.
+
+    Parse a given requirement string into its parts, such as name, specifier,
+    URL, and extras. Raises InvalidRequirement on a badly-formed requirement
+    string.
+    """
+
+    # TODO: Can we test whether something is contained within a requirement?
+    #       If so how do we do that? Do we need to test against the _name_ of
+    #       the thing as well as the version? What about the markers?
+    # TODO: Can we normalize the name and extra name?
+
+    def __init__(self, requirement_string):
+        try:
+            req = REQUIREMENT.parseString(requirement_string)
+        except ParseException as e:
+            raise InvalidRequirement(
+                "Invalid requirement, parse error at \"{0!r}\"".format(
+                    requirement_string[e.loc:e.loc + 8]))
+
+        self.name = req.name
+        if req.url:
+            parsed_url = urlparse.urlparse(req.url)
+            if not (parsed_url.scheme and parsed_url.netloc) or (
+                    not parsed_url.scheme and not parsed_url.netloc):
+                raise InvalidRequirement("Invalid URL given")
+            self.url = req.url
+        else:
+            self.url = None
+        self.extras = set(req.extras.asList() if req.extras else [])
+        self.specifier = SpecifierSet(req.specifier)
+        self.marker = req.marker if req.marker else None
+
+    def __str__(self):
+        parts = [self.name]
+
+        if self.extras:
+            parts.append("[{0}]".format(",".join(sorted(self.extras))))
+
+        if self.specifier:
+            parts.append(str(self.specifier))
+
+        if self.url:
+            parts.append("@ {0}".format(self.url))
+
+        if self.marker:
+            parts.append("; {0}".format(self.marker))
+
+        return "".join(parts)
+
+    def __repr__(self):
+        return "<Requirement({0!r})>".format(str(self))
diff --git a/pipenv/patched/notpip/_vendor/packaging/oldpackaging/specifiers.py b/pipenv/patched/notpip/_vendor/packaging/oldpackaging/specifiers.py
new file mode 100644
index 00000000..2281ad8e
--- /dev/null
+++ b/pipenv/patched/notpip/_vendor/packaging/oldpackaging/specifiers.py
@@ -0,0 +1,804 @@
+# This file is dual licensed under the terms of the Apache License, Version
+# 2.0, and the BSD License. See the LICENSE file in the root of this repository
+# for complete details.
+from __future__ import absolute_import, division, print_function
+
+import abc
+import functools
+import itertools
+import re
+
+from ._compat import string_types, with_metaclass
+from .version import Version, LegacyVersion, parse
+
+
+class InvalidSpecifier(ValueError):
+    """
+    An invalid specifier was found, users should refer to PEP 440.
+    """
+
+
+class BaseSpecifier(with_metaclass(abc.ABCMeta, object)):
+
+    @abc.abstractmethod
+    def __str__(self):
+        """
+        Returns the str representation of this Specifier like object. This
+        should be representative of the Specifier itself.
+        """
+
+    @abc.abstractmethod
+    def __hash__(self):
+        """
+        Returns a hash value for this Specifier like object.
+        """
+
+    @abc.abstractmethod
+    def __eq__(self, other):
+        """
+        Returns a boolean representing whether or not the two Specifier like
+        objects are equal.
+        """
+
+    @abc.abstractmethod
+    def __ne__(self, other):
+        """
+        Returns a boolean representing whether or not the two Specifier like
+        objects are not equal.
+        """
+
+    @abc.abstractproperty
+    def prereleases(self):
+        """
+        Returns whether or not pre-releases as a whole are allowed by this
+        specifier.
+        """
+
+    @prereleases.setter
+    def prereleases(self, value):
+        """
+        Sets whether or not pre-releases as a whole are allowed by this
+        specifier.
+        """
+
+    @abc.abstractmethod
+    def contains(self, item, prereleases=None):
+        """
+        Determines if the given item is contained within this specifier.
+        """
+
+    @abc.abstractmethod
+    def filter(self, iterable, prereleases=None):
+        """
+        Takes an iterable of items and filters them so that only items which
+        are contained within this specifier are allowed in it.
+        """
+
+
+class _IndividualSpecifier(BaseSpecifier):
+
+    _operators = {}
+
+    def __init__(self, spec="", prereleases=None):
+        match = self._regex.search(spec)
+        if not match:
+            raise InvalidSpecifier("Invalid specifier: '{0}'".format(spec))
+
+        self._spec = (
+            match.group("operator").strip(),
+            match.group("version").strip(),
+        )
+
+        # Store whether or not this Specifier should accept prereleases
+        self._prereleases = prereleases
+
+    def __repr__(self):
+        pre = (
+            ", prereleases={0!r}".format(self.prereleases)
+            if self._prereleases is not None
+            else ""
+        )
+
+        return "<{0}({1!r}{2})>".format(
+            self.__class__.__name__,
+            str(self),
+            pre,
+        )
+
+    def __str__(self):
+        return "{0}{1}".format(*self._spec)
+
+    def __hash__(self):
+        return hash(self._spec)
+
+    def __eq__(self, other):
+        if isinstance(other, string_types):
+            try:
+                other = self.__class__(other)
+            except InvalidSpecifier:
+                return NotImplemented
+        elif not isinstance(other, self.__class__):
+            return NotImplemented
+
+        return self._spec == other._spec
+
+    def __ne__(self, other):
+        if isinstance(other, string_types):
+            try:
+                other = self.__class__(other)
+            except InvalidSpecifier:
+                return NotImplemented
+        elif not isinstance(other, self.__class__):
+            return NotImplemented
+
+        return self._spec != other._spec
+
+    def _get_operator(self, op):
+        return getattr(self, "_compare_{0}".format(self._operators[op]))
+
+    def _coerce_version(self, version):
+        if not isinstance(version, (LegacyVersion, Version)):
+            version = parse(version)
+        return version
+
+    @property
+    def operator(self):
+        return self._spec[0]
+
+    @property
+    def version(self):
+        return self._spec[1]
+
+    @property
+    def prereleases(self):
+        return self._prereleases
+
+    @prereleases.setter
+    def prereleases(self, value):
+        self._prereleases = value
+
+    def __contains__(self, item):
+        return self.contains(item)
+
+    def contains(self, item, prereleases=None):
+        # Determine if prereleases are to be allowed or not.
+        if prereleases is None:
+            prereleases = self.prereleases
+
+        # Normalize item to a Version or LegacyVersion, this allows us to have
+        # a shortcut for ``"2.0" in Specifier(">=2")
+        item = self._coerce_version(item)
+
+        # Determine if we should be supporting prereleases in this specifier
+        # or not, if we do not support prereleases than we can short circuit
+        # logic if this version is a prereleases.
+        if item.is_prerelease and not prereleases:
+            return False
+
+        # Actually do the comparison to determine if this item is contained
+        # within this Specifier or not.
+        return self._get_operator(self.operator)(item, self.version)
+
+    def filter(self, iterable, prereleases=None):
+        yielded = False
+        found_prereleases = []
+
+        kw = {"prereleases": prereleases if prereleases is not None else True}
+
+        # Attempt to iterate over all the values in the iterable and if any of
+        # them match, yield them.
+        for version in iterable:
+            parsed_version = self._coerce_version(version)
+
+            if self.contains(parsed_version, **kw):
+                # If our version is a prerelease, and we were not set to allow
+                # prereleases, then we'll store it for later incase nothing
+                # else matches this specifier.
+                if (parsed_version.is_prerelease and not
+                        (prereleases or self.prereleases)):
+                    found_prereleases.append(version)
+                # Either this is not a prerelease, or we should have been
+                # accepting prereleases from the beginning.
+                else:
+                    yielded = True
+                    yield version
+
+        # Now that we've iterated over everything, determine if we've yielded
+        # any values, and if we have not and we have any prereleases stored up
+        # then we will go ahead and yield the prereleases.
+        if not yielded and found_prereleases:
+            for version in found_prereleases:
+                yield version
+
+
+class LegacySpecifier(_IndividualSpecifier):
+
+    _regex_str = (
+        r"""
+        (?P<operator>(==|!=|<=|>=|<|>))
+        \s*
+        (?P<version>
+            [^,;\s)]* # Since this is a "legacy" specifier, and the version
+                      # string can be just about anything, we match everything
+                      # except for whitespace, a semi-colon for marker support,
+                      # a closing paren since versions can be enclosed in
+                      # them, and a comma since it's a version separator.
+        )
+        """
+    )
+
+    _regex = re.compile(
+        r"^\s*" + _regex_str + r"\s*$", re.VERBOSE | re.IGNORECASE)
+
+    _operators = {
+        "==": "equal",
+        "!=": "not_equal",
+        "<=": "less_than_equal",
+        ">=": "greater_than_equal",
+        "<": "less_than",
+        ">": "greater_than",
+    }
+
+    def _coerce_version(self, version):
+        if not isinstance(version, LegacyVersion):
+            version = LegacyVersion(str(version))
+        return version
+
+    def _compare_equal(self, prospective, spec):
+        return prospective == self._coerce_version(spec)
+
+    def _compare_not_equal(self, prospective, spec):
+        return prospective != self._coerce_version(spec)
+
+    def _compare_less_than_equal(self, prospective, spec):
+        return prospective <= self._coerce_version(spec)
+
+    def _compare_greater_than_equal(self, prospective, spec):
+        return prospective >= self._coerce_version(spec)
+
+    def _compare_less_than(self, prospective, spec):
+        return prospective < self._coerce_version(spec)
+
+    def _compare_greater_than(self, prospective, spec):
+        return prospective > self._coerce_version(spec)
+
+
+def _require_version_compare(fn):
+    @functools.wraps(fn)
+    def wrapped(self, prospective, spec):
+        if not isinstance(prospective, Version):
+            return False
+        return fn(self, prospective, spec)
+    return wrapped
+
+
+class Specifier(_IndividualSpecifier):
+
+    _regex_str = (
+        r"""
+        (?P<operator>(~=|==|!=|<=|>=|<|>|===))
+        (?P<version>
+            (?:
+                # The identity operators allow for an escape hatch that will
+                # do an exact string match of the version you wish to install.
+                # This will not be parsed by PEP 440 and we cannot determine
+                # any semantic meaning from it. This operator is discouraged
+                # but included entirely as an escape hatch.
+                (?<====)  # Only match for the identity operator
+                \s*
+                [^\s]*    # We just match everything, except for whitespace
+                          # since we are only testing for strict identity.
+            )
+            |
+            (?:
+                # The (non)equality operators allow for wild card and local
+                # versions to be specified so we have to define these two
+                # operators separately to enable that.
+                (?<===|!=)            # Only match for equals and not equals
+
+                \s*
+                v?
+                (?:[0-9]+!)?          # epoch
+                [0-9]+(?:\.[0-9]+)*   # release
+                (?:                   # pre release
+                    [-_\.]?
+                    (a|b|c|rc|alpha|beta|pre|preview)
+                    [-_\.]?
+                    [0-9]*
+                )?
+                (?:                   # post release
+                    (?:-[0-9]+)|(?:[-_\.]?(post|rev|r)[-_\.]?[0-9]*)
+                )?
+
+                # You cannot use a wild card and a dev or local version
+                # together so group them with a | and make them optional.
+                (?:
+                    (?:[-_\.]?dev[-_\.]?[0-9]*)?         # dev release
+                    (?:\+[a-z0-9]+(?:[-_\.][a-z0-9]+)*)? # local
+                    |
+                    \.\*  # Wild card syntax of .*
+                )?
+            )
+            |
+            (?:
+                # The compatible operator requires at least two digits in the
+                # release segment.
+                (?<=~=)               # Only match for the compatible operator
+
+                \s*
+                v?
+                (?:[0-9]+!)?          # epoch
+                [0-9]+(?:\.[0-9]+)+   # release  (We have a + instead of a *)
+                (?:                   # pre release
+                    [-_\.]?
+                    (a|b|c|rc|alpha|beta|pre|preview)
+                    [-_\.]?
+                    [0-9]*
+                )?
+                (?:                                   # post release
+                    (?:-[0-9]+)|(?:[-_\.]?(post|rev|r)[-_\.]?[0-9]*)
+                )?
+                (?:[-_\.]?dev[-_\.]?[0-9]*)?          # dev release
+            )
+            |
+            (?:
+                # All other operators only allow a sub set of what the
+                # (non)equality operators do. Specifically they do not allow
+                # local versions to be specified nor do they allow the prefix
+                # matching wild cards.
+                (?<!==|!=|~=)         # We have special cases for these
+                                      # operators so we want to make sure they
+                                      # don't match here.
+
+                \s*
+                v?
+                (?:[0-9]+!)?          # epoch
+                [0-9]+(?:\.[0-9]+)*   # release
+                (?:                   # pre release
+                    [-_\.]?
+                    (a|b|c|rc|alpha|beta|pre|preview)
+                    [-_\.]?
+                    [0-9]*
+                )?
+                (?:                                   # post release
+                    (?:-[0-9]+)|(?:[-_\.]?(post|rev|r)[-_\.]?[0-9]*)
+                )?
+                (?:[-_\.]?dev[-_\.]?[0-9]*)?          # dev release
+            )
+        )
+        """
+    )
+
+    _regex = re.compile(
+        r"^\s*" + _regex_str + r"\s*$", re.VERBOSE | re.IGNORECASE)
+
+    _operators = {
+        "~=": "compatible",
+        "==": "equal",
+        "!=": "not_equal",
+        "<=": "less_than_equal",
+        ">=": "greater_than_equal",
+        "<": "less_than",
+        ">": "greater_than",
+        "===": "arbitrary",
+    }
+
+    @_require_version_compare
+    def _compare_compatible(self, prospective, spec):
+        # Compatible releases have an equivalent combination of >= and ==. That
+        # is that ~=2.2 is equivalent to >=2.2,==2.*. This allows us to
+        # implement this in terms of the other specifiers instead of
+        # implementing it ourselves. The only thing we need to do is construct
+        # the other specifiers.
+
+        # We want everything but the last item in the version, but we want to
+        # ignore post and dev releases and we want to treat the pre-release as
+        # it's own separate segment.
+        prefix = ".".join(
+            list(
+                itertools.takewhile(
+                    lambda x: (not x.startswith("post") and not
+                               x.startswith("dev")),
+                    _version_split(spec),
+                )
+            )[:-1]
+        )
+
+        # Add the prefix notation to the end of our string
+        prefix += ".*"
+
+        return (self._get_operator(">=")(prospective, spec) and
+                self._get_operator("==")(prospective, prefix))
+
+    @_require_version_compare
+    def _compare_equal(self, prospective, spec):
+        # We need special logic to handle prefix matching
+        if spec.endswith(".*"):
+            # In the case of prefix matching we want to ignore local segment.
+            prospective = Version(prospective.public)
+            # Split the spec out by dots, and pretend that there is an implicit
+            # dot in between a release segment and a pre-release segment.
+            spec = _version_split(spec[:-2])  # Remove the trailing .*
+
+            # Split the prospective version out by dots, and pretend that there
+            # is an implicit dot in between a release segment and a pre-release
+            # segment.
+            prospective = _version_split(str(prospective))
+
+            # Shorten the prospective version to be the same length as the spec
+            # so that we can determine if the specifier is a prefix of the
+            # prospective version or not.
+            prospective = prospective[:len(spec)]
+
+            # Pad out our two sides with zeros so that they both equal the same
+            # length.
+            spec, prospective = _pad_version(spec, prospective)
+        else:
+            # Convert our spec string into a Version
+            spec = Version(spec)
+
+            # If the specifier does not have a local segment, then we want to
+            # act as if the prospective version also does not have a local
+            # segment.
+            if not spec.local:
+                prospective = Version(prospective.public)
+
+        return prospective == spec
+
+    @_require_version_compare
+    def _compare_not_equal(self, prospective, spec):
+        return not self._compare_equal(prospective, spec)
+
+    @_require_version_compare
+    def _compare_less_than_equal(self, prospective, spec):
+        return prospective <= Version(spec)
+
+    @_require_version_compare
+    def _compare_greater_than_equal(self, prospective, spec):
+        return prospective >= Version(spec)
+
+    @_require_version_compare
+    def _compare_less_than(self, prospective, spec):
+        # Convert our spec to a Version instance, since we'll want to work with
+        # it as a version.
+        spec = Version(spec)
+
+        # Check to see if the prospective version is less than the spec
+        # version. If it's not we can short circuit and just return False now
+        # instead of doing extra unneeded work.
+        if not prospective < spec:
+            return False
+
+        # This special case is here so that, unless the specifier itself
+        # includes is a pre-release version, that we do not accept pre-release
+        # versions for the version mentioned in the specifier (e.g. <3.1 should
+        # not match 3.1.dev0, but should match 3.0.dev0).
+        if not spec.is_prerelease and prospective.is_prerelease:
+            if Version(prospective.base_version) == Version(spec.base_version):
+                return False
+
+        # If we've gotten to here, it means that prospective version is both
+        # less than the spec version *and* it's not a pre-release of the same
+        # version in the spec.
+        return True
+
+    @_require_version_compare
+    def _compare_greater_than(self, prospective, spec):
+        # Convert our spec to a Version instance, since we'll want to work with
+        # it as a version.
+        spec = Version(spec)
+
+        # Check to see if the prospective version is greater than the spec
+        # version. If it's not we can short circuit and just return False now
+        # instead of doing extra unneeded work.
+        if not prospective > spec:
+            return False
+
+        # This special case is here so that, unless the specifier itself
+        # includes is a post-release version, that we do not accept
+        # post-release versions for the version mentioned in the specifier
+        # (e.g. >3.1 should not match 3.0.post0, but should match 3.2.post0).
+        if not spec.is_postrelease and prospective.is_postrelease:
+            if Version(prospective.base_version) == Version(spec.base_version):
+                return False
+
+        # Ensure that we do not allow a local version of the version mentioned
+        # in the specifier, which is techincally greater than, to match.
+        if prospective.local is not None:
+            if Version(prospective.base_version) == Version(spec.base_version):
+                return False
+
+        # If we've gotten to here, it means that prospective version is both
+        # greater than the spec version *and* it's not a pre-release of the
+        # same version in the spec.
+        return True
+
+    def _compare_arbitrary(self, prospective, spec):
+        return str(prospective).lower() == str(spec).lower()
+
+    @property
+    def prereleases(self):
+        # If there is an explicit prereleases set for this, then we'll just
+        # blindly use that.
+        if self._prereleases is not None:
+            return self._prereleases
+
+        # Look at all of our specifiers and determine if they are inclusive
+        # operators, and if they are if they are including an explicit
+        # prerelease.
+        operator, version = self._spec
+        if operator in ["==", ">=", "<=", "~=", "==="]:
+            # The == specifier can include a trailing .*, if it does we
+            # want to remove before parsing.
+            if operator == "==" and version.endswith(".*"):
+                version = version[:-2]
+
+            # Parse the version, and if it is a pre-release than this
+            # specifier allows pre-releases.
+            if parse(version).is_prerelease:
+                return True
+
+        return False
+
+    @prereleases.setter
+    def prereleases(self, value):
+        self._prereleases = value
+
+
+_prefix_regex = re.compile(r"^([0-9]+)((?:a|b|c|rc)[0-9]+)$")
+
+
+def _version_split(version):
+    result = []
+    for item in version.split("."):
+        match = _prefix_regex.search(item)
+        if match:
+            result.extend(match.groups())
+        else:
+            result.append(item)
+    return result
+
+
+def _pad_version(left, right):
+    left_split, right_split = [], []
+
+    # Get the release segment of our versions
+    left_split.append(list(itertools.takewhile(lambda x: x.isdigit(), left)))
+    right_split.append(list(itertools.takewhile(lambda x: x.isdigit(), right)))
+
+    # Get the rest of our versions
+    left_split.append(left[len(left_split[0]):])
+    right_split.append(right[len(right_split[0]):])
+
+    # Insert our padding
+    left_split.insert(
+        1,
+        ["0"] * max(0, len(right_split[0]) - len(left_split[0])),
+    )
+    right_split.insert(
+        1,
+        ["0"] * max(0, len(left_split[0]) - len(right_split[0])),
+    )
+
+    return (
+        list(itertools.chain(*left_split)),
+        list(itertools.chain(*right_split)),
+    )
+
+
+class SpecifierSet(BaseSpecifier, set):
+
+    def __init__(self, specifiers="", prereleases=None):
+        # Split on , to break each indidivual specifier into it's own item, and
+        # strip each item to remove leading/trailing whitespace.
+        specifiers = [s.strip() for s in specifiers.split(",") if s.strip()]
+
+        # Parsed each individual specifier, attempting first to make it a
+        # Specifier and falling back to a LegacySpecifier.
+        parsed = set()
+        for specifier in specifiers:
+            try:
+                parsed.add(Specifier(specifier))
+            except InvalidSpecifier:
+                parsed.add(LegacySpecifier(specifier))
+
+        # Turn our parsed specifiers into a frozen set and save them for later.
+        self._specs = frozenset(parsed)
+
+        # Store our prereleases value so we can use it later to determine if
+        # we accept prereleases or not.
+        self._prereleases = prereleases
+
+    def __repr__(self):
+        pre = (
+            ", prereleases={0!r}".format(self.prereleases)
+            if self._prereleases is not None
+            else ""
+        )
+
+        return "<SpecifierSet({0!r}{1})>".format(str(self), pre)
+
+    def __str__(self):
+        return ",".join(sorted(str(s) for s in self._specs))
+
+    def __hash__(self):
+        return hash(self._specs)
+
+    def __and__(self, other):
+        if isinstance(other, string_types):
+            other = SpecifierSet(other)
+        elif not isinstance(other, SpecifierSet):
+            return NotImplemented
+
+        specifier = SpecifierSet()
+        specifier._specs = frozenset(self._specs | other._specs)
+
+        if self._prereleases is None and other._prereleases is not None:
+            specifier._prereleases = other._prereleases
+        elif self._prereleases is not None and other._prereleases is None:
+            specifier._prereleases = self._prereleases
+        elif self._prereleases == other._prereleases:
+            specifier._prereleases = self._prereleases
+        else:
+            raise ValueError(
+                "Cannot combine SpecifierSets with True and False prerelease "
+                "overrides."
+            )
+
+        return specifier
+
+    def __eq__(self, other):
+        if isinstance(other, string_types):
+            other = SpecifierSet(other)
+        elif isinstance(other, _IndividualSpecifier):
+            other = SpecifierSet(str(other))
+        elif not isinstance(other, SpecifierSet):
+            return NotImplemented
+
+        return self._specs == other._specs
+
+    def __ne__(self, other):
+        if isinstance(other, string_types):
+            other = SpecifierSet(other)
+        elif isinstance(other, _IndividualSpecifier):
+            other = SpecifierSet(str(other))
+        elif not isinstance(other, SpecifierSet):
+            return NotImplemented
+
+        return self._specs != other._specs
+
+    def __len__(self):
+        return len(self._specs)
+
+    def __iter__(self):
+        return iter(self._specs)
+
+    def __iadd__(self, other):
+        if isinstance(other, string_types):
+            other = SpecifierSet(other)
+        elif not isinstance(other, SpecifierSet):
+            return NotImplemented
+
+        if self._prereleases is not None and other._prereleases is not None and self._prereleases != other._prereleases:
+            raise ValueError(
+                "Cannot combine SpecifierSets with True and False prerelease "
+                "overrides."
+            )
+        specs = set(self._specs)
+        specs.intersection_update(other._specs)
+        self._specs = frozenset(specs)
+
+    def intersection_update(self, other):
+        if isinstance(other, string_types):
+            other = SpecifierSet(other)
+        elif not isinstance(other, SpecifierSet):
+            return NotImplemented
+
+        if self._prereleases is not None and other._prereleases is not None and self._prereleases != other._prereleases:
+            raise ValueError(
+                "Cannot combine SpecifierSets with True and False prerelease "
+                "overrides."
+            )
+        specs = set(self._specs)
+        specs.intersection_update(other._specs)
+        self._specs = frozenset(specs)
+
+    @property
+    def prereleases(self):
+        # If we have been given an explicit prerelease modifier, then we'll
+        # pass that through here.
+        if self._prereleases is not None:
+            return self._prereleases
+
+        # If we don't have any specifiers, and we don't have a forced value,
+        # then we'll just return None since we don't know if this should have
+        # pre-releases or not.
+        if not self._specs:
+            return None
+
+        # Otherwise we'll see if any of the given specifiers accept
+        # prereleases, if any of them do we'll return True, otherwise False.
+        return any(s.prereleases for s in self._specs)
+
+    @prereleases.setter
+    def prereleases(self, value):
+        self._prereleases = value
+
+    def __contains__(self, item):
+        return self.contains(item)
+
+    def contains(self, item, prereleases=None):
+        # Ensure that our item is a Version or LegacyVersion instance.
+        if not isinstance(item, (LegacyVersion, Version)):
+            item = parse(item)
+
+        # Determine if we're forcing a prerelease or not, if we're not forcing
+        # one for this particular filter call, then we'll use whatever the
+        # SpecifierSet thinks for whether or not we should support prereleases.
+        if prereleases is None:
+            prereleases = self.prereleases
+
+        # We can determine if we're going to allow pre-releases by looking to
+        # see if any of the underlying items supports them. If none of them do
+        # and this item is a pre-release then we do not allow it and we can
+        # short circuit that here.
+        # Note: This means that 1.0.dev1 would not be contained in something
+        #       like >=1.0.devabc however it would be in >=1.0.debabc,>0.0.dev0
+        if not prereleases and item.is_prerelease:
+            return False
+
+        # We simply dispatch to the underlying specs here to make sure that the
+        # given version is contained within all of them.
+        # Note: This use of all() here means that an empty set of specifiers
+        #       will always return True, this is an explicit design decision.
+        return all(
+            s.contains(item, prereleases=prereleases)
+            for s in self._specs
+        )
+
+    def filter(self, iterable, prereleases=None):
+        # Determine if we're forcing a prerelease or not, if we're not forcing
+        # one for this particular filter call, then we'll use whatever the
+        # SpecifierSet thinks for whether or not we should support prereleases.
+        if prereleases is None:
+            prereleases = self.prereleases
+
+        # If we have any specifiers, then we want to wrap our iterable in the
+        # filter method for each one, this will act as a logical AND amongst
+        # each specifier.
+        if self._specs:
+            for spec in self._specs:
+                iterable = spec.filter(iterable, prereleases=bool(prereleases))
+            return iterable
+        # If we do not have any specifiers, then we need to have a rough filter
+        # which will filter out any pre-releases, unless there are no final
+        # releases, and which will filter out LegacyVersion in general.
+        else:
+            filtered = []
+            found_prereleases = []
+
+            for item in iterable:
+                # Ensure that we some kind of Version class for this item.
+                if not isinstance(item, (LegacyVersion, Version)):
+                    parsed_version = parse(item)
+                else:
+                    parsed_version = item
+
+                # Filter out any item which is parsed as a LegacyVersion
+                if isinstance(parsed_version, LegacyVersion):
+                    continue
+
+                # Store any item which is a pre-release for later unless we've
+                # already found a final version or we are accepting prereleases
+                if parsed_version.is_prerelease and not prereleases:
+                    if not filtered:
+                        found_prereleases.append(item)
+                else:
+                    filtered.append(item)
+
+            # If we've found no items except for pre-releases, then we'll go
+            # ahead and use the pre-releases
+            if not filtered and found_prereleases and prereleases is None:
+                return found_prereleases
+
+            return filtered
diff --git a/pipenv/patched/notpip/_vendor/packaging/oldpackaging/utils.py b/pipenv/patched/notpip/_vendor/packaging/oldpackaging/utils.py
new file mode 100644
index 00000000..4b94a82f
--- /dev/null
+++ b/pipenv/patched/notpip/_vendor/packaging/oldpackaging/utils.py
@@ -0,0 +1,63 @@
+# This file is dual licensed under the terms of the Apache License, Version
+# 2.0, and the BSD License. See the LICENSE file in the root of this repository
+# for complete details.
+from __future__ import absolute_import, division, print_function
+
+import re
+
+from .version import InvalidVersion, Version
+
+
+_canonicalize_regex = re.compile(r"[-_.]+")
+
+
+def canonicalize_name(name):
+    # This is taken from PEP 503.
+    return _canonicalize_regex.sub("-", name).lower()
+
+
+def canonicalize_version(version):
+    """
+    This is very similar to Version.__str__, but has one subtle differences
+    with the way it handles the release segment.
+    """
+
+    try:
+        version = Version(version)
+    except InvalidVersion:
+        # Legacy versions cannot be normalized
+        return version
+
+    parts = []
+
+    # Epoch
+    if version.epoch != 0:
+        parts.append("{0}!".format(version.epoch))
+
+    # Release segment
+    # NB: This strips trailing '.0's to normalize
+    parts.append(
+        re.sub(
+            r'(\.0)+$',
+            '',
+            ".".join(str(x) for x in version.release)
+        )
+    )
+
+    # Pre-release
+    if version.pre is not None:
+        parts.append("".join(str(x) for x in version.pre))
+
+    # Post-release
+    if version.post is not None:
+        parts.append(".post{0}".format(version.post))
+
+    # Development release
+    if version.dev is not None:
+        parts.append(".dev{0}".format(version.dev))
+
+    # Local version segment
+    if version.local is not None:
+        parts.append("+{0}".format(version.local))
+
+    return "".join(parts)
diff --git a/pipenv/patched/notpip/_vendor/packaging/oldpackaging/version.py b/pipenv/patched/notpip/_vendor/packaging/oldpackaging/version.py
new file mode 100644
index 00000000..6ed5cbbd
--- /dev/null
+++ b/pipenv/patched/notpip/_vendor/packaging/oldpackaging/version.py
@@ -0,0 +1,441 @@
+# This file is dual licensed under the terms of the Apache License, Version
+# 2.0, and the BSD License. See the LICENSE file in the root of this repository
+# for complete details.
+from __future__ import absolute_import, division, print_function
+
+import collections
+import itertools
+import re
+
+from ._structures import Infinity
+
+
+__all__ = [
+    "parse", "Version", "LegacyVersion", "InvalidVersion", "VERSION_PATTERN"
+]
+
+
+_Version = collections.namedtuple(
+    "_Version",
+    ["epoch", "release", "dev", "pre", "post", "local"],
+)
+
+
+def parse(version):
+    """
+    Parse the given version string and return either a :class:`Version` object
+    or a :class:`LegacyVersion` object depending on if the given version is
+    a valid PEP 440 version or a legacy version.
+    """
+    try:
+        return Version(version)
+    except InvalidVersion:
+        return LegacyVersion(version)
+
+
+class InvalidVersion(ValueError):
+    """
+    An invalid version was found, users should refer to PEP 440.
+    """
+
+
+class _BaseVersion(object):
+
+    def __hash__(self):
+        return hash(self._key)
+
+    def __lt__(self, other):
+        return self._compare(other, lambda s, o: s < o)
+
+    def __le__(self, other):
+        return self._compare(other, lambda s, o: s <= o)
+
+    def __eq__(self, other):
+        return self._compare(other, lambda s, o: s == o)
+
+    def __ge__(self, other):
+        return self._compare(other, lambda s, o: s >= o)
+
+    def __gt__(self, other):
+        return self._compare(other, lambda s, o: s > o)
+
+    def __ne__(self, other):
+        return self._compare(other, lambda s, o: s != o)
+
+    def _compare(self, other, method):
+        if not isinstance(other, _BaseVersion):
+            return NotImplemented
+
+        return method(self._key, other._key)
+
+
+class LegacyVersion(_BaseVersion):
+
+    def __init__(self, version):
+        self._version = str(version)
+        self._key = _legacy_cmpkey(self._version)
+
+    def __str__(self):
+        return self._version
+
+    def __repr__(self):
+        return "<LegacyVersion({0})>".format(repr(str(self)))
+
+    @property
+    def public(self):
+        return self._version
+
+    @property
+    def base_version(self):
+        return self._version
+
+    @property
+    def epoch(self):
+        return -1
+
+    @property
+    def release(self):
+        return None
+
+    @property
+    def pre(self):
+        return None
+
+    @property
+    def post(self):
+        return None
+
+    @property
+    def dev(self):
+        return None
+
+    @property
+    def local(self):
+        return None
+
+    @property
+    def is_prerelease(self):
+        return False
+
+    @property
+    def is_postrelease(self):
+        return False
+
+    @property
+    def is_devrelease(self):
+        return False
+
+
+_legacy_version_component_re = re.compile(
+    r"(\d+ | [a-z]+ | \.| -)", re.VERBOSE,
+)
+
+_legacy_version_replacement_map = {
+    "pre": "c", "preview": "c", "-": "final-", "rc": "c", "dev": "@",
+}
+
+
+def _parse_version_parts(s):
+    for part in _legacy_version_component_re.split(s):
+        part = _legacy_version_replacement_map.get(part, part)
+
+        if not part or part == ".":
+            continue
+
+        if part[:1] in "0123456789":
+            # pad for numeric comparison
+            yield part.zfill(8)
+        else:
+            yield "*" + part
+
+    # ensure that alpha/beta/candidate are before final
+    yield "*final"
+
+
+def _legacy_cmpkey(version):
+    # We hardcode an epoch of -1 here. A PEP 440 version can only have a epoch
+    # greater than or equal to 0. This will effectively put the LegacyVersion,
+    # which uses the defacto standard originally implemented by setuptools,
+    # as before all PEP 440 versions.
+    epoch = -1
+
+    # This scheme is taken from pkg_resources.parse_version setuptools prior to
+    # it's adoption of the packaging library.
+    parts = []
+    for part in _parse_version_parts(version.lower()):
+        if part.startswith("*"):
+            # remove "-" before a prerelease tag
+            if part < "*final":
+                while parts and parts[-1] == "*final-":
+                    parts.pop()
+
+            # remove trailing zeros from each series of numeric parts
+            while parts and parts[-1] == "00000000":
+                parts.pop()
+
+        parts.append(part)
+    parts = tuple(parts)
+
+    return epoch, parts
+
+
+# Deliberately not anchored to the start and end of the string, to make it
+# easier for 3rd party code to reuse
+VERSION_PATTERN = r"""
+    v?
+    (?:
+        (?:(?P<epoch>[0-9]+)!)?                           # epoch
+        (?P<release>[0-9]+(?:\.[0-9]+)*)                  # release segment
+        (?P<pre>                                          # pre-release
+            [-_\.]?
+            (?P<pre_l>(a|b|c|rc|alpha|beta|pre|preview))
+            [-_\.]?
+            (?P<pre_n>[0-9]+)?
+        )?
+        (?P<post>                                         # post release
+            (?:-(?P<post_n1>[0-9]+))
+            |
+            (?:
+                [-_\.]?
+                (?P<post_l>post|rev|r)
+                [-_\.]?
+                (?P<post_n2>[0-9]+)?
+            )
+        )?
+        (?P<dev>                                          # dev release
+            [-_\.]?
+            (?P<dev_l>dev)
+            [-_\.]?
+            (?P<dev_n>[0-9]+)?
+        )?
+    )
+    (?:\+(?P<local>[a-z0-9]+(?:[-_\.][a-z0-9]+)*))?       # local version
+"""
+
+
+class Version(_BaseVersion):
+
+    _regex = re.compile(
+        r"^\s*" + VERSION_PATTERN + r"\s*$",
+        re.VERBOSE | re.IGNORECASE,
+    )
+
+    def __init__(self, version):
+        # Validate the version and parse it into pieces
+        match = self._regex.search(version)
+        if not match:
+            raise InvalidVersion("Invalid version: '{0}'".format(version))
+
+        # Store the parsed out pieces of the version
+        self._version = _Version(
+            epoch=int(match.group("epoch")) if match.group("epoch") else 0,
+            release=tuple(int(i) for i in match.group("release").split(".")),
+            pre=_parse_letter_version(
+                match.group("pre_l"),
+                match.group("pre_n"),
+            ),
+            post=_parse_letter_version(
+                match.group("post_l"),
+                match.group("post_n1") or match.group("post_n2"),
+            ),
+            dev=_parse_letter_version(
+                match.group("dev_l"),
+                match.group("dev_n"),
+            ),
+            local=_parse_local_version(match.group("local")),
+        )
+
+        # Generate a key which will be used for sorting
+        self._key = _cmpkey(
+            self._version.epoch,
+            self._version.release,
+            self._version.pre,
+            self._version.post,
+            self._version.dev,
+            self._version.local,
+        )
+
+    def __repr__(self):
+        return "<Version({0})>".format(repr(str(self)))
+
+    def __str__(self):
+        parts = []
+
+        # Epoch
+        if self.epoch != 0:
+            parts.append("{0}!".format(self.epoch))
+
+        # Release segment
+        parts.append(".".join(str(x) for x in self.release))
+
+        # Pre-release
+        if self.pre is not None:
+            parts.append("".join(str(x) for x in self.pre))
+
+        # Post-release
+        if self.post is not None:
+            parts.append(".post{0}".format(self.post))
+
+        # Development release
+        if self.dev is not None:
+            parts.append(".dev{0}".format(self.dev))
+
+        # Local version segment
+        if self.local is not None:
+            parts.append("+{0}".format(self.local))
+
+        return "".join(parts)
+
+    @property
+    def epoch(self):
+        return self._version.epoch
+
+    @property
+    def release(self):
+        return self._version.release
+
+    @property
+    def pre(self):
+        return self._version.pre
+
+    @property
+    def post(self):
+        return self._version.post[1] if self._version.post else None
+
+    @property
+    def dev(self):
+        return self._version.dev[1] if self._version.dev else None
+
+    @property
+    def local(self):
+        if self._version.local:
+            return ".".join(str(x) for x in self._version.local)
+        else:
+            return None
+
+    @property
+    def public(self):
+        return str(self).split("+", 1)[0]
+
+    @property
+    def base_version(self):
+        parts = []
+
+        # Epoch
+        if self.epoch != 0:
+            parts.append("{0}!".format(self.epoch))
+
+        # Release segment
+        parts.append(".".join(str(x) for x in self.release))
+
+        return "".join(parts)
+
+    @property
+    def is_prerelease(self):
+        return self.dev is not None or self.pre is not None
+
+    @property
+    def is_postrelease(self):
+        return self.post is not None
+
+    @property
+    def is_devrelease(self):
+        return self.dev is not None
+
+
+def _parse_letter_version(letter, number):
+    if letter:
+        # We consider there to be an implicit 0 in a pre-release if there is
+        # not a numeral associated with it.
+        if number is None:
+            number = 0
+
+        # We normalize any letters to their lower case form
+        letter = letter.lower()
+
+        # We consider some words to be alternate spellings of other words and
+        # in those cases we want to normalize the spellings to our preferred
+        # spelling.
+        if letter == "alpha":
+            letter = "a"
+        elif letter == "beta":
+            letter = "b"
+        elif letter in ["c", "pre", "preview"]:
+            letter = "rc"
+        elif letter in ["rev", "r"]:
+            letter = "post"
+
+        return letter, int(number)
+    if not letter and number:
+        # We assume if we are given a number, but we are not given a letter
+        # then this is using the implicit post release syntax (e.g. 1.0-1)
+        letter = "post"
+
+        return letter, int(number)
+
+
+_local_version_separators = re.compile(r"[\._-]")
+
+
+def _parse_local_version(local):
+    """
+    Takes a string like abc.1.twelve and turns it into ("abc", 1, "twelve").
+    """
+    if local is not None:
+        return tuple(
+            part.lower() if not part.isdigit() else int(part)
+            for part in _local_version_separators.split(local)
+        )
+
+
+def _cmpkey(epoch, release, pre, post, dev, local):
+    # When we compare a release version, we want to compare it with all of the
+    # trailing zeros removed. So we'll use a reverse the list, drop all the now
+    # leading zeros until we come to something non zero, then take the rest
+    # re-reverse it back into the correct order and make it a tuple and use
+    # that for our sorting key.
+    release = tuple(
+        reversed(list(
+            itertools.dropwhile(
+                lambda x: x == 0,
+                reversed(release),
+            )
+        ))
+    )
+
+    # We need to "trick" the sorting algorithm to put 1.0.dev0 before 1.0a0.
+    # We'll do this by abusing the pre segment, but we _only_ want to do this
+    # if there is not a pre or a post segment. If we have one of those then
+    # the normal sorting rules will handle this case correctly.
+    if pre is None and post is None and dev is not None:
+        pre = -Infinity
+    # Versions without a pre-release (except as noted above) should sort after
+    # those with one.
+    elif pre is None:
+        pre = Infinity
+
+    # Versions without a post segment should sort before those with one.
+    if post is None:
+        post = -Infinity
+
+    # Versions without a development segment should sort after those with one.
+    if dev is None:
+        dev = Infinity
+
+    if local is None:
+        # Versions without a local segment should sort before those with one.
+        local = -Infinity
+    else:
+        # Versions with a local segment need that segment parsed to implement
+        # the sorting rules in PEP440.
+        # - Alpha numeric segments sort before numeric segments
+        # - Alpha numeric segments sort lexicographically
+        # - Numeric segments sort numerically
+        # - Shorter versions sort before longer versions when the prefixes
+        #   match exactly
+        local = tuple(
+            (i, "") if isinstance(i, int) else (-Infinity, i)
+            for i in local
+        )
+
+    return epoch, release, pre, post, dev, local
diff --git a/pipenv/patched/notpip/_vendor/packaging/requirements.py b/pipenv/patched/notpip/_vendor/packaging/requirements.py
index b65e9498..61e658eb 100644
--- a/pipenv/patched/notpip/_vendor/packaging/requirements.py
+++ b/pipenv/patched/notpip/_vendor/packaging/requirements.py
@@ -6,7 +6,9 @@ from __future__ import absolute_import, division, print_function
 import string
 import re
 
-from notpip._vendor.pyparsing import stringStart, stringEnd, originalTextFor, ParseException
+from notpip._vendor.pyparsing import (
+    stringStart, stringEnd, originalTextFor, ParseException
+)
 from notpip._vendor.pyparsing import ZeroOrMore, Word, Optional, Regex, Combine
 from notpip._vendor.pyparsing import Literal as L  # noqa
 from notpip._vendor.six.moves.urllib import parse as urlparse
@@ -60,8 +62,8 @@ MARKER_EXPR = originalTextFor(MARKER_EXPR())("marker")
 MARKER_EXPR.setParseAction(
     lambda s, l, t: Marker(s[t._original_start:t._original_end])
 )
-MARKER_SEPARATOR = SEMICOLON
-MARKER = MARKER_SEPARATOR + MARKER_EXPR
+MARKER_SEPERATOR = SEMICOLON
+MARKER = MARKER_SEPERATOR + MARKER_EXPR
 
 VERSION_AND_MARKER = VERSION_SPEC + Optional(MARKER)
 URL_AND_MARKER = URL + Optional(MARKER)
@@ -70,9 +72,6 @@ NAMED_REQUIREMENT = \
     NAME + Optional(EXTRAS) + (URL_AND_MARKER | VERSION_AND_MARKER)
 
 REQUIREMENT = stringStart + NAMED_REQUIREMENT + stringEnd
-# pyparsing isn't thread safe during initialization, so we do it eagerly, see
-# issue #104
-REQUIREMENT.parseString("x[]")
 
 
 class Requirement(object):
diff --git a/pipenv/patched/notpip/_vendor/packaging/specifiers.py b/pipenv/patched/notpip/_vendor/packaging/specifiers.py
index 2281ad8e..7f5a76cf 100644
--- a/pipenv/patched/notpip/_vendor/packaging/specifiers.py
+++ b/pipenv/patched/notpip/_vendor/packaging/specifiers.py
@@ -198,7 +198,7 @@ class _IndividualSpecifier(BaseSpecifier):
                         (prereleases or self.prereleases)):
                     found_prereleases.append(version)
                 # Either this is not a prerelease, or we should have been
-                # accepting prereleases from the beginning.
+                # accepting prereleases from the begining.
                 else:
                     yielded = True
                     yield version
@@ -586,7 +586,7 @@ def _pad_version(left, right):
     )
 
 
-class SpecifierSet(BaseSpecifier, set):
+class SpecifierSet(BaseSpecifier):
 
     def __init__(self, specifiers="", prereleases=None):
         # Split on , to break each indidivual specifier into it's own item, and
@@ -673,36 +673,6 @@ class SpecifierSet(BaseSpecifier, set):
     def __iter__(self):
         return iter(self._specs)
 
-    def __iadd__(self, other):
-        if isinstance(other, string_types):
-            other = SpecifierSet(other)
-        elif not isinstance(other, SpecifierSet):
-            return NotImplemented
-
-        if self._prereleases is not None and other._prereleases is not None and self._prereleases != other._prereleases:
-            raise ValueError(
-                "Cannot combine SpecifierSets with True and False prerelease "
-                "overrides."
-            )
-        specs = set(self._specs)
-        specs.intersection_update(other._specs)
-        self._specs = frozenset(specs)
-
-    def intersection_update(self, other):
-        if isinstance(other, string_types):
-            other = SpecifierSet(other)
-        elif not isinstance(other, SpecifierSet):
-            return NotImplemented
-
-        if self._prereleases is not None and other._prereleases is not None and self._prereleases != other._prereleases:
-            raise ValueError(
-                "Cannot combine SpecifierSets with True and False prerelease "
-                "overrides."
-            )
-        specs = set(self._specs)
-        specs.intersection_update(other._specs)
-        self._specs = frozenset(specs)
-
     @property
     def prereleases(self):
         # If we have been given an explicit prerelease modifier, then we'll
diff --git a/pipenv/patched/notpip/_vendor/packaging/utils.py b/pipenv/patched/notpip/_vendor/packaging/utils.py
index 4b94a82f..942387ce 100644
--- a/pipenv/patched/notpip/_vendor/packaging/utils.py
+++ b/pipenv/patched/notpip/_vendor/packaging/utils.py
@@ -5,8 +5,6 @@ from __future__ import absolute_import, division, print_function
 
 import re
 
-from .version import InvalidVersion, Version
-
 
 _canonicalize_regex = re.compile(r"[-_.]+")
 
@@ -14,50 +12,3 @@ _canonicalize_regex = re.compile(r"[-_.]+")
 def canonicalize_name(name):
     # This is taken from PEP 503.
     return _canonicalize_regex.sub("-", name).lower()
-
-
-def canonicalize_version(version):
-    """
-    This is very similar to Version.__str__, but has one subtle differences
-    with the way it handles the release segment.
-    """
-
-    try:
-        version = Version(version)
-    except InvalidVersion:
-        # Legacy versions cannot be normalized
-        return version
-
-    parts = []
-
-    # Epoch
-    if version.epoch != 0:
-        parts.append("{0}!".format(version.epoch))
-
-    # Release segment
-    # NB: This strips trailing '.0's to normalize
-    parts.append(
-        re.sub(
-            r'(\.0)+$',
-            '',
-            ".".join(str(x) for x in version.release)
-        )
-    )
-
-    # Pre-release
-    if version.pre is not None:
-        parts.append("".join(str(x) for x in version.pre))
-
-    # Post-release
-    if version.post is not None:
-        parts.append(".post{0}".format(version.post))
-
-    # Development release
-    if version.dev is not None:
-        parts.append(".dev{0}".format(version.dev))
-
-    # Local version segment
-    if version.local is not None:
-        parts.append("+{0}".format(version.local))
-
-    return "".join(parts)
diff --git a/pipenv/patched/notpip/_vendor/packaging/version.py b/pipenv/patched/notpip/_vendor/packaging/version.py
index 6ed5cbbd..83b5ee8c 100644
--- a/pipenv/patched/notpip/_vendor/packaging/version.py
+++ b/pipenv/patched/notpip/_vendor/packaging/version.py
@@ -89,26 +89,6 @@ class LegacyVersion(_BaseVersion):
     def base_version(self):
         return self._version
 
-    @property
-    def epoch(self):
-        return -1
-
-    @property
-    def release(self):
-        return None
-
-    @property
-    def pre(self):
-        return None
-
-    @property
-    def post(self):
-        return None
-
-    @property
-    def dev(self):
-        return None
-
     @property
     def local(self):
         return None
@@ -121,10 +101,6 @@ class LegacyVersion(_BaseVersion):
     def is_postrelease(self):
         return False
 
-    @property
-    def is_devrelease(self):
-        return False
-
 
 _legacy_version_component_re = re.compile(
     r"(\d+ | [a-z]+ | \.| -)", re.VERBOSE,
@@ -178,7 +154,6 @@ def _legacy_cmpkey(version):
 
     return epoch, parts
 
-
 # Deliberately not anchored to the start and end of the string, to make it
 # easier for 3rd party code to reuse
 VERSION_PATTERN = r"""
@@ -262,57 +237,32 @@ class Version(_BaseVersion):
         parts = []
 
         # Epoch
-        if self.epoch != 0:
-            parts.append("{0}!".format(self.epoch))
+        if self._version.epoch != 0:
+            parts.append("{0}!".format(self._version.epoch))
 
         # Release segment
-        parts.append(".".join(str(x) for x in self.release))
+        parts.append(".".join(str(x) for x in self._version.release))
 
         # Pre-release
-        if self.pre is not None:
-            parts.append("".join(str(x) for x in self.pre))
+        if self._version.pre is not None:
+            parts.append("".join(str(x) for x in self._version.pre))
 
         # Post-release
-        if self.post is not None:
-            parts.append(".post{0}".format(self.post))
+        if self._version.post is not None:
+            parts.append(".post{0}".format(self._version.post[1]))
 
         # Development release
-        if self.dev is not None:
-            parts.append(".dev{0}".format(self.dev))
+        if self._version.dev is not None:
+            parts.append(".dev{0}".format(self._version.dev[1]))
 
         # Local version segment
-        if self.local is not None:
-            parts.append("+{0}".format(self.local))
+        if self._version.local is not None:
+            parts.append(
+                "+{0}".format(".".join(str(x) for x in self._version.local))
+            )
 
         return "".join(parts)
 
-    @property
-    def epoch(self):
-        return self._version.epoch
-
-    @property
-    def release(self):
-        return self._version.release
-
-    @property
-    def pre(self):
-        return self._version.pre
-
-    @property
-    def post(self):
-        return self._version.post[1] if self._version.post else None
-
-    @property
-    def dev(self):
-        return self._version.dev[1] if self._version.dev else None
-
-    @property
-    def local(self):
-        if self._version.local:
-            return ".".join(str(x) for x in self._version.local)
-        else:
-            return None
-
     @property
     def public(self):
         return str(self).split("+", 1)[0]
@@ -322,25 +272,27 @@ class Version(_BaseVersion):
         parts = []
 
         # Epoch
-        if self.epoch != 0:
-            parts.append("{0}!".format(self.epoch))
+        if self._version.epoch != 0:
+            parts.append("{0}!".format(self._version.epoch))
 
         # Release segment
-        parts.append(".".join(str(x) for x in self.release))
+        parts.append(".".join(str(x) for x in self._version.release))
 
         return "".join(parts)
 
     @property
-    def is_prerelease(self):
-        return self.dev is not None or self.pre is not None
+    def local(self):
+        version_string = str(self)
+        if "+" in version_string:
+            return version_string.split("+", 1)[1]
 
     @property
-    def is_postrelease(self):
-        return self.post is not None
+    def is_prerelease(self):
+        return bool(self._version.dev or self._version.pre)
 
     @property
-    def is_devrelease(self):
-        return self.dev is not None
+    def is_postrelease(self):
+        return bool(self._version.post)
 
 
 def _parse_letter_version(letter, number):
@@ -374,7 +326,7 @@ def _parse_letter_version(letter, number):
         return letter, int(number)
 
 
-_local_version_separators = re.compile(r"[\._-]")
+_local_version_seperators = re.compile(r"[\._-]")
 
 
 def _parse_local_version(local):
@@ -384,7 +336,7 @@ def _parse_local_version(local):
     if local is not None:
         return tuple(
             part.lower() if not part.isdigit() else int(part)
-            for part in _local_version_separators.split(local)
+            for part in _local_version_seperators.split(local)
         )
 
 
diff --git a/pipenv/patched/notpip/_vendor/pkg_resources/__init__.py b/pipenv/patched/notpip/_vendor/pkg_resources/__init__.py
index 43fd4f8e..3f3a0a4e 100644
--- a/pipenv/patched/notpip/_vendor/pkg_resources/__init__.py
+++ b/pipenv/patched/notpip/_vendor/pkg_resources/__init__.py
@@ -47,8 +47,8 @@ except ImportError:
     # Python 3.2 compatibility
     import imp as _imp
 
-from notpip._vendor import six
-from notpip._vendor.six.moves import urllib, map, filter
+from pipenv.patched.notpip._vendor import six
+from pipenv.patched.notpip._vendor.six.moves import urllib, map, filter
 
 # capture these to bypass sandboxing
 from os import utime
@@ -70,12 +70,12 @@ except ImportError:
     importlib_machinery = None
 
 from . import py31compat
-from notpip._vendor import appdirs
-from notpip._vendor import packaging
-__import__('notpip._vendor.packaging.version')
-__import__('notpip._vendor.packaging.specifiers')
-__import__('notpip._vendor.packaging.requirements')
-__import__('notpip._vendor.packaging.markers')
+from pipenv.patched.notpip._vendor import appdirs
+from pipenv.patched.notpip._vendor import packaging
+__import__('pipenv.patched.notpip._vendor.packaging.version')
+__import__('pipenv.patched.notpip._vendor.packaging.specifiers')
+__import__('pipenv.patched.notpip._vendor.packaging.requirements')
+__import__('pipenv.patched.notpip._vendor.packaging.markers')
 
 
 if (3, 0) < sys.version_info < (3, 3):
diff --git a/pipenv/patched/notpip/_vendor/pyparsing.py b/pipenv/patched/notpip/_vendor/pyparsing.py
index ac8a3f2f..b5ba3d5f 100644
--- a/pipenv/patched/notpip/_vendor/pyparsing.py
+++ b/pipenv/patched/notpip/_vendor/pyparsing.py
@@ -36,7 +36,7 @@ C{"<salutation>, <addressee>!"}), built up using L{Word}, L{Literal}, and L{And}
 (L{'+'<ParserElement.__add__>} operator gives L{And} expressions, strings are auto-converted to
 L{Literal} expressions)::
 
-    from notpip._vendor.pyparsing import Word, alphas
+    from pipenv.patched.notpip._vendor.pyparsing import Word, alphas
 
     # define grammar of a greeting
     greet = Word(alphas) + "," + Word(alphas) + "!"
@@ -1572,7 +1572,7 @@ class ParserElement(object):
            after importing pyparsing.
            
            Example::
-               from notpip._vendor import pyparsing
+               from pipenv.patched.notpip._vendor import pyparsing
                pyparsing.ParserElement.enablePackrat()
         """
         if not ParserElement._packratEnabled:
diff --git a/pipenv/patched/notpip/_vendor/requests/__init__.py b/pipenv/patched/notpip/_vendor/requests/__init__.py
index 7af97bc8..9270af26 100644
--- a/pipenv/patched/notpip/_vendor/requests/__init__.py
+++ b/pipenv/patched/notpip/_vendor/requests/__init__.py
@@ -40,8 +40,8 @@ is at <http://python-requests.org>.
 :license: Apache 2.0, see LICENSE for more details.
 """
 
-from notpip._vendor import urllib3
-from notpip._vendor import chardet
+from pipenv.patched.notpip._vendor import urllib3
+from pipenv.patched.notpip._vendor import chardet
 import warnings
 from .exceptions import RequestsDependencyWarning
 
@@ -80,16 +80,16 @@ except (AssertionError, ValueError):
                   RequestsDependencyWarning)
 
 # Attempt to enable urllib3's SNI support, if possible
-from notpip._internal.compat import WINDOWS
+from pipenv.patched.notpip._internal.compat import WINDOWS
 if not WINDOWS:
     try:
-        from notpip._vendor.urllib3.contrib import pyopenssl
+        from pipenv.patched.notpip._vendor.urllib3.contrib import pyopenssl
         pyopenssl.inject_into_urllib3()
     except ImportError:
         pass
 
 # urllib3's DependencyWarnings should be silenced.
-from notpip._vendor.urllib3.exceptions import DependencyWarning
+from pipenv.patched.notpip._vendor.urllib3.exceptions import DependencyWarning
 warnings.simplefilter('ignore', DependencyWarning)
 
 from .__version__ import __title__, __description__, __url__, __version__
diff --git a/pipenv/patched/notpip/_vendor/requests/adapters.py b/pipenv/patched/notpip/_vendor/requests/adapters.py
index 866be7e9..58cea3a6 100644
--- a/pipenv/patched/notpip/_vendor/requests/adapters.py
+++ b/pipenv/patched/notpip/_vendor/requests/adapters.py
@@ -11,20 +11,20 @@ and maintain connections.
 import os.path
 import socket
 
-from notpip._vendor.urllib3.poolmanager import PoolManager, proxy_from_url
-from notpip._vendor.urllib3.response import HTTPResponse
-from notpip._vendor.urllib3.util import Timeout as TimeoutSauce
-from notpip._vendor.urllib3.util.retry import Retry
-from notpip._vendor.urllib3.exceptions import ClosedPoolError
-from notpip._vendor.urllib3.exceptions import ConnectTimeoutError
-from notpip._vendor.urllib3.exceptions import HTTPError as _HTTPError
-from notpip._vendor.urllib3.exceptions import MaxRetryError
-from notpip._vendor.urllib3.exceptions import NewConnectionError
-from notpip._vendor.urllib3.exceptions import ProxyError as _ProxyError
-from notpip._vendor.urllib3.exceptions import ProtocolError
-from notpip._vendor.urllib3.exceptions import ReadTimeoutError
-from notpip._vendor.urllib3.exceptions import SSLError as _SSLError
-from notpip._vendor.urllib3.exceptions import ResponseError
+from pipenv.patched.notpip._vendor.urllib3.poolmanager import PoolManager, proxy_from_url
+from pipenv.patched.notpip._vendor.urllib3.response import HTTPResponse
+from pipenv.patched.notpip._vendor.urllib3.util import Timeout as TimeoutSauce
+from pipenv.patched.notpip._vendor.urllib3.util.retry import Retry
+from pipenv.patched.notpip._vendor.urllib3.exceptions import ClosedPoolError
+from pipenv.patched.notpip._vendor.urllib3.exceptions import ConnectTimeoutError
+from pipenv.patched.notpip._vendor.urllib3.exceptions import HTTPError as _HTTPError
+from pipenv.patched.notpip._vendor.urllib3.exceptions import MaxRetryError
+from pipenv.patched.notpip._vendor.urllib3.exceptions import NewConnectionError
+from pipenv.patched.notpip._vendor.urllib3.exceptions import ProxyError as _ProxyError
+from pipenv.patched.notpip._vendor.urllib3.exceptions import ProtocolError
+from pipenv.patched.notpip._vendor.urllib3.exceptions import ReadTimeoutError
+from pipenv.patched.notpip._vendor.urllib3.exceptions import SSLError as _SSLError
+from pipenv.patched.notpip._vendor.urllib3.exceptions import ResponseError
 
 from .models import Response
 from .compat import urlparse, basestring
@@ -38,7 +38,7 @@ from .exceptions import (ConnectionError, ConnectTimeout, ReadTimeout, SSLError,
 from .auth import _basic_auth_str
 
 try:
-    from notpip._vendor.urllib3.contrib.socks import SOCKSProxyManager
+    from pipenv.patched.notpip._vendor.urllib3.contrib.socks import SOCKSProxyManager
 except ImportError:
     def SOCKSProxyManager(*args, **kwargs):
         raise InvalidSchema("Missing dependencies for SOCKS support.")
diff --git a/pipenv/patched/notpip/_vendor/requests/certs.py b/pipenv/patched/notpip/_vendor/requests/certs.py
index f7a37f55..52a38a30 100644
--- a/pipenv/patched/notpip/_vendor/requests/certs.py
+++ b/pipenv/patched/notpip/_vendor/requests/certs.py
@@ -12,7 +12,7 @@ If you are packaging Requests, e.g., for a Linux distribution or a managed
 environment, you can change the definition of where() to return a separately
 packaged CA bundle.
 """
-from notpip._vendor.certifi import where
+from pipenv.patched.notpip._vendor.certifi import where
 
 if __name__ == '__main__':
     print(where())
diff --git a/pipenv/patched/notpip/_vendor/requests/compat.py b/pipenv/patched/notpip/_vendor/requests/compat.py
index eb9f88c2..011972c6 100644
--- a/pipenv/patched/notpip/_vendor/requests/compat.py
+++ b/pipenv/patched/notpip/_vendor/requests/compat.py
@@ -8,7 +8,7 @@ This module handles import compatibility issues between Python 2 and
 Python 3.
 """
 
-from notpip._vendor import chardet
+from pipenv.patched.notpip._vendor import chardet
 
 import sys
 
@@ -48,7 +48,7 @@ if is_py2:
     from Cookie import Morsel
     from StringIO import StringIO
 
-    from notpip._vendor.urllib3.packages.ordered_dict import OrderedDict
+    from pipenv.patched.notpip._vendor.urllib3.packages.ordered_dict import OrderedDict
 
     builtin_str = str
     bytes = str
diff --git a/pipenv/patched/notpip/_vendor/requests/exceptions.py b/pipenv/patched/notpip/_vendor/requests/exceptions.py
index eb3feea4..ea644a8f 100644
--- a/pipenv/patched/notpip/_vendor/requests/exceptions.py
+++ b/pipenv/patched/notpip/_vendor/requests/exceptions.py
@@ -6,7 +6,7 @@ requests.exceptions
 
 This module contains the set of Requests' exceptions.
 """
-from notpip._vendor.urllib3.exceptions import HTTPError as BaseHTTPError
+from pipenv.patched.notpip._vendor.urllib3.exceptions import HTTPError as BaseHTTPError
 
 
 class RequestException(IOError):
diff --git a/pipenv/patched/notpip/_vendor/requests/help.py b/pipenv/patched/notpip/_vendor/requests/help.py
index 61e03926..abc097a7 100644
--- a/pipenv/patched/notpip/_vendor/requests/help.py
+++ b/pipenv/patched/notpip/_vendor/requests/help.py
@@ -6,9 +6,9 @@ import platform
 import sys
 import ssl
 
-from notpip._vendor import idna
-from notpip._vendor import urllib3
-from notpip._vendor import chardet
+from pipenv.patched.notpip._vendor import idna
+from pipenv.patched.notpip._vendor import urllib3
+from pipenv.patched.notpip._vendor import chardet
 
 from . import __version__ as requests_version
 
diff --git a/pipenv/patched/notpip/_vendor/requests/models.py b/pipenv/patched/notpip/_vendor/requests/models.py
index 08a3c968..157a2782 100644
--- a/pipenv/patched/notpip/_vendor/requests/models.py
+++ b/pipenv/patched/notpip/_vendor/requests/models.py
@@ -16,10 +16,10 @@ import sys
 # such as in Embedded Python. See https://github.com/requests/requests/issues/3578.
 import encodings.idna
 
-from notpip._vendor.urllib3.fields import RequestField
-from notpip._vendor.urllib3.filepost import encode_multipart_formdata
-from notpip._vendor.urllib3.util import parse_url
-from notpip._vendor.urllib3.exceptions import (
+from pipenv.patched.notpip._vendor.urllib3.fields import RequestField
+from pipenv.patched.notpip._vendor.urllib3.filepost import encode_multipart_formdata
+from pipenv.patched.notpip._vendor.urllib3.util import parse_url
+from pipenv.patched.notpip._vendor.urllib3.exceptions import (
     DecodeError, ReadTimeoutError, ProtocolError, LocationParseError)
 
 from io import UnsupportedOperation
@@ -336,7 +336,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
 
     @staticmethod
     def _get_idna_encoded_host(host):
-        from notpip._vendor import idna
+        from pipenv.patched.notpip._vendor import idna
 
         try:
             host = idna.encode(host, uts46=True).decode('utf-8')
diff --git a/pipenv/patched/notpip/_vendor/retrying.py b/pipenv/patched/notpip/_vendor/retrying.py
index 236b3953..3c12f714 100644
--- a/pipenv/patched/notpip/_vendor/retrying.py
+++ b/pipenv/patched/notpip/_vendor/retrying.py
@@ -13,7 +13,7 @@
 ## limitations under the License.
 
 import random
-from notpip._vendor import six
+from pipenv.patched.notpip._vendor import six
 import sys
 import time
 import traceback
diff --git a/pipenv/patched/notpip/_vendor/urllib3/contrib/appengine.py b/pipenv/patched/notpip/_vendor/urllib3/contrib/appengine.py
index fa7fb2ac..504d5bf0 100644
--- a/pipenv/patched/notpip/_vendor/urllib3/contrib/appengine.py
+++ b/pipenv/patched/notpip/_vendor/urllib3/contrib/appengine.py
@@ -4,8 +4,8 @@ This module provides a pool manager that uses Google App Engine's
 
 Example usage::
 
-    from notpip._vendor.urllib3 import PoolManager
-    from notpip._vendor.urllib3.contrib.appengine import AppEngineManager, is_appengine_sandbox
+    from pipenv.patched.notpip._vendor.urllib3 import PoolManager
+    from pipenv.patched.notpip._vendor.urllib3.contrib.appengine import AppEngineManager, is_appengine_sandbox
 
     if is_appengine_sandbox():
         # AppEngineManager uses AppEngine's URLFetch API behind the scenes
diff --git a/pipenv/patched/notpip/_vendor/urllib3/contrib/pyopenssl.py b/pipenv/patched/notpip/_vendor/urllib3/contrib/pyopenssl.py
index ac24a808..62bd3e13 100644
--- a/pipenv/patched/notpip/_vendor/urllib3/contrib/pyopenssl.py
+++ b/pipenv/patched/notpip/_vendor/urllib3/contrib/pyopenssl.py
@@ -164,7 +164,7 @@ def _dnsname_to_stdlib(name):
         that we can't just safely call `idna.encode`: it can explode for
         wildcard names. This avoids that problem.
         """
-        from notpip._vendor import idna
+        from pipenv.patched.notpip._vendor import idna
 
         for prefix in [u'*.', u'.']:
             if name.startswith(prefix):
diff --git a/pipenv/patched/notpip/_vendor/urllib3/packages/ssl_match_hostname/_implementation.py b/pipenv/patched/notpip/_vendor/urllib3/packages/ssl_match_hostname/_implementation.py
index 6f8703d6..62a177a7 100644
--- a/pipenv/patched/notpip/_vendor/urllib3/packages/ssl_match_hostname/_implementation.py
+++ b/pipenv/patched/notpip/_vendor/urllib3/packages/ssl_match_hostname/_implementation.py
@@ -12,7 +12,7 @@ import sys
 # backports.ssl_match_hostname to continue to be used all the way back to
 # python-2.4.
 try:
-    from notpip._vendor import ipaddress
+    from pipenv.patched.notpip._vendor import ipaddress
 except ImportError:
     ipaddress = None
 
diff --git a/pipenv/patched/notpip/_vendor/urllib3/util/ssl_.py b/pipenv/patched/notpip/_vendor/urllib3/util/ssl_.py
index 670c888c..0d0799b9 100644
--- a/pipenv/patched/notpip/_vendor/urllib3/util/ssl_.py
+++ b/pipenv/patched/notpip/_vendor/urllib3/util/ssl_.py
@@ -228,7 +228,7 @@ def create_urllib3_context(ssl_version=None, cert_reqs=None,
 
     If you wish to enable SSLv3, you can do::
 
-        from notpip._vendor.urllib3.util import ssl_
+        from pipenv.patched.notpip._vendor.urllib3.util import ssl_
         context = ssl_.create_urllib3_context()
         context.options &= ~ssl_.OP_NO_SSLv3
 
