commit d3d5d563e7ab9cba1f7b4220b6111252ecd7c941
Author: Dan Ryan <dan@danryan.co>
Date:   Sun Jul 15 16:27:51 2018 -0400

    Update pythonfinder and make full use of it in support calls
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/help.py b/pipenv/help.py
index b6e6b084..118a2272 100644
--- a/pipenv/help.py
+++ b/pipenv/help.py
@@ -3,9 +3,10 @@ import os
 import sys
 import pipenv
 
+from itertools import chain
 from pprint import pprint
 from .__version__ import __version__
-from .core import project, system_which, python_version
+from .core import project, system_which
 from .pep508checker import lookup
 from .vendor import pythonfinder
 
@@ -28,16 +29,14 @@ def get_pipenv_diagnostics():
     print("")
     print("Other Python installations in `PATH`:")
     print("")
-    finder = pythonfinder.Finder()
-    for python_v in ("2.6", "2.7", "3.4", "3.5", "3.6", "3.7"):
-        entry = finder.find_python_version(python_v)
-        if entry:
-            print("  - `{0}`: `{1}`".format(python_v, entry.path))
-    print("")
-    for p in ("python", "python2", "python3", "py"):
-        found = system_which(p, mult=True)
-        for f in found:
-            print("  - `{0}`: `{1}`".format(python_version(f), f))
+    finder = pythonfinder.Finder(system=False, global_search=True)
+    python_versions = (getattr(finder, 'system_path').find_all_python_versions(major) for major in (2, 3))
+    python_paths = list(chain(*python_versions))
+    for python in python_paths:
+        python_version = python.py_version.version
+        python_path = python.path.as_posix()
+        print("  - `{0}`: `{1}`".format(python_version, python_path))
+
     print("")
     print("PEP 508 Information:")
     print("")
diff --git a/pipenv/vendor/pythonfinder/models/path.py b/pipenv/vendor/pythonfinder/models/path.py
index 63c8abdc..c394fb22 100644
--- a/pipenv/vendor/pythonfinder/models/path.py
+++ b/pipenv/vendor/pythonfinder/models/path.py
@@ -72,7 +72,7 @@ class SystemPath(object):
             bin_dir = 'Scripts'
         else:
             bin_dir = 'bin'
-        if venv:
+        if venv and (self.system or self.global_search):
             p = Path(venv)
             self.path_order = [(p / bin_dir).as_posix()] + self.path_order
             self.paths[p] = PathEntry.create(
@@ -233,11 +233,7 @@ class SystemPath(object):
                 for p in _path_objects
             }
         )
-        return cls(
-            paths=path_entries, path_order=paths,
-            only_python=only_python,
-            system=system, global_search=global_search,
-        )
+        return cls(paths=path_entries, path_order=paths, only_python=only_python, system=system, global_search=global_search)
 
 
 @attr.s
diff --git a/pipenv/vendor/pythonfinder/pythonfinder.py b/pipenv/vendor/pythonfinder/pythonfinder.py
index 7e5813bb..32e62b18 100644
--- a/pipenv/vendor/pythonfinder/pythonfinder.py
+++ b/pipenv/vendor/pythonfinder/pythonfinder.py
@@ -7,24 +7,20 @@ from .models import SystemPath
 
 class Finder(object):
     def __init__(self, path=None, system=False, global_search=True):
-        """Cross-platform Finder for locating python and other executables.
-
-        Searches for python and other specified binaries starting in `path`,
-        if supplied, but searching the bin path of `sys.executable` if
-        `system=True`, and then searching in the `os.environ['PATH']` if
-        `global_search=True`.
-
-        When `global_search` is `False`, this search operation is restricted to
-        the allowed locations of `path` and `system`.
-
-        :param path: A bin-directory search location, or None to ignore.
-        :type path: str or None
-        :param system: Whether to include the bin-dir of `sys.executable`,
-            defaults to False
-        :type system: bool
-        :param global_search: Whether to search the global path from
-            os.environ, defaults to True.
-        :type global_search: bool
+        """Finder A cross-platform Finder for locating python and other executables.
+        
+        Searches for python and other specified binaries starting in `path`, if supplied,
+        but searching the bin path of `sys.executable` if `system=True`, and then
+        searching in the `os.environ['PATH']` if `global_search=True`.  When `global_search`
+        is `False`, this search operation is restricted to the allowed locations of 
+        `path` and `system`.
+        
+        :param path: A bin-directory search location, defaults to None
+        :param path: str, optional
+        :param system: Whether to include the bin-dir of `sys.executable`, defaults to False
+        :param system: bool, optional
+        :param global_search: Whether to search the global path from os.environ, defaults to True
+        :param global_search: bool, optional
         :returns: a :class:`~pythonfinder.pythonfinder.Finder` object.
         """
 
@@ -38,8 +34,7 @@ class Finder(object):
     def system_path(self):
         if not self._system_path:
             self._system_path = SystemPath.create(
-                path=self.path_prepend, system=self.system,
-                global_search=self.global_search,
+                path=self.path_prepend, system=self.system, global_search=self.global_search
             )
         return self._system_path
 
