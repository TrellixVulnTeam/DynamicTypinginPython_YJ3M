commit ebf5ed843b456e80731749dcb4583935443efc54
Author: Jeff Tratner <jtratner@counsyl.com>
Date:   Fri Mar 23 15:15:53 2018 -0700

    Detect .venv at project root when in subdirectory
    
    Also remove `PIPENV_SHELL_COMPAT` which appears to be no longer used.
    
    (confirmed test case fails without this change and passes with it).

diff --git a/HISTORY.txt b/HISTORY.txt
index a542966f..8e816889 100644
--- a/HISTORY.txt
+++ b/HISTORY.txt
@@ -1,3 +1,5 @@
+latest:
+ - Fix bug in detecting .venv at project root when in subdirectories.
 11.9.1:
  - Resolve editable packages on the local filesystem.
 11.9.0:
diff --git a/pipenv/environments.py b/pipenv/environments.py
index 100208bf..f5d53a1a 100644
--- a/pipenv/environments.py
+++ b/pipenv/environments.py
@@ -14,8 +14,6 @@ PIPENV_PYTHON = os.environ.get('PIPENV_PYTHON')
 # Create the virtualenv in the project, instead of with pew.
 PIPENV_VENV_IN_PROJECT = bool(
     os.environ.get('PIPENV_VENV_IN_PROJECT')
-) or os.path.isdir(
-    '.venv'
 )
 # Overwrite all index funcitonality.
 PIPENV_TEST_INDEX = os.environ.get('PIPENV_TEST_INDEX')
@@ -55,9 +53,6 @@ PIPENV_USE_HASHES = True
 PIPENV_SKIP_VALIDATION = True
 # Tells Pipenv where to load .env from.
 PIPENV_DOTENV_LOCATION = os.environ.get('PIPENV_DOTENV_LOCATION')
-# Use shell compatibility mode when using venv in project mode.
-if PIPENV_VENV_IN_PROJECT:
-    PIPENV_SHELL_COMPAT = True
 # Disable spinner on Windows.
 if os.name == 'nt':
     PIPENV_NOSPIN = True
diff --git a/pipenv/project.py b/pipenv/project.py
index 747c6ac7..961ac52e 100644
--- a/pipenv/project.py
+++ b/pipenv/project.py
@@ -214,9 +214,11 @@ class Project(object):
         # Use cached version, if available.
         if self._virtualenv_location:
             return self._virtualenv_location
+        venv_in_project = PIPENV_VENV_IN_PROJECT or \
+            os.path.exists(os.path.join(self.project_directory, '.venv'))
 
-        # The user wants the virtualenv in the project.
-        if not PIPENV_VENV_IN_PROJECT:
+        # Default mode.
+        if not venv_in_project:
             c = delegator.run(
                 '{0} -m pipenv.pew dir "{1}"'.format(
                     escape_grouped_arguments(sys.executable),
@@ -224,7 +226,7 @@ class Project(object):
                 )
             )
             loc = c.out.strip()
-        # Default mode.
+        # The user wants the virtualenv in the project.
         else:
             loc = os.sep.join(
                 self.pipfile_location.split(os.sep)[:-1] + ['.venv']
diff --git a/tests/test_pipenv.py b/tests/test_pipenv.py
index db1575d1..1329d5b2 100644
--- a/tests/test_pipenv.py
+++ b/tests/test_pipenv.py
@@ -703,6 +703,24 @@ requests = {version = "*"}
 
                 assert normalize_drive(p.path) in p.pipenv('--venv').out
 
+    @pytest.mark.dotenv
+    def test_venv_at_project_root(self):
+        def _assert_venv_at_project_root(p):
+            c = p.pipenv('--venv')
+            assert c.return_code == 0
+            assert p.path in c.out
+        with temp_environ():
+            with PipenvInstance(chdir=True, pipfile=False) as p:
+                os.environ['PIPENV_VENV_IN_PROJECT'] = '1'
+                c = p.pipenv('install')
+                assert c.return_code == 0
+                _assert_venv_at_project_root(p)
+                del os.environ['PIPENV_VENV_IN_PROJECT']
+                os.mkdir('subdir')
+                os.chdir('subdir')
+                # should still detect installed
+                _assert_venv_at_project_root(p)
+
     @pytest.mark.dotvenv
     def test_reuse_previous_venv(self, pypi):
         with PipenvInstance(chdir=True, pypi=pypi) as p:
@@ -724,7 +742,6 @@ requests = {version = "*"}
         with temp_environ():
             os.environ['PIPENV_VENV_IN_PROJECT'] = '1'
             os.environ['PIPENV_IGNORE_VIRTUALENVS'] = '1'
-            os.environ['PIPENV_SHELL_COMPAT'] = '1'
             with PipenvInstance(chdir=True, pypi=pypi) as p:
                 # Signal to pew to look in the project directory for the environment
                 os.environ['WORKON_HOME'] = p.path
