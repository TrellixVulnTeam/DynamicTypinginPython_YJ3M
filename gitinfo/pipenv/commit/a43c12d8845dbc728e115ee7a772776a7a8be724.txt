commit a43c12d8845dbc728e115ee7a772776a7a8be724
Author: Kenneth Reitz <me@kennethreitz.org>
Date:   Tue Sep 19 16:18:07 2017 -0400

    fix for #512
    
    Signed-off-by: Kenneth Reitz <me@kennethreitz.org>

diff --git a/pipenv/project.py b/pipenv/project.py
index ac2338b6..fe01d390 100644
--- a/pipenv/project.py
+++ b/pipenv/project.py
@@ -263,21 +263,34 @@ class Project(object):
         """Returns a list of packages, for pip-tools to consume."""
         ps = {}
         for k, v in self.parsed_pipfile.get('packages', {}).items():
-            # Skip VCS deps.
-            if ('extras' in v) or (not hasattr(v, 'keys')):
-                ps.update({k: v})
+            # Skip editable VCS deps.
+            if hasattr(v, 'keys'):
+                if is_vcs(v):
+                    if 'editable' not in v:
+                        continue
+                    else:
+                        ps.update({k: v})
+                else:
+                    ps.update({k: v})
         return ps
 
     @property
     def dev_packages(self):
         """Returns a list of dev-packages, for pip-tools to consume."""
         ps = {}
-        for k, v in self.parsed_pipfile.get('dev-packages', {}).items():
-            # Skip VCS deps.
-            if ('extras' in v) or (not hasattr(v, 'keys')):
-                ps.update({k: v})
+        for k, v in self.parsed_pipfile.get('packages', {}).items():
+            # Skip editable VCS deps.
+            if hasattr(v, 'keys'):
+                if is_vcs(v):
+                    if 'editable' not in v:
+                        continue
+                    else:
+                        ps.update({k: v})
+                else:
+                    ps.update({k: v})
         return ps
 
+
     def touch_pipfile(self):
         """Simply touches the Pipfile, for later use."""
         with open('Pipfile', 'a'):
diff --git a/pipenv/utils.py b/pipenv/utils.py
index 8db370b6..aa4e23c3 100644
--- a/pipenv/utils.py
+++ b/pipenv/utils.py
@@ -393,7 +393,7 @@ def is_required_version(version, specified_version):
 def is_vcs(pipfile_entry):
     """Determine if dictionary entry from Pipfile is for a vcs dependency."""
 
-    if isinstance(pipfile_entry, dict):
+    if hasattr(pipfile_entry, 'keys'):
         return any(key for key in pipfile_entry.keys() if key in VCS_LIST)
     return False
 
