commit f051d348f58fa3509dc3cddaa691ac9300469790
Author: Dan Ryan <dan.ryan@canonical.com>
Date:   Wed Apr 29 03:47:33 2020 -0400

    Skip satisfied dependencies during installation
    
    - Skip satisfied dependencies in the environment during install
      by checking whether the constraint of a specifier is satisfied
    - If there is no specifier and a dependency is installed, assume it
      is satisfied
    - For editable dependencies, if the dependency in the environment is
      an egg link and points at the same path as the given dep, assume
      it is satisfied
    - Fixes #3057
    
    Signed-off-by: Dan Ryan <dan.ryan@canonical.com>

diff --git a/news/3057.feature.rst b/news/3057.feature.rst
new file mode 100644
index 00000000..e13861e5
--- /dev/null
+++ b/news/3057.feature.rst
@@ -0,0 +1 @@
+``pipenv install`` and ``pipenv sync`` will no longer attempt to install satisfied dependencies during installation.
diff --git a/pipenv/core.py b/pipenv/core.py
index 1ab68bb3..b28af349 100644
--- a/pipenv/core.py
+++ b/pipenv/core.py
@@ -735,6 +735,9 @@ def batch_install(deps_list, procs, failed_deps_queue,
 
     deps_to_install = deps_list[:]
     deps_to_install.extend(sequential_deps)
+    deps_to_install = [
+        dep for dep in deps_to_install if not project.environment.is_satisfied(dep)
+    ]
     sequential_dep_names = [d.name for d in sequential_deps]
 
     deps_list_bar = progress.bar(
diff --git a/pipenv/environment.py b/pipenv/environment.py
index 7538ea9e..735a63bb 100644
--- a/pipenv/environment.py
+++ b/pipenv/environment.py
@@ -19,6 +19,7 @@ import six
 import pipenv
 
 from .vendor.cached_property import cached_property
+from .vendor.packaging.utils import canonicalize_name
 from .vendor import vistir
 
 from .utils import normalize_path, make_posix
@@ -712,6 +713,23 @@ class Environment(object):
 
         return any(d for d in self.get_distributions() if d.project_name == pkgname)
 
+    def is_satisfied(self, req):
+        match = next(
+            iter(
+                d for d in self.get_distributions()
+                if canonicalize_name(d.project_name) == req.normalized_name
+            ), None
+        )
+        if match is not None:
+            if req.editable and self.find_egg(match):
+                return req.line_instance.path == match.location
+            elif req.line_instance.specifiers is not None:
+                return req.line_instance.specifiers.contains(
+                    match.version, prereleases=True
+                )
+            return True
+        return False
+
     def run(self, cmd, cwd=os.curdir):
         """Run a command with :class:`~subprocess.Popen` in the context of the environment
 
