commit 079289f6a06c02eeb8f8f8ae73840267330216fe
Author: Nate Prewitt <Nate.Prewitt@gmail.com>
Date:   Fri Feb 24 21:11:17 2017 -0700

    move to normalized internal representation for pipfile and lockfile

diff --git a/pipenv/cli.py b/pipenv/cli.py
index 6f1b7557..9e606c40 100644
--- a/pipenv/cli.py
+++ b/pipenv/cli.py
@@ -86,7 +86,7 @@ def ensure_pipfile(validate=True):
     # Validate the Pipfile's contents.
     if validate and project.virtualenv_exists:
         # Ensure that Pipfile is using proper casing.
-        p = project.parsed_pipfile
+        p = project._pipfile
         changed = ensure_proper_casing(pfile=p)
 
         # Write changes out to disk.
@@ -186,35 +186,37 @@ def do_install_dependencies(dev=False, only=False, bare=False, requirements=Fals
     if requirements:
         bare = True
 
-    # Load the Pipfile.
-    p = pipfile.load(project.pipfile_location)
-
     # Load the lockfile if it exists, or if only is being used (e.g. lock is being used).
     if only or not project.lockfile_exists:
         if not bare:
             click.echo(crayons.yellow('Installing dependencies from Pipfile...'))
-            lockfile = json.loads(p.lock())
+            lockfile = project.split_vcs(project._lockfile)
     else:
         if not bare:
             click.echo(crayons.yellow('Installing dependencies from Pipfile.lock...'))
         with open(project.lockfile_location) as f:
-            lockfile = json.load(f)
+            lockfile = project.split_vcs(json.load(f))
 
     # Install default dependencies, always.
     deps = lockfile['default'] if not only else {}
+    vcs_deps = lockfile.get('default-vcs', {})
 
     # Add development deps if --dev was passed.
     if dev:
         deps.update(lockfile['develop'])
+        vcs_deps.update(lockfile.get('develop-vcs', {}))
 
     # Convert the deps to pip-compatible arguments.
-    deps_path = convert_deps_to_pip(deps)
+    hashed_deps_path = convert_deps_to_pip(deps)
+    vcs_deps_path = convert_deps_to_pip(vcs_deps)
 
     # --requirements was passed.
     if requirements:
-        with open(deps_path) as f:
+        with open(hashed_deps_path) as f:
             click.echo(f.read())
-            sys.exit(0)
+        with open(vcs_deps_path) as f:
+            click.echo(f.read())
+        sys.exit(0)
 
     # pip install:
     with spinner():
@@ -230,19 +232,18 @@ def do_install_dependencies(dev=False, only=False, bare=False, requirements=Fals
 
     # Cleanup the temp requirements file.
     if requirements:
-        os.remove(deps_path)
+        os.remove(hashed_deps_path)
+        os.remove(vcs_deps_path)
 
 
 def do_download_dependencies(dev=False, only=False, bare=False):
     """"Executes the download functionality."""
 
-    # Load the Pipfile.
-    p = pipfile.load(project.pipfile_location)
+    # Load the Lockfile.
+    lockfile = project.split_vcs(project._lockfile)
 
-    # Load the Pipfile.
     if not bare:
         click.echo(crayons.yellow('Downloading dependencies from Pipfile...'))
-    lockfile = json.loads(p.lock())
 
     # Install default dependencies, always.
     deps = lockfile['default'] if not only else {}
@@ -397,16 +398,13 @@ def do_lock():
         names_map = do_download_dependencies(dev=True, only=True, bare=True)
 
     # Load the Pipfile and generate a lockfile.
-    p = pipfile.load(project.pipfile_location)
-    lockfile = json.loads(p.lock())
+    p = project._pipfile
+    lockfile = project._lockfile
 
     # Pip freeze development dependencies.
     with spinner():
         results = get_downloads_info(names_map, 'dev-packages')
 
-    # Clear generated lockfile before updating.
-    lockfile['develop'] = {}
-
     # Add Development dependencies to lockfile.
     for dep in results:
         if dep:
@@ -425,14 +423,13 @@ def do_lock():
     # Pip freeze default dependencies.
     results = get_downloads_info(names_map, 'packages')
 
-    # Clear generated lockfile before updating.
-    lockfile['default'] = {}
-
     # Add default dependencies to lockfile.
     for dep in results:
         if dep:
             lockfile['default'].update({dep['name']: {'hash': dep['hash'], 'version': '=={0}'.format(dep['version'])}})
 
+    lockfile = project.recase_file(lockfile)
+
     # Write out lockfile.
     with open(project.lockfile_location, 'w') as f:
         f.write(json.dumps(lockfile, indent=4, separators=(',', ': ')))
diff --git a/pipenv/project.py b/pipenv/project.py
index ed7716ba..b81bf87e 100644
--- a/pipenv/project.py
+++ b/pipenv/project.py
@@ -12,7 +12,7 @@ import delegator
 from requests.compat import OrderedDict
 
 from .utils import (format_toml, mkdir_p, convert_deps_from_pip,
-    proper_case, pep426_name, VCS_LIST)
+    proper_case, pep426_name, is_vcs)
 from .environments import PIPENV_MAX_DEPTH, PIPENV_VENV_IN_PROJECT
 
 
@@ -130,6 +130,68 @@ class Project(object):
         with open(self.pipfile_location) as f:
             return toml.load(f, _dict=OrderedDict)
 
+    @property
+    def _pipfile(self):
+        """Pipfile divided by PyPI and external dependencies."""
+        pfile = self.parsed_pipfile
+        for section in ('packages', 'dev-packages'):
+            p_section = pfile.get(section, {})
+
+            for key in list(p_section.keys()):
+                # Normalize key name to pep426.
+                norm_key = pep426_name(key)
+                p_section[norm_key] = p_section.pop(key)
+
+        return pfile
+
+    def split_vcs(self, split_file):
+        """Split VCS dependencies out from file."""
+        if 'packages' in split_file or 'dev-packages' in split_file:
+            sections = ('packages', 'dev-packages')
+        elif 'default' in split_file or 'develop' in split_file:
+            sections = ('default', 'develop')
+
+        for section in sections:
+            entries = split_file.get(section, {})
+            vcs_dict = dict((k, entries.pop(k)) for k in list(entries.keys()) if is_vcs(entries[k]))
+            split_file[section+'-vcs'] = vcs_dict
+
+        return split_file
+
+    def recase_file(self, in_file):
+        """Recase file before writing to output."""
+        if 'packages' in in_file or 'dev-packages' in in_file:
+            sections = ('packages', 'dev-packages')
+        elif 'default' in in_file or 'develop' in in_file:
+            sections = ('default', 'develop')
+
+        for section in sections:
+            file_section = in_file.get(section, {})
+
+            for key in list(file_section.keys()):
+                try:
+                    cased_key = proper_case(key)
+                except IOError:
+                    cased_key = key
+                file_section[cased_key] = file_section.pop(key)
+
+        return in_file
+
+    @property
+    def _lockfile(self):
+        """Pipfile.lock divided by PyPI and external dependencies."""
+        pfile = pipfile.load(self.pipfile_location)
+        lockfile = json.loads(pfile.lock())
+
+        for section in ('default', 'develop'):
+            lock_section = lockfile.get(section, {})
+
+            for key in list(lock_section.keys()):
+                norm_key = pep426_name(key)
+                lockfile[section][norm_key] = lock_section.pop(key)
+
+        return lockfile
+
     @property
     def lockfile_location(self):
         return '{0}.lock'.format(self.pipfile_location)
@@ -170,21 +232,22 @@ class Project(object):
     def remove_package_from_pipfile(self, package_name, dev=False):
 
         # Read and append Pipfile.
-        p = self.parsed_pipfile
+        p = self._pipfile
+
+        package_name = pep426_name(package_name)
 
         key = 'dev-packages' if dev else 'packages'
 
-        if key in p:
-            if package_name in p[key]:
-                del p[key][package_name]
+        if key in p and package_name in p[key]:
+            del p[key][package_name]
 
         # Write Pipfile.
-        self.write_toml(p)
+        self.write_toml(self.recase_file(p))
 
     def add_package_to_pipfile(self, package_name, dev=False):
 
         # Read and append Pipfile.
-        p = self.parsed_pipfile
+        p = self._pipfile
 
         key = 'dev-packages' if dev else 'packages'
 
@@ -199,4 +262,4 @@ class Project(object):
         p[key][package_name] = package[package_name]
 
         # Write Pipfile.
-        self.write_toml(p)
+        self.write_toml(self.recase_file(p))
diff --git a/pipenv/utils.py b/pipenv/utils.py
index cc163223..f93ab7ad 100644
--- a/pipenv/utils.py
+++ b/pipenv/utils.py
@@ -155,6 +155,12 @@ def is_required_version(version, specified_version):
     return True
 
 
+def is_vcs(pipfile_entry):
+    """Determine if dictionary entry from Pipfile is for a vcs dependency."""
+    if isinstance(pipfile_entry, dict):
+        return any(key for key in pipfile_entry.keys() if key in VCS_LIST)
+    return False
+
 def pep426_name(name):
     """Normalize package name to pep426 style standard."""
     return name.lower().replace('_','-')
