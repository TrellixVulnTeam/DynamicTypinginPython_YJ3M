commit fab345c9eadbcd97deaa23386c7904b7f819709e
Author: Kenneth Reitz <me@kennethreitz.org>
Date:   Wed Feb 28 10:06:28 2018 -0500

    --outdated
    
    Signed-off-by: Kenneth Reitz <me@kennethreitz.org>

diff --git a/pipenv/cli.py b/pipenv/cli.py
index acd02eb8..6a3206f1 100644
--- a/pipenv/cli.py
+++ b/pipenv/cli.py
@@ -326,11 +326,19 @@ def check(three=None, python=False, system=False, unused=False, style=False, arg
 @click.option('--pre', is_flag=True, default=False, help=u"Allow pre–releases.")
 @click.option('--keep-outdated', is_flag=True, default=False, help=u"Keep out–dated dependencies from being updated in Pipfile.lock.")
 @click.option('--sequential', is_flag=True, default=False, help="Install dependencies one-at-a-time, instead of concurrently.")
+@click.option('--outdated', is_flag=True, default=False, help=u"List out–of–date dependencies.")
+@click.option('--dry-run', is_flag=True, default=None, help=u"List out–of–date dependencies.")
 @click.argument('packages', nargs=-1)
 @click.pass_context
-def update(ctx, three=None, python=False, system=False, verbose=False, clear=False, keep_outdated=False, pre=False, dev=False, bare=False, sequential=False, packages=None):
+def update(ctx, three=None, python=False, system=False, verbose=False, clear=False, keep_outdated=False, pre=False, dev=False, bare=False, sequential=False, packages=None, dry_run=None, outdated=False):
     from . import core
 
+    if not outdated:
+        outdated = bool(dry_run)
+
+    if outdated:
+        core.do_outdated()
+
     if not packages:
         click.echo('{0} {1} {2} {3}{4}'.format(
             crayons.white('Running', bold=True),
diff --git a/pipenv/core.py b/pipenv/core.py
index 9049631b..30deb5fd 100644
--- a/pipenv/core.py
+++ b/pipenv/core.py
@@ -1009,7 +1009,7 @@ def get_downloads_info(names_map, section):
     return info
 
 
-def do_lock(verbose=False, system=False, clear=False, pre=False, keep_outdated=False):
+def do_lock(verbose=False, system=False, clear=False, pre=False, keep_outdated=False, write=True):
     """Executes the freeze functionality."""
 
     cached_lockfile = {}
@@ -1023,15 +1023,16 @@ def do_lock(verbose=False, system=False, clear=False, pre=False, keep_outdated=F
 
     project.destroy_lockfile()
 
-    # Alert the user of progress.
-    click.echo(
-        u'{0} {1} {2}'.format(
-            crayons.normal('Locking'),
-            crayons.red('[dev-packages]'),
-            crayons.normal('dependencies…')
-        ),
-        err=True
-    )
+    if write:
+        # Alert the user of progress.
+        click.echo(
+            u'{0} {1} {2}'.format(
+                crayons.normal('Locking'),
+                crayons.red('[dev-packages]'),
+                crayons.normal('dependencies…')
+            ),
+            err=True
+        )
 
     # Create the lockfile.
     lockfile = project._lockfile
@@ -1102,15 +1103,16 @@ def do_lock(verbose=False, system=False, clear=False, pre=False, keep_outdated=F
             except IndexError:
                 pass
 
-    # Alert the user of progress.
-    click.echo(
-        u'{0} {1} {2}'.format(
-            crayons.normal('Locking'),
-            crayons.red('[packages]'),
-            crayons.normal('dependencies…')
-        ),
-        err=True
-    )
+    if write:
+        # Alert the user of progress.
+        click.echo(
+            u'{0} {1} {2}'.format(
+                crayons.normal('Locking'),
+                crayons.red('[packages]'),
+                crayons.normal('dependencies…')
+            ),
+            err=True
+        )
 
     # Resolve package dependencies, with pip-tools.
     deps = convert_deps_to_pip(project.packages, project, r=False, include_index=True)
@@ -1174,33 +1176,36 @@ def do_lock(verbose=False, system=False, clear=False, pre=False, keep_outdated=F
         if default_package in lockfile['develop']:
             lockfile['develop'][default_package] = lockfile['default'][default_package]
 
-    # Run the PEP 508 checker in the virtualenv, add it to the lockfile.
-    cmd = '"{0}" {1}'.format(which('python', allow_global=system), shellquote(pep508checker.__file__.rstrip('cdo')))
-    c = delegator.run(cmd)
-    try:
-        lockfile['_meta']['host-environment-markers'] = simplejson.loads(c.out)
-    except ValueError:
-        click.echo(crayons.red("An unexpected error occurred while accessing your virtualenv's python installation!"))
-        click.echo('Please run $ {0} to re-create your environment.'.format(crayons.red('pipenv --rm')))
-        sys.exit(1)
+    if write:
+        # Run the PEP 508 checker in the virtualenv, add it to the lockfile.
+        cmd = '"{0}" {1}'.format(which('python', allow_global=system), shellquote(pep508checker.__file__.rstrip('cdo')))
+        c = delegator.run(cmd)
+        try:
+            lockfile['_meta']['host-environment-markers'] = simplejson.loads(c.out)
+        except ValueError:
+            click.echo(crayons.red("An unexpected error occurred while accessing your virtualenv's python installation!"))
+            click.echo('Please run $ {0} to re-create your environment.'.format(crayons.red('pipenv --rm')))
+            sys.exit(1)
 
-    # Write out the lockfile.
-    with open(project.lockfile_location, 'w') as f:
-        simplejson.dump(lockfile, f, indent=4, separators=(',', ': '), sort_keys=True)
-        # Write newline at end of document. GH Issue #319.
-        f.write('\n')
+        # Write out the lockfile.
+        with open(project.lockfile_location, 'w') as f:
+            simplejson.dump(lockfile, f, indent=4, separators=(',', ': '), sort_keys=True)
+            # Write newline at end of document. GH Issue #319.
+            f.write('\n')
 
-    click.echo(
-        '{0}'.format(
-            crayons.normal(
-                'Updated Pipfile.lock ({0})!'.format(
-                    lockfile['_meta'].get('hash', {}).get('sha256')[-6:]
-                ),
-                bold=True
-            )
-        ),
-        err=True
-    )
+        click.echo(
+            '{0}'.format(
+                crayons.normal(
+                    'Updated Pipfile.lock ({0})!'.format(
+                        lockfile['_meta'].get('hash', {}).get('sha256')[-6:]
+                    ),
+                    bold=True
+                )
+            ),
+            err=True
+        )
+    else:
+        return lockfile
 
 
 def activate_virtualenv(source=True):
@@ -1676,6 +1681,33 @@ def do_py(system=False):
     except AttributeError:
         click.echo(crayons.red('No project found!'))
 
+def do_outdated():
+    packages = {}
+    results = delegator.run('{0} freeze'.format(which('pip'))).out.strip().split('\n')
+    for result in results:
+        packages.update(convert_deps_from_pip(result))
+
+    updated_packages = {}
+
+    lockfile = do_lock(write=False)
+    for section in ('develop', 'default'):
+        for package in lockfile[section]:
+            try:
+                updated_packages[package] = lockfile[section][package]['version']
+            except KeyError:
+                pass
+
+    outdated = []
+    for package in packages:
+        if package in updated_packages:
+            if updated_packages[package] != packages[package]:
+                outdated.append((package, updated_packages[package], packages[package]))
+
+    for package, new_version, old_version in outdated:
+        click.echo('Package {0!r} out–of–date: {1!r} installed, {2!r} available.'.format(package, old_version, new_version))
+
+    sys.exit(bool(outdated))
+
 
 
 def do_install(
