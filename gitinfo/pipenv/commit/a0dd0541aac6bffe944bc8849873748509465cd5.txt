commit a0dd0541aac6bffe944bc8849873748509465cd5
Author: Dan Ryan <dan@danryan.co>
Date:   Sat Nov 3 18:34:45 2018 -0400

    Fix virtualenv path discovery
    
    - Fixes #3154
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/news/3154.trivial.rst b/news/3154.trivial.rst
new file mode 100644
index 00000000..0c3277a6
--- /dev/null
+++ b/news/3154.trivial.rst
@@ -0,0 +1 @@
+Fixed an unreleased bug with determining project virtualenv paths across python versions.
diff --git a/pipenv/project.py b/pipenv/project.py
index 0b32811d..5c8568f0 100644
--- a/pipenv/project.py
+++ b/pipenv/project.py
@@ -667,17 +667,21 @@ class Project(object):
 
     def _get_editable_packages(self, dev=False):
         section = "dev-packages" if dev else "packages"
+        # section = "{0}-editable".format(section)
         packages = {
             k: v
+            # for k, v in self._pipfile[section].items()
             for k, v in self.parsed_pipfile.get(section, {}).items()
-            if is_editable(v)
+            if is_editable(k) or is_editable(v)
         }
         return packages
 
     def _get_vcs_packages(self, dev=False):
         section = "dev-packages" if dev else "packages"
+        # section = "{0}-vcs".format(section)
         packages = {
             k: v
+            # for k, v in self._pipfile[section].items()
             for k, v in self.parsed_pipfile.get(section, {}).items()
             if is_vcs(v) or is_vcs(k)
         }
@@ -1132,42 +1136,22 @@ class Project(object):
         prefix = vistir.compat.Path(location)
         import importlib
         py_version = tuple([int(v) for v in self.py_version.split(".")])
+        py_version_short = ".".join([str(v) for v in py_version[:2]])
+        running_version = ".".join([str(v) for v in sys.version_info[:2]])
         try:
-            with sys_version(py_version):
-                _virtualenv = importlib.import_module("virtualenv")
-        except ImportError:
+            _virtualenv = importlib.import_module("virtualenv")
+        except (ImportError, AttributeError):
             with vistir.contextmanagers.temp_path():
-                from string import Formatter
-                formatter = Formatter()
-                import sysconfig
-                if getattr(sys, "real_prefix", None):
-                    scheme = sysconfig._get_default_scheme()
-                    sysconfig._INSTALL_SCHEMES["posix_prefix"]["purelib"]
-                    if not scheme:
-                        scheme = "posix_prefix" if not sys.platform == "win32" else "nt"
-                    is_purelib = "purelib" in sysconfig._INSTALL_SCHEMES[scheme]
-                    lib_key = "purelib" if is_purelib else "platlib"
-                    lib = sysconfig._INSTALL_SCHEMES[scheme][lib_key]
-                    fields = [field for _, field, _, _ in formatter.parse() if field]
-                    config = {
-                        "py_version_short": self._pyversion,
-                    }
-                    for field in fields:
-                        if field not in config:
-                            config[field] = prefix
-                    sys.path = [
-                        os.path.join(sysconfig._INSTALL_SCHEMES[scheme][lib_key], "site-packages"),
-                    ] + sys.path
-                    with sys_version(py_version):
-                        six.reload_module(importlib)
-                        _virtualenv = importlib.import_module("virtualenv")
+                sys.path = vistir.misc.load_path(self.which("python"))
+                six.moves.reload_module(importlib)
+                _virtualenv = importlib.import_module("virtualenv")
         with sys_version(py_version):
             home, lib, inc, bin_ = _virtualenv.path_locations(prefix.absolute().as_posix())
         paths = {
-            "lib": lib,
-            "include": inc,
+            "lib": lib.replace(running_version, py_version_short),
+            "include": inc.replace(running_version, py_version_short),
             "scripts": bin_,
-            "purelib": lib,
+            "purelib": lib.replace(running_version, py_version_short),
             "prefix": home,
             "base": home
         }
