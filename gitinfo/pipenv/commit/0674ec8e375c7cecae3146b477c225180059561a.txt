commit 0674ec8e375c7cecae3146b477c225180059561a
Author: Kenneth Reitz <me@kennethreitz.org>
Date:   Tue Apr 25 10:50:11 2017 -0400

    basic machinery for pip file importing in place, now to import

diff --git a/pipenv/cli.py b/pipenv/cli.py
index 52763f30..e79f5852 100644
--- a/pipenv/cli.py
+++ b/pipenv/cli.py
@@ -90,6 +90,10 @@ def ensure_pipfile(validate=True):
     # Assert Pipfile exists.
     if not project.pipfile_exists:
 
+        if project.requirements_exists:
+            print 'requirements file found! importing...'
+            exit()
+
         click.echo(crayons.yellow('Creating a Pipfile for this project...'), err=True)
 
         # Create the pipfile if it doesn't exist.
diff --git a/pipenv/project.py b/pipenv/project.py
index ab103aaa..855532d4 100644
--- a/pipenv/project.py
+++ b/pipenv/project.py
@@ -12,7 +12,7 @@ import delegator
 from requests.compat import OrderedDict
 
 from .utils import (format_toml, mkdir_p, convert_deps_from_pip,
-    pep423_name, recase_file)
+    pep423_name, recase_file, find_requirements)
 from .environments import PIPENV_MAX_DEPTH, PIPENV_VENV_IN_PROJECT
 
 
@@ -25,6 +25,7 @@ class Project(object):
         self._download_location = None
         self._proper_names_location = None
         self._pipfile_location = None
+        self._requirements_location = None
 
     @property
     def name(self):
@@ -36,6 +37,10 @@ class Project(object):
     def pipfile_exists(self):
         return bool(self.pipfile_location)
 
+    @property
+    def requirements_exists(self):
+        return bool(self.requirements_location)
+
     @property
     def virtualenv_exists(self):
         # TODO: Decouple project from existence of Pipfile.
@@ -128,6 +133,17 @@ class Project(object):
 
         return self._pipfile_location
 
+    @property
+    def requirements_location(self):
+        if self._requirements_location is None:
+            try:
+                loc = find_requirements(max_depth=PIPENV_MAX_DEPTH)
+            except RuntimeError:
+                loc = None
+            self._requirements_location = loc
+
+        return self._requirements_location
+
     @property
     def parsed_pipfile(self):
         with open(self.pipfile_location) as f:
diff --git a/pipenv/utils.py b/pipenv/utils.py
index 6822a942..d1da2faf 100644
--- a/pipenv/utils.py
+++ b/pipenv/utils.py
@@ -235,3 +235,49 @@ def recase_file(file_dict):
             file_section[cased_key] = file_section.pop(key)
 
     return file_dict
+
+
+def walk_up(bottom):
+    """mimic os.walk, but walk 'up' instead of down the directory tree.
+    From: https://gist.github.com/zdavkeos/1098474
+    """
+
+    bottom = os.path.realpath(bottom)
+
+    # get files in current dir
+    try:
+        names = os.listdir(bottom)
+    except Exception as e:
+        return
+
+    dirs, nondirs = [], []
+    for name in names:
+        if os.path.isdir(os.path.join(bottom, name)):
+            dirs.append(name)
+        else:
+            nondirs.append(name)
+
+    yield bottom, dirs, nondirs
+
+    new_path = os.path.realpath(os.path.join(bottom, '..'))
+
+    # see if we are at the top
+    if new_path == bottom:
+        return
+
+    for x in walk_up(new_path):
+        yield x
+
+
+def find_requirements(max_depth=3):
+        """Returns the path of a Pipfile in parent directories."""
+        i = 0
+        for c, d, f in walk_up(os.getcwd()):
+            i += 1
+
+            if i < max_depth:
+                if 'requirements.txt':
+                    r = os.path.join(c, 'requirements.txt')
+                    if os.path.isfile(r):
+                        return r
+        raise RuntimeError('No requirements.txt found!')
