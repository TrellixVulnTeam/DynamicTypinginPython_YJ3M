commit 82ce7fe922f67ba9870b7d24679e715dca842c45
Author: Kenneth Reitz <me@kennethreitz.org>
Date:   Thu Jan 19 21:46:29 2017 -0500

    updates

diff --git a/Pipfile b/Pipfile
index 2a1917b6..174f6396 100644
--- a/Pipfile
+++ b/Pipfile
@@ -3,10 +3,8 @@ url = 'https://pypi.org/'
 verify_ssl = true
 
 [requires]
-python_version = '2.7'
 
 [packages]
-pip = {}
-click = {}
-crayons = {}
-delegator.py = {}
\ No newline at end of file
+click = "*"
+crayons = "*"
+"delegator.py" = "*"
diff --git a/_pipfile/api.py b/_pipfile/api.py
index a475dad7..68fae9b5 100644
--- a/_pipfile/api.py
+++ b/_pipfile/api.py
@@ -82,7 +82,7 @@ class PipfileParser(object):
         config.update(default_config)
 
         # Load the Pipfile's configuration.
-        config = toml.loads(content)
+        config.update(toml.loads(content))
 
         # Structure the data for output.
         data = OrderedDict({
@@ -94,7 +94,7 @@ class PipfileParser(object):
 
         # TODO: Validate given data here.
         self.groups['default'] = config['packages']
-        self.groups['development'] = config['packages']
+        self.groups['develop'] = config['dev-packages']
 
         # Update the data structure with group information.
         data.update(self.groups)
diff --git a/pipenv.py b/pipenv.py
index d0069434..79b92c0d 100644
--- a/pipenv.py
+++ b/pipenv.py
@@ -1,6 +1,8 @@
+import json
 import os
 import sys
 
+
 import delegator
 import click
 import crayons
@@ -41,18 +43,16 @@ def cli(*args, **kwargs):
     # Ensure that virtualenv is installed.
     ensure_virtualenv()
 
+def virtualenv_location():
+    return os.sep.join(pipfile.Pipfile.find().split(os.sep)[:-1] + ['.venv'])
 
-@click.command()
-@click.argument('project_dir', default=None)
-def prepare(project_dir=None):
-    click.echo('Installing {}...'.format(crayons.green(package_name)))
+def pipfile_location():
+    return pipfile.Pipfile.find()
 
-@click.command()
-@click.option('--virtualenv', is_flag=True, default=False)
-@click.option('--bare', is_flag=True, default=False)
-def where(virtualenv=False, bare=False):
+
+def do_where(virtualenv=False, bare=True):
     if not virtualenv:
-        location = pipfile.Pipfile.find()
+        location = pipfile_location()
 
         if not bare:
             click.echo('Pipfile found at {}. Considering this to be the project home.'.format(crayons.green(location)))
@@ -60,7 +60,7 @@ def where(virtualenv=False, bare=False):
             click.echo(location)
 
     else:
-        location = os.sep.join(pipfile.Pipfile.find().split(os.sep)[:-1] + ['.venv'])
+        location = virtualenv_location()
 
         if not bare:
             click.echo('Virtualenv location: {}'.format(crayons.green(location)))
@@ -68,6 +68,73 @@ def where(virtualenv=False, bare=False):
             click.echo(location)
 
 
+def convert_deps(deps):
+    dependencies = []
+
+    for dep in deps.keys():
+        # Default (e.g. '>1.10').
+        extra = deps[dep]
+
+        # Get rid of '*'.
+        if extra == '*':
+            extra = ''
+
+        # Support for extras (e.g. requests[socks])
+        if 'extras' in extra:
+            extra = '[{}]'.format(deps[dep]['extras'][0])
+
+        # Support for git.
+        # if 'editablle'
+
+        dependencies.append('{} {}'.format(dep, extra))
+
+    return dependencies
+
+@click.command()
+@click.option('--dev', is_flag=True, default=False)
+def prepare(dev=False):
+    do_where(bare=False)
+    click.echo(crayons.yellow('Creating a virtualenv for this project...'))
+
+    # Actually create the virtualenv.
+    c = delegator.run('virtualenv {}'.format(virtualenv_location()), block=False)
+    # c.block()
+    click.echo(crayons.blue(c.out))
+
+    # Say where the virtualenv is.
+    do_where(virtualenv=True, bare=False)
+
+    click.echo(crayons.yellow('Installing dependencies from Pipfile...'))
+
+    # Load the pipfile.
+    p = pipfile.load(pipfile_location())
+    lockfile = json.loads(p.freeze())
+
+    # Install default dependencies, always.
+    deps = lockfile['default']
+
+    # Add development deps if --dev was passed.
+    if dev:
+        deps.update(lockfile['develop'])
+
+    deps = convert_deps(deps)
+
+    for package_name in deps:
+        click.echo('Installing {}...'.format(crayons.green(package_name)))
+        c = delegator.run('pip install {}'.format(package_name))
+        click.echo(crayons.blue(c.out))
+    lockfile
+
+    if not lockfile['_meta']['Pipfile-sha256'] == p.hash:
+        click.echo(crayons.red('Pipfile.freeze out of date, updating...'))
+
+@click.command()
+@click.option('--virtualenv', is_flag=True, default=False)
+@click.option('--bare', is_flag=True, default=False)
+def where(virtualenv=False, bare=False):
+    do_where(virtualenv, bare)
+
+
 
 @click.command()
 @click.argument('package_name')
