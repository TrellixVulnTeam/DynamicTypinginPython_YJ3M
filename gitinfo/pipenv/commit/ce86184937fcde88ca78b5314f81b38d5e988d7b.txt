commit ce86184937fcde88ca78b5314f81b38d5e988d7b
Author: Tzu-ping Chung <uranusjr@gmail.com>
Date:   Tue Jul 10 14:47:26 2018 +0800

    Upgrade Shellingham to 1.2.3

diff --git a/pipenv/vendor/shellingham/LICENSE b/pipenv/vendor/shellingham/LICENSE
deleted file mode 100644
index b9077766..00000000
--- a/pipenv/vendor/shellingham/LICENSE
+++ /dev/null
@@ -1,13 +0,0 @@
-Copyright (c) 2018, Tzu-ping Chung <uranusjr@gmail.com>
-
-Permission to use, copy, modify, and distribute this software for any
-purpose with or without fee is hereby granted, provided that the above
-copyright notice and this permission notice appear in all copies.
-
-THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
-WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
-MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
-ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
-WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
-ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
-OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
diff --git a/pipenv/vendor/shellingham/__init__.py b/pipenv/vendor/shellingham/__init__.py
index bbdab995..164f4593 100644
--- a/pipenv/vendor/shellingham/__init__.py
+++ b/pipenv/vendor/shellingham/__init__.py
@@ -1,12 +1,10 @@
 import importlib
 import os
 
+from ._core import ShellDetectionFailure
 
-__version__ = '1.1.0'
 
-
-class ShellDetectionFailure(EnvironmentError):
-    pass
+__version__ = '1.2.3.dev0'
 
 
 def detect_shell(pid=None, max_depth=6):
diff --git a/pipenv/vendor/shellingham/_consts.py b/pipenv/vendor/shellingham/_core.py
similarity index 81%
rename from pipenv/vendor/shellingham/_consts.py
rename to pipenv/vendor/shellingham/_core.py
index 2c788fec..fb988eb3 100644
--- a/pipenv/vendor/shellingham/_consts.py
+++ b/pipenv/vendor/shellingham/_core.py
@@ -5,3 +5,7 @@ SHELL_NAMES = {
     'cmd', 'powershell', 'pwsh',    # Microsoft.
     'elvish', 'xonsh',              # More exotic.
 }
+
+
+class ShellDetectionFailure(EnvironmentError):
+    pass
diff --git a/pipenv/vendor/shellingham/nt.py b/pipenv/vendor/shellingham/nt.py
index 64aba5af..757d47b4 100644
--- a/pipenv/vendor/shellingham/nt.py
+++ b/pipenv/vendor/shellingham/nt.py
@@ -11,7 +11,7 @@ from ctypes import (
 )
 from ctypes.wintypes import DWORD, LONG
 
-from ._consts import SHELL_NAMES
+from ._core import SHELL_NAMES
 
 
 ERROR_NO_MORE_FILES = 18
diff --git a/pipenv/vendor/shellingham/posix.py b/pipenv/vendor/shellingham/posix.py
deleted file mode 100644
index b25dd874..00000000
--- a/pipenv/vendor/shellingham/posix.py
+++ /dev/null
@@ -1,56 +0,0 @@
-import collections
-import os
-import shlex
-import subprocess
-import sys
-
-from ._consts import SHELL_NAMES
-
-
-Process = collections.namedtuple('Process', 'args pid ppid')
-
-
-def _get_process_mapping():
-    """Try to look up the process tree via the output of `ps`.
-    """
-    output = subprocess.check_output([
-        'ps', '-ww', '-o', 'pid=', '-o', 'ppid=', '-o', 'args=',
-    ])
-    if not isinstance(output, str):
-        output = output.decode(sys.stdout.encoding)
-    processes = {}
-    for line in output.split('\n'):
-        try:
-            pid, ppid, args = line.strip().split(maxsplit=2)
-        except ValueError:
-            continue
-        processes[pid] = Process(
-            args=tuple(shlex.split(args)), pid=pid, ppid=ppid,
-        )
-    return processes
-
-
-def get_shell(pid=None, max_depth=6):
-    """Get the shell that the supplied pid or os.getpid() is running in.
-    """
-    pid = str(pid or os.getpid())
-    mapping = _get_process_mapping()
-    login_shell = os.environ.get('SHELL', '')
-    for _ in range(max_depth):
-        try:
-            proc = mapping[pid]
-        except KeyError:
-            break
-        name = os.path.basename(proc.args[0]).lower()
-        if name in SHELL_NAMES:
-            return (name, proc.args[0])
-        elif proc.args[0].startswith('-'):
-            # This is the login shell. Use the SHELL environ if possible
-            # because it provides better information.
-            if login_shell:
-                name = login_shell.lower()
-            else:
-                name = proc.args[0][1:].lower()
-            return (os.path.basename(name), name)
-        pid = proc.ppid     # Go up one level.
-    return None
diff --git a/pipenv/vendor/shellingham/posix/__init__.py b/pipenv/vendor/shellingham/posix/__init__.py
index ec27b3ac..923032b6 100644
--- a/pipenv/vendor/shellingham/posix/__init__.py
+++ b/pipenv/vendor/shellingham/posix/__init__.py
@@ -1,39 +1,61 @@
 import os
-import platform
 
-from .._consts import SHELL_NAMES
+from .._core import SHELL_NAMES, ShellDetectionFailure
+from . import proc, ps
 
 
 def _get_process_mapping():
-    system = platform.system()
-    if system == 'Linux':
-        from . import linux as impl
-    else:
-        from . import _default as impl
-    return impl.get_process_mapping()
+    """Select a way to obtain process information from the system.
+
+    * `/proc` is used if supported.
+    * The system `ps` utility is used as a fallback option.
+    """
+    for impl in (proc, ps):
+        try:
+            mapping = impl.get_process_mapping()
+        except EnvironmentError:
+            continue
+        return mapping
+    raise ShellDetectionFailure('compatible proc fs or ps utility is required')
 
 
-def get_shell(pid=None, max_depth=6):
-    """Get the shell that the supplied pid or os.getpid() is running in.
+def _iter_process_command(mapping, pid, max_depth):
+    """Iterator to traverse up the tree, yielding `argv[0]` of each process.
     """
-    pid = str(pid or os.getpid())
-    mapping = _get_process_mapping()
-    login_shell = os.environ.get('SHELL', '')
     for _ in range(max_depth):
         try:
             proc = mapping[pid]
-        except KeyError:
+        except KeyError:    # We've reached the root process. Give up.
             break
-        name = os.path.basename(proc.args[0]).lower()
-        if name in SHELL_NAMES:
-            return (name, proc.args[0])
-        elif proc.args[0].startswith('-'):
-            # This is the login shell. Use the SHELL environ if possible
-            # because it provides better information.
-            if login_shell:
-                name = login_shell.lower()
-            else:
-                name = proc.args[0][1:].lower()
-            return (os.path.basename(name), name)
+        try:
+            cmd = proc.args[0]
+        except IndexError:  # Process has no name? Whatever, ignore it.
+            pass
+        else:
+            yield cmd
         pid = proc.ppid     # Go up one level.
+
+
+def _get_login_shell(proc_cmd):
+    """Form shell information from the SHELL environment variable if possible.
+    """
+    login_shell = os.environ.get('SHELL', '')
+    if login_shell:
+        proc_cmd = login_shell
+    else:
+        proc_cmd = proc_cmd[1:]
+    return (os.path.basename(proc_cmd).lower(), proc_cmd)
+
+
+def get_shell(pid=None, max_depth=6):
+    """Get the shell that the supplied pid or os.getpid() is running in.
+    """
+    pid = str(pid or os.getpid())
+    mapping = _get_process_mapping()
+    for proc_cmd in _iter_process_command(mapping, pid, max_depth):
+        if proc_cmd.startswith('-'):    # Login shell! Let's use this.
+            return _get_login_shell(proc_cmd)
+        name = os.path.basename(proc_cmd).lower()
+        if name in SHELL_NAMES:     # The inner-most (non-login) shell.
+            return (name, proc_cmd)
     return None
diff --git a/pipenv/vendor/shellingham/posix/_core.py b/pipenv/vendor/shellingham/posix/_core.py
new file mode 100644
index 00000000..e164fae6
--- /dev/null
+++ b/pipenv/vendor/shellingham/posix/_core.py
@@ -0,0 +1,3 @@
+import collections
+
+Process = collections.namedtuple('Process', 'args pid ppid')
diff --git a/pipenv/vendor/shellingham/posix/_default.py b/pipenv/vendor/shellingham/posix/_default.py
deleted file mode 100644
index 86944276..00000000
--- a/pipenv/vendor/shellingham/posix/_default.py
+++ /dev/null
@@ -1,27 +0,0 @@
-import collections
-import shlex
-import subprocess
-import sys
-
-
-Process = collections.namedtuple('Process', 'args pid ppid')
-
-
-def get_process_mapping():
-    """Try to look up the process tree via the output of `ps`.
-    """
-    output = subprocess.check_output([
-        'ps', '-ww', '-o', 'pid=', '-o', 'ppid=', '-o', 'args=',
-    ])
-    if not isinstance(output, str):
-        output = output.decode(sys.stdout.encoding)
-    processes = {}
-    for line in output.split('\n'):
-        try:
-            pid, ppid, args = line.strip().split(None, 2)
-        except ValueError:
-            continue
-        processes[pid] = Process(
-            args=tuple(shlex.split(args)), pid=pid, ppid=ppid,
-        )
-    return processes
diff --git a/pipenv/vendor/shellingham/posix/linux.py b/pipenv/vendor/shellingham/posix/linux.py
deleted file mode 100644
index 6db97834..00000000
--- a/pipenv/vendor/shellingham/posix/linux.py
+++ /dev/null
@@ -1,35 +0,0 @@
-import os
-import re
-
-from ._default import Process
-
-
-STAT_PPID = 3
-STAT_TTY = 6
-
-
-def get_process_mapping():
-    """Try to look up the process tree via Linux's /proc
-    """
-    with open('/proc/{0}/stat'.format(os.getpid())) as f:
-        self_tty = f.read().split()[STAT_TTY]
-    processes = {}
-    for pid in os.listdir('/proc'):
-        if not pid.isdigit():
-            continue
-        try:
-            stat = '/proc/{0}/stat'.format(pid)
-            cmdline = '/proc/{0}/cmdline'.format(pid)
-            with open(stat) as fstat, open(cmdline) as fcmdline:
-                stat = re.findall(r'\(.+\)|\S+', fstat.read())
-                cmd = fcmdline.read().split('\x00')[:-1]
-            ppid = stat[STAT_PPID]
-            tty = stat[STAT_TTY]
-            if tty == self_tty:
-                processes[pid] = Process(
-                    args=tuple(cmd), pid=pid, ppid=ppid,
-                )
-        except IOError:
-            # Process has disappeared - just ignore it.
-            continue
-    return processes
diff --git a/pipenv/vendor/shellingham/posix/proc.py b/pipenv/vendor/shellingham/posix/proc.py
new file mode 100644
index 00000000..e64a5fe2
--- /dev/null
+++ b/pipenv/vendor/shellingham/posix/proc.py
@@ -0,0 +1,62 @@
+import os
+import re
+
+from ._core import Process
+
+
+STAT_PPID = 3
+STAT_TTY = 6
+
+STAT_PATTERN = re.compile(r'\(.+\)|\S+')
+
+
+def detect_proc():
+    """Detect /proc filesystem style.
+
+    This checks the /proc/{pid} directory for possible formats. Returns one of
+    the followings as str:
+
+    * `stat`: Linux-style, i.e. ``/proc/{pid}/stat``.
+    * `status`: BSD-style, i.e. ``/proc/{pid}/status``.
+    """
+    pid = os.getpid()
+    for name in ('stat', 'status'):
+        if os.path.exists(os.path.join('/proc', str(pid), name)):
+            return name
+    raise ProcFormatError('unsupported proc format')
+
+
+def _get_stat(pid, name):
+    with open(os.path.join('/proc', str(pid), name)) as f:
+        parts = STAT_PATTERN.findall(f.read())
+        return parts[STAT_TTY], parts[STAT_PPID]
+
+
+def _get_cmdline(pid):
+    with open(os.path.join('/proc', str(pid), 'cmdline')) as f:
+        return tuple(f.read().split('\0')[:-1])
+
+
+class ProcFormatError(EnvironmentError):
+    pass
+
+
+def get_process_mapping():
+    """Try to look up the process tree via the /proc interface.
+    """
+    stat_name = detect_proc()
+    self_tty = _get_stat(os.getpid(), stat_name)[0]
+    processes = {}
+    for pid in os.listdir('/proc'):
+        if not pid.isdigit():
+            continue
+        try:
+            tty, ppid = _get_stat(pid, stat_name)
+            if tty != self_tty:
+                continue
+            args = _get_cmdline(pid)
+            processes[pid] = Process(args=args, pid=pid, ppid=ppid)
+        except IOError:
+            # Process has disappeared - just ignore it.
+            continue
+    return processes
diff --git a/pipenv/vendor/shellingham/posix/ps.py b/pipenv/vendor/shellingham/posix/ps.py
new file mode 100644
index 00000000..ab4c2a9e
--- /dev/null
+++ b/pipenv/vendor/shellingham/posix/ps.py
@@ -0,0 +1,36 @@
+import errno
+import shlex
+import subprocess
+import sys
+
+from ._core import Process
+
+
+class PsNotAvailable(EnvironmentError):
+    pass
+
+
+def get_process_mapping():
+    """Try to look up the process tree via the output of `ps`.
+    """
+    try:
+        output = subprocess.check_output([
+            'ps', '-ww', '-o', 'pid=', '-o', 'ppid=', '-o', 'args=',
+        ])
+    except OSError as e:    # Python 2-compatible FileNotFoundError.
+        if e.errno != errno.ENOENT:
+            raise
+        raise PsNotAvailable('ps not found')
+    if not isinstance(output, str):
+        encoding = sys.getfilesystemencoding() or sys.getdefaultencoding()
+        output = output.decode(encoding)
+    processes = {}
+    for line in output.split('\n'):
+        try:
+            pid, ppid, args = line.strip().split(None, 2)
+        except ValueError:
+            continue
+        processes[pid] = Process(
+            args=tuple(shlex.split(args)), pid=pid, ppid=ppid,
+        )
+    return processes
diff --git a/pipenv/vendor/vendor.txt b/pipenv/vendor/vendor.txt
index 10cd2944..2f278dff 100644
--- a/pipenv/vendor/vendor.txt
+++ b/pipenv/vendor/vendor.txt
@@ -34,7 +34,7 @@ requirementslib==1.0.9
     pyparsing==2.2.0
     pytoml==0.1.16
     requirements-parser==0.2.0
-shellingham==1.1.0
+shellingham==1.2.3
 six==1.11.0
 semver==2.8.0
 shutilwhich==1.1.0
