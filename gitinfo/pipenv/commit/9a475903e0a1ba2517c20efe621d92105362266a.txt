commit 9a475903e0a1ba2517c20efe621d92105362266a
Author: Dan Ryan <dan@danryan.co>
Date:   Mon Feb 18 18:26:47 2019 -0500

    Fix pipenv clean to stop trying to remove python
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/core.py b/pipenv/core.py
index 282e6ace..b80f12e0 100644
--- a/pipenv/core.py
+++ b/pipenv/core.py
@@ -2721,10 +2721,7 @@ def do_clean(ctx, three=None, python=None, dry_run=False, bare=False, pypi_mirro
     ensure_lockfile(pypi_mirror=pypi_mirror)
     # Make sure that the virtualenv's site packages are configured correctly
     # otherwise we may end up removing from the global site packages directory
-    installed_package_names = [
-        canonicalize_name(pkg.project_name) for pkg
-        in project.environment.get_installed_packages()
-    ]
+    installed_package_names = list(project.installed_package_names)
     # Remove known "bad packages" from the list.
     for bad_package in BAD_PACKAGES:
         if canonicalize_name(bad_package) in installed_package_names:
@@ -2734,9 +2731,8 @@ def do_clean(ctx, three=None, python=None, dry_run=False, bare=False, pypi_mirro
                 canonicalize_name(bad_package)
             )]
     # Intelligently detect if --dev should be used or not.
-    develop = [canonicalize_name(k) for k in project.lockfile_content["develop"].keys()]
-    default = [canonicalize_name(k) for k in project.lockfile_content["default"].keys()]
-    for used_package in set(develop + default):
+    locked_packages = {canonicalize_name(pkg) for pkg in project.lockfile_package_names}
+    for used_package in locked_packages["combined"]:
         if used_package in installed_package_names:
             del installed_package_names[installed_package_names.index(
                 canonicalize_name(used_package)
@@ -2754,7 +2750,10 @@ def do_clean(ctx, three=None, python=None, dry_run=False, bare=False, pypi_mirro
                 )
             # Uninstall the package.
             c = delegator.run(
-                "{0} uninstall {1} -y".format(which_pip(), apparent_bad_package)
+                "{0} uninstall {1} -y".format(
+                    escape_grouped_arguments(which_pip(allow_global=system)),
+                    apparent_bad_package
+                )
             )
             if c.return_code != 0:
                 failure = True
