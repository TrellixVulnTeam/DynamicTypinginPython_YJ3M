commit 6d5a5100642b93c5d2ac4232e0adaa282b370fcb
Author: Dan Ryan <dan@danryan.co>
Date:   Mon May 27 16:46:09 2019 -0400

    Fix missing timeout error
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/vendor/vistir/compat.py b/pipenv/vendor/vistir/compat.py
index a44aafbe..ee96f761 100644
--- a/pipenv/vendor/vistir/compat.py
+++ b/pipenv/vendor/vistir/compat.py
@@ -87,10 +87,19 @@ if six.PY2:  # pragma: no cover
             self.errno = errno.EACCES
             super(PermissionError, self).__init__(*args, **kwargs)
 
+    class TimeoutError(OSError):
+        """Timeout expired."""
+
+        def __init__(self, *args, **kwargs):
+            self.errno = errno.ETIMEDOUT
+            super(TimeoutError, self).__init__(*args, **kwargs)
+
     class IsADirectoryError(OSError):
         """The command does not work on directories"""
 
-        pass
+        def __init__(self, *args, **kwargs):
+            self.errno = errno.EISDIR
+            super(IsADirectoryError, self).__init__(*args, **kwargs)
 
     class FileExistsError(OSError):
         def __init__(self, *args, **kwargs):
@@ -105,6 +114,7 @@ else:  # pragma: no cover
         PermissionError,
         IsADirectoryError,
         FileExistsError,
+        TimeoutError,
     )
     from io import StringIO
 
diff --git a/pipenv/vendor/vistir/misc.py b/pipenv/vendor/vistir/misc.py
index 8d58aad6..e46700e5 100644
--- a/pipenv/vendor/vistir/misc.py
+++ b/pipenv/vendor/vistir/misc.py
@@ -20,6 +20,7 @@ from .compat import (
     Iterable,
     Path,
     StringIO,
+    TimeoutError,
     fs_str,
     is_bytes,
     partialmethod,
@@ -185,6 +186,7 @@ def _read_streams(stream_dict):
     return results
 
 
+
 def get_stream_results(cmd_instance, verbose, maxlen, spinner=None, stdout_allowed=False):
     stream_results = {"stdout": [], "stderr": []}
     streams = {"stderr": cmd_instance.stderr, "stdout": cmd_instance.stdout}
@@ -194,11 +196,22 @@ def get_stream_results(cmd_instance, verbose, maxlen, spinner=None, stdout_allow
         stderr_line = stream_contents["stderr"]
         if not (stdout_line or stderr_line):
             break
+        last_changed = 0
+        display_line = ""
         for stream_name in stream_contents.keys():
             if stream_contents[stream_name] and stream_name in stream_results:
                 line = stream_contents[stream_name]
                 stream_results[stream_name].append(line)
-                display_line = fs_str("{0}".format(line))
+                display_line = (
+                    fs_str("{0}".format(line))
+                    if stream_name == "stderr"
+                    else display_line
+                )
+                if display_line and last_changed < 100:
+                    last_changed = 0
+                    display_line = ""
+                elif display_line:
+                    last_changed += 1
                 if len(display_line) > maxlen:
                     display_line = "{0}...".format(display_line[:maxlen])
                 if verbose:
@@ -371,7 +384,7 @@ def run(
             spinner=sp,
             combine_stderr=combine_stderr,
             start_text=start_text,
-            write_to_stdout=True,
+            write_to_stdout=write_to_stdout,
         )
 
 
