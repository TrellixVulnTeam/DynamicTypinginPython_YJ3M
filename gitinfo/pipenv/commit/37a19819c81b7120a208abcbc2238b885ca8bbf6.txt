commit 37a19819c81b7120a208abcbc2238b885ca8bbf6
Author: Dan Ryan <dan@danryan.co>
Date:   Fri Apr 19 02:58:24 2019 -0400

    Update echo calls, exception formats, dependencies
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/__init__.py b/pipenv/__init__.py
index 7128163a..a83f94e8 100644
--- a/pipenv/__init__.py
+++ b/pipenv/__init__.py
@@ -40,7 +40,7 @@ from .vendor.vistir.misc import replace_with_text_stream
 from .vendor import colorama
 replace_with_text_stream("stdout")
 replace_with_text_stream("stderr")
-colorama.init(wrap=False)
+# colorama.init(wrap=False)
 
 from .cli import cli
 from . import resolver
diff --git a/pipenv/exceptions.py b/pipenv/exceptions.py
index 495a46bf..23a1eb07 100644
--- a/pipenv/exceptions.py
+++ b/pipenv/exceptions.py
@@ -11,19 +11,19 @@ import six
 from . import environments
 from ._compat import decode_for_output
 from .patched import crayons
-from .vendor.click._compat import get_text_stderr
 from .vendor.click.exceptions import (
     Abort, BadOptionUsage, BadParameter, ClickException, Exit, FileError,
     MissingParameter, UsageError
 )
 from .vendor.click.types import Path
-from .vendor.click.utils import echo as click_echo
+from .vendor.vistir.misc import echo as click_echo
 import vistir
 
 KNOWN_EXCEPTIONS = {
     "PermissionError": "Permission denied:",
 }
 
+
 def handle_exception(exc_type, exception, traceback, hook=sys.excepthook):
     if environments.is_verbose() or not issubclass(exc_type, ClickException):
         hook(exc_type, exception, traceback)
@@ -60,7 +60,7 @@ class PipenvException(ClickException):
 
     def show(self, file=None):
         if file is None:
-            file = get_text_stderr()
+            file = vistir.misc.get_text_stderr()
         if self.extra:
             if isinstance(self.extra, six.string_types):
                 self.extra = [self.extra,]
@@ -84,7 +84,7 @@ class PipenvCmdError(PipenvException):
 
     def show(self, file=None):
         if file is None:
-            file = get_text_stderr()
+            file = vistir.misc.get_text_stderr()
         click_echo("{0} {1}".format(
             crayons.red("Error running command: "),
             crayons.white(decode_for_output("$ {0}".format(self.cmd), file), bold=True)
@@ -108,12 +108,12 @@ class JSONParseError(PipenvException):
 
     def show(self, file=None):
         if file is None:
-            file = get_text_stderr()
+            file = vistir.misc.get_text_stderr()
         message = "{0}\n{1}".format(
             crayons.white("Failed parsing JSON results:", bold=True),
             decode_for_output(self.message.strip(), file)
         )
-        click_echo(self.message, err=True)
+        click_echo(message, err=True)
         if self.error_text:
             click_echo("{0} {1}".format(
                 crayons.white("ERROR TEXT:", bold=True),
@@ -136,7 +136,7 @@ class PipenvUsageError(UsageError):
 
     def show(self, file=None):
         if file is None:
-            file = get_text_stderr()
+            file = vistir.misc.get_text_stderr()
         color = None
         if self.ctx is not None:
             color = self.ctx.color
@@ -175,7 +175,7 @@ class PipenvFileError(FileError):
 
     def show(self, file=None):
         if file is None:
-            file = get_text_stderr()
+            file = vistir.misc.get_text_stderr()
         if self.extra:
             if isinstance(self.extra, six.string_types):
                 self.extra = [self.extra,]
@@ -187,13 +187,16 @@ class PipenvFileError(FileError):
 class PipfileNotFound(PipenvFileError):
     def __init__(self, filename="Pipfile", extra=None, **kwargs):
         extra = kwargs.pop("extra", [])
-        message = ("{0} {1}".format(
+        message = (
+            "{0} {1}".format(
                 crayons.red("Aborting!", bold=True),
-                crayons.white("Please ensure that the file exists and is located in your"
-                              " project root directory.", bold=True)
+                crayons.white(
+                    "Please ensure that the file exists and is located in your"
+                    " project root directory.", bold=True
+                )
             )
         )
-        super(PipfileNotFound, self).__init__(filename, message=decode_for_output(message), extra=extra, **kwargs)
+        super(PipfileNotFound, self).__init__(filename, message=message, extra=extra, **kwargs)
 
 
 class LockfileNotFound(PipenvFileError):
@@ -204,7 +207,7 @@ class LockfileNotFound(PipenvFileError):
             crayons.red("$ pipenv lock", bold=True),
             crayons.white("before you can continue.", bold=True)
         )
-        super(LockfileNotFound, self).__init__(filename, message=decode_for_output(message), extra=extra, **kwargs)
+        super(LockfileNotFound, self).__init__(filename, message=message, extra=extra, **kwargs)
 
 
 class DeployException(PipenvUsageError):
@@ -212,13 +215,13 @@ class DeployException(PipenvUsageError):
         if not message:
             message = crayons.normal("Aborting deploy", bold=True)
         extra = kwargs.pop("extra", [])
-        PipenvUsageError.__init__(self, message=decode_for_output(message), extra=extra, **kwargs)
+        PipenvUsageError.__init__(self, message=message, extra=extra, **kwargs)
 
 
 class PipenvOptionsError(PipenvUsageError):
     def __init__(self, option_name, message=None, ctx=None, **kwargs):
         extra = kwargs.pop("extra", [])
-        PipenvUsageError.__init__(self, message=decode_for_output(message), ctx=ctx, **kwargs)
+        PipenvUsageError.__init__(self, message=message, ctx=ctx, **kwargs)
         self.extra = extra
         self.option_name = option_name
 
@@ -245,7 +248,7 @@ class PipfileException(PipenvFileError):
             hint = "{0} {1}".format(crayons.red("ERROR (PACKAGE NOT INSTALLED):"), hint)
         filename = project.pipfile_location
         extra = kwargs.pop("extra", [])
-        PipenvFileError.__init__(self, filename, decode_for_output(hint), extra=extra, **kwargs)
+        PipenvFileError.__init__(self, filename, hint, extra=extra, **kwargs)
 
 
 class SetupException(PipenvException):
@@ -261,7 +264,7 @@ class VirtualenvException(PipenvException):
                 "There was an unexpected error while activating your virtualenv. "
                 "Continuing anyway..."
             )
-        PipenvException.__init__(self, decode_for_output(message), **kwargs)
+        PipenvException.__init__(self, message, **kwargs)
 
 
 class VirtualenvActivationException(VirtualenvException):
@@ -272,7 +275,7 @@ class VirtualenvActivationException(VirtualenvException):
                 "not activated. Continuing anywayâ€¦"
             )
         self.message = message
-        VirtualenvException.__init__(self, decode_for_output(message), **kwargs)
+        VirtualenvException.__init__(self, message, **kwargs)
 
 
 class VirtualenvCreationException(VirtualenvException):
@@ -280,23 +283,26 @@ class VirtualenvCreationException(VirtualenvException):
         if not message:
             message = "Failed to create virtual environment."
         self.message = message
-        VirtualenvException.__init__(self, decode_for_output(message), **kwargs)
+        VirtualenvException.__init__(self, message, **kwargs)
 
 
 class UninstallError(PipenvException):
     def __init__(self, package, command, return_values, return_code, **kwargs):
-        extra = [crayons.blue("Attempted to run command: {0}".format(
-            crayons.yellow("$ {0!r}".format(command), bold=True)
-        )),]
+        extra = [
+            "{0} {1}".format(
+                crayons.blue("Attempted to run command: "),
+                crayons.yellow("$ {0!r}".format(command), bold=True
+            )
+        )]
         extra.extend([crayons.blue(line.strip()) for line in return_values.splitlines()])
         if isinstance(package, (tuple, list, set)):
             package = " ".join(package)
         message = "{0!s} {1!s}...".format(
             crayons.normal("Failed to uninstall package(s)"),
-            crayons.yellow(str(package), bold=True)
+            crayons.yellow("{0}!s".format(package), bold=True)
         )
         self.exit_code = return_code
-        PipenvException.__init__(self, message=decode_for_output(message), extra=extra)
+        PipenvException.__init__(self, message=message, extra=extra)
         self.extra = extra
 
 
@@ -304,36 +310,34 @@ class InstallError(PipenvException):
     def __init__(self, package, **kwargs):
         package_message = ""
         if package is not None:
-            package_message = crayons.normal("Couldn't install package {0}\n".format(
-                crayons.white(package, bold=True)
-            ))
-        message = "{0} {1} {2}".format(
-            crayons.red("ERROR:", bold=True),
-            package_message,
+            package_message = "Couldn't install package: {0}\n".format(
+                crayons.white("{0!s}".format(package), bold=True)
+            )
+        message = "{0} {1}".format(
+            "{0}".format(package_message),
             crayons.yellow("Package installation failed...")
         )
         extra = kwargs.pop("extra", [])
-        PipenvException.__init__(self, message=decode_for_output(message), extra=extra, **kwargs)
+        PipenvException.__init__(self, message=message, extra=extra, **kwargs)
 
 
 class CacheError(PipenvException):
     def __init__(self, path, **kwargs):
-        message = "{0} {1} {2}\n{0}".format(
-            crayons.red("ERROR:", bold=True),
+        message = "{0} {1}\n{2}".format(
             crayons.blue("Corrupt cache file"),
-            crayons.white(path),
+            crayons.white("{0!s}".format(path)),
             crayons.white('Consider trying "pipenv lock --clear" to clear the cache.')
         )
-        PipenvException.__init__(self, message=decode_for_output(message))
+        PipenvException.__init__(self, message=message)
 
 
 class DependencyConflict(PipenvException):
     def __init__(self, message):
-        extra = [decode_for_output("{0} {1}".format(
-            crayons.red("ERROR:", bold=True),
-            crayons.white("A dependency conflict was detected and could not be resolved.", bold=True),
-        )),]
-        super(DependencyConflict, self).__init__(decode_for_output(message), extra=extra)
+        extra = ["{0} {1}".format(
+            crayons.red("The operation failed...", bold=True),
+            crayons.red("A dependency conflict was detected and could not be resolved."),
+        )]
+        PipenvException.__init__(self, message, extra=extra)
 
 
 class ResolutionFailure(PipenvException):
@@ -355,9 +359,7 @@ class ResolutionFailure(PipenvException):
         )
         if "no version found at all" in message:
             no_version_found = True
-        message = "{0} {1}".format(
-            crayons.red("ERROR:", bold=True), crayons.yellow(message)
-        )
+        message = crayons.yellow("{0}".format(message))
         if no_version_found:
             message = "{0}\n{1}".format(
                 message,
@@ -366,7 +368,7 @@ class ResolutionFailure(PipenvException):
                     "See PEP440 for more information."
                 )
             )
-        super(ResolutionFailure, self).__init__(decode_for_output(message), extra=extra)
+        PipenvException.__init__(self, message, extra=extra)
 
 
 class RequirementError(PipenvException):
@@ -404,9 +406,8 @@ class RequirementError(PipenvException):
             crayons.normal(decode_for_output("Failed creating requirement instance")),
             crayons.white(decode_for_output("{0!r}".format(req_value)))
         )
-        extra = [crayons.normal(decode_for_output(str(req)))]
-        super(RequirementError, self).__init__(message, extra=extra)
-        super(ResolutionFailure, self).__init__(fix_utf8(message), extra=extra)
+        extra = [str(req)]
+        PipenvException.__init__(self, message, extra=extra)
 
 
 def prettify_exc(error):
diff --git a/pipenv/resolver.py b/pipenv/resolver.py
index fa76765e..497d2343 100644
--- a/pipenv/resolver.py
+++ b/pipenv/resolver.py
@@ -778,14 +778,14 @@ def main():
     warnings.simplefilter("ignore", category=ResourceWarning)
     replace_with_text_stream("stdout")
     replace_with_text_stream("stderr")
-    from pipenv.vendor import colorama
-    if os.name == "nt" and (
-        all(getattr(stream, method, None) for stream in [sys.stdout, sys.stderr] for method in ["write", "isatty"]) and
-        all(stream.isatty() for stream in [sys.stdout, sys.stderr])
-    ):
-        colorama.init(wrap=False)
-    elif os.name != "nt":
-        colorama.init()
+    # from pipenv.vendor import colorama
+    # if os.name == "nt" and (
+    #     all(getattr(stream, method, None) for stream in [sys.stdout, sys.stderr] for method in ["write", "isatty"]) and
+    #     all(stream.isatty() for stream in [sys.stdout, sys.stderr])
+    # ):
+    #     colorama.init(wrap=False)
+    # elif os.name != "nt":
+    #     colorama.init()
     os.environ["PIP_DISABLE_PIP_VERSION_CHECK"] = str("1")
     os.environ["PYTHONIOENCODING"] = str("utf-8")
     os.environ["PYTHONUNBUFFERED"] = str("1")
diff --git a/pipenv/utils.py b/pipenv/utils.py
index 6174d015..9a39a3e2 100644
--- a/pipenv/utils.py
+++ b/pipenv/utils.py
@@ -579,16 +579,16 @@ class Resolver(object):
             pip_options, _ = self.pip_command.parser.parse_args(self.pip_args)
             pip_options.cache_dir = environments.PIPENV_CACHE_DIR
             self._pip_options = pip_options
-        if environments.is_verbose():
-            click_echo(
-                crayons.blue("Using pip: {0}".format(" ".join(self.pip_args))), err=True
-            )
         return self._pip_options
 
     @property
     def session(self):
         if self._session is None:
             self._session = self.pip_command._build_session(self.pip_options)
+            if environments.is_verbose():
+                click_echo(
+                    crayons.blue("Using pip: {0}".format(" ".join(self.pip_args))), err=True
+                )
         return self._session
 
     @property
@@ -938,6 +938,7 @@ def resolve(cmd, sp):
     from .cmdparse import Script
     from .vendor.pexpect.exceptions import EOF, TIMEOUT
     from .vendor.vistir.compat import to_native_string
+    from .vendor.vistir.misc import echo
     EOF.__module__ = "pexpect.exceptions"
     from ._compat import decode_output
     c = delegator.run(Script.parse(cmd).cmdify(), block=False, env=os.environ.copy())
@@ -954,25 +955,23 @@ def resolve(cmd, sp):
             pass
         _out = c.subprocess.before
         if _out:
-            _out = decode_output("{0}".format(_out))
+            _out = decode_output("{0}\n".format(_out))
             out += _out
             sp.text = to_native_string("{0}".format(_out[:100]))
-        if environments.is_verbose():
-            sp.hide_and_write(_out.rstrip())
             # if environments.is_verbose():
             #     sp.hide_and_write(_out.rstrip())
+        _out = to_native_string("")
         if not result and not _out:
             break
-        _out = to_native_string("")
     c.block()
     if c.return_code != 0:
         sp.red.fail(environments.PIPENV_SPINNER_FAIL_TEXT.format(
             "Locking Failed!"
         ))
-        click_echo(c.out.strip(), err=True)
+        echo(c.out.strip(), err=True)
         if not environments.is_verbose():
-            click_echo(out, err=True)
-        click_echo(c.err.strip(), err=True)
+            echo(out, err=True)
+        echo(c.err.strip(), err=True)
         sys.exit(c.return_code)
     return c
 
diff --git a/setup.py b/setup.py
index 34c43a97..235b5a10 100644
--- a/setup.py
+++ b/setup.py
@@ -22,13 +22,26 @@ if sys.argv[-1] == "publish":
     sys.exit()
 
 required = [
-    "pip>=9.0.1",
+    "pip>=18.0",
     "certifi",
     "setuptools>=41.0.0",
     "virtualenv-clone>=0.2.5",
     "virtualenv",
     'enum34; python_version<"3"'
 ]
+extras = {
+    "dev": [
+        "towncrier",
+        "bs4",
+        "twine",
+        "sphinx<2",
+        "flake8>=3.3.0,<4.0",
+        "black;python_version>='3.6'",
+        "parver",
+        "invoke",
+    ],
+    "tests": ["pytest", "pytest-tap", "pytest-xdist", "flaky", "mock"],
+}
 
 # https://pypi.python.org/pypi/stdeb/0.8.5#quickstart-2-just-tell-me-the-fastest-way-to-make-a-deb
 class DebCommand(Command):
@@ -128,12 +141,9 @@ setup(
         ],
     },
     python_requires=">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*",
-    setup_requires=["invoke", "parver", ],
+    setup_requires=["invoke", "parver"],
     install_requires=required,
-    extras_require={
-        "test": ["pytest", "pytest-tap", "pytest-xdist", "flaky", "mock"],
-        "dev": ["towncrier", "bs4"],
-    },
+    extras_require=extras,
     include_package_data=True,
     license="MIT",
     classifiers=[
