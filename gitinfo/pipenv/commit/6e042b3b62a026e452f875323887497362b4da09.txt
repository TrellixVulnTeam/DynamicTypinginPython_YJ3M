commit 6e042b3b62a026e452f875323887497362b4da09
Author: Dan Ryan <dan@danryan.co>
Date:   Sun Oct 7 01:41:21 2018 -0400

    fix piptools patch to account for None in hash lookups
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/patched/piptools/repositories/pypi.py b/pipenv/patched/piptools/repositories/pypi.py
index 2b156073..76e1f884 100644
--- a/pipenv/patched/piptools/repositories/pypi.py
+++ b/pipenv/patched/piptools/repositories/pypi.py
@@ -68,10 +68,10 @@ class HashCache(SafeFileCache):
             hash_value = self.get(new_location.url)
         if not hash_value:
             hash_value = self._get_file_hash(new_location) if not new_location.url.startswith("ssh") else None
-            hash_value = hash_value.encode('utf8')
+            hash_value = hash_value.encode('utf8') if hash_value else None
         if can_hash:
             self.set(new_location.url, hash_value)
-        return hash_value.decode('utf8')
+        return hash_value.decode('utf8') if hash_value else None
 
     def _get_file_hash(self, location):
         h = hashlib.new(FAVORITE_HASH)
@@ -277,7 +277,7 @@ class PyPIRepository(BaseRepository):
                 'isolated': False,
                 'wheel_cache': wheel_cache,
                 'use_user_site': False,
-                'ignore_compatibility': False
+                'ignore_compatibility': True
             }
             resolver = None
             preparer = None
@@ -456,8 +456,8 @@ class PyPIRepository(BaseRepository):
         # matching_candidates = candidates_by_version[matching_versions[0]]
 
         return {
-            self._hash_cache.get_hash(candidate.location)
-            for candidate in matching_candidates
+            h for h in map(lambda c: self._hash_cache.get_hash(c.location),
+                                matching_candidates) if h is not None
         }
 
     @contextmanager
diff --git a/tasks/vendoring/patches/patched/piptools.patch b/tasks/vendoring/patches/patched/piptools.patch
index 5e219609..152420af 100644
--- a/tasks/vendoring/patches/patched/piptools.patch
+++ b/tasks/vendoring/patches/patched/piptools.patch
@@ -152,10 +152,10 @@ index bf69803..eb20560 100644
 +            hash_value = self.get(new_location.url)
 +        if not hash_value:
 +            hash_value = self._get_file_hash(new_location) if not new_location.url.startswith("ssh") else None
-+            hash_value = hash_value.encode('utf8')
++            hash_value = hash_value.encode('utf8') if hash_value else None
 +        if can_hash:
 +            self.set(new_location.url, hash_value)
-+        return hash_value.decode('utf8')
++        return hash_value.decode('utf8') if hash_value else None
 +
 +    def _get_file_hash(self, location):
 +        h = hashlib.new(FAVORITE_HASH)
@@ -473,8 +473,9 @@ index bf69803..eb20560 100644
  
          return {
 -            self._get_file_hash(candidate.location)
-+            self._hash_cache.get_hash(candidate.location)
-             for candidate in matching_candidates
+-            for candidate in matching_candidates
++            h for h in map(lambda c: self._hash_cache.get_hash(c.location),
++                                matching_candidates) if h is not None
          }
  
 -    def _get_file_hash(self, location):
