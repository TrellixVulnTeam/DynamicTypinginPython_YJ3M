commit dc75eb5b29ad8e79d6df58610f5436c06a7a5a93
Author: Kenneth Reitz <me@kennethreitz.org>
Date:   Fri Mar 2 10:23:13 2018 -0500

    PIPENV_NO_INHERIT, default to storing which python version in lockfile
    
    Signed-off-by: Kenneth Reitz <me@kennethreitz.org>

diff --git a/pipenv/core.py b/pipenv/core.py
index 978e170e..6ca51b8c 100644
--- a/pipenv/core.py
+++ b/pipenv/core.py
@@ -98,10 +98,27 @@ if PIPENV_NOSPIN:
     def spinner():
         yield
 
+
+def which(command, location=None, allow_global=False):
+    if location is None:
+        location = project.virtualenv_location
+
+    if not allow_global:
+        if os.name == 'nt':
+            p = find_windows_executable(os.path.join(location, 'Scripts'), command)
+        else:
+            p = os.sep.join([location] + ['bin/{0}'.format(command)])
+    else:
+        if command == 'python':
+            p = sys.executable
+
+    return p
+
+
 # Disable warnings for Python 2.6.
 urllib3.disable_warnings(InsecureRequestWarning)
 
-project = Project()
+project = Project(which=which)
 
 
 def load_dot_env():
@@ -1481,22 +1498,6 @@ def pip_download(package_name):
     return c
 
 
-def which(command, location=None, allow_global=False):
-    if location is None:
-        location = project.virtualenv_location
-
-    if not allow_global:
-        if os.name == 'nt':
-            p = find_windows_executable(os.path.join(location, 'Scripts'), command)
-        else:
-            p = os.sep.join([location] + ['bin/{0}'.format(command)])
-    else:
-        if command == 'python':
-            p = sys.executable
-
-    return p
-
-
 def which_pip(allow_global=False):
     """Returns the location of virtualenv-installed pip."""
     if allow_global:
diff --git a/pipenv/environments.py b/pipenv/environments.py
index 01ff3d37..eaf0be55 100644
--- a/pipenv/environments.py
+++ b/pipenv/environments.py
@@ -41,6 +41,12 @@ PIPENV_MAX_SUBPROCESS = int(os.environ.get('PIPENV_MAX_SUBPROCESS', '16'))
 # Note: +1 because of a temporary bug in Pipenv.
 PIPENV_MAX_DEPTH = int(os.environ.get('PIPENV_MAX_DEPTH', '3')) + 1
 
+# Tell Pipenv not to inherit parent directories (for development, mostly).
+PIPENV_NO_INHERIT = 'PIPENV_NO_INHERIT' in os.environ
+
+if PIPENV_NO_INHERIT:
+    PIPENV_MAX_DEPTH = 2
+
 # Tells Pipenv to use the virtualenv-provided pip instead.
 PIPENV_VIRTUALENV = None
 PIPENV_USE_SYSTEM = False
diff --git a/pipenv/project.py b/pipenv/project.py
index f8a49562..d3cd1bca 100644
--- a/pipenv/project.py
+++ b/pipenv/project.py
@@ -23,6 +23,7 @@ from .environments import (
     PIPENV_PIPFILE,
     PIPENV_VENV_IN_PROJECT,
     PIPENV_VIRTUALENV,
+    PIPENV_NO_INHERIT
 )
 
 if PIPENV_PIPFILE:
@@ -35,7 +36,7 @@ if PIPENV_PIPFILE:
 class Project(object):
     """docstring for Project"""
 
-    def __init__(self, chdir=True):
+    def __init__(self, which, chdir=True):
         super(Project, self).__init__()
         self._name = None
         self._virtualenv_location = None
@@ -44,6 +45,7 @@ class Project(object):
         self._pipfile_location = None
         self._requirements_location = None
         self._original_dir = os.path.abspath(os.curdir)
+        self.which = which
 
         # Hack to skip this during pipenv run, or -r.
         if ('run' not in sys.argv) and chdir:
@@ -430,8 +432,7 @@ class Project(object):
         }
 
         # Default requires.
-        if python:
-            data[u'requires'] = {'python_version': python_version(python)[:len('2.7')]}
+        data[u'requires'] = {'python_version': python_version(self.which('python'))[:len('2.7')]}
 
         self.write_toml(data, 'Pipfile')
 
