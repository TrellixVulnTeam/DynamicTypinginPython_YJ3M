commit 222eb50b189bb2787650200f2675c52d8d7059e1
Author: Dan Ryan <dan@danryan.co>
Date:   Sun Feb 17 02:28:33 2019 -0500

    Fix buggy pep517 implementation
    
    - Fix resolution for pre-40.6.0 setuptools releases by auto-detecting
      installed setuptools version before calculating default backend
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/_compat.py b/pipenv/_compat.py
index ca3bbd0f..e8ef16e5 100644
--- a/pipenv/_compat.py
+++ b/pipenv/_compat.py
@@ -122,6 +122,12 @@ UNICODE_TO_ASCII_TRANSLATION_MAP = {
 }
 
 
+def decode_for_output(output, target=sys.stdout):
+    return vistir.misc.decode_for_output(
+        output, sys.stdout, translation_map=UNICODE_TO_ASCII_TRANSLATION_MAP
+    )
+
+
 def decode_output(output):
     if not isinstance(output, six.string_types):
         return output
diff --git a/pipenv/core.py b/pipenv/core.py
index 00ce3eb6..0b4f9917 100644
--- a/pipenv/core.py
+++ b/pipenv/core.py
@@ -20,7 +20,7 @@ import dotenv
 import pipfile
 
 from . import environments, exceptions, pep508checker, progress
-from ._compat import fix_utf8
+from ._compat import fix_utf8, decode_for_output
 from .cmdparse import Script
 from .environments import (
     PIPENV_CACHE_DIR, PIPENV_COLORBLIND, PIPENV_DEFAULT_PYTHON_VERSION,
@@ -1293,7 +1293,7 @@ def pip_install(
         piplogger.setLevel(logging.INFO)
         if requirement:
             click.echo(
-                crayons.normal("Pip Installing {0!r}".format(requirement.name), bold=True),
+                crayons.normal("Installing {0!r}".format(requirement.name), bold=True),
                 err=True,
             )
     # Create files for hash mode.
@@ -1969,6 +1969,13 @@ def do_install(
                     sp.write_err(vistir.compat.fs_str("{0}: {1}".format(crayons.red("WARNING"), e)))
                     sp.fail(environments.PIPENV_SPINNER_FAIL_TEXT.format("Installation Failed"))
                     sys.exit(1)
+                pkg_name = pkg_requirement.req.setup_info.name
+                sp.write_err((decode_for_output(
+                    "{0} {1}".format(
+                        crayons.white("PACKAGE NAME: ", bold=True),
+                        crayons.normal(pkg_name)
+                    )
+                )))
                 if index_url:
                     pkg_requirement.index = index_url
                 try:
@@ -2041,12 +2048,20 @@ def do_install(
                         crayons.normal(fix_utf8("â€¦"), bold=True),
                     )
                 ))
+                # Add the package to the Pipfile.
+                try:
+                    project.add_package_to_pipfile(pkg_requirement, dev)
+                except ValueError as e:
+                    import traceback
+                    sp.write_err(
+                        "{0} {1}".format(
+                            crayons.red("Error:", bold=True), traceback.format_exc()
+                        )
+                    )
+                    sp.fail(environments.PIPENV_SPINNER_FAIL_TEXT.format(
+                        "Failed adding package to Pipfile"
+                    ))
                 sp.ok(environments.PIPENV_SPINNER_OK_TEXT.format("Installation Succeeded"))
-            # Add the package to the Pipfile.
-            try:
-                project.add_package_to_pipfile(pkg_requirement, dev)
-            except ValueError as e:
-                raise exceptions.PipfileException(e)
             # Update project settings with pre preference.
             if pre:
                 project.update_settings({"allow_prereleases": pre})
@@ -2420,7 +2435,6 @@ def do_run(command, args, three=None, python=False, pypi_mirror=None):
             os.environ["PIP_SHIMS_BASE_MODULE"] = previous_pip_shims_module
 
 
-
 def do_check(
     three=None,
     python=False,
diff --git a/pipenv/project.py b/pipenv/project.py
index 9913cff8..68ec4666 100644
--- a/pipenv/project.py
+++ b/pipenv/project.py
@@ -942,17 +942,17 @@ class Project(object):
         # Don't re-capitalize file URLs or VCSs.
         if not isinstance(package, Requirement):
             package = Requirement.from_line(package.strip())
-        _, converted = package.pipfile_entry
+        req_name, converted = package.pipfile_entry
         key = "dev-packages" if dev else "packages"
         # Set empty group if it doesn't exist yet.
         if key not in p:
             p[key] = {}
-        name = self.get_package_name_in_pipfile(package.name, dev)
+        name = self.get_package_name_in_pipfile(req_name, dev)
         if name and is_star(converted):
             # Skip for wildcard version
             return
         # Add the package to the group.
-        p[key][name or pep423_name(package.name)] = converted
+        p[key][name or pep423_name(req_name)] = converted
         # Write Pipfile.
         self.write_toml(p)
 
diff --git a/pipenv/resolver.py b/pipenv/resolver.py
index 75a82d66..693c85ad 100644
--- a/pipenv/resolver.py
+++ b/pipenv/resolver.py
@@ -91,9 +91,6 @@ def parse_packages(packages, pre, clear, system, requirements_dir=None):
     from pipenv.vendor.vistir.contextmanagers import cd, temp_path
     from pipenv.utils import parse_indexes
     parsed_packages = []
-    # os.environ["PIP_NO_BUILD_ISOLATION"] = "1"
-    # os.environ["PIP_NO_USE_PEP517"] = "1"
-    # os.environ["PIP_NO_DEPS"] = "1"
     for package in packages:
         indexes, trusted_hosts, line = parse_indexes(package)
         line = " ".join(line)
@@ -178,8 +175,6 @@ def main():
     parsed, remaining = parser.parse_known_args()
     _patch_path(pipenv_site=parsed.pipenv_site)
     import warnings
-    from pipenv.vendor import colorama
-    colorama.init()
     from pipenv.vendor.vistir.compat import ResourceWarning
     from pipenv.vendor.vistir.misc import get_wrapped_stream
     warnings.simplefilter("ignore", category=ResourceWarning)
@@ -192,6 +187,8 @@ def main():
         stderr = sys.stderr
     sys.stderr = get_wrapped_stream(stderr)
     sys.stdout = get_wrapped_stream(stdout)
+    from pipenv.vendor import colorama
+    colorama.init()
     os.environ["PIP_DISABLE_PIP_VERSION_CHECK"] = str("1")
     os.environ["PYTHONIOENCODING"] = str("utf-8")
     parsed = handle_parsed_args(parsed)
diff --git a/pipenv/vendor/requirementslib/models/requirements.py b/pipenv/vendor/requirementslib/models/requirements.py
index c01f6b0f..ebe8ba3d 100644
--- a/pipenv/vendor/requirementslib/models/requirements.py
+++ b/pipenv/vendor/requirementslib/models/requirements.py
@@ -6,8 +6,6 @@ import collections
 import copy
 import hashlib
 import os
-import re
-import string
 import sys
 
 from distutils.sysconfig import get_python_lib
@@ -15,8 +13,6 @@ from contextlib import contextmanager
 from functools import partial
 
 import attr
-import pep517
-import pep517.wrappers
 import pip_shims
 import six
 import vistir
@@ -29,7 +25,7 @@ from packaging.specifiers import Specifier, SpecifierSet, LegacySpecifier, Inval
 from packaging.utils import canonicalize_name
 from six.moves.urllib import parse as urllib_parse
 from six.moves.urllib.parse import unquote
-from vistir.compat import Path, Iterable, FileNotFoundError, lru_cache
+from vistir.compat import Path, FileNotFoundError, lru_cache
 from vistir.contextmanagers import temp_path
 from vistir.misc import dedup
 from vistir.path import (
@@ -46,7 +42,6 @@ from ..utils import (
     VCS_LIST,
     is_installable_file,
     is_vcs,
-    ensure_setup_py,
     add_ssh_scheme_to_git_uri,
     strip_ssh_from_git_uri,
     get_setup_paths
@@ -74,9 +69,9 @@ from .utils import (
     create_link,
     get_pyproject,
     convert_direct_url_to_url,
-    convert_url_to_direct_url,
     URL_RE,
-    DIRECT_URL_RE
+    DIRECT_URL_RE,
+    get_default_pyproject_backend
 )
 
 from ..environment import MYPY_RUNNING
@@ -387,7 +382,7 @@ class Line(object):
             pyproject_requires, pyproject_backend = get_pyproject(self.path)
             if not pyproject_backend and self.setup_cfg is not None:
                 setup_dict = SetupInfo.get_setup_cfg(self.setup_cfg)
-                pyproject_backend = "setuptools.build_meta:__legacy__"
+                pyproject_backend = get_default_pyproject_backend()
                 pyproject_requires = setup_dict.get("build_requires", ["setuptools", "wheel"])
 
             self._pyproject_requires = pyproject_requires
@@ -1669,13 +1664,6 @@ class FileRequirement(object):
         if name:
             creation_kwargs["name"] = name
         cls_inst = cls(**creation_kwargs)  # type: ignore
-        # if parsed_line and not cls_inst._parsed_line:
-        #     cls_inst._parsed_line = parsed_line
-        # if not cls_inst._parsed_line:
-        #     cls_inst._parsed_line = Line(cls_inst.line_part)
-        # if cls_inst._parsed_line and cls_inst.parsed_line.ireq and not cls_inst.parsed_line.ireq.req:
-        #     if cls_inst.req:
-        #         cls_inst._parsed_line._ireq.req = cls_inst.req
         return cls_inst
 
     @classmethod
@@ -1832,7 +1820,14 @@ class FileRequirement(object):
         ]
         filter_func = lambda k, v: bool(v) is True and k.name not in excludes  # noqa
         pipfile_dict = attr.asdict(self, filter=filter_func).copy()
-        name = pipfile_dict.pop("name")
+        name = pipfile_dict.pop("name", None)
+        if name is None:
+            if self.name:
+                name = self.name
+            elif self.parsed_line and self.parsed_line.name:
+                name = self.name = self.parsed_line.name
+            elif self.setup_info and self.setup_info.name:
+                name = self.name = self.setup_info.name
         if "_uri_scheme" in pipfile_dict:
             pipfile_dict.pop("_uri_scheme")
         # For local paths and remote installable artifacts (zipfiles, etc)
@@ -1909,10 +1904,6 @@ class VCSRequirement(FileRequirement):
             new_uri = urllib_parse.urlunsplit((scheme,) + rest[:-1] + ("",))
             new_uri = "{0}{1}".format(vcs_type, new_uri)
             self.uri = new_uri
-        # if self.req and self._parsed_line and (
-        #     self._parsed_line.ireq and not self._parsed_line.ireq.req
-        # ):
-        #     self._parsed_line._ireq.req = self.req
 
     @link.default
     def get_link(self):
@@ -2185,21 +2176,6 @@ class VCSRequirement(FileRequirement):
                 creation_args[key] = pipfile.get(key)
         creation_args["name"] = name
         cls_inst = cls(**creation_args)
-        # if cls_inst._parsed_line is None:
-        #     vcs_uri = build_vcs_uri(
-        #         vcs=cls_inst.vcs, uri=add_ssh_scheme_to_git_uri(cls_inst.uri),
-        #         name=cls_inst.name, ref=cls_inst.ref, subdirectory=cls_inst.subdirectory,
-        #         extras=cls_inst.extras
-        #     )
-        #     if cls_inst.editable:
-        #         vcs_uri = "-e {0}".format(vcs_uri)
-        #     cls_inst._parsed_line = Line(vcs_uri)
-        #     if not cls_inst.name and cls_inst._parsed_line.name:
-        #         cls_inst.name = cls_inst._parsed_line.name
-        # if cls_inst.req and (
-        #     cls_inst._parsed_line.ireq and not cls_inst.parsed_line.ireq.req
-        # ):
-        #     cls_inst._parsed_line.ireq.req = cls_inst.req
         return cls_inst
 
     @classmethod
@@ -2334,15 +2310,23 @@ class VCSRequirement(FileRequirement):
         ]
         filter_func = lambda k, v: bool(v) is True and k.name not in excludes  # noqa
         pipfile_dict = attr.asdict(self, filter=filter_func).copy()
+        name = pipfile_dict.pop("name", None)
+        if name is None:
+            if self.name:
+                name = self.name
+            elif self.parsed_line and self.parsed_line.name:
+                name = self.name = self.parsed_line.name
+            elif self.setup_info and self.setup_info.name:
+                name = self.name = self.setup_info.name
         if "vcs" in pipfile_dict:
             pipfile_dict = self._choose_vcs_source(pipfile_dict)
-        name, _ = pip_shims.shims._strip_extras(pipfile_dict.pop("name"))
+        name, _ = pip_shims.shims._strip_extras(name)
         return {name: pipfile_dict}
 
 
 @attr.s(cmp=True, hash=True)
 class Requirement(object):
-    name = attr.ib(cmp=True)  # type: Text
+    _name = attr.ib(cmp=True)  # type: Text
     vcs = attr.ib(default=None, validator=attr.validators.optional(validate_vcs), cmp=True)  # type: Optional[Text]
     req = attr.ib(default=None, cmp=True)  # type: Optional[Union[VCSRequirement, FileRequirement, NamedRequirement]]
     markers = attr.ib(default=None, cmp=True)  # type: Optional[Text]
@@ -2358,11 +2342,24 @@ class Requirement(object):
     def __hash__(self):
         return hash(self.as_line())
 
-    @name.default
+    @_name.default
     def get_name(self):
         # type: () -> Optional[Text]
         return self.req.name
 
+    @property
+    def name(self):
+        # type: () -> Optional[Text]
+        if self._name is not None:
+            return self._name
+        name = None
+        if self.req and self.req.name:
+            name = self.req.name
+        elif self.req and self.is_file_or_url and self.req.setup_info:
+            name = self.req.setup_info.name
+        self._name = name
+        return name
+
     @property
     def requirement(self):
         # type: () -> Optional[PackagingRequirement]
@@ -2767,9 +2764,17 @@ class Requirement(object):
         name = self.name
         if "markers" in req_dict and req_dict["markers"]:
             req_dict["markers"] = req_dict["markers"].replace('"', "'")
+        if not self.req.name:
+            name_carriers = (self.req, self, self.line_instance, self.req.parsed_line)
+            name_options = [
+                getattr(carrier, "name", None)
+                for carrier in name_carriers if carrier is not None
+            ]
+            req_name = next(iter(n for n in name_options if n is not None), None)
+            self.req.name = req_name
+        req_name, dict_from_subreq = self.req.pipfile_part.popitem()
         base_dict = {
-            k: v
-            for k, v in self.req.pipfile_part[name].items()
+            k: v for k, v in dict_from_subreq.items()
             if k not in ["req", "link", "_setup_info"]
         }
         base_dict.update(req_dict)
diff --git a/pipenv/vendor/requirementslib/models/setup_info.py b/pipenv/vendor/requirementslib/models/setup_info.py
index 68c97700..b0b55d47 100644
--- a/pipenv/vendor/requirementslib/models/setup_info.py
+++ b/pipenv/vendor/requirementslib/models/setup_info.py
@@ -33,7 +33,8 @@ from .utils import (
     get_pyproject,
     init_requirement,
     split_vcs_method_from_uri,
-    strip_extras_markers_from_requirement
+    strip_extras_markers_from_requirement,
+    get_default_pyproject_backend
 )
 
 try:
@@ -431,7 +432,7 @@ class SetupInfo(object):
     version = attr.ib(default=None, cmp=True)  # type: Text
     _requirements = attr.ib(type=frozenset, factory=frozenset, cmp=True, hash=True)
     build_requires = attr.ib(type=tuple, default=attr.Factory(tuple), cmp=True)
-    build_backend = attr.ib(default="setuptools.build_meta:__legacy__", cmp=True)  # type: Text
+    build_backend = attr.ib(cmp=True)  # type: Text
     setup_requires = attr.ib(type=tuple, default=attr.Factory(tuple), cmp=True)
     python_requires = attr.ib(type=packaging.specifiers.SpecifierSet, default=None, cmp=True)
     _extras_requirements = attr.ib(type=tuple, default=attr.Factory(tuple), cmp=True)
@@ -442,6 +443,10 @@ class SetupInfo(object):
     extra_kwargs = attr.ib(default=attr.Factory(dict), type=dict, cmp=False, hash=False)
     metadata = attr.ib(default=None)  # type: Optional[Tuple[Text]]
 
+    @build_backend.default
+    def get_build_backend(self):
+        return get_default_pyproject_backend()
+
     @property
     def requires(self):
         # type: () -> Dict[Text, RequirementType]
@@ -662,27 +667,6 @@ build-backend = "{1}"
             dist_type="sdist"
         )
 
-    # @contextlib.contextmanager
-    # def run_pep517(self):
-    #     # type: (bool) -> Generator[pep517.wrappers.Pep517HookCaller, None, None]
-    #     builder = pep517.wrappers.Pep517HookCaller(
-    #         self.base_dir, self.build_backend
-    #     )
-    #     builder._subprocess_runner = pep517_subprocess_runner
-    #     with BuildEnv() as env:
-    #         env.pip_install(self.build_requires)
-    #         try:
-    #             reqs = builder.get_requires_for_build_wheel(config_settings=self.pep517_config)
-    #             env.pip_install(reqs)
-    #             metadata_dirname = builder.prepare_metadata_for_build_wheel(
-    #                 self.egg_base, config_settings=self.pep517_config
-    #             )
-    #         except Exception:
-    #             reqs = builder.get_requires_for_build_sdist(config_settings=self.pep517_config)
-    #             env.pip_install(reqs)
-    #         metadata_dir = os.path.join(self.egg_base, metadata_dirname)
-    #         yield builder
-
     def build(self):
         # type: () -> Optional[Text]
         dist_path = None
@@ -702,39 +686,6 @@ build-backend = "{1}"
             self.get_egg_metadata()
         if not self.metadata or not self.name:
             self.run_setup()
-        # with self.run_pep517() as hookcaller:
-        #     dist_path = self.build_pep517(hookcaller)
-        #     if os.path.exists(os.path.join(self.extra_kwargs["build_dir"], dist_path)):
-        #         self.get_metadata_from_wheel(
-        #             os.path.join(self.extra_kwargs["build_dir"], dist_path)
-        #         )
-        #     if not self.metadata or not self.name:
-        #         self.get_egg_metadata()
-        #     else:
-        #         return dist_path
-        #     if not self.metadata or not self.name:
-        #         hookcaller._subprocess_runner(
-        #             ["setup.py", "egg_info", "--egg-base", self.egg_base]
-        #         )
-        #         self.get_egg_metadata()
-        #     return dist_path
-
-    # def build_pep517(self, hookcaller):
-    #     # type: (pep517.wrappers.Pep517HookCaller) -> Optional[Text]
-    #     dist_path = None
-    #     try:
-    #         dist_path = hookcaller.build_wheel(
-    #             self.extra_kwargs["build_dir"],
-    #             metadata_directory=self.egg_base,
-    #             config_settings=self.pep517_config
-    #         )
-    #         return dist_path
-    #     except Exception:
-    #         dist_path = hookcaller.build_sdist(
-    #             self.extra_kwargs["build_dir"], config_settings=self.pep517_config
-    #         )
-    #         self.get_egg_metadata(metadata_type="egg")
-    #     return dist_path
 
     def reload(self):
         # type: () -> Dict[Text, Any]
@@ -818,7 +769,7 @@ build-backend = "{1}"
                 if backend:
                     self.build_backend = backend
                 else:
-                    self.build_backend = "setuptools.build_meta:__legacy__"
+                    self.build_backend = get_default_pyproject_backend()
                 if requires:
                     self.build_requires = tuple(set(requires) | set(self.build_requires))
                 else:
@@ -919,13 +870,9 @@ build-backend = "{1}"
                 "The file URL points to a directory not installable: {}"
                 .format(ireq.link)
             )
-        # if not ireq.editable:
         build_dir = ireq.build_location(kwargs["build_dir"])
         src_dir = ireq.ensure_has_source_dir(kwargs["src_dir"])
         ireq._temp_build_dir.path = kwargs["build_dir"]
-        # else:
-        #     build_dir = ireq.build_location(kwargs["src_dir"])
-        #     ireq._temp_build_dir.path = kwargs["build_dir"]
 
         ireq.populate_link(finder, False, False)
         pip_shims.shims.unpack_url(
diff --git a/pipenv/vendor/requirementslib/models/utils.py b/pipenv/vendor/requirementslib/models/utils.py
index eccf5e66..c9852a7b 100644
--- a/pipenv/vendor/requirementslib/models/utils.py
+++ b/pipenv/vendor/requirementslib/models/utils.py
@@ -18,8 +18,10 @@ from attr import validators
 from first import first
 from packaging.markers import InvalidMarker, Marker, Op, Value, Variable
 from packaging.specifiers import InvalidSpecifier, Specifier, SpecifierSet
+from packaging.version import parse as parse_version
 from six.moves.urllib import parse as urllib_parse
 from urllib3 import util as urllib3_util
+from vistir.compat import lru_cache
 from vistir.misc import dedup
 from vistir.path import is_valid_url
 
@@ -321,6 +323,26 @@ def _strip_extras_markers(marker):
     return marker
 
 
+@lru_cache()
+def get_setuptools_version():
+    # type: () -> Optional[Text]
+    import pkg_resources
+    setuptools_dist = pkg_resources.get_distribution(
+        pkg_resources.Requirement("setuptools")
+    )
+    return getattr(setuptools_dist, "version", None)
+
+
+def get_default_pyproject_backend():
+    # type: () -> Text
+    st_version = get_setuptools_version()
+    if st_version is not None:
+        parsed_st_version = parse_version(st_version)
+        if parsed_st_version >= parse_version("40.6.0"):
+            return "setuptools.build_meta:__legacy__"
+    return "setuptools.build_meta"
+
+
 def get_pyproject(path):
     # type: (Union[Text, Path]) -> Tuple[List[Text], Text]
     """
@@ -345,7 +367,7 @@ def get_pyproject(path):
         if not setup_py.exists():
             return None
         requires = ["setuptools>=40.6", "wheel"]
-        backend = "setuptools.build_meta:__legacy__"
+        backend = get_default_pyproject_backend()
     else:
         pyproject_data = {}
         with io.open(pp_toml.as_posix(), encoding="utf-8") as fh:
@@ -354,10 +376,10 @@ def get_pyproject(path):
         if build_system is None:
             if setup_py.exists():
                 requires = ["setuptools>=40.6", "wheel"]
-                backend = "setuptools.build_meta:__legacy__"
+                backend = get_default_pyproject_backend()
             else:
                 requires = ["setuptools>=40.6", "wheel"]
-                backend = "setuptools.build_meta"
+                backend = get_default_pyproject_backend()
             build_system = {
                 "requires": requires,
                 "build-backend": backend
@@ -365,7 +387,7 @@ def get_pyproject(path):
             pyproject_data["build_system"] = build_system
         else:
             requires = build_system.get("requires", ["setuptools>=40.6", "wheel"])
-            backend = build_system.get("build-backend", "setuptools.build_meta:__legacy__")
+            backend = build_system.get("build-backend", get_default_pyproject_backend())
     return (requires, backend)
 
 
