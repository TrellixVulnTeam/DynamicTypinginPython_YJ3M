commit b164562fbdba196c7121cecede4afa13766a059e
Author: Dan Ryan <dan@danryan.co>
Date:   Wed Nov 21 12:15:04 2018 -0500

    Always use pipfile when skip_lock is provided
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/core.py b/pipenv/core.py
index 43a4e568..7f488aea 100644
--- a/pipenv/core.py
+++ b/pipenv/core.py
@@ -777,7 +777,8 @@ def do_install_dependencies(
             click.echo(
                 crayons.normal(fix_utf8("Installing dependencies from Pipfileâ€¦"), bold=True)
             )
-            lockfile = project.get_or_create_lockfile()
+            # skip_lock should completely bypass the lockfile (broken in 4dac1676)
+            lockfile = project.get_or_create_lockfile(from_pipfile=True)
     else:
         lockfile = project.get_or_create_lockfile()
         if not bare:
diff --git a/pipenv/project.py b/pipenv/project.py
index 69f3ad5d..26ec696c 100644
--- a/pipenv/project.py
+++ b/pipenv/project.py
@@ -743,10 +743,20 @@ class Project(object):
             source["verify_ssl"] = source["verify_ssl"].lower() == "true"
         return source
 
-    def get_or_create_lockfile(self):
+    def get_or_create_lockfile(self, from_pipfile=False):
         from pipenv.vendor.requirementslib.models.lockfile import Lockfile as Req_Lockfile
         lockfile = None
-        if self.lockfile_exists:
+        if from_pipfile and self.pipfile_exists:
+            lockfile_dict = {
+                "default": self._lockfile["default"].copy(),
+                "develop": self._lockfile["develop"].copy()
+            }
+            lockfile_dict.update({"_meta": self.get_lockfile_meta()})
+            _created_lockfile = Req_Lockfile.from_data(
+                path=self.lockfile_location, data=lockfile_dict, meta_from_project=False
+            )
+            lockfile._lockfile = _created_lockfile
+        elif self.lockfile_exists:
             try:
                 lockfile = Req_Lockfile.load(self.lockfile_location)
             except OSError:
@@ -770,17 +780,8 @@ class Project(object):
             )
             lockfile._lockfile = lockfile.projectfile.model = _created_lockfile
             return lockfile
-        elif self.pipfile_exists:
-            lockfile_dict = {
-                "default": self._lockfile["default"].copy(),
-                "develop": self._lockfile["develop"].copy()
-            }
-            lockfile_dict.update({"_meta": self.get_lockfile_meta()})
-            _created_lockfile = Req_Lockfile.from_data(
-                path=self.lockfile_location, data=lockfile_dict, meta_from_project=False
-            )
-            lockfile._lockfile = _created_lockfile
-            return lockfile
+        else:
+            return self.get_or_create_lockfile(from_pipfile=True)
 
     def get_lockfile_meta(self):
         from .vendor.plette.lockfiles import PIPFILE_SPEC_CURRENT
