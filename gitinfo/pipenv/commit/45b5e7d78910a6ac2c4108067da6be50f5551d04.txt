commit 45b5e7d78910a6ac2c4108067da6be50f5551d04
Author: Giorgio Sironi <g.sironi@elifesciences.org>
Date:   Mon Aug 20 13:38:13 2018 +0100

    Do not recommend --system for a Docker context
    
    Despite an application's Docker container not usually running other Python processes than the application itself, it still has a system Python whose packages should not necessarily be overwritten or upgraded by an application's choices.
    
    For example, `python3-software-properties` in Ubuntu contains utilities
    written in Python like `add-apt-repository` whose [use is widespread in
    Dockerfiles](https://github.com/search?l=Dockerfile&q=%22add-apt-repository%22&type=Code).
    
    By inadvertently applying an application's dependency onto the the container's Python, it is possible to:
    
    - subtly break system-level software like these that is still present in the container image
    - run into errors where that software is executed while extending the image with another Dockerfile
    - run into errors when `docker run|exec ... COMMAND` is used to run another process inside the same container for debugging purposes
    
    I realize this is not necessarily a likely use case, but we have seen
    enough projects/tools vendoring `Requests` in fear of a conflict.
    
    Very open on the wording and whether `system Python` is the correct term
    to designate the global Python for that OS/container image.

diff --git a/docs/advanced.rst b/docs/advanced.rst
index ceaf64d5..6179959d 100644
--- a/docs/advanced.rst
+++ b/docs/advanced.rst
@@ -110,7 +110,7 @@ You can tell Pipenv to install a Pipfile's contents into its parent system with
 
     $ pipenv install --system
 
-This is useful for Docker containers, and deployment infrastructure (e.g. Heroku does this).
+This is useful for managing the system Python, and deployment infrastructure (e.g. Heroku does this).
 
 Also useful for deployment is the ``--deploy`` flag::
 
