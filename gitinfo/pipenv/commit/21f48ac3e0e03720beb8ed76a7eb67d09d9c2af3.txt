commit 21f48ac3e0e03720beb8ed76a7eb67d09d9c2af3
Author: Dan Ryan <dan@danryan.co>
Date:   Sat Aug 25 13:17:33 2018 -0400

    Update pythonfinder to 1.0.2
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/vendor/pythonfinder/__init__.py b/pipenv/vendor/pythonfinder/__init__.py
index 9f1628be..f6ef476b 100644
--- a/pipenv/vendor/pythonfinder/__init__.py
+++ b/pipenv/vendor/pythonfinder/__init__.py
@@ -1,6 +1,6 @@
 from __future__ import print_function, absolute_import
 
-__version__ = "1.0.0"
+__version__ = '1.0.2'
 
 __all__ = ["Finder", "WindowsFinder", "SystemPath", "InvalidPythonVersion"]
 from .pythonfinder import Finder
diff --git a/pipenv/vendor/pythonfinder/_vendor/Makefile b/pipenv/vendor/pythonfinder/_vendor/Makefile
new file mode 100644
index 00000000..5c44fea4
--- /dev/null
+++ b/pipenv/vendor/pythonfinder/_vendor/Makefile
@@ -0,0 +1,14 @@
+# Taken from pip: https://github.com/pypa/pip/blob/95bcf8c5f6394298035a7332c441868f3b0169f4/src/pip/_vendor/Makefile
+all: clean vendor
+
+clean:
+	@# Delete vendored items
+	find . -maxdepth 1 -mindepth 1 -type d -exec rm -rf {} \;
+
+vendor:
+	@# Install vendored libraries
+	pip install -t . -r vendor.txt
+
+	@# Cleanup .egg-info directories
+	rm -rf *.egg-info
+	rm -rf *.dist-info
diff --git a/pipenv/vendor/pythonfinder/_vendor/vendor.txt b/pipenv/vendor/pythonfinder/_vendor/vendor.txt
new file mode 100644
index 00000000..88752498
--- /dev/null
+++ b/pipenv/vendor/pythonfinder/_vendor/vendor.txt
@@ -0,0 +1 @@
+-e git+https://github.com/zooba/pep514tools.git@320e48745660b696e2dcaee888fc2e516b435e48#egg=pep514tools
diff --git a/pipenv/vendor/pythonfinder/cli.py b/pipenv/vendor/pythonfinder/cli.py
index 4e620b08..d285fb29 100644
--- a/pipenv/vendor/pythonfinder/cli.py
+++ b/pipenv/vendor/pythonfinder/cli.py
@@ -11,7 +11,7 @@ from .pythonfinder import Finder
 # @click.group(invoke_without_command=True, context_settings=CONTEXT_SETTINGS)
 @click.command()
 @click.option("--find", default=False, nargs=1, help="Find a specific python version.")
-@click.option("--which", default=False, nargs=1, help="Run the which commend.")
+@click.option("--which", default=False, nargs=1, help="Run the which command.")
 @click.option(
     "--findall", is_flag=True, default=False, help="Find all python versions."
 )
diff --git a/pipenv/vendor/pythonfinder/models/__init__.py b/pipenv/vendor/pythonfinder/models/__init__.py
index a38494ed..ef0ed368 100644
--- a/pipenv/vendor/pythonfinder/models/__init__.py
+++ b/pipenv/vendor/pythonfinder/models/__init__.py
@@ -1,10 +1,17 @@
 # -*- coding=utf-8 -*-
-from __future__ import print_function, absolute_import
+from __future__ import absolute_import, print_function
+
 import abc
 import operator
-import six
+
 from itertools import chain
+
+import six
+
 from ..utils import KNOWN_EXTS, unnest
+from .path import SystemPath
+from .python import PythonVersion
+from .windows import WindowsFinder
 
 
 @six.add_metaclass(abc.ABCMeta)
@@ -24,110 +31,3 @@ class BaseFinder(object):
     @property
     def expanded_paths(self):
         return (p.paths.values() for p in self.version_paths)
-
-
-class BasePath(object):
-    def which(self, name):
-        """Search in this path for an executable.
-
-        :param executable: The name of an executable to search for.
-        :type executable: str
-        :returns: :class:`~pythonfinder.models.PathEntry` instance.
-        """
-
-        valid_names = [name] + [
-            "{0}.{1}".format(name, ext).lower() if ext else "{0}".format(name).lower()
-            for ext in KNOWN_EXTS
-        ]
-        children = self.children
-        found = next(
-            (
-                children[(self.path / child).as_posix()]
-                for child in valid_names
-                if (self.path / child).as_posix() in children
-            ),
-            None,
-        )
-        return found
-
-    def find_all_python_versions(
-        self, major=None, minor=None, patch=None, pre=None, dev=None, arch=None
-    ):
-        """Search for a specific python version on the path. Return all copies
-
-        :param major: Major python version to search for.
-        :type major: int
-        :param int minor: Minor python version to search for, defaults to None
-        :param int patch: Patch python version to search for, defaults to None
-        :param bool pre: Search for prereleases (default None) - prioritize releases if None
-        :param bool dev: Search for devreleases (default None) - prioritize releases if None
-        :param str arch: Architecture to include, e.g. '64bit', defaults to None
-        :return: A list of :class:`~pythonfinder.models.PathEntry` instances matching the version requested.
-        :rtype: List[:class:`~pythonfinder.models.PathEntry`]
-        """
-
-        call_method = (
-            "find_all_python_versions" if self.is_dir else "find_python_version"
-        )
-        sub_finder = operator.methodcaller(
-            call_method, major, minor=minor, patch=patch, pre=pre, dev=dev, arch=arch
-        )
-        if not self.is_dir:
-            return sub_finder(self)
-        path_filter = filter(None, (sub_finder(p) for p in self.children.values()))
-        version_sort = operator.attrgetter("as_python.version_sort")
-        return [c for c in sorted(path_filter, key=version_sort, reverse=True)]
-
-    def find_python_version(
-        self, major=None, minor=None, patch=None, pre=None, dev=None, arch=None
-    ):
-        """Search or self for the specified Python version and return the first match.
-
-        :param major: Major version number.
-        :type major: int
-        :param int minor: Minor python version to search for, defaults to None
-        :param int patch: Patch python version to search for, defaults to None
-        :param bool pre: Search for prereleases (default None) - prioritize releases if None
-        :param bool dev: Search for devreleases (default None) - prioritize releases if None
-        :param str arch: Architecture to include, e.g. '64bit', defaults to None
-        :returns: A :class:`~pythonfinder.models.PathEntry` instance matching the version requested.
-        """
-
-        version_matcher = operator.methodcaller(
-            "matches",
-            major=major,
-            minor=minor,
-            patch=patch,
-            pre=pre,
-            dev=dev,
-            arch=arch,
-        )
-        is_py = operator.attrgetter("is_python")
-        py_version = operator.attrgetter("as_python")
-        if not self.is_dir:
-            if self.is_python and self.as_python and version_matcher(self.as_python):
-                return self
-            return
-        finder = (
-            (child, child.as_python)
-            for child in unnest(self.pythons.values())
-            if child.as_python
-        )
-        py_filter = filter(
-            None, filter(lambda child: version_matcher(child[1]), finder)
-        )
-        version_sort = operator.attrgetter("version_sort")
-        return next(
-            (
-                c[0]
-                for c in sorted(
-                    py_filter, key=lambda child: child[1].version_sort, reverse=True
-                )
-            ),
-            None,
-        )
-
-
-from .path import SystemPath
-from .windows import WindowsFinder
-from .python import PythonVersion
diff --git a/pipenv/vendor/pythonfinder/models/mixins.py b/pipenv/vendor/pythonfinder/models/mixins.py
new file mode 100644
index 00000000..8cbd45df
--- /dev/null
+++ b/pipenv/vendor/pythonfinder/models/mixins.py
@@ -0,0 +1,129 @@
+# -*- coding=utf-8 -*-
+from __future__ import absolute_import, unicode_literals
+
+import abc
+import operator
+import six
+
+from ..utils import KNOWN_EXTS, unnest
+
+
+class BasePath(object):
+    def which(self, name):
+        """Search in this path for an executable.
+
+        :param executable: The name of an executable to search for.
+        :type executable: str
+        :returns: :class:`~pythonfinder.models.PathEntry` instance.
+        """
+
+        valid_names = [name] + [
+            "{0}.{1}".format(name, ext).lower() if ext else "{0}".format(name).lower()
+            for ext in KNOWN_EXTS
+        ]
+        children = self.children
+        found = next(
+            (
+                children[(self.path / child).as_posix()]
+                for child in valid_names
+                if (self.path / child).as_posix() in children
+            ),
+            None,
+        )
+        return found
+
+    def find_all_python_versions(
+        self, major=None, minor=None, patch=None, pre=None, dev=None, arch=None
+    ):
+        """Search for a specific python version on the path. Return all copies
+
+        :param major: Major python version to search for.
+        :type major: int
+        :param int minor: Minor python version to search for, defaults to None
+        :param int patch: Patch python version to search for, defaults to None
+        :param bool pre: Search for prereleases (default None) - prioritize releases if None
+        :param bool dev: Search for devreleases (default None) - prioritize releases if None
+        :param str arch: Architecture to include, e.g. '64bit', defaults to None
+        :return: A list of :class:`~pythonfinder.models.PathEntry` instances matching the version requested.
+        :rtype: List[:class:`~pythonfinder.models.PathEntry`]
+        """
+
+        call_method = (
+            "find_all_python_versions" if self.is_dir else "find_python_version"
+        )
+        sub_finder = operator.methodcaller(
+            call_method, major, minor=minor, patch=patch, pre=pre, dev=dev, arch=arch
+        )
+        if not self.is_dir:
+            return sub_finder(self)
+        path_filter = filter(None, (sub_finder(p) for p in self.children.values()))
+        version_sort = operator.attrgetter("as_python.version_sort")
+        return [c for c in sorted(path_filter, key=version_sort, reverse=True)]
+
+    def find_python_version(
+        self, major=None, minor=None, patch=None, pre=None, dev=None, arch=None
+    ):
+        """Search or self for the specified Python version and return the first match.
+
+        :param major: Major version number.
+        :type major: int
+        :param int minor: Minor python version to search for, defaults to None
+        :param int patch: Patch python version to search for, defaults to None
+        :param bool pre: Search for prereleases (default None) - prioritize releases if None
+        :param bool dev: Search for devreleases (default None) - prioritize releases if None
+        :param str arch: Architecture to include, e.g. '64bit', defaults to None
+        :returns: A :class:`~pythonfinder.models.PathEntry` instance matching the version requested.
+        """
+
+        version_matcher = operator.methodcaller(
+            "matches",
+            major=major,
+            minor=minor,
+            patch=patch,
+            pre=pre,
+            dev=dev,
+            arch=arch,
+        )
+        is_py = operator.attrgetter("is_python")
+        py_version = operator.attrgetter("as_python")
+        if not self.is_dir:
+            if self.is_python and self.as_python and version_matcher(self.as_python):
+                return self
+            return
+        finder = (
+            (child, child.as_python)
+            for child in unnest(self.pythons.values())
+            if child.as_python
+        )
+        py_filter = filter(
+            None, filter(lambda child: version_matcher(child[1]), finder)
+        )
+        version_sort = operator.attrgetter("version_sort")
+        return next(
+            (
+                c[0]
+                for c in sorted(
+                    py_filter, key=lambda child: child[1].version_sort, reverse=True
+                )
+            ),
+            None,
+        )
+
+
+@six.add_metaclass(abc.ABCMeta)
+class BaseFinder(object):
+    def get_versions(self):
+        """Return the available versions from the finder"""
+        raise NotImplementedError
+
+    @classmethod
+    def create(cls):
+        raise NotImplementedError
+
+    @property
+    def version_paths(self):
+        return self.versions.values()
+
+    @property
+    def expanded_paths(self):
+        return (p.paths.values() for p in self.version_paths)
diff --git a/pipenv/vendor/pythonfinder/models/path.py b/pipenv/vendor/pythonfinder/models/path.py
index af103915..8e38aef3 100644
--- a/pipenv/vendor/pythonfinder/models/path.py
+++ b/pipenv/vendor/pythonfinder/models/path.py
@@ -1,31 +1,28 @@
 # -*- coding=utf-8 -*-
-from __future__ import print_function, absolute_import
-import attr
+from __future__ import absolute_import, print_function
+
 import copy
 import operator
 import os
 import sys
+
 from collections import defaultdict
-from cached_property import cached_property
 from itertools import chain
-from . import BasePath
-from .python import PythonVersion
+
+import attr
+
+from cached_property import cached_property
+
+from vistir.compat import Path, fs_str
+
+from .mixins import BasePath
 from ..environment import PYENV_INSTALLED, PYENV_ROOT
 from ..exceptions import InvalidPythonVersion
 from ..utils import (
-    optional_instance_of,
-    filter_pythons,
-    path_is_known_executable,
-    looks_like_python,
-    ensure_path,
-    fs_str,
-    unnest,
+    ensure_path, filter_pythons, looks_like_python, optional_instance_of,
+    path_is_known_executable, unnest
 )
-
-try:
-    from pathlib import Path
-except ImportError:
-    from pathlib2 import Path
+from .python import PythonVersion
 
 
 @attr.s
@@ -251,7 +248,7 @@ class SystemPath(object):
         if major and minor and patch:
             _tuple_pre = pre if pre is not None else False
             _tuple_dev = dev if dev is not None else False
-            version_tuple = (major, minor_, patch, _tuple_pre, _tuple_dev)
+            version_tuple = (major, minor, patch, _tuple_pre, _tuple_dev)
             version_tuple_pre = (major, minor, patch, True, False)
         if os.name == "nt" and self.windows_finder:
             windows_finder_version = sub_finder(self.windows_finder)
diff --git a/pipenv/vendor/pythonfinder/models/pyenv.py b/pipenv/vendor/pythonfinder/models/pyenv.py
index 6c890936..6df47179 100644
--- a/pipenv/vendor/pythonfinder/models/pyenv.py
+++ b/pipenv/vendor/pythonfinder/models/pyenv.py
@@ -1,17 +1,16 @@
 # -*- coding=utf-8 -*-
-from __future__ import print_function, absolute_import
-import attr
+from __future__ import absolute_import, print_function
+
 from collections import defaultdict
-from . import BaseFinder
-from .path import VersionPath
-from .python import PythonVersion
-from ..utils import optional_instance_of, ensure_path
 
+import attr
+
+from vistir.compat import Path
 
-try:
-    from pathlib import Path
-except ImportError:
-    from pathlib2 import Path
+from ..utils import ensure_path, optional_instance_of
+from .mixins import BaseFinder
+from .path import VersionPath
+from .python import PythonVersion
 
 
 @attr.s
diff --git a/pipenv/vendor/pythonfinder/models/python.py b/pipenv/vendor/pythonfinder/models/python.py
index f10ddb4e..8a40e248 100644
--- a/pipenv/vendor/pythonfinder/models/python.py
+++ b/pipenv/vendor/pythonfinder/models/python.py
@@ -1,18 +1,22 @@
 # -*- coding=utf-8 -*-
-from __future__ import print_function, absolute_import
-import attr
+from __future__ import absolute_import, print_function
+
 import copy
-from collections import defaultdict
 import platform
-from packaging.version import parse as parse_version, Version
-from ..environment import SYSTEM_ARCH
-from ..utils import _filter_none, optional_instance_of, get_python_version, ensure_path
 
+from collections import defaultdict
 
-try:
-    from pathlib import Path
-except ImportError:
-    from pathlib2 import Path
+import attr
+
+from packaging.version import Version
+from packaging.version import parse as parse_version
+
+from vistir.compat import Path
+
+from ..environment import SYSTEM_ARCH
+from ..utils import (
+    _filter_none, ensure_path, get_python_version, optional_instance_of
+)
 
 
 @attr.s
@@ -31,7 +35,7 @@ class PythonVersion(object):
     @property
     def version_sort(self):
         """version_sort tuple for sorting against other instances of the same class.
-        
+
         Returns a tuple of the python version but includes a point for non-dev,
         and a point for non-prerelease versions.  So released versions will have 2 points
         for this value.  E.g. `(3, 6, 6, 2)` is a release, `(3, 6, 6, 1)` is a prerelease,
diff --git a/pipenv/vendor/pythonfinder/models/windows.py b/pipenv/vendor/pythonfinder/models/windows.py
index f731432c..4f0b64d1 100644
--- a/pipenv/vendor/pythonfinder/models/windows.py
+++ b/pipenv/vendor/pythonfinder/models/windows.py
@@ -1,13 +1,17 @@
 # -*- coding=utf-8 -*-
-from __future__ import print_function, absolute_import
-import attr
+from __future__ import absolute_import, print_function
+
 import operator
+
 from collections import defaultdict
-from . import BaseFinder
-from .path import PathEntry
-from .python import PythonVersion, VersionMap
+
+import attr
+
 from ..exceptions import InvalidPythonVersion
 from ..utils import ensure_path
+from .mixins import BaseFinder
+from .path import PathEntry
+from .python import PythonVersion, VersionMap
 
 
 @attr.s
diff --git a/pipenv/vendor/pythonfinder/utils.py b/pipenv/vendor/pythonfinder/utils.py
index 1a9bfa2c..285e06be 100644
--- a/pipenv/vendor/pythonfinder/utils.py
+++ b/pipenv/vendor/pythonfinder/utils.py
@@ -1,19 +1,22 @@
 # -*- coding=utf-8 -*-
-from __future__ import print_function, absolute_import
-import attr
+from __future__ import absolute_import, print_function
+
 import locale
 import os
-import six
 import subprocess
 import sys
+
 from fnmatch import fnmatch
-from .exceptions import InvalidPythonVersion
 from itertools import chain
 
-try:
-    from pathlib import Path
-except ImportError:
-    from pathlib2 import Path
+import attr
+import six
+
+import vistir
+
+from vistir.compat import Path
+
+from .exceptions import InvalidPythonVersion
 
 
 PYTHON_IMPLEMENTATIONS = ("python", "ironpython", "jython", "pypy")
@@ -24,25 +27,11 @@ KNOWN_EXTS = KNOWN_EXTS | set(
 )
 
 
-def _run(cmd):
-    """Use `subprocess.check_output` to get the output of a command and decode it.
-
-    :param list cmd: A list representing the command you want to run.
-    :returns: A 2-tuple of (output, error)
-    """
-    encoding = locale.getdefaultlocale()[1] or "utf-8"
-    c = subprocess.Popen(
-        cmd, env=os.environ.copy(), stdout=subprocess.PIPE, stderr=subprocess.PIPE
-    )
-    out, err = c.communicate()
-    return out.decode(encoding).strip(), err.decode(encoding).strip()
-
-
 def get_python_version(path):
     """Get python version string using subprocess from a given path."""
     version_cmd = [path, "-c", "import sys; print(sys.version.split()[0])"]
     try:
-        out, _ = _run(version_cmd)
+        out, _ = vistir.misc.run(version_cmd)
     except OSError:
         raise InvalidPythonVersion("%s is not a valid python path" % path)
     if not out:
@@ -123,20 +112,6 @@ def filter_pythons(path):
     return filter(lambda x: path_is_python(x), path.iterdir())
 
 
-def fs_str(string):
-    """Encodes a string into the proper filesystem encoding
-
-    Borrowed from pip-tools
-    """
-    if isinstance(string, str):
-        return string
-    assert not isinstance(string, bytes)
-    return string.encode(_fs_encoding)
-
-
-_fs_encoding = sys.getfilesystemencoding() or sys.getdefaultencoding()
-
-
 def unnest(item):
     if isinstance(next((i for i in item), None), (list, tuple)):
         return chain(*filter(None, item))
