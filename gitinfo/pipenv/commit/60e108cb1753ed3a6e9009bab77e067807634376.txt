commit 60e108cb1753ed3a6e9009bab77e067807634376
Author: Dan Ryan <dan@danryan.co>
Date:   Thu May 10 22:29:47 2018 -0400

    Move requirements tests to requirement library
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/tests/unit/test_utils.py b/tests/unit/test_utils.py
index ee71b147..7847551a 100644
--- a/tests/unit/test_utils.py
+++ b/tests/unit/test_utils.py
@@ -4,7 +4,6 @@ import pytest
 from mock import patch, Mock
 from first import first
 import pipenv.utils
-import pipenv.requirements
 
 
 # Pipfile format <-> requirements.txt format.
@@ -114,39 +113,6 @@ def test_convert_deps_to_pip_unicode():
     assert deps[0] == 'django==1.10'
 
 
-@pytest.mark.utils
-@pytest.mark.parametrize('expected, requirement', DEP_PIP_PAIRS)
-def test_convert_from_pip(expected, requirement):
-    # We don't build requirements back up with the editable key, so lets drop it out
-    package = first(expected.keys())
-    if hasattr(expected[package], 'keys') and expected[package].get('editable') is False:
-        del expected[package]['editable']
-    assert pipenv.requirements.PipenvRequirement.from_line(requirement).as_pipfile() == expected
-
-
-@pytest.mark.utils
-def test_convert_from_pip_fail_if_no_egg():
-    """Parsing should fail without `#egg=`.
-    """
-    dep = 'git+https://github.com/kennethreitz/requests.git'
-    with pytest.raises(ValueError) as e:
-        dep = pipenv.requirements.PipenvRequirement.from_line(dep).as_pipfile()
-        assert 'pipenv requires an #egg fragment for vcs' in str(e)
-
-
-@pytest.mark.utils
-def test_convert_from_pip_git_uri_normalize():
-    """Pip does not parse this correctly, but we can (by converting to ssh://).
-    """
-    dep = 'git+git@host:user/repo.git#egg=myname'
-    dep = pipenv.requirements.PipenvRequirement.from_line(dep).as_pipfile()
-    assert dep == {
-        'myname': {
-            'git': 'git@host:user/repo.git',
-        }
-    }
-
-
 class TestUtils:
     """Test utility functions in pipenv"""
 
@@ -343,51 +309,6 @@ twine = "*"
     def test_nix_normalize_drive(self, input_path, expected):
         assert pipenv.utils.normalize_drive(input_path) == expected
 
-    @pytest.mark.utils
-    @pytest.mark.requirements
-    def test_get_requirements(self):
-        # Test eggs in URLs
-        url_with_egg = pipenv.requirements.PipenvRequirement.from_line(
-            'https://github.com/IndustriaTech/django-user-clipboard/archive/0.6.1.zip#egg=django-user-clipboard'
-        ).requirement
-        assert url_with_egg.uri == 'https://github.com/IndustriaTech/django-user-clipboard/archive/0.6.1.zip'
-        assert url_with_egg.name == 'django-user-clipboard'
-        # Test URLs without eggs pointing at installable zipfiles
-        url = pipenv.requirements.PipenvRequirement.from_line(
-            'https://github.com/kennethreitz/tablib/archive/0.12.1.zip'
-        ).requirement
-        assert url.uri == 'https://github.com/kennethreitz/tablib/archive/0.12.1.zip'
-        # Test VCS urls with refs and eggnames
-        vcs_url = pipenv.requirements.PipenvRequirement.from_line(
-            'git+https://github.com/kennethreitz/tablib.git@master#egg=tablib'
-        ).requirement
-        assert vcs_url.vcs == 'git' and vcs_url.name == 'tablib' and vcs_url.revision == 'master'
-        assert vcs_url.uri == 'git+https://github.com/kennethreitz/tablib.git'
-        # Test normal package requirement
-        normal = pipenv.requirements.PipenvRequirement.from_line('tablib').requirement
-        assert normal.name == 'tablib'
-        # Pinned package  requirement
-        spec = pipenv.requirements.PipenvRequirement.from_line('tablib==0.12.1').requirement
-        assert spec.name == 'tablib' and spec.specs == [('==', '0.12.1')]
-        # Test complex package with both extras and markers
-        extras_markers = pipenv.requirements.PipenvRequirement.from_line(
-            "requests[security]; os_name=='posix'"
-        ).requirement
-        assert extras_markers.extras == ['security']
-        assert extras_markers.name == 'requests'
-        assert extras_markers.markers == "os_name=='posix'"
-        # Test VCS uris get generated correctly, retain git+git@ if supplied that way, and are named according to egg fragment
-        git_reformat = pipenv.requirements.PipenvRequirement.from_line(
-            '-e git+git@github.com:pypa/pipenv.git#egg=pipenv'
-        ).requirement
-        assert git_reformat.uri == 'git+git@github.com:pypa/pipenv.git'
-        assert git_reformat.name == 'pipenv'
-        assert git_reformat.editable
-        # Previously VCS uris were being treated as local files, so make sure these are not handled that way
-        assert not git_reformat.local_file
-        # Test regression where VCS uris were being handled as paths rather than VCS entries
-        assert git_reformat.vcs == 'git'
-
     @pytest.mark.utils
     @pytest.mark.parametrize(
         'sources, expected_args',
