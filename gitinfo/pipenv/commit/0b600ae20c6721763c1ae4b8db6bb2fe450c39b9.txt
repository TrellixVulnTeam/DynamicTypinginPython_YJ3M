commit 0b600ae20c6721763c1ae4b8db6bb2fe450c39b9
Author: Dan Ryan <dan@danryan.co>
Date:   Tue May 7 17:01:33 2019 -0400

    Fix requirementslib marker / installers
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/environment.py b/pipenv/environment.py
index 425e2350..49cad91d 100644
--- a/pipenv/environment.py
+++ b/pipenv/environment.py
@@ -129,7 +129,7 @@ class Environment(object):
             base, leaf = os.path.split(path)
             base, parent = os.path.split(base)
             leaf = os.path.join(parent, leaf).replace(
-                replace_version, self.python_info["py_version_short"]
+                replace_version, self.python_info.get("py_version_short", get_python_version())
             )
             return os.path.join(base, leaf)
         return path
diff --git a/pipenv/utils.py b/pipenv/utils.py
index 9a39a3e2..b4d7817b 100644
--- a/pipenv/utils.py
+++ b/pipenv/utils.py
@@ -585,10 +585,10 @@ class Resolver(object):
     def session(self):
         if self._session is None:
             self._session = self.pip_command._build_session(self.pip_options)
-            if environments.is_verbose():
-                click_echo(
-                    crayons.blue("Using pip: {0}".format(" ".join(self.pip_args))), err=True
-                )
+            # if environments.is_verbose():
+            #     click_echo(
+            #         crayons.blue("Using pip: {0}".format(" ".join(self.pip_args))), err=True
+            #     )
         return self._session
 
     @property
@@ -673,6 +673,7 @@ class Resolver(object):
             else:
                 candidate = self.fetch_candidate(result)
                 if getattr(candidate, "requires_python", None):
+                    print(candidate.requires_python)
                     marker = make_marker_from_specifier(candidate.requires_python)
                     self.markers[result.name] = marker
                     result.markers = marker
@@ -2061,6 +2062,7 @@ def make_marker_from_specifier(spec):
         spec = "=={0}".format(spec.lstrip("="))
     specset = cleanup_pyspecs(SpecifierSet(spec))
     marker_str = " and ".join([format_pyversion(pv) for pv in specset])
+    print(marker_str, file=sys.stderr)
     return Marker(marker_str)
         # spec_match = next(iter(c for c in Specifier._operators if c in spec), None)
         # if spec_match:
diff --git a/pipenv/vendor/requirementslib/models/markers.py b/pipenv/vendor/requirementslib/models/markers.py
index e1014917..b5f55b34 100644
--- a/pipenv/vendor/requirementslib/models/markers.py
+++ b/pipenv/vendor/requirementslib/models/markers.py
@@ -149,6 +149,7 @@ def _format_pyspec(specifier):
     try:
         op = REPLACE_RANGES[specifier.operator]
     except KeyError:
+        print(specifier)
         return specifier
     curr_tuple = _tuplize_version(version)
     try:
@@ -160,8 +161,10 @@ def _format_pyspec(specifier):
             op = "<="
             next_tuple = (next_tuple[0], curr_tuple[1])
         else:
+            # print(specifier)
             return specifier
     specifier = Specifier("{0}{1}".format(op, _format_version(next_tuple)))
+    # print(specifier)
     return specifier
 
 
@@ -178,16 +181,20 @@ def _get_specs(specset):
     if isinstance(specset, str):
         specset = SpecifierSet(specset)
     result = []
-    for spec in set(specset):
-        version = spec.version
-        op = spec.operator
-        if op in ("in", "not in"):
-            versions = version.split(",")
-            op = "==" if op == "in" else "!="
-            for ver in versions:
-                result.append((op, _tuplize_version(ver.strip())))
-        else:
-            result.append((spec.operator, _tuplize_version(spec.version)))
+    try:
+        for spec in set(specset):
+            version = spec.version
+            op = spec.operator
+            if op in ("in", "not in"):
+                versions = version.split(",")
+                op = "==" if op == "in" else "!="
+                for ver in versions:
+                    result.append((op, _tuplize_version(ver.strip())))
+            else:
+                result.append((spec.operator, _tuplize_version(spec.version)))
+    except Exception:
+        print(specset)
+        raise
     return sorted(result, key=operator.itemgetter(1))
 
 
