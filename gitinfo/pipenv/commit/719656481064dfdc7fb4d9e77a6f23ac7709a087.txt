commit 719656481064dfdc7fb4d9e77a6f23ac7709a087
Author: Kenneth Reitz <me@kennethreitz.org>
Date:   Thu Sep 21 17:14:19 2017 -0400

    support for custom indexes
    
    Fixes #634
    
    Signed-off-by: Kenneth Reitz <me@kennethreitz.org>

diff --git a/pipenv/cli.py b/pipenv/cli.py
index ef67dc79..05e41c27 100644
--- a/pipenv/cli.py
+++ b/pipenv/cli.py
@@ -909,6 +909,8 @@ def get_downloads_info(names_map, section):
 def do_lock(verbose=False, system=False, clear=False):
     """Executes the freeze functionality."""
 
+    project.destroy_lockfile()
+
     # Alert the user of progress.
     click.echo(
         u'{0} {1} {2}'.format(
diff --git a/pipenv/project.py b/pipenv/project.py
index 1e3a3e14..40e796b2 100644
--- a/pipenv/project.py
+++ b/pipenv/project.py
@@ -376,6 +376,13 @@ class Project(object):
         else:
             return [{u'url': u'https://pypi.python.org/simple', u'verify_ssl': True}]
 
+    def destroy_lockfile(self):
+        """Deletes the lockfile."""
+        try:
+            return os.remove(self.lockfile_location)
+        except OSError:
+            pass
+
     def remove_package_from_pipfile(self, package_name, dev=False):
 
         # Read and append Pipfile.
diff --git a/pipenv/utils.py b/pipenv/utils.py
index 647ffc5a..1095ccf4 100644
--- a/pipenv/utils.py
+++ b/pipenv/utils.py
@@ -435,27 +435,27 @@ def resolve_deps(deps, which, which_pip, project, sources=None, verbose=False, p
         version = clean_pkg_version(result.specifier)
 
         collected_hashes = []
+        if 'python.org' in '|'.join([source['url'] for source in sources]):
+            try:
+                # Grab the hashes from the new warehouse API.
+                r = requests.get('https://pypi.org/pypi/{0}/json'.format(name))
+                api_releases = r.json()['releases']
 
-        try:
-            # Grab the hashes from the new warehouse API.
-            r = requests.get('https://pypi.org/pypi/{0}/json'.format(name))
-            api_releases = r.json()['releases']
-
-            cleaned_releases = {}
-            for api_version, api_info in api_releases.items():
-                cleaned_releases[clean_pkg_version(api_version)] = api_info
+                cleaned_releases = {}
+                for api_version, api_info in api_releases.items():
+                    cleaned_releases[clean_pkg_version(api_version)] = api_info
 
-            for release in cleaned_releases[version]:
-                collected_hashes.append(release['digests']['sha256'])
+                for release in cleaned_releases[version]:
+                    collected_hashes.append(release['digests']['sha256'])
 
-            collected_hashes = ['sha256:' + s for s in collected_hashes]
+                collected_hashes = ['sha256:' + s for s in collected_hashes]
 
-            # Collect un-collectable hashes.
-            if not collected_hashes:
-                collected_hashes = list(list(resolver.resolve_hashes([result]).items())[0][1])
+                # Collect un-collectable hashes.
+                if not collected_hashes:
+                    collected_hashes = list(list(resolver.resolve_hashes([result]).items())[0][1])
 
-        except (ValueError, KeyError):
-            pass
+            except (ValueError, KeyError):
+                pass
 
         results.append({'name': name, 'version': version, 'hashes': collected_hashes})
 
