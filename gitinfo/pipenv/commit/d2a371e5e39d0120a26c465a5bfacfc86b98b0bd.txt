commit d2a371e5e39d0120a26c465a5bfacfc86b98b0bd
Author: Pascal Borreli <pascal@borreli.com>
Date:   Mon Jan 23 18:38:17 2017 +0000

    Fixed typos

diff --git a/HISTORY.txt b/HISTORY.txt
index 81956d46..29731fe4 100644
--- a/HISTORY.txt
+++ b/HISTORY.txt
@@ -5,6 +5,6 @@
 0.2.1:
  - Trove classifiers. 
 0.2.0:
- - Added support for $ pipenv --three / --two, for initalizing virtualenvs with a specific Python version. 
+ - Added support for $ pipenv --three / --two, for initializing virtualenvs with a specific Python version.
  - Added support for VCS-backed installs, including editables.
  - TODO: Still need to support non-git-backed VCS installations in Pipfiles. 
\ No newline at end of file
diff --git a/README.rst b/README.rst
index 3125dec8..cfb559ed 100644
--- a/README.rst
+++ b/README.rst
@@ -80,7 +80,7 @@ Other Commands
       install    Installs a provided package and adds it to...
       lock       Generates Pipfile.lock.
       run        Spawns a command installed into the...
-      shell      Spanws a shell within the virtualenv.
+      shell      Spawns a shell within the virtualenv.
       uninstall  Un-installs a provided package and removes it...
       update     Updates pip to latest version, uninstalls all...
 
diff --git a/pipenv/cli.py b/pipenv/cli.py
index 2b95e37f..81576816 100644
--- a/pipenv/cli.py
+++ b/pipenv/cli.py
@@ -104,7 +104,7 @@ def do_install_dependencies(dev=False, only=False, bare=False, allow_global=Fals
     if dev:
         deps.update(lockfile['develop'])
 
-    # Convert the deps to pip-compatbile arguments.
+    # Convert the deps to pip-compatible arguments.
     deps = convert_deps_to_pip(deps)
 
     # Actually install each dependency into the virtualenv.
@@ -186,7 +186,7 @@ def do_lock(dev=False):
     with open(project.lockfile_location, 'w') as f:
         f.write(json.dumps(lockfile, indent=4, separators=(',', ': ')))
 
-    # Provide instructions for dev depenciencies.
+    # Provide instructions for dev dependencies.
     if not dev:
         click.echo(crayons.yellow('Note: ') + 'your project now has only default {0} installed.'.format(crayons.red('[packages]')))
         click.echo('To keep {0} next time, run: $ {1}'.format(crayons.red('[dev-packages]'), crayons.green('pipenv lock --dev')))
@@ -363,7 +363,7 @@ def install(package_name=False, more_packages=False, r=False, dev=False, system=
         try:
             assert c.return_code == 0
         except AssertionError:
-            click.echo('{0} An error occured while installing {1}'.format(crayons.red('Error: '), crayons.green(package_name)))
+            click.echo('{0} An error occurred while installing {1}'.format(crayons.red('Error: '), crayons.green(package_name)))
             click.echo(crayons.blue(c.err))
             sys.exit(1)
 
@@ -413,10 +413,10 @@ def shell():
     # Ensure that virtualenv is available.
     ensure_project()
 
-    # Set an environment viariable, so we know we're in the environment.
+    # Set an environment variable, so we know we're in the environment.
     os.environ['PIPENV_ACTIVE'] = '1'
 
-    # Spawn the Python process, and iteract with it.
+    # Spawn the Python process, and interact with it.
     shell = os.environ['SHELL']
     click.echo(crayons.yellow('Spawning environment shell ({0}).'.format(crayons.red(shell))))
 
@@ -439,7 +439,7 @@ def run(command, args):
     # Ensure that virtualenv is available.
     ensure_project()
 
-    # Spawn the new process, and iteract with it.
+    # Spawn the new process, and interact with it.
     c = pexpect.spawn('{0} {1}'.format(which(command), ' '.join(args)))
 
     # Interact with the new shell.
diff --git a/pipenv/utils.py b/pipenv/utils.py
index a274625f..b5a9ca11 100644
--- a/pipenv/utils.py
+++ b/pipenv/utils.py
@@ -16,7 +16,7 @@ def format_toml(data):
 
 
 def multi_split(s, split):
-    """Splits on multiple given seperators."""
+    """Splits on multiple given separators."""
     for r in split:
         s = s.replace(r, '|')
 
