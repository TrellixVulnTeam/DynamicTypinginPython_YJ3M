commit 1034022e96877ab07a08c7a2a3a7c4fb1c9f8b8e
Author: Dan Ryan <dan@danryan.co>
Date:   Thu Nov 1 00:51:34 2018 -0400

    Add improved exception handling and formatter
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/cli/command.py b/pipenv/cli/command.py
index 02bd5dc9..40d3f0fe 100644
--- a/pipenv/cli/command.py
+++ b/pipenv/cli/command.py
@@ -268,7 +268,9 @@ def install(
 )
 @uninstall_options
 @pass_state
+@pass_context
 def uninstall(
+    ctx,
     state,
     lock=False,
     all_dev=False,
@@ -289,6 +291,7 @@ def uninstall(
         all=all,
         keep_outdated=state.installstate.keep_outdated,
         pypi_mirror=state.pypi_mirror,
+        ctx=ctx
     )
     if retcode:
         sys.exit(retcode)
@@ -297,7 +300,9 @@ def uninstall(
 @cli.command(short_help="Generates Pipfile.lock.")
 @lock_options
 @pass_state
+@pass_context
 def lock(
+    ctx,
     state,
     **kwargs
 ):
@@ -310,6 +315,7 @@ def lock(
         do_init(dev=state.installstate.dev, requirements=state.installstate.requirementstxt,
                         pypi_mirror=state.pypi_mirror, pre=state.installstate.pre)
     do_lock(
+        ctx=ctx,
         clear=state.clear,
         pre=state.installstate.pre,
         keep_outdated=state.installstate.keep_outdated,
diff --git a/pipenv/core.py b/pipenv/core.py
index fcf846c0..727de0e8 100644
--- a/pipenv/core.py
+++ b/pipenv/core.py
@@ -299,7 +299,7 @@ def ensure_pipfile(validate=True, skip_requirements=False, system=False):
     if project.pipfile_is_empty:
         # Show an error message and exit if system is passed and no pipfile exists
         if system and not PIPENV_VIRTUALENV:
-            raise exceptions.PipenvOptionsError(
+            raise exceptions.PipenvOptionsError("--system",
                 "--system is intended to be used for pre-existing Pipfile "
                 "installation, not installation of specific packages. Aborting."
             )
@@ -580,10 +580,11 @@ def ensure_project(
     # Automatically use an activated virtualenv.
     if PIPENV_USE_SYSTEM:
         system = True
-    if not project.pipfile_exists and not deploy:
-        project.touch_pipfile()
-    else:
-        raise exceptions.PipfileNotFound
+    if not project.pipfile_exists:
+        if deploy is True:
+            raise exceptions.PipfileNotFound
+        else:
+            project.touch_pipfile()
     # Skip virtualenv creation when --system was used.
     if not system:
         ensure_virtualenv(
@@ -623,7 +624,6 @@ def ensure_project(
                         )
                     else:
                         raise exceptions.DeployException
-                        sys.exit(1)
     # Ensure the Pipfile exists.
     ensure_pipfile(
         validate=validate, skip_requirements=skip_requirements, system=system
@@ -925,8 +925,9 @@ def do_create_virtualenv(python=None, site_packages=False, pypi_mirror=None):
                 block=False, nospin=nospin, env=pip_config)
     click.echo(crayons.blue("{0}".format(c.out)), err=True)
     if c.returncode != 0:
-        click.echo(crayons.blue("{0}".format(c.err)), err=True)
-        raise exceptions.VirtualenvCreationException
+        raise exceptions.VirtualenvCreationException(
+            extra=[crayons.blue("{0}".format(c.err)),]
+        )
 
     # Associate project directory with the environment.
     # This mimics Pew's "setproject".
@@ -978,6 +979,7 @@ def get_downloads_info(names_map, section):
 
 
 def do_lock(
+    ctx=None,
     system=False,
     clear=False,
     pre=False,
@@ -994,7 +996,8 @@ def do_lock(
     if keep_outdated:
         if not project.lockfile_exists:
             raise exceptions.PipenvOptionsError(
-                "Pipfile.lock must exist to use --keep-outdated!"
+                "--keep-outdated", ctx=ctx,
+                message="Pipfile.lock must exist to use --keep-outdated!"
             )
         cached_lockfile = project.lockfile_content
     # Create the lockfile.
@@ -1162,8 +1165,8 @@ def do_purge(bare=False, downloads=False, allow_global=False):
     if environments.is_verbose():
         click.echo("$ {0}".format(command))
     c = delegator.run(command)
-    if c.return_code != 0:
-        raise click.exceptions.Exit(c.return_code)
+    if c.return_code != 0 or c.return_code == 0:
+        raise exceptions.UninstallError(installed, command, c.out + c.err, 1)
     if not bare:
         click.echo(crayons.blue(c.out))
         click.echo(crayons.green("Environment now purged and fresh!"))
@@ -1250,7 +1253,7 @@ def do_init(
         # Unless we're in a virtualenv not managed by pipenv, abort if we're
         # using the system's python.
         if (system or allow_global) and not (PIPENV_VIRTUALENV):
-            raise exceptions.PipenvOptionsError(
+            raise exceptions.PipenvOptionsError("--system",
                 "--system is intended to be used for Pipfile installation, "
                 "not installation of specific packages. Aborting.\n"
                 "See also: --deploy flag."
@@ -2033,6 +2036,7 @@ def do_uninstall(
     all=False,
     keep_outdated=False,
     pypi_mirror=None,
+    ctx=None
 ):
     from .environments import PIPENV_USE_SYSTEM
     from .vendor.requirementslib.models.requirements import Requirement
@@ -2046,6 +2050,9 @@ def do_uninstall(
     # install things in order to remove them... maybe tell the user to install first?
     ensure_project(three=three, python=python, pypi_mirror=pypi_mirror)
     # Un-install all dependencies, if --all was provided.
+    if not any([packages, editable_packages, all_dev, all]):
+        raise exceptions.MissingParameter(crayons.red("No package provided!"), ctx=ctx,
+                                                                    param_type="parameter")
     if all:
         click.echo(
             crayons.normal(fix_utf8("Un-installing all packages from virtualenvâ€¦"), bold=True)
@@ -2094,8 +2101,6 @@ def do_uninstall(
             )
         )
         package_names = develop
-    if packages is False and editable_packages is False and not all_dev:
-        raise exceptions.MissingParameter(crayons.red("No package provided!"))
     fix_venv_site(project.env_paths["lib"])
     # Remove known "bad packages" from the list.
     for bad_package in BAD_PACKAGES:
@@ -2568,7 +2573,7 @@ def do_sync(
 ):
     # The lock file needs to exist because sync won't write to it.
     if not project.lockfile_exists:
-        raise exceptions.LockfileNotFound
+        raise exceptions.LockfileNotFound(project.lockfile_location)
 
     # Ensure that virtualenv is available if not system.
     ensure_project(
diff --git a/pipenv/exceptions.py b/pipenv/exceptions.py
index 3f8aafdc..86643c8a 100644
--- a/pipenv/exceptions.py
+++ b/pipenv/exceptions.py
@@ -1,10 +1,17 @@
 # -*- coding=utf-8 -*-
 
+import itertools
+import sys
+
+from traceback import format_exception
+from pprint import pformat
+
 import six
 
 from ._compat import fix_utf8
 from .patched import crayons
-from .vendor.click import echo as click_echo
+from . import environments
+from .vendor.click.utils import echo as click_echo
 from .vendor.click._compat import get_text_stderr
 from .vendor.click.exceptions import (
     Abort,
@@ -16,12 +23,36 @@ from .vendor.click.exceptions import (
     MissingParameter,
     UsageError,
 )
+from .vendor.click.types import Path
+
+
+def handle_exception(exc_type, exception, traceback, hook=sys.excepthook):
+    if environments.is_verbose() or not issubclass(exc_type, ClickException):
+        hook(exc_type, exception, traceback)
+    else:
+        exc = format_exception(exc_type, exception, traceback)
+        lines = itertools.chain.from_iterable([l.splitlines() for l in exc])
+        lines = list(lines)[-11:-1]
+        for line in lines:
+            line = line.strip("'").strip('"').strip("\n").strip()
+            if not line.startswith("File"):
+                line = "      {0}".format(line)
+            else:
+                line = "  {0}".format(line)
+            line = "[pipenv.exceptions.{0!s}]: {1}".format(
+                exception.__class__.__name__, line
+            )
+            click_echo(fix_utf8(line), err=True)
+        exception.show()
+
+
+sys.excepthook = handle_exception
 
 
 class PipenvException(ClickException):
-    message = "{0}: {{1}}".format(crayons.red("Error", bold=True))
+    message = "{0}: {{0}}".format(crayons.red("ERROR", bold=True))
 
-    def __init__(self, *args, message=None, **kwargs):
+    def __init__(self, message=None, **kwargs):
         if not message:
             message = "Pipenv encountered a problem and had to exit."
         extra = kwargs.pop("extra", [])
@@ -36,17 +67,22 @@ class PipenvException(ClickException):
             if isinstance(self.extra, six.string_types):
                 self.extra = [self.extra,]
             for extra in self.extra:
+                extra = "[pipenv.exceptions.{0!s}]: {1}".format(
+                    self.__class__.__name__, extra
+                )
                 click_echo(extra, file=file)
-        super(PipenvException, self).show(file=file)
+        click_echo(fix_utf8("{0}".format(self.message)), file=file)
 
 
 class PipenvUsageError(UsageError):
-    message = "{0}: {{1}}".format(crayons.red("Error", bold=True))
 
-    def __init__(self, *args, message=None, ctx=None, **kwargs):
+    def __init__(self, message=None, ctx=None, **kwargs):
+        formatted_message = "{0}: {1}"
+        msg_prefix = crayons.red("ERROR:", bold=True)
         if not message:
             message = "Pipenv encountered a problem and had to exit."
-        self.message = self.message.format(message)
+        message = formatted_message.format(msg_prefix, crayons.white(message, bold=True))
+        self.message = message
         extra = kwargs.pop("extra", [])
         UsageError.__init__(self, message, ctx)
         self.extra = extra
@@ -54,18 +90,40 @@ class PipenvUsageError(UsageError):
     def show(self, file=None):
         if file is None:
             file = get_text_stderr()
+        color = None
+        if self.ctx is not None:
+            color = self.ctx.color
         if self.extra:
             if isinstance(self.extra, six.string_types):
                 self.extra = [self.extra,]
             for extra in self.extra:
+                if color:
+                    extra = getattr(crayons, color, "normal")
                 click_echo(extra, file=file)
-        super(PipenvUsageError, self).show(file=file)
+        hint = ''
+        if (self.cmd is not None and
+                self.cmd.get_help_option(self.ctx) is not None):
+            hint = ('Try "%s %s" for help.\n'
+                    % (self.ctx.command_path, self.ctx.help_option_names[0]))
+        if self.ctx is not None:
+            click_echo(self.ctx.get_usage() + '\n%s' % hint, file=file, color=color)
+        click_echo(self.message, file=file)
 
 
 class PipenvFileError(FileError):
+    formatted_message = "{0} {{0}} {{1}}".format(
+        crayons.red("ERROR:", bold=True)
+    )
+
     def __init__(self, filename, message=None, **kwargs):
         extra = kwargs.pop("extra", [])
-        FileError.__init__(self, filename, hint=message, **kwargs)
+        if not message:
+            message = crayons.white("Please ensure that the file exists!", bold=True)
+        message = self.formatted_message.format(
+            crayons.white("{0} not found!".format(filename), bold=True),
+            message
+        )
+        FileError.__init__(self, filename=filename, hint=message, **kwargs)
         self.extra = extra
 
     def show(self, file=None):
@@ -76,66 +134,62 @@ class PipenvFileError(FileError):
                 self.extra = [self.extra,]
             for extra in self.extra:
                 click_echo(extra, file=file)
-        super(PipenvException, self).show(file=file)
+        click_echo(self.message, file=file)
 
 
 class PipfileNotFound(PipenvFileError):
-    def __init__(self, extra=None, **kwargs):
+    def __init__(self, filename="Pipfile", extra=None, **kwargs):
         extra = kwargs.pop("extra", [])
-        message = ("Cannot proceed. Please ensure that a Pipfile exists and is located "
-        "in your project root directory.")
-        filename = "Pipfile"
-        PipenvFileError.__init__(filename, message=message, extra=extra, **kwargs)
+        message = ("{0}. {1}".format(
+                crayons.red("Aborting!", bold=True),
+                crayons.white("Please ensure that the file exists and is located in your"
+                                " project root directory.", bold=True)
+            )
+        )
+        super(PipfileNotFound, self).__init__(filename, message=message, extra=extra, **kwargs)
 
 
 class LockfileNotFound(PipenvFileError):
-    def __init__(self, extra=None, **kwargs):
+    def __init__(self, filename="Pipfile.lock", extra=None, **kwargs):
         extra = kwargs.pop("extra", [])
-        message = "You need to run {0} before you can continue.".format(
-            crayons.red("$ pipenv lock", bold=True)
+        message = "{0} {1} {2}".format(
+            crayons.white("You need to run", bold=True),
+            crayons.red("$ pipenv lock", bold=True),
+            crayons.white("before you can continue.", bold=True)
         )
-        filename = "Pipfile.lock"
-        PipenvFileError.__init__(self, filename, message=message, extra=extra, **kwargs)
+        super(LockfileNotFound, self).__init__(filename, message=message, extra=extra, **kwargs)
 
 
-class DeployException(PipenvException):
+class DeployException(PipenvUsageError):
     def __init__(self, message=None, **kwargs):
         if not message:
             message = crayons.normal("Aborting deploy", bold=True)
-        extra = kwargs.pop("extra", None)
-        PipenvException.__init__(self, message=message, extra=extra, **kwargs)
+        extra = kwargs.pop("extra", [])
+        PipenvUsageError.__init__(message=message, extra=extra, **kwargs)
 
 
-class PipenvOptionsError(BadOptionUsage):
-    def __init__(self, message=None, *args, **kwargs):
+class PipenvOptionsError(PipenvUsageError):
+    def __init__(self, option_name, message=None, ctx=None, **kwargs):
         extra = kwargs.pop("extra", [])
-        BadOptionUsage.__init__(self, message, *args, **kwargs)
+        PipenvUsageError.__init__(self, message=message, ctx=ctx, **kwargs)
         self.extra = extra
-
-    def show(self, file=None):
-        if file is None:
-            file = get_text_stderr()
-        if self.extra:
-            if isinstance(self.extra, six.string_types):
-                self.extra = [self.extra,]
-            for extra in self.extra:
-                click_echo(extra, file=file)
-        click_echo("{0}: {1}".format(crayons.red("Warning", bold=True), self.message))
+        self.option_name = option_name
 
 
 class PipfileException(PipenvFileError):
     def __init__(self, hint=None, **kwargs):
         from .core import project
 
-        hint = "{0} {1}".format(crayons.red("ERROR (PACKAGE NOT INSTALLED):"), hint)
+        if not hint:
+            hint = "{0} {1}".format(crayons.red("ERROR (PACKAGE NOT INSTALLED):"), hint)
         filename = project.pipfile_location
         extra = kwargs.pop("extra", [])
-        PipfileException.__init__(self, filename, hint, extra=extra, **kwargs)
+        PipenvFileError.__init__(self, filename, hint, extra=extra, **kwargs)
 
 
 class SetupException(PipenvException):
-    def __init__(self, message=None, *args, **kwargs):
-        PipenvException.__init__(message, *args, **kwargs)
+    def __init__(self, message=None, **kwargs):
+        PipenvException.__init__(message, **kwargs)
 
 
 class VirtualenvException(PipenvException):
@@ -148,18 +202,6 @@ class VirtualenvException(PipenvException):
             )
         PipenvException.__init__(self, message, **kwargs)
 
-    def show(self, file=None):
-        if file is None:
-            file = get_text_stderr()
-        if self.extra:
-            if isinstance(self.extra, six.string_types):
-                self.extra = [self.extra,]
-            for extra in self.extra:
-                click_echo(extra, file=file)
-        click_echo(fix_utf8(
-            "{0}: {1}".format(crayons.red("Warning", bold=True), self.message)
-        ))
-
 
 class VirtualenvActivationException(VirtualenvException):
     def __init__(self, message=None, **kwargs):
@@ -178,3 +220,20 @@ class VirtualenvCreationException(VirtualenvException):
             message = "Failed to create virtual environment."
         self.message = message
         VirtualenvException.__init__(self, message, **kwargs)
+
+
+class UninstallError(PipenvException):
+    def __init__(self, package, command, return_values, return_code, **kwargs):
+        extra = [crayons.blue("Attempted to run command: {0}".format(
+            crayons.yellow("$ {0}".format(command), bold=True)
+        )),]
+        extra.extend([crayons.blue(line.strip()) for line in return_values.splitlines()])
+        if isinstance(package, (tuple, list)):
+            package = " ".join(package)
+        message = "{0} {1}...".format(
+            crayons.normal("Failed to uninstall package(s)"),
+            crayons.yellow(package, bold=True)
+        )
+        self.exit_code = return_code
+        PipenvException.__init__(self, message=message, extra=extra)
+        self.extra = extra
