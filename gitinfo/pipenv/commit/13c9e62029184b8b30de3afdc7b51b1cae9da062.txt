commit 13c9e62029184b8b30de3afdc7b51b1cae9da062
Author: Dan Ryan <dan@danryan.co>
Date:   Tue Nov 13 00:39:20 2018 -0500

    Update pythonfinder
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/vendor/pythonfinder/models/path.py b/pipenv/vendor/pythonfinder/models/path.py
index 9c96e5f8..523f117a 100644
--- a/pipenv/vendor/pythonfinder/models/path.py
+++ b/pipenv/vendor/pythonfinder/models/path.py
@@ -26,6 +26,7 @@ from ..utils import (
     optional_instance_of,
     path_is_known_executable,
     unnest,
+    normalize_path
 )
 from .python import PythonVersion
 
@@ -128,9 +129,10 @@ class SystemPath(object):
             )
 
     def _get_last_instance(self, path):
-        last_instance = next(iter(
-            (p for p in reversed(self.path_order) if path.lower() in p.lower())),
-            None,
+        paths = [normalize_path(p) for p in reversed(self.path_order)]
+        normalized_target = normalize_path(path)
+        last_instance = next(
+            iter(p for p in paths if normalized_target in p), None
         )
         try:
             path_index = self.path_order.index(last_instance)
@@ -165,6 +167,10 @@ class SystemPath(object):
     def _setup_asdf(self):
         from .asdf import AsdfFinder
         asdf_index = self._get_last_instance(ASDF_DATA_DIR)
+        if not asdf_index:
+            # we are in a virtualenv without global pyenv on the path, so we should
+            # not write pyenv to the path here
+            return
         self.asdf_finder = AsdfFinder.create(root=ASDF_DATA_DIR, ignore_unsupported=True)
         root_paths = [p for p in self.asdf_finder.roots]
         self._slice_in_paths(asdf_index, root_paths)
@@ -174,10 +180,14 @@ class SystemPath(object):
     def _setup_pyenv(self):
         from .pyenv import PyenvFinder
 
-        pyenv_index = self._get_last_instance(PYENV_ROOT)
         self.pyenv_finder = PyenvFinder.create(
             root=PYENV_ROOT, ignore_unsupported=self.ignore_unsupported
         )
+        pyenv_index = self._get_last_instance(PYENV_ROOT)
+        if not pyenv_index:
+            # we are in a virtualenv without global pyenv on the path, so we should
+            # not write pyenv to the path here
+            return
         root_paths = [p for p in self.pyenv_finder.roots]
         self._slice_in_paths(pyenv_index, root_paths)
 
@@ -485,6 +495,9 @@ class PathEntry(BasePath):
                 py_version = PythonVersion.from_path(path=self, name=self.name)
             except InvalidPythonVersion:
                 py_version = None
+            except Exception:
+                if not IGNORE_UNSUPPORTED:
+                    raise
             return py_version
         return
 
diff --git a/pipenv/vendor/pythonfinder/utils.py b/pipenv/vendor/pythonfinder/utils.py
index 881cdb2e..b8714f52 100644
--- a/pipenv/vendor/pythonfinder/utils.py
+++ b/pipenv/vendor/pythonfinder/utils.py
@@ -2,13 +2,9 @@
 from __future__ import absolute_import, print_function
 
 import itertools
-import locale
 import os
-import subprocess
-import sys
 
 from fnmatch import fnmatch
-from itertools import chain
 
 import attr
 import six
@@ -54,7 +50,7 @@ def get_python_version(path):
     version_cmd = [path, "-c", "import sys; print(sys.version.split()[0])"]
     try:
         c = vistir.misc.run(version_cmd, block=True, nospin=True, return_object=True,
-                            combine_stderr=False)
+                                combine_stderr=False)
     except OSError:
         raise InvalidPythonVersion("%s is not a valid python path" % path)
     if not c.out:
@@ -92,7 +88,7 @@ def looks_like_python(name):
 
 @lru_cache(maxsize=1024)
 def path_is_python(path):
-    return path_is_known_executable(path) and looks_like_python(path.name)
+    return path_is_executable(path) and looks_like_python(path.name)
 
 
 @lru_cache(maxsize=1024)
@@ -117,6 +113,10 @@ def _filter_none(k, v):
     return False
 
 
+def normalize_path(path):
+    return os.path.normpath(os.path.normcase(os.path.abspath(path)))
+
+
 @lru_cache(maxsize=1024)
 def filter_pythons(path):
     """Return all valid pythons in a given path"""
