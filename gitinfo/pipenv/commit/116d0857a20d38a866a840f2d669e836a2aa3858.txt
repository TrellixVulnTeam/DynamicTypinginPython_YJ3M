commit 116d0857a20d38a866a840f2d669e836a2aa3858
Author: Dan Ryan <dan@danryan.co>
Date:   Wed Mar 13 20:06:23 2019 -0400

    Fix variable references
    
    Signed-off-by: Dan Ryan <dan@danryan.co>
    
    Fix variable references
    
    Signed-off-by: Dan Ryan <dan@danryan.co>
    
    Fix variable references
    
    Signed-off-by: Dan Ryan <dan@danryan.co>
    
    Switch to powershell for windows virtualenv creation
    
    Signed-off-by: Dan Ryan <dan@danryan.co>
    
    use python version as path
    
    Signed-off-by: Dan Ryan <dan@danryan.co>
    
    use python version as path
    
    Signed-off-by: Dan Ryan <dan@danryan.co>
    
    swap variable name for python exe
    
    Signed-off-by: Dan Ryan <dan@danryan.co>
    
    add fallback for python exe
    
    Signed-off-by: Dan Ryan <dan@danryan.co>
    
    fix python variable setting
    
    Signed-off-by: Dan Ryan <dan@danryan.co>
    
    fix python variable setting
    
    Signed-off-by: Dan Ryan <dan@danryan.co>
    
    Use variable susbstitution for python executable location
    
    Signed-off-by: Dan Ryan <dan@danryan.co>
    
    Use activate script properly
    
    Signed-off-by: Dan Ryan <dan@danryan.co>
    
    Fix floating quote in python version
    
    Signed-off-by: Dan Ryan <dan@danryan.co>
    
    Don't block on safety call in python 2 as it overwrites output for some reason
    
    Signed-off-by: Dan Ryan <dan.ryan@xyleminc.com>
    
    Don't block on pipenv graph either
    
    Signed-off-by: Dan Ryan <dan@danryan.co>
    
    Check command return code instead of calling `block`
    
    Signed-off-by: Dan Ryan <dan@danryan.co>
    
    Don't load json after its already loaded
    
    Signed-off-by: Dan Ryan <dan@danryan.co>
    
    Wait on return code before checking contents
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/.azure-pipelines/jobs/run-tests-windows.yml b/.azure-pipelines/jobs/run-tests-windows.yml
index 161247e3..700732c5 100644
--- a/.azure-pipelines/jobs/run-tests-windows.yml
+++ b/.azure-pipelines/jobs/run-tests-windows.yml
@@ -6,8 +6,10 @@ steps:
     architecture: '$(python.architecture)'
     addToPath: true
 
-- script: |
-    echo '##vso[task.setvariable variable=PIPENV_DEFAULT_PYTHON_VERSION]$(python.version)'
+- powershell: |
+    Write-Host "##vso[task.setvariable variable=PIPENV_DEFAULT_PYTHON_VERSION]$env:PYTHON_VERSION"
+  env:
+    PYTHON_VERSION: $(python.version)
 
 - template: ../steps/install-dependencies.yml
 
diff --git a/.azure-pipelines/steps/create-virtualenv.yml b/.azure-pipelines/steps/create-virtualenv.yml
index 14f0a0e8..3151d15e 100644
--- a/.azure-pipelines/steps/create-virtualenv.yml
+++ b/.azure-pipelines/steps/create-virtualenv.yml
@@ -1,14 +1,30 @@
 steps:
-- powershell: |
-    Write-Host "##vso[task.setvariable variable=PY_EXE]"(py -"$PIPENV_DEFAULT_PYTHON_VERSION" -c 'import sys; print(sys.executable)')
 
-- script: |
-    echo "Python exe: "$(PY_EXE)
-    virtualenv --python=$(PY_EXE) D:\.venv
-    echo "##vso[task.setvariable variable=VIRTUAL_ENV]"$(PY_EXE)
-    python -m pip install -e .[test] --upgrade
-    D:\.venv\Scripts\pip.exe install -e .[test] --upgrade
-    D:\.venv\Scripts\pipenv install --dev
-    D:\.venv\Scripts\pipenv run pip install -e .[test]
-    echo D:\.venv\Scripts\pipenv --venv && echo D:\.venv\Scripts\pipenv --py && echo D:\.venv\Scripts\pipenv run python --version
+- powershell: |
+    $env:PY_EXE=$(python -c "import sys; print(sys.executable)")
+    if (!$env:PY_EXE) {
+        $env:PY_EXE="python"
+    }
+    Write-Host "##vso[task.setvariable variable=PY_EXE]"$env:PY_EXE
+    Write-Host "Found Python: $env:PY_EXE"
+    Invoke-Expression "$env:PY_EXE -m virtualenv D:\.venv"
+    Write-Host "##vso[task.setvariable variable=VIRTUAL_ENV]D:\.venv"
+    Invoke-Expression "D:\.venv\Scripts\activate.ps1"
+    $env:VIRTUAL_ENV="D:\.venv"
+    Write-Host "Installing local package..."
+    Invoke-Expression "$env:PY_EXE -m pip install -e .[test] --upgrade"
+    Write-Host "upgrading local package in virtual env"
+    $venv_scripts = Join-Path -path D:\.venv -childpath Scripts
+    $venv_py = Join-Path -path $venv_scripts -childpath python.exe
+    Invoke-Expression "$venv_py -m pip install -e .[test] --upgrade"
+    Write-Host "Installing pipenv development packages"
+    Invoke-Expression "$venv_py -m pipenv install --dev"
+    Write-Host "Installing local package in pipenv environment"
+    Invoke-Expression "$venv_py -m pipenv run pip install -e .[test]"
+    Write-Host "Printing metadata"
+    Write-Host $(Invoke-Expression "$venv_py -m pipenv --venv")
+    Write-Host $(Invoke-Expression "$venv_py -m pipenv --py")
+    Write-Host $(Invoke-Expression "$venv_py -m pipenv run python --version")
   displayName: Make Virtualenv
+  env:
+    PIPENV_DEFAULT_PYTHON_VERSION: $(PIPENV_DEFAULT_PYTHON_VERSION)
diff --git a/pipenv/__init__.py b/pipenv/__init__.py
index 769ede20..51aafed7 100644
--- a/pipenv/__init__.py
+++ b/pipenv/__init__.py
@@ -27,18 +27,6 @@ warnings.filterwarnings("ignore", category=ResourceWarning)
 warnings.filterwarnings("ignore", category=UserWarning)
 
 
-
-if sys.version_info >= (3, 1) and sys.version_info <= (3, 6):
-    if sys.stdout.isatty() and sys.stderr.isatty():
-        import io
-        import atexit
-        stdout_wrapper = io.TextIOWrapper(sys.stdout.buffer, encoding='utf8')
-        atexit.register(stdout_wrapper.close)
-        stderr_wrapper = io.TextIOWrapper(sys.stderr.buffer, encoding='utf8')
-        atexit.register(stderr_wrapper.close)
-        sys.stdout = stdout_wrapper
-        sys.stderr = stderr_wrapper
-
 os.environ["PIP_DISABLE_PIP_VERSION_CHECK"] = fs_str("1")
 
 # Hack to make things work better.
@@ -48,6 +36,7 @@ try:
 except Exception:
     pass
 
+from .vendor.vistir.misc import get_wrapped_stream
 if sys.version_info >= (3, 0):
     stdout = sys.stdout.buffer
     stderr = sys.stderr.buffer
@@ -55,10 +44,11 @@ else:
     stdout = sys.stdout
     stderr = sys.stderr
 
-from .vendor.vistir.misc import get_wrapped_stream
+
 sys.stderr = get_wrapped_stream(stderr)
 sys.stdout = get_wrapped_stream(stdout)
 
+
 from .cli import cli
 from . import resolver
 
diff --git a/pipenv/core.py b/pipenv/core.py
index 05dba22f..8e2059a6 100644
--- a/pipenv/core.py
+++ b/pipenv/core.py
@@ -2490,6 +2490,7 @@ def do_check(
     args=None,
     pypi_mirror=None,
 ):
+    from .environments import is_verbose
     from pipenv.vendor.vistir.compat import JSONDecodeError
     if not system:
         # Ensure that virtualenv is available.
@@ -2530,18 +2531,25 @@ def do_check(
         python = which("python")
     else:
         python = system_which("python")
-    _cmd = [python,]
+    _cmd = [vistir.compat.Path(python).as_posix()]
     # Run the PEP 508 checker in the virtualenv.
-    cmd = _cmd + [pep508checker_path]
+    cmd = _cmd + [vistir.compat.Path(pep508checker_path).as_posix()]
     c = run_command(cmd)
-    try:
-        results = simplejson.loads(c.out.strip())
-    except JSONDecodeError:
-        click.echo("{0}\n{1}".format(
-            crayons.white(decode_for_output("Failed parsing pep508 results: "), bold=True),
-            c.out.strip()
+    if is_verbose():
+        click.echo("{0}{1}".format(
+            "Running command: ",
+            crayons.white("$ {0}".format(decode_for_output(" ".join(cmd))), bold=True)
         ))
-        sys.exit(1)
+    if c.return_code is not None:
+        try:
+            results = simplejson.loads(c.out.strip())
+        except JSONDecodeError:
+            click.echo("{0}\n{1}\n{2}".format(
+                crayons.white(decode_for_output("Failed parsing pep508 results: "), bold=True),
+                c.out.strip(),
+                c.err.strip()
+            ))
+            sys.exit(1)
     # Load the pipfile.
     p = pipfile.Pipfile.load(project.pipfile_location)
     failed = False
@@ -2629,6 +2637,9 @@ def do_graph(bare=False, json=False, json_tree=False, reverse=False):
         sys.exit(1)
     except RuntimeError:
         pass
+    else:
+        python_path = vistir.compat.Path(python_path).as_posix()
+        pipdeptree_path = vistir.compat.Path(pipdeptree_path).as_posix()
 
     if reverse and json:
         click.echo(
@@ -2685,9 +2696,14 @@ def do_graph(bare=False, json=False, json_tree=False, reverse=False):
     if not bare:
         if json:
             data = []
-            for d in simplejson.loads(c.out):
-                if d["package"]["key"] not in BAD_PACKAGES:
-                    data.append(d)
+            try:
+                parsed = simplejson.loads(c.out.strip())
+            except JSONDecodeError:
+                raise exceptions.JSONParseError(c.out, c.err)
+            else:
+                for d in parsed:
+                    if d["package"]["key"] not in BAD_PACKAGES:
+                        data.append(d)
             click.echo(simplejson.dumps(data, indent=4))
             sys.exit(0)
         elif json_tree:
@@ -2714,6 +2730,7 @@ def do_graph(bare=False, json=False, json_tree=False, reverse=False):
         else:
             for line in c.out.strip().split("\n"):
                 # Ignore bad packages as top level.
+                # TODO: This should probably be a "==" in + line.partition
                 if line.split("==")[0] in BAD_PACKAGES and not reverse:
                     continue
 
diff --git a/pipenv/utils.py b/pipenv/utils.py
index d29e8283..7b43c1f0 100644
--- a/pipenv/utils.py
+++ b/pipenv/utils.py
@@ -141,6 +141,7 @@ def run_command(cmd, *args, **kwargs):
         raise TypeError("Command input must be a string, list or tuple")
     if "env" not in kwargs:
         kwargs["env"] = os.environ.copy()
+    kwargs["env"]["PYTHONIOENCODING"] = "UTF-8"
     try:
         cmd_string = cmd.cmdify()
     except TypeError:
@@ -149,13 +150,13 @@ def run_command(cmd, *args, **kwargs):
     if environments.is_verbose():
         click_echo("Running command: $ {0}".format(cmd_string, err=True))
     c = delegator.run(cmd_string, *args, **kwargs)
-    c.block()
+    return_code = c.return_code
     if environments.is_verbose():
         click_echo("Command output: {0}".format(
             crayons.blue(decode_for_output(c.out))
         ), err=True)
     if not c.ok and catch_exceptions:
-        raise PipenvCmdError(cmd_string, c.out, c.err, c.return_code)
+        raise PipenvCmdError(cmd_string, c.out, c.err, return_code)
     return c
 
 
diff --git a/tests/integration/test_install_basic.py b/tests/integration/test_install_basic.py
index 3521ee5b..1af9b6af 100644
--- a/tests/integration/test_install_basic.py
+++ b/tests/integration/test_install_basic.py
@@ -315,6 +315,7 @@ tablib = "<0.12"
             """.strip()
             f.write(contents)
         c = p.pipenv("install")
+        assert c.ok
         assert "tablib" in p.pipfile["packages"]
         assert "tablib" in p.lockfile["default"]
         assert "six" in p.pipfile["packages"]
