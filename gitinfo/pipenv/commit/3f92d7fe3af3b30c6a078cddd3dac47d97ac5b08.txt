commit 3f92d7fe3af3b30c6a078cddd3dac47d97ac5b08
Author: Dan Ryan <dan@danryan.co>
Date:   Tue Mar 20 23:23:09 2018 -0400

    Resolve editable packages on the local filesystem
    
    - Check for editable pipfile entries when running `pipenv install`
    - Check only when lockfile or virtualenv doesnt exist but pipfile does
    - If so, first install the editable dependencies, then do resolution
    - Required to accommodate `ireq.get_dist()` which we use for setup.py
      parsing
    - Fixes #1782

diff --git a/pipenv/core.py b/pipenv/core.py
index 3cb8b6cd..915fcd07 100644
--- a/pipenv/core.py
+++ b/pipenv/core.py
@@ -1346,7 +1346,7 @@ def do_init(
                     ),
                     err=True,
                 )
-                do_lock(system=system, pre=pre)
+                do_lock(system=system, pre=pre, keep_outdated=keep_outdated)
     # Write out the lockfile if it doesn't exist.
     if not project.lockfile_exists and not skip_lock:
         click.echo(
@@ -1865,8 +1865,20 @@ def do_install(
     # Capture . argument and assign it to nothing
     if package_name == '.':
         package_name = False
+    # Install editable local packages before locking - this givves us acceess to dist-info
+    if project.pipfile_exists and (not project.lockfile_exists or not project.virtualenv_exists):
+        section = project.editable_packages if not dev else project.dev_editable_packages
+        for package in section.keys():
+            converted = convert_deps_to_pip({package: section[package]}, project=project, r=False)
+            if not package_name:
+                if converted:
+                    package_name = converted.pop(0)
+            if converted:
+                more_packages.extend(converted)
+                
     # Allow more than one package to be provided.
     package_names = [package_name] + more_packages
+
     # Install all dependencies, if none was provided.
     if package_name is False:
         # Update project settings with pre preference.
@@ -1899,7 +1911,7 @@ def do_install(
                 ):
                     # Support for VCS dependencies.
                     package_names[i] = convert_deps_to_pip(
-                        {package_name: section[package__name]}, r=False
+                        {package_name: section[package__name]}, project=project, r=False
                     )[
                         0
                     ]
diff --git a/pipenv/project.py b/pipenv/project.py
index 968c371b..628c212a 100644
--- a/pipenv/project.py
+++ b/pipenv/project.py
@@ -28,6 +28,7 @@ from .utils import (
     normalize_drive,
     python_version,
     escape_grouped_arguments,
+    VCS_LIST,
 )
 from .environments import (
     PIPENV_MAX_DEPTH,
@@ -405,6 +406,22 @@ class Project(object):
         with open(self.lockfile_location) as lock:
             return json.load(lock)
 
+    @property
+    def editable_packages(self):
+        packages = {}
+        for k, v in self.parsed_pipfile.get('packages', {}).items():
+            if v.get('editable') and any(v.get(key) for key in('file', 'path') + VCS_LIST):
+                packages.update({k: v})
+        return packages
+
+    @property
+    def editable_dev_packages(self):
+        packages = {}
+        for k, v in self.parsed_pipfile.get('dev-packages', {}).items():
+            if v.get('editable') and any(v.get(key) for key in('file', 'path') + VCS_LIST):
+                packages.update({k: v})
+        return packages
+
     @property
     def vcs_packages(self):
         """Returns a list of VCS packages, for not pip-tools to consume."""
