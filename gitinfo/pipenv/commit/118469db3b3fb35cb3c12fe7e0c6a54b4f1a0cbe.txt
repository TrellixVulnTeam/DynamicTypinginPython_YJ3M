commit 118469db3b3fb35cb3c12fe7e0c6a54b4f1a0cbe
Author: Ethan Fulbright <haplodragon@gmail.com>
Date:   Fri Jul 13 21:15:46 2018 -0500

    Add verbosity int variable, use capsys in test_core
    
    Changed PIPENV_SUPPRESS_NESTED_WARNING to PIPENV_VERBOSITY, an integer
    value that defaults to 0 (verbose).
    Changed test in test_core.py to use capsys to capture standard
    output/error in order to improve compatibility with Python 2.

diff --git a/pipenv/core.py b/pipenv/core.py
index 4ffc69a6..f8006eac 100644
--- a/pipenv/core.py
+++ b/pipenv/core.py
@@ -1615,14 +1615,14 @@ def warn_in_virtualenv():
     from .environments import (
         PIPENV_USE_SYSTEM,
         PIPENV_VIRTUALENV,
-        PIPENV_SUPPRESS_NESTED_WARNING,
+        PIPENV_VERBOSITY,
     )
 
     # Only warn if pipenv isn't already active.
     pipenv_active = os.environ.get("PIPENV_ACTIVE")
     if (
         (PIPENV_USE_SYSTEM or PIPENV_VIRTUALENV)
-        and not (pipenv_active or PIPENV_SUPPRESS_NESTED_WARNING)
+        and not (pipenv_active or PIPENV_VERBOSITY > 0)
     ):
         click.echo(
             "{0}: Pipenv found itself running within a virtual environment, "
@@ -1633,7 +1633,7 @@ def warn_in_virtualenv():
             "warning.".format(
                 crayons.green("Courtesy Notice"),
                 crayons.normal("PIPENV_IGNORE_VIRTUALENVS=1", bold=True),
-                crayons.normal("PIPENV_SUPPRESS_NESTED_WARNING=1", bold=True),
+                crayons.normal("PIPENV_VERBOSITY=1", bold=True),
             ),
             err=True,
         )
diff --git a/pipenv/environments.py b/pipenv/environments.py
index f89fdf92..d76426fe 100644
--- a/pipenv/environments.py
+++ b/pipenv/environments.py
@@ -25,6 +25,12 @@ Some people don't like colors in their terminals, for some reason. Default is
 to show colors.
 """
 
+PIPENV_VERBOSITY = int(os.environ.get("PIPENV_VERBOSITY", "0"))
+"""Verbosity setting for pipenv. Higher values make pipenv less verbose.
+
+Default is 0, for maximum verbosity.
+"""
+
 # Tells Pipenv which Python to default to, when none is provided.
 PIPENV_DEFAULT_PYTHON_VERSION = os.environ.get("PIPENV_DEFAULT_PYTHON_VERSION")
 """Use this Python version when creating new virtual environments by default.
@@ -162,14 +168,6 @@ PIPENV_SHELL_FANCY = bool(os.environ.get("PIPENV_SHELL_FANCY"))
 Default is to use the compatibility shell if possible.
 """
 
-PIPENV_SUPPRESS_NESTED_WARNING = bool(os.environ.get(
-    'PIPENV_SUPPRESS_NESTED_WARNING'))
-"""If set, suppress the courtesy notice regarding nested virtual environments.
-
-Default is to show a courtesy notice when pipenv finds itself running inside
-another virtual environment.
-"""
-
 PIPENV_TIMEOUT = int(os.environ.get("PIPENV_TIMEOUT", 120))
 """Max number of seconds Pipenv will wait for virtualenv creation to complete.
 
diff --git a/tests/unit/test_core.py b/tests/unit/test_core.py
index 460075f4..7b19c085 100644
--- a/tests/unit/test_core.py
+++ b/tests/unit/test_core.py
@@ -1,20 +1,15 @@
-import io
-
 import pytest
 import mock
-from contextlib import redirect_stderr
 
 from pipenv.core import warn_in_virtualenv
 
 
 @mock.patch('pipenv.environments.PIPENV_VIRTUALENV', 'totallyrealenv')
-@mock.patch('pipenv.environments.PIPENV_SUPPRESS_NESTED_WARNING', '1')
+@mock.patch('pipenv.environments.PIPENV_VERBOSITY', 1)
 @pytest.mark.core
-def test_suppress_nested_venv_warning():
-    f = io.StringIO()
+def test_suppress_nested_venv_warning(capsys):
     # Capture the stderr of warn_in_virtualenv to test for the presence of the
     # courtesy notice.
-    with redirect_stderr(f):
-        warn_in_virtualenv()
-    output = f.getvalue()
-    assert 'Courtesy Notice' not in output
+    warn_in_virtualenv()
+    output, err = capsys.readouterr()
+    assert 'Courtesy Notice' not in err
