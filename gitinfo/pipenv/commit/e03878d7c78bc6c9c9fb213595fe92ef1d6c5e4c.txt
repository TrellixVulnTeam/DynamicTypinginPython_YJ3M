commit e03878d7c78bc6c9c9fb213595fe92ef1d6c5e4c
Author: Dan Ryan <dan.ryan@canonical.com>
Date:   Tue Mar 31 13:11:32 2020 -0400

    Add news entry and fix lockfile
    
    - Drop pytest-tap
    - Update azure pipelines config
    - Borrow ramdisk configuration from pip
    - Fix pyinstaller ref for python 2
    - Add 0-minute timeout and add github workflow
    - Add skip for pywin32
    - Scale down to `-n auto` to reduce race conditions on windows
    - Skip pywin32 on python 3.8 as the relevant dependencies aren't
      compatible
    - Use default pip exists action = ignore to work around VCS race
      condition
    - Create local temp directory to avoid crossing drive letter boundary on
      azure during CI runs
    - Monkeypatch click windows console detection to return False in CI
    
    Signed-off-by: Dan Ryan <dan.ryan@canonical.com>

diff --git a/.azure-pipelines/scripts/New-Ramdisk.ps1 b/.azure-pipelines/scripts/New-Ramdisk.ps1
new file mode 100644
index 00000000..fb068e47
--- /dev/null
+++ b/.azure-pipelines/scripts/New-Ramdisk.ps1
@@ -0,0 +1,75 @@
+# Taken from https://github.com/pypa/pip/blob/ceaf75b9ede9a9c25bcee84fe512fa6774889685/.azure-pipelines/scripts/New-RAMDisk.ps1
+[CmdletBinding()]
+param(
+    [Parameter(Mandatory=$true,
+    HelpMessage="Drive letter to use for the RAMDisk")]
+    [String]$drive,
+    [Parameter(HelpMessage="Size to allocate to the RAMDisk")]
+    [UInt64]$size=1GB
+)
+
+$ErrorActionPreference = "Stop"
+Set-StrictMode -Version Latest
+
+Write-Output "Installing FS-iSCSITarget-Server"
+Install-WindowsFeature -Name FS-iSCSITarget-Server
+
+Write-Output "Starting MSiSCSI"
+Start-Service MSiSCSI
+$retry = 10
+do {
+    $service = Get-Service MSiSCSI
+    if ($service.Status -eq "Running") {
+        break;
+    }
+    $retry--
+    Start-Sleep -Milliseconds 500
+} until ($retry -eq 0)
+
+$service = Get-Service MSiSCSI
+if ($service.Status -ne "Running") {
+    throw "MSiSCSI is not running"
+}
+
+Write-Output "Configuring Firewall"
+Get-NetFirewallServiceFilter -Service MSiSCSI | Enable-NetFirewallRule
+
+Write-Output "Configuring RAMDisk"
+# Must use external-facing IP address, otherwise New-IscsiTargetPortal is
+# unable to connect.
+$ip = (
+    Get-NetIPAddress -AddressFamily IPv4 |
+    Where-Object {$_.IPAddress -ne "127.0.0.1"}
+)[0].IPAddress
+if (
+    -not (Get-IscsiServerTarget -ComputerName localhost | Where-Object {$_.TargetName -eq "ramdisks"})
+) {
+    New-IscsiServerTarget `
+        -ComputerName localhost `
+        -TargetName ramdisks `
+        -InitiatorId IPAddress:$ip
+}
+
+$newVirtualDisk = New-IscsiVirtualDisk `
+    -ComputerName localhost `
+    -Path ramdisk:local$drive.vhdx `
+    -Size $size
+Add-IscsiVirtualDiskTargetMapping `
+    -ComputerName localhost `
+    -TargetName ramdisks `
+    -Path ramdisk:local$drive.vhdx
+
+Write-Output "Connecting to iSCSI"
+New-IscsiTargetPortal -TargetPortalAddress $ip
+Get-IscsiTarget | Where-Object {!$_.IsConnected} | Connect-IscsiTarget
+
+Write-Output "Configuring disk"
+$newDisk = Get-IscsiConnection |
+    Get-Disk |
+    Where-Object {$_.SerialNumber -eq $newVirtualDisk.SerialNumber}
+
+Set-Disk -InputObject $newDisk -IsOffline $false
+Initialize-Disk -InputObject $newDisk -PartitionStyle MBR
+New-Partition -InputObject $newDisk -UseMaximumSize -DriveLetter $drive
+
+Format-Volume -DriveLetter $drive -NewFileSystemLabel Temp -FileSystem NTFS
diff --git a/.azure-pipelines/steps/create-virtualenv.yml b/.azure-pipelines/steps/create-virtualenv.yml
index 5f6160c4..3ad3a496 100644
--- a/.azure-pipelines/steps/create-virtualenv.yml
+++ b/.azure-pipelines/steps/create-virtualenv.yml
@@ -8,7 +8,7 @@ steps:
     echo "##vso[task.setvariable variable=PIP_PROCESS_DEPENDENCY_LINKS]1"
   displayName: Set Environment Variables
 
-- ${{ if eq(parameters.vmImage, 'windows-2019') }}:
+- ${{ if eq(parameters.vmImage, 'windows-latest') }}:
   - powershell: |
       pip install certifi
       $env:PYTHON_PATH=$(python -c "import sys; print(sys.executable)")
@@ -18,7 +18,7 @@ steps:
     displayName: Set Python Path
     env:
       PYTHONWARNINGS: 'ignore:DEPRECATION'
-- ${{ if ne(parameters.vmImage, 'windows-2019') }}:
+- ${{ if ne(parameters.vmImage, 'windows-latest') }}:
   - bash: |
       pip install certifi
       PYTHON_PATH=$(python -c 'import sys; print(sys.executable)')
@@ -36,6 +36,7 @@ steps:
     echo "python_version: ${{ parameters.python_version }}"
     git submodule sync
     git submodule update --init --recursive
+    $(PY_EXE) -m pip install "virtualenv<20"
     $(PY_EXE) -m pipenv install --deploy --dev --python="$(PY_EXE)"
   env:
     PIPENV_DEFAULT_PYTHON_VERSION: ${{ parameters.python_version }}
diff --git a/.azure-pipelines/steps/install-dependencies.yml b/.azure-pipelines/steps/install-dependencies.yml
index 79684d4a..4e179d2a 100644
--- a/.azure-pipelines/steps/install-dependencies.yml
+++ b/.azure-pipelines/steps/install-dependencies.yml
@@ -1,5 +1,5 @@
 steps:
-- script: 'python -m pip install --upgrade pip setuptools wheel -e .[dev,tests] --upgrade'
+- script: 'python -m pip install --upgrade pip setuptools wheel --upgrade-strategy=eager && python -m pip install -e . --upgrade'
   displayName: Upgrade Pip & Install Pipenv
   env:
     PYTHONWARNINGS: 'ignore:DEPRECATION'
diff --git a/.azure-pipelines/steps/run-tests-linux.yml b/.azure-pipelines/steps/run-tests-linux.yml
index 185a83b2..a786f873 100644
--- a/.azure-pipelines/steps/run-tests-linux.yml
+++ b/.azure-pipelines/steps/run-tests-linux.yml
@@ -6,9 +6,10 @@ steps:
     # Fix Git SSL errors
     echo "Using pipenv python version: $(PIPENV_DEFAULT_PYTHON_VERSION)"
     git submodule sync && git submodule update --init --recursive
-    pipenv run pytest --junitxml=test-results.xml
+    pipenv run pytest -n 4 --junitxml=test-results.xml
   displayName: Run integration tests
   env:
     PYTHONWARNINGS: ignore:DEPRECATION
     PIPENV_NOSPIN: '1'
     PIPENV_DEFAULT_PYTHON_VERSION: ${{ parameters.python_version }}
+    GIT_SSH_COMMAND: ssh -o StrictHostKeyChecking=accept-new -o CheckHostIP=no
diff --git a/.azure-pipelines/steps/run-tests-windows.yml b/.azure-pipelines/steps/run-tests-windows.yml
index 1730fa14..5fbb6cf1 100644
--- a/.azure-pipelines/steps/run-tests-windows.yml
+++ b/.azure-pipelines/steps/run-tests-windows.yml
@@ -1,21 +1,52 @@
 parameters:
   python_version: ''
+  python_architecture: ''
+  pytest_markers: ''
 
 steps:
-- powershell: |
-    subst T: "$env:TEMP"
-    Write-Host "##vso[task.setvariable variable=TEMP]T:\"
-    Write-Host "##vso[task.setvariable variable=TMP]T:\"
-    Write-Host "##vso[task.setvariable variable=PIPENV_DEFAULT_PYTHON_VERSION]$env:PYTHON_VERSION"
-    Write-Host "##vso[task.setvariable variable=PIPENV_NOSPIN]1"
-  displayName: Fix Temp Variable
-  env:
-    PYTHON_VERSION: ${{ parameters.python_version }}
+  - task: UsePythonVersion@0
+    inputs:
+      versionSpec: ${{ parameters.python_version }}
+      architecture: ${{ parameters.python_architecture }}
+      addToPath: true
+    displayName: Use Python ${{ parameters.python_version }}
 
-- script: |
-    git submodule sync && git submodule update --init --recursive
-    pipenv run pytest -ra --ignore=pipenv\patched --ignore=pipenv\vendor --junitxml=test-results.xml tests
-  displayName: Run integration tests
-  env:
-    PYTHONWARNINGS: 'ignore:DEPRECATION'
-    PIPENV_NOSPIN: '1'
+  - script: |
+      echo '##vso[task.setvariable variable=PIPENV_DEFAULT_PYTHON_VERSION]'${{ parameters.python_version }}
+    env:
+      PYTHON_VERSION: ${{ parameters.python_version }}
+
+  - template: install-dependencies.yml
+
+  - template: create-virtualenv.yml
+    parameters:
+      python_version: ${{ parameters.python_version }}
+
+  - powershell: |
+      subst T: "$env:TEMP"
+      Write-Host "##vso[task.setvariable variable=TEMP]T:\"
+      Write-Host "##vso[task.setvariable variable=TMP]T:\"
+      Write-Host "##vso[task.setvariable variable=PIPENV_DEFAULT_PYTHON_VERSION]$env:PYTHON_VERSION"
+      Write-Host "##vso[task.setvariable variable=PIPENV_NOSPIN]1"
+    displayName: Fix Temp Variable
+    env:
+      PYTHON_VERSION: ${{ parameters.python_version }}
+
+  - powershell: |
+      git submodule sync
+      git submodule update --init --recursive
+      Write-Host "Running Command: pipenv run pytest -n auto -m '${{ parameters.pytest_markers }}' --junitxml=test-results-${{ parameters.test_number }}.xml --timeout 300 tests/"
+      pipenv run pytest -n 4 -vvv -m '${{ parameters.pytest_markers }}' --junitxml=test-results.xml --timeout 300 tests/
+    failOnStderr: false
+    displayName: Run integration tests
+    env:
+      PYTHONWARNINGS: 'ignore:DEPRECATION'
+      PIPENV_NOSPIN: '1'
+      GIT_SSH_COMMAND: ssh -o StrictHostKeyChecking=accept-new -o CheckHostIP=no
+
+  - task: PublishTestResults@2
+    displayName: Publish Test Results
+    inputs:
+      testResultsFiles: '**/test-results-${{ parameters.test_number }}.xml'
+      testRunTitle: 'Python ${{ parameters.python_version }}'
+    condition: succeededOrFailed()
diff --git a/.azure-pipelines/steps/run-tests.yml b/.azure-pipelines/steps/run-tests.yml
index 011cecf2..e33a9100 100644
--- a/.azure-pipelines/steps/run-tests.yml
+++ b/.azure-pipelines/steps/run-tests.yml
@@ -17,18 +17,18 @@ steps:
   parameters:
     python_version: $(python.version)
 
-- ${{ if eq(parameters.vmImage, 'windows-2019') }}:
+- ${{ if eq(parameters.vmImage, 'windows-latest') }}:
   - template: run-tests-windows.yml
     parameters:
       python_version: $(python.version)
-- ${{ if ne(parameters.vmImage, 'windows-2019') }}:
+- ${{ if ne(parameters.vmImage, 'windows-latest') }}:
   - template: run-tests-linux.yml
     parameters:
       python_version: $(python.version)
 
-- task: PublishTestResults@2
-  displayName: Publish Test Results
-  inputs:
-    testResultsFiles: '**/test-results.xml'
-    testRunTitle: 'Python $(python.version)'
-  condition: succeededOrFailed()
+  - task: PublishTestResults@2
+    displayName: Publish Test Results
+    inputs:
+      testResultsFiles: '**/test-results.xml'
+      testRunTitle: 'Python $(python.version)'
+    condition: succeededOrFailed()
diff --git a/.github/workflows/ci.yaml b/.github/workflows/ci.yaml
new file mode 100644
index 00000000..2b8ca39a
--- /dev/null
+++ b/.github/workflows/ci.yaml
@@ -0,0 +1,53 @@
+name: pipenv_ci
+
+on: [push, pull_request]
+
+jobs:
+  build:
+    name: pipenv CI python ${{ matrix.python-version }} on ${{matrix.os}}
+    runs-on: ${{ matrix.os }}
+    strategy:
+      matrix:
+        python-version: [2.7, 3.6, 3.7, 3.8]
+        os: [macOS-latest, ubuntu-latest, windows-latest]
+
+    steps:
+    - uses: actions/checkout@v1
+
+    - name: Set up Python ${{ matrix.python-version }}
+      uses: actions/setup-python@v1
+      with:
+        python-version: ${{ matrix.python-version }}
+
+    - name: Get python path
+      id: python-path
+      run: |
+        echo ::set-output name=path::$(python -c "import sys; print(sys.executable)")
+
+    - name: Install latest pip, setuptools, wheel
+      run: |
+        python -m pip install --upgrade pip setuptools wheel virtualenv --upgrade-strategy=eager
+    - name: Install dependencies
+      env:
+        PIPENV_DEFAULT_PYTHON_VERSION: ${{ matrix.python-version }}
+        PYTHONWARNINGS: ignore:DEPRECATION
+        PYTHONIOENCODING: 'utf-8'
+        GIT_ASK_YESNO: 'false'
+      run: |
+        git submodule sync
+        git submodule update --init --recursive
+        python -m pip install -e . --upgrade
+        python -m pip install "virtualenv<20"
+        pipenv install --deploy --dev --python=${{ steps.python-path.outputs.path }}
+    - name: Run tests
+      env:
+        PIPENV_DEFAULT_PYTHON_VERSION: ${{ matrix.python-version }}
+        PYTHONWARNINGS: ignore:DEPRECATION
+        PIPENV_NOSPIN: '1'
+        CI: '1'
+        GIT_ASK_YESNO: 'false'
+        PYPI_VENDOR_DIR: './tests/pypi/'
+        PYTHONIOENCODING: 'utf-8'
+        GIT_SSH_COMMAND: ssh -o StrictHostKeyChecking=accept-new -o CheckHostIP=no
+      run: |
+        pipenv run pytest -ra -n 4 --timeout 300 tests
diff --git a/Pipfile.lock b/Pipfile.lock
index 69e46128..466065f2 100644
--- a/Pipfile.lock
+++ b/Pipfile.lock
@@ -253,7 +253,7 @@
                 "sha256:c3858660960c984d6ab0ebad691265180da2b43f07e061c0f8dca9ef3cffd328",
                 "sha256:cce6a7477ed816bd2542d03d53db9f0db935dd013b70f336a95c73979289f248"
             ],
-            "markers": "python_version < '3.0'",
+            "markers": "python_version < '3'",
             "version": "==1.1.10"
         },
         "execnet": {
@@ -344,11 +344,11 @@
         },
         "importlib-metadata": {
             "hashes": [
-                "sha256:298a914c82144c6b3b06c568a8973b89ad2176685f43cd1ea9ba968307300fa9",
-                "sha256:dfc83688553a91a786c6c91eeb5f3b1d31f24d71877bbd94ecbf5484e57690a2"
+                "sha256:2a688cbaa90e0cc587f1df48bdc97a6eadccdcd9c35fb3f976a09e3b5016d90f",
+                "sha256:34513a8a0c4962bc66d35b359558fd8a5e10cd472d37aec5f66858addef32c1e"
             ],
             "markers": "python_version < '3.8'",
-            "version": "==1.5.2"
+            "version": "==1.6.0"
         },
         "importlib-resources": {
             "hashes": [
@@ -616,12 +616,12 @@
             "editable": true,
             "path": "./tests/pytest-pypi"
         },
-        "pytest-tap": {
+        "pytest-timeout": {
             "hashes": [
-                "sha256:7de72c291dfc8de944a137366acd1e5877e21029868bd536dedaa8a61af7d2b4",
-                "sha256:87503e7496f9f5505aa603fc6a7b48cf224e9f6be0206958b1ee276810a2fe8a"
+                "sha256:80faa19cd245a42b87a51699d640c00d937c02b749052bfca6bae8bdbe12c48e",
+                "sha256:95ca727d4a1dace6ec5f0534d2940b8417ff8b782f7eef0ea09240bdd94d95c2"
             ],
-            "version": "==3.1"
+            "version": "==1.3.4"
         },
         "pytest-xdist": {
             "hashes": [
@@ -780,13 +780,6 @@
             "markers": "sys_platform == 'linux'",
             "version": "==0.9.0"
         },
-        "tap.py": {
-            "hashes": [
-                "sha256:a598bfaa2e224d71f2e86147c2ef822c18ff2e1b8ef006397e5056b08f92f699",
-                "sha256:f5eeeeebfd64e53d32661752bb4c288589a3babbb96db3f391a4ec29f1359c70"
-            ],
-            "version": "==3.0"
-        },
         "termcolor": {
             "hashes": [
                 "sha256:1d6d69ce66211143803fbc56652b41d73b4a400a2891d7bf7a1cdf4c02de613b"
@@ -810,11 +803,11 @@
         },
         "tqdm": {
             "hashes": [
-                "sha256:0d8b5afb66e23d80433102e9bd8b5c8b65d34c2a2255b2de58d97bd2ea8170fd",
-                "sha256:f35fb121bafa030bd94e74fcfd44f3c2830039a2ddef7fc87ef1c2d205237b24"
+                "sha256:03d2366c64d44c7f61e74c700d9b202d57e9efe355ea5c28814c52bfe7a50b8c",
+                "sha256:be5ddeec77d78ba781ea41eacb2358a77f74cc2407f54b82222d7ee7dc8c8ccf"
             ],
             "markers": "python_version >= '2.6' and python_version not in '3.0, 3.1, 3.2, 3.3'",
-            "version": "==4.43.0"
+            "version": "==4.44.1"
         },
         "twine": {
             "hashes": [
@@ -848,6 +841,7 @@
                 "sha256:fc0fea399acb12edbf8a628ba8d2312f583bdbdb3335635db062fa98cf71fca4",
                 "sha256:fe460b922ec15dd205595c9b5b99e2f056fd98ae8f9f56b888e7a17dc2b757e7"
             ],
+            "markers": "python_version >= '3.4'",
             "version": "==1.4.1"
         },
         "typing": {
@@ -869,19 +863,19 @@
         },
         "virtualenv": {
             "hashes": [
-                "sha256:6f4c2882a943d20714076679f8dcc5675e953d6c29bfea3bc5d08bb6cdea5d36",
-                "sha256:cb1dab893f9e39b3e68d9118c555dcd86526d531c128c3f72e1551939723b72f"
+                "sha256:4e399f48c6b71228bf79f5febd27e3bbb753d9d5905776a86667bc61ab628a25",
+                "sha256:9e81279f4a9d16d1c0654a127c2c86e5bca2073585341691882c1e66e31ef8a5"
             ],
             "markers": "python_version >= '2.7' and python_version not in '3.0, 3.1, 3.2, 3.3'",
-            "version": "==20.0.14"
+            "version": "==20.0.15"
         },
         "virtualenv-clone": {
             "hashes": [
-                "sha256:532f789a5c88adf339506e3ca03326f20ee82fd08ee5586b44dc859b5b4468c5",
-                "sha256:c88ae171a11b087ea2513f260cdac9232461d8e9369bcd1dc143fc399d220557"
+                "sha256:07e74418b7cc64f4fda987bf5bc71ebd59af27a7bc9e8a8ee9fd54b1f2390a27",
+                "sha256:665e48dd54c84b98b71a657acb49104c54e7652bce9c1c4f6c6976ed4c827a29"
             ],
             "markers": "python_version >= '2.7' and python_version not in '3.0, 3.1, 3.2, 3.3'",
-            "version": "==0.5.3"
+            "version": "==0.5.4"
         },
         "wcwidth": {
             "hashes": [
@@ -899,11 +893,11 @@
         },
         "werkzeug": {
             "hashes": [
-                "sha256:169ba8a33788476292d04186ab33b01d6add475033dfc07215e6d219cc077096",
-                "sha256:6dc65cf9091cf750012f56f2cad759fa9e879f511b5ff8685e456b4e3bf90d16"
+                "sha256:2de2a5db0baeae7b2d2664949077c2ac63fbd16d98da0ff71837f7d1dea3fd43",
+                "sha256:6c80b1e5ad3665290ea39320b91e1be1e0d5f60652b964a3070216de83d2e47c"
             ],
             "markers": "python_version >= '2.7' and python_version not in '3.0, 3.1, 3.2, 3.3'",
-            "version": "==1.0.0"
+            "version": "==1.0.1"
         },
         "zipp": {
             "hashes": [
diff --git a/azure-pipelines.yml b/azure-pipelines.yml
index 636ea713..4f682d3b 100644
--- a/azure-pipelines.yml
+++ b/azure-pipelines.yml
@@ -6,10 +6,10 @@ trigger:
     - master
   paths:
     exclude:
-    - docs/
-    - news/
-    - peeps/
-    - examples/
+    - docs/*
+    - news/*
+    - peeps/*
+    - examples/*
     - pytest.ini
     - README.md
     - pipenv/*.txt
@@ -26,7 +26,7 @@ variables:
 jobs:
 - job: TestLinux
   pool:
-    vmImage: 'Ubuntu-16.04'
+    vmImage: 'Ubuntu-latest'
   strategy:
     matrix:
       Python27:
@@ -38,37 +38,41 @@ jobs:
       Python37:
         python.version: '3.7'
         python.architecture: x64
-    maxParallel: 4
+      Python38:
+        python.version: '3.8'
+        python.architecture: x64
+    maxParallel: 8
   steps:
   - template: .azure-pipelines/steps/run-tests.yml
     parameters:
-      vmImage: 'Ubuntu-16.04'
+      vmImage: 'Ubuntu-latest'
 
 - job: TestVendoring
   pool:
-    vmImage: 'Ubuntu-16.04'
+    vmImage: 'Ubuntu-latest'
   variables:
     python.version: '3.7'
     python.architecture: x64
   steps:
     - template: .azure-pipelines/steps/run-vendor-scripts.yml
       parameters:
-        vmImage: 'Ubuntu-16.04'
+        vmImage: 'Ubuntu-latest'
 
 - job: TestPackaging
   pool:
-    vmImage: 'Ubuntu-16.04'
+    vmImage: 'Ubuntu-latest'
   variables:
     python.version: '3.7'
     python.architecture: x64
   steps:
     - template: .azure-pipelines/steps/build-package.yml
       parameters:
-        vmImage: 'Ubuntu-16.04'
+        vmImage: 'Ubuntu-latest'
 
-- job: TestWindows
+- job: TestWindows1
+  timeoutInMinutes: 0
   pool:
-    vmImage: windows-2019
+    vmImage: windows-latest
   strategy:
     matrix:
       Python27:
@@ -80,15 +84,50 @@ jobs:
       Python37:
         python.version: '3.7'
         python.architecture: x64
-    maxParallel: 4
+      Python38:
+        python.version: '3.8'
+        python.architecture: x64
+    maxParallel: 8
   steps:
-  - template: .azure-pipelines/steps/run-tests.yml
-    parameters:
-      vmImage: windows-2019
+    - template: .azure-pipelines/steps/run-tests-windows.yml
+      parameters:
+        vmImage: windows-latest
+        python_version: $(python.version)
+        python_architecture: $(python.architecture)
+        test_number: "1"
+        pytest_markers: "lock or dotvenv or markers or project or utils or patched or core or cli"
+
+- job: TestWindows2
+  timeoutInMinutes: 0
+  pool:
+    vmImage: windows-latest
+  strategy:
+    matrix:
+      Python27:
+        python.version: '2.7'
+        python.architecture: x64
+      Python36:
+        python.version: '3.6'
+        python.architecture: x64
+      Python37:
+        python.version: '3.7'
+        python.architecture: x64
+      Python38:
+        python.version: '3.8'
+        python.architecture: x64
+    maxParallel: 8
+  steps:
+    - template: .azure-pipelines/steps/run-tests-windows.yml
+      parameters:
+        vmImage: windows-latest
+        python_version: $(python.version)
+        python_architecture: $(python.architecture)
+        test_number: "2"
+        pytest_markers: "urls or multiprocessing or local or sequential or run or outdated or basic or code or uninstall"
 
 - job: TestMacOS
   pool:
-    vmImage: macOS-10.13
+    vmImage: macOS-latest
   strategy:
     matrix:
       Python27:
@@ -100,8 +139,11 @@ jobs:
       Python37:
         python.version: '3.7'
         python.architecture: x64
-    maxParallel: 4
+      Python38:
+        python.version: '3.8'
+        python.architecture: x64
+    maxParallel: 8
   steps:
   - template: .azure-pipelines/steps/run-tests.yml
     parameters:
-      vmImage: macOS-10.13
+      vmImage: macOS-latest
diff --git a/news/4169.vendor.rst b/news/4169.vendor.rst
new file mode 100644
index 00000000..d128f56c
--- /dev/null
+++ b/news/4169.vendor.rst
@@ -0,0 +1,50 @@
+Update vendored dependencies and invocations
+
+- Update vendored and patched dependencies
+  - Update patches on `piptools`, `pip`, `pip-shims`, `tomlkit`
+- Fix invocations of dependencies
+  - Fix custom `InstallCommand` instantiation
+  - Update `PackageFinder` usage
+  - Fix `Bool` stringify attempts from `tomlkit`
+
+Updated vendored dependencies:
+  - **attrs**: ``18.2.0`` => ``19.1.0``
+  - **certifi**: ``2018.10.15`` => ``2019.3.9``
+  - **cached_property**: ``1.4.3`` => ``1.5.1``
+  - **cerberus**: ``1.2.0`` => ``1.3.1``
+  - **click**: ``7.0.0`` => ``7.1.1``
+  - **click-completion**: ``0.5.0`` => ``0.5.1``
+  - **colorama**: ``0.3.9`` => ``0.4.3``
+  - **contextlib2**: ``(new)`` => ``0.6.0.post1``
+  - **distlib**: ``0.2.8`` => ``0.2.9``
+  - **funcsigs**: ``(new)`` => ``1.0.2``
+  - **importlib_metadata** ``1.3.0`` => ``1.5.1``
+  - **importlib-resources**:  ``(new)`` => ``1.4.0``
+  - **idna**: ``2.7`` => ``2.9``
+  - **jinja2**: ``2.10.0`` => ``2.11.1``
+  - **markupsafe**: ``1.0`` => ``1.1.1``
+  - **more-itertools**: ``(new)`` => ``5.0.0``
+  - **orderedmultidict**: ``(new)`` => ``1.0``
+  - **packaging**: ``18.0`` => ``19.0``
+  - **parse**: ``1.9.0`` => ``1.15.0``
+  - **pathlib2**: ``2.3.2`` => ``2.3.3``
+  - **pep517**: ``(new)`` => ``0.5.0``
+  - **pexpect**: ``4.6.0`` => ``4.8.0``
+  - **pip-shims**: ``0.2.0`` => ``0.5.1``
+  - **pipdeptree**: ``0.13.0`` => ``0.13.2``
+  - **pyparsing**: ``2.2.2`` => ``2.4.6``
+  - **python-dotenv**: ``0.9.1`` => ``0.10.2``
+  - **pythonfinder**: ``1.1.10`` => ``1.2.2``
+  - **pytoml**: ``(new)`` => ``0.1.20``
+  - **requests**: ``2.20.1`` => ``2.23.0``
+  - **requirementslib**: ``1.3.3`` => ``1.5.4``
+  - **scandir**: ``1.9.0`` => ``1.10.0``
+  - **shellingham**: ``1.2.7`` => ``1.3.2``
+  - **six**: ``1.11.0`` => ``1.14.0``
+  - **tomlkit**: ``0.5.2`` => ``0.5.11``
+  - **urllib3**: ``1.24`` => ``1.25.8``
+  - **vistir**: ``0.3.0`` => ``0.5.0``
+  - **yaspin**: ``0.14.0`` => ``0.14.3``
+  - **zipp**: ``0.6.0``
+
+- Removed vendored dependency **cursor**.
diff --git a/pipenv/core.py b/pipenv/core.py
index 9070dfce..4171ff6f 100644
--- a/pipenv/core.py
+++ b/pipenv/core.py
@@ -1317,7 +1317,8 @@ def get_pip_args(
         "no_use_pep517": [],
         "no_deps": ["--no-deps"],
         "selective_upgrade": [
-            "--upgrade-strategy=only-if-needed", "--exists-action={0}".format(PIP_EXISTS_ACTION or "i")
+            "--upgrade-strategy=only-if-needed",
+            "--exists-action={0}".format(PIP_EXISTS_ACTION or "i")
         ],
         "src_dir": src_dir,
     }
@@ -1329,6 +1330,8 @@ def get_pip_args(
     for key in arg_map.keys():
         if key in locals() and locals().get(key):
             arg_set.extend(arg_map.get(key))
+        elif key == "selective_upgrade" and not locals().get(key):
+            arg_set.append("--exists-action=i")
     return list(vistir.misc.dedup(arg_set))
 
 
diff --git a/pipenv/vendor/vendor.txt b/pipenv/vendor/vendor.txt
index a895e501..dbd78deb 100644
--- a/pipenv/vendor/vendor.txt
+++ b/pipenv/vendor/vendor.txt
@@ -32,7 +32,7 @@ requirementslib==1.5.5
     packaging==20.3
     pyparsing==2.4.6
     git+https://github.com/sarugaku/plette.git@master#egg=plette
-        tomlkit==0.5.8
+        tomlkit==0.5.11
 shellingham==1.3.2
 six==1.14.0
 semver==2.9.0
diff --git a/setup.py b/setup.py
index c3ee913b..015e5586 100644
--- a/setup.py
+++ b/setup.py
@@ -42,7 +42,7 @@ extras = {
         "parver",
         "invoke",
     ],
-    "tests": ["pytest<5.0", "pytest-tap", "pytest-xdist", "flaky", "mock"],
+    "tests": ["pytest<5.0", "pytest-timeout", "pytest-xdist", "flaky", "mock"],
 }
 
 
diff --git a/tasks/vendoring/__init__.py b/tasks/vendoring/__init__.py
index 7b0a11f2..dbcdac0b 100644
--- a/tasks/vendoring/__init__.py
+++ b/tasks/vendoring/__init__.py
@@ -702,6 +702,43 @@ def download_all_licenses(ctx, include_pip=False):
         update_pip_deps(ctx)
 
 
+def unpin_file(contents):
+    requirements = []
+    for line in contents.splitlines():
+        if "==" in line:
+            line, _, _ = line.strip().partition("=")
+        if not line.startswith("#"):
+            requirements.append(line)
+    return "\n".join(sorted(requirements))
+
+
+def unpin_and_copy_requirements(ctx, requirement_file, name="requirements.txt"):
+    with TemporaryDirectory() as tempdir:
+        target = Path(tempdir.name).joinpath("requirements.txt")
+        contents = unpin_file(requirement_file.read_text())
+        target.write_text(contents)
+        env = {"PIPENV_IGNORE_VIRTUALENVS": "1", "PIPENV_NOSPIN": "1", "PIPENV_PYTHON": "2.7"}
+        with ctx.cd(tempdir.name):
+            ctx.run("pipenv install -r {0}".format(target.as_posix()), env=env, hide=True)
+            result = ctx.run("pipenv lock -r", env=env, hide=True).stdout.strip()
+            ctx.run("pipenv --rm", env=env, hide=True)
+            result = list(sorted([line.strip() for line in result.splitlines()[1:]]))
+            new_requirements = requirement_file.parent.joinpath(name)
+            requirement_file.rename(requirement_file.parent.joinpath("{}.bak".format(name)))
+            new_requirements.write_text("\n".join(result))
+    return result
+
+
+@invoke.task
+def unpin_and_update_vendored(ctx, vendor=True, patched=False):
+    if vendor:
+        vendor_file = _get_vendor_dir(ctx) / "vendor.txt"
+        unpin_and_copy_requirements(ctx, vendor_file, name="vendor.txt")
+    if patched:
+        patched_file = _get_patched_dir(ctx) / "patched.txt"
+        unpin_and_copy_requirements(ctx, patched_file, name="patched.txt")
+
+
 @invoke.task(name=TASK_NAME)
 def main(ctx, package=None):
     vendor_dir = _get_vendor_dir(ctx)
diff --git a/tasks/vendoring/patches/vendor/tomlkit-fix.patch b/tasks/vendoring/patches/vendor/tomlkit-fix.patch
index c8101cde..49931e1f 100644
--- a/tasks/vendoring/patches/vendor/tomlkit-fix.patch
+++ b/tasks/vendoring/patches/vendor/tomlkit-fix.patch
@@ -85,7 +85,7 @@ index 8399d0c3..68c47a6d 100644
  
  if PY2:
 +    from pipenv.vendor.backports.enum import Enum
-     from functools32 import lru_cache
+     from pipenv.vendor.backports.functools_lru_cache import lru_cache
  else:
 +    from enum import Enum
      from functools import lru_cache
@@ -148,16 +148,3 @@ index 3b416664..631e9959 100644
  from .api import loads
  from .toml_document import TOMLDocument
  
-diff --git a/pipenv/vendor/tomlkit/toml_char.py b/pipenv/vendor/tomlkit/toml_char.py
-index d649a917..02c55172 100644
---- a/pipenv/vendor/tomlkit/toml_char.py
-+++ b/pipenv/vendor/tomlkit/toml_char.py
-@@ -4,7 +4,7 @@ from ._compat import PY2
- from ._compat import unicode
- 
- if PY2:
--    from functools32 import lru_cache
-+    from pipenv.vendor.backports.functools_lru_cache import lru_cache
- else:
-     from functools import lru_cache
- 
diff --git a/tests/integration/conftest.py b/tests/integration/conftest.py
index 53973d34..b6141162 100644
--- a/tests/integration/conftest.py
+++ b/tests/integration/conftest.py
@@ -69,7 +69,7 @@ def check_github_ssh():
         # GitHub does not provide shell access.' if ssh keys are available and
         # registered with GitHub. Otherwise, the command will fail with
         # return_code=255 and say 'Permission denied (publickey).'
-        c = delegator.run('ssh -T git@github.com')
+        c = delegator.run('ssh -o StrictHostKeyChecking=accept-new -o CheckHostIP=no -T git@github.com', timeout=30)
         res = True if c.return_code == 1 else False
     except KeyboardInterrupt:
         warnings.warn(
@@ -115,6 +115,10 @@ def pytest_runtest_setup(item):
         sys.version_info[:2] <= (2, 7) and os.name == "nt"
     ):
         pytest.skip('must use python > 2.7 on windows')
+    if item.get_closest_marker('skip_py38') is not None and (
+        sys.version_info[:2] == (3, 8)
+    ):
+        pytest.skip('test not applicable on python 3.8')
     if item.get_closest_marker('py3_only') is not None and (
         sys.version_info < (3, 0)
     ):
@@ -151,6 +155,22 @@ def vistir_tmpdir():
     yield Path(temp_path)
 
 
+@pytest.fixture()
+def local_tempdir(request):
+    old_temp = os.environ.get("TEMP", "")
+    new_temp = Path(os.getcwd()).absolute() / "temp"
+    new_temp.mkdir(parents=True, exist_ok=True)
+    os.environ["TEMP"] = new_temp.as_posix()
+
+    def finalize():
+        os.environ['TEMP'] = fs_str(old_temp)
+        _rmtree_func(new_temp.as_posix())
+
+    request.addfinalizer(finalize)
+    with TemporaryDirectory(dir=new_temp.as_posix()) as temp_dir:
+        yield Path(temp_dir.name)
+
+
 @pytest.fixture(name='create_tmpdir')
 def vistir_tmpdir_factory():
 
@@ -183,6 +203,7 @@ def isolate(create_tmpdir):
     os.environ["GIT_CONFIG_NOSYSTEM"] = fs_str("1")
     os.environ["GIT_AUTHOR_NAME"] = fs_str("pipenv")
     os.environ["GIT_AUTHOR_EMAIL"] = fs_str("pipenv@pipenv.org")
+    os.environ["GIT_ASK_YESNO"] = fs_str("false")
     workon_home = create_tmpdir()
     os.environ["WORKON_HOME"] = fs_str(str(workon_home))
     os.environ["HOME"] = home_dir
diff --git a/tests/integration/test_install_basic.py b/tests/integration/test_install_basic.py
index 88efd3ba..9d3247fe 100644
--- a/tests/integration/test_install_basic.py
+++ b/tests/integration/test_install_basic.py
@@ -11,8 +11,9 @@ from pipenv.utils import temp_environ
 from pipenv.vendor import delegator
 
 
-@pytest.mark.install
 @pytest.mark.setup
+@pytest.mark.basic
+@pytest.mark.install
 def test_basic_setup(PipenvInstance):
     with PipenvInstance() as p:
         with PipenvInstance(pipfile=False) as p:
@@ -28,6 +29,7 @@ def test_basic_setup(PipenvInstance):
 
 
 @flaky
+@pytest.mark.basic
 @pytest.mark.install
 @pytest.mark.skip_osx
 def test_basic_install(PipenvInstance):
@@ -43,6 +45,7 @@ def test_basic_install(PipenvInstance):
 
 
 @flaky
+@pytest.mark.basic
 @pytest.mark.install
 def test_mirror_install(PipenvInstance):
     with temp_environ(), PipenvInstance(chdir=True) as p:
@@ -69,6 +72,7 @@ def test_mirror_install(PipenvInstance):
 
 
 @flaky
+@pytest.mark.basic
 @pytest.mark.install
 @pytest.mark.needs_internet
 def test_bad_mirror_install(PipenvInstance):
@@ -111,6 +115,7 @@ def test_basic_dev_install(PipenvInstance):
 
 @flaky
 @pytest.mark.dev
+@pytest.mark.basic
 @pytest.mark.install
 def test_install_without_dev(PipenvInstance):
     """Ensure that running `pipenv install` doesn't install dev packages"""
@@ -137,6 +142,7 @@ tablib = "*"
 
 
 @flaky
+@pytest.mark.basic
 @pytest.mark.install
 def test_install_without_dev_section(PipenvInstance):
     with PipenvInstance() as p:
@@ -157,6 +163,7 @@ six = "*"
 
 
 @flaky
+@pytest.mark.lock
 @pytest.mark.extras
 @pytest.mark.install
 def test_extras_install(PipenvInstance):
@@ -175,6 +182,7 @@ def test_extras_install(PipenvInstance):
 
 @flaky
 @pytest.mark.pin
+@pytest.mark.basic
 @pytest.mark.install
 def test_windows_pinned_pipfile(PipenvInstance):
     with PipenvInstance() as p:
@@ -191,6 +199,7 @@ requests = "==2.19.1"
 
 
 @flaky
+@pytest.mark.basic
 @pytest.mark.install
 @pytest.mark.resolver
 @pytest.mark.backup_resolver
@@ -259,6 +268,7 @@ version = "*"
 
 
 @pytest.mark.bad
+@pytest.mark.basic
 @pytest.mark.install
 def test_bad_packages(PipenvInstance):
     with PipenvInstance() as p:
@@ -266,6 +276,7 @@ def test_bad_packages(PipenvInstance):
         assert c.return_code > 0
 
 
+@pytest.mark.lock
 @pytest.mark.extras
 @pytest.mark.install
 @pytest.mark.requirements
@@ -296,6 +307,7 @@ def test_requirements_to_pipfile(PipenvInstance):
         assert "pysocks" in p.lockfile["default"]
 
 
+@pytest.mark.basic
 @pytest.mark.install
 @pytest.mark.skip_osx
 @pytest.mark.requirements
@@ -335,6 +347,7 @@ def test_clean_on_empty_venv(PipenvInstance):
         assert c.return_code == 0
 
 
+@pytest.mark.basic
 @pytest.mark.install
 def test_install_does_not_extrapolate_environ(PipenvInstance):
     """Ensure environment variables are not expanded in lock file.
@@ -366,6 +379,7 @@ name = 'mockpi'
         assert p.lockfile["_meta"]["sources"][0]["url"] == "${PYPI_URL}/simple"
 
 
+@pytest.mark.basic
 @pytest.mark.editable
 @pytest.mark.badparameter
 @pytest.mark.install
@@ -376,6 +390,7 @@ def test_editable_no_args(PipenvInstance):
         assert "Error: -e option requires an argument" in c.err
 
 
+@pytest.mark.basic
 @pytest.mark.install
 @pytest.mark.virtualenv
 def test_install_venv_project_directory(PipenvInstance):
@@ -400,6 +415,7 @@ def test_install_venv_project_directory(PipenvInstance):
             assert venv_loc.joinpath(".project").exists()
 
 
+@pytest.mark.cli
 @pytest.mark.deploy
 @pytest.mark.system
 def test_system_and_deploy_work(PipenvInstance):
@@ -424,6 +440,7 @@ requests
         assert c.return_code == 0
 
 
+@pytest.mark.basic
 @pytest.mark.install
 def test_install_creates_pipfile(PipenvInstance):
     with PipenvInstance(chdir=True) as p:
@@ -437,6 +454,7 @@ def test_install_creates_pipfile(PipenvInstance):
         assert os.path.isfile(p.pipfile_path)
 
 
+@pytest.mark.basic
 @pytest.mark.install
 def test_install_non_exist_dep(PipenvInstance):
     with PipenvInstance(chdir=True) as p:
@@ -445,6 +463,7 @@ def test_install_non_exist_dep(PipenvInstance):
         assert "dateutil" not in p.pipfile["packages"]
 
 
+@pytest.mark.basic
 @pytest.mark.install
 def test_install_package_with_dots(PipenvInstance):
     with PipenvInstance(chdir=True) as p:
@@ -453,6 +472,7 @@ def test_install_package_with_dots(PipenvInstance):
         assert "backports.html" in p.pipfile["packages"]
 
 
+@pytest.mark.basic
 @pytest.mark.install
 def test_rewrite_outline_table(PipenvInstance):
     with PipenvInstance(chdir=True) as p:
diff --git a/tests/integration/test_install_markers.py b/tests/integration/test_install_markers.py
index de3ba193..80532ddf 100644
--- a/tests/integration/test_install_markers.py
+++ b/tests/integration/test_install_markers.py
@@ -58,8 +58,8 @@ depends-on-marked-package = "*"
 
 
 @flaky
-@pytest.mark.run
 @pytest.mark.alt
+@pytest.mark.markers
 @pytest.mark.install
 def test_specific_package_environment_markers(PipenvInstance):
 
@@ -127,7 +127,7 @@ funcsigs = "*"
 
 
 @flaky
-@pytest.mark.lock
+@pytest.mark.markers
 @pytest.mark.complex
 @pytest.mark.py3_only
 @pytest.mark.lte_py36
diff --git a/tests/integration/test_install_twists.py b/tests/integration/test_install_twists.py
index 4fcbd4c5..90726446 100644
--- a/tests/integration/test_install_twists.py
+++ b/tests/integration/test_install_twists.py
@@ -63,8 +63,8 @@ testpipenv = {path = ".", editable = true, extras = ["dev"]}
         assert "six" in p.lockfile["default"]
 
 
-@pytest.mark.install
 @pytest.mark.local
+@pytest.mark.install
 @pytest.mark.needs_internet
 @flaky
 class TestDirectDependencies(object):
@@ -122,6 +122,7 @@ setup(
 
 
 @pytest.mark.e
+@pytest.mark.local
 @pytest.mark.install
 @pytest.mark.skip(reason="this doesn't work on windows")
 def test_e_dot(PipenvInstance, pip_src_dir):
@@ -135,8 +136,8 @@ def test_e_dot(PipenvInstance, pip_src_dir):
         assert "path" in p.pipfile["dev-packages"][key]
         assert "requests" in p.lockfile["develop"]
 
-
 @pytest.mark.install
+@pytest.mark.multiprocessing
 @flaky
 def test_multiprocess_bug_and_install(PipenvInstance):
     with temp_environ():
@@ -163,8 +164,8 @@ urllib3 = "*"
             assert c.return_code == 0
 
 
-@pytest.mark.sequential
 @pytest.mark.install
+@pytest.mark.sequential
 @flaky
 def test_sequential_mode(PipenvInstance):
 
@@ -189,8 +190,8 @@ pytz = "*"
         assert c.return_code == 0
 
 
-@pytest.mark.install
 @pytest.mark.run
+@pytest.mark.install
 def test_normalize_name_install(PipenvInstance):
     with PipenvInstance() as p:
         with open(p.pipfile_path, "w") as f:
@@ -221,9 +222,10 @@ Requests = "==2.14.0"   # Inline comment
 
 
 @flaky
+@pytest.mark.eggs
 @pytest.mark.files
+@pytest.mark.local
 @pytest.mark.resolver
-@pytest.mark.eggs
 def test_local_package(PipenvInstance, pip_src_dir, testsroot):
     """This test ensures that local packages (directories with a setup.py)
     installed in editable mode have their dependencies resolved as well"""
@@ -248,6 +250,7 @@ def test_local_package(PipenvInstance, pip_src_dir, testsroot):
 
 
 @pytest.mark.files
+@pytest.mark.local
 @flaky
 def test_local_zipfiles(PipenvInstance, testsroot):
     file_name = "requests-2.19.1.tar.gz"
@@ -272,6 +275,7 @@ def test_local_zipfiles(PipenvInstance, testsroot):
         assert "file" in dep or "path" in dep
 
 
+@pytest.mark.local
 @pytest.mark.files
 @flaky
 def test_relative_paths(PipenvInstance, testsroot):
@@ -295,6 +299,7 @@ def test_relative_paths(PipenvInstance, testsroot):
 
 
 @pytest.mark.install
+@pytest.mark.local
 @pytest.mark.local_file
 @flaky
 def test_install_local_file_collision(PipenvInstance):
@@ -310,7 +315,7 @@ def test_install_local_file_collision(PipenvInstance):
         assert target_package in p.lockfile["default"]
 
 
-@pytest.mark.url
+@pytest.mark.urls
 @pytest.mark.install
 def test_install_local_uri_special_character(PipenvInstance, testsroot):
     file_name = "six-1.11.0+mkl-py2.py3-none-any.whl"
@@ -334,9 +339,9 @@ six = {{path = "./artifacts/{}"}}
         assert "six" in p.lockfile["default"]
 
 
+@pytest.mark.run
 @pytest.mark.files
 @pytest.mark.install
-@pytest.mark.run
 def test_multiple_editable_packages_should_not_race(PipenvInstance, testsroot):
     """Test for a race condition that can occur when installing multiple 'editable' packages at
     once, and which causes some of them to not be importable.
diff --git a/tests/integration/test_install_uri.py b/tests/integration/test_install_uri.py
index b71df965..8772df54 100644
--- a/tests/integration/test_install_uri.py
+++ b/tests/integration/test_install_uri.py
@@ -123,6 +123,7 @@ def test_local_vcs_urls_work(PipenvInstance, tmpdir):
 
 @pytest.mark.e
 @pytest.mark.vcs
+@pytest.mark.urls
 @pytest.mark.install
 @pytest.mark.needs_internet
 def test_editable_vcs_install(PipenvInstance_NoPyPI):
@@ -142,7 +143,7 @@ def test_editable_vcs_install(PipenvInstance_NoPyPI):
 
 
 @pytest.mark.vcs
-@pytest.mark.tablib
+@pytest.mark.urls
 @pytest.mark.install
 @pytest.mark.needs_internet
 def test_install_editable_git_tag(PipenvInstance_NoPyPI):
@@ -163,6 +164,7 @@ def test_install_editable_git_tag(PipenvInstance_NoPyPI):
         assert "ref" in p.lockfile["default"]["six"]
 
 
+@pytest.mark.urls
 @pytest.mark.index
 @pytest.mark.install
 @pytest.mark.needs_internet
@@ -191,6 +193,7 @@ six = "*"
 
 
 @pytest.mark.vcs
+@pytest.mark.urls
 @pytest.mark.install
 @pytest.mark.needs_internet
 def test_install_local_vcs_not_in_lockfile(PipenvInstance):
@@ -207,6 +210,7 @@ def test_install_local_vcs_not_in_lockfile(PipenvInstance):
 
 
 @pytest.mark.vcs
+@pytest.mark.urls
 @pytest.mark.install
 @pytest.mark.needs_internet
 def test_get_vcs_refs(PipenvInstance_NoPyPI):
@@ -235,9 +239,11 @@ def test_get_vcs_refs(PipenvInstance_NoPyPI):
 
 
 @pytest.mark.vcs
+@pytest.mark.urls
 @pytest.mark.install
 @pytest.mark.needs_internet
 @pytest.mark.skip_py27_win
+@pytest.mark.skip_py38
 def test_vcs_entry_supersedes_non_vcs(PipenvInstance):
     """See issue #2181 -- non-editable VCS dep was specified, but not showing up
     in the lockfile -- due to not running pip install before locking and not locking
@@ -256,7 +262,7 @@ name = "pypi"
 
 [packages]
 PyUpdater = "*"
-PyInstaller = {{ref = "develop", git = "{0}"}}
+PyInstaller = {{ref = "v3.6", git = "{0}"}}
             """.format(pyinstaller_uri).strip()
             )
         c = p.pipenv("install")
@@ -273,6 +279,7 @@ PyInstaller = {{ref = "develop", git = "{0}"}}
 
 
 @pytest.mark.vcs
+@pytest.mark.urls
 @pytest.mark.install
 @pytest.mark.needs_internet
 def test_vcs_can_use_markers(PipenvInstance):
diff --git a/tests/integration/test_lock.py b/tests/integration/test_lock.py
index 7d207cca..7b81e0be 100644
--- a/tests/integration/test_lock.py
+++ b/tests/integration/test_lock.py
@@ -126,6 +126,7 @@ def test_keep_outdated_doesnt_upgrade_pipfile_pins(PipenvInstance):
         assert p.lockfile["default"]["urllib3"]["version"] == "==1.21.1"
 
 
+@pytest.mark.lock
 def test_keep_outdated_keeps_markers_not_removed(PipenvInstance):
     with PipenvInstance(chdir=True) as p:
         c = p.pipenv("install six click")
@@ -164,10 +165,10 @@ def test_keep_outdated_doesnt_update_satisfied_constraints(PipenvInstance):
 @pytest.mark.lock
 @pytest.mark.complex
 @pytest.mark.needs_internet
-def test_complex_lock_with_vcs_deps(PipenvInstance, pip_src_dir):
+def test_complex_lock_with_vcs_deps(local_tempdir, PipenvInstance, pip_src_dir):
     # This uses the real PyPI since we need Internet to access the Git
     # dependency anyway.
-    with PipenvInstance() as p:
+    with PipenvInstance() as p, local_tempdir:
         with open(p.pipfile_path, 'w') as f:
             contents = """
 [packages]
diff --git a/tests/integration/test_pipenv.py b/tests/integration/test_pipenv.py
index 12ae2348..5e172f8b 100644
--- a/tests/integration/test_pipenv.py
+++ b/tests/integration/test_pipenv.py
@@ -27,7 +27,6 @@ def test_code_import_manual(PipenvInstance):
 
 @pytest.mark.lock
 @pytest.mark.deploy
-@pytest.mark.cli
 def test_deploy_works(PipenvInstance):
 
     with PipenvInstance(chdir=True) as p:
diff --git a/tests/integration/test_sync.py b/tests/integration/test_sync.py
index d085aaf4..1c5b3e96 100644
--- a/tests/integration/test_sync.py
+++ b/tests/integration/test_sync.py
@@ -8,6 +8,7 @@ import pytest
 from pipenv.utils import temp_environ
 
 
+@pytest.mark.lock
 @pytest.mark.sync
 def test_sync_error_without_lockfile(PipenvInstance):
     with PipenvInstance(chdir=True) as p:
diff --git a/tests/integration/test_uninstall.py b/tests/integration/test_uninstall.py
index bc82df8d..c87c702f 100644
--- a/tests/integration/test_uninstall.py
+++ b/tests/integration/test_uninstall.py
@@ -8,7 +8,6 @@ import pytest
 from pipenv.utils import temp_environ
 
 
-@pytest.mark.run
 @pytest.mark.uninstall
 @pytest.mark.install
 def test_uninstall_requests(PipenvInstance):
@@ -32,6 +31,7 @@ def test_uninstall_requests(PipenvInstance):
         assert c.return_code > 0
 
 
+@pytest.mark.uninstall
 def test_uninstall_django(PipenvInstance):
     with PipenvInstance() as p:
         c = p.pipenv("install Django==1.11.13")
@@ -53,9 +53,8 @@ def test_uninstall_django(PipenvInstance):
         assert c.return_code > 0
 
 
-@pytest.mark.run
-@pytest.mark.uninstall
 @pytest.mark.install
+@pytest.mark.uninstall
 def test_mirror_uninstall(PipenvInstance):
     with temp_environ(), PipenvInstance(chdir=True) as p:
 
@@ -94,8 +93,8 @@ def test_mirror_uninstall(PipenvInstance):
 
 
 @pytest.mark.files
-@pytest.mark.uninstall
 @pytest.mark.install
+@pytest.mark.uninstall
 def test_uninstall_all_local_files(PipenvInstance, testsroot):
     file_name = "tablib-0.12.1.tar.gz"
     # Not sure where travis/appveyor run tests from
@@ -114,9 +113,8 @@ def test_uninstall_all_local_files(PipenvInstance, testsroot):
         assert "tablib" in p.pipfile["packages"]
 
 
-@pytest.mark.run
-@pytest.mark.uninstall
 @pytest.mark.install
+@pytest.mark.uninstall
 def test_uninstall_all_dev(PipenvInstance):
     with PipenvInstance() as p:
         c = p.pipenv("install --dev Django==1.11.13 six")
@@ -151,7 +149,6 @@ def test_uninstall_all_dev(PipenvInstance):
 
 
 @pytest.mark.uninstall
-@pytest.mark.run
 def test_normalize_name_uninstall(PipenvInstance):
     with PipenvInstance() as p:
         with open(p.pipfile_path, "w") as f:
diff --git a/tests/integration/test_windows.py b/tests/integration/test_windows.py
index a74be386..7355bbd0 100644
--- a/tests/integration/test_windows.py
+++ b/tests/integration/test_windows.py
@@ -39,6 +39,7 @@ def test_case_changes_windows(PipenvInstance):
 
 
 @pytest.mark.files
+@pytest.mark.local
 def test_local_path_windows(PipenvInstance):
     whl = (
         Path(__file__).parent.parent
@@ -53,6 +54,7 @@ def test_local_path_windows(PipenvInstance):
         assert c.return_code == 0
 
 
+@pytest.mark.local
 @pytest.mark.files
 def test_local_path_windows_forward_slash(PipenvInstance):
     whl = (
diff --git a/tests/unit/test_core.py b/tests/unit/test_core.py
index 61d318c3..eb799850 100644
--- a/tests/unit/test_core.py
+++ b/tests/unit/test_core.py
@@ -20,8 +20,12 @@ def test_suppress_nested_venv_warning(capsys):
 
 
 @pytest.mark.core
-def test_load_dot_env_from_environment_variable_location(capsys):
-    with temp_environ(), TemporaryDirectory(prefix='pipenv-', suffix='') as tempdir:
+def test_load_dot_env_from_environment_variable_location(monkeypatch, capsys):
+    with temp_environ(), monkeypatch.context() as m, TemporaryDirectory(prefix='pipenv-', suffix='') as tempdir:
+        if os.name == "nt":
+            import click
+            is_console = False
+            m.setattr(click._winconsole, "_is_console", lambda x: is_console)
         dotenv_path = os.path.join(tempdir.name, 'test.env')
         key, val = 'SOME_KEY', 'some_value'
         with open(dotenv_path, 'w') as f:
@@ -33,8 +37,12 @@ def test_load_dot_env_from_environment_variable_location(capsys):
 
 
 @pytest.mark.core
-def test_doesnt_load_dot_env_if_disabled(capsys):
-    with temp_environ(), TemporaryDirectory(prefix='pipenv-', suffix='') as tempdir:
+def test_doesnt_load_dot_env_if_disabled(monkeypatch, capsys):
+    with temp_environ(), monkeypatch.context() as m, TemporaryDirectory(prefix='pipenv-', suffix='') as tempdir:
+        if os.name == "nt":
+            import click
+            is_console = False
+            m.setattr(click._winconsole, "_is_console", lambda x: is_console)
         dotenv_path = os.path.join(tempdir.name, 'test.env')
         key, val = 'SOME_KEY', 'some_value'
         with open(dotenv_path, 'w') as f:
@@ -50,8 +58,12 @@ def test_doesnt_load_dot_env_if_disabled(capsys):
 
 
 @pytest.mark.core
-def test_load_dot_env_warns_if_file_doesnt_exist(capsys):
-    with temp_environ(), TemporaryDirectory(prefix='pipenv-', suffix='') as tempdir:
+def test_load_dot_env_warns_if_file_doesnt_exist(monkeypatch, capsys):
+    with temp_environ(), monkeypatch.context() as m, TemporaryDirectory(prefix='pipenv-', suffix='') as tempdir:
+        if os.name == "nt":
+            import click
+            is_console = False
+            m.setattr(click._winconsole, "_is_console", lambda x: is_console)
         dotenv_path = os.path.join(tempdir.name, 'does-not-exist.env')
         with mock.patch('pipenv.environments.PIPENV_DOTENV_LOCATION', dotenv_path):
             load_dot_env()
diff --git a/tests/unit/test_help.py b/tests/unit/test_help.py
index d3755601..5179e4d3 100644
--- a/tests/unit/test_help.py
+++ b/tests/unit/test_help.py
@@ -2,7 +2,11 @@ import os
 import subprocess
 import sys
 
+import pytest
 
+
+@pytest.mark.cli
+@pytest.mark.help
 def test_help():
     output = subprocess.check_output(
         [sys.executable, '-m', 'pipenv.help'],
@@ -11,6 +15,8 @@ def test_help():
     assert output
 
 
+@pytest.mark.cli
+@pytest.mark.help
 def test_count_of_description_pre_option():
     test_command = 'pipenv install --help'
     test_line = '--pre Allow pre-releases.'
diff --git a/tests/unit/test_patched.py b/tests/unit/test_patched.py
index 03e1c039..f3581915 100644
--- a/tests/unit/test_patched.py
+++ b/tests/unit/test_patched.py
@@ -123,6 +123,7 @@ get_extras_links_scenarios = {
 }
 
 
+@pytest.mark.patched
 @pytest.mark.parametrize(
     'scenarios,expected',
     list(get_extras_links_scenarios.values()),
diff --git a/tests/unit/test_utils.py b/tests/unit/test_utils.py
index f9dd08a8..4b9cd75c 100644
--- a/tests/unit/test_utils.py
+++ b/tests/unit/test_utils.py
@@ -425,6 +425,7 @@ twine = "*"
             == expected_args
         )
 
+    @pytest.mark.utils
     def test_invalid_prepare_pip_source_args(self):
         sources = [{}]
         with pytest.raises(PipenvUsageError):
diff --git a/tests/unit/test_utils_windows_executable.py b/tests/unit/test_utils_windows_executable.py
index b74cfbf3..22f20b35 100644
--- a/tests/unit/test_utils_windows_executable.py
+++ b/tests/unit/test_utils_windows_executable.py
@@ -13,6 +13,7 @@ pytestmark = pytest.mark.skipif(
 )
 
 
+@pytest.mark.utils
 @mock.patch('os.path.isfile')
 @mock.patch('pipenv.utils.find_executable')
 def test_find_windows_executable(mocked_find_executable, mocked_isfile):
