commit ee864f813edf67b8cfbd89235ded69171a1c94d5
Author: Kenneth Reitz <me@kennethreitz.org>
Date:   Wed Mar 14 08:31:53 2018 -0400

    commas
    
    Signed-off-by: Kenneth Reitz <me@kennethreitz.org>

diff --git a/docs/advanced.rst b/docs/advanced.rst
index f71c9052..84230240 100644
--- a/docs/advanced.rst
+++ b/docs/advanced.rst
@@ -474,7 +474,7 @@ Libaries are ultimately meant to be used in some **application**. Applications a
 
 To summarize:
 
-- For libraries define **abstract dependencies** via ``install_requires`` in ``setup.py``. The decision of which version exactly to be installed and where to obtain that dependency is not yours to make!
-- For applications define **dependencies and where to get them** in the `Pipfile` and use this file to update the set of **concrete dependencies** in ``Pipfile.lock``. This file defines a specific idempotent environment that is known to work for your project. The ``Pipfile.lock`` is your source of truth. The ``Pipfile`` is a convenience for you to create that lock-file, in that it allows you to still remain somewhat vague about the exact version of a dependency to be used. ``pipenv`` is there to help you define a working conflict-free set of specific dependency-versions, which would otherwise be a very tedious task.
+- For libraries, define **abstract dependencies** via ``install_requires`` in ``setup.py``. The decision of which version exactly to be installed and where to obtain that dependency is not yours to make!
+- For applications, define **dependencies and where to get them** in the `Pipfile` and use this file to update the set of **concrete dependencies** in ``Pipfile.lock``. This file defines a specific idempotent environment that is known to work for your project. The ``Pipfile.lock`` is your source of truth. The ``Pipfile`` is a convenience for you to create that lock-file, in that it allows you to still remain somewhat vague about the exact version of a dependency to be used. ``pipenv`` is there to help you define a working conflict-free set of specific dependency-versions, which would otherwise be a very tedious task.
 - Of course ``Pipfile`` and ``pipenv`` are still useful for library developers, as they can be used to define a development or test environment.
 - And of course there are projects for which the distinction between library and application isn't that clear. In that case, use ``install_requires`` alongside ``pipenv`` and ``Pipfile``.
