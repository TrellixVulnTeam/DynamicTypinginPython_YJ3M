commit 642b6f94b55924ba5e3af199d6fd679e369a9ee6
Author: Dan Ryan <dan@danryan.co>
Date:   Sun Nov 11 17:41:16 2018 -0500

    Update vistir and requirementslib
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/vendor/requirementslib/models/requirements.py b/pipenv/vendor/requirementslib/models/requirements.py
index 51411429..aafb059b 100644
--- a/pipenv/vendor/requirementslib/models/requirements.py
+++ b/pipenv/vendor/requirementslib/models/requirements.py
@@ -1050,9 +1050,9 @@ class Requirement(object):
 
     @classmethod
     def from_line(cls, line):
-        from pip_shims import InstallRequirement
+        import pip_shims.shims
 
-        if isinstance(line, InstallRequirement):
+        if isinstance(line, pip_shims.shims.InstallRequirement):
             line = format_requirement(line)
         hashes = None
         if "--hash=" in line:
@@ -1130,13 +1130,20 @@ class Requirement(object):
         if hashes:
             args["hashes"] = hashes
         cls_inst = cls(**args)
-        if not cls_inst.is_named and (not cls_inst.editable or cls_inst.req._has_hashed_name):
-            old_name = cls_inst.req.req.name or cls_inst.req.name
-            info_dict = cls_inst.run_requires()
-            calced_name = info_dict.get("name", old_name)
-            if old_name != calced_name:
-                cls_inst.req.req.line.replace(old_name, calced_name)
-            cls_inst.name = cls_inst.req.name = calced_name
+        if not cls_inst.is_named and not cls_inst.editable and not name:
+            if cls_inst.is_vcs:
+                ireq = pip_shims.shims.install_req_from_req(cls_inst.as_line(include_hashes=False))
+                info = SetupInfo.from_ireq(ireq)
+                if info is not None:
+                    info_dict = info.as_dict()
+                    cls_inst.req.setup_info = info
+                else:
+                    info_dict = {}
+            else:
+                info_dict = cls_inst.run_requires()
+            found_name = info_dict.get("name", old_name)
+            if old_name != found_name:
+                cls_inst.req.req.line.replace(old_name, found_name)
         return cls_inst
 
     @classmethod
diff --git a/pipenv/vendor/requirementslib/models/setup_info.py b/pipenv/vendor/requirementslib/models/setup_info.py
index 319dd6bd..f2a1ee79 100644
--- a/pipenv/vendor/requirementslib/models/setup_info.py
+++ b/pipenv/vendor/requirementslib/models/setup_info.py
@@ -103,7 +103,7 @@ def iter_egginfos(path, pkg_name=None):
 def find_egginfo(target, pkg_name=None):
     egg_dirs = (egg_dir for egg_dir in iter_egginfos(target, pkg_name=pkg_name))
     if pkg_name:
-        return next(iter(egg_dirs), None)
+        yield next(iter(egg_dirs), None)
     else:
         for egg_dir in egg_dirs:
             yield egg_dir
diff --git a/pipenv/vendor/vistir/compat.py b/pipenv/vendor/vistir/compat.py
index d6e8578a..83226481 100644
--- a/pipenv/vendor/vistir/compat.py
+++ b/pipenv/vendor/vistir/compat.py
@@ -20,6 +20,8 @@ __all__ = [
     "FileNotFoundError",
     "ResourceWarning",
     "FileNotFoundError",
+    "PermissionError",
+    "IsADirectoryError",
     "fs_str",
     "lru_cache",
     "TemporaryDirectory",
@@ -69,8 +71,17 @@ if six.PY2:
             self.errno = errno.ENOENT
             super(FileNotFoundError, self).__init__(*args, **kwargs)
 
+    class PermissionError(OSError):
+        def __init__(self, *args, **kwargs):
+            self.errno = errno.EACCES
+            super(PermissionError, self).__init__(*args, **kwargs)
+
+    class IsADirectoryError(OSError):
+        """The command does not work on directories"""
+        pass
+
 else:
-    from builtins import ResourceWarning, FileNotFoundError
+    from builtins import ResourceWarning, FileNotFoundError, PermissionError, IsADirectoryError
 
 
 if not sys.warnoptions:
@@ -111,9 +122,39 @@ class TemporaryDirectory(object):
         )
 
     @classmethod
-    def _cleanup(cls, name, warn_message):
+    def _rmtree(cls, name):
         from .path import rmtree
-        rmtree(name)
+
+        def onerror(func, path, exc_info):
+            if issubclass(exc_info[0], (PermissionError, OSError)):
+                try:
+                    try:
+                        if path != name:
+                            os.chflags(os.path.dirname(path), 0)
+                        os.chflags(path, 0)
+                    except AttributeError:
+                        pass
+                    if path != name:
+                        os.chmod(os.path.dirname(path), 0o70)
+                    os.chmod(path, 0o700)
+
+                    try:
+                        os.unlink(path)
+                    # PermissionError is raised on FreeBSD for directories
+                    except (IsADirectoryError, PermissionError, OSError):
+                        cls._rmtree(path)
+                except FileNotFoundError:
+                    pass
+            elif issubclass(exc_info[0], FileNotFoundError):
+                pass
+            else:
+                raise
+
+        rmtree(name, onerror=onerror)
+
+    @classmethod
+    def _cleanup(cls, name, warn_message):
+        cls._rmtree(name)
         warnings.warn(warn_message, ResourceWarning)
 
     def __repr__(self):
@@ -126,9 +167,8 @@ class TemporaryDirectory(object):
         self.cleanup()
 
     def cleanup(self):
-        from .path import rmtree
         if self._finalizer.detach():
-            rmtree(self.name)
+            self._rmtree(self.name)
 
 
 def fs_str(string):
diff --git a/pipenv/vendor/vistir/misc.py b/pipenv/vendor/vistir/misc.py
index 7342bc97..a9a127d8 100644
--- a/pipenv/vendor/vistir/misc.py
+++ b/pipenv/vendor/vistir/misc.py
@@ -35,7 +35,9 @@ __all__ = [
     "locale_encoding",
     "chunked",
     "take",
-    "divide"
+    "divide",
+    "getpreferredencoding",
+    "decode_for_output",
 ]
 
 
@@ -492,7 +494,8 @@ except Exception:
 
 
 def getpreferredencoding():
-    import locale
+    """Determine the proper output encoding for terminal rendering"""
+
     # Borrowed from Invoke
     # (see https://github.com/pyinvoke/invoke/blob/93af29d/invoke/runners.py#L881)
     _encoding = locale.getpreferredencoding(False)
diff --git a/pipenv/vendor/vistir/path.py b/pipenv/vendor/vistir/path.py
index b1236884..23ae0252 100644
--- a/pipenv/vendor/vistir/path.py
+++ b/pipenv/vendor/vistir/path.py
@@ -183,10 +183,9 @@ def mkdir_p(newdir, mode=0o777):
     :raises: OSError if a file is encountered along the way
     """
     # http://code.activestate.com/recipes/82465-a-friendly-mkdir/
-    from .misc import to_text
-    from .compat import to_native_string
+    from .misc import to_bytes, to_text
 
-    newdir = to_native_string(newdir)
+    newdir = to_bytes(newdir, "utf-8")
     if os.path.exists(newdir):
         if not os.path.isdir(newdir):
             raise OSError(
@@ -195,9 +194,9 @@ def mkdir_p(newdir, mode=0o777):
                 )
             )
     else:
-        head, tail = os.path.split(newdir)
+        head, tail = os.path.split(to_bytes(newdir, encoding="utf-8"))
         # Make sure the tail doesn't point to the asame place as the head
-        curdir = to_native_string(".")
+        curdir = to_bytes(".", encoding="utf-8")
         tail_and_head_match = (
             os.path.relpath(tail, start=os.path.basename(head)) == curdir
         )
@@ -205,8 +204,9 @@ def mkdir_p(newdir, mode=0o777):
             target = os.path.join(head, tail)
             if os.path.exists(target) and os.path.isfile(target):
                 raise OSError(
-                    "A file with the same name as the desired dir, '{0}', "
-                    "already exists.".format(to_text(newdir, encoding="utf-8"))
+                   "A file with the same name as the desired dir, '{0}', already exists.".format(
+                        to_text(newdir, encoding="utf-8")
+                    )
                 )
             os.makedirs(os.path.join(head, tail), mode)
 
@@ -277,13 +277,13 @@ def set_write_bit(fn):
     if not os.path.isdir(fn):
         return
     for root, dirs, files in os.walk(fn, topdown=False):
-        for dir_ in [os.path.join(root,d) for d in dirs]:
+        for dir_ in [os.path.join(root, d) for d in dirs]:
             set_write_bit(dir_)
         for file_ in [os.path.join(root, f) for f in files]:
             set_write_bit(file_)
 
 
-def rmtree(directory, ignore_errors=False):
+def rmtree(directory, ignore_errors=False, onerror=None):
     """Stand-in for :func:`~shutil.rmtree` with additional error-handling.
 
     This version of `rmtree` handles read-only paths, especially in the case of index
@@ -291,6 +291,7 @@ def rmtree(directory, ignore_errors=False):
 
     :param str directory: The target directory to remove
     :param bool ignore_errors: Whether to ignore errors, defaults to False
+    :param func onerror: An error handling function, defaults to :func:`handle_remove_readonly`
 
     .. note::
 
@@ -300,9 +301,11 @@ def rmtree(directory, ignore_errors=False):
     from .compat import to_native_string
 
     directory = to_native_string(directory)
+    if onerror is None:
+        onerror = handle_remove_readonly
     try:
         shutil.rmtree(
-            directory, ignore_errors=ignore_errors, onerror=handle_remove_readonly
+            directory, ignore_errors=ignore_errors, onerror=onerror
         )
     except (IOError, OSError, FileNotFoundError) as exc:
         # Ignore removal failures where the file doesn't exist
@@ -325,7 +328,9 @@ def handle_remove_readonly(func, path, exc):
     :func:`set_write_bit` on the target path and try again.
     """
     # Check for read-only attribute
-    from .compat import ResourceWarning, FileNotFoundError, to_native_string
+    from .compat import (
+        ResourceWarning, FileNotFoundError, PermissionError, to_native_string
+    )
 
     PERM_ERRORS = (errno.EACCES, errno.EPERM, errno.ENOENT)
     default_warning_message = (
@@ -339,7 +344,7 @@ def handle_remove_readonly(func, path, exc):
         set_write_bit(path)
         try:
             func(path)
-        except (OSError, IOError, FileNotFoundError) as e:
+        except (OSError, IOError, FileNotFoundError, PermissionError) as e:
             if e.errno == errno.ENOENT:
                 return
             elif e.errno in PERM_ERRORS:
@@ -350,7 +355,7 @@ def handle_remove_readonly(func, path, exc):
         set_write_bit(path)
         try:
             func(path)
-        except (OSError, IOError, FileNotFoundError) as e:
+        except (OSError, IOError, FileNotFoundError, PermissionError) as e:
             if e.errno in PERM_ERRORS:
                 warnings.warn(default_warning_message.format(path), ResourceWarning)
                 pass
diff --git a/pipenv/vendor/vistir/spin.py b/pipenv/vendor/vistir/spin.py
index f0d9e77f..09ecbace 100644
--- a/pipenv/vendor/vistir/spin.py
+++ b/pipenv/vendor/vistir/spin.py
@@ -292,6 +292,6 @@ class VistirSpinner(base_obj):
 def create_spinner(*args, **kwargs):
     nospin = kwargs.pop("nospin", False)
     use_yaspin = kwargs.pop("use_yaspin", nospin)
-    if nospin:
+    if nospin or not use_yaspin:
         return DummySpinner(*args, **kwargs)
     return VistirSpinner(*args, **kwargs)
