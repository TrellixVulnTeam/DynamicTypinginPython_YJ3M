commit a826a6a4ccb81013bd6ef6a7430f92b51519b315
Author: Dan Ryan <dan@danryan.co>
Date:   Mon Apr 16 16:52:43 2018 -0400

    Fix vendoring tasks and always use pip9 for now
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/core.py b/pipenv/core.py
index 07a10d4e..a8067088 100644
--- a/pipenv/core.py
+++ b/pipenv/core.py
@@ -117,7 +117,7 @@ if PIPENV_NOSPIN:
 
 def which(command, location=None, allow_global=False):
     if location is None:
-        location = project.virtualenv_location
+        location = project.virtualenv_location or os.environ.get('VIRTUAL_ENV')
     if not allow_global:
         if os.name == 'nt':
             p = find_windows_executable(
@@ -1060,7 +1060,7 @@ def do_lock(
     # TODO: be smarter about this.
     vcs_deps = convert_deps_to_pip(project.vcs_dev_packages, project, r=False)
     pip_freeze = delegator.run(
-        '{0} freeze'.format(escape_grouped_arguments(which_pip()))
+        '{0} -m pipenv.vendor.pip9 freeze'.format(escape_grouped_arguments(which('python', allow_global=system)))
     ).out
     if vcs_deps:
         for line in pip_freeze.strip().split('\n'):
@@ -1125,7 +1125,7 @@ def do_lock(
     # Add refs for VCS installs.
     # TODO: be smarter about this.
     vcs_deps = convert_deps_to_pip(project.vcs_packages, project, r=False)
-    pip_freeze = delegator.run('{0} freeze'.format(which_pip())).out
+    pip_freeze = delegator.run('{0} -m pipenv.vendor.pip9 freeze'.format(which('python', allow_global=system))).out
     for dep in vcs_deps:
         for line in pip_freeze.strip().split('\n'):
             try:
@@ -1228,8 +1228,8 @@ def do_purge(bare=False, downloads=False, allow_global=False, verbose=False):
         return
 
     freeze = delegator.run(
-        '{0} freeze'.format(
-            escape_grouped_arguments(which_pip(allow_global=allow_global))
+        '{0} -m pipenv.vendor.pip9 freeze'.format(
+            escape_grouped_arguments(which('python', allow_global=allow_global))
         )
     ).out
     # Remove comments from the output, if any.
@@ -1260,8 +1260,8 @@ def do_purge(bare=False, downloads=False, allow_global=False, verbose=False):
                 len(actually_installed)
             )
         )
-    command = '{0} uninstall {1} -y'.format(
-        escape_grouped_arguments(which_pip(allow_global=allow_global)),
+    command = '{0} -m pipenv.vendor.pip9 uninstall {1} -y'.format(
+        escape_grouped_arguments(which('python', allow_global=allow_global)),
         ' '.join(actually_installed),
     )
     if verbose:
@@ -1441,11 +1441,11 @@ def pip_install(
             install_reqs += ' --require-hashes'
         no_deps = '--no-deps' if no_deps else ''
         pre = '--pre' if pre else ''
-        quoted_pip = which_pip(allow_global=allow_global)
-        quoted_pip = escape_grouped_arguments(quoted_pip)
+        quoted_python = which('python', allow_global=allow_global)
+        quoted_python = escape_grouped_arguments(quoted_python)
         upgrade_strategy = '--upgrade --upgrade-strategy=only-if-needed' if selective_upgrade else ''
-        pip_command = '{0} install {4} {5} {6} {7} {3} {1} {2} --exists-action w'.format(
-            quoted_pip,
+        pip_command = '{0} -m pipenv.vendor.pip9 install {4} {5} {6} {7} {3} {1} {2} --exists-action w'.format(
+            quoted_python,
             install_reqs,
             ' '.join(prepare_pip_source_args([source])),
             no_deps,
@@ -1468,7 +1468,7 @@ def pip_install(
 def pip_download(package_name):
     for source in project.sources:
         cmd = '{0} download "{1}" -i {2} -d {3}'.format(
-            delegator.run(which_pip()),
+            escape_grouped_arguments(which_pip()),
             package_name,
             source['url'],
             project.download_location,
@@ -2047,8 +2047,8 @@ def do_uninstall(
         sys.exit(1)
     for package_name in package_names:
         click.echo(u'Un-installing {0}â€¦'.format(crayons.green(package_name)))
-        cmd = '"{0}" uninstall {1} -y'.format(
-            which_pip(allow_global=system), package_name
+        cmd = '"{0}" -m pipenv.vendor.pip9 uninstall {1} -y'.format(
+            which('python', allow_global=system), package_name
         )
         if verbose:
             click.echo('$ {0}'.format(cmd))
diff --git a/tasks/vendoring/__init__.py b/tasks/vendoring/__init__.py
index ee7ad4fb..4a77ecde 100644
--- a/tasks/vendoring/__init__.py
+++ b/tasks/vendoring/__init__.py
@@ -7,6 +7,7 @@ from pipenv.utils import TemporaryDirectory, mkdir_p
 import os
 import re
 import shutil
+import sys
 import invoke
 
 TASK_NAME = 'update'
@@ -129,11 +130,12 @@ def update_safety(ctx):
         drop_dir(build_dir)
 
     ctx.run(
-        'pip download -b {0} --no-binary=:all: --no-clean -d {1} safety'.format(
+        'pip download -b {0} --no-binary=:all: --no-clean -d {1} safety pyyaml'.format(
             str(build_dir), str(download_dir.name),
         )
     )
     safety_dir = build_dir / 'safety'
+    yaml_build_dir = build_dir / 'pyyaml'
     main_file = safety_dir / '__main__.py'
     main_content = """
 from safety.cli import cli
@@ -151,6 +153,26 @@ cli(prog_name="safety")
     with ctx.cd(str(safety_dir)):
         ctx.run('pip install --no-compile --no-binary=:all: -t . .')
         safety_dir = safety_dir.absolute()
+        yaml_dir = safety_dir / 'yaml'
+        if yaml_dir.exists():
+            version_choices = ['2', '3']
+            version_choices.remove(str(sys.version_info[0]))
+            mkdir_p(str(yaml_dir / 'yaml{0}'.format(sys.version_info[0])))
+            for fn in yaml_dir.glob('*.py'):
+                fn.rename(str(fn.parent.joinpath('yaml{0}'.format(sys.version_info[0]), fn.name)))
+            if version_choices[0] == '2':
+                lib = yaml_build_dir / 'lib' / 'yaml'
+            else:
+                lib = yaml_build_dir / 'lib3' / 'yaml'
+            shutil.copytree(str(lib.absolute()), str(yaml_dir / 'yaml{0}'.format(version_choices[0])))
+            yaml_init = yaml_dir / '__init__.py'
+            yaml_init.write_text("""
+import sys
+if sys.version_info[0] == 3:
+    from .yaml3 import *
+else:
+    from .yaml2 import *
+            """.strip())
         requests_dir = safety_dir / 'requests'
         cacert = vendor_dir / 'requests' / 'cacert.pem'
         if not cacert.exists():
