commit 19640af9b7b6f2cc8630e09760c7951f797520f4
Author: Dan Ryan <dan@danryan.co>
Date:   Wed Jun 27 21:02:18 2018 -0400

    Update vendored dependencies
    
    - Updated requirementslib
    - Fix local relative path bug whici caused paths to be output as
      absolute (test added to requirementslib)
    - Fix SSH normalization bug (test added to requirementslib)
    - Fixes #2440, #2441
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/news/2453.bugfix b/news/2453.bugfix
new file mode 100644
index 00000000..7ea4d825
--- /dev/null
+++ b/news/2453.bugfix
@@ -0,0 +1,2 @@
+Fixed a bug causing requirements input as relative paths to be output as absolute paths or URIs.
+Fixed a bug affecting normalization of ``git+git@host`` uris.
diff --git a/news/2453.vendor b/news/2453.vendor
new file mode 100644
index 00000000..cea3b695
--- /dev/null
+++ b/news/2453.vendor
@@ -0,0 +1 @@
+Updated ``requirementslib`` to version ``1.0.8``
diff --git a/pipenv/patched/piptools/utils.py b/pipenv/patched/piptools/utils.py
index 12c3991a..66bfafa6 100644
--- a/pipenv/patched/piptools/utils.py
+++ b/pipenv/patched/piptools/utils.py
@@ -11,7 +11,7 @@ from contextlib import contextmanager
 from ._compat import InstallRequirement
 
 from first import first
-from pip._vendor.packaging.specifiers import SpecifierSet, InvalidSpecifier
+from pipenv.patched.notpip._vendor.packaging.specifiers import SpecifierSet, InvalidSpecifier
 from .click import style
 
 
diff --git a/pipenv/vendor/requirementslib/__init__.py b/pipenv/vendor/requirementslib/__init__.py
index ae39b709..88623173 100644
--- a/pipenv/vendor/requirementslib/__init__.py
+++ b/pipenv/vendor/requirementslib/__init__.py
@@ -1,5 +1,5 @@
 # -*- coding=utf-8 -*-
-__version__ = "1.0.7"
+__version__ = "1.0.8"
 
 
 from .exceptions import RequirementError
diff --git a/pipenv/vendor/requirementslib/models/requirements.py b/pipenv/vendor/requirementslib/models/requirements.py
index bd700012..99d8ec76 100644
--- a/pipenv/vendor/requirementslib/models/requirements.py
+++ b/pipenv/vendor/requirementslib/models/requirements.py
@@ -173,6 +173,11 @@ class FileRequirement(BaseRequirement):
         # This is an URI. We'll need to perform some elaborated parsing.
 
         parsed_url = urllib_parse.urlsplit(fixed_line)
+        if added_ssh_scheme and ':' in parsed_url.netloc:
+            original_netloc, original_path_start = parsed_url.netloc.rsplit(':', 1)
+            uri_path = '/{0}{1}'.format(original_path_start, parsed_url.path)
+            original_url = parsed_url
+            parsed_url = original_url._replace(netloc=original_netloc, path=uri_path)
 
         # Split the VCS part out if needed.
         original_scheme = parsed_url.scheme
@@ -203,7 +208,8 @@ class FileRequirement(BaseRequirement):
             )
 
         if added_ssh_scheme:
-            uri = strip_ssh_from_git_uri(uri)
+            original_uri = urllib_parse.urlunsplit(original_url._replace(scheme=original_scheme, fragment=""))
+            uri = strip_ssh_from_git_uri(original_uri)
 
         # Re-attach VCS prefix to build a Link.
         link = Link(
@@ -389,14 +395,14 @@ class FileRequirement(BaseRequirement):
 
     @property
     def line_part(self):
-        if (
+        if self._uri_scheme and self._uri_scheme == 'path':
+            seed = self.path or unquote(self.link.url_without_fragment) or self.uri
+        elif (
             (self._uri_scheme and self._uri_scheme == "file")
-            or (self.link.is_artifact or self.link.is_wheel)
-            and self.link.url
+            or ((self.link.is_artifact or self.link.is_wheel)
+            and self.link.url)
         ):
             seed = unquote(self.link.url_without_fragment) or self.uri
-        else:
-            seed = self.formatted_path or unquote(self.link.url_without_fragment) or self.uri
         # add egg fragments to remote artifacts (valid urls only)
         if not self._has_hashed_name and self.is_remote_artifact:
             seed += "#egg={0}".format(self.name)
@@ -528,8 +534,8 @@ class VCSRequirement(FileRequirement):
             and "git+ssh://" in self.link.url
             and "git+git@" in self.uri
         ):
-            req.line = strip_ssh_from_git_uri(req.line)
-            req.uri = strip_ssh_from_git_uri(req.uri)
+            req.line = self.uri
+            req.uri = self.uri
         if not req.name:
             raise ValueError(
                 "pipenv requires an #egg fragment for version controlled "
diff --git a/pipenv/vendor/requirementslib/models/utils.py b/pipenv/vendor/requirementslib/models/utils.py
index b7daf890..13b2b368 100644
--- a/pipenv/vendor/requirementslib/models/utils.py
+++ b/pipenv/vendor/requirementslib/models/utils.py
@@ -84,7 +84,7 @@ def strip_ssh_from_git_uri(uri):
 
 
 def add_ssh_scheme_to_git_uri(uri):
-    """Cleans VCS uris from pip format"""
+    """Cleans VCS uris from pipenv.patched.notpip format"""
     if isinstance(uri, six.string_types):
         # Add scheme for parsing purposes, this is also what pip does
         if uri.startswith("git+") and "://" not in uri:
diff --git a/pipenv/vendor/shellingham/__init__.py b/pipenv/vendor/shellingham/__init__.py
index 64259c3a..bbdab995 100644
--- a/pipenv/vendor/shellingham/__init__.py
+++ b/pipenv/vendor/shellingham/__init__.py
@@ -2,7 +2,7 @@ import importlib
 import os
 
 
-__version__ = '1.0.0.dev1'
+__version__ = '1.1.0'
 
 
 class ShellDetectionFailure(EnvironmentError):
diff --git a/pipenv/vendor/shellingham/posix/__init__.py b/pipenv/vendor/shellingham/posix/__init__.py
new file mode 100644
index 00000000..ec27b3ac
--- /dev/null
+++ b/pipenv/vendor/shellingham/posix/__init__.py
@@ -0,0 +1,39 @@
+import os
+import platform
+
+from .._consts import SHELL_NAMES
+
+
+def _get_process_mapping():
+    system = platform.system()
+    if system == 'Linux':
+        from . import linux as impl
+    else:
+        from . import _default as impl
+    return impl.get_process_mapping()
+
+
+def get_shell(pid=None, max_depth=6):
+    """Get the shell that the supplied pid or os.getpid() is running in.
+    """
+    pid = str(pid or os.getpid())
+    mapping = _get_process_mapping()
+    login_shell = os.environ.get('SHELL', '')
+    for _ in range(max_depth):
+        try:
+            proc = mapping[pid]
+        except KeyError:
+            break
+        name = os.path.basename(proc.args[0]).lower()
+        if name in SHELL_NAMES:
+            return (name, proc.args[0])
+        elif proc.args[0].startswith('-'):
+            # This is the login shell. Use the SHELL environ if possible
+            # because it provides better information.
+            if login_shell:
+                name = login_shell.lower()
+            else:
+                name = proc.args[0][1:].lower()
+            return (os.path.basename(name), name)
+        pid = proc.ppid     # Go up one level.
+    return None
diff --git a/pipenv/vendor/shellingham/posix/_default.py b/pipenv/vendor/shellingham/posix/_default.py
new file mode 100644
index 00000000..86944276
--- /dev/null
+++ b/pipenv/vendor/shellingham/posix/_default.py
@@ -0,0 +1,27 @@
+import collections
+import shlex
+import subprocess
+import sys
+
+
+Process = collections.namedtuple('Process', 'args pid ppid')
+
+
+def get_process_mapping():
+    """Try to look up the process tree via the output of `ps`.
+    """
+    output = subprocess.check_output([
+        'ps', '-ww', '-o', 'pid=', '-o', 'ppid=', '-o', 'args=',
+    ])
+    if not isinstance(output, str):
+        output = output.decode(sys.stdout.encoding)
+    processes = {}
+    for line in output.split('\n'):
+        try:
+            pid, ppid, args = line.strip().split(None, 2)
+        except ValueError:
+            continue
+        processes[pid] = Process(
+            args=tuple(shlex.split(args)), pid=pid, ppid=ppid,
+        )
+    return processes
diff --git a/pipenv/vendor/shellingham/posix/linux.py b/pipenv/vendor/shellingham/posix/linux.py
new file mode 100644
index 00000000..6db97834
--- /dev/null
+++ b/pipenv/vendor/shellingham/posix/linux.py
@@ -0,0 +1,35 @@
+import os
+import re
+
+from ._default import Process
+
+
+STAT_PPID = 3
+STAT_TTY = 6
+
+
+def get_process_mapping():
+    """Try to look up the process tree via Linux's /proc
+    """
+    with open('/proc/{0}/stat'.format(os.getpid())) as f:
+        self_tty = f.read().split()[STAT_TTY]
+    processes = {}
+    for pid in os.listdir('/proc'):
+        if not pid.isdigit():
+            continue
+        try:
+            stat = '/proc/{0}/stat'.format(pid)
+            cmdline = '/proc/{0}/cmdline'.format(pid)
+            with open(stat) as fstat, open(cmdline) as fcmdline:
+                stat = re.findall(r'\(.+\)|\S+', fstat.read())
+                cmd = fcmdline.read().split('\x00')[:-1]
+            ppid = stat[STAT_PPID]
+            tty = stat[STAT_TTY]
+            if tty == self_tty:
+                processes[pid] = Process(
+                    args=tuple(cmd), pid=pid, ppid=ppid,
+                )
+        except IOError:
+            # Process has disappeared - just ignore it.
+            continue
+    return processes
diff --git a/pipenv/vendor/vendor.txt b/pipenv/vendor/vendor.txt
index e95b5178..8ecc6ba5 100644
--- a/pipenv/vendor/vendor.txt
+++ b/pipenv/vendor/vendor.txt
@@ -34,7 +34,7 @@ requirementslib==1.0.7
     pyparsing==2.2.0
     pytoml==0.1.16
     requirements-parser==0.2.0
-shellingham==1.1.0dev0
+shellingham==1.1.0
 six==1.11.0
 semver==2.8.0
 shutilwhich==1.1.0
diff --git a/tasks/vendoring/__init__.py b/tasks/vendoring/__init__.py
index f0e4eddf..d61d7655 100644
--- a/tasks/vendoring/__init__.py
+++ b/tasks/vendoring/__init__.py
@@ -453,7 +453,7 @@ def license_destination(vendor_dir, libname, filename):
     normal = vendor_dir / libname
     if normal.is_dir():
         return normal / filename
-    lowercase = vendor_dir / libname.lower()
+    lowercase = vendor_dir / libname.lower().replace('-', '_')
     if lowercase.is_dir():
         return lowercase / filename
     rename_dict = LIBRARY_RENAMES if vendor_dir.name != 'patched' else PATCHED_RENAMES
