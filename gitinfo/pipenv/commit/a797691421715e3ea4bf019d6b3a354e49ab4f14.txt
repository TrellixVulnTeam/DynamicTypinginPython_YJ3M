commit a797691421715e3ea4bf019d6b3a354e49ab4f14
Author: Dan Ryan <dan@danryan.co>
Date:   Sat Jun 30 02:48:48 2018 -0400

    Remove old patches to piptools
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/news/2480.vendor b/news/2480.vendor
new file mode 100644
index 00000000..f96f2b30
--- /dev/null
+++ b/news/2480.vendor
@@ -0,0 +1 @@
+Unraveled a lot of old, unnecessary patches to ``pip-tools`` which were causing non-deterministic resolution errors.
diff --git a/pipenv/patched/piptools/resolver.py b/pipenv/patched/piptools/resolver.py
index d047be4c..5bdb5899 100644
--- a/pipenv/patched/piptools/resolver.py
+++ b/pipenv/patched/piptools/resolver.py
@@ -278,26 +278,14 @@ class Resolver(object):
             for dependency in self.repository.get_dependencies(ireq):
                 yield dependency
             return
-        ireq = simplify_markers(ireq)
-        # if ireq.markers:
-        #     for dependency in self.repository.get_dependencies(_iter_ireq):
-        #         # dependency.prepared = False
-        #         yield dependency
 
+        # fix our malformed extras
         if ireq.extras:
             if hasattr(ireq, 'extra'):
                 if ireq.extras:
                     ireq.extras.extend(ireq.extra)
                 else:
                     ireq.extras = ireq.extra
-            # valid_markers = default_environment().keys()
-            # for dependency in self.repository.get_dependencies(_iter_ireq):
-            #     # dependency.prepared = False
-            #     if dependency.markers and not any(dependency.markers._markers[0][0].value.startswith(k) for k in valid_markers):
-            #         dependency.markers = None
-
-            #     yield dependency
-            # return
         elif not is_pinned_requirement(ireq):
             raise TypeError('Expected pinned or editable requirement, got {}'.format(ireq))
 
@@ -314,17 +302,7 @@ class Resolver(object):
         dependency_strings = self.dependency_cache[ireq]
         log.debug('  {:25} requires {}'.format(format_requirement(ireq),
                                                ', '.join(sorted(dependency_strings, key=lambda s: s.lower())) or '-'))
-        from pipenv.patched.notpip._vendor.packaging.markers import InvalidMarker
         for dependency_string in dependency_strings:
-            try:
-                _dependency_string = dependency_string
-                if ';' in dependency_string:
-                    # split off markers and remove any duplicates by comparing against deps
-                    _dependencies = [dep.strip() for dep in dependency_string.split(';')]
-                    _dependency_string = '; '.join([dep for dep in dedup(_dependencies)])
-
-                yield InstallRequirement.from_line(_dependency_string, constraint=ireq.constraint)
-            except InvalidMarker:
                 yield InstallRequirement.from_line(dependency_string, constraint=ireq.constraint)
 
     def reverse_dependencies(self, ireqs):
diff --git a/tasks/vendoring/patches/patched/piptools.patch b/tasks/vendoring/patches/patched/piptools.patch
index 75e1c2fe..750a68a7 100644
--- a/tasks/vendoring/patches/patched/piptools.patch
+++ b/tasks/vendoring/patches/patched/piptools.patch
@@ -406,7 +406,7 @@ index 1c4b943..c922be1 100644
      def allow_all_wheels(self):
          """
 diff --git a/pipenv/patched/piptools/resolver.py b/pipenv/patched/piptools/resolver.py
-index 05ec8fd..5ed36ae 100644
+index 05ec8fd..8952478 100644
 --- a/pipenv/patched/piptools/resolver.py
 +++ b/pipenv/patched/piptools/resolver.py
 @@ -8,13 +8,14 @@ from itertools import chain, count
@@ -473,34 +473,22 @@ index 05ec8fd..5ed36ae 100644
                  # Return a sorted, de-duped tuple of extras
                  combined_ireq.extras = tuple(sorted(set(tuple(combined_ireq.extras) + tuple(ireq.extras))))
              yield combined_ireq
-@@ -273,6 +278,26 @@ class Resolver(object):
+@@ -273,6 +278,14 @@ class Resolver(object):
              for dependency in self.repository.get_dependencies(ireq):
                  yield dependency
              return
-+        ireq = simplify_markers(ireq)
-+        # if ireq.markers:
-+        #     for dependency in self.repository.get_dependencies(_iter_ireq):
-+        #         # dependency.prepared = False
-+        #         yield dependency
 +
++        # fix our malformed extras
 +        if ireq.extras:
 +            if hasattr(ireq, 'extra'):
 +                if ireq.extras:
 +                    ireq.extras.extend(ireq.extra)
 +                else:
 +                    ireq.extras = ireq.extra
-+            # valid_markers = default_environment().keys()
-+            # for dependency in self.repository.get_dependencies(_iter_ireq):
-+            #     # dependency.prepared = False
-+            #     if dependency.markers and not any(dependency.markers._markers[0][0].value.startswith(k) for k in valid_markers):
-+            #         dependency.markers = None
-+
-+            #     yield dependency
-+            # return
          elif not is_pinned_requirement(ireq):
              raise TypeError('Expected pinned or editable requirement, got {}'.format(ireq))
  
-@@ -283,14 +308,24 @@ class Resolver(object):
+@@ -283,14 +296,14 @@ class Resolver(object):
          if ireq not in self.dependency_cache:
              log.debug('  {} not in cache, need to check index'.format(format_requirement(ireq)), fg='yellow')
              dependencies = self.repository.get_dependencies(ireq)
@@ -511,18 +499,8 @@ index 05ec8fd..5ed36ae 100644
          dependency_strings = self.dependency_cache[ireq]
          log.debug('  {:25} requires {}'.format(format_requirement(ireq),
                                                 ', '.join(sorted(dependency_strings, key=lambda s: s.lower())) or '-'))
-+        from pip._vendor.packaging.markers import InvalidMarker
          for dependency_string in dependency_strings:
 -            yield InstallRequirement.from_line(dependency_string, constraint=ireq.constraint)
-+            try:
-+                _dependency_string = dependency_string
-+                if ';' in dependency_string:
-+                    # split off markers and remove any duplicates by comparing against deps
-+                    _dependencies = [dep.strip() for dep in dependency_string.split(';')]
-+                    _dependency_string = '; '.join([dep for dep in dedup(_dependencies)])
-+
-+                yield InstallRequirement.from_line(_dependency_string, constraint=ireq.constraint)
-+            except InvalidMarker:
 +                yield InstallRequirement.from_line(dependency_string, constraint=ireq.constraint)
  
      def reverse_dependencies(self, ireqs):
