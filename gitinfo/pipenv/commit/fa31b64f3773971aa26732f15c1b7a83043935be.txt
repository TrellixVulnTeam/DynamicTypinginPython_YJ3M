commit fa31b64f3773971aa26732f15c1b7a83043935be
Author: Dan Ryan <dan@danryan.co>
Date:   Wed Mar 20 12:15:00 2019 -0400

    Update vendored piptools and pip versions
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/patched/notpip/_internal/resolve.py b/pipenv/patched/notpip/_internal/resolve.py
index 79e4b409..36945de5 100644
--- a/pipenv/patched/notpip/_internal/resolve.py
+++ b/pipenv/patched/notpip/_internal/resolve.py
@@ -20,6 +20,7 @@ from pipenv.patched.notpip._internal.exceptions import (
 )
 from pipenv.patched.notpip._internal.req.constructors import install_req_from_req_string
 from pipenv.patched.notpip._internal.utils.logging import indent_log
+from pipenv.patched.notpip._internal.req.req_install import InstallRequirement
 from pipenv.patched.notpip._internal.utils.misc import dist_in_usersite, ensure_dir
 from pipenv.patched.notpip._internal.utils.packaging import check_dist_requires_python
 from pipenv.patched.notpip._internal.utils.typing import MYPY_CHECK_RUNNING
@@ -378,7 +379,7 @@ class Resolver(object):
                     if hasattr(dist, '_DistInfoDistribution__dep_map'):
                         for req in dist._DistInfoDistribution__dep_map[available]:
                             req = InstallRequirement(
-                                str(req),
+                                req,
                                 req_to_install,
                                 isolated=self.isolated,
                                 wheel_cache=self.wheel_cache,
diff --git a/pipenv/patched/piptools/__main__.py b/pipenv/patched/piptools/__main__.py
index 22bd7879..b08b8494 100644
--- a/pipenv/patched/piptools/__main__.py
+++ b/pipenv/patched/piptools/__main__.py
@@ -12,5 +12,5 @@ cli.add_command(sync.cli, 'sync')
 
 
 # Enable ``python -m piptools ...``.
-if __name__ == '__main__':  # pragma: no cover
+if __name__ == '__main__':  # pragma: no branch
     cli()
diff --git a/pipenv/patched/piptools/_compat/__init__.py b/pipenv/patched/piptools/_compat/__init__.py
index c0ecec8a..19adcbc5 100644
--- a/pipenv/patched/piptools/_compat/__init__.py
+++ b/pipenv/patched/piptools/_compat/__init__.py
@@ -27,8 +27,10 @@ from .pip_compat import (
     cmdoptions,
     get_installed_distributions,
     PyPI,
-    SafeFileCache,
-    InstallationError,
     install_req_from_line,
     install_req_from_editable,
+    stdlib_pkgs,
+    DEV_PKGS,
+    SafeFileCache,
+    InstallationError
 )
diff --git a/pipenv/patched/piptools/_compat/pip_compat.py b/pipenv/patched/piptools/_compat/pip_compat.py
index c466ef04..715144a3 100644
--- a/pipenv/patched/piptools/_compat/pip_compat.py
+++ b/pipenv/patched/piptools/_compat/pip_compat.py
@@ -1,12 +1,11 @@
 # -*- coding=utf-8 -*-
-
 __all__ = [
     "InstallRequirement",
     "parse_requirements",
     "RequirementSet",
-    "user_cache_dir",
     "FAVORITE_HASH",
     "is_file_url",
+    "path_to_url",
     "url_to_path",
     "PackageFinder",
     "FormatControl",
@@ -15,22 +14,25 @@ __all__ = [
     "cmdoptions",
     "get_installed_distributions",
     "PyPI",
-    "SafeFileCache",
-    "InstallationError",
-    "parse_version",
-    "pip_version",
-    "install_req_from_editable",
+    "stdlib_pkgs",
+    "DEV_PKGS",
     "install_req_from_line",
-    "user_cache_dir"
+    "install_req_from_editable",
+    "user_cache_dir",
+    "SafeFileCache",
+    "InstallationError"
 ]
 
-from pipenv.vendor.appdirs import user_cache_dir
+import os
+os.environ["PIP_SHIMS_BASE_MODULE"] = str("pipenv.patched.notpip")
+
 from pip_shims.shims import (
     InstallRequirement,
     parse_requirements,
     RequirementSet,
     FAVORITE_HASH,
     is_file_url,
+    path_to_url,
     url_to_path,
     PackageFinder,
     FormatControl,
@@ -39,17 +41,11 @@ from pip_shims.shims import (
     cmdoptions,
     get_installed_distributions,
     PyPI,
+    stdlib_pkgs,
+    DEV_PKGS,
+    install_req_from_line,
+    install_req_from_editable,
+    USER_CACHE_DIR as user_cache_dir,
     SafeFileCache,
-    InstallationError,
-    parse_version,
-    pip_version,
+    InstallationError
 )
-
-# pip 18.1 has refactored InstallRequirement constructors use by pip-tools.
-if parse_version(pip_version) < parse_version('18.1'):
-    install_req_from_line = InstallRequirement.from_line
-    install_req_from_editable = InstallRequirement.from_editable
-else:
-    from pip_shims.shims import (
-        install_req_from_editable, install_req_from_line
-    )
diff --git a/pipenv/patched/piptools/locations.py b/pipenv/patched/piptools/locations.py
index 0d460f64..9fcea0af 100644
--- a/pipenv/patched/piptools/locations.py
+++ b/pipenv/patched/piptools/locations.py
@@ -5,7 +5,11 @@ from .click import secho
 from ._compat import user_cache_dir
 
 # The user_cache_dir helper comes straight from pipenv.patched.notpip itself
-CACHE_DIR = user_cache_dir('pip-tools')
+try:
+    from pipenv.environments import PIPENV_CACHE_DIR
+    CACHE_DIR = PIPENV_CACHE_DIR
+except ImportError:
+    CACHE_DIR = user_cache_dir('pipenv')
 
 # NOTE
 # We used to store the cache dir under ~/.pip-tools, which is not the
diff --git a/pipenv/patched/piptools/logging.py b/pipenv/patched/piptools/logging.py
index 98f05287..f0bd1784 100644
--- a/pipenv/patched/piptools/logging.py
+++ b/pipenv/patched/piptools/logging.py
@@ -8,18 +8,19 @@ from . import click
 
 
 class LogContext(object):
-    def __init__(self, verbose=False):
-        self.verbose = verbose
+    def __init__(self, verbosity=0):
+        self.verbosity = verbosity
 
     def log(self, *args, **kwargs):
         click.secho(*args, **kwargs)
 
     def debug(self, *args, **kwargs):
-        if self.verbose:
+        if self.verbosity >= 1:
             self.log(*args, **kwargs)
 
     def info(self, *args, **kwargs):
-        self.log(*args, **kwargs)
+        if self.verbosity >= 0:
+            self.log(*args, **kwargs)
 
     def warning(self, *args, **kwargs):
         kwargs.setdefault('fg', 'yellow')
diff --git a/pipenv/patched/piptools/pip.py b/pipenv/patched/piptools/pip.py
new file mode 100644
index 00000000..0419a8ab
--- /dev/null
+++ b/pipenv/patched/piptools/pip.py
@@ -0,0 +1,30 @@
+import optparse
+
+from ._compat import Command, cmdoptions
+
+
+class PipCommand(Command):
+    name = 'PipCommand'
+
+
+def get_pip_command():
+    # Use pip's parser for pip.conf management and defaults.
+    # General options (find_links, index_url, extra_index_url, trusted_host,
+    # and pre) are defered to pip.
+    pip_command = PipCommand()
+    pip_command.parser.add_option(cmdoptions.no_binary())
+    pip_command.parser.add_option(cmdoptions.only_binary())
+    index_opts = cmdoptions.make_option_group(
+        cmdoptions.index_group,
+        pip_command.parser,
+    )
+    pip_command.parser.insert_option_group(0, index_opts)
+    pip_command.parser.add_option(optparse.Option('--pre', action='store_true', default=False))
+
+    return pip_command
+
+
+pip_command = get_pip_command()
+
+# Get default values of the pip's options (including options from pipenv.patched.notpip.conf).
+pip_defaults = pip_command.parser.get_default_values()
diff --git a/pipenv/patched/piptools/repositories/local.py b/pipenv/patched/piptools/repositories/local.py
index 480ad1ed..36bafdb9 100644
--- a/pipenv/patched/piptools/repositories/local.py
+++ b/pipenv/patched/piptools/repositories/local.py
@@ -56,7 +56,8 @@ class LocalRequirementsRepository(BaseRepository):
         if existing_pin and ireq_satisfied_by_existing_pin(ireq, existing_pin):
             project, version, _ = as_tuple(existing_pin)
             return make_install_requirement(
-                project, version, ireq.extras, constraint=ireq.constraint, markers=ireq.markers
+                project, version, ireq.extras, constraint=ireq.constraint,
+                markers=ireq.markers
             )
         else:
             return self.repository.find_best_match(ireq, prereleases)
diff --git a/pipenv/patched/piptools/repositories/pypi.py b/pipenv/patched/piptools/repositories/pypi.py
index 2a0743a3..dff7cb88 100644
--- a/pipenv/patched/piptools/repositories/pypi.py
+++ b/pipenv/patched/piptools/repositories/pypi.py
@@ -1,12 +1,23 @@
 # coding: utf-8
 from __future__ import (absolute_import, division, print_function,
                         unicode_literals)
+
 import copy
 import hashlib
 import os
 from contextlib import contextmanager
 from shutil import rmtree
 
+import pkg_resources
+
+from packaging.requirements import Requirement
+from packaging.specifiers import SpecifierSet, Specifier
+
+os.environ["PIP_SHIMS_BASE_MODULE"] = str("pipenv.patched.notpip")
+from pip_shims.shims import VcsSupport, WheelCache, InstallationError, pip_version
+from pip_shims.shims import Resolver as PipResolver
+
+
 from .._compat import (
     is_file_url,
     url_to_path,
@@ -19,18 +30,11 @@ from .._compat import (
     InstallRequirement,
     SafeFileCache
 )
-os.environ["PIP_SHIMS_BASE_MODULE"] = str("pipenv.patched.notpip")
-from pip_shims.shims import do_import, VcsSupport, WheelCache
-from packaging.requirements import Requirement
-from packaging.specifiers import SpecifierSet, Specifier
-InstallationError = do_import(("exceptions.InstallationError", "7.0", "9999"))
-from pipenv.patched.notpip._internal.resolve import Resolver as PipResolver
 
-
-from pipenv.environments import PIPENV_CACHE_DIR as CACHE_DIR
+from ..cache import CACHE_DIR
 from ..exceptions import NoCandidateFound
 from ..utils import (fs_str, is_pinned_requirement, lookup_table, dedup,
-                        make_install_requirement, clean_requires_python)
+                     make_install_requirement, clean_requires_python)
 from .base import BaseRepository
 
 try:
@@ -89,23 +93,29 @@ class PyPIRepository(BaseRepository):
     config), but any other PyPI mirror can be used if index_urls is
     changed/configured on the Finder.
     """
-    def __init__(self, pip_options, session, use_json=False):
+    def __init__(self, pip_options, session, build_isolation=False, use_json=False):
         self.session = session
-        self.use_json = use_json
         self.pip_options = pip_options
+        self.build_isolation = build_isolation
+        self.use_json = use_json
 
         index_urls = [pip_options.index_url] + pip_options.extra_index_urls
         if pip_options.no_index:
             index_urls = []
 
-        self.finder = PackageFinder(
-            find_links=pip_options.find_links,
-            index_urls=index_urls,
-            trusted_hosts=pip_options.trusted_hosts,
-            allow_all_prereleases=pip_options.pre,
-            process_dependency_links=pip_options.process_dependency_links,
-            session=self.session,
-        )
+        finder_kwargs = {
+            "find_links": pip_options.find_links,
+            "index_urls": index_urls,
+            "trusted_hosts": pip_options.trusted_hosts,
+            "allow_all_prereleases": pip_options.pre,
+            "session": self.session,
+        }
+
+        # pip 19.0 has removed process_dependency_links from the PackageFinder constructor
+        if pkg_resources.parse_version(pip_version) < pkg_resources.parse_version('19.0'):
+            finder_kwargs["process_dependency_links"] = pip_options.process_dependency_links
+
+        self.finder = PackageFinder(**finder_kwargs)
 
         # Caches
         # stores project_name => InstallationCandidate mappings for all
@@ -165,7 +175,7 @@ class PyPIRepository(BaseRepository):
         candidates_by_version = lookup_table(all_candidates, key=lambda c: c.version, unique=True)
         try:
             matching_versions = ireq.specifier.filter((candidate.version for candidate in all_candidates),
-                                                  prereleases=prereleases)
+                                                      prereleases=prereleases)
         except TypeError:
             matching_versions = [candidate.version for candidate in all_candidates]
 
@@ -177,8 +187,22 @@ class PyPIRepository(BaseRepository):
 
         # Turn the candidate into a pinned InstallRequirement
         return make_install_requirement(
-            best_candidate.project, best_candidate.version, ireq.extras, ireq.markers,  constraint=ireq.constraint
-         )
+            best_candidate.project, best_candidate.version, ireq.extras, ireq.markers, constraint=ireq.constraint
+        )
+
+    def get_dependencies(self, ireq):
+        json_results = set()
+
+        if self.use_json:
+            try:
+                json_results = self.get_json_dependencies(ireq)
+            except TypeError:
+                json_results = set()
+
+        legacy_results = self.get_legacy_dependencies(ireq)
+        json_results.update(legacy_results)
+
+        return json_results
 
     def get_json_dependencies(self, ireq):
 
@@ -222,31 +246,13 @@ class PyPIRepository(BaseRepository):
         except Exception:
             return set()
 
-    def get_dependencies(self, ireq):
-        json_results = set()
-
-        if self.use_json:
-            try:
-                json_results = self.get_json_dependencies(ireq)
-            except TypeError:
-                json_results = set()
-
-        legacy_results = self.get_legacy_dependencies(ireq)
-        json_results.update(legacy_results)
-
-        return json_results
-
-    def resolve_reqs(self, download_dir, ireq, wheel_cache, setup_requires={}, dist=None):
+    def resolve_reqs(self, download_dir, ireq, wheel_cache):
         results = None
-        setup_requires = {}
-        dist = None
-        ireq.isolated = False
-        ireq._wheel_cache = wheel_cache
-
         try:
             from pipenv.patched.notpip._internal.operations.prepare import RequirementPreparer
+            from pipenv.patched.notpip._internal.resolve import Resolver as PipResolver
         except ImportError:
-                # Pip 9 and below
+            # Pip 9 and below
             reqset = RequirementSet(
                 self.build_dir,
                 self.source_dir,
@@ -266,20 +272,20 @@ class PyPIRepository(BaseRepository):
                 'download_dir': download_dir,
                 'wheel_download_dir': self._wheel_download_dir,
                 'progress_bar': 'off',
-                'build_isolation': False
+                'build_isolation': self.build_isolation,
             }
             resolver_kwargs = {
                 'finder': self.finder,
                 'session': self.session,
                 'upgrade_strategy': "to-satisfy-only",
-                'force_reinstall': True,
+                'force_reinstall': False,
                 'ignore_dependencies': False,
                 'ignore_requires_python': True,
                 'ignore_installed': True,
+                'ignore_compatibility': False,
                 'isolated': False,
                 'wheel_cache': wheel_cache,
-                'use_user_site': False,
-                'ignore_compatibility': False
+                'use_user_site': False
             }
             resolver = None
             preparer = None
@@ -302,94 +308,6 @@ class PyPIRepository(BaseRepository):
                 cleanup_fn()
             except OSError:
                 pass
-
-        if ireq.editable and (not ireq.source_dir or not os.path.exists(ireq.source_dir)):
-            if ireq.editable:
-                self._source_dir = TemporaryDirectory(fs_str("source"))
-                ireq.ensure_has_source_dir(self.source_dir)
-
-        if ireq.editable and (ireq.source_dir and os.path.exists(ireq.source_dir)):
-            # Collect setup_requires info from local eggs.
-            # Do this after we call the preparer on these reqs to make sure their
-            # egg info has been created
-            from pipenv.utils import chdir
-            with chdir(ireq.setup_py_dir):
-                try:
-                    from setuptools.dist import distutils
-                    dist = distutils.core.run_setup(ireq.setup_py)
-                except InstallationError:
-                    ireq.run_egg_info()
-                except (TypeError, ValueError, AttributeError):
-                    pass
-                if not dist:
-                    try:
-                        dist = ireq.get_dist()
-                    except (ImportError, ValueError, TypeError, AttributeError):
-                        pass
-        if ireq.editable and dist:
-            setup_requires = getattr(dist, "extras_require", None)
-            if not setup_requires:
-                setup_requires = {"setup_requires": getattr(dist, "setup_requires", None)}
-            if not getattr(ireq, 'req', None):
-                try:
-                    ireq.req = dist.as_requirement() if dist else None
-                except (ValueError, TypeError) as e:
-                    pass
-
-            # Convert setup_requires dict into a somewhat usable form.
-            if setup_requires:
-                for section in setup_requires:
-                    python_version = section
-                    not_python = not (section.startswith('[') and ':' in section)
-
-                    # This is for cleaning up :extras: formatted markers
-                    # by adding them to the results of the resolver
-                    # since any such extra would have been returned as a result anyway
-                    for value in setup_requires[section]:
-                        # This is a marker.
-                        if value.startswith('[') and ':' in value:
-                            python_version = value[1:-1]
-                            not_python = False
-                        # Strip out other extras.
-                        if value.startswith('[') and ':' not in value:
-                            not_python = True
-
-                        if ':' not in value:
-                            try:
-                                if not not_python:
-                                    results.add(InstallRequirement.from_line("{0}{1}".format(value, python_version).replace(':', ';')))
-                            # Anything could go wrong here -- can't be too careful.
-                            except Exception:
-                                pass
-
-            # this section properly creates 'python_version' markers for cross-python
-            # virtualenv creation and for multi-python compatibility.
-            requires_python = reqset.requires_python if hasattr(reqset, 'requires_python') else resolver.requires_python
-            if requires_python:
-                marker_str = ''
-                # This corrects a logic error from the previous code which said that if
-                # we Encountered any 'requires_python' attributes, basically only create a
-                # single result no matter how many we resolved.  This should fix
-                # a majority of the remaining non-deterministic resolution issues.
-                if any(requires_python.startswith(op) for op in Specifier._operators.keys()):
-                    # We are checking first if we have  leading specifier operator
-                    # if not, we can assume we should be doing a == comparison
-                    specifierset = SpecifierSet(requires_python)
-                    # for multiple specifiers, the correct way to represent that in
-                    # a specifierset is `Requirement('fakepkg; python_version<"3.0,>=2.6"')`
-                    from passa.internals.specifiers import cleanup_pyspecs
-                    marker_str = str(Marker(" and ".join(dedup([
-                        "python_version {0[0]} '{0[1]}'".format(spec)
-                        for spec in cleanup_pyspecs(specifierset)
-                    ]))))
-                # The best way to add markers to a requirement is to make a separate requirement
-                # with only markers on it, and then to transfer the object istelf
-                marker_to_add = Requirement('fakepkg; {0}'.format(marker_str)).marker
-                if ireq in results:
-                    results.remove(ireq)
-                print(marker_to_add)
-                ireq.req.marker = marker_to_add
-
         results = set(results) if results else set()
         return results, ireq
 
@@ -408,7 +326,6 @@ class PyPIRepository(BaseRepository):
                 # If a download_dir is passed, pip will  unnecessarely
                 # archive the entire source directory
                 download_dir = None
-
             elif ireq.link and not ireq.link.is_artifact:
                 # No download_dir for VCS sources.  This also works around pip
                 # using git-checkout-index, which gets rid of the .git dir.
@@ -457,20 +374,14 @@ class PyPIRepository(BaseRepository):
         # We need to get all of the candidates that match our current version
         # pin, these will represent all of the files that could possibly
         # satisfy this constraint.
-        ### Modification -- this is much more efficient....
-        ### modification again -- still more efficient
         matching_candidates = (
             c for c in clean_requires_python(self.find_all_candidates(ireq.name))
             if c.version in ireq.specifier
         )
-        # candidates_by_version = lookup_table(all_candidates, key=lambda c: c.version)
-        # matching_versions = list(
-        #     ireq.specifier.filter((candidate.version for candidate in all_candidates)))
-        # matching_candidates = candidates_by_version[matching_versions[0]]
 
         return {
             h for h in map(lambda c: self._hash_cache.get_hash(c.location),
-                                matching_candidates) if h is not None
+                           matching_candidates) if h is not None
         }
 
     @contextmanager
diff --git a/pipenv/patched/piptools/resolver.py b/pipenv/patched/piptools/resolver.py
index 1f3e18c1..b642bc9c 100644
--- a/pipenv/patched/piptools/resolver.py
+++ b/pipenv/patched/piptools/resolver.py
@@ -13,7 +13,7 @@ from . import click
 from .cache import DependencyCache
 from .exceptions import UnsupportedConstraint
 from .logging import log
-from .utils import (format_requirement, format_specifier, full_groupby, dedup, simplify_markers,
+from .utils import (format_requirement, format_specifier, full_groupby,
                     is_pinned_requirement, key_from_ireq, key_from_req, UNSAFE_PACKAGES)
 
 green = partial(click.style, fg='green')
@@ -27,8 +27,8 @@ class RequirementSummary(object):
     def __init__(self, ireq):
         self.req = ireq.req
         self.key = key_from_req(ireq.req)
-        self.markers = ireq.markers
         self.extras = str(sorted(ireq.extras))
+        self.markers = ireq.markers
         self.specifier = str(ireq.specifier)
 
     def __eq__(self, other):
@@ -162,7 +162,6 @@ class Resolver(object):
                     _markers = combined_ireq.markers._markers
                     if not isinstance(_markers[0], (tuple, list)):
                         combined_ireq.markers._markers = [_markers, 'and', ireq.markers._markers]
-
                 # Return a sorted, de-duped tuple of extras
                 combined_ireq.extras = tuple(sorted(set(tuple(combined_ireq.extras) + tuple(ireq.extras))))
             yield combined_ireq
diff --git a/pipenv/patched/piptools/scripts/compile.py b/pipenv/patched/piptools/scripts/compile.py
index 4625618a..2eaea9b3 100644
--- a/pipenv/patched/piptools/scripts/compile.py
+++ b/pipenv/patched/piptools/scripts/compile.py
@@ -2,7 +2,6 @@
 from __future__ import (absolute_import, division, print_function,
                         unicode_literals)
 
-import optparse
 import os
 import sys
 import tempfile
@@ -10,33 +9,30 @@ import tempfile
 from .._compat import (
     install_req_from_line,
     parse_requirements,
-    cmdoptions,
-    Command,
 )
 
 from .. import click
 from ..exceptions import PipToolsError
 from ..logging import log
+from ..pip import get_pip_command, pip_defaults
 from ..repositories import LocalRequirementsRepository, PyPIRepository
 from ..resolver import Resolver
 from ..utils import (dedup, is_pinned_requirement, key_from_req, UNSAFE_PACKAGES)
 from ..writer import OutputWriter
 
 DEFAULT_REQUIREMENTS_FILE = 'requirements.in'
-
-
-class PipCommand(Command):
-    name = 'PipCommand'
+DEFAULT_REQUIREMENTS_OUTPUT_FILE = 'requirements.txt'
 
 
 @click.command()
 @click.version_option()
-@click.option('-v', '--verbose', is_flag=True, help="Show more output")
+@click.option('-v', '--verbose', count=True, help="Show more output")
+@click.option('-q', '--quiet', count=True, help="Give less output")
 @click.option('-n', '--dry-run', is_flag=True, help="Only show what would happen, don't change anything")
 @click.option('-p', '--pre', is_flag=True, default=None, help="Allow resolving to prereleases (default is not)")
 @click.option('-r', '--rebuild', is_flag=True, help="Clear any caches upfront, rebuild from scratch")
 @click.option('-f', '--find-links', multiple=True, help="Look for archives in this directory or on this HTML page", envvar='PIP_FIND_LINKS')  # noqa
-@click.option('-i', '--index-url', help="Change index URL (defaults to PyPI)", envvar='PIP_INDEX_URL')
+@click.option('-i', '--index-url', help="Change index URL (defaults to {})".format(pip_defaults.index_url), envvar='PIP_INDEX_URL')  # noqa
 @click.option('--extra-index-url', multiple=True, help="Add additional index URL to search", envvar='PIP_EXTRA_INDEX_URL')  # noqa
 @click.option('--cert', help="Path to alternate CA bundle.")
 @click.option('--client-cert', help="Path to SSL client certificate, a single file containing the private key and the certificate in PEM format.")  # noqa
@@ -65,27 +61,30 @@ class PipCommand(Command):
 @click.option('--max-rounds', default=10,
               help="Maximum number of rounds before resolving the requirements aborts.")
 @click.argument('src_files', nargs=-1, type=click.Path(exists=True, allow_dash=True))
-def cli(verbose, dry_run, pre, rebuild, find_links, index_url, extra_index_url,
+@click.option('--build-isolation/--no-build-isolation', is_flag=True, default=False,
+              help="Enable isolation when building a modern source distribution. "
+                   "Build dependencies specified by PEP 518 must be already installed "
+                   "if build isolation is disabled.")
+def cli(verbose, quiet, dry_run, pre, rebuild, find_links, index_url, extra_index_url,
         cert, client_cert, trusted_host, header, index, emit_trusted_host, annotate,
         upgrade, upgrade_packages, output_file, allow_unsafe, generate_hashes,
-        src_files, max_rounds):
+        src_files, max_rounds, build_isolation):
     """Compiles requirements.txt from requirements.in specs."""
-    log.verbose = verbose
+    log.verbosity = verbose - quiet
 
     if len(src_files) == 0:
         if os.path.exists(DEFAULT_REQUIREMENTS_FILE):
             src_files = (DEFAULT_REQUIREMENTS_FILE,)
         elif os.path.exists('setup.py'):
             src_files = ('setup.py',)
-            if not output_file:
-                output_file = 'requirements.txt'
         else:
             raise click.BadParameter(("If you do not specify an input file, "
                                       "the default is {} or setup.py").format(DEFAULT_REQUIREMENTS_FILE))
 
-    if len(src_files) == 1 and src_files[0] == '-':
-        if not output_file:
-            raise click.BadParameter('--output-file is required if input is from stdin')
+    if src_files == ('-',) and not output_file:
+        raise click.BadParameter('--output-file is required if input is from stdin')
+    elif src_files == ('setup.py',) and not output_file:
+        output_file = DEFAULT_REQUIREMENTS_OUTPUT_FILE
 
     if len(src_files) > 1 and not output_file:
         raise click.BadParameter('--output-file is required if two or more input files are given.')
@@ -127,17 +126,20 @@ def cli(verbose, dry_run, pre, rebuild, find_links, index_url, extra_index_url,
     pip_options, _ = pip_command.parse_args(pip_args)
 
     session = pip_command._build_session(pip_options)
-    repository = PyPIRepository(pip_options, session)
+    repository = PyPIRepository(pip_options, session, build_isolation)
 
+    upgrade_install_reqs = {}
     # Proxy with a LocalRequirementsRepository if --upgrade is not specified
     # (= default invocation)
     if not upgrade and os.path.exists(dst_file):
         ireqs = parse_requirements(dst_file, finder=repository.finder, session=repository.session, options=pip_options)
         # Exclude packages from --upgrade-package/-P from the existing pins: We want to upgrade.
-        upgrade_pkgs_key = {key_from_req(install_req_from_line(pkg).req) for pkg in upgrade_packages}
+        upgrade_reqs_gen = (install_req_from_line(pkg) for pkg in upgrade_packages)
+        upgrade_install_reqs = {key_from_req(install_req.req): install_req for install_req in upgrade_reqs_gen}
+
         existing_pins = {key_from_req(ireq.req): ireq
                          for ireq in ireqs
-                         if is_pinned_requirement(ireq) and key_from_req(ireq.req) not in upgrade_pkgs_key}
+                         if is_pinned_requirement(ireq) and key_from_req(ireq.req) not in upgrade_install_reqs}
         repository = LocalRequirementsRepository(existing_pins, repository)
 
     log.debug('Using indexes:')
@@ -178,6 +180,8 @@ def cli(verbose, dry_run, pre, rebuild, find_links, index_url, extra_index_url,
             constraints.extend(parse_requirements(
                 src_file, finder=repository.finder, session=repository.session, options=pip_options))
 
+    constraints.extend(upgrade_install_reqs.values())
+
     # Filter out pip environment markers which do not match (PEP496)
     constraints = [req for req in constraints
                    if req.markers is None or req.markers.evaluate()]
@@ -236,32 +240,15 @@ def cli(verbose, dry_run, pre, rebuild, find_links, index_url, extra_index_url,
                           default_index_url=repository.DEFAULT_INDEX_URL,
                           index_urls=repository.finder.index_urls,
                           trusted_hosts=pip_options.trusted_hosts,
-                          format_control=repository.finder.format_control)
+                          format_control=repository.finder.format_control,
+                          allow_unsafe=allow_unsafe)
     writer.write(results=results,
                  unsafe_requirements=resolver.unsafe_constraints,
                  reverse_dependencies=reverse_dependencies,
                  primary_packages={key_from_req(ireq.req) for ireq in constraints if not ireq.constraint},
                  markers={key_from_req(ireq.req): ireq.markers
                           for ireq in constraints if ireq.markers},
-                 hashes=hashes,
-                 allow_unsafe=allow_unsafe)
+                 hashes=hashes)
 
     if dry_run:
         log.warning('Dry-run, so nothing updated.')
-
-
-def get_pip_command():
-    # Use pip's parser for pip.conf management and defaults.
-    # General options (find_links, index_url, extra_index_url, trusted_host,
-    # and pre) are defered to pip.
-    pip_command = PipCommand()
-    pip_command.parser.add_option(cmdoptions.no_binary())
-    pip_command.parser.add_option(cmdoptions.only_binary())
-    index_opts = cmdoptions.make_option_group(
-        cmdoptions.index_group,
-        pip_command.parser,
-    )
-    pip_command.parser.insert_option_group(0, index_opts)
-    pip_command.parser.add_option(optparse.Option('--pre', action='store_true', default=False))
-
-    return pip_command
diff --git a/pipenv/patched/piptools/sync.py b/pipenv/patched/piptools/sync.py
index 5c473916..f111764e 100644
--- a/pipenv/patched/piptools/sync.py
+++ b/pipenv/patched/piptools/sync.py
@@ -1,11 +1,13 @@
 import collections
 import os
 import sys
+import tempfile
 from subprocess import check_call
 
+from piptools._compat import stdlib_pkgs, DEV_PKGS
 from . import click
 from .exceptions import IncompatibleRequirements, UnsupportedConstraint
-from .utils import flat_map, format_requirement, key_from_ireq, key_from_req
+from .utils import flat_map, format_requirement, key_from_ireq, key_from_req, get_hashes_from_ireq
 
 PACKAGES_TO_IGNORE = [
     '-markerlib',
@@ -13,9 +15,7 @@ PACKAGES_TO_IGNORE = [
     'pip-tools',
     'pip-review',
     'pkg-resources',
-    'setuptools',
-    'wheel',
-]
+] + list(stdlib_pkgs) + list(DEV_PKGS)
 
 
 def dependency_tree(installed_keys, root_key):
@@ -120,33 +120,24 @@ def diff(compiled_requirements, installed_dists):
     return (to_install, to_uninstall)
 
 
-def sync(to_install, to_uninstall, verbose=False, dry_run=False, pip_flags=None, install_flags=None):
+def sync(to_install, to_uninstall, verbose=False, dry_run=False, install_flags=None):
     """
     Install and uninstalls the given sets of modules.
     """
     if not to_uninstall and not to_install:
         click.echo("Everything up-to-date")
 
-    if pip_flags is None:
-        pip_flags = []
-
+    pip_flags = []
     if not verbose:
         pip_flags += ['-q']
 
-    if os.environ.get('VIRTUAL_ENV'):
-        # find pip via PATH
-        pip = 'pip'
-    else:
-        # find pip in same directory as pip-sync entry-point script
-        pip = os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])), 'pip')
-
     if to_uninstall:
         if dry_run:
             click.echo("Would uninstall:")
             for pkg in to_uninstall:
                 click.echo("  {}".format(pkg))
         else:
-            check_call([pip, 'uninstall', '-y'] + pip_flags + sorted(to_uninstall))
+            check_call([sys.executable, '-m', 'pip', 'uninstall', '-y'] + pip_flags + sorted(to_uninstall))
 
     if to_install:
         if install_flags is None:
@@ -156,11 +147,22 @@ def sync(to_install, to_uninstall, verbose=False, dry_run=False, pip_flags=None,
             for ireq in to_install:
                 click.echo("  {}".format(format_requirement(ireq)))
         else:
-            package_args = []
+            # prepare requirement lines
+            req_lines = []
             for ireq in sorted(to_install, key=key_from_ireq):
-                if ireq.editable:
-                    package_args.extend(['-e', str(ireq.link or ireq.req)])
-                else:
-                    package_args.append(str(ireq.req))
-            check_call([pip, 'install'] + pip_flags + install_flags + package_args)
+                ireq_hashes = get_hashes_from_ireq(ireq)
+                req_lines.append(format_requirement(ireq, hashes=ireq_hashes))
+
+            # save requirement lines to a temporary file
+            tmp_req_file = tempfile.NamedTemporaryFile(mode='wt', delete=False)
+            tmp_req_file.write('\n'.join(req_lines))
+            tmp_req_file.close()
+
+            try:
+                check_call(
+                    [sys.executable, '-m', 'pip', 'install', '-r', tmp_req_file.name] + pip_flags + install_flags
+                )
+            finally:
+                os.unlink(tmp_req_file.name)
+
     return 0
diff --git a/pipenv/patched/piptools/utils.py b/pipenv/patched/piptools/utils.py
index 6f62eb9d..88755431 100644
--- a/pipenv/patched/piptools/utils.py
+++ b/pipenv/patched/piptools/utils.py
@@ -4,22 +4,24 @@ from __future__ import (absolute_import, division, print_function,
 
 import os
 import sys
-import six
 from itertools import chain, groupby
 from collections import OrderedDict
-from contextlib import contextmanager
+
+import six
+
+from pipenv.vendor.packaging.specifiers import SpecifierSet, InvalidSpecifier
+from pipenv.vendor.packaging.version import Version, InvalidVersion, parse as parse_version
+from pipenv.vendor.packaging.markers import Marker, Op, Value, Variable
 
 from ._compat import install_req_from_line
 
 from .click import style
-from pipenv.patched.notpip._vendor.packaging.specifiers import SpecifierSet, InvalidSpecifier
-from pipenv.patched.notpip._vendor.packaging.version import Version, InvalidVersion, parse as parse_version
-from pipenv.patched.notpip._vendor.packaging.markers import Marker, Op, Value, Variable
 
 
 UNSAFE_PACKAGES = {'setuptools', 'distribute', 'pip'}
 
 
+
 def simplify_markers(ireq):
     """simplify_markers "This code cleans up markers for a specific :class:`~InstallRequirement`"
 
@@ -156,7 +158,11 @@ def _requirement_to_str_lowercase_name(requirement):
     return "".join(parts)
 
 
-def format_requirement(ireq, marker=None):
+def format_requirement(ireq, marker=None, hashes=None):
+    """
+    Generic formatter for pretty printing InstallRequirements to the terminal
+    in a less verbose way than using its `__str__` method.
+    """
     if ireq.editable:
         line = '-e {}'.format(ireq.link)
     else:
@@ -165,6 +171,10 @@ def format_requirement(ireq, marker=None):
     if marker and ';' not in line:
         line = '{}; {}'.format(line, marker)
 
+    if hashes:
+        for hash_ in sorted(hashes):
+            line += " \\\n    --hash={}".format(hash_)
+
     return line
 
 
@@ -252,6 +262,16 @@ def lookup_table(values, key=None, keyval=None, unique=False, use_lists=False):
     ...     'q': 'quux'
     ... }
 
+    For the values represented as lists, set use_lists=True:
+
+    >>> assert lookup_table(
+    ...     ['foo', 'bar', 'baz', 'qux', 'quux'], lambda s: s[0],
+    ...     use_lists=True) == {
+    ...     'b': ['bar', 'baz'],
+    ...     'f': ['foo'],
+    ...     'q': ['qux', 'quux']
+    ... }
+
     The values of the resulting lookup table will be values, not sets.
 
     For extra power, you can even change the values while building up the LUT.
@@ -336,15 +356,14 @@ def fs_str(string):
 _fs_encoding = sys.getfilesystemencoding() or sys.getdefaultencoding()
 
 
-# Borrowed from pew to avoid importing pew which imports psutil
-# See https://github.com/berdario/pew/blob/master/pew/_utils.py#L82
-@contextmanager
-def temp_environ():
-    """Allow the ability to set os.environ temporarily"""
-    environ = dict(os.environ)
-    try:
-        yield
-
-    finally:
-        os.environ.clear()
-        os.environ.update(environ)
+def get_hashes_from_ireq(ireq):
+    """
+    Given an InstallRequirement, return a list of string hashes in the format "{algorithm}:{hash}".
+    Return an empty list if there are no hashes in the requirement options.
+    """
+    result = []
+    ireq_hashes = ireq.options.get('hashes', {})
+    for algorithm, hexdigests in ireq_hashes.items():
+        for hash_ in hexdigests:
+            result.append("{}:{}".format(algorithm, hash_))
+    return result
diff --git a/pipenv/patched/piptools/writer.py b/pipenv/patched/piptools/writer.py
index 97b6df94..9ac97792 100644
--- a/pipenv/patched/piptools/writer.py
+++ b/pipenv/patched/piptools/writer.py
@@ -1,8 +1,9 @@
 import os
+import sys
 from itertools import chain
 
 from ._compat import ExitStack
-from .click import unstyle
+from .click import unstyle, get_os_args
 from .io import AtomicSaver
 from .logging import log
 from .utils import comment, dedup, format_requirement, key_from_req, UNSAFE_PACKAGES
@@ -11,7 +12,8 @@ from .utils import comment, dedup, format_requirement, key_from_req, UNSAFE_PACK
 class OutputWriter(object):
     def __init__(self, src_files, dst_file, dry_run, emit_header, emit_index,
                  emit_trusted_host, annotate, generate_hashes,
-                 default_index_url, index_urls, trusted_hosts, format_control):
+                 default_index_url, index_urls, trusted_hosts, format_control,
+                 allow_unsafe):
         self.src_files = src_files
         self.dst_file = dst_file
         self.dry_run = dry_run
@@ -24,6 +26,7 @@ class OutputWriter(object):
         self.index_urls = index_urls
         self.trusted_hosts = trusted_hosts
         self.format_control = format_control
+        self.allow_unsafe = allow_unsafe
 
     def _sort_key(self, ireq):
         return (not ireq.editable, str(ireq.req).lower())
@@ -38,18 +41,9 @@ class OutputWriter(object):
             if custom_cmd:
                 yield comment('#    {}'.format(custom_cmd))
             else:
-                params = []
-                if not self.emit_index:
-                    params += ['--no-index']
-                if not self.emit_trusted_host:
-                    params += ['--no-emit-trusted-host']
-                if not self.annotate:
-                    params += ['--no-annotate']
-                if self.generate_hashes:
-                    params += ["--generate-hashes"]
-                params += ['--output-file', self.dst_file]
-                params += self.src_files
-                yield comment('#    pip-compile {}'.format(' '.join(params)))
+                prog = os.path.basename(sys.argv[0])
+                args = ' '.join(get_os_args())
+                yield comment('#    {prog} {args}'.format(prog=prog, args=args))
             yield comment('#')
 
     def write_index_options(self):
@@ -82,7 +76,7 @@ class OutputWriter(object):
             yield ''
 
     def _iter_lines(self, results, unsafe_requirements, reverse_dependencies,
-                    primary_packages, markers, hashes, allow_unsafe=False):
+                    primary_packages, markers, hashes):
         for line in self.write_header():
             yield line
         for line in self.write_flags():
@@ -110,32 +104,29 @@ class OutputWriter(object):
                                                primary_packages,
                                                marker=markers.get(key_from_req(ireq.req)),
                                                hashes=hashes)
-                if not allow_unsafe:
+                if not self.allow_unsafe:
                     yield comment('# {}'.format(req))
                 else:
                     yield req
 
     def write(self, results, unsafe_requirements, reverse_dependencies,
-              primary_packages, markers, hashes, allow_unsafe=False):
+              primary_packages, markers, hashes):
         with ExitStack() as stack:
             f = None
             if not self.dry_run:
                 f = stack.enter_context(AtomicSaver(self.dst_file))
 
             for line in self._iter_lines(results, unsafe_requirements, reverse_dependencies,
-                                         primary_packages, markers, hashes, allow_unsafe=allow_unsafe):
+                                         primary_packages, markers, hashes):
                 log.info(line)
                 if f:
                     f.write(unstyle(line).encode('utf-8'))
                     f.write(os.linesep.encode('utf-8'))
 
     def _format_requirement(self, ireq, reverse_dependencies, primary_packages, marker=None, hashes=None):
-        line = format_requirement(ireq, marker=marker)
-
         ireq_hashes = (hashes if hashes is not None else {}).get(ireq)
-        if ireq_hashes:
-            for hash_ in sorted(ireq_hashes):
-                line += " \\\n    --hash={}".format(hash_)
+
+        line = format_requirement(ireq, marker=marker, hashes=ireq_hashes)
 
         if not self.annotate or key_from_req(ireq.req) in primary_packages:
             return line
diff --git a/tasks/vendoring/patches/patched/pip19.patch b/tasks/vendoring/patches/patched/pip19.patch
index dc45c445..1c10d5c5 100644
--- a/tasks/vendoring/patches/patched/pip19.patch
+++ b/tasks/vendoring/patches/patched/pip19.patch
@@ -1,7 +1,7 @@
-diff --git a/pipenv/patched/pip/_internal/download.py b/pipenv/patched/pip/_internal/download.py
+diff --git a/pipenv/patched/notpip/_internal/download.py b/pipenv/patched/notpip/_internal/download.py
 index 2bbe1762..872af328 100644
---- a/pipenv/patched/pip/_internal/download.py
-+++ b/pipenv/patched/pip/_internal/download.py
+--- a/pipenv/patched/notpip/_internal/download.py
++++ b/pipenv/patched/notpip/_internal/download.py
 @@ -77,7 +77,7 @@ def user_agent():
      Return a string representing the user agent.
      """
@@ -11,10 +11,10 @@ index 2bbe1762..872af328 100644
          "python": platform.python_version(),
          "implementation": {
              "name": platform.python_implementation(),
-diff --git a/pipenv/patched/pip/_internal/index.py b/pipenv/patched/pip/_internal/index.py
+diff --git a/pipenv/patched/notpip/_internal/index.py b/pipenv/patched/notpip/_internal/index.py
 index 9eda3a35..67dd952c 100644
---- a/pipenv/patched/pip/_internal/index.py
-+++ b/pipenv/patched/pip/_internal/index.py
+--- a/pipenv/patched/notpip/_internal/index.py
++++ b/pipenv/patched/notpip/_internal/index.py
 @@ -331,6 +331,9 @@ class PackageFinder(object):
          # The Session we'll use to make requests
          self.session = session
@@ -156,10 +156,10 @@ index 9eda3a35..67dd952c 100644
  
  
  def _find_name_version_sep(egg_info, canonical_name):
-diff --git a/pipenv/patched/pip/_internal/models/candidate.py b/pipenv/patched/pip/_internal/models/candidate.py
+diff --git a/pipenv/patched/notpip/_internal/models/candidate.py b/pipenv/patched/notpip/_internal/models/candidate.py
 index 4475458a..6748957d 100644
---- a/pipenv/patched/pip/_internal/models/candidate.py
-+++ b/pipenv/patched/pip/_internal/models/candidate.py
+--- a/pipenv/patched/notpip/_internal/models/candidate.py
++++ b/pipenv/patched/notpip/_internal/models/candidate.py
 @@ -13,11 +13,12 @@ class InstallationCandidate(KeyBasedCompareMixin):
      """Represents a potential "candidate" for installation.
      """
@@ -175,10 +175,10 @@ index 4475458a..6748957d 100644
  
          super(InstallationCandidate, self).__init__(
              key=(self.project, self.version, self.location),
-diff --git a/pipenv/patched/pip/_internal/operations/prepare.py b/pipenv/patched/pip/_internal/operations/prepare.py
+diff --git a/pipenv/patched/notpip/_internal/operations/prepare.py b/pipenv/patched/notpip/_internal/operations/prepare.py
 index 4f31dd5a..ed0c86b2 100644
---- a/pipenv/patched/pip/_internal/operations/prepare.py
-+++ b/pipenv/patched/pip/_internal/operations/prepare.py
+--- a/pipenv/patched/notpip/_internal/operations/prepare.py
++++ b/pipenv/patched/notpip/_internal/operations/prepare.py
 @@ -17,7 +17,7 @@ from pip._internal.exceptions import (
  from pip._internal.utils.compat import expanduser
  from pip._internal.utils.hashes import MissingHashes
@@ -204,10 +204,10 @@ index 4f31dd5a..ed0c86b2 100644
              req.populate_link(finder, upgrade_allowed, require_hashes)
  
              # We can't hit this spot and have populate_link return None.
-diff --git a/pipenv/patched/pip/_internal/pep425tags.py b/pipenv/patched/pip/_internal/pep425tags.py
+diff --git a/pipenv/patched/notpip/_internal/pep425tags.py b/pipenv/patched/notpip/_internal/pep425tags.py
 index 1e782d1a..3c760ca3 100644
---- a/pipenv/patched/pip/_internal/pep425tags.py
-+++ b/pipenv/patched/pip/_internal/pep425tags.py
+--- a/pipenv/patched/notpip/_internal/pep425tags.py
++++ b/pipenv/patched/notpip/_internal/pep425tags.py
 @@ -10,7 +10,10 @@ import sysconfig
  import warnings
  from collections import OrderedDict
@@ -220,10 +220,10 @@ index 1e782d1a..3c760ca3 100644
  from pip._internal.utils.compat import get_extension_suffixes
  from pip._internal.utils.typing import MYPY_CHECK_RUNNING
  
-diff --git a/pipenv/patched/pip/_internal/req/req_install.py b/pipenv/patched/pip/_internal/req/req_install.py
+diff --git a/pipenv/patched/notpip/_internal/req/req_install.py b/pipenv/patched/notpip/_internal/req/req_install.py
 index a4834b00..2c22e141 100644
---- a/pipenv/patched/pip/_internal/req/req_install.py
-+++ b/pipenv/patched/pip/_internal/req/req_install.py
+--- a/pipenv/patched/notpip/_internal/req/req_install.py
++++ b/pipenv/patched/notpip/_internal/req/req_install.py
 @@ -588,7 +588,8 @@ class InstallRequirement(object):
                  self.setup_py, self.link,
              )
@@ -256,10 +256,10 @@ index a4834b00..2c22e141 100644
          install_args.append('-c')
          install_args.append(SETUPTOOLS_SHIM % self.setup_py)
          install_args += list(global_options) + \
-diff --git a/pipenv/patched/pip/_internal/req/req_set.py b/pipenv/patched/pip/_internal/req/req_set.py
+diff --git a/pipenv/patched/notpip/_internal/req/req_set.py b/pipenv/patched/notpip/_internal/req/req_set.py
 index d1410e93..69a53bf2 100644
---- a/pipenv/patched/pip/_internal/req/req_set.py
-+++ b/pipenv/patched/pip/_internal/req/req_set.py
+--- a/pipenv/patched/notpip/_internal/req/req_set.py
++++ b/pipenv/patched/notpip/_internal/req/req_set.py
 @@ -18,7 +18,7 @@ logger = logging.getLogger(__name__)
  
  class RequirementSet(object):
@@ -288,11 +288,19 @@ index d1410e93..69a53bf2 100644
  
      def cleanup_files(self):
          # type: () -> None
-diff --git a/pipenv/patched/pip/_internal/resolve.py b/pipenv/patched/pip/_internal/resolve.py
-index 33f572f1..fc8fcbe8 100644
---- a/pipenv/patched/pip/_internal/resolve.py
-+++ b/pipenv/patched/pip/_internal/resolve.py
-@@ -58,7 +58,8 @@ class Resolver(object):
+diff --git a/pipenv/patched/notpip/_internal/resolve.py b/pipenv/patched/notpip/_internal/resolve.py
+index 33f572f1..aa827193 100644
+--- a/pipenv/patched/notpip/_internal/resolve.py
++++ b/pipenv/patched/notpip/_internal/resolve.py
+@@ -19,6 +19,7 @@ from pip._internal.exceptions import (
+     UnsupportedPythonVersion,
+ )
+ from pip._internal.req.constructors import install_req_from_req_string
++from pip._internal.req.req_install import InstallRequirement
+ from pip._internal.utils.logging import indent_log
+ from pip._internal.utils.misc import dist_in_usersite, ensure_dir
+ from pip._internal.utils.packaging import check_dist_requires_python
+@@ -58,7 +59,8 @@ class Resolver(object):
          force_reinstall,  # type: bool
          isolated,  # type: bool
          upgrade_strategy,  # type: str
@@ -302,7 +310,7 @@ index 33f572f1..fc8fcbe8 100644
      ):
          # type: (...) -> None
          super(Resolver, self).__init__()
-@@ -81,8 +82,12 @@ class Resolver(object):
+@@ -81,8 +83,12 @@ class Resolver(object):
          self.ignore_dependencies = ignore_dependencies
          self.ignore_installed = ignore_installed
          self.ignore_requires_python = ignore_requires_python
@@ -315,7 +323,7 @@ index 33f572f1..fc8fcbe8 100644
  
          self._discovered_dependencies = \
              defaultdict(list)  # type: DefaultDict[str, List]
-@@ -273,7 +278,8 @@ class Resolver(object):
+@@ -273,7 +279,8 @@ class Resolver(object):
      def _resolve_one(
          self,
          requirement_set,  # type: RequirementSet
@@ -325,7 +333,7 @@ index 33f572f1..fc8fcbe8 100644
      ):
          # type: (...) -> List[InstallRequirement]
          """Prepare a single requirements file.
-@@ -298,11 +304,18 @@ class Resolver(object):
+@@ -298,11 +305,18 @@ class Resolver(object):
          try:
              check_dist_requires_python(dist)
          except UnsupportedPythonVersion as err:
@@ -345,7 +353,7 @@ index 33f572f1..fc8fcbe8 100644
          more_reqs = []  # type: List[InstallRequirement]
  
          def add_req(subreq, extras_requested):
-@@ -329,10 +342,14 @@ class Resolver(object):
+@@ -329,10 +343,14 @@ class Resolver(object):
              # We add req_to_install before its dependencies, so that we
              # can refer to it when adding dependencies.
              if not requirement_set.has_requirement(req_to_install.name):
@@ -360,7 +368,7 @@ index 33f572f1..fc8fcbe8 100644
                  )
  
              if not self.ignore_dependencies:
-@@ -356,6 +373,20 @@ class Resolver(object):
+@@ -356,6 +374,20 @@ class Resolver(object):
                  for subreq in dist.requires(available_requested):
                      add_req(subreq, extras_requested=available_requested)
  
@@ -369,7 +377,7 @@ index 33f572f1..fc8fcbe8 100644
 +                    if hasattr(dist, '_DistInfoDistribution__dep_map'):
 +                        for req in dist._DistInfoDistribution__dep_map[available]:
 +                            req = InstallRequirement(
-+                                str(req),
++                                req,
 +                                req_to_install,
 +                                isolated=self.isolated,
 +                                wheel_cache=self.wheel_cache,
@@ -381,10 +389,10 @@ index 33f572f1..fc8fcbe8 100644
              if not req_to_install.editable and not req_to_install.satisfied_by:
                  # XXX: --no-install leads this to report 'Successfully
                  # downloaded' for only non-editable reqs, even though we took
-diff --git a/pipenv/patched/pip/_internal/utils/packaging.py b/pipenv/patched/pip/_internal/utils/packaging.py
+diff --git a/pipenv/patched/notpip/_internal/utils/packaging.py b/pipenv/patched/notpip/_internal/utils/packaging.py
 index 7aaf7b5e..d56f0512 100644
---- a/pipenv/patched/pip/_internal/utils/packaging.py
-+++ b/pipenv/patched/pip/_internal/utils/packaging.py
+--- a/pipenv/patched/notpip/_internal/utils/packaging.py
++++ b/pipenv/patched/notpip/_internal/utils/packaging.py
 @@ -37,7 +37,7 @@ def check_requires_python(requires_python):
      requires_python_specifier = specifiers.SpecifierSet(requires_python)
  
@@ -407,10 +415,10 @@ index 7aaf7b5e..d56f0512 100644
      try:
          if not check_requires_python(requires_python):
              raise exceptions.UnsupportedPythonVersion(
-diff --git a/pipenv/patched/pip/_internal/utils/temp_dir.py b/pipenv/patched/pip/_internal/utils/temp_dir.py
+diff --git a/pipenv/patched/notpip/_internal/utils/temp_dir.py b/pipenv/patched/notpip/_internal/utils/temp_dir.py
 index 2c81ad55..fbf0292a 100644
---- a/pipenv/patched/pip/_internal/utils/temp_dir.py
-+++ b/pipenv/patched/pip/_internal/utils/temp_dir.py
+--- a/pipenv/patched/notpip/_internal/utils/temp_dir.py
++++ b/pipenv/patched/notpip/_internal/utils/temp_dir.py
 @@ -5,8 +5,10 @@ import itertools
  import logging
  import os.path
@@ -477,10 +485,10 @@ index 2c81ad55..fbf0292a 100644
  
  
  class AdjacentTempDirectory(TempDirectory):
-diff --git a/pipenv/patched/pip/_internal/wheel.py b/pipenv/patched/pip/_internal/wheel.py
+diff --git a/pipenv/patched/notpip/_internal/wheel.py b/pipenv/patched/notpip/_internal/wheel.py
 index 67bcc7f7..968cdff9 100644
---- a/pipenv/patched/pip/_internal/wheel.py
-+++ b/pipenv/patched/pip/_internal/wheel.py
+--- a/pipenv/patched/notpip/_internal/wheel.py
++++ b/pipenv/patched/notpip/_internal/wheel.py
 @@ -114,7 +114,7 @@ def fix_script(path):
              firstline = script.readline()
              if not firstline.startswith(b'#!python'):
diff --git a/tasks/vendoring/patches/patched/piptools.patch b/tasks/vendoring/patches/patched/piptools.patch
index e0693cc1..87b5247c 100644
--- a/tasks/vendoring/patches/patched/piptools.patch
+++ b/tasks/vendoring/patches/patched/piptools.patch
@@ -10,7 +10,7 @@ index e4ac717..19adcbc 100644
 +    InstallationError
  )
 diff --git a/pipenv/patched/piptools/_compat/pip_compat.py b/pipenv/patched/piptools/_compat/pip_compat.py
-index 82ccb8b..44de54b 100644
+index 82ccb8b..715144a 100644
 --- a/pipenv/patched/piptools/_compat/pip_compat.py
 +++ b/pipenv/patched/piptools/_compat/pip_compat.py
 @@ -1,48 +1,51 @@
@@ -43,7 +43,7 @@ index 82ccb8b..44de54b 100644
 -import pip
 -import pkg_resources
 +import os
-+os.environ["PIP_SHIMS_BASE_MODULE"] = str("pip")
++os.environ["PIP_SHIMS_BASE_MODULE"] = str("pipenv.patched.notpip")
  
 -def do_import(module_path, subimport=None, old_path=None):
 -    old_path = old_path or module_path
@@ -127,11 +127,25 @@ index 4e6174c..9e0c6f1 100644
  
  # NOTE
  # We used to store the cache dir under ~/.pip-tools, which is not the
+diff --git a/pipenv/patched/piptools/repositories/local.py b/pipenv/patched/piptools/repositories/local.py
+index 08dabe1..36bafdb 100644
+--- a/pipenv/patched/piptools/repositories/local.py
++++ b/pipenv/patched/piptools/repositories/local.py
+@@ -56,7 +56,8 @@ class LocalRequirementsRepository(BaseRepository):
+         if existing_pin and ireq_satisfied_by_existing_pin(ireq, existing_pin):
+             project, version, _ = as_tuple(existing_pin)
+             return make_install_requirement(
+-                project, version, ireq.extras, constraint=ireq.constraint
++                project, version, ireq.extras, constraint=ireq.constraint,
++                markers=ireq.markers
+             )
+         else:
+             return self.repository.find_best_match(ireq, prereleases)
 diff --git a/pipenv/patched/piptools/repositories/pypi.py b/pipenv/patched/piptools/repositories/pypi.py
-index e54ae08..6f42749 100644
+index e54ae08..4ff20e0 100644
 --- a/pipenv/patched/piptools/repositories/pypi.py
 +++ b/pipenv/patched/piptools/repositories/pypi.py
-@@ -2,6 +2,7 @@
+@@ -2,14 +2,22 @@
  from __future__ import (absolute_import, division, print_function,
                          unicode_literals)
  
@@ -139,14 +153,15 @@ index e54ae08..6f42749 100644
  import hashlib
  import os
  from contextlib import contextmanager
-@@ -10,6 +11,14 @@ from shutil import rmtree
- import pip
+ from shutil import rmtree
+ 
+-import pip
  import pkg_resources
  
 +from packaging.requirements import Requirement
 +from packaging.specifiers import SpecifierSet, Specifier
 +
-+os.environ["PIP_SHIMS_BASE_MODULE"] = str("pip")
++os.environ["PIP_SHIMS_BASE_MODULE"] = str("pipenv.patched.notpip")
 +from pip_shims.shims import VcsSupport, WheelCache, InstallationError
 +from pip_shims.shims import Resolver as PipResolver
 +
@@ -154,7 +169,7 @@ index e54ae08..6f42749 100644
  from .._compat import (
      is_file_url,
      url_to_path,
-@@ -18,13 +27,15 @@ from .._compat import (
+@@ -18,13 +26,15 @@ from .._compat import (
      Wheel,
      FAVORITE_HASH,
      TemporaryDirectory,
@@ -173,7 +188,7 @@ index e54ae08..6f42749 100644
  from .base import BaseRepository
  
  try:
-@@ -34,10 +45,44 @@ except ImportError:
+@@ -34,10 +44,44 @@ except ImportError:
      def RequirementTracker():
          yield
  
@@ -222,7 +237,7 @@ index e54ae08..6f42749 100644
  
  
  class PyPIRepository(BaseRepository):
-@@ -49,10 +94,11 @@ class PyPIRepository(BaseRepository):
+@@ -49,10 +93,11 @@ class PyPIRepository(BaseRepository):
      config), but any other PyPI mirror can be used if index_urls is
      changed/configured on the Finder.
      """
@@ -235,7 +250,16 @@ index e54ae08..6f42749 100644
  
          index_urls = [pip_options.index_url] + pip_options.extra_index_urls
          if pip_options.no_index:
-@@ -82,6 +128,10 @@ class PyPIRepository(BaseRepository):
+@@ -67,7 +112,7 @@ class PyPIRepository(BaseRepository):
+         }
+ 
+         # pip 19.0 has removed process_dependency_links from the PackageFinder constructor
+-        if pkg_resources.parse_version(pip.__version__) < pkg_resources.parse_version('19.0'):
++        if pkg_resources.parse_version(pip_shims.shims.pip_version) < pkg_resources.parse_version('19.0'):
+             finder_kwargs["process_dependency_links"] = pip_options.process_dependency_links
+ 
+         self.finder = PackageFinder(**finder_kwargs)
+@@ -82,6 +127,10 @@ class PyPIRepository(BaseRepository):
          # of all secondary dependencies for the given requirement, so we
          # only have to go to disk once for each requirement
          self._dependencies_cache = {}
@@ -246,7 +270,7 @@ index e54ae08..6f42749 100644
  
          # Setup file paths
          self.freshen_build_caches()
-@@ -122,10 +172,13 @@ class PyPIRepository(BaseRepository):
+@@ -122,10 +171,13 @@ class PyPIRepository(BaseRepository):
          if ireq.editable:
              return ireq  # return itself as the best match
  
@@ -263,7 +287,7 @@ index e54ae08..6f42749 100644
  
          # Reuses pip's internal candidate sort key to sort
          matching_candidates = [candidates_by_version[ver] for ver in matching_versions]
-@@ -135,9 +188,65 @@ class PyPIRepository(BaseRepository):
+@@ -135,9 +187,65 @@ class PyPIRepository(BaseRepository):
  
          # Turn the candidate into a pinned InstallRequirement
          return make_install_requirement(
@@ -330,8 +354,12 @@ index e54ae08..6f42749 100644
      def resolve_reqs(self, download_dir, ireq, wheel_cache):
          results = None
          try:
-@@ -153,7 +262,7 @@ class PyPIRepository(BaseRepository):
+@@ -151,9 +259,11 @@ class PyPIRepository(BaseRepository):
+                 download_dir=download_dir,
+                 wheel_download_dir=self._wheel_download_dir,
                  session=self.session,
++                ignore_installed=True,
++                ignore_compatibility=False,
                  wheel_cache=wheel_cache
              )
 -            results = reqset._prepare_file(self.finder, ireq)
@@ -339,7 +367,7 @@ index e54ae08..6f42749 100644
          else:
              # pip >= 10
              preparer_kwargs = {
-@@ -170,8 +279,9 @@ class PyPIRepository(BaseRepository):
+@@ -170,8 +280,9 @@ class PyPIRepository(BaseRepository):
                  'upgrade_strategy': "to-satisfy-only",
                  'force_reinstall': False,
                  'ignore_dependencies': False,
@@ -350,27 +378,29 @@ index e54ae08..6f42749 100644
                  'isolated': False,
                  'wheel_cache': wheel_cache,
                  'use_user_site': False
-@@ -190,11 +300,17 @@ class PyPIRepository(BaseRepository):
+@@ -190,11 +301,18 @@ class PyPIRepository(BaseRepository):
                  resolver = PipResolver(**resolver_kwargs)
                  resolver.require_hashes = False
                  results = resolver._resolve_one(reqset, ireq)
 -                reqset.cleanup_files()
-+
+ 
+-        return set(results)
 +        cleanup_fn = getattr(reqset, "cleanup_files", None)
 +        if cleanup_fn is not None:
 +            try:
 +                cleanup_fn()
 +            except OSError:
 +                pass
- 
-         return set(results)
++
++        results = set(results) if results else set()
++        return results, ireq
  
 -    def get_dependencies(self, ireq):
 +    def get_legacy_dependencies(self, ireq):
          """
          Given a pinned or an editable InstallRequirement, returns a set of
          dependencies (also InstallRequirements, but not necessarily pinned).
-@@ -223,7 +339,8 @@ class PyPIRepository(BaseRepository):
+@@ -223,7 +341,8 @@ class PyPIRepository(BaseRepository):
              wheel_cache = WheelCache(CACHE_DIR, self.pip_options.format_control)
              prev_tracker = os.environ.get('PIP_REQ_TRACKER')
              try:
@@ -380,7 +410,7 @@ index e54ae08..6f42749 100644
              finally:
                  if 'PIP_REQ_TRACKER' in os.environ:
                      if prev_tracker:
-@@ -245,6 +362,10 @@ class PyPIRepository(BaseRepository):
+@@ -245,6 +364,10 @@ class PyPIRepository(BaseRepository):
          if ireq.editable:
              return set()
  
@@ -391,7 +421,7 @@ index e54ae08..6f42749 100644
          if not is_pinned_requirement(ireq):
              raise TypeError(
                  "Expected pinned requirement, got {}".format(ireq))
-@@ -252,24 +373,16 @@ class PyPIRepository(BaseRepository):
+@@ -252,24 +375,16 @@ class PyPIRepository(BaseRepository):
          # We need to get all of the candidates that match our current version
          # pin, these will represent all of the files that could possibly
          # satisfy this constraint.
