commit a0754453672b3921ec4f8e311cd2c1d2873f922b
Author: Dan Ryan <dan@danryan.co>
Date:   Thu May 3 11:59:55 2018 -0400

    Updated versions
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/_compat.py b/pipenv/_compat.py
index d6ae5644..3dede246 100644
--- a/pipenv/_compat.py
+++ b/pipenv/_compat.py
@@ -258,6 +258,7 @@ def NamedTemporaryFile(
     if os.name == "nt" and delete:
         flags |= os.O_TEMPORARY
     if six.PY2:
+        # if newline or 'b' not in mode:
         flags = _text_openflags if 'b' not in mode else flags
         (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags)
     else:
@@ -269,6 +270,10 @@ def NamedTemporaryFile(
         return _TemporaryFileWrapper(file, name, delete)
 
     except BaseException:
-        os.unlink(name)
+        try:
+            os.unlink(name)
+        except OSError:
+            os.close(fd)
+            os.unlink(name)
         os.close(fd)
         raise
diff --git a/pipenv/project.py b/pipenv/project.py
index 73356e61..06f8af01 100644
--- a/pipenv/project.py
+++ b/pipenv/project.py
@@ -585,7 +585,7 @@ class Project(object):
                     u'name': source_name,
                 }
             )
-            
+
         data = {
             u'source': sources,
             # Default packages.
@@ -644,9 +644,10 @@ class Project(object):
             s = s.decode('ascii')
 
         with atomic_open_for_write(self.lockfile_location, newline=newlines) as f:
-            f.write(s)
             # Write newline at end of document. GH Issue #319.
-            f.write(u'\n')
+            if not s.endswith(newlines):
+                s = '{0}{1}'.format(s, newlines)
+            f.write(u'{0}'.format(s))
 
     @property
     def pipfile_sources(self):
diff --git a/pipenv/utils.py b/pipenv/utils.py
index e8c94215..f6448586 100644
--- a/pipenv/utils.py
+++ b/pipenv/utils.py
@@ -1305,6 +1305,9 @@ def atomic_open_for_write(target, binary=False, newline=None, encoding=None):
       target with this new file.
     """
     from ._compat import NamedTemporaryFile
+    if six.PY2 and not binary and newline == u'\n':
+        binary = True
+
     mode = 'w+b' if binary else 'w'
     f = NamedTemporaryFile(
         dir=os.path.dirname(target),
@@ -1332,3 +1335,5 @@ def atomic_open_for_write(target, binary=False, newline=None, encoding=None):
         except OSError:
             pass
         os.rename(f.name, target)  # No os.replace() on Python 2.
+    finally:
+        f.close()
diff --git a/tests/integration/test_project.py b/tests/integration/test_project.py
index 9ffa6d8d..4a3145ea 100644
--- a/tests/integration/test_project.py
+++ b/tests/integration/test_project.py
@@ -82,7 +82,7 @@ six = {{version = "*", index = "pypi"}}
 def test_maintain_file_line_endings(PipenvInstance, pypi, newlines):
     with PipenvInstance(pypi=pypi, chdir=True) as p:
         # Initial pipfile + lockfile generation
-        c = p.pipenv('install')
+        c = p.pipenv('install pytz')
         assert c.return_code == 0
 
         # Rewrite each file with parameterized newlines
