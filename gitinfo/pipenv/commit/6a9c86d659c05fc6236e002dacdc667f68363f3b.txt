commit 6a9c86d659c05fc6236e002dacdc667f68363f3b
Author: Kenneth Reitz <me@kennethreitz.org>
Date:   Sat Jan 21 17:28:58 2017 -0500

    ui improvements

diff --git a/README.rst b/README.rst
index bae37ce4..2f45c3e4 100644
--- a/README.rst
+++ b/README.rst
@@ -20,9 +20,7 @@ The main commands are ``init``, which initializes the environment, ``install`` a
 
 - ``shell`` will spawn a shell with the virtualenv activated.
 - ``python`` will run the Python interpreter from the virtualenv, with any arguments forwarded.
-- ``purge`` will uninstall all packages from the virtualenv.
 - ``where`` will give location information about the current project.
-- ``venv`` will give virtutalenv activation information.
 - ``check`` asserts that PEP 508 requirements are being met by the current environment.
 
 ☤ Usage
@@ -39,50 +37,53 @@ The main commands are ``init``, which initializes the environment, ``install`` a
 
     Commands:
       check
-      lock
       init
       install
-      purge
+      lock
       python
       shell
       uninstall
-      venv
+      update
       where
 
+::
+
     $ pipenv where
-    Pipfile found at /Users/kennethreitz/repos/project/Pipfile. Considering this to be the project home.
+    Pipfile found at /Users/kennethreitz/repos/kr/pip2/test/Pipfile. Considering this to be the project home.
+
+::
 
     $ pipenv where --venv
-    Virtualenv location: /Users/kennethreitz/repos/project/.venv
+    Virtualenv location: /Users/kennethreitz/repos/kr/pip2/test/.venv
 
-    $ pipenv venv --bare
-    source /Users/kennethreitz/repos/project/.venv/bin/activate
+::
 
     $ pipenv init
-    Creating a Pipfile for this project...
-    Pipfile found at /Users/kennethreitz/repos/project/Pipfile. Considering this to be the project home.
+    Pipfile found at /Users/kennethreitz/repos/kr/pip2/test/Pipfile. Considering this to be the project home.
     Creating a virtualenv for this project...
     ...
-    Virtualenv location: /Users/kennethreitz/repos/project/.venv
-    Pipfile.lock not found, creating...
+    Virtualenv location: /Users/kennethreitz/repos/kr/pip2/test/.venv
+    Installing dependencies from Pipfile.lock...
     ...
 
     To activate this project's virtualenv, run the following:
     $ pipenv shell
 
+::
 
-    $ pipenv install requests --dev
-    Installing requests...
+    $ pipenv install pytest --dev
+    Installing pytest...
     ...
-    Adding requests to Pipfile...
+    Adding pytest to Pipfile's [dev-packages]...
 
+::
 
     $ pipenv lock
     Assuring all dependencies from Pipfile are installed...
-    Freezing development dependencies...
-    Freezing default dependencies...
-    Note: your project now has only default packages installed.
-    To install dev-packages, run: $ pipenv init --dev
+    Locking [dev-packages] dependencies...
+    Locking [packages] dependencies...
+    Note: your project now has only default [packages] installed.
+    To install [dev-packages], run: $ pipenv init --dev
 
 
 ☤ Installation
diff --git a/pipenv/cli.py b/pipenv/cli.py
index 8d6f82f6..688fee0b 100644
--- a/pipenv/cli.py
+++ b/pipenv/cli.py
@@ -89,7 +89,7 @@ def do_lock():
     # Purge the virtualenv, for development dependencies.
     do_purge(bare=True)
 
-    click.echo(crayons.yellow('Freezing development dependencies...'))
+    click.echo(crayons.yellow('Locking {} dependencies...'.format(crayons.red('[dev-packages]'))))
 
     # Install only development dependencies.
     do_install_dependencies(dev=True, only=True, bare=True)
@@ -110,7 +110,7 @@ def do_lock():
     # Purge the virtualenv.
     do_purge(bare=True)
 
-    click.echo(crayons.yellow('Freezing default dependencies...'))
+    click.echo(crayons.yellow('Locking {} dependencies...'.format(crayons.red('[packages]'))))
 
     # Install only development dependencies.
     do_install_dependencies(bare=True)
@@ -126,8 +126,8 @@ def do_lock():
     with open(project.lockfile_location, 'w') as f:
         f.write(json.dumps(lockfile, indent=4, separators=(',', ': ')))
 
-    click.echo(crayons.yellow('Note: ') + 'your project now has only default packages installed.')
-    click.echo('To install dev-packages, run: $ {}'.format(crayons.red('pipenv init --dev')))
+    click.echo(crayons.yellow('Note: ') + 'your project now has only default {} installed.'.format(crayons.red('[packages]')))
+    click.echo('To install {}, run: $ {}'.format(crayons.red('[dev-packages]'), crayons.green('pipenv init --dev')))
 
 
 def activate_virtualenv(source=True):
@@ -162,7 +162,7 @@ def do_purge(bare=False):
         click.echo(crayons.yellow('Virtualenv now purged and fresh!'))
 
 
-def do_init(dev=False):
+def do_init(dev=False, skip_virtualenv=False):
     """Executes the init functionality."""
 
     # Assert Pipfile exists.
@@ -179,14 +179,15 @@ def do_init(dev=False):
 
     # Display where the Project is established.
     do_where(bare=False)
-    click.echo(crayons.yellow('Creating a virtualenv for this project...'))
+    if not skip_virtualenv:
+        click.echo(crayons.yellow('Creating a virtualenv for this project...'))
 
-    # Actually create the virtualenv.
-    c = delegator.run(['virtualenv', project.virtualenv_location, '--prompt=({})'.format(project.name)], block=False)
-    click.echo(crayons.blue(c.out))
+        # Actually create the virtualenv.
+        c = delegator.run(['virtualenv', project.virtualenv_location, '--prompt=({})'.format(project.name)], block=False)
+        click.echo(crayons.blue(c.out))
 
-    # Say where the virtualenv is.
-    do_where(virtualenv=True, bare=False)
+        # Say where the virtualenv is.
+        do_where(virtualenv=True, bare=False)
 
     # Write out the lockfile if it doesn't exist.
     if project.lockfile_exists:
@@ -256,12 +257,19 @@ def where(venv=False, bare=False):
 
 
 @click.command()
-@click.argument('package_name')
+@click.argument('package_name', default=False)
 @click.option('--dev','-d', is_flag=True, default=False)
-def install(package_name, dev=False):
+def install(package_name=False, dev=False):
+
+    # Install all dependencies, if none was provided.
+    if package_name is False:
+        click.echo(crayons.yellow('No package provided, installing all dependencies.'))
+        do_init(dev=dev, skip_virtualenv=True)
+        sys.exit(1)
+
     click.echo('Installing {}...'.format(crayons.green(package_name)))
 
-    c = delegator.run([which_pip(), 'install', str(package_name)])
+    c = delegator.run('{} install "{}"'.format(which_pip(), package_name))
     click.echo(crayons.blue(c.out))
 
     # Ensure that package was successfully installed.
@@ -281,8 +289,15 @@ def install(package_name, dev=False):
 
 
 @click.command()
-@click.argument('package_name')
-def uninstall(package_name):
+@click.argument('package_name', default=False)
+def uninstall(package_name=False):
+
+    # Un-install all dependencies, if none was provided.
+    if package_name is False:
+        click.echo(crayons.yellow('No package provided, un-installing all dependencies.'))
+        do_purge()
+        sys.exit(1)
+
     click.echo('Un-installing {}...'.format(crayons.green(package_name)))
 
     c = delegator.run('{} uninstall {} -y'.format(which_pip(), package_name))
@@ -317,17 +332,6 @@ def shell():
     # Interact with the new shell.
     c.interact()
 
-
-@click.command()
-@click.option('--bare', '-b', is_flag=True, default=False)
-def venv(bare=False):
-    do_activate_virtualenv(bare=bare)
-
-
-@click.command()
-def purge():
-    do_purge()
-
 @click.command()
 def check():
     click.echo(crayons.yellow('Checking PEP 508 requirements...'))
@@ -361,8 +365,6 @@ cli.add_command(uninstall)
 cli.add_command(update)
 cli.add_command(lock)
 cli.add_command(python)
-cli.add_command(venv)
-cli.add_command(purge)
 cli.add_command(check)
 cli.add_command(shell)
 
