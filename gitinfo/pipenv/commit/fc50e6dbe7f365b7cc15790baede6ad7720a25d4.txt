commit fc50e6dbe7f365b7cc15790baede6ad7720a25d4
Author: Dan Ryan <dan.ryan@canonical.com>
Date:   Fri May 29 01:53:47 2020 -0400

    Improve virtualenv and venv detection
    
    - Virtualenv and venv detection depends on more than just an envvar
    - Add improved detection mechanisms to `is_in_virtualenv()` function
    
    Signed-off-by: Dan Ryan <dan.ryan@canonical.com>

diff --git a/news/4276.feature.rst b/news/4276.feature.rst
new file mode 100644
index 00000000..c1851a02
--- /dev/null
+++ b/news/4276.feature.rst
@@ -0,0 +1 @@
+Pipenv will now detect existing ``venv`` and ``virtualenv`` based virtual environments more robustly.
diff --git a/pipenv/core.py b/pipenv/core.py
index 1938e7f5..59c7572b 100644
--- a/pipenv/core.py
+++ b/pipenv/core.py
@@ -993,8 +993,10 @@ def do_create_virtualenv(python=None, site_packages=None, pypi_mirror=None):
         f.write(vistir.misc.fs_str(project.project_directory))
     from .environment import Environment
     sources = project.pipfile_sources
+    # project.get_location_for_virtualenv is only for if we are creating a new virtualenv
+    # whereas virtualenv_location is for the current path to the runtime
     project._environment = Environment(
-        prefix=project.get_location_for_virtualenv(),
+        prefix=project.virtualenv_location,
         is_venv=True,
         sources=sources,
         pipfile=project.parsed_pipfile,
diff --git a/pipenv/environment.py b/pipenv/environment.py
index 09ea73a3..d47b2037 100644
--- a/pipenv/environment.py
+++ b/pipenv/environment.py
@@ -25,6 +25,9 @@ from .vendor import vistir
 from .utils import normalize_path, make_posix
 
 
+if False:
+    from typing import Optional
+
 BASE_WORKING_SET = pkg_resources.WorkingSet(sys.path)
 # TODO: Unittests for this class
 
@@ -469,7 +472,7 @@ class Environment(object):
         ), None)
         if pip is not None:
             return parse_version(pip.version)
-        return parse_version("19.3")
+        return parse_version("20.2")
 
     def expand_egg_links(self):
         """
diff --git a/pipenv/environments.py b/pipenv/environments.py
index 88752231..b9d89806 100644
--- a/pipenv/environments.py
+++ b/pipenv/environments.py
@@ -81,7 +81,7 @@ PIPENV_IS_CI = bool("CI" in os.environ or "TF_BUILD" in os.environ)
 
 # HACK: Prevent invalid shebangs with Homebrew-installed Python:
 # https://bugs.python.org/issue22490
-os.environ.pop("__PYVENV_LAUNCHER__", None)
+_OSX_VENV = os.environ.pop("__PYVENV_LAUNCHER__", None)
 
 # Load patched pip instead of system pip
 os.environ["PIP_SHIMS_BASE_MODULE"] = fs_str("pipenv.patched.notpip")
@@ -326,7 +326,7 @@ PIPENV_TEST_INDEX = os.environ.get("PIPENV_TEST_INDEX")
 PIPENV_USE_SYSTEM = False
 PIPENV_VIRTUALENV = None
 if "PIPENV_ACTIVE" not in os.environ and not PIPENV_IGNORE_VIRTUALENVS:
-    PIPENV_VIRTUALENV = os.environ.get("VIRTUAL_ENV")
+    PIPENV_VIRTUALENV = os.environ.get("VIRTUAL_ENV") or _OSX_VENV
     PIPENV_USE_SYSTEM = bool(PIPENV_VIRTUALENV)
 
 # Internal, tells Pipenv to skip case-checking (slow internet connections).
@@ -371,6 +371,18 @@ def is_quiet(threshold=-1):
     return PIPENV_VERBOSITY <= threshold
 
 
+def _is_using_venv():
+    # type: () -> bool
+    """Check for venv-based virtual environment which sets sys.base_prefix"""
+    return _OSX_VENV is not None or sys.prefix != getattr(sys, "base_prefix", sys.prefix)
+
+
+def _is_using_virtualenv():
+    # type: () -> bool
+    """Check for virtualenv-based environment which sets sys.real_prefix"""
+    return getattr(sys, "real_prefix", None) is not None
+
+
 def is_in_virtualenv():
     """
     Check virtualenv membership dynamically
@@ -385,7 +397,9 @@ def is_in_virtualenv():
     ignore_virtualenvs = bool(os.environ.get("PIPENV_IGNORE_VIRTUALENVS", False))
 
     if not pipenv_active and not ignore_virtualenvs:
-        virtual_env = os.environ.get("VIRTUAL_ENV")
+        virtual_env = any([
+            _is_using_virtualenv(), _is_using_venv(), os.environ.get("VIRTUAL_ENV")
+        ])
         use_system = bool(virtual_env)
     return (use_system or virtual_env) and not (pipenv_active or ignore_virtualenvs)
 
