commit 3549d287024a06a6cd15b05f781daff3f793e165
Author: Dan Ryan <dan.ryan@canonical.com>
Date:   Wed May 20 15:12:12 2020 -0400

    Update release script
    
    Signed-off-by: Dan Ryan <dan.ryan@canonical.com>

diff --git a/tasks/release.py b/tasks/release.py
index 20fd5a44..fbd1d1dc 100644
--- a/tasks/release.py
+++ b/tasks/release.py
@@ -3,6 +3,7 @@ import datetime
 import os
 import pathlib
 import re
+import sys
 
 import invoke
 
@@ -71,10 +72,29 @@ def _render_log():
     return rendered
 
 
-@invoke.task
-def release(ctx, dry_run=False):
+release_help = {
+    "manual": "Build the man pages.",
+    "dry_run": "No-op, simulate what would happen if run for real.",
+    "local": "Build package locally and upload to PyPI.",
+    "pre": "Build a pre-release version, must be paired with a tag.",
+    "tag": "A release tag, e.g. 'a', 'b', 'rc', 'post'.",
+    "month_offset": "How many months to offset the release date by.",
+}
+
+@invoke.task(help=release_help)
+def release(ctx, manual=False, local=False, dry_run=False, pre=False, tag=None, month_offset="0"):
+    trunc_month = False
+    if pre:
+        trunc_month = True
     drop_dist_dirs(ctx)
-    bump_version(ctx, dry_run=dry_run)
+    bump_version(
+        ctx,
+        dry_run=dry_run,
+        pre=pre,
+        tag=tag,
+        month_offset=month_offset,
+        trunc_month=trunc_month
+    )
     version = find_version(ctx)
     tag_content = _render_log()
     if dry_run:
@@ -84,34 +104,42 @@ def release(ctx, dry_run=False):
         log("would update: pipenv/pipenv.1")
         log(f'Would commit with message: "Release v{version}"')
     else:
-        ctx.run("towncrier")
-        ctx.run(
-            "git add CHANGELOG.rst news/ {0}".format(get_version_file(ctx).as_posix())
-        )
-        ctx.run("git rm CHANGELOG.draft.rst")
+        if pre:
+            log("generating towncrier draft...")
+            ctx.run("towncrier --draft > CHANGELOG.draft.rst")
+        else:
+            ctx.run("towncrier")
+            ctx.run(
+                "git add CHANGELOG.rst news/ {0}".format(get_version_file(ctx).as_posix())
+            )
+            log("removing changelog draft if present")
+            ctx.run("git rm CHANGELOG.draft.rst")
+        log("generating man files...")
         generate_manual(ctx)
         ctx.run("git add pipenv/pipenv.1")
         ctx.run(f'git commit -m "Release v{version}"')
 
     tag_content = tag_content.replace('"', '\\"')
-    if dry_run:
+    if dry_run or pre:
         log(f"Generated tag content: {tag_content}")
         markdown = ctx.run(
             "pandoc CHANGELOG.draft.rst -f rst -t markdown", hide=True
         ).stdout.strip()
         content = clean_mdchangelog(ctx, markdown)
         log(f"would generate markdown: {content}")
+        if pre and not dry_run:
+            ctx.run(f'git tag -a v{version} -m "Version v{version}\n\n{tag_content}"')
     else:
         generate_markdown(ctx)
         clean_mdchangelog(ctx)
         ctx.run(f'git tag -a v{version} -m "Version v{version}\n\n{tag_content}"')
-    build_dists(ctx)
-    if dry_run:
+    if dry_run or not local:
         dist_pattern = f'{PACKAGE_NAME.replace("-", "[-_]")}-*'
         artifacts = list(ROOT.joinpath("dist").glob(dist_pattern))
         filename_display = "\n".join(f"  {a}" for a in artifacts)
         log(f"Would upload dists: {filename_display}")
     else:
+        build_dists(ctx)
         upload_dists(ctx)
         bump_version(ctx, dev=True)
 
@@ -237,7 +265,7 @@ def add_one_day(dt):
 
 def date_offset(dt, month_offset=0, day_offset=0, truncate=False):
     new_month = (dt.month + month_offset) % 12
-    year_offset = month_offset // 12
+    year_offset = new_month // 12
     replace_args = {
         "month": dt.month + month_offset,
         "year": dt.year + year_offset,
@@ -285,10 +313,22 @@ def bump_version(ctx, dry_run=False, dev=False, pre=False, tag=None, commit=Fals
         if not tag:
             print('Using "pre" requires a corresponding tag.')
             return
-        if new_version.pre_tag and new_version.pre_tag != tag:
-            log("Swapping prerelease tag: {0} for {1}".format(new_version.pre_tag, tag))
-            new_version = new_version.replace(pre_tag=tag, pre=0)
-        new_version = new_version.bump_pre(tag=tag)
+        tag_version = re.match(
+            r"(?P<tag>alpha|a|beta|b|c|preview|pre|rc)(?P<version>[0-9]+)?", tag
+        )
+        tag_dict = tag_version.groupdict()
+        tag = tag_dict.get("tag", tag)
+        tag_version = int(tag_dict["version"]) if tag_dict["version"] is not None else 0
+        if new_version.dev is not None:
+            new_version = new_version.replace(dev=None)
+        if new_version.pre_tag:
+            if new_version.pre_tag != tag:
+                log("Swapping prerelease tag: {0} for {1}".format(new_version.pre_tag, tag))
+                new_version = new_version.replace(pre_tag=tag, pre=tag_version)
+        else:
+            new_version = new_version.replace(pre_tag=tag, pre=tag_version)
+        if tag_version == 0:
+            new_version = new_version.bump_pre(tag=tag)
     else:
         new_version = new_version.replace(pre=None, dev=None)
     log("Updating version to %s" % new_version.normalize())
