commit 3bc48f034fc79357324b7b71322af152aa6ec483
Author: Dan Ryan <dan@danryan.co>
Date:   Thu Feb 21 22:18:00 2019 -0500

    Fix venv with leading dash test on windows and clean up tests
    
    Signed-off-by: Dan Ryan <dan@danryan.co>

diff --git a/pipenv/_compat.py b/pipenv/_compat.py
index e8ef16e5..caba80fe 100644
--- a/pipenv/_compat.py
+++ b/pipenv/_compat.py
@@ -5,9 +5,6 @@ Exposes a standard API that enables compatibility across python versions,
 operating systems, etc.
 """
 
-import functools
-import importlib
-import io
 import os
 import sys
 import warnings
diff --git a/pipenv/environment.py b/pipenv/environment.py
index d06bae8e..2bfc5334 100644
--- a/pipenv/environment.py
+++ b/pipenv/environment.py
@@ -11,6 +11,7 @@ import sys
 from distutils.sysconfig import get_python_lib
 from sysconfig import get_paths
 
+import itertools
 import pkg_resources
 import six
 import vistir
@@ -244,7 +245,10 @@ class Environment(object):
         """
 
         pkg_resources = self.safe_import("pkg_resources")
-        return pkg_resources.find_distributions(self.paths["libdirs"])
+        libdirs = self.paths["libdirs"].split(os.pathsep)
+        dists = (pkg_resources.find_distributions(libdir) for libdir in libdirs)
+        for dist in itertools.chain.from_iterable(dists):
+            yield dist
 
     def find_egg(self, egg_dist):
         """Find an egg by name in the given environment"""
diff --git a/pipenv/project.py b/pipenv/project.py
index 7d359a8e..c71c40ea 100644
--- a/pipenv/project.py
+++ b/pipenv/project.py
@@ -29,6 +29,7 @@ from .environments import (
     PIPENV_PIPFILE, PIPENV_PYTHON, PIPENV_TEST_INDEX, PIPENV_VENV_IN_PROJECT,
     is_in_virtualenv
 )
+from .vendor.requirementslib.models.utils import get_default_pyproject_backend
 from .utils import (
     cleanup_toml, convert_toml_outline_tables, find_requirements,
     get_canonical_names, get_url_name, get_workon_home, is_editable,
@@ -526,7 +527,7 @@ class Project(object):
                 if not build_system or not build_system.get("requires"):
                     build_system = {
                         "requires": ["setuptools>=40.8.0", "wheel"],
-                        "build-backend": "setuptools.build_meta:__legacy__",
+                        "build-backend": get_default_pyproject_backend(),
                     }
                 self._build_system = build_system
 
@@ -536,7 +537,7 @@ class Project(object):
 
     @property
     def build_backend(self):
-        return self._build_system.get("build-backend", None)
+        return self._build_system.get("build-backend", get_default_pyproject_backend())
 
     @property
     def settings(self):
diff --git a/pipenv/utils.py b/pipenv/utils.py
index f2f7704e..199e2b41 100644
--- a/pipenv/utils.py
+++ b/pipenv/utils.py
@@ -36,7 +36,7 @@ from .vendor.urllib3 import util as urllib3_util
 
 
 if environments.MYPY_RUNNING:
-    from typing import Tuple, Dict, Any, List, Union, Optional
+    from typing import Tuple, Dict, Any, List, Union, Optional, Text
     from .vendor.requirementslib.models.requirements import Requirement, Line
     from .project import Project
 
diff --git a/pipenv/vendor/requirementslib/models/utils.py b/pipenv/vendor/requirementslib/models/utils.py
index c9852a7b..8ce441e2 100644
--- a/pipenv/vendor/requirementslib/models/utils.py
+++ b/pipenv/vendor/requirementslib/models/utils.py
@@ -366,7 +366,7 @@ def get_pyproject(path):
     if not pp_toml.exists():
         if not setup_py.exists():
             return None
-        requires = ["setuptools>=40.6", "wheel"]
+        requires = ["setuptools>=40.8", "wheel"]
         backend = get_default_pyproject_backend()
     else:
         pyproject_data = {}
@@ -375,10 +375,10 @@ def get_pyproject(path):
         build_system = pyproject_data.get("build-system", None)
         if build_system is None:
             if setup_py.exists():
-                requires = ["setuptools>=40.6", "wheel"]
+                requires = ["setuptools>=40.8", "wheel"]
                 backend = get_default_pyproject_backend()
             else:
-                requires = ["setuptools>=40.6", "wheel"]
+                requires = ["setuptools>=40.8", "wheel"]
                 backend = get_default_pyproject_backend()
             build_system = {
                 "requires": requires,
@@ -386,7 +386,7 @@ def get_pyproject(path):
             }
             pyproject_data["build_system"] = build_system
         else:
-            requires = build_system.get("requires", ["setuptools>=40.6", "wheel"])
+            requires = build_system.get("requires", ["setuptools>=40.8", "wheel"])
             backend = build_system.get("build-backend", get_default_pyproject_backend())
     return (requires, backend)
 
diff --git a/tests/integration/conftest.py b/tests/integration/conftest.py
index 4330eea9..1f150b75 100644
--- a/tests/integration/conftest.py
+++ b/tests/integration/conftest.py
@@ -119,6 +119,8 @@ def isolate(pathlib_tmpdir):
     os.environ["GIT_AUTHOR_EMAIL"] = fs_str("pipenv@pipenv.org")
     mkdir_p(os.path.join(home_dir, ".virtualenvs"))
     os.environ["WORKON_HOME"] = fs_str(os.path.join(home_dir, ".virtualenvs"))
+    os.environ["HOME"] = home_dir
+    mkdir_p(os.path.join(home_dir, "projects"))
     # Ignore PIPENV_ACTIVE so that it works as under a bare environment.
     os.environ.pop("PIPENV_ACTIVE", None)
     os.environ.pop("VIRTUAL_ENV", None)
@@ -194,7 +196,7 @@ class _PipenvInstance(object):
     """An instance of a Pipenv Project..."""
     def __init__(
         self, pypi=None, pipfile=True, chdir=False, path=None, home_dir=None,
-        venv_root=None, ignore_virtualenvs=True, venv_in_project=True
+        venv_root=None, ignore_virtualenvs=True, venv_in_project=True, name=None
     ):
         self.pypi = pypi
         if ignore_virtualenvs:
@@ -208,13 +210,24 @@ class _PipenvInstance(object):
 
         self.original_dir = os.path.abspath(os.curdir)
         path = path if path else os.environ.get("PIPENV_PROJECT_DIR", None)
+        if name is not None:
+            path = Path(os.environ["HOME"]) / "projects" / name
+            path.mkdir(exist_ok=True)
         if not path:
-            self._path = TemporaryDirectory(suffix='-project', prefix='pipenv-')
+            path = TemporaryDirectory(suffix='-project', prefix='pipenv-')
+        if isinstance(path, TemporaryDirectory):
+            self._path = path
             path = Path(self._path.name)
             try:
                 self.path = str(path.resolve())
             except OSError:
                 self.path = str(path.absolute())
+        elif isinstance(path, Path):
+            self._path = path
+            try:
+                self.path = str(path.resolve())
+            except OSError:
+                self.path = str(path.absolute())
         else:
             self._path = path
             self.path = path
@@ -245,7 +258,7 @@ class _PipenvInstance(object):
         if self.chdir:
             os.chdir(self.original_dir)
         self.path = None
-        if self._path:
+        if self._path and getattr(self._path, "cleanup", None):
             try:
                 self._path.cleanup()
             except OSError as e:
diff --git a/tests/integration/test_pipenv.py b/tests/integration/test_pipenv.py
index 9db76d28..27d31799 100644
--- a/tests/integration/test_pipenv.py
+++ b/tests/integration/test_pipenv.py
@@ -5,12 +5,8 @@ XXX: Try our best to reduce tests in this file.
 
 import os
 
-from tempfile import mkdtemp
-
-import mock
 import pytest
 
-from pipenv._compat import Path
 from pipenv.project import Project
 from pipenv.utils import temp_environ
 from pipenv.vendor import delegator
@@ -93,22 +89,16 @@ def test_proper_names_unamanged_virtualenv(PipenvInstance, pypi):
 
 
 @pytest.mark.cli
-def test_directory_with_leading_dash(PipenvInstance):
-    def mocked_mkdtemp(suffix, prefix, dir):
-        if suffix == '-project':
-            prefix = '-dir-with-leading-dash'
-        return mkdtemp(suffix, prefix, dir)
-
-    with mock.patch('pipenv.vendor.vistir.compat.mkdtemp', side_effect=mocked_mkdtemp):
-        with temp_environ(), PipenvInstance(chdir=True) as p:
-            if "PIPENV_VENV_IN_PROJECT" in os.environ:
-                del os.environ['PIPENV_VENV_IN_PROJECT']
-            c = p.pipenv('--python python')
-            assert c.return_code == 0
-            c = p.pipenv('--venv')
-            assert c.return_code == 0
-            venv_path = c.out.strip()
-            assert os.path.isdir(venv_path)
-            # Manually clean up environment, since PipenvInstance assumes that
-            # the virutalenv is in the project directory.
-            p.pipenv('--rm')
+def test_directory_with_leading_dash(monkeypatch, PipenvInstance):
+    with temp_environ(), PipenvInstance(chdir=True, venv_in_project=False, name="-project-with-dash") as p:
+        if "PIPENV_VENV_IN_PROJECT" in os.environ:
+            del os.environ['PIPENV_VENV_IN_PROJECT']
+        c = p.pipenv('run pip freeze')
+        assert c.return_code == 0
+        c = p.pipenv('--venv')
+        assert c.return_code == 0
+        venv_path = c.out.strip()
+        assert os.path.isdir(venv_path)
+        # Manually clean up environment, since PipenvInstance assumes that
+        # the virutalenv is in the project directory.
+        p.pipenv('--rm')
