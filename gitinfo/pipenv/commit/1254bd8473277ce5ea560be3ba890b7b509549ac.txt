commit 1254bd8473277ce5ea560be3ba890b7b509549ac
Author: Kenneth Reitz <me@kennethreitz.org>
Date:   Tue Sep 5 15:54:15 2017 -0400

    introduction of $PIPENV_USE_HASHES
    
    Signed-off-by: Kenneth Reitz <me@kennethreitz.org>

diff --git a/docs/advanced.rst b/docs/advanced.rst
index 53da67d8..2d9d5f25 100644
--- a/docs/advanced.rst
+++ b/docs/advanced.rst
@@ -191,11 +191,11 @@ The user can provide these additional parameters:
     .. warning:: None of the above commands should be used together. They are also
                  **destructive** and will delete your current virtualenv before replacing
                  it with an appropriately versioned one.
-                 
+
     .. note:: The virtualenv created by Pipenv may be different from what you were expecting.
-              Dangerous characters (i.e. ``$`!*@"`` as well as space, line feed, carriage return, 
-              and tab) are converted to underscores. Additionally, the full path to the current 
-              folder is encoded into a "slug value" and appended to ensure the virtualenv name 
+              Dangerous characters (i.e. ``$`!*@"`` as well as space, line feed, carriage return,
+              and tab) are converted to underscores. Additionally, the full path to the current
+              folder is encoded into a "slug value" and appended to ensure the virtualenv name
               is unique.
 
     - ``--dev`` — Install both ``develop`` and ``default`` packages from ``Pipfile.lock``.
@@ -230,6 +230,7 @@ $ pipenv lock
 variables. To activate them, simply create the variable in your shell and pipenv
 will detect it.
 
+    - ``PIPENV_USE_HASHES`` — Tells Pipenv to use the ``--hashes`` mode automatically.
     - ``PIPENV_SHELL_COMPAT`` — Toggle from our default ``pipenv shell`` mode to classic.
                                   (Suggested for use with pyenv).
 
diff --git a/pipenv/cli.py b/pipenv/cli.py
index 50133801..1a7366f6 100644
--- a/pipenv/cli.py
+++ b/pipenv/cli.py
@@ -28,7 +28,7 @@ from .utils import (convert_deps_from_pip, convert_deps_to_pip, is_required_vers
 from .__version__ import __version__
 from . import pep508checker, progress
 from .environments import (PIPENV_COLORBLIND, PIPENV_NOSPIN, PIPENV_SHELL_COMPAT,
-    PIPENV_VENV_IN_PROJECT, PIPENV_USE_SYSTEM, PIPENV_TIMEOUT)
+    PIPENV_VENV_IN_PROJECT, PIPENV_USE_SYSTEM, PIPENV_TIMEOUT, PIPENV_USE_HASHES)
 
 # Backport required for earlier versions of Python.
 if sys.version_info < (3, 3):
@@ -871,7 +871,7 @@ def cli(ctx, where=False, venv=False, rm=False, bare=False, three=False, python=
 @click.option('--python', default=False, nargs=1, help="Specify which version of Python virtualenv should use.")
 @click.option('--system', is_flag=True, default=False, help="System pip management.")
 @click.option('--lock', is_flag=True, default=True, help="Lock afterwards.")
-@click.option('--hashes', is_flag=True, default=False, help="Use hashes.")
+@click.option('--hashes', is_flag=True, default=PIPENV_USE_HASHES, help="Use hashes.")
 @click.option('--ignore-pipfile', is_flag=True, default=False, help="Ignore Pipfile when installing, using the Pipfile.lock.")
 @click.option('--skip-lock', is_flag=True, default=False, help="Ignore locking mechanisms when installing—use the Pipfile, instead.")
 def install(package_name=False, more_packages=False, dev=False, three=False, python=False, system=False, lock=False, hashes=True, ignore_pipfile=False, skip_lock=False):
@@ -944,7 +944,7 @@ def install(package_name=False, more_packages=False, dev=False, three=False, pyt
 @click.option('--python', default=False, nargs=1, help="Specify which version of Python virtualenv should use.")
 @click.option('--system', is_flag=True, default=False, help="System pip management.")
 @click.option('--lock', is_flag=True, default=True, help="Lock afterwards.")
-@click.option('--hashes', is_flag=True, default=False, help="Generate hashes, if locking.")
+@click.option('--hashes', is_flag=True, default=PIPENV_USE_HASHES, help="Generate hashes, if locking.")
 @click.option('--dev', '-d', is_flag=True, default=False, help="Un-install all package from [dev-packages].")
 @click.option('--all', is_flag=True, default=False, help="Purge all package(s) from virtualenv. Does not edit Pipfile.")
 def uninstall(package_name=False, more_packages=False, three=None, python=False, system=False, lock=False, hashes=False, dev=False, all=False):
diff --git a/pipenv/environments.py b/pipenv/environments.py
index 71ac13bc..6c740141 100644
--- a/pipenv/environments.py
+++ b/pipenv/environments.py
@@ -25,6 +25,9 @@ PIPENV_MAX_DEPTH = int(os.environ.get('PIPENV_MAX_DEPTH', '3')) + 1
 # Tells Pipenv to use the virtualenv-provided pip instead.
 PIPENV_USE_SYSTEM = os.environ.get('VIRTUAL_ENV') if 'PIPENV_IGNORE_VIRTUALENVS' not in os.environ else False
 
+# Tells Pipenv to use hashing mode.
+PIPENV_USE_HASHES = os.environ.get('PIPENV_USE_HASHES')
+
 # Use shell compatibility mode when using venv in project mode.
 if PIPENV_VENV_IN_PROJECT:
     PIPENV_SHELL_COMPAT = True
