commit c5e7ac933d6035bfc238d05a130bf50285a65e7c
Author: Ed Morley <edmorley@users.noreply.github.com>
Date:   Thu May 25 20:24:52 2017 +0100

    Whitespace cleanup for flake8
    
    pipenv/cli.py:264:1: W293 blank line contains whitespace
    pipenv/cli.py:546:1: E302 expected 2 blank lines, found 1
    pipenv/environments.py:31:25: W292 no newline at end of file
    pipenv/progress.py:171:23: W292 no newline at end of file
    pipenv/utils.py:20:1: E302 expected 2 blank lines, found 1
    pipenv/utils.py:206:6: E114 indentation is not a multiple of four (comment)
    tests/test_project.py:8:1: E302 expected 2 blank lines, found 1
    tests/test_utils.py:7:1: E302 expected 2 blank lines, found 1
    tests/test_utils.py:75:5: E303 too many blank lines (2)
    tests/test_utils.py:113:5: E303 too many blank lines (2)
    tests/test_utils.py:124:5: E303 too many blank lines (2)
    tests/test_utils.py:135:5: E303 too many blank lines (2)

diff --git a/pipenv/cli.py b/pipenv/cli.py
index 2896be33..cf9f5b45 100644
--- a/pipenv/cli.py
+++ b/pipenv/cli.py
@@ -261,7 +261,7 @@ def do_install_dependencies(dev=False, only=False, bare=False, requirements=Fals
 
     # pip install:
     for dep in progress.bar(hashed_deps):
-        
+
         c = pip_install(dep, ignore_hashes=ignore_hashes, allow_global=allow_global)
 
         if c.return_code != 0:
@@ -543,6 +543,7 @@ def do_activate_virtualenv(bare=False):
         else:
             click.echo(activate_virtualenv())
 
+
 def do_purge(bare=False, downloads=False, allow_global=False):
     """Executes the purge functionality."""
 
diff --git a/pipenv/environments.py b/pipenv/environments.py
index 25e13b43..f4cd81aa 100644
--- a/pipenv/environments.py
+++ b/pipenv/environments.py
@@ -28,4 +28,4 @@ if PIPENV_VENV_IN_PROJECT:
 
 # Disable spinner on windows.
 if os.name == 'nt':
-    PIPENV_NOSPIN = True
\ No newline at end of file
+    PIPENV_NOSPIN = True
diff --git a/pipenv/progress.py b/pipenv/progress.py
index 1d1fff55..b590bda9 100644
--- a/pipenv/progress.py
+++ b/pipenv/progress.py
@@ -168,4 +168,4 @@ def mill(it, label='', hide=None, expected_size=None, every=1):
 
     if not hide:
         STREAM.write('\n')
-        STREAM.flush()
\ No newline at end of file
+        STREAM.flush()
diff --git a/pipenv/utils.py b/pipenv/utils.py
index ced5030d..f933d7ce 100644
--- a/pipenv/utils.py
+++ b/pipenv/utils.py
@@ -12,6 +12,7 @@ VCS_LIST = ('git', 'svn', 'hg', 'bzr')
 
 requests = requests.session()
 
+
 def format_toml(data):
     """Pretty-formats a given toml string."""
     data = data.split('\n')
@@ -198,7 +199,7 @@ def split_vcs(split_file):
     elif 'default' in split_file or 'develop' in split_file:
         sections = ('default', 'develop')
 
-     # For each vcs entry in a given section, move it to section-vcs.
+    # For each vcs entry in a given section, move it to section-vcs.
     for section in sections:
         entries = split_file.get(section, {})
         vcs_dict = dict((k, entries.pop(k)) for k in list(entries.keys()) if is_vcs(entries[k]))
diff --git a/tests/test_project.py b/tests/test_project.py
index f5a78e43..9ab5b1fc 100644
--- a/tests/test_project.py
+++ b/tests/test_project.py
@@ -5,6 +5,7 @@ import delegator
 
 import pipenv.project
 
+
 class TestProject():
 
     def test_project(self):
diff --git a/tests/test_utils.py b/tests/test_utils.py
index 654478e0..49e0a021 100644
--- a/tests/test_utils.py
+++ b/tests/test_utils.py
@@ -4,6 +4,7 @@ import pytest
 
 import pipenv.utils
 
+
 class TestUtils:
 
     """Test utility functions in pipenv"""
@@ -71,7 +72,6 @@ class TestUtils:
         deps = pipenv.utils.convert_deps_to_pip(deps, r=False)
         assert deps[0] == 'django==1.10'
 
-
     def test_convert_from_pip(self):
 
         # requests
@@ -109,7 +109,6 @@ class TestUtils:
             dep = pipenv.utils.convert_deps_from_pip(dep)
             assert 'pipenv requires an #egg fragment for vcs' in str(e)
 
-
     @pytest.mark.parametrize('version, specified_ver, expected', [
         ('*', '*', True),
         ('2.1.6', '==2.1.4', False),
@@ -120,7 +119,6 @@ class TestUtils:
     def test_is_required_version(self, version, specified_ver, expected):
         assert pipenv.utils.is_required_version(version, specified_ver) is expected
 
-
     @pytest.mark.parametrize('entry, expected', [
         ({'git': 'package.git', 'ref': 'v0.0.1'}, True),
         ({'hg': 'https://package.com/package', 'ref': 'v1.2.3'}, True),
@@ -131,7 +129,6 @@ class TestUtils:
     def test_is_vcs(self, entry, expected):
         assert pipenv.utils.is_vcs(entry) is expected
 
-
     def test_split_vcs(self):
         pipfile_dict = {
                         'packages': {
