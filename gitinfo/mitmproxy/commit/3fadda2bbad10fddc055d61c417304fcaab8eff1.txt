commit 3fadda2bbad10fddc055d61c417304fcaab8eff1
Author: Thomas Kriechbaumer <thomas@kriechbaumer.name>
Date:   Wed May 17 10:33:35 2017 +0800

    fix pragmas

diff --git a/mitmproxy/net/tcp.py b/mitmproxy/net/tcp.py
index 5ed4aa06..b4c4ac64 100644
--- a/mitmproxy/net/tcp.py
+++ b/mitmproxy/net/tcp.py
@@ -520,7 +520,7 @@ class _Connection:
                 def alpn_select_callback(conn_, options):
                     if alpn_select in options:
                         return bytes(alpn_select)
-                    else:  # pragma no cover
+                    else:  # pragma: no cover
                         return options[0]
                 context.set_alpn_select_callback(alpn_select_callback)
             elif alpn_select_callback is not None and alpn_select is None:
diff --git a/pathod/protocols/http2.py b/pathod/protocols/http2.py
index 7c88c5c7..cfc71650 100644
--- a/pathod/protocols/http2.py
+++ b/pathod/protocols/http2.py
@@ -247,13 +247,13 @@ class HTTP2StateProtocol:
         raw_bytes = frm.serialize()
         self.tcp_handler.wfile.write(raw_bytes)
         self.tcp_handler.wfile.flush()
-        if not hide and self.dump_frames:  # pragma no cover
+        if not hide and self.dump_frames:  # pragma: no cover
             print(">> " + repr(frm))
 
     def read_frame(self, hide=False):
         while True:
             frm = http2.parse_frame(*http2.read_raw_frame(self.tcp_handler.rfile))
-            if not hide and self.dump_frames:  # pragma no cover
+            if not hide and self.dump_frames:  # pragma: no cover
                 print("<< " + repr(frm))
 
             if isinstance(frm, hyperframe.frame.PingFrame):
@@ -337,7 +337,7 @@ class HTTP2StateProtocol:
         if end_stream:
             frms[0].flags.add('END_STREAM')
 
-        if self.dump_frames:  # pragma no cover
+        if self.dump_frames:  # pragma: no cover
             for frm in frms:
                 print(">> ", repr(frm))
 
@@ -355,7 +355,7 @@ class HTTP2StateProtocol:
             data=body[i:i + chunk_size]) for i in chunks]
         frms[-1].flags.add('END_STREAM')
 
-        if self.dump_frames:  # pragma no cover
+        if self.dump_frames:  # pragma: no cover
             for frm in frms:
                 print(">> ", repr(frm))
 
