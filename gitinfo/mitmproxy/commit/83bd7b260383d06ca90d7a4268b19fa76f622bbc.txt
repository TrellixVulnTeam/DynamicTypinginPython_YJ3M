commit 83bd7b260383d06ca90d7a4268b19fa76f622bbc
Author: Maximilian Hils <git@maximilianhils.com>
Date:   Tue Feb 2 14:33:36 2016 +0100

    turn script reloader off by default outside mitmdump/mitmproxy

diff --git a/libmproxy/console/__init__.py b/libmproxy/console/__init__.py
index 80a6e28a..ad3f4306 100644
--- a/libmproxy/console/__init__.py
+++ b/libmproxy/console/__init__.py
@@ -251,6 +251,10 @@ class ConsoleMaster(flow.FlowMaster):
         self.__dict__[name] = value
         signals.update_settings.send(self)
 
+    def load_script(self, command, use_reloader=True):
+        # We default to using the reloader in the console ui.
+        super(ConsoleMaster, self).load_script(command, use_reloader)
+
     def sig_add_event(self, sender, e, level):
         needed = dict(error=0, info=1, debug=2).get(level, 1)
         if self.options.verbosity < needed:
diff --git a/libmproxy/dump.py b/libmproxy/dump.py
index 65e212bf..95be2d27 100644
--- a/libmproxy/dump.py
+++ b/libmproxy/dump.py
@@ -119,7 +119,7 @@ class DumpMaster(flow.FlowMaster):
 
         scripts = options.scripts or []
         for command in scripts:
-            err = self.load_script(command)
+            err = self.load_script(command, use_reloader=True)
             if err:
                 raise DumpError(err)
 
diff --git a/libmproxy/flow.py b/libmproxy/flow.py
index 9fe21810..ac0d0fbb 100644
--- a/libmproxy/flow.py
+++ b/libmproxy/flow.py
@@ -677,17 +677,17 @@ class FlowMaster(controller.Master):
         script.reloader.unwatch(script_obj)
         self.scripts.remove(script_obj)
 
-    def load_script(self, command, use_reloader=True):
+    def load_script(self, command, use_reloader=False):
         """
             Loads a script. Returns an error description if something went
             wrong.
         """
         try:
             s = script.Script(command, script.ScriptContext(self))
-            if use_reloader:
-                script.reloader.watch(s, lambda: self.masterq.put(("script_change", s)))
         except script.ScriptException as v:
             return v.args[0]
+        if use_reloader:
+            script.reloader.watch(s, lambda: self.masterq.put(("script_change", s)))
         self.scripts.append(s)
 
     def _run_single_script_hook(self, script_obj, name, *args, **kwargs):
