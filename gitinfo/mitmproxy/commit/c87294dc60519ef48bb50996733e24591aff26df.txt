commit c87294dc60519ef48bb50996733e24591aff26df
Author: sanlengjingvv <lankeren123543@gmail.com>
Date:   Sun Jun 28 00:51:44 2020 +0800

    move trailers to response and default None

diff --git a/mitmproxy/http.py b/mitmproxy/http.py
index 78878a81..bf38a78e 100644
--- a/mitmproxy/http.py
+++ b/mitmproxy/http.py
@@ -97,6 +97,7 @@ class HTTPResponse(http.Response):
             reason,
             headers,
             content,
+            trailers=None,
             timestamp_start=None,
             timestamp_end=None,
             is_replay=False
@@ -108,6 +109,7 @@ class HTTPResponse(http.Response):
             reason,
             headers,
             content,
+            trailers,
             timestamp_start=timestamp_start,
             timestamp_end=timestamp_end,
         )
@@ -127,6 +129,7 @@ class HTTPResponse(http.Response):
             reason=response.data.reason,
             headers=response.data.headers,
             content=response.data.content,
+            trailers=response.data.trailers,
             timestamp_start=response.data.timestamp_start,
             timestamp_end=response.data.timestamp_end,
         )
@@ -140,7 +143,6 @@ class HTTPFlow(flow.Flow):
     """
     request: HTTPRequest
     response: Optional[HTTPResponse] = None
-    trailers: Optional[http.Headers] = None
     error: Optional[flow.Error] = None
     """
     Note that it's possible for a Flow to have both a response and an error
diff --git a/mitmproxy/io/compat.py b/mitmproxy/io/compat.py
index cddb8b01..091a5db2 100644
--- a/mitmproxy/io/compat.py
+++ b/mitmproxy/io/compat.py
@@ -30,6 +30,7 @@ def convert_013_014(data):
         str(x) for x in data[b"response"].pop(b"httpversion")).encode()
     data[b"response"][b"status_code"] = data[b"response"].pop(b"code")
     data[b"response"][b"body"] = data[b"response"].pop(b"content")
+    data[b"response"][b"trailers"] = None
     data[b"server_conn"].pop(b"state")
     data[b"server_conn"][b"via"] = None
     data[b"version"] = (0, 14)
diff --git a/mitmproxy/net/http/http1/read.py b/mitmproxy/net/http/http1/read.py
index a9585d7d..0f60c8f4 100644
--- a/mitmproxy/net/http/http1/read.py
+++ b/mitmproxy/net/http/http1/read.py
@@ -98,7 +98,7 @@ def read_response_head(rfile):
         # more accurate timestamp_start
         timestamp_start = rfile.first_byte_timestamp
 
-    return response.Response(http_version, status_code, message, headers, None, timestamp_start)
+    return response.Response(http_version, status_code, message, headers, None, None, timestamp_start)
 
 
 def read_body(rfile, expected_size, limit=None, max_chunk_size=4096):
diff --git a/mitmproxy/net/http/response.py b/mitmproxy/net/http/response.py
index c4dbf408..edd8d4a6 100644
--- a/mitmproxy/net/http/response.py
+++ b/mitmproxy/net/http/response.py
@@ -22,6 +22,7 @@ class ResponseData(message.MessageData):
         reason=None,
         headers=(),
         content=None,
+        trailers=None,
         timestamp_start=None,
         timestamp_end=None
     ):
@@ -39,6 +40,7 @@ class ResponseData(message.MessageData):
         self.reason = reason
         self.headers = headers
         self.content = content
+        self.trailers = trailers
         self.timestamp_start = timestamp_start
         self.timestamp_end = timestamp_end
 
diff --git a/mitmproxy/proxy/protocol/http.py b/mitmproxy/proxy/protocol/http.py
index be05cd29..d4586079 100644
--- a/mitmproxy/proxy/protocol/http.py
+++ b/mitmproxy/proxy/protocol/http.py
@@ -408,7 +408,7 @@ class HttpLayer(base.Layer):
 
             self.log("response", "debug", [repr(f.response)])
             if hasattr(self, 'has_tailers') and self.has_tailers:
-                f.trailers = self.read_trailers_headers()
+                f.response.data.trailers = self.read_trailers_headers()
             self.channel.ask("response", f)
 
             if not f.response.stream:
diff --git a/mitmproxy/tools/web/app.py b/mitmproxy/tools/web/app.py
index f6f97592..2bbb6034 100644
--- a/mitmproxy/tools/web/app.py
+++ b/mitmproxy/tools/web/app.py
@@ -93,8 +93,9 @@ def flow_to_json(flow: mitmproxy.flow.Flow) -> dict:
                 "timestamp_end": flow.response.timestamp_end,
                 "is_replay": flow.response.is_replay,
             }
-        if flow.trailers:
-            f["trailers"] = tuple(flow.trailers.items(True))
+            if flow.response.data.trailers:
+                f["response"]["trailers"] = tuple(flow.response.data.trailers.items(True))
+
     f.get("server_conn", {}).pop("cert", None)
     f.get("client_conn", {}).pop("mitmcert", None)
 
