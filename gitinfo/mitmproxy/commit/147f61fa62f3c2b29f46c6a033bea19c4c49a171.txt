commit 147f61fa62f3c2b29f46c6a033bea19c4c49a171
Author: Shadab Zafar <dufferzafar0@gmail.com>
Date:   Thu Jul 7 19:37:33 2016 +0530

    py3++

diff --git a/mitmproxy/contentviews.py b/mitmproxy/contentviews.py
index 331a706f..706fa5ed 100644
--- a/mitmproxy/contentviews.py
+++ b/mitmproxy/contentviews.py
@@ -172,7 +172,7 @@ class ViewHex(View):
     def _format(data):
         for offset, hexa, s in strutils.hexdump(data):
             yield [
-                ("offset", offset + " "),
+                ("offset", offset + b" "),
                 ("text", hexa + "   "),
                 ("text", s)
             ]
diff --git a/mitmproxy/dump.py b/mitmproxy/dump.py
index 3625d86e..10465b63 100644
--- a/mitmproxy/dump.py
+++ b/mitmproxy/dump.py
@@ -244,21 +244,21 @@ class DumpMaster(flow.FlowMaster):
             stickycookie = ""
 
         if flow.client_conn:
-            client = click.style(strutils.bytes_to_escaped_str(flow.client_conn.address.host), bold=True)
+            client = click.style(strutils.escape_control_characters(flow.client_conn.address.host), bold=True)
         else:
             client = click.style("[replay]", fg="yellow", bold=True)
 
-        method = flow.request.data.method
+        method = flow.request.method
         method_color = dict(
             GET="green",
             DELETE="red"
         ).get(method.upper(), "magenta")
-        method = click.style(strutils.bytes_to_escaped_str(method), fg=method_color, bold=True)
+        method = click.style(strutils.escape_control_characters(method), fg=method_color, bold=True)
         if self.showhost:
             url = flow.request.pretty_url
         else:
             url = flow.request.url
-        url = click.style(url, bold=True)
+        url = click.style(strutils.escape_control_characters(url), bold=True)
 
         httpversion = ""
         if flow.request.http_version not in ("HTTP/1.1", "HTTP/1.0"):
@@ -288,7 +288,7 @@ class DumpMaster(flow.FlowMaster):
         elif 400 <= code < 600:
             code_color = "red"
         code = click.style(str(code), fg=code_color, bold=True, blink=(code == 418))
-        reason = click.style(strutils.bytes_to_escaped_str(flow.response.data.reason), fg=code_color, bold=True)
+        reason = click.style(strutils.escape_control_characters(flow.response.reason), fg=code_color, bold=True)
 
         if flow.response.content is None:
             size = "(content missing)"
diff --git a/test/mitmproxy/test_dump.py b/test/mitmproxy/test_dump.py
index 18de09d5..263c8b3d 100644
--- a/test/mitmproxy/test_dump.py
+++ b/test/mitmproxy/test_dump.py
@@ -40,7 +40,7 @@ def test_strfuncs():
     flow.response.status_code = 300
     m.echo_flow(flow)
 
-    flow = tutils.tflow(resp=netlib.tutils.tresp(content="{"))
+    flow = tutils.tflow(resp=netlib.tutils.tresp(content=b"{"))
     flow.response.headers["content-type"] = "application/json"
     flow.response.status_code = 400
     m.echo_flow(flow)
@@ -70,15 +70,20 @@ class TestDumpMaster(mastertest.MasterTest):
 
     def test_basic(self):
         for i in (1, 2, 3):
-            assert "GET" in self.dummy_cycle(self.mkmaster("~s", flow_detail=i), 1, "")
             assert "GET" in self.dummy_cycle(
                 self.mkmaster("~s", flow_detail=i),
                 1,
-                "\x00\x00\x00"
+                b""
             )
             assert "GET" in self.dummy_cycle(
                 self.mkmaster("~s", flow_detail=i),
-                1, "ascii"
+                1,
+                b"\x00\x00\x00"
+            )
+            assert "GET" in self.dummy_cycle(
+                self.mkmaster("~s", flow_detail=i),
+                1,
+                b"ascii"
             )
 
     def test_error(self):
@@ -115,12 +120,12 @@ class TestDumpMaster(mastertest.MasterTest):
             o = dump.Options(server_replay=[p], kill=True)
             m = dump.DumpMaster(None, o, outfile=cs)
 
-            self.cycle(m, "content")
-            self.cycle(m, "content")
+            self.cycle(m, b"content")
+            self.cycle(m, b"content")
 
             o = dump.Options(server_replay=[p], kill=False)
             m = dump.DumpMaster(None, o, outfile=cs)
-            self.cycle(m, "nonexistent")
+            self.cycle(m, b"nonexistent")
 
             o = dump.Options(client_replay=[p], kill=False)
             m = dump.DumpMaster(None, o, outfile=cs)
@@ -131,7 +136,7 @@ class TestDumpMaster(mastertest.MasterTest):
             self.flowfile(p)
             assert "GET" in self.dummy_cycle(
                 self.mkmaster(None, flow_detail=1, rfile=p),
-                0, "",
+                0, b"",
             )
 
             tutils.raises(
@@ -149,7 +154,7 @@ class TestDumpMaster(mastertest.MasterTest):
 
     def test_filter(self):
         assert "GET" not in self.dummy_cycle(
-            self.mkmaster("~u foo", verbosity=1), 1, ""
+            self.mkmaster("~u foo", verbosity=1), 1, b""
         )
 
     def test_app(self):
@@ -162,21 +167,21 @@ class TestDumpMaster(mastertest.MasterTest):
         cs = StringIO()
         o = dump.Options(replacements=[(".*", "content", "foo")])
         m = dump.DumpMaster(None, o, outfile=cs)
-        f = self.cycle(m, "content")
-        assert f.request.content == "foo"
+        f = self.cycle(m, b"content")
+        assert f.request.content == b"foo"
 
     def test_setheader(self):
         cs = StringIO()
         o = dump.Options(setheaders=[(".*", "one", "two")])
         m = dump.DumpMaster(None, o, outfile=cs)
-        f = self.cycle(m, "content")
+        f = self.cycle(m, b"content")
         assert f.request.headers["one"] == "two"
 
     def test_write(self):
         with tutils.tmpdir() as d:
             p = os.path.join(d, "a")
             self.dummy_cycle(
-                self.mkmaster(None, outfile=(p, "wb"), verbosity=0), 1, ""
+                self.mkmaster(None, outfile=(p, "wb"), verbosity=0), 1, b""
             )
             assert len(list(flow.FlowReader(open(p, "rb")).stream())) == 1
 
@@ -185,11 +190,11 @@ class TestDumpMaster(mastertest.MasterTest):
             p = os.path.join(d, "a.append")
             self.dummy_cycle(
                 self.mkmaster(None, outfile=(p, "wb"), verbosity=0),
-                1, ""
+                1, b""
             )
             self.dummy_cycle(
                 self.mkmaster(None, outfile=(p, "ab"), verbosity=0),
-                1, ""
+                1, b""
             )
             assert len(list(flow.FlowReader(open(p, "rb")).stream())) == 2
 
@@ -205,7 +210,7 @@ class TestDumpMaster(mastertest.MasterTest):
                 None,
                 scripts=[tutils.test_data.path("data/scripts/all.py")], verbosity=1
             ),
-            1, "",
+            1, b"",
         )
         assert "XCLIENTCONNECT" in ret
         assert "XSERVERCONNECT" in ret
@@ -226,11 +231,11 @@ class TestDumpMaster(mastertest.MasterTest):
     def test_stickycookie(self):
         self.dummy_cycle(
             self.mkmaster(None, stickycookie = ".*"),
-            1, ""
+            1, b""
         )
 
     def test_stickyauth(self):
         self.dummy_cycle(
             self.mkmaster(None, stickyauth = ".*"),
-            1, ""
+            1, b""
         )
