commit 26c8437e884f310ea80ed31209d3c926ced400e5
Author: Aldo Cortesi <aldo@nullcube.com>
Date:   Thu Jun 7 14:05:42 2012 +1200

    Better test daemon cleanup, improve utils test coverage.

diff --git a/libpathod/pathod.py b/libpathod/pathod.py
index 6012abc1..ae7aa5ca 100644
--- a/libpathod/pathod.py
+++ b/libpathod/pathod.py
@@ -261,5 +261,4 @@ def make_server(application, port, address, ssl_options):
 def run(server):
     tornado.ioloop.IOLoop.instance().start()
     server.stop()
-    tornado.ioloop.IOLoop.instance().close()
 
diff --git a/libpathod/utils.py b/libpathod/utils.py
index 46b252dd..0e3bda9d 100644
--- a/libpathod/utils.py
+++ b/libpathod/utils.py
@@ -67,14 +67,5 @@ class Data:
             raise ValueError, "dataPath: %s does not exist."%fullpath
         return fullpath
 
-    def read(self, path):
-        """
-            Returns a path to the package data housed at 'path' under this
-            module.Path can be a path to a file, or to a directory.
-
-            This function will raise ValueError if the path does not exist.
-        """
-        p = self.path(path)
-        return open(p).read()
 
 data = Data(__name__)
diff --git a/test/test_utils.py b/test/test_utils.py
index f8c7edb7..eb658e96 100644
--- a/test/test_utils.py
+++ b/test/test_utils.py
@@ -5,10 +5,17 @@ from libpathod import utils
 class uparse_anchor_spec(libpry.AutoTree):
     def test_simple(self):
         assert utils.parse_anchor_spec("foo=200", {}) == ("foo", "200")
+        libpry.raises(utils.AnchorError, utils.parse_anchor_spec, "foobar", {})
         libpry.raises(utils.AnchorError, utils.parse_anchor_spec, "*=200", {})
         libpry.raises(utils.AnchorError, utils.parse_anchor_spec, "foo=bar", {})
 
 
+class udata_path(libpry.AutoTree):
+    def test_simple(self):
+        libpry.raises(ValueError, utils.data.path, "nonexistent")
+
+
 tests = [
+    udata_path(),
     uparse_anchor_spec()
 ]
