commit 544b1e32389d28df4a40013ea6886f1f9d61e37d
Author: Clemens <cle1000.cb@gmail.com>
Date:   Mon Jul 11 19:49:58 2016 +0200

    modify flow content

diff --git a/mitmproxy/web/app.py b/mitmproxy/web/app.py
index f9d0dca6..8434818d 100644
--- a/mitmproxy/web/app.py
+++ b/mitmproxy/web/app.py
@@ -245,6 +245,9 @@ class FlowHandler(RequestHandler):
                         request.port = int(v)
                     elif k == "headers":
                         request.headers.set_state(v)
+                    elif k == "content":
+                        print(v)
+                        response.content = str(v)
                     else:
                         print("Warning: Unknown update {}.{}: {}".format(a, k, v))
 
@@ -259,6 +262,9 @@ class FlowHandler(RequestHandler):
                         response.http_version = str(v)
                     elif k == "headers":
                         response.headers.set_state(v)
+                    elif k == "content":
+                        print(v)
+                        response.content = str(v)
                     else:
                         print("Warning: Unknown update {}.{}: {}".format(a, k, v))
             else:
diff --git a/web/package.json b/web/package.json
index 55106cb8..1484961d 100644
--- a/web/package.json
+++ b/web/package.json
@@ -3,7 +3,7 @@
   "private": true,
   "scripts": {
     "test": "jest",
-    "build": "gulp prod",
+    "build": "gulp dev",
     "start": "gulp"
   },
   "jest": {
@@ -28,7 +28,8 @@
     "redux": "^3.5.2",
     "redux-logger": "^2.6.1",
     "redux-thunk": "^2.1.0",
-    "shallowequal": "^0.2.2"
+    "shallowequal": "^0.2.2",
+    "monaco-editor": "^0.5.1"
   },
   "devDependencies": {
     "babel-core": "^6.7.7",
diff --git a/web/src/js/app.jsx b/web/src/js/app.jsx
index bd2d3d58..51b2b639 100644
--- a/web/src/js/app.jsx
+++ b/web/src/js/app.jsx
@@ -12,7 +12,7 @@ import { add as addLog } from './ducks/eventLog'
 
 const middlewares = [thunk];
 
-if (process.env.NODE_ENV === 'development') {
+if (process.env.NODE_ENV === 'development' || true) {
   const createLogger = require('redux-logger');
   middlewares.push(createLogger());
 }
diff --git a/web/src/js/components/ContentView.jsx b/web/src/js/components/ContentView.jsx
index 1533684e..f6dbe90a 100644
--- a/web/src/js/components/ContentView.jsx
+++ b/web/src/js/components/ContentView.jsx
@@ -59,11 +59,11 @@ export default class ContentView extends Component {
         return (
             <div>
                 {View.textView ? (
-                    <ContentLoader flow={flow} message={message}>
-                        <this.state.View content="" />
+                    <ContentLoader  flow={flow} message={message}>
+                        <this.state.View onChange={this.props.onChange} content="" />
                     </ContentLoader>
                 ) : (
-                    <View flow={flow} message={message} />
+                    <View flow={flow} onChange={this.props.onChange}  message={message} />
                 )}
                 <div className="view-options text-center">
                     <ViewSelector onSelectView={this.selectView} active={View} message={message}/>
diff --git a/web/src/js/components/ContentView/ContentViews.jsx b/web/src/js/components/ContentView/ContentViews.jsx
index b0297dcc..e5a864bf 100644
--- a/web/src/js/components/ContentView/ContentViews.jsx
+++ b/web/src/js/components/ContentView/ContentViews.jsx
@@ -1,6 +1,8 @@
 import React, { PropTypes } from 'react'
 import ContentLoader from './ContentLoader'
 import { MessageUtils } from '../../flow/utils.js'
+import Button from '../common/Button'
+
 
 const views = [ViewAuto, ViewImage, ViewJSON, ViewRaw]
 
@@ -22,13 +24,19 @@ export function ViewImage({ flow, message }) {
 
 ViewRaw.textView = true
 ViewRaw.matches = () => true
+ViewRaw.input = {}
 
 ViewRaw.propTypes = {
     content: React.PropTypes.string.isRequired,
 }
 
-export function ViewRaw({ content }) {
-    return <pre>{content}</pre>
+export function ViewRaw({ content, onChange }) {
+    return (
+        <div>
+            <textarea onKeyDown={e => e.stopPropagation()} ref={ref => ViewRaw.input = ref}>{content}</textarea>
+            <Button onClick={(e) => onChange(ViewRaw.input.value)} text="Update"/>
+        </div>
+    )
 }
 
 ViewJSON.textView = true
@@ -58,10 +66,10 @@ ViewAuto.propTypes = {
     flow: React.PropTypes.object.isRequired,
 }
 
-export function ViewAuto({ message, flow }) {
+export function ViewAuto({ message, flow, onChange }) {
     const View = ViewAuto.findView(message)
     if (View.textView) {
-        return <ContentLoader message={message} flow={flow}><View content="" /></ContentLoader>
+        return <ContentLoader message={message} flow={flow}><View onChange={onChange} content="" /></ContentLoader>
     } else {
         return <View message={message} flow={flow} />
     }
diff --git a/web/src/js/components/FlowView/Messages.jsx b/web/src/js/components/FlowView/Messages.jsx
index 9295f97c..d2c42a54 100644
--- a/web/src/js/components/FlowView/Messages.jsx
+++ b/web/src/js/components/FlowView/Messages.jsx
@@ -89,7 +89,7 @@ export class Request extends Component {
                     onChange={headers => updateFlow({ request: { headers } })}
                 />
                 <hr/>
-                <ContentView flow={flow} message={flow.request}/>
+                <ContentView flow={flow} message={flow.request} onChange={content => updateFlow({request: {content} })}/>
             </section>
         )
     }
@@ -128,7 +128,7 @@ export class Response extends Component {
                     onChange={headers => updateFlow({ response: { headers } })}
                 />
                 <hr/>
-                <ContentView flow={flow} message={flow.response}/>
+                <ContentView flow={flow} message={flow.response} onChange={content => updateFlow({response: {content} }) }/>
             </section>
         )
     }
diff --git a/web/src/js/components/common/MonacoEditor.jsx b/web/src/js/components/common/MonacoEditor.jsx
new file mode 100644
index 00000000..a0e8d58c
--- /dev/null
+++ b/web/src/js/components/common/MonacoEditor.jsx
@@ -0,0 +1,34 @@
+//not working
+import React, { Component, PropTypes } from 'react'
+
+export default class MonacoEditor extends Component {
+
+    constructor(props) {
+        super(props)
+    }
+
+    onLoad(){
+        window.MonacoEnvironment = {
+			getWorkerUrl: function(workerId, label) {
+				return 'worker-loader-proxy.js';
+			}
+		};
+		require.config({
+			paths: {
+				vs: '../release/min/vs'
+			}
+		});
+
+    }
+
+
+    render() {
+        return (
+            <div id="container"
+                 ref={ref => this.editor = ref}
+                 style="width:800px;height:600px;border:1px solid grey"
+                 onLoad={this.onLoad()}>
+            </div>
+        )
+    }
+}
