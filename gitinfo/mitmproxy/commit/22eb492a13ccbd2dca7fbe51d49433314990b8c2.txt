commit 22eb492a13ccbd2dca7fbe51d49433314990b8c2
Author: sanlengjingvv <lankeren123543@gmail.com>
Date:   Thu Jul 2 18:32:03 2020 +0800

    update FLOW_FORMAT_VERSION version
    fix error when dump flow with http trailers
    add testcase for http trailers

diff --git a/mitmproxy/io/compat.py b/mitmproxy/io/compat.py
index 091a5db2..0d5e5513 100644
--- a/mitmproxy/io/compat.py
+++ b/mitmproxy/io/compat.py
@@ -30,7 +30,6 @@ def convert_013_014(data):
         str(x) for x in data[b"response"].pop(b"httpversion")).encode()
     data[b"response"][b"status_code"] = data[b"response"].pop(b"code")
     data[b"response"][b"body"] = data[b"response"].pop(b"content")
-    data[b"response"][b"trailers"] = None
     data[b"server_conn"].pop(b"state")
     data[b"server_conn"][b"via"] = None
     data[b"version"] = (0, 14)
@@ -172,6 +171,10 @@ def convert_6_7(data):
     data["client_conn"]["tls_extensions"] = None
     return data
 
+def convert_7_8(data):
+    data["version"] = 8
+    data["response"]["trailers"] = None
+    return data
 
 def _convert_dict_keys(o: Any) -> Any:
     if isinstance(o, dict):
@@ -227,6 +230,7 @@ converters = {
     4: convert_4_5,
     5: convert_5_6,
     6: convert_6_7,
+    7: convert_7_8,
 }
 
 
diff --git a/mitmproxy/net/http/message.py b/mitmproxy/net/http/message.py
index af7b032b..478d334e 100644
--- a/mitmproxy/net/http/message.py
+++ b/mitmproxy/net/http/message.py
@@ -28,6 +28,8 @@ class MessageData(serializable.Serializable):
     def get_state(self):
         state = vars(self).copy()
         state["headers"] = state["headers"].get_state()
+        if 'trailers' in state and state["trailers"] is not None:
+            state["trailers"] = state["trailers"].get_state()
         return state
 
     @classmethod
@@ -53,6 +55,8 @@ class Message(serializable.Serializable):
     @classmethod
     def from_state(cls, state):
         state["headers"] = mheaders.Headers.from_state(state["headers"])
+        if 'trailers' in state and state["trailers"] is not None:
+            state["trailers"] = mheaders.Headers.from_state(state["trailers"])
         return cls(**state)
 
     @property
diff --git a/mitmproxy/proxy/protocol/http.py b/mitmproxy/proxy/protocol/http.py
index aa981b7a..7949e7e2 100644
--- a/mitmproxy/proxy/protocol/http.py
+++ b/mitmproxy/proxy/protocol/http.py
@@ -407,7 +407,8 @@ class HttpLayer(base.Layer):
                 self.channel.ask("responseheaders", f)
 
             self.log("response", "debug", [repr(f.response)])
-            if hasattr(self, 'has_trailers') and self.has_trailers:
+            # not support HTTP/1.1 trailers
+            if f.request.http_version == "HTTP/2.0":
                 f.response.data.trailers = self.read_trailers_headers()
             self.channel.ask("response", f)
 
diff --git a/mitmproxy/version.py b/mitmproxy/version.py
index c55ccdf7..f31ec711 100644
--- a/mitmproxy/version.py
+++ b/mitmproxy/version.py
@@ -8,7 +8,7 @@ MITMPROXY = "mitmproxy " + VERSION
 
 # Serialization format version. This is displayed nowhere, it just needs to be incremented by one
 # for each change in the file format.
-FLOW_FORMAT_VERSION = 7
+FLOW_FORMAT_VERSION = 8
 
 
 def get_dev_version() -> str:
diff --git a/test/mitmproxy/proxy/protocol/test_http2.py b/test/mitmproxy/proxy/protocol/test_http2.py
index 0afa6305..fd338c6c 100644
--- a/test/mitmproxy/proxy/protocol/test_http2.py
+++ b/test/mitmproxy/proxy/protocol/test_http2.py
@@ -1031,3 +1031,88 @@ class TestResponseStreaming(_Http2Test):
             assert data
         else:
             assert data is None
+
+
+class TestTrailers(_Http2Test):
+    request_body_buffer = b''
+
+    @classmethod
+    def handle_server_event(cls, event, h2_conn, rfile, wfile):
+        if isinstance(event, h2.events.ConnectionTerminated):
+            return False
+        elif isinstance(event, h2.events.RequestReceived):
+            assert (b'self.client-foo', b'self.client-bar-1') in event.headers
+            assert (b'self.client-foo', b'self.client-bar-2') in event.headers
+        elif isinstance(event, h2.events.StreamEnded):
+            import warnings
+            with warnings.catch_warnings():
+                # Ignore UnicodeWarning:
+                # h2/utilities.py:64: UnicodeWarning: Unicode equal comparison
+                # failed to convert both arguments to Unicode - interpreting
+                # them as being unequal.
+                #     elif header[0] in (b'cookie', u'cookie') and len(header[1]) < 20:
+
+                warnings.simplefilter("ignore")
+                h2_conn.send_headers(event.stream_id, [
+                    (':status', '200'),
+                    ('server-foo', 'server-bar'),
+                    ('föo', 'bär'),
+                    ('X-Stream-ID', str(event.stream_id)),
+                ])
+            h2_conn.send_data(event.stream_id, b'response body')
+            h2_conn.send_headers(event.stream_id, [
+                    ('trailers', 'trailers-foo'),
+                ], end_stream=True)
+            wfile.write(h2_conn.data_to_send())
+            wfile.flush()
+        elif isinstance(event, h2.events.DataReceived):
+            cls.request_body_buffer += event.data
+        return True
+
+    def test_trailers(self):
+        response_body_buffer = b''
+        h2_conn = self.setup_connection()
+
+        self._send_request(
+            self.client.wfile,
+            h2_conn,
+            headers=[
+                (':authority', "127.0.0.1:{}".format(self.server.server.address[1])),
+                (':method', 'GET'),
+                (':scheme', 'https'),
+                (':path', '/'),
+                ('self.client-FoO', 'self.client-bar-1'),
+                ('self.client-FoO', 'self.client-bar-2'),
+            ],
+            body=b'request body')
+
+        done = False
+        while not done:
+            try:
+                raw = b''.join(http2.read_raw_frame(self.client.rfile))
+                events = h2_conn.receive_data(raw)
+            except exceptions.HttpException:
+                print(traceback.format_exc())
+                assert False
+
+            self.client.wfile.write(h2_conn.data_to_send())
+            self.client.wfile.flush()
+
+            for event in events:
+                if isinstance(event, h2.events.DataReceived):
+                    response_body_buffer += event.data
+                elif isinstance(event, h2.events.StreamEnded):
+                    done = True
+
+        h2_conn.close_connection()
+        self.client.wfile.write(h2_conn.data_to_send())
+        self.client.wfile.flush()
+
+        assert len(self.master.state.flows) == 1
+        assert self.master.state.flows[0].response.status_code == 200
+        assert self.master.state.flows[0].response.headers['server-foo'] == 'server-bar'
+        assert self.master.state.flows[0].response.headers['föo'] == 'bär'
+        assert self.master.state.flows[0].response.content == b'response body'
+        assert self.request_body_buffer == b'request body'
+        assert response_body_buffer == b'response body'
+        assert self.master.state.flows[0].response.data.trailers['trailers'] == 'trailers-foo'
