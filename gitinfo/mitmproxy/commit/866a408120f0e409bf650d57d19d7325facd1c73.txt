commit 866a408120f0e409bf650d57d19d7325facd1c73
Author: Aldo Cortesi <aldo@nullcube.com>
Date:   Thu Jan 1 20:44:45 2015 +1300

    Make header more compact
    
    - Remove title bar
    - File -> mitmproxy - ultimately our logo can go here

diff --git a/libmproxy/web/static/app.css b/libmproxy/web/static/app.css
index f4aec31b..047651b4 100644
--- a/libmproxy/web/static/app.css
+++ b/libmproxy/web/static/app.css
@@ -128,12 +128,9 @@ body,
   margin: 1px 0 0px;
 }
 header {
+  padding-top: 0.5em;
   background-color: white;
 }
-header .title-bar {
-  line-height: 25px;
-  text-align: center;
-}
 header .menu {
   padding: 10px;
   border-bottom: solid #a6a6a6 1px;
diff --git a/libmproxy/web/static/app.js b/libmproxy/web/static/app.js
index 875d6db9..7030fb3c 100644
--- a/libmproxy/web/static/app.js
+++ b/libmproxy/web/static/app.js
@@ -1930,7 +1930,7 @@ var FileMenu = React.createClass({displayName: "FileMenu",
 
         return (
             React.createElement("div", {className: fileMenuClass}, 
-                React.createElement("a", {href: "#", className: "special", onClick: this.handleFileClick}, " File "), 
+                React.createElement("a", {href: "#", className: "special", onClick: this.handleFileClick}, " mitmproxy "), 
                 React.createElement("ul", {className: "dropdown-menu", role: "menu"}, 
                     React.createElement("li", null, 
                         React.createElement("a", {href: "#", onClick: this.handleNewClick}, 
@@ -2006,9 +2006,6 @@ var Header = React.createClass({displayName: "Header",
 
         return (
             React.createElement("header", null, 
-                React.createElement("div", {className: "title-bar"}, 
-                    "mitmproxy ",  this.props.settings.version
-                ), 
                 React.createElement("nav", {className: "nav-tabs nav-tabs-lg"}, 
                     React.createElement(FileMenu, null), 
                     header
@@ -4913,4 +4910,4 @@ module.exports = {
     Key: Key
 };
 },{"jquery":"jquery"}]},{},[6])
-//# sourceMappingURL=data:application/json;base64,{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","node_modules/browserify/node_modules/events/events.js","node_modules/flux/index.js","node_modules/flux/lib/Dispatcher.js","node_modules/flux/lib/invariant.js","src/js/actions.js","src/js/app.js","src/js/components/eventlog.js","src/js/components/flowdetail.js","src/js/components/flowtable-columns.js","src/js/components/flowtable.js","src/js/components/footer.js","src/js/components/header.js","src/js/components/mainview.js","src/js/components/proxyapp.js","src/js/components/utils.js","src/js/components/virtualscroll.js","src/js/connection.js","src/js/dispatcher.js","src/js/filt/filt.js","src/js/flow/utils.js","src/js/store/store.js","src/js/store/view.js","src/js/utils.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1PA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9YA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"generated.js","sourceRoot":"","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        len = arguments.length;\n        args = new Array(len - 1);\n        for (i = 1; i < len; i++)\n          args[i - 1] = arguments[i];\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    len = arguments.length;\n    args = new Array(len - 1);\n    for (i = 1; i < len; i++)\n      args[i - 1] = arguments[i];\n\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    var m;\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  var ret;\n  if (!emitter._events || !emitter._events[type])\n    ret = 0;\n  else if (isFunction(emitter._events[type]))\n    ret = 1;\n  else\n    ret = emitter._events[type].length;\n  return ret;\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\nmodule.exports.Dispatcher = require('./lib/Dispatcher')\n","/*\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Dispatcher\n * @typechecks\n */\n\n\"use strict\";\n\nvar invariant = require('./invariant');\n\nvar _lastID = 1;\nvar _prefix = 'ID_';\n\n/**\n * Dispatcher is used to broadcast payloads to registered callbacks. This is\n * different from generic pub-sub systems in two ways:\n *\n *   1) Callbacks are not subscribed to particular events. Every payload is\n *      dispatched to every registered callback.\n *   2) Callbacks can be deferred in whole or part until other callbacks have\n *      been executed.\n *\n * For example, consider this hypothetical flight destination form, which\n * selects a default city when a country is selected:\n *\n *   var flightDispatcher = new Dispatcher();\n *\n *   // Keeps track of which country is selected\n *   var CountryStore = {country: null};\n *\n *   // Keeps track of which city is selected\n *   var CityStore = {city: null};\n *\n *   // Keeps track of the base flight price of the selected city\n *   var FlightPriceStore = {price: null}\n *\n * When a user changes the selected city, we dispatch the payload:\n *\n *   flightDispatcher.dispatch({\n *     actionType: 'city-update',\n *     selectedCity: 'paris'\n *   });\n *\n * This payload is digested by `CityStore`:\n *\n *   flightDispatcher.register(function(payload) {\n *     if (payload.actionType === 'city-update') {\n *       CityStore.city = payload.selectedCity;\n *     }\n *   });\n *\n * When the user selects a country, we dispatch the payload:\n *\n *   flightDispatcher.dispatch({\n *     actionType: 'country-update',\n *     selectedCountry: 'australia'\n *   });\n *\n * This payload is digested by both stores:\n *\n *    CountryStore.dispatchToken = flightDispatcher.register(function(payload) {\n *     if (payload.actionType === 'country-update') {\n *       CountryStore.country = payload.selectedCountry;\n *     }\n *   });\n *\n * When the callback to update `CountryStore` is registered, we save a reference\n * to the returned token. Using this token with `waitFor()`, we can guarantee\n * that `CountryStore` is updated before the callback that updates `CityStore`\n * needs to query its data.\n *\n *   CityStore.dispatchToken = flightDispatcher.register(function(payload) {\n *     if (payload.actionType === 'country-update') {\n *       // `CountryStore.country` may not be updated.\n *       flightDispatcher.waitFor([CountryStore.dispatchToken]);\n *       // `CountryStore.country` is now guaranteed to be updated.\n *\n *       // Select the default city for the new country\n *       CityStore.city = getDefaultCityForCountry(CountryStore.country);\n *     }\n *   });\n *\n * The usage of `waitFor()` can be chained, for example:\n *\n *   FlightPriceStore.dispatchToken =\n *     flightDispatcher.register(function(payload) {\n *       switch (payload.actionType) {\n *         case 'country-update':\n *           flightDispatcher.waitFor([CityStore.dispatchToken]);\n *           FlightPriceStore.price =\n *             getFlightPriceStore(CountryStore.country, CityStore.city);\n *           break;\n *\n *         case 'city-update':\n *           FlightPriceStore.price =\n *             FlightPriceStore(CountryStore.country, CityStore.city);\n *           break;\n *     }\n *   });\n *\n * The `country-update` payload will be guaranteed to invoke the stores'\n * registered callbacks in order: `CountryStore`, `CityStore`, then\n * `FlightPriceStore`.\n */\n\n  function Dispatcher() {\n    this.$Dispatcher_callbacks = {};\n    this.$Dispatcher_isPending = {};\n    this.$Dispatcher_isHandled = {};\n    this.$Dispatcher_isDispatching = false;\n    this.$Dispatcher_pendingPayload = null;\n  }\n\n  /**\n   * Registers a callback to be invoked with every dispatched payload. Returns\n   * a token that can be used with `waitFor()`.\n   *\n   * @param {function} callback\n   * @return {string}\n   */\n  Dispatcher.prototype.register=function(callback) {\n    var id = _prefix + _lastID++;\n    this.$Dispatcher_callbacks[id] = callback;\n    return id;\n  };\n\n  /**\n   * Removes a callback based on its token.\n   *\n   * @param {string} id\n   */\n  Dispatcher.prototype.unregister=function(id) {\n    invariant(\n      this.$Dispatcher_callbacks[id],\n      'Dispatcher.unregister(...): `%s` does not map to a registered callback.',\n      id\n    );\n    delete this.$Dispatcher_callbacks[id];\n  };\n\n  /**\n   * Waits for the callbacks specified to be invoked before continuing execution\n   * of the current callback. This method should only be used by a callback in\n   * response to a dispatched payload.\n   *\n   * @param {array<string>} ids\n   */\n  Dispatcher.prototype.waitFor=function(ids) {\n    invariant(\n      this.$Dispatcher_isDispatching,\n      'Dispatcher.waitFor(...): Must be invoked while dispatching.'\n    );\n    for (var ii = 0; ii < ids.length; ii++) {\n      var id = ids[ii];\n      if (this.$Dispatcher_isPending[id]) {\n        invariant(\n          this.$Dispatcher_isHandled[id],\n          'Dispatcher.waitFor(...): Circular dependency detected while ' +\n          'waiting for `%s`.',\n          id\n        );\n        continue;\n      }\n      invariant(\n        this.$Dispatcher_callbacks[id],\n        'Dispatcher.waitFor(...): `%s` does not map to a registered callback.',\n        id\n      );\n      this.$Dispatcher_invokeCallback(id);\n    }\n  };\n\n  /**\n   * Dispatches a payload to all registered callbacks.\n   *\n   * @param {object} payload\n   */\n  Dispatcher.prototype.dispatch=function(payload) {\n    invariant(\n      !this.$Dispatcher_isDispatching,\n      'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.'\n    );\n    this.$Dispatcher_startDispatching(payload);\n    try {\n      for (var id in this.$Dispatcher_callbacks) {\n        if (this.$Dispatcher_isPending[id]) {\n          continue;\n        }\n        this.$Dispatcher_invokeCallback(id);\n      }\n    } finally {\n      this.$Dispatcher_stopDispatching();\n    }\n  };\n\n  /**\n   * Is this Dispatcher currently dispatching.\n   *\n   * @return {boolean}\n   */\n  Dispatcher.prototype.isDispatching=function() {\n    return this.$Dispatcher_isDispatching;\n  };\n\n  /**\n   * Call the callback stored with the given id. Also do some internal\n   * bookkeeping.\n   *\n   * @param {string} id\n   * @internal\n   */\n  Dispatcher.prototype.$Dispatcher_invokeCallback=function(id) {\n    this.$Dispatcher_isPending[id] = true;\n    this.$Dispatcher_callbacks[id](this.$Dispatcher_pendingPayload);\n    this.$Dispatcher_isHandled[id] = true;\n  };\n\n  /**\n   * Set up bookkeeping needed when dispatching.\n   *\n   * @param {object} payload\n   * @internal\n   */\n  Dispatcher.prototype.$Dispatcher_startDispatching=function(payload) {\n    for (var id in this.$Dispatcher_callbacks) {\n      this.$Dispatcher_isPending[id] = false;\n      this.$Dispatcher_isHandled[id] = false;\n    }\n    this.$Dispatcher_pendingPayload = payload;\n    this.$Dispatcher_isDispatching = true;\n  };\n\n  /**\n   * Clear bookkeeping used for dispatching.\n   *\n   * @internal\n   */\n  Dispatcher.prototype.$Dispatcher_stopDispatching=function() {\n    this.$Dispatcher_pendingPayload = null;\n    this.$Dispatcher_isDispatching = false;\n  };\n\n\nmodule.exports = Dispatcher;\n","/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule invariant\n */\n\n\"use strict\";\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (false) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        'Invariant Violation: ' +\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","var $ = require(\"jquery\");\n\nvar ActionTypes = {\n    // Connection\n    CONNECTION_OPEN: \"connection_open\",\n    CONNECTION_CLOSE: \"connection_close\",\n    CONNECTION_ERROR: \"connection_error\",\n\n    // Stores\n    SETTINGS_STORE: \"settings\",\n    EVENT_STORE: \"events\",\n    FLOW_STORE: \"flows\",\n};\n\nvar StoreCmds = {\n    ADD: \"add\",\n    UPDATE: \"update\",\n    REMOVE: \"remove\",\n    RESET: \"reset\"\n};\n\nvar ConnectionActions = {\n    open: function () {\n        AppDispatcher.dispatchViewAction({\n            type: ActionTypes.CONNECTION_OPEN\n        });\n    },\n    close: function () {\n        AppDispatcher.dispatchViewAction({\n            type: ActionTypes.CONNECTION_CLOSE\n        });\n    },\n    error: function () {\n        AppDispatcher.dispatchViewAction({\n            type: ActionTypes.CONNECTION_ERROR\n        });\n    }\n};\n\nvar SettingsActions = {\n    update: function (settings) {\n\n        $.ajax({\n            type: \"PUT\",\n            url: \"/settings\",\n            data: settings\n        });\n\n        /*\n        //Facebook Flux: We do an optimistic update on the client already.\n        AppDispatcher.dispatchViewAction({\n            type: ActionTypes.SETTINGS_STORE,\n            cmd: StoreCmds.UPDATE,\n            data: settings\n        });\n        */\n    }\n};\n\nvar EventLogActions_event_id = 0;\nvar EventLogActions = {\n    add_event: function (message) {\n        AppDispatcher.dispatchViewAction({\n            type: ActionTypes.EVENT_STORE,\n            cmd: StoreCmds.ADD,\n            data: {\n                message: message,\n                level: \"web\",\n                id: \"viewAction-\" + EventLogActions_event_id++\n            }\n        });\n    }\n};\n\nvar FlowActions = {\n    accept: function (flow) {\n        $.post(\"/flows/\" + flow.id + \"/accept\");\n    },\n    accept_all: function(){\n        $.post(\"/flows/accept\");\n    },\n    \"delete\": function(flow){\n        $.ajax({\n            type:\"DELETE\",\n            url: \"/flows/\" + flow.id\n        });\n    },\n    duplicate: function(flow){\n        $.post(\"/flows/\" + flow.id + \"/duplicate\");\n    },\n    replay: function(flow){\n        $.post(\"/flows/\" + flow.id + \"/replay\");\n    },\n    revert: function(flow){\n        $.post(\"/flows/\" + flow.id + \"/revert\");\n    },\n    update: function (flow) {\n        AppDispatcher.dispatchViewAction({\n            type: ActionTypes.FLOW_STORE,\n            cmd: StoreCmds.UPDATE,\n            data: flow\n        });\n    },\n    clear: function(){\n        $.post(\"/clear\");\n    }\n};\n\nQuery = {\n    FILTER: \"f\",\n    HIGHLIGHT: \"h\",\n    SHOW_EVENTLOG: \"e\"\n};\n\nmodule.exports = {\n    ActionTypes: ActionTypes,\n    ConnectionActions: ConnectionActions,\n    FlowActions: FlowActions,\n    StoreCmds: StoreCmds\n};","\nvar React = require(\"react\");\nvar ReactRouter = require(\"react-router\");\nvar $ = require(\"jquery\");\n\nvar Connection = require(\"./connection\");\nvar proxyapp = require(\"./components/proxyapp.js\");\n\n$(function () {\n    window.ws = new Connection(\"/updates\");\n\n    ReactRouter.run(proxyapp.routes, function (Handler) {\n        React.render(React.createElement(Handler, null), document.body);\n    });\n});","var React = require(\"react\");\nvar utils = require(\"./utils.js\");\nvar VirtualScrollMixin = require(\"./virtualscroll.js\");\nvar views = require(\"../store/view.js\");\n\nvar LogMessage = React.createClass({displayName: \"LogMessage\",\n    render: function () {\n        var entry = this.props.entry;\n        var indicator;\n        switch (entry.level) {\n            case \"web\":\n                indicator = React.createElement(\"i\", {className: \"fa fa-fw fa-html5\"});\n                break;\n            case \"debug\":\n                indicator = React.createElement(\"i\", {className: \"fa fa-fw fa-bug\"});\n                break;\n            default:\n                indicator = React.createElement(\"i\", {className: \"fa fa-fw fa-info\"});\n        }\n        return (\n            React.createElement(\"div\", null, \n                indicator, \" \", entry.message\n            )\n        );\n    },\n    shouldComponentUpdate: function () {\n        return false; // log entries are immutable.\n    }\n});\n\nvar EventLogContents = React.createClass({displayName: \"EventLogContents\",\n    mixins: [utils.AutoScrollMixin, VirtualScrollMixin],\n    getInitialState: function () {\n        return {\n            log: []\n        };\n    },\n    componentWillMount: function () {\n        this.openView(this.props.eventStore);\n    },\n    componentWillUnmount: function () {\n        this.closeView();\n    },\n    openView: function (store) {\n        var view = new views.StoreView(store, function (entry) {\n            return this.props.filter[entry.level];\n        }.bind(this));\n        this.setState({\n            view: view\n        });\n\n        view.addListener(\"add recalculate\", this.onEventLogChange);\n    },\n    closeView: function () {\n        this.state.view.close();\n    },\n    onEventLogChange: function () {\n        this.setState({\n            log: this.state.view.list\n        });\n    },\n    componentWillReceiveProps: function (nextProps) {\n        if (nextProps.filter !== this.props.filter) {\n            this.props.filter = nextProps.filter; // Dirty: Make sure that view filter sees the update.\n            this.state.view.recalculate();\n        }\n        if (nextProps.eventStore !== this.props.eventStore) {\n            this.closeView();\n            this.openView(nextProps.eventStore);\n        }\n    },\n    getDefaultProps: function () {\n        return {\n            rowHeight: 45,\n            rowHeightMin: 15,\n            placeholderTagName: \"div\"\n        };\n    },\n    renderRow: function (elem) {\n        return React.createElement(LogMessage, {key: elem.id, entry: elem});\n    },\n    render: function () {\n        var rows = this.renderRows(this.state.log);\n\n        return React.createElement(\"pre\", {onScroll: this.onScroll}, \n             this.getPlaceholderTop(this.state.log.length), \n            rows, \n             this.getPlaceholderBottom(this.state.log.length) \n        );\n    }\n});\n\nvar ToggleFilter = React.createClass({displayName: \"ToggleFilter\",\n    toggle: function (e) {\n        e.preventDefault();\n        return this.props.toggleLevel(this.props.name);\n    },\n    render: function () {\n        var className = \"label \";\n        if (this.props.active) {\n            className += \"label-primary\";\n        } else {\n            className += \"label-default\";\n        }\n        return (\n            React.createElement(\"a\", {\n                href: \"#\", \n                className: className, \n                onClick: this.toggle}, \n                this.props.name\n            )\n        );\n    }\n});\n\nvar EventLog = React.createClass({displayName: \"EventLog\",\n    getInitialState: function () {\n        return {\n            filter: {\n                \"debug\": false,\n                \"info\": true,\n                \"web\": true\n            }\n        };\n    },\n    close: function () {\n        var d = {};\n        d[Query.SHOW_EVENTLOG] = undefined;\n        this.setQuery(d);\n    },\n    toggleLevel: function (level) {\n        var filter = _.extend({}, this.state.filter);\n        filter[level] = !filter[level];\n        this.setState({filter: filter});\n    },\n    render: function () {\n        return (\n            React.createElement(\"div\", {className: \"eventlog\"}, \n                React.createElement(\"div\", null, \n                    \"Eventlog\", \n                    React.createElement(\"div\", {className: \"pull-right\"}, \n                        React.createElement(ToggleFilter, {name: \"debug\", active: this.state.filter.debug, toggleLevel: this.toggleLevel}), \n                        React.createElement(ToggleFilter, {name: \"info\", active: this.state.filter.info, toggleLevel: this.toggleLevel}), \n                        React.createElement(ToggleFilter, {name: \"web\", active: this.state.filter.web, toggleLevel: this.toggleLevel}), \n                        React.createElement(\"i\", {onClick: this.close, className: \"fa fa-close\"})\n                    )\n\n                ), \n                React.createElement(EventLogContents, {filter: this.state.filter, eventStore: this.props.eventStore})\n            )\n        );\n    }\n});\n\nmodule.exports = EventLog;","var React = require(\"react\");\nvar _ = require(\"lodash\");\n\nvar utils = require(\"./utils.js\");\nvar actions = require(\"../actions.js\");\nvar flowutils = require(\"../flow/utils.js\");\nvar toputils = require(\"../utils.js\");\n\nvar NavAction = React.createClass({displayName: \"NavAction\",\n    onClick: function (e) {\n        e.preventDefault();\n        this.props.onClick();\n    },\n    render: function () {\n        return (\n            React.createElement(\"a\", {title: this.props.title, \n                href: \"#\", \n                className: \"nav-action\", \n                onClick: this.onClick}, \n                React.createElement(\"i\", {className: \"fa fa-fw \" + this.props.icon})\n            )\n        );\n    }\n});\n\nvar FlowDetailNav = React.createClass({displayName: \"FlowDetailNav\",\n    render: function () {\n        var flow = this.props.flow;\n\n        var tabs = this.props.tabs.map(function (e) {\n            var str = e.charAt(0).toUpperCase() + e.slice(1);\n            var className = this.props.active === e ? \"active\" : \"\";\n            var onClick = function (event) {\n                this.props.selectTab(e);\n                event.preventDefault();\n            }.bind(this);\n            return React.createElement(\"a\", {key: e, \n                href: \"#\", \n                className: className, \n                onClick: onClick}, str);\n        }.bind(this));\n\n        var acceptButton = null;\n        if(flow.intercepted){\n            acceptButton = React.createElement(NavAction, {title: \"[a]ccept intercepted flow\", icon: \"fa-play\", onClick: actions.FlowActions.accept.bind(null, flow)});\n        }\n        var revertButton = null;\n        if(flow.modified){\n            revertButton = React.createElement(NavAction, {title: \"revert changes to flow [V]\", icon: \"fa-history\", onClick: actions.FlowActions.revert.bind(null, flow)});\n        }\n\n        return (\n            React.createElement(\"nav\", {ref: \"head\", className: \"nav-tabs nav-tabs-sm\"}, \n                tabs, \n                React.createElement(NavAction, {title: \"[d]elete flow\", icon: \"fa-trash\", onClick: actions.FlowActions.delete.bind(null, flow)}), \n                React.createElement(NavAction, {title: \"[D]uplicate flow\", icon: \"fa-copy\", onClick: actions.FlowActions.duplicate.bind(null, flow)}), \n                React.createElement(NavAction, {disabled: true, title: \"[r]eplay flow\", icon: \"fa-repeat\", onClick: actions.FlowActions.replay.bind(null, flow)}), \n                acceptButton, \n                revertButton\n            )\n        );\n    }\n});\n\nvar Headers = React.createClass({displayName: \"Headers\",\n    render: function () {\n        var rows = this.props.message.headers.map(function (header, i) {\n            return (\n                React.createElement(\"tr\", {key: i}, \n                    React.createElement(\"td\", {className: \"header-name\"}, header[0] + \":\"), \n                    React.createElement(\"td\", {className: \"header-value\"}, header[1])\n                )\n            );\n        });\n        return (\n            React.createElement(\"table\", {className: \"header-table\"}, \n                React.createElement(\"tbody\", null, \n                    rows\n                )\n            )\n        );\n    }\n});\n\nvar FlowDetailRequest = React.createClass({displayName: \"FlowDetailRequest\",\n    render: function () {\n        var flow = this.props.flow;\n        var first_line = [\n            flow.request.method,\n            flowutils.RequestUtils.pretty_url(flow.request),\n            \"HTTP/\" + flow.request.httpversion.join(\".\")\n        ].join(\" \");\n        var content = null;\n        if (flow.request.contentLength > 0) {\n            content = \"Request Content Size: \" + toputils.formatSize(flow.request.contentLength);\n        } else {\n            content = React.createElement(\"div\", {className: \"alert alert-info\"}, \"No Content\");\n        }\n\n        //TODO: Styling\n\n        return (\n            React.createElement(\"section\", null, \n                React.createElement(\"div\", {className: \"first-line\"}, first_line ), \n                React.createElement(Headers, {message: flow.request}), \n                React.createElement(\"hr\", null), \n                content\n            )\n        );\n    }\n});\n\nvar FlowDetailResponse = React.createClass({displayName: \"FlowDetailResponse\",\n    render: function () {\n        var flow = this.props.flow;\n        var first_line = [\n            \"HTTP/\" + flow.response.httpversion.join(\".\"),\n            flow.response.code,\n            flow.response.msg\n        ].join(\" \");\n        var content = null;\n        if (flow.response.contentLength > 0) {\n            content = \"Response Content Size: \" + toputils.formatSize(flow.response.contentLength);\n        } else {\n            content = React.createElement(\"div\", {className: \"alert alert-info\"}, \"No Content\");\n        }\n\n        //TODO: Styling\n\n        return (\n            React.createElement(\"section\", null, \n                React.createElement(\"div\", {className: \"first-line\"}, first_line ), \n                React.createElement(Headers, {message: flow.response}), \n                React.createElement(\"hr\", null), \n                content\n            )\n        );\n    }\n});\n\nvar FlowDetailError = React.createClass({displayName: \"FlowDetailError\",\n    render: function () {\n        var flow = this.props.flow;\n        return (\n            React.createElement(\"section\", null, \n                React.createElement(\"div\", {className: \"alert alert-warning\"}, \n                flow.error.msg, \n                    React.createElement(\"div\", null, \n                        React.createElement(\"small\", null,  toputils.formatTimeStamp(flow.error.timestamp) )\n                    )\n                )\n            )\n        );\n    }\n});\n\nvar TimeStamp = React.createClass({displayName: \"TimeStamp\",\n    render: function () {\n\n        if (!this.props.t) {\n            //should be return null, but that triggers a React bug.\n            return React.createElement(\"tr\", null);\n        }\n\n        var ts = toputils.formatTimeStamp(this.props.t);\n\n        var delta;\n        if (this.props.deltaTo) {\n            delta = toputils.formatTimeDelta(1000 * (this.props.t - this.props.deltaTo));\n            delta = React.createElement(\"span\", {className: \"text-muted\"}, \"(\" + delta + \")\");\n        } else {\n            delta = null;\n        }\n\n        return React.createElement(\"tr\", null, \n            React.createElement(\"td\", null, this.props.title + \":\"), \n            React.createElement(\"td\", null, ts, \" \", delta)\n        );\n    }\n});\n\nvar ConnectionInfo = React.createClass({displayName: \"ConnectionInfo\",\n\n    render: function () {\n        var conn = this.props.conn;\n        var address = conn.address.address.join(\":\");\n\n        var sni = React.createElement(\"tr\", {key: \"sni\"}); //should be null, but that triggers a React bug.\n        if (conn.sni) {\n            sni = React.createElement(\"tr\", {key: \"sni\"}, \n                React.createElement(\"td\", null, \n                    React.createElement(\"abbr\", {title: \"TLS Server Name Indication\"}, \"TLS SNI:\")\n                ), \n                React.createElement(\"td\", null, conn.sni)\n            );\n        }\n        return (\n            React.createElement(\"table\", {className: \"connection-table\"}, \n                React.createElement(\"tbody\", null, \n                    React.createElement(\"tr\", {key: \"address\"}, \n                        React.createElement(\"td\", null, \"Address:\"), \n                        React.createElement(\"td\", null, address)\n                    ), \n                    sni\n                )\n            )\n        );\n    }\n});\n\nvar CertificateInfo = React.createClass({displayName: \"CertificateInfo\",\n    render: function () {\n        //TODO: We should fetch human-readable certificate representation\n        // from the server\n        var flow = this.props.flow;\n        var client_conn = flow.client_conn;\n        var server_conn = flow.server_conn;\n\n        var preStyle = {maxHeight: 100};\n        return (\n            React.createElement(\"div\", null, \n            client_conn.cert ? React.createElement(\"h4\", null, \"Client Certificate\") : null, \n            client_conn.cert ? React.createElement(\"pre\", {style: preStyle}, client_conn.cert) : null, \n\n            server_conn.cert ? React.createElement(\"h4\", null, \"Server Certificate\") : null, \n            server_conn.cert ? React.createElement(\"pre\", {style: preStyle}, server_conn.cert) : null\n            )\n        );\n    }\n});\n\nvar Timing = React.createClass({displayName: \"Timing\",\n    render: function () {\n        var flow = this.props.flow;\n        var sc = flow.server_conn;\n        var cc = flow.client_conn;\n        var req = flow.request;\n        var resp = flow.response;\n\n        var timestamps = [\n            {\n                title: \"Server conn. initiated\",\n                t: sc.timestamp_start,\n                deltaTo: req.timestamp_start\n            }, {\n                title: \"Server conn. TCP handshake\",\n                t: sc.timestamp_tcp_setup,\n                deltaTo: req.timestamp_start\n            }, {\n                title: \"Server conn. SSL handshake\",\n                t: sc.timestamp_ssl_setup,\n                deltaTo: req.timestamp_start\n            }, {\n                title: \"Client conn. established\",\n                t: cc.timestamp_start,\n                deltaTo: req.timestamp_start\n            }, {\n                title: \"Client conn. SSL handshake\",\n                t: cc.timestamp_ssl_setup,\n                deltaTo: req.timestamp_start\n            }, {\n                title: \"First request byte\",\n                t: req.timestamp_start,\n            }, {\n                title: \"Request complete\",\n                t: req.timestamp_end,\n                deltaTo: req.timestamp_start\n            }\n        ];\n\n        if (flow.response) {\n            timestamps.push(\n                {\n                    title: \"First response byte\",\n                    t: resp.timestamp_start,\n                    deltaTo: req.timestamp_start\n                }, {\n                    title: \"Response complete\",\n                    t: resp.timestamp_end,\n                    deltaTo: req.timestamp_start\n                }\n            );\n        }\n\n        //Add unique key for each row.\n        timestamps.forEach(function (e) {\n            e.key = e.title;\n        });\n\n        timestamps = _.sortBy(timestamps, 't');\n\n        var rows = timestamps.map(function (e) {\n            return React.createElement(TimeStamp, React.__spread({},  e));\n        });\n\n        return (\n            React.createElement(\"div\", null, \n                React.createElement(\"h4\", null, \"Timing\"), \n                React.createElement(\"table\", {className: \"timing-table\"}, \n                    React.createElement(\"tbody\", null, \n                    rows\n                    )\n                )\n            )\n        );\n    }\n});\n\nvar FlowDetailConnectionInfo = React.createClass({displayName: \"FlowDetailConnectionInfo\",\n    render: function () {\n        var flow = this.props.flow;\n        var client_conn = flow.client_conn;\n        var server_conn = flow.server_conn;\n        return (\n            React.createElement(\"section\", null, \n\n                React.createElement(\"h4\", null, \"Client Connection\"), \n                React.createElement(ConnectionInfo, {conn: client_conn}), \n\n                React.createElement(\"h4\", null, \"Server Connection\"), \n                React.createElement(ConnectionInfo, {conn: server_conn}), \n\n                React.createElement(CertificateInfo, {flow: flow}), \n\n                React.createElement(Timing, {flow: flow})\n\n            )\n        );\n    }\n});\n\nvar allTabs = {\n    request: FlowDetailRequest,\n    response: FlowDetailResponse,\n    error: FlowDetailError,\n    details: FlowDetailConnectionInfo\n};\n\nvar FlowDetail = React.createClass({displayName: \"FlowDetail\",\n    mixins: [utils.StickyHeadMixin, utils.Navigation, utils.State],\n    getTabs: function (flow) {\n        var tabs = [];\n        [\"request\", \"response\", \"error\"].forEach(function (e) {\n            if (flow[e]) {\n                tabs.push(e);\n            }\n        });\n        tabs.push(\"details\");\n        return tabs;\n    },\n    nextTab: function (i) {\n        var tabs = this.getTabs(this.props.flow);\n        var currentIndex = tabs.indexOf(this.getParams().detailTab);\n        // JS modulo operator doesn't correct negative numbers, make sure that we are positive.\n        var nextIndex = (currentIndex + i + tabs.length) % tabs.length;\n        this.selectTab(tabs[nextIndex]);\n    },\n    selectTab: function (panel) {\n        this.replaceWith(\n            \"flow\",\n            {\n                flowId: this.getParams().flowId,\n                detailTab: panel\n            }\n        );\n    },\n    render: function () {\n        var flow = this.props.flow;\n        var tabs = this.getTabs(flow);\n        var active = this.getParams().detailTab;\n\n        if (!_.contains(tabs, active)) {\n            if (active === \"response\" && flow.error) {\n                active = \"error\";\n            } else if (active === \"error\" && flow.response) {\n                active = \"response\";\n            } else {\n                active = tabs[0];\n            }\n            this.selectTab(active);\n        }\n\n        var Tab = allTabs[active];\n        return (\n            React.createElement(\"div\", {className: \"flow-detail\", onScroll: this.adjustHead}, \n                React.createElement(FlowDetailNav, {ref: \"head\", \n                    flow: flow, \n                    tabs: tabs, \n                    active: active, \n                    selectTab: this.selectTab}), \n                React.createElement(Tab, {flow: flow})\n            )\n        );\n    }\n});\n\nmodule.exports = {\n    FlowDetail: FlowDetail\n};","var React = require(\"react\");\nvar flowutils = require(\"../flow/utils.js\");\nvar utils = require(\"../utils.js\");\n\nvar TLSColumn = React.createClass({displayName: \"TLSColumn\",\n    statics: {\n        renderTitle: function () {\n            return React.createElement(\"th\", {key: \"tls\", className: \"col-tls\"});\n        }\n    },\n    render: function () {\n        var flow = this.props.flow;\n        var ssl = (flow.request.scheme == \"https\");\n        var classes;\n        if (ssl) {\n            classes = \"col-tls col-tls-https\";\n        } else {\n            classes = \"col-tls col-tls-http\";\n        }\n        return React.createElement(\"td\", {className: classes});\n    }\n});\n\n\nvar IconColumn = React.createClass({displayName: \"IconColumn\",\n    statics: {\n        renderTitle: function () {\n            return React.createElement(\"th\", {key: \"icon\", className: \"col-icon\"});\n        }\n    },\n    render: function () {\n        var flow = this.props.flow;\n\n        var icon;\n        if (flow.response) {\n            var contentType = flowutils.ResponseUtils.getContentType(flow.response);\n\n            //TODO: We should assign a type to the flow somewhere else.\n            if (flow.response.code == 304) {\n                icon = \"resource-icon-not-modified\";\n            } else if (300 <= flow.response.code && flow.response.code < 400) {\n                icon = \"resource-icon-redirect\";\n            } else if (contentType && contentType.indexOf(\"image\") >= 0) {\n                icon = \"resource-icon-image\";\n            } else if (contentType && contentType.indexOf(\"javascript\") >= 0) {\n                icon = \"resource-icon-js\";\n            } else if (contentType && contentType.indexOf(\"css\") >= 0) {\n                icon = \"resource-icon-css\";\n            } else if (contentType && contentType.indexOf(\"html\") >= 0) {\n                icon = \"resource-icon-document\";\n            }\n        }\n        if (!icon) {\n            icon = \"resource-icon-plain\";\n        }\n\n\n        icon += \" resource-icon\";\n        return React.createElement(\"td\", {className: \"col-icon\"}, \n            React.createElement(\"div\", {className: icon})\n        );\n    }\n});\n\nvar PathColumn = React.createClass({displayName: \"PathColumn\",\n    statics: {\n        renderTitle: function () {\n            return React.createElement(\"th\", {key: \"path\", className: \"col-path\"}, \"Path\");\n        }\n    },\n    render: function () {\n        var flow = this.props.flow;\n        return React.createElement(\"td\", {className: \"col-path\"}, \n            flow.request.is_replay ? React.createElement(\"i\", {className: \"fa fa-fw fa-repeat pull-right\"}) : null, \n            flow.intercepted ? React.createElement(\"i\", {className: \"fa fa-fw fa-pause pull-right\"}) : null, \n            flow.request.scheme + \"://\" + flow.request.host + flow.request.path\n        );\n    }\n});\n\n\nvar MethodColumn = React.createClass({displayName: \"MethodColumn\",\n    statics: {\n        renderTitle: function () {\n            return React.createElement(\"th\", {key: \"method\", className: \"col-method\"}, \"Method\");\n        }\n    },\n    render: function () {\n        var flow = this.props.flow;\n        return React.createElement(\"td\", {className: \"col-method\"}, flow.request.method);\n    }\n});\n\n\nvar StatusColumn = React.createClass({displayName: \"StatusColumn\",\n    statics: {\n        renderTitle: function () {\n            return React.createElement(\"th\", {key: \"status\", className: \"col-status\"}, \"Status\");\n        }\n    },\n    render: function () {\n        var flow = this.props.flow;\n        var status;\n        if (flow.response) {\n            status = flow.response.code;\n        } else {\n            status = null;\n        }\n        return React.createElement(\"td\", {className: \"col-status\"}, status);\n    }\n});\n\n\nvar SizeColumn = React.createClass({displayName: \"SizeColumn\",\n    statics: {\n        renderTitle: function () {\n            return React.createElement(\"th\", {key: \"size\", className: \"col-size\"}, \"Size\");\n        }\n    },\n    render: function () {\n        var flow = this.props.flow;\n\n        var total = flow.request.contentLength;\n        if (flow.response) {\n            total += flow.response.contentLength || 0;\n        }\n        var size = utils.formatSize(total);\n        return React.createElement(\"td\", {className: \"col-size\"}, size);\n    }\n});\n\n\nvar TimeColumn = React.createClass({displayName: \"TimeColumn\",\n    statics: {\n        renderTitle: function () {\n            return React.createElement(\"th\", {key: \"time\", className: \"col-time\"}, \"Time\");\n        }\n    },\n    render: function () {\n        var flow = this.props.flow;\n        var time;\n        if (flow.response) {\n            time = utils.formatTimeDelta(1000 * (flow.response.timestamp_end - flow.request.timestamp_start));\n        } else {\n            time = \"...\";\n        }\n        return React.createElement(\"td\", {className: \"col-time\"}, time);\n    }\n});\n\n\nvar all_columns = [\n    TLSColumn,\n    IconColumn,\n    PathColumn,\n    MethodColumn,\n    StatusColumn,\n    SizeColumn,\n    TimeColumn];\n\n\nmodule.exports = all_columns;\n\n\n","var React = require(\"react\");\nvar utils = require(\"./utils.js\");\nvar VirtualScrollMixin = require(\"./virtualscroll.js\");\nvar flowtable_columns = require(\"./flowtable-columns.js\");\n\nvar FlowRow = React.createClass({displayName: \"FlowRow\",\n    render: function () {\n        var flow = this.props.flow;\n        var columns = this.props.columns.map(function (Column) {\n            return React.createElement(Column, {key: Column.displayName, flow: flow});\n        }.bind(this));\n        var className = \"\";\n        if (this.props.selected) {\n            className += \" selected\";\n        }\n        if (this.props.highlighted) {\n            className += \" highlighted\";\n        }\n        if (flow.intercepted) {\n            className += \" intercepted\";\n        }\n        if (flow.request) {\n            className += \" has-request\";\n        }\n        if (flow.response) {\n            className += \" has-response\";\n        }\n\n        return (\n            React.createElement(\"tr\", {className: className, onClick: this.props.selectFlow.bind(null, flow)}, \n                columns\n            ));\n    },\n    shouldComponentUpdate: function (nextProps) {\n        return true;\n        // Further optimization could be done here\n        // by calling forceUpdate on flow updates, selection changes and column changes.\n        //return (\n        //(this.props.columns.length !== nextProps.columns.length) ||\n        //(this.props.selected !== nextProps.selected)\n        //);\n    }\n});\n\nvar FlowTableHead = React.createClass({displayName: \"FlowTableHead\",\n    render: function () {\n        var columns = this.props.columns.map(function (column) {\n            return column.renderTitle();\n        }.bind(this));\n        return React.createElement(\"thead\", null, \n            React.createElement(\"tr\", null, columns)\n        );\n    }\n});\n\n\nvar ROW_HEIGHT = 32;\n\nvar FlowTable = React.createClass({displayName: \"FlowTable\",\n    mixins: [utils.StickyHeadMixin, utils.AutoScrollMixin, VirtualScrollMixin],\n    getInitialState: function () {\n        return {\n            columns: flowtable_columns\n        };\n    },\n    componentWillMount: function () {\n        if (this.props.view) {\n            this.props.view.addListener(\"add update remove recalculate\", this.onChange);\n        }\n    },\n    componentWillReceiveProps: function (nextProps) {\n        if (nextProps.view !== this.props.view) {\n            if (this.props.view) {\n                this.props.view.removeListener(\"add update remove recalculate\");\n            }\n            nextProps.view.addListener(\"add update remove recalculate\", this.onChange);\n        }\n    },\n    getDefaultProps: function () {\n        return {\n            rowHeight: ROW_HEIGHT\n        };\n    },\n    onScrollFlowTable: function () {\n        this.adjustHead();\n        this.onScroll();\n    },\n    onChange: function () {\n        this.forceUpdate();\n    },\n    scrollIntoView: function (flow) {\n        this.scrollRowIntoView(\n            this.props.view.index(flow),\n            this.refs.body.getDOMNode().offsetTop\n        );\n    },\n    renderRow: function (flow) {\n        var selected = (flow === this.props.selected);\n        var highlighted =\n            (\n            this.props.view._highlight &&\n            this.props.view._highlight[flow.id]\n            );\n\n        return React.createElement(FlowRow, {key: flow.id, \n            ref: flow.id, \n            flow: flow, \n            columns: this.state.columns, \n            selected: selected, \n            highlighted: highlighted, \n            selectFlow: this.props.selectFlow}\n        );\n    },\n    render: function () {\n        //console.log(\"render flowtable\", this.state.start, this.state.stop, this.props.selected);\n        var flows = this.props.view ? this.props.view.list : [];\n\n        var rows = this.renderRows(flows);\n\n        return (\n            React.createElement(\"div\", {className: \"flow-table\", onScroll: this.onScrollFlowTable}, \n                React.createElement(\"table\", null, \n                    React.createElement(FlowTableHead, {ref: \"head\", \n                        columns: this.state.columns}), \n                    React.createElement(\"tbody\", {ref: \"body\"}, \n                         this.getPlaceholderTop(flows.length), \n                        rows, \n                         this.getPlaceholderBottom(flows.length) \n                    )\n                )\n            )\n        );\n    }\n});\n\nmodule.exports = FlowTable;\n","var React = require(\"react\");\n\nvar Footer = React.createClass({displayName: \"Footer\",\n    render: function () {\n        var mode = this.props.settings.mode;\n        var intercept = this.props.settings.intercept;\n        return (\n            React.createElement(\"footer\", null, \n                mode != \"regular\" ? React.createElement(\"span\", {className: \"label label-success\"}, mode, \" mode\") : null, \n                \" \", \n                intercept ? React.createElement(\"span\", {className: \"label label-success\"}, \"Intercept: \", intercept) : null\n            )\n        );\n    }\n});\n\nmodule.exports = Footer;","var React = require(\"react\");\nvar $ = require(\"jquery\");\n\nvar utils = require(\"./utils.js\");\n\nvar FilterDocs = React.createClass({displayName: \"FilterDocs\",\n    statics: {\n        xhr: false,\n        doc: false\n    },\n    componentWillMount: function () {\n        if (!FilterDocs.doc) {\n            FilterDocs.xhr = $.getJSON(\"/filter-help\").done(function (doc) {\n                FilterDocs.doc = doc;\n                FilterDocs.xhr = false;\n            });\n        }\n        if (FilterDocs.xhr) {\n            FilterDocs.xhr.done(function () {\n                this.forceUpdate();\n            }.bind(this));\n        }\n    },\n    render: function () {\n        if (!FilterDocs.doc) {\n            return React.createElement(\"i\", {className: \"fa fa-spinner fa-spin\"});\n        } else {\n            var commands = FilterDocs.doc.commands.map(function (c) {\n                return React.createElement(\"tr\", null, \n                    React.createElement(\"td\", null, c[0].replace(\" \", '\\u00a0')), \n                    React.createElement(\"td\", null, c[1])\n                );\n            });\n            commands.push(React.createElement(\"tr\", null, \n                React.createElement(\"td\", {colSpan: \"2\"}, \n                    React.createElement(\"a\", {href: \"https://mitmproxy.org/doc/features/filters.html\", \n                        target: \"_blank\"}, \n                        React.createElement(\"i\", {className: \"fa fa-external-link\"}), \n                    \"  mitmproxy docs\")\n                )\n            ));\n            return React.createElement(\"table\", {className: \"table table-condensed\"}, \n                React.createElement(\"tbody\", null, commands)\n            );\n        }\n    }\n});\nvar FilterInput = React.createClass({displayName: \"FilterInput\",\n    getInitialState: function () {\n        // Consider both focus and mouseover for showing/hiding the tooltip,\n        // because onBlur of the input is triggered before the click on the tooltip\n        // finalized, hiding the tooltip just as the user clicks on it.\n        return {\n            value: this.props.value,\n            focus: false,\n            mousefocus: false\n        };\n    },\n    componentWillReceiveProps: function (nextProps) {\n        this.setState({value: nextProps.value});\n    },\n    onChange: function (e) {\n        var nextValue = e.target.value;\n        this.setState({\n            value: nextValue\n        });\n        // Only propagate valid filters upwards.\n        if (this.isValid(nextValue)) {\n            this.props.onChange(nextValue);\n        }\n    },\n    isValid: function (filt) {\n        try {\n            Filt.parse(filt || this.state.value);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    },\n    getDesc: function () {\n        var desc;\n        try {\n            desc = Filt.parse(this.state.value).desc;\n        } catch (e) {\n            desc = \"\" + e;\n        }\n        if (desc !== \"true\") {\n            return desc;\n        } else {\n            return (\n                React.createElement(FilterDocs, null)\n            );\n        }\n    },\n    onFocus: function () {\n        this.setState({focus: true});\n    },\n    onBlur: function () {\n        this.setState({focus: false});\n    },\n    onMouseEnter: function () {\n        this.setState({mousefocus: true});\n    },\n    onMouseLeave: function () {\n        this.setState({mousefocus: false});\n    },\n    onKeyDown: function (e) {\n        if (e.keyCode === Key.ESC || e.keyCode === Key.ENTER) {\n            this.blur();\n            // If closed using ESC/ENTER, hide the tooltip.\n            this.setState({mousefocus: false});\n        }\n    },\n    blur: function () {\n        this.refs.input.getDOMNode().blur();\n    },\n    focus: function () {\n        this.refs.input.getDOMNode().select();\n    },\n    render: function () {\n        var isValid = this.isValid();\n        var icon = \"fa fa-fw fa-\" + this.props.type;\n        var groupClassName = \"filter-input input-group\" + (isValid ? \"\" : \" has-error\");\n\n        var popover;\n        if (this.state.focus || this.state.mousefocus) {\n            popover = (\n                React.createElement(\"div\", {className: \"popover bottom\", onMouseEnter: this.onMouseEnter, onMouseLeave: this.onMouseLeave}, \n                    React.createElement(\"div\", {className: \"arrow\"}), \n                    React.createElement(\"div\", {className: \"popover-content\"}, \n                    this.getDesc()\n                    )\n                )\n            );\n        }\n\n        return (\n            React.createElement(\"div\", {className: groupClassName}, \n                React.createElement(\"span\", {className: \"input-group-addon\"}, \n                    React.createElement(\"i\", {className: icon, style: {color: this.props.color}})\n                ), \n                React.createElement(\"input\", {type: \"text\", placeholder: this.props.placeholder, className: \"form-control\", \n                    ref: \"input\", \n                    onChange: this.onChange, \n                    onFocus: this.onFocus, \n                    onBlur: this.onBlur, \n                    onKeyDown: this.onKeyDown, \n                    value: this.state.value}), \n                popover\n            )\n        );\n    }\n});\n\nvar MainMenu = React.createClass({displayName: \"MainMenu\",\n    mixins: [utils.Navigation, utils.State],\n    statics: {\n        title: \"Start\",\n        route: \"flows\"\n    },\n    onFilterChange: function (val) {\n        var d = {};\n        d[Query.FILTER] = val;\n        this.setQuery(d);\n    },\n    onHighlightChange: function (val) {\n        var d = {};\n        d[Query.HIGHLIGHT] = val;\n        this.setQuery(d);\n    },\n    onInterceptChange: function (val) {\n        SettingsActions.update({intercept: val});\n    },\n    render: function () {\n        var filter = this.getQuery()[Query.FILTER] || \"\";\n        var highlight = this.getQuery()[Query.HIGHLIGHT] || \"\";\n        var intercept = this.props.settings.intercept || \"\";\n\n        return (\n            React.createElement(\"div\", null, \n                React.createElement(\"div\", {className: \"menu-row\"}, \n                    React.createElement(FilterInput, {\n                        placeholder: \"Filter\", \n                        type: \"filter\", \n                        color: \"black\", \n                        value: filter, \n                        onChange: this.onFilterChange}), \n                    React.createElement(FilterInput, {\n                        placeholder: \"Highlight\", \n                        type: \"tag\", \n                        color: \"hsl(48, 100%, 50%)\", \n                        value: highlight, \n                        onChange: this.onHighlightChange}), \n                    React.createElement(FilterInput, {\n                        placeholder: \"Intercept\", \n                        type: \"pause\", \n                        color: \"hsl(208, 56%, 53%)\", \n                        value: intercept, \n                        onChange: this.onInterceptChange})\n                ), \n                React.createElement(\"div\", {className: \"clearfix\"})\n            )\n        );\n    }\n});\n\n\nvar ViewMenu = React.createClass({displayName: \"ViewMenu\",\n    statics: {\n        title: \"View\",\n        route: \"flows\"\n    },\n    mixins: [utils.Navigation, utils.State],\n    toggleEventLog: function () {\n        var d = {};\n\n        if (this.getQuery()[Query.SHOW_EVENTLOG]) {\n            d[Query.SHOW_EVENTLOG] = undefined;\n        } else {\n            d[Query.SHOW_EVENTLOG] = \"t\"; // any non-false value will do it, keep it short\n        }\n\n        this.setQuery(d);\n    },\n    render: function () {\n        var showEventLog = this.getQuery()[Query.SHOW_EVENTLOG];\n        return (\n            React.createElement(\"div\", null, \n                React.createElement(\"button\", {\n                    className: \"btn \" + (showEventLog ? \"btn-primary\" : \"btn-default\"), \n                    onClick: this.toggleEventLog}, \n                    React.createElement(\"i\", {className: \"fa fa-database\"}), \n                \" Show Eventlog\"\n                ), \n                React.createElement(\"span\", null, \" \")\n            )\n        );\n    }\n});\n\n\nvar ReportsMenu = React.createClass({displayName: \"ReportsMenu\",\n    statics: {\n        title: \"Visualization\",\n        route: \"reports\"\n    },\n    render: function () {\n        return React.createElement(\"div\", null, \"Reports Menu\");\n    }\n});\n\nvar FileMenu = React.createClass({displayName: \"FileMenu\",\n    getInitialState: function () {\n        return {\n            showFileMenu: false\n        };\n    },\n    handleFileClick: function (e) {\n        e.preventDefault();\n        if (!this.state.showFileMenu) {\n            var close = function () {\n                this.setState({showFileMenu: false});\n                document.removeEventListener(\"click\", close);\n            }.bind(this);\n            document.addEventListener(\"click\", close);\n\n            this.setState({\n                showFileMenu: true\n            });\n        }\n    },\n    handleNewClick: function (e) {\n        e.preventDefault();\n        if (confirm(\"Delete all flows?\")) {\n            FlowActions.clear();\n        }\n    },\n    handleOpenClick: function (e) {\n        e.preventDefault();\n        console.error(\"unimplemented: handleOpenClick\");\n    },\n    handleSaveClick: function (e) {\n        e.preventDefault();\n        console.error(\"unimplemented: handleSaveClick\");\n    },\n    handleShutdownClick: function (e) {\n        e.preventDefault();\n        console.error(\"unimplemented: handleShutdownClick\");\n    },\n    render: function () {\n        var fileMenuClass = \"dropdown pull-left\" + (this.state.showFileMenu ? \" open\" : \"\");\n\n        return (\n            React.createElement(\"div\", {className: fileMenuClass}, \n                React.createElement(\"a\", {href: \"#\", className: \"special\", onClick: this.handleFileClick}, \" File \"), \n                React.createElement(\"ul\", {className: \"dropdown-menu\", role: \"menu\"}, \n                    React.createElement(\"li\", null, \n                        React.createElement(\"a\", {href: \"#\", onClick: this.handleNewClick}, \n                            React.createElement(\"i\", {className: \"fa fa-fw fa-file\"}), \n                            \"New\"\n                        )\n                    ), \n                    React.createElement(\"li\", {role: \"presentation\", className: \"divider\"}), \n                    React.createElement(\"li\", null, \n                        React.createElement(\"a\", {href: \"http://mitm.it/\", target: \"_blank\"}, \n                            React.createElement(\"i\", {className: \"fa fa-fw fa-external-link\"}), \n                            \"Install Certificates...\"\n                        )\n                    )\n                /*\n                 <li>\n                 <a href=\"#\" onClick={this.handleOpenClick}>\n                 <i className=\"fa fa-fw fa-folder-open\"></i>\n                 Open\n                 </a>\n                 </li>\n                 <li>\n                 <a href=\"#\" onClick={this.handleSaveClick}>\n                 <i className=\"fa fa-fw fa-save\"></i>\n                 Save\n                 </a>\n                 </li>\n                 <li role=\"presentation\" className=\"divider\"></li>\n                 <li>\n                 <a href=\"#\" onClick={this.handleShutdownClick}>\n                 <i className=\"fa fa-fw fa-plug\"></i>\n                 Shutdown\n                 </a>\n                 </li>\n                 */\n                )\n            )\n        );\n    }\n});\n\n\nvar header_entries = [MainMenu, ViewMenu /*, ReportsMenu */];\n\n\nvar Header = React.createClass({displayName: \"Header\",\n    mixins: [utils.Navigation],\n    getInitialState: function () {\n        return {\n            active: header_entries[0]\n        };\n    },\n    handleClick: function (active, e) {\n        e.preventDefault();\n        this.replaceWith(active.route);\n        this.setState({active: active});\n    },\n    render: function () {\n        var header = header_entries.map(function (entry, i) {\n            var classes = React.addons.classSet({\n                active: entry == this.state.active\n            });\n            return (\n                React.createElement(\"a\", {key: i, \n                    href: \"#\", \n                    className: classes, \n                    onClick: this.handleClick.bind(this, entry)\n                }, \n                     entry.title\n                )\n            );\n        }.bind(this));\n\n        return (\n            React.createElement(\"header\", null, \n                React.createElement(\"div\", {className: \"title-bar\"}, \n                    \"mitmproxy \",  this.props.settings.version\n                ), \n                React.createElement(\"nav\", {className: \"nav-tabs nav-tabs-lg\"}, \n                    React.createElement(FileMenu, null), \n                    header\n                ), \n                React.createElement(\"div\", {className: \"menu\"}, \n                    React.createElement(this.state.active, {settings: this.props.settings})\n                )\n            )\n        );\n    }\n});\n\n\nmodule.exports = {\n    Header: Header\n}","var React = require(\"react\");\n\nvar utils = require(\"./utils.js\");\nvar toputils = require(\"../utils.js\");\nvar views = require(\"../store/view.js\");\nvar Filt = require(\"../filt/filt.js\");\nFlowTable = require(\"./flowtable.js\");\nvar flowdetail = require(\"./flowdetail.js\");\n\n\nvar MainView = React.createClass({displayName: \"MainView\",\n    mixins: [utils.Navigation, utils.State],\n    getInitialState: function () {\n        this.onQueryChange(Query.FILTER, function () {\n            this.state.view.recalculate(this.getViewFilt(), this.getViewSort());\n        }.bind(this));\n        this.onQueryChange(Query.HIGHLIGHT, function () {\n            this.state.view.recalculate(this.getViewFilt(), this.getViewSort());\n        }.bind(this));\n        return {\n            flows: []\n        };\n    },\n    getViewFilt: function () {\n        try {\n            var filt = Filt.parse(this.getQuery()[Query.FILTER] || \"\");\n            var highlightStr = this.getQuery()[Query.HIGHLIGHT];\n            var highlight = highlightStr ? Filt.parse(highlightStr) : false;\n        } catch (e) {\n            console.error(\"Error when processing filter: \" + e);\n        }\n\n        return function filter_and_highlight(flow) {\n            if (!this._highlight) {\n                this._highlight = {};\n            }\n            this._highlight[flow.id] = highlight && highlight(flow);\n            return filt(flow);\n        };\n    },\n    getViewSort: function () {\n    },\n    componentWillReceiveProps: function (nextProps) {\n        if (nextProps.flowStore !== this.props.flowStore) {\n            this.closeView();\n            this.openView(nextProps.flowStore);\n        }\n    },\n    openView: function (store) {\n        var view = new views.StoreView(store, this.getViewFilt(), this.getViewSort());\n        this.setState({\n            view: view\n        });\n\n        view.addListener(\"recalculate\", this.onRecalculate);\n        view.addListener(\"add update remove\", this.onUpdate);\n        view.addListener(\"remove\", this.onRemove);\n    },\n    onRecalculate: function () {\n        this.forceUpdate();\n        var selected = this.getSelected();\n        if (selected) {\n            this.refs.flowTable.scrollIntoView(selected);\n        }\n    },\n    onUpdate: function (flow) {\n        if (flow.id === this.getParams().flowId) {\n            this.forceUpdate();\n        }\n    },\n    onRemove: function (flow_id, index) {\n        if (flow_id === this.getParams().flowId) {\n            var flow_to_select = this.state.view.list[Math.min(index, this.state.view.list.length -1)];\n            this.selectFlow(flow_to_select);\n        }\n    },\n    closeView: function () {\n        this.state.view.close();\n    },\n    componentWillMount: function () {\n        this.openView(this.props.flowStore);\n    },\n    componentWillUnmount: function () {\n        this.closeView();\n    },\n    selectFlow: function (flow) {\n        if (flow) {\n            this.replaceWith(\n                \"flow\",\n                {\n                    flowId: flow.id,\n                    detailTab: this.getParams().detailTab || \"request\"\n                }\n            );\n            this.refs.flowTable.scrollIntoView(flow);\n        } else {\n            this.replaceWith(\"flows\", {});\n        }\n    },\n    selectFlowRelative: function (shift) {\n        var flows = this.state.view.list;\n        var index;\n        if (!this.getParams().flowId) {\n            if (shift > 0) {\n                index = flows.length - 1;\n            } else {\n                index = 0;\n            }\n        } else {\n            var currFlowId = this.getParams().flowId;\n            var i = flows.length;\n            while (i--) {\n                if (flows[i].id === currFlowId) {\n                    index = i;\n                    break;\n                }\n            }\n            index = Math.min(\n                Math.max(0, index + shift),\n                flows.length - 1);\n        }\n        this.selectFlow(flows[index]);\n    },\n    onKeyDown: function (e) {\n        var flow = this.getSelected();\n        if (e.ctrlKey) {\n            return;\n        }\n        switch (e.keyCode) {\n            case toputils.Key.K:\n            case toputils.Key.UP:\n                this.selectFlowRelative(-1);\n                break;\n            case toputils.Key.J:\n            case toputils.Key.DOWN:\n                this.selectFlowRelative(+1);\n                break;\n            case toputils.Key.SPACE:\n            case toputils.Key.PAGE_DOWN:\n                this.selectFlowRelative(+10);\n                break;\n            case toputils.Key.PAGE_UP:\n                this.selectFlowRelative(-10);\n                break;\n            case toputils.Key.END:\n                this.selectFlowRelative(+1e10);\n                break;\n            case toputils.Key.HOME:\n                this.selectFlowRelative(-1e10);\n                break;\n            case toputils.Key.ESC:\n                this.selectFlow(null);\n                break;\n            case toputils.Key.H:\n            case toputils.Key.LEFT:\n                if (this.refs.flowDetails) {\n                    this.refs.flowDetails.nextTab(-1);\n                }\n                break;\n            case toputils.Key.L:\n            case toputils.Key.TAB:\n            case toputils.Key.RIGHT:\n                if (this.refs.flowDetails) {\n                    this.refs.flowDetails.nextTab(+1);\n                }\n                break;\n            case toputils.Key.C:\n                if (e.shiftKey) {\n                    FlowActions.clear();\n                }\n                break;\n            case toputils.Key.D:\n                if (flow) {\n                    if (e.shiftKey) {\n                        FlowActions.duplicate(flow);\n                    } else {\n                        FlowActions.delete(flow);\n                    }\n                }\n                break;\n            case toputils.Key.A:\n                if (e.shiftKey) {\n                    FlowActions.accept_all();\n                } else if (flow && flow.intercepted) {\n                    FlowActions.accept(flow);\n                }\n                break;\n            case toputils.Key.R:\n                if (!e.shiftKey && flow) {\n                    FlowActions.replay(flow);\n                }\n                break;\n            case toputils.Key.V:\n                if(e.shiftKey && flow && flow.modified) {\n                    FlowActions.revert(flow);\n                }\n                break;\n            default:\n                console.debug(\"keydown\", e.keyCode);\n                return;\n        }\n        e.preventDefault();\n    },\n    getSelected: function () {\n        return this.props.flowStore.get(this.getParams().flowId);\n    },\n    render: function () {\n        var selected = this.getSelected();\n\n        var details;\n        if (selected) {\n            details = [\n                React.createElement(utils.Splitter, {key: \"splitter\"}),\n                React.createElement(flowdetail.FlowDetail, {key: \"flowDetails\", ref: \"flowDetails\", flow: selected})\n            ];\n        } else {\n            details = null;\n        }\n\n        return (\n            React.createElement(\"div\", {className: \"main-view\", onKeyDown: this.onKeyDown, tabIndex: \"0\"}, \n                React.createElement(FlowTable, {ref: \"flowTable\", \n                    view: this.state.view, \n                    selectFlow: this.selectFlow, \n                    selected: selected}), \n                details\n            )\n        );\n    }\n});\n\nmodule.exports = MainView;\n","var React = require(\"react\");\nvar ReactRouter = require(\"react-router\");\nvar _ = require(\"lodash\");\n\nvar utils = require(\"./utils.js\");\nvar MainView = require(\"./mainview.js\");\nvar Footer = require(\"./footer.js\");\nvar header = require(\"./header.js\");\nvar EventLog = require(\"./eventlog.js\");\nvar store = require(\"../store/store.js\");\n\n\n//TODO: Move out of here, just a stub.\nvar Reports = React.createClass({displayName: \"Reports\",\n    render: function () {\n        return React.createElement(\"div\", null, \"ReportEditor\");\n    }\n});\n\n\nvar ProxyAppMain = React.createClass({displayName: \"ProxyAppMain\",\n    mixins: [utils.State],\n    getInitialState: function () {\n        var eventStore = new store.EventLogStore();\n        var flowStore = new store.FlowStore();\n        var settings = new store.SettingsStore();\n\n        // Default Settings before fetch\n        _.extend(settings.dict,{\n        });\n        return {\n            settings: settings,\n            flowStore: flowStore,\n            eventStore: eventStore\n        };\n    },\n    componentDidMount: function () {\n        this.state.settings.addListener(\"recalculate\", this.onSettingsChange);\n        window.app = this;\n    },\n    componentWillUnmount: function () {\n        this.state.settings.removeListener(\"recalculate\", this.onSettingsChange);\n    },\n    onSettingsChange: function(){\n        this.setState({\n            settings: this.state.settings\n        });\n    },\n    render: function () {\n\n        var eventlog;\n        if (this.getQuery()[Query.SHOW_EVENTLOG]) {\n            eventlog = [\n                React.createElement(utils.Splitter, {key: \"splitter\", axis: \"y\"}),\n                React.createElement(EventLog, {key: \"eventlog\", eventStore: this.state.eventStore})\n            ];\n        } else {\n            eventlog = null;\n        }\n\n        return (\n            React.createElement(\"div\", {id: \"container\"}, \n                React.createElement(header.Header, {settings: this.state.settings.dict}), \n                React.createElement(RouteHandler, {settings: this.state.settings.dict, flowStore: this.state.flowStore}), \n                eventlog, \n                React.createElement(Footer, {settings: this.state.settings.dict})\n            )\n        );\n    }\n});\n\n\nvar Route = ReactRouter.Route;\nvar RouteHandler = ReactRouter.RouteHandler;\nvar Redirect = ReactRouter.Redirect;\nvar DefaultRoute = ReactRouter.DefaultRoute;\nvar NotFoundRoute = ReactRouter.NotFoundRoute;\n\n\nvar routes = (\n    React.createElement(Route, {path: \"/\", handler: ProxyAppMain}, \n        React.createElement(Route, {name: \"flows\", path: \"flows\", handler: MainView}), \n        React.createElement(Route, {name: \"flow\", path: \"flows/:flowId/:detailTab\", handler: MainView}), \n        React.createElement(Route, {name: \"reports\", handler: Reports}), \n        React.createElement(Redirect, {path: \"/\", to: \"flows\"})\n    )\n);\n\nmodule.exports = {\n    routes: routes\n};\n\n","var React = require(\"react\");\nvar ReactRouter = require(\"react-router\");\nvar _ = require(\"lodash\");\n\n//React utils. For other utilities, see ../utils.js\n\n// http://blog.vjeux.com/2013/javascript/scroll-position-with-react.html (also contains inverse example)\nvar AutoScrollMixin = {\n    componentWillUpdate: function () {\n        var node = this.getDOMNode();\n        this._shouldScrollBottom = (\n            node.scrollTop !== 0 &&\n            node.scrollTop + node.clientHeight === node.scrollHeight\n        );\n    },\n    componentDidUpdate: function () {\n        if (this._shouldScrollBottom) {\n            var node = this.getDOMNode();\n            node.scrollTop = node.scrollHeight;\n        }\n    },\n};\n\n\nvar StickyHeadMixin = {\n    adjustHead: function () {\n        // Abusing CSS transforms to set the element\n        // referenced as head into some kind of position:sticky.\n        var head = this.refs.head.getDOMNode();\n        head.style.transform = \"translate(0,\" + this.getDOMNode().scrollTop + \"px)\";\n    }\n};\n\n\nvar Navigation = _.extend({}, ReactRouter.Navigation, {\n    setQuery: function (dict) {\n        var q = this.context.getCurrentQuery();\n        for(var i in dict){\n            if(dict.hasOwnProperty(i)){\n                q[i] = dict[i] || undefined; //falsey values shall be removed.\n            }\n        }\n        q._ = \"_\"; // workaround for https://github.com/rackt/react-router/pull/599\n        this.replaceWith(this.context.getCurrentPath(), this.context.getCurrentParams(), q);\n    },\n    replaceWith: function(routeNameOrPath, params, query) {\n        if(routeNameOrPath === undefined){\n            routeNameOrPath = this.context.getCurrentPath();\n        }\n        if(params === undefined){\n            params = this.context.getCurrentParams();\n        }\n        if(query === undefined){\n            query = this.context.getCurrentQuery();\n        }\n        ReactRouter.Navigation.replaceWith.call(this, routeNameOrPath, params, query);\n    }\n});\n_.extend(Navigation.contextTypes, ReactRouter.State.contextTypes);\n\nvar State = _.extend({}, ReactRouter.State, {\n    getInitialState: function () {\n        this._query = this.context.getCurrentQuery();\n        this._queryWatches = [];\n        return null;\n    },\n    onQueryChange: function (key, callback) {\n        this._queryWatches.push({\n            key: key,\n            callback: callback\n        });\n    },\n    componentWillReceiveProps: function (nextProps, nextState) {\n        var q = this.context.getCurrentQuery();\n        for (var i = 0; i < this._queryWatches.length; i++) {\n            var watch = this._queryWatches[i];\n            if (this._query[watch.key] !== q[watch.key]) {\n                watch.callback(this._query[watch.key], q[watch.key], watch.key);\n            }\n        }\n        this._query = q;\n    }\n});\n\nvar Splitter = React.createClass({displayName: \"Splitter\",\n    getDefaultProps: function () {\n        return {\n            axis: \"x\"\n        };\n    },\n    getInitialState: function () {\n        return {\n            applied: false,\n            startX: false,\n            startY: false\n        };\n    },\n    onMouseDown: function (e) {\n        this.setState({\n            startX: e.pageX,\n            startY: e.pageY\n        });\n        window.addEventListener(\"mousemove\", this.onMouseMove);\n        window.addEventListener(\"mouseup\", this.onMouseUp);\n        // Occasionally, only a dragEnd event is triggered, but no mouseUp.\n        window.addEventListener(\"dragend\", this.onDragEnd);\n    },\n    onDragEnd: function () {\n        this.getDOMNode().style.transform = \"\";\n        window.removeEventListener(\"dragend\", this.onDragEnd);\n        window.removeEventListener(\"mouseup\", this.onMouseUp);\n        window.removeEventListener(\"mousemove\", this.onMouseMove);\n    },\n    onMouseUp: function (e) {\n        this.onDragEnd();\n\n        var node = this.getDOMNode();\n        var prev = node.previousElementSibling;\n        var next = node.nextElementSibling;\n\n        var dX = e.pageX - this.state.startX;\n        var dY = e.pageY - this.state.startY;\n        var flexBasis;\n        if (this.props.axis === \"x\") {\n            flexBasis = prev.offsetWidth + dX;\n        } else {\n            flexBasis = prev.offsetHeight + dY;\n        }\n\n        prev.style.flex = \"0 0 \" + Math.max(0, flexBasis) + \"px\";\n        next.style.flex = \"1 1 auto\";\n\n        this.setState({\n            applied: true\n        });\n        this.onResize();\n    },\n    onMouseMove: function (e) {\n        var dX = 0, dY = 0;\n        if (this.props.axis === \"x\") {\n            dX = e.pageX - this.state.startX;\n        } else {\n            dY = e.pageY - this.state.startY;\n        }\n        this.getDOMNode().style.transform = \"translate(\" + dX + \"px,\" + dY + \"px)\";\n    },\n    onResize: function () {\n        // Trigger a global resize event. This notifies components that employ virtual scrolling\n        // that their viewport may have changed.\n        window.setTimeout(function () {\n            window.dispatchEvent(new CustomEvent(\"resize\"));\n        }, 1);\n    },\n    reset: function (willUnmount) {\n        if (!this.state.applied) {\n            return;\n        }\n        var node = this.getDOMNode();\n        var prev = node.previousElementSibling;\n        var next = node.nextElementSibling;\n\n        prev.style.flex = \"\";\n        next.style.flex = \"\";\n\n        if (!willUnmount) {\n            this.setState({\n                applied: false\n            });\n        }\n        this.onResize();\n    },\n    componentWillUnmount: function () {\n        this.reset(true);\n    },\n    render: function () {\n        var className = \"splitter\";\n        if (this.props.axis === \"x\") {\n            className += \" splitter-x\";\n        } else {\n            className += \" splitter-y\";\n        }\n        return (\n            React.createElement(\"div\", {className: className}, \n                React.createElement(\"div\", {onMouseDown: this.onMouseDown, draggable: \"true\"})\n            )\n        );\n    }\n});\n\nmodule.exports = {\n    State: State,\n    Navigation: Navigation,\n    StickyHeadMixin: StickyHeadMixin,\n    AutoScrollMixin: AutoScrollMixin,\n    Splitter: Splitter\n}","var React = require(\"react\");\n\nvar VirtualScrollMixin = {\n    getInitialState: function () {\n        return {\n            start: 0,\n            stop: 0\n        };\n    },\n    componentWillMount: function () {\n        if (!this.props.rowHeight) {\n            console.warn(\"VirtualScrollMixin: No rowHeight specified\", this);\n        }\n    },\n    getPlaceholderTop: function (total) {\n        var Tag = this.props.placeholderTagName || \"tr\";\n        // When a large trunk of elements is removed from the button, start may be far off the viewport.\n        // To make this issue less severe, limit the top placeholder to the total number of rows.\n        var style = {\n            height: Math.min(this.state.start, total) * this.props.rowHeight\n        };\n        var spacer = React.createElement(Tag, {key: \"placeholder-top\", style: style});\n\n        if (this.state.start % 2 === 1) {\n            // fix even/odd rows\n            return [spacer, React.createElement(Tag, {key: \"placeholder-top-2\"})];\n        } else {\n            return spacer;\n        }\n    },\n    getPlaceholderBottom: function (total) {\n        var Tag = this.props.placeholderTagName || \"tr\";\n        var style = {\n            height: Math.max(0, total - this.state.stop) * this.props.rowHeight\n        };\n        return React.createElement(Tag, {key: \"placeholder-bottom\", style: style});\n    },\n    componentDidMount: function () {\n        this.onScroll();\n        window.addEventListener('resize', this.onScroll);\n    },\n    componentWillUnmount: function(){\n        window.removeEventListener('resize', this.onScroll);\n    },\n    onScroll: function () {\n        var viewport = this.getDOMNode();\n        var top = viewport.scrollTop;\n        var height = viewport.offsetHeight;\n        var start = Math.floor(top / this.props.rowHeight);\n        var stop = start + Math.ceil(height / (this.props.rowHeightMin || this.props.rowHeight));\n\n        this.setState({\n            start: start,\n            stop: stop\n        });\n    },\n    renderRows: function (elems) {\n        var rows = [];\n        var max = Math.min(elems.length, this.state.stop);\n\n        for (var i = this.state.start; i < max; i++) {\n            var elem = elems[i];\n            rows.push(this.renderRow(elem));\n        }\n        return rows;\n    },\n    scrollRowIntoView: function (index, head_height) {\n\n        var row_top = (index * this.props.rowHeight) + head_height;\n        var row_bottom = row_top + this.props.rowHeight;\n\n        var viewport = this.getDOMNode();\n        var viewport_top = viewport.scrollTop;\n        var viewport_bottom = viewport_top + viewport.offsetHeight;\n\n        // Account for pinned thead\n        if (row_top - head_height < viewport_top) {\n            viewport.scrollTop = row_top - head_height;\n        } else if (row_bottom > viewport_bottom) {\n            viewport.scrollTop = row_bottom - viewport.offsetHeight;\n        }\n    },\n};\n\nmodule.exports  = VirtualScrollMixin;","\nvar actions = require(\"./actions.js\");\n\nfunction Connection(url) {\n    if (url[0] === \"/\") {\n        url = location.origin.replace(\"http\", \"ws\") + url;\n    }\n\n    var ws = new WebSocket(url);\n    ws.onopen = function () {\n        actions.ConnectionActions.open();\n    };\n    ws.onmessage = function (message) {\n        var m = JSON.parse(message.data);\n        AppDispatcher.dispatchServerAction(m);\n    };\n    ws.onerror = function () {\n        actions.ConnectionActions.error();\n        EventLogActions.add_event(\"WebSocket connection error.\");\n    };\n    ws.onclose = function () {\n        actions.ConnectionActions.close();\n        EventLogActions.add_event(\"WebSocket connection closed.\");\n    };\n    return ws;\n}\n\nmodule.exports = Connection;","\nvar flux = require(\"flux\");\n\nconst PayloadSources = {\n    VIEW: \"view\",\n    SERVER: \"server\"\n};\n\n\nAppDispatcher = new flux.Dispatcher();\nAppDispatcher.dispatchViewAction = function (action) {\n    action.source = PayloadSources.VIEW;\n    this.dispatch(action);\n};\nAppDispatcher.dispatchServerAction = function (action) {\n    action.source = PayloadSources.SERVER;\n    this.dispatch(action);\n};\n\nmodule.exports = {\n    AppDispatcher: AppDispatcher\n};","/* jshint ignore:start */\nFilt = (function() {\n  /*\n   * Generated by PEG.js 0.8.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function SyntaxError(message, expected, found, offset, line, column) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.offset   = offset;\n    this.line     = line;\n    this.column   = column;\n\n    this.name     = \"SyntaxError\";\n  }\n\n  peg$subclass(SyntaxError, Error);\n\n  function parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n\n        peg$FAILED = {},\n\n        peg$startRuleFunctions = { start: peg$parsestart },\n        peg$startRuleFunction  = peg$parsestart,\n\n        peg$c0 = { type: \"other\", description: \"filter expression\" },\n        peg$c1 = peg$FAILED,\n        peg$c2 = function(orExpr) { return orExpr; },\n        peg$c3 = [],\n        peg$c4 = function() {return trueFilter; },\n        peg$c5 = { type: \"other\", description: \"whitespace\" },\n        peg$c6 = /^[ \\t\\n\\r]/,\n        peg$c7 = { type: \"class\", value: \"[ \\\\t\\\\n\\\\r]\", description: \"[ \\\\t\\\\n\\\\r]\" },\n        peg$c8 = { type: \"other\", description: \"control character\" },\n        peg$c9 = /^[|&!()~\"]/,\n        peg$c10 = { type: \"class\", value: \"[|&!()~\\\"]\", description: \"[|&!()~\\\"]\" },\n        peg$c11 = { type: \"other\", description: \"optional whitespace\" },\n        peg$c12 = \"|\",\n        peg$c13 = { type: \"literal\", value: \"|\", description: \"\\\"|\\\"\" },\n        peg$c14 = function(first, second) { return or(first, second); },\n        peg$c15 = \"&\",\n        peg$c16 = { type: \"literal\", value: \"&\", description: \"\\\"&\\\"\" },\n        peg$c17 = function(first, second) { return and(first, second); },\n        peg$c18 = \"!\",\n        peg$c19 = { type: \"literal\", value: \"!\", description: \"\\\"!\\\"\" },\n        peg$c20 = function(expr) { return not(expr); },\n        peg$c21 = \"(\",\n        peg$c22 = { type: \"literal\", value: \"(\", description: \"\\\"(\\\"\" },\n        peg$c23 = \")\",\n        peg$c24 = { type: \"literal\", value: \")\", description: \"\\\")\\\"\" },\n        peg$c25 = function(expr) { return binding(expr); },\n        peg$c26 = \"~a\",\n        peg$c27 = { type: \"literal\", value: \"~a\", description: \"\\\"~a\\\"\" },\n        peg$c28 = function() { return assetFilter; },\n        peg$c29 = \"~e\",\n        peg$c30 = { type: \"literal\", value: \"~e\", description: \"\\\"~e\\\"\" },\n        peg$c31 = function() { return errorFilter; },\n        peg$c32 = \"~q\",\n        peg$c33 = { type: \"literal\", value: \"~q\", description: \"\\\"~q\\\"\" },\n        peg$c34 = function() { return noResponseFilter; },\n        peg$c35 = \"~s\",\n        peg$c36 = { type: \"literal\", value: \"~s\", description: \"\\\"~s\\\"\" },\n        peg$c37 = function() { return responseFilter; },\n        peg$c38 = \"true\",\n        peg$c39 = { type: \"literal\", value: \"true\", description: \"\\\"true\\\"\" },\n        peg$c40 = function() { return trueFilter; },\n        peg$c41 = \"false\",\n        peg$c42 = { type: \"literal\", value: \"false\", description: \"\\\"false\\\"\" },\n        peg$c43 = function() { return falseFilter; },\n        peg$c44 = \"~c\",\n        peg$c45 = { type: \"literal\", value: \"~c\", description: \"\\\"~c\\\"\" },\n        peg$c46 = function(s) { return responseCode(s); },\n        peg$c47 = \"~d\",\n        peg$c48 = { type: \"literal\", value: \"~d\", description: \"\\\"~d\\\"\" },\n        peg$c49 = function(s) { return domain(s); },\n        peg$c50 = \"~h\",\n        peg$c51 = { type: \"literal\", value: \"~h\", description: \"\\\"~h\\\"\" },\n        peg$c52 = function(s) { return header(s); },\n        peg$c53 = \"~hq\",\n        peg$c54 = { type: \"literal\", value: \"~hq\", description: \"\\\"~hq\\\"\" },\n        peg$c55 = function(s) { return requestHeader(s); },\n        peg$c56 = \"~hs\",\n        peg$c57 = { type: \"literal\", value: \"~hs\", description: \"\\\"~hs\\\"\" },\n        peg$c58 = function(s) { return responseHeader(s); },\n        peg$c59 = \"~m\",\n        peg$c60 = { type: \"literal\", value: \"~m\", description: \"\\\"~m\\\"\" },\n        peg$c61 = function(s) { return method(s); },\n        peg$c62 = \"~t\",\n        peg$c63 = { type: \"literal\", value: \"~t\", description: \"\\\"~t\\\"\" },\n        peg$c64 = function(s) { return contentType(s); },\n        peg$c65 = \"~tq\",\n        peg$c66 = { type: \"literal\", value: \"~tq\", description: \"\\\"~tq\\\"\" },\n        peg$c67 = function(s) { return requestContentType(s); },\n        peg$c68 = \"~ts\",\n        peg$c69 = { type: \"literal\", value: \"~ts\", description: \"\\\"~ts\\\"\" },\n        peg$c70 = function(s) { return responseContentType(s); },\n        peg$c71 = \"~u\",\n        peg$c72 = { type: \"literal\", value: \"~u\", description: \"\\\"~u\\\"\" },\n        peg$c73 = function(s) { return url(s); },\n        peg$c74 = { type: \"other\", description: \"integer\" },\n        peg$c75 = null,\n        peg$c76 = /^['\"]/,\n        peg$c77 = { type: \"class\", value: \"['\\\"]\", description: \"['\\\"]\" },\n        peg$c78 = /^[0-9]/,\n        peg$c79 = { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n        peg$c80 = function(digits) { return parseInt(digits.join(\"\"), 10); },\n        peg$c81 = { type: \"other\", description: \"string\" },\n        peg$c82 = \"\\\"\",\n        peg$c83 = { type: \"literal\", value: \"\\\"\", description: \"\\\"\\\\\\\"\\\"\" },\n        peg$c84 = function(chars) { return chars.join(\"\"); },\n        peg$c85 = \"'\",\n        peg$c86 = { type: \"literal\", value: \"'\", description: \"\\\"'\\\"\" },\n        peg$c87 = void 0,\n        peg$c88 = /^[\"\\\\]/,\n        peg$c89 = { type: \"class\", value: \"[\\\"\\\\\\\\]\", description: \"[\\\"\\\\\\\\]\" },\n        peg$c90 = { type: \"any\", description: \"any character\" },\n        peg$c91 = function(char) { return char; },\n        peg$c92 = \"\\\\\",\n        peg$c93 = { type: \"literal\", value: \"\\\\\", description: \"\\\"\\\\\\\\\\\"\" },\n        peg$c94 = /^['\\\\]/,\n        peg$c95 = { type: \"class\", value: \"['\\\\\\\\]\", description: \"['\\\\\\\\]\" },\n        peg$c96 = /^['\"\\\\]/,\n        peg$c97 = { type: \"class\", value: \"['\\\"\\\\\\\\]\", description: \"['\\\"\\\\\\\\]\" },\n        peg$c98 = \"n\",\n        peg$c99 = { type: \"literal\", value: \"n\", description: \"\\\"n\\\"\" },\n        peg$c100 = function() { return \"\\n\"; },\n        peg$c101 = \"r\",\n        peg$c102 = { type: \"literal\", value: \"r\", description: \"\\\"r\\\"\" },\n        peg$c103 = function() { return \"\\r\"; },\n        peg$c104 = \"t\",\n        peg$c105 = { type: \"literal\", value: \"t\", description: \"\\\"t\\\"\" },\n        peg$c106 = function() { return \"\\t\"; },\n\n        peg$currPos          = 0,\n        peg$reportedPos      = 0,\n        peg$cachedPos        = 0,\n        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$reportedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$reportedPos;\n    }\n\n    function line() {\n      return peg$computePosDetails(peg$reportedPos).line;\n    }\n\n    function column() {\n      return peg$computePosDetails(peg$reportedPos).column;\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        peg$reportedPos\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(message, null, peg$reportedPos);\n    }\n\n    function peg$computePosDetails(pos) {\n      function advance(details, startPos, endPos) {\n        var p, ch;\n\n        for (p = startPos; p < endPos; p++) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n        }\n      }\n\n      if (peg$cachedPos !== pos) {\n        if (peg$cachedPos > pos) {\n          peg$cachedPos = 0;\n          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\n        }\n        advance(peg$cachedPosDetails, peg$cachedPos, pos);\n        peg$cachedPos = pos;\n      }\n\n      return peg$cachedPosDetails;\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, pos) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0180-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1080-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      var posDetails = peg$computePosDetails(pos),\n          found      = pos < input.length ? input.charAt(pos) : null;\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        pos,\n        posDetails.line,\n        posDetails.column\n      );\n    }\n\n    function peg$parsestart() {\n      var s0, s1, s2, s3;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseOrExpr();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c2(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c4();\n        }\n        s0 = s1;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c0); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsews() {\n      var s0, s1;\n\n      peg$silentFails++;\n      if (peg$c6.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c7); }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c5); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsecc() {\n      var s0, s1;\n\n      peg$silentFails++;\n      if (peg$c9.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c10); }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c8); }\n      }\n\n      return s0;\n    }\n\n    function peg$parse__() {\n      var s0, s1;\n\n      peg$silentFails++;\n      s0 = [];\n      s1 = peg$parsews();\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsews();\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c11); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseOrExpr() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$parseAndExpr();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 124) {\n            s3 = peg$c12;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c13); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseOrExpr();\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c14(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c1;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c1;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseAndExpr();\n      }\n\n      return s0;\n    }\n\n    function peg$parseAndExpr() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$parseNotExpr();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 38) {\n            s3 = peg$c15;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c16); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseAndExpr();\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c17(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c1;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c1;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseNotExpr();\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parsews();\n          if (s3 !== peg$FAILED) {\n            while (s3 !== peg$FAILED) {\n              s2.push(s3);\n              s3 = peg$parsews();\n            }\n          } else {\n            s2 = peg$c1;\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseAndExpr();\n            if (s3 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c17(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c1;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseNotExpr();\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseNotExpr() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 33) {\n        s1 = peg$c18;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c19); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseNotExpr();\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c20(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseBindingExpr();\n      }\n\n      return s0;\n    }\n\n    function peg$parseBindingExpr() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s1 = peg$c21;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c22); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseOrExpr();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s5 = peg$c23;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c24); }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c25(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c1;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c1;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseExpr();\n      }\n\n      return s0;\n    }\n\n    function peg$parseExpr() {\n      var s0;\n\n      s0 = peg$parseNullaryExpr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseUnaryExpr();\n      }\n\n      return s0;\n    }\n\n    function peg$parseNullaryExpr() {\n      var s0, s1;\n\n      s0 = peg$parseBooleanLiteral();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c26) {\n          s1 = peg$c26;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c27); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c28();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c29) {\n            s1 = peg$c29;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c30); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c31();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c32) {\n              s1 = peg$c32;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c33); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c34();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c35) {\n                s1 = peg$c35;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c36); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c37();\n              }\n              s0 = s1;\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseBooleanLiteral() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4) === peg$c38) {\n        s1 = peg$c38;\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c39); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c40();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 5) === peg$c41) {\n          s1 = peg$c41;\n          peg$currPos += 5;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c42); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c43();\n        }\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n    function peg$parseUnaryExpr() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c44) {\n        s1 = peg$c44;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c45); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parsews();\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parsews();\n          }\n        } else {\n          s2 = peg$c1;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseIntegerLiteral();\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c46(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c47) {\n          s1 = peg$c47;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c48); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parsews();\n          if (s3 !== peg$FAILED) {\n            while (s3 !== peg$FAILED) {\n              s2.push(s3);\n              s3 = peg$parsews();\n            }\n          } else {\n            s2 = peg$c1;\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseStringLiteral();\n            if (s3 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c49(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c1;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c50) {\n            s1 = peg$c50;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c51); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = [];\n            s3 = peg$parsews();\n            if (s3 !== peg$FAILED) {\n              while (s3 !== peg$FAILED) {\n                s2.push(s3);\n                s3 = peg$parsews();\n              }\n            } else {\n              s2 = peg$c1;\n            }\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseStringLiteral();\n              if (s3 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c52(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c1;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c1;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 3) === peg$c53) {\n              s1 = peg$c53;\n              peg$currPos += 3;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c54); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = [];\n              s3 = peg$parsews();\n              if (s3 !== peg$FAILED) {\n                while (s3 !== peg$FAILED) {\n                  s2.push(s3);\n                  s3 = peg$parsews();\n                }\n              } else {\n                s2 = peg$c1;\n              }\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseStringLiteral();\n                if (s3 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c55(s3);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c1;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c1;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c1;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 3) === peg$c56) {\n                s1 = peg$c56;\n                peg$currPos += 3;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c57); }\n              }\n              if (s1 !== peg$FAILED) {\n                s2 = [];\n                s3 = peg$parsews();\n                if (s3 !== peg$FAILED) {\n                  while (s3 !== peg$FAILED) {\n                    s2.push(s3);\n                    s3 = peg$parsews();\n                  }\n                } else {\n                  s2 = peg$c1;\n                }\n                if (s2 !== peg$FAILED) {\n                  s3 = peg$parseStringLiteral();\n                  if (s3 !== peg$FAILED) {\n                    peg$reportedPos = s0;\n                    s1 = peg$c58(s3);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c1;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c1;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c1;\n              }\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c59) {\n                  s1 = peg$c59;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c60); }\n                }\n                if (s1 !== peg$FAILED) {\n                  s2 = [];\n                  s3 = peg$parsews();\n                  if (s3 !== peg$FAILED) {\n                    while (s3 !== peg$FAILED) {\n                      s2.push(s3);\n                      s3 = peg$parsews();\n                    }\n                  } else {\n                    s2 = peg$c1;\n                  }\n                  if (s2 !== peg$FAILED) {\n                    s3 = peg$parseStringLiteral();\n                    if (s3 !== peg$FAILED) {\n                      peg$reportedPos = s0;\n                      s1 = peg$c61(s3);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$c1;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c1;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c1;\n                }\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 2) === peg$c62) {\n                    s1 = peg$c62;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c63); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    s2 = [];\n                    s3 = peg$parsews();\n                    if (s3 !== peg$FAILED) {\n                      while (s3 !== peg$FAILED) {\n                        s2.push(s3);\n                        s3 = peg$parsews();\n                      }\n                    } else {\n                      s2 = peg$c1;\n                    }\n                    if (s2 !== peg$FAILED) {\n                      s3 = peg$parseStringLiteral();\n                      if (s3 !== peg$FAILED) {\n                        peg$reportedPos = s0;\n                        s1 = peg$c64(s3);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$c1;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$c1;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c1;\n                  }\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 3) === peg$c65) {\n                      s1 = peg$c65;\n                      peg$currPos += 3;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c66); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      s2 = [];\n                      s3 = peg$parsews();\n                      if (s3 !== peg$FAILED) {\n                        while (s3 !== peg$FAILED) {\n                          s2.push(s3);\n                          s3 = peg$parsews();\n                        }\n                      } else {\n                        s2 = peg$c1;\n                      }\n                      if (s2 !== peg$FAILED) {\n                        s3 = peg$parseStringLiteral();\n                        if (s3 !== peg$FAILED) {\n                          peg$reportedPos = s0;\n                          s1 = peg$c67(s3);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$c1;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$c1;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$c1;\n                    }\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      if (input.substr(peg$currPos, 3) === peg$c68) {\n                        s1 = peg$c68;\n                        peg$currPos += 3;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c69); }\n                      }\n                      if (s1 !== peg$FAILED) {\n                        s2 = [];\n                        s3 = peg$parsews();\n                        if (s3 !== peg$FAILED) {\n                          while (s3 !== peg$FAILED) {\n                            s2.push(s3);\n                            s3 = peg$parsews();\n                          }\n                        } else {\n                          s2 = peg$c1;\n                        }\n                        if (s2 !== peg$FAILED) {\n                          s3 = peg$parseStringLiteral();\n                          if (s3 !== peg$FAILED) {\n                            peg$reportedPos = s0;\n                            s1 = peg$c70(s3);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$c1;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$c1;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$c1;\n                      }\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.substr(peg$currPos, 2) === peg$c71) {\n                          s1 = peg$c71;\n                          peg$currPos += 2;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c72); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          s2 = [];\n                          s3 = peg$parsews();\n                          if (s3 !== peg$FAILED) {\n                            while (s3 !== peg$FAILED) {\n                              s2.push(s3);\n                              s3 = peg$parsews();\n                            }\n                          } else {\n                            s2 = peg$c1;\n                          }\n                          if (s2 !== peg$FAILED) {\n                            s3 = peg$parseStringLiteral();\n                            if (s3 !== peg$FAILED) {\n                              peg$reportedPos = s0;\n                              s1 = peg$c73(s3);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$c1;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$c1;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$c1;\n                        }\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$currPos;\n                          s1 = peg$parseStringLiteral();\n                          if (s1 !== peg$FAILED) {\n                            peg$reportedPos = s0;\n                            s1 = peg$c73(s1);\n                          }\n                          s0 = s1;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseIntegerLiteral() {\n      var s0, s1, s2, s3;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (peg$c76.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c77); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$c75;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        if (peg$c78.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c79); }\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            if (peg$c78.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c79); }\n            }\n          }\n        } else {\n          s2 = peg$c1;\n        }\n        if (s2 !== peg$FAILED) {\n          if (peg$c76.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c77); }\n          }\n          if (s3 === peg$FAILED) {\n            s3 = peg$c75;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c80(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c74); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseStringLiteral() {\n      var s0, s1, s2, s3;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 34) {\n        s1 = peg$c82;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c83); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parseDoubleStringChar();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseDoubleStringChar();\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s3 = peg$c82;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c83); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c84(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s1 = peg$c85;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c86); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parseSingleStringChar();\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parseSingleStringChar();\n          }\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s3 = peg$c85;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c86); }\n            }\n            if (s3 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c84(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c1;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$currPos;\n          peg$silentFails++;\n          s2 = peg$parsecc();\n          peg$silentFails--;\n          if (s2 === peg$FAILED) {\n            s1 = peg$c87;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$c1;\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = [];\n            s3 = peg$parseUnquotedStringChar();\n            if (s3 !== peg$FAILED) {\n              while (s3 !== peg$FAILED) {\n                s2.push(s3);\n                s3 = peg$parseUnquotedStringChar();\n              }\n            } else {\n              s2 = peg$c1;\n            }\n            if (s2 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c84(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c1;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c81); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseDoubleStringChar() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      peg$silentFails++;\n      if (peg$c88.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c89); }\n      }\n      peg$silentFails--;\n      if (s2 === peg$FAILED) {\n        s1 = peg$c87;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c90); }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c91(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 92) {\n          s1 = peg$c92;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c93); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseEscapeSequence();\n          if (s2 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c91(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseSingleStringChar() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      peg$silentFails++;\n      if (peg$c94.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c95); }\n      }\n      peg$silentFails--;\n      if (s2 === peg$FAILED) {\n        s1 = peg$c87;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c90); }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c91(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 92) {\n          s1 = peg$c92;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c93); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseEscapeSequence();\n          if (s2 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c91(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseUnquotedStringChar() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      peg$silentFails++;\n      s2 = peg$parsews();\n      peg$silentFails--;\n      if (s2 === peg$FAILED) {\n        s1 = peg$c87;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c90); }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c91(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n\n      return s0;\n    }\n\n    function peg$parseEscapeSequence() {\n      var s0, s1;\n\n      if (peg$c96.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c97); }\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 110) {\n          s1 = peg$c98;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c99); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c100();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 114) {\n            s1 = peg$c101;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c102); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c103();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 116) {\n              s1 = peg$c104;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c105); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c106();\n            }\n            s0 = s1;\n          }\n        }\n      }\n\n      return s0;\n    }\n\n\n    function or(first, second) {\n        // Add explicit function names to ease debugging.\n        function orFilter() {\n            return first.apply(this, arguments) || second.apply(this, arguments);\n        }\n        orFilter.desc = first.desc + \" or \" + second.desc;\n        return orFilter;\n    }\n    function and(first, second) {\n        function andFilter() {\n            return first.apply(this, arguments) && second.apply(this, arguments);\n        }\n        andFilter.desc = first.desc + \" and \" + second.desc;\n        return andFilter;\n    }\n    function not(expr) {\n        function notFilter() {\n            return !expr.apply(this, arguments);\n        }\n        notFilter.desc = \"not \" + expr.desc;\n        return notFilter;\n    }\n    function binding(expr) {\n        function bindingFilter() {\n            return expr.apply(this, arguments);\n        }\n        bindingFilter.desc = \"(\" + expr.desc + \")\";\n        return bindingFilter;\n    }\n    function trueFilter(flow) {\n        return true;\n    }\n    trueFilter.desc = \"true\";\n    function falseFilter(flow) {\n        return false;\n    }\n    falseFilter.desc = \"false\";\n\n    var ASSET_TYPES = [\n        new RegExp(\"text/javascript\"),\n        new RegExp(\"application/x-javascript\"),\n        new RegExp(\"application/javascript\"),\n        new RegExp(\"text/css\"),\n        new RegExp(\"image/.*\"),\n        new RegExp(\"application/x-shockwave-flash\")\n    ];\n    function assetFilter(flow) {\n        if (flow.response) {\n            var ct = ResponseUtils.getContentType(flow.response);\n            var i = ASSET_TYPES.length;\n            while (i--) {\n                if (ASSET_TYPES[i].test(ct)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    assetFilter.desc = \"is asset\";\n    function responseCode(code){\n        function responseCodeFilter(flow){\n            return flow.response && flow.response.code === code;\n        }\n        responseCodeFilter.desc = \"resp. code is \" + code;\n        return responseCodeFilter;\n    }\n    function domain(regex){\n        regex = new RegExp(regex, \"i\");\n        function domainFilter(flow){\n            return flow.request && regex.test(flow.request.host);\n        }\n        domainFilter.desc = \"domain matches \" + regex;\n        return domainFilter;\n    }\n    function errorFilter(flow){\n        return !!flow.error;\n    }\n    errorFilter.desc = \"has error\";\n    function header(regex){\n        regex = new RegExp(regex, \"i\");\n        function headerFilter(flow){\n            return (\n                (flow.request && RequestUtils.match_header(flow.request, regex))\n                ||\n                (flow.response && ResponseUtils.match_header(flow.response, regex))\n            );\n        }\n        headerFilter.desc = \"header matches \" + regex;\n        return headerFilter;\n    }\n    function requestHeader(regex){\n        regex = new RegExp(regex, \"i\");\n        function requestHeaderFilter(flow){\n            return (flow.request && RequestUtils.match_header(flow.request, regex));\n        }\n        requestHeaderFilter.desc = \"req. header matches \" + regex;\n        return requestHeaderFilter;\n    }\n    function responseHeader(regex){\n        regex = new RegExp(regex, \"i\");\n        function responseHeaderFilter(flow){\n            return (flow.response && ResponseUtils.match_header(flow.response, regex));\n        }\n        responseHeaderFilter.desc = \"resp. header matches \" + regex;\n        return responseHeaderFilter;\n    }\n    function method(regex){\n        regex = new RegExp(regex, \"i\");\n        function methodFilter(flow){\n            return flow.request && regex.test(flow.request.method);\n        }\n        methodFilter.desc = \"method matches \" + regex;\n        return methodFilter;\n    }\n    function noResponseFilter(flow){\n        return flow.request && !flow.response;\n    }\n    noResponseFilter.desc = \"has no response\";\n    function responseFilter(flow){\n        return !!flow.response;\n    }\n    responseFilter.desc = \"has response\";\n\n    function contentType(regex){\n        regex = new RegExp(regex, \"i\");\n        function contentTypeFilter(flow){\n            return (\n                (flow.request && regex.test(RequestUtils.getContentType(flow.request)))\n                ||\n                (flow.response && regex.test(ResponseUtils.getContentType(flow.response)))\n            );\n        }\n        contentTypeFilter.desc = \"content type matches \" + regex;\n        return contentTypeFilter;\n    }\n    function requestContentType(regex){\n        regex = new RegExp(regex, \"i\");\n        function requestContentTypeFilter(flow){\n            return flow.request && regex.test(RequestUtils.getContentType(flow.request));\n        }\n        requestContentTypeFilter.desc = \"req. content type matches \" + regex;\n        return requestContentTypeFilter;\n    }\n    function responseContentType(regex){\n        regex = new RegExp(regex, \"i\");\n        function responseContentTypeFilter(flow){\n            return flow.response && regex.test(ResponseUtils.getContentType(flow.response));\n        }\n        responseContentTypeFilter.desc = \"resp. content type matches \" + regex;\n        return responseContentTypeFilter;\n    }\n    function url(regex){\n        regex = new RegExp(regex, \"i\");\n        function urlFilter(flow){\n            return flow.request && regex.test(RequestUtils.pretty_url(flow.request));\n        }\n        urlFilter.desc = \"url matches \" + regex;\n        return urlFilter;\n    }\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);\n    }\n  }\n\n  return {\n    SyntaxError: SyntaxError,\n    parse:       parse\n  };\n})();\n/* jshint ignore:end */\n\nmodule.exports = Filt;\n","var _ = require(\"lodash\");\n\nvar _MessageUtils = {\n    getContentType: function (message) {\n        return this.get_first_header(message, /^Content-Type$/i);\n    },\n    get_first_header: function (message, regex) {\n        //FIXME: Cache Invalidation.\n        if (!message._headerLookups)\n            Object.defineProperty(message, \"_headerLookups\", {\n                value: {},\n                configurable: false,\n                enumerable: false,\n                writable: false\n            });\n        if (!(regex in message._headerLookups)) {\n            var header;\n            for (var i = 0; i < message.headers.length; i++) {\n                if (!!message.headers[i][0].match(regex)) {\n                    header = message.headers[i];\n                    break;\n                }\n            }\n            message._headerLookups[regex] = header ? header[1] : undefined;\n        }\n        return message._headerLookups[regex];\n    },\n    match_header: function (message, regex) {\n        var headers = message.headers;\n        var i = headers.length;\n        while (i--) {\n            if (regex.test(headers[i].join(\" \"))) {\n                return headers[i];\n            }\n        }\n        return false;\n    }\n};\n\nvar defaultPorts = {\n    \"http\": 80,\n    \"https\": 443\n};\n\nvar RequestUtils = _.extend(_MessageUtils, {\n    pretty_host: function (request) {\n        //FIXME: Add hostheader\n        return request.host;\n    },\n    pretty_url: function (request) {\n        var port = \"\";\n        if (defaultPorts[request.scheme] !== request.port) {\n            port = \":\" + request.port;\n        }\n        return request.scheme + \"://\" + this.pretty_host(request) + port + request.path;\n    }\n});\n\nvar ResponseUtils = _.extend(_MessageUtils, {});\n\n\nmodule.exports = {\n    ResponseUtils: ResponseUtils,\n    RequestUtils: RequestUtils\n\n}","\nvar _ = require(\"lodash\");\nvar $ = require(\"jquery\");\nvar EventEmitter = require('events').EventEmitter;\n\nvar utils = require(\"../utils.js\");\nvar actions = require(\"../actions.js\");\nvar dispatcher = require(\"../dispatcher.js\");\n\n\nfunction ListStore() {\n    EventEmitter.call(this);\n    this.reset();\n}\n_.extend(ListStore.prototype, EventEmitter.prototype, {\n    add: function (elem) {\n        if (elem.id in this._pos_map) {\n            return;\n        }\n        this._pos_map[elem.id] = this.list.length;\n        this.list.push(elem);\n        this.emit(\"add\", elem);\n    },\n    update: function (elem) {\n        if (!(elem.id in this._pos_map)) {\n            return;\n        }\n        this.list[this._pos_map[elem.id]] = elem;\n        this.emit(\"update\", elem);\n    },\n    remove: function (elem_id) {\n        if (!(elem_id in this._pos_map)) {\n            return;\n        }\n        this.list.splice(this._pos_map[elem_id], 1);\n        this._build_map();\n        this.emit(\"remove\", elem_id);\n    },\n    reset: function (elems) {\n        this.list = elems || [];\n        this._build_map();\n        this.emit(\"recalculate\");\n    },\n    _build_map: function () {\n        this._pos_map = {};\n        for (var i = 0; i < this.list.length; i++) {\n            var elem = this.list[i];\n            this._pos_map[elem.id] = i;\n        }\n    },\n    get: function (elem_id) {\n        return this.list[this._pos_map[elem_id]];\n    },\n    index: function (elem_id) {\n        return this._pos_map[elem_id];\n    }\n});\n\n\nfunction DictStore() {\n    EventEmitter.call(this);\n    this.reset();\n}\n_.extend(DictStore.prototype, EventEmitter.prototype, {\n    update: function (dict) {\n        _.merge(this.dict, dict);\n        this.emit(\"recalculate\");\n    },\n    reset: function (dict) {\n        this.dict = dict || {};\n        this.emit(\"recalculate\");\n    }\n});\n\nfunction LiveStoreMixin(type) {\n    this.type = type;\n\n    this._updates_before_fetch = undefined;\n    this._fetchxhr = false;\n\n    this.handle = this.handle.bind(this);\n    dispatcher.AppDispatcher.register(this.handle);\n\n    // Avoid double-fetch on startup.\n    if (!(window.ws && window.ws.readyState === WebSocket.CONNECTING)) {\n        this.fetch();\n    }\n}\n_.extend(LiveStoreMixin.prototype, {\n    handle: function (event) {\n        if (event.type === actions.ActionTypes.CONNECTION_OPEN) {\n            return this.fetch();\n        }\n        if (event.type === this.type) {\n            if (event.cmd === actions.StoreCmds.RESET) {\n                this.fetch(event.data);\n            } else if (this._updates_before_fetch) {\n                console.log(\"defer update\", event);\n                this._updates_before_fetch.push(event);\n            } else {\n                this[event.cmd](event.data);\n            }\n        }\n    },\n    close: function () {\n        dispatcher.AppDispatcher.unregister(this.handle);\n    },\n    fetch: function (data) {\n        console.log(\"fetch \" + this.type);\n        if (this._fetchxhr) {\n            this._fetchxhr.abort();\n        }\n        this._updates_before_fetch = []; // (JS: empty array is true)\n        if (data) {\n            this.handle_fetch(data);\n        } else {\n            this._fetchxhr = $.getJSON(\"/\" + this.type)\n                .done(function (message) {\n                    this.handle_fetch(message.data);\n                }.bind(this))\n                .fail(function () {\n                    EventLogActions.add_event(\"Could not fetch \" + this.type);\n                }.bind(this));\n        }\n    },\n    handle_fetch: function (data) {\n        this._fetchxhr = false;\n        console.log(this.type + \" fetched.\", this._updates_before_fetch);\n        this.reset(data);\n        var updates = this._updates_before_fetch;\n        this._updates_before_fetch = false;\n        for (var i = 0; i < updates.length; i++) {\n            this.handle(updates[i]);\n        }\n    },\n});\n\nfunction LiveListStore(type) {\n    ListStore.call(this);\n    LiveStoreMixin.call(this, type);\n}\n_.extend(LiveListStore.prototype, ListStore.prototype, LiveStoreMixin.prototype);\n\nfunction LiveDictStore(type) {\n    DictStore.call(this);\n    LiveStoreMixin.call(this, type);\n}\n_.extend(LiveDictStore.prototype, DictStore.prototype, LiveStoreMixin.prototype);\n\n\nfunction FlowStore() {\n    return new LiveListStore(actions.ActionTypes.FLOW_STORE);\n}\n\nfunction SettingsStore() {\n    return new LiveDictStore(actions.ActionTypes.SETTINGS_STORE);\n}\n\nfunction EventLogStore() {\n    LiveListStore.call(this, actions.ActionTypes.EVENT_STORE);\n}\n_.extend(EventLogStore.prototype, LiveListStore.prototype, {\n    fetch: function(){\n        LiveListStore.prototype.fetch.apply(this, arguments);\n\n        // Make sure to display updates even if fetching all events failed.\n        // This way, we can send \"fetch failed\" log messages to the log.\n        if(this._fetchxhr){\n            this._fetchxhr.fail(function(){\n                this.handle_fetch(null);\n            }.bind(this));\n        }\n    }\n});\n\n\nmodule.exports = {\n    EventLogStore: EventLogStore,\n    SettingsStore: SettingsStore,\n    FlowStore: FlowStore\n};","\nvar EventEmitter = require('events').EventEmitter;\nvar _ = require(\"lodash\");\n\n\nvar utils = require(\"../utils.js\");\n\nfunction SortByStoreOrder(elem) {\n    return this.store.index(elem.id);\n}\n\nvar default_sort = SortByStoreOrder;\nvar default_filt = function(elem){\n    return true;\n};\n\nfunction StoreView(store, filt, sortfun) {\n    EventEmitter.call(this);\n    filt = filt || default_filt;\n    sortfun = sortfun || default_sort;\n\n    this.store = store;\n\n    this.add = this.add.bind(this);\n    this.update = this.update.bind(this);\n    this.remove = this.remove.bind(this);\n    this.recalculate = this.recalculate.bind(this);\n    this.store.addListener(\"add\", this.add);\n    this.store.addListener(\"update\", this.update);\n    this.store.addListener(\"remove\", this.remove);\n    this.store.addListener(\"recalculate\", this.recalculate);\n\n    this.recalculate(filt, sortfun);\n}\n\n_.extend(StoreView.prototype, EventEmitter.prototype, {\n    close: function () {\n        this.store.removeListener(\"add\", this.add);\n        this.store.removeListener(\"update\", this.update);\n        this.store.removeListener(\"remove\", this.remove);\n        this.store.removeListener(\"recalculate\", this.recalculate);\n        },\n        recalculate: function (filt, sortfun) {\n        if (filt) {\n            this.filt = filt.bind(this);\n        }\n        if (sortfun) {\n            this.sortfun = sortfun.bind(this);\n        }\n\n        this.list = this.store.list.filter(this.filt);\n        this.list.sort(function (a, b) {\n            return this.sortfun(a) - this.sortfun(b);\n        }.bind(this));\n        this.emit(\"recalculate\");\n    },\n    index: function (elem) {\n        return _.sortedIndex(this.list, elem, this.sortfun);\n    },\n    add: function (elem) {\n        if (this.filt(elem)) {\n            var idx = this.index(elem);\n            if (idx === this.list.length) { //happens often, .push is way faster.\n                this.list.push(elem);\n            } else {\n                this.list.splice(idx, 0, elem);\n            }\n            this.emit(\"add\", elem, idx);\n        }\n    },\n    update: function (elem) {\n        var idx;\n        var i = this.list.length;\n        // Search from the back, we usually update the latest entries.\n        while (i--) {\n            if (this.list[i].id === elem.id) {\n                idx = i;\n                break;\n            }\n        }\n\n        if (idx === -1) { //not contained in list\n            this.add(elem);\n        } else if (!this.filt(elem)) {\n            this.remove(elem.id);\n        } else {\n            if (this.sortfun(this.list[idx]) !== this.sortfun(elem)) { //sortpos has changed\n                this.remove(this.list[idx]);\n                this.add(elem);\n            } else {\n                this.list[idx] = elem;\n                this.emit(\"update\", elem, idx);\n            }\n        }\n    },\n    remove: function (elem_id) {\n        var idx = this.list.length;\n        while (idx--) {\n            if (this.list[idx].id === elem_id) {\n                this.list.splice(idx, 1);\n                this.emit(\"remove\", elem_id, idx);\n                break;\n            }\n        }\n    }\n});\n\nmodule.exports = {\n    StoreView: StoreView\n};","var $ = require(\"jquery\");\n\n\nvar Key = {\n    UP: 38,\n    DOWN: 40,\n    PAGE_UP: 33,\n    PAGE_DOWN: 34,\n    HOME: 36,\n    END: 35,\n    LEFT: 37,\n    RIGHT: 39,\n    ENTER: 13,\n    ESC: 27,\n    TAB: 9,\n    SPACE: 32,\n    BACKSPACE: 8,\n};\n// Add A-Z\nfor (var i = 65; i <= 90; i++) {\n    Key[String.fromCharCode(i)] = i;\n}\n\n\nvar formatSize = function (bytes) {\n    var size = bytes;\n    var prefix = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\"];\n    var i = 0;\n    while (Math.abs(size) >= 1024 && i < prefix.length - 1) {\n        i++;\n        size = size / 1024;\n    }\n    return (Math.floor(size * 100) / 100.0).toFixed(2) + prefix[i];\n};\n\n\nvar formatTimeDelta = function (milliseconds) {\n    var time = milliseconds;\n    var prefix = [\"ms\", \"s\", \"min\", \"h\"];\n    var div = [1000, 60, 60];\n    var i = 0;\n    while (Math.abs(time) >= div[i] && i < div.length) {\n        time = time / div[i];\n        i++;\n    }\n    return Math.round(time) + prefix[i];\n};\n\n\nvar formatTimeStamp = function (seconds) {\n    var ts = (new Date(seconds * 1000)).toISOString();\n    return ts.replace(\"T\", \" \").replace(\"Z\", \"\");\n};\n\n\nfunction getCookie(name) {\n    var r = document.cookie.match(\"\\\\b\" + name + \"=([^;]*)\\\\b\");\n    return r ? r[1] : undefined;\n}\nvar xsrf = $.param({_xsrf: getCookie(\"_xsrf\")});\n\n//Tornado XSRF Protection.\n$.ajaxPrefilter(function (options) {\n    if ([\"post\", \"put\", \"delete\"].indexOf(options.type.toLowerCase()) >= 0 && options.url[0] === \"/\") {\n        if (options.data) {\n            options.data += (\"&\" + xsrf);\n        } else {\n            options.data = xsrf;\n        }\n    }\n});\n// Log AJAX Errors\n$(document).ajaxError(function (event, jqXHR, ajaxSettings, thrownError) {\n    var message = jqXHR.responseText;\n    console.error(message, arguments);\n    EventLogActions.add_event(thrownError + \": \" + message);\n    window.alert(message);\n});\n\nmodule.exports = {\n    formatSize: formatSize,\n    formatTimeDelta: formatTimeDelta,\n    formatTimeStamp: formatTimeStamp,\n    Key: Key\n};"]}
+//# sourceMappingURL=data:application/json;base64,{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","node_modules/browserify/node_modules/events/events.js","node_modules/flux/index.js","node_modules/flux/lib/Dispatcher.js","node_modules/flux/lib/invariant.js","src/js/actions.js","src/js/app.js","src/js/components/eventlog.js","src/js/components/flowdetail.js","src/js/components/flowtable-columns.js","src/js/components/flowtable.js","src/js/components/footer.js","src/js/components/header.js","src/js/components/mainview.js","src/js/components/proxyapp.js","src/js/components/utils.js","src/js/components/virtualscroll.js","src/js/connection.js","src/js/dispatcher.js","src/js/filt/filt.js","src/js/flow/utils.js","src/js/store/store.js","src/js/store/view.js","src/js/utils.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1PA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9YA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"generated.js","sourceRoot":"","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        len = arguments.length;\n        args = new Array(len - 1);\n        for (i = 1; i < len; i++)\n          args[i - 1] = arguments[i];\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    len = arguments.length;\n    args = new Array(len - 1);\n    for (i = 1; i < len; i++)\n      args[i - 1] = arguments[i];\n\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    var m;\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  var ret;\n  if (!emitter._events || !emitter._events[type])\n    ret = 0;\n  else if (isFunction(emitter._events[type]))\n    ret = 1;\n  else\n    ret = emitter._events[type].length;\n  return ret;\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\nmodule.exports.Dispatcher = require('./lib/Dispatcher')\n","/*\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Dispatcher\n * @typechecks\n */\n\n\"use strict\";\n\nvar invariant = require('./invariant');\n\nvar _lastID = 1;\nvar _prefix = 'ID_';\n\n/**\n * Dispatcher is used to broadcast payloads to registered callbacks. This is\n * different from generic pub-sub systems in two ways:\n *\n *   1) Callbacks are not subscribed to particular events. Every payload is\n *      dispatched to every registered callback.\n *   2) Callbacks can be deferred in whole or part until other callbacks have\n *      been executed.\n *\n * For example, consider this hypothetical flight destination form, which\n * selects a default city when a country is selected:\n *\n *   var flightDispatcher = new Dispatcher();\n *\n *   // Keeps track of which country is selected\n *   var CountryStore = {country: null};\n *\n *   // Keeps track of which city is selected\n *   var CityStore = {city: null};\n *\n *   // Keeps track of the base flight price of the selected city\n *   var FlightPriceStore = {price: null}\n *\n * When a user changes the selected city, we dispatch the payload:\n *\n *   flightDispatcher.dispatch({\n *     actionType: 'city-update',\n *     selectedCity: 'paris'\n *   });\n *\n * This payload is digested by `CityStore`:\n *\n *   flightDispatcher.register(function(payload) {\n *     if (payload.actionType === 'city-update') {\n *       CityStore.city = payload.selectedCity;\n *     }\n *   });\n *\n * When the user selects a country, we dispatch the payload:\n *\n *   flightDispatcher.dispatch({\n *     actionType: 'country-update',\n *     selectedCountry: 'australia'\n *   });\n *\n * This payload is digested by both stores:\n *\n *    CountryStore.dispatchToken = flightDispatcher.register(function(payload) {\n *     if (payload.actionType === 'country-update') {\n *       CountryStore.country = payload.selectedCountry;\n *     }\n *   });\n *\n * When the callback to update `CountryStore` is registered, we save a reference\n * to the returned token. Using this token with `waitFor()`, we can guarantee\n * that `CountryStore` is updated before the callback that updates `CityStore`\n * needs to query its data.\n *\n *   CityStore.dispatchToken = flightDispatcher.register(function(payload) {\n *     if (payload.actionType === 'country-update') {\n *       // `CountryStore.country` may not be updated.\n *       flightDispatcher.waitFor([CountryStore.dispatchToken]);\n *       // `CountryStore.country` is now guaranteed to be updated.\n *\n *       // Select the default city for the new country\n *       CityStore.city = getDefaultCityForCountry(CountryStore.country);\n *     }\n *   });\n *\n * The usage of `waitFor()` can be chained, for example:\n *\n *   FlightPriceStore.dispatchToken =\n *     flightDispatcher.register(function(payload) {\n *       switch (payload.actionType) {\n *         case 'country-update':\n *           flightDispatcher.waitFor([CityStore.dispatchToken]);\n *           FlightPriceStore.price =\n *             getFlightPriceStore(CountryStore.country, CityStore.city);\n *           break;\n *\n *         case 'city-update':\n *           FlightPriceStore.price =\n *             FlightPriceStore(CountryStore.country, CityStore.city);\n *           break;\n *     }\n *   });\n *\n * The `country-update` payload will be guaranteed to invoke the stores'\n * registered callbacks in order: `CountryStore`, `CityStore`, then\n * `FlightPriceStore`.\n */\n\n  function Dispatcher() {\n    this.$Dispatcher_callbacks = {};\n    this.$Dispatcher_isPending = {};\n    this.$Dispatcher_isHandled = {};\n    this.$Dispatcher_isDispatching = false;\n    this.$Dispatcher_pendingPayload = null;\n  }\n\n  /**\n   * Registers a callback to be invoked with every dispatched payload. Returns\n   * a token that can be used with `waitFor()`.\n   *\n   * @param {function} callback\n   * @return {string}\n   */\n  Dispatcher.prototype.register=function(callback) {\n    var id = _prefix + _lastID++;\n    this.$Dispatcher_callbacks[id] = callback;\n    return id;\n  };\n\n  /**\n   * Removes a callback based on its token.\n   *\n   * @param {string} id\n   */\n  Dispatcher.prototype.unregister=function(id) {\n    invariant(\n      this.$Dispatcher_callbacks[id],\n      'Dispatcher.unregister(...): `%s` does not map to a registered callback.',\n      id\n    );\n    delete this.$Dispatcher_callbacks[id];\n  };\n\n  /**\n   * Waits for the callbacks specified to be invoked before continuing execution\n   * of the current callback. This method should only be used by a callback in\n   * response to a dispatched payload.\n   *\n   * @param {array<string>} ids\n   */\n  Dispatcher.prototype.waitFor=function(ids) {\n    invariant(\n      this.$Dispatcher_isDispatching,\n      'Dispatcher.waitFor(...): Must be invoked while dispatching.'\n    );\n    for (var ii = 0; ii < ids.length; ii++) {\n      var id = ids[ii];\n      if (this.$Dispatcher_isPending[id]) {\n        invariant(\n          this.$Dispatcher_isHandled[id],\n          'Dispatcher.waitFor(...): Circular dependency detected while ' +\n          'waiting for `%s`.',\n          id\n        );\n        continue;\n      }\n      invariant(\n        this.$Dispatcher_callbacks[id],\n        'Dispatcher.waitFor(...): `%s` does not map to a registered callback.',\n        id\n      );\n      this.$Dispatcher_invokeCallback(id);\n    }\n  };\n\n  /**\n   * Dispatches a payload to all registered callbacks.\n   *\n   * @param {object} payload\n   */\n  Dispatcher.prototype.dispatch=function(payload) {\n    invariant(\n      !this.$Dispatcher_isDispatching,\n      'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.'\n    );\n    this.$Dispatcher_startDispatching(payload);\n    try {\n      for (var id in this.$Dispatcher_callbacks) {\n        if (this.$Dispatcher_isPending[id]) {\n          continue;\n        }\n        this.$Dispatcher_invokeCallback(id);\n      }\n    } finally {\n      this.$Dispatcher_stopDispatching();\n    }\n  };\n\n  /**\n   * Is this Dispatcher currently dispatching.\n   *\n   * @return {boolean}\n   */\n  Dispatcher.prototype.isDispatching=function() {\n    return this.$Dispatcher_isDispatching;\n  };\n\n  /**\n   * Call the callback stored with the given id. Also do some internal\n   * bookkeeping.\n   *\n   * @param {string} id\n   * @internal\n   */\n  Dispatcher.prototype.$Dispatcher_invokeCallback=function(id) {\n    this.$Dispatcher_isPending[id] = true;\n    this.$Dispatcher_callbacks[id](this.$Dispatcher_pendingPayload);\n    this.$Dispatcher_isHandled[id] = true;\n  };\n\n  /**\n   * Set up bookkeeping needed when dispatching.\n   *\n   * @param {object} payload\n   * @internal\n   */\n  Dispatcher.prototype.$Dispatcher_startDispatching=function(payload) {\n    for (var id in this.$Dispatcher_callbacks) {\n      this.$Dispatcher_isPending[id] = false;\n      this.$Dispatcher_isHandled[id] = false;\n    }\n    this.$Dispatcher_pendingPayload = payload;\n    this.$Dispatcher_isDispatching = true;\n  };\n\n  /**\n   * Clear bookkeeping used for dispatching.\n   *\n   * @internal\n   */\n  Dispatcher.prototype.$Dispatcher_stopDispatching=function() {\n    this.$Dispatcher_pendingPayload = null;\n    this.$Dispatcher_isDispatching = false;\n  };\n\n\nmodule.exports = Dispatcher;\n","/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule invariant\n */\n\n\"use strict\";\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (false) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        'Invariant Violation: ' +\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","var $ = require(\"jquery\");\n\nvar ActionTypes = {\n    // Connection\n    CONNECTION_OPEN: \"connection_open\",\n    CONNECTION_CLOSE: \"connection_close\",\n    CONNECTION_ERROR: \"connection_error\",\n\n    // Stores\n    SETTINGS_STORE: \"settings\",\n    EVENT_STORE: \"events\",\n    FLOW_STORE: \"flows\",\n};\n\nvar StoreCmds = {\n    ADD: \"add\",\n    UPDATE: \"update\",\n    REMOVE: \"remove\",\n    RESET: \"reset\"\n};\n\nvar ConnectionActions = {\n    open: function () {\n        AppDispatcher.dispatchViewAction({\n            type: ActionTypes.CONNECTION_OPEN\n        });\n    },\n    close: function () {\n        AppDispatcher.dispatchViewAction({\n            type: ActionTypes.CONNECTION_CLOSE\n        });\n    },\n    error: function () {\n        AppDispatcher.dispatchViewAction({\n            type: ActionTypes.CONNECTION_ERROR\n        });\n    }\n};\n\nvar SettingsActions = {\n    update: function (settings) {\n\n        $.ajax({\n            type: \"PUT\",\n            url: \"/settings\",\n            data: settings\n        });\n\n        /*\n        //Facebook Flux: We do an optimistic update on the client already.\n        AppDispatcher.dispatchViewAction({\n            type: ActionTypes.SETTINGS_STORE,\n            cmd: StoreCmds.UPDATE,\n            data: settings\n        });\n        */\n    }\n};\n\nvar EventLogActions_event_id = 0;\nvar EventLogActions = {\n    add_event: function (message) {\n        AppDispatcher.dispatchViewAction({\n            type: ActionTypes.EVENT_STORE,\n            cmd: StoreCmds.ADD,\n            data: {\n                message: message,\n                level: \"web\",\n                id: \"viewAction-\" + EventLogActions_event_id++\n            }\n        });\n    }\n};\n\nvar FlowActions = {\n    accept: function (flow) {\n        $.post(\"/flows/\" + flow.id + \"/accept\");\n    },\n    accept_all: function(){\n        $.post(\"/flows/accept\");\n    },\n    \"delete\": function(flow){\n        $.ajax({\n            type:\"DELETE\",\n            url: \"/flows/\" + flow.id\n        });\n    },\n    duplicate: function(flow){\n        $.post(\"/flows/\" + flow.id + \"/duplicate\");\n    },\n    replay: function(flow){\n        $.post(\"/flows/\" + flow.id + \"/replay\");\n    },\n    revert: function(flow){\n        $.post(\"/flows/\" + flow.id + \"/revert\");\n    },\n    update: function (flow) {\n        AppDispatcher.dispatchViewAction({\n            type: ActionTypes.FLOW_STORE,\n            cmd: StoreCmds.UPDATE,\n            data: flow\n        });\n    },\n    clear: function(){\n        $.post(\"/clear\");\n    }\n};\n\nQuery = {\n    FILTER: \"f\",\n    HIGHLIGHT: \"h\",\n    SHOW_EVENTLOG: \"e\"\n};\n\nmodule.exports = {\n    ActionTypes: ActionTypes,\n    ConnectionActions: ConnectionActions,\n    FlowActions: FlowActions,\n    StoreCmds: StoreCmds\n};","\nvar React = require(\"react\");\nvar ReactRouter = require(\"react-router\");\nvar $ = require(\"jquery\");\n\nvar Connection = require(\"./connection\");\nvar proxyapp = require(\"./components/proxyapp.js\");\n\n$(function () {\n    window.ws = new Connection(\"/updates\");\n\n    ReactRouter.run(proxyapp.routes, function (Handler) {\n        React.render(React.createElement(Handler, null), document.body);\n    });\n});","var React = require(\"react\");\nvar utils = require(\"./utils.js\");\nvar VirtualScrollMixin = require(\"./virtualscroll.js\");\nvar views = require(\"../store/view.js\");\n\nvar LogMessage = React.createClass({displayName: \"LogMessage\",\n    render: function () {\n        var entry = this.props.entry;\n        var indicator;\n        switch (entry.level) {\n            case \"web\":\n                indicator = React.createElement(\"i\", {className: \"fa fa-fw fa-html5\"});\n                break;\n            case \"debug\":\n                indicator = React.createElement(\"i\", {className: \"fa fa-fw fa-bug\"});\n                break;\n            default:\n                indicator = React.createElement(\"i\", {className: \"fa fa-fw fa-info\"});\n        }\n        return (\n            React.createElement(\"div\", null, \n                indicator, \" \", entry.message\n            )\n        );\n    },\n    shouldComponentUpdate: function () {\n        return false; // log entries are immutable.\n    }\n});\n\nvar EventLogContents = React.createClass({displayName: \"EventLogContents\",\n    mixins: [utils.AutoScrollMixin, VirtualScrollMixin],\n    getInitialState: function () {\n        return {\n            log: []\n        };\n    },\n    componentWillMount: function () {\n        this.openView(this.props.eventStore);\n    },\n    componentWillUnmount: function () {\n        this.closeView();\n    },\n    openView: function (store) {\n        var view = new views.StoreView(store, function (entry) {\n            return this.props.filter[entry.level];\n        }.bind(this));\n        this.setState({\n            view: view\n        });\n\n        view.addListener(\"add recalculate\", this.onEventLogChange);\n    },\n    closeView: function () {\n        this.state.view.close();\n    },\n    onEventLogChange: function () {\n        this.setState({\n            log: this.state.view.list\n        });\n    },\n    componentWillReceiveProps: function (nextProps) {\n        if (nextProps.filter !== this.props.filter) {\n            this.props.filter = nextProps.filter; // Dirty: Make sure that view filter sees the update.\n            this.state.view.recalculate();\n        }\n        if (nextProps.eventStore !== this.props.eventStore) {\n            this.closeView();\n            this.openView(nextProps.eventStore);\n        }\n    },\n    getDefaultProps: function () {\n        return {\n            rowHeight: 45,\n            rowHeightMin: 15,\n            placeholderTagName: \"div\"\n        };\n    },\n    renderRow: function (elem) {\n        return React.createElement(LogMessage, {key: elem.id, entry: elem});\n    },\n    render: function () {\n        var rows = this.renderRows(this.state.log);\n\n        return React.createElement(\"pre\", {onScroll: this.onScroll}, \n             this.getPlaceholderTop(this.state.log.length), \n            rows, \n             this.getPlaceholderBottom(this.state.log.length) \n        );\n    }\n});\n\nvar ToggleFilter = React.createClass({displayName: \"ToggleFilter\",\n    toggle: function (e) {\n        e.preventDefault();\n        return this.props.toggleLevel(this.props.name);\n    },\n    render: function () {\n        var className = \"label \";\n        if (this.props.active) {\n            className += \"label-primary\";\n        } else {\n            className += \"label-default\";\n        }\n        return (\n            React.createElement(\"a\", {\n                href: \"#\", \n                className: className, \n                onClick: this.toggle}, \n                this.props.name\n            )\n        );\n    }\n});\n\nvar EventLog = React.createClass({displayName: \"EventLog\",\n    getInitialState: function () {\n        return {\n            filter: {\n                \"debug\": false,\n                \"info\": true,\n                \"web\": true\n            }\n        };\n    },\n    close: function () {\n        var d = {};\n        d[Query.SHOW_EVENTLOG] = undefined;\n        this.setQuery(d);\n    },\n    toggleLevel: function (level) {\n        var filter = _.extend({}, this.state.filter);\n        filter[level] = !filter[level];\n        this.setState({filter: filter});\n    },\n    render: function () {\n        return (\n            React.createElement(\"div\", {className: \"eventlog\"}, \n                React.createElement(\"div\", null, \n                    \"Eventlog\", \n                    React.createElement(\"div\", {className: \"pull-right\"}, \n                        React.createElement(ToggleFilter, {name: \"debug\", active: this.state.filter.debug, toggleLevel: this.toggleLevel}), \n                        React.createElement(ToggleFilter, {name: \"info\", active: this.state.filter.info, toggleLevel: this.toggleLevel}), \n                        React.createElement(ToggleFilter, {name: \"web\", active: this.state.filter.web, toggleLevel: this.toggleLevel}), \n                        React.createElement(\"i\", {onClick: this.close, className: \"fa fa-close\"})\n                    )\n\n                ), \n                React.createElement(EventLogContents, {filter: this.state.filter, eventStore: this.props.eventStore})\n            )\n        );\n    }\n});\n\nmodule.exports = EventLog;","var React = require(\"react\");\nvar _ = require(\"lodash\");\n\nvar utils = require(\"./utils.js\");\nvar actions = require(\"../actions.js\");\nvar flowutils = require(\"../flow/utils.js\");\nvar toputils = require(\"../utils.js\");\n\nvar NavAction = React.createClass({displayName: \"NavAction\",\n    onClick: function (e) {\n        e.preventDefault();\n        this.props.onClick();\n    },\n    render: function () {\n        return (\n            React.createElement(\"a\", {title: this.props.title, \n                href: \"#\", \n                className: \"nav-action\", \n                onClick: this.onClick}, \n                React.createElement(\"i\", {className: \"fa fa-fw \" + this.props.icon})\n            )\n        );\n    }\n});\n\nvar FlowDetailNav = React.createClass({displayName: \"FlowDetailNav\",\n    render: function () {\n        var flow = this.props.flow;\n\n        var tabs = this.props.tabs.map(function (e) {\n            var str = e.charAt(0).toUpperCase() + e.slice(1);\n            var className = this.props.active === e ? \"active\" : \"\";\n            var onClick = function (event) {\n                this.props.selectTab(e);\n                event.preventDefault();\n            }.bind(this);\n            return React.createElement(\"a\", {key: e, \n                href: \"#\", \n                className: className, \n                onClick: onClick}, str);\n        }.bind(this));\n\n        var acceptButton = null;\n        if(flow.intercepted){\n            acceptButton = React.createElement(NavAction, {title: \"[a]ccept intercepted flow\", icon: \"fa-play\", onClick: actions.FlowActions.accept.bind(null, flow)});\n        }\n        var revertButton = null;\n        if(flow.modified){\n            revertButton = React.createElement(NavAction, {title: \"revert changes to flow [V]\", icon: \"fa-history\", onClick: actions.FlowActions.revert.bind(null, flow)});\n        }\n\n        return (\n            React.createElement(\"nav\", {ref: \"head\", className: \"nav-tabs nav-tabs-sm\"}, \n                tabs, \n                React.createElement(NavAction, {title: \"[d]elete flow\", icon: \"fa-trash\", onClick: actions.FlowActions.delete.bind(null, flow)}), \n                React.createElement(NavAction, {title: \"[D]uplicate flow\", icon: \"fa-copy\", onClick: actions.FlowActions.duplicate.bind(null, flow)}), \n                React.createElement(NavAction, {disabled: true, title: \"[r]eplay flow\", icon: \"fa-repeat\", onClick: actions.FlowActions.replay.bind(null, flow)}), \n                acceptButton, \n                revertButton\n            )\n        );\n    }\n});\n\nvar Headers = React.createClass({displayName: \"Headers\",\n    render: function () {\n        var rows = this.props.message.headers.map(function (header, i) {\n            return (\n                React.createElement(\"tr\", {key: i}, \n                    React.createElement(\"td\", {className: \"header-name\"}, header[0] + \":\"), \n                    React.createElement(\"td\", {className: \"header-value\"}, header[1])\n                )\n            );\n        });\n        return (\n            React.createElement(\"table\", {className: \"header-table\"}, \n                React.createElement(\"tbody\", null, \n                    rows\n                )\n            )\n        );\n    }\n});\n\nvar FlowDetailRequest = React.createClass({displayName: \"FlowDetailRequest\",\n    render: function () {\n        var flow = this.props.flow;\n        var first_line = [\n            flow.request.method,\n            flowutils.RequestUtils.pretty_url(flow.request),\n            \"HTTP/\" + flow.request.httpversion.join(\".\")\n        ].join(\" \");\n        var content = null;\n        if (flow.request.contentLength > 0) {\n            content = \"Request Content Size: \" + toputils.formatSize(flow.request.contentLength);\n        } else {\n            content = React.createElement(\"div\", {className: \"alert alert-info\"}, \"No Content\");\n        }\n\n        //TODO: Styling\n\n        return (\n            React.createElement(\"section\", null, \n                React.createElement(\"div\", {className: \"first-line\"}, first_line ), \n                React.createElement(Headers, {message: flow.request}), \n                React.createElement(\"hr\", null), \n                content\n            )\n        );\n    }\n});\n\nvar FlowDetailResponse = React.createClass({displayName: \"FlowDetailResponse\",\n    render: function () {\n        var flow = this.props.flow;\n        var first_line = [\n            \"HTTP/\" + flow.response.httpversion.join(\".\"),\n            flow.response.code,\n            flow.response.msg\n        ].join(\" \");\n        var content = null;\n        if (flow.response.contentLength > 0) {\n            content = \"Response Content Size: \" + toputils.formatSize(flow.response.contentLength);\n        } else {\n            content = React.createElement(\"div\", {className: \"alert alert-info\"}, \"No Content\");\n        }\n\n        //TODO: Styling\n\n        return (\n            React.createElement(\"section\", null, \n                React.createElement(\"div\", {className: \"first-line\"}, first_line ), \n                React.createElement(Headers, {message: flow.response}), \n                React.createElement(\"hr\", null), \n                content\n            )\n        );\n    }\n});\n\nvar FlowDetailError = React.createClass({displayName: \"FlowDetailError\",\n    render: function () {\n        var flow = this.props.flow;\n        return (\n            React.createElement(\"section\", null, \n                React.createElement(\"div\", {className: \"alert alert-warning\"}, \n                flow.error.msg, \n                    React.createElement(\"div\", null, \n                        React.createElement(\"small\", null,  toputils.formatTimeStamp(flow.error.timestamp) )\n                    )\n                )\n            )\n        );\n    }\n});\n\nvar TimeStamp = React.createClass({displayName: \"TimeStamp\",\n    render: function () {\n\n        if (!this.props.t) {\n            //should be return null, but that triggers a React bug.\n            return React.createElement(\"tr\", null);\n        }\n\n        var ts = toputils.formatTimeStamp(this.props.t);\n\n        var delta;\n        if (this.props.deltaTo) {\n            delta = toputils.formatTimeDelta(1000 * (this.props.t - this.props.deltaTo));\n            delta = React.createElement(\"span\", {className: \"text-muted\"}, \"(\" + delta + \")\");\n        } else {\n            delta = null;\n        }\n\n        return React.createElement(\"tr\", null, \n            React.createElement(\"td\", null, this.props.title + \":\"), \n            React.createElement(\"td\", null, ts, \" \", delta)\n        );\n    }\n});\n\nvar ConnectionInfo = React.createClass({displayName: \"ConnectionInfo\",\n\n    render: function () {\n        var conn = this.props.conn;\n        var address = conn.address.address.join(\":\");\n\n        var sni = React.createElement(\"tr\", {key: \"sni\"}); //should be null, but that triggers a React bug.\n        if (conn.sni) {\n            sni = React.createElement(\"tr\", {key: \"sni\"}, \n                React.createElement(\"td\", null, \n                    React.createElement(\"abbr\", {title: \"TLS Server Name Indication\"}, \"TLS SNI:\")\n                ), \n                React.createElement(\"td\", null, conn.sni)\n            );\n        }\n        return (\n            React.createElement(\"table\", {className: \"connection-table\"}, \n                React.createElement(\"tbody\", null, \n                    React.createElement(\"tr\", {key: \"address\"}, \n                        React.createElement(\"td\", null, \"Address:\"), \n                        React.createElement(\"td\", null, address)\n                    ), \n                    sni\n                )\n            )\n        );\n    }\n});\n\nvar CertificateInfo = React.createClass({displayName: \"CertificateInfo\",\n    render: function () {\n        //TODO: We should fetch human-readable certificate representation\n        // from the server\n        var flow = this.props.flow;\n        var client_conn = flow.client_conn;\n        var server_conn = flow.server_conn;\n\n        var preStyle = {maxHeight: 100};\n        return (\n            React.createElement(\"div\", null, \n            client_conn.cert ? React.createElement(\"h4\", null, \"Client Certificate\") : null, \n            client_conn.cert ? React.createElement(\"pre\", {style: preStyle}, client_conn.cert) : null, \n\n            server_conn.cert ? React.createElement(\"h4\", null, \"Server Certificate\") : null, \n            server_conn.cert ? React.createElement(\"pre\", {style: preStyle}, server_conn.cert) : null\n            )\n        );\n    }\n});\n\nvar Timing = React.createClass({displayName: \"Timing\",\n    render: function () {\n        var flow = this.props.flow;\n        var sc = flow.server_conn;\n        var cc = flow.client_conn;\n        var req = flow.request;\n        var resp = flow.response;\n\n        var timestamps = [\n            {\n                title: \"Server conn. initiated\",\n                t: sc.timestamp_start,\n                deltaTo: req.timestamp_start\n            }, {\n                title: \"Server conn. TCP handshake\",\n                t: sc.timestamp_tcp_setup,\n                deltaTo: req.timestamp_start\n            }, {\n                title: \"Server conn. SSL handshake\",\n                t: sc.timestamp_ssl_setup,\n                deltaTo: req.timestamp_start\n            }, {\n                title: \"Client conn. established\",\n                t: cc.timestamp_start,\n                deltaTo: req.timestamp_start\n            }, {\n                title: \"Client conn. SSL handshake\",\n                t: cc.timestamp_ssl_setup,\n                deltaTo: req.timestamp_start\n            }, {\n                title: \"First request byte\",\n                t: req.timestamp_start,\n            }, {\n                title: \"Request complete\",\n                t: req.timestamp_end,\n                deltaTo: req.timestamp_start\n            }\n        ];\n\n        if (flow.response) {\n            timestamps.push(\n                {\n                    title: \"First response byte\",\n                    t: resp.timestamp_start,\n                    deltaTo: req.timestamp_start\n                }, {\n                    title: \"Response complete\",\n                    t: resp.timestamp_end,\n                    deltaTo: req.timestamp_start\n                }\n            );\n        }\n\n        //Add unique key for each row.\n        timestamps.forEach(function (e) {\n            e.key = e.title;\n        });\n\n        timestamps = _.sortBy(timestamps, 't');\n\n        var rows = timestamps.map(function (e) {\n            return React.createElement(TimeStamp, React.__spread({},  e));\n        });\n\n        return (\n            React.createElement(\"div\", null, \n                React.createElement(\"h4\", null, \"Timing\"), \n                React.createElement(\"table\", {className: \"timing-table\"}, \n                    React.createElement(\"tbody\", null, \n                    rows\n                    )\n                )\n            )\n        );\n    }\n});\n\nvar FlowDetailConnectionInfo = React.createClass({displayName: \"FlowDetailConnectionInfo\",\n    render: function () {\n        var flow = this.props.flow;\n        var client_conn = flow.client_conn;\n        var server_conn = flow.server_conn;\n        return (\n            React.createElement(\"section\", null, \n\n                React.createElement(\"h4\", null, \"Client Connection\"), \n                React.createElement(ConnectionInfo, {conn: client_conn}), \n\n                React.createElement(\"h4\", null, \"Server Connection\"), \n                React.createElement(ConnectionInfo, {conn: server_conn}), \n\n                React.createElement(CertificateInfo, {flow: flow}), \n\n                React.createElement(Timing, {flow: flow})\n\n            )\n        );\n    }\n});\n\nvar allTabs = {\n    request: FlowDetailRequest,\n    response: FlowDetailResponse,\n    error: FlowDetailError,\n    details: FlowDetailConnectionInfo\n};\n\nvar FlowDetail = React.createClass({displayName: \"FlowDetail\",\n    mixins: [utils.StickyHeadMixin, utils.Navigation, utils.State],\n    getTabs: function (flow) {\n        var tabs = [];\n        [\"request\", \"response\", \"error\"].forEach(function (e) {\n            if (flow[e]) {\n                tabs.push(e);\n            }\n        });\n        tabs.push(\"details\");\n        return tabs;\n    },\n    nextTab: function (i) {\n        var tabs = this.getTabs(this.props.flow);\n        var currentIndex = tabs.indexOf(this.getParams().detailTab);\n        // JS modulo operator doesn't correct negative numbers, make sure that we are positive.\n        var nextIndex = (currentIndex + i + tabs.length) % tabs.length;\n        this.selectTab(tabs[nextIndex]);\n    },\n    selectTab: function (panel) {\n        this.replaceWith(\n            \"flow\",\n            {\n                flowId: this.getParams().flowId,\n                detailTab: panel\n            }\n        );\n    },\n    render: function () {\n        var flow = this.props.flow;\n        var tabs = this.getTabs(flow);\n        var active = this.getParams().detailTab;\n\n        if (!_.contains(tabs, active)) {\n            if (active === \"response\" && flow.error) {\n                active = \"error\";\n            } else if (active === \"error\" && flow.response) {\n                active = \"response\";\n            } else {\n                active = tabs[0];\n            }\n            this.selectTab(active);\n        }\n\n        var Tab = allTabs[active];\n        return (\n            React.createElement(\"div\", {className: \"flow-detail\", onScroll: this.adjustHead}, \n                React.createElement(FlowDetailNav, {ref: \"head\", \n                    flow: flow, \n                    tabs: tabs, \n                    active: active, \n                    selectTab: this.selectTab}), \n                React.createElement(Tab, {flow: flow})\n            )\n        );\n    }\n});\n\nmodule.exports = {\n    FlowDetail: FlowDetail\n};","var React = require(\"react\");\nvar flowutils = require(\"../flow/utils.js\");\nvar utils = require(\"../utils.js\");\n\nvar TLSColumn = React.createClass({displayName: \"TLSColumn\",\n    statics: {\n        renderTitle: function () {\n            return React.createElement(\"th\", {key: \"tls\", className: \"col-tls\"});\n        }\n    },\n    render: function () {\n        var flow = this.props.flow;\n        var ssl = (flow.request.scheme == \"https\");\n        var classes;\n        if (ssl) {\n            classes = \"col-tls col-tls-https\";\n        } else {\n            classes = \"col-tls col-tls-http\";\n        }\n        return React.createElement(\"td\", {className: classes});\n    }\n});\n\n\nvar IconColumn = React.createClass({displayName: \"IconColumn\",\n    statics: {\n        renderTitle: function () {\n            return React.createElement(\"th\", {key: \"icon\", className: \"col-icon\"});\n        }\n    },\n    render: function () {\n        var flow = this.props.flow;\n\n        var icon;\n        if (flow.response) {\n            var contentType = flowutils.ResponseUtils.getContentType(flow.response);\n\n            //TODO: We should assign a type to the flow somewhere else.\n            if (flow.response.code == 304) {\n                icon = \"resource-icon-not-modified\";\n            } else if (300 <= flow.response.code && flow.response.code < 400) {\n                icon = \"resource-icon-redirect\";\n            } else if (contentType && contentType.indexOf(\"image\") >= 0) {\n                icon = \"resource-icon-image\";\n            } else if (contentType && contentType.indexOf(\"javascript\") >= 0) {\n                icon = \"resource-icon-js\";\n            } else if (contentType && contentType.indexOf(\"css\") >= 0) {\n                icon = \"resource-icon-css\";\n            } else if (contentType && contentType.indexOf(\"html\") >= 0) {\n                icon = \"resource-icon-document\";\n            }\n        }\n        if (!icon) {\n            icon = \"resource-icon-plain\";\n        }\n\n\n        icon += \" resource-icon\";\n        return React.createElement(\"td\", {className: \"col-icon\"}, \n            React.createElement(\"div\", {className: icon})\n        );\n    }\n});\n\nvar PathColumn = React.createClass({displayName: \"PathColumn\",\n    statics: {\n        renderTitle: function () {\n            return React.createElement(\"th\", {key: \"path\", className: \"col-path\"}, \"Path\");\n        }\n    },\n    render: function () {\n        var flow = this.props.flow;\n        return React.createElement(\"td\", {className: \"col-path\"}, \n            flow.request.is_replay ? React.createElement(\"i\", {className: \"fa fa-fw fa-repeat pull-right\"}) : null, \n            flow.intercepted ? React.createElement(\"i\", {className: \"fa fa-fw fa-pause pull-right\"}) : null, \n            flow.request.scheme + \"://\" + flow.request.host + flow.request.path\n        );\n    }\n});\n\n\nvar MethodColumn = React.createClass({displayName: \"MethodColumn\",\n    statics: {\n        renderTitle: function () {\n            return React.createElement(\"th\", {key: \"method\", className: \"col-method\"}, \"Method\");\n        }\n    },\n    render: function () {\n        var flow = this.props.flow;\n        return React.createElement(\"td\", {className: \"col-method\"}, flow.request.method);\n    }\n});\n\n\nvar StatusColumn = React.createClass({displayName: \"StatusColumn\",\n    statics: {\n        renderTitle: function () {\n            return React.createElement(\"th\", {key: \"status\", className: \"col-status\"}, \"Status\");\n        }\n    },\n    render: function () {\n        var flow = this.props.flow;\n        var status;\n        if (flow.response) {\n            status = flow.response.code;\n        } else {\n            status = null;\n        }\n        return React.createElement(\"td\", {className: \"col-status\"}, status);\n    }\n});\n\n\nvar SizeColumn = React.createClass({displayName: \"SizeColumn\",\n    statics: {\n        renderTitle: function () {\n            return React.createElement(\"th\", {key: \"size\", className: \"col-size\"}, \"Size\");\n        }\n    },\n    render: function () {\n        var flow = this.props.flow;\n\n        var total = flow.request.contentLength;\n        if (flow.response) {\n            total += flow.response.contentLength || 0;\n        }\n        var size = utils.formatSize(total);\n        return React.createElement(\"td\", {className: \"col-size\"}, size);\n    }\n});\n\n\nvar TimeColumn = React.createClass({displayName: \"TimeColumn\",\n    statics: {\n        renderTitle: function () {\n            return React.createElement(\"th\", {key: \"time\", className: \"col-time\"}, \"Time\");\n        }\n    },\n    render: function () {\n        var flow = this.props.flow;\n        var time;\n        if (flow.response) {\n            time = utils.formatTimeDelta(1000 * (flow.response.timestamp_end - flow.request.timestamp_start));\n        } else {\n            time = \"...\";\n        }\n        return React.createElement(\"td\", {className: \"col-time\"}, time);\n    }\n});\n\n\nvar all_columns = [\n    TLSColumn,\n    IconColumn,\n    PathColumn,\n    MethodColumn,\n    StatusColumn,\n    SizeColumn,\n    TimeColumn];\n\n\nmodule.exports = all_columns;\n\n\n","var React = require(\"react\");\nvar utils = require(\"./utils.js\");\nvar VirtualScrollMixin = require(\"./virtualscroll.js\");\nvar flowtable_columns = require(\"./flowtable-columns.js\");\n\nvar FlowRow = React.createClass({displayName: \"FlowRow\",\n    render: function () {\n        var flow = this.props.flow;\n        var columns = this.props.columns.map(function (Column) {\n            return React.createElement(Column, {key: Column.displayName, flow: flow});\n        }.bind(this));\n        var className = \"\";\n        if (this.props.selected) {\n            className += \" selected\";\n        }\n        if (this.props.highlighted) {\n            className += \" highlighted\";\n        }\n        if (flow.intercepted) {\n            className += \" intercepted\";\n        }\n        if (flow.request) {\n            className += \" has-request\";\n        }\n        if (flow.response) {\n            className += \" has-response\";\n        }\n\n        return (\n            React.createElement(\"tr\", {className: className, onClick: this.props.selectFlow.bind(null, flow)}, \n                columns\n            ));\n    },\n    shouldComponentUpdate: function (nextProps) {\n        return true;\n        // Further optimization could be done here\n        // by calling forceUpdate on flow updates, selection changes and column changes.\n        //return (\n        //(this.props.columns.length !== nextProps.columns.length) ||\n        //(this.props.selected !== nextProps.selected)\n        //);\n    }\n});\n\nvar FlowTableHead = React.createClass({displayName: \"FlowTableHead\",\n    render: function () {\n        var columns = this.props.columns.map(function (column) {\n            return column.renderTitle();\n        }.bind(this));\n        return React.createElement(\"thead\", null, \n            React.createElement(\"tr\", null, columns)\n        );\n    }\n});\n\n\nvar ROW_HEIGHT = 32;\n\nvar FlowTable = React.createClass({displayName: \"FlowTable\",\n    mixins: [utils.StickyHeadMixin, utils.AutoScrollMixin, VirtualScrollMixin],\n    getInitialState: function () {\n        return {\n            columns: flowtable_columns\n        };\n    },\n    componentWillMount: function () {\n        if (this.props.view) {\n            this.props.view.addListener(\"add update remove recalculate\", this.onChange);\n        }\n    },\n    componentWillReceiveProps: function (nextProps) {\n        if (nextProps.view !== this.props.view) {\n            if (this.props.view) {\n                this.props.view.removeListener(\"add update remove recalculate\");\n            }\n            nextProps.view.addListener(\"add update remove recalculate\", this.onChange);\n        }\n    },\n    getDefaultProps: function () {\n        return {\n            rowHeight: ROW_HEIGHT\n        };\n    },\n    onScrollFlowTable: function () {\n        this.adjustHead();\n        this.onScroll();\n    },\n    onChange: function () {\n        this.forceUpdate();\n    },\n    scrollIntoView: function (flow) {\n        this.scrollRowIntoView(\n            this.props.view.index(flow),\n            this.refs.body.getDOMNode().offsetTop\n        );\n    },\n    renderRow: function (flow) {\n        var selected = (flow === this.props.selected);\n        var highlighted =\n            (\n            this.props.view._highlight &&\n            this.props.view._highlight[flow.id]\n            );\n\n        return React.createElement(FlowRow, {key: flow.id, \n            ref: flow.id, \n            flow: flow, \n            columns: this.state.columns, \n            selected: selected, \n            highlighted: highlighted, \n            selectFlow: this.props.selectFlow}\n        );\n    },\n    render: function () {\n        //console.log(\"render flowtable\", this.state.start, this.state.stop, this.props.selected);\n        var flows = this.props.view ? this.props.view.list : [];\n\n        var rows = this.renderRows(flows);\n\n        return (\n            React.createElement(\"div\", {className: \"flow-table\", onScroll: this.onScrollFlowTable}, \n                React.createElement(\"table\", null, \n                    React.createElement(FlowTableHead, {ref: \"head\", \n                        columns: this.state.columns}), \n                    React.createElement(\"tbody\", {ref: \"body\"}, \n                         this.getPlaceholderTop(flows.length), \n                        rows, \n                         this.getPlaceholderBottom(flows.length) \n                    )\n                )\n            )\n        );\n    }\n});\n\nmodule.exports = FlowTable;\n","var React = require(\"react\");\n\nvar Footer = React.createClass({displayName: \"Footer\",\n    render: function () {\n        var mode = this.props.settings.mode;\n        var intercept = this.props.settings.intercept;\n        return (\n            React.createElement(\"footer\", null, \n                mode != \"regular\" ? React.createElement(\"span\", {className: \"label label-success\"}, mode, \" mode\") : null, \n                \" \", \n                intercept ? React.createElement(\"span\", {className: \"label label-success\"}, \"Intercept: \", intercept) : null\n            )\n        );\n    }\n});\n\nmodule.exports = Footer;","var React = require(\"react\");\nvar $ = require(\"jquery\");\n\nvar utils = require(\"./utils.js\");\n\nvar FilterDocs = React.createClass({displayName: \"FilterDocs\",\n    statics: {\n        xhr: false,\n        doc: false\n    },\n    componentWillMount: function () {\n        if (!FilterDocs.doc) {\n            FilterDocs.xhr = $.getJSON(\"/filter-help\").done(function (doc) {\n                FilterDocs.doc = doc;\n                FilterDocs.xhr = false;\n            });\n        }\n        if (FilterDocs.xhr) {\n            FilterDocs.xhr.done(function () {\n                this.forceUpdate();\n            }.bind(this));\n        }\n    },\n    render: function () {\n        if (!FilterDocs.doc) {\n            return React.createElement(\"i\", {className: \"fa fa-spinner fa-spin\"});\n        } else {\n            var commands = FilterDocs.doc.commands.map(function (c) {\n                return React.createElement(\"tr\", null, \n                    React.createElement(\"td\", null, c[0].replace(\" \", '\\u00a0')), \n                    React.createElement(\"td\", null, c[1])\n                );\n            });\n            commands.push(React.createElement(\"tr\", null, \n                React.createElement(\"td\", {colSpan: \"2\"}, \n                    React.createElement(\"a\", {href: \"https://mitmproxy.org/doc/features/filters.html\", \n                        target: \"_blank\"}, \n                        React.createElement(\"i\", {className: \"fa fa-external-link\"}), \n                    \"  mitmproxy docs\")\n                )\n            ));\n            return React.createElement(\"table\", {className: \"table table-condensed\"}, \n                React.createElement(\"tbody\", null, commands)\n            );\n        }\n    }\n});\nvar FilterInput = React.createClass({displayName: \"FilterInput\",\n    getInitialState: function () {\n        // Consider both focus and mouseover for showing/hiding the tooltip,\n        // because onBlur of the input is triggered before the click on the tooltip\n        // finalized, hiding the tooltip just as the user clicks on it.\n        return {\n            value: this.props.value,\n            focus: false,\n            mousefocus: false\n        };\n    },\n    componentWillReceiveProps: function (nextProps) {\n        this.setState({value: nextProps.value});\n    },\n    onChange: function (e) {\n        var nextValue = e.target.value;\n        this.setState({\n            value: nextValue\n        });\n        // Only propagate valid filters upwards.\n        if (this.isValid(nextValue)) {\n            this.props.onChange(nextValue);\n        }\n    },\n    isValid: function (filt) {\n        try {\n            Filt.parse(filt || this.state.value);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    },\n    getDesc: function () {\n        var desc;\n        try {\n            desc = Filt.parse(this.state.value).desc;\n        } catch (e) {\n            desc = \"\" + e;\n        }\n        if (desc !== \"true\") {\n            return desc;\n        } else {\n            return (\n                React.createElement(FilterDocs, null)\n            );\n        }\n    },\n    onFocus: function () {\n        this.setState({focus: true});\n    },\n    onBlur: function () {\n        this.setState({focus: false});\n    },\n    onMouseEnter: function () {\n        this.setState({mousefocus: true});\n    },\n    onMouseLeave: function () {\n        this.setState({mousefocus: false});\n    },\n    onKeyDown: function (e) {\n        if (e.keyCode === Key.ESC || e.keyCode === Key.ENTER) {\n            this.blur();\n            // If closed using ESC/ENTER, hide the tooltip.\n            this.setState({mousefocus: false});\n        }\n    },\n    blur: function () {\n        this.refs.input.getDOMNode().blur();\n    },\n    focus: function () {\n        this.refs.input.getDOMNode().select();\n    },\n    render: function () {\n        var isValid = this.isValid();\n        var icon = \"fa fa-fw fa-\" + this.props.type;\n        var groupClassName = \"filter-input input-group\" + (isValid ? \"\" : \" has-error\");\n\n        var popover;\n        if (this.state.focus || this.state.mousefocus) {\n            popover = (\n                React.createElement(\"div\", {className: \"popover bottom\", onMouseEnter: this.onMouseEnter, onMouseLeave: this.onMouseLeave}, \n                    React.createElement(\"div\", {className: \"arrow\"}), \n                    React.createElement(\"div\", {className: \"popover-content\"}, \n                    this.getDesc()\n                    )\n                )\n            );\n        }\n\n        return (\n            React.createElement(\"div\", {className: groupClassName}, \n                React.createElement(\"span\", {className: \"input-group-addon\"}, \n                    React.createElement(\"i\", {className: icon, style: {color: this.props.color}})\n                ), \n                React.createElement(\"input\", {type: \"text\", placeholder: this.props.placeholder, className: \"form-control\", \n                    ref: \"input\", \n                    onChange: this.onChange, \n                    onFocus: this.onFocus, \n                    onBlur: this.onBlur, \n                    onKeyDown: this.onKeyDown, \n                    value: this.state.value}), \n                popover\n            )\n        );\n    }\n});\n\nvar MainMenu = React.createClass({displayName: \"MainMenu\",\n    mixins: [utils.Navigation, utils.State],\n    statics: {\n        title: \"Start\",\n        route: \"flows\"\n    },\n    onFilterChange: function (val) {\n        var d = {};\n        d[Query.FILTER] = val;\n        this.setQuery(d);\n    },\n    onHighlightChange: function (val) {\n        var d = {};\n        d[Query.HIGHLIGHT] = val;\n        this.setQuery(d);\n    },\n    onInterceptChange: function (val) {\n        SettingsActions.update({intercept: val});\n    },\n    render: function () {\n        var filter = this.getQuery()[Query.FILTER] || \"\";\n        var highlight = this.getQuery()[Query.HIGHLIGHT] || \"\";\n        var intercept = this.props.settings.intercept || \"\";\n\n        return (\n            React.createElement(\"div\", null, \n                React.createElement(\"div\", {className: \"menu-row\"}, \n                    React.createElement(FilterInput, {\n                        placeholder: \"Filter\", \n                        type: \"filter\", \n                        color: \"black\", \n                        value: filter, \n                        onChange: this.onFilterChange}), \n                    React.createElement(FilterInput, {\n                        placeholder: \"Highlight\", \n                        type: \"tag\", \n                        color: \"hsl(48, 100%, 50%)\", \n                        value: highlight, \n                        onChange: this.onHighlightChange}), \n                    React.createElement(FilterInput, {\n                        placeholder: \"Intercept\", \n                        type: \"pause\", \n                        color: \"hsl(208, 56%, 53%)\", \n                        value: intercept, \n                        onChange: this.onInterceptChange})\n                ), \n                React.createElement(\"div\", {className: \"clearfix\"})\n            )\n        );\n    }\n});\n\n\nvar ViewMenu = React.createClass({displayName: \"ViewMenu\",\n    statics: {\n        title: \"View\",\n        route: \"flows\"\n    },\n    mixins: [utils.Navigation, utils.State],\n    toggleEventLog: function () {\n        var d = {};\n\n        if (this.getQuery()[Query.SHOW_EVENTLOG]) {\n            d[Query.SHOW_EVENTLOG] = undefined;\n        } else {\n            d[Query.SHOW_EVENTLOG] = \"t\"; // any non-false value will do it, keep it short\n        }\n\n        this.setQuery(d);\n    },\n    render: function () {\n        var showEventLog = this.getQuery()[Query.SHOW_EVENTLOG];\n        return (\n            React.createElement(\"div\", null, \n                React.createElement(\"button\", {\n                    className: \"btn \" + (showEventLog ? \"btn-primary\" : \"btn-default\"), \n                    onClick: this.toggleEventLog}, \n                    React.createElement(\"i\", {className: \"fa fa-database\"}), \n                \" Show Eventlog\"\n                ), \n                React.createElement(\"span\", null, \" \")\n            )\n        );\n    }\n});\n\n\nvar ReportsMenu = React.createClass({displayName: \"ReportsMenu\",\n    statics: {\n        title: \"Visualization\",\n        route: \"reports\"\n    },\n    render: function () {\n        return React.createElement(\"div\", null, \"Reports Menu\");\n    }\n});\n\nvar FileMenu = React.createClass({displayName: \"FileMenu\",\n    getInitialState: function () {\n        return {\n            showFileMenu: false\n        };\n    },\n    handleFileClick: function (e) {\n        e.preventDefault();\n        if (!this.state.showFileMenu) {\n            var close = function () {\n                this.setState({showFileMenu: false});\n                document.removeEventListener(\"click\", close);\n            }.bind(this);\n            document.addEventListener(\"click\", close);\n\n            this.setState({\n                showFileMenu: true\n            });\n        }\n    },\n    handleNewClick: function (e) {\n        e.preventDefault();\n        if (confirm(\"Delete all flows?\")) {\n            FlowActions.clear();\n        }\n    },\n    handleOpenClick: function (e) {\n        e.preventDefault();\n        console.error(\"unimplemented: handleOpenClick\");\n    },\n    handleSaveClick: function (e) {\n        e.preventDefault();\n        console.error(\"unimplemented: handleSaveClick\");\n    },\n    handleShutdownClick: function (e) {\n        e.preventDefault();\n        console.error(\"unimplemented: handleShutdownClick\");\n    },\n    render: function () {\n        var fileMenuClass = \"dropdown pull-left\" + (this.state.showFileMenu ? \" open\" : \"\");\n\n        return (\n            React.createElement(\"div\", {className: fileMenuClass}, \n                React.createElement(\"a\", {href: \"#\", className: \"special\", onClick: this.handleFileClick}, \" mitmproxy \"), \n                React.createElement(\"ul\", {className: \"dropdown-menu\", role: \"menu\"}, \n                    React.createElement(\"li\", null, \n                        React.createElement(\"a\", {href: \"#\", onClick: this.handleNewClick}, \n                            React.createElement(\"i\", {className: \"fa fa-fw fa-file\"}), \n                            \"New\"\n                        )\n                    ), \n                    React.createElement(\"li\", {role: \"presentation\", className: \"divider\"}), \n                    React.createElement(\"li\", null, \n                        React.createElement(\"a\", {href: \"http://mitm.it/\", target: \"_blank\"}, \n                            React.createElement(\"i\", {className: \"fa fa-fw fa-external-link\"}), \n                            \"Install Certificates...\"\n                        )\n                    )\n                /*\n                 <li>\n                 <a href=\"#\" onClick={this.handleOpenClick}>\n                 <i className=\"fa fa-fw fa-folder-open\"></i>\n                 Open\n                 </a>\n                 </li>\n                 <li>\n                 <a href=\"#\" onClick={this.handleSaveClick}>\n                 <i className=\"fa fa-fw fa-save\"></i>\n                 Save\n                 </a>\n                 </li>\n                 <li role=\"presentation\" className=\"divider\"></li>\n                 <li>\n                 <a href=\"#\" onClick={this.handleShutdownClick}>\n                 <i className=\"fa fa-fw fa-plug\"></i>\n                 Shutdown\n                 </a>\n                 </li>\n                 */\n                )\n            )\n        );\n    }\n});\n\n\nvar header_entries = [MainMenu, ViewMenu /*, ReportsMenu */];\n\n\nvar Header = React.createClass({displayName: \"Header\",\n    mixins: [utils.Navigation],\n    getInitialState: function () {\n        return {\n            active: header_entries[0]\n        };\n    },\n    handleClick: function (active, e) {\n        e.preventDefault();\n        this.replaceWith(active.route);\n        this.setState({active: active});\n    },\n    render: function () {\n        var header = header_entries.map(function (entry, i) {\n            var classes = React.addons.classSet({\n                active: entry == this.state.active\n            });\n            return (\n                React.createElement(\"a\", {key: i, \n                    href: \"#\", \n                    className: classes, \n                    onClick: this.handleClick.bind(this, entry)\n                }, \n                     entry.title\n                )\n            );\n        }.bind(this));\n\n        return (\n            React.createElement(\"header\", null, \n                React.createElement(\"nav\", {className: \"nav-tabs nav-tabs-lg\"}, \n                    React.createElement(FileMenu, null), \n                    header\n                ), \n                React.createElement(\"div\", {className: \"menu\"}, \n                    React.createElement(this.state.active, {settings: this.props.settings})\n                )\n            )\n        );\n    }\n});\n\n\nmodule.exports = {\n    Header: Header\n}","var React = require(\"react\");\n\nvar utils = require(\"./utils.js\");\nvar toputils = require(\"../utils.js\");\nvar views = require(\"../store/view.js\");\nvar Filt = require(\"../filt/filt.js\");\nFlowTable = require(\"./flowtable.js\");\nvar flowdetail = require(\"./flowdetail.js\");\n\n\nvar MainView = React.createClass({displayName: \"MainView\",\n    mixins: [utils.Navigation, utils.State],\n    getInitialState: function () {\n        this.onQueryChange(Query.FILTER, function () {\n            this.state.view.recalculate(this.getViewFilt(), this.getViewSort());\n        }.bind(this));\n        this.onQueryChange(Query.HIGHLIGHT, function () {\n            this.state.view.recalculate(this.getViewFilt(), this.getViewSort());\n        }.bind(this));\n        return {\n            flows: []\n        };\n    },\n    getViewFilt: function () {\n        try {\n            var filt = Filt.parse(this.getQuery()[Query.FILTER] || \"\");\n            var highlightStr = this.getQuery()[Query.HIGHLIGHT];\n            var highlight = highlightStr ? Filt.parse(highlightStr) : false;\n        } catch (e) {\n            console.error(\"Error when processing filter: \" + e);\n        }\n\n        return function filter_and_highlight(flow) {\n            if (!this._highlight) {\n                this._highlight = {};\n            }\n            this._highlight[flow.id] = highlight && highlight(flow);\n            return filt(flow);\n        };\n    },\n    getViewSort: function () {\n    },\n    componentWillReceiveProps: function (nextProps) {\n        if (nextProps.flowStore !== this.props.flowStore) {\n            this.closeView();\n            this.openView(nextProps.flowStore);\n        }\n    },\n    openView: function (store) {\n        var view = new views.StoreView(store, this.getViewFilt(), this.getViewSort());\n        this.setState({\n            view: view\n        });\n\n        view.addListener(\"recalculate\", this.onRecalculate);\n        view.addListener(\"add update remove\", this.onUpdate);\n        view.addListener(\"remove\", this.onRemove);\n    },\n    onRecalculate: function () {\n        this.forceUpdate();\n        var selected = this.getSelected();\n        if (selected) {\n            this.refs.flowTable.scrollIntoView(selected);\n        }\n    },\n    onUpdate: function (flow) {\n        if (flow.id === this.getParams().flowId) {\n            this.forceUpdate();\n        }\n    },\n    onRemove: function (flow_id, index) {\n        if (flow_id === this.getParams().flowId) {\n            var flow_to_select = this.state.view.list[Math.min(index, this.state.view.list.length -1)];\n            this.selectFlow(flow_to_select);\n        }\n    },\n    closeView: function () {\n        this.state.view.close();\n    },\n    componentWillMount: function () {\n        this.openView(this.props.flowStore);\n    },\n    componentWillUnmount: function () {\n        this.closeView();\n    },\n    selectFlow: function (flow) {\n        if (flow) {\n            this.replaceWith(\n                \"flow\",\n                {\n                    flowId: flow.id,\n                    detailTab: this.getParams().detailTab || \"request\"\n                }\n            );\n            this.refs.flowTable.scrollIntoView(flow);\n        } else {\n            this.replaceWith(\"flows\", {});\n        }\n    },\n    selectFlowRelative: function (shift) {\n        var flows = this.state.view.list;\n        var index;\n        if (!this.getParams().flowId) {\n            if (shift > 0) {\n                index = flows.length - 1;\n            } else {\n                index = 0;\n            }\n        } else {\n            var currFlowId = this.getParams().flowId;\n            var i = flows.length;\n            while (i--) {\n                if (flows[i].id === currFlowId) {\n                    index = i;\n                    break;\n                }\n            }\n            index = Math.min(\n                Math.max(0, index + shift),\n                flows.length - 1);\n        }\n        this.selectFlow(flows[index]);\n    },\n    onKeyDown: function (e) {\n        var flow = this.getSelected();\n        if (e.ctrlKey) {\n            return;\n        }\n        switch (e.keyCode) {\n            case toputils.Key.K:\n            case toputils.Key.UP:\n                this.selectFlowRelative(-1);\n                break;\n            case toputils.Key.J:\n            case toputils.Key.DOWN:\n                this.selectFlowRelative(+1);\n                break;\n            case toputils.Key.SPACE:\n            case toputils.Key.PAGE_DOWN:\n                this.selectFlowRelative(+10);\n                break;\n            case toputils.Key.PAGE_UP:\n                this.selectFlowRelative(-10);\n                break;\n            case toputils.Key.END:\n                this.selectFlowRelative(+1e10);\n                break;\n            case toputils.Key.HOME:\n                this.selectFlowRelative(-1e10);\n                break;\n            case toputils.Key.ESC:\n                this.selectFlow(null);\n                break;\n            case toputils.Key.H:\n            case toputils.Key.LEFT:\n                if (this.refs.flowDetails) {\n                    this.refs.flowDetails.nextTab(-1);\n                }\n                break;\n            case toputils.Key.L:\n            case toputils.Key.TAB:\n            case toputils.Key.RIGHT:\n                if (this.refs.flowDetails) {\n                    this.refs.flowDetails.nextTab(+1);\n                }\n                break;\n            case toputils.Key.C:\n                if (e.shiftKey) {\n                    FlowActions.clear();\n                }\n                break;\n            case toputils.Key.D:\n                if (flow) {\n                    if (e.shiftKey) {\n                        FlowActions.duplicate(flow);\n                    } else {\n                        FlowActions.delete(flow);\n                    }\n                }\n                break;\n            case toputils.Key.A:\n                if (e.shiftKey) {\n                    FlowActions.accept_all();\n                } else if (flow && flow.intercepted) {\n                    FlowActions.accept(flow);\n                }\n                break;\n            case toputils.Key.R:\n                if (!e.shiftKey && flow) {\n                    FlowActions.replay(flow);\n                }\n                break;\n            case toputils.Key.V:\n                if(e.shiftKey && flow && flow.modified) {\n                    FlowActions.revert(flow);\n                }\n                break;\n            default:\n                console.debug(\"keydown\", e.keyCode);\n                return;\n        }\n        e.preventDefault();\n    },\n    getSelected: function () {\n        return this.props.flowStore.get(this.getParams().flowId);\n    },\n    render: function () {\n        var selected = this.getSelected();\n\n        var details;\n        if (selected) {\n            details = [\n                React.createElement(utils.Splitter, {key: \"splitter\"}),\n                React.createElement(flowdetail.FlowDetail, {key: \"flowDetails\", ref: \"flowDetails\", flow: selected})\n            ];\n        } else {\n            details = null;\n        }\n\n        return (\n            React.createElement(\"div\", {className: \"main-view\", onKeyDown: this.onKeyDown, tabIndex: \"0\"}, \n                React.createElement(FlowTable, {ref: \"flowTable\", \n                    view: this.state.view, \n                    selectFlow: this.selectFlow, \n                    selected: selected}), \n                details\n            )\n        );\n    }\n});\n\nmodule.exports = MainView;\n","var React = require(\"react\");\nvar ReactRouter = require(\"react-router\");\nvar _ = require(\"lodash\");\n\nvar utils = require(\"./utils.js\");\nvar MainView = require(\"./mainview.js\");\nvar Footer = require(\"./footer.js\");\nvar header = require(\"./header.js\");\nvar EventLog = require(\"./eventlog.js\");\nvar store = require(\"../store/store.js\");\n\n\n//TODO: Move out of here, just a stub.\nvar Reports = React.createClass({displayName: \"Reports\",\n    render: function () {\n        return React.createElement(\"div\", null, \"ReportEditor\");\n    }\n});\n\n\nvar ProxyAppMain = React.createClass({displayName: \"ProxyAppMain\",\n    mixins: [utils.State],\n    getInitialState: function () {\n        var eventStore = new store.EventLogStore();\n        var flowStore = new store.FlowStore();\n        var settings = new store.SettingsStore();\n\n        // Default Settings before fetch\n        _.extend(settings.dict,{\n        });\n        return {\n            settings: settings,\n            flowStore: flowStore,\n            eventStore: eventStore\n        };\n    },\n    componentDidMount: function () {\n        this.state.settings.addListener(\"recalculate\", this.onSettingsChange);\n        window.app = this;\n    },\n    componentWillUnmount: function () {\n        this.state.settings.removeListener(\"recalculate\", this.onSettingsChange);\n    },\n    onSettingsChange: function(){\n        this.setState({\n            settings: this.state.settings\n        });\n    },\n    render: function () {\n\n        var eventlog;\n        if (this.getQuery()[Query.SHOW_EVENTLOG]) {\n            eventlog = [\n                React.createElement(utils.Splitter, {key: \"splitter\", axis: \"y\"}),\n                React.createElement(EventLog, {key: \"eventlog\", eventStore: this.state.eventStore})\n            ];\n        } else {\n            eventlog = null;\n        }\n\n        return (\n            React.createElement(\"div\", {id: \"container\"}, \n                React.createElement(header.Header, {settings: this.state.settings.dict}), \n                React.createElement(RouteHandler, {settings: this.state.settings.dict, flowStore: this.state.flowStore}), \n                eventlog, \n                React.createElement(Footer, {settings: this.state.settings.dict})\n            )\n        );\n    }\n});\n\n\nvar Route = ReactRouter.Route;\nvar RouteHandler = ReactRouter.RouteHandler;\nvar Redirect = ReactRouter.Redirect;\nvar DefaultRoute = ReactRouter.DefaultRoute;\nvar NotFoundRoute = ReactRouter.NotFoundRoute;\n\n\nvar routes = (\n    React.createElement(Route, {path: \"/\", handler: ProxyAppMain}, \n        React.createElement(Route, {name: \"flows\", path: \"flows\", handler: MainView}), \n        React.createElement(Route, {name: \"flow\", path: \"flows/:flowId/:detailTab\", handler: MainView}), \n        React.createElement(Route, {name: \"reports\", handler: Reports}), \n        React.createElement(Redirect, {path: \"/\", to: \"flows\"})\n    )\n);\n\nmodule.exports = {\n    routes: routes\n};\n\n","var React = require(\"react\");\nvar ReactRouter = require(\"react-router\");\nvar _ = require(\"lodash\");\n\n//React utils. For other utilities, see ../utils.js\n\n// http://blog.vjeux.com/2013/javascript/scroll-position-with-react.html (also contains inverse example)\nvar AutoScrollMixin = {\n    componentWillUpdate: function () {\n        var node = this.getDOMNode();\n        this._shouldScrollBottom = (\n            node.scrollTop !== 0 &&\n            node.scrollTop + node.clientHeight === node.scrollHeight\n        );\n    },\n    componentDidUpdate: function () {\n        if (this._shouldScrollBottom) {\n            var node = this.getDOMNode();\n            node.scrollTop = node.scrollHeight;\n        }\n    },\n};\n\n\nvar StickyHeadMixin = {\n    adjustHead: function () {\n        // Abusing CSS transforms to set the element\n        // referenced as head into some kind of position:sticky.\n        var head = this.refs.head.getDOMNode();\n        head.style.transform = \"translate(0,\" + this.getDOMNode().scrollTop + \"px)\";\n    }\n};\n\n\nvar Navigation = _.extend({}, ReactRouter.Navigation, {\n    setQuery: function (dict) {\n        var q = this.context.getCurrentQuery();\n        for(var i in dict){\n            if(dict.hasOwnProperty(i)){\n                q[i] = dict[i] || undefined; //falsey values shall be removed.\n            }\n        }\n        q._ = \"_\"; // workaround for https://github.com/rackt/react-router/pull/599\n        this.replaceWith(this.context.getCurrentPath(), this.context.getCurrentParams(), q);\n    },\n    replaceWith: function(routeNameOrPath, params, query) {\n        if(routeNameOrPath === undefined){\n            routeNameOrPath = this.context.getCurrentPath();\n        }\n        if(params === undefined){\n            params = this.context.getCurrentParams();\n        }\n        if(query === undefined){\n            query = this.context.getCurrentQuery();\n        }\n        ReactRouter.Navigation.replaceWith.call(this, routeNameOrPath, params, query);\n    }\n});\n_.extend(Navigation.contextTypes, ReactRouter.State.contextTypes);\n\nvar State = _.extend({}, ReactRouter.State, {\n    getInitialState: function () {\n        this._query = this.context.getCurrentQuery();\n        this._queryWatches = [];\n        return null;\n    },\n    onQueryChange: function (key, callback) {\n        this._queryWatches.push({\n            key: key,\n            callback: callback\n        });\n    },\n    componentWillReceiveProps: function (nextProps, nextState) {\n        var q = this.context.getCurrentQuery();\n        for (var i = 0; i < this._queryWatches.length; i++) {\n            var watch = this._queryWatches[i];\n            if (this._query[watch.key] !== q[watch.key]) {\n                watch.callback(this._query[watch.key], q[watch.key], watch.key);\n            }\n        }\n        this._query = q;\n    }\n});\n\nvar Splitter = React.createClass({displayName: \"Splitter\",\n    getDefaultProps: function () {\n        return {\n            axis: \"x\"\n        };\n    },\n    getInitialState: function () {\n        return {\n            applied: false,\n            startX: false,\n            startY: false\n        };\n    },\n    onMouseDown: function (e) {\n        this.setState({\n            startX: e.pageX,\n            startY: e.pageY\n        });\n        window.addEventListener(\"mousemove\", this.onMouseMove);\n        window.addEventListener(\"mouseup\", this.onMouseUp);\n        // Occasionally, only a dragEnd event is triggered, but no mouseUp.\n        window.addEventListener(\"dragend\", this.onDragEnd);\n    },\n    onDragEnd: function () {\n        this.getDOMNode().style.transform = \"\";\n        window.removeEventListener(\"dragend\", this.onDragEnd);\n        window.removeEventListener(\"mouseup\", this.onMouseUp);\n        window.removeEventListener(\"mousemove\", this.onMouseMove);\n    },\n    onMouseUp: function (e) {\n        this.onDragEnd();\n\n        var node = this.getDOMNode();\n        var prev = node.previousElementSibling;\n        var next = node.nextElementSibling;\n\n        var dX = e.pageX - this.state.startX;\n        var dY = e.pageY - this.state.startY;\n        var flexBasis;\n        if (this.props.axis === \"x\") {\n            flexBasis = prev.offsetWidth + dX;\n        } else {\n            flexBasis = prev.offsetHeight + dY;\n        }\n\n        prev.style.flex = \"0 0 \" + Math.max(0, flexBasis) + \"px\";\n        next.style.flex = \"1 1 auto\";\n\n        this.setState({\n            applied: true\n        });\n        this.onResize();\n    },\n    onMouseMove: function (e) {\n        var dX = 0, dY = 0;\n        if (this.props.axis === \"x\") {\n            dX = e.pageX - this.state.startX;\n        } else {\n            dY = e.pageY - this.state.startY;\n        }\n        this.getDOMNode().style.transform = \"translate(\" + dX + \"px,\" + dY + \"px)\";\n    },\n    onResize: function () {\n        // Trigger a global resize event. This notifies components that employ virtual scrolling\n        // that their viewport may have changed.\n        window.setTimeout(function () {\n            window.dispatchEvent(new CustomEvent(\"resize\"));\n        }, 1);\n    },\n    reset: function (willUnmount) {\n        if (!this.state.applied) {\n            return;\n        }\n        var node = this.getDOMNode();\n        var prev = node.previousElementSibling;\n        var next = node.nextElementSibling;\n\n        prev.style.flex = \"\";\n        next.style.flex = \"\";\n\n        if (!willUnmount) {\n            this.setState({\n                applied: false\n            });\n        }\n        this.onResize();\n    },\n    componentWillUnmount: function () {\n        this.reset(true);\n    },\n    render: function () {\n        var className = \"splitter\";\n        if (this.props.axis === \"x\") {\n            className += \" splitter-x\";\n        } else {\n            className += \" splitter-y\";\n        }\n        return (\n            React.createElement(\"div\", {className: className}, \n                React.createElement(\"div\", {onMouseDown: this.onMouseDown, draggable: \"true\"})\n            )\n        );\n    }\n});\n\nmodule.exports = {\n    State: State,\n    Navigation: Navigation,\n    StickyHeadMixin: StickyHeadMixin,\n    AutoScrollMixin: AutoScrollMixin,\n    Splitter: Splitter\n}","var React = require(\"react\");\n\nvar VirtualScrollMixin = {\n    getInitialState: function () {\n        return {\n            start: 0,\n            stop: 0\n        };\n    },\n    componentWillMount: function () {\n        if (!this.props.rowHeight) {\n            console.warn(\"VirtualScrollMixin: No rowHeight specified\", this);\n        }\n    },\n    getPlaceholderTop: function (total) {\n        var Tag = this.props.placeholderTagName || \"tr\";\n        // When a large trunk of elements is removed from the button, start may be far off the viewport.\n        // To make this issue less severe, limit the top placeholder to the total number of rows.\n        var style = {\n            height: Math.min(this.state.start, total) * this.props.rowHeight\n        };\n        var spacer = React.createElement(Tag, {key: \"placeholder-top\", style: style});\n\n        if (this.state.start % 2 === 1) {\n            // fix even/odd rows\n            return [spacer, React.createElement(Tag, {key: \"placeholder-top-2\"})];\n        } else {\n            return spacer;\n        }\n    },\n    getPlaceholderBottom: function (total) {\n        var Tag = this.props.placeholderTagName || \"tr\";\n        var style = {\n            height: Math.max(0, total - this.state.stop) * this.props.rowHeight\n        };\n        return React.createElement(Tag, {key: \"placeholder-bottom\", style: style});\n    },\n    componentDidMount: function () {\n        this.onScroll();\n        window.addEventListener('resize', this.onScroll);\n    },\n    componentWillUnmount: function(){\n        window.removeEventListener('resize', this.onScroll);\n    },\n    onScroll: function () {\n        var viewport = this.getDOMNode();\n        var top = viewport.scrollTop;\n        var height = viewport.offsetHeight;\n        var start = Math.floor(top / this.props.rowHeight);\n        var stop = start + Math.ceil(height / (this.props.rowHeightMin || this.props.rowHeight));\n\n        this.setState({\n            start: start,\n            stop: stop\n        });\n    },\n    renderRows: function (elems) {\n        var rows = [];\n        var max = Math.min(elems.length, this.state.stop);\n\n        for (var i = this.state.start; i < max; i++) {\n            var elem = elems[i];\n            rows.push(this.renderRow(elem));\n        }\n        return rows;\n    },\n    scrollRowIntoView: function (index, head_height) {\n\n        var row_top = (index * this.props.rowHeight) + head_height;\n        var row_bottom = row_top + this.props.rowHeight;\n\n        var viewport = this.getDOMNode();\n        var viewport_top = viewport.scrollTop;\n        var viewport_bottom = viewport_top + viewport.offsetHeight;\n\n        // Account for pinned thead\n        if (row_top - head_height < viewport_top) {\n            viewport.scrollTop = row_top - head_height;\n        } else if (row_bottom > viewport_bottom) {\n            viewport.scrollTop = row_bottom - viewport.offsetHeight;\n        }\n    },\n};\n\nmodule.exports  = VirtualScrollMixin;","\nvar actions = require(\"./actions.js\");\n\nfunction Connection(url) {\n    if (url[0] === \"/\") {\n        url = location.origin.replace(\"http\", \"ws\") + url;\n    }\n\n    var ws = new WebSocket(url);\n    ws.onopen = function () {\n        actions.ConnectionActions.open();\n    };\n    ws.onmessage = function (message) {\n        var m = JSON.parse(message.data);\n        AppDispatcher.dispatchServerAction(m);\n    };\n    ws.onerror = function () {\n        actions.ConnectionActions.error();\n        EventLogActions.add_event(\"WebSocket connection error.\");\n    };\n    ws.onclose = function () {\n        actions.ConnectionActions.close();\n        EventLogActions.add_event(\"WebSocket connection closed.\");\n    };\n    return ws;\n}\n\nmodule.exports = Connection;","\nvar flux = require(\"flux\");\n\nconst PayloadSources = {\n    VIEW: \"view\",\n    SERVER: \"server\"\n};\n\n\nAppDispatcher = new flux.Dispatcher();\nAppDispatcher.dispatchViewAction = function (action) {\n    action.source = PayloadSources.VIEW;\n    this.dispatch(action);\n};\nAppDispatcher.dispatchServerAction = function (action) {\n    action.source = PayloadSources.SERVER;\n    this.dispatch(action);\n};\n\nmodule.exports = {\n    AppDispatcher: AppDispatcher\n};","/* jshint ignore:start */\nFilt = (function() {\n  /*\n   * Generated by PEG.js 0.8.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function SyntaxError(message, expected, found, offset, line, column) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.offset   = offset;\n    this.line     = line;\n    this.column   = column;\n\n    this.name     = \"SyntaxError\";\n  }\n\n  peg$subclass(SyntaxError, Error);\n\n  function parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n\n        peg$FAILED = {},\n\n        peg$startRuleFunctions = { start: peg$parsestart },\n        peg$startRuleFunction  = peg$parsestart,\n\n        peg$c0 = { type: \"other\", description: \"filter expression\" },\n        peg$c1 = peg$FAILED,\n        peg$c2 = function(orExpr) { return orExpr; },\n        peg$c3 = [],\n        peg$c4 = function() {return trueFilter; },\n        peg$c5 = { type: \"other\", description: \"whitespace\" },\n        peg$c6 = /^[ \\t\\n\\r]/,\n        peg$c7 = { type: \"class\", value: \"[ \\\\t\\\\n\\\\r]\", description: \"[ \\\\t\\\\n\\\\r]\" },\n        peg$c8 = { type: \"other\", description: \"control character\" },\n        peg$c9 = /^[|&!()~\"]/,\n        peg$c10 = { type: \"class\", value: \"[|&!()~\\\"]\", description: \"[|&!()~\\\"]\" },\n        peg$c11 = { type: \"other\", description: \"optional whitespace\" },\n        peg$c12 = \"|\",\n        peg$c13 = { type: \"literal\", value: \"|\", description: \"\\\"|\\\"\" },\n        peg$c14 = function(first, second) { return or(first, second); },\n        peg$c15 = \"&\",\n        peg$c16 = { type: \"literal\", value: \"&\", description: \"\\\"&\\\"\" },\n        peg$c17 = function(first, second) { return and(first, second); },\n        peg$c18 = \"!\",\n        peg$c19 = { type: \"literal\", value: \"!\", description: \"\\\"!\\\"\" },\n        peg$c20 = function(expr) { return not(expr); },\n        peg$c21 = \"(\",\n        peg$c22 = { type: \"literal\", value: \"(\", description: \"\\\"(\\\"\" },\n        peg$c23 = \")\",\n        peg$c24 = { type: \"literal\", value: \")\", description: \"\\\")\\\"\" },\n        peg$c25 = function(expr) { return binding(expr); },\n        peg$c26 = \"~a\",\n        peg$c27 = { type: \"literal\", value: \"~a\", description: \"\\\"~a\\\"\" },\n        peg$c28 = function() { return assetFilter; },\n        peg$c29 = \"~e\",\n        peg$c30 = { type: \"literal\", value: \"~e\", description: \"\\\"~e\\\"\" },\n        peg$c31 = function() { return errorFilter; },\n        peg$c32 = \"~q\",\n        peg$c33 = { type: \"literal\", value: \"~q\", description: \"\\\"~q\\\"\" },\n        peg$c34 = function() { return noResponseFilter; },\n        peg$c35 = \"~s\",\n        peg$c36 = { type: \"literal\", value: \"~s\", description: \"\\\"~s\\\"\" },\n        peg$c37 = function() { return responseFilter; },\n        peg$c38 = \"true\",\n        peg$c39 = { type: \"literal\", value: \"true\", description: \"\\\"true\\\"\" },\n        peg$c40 = function() { return trueFilter; },\n        peg$c41 = \"false\",\n        peg$c42 = { type: \"literal\", value: \"false\", description: \"\\\"false\\\"\" },\n        peg$c43 = function() { return falseFilter; },\n        peg$c44 = \"~c\",\n        peg$c45 = { type: \"literal\", value: \"~c\", description: \"\\\"~c\\\"\" },\n        peg$c46 = function(s) { return responseCode(s); },\n        peg$c47 = \"~d\",\n        peg$c48 = { type: \"literal\", value: \"~d\", description: \"\\\"~d\\\"\" },\n        peg$c49 = function(s) { return domain(s); },\n        peg$c50 = \"~h\",\n        peg$c51 = { type: \"literal\", value: \"~h\", description: \"\\\"~h\\\"\" },\n        peg$c52 = function(s) { return header(s); },\n        peg$c53 = \"~hq\",\n        peg$c54 = { type: \"literal\", value: \"~hq\", description: \"\\\"~hq\\\"\" },\n        peg$c55 = function(s) { return requestHeader(s); },\n        peg$c56 = \"~hs\",\n        peg$c57 = { type: \"literal\", value: \"~hs\", description: \"\\\"~hs\\\"\" },\n        peg$c58 = function(s) { return responseHeader(s); },\n        peg$c59 = \"~m\",\n        peg$c60 = { type: \"literal\", value: \"~m\", description: \"\\\"~m\\\"\" },\n        peg$c61 = function(s) { return method(s); },\n        peg$c62 = \"~t\",\n        peg$c63 = { type: \"literal\", value: \"~t\", description: \"\\\"~t\\\"\" },\n        peg$c64 = function(s) { return contentType(s); },\n        peg$c65 = \"~tq\",\n        peg$c66 = { type: \"literal\", value: \"~tq\", description: \"\\\"~tq\\\"\" },\n        peg$c67 = function(s) { return requestContentType(s); },\n        peg$c68 = \"~ts\",\n        peg$c69 = { type: \"literal\", value: \"~ts\", description: \"\\\"~ts\\\"\" },\n        peg$c70 = function(s) { return responseContentType(s); },\n        peg$c71 = \"~u\",\n        peg$c72 = { type: \"literal\", value: \"~u\", description: \"\\\"~u\\\"\" },\n        peg$c73 = function(s) { return url(s); },\n        peg$c74 = { type: \"other\", description: \"integer\" },\n        peg$c75 = null,\n        peg$c76 = /^['\"]/,\n        peg$c77 = { type: \"class\", value: \"['\\\"]\", description: \"['\\\"]\" },\n        peg$c78 = /^[0-9]/,\n        peg$c79 = { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n        peg$c80 = function(digits) { return parseInt(digits.join(\"\"), 10); },\n        peg$c81 = { type: \"other\", description: \"string\" },\n        peg$c82 = \"\\\"\",\n        peg$c83 = { type: \"literal\", value: \"\\\"\", description: \"\\\"\\\\\\\"\\\"\" },\n        peg$c84 = function(chars) { return chars.join(\"\"); },\n        peg$c85 = \"'\",\n        peg$c86 = { type: \"literal\", value: \"'\", description: \"\\\"'\\\"\" },\n        peg$c87 = void 0,\n        peg$c88 = /^[\"\\\\]/,\n        peg$c89 = { type: \"class\", value: \"[\\\"\\\\\\\\]\", description: \"[\\\"\\\\\\\\]\" },\n        peg$c90 = { type: \"any\", description: \"any character\" },\n        peg$c91 = function(char) { return char; },\n        peg$c92 = \"\\\\\",\n        peg$c93 = { type: \"literal\", value: \"\\\\\", description: \"\\\"\\\\\\\\\\\"\" },\n        peg$c94 = /^['\\\\]/,\n        peg$c95 = { type: \"class\", value: \"['\\\\\\\\]\", description: \"['\\\\\\\\]\" },\n        peg$c96 = /^['\"\\\\]/,\n        peg$c97 = { type: \"class\", value: \"['\\\"\\\\\\\\]\", description: \"['\\\"\\\\\\\\]\" },\n        peg$c98 = \"n\",\n        peg$c99 = { type: \"literal\", value: \"n\", description: \"\\\"n\\\"\" },\n        peg$c100 = function() { return \"\\n\"; },\n        peg$c101 = \"r\",\n        peg$c102 = { type: \"literal\", value: \"r\", description: \"\\\"r\\\"\" },\n        peg$c103 = function() { return \"\\r\"; },\n        peg$c104 = \"t\",\n        peg$c105 = { type: \"literal\", value: \"t\", description: \"\\\"t\\\"\" },\n        peg$c106 = function() { return \"\\t\"; },\n\n        peg$currPos          = 0,\n        peg$reportedPos      = 0,\n        peg$cachedPos        = 0,\n        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$reportedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$reportedPos;\n    }\n\n    function line() {\n      return peg$computePosDetails(peg$reportedPos).line;\n    }\n\n    function column() {\n      return peg$computePosDetails(peg$reportedPos).column;\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        peg$reportedPos\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(message, null, peg$reportedPos);\n    }\n\n    function peg$computePosDetails(pos) {\n      function advance(details, startPos, endPos) {\n        var p, ch;\n\n        for (p = startPos; p < endPos; p++) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n        }\n      }\n\n      if (peg$cachedPos !== pos) {\n        if (peg$cachedPos > pos) {\n          peg$cachedPos = 0;\n          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\n        }\n        advance(peg$cachedPosDetails, peg$cachedPos, pos);\n        peg$cachedPos = pos;\n      }\n\n      return peg$cachedPosDetails;\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, pos) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0180-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1080-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      var posDetails = peg$computePosDetails(pos),\n          found      = pos < input.length ? input.charAt(pos) : null;\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        pos,\n        posDetails.line,\n        posDetails.column\n      );\n    }\n\n    function peg$parsestart() {\n      var s0, s1, s2, s3;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseOrExpr();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c2(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c4();\n        }\n        s0 = s1;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c0); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsews() {\n      var s0, s1;\n\n      peg$silentFails++;\n      if (peg$c6.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c7); }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c5); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsecc() {\n      var s0, s1;\n\n      peg$silentFails++;\n      if (peg$c9.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c10); }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c8); }\n      }\n\n      return s0;\n    }\n\n    function peg$parse__() {\n      var s0, s1;\n\n      peg$silentFails++;\n      s0 = [];\n      s1 = peg$parsews();\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsews();\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c11); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseOrExpr() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$parseAndExpr();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 124) {\n            s3 = peg$c12;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c13); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseOrExpr();\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c14(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c1;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c1;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseAndExpr();\n      }\n\n      return s0;\n    }\n\n    function peg$parseAndExpr() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$parseNotExpr();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 38) {\n            s3 = peg$c15;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c16); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseAndExpr();\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c17(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c1;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c1;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseNotExpr();\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parsews();\n          if (s3 !== peg$FAILED) {\n            while (s3 !== peg$FAILED) {\n              s2.push(s3);\n              s3 = peg$parsews();\n            }\n          } else {\n            s2 = peg$c1;\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseAndExpr();\n            if (s3 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c17(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c1;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseNotExpr();\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseNotExpr() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 33) {\n        s1 = peg$c18;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c19); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseNotExpr();\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c20(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseBindingExpr();\n      }\n\n      return s0;\n    }\n\n    function peg$parseBindingExpr() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s1 = peg$c21;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c22); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseOrExpr();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s5 = peg$c23;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c24); }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c25(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c1;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c1;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseExpr();\n      }\n\n      return s0;\n    }\n\n    function peg$parseExpr() {\n      var s0;\n\n      s0 = peg$parseNullaryExpr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseUnaryExpr();\n      }\n\n      return s0;\n    }\n\n    function peg$parseNullaryExpr() {\n      var s0, s1;\n\n      s0 = peg$parseBooleanLiteral();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c26) {\n          s1 = peg$c26;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c27); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c28();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c29) {\n            s1 = peg$c29;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c30); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c31();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c32) {\n              s1 = peg$c32;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c33); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c34();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c35) {\n                s1 = peg$c35;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c36); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c37();\n              }\n              s0 = s1;\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseBooleanLiteral() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4) === peg$c38) {\n        s1 = peg$c38;\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c39); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c40();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 5) === peg$c41) {\n          s1 = peg$c41;\n          peg$currPos += 5;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c42); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c43();\n        }\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n    function peg$parseUnaryExpr() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c44) {\n        s1 = peg$c44;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c45); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parsews();\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parsews();\n          }\n        } else {\n          s2 = peg$c1;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseIntegerLiteral();\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c46(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c47) {\n          s1 = peg$c47;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c48); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parsews();\n          if (s3 !== peg$FAILED) {\n            while (s3 !== peg$FAILED) {\n              s2.push(s3);\n              s3 = peg$parsews();\n            }\n          } else {\n            s2 = peg$c1;\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseStringLiteral();\n            if (s3 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c49(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c1;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c50) {\n            s1 = peg$c50;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c51); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = [];\n            s3 = peg$parsews();\n            if (s3 !== peg$FAILED) {\n              while (s3 !== peg$FAILED) {\n                s2.push(s3);\n                s3 = peg$parsews();\n              }\n            } else {\n              s2 = peg$c1;\n            }\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseStringLiteral();\n              if (s3 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c52(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c1;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c1;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 3) === peg$c53) {\n              s1 = peg$c53;\n              peg$currPos += 3;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c54); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = [];\n              s3 = peg$parsews();\n              if (s3 !== peg$FAILED) {\n                while (s3 !== peg$FAILED) {\n                  s2.push(s3);\n                  s3 = peg$parsews();\n                }\n              } else {\n                s2 = peg$c1;\n              }\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseStringLiteral();\n                if (s3 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c55(s3);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c1;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c1;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c1;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 3) === peg$c56) {\n                s1 = peg$c56;\n                peg$currPos += 3;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c57); }\n              }\n              if (s1 !== peg$FAILED) {\n                s2 = [];\n                s3 = peg$parsews();\n                if (s3 !== peg$FAILED) {\n                  while (s3 !== peg$FAILED) {\n                    s2.push(s3);\n                    s3 = peg$parsews();\n                  }\n                } else {\n                  s2 = peg$c1;\n                }\n                if (s2 !== peg$FAILED) {\n                  s3 = peg$parseStringLiteral();\n                  if (s3 !== peg$FAILED) {\n                    peg$reportedPos = s0;\n                    s1 = peg$c58(s3);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c1;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c1;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c1;\n              }\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c59) {\n                  s1 = peg$c59;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c60); }\n                }\n                if (s1 !== peg$FAILED) {\n                  s2 = [];\n                  s3 = peg$parsews();\n                  if (s3 !== peg$FAILED) {\n                    while (s3 !== peg$FAILED) {\n                      s2.push(s3);\n                      s3 = peg$parsews();\n                    }\n                  } else {\n                    s2 = peg$c1;\n                  }\n                  if (s2 !== peg$FAILED) {\n                    s3 = peg$parseStringLiteral();\n                    if (s3 !== peg$FAILED) {\n                      peg$reportedPos = s0;\n                      s1 = peg$c61(s3);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$c1;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c1;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c1;\n                }\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 2) === peg$c62) {\n                    s1 = peg$c62;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c63); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    s2 = [];\n                    s3 = peg$parsews();\n                    if (s3 !== peg$FAILED) {\n                      while (s3 !== peg$FAILED) {\n                        s2.push(s3);\n                        s3 = peg$parsews();\n                      }\n                    } else {\n                      s2 = peg$c1;\n                    }\n                    if (s2 !== peg$FAILED) {\n                      s3 = peg$parseStringLiteral();\n                      if (s3 !== peg$FAILED) {\n                        peg$reportedPos = s0;\n                        s1 = peg$c64(s3);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$c1;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$c1;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c1;\n                  }\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 3) === peg$c65) {\n                      s1 = peg$c65;\n                      peg$currPos += 3;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c66); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      s2 = [];\n                      s3 = peg$parsews();\n                      if (s3 !== peg$FAILED) {\n                        while (s3 !== peg$FAILED) {\n                          s2.push(s3);\n                          s3 = peg$parsews();\n                        }\n                      } else {\n                        s2 = peg$c1;\n                      }\n                      if (s2 !== peg$FAILED) {\n                        s3 = peg$parseStringLiteral();\n                        if (s3 !== peg$FAILED) {\n                          peg$reportedPos = s0;\n                          s1 = peg$c67(s3);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$c1;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$c1;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$c1;\n                    }\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      if (input.substr(peg$currPos, 3) === peg$c68) {\n                        s1 = peg$c68;\n                        peg$currPos += 3;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c69); }\n                      }\n                      if (s1 !== peg$FAILED) {\n                        s2 = [];\n                        s3 = peg$parsews();\n                        if (s3 !== peg$FAILED) {\n                          while (s3 !== peg$FAILED) {\n                            s2.push(s3);\n                            s3 = peg$parsews();\n                          }\n                        } else {\n                          s2 = peg$c1;\n                        }\n                        if (s2 !== peg$FAILED) {\n                          s3 = peg$parseStringLiteral();\n                          if (s3 !== peg$FAILED) {\n                            peg$reportedPos = s0;\n                            s1 = peg$c70(s3);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$c1;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$c1;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$c1;\n                      }\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.substr(peg$currPos, 2) === peg$c71) {\n                          s1 = peg$c71;\n                          peg$currPos += 2;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c72); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          s2 = [];\n                          s3 = peg$parsews();\n                          if (s3 !== peg$FAILED) {\n                            while (s3 !== peg$FAILED) {\n                              s2.push(s3);\n                              s3 = peg$parsews();\n                            }\n                          } else {\n                            s2 = peg$c1;\n                          }\n                          if (s2 !== peg$FAILED) {\n                            s3 = peg$parseStringLiteral();\n                            if (s3 !== peg$FAILED) {\n                              peg$reportedPos = s0;\n                              s1 = peg$c73(s3);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$c1;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$c1;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$c1;\n                        }\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$currPos;\n                          s1 = peg$parseStringLiteral();\n                          if (s1 !== peg$FAILED) {\n                            peg$reportedPos = s0;\n                            s1 = peg$c73(s1);\n                          }\n                          s0 = s1;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseIntegerLiteral() {\n      var s0, s1, s2, s3;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (peg$c76.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c77); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$c75;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        if (peg$c78.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c79); }\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            if (peg$c78.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c79); }\n            }\n          }\n        } else {\n          s2 = peg$c1;\n        }\n        if (s2 !== peg$FAILED) {\n          if (peg$c76.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c77); }\n          }\n          if (s3 === peg$FAILED) {\n            s3 = peg$c75;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c80(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c74); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseStringLiteral() {\n      var s0, s1, s2, s3;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 34) {\n        s1 = peg$c82;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c83); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parseDoubleStringChar();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseDoubleStringChar();\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s3 = peg$c82;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c83); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c84(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s1 = peg$c85;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c86); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parseSingleStringChar();\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parseSingleStringChar();\n          }\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s3 = peg$c85;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c86); }\n            }\n            if (s3 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c84(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c1;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$currPos;\n          peg$silentFails++;\n          s2 = peg$parsecc();\n          peg$silentFails--;\n          if (s2 === peg$FAILED) {\n            s1 = peg$c87;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$c1;\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = [];\n            s3 = peg$parseUnquotedStringChar();\n            if (s3 !== peg$FAILED) {\n              while (s3 !== peg$FAILED) {\n                s2.push(s3);\n                s3 = peg$parseUnquotedStringChar();\n              }\n            } else {\n              s2 = peg$c1;\n            }\n            if (s2 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c84(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c1;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c81); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseDoubleStringChar() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      peg$silentFails++;\n      if (peg$c88.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c89); }\n      }\n      peg$silentFails--;\n      if (s2 === peg$FAILED) {\n        s1 = peg$c87;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c90); }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c91(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 92) {\n          s1 = peg$c92;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c93); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseEscapeSequence();\n          if (s2 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c91(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseSingleStringChar() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      peg$silentFails++;\n      if (peg$c94.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c95); }\n      }\n      peg$silentFails--;\n      if (s2 === peg$FAILED) {\n        s1 = peg$c87;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c90); }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c91(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 92) {\n          s1 = peg$c92;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c93); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseEscapeSequence();\n          if (s2 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c91(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c1;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseUnquotedStringChar() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      peg$silentFails++;\n      s2 = peg$parsews();\n      peg$silentFails--;\n      if (s2 === peg$FAILED) {\n        s1 = peg$c87;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c90); }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c91(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c1;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c1;\n      }\n\n      return s0;\n    }\n\n    function peg$parseEscapeSequence() {\n      var s0, s1;\n\n      if (peg$c96.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c97); }\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 110) {\n          s1 = peg$c98;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c99); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c100();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 114) {\n            s1 = peg$c101;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c102); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c103();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 116) {\n              s1 = peg$c104;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c105); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c106();\n            }\n            s0 = s1;\n          }\n        }\n      }\n\n      return s0;\n    }\n\n\n    function or(first, second) {\n        // Add explicit function names to ease debugging.\n        function orFilter() {\n            return first.apply(this, arguments) || second.apply(this, arguments);\n        }\n        orFilter.desc = first.desc + \" or \" + second.desc;\n        return orFilter;\n    }\n    function and(first, second) {\n        function andFilter() {\n            return first.apply(this, arguments) && second.apply(this, arguments);\n        }\n        andFilter.desc = first.desc + \" and \" + second.desc;\n        return andFilter;\n    }\n    function not(expr) {\n        function notFilter() {\n            return !expr.apply(this, arguments);\n        }\n        notFilter.desc = \"not \" + expr.desc;\n        return notFilter;\n    }\n    function binding(expr) {\n        function bindingFilter() {\n            return expr.apply(this, arguments);\n        }\n        bindingFilter.desc = \"(\" + expr.desc + \")\";\n        return bindingFilter;\n    }\n    function trueFilter(flow) {\n        return true;\n    }\n    trueFilter.desc = \"true\";\n    function falseFilter(flow) {\n        return false;\n    }\n    falseFilter.desc = \"false\";\n\n    var ASSET_TYPES = [\n        new RegExp(\"text/javascript\"),\n        new RegExp(\"application/x-javascript\"),\n        new RegExp(\"application/javascript\"),\n        new RegExp(\"text/css\"),\n        new RegExp(\"image/.*\"),\n        new RegExp(\"application/x-shockwave-flash\")\n    ];\n    function assetFilter(flow) {\n        if (flow.response) {\n            var ct = ResponseUtils.getContentType(flow.response);\n            var i = ASSET_TYPES.length;\n            while (i--) {\n                if (ASSET_TYPES[i].test(ct)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    assetFilter.desc = \"is asset\";\n    function responseCode(code){\n        function responseCodeFilter(flow){\n            return flow.response && flow.response.code === code;\n        }\n        responseCodeFilter.desc = \"resp. code is \" + code;\n        return responseCodeFilter;\n    }\n    function domain(regex){\n        regex = new RegExp(regex, \"i\");\n        function domainFilter(flow){\n            return flow.request && regex.test(flow.request.host);\n        }\n        domainFilter.desc = \"domain matches \" + regex;\n        return domainFilter;\n    }\n    function errorFilter(flow){\n        return !!flow.error;\n    }\n    errorFilter.desc = \"has error\";\n    function header(regex){\n        regex = new RegExp(regex, \"i\");\n        function headerFilter(flow){\n            return (\n                (flow.request && RequestUtils.match_header(flow.request, regex))\n                ||\n                (flow.response && ResponseUtils.match_header(flow.response, regex))\n            );\n        }\n        headerFilter.desc = \"header matches \" + regex;\n        return headerFilter;\n    }\n    function requestHeader(regex){\n        regex = new RegExp(regex, \"i\");\n        function requestHeaderFilter(flow){\n            return (flow.request && RequestUtils.match_header(flow.request, regex));\n        }\n        requestHeaderFilter.desc = \"req. header matches \" + regex;\n        return requestHeaderFilter;\n    }\n    function responseHeader(regex){\n        regex = new RegExp(regex, \"i\");\n        function responseHeaderFilter(flow){\n            return (flow.response && ResponseUtils.match_header(flow.response, regex));\n        }\n        responseHeaderFilter.desc = \"resp. header matches \" + regex;\n        return responseHeaderFilter;\n    }\n    function method(regex){\n        regex = new RegExp(regex, \"i\");\n        function methodFilter(flow){\n            return flow.request && regex.test(flow.request.method);\n        }\n        methodFilter.desc = \"method matches \" + regex;\n        return methodFilter;\n    }\n    function noResponseFilter(flow){\n        return flow.request && !flow.response;\n    }\n    noResponseFilter.desc = \"has no response\";\n    function responseFilter(flow){\n        return !!flow.response;\n    }\n    responseFilter.desc = \"has response\";\n\n    function contentType(regex){\n        regex = new RegExp(regex, \"i\");\n        function contentTypeFilter(flow){\n            return (\n                (flow.request && regex.test(RequestUtils.getContentType(flow.request)))\n                ||\n                (flow.response && regex.test(ResponseUtils.getContentType(flow.response)))\n            );\n        }\n        contentTypeFilter.desc = \"content type matches \" + regex;\n        return contentTypeFilter;\n    }\n    function requestContentType(regex){\n        regex = new RegExp(regex, \"i\");\n        function requestContentTypeFilter(flow){\n            return flow.request && regex.test(RequestUtils.getContentType(flow.request));\n        }\n        requestContentTypeFilter.desc = \"req. content type matches \" + regex;\n        return requestContentTypeFilter;\n    }\n    function responseContentType(regex){\n        regex = new RegExp(regex, \"i\");\n        function responseContentTypeFilter(flow){\n            return flow.response && regex.test(ResponseUtils.getContentType(flow.response));\n        }\n        responseContentTypeFilter.desc = \"resp. content type matches \" + regex;\n        return responseContentTypeFilter;\n    }\n    function url(regex){\n        regex = new RegExp(regex, \"i\");\n        function urlFilter(flow){\n            return flow.request && regex.test(RequestUtils.pretty_url(flow.request));\n        }\n        urlFilter.desc = \"url matches \" + regex;\n        return urlFilter;\n    }\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);\n    }\n  }\n\n  return {\n    SyntaxError: SyntaxError,\n    parse:       parse\n  };\n})();\n/* jshint ignore:end */\n\nmodule.exports = Filt;\n","var _ = require(\"lodash\");\n\nvar _MessageUtils = {\n    getContentType: function (message) {\n        return this.get_first_header(message, /^Content-Type$/i);\n    },\n    get_first_header: function (message, regex) {\n        //FIXME: Cache Invalidation.\n        if (!message._headerLookups)\n            Object.defineProperty(message, \"_headerLookups\", {\n                value: {},\n                configurable: false,\n                enumerable: false,\n                writable: false\n            });\n        if (!(regex in message._headerLookups)) {\n            var header;\n            for (var i = 0; i < message.headers.length; i++) {\n                if (!!message.headers[i][0].match(regex)) {\n                    header = message.headers[i];\n                    break;\n                }\n            }\n            message._headerLookups[regex] = header ? header[1] : undefined;\n        }\n        return message._headerLookups[regex];\n    },\n    match_header: function (message, regex) {\n        var headers = message.headers;\n        var i = headers.length;\n        while (i--) {\n            if (regex.test(headers[i].join(\" \"))) {\n                return headers[i];\n            }\n        }\n        return false;\n    }\n};\n\nvar defaultPorts = {\n    \"http\": 80,\n    \"https\": 443\n};\n\nvar RequestUtils = _.extend(_MessageUtils, {\n    pretty_host: function (request) {\n        //FIXME: Add hostheader\n        return request.host;\n    },\n    pretty_url: function (request) {\n        var port = \"\";\n        if (defaultPorts[request.scheme] !== request.port) {\n            port = \":\" + request.port;\n        }\n        return request.scheme + \"://\" + this.pretty_host(request) + port + request.path;\n    }\n});\n\nvar ResponseUtils = _.extend(_MessageUtils, {});\n\n\nmodule.exports = {\n    ResponseUtils: ResponseUtils,\n    RequestUtils: RequestUtils\n\n}","\nvar _ = require(\"lodash\");\nvar $ = require(\"jquery\");\nvar EventEmitter = require('events').EventEmitter;\n\nvar utils = require(\"../utils.js\");\nvar actions = require(\"../actions.js\");\nvar dispatcher = require(\"../dispatcher.js\");\n\n\nfunction ListStore() {\n    EventEmitter.call(this);\n    this.reset();\n}\n_.extend(ListStore.prototype, EventEmitter.prototype, {\n    add: function (elem) {\n        if (elem.id in this._pos_map) {\n            return;\n        }\n        this._pos_map[elem.id] = this.list.length;\n        this.list.push(elem);\n        this.emit(\"add\", elem);\n    },\n    update: function (elem) {\n        if (!(elem.id in this._pos_map)) {\n            return;\n        }\n        this.list[this._pos_map[elem.id]] = elem;\n        this.emit(\"update\", elem);\n    },\n    remove: function (elem_id) {\n        if (!(elem_id in this._pos_map)) {\n            return;\n        }\n        this.list.splice(this._pos_map[elem_id], 1);\n        this._build_map();\n        this.emit(\"remove\", elem_id);\n    },\n    reset: function (elems) {\n        this.list = elems || [];\n        this._build_map();\n        this.emit(\"recalculate\");\n    },\n    _build_map: function () {\n        this._pos_map = {};\n        for (var i = 0; i < this.list.length; i++) {\n            var elem = this.list[i];\n            this._pos_map[elem.id] = i;\n        }\n    },\n    get: function (elem_id) {\n        return this.list[this._pos_map[elem_id]];\n    },\n    index: function (elem_id) {\n        return this._pos_map[elem_id];\n    }\n});\n\n\nfunction DictStore() {\n    EventEmitter.call(this);\n    this.reset();\n}\n_.extend(DictStore.prototype, EventEmitter.prototype, {\n    update: function (dict) {\n        _.merge(this.dict, dict);\n        this.emit(\"recalculate\");\n    },\n    reset: function (dict) {\n        this.dict = dict || {};\n        this.emit(\"recalculate\");\n    }\n});\n\nfunction LiveStoreMixin(type) {\n    this.type = type;\n\n    this._updates_before_fetch = undefined;\n    this._fetchxhr = false;\n\n    this.handle = this.handle.bind(this);\n    dispatcher.AppDispatcher.register(this.handle);\n\n    // Avoid double-fetch on startup.\n    if (!(window.ws && window.ws.readyState === WebSocket.CONNECTING)) {\n        this.fetch();\n    }\n}\n_.extend(LiveStoreMixin.prototype, {\n    handle: function (event) {\n        if (event.type === actions.ActionTypes.CONNECTION_OPEN) {\n            return this.fetch();\n        }\n        if (event.type === this.type) {\n            if (event.cmd === actions.StoreCmds.RESET) {\n                this.fetch(event.data);\n            } else if (this._updates_before_fetch) {\n                console.log(\"defer update\", event);\n                this._updates_before_fetch.push(event);\n            } else {\n                this[event.cmd](event.data);\n            }\n        }\n    },\n    close: function () {\n        dispatcher.AppDispatcher.unregister(this.handle);\n    },\n    fetch: function (data) {\n        console.log(\"fetch \" + this.type);\n        if (this._fetchxhr) {\n            this._fetchxhr.abort();\n        }\n        this._updates_before_fetch = []; // (JS: empty array is true)\n        if (data) {\n            this.handle_fetch(data);\n        } else {\n            this._fetchxhr = $.getJSON(\"/\" + this.type)\n                .done(function (message) {\n                    this.handle_fetch(message.data);\n                }.bind(this))\n                .fail(function () {\n                    EventLogActions.add_event(\"Could not fetch \" + this.type);\n                }.bind(this));\n        }\n    },\n    handle_fetch: function (data) {\n        this._fetchxhr = false;\n        console.log(this.type + \" fetched.\", this._updates_before_fetch);\n        this.reset(data);\n        var updates = this._updates_before_fetch;\n        this._updates_before_fetch = false;\n        for (var i = 0; i < updates.length; i++) {\n            this.handle(updates[i]);\n        }\n    },\n});\n\nfunction LiveListStore(type) {\n    ListStore.call(this);\n    LiveStoreMixin.call(this, type);\n}\n_.extend(LiveListStore.prototype, ListStore.prototype, LiveStoreMixin.prototype);\n\nfunction LiveDictStore(type) {\n    DictStore.call(this);\n    LiveStoreMixin.call(this, type);\n}\n_.extend(LiveDictStore.prototype, DictStore.prototype, LiveStoreMixin.prototype);\n\n\nfunction FlowStore() {\n    return new LiveListStore(actions.ActionTypes.FLOW_STORE);\n}\n\nfunction SettingsStore() {\n    return new LiveDictStore(actions.ActionTypes.SETTINGS_STORE);\n}\n\nfunction EventLogStore() {\n    LiveListStore.call(this, actions.ActionTypes.EVENT_STORE);\n}\n_.extend(EventLogStore.prototype, LiveListStore.prototype, {\n    fetch: function(){\n        LiveListStore.prototype.fetch.apply(this, arguments);\n\n        // Make sure to display updates even if fetching all events failed.\n        // This way, we can send \"fetch failed\" log messages to the log.\n        if(this._fetchxhr){\n            this._fetchxhr.fail(function(){\n                this.handle_fetch(null);\n            }.bind(this));\n        }\n    }\n});\n\n\nmodule.exports = {\n    EventLogStore: EventLogStore,\n    SettingsStore: SettingsStore,\n    FlowStore: FlowStore\n};","\nvar EventEmitter = require('events').EventEmitter;\nvar _ = require(\"lodash\");\n\n\nvar utils = require(\"../utils.js\");\n\nfunction SortByStoreOrder(elem) {\n    return this.store.index(elem.id);\n}\n\nvar default_sort = SortByStoreOrder;\nvar default_filt = function(elem){\n    return true;\n};\n\nfunction StoreView(store, filt, sortfun) {\n    EventEmitter.call(this);\n    filt = filt || default_filt;\n    sortfun = sortfun || default_sort;\n\n    this.store = store;\n\n    this.add = this.add.bind(this);\n    this.update = this.update.bind(this);\n    this.remove = this.remove.bind(this);\n    this.recalculate = this.recalculate.bind(this);\n    this.store.addListener(\"add\", this.add);\n    this.store.addListener(\"update\", this.update);\n    this.store.addListener(\"remove\", this.remove);\n    this.store.addListener(\"recalculate\", this.recalculate);\n\n    this.recalculate(filt, sortfun);\n}\n\n_.extend(StoreView.prototype, EventEmitter.prototype, {\n    close: function () {\n        this.store.removeListener(\"add\", this.add);\n        this.store.removeListener(\"update\", this.update);\n        this.store.removeListener(\"remove\", this.remove);\n        this.store.removeListener(\"recalculate\", this.recalculate);\n        },\n        recalculate: function (filt, sortfun) {\n        if (filt) {\n            this.filt = filt.bind(this);\n        }\n        if (sortfun) {\n            this.sortfun = sortfun.bind(this);\n        }\n\n        this.list = this.store.list.filter(this.filt);\n        this.list.sort(function (a, b) {\n            return this.sortfun(a) - this.sortfun(b);\n        }.bind(this));\n        this.emit(\"recalculate\");\n    },\n    index: function (elem) {\n        return _.sortedIndex(this.list, elem, this.sortfun);\n    },\n    add: function (elem) {\n        if (this.filt(elem)) {\n            var idx = this.index(elem);\n            if (idx === this.list.length) { //happens often, .push is way faster.\n                this.list.push(elem);\n            } else {\n                this.list.splice(idx, 0, elem);\n            }\n            this.emit(\"add\", elem, idx);\n        }\n    },\n    update: function (elem) {\n        var idx;\n        var i = this.list.length;\n        // Search from the back, we usually update the latest entries.\n        while (i--) {\n            if (this.list[i].id === elem.id) {\n                idx = i;\n                break;\n            }\n        }\n\n        if (idx === -1) { //not contained in list\n            this.add(elem);\n        } else if (!this.filt(elem)) {\n            this.remove(elem.id);\n        } else {\n            if (this.sortfun(this.list[idx]) !== this.sortfun(elem)) { //sortpos has changed\n                this.remove(this.list[idx]);\n                this.add(elem);\n            } else {\n                this.list[idx] = elem;\n                this.emit(\"update\", elem, idx);\n            }\n        }\n    },\n    remove: function (elem_id) {\n        var idx = this.list.length;\n        while (idx--) {\n            if (this.list[idx].id === elem_id) {\n                this.list.splice(idx, 1);\n                this.emit(\"remove\", elem_id, idx);\n                break;\n            }\n        }\n    }\n});\n\nmodule.exports = {\n    StoreView: StoreView\n};","var $ = require(\"jquery\");\n\n\nvar Key = {\n    UP: 38,\n    DOWN: 40,\n    PAGE_UP: 33,\n    PAGE_DOWN: 34,\n    HOME: 36,\n    END: 35,\n    LEFT: 37,\n    RIGHT: 39,\n    ENTER: 13,\n    ESC: 27,\n    TAB: 9,\n    SPACE: 32,\n    BACKSPACE: 8,\n};\n// Add A-Z\nfor (var i = 65; i <= 90; i++) {\n    Key[String.fromCharCode(i)] = i;\n}\n\n\nvar formatSize = function (bytes) {\n    var size = bytes;\n    var prefix = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\"];\n    var i = 0;\n    while (Math.abs(size) >= 1024 && i < prefix.length - 1) {\n        i++;\n        size = size / 1024;\n    }\n    return (Math.floor(size * 100) / 100.0).toFixed(2) + prefix[i];\n};\n\n\nvar formatTimeDelta = function (milliseconds) {\n    var time = milliseconds;\n    var prefix = [\"ms\", \"s\", \"min\", \"h\"];\n    var div = [1000, 60, 60];\n    var i = 0;\n    while (Math.abs(time) >= div[i] && i < div.length) {\n        time = time / div[i];\n        i++;\n    }\n    return Math.round(time) + prefix[i];\n};\n\n\nvar formatTimeStamp = function (seconds) {\n    var ts = (new Date(seconds * 1000)).toISOString();\n    return ts.replace(\"T\", \" \").replace(\"Z\", \"\");\n};\n\n\nfunction getCookie(name) {\n    var r = document.cookie.match(\"\\\\b\" + name + \"=([^;]*)\\\\b\");\n    return r ? r[1] : undefined;\n}\nvar xsrf = $.param({_xsrf: getCookie(\"_xsrf\")});\n\n//Tornado XSRF Protection.\n$.ajaxPrefilter(function (options) {\n    if ([\"post\", \"put\", \"delete\"].indexOf(options.type.toLowerCase()) >= 0 && options.url[0] === \"/\") {\n        if (options.data) {\n            options.data += (\"&\" + xsrf);\n        } else {\n            options.data = xsrf;\n        }\n    }\n});\n// Log AJAX Errors\n$(document).ajaxError(function (event, jqXHR, ajaxSettings, thrownError) {\n    var message = jqXHR.responseText;\n    console.error(message, arguments);\n    EventLogActions.add_event(thrownError + \": \" + message);\n    window.alert(message);\n});\n\nmodule.exports = {\n    formatSize: formatSize,\n    formatTimeDelta: formatTimeDelta,\n    formatTimeStamp: formatTimeStamp,\n    Key: Key\n};"]}
diff --git a/web/src/css/header.less b/web/src/css/header.less
index 3c6e4761..57f122e8 100644
--- a/web/src/css/header.less
+++ b/web/src/css/header.less
@@ -2,15 +2,9 @@
 @import (reference) '../../node_modules/bootstrap/less/mixins/grid.less';
 
 header {
+  padding-top: 0.5em;
   background-color: white;
-
-  .title-bar {
-    line-height: 25px;
-    text-align: center;
-  }
-
   @separator-color: lighten(grey, 15%);
-
   .menu {
     padding: 10px;
     border-bottom: solid @separator-color 1px;
diff --git a/web/src/js/components/header.js b/web/src/js/components/header.js
index eb57b1de..6d49453c 100644
--- a/web/src/js/components/header.js
+++ b/web/src/js/components/header.js
@@ -292,7 +292,7 @@ var FileMenu = React.createClass({
 
         return (
             <div className={fileMenuClass}>
-                <a href="#" className="special" onClick={this.handleFileClick}> File </a>
+                <a href="#" className="special" onClick={this.handleFileClick}> mitmproxy </a>
                 <ul className="dropdown-menu" role="menu">
                     <li>
                         <a href="#" onClick={this.handleNewClick}>
@@ -368,9 +368,6 @@ var Header = React.createClass({
 
         return (
             <header>
-                <div className="title-bar">
-                    mitmproxy { this.props.settings.version }
-                </div>
                 <nav className="nav-tabs nav-tabs-lg">
                     <FileMenu/>
                     {header}
