commit 760d303dfa9dcce4035e482597cfaa9a08bfa70e
Author: Aldo Cortesi <aldo@nullcube.com>
Date:   Sat Feb 25 13:16:30 2012 +1300

    Add README.txt for PyPi.
    
    Yes, this means we now maintain two complete README files that are identical
    except for markup. We distribute with only README.txt, so README.mkd can
    actually move in to the documentation tree at some point.

diff --git a/MANIFEST.in b/MANIFEST.in
index d0c96b42..f1465cd9 100644
--- a/MANIFEST.in
+++ b/MANIFEST.in
@@ -1,7 +1,8 @@
 include LICENSE
 include CHANGELOG
 include CONTRIBUTORS
-include README.mkd
+include README.txt
+exclude README.mkd
 recursive-include examples *
 recursive-include doc *
 recursive-include test *
diff --git a/README.mkd b/README.mkd
index 94405ab7..67b08e96 100644
--- a/README.mkd
+++ b/README.mkd
@@ -5,9 +5,9 @@ fly.
 __mitmdump__ is the command-line version of mitmproxy, with the same
 functionality but without the user interface. Think tcpdump for HTTP.
 
-Both tools are fully documentented in the commandline _--help_ flag, and, in
-the case of __mitmproxy__, a built-in help page accessible through the _?_
-keyboard shortcut.
+Complete documentation and a set of practical tutorials is included in the
+distribution package, and is also available at
+[mitmproxy.org](http://mitmproxy.org).
 
 
 Features
diff --git a/README.txt b/README.txt
new file mode 100644
index 00000000..a52cd46d
--- /dev/null
+++ b/README.txt
@@ -0,0 +1,66 @@
+**mitmproxy** is an SSL-capable man-in-the-middle proxy for HTTP. It provides a
+console interface that allows traffic flows to be inspected and edited on the
+fly.
+
+**mitmdump** is the command-line version of mitmproxy, with the same
+functionality but without the user interface. Think tcpdump for HTTP.
+
+Complete documentation and a set of practical tutorials is included in the
+distribution package, and is also available at `mitmproxy.org
+<http://mitmproxy.org>`_.
+
+
+Features
+--------
+
+- Intercept HTTP requests and responses and modify them on the fly.
+- Save complete HTTP conversations for later replay and analysis.
+- Replay the client-side of an HTTP conversations.
+- Replay HTTP responses of a previously recorded server.
+- Reverse proxy mode to forward traffic to a specified server.
+- Make scripted changes to HTTP traffic using Python. 
+- SSL certificates for interception are generated on the fly.
+
+
+Download
+--------
+
+Releases and rendered documentation can be found on the mitmproxy website:
+
+`mitmproxy.org <http://mitmproxy.org>`_
+
+Source is hosted on github: 
+
+`github.com/cortesi/mitmproxy <http://github.com/cortesi/mitmproxy>`_
+
+
+Community
+---------
+
+Come join us in the #mitmproxy channel on the OFTC IRC network
+(irc://irc.oftc.net:6667).
+
+We also have a mailing list, hosted here:
+
+http://groups.google.com/group/mitmproxy
+
+
+Requirements
+------------
+
+* `Python <http://www.python.org>`_ 2.6.x or 2.7.x.
+* `openssl <http://www.openssl.org/>`_ - installed by default on most systems.
+* `urwid <http://excess.org/urwid/>`_ version 0.9.8 or newer.
+* The test suite uses the `pry <http://github.com/cortesi/pry>`_ unit testing
+  library.
+* Rendering the documentation requires `countershape <http://github.com/cortesi/countershape>`_.
+
+**mitmproxy** is tested and developed on OSX, Linux and OpenBSD. 
+
+You should also make sure that your console environment is set up with the
+following: 
+    
+* EDITOR environment variable to determine the external editor.
+* PAGER environment variable to determine the external pager.
+* Appropriate entries in your mailcap files to determine external
+  viewers for request and response contents.
diff --git a/setup.py b/setup.py
index 418707c0..4bcf06e7 100644
--- a/setup.py
+++ b/setup.py
@@ -65,7 +65,7 @@ def findPackages(path, dataExclude=[]):
     return packages, package_data
 
 
-long_description = file("README.mkd").read()
+long_description = file("README.txt").read()
 packages, package_data = findPackages("libmproxy")
 setup(
         name = "mitmproxy",
