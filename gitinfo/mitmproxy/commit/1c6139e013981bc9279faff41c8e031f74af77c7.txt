commit 1c6139e013981bc9279faff41c8e031f74af77c7
Author: Bryan Bishop <kanzure@gmail.com>
Date:   Sun Dec 9 15:57:11 2012 -0600

    remove trailing whitespace

diff --git a/CHANGELOG b/CHANGELOG
index 3039bd37..a260fdb6 100644
--- a/CHANGELOG
+++ b/CHANGELOG
@@ -29,14 +29,14 @@
 20 February 2012: mitmproxy 0.7:
 
     * New built-in key/value editor. This lets you interactively edit URL query
-      strings, headers and URL-encoded form data. 
+      strings, headers and URL-encoded form data.
 
     * Extend script API to allow duplication and replay of flows.
-    
+
     * API for easy manipulation of URL-encoded forms and query strings.
-    
+
     * Add "D" shortcut in mitmproxy to duplicate a flow.
-    
+
     * Reverse proxy mode. In this mode mitmproxy acts as an HTTP server,
       forwarding all traffic to a specified upstream server.
 
@@ -44,13 +44,13 @@
       improve spacing and layout throughout.
 
     * Add support for filtering by HTTP method.
-   
+
     * Add the ability to specify an HTTP body size limit.
-    
+
     * Move to typed netstrings for serialization format - this makes 0.7
       backwards-incompatible with serialized data from 0.6!
 
-    * Significant improvements in speed and responsiveness of UI. 
+    * Significant improvements in speed and responsiveness of UI.
 
     * Many minor bugfixes and improvements.
 
@@ -115,14 +115,14 @@
       100% of CPU.
 
 
-30 March 2011: mitmproxy 0.4 
+30 March 2011: mitmproxy 0.4
 
     * Full serialization of HTTP conversations
-    
+
     * Client and server replay
-    
+
     * On-the-fly generation of dummy SSL certificates
-   
+
     * mitmdump has "grown up" into a powerful tcpdump-like tool for HTTP/S
 
     * Dozens of improvements to the mitmproxy console interface
@@ -130,22 +130,22 @@
     * Python scripting hooks for programmatic modification of traffic
 
 
-1 March 2010: mitmproxy 0.2 
+1 March 2010: mitmproxy 0.2
 
     * Big speed and responsiveness improvements, thanks to Thomas Roth
-    
+
     * Support urwid 0.9.9
-    
+
     * Terminal beeping based on filter expressions
-    
+
     * Filter expressions for terminal beeps, limits, interceptions and sticky
       cookies can now be passed on the command line.
 
     * Save requests and responses to file
-    
+
     * Split off non-interactive dump functionality into a new tool called
       mitmdump
-    
+
     * "A" will now accept all intercepted connections
-    
+
     * Lots of bugfixes
diff --git a/LICENSE b/LICENSE
index 4da2a6a9..b2bd981d 100644
--- a/LICENSE
+++ b/LICENSE
@@ -5,7 +5,7 @@ License version 3, with the following addition:
 permission to link the code of this program or portions of this
 program with the OpenSSL project's "OpenSSL" library (or with modified
 versions of it that use the same license as the "OpenSSL" library),
-and distribute linked combinations including the two. 
+and distribute linked combinations including the two.
 
   You must obey the GNU General Public License in all respects for all
 of the code used other than "OpenSSL".  If you modify file(s) provided
diff --git a/README.mkd b/README.mkd
index a7518d89..a239eb29 100644
--- a/README.mkd
+++ b/README.mkd
@@ -18,7 +18,7 @@ Features
 - Replay the client-side of an HTTP conversations.
 - Replay HTTP responses of a previously recorded server.
 - Reverse proxy mode to forward traffic to a specified server.
-- Make scripted changes to HTTP traffic using Python. 
+- Make scripted changes to HTTP traffic using Python.
 - SSL certificates for interception are generated on the fly.
 
 
@@ -29,7 +29,7 @@ Releases and rendered documentation can be found on the mitmproxy website:
 
 [mitmproxy.org](http://mitmproxy.org)
 
-Source is hosted on github: 
+Source is hosted on github:
 
 [github.com/cortesi/mitmproxy](http://github.com/cortesi/mitmproxy)
 
@@ -68,8 +68,8 @@ __mitmproxy__ is tested and developed on OSX, Linux and OpenBSD. Windows is not
 supported at the moment.
 
 You should also make sure that your console environment is set up with the
-following: 
-    
+following:
+
 * EDITOR environment variable to determine the external editor.
 * PAGER environment variable to determine the external pager.
 * Appropriate entries in your mailcap files to determine external
diff --git a/README.txt b/README.txt
index ff26da46..ba9b4323 100644
--- a/README.txt
+++ b/README.txt
@@ -17,7 +17,7 @@ Features
 - Replay the client-side of an HTTP conversations.
 - Replay HTTP responses of a previously recorded server.
 - Reverse proxy mode to forward traffic to a specified server.
-- Make scripted changes to HTTP traffic using Python. 
+- Make scripted changes to HTTP traffic using Python.
 - SSL certificates for interception are generated on the fly.
 
 
@@ -28,7 +28,7 @@ Releases and rendered documentation can be found on the mitmproxy website:
 
 mitmproxy.org_
 
-Source is hosted on github: 
+Source is hosted on github:
 
 `github.com/cortesi/mitmproxy`_
 
@@ -65,8 +65,8 @@ mitmproxy:
 supported at the moment.
 
 You should also make sure that your console environment is set up with the
-following: 
-    
+following:
+
 * EDITOR environment variable to determine the external editor.
 * PAGER environment variable to determine the external pager.
 * Appropriate entries in your mailcap files to determine external
diff --git a/examples/README b/examples/README
index 9ea6f9a2..ab06ad27 100644
--- a/examples/README
+++ b/examples/README
@@ -1,8 +1,8 @@
 add_header.py           Simple script that just adds a header to every request.
 dup_and_replay.py       Duplicates each request, changes it, and then replays the modified request.
 flowbasic               Basic use of mitmproxy as a library.
-modify_form.py          Modify all form submissions to add a parameter. 
+modify_form.py          Modify all form submissions to add a parameter.
 modify_querystring.py   Modify all query strings to add a parameters.
-stub.py                 Script stub with a method definition for every event. 
+stub.py                 Script stub with a method definition for every event.
 stickycookies           An example of writing a custom proxy with libmproxy.
 upsidedownternet.py     Rewrites traffic to turn PNGs upside down.
diff --git a/examples/stub.py b/examples/stub.py
index 119298fc..31411145 100644
--- a/examples/stub.py
+++ b/examples/stub.py
@@ -31,7 +31,7 @@ def error(ctx, flow):
     """
         Called when a flow error has occured, e.g. invalid server responses, or
         interrupted connections. This is distinct from a valid server HTTP error
-        response, which is simply a response with an HTTP error code. 
+        response, which is simply a response with an HTTP error code.
     """
     ctx.log("error")
 
diff --git a/libmproxy/contrib/html2text.py b/libmproxy/contrib/html2text.py
index 76ea91a3..035a596b 100644
--- a/libmproxy/contrib/html2text.py
+++ b/libmproxy/contrib/html2text.py
@@ -764,7 +764,7 @@ def main():
 
     p = optparse.OptionParser('%prog [(filename|url) [encoding]]',
                               version='%prog ' + __version__)
-    p.add_option("--ignore-emphasis", dest="ignore_emphasis", action="store_true", 
+    p.add_option("--ignore-emphasis", dest="ignore_emphasis", action="store_true",
         default=IGNORE_EMPHASIS, help="don't include any formatting for emphasis")
     p.add_option("--ignore-links", dest="ignore_links", action="store_true",
         default=IGNORE_ANCHORS, help="don't include any formatting for links")
