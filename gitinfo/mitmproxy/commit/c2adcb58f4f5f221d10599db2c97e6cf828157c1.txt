commit c2adcb58f4f5f221d10599db2c97e6cf828157c1
Author: Maximilian Hils <git@maximilianhils.com>
Date:   Fri Jan 5 16:04:02 2018 +0100

    fix test flow timestamps to values that don't overflow in certain timezones

diff --git a/mitmproxy/test/tflow.py b/mitmproxy/test/tflow.py
index 91747866..05d194d6 100644
--- a/mitmproxy/test/tflow.py
+++ b/mitmproxy/test/tflow.py
@@ -53,8 +53,8 @@ def twebsocketflow(client_conn=True, server_conn=True, messages=True, err=None,
                 sec_websocket_version="13",
                 sec_websocket_key="1234",
             ),
-            timestamp_start=1,
-            timestamp_end=2,
+            timestamp_start=946681200,
+            timestamp_end=946681201,
             content=b''
         )
         resp = http.HTTPResponse(
@@ -66,8 +66,8 @@ def twebsocketflow(client_conn=True, server_conn=True, messages=True, err=None,
                 upgrade='websocket',
                 sec_websocket_accept=b'',
             ),
-            timestamp_start=1,
-            timestamp_end=2,
+            timestamp_start=946681202,
+            timestamp_end=946681203,
             content=b'',
         )
         handshake_flow = http.HTTPFlow(client_conn, server_conn)
@@ -158,9 +158,9 @@ def tclient_conn():
         clientcert=None,
         mitmcert=None,
         ssl_established=False,
-        timestamp_start=1,
-        timestamp_ssl_setup=2,
-        timestamp_end=3,
+        timestamp_start=946681200,
+        timestamp_ssl_setup=946681201,
+        timestamp_end=946681206,
         sni="address",
         cipher_name="cipher",
         alpn_proto_negotiated=b"http/1.1",
@@ -182,10 +182,10 @@ def tserver_conn():
         source_address=("address", 22),
         ip_address=("192.168.0.1", 22),
         cert=None,
-        timestamp_start=1,
-        timestamp_tcp_setup=2,
-        timestamp_ssl_setup=3,
-        timestamp_end=4,
+        timestamp_start=946681202,
+        timestamp_tcp_setup=946681203,
+        timestamp_ssl_setup=946681204,
+        timestamp_end=946681205,
         ssl_established=False,
         sni="address",
         alpn_proto_negotiated=None,
diff --git a/mitmproxy/test/tutils.py b/mitmproxy/test/tutils.py
index cd9f3b3f..d5b52bbe 100644
--- a/mitmproxy/test/tutils.py
+++ b/mitmproxy/test/tutils.py
@@ -31,8 +31,8 @@ def treq(**kwargs):
         http_version=b"HTTP/1.1",
         headers=http.Headers(((b"header", b"qvalue"), (b"content-length", b"7"))),
         content=b"content",
-        timestamp_start=1,
-        timestamp_end=2,
+        timestamp_start=946681200,
+        timestamp_end=946681201,
     )
     default.update(kwargs)
     return http.Request(**default)
@@ -49,8 +49,8 @@ def tresp(**kwargs):
         reason=b"OK",
         headers=http.Headers(((b"header-response", b"svalue"), (b"content-length", b"7"))),
         content=b"message",
-        timestamp_start=1,
-        timestamp_end=2,
+        timestamp_start=946681202,
+        timestamp_end=946681203,
     )
     default.update(kwargs)
     return http.Response(**default)
diff --git a/test/mitmproxy/addons/test_cut.py b/test/mitmproxy/addons/test_cut.py
index 71e699db..97577c60 100644
--- a/test/mitmproxy/addons/test_cut.py
+++ b/test/mitmproxy/addons/test_cut.py
@@ -23,8 +23,8 @@ def test_extract():
         ["request.text", "content"],
         ["request.content", b"content"],
         ["request.raw_content", b"content"],
-        ["request.timestamp_start", "1"],
-        ["request.timestamp_end", "2"],
+        ["request.timestamp_start", "946681200"],
+        ["request.timestamp_end", "946681201"],
         ["request.header[header]", "qvalue"],
 
         ["response.status_code", "200"],
@@ -33,8 +33,8 @@ def test_extract():
         ["response.content", b"message"],
         ["response.raw_content", b"message"],
         ["response.header[header-response]", "svalue"],
-        ["response.timestamp_start", "1"],
-        ["response.timestamp_end", "2"],
+        ["response.timestamp_start", "946681202"],
+        ["response.timestamp_end", "946681203"],
 
         ["client_conn.address.port", "22"],
         ["client_conn.address.host", "127.0.0.1"],
@@ -49,10 +49,9 @@ def test_extract():
         ["server_conn.sni", "address"],
         ["server_conn.ssl_established", "false"],
     ]
-    for t in tests:
-        ret = cut.extract(t[0], tf)
-        if ret != t[1]:
-            raise AssertionError("%s: Expected %s, got %s" % (t[0], t[1], ret))
+    for spec, expected in tests:
+        ret = cut.extract(spec, tf)
+        assert spec and ret == expected
 
     with open(tutils.test_data.path("mitmproxy/net/data/text_cert"), "rb") as f:
         d = f.read()
diff --git a/test/mitmproxy/addons/test_view.py b/test/mitmproxy/addons/test_view.py
index 1c76eb21..6e4af367 100644
--- a/test/mitmproxy/addons/test_view.py
+++ b/test/mitmproxy/addons/test_view.py
@@ -41,7 +41,7 @@ def test_order_generators():
     tf = tflow.tflow(resp=True)
 
     rs = view.OrderRequestStart(v)
-    assert rs.generate(tf) == 1
+    assert rs.generate(tf) == 946681200
 
     rm = view.OrderRequestMethod(v)
     assert rm.generate(tf) == tf.request.method
diff --git a/test/mitmproxy/net/http/test_response.py b/test/mitmproxy/net/http/test_response.py
index a77435c9..af35bab3 100644
--- a/test/mitmproxy/net/http/test_response.py
+++ b/test/mitmproxy/net/http/test_response.py
@@ -150,10 +150,10 @@ class TestResponseUtils:
         n = time.time()
         r.headers["date"] = email.utils.formatdate(n)
         pre = r.headers["date"]
-        r.refresh(1)
+        r.refresh(946681202)
         assert pre == r.headers["date"]
 
-        r.refresh(61)
+        r.refresh(946681262)
         d = email.utils.parsedate_tz(r.headers["date"])
         d = email.utils.mktime_tz(d)
         # Weird that this is not exact...
diff --git a/test/mitmproxy/tools/console/test_common.py b/test/mitmproxy/tools/console/test_common.py
index 3ab4fd67..a996c010 100644
--- a/test/mitmproxy/tools/console/test_common.py
+++ b/test/mitmproxy/tools/console/test_common.py
@@ -1,10 +1,7 @@
 from mitmproxy.test import tflow
 from mitmproxy.tools.console import common
 
-from ....conftest import skip_appveyor
 
-
-@skip_appveyor
 def test_format_flow():
     f = tflow.tflow(resp=True)
     assert common.format_flow(f, True)
