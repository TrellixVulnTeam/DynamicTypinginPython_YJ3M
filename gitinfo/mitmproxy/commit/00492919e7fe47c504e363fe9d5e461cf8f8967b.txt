commit 00492919e7fe47c504e363fe9d5e461cf8f8967b
Author: Aldo Cortesi <aldo@nullcube.com>
Date:   Sat Nov 12 10:59:57 2016 +1300

    Add HTTPFlow.mode to record the HTTP proxy layer mode

diff --git a/mitmproxy/http.py b/mitmproxy/http.py
index 50174764..dafd4782 100644
--- a/mitmproxy/http.py
+++ b/mitmproxy/http.py
@@ -53,7 +53,7 @@ class HTTPRequest(http.Request):
     def get_state(self):
         state = super().get_state()
         state.update(
-            is_replay=self.is_replay,
+            is_replay=self.is_replay
         )
         return state
 
@@ -143,7 +143,7 @@ class HTTPFlow(flow.Flow):
     transaction.
     """
 
-    def __init__(self, client_conn, server_conn, live=None):
+    def __init__(self, client_conn, server_conn, live=None, mode="regular"):
         super().__init__("http", client_conn, server_conn, live)
 
         self.request = None  # type: HTTPRequest
@@ -163,11 +163,14 @@ class HTTPFlow(flow.Flow):
         """:py:class:`ClientConnection` object """
         self.intercepted = False  # type: bool
         """ Is this flow currently being intercepted? """
+        self.mode = mode
+        """ What mode was the proxy layer in when receiving this request? """
 
     _stateobject_attributes = flow.Flow._stateobject_attributes.copy()
     _stateobject_attributes.update(
         request=HTTPRequest,
-        response=HTTPResponse
+        response=HTTPResponse,
+        mode=str
     )
 
     def __repr__(self):
diff --git a/mitmproxy/io_compat.py b/mitmproxy/io_compat.py
index b1b5a296..20ee8824 100644
--- a/mitmproxy/io_compat.py
+++ b/mitmproxy/io_compat.py
@@ -69,6 +69,7 @@ def convert_018_019(data):
     data["client_conn"]["sni"] = None
     data["client_conn"]["cipher_name"] = None
     data["client_conn"]["tls_version"] = None
+    data["mode"] = "regular"
     data["metadata"] = dict()
     return data
 
diff --git a/mitmproxy/proxy/protocol/http.py b/mitmproxy/proxy/protocol/http.py
index e974ffe2..5f4a9856 100644
--- a/mitmproxy/proxy/protocol/http.py
+++ b/mitmproxy/proxy/protocol/http.py
@@ -159,7 +159,12 @@ class HttpLayer(base.Layer):
             self.__initial_server_tls = self.server_tls
             self.__initial_server_conn = self.server_conn
         while True:
-            flow = http.HTTPFlow(self.client_conn, self.server_conn, live=self)
+            flow = http.HTTPFlow(
+                self.client_conn,
+                self.server_conn,
+                live=self,
+                mode=self.mode.name
+            )
             if not self._process_flow(flow):
                 return
 
