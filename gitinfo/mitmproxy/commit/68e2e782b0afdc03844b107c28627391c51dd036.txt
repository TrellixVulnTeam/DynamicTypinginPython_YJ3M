commit 68e2e782b0afdc03844b107c28627391c51dd036
Author: Maximilian Hils <git@maximilianhils.com>
Date:   Mon Jun 17 17:03:17 2013 +0200

    attempt to fix 'half-duplex' TCP close sequence

diff --git a/netlib/tcp.py b/netlib/tcp.py
index 47953724..e37cb707 100644
--- a/netlib/tcp.py
+++ b/netlib/tcp.py
@@ -230,11 +230,15 @@ class TCPClient:
             if self.ssl_established:
                 self.connection.shutdown()
             else:
-                self.connection.shutdown(socket.SHUT_RDWR)
-            self.connection.close()
+                self.connection.shutdown(socket.SHUT_WR)
+            #Section 4.2.2.13 of RFC 1122 tells us that a close() with any pending readable data could lead to an immediate RST being sent.
+            #http://ia600609.us.archive.org/22/items/TheUltimateSo_lingerPageOrWhyIsMyTcpNotReliable/the-ultimate-so_linger-page-or-why-is-my-tcp-not-reliable.html
+            while self.connection.recv(4096):
+                pass
         except (socket.error, SSL.Error):
             # Socket probably already closed
             pass
+        self.connection.close()
 
 
 class BaseHandler:
@@ -328,10 +332,15 @@ class BaseHandler:
             if self.ssl_established:
                 self.connection.shutdown()
             else:
-                self.connection.shutdown(socket.SHUT_RDWR)
+                self.connection.shutdown(socket.SHUT_WR)
+            #Section 4.2.2.13 of RFC 1122 tells us that a close() with any pending readable data could lead to an immediate RST being sent.
+            #http://ia600609.us.archive.org/22/items/TheUltimateSo_lingerPageOrWhyIsMyTcpNotReliable/the-ultimate-so_linger-page-or-why-is-my-tcp-not-reliable.html
+            while self.connection.recv(4096):
+                pass
         except (socket.error, SSL.Error):
             # Socket probably already closed
             pass
+
         self.connection.close()
 
 
