commit e6cdbefb3b741e0123ef76273566a5aaadc706b8
Author: Aldo Cortesi <aldo@nullcube.com>
Date:   Tue Jun 26 20:49:34 2012 +1200

    Add transparent mode platform module for Linux.

diff --git a/libmproxy/platform/__init__.py b/libmproxy/platform/__init__.py
new file mode 100644
index 00000000..93423e91
--- /dev/null
+++ b/libmproxy/platform/__init__.py
@@ -0,0 +1,7 @@
+import sys
+
+resolver = None
+if sys.platform == "linux2":
+    import linux
+    resolver = linux.Resolver()
+
diff --git a/libmproxy/platform/linux.py b/libmproxy/platform/linux.py
new file mode 100644
index 00000000..d37f0fe8
--- /dev/null
+++ b/libmproxy/platform/linux.py
@@ -0,0 +1,11 @@
+import socket, struct
+
+# Python socket module does not have this constant
+SO_ORIGINAL_DST = 80
+
+class Resolver:
+    def original_addr(self, csock):
+        odestdata = csock.getsockopt(socket.SOL_IP, SO_ORIGINAL_DST, 16)
+        _, port, a1, a2, a3, a4 = struct.unpack("!HHBBBBxxxxxxxx", odestdata)
+        address = "%d.%d.%d.%d" % (a1, a2, a3, a4)
+        return address, port
diff --git a/libmproxy/proxy.py b/libmproxy/proxy.py
index 3ab93790..efa1c5e4 100644
--- a/libmproxy/proxy.py
+++ b/libmproxy/proxy.py
@@ -17,7 +17,7 @@ import shutil, tempfile, threading
 import optparse, SocketServer
 from OpenSSL import SSL
 from netlib import odict, tcp, http, wsgi
-import utils, flow, certutils, version
+import utils, flow, certutils, version, platform
 
 
 class ProxyError(Exception):
@@ -222,7 +222,10 @@ class ProxyHandler(tcp.BaseHandler):
                 self.convert_to_ssl(certfile, self.config.certfile or self.config.cacert)
             else:
                 scheme = "http"
-            method, path, httpversion = http.parse_init_http(line)
+            r = http.parse_init_http(line)
+            if not r:
+                raise ProxyError(400, "Bad HTTP request line.")
+            method, path, httpversion = r
             headers = http.read_headers(self.rfile)
             content = http.read_http_body_request(
                         self.rfile, self.wfile, headers, httpversion, self.config.body_size_limit
@@ -230,7 +233,10 @@ class ProxyHandler(tcp.BaseHandler):
             return flow.Request(client_conn, httpversion, host, port, "http", method, path, headers, content)
         elif self.config.reverse_proxy:
             scheme, host, port = self.config.reverse_proxy
-            method, path, httpversion = http.parse_init_http(line)
+            r = http.parse_init_http(line)
+            if not r:
+                raise ProxyError(400, "Bad HTTP request line.")
+            method, path, httpversion = r
             headers = http.read_headers(self.rfile)
             content = http.read_http_body_request(
                         self.rfile, self.wfile, headers, httpversion, self.config.body_size_limit
@@ -257,7 +263,10 @@ class ProxyHandler(tcp.BaseHandler):
                 line = self.rfile.readline(line)
             if self.proxy_connect_state:
                 host, port, httpversion = self.proxy_connect_state
-                method, path, httpversion = http.parse_init_http(line)
+                r = http.parse_init_http(line)
+                if not r:
+                    raise ProxyError(400, "Bad HTTP request line.")
+                method, path, httpversion = r
                 headers = http.read_headers(self.rfile)
                 content = http.read_http_body_request(
                     self.rfile, self.wfile, headers, httpversion, self.config.body_size_limit
@@ -400,7 +409,7 @@ def process_proxy_options(parser, options):
 
     if options.transparent_proxy:
         trans = dict(
-            resolver = None,
+            resolver = platform.resolver,
             sslports = TRANSPARENT_SSL_PORTS
         )
     else:
