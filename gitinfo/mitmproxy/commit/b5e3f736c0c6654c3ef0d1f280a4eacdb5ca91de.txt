commit b5e3f736c0c6654c3ef0d1f280a4eacdb5ca91de
Author: Maximilian Hils <git@maximilianhils.com>
Date:   Wed Apr 8 22:11:52 2020 +0200

    minor improvements, tests++

diff --git a/README.rst b/README.rst
index 26881ff9..124e4765 100644
--- a/README.rst
+++ b/README.rst
@@ -99,9 +99,7 @@ requirements installed, and you can run the basic test suite with tox_:
 
 .. code-block:: bash
 
-    tox -e py37    # runs Python tests
-    tox -e flake8  # checks code style style
-    tox -e mypy    # checks static types
+    tox -e py      # runs Python tests
 
 Our CI system has additional tox environments that are run on every pull request and branch on GitHub.
 
@@ -141,11 +139,12 @@ good reason not to.
 
 This is automatically enforced on every PR. If we detect a linting error, the
 PR checks will fail and block merging. You can run our lint checks yourself
-with the following command:
+with the following commands:
 
 .. code-block:: bash
 
-    tox -e lint
+    tox -e flake8
+    tox -e mypy    # checks static types
 
 
 .. |mitmproxy_site| image:: https://shields.mitmproxy.org/badge/https%3A%2F%2F-mitmproxy.org-blue.svg
diff --git a/mitmproxy/addons/command_history.py b/mitmproxy/addons/command_history.py
index 2c1bf887..d5aaa928 100644
--- a/mitmproxy/addons/command_history.py
+++ b/mitmproxy/addons/command_history.py
@@ -27,7 +27,7 @@ class CommandHistory:
     def running(self):
         # FIXME: We have a weird bug where the contract for configure is not followed and it is never called with
         # confdir or command_history as updated.
-        self.configure("command_history")
+        self.configure("command_history")  # pragma: no cover
 
     def configure(self, updated):
         if "command_history" in updated or "confdir" in updated:
@@ -36,9 +36,9 @@ class CommandHistory:
                 self.set_filter('')
 
     def done(self):
-        if ctx.options.command_history and len(self.history) > self.VACUUM_SIZE:
+        if ctx.options.command_history and len(self.history) >= self.VACUUM_SIZE:
             # vacuum history so that it doesn't grow indefinitely.
-            history_str = "\n".join(self.history[-self.VACUUM_SIZE / 2:]) + "\n"
+            history_str = "\n".join(self.history[-self.VACUUM_SIZE // 2:]) + "\n"
             self.history_file.write_text(history_str)
 
     @command.command("commands.history.add")
diff --git a/mitmproxy/net/http/http1/read.py b/mitmproxy/net/http/http1/read.py
index 0fc03f1b..a9585d7d 100644
--- a/mitmproxy/net/http/http1/read.py
+++ b/mitmproxy/net/http/http1/read.py
@@ -331,7 +331,8 @@ def _read_headers(rfile):
     while True:
         line = rfile.readline()
         if not line or line == b"\r\n" or line == b"\n":
-            break
+            # we do have coverage of this, but coverage.py does not detect it.
+            break  # pragma: no cover
         if line[0] in b" \t":
             if not ret:
                 raise exceptions.HttpSyntaxException("Invalid headers")
diff --git a/setup.py b/setup.py
index d2ff5f8c..07e82863 100644
--- a/setup.py
+++ b/setup.py
@@ -93,6 +93,7 @@ setup(
         'dev': [
             "asynctest>=0.12.0",
             "Flask>=1.0,<1.2",
+            "hypothesis>=5.8,<5.9",
             "parver>=0.1,<2.0",
             "pytest-asyncio>=0.10.0,<0.11",
             "pytest-cov>=2.7.1,<3",
diff --git a/test/mitmproxy/addons/test_command_history.py b/test/mitmproxy/addons/test_command_history.py
index df20fba7..245bbc26 100644
--- a/test/mitmproxy/addons/test_command_history.py
+++ b/test/mitmproxy/addons/test_command_history.py
@@ -5,15 +5,22 @@ from mitmproxy.test import taddons
 
 
 class TestCommandHistory:
-    def test_load_from_file(self, tmpdir):
-        commands = ['cmd1', 'cmd2', 'cmd3']
-        with open(tmpdir.join('command_history'), 'w') as f:
+    def test_load_and_save(self, tmpdir):
+        history_file = tmpdir.join('command_history')
+        commands = ["cmd1", "cmd2", "cmd3"]
+        with open(history_file, 'w') as f:
             f.write("\n".join(commands))
 
         ch = command_history.CommandHistory()
+        ch.VACUUM_SIZE = 4
         with taddons.context(ch) as tctx:
             tctx.options.confdir = str(tmpdir)
             assert ch.history == commands
+            ch.add_command("cmd4")
+            ch.done()
+
+        with open(history_file, "r") as f:
+            assert f.read() == "cmd3\ncmd4\n"
 
     def test_add_command(self):
         history = command_history.CommandHistory()
diff --git a/test/mitmproxy/net/http/http1/test_read.py b/test/mitmproxy/net/http/http1/test_read.py
index 127f75ba..92c94fe3 100644
--- a/test/mitmproxy/net/http/http1/test_read.py
+++ b/test/mitmproxy/net/http/http1/test_read.py
@@ -161,7 +161,8 @@ def test_connection_close():
 def test_expected_http_body_size():
     # Expect: 100-continue
     assert expected_http_body_size(
-        treq(headers=Headers(expect="100-continue", content_length="42"))
+        treq(headers=Headers(expect="100-continue", content_length="42")),
+        expect_continue_as_0=True
     ) == 0
     # Expect: 100-continue
     assert expected_http_body_size(
diff --git a/test/mitmproxy/test_command_lexer.py b/test/mitmproxy/test_command_lexer.py
index 3f009f88..cdda1085 100644
--- a/test/mitmproxy/test_command_lexer.py
+++ b/test/mitmproxy/test_command_lexer.py
@@ -1,5 +1,7 @@
 import pyparsing
 import pytest
+from hypothesis import given, example
+from hypothesis.strategies import text
 
 from mitmproxy import command_lexer
 
@@ -36,3 +38,14 @@ def test_partial_quoted_string(test_input, valid):
 )
 def test_expr(test_input, expected):
     assert list(command_lexer.expr.parseString(test_input, parseAll=True)) == expected
+
+
+@given(text())
+def test_quote_unquote_cycle(s):
+    assert command_lexer.unquote(command_lexer.quote(s)) == s
+
+
+@given(text())
+@example("'foo\\'")
+def test_unquote_never_fails(s):
+    command_lexer.unquote(s)
