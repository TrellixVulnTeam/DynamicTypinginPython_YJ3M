commit 97484879390e283b186562d69236f975c2353b45
Author: Maximilian Hils <git@maximilianhils.com>
Date:   Tue Mar 20 16:00:23 2018 +0100

    improve transparent mode docs

diff --git a/docs/src/content/howto-transparent.md b/docs/src/content/howto-transparent.md
index 3d99e9dc..00db189e 100644
--- a/docs/src/content/howto-transparent.md
+++ b/docs/src/content/howto-transparent.md
@@ -27,87 +27,50 @@ At the moment, mitmproxy supports transparent proxying on OSX Lion and above,
 and all current flavors of Linux.
 
 
-## Linux fully transparent mode
-
-By default mitmproxy will use its own local IP address for its server-side
-connections. In case this isn't desired, the --spoof-source-address argument can
-be used to use the client's IP address for server-side connections. The
-following config is required for this mode to work:
-
-{{< highlight bash  >}}
-CLIENT_NET=192.168.1.0/24
-TABLE_ID=100
-MARK=1
-
-echo "$TABLE_ID     mitmproxy" >> /etc/iproute2/rt_tables
-iptables -t mangle -A PREROUTING -d $CLIENT_NET -j MARK --set-mark $MARK
-iptables -t nat \
-    -A PREROUTING -p tcp -s $CLIENT_NET \
-    --match multiport --dports 80,443 -j \
-    REDIRECT --to-port 8080
-
-ip rule add fwmark $MARK lookup $TABLE_ID
-ip route add local $CLIENT_NET dev lo table $TABLE_ID
-{{< / highlight >}}
-
-This mode does require root privileges though. There's a wrapper in the examples
-directory called 'mitmproxy_shim.c', which will enable you to use this mode with
-dropped privileges. It can be used as follows:
-
-{{< highlight bash  >}}
-gcc examples/complex/full_transparency_shim.c -o mitmproxy_shim -lcap
-sudo chown root:root mitmproxy_shim
-sudo chmod u+s mitmproxy_shim
-./mitmproxy_shim $(which mitmproxy) --mode transparent --set spoof-source-address
-{{< / highlight >}}
-
-
-
 ## Linux
 
 On Linux, mitmproxy integrates with the iptables redirection mechanism to
 achieve transparent mode.
 
-### 1. [Install the mitmproxy certificate on the test device]({{< relref "concepts-certificates" >}})
-
-### 2. Enable IP forwarding:
+### 1. Enable IP forwarding.
 
 {{< highlight bash  >}}
 sysctl -w net.ipv4.ip_forward=1
 sysctl -w net.ipv6.conf.all.forwarding=1
 {{< / highlight >}}
 
-You may also want to consider enabling this permanently in `/etc/sysctl.conf` or
-newly created `/etc/sysctl.d/mitmproxy.conf`, see
-[here](https://superuser.com/a/625852).
+This makes sure that your machine forwards packets instead of rejecting them.
 
-### 3. If your target machine is on the same physical network and you configured it to use a custom  gateway, disable ICMP redirects:
+If you want to persist this across reboots, you need to adjust your `/etc/sysctl.conf` or
+a newly created `/etc/sysctl.d/mitmproxy.conf` (see [here](https://superuser.com/a/625852)).
+
+### 2. Disable ICMP redirects.
 
 {{< highlight bash  >}}
 sysctl -w net.ipv4.conf.all.send_redirects=0
 {{< / highlight >}}
 
-You may also want to consider enabling this permanently in `/etc/sysctl.conf` or
-a newly created `/etc/sysctl.d/mitmproxy.conf`, see
-[here](https://superuser.com/a/625852).
+If your test device is on the same physical network, your machine shouldn't inform the device that 
+there's a shorter route available by skipping the proxy.
+
+If you want to persist this across reboots, see above.
 
-### 4. Create an iptables ruleset that redirects the desired traffic to the mitmproxy port
+### 3. Create an iptables ruleset that redirects the desired traffic to mitmproxy.
 
 Details will differ according to your setup, but the ruleset should look
 something like this:
 
 {{< highlight bash  >}}
-    iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 8080
-    iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 443 -j REDIRECT --to-port 8080
-    ip6tables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 8080
-    ip6tables -t nat -A PREROUTING -i eth0 -p tcp --dport 443 -j REDIRECT --to-port 8080
+iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 8080
+iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 443 -j REDIRECT --to-port 8080
+ip6tables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 8080
+ip6tables -t nat -A PREROUTING -i eth0 -p tcp --dport 443 -j REDIRECT --to-port 8080
 {{< / highlight >}}
 
-   You may also want to consider enabling this permanently with the
-`iptables-persistent` package, see
-[here](http://www.microhowto.info/howto/make_the_configuration_of_iptables_persistent_on_debian.html).
+If you want to persist this across reboots, you can use the `iptables-persistent` package (see
+[here](http://www.microhowto.info/howto/make_the_configuration_of_iptables_persistent_on_debian.html)).
 
-### 5. Fire up mitmproxy
+### 4. Fire up mitmproxy.
 
 You probably want a command like this:
 
@@ -118,24 +81,22 @@ mitmproxy --mode transparent --showhost
 The `--mode transparent` option turns on transparent mode, and the `--showhost` argument tells
  mitmproxy to use the value of the Host header for URL display.
 
-### 6. Finally, configure your test device
+### 5. Finally, configure your test device.
 
-Set the test device up to use the host on which mitmproxy is running as the
-default gateway. For a detailed walkthrough, have a look at the [tutorial for
-transparently proxying VMs]({{< relref "howto-transparent-vms" >}}).
+Set the test device up to use the host on which mitmproxy is running as the default gateway and 
+[install the mitmproxy certificate authority on the test device]({{< relref "concepts-certificates" >}}).
 
 
-## OpenBSD
 
-### 1  [Install the mitmproxy certificate on the test device]({{< relref "concepts-certificates" >}})
+## OpenBSD
 
-### 2. Enable IP forwarding
+### 1. Enable IP forwarding.
 
 {{< highlight bash  >}}
 sudo sysctl -w net.inet.ip.forwarding=1
 {{< / highlight >}}
 
-### 3. Place the following two lines in **/etc/pf.conf**
+### 2. Place the following two lines in **/etc/pf.conf**.
 
 {{< highlight none  >}}
 mitm_if = "re2"
@@ -146,19 +107,19 @@ These rules tell pf to divert all traffic from `$mitm_if` destined for port 80
 or 443 to the local mitmproxy instance running on port 8080. You should replace
 `$mitm_if` value with the interface on which your test device will appear.
 
-### 4. Enable the pf ruleset and enable it
+### 3. Configure pf with the rules.
 
 {{< highlight bash  >}}
 doas pfctl -f /etc/pf.conf
 {{< / highlight >}}
 
-And now enable it:
+### 4. And now enable it.
 
 {{< highlight bash  >}}
 doas pfctl -e
 {{< / highlight >}}
 
-### 5. Fire up mitmproxy
+### 5. Fire up mitmproxy.
 
 You probably want a command like this:
 
@@ -169,10 +130,11 @@ mitmproxy --mode transparent --showhost
 The `--mode transparent` option turns on transparent mode, and the `--showhost` argument tells
 mitmproxy to use the value of the Host header for URL display.
 
-### 6. Finally, configure your test device
+### 6. Finally, configure your test device.
+
+Set the test device up to use the host on which mitmproxy is running as the default gateway and 
+[install the mitmproxy certificate authority on the test device]({{< relref "concepts-certificates" >}}).
 
-Set the test device up to use the host on which mitmproxy is running as the
-default gateway.
 
 
 {{% note %}}
@@ -195,15 +157,13 @@ packet filter from the OpenBSD project, which mitmproxy uses to implement
 transparent mode on OSX. Note that this means we don't support transparent mode
 for earlier versions of OSX.
 
-### 1. [Install the mitmproxy certificate on the test device]({{< relref "concepts-certificates" >}})
-
-### 2. Enable IP forwarding
+### 1. Enable IP forwarding.
 
 {{< highlight bash  >}}
 sudo sysctl -w net.inet.ip.forwarding=1
 {{< / highlight >}}
 
-### 3. Place the following two lines in a file called, say, **pf.conf**
+### 2. Place the following two lines in a file called, say, **pf.conf**.
 
 
 {{< highlight none  >}}
@@ -214,19 +174,19 @@ These rules tell pf to redirect all traffic destined for port 80 or 443
 to the local mitmproxy instance running on port 8080. You should replace
 `en2` with the interface on which your test device will appear.
 
-### 4. Configure pf with the rules
+### 3. Configure pf with the rules.
 
 {{< highlight bash  >}}
 sudo pfctl -f pf.conf
 {{< / highlight >}}
 
-### 5. And now enable it
+### 4. And now enable it.
 
 {{< highlight bash  >}}
 sudo pfctl -e
 {{< / highlight >}}
 
-### 6. Configure sudoers to allow mitmproxy to access pfctl
+### 5. Configure sudoers to allow mitmproxy to access pfctl.
 
 Edit the file **/etc/sudoers** on your system as root. Add the following line to
 the end of the file:
@@ -240,7 +200,7 @@ state` as root without a password. This only allows inspection of the state
 table, so should not be an undue security risk. If you're special feel free to
 tighten the restriction up to the user running mitmproxy.
 
-### 7. Fire up mitmproxy
+### 6. Fire up mitmproxy.
 
 You probably want a command like this:
 
@@ -251,10 +211,10 @@ mitmproxy --mode transparent --showhost
 The `--mode transparent` flag turns on transparent mode, and the `--showhost` argument tells
 mitmproxy to use the value of the Host header for URL display.
 
-### 6. Finally, configure your test device
+### 7. Finally, configure your test device.
 
-Set the test device up to use the host on which mitmproxy is running as the
-default gateway.
+Set the test device up to use the host on which mitmproxy is running as the default gateway and 
+[install the mitmproxy certificate authority on the test device]({{< relref "concepts-certificates" >}}).
 
 {{% note %}}
 Note that the **rdr** rules in the pf.conf given above only apply to
@@ -267,3 +227,38 @@ flexible to cater for a range of creative possibilities, like
 intercepting traffic emanating from VMs. See the **pf.conf** man page
 for more.
 {{% /note %}}
+
+
+## "Full" transparent mode on Linux
+
+By default mitmproxy will use its own local IP address for its server-side
+connections. In case this isn't desired, the --spoof-source-address argument can
+be used to use the client's IP address for server-side connections. The
+following config is required for this mode to work:
+
+{{< highlight bash  >}}
+CLIENT_NET=192.168.1.0/24
+TABLE_ID=100
+MARK=1
+
+echo "$TABLE_ID     mitmproxy" >> /etc/iproute2/rt_tables
+iptables -t mangle -A PREROUTING -d $CLIENT_NET -j MARK --set-mark $MARK
+iptables -t nat \
+    -A PREROUTING -p tcp -s $CLIENT_NET \
+    --match multiport --dports 80,443 -j \
+    REDIRECT --to-port 8080
+
+ip rule add fwmark $MARK lookup $TABLE_ID
+ip route add local $CLIENT_NET dev lo table $TABLE_ID
+{{< / highlight >}}
+
+This mode does require root privileges though. There's a wrapper in the examples
+directory called 'mitmproxy_shim.c', which will enable you to use this mode with
+dropped privileges. It can be used as follows:
+
+{{< highlight bash  >}}
+gcc examples/complex/full_transparency_shim.c -o mitmproxy_shim -lcap
+sudo chown root:root mitmproxy_shim
+sudo chmod u+s mitmproxy_shim
+./mitmproxy_shim $(which mitmproxy) --mode transparent --set spoof-source-address
+{{< / highlight >}}
