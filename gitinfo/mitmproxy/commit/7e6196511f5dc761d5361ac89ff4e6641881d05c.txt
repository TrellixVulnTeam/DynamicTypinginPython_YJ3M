commit 7e6196511f5dc761d5361ac89ff4e6641881d05c
Author: Aldo Cortesi <aldo@nullcube.com>
Date:   Wed Feb 8 14:07:17 2012 +1300

    Editable fields for KVEditor.

diff --git a/libmproxy/console/__init__.py b/libmproxy/console/__init__.py
index b578f924..6fc76160 100644
--- a/libmproxy/console/__init__.py
+++ b/libmproxy/console/__init__.py
@@ -28,19 +28,6 @@ class Stop(Exception): pass
 
 #begin nocover
 
-class EventListBox(urwid.ListBox):
-    def __init__(self, master):
-        self.master = master
-        urwid.ListBox.__init__(self, master.eventlist)
-
-    def keypress(self, size, key):
-        key = common.shortcuts(key)
-        if key == "C":
-            self.master.clear_events()
-            key = None
-        return urwid.ListBox.keypress(self, size, key)
-
-
 
 class _PathCompleter:
     def __init__(self, _testing=False):
@@ -324,46 +311,6 @@ class Options(object):
 
 #begin nocover
 
-class BodyPile(urwid.Pile):
-    def __init__(self, master):
-        h = urwid.Text("Event log")
-        h = urwid.Padding(h, align="left", width=("relative", 100))
-
-        self.inactive_header = urwid.AttrWrap(h, "inactive_heading")
-        self.active_header = urwid.AttrWrap(h, "heading")
-
-        urwid.Pile.__init__(
-            self,
-            [
-                connlist.ConnectionListBox(master),
-                urwid.Frame(EventListBox(master), header = self.inactive_header)
-            ]
-        )
-        self.master = master
-        self.focus = 0
-
-    def keypress(self, size, key):
-        if key == "tab":
-            self.focus = (self.focus + 1)%len(self.widget_list)
-            self.set_focus(self.focus)
-            if self.focus == 1:
-                self.widget_list[1].header = self.active_header
-            else:
-                self.widget_list[1].header = self.inactive_header
-            key = None
-        elif key == "v":
-            self.master.toggle_eventlog()
-            key = None
-
-        # This is essentially a copypasta from urwid.Pile's keypress handler.
-        # So much for "closed for modification, but open for extension".
-        item_rows = None
-        if len(size)==2:
-            item_rows = self.get_item_rows( size, focus=True )
-        i = self.widget_list.index(self.focus_item)
-        tsize = self.get_item_size(size,i,True,item_rows)
-        return self.focus_item.keypress( tsize, key )
-
 
 class ConsoleMaster(flow.FlowMaster):
     palette = []
@@ -609,7 +556,7 @@ class ConsoleMaster(flow.FlowMaster):
             self.ui.clear()
         self.focus_current()
         if self.eventlog:
-            self.body = BodyPile(self)
+            self.body = connlist.BodyPile(self)
         else:
             self.body = connlist.ConnectionListBox(self)
         self.statusbar = StatusBar(self, self.footer_text_default)
@@ -624,25 +571,6 @@ class ConsoleMaster(flow.FlowMaster):
         self.currentflow = flow
         self.make_view()
 
-    def _view_nextprev_flow(self, np, flow):
-        try:
-            idx = self.state.view.index(flow)
-        except IndexError:
-            return
-        if np == "next":
-            new_flow, new_idx = self.state.get_next(idx)
-        else:
-            new_flow, new_idx = self.state.get_prev(idx)
-        if new_idx is None:
-            return
-        self.view_flow(new_flow)
-
-    def view_next_flow(self, flow):
-        return self._view_nextprev_flow("next", flow)
-
-    def view_prev_flow(self, flow):
-        return self._view_nextprev_flow("prev", flow)
-
     def _write_flows(self, path, flows):
         self.state.last_saveload = path
         if not path:
diff --git a/libmproxy/console/connlist.py b/libmproxy/console/connlist.py
index 3fdfb0ed..319963e8 100644
--- a/libmproxy/console/connlist.py
+++ b/libmproxy/console/connlist.py
@@ -1,6 +1,61 @@
 import urwid
 import common
 
+class EventListBox(urwid.ListBox):
+    def __init__(self, master):
+        self.master = master
+        urwid.ListBox.__init__(self, master.eventlist)
+
+    def keypress(self, size, key):
+        key = common.shortcuts(key)
+        if key == "C":
+            self.master.clear_events()
+            key = None
+        return urwid.ListBox.keypress(self, size, key)
+
+
+class BodyPile(urwid.Pile):
+    def __init__(self, master):
+        h = urwid.Text("Event log")
+        h = urwid.Padding(h, align="left", width=("relative", 100))
+
+        self.inactive_header = urwid.AttrWrap(h, "inactive_heading")
+        self.active_header = urwid.AttrWrap(h, "heading")
+
+        urwid.Pile.__init__(
+            self,
+            [
+                ConnectionListBox(master),
+                urwid.Frame(EventListBox(master), header = self.inactive_header)
+            ]
+        )
+        self.master = master
+        self.focus = 0
+
+    def keypress(self, size, key):
+        if key == "tab":
+            self.focus = (self.focus + 1)%len(self.widget_list)
+            self.set_focus(self.focus)
+            if self.focus == 1:
+                self.widget_list[1].header = self.active_header
+            else:
+                self.widget_list[1].header = self.inactive_header
+            key = None
+        elif key == "v":
+            self.master.toggle_eventlog()
+            key = None
+
+        # This is essentially a copypasta from urwid.Pile's keypress handler.
+        # So much for "closed for modification, but open for extension".
+        item_rows = None
+        if len(size)==2:
+            item_rows = self.get_item_rows( size, focus=True )
+        i = self.widget_list.index(self.focus_item)
+        tsize = self.get_item_size(size,i,True,item_rows)
+        return self.focus_item.keypress( tsize, key )
+
+
+
 class ConnectionItem(common.WWrap):
     def __init__(self, master, state, flow, focus):
         self.master, self.state, self.flow = master, state, flow
diff --git a/libmproxy/console/connview.py b/libmproxy/console/connview.py
index 1e9d0c60..f4f6c662 100644
--- a/libmproxy/console/connview.py
+++ b/libmproxy/console/connview.py
@@ -370,9 +370,28 @@ class ConnectionView(common.WWrap):
             self.master.prompt_edit("Message", conn.msg, self.set_resp_msg)
         self.master.refresh_connection(self.flow)
 
+    def _view_nextprev_flow(self, np, flow):
+        try:
+            idx = self.state.view.index(flow)
+        except IndexError:
+            return
+        if np == "next":
+            new_flow, new_idx = self.state.get_next(idx)
+        else:
+            new_flow, new_idx = self.state.get_prev(idx)
+        if new_idx is None:
+            return
+        self.master.view_flow(new_flow)
+
+    def view_next_flow(self, flow):
+        return self._view_nextprev_flow("next", flow)
+
+    def view_prev_flow(self, flow):
+        return self._view_nextprev_flow("prev", flow)
+
     def keypress(self, size, key):
         if key == " ":
-            self.master.view_next_flow(self.flow)
+            self.view_next_flow(self.flow)
             return key
 
         key = common.shortcuts(key)
@@ -423,7 +442,7 @@ class ConnectionView(common.WWrap):
                 )
             key = None
         elif key == "p":
-            self.master.view_prev_flow(self.flow)
+            self.view_prev_flow(self.flow)
         elif key == "r":
             r = self.master.replay_request(self.flow)
             if r:
diff --git a/libmproxy/console/kveditor.py b/libmproxy/console/kveditor.py
index 7f2d965c..d9aaadce 100644
--- a/libmproxy/console/kveditor.py
+++ b/libmproxy/console/kveditor.py
@@ -1,70 +1,147 @@
+import time
 import urwid
 import common
 
 class SText(common.WWrap):
-    def __init__(self, txt):
+    def __init__(self, txt, focused):
         w = urwid.Text(txt, wrap="any")
-        w = urwid.AttrWrap(w, "editfield")
+        if focused:
+            w = urwid.AttrWrap(w, "editfield")
         common.WWrap.__init__(self, w)
 
     def keypress(self, size, key):
-        raise ValueError, key
-        time.sleep(0.5)
         return key
 
     def selectable(self):
         return True
 
 
+class SEdit(common.WWrap):
+    def __init__(self, txt):
+        w = urwid.Edit(txt, wrap="any")
+        common.WWrap.__init__(self, w)
+
+    def selectable(self):
+        return True
+
+
+class KVItem(common.WWrap):
+    def __init__(self, focused, editing, maxk, k, v):
+        self.focused, self.editing = focused, editing
+        if focused == 0 and editing:
+            self.kf = SEdit(k)
+        else:
+            self.kf = SText(k, True if focused == 0 else False)
+
+        if focused == 1 and editing:
+            self.vf = SEdit(v)
+        else:
+            self.vf = SText(v, True if focused == 1 else False)
+
+        w = urwid.Columns(
+            [
+                ("fixed", maxk + 2, self.kf),
+                self.vf
+            ],
+            dividechars = 2
+        )
+        if focused is not None:
+            w.set_focus_column(focused)
+        common.WWrap.__init__(self, w)
+
+    def keypress(self, s, k):
+        if self.editing:
+            if self.focused == 0:
+                return self.kf.keypress(s, k)
+            else:
+                return self.vf.keypress(s, k)
+        return k
+
+    def selectable(self):
+        return True
+
+
+class KVWalker(urwid.ListWalker):
+    def __init__(self, lst):
+        self.lst = lst
+        self.maxk = max(len(v[0]) for v in lst)
+        self.focus = 0
+        self.focus_col = 0
+        self.editing = False
+
+    def edit(self):
+        self.editing = KVItem(self.focus_col, True, self.maxk, *self.lst[self.focus])
+        self._modified()
+
+    def left(self):
+        self.focus_col = 0
+        self._modified()
+
+    def right(self):
+        self.focus_col = 1
+        self._modified()
+
+    def tab_next(self):
+        if self.focus_col == 0:
+            self.focus_col = 1
+        elif self.focus != len(self.lst)-1:
+            self.focus_col = 0
+            self.focus += 1
+        self._modified()
+
+    def get_focus(self):
+        if self.editing:
+            return self.editing, self.focus
+        else:
+            return KVItem(self.focus_col, False, self.maxk, *self.lst[self.focus]), self.focus
+
+    def set_focus(self, focus):
+        self.focus = focus
+
+    def get_next(self, pos):
+        if pos+1 >= len(self.lst):
+            return None, None
+        return KVItem(None, False, self.maxk, *self.lst[pos+1]), pos+1
+
+    def get_prev(self, pos):
+        if pos-1 < 0:
+            return None, None
+        return KVItem(None, False, self.maxk, *self.lst[pos-1]), pos-1
+
+
+class KVListBox(urwid.ListBox):
+    def __init__(self, lw):
+        urwid.ListBox.__init__(self, lw)
+
+
 class KVEditor(common.WWrap):
     def __init__(self, master, title, value, callback):
         self.master, self.title, self.value, self.callback = master, title, value, callback
         p = urwid.Text(title)
         p = urwid.Padding(p, align="left", width=("relative", 100))
         p = urwid.AttrWrap(p, "heading")
-        maxk = max(len(v[0]) for v in value)
-        parts = []
-        for k, v in value:
-            parts.append(
-                urwid.Columns(
-                    [
-                        (
-                            "fixed",
-                            maxk + 2,
-                            SText(k)
-                        ),
-                        SText(v)
-                    ],
-                    dividechars = 2
-                )
-            )
-            parts.append(urwid.Text(" "))
-        self.lb = urwid.ListBox(parts)
+        self.walker = KVWalker(self.value)
+        self.lb = KVListBox(self.walker)
         self.w = urwid.Frame(self.lb, header = p)
         self.master.statusbar.update("")
 
     def keypress(self, size, key):
-        if key == "q":
-            self.master.pop_view()
+        if self.walker.editing:
+            self.w.keypress(size, key)
             return None
-        if key in ("tab", "enter"):
-            cw = self.lb.get_focus()[0]
-            col = cw.get_focus_column()
-            if col == 0:
-                cw.set_focus_column(1)
+        else:
+            key = common.shortcuts(key)
+            if key == "q":
+                self.master.pop_view()
+            elif key == "h":
+                self.walker.left()
+            elif key == "l":
+                self.walker.right()
+            elif key == "tab":
+                self.walker.tab_next()
+            elif key == "enter":
+                self.walker.edit()
+            elif key == "esc":
+                self.master.view_connlist()
             else:
-                self.lb._keypress_down(size)
-                cw = self.lb.get_focus()[0]
-                cw.set_focus_column(0)
-            return None
-        elif key == "ctrl e":
-            # Editor
-            pass
-        elif key == "ctrl r":
-            # Revert
-            pass
-        elif key == "esc":
-            self.master.view_connlist()
-            return
-        return self.w.keypress(size, key)
-
+                return self.w.keypress(size, key)
