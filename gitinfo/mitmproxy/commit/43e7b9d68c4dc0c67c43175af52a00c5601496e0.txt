commit 43e7b9d68c4dc0c67c43175af52a00c5601496e0
Author: Aldo Cortesi <aldo@corte.si>
Date:   Sun Mar 19 13:39:28 2017 +1300

    options: choices for content views and tighten console order spec
    
    Also clean up some leftovers from filter option name change.

diff --git a/mitmproxy/addons/view.py b/mitmproxy/addons/view.py
index 2218327c..e3975dc4 100644
--- a/mitmproxy/addons/view.py
+++ b/mitmproxy/addons/view.py
@@ -300,13 +300,13 @@ class View(collections.Sequence):
 
     # Event handlers
     def configure(self, opts, updated):
-        if "filter" in updated:
+        if "view_filter" in updated:
             filt = None
-            if opts.filter:
-                filt = flowfilter.parse(opts.filter)
+            if opts.view_filter:
+                filt = flowfilter.parse(opts.view_filter)
                 if not filt:
                     raise exceptions.OptionsError(
-                        "Invalid interception filter: %s" % opts.filter
+                        "Invalid interception filter: %s" % opts.view_filter
                     )
             self.set_filter(filt)
         if "console_order" in updated:
diff --git a/mitmproxy/options.py b/mitmproxy/options.py
index fa89b807..c0e3113e 100644
--- a/mitmproxy/options.py
+++ b/mitmproxy/options.py
@@ -1,6 +1,7 @@
 from typing import Optional, Sequence
 
 from mitmproxy import optmanager
+from mitmproxy import contentviews
 from mitmproxy.net import tcp
 
 # We redefine these here for now to avoid importing Urwid-related guff on
@@ -154,7 +155,8 @@ class Options(optmanager.OptManager):
         )
         self.add_option(
             "default_contentview", str, "auto",
-            "The default content view mode."
+            "The default content view mode.",
+            choices = [i.name for i in contentviews.views]
         )
         self.add_option(
             "streamfile", Optional[str], None,
@@ -390,7 +392,7 @@ class Options(optmanager.OptManager):
             "Console mouse interaction."
         )
         self.add_option(
-            "console_order", Optional[str], None,
+            "console_order", str, "time",
             "Flow sort order.",
             choices=view_orders,
         )
diff --git a/mitmproxy/tools/cmdline.py b/mitmproxy/tools/cmdline.py
index edb44669..fbdbce52 100644
--- a/mitmproxy/tools/cmdline.py
+++ b/mitmproxy/tools/cmdline.py
@@ -109,7 +109,7 @@ def mitmproxy(opts):
         "See help in mitmproxy for filter expression syntax."
     )
     opts.make_parser(group, "intercept", metavar="FILTER")
-    opts.make_parser(group, "filter", metavar="FILTER")
+    opts.make_parser(group, "view_filter", metavar="FILTER")
     return parser
 
 
diff --git a/mitmproxy/tools/console/statusbar.py b/mitmproxy/tools/console/statusbar.py
index 37074dc2..c7132864 100644
--- a/mitmproxy/tools/console/statusbar.py
+++ b/mitmproxy/tools/console/statusbar.py
@@ -207,7 +207,7 @@ class StatusBar(urwid.WidgetWrap):
             r.append("[")
             r.append(("heading_key", "M"))
             r.append(":%s]" % self.master.options.default_contentview)
-        if self.master.options.console_order:
+        if self.master.options.has_changed("console_order"):
             r.append("[")
             r.append(("heading_key", "o"))
             r.append(":%s]" % self.master.options.console_order)
diff --git a/test/mitmproxy/addons/test_view.py b/test/mitmproxy/addons/test_view.py
index b7842314..7fa3819e 100644
--- a/test/mitmproxy/addons/test_view.py
+++ b/test/mitmproxy/addons/test_view.py
@@ -264,7 +264,7 @@ def test_signals():
 def test_focus_follow():
     v = view.View()
     with taddons.context(options=options.Options()) as tctx:
-        tctx.configure(v, console_focus_follow=True, filter="~m get")
+        tctx.configure(v, console_focus_follow=True, view_filter="~m get")
 
         v.add(tft(start=5))
         assert v.focus.index == 0
@@ -378,9 +378,9 @@ def test_settings():
 def test_configure():
     v = view.View()
     with taddons.context(options=options.Options()) as tctx:
-        tctx.configure(v, filter="~q")
+        tctx.configure(v, view_filter="~q")
         with pytest.raises(Exception, match="Invalid interception filter"):
-            tctx.configure(v, filter="~~")
+            tctx.configure(v, view_filter="~~")
 
         tctx.configure(v, console_order="method")
         with pytest.raises(Exception, match="Unknown flow order"):
@@ -388,7 +388,5 @@ def test_configure():
 
         tctx.configure(v, console_order_reversed=True)
 
-        tctx.configure(v, console_order=None)
-
         tctx.configure(v, console_focus_follow=True)
         assert v.focus_follow
