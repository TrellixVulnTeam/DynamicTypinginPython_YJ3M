commit 54170ee6572e8ba38b94a4e51f3c8e832e5f9ac7
Author: Aldo Cortesi <aldo@nullcube.com>
Date:   Sat Mar 31 19:27:26 2018 +1300

    asyncio: start a test loop for unit tests
    
    Also move signal handling out of master. These only work in the main thread,
    and properly belong in main.py.

diff --git a/mitmproxy/controller.py b/mitmproxy/controller.py
index 834c0040..97fb0f51 100644
--- a/mitmproxy/controller.py
+++ b/mitmproxy/controller.py
@@ -22,7 +22,7 @@ class Channel:
         """
         m.reply = Reply(m)
         asyncio.run_coroutine_threadsafe(self._q.put((mtype, m)), self.loop)
-        g = m.reply._q.get()
+        g = m.reply.q.get()
         if g == exceptions.Kill:
             raise exceptions.Kill()
         return g
diff --git a/mitmproxy/master.py b/mitmproxy/master.py
index 31849a88..a23be0a7 100644
--- a/mitmproxy/master.py
+++ b/mitmproxy/master.py
@@ -36,9 +36,6 @@ class Master:
         The master handles mitmproxy's main event loop.
     """
     def __init__(self, opts):
-        loop = asyncio.get_event_loop()
-        for signame in ('SIGINT', 'SIGTERM'):
-            loop.add_signal_handler(getattr(signal, signame), self.shutdown)
         self.event_queue = asyncio.Queue()
 
         self.options = opts or options.Options()  # type: options.Options
diff --git a/mitmproxy/proxy/protocol/http_replay.py b/mitmproxy/proxy/protocol/http_replay.py
index bd3ecb98..8682f50e 100644
--- a/mitmproxy/proxy/protocol/http_replay.py
+++ b/mitmproxy/proxy/protocol/http_replay.py
@@ -38,7 +38,7 @@ class RequestReplayThread(basethread.BaseThread):
         self.f = f
         f.live = True
         if event_queue:
-            self.channel = controller.Channel(loop, event_queue, should_exit)
+            self.channel = controller.Channel(loop, event_queue)
         else:
             self.channel = None
         super().__init__(
diff --git a/mitmproxy/tools/main.py b/mitmproxy/tools/main.py
index eb8bad40..53c236bb 100644
--- a/mitmproxy/tools/main.py
+++ b/mitmproxy/tools/main.py
@@ -1,5 +1,6 @@
 from __future__ import print_function  # this is here for the version check to work on Python 2.
 
+import asyncio
 import sys
 
 if sys.version_info < (3, 6):
@@ -118,7 +119,9 @@ def run(
         def cleankill(*args, **kwargs):
             master.shutdown()
         signal.signal(signal.SIGTERM, cleankill)
-
+        loop = asyncio.get_event_loop()
+        for signame in ('SIGINT', 'SIGTERM'):
+            loop.add_signal_handler(getattr(signal, signame), master.shutdown)
         master.run()
     except exceptions.OptionsError as e:
         print("%s: %s" % (sys.argv[0], e), file=sys.stderr)
diff --git a/test/mitmproxy/test_fuzzing.py b/test/mitmproxy/test_fuzzing.py
index 905ba1cd..57d0ca55 100644
--- a/test/mitmproxy/test_fuzzing.py
+++ b/test/mitmproxy/test_fuzzing.py
@@ -25,14 +25,4 @@ class TestFuzzy(tservers.HTTPProxyTest):
         p = self.pathoc()
         with p.connect():
             resp = p.request(req % self.server.port)
-        assert resp.status_code == 400
-
-    # def test_invalid_upstream(self):
-    #     req = r"get:'http://localhost:%s/p/200:i10,\x27+\x27'"
-    #     p = self.pathoc()
-    #     assert p.request(req % self.server.port).status_code == 502
-
-    # def test_upstream_disconnect(self):
-    #     req = r'200:d0'
-    #     p = self.pathod(req)
-    #     assert p.status_code == 502
+        assert resp.status_code == 400
\ No newline at end of file
diff --git a/test/mitmproxy/tservers.py b/test/mitmproxy/tservers.py
index 7be31a28..9e6cef97 100644
--- a/test/mitmproxy/tservers.py
+++ b/test/mitmproxy/tservers.py
@@ -4,6 +4,7 @@ import tempfile
 import sys
 import time
 from unittest import mock
+import asyncio
 
 import mitmproxy.platform
 from mitmproxy.addons import core
@@ -105,6 +106,7 @@ class ProxyThread(threading.Thread):
         self.tmaster.shutdown()
 
     def run(self):
+        asyncio.set_event_loop(asyncio.new_event_loop())
         self.tmaster = self.masterclass(self.options)
         self.tmaster.addons.add(core.Core())
         self.name = "ProxyThread (%s:%s)" % (
