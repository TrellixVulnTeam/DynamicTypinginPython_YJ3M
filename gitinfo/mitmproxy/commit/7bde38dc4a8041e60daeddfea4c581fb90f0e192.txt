commit 7bde38dc4a8041e60daeddfea4c581fb90f0e192
Author: Thomas Kriechbaumer <thomas@kriechbaumer.name>
Date:   Sun Jun 19 12:00:37 2016 +0200

    py3++

diff --git a/mitmproxy/controller.py b/mitmproxy/controller.py
index 898be3bc..a170d868 100644
--- a/mitmproxy/controller.py
+++ b/mitmproxy/controller.py
@@ -6,7 +6,8 @@ import threading
 from six.moves import queue
 
 from netlib import basethread
-from mitmproxy import exceptions
+
+from . import exceptions
 
 
 Events = frozenset([
@@ -76,9 +77,9 @@ class Master(object):
                 if mtype not in Events:
                     raise exceptions.ControlException("Unknown event %s" % repr(mtype))
                 handle_func = getattr(self, mtype)
-                if not hasattr(handle_func, "func_dict"):
+                if not hasattr(handle_func, "__dict__"):
                     raise exceptions.ControlException("Handler %s not a function" % mtype)
-                if not handle_func.func_dict.get("__handler"):
+                if not handle_func.__dict__.get("__handler"):
                     raise exceptions.ControlException(
                         "Handler function %s is not decorated with controller.handler" % (
                             handle_func
@@ -177,7 +178,7 @@ def handler(f):
             message.reply.ack()
         return ret
     # Mark this function as a handler wrapper
-    wrapper.func_dict["__handler"] = True
+    wrapper.__dict__["__handler"] = True
     return wrapper
 
 
diff --git a/mitmproxy/platform/osx.py b/mitmproxy/platform/osx.py
index b16c1861..b5dce793 100644
--- a/mitmproxy/platform/osx.py
+++ b/mitmproxy/platform/osx.py
@@ -1,6 +1,6 @@
 import subprocess
 
-import pf
+from . import pf
 
 """
     Doing this the "right" way by using DIOCNATLOOK on the pf device turns out
diff --git a/mitmproxy/tnetstring.py b/mitmproxy/tnetstring.py
index 6b1c117a..f40e8ad8 100644
--- a/mitmproxy/tnetstring.py
+++ b/mitmproxy/tnetstring.py
@@ -130,7 +130,7 @@ def _rdumpq(q, size, value, encoding=None):
     if value is False:
         write("5:false!")
         return size + 8
-    if isinstance(value, (int, long)):
+    if isinstance(value, six.integer_types):
         data = str(value)
         ldata = len(data)
         span = str(ldata)
@@ -208,7 +208,7 @@ def _gdumps(value, encoding):
         yield "4:true!"
     elif value is False:
         yield "5:false!"
-    elif isinstance(value, (int, long)):
+    elif isinstance(value, six.integer_types):
         data = str(value)
         yield str(len(data))
         yield ":"
diff --git a/test/mitmproxy/mastertest.py b/test/mitmproxy/mastertest.py
index 4d04f337..9e726a32 100644
--- a/test/mitmproxy/mastertest.py
+++ b/test/mitmproxy/mastertest.py
@@ -1,7 +1,8 @@
-import tutils
-import netlib.tutils
 import mock
 
+from . import tutils
+import netlib.tutils
+
 from mitmproxy import flow, proxy, models
 
 
diff --git a/test/mitmproxy/test_contentview.py b/test/mitmproxy/test_contentview.py
index 667a36fe..48825bc2 100644
--- a/test/mitmproxy/test_contentview.py
+++ b/test/mitmproxy/test_contentview.py
@@ -138,16 +138,16 @@ class TestContentView:
     def test_view_image(self):
         v = cv.ViewImage()
         p = tutils.test_data.path("data/image.png")
-        assert v(file(p, "rb").read())
+        assert v(open(p, "rb").read())
 
         p = tutils.test_data.path("data/image.gif")
-        assert v(file(p, "rb").read())
+        assert v(open(p, "rb").read())
 
         p = tutils.test_data.path("data/image-err1.jpg")
-        assert v(file(p, "rb").read())
+        assert v(open(p, "rb").read())
 
         p = tutils.test_data.path("data/image.ico")
-        assert v(file(p, "rb").read())
+        assert v(open(p, "rb").read())
 
         assert not v("flibble")
 
@@ -252,22 +252,22 @@ if pyamf:
         v = cv.ViewAMF()
 
         p = tutils.test_data.path("data/amf01")
-        assert v(file(p, "rb").read())
+        assert v(open(p, "rb").read())
 
         p = tutils.test_data.path("data/amf02")
-        assert v(file(p, "rb").read())
+        assert v(open(p, "rb").read())
 
     def test_view_amf_response():
         v = cv.ViewAMF()
         p = tutils.test_data.path("data/amf03")
-        assert v(file(p, "rb").read())
+        assert v(open(p, "rb").read())
 
 if cv.ViewProtobuf.is_available():
     def test_view_protobuf_request():
         v = cv.ViewProtobuf()
 
         p = tutils.test_data.path("data/protobuf01")
-        content_type, output = v(file(p, "rb").read())
+        content_type, output = v(open(p, "rb").read())
         assert content_type == "Protobuf"
         assert output.next()[0][1] == '1: "3bbc333c-e61c-433b-819a-0b9a8cc103b8"'
 
