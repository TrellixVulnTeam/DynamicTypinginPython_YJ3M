commit 0a124793998a4ee52818c4d004ce213e578e3fea
Author: Martin Plattner <git@mplattner.at>
Date:   Tue Jun 30 16:20:06 2020 +0200

    modify addons: cleanup redundant code and error handling

diff --git a/mitmproxy/addons/modifybody.py b/mitmproxy/addons/modifybody.py
index c44d755a..77bc0c93 100644
--- a/mitmproxy/addons/modifybody.py
+++ b/mitmproxy/addons/modifybody.py
@@ -5,44 +5,7 @@ import typing
 from mitmproxy import exceptions
 from mitmproxy import flowfilter
 from mitmproxy import ctx
-from mitmproxy.utils import strutils
-
-
-def parse_modify_body(s):
-    """
-        Returns a (flow_filter, regex, replacement) tuple.
-
-        The general form for a modify_body hook is as follows:
-
-            [/flow_filter]/regex/replacement
-
-        The first character specifies the separator. Example:
-
-            :~q:foo:bar
-
-        If only two clauses are specified, the pattern is set to match
-        universally (i.e. ".*"). Example:
-
-            /foo/bar
-
-        Clauses are parsed from left to right. Extra separators are taken to be
-        part of the final clause. For instance, the replacement clause below is
-        "foo/bar/":
-
-            /one/two/foo/bar/
-    """
-    sep, rem = s[0], s[1:]
-    parts = rem.split(sep, 2)
-    if len(parts) == 2:
-        flow_filter = ".*"
-        regex, repl = parts
-    elif len(parts) == 3:
-        flow_filter, regex, repl = parts
-    else:
-        raise exceptions.OptionsError(
-            "Invalid modify_body specifier: %s" % s
-        )
-    return flow_filter, regex, repl
+from mitmproxy.addons.modifyheaders import parse_modify_hook
 
 
 class ModifyBody:
@@ -70,7 +33,12 @@ class ModifyBody:
         if "modify_body" in updated:
             lst = []
             for rep in ctx.options.modify_body:
-                flow_filter_pattern, regex, repl = parse_modify_body(rep)
+                try:
+                    flow_filter_pattern, regex, repl = parse_modify_hook(rep)
+                except ValueError as e:
+                    raise exceptions.OptionsError(
+                        "Invalid modify_body option: %s" % rep
+                    ) from e
 
                 flow_filter = flowfilter.parse(flow_filter_pattern)
                 if not flow_filter:
@@ -84,7 +52,7 @@ class ModifyBody:
                     raise exceptions.OptionsError(
                         "Invalid regular expression: %s - %s" % (regex, str(e))
                     )
-                if repl.startswith("@") and not os.path.isfile(repl[1:]):
+                if repl.startswith(b"@") and not os.path.isfile(repl[1:]):
                     raise exceptions.OptionsError(
                         "Invalid file path: {}".format(repl[1:])
                     )
@@ -115,7 +83,7 @@ class ModifyBody:
         Returns:
             The number of replacements made.
         """
-        if repl.startswith("@"):
+        if repl.startswith(b"@"):
             repl = os.path.expanduser(repl[1:])
             try:
                 with open(repl, "rb") as f:
@@ -124,10 +92,6 @@ class ModifyBody:
                 ctx.log.warn("Could not read replacement file: %s" % repl)
                 return
 
-        if isinstance(search, str):
-            search = strutils.escaped_str_to_bytes(search)
-        if isinstance(repl, str):
-            repl = strutils.escaped_str_to_bytes(repl)
         replacements = 0
         if obj.content:
             obj.content, replacements = re.subn(search, repl, obj.content, flags=re.DOTALL)
diff --git a/mitmproxy/addons/modifyheaders.py b/mitmproxy/addons/modifyheaders.py
index d5fed9b1..ca694fea 100644
--- a/mitmproxy/addons/modifyheaders.py
+++ b/mitmproxy/addons/modifyheaders.py
@@ -2,10 +2,11 @@ import typing
 
 from mitmproxy import exceptions
 from mitmproxy import flowfilter
+from mitmproxy.utils import strutils
 from mitmproxy import ctx
 
 
-def parse_modify_headers(s):
+def parse_modify_hook(s):
     """
         Returns a (flow_filter, header_name, header_value) tuple.
 
@@ -36,9 +37,15 @@ def parse_modify_headers(s):
     elif len(parts) == 3:
         flow_filter, header_name, header_value = parts
     else:
-        raise exceptions.OptionsError(
-            "Invalid modify_headers specifier: %s" % s
+        raise ValueError(
+            "Invalid modify_* specifier: %s" % s
         )
+
+    if isinstance(header_name, str):
+        header_name = strutils.escaped_str_to_bytes(header_name)
+    if isinstance(header_value, str):
+        header_value = strutils.escaped_str_to_bytes(header_value)
+
     return flow_filter, header_name, header_value
 
 
@@ -59,14 +66,19 @@ class ModifyHeaders:
         if "modify_headers" in updated:
             self.lst = []
             for shead in ctx.options.modify_headers:
-                flow_pattern, header, value = parse_modify_headers(shead)
+                try:
+                    flow_filter_pattern, header, value = parse_modify_hook(shead)
+                except ValueError as e:
+                    raise exceptions.OptionsError(
+                        "Invalid modify_headers option: %s" % shead
+                    ) from e
 
-                flow_filter = flowfilter.parse(flow_pattern)
+                flow_filter = flowfilter.parse(flow_filter_pattern)
                 if not flow_filter:
                     raise exceptions.OptionsError(
-                        "Invalid modify_headers flow filter %s" % flow_pattern
+                        "Invalid modify_headers flow filter %s" % flow_filter_pattern
                     )
-                self.lst.append((flow_pattern, flow_filter, header, value))
+                self.lst.append((flow_filter_pattern, flow_filter, header, value))
 
     def run(self, f, hdrs):
         for _, flow_filter, header, value in self.lst:
diff --git a/test/mitmproxy/addons/test_modifybody.py b/test/mitmproxy/addons/test_modifybody.py
index f701a0d8..0e7f4c72 100644
--- a/test/mitmproxy/addons/test_modifybody.py
+++ b/test/mitmproxy/addons/test_modifybody.py
@@ -1,25 +1,28 @@
 import pytest
 
 from mitmproxy.addons import modifybody
+from mitmproxy.addons.modifyheaders import parse_modify_hook
 from mitmproxy.test import taddons
 from mitmproxy.test import tflow
 
 
 class TestModifyBody:
-    def test_parse_modify_body(self):
-        x = modifybody.parse_modify_body("/foo/bar/voing")
-        assert x == ("foo", "bar", "voing")
-        x = modifybody.parse_modify_body("/foo/bar/vo/ing/")
-        assert x == ("foo", "bar", "vo/ing/")
-        x = modifybody.parse_modify_body("/bar/voing")
-        assert x == (".*", "bar", "voing")
-        with pytest.raises(Exception, match="Invalid modify_body specifier"):
-            modifybody.parse_modify_body("/")
+    def test_parse_modify_hook(self):
+        x = parse_modify_hook("/foo/bar/voing")
+        assert x == ("foo", b"bar", b"voing")
+        x = parse_modify_hook("/foo/bar/vo/ing/")
+        assert x == ("foo", b"bar", b"vo/ing/")
+        x = parse_modify_hook("/bar/voing")
+        assert x == (".*", b"bar", b"voing")
+        with pytest.raises(Exception, match="Invalid modify_\\* specifier"):
+            parse_modify_hook("/")
 
     def test_configure(self):
         mb = modifybody.ModifyBody()
         with taddons.context(mb) as tctx:
             tctx.configure(mb, modify_body=["one/two/three"])
+            with pytest.raises(Exception, match="Invalid modify_body option"):
+                tctx.configure(mb, modify_body = ["/"])
             with pytest.raises(Exception, match="Invalid modify_body flow filter"):
                 tctx.configure(mb, modify_body=["/~b/two/three"])
             with pytest.raises(Exception, match="Invalid regular expression"):
diff --git a/test/mitmproxy/addons/test_modifyheaders.py b/test/mitmproxy/addons/test_modifyheaders.py
index 0896ccf4..88bef624 100644
--- a/test/mitmproxy/addons/test_modifyheaders.py
+++ b/test/mitmproxy/addons/test_modifyheaders.py
@@ -7,19 +7,21 @@ from mitmproxy.addons import modifyheaders
 
 
 class TestModifyHeaders:
-    def test_parse_modifyheaders(self):
-        x = modifyheaders.parse_modify_headers("/foo/bar/voing")
-        assert x == ("foo", "bar", "voing")
-        x = modifyheaders.parse_modify_headers("/foo/bar/vo/ing/")
-        assert x == ("foo", "bar", "vo/ing/")
-        x = modifyheaders.parse_modify_headers("/bar/voing")
-        assert x == (".*", "bar", "voing")
-        with pytest.raises(Exception, match="Invalid modify_headers specifier"):
-            modifyheaders.parse_modify_headers("/")
+    def test_parse_modify_hook(self):
+        x = modifyheaders.parse_modify_hook("/foo/bar/voing")
+        assert x == ("foo", b"bar", b"voing")
+        x = modifyheaders.parse_modify_hook("/foo/bar/vo/ing/")
+        assert x == ("foo", b"bar", b"vo/ing/")
+        x = modifyheaders.parse_modify_hook("/bar/voing")
+        assert x == (".*", b"bar", b"voing")
+        with pytest.raises(Exception, match="Invalid modify_\\* specifier"):
+            modifyheaders.parse_modify_hook("/")
 
     def test_configure(self):
         sh = modifyheaders.ModifyHeaders()
         with taddons.context(sh) as tctx:
+            with pytest.raises(Exception, match="Invalid modify_headers option"):
+                tctx.configure(sh, modify_headers = ["/"])
             with pytest.raises(Exception, match="Invalid modify_headers flow filter"):
                 tctx.configure(sh, modify_headers = ["/~b/one/two"])
             tctx.configure(sh, modify_headers = ["/foo/bar/voing"])
