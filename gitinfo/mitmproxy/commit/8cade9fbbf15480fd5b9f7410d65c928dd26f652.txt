commit 8cade9fbbf15480fd5b9f7410d65c928dd26f652
Author: Aldo Cortesi <aldo@nullcube.com>
Date:   Fri Feb 25 21:11:44 2011 +1300

    Move stringification funcs from proxy to dump.

diff --git a/libmproxy/dump.py b/libmproxy/dump.py
index c1f89d88..fe81eda1 100644
--- a/libmproxy/dump.py
+++ b/libmproxy/dump.py
@@ -23,6 +23,17 @@ class Options(object):
                 setattr(self, i, None)
 
 
+def str_response(resp):
+    r = "%s %s"%(resp.code, resp.msg)
+    if resp.is_replay():
+        r = "[replay] " + r
+    return r
+
+
+def str_request(req):
+    return "%s %s"%(req.method, req.url())
+
+
 class DumpMaster(flow.FlowMaster):
     def __init__(self, server, options, filtstr, outfile=sys.stdout):
         flow.FlowMaster.__init__(self, server, flow.State())
@@ -92,27 +103,27 @@ class DumpMaster(flow.FlowMaster):
             sz = utils.pretty_size(len(f.response.content))
             if self.o.verbosity == 1:
                 print >> self.outfile, f.request.client_conn.address[0],
-                print >> self.outfile, f.request.short()
+                print >> self.outfile, str_request(f.request)
                 print >> self.outfile, "  <<",
-                print >> self.outfile, f.response.short(), sz
+                print >> self.outfile, str_response(f.response), sz
             elif self.o.verbosity == 2:
                 print >> self.outfile, f.request.client_conn.address[0],
-                print >> self.outfile, f.request.short()
+                print >> self.outfile, str_request(f.request)
                 print >> self.outfile, self.indent(4, f.request.headers)
                 print >> self.outfile
-                print >> self.outfile, " <<", f.response.short(), sz
+                print >> self.outfile, " <<", str_response(f.response), sz
                 print >> self.outfile, self.indent(4, f.response.headers)
                 print >> self.outfile, "\n"
             elif self.o.verbosity == 3:
                 print >> self.outfile, f.request.client_conn.address[0],
-                print >> self.outfile, f.request.short()
+                print >> self.outfile, str_request(f.request)
                 print >> self.outfile, self.indent(4, f.request.headers)
                 if utils.isBin(f.request.content):
                     print >> self.outfile, self.indent(4, utils.hexdump(f.request.content))
                 elif f.request.content:
                     print >> self.outfile, self.indent(4, f.request.content)
                 print >> self.outfile
-                print >> self.outfile, " <<", f.response.short(), sz
+                print >> self.outfile, " <<", str_response(f.response), sz
                 print >> self.outfile, self.indent(4, f.response.headers)
                 if utils.isBin(f.response.content):
                     print >> self.outfile, self.indent(4, utils.hexdump(f.response.content))
diff --git a/libmproxy/proxy.py b/libmproxy/proxy.py
index 100a2e34..286ef3fb 100644
--- a/libmproxy/proxy.py
+++ b/libmproxy/proxy.py
@@ -223,9 +223,6 @@ class Request(controller.Msg):
     def is_response(self):
         return False
 
-    def short(self):
-        return "%s %s"%(self.method, self.url())
-
     def assemble_proxy(self):
         return self.assemble(True)
 
@@ -314,12 +311,6 @@ class Response(controller.Msg):
     def is_cached(self):
         return self.cached
 
-    def short(self):
-        r = "%s %s"%(self.code, self.msg)
-        if self.is_replay():
-            r = "[replay] " + r
-        return r
-
     def assemble(self):
         """
             Assembles the response for transmission to the client. We make some
diff --git a/test/test_dump.py b/test/test_dump.py
index 6213f870..1f6b7acc 100644
--- a/test/test_dump.py
+++ b/test/test_dump.py
@@ -4,6 +4,12 @@ import libpry
 from libmproxy import dump, flow
 import utils
 
+class uStrFuncs(libpry.AutoTree):
+    def test_all(self):
+        t = utils.tresp()
+        t.set_replay()
+        dump.str_response(t)
+
 
 class uDumpMaster(libpry.AutoTree):
     def _cycle(self, m, content):
@@ -103,11 +109,15 @@ class uDumpMaster(libpry.AutoTree):
             self._dummy_cycle, None, "", response_script="scripts/err_return"
         )
 
+    def test_stickycookie(self):
+        ret = self._dummy_cycle(None, "", stickycookie = ".*")
+
 
 
 
 
 
 tests = [
+    uStrFuncs(),
     uDumpMaster()
 ]
diff --git a/test/test_proxy.py b/test/test_proxy.py
index 0c05aeb2..8a59cf0b 100644
--- a/test/test_proxy.py
+++ b/test/test_proxy.py
@@ -218,7 +218,6 @@ class uRequest(libpry.AutoTree):
         assert r.set_url(u)
         assert not r.set_url("")
         assert r.url() == u
-        assert r.short()
         assert r.assemble()
 
     def test_getset_state(self):
@@ -246,7 +245,6 @@ class uResponse(libpry.AutoTree):
         c = proxy.ClientConnect(("addr", 2222))
         req = proxy.Request(c, "host", 22, "https", "GET", "/", h, "content")
         resp = proxy.Response(req, 200, "msg", h.copy(), "content")
-        assert resp.short()
         assert resp.assemble()
 
     def test_getset_state(self):
