commit 7049becdfe5fa16820fc7dd3da0866cf08464efd
Author: Maximilian Hils <git@maximilianhils.com>
Date:   Sun Dec 15 06:42:58 2013 +0100

    always return Content-Length: 0 if r is not set

diff --git a/libpathod/language.py b/libpathod/language.py
index 5cce6fde..ed5e5f60 100644
--- a/libpathod/language.py
+++ b/libpathod/language.py
@@ -765,11 +765,12 @@ class _Message(object):
     def resolve(self, settings, request_host):
         tokens = self.tokens[:]
         if not self.raw:
-            if self.body and not utils.get_header("Content-Length", self.headers):
+            if not utils.get_header("Content-Length", self.headers):
+                length = 0 if not self.body else len(self.body.value.get_generator(settings))
                 tokens.append(
                     Header(
                         ValueLiteral("Content-Length"),
-                        ValueLiteral(str(len(self.body.value.get_generator(settings)))),
+                        ValueLiteral(str(length)),
                     )
                 )
             if request_host:
diff --git a/libpathod/pathoc.py b/libpathod/pathoc.py
index 32707899..34dec94f 100644
--- a/libpathod/pathoc.py
+++ b/libpathod/pathoc.py
@@ -26,19 +26,19 @@ class Pathoc(tcp.TCPClient):
         self.ssl, self.sni = ssl, sni
         self.clientcert = clientcert
 
-    def http_connect(self, connect_to, wfile, rfile):
-        wfile.write(
+    def http_connect(self, connect_to):
+        self.wfile.write(
                     'CONNECT %s:%s HTTP/1.1\r\n'%tuple(connect_to) +
                     '\r\n'
                     )
-        wfile.flush()
-        l = rfile.readline()
+        self.wfile.flush()
+        l = self.rfile.readline()
         if not l:
             raise PathocError("Proxy CONNECT failed")
         parsed = http.parse_response_line(l)
         if not parsed[1] == 200:
             raise PathocError("Proxy CONNECT failed: %s - %s"%(parsed[1], parsed[2]))
-        headers = http.read_headers(rfile)
+        headers = http.read_headers(self.rfile)
 
     def connect(self, connect_to=None):
         """
@@ -47,7 +47,7 @@ class Pathoc(tcp.TCPClient):
         """
         tcp.TCPClient.connect(self)
         if connect_to:
-            self.http_connect(connect_to, self.wfile, self.rfile)
+            self.http_connect(connect_to)
         if self.ssl:
             try:
                 self.convert_to_ssl(sni=self.sni, cert=self.clientcert)
diff --git a/libpathod/pathod.py b/libpathod/pathod.py
index 5fc1fd55..d925de24 100644
--- a/libpathod/pathod.py
+++ b/libpathod/pathod.py
@@ -123,8 +123,8 @@ class PathodHandler(tcp.BaseHandler):
         )
 
         try:
-            content = http.read_http_body_request(
-                        self.rfile, self.wfile, headers, httpversion, None
+            content = http.read_http_body(
+                        self.rfile, headers, None, True
                     )
         except http.HttpError, s:
             s = str(s)
diff --git a/test/test_pathoc.py b/test/test_pathoc.py
index 31d73111..7493b2e7 100644
--- a/test/test_pathoc.py
+++ b/test/test_pathoc.py
@@ -136,16 +136,16 @@ class TestDaemon(_TestDaemon):
     def test_connect_fail(self):
         to = ("foobar", 80)
         c = pathoc.Pathoc("127.0.0.1", self.d.port)
-        r, w = cStringIO.StringIO(), cStringIO.StringIO()
-        tutils.raises("connect failed", c.http_connect, to, w, r)
-        r = cStringIO.StringIO(
+        c.rfile, c.wfile = cStringIO.StringIO(), cStringIO.StringIO()
+        tutils.raises("connect failed", c.http_connect, to)
+        c.rfile = cStringIO.StringIO(
             "HTTP/1.1 500 OK\r\n"
         )
-        tutils.raises("connect failed", c.http_connect, to, w, r)
-        r = cStringIO.StringIO(
+        tutils.raises("connect failed", c.http_connect, to)
+        c.rfile = cStringIO.StringIO(
             "HTTP/1.1 200 OK\r\n"
         )
-        c.http_connect(to, w, r)
+        c.http_connect(to)
 
 
 
