commit 1a41c15c039f871d5da85b6ce17e4f3006c4374a
Author: Maximilian Hils <git@maximilianhils.com>
Date:   Sun Aug 31 16:52:26 2014 +0200

    minor fixes

diff --git a/libmproxy/protocol/http.py b/libmproxy/protocol/http.py
index b635d071..82ee2b3c 100644
--- a/libmproxy/protocol/http.py
+++ b/libmproxy/protocol/http.py
@@ -940,7 +940,7 @@ class HTTPHandler(ProtocolHandler):
                     # > send large request upstream
                     self.c.server_reconnect()
                 else:
-                    raise v
+                    raise
 
     def handle_flow(self):
         flow = HTTPFlow(self.c.client_conn, self.c.server_conn, self.live)
@@ -1078,7 +1078,7 @@ class HTTPHandler(ProtocolHandler):
             if flow.request and not flow.response:
                 self.c.channel.ask("error", flow.error)
         else:
-            pass  # FIXME: Do we want to persist errors without flows?
+            pass
 
         try:
             self.send_error(code, message, headers)
diff --git a/libmproxy/proxy/primitives.py b/libmproxy/proxy/primitives.py
index f2c0a984..e09f23e4 100644
--- a/libmproxy/proxy/primitives.py
+++ b/libmproxy/proxy/primitives.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 
 class ProxyError(Exception):
     def __init__(self, code, message, headers=None):
-        super(ProxyError, self).__init__(self, message)
+        super(ProxyError, self).__init__(message)
         self.code, self.headers = code, headers
 
 
diff --git a/libmproxy/proxy/server.py b/libmproxy/proxy/server.py
index 56e8860b..946a301a 100644
--- a/libmproxy/proxy/server.py
+++ b/libmproxy/proxy/server.py
@@ -279,5 +279,4 @@ class ConnectionHandler:
         # make dang sure it doesn't happen.
         except Exception:  # pragma: no cover
             import traceback
-
             self.log("Error in handle_sni:\r\n" + traceback.format_exc(), "error")
\ No newline at end of file
