commit 649e63ff3c868397f493e1dabdc1c63d572aedd8
Author: Maximilian Hils <git@maximilianhils.com>
Date:   Thu Sep 4 00:10:01 2014 +0200

    fix some leftovers

diff --git a/examples/redirect_requests.py b/examples/redirect_requests.py
index a9a7e795..530da200 100644
--- a/examples/redirect_requests.py
+++ b/examples/redirect_requests.py
@@ -12,7 +12,7 @@ def request(context, flow):
             [1, 1], 200, "OK",
             ODictCaseless([["Content-Type", "text/html"]]),
             "helloworld")
-        flow.request.reply(resp)
+        flow.reply(resp)
     if flow.request.get_host(hostheader=True).endswith("example.org"):
         flow.request.host = "mitmproxy.org"
         flow.request.headers["Host"] = ["mitmproxy.org"]
diff --git a/libmproxy/console/common.py b/libmproxy/console/common.py
index a8440f79..5cb3dd2a 100644
--- a/libmproxy/console/common.py
+++ b/libmproxy/console/common.py
@@ -108,7 +108,7 @@ def raw_format_flow(f, focus, extended, padding):
 
     preamble = sum(i[1] for i in req) + len(req) -1
 
-    if f["intercepting"] and not f["req_acked"]:
+    if f["intercepting"] and not f["acked"]:
         uc = "intercept"
     elif f["resp_code"] or f["err_msg"]:
         uc = "text"
@@ -138,7 +138,7 @@ def raw_format_flow(f, focus, extended, padding):
         if f["resp_is_replay"]:
             resp.append(fcol(SYMBOL_REPLAY, "replay"))
         resp.append(fcol(f["resp_code"], ccol))
-        if f["intercepting"] and f["resp_code"] and not f["resp_acked"]:
+        if f["intercepting"] and f["resp_code"] and not f["acked"]:
             rc = "intercept"
         else:
             rc = "text"
@@ -172,11 +172,11 @@ flowcache = FlowCache()
 def format_flow(f, focus, extended=False, hostheader=False, padding=2):
     d = dict(
         intercepting = f.intercepting,
+        acked = f.reply.acked,
 
         req_timestamp = f.request.timestamp_start,
         req_is_replay = f.request.is_replay,
         req_method = f.request.method,
-        req_acked = f.request.reply.acked,
         req_url = f.request.get_url(hostheader=hostheader),
 
         err_msg = f.error.msg if f.error else None,
@@ -197,7 +197,6 @@ def format_flow(f, focus, extended=False, hostheader=False, padding=2):
         d.update(dict(
             resp_code = f.response.code,
             resp_is_replay = f.response.is_replay,
-            resp_acked = f.response.reply.acked,
             resp_clen = contentdesc,
             resp_rate = "{0}/s".format(rate),
         ))
diff --git a/libmproxy/console/flowview.py b/libmproxy/console/flowview.py
index 4aaf8944..3c63ac29 100644
--- a/libmproxy/console/flowview.py
+++ b/libmproxy/console/flowview.py
@@ -233,7 +233,7 @@ class FlowView(common.WWrap):
     def wrap_body(self, active, body):
         parts = []
 
-        if self.flow.intercepting and not self.flow.request.reply.acked:
+        if self.flow.intercepting and not self.flow.reply.acked and not self.flow.response:
             qt = "Request intercepted"
         else:
             qt = "Request"
@@ -242,7 +242,7 @@ class FlowView(common.WWrap):
         else:
             parts.append(self._tab(qt, "heading_inactive"))
 
-        if self.flow.intercepting and self.flow.response and not self.flow.response.reply.acked:
+        if self.flow.intercepting and not self.flow.reply.acked and self.flow.response:
             st = "Response intercepted"
         else:
             st = "Response"
diff --git a/libmproxy/flow.py b/libmproxy/flow.py
index eb183d9f..df72878f 100644
--- a/libmproxy/flow.py
+++ b/libmproxy/flow.py
@@ -183,8 +183,7 @@ class ClientPlaybackState:
         """
         if self.flows and not self.current:
             n = self.flows.pop(0)
-            n.request.reply = controller.DummyReply()
-            n.client_conn = None
+            n.reply = controller.DummyReply()
             self.current = master.handle_request(n)
             if not testing and not self.current.response:
                 master.replay_request(self.current)  # pragma: no cover
