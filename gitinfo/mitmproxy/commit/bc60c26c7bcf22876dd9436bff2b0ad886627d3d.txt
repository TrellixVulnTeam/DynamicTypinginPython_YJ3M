commit bc60c26c7bcf22876dd9436bff2b0ad886627d3d
Author: Maximilian Hils <git@maximilianhils.com>
Date:   Wed Apr 13 22:34:28 2016 -0700

    py3++

diff --git a/examples/pathod/libpathod_pathoc.py b/examples/pathod/libpathod_pathoc.py
index 587c0e4c..4c274571 100644
--- a/examples/pathod/libpathod_pathoc.py
+++ b/examples/pathod/libpathod_pathoc.py
@@ -3,5 +3,5 @@ from pathod import pathoc
 
 p = pathoc.Pathoc(("google.com", 80))
 p.connect()
-print p.request("get:/")
-print p.request("get:/foo")
+print(p.request("get:/"))
+print(p.request("get:/foo"))
diff --git a/examples/read_dumpfile b/examples/read_dumpfile
index 56746bb8..39f18e3d 100644
--- a/examples/read_dumpfile
+++ b/examples/read_dumpfile
@@ -17,4 +17,4 @@ with open(sys.argv[1], "rb") as logfile:
             pp.pprint(f.get_state())
             print("")
     except flow.FlowReadError as v:
-        print "Flow file corrupted. Stopped loading."
+        print("Flow file corrupted. Stopped loading.")
diff --git a/mitmproxy/console/__init__.py b/mitmproxy/console/__init__.py
index 12a3b724..381c133d 100644
--- a/mitmproxy/console/__init__.py
+++ b/mitmproxy/console/__init__.py
@@ -188,7 +188,7 @@ class ConsoleMaster(flow.FlowMaster):
 
         r = self.set_intercept(options.intercept)
         if r:
-            print >> sys.stderr, "Intercept error:", r
+            print("Intercept error: {}".format(r), file=sys.stderr)
             sys.exit(1)
 
         if options.limit:
@@ -196,12 +196,12 @@ class ConsoleMaster(flow.FlowMaster):
 
         r = self.set_stickycookie(options.stickycookie)
         if r:
-            print >> sys.stderr, "Sticky cookies error:", r
+            print("Sticky cookies error: {}".format(r), file=sys.stderr)
             sys.exit(1)
 
         r = self.set_stickyauth(options.stickyauth)
         if r:
-            print >> sys.stderr, "Sticky auth error:", r
+            print("Sticky auth error: {}".format(r), file=sys.stderr)
             sys.exit(1)
 
         self.set_stream_large_bodies(options.stream_large_bodies)
@@ -230,7 +230,7 @@ class ConsoleMaster(flow.FlowMaster):
             for i in options.scripts:
                 err = self.load_script(i)
                 if err:
-                    print >> sys.stderr, "Script load error:", err
+                    print("Script load error: {}".format(err), file=sys.stderr)
                     sys.exit(1)
 
         if options.outfile:
@@ -239,7 +239,7 @@ class ConsoleMaster(flow.FlowMaster):
                 options.outfile[1]
             )
             if err:
-                print >> sys.stderr, "Stream file error:", err
+                print("Stream file error: {}".format(err), file=sys.stderr)
                 sys.exit(1)
 
         self.view_stack = []
@@ -482,7 +482,7 @@ class ConsoleMaster(flow.FlowMaster):
                 )
             elif ret and not self.state.flow_count():
                 self.shutdown()
-                print >> sys.stderr, "Could not load file:", ret
+                print("Could not load file: {}".format(ret), file=sys.stderr)
                 sys.exit(1)
 
         self.loop.set_alarm_in(0.01, self.ticker)
diff --git a/mitmproxy/web/__init__.py b/mitmproxy/web/__init__.py
index 50c49e8d..852d9fc5 100644
--- a/mitmproxy/web/__init__.py
+++ b/mitmproxy/web/__init__.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import, print_function
 import collections
 import tornado.ioloop
 import tornado.httpserver
+import sys
 
 from netlib.http import authentication
 
@@ -166,7 +167,7 @@ class WebMaster(flow.FlowMaster):
                 options.outfile[1]
             )
             if err:
-                print >> sys.stderr, "Stream file error:", err
+                print("Stream file error: {}".format(err), file=sys.stderr)
                 sys.exit(1)
 
         if self.options.app:
diff --git a/mitmproxy/web/app.py b/mitmproxy/web/app.py
index cf3c8bdd..23a77cb0 100644
--- a/mitmproxy/web/app.py
+++ b/mitmproxy/web/app.py
@@ -196,7 +196,7 @@ class FlowHandler(RequestHandler):
                     elif k == "headers":
                         request.headers.set_state(v)
                     else:
-                        print "Warning: Unknown update {}.{}: {}".format(a, k, v)
+                        print("Warning: Unknown update {}.{}: {}".format(a, k, v))
 
             elif a == "response":
                 response = flow.response
@@ -210,9 +210,9 @@ class FlowHandler(RequestHandler):
                     elif k == "headers":
                         response.headers.set_state(v)
                     else:
-                        print "Warning: Unknown update {}.{}: {}".format(a, k, v)
+                        print("Warning: Unknown update {}.{}: {}".format(a, k, v))
             else:
-                print "Warning: Unknown update {}: {}".format(a, b)
+                print("Warning: Unknown update {}: {}".format(a, b))
         self.state.update_flow(flow)
 
 
diff --git a/pathod/pathoc.py b/pathod/pathoc.py
index f55a2eda..a49ed351 100644
--- a/pathod/pathoc.py
+++ b/pathod/pathoc.py
@@ -1,3 +1,4 @@
+from __future__ import print_function
 import contextlib
 import sys
 import os
@@ -312,7 +313,7 @@ class Pathoc(tcp.TCPClient):
                 self.get_alpn_proto_negotiated()
             )
             if showssl:
-                print >> fp, str(self.sslinfo)
+                print(str(self.sslinfo), file=fp)
 
             if self.use_http2:
                 self.protocol.check_alpn()
@@ -498,10 +499,10 @@ def main(args):  # pragma: no cover
             try:
                 p.connect(args.connect_to, args.showssl)
             except TcpException as v:
-                print >> sys.stderr, str(v)
+                print(str(v), file=sys.stderr)
                 continue
             except PathocError as v:
-                print >> sys.stderr, str(v)
+                print(str(v), file=sys.stderr)
                 sys.exit(1)
             for spec in playlist:
                 if args.explain or args.memo:
@@ -514,7 +515,7 @@ def main(args):  # pragma: no cover
                     else:
                         trycount += 1
                         if trycount > args.memolimit:
-                            print >> sys.stderr, "Memo limit exceeded..."
+                            print("Memo limit exceeded...", file=sys.stderr)
                             return
                         else:
                             continue
diff --git a/pathod/pathoc_cmdline.py b/pathod/pathoc_cmdline.py
index b59704f3..a9603c40 100644
--- a/pathod/pathoc_cmdline.py
+++ b/pathod/pathoc_cmdline.py
@@ -1,3 +1,4 @@
+from __future__ import print_function
 import sys
 import argparse
 import os
@@ -16,9 +17,9 @@ def args_pathoc(argv, stdout=sys.stdout, stderr=sys.stderr):
     )
     pa = preparser.parse_known_args(argv)[0]
     if pa.showua:
-        print >> stdout, "User agent strings:"
+        print("User agent strings:", file=stdout)
         for i in user_agents.UASTRINGS:
-            print >> stdout, "  ", i[1], i[0]
+            print("  ", i[1], i[0], file=stdout)
         sys.exit(0)
 
     parser = argparse.ArgumentParser(
@@ -213,8 +214,8 @@ def args_pathoc(argv, stdout=sys.stdout, stderr=sys.stderr):
         try:
             reqs.append(language.parse_pathoc(r, args.use_http2))
         except language.ParseException as v:
-            print >> stderr, "Error parsing request spec: %s" % v.msg
-            print >> stderr, v.marked()
+            print("Error parsing request spec: %s" % v.msg, file=stderr)
+            print(v.marked(), file=stderr)
             sys.exit(1)
     args.requests = reqs
 
diff --git a/pathod/pathod.py b/pathod/pathod.py
index b80da887..017ce072 100644
--- a/pathod/pathod.py
+++ b/pathod/pathod.py
@@ -1,3 +1,4 @@
+from __future__ import print_function
 import copy
 import logging
 import os
@@ -484,20 +485,19 @@ def main(args):  # pragma: no cover
             webdebug=args.webdebug
         )
     except PathodError as v:
-        print >> sys.stderr, "Error: %s" % v
+        print("Error: %s" % v, file=sys.stderr)
         sys.exit(1)
     except language.FileAccessDenied as v:
-        print >> sys.stderr, "Error: %s" % v
+        print("Error: %s" % v, file=sys.stderr)
 
     if args.daemonize:
         utils.daemonize()
 
     try:
-        print "%s listening on %s:%s" % (
+        print("%s listening on %s" % (
             version.NAMEVERSION,
-            pd.address.host,
-            pd.address.port
-        )
+            repr(pd.address)
+        ))
         pd.serve_forever()
     except KeyboardInterrupt:
         pass
diff --git a/test/mitmproxy/tools/getcert b/test/mitmproxy/tools/getcert
index 3bd2bec8..43ebf11d 100644
--- a/test/mitmproxy/tools/getcert
+++ b/test/mitmproxy/tools/getcert
@@ -7,4 +7,4 @@ import ssl
 import subprocess
 
 addr = socket.gethostbyname(sys.argv[1])
-print ssl.get_server_certificate((addr, 443))
+print(ssl.get_server_certificate((addr, 443)))
diff --git a/test/mitmproxy/tools/passive_close.py b/test/mitmproxy/tools/passive_close.py
index 4b657f8d..acbb3101 100644
--- a/test/mitmproxy/tools/passive_close.py
+++ b/test/mitmproxy/tools/passive_close.py
@@ -6,13 +6,13 @@ class service(socketserver.BaseRequestHandler):
 
     def handle(self):
         data = 'dummy'
-        print "Client connected with ", self.client_address
+        print("Client connected with ", self.client_address)
         while True:
             self.request.send(
                 "HTTP/1.1 200 OK\r\nConnection: close\r\nContent-Length: 7\r\n\r\ncontent")
             data = self.request.recv(1024)
             if not len(data):
-                print "Connection closed by remote: ", self.client_address
+                print("Connection closed by remote: ", self.client_address)
                 sleep(3600)
 
 
diff --git a/test/netlib/tools/getcertnames b/test/netlib/tools/getcertnames
index e33619f7..0882fccd 100644
--- a/test/netlib/tools/getcertnames
+++ b/test/netlib/tools/getcertnames
@@ -20,8 +20,8 @@ else:
     sni = None
 
 cert = get_remote_cert(sys.argv[1], port, sni)
-print "CN:", cert.cn
+print("CN:", cert.cn)
 if cert.altnames:
-    print "SANs:",
+    print("SANs:")
     for i in cert.altnames:
-        print "\t", i
+        print("\t", i)
