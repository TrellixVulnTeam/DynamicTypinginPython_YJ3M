commit 98e4421a90854ef3462377909904c8397f107c43
Author: Aldo Cortesi <aldo@nullcube.com>
Date:   Sat Mar 23 15:42:25 2013 +1300

    Trim docs.

diff --git a/README.mkd b/README.mkd
index a763fcac..dcb67811 100644
--- a/README.mkd
+++ b/README.mkd
@@ -5,8 +5,9 @@ __mitmdump__ is the command-line version of mitmproxy. Think tcpdump for HTTP.
 
 __libmproxy__ is the library that mitmproxy and mitmdump are built on.
 
-Complete documentation and a set of practical tutorials is included in the
-distribution package, and is also available at
+Documentation, tutorials and distribution packages can be found on the
+mitmproxy.org website:
+
 [mitmproxy.org](http://mitmproxy.org).
 
 
@@ -23,28 +24,6 @@ Features
 - SSL certificates for interception are generated on the fly.
 - And much, much more.
 
-Download
---------
-
-Releases and documentation can be found on the mitmproxy website:
-
-[mitmproxy.org](http://mitmproxy.org)
-
-Source is hosted on github:
-
-[github.com/cortesi/mitmproxy](http://github.com/cortesi/mitmproxy)
-
-
-Community
----------
-
-Come join us in the #mitmproxy channel on the OFTC IRC network
-(irc://irc.oftc.net:6667).
-
-We also have a mailing list, hosted here:
-
-[groups.google.com/group/mitmproxy](http://groups.google.com/group/mitmproxy)
-
 
 Requirements
 ------------
@@ -69,3 +48,4 @@ The following components are needed if you plan to hack on mitmproxy:
 * The test suite uses the [nose](http://readthedocs.org/docs/nose/en/latest/) unit testing
   framework and requires [pathod](http://pathod.org) and [flask](http://flask.pocoo.org/).
 * Rendering the documentation requires [countershape](http://github.com/cortesi/countershape).
+
diff --git a/libmproxy/proxy.py b/libmproxy/proxy.py
index 3d55190d..ad7be354 100644
--- a/libmproxy/proxy.py
+++ b/libmproxy/proxy.py
@@ -322,6 +322,8 @@ class ProxyHandler(tcp.BaseHandler):
         orig = self.config.transparent_proxy["resolver"].original_addr(self.connection)
         if not orig:
             raise ProxyError(502, "Transparent mode failure: could not resolve original destination.")
+        self.log(client_conn, "transparent to %s:%s"%orig)
+
         host, port = orig
         if port in self.config.transparent_proxy["sslports"]:
             scheme = "https"
