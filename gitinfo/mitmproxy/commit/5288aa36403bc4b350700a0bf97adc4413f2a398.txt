commit 5288aa36403bc4b350700a0bf97adc4413f2a398
Author: Thomas Kriechbaumer <thomas@kriechbaumer.name>
Date:   Wed May 27 12:58:55 2015 +0200

    add human_readable() to each frame for debugging

diff --git a/netlib/h2/frame.py b/netlib/h2/frame.py
index a7e81f48..51de7d4d 100644
--- a/netlib/h2/frame.py
+++ b/netlib/h2/frame.py
@@ -25,6 +25,7 @@ class Frame(object):
             raise ValueError('invalid flags detected.')
 
         self.length = length
+        self.type = self.TYPE
         self.flags = flags
         self.stream_id = stream_id
 
@@ -49,10 +50,27 @@ class Frame(object):
 
         return b
 
+    def payload_bytes(self):  # pragma: no cover
+        raise NotImplementedError()
+
+    def payload_human_readable(self):  # pragma: no cover
+        raise NotImplementedError()
+
+    def human_readable(self):
+        return "\n".join([
+            "============================================================",
+            "length:    %d bytes" % self.length,
+            "type:      %s (%#x)" % (self.__class__.__name__, self.TYPE),
+            "flags:     %#x" % self.flags,
+            "stream_id: %#x" % self.stream_id,
+            "------------------------------------------------------------",
+            self.payload_human_readable(),
+            "============================================================",
+        ])
+
     def __eq__(self, other):
         return self.to_bytes() == other.to_bytes()
 
-
 class DataFrame(Frame):
     TYPE = 0x0
     VALID_FLAGS = [Frame.FLAG_END_STREAM, Frame.FLAG_PADDED]
@@ -89,6 +107,8 @@ class DataFrame(Frame):
 
         return b
 
+    def payload_human_readable(self):
+        return "payload: %s" % str(self.payload)
 
 class HeadersFrame(Frame):
     TYPE = 0x1
@@ -139,6 +159,19 @@ class HeadersFrame(Frame):
 
         return b
 
+    def payload_human_readable(self):
+        s = []
+
+        if self.flags & self.FLAG_PRIORITY:
+            s.append("exclusive: %d" % self.exclusive)
+            s.append("stream dependency: %#x" % self.stream_dependency)
+            s.append("weight: %d" % self.weight)
+
+        if self.flags & self.FLAG_PADDED:
+            s.append("padding: %d" % self.pad_length)
+
+        s.append("header_block_fragment:   %s" % str(self.header_block_fragment))
+        return "\n".join(s)
 
 class PriorityFrame(Frame):
     TYPE = 0x2
@@ -169,6 +202,12 @@ class PriorityFrame(Frame):
 
         return struct.pack('!LB', (int(self.exclusive) << 31) | self.stream_dependency, self.weight)
 
+    def payload_human_readable(self):
+        s = []
+        s.append("exclusive: %d" % self.exclusive)
+        s.append("stream dependency: %#x" % self.stream_dependency)
+        s.append("weight: %d" % self.weight)
+        return "\n".join(s)
 
 class RstStreamFrame(Frame):
     TYPE = 0x3
@@ -190,6 +229,8 @@ class RstStreamFrame(Frame):
 
         return struct.pack('!L', self.error_code)
 
+    def payload_human_readable(self):
+        return "error code: %#x" % self.error_code
 
 class SettingsFrame(Frame):
     TYPE = 0x4
@@ -228,6 +269,16 @@ class SettingsFrame(Frame):
 
         return b
 
+    def payload_human_readable(self):
+        s = []
+
+        for identifier, value in self.settings.items():
+            s.append("%s: %#x" % (self.SETTINGS.get_name(identifier), value))
+
+        if not s:
+            return "settings: None"
+        else:
+            return "\n".join(s)
 
 class PushPromiseFrame(Frame):
     TYPE = 0x5
@@ -273,6 +324,15 @@ class PushPromiseFrame(Frame):
 
         return b
 
+    def payload_human_readable(self):
+        s = []
+
+        if self.flags & self.FLAG_PADDED:
+            s.append("padding: %d" % self.pad_length)
+
+        s.append("promised stream: %#x" % self.promised_stream)
+        s.append("header_block_fragment: %s" % str(self.header_block_fragment))
+        return "\n".join(s)
 
 class PingFrame(Frame):
     TYPE = 0x6
@@ -296,6 +356,8 @@ class PingFrame(Frame):
         b += b'\0' * (8 - len(b))
         return b
 
+    def payload_human_readable(self):
+        return "opaque data: %s" % str(self.payload)
 
 class GoAwayFrame(Frame):
     TYPE = 0x7
@@ -325,6 +387,12 @@ class GoAwayFrame(Frame):
         b += bytes(self.data)
         return b
 
+    def payload_human_readable(self):
+        s = []
+        s.append("last stream: %#x" % self.last_stream)
+        s.append("error code: %d" % self.error_code)
+        s.append("debug data: %s" % str(self.data))
+        return "\n".join(s)
 
 class WindowUpdateFrame(Frame):
     TYPE = 0x8
@@ -349,6 +417,8 @@ class WindowUpdateFrame(Frame):
 
         return struct.pack('!L', self.window_size_increment & 0x7FFFFFFF)
 
+    def payload_human_readable(self):
+        return "window size increment: %#x" % self.window_size_increment
 
 class ContinuationFrame(Frame):
     TYPE = 0x9
@@ -370,6 +440,9 @@ class ContinuationFrame(Frame):
 
         return self.header_block_fragment
 
+    def payload_human_readable(self):
+        return "header_block_fragment: %s" % str(self.header_block_fragment)
+
 _FRAME_CLASSES = [
     DataFrame,
     HeadersFrame,
diff --git a/test/h2/test_frames.py b/test/h2/test_frames.py
index 90162984..eb6e2a60 100644
--- a/test/h2/test_frames.py
+++ b/test/h2/test_frames.py
@@ -3,23 +3,19 @@ import tutils
 
 from nose.tools import assert_equal
 
-
 # TODO test stream association if valid or not
 
 def test_invalid_flags():
     tutils.raises(ValueError, DataFrame, ContinuationFrame.FLAG_END_HEADERS, 0x1234567, 'foobar')
 
-
 def test_frame_equality():
     a = DataFrame(6, Frame.FLAG_END_STREAM, 0x1234567, 'foobar')
     b = DataFrame(6, Frame.FLAG_END_STREAM, 0x1234567, 'foobar')
     assert_equal(a, b)
 
-
 def test_too_large_frames():
     DataFrame(6, Frame.FLAG_END_STREAM, 0x1234567)
 
-
 def test_data_frame_to_bytes():
     f = DataFrame(6, Frame.FLAG_END_STREAM, 0x1234567, 'foobar')
     assert_equal(f.to_bytes().encode('hex'), '000006000101234567666f6f626172')
@@ -30,7 +26,6 @@ def test_data_frame_to_bytes():
     f = DataFrame(6, Frame.FLAG_NO_FLAGS, 0x0, 'foobar')
     tutils.raises(ValueError, f.to_bytes)
 
-
 def test_data_frame_from_bytes():
     f = Frame.from_bytes('000006000101234567666f6f626172'.decode('hex'))
     assert isinstance(f, DataFrame)
@@ -48,6 +43,9 @@ def test_data_frame_from_bytes():
     assert_equal(f.stream_id, 0x1234567)
     assert_equal(f.payload, 'foobar')
 
+def test_data_frame_human_readable():
+    f = DataFrame(11, Frame.FLAG_END_STREAM | Frame.FLAG_PADDED, 0x1234567, 'foobar', pad_length=3)
+    assert f.human_readable()
 
 def test_headers_frame_to_bytes():
     f = HeadersFrame(6, Frame.FLAG_NO_FLAGS, 0x1234567, 'foobar')
@@ -70,7 +68,6 @@ def test_headers_frame_to_bytes():
     f = HeadersFrame(6, Frame.FLAG_NO_FLAGS, 0x0, 'foobar')
     tutils.raises(ValueError, f.to_bytes)
 
-
 def test_headers_frame_from_bytes():
     f = Frame.from_bytes('000006010001234567666f6f626172'.decode('hex'))
     assert isinstance(f, HeadersFrame)
@@ -121,6 +118,9 @@ def test_headers_frame_from_bytes():
     assert_equal(f.stream_dependency, 0x7654321)
     assert_equal(f.weight, 42)
 
+def test_headers_frame_human_readable():
+    f = HeadersFrame(14, HeadersFrame.FLAG_PADDED | HeadersFrame.FLAG_PRIORITY, 0x1234567, 'foobar', pad_length=3, exclusive=False, stream_dependency=0x7654321, weight=42)
+    assert f.human_readable()
 
 def test_priority_frame_to_bytes():
     f = PriorityFrame(5, Frame.FLAG_NO_FLAGS, 0x1234567, exclusive=True, stream_dependency=0x7654321, weight=42)
@@ -135,7 +135,6 @@ def test_priority_frame_to_bytes():
     f = PriorityFrame(5, Frame.FLAG_NO_FLAGS, 0x1234567, stream_dependency=0x0)
     tutils.raises(ValueError, f.to_bytes)
 
-
 def test_priority_frame_from_bytes():
     f = Frame.from_bytes('000005020001234567876543212a'.decode('hex'))
     assert isinstance(f, PriorityFrame)
@@ -157,6 +156,9 @@ def test_priority_frame_from_bytes():
     assert_equal(f.stream_dependency, 0x7654321)
     assert_equal(f.weight, 21)
 
+def test_priority_frame_human_readable():
+    f = PriorityFrame(5, Frame.FLAG_NO_FLAGS, 0x1234567, exclusive=False, stream_dependency=0x7654321, weight=21)
+    assert f.human_readable()
 
 def test_rst_stream_frame_to_bytes():
     f = RstStreamFrame(4, Frame.FLAG_NO_FLAGS, 0x1234567, error_code=0x7654321)
@@ -165,7 +167,6 @@ def test_rst_stream_frame_to_bytes():
     f = RstStreamFrame(4, Frame.FLAG_NO_FLAGS, 0x0)
     tutils.raises(ValueError, f.to_bytes)
 
-
 def test_rst_stream_frame_from_bytes():
     f = Frame.from_bytes('00000403000123456707654321'.decode('hex'))
     assert isinstance(f, RstStreamFrame)
@@ -175,6 +176,9 @@ def test_rst_stream_frame_from_bytes():
     assert_equal(f.stream_id, 0x1234567)
     assert_equal(f.error_code, 0x07654321)
 
+def test_rst_stream_frame_human_readable():
+    f = RstStreamFrame(4, Frame.FLAG_NO_FLAGS, 0x1234567, error_code=0x7654321)
+    assert f.human_readable()
 
 def test_settings_frame_to_bytes():
     f = SettingsFrame(0, Frame.FLAG_NO_FLAGS, 0x0)
@@ -193,7 +197,6 @@ def test_settings_frame_to_bytes():
     f = SettingsFrame(0, Frame.FLAG_NO_FLAGS, 0x1234567)
     tutils.raises(ValueError, f.to_bytes)
 
-
 def test_settings_frame_from_bytes():
     f = Frame.from_bytes('000000040000000000'.decode('hex'))
     assert isinstance(f, SettingsFrame)
@@ -228,6 +231,12 @@ def test_settings_frame_from_bytes():
     assert_equal(f.settings[SettingsFrame.SETTINGS.SETTINGS_ENABLE_PUSH], 1)
     assert_equal(f.settings[SettingsFrame.SETTINGS.SETTINGS_MAX_CONCURRENT_STREAMS], 0x12345678)
 
+def test_settings_frame_human_readable():
+    f = SettingsFrame(12, Frame.FLAG_NO_FLAGS, 0x0, settings={})
+    assert f.human_readable()
+
+    f = SettingsFrame(12, Frame.FLAG_NO_FLAGS, 0x0, settings={SettingsFrame.SETTINGS.SETTINGS_ENABLE_PUSH: 1, SettingsFrame.SETTINGS.SETTINGS_MAX_CONCURRENT_STREAMS: 0x12345678})
+    assert f.human_readable()
 
 def test_push_promise_frame_to_bytes():
     f = PushPromiseFrame(10, Frame.FLAG_NO_FLAGS, 0x1234567, 0x7654321, 'foobar')
@@ -242,7 +251,6 @@ def test_push_promise_frame_to_bytes():
     f = PushPromiseFrame(4, Frame.FLAG_NO_FLAGS, 0x1234567, 0x0)
     tutils.raises(ValueError, f.to_bytes)
 
-
 def test_push_promise_frame_from_bytes():
     f = Frame.from_bytes('00000a05000123456707654321666f6f626172'.decode('hex'))
     assert isinstance(f, PushPromiseFrame)
@@ -260,6 +268,9 @@ def test_push_promise_frame_from_bytes():
     assert_equal(f.stream_id, 0x1234567)
     assert_equal(f.header_block_fragment, 'foobar')
 
+def test_push_promise_frame_human_readable():
+    f = PushPromiseFrame(14, HeadersFrame.FLAG_PADDED, 0x1234567, 0x7654321, 'foobar', pad_length=3)
+    assert f.human_readable()
 
 def test_ping_frame_to_bytes():
     f = PingFrame(8, PingFrame.FLAG_ACK, 0x0, payload=b'foobar')
@@ -271,7 +282,6 @@ def test_ping_frame_to_bytes():
     f = PingFrame(8, Frame.FLAG_NO_FLAGS, 0x1234567)
     tutils.raises(ValueError, f.to_bytes)
 
-
 def test_ping_frame_from_bytes():
     f = Frame.from_bytes('000008060100000000666f6f6261720000'.decode('hex'))
     assert isinstance(f, PingFrame)
@@ -289,6 +299,9 @@ def test_ping_frame_from_bytes():
     assert_equal(f.stream_id, 0x0)
     assert_equal(f.payload, b'foobarde')
 
+def test_ping_frame_human_readable():
+    f = PingFrame(8, PingFrame.FLAG_ACK, 0x0, payload=b'foobar')
+    assert f.human_readable()
 
 def test_goaway_frame_to_bytes():
     f = GoAwayFrame(8, Frame.FLAG_NO_FLAGS, 0x0, last_stream=0x1234567, error_code=0x87654321, data=b'')
@@ -300,7 +313,6 @@ def test_goaway_frame_to_bytes():
     f = GoAwayFrame(8, Frame.FLAG_NO_FLAGS, 0x1234567, last_stream=0x1234567, error_code=0x87654321)
     tutils.raises(ValueError, f.to_bytes)
 
-
 def test_goaway_frame_from_bytes():
     f = Frame.from_bytes('0000080700000000000123456787654321'.decode('hex'))
     assert isinstance(f, GoAwayFrame)
@@ -322,6 +334,9 @@ def test_goaway_frame_from_bytes():
     assert_equal(f.error_code, 0x87654321)
     assert_equal(f.data, b'foobar')
 
+def test_go_away_frame_human_readable():
+    f = GoAwayFrame(14, Frame.FLAG_NO_FLAGS, 0x0, last_stream=0x1234567, error_code=0x87654321, data=b'foobar')
+    assert f.human_readable()
 
 def test_window_update_frame_to_bytes():
     f = WindowUpdateFrame(4, Frame.FLAG_NO_FLAGS, 0x0, window_size_increment=0x1234567)
@@ -336,7 +351,6 @@ def test_window_update_frame_to_bytes():
     f = WindowUpdateFrame(4, Frame.FLAG_NO_FLAGS, 0x0, window_size_increment=0)
     tutils.raises(ValueError, f.to_bytes)
 
-
 def test_window_update_frame_from_bytes():
     f = Frame.from_bytes('00000408000000000001234567'.decode('hex'))
     assert isinstance(f, WindowUpdateFrame)
@@ -346,6 +360,9 @@ def test_window_update_frame_from_bytes():
     assert_equal(f.stream_id, 0x0)
     assert_equal(f.window_size_increment, 0x1234567)
 
+def test_window_update_frame_human_readable():
+    f = WindowUpdateFrame(4, Frame.FLAG_NO_FLAGS, 0x1234567, window_size_increment=0x7654321)
+    assert f.human_readable()
 
 def test_continuation_frame_to_bytes():
     f = ContinuationFrame(6, ContinuationFrame.FLAG_END_HEADERS, 0x1234567, 'foobar')
@@ -354,7 +371,6 @@ def test_continuation_frame_to_bytes():
     f = ContinuationFrame(6, ContinuationFrame.FLAG_END_HEADERS, 0x0, 'foobar')
     tutils.raises(ValueError, f.to_bytes)
 
-
 def test_continuation_frame_from_bytes():
     f = Frame.from_bytes('000006090401234567666f6f626172'.decode('hex'))
     assert isinstance(f, ContinuationFrame)
@@ -363,3 +379,7 @@ def test_continuation_frame_from_bytes():
     assert_equal(f.flags, ContinuationFrame.FLAG_END_HEADERS)
     assert_equal(f.stream_id, 0x1234567)
     assert_equal(f.header_block_fragment, 'foobar')
+
+def test_continuation_frame_human_readable():
+    f = ContinuationFrame(6, ContinuationFrame.FLAG_END_HEADERS, 0x1234567, 'foobar')
+    assert f.human_readable()
