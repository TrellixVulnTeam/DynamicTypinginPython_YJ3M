commit 78e8159007051122de1a1be1467d9261266b288e
Author: Aldo Cortesi <aldo@nullcube.com>
Date:   Tue Jul 19 11:10:37 2016 +1200

    config.parse_server_spec shouldn't pass byts to tcp.Address

diff --git a/mitmproxy/proxy/config.py b/mitmproxy/proxy/config.py
index 403a4174..7a5a6863 100644
--- a/mitmproxy/proxy/config.py
+++ b/mitmproxy/proxy/config.py
@@ -65,9 +65,9 @@ def parse_server_spec(spec):
         raise exceptions.OptionsError(
             "Invalid server specification: %s" % spec
         )
-
-    address = tcp.Address(p[1:3])
-    scheme = p[0].lower()
+    host, port = p[1:3]
+    address = tcp.Address((host.decode("ascii"), port))
+    scheme = p[0].decode("ascii").lower()
     return ServerSpec(scheme, address)
 
 
diff --git a/test/mitmproxy/test_proxy_config.py b/test/mitmproxy/test_proxy_config.py
index 2f31d502..d8085eb8 100644
--- a/test/mitmproxy/test_proxy_config.py
+++ b/test/mitmproxy/test_proxy_config.py
@@ -8,13 +8,13 @@ def test_parse_server_spec():
         "Invalid server specification", config.parse_server_spec, ""
     )
     assert config.parse_server_spec("http://foo.com:88") == (
-        b"http", (b"foo.com", 88)
+        "http", ("foo.com", 88)
     )
     assert config.parse_server_spec("http://foo.com") == (
-        b"http", (b"foo.com", 80)
+        "http", ("foo.com", 80)
     )
     assert config.parse_server_spec("https://foo.com") == (
-        b"https", (b"foo.com", 443)
+        "https", ("foo.com", 443)
     )
     tutils.raises(
         "Invalid server specification",
diff --git a/test/mitmproxy/test_server.py b/test/mitmproxy/test_server.py
index ca3f8a97..73e070ac 100644
--- a/test/mitmproxy/test_server.py
+++ b/test/mitmproxy/test_server.py
@@ -486,7 +486,7 @@ class TestHttps2Http(tservers.ReverseProxyTest):
     def get_proxy_config(cls):
         d, opts = super(TestHttps2Http, cls).get_proxy_config()
         s = parse_server_spec(opts.upstream_server)
-        opts.upstream_server = "http://%s" % s.address.decode("ascii")
+        opts.upstream_server = "http://%s" % s.address
         return d, opts
 
     def pathoc(self, ssl, sni=None):
