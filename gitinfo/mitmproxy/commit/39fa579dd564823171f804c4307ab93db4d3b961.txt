commit 39fa579dd564823171f804c4307ab93db4d3b961
Author: Maximilian Hils <git@maximilianhils.com>
Date:   Thu Sep 4 14:15:49 2014 +0200

    remove outdated IOError test case (https://github.com/mitmproxy/netlib/commit/f5fdfd8a9f17e0fe213a9cf54acae84e4bc31462)

diff --git a/libmproxy/protocol/http.py b/libmproxy/protocol/http.py
index 1da9caa6..9faa4946 100644
--- a/libmproxy/protocol/http.py
+++ b/libmproxy/protocol/http.py
@@ -1055,7 +1055,7 @@ class HTTPHandler(ProtocolHandler):
             flow.live = None
 
             return True
-        except (HttpAuthenticationError, http.HttpError, proxy.ProxyError, tcp.NetLibError, IOError), e:
+        except (HttpAuthenticationError, http.HttpError, proxy.ProxyError, tcp.NetLibError), e:
             self.handle_error(e, flow)
         return False
 
diff --git a/test/test_server.py b/test/test_server.py
index 3125c2f3..24d0ca5c 100644
--- a/test/test_server.py
+++ b/test/test_server.py
@@ -108,16 +108,6 @@ class TestHTTP(tservers.HTTPProxTest, CommonMixin, AppMixin):
         assert p.request(req)
         assert p.request(req)
 
-    def test_proxy_ioerror(self):
-        # Tests a difficult-to-trigger condition, where an IOError is raised
-        # within our read loop.
-        with mock.patch("libmproxy.protocol.http.HTTPRequest.from_stream") as m:
-            def brk(f, *args, **kwargs):
-                f.o._sock.close()
-                raise IOError("error!")
-            m.side_effect = brk
-            tutils.raises("server disconnect", self.pathod, "304")
-
     def test_get_connection_switching(self):
         def switched(l):
             for i in l:
