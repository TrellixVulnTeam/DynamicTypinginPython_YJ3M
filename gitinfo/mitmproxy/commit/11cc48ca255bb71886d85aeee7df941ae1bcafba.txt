commit 11cc48ca255bb71886d85aeee7df941ae1bcafba
Author: Aldo Cortesi <aldo@nullcube.com>
Date:   Mon May 13 09:08:24 2013 +1200

    Adapt for new request_client_cert option in netlib.

diff --git a/test/test_server.py b/test/test_server.py
index 6a88578c..079ed8ce 100644
--- a/test/test_server.py
+++ b/test/test_server.py
@@ -1,7 +1,7 @@
 import socket, time
 import mock
 from netlib import tcp, http_auth, http
-from libpathod import pathoc
+from libpathod import pathoc, pathod
 import tutils, tservers
 from libmproxy import flow, proxy
 
@@ -173,6 +173,7 @@ class TestHTTPConnectSSLError(tservers.HTTPProxTest):
 
 class TestHTTPS(tservers.HTTPProxTest, CommonMixin):
     ssl = True
+    ssloptions = pathod.SSLOptions(request_client_cert=True)
     clientcerts = True
     def test_clientcert(self):
         f = self.pathod("304")
diff --git a/test/tservers.py b/test/tservers.py
index 91ce4dc0..1197fb69 100644
--- a/test/tservers.py
+++ b/test/tservers.py
@@ -69,6 +69,7 @@ class ProxyThread(threading.Thread):
 class ProxTestBase:
     # Test Configuration
     ssl = None
+    ssloptions = False
     clientcerts = False
     certfile = None
     no_upstream_cert = False
@@ -77,8 +78,8 @@ class ProxTestBase:
     @classmethod
     def setupAll(cls):
         cls.tqueue = Queue.Queue()
-        cls.server = libpathod.test.Daemon(ssl=cls.ssl)
-        cls.server2 = libpathod.test.Daemon(ssl=cls.ssl)
+        cls.server = libpathod.test.Daemon(ssl=cls.ssl, ssloptions=cls.ssloptions)
+        cls.server2 = libpathod.test.Daemon(ssl=cls.ssl, ssloptions=cls.ssloptions)
         pconf = cls.get_proxy_config()
         config = proxy.ProxyConfig(
             no_upstream_cert = cls.no_upstream_cert,
