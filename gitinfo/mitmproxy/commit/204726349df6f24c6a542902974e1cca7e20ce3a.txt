commit 204726349df6f24c6a542902974e1cca7e20ce3a
Author: Aldo Cortesi <aldo@corte.si>
Date:   Tue May 1 11:31:42 2018 +1200

    client replay: replaying flows in-flight should be added to count()

diff --git a/mitmproxy/addons/clientplayback.py b/mitmproxy/addons/clientplayback.py
index 11d2453b..e9fbadce 100644
--- a/mitmproxy/addons/clientplayback.py
+++ b/mitmproxy/addons/clientplayback.py
@@ -1,4 +1,5 @@
 import queue
+import threading
 import typing
 
 from mitmproxy import log
@@ -30,12 +31,15 @@ class RequestReplayThread(basethread.BaseThread):
         self.options = opts
         self.channel = channel
         self.queue = queue
+        self.inflight = threading.Event()
         super().__init__("RequestReplayThread")
 
     def run(self):
         while True:
             f = self.queue.get()
+            self.inflight.set()
             self.replay(f)
+            self.inflight.clear()
 
     def replay(self, f):  # pragma: no cover
         f.live = True
@@ -163,7 +167,8 @@ class ClientPlayback:
         """
             Approximate number of flows queued for replay.
         """
-        return self.q.qsize()
+        inflight = 1 if self.thread and self.thread.inflight.is_set() else 0
+        return self.q.qsize() + inflight
 
     @command.command("replay.client.stop")
     def stop_replay(self) -> None:
diff --git a/mitmproxy/tools/console/commandexecutor.py b/mitmproxy/tools/console/commandexecutor.py
index 26f92238..3db03d3e 100644
--- a/mitmproxy/tools/console/commandexecutor.py
+++ b/mitmproxy/tools/console/commandexecutor.py
@@ -14,7 +14,7 @@ class CommandExecutor:
     def __call__(self, cmd):
         if cmd.strip():
             try:
-                ret = self.master.commands.call(cmd)
+                ret = self.master.commands.execute(cmd)
             except exceptions.CommandError as v:
                 signals.status_message.send(message=str(v))
             else:
