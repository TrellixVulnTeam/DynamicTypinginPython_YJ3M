commit 80339aef934e6d187b3cfff2d2c38fb52fcae7c9
Author: Aldo Cortesi <aldo@nullcube.com>
Date:   Fri Jan 2 15:29:51 2015 +1300

    Unit test framework for web client-side code
    
    - Also make formatSize nicer and test it.
    
    Now there's no excuse! ;)

diff --git a/libmproxy/web/__init__.py b/libmproxy/web/__init__.py
index 4d4d6c7c..173ddf9f 100644
--- a/libmproxy/web/__init__.py
+++ b/libmproxy/web/__init__.py
@@ -127,7 +127,7 @@ class WebMaster(flow.FlowMaster):
         self.app = app.Application(self, self.options.wdebug)
         if options.rfile:
             try:
-                print(self.load_flows_file(options.rfile))
+                self.load_flows_file(options.rfile)
             except flow.FlowReadError, v:
                 self.add_event(
                     "Could not read flow file: %s"%v,
diff --git a/libmproxy/web/static/app.js b/libmproxy/web/static/app.js
index b49c5085..e18ba083 100644
--- a/libmproxy/web/static/app.js
+++ b/libmproxy/web/static/app.js
@@ -4847,14 +4847,20 @@ for (var i = 65; i <= 90; i++) {
 
 
 var formatSize = function (bytes) {
-    var size = bytes;
-    var prefix = ["B", "KB", "MB", "GB", "TB"];
-    var i = 0;
-    while (Math.abs(size) >= 1024 && i < prefix.length - 1) {
-        i++;
-        size = size / 1024;
+    if (bytes === 0)
+        return "0";
+    var prefix = ["b", "kb", "mb", "gb", "tb"];
+    for (var i = 0; i < prefix.length; i++){
+        if (Math.pow(1024, i + 1) > bytes){
+            break;
+        }
     }
-    return (Math.floor(size * 100) / 100.0).toFixed(2) + prefix[i];
+    var precision;
+    if (bytes%Math.pow(1024, i) === 0)
+        precision = 0;
+    else
+        precision = 1;
+    return (bytes/Math.pow(1024, i)).toFixed(precision) + prefix[i];
 };
 
 
@@ -4908,4 +4914,4 @@ module.exports = {
     Key: Key
 };
 },{"jquery":"jquery"}]},{},[6])
-//# sourceMappingURL=data:application/json;base64,
+//# sourceMappingURL=data:application/json;base64,
diff --git a/web/package.json b/web/package.json
index c4beef71..b18d9259 100644
--- a/web/package.json
+++ b/web/package.json
@@ -1,44 +1,56 @@
 {
-  "name": "mitmproxy",
-  "private": true,
-  "dependencies": {
+    "name": "mitmproxy",
+    "private": true,
+    "scripts": {
+        "test": "jest ./src/js"
+    },
+    "jest": {
+        "testPathDirs": [
+            "./src/js"
+        ],
+        "testPathIgnorePatterns": [
+            "/node_modules/",
+            "testutils.js"
+        ],
+        "testDirectoryName": "tests"
+    },
+    "dependencies": {
         "jquery": "",
         "lodash": "",
         "react": "",
         "react-router": "",
         "bootstrap": "",
         "flux": ""
-  },
-  "devDependencies": {
-    "bower": "",
-    "browserify": "^6.3.4",
-    "gulp": "",
-    "gulp-concat": "",
-    "gulp-connect": "",
-    "gulp-jshint": "",
-    "gulp-less": "",
-    "gulp-livereload": "",
-    "gulp-minify-css": "",
-    "gulp-notify": "",
-    "gulp-plumber": "",
-    "gulp-react": "",
-    "gulp-rename": "",
-    "gulp-replace": "",
-    "gulp-rev": "",
-    "gulp-sourcemaps": "",
-    "gulp-uglify": "",
-    "gulp-util": "",
-    "jest-cli": "^0.1.18",
-    "jshint-stylish": "",
-    "lodash": "",
-    "map-stream": "",
-    "react": "",
-    "react-tools": "",
-    "reactify": "",
-    "vinyl-buffer": "",
-    "vinyl-source-stream": "",
-    "vinyl-transform": "",
-
-    "gulp-peg": ""
-  }
+    },
+    "devDependencies": {
+        "bower": "",
+        "browserify": "^6.3.4",
+        "gulp": "",
+        "gulp-concat": "",
+        "gulp-connect": "",
+        "gulp-jshint": "",
+        "gulp-less": "",
+        "gulp-livereload": "",
+        "gulp-minify-css": "",
+        "gulp-notify": "",
+        "gulp-plumber": "",
+        "gulp-react": "",
+        "gulp-rename": "",
+        "gulp-replace": "",
+        "gulp-rev": "",
+        "gulp-sourcemaps": "",
+        "gulp-uglify": "",
+        "gulp-util": "",
+        "jest-cli": "^0.1.18",
+        "jshint-stylish": "",
+        "lodash": "",
+        "map-stream": "",
+        "react": "",
+        "react-tools": "",
+        "reactify": "",
+        "vinyl-buffer": "",
+        "vinyl-source-stream": "",
+        "vinyl-transform": "",
+        "gulp-peg": ""
+    }
 }
diff --git a/web/src/js/tests.js b/web/src/js/tests.js
deleted file mode 100644
index ede323dc..00000000
--- a/web/src/js/tests.js
+++ /dev/null
@@ -1,3 +0,0 @@
-QUnit.test("example test", function (assert) {
-    assert.ok(true);
-});
\ No newline at end of file
diff --git a/web/src/js/tests/utils.js b/web/src/js/tests/utils.js
new file mode 100644
index 00000000..dfbb9ba6
--- /dev/null
+++ b/web/src/js/tests/utils.js
@@ -0,0 +1,15 @@
+jest.dontMock("jquery");
+jest.dontMock("../utils");
+
+describe("utils", function () {
+    var utils = require("../utils");
+    it("formatSize", function(){
+        expect(utils.formatSize(1024)).toEqual("1kb");
+        expect(utils.formatSize(0)).toEqual("0");
+        expect(utils.formatSize(10)).toEqual("10b");
+        expect(utils.formatSize(1025)).toEqual("1.0kb");
+        expect(utils.formatSize(1024*1024)).toEqual("1mb");
+        expect(utils.formatSize(1024*1024+1)).toEqual("1.0mb");
+    });
+});
+
diff --git a/web/src/js/utils.js b/web/src/js/utils.js
index d5093702..21b7a868 100644
--- a/web/src/js/utils.js
+++ b/web/src/js/utils.js
@@ -23,14 +23,20 @@ for (var i = 65; i <= 90; i++) {
 
 
 var formatSize = function (bytes) {
-    var size = bytes;
-    var prefix = ["B", "KB", "MB", "GB", "TB"];
-    var i = 0;
-    while (Math.abs(size) >= 1024 && i < prefix.length - 1) {
-        i++;
-        size = size / 1024;
+    if (bytes === 0)
+        return "0";
+    var prefix = ["b", "kb", "mb", "gb", "tb"];
+    for (var i = 0; i < prefix.length; i++){
+        if (Math.pow(1024, i + 1) > bytes){
+            break;
+        }
     }
-    return (Math.floor(size * 100) / 100.0).toFixed(2) + prefix[i];
+    var precision;
+    if (bytes%Math.pow(1024, i) === 0)
+        precision = 0;
+    else
+        precision = 1;
+    return (bytes/Math.pow(1024, i)).toFixed(precision) + prefix[i];
 };
 
 
