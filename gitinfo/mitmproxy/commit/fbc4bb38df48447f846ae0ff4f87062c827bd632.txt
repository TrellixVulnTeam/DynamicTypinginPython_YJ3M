commit fbc4bb38df48447f846ae0ff4f87062c827bd632
Author: Maximilian Hils <git@maximilianhils.com>
Date:   Mon Sep 8 23:34:43 2014 +0200

    mitmproxy -> libmproxy.main. do some leanup on the way

diff --git a/examples/flowbasic b/examples/flowbasic
index 9aeb83c5..21d31efa 100755
--- a/examples/flowbasic
+++ b/examples/flowbasic
@@ -35,9 +35,10 @@ class MyMaster(flow.FlowMaster):
 
 
 config = proxy.ProxyConfig(
+    port=8080,
     ca_file=os.path.expanduser("~/.mitmproxy/mitmproxy-ca.pem")
 )
 state = flow.State()
-server = ProxyServer(config, 8080)
+server = ProxyServer(config)
 m = MyMaster(server, state)
 m.run()
diff --git a/examples/stickycookies b/examples/stickycookies
index d2368e22..132e4dc7 100755
--- a/examples/stickycookies
+++ b/examples/stickycookies
@@ -37,8 +37,9 @@ class StickyMaster(controller.Master):
 
 
 config = proxy.ProxyConfig(
-    ca_file = os.path.expanduser("~/.mitmproxy/mitmproxy-ca.pem")
+    port=8080,
+    ca_file=os.path.expanduser("~/.mitmproxy/mitmproxy-ca.pem")
 )
-server = ProxyServer(config, 8080)
+server = ProxyServer(config)
 m = StickyMaster(server)
 m.run()
diff --git a/libmproxy/dump.py b/libmproxy/dump.py
index 72ab58a3..648a76ba 100644
--- a/libmproxy/dump.py
+++ b/libmproxy/dump.py
@@ -16,6 +16,7 @@ class Options(object):
         "anticache",
         "anticomp",
         "client_replay",
+        "filtstr",
         "flow_detail",
         "keepserving",
         "kill",
@@ -62,7 +63,7 @@ def str_request(f, showhost):
 
 
 class DumpMaster(flow.FlowMaster):
-    def __init__(self, server, options, filtstr, outfile=sys.stdout):
+    def __init__(self, server, options, outfile=sys.stdout):
         flow.FlowMaster.__init__(self, server, flow.State())
         self.outfile = outfile
         self.o = options
@@ -73,8 +74,8 @@ class DumpMaster(flow.FlowMaster):
 
         self.set_stream_large_bodies(options.stream_large_bodies)
 
-        if filtstr:
-            self.filt = filt.parse(filtstr)
+        if options.filtstr:
+            self.filt = filt.parse(options.filtstr)
         else:
             self.filt = None
 
diff --git a/libmproxy/main.py b/libmproxy/main.py
new file mode 100644
index 00000000..e343bd75
--- /dev/null
+++ b/libmproxy/main.py
@@ -0,0 +1,165 @@
+from __future__ import print_function, absolute_import
+import argparse
+import os
+import signal
+import sys
+import netlib.version
+from . import version, cmdline
+from .proxy import process_proxy_options, ProxyServerError
+from .proxy.server import DummyServer, ProxyServer
+
+
+def check_versions():
+    """
+    Having installed a wrong version of pyOpenSSL or netlib is unfortunately a very common source of error.
+    Check before every start that both versions are somewhat okay.
+    """
+    # We don't introduce backward-incompatible changes in patch versions. Only consider major and minor version.
+    if netlib.version.IVERSION[:2] != version.IVERSION[:2]:
+        print(
+            "Warning: You are using mitmdump %s with netlib %s. "
+            "Most likely, that doesn't work - please upgrade!" % (version.VERSION, netlib.version.VERSION),
+            file=sys.stderr)
+    import OpenSSL, inspect
+
+    v = [int(x) for x in OpenSSL.__version__.split(".")][:2]
+    if v < (0, 14):
+        print("You are using an outdated version of pyOpenSSL: mitmproxy requires pyOpenSSL 0.14 or greater.",
+              file=sys.stderr)
+        # Some users apparently have multiple versions of pyOpenSSL installed. Report which one we got.
+        pyopenssl_path = os.path.dirname(inspect.getfile(OpenSSL))
+        print("Your pyOpenSSL %s installation is located at %s" % (OpenSSL.__version__, pyopenssl_path),
+              file=sys.stderr)
+        sys.exit(1)
+
+
+def assert_utf8_env():
+    spec = ""
+    for i in ["LANG", "LC_CTYPE", "LC_ALL"]:
+        spec += os.environ.get(i, "").lower()
+    if "utf" not in spec:
+        print("Error: mitmproxy requires a UTF console environment.", file=sys.stderr)
+        print("Set your LANG enviroment variable to something like en_US.UTF-8", file=sys.stderr)
+        sys.exit(1)
+
+
+def get_server(dummy_server, options):
+    if dummy_server:
+        return DummyServer(options)
+    else:
+        try:
+            return ProxyServer(options)
+        except ProxyServerError, v:
+            print(str(v), file=sys.stderr)
+            sys.exit(1)
+
+
+def mitmproxy_cmdline():
+    # Don't import libmproxy.console for mitmdump, urwid is not available on all platforms.
+    from . import console
+    from .console import palettes
+
+    parser = argparse.ArgumentParser(usage="%(prog)s [options]")
+    parser.add_argument('--version', action='version', version=version.NAMEVERSION)
+    cmdline.common_options(parser)
+    parser.add_argument(
+        "--palette", type=str, default="dark",
+        action="store", dest="palette",
+        help="Select color palette: " + ", ".join(palettes.palettes.keys())
+    )
+    parser.add_argument(
+        "-e",
+        action="store_true", dest="eventlog",
+        help="Show event log."
+    )
+    group = parser.add_argument_group(
+        "Filters",
+        "See help in mitmproxy for filter expression syntax."
+    )
+    group.add_argument(
+        "-i", "--intercept", action="store",
+        type=str, dest="intercept", default=None,
+        help="Intercept filter expression."
+    )
+
+    options = parser.parse_args()
+    if options.quiet:
+        options.verbose = 0
+
+    proxy_config = process_proxy_options(parser, options)
+    console_options = console.Options(**cmdline.get_common_options(options))
+    console_options.palette = options.palette
+    console_options.eventlog = options.eventlog
+    console_options.intercept = options.intercept
+
+    return console_options, proxy_config
+
+
+def mitmproxy():  # pragma: nocover
+    from . import console
+
+    check_versions()
+    assert_utf8_env()
+    console_options, proxy_config = mitmproxy_cmdline()
+    server = get_server(console_options.no_server, proxy_config)
+
+    m = console.ConsoleMaster(server, console_options)
+    try:
+        m.run()
+    except KeyboardInterrupt:
+        pass
+
+
+def mitmdump_cmdline():
+    from . import dump
+
+    parser = argparse.ArgumentParser(usage="%(prog)s [options] [filter]")
+    parser.add_argument('--version', action='version', version="mitmdump" + " " + version.VERSION)
+    cmdline.common_options(parser)
+    parser.add_argument(
+        "--keepserving",
+        action="store_true", dest="keepserving", default=False,
+        help="Continue serving after client playback or file read. We exit by default."
+    )
+    parser.add_argument(
+        "-d",
+        action="count", dest="flow_detail", default=1,
+        help="Increase flow detail display level. Can be passed multiple times."
+    )
+    parser.add_argument('args', nargs=argparse.REMAINDER)
+
+    options = parser.parse_args()
+    if options.quiet:
+        options.verbose = 0
+        options.flow_detail = 0
+
+    proxy_config = process_proxy_options(parser, options)
+    dump_options = dump.Options(**cmdline.get_common_options(options))
+    dump_options.flow_detail = options.flow_detail
+    dump_options.keepserving = options.keepserving
+    dump_options.filtstr = " ".join(options.args) if options.args else None
+
+    return dump_options, proxy_config
+
+
+def mitmdump():  # pragma: nocover
+    from . import dump
+
+    check_versions()
+    dump_options, proxy_config = mitmdump_cmdline()
+    server = get_server(dump_options.no_server, proxy_config)
+
+    try:
+        master = dump.DumpMaster(server, dump_options)
+
+        def cleankill(*args, **kwargs):
+            master.shutdown()
+
+        signal.signal(signal.SIGTERM, cleankill)
+        master.run()
+    except dump.DumpError as e:
+        print("mitmdump: %s" % e, file=sys.stderr)
+        sys.exit(1)
+    except KeyboardInterrupt:
+        pass
+
diff --git a/libmproxy/protocol/http.py b/libmproxy/protocol/http.py
index 5579cb63..1109c753 100644
--- a/libmproxy/protocol/http.py
+++ b/libmproxy/protocol/http.py
@@ -1028,7 +1028,7 @@ class HTTPHandler(ProtocolHandler):
         html_content = '<html><head>\n<title>%d %s</title>\n</head>\n<body>\n%s\n</body>\n</html>' % \
                        (code, response, message)
         self.c.client_conn.wfile.write("HTTP/1.1 %s %s\r\n" % (code, response))
-        self.c.client_conn.wfile.write("Server: %s\r\n" % self.c.server_version)
+        self.c.client_conn.wfile.write("Server: %s\r\n" % self.c.config.server_version)
         self.c.client_conn.wfile.write("Content-type: text/html\r\n")
         self.c.client_conn.wfile.write("Content-Length: %d\r\n" % len(html_content))
         if headers:
@@ -1079,7 +1079,7 @@ class HTTPHandler(ProtocolHandler):
                 self.c.client_conn.send(
                     'HTTP/1.1 200 Connection established\r\n' +
                     'Content-Length: 0\r\n' +
-                    ('Proxy-agent: %s\r\n' % self.c.server_version) +
+                    ('Proxy-agent: %s\r\n' % self.c.config.server_version) +
                     '\r\n'
                 )
                 return self.process_connect_request(self.c.server_conn.address)
diff --git a/libmproxy/proxy/__init__.py b/libmproxy/proxy/__init__.py
index e4c20030..f33d323b 100644
--- a/libmproxy/proxy/__init__.py
+++ b/libmproxy/proxy/__init__.py
@@ -1,2 +1,2 @@
 from .primitives import *
-from .config import ProxyConfig
+from .config import ProxyConfig, process_proxy_options
diff --git a/libmproxy/proxy/config.py b/libmproxy/proxy/config.py
index 441e05f1..62104a24 100644
--- a/libmproxy/proxy/config.py
+++ b/libmproxy/proxy/config.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 import os
 import re
 from netlib import http_auth, certutils
-from .. import utils, platform
+from .. import utils, platform, version
 from .primitives import RegularProxyMode, TransparentProxyMode, UpstreamProxyMode, ReverseProxyMode
 
 TRANSPARENT_SSL_PORTS = [443, 8443]
@@ -15,11 +15,15 @@ def parse_host_pattern(patterns):
 
 
 class ProxyConfig:
-    def __init__(self, confdir=CONF_DIR, ca_file=None, clientcerts=None,
+    def __init__(self, host='', port=8080, server_version=version.NAMEVERSION,
+                 confdir=CONF_DIR, ca_file=None, clientcerts=None,
                  no_upstream_cert=False, body_size_limit=None,
                  mode=None, upstream_server=None, http_form_in=None, http_form_out=None,
                  authenticator=None, ignore=[],
                  ciphers=None, certs=[], certforward=False, ssl_ports=TRANSPARENT_SSL_PORTS):
+        self.host = host
+        self.port = port
+        self.server_version = server_version
         self.ciphers = ciphers
         self.clientcerts = clientcerts
         self.no_upstream_cert = no_upstream_cert
@@ -34,6 +38,7 @@ class ProxyConfig:
         else:
             self.mode = RegularProxyMode()
 
+        # Handle manual overrides of the http forms
         self.mode.http_form_in = http_form_in or self.mode.http_form_in
         self.mode.http_form_out = http_form_out or self.mode.http_form_out
 
@@ -105,6 +110,8 @@ def process_proxy_options(parser, options):
         certs.append(parts)
 
     return ProxyConfig(
+        host=options.addr,
+        port=options.port,
         confdir=options.confdir,
         clientcerts=options.clientcerts,
         no_upstream_cert=options.no_upstream_cert,
diff --git a/libmproxy/proxy/server.py b/libmproxy/proxy/server.py
index f4a978ca..307a4bcd 100644
--- a/libmproxy/proxy/server.py
+++ b/libmproxy/proxy/server.py
@@ -27,14 +27,13 @@ class ProxyServer(tcp.TCPServer):
     allow_reuse_address = True
     bound = True
 
-    def __init__(self, config, port, host='', server_version=version.NAMEVERSION):
+    def __init__(self, config):
         """
             Raises ProxyServerError if there's a startup problem.
         """
         self.config = config
-        self.server_version = server_version
         try:
-            tcp.TCPServer.__init__(self, (host, port))
+            tcp.TCPServer.__init__(self, (config.host, config.port))
         except socket.error, v:
             raise ProxyServerError('Error starting proxy server: ' + repr(v))
         self.channel = None
@@ -47,22 +46,20 @@ class ProxyServer(tcp.TCPServer):
         self.channel = channel
 
     def handle_client_connection(self, conn, client_address):
-        h = ConnectionHandler(self.config, conn, client_address, self, self.channel,
-                              self.server_version)
+        h = ConnectionHandler(self.config, conn, client_address, self, self.channel)
         h.handle()
         h.finish()
 
 
 class ConnectionHandler:
-    def __init__(self, config, client_connection, client_address, server, channel,
-                 server_version):
+    def __init__(self, config, client_connection, client_address, server, channel):
         self.config = config
         """@type: libmproxy.proxy.config.ProxyConfig"""
         self.client_conn = ClientConnection(client_connection, client_address, server)
         """@type: libmproxy.proxy.connection.ClientConnection"""
         self.server_conn = None
         """@type: libmproxy.proxy.connection.ServerConnection"""
-        self.channel, self.server_version = channel, server_version
+        self.channel = channel
 
         self.conntype = "http"
         self.sni = None
diff --git a/mitmdump b/mitmdump
deleted file mode 100755
index 1bf02481..00000000
--- a/mitmdump
+++ /dev/null
@@ -1,67 +0,0 @@
-#!/usr/bin/env python
-import sys, signal
-from libmproxy import proxy, dump, cmdline
-from libmproxy.proxy.config import process_proxy_options
-from libmproxy.proxy.primitives import ProxyServerError
-from libmproxy.proxy.server import DummyServer, ProxyServer
-import libmproxy.version, netlib.version
-import argparse
-
-if __name__ == '__main__':
-    # We don't introduce backward-incompatible changes in patch versions. Only consider major and minor version.
-    if netlib.version.IVERSION[:2] != libmproxy.version.IVERSION[:2]:
-        print >> sys.stderr, ("warning: You are using mitmdump %s with netlib %s. "
-                              "Most likely, that doesn't work - please upgrade!") % (libmproxy.version.VERSION,
-                                                                                     netlib.version.VERSION)
-    parser = argparse.ArgumentParser(usage = "%(prog)s [options] [filter]")
-    parser.add_argument('--version', action='version', version="mitmdump" + " " + libmproxy.version.VERSION)
-    cmdline.common_options(parser)
-    parser.add_argument(
-        "--keepserving",
-        action="store_true", dest="keepserving", default=False,
-        help="Continue serving after client playback or file read. We exit by default."
-    )
-    parser.add_argument(
-        "-d",
-        action="count", dest="flow_detail", default=1,
-        help="Increase flow detail display level. Can be passed multiple times."
-    )
-    parser.add_argument('args', nargs=argparse.REMAINDER)
-
-    options = parser.parse_args()
-
-    if options.quiet:
-        options.verbose = 0
-        options.flow_detail = 0
-
-    proxyconfig = process_proxy_options(parser, options)
-    if options.no_server:
-        server = DummyServer(proxyconfig)
-    else:
-        try:
-            server = ProxyServer(proxyconfig, options.port, options.addr)
-        except ProxyServerError, v:
-            print >> sys.stderr, "mitmdump:", v.args[0]
-            sys.exit(1)
-
-    dumpopts = dump.Options(**cmdline.get_common_options(options))
-    dumpopts.flow_detail = options.flow_detail
-    dumpopts.keepserving = options.keepserving
-
-    if options.args:
-        filt = " ".join(options.args)
-    else:
-        filt = None
-
-    try:
-        m = dump.DumpMaster(server, dumpopts, filt)
-        def cleankill(*args, **kwargs):
-            m.shutdown()
-        signal.signal(signal.SIGTERM, cleankill)
-        m.run()
-    except dump.DumpError, e:
-        print >> sys.stderr, "mitmdump:", e
-        sys.exit(1)
-    except KeyboardInterrupt:
-        pass
-
diff --git a/mitmproxy b/mitmproxy
deleted file mode 100755
index 90f9ce1f..00000000
--- a/mitmproxy
+++ /dev/null
@@ -1,73 +0,0 @@
-#!/usr/bin/env python
-import sys, argparse, os
-from libmproxy import proxy, console, cmdline
-from libmproxy.proxy.config import process_proxy_options
-from libmproxy.proxy.primitives import ProxyServerError
-from libmproxy.proxy.server import DummyServer, ProxyServer
-import libmproxy.version, netlib.version
-from libmproxy.console import palettes
-
-
-if __name__ == '__main__':
-    # We don't introduce backward-incompatible changes in patch versions. Only consider major and minor version.
-    if netlib.version.IVERSION[:2] != libmproxy.version.IVERSION[:2]:
-        print >> sys.stderr, ("warning: You are using mitmproxy %s with netlib %s. "
-                              "Most likely, that doesn't work - please upgrade!") % (libmproxy.version.VERSION,
-                                                                                     netlib.version.VERSION)
-    parser = argparse.ArgumentParser(usage = "%(prog)s [options]")
-    parser.add_argument('--version', action='version', version=libmproxy.version.NAMEVERSION)
-    cmdline.common_options(parser)
-    parser.add_argument(
-        "--palette", type=str, default="dark",
-        action="store", dest="palette",
-        help="Select color palette: " + ", ".join(palettes.palettes.keys())
-    )
-    parser.add_argument(
-        "-e",
-        action="store_true", dest="eventlog",
-        help="Show event log."
-    )
-
-
-    group = parser.add_argument_group(
-                        "Filters",
-                        "See help in mitmproxy for filter expression syntax."
-                    )
-    group.add_argument(
-        "-i", "--intercept", action="store",
-        type = str, dest="intercept", default=None,
-        help = "Intercept filter expression."
-    )
-    options = parser.parse_args()
-
-    config = process_proxy_options(parser, options)
-
-    if options.no_server:
-        server = DummyServer(config)
-    else:
-        try:
-            server = ProxyServer(config, options.port, options.addr)
-        except ProxyServerError, v:
-            print >> sys.stderr, "mitmproxy:", v.args[0]
-            sys.exit(1)
-
-    opts = console.Options(**cmdline.get_common_options(options))
-    opts.eventlog = options.eventlog
-    opts.intercept = options.intercept
-    opts.palette = options.palette
-
-    spec = ""
-    for i in ["LANG", "LC_CTYPE", "LC_ALL"]:
-        spec += os.environ.get(i, "").lower()
-    if "utf" not in spec:
-        print >> sys.stderr, "Error: mitmproxy requires a UTF console environment."
-        print >> sys.stderr, "Set your LANG enviroment variable to something like en_US.UTF-8"
-        sys.exit(1)
-
-    m = console.ConsoleMaster(server, opts)
-    try:
-        m.run()
-    except KeyboardInterrupt:
-        pass
-
-
diff --git a/test/test_dump.py b/test/test_dump.py
index fd93cc03..2e58e073 100644
--- a/test/test_dump.py
+++ b/test/test_dump.py
@@ -35,8 +35,8 @@ class TestDumpMaster:
 
     def _dummy_cycle(self, n, filt, content, **options):
         cs = StringIO()
-        o = dump.Options(**options)
-        m = dump.DumpMaster(None, o, filt, outfile=cs)
+        o = dump.Options(filtstr=filt, **options)
+        m = dump.DumpMaster(None, o, outfile=cs)
         for i in range(n):
             self._cycle(m, content)
         m.shutdown()
@@ -52,7 +52,7 @@ class TestDumpMaster:
     def test_error(self):
         cs = StringIO()
         o = dump.Options(flow_detail=1)
-        m = dump.DumpMaster(None, o, None, outfile=cs)
+        m = dump.DumpMaster(None, o, outfile=cs)
         f = tutils.tflow(err=True)
         m.handle_request(f)
         assert m.handle_error(f)
@@ -62,24 +62,24 @@ class TestDumpMaster:
         cs = StringIO()
 
         o = dump.Options(server_replay="nonexistent", kill=True)
-        tutils.raises(dump.DumpError, dump.DumpMaster, None, o, None, outfile=cs)
+        tutils.raises(dump.DumpError, dump.DumpMaster, None, o, outfile=cs)
 
         with tutils.tmpdir() as t:
             p = os.path.join(t, "rep")
             self._flowfile(p)
 
             o = dump.Options(server_replay=p, kill=True)
-            m = dump.DumpMaster(None, o, None, outfile=cs)
+            m = dump.DumpMaster(None, o, outfile=cs)
 
             self._cycle(m, "content")
             self._cycle(m, "content")
 
             o = dump.Options(server_replay=p, kill=False)
-            m = dump.DumpMaster(None, o, None, outfile=cs)
+            m = dump.DumpMaster(None, o, outfile=cs)
             self._cycle(m, "nonexistent")
 
             o = dump.Options(client_replay=p, kill=False)
-            m = dump.DumpMaster(None, o, None, outfile=cs)
+            m = dump.DumpMaster(None, o, outfile=cs)
 
     def test_read(self):
         with tutils.tmpdir() as t:
@@ -105,18 +105,18 @@ class TestDumpMaster:
     def test_app(self):
         o = dump.Options(app=True)
         s = mock.MagicMock()
-        m = dump.DumpMaster(s, o, None)
+        m = dump.DumpMaster(s, o)
         assert len(m.apps.apps) == 1
 
     def test_replacements(self):
         o = dump.Options(replacements=[(".*", "content", "foo")])
-        m = dump.DumpMaster(None, o, None)
+        m = dump.DumpMaster(None, o)
         f = self._cycle(m, "content")
         assert f.request.content == "foo"
 
     def test_setheader(self):
         o = dump.Options(setheaders=[(".*", "one", "two")])
-        m = dump.DumpMaster(None, o, None)
+        m = dump.DumpMaster(None, o)
         f = self._cycle(m, "content")
         assert f.request.headers["one"] == ["two"]
 
diff --git a/test/test_proxy.py b/test/test_proxy.py
index 5f1b83f6..c396183b 100644
--- a/test/test_proxy.py
+++ b/test/test_proxy.py
@@ -1,6 +1,6 @@
 import argparse
 from libmproxy import cmdline
-from libmproxy.proxy.config import process_proxy_options
+from libmproxy.proxy import ProxyConfig, process_proxy_options
 from libmproxy.proxy.connection import ServerConnection
 from libmproxy.proxy.primitives import ProxyError
 from libmproxy.proxy.server import DummyServer, ProxyServer, ConnectionHandler
@@ -119,16 +119,16 @@ class TestProcessProxyOptions:
 class TestProxyServer:
     @tutils.SkipWindows  # binding to 0.0.0.0:1 works without special permissions on Windows
     def test_err(self):
-        parser = argparse.ArgumentParser()
-        cmdline.common_options(parser)
-        opts = parser.parse_args(args=[])
-        tutils.raises("error starting proxy server", ProxyServer, opts, 1)
+        conf = ProxyConfig(
+            port=1
+        )
+        tutils.raises("error starting proxy server", ProxyServer, conf)
 
     def test_err_2(self):
-        parser = argparse.ArgumentParser()
-        cmdline.common_options(parser)
-        opts = parser.parse_args(args=[])
-        tutils.raises("error starting proxy server", ProxyServer, opts, 8080, "invalidhost")
+        conf = ProxyConfig(
+            host="invalidhost"
+        )
+        tutils.raises("error starting proxy server", ProxyServer, conf)
 
 
 class TestDummyServer:
@@ -142,6 +142,6 @@ class TestConnectionHandler:
     def test_fatal_error(self):
         config = mock.Mock()
         config.mode.get_upstream_server.side_effect = RuntimeError
-        c = ConnectionHandler(config, mock.MagicMock(), ("127.0.0.1", 8080), None, mock.MagicMock(), None)
+        c = ConnectionHandler(config, mock.MagicMock(), ("127.0.0.1", 8080), None, mock.MagicMock())
         with tutils.capture_stderr(c.handle) as output:
             assert "mitmproxy has crashed" in output
diff --git a/test/tservers.py b/test/tservers.py
index 009a3c92..2097631e 100644
--- a/test/tservers.py
+++ b/test/tservers.py
@@ -29,7 +29,8 @@ def errapp(environ, start_response):
 
 class TestMaster(flow.FlowMaster):
     def __init__(self, config):
-        s = ProxyServer(config, 0)
+        config.port = 0
+        s = ProxyServer(config)
         state = flow.State()
         flow.FlowMaster.__init__(self, s, state)
         self.apps.add(testapp, "testapp", 80)
