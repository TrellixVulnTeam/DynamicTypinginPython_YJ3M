commit ccf7182a115bc45156c085fde082585bd0322eb6
Author: Martin Plattner <git@mplattner.at>
Date:   Thu Jun 25 15:35:03 2020 +0200

    setheaders addon: removal of existing headers

diff --git a/mitmproxy/addons/setheaders.py b/mitmproxy/addons/setheaders.py
index 9475ee19..b1c21af2 100644
--- a/mitmproxy/addons/setheaders.py
+++ b/mitmproxy/addons/setheaders.py
@@ -50,7 +50,7 @@ class SetHeaders:
             "setheaders", typing.Sequence[str], [],
             """
             Header set pattern of the form "/header-name/header-value[/flow-filter]", where the
-            separator can be any character.
+            separator can be any character. An empty header-value removes existing header-name headers.
             """
         )
 
@@ -72,7 +72,7 @@ class SetHeaders:
             if flow_filter(f):
                 hdrs.pop(header, None)
         for header, value, _, flow_filter in self.lst:
-            if flow_filter(f):
+            if flow_filter(f) and value:
                 hdrs.add(header, value)
 
     def request(self, flow):
diff --git a/test/mitmproxy/addons/test_setheaders.py b/test/mitmproxy/addons/test_setheaders.py
index 1e187fe5..23676eaa 100644
--- a/test/mitmproxy/addons/test_setheaders.py
+++ b/test/mitmproxy/addons/test_setheaders.py
@@ -68,3 +68,37 @@ class TestSetHeaders:
             f.request.headers["one"] = "xxx"
             sh.request(f)
             assert f.request.headers.get_all("one") == ["two", "three"]
+
+            # test removal of existing header
+            tctx.configure(
+                sh,
+                setheaders = [
+                    "/one//~q",
+                    "/one//~s"
+                ]
+            )
+            f = tflow.tflow()
+            f.request.headers["one"] = "xxx"
+            sh.request(f)
+            assert "one" not in f.request.headers
+
+            f = tflow.tflow(resp=True)
+            f.response.headers["one"] = "xxx"
+            sh.response(f)
+            assert "one" not in f.response.headers
+
+            tctx.configure(
+                sh,
+                setheaders = [
+                    "/one/"
+                ]
+            )
+            f = tflow.tflow()
+            f.request.headers["one"] = "xxx"
+            sh.request(f)
+            assert "one" not in f.request.headers
+
+            f = tflow.tflow(resp=True)
+            f.response.headers["one"] = "xxx"
+            sh.response(f)
+            assert "one" not in f.response.headers
\ No newline at end of file
