commit b09dbbe20934e0da9fe45e254f74719e5e63423f
Author: Aldo Cortesi <aldo@nullcube.com>
Date:   Thu Jan 1 16:41:45 2015 +1300

    Replace custom EventEmitter with one from browserify

diff --git a/libmproxy/web/static/app.js b/libmproxy/web/static/app.js
index c49bc950..eefdfb3d 100644
--- a/libmproxy/web/static/app.js
+++ b/libmproxy/web/static/app.js
@@ -1,4 +1,307 @@
 (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
+// Copyright Joyent, Inc. and other Node contributors.
+//
+// Permission is hereby granted, free of charge, to any person obtaining a
+// copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to permit
+// persons to whom the Software is furnished to do so, subject to the
+// following conditions:
+//
+// The above copyright notice and this permission notice shall be included
+// in all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
+// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
+// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
+// USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+function EventEmitter() {
+  this._events = this._events || {};
+  this._maxListeners = this._maxListeners || undefined;
+}
+module.exports = EventEmitter;
+
+// Backwards-compat with node 0.10.x
+EventEmitter.EventEmitter = EventEmitter;
+
+EventEmitter.prototype._events = undefined;
+EventEmitter.prototype._maxListeners = undefined;
+
+// By default EventEmitters will print a warning if more than 10 listeners are
+// added to it. This is a useful default which helps finding memory leaks.
+EventEmitter.defaultMaxListeners = 10;
+
+// Obviously not all Emitters should be limited to 10. This function allows
+// that to be increased. Set to zero for unlimited.
+EventEmitter.prototype.setMaxListeners = function(n) {
+  if (!isNumber(n) || n < 0 || isNaN(n))
+    throw TypeError('n must be a positive number');
+  this._maxListeners = n;
+  return this;
+};
+
+EventEmitter.prototype.emit = function(type) {
+  var er, handler, len, args, i, listeners;
+
+  if (!this._events)
+    this._events = {};
+
+  // If there is no 'error' event listener then throw.
+  if (type === 'error') {
+    if (!this._events.error ||
+        (isObject(this._events.error) && !this._events.error.length)) {
+      er = arguments[1];
+      if (er instanceof Error) {
+        throw er; // Unhandled 'error' event
+      }
+      throw TypeError('Uncaught, unspecified "error" event.');
+    }
+  }
+
+  handler = this._events[type];
+
+  if (isUndefined(handler))
+    return false;
+
+  if (isFunction(handler)) {
+    switch (arguments.length) {
+      // fast cases
+      case 1:
+        handler.call(this);
+        break;
+      case 2:
+        handler.call(this, arguments[1]);
+        break;
+      case 3:
+        handler.call(this, arguments[1], arguments[2]);
+        break;
+      // slower
+      default:
+        len = arguments.length;
+        args = new Array(len - 1);
+        for (i = 1; i < len; i++)
+          args[i - 1] = arguments[i];
+        handler.apply(this, args);
+    }
+  } else if (isObject(handler)) {
+    len = arguments.length;
+    args = new Array(len - 1);
+    for (i = 1; i < len; i++)
+      args[i - 1] = arguments[i];
+
+    listeners = handler.slice();
+    len = listeners.length;
+    for (i = 0; i < len; i++)
+      listeners[i].apply(this, args);
+  }
+
+  return true;
+};
+
+EventEmitter.prototype.addListener = function(type, listener) {
+  var m;
+
+  if (!isFunction(listener))
+    throw TypeError('listener must be a function');
+
+  if (!this._events)
+    this._events = {};
+
+  // To avoid recursion in the case that type === "newListener"! Before
+  // adding it to the listeners, first emit "newListener".
+  if (this._events.newListener)
+    this.emit('newListener', type,
+              isFunction(listener.listener) ?
+              listener.listener : listener);
+
+  if (!this._events[type])
+    // Optimize the case of one listener. Don't need the extra array object.
+    this._events[type] = listener;
+  else if (isObject(this._events[type]))
+    // If we've already got an array, just append.
+    this._events[type].push(listener);
+  else
+    // Adding the second element, need to change to array.
+    this._events[type] = [this._events[type], listener];
+
+  // Check for listener leak
+  if (isObject(this._events[type]) && !this._events[type].warned) {
+    var m;
+    if (!isUndefined(this._maxListeners)) {
+      m = this._maxListeners;
+    } else {
+      m = EventEmitter.defaultMaxListeners;
+    }
+
+    if (m && m > 0 && this._events[type].length > m) {
+      this._events[type].warned = true;
+      console.error('(node) warning: possible EventEmitter memory ' +
+                    'leak detected. %d listeners added. ' +
+                    'Use emitter.setMaxListeners() to increase limit.',
+                    this._events[type].length);
+      if (typeof console.trace === 'function') {
+        // not supported in IE 10
+        console.trace();
+      }
+    }
+  }
+
+  return this;
+};
+
+EventEmitter.prototype.on = EventEmitter.prototype.addListener;
+
+EventEmitter.prototype.once = function(type, listener) {
+  if (!isFunction(listener))
+    throw TypeError('listener must be a function');
+
+  var fired = false;
+
+  function g() {
+    this.removeListener(type, g);
+
+    if (!fired) {
+      fired = true;
+      listener.apply(this, arguments);
+    }
+  }
+
+  g.listener = listener;
+  this.on(type, g);
+
+  return this;
+};
+
+// emits a 'removeListener' event iff the listener was removed
+EventEmitter.prototype.removeListener = function(type, listener) {
+  var list, position, length, i;
+
+  if (!isFunction(listener))
+    throw TypeError('listener must be a function');
+
+  if (!this._events || !this._events[type])
+    return this;
+
+  list = this._events[type];
+  length = list.length;
+  position = -1;
+
+  if (list === listener ||
+      (isFunction(list.listener) && list.listener === listener)) {
+    delete this._events[type];
+    if (this._events.removeListener)
+      this.emit('removeListener', type, listener);
+
+  } else if (isObject(list)) {
+    for (i = length; i-- > 0;) {
+      if (list[i] === listener ||
+          (list[i].listener && list[i].listener === listener)) {
+        position = i;
+        break;
+      }
+    }
+
+    if (position < 0)
+      return this;
+
+    if (list.length === 1) {
+      list.length = 0;
+      delete this._events[type];
+    } else {
+      list.splice(position, 1);
+    }
+
+    if (this._events.removeListener)
+      this.emit('removeListener', type, listener);
+  }
+
+  return this;
+};
+
+EventEmitter.prototype.removeAllListeners = function(type) {
+  var key, listeners;
+
+  if (!this._events)
+    return this;
+
+  // not listening for removeListener, no need to emit
+  if (!this._events.removeListener) {
+    if (arguments.length === 0)
+      this._events = {};
+    else if (this._events[type])
+      delete this._events[type];
+    return this;
+  }
+
+  // emit removeListener for all listeners on all events
+  if (arguments.length === 0) {
+    for (key in this._events) {
+      if (key === 'removeListener') continue;
+      this.removeAllListeners(key);
+    }
+    this.removeAllListeners('removeListener');
+    this._events = {};
+    return this;
+  }
+
+  listeners = this._events[type];
+
+  if (isFunction(listeners)) {
+    this.removeListener(type, listeners);
+  } else {
+    // LIFO order
+    while (listeners.length)
+      this.removeListener(type, listeners[listeners.length - 1]);
+  }
+  delete this._events[type];
+
+  return this;
+};
+
+EventEmitter.prototype.listeners = function(type) {
+  var ret;
+  if (!this._events || !this._events[type])
+    ret = [];
+  else if (isFunction(this._events[type]))
+    ret = [this._events[type]];
+  else
+    ret = this._events[type].slice();
+  return ret;
+};
+
+EventEmitter.listenerCount = function(emitter, type) {
+  var ret;
+  if (!emitter._events || !emitter._events[type])
+    ret = 0;
+  else if (isFunction(emitter._events[type]))
+    ret = 1;
+  else
+    ret = emitter._events[type].length;
+  return ret;
+};
+
+function isFunction(arg) {
+  return typeof arg === 'function';
+}
+
+function isNumber(arg) {
+  return typeof arg === 'number';
+}
+
+function isObject(arg) {
+  return typeof arg === 'object' && arg !== null;
+}
+
+function isUndefined(arg) {
+  return arg === void 0;
+}
+
+},{}],2:[function(require,module,exports){
 var $ = require("jquery");
 
 var ActionTypes = {
@@ -118,10 +421,8 @@ module.exports = {
     ConnectionActions: ConnectionActions,
     FlowActions: FlowActions,
     StoreCmds: StoreCmds
-
-
 };
-},{"jquery":"jquery"}],2:[function(require,module,exports){
+},{"jquery":"jquery"}],3:[function(require,module,exports){
 
 var React = require("react");
 var ReactRouter = require("react-router");
@@ -137,7 +438,7 @@ $(function () {
         React.render(React.createElement(Handler, null), document.body);
     });
 });
-},{"./components/proxyapp.js":10,"./connection":13,"jquery":"jquery","react":"react","react-router":"react-router"}],3:[function(require,module,exports){
+},{"./components/proxyapp.js":11,"./connection":14,"jquery":"jquery","react":"react","react-router":"react-router"}],4:[function(require,module,exports){
 var React = require("react");
 var utils = require("./utils.js");
 var VirtualScrollMixin = require("./virtualscroll.js");
@@ -293,7 +594,7 @@ var EventLog = React.createClass({displayName: "EventLog",
 });
 
 module.exports = EventLog;
-},{"../store/view.js":18,"./utils.js":11,"./virtualscroll.js":12,"react":"react"}],4:[function(require,module,exports){
+},{"../store/view.js":19,"./utils.js":12,"./virtualscroll.js":13,"react":"react"}],5:[function(require,module,exports){
 var React = require("react");
 var _ = require("lodash");
 
@@ -693,7 +994,7 @@ var FlowDetail = React.createClass({displayName: "FlowDetail",
 module.exports = {
     FlowDetail: FlowDetail
 };
-},{"../actions.js":1,"../flow/utils.js":16,"../utils.js":19,"./utils.js":11,"lodash":"lodash","react":"react"}],5:[function(require,module,exports){
+},{"../actions.js":2,"../flow/utils.js":17,"../utils.js":20,"./utils.js":12,"lodash":"lodash","react":"react"}],6:[function(require,module,exports){
 var React = require("react");
 var flowutils = require("../flow/utils.js");
 var utils = require("../utils.js");
@@ -859,7 +1160,7 @@ module.exports = all_columns;
 
 
 
-},{"../flow/utils.js":16,"../utils.js":19,"react":"react"}],6:[function(require,module,exports){
+},{"../flow/utils.js":17,"../utils.js":20,"react":"react"}],7:[function(require,module,exports){
 var React = require("react");
 var utils = require("./utils.js");
 var VirtualScrollMixin = require("./virtualscroll.js");
@@ -997,7 +1298,7 @@ var FlowTable = React.createClass({displayName: "FlowTable",
 
 module.exports = FlowTable;
 
-},{"./flowtable-columns.js":5,"./utils.js":11,"./virtualscroll.js":12,"react":"react"}],7:[function(require,module,exports){
+},{"./flowtable-columns.js":6,"./utils.js":12,"./virtualscroll.js":13,"react":"react"}],8:[function(require,module,exports){
 var React = require("react");
 
 var Footer = React.createClass({displayName: "Footer",
@@ -1015,7 +1316,7 @@ var Footer = React.createClass({displayName: "Footer",
 });
 
 module.exports = Footer;
-},{"react":"react"}],8:[function(require,module,exports){
+},{"react":"react"}],9:[function(require,module,exports){
 var React = require("react");
 var $ = require("jquery");
 
@@ -1405,7 +1706,7 @@ var Header = React.createClass({displayName: "Header",
 module.exports = {
     Header: Header
 }
-},{"./utils.js":11,"jquery":"jquery","react":"react"}],9:[function(require,module,exports){
+},{"./utils.js":12,"jquery":"jquery","react":"react"}],10:[function(require,module,exports){
 var React = require("react");
 
 var utils = require("./utils.js");
@@ -1639,7 +1940,7 @@ var MainView = React.createClass({displayName: "MainView",
 
 module.exports = MainView;
 
-},{"../filt/filt.js":15,"../store/view.js":18,"../utils.js":19,"./flowdetail.js":4,"./flowtable.js":6,"./utils.js":11,"react":"react"}],10:[function(require,module,exports){
+},{"../filt/filt.js":16,"../store/view.js":19,"../utils.js":20,"./flowdetail.js":5,"./flowtable.js":7,"./utils.js":12,"react":"react"}],11:[function(require,module,exports){
 var React = require("react");
 var ReactRouter = require("react-router");
 var _ = require("lodash");
@@ -1733,7 +2034,7 @@ module.exports = {
 };
 
 
-},{"../store/store.js":17,"./eventlog.js":3,"./footer.js":7,"./header.js":8,"./mainview.js":9,"./utils.js":11,"lodash":"lodash","react":"react","react-router":"react-router"}],11:[function(require,module,exports){
+},{"../store/store.js":18,"./eventlog.js":4,"./footer.js":8,"./header.js":9,"./mainview.js":10,"./utils.js":12,"lodash":"lodash","react":"react","react-router":"react-router"}],12:[function(require,module,exports){
 var React = require("react");
 var ReactRouter = require("react-router");
 var _ = require("lodash");
@@ -1930,7 +2231,7 @@ module.exports = {
     AutoScrollMixin: AutoScrollMixin,
     Splitter: Splitter
 }
-},{"lodash":"lodash","react":"react","react-router":"react-router"}],12:[function(require,module,exports){
+},{"lodash":"lodash","react":"react","react-router":"react-router"}],13:[function(require,module,exports){
 var React = require("react");
 
 var VirtualScrollMixin = {
@@ -2016,7 +2317,7 @@ var VirtualScrollMixin = {
 };
 
 module.exports  = VirtualScrollMixin;
-},{"react":"react"}],13:[function(require,module,exports){
+},{"react":"react"}],14:[function(require,module,exports){
 
 var actions = require("./actions.js");
 
@@ -2045,7 +2346,7 @@ function Connection(url) {
 }
 
 module.exports = Connection;
-},{"./actions.js":1}],14:[function(require,module,exports){
+},{"./actions.js":2}],15:[function(require,module,exports){
 const PayloadSources = {
     VIEW: "view",
     SERVER: "server"
@@ -2085,7 +2386,7 @@ AppDispatcher.dispatchServerAction = function (action) {
 module.exports = {
     AppDispatcher: AppDispatcher
 };
-},{}],15:[function(require,module,exports){
+},{}],16:[function(require,module,exports){
 /* jshint ignore:start */
 Filt = (function() {
   /*
@@ -3863,7 +4164,7 @@ Filt = (function() {
 
 module.exports = Filt;
 
-},{}],16:[function(require,module,exports){
+},{}],17:[function(require,module,exports){
 var _ = require("lodash");
 
 var _MessageUtils = {
@@ -3930,10 +4231,11 @@ module.exports = {
     RequestUtils: RequestUtils
 
 }
-},{"lodash":"lodash"}],17:[function(require,module,exports){
+},{"lodash":"lodash"}],18:[function(require,module,exports){
 
 var _ = require("lodash");
 var $ = require("jquery");
+var EventEmitter = require('events').EventEmitter;
 
 var utils = require("../utils.js");
 var actions = require("../actions.js");
@@ -3941,10 +4243,10 @@ var dispatcher = require("../dispatcher.js");
 
 
 function ListStore() {
-    utils.EventEmitter.call(this);
+    EventEmitter.call(this);
     this.reset();
 }
-_.extend(ListStore.prototype, utils.EventEmitter.prototype, {
+_.extend(ListStore.prototype, EventEmitter.prototype, {
     add: function (elem) {
         if (elem.id in this._pos_map) {
             return;
@@ -3990,10 +4292,10 @@ _.extend(ListStore.prototype, utils.EventEmitter.prototype, {
 
 
 function DictStore() {
-    utils.EventEmitter.call(this);
+    EventEmitter.call(this);
     this.reset();
 }
-_.extend(DictStore.prototype, utils.EventEmitter.prototype, {
+_.extend(DictStore.prototype, EventEmitter.prototype, {
     update: function (dict) {
         _.merge(this.dict, dict);
         this.emit("recalculate");
@@ -4111,9 +4413,12 @@ module.exports = {
     SettingsStore: SettingsStore,
     FlowStore: FlowStore
 };
-},{"../actions.js":1,"../dispatcher.js":14,"../utils.js":19,"jquery":"jquery","lodash":"lodash"}],18:[function(require,module,exports){
+},{"../actions.js":2,"../dispatcher.js":15,"../utils.js":20,"events":1,"jquery":"jquery","lodash":"lodash"}],19:[function(require,module,exports){
+
+var EventEmitter = require('events').EventEmitter;
 var _ = require("lodash");
 
+
 var utils = require("../utils.js");
 
 function SortByStoreOrder(elem) {
@@ -4126,7 +4431,7 @@ var default_filt = function(elem){
 };
 
 function StoreView(store, filt, sortfun) {
-    utils.EventEmitter.call(this);
+    EventEmitter.call(this);
     filt = filt || default_filt;
     sortfun = sortfun || default_sort;
 
@@ -4144,7 +4449,7 @@ function StoreView(store, filt, sortfun) {
     this.recalculate(filt, sortfun);
 }
 
-_.extend(StoreView.prototype, utils.EventEmitter.prototype, {
+_.extend(StoreView.prototype, EventEmitter.prototype, {
     close: function () {
         this.store.removeListener("add", this.add);
         this.store.removeListener("update", this.update);
@@ -4219,7 +4524,7 @@ _.extend(StoreView.prototype, utils.EventEmitter.prototype, {
 module.exports = {
     StoreView: StoreView
 };
-},{"../utils.js":19,"lodash":"lodash"}],19:[function(require,module,exports){
+},{"../utils.js":20,"events":1,"lodash":"lodash"}],20:[function(require,module,exports){
 var $ = require("jquery");
 
 
@@ -4275,37 +4580,6 @@ var formatTimeStamp = function (seconds) {
 };
 
 
-function EventEmitter() {
-    this.listeners = {};
-}
-EventEmitter.prototype.emit = function (event) {
-    if (!(event in this.listeners)) {
-        return;
-    }
-    var args = Array.prototype.slice.call(arguments, 1);
-    this.listeners[event].forEach(function (listener) {
-        listener.apply(this, args);
-    }.bind(this));
-};
-EventEmitter.prototype.addListener = function (events, f) {
-    events.split(" ").forEach(function (event) {
-        this.listeners[event] = this.listeners[event] || [];
-        this.listeners[event].push(f);
-    }.bind(this));
-};
-EventEmitter.prototype.removeListener = function (events, f) {
-    if (!(events in this.listeners)) {
-        return false;
-    }
-    events.split(" ").forEach(function (event) {
-        var index = this.listeners[event].indexOf(f);
-        if (index >= 0) {
-            this.listeners[event].splice(index, 1);
-        }
-    }.bind(this));
-};
-
-
 function getCookie(name) {
     var r = document.cookie.match("\\b" + name + "=([^;]*)\\b");
     return r ? r[1] : undefined;
@@ -4331,11 +4605,10 @@ $(document).ajaxError(function (event, jqXHR, ajaxSettings, thrownError) {
 });
 
 module.exports = {
-    EventEmitter: EventEmitter,
     formatSize: formatSize,
     formatTimeDelta: formatTimeDelta,
     formatTimeStamp: formatTimeStamp,
     Key: Key
 };
-},{"jquery":"jquery"}]},{},[2])
-//# sourceMappingURL=data:application/json;base64,
+},{"jquery":"jquery"}]},{},[3])
+//# sourceMappingURL=data:application/json;base64,
diff --git a/web/src/js/actions.js b/web/src/js/actions.js
index ea86c8f3..258501a4 100644
--- a/web/src/js/actions.js
+++ b/web/src/js/actions.js
@@ -117,6 +117,4 @@ module.exports = {
     ConnectionActions: ConnectionActions,
     FlowActions: FlowActions,
     StoreCmds: StoreCmds
-
-
 };
\ No newline at end of file
diff --git a/web/src/js/store/store.js b/web/src/js/store/store.js
index 3def7723..5024049f 100644
--- a/web/src/js/store/store.js
+++ b/web/src/js/store/store.js
@@ -1,6 +1,7 @@
 
 var _ = require("lodash");
 var $ = require("jquery");
+var EventEmitter = require('events').EventEmitter;
 
 var utils = require("../utils.js");
 var actions = require("../actions.js");
@@ -8,10 +9,10 @@ var dispatcher = require("../dispatcher.js");
 
 
 function ListStore() {
-    utils.EventEmitter.call(this);
+    EventEmitter.call(this);
     this.reset();
 }
-_.extend(ListStore.prototype, utils.EventEmitter.prototype, {
+_.extend(ListStore.prototype, EventEmitter.prototype, {
     add: function (elem) {
         if (elem.id in this._pos_map) {
             return;
@@ -57,10 +58,10 @@ _.extend(ListStore.prototype, utils.EventEmitter.prototype, {
 
 
 function DictStore() {
-    utils.EventEmitter.call(this);
+    EventEmitter.call(this);
     this.reset();
 }
-_.extend(DictStore.prototype, utils.EventEmitter.prototype, {
+_.extend(DictStore.prototype, EventEmitter.prototype, {
     update: function (dict) {
         _.merge(this.dict, dict);
         this.emit("recalculate");
diff --git a/web/src/js/store/view.js b/web/src/js/store/view.js
index e96d1bcc..b5db9287 100644
--- a/web/src/js/store/view.js
+++ b/web/src/js/store/view.js
@@ -1,5 +1,8 @@
+
+var EventEmitter = require('events').EventEmitter;
 var _ = require("lodash");
 
+
 var utils = require("../utils.js");
 
 function SortByStoreOrder(elem) {
@@ -12,7 +15,7 @@ var default_filt = function(elem){
 };
 
 function StoreView(store, filt, sortfun) {
-    utils.EventEmitter.call(this);
+    EventEmitter.call(this);
     filt = filt || default_filt;
     sortfun = sortfun || default_sort;
 
@@ -30,7 +33,7 @@ function StoreView(store, filt, sortfun) {
     this.recalculate(filt, sortfun);
 }
 
-_.extend(StoreView.prototype, utils.EventEmitter.prototype, {
+_.extend(StoreView.prototype, EventEmitter.prototype, {
     close: function () {
         this.store.removeListener("add", this.add);
         this.store.removeListener("update", this.update);
diff --git a/web/src/js/utils.js b/web/src/js/utils.js
index 583df5ce..d5093702 100644
--- a/web/src/js/utils.js
+++ b/web/src/js/utils.js
@@ -53,37 +53,6 @@ var formatTimeStamp = function (seconds) {
 };
 
 
-function EventEmitter() {
-    this.listeners = {};
-}
-EventEmitter.prototype.emit = function (event) {
-    if (!(event in this.listeners)) {
-        return;
-    }
-    var args = Array.prototype.slice.call(arguments, 1);
-    this.listeners[event].forEach(function (listener) {
-        listener.apply(this, args);
-    }.bind(this));
-};
-EventEmitter.prototype.addListener = function (events, f) {
-    events.split(" ").forEach(function (event) {
-        this.listeners[event] = this.listeners[event] || [];
-        this.listeners[event].push(f);
-    }.bind(this));
-};
-EventEmitter.prototype.removeListener = function (events, f) {
-    if (!(events in this.listeners)) {
-        return false;
-    }
-    events.split(" ").forEach(function (event) {
-        var index = this.listeners[event].indexOf(f);
-        if (index >= 0) {
-            this.listeners[event].splice(index, 1);
-        }
-    }.bind(this));
-};
-
-
 function getCookie(name) {
     var r = document.cookie.match("\\b" + name + "=([^;]*)\\b");
     return r ? r[1] : undefined;
@@ -109,7 +78,6 @@ $(document).ajaxError(function (event, jqXHR, ajaxSettings, thrownError) {
 });
 
 module.exports = {
-    EventEmitter: EventEmitter,
     formatSize: formatSize,
     formatTimeDelta: formatTimeDelta,
     formatTimeStamp: formatTimeStamp,
