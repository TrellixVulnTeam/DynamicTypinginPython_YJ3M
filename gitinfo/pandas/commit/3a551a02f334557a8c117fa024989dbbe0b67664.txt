commit 3a551a02f334557a8c117fa024989dbbe0b67664
Author: Chang She <changshe@gmail.com>
Date:   Fri Jul 6 17:29:34 2012 -0400

    ENH: reset_index by level

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index e977b5ab5..0fc0158e4 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2317,7 +2317,7 @@ class DataFrame(NDFrame):
         frame.index = index
         return frame
 
-    def reset_index(self, drop=False):
+    def reset_index(self, level=None, drop=False):
         """
         For DataFrame with multi-level index, return new DataFrame with
         labeling information in the columns under the index names, defaulting
@@ -2327,6 +2327,9 @@ class DataFrame(NDFrame):
 
         Parameters
         ----------
+        level : int, str, tuple, or list, default None
+            Only remove the given levels from the index. Removes all levels by
+            default
         drop : boolean, default False
             Do not try to insert index into dataframe columns
 
@@ -2341,10 +2344,18 @@ class DataFrame(NDFrame):
                 values = lib.maybe_convert_objects(values)
             return values
 
+        new_index = np.arange(len(new_obj))
         if not drop:
             if isinstance(self.index, MultiIndex):
                 names = self.index.names
                 zipped = zip(self.index.levels, self.index.labels)
+
+                if level is not None:
+                    if not isinstance(level, (tuple, list)):
+                        level = [level]
+
+                    level = [self.index._get_level_number(lev) for lev in level]
+
                 for i, (lev, lab) in reversed(list(enumerate(zipped))):
                     col_name = names[i]
                     if col_name is None:
@@ -2352,13 +2363,17 @@ class DataFrame(NDFrame):
 
                     # to ndarray and maybe infer different dtype
                     level_values = _maybe_cast(lev.values)
-                    new_obj.insert(0, col_name, level_values.take(lab))
+                    if level is None or i in level:
+                        new_obj.insert(0, col_name, level_values.take(lab))
+
+                if level is not None and len(level) < len(self.index.levels):
+                    new_index = self.index.droplevel(level)
             else:
                 name = self.index.name
                 if name is None or name == 'index':
                     name = 'index' if 'index' not in self else 'level_0'
                 new_obj.insert(0, name, _maybe_cast(self.index.values))
-        new_obj.index = np.arange(len(new_obj))
+        new_obj.index = new_index
         return new_obj
 
     delevel = deprecate('delevel', reset_index)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 2234dea69..1b019496f 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -6178,6 +6178,11 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         resetted = self.frame.reset_index()
         self.assertEqual(resetted.columns.name, 'columns')
 
+        # only remove certain columns
+        frame = self.frame.reset_index().set_index(['index', 'A', 'B'])
+        rs = frame.reset_index(['A', 'B'])
+        assert_frame_equal(rs, self.frame)
+
     def test_reset_index_right_dtype(self):
         time = np.arange(0.0, 10, np.sqrt(2)/2)
         s1 = Series((9.81 * time ** 2) /2,
