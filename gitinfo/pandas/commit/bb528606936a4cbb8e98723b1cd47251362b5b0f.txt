commit bb528606936a4cbb8e98723b1cd47251362b5b0f
Author: Yaroslav Halchenko <debian@onerussian.com>
Date:   Thu Jan 19 11:56:08 2012 -0500

    ENH: pass figsize into _grouped_plot functions
    
    atm figsize is not passed through by boxplot etc, making it
    (impossible?) to have custom figsize
    
    Conflicts:
    
            pandas/tools/plotting.py

diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index 84e3e3fca..7a8320e08 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -19,7 +19,8 @@ def hist(data, column, by=None, ax=None, fontsize=None):
     ax.set_xticklabels(keys, rotation=0, fontsize=fontsize)
     return ax
 
-def grouped_hist(data, column, by=None, ax=None, bins=50, log=False):
+def grouped_hist(data, column, by=None, ax=None, bins=50, log=False,
+                 figsize=None):
     """
 
     Returns
@@ -29,14 +30,14 @@ def grouped_hist(data, column, by=None, ax=None, bins=50, log=False):
     def plot_group(group, ax):
         ax.hist(group[column].dropna(), bins=bins)
     fig = _grouped_plot(plot_group, data, by=by, sharex=False,
-                        sharey=False)
+                        sharey=False, figsize=figsize)
     fig.subplots_adjust(bottom=0.15, top=0.9, left=0.1, right=0.9,
                         hspace=0.3, wspace=0.2)
     return fig
 
 
 def boxplot(data, column=None, by=None, ax=None, fontsize=None,
-            rot=0, grid=True):
+            rot=0, grid=True, figsize=None):
     """
     Make a box plot from DataFrame column optionally grouped by some columns or
     other inputs
@@ -73,7 +74,7 @@ def boxplot(data, column=None, by=None, ax=None, fontsize=None,
             by = [by]
 
         fig, axes = _grouped_plot_by_column(plot_group, data, columns=columns,
-                                            by=by, grid=grid)
+                                            by=by, grid=grid, figsize=figsize)
         ax = axes
     else:
         if ax is None:
@@ -98,7 +99,7 @@ def _stringify(x):
     else:
         return str(x)
 
-def scatter_plot(data, x, y, by=None, ax=None):
+def scatter_plot(data, x, y, by=None, ax=None, figsize=None):
     """
 
     Returns
@@ -113,7 +114,7 @@ def scatter_plot(data, x, y, by=None, ax=None):
         ax.scatter(xvals, yvals)
 
     if by is not None:
-        fig = _grouped_plot(plot_group, data, by=by)
+        fig = _grouped_plot(plot_group, data, by=by, figsize=figsize)
     else:
         fig = plt.figure()
         ax = fig.add_subplot(111)
@@ -123,14 +124,24 @@ def scatter_plot(data, x, y, by=None, ax=None):
 
     return fig
 
-def _grouped_plot(plotf, data, by=None, numeric_only=True, figsize=(10, 5),
+def _grouped_plot(plotf, data, by=None, numeric_only=True, figsize=None,
                   sharex=True, sharey=True):
+    import matplotlib.pyplot as plt
+
+    # allow to specify mpl default with 'default'
+    if not (isinstance(figsize, str) and figsize == 'default'):
+        figsize = (10, 5)               # our default
+
     grouped = data.groupby(by)
     ngroups = len(grouped)
 
     nrows, ncols = _get_layout(ngroups)
-    fig, axes = subplots(nrows=nrows, ncols=ncols, figsize=figsize,
-                         sharex=sharex, sharey=sharey)
+    if figsize is None:
+        # our favorite default beating matplotlib's idea of the
+        # default size
+        figsize = (10, 5)
+    fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=figsize,
+                             sharex=sharex, sharey=sharey)
 
     ravel_axes = []
     for row in axes:
@@ -146,7 +157,8 @@ def _grouped_plot(plotf, data, by=None, numeric_only=True, figsize=(10, 5),
     return fig, axes
 
 def _grouped_plot_by_column(plotf, data, columns=None, by=None,
-                            numeric_only=True, grid=False):
+                            numeric_only=True, grid=False,
+                            figsize=None):
     import matplotlib.pyplot as plt
 
     grouped = data.groupby(by)
@@ -155,8 +167,9 @@ def _grouped_plot_by_column(plotf, data, columns=None, by=None,
     ngroups = len(columns)
 
     nrows, ncols = _get_layout(ngroups)
-    fig, axes = subplots(nrows=nrows, ncols=ncols,
-                         sharex=True, sharey=True)
+    fig, axes = plt.subplots(nrows=nrows, ncols=ncols,
+                             sharex=True, sharey=True,
+                             figsize=figsize)
 
     if isinstance(axes, plt.Axes):
         ravel_axes = [axes]
