commit 223a1fdd8286f77f1d5c3b3c589816af627d295b
Author: Chang She <changshe@gmail.com>
Date:   Mon Dec 10 12:33:56 2012 -0500

    BUG: Timestamp.to_datetime fails with tzoffset objects #2471

diff --git a/pandas/tseries/tests/test_timezones.py b/pandas/tseries/tests/test_timezones.py
index 51dd4133c..2087bc5ab 100644
--- a/pandas/tseries/tests/test_timezones.py
+++ b/pandas/tseries/tests/test_timezones.py
@@ -98,6 +98,14 @@ class TestTimeZoneSupport(unittest.TestCase):
         self.assertEquals(result.hour, expected.hour)
         self.assertEquals(result, expected)
 
+    def test_timestamp_to_datetime_tzoffset(self):
+        #tzoffset
+        from dateutil.tz import tzoffset
+        tzinfo = tzoffset(None, 7200)
+        expected = Timestamp('3/11/2012 04:00', tz=tzinfo)
+        result = Timestamp(expected.to_datetime())
+        self.assertEquals(expected, result)
+
     def test_timedelta_push_over_dst_boundary(self):
         # #1389
 
diff --git a/pandas/tslib.pyx b/pandas/tslib.pyx
index 490ccf2e7..18eee8c30 100644
--- a/pandas/tslib.pyx
+++ b/pandas/tslib.pyx
@@ -604,11 +604,24 @@ cdef convert_to_tsobject(object ts, object tz):
         if tz is not None:
             # sort of a temporary hack
             if ts.tzinfo is not None:
-                ts = tz.normalize(ts)
-                obj.value = _pydatetime_to_dts(ts, &obj.dts)
-                obj.tzinfo = ts.tzinfo
+                if hasattr(tz, 'normalize'):
+                    ts = tz.normalize(ts)
+                    obj.value = _pydatetime_to_dts(ts, &obj.dts)
+                    obj.tzinfo = ts.tzinfo
+                else: #tzoffset
+                    ts_offset = _get_utcoffset(ts.tzinfo, ts)
+                    obj.value = _pydatetime_to_dts(ts, &obj.dts)
+                    obj.value -= _delta_to_nanoseconds(ts_offset)
+                    tz_offset = _get_utcoffset(tz, ts)
+                    obj.value += _delta_to_nanoseconds(tz_offset)
+
+                    obj.tzinfo = tz
             elif not _is_utc(tz):
-                ts = tz.localize(ts)
+                try:
+                    ts = tz.localize(ts)
+                except AttributeError:
+                    ts = ts.replace(tzinfo=tz)
+
                 obj.value = _pydatetime_to_dts(ts, &obj.dts)
                 offset = _get_utcoffset(ts.tzinfo, ts)
                 obj.value -= _delta_to_nanoseconds(offset)
