commit 935be0abb8e185e3de4524875cb8e81c75ea0236
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Aug 22 15:54:29 2011 -0400

    ENH: Panel.pivot testing and performance enhancement

diff --git a/bench/better_unique.py b/bench/better_unique.py
index d90208e3a..9ff4823cd 100644
--- a/bench/better_unique.py
+++ b/bench/better_unique.py
@@ -8,19 +8,10 @@ import random
 import numpy as np
 
 def better_unique(values):
-    ids, labels = _tseries.group_labels2(values)
-
-    n = len(ids)
-    values = Series(ids, index=np.arange(n)).values
-    indexer = values.argsort()
-
-    reverse_indexer = np.empty(n, dtype=np.int32)
-    reverse_indexer.put(indexer, np.arange(n))
-
-    new_labels = reverse_indexer.take(labels)
-    new_values = values.take(indexer)
-
-    return new_values, new_labels
+    uniques = _tseries.fast_unique(values)
+    id_map = _tseries.map_indices_buf(uniques)
+    labels = _tseries.get_unique_labels(values, id_map)
+    return uniques, labels
 
 tot = 100000
 
@@ -71,15 +62,15 @@ result = DataFrame({'wes' : wes, 'numpy' : numpy}, index=group_sizes)
 def make_plot(numpy, wes):
     pass
 
-def get_test_data(ngroups=100, n=100000):
-    unique_groups = range(ngroups)
-    random.shuffle(unique_groups)
-    arr = np.asarray(np.tile(unique_groups, n / ngroups), dtype=object)
+# def get_test_data(ngroups=100, n=100000):
+#     unique_groups = range(ngroups)
+#     random.shuffle(unique_groups)
+#     arr = np.asarray(np.tile(unique_groups, n / ngroups), dtype=object)
 
-    if len(arr) < n:
-        arr = np.asarray(list(arr) + unique_groups[:n - len(arr)],
-                         dtype=object)
+#     if len(arr) < n:
+#         arr = np.asarray(list(arr) + unique_groups[:n - len(arr)],
+#                          dtype=object)
 
-    return arr
+#     return arr
 
-arr = get_test_data(ngroups=1000)
+# arr = get_test_data(ngroups=1000)
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 7ecdfe52d..94899a011 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -633,7 +633,8 @@ class BlockManager(object):
 
     def join_on(self, other, on, axis=1):
         other_axis = other.axes[axis]
-        indexer, mask = _tseries.getMergeVec(on, other_axis.indexMap)
+        indexer, mask = _tseries.getMergeVec(on.astype(object),
+                                             other_axis.indexMap)
 
         # TODO: deal with length-0 case? or does it fall out?
         notmask = -mask
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index b6bb35889..919bbf552 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -16,6 +16,7 @@ from pandas.core.index import Factor, Index, MultiIndex
 from pandas.core.internals import BlockManager, make_block, form_blocks
 from pandas.core.frame import DataFrame, _union_indexes
 from pandas.core.generic import AxisProperty, NDFrame
+from pandas.core.series import Series
 import pandas.core.common as common
 import pandas._tseries as _tseries
 
@@ -746,17 +747,12 @@ class WidePanel(Panel, NDFrame):
 
     def _wrap_result(self, result, axis):
         axis = self._get_axis_name(axis)
+        index, columns = self._get_plane_axes(axis)
 
-        if result.ndim == 2:
-            index, columns = self._get_plane_axes(axis)
-
-            if axis != 'items':
-                result = result.T
+        if axis != 'items':
+            result = result.T
 
-            return DataFrame(result, index=index, columns=columns)
-        else:
-            return WidePanel(result, self.items, self.major_axis,
-                             self.minor_axis)
+        return DataFrame(result, index=index, columns=columns)
 
     def count(self, axis='major'):
         """
@@ -1135,7 +1131,10 @@ class LongPanel(Panel, DataFrame):
 
     def _to_wide_homogeneous(self, mask):
         values = np.empty(self.shape, dtype=self.values.dtype)
-        values.fill(np.nan)
+
+        if not issubclass(self.values.dtype.type, np.integer):
+            values.fill(np.nan)
+
         for i in xrange(len(self.items)):
             values[i].flat[mask] = self.values[:, i]
 
@@ -1473,15 +1472,11 @@ def pivot(index, columns, values):
     if len(index) == 0:
         return DataFrame(index=[])
 
-    try:
-        longIndex = _make_long_index(index, columns)
-        valueMat = values.view(np.ndarray).reshape(len(values), 1)
-        longPanel = LongPanel(valueMat, ['foo'], longIndex)
-        longPanel = longPanel.sort()
-        return longPanel.to_wide()['foo']
-    except Exception:
-        return _slow_pivot(index, columns, values)
+    hindex = _make_long_index(index, columns)
 
+    series = Series(values.ravel(), index=hindex)
+    series = series.sortlevel(0)
+    return series.unstack()
 
 def make_mask(index):
     """
@@ -1495,16 +1490,20 @@ def make_mask(index):
     return mask
 
 def _make_long_index(major_values, minor_values):
-    major_axis = Index(sorted(set(major_values)))
-    minor_axis = Index(sorted(set(minor_values)))
-
-    major_labels, _ = _tseries.getMergeVec(major_values, major_axis.indexMap)
-    minor_labels, _ = _tseries.getMergeVec(minor_values, minor_axis.indexMap)
+    major_values = np.asarray(major_values, dtype=object)
+    minor_values = np.asarray(minor_values, dtype=object)
+    major_axis, major_labels = _better_unique(major_values)
+    minor_axis, minor_labels = _better_unique(minor_values)
 
     long_index = MultiIndex(levels=[major_axis, minor_axis],
                                  labels=[major_labels, minor_labels])
     return long_index
 
+def _better_unique(values):
+    uniques = Index(_tseries.fast_unique(values))
+    labels = _tseries.get_unique_labels(values, uniques.indexMap)
+    return uniques, labels
+
 def _slow_pivot(index, columns, values):
     """
     Produce 'pivot' table based on 3 columns of this DataFrame.
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 8c4ccc9ad..5daa4481e 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1004,7 +1004,8 @@ class Series(np.ndarray, PandasObject):
             if isinstance(arg, dict):
                 arg = Series(arg)
 
-            indexer, mask = _tseries.getMergeVec(self, arg.index.indexMap)
+            indexer, mask = _tseries.getMergeVec(self.values.astype(object),
+                                                 arg.index.indexMap)
             notmask = -mask
 
             new_values = arg.view(np.ndarray).take(indexer)
@@ -1632,7 +1633,8 @@ class _Unstacker(object):
         new_values = np.empty((length, result_width), dtype=self.values.dtype)
         new_mask = np.zeros((length, result_width), dtype=bool)
 
-        new_values.fill(np.nan)
+        if not issubclass(self.values.dtype.type, np.integer):
+            new_values.fill(np.nan)
 
         # is there a simpler / faster way of doing this?
         for i in xrange(self.values.shape[1]):
diff --git a/pandas/src/groupby.pyx b/pandas/src/groupby.pyx
index 7af3a2fc1..2df62ccb2 100644
--- a/pandas/src/groupby.pyx
+++ b/pandas/src/groupby.pyx
@@ -226,12 +226,26 @@ def fast_unique(ndarray[object] values):
             table[val] = stub
             uniques.append(val)
     try:
-        uniques = sorted(uniques)
+        uniques.sort()
     except Exception:
         pass
 
     return np.asarray(uniques, dtype=object)
 
+@cython.wraparound(False)
+@cython.boundscheck(False)
+def get_unique_labels(ndarray[object] values, dict idMap):
+    cdef int i, length
+    cdef object idx
+    cdef ndarray[int32_t] fillVec
+    length = len(values)
+    fillVec = np.empty(length, dtype=np.int32)
+    for i from 0 <= i < length:
+        idx = values[i]
+        fillVec[i] = idMap[idx]
+
+    return fillVec
+
 @cython.wraparound(False)
 @cython.boundscheck(False)
 def fast_unique_multiple(list arrays):
@@ -252,7 +266,7 @@ def fast_unique_multiple(list arrays):
                 table[val] = stub
                 uniques.append(val)
     try:
-        uniques = sorted(uniques)
+        uniques.sort()
     except Exception:
         pass
 
diff --git a/pandas/src/reindex.pyx b/pandas/src/reindex.pyx
index a0be2900b..51fdb54eb 100644
--- a/pandas/src/reindex.pyx
+++ b/pandas/src/reindex.pyx
@@ -287,33 +287,25 @@ def backfill_inplace_float64(ndarray[float64_t] values,
             val = values[i]
         i -= 1
 
+@cython.wraparound(False)
 @cython.boundscheck(False)
-def getMergeVec(ndarray values, dict oldMap):
+def getMergeVec(ndarray[object] values, dict oldMap):
     cdef int i, j, length, newLength
-
-    cdef flatiter iternew
     cdef object idx
-    cdef ndarray[int32_t, ndim=1] fillVec
-    cdef ndarray[int8_t, ndim=1] mask
+    cdef ndarray[int32_t] fillVec
+    cdef ndarray[int8_t] mask
 
     newLength = len(values)
     fillVec = np.empty(newLength, dtype=np.int32)
     mask = np.zeros(newLength, dtype=np.int8)
-
-    iternew = <flatiter> PyArray_IterNew(values)
-
     for i from 0 <= i < newLength:
-        idx = PyArray_GETITEM(values, PyArray_ITER_DATA(iternew))
-
+        idx = values[i]
         if idx in oldMap:
             fillVec[i] = oldMap[idx]
             mask[i] = 1
 
-        PyArray_ITER_NEXT(iternew)
-
     for i from 0 <= i < newLength:
         if mask[i] == 0:
             fillVec[i] = -1
 
     return fillVec, mask.astype(bool)
-
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index d0c7770a1..49492e5ab 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -358,8 +358,8 @@ class TestWidePanel(unittest.TestCase, PanelTests,
         assert_almost_equal(casted2.values, exp_values)
 
         # can't cast
-        data = [['foo', 'bar', 'baz']]
-        self.assertRaises(ValueError, DataFrame, data, dtype=float)
+        data = [[['foo', 'bar', 'baz']]]
+        self.assertRaises(ValueError, WidePanel, data, dtype=float)
 
     def test_consolidate(self):
         self.assert_(self.panel._data.is_consolidated())
@@ -948,9 +948,12 @@ class TestLongPanel(unittest.TestCase):
         self.assertEqual(df['e'][5], 4)
 
         # weird overlap, TODO: test?
-        df = pivot(np.array([1, 2, 3, 4, 4]),
+        a, b, c = (np.array([1, 2, 3, 4, 4]),
                    np.array(['a', 'a', 'a', 'a', 'a']),
                    np.array([1, 2, 3, 5, 4]))
+        df = pivot(a, b, c)
+        expected = panelmod._slow_pivot(a, b, c)
+        assert_frame_equal(df, expected)
 
         # corner case, empty
         df = pivot(np.array([]), np.array([]), np.array([]))
