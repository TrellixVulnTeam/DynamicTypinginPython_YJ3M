commit ef7676493ae6a4b48f6a439cb0968c0532df69e5
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Nov 23 12:07:10 2011 -0500

    BUG: index integer name format bug, plus handle non-string columns in groupby, GH #405

diff --git a/RELEASE.rst b/RELEASE.rst
index 11d8e329c..0c3b495b2 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -154,6 +154,8 @@ pandas 0.6.0
   - Enable partial setting with .ix / advanced indexing (GH #397)
   - Handle mixed-type DataFrames correctly in unstack, do not lose type
     information (GH #403)
+  - Fix integer name formatting bug in Index.format and in Series.__repr__
+  - Handle label types other than string passed to groupby (GH #405)
 
 Thanks
 ------
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 367a01a14..b61ac8c59 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -633,7 +633,7 @@ def _get_groupings(obj, grouper=None, axis=0, level=None):
     exclusions = []
     for i, (gpr, level) in enumerate(zip(groupers, levels)):
         name = None
-        if isinstance(gpr, basestring):
+        if _is_label_like(gpr):
             exclusions.append(gpr)
             name = gpr
             gpr = obj[gpr]
@@ -644,6 +644,9 @@ def _get_groupings(obj, grouper=None, axis=0, level=None):
 
     return groupings, exclusions
 
+def _is_label_like(val):
+    return isinstance(val, basestring) or np.isscalar(val)
+
 def _convert_grouper(axis, grouper):
     if isinstance(grouper, dict):
         return grouper.get
diff --git a/pandas/core/index.py b/pandas/core/index.py
index e4e820af3..adb886a02 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -206,7 +206,7 @@ class Index(np.ndarray):
         result = []
 
         if name:
-            result.append(self.name if self.name is not None else '')
+            result.append(str(self.name) if self.name is not None else '')
 
         if self.is_all_dates():
             zero_time = time(0, 0)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 0ae9519cb..897c4b6f7 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -410,7 +410,7 @@ copy : boolean, default False
             header, string_index = string_index[0], string_index[1:]
         else:
             have_header = index.name is not None
-            header = index.name
+            header = str(index.name)
             string_index = index.format()
 
         maxlen = max(len(x) for x in string_index)
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 6b8c4b043..d9a0adf61 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -1026,6 +1026,14 @@ class TestGroupBy(unittest.TestCase):
         self.assert_('A' in result2)
         self.assert_('B' in result2)
 
+    def test_groupby_nonstring_columns(self):
+        df = DataFrame([np.arange(10) for x in range(10)])
+        grouped = df.groupby(0)
+        result = grouped.mean()
+        expected = df.groupby(df[0]).mean()
+        del expected[0]
+        assert_frame_equal(result, expected)
+
 class TestPanelGroupBy(unittest.TestCase):
 
     def setUp(self):
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 840cfe440..09ca7179d 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -588,6 +588,14 @@ class TestInt64Index(unittest.TestCase):
         taken = index.take([3,0,1])
         self.assertEqual(index.name, taken.name)
 
+    def test_int_name_format(self):
+        from pandas import Series, DataFrame
+        index = Index(['a', 'b', 'c'], name=0)
+        s = Series(range(3), index)
+        df = DataFrame(range(3), index=index)
+        repr(s)
+        repr(df)
+
 class TestMultiIndex(unittest.TestCase):
 
     def setUp(self):
