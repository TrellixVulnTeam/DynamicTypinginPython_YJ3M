commit 489d1ff8a1683f7f5549108dc7b04e43b5f32965
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Mon Aug 19 09:45:41 2019 -0700

    CLN: missing boilerplate in Sparse op (#27910)
    
    * CLN: missing boilerplate in Sparse op

diff --git a/pandas/core/arrays/sparse.py b/pandas/core/arrays/sparse.py
index 2234167fe..201174b6b 100644
--- a/pandas/core/arrays/sparse.py
+++ b/pandas/core/arrays/sparse.py
@@ -39,6 +39,7 @@ from pandas.core.dtypes.common import (
 )
 from pandas.core.dtypes.dtypes import register_extension_dtype
 from pandas.core.dtypes.generic import (
+    ABCDataFrame,
     ABCIndexClass,
     ABCSeries,
     ABCSparseArray,
@@ -1735,13 +1736,15 @@ class SparseArray(PandasObject, ExtensionArray, ExtensionOpsMixin):
 
     @classmethod
     def _create_arithmetic_method(cls, op):
-        def sparse_arithmetic_method(self, other):
-            op_name = op.__name__
+        op_name = op.__name__
 
-            if isinstance(other, (ABCSeries, ABCIndexClass)):
+        def sparse_arithmetic_method(self, other):
+            if isinstance(other, (ABCDataFrame, ABCSeries, ABCIndexClass)):
                 # Rely on pandas to dispatch to us.
                 return NotImplemented
 
+            other = lib.item_from_zerodim(other)
+
             if isinstance(other, SparseArray):
                 return _sparse_array_op(self, other, op, op_name)
 
diff --git a/pandas/tests/arrays/sparse/test_arithmetics.py b/pandas/tests/arrays/sparse/test_arithmetics.py
index 57e5a35d9..cb5b437c9 100644
--- a/pandas/tests/arrays/sparse/test_arithmetics.py
+++ b/pandas/tests/arrays/sparse/test_arithmetics.py
@@ -441,6 +441,23 @@ def test_with_list(op):
     tm.assert_sp_array_equal(result, expected)
 
 
+def test_with_dataframe():
+    # GH#27910
+    arr = pd.SparseArray([0, 1], fill_value=0)
+    df = pd.DataFrame([[1, 2], [3, 4]])
+    result = arr.__add__(df)
+    assert result is NotImplemented
+
+
+def test_with_zerodim_ndarray():
+    # GH#27910
+    arr = pd.SparseArray([0, 1], fill_value=0)
+
+    result = arr * np.array(2)
+    expected = arr * 2
+    tm.assert_sp_array_equal(result, expected)
+
+
 @pytest.mark.parametrize("ufunc", [np.abs, np.exp])
 @pytest.mark.parametrize(
     "arr", [pd.SparseArray([0, 0, -1, 1]), pd.SparseArray([None, None, -1, 1])]
