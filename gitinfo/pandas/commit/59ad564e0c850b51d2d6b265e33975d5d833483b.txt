commit 59ad564e0c850b51d2d6b265e33975d5d833483b
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Jan 21 16:46:14 2012 -0500

    BUG: don't lose columns name when passing list of labels to DataFrame.__getitem__, GH #662

diff --git a/RELEASE.rst b/RELEASE.rst
index 99b7faa84..a5f25748f 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -78,7 +78,8 @@ pandas 0.7.0
     yielding an aggregated result with hierarchical columns (GH #166)
   - Add integer-indexing functions ``iget`` in Series and ``irow`` / ``iget``
     in DataFrame (GH #628)
-  - Add new ``Series.unique`` function (GH #658)
+  - Add new ``Series.unique`` function, significantly faster than
+    ``numpy.unique`` (GH #658)
 
 **API Changes**
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 6316ec765..3f019fc1a 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1283,7 +1283,7 @@ class DataFrame(NDFrame):
         # either boolean or fancy integer index
         elif isinstance(key, (np.ndarray, list)):
             if isinstance(key, list):
-                key = np.array(key, dtype=object)
+                key = lib.list_to_object_array(key)
 
             # also raises Exception if object array with NA values
             if com._is_bool_indexer(key):
@@ -1307,7 +1307,10 @@ class DataFrame(NDFrame):
             mask = indexer == -1
             if mask.any():
                 raise KeyError("No column(s) named: %s" % str(key[mask]))
-            return self.reindex(columns=key)
+            result = self.reindex(columns=key)
+            if result.columns.name is None:
+                result.columns.name = self.columns.name
+            return result
 
     def _slice(self, slobj, axis=0):
         if axis == 0:
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index f58923d9b..7aa62df83 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -66,6 +66,8 @@ class CheckIndexing(object):
         assert_frame_equal(result, expected)
 
     def test_getitem_list(self):
+        self.frame.columns.name = 'foo'
+
         result = self.frame[['B', 'A']]
         result2 = self.frame[Index(['B', 'A'])]
 
@@ -73,11 +75,23 @@ class CheckIndexing(object):
         assert_frame_equal(result, expected)
         assert_frame_equal(result2, expected)
 
+        self.assertEqual(result.columns.name, 'foo')
+
         self.assertRaises(Exception, self.frame.__getitem__,
                           ['B', 'A', 'foo'])
         self.assertRaises(Exception, self.frame.__getitem__,
                           Index(['B', 'A', 'foo']))
 
+        # tuples
+        df = DataFrame(randn(8, 3),
+                       columns=Index([('foo', 'bar'), ('baz', 'qux'),
+                                      ('peek', 'aboo')], name='sth'))
+
+        result = df[[('foo', 'bar'), ('baz', 'qux')]]
+        expected = df.ix[:, :2]
+        assert_frame_equal(result, expected)
+        self.assertEqual(result.columns.name, 'sth')
+
     def test_setitem_list(self):
         self.frame['E'] = 'foo'
         data = self.frame[['A', 'B']]
