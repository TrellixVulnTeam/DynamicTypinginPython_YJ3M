commit 40fb1bf81d70944a9acdef6a9731af41a1060e10
Author: Chang She <chang@lambdafoundry.com>
Date:   Fri May 4 13:26:08 2012 -0400

    ENH: copy keyword to Panel swapaxes/transpose #695

diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index c7c0eb45f..d031e3a2a 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -912,7 +912,7 @@ class Panel(NDFrame):
         axis = self._get_axis_number(axis)
         return PanelGroupBy(self, function, axis=axis)
 
-    def swapaxes(self, axis1='major', axis2='minor'):
+    def swapaxes(self, axis1='major', axis2='minor', copy=True):
         """
         Interchange axes and swap values axes appropriately
 
@@ -930,11 +930,14 @@ class Panel(NDFrame):
 
         new_axes = (self._get_axis(mapping.get(k, k))
                     for k in range(3))
-        new_values = self.values.swapaxes(i, j).copy()
+        new_values = self.values.swapaxes(i, j)
+        if copy:
+            new_values = new_values.copy()
 
         return self._constructor(new_values, *new_axes)
 
-    def transpose(self, items='items', major='major', minor='minor'):
+    def transpose(self, items='items', major='major', minor='minor',
+                  copy=True):
         """
         Permute the dimensions of the Panel
 
@@ -948,7 +951,9 @@ class Panel(NDFrame):
             raise ValueError('Must specify 3 unique axes')
 
         new_axes = [self._get_axis(x) for x in [i, j, k]]
-        new_values = self.values.transpose((i, j, k)).copy()
+        new_values = self.values.transpose((i, j, k))
+        if copy:
+            new_values = new_values.copy()
         return self._constructor(new_values, *new_axes)
 
     def to_frame(self, filter_observations=True):
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 19649670d..e1441e9d7 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -888,11 +888,17 @@ class TestPanel(unittest.TestCase, PanelTests, CheckIndexing,
         result = self.panel.swapaxes('major', 'minor')
         self.assert_(result.major_axis is self.panel.minor_axis)
 
+        panel = self.panel.copy()
+        result = panel.swapaxes('major', 'minor')
+        panel.values[0, 0, 1] = np.nan
+        expected = panel.swapaxes('major', 'minor')
+        assert_panel_equal(result, expected)
+
         # this should also work
         result = self.panel.swapaxes(0, 1)
         self.assert_(result.items is self.panel.major_axis)
 
-        # this should also work
+        # this should not work
         self.assertRaises(Exception, self.panel.swapaxes, 'items', 'items')
 
     def test_transpose(self):
@@ -911,22 +917,14 @@ class TestPanel(unittest.TestCase, PanelTests, CheckIndexing,
         result = self.panel.transpose(2, 0, 1)
         assert_panel_equal(result, expected)
 
-    def test_transpose_sparse(self):
-        spanel = self.panel.to_sparse()
-        result = spanel.transpose('minor', 'major', 'items')
-        expected = spanel.swapaxes('items', 'minor')
-        assert_panel_equal(result, expected)
-
-        result = spanel.transpose(2, 1, 0)
-        assert_panel_equal(result, expected)
-
-        result = spanel.transpose('minor', 'items', 'major')
-        expected = spanel.swapaxes('items', 'minor')
+        panel = self.panel.copy()
+        result = panel.transpose(2, 0, 1, copy=False)
+        panel.values[0, 0, 1] = np.nan
+        expected = panel.swapaxes('items', 'minor')
         expected = expected.swapaxes('major', 'minor')
         assert_panel_equal(result, expected)
 
-        result = spanel.transpose(2, 0, 1)
-        assert_panel_equal(result, expected)
+        self.assertRaises(ValueError, self.panel.transpose, 0, 0, 1)
 
     def test_to_frame(self):
         # filtered
