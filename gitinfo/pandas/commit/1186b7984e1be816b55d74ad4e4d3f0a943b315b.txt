commit 1186b7984e1be816b55d74ad4e4d3f0a943b315b
Author: Chang She <chang@lambdafoundry.com>
Date:   Mon Sep 17 19:13:19 2012 -0400

    BUG: FixedOffsetTimeZone #1922

diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index 49ca60646..c24051ba8 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -525,6 +525,12 @@ cdef class _TSObject:
         def __get__(self):
             return self.value
 
+cpdef _get_utcoffset(tzinfo):
+    try:
+        return tzinfo._utcoffset
+    except AttributeError:
+        return tzinfo.utcoffset(None)
+
 # helper to extract datetime and int64 from several different possibilities
 cpdef convert_to_tsobject(object ts, object tz=None):
     """
@@ -565,7 +571,7 @@ cpdef convert_to_tsobject(object ts, object tz=None):
             elif tz is not pytz.utc:
                 ts = tz.localize(ts)
                 obj.value = _pydatetime_to_dts(ts, &obj.dts)
-                obj.value -= _delta_to_nanoseconds(ts.tzinfo._utcoffset)
+                obj.value -= _delta_to_nanoseconds(_get_utcoffset(ts.tzinfo))
                 obj.tzinfo = ts.tzinfo
             else:
                 # UTC
@@ -575,7 +581,7 @@ cpdef convert_to_tsobject(object ts, object tz=None):
             obj.value = _pydatetime_to_dts(ts, &obj.dts)
             obj.tzinfo = ts.tzinfo
             if obj.tzinfo is not None and not _is_utc(obj.tzinfo):
-                obj.value -= _delta_to_nanoseconds(obj.tzinfo._utcoffset)
+                obj.value -= _delta_to_nanoseconds(_get_utcoffset(obj.tzinfo))
         _check_dts_bounds(obj.value, &obj.dts)
         return obj
     elif PyDate_Check(ts):
@@ -616,7 +622,10 @@ cdef inline object _get_zone(object tz):
     if _is_utc(tz):
         return 'UTC'
     else:
-        return tz.zone
+        try:
+            return tz.zone
+        except AttributeError:
+            return tz
 
 cdef int64_t _NS_LOWER_BOUND = -9223285636854775809LL
 cdef int64_t _NS_UPPER_BOUND = -9223372036854775807LL
@@ -1009,7 +1018,7 @@ def _get_deltas(tz):
             utc_offset_cache[tz] = _unbox_utcoffsets(tz._transition_info)
         else:
             # static tzinfo
-            num = int(total_seconds(tz._utcoffset)) * 1000000000
+            num = int(total_seconds(_get_utcoffset(tz))) * 1000000000
             utc_offset_cache[tz] = np.array([num], dtype=np.int64)
     return utc_offset_cache[tz]
 
diff --git a/pandas/tseries/tests/test_timezones.py b/pandas/tseries/tests/test_timezones.py
index e25ad451b..4e63510de 100644
--- a/pandas/tseries/tests/test_timezones.py
+++ b/pandas/tseries/tests/test_timezones.py
@@ -1,6 +1,6 @@
 # pylint: disable-msg=E1101,W0612
 from __future__ import with_statement # for Python 2.5
-from datetime import datetime, time, timedelta
+from datetime import datetime, time, timedelta, tzinfo
 import sys
 import os
 import unittest
@@ -44,6 +44,23 @@ try:
 except ImportError:
     pass
 
+class FixedOffset(tzinfo):
+    """Fixed offset in minutes east from UTC."""
+
+    def __init__(self, offset, name):
+        self.__offset = timedelta(minutes = offset)
+        self.__name = name
+
+    def utcoffset(self, dt):
+        return self.__offset
+
+    def tzname(self, dt):
+        return self.__name
+
+    def dst(self, dt):
+        return timedelta(0)
+
+fixed_off = FixedOffset(-4200, '-07:00')
 
 class TestTimeZoneSupport(unittest.TestCase):
 
@@ -353,6 +370,13 @@ class TestTimeZoneSupport(unittest.TestCase):
         result = ts['1/3/2000']
         self.assertAlmostEqual(result, ts[2])
 
+    def test_fixed_offset(self):
+        dates = [datetime(2000, 1, 1, tzinfo=fixed_off),
+                 datetime(2000, 1, 2, tzinfo=fixed_off),
+                 datetime(2000, 1, 3, tzinfo=fixed_off)]
+        result = to_datetime(dates)
+        self.assert_(result.tz == fixed_off)
+
     def test_convert_tz_aware_datetime_datetime(self):
         # #1581
 
