commit a89d991b7d5737e7f754cc501abb63ccdacf120d
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Apr 12 21:23:35 2012 -0400

    ENH: legacy time rule support and refactoring, better alias handling. misc tests, #1041

diff --git a/pandas/core/daterange.py b/pandas/core/daterange.py
index 563b0666c..4d755016f 100644
--- a/pandas/core/daterange.py
+++ b/pandas/core/daterange.py
@@ -19,16 +19,14 @@ class DateRange(Index):
         warnings.warn("DateRange is deprecated, use DatetimeIndex instead",
                        FutureWarning)
 
-        # use old mapping
+        if time_rule is None:
+            time_rule = kwds.get('timeRule')
         if time_rule is not None:
-            offset = datetools._offset_map[time_rule]
-        elif 'timeRule' in kwds and kwds['timeRule'] is not None:
-            offset = datetools._offset_map[kwds['timeRule']]
+            offset = datetools.get_offset(time_rule)
 
         return DatetimeIndex(start=start, end=end,
                              periods=periods, offset=offset,
-                             tzinfo=tzinfo, name=name, _deprecated=True,
-                             **kwds)
+                             tzinfo=tzinfo, name=name, **kwds)
 
     def __setstate__(self, aug_state):
         """Necessary for making this object picklable"""
diff --git a/pandas/core/datetools.py b/pandas/core/datetools.py
index 1a7fd87c2..8b020dabb 100644
--- a/pandas/core/datetools.py
+++ b/pandas/core/datetools.py
@@ -135,7 +135,7 @@ class Interval(object):
         value : Interval or basestring, default None
             The time interval represented (e.g., '4Q2005')
         freq : str, default None
-            e.g., 'B' for businessday, ('Min', 5) or '5Min' for 5 minutes
+            e.g., 'B' for businessday, ('T', 5) or '5T' for 5 minutes
         year : int, default None
         month : int, default 1
         quarter : int, default None
@@ -146,7 +146,7 @@ class Interval(object):
         """
         # freq points to a tuple (base, mult);  base is one of the defined
         # intervals such as A, Q, etc. Every five minutes would be, e.g.,
-        # ('Min', 5) but may be passed in as a string like '5Min'
+        # ('T', 5) but may be passed in as a string like '5T'
 
         self.freq = None
 
@@ -194,7 +194,7 @@ class Interval(object):
                 elif reso == 'hour':
                     freq = 'H'
                 elif reso == 'minute':
-                    freq = 'Min'
+                    freq = 'T'
                 elif reso == 'second':
                     freq = 'S'
                 else:
@@ -558,52 +558,52 @@ def dt64arr_to_sktsarr(data, freq):
 # originals
 _interval_code_map = {
     # Annual freqs with various fiscal year ends.
-    # eg, 2005 for A@FEB runs Mar 1, 2004 to Feb 28, 2005
+    # eg, 2005 for A-FEB runs Mar 1, 2004 to Feb 28, 2005
     "A"     : 1000,  # Annual
-    "A@DEC" : 1000,  # Annual - December year end
-    "A@JAN" : 1001,  # Annual - January year end
-    "A@FEB" : 1002,  # Annual - February year end
-    "A@MAR" : 1003,  # Annual - March year end
-    "A@APR" : 1004,  # Annual - April year end
-    "A@MAY" : 1005,  # Annual - May year end
-    "A@JUN" : 1006,  # Annual - June year end
-    "A@JUL" : 1007,  # Annual - July year end
-    "A@AUG" : 1008,  # Annual - August year end
-    "A@SEP" : 1009,  # Annual - September year end
-    "A@OCT" : 1010,  # Annual - October year end
-    "A@NOV" : 1011,  # Annual - November year end
+    "A-DEC" : 1000,  # Annual - December year end
+    "A-JAN" : 1001,  # Annual - January year end
+    "A-FEB" : 1002,  # Annual - February year end
+    "A-MAR" : 1003,  # Annual - March year end
+    "A-APR" : 1004,  # Annual - April year end
+    "A-MAY" : 1005,  # Annual - May year end
+    "A-JUN" : 1006,  # Annual - June year end
+    "A-JUL" : 1007,  # Annual - July year end
+    "A-AUG" : 1008,  # Annual - August year end
+    "A-SEP" : 1009,  # Annual - September year end
+    "A-OCT" : 1010,  # Annual - October year end
+    "A-NOV" : 1011,  # Annual - November year end
 
     # Quarterly frequencies with various fiscal year ends.
-    # eg, Q42005 for Q@OCT runs Aug 1, 2005 to Oct 31, 2005
+    # eg, Q42005 for Q-OCT runs Aug 1, 2005 to Oct 31, 2005
     "Q"     : 2000,    # Quarterly - December year end (default quarterly)
-    "Q@DEC" : 2000 ,    # Quarterly - December year end
-    "Q@JAN" : 2001,    # Quarterly - January year end
-    "Q@FEB" : 2002,    # Quarterly - February year end
-    "Q@MAR" : 2003,    # Quarterly - March year end
-    "Q@APR" : 2004,    # Quarterly - April year end
-    "Q@MAY" : 2005,    # Quarterly - May year end
-    "Q@JUN" : 2006,    # Quarterly - June year end
-    "Q@JUL" : 2007,    # Quarterly - July year end
-    "Q@AUG" : 2008,    # Quarterly - August year end
-    "Q@SEP" : 2009,    # Quarterly - September year end
-    "Q@OCT" : 2010,    # Quarterly - October year end
-    "Q@NOV" : 2011,    # Quarterly - November year end
+    "Q-DEC" : 2000 ,    # Quarterly - December year end
+    "Q-JAN" : 2001,    # Quarterly - January year end
+    "Q-FEB" : 2002,    # Quarterly - February year end
+    "Q-MAR" : 2003,    # Quarterly - March year end
+    "Q-APR" : 2004,    # Quarterly - April year end
+    "Q-MAY" : 2005,    # Quarterly - May year end
+    "Q-JUN" : 2006,    # Quarterly - June year end
+    "Q-JUL" : 2007,    # Quarterly - July year end
+    "Q-AUG" : 2008,    # Quarterly - August year end
+    "Q-SEP" : 2009,    # Quarterly - September year end
+    "Q-OCT" : 2010,    # Quarterly - October year end
+    "Q-NOV" : 2011,    # Quarterly - November year end
 
     "M"     : 3000,   # Monthly
 
     "W"     : 4000,    # Weekly
-    "W@SUN" : 4000,    # Weekly - Sunday end of week
-    "W@MON" : 4001,    # Weekly - Monday end of week
-    "W@TUE" : 4002,    # Weekly - Tuesday end of week
-    "W@WED" : 4003,    # Weekly - Wednesday end of week
-    "W@THU" : 4004,    # Weekly - Thursday end of week
-    "W@FRI" : 4005,    # Weekly - Friday end of week
-    "W@SAT" : 4006,    # Weekly - Saturday end of week
+    "W-SUN" : 4000,    # Weekly - Sunday end of week
+    "W-MON" : 4001,    # Weekly - Monday end of week
+    "W-TUE" : 4002,    # Weekly - Tuesday end of week
+    "W-WED" : 4003,    # Weekly - Wednesday end of week
+    "W-THU" : 4004,    # Weekly - Thursday end of week
+    "W-FRI" : 4005,    # Weekly - Friday end of week
+    "W-SAT" : 4006,    # Weekly - Saturday end of week
 
     "B"      : 5000,   # Business days
     "D"      : 6000,   # Daily
     "H"      : 7000,   # Hourly
-    "Min"    : 8000,   # Minutely
+    "T"      : 8000,   # Minutely
     "S"      : 9000,   # Secondly
     None     : -10000  # Undefined
 }
@@ -671,16 +671,16 @@ def _skts_alias_dictionary():
         for m_tup in month_names:
             for sep in seps:
                 m1, m2 = m_tup
-                alias_dict[k + sep + m1] = 'A@' + m1
-                alias_dict[k + sep + m2] = 'A@' + m1
+                alias_dict[k + sep + m1] = 'A-' + m1
+                alias_dict[k + sep + m2] = 'A-' + m1
 
     for k in Q_prefixes:
         alias_dict[k] = 'Q'
         for m_tup in month_names:
             for sep in seps:
                 m1, m2 = m_tup
-                alias_dict[k + sep + m1] = 'Q@' + m1
-                alias_dict[k + sep + m2] = 'Q@' + m1
+                alias_dict[k + sep + m1] = 'Q-' + m1
+                alias_dict[k + sep + m2] = 'Q-' + m1
 
     W_prefixes = ["W", "WK", "WEEK", "WEEKLY"]
 
@@ -698,8 +698,8 @@ def _skts_alias_dictionary():
         for d_tup in day_names:
             for sep in ["@", "-"]:
                 d1, d2 = d_tup
-                alias_dict[k + sep + d1] = 'W@' + d1
-                alias_dict[k + sep + d2] = 'W@' + d1
+                alias_dict[k + sep + d1] = 'W-' + d1
+                alias_dict[k + sep + d2] = 'W-' + d1
 
     return alias_dict
 
@@ -713,7 +713,7 @@ _reso_interval_map = {
     "month"   : "M",
     "day"     : "D",
     "hour"    : "H",
-    "minute"  : "Min",
+    "minute"  : "T",
     "second"  : "S",
 }
 
@@ -734,7 +734,7 @@ def _get_freq_code(freqstr):
             #e.g., freqstr = (2000, 1)
             return freqstr
         else:
-            #e.g., freqstr = ('Min', 5)
+            #e.g., freqstr = ('T', 5)
             try:
                 code = _interval_str_to_code(freqstr[0])
                 stride = freqstr[1]
@@ -754,6 +754,10 @@ def _get_freq_code(freqstr):
 _skts_alias_dict = _skts_alias_dictionary()
 
 def _interval_str_to_code(freqstr):
+    # hack
+    freqstr = _rule_aliases.get(freqstr, freqstr)
+    freqstr = _rule_aliases.get(freqstr.lower(), freqstr)
+
     try:
         freqstr = freqstr.upper()
         return _interval_code_map[freqstr]
@@ -1091,9 +1095,12 @@ class DateOffset(object):
         b = ((someDate + self) - self)
         return a == b
 
+
+class Day(DateOffset, CacheableOffset):
+    _outputName = 'Day'
+
     def rule_code(self):
-        if self.__class__.__name__ == DateOffset.__name__:
-            return 'D'
+        return 'D'
 
 class BDay(DateOffset, CacheableOffset):
     """
@@ -1320,7 +1327,7 @@ class Week(DateOffset, CacheableOffset):
     def rule_code(self):
         suffix = ''
         if self.weekday is not None:
-            suffix = '@%s' % (_weekday_dict[self.weekday])
+            suffix = '-%s' % (_weekday_dict[self.weekday])
         return 'W' + suffix
 
 _weekday_dict = {
@@ -1402,7 +1409,7 @@ class WeekOfMonth(DateOffset, CacheableOffset):
         return someDate == self.getOffsetOfMonth(someDate)
 
     def rule_code(self):
-        suffix = '@%d%s' % (self.week + 1, _weekday_dict.get(self.weekday, ''))
+        suffix = '-%d%s' % (self.week + 1, _weekday_dict.get(self.weekday, ''))
         return 'WOM' + suffix
 
 class BQuarterEnd(DateOffset, CacheableOffset):
@@ -1451,7 +1458,7 @@ class BQuarterEnd(DateOffset, CacheableOffset):
         return BMonthEnd().onOffset(someDate) and modMonth == 0
 
     def rule_code(self):
-        suffix = '@%s' % _month_dict[self.startingMonth]
+        suffix = '-%s' % _month_dict[self.startingMonth]
         return 'BQ' + suffix
 
 _month_dict = {
@@ -1515,7 +1522,7 @@ class BQuarterBegin(DateOffset, CacheableOffset):
         return result
 
     def rule_code(self):
-        suffix = '@%s' % _month_dict[self.startingMonth]
+        suffix = '-%s' % _month_dict[self.startingMonth]
         return 'BQS' + suffix
 
 
@@ -1559,7 +1566,7 @@ class QuarterEnd(DateOffset, CacheableOffset):
         return MonthEnd().onOffset(someDate) and modMonth == 0
 
     def rule_code(self):
-        suffix = '@%s' % _month_dict[self.startingMonth]
+        suffix = '-%s' % _month_dict[self.startingMonth]
         return 'Q' + suffix
 
 
@@ -1599,7 +1606,7 @@ class QuarterBegin(DateOffset, CacheableOffset):
         return other
 
     def rule_code(self):
-        suffix = '@%s' % _month_dict[self.startingMonth]
+        suffix = '-%s' % _month_dict[self.startingMonth]
         return 'QS' + suffix
 
 
@@ -1647,7 +1654,7 @@ class BYearEnd(DateOffset, CacheableOffset):
         return result
 
     def rule_code(self):
-        suffix = '@%s' % _month_dict[self.month]
+        suffix = '-%s' % _month_dict[self.month]
         return 'BA' + suffix
 
 
@@ -1694,7 +1701,7 @@ class BYearBegin(DateOffset, CacheableOffset):
         return result
 
     def rule_code(self):
-        suffix = '@%s' % _month_dict[self.month]
+        suffix = '-%s' % _month_dict[self.month]
         return 'BAS' + suffix
 
 
@@ -1725,7 +1732,7 @@ class YearEnd(DateOffset, CacheableOffset):
         return self.month == someDate.month and someDate.day == days_in_month
 
     def rule_code(self):
-        suffix = '@%s' % _month_dict[self.month]
+        suffix = '-%s' % _month_dict[self.month]
         return 'A' + suffix
 
 
@@ -1755,7 +1762,7 @@ class YearBegin(DateOffset, CacheableOffset):
         return someDate.month == 1 and someDate.day == 1
 
     def rule_code(self):
-        suffix = '@%s' % _month_dict[self.month]
+        suffix = '-%s' % _month_dict[self.month]
         return 'AS' + suffix
 
 
@@ -1767,6 +1774,18 @@ class Tick(DateOffset):
     _delta = None
     _inc = timedelta(microseconds=1000)
 
+    def __eq__(self, other):
+        if isinstance(other, Tick):
+            return self._inc == other._inc
+        else:
+            return DateOffset.__eq__(self, other)
+
+    def __ne__(self, other):
+        if isinstance(other, Tick):
+            return self._inc != other._inc
+        else:
+            return DateOffset.__ne__(self, other)
+
     @property
     def delta(self):
         if self._delta is None:
@@ -1798,7 +1817,7 @@ class Minute(Tick):
     _inc = timedelta(0, 60)
 
     def rule_code(self):
-        return 'Min'
+        return 'T'
 
 class Second(Tick):
     _inc = timedelta(0, 1)
@@ -1847,171 +1866,196 @@ isBMonthEnd = BMonthEnd().onOffset
 #-------------------------------------------------------------------------------
 # Offset names ("time rules") and related functions
 
+
 _offset_map = {
-    "WEEKDAY"  : BDay(1),
+    'D'     : Day(),
+    'B'     : BDay(),
+    'H'     : Hour(),
+    'T'     : Minute(),
+    'S'     : Second(),
+    'L'     : Milli(),
+    'U'     : Micro(),
+    None    : None,
 
-    # Annual - Calendar
-    "A-JAN" : YearEnd(month=1),
-    "A-FEB" : YearEnd(month=2),
-    "A-MAR" : YearEnd(month=3),
-    "A-APR" : YearEnd(month=4),
-    "A-MAY" : YearEnd(month=5),
-    "A-JUN" : YearEnd(month=6),
-    "A-JUL" : YearEnd(month=7),
-    "A-AUG" : YearEnd(month=8),
-    "A-SEP" : YearEnd(month=9),
-    "A-OCT" : YearEnd(month=10),
-    "A-NOV" : YearEnd(month=11),
-    "A-DEC" : YearEnd(month=12),
+    # Monthly - Calendar
+    'M'      : MonthEnd(),
+    'MS'     : MonthBegin(),
+
+    # Monthly - Business
+    'BM'     : BMonthEnd(),
+    'BMS'    : BMonthBegin(),
 
     # Annual - Calendar
-    "A@JAN" : YearEnd(month=1),
-    "A@FEB" : YearEnd(month=2),
-    "A@MAR" : YearEnd(month=3),
-    "A@APR" : YearEnd(month=4),
-    "A@MAY" : YearEnd(month=5),
-    "A@JUN" : YearEnd(month=6),
-    "A@JUL" : YearEnd(month=7),
-    "A@AUG" : YearEnd(month=8),
-    "A@SEP" : YearEnd(month=9),
-    "A@OCT" : YearEnd(month=10),
-    "A@NOV" : YearEnd(month=11),
-    "A@DEC" : YearEnd(month=12),
-    "A"     : YearEnd(month=12),
+    'A-JAN' : YearEnd(month=1),
+    'A-FEB' : YearEnd(month=2),
+    'A-MAR' : YearEnd(month=3),
+    'A-APR' : YearEnd(month=4),
+    'A-MAY' : YearEnd(month=5),
+    'A-JUN' : YearEnd(month=6),
+    'A-JUL' : YearEnd(month=7),
+    'A-AUG' : YearEnd(month=8),
+    'A-SEP' : YearEnd(month=9),
+    'A-OCT' : YearEnd(month=10),
+    'A-NOV' : YearEnd(month=11),
+    'A-DEC' : YearEnd(month=12),
+    'A'     : YearEnd(month=12),
+
     # Annual - Calendar (start)
-    "AS@JAN" : YearBegin(month=1),
-    "AS"     : YearBegin(month=1),
-    "AS@FEB" : YearBegin(month=2),
-    "AS@MAR" : YearBegin(month=3),
-    "AS@APR" : YearBegin(month=4),
-    "AS@MAY" : YearBegin(month=5),
-    "AS@JUN" : YearBegin(month=6),
-    "AS@JUL" : YearBegin(month=7),
-    "AS@AUG" : YearBegin(month=8),
-    "AS@SEP" : YearBegin(month=9),
-    "AS@OCT" : YearBegin(month=10),
-    "AS@NOV" : YearBegin(month=11),
-    "AS@DEC" : YearBegin(month=12),
+    'AS-JAN' : YearBegin(month=1),
+    'AS'     : YearBegin(month=1),
+    'AS-FEB' : YearBegin(month=2),
+    'AS-MAR' : YearBegin(month=3),
+    'AS-APR' : YearBegin(month=4),
+    'AS-MAY' : YearBegin(month=5),
+    'AS-JUN' : YearBegin(month=6),
+    'AS-JUL' : YearBegin(month=7),
+    'AS-AUG' : YearBegin(month=8),
+    'AS-SEP' : YearBegin(month=9),
+    'AS-OCT' : YearBegin(month=10),
+    'AS-NOV' : YearBegin(month=11),
+    'AS-DEC' : YearBegin(month=12),
     # Annual - Business
-    "BA@JAN" : BYearEnd(month=1),
-    "BA@FEB" : BYearEnd(month=2),
-    "BA@MAR" : BYearEnd(month=3),
-    "BA@APR" : BYearEnd(month=4),
-    "BA@MAY" : BYearEnd(month=5),
-    "BA@JUN" : BYearEnd(month=6),
-    "BA@JUL" : BYearEnd(month=7),
-    "BA@AUG" : BYearEnd(month=8),
-    "BA@SEP" : BYearEnd(month=9),
-    "BA@OCT" : BYearEnd(month=10),
-    "BA@NOV" : BYearEnd(month=11),
-    "BA@DEC" : BYearEnd(month=12),
-    "BA"     : BYearEnd(month=12),
+    'BA-JAN' : BYearEnd(month=1),
+    'BA-FEB' : BYearEnd(month=2),
+    'BA-MAR' : BYearEnd(month=3),
+    'BA-APR' : BYearEnd(month=4),
+    'BA-MAY' : BYearEnd(month=5),
+    'BA-JUN' : BYearEnd(month=6),
+    'BA-JUL' : BYearEnd(month=7),
+    'BA-AUG' : BYearEnd(month=8),
+    'BA-SEP' : BYearEnd(month=9),
+    'BA-OCT' : BYearEnd(month=10),
+    'BA-NOV' : BYearEnd(month=11),
+    'BA-DEC' : BYearEnd(month=12),
+    'BA'     : BYearEnd(month=12),
     # Annual - Business (Start)
-    "BAS@JAN" : BYearBegin(month=1),
-    "BAS"     : BYearBegin(month=1),
-    "BAS@FEB" : BYearBegin(month=2),
-    "BAS@MAR" : BYearBegin(month=3),
-    "BAS@APR" : BYearBegin(month=4),
-    "BAS@MAY" : BYearBegin(month=5),
-    "BAS@JUN" : BYearBegin(month=6),
-    "BAS@JUL" : BYearBegin(month=7),
-    "BAS@AUG" : BYearBegin(month=8),
-    "BAS@SEP" : BYearBegin(month=9),
-    "BAS@OCT" : BYearBegin(month=10),
-    "BAS@NOV" : BYearBegin(month=11),
-    "BAS@DEC" : BYearBegin(month=12),
+    'BAS-JAN' : BYearBegin(month=1),
+    'BAS'     : BYearBegin(month=1),
+    'BAS-FEB' : BYearBegin(month=2),
+    'BAS-MAR' : BYearBegin(month=3),
+    'BAS-APR' : BYearBegin(month=4),
+    'BAS-MAY' : BYearBegin(month=5),
+    'BAS-JUN' : BYearBegin(month=6),
+    'BAS-JUL' : BYearBegin(month=7),
+    'BAS-AUG' : BYearBegin(month=8),
+    'BAS-SEP' : BYearBegin(month=9),
+    'BAS-OCT' : BYearBegin(month=10),
+    'BAS-NOV' : BYearBegin(month=11),
+    'BAS-DEC' : BYearBegin(month=12),
     # Quarterly - Calendar
-    "Q@JAN" : QuarterEnd(startingMonth=1),
-    "Q@FEB" : QuarterEnd(startingMonth=2),
-    "Q@MAR" : QuarterEnd(startingMonth=3),
-    "Q"     : QuarterEnd(startingMonth=3),
-    "Q@APR" : QuarterEnd(startingMonth=4),
-    "Q@MAY" : QuarterEnd(startingMonth=5),
-    "Q@JUN" : QuarterEnd(startingMonth=6),
-    "Q@JUL" : QuarterEnd(startingMonth=7),
-    "Q@AUG" : QuarterEnd(startingMonth=8),
-    "Q@SEP" : QuarterEnd(startingMonth=9),
-    "Q@OCT" : QuarterEnd(startingMonth=10),
-    "Q@NOV" : QuarterEnd(startingMonth=11),
-    "Q@DEC" : QuarterEnd(startingMonth=12),
+    'Q-JAN' : QuarterEnd(startingMonth=1),
+    'Q-FEB' : QuarterEnd(startingMonth=2),
+    'Q-MAR' : QuarterEnd(startingMonth=3),
+    'Q'     : QuarterEnd(startingMonth=3),
+    'Q-APR' : QuarterEnd(startingMonth=4),
+    'Q-MAY' : QuarterEnd(startingMonth=5),
+    'Q-JUN' : QuarterEnd(startingMonth=6),
+    'Q-JUL' : QuarterEnd(startingMonth=7),
+    'Q-AUG' : QuarterEnd(startingMonth=8),
+    'Q-SEP' : QuarterEnd(startingMonth=9),
+    'Q-OCT' : QuarterEnd(startingMonth=10),
+    'Q-NOV' : QuarterEnd(startingMonth=11),
+    'Q-DEC' : QuarterEnd(startingMonth=12),
     # Quarterly - Calendar (Start)
-    "QS@JAN" : QuarterBegin(startingMonth=1),
-    "QS"     : QuarterBegin(startingMonth=1),
-    "QS@FEB" : QuarterBegin(startingMonth=2),
-    "QS@MAR" : QuarterBegin(startingMonth=3),
-    "QS@APR" : QuarterBegin(startingMonth=4),
-    "QS@MAY" : QuarterBegin(startingMonth=5),
-    "QS@JUN" : QuarterBegin(startingMonth=6),
-    "QS@JUL" : QuarterBegin(startingMonth=7),
-    "QS@AUG" : QuarterBegin(startingMonth=8),
-    "QS@SEP" : QuarterBegin(startingMonth=9),
-    "QS@OCT" : QuarterBegin(startingMonth=10),
-    "QS@NOV" : QuarterBegin(startingMonth=11),
-    "QS@DEC" : QuarterBegin(startingMonth=12),
+    'QS-JAN' : QuarterBegin(startingMonth=1),
+    'QS'     : QuarterBegin(startingMonth=1),
+    'QS-FEB' : QuarterBegin(startingMonth=2),
+    'QS-MAR' : QuarterBegin(startingMonth=3),
+    'QS-APR' : QuarterBegin(startingMonth=4),
+    'QS-MAY' : QuarterBegin(startingMonth=5),
+    'QS-JUN' : QuarterBegin(startingMonth=6),
+    'QS-JUL' : QuarterBegin(startingMonth=7),
+    'QS-AUG' : QuarterBegin(startingMonth=8),
+    'QS-SEP' : QuarterBegin(startingMonth=9),
+    'QS-OCT' : QuarterBegin(startingMonth=10),
+    'QS-NOV' : QuarterBegin(startingMonth=11),
+    'QS-DEC' : QuarterBegin(startingMonth=12),
     # Quarterly - Business
-    "BQ@JAN" : BQuarterEnd(startingMonth=1),
-    "BQ@FEB" : BQuarterEnd(startingMonth=2),
-    "BQ@MAR" : BQuarterEnd(startingMonth=3),
-    "BQ"     : BQuarterEnd(startingMonth=3),
-    "BQ@APR" : BQuarterEnd(startingMonth=4),
-    "BQ@MAY" : BQuarterEnd(startingMonth=5),
-    "BQ@JUN" : BQuarterEnd(startingMonth=6),
-    "BQ@JUL" : BQuarterEnd(startingMonth=7),
-    "BQ@AUG" : BQuarterEnd(startingMonth=8),
-    "BQ@SEP" : BQuarterEnd(startingMonth=9),
-    "BQ@OCT" : BQuarterEnd(startingMonth=10),
-    "BQ@NOV" : BQuarterEnd(startingMonth=11),
-    "BQ@DEC" : BQuarterEnd(startingMonth=12),
+    'BQ-JAN' : BQuarterEnd(startingMonth=1),
+    'BQ-FEB' : BQuarterEnd(startingMonth=2),
+    'BQ-MAR' : BQuarterEnd(startingMonth=3),
+    'BQ'     : BQuarterEnd(startingMonth=3),
+    'BQ-APR' : BQuarterEnd(startingMonth=4),
+    'BQ-MAY' : BQuarterEnd(startingMonth=5),
+    'BQ-JUN' : BQuarterEnd(startingMonth=6),
+    'BQ-JUL' : BQuarterEnd(startingMonth=7),
+    'BQ-AUG' : BQuarterEnd(startingMonth=8),
+    'BQ-SEP' : BQuarterEnd(startingMonth=9),
+    'BQ-OCT' : BQuarterEnd(startingMonth=10),
+    'BQ-NOV' : BQuarterEnd(startingMonth=11),
+    'BQ-DEC' : BQuarterEnd(startingMonth=12),
     # Quarterly - Business (Start)
-    "BQS@JAN" : BQuarterBegin(startingMonth=1),
-    "BQS"     : BQuarterBegin(startingMonth=1),
-    "BQS@FEB" : BQuarterBegin(startingMonth=2),
-    "BQS@MAR" : BQuarterBegin(startingMonth=3),
-    "BQS@APR" : BQuarterBegin(startingMonth=4),
-    "BQS@MAY" : BQuarterBegin(startingMonth=5),
-    "BQS@JUN" : BQuarterBegin(startingMonth=6),
-    "BQS@JUL" : BQuarterBegin(startingMonth=7),
-    "BQS@AUG" : BQuarterBegin(startingMonth=8),
-    "BQS@SEP" : BQuarterBegin(startingMonth=9),
-    "BQS@OCT" : BQuarterBegin(startingMonth=10),
-    "BQS@NOV" : BQuarterBegin(startingMonth=11),
-    "BQS@DEC" : BQuarterBegin(startingMonth=12),
-    # Monthly - Calendar
-    "M"      : MonthEnd(),
-    "MS"     : MonthBegin(),
-
-    # Monthly - Business
-    "BM"     : BMonthEnd(),
-    "EOM"      : BMonthEnd(1),  # legacy, deprecated?
-    "BMS"    : BMonthBegin(),
-
-    # "EOM"    : MonthEnd(),
-    # "SOM"    : MonthBegin(),
-    # "BEOM"   : BMonthEnd(),
-    # "BSOM"   : BMonthBegin(),
+    'BQS-JAN' : BQuarterBegin(startingMonth=1),
+    'BQS'     : BQuarterBegin(startingMonth=1),
+    'BQS-FEB' : BQuarterBegin(startingMonth=2),
+    'BQS-MAR' : BQuarterBegin(startingMonth=3),
+    'BQS-APR' : BQuarterBegin(startingMonth=4),
+    'BQS-MAY' : BQuarterBegin(startingMonth=5),
+    'BQS-JUN' : BQuarterBegin(startingMonth=6),
+    'BQS-JUL' : BQuarterBegin(startingMonth=7),
+    'BQS-AUG' : BQuarterBegin(startingMonth=8),
+    'BQS-SEP' : BQuarterBegin(startingMonth=9),
+    'BQS-OCT' : BQuarterBegin(startingMonth=10),
+    'BQS-NOV' : BQuarterBegin(startingMonth=11),
+    'BQS-DEC' : BQuarterBegin(startingMonth=12),
 
     # Weekly
-    "W@MON" : Week(weekday=0),
-    "WS"    : Week(weekday=0),
-    "BWS"   : Week(weekday=0),
-    "W@TUE" : Week(weekday=1),
-    "W@WED" : Week(weekday=2),
-    "W@THU" : Week(weekday=3),
-    "W@FRI" : Week(weekday=4),
-    "BW"    : Week(weekday=4),
-    "W@SAT" : Week(weekday=5),
-    "W@SUN" : Week(weekday=6),
-    "W"     : Week(weekday=6),
-    "D"     : DateOffset(),
-    "B"     : BDay(),
-    "H"     : Hour(),
-    "Min"   : Minute(),
-    "S"     : Second(),
-    "L"     : Milli(),
-    "U"     : Micro(),
-    None    : None,
+    'W-MON' : Week(weekday=0),
+    'W-TUE' : Week(weekday=1),
+    'W-WED' : Week(weekday=2),
+    'W-THU' : Week(weekday=3),
+    'W-FRI' : Week(weekday=4),
+    'W-SAT' : Week(weekday=5),
+    'W-SUN' : Week(weekday=6),
+
+    # Dunno about these
+
+    # 'WS'    : Week(weekday=0),
+    # 'BWS'   : Week(weekday=0),
+    # 'BW'    : Week(weekday=4),
+    # 'W'     : Week(weekday=6),
+}
+
+_rule_aliases = {
+    # Legacy rules that will continue to map to their original values
+    # essentially for the rest of time
+
+    'WEEKDAY': 'B',
+    'EOM': 'BM',
+
+    'W@MON': 'W-MON',
+    'W@TUE': 'W-TUE',
+    'W@WED': 'W-WED',
+    'W@THU': 'W-THU',
+    'W@FRI': 'W-FRI',
+    'W@SAT': 'W-SAT',
+    'W@SUN': 'W-SUN',
+
+    'Q@JAN': 'BQ-JAN',
+    'Q@FEB': 'BQ-FEB',
+    'Q@MAR': 'BQ-MAR',
+
+    'A@JAN' : 'BA-JAN',
+    'A@FEB' : 'BA-FEB',
+    'A@MAR' : 'BA-MAR',
+    'A@APR' : 'BA-APR',
+    'A@MAY' : 'BA-MAY',
+    'A@JUN' : 'BA-JUN',
+    'A@JUL' : 'BA-JUL',
+    'A@AUG' : 'BA-AUG',
+    'A@SEP' : 'BA-SEP',
+    'A@OCT' : 'BA-OCT',
+    'A@NOV' : 'BA-NOV',
+    'A@DEC' : 'BA-DEC',
+
+    # lite aliases
+    'Min': 'T',
+    'min': 'T',
+    'ms': 'L',
+    'us': 'U'
 }
 
+
 for i, weekday in enumerate(['MON', 'TUE', 'WED', 'THU', 'FRI']):
     for iweek in xrange(4):
         _offset_map['WOM@%d%s' % (iweek + 1, weekday)] = \
@@ -2067,7 +2111,7 @@ def to_offset(freqstr):
     else:
         name, stride = _base_and_stride(freqstr)
 
-    offset = getOffset(name)
+    offset = get_offset(name)
 
     return offset * stride
 
@@ -2095,18 +2139,27 @@ def _base_and_stride(freqstr):
 
     return (base, stride)
 
+_dont_uppercase = ['MS', 'ms']
 
-def getOffset(name):
+def get_offset(name):
     """
     Return DateOffset object associated with rule name
 
     Example
     -------
-    getOffset('EOM') --> BMonthEnd(1)
+    get_offset('EOM') --> BMonthEnd(1)
     """
-    name = name.upper()
-    if name == 'MIN':
-        name = 'Min'
+    if name not in _dont_uppercase:
+        name = name.upper()
+
+        if name in _rule_aliases:
+            name = _rule_aliases[name]
+        elif name.lower() in _rule_aliases:
+            name = _rule_aliases[name.lower()]
+    else:
+        if name in _rule_aliases:
+            name = _rule_aliases[name]
+
     offset = _offset_map.get(name)
 
     if offset is not None:
@@ -2114,6 +2167,10 @@ def getOffset(name):
     else:
         raise Exception('Bad rule name requested: %s!' % name)
 
+
+getOffset = get_offset
+
+
 def hasOffsetName(offset):
     return offset in _offset_names
 
diff --git a/pandas/tests/test_daterange.py b/pandas/tests/test_daterange.py
index 5925a8a3a..b29068020 100644
--- a/pandas/tests/test_daterange.py
+++ b/pandas/tests/test_daterange.py
@@ -26,7 +26,7 @@ START, END = datetime(2009, 1, 1), datetime(2010, 1, 1)
 class TestGenRangeGeneration(unittest.TestCase):
     def test_generate(self):
         rng1 = list(generate_range(START, END, offset=datetools.bday))
-        rng2 = list(generate_range(START, END, time_rule='WEEKDAY'))
+        rng2 = list(generate_range(START, END, time_rule='B'))
         self.assert_(np.array_equal(rng1, rng2))
 
     def test_1(self):
@@ -376,201 +376,6 @@ class TestDateRange(unittest.TestCase):
         exp_values = [start + i * offset for i in range(5)]
         self.assert_(np.array_equal(result, DatetimeIndex(exp_values)))
 
-class TestDatetimePyx(unittest.TestCase):
-
-    def test_yearoffset(self):
-        off = lib.YearOffset(dayoffset=0, biz=0, anchor=datetime(2002,1,1))
-
-        for i in range(500):
-            t = lib.Timestamp(off.ts)
-            self.assert_(t.day == 1)
-            self.assert_(t.month == 1)
-            self.assert_(t.year == 2002 + i)
-            off.next()
-
-        for i in range(499, -1, -1):
-            off.prev()
-            t = lib.Timestamp(off.ts)
-            self.assert_(t.day == 1)
-            self.assert_(t.month == 1)
-            self.assert_(t.year == 2002 + i)
-
-        off = lib.YearOffset(dayoffset=-1, biz=0, anchor=datetime(2002,1,1))
-
-        for i in range(500):
-            t = lib.Timestamp(off.ts)
-            self.assert_(t.month == 12)
-            self.assert_(t.day == 31)
-            self.assert_(t.year == 2001 + i)
-            off.next()
-
-        for i in range(499, -1, -1):
-            off.prev()
-            t = lib.Timestamp(off.ts)
-            self.assert_(t.month == 12)
-            self.assert_(t.day == 31)
-            self.assert_(t.year == 2001 + i)
-
-        off = lib.YearOffset(dayoffset=-1, biz=-1, anchor=datetime(2002,1,1))
-
-        stack = []
-
-        for i in range(500):
-            t = lib.Timestamp(off.ts)
-            stack.append(t)
-            self.assert_(t.month == 12)
-            self.assert_(t.day == 31 or t.day == 30 or t.day == 29)
-            self.assert_(t.year == 2001 + i)
-            self.assert_(t.weekday() < 5)
-            off.next()
-
-        for i in range(499, -1, -1):
-            off.prev()
-            t = lib.Timestamp(off.ts)
-            self.assert_(t == stack.pop())
-            self.assert_(t.month == 12)
-            self.assert_(t.day == 31 or t.day == 30 or t.day == 29)
-            self.assert_(t.year == 2001 + i)
-            self.assert_(t.weekday() < 5)
-
-    def test_monthoffset(self):
-        off = lib.MonthOffset(dayoffset=0, biz=0, anchor=datetime(2002,1,1))
-
-        for i in range(12):
-            t = lib.Timestamp(off.ts)
-            self.assert_(t.day == 1)
-            self.assert_(t.month == 1 + i)
-            self.assert_(t.year == 2002)
-            off.next()
-
-        for i in range(11, -1, -1):
-            off.prev()
-            t = lib.Timestamp(off.ts)
-            self.assert_(t.day == 1)
-            self.assert_(t.month == 1 + i)
-            self.assert_(t.year == 2002)
-
-        off = lib.MonthOffset(dayoffset=-1, biz=0, anchor=datetime(2002,1,1))
-
-        for i in range(12):
-            t = lib.Timestamp(off.ts)
-            self.assert_(t.day >= 28)
-            self.assert_(t.month == (12 if i == 0 else i))
-            self.assert_(t.year == 2001 + (i != 0))
-            off.next()
-
-        for i in range(11, -1, -1):
-            off.prev()
-            t = lib.Timestamp(off.ts)
-            self.assert_(t.day >= 28)
-            self.assert_(t.month == (12 if i == 0 else i))
-            self.assert_(t.year == 2001 + (i != 0))
-
-        off = lib.MonthOffset(dayoffset=-1, biz=-1, anchor=datetime(2002,1,1))
-
-        stack = []
-
-        for i in range(500):
-            t = lib.Timestamp(off.ts)
-            stack.append(t)
-            if t.month != 2:
-                self.assert_(t.day >= 28)
-            else:
-                self.assert_(t.day >= 26)
-            self.assert_(t.weekday() < 5)
-            off.next()
-
-        for i in range(499, -1, -1):
-            off.prev()
-            t = lib.Timestamp(off.ts)
-            self.assert_(t == stack.pop())
-            if t.month != 2:
-                self.assert_(t.day >= 28)
-            else:
-                self.assert_(t.day >= 26)
-            self.assert_(t.weekday() < 5)
-
-        for i in (-2, -1, 1, 2):
-            for j in (-1, 0, 1):
-                off1 = lib.MonthOffset(dayoffset=i, biz=j, stride=12,
-                                       anchor=datetime(2002,1,1))
-                off2 = lib.YearOffset(dayoffset=i, biz=j,
-                                      anchor=datetime(2002,1,1))
-
-                for k in range(500):
-                    self.assert_(off1.ts == off2.ts)
-                    off1.next()
-                    off2.next()
-
-                for k in range(500):
-                    self.assert_(off1.ts == off2.ts)
-                    off1.prev()
-                    off2.prev()
-
-    def test_dayoffset(self):
-        off = lib.DayOffset(biz=0, anchor=datetime(2002,1,1))
-
-        us_in_day = 1e6 * 60 * 60 * 24
-
-        t0 = lib.Timestamp(off.ts)
-        for i in range(500):
-            off.next()
-            t1 = lib.Timestamp(off.ts)
-            self.assert_(t1.value - t0.value == us_in_day)
-            t0 = t1
-
-        t0 = lib.Timestamp(off.ts)
-        for i in range(499, -1, -1):
-            off.prev()
-            t1 = lib.Timestamp(off.ts)
-            self.assert_(t0.value - t1.value == us_in_day)
-            t0 = t1
-
-        off = lib.DayOffset(biz=1, anchor=datetime(2002,1,1))
-
-        t0 = lib.Timestamp(off.ts)
-        for i in range(500):
-            off.next()
-            t1 = lib.Timestamp(off.ts)
-            self.assert_(t1.weekday() < 5)
-            self.assert_(t1.value - t0.value == us_in_day or
-                         t1.value - t0.value == 3 * us_in_day)
-            t0 = t1
-
-        t0 = lib.Timestamp(off.ts)
-        for i in range(499, -1, -1):
-            off.prev()
-            t1 = lib.Timestamp(off.ts)
-            self.assert_(t1.weekday() < 5)
-            self.assert_(t0.value - t1.value == us_in_day or
-                         t0.value - t1.value == 3 * us_in_day)
-            t0 = t1
-
-    def test_dayofmonthoffset(self):
-        for week in (-1, 0, 1):
-            for day in (0, 2, 4):
-                off = lib.DayOfMonthOffset(week=-1, day=day,
-                                           anchor=datetime(2002,1,1))
-
-                stack = []
-
-                for i in range(500):
-                    t = lib.Timestamp(off.ts)
-                    stack.append(t)
-                    self.assert_(t.weekday() == day)
-                    off.next()
-
-                for i in range(499, -1, -1):
-                    off.prev()
-                    t = lib.Timestamp(off.ts)
-                    self.assert_(t == stack.pop())
-                    self.assert_(t.weekday() == day)
-
-    def test_catch_infinite_loop(self):
-        offset = datetools.DateOffset(minute=5)
-        # blow up, don't loop forever
-        self.assertRaises(Exception, date_range, datetime(2011,11,11),
-                          datetime(2011,11,12), freq=offset)
 
 def _skip_if_no_pytz():
     try:
@@ -579,6 +384,7 @@ def _skip_if_no_pytz():
         import nose
         raise nose.SkipTest
 
+
 if __name__ == '__main__':
     import nose
     nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
diff --git a/pandas/tests/test_datetools.py b/pandas/tests/test_datetools.py
index 99d740f5f..f9f8ec4bf 100644
--- a/pandas/tests/test_datetools.py
+++ b/pandas/tests/test_datetools.py
@@ -7,7 +7,7 @@ from pandas.core.datetools import (
     BYearBegin, QuarterBegin, BQuarterBegin, BMonthBegin,
     DateOffset, Week, YearBegin, YearEnd, Hour, Minute, Second,
     WeekOfMonth, format, ole2datetime, QuarterEnd, to_datetime, normalize_date,
-    getOffset, getOffsetName, inferTimeRule, hasOffsetName,
+    get_offset, getOffsetName, inferTimeRule, hasOffsetName,
     _dt_box, _dt_unbox, parse_time_string, get_standard_freq,
     _offset_map)
 
@@ -1269,28 +1269,28 @@ def test_hasOffsetName():
 def test_getOffsetName():
     assert_raises(Exception, getOffsetName, BDay(2))
 
-    assert getOffsetName(BDay()) in ['WEEKDAY', 'B']
-    assert getOffsetName(BMonthEnd()) in ['EOM', 'BM']
-    assert getOffsetName(Week(weekday=0)) in ['W@MON', 'WS']
-    assert getOffsetName(Week(weekday=1)) =='W@TUE'
-    assert getOffsetName(Week(weekday=2)) == 'W@WED'
-    assert getOffsetName(Week(weekday=3)) == 'W@THU'
-    assert getOffsetName(Week(weekday=4)) in ['W@FRI', 'BW']
-
-
-def test_getOffset():
-    assert_raises(Exception, getOffset, 'gibberish')
-
-    assert getOffset('WEEKDAY') == BDay()
-    assert getOffset('weEkDaY') == BDay()
-    assert getOffset('EOM') == BMonthEnd()
-    assert getOffset('eOM') == BMonthEnd()
-    assert getOffset('W@MON') == Week(weekday=0)
-    assert getOffset('W@TUE') == Week(weekday=1)
-    assert getOffset('W@WED') == Week(weekday=2)
-    assert getOffset('W@THU') == Week(weekday=3)
-    assert getOffset('W@FRI') == Week(weekday=4)
-    assert getOffset('w@Sat') == Week(weekday=5)
+    assert getOffsetName(BDay()) == 'B'
+    assert getOffsetName(BMonthEnd()) == 'BM'
+    assert getOffsetName(Week(weekday=0)) == 'W-MON'
+    assert getOffsetName(Week(weekday=1)) =='W-TUE'
+    assert getOffsetName(Week(weekday=2)) == 'W-WED'
+    assert getOffsetName(Week(weekday=3)) == 'W-THU'
+    assert getOffsetName(Week(weekday=4)) == 'W-FRI'
+
+
+def test_get_offset():
+    assert_raises(Exception, get_offset, 'gibberish')
+
+    assert get_offset('B') == BDay()
+    assert get_offset('b') == BDay()
+    assert get_offset('bm') == BMonthEnd()
+    assert get_offset('Bm') == BMonthEnd()
+    assert get_offset('W-MON') == Week(weekday=0)
+    assert get_offset('W-TUE') == Week(weekday=1)
+    assert get_offset('W-WED') == Week(weekday=2)
+    assert get_offset('W-THU') == Week(weekday=3)
+    assert get_offset('W-FRI') == Week(weekday=4)
+    assert get_offset('w@Sat') == Week(weekday=5)
 
 def test_parse_time_string():
     (date, parsed, reso) = parse_time_string('4Q1984')
@@ -1312,7 +1312,7 @@ def test_get_standard_freq():
     assert fstr == get_standard_freq(('q', 5))
 
 def test_rule_code():
-    lst = ['M', 'MS', 'BM', 'BMS', 'D', 'B', 'H', 'Min', 'S', 'L', 'U']
+    lst = ['M', 'MS', 'BM', 'BMS', 'D', 'B', 'H', 'T', 'S', 'L', 'U']
     for k in lst:
         assert k == _offset_map[k].rule_code()
         assert k == (_offset_map[k] * 3).rule_code()
@@ -1320,7 +1320,7 @@ def test_rule_code():
     suffix_lst = ['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN']
     base = 'W'
     for v in suffix_lst:
-        alias = '@'.join([base, v])
+        alias = '-'.join([base, v])
         assert alias == _offset_map[alias].rule_code()
         assert alias == (_offset_map[alias] * 5).rule_code()
 
@@ -1329,7 +1329,7 @@ def test_rule_code():
     base_lst = ['A', 'AS', 'BA', 'BAS', 'Q', 'QS', 'BQ', 'BQS']
     for base in base_lst:
         for v in suffix_lst:
-            alias = '@'.join([base, v])
+            alias = '-'.join([base, v])
             assert alias == _offset_map[alias].rule_code()
             assert alias == (_offset_map[alias] * 5).rule_code()
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 5c579d044..a60ef2c08 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2744,19 +2744,19 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
     def test_asfreq(self):
         offset_monthly = self.tsframe.asfreq(datetools.bmonthEnd)
-        rule_monthly = self.tsframe.asfreq('EOM')
+        rule_monthly = self.tsframe.asfreq('BM')
 
         assert_almost_equal(offset_monthly['A'], rule_monthly['A'])
 
-        filled = rule_monthly.asfreq('WEEKDAY', method='pad')
+        filled = rule_monthly.asfreq('B', method='pad')
         # TODO: actually check that this worked.
 
         # don't forget!
-        filled_dep = rule_monthly.asfreq('WEEKDAY', method='pad')
+        filled_dep = rule_monthly.asfreq('B', method='pad')
 
         # test does not blow up on length-0 DataFrame
         zero_length = self.tsframe.reindex([])
-        result = zero_length.asfreq('EOM')
+        result = zero_length.asfreq('BM')
         self.assert_(result is not zero_length)
 
     def test_asfreq_datetimeindex(self):
@@ -2764,10 +2764,10 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         df = DataFrame({'A': [1,2,3]},
                        index=[datetime(2011,11,01), datetime(2011,11,2),
                               datetime(2011,11,3)])
-        df = df.asfreq('WEEKDAY')
+        df = df.asfreq('B')
         self.assert_(isinstance(df.index, DatetimeIndex))
 
-        ts = df['A'].asfreq('WEEKDAY')
+        ts = df['A'].asfreq('B')
         self.assert_(isinstance(ts.index, DatetimeIndex))
 
     def test_as_matrix(self):
@@ -3638,7 +3638,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         shiftedFrame = self.tsframe.shift(5, freq=datetools.BDay())
         self.assert_(len(shiftedFrame) == len(self.tsframe))
 
-        shiftedFrame2 = self.tsframe.shift(5, freq='WEEKDAY')
+        shiftedFrame2 = self.tsframe.shift(5, freq='B')
         assert_frame_equal(shiftedFrame, shiftedFrame2)
 
         d = self.tsframe.index[0]
diff --git a/pandas/tests/test_interval.py b/pandas/tests/test_interval.py
index 2afe9a7c5..cc5c884d7 100644
--- a/pandas/tests/test_interval.py
+++ b/pandas/tests/test_interval.py
@@ -147,9 +147,9 @@ class TestIntervalProperties(TestCase):
 
     def test_properties_quarterly(self):
         # Test properties on Intervals with daily frequency.
-        qedec_date = Interval(freq="Q@DEC", year=2007, quarter=1)
-        qejan_date = Interval(freq="Q@JAN", year=2007, quarter=1)
-        qejun_date = Interval(freq="Q@JUN", year=2007, quarter=1)
+        qedec_date = Interval(freq="Q-DEC", year=2007, quarter=1)
+        qejan_date = Interval(freq="Q-JAN", year=2007, quarter=1)
+        qejun_date = Interval(freq="Q-JUN", year=2007, quarter=1)
         #
         for x in range(3):
             for qd in (qedec_date, qejan_date, qejun_date):
@@ -263,9 +263,9 @@ class TestFreqConversion(TestCase):
 
         ival_A = Interval(freq='A', year=2007)
 
-        ival_AJAN = Interval(freq="A@JAN", year=2007)
-        ival_AJUN = Interval(freq="A@JUN", year=2007)
-        ival_ANOV = Interval(freq="A@NOV", year=2007)
+        ival_AJAN = Interval(freq="A-JAN", year=2007)
+        ival_AJUN = Interval(freq="A-JUN", year=2007)
+        ival_ANOV = Interval(freq="A-NOV", year=2007)
 
         ival_A_to_Q_start = Interval(freq='Q', year=2007, quarter=1)
         ival_A_to_Q_end = Interval(freq='Q', year=2007, quarter=4)
@@ -332,8 +332,8 @@ class TestFreqConversion(TestCase):
         ival_Q = Interval(freq='Q', year=2007, quarter=1)
         ival_Q_end_of_year = Interval(freq='Q', year=2007, quarter=4)
 
-        ival_QEJAN = Interval(freq="Q@JAN", year=2007, quarter=1)
-        ival_QEJUN = Interval(freq="Q@JUN", year=2007, quarter=1)
+        ival_QEJAN = Interval(freq="Q-JAN", year=2007, quarter=1)
+        ival_QEJUN = Interval(freq="Q-JUN", year=2007, quarter=1)
 
         ival_Q_to_A = Interval(freq='A', year=2007)
         ival_Q_to_M_start = Interval(freq='M', year=2007, month=1)
@@ -443,12 +443,12 @@ class TestFreqConversion(TestCase):
         ival_W = Interval(freq='WK', year=2007, month=1, day=1)
 
         ival_WSUN = Interval(freq='WK', year=2007, month=1, day=7)
-        ival_WSAT = Interval(freq='WK@SAT', year=2007, month=1, day=6)
-        ival_WFRI = Interval(freq='WK@FRI', year=2007, month=1, day=5)
-        ival_WTHU = Interval(freq='WK@THU', year=2007, month=1, day=4)
-        ival_WWED = Interval(freq='WK@WED', year=2007, month=1, day=3)
-        ival_WTUE = Interval(freq='WK@TUE', year=2007, month=1, day=2)
-        ival_WMON = Interval(freq='WK@MON', year=2007, month=1, day=1)
+        ival_WSAT = Interval(freq='WK-SAT', year=2007, month=1, day=6)
+        ival_WFRI = Interval(freq='WK-FRI', year=2007, month=1, day=5)
+        ival_WTHU = Interval(freq='WK-THU', year=2007, month=1, day=4)
+        ival_WWED = Interval(freq='WK-WED', year=2007, month=1, day=3)
+        ival_WTUE = Interval(freq='WK-TUE', year=2007, month=1, day=2)
+        ival_WMON = Interval(freq='WK-MON', year=2007, month=1, day=1)
 
         ival_WSUN_to_D_start = Interval(freq='D', year=2007, month=1, day=1)
         ival_WSUN_to_D_end = Interval(freq='D', year=2007, month=1, day=7)
@@ -614,13 +614,13 @@ class TestFreqConversion(TestCase):
 
         ival_D_to_A = Interval(freq='A', year=2007)
 
-        ival_Deoq_to_AJAN = Interval(freq='A@JAN', year=2008)
-        ival_Deoq_to_AJUN = Interval(freq='A@JUN', year=2007)
-        ival_Deoq_to_ADEC = Interval(freq='A@DEC', year=2007)
+        ival_Deoq_to_AJAN = Interval(freq='A-JAN', year=2008)
+        ival_Deoq_to_AJUN = Interval(freq='A-JUN', year=2007)
+        ival_Deoq_to_ADEC = Interval(freq='A-DEC', year=2007)
 
-        ival_D_to_QEJAN = Interval(freq="Q@JAN", year=2007, quarter=4)
-        ival_D_to_QEJUN = Interval(freq="Q@JUN", year=2007, quarter=3)
-        ival_D_to_QEDEC = Interval(freq="Q@DEC", year=2007, quarter=1)
+        ival_D_to_QEJAN = Interval(freq="Q-JAN", year=2007, quarter=4)
+        ival_D_to_QEJUN = Interval(freq="Q-JUN", year=2007, quarter=3)
+        ival_D_to_QEDEC = Interval(freq="Q-DEC", year=2007, quarter=1)
 
         ival_D_to_M = Interval(freq='M', year=2007, month=1)
         ival_D_to_W = Interval(freq='WK', year=2007, month=1, day=7)
@@ -640,18 +640,18 @@ class TestFreqConversion(TestCase):
 
         assert_equal(ival_D.resample('A'), ival_D_to_A)
 
-        assert_equal(ival_D_end_of_quarter.resample('A@JAN'),
+        assert_equal(ival_D_end_of_quarter.resample('A-JAN'),
                      ival_Deoq_to_AJAN)
-        assert_equal(ival_D_end_of_quarter.resample('A@JUN'),
+        assert_equal(ival_D_end_of_quarter.resample('A-JUN'),
                      ival_Deoq_to_AJUN)
-        assert_equal(ival_D_end_of_quarter.resample('A@DEC'),
+        assert_equal(ival_D_end_of_quarter.resample('A-DEC'),
                      ival_Deoq_to_ADEC)
 
         assert_equal(ival_D_end_of_year.resample('A'), ival_D_to_A)
         assert_equal(ival_D_end_of_quarter.resample('Q'), ival_D_to_QEDEC)
-        assert_equal(ival_D.resample("Q@JAN"), ival_D_to_QEJAN)
-        assert_equal(ival_D.resample("Q@JUN"), ival_D_to_QEJUN)
-        assert_equal(ival_D.resample("Q@DEC"), ival_D_to_QEDEC)
+        assert_equal(ival_D.resample("Q-JAN"), ival_D_to_QEJAN)
+        assert_equal(ival_D.resample("Q-JUN"), ival_D_to_QEJUN)
+        assert_equal(ival_D.resample("Q-DEC"), ival_D_to_QEDEC)
         assert_equal(ival_D.resample('M'), ival_D_to_M)
         assert_equal(ival_D_end_of_month.resample('M'), ival_D_to_M)
         assert_equal(ival_D.resample('WK'), ival_D_to_W)
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 4e380f08f..ae49f3bd2 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -1719,8 +1719,8 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         unshifted = self.ts.shift(0, freq=offset)
         assert_series_equal(unshifted, self.ts)
 
-        shifted = self.ts.shift(1, freq='WEEKDAY')
-        unshifted = shifted.shift(-1, freq='WEEKDAY')
+        shifted = self.ts.shift(1, freq='B')
+        unshifted = shifted.shift(-1, freq='B')
 
         assert_series_equal(unshifted, self.ts)
 
@@ -2200,12 +2200,12 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
                                          datetime(2009, 11, 30),
                                          datetime(2009, 12, 31)])
 
-        daily_ts = ts.asfreq('WEEKDAY')
-        monthly_ts = daily_ts.asfreq('EOM')
+        daily_ts = ts.asfreq('B')
+        monthly_ts = daily_ts.asfreq('BM')
         self.assert_(np.array_equal(monthly_ts, ts))
 
-        daily_ts = ts.asfreq('WEEKDAY', method='pad')
-        monthly_ts = daily_ts.asfreq('EOM')
+        daily_ts = ts.asfreq('B', method='pad')
+        monthly_ts = daily_ts.asfreq('BM')
         self.assert_(np.array_equal(monthly_ts, ts))
 
         daily_ts = ts.asfreq(datetools.bday)
diff --git a/pandas/tests/test_timeseries.py b/pandas/tests/test_timeseries.py
index d69cdb901..f311cc0cd 100644
--- a/pandas/tests/test_timeseries.py
+++ b/pandas/tests/test_timeseries.py
@@ -14,6 +14,7 @@ from pandas import (Index, Series, TimeSeries, DataFrame, isnull,
 from pandas import DatetimeIndex, to_datetime
 
 from pandas.core.daterange import DateRange
+import pandas.core.datetools as datetools
 
 from pandas.util.testing import assert_series_equal, assert_almost_equal
 import pandas.util.testing as tm
@@ -375,6 +376,8 @@ class TestTimeSeries(unittest.TestCase):
         assert_series_equal(dresult, expected)
         self.assertEquals(dresult.name, 'foo')
 
+
+
 def _skip_if_no_pytz():
     try:
         import pytz
@@ -382,7 +385,7 @@ def _skip_if_no_pytz():
         import nose
         raise nose.SkipTest
 
-class TestLegacyInteraction(unittest.TestCase):
+class TestLegacySupport(unittest.TestCase):
 
     @classmethod
     def setUpClass(cls):
@@ -495,6 +498,34 @@ class TestLegacyInteraction(unittest.TestCase):
         expected = Index([])
         self.assert_(result.equals(expected))
 
+    def test_legacy_time_rules(self):
+        rules = [('WEEKDAY', 'B'),
+                 ('EOM', 'BM'),
+                 ('W@MON', 'W-MON'), ('W@TUE', 'W-TUE'), ('W@WED', 'W-WED'),
+                 ('W@THU', 'W-THU'), ('W@FRI', 'W-FRI'),
+                 ('Q@JAN', 'BQ-JAN'), ('Q@FEB', 'BQ-FEB'), ('Q@MAR', 'BQ-MAR'),
+                 ('A@JAN', 'BA-JAN'), ('A@FEB', 'BA-FEB'), ('A@MAR', 'BA-MAR'),
+                 ('A@APR', 'BA-APR'), ('A@MAY', 'BA-MAY'), ('A@JUN', 'BA-JUN'),
+                 ('A@JUL', 'BA-JUL'), ('A@AUG', 'BA-AUG'), ('A@SEP', 'BA-SEP'),
+                 ('A@OCT', 'BA-OCT'), ('A@NOV', 'BA-NOV'), ('A@DEC', 'BA-DEC')
+                 ]
+
+        start, end = '1/1/2000', '1/1/2010'
+
+        for old_freq, new_freq in rules:
+            old_rng = date_range(start, end, freq=old_freq)
+            new_rng = date_range(start, end, freq=new_freq)
+            self.assert_(old_rng.equals(new_rng))
+
+    def test_ms_vs_MS(self):
+        left = datetools.get_offset('ms')
+        right = datetools.get_offset('MS')
+        self.assert_(left == datetools.Milli())
+        self.assert_(right == datetools.MonthBegin())
+
+    def test_rule_aliases(self):
+        rule = datetools.to_offset('10us')
+        self.assert_(rule == datetools.Micro(10))
 
 class TestDateRangeCompat(unittest.TestCase):
 
@@ -525,7 +556,7 @@ class TestDatetime64(unittest.TestCase):
 
 
     def test_datetimeindex_accessors(self):
-        dti = DatetimeIndex(freq='Q@JAN', start=datetime(1997,12,31),
+        dti = DatetimeIndex(freq='Q-JAN', start=datetime(1997,12,31),
                             periods=100)
 
         self.assertEquals(dti.year[0], 1998)
@@ -559,9 +590,9 @@ class TestDatetime64(unittest.TestCase):
         self.assertEquals(len(dti.quarter), 100)
 
     def test_datetimeindex_diff(self):
-        dti1 = DatetimeIndex(freq='Q@JAN', start=datetime(1997,12,31),
+        dti1 = DatetimeIndex(freq='Q-JAN', start=datetime(1997,12,31),
                              periods=100)
-        dti2 = DatetimeIndex(freq='Q@JAN', start=datetime(1997,12,31),
+        dti2 = DatetimeIndex(freq='Q-JAN', start=datetime(1997,12,31),
                              periods=98)
         self.assert_( len(dti1.diff(dti2)) == 2)
 
@@ -641,7 +672,7 @@ class TestDatetime64(unittest.TestCase):
         s = Series(rand(len(dti)), dti)
 
         # to weekly
-        result = s.convert('W') # implicitly @SUN
+        result = s.convert('w-sun')
 
         self.assertEquals(len(result), 3)
         self.assert_((result.index.dayofweek == [6,6,6]).all())
@@ -649,31 +680,31 @@ class TestDatetime64(unittest.TestCase):
         self.assertEquals(result.irow(1), s['1/9/2005'])
         self.assertEquals(result.irow(2), s.irow(-1))
 
-        result = s.convert('W@MON')
+        result = s.convert('W-MON')
         self.assertEquals(len(result), 2)
         self.assert_((result.index.dayofweek == [0,0]).all())
         self.assertEquals(result.irow(0), s['1/3/2005'])
         self.assertEquals(result.irow(1), s['1/10/2005'])
 
-        result = s.convert('W@TUE')
+        result = s.convert('W-TUE')
         self.assertEquals(len(result), 2)
         self.assert_((result.index.dayofweek == [1,1]).all())
         self.assertEquals(result.irow(0), s['1/4/2005'])
         self.assertEquals(result.irow(1), s['1/10/2005'])
 
-        result = s.convert('W@WED')
+        result = s.convert('W-WED')
         self.assertEquals(len(result), 2)
         self.assert_((result.index.dayofweek == [2,2]).all())
         self.assertEquals(result.irow(0), s['1/5/2005'])
         self.assertEquals(result.irow(1), s['1/10/2005'])
 
-        result = s.convert('W@THU')
+        result = s.convert('W-THU')
         self.assertEquals(len(result), 2)
         self.assert_((result.index.dayofweek == [3,3]).all())
         self.assertEquals(result.irow(0), s['1/6/2005'])
         self.assertEquals(result.irow(1), s['1/10/2005'])
 
-        result = s.convert('W@FRI')
+        result = s.convert('W-FRI')
         self.assertEquals(len(result), 2)
         self.assert_((result.index.dayofweek == [4,4]).all())
         self.assertEquals(result.irow(0), s['1/7/2005'])
@@ -829,7 +860,7 @@ class TestDatetime64(unittest.TestCase):
         self.assertEquals(idx[-1], edate)
         self.assertEquals(idx.freq, '5D')
 
-        idx1 = DatetimeIndex(start=sdate, end=edate, freq='W')
+        idx1 = DatetimeIndex(start=sdate, end=edate, freq='W-SUN')
         idx2 = DatetimeIndex(start=sdate, end=edate,
                              freq=dt.Week(weekday=6))
         self.assertEquals(len(idx1), len(idx2))
@@ -839,11 +870,11 @@ class TestDatetime64(unittest.TestCase):
         dti = DatetimeIndex(['1/1/2002', '1/2/2002', '1/3/2002', '1/4/2002',
                              '1/5/2002', '1/6/2002', '1/7/2002'], freq='D')
 
-        res = dti.snap(freq='W@MON')
+        res = dti.snap(freq='W-MON')
 
         exp = DatetimeIndex(['12/31/2001', '12/31/2001', '12/31/2001',
                              '1/7/2002', '1/7/2002', '1/7/2002', '1/7/2002'],
-                             freq='W@MON')
+                             freq='W-MON')
 
         self.assert_( (res == exp).all() )
 
@@ -1068,6 +1099,12 @@ class TestNewOffsets(unittest.TestCase):
                     self.assert_(t.weekday() == day)
 
 
+    def test_catch_infinite_loop(self):
+        offset = datetools.DateOffset(minute=5)
+        # blow up, don't loop forever
+        self.assertRaises(Exception, date_range, datetime(2011,11,11),
+                          datetime(2011,11,12), freq=offset)
+
 
 if __name__ == '__main__':
     nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
