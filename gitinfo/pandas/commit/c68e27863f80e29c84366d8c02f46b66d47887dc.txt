commit c68e27863f80e29c84366d8c02f46b66d47887dc
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Jul 1 14:31:45 2011 -0400

    BUG: fixed join_on regression from refactor

diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index a59a503fd..542f61c57 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -8,6 +8,7 @@ from pandas.core.index import Index, NULL_INDEX
 from pandas.core.common import _ensure_index, _try_sort
 from pandas.core.series import Series
 import pandas.core.common as common
+import pandas._tseries as _tseries
 
 class Block(object):
     """
@@ -551,9 +552,19 @@ class BlockManager(object):
         return BlockManager(consolidated, self.index, cons_cols)
 
     def join_on(self, other, on):
-        reindexed = other.reindex_index(on)
-        reindexed.index = self.index
-        return self.merge(reindexed)
+        indexer, mask = _tseries.getMergeVec(on, other.index.indexMap)
+
+        # TODO: deal with length-0 case? or does it fall out?
+        notmask = -mask
+        needs_masking = len(on) > 0 and notmask.any()
+        other_blocks = []
+        for block in other.blocks:
+            newb = block.reindex_index(indexer, notmask, needs_masking)
+            other_blocks.append(newb)
+
+        cons_cols = self.columns + other.columns
+        consolidated = _consolidate(self.blocks + other_blocks, cons_cols)
+        return BlockManager(consolidated, self.index, cons_cols)
 
     def reindex_columns(self, new_columns):
         """
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 5448e2f25..123e93b4e 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -10,7 +10,7 @@ import operator
 import sys
 import warnings
 
-from numpy import NaN, ndarray
+from numpy import nan, ndarray
 import numpy as np
 
 from pandas.core.common import isnull, notnull, _ensure_index
@@ -63,8 +63,7 @@ def _arith_method(op, name):
                                            self.index.indexMap,
                                            other.index.indexMap)
             except Exception:
-                arr = Series._combineFunc(self, other,
-                                          getattr(type(self[0]), name))
+                arr = Series.combine(self, other, getattr(type(self[0]), name))
             result = Series(arr, index=newIndex)
             return result
 
@@ -81,7 +80,7 @@ def _arith_method(op, name):
 
 def _flex_method(op, name):
     def f(self, other, fill_value=None):
-        return self._combine(other, op, fill_value=fill_value)
+        return self._binop(other, op, fill_value=fill_value)
 
     f.__doc__ = """
     Binary operator %s with support to substitute a fill_value for missing data
@@ -546,7 +545,7 @@ class Series(np.ndarray, PandasGeneric):
         """
         nona = remove_na(self.values)
         if len(nona) < 2:
-            return NaN
+            return nan
         return ndarray.std(nona, axis, dtype, out, ddof)
 
     def var(self, axis=None, dtype=None, out=None, ddof=1):
@@ -555,7 +554,7 @@ class Series(np.ndarray, PandasGeneric):
         """
         nona = remove_na(self.values)
         if len(nona) < 2:
-            return NaN
+            return nan
         return ndarray.var(nona, axis, dtype, out, ddof)
 
     def skew(self):
@@ -630,7 +629,7 @@ class Series(np.ndarray, PandasGeneric):
         commonIdx = self.valid().index.intersection(other.valid().index)
 
         if len(commonIdx) == 0:
-            return NaN
+            return nan
 
         this = self.reindex(commonIdx)
         that = other.reindex(commonIdx)
@@ -736,7 +735,7 @@ class Series(np.ndarray, PandasGeneric):
         new_values = np.concatenate((self, other))
         return Series(new_values, index=newIndex)
 
-    def _combine(self, other, func, fill_value=None):
+    def _binop(self, other, func, fill_value=None):
         """
         Parameters
         ----------
@@ -782,34 +781,34 @@ class Series(np.ndarray, PandasGeneric):
     mul = _flex_method(operator.mul, 'multiply')
     div = _flex_method(operator.div, 'divide')
 
-    def _combineFunc(self, other, func):
+    def combine(self, other, func, fill_value=nan):
         """
-        Combines this Series using the given function with either
-          * another Series index by index
-          * a scalar value
-          * DataFrame
+        Perform elementwise binary operation on two Series using given function
+        with optional fill value when an index is missing from one Series or the
+        other
 
         Parameters
         ----------
-        other : {Series, DataFrame, scalar value}
+        other : Series or scalar value
+        func : function
+        fill_value : scalar value
 
         Returns
         -------
-        y : {Series or DataFrame}
-            Output depends on input. If a DataFrame is inputted, that
-            will be the return type.
+        result : Series
         """
         if isinstance(other, Series):
             newIndex = self.index + other.index
 
-            newArr = np.empty(len(newIndex), dtype=self.dtype)
+            new_values = np.empty(len(newIndex), dtype=self.dtype)
             for i, idx in enumerate(newIndex):
-                newArr[i] = func(self.get(idx, NaN), other.get(idx, NaN))
+                new_values[i] = func(self.get(idx, fill_value),
+                                 other.get(idx, fill_value))
         else:
             newIndex = self.index
-            newArr = func(self.values, other)
+            new_values = func(self.values, other)
 
-        return Series(newArr, index=newIndex)
+        return Series(new_values, index=newIndex)
 
     def combineFirst(self, other):
         """
@@ -989,7 +988,7 @@ class Series(np.ndarray, PandasGeneric):
 
         index = _ensure_index(index)
         if len(self.index) == 0:
-            return Series(NaN, index=index)
+            return Series(nan, index=index)
 
         fill_vec, mask = self.index.get_indexer(index, method=method)
         new_values = self.values.take(fill_vec)
@@ -1001,7 +1000,7 @@ class Series(np.ndarray, PandasGeneric):
             elif issubclass(new_values.dtype.type, np.bool_):
                 new_values = new_values.astype(object)
 
-            np.putmask(new_values, notmask, NaN)
+            np.putmask(new_values, notmask, nan)
 
         return Series(new_values, index=index)
 
@@ -1255,10 +1254,10 @@ class Series(np.ndarray, PandasGeneric):
 
             if periods > 0:
                 new_values[periods:] = self.values[:-periods]
-                new_values[:periods] = np.NaN
+                new_values[:periods] = nan
             elif periods < 0:
                 new_values[:periods] = self.values[-periods:]
-                new_values[periods:] = np.NaN
+                new_values[periods:] = nan
 
             return Series(new_values, index=self.index)
         else:
@@ -1319,7 +1318,7 @@ class Series(np.ndarray, PandasGeneric):
             if index > 0:
                 asOfDate = candidates[index - 1]
             else:
-                return NaN
+                return nan
 
             return self.get(asOfDate)
         else:
@@ -1423,7 +1422,7 @@ class Series(np.ndarray, PandasGeneric):
     # Deprecated stuff
 
     @classmethod
-    def fromValue(cls, value=np.NaN, index=None, dtype=None): # pragma: no cover
+    def fromValue(cls, value=nan, index=None, dtype=None): # pragma: no cover
         warnings.warn("'fromValue', can call Series(value, index=index) now",
                       FutureWarning)
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 56c633c5b..ece091a26 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1984,6 +1984,14 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         self.assert_(np.array_equal(merged['MergedA'], target['A']))
         self.assert_(np.array_equal(merged['MergedD'], target['D']))
 
+        # join with duplicates (fix regression from DataFrame/Matrix merge)
+        df = DataFrame({'key' : ['a', 'a', 'b', 'b', 'c']})
+        df2 = DataFrame({'value' : [0, 1, 2]}, index=['a', 'b', 'c'])
+        joined = df.join(df2, on='key')
+        expected = DataFrame({'key' : ['a', 'a', 'b', 'b', 'c'],
+                              'value' : [0, 0, 1, 1, 2]})
+        assert_frame_equal(joined, expected)
+
         # Test when some are missing
         df_a = DataFrame([[1], [2], [3]], index=['a', 'b', 'c'],
                          columns=['one'])
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 595a66b25..732481eb3 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -395,7 +395,7 @@ class TestSeries(unittest.TestCase):
 
         def _check_op(other, op):
             cython_or_numpy = op(series, other)
-            python = series._combineFunc(other, op)
+            python = series.combine(other, op)
 
             common.assert_almost_equal(cython_or_numpy, python)
 
