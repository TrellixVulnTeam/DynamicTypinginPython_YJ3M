commit e76b825053bb61c04bac9b7db349e6d76f3b64ee
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Sep 23 09:55:15 2011 -0400

    ENH: starting on faster ordered merge functions

diff --git a/pandas/src/reindex.pyx b/pandas/src/reindex.pyx
index 51fdb54eb..8fc26d886 100644
--- a/pandas/src/reindex.pyx
+++ b/pandas/src/reindex.pyx
@@ -309,3 +309,72 @@ def getMergeVec(ndarray[object] values, dict oldMap):
             fillVec[i] = -1
 
     return fillVec, mask.astype(bool)
+
+def ordered_left_join(ndarray[object] left, ndarray[object] right):
+    # cdef dict right_map = map_indices_buf(right)
+    # return getMergeVec(left, right_map)
+    cdef:
+        Py_ssize_t i, j, k, n
+        ndarray[int32_t] indexer
+        ndarray[uint8_t, cast=True] mask
+        object val
+
+    i = 0
+    j = 0
+    n = len(left)
+    k = len(right)
+
+    indexer = np.zeros(n, dtype=np.int32)
+    mask = np.ones(n, dtype=np.bool)
+
+    for i from 0 <= i < n:
+        val = left[i]
+
+        while j < k and right[j] < val:
+            j += 1
+
+        if j == k:
+            break
+
+        if val == right[j]:
+            indexer[i] = j
+            mask[i] = 0
+
+    return indexer, mask
+
+def ordered_left_join_int64(ndarray[int64_t] left, ndarray[int64_t] right):
+    cdef:
+        Py_ssize_t i, j, k, n
+        ndarray[int32_t] indexer
+        ndarray[uint8_t, cast=True] mask
+        int64_t val
+
+    i = 0
+    j = 0
+    n = len(left)
+    k = len(right)
+
+    indexer = np.zeros(n, dtype=np.int32)
+    mask = np.ones(n, dtype=np.bool)
+
+    for i from 0 <= i < n:
+        val = left[i]
+
+        while j < k and right[j] < val:
+            j += 1
+
+        if j == k:
+            break
+
+        if val == right[j]:
+            indexer[i] = j
+            mask[i] = 0
+
+    return indexer, mask
+
+def ordered_outer_join(ndarray[object] left, ndarray[object] right):
+    pass
+
+def ordered_inner_join(ndarray[object] left, ndarray[object] right):
+    pass
+
diff --git a/scripts/bench_join.py b/scripts/bench_join.py
new file mode 100644
index 000000000..4eb1aa647
--- /dev/null
+++ b/scripts/bench_join.py
@@ -0,0 +1,74 @@
+import numpy as np
+import pandas._tseries as lib
+from pandas import *
+from copy import deepcopy
+
+a = np.arange(100000, dtype=np.int64)
+b = a[::2].copy()
+
+dr1 = DateRange('1/1/2000', periods=100000, offset=datetools.Minute())
+dr2 = DateRange('1/1/2000', periods=50000, offset=datetools.Minute(2))
+
+aobj = a.astype(object)
+bobj = b.astype(object)
+
+av = np.random.randn(100000)
+bv = np.random.randn(50000)
+
+K = 1
+
+avf = np.random.randn(100000, K)
+bvf = np.random.randn(50000, K)
+
+a_series = Series(av, index=a)
+b_series = Series(bv, index=b)
+
+a_frame = DataFrame(avf, index=dr1, columns=range(K))
+b_frame = DataFrame(bvf, index=dr2, columns=range(K, 2 * K))
+
+def do_left_join(a, b, av, bv):
+    indexer, mask = lib.ordered_left_join_int64(a, b)
+    result = bv.take(indexer)
+    np.putmask(result, mask, np.nan)
+    return result
+
+from line_profiler import LineProfiler
+prof = LineProfiler()
+
+from pandas.util.testing import set_trace
+
+@prof
+def do_left_join_multi(a, b, av, bv):
+    indexer, mask = lib.ordered_left_join_int64(a, b)
+
+    n, ak = av.shape
+    _, bk = bv.shape
+    result_width = ak + bk
+
+    result = np.empty((result_width, n), dtype=np.float64)
+    result[:ak] = av.T
+
+    bchunk = result[ak:]
+    take_multi(bv.T, indexer, bchunk)
+    np.putmask(bchunk, np.tile(mask, bk), np.nan)
+    return result
+
+def take_multi(data, indexer, out):
+    if not data.flags.c_contiguous:
+        data = data.copy()
+    for i in xrange(data.shape[0]):
+        data[i].take(indexer, out=out[i])
+
+def do_left_join_multi_v2(a, b, av, bv):
+    indexer, mask = lib.ordered_left_join_int64(a, b)
+    bv_taken = bv.take(indexer, axis=0)
+    np.putmask(bv_taken, mask.repeat(bv.shape[1]), np.nan)
+    return np.concatenate((av, bv_taken), axis=1)
+
+def do_left_join_series(a, b):
+    return b.reindex(a.index)
+
+def do_left_join_frame(a, b):
+    a.index._indexMap = None
+    b.index._indexMap = None
+    return a.join(b, how='left')
