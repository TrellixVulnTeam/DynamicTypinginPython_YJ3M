commit cf907c88fecb04b70f7263549bb07053039dfc0b
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat May 26 13:26:46 2012 -0400

    BUG: python 2.5 fixes

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index d4957e1d9..c109cf185 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -802,7 +802,9 @@ class DataFrame(NDFrame):
                         args = (args[0].T, args[2], args[1])
                     df = DataFrame(*args)
                 elif orient == "split":
-                    df = DataFrame(**loads(json, dtype=dtype, numpy=True))
+                    decoded = loads(json, dtype=dtype, numpy=True)
+                    decoded = dict((str(k), v) for k, v in decoded.iteritems())
+                    df = DataFrame(**decoded)
                 elif orient == "values":
                     df = DataFrame(loads(json, dtype=dtype, numpy=True))
                 else:
@@ -814,7 +816,9 @@ class DataFrame(NDFrame):
             if orient == "columns":
                 df = DataFrame(loads(json), dtype=dtype)
             elif orient == "split":
-                df = DataFrame(dtype=dtype, **loads(json))
+                decoded = dict((str(k), v) 
+                               for k, v in loads(json).iteritems())
+                df = DataFrame(dtype=dtype, **decoded)
             elif orient == "index":
                 df = DataFrame(loads(json), dtype=dtype).T
             else:
diff --git a/pandas/core/series.py b/pandas/core/series.py
index a6d10c53b..745944773 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -947,7 +947,9 @@ copy : boolean, default False
         if numpy:
             try:
                 if orient == "split":
-                    s = Series(**loads(json, dtype=dtype, numpy=True))
+                    decoded = loads(json, dtype=dtype, numpy=True)
+                    decoded = dict((str(k), v) for k, v in decoded.iteritems())
+                    s = Series(**decoded)
                 elif orient == "columns" or orient == "index":
                     s = Series(*loads(json, dtype=dtype, numpy=True,
                                       labelled=True))
@@ -957,7 +959,9 @@ copy : boolean, default False
                 numpy = False
         if not numpy:
             if orient == "split":
-                s = Series(dtype=dtype, **loads(json))
+                decoded = dict((str(k), v) 
+                               for k, v in loads(json).iteritems())
+                s = Series(dtype=dtype, **decoded)
             else:
                 s = Series(loads(json), dtype=dtype)
 
diff --git a/pandas/src/ujson/python/JSONtoObj.c b/pandas/src/ujson/python/JSONtoObj.c
index 71fd5e2d1..8a72164db 100644
--- a/pandas/src/ujson/python/JSONtoObj.c
+++ b/pandas/src/ujson/python/JSONtoObj.c
@@ -212,7 +212,7 @@ int Object_npyArrayAddItem(JSOBJ obj, JSOBJ value)
 
     npyarr->shape.ptr[npyarr->dec->curdim-1]++;
 
-    if (PyArray_Check(value))
+    if (PyArray_Check((PyObject*)value))
     {
         // multidimensional array, keep decoding values.
         return 1;
diff --git a/pandas/tests/test_ujson.py b/pandas/tests/test_ujson.py
index f2910ec7a..7481d0aae 100644
--- a/pandas/tests/test_ujson.py
+++ b/pandas/tests/test_ujson.py
@@ -304,15 +304,15 @@ class UltraJSONTests(TestCase):
             pass
 
     def test_encodeDoubleNan(self):
-        input = float('nan')
+        input = np.nan
         assert ujson.encode(input) == 'null', "Expected null"
 
     def test_encodeDoubleInf(self):
-        input = float('inf')
+        input = np.inf
         assert ujson.encode(input) == 'null', "Expected null"
 
     def test_encodeDoubleNegInf(self):
-        input = -float('inf')
+        input = -np.inf
         assert ujson.encode(input) == 'null', "Expected null"
 
 
@@ -959,7 +959,8 @@ class PandasJSONTests(TestCase):
         assert_array_equal(df.columns, outp.columns)
         assert_array_equal(df.index, outp.index)
 
-        outp = DataFrame(**ujson.decode(ujson.encode(df, orient="split")))
+        dec = _clean_dict(ujson.decode(ujson.encode(df, orient="split")))
+        outp = DataFrame(**dec)
         self.assertTrue((df == outp).values.all())
         assert_array_equal(df.columns, outp.columns)
         assert_array_equal(df.index, outp.index)
@@ -987,8 +988,10 @@ class PandasJSONTests(TestCase):
         self.assertTrue((df == outp).values.all())
         assert_array_equal(df.columns, outp.columns)
         assert_array_equal(df.index, outp.index)
-
-        outp = DataFrame(**ujson.decode(ujson.encode(df, orient="split"), numpy=True))
+    
+        dec = _clean_dict(ujson.decode(ujson.encode(df, orient="split"), 
+                          numpy=True))
+        outp = DataFrame(**dec)
         self.assertTrue((df == outp).values.all())
         assert_array_equal(df.columns, outp.columns)
         assert_array_equal(df.index, outp.index)
@@ -1055,11 +1058,14 @@ class PandasJSONTests(TestCase):
         outp.sort()
         self.assertTrue((s == outp).values.all())
 
-        outp = Series(**ujson.decode(ujson.encode(s, orient="split")))
+        dec = _clean_dict(ujson.decode(ujson.encode(s, orient="split")))
+        outp = Series(**dec)
         self.assertTrue((s == outp).values.all())
         self.assertTrue(s.name == outp.name)
 
-        outp = Series(**ujson.decode(ujson.encode(s, orient="split"), numpy=True))
+        dec = _clean_dict(ujson.decode(ujson.encode(s, orient="split"), 
+                          numpy=True))
+        outp = Series(**dec)
         self.assertTrue((s == outp).values.all())
         self.assertTrue(s.name == outp.name)
 
@@ -1119,11 +1125,14 @@ class PandasJSONTests(TestCase):
         outp = Index(ujson.decode(ujson.encode(i), numpy=True))
         assert_array_equal(i, outp)
 
-        outp = Index(**ujson.decode(ujson.encode(i, orient="split")))
+        dec = _clean_dict(ujson.decode(ujson.encode(i, orient="split")))
+        outp = Index(**dec)
         assert_array_equal(i, outp)
         self.assertTrue(i.name == outp.name)
 
-        outp = Index(**ujson.decode(ujson.encode(i, orient="split"), numpy=True))
+        dec = _clean_dict(ujson.decode(ujson.encode(i, orient="split"), 
+                          numpy=True))
+        outp = Index(**dec)
         assert_array_equal(i, outp)
         self.assertTrue(i.name == outp.name)
 
@@ -1186,6 +1195,10 @@ raise NotImplementedError("Implement this test!")
 
 
 """
+
+def _clean_dict(d):
+    return dict((str(k), v) for k, v in d.iteritems())
+    
 if __name__ == '__main__':
     # unittest.main()
     import nose
