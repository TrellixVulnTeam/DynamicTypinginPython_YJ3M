commit 84376e93747eb8d7aae7900961d7c71243c6ef98
Author: Phillip Cloud <cpcloud@gmail.com>
Date:   Wed Feb 12 21:37:37 2014 -0500

    BUG: fix bool no-op replace calls

diff --git a/pandas/core/common.py b/pandas/core/common.py
index e895c8ed0..b61b996f9 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -347,7 +347,13 @@ def mask_missing(arr, values_to_mask):
         values_to_mask = [values_to_mask]
 
     try:
-        values_to_mask = np.array(values_to_mask, dtype=arr.dtype)
+        values = np.array(values_to_mask)
+        cant_cast = not np.can_cast(values.dtype, arr.dtype, casting='safe')
+
+        if cant_cast and arr.dtype == np.bool_:
+            values_to_mask = values
+        else:
+            values_to_mask = np.array(values_to_mask, dtype=arr.dtype)
     except Exception:
         values_to_mask = np.array(values_to_mask, dtype=object)
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index a6ac80c99..f3a0f156e 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -7975,7 +7975,7 @@ class TestDataFrame(tm.TestCase, CheckIndexing,
         tm.assert_frame_equal(res2, res3)
         tm.assert_frame_equal(res3, expected)
 
-    def test_replace_doesnt_replace_with_no_regex(self):
+    def test_replace_doesnt_replace_without_regex(self):
         from pandas.compat import StringIO
         raw = """fol T_opp T_Dir T_Enh
         0    1     0     0    vo
@@ -7986,6 +7986,23 @@ class TestDataFrame(tm.TestCase, CheckIndexing,
         res = df.replace({'\D': 1})
         tm.assert_frame_equal(df, res)
 
+    def test_replace_bool_with_string(self):
+        df = DataFrame({'a': [True, False], 'b': list('ab')})
+        result = df.replace(True, 'a')
+        expected = DataFrame({'a': ['a', False], 'b': df.b})
+        tm.assert_frame_equal(result, expected)
+
+    def test_replace_pure_bool_with_string_no_op(self):
+        df = DataFrame(np.random.rand(2, 2) > 0.5)
+        result = df.replace('asdf', 'fdsa')
+        tm.assert_frame_equal(df, result)
+
+    def test_replace_bool_with_bool(self):
+        df = DataFrame(np.random.rand(2, 2) > 0.5)
+        result = df.replace(False, True)
+        expected = DataFrame(np.ones((2, 2), dtype=bool))
+        tm.assert_frame_equal(result, expected)
+
     def test_combine_multiple_frames_dtypes(self):
         from pandas import concat
 
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index c43b7b3ee..e8a357665 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -5349,6 +5349,24 @@ class TestSeries(tm.TestCase, CheckNameIntegration):
         assert_series_equal(r, Series([1.0,2,'a'] +
                                       dr[3:].tolist(),dtype=object))
 
+    def test_replace_bool_with_string_no_op(self):
+        s = Series([True, False, True])
+        result = s.replace('fun', 'in-the-sun')
+        tm.assert_series_equal(s, result)
+
+    def test_replace_bool_with_string(self):
+        # nonexistent elements
+        s = Series([True, False, True])
+        result = s.replace(True, '2u')
+        expected = Series(['2u', False, '2u'])
+        tm.assert_series_equal(expected, result)
+
+    def test_replace_bool_with_bool(self):
+        s = Series([True, False, True])
+        result = s.replace(True, False)
+        expected = Series([False] * len(s))
+        tm.assert_series_equal(expected, result)
+
     def test_asfreq(self):
         ts = Series([0., 1., 2.], index=[datetime(2009, 10, 30),
                                          datetime(2009, 11, 30),
