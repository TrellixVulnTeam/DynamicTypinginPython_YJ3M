commit e31f981d23c932c1679e7a893b01d7f6d936af5a
Author: Ben Kandel <ben.kandel@gmail.com>
Date:   Fri Aug 26 16:12:09 2016 -0400

    BUG: Series indexing with tuple-valued data and a numeric index
    
    closes #13509
    
    Author: Ben Kandel <ben.kandel@gmail.com>
    
    Closes #14092 from bkandel/fix-floatindex-tuple and squashes the following commits:
    
    2b77554 [Ben Kandel] Fix bug in Float64Index.get_value() for tuples.

diff --git a/doc/source/whatsnew/v0.19.0.txt b/doc/source/whatsnew/v0.19.0.txt
index 4a2468012..0ff63117e 100644
--- a/doc/source/whatsnew/v0.19.0.txt
+++ b/doc/source/whatsnew/v0.19.0.txt
@@ -1150,6 +1150,7 @@ Bug Fixes
 - Bug in ``DatetimeTZDtype`` dtype with ``dateutil.tz.tzlocal`` cannot be regarded as valid dtype (:issue:`13583`)
 - Bug in ``pd.read_hdf()`` where attempting to load an HDF file with a single dataset, that had one or more categorical columns, failed unless the key argument was set to the name of the dataset. (:issue:`13231`)
 - Bug in ``.rolling()`` that allowed a negative integer window in contruction of the ``Rolling()`` object, but would later fail on aggregation (:issue:`13383`)
+- Bug in ``Series`` indexing with tuple-valued data and a numeric index (:issue:`13509`)
 
 - Bug in printing ``pd.DataFrame`` where unusual elements with the ``object`` dtype were causing segfaults (:issue:`13717`)
 - Bug in ranking ``Series`` which could result in segfaults (:issue:`13445`)
diff --git a/pandas/indexes/numeric.py b/pandas/indexes/numeric.py
index 82a6ec0b2..e1ac09398 100644
--- a/pandas/indexes/numeric.py
+++ b/pandas/indexes/numeric.py
@@ -293,19 +293,11 @@ class Float64Index(NumericIndex):
         if not is_scalar(key):
             raise InvalidIndexError
 
-        from pandas.core.indexing import maybe_droplevels
-        from pandas.core.series import Series
-
         k = _values_from_object(key)
         loc = self.get_loc(k)
         new_values = _values_from_object(series)[loc]
 
-        if is_scalar(new_values) or new_values is None:
-            return new_values
-
-        new_index = self[loc]
-        new_index = maybe_droplevels(new_index, k)
-        return Series(new_values, index=new_index, name=series.name)
+        return new_values
 
     def equals(self, other):
         """
diff --git a/pandas/tests/indexing/test_floats.py b/pandas/tests/indexing/test_floats.py
index 29f3889d2..920aefa24 100644
--- a/pandas/tests/indexing/test_floats.py
+++ b/pandas/tests/indexing/test_floats.py
@@ -676,3 +676,14 @@ class TestFloatIndexers(tm.TestCase):
         assert_series_equal(result1, result2)
         assert_series_equal(result1, result3)
         assert_series_equal(result1, Series([1], index=[2.5]))
+
+    def test_floating_tuples(self):
+        # GH13509
+        s = Series([(1, 1), (2, 2), (3, 3)], index=[0.0, 0.1, 0.2], name='foo')
+        result = s[0.0]
+        self.assertEqual(result, (1, 1))
+
+        s = Series([(1, 1), (2, 2), (3, 3)], index=[0.0, 0.0, 0.2], name='foo')
+        result = s[0.0]
+        expected = Series([(1, 1), (2, 2)], index=[0.0, 0.0], name='foo')
+        assert_series_equal(result, expected)
