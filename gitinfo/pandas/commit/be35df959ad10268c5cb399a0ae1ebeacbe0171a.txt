commit be35df959ad10268c5cb399a0ae1ebeacbe0171a
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed May 2 18:28:14 2012 -0400

    ENH: resampling annual to quarterly if end in same month

diff --git a/pandas/src/sandbox.pyx b/pandas/src/sandbox.pyx
index 8d0894624..8dad296bb 100644
--- a/pandas/src/sandbox.pyx
+++ b/pandas/src/sandbox.pyx
@@ -552,23 +552,23 @@ def get_abs_time(freq, dailyDate, originalDate):
 have_pytz = 1
 import pytz
 
-cdef extern from "foo.h":
-    double add_things(double *a, double *b, double *c, int n)
+# cdef extern from "foo.h":
+#     double add_things(double *a, double *b, double *c, int n)
 
 
-def cython_test(ndarray a, ndarray b, ndarray c):
-    return add_things(<double*> a.data,
-                      <double*> b.data,
-                      <double*> c.data, len(a))
+# def cython_test(ndarray a, ndarray b, ndarray c):
+#     return add_things(<double*> a.data,
+#                       <double*> b.data,
+#                       <double*> c.data, len(a))
 
 
-def cython_test2(ndarray[float64_t] a, ndarray[float64_t] b,
-                 ndarray[float64_t] c):
-    cdef:
-        Py_ssize_t i, n = len(a)
-        float64_t result = 0
+# def cython_test2(ndarray[float64_t] a, ndarray[float64_t] b,
+#                  ndarray[float64_t] c):
+#     cdef:
+#         Py_ssize_t i, n = len(a)
+#         float64_t result = 0
 
-    for i in range(n):
-        result += a[i] + b[i] + c[i]
+#     for i in range(n):
+#         result += a[i] + b[i] + c[i]
 
-    return result
+#     return result
diff --git a/pandas/tseries/frequencies.py b/pandas/tseries/frequencies.py
index 98b22f612..3bdf86a56 100644
--- a/pandas/tseries/frequencies.py
+++ b/pandas/tseries/frequencies.py
@@ -901,7 +901,9 @@ def is_superperiod(source, target):
     target = target.upper()
     source = source.upper()
     if _is_annual(source):
-        return target in ['D', 'B', 'M', 'H', 'T', 'S']
+        month = _get_rule_month(source)
+        same_month = _get_rule_month(target) == month
+        return same_month or target in ['D', 'B', 'M', 'H', 'T', 'S']
     elif _is_quarterly(source):
         return target in ['D', 'B', 'M', 'H', 'T', 'S']
     elif source == 'M':
@@ -913,6 +915,11 @@ def is_superperiod(source, target):
     elif source == 'D':
         return target not in ['D', 'B', 'H', 'T', 'S']
 
+def _get_rule_month(source, default='DEC'):
+    if '-' not in source:
+        return default
+    else:
+        return source.split('-')[1]
 
 def _is_annual(rule):
     rule = rule.upper()
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index 8ead4f7b3..880ec3795 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -2,7 +2,7 @@ from datetime import datetime, timedelta
 
 import numpy as np
 
-from pandas import Series, DataFrame, isnull, notnull
+from pandas import Series, TimeSeries, DataFrame, isnull, notnull
 
 from pandas.tseries.index import date_range
 from pandas.tseries.offsets import Minute, bday
@@ -306,7 +306,7 @@ def _simple_ts(start, end, freq='D'):
 
 def _simple_pts(start, end, freq='D'):
     rng = period_range(start, end, freq=freq)
-    return Series(np.random.randn(len(rng)), index=rng)
+    return TimeSeries(np.random.randn(len(rng)), index=rng)
 
 
 from pandas.tseries.frequencies import MONTHS, DAYS
@@ -410,6 +410,20 @@ class TestResamplePeriodIndex(unittest.TestCase):
         expected = ts.to_timestamp(how='end').resample('A-DEC')
         assert_series_equal(result, expected)
 
+    def test_resample_to_quarterly(self):
+        for month in MONTHS:
+            ts = _simple_pts('1990', '1992', freq='A-%s' % month)
+            quar_ts = ts.resample('Q-%s' % month, fill_method='ffill')
+
+            stamps = ts.to_timestamp('D', how='end')
+            qdates = period_range('1990Q4', '1992Q4', freq='Q-%s' % month)
+
+            expected = stamps.reindex(qdates.to_timestamp('D', 'e'),
+                                      method='ffill')
+            expected.index = qdates
+
+            assert_series_equal(quar_ts, expected)
+
 class TestTimeGrouper(unittest.TestCase):
 
     def setUp(self):
