commit 626c76ff36ba16f26c791ea8c50ef39e23035779
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Dec 22 16:27:00 2011 -0500

    BUG: fix unary - on boolean DataFrame

diff --git a/RELEASE.rst b/RELEASE.rst
index 47fb0a031..15441a45a 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -78,6 +78,7 @@ pandas 0.6.2
     regression from prior versions (GH #510)
   - Handle rows skipped at beginning of file in read_* functions (GH #505)
   - Handle improper dtype casting in ``set_value`` methods
+  - Unary '-' / __neg__ operator on DataFrame was returning integer values
 
 Thanks
 ------
diff --git a/doc/source/groupby.rst b/doc/source/groupby.rst
index 8d716de89..e8a5753e5 100644
--- a/doc/source/groupby.rst
+++ b/doc/source/groupby.rst
@@ -309,11 +309,13 @@ must be either implemented on GroupBy or available via :ref:`dispatching
 
    grouped.agg({'C' : 'sum', 'D' : 'std'})
 
+.. _groupby.aggregate.cython:
+
 Cython-optimized aggregation functions
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
-Some common aggregations, currently only ``sum`` and ``mean``, have optimized
-Cython implementations:
+Some common aggregations, currently only ``sum``, ``mean``, and ``std``, have
+optimized Cython implementations:
 
 .. ipython:: python
 
diff --git a/doc/source/whatsnew/v0.6.2.rst b/doc/source/whatsnew/v0.6.2.rst
index 0c964600d..8b32aa06d 100644
--- a/doc/source/whatsnew/v0.6.2.rst
+++ b/doc/source/whatsnew/v0.6.2.rst
@@ -20,10 +20,10 @@ New features
 Performance improvements
 ~~~~~~~~~~~~~~~~~~~~~~~~
 
-Cythonized GroupBy aggregations (sum, mean, std) no longer presort the data,
-thus achieving a significant speedup (Issue93_). Here's a graph of the
-performance of this operation over time on a dataset with 100,000 rows and
-10,000 unique groups:
+:ref:`Cythonized GroupBy aggregations <groupby.aggregate.cython>` no longer
+presort the data, thus achieving a significant speedup (Issue93_). Here's a
+graph of the performance of this operation over time on a dataset with 100,000
+rows and 10,000 unique groups:
 
 
 .. .. code-block:: ipython
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 770c8b9f8..3a60636b3 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -424,7 +424,8 @@ class DataFrame(NDFrame):
         __rdiv__ = _arith_method(lambda x, y: y / x, '__rdiv__', default_axis=None)
 
     def __neg__(self):
-        return self * -1
+        arr = operator.neg(self.values)
+        return self._wrap_array(arr, self.axes, copy=False)
 
     # Comparison methods
     __eq__ = comp_method(operator.eq, '__eq__')
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index e789a573a..7bd195eed 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1724,12 +1724,14 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
             result = op(df1, df2)
             expected = DataFrame(op(df1.values, df2.values), index=df1.index,
                                  columns=df1.columns)
+            self.assert_(result.values.dtype == np.bool_)
             assert_frame_equal(result, expected)
 
         def _check_unary_op(op):
             result = op(df1)
             expected = DataFrame(op(df1.values), index=df1.index,
                                  columns=df1.columns)
+            self.assert_(result.values.dtype == np.bool_)
             assert_frame_equal(result, expected)
 
         df1 = {'a': {'a': True, 'b': False, 'c': False, 'd': True, 'e': True},
@@ -1751,6 +1753,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         _check_bin_op(operator.or_)
         _check_bin_op(operator.xor)
 
+        _check_unary_op(operator.neg)
+
     def test_neg(self):
         # what to do?
         assert_frame_equal(-self.frame, -1 * self.frame)
