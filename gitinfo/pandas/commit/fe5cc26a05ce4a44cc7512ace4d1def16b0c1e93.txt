commit fe5cc26a05ce4a44cc7512ace4d1def16b0c1e93
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Oct 31 20:42:09 2012 -0400

    BUG: fix str.split failure with pipe '|' pattern. close #2119

diff --git a/RELEASE.rst b/RELEASE.rst
index 7aefafca7..b3a955539 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -42,6 +42,7 @@ pandas 0.9.1
   - Fix zero-trimming DataFrame formatting bug
   - Correctly compute/box datetime64 min/max values from Series.min/max (#2083)
   - Fix unstacking edge case with unrepresented groups (#2100)
+  - Fix Series.str failures when using pipe pattern '|' (#2119)
 
 pandas 0.9.0
 ============
diff --git a/pandas/core/strings.py b/pandas/core/strings.py
index cdbeffbba..58825dc81 100644
--- a/pandas/core/strings.py
+++ b/pandas/core/strings.py
@@ -299,7 +299,7 @@ def str_upper(arr):
     return _na_map(lambda x: x.upper(), arr)
 
 
-def str_replace(arr, pat, repl, n=0, case=True, flags=0):
+def str_replace(arr, pat, repl, n=-1, case=True, flags=0):
     """
     Replace
 
@@ -309,7 +309,7 @@ def str_replace(arr, pat, repl, n=0, case=True, flags=0):
         Character sequence or regular expression
     repl : string
         Replacement sequence
-    n : int, default 0 (all)
+    n : int, default -1 (all)
         Number of replacements to make from start
     case : boolean, default True
         If True, case sensitive
@@ -320,13 +320,17 @@ def str_replace(arr, pat, repl, n=0, case=True, flags=0):
     -------
     replaced : array
     """
-    if not case:
-        flags |= re.IGNORECASE
-
-    regex = re.compile(pat, flags=flags)
+    use_re = not case or len(pat) > 1 or flags
 
-    def f(x):
-        return regex.sub(repl, x, count=n)
+    if use_re:
+        if not case:
+            flags |= re.IGNORECASE
+        regex = re.compile(pat, flags=flags)
+        n = n if n >= 0 else 0
+        def f(x):
+            return regex.sub(repl, x, count=n)
+    else:
+        f = lambda x: x.replace(pat, repl, n)
 
     return _na_map(f, arr)
 
@@ -480,7 +484,7 @@ def str_center(arr, width):
     return str_pad(arr, width, side='both')
 
 
-def str_split(arr, pat=None, n=0):
+def str_split(arr, pat=None, n=-1):
     """
     Split each string (a la re.split) in array by given pattern, propagating NA
     values
@@ -489,7 +493,7 @@ def str_split(arr, pat=None, n=0):
     ----------
     pat : string, default None
         String or regular expression to split on. If None, splits on whitespace
-    n : int, default 0 (all)
+    n : int, default -1 (all)
 
     Returns
     -------
@@ -498,8 +502,11 @@ def str_split(arr, pat=None, n=0):
     if pat is None:
         f = lambda x: x.split()
     else:
-        regex = re.compile(pat)
-        f = lambda x: regex.split(x, maxsplit=n)
+        if len(pat) == 1:
+            f = lambda x: x.split(pat, n)
+        else:
+            regex = re.compile(pat)
+            f = lambda x: regex.split(x, maxsplit=n)
 
     return _na_map(f, arr)
 
@@ -709,7 +716,7 @@ class StringMethods(object):
         return self._wrap_result(result)
 
     @copy(str_split)
-    def split(self, pat=None, n=0):
+    def split(self, pat=None, n=-1):
         result = str_split(self.series, pat, n=n)
         return self._wrap_result(result)
 
@@ -730,7 +737,7 @@ class StringMethods(object):
         return self._wrap_result(result)
 
     @copy(str_replace)
-    def replace(self, pat, repl, n=0, case=True):
+    def replace(self, pat, repl, n=-1, case=True):
         result = str_replace(self.series, pat, repl, n=n, case=case)
         return self._wrap_result(result)
 
diff --git a/pandas/tests/test_strings.py b/pandas/tests/test_strings.py
index efaef5f37..8138976bc 100644
--- a/pandas/tests/test_strings.py
+++ b/pandas/tests/test_strings.py
@@ -480,6 +480,20 @@ class TestStringMethods(unittest.TestCase):
         result = s.str.split()
         self.assertEquals(result[1], ['Travis', 'Oliphant'])
 
+    def test_pipe_failures(self):
+        # #2119
+        s = Series(['A|B|C'])
+
+        result = s.str.split('|')
+        exp = Series([['A', 'B', 'C']])
+
+        tm.assert_series_equal(result, exp)
+
+        result = s.str.replace('|', ' ')
+        exp = Series(['A B C'])
+
+        tm.assert_series_equal(result, exp)
+
     def test_slice(self):
         values = Series(['aafootwo','aabartwo', NA, 'aabazqux'])
 
