commit b904029a2b193cf8395a7adce959983c97e0e794
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jan 21 17:45:48 2013 -0500

    API: restore inplace=TRue returns self, add FutureWarnings. re #1893

diff --git a/RELEASE.rst b/RELEASE.rst
index efae8596e..436ac7409 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -31,6 +31,16 @@ pandas 0.10.1
 
   - Add data inferface to World Bank WDI pandas.io.wb (#2592)
 
+**API Changes**
+
+  - Restored inplace=True behavior returning self (same object) with
+    deprecation warning until 0.11 (GH1893_)
+  - ``HDFStore``
+    - refactored HFDStore to deal with non-table stores as objects, will allow future enhancements
+    - removed keyword ``compression`` from ``put`` (replaced by keyword
+      ``complib`` to be consistent across library)
+    - warn `PerformanceWarning` if you are attempting to store types that will be pickled by PyTables
+
 **Improvements to existing features**
 
   - ``HDFStore``
@@ -111,15 +121,6 @@ pandas 0.10.1
   - Fix buggy interaction with usecols argument in read_csv when there is an
     implicit first index column (GH2654_)
 
-**API Changes**
-
-  - ``HDFStore``
-
-    - refactored HFDStore to deal with non-table stores as objects, will allow future enhancements
-    - removed keyword ``compression`` from ``put`` (replaced by keyword
-      ``complib`` to be consistent across library)
-    - warn `PerformanceWarning` if you are attempting to store types that will be pickled by PyTables
-
 .. _GH512: https://github.com/pydata/pandas/issues/512
 .. _GH1277: https://github.com/pydata/pandas/issues/1277
 .. _GH2070: https://github.com/pydata/pandas/issues/2070
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index fb717a369..301ea9d28 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2755,6 +2755,15 @@ class DataFrame(NDFrame):
         index._cleanup()
 
         frame.index = index
+
+        if inplace:
+            import warnings
+            warnings.warn("set_index with inplace=True  will return None"
+                          " from pandas 0.11 onward", FutureWarning)
+            return self
+        else:
+            return frame
+
         return frame if not inplace else None
 
     def reset_index(self, level=None, drop=False, inplace=False, col_level=0,
@@ -2854,7 +2863,13 @@ class DataFrame(NDFrame):
             new_obj.insert(0, name, _maybe_cast(values))
 
         new_obj.index = new_index
-        return new_obj if not inplace else None
+        if inplace:
+            import warnings
+            warnings.warn("reset_index with inplace=True  will return None"
+                          " from pandas 0.11 onward", FutureWarning)
+            return self
+        else:
+            return new_obj
 
     delevel = deprecate('delevel', reset_index)
 
@@ -3014,6 +3029,10 @@ class DataFrame(NDFrame):
             inds, = (-duplicated).nonzero()
             self._data = self._data.take(inds)
             self._clear_item_cache()
+            import warnings
+            warnings.warn("drop_duplicates with inplace=True  will return None"
+                          " from pandas 0.11 onward", FutureWarning)
+            return self
         else:
             return self[-duplicated]
 
@@ -3168,6 +3187,10 @@ class DataFrame(NDFrame):
                 self._data = self._data.take(indexer)
 
             self._clear_item_cache()
+            import warnings
+            warnings.warn("sort/sort_index with inplace=True  will return None"
+                          " from pandas 0.11 onward", FutureWarning)
+            return self
         else:
             return self.take(indexer, axis=axis)
 
@@ -3210,6 +3233,10 @@ class DataFrame(NDFrame):
                 self._data = self._data.take(indexer)
 
             self._clear_item_cache()
+            import warnings
+            warnings.warn("sortlevel with inplace=True  will return None"
+                          " from pandas 0.11 onward", FutureWarning)
+            return self
         else:
             return self.take(indexer, axis=axis)
 
@@ -3337,6 +3364,10 @@ class DataFrame(NDFrame):
 
         if inplace:
             self._data = new_data
+            import warnings
+            warnings.warn("fillna with inplace=True  will return None"
+                          " from pandas 0.11 onward", FutureWarning)
+            return self
         else:
             return self._constructor(new_data)
 
@@ -3384,6 +3415,11 @@ class DataFrame(NDFrame):
         """
         self._consolidate_inplace()
 
+        if inplace:
+            import warnings
+            warnings.warn("replace with inplace=True  will return None"
+                          " from pandas 0.11 onward", FutureWarning)
+
         if value is None:
             return self._interpolate(to_replace, method, axis, inplace, limit)
         else:
@@ -3416,7 +3452,7 @@ class DataFrame(NDFrame):
 
                 if inplace:
                     self._data = new_data
-                    return None
+                    return self
                 else:
                     return self._constructor(new_data)
             else:
@@ -3427,7 +3463,7 @@ class DataFrame(NDFrame):
                                                   inplace=inplace)
                     if inplace:
                         self._data = new_data
-                        return None
+                        return self
                     else:
                         return self._constructor(new_data)
 
@@ -3534,7 +3570,13 @@ class DataFrame(NDFrame):
         if columns is not None:
             result._rename_columns_inplace(columns_f)
 
-        return result if not inplace else None
+        if inplace:
+            import warnings
+            warnings.warn("rename with inplace=True  will return None"
+                          " from pandas 0.11 onward", FutureWarning)
+            return self
+        else:
+            return result
 
     def _rename_index_inplace(self, mapper):
         self._data = self._data.rename_axis(mapper, axis=1)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index d3522f2b5..06281e288 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -937,7 +937,11 @@ copy : boolean, default False
                 self.index = new_index
                 # set name if it was passed, otherwise, keep the previous name
                 self.name = name or self.name
-                return
+                import warnings
+                warnings.warn("Series.reset_index with inplace=True will "
+                              "return None from pandas 0.11 onward",
+                              FutureWarning)
+                return self
             else:
                 return Series(self.values.copy(), index=new_index,
                               name=self.name)
@@ -2469,8 +2473,13 @@ copy : boolean, default False
         -------
         filled : Series
         """
+        if inplace:
+            import warnings
+            warnings.warn("Series.fillna with inplace=True  will return None"
+                          " from pandas 0.11 onward", FutureWarning)
+
         if not self._can_hold_na:
-            return self.copy() if not inplace else None
+            return self.copy() if not inplace else self
 
         if value is not None:
             if method is not None:
@@ -2496,7 +2505,10 @@ copy : boolean, default False
             else:
                 result = Series(values, index=self.index, name=self.name)
 
-        return result if not inplace else None
+        if inplace:
+            return self
+        else:
+            return result
 
     def ffill(self, inplace=False, limit=None):
         return self.fillna(method='ffill', inplace=inplace, limit=limit)
@@ -2596,7 +2608,13 @@ copy : boolean, default False
             raise ValueError('Unrecognized to_replace type %s' %
                              type(to_replace))
 
-        return result if not inplace else None
+        if inplace:
+            import warnings
+            warnings.warn("Series.replace with inplace=True  will return None"
+                          " from pandas 0.11 onward", FutureWarning)
+            return self
+        else:
+            return result
 
     def isin(self, values):
         """
@@ -2944,7 +2962,13 @@ copy : boolean, default False
         result = self if inplace else self.copy()
         result.index = [mapper_f(x) for x in self.index]
 
-        return result if not inplace else None
+        if inplace:
+            import warnings
+            warnings.warn("Series.rename with inplace=True  will return None"
+                          " from pandas 0.11 onward", FutureWarning)
+            return self
+        else:
+            return result
 
     @property
     def weekday(self):
diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index d755c6bf0..6ecfca10c 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -54,6 +54,9 @@ bar2,12,13,14,15
         raise NotImplementedError
 
     def setUp(self):
+        import warnings
+        warnings.filterwarnings(action='ignore', category=FutureWarning)
+
         self.dirpath = curpath()
         self.csv1 = os.path.join(self.dirpath, 'test1.csv')
         self.csv2 = os.path.join(self.dirpath, 'test2.csv')
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index 5e0fe8d29..934e088dd 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -32,6 +32,8 @@ class TestHDFStore(unittest.TestCase):
     scratchpath = '__scratch__.h5'
 
     def setUp(self):
+        warnings.filterwarnings(action='ignore', category=FutureWarning)
+
         self.path = '__%s__.h5' % tm.rands(10)
         self.store = HDFStore(self.path)
 
diff --git a/pandas/sparse/tests/test_sparse.py b/pandas/sparse/tests/test_sparse.py
index d8ec567b2..1202649af 100644
--- a/pandas/sparse/tests/test_sparse.py
+++ b/pandas/sparse/tests/test_sparse.py
@@ -37,6 +37,9 @@ from pandas.util.py3compat import StringIO
 
 from test_array import assert_sp_array_equal
 
+import warnings
+warnings.filterwarnings(action='ignore', category=FutureWarning)
+
 
 def _test_data1():
     # nan-based
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 2ac26e678..09747ba3f 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -787,8 +787,7 @@ class CheckIndexing(object):
         out = b.ix[:3]
         assert_frame_equal(out, b)
 
-        res = b.sort_index(inplace=True)
-        self.assertTrue(res is None)
+        b.sort_index(inplace=True)
 
         df = df_orig.copy()
         df.ix[[0, 1, 2]] = b
@@ -1558,6 +1557,9 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
     _multiprocess_can_split_ = True
 
     def setUp(self):
+        import warnings
+        warnings.filterwarnings(action='ignore', category=FutureWarning)
+
         self.frame = _frame.copy()
         self.frame2 = _frame2.copy()
         self.intframe = _intframe.copy()
@@ -1638,14 +1640,12 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         # inplace, single
         df2 = df.copy()
 
-        res = df2.set_index('C', inplace=True)
-        self.assertTrue(res is None)
+        df2.set_index('C', inplace=True)
 
         assert_frame_equal(df2, expected)
 
         df3 = df.copy()
-        res = df3.set_index('C', drop=False, inplace=True)
-        self.assertTrue(res is None)
+        df3.set_index('C', drop=False, inplace=True)
 
         assert_frame_equal(df3, expected_nodrop)
 
@@ -4597,9 +4597,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         # single column
         df = orig.copy()
-        res = df.drop_duplicates('A', inplace=True)
-        self.assertTrue(res is None)
-
+        df.drop_duplicates('A', inplace=True)
         expected = orig[:2]
         result = df
         assert_frame_equal(result, expected)
@@ -4612,8 +4610,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         # multi column
         df = orig.copy()
-        res = df.drop_duplicates(['A', 'B'], inplace=True)
-        self.assertTrue(res is None)
+        df.drop_duplicates(['A', 'B'], inplace=True)
         expected = orig.ix[[0, 1, 2, 3]]
         result = df
         assert_frame_equal(result, expected)
@@ -4703,8 +4700,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         expected = df.fillna(value=0)
         self.assert_(expected is not df)
 
-        res = df.fillna(value=0, inplace=True)
-        self.assert_(res is None)
+        df.fillna(value=0, inplace=True)
         assert_frame_equal(df, expected)
 
         df[1][:4] = np.nan
@@ -4712,8 +4708,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         expected = df.fillna(method='ffill')
         self.assert_(expected is not df)
 
-        res = df.fillna(method='ffill', inplace=True)
-        self.assert_(res is None)
+        df.fillna(method='ffill', inplace=True)
         assert_frame_equal(df, expected)
 
     def test_fillna_dict_series(self):
@@ -4764,12 +4759,10 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         tsframe = self.tsframe.copy()
         res = tsframe.replace(nan, 0, inplace=True)
-        self.assertTrue(res is None)
         assert_frame_equal(tsframe, self.tsframe.fillna(0))
 
         tsframe = self.tsframe.copy()
         res = tsframe.replace(nan, method='pad', inplace=True)
-        self.assertTrue(res is None)
         assert_frame_equal(tsframe, self.tsframe.fillna(method='pad'))
 
         # mixed type
@@ -4782,7 +4775,6 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         tsframe = self.tsframe.copy()
         res = tsframe.replace([nan], [0], inplace=True)
-        self.assertTrue(res is None)
         assert_frame_equal(tsframe, self.tsframe.fillna(0))
 
     def test_replace(self):
@@ -5462,8 +5454,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         df = DataFrame(np.random.randn(5, 3))
 
         expected = df.mask(df < 0)
-        res = df.where(df >= 0, np.nan, inplace=True)
-        self.assertTrue(res is None)
+        df.where(df >= 0, np.nan, inplace=True)
         assert_frame_equal(df, expected)
 
     def test_mask(self):
@@ -5555,9 +5546,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         c_id = id(self.frame['C'])
         frame = self.frame.copy()
-        res = frame.rename(columns={'C': 'foo'}, inplace=True)
-
-        self.assertTrue(res is None)
+        frame.rename(columns={'C': 'foo'}, inplace=True)
 
         self.assert_('C' not in frame)
         self.assert_('foo' in frame)
@@ -6139,8 +6128,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         unordered = frame.ix[[3, 2, 4, 1]]
         a_id = id(unordered['A'])
         df = unordered.copy()
-        res = df.sort_index(inplace=True)
-        self.assertTrue(res is None)
+        df.sort_index(inplace=True)
         expected = frame
         assert_frame_equal(df, expected)
         self.assert_(a_id != id(df['A']))
@@ -6158,8 +6146,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         assert_frame_equal(df, expected)
 
         df = unordered.copy()
-        res = df.sort_index(axis=1, ascending=False, inplace=True)
-        self.assertTrue(res is None)
+        df.sort_index(axis=1, ascending=False, inplace=True)
         expected = frame.ix[:, ::-1]
         assert_frame_equal(df, expected)
 
@@ -6197,8 +6184,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
                           columns=['A', 'B', 'C', 'D'])
 
         sorted_df = frame.copy()
-        res = sorted_df.sort(columns='A', inplace=True)
-        self.assertTrue(res is None)
+        sorted_df.sort(columns='A', inplace=True)
         expected = frame.sort_index(by='A')
         assert_frame_equal(sorted_df, expected)
 
@@ -6208,8 +6194,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         assert_frame_equal(sorted_df, expected)
 
         sorted_df = frame.copy()
-        res = sorted_df.sort(columns=['A', 'B'], ascending=False, inplace=True)
-        self.assertTrue(res is None)
+        sorted_df.sort(columns=['A', 'B'], ascending=False, inplace=True)
         expected = frame.sort_index(by=['A', 'B'], ascending=False)
         assert_frame_equal(sorted_df, expected)
 
@@ -7308,8 +7293,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         # test resetting in place
         df = self.frame.copy()
         resetted = self.frame.reset_index()
-        res = df.reset_index(inplace=True)
-        self.assertTrue(res is None)
+        df.reset_index(inplace=True)
         assert_frame_equal(df, resetted)
 
         frame = self.frame.reset_index().set_index(['index', 'A', 'B'])
@@ -7432,8 +7416,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         self.frame['F'] = 8.
         self.assert_(len(self.frame._data.blocks) == 3)
-        res = self.frame.consolidate(inplace=True)
-        self.assertTrue(res is None)
+        self.frame.consolidate(inplace=True)
         self.assert_(len(self.frame._data.blocks) == 1)
 
     def test_consolidate_inplace(self):
@@ -7800,6 +7783,73 @@ starting,ending,measure
         second = len(df.ix[isnull(df[myid]), [myid]])
         self.assertTrue(first == second == 0)
 
+    def test_inplace_return_self(self):
+        # re #1893, TODO: remove in 0.11
+
+        data = DataFrame({'a': ['foo', 'bar', 'baz', 'qux'],
+                          'b': [0, 0, 1, 1],
+                          'c': [1, 2, 3, 4]})
+
+        def _check_f(base, f):
+            result = f(base)
+            self.assertTrue(result is base)
+
+        # -----DataFrame-----
+
+        # set_index
+        f = lambda x: x.set_index('a', inplace=True)
+        _check_f(data.copy(), f)
+
+        # reset_index
+        f = lambda x: x.reset_index(inplace=True)
+        _check_f(data.set_index('a'), f)
+
+        # drop_duplicates
+        f = lambda x: x.drop_duplicates(inplace=True)
+        _check_f(data.copy(), f)
+
+        # sort
+        f = lambda x: x.sort('b', inplace=True)
+        _check_f(data.copy(), f)
+
+        # sort_index
+        f = lambda x: x.sort_index(inplace=True)
+        _check_f(data.copy(), f)
+
+        # sortlevel
+        f = lambda x: x.sortlevel(0, inplace=True)
+        _check_f(data.set_index(['a', 'b']), f)
+
+        # fillna
+        f = lambda x: x.fillna(0, inplace=True)
+        _check_f(data.copy(), f)
+
+        # replace
+        f = lambda x: x.replace(1, 0, inplace=True)
+        _check_f(data.copy(), f)
+
+        # rename
+        f = lambda x: x.rename({1: 'foo'}, inplace=True)
+        _check_f(data.copy(), f)
+
+        # -----Series-----
+
+        # reset_index
+        f = lambda x: x.reset_index(inplace=True, drop=True)
+        _check_f(data.set_index('a')['c'], f)
+
+        # fillna
+        f = lambda x: x.fillna(0, inplace=True)
+        _check_f(data.copy()['c'], f)
+
+        # replace
+        f = lambda x: x.replace(1, 0, inplace=True)
+        _check_f(data.copy()['c'], f)
+
+        # rename
+        f = lambda x: x.rename({1: 'foo'}, inplace=True)
+        _check_f(data.copy()['c'], f)
+
 
 if __name__ == '__main__':
     # unittest.main()
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index c300f1a81..a4df141fe 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -25,6 +25,9 @@ class TestMultiLevel(unittest.TestCase):
     _multiprocess_can_split_ = True
 
     def setUp(self):
+        import warnings
+        warnings.filterwarnings(action='ignore', category=FutureWarning)
+
         index = MultiIndex(levels=[['foo', 'bar', 'baz', 'qux'],
                                    ['one', 'two', 'three']],
                            labels=[[0, 0, 0, 1, 1, 2, 2, 3, 3, 3],
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 6e45bd9fd..235b3e153 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -740,6 +740,9 @@ class TestPanel(unittest.TestCase, PanelTests, CheckIndexing,
         assert_panel_equal(x, y)
 
     def setUp(self):
+        import warnings
+        warnings.filterwarnings(action='ignore', category=FutureWarning)
+
         self.panel = _panel.copy()
         self.panel.major_axis.name = None
         self.panel.minor_axis.name = None
@@ -1437,6 +1440,9 @@ class TestLongPanel(unittest.TestCase):
     _multiprocess_can_split_ = True
 
     def setUp(self):
+        import warnings
+        warnings.filterwarnings(action='ignore', category=FutureWarning)
+
         panel = tm.makePanel()
         tm.add_nans(panel)
 
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 2d10b1d5d..896c7dc34 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -249,6 +249,9 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
     _multiprocess_can_split_ = True
 
     def setUp(self):
+        import warnings
+        warnings.filterwarnings(action='ignore', category=FutureWarning)
+
         self.ts = _ts.copy()
         self.ts.name = 'ts'
 
@@ -1015,9 +1018,7 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
 
         rs = s.copy()
 
-        res = rs.where(cond, inplace=True)
-        self.assertTrue(res is None)
-
+        rs.where(cond, inplace=True)
         assert_series_equal(rs.dropna(), s[cond])
         assert_series_equal(rs, s.where(cond))
 
@@ -2988,9 +2989,8 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
     def test_rename_inplace(self):
         renamer = lambda x: x.strftime('%Y%m%d')
         expected = renamer(self.ts.index[0])
-        res = self.ts.rename(renamer, inplace=True)
 
-        self.assertTrue(res is None)
+        self.ts.rename(renamer, inplace=True)
         self.assertEqual(self.ts.index[0], expected)
 
     def test_preserveRefs(self):
@@ -3008,8 +3008,7 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         x = TimeSeries([np.nan, 1., np.nan, 3., np.nan],
                        ['z', 'a', 'b', 'c', 'd'], dtype=float)
 
-        res = x.fillna(method='pad', inplace=True)
-        self.assertTrue(res is None)
+        x.fillna(method='pad', inplace=True)
 
         expected = TimeSeries([np.nan, 1.0, 1.0, 3.0, 3.0],
                               ['z', 'a', 'b', 'c', 'd'], dtype=float)
@@ -3060,7 +3059,7 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
 
     def test_fillna_int(self):
         s = Series(np.random.randint(-100, 100, 50))
-        self.assert_(s.fillna(method='ffill', inplace=True) is None)
+        s.fillna(method='ffill', inplace=True)
         assert_series_equal(s.fillna(method='ffill', inplace=False), s)
 
 #-------------------------------------------------------------------------------
@@ -3097,8 +3096,7 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         x = Series([nan, 1., nan, 3., nan], ['z', 'a', 'b', 'c', 'd'])
         y = x.copy()
 
-        res = y.fillna(value=0, inplace=True)
-        self.assert_(res is None)
+        y.fillna(value=0, inplace=True)
 
         expected = x.fillna(value=0)
         assert_series_equal(y, expected)
@@ -3126,8 +3124,7 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         ser[6:10] = 0
 
         # replace list with a single value
-        rs = ser.replace([np.nan], -1, inplace=True)
-        self.assertTrue(rs is None)
+        ser.replace([np.nan], -1, inplace=True)
 
         exp = ser.fillna(-1)
         assert_series_equal(ser, exp)
@@ -3173,9 +3170,7 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         assert_almost_equal(rs4[4], ser[5])
 
         # replace inplace
-        res = ser.replace([np.nan, 'foo', 'bar'], -1, inplace=True)
-
-        self.assertTrue(res is None)
+        ser.replace([np.nan, 'foo', 'bar'], -1, inplace=True)
 
         self.assert_((ser[:5] == -1).all())
         self.assert_((ser[6:10] == -1).all())
@@ -3431,8 +3426,7 @@ class TestSeriesNonUnique(unittest.TestCase):
         # check inplace
         s = ser.reset_index(drop=True)
         s2 = ser
-        res = s2.reset_index(drop=True, inplace=True)
-        self.assertTrue(res is None)
+        s2.reset_index(drop=True, inplace=True)
         assert_series_equal(s, s2)
 
         # level
