commit 976858138fa0a0bbf61a9ced4a2011bd9e3e0bb1
Author: Phillip Cloud <cpcloud@gmail.com>
Date:   Thu May 30 20:02:29 2013 -0400

    DOC/BLD: squash deprecation warnings

diff --git a/doc/source/v0.10.1.txt b/doc/source/v0.10.1.txt
index e8435df7b..3c22e9552 100644
--- a/doc/source/v0.10.1.txt
+++ b/doc/source/v0.10.1.txt
@@ -67,8 +67,11 @@ Retrieving unique values in an indexable or data column.
 
 .. ipython:: python
 
-   store.unique('df','index')
-   store.unique('df','string')
+   import warnings
+   with warnings.catch_warnings():
+       warnings.simplefilter('ignore', category=DeprecationWarning)
+       store.unique('df','index')
+       store.unique('df','string')
 
 You can now store ``datetime64`` in data columns
 
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index 9e8a69a32..e38b2c2b7 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -81,7 +81,7 @@ class TestDataFrameFormatting(unittest.TestCase):
         fmt.set_eng_float_format(accuracy=0)
         repr(self.frame)
 
-        fmt.reset_printoptions()
+        fmt.reset_option('^display.')
 
     def test_repr_tuples(self):
         buf = StringIO()
@@ -1026,7 +1026,7 @@ class TestDataFrameFormatting(unittest.TestCase):
         assert(df_s == expected)
 
     def test_to_string_float_formatting(self):
-        fmt.reset_printoptions()
+        fmt.reset_option('^display.')
         fmt.set_printoptions(precision=6, column_space=12,
                              notebook_repr_html=False)
 
@@ -1057,7 +1057,7 @@ class TestDataFrameFormatting(unittest.TestCase):
                     '1     0.253')
         assert(df_s == expected)
 
-        fmt.reset_printoptions()
+        fmt.reset_option('^display.')
         self.assertEqual(get_option("display.precision"), 7)
 
         df = DataFrame({'x': [1e9, 0.2512]})
@@ -1149,7 +1149,7 @@ c  10  11  12  13  14\
         self.assertEqual(rs, xp)
 
     def test_to_string_left_justify_cols(self):
-        fmt.reset_printoptions()
+        fmt.reset_option('^display.')
         df = DataFrame({'x': [3234, 0.253]})
         df_s = df.to_string(justify='left')
         expected = ('   x       \n'
@@ -1158,7 +1158,7 @@ c  10  11  12  13  14\
         assert(df_s == expected)
 
     def test_to_string_format_na(self):
-        fmt.reset_printoptions()
+        fmt.reset_option('^display.')
         df = DataFrame({'A': [np.nan, -1, -2.1234, 3, 4],
                         'B': [np.nan, 'foo', 'foooo', 'fooooo', 'bar']})
         result = df.to_string()
@@ -1426,7 +1426,7 @@ c  10  11  12  13  14\
         fmt.set_printoptions(notebook_repr_html=False)
         self.frame._repr_html_()
 
-        fmt.reset_printoptions()
+        fmt.reset_option('^display.')
 
     def test_fake_qtconsole_repr_html(self):
         def get_ipython():
@@ -1441,7 +1441,7 @@ c  10  11  12  13  14\
         repstr = self.frame._repr_html_()
         self.assert_('class' in repstr)  # info fallback
 
-        fmt.reset_printoptions()
+        fmt.reset_option('^display.')
 
     def test_to_html_with_classes(self):
         df = pandas.DataFrame()
@@ -1751,7 +1751,7 @@ class TestEngFormatter(unittest.TestCase):
                     '3    1E+06')
         self.assertEqual(result, expected)
 
-        fmt.reset_printoptions()
+        fmt.reset_option('^display.')
 
     def compare(self, formatter, input, output):
         formatted_input = formatter(input)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 39452ece7..f76b8a6e6 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3936,7 +3936,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         fmt.set_printoptions(max_rows=1000, max_columns=1000)
         repr(self.frame)
 
-        fmt.reset_printoptions()
+        fmt.reset_option('^display\.')
 
         warnings.filters = warn_filters
 
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index da8c900e9..5eec8006e 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -1376,7 +1376,7 @@ class TestMultiIndex(unittest.TestCase):
         result = self.index.format()
         self.assertEqual(result[1], 'foo  two')
 
-        pd.reset_printoptions()
+        pd.reset_option("^display\.")
 
         warnings.filters = warn_filters
 
