commit 9a98fb9c0a605ac6a728956b3fbe42bb64026534
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Dec 14 11:41:08 2012 -0500

    ENH: handle decompression in python-parser, e.g. for regular expression delimiting. close #2535

diff --git a/pandas/core/common.py b/pandas/core/common.py
index a4feaa23d..2c2237eaf 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -1092,7 +1092,21 @@ class UTF8Recoder:
         return self.reader.next().encode("utf-8")
 
 
-def _get_handle(path, mode, encoding=None):
+def _get_handle(path, mode, encoding=None, compression=None):
+    if compression is not None:
+        if encoding is not None:
+            raise ValueError('encoding + compression not yet supported')
+
+        if compression == 'gzip':
+            import gzip
+            return gzip.GzipFile(path, 'rb')
+        elif compression == 'bz2':
+            import bz2
+            return bz2.BZ2File(path, 'rb')
+        else:
+            raise ValueError('Unrecognized compression type: %s' %
+                             compression)
+
     if py3compat.PY3:  # pragma: no cover
         if encoding:
             f = open(path, mode, encoding=encoding)
diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index f27ca2fe5..246b70b3b 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -245,7 +245,8 @@ _parser_defaults = {
     'chunksize': None,
     'verbose': False,
     'encoding': None,
-    'squeeze': False
+    'squeeze': False,
+    'compression': None
 }
 
 
@@ -263,7 +264,6 @@ _c_parser_defaults = {
     'factorize': True,
     'dtype': None,
     'usecols': None,
-    'compression': None,
     'decimal': b'.'
 }
 
@@ -1102,6 +1102,7 @@ class PythonParser(ParserBase):
 
         self.header = kwds['header']
         self.encoding = kwds['encoding']
+        self.compression = kwds['compression']
         self.skiprows = kwds['skiprows']
 
         self.skip_footer = kwds['skip_footer']
@@ -1127,13 +1128,8 @@ class PythonParser(ParserBase):
 
 
         if isinstance(f, basestring):
-            f = com._get_handle(f, 'r', encoding=self.encoding)
-
-            # if self.encoding is None:
-            #     # universal newline mode
-            #     f = com._get_handle(f, 'U')
-            # else:
-            #     f = com._get_handle(f, 'rb', encoding=self.encoding)
+            f = com._get_handle(f, 'r', encoding=self.encoding,
+                                compression=self.compression)
 
         if hasattr(f, 'readline'):
             self._make_reader(f)
diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index 5a327c17d..b8ed5a376 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -1864,6 +1864,46 @@ a,b,c
             except:
                 pass
 
+    def test_decompression_regex_sep(self):
+        try:
+            import gzip, bz2
+        except ImportError:
+            raise nose.SkipTest
+
+        data = open(self.csv1, 'rb').read()
+        data = data.replace(',', '::')
+        expected = self.read_csv(self.csv1)
+
+        try:
+            tmp = gzip.GzipFile('__tmp__', mode='wb')
+            tmp.write(data)
+            tmp.close()
+
+            result = self.read_csv('__tmp__', sep='::', compression='gzip')
+            tm.assert_frame_equal(result, expected)
+        finally:
+            # try:
+            #     os.remove('__tmp__')
+            # except:
+            #     pass
+            pass
+
+        try:
+            tmp = bz2.BZ2File('__tmp__', mode='wb')
+            tmp.write(data)
+            tmp.close()
+
+            result = self.read_csv('__tmp__', sep='::', compression='bz2')
+            tm.assert_frame_equal(result, expected)
+
+            self.assertRaises(ValueError, self.read_csv,
+                              '__tmp__', compression='bz3')
+        finally:
+            try:
+                os.remove('__tmp__')
+            except:
+                pass
+
     def test_memory_map(self):
         # it works!
         result = self.read_csv(self.csv1, memory_map=True)
