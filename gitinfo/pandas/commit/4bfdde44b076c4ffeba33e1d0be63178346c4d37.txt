commit 4bfdde44b076c4ffeba33e1d0be63178346c4d37
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri May 25 16:41:20 2012 -0400

    BUG: fix several many-to-one join bugs

diff --git a/pandas/src/generate_code.py b/pandas/src/generate_code.py
index 73ecc01be..4ea1ef3d8 100644
--- a/pandas/src/generate_code.py
+++ b/pandas/src/generate_code.py
@@ -660,8 +660,10 @@ def left_join_indexer_unique_%(name)s(ndarray[%(c_type)s] left,
 
 """
 
-left_join_template = """@cython.wraparound(False)
-@cython.boundscheck(False)
+# @cython.wraparound(False)
+# @cython.boundscheck(False)
+
+left_join_template = """
 def left_join_indexer_%(name)s(ndarray[%(c_type)s] left,
                               ndarray[%(c_type)s] right):
     '''
@@ -691,9 +693,12 @@ def left_join_indexer_%(name)s(ndarray[%(c_type)s] left,
             if lval == rval:
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    if left[i] != rval:
+                    if j < nright - 1 and right[j + 1] == rval:
                         j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
                     if lval != right[j]:
@@ -725,6 +730,7 @@ def left_join_indexer_%(name)s(ndarray[%(c_type)s] left,
                     result[count] = left[i]
                     i += 1
                     count += 1
+                break
 
             lval = left[i]
             rval = right[j]
@@ -735,9 +741,12 @@ def left_join_indexer_%(name)s(ndarray[%(c_type)s] left,
                 result[count] = lval
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    if left[i] != rval:
+                    if j < nright - 1 and right[j + 1] == rval:
                         j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
                     if lval != right[j]:
@@ -779,31 +788,34 @@ def inner_join_indexer_%(name)s(ndarray[%(c_type)s] left,
     j = 0
     count = 0
     if nleft > 0 and nright > 0:
-        lval = left[0]
-        rval = right[0]
         while True:
+            if i == nleft:
+                break
+            if j == nright:
+                break
+
+            lval = left[i]
+            rval = right[j]
             if lval == rval:
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    lval = left[i]
+                    if j < nright - 1 and right[j + 1] == rval:
+                        j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
-                    rval = right[j]
+                    if lval != right[j]:
+                        i += 1
                 else:
+                    # end of the road
                     break
             elif lval < rval:
-                if i < nleft - 1:
-                    i += 1
-                    lval = left[i]
-                else:
-                    break
+                i += 1
             else:
-                if j < nright - 1:
-                    j += 1
-                    rval = right[j]
-                else:
-                    break
+                j += 1
 
     # do it again now that result size is known
 
@@ -815,34 +827,37 @@ def inner_join_indexer_%(name)s(ndarray[%(c_type)s] left,
     j = 0
     count = 0
     if nleft > 0 and nright > 0:
-        lval = left[0]
-        rval = right[0]
         while True:
+            if i == nleft:
+                break
+            if j == nright:
+                break
+
+            lval = left[i]
+            rval = right[j]
             if lval == rval:
                 lindexer[count] = i
                 rindexer[count] = j
                 result[count] = rval
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    lval = left[i]
+                    if j < nright - 1 and right[j + 1] == rval:
+                        j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
-                    rval = right[j]
+                    if lval != right[j]:
+                        i += 1
                 else:
+                    # end of the road
                     break
             elif lval < rval:
-                if i < nleft - 1:
-                    i += 1
-                    lval = left[i]
-                else:
-                    break
+                i += 1
             else:
-                if j < nright - 1:
-                    j += 1
-                    rval = right[j]
-                else:
-                    break
+                j += 1
 
     return result, lindexer, rindexer
 
@@ -883,9 +898,12 @@ def outer_join_indexer_%(name)s(ndarray[%(c_type)s] left,
             if lval == rval:
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    if left[i] != rval:
+                    if j < nright - 1 and right[j + 1] == rval:
                         j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
                     if lval != right[j]:
@@ -947,14 +965,18 @@ def outer_join_indexer_%(name)s(ndarray[%(c_type)s] left,
                 result[count] = lval
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    if left[i] != rval:
+                    if j < nright - 1 and right[j + 1] == rval:
                         j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
                     if lval != right[j]:
                         i += 1
                 else:
+                    # end of the road
                     break
             elif lval < rval:
                 lindexer[count] = i
diff --git a/pandas/src/generated.pyx b/pandas/src/generated.pyx
index 05397983a..2eae3581c 100644
--- a/pandas/src/generated.pyx
+++ b/pandas/src/generated.pyx
@@ -2721,8 +2721,7 @@ def left_join_indexer_unique_int64(ndarray[int64_t] left,
     return indexer
 
 
-@cython.wraparound(False)
-@cython.boundscheck(False)
+
 def left_join_indexer_float64(ndarray[float64_t] left,
                               ndarray[float64_t] right):
     '''
@@ -2752,9 +2751,12 @@ def left_join_indexer_float64(ndarray[float64_t] left,
             if lval == rval:
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    if left[i] != rval:
+                    if j < nright - 1 and right[j + 1] == rval:
                         j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
                     if lval != right[j]:
@@ -2786,6 +2788,7 @@ def left_join_indexer_float64(ndarray[float64_t] left,
                     result[count] = left[i]
                     i += 1
                     count += 1
+                break
 
             lval = left[i]
             rval = right[j]
@@ -2796,9 +2799,12 @@ def left_join_indexer_float64(ndarray[float64_t] left,
                 result[count] = lval
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    if left[i] != rval:
+                    if j < nright - 1 and right[j + 1] == rval:
                         j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
                     if lval != right[j]:
@@ -2817,8 +2823,7 @@ def left_join_indexer_float64(ndarray[float64_t] left,
 
     return result, lindexer, rindexer
 
-@cython.wraparound(False)
-@cython.boundscheck(False)
+
 def left_join_indexer_object(ndarray[object] left,
                               ndarray[object] right):
     '''
@@ -2848,9 +2853,12 @@ def left_join_indexer_object(ndarray[object] left,
             if lval == rval:
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    if left[i] != rval:
+                    if j < nright - 1 and right[j + 1] == rval:
                         j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
                     if lval != right[j]:
@@ -2882,6 +2890,7 @@ def left_join_indexer_object(ndarray[object] left,
                     result[count] = left[i]
                     i += 1
                     count += 1
+                break
 
             lval = left[i]
             rval = right[j]
@@ -2892,9 +2901,12 @@ def left_join_indexer_object(ndarray[object] left,
                 result[count] = lval
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    if left[i] != rval:
+                    if j < nright - 1 and right[j + 1] == rval:
                         j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
                     if lval != right[j]:
@@ -2913,8 +2925,7 @@ def left_join_indexer_object(ndarray[object] left,
 
     return result, lindexer, rindexer
 
-@cython.wraparound(False)
-@cython.boundscheck(False)
+
 def left_join_indexer_int32(ndarray[int32_t] left,
                               ndarray[int32_t] right):
     '''
@@ -2944,9 +2955,12 @@ def left_join_indexer_int32(ndarray[int32_t] left,
             if lval == rval:
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    if left[i] != rval:
+                    if j < nright - 1 and right[j + 1] == rval:
                         j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
                     if lval != right[j]:
@@ -2978,6 +2992,7 @@ def left_join_indexer_int32(ndarray[int32_t] left,
                     result[count] = left[i]
                     i += 1
                     count += 1
+                break
 
             lval = left[i]
             rval = right[j]
@@ -2988,9 +3003,12 @@ def left_join_indexer_int32(ndarray[int32_t] left,
                 result[count] = lval
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    if left[i] != rval:
+                    if j < nright - 1 and right[j + 1] == rval:
                         j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
                     if lval != right[j]:
@@ -3009,8 +3027,7 @@ def left_join_indexer_int32(ndarray[int32_t] left,
 
     return result, lindexer, rindexer
 
-@cython.wraparound(False)
-@cython.boundscheck(False)
+
 def left_join_indexer_int64(ndarray[int64_t] left,
                               ndarray[int64_t] right):
     '''
@@ -3040,9 +3057,12 @@ def left_join_indexer_int64(ndarray[int64_t] left,
             if lval == rval:
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    if left[i] != rval:
+                    if j < nright - 1 and right[j + 1] == rval:
                         j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
                     if lval != right[j]:
@@ -3074,6 +3094,7 @@ def left_join_indexer_int64(ndarray[int64_t] left,
                     result[count] = left[i]
                     i += 1
                     count += 1
+                break
 
             lval = left[i]
             rval = right[j]
@@ -3084,9 +3105,12 @@ def left_join_indexer_int64(ndarray[int64_t] left,
                 result[count] = lval
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    if left[i] != rval:
+                    if j < nright - 1 and right[j + 1] == rval:
                         j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
                     if lval != right[j]:
@@ -3140,9 +3164,12 @@ def outer_join_indexer_float64(ndarray[float64_t] left,
             if lval == rval:
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    if left[i] != rval:
+                    if j < nright - 1 and right[j + 1] == rval:
                         j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
                     if lval != right[j]:
@@ -3204,14 +3231,18 @@ def outer_join_indexer_float64(ndarray[float64_t] left,
                 result[count] = lval
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    if left[i] != rval:
+                    if j < nright - 1 and right[j + 1] == rval:
                         j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
                     if lval != right[j]:
                         i += 1
                 else:
+                    # end of the road
                     break
             elif lval < rval:
                 lindexer[count] = i
@@ -3262,9 +3293,12 @@ def outer_join_indexer_object(ndarray[object] left,
             if lval == rval:
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    if left[i] != rval:
+                    if j < nright - 1 and right[j + 1] == rval:
                         j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
                     if lval != right[j]:
@@ -3326,14 +3360,18 @@ def outer_join_indexer_object(ndarray[object] left,
                 result[count] = lval
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    if left[i] != rval:
+                    if j < nright - 1 and right[j + 1] == rval:
                         j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
                     if lval != right[j]:
                         i += 1
                 else:
+                    # end of the road
                     break
             elif lval < rval:
                 lindexer[count] = i
@@ -3384,9 +3422,12 @@ def outer_join_indexer_int32(ndarray[int32_t] left,
             if lval == rval:
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    if left[i] != rval:
+                    if j < nright - 1 and right[j + 1] == rval:
                         j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
                     if lval != right[j]:
@@ -3448,14 +3489,18 @@ def outer_join_indexer_int32(ndarray[int32_t] left,
                 result[count] = lval
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    if left[i] != rval:
+                    if j < nright - 1 and right[j + 1] == rval:
                         j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
                     if lval != right[j]:
                         i += 1
                 else:
+                    # end of the road
                     break
             elif lval < rval:
                 lindexer[count] = i
@@ -3506,9 +3551,12 @@ def outer_join_indexer_int64(ndarray[int64_t] left,
             if lval == rval:
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    if left[i] != rval:
+                    if j < nright - 1 and right[j + 1] == rval:
                         j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
                     if lval != right[j]:
@@ -3570,14 +3618,18 @@ def outer_join_indexer_int64(ndarray[int64_t] left,
                 result[count] = lval
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    if left[i] != rval:
+                    if j < nright - 1 and right[j + 1] == rval:
                         j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
                     if lval != right[j]:
                         i += 1
                 else:
+                    # end of the road
                     break
             elif lval < rval:
                 lindexer[count] = i
@@ -3615,31 +3667,34 @@ def inner_join_indexer_float64(ndarray[float64_t] left,
     j = 0
     count = 0
     if nleft > 0 and nright > 0:
-        lval = left[0]
-        rval = right[0]
         while True:
+            if i == nleft:
+                break
+            if j == nright:
+                break
+
+            lval = left[i]
+            rval = right[j]
             if lval == rval:
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    lval = left[i]
+                    if j < nright - 1 and right[j + 1] == rval:
+                        j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
-                    rval = right[j]
+                    if lval != right[j]:
+                        i += 1
                 else:
+                    # end of the road
                     break
             elif lval < rval:
-                if i < nleft - 1:
-                    i += 1
-                    lval = left[i]
-                else:
-                    break
+                i += 1
             else:
-                if j < nright - 1:
-                    j += 1
-                    rval = right[j]
-                else:
-                    break
+                j += 1
 
     # do it again now that result size is known
 
@@ -3651,34 +3706,37 @@ def inner_join_indexer_float64(ndarray[float64_t] left,
     j = 0
     count = 0
     if nleft > 0 and nright > 0:
-        lval = left[0]
-        rval = right[0]
         while True:
+            if i == nleft:
+                break
+            if j == nright:
+                break
+
+            lval = left[i]
+            rval = right[j]
             if lval == rval:
                 lindexer[count] = i
                 rindexer[count] = j
                 result[count] = rval
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    lval = left[i]
+                    if j < nright - 1 and right[j + 1] == rval:
+                        j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
-                    rval = right[j]
+                    if lval != right[j]:
+                        i += 1
                 else:
+                    # end of the road
                     break
             elif lval < rval:
-                if i < nleft - 1:
-                    i += 1
-                    lval = left[i]
-                else:
-                    break
+                i += 1
             else:
-                if j < nright - 1:
-                    j += 1
-                    rval = right[j]
-                else:
-                    break
+                j += 1
 
     return result, lindexer, rindexer
 
@@ -3702,31 +3760,34 @@ def inner_join_indexer_object(ndarray[object] left,
     j = 0
     count = 0
     if nleft > 0 and nright > 0:
-        lval = left[0]
-        rval = right[0]
         while True:
+            if i == nleft:
+                break
+            if j == nright:
+                break
+
+            lval = left[i]
+            rval = right[j]
             if lval == rval:
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    lval = left[i]
+                    if j < nright - 1 and right[j + 1] == rval:
+                        j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
-                    rval = right[j]
+                    if lval != right[j]:
+                        i += 1
                 else:
+                    # end of the road
                     break
             elif lval < rval:
-                if i < nleft - 1:
-                    i += 1
-                    lval = left[i]
-                else:
-                    break
+                i += 1
             else:
-                if j < nright - 1:
-                    j += 1
-                    rval = right[j]
-                else:
-                    break
+                j += 1
 
     # do it again now that result size is known
 
@@ -3738,34 +3799,37 @@ def inner_join_indexer_object(ndarray[object] left,
     j = 0
     count = 0
     if nleft > 0 and nright > 0:
-        lval = left[0]
-        rval = right[0]
         while True:
+            if i == nleft:
+                break
+            if j == nright:
+                break
+
+            lval = left[i]
+            rval = right[j]
             if lval == rval:
                 lindexer[count] = i
                 rindexer[count] = j
                 result[count] = rval
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    lval = left[i]
+                    if j < nright - 1 and right[j + 1] == rval:
+                        j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
-                    rval = right[j]
+                    if lval != right[j]:
+                        i += 1
                 else:
+                    # end of the road
                     break
             elif lval < rval:
-                if i < nleft - 1:
-                    i += 1
-                    lval = left[i]
-                else:
-                    break
+                i += 1
             else:
-                if j < nright - 1:
-                    j += 1
-                    rval = right[j]
-                else:
-                    break
+                j += 1
 
     return result, lindexer, rindexer
 
@@ -3789,31 +3853,34 @@ def inner_join_indexer_int32(ndarray[int32_t] left,
     j = 0
     count = 0
     if nleft > 0 and nright > 0:
-        lval = left[0]
-        rval = right[0]
         while True:
+            if i == nleft:
+                break
+            if j == nright:
+                break
+
+            lval = left[i]
+            rval = right[j]
             if lval == rval:
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    lval = left[i]
+                    if j < nright - 1 and right[j + 1] == rval:
+                        j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
-                    rval = right[j]
+                    if lval != right[j]:
+                        i += 1
                 else:
+                    # end of the road
                     break
             elif lval < rval:
-                if i < nleft - 1:
-                    i += 1
-                    lval = left[i]
-                else:
-                    break
+                i += 1
             else:
-                if j < nright - 1:
-                    j += 1
-                    rval = right[j]
-                else:
-                    break
+                j += 1
 
     # do it again now that result size is known
 
@@ -3825,34 +3892,37 @@ def inner_join_indexer_int32(ndarray[int32_t] left,
     j = 0
     count = 0
     if nleft > 0 and nright > 0:
-        lval = left[0]
-        rval = right[0]
         while True:
+            if i == nleft:
+                break
+            if j == nright:
+                break
+
+            lval = left[i]
+            rval = right[j]
             if lval == rval:
                 lindexer[count] = i
                 rindexer[count] = j
                 result[count] = rval
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    lval = left[i]
+                    if j < nright - 1 and right[j + 1] == rval:
+                        j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
-                    rval = right[j]
+                    if lval != right[j]:
+                        i += 1
                 else:
+                    # end of the road
                     break
             elif lval < rval:
-                if i < nleft - 1:
-                    i += 1
-                    lval = left[i]
-                else:
-                    break
+                i += 1
             else:
-                if j < nright - 1:
-                    j += 1
-                    rval = right[j]
-                else:
-                    break
+                j += 1
 
     return result, lindexer, rindexer
 
@@ -3876,31 +3946,34 @@ def inner_join_indexer_int64(ndarray[int64_t] left,
     j = 0
     count = 0
     if nleft > 0 and nright > 0:
-        lval = left[0]
-        rval = right[0]
         while True:
+            if i == nleft:
+                break
+            if j == nright:
+                break
+
+            lval = left[i]
+            rval = right[j]
             if lval == rval:
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    lval = left[i]
+                    if j < nright - 1 and right[j + 1] == rval:
+                        j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
-                    rval = right[j]
+                    if lval != right[j]:
+                        i += 1
                 else:
+                    # end of the road
                     break
             elif lval < rval:
-                if i < nleft - 1:
-                    i += 1
-                    lval = left[i]
-                else:
-                    break
+                i += 1
             else:
-                if j < nright - 1:
-                    j += 1
-                    rval = right[j]
-                else:
-                    break
+                j += 1
 
     # do it again now that result size is known
 
@@ -3912,34 +3985,37 @@ def inner_join_indexer_int64(ndarray[int64_t] left,
     j = 0
     count = 0
     if nleft > 0 and nright > 0:
-        lval = left[0]
-        rval = right[0]
         while True:
+            if i == nleft:
+                break
+            if j == nright:
+                break
+
+            lval = left[i]
+            rval = right[j]
             if lval == rval:
                 lindexer[count] = i
                 rindexer[count] = j
                 result[count] = rval
                 count += 1
                 if i < nleft - 1:
-                    i += 1
-                    lval = left[i]
+                    if j < nright - 1 and right[j + 1] == rval:
+                        j += 1
+                    else:
+                        i += 1
+                        if left[i] != rval:
+                            j += 1
                 elif j < nright - 1:
                     j += 1
-                    rval = right[j]
+                    if lval != right[j]:
+                        i += 1
                 else:
+                    # end of the road
                     break
             elif lval < rval:
-                if i < nleft - 1:
-                    i += 1
-                    lval = left[i]
-                else:
-                    break
+                i += 1
             else:
-                if j < nright - 1:
-                    j += 1
-                    rval = right[j]
-                else:
-                    break
+                j += 1
 
     return result, lindexer, rindexer
 
diff --git a/pandas/tests/test_tseries.py b/pandas/tests/test_tseries.py
index 03aae97d4..bf1d5d877 100644
--- a/pandas/tests/test_tseries.py
+++ b/pandas/tests/test_tseries.py
@@ -153,6 +153,51 @@ def test_left_join_indexer():
     assert_almost_equal(ares, [0])
     assert_almost_equal(bres, [0])
 
+def test_left_join_indexer2():
+    idx = Index([1,1,2,5])
+    idx2 = Index([1,2,5,7,9])
+
+    res, lidx, ridx = algos.left_join_indexer_int64(idx2, idx)
+
+    exp_res = np.array([1, 1, 2, 5, 7, 9], dtype=np.int64)
+    assert_almost_equal(res, exp_res)
+
+    exp_lidx = np.array([0, 0, 1, 2, 3, 4], dtype=np.int64)
+    assert_almost_equal(lidx, exp_lidx)
+
+    exp_ridx = np.array([0, 1, 2, 3, -1, -1], dtype=np.int64)
+    assert_almost_equal(ridx, exp_ridx)
+
+def test_outer_join_indexer2():
+    idx = Index([1,1,2,5])
+    idx2 = Index([1,2,5,7,9])
+
+    res, lidx, ridx = algos.outer_join_indexer_int64(idx2, idx)
+
+    exp_res = np.array([1, 1, 2, 5, 7, 9], dtype=np.int64)
+    assert_almost_equal(res, exp_res)
+
+    exp_lidx = np.array([0, 0, 1, 2, 3, 4], dtype=np.int64)
+    assert_almost_equal(lidx, exp_lidx)
+
+    exp_ridx = np.array([0, 1, 2, 3, -1, -1], dtype=np.int64)
+    assert_almost_equal(ridx, exp_ridx)
+
+def test_inner_join_indexer2():
+    idx = Index([1,1,2,5])
+    idx2 = Index([1,2,5,7,9])
+
+    res, lidx, ridx = algos.inner_join_indexer_int64(idx2, idx)
+
+    exp_res = np.array([1, 1, 2, 5], dtype=np.int64)
+    assert_almost_equal(res, exp_res)
+
+    exp_lidx = np.array([0, 0, 1, 2], dtype=np.int64)
+    assert_almost_equal(lidx, exp_lidx)
+
+    exp_ridx = np.array([0, 1, 2, 3], dtype=np.int64)
+    assert_almost_equal(ridx, exp_ridx)
+
 
 def test_is_lexsorted():
     failure = [
