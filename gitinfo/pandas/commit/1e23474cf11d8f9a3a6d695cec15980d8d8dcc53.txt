commit 1e23474cf11d8f9a3a6d695cec15980d8d8dcc53
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Jul 29 20:17:49 2011 -0400

    ENH: DataFrame.dropna method and deprecated dropIncompleteRows and dropEmptyRows

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 82f5400b0..22b79a6fc 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -655,7 +655,7 @@ class DataFrame(NDFrame):
     #----------------------------------------------------------------------
     # Array interface
 
-    def __array__(self):
+    def __array__(self, dtype=None):
         return self.values
 
     def __array_wrap__(self, result):
@@ -951,65 +951,56 @@ class DataFrame(NDFrame):
         """
         return self._select_generic(crit, axis=axis)
 
-    def dropEmptyRows(self, specificColumns=None):
+    def dropna(self, axis=0, how='any', thresh=None, subset=None):
         """
-        Return DataFrame with rows omitted containing ALL NaN values
-        for optionally specified set of columns.
+        Return object with labels on given axis omitted where alternately any or
+        all of the data are missing
 
         Parameters
         ----------
-        specificColumns : list-like, optional keyword
-            Columns to consider in removing NaN values. As a typical
-            application, you might provide the list of the columns involved in
-            a regression to exlude all the missing data in one shot.
+        axis : int
+        how : {'any', 'all'}
+            any : if any NA values are present, drop that label
+            all : if all values are NA, drop that label
+        thresh : {'any', 'all', int}
+            int value : require that many non-NA values
+        subset : array-like
 
         Returns
         -------
-        This DataFrame with rows containing any NaN values deleted
+        dropped : type of caller
         """
-        if specificColumns:
-            theCount = self.filter(items=specificColumns).count(axis=1)
-        else:
-            theCount = self.count(axis=1)
-
-        return self.reindex(self.index[theCount != 0])
-
-    def dropIncompleteRows(self, specificColumns=None, minObs=None):
-        """
-        Return DataFrame with rows omitted containing ANY NaN values for
-        optionally specified set of columns.
-
-        Parameters
-        ----------
-        minObs : int or None (default)
-           Instead of requiring all the columns to have observations, require
-           only minObs observations
-        specificColumns : list-like, optional keyword
-            Columns to consider in removing NaN values. As a typical
-            application, you might provide the list of the columns involved in
-            a regression to exlude all the missing data in one shot.
+        axis_name = self._get_axis_name(axis)
 
-        Returns
-        -------
-        This DataFrame with rows containing any NaN values deleted
-        """
-        N = len(self.columns)
+        if axis == 0:
+            agg_axis = 1
+        elif axis == 1:
+            agg_axis = 0
+        else: # pragma: no cover
+            raise ValueError('axis must be 0 or 1')
 
-        if specificColumns:
-            colSet = set(specificColumns)
-            intersection = set(self.columns) & colSet
+        agg_obj = self
+        if subset is not None:
+            agg_axis_name = self._get_axis_name(agg_axis)
+            agg_obj = self.reindex(**{agg_axis_name : subset})
 
-            N = len(intersection)
+        count = agg_obj.count(axis=agg_axis)
 
-            filtered = self.filter(items=intersection)
-            theCount = filtered.count(axis=1)
+        if thresh is not None:
+            mask = count >= thresh
+        elif how == 'any':
+            mask = count == len(agg_obj._get_axis(agg_axis))
+        elif how == 'all':
+            mask = count > 0
         else:
-            theCount = self.count(axis=1)
-
-        if minObs is None:
-            minObs = N
+            if how is not None:
+                raise ValueError('do not recognize %s' % how)
+            else:
+                raise ValueError('must specify how or thresh')
 
-        return self.reindex(self.index[theCount >= minObs])
+        labels = self._get_axis(axis)
+        new_labels = labels[mask]
+        return self.reindex(**{axis_name : new_labels})
 
     #----------------------------------------------------------------------
     # Sorting
@@ -2409,6 +2400,54 @@ class DataFrame(NDFrame):
                       "last_valid_index instead", FutureWarning)
         return self.last_valid_index()
 
+    def dropEmptyRows(self, specificColumns=None): # pragma: no cover
+        """
+        Return DataFrame with rows omitted containing ALL NaN values
+        for optionally specified set of columns.
+
+        Parameters
+        ----------
+        specificColumns : list-like, optional keyword
+            Columns to consider in removing NaN values. As a typical
+            application, you might provide the list of the columns involved in
+            a regression to exlude all the missing data in one shot.
+
+        Returns
+        -------
+        This DataFrame with rows containing any NaN values deleted
+        """
+        warnings.warn("dropEmptyRows is deprecated. Use dropna with how='all'",
+                      FutureWarning)
+        return self.dropna(axis=0, subset=specificColumns, how='all')
+
+    def dropIncompleteRows(self, specificColumns=None,
+                           minObs=None): # pragma: no cover
+        """
+        Return DataFrame with rows omitted containing ANY NaN values for
+        optionally specified set of columns.
+
+        Parameters
+        ----------
+        minObs : int or None (default)
+           Instead of requiring all the columns to have observations, require
+           only minObs observations
+        specificColumns : list-like, optional keyword
+            Columns to consider in removing NaN values. As a typical
+            application, you might provide the list of the columns involved in
+            a regression to exlude all the missing data in one shot.
+
+        Returns
+        -------
+        This DataFrame with rows containing any NaN values deleted
+
+        """
+        warnings.warn("dropEmptyRows is deprecated. Use dropna",
+                      FutureWarning)
+        if minObs is None:
+            return self.dropna(axis=0, subset=specificColumns, how='any')
+        else:
+            return self.dropna(axis=0, subset=specificColumns, thresh=minObs)
+
     #----------------------------------------------------------------------
     # Fancy indexing
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 7423211bc..8ce270642 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1424,10 +1424,10 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
 
         frame = DataFrame({'foo' : mat}, index=self.frame.index)
 
-        smaller_frame = frame.dropEmptyRows()
+        smaller_frame = frame.dropna(how='all')
         self.assert_(np.array_equal(smaller_frame['foo'], mat[5:]))
 
-        smaller_frame = frame.dropEmptyRows(['foo'])
+        smaller_frame = frame.dropna(how='all', subset=['foo'])
         self.assert_(np.array_equal(smaller_frame['foo'], mat[5:]))
 
     def test_dropIncompleteRows(self):
@@ -1438,10 +1438,10 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         frame = DataFrame({'foo' : mat}, index=self.frame.index)
         frame['bar'] = 5
 
-        smaller_frame = frame.dropIncompleteRows()
+        smaller_frame = frame.dropna()
         self.assert_(np.array_equal(smaller_frame['foo'], mat[5:]))
 
-        samesize_frame = frame.dropIncompleteRows(specificColumns=['bar'])
+        samesize_frame = frame.dropna(subset=['bar'])
         self.assert_(samesize_frame.index.equals(self.frame.index))
 
     def test_fillna(self):
