commit f6a5c658204fe0dcb994af7f3a96b9c025f4bf93
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Aug 30 22:24:40 2011 -0400

    ENH: more flexible renaming. corrwith bugfix

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index c7fc01c56..c06e393d4 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -264,7 +264,7 @@ class DataFrame(NDFrame):
         """
         buf = StringIO()
         if len(self.index) < 500 and len(self.columns) <= 10:
-            self.toString(buf=buf)
+            self.to_string(buf=buf)
         else:
             self.info(buf=buf)
 
@@ -1271,7 +1271,8 @@ class DataFrame(NDFrame):
     def rename(self, index=None, columns=None):
         """
         Alter index and / or columns using input function or
-        functions. Function / dict values must be unique (1-to-1)
+        functions. Function / dict values must be unique (1-to-1). Labels not
+        contained in a dict / Series will be left as-is.
 
         Parameters
         ----------
@@ -1289,10 +1290,22 @@ class DataFrame(NDFrame):
         renamed : DataFrame (new object)
         """
         if isinstance(index, (dict, Series)):
-            index = index.__getitem__
+            def index_f(x):
+                if x in index:
+                    return index[x]
+                else:
+                    return x
+        else:
+            index_f = index
 
         if isinstance(columns, (dict, Series)):
-            columns = columns.__getitem__
+            def columns_f(x):
+                if x in columns:
+                    return columns[x]
+                else:
+                    return x
+        else:
+            columns_f = columns
 
         if index is None and columns is None:
             raise Exception('must pass either index or columns')
@@ -1302,10 +1315,10 @@ class DataFrame(NDFrame):
         result = self.copy()
 
         if index is not None:
-            result._rename_index_inplace(index)
+            result._rename_index_inplace(index_f)
 
         if columns is not None:
-            result._rename_columns_inplace(columns)
+            result._rename_columns_inplace(columns_f)
 
         return result
 
@@ -2112,12 +2125,16 @@ class DataFrame(NDFrame):
         left = left + right * 0
         right = right + left * 0
 
+        if axis == 1:
+            left = left.T
+            right = right.T
+
         # demeaned data
-        ldem = left - left.mean(axis)
-        rdem = right - right.mean(axis)
+        ldem = left - left.mean()
+        rdem = right - right.mean()
 
-        num = (ldem * rdem).sum(axis)
-        dom = (left.count(axis) - 1) * left.std(axis) * right.std(axis)
+        num = (ldem * rdem).sum()
+        dom = (left.count() - 1) * left.std() * right.std()
 
         correl = num / dom
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 7b6731518..937922841 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1588,10 +1588,16 @@ copy : boolean, default False
         renamed : Series (new object)
         """
         if isinstance(mapper, (dict, Series)):
-            mapper = mapper.__getitem__
+            def mapper_f(x):
+                if x in mapper:
+                    return mapper[x]
+                else:
+                    return x
+        else:
+            mapper_f = mapper
 
         result = self.copy()
-        result.index = [mapper(x) for x in self.index]
+        result.index = [mapper_f(x) for x in self.index]
 
         return result
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 314d96dba..cee7594a5 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1077,7 +1077,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         df = DataFrame({'foo' : np.inf * np.empty(10)})
         foo = repr(df)
 
-    def test_toString(self):
+    def test_to_string(self):
         # big mixed
         biggie = DataFrame({'A' : randn(1000),
                              'B' : tm.makeStringIndex(1000)},
@@ -1086,25 +1086,25 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         biggie['A'][:20] = nan
         biggie['B'][:20] = nan
         buf = StringIO()
-        biggie.toString(buf=buf)
+        biggie.to_string(buf=buf)
 
-        biggie.toString(buf=buf, columns=['B', 'A'], colSpace=17)
-        biggie.toString(buf=buf, columns=['B', 'A'],
+        biggie.to_string(buf=buf, columns=['B', 'A'], colSpace=17)
+        biggie.to_string(buf=buf, columns=['B', 'A'],
                         formatters={'A' : lambda x: '%.1f' % x})
 
-        biggie.toString(buf=buf, columns=['B', 'A'],
+        biggie.to_string(buf=buf, columns=['B', 'A'],
                         float_format=str)
-        biggie.toString(buf=buf, columns=['B', 'A'], colSpace=12,
+        biggie.to_string(buf=buf, columns=['B', 'A'], colSpace=12,
                         float_format=str)
 
         frame = DataFrame(index=np.arange(1000))
-        frame.toString(buf=buf)
+        frame.to_string(buf=buf)
 
-    def test_toString_unicode_columns(self):
+    def test_to_string_unicode_columns(self):
         df = DataFrame({u'\u03c3' : np.arange(10.)})
 
         buf = StringIO()
-        df.toString(buf=buf)
+        df.to_string(buf=buf)
         buf.getvalue()
 
         buf = StringIO()
@@ -1514,6 +1514,15 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         dropped = a.corrwith(b, axis=1, drop=True)
         self.assert_(a.index[-1] not in dropped.index)
 
+        # non time-series data
+        index = ['a', 'b', 'c', 'd', 'e']
+        columns = ['one', 'two', 'three', 'four']
+        df1 = DataFrame(randn(5, 4), index=index, columns=columns)
+        df2 = DataFrame(randn(4, 4), index=index[:4], columns=columns)
+        correls = df1.corrwith(df2, axis=1)
+        for row in index[:4]:
+            assert_almost_equal(correls[row], df1.ix[row].corr(df2.ix[row]))
+
     def test_dropEmptyRows(self):
         N = len(self.frame.index)
         mat = randn(N)
@@ -1872,6 +1881,10 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         # have to pass something
         self.assertRaises(Exception, self.frame.rename)
 
+        # partial columns
+        renamed = self.frame.rename(columns={'C' : 'foo', 'D' : 'bar'})
+        self.assert_(np.array_equal(renamed.columns, ['A', 'B', 'foo', 'bar']))
+
     #----------------------------------------------------------------------
     # Time series related
 
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 96f8a75ba..5705cd738 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -948,6 +948,11 @@ class TestSeries(unittest.TestCase):
         renamed2 = self.ts.rename(rename_dict)
         assert_series_equal(renamed, renamed2)
 
+        # partial dict
+        s = Series(np.arange(4), index=['a', 'b', 'c', 'd'])
+        renamed = s.rename({'b' : 'foo', 'd' : 'bar'})
+        self.assert_(np.array_equal(renamed.index, ['a', 'foo', 'c', 'bar']))
+
     def test_preserveRefs(self):
         seq = self.ts[[5,10,15]]
         seq[1] = np.NaN
