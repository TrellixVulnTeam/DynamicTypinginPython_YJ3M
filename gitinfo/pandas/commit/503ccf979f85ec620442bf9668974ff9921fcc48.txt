commit 503ccf979f85ec620442bf9668974ff9921fcc48
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Nov 6 17:07:03 2012 -0500

    BLD: remaining build/merge issues from master into c-parser

diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index eb2ce4165..2d5f45b93 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -772,8 +772,8 @@ baz,7,8,9
             df2 = df2.reindex(columns=['A', 'B', 'C'])
             df3 = xls.parse('Sheet2', skiprows=[1], index_col=0,
                             parse_dates=True, parse_cols='A:D')
-            assert_frame_equal(df, df2)
-            assert_frame_equal(df3, df2)
+            tm.assert_frame_equal(df, df2)
+            tm.assert_frame_equal(df3, df2)
             del df, df2, df3
 
             df = xls.parse('Sheet1', index_col=0, parse_dates=True,
@@ -783,8 +783,8 @@ baz,7,8,9
             df3 = xls.parse('Sheet2', skiprows=[1], index_col=0,
                              parse_dates=True,
                              parse_cols='A,C,D')
-            assert_frame_equal(df, df2)
-            assert_frame_equal(df3, df2)
+            tm.assert_frame_equal(df, df2)
+            tm.assert_frame_equal(df3, df2)
             del df, df2, df3
 
             df = xls.parse('Sheet1', index_col=0, parse_dates=True,
@@ -794,8 +794,8 @@ baz,7,8,9
             df3 = xls.parse('Sheet2', skiprows=[1], index_col=0,
                              parse_dates=True,
                              parse_cols='A,C:D')
-            assert_frame_equal(df, df2)
-            assert_frame_equal(df3, df2)
+            tm.assert_frame_equal(df, df2)
+            tm.assert_frame_equal(df3, df2)
 
     def test_read_table_unicode(self):
         fin = BytesIO(u'\u0141aski, Jan;1'.encode('utf-8'))
@@ -1794,7 +1794,7 @@ a,b,c
                 os.remove('__tmp__')
             except:
                 pass
-    
+
     def test_memory_map(self):
         # it works!
         result = self.read_csv(self.csv1, memory_map=True)
diff --git a/pandas/src/inference.pyx b/pandas/src/inference.pyx
index cc5aa556b..3405dcb77 100644
--- a/pandas/src/inference.pyx
+++ b/pandas/src/inference.pyx
@@ -309,6 +309,9 @@ def extract_ordinals(ndarray[object] values, freq):
     return ordinals
 
 
+cdef extern from "parse_helper.h":
+    inline int floatify(object, double *result) except -1
+
 
 def maybe_convert_numeric(ndarray[object] values, set na_values,
                           convert_empty=True):
@@ -355,7 +358,7 @@ def maybe_convert_numeric(ndarray[object] values, set na_values,
             complexes[i] = val
             seen_complex = 1
         else:
-            status = util.floatify(val, &fval)
+            status = floatify(val, &fval)
             floats[i] = fval
             if not seen_float:
                 if '.' in val or fval == INF or fval == NEGINF:
diff --git a/pandas/src/numpy_helper.h b/pandas/src/numpy_helper.h
index a2a6d3471..339566296 100644
--- a/pandas/src/numpy_helper.h
+++ b/pandas/src/numpy_helper.h
@@ -133,70 +133,6 @@ char_to_string(char* data) {
 //   return PyString_Check(obj);
 // #endif
 
-#include <errno.h>
-#include <float.h>
-
-double PANDAS_INLINE xstrtod(const char *p, char **q, char decimal, char sci, int skip_trailing);
-
-int to_double(char *item, double *p_value, char sci, char decimal)
-{
-    char *p_end;
-
-    *p_value = xstrtod(item, &p_end, decimal, sci, 1);
-
-    return (errno == 0) && (!*p_end);
-}
-
-#if PY_VERSION_HEX < 0x02060000
-  #define PyBytes_Check                PyString_Check
-  #define PyBytes_AS_STRING            PyString_AS_STRING
-#endif
-
-PANDAS_INLINE int floatify(PyObject* str, double *result) {
-    int status;
-    char *data;
-    PyObject* tmp = NULL;
-    const char sci = 'E';
-    const char dec = '.';
-
-    if (PyBytes_Check(str)) {
-        data = PyBytes_AS_STRING(str);
-    } else if (PyUnicode_Check(str)) {
-        tmp = PyUnicode_AsUTF8String(str);
-        data = PyBytes_AS_STRING(tmp);
-    } else {
-        PyErr_SetString(PyExc_TypeError, "Invalid object type");
-        return -1;
-    }
-
-    status = to_double(data, result, sci, dec);
-
-    if (!status) {
-        /* handle inf/-inf */
-        if (0 == strcmp(data, "-inf")) {
-            *result = -HUGE_VAL;
-        } else if (0 == strcmp(data, "inf")) {
-            *result = HUGE_VAL;
-        } else {
-            PyErr_SetString(PyExc_ValueError, "Unable to parse string");
-            Py_XDECREF(tmp);
-            return -1;
-        }
-    }
-
-    Py_XDECREF(tmp);
-    return 0;
-
-/*
-#if PY_VERSION_HEX >= 0x03000000
-  return PyFloat_FromString(str);
-#else
-  return PyFloat_FromString(str, NULL);
-#endif
-*/
-
-}
-
 PyObject* sarr_from_data(PyArray_Descr *descr, int length, void* data) {
 	PyArrayObject *result;
 	npy_intp dims[1] = {length};
@@ -229,187 +165,6 @@ void transfer_object_column(char *dst, char *src, size_t stride,
 }
 
 
-// ---------------------------------------------------------------------------
-// Implementation of xstrtod
-
-//
-// strtod.c
-//
-// Convert string to double
-//
-// Copyright (C) 2002 Michael Ringgaard. All rights reserved.
-//
-// Redistribution and use in source and binary forms, with or without
-// modification, are permitted provided that the following conditions
-// are met:
-//
-// 1. Redistributions of source code must retain the above copyright
-//    notice, this list of conditions and the following disclaimer.
-// 2. Redistributions in binary form must reproduce the above copyright
-//    notice, this list of conditions and the following disclaimer in the
-//    documentation and/or other materials provided with the distribution.
-// 3. Neither the name of the project nor the names of its contributors
-//    may be used to endorse or promote products derived from this software
-//    without specific prior written permission.
-//
-// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
-// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-// ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
-// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
-// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
-// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
-// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
-// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
-// SUCH DAMAGE.
-//
-// -----------------------------------------------------------------------
-// Modifications by Warren Weckesser, March 2011:
-// * Rename strtod() to xstrtod().
-// * Added decimal and sci arguments.
-// * Skip trailing spaces.
-// * Commented out the other functions.
-//
-
-PANDAS_INLINE void lowercase(char *p) {
-    for ( ; *p; ++p) *p = tolower(*p);
-}
-
-PANDAS_INLINE void uppercase(char *p) {
-    for ( ; *p; ++p) *p = toupper(*p);
-}
-
-
-double PANDAS_INLINE xstrtod(const char *str, char **endptr, char decimal,
-                             char sci, int skip_trailing)
-{
-  double number;
-  int exponent;
-  int negative;
-  char *p = (char *) str;
-  double p10;
-  int n;
-  int num_digits;
-  int num_decimals;
-
-  errno = 0;
-
-  // Skip leading whitespace
-  while (isspace(*p)) p++;
-
-  // Handle optional sign
-  negative = 0;
-  switch (*p)
-  {
-    case '-': negative = 1; // Fall through to increment position
-    case '+': p++;
-  }
-
-  number = 0.;
-  exponent = 0;
-  num_digits = 0;
-  num_decimals = 0;
-
-  // Process string of digits
-  while (isdigit(*p))
-  {
-    number = number * 10. + (*p - '0');
-    p++;
-    num_digits++;
-  }
-
-  // Process decimal part
-  if (*p == decimal)
-  {
-    p++;
-
-    while (isdigit(*p))
-    {
-      number = number * 10. + (*p - '0');
-      p++;
-      num_digits++;
-      num_decimals++;
-    }
-
-    exponent -= num_decimals;
-  }
-
-  if (num_digits == 0)
-  {
-    errno = ERANGE;
-    return 0.0;
-  }
-
-  // Correct for sign
-  if (negative) number = -number;
-
-  // Process an exponent string
-  if (toupper(*p) == toupper(sci))
-  {
-    // Handle optional sign
-    negative = 0;
-    switch (*++p)
-    {
-      case '-': negative = 1;   // Fall through to increment pos
-      case '+': p++;
-    }
-
-    // Process string of digits
-    n = 0;
-    while (isdigit(*p))
-    {
-      n = n * 10 + (*p - '0');
-      p++;
-    }
-
-    if (negative)
-      exponent -= n;
-    else
-      exponent += n;
-  }
-
-
-  if (exponent < DBL_MIN_EXP  || exponent > DBL_MAX_EXP)
-  {
-
-    errno = ERANGE;
-    return HUGE_VAL;
-  }
-
-  // Scale the result
-  p10 = 10.;
-  n = exponent;
-  if (n < 0) n = -n;
-  while (n)
-  {
-    if (n & 1)
-    {
-      if (exponent < 0)
-        number /= p10;
-      else
-        number *= p10;
-    }
-    n >>= 1;
-    p10 *= p10;
-  }
-
-
-  if (number == HUGE_VAL) {
-	  errno = ERANGE;
-  }
-
-  if (skip_trailing) {
-      // Skip trailing whitespace
-      while (isspace(*p)) p++;
-  }
-
-  if (endptr) *endptr = p;
-
-
-  return number;
-}
-
 void set_array_owndata(PyArrayObject *ao) {
     ao->flags |= NPY_OWNDATA;
 }
diff --git a/pandas/src/util.pxd b/pandas/src/util.pxd
index 18621d64c..587bc8596 100644
--- a/pandas/src/util.pxd
+++ b/pandas/src/util.pxd
@@ -15,7 +15,6 @@ cdef extern from "numpy_helper.h":
     inline cnp.int64_t get_nat()
     inline object get_value_1d(ndarray, Py_ssize_t)
     inline char *get_c_string(object)
-    inline int floatify(object, double *result) except -1
     inline object char_to_string(char*)
     inline void transfer_object_column(char *dst, char *src, size_t stride,
                                        size_t length)
