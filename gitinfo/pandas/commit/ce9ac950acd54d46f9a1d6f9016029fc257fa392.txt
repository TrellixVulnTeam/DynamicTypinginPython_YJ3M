commit ce9ac950acd54d46f9a1d6f9016029fc257fa392
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Jan 1 23:39:18 2012 -0500

    BUG: all NA case in Series.cov

diff --git a/pandas/core/nanops.py b/pandas/core/nanops.py
index 77366759f..01590e424 100644
--- a/pandas/core/nanops.py
+++ b/pandas/core/nanops.py
@@ -259,11 +259,13 @@ def get_corr_func(method):
 
 def nancov(a, b):
     assert(len(a) == len(b))
-    if len(a) == 0:
-        return np.nan
 
     valid = notnull(a) & notnull(b)
     if not valid.all():
         a = a[valid]
         b = b[valid]
+
+    if len(a) == 0:
+        return np.nan
+
     return np.cov(a, b)[0, 1]
diff --git a/pandas/tests/test_internals.py b/pandas/tests/test_internals.py
index 6469fb6f2..8f4085e69 100644
--- a/pandas/tests/test_internals.py
+++ b/pandas/tests/test_internals.py
@@ -197,11 +197,16 @@ class TestBlockManager(unittest.TestCase):
         mgr2 = self.mgr.reindex_axis(np.arange(N - 1), axis=1)
         self.assert_(not self.mgr._is_indexed_like(mgr2))
 
-    def test_block_id_vector(self):
+    def test_block_id_vector_item_dtypes(self):
         expected = [0, 1, 0, 1, 0, 2, 3]
         result = self.mgr.block_id_vector
         assert_almost_equal(expected, result)
 
+        result = self.mgr.item_dtypes
+        expected = ['float64', 'object', 'float64', 'object', 'float64',
+                    'bool', 'int64']
+        self.assert_(np.array_equal(result, expected))
+
     def test_union_block_items(self):
         blocks = [get_float_ex(['a', 'b', 'c']),
                   get_float_ex(['c', 'd', 'e'])]
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 9b48ea7a8..94397263d 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -1034,6 +1034,11 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         # No overlap
         self.assert_(np.isnan(self.ts[::2].cov(self.ts[1::2])))
 
+        # all NA
+        cp = self.ts[:10].copy()
+        cp[:] = np.nan
+        self.assert_(isnull(cp.cov(cp)))
+
     def test_copy(self):
         ts = self.ts.copy()
 
