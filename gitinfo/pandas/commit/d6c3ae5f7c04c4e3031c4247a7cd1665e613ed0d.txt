commit d6c3ae5f7c04c4e3031c4247a7cd1665e613ed0d
Author: y-p <yoval@gmx.com>
Date:   Sun Apr 14 17:52:05 2013 +0300

    DOC: add class docstrings in various places

diff --git a/pandas/core/daterange.py b/pandas/core/daterange.py
index 954d72def..9ddd76c47 100644
--- a/pandas/core/daterange.py
+++ b/pandas/core/daterange.py
@@ -9,6 +9,8 @@ import pandas.core.datetools as datetools
 # DateRange class
 
 class DateRange(Index):
+    """Deprecated
+    """
 
     offset = tzinfo = None
 
diff --git a/pandas/core/index.py b/pandas/core/index.py
index a6da188c6..3099972d4 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1280,6 +1280,25 @@ class Index(np.ndarray):
 
 
 class Int64Index(Index):
+    """
+    Immutable ndarray implementing an ordered, sliceable set. The basic object
+    storing axis labels for all pandas objects. Int64Index is a special case of `Index`
+    with purely integer labels. This is the default index type used by the DataFrame
+    and Series ctors when no explicit index is provided by the user.
+
+    Parameters
+    ----------
+    data : array-like (1-dimensional)
+    dtype : NumPy dtype (default: object)
+    copy : bool
+        Make a copy of input ndarray
+    name : object
+        Name to be stored in the index
+
+    Note
+    ----
+    An Index instance can **only** contain hashable objects
+    """
 
     _groupby = _algos.groupby_int64
     _arrmap = _algos.arrmap_int64
diff --git a/pandas/core/panel4d.py b/pandas/core/panel4d.py
index b2fb2d25e..4113832f0 100644
--- a/pandas/core/panel4d.py
+++ b/pandas/core/panel4d.py
@@ -11,12 +11,8 @@ Panel4D = create_nd_panel_factory(
                  'minor_axis': 'minor_axis'},
     slicer=Panel,
     axis_aliases={'major': 'major_axis', 'minor': 'minor_axis'},
-    stat_axis=2)
-
-
-def panel4d_init(self, data=None, labels=None, items=None, major_axis=None,
-                 minor_axis=None, copy=False, dtype=None):
-    """
+    stat_axis=2,
+    ns=dict(__doc__=  """
     Represents a 4 dimensonal structured
 
     Parameters
@@ -33,6 +29,14 @@ def panel4d_init(self, data=None, labels=None, items=None, major_axis=None,
     copy : boolean, default False
     Copy data from inputs. Only affects DataFrame / 2d ndarray input
     """
+
+        )
+    )
+
+
+def panel4d_init(self, data=None, labels=None, items=None, major_axis=None,
+                 minor_axis=None, copy=False, dtype=None):
+
     self._init_data(data=data, labels=labels, items=items,
                     major_axis=major_axis, minor_axis=minor_axis,
                     copy=copy, dtype=dtype)
diff --git a/pandas/core/panelnd.py b/pandas/core/panelnd.py
index ce9b43aab..08ff3b70d 100644
--- a/pandas/core/panelnd.py
+++ b/pandas/core/panelnd.py
@@ -3,7 +3,7 @@
 import pandas.lib as lib
 
 
-def create_nd_panel_factory(klass_name, axis_orders, axis_slices, slicer, axis_aliases=None, stat_axis=2):
+def create_nd_panel_factory(klass_name, axis_orders, axis_slices, slicer, axis_aliases=None, stat_axis=2,ns=None):
     """ manufacture a n-d class:
 
         parameters
@@ -35,7 +35,8 @@ def create_nd_panel_factory(klass_name, axis_orders, axis_slices, slicer, axis_a
             raise Exception("cannot create this slicer [%s]" % slicer)
 
     # build the klass
-    klass = type(klass_name, (slicer,), {})
+    ns = {} if not ns else ns
+    klass = type(klass_name, (slicer,), ns)
 
     # add the class variables
     klass._AXIS_ORDERS = axis_orders
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 4115c3e6a..a68234b5d 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -3366,7 +3366,34 @@ Series.hist = _gfx.hist_series
 
 
 class TimeSeries(Series):
+    """
+    The time series varians of Series, a One-dimensional ndarray with `TimeStamp`
+    axis labels.
+    Labels need not be unique but must be any hashable type. The object
+    supports both integer- and label-based indexing and provides a host of
+    methods for performing operations involving the index. Statistical
+    methods from ndarray have been overridden to automatically exclude
+    missing data (currently represented as NaN)
 
+    Operations between Series (+, -, /, *, **) align values based on their
+    associated index values-- they need not be the same length. The result
+    index will be the sorted union of the two indexes.
+
+    Parameters
+    ----------
+    data : array-like, dict, or scalar value
+        Contains data stored in Series
+    index : array-like or Index (1d)
+        Values must be unique and hashable, same length as data. Index
+        object (or other iterable of same length as data) Will default to
+        np.arange(len(data)) if not provided. If both a dict and index
+        sequence are used, the index will override the keys found in the
+        dict.
+    dtype : numpy.dtype or None
+        If None, dtype will be inferred copy : boolean, default False Copy
+        input data
+    copy : boolean, default False
+    """
     def _repr_footer(self):
         if self.index.freq is not None:
             freqstr = 'Freq: %s, ' % self.index.freqstr
diff --git a/pandas/sparse/series.py b/pandas/sparse/series.py
index 6ad165570..8374c4ab9 100644
--- a/pandas/sparse/series.py
+++ b/pandas/sparse/series.py
@@ -572,4 +572,23 @@ class SparseSeries(SparseArray, Series):
 
 
 class SparseTimeSeries(SparseSeries, TimeSeries):
+    """Data structure for labeled, sparse floating point data, with `TimeStamp`
+    index labels
+
+    Parameters
+    ----------
+    data : {array-like, Series, SparseSeries, dict}
+    kind : {'block', 'integer'}
+    fill_value : float
+        Defaults to NaN (code for missing)
+    sparse_index : {BlockIndex, IntIndex}, optional
+        Only if you have one. Mainly used internally
+
+    Notes
+    -----
+    SparseSeries objects are immutable via the typical Python means. If you
+    must change values, convert to dense, make your changes, then convert back
+    to sparse
+    """
+
     pass
diff --git a/pandas/tslib.pyx b/pandas/tslib.pyx
index 080146c3e..d166f05c1 100644
--- a/pandas/tslib.pyx
+++ b/pandas/tslib.pyx
@@ -119,6 +119,11 @@ def _is_fixed_offset(tz):
 # Python front end to C extension type _Timestamp
 # This serves as the box for datetime64
 class Timestamp(_Timestamp):
+    """TimeStamp is the pandas equivalent of python's Datetime
+    and is interchangable with it in most cases. It's the type used
+    in the label making up a DatetimeIndex, use by the various
+    timeseries oriented data structures in pandas.
+    """
 
     @classmethod
     def fromordinal(cls, ordinal, offset=None, tz=None):
@@ -309,7 +314,7 @@ class Timestamp(_Timestamp):
 
 
 class NaTType(_NaT):
-
+    """(N)ot-(A)-(T)ime, the time equivalent of NaN"""
     def __new__(cls):
         cdef _NaT base
 
