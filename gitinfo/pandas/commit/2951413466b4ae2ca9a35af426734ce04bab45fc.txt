commit 2951413466b4ae2ca9a35af426734ce04bab45fc
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Oct 2 21:47:01 2011 -0400

    REF: changed index types to Py_ssize_t

diff --git a/pandas/src/moments.pyx b/pandas/src/moments.pyx
index ff23a312d..2902e26a3 100644
--- a/pandas/src/moments.pyx
+++ b/pandas/src/moments.pyx
@@ -25,9 +25,9 @@
 #               Series: Prentice-Hall Series in Automatic Computation
 
 
-def kth_smallest(ndarray[double_t, ndim=1] a, int k):
+def kth_smallest(ndarray[double_t, ndim=1] a, Py_ssize_t k):
     cdef:
-        int i,j,l,m,n
+        Py_ssize_t i,j,l,m,n
         double_t x, t
 
     n = len(a)
@@ -121,8 +121,8 @@ def roll_sum(ndarray[double_t] input, int win, int minp):
 def roll_mean(ndarray[double_t] input,
                int win, int minp):
     cdef double val, prev, sum_x = 0
-    cdef int nobs = 0, i
-    cdef int N = len(input)
+    cdef Py_ssize_t nobs = 0, i
+    cdef Py_ssize_t N = len(input)
 
     cdef ndarray[double_t] output = np.empty(N, dtype=float)
 
@@ -177,8 +177,8 @@ def ewma(ndarray[double_t] input, double_t com):
     '''
 
     cdef double cur, prev, neww, oldw, adj
-    cdef int i
-    cdef int N = len(input)
+    cdef Py_ssize_t i
+    cdef Py_ssize_t N = len(input)
 
     cdef ndarray[double_t] output = np.empty(N, dtype=float)
 
@@ -215,8 +215,8 @@ def ewma(ndarray[double_t] input, double_t com):
 
 def roll_var(ndarray[double_t] input, int win, int minp):
     cdef double val, prev, sum_x = 0, sum_xx = 0, nobs = 0
-    cdef int i
-    cdef int N = len(input)
+    cdef Py_ssize_t i
+    cdef Py_ssize_t N = len(input)
 
     cdef ndarray[double_t] output = np.empty(N, dtype=float)
 
@@ -262,8 +262,8 @@ def roll_var(ndarray[double_t] input, int win, int minp):
 def roll_skew(ndarray[double_t] input, int win, int minp):
     cdef double val, prev
     cdef double x = 0, xx = 0, xxx = 0
-    cdef int nobs = 0, i
-    cdef int N = len(input)
+    cdef Py_ssize_t nobs = 0, i
+    cdef Py_ssize_t N = len(input)
 
     cdef ndarray[double_t] output = np.empty(N, dtype=float)
 
@@ -325,8 +325,8 @@ def roll_kurt(ndarray[double_t] input,
                int win, int minp):
     cdef double val, prev
     cdef double x = 0, xx = 0, xxx = 0, xxxx = 0
-    cdef int nobs = 0, i
-    cdef int N = len(input)
+    cdef Py_ssize_t nobs = 0, i
+    cdef Py_ssize_t N = len(input)
 
     cdef ndarray[double_t] output = np.empty(N, dtype=float)
 
@@ -398,9 +398,9 @@ cdef _roll_skiplist_op(ndarray arg, int win, int minp, skiplist_f op):
     cdef ndarray[double_t] input = arg
     cdef double val, prev, midpoint
     cdef IndexableSkiplist skiplist
-    cdef int nobs = 0, i
+    cdef Py_ssize_t nobs = 0, i
 
-    cdef int N = len(input)
+    cdef Py_ssize_t N = len(input)
     cdef ndarray[double_t] output = np.empty(N, dtype=float)
 
     skiplist = IndexableSkiplist(win)
@@ -446,7 +446,7 @@ def roll_median(ndarray input, int win, int minp):
 # Cython to be able to get this right.
 
 cdef double_t _get_median(object sl, int nobs, int minp):
-    cdef int midpoint
+    cdef Py_ssize_t midpoint
     cdef IndexableSkiplist skiplist = <IndexableSkiplist> sl
     if nobs >= minp:
         midpoint = nobs / 2
@@ -489,8 +489,8 @@ def roll_quantile(ndarray[float64_t, cast=True] input, int win,
    '''
    cdef double val, prev, midpoint
    cdef IndexableSkiplist skiplist
-   cdef int nobs = 0, i
-   cdef int N = len(input)
+   cdef Py_ssize_t nobs = 0, i
+   cdef Py_ssize_t N = len(input)
    cdef ndarray[double_t] output = np.empty(N, dtype=float)
 
    skiplist = IndexableSkiplist(win)
diff --git a/pandas/src/skiplist.pyx b/pandas/src/skiplist.pyx
index c33fa5062..4294e9da9 100644
--- a/pandas/src/skiplist.pyx
+++ b/pandas/src/skiplist.pyx
@@ -49,7 +49,7 @@ cdef class IndexableSkiplist:
     lookup by rank.
     '''
     cdef:
-        int size, maxlevels
+        Py_ssize_t size, maxlevels
         Node head
 
     def __init__(self, expected_size=100):
@@ -63,8 +63,8 @@ cdef class IndexableSkiplist:
     def __getitem__(self, i):
         return self.get(i)
 
-    cpdef get(self, int i):
-        cdef int level
+    cpdef get(self, Py_ssize_t i):
+        cdef Py_ssize_t level
         cdef Node node
 
         node = self.head
@@ -78,7 +78,7 @@ cdef class IndexableSkiplist:
         return node.value
 
     cpdef insert(self, double value):
-        cdef int level, steps, d
+        cdef Py_ssize_t level, steps, d
         cdef Node node, prevnode, newnode, next_at_level, tmp
         cdef list chain, steps_at_level
 
@@ -117,7 +117,7 @@ cdef class IndexableSkiplist:
         self.size += 1
 
     cpdef remove(self, double value):
-        cdef int level, d
+        cdef Py_ssize_t level, d
         cdef Node node, prevnode, tmpnode, next_at_level
         cdef list chain
 
