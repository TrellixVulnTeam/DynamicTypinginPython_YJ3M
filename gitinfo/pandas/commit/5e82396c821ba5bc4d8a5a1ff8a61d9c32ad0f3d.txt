commit 5e82396c821ba5bc4d8a5a1ff8a61d9c32ad0f3d
Author: Jeff Reback <jeff@reback.net>
Date:   Sat Aug 22 18:30:28 2015 -0400

    DEPR: deprecate TimeSeries officially

diff --git a/doc/source/whatsnew/v0.17.0.txt b/doc/source/whatsnew/v0.17.0.txt
index 1f723a9c5..7415ac01a 100644
--- a/doc/source/whatsnew/v0.17.0.txt
+++ b/doc/source/whatsnew/v0.17.0.txt
@@ -664,6 +664,7 @@ Deprecations
   can easily be replaced by using the ``add`` and ``mul`` methods:
   ``DataFrame.add(other, fill_value=0)`` and ``DataFrame.mul(other, fill_value=1.)``
   (:issue:`10735`).
+- ``TimeSeries`` deprecated in favor of ``Series`` (note that this has been alias since 0.13.0), (:issue:`10890`)
 
 .. _whatsnew_0170.prior_deprecations:
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 8768d0e13..0c17104bb 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -261,6 +261,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         is_all_dates = labels.is_all_dates
         if is_all_dates:
+
             if not isinstance(labels, (DatetimeIndex, PeriodIndex, TimedeltaIndex)):
                 labels = DatetimeIndex(labels)
 
@@ -2779,7 +2780,14 @@ def _sanitize_array(data, index, dtype=None, copy=False,
     return subarr
 
 # backwards compatiblity
-TimeSeries = Series
+class TimeSeries(Series):
+
+    def __init__(self, *args, **kwargs):
+        # deprecation TimeSeries, #10890
+        warnings.warn("TimeSeries is deprecated. Please use Series",
+                      FutureWarning, stacklevel=2)
+
+        super(TimeSeries, self).__init__(*args, **kwargs)
 
 #----------------------------------------------------------------------
 # Add plotting methods to Series
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 8ef6363f8..b23a183cd 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -13,7 +13,8 @@ import warnings
 import os
 
 import numpy as np
-from pandas import (Series, TimeSeries, DataFrame, Panel, Panel4D, Index,
+import pandas as pd
+from pandas import (Series, DataFrame, Panel, Panel4D, Index,
                     MultiIndex, Int64Index, Timestamp)
 from pandas.sparse.api import SparseSeries, SparseDataFrame, SparsePanel
 from pandas.sparse.array import BlockIndex, IntIndex
@@ -164,7 +165,7 @@ _TYPE_MAP = {
 
     Series: u('series'),
     SparseSeries: u('sparse_series'),
-    TimeSeries: u('series'),
+    pd.TimeSeries: u('series'),
     DataFrame: u('frame'),
     SparseDataFrame: u('sparse_frame'),
     Panel: u('wide'),
diff --git a/pandas/io/tests/generate_legacy_storage_files.py b/pandas/io/tests/generate_legacy_storage_files.py
index 86c5a9e0d..0ca5ced1b 100644
--- a/pandas/io/tests/generate_legacy_storage_files.py
+++ b/pandas/io/tests/generate_legacy_storage_files.py
@@ -1,8 +1,8 @@
 """ self-contained to write legacy storage (pickle/msgpack) files """
 from __future__ import print_function
 from distutils.version import LooseVersion
-from pandas import (Series, TimeSeries, DataFrame, Panel,
-                    SparseSeries, SparseTimeSeries, SparseDataFrame, SparsePanel,
+from pandas import (Series, DataFrame, Panel,
+                    SparseSeries, SparseDataFrame, SparsePanel,
                     Index, MultiIndex, PeriodIndex, bdate_range, to_msgpack,
                     date_range, period_range, bdate_range, Timestamp, Categorical,
                     Period)
@@ -36,7 +36,7 @@ def _create_sp_tsseries():
     arr[-1:] = nan
 
     date_index = bdate_range('1/1/2011', periods=len(arr))
-    bseries = SparseTimeSeries(arr, index=date_index, kind='block')
+    bseries = SparseSeries(arr, index=date_index, kind='block')
     bseries.name = 'btsseries'
     return bseries
 
@@ -78,7 +78,7 @@ def create_data():
     series = dict(float=Series(data['A']),
                   int=Series(data['B']),
                   mixed=Series(data['E']),
-                  ts=TimeSeries(np.arange(10).astype(np.int64), index=date_range('20130101',periods=10)),
+                  ts=Series(np.arange(10).astype(np.int64), index=date_range('20130101',periods=10)),
                   mi=Series(np.arange(5).astype(np.float64),
                             index=MultiIndex.from_tuples(tuple(zip(*[[1, 1, 2, 2, 2], [3, 4, 3, 4, 5]])),
                                                          names=['one', 'two'])),
diff --git a/pandas/sparse/series.py b/pandas/sparse/series.py
index a8addfab1..62d6a3465 100644
--- a/pandas/sparse/series.py
+++ b/pandas/sparse/series.py
@@ -7,7 +7,7 @@ with float64 data
 
 from numpy import nan, ndarray
 import numpy as np
-
+import warnings
 import operator
 
 from pandas.core.common import isnull, _values_from_object, _maybe_match_name
@@ -770,4 +770,11 @@ ops.add_special_arithmetic_methods(SparseSeries, _arith_method,
                                    bool_method=None, use_numexpr=False, force=True)
 
 # backwards compatiblity
-SparseTimeSeries = SparseSeries
+class SparseTimeSeries(SparseSeries):
+
+    def __init__(self, *args, **kwargs):
+        # deprecation TimeSeries, #10890
+        warnings.warn("SparseTimeSeries is deprecated. Please use SparseSeries",
+                      FutureWarning, stacklevel=2)
+
+        super(SparseTimeSeries, self).__init__(*args, **kwargs)
diff --git a/pandas/sparse/tests/test_sparse.py b/pandas/sparse/tests/test_sparse.py
index 1a76e0f3c..8d24025f3 100644
--- a/pandas/sparse/tests/test_sparse.py
+++ b/pandas/sparse/tests/test_sparse.py
@@ -30,7 +30,7 @@ from pandas.tools.util import cartesian_product
 import pandas.sparse.frame as spf
 
 from pandas._sparse import BlockIndex, IntIndex
-from pandas.sparse.api import (SparseSeries, SparseTimeSeries,
+from pandas.sparse.api import (SparseSeries,
                                SparseDataFrame, SparsePanel,
                                SparseArray)
 import pandas.tests.test_frame as test_frame
@@ -160,6 +160,12 @@ class TestSparseSeries(tm.TestCase,
         [x for x in self.bseries]
         str(self.bseries)
 
+    def test_TimeSeries_deprecation(self):
+
+        # deprecation TimeSeries, #10890
+        with tm.assert_produces_warning(FutureWarning):
+            pd.SparseTimeSeries(1,index=pd.date_range('20130101',periods=3))
+
     def test_construct_DataFrame_with_sp_series(self):
         # it works!
         df = DataFrame({'col': self.bseries})
@@ -258,7 +264,7 @@ class TestSparseSeries(tm.TestCase,
         # Sparse time series works
         date_index = bdate_range('1/1/2000', periods=len(self.bseries))
         s5 = SparseSeries(self.bseries, index=date_index)
-        tm.assertIsInstance(s5, SparseTimeSeries)
+        tm.assertIsInstance(s5, SparseSeries)
 
         # pass Series
         bseries2 = SparseSeries(self.bseries.to_dense())
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index fa2e6e911..d1073b6c4 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -502,9 +502,8 @@ class TestGroupBy(tm.TestCase):
         self.assertRaises(AssertionError, pd.algos.groupby_object,a, b)
 
     def test_groupby_grouper_f_sanity_checked(self):
-        import pandas as pd
         dates = date_range('01-Jan-2013', periods=12, freq='MS')
-        ts = pd.TimeSeries(np.random.randn(12), index=dates)
+        ts = Series(np.random.randn(12), index=dates)
 
         # GH3035
         # index.map is used to apply grouper to the index
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 8f241bdc2..6424a190d 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -666,6 +666,12 @@ class TestSeries(tm.TestCase, CheckNameIntegration):
             self.assertEqual(astyped.dtype, dtype)
             self.assertEqual(astyped.name, s.name)
 
+    def test_TimeSeries_deprecation(self):
+
+        # deprecation TimeSeries, #10890
+        with tm.assert_produces_warning(FutureWarning):
+            pd.TimeSeries(1,index=date_range('20130101',periods=3))
+
     def test_constructor(self):
         # Recognize TimeSeries
         self.assertTrue(self.ts.is_time_series)
diff --git a/pandas/tests/test_strings.py b/pandas/tests/test_strings.py
index 6a9ad175f..7886a63c6 100644
--- a/pandas/tests/test_strings.py
+++ b/pandas/tests/test_strings.py
@@ -15,7 +15,7 @@ from numpy.random import randint
 
 from pandas.compat import range, lrange, u, unichr
 import pandas.compat as compat
-from pandas import (Index, Series, TimeSeries, DataFrame, isnull, notnull,
+from pandas import (Index, Series, DataFrame, isnull, notnull,
                     bdate_range, date_range, MultiIndex)
 import pandas.core.common as com
 
diff --git a/pandas/tseries/tests/test_period.py b/pandas/tseries/tests/test_period.py
index eb5c6759b..e0434bfec 100644
--- a/pandas/tseries/tests/test_period.py
+++ b/pandas/tseries/tests/test_period.py
@@ -24,7 +24,7 @@ import numpy as np
 from numpy.random import randn
 from pandas.compat import range, lrange, lmap, zip
 
-from pandas import Series, TimeSeries, DataFrame, _np_version_under1p9
+from pandas import Series, DataFrame, _np_version_under1p9
 from pandas import tslib
 from pandas.util.testing import(assert_series_equal, assert_almost_equal,
                                 assertRaisesRegexp)
@@ -1191,7 +1191,7 @@ class TestPeriodIndex(tm.TestCase):
     def test_make_time_series(self):
         index = PeriodIndex(freq='A', start='1/1/2001', end='12/1/2009')
         series = Series(1, index=index)
-        tm.assertIsInstance(series, TimeSeries)
+        tm.assertIsInstance(series, Series)
 
     def test_astype(self):
         idx = period_range('1990', '2009', freq='A')
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index 4b3085dc8..7dafc88bf 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -980,7 +980,7 @@ def _simple_ts(start, end, freq='D'):
 
 def _simple_pts(start, end, freq='D'):
     rng = period_range(start, end, freq=freq)
-    return TimeSeries(np.random.randn(len(rng)), index=rng)
+    return Series(np.random.randn(len(rng)), index=rng)
 
 
 class TestResamplePeriodIndex(tm.TestCase):
@@ -1177,7 +1177,7 @@ class TestResamplePeriodIndex(tm.TestCase):
     def test_resample_fill_missing(self):
         rng = PeriodIndex([2000, 2005, 2007, 2009], freq='A')
 
-        s = TimeSeries(np.random.randn(4), index=rng)
+        s = Series(np.random.randn(4), index=rng)
 
         stamps = s.to_timestamp()
 
@@ -1191,12 +1191,12 @@ class TestResamplePeriodIndex(tm.TestCase):
 
     def test_cant_fill_missing_dups(self):
         rng = PeriodIndex([2000, 2005, 2005, 2007, 2007], freq='A')
-        s = TimeSeries(np.random.randn(5), index=rng)
+        s = Series(np.random.randn(5), index=rng)
         self.assertRaises(Exception, s.resample, 'A')
 
     def test_resample_5minute(self):
         rng = period_range('1/1/2000', '1/5/2000', freq='T')
-        ts = TimeSeries(np.random.randn(len(rng)), index=rng)
+        ts = Series(np.random.randn(len(rng)), index=rng)
 
         result = ts.resample('5min')
         expected = ts.to_timestamp().resample('5min')
@@ -1402,7 +1402,7 @@ class TestResamplePeriodIndex(tm.TestCase):
               'COOP_DLY_TRN_QT': 30, 'COOP_DLY_SLS_AMT': 20}] * 28 +
             [{'REST_KEY': 2, 'DLY_TRN_QT': 70, 'DLY_SLS_AMT': 10,
               'COOP_DLY_TRN_QT': 50, 'COOP_DLY_SLS_AMT': 20}] * 28,
-            index=index.append(index)).sort()
+            index=index.append(index)).sort_index()
 
         index = date_range('2001-5-4',periods=4,freq='7D')
         expected = DataFrame(
@@ -1430,7 +1430,7 @@ class TestTimeGrouper(tm.TestCase):
 
         grouped = self.ts.groupby(grouper)
 
-        f = lambda x: x.order()[-3:]
+        f = lambda x: x.sort_values()[-3:]
 
         applied = grouped.apply(f)
         expected = self.ts.groupby(lambda x: x.year).apply(f)
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index e02973136..f416a8939 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -9,7 +9,7 @@ import nose
 import numpy as np
 randn = np.random.randn
 
-from pandas import (Index, Series, TimeSeries, DataFrame,
+from pandas import (Index, Series, DataFrame,
                     isnull, date_range, Timestamp, Period, DatetimeIndex,
                     Int64Index, to_datetime, bdate_range, Float64Index, TimedeltaIndex, NaT)
 
@@ -60,7 +60,7 @@ class TestTimeSeriesDuplicates(tm.TestCase):
         self.dups = Series(np.random.randn(len(dates)), index=dates)
 
     def test_constructor(self):
-        tm.assertIsInstance(self.dups, TimeSeries)
+        tm.assertIsInstance(self.dups, Series)
         tm.assertIsInstance(self.dups.index, DatetimeIndex)
 
     def test_is_unique_monotonic(self):
diff --git a/pandas/tseries/tests/test_timeseries_legacy.py b/pandas/tseries/tests/test_timeseries_legacy.py
index 6889f8e2a..4cbc17136 100644
--- a/pandas/tseries/tests/test_timeseries_legacy.py
+++ b/pandas/tseries/tests/test_timeseries_legacy.py
@@ -8,7 +8,7 @@ import nose
 import numpy as np
 randn = np.random.randn
 
-from pandas import (Index, Series, TimeSeries, DataFrame,
+from pandas import (Index, Series, DataFrame,
                     isnull, date_range, Timestamp, DatetimeIndex,
                     Int64Index, to_datetime, bdate_range)
 
diff --git a/pandas/tseries/util.py b/pandas/tseries/util.py
index 6c534de0a..4f29b2bf3 100644
--- a/pandas/tseries/util.py
+++ b/pandas/tseries/util.py
@@ -28,7 +28,7 @@ def pivot_annual(series, freq=None):
 
     Parameters
     ----------
-    series : TimeSeries
+    series : Series
     freq : string or None, default None
 
     Returns
