commit 319c4f8685d57e2a4fe975c539b4e27d97444370
Author: jreback <jeff@reback.net>
Date:   Mon Aug 4 09:39:37 2014 -0400

    REGR: Regression in multi-index indexing with a non-scalar type object (GH7914)

diff --git a/doc/source/v0.15.0.txt b/doc/source/v0.15.0.txt
index 109ed8b28..315bd34de 100644
--- a/doc/source/v0.15.0.txt
+++ b/doc/source/v0.15.0.txt
@@ -296,7 +296,7 @@ Bug Fixes
 - Bug in adding and subtracting ``PeriodIndex`` with ``PeriodIndex`` raise ``TypeError`` (:issue:`7741`)
 - Bug in ``combine_first`` with ``PeriodIndex`` data raises ``TypeError`` (:issue:`3367`)
 - Bug in multi-index slicing with missing indexers (:issue:`7866`)
-
+- Regression in multi-index indexing with a non-scalar type object (:issue:`7914`)
 
 - Bug in pickles contains ``DateOffset`` may raise ``AttributeError`` when ``normalize`` attribute is reffered internally (:issue:`7748`)
 
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 367a28395..b02fe523d 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -838,7 +838,7 @@ class _NDFrameIndexer(object):
             axis += 1
 
             # if we have a scalar, we are done
-            if np.isscalar(obj):
+            if np.isscalar(obj) or not hasattr(obj,'ndim'):
                 break
 
             # has the dim of the obj changed?
diff --git a/pandas/tests/test_indexing.py b/pandas/tests/test_indexing.py
index 234056e55..b8f51d0ca 100644
--- a/pandas/tests/test_indexing.py
+++ b/pandas/tests/test_indexing.py
@@ -1974,6 +1974,15 @@ class TestIndexing(tm.TestCase):
         result = s.loc[idx[:,['foo','bah']]]
         assert_series_equal(result,expected)
 
+        # regression from < 0.14.0
+        # GH 7914
+        df = DataFrame([[np.mean, np.median],['mean','median']],
+                       columns=MultiIndex.from_tuples([('functs','mean'),
+                                                       ('functs','median')]),
+                       index=['function', 'name'])
+        result = df.loc['function',('functs','mean')]
+        self.assertEqual(result,np.mean)
+
     def test_setitem_dtype_upcast(self):
 
         # GH3216
