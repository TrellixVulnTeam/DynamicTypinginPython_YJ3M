commit fed589e9f388ca339783b92b9002eda51b5fd659
Author: jreback <jeff@reback.net>
Date:   Sat Jan 25 08:56:40 2014 -0500

    DOC: remove warnings in panel.apply docs (GH6087)

diff --git a/doc/source/basics.rst b/doc/source/basics.rst
index 9521bae37..638c8451b 100644
--- a/doc/source/basics.rst
+++ b/doc/source/basics.rst
@@ -287,7 +287,7 @@ fact, this expression is False:
    (df+df == df*2).all()
 
 Notice that the boolean DataFrame ``df+df == df*2`` contains some False values!
-That is because NaNs do not compare as equals: 
+That is because NaNs do not compare as equals:
 
 .. ipython:: python
 
@@ -727,7 +727,7 @@ Apply can also accept multiple axes in the ``axis`` argument. This will pass a
 
 .. ipython:: python
 
-   f = lambda x: (x-x.mean(1)/x.std(1))
+   f = lambda x: ((x.T-x.mean(1))/x.std(1)).T
 
    result = panel.apply(f, axis = ['items','major_axis'])
    result
diff --git a/doc/source/v0.13.1.txt b/doc/source/v0.13.1.txt
index 7ae80c8d3..ded0e3b49 100644
--- a/doc/source/v0.13.1.txt
+++ b/doc/source/v0.13.1.txt
@@ -134,7 +134,7 @@ Enhancements
 
   .. ipython:: python
 
-     f = lambda x: (x-x.mean(1)/x.std(1))
+     f = lambda x: ((x.T-x.mean(1))/x.std(1)).T
 
      result = panel.apply(f, axis = ['items','major_axis'])
      result
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 16a43f2f9..170eedd37 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -1146,11 +1146,13 @@ class TestPanel(tm.TestCase, PanelTests, CheckIndexing,
         assert_frame_equal(result,expected)
 
         # transforms
-        f = lambda x: (x-x.mean(1)/x.std(1))
+        f = lambda x: ((x.T-x.mean(1))/x.std(1)).T
 
-        result = self.panel.apply(f, axis = ['items','major_axis'])
-        expected = Panel(dict([ (ax,f(self.panel.loc[:,:,ax])) for ax in self.panel.minor_axis ]))
-        assert_panel_equal(result,expected)
+        # make sure that we don't trigger any warnings
+        with tm.assert_produces_warning(False):
+            result = self.panel.apply(f, axis = ['items','major_axis'])
+            expected = Panel(dict([ (ax,f(self.panel.loc[:,:,ax])) for ax in self.panel.minor_axis ]))
+            assert_panel_equal(result,expected)
 
         result = self.panel.apply(f, axis = ['major_axis','minor_axis'])
         expected = Panel(dict([ (ax,f(self.panel.loc[ax])) for ax in self.panel.items ]))
