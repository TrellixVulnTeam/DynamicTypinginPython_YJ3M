commit f4833211199aa4e340eae396572aef3c59eb2bea
Author: luzpaz <luzpaz@users.noreply.github.com>
Date:   Mon Jan 29 09:14:33 2018 -0500

    Misc typos (#19430)
    
    Found via `codespell -q 3`

diff --git a/asv_bench/benchmarks/replace.py b/asv_bench/benchmarks/replace.py
index 6330a2b36..41208125e 100644
--- a/asv_bench/benchmarks/replace.py
+++ b/asv_bench/benchmarks/replace.py
@@ -44,15 +44,15 @@ class Convert(object):
 
     goal_time = 0.5
     params = (['DataFrame', 'Series'], ['Timestamp', 'Timedelta'])
-    param_names = ['contructor', 'replace_data']
+    param_names = ['constructor', 'replace_data']
 
-    def setup(self, contructor, replace_data):
+    def setup(self, constructor, replace_data):
         N = 10**3
         data = {'Series': pd.Series(np.random.randint(N, size=N)),
                 'DataFrame': pd.DataFrame({'A': np.random.randint(N, size=N),
                                            'B': np.random.randint(N, size=N)})}
         self.to_replace = {i: getattr(pd, replace_data) for i in range(N)}
-        self.data = data[contructor]
+        self.data = data[constructor]
 
-    def time_replace(self, contructor, replace_data):
+    def time_replace(self, constructor, replace_data):
         self.data.replace(self.to_replace)
diff --git a/asv_bench/benchmarks/rolling.py b/asv_bench/benchmarks/rolling.py
index 45142c53d..59cf7d090 100644
--- a/asv_bench/benchmarks/rolling.py
+++ b/asv_bench/benchmarks/rolling.py
@@ -12,14 +12,14 @@ class Methods(object):
               ['int', 'float'],
               ['median', 'mean', 'max', 'min', 'std', 'count', 'skew', 'kurt',
                'sum', 'corr', 'cov'])
-    param_names = ['contructor', 'window', 'dtype', 'method']
+    param_names = ['constructor', 'window', 'dtype', 'method']
 
-    def setup(self, contructor, window, dtype, method):
+    def setup(self, constructor, window, dtype, method):
         N = 10**5
         arr = np.random.random(N).astype(dtype)
-        self.roll = getattr(pd, contructor)(arr).rolling(window)
+        self.roll = getattr(pd, constructor)(arr).rolling(window)
 
-    def time_rolling(self, contructor, window, dtype, method):
+    def time_rolling(self, constructor, window, dtype, method):
         getattr(self.roll, method)()
 
 
@@ -30,12 +30,12 @@ class Quantile(object):
               [10, 1000],
               ['int', 'float'],
               [0, 0.5, 1])
-    param_names = ['contructor', 'window', 'dtype', 'percentile']
+    param_names = ['constructor', 'window', 'dtype', 'percentile']
 
-    def setup(self, contructor, window, dtype, percentile):
+    def setup(self, constructor, window, dtype, percentile):
         N = 10**5
         arr = np.random.random(N).astype(dtype)
-        self.roll = getattr(pd, contructor)(arr).rolling(window)
+        self.roll = getattr(pd, constructor)(arr).rolling(window)
 
-    def time_quantile(self, contructor, window, dtype, percentile):
+    def time_quantile(self, constructor, window, dtype, percentile):
         self.roll.quantile(percentile)
diff --git a/doc/source/api.rst b/doc/source/api.rst
index ddd093279..44f87aa3e 100644
--- a/doc/source/api.rst
+++ b/doc/source/api.rst
@@ -2500,7 +2500,7 @@ Scalar introspection
 Extensions
 ----------
 
-These are primarily intented for library authors looking to extend pandas
+These are primarily intended for library authors looking to extend pandas
 objects.
 
 .. currentmodule:: pandas
diff --git a/doc/source/io.rst b/doc/source/io.rst
index 4199f1615..60dc89f8f 100644
--- a/doc/source/io.rst
+++ b/doc/source/io.rst
@@ -2675,7 +2675,7 @@ file, and the ``sheet_name`` indicating which sheet to parse.
 +++++++++++++++++++
 
 To facilitate working with multiple sheets from the same file, the ``ExcelFile``
-class can be used to wrap the file and can be be passed into ``read_excel``
+class can be used to wrap the file and can be passed into ``read_excel``
 There will be a performance benefit for reading multiple sheets as the file is
 read into memory only once.
 
diff --git a/doc/sphinxext/numpydoc/tests/test_docscrape.py b/doc/sphinxext/numpydoc/tests/test_docscrape.py
index b682504e1..b412124d7 100755
--- a/doc/sphinxext/numpydoc/tests/test_docscrape.py
+++ b/doc/sphinxext/numpydoc/tests/test_docscrape.py
@@ -42,7 +42,7 @@ doc_txt = '''\
   -------
   out : ndarray
       The drawn samples, arranged according to `shape`.  If the
-      shape given is (m,n,...), then the shape of `out` is is
+      shape given is (m,n,...), then the shape of `out` is
       (m,n,...,N).
 
       In other words, each entry ``out[i,j,...,:]`` is an N-dimensional
@@ -222,7 +222,7 @@ Returns
 -------
 out : ndarray
     The drawn samples, arranged according to `shape`.  If the
-    shape given is (m,n,...), then the shape of `out` is is
+    shape given is (m,n,...), then the shape of `out` is
     (m,n,...,N).
 
     In other words, each entry ``out[i,j,...,:]`` is an N-dimensional
@@ -340,7 +340,7 @@ of the one-dimensional normal distribution to higher dimensions.
     **out** : ndarray
 
         The drawn samples, arranged according to `shape`.  If the
-        shape given is (m,n,...), then the shape of `out` is is
+        shape given is (m,n,...), then the shape of `out` is
         (m,n,...,N).
 
         In other words, each entry ``out[i,j,...,:]`` is an N-dimensional
diff --git a/pandas/_libs/tslibs/timedeltas.pyx b/pandas/_libs/tslibs/timedeltas.pyx
index 1e6ea7794..37693068e 100644
--- a/pandas/_libs/tslibs/timedeltas.pyx
+++ b/pandas/_libs/tslibs/timedeltas.pyx
@@ -897,7 +897,7 @@ class Timedelta(_Timedelta):
     Represents a duration, the difference between two dates or times.
 
     Timedelta is the pandas equivalent of python's ``datetime.timedelta``
-    and is interchangable with it in most cases.
+    and is interchangeable with it in most cases.
 
     Parameters
     ----------
diff --git a/pandas/_libs/tslibs/timezones.pyx b/pandas/_libs/tslibs/timezones.pyx
index c22e0b8e5..215ae9ce0 100644
--- a/pandas/_libs/tslibs/timezones.pyx
+++ b/pandas/_libs/tslibs/timezones.pyx
@@ -295,7 +295,7 @@ cpdef bint tz_compare(object start, object end):
     timezones. For example
     `<DstTzInfo 'Europe/Paris' LMT+0:09:00 STD>` and
     `<DstTzInfo 'Europe/Paris' CET+1:00:00 STD>` are essentially same
-    timezones but aren't evaluted such, but the string representation
+    timezones but aren't evaluated such, but the string representation
     for both of these is `'Europe/Paris'`.
 
     This exists only to add a notion of equality to pytz-style zones
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 7328cd336..788b236b0 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -4115,7 +4115,7 @@ class DataFrame(NDFrame):
                 series[this_mask] = fill_value
                 otherSeries[other_mask] = fill_value
 
-            # if we have different dtypes, possibily promote
+            # if we have different dtypes, possibly promote
             new_dtype = this_dtype
             if not is_dtype_equal(this_dtype, other_dtype):
                 new_dtype = find_common_type([this_dtype, other_dtype])
diff --git a/pandas/core/indexes/datetimelike.py b/pandas/core/indexes/datetimelike.py
index f43c6dc56..8e77c7a7f 100644
--- a/pandas/core/indexes/datetimelike.py
+++ b/pandas/core/indexes/datetimelike.py
@@ -332,7 +332,7 @@ class DatetimeIndexOpsMixin(object):
     @cache_readonly
     def inferred_freq(self):
         """
-        Trys to return a string representing a frequency guess,
+        Tryies to return a string representing a frequency guess,
         generated by infer_freq.  Returns None if it can't autodetect the
         frequency.
         """
diff --git a/pandas/core/sparse/frame.py b/pandas/core/sparse/frame.py
index 99bf0d5b7..91dc44e3f 100644
--- a/pandas/core/sparse/frame.py
+++ b/pandas/core/sparse/frame.py
@@ -120,7 +120,7 @@ class SparseDataFrame(DataFrame):
             if dtype is not None:
                 mgr = mgr.astype(dtype)
         else:
-            msg = ('SparseDataFrame called with unkown type "{data_type}" '
+            msg = ('SparseDataFrame called with unknown type "{data_type}" '
                    'for data argument')
             raise TypeError(msg.format(data_type=type(data).__name__))
 
diff --git a/pandas/core/sparse/series.py b/pandas/core/sparse/series.py
index 4e207f9d1..1c23527cf 100644
--- a/pandas/core/sparse/series.py
+++ b/pandas/core/sparse/series.py
@@ -493,7 +493,7 @@ class SparseSeries(Series):
         values = self.to_dense()
 
         # if the label doesn't exist, we will create a new object here
-        # and possibily change the index
+        # and possibly change the index
         new_values = values._set_value(label, value, takeable=takeable)
         if new_values is not None:
             values = new_values
diff --git a/pandas/core/strings.py b/pandas/core/strings.py
index 5c31b9a56..12c7feb5f 100644
--- a/pandas/core/strings.py
+++ b/pandas/core/strings.py
@@ -1395,7 +1395,7 @@ class StringMethods(NoNewAttributesMixin):
         elif isinstance(data, Index):
             # can't use ABCIndex to exclude non-str
 
-            # see scc/inferrence.pyx which can contain string values
+            # see src/inference.pyx which can contain string values
             allowed_types = ('string', 'unicode', 'mixed', 'mixed-integer')
             if data.inferred_type not in allowed_types:
                 message = ("Can only use .str accessor with string values "
diff --git a/pandas/core/util/hashing.py b/pandas/core/util/hashing.py
index 0c82773b7..7edb5b16c 100644
--- a/pandas/core/util/hashing.py
+++ b/pandas/core/util/hashing.py
@@ -210,7 +210,7 @@ def _hash_categorical(c, encoding, hash_key):
 
     # we have uint64, as we don't directly support missing values
     # we don't want to use take_nd which will coerce to float
-    # instead, directly construt the result with a
+    # instead, directly construct the result with a
     # max(np.uint64) as the missing value indicator
     #
     # TODO: GH 15362
diff --git a/pandas/io/formats/format.py b/pandas/io/formats/format.py
index 2293032eb..bca0b64cb 100644
--- a/pandas/io/formats/format.py
+++ b/pandas/io/formats/format.py
@@ -1961,7 +1961,7 @@ class FloatArrayFormatter(GenericArrayFormatter):
     def get_result_as_array(self):
         """
         Returns the float values converted into strings using
-        the parameters given at initalisation, as a numpy array
+        the parameters given at initialisation, as a numpy array
         """
 
         if self.formatter is not None:
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 106823199..5376473f8 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -3763,7 +3763,7 @@ class WORMTable(Table):
 class LegacyTable(Table):
 
     """ an appendable table: allow append/query/delete operations to a
-          (possibily) already existing appendable table this table ALLOWS
+          (possibly) already existing appendable table this table ALLOWS
           append (but doesn't require them), and stores the data in a format
           that can be easily searched
 
diff --git a/pandas/tests/categorical/test_constructors.py b/pandas/tests/categorical/test_constructors.py
index b29d75bed..6cc34770a 100644
--- a/pandas/tests/categorical/test_constructors.py
+++ b/pandas/tests/categorical/test_constructors.py
@@ -382,7 +382,7 @@ class TestCategoricalConstructors(object):
                                ordered=True)
         tm.assert_categorical_equal(result, expected)
 
-    def test_contructor_from_categorical_string(self):
+    def test_constructor_from_categorical_string(self):
         values = Categorical(['a', 'b', 'd'])
         # use categories, ordered
         result = Categorical(values, categories=['a', 'b', 'c'], ordered=True,
diff --git a/pandas/tests/frame/test_constructors.py b/pandas/tests/frame/test_constructors.py
index 8b57e96e6..b24ae2216 100644
--- a/pandas/tests/frame/test_constructors.py
+++ b/pandas/tests/frame/test_constructors.py
@@ -543,7 +543,7 @@ class TestDataFrameConstructors(TestData):
         tm.assert_frame_equal(result, df)
 
     def _check_basic_constructor(self, empty):
-        # mat: 2d matrix with shpae (3, 2) to input. empty - makes sized
+        # mat: 2d matrix with shape (3, 2) to input. empty - makes sized
         # objects
         mat = empty((2, 3), dtype=float)
         # 2-D input
diff --git a/pandas/tests/io/formats/test_format.py b/pandas/tests/io/formats/test_format.py
index b277d8256..e0ce27de5 100644
--- a/pandas/tests/io/formats/test_format.py
+++ b/pandas/tests/io/formats/test_format.py
@@ -2531,7 +2531,7 @@ class TestDatetimeIndexFormat(object):
             [datetime(2013, 1, 1), pd.NaT], utc=True).format()
         assert formatted[0] == "2013-01-01 00:00:00+00:00"
 
-    def test_date_explict_date_format(self):
+    def test_date_explicit_date_format(self):
         formatted = pd.to_datetime([datetime(2003, 2, 1), pd.NaT]).format(
             date_format="%m-%d-%Y", na_rep="UT")
         assert formatted[0] == "02-01-2003"
diff --git a/pandas/tests/series/test_analytics.py b/pandas/tests/series/test_analytics.py
index f2b7c20b7..0e6e44e83 100644
--- a/pandas/tests/series/test_analytics.py
+++ b/pandas/tests/series/test_analytics.py
@@ -43,7 +43,7 @@ class TestSeriesAnalytics(TestData):
             result = getattr(s, method)()
             assert result == unit
 
-            # Explict
+            # Explicit
             result = getattr(s, method)(min_count=0)
             assert result == unit
 
diff --git a/pandas/tests/series/test_operators.py b/pandas/tests/series/test_operators.py
index 7505e6b0c..38e5753d1 100644
--- a/pandas/tests/series/test_operators.py
+++ b/pandas/tests/series/test_operators.py
@@ -1163,7 +1163,7 @@ class TestTimedeltaSeriesArithmetic(object):
                                        ('NCC1701D', 'NCC1701D', 'NCC1701D')])
     def test_td64_series_with_tdi(self, names):
         # GH#17250 make sure result dtype is correct
-        # GH#19043 make sure names are propogated correctly
+        # GH#19043 make sure names are propagated correctly
         tdi = pd.TimedeltaIndex(['0 days', '1 day'], name=names[0])
         ser = Series([Timedelta(hours=3), Timedelta(hours=4)], name=names[1])
         expected = Series([Timedelta(hours=3), Timedelta(days=1, hours=4)],
diff --git a/pandas/tests/sparse/frame/test_frame.py b/pandas/tests/sparse/frame/test_frame.py
index 2b589ebd4..0b7948cc3 100644
--- a/pandas/tests/sparse/frame/test_frame.py
+++ b/pandas/tests/sparse/frame/test_frame.py
@@ -218,7 +218,7 @@ class TestSparseDataFrame(SharedWithSparse):
         class Unknown:
             pass
         with pytest.raises(TypeError,
-                           message='SparseDataFrame called with unkown type '
+                           message='SparseDataFrame called with unknown type '
                                    '"Unknown" for data argument'):
             SparseDataFrame(Unknown())
 
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 941bdcbc8..0009e26f8 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -2401,7 +2401,7 @@ def assert_produces_warning(expected_warning=Warning, filter_level="always",
         into errors.
         Valid values are:
 
-        * "error" - turns matching warnings into exeptions
+        * "error" - turns matching warnings into exceptions
         * "ignore" - discard the warning
         * "always" - always emit a warning
         * "default" - print the warning the first time it is generated
