commit 915162e86c726f0734f1f8506a8f5244c8960c7e
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Nov 6 11:38:54 2012 -0500

    TST: more misc test coverage

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index fb752c97b..ffc220fd7 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -4660,7 +4660,7 @@ class DataFrame(NDFrame):
         if self._is_mixed_type:
             bool_data = self._data.get_bool_data()
             return DataFrame(bool_data, copy=False)
-        else:
+        else:  # pragma: no cover
             if self.values.dtype == np.bool_:
                 return self
             else:
@@ -4896,7 +4896,8 @@ class DataFrame(NDFrame):
         if isinstance(cond, np.ndarray):
             if cond.shape != self.shape:
                 raise ValueError('Array onditional must be same shape as self')
-            cond = self._constructor(cond, index=self.index, columns=self.columns)
+            cond = self._constructor(cond, index=self.index,
+                                     columns=self.columns)
         if cond.shape != self.shape:
             cond = cond.reindex(self.index, columns=self.columns)
             cond = cond.fillna(False)
diff --git a/pandas/core/strings.py b/pandas/core/strings.py
index 58825dc81..66897360b 100644
--- a/pandas/core/strings.py
+++ b/pandas/core/strings.py
@@ -6,89 +6,6 @@ from pandas.core.common import isnull
 from pandas.core.series import Series
 import re
 import pandas.lib as lib
-import pandas.core.common as com
-import operator
-
-
-class repeat(object):
-    def __init__(self, obj):
-        self.obj = obj
-
-    def __getitem__(self, i):
-        return self.obj
-
-
-class azip(object):
-    def __init__(self, *args):
-        self.cols = []
-        for a in args:
-            if np.isscalar(a):
-                self.cols.append(repeat(a))
-            else:
-                self.cols.append(a)
-
-    def __getitem__(self, i):
-        return [col[i] for col in self.cols]
-
-
-def map_iter_args(arr, f, otherargs, n_otherargs, required, n_results):
-    '''
-    Substitute for np.vectorize with pandas-friendly dtype inference
-
-    Parameters
-    ----------
-    arr : ndarray
-    f : function
-
-    Returns
-    -------
-    mapped : ndarray
-    '''
-    notnull = com.notnull
-
-    n = len(arr)
-    result = np.empty((n, n_results), dtype=object)
-    for i, val in enumerate(arr):
-        args = otherargs[i]
-        if notnull(val) and all(notnull(args[r]) for r in required):
-            result[i] = f(val, *args)
-        else:
-            result[i] = [np.nan] * n_results
-
-    return [lib.maybe_convert_objects(col, try_float=0) for col in result.T]
-
-
-def auto_map(arr, f, otherargs, n_results=1, required='all'):
-    from pandas.core.series import Series
-
-    if all(np.isscalar(a) for a in otherargs):
-        res = lib.map_infer(arr, lambda v: f(v, *otherargs))
-        return Series(res, index=arr.index, copy=False)
-
-    n_otherargs = len(otherargs)
-    if required == 'all':
-        required = list(range(n_otherargs))
-    res = map_iter_args(arr, f, azip(*otherargs), n_otherargs,
-                        required, n_results)
-    res = [Series(col, index=arr.index, copy=False) for col in res]
-    if n_results == 1:
-        return res[0]
-    return res
-
-
-def mapwrap(f, n_results_default=1, required='all'):
-    # @wraps(f)
-
-    def wrapped(arr, n_results=None, *otherargs):
-        n_results = n_results or n_results_default
-        return auto_map(arr, f, otherargs, n_results, required)
-
-    return wrapped
-
-startswith = mapwrap(lambda x, p: x.startswith(p))
-contains = mapwrap(lambda x, p: x.__contains__(p))
-upper = mapwrap(lambda x: x.upper())
-lower = mapwrap(lambda x: x.lower())
 
 
 def _get_array_list(arr, others):
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index e32cde3a0..dd38e1147 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -5151,8 +5151,13 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         other1 = df + 1
         rs = df.where(cond, other1)
+        rs2 = df.where(cond.values, other1)
         for k, v in rs.iteritems():
             assert_series_equal(v, np.where(cond[k], df[k], other1[k]))
+        assert_frame_equal(rs, rs2)
+
+        # it works!
+        rs = df.where(cond[1:], other1)
 
         other2 = (df + 1).values
         rs = df.where(cond, other2)
@@ -7274,6 +7279,33 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         self._check_bool_op('any', np.any, has_skipna=True, has_bool_only=True)
         self._check_bool_op('all', np.all, has_skipna=True, has_bool_only=True)
 
+
+        df = DataFrame(randn(10, 4)) > 0
+        df.any(1)
+        df.all(1)
+        df.any(1, bool_only=True)
+        df.all(1, bool_only=True)
+
+        # skip pathological failure cases
+        # class CantNonzero(object):
+
+        #     def __nonzero__(self):
+        #         raise ValueError
+
+        # df[4] = CantNonzero()
+
+        # it works!
+        # df.any(1)
+        # df.all(1)
+        # df.any(1, bool_only=True)
+        # df.all(1, bool_only=True)
+
+        # df[4][4] = np.nan
+        # df.any(1)
+        # df.all(1)
+        # df.any(1, bool_only=True)
+        # df.all(1, bool_only=True)
+
     def test_consolidate_datetime64(self):
         # numpy vstack bug
 
