commit 2d9e25a8d102894198314d763beddafe5a614357
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Dec 7 11:16:45 2012 -0500

    TST: remove some unused imports. add vbench for dataframe column insertion

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 7b7271a52..8b3698146 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -462,8 +462,6 @@ def diff(arr, n, axis=0):
 
     out_arr = np.empty(arr.shape, dtype=dtype)
 
-    get_slice = lambda x: slice(None, x) if n >= 0 else slice(x, None)
-
     na_indexer = [slice(None)] * arr.ndim
     na_indexer[axis] = slice(None, n) if n >= 0 else slice(n, None)
     out_arr[tuple(na_indexer)] = np.nan
@@ -776,7 +774,7 @@ def iterpairs(seq):
     # input may not be sliceable
     seq_it = iter(seq)
     seq_it_next = iter(seq)
-    _ = next(seq_it_next)
+    next(seq_it_next)
 
     return itertools.izip(seq_it, seq_it_next)
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 1a5f582eb..bc9421c8a 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2899,8 +2899,6 @@ class DataFrame(NDFrame):
                                        subset=subset, axis=ax)
             return result
 
-        axis_name = self._get_axis_name(axis)
-
         if axis == 0:
             agg_axis = 1
         elif axis == 1:
@@ -4495,7 +4493,6 @@ class DataFrame(NDFrame):
 
         for column in numdata.columns:
             series = self[column]
-            ser_desc = series.describe()
             destat.append([series.count(), series.mean(), series.std(),
                            series.min(), series.quantile(lb), series.median(),
                            series.quantile(ub), series.max()])
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 57914aff3..1351c21ab 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -1,11 +1,9 @@
 # pylint: disable=W0231,E1101
-from datetime import timedelta
 
 import numpy as np
 
 from pandas.core.index import MultiIndex
 from pandas.tseries.index import DatetimeIndex
-from pandas.tseries.offsets import DateOffset
 import pandas.core.common as com
 import pandas.lib as lib
 
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 88ca0a7ea..151629c61 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -2002,7 +2002,6 @@ class PanelGroupBy(NDFrameGroupBy):
     def _aggregate_item_by_item(self, func, *args, **kwargs):
         obj = self._obj_with_exclusions
         result = {}
-        cannot_agg = []
 
         if self.axis > 0:
             for item in obj:
diff --git a/pandas/core/index.py b/pandas/core/index.py
index bc4f72f14..9bea8c541 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -9,7 +9,6 @@ import numpy as np
 import pandas.tslib as tslib
 import pandas.lib as lib
 import pandas.algos as _algos
-import pandas.hashtable as _hash
 import pandas.index as _index
 from pandas.lib import Timestamp
 
@@ -141,12 +140,6 @@ class Index(np.ndarray):
     def _shallow_copy(self):
         return self.view()
 
-    def __repr__(self):
-        if len(self) > 6 and len(self) > np.get_printoptions()['threshold']:
-            data = self[:3].tolist() + ["..."] + self[-3:].tolist()
-        else:
-            data = self
-
     def __str__(self):
         """
         Return a string representation for a particular Index
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 435641b70..a4e393699 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -859,7 +859,7 @@ class BlockManager(object):
 
     def _consolidate_inplace(self):
         self.blocks = _consolidate(self.blocks, self.items)
-        self._is_consolidated = true
+        self._is_consolidated = True
         self._known_consolidated = True
 
     def get(self, item):
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index f3c8289f3..fa469242f 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -7,7 +7,8 @@ import operator
 import sys
 import numpy as np
 from pandas.core.common import (PandasError, _mut_exclusive,
-                                _try_sort, _default_index, _infer_dtype)
+                                _try_sort, _default_index, _infer_dtype,
+                                notnull)
 from pandas.core.categorical import Factor
 from pandas.core.index import (Index, MultiIndex, _ensure_index,
                                _get_combined_index)
@@ -444,7 +445,7 @@ class Panel(NDFrame):
 
     def _indexed_same(self, other):
         return all([ getattr(self,a).equals(getattr(other,a)) for a in self._AXIS_ORDERS ])
-  
+
     def _compare_constructor(self, other, func):
         if not self._indexed_same(other):
             raise Exception('Can only compare identically-labeled '
@@ -468,7 +469,7 @@ class Panel(NDFrame):
 
     def __invert__(self):
         return -1 * self
-    
+
     # Comparison methods
     __eq__ = _comp_method(operator.eq, '__eq__')
     __ne__ = _comp_method(operator.ne, '__ne__')
diff --git a/pandas/core/panel4d.py b/pandas/core/panel4d.py
index fe99d6c0e..649739f3f 100644
--- a/pandas/core/panel4d.py
+++ b/pandas/core/panel4d.py
@@ -2,38 +2,42 @@
 
 from pandas.core.panel import Panel
 from pandas.core import panelnd
-import pandas.lib as lib
 
 Panel4D = panelnd.create_nd_panel_factory(
-    klass_name   = 'Panel4D', 
-    axis_orders  = [ 'labels','items','major_axis','minor_axis'], 
-    axis_slices  = { 'labels' : 'labels', 'items' : 'items', 'major_axis' : 'major_axis', 'minor_axis' : 'minor_axis' },
+    klass_name   = 'Panel4D',
+    axis_orders  = [ 'labels','items','major_axis','minor_axis'],
+    axis_slices  = { 'labels' : 'labels', 'items' : 'items',
+                     'major_axis' : 'major_axis',
+                     'minor_axis' : 'minor_axis' },
     slicer       = Panel,
     axis_aliases = { 'major' : 'major_axis', 'minor' : 'minor_axis' },
     stat_axis    = 2)
 
 
 
-def panel4d_init(self, data=None, labels=None, items=None, major_axis=None, minor_axis=None, copy=False, dtype=None):
+def panel4d_init(self, data=None, labels=None, items=None, major_axis=None,
+                 minor_axis=None, copy=False, dtype=None):
     """
     Represents a 4 dimensonal structured
-    
+
     Parameters
     ----------
     data : ndarray (labels x items x major x minor), or dict of Panels
-    
+
     labels : Index or array-like : axis=0
     items  : Index or array-like : axis=1
     major_axis : Index or array-like: axis=2
     minor_axis : Index or array-like: axis=3
-    
+
     dtype : dtype, default None
     Data type to force, otherwise infer
     copy : boolean, default False
     Copy data from inputs. Only affects DataFrame / 2d ndarray input
     """
-    self._init_data( data=data, labels=labels, items=items, major_axis=major_axis, minor_axis=minor_axis,
-                     copy=copy, dtype=dtype)
+    self._init_data(data=data, labels=labels, items=items,
+                    major_axis=major_axis, minor_axis=minor_axis,
+                    copy=copy, dtype=dtype)
+
 Panel4D.__init__ = panel4d_init
 
 
diff --git a/pandas/core/reshape.py b/pandas/core/reshape.py
index 99c5034dd..7ad9147fa 100644
--- a/pandas/core/reshape.py
+++ b/pandas/core/reshape.py
@@ -13,7 +13,6 @@ from pandas.core.common import notnull, _ensure_platform_int
 from pandas.core.groupby import (get_group_index, _compress_group_index,
                                  decons_group_index)
 import pandas.core.common as com
-import pandas.lib as lib
 import pandas.algos as algos
 
 
@@ -560,6 +559,7 @@ def melt(frame, id_vars=None, value_vars=None):
     mcolumns = id_vars + ['variable', 'value']
 
     mdata['value'] = frame.values.ravel('F')
+
     mdata['variable'] = np.asarray(frame.columns).repeat(N)
     return DataFrame(mdata, columns=mcolumns)
 
diff --git a/pandas/core/strings.py b/pandas/core/strings.py
index 469804ecc..4d9e4788c 100644
--- a/pandas/core/strings.py
+++ b/pandas/core/strings.py
@@ -1,6 +1,5 @@
 import numpy as np
 
-from functools import wraps
 from itertools import izip
 from pandas.core.common import isnull
 from pandas.core.series import Series
diff --git a/vb_suite/frame_methods.py b/vb_suite/frame_methods.py
index 2c56e4523..034eac0a8 100644
--- a/vb_suite/frame_methods.py
+++ b/vb_suite/frame_methods.py
@@ -98,3 +98,18 @@ df = DataFrame(randn(100, 10))
 
 frame_to_string_floats = Benchmark('df.to_string()', setup,
                                    start_date=datetime(2010, 6, 1))
+
+# insert many columns
+
+setup = common_setup + """
+N = 1000
+
+def f(K=500):
+    df = DataFrame(index=range(N))
+    new_col = np.random.randn(N)
+    for i in range(K):
+        df[i] = new_col
+"""
+
+frame_insert_500_columns = Benchmark('f()', setup,
+                                     start_date=datetime(2011, 1, 1))
