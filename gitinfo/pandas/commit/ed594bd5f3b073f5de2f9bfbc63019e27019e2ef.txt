commit ed594bd5f3b073f5de2f9bfbc63019e27019e2ef
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jun 6 19:00:24 2011 +0200

    boolean indexing work, needs to be part of larger refactor

diff --git a/RELEASE.rst b/RELEASE.rst
index 6741d22dc..c7a1adac1 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -32,9 +32,10 @@ Release notes
 * `DataFrame.quantile`, `Series.quantile`
 * `DataFrame.describe`
 * Fancy indexing
+* `pytz` / tzinfo support in `DateRange`
+  * `tz_localize`, `tz_normalize`, and `tz_validate` methods added
 
-**Improvements**
-
+**Improvements to existing features**
 
 **API Changes**
 
diff --git a/pandas/core/daterange.py b/pandas/core/daterange.py
index dd74b0f94..f09178a07 100644
--- a/pandas/core/daterange.py
+++ b/pandas/core/daterange.py
@@ -285,7 +285,11 @@ class DateRange(Index):
 
     def tz_normalize(self, tz):
         """
-        Convert UTC DateRange
+        Convert DateRange from one time zone to another (using pytz)
+
+        Returns
+        -------
+        normalized : DateRange
         """
         new_dates = np.array([tz.normalize(x) for x in self])
         new_dates = new_dates.view(DateRange)
@@ -293,6 +297,20 @@ class DateRange(Index):
         new_dates.tzinfo = tz
         return new_dates
 
+    def tz_localize(self, tz):
+        """
+        Localize tzinfo-naive DateRange to given time zone (using pytz)
+
+        Returns
+        -------
+        localized : DateRange
+        """
+        new_dates = np.array([tz.localize(x) for x in self])
+        new_dates = new_dates.view(DateRange)
+        new_dates.offset = self.offset
+        new_dates.tzinfo = tz
+        return new_dates
+
     def tz_validate(self):
         """
         For a localized time zone, verify that there are no DST ambiguities
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 33a971e3d..21ec376f8 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -293,11 +293,27 @@ class Series(np.ndarray, PandasGeneric):
         # TODO: [slice(0, 5, None)] will break if you convert to ndarray,
         # e.g. as requested by np.median
 
+        def _index_with(indexer):
+            return Series(values[indexer], index=self.index[indexer])
+
+        # special handling of boolean data with NAs stored in object
+        # arrays. Sort of an elaborate hack since we can't represent boolean
+        # NA. Hmm
+        if isinstance(key, np.ndarray) and key.dtype == np.object_:
+            mask = isnull(key)
+            if mask.any():
+                raise ValueError('cannot index with vector containing '
+                                 'NA / NaN values')
+
+            if set([True, False]).issubset(set(key)):
+                key = np.asarray(key, dtype=bool)
+                return _index_with(key)
+
         try:
-            return Series(values[key], index=self.index[key])
+            return _index_with(key)
         except Exception:
             key = np.asarray(key)
-            return Series(values[key], index=self.index[key])
+            return _index_with(key)
 
     def get(self, key, default=None):
         """
@@ -358,6 +374,20 @@ class Series(np.ndarray, PandasGeneric):
                 raise Exception('can only boolean index with like-indexed '
                                 'Series or raw ndarrays')
 
+        # special handling of boolean data with NAs stored in object
+        # arrays. Sort of an elaborate hack since we can't represent boolean
+        # NA. Hmm
+        if isinstance(key, np.ndarray) and key.dtype == np.object_:
+            mask = isnull(key)
+            if mask.any():
+                raise ValueError('cannot index with vector containing '
+                                 'NA / NaN values')
+
+            if set([True, False]).issubset(set(key)):
+                key = np.asarray(key, dtype=bool)
+                values[key] = value
+                return
+
         values[key] = value
 
     def __setslice__(self, i, j, value):
diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index a95572ae9..eccfb6936 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -216,6 +216,9 @@ class CheckIndexing(object):
     def test_setitem_fancy_boolean(self):
         f = self.frame
 
+    def test_getitem_boolean_missing(self):
+        pass
+
 class TestDataFrame(unittest.TestCase, CheckIndexing):
     klass = DataFrame
 
diff --git a/pandas/core/tests/test_matrix.py b/pandas/core/tests/test_matrix.py
index 4f15d4b60..773d49d36 100644
--- a/pandas/core/tests/test_matrix.py
+++ b/pandas/core/tests/test_matrix.py
@@ -213,7 +213,7 @@ class TestDataMatrix(test_frame.TestDataFrame):
         values = self.mixed_frame.asMatrix()
         self.assertEqual(values.shape[1], len(self.mixed_frame.cols()))
 
-    def test_reindex_bool(self):
+    def test_reindex_boolean(self):
         frame = DataMatrix(np.ones((10, 2), dtype=bool),
                            index=np.arange(0, 20, 2),
                            columns=[0, 2])
diff --git a/pandas/core/tests/test_series.py b/pandas/core/tests/test_series.py
index 27ea99a11..a244ac674 100644
--- a/pandas/core/tests/test_series.py
+++ b/pandas/core/tests/test_series.py
@@ -7,7 +7,7 @@ import unittest
 
 import numpy as np
 
-from pandas.core.api import (Index, Series, TimeSeries, DataFrame, isnull)
+from pandas import Index, Series, TimeSeries, DataFrame, isnull
 import pandas.core.datetools as datetools
 from pandas.util.testing import assert_series_equal
 import pandas.util.testing as common
@@ -152,13 +152,35 @@ class TestSeries(unittest.TestCase):
 
     def test_getitem_boolean(self):
         s = self.series
-        vec = s > s.median()
+        mask = s > s.median()
 
         # passing list is OK
-        result = s[list(vec)]
-        expected = s[vec]
+        result = s[list(mask)]
+        expected = s[mask]
         assert_series_equal(result, expected)
-        self.assert_(np.array_equal(result.index, s.index[vec]))
+        self.assert_(np.array_equal(result.index, s.index[mask]))
+
+    def test_getitem_boolean_object(self):
+        # using column from DataMatrix
+        s = self.series
+        mask = s > s.median()
+        omask = mask.astype(object)
+
+        # getitem
+        result = s[omask]
+        expected = s[mask]
+        assert_series_equal(result, expected)
+
+        # setitem
+        cop = s.copy()
+        cop[omask] = 5
+        s[mask] = 5
+        assert_series_equal(cop, s)
+
+        # nans raise exception
+        omask[5:10] = np.nan
+        self.assertRaises(Exception, s.__getitem__, omask)
+        self.assertRaises(Exception, s.__setitem__, omask, 5)
 
     def test_getitem_setitem_boolean_corner(self):
         ts = self.ts
