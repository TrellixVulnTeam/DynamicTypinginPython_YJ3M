commit 4218857a7f3012b877ce6c06c996d0f8f4bf21db
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri May 13 23:46:46 2011 -0400

    correct pickling of sparse frame/panel. setitem/delitem for sparse panel

diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 56fc9c678..56da7c2c6 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -173,14 +173,6 @@ class WidePanel(Panel, Groupable):
         self.factors = {}
         self.values = values
 
-    def _get_values(self):
-        return self._values
-
-    def _set_values(self, values):
-        self._values = values
-
-    values = property(fget=_get_values, fset=_set_values)
-
     @classmethod
     def _get_axis_number(cls, axis):
         if axis in (0, 1, 2):
@@ -286,11 +278,7 @@ class WidePanel(Panel, Groupable):
         return DataMatrix(mat, index=self.major_axis, columns=self.minor_axis)
 
     def __delitem__(self, key):
-        try:
-            loc = self.items.indexMap[key]
-        except KeyError:
-            raise KeyError('%s not contained in panel data items!' % key)
-
+        loc = self.items.indexMap[key]
         indices = range(loc) + range(loc + 1, len(self.items))
         self.items = self.items[indices]
         self.values = self.values.take(indices, axis=0)
diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index 70d0a1e15..c55251484 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -8,6 +8,7 @@ import numpy as np
 
 import operator
 
+from pandas.core.common import _pickle_array, _unpickle_array
 from pandas.core.index import Index, NULL_INDEX
 from pandas.core.series import Series, TimeSeries, _ensure_index
 from pandas.core.frame import DataFrame, extract_index, try_sort
@@ -592,6 +593,31 @@ class SparseDataFrame(DataFrame):
 
         return sdict, columns, index
 
+    def __getstate__(self):
+        series = dict((k, (v.sp_index, v.sp_values))
+                      for k, v in self.iteritems())
+        columns = _pickle_array(self.columns)
+        index = _pickle_array(self.index)
+
+        return (series, columns, index, self.default_fill_value,
+                self.default_kind)
+
+    def __setstate__(self, state):
+        series, cols, idx, fv, kind = state
+        columns = _unpickle_array(cols)
+        index = _unpickle_array(idx)
+
+        series_dict = {}
+        for col, (sp_index, sp_values) in series.iteritems():
+            series_dict[col] = SparseSeries(sp_values, sparse_index=sp_index,
+                                            fill_value=fv)
+
+        self._series = series_dict
+        self.index = index
+        self.columns = columns
+        self.default_fill_value = fv
+        self.default_kind = kind
+
     def __repr__(self):
         """
         Return a string representation for a particular DataFrame
@@ -818,9 +844,19 @@ def _convert_frames(frames, index, columns, fill_value=nan, kind='block'):
 
 class SparseWidePanel(WidePanel):
     """
+    Sparse version of WidePanel
 
+    Parameters
+    ----------
+    frames : dict of DataFrame objects
+    items : array-like
+    major_axis : array-like
+    minor_axis : array-like
+    default_fill_value : float, default NaN
+    default_kind : {'block', 'integer'}
 
-
+    Notes
+    -----
     """
     def __init__(self, frames, items=None, major_axis=None, minor_axis=None,
                  default_fill_value=nan, default_kind='block'):
@@ -846,8 +882,19 @@ class SparseWidePanel(WidePanel):
         self.minor_axis = minor_axis
 
     @classmethod
-    def from_dict(cls):
-        pass
+    def from_dict(cls, data, intersect=False):
+        return SparseWidePanel(data)
+
+    def to_dense(self):
+        """
+        Convert SparseWidePanel to (dense) WidePanel
+
+        Returns
+        -------
+        dense : WidePanel
+        """
+        return WidePanel(self.values, self.items, self.major_axis,
+                         self.minor_axis)
 
     @property
     def values(self):
@@ -861,26 +908,40 @@ class SparseWidePanel(WidePanel):
         return self._frames[key]
 
     def __setitem__(self, key, value):
-        pass
+        if isinstance(value, DataFrame):
+            value = value.reindex(index=self.major_axis,
+                                  columns=self.minor_axis)
+            if not isinstance(value, SparseDataFrame):
+                value = value.to_sparse(fill_value=self.default_fill_value,
+                                        kind=self.default_kind)
+        else:
+            raise ValueError('only DataFrame objects can be set currently')
 
-    def __delitem__(self, key):
-        pass
+        self._frames[key] = value
 
-    def pop(self, key):
-        pass
+        if key not in self.items:
+            self.items = Index(list(self.items) + [key])
+
+    def __delitem__(self, key):
+        loc = self.items.indexMap[key]
+        indices = range(loc) + range(loc + 1, len(self.items))
+        self.items = self.items[indices]
+        del self._frames[key]
 
     #----------------------------------------------------------------------
     # pickling
 
     def __getstate__(self):
-        pass
+        return (self._frames, _pickle_array(self.items),
+                _pickle_array(self.major_axis), _pickle_array(self.minor_axis))
 
     def __setstate__(self, state):
-        pass
+        frames, items, major, minor = state
 
-    @classmethod
-    def from_dict(cls, data, intersect=False):
-        pass
+        self.items = _unpickle_array(items)
+        self.major_axis = _unpickle_array(major)
+        self.minor_axis = _unpickle_array(minor)
+        self._frames = frames
 
     def copy(self):
         pass
diff --git a/pandas/core/tests/test_panel.py b/pandas/core/tests/test_panel.py
index 8360e414c..6b0fd854c 100644
--- a/pandas/core/tests/test_panel.py
+++ b/pandas/core/tests/test_panel.py
@@ -162,9 +162,13 @@ class TestWidePanel(unittest.TestCase, PanelTests):
 
     def setUp(self):
         self.panel = common.makeWidePanel()
-
         common.add_nans(self.panel)
 
+    def test_values(self):
+        # nothing to test for the moment
+        values = self.panel.values
+        self.panel.values = values
+
     def test_get_axis(self):
         assert(self.panel._get_axis(0) is self.panel.items)
         assert(self.panel._get_axis(1) is self.panel.major_axis)
diff --git a/pandas/core/tests/test_sparse.py b/pandas/core/tests/test_sparse.py
index 446a9d39c..5ff751057 100644
--- a/pandas/core/tests/test_sparse.py
+++ b/pandas/core/tests/test_sparse.py
@@ -1,6 +1,7 @@
 # pylint: disable-msg=E1101,W0612
 
 from unittest import TestCase
+import cPickle as pickle
 import operator
 
 import nose
@@ -10,7 +11,7 @@ import numpy as np
 dec = np.testing.dec
 
 from pandas.util.testing import (assert_almost_equal, assert_series_equal,
-                                 assert_frame_equal)
+                                 assert_frame_equal, assert_panel_equal)
 from numpy.testing import assert_equal
 
 from pandas import Series, DataFrame, DateRange, WidePanel
@@ -84,6 +85,15 @@ def assert_sp_frame_equal(left, right, exact_indices=True):
     for col in right:
         assert(col in left)
 
+def assert_sp_panel_equal(left, right, exact_indices=True):
+    for item, frame in left.iteritems():
+        assert(item in right)
+        # trade-off?
+        assert_sp_frame_equal(frame, right[item], exact_indices=exact_indices)
+
+    for item in right:
+        assert(item in left)
+
 class TestSparseSeries(TestCase):
 
     def setUp(self):
@@ -221,18 +231,19 @@ class TestSparseSeries(TestCase):
         self.assertEquals(self.iseries.kind, 'integer')
 
     def test_pickle(self):
-        import pickle
-
         def _test_roundtrip(series):
             pickled = pickle.dumps(series)
             unpickled = pickle.loads(pickled)
             assert_sp_series_equal(series, unpickled)
             assert_series_equal(series.to_dense(), unpickled.to_dense())
 
-        _test_roundtrip(self.bseries)
-        _test_roundtrip(self.iseries)
-        _test_roundtrip(self.zbseries)
-        _test_roundtrip(self.ziseries)
+        self._check_all(_test_roundtrip)
+
+    def _check_all(self, check_func):
+        check_func(self.bseries)
+        check_func(self.iseries)
+        check_func(self.zbseries)
+        check_func(self.ziseries)
 
     def test_getitem(self):
         def _check_getitem(sp, dense):
@@ -581,6 +592,14 @@ class TestSparseDataFrame(TestCase):
         dres = np.sqrt(self.frame.to_dense())
         assert_frame_equal(res.to_dense(), dres)
 
+    def test_pickle(self):
+        def _test_roundtrip(frame):
+            pickled = pickle.dumps(frame)
+            unpickled = pickle.loads(pickled)
+            assert_sp_frame_equal(frame, unpickled)
+
+        self._check_all(_test_roundtrip)
+
     def test_dense_to_sparse(self):
         df = DataFrame({'A' : [nan, nan, nan, 1, 2],
                         'B' : [1, 2, nan, nan, nan]})
@@ -841,7 +860,13 @@ class TestSparseWidePanel(TestCase):
         self.panel = SparseWidePanel(self.data_dict)
 
     def test_from_dict(self):
-        pass
+        fd = SparseWidePanel.from_dict(self.data_dict)
+        assert_sp_panel_equal(fd, self.panel)
+
+    def test_to_dense(self):
+        dwp = self.panel.to_dense()
+        dwp2 = WidePanel.from_dict(self.data_dict)
+        assert_panel_equal(dwp, dwp2)
 
     def test_to_long(self):
         pass
@@ -855,11 +880,31 @@ class TestSparseWidePanel(TestCase):
     def test_getitem(self):
         pass
 
+    def test_setitem(self):
+        self.panel['item4'] = self.panel['item3']
+        self.panel['item5'] = self.panel['item3'].to_dense()
+
+        assert_sp_frame_equal(self.panel['item4'], self.panel['item3'])
+        assert_sp_frame_equal(self.panel['item5'], self.panel['item3'])
+        assert_almost_equal(self.panel.items, ['item1', 'item2', 'item3',
+                                               'item4', 'item5'])
+
+        self.assertRaises(Exception, self.panel.__setitem__, 'item6', 1)
+
     def test_delitem_pop(self):
-        pass
+        del self.panel['item2']
+        assert_almost_equal(self.panel.items, ['item1', 'item3'])
+        crackle = self.panel['item3']
+        pop = self.panel.pop('item3')
+        self.assert_(pop is crackle)
+        assert_almost_equal(self.panel.items, ['item1'])
+
+        self.assertRaises(KeyError, self.panel.__delitem__, 'item3')
 
     def test_pickle(self):
-        pass
+        pickled = pickle.dumps(self.panel)
+        unpickled = pickle.loads(pickled)
+        assert_sp_panel_equal(self.panel, unpickled)
 
     def test_copy(self):
         pass
@@ -880,16 +925,9 @@ class TestSparseWidePanel(TestCase):
         pass
 
 if __name__ == '__main__':
-    data_dict = {
-        'item1' : panel_data1(),
-        'item2' : panel_data2(),
-        'item3' : panel_data3()
-    }
-    panel = SparseWidePanel(data_dict)
-
-    # import nose
-    # nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
-    #                exit=False)
+    import nose
+    nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
+                   exit=False)
 
     # nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure',
     #                      '--with-profile'],
diff --git a/pandas/lib/bench_sparse.py b/pandas/lib/bench_sparse.py
index e5a78424c..9ed0f6461 100644
--- a/pandas/lib/bench_sparse.py
+++ b/pandas/lib/bench_sparse.py
@@ -28,7 +28,7 @@ is2 = SparseSeries(arr2, kind='integer', index=index)
 s1_dense = s1.to_dense()
 s2_dense = s2.to_dense()
 
-dm = DataMatrix.load('/home/wesm/code/pandas/example')
+dm = DataMatrix.load('/Users/wesm/code/pandas/example')
 
 data = {}
 for col, ser in dm.iteritems():
