commit 81ef5805bdcbb3aa8c5661e06a0a3c19efabc8b5
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Nov 16 03:49:47 2011 -0500

    BUG: fix join op between Index/Int64Index, GH #367

diff --git a/RELEASE.rst b/RELEASE.rst
index 6bea91067..ad739f637 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -123,17 +123,21 @@ pandas 0.5.1
   - Bug fix in reflexive binary addition in Series and DataFrame for
     non-commutative operations (like string concatenation) (GH #353)
   - setupegg.py will invoke Cython (GH #192)
+  - Fix block consolidation bug after inserting column into MultiIndex (GH #366)
+  - Fix bug in join operations between Index and Int64Index (GH #367)
 
 Thanks
 ------
 
 - Marius Cobzarenco
+- Joel Cross
 - Jeff Hammerbacher
 - Adam Klein
 - Jev Kuznetsov
 - Kieran O'Mahony
 - Wouter Overmeire
 - Nathan Pinger
+- Christian Prinoth
 - Chang She
 - Aman Thakral
 - Dieter Vandenbussche
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 8d2e3217b..e8609b9fb 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -525,6 +525,9 @@ class Index(np.ndarray):
 
     def _join_monotonic(self, other, how='left', return_indexers=False):
         this_vals = self.values
+
+        if self.dtype != other.dtype:
+            other = Index(other, dtype=object)
         other_vals = other.values
 
         if how == 'left':
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index c2b0dd9fe..8bb4e6c63 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -519,20 +519,30 @@ class TestInt64Index(unittest.TestCase):
         other = Index([3, 6, 7, 8, 10], dtype=object)
 
         outer = self.index.join(other, how='outer')
+        outer2 = other.join(self.index, how='outer')
         expected = Index([0, 2, 3, 4, 6, 7, 8, 10, 12, 14,
                           16, 18], dtype=object)
+        self.assert_(outer.equals(outer2))
         self.assert_(outer.equals(expected))
 
         inner = self.index.join(other, how='inner')
+        inner2 = other.join(self.index, how='inner')
         expected = Index([6, 8, 10], dtype=object)
+        self.assert_(inner.equals(inner2))
         self.assert_(inner.equals(expected))
 
         left = self.index.join(other, how='left')
         self.assert_(left.equals(self.index))
 
+        left2 = other.join(self.index, how='left')
+        self.assert_(left2.equals(other))
+
         right = self.index.join(other, how='right')
         self.assert_(right.equals(other))
 
+        right2 = other.join(self.index, how='right')
+        self.assert_(right2.equals(self.index))
+
     def test_intersection(self):
         other = Index([1, 2, 3, 4, 5])
         result = self.index.intersection(other)
