commit 8b16192edbf40c0fbe4b0a761256fb49b37621bb
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Sep 25 22:41:21 2012 -0400

    BUG: parser test suite passing, still another couple failers

diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index bd42d8543..b1e1011ea 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -410,7 +410,10 @@ class TextFileReader(object):
     """
 
     def __init__(self, f,
-                 engine='python', delimiter=None, dialect=None,
+                 engine='python',
+                 delimiter=None,
+                 delim_whitespace=False,
+                 dialect=None,
                  names=None, header=0, index_col=None,
                  thousands=None,
                  comment=None,
@@ -435,6 +438,12 @@ class TextFileReader(object):
 
         # Tokenization options
         self.delimiter = delimiter
+        self.delim_whitespace = delim_whitespace
+
+        if delimiter is None and not delim_whitespace:
+            if engine == 'c':
+                print 'Using Python parser to sniff delimiter'
+                engine = 'python'
 
         self.doublequote = doublequote
         self.escapechar = escapechar
@@ -477,6 +486,10 @@ class TextFileReader(object):
 
         self.skip_footer = skip_footer
 
+        # C engine not supported yet
+        if skip_footer > 0 and engine == 'c':
+            engine = 'python'
+
         if com.is_integer(skiprows):
             skiprows = range(skiprows)
         self.skiprows = set() if skiprows is None else set(skiprows)
@@ -1270,6 +1283,8 @@ class PythonParser(ParserBase):
         if self._implicit_index:
             col_len += len(self.index_col)
 
+        assert(self.skip_footer >= 0)
+
         if col_len != zip_len:
             row_num = -1
             i = 0
@@ -1280,9 +1295,8 @@ class PythonParser(ParserBase):
             footers = 0
             if self.skip_footer:
                 footers = self.skip_footer
-                if footers > 0:
-                    footers = footers - self.pos
-            row_num = self.pos - (len(content) - i - footers)
+
+            row_num = self.pos - (len(content) - i + footers)
 
             msg = ('Expecting %d columns, got %d in row %d' %
                    (col_len, zip_len, row_num))
@@ -1336,7 +1350,7 @@ class PythonParser(ParserBase):
         self.buf = []
 
         if self.skip_footer:
-            lines = lines[:self.skip_footer]
+            lines = lines[:-self.skip_footer]
 
         lines = self._check_comments(lines)
         return self._check_thousands(lines)
diff --git a/pandas/io/tests/test_cparser.py b/pandas/io/tests/test_cparser.py
index bec2bc34b..bb9a0e1e4 100644
--- a/pandas/io/tests/test_cparser.py
+++ b/pandas/io/tests/test_cparser.py
@@ -47,32 +47,32 @@ class TestCParser(unittest.TestCase):
         try:
             f = open(self.csv1, 'rb')
             reader = TextReader(f)
-            names, result = reader.read()
+            result = reader.read()
         finally:
             f.close()
 
     def test_string_filename(self):
         reader = TextReader(self.csv1, header=None)
-        names, result = reader.read()
+        result = reader.read()
 
     def test_file_handle_mmap(self):
         try:
             f = open(self.csv1, 'rb')
             reader = TextReader(f, memory_map=True, header=None)
-            names, result = reader.read()
+            result = reader.read()
         finally:
             f.close()
 
     def test_StringIO(self):
         text = open(self.csv1, 'rb').read()
         reader = TextReader(BytesIO(text), header=None)
-        names, result = reader.read()
+        result = reader.read()
 
     def test_string_factorize(self):
         # should this be optional?
         data = 'a\nb\na\nb\na'
         reader = TextReader(StringIO(data), header=None)
-        names, result = reader.read()
+        result = reader.read()
         self.assert_(len(set(map(id, result[0]))) == 2)
 
     def test_skipinitialspace(self):
@@ -83,7 +83,7 @@ class TestCParser(unittest.TestCase):
 
         reader = TextReader(StringIO(data), skipinitialspace=True,
                             header=None)
-        names, result = reader.read()
+        result = reader.read()
 
         self.assert_(np.array_equal(result[0], ['a', 'a', 'a', 'a']))
         self.assert_(np.array_equal(result[1], ['b', 'b', 'b', 'b']))
@@ -92,7 +92,7 @@ class TestCParser(unittest.TestCase):
         data = 'True\nFalse\nTrue\nTrue'
 
         reader = TextReader(StringIO(data), header=None)
-        names, result = reader.read()
+        result = reader.read()
 
         self.assert_(result[0].dtype == np.bool_)
 
@@ -101,7 +101,7 @@ class TestCParser(unittest.TestCase):
 
         reader = TextReader(StringIO(data), delim_whitespace=True,
                             header=None)
-        names, result = reader.read()
+        result = reader.read()
 
         self.assert_(np.array_equal(result[0], ['a', 'a', 'a']))
         self.assert_(np.array_equal(result[1], ['b', 'b', 'b']))
@@ -110,7 +110,7 @@ class TestCParser(unittest.TestCase):
         data = 'a\n"hello\nthere"\nthis'
 
         reader = TextReader(StringIO(data), header=None)
-        names, result = reader.read()
+        result = reader.read()
 
         expected = ['a', 'hello\nthere', 'this']
         self.assert_(np.array_equal(result[0], expected))
@@ -120,7 +120,7 @@ class TestCParser(unittest.TestCase):
 
         reader = TextReader(StringIO(data), delimiter=':',
                             decimal=',', header=None)
-        names, result = reader.read()
+        result = reader.read()
 
         expected = [12345.67, 345.678]
         tm.assert_almost_equal(result[0], expected)
@@ -130,7 +130,7 @@ class TestCParser(unittest.TestCase):
 
         reader = TextReader(StringIO(data), delimiter=':',
                             thousands=',', header=None)
-        names, result = reader.read()
+        result = reader.read()
 
         expected = [123456, 12500]
         tm.assert_almost_equal(result[0], expected)
@@ -150,7 +150,7 @@ class TestCParser(unittest.TestCase):
                             header=None,
                             error_bad_lines=False,
                             warn_bad_lines=False)
-        names, result = reader.read()
+        result = reader.read()
         expected = {0: ['a', 'd', 'g', 'l'],
                     1: ['b', 'e', 'h', 'm'],
                     2: ['c', 'f', 'i', 'n']}
@@ -165,7 +165,7 @@ class TestCParser(unittest.TestCase):
 
         reader = TextReader(StringIO(data), delimiter=',', header=2,
                             as_recarray=True)
-        header = reader.get_header()
+        header = reader.header
         expected = ['a', 'b', 'c']
         self.assertEquals(header, expected)
 
@@ -174,9 +174,8 @@ class TestCParser(unittest.TestCase):
         assert_array_dicts_equal(expected, recs)
 
         # not enough rows
-        reader = TextReader(StringIO(data), delimiter=',', header=5,
-                            as_recarray=True)
-        self.assertRaises(parser.CParserError, reader.get_header)
+        self.assertRaises(parser.CParserError, TextReader, StringIO(data),
+                          delimiter=',', header=5, as_recarray=True)
 
     def test_escapechar(self):
         data = ('\\"hello world\"\n'
@@ -185,7 +184,7 @@ class TestCParser(unittest.TestCase):
 
         reader = TextReader(StringIO(data), delimiter=',', header=None,
                             escapechar='\\')
-        names, result = reader.read()
+        result = reader.read()
         expected = {0: ['"hello world"'] * 3}
         assert_array_dicts_equal(result, expected)
 
diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index c62bdb958..0e3f0c563 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -246,8 +246,17 @@ KORD,19990127 22:00:00, 21:56:00, -0.5900, 1.7100, 5.1000, 0.0000, 290.0000
 
     def test_single_line(self):
         # sniff separator
-        df = self.read_csv(StringIO('1,2'), names=['a', 'b'], sep=None)
-        assert_frame_equal(DataFrame({'a': [1], 'b': [2]}), df)
+        buf = StringIO()
+        sys.stdout = buf
+
+        # printing warning message when engine == 'c' for now
+
+        try:
+            # it works!
+            df = self.read_csv(StringIO('1,2'), names=['a', 'b'], sep=None)
+            assert_frame_equal(DataFrame({'a': [1], 'b': [2]}), df)
+        finally:
+            sys.stdout = sys.__stdout__
 
     def test_multiple_date_cols_with_header(self):
         data = """\
@@ -364,7 +373,7 @@ footer
 
         try:
             df = self.read_table(StringIO(data), sep=',', header=1, comment='#',
-                            skip_footer=-1)
+                            skip_footer=1)
             self.assert_(False)
         except ValueError, inst:
             self.assert_('Expecting 3 columns, got 5 in row 3' in str(inst))
@@ -781,42 +790,6 @@ baz,7,8,9
         data = self.read_csv(StringIO(data))
         self.assert_(data.index.equals(Index(['foo', 'bar', 'baz'])))
 
-    def test_sniff_delimiter(self):
-        text = """index|A|B|C
-foo|1|2|3
-bar|4|5|6
-baz|7|8|9
-"""
-        data = self.read_csv(StringIO(text), index_col=0, sep=None)
-        self.assert_(data.index.equals(Index(['foo', 'bar', 'baz'])))
-
-        data2 = self.read_csv(StringIO(text), index_col=0, delimiter='|')
-        assert_frame_equal(data, data2)
-
-        text = """ignore this
-ignore this too
-index|A|B|C
-foo|1|2|3
-bar|4|5|6
-baz|7|8|9
-"""
-        data3 = self.read_csv(StringIO(text), index_col=0,
-                              sep=None, skiprows=2)
-        assert_frame_equal(data, data3)
-
-        # can't get this to work on Python 3
-        if not py3compat.PY3:
-            text = u"""ignore this
-ignore this too
-index|A|B|C
-foo|1|2|3
-bar|4|5|6
-baz|7|8|9
-""".encode('utf-8')
-            data4 = self.read_csv(BytesIO(text), index_col=0, sep=None, skiprows=2,
-                             encoding='utf-8')
-            assert_frame_equal(data, data4)
-
     def test_read_nrows(self):
         df = self.read_csv(StringIO(self.data1), nrows=3)
         expected = self.read_csv(StringIO(self.data1))[:3]
@@ -998,13 +971,13 @@ want to skip this
 also also skip this
 and this
 """
-        result = self.read_csv(StringIO(data), skip_footer=-3)
+        result = self.read_csv(StringIO(data), skip_footer=3)
         no_footer = '\n'.join(data.split('\n')[:-4])
         expected = self.read_csv(StringIO(no_footer))
 
         assert_frame_equal(result, expected)
 
-        result = self.read_csv(StringIO(data), skip_footer=3)
+        result = self.read_csv(StringIO(data), nrows=3)
         assert_frame_equal(result, expected)
 
     def test_no_unnamed_index(self):
@@ -1263,6 +1236,42 @@ class TestPythonParser(ParserTests, unittest.TestCase):
         kwds['engine'] = 'python'
         return read_table(*args, **kwds)
 
+    def test_sniff_delimiter(self):
+        text = """index|A|B|C
+foo|1|2|3
+bar|4|5|6
+baz|7|8|9
+"""
+        data = self.read_csv(StringIO(text), index_col=0, sep=None)
+        self.assert_(data.index.equals(Index(['foo', 'bar', 'baz'])))
+
+        data2 = self.read_csv(StringIO(text), index_col=0, delimiter='|')
+        assert_frame_equal(data, data2)
+
+        text = """ignore this
+ignore this too
+index|A|B|C
+foo|1|2|3
+bar|4|5|6
+baz|7|8|9
+"""
+        data3 = self.read_csv(StringIO(text), index_col=0,
+                              sep=None, skiprows=2)
+        assert_frame_equal(data, data3)
+
+        # can't get this to work on Python 3
+        if not py3compat.PY3:
+            text = u"""ignore this
+ignore this too
+index|A|B|C
+foo|1|2|3
+bar|4|5|6
+baz|7|8|9
+""".encode('utf-8')
+            data4 = self.read_csv(BytesIO(text), index_col=0, sep=None, skiprows=2,
+                             encoding='utf-8')
+            assert_frame_equal(data, data4)
+
     def test_regex_separator(self):
         data = """   A   B   C   D
 a   1   2   3   4
diff --git a/pandas/src/parser.pyx b/pandas/src/parser.pyx
index 4c87053d9..3b9f5549e 100644
--- a/pandas/src/parser.pyx
+++ b/pandas/src/parser.pyx
@@ -197,7 +197,7 @@ cdef class TextReader:
         list clocks
 
     cdef public:
-        int leading_cols, table_width
+        int leading_cols, table_width, skip_footer
         object delimiter, na_values, converters, delim_whitespace
         object memory_map
         object as_recarray
@@ -224,7 +224,7 @@ cdef class TextReader:
                   escapechar=None,
                   doublequote=None,
                   quotechar=b'"',
-                  quoting=None,
+                  quoting=0,
 
                   comment=None,
                   decimal=b'.',
@@ -291,6 +291,13 @@ cdef class TextReader:
         if skiprows is not None:
             self._make_skiprow_set()
 
+        self.skip_footer = skip_footer
+
+        # KLUDGE
+        if skip_footer > 0:
+            self.parser.error_bad_lines = 0
+            self.parser.warn_bad_lines = 0
+
         self.should_close = False
 
         self.delimiter = delimiter
@@ -408,7 +415,7 @@ cdef class TextReader:
                 word = self.parser.words[start + i]
                 header.append(PyString_FromString(word))
 
-            data_line = 1
+            data_line = self.parser.header + 1
 
         elif self.names is not None:
             # Names passed
@@ -458,7 +465,7 @@ cdef class TextReader:
 
         if self.as_recarray:
             self._start_clock()
-            result = _to_structured_array(columns, self.names)
+            result = _to_structured_array(columns, self.header)
             self._end_clock('Conversion to structured array')
 
             return result
@@ -469,17 +476,27 @@ cdef class TextReader:
         pass
 
     cdef _read_high_memory(self, rows):
-        cdef int irows
+        cdef:
+            int buffered_lines
+            int irows, footer = 0
 
         self._start_clock()
 
         if rows is not None:
             irows = rows
-            with nogil:
-                status = tokenize_nrows(self.parser, irows)
+            buffered_lines = self.parser.lines - self.parser_start
+
+            if buffered_lines < irows:
+                with nogil:
+                    status = tokenize_nrows(self.parser,
+                                            irows - buffered_lines)
+            if self.skip_footer > 0:
+                raise ValueError('skip_footer can only be used to read '
+                                 'the whole file')
         else:
             with nogil:
                 status = tokenize_all_rows(self.parser)
+            footer = self.skip_footer
 
         if self.parser_start == self.parser.lines:
             raise StopIteration
@@ -492,14 +509,17 @@ cdef class TextReader:
         self._start_clock()
 
         columns = self._convert_column_data(rows=rows,
+                                            footer=footer,
                                             upcast_na=not self.as_recarray)
 
         self._end_clock('Type conversion')
 
-        # debug_print_parser(self.parser)
 
         return columns
 
+    def debug_print(self):
+        debug_print_parser(self.parser)
+
     cdef _start_clock(self):
         self.clocks.append(time.time())
 
@@ -508,7 +528,7 @@ cdef class TextReader:
             elapsed = time.time() - self.clocks.pop(-1)
             print '%s took: %.2f ms' % (what, elapsed * 1000)
 
-    def _convert_column_data(self, rows=None, upcast_na=False):
+    def _convert_column_data(self, rows=None, upcast_na=False, footer=0):
         cdef:
             Py_ssize_t i, ncols
             cast_func func
@@ -522,6 +542,10 @@ cdef class TextReader:
         else:
             end = min(start + rows, self.parser.lines)
 
+        # # skip footer
+        # if footer > 0:
+        #     end -= footer
+
         results = {}
         for i in range(self.table_width):
             name = self._get_column_name(i)
