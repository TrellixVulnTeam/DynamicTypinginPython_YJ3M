commit 376483e12e4a08140d594eab86bf22423684fbcb
Author: cbertinato <chrisbertinato@mac.com>
Date:   Mon Aug 28 09:58:05 2017 -0400

    CLN: replace %s syntax with .format in core/indexing.py (#17357)
    
    Progress toward issue #16130. Converted old string formatting to new string formatting in core/indexing.py.

diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 6b9ad5cd2..b7a51afce 100755
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -188,8 +188,9 @@ class _NDFrameIndexer(object):
             if i >= self.obj.ndim:
                 raise IndexingError('Too many indexers')
             if not self._has_valid_type(k, i):
-                raise ValueError("Location based indexing can only have [%s] "
-                                 "types" % self._valid_types)
+                raise ValueError("Location based indexing can only have "
+                                 "[{types}] types"
+                                 .format(types=self._valid_types))
 
     def _should_validate_iterable(self, axis=0):
         """ return a boolean whether this axes needs validation for a passed
@@ -263,11 +264,11 @@ class _NDFrameIndexer(object):
                     pass
                 elif is_integer(i):
                     if i >= len(ax):
-                        raise IndexError("{0} cannot enlarge its target object"
-                                         .format(self.name))
+                        raise IndexError("{name} cannot enlarge its target "
+                                         "object".format(name=self.name))
                 elif isinstance(i, dict):
-                    raise IndexError("{0} cannot enlarge its target object"
-                                     .format(self.name))
+                    raise IndexError("{name} cannot enlarge its target object"
+                                     .format(name=self.name))
 
         return True
 
@@ -1235,7 +1236,8 @@ class _NDFrameIndexer(object):
 
                 mask = check == -1
                 if mask.any():
-                    raise KeyError('%s not in index' % objarr[mask])
+                    raise KeyError('{mask} not in index'
+                                   .format(mask=objarr[mask]))
 
                 return _values_from_object(indexer)
 
@@ -1421,8 +1423,9 @@ class _LocIndexer(_LocationIndexer):
             if (not is_iterator(key) and len(key) and
                     np.all(ax.get_indexer_for(key) < 0)):
 
-                raise KeyError("None of [%s] are in the [%s]" %
-                               (key, self.obj._get_axis_name(axis)))
+                raise KeyError(u"None of [{key}] are in the [{axis}]"
+                               .format(key=key,
+                                       axis=self.obj._get_axis_name(axis)))
 
             return True
 
@@ -1432,8 +1435,9 @@ class _LocIndexer(_LocationIndexer):
                 if isna(key):
                     raise TypeError("cannot use label indexing with a null "
                                     "key")
-                raise KeyError("the label [%s] is not in the [%s]" %
-                               (key, self.obj._get_axis_name(axis)))
+                raise KeyError(u"the label [{key}] is not in the [{axis}]"
+                               .format(key=key,
+                                       axis=self.obj._get_axis_name(axis)))
 
             try:
                 key = self._convert_scalar_indexer(key, axis)
