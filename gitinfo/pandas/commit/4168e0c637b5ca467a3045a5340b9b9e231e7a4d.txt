commit 4168e0c637b5ca467a3045a5340b9b9e231e7a4d
Author: alimcmaster1 <alimcmaster1@gmail.com>
Date:   Thu Jan 2 00:33:07 2020 +0000

    CLN: OrderedDict -> Dict (#30497)

diff --git a/pandas/core/arrays/sparse/scipy_sparse.py b/pandas/core/arrays/sparse/scipy_sparse.py
index 278ad1027..88d63071c 100644
--- a/pandas/core/arrays/sparse/scipy_sparse.py
+++ b/pandas/core/arrays/sparse/scipy_sparse.py
@@ -3,8 +3,6 @@ Interaction with scipy.sparse matrices.
 
 Currently only includes to_coo helpers.
 """
-from collections import OrderedDict
-
 from pandas.core.indexes.api import Index, MultiIndex
 from pandas.core.series import Series
 
@@ -46,14 +44,13 @@ def _to_ijv(ss, row_levels=(0,), column_levels=(1,), sort_labels=False):
         # labels_to_i[:] = np.arange(labels_to_i.shape[0])
 
         def _get_label_to_i_dict(labels, sort_labels=False):
-            """ Return OrderedDict of unique labels to number.
+            """ Return dict of unique labels to number.
             Optionally sort by label.
             """
             labels = Index(map(tuple, labels)).unique().tolist()  # squish
             if sort_labels:
                 labels = sorted(labels)
-            d = OrderedDict((k, i) for i, k in enumerate(labels))
-            return d
+            return {k: i for i, k in enumerate(labels)}
 
         def _get_index_subset_to_coord_dict(index, subset, sort_labels=False):
             ilabels = list(zip(*[index._get_level_values(i) for i in subset]))
diff --git a/pandas/core/groupby/generic.py b/pandas/core/groupby/generic.py
index be94fa548..27afd8ca0 100644
--- a/pandas/core/groupby/generic.py
+++ b/pandas/core/groupby/generic.py
@@ -5,7 +5,7 @@ classes that hold the groupby interfaces (and some implementations).
 These are user facing as the result of the ``df.groupby(...)`` operations,
 which here returns a DataFrameGroupBy object.
 """
-from collections import OrderedDict, abc, defaultdict, namedtuple
+from collections import abc, defaultdict, namedtuple
 import copy
 from functools import partial
 from textwrap import dedent
@@ -14,6 +14,7 @@ from typing import (
     TYPE_CHECKING,
     Any,
     Callable,
+    Dict,
     FrozenSet,
     Iterable,
     List,
@@ -306,7 +307,7 @@ class SeriesGroupBy(GroupBy):
 
             arg = zip(columns, arg)
 
-        results = OrderedDict()
+        results = {}
         for name, func in arg:
             obj = self
 
@@ -443,7 +444,7 @@ class SeriesGroupBy(GroupBy):
             return self._reindex_output(result)
 
     def _aggregate_named(self, func, *args, **kwargs):
-        result = OrderedDict()
+        result = {}
 
         for name, group in self:
             group.name = name
@@ -1122,7 +1123,7 @@ class DataFrameGroupBy(GroupBy):
         axis = self.axis
         obj = self._obj_with_exclusions
 
-        result: OrderedDict = OrderedDict()
+        result: Dict[Union[int, str], Union[NDFrame, np.ndarray]] = {}
         if axis != obj._info_axis_number:
             for name, data in self:
                 fres = func(data, *args, **kwargs)
@@ -1139,7 +1140,7 @@ class DataFrameGroupBy(GroupBy):
         # only for axis==0
 
         obj = self._obj_with_exclusions
-        result: OrderedDict = OrderedDict()
+        result: Dict[Union[int, str], NDFrame] = {}
         cannot_agg = []
         for item in obj:
             data = obj[item]
@@ -1877,7 +1878,7 @@ def _normalize_keyword_aggregation(kwargs):
     Normalize user-provided "named aggregation" kwargs.
 
     Transforms from the new ``Mapping[str, NamedAgg]`` style kwargs
-    to the old OrderedDict[str, List[scalar]]].
+    to the old Dict[str, List[scalar]]].
 
     Parameters
     ----------
@@ -1895,11 +1896,11 @@ def _normalize_keyword_aggregation(kwargs):
     Examples
     --------
     >>> _normalize_keyword_aggregation({'output': ('input', 'sum')})
-    (OrderedDict([('input', ['sum'])]), ('output',), [('input', 'sum')])
+    ({'input': ['sum']}, ('output',), [('input', 'sum')])
     """
     # Normalize the aggregation functions as Mapping[column, List[func]],
     # process normally, then fixup the names.
-    # TODO: aggspec type: typing.OrderedDict[str, List[AggScalar]]
+    # TODO: aggspec type: typing.Dict[str, List[AggScalar]]
     # May be hitting https://github.com/python/mypy/issues/5958
     # saying it doesn't have an attribute __name__
     aggspec = defaultdict(list)
diff --git a/pandas/core/indexes/multi.py b/pandas/core/indexes/multi.py
index 017e1811e..f94d012b3 100644
--- a/pandas/core/indexes/multi.py
+++ b/pandas/core/indexes/multi.py
@@ -1,4 +1,3 @@
-from collections import OrderedDict
 import datetime
 from sys import getsizeof
 from typing import Hashable, List, Optional, Sequence, Union
@@ -1639,17 +1638,12 @@ class MultiIndex(Index):
         else:
             idx_names = self.names
 
-        # Guarantee resulting column order
+        # Guarantee resulting column order - PY36+ dict maintains insertion order
         result = DataFrame(
-            OrderedDict(
-                [
-                    (
-                        (level if lvlname is None else lvlname),
-                        self._get_level_values(level),
-                    )
-                    for lvlname, level in zip(idx_names, range(len(self.levels)))
-                ]
-            ),
+            {
+                (level if lvlname is None else lvlname): self._get_level_values(level)
+                for lvlname, level in zip(idx_names, range(len(self.levels)))
+            },
             copy=False,
         )
 
diff --git a/pandas/io/formats/html.py b/pandas/io/formats/html.py
index b88478b3d..020b4952f 100644
--- a/pandas/io/formats/html.py
+++ b/pandas/io/formats/html.py
@@ -2,7 +2,6 @@
 Module for formatting output data in HTML.
 """
 
-from collections import OrderedDict
 from textwrap import dedent
 from typing import IO, Any, Dict, Iterable, List, Mapping, Optional, Tuple, Union, cast
 
@@ -138,10 +137,9 @@ class HTMLFormatter(TableFormatter):
         else:
             start_tag = "<{kind}>".format(kind=kind)
 
-        esc: Union[OrderedDict[str, str], Dict]
         if self.escape:
             # escape & first to prevent double escaping of &
-            esc = OrderedDict([("&", r"&amp;"), ("<", r"&lt;"), (">", r"&gt;")])
+            esc = {"&": r"&amp;", "<": r"&lt;", ">": r"&gt;"}
         else:
             esc = {}
 
diff --git a/pandas/tests/io/parser/test_common.py b/pandas/tests/io/parser/test_common.py
index 007a06812..c431cbc21 100644
--- a/pandas/tests/io/parser/test_common.py
+++ b/pandas/tests/io/parser/test_common.py
@@ -3,7 +3,6 @@ Tests that work on both the Python and C engines but do not have a
 specific classification into the other test modules.
 """
 import codecs
-from collections import OrderedDict
 import csv
 from datetime import datetime
 from io import BytesIO, StringIO
@@ -1316,9 +1315,7 @@ def test_float_parser(all_parsers):
 
 def test_scientific_no_exponent(all_parsers):
     # see gh-12215
-    df = DataFrame.from_dict(
-        OrderedDict([("w", ["2e"]), ("x", ["3E"]), ("y", ["42e"]), ("z", ["632E"])])
-    )
+    df = DataFrame.from_dict({"w": ["2e"], "x": ["3E"], "y": ["42e"], "z": ["632E"]})
     data = df.to_csv(index=False)
     parser = all_parsers
 
diff --git a/pandas/tests/reshape/merge/test_multi.py b/pandas/tests/reshape/merge/test_multi.py
index d26919640..8d5c18b71 100644
--- a/pandas/tests/reshape/merge/test_multi.py
+++ b/pandas/tests/reshape/merge/test_multi.py
@@ -1,5 +1,3 @@
-from collections import OrderedDict
-
 import numpy as np
 from numpy.random import randn
 import pytest
@@ -474,17 +472,13 @@ class TestMergeMulti:
         if klass is not None:
             on_vector = klass(on_vector)
 
-        expected = DataFrame(
-            OrderedDict([("a", [1, 2, 3]), ("key_1", [2016, 2017, 2018])])
-        )
+        expected = DataFrame({"a": [1, 2, 3], "key_1": [2016, 2017, 2018]})
 
         result = df.merge(df, on=["a", on_vector], how="inner")
         tm.assert_frame_equal(result, expected)
 
         expected = DataFrame(
-            OrderedDict(
-                [("key_0", [2016, 2017, 2018]), ("a_x", [1, 2, 3]), ("a_y", [1, 2, 3])]
-            )
+            {"key_0": [2016, 2017, 2018], "a_x": [1, 2, 3], "a_y": [1, 2, 3]}
         )
 
         result = df.merge(df, on=[df.index.year], how="inner")
@@ -788,17 +782,13 @@ class TestJoinMultiMulti:
         if box is not None:
             on_vector = box(on_vector)
 
-        expected = DataFrame(
-            OrderedDict([("a", [1, 2, 3]), ("key_1", [2016, 2017, 2018])])
-        )
+        expected = DataFrame({"a": [1, 2, 3], "key_1": [2016, 2017, 2018]})
 
         result = df.merge(df, on=["a", on_vector], how="inner")
         tm.assert_frame_equal(result, expected)
 
         expected = DataFrame(
-            OrderedDict(
-                [("key_0", [2016, 2017, 2018]), ("a_x", [1, 2, 3]), ("a_y", [1, 2, 3])]
-            )
+            {"key_0": [2016, 2017, 2018], "a_x": [1, 2, 3], "a_y": [1, 2, 3]}
         )
 
         result = df.merge(df, on=[df.index.year], how="inner")
diff --git a/pandas/tests/reshape/test_pivot.py b/pandas/tests/reshape/test_pivot.py
index bd1d3d2d5..43da011ed 100644
--- a/pandas/tests/reshape/test_pivot.py
+++ b/pandas/tests/reshape/test_pivot.py
@@ -1,4 +1,3 @@
-from collections import OrderedDict
 from datetime import date, datetime, timedelta
 from itertools import product
 
@@ -1044,7 +1043,7 @@ class TestPivotTable:
         assert pivoted.columns.is_monotonic
 
     def test_pivot_complex_aggfunc(self):
-        f = OrderedDict([("D", ["std"]), ("E", ["sum"])])
+        f = {"D": ["std"], "E": ["sum"]}
         expected = self.data.groupby(["A", "B"]).agg(f).unstack("B")
         result = self.data.pivot_table(index="A", columns="B", aggfunc=f)
 
diff --git a/pandas/tests/util/test_validate_args.py b/pandas/tests/util/test_validate_args.py
index 1f1365d62..dfbd8a3f9 100644
--- a/pandas/tests/util/test_validate_args.py
+++ b/pandas/tests/util/test_validate_args.py
@@ -1,5 +1,3 @@
-from collections import OrderedDict
-
 import pytest
 
 from pandas.util._validators import validate_args
@@ -58,11 +56,7 @@ def test_not_all_defaults(i):
         r"in the pandas implementation of {func}\(\)".format(arg=bad_arg, func=_fname)
     )
 
-    compat_args = OrderedDict()
-    compat_args["foo"] = 2
-    compat_args["bar"] = -1
-    compat_args["baz"] = 3
-
+    compat_args = {"foo": 2, "bar": -1, "baz": 3}
     arg_vals = (1, -1, 3)
 
     with pytest.raises(ValueError, match=msg):
@@ -73,8 +67,5 @@ def test_validation():
     # No exceptions should be raised.
     validate_args(_fname, (None,), 2, dict(out=None))
 
-    compat_args = OrderedDict()
-    compat_args["axis"] = 1
-    compat_args["out"] = None
-
+    compat_args = {"axis": 1, "out": None}
     validate_args(_fname, (1, None), 2, compat_args)
diff --git a/pandas/tests/util/test_validate_args_and_kwargs.py b/pandas/tests/util/test_validate_args_and_kwargs.py
index 6aa2088c0..eaf5f99b7 100644
--- a/pandas/tests/util/test_validate_args_and_kwargs.py
+++ b/pandas/tests/util/test_validate_args_and_kwargs.py
@@ -1,5 +1,3 @@
-from collections import OrderedDict
-
 import pytest
 
 from pandas.util._validators import validate_args_and_kwargs
@@ -52,9 +50,7 @@ def test_missing_args_or_kwargs(args, kwargs):
     bad_arg = "bar"
     min_fname_arg_count = 2
 
-    compat_args = OrderedDict()
-    compat_args["foo"] = -5
-    compat_args[bad_arg] = 1
+    compat_args = {"foo": -5, bad_arg: 1}
 
     msg = (
         r"the '{arg}' parameter is not supported "
@@ -68,11 +64,7 @@ def test_missing_args_or_kwargs(args, kwargs):
 def test_duplicate_argument():
     min_fname_arg_count = 2
 
-    compat_args = OrderedDict()
-    compat_args["foo"] = None
-    compat_args["bar"] = None
-    compat_args["baz"] = None
-
+    compat_args = {"foo": None, "bar": None, "baz": None}
     kwargs = {"foo": None, "bar": None}
     args = (None,)  # duplicate value for "foo"
 
@@ -84,10 +76,7 @@ def test_duplicate_argument():
 
 def test_validation():
     # No exceptions should be raised.
-    compat_args = OrderedDict()
-    compat_args["foo"] = 1
-    compat_args["bar"] = None
-    compat_args["baz"] = -2
+    compat_args = {"foo": 1, "bar": None, "baz": -2}
     kwargs = {"baz": -2}
 
     args = (1, None)
diff --git a/pandas/tests/util/test_validate_kwargs.py b/pandas/tests/util/test_validate_kwargs.py
index 54b5c6ed0..a26d96fcd 100644
--- a/pandas/tests/util/test_validate_kwargs.py
+++ b/pandas/tests/util/test_validate_kwargs.py
@@ -1,5 +1,3 @@
-from collections import OrderedDict
-
 import pytest
 
 from pandas.util._validators import validate_bool_kwarg, validate_kwargs
@@ -11,9 +9,7 @@ def test_bad_kwarg():
     good_arg = "f"
     bad_arg = good_arg + "o"
 
-    compat_args = OrderedDict()
-    compat_args[good_arg] = "foo"
-    compat_args[bad_arg + "o"] = "bar"
+    compat_args = {good_arg: "foo", bad_arg + "o": "bar"}
     kwargs = {good_arg: "foo", bad_arg: "bar"}
 
     msg = fr"{_fname}\(\) got an unexpected keyword argument '{bad_arg}'"
@@ -30,10 +26,7 @@ def test_not_all_none(i):
         r"in the pandas implementation of {func}\(\)".format(arg=bad_arg, func=_fname)
     )
 
-    compat_args = OrderedDict()
-    compat_args["foo"] = 1
-    compat_args["bar"] = "s"
-    compat_args["baz"] = None
+    compat_args = {"foo": 1, "bar": "s", "baz": None}
 
     kwarg_keys = ("foo", "bar", "baz")
     kwarg_vals = (2, "s", None)
@@ -46,10 +39,7 @@ def test_not_all_none(i):
 
 def test_validation():
     # No exceptions should be raised.
-    compat_args = OrderedDict()
-    compat_args["f"] = None
-    compat_args["b"] = 1
-    compat_args["ba"] = "s"
+    compat_args = {"f": None, "b": 1, "ba": "s"}
 
     kwargs = dict(f=None, b=1)
     validate_kwargs(_fname, kwargs, compat_args)
diff --git a/pandas/util/_validators.py b/pandas/util/_validators.py
index 6cc14c780..b69c97466 100644
--- a/pandas/util/_validators.py
+++ b/pandas/util/_validators.py
@@ -84,15 +84,13 @@ def validate_args(fname, args, max_fname_arg_count, compat_args):
         The maximum number of arguments that the function `fname`
         can accept, excluding those in `args`. Used for displaying
         appropriate error messages. Must be non-negative.
-    compat_args : Dict
-        An ordered dictionary of keys and their associated default values.
+    compat_args : dict
+        A dictionary of keys and their associated default values.
         In order to accommodate buggy behaviour in some versions of `numpy`,
         where a signature displayed keyword arguments but then passed those
         arguments **positionally** internally when calling downstream
-        implementations, an ordered dictionary ensures that the original
-        order of the keyword arguments is enforced. Note that if there is
-        only one key, a generic dict can be passed in as well.
-
+        implementations, a dict ensures that the original
+        order of the keyword arguments is enforced.
     Raises
     ------
     TypeError
@@ -168,10 +166,9 @@ def validate_args_and_kwargs(fname, args, kwargs, max_fname_arg_count, compat_ar
         The minimum number of arguments that the function `fname`
         requires, excluding those in `args`. Used for displaying
         appropriate error messages. Must be non-negative.
-    compat_args: OrderedDict
-        A ordered dictionary of keys that `kwargs` is allowed to
-        have and their associated default values. Note that if there
-        is only one key, a generic dict can be passed in as well.
+    compat_args: dict
+        A dictionary of keys that `kwargs` is allowed to
+        have and their associated default values.
 
     Raises
     ------
diff --git a/scripts/validate_docstrings.py b/scripts/validate_docstrings.py
index 850217c8a..872182ee8 100755
--- a/scripts/validate_docstrings.py
+++ b/scripts/validate_docstrings.py
@@ -15,7 +15,6 @@ Usage::
 """
 import argparse
 import ast
-import collections
 import doctest
 import functools
 import glob
@@ -422,7 +421,7 @@ class Docstring:
 
     @property
     def doc_parameters(self):
-        parameters = collections.OrderedDict()
+        parameters = {}
         for names, type_, desc in self.doc["Parameters"]:
             for name in names.split(", "):
                 parameters[name] = (type_, "".join(desc))
@@ -510,7 +509,7 @@ class Docstring:
 
     @property
     def see_also(self):
-        result = collections.OrderedDict()
+        result = {}
         for funcs, desc in self.doc["See Also"]:
             for func, _ in funcs:
                 result[func] = "".join(desc)
