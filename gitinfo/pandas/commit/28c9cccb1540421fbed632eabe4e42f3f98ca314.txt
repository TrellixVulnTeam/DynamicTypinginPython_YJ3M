commit 28c9cccb1540421fbed632eabe4e42f3f98ca314
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Sun Nov 3 12:46:23 2019 -0800

    CLN: tighten Exception catching in indexing.py (#29305)

diff --git a/doc/source/reference/indexing.rst b/doc/source/reference/indexing.rst
index dd59a99b3..409791c75 100644
--- a/doc/source/reference/indexing.rst
+++ b/doc/source/reference/indexing.rst
@@ -93,7 +93,6 @@ Compatibility with MultiIndex
    :toctree: api/
 
    Index.set_names
-   Index.is_lexsorted_for_tuple
    Index.droplevel
 
 Missing values
diff --git a/doc/source/whatsnew/v1.0.0.rst b/doc/source/whatsnew/v1.0.0.rst
index 755b923d3..101c5ec91 100644
--- a/doc/source/whatsnew/v1.0.0.rst
+++ b/doc/source/whatsnew/v1.0.0.rst
@@ -257,6 +257,7 @@ or ``matplotlib.Axes.plot``. See :ref:`plotting.formatters` for more.
 - Ability to read pickles containing :class:`Categorical` instances created with pre-0.16 version of pandas has been removed (:issue:`27538`)
 - Removed the previously deprecated ``reduce`` and ``broadcast`` arguments from :meth:`DataFrame.apply` (:issue:`18577`)
 - Removed the previously deprecated ``assert_raises_regex`` function in ``pandas.util.testing`` (:issue:`29174`)
+- Removed :meth:`Index.is_lexsorted_for_tuple` (:issue:`29305`)
 -
 
 .. _whatsnew_1000.performance:
diff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py
index 187c7e2f3..301426d23 100644
--- a/pandas/core/indexes/base.py
+++ b/pandas/core/indexes/base.py
@@ -1726,9 +1726,6 @@ class Index(IndexOpsMixin, PandasObject):
         """
         return self.is_unique and self.is_monotonic_decreasing
 
-    def is_lexsorted_for_tuple(self, tup):
-        return True
-
     @cache_readonly
     def is_unique(self):
         """
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 44c786f00..7db54f430 100755
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -101,7 +101,6 @@ class IndexingError(Exception):
 
 class _NDFrameIndexer(_NDFrameIndexerBase):
     _valid_types = None  # type: str
-    _exception = Exception
     axis = None
 
     def __call__(self, axis=None):
@@ -881,14 +880,6 @@ class _NDFrameIndexer(_NDFrameIndexerBase):
             # else IndexingError will be raised
             if len(tup) <= self.obj.index.nlevels and len(tup) > self.ndim:
                 raise ek
-        except Exception as e1:
-            if isinstance(tup[0], (slice, Index)):
-                raise IndexingError("Handle elsewhere")
-
-            # raise the error if we are not sorted
-            ax0 = self.obj._get_axis(0)
-            if not ax0.is_lexsorted_for_tuple(tup):
-                raise e1
 
         return None
 
@@ -1385,8 +1376,6 @@ class _IXIndexer(_NDFrameIndexer):
 
 
 class _LocationIndexer(_NDFrameIndexer):
-    _exception = Exception
-
     def __getitem__(self, key):
         if type(key) is tuple:
             key = tuple(com.apply_if_callable(x, self.obj) for x in key)
@@ -1417,10 +1406,7 @@ class _LocationIndexer(_NDFrameIndexer):
         labels = self.obj._get_axis(axis)
         key = check_bool_indexer(labels, key)
         inds = key.nonzero()[0]
-        try:
-            return self.obj.take(inds, axis=axis)
-        except Exception as detail:
-            raise self._exception(detail)
+        return self.obj.take(inds, axis=axis)
 
     def _get_slice_axis(self, slice_obj: slice, axis: int):
         """ this is pretty simple as we just have to deal with labels """
@@ -1685,7 +1671,6 @@ class _LocIndexer(_LocationIndexer):
         "endpoints included! Can be slices of integers if the "
         "index is integers), listlike of labels, boolean"
     )
-    _exception = KeyError
 
     @Appender(_NDFrameIndexer._validate_key.__doc__)
     def _validate_key(self, key, axis: int):
@@ -1970,7 +1955,6 @@ class _iLocIndexer(_LocationIndexer):
         "integer, integer slice (START point is INCLUDED, END "
         "point is EXCLUDED), listlike of integers, boolean array"
     )
-    _exception = IndexError
     _get_slice_axis = _NDFrameIndexer._get_slice_axis
 
     def _validate_key(self, key, axis: int):
