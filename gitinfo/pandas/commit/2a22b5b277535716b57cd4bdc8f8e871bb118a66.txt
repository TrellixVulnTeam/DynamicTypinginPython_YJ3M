commit 2a22b5b277535716b57cd4bdc8f8e871bb118a66
Author: Chang She <changshe@gmail.com>
Date:   Fri Nov 9 11:07:49 2012 -0500

    BUG: remove inlining for some functions to maintain clang compatibility #2188

diff --git a/pandas/src/numpy_helper.h b/pandas/src/numpy_helper.h
index 0678e2c52..50c3ffa80 100644
--- a/pandas/src/numpy_helper.h
+++ b/pandas/src/numpy_helper.h
@@ -136,8 +136,7 @@ char_to_string(char* data) {
 #include <errno.h>
 #include <float.h>
 
-PANDAS_INLINE double
-xstrtod(const char *p, char **q, char decimal, char sci, int skip_trailing);
+double xstrtod(const char *p, char **q, char decimal, char sci, int skip_trailing);
 
 int to_double(char *item, double *p_value, char sci, char decimal)
 {
@@ -153,7 +152,7 @@ int to_double(char *item, double *p_value, char sci, char decimal)
   #define PyBytes_AS_STRING            PyString_AS_STRING
 #endif
 
-PANDAS_INLINE int floatify(PyObject* str, double *result) {
+int floatify(PyObject* str, double *result) {
     int status;
     char *data;
     PyObject* tmp = NULL;
@@ -242,17 +241,11 @@ PANDAS_INLINE int floatify(PyObject* str, double *result) {
 // * Commented out the other functions.
 //
 
-PANDAS_INLINE void lowercase(char *p) {
-    for ( ; *p; ++p) *p = tolower(*p);
-}
-
-PANDAS_INLINE void uppercase(char *p) {
-    for ( ; *p; ++p) *p = toupper(*p);
-}
 
 
-PANDAS_INLINE double xstrtod(const char *str, char **endptr, char decimal,
-                             char sci, int skip_trailing)
+double
+xstrtod(const char *str, char **endptr, char decimal,
+               char sci, int skip_trailing)
 {
   double number;
   int exponent;
@@ -401,4 +394,3 @@ void set_array_owndata(PyArrayObject *ao) {
 //   }
 //   return ap;
 // }
-
diff --git a/pandas/src/util.pxd b/pandas/src/util.pxd
index 6f24cd53b..7a6757da7 100644
--- a/pandas/src/util.pxd
+++ b/pandas/src/util.pxd
@@ -14,8 +14,8 @@ cdef extern from "numpy_helper.h":
     inline int assign_value_1d(ndarray, Py_ssize_t, object) except -1
     inline cnp.int64_t get_nat()
     inline object get_value_1d(ndarray, Py_ssize_t)
+    inline int floatify(object, double*) except -1
     inline char *get_c_string(object)
-    inline int floatify(object, double *result) except -1
     inline object char_to_string(char*)
 
 cdef inline object get_value_at(ndarray arr, object loc):
