commit 3493c2ab37269447aa1caeec8b6898908cf9a307
Author: Adam Klein <adamklein@gmail.com>
Date:   Fri Dec 30 19:11:00 2011 -0500

    added more test coverage, fixed bug in from_records with index param is integer

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 5132f3040..aadc0aca7 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -591,7 +591,7 @@ class DataFrame(NDFrame):
 
         Parameters
         ----------
-        data : ndarray (structured dtype) or list of tuples
+        data : ndarray (structured dtype), list of tuples, or DataFrame
         index : string, list of fields, array-like
             Field of array to use as the index, alternately a specific set of
             input labels to use
@@ -627,7 +627,8 @@ class DataFrame(NDFrame):
             columns.remove(col)
 
         if index is not None:
-            if isinstance(index, basestring):
+            if (isinstance(index, basestring) or
+                not hasattr(index, "__iter__")):
                 result_index = sdict.pop(index)
                 columns.remove(index)
             else:
@@ -3744,7 +3745,7 @@ def _rec_to_dict(arr):
         sdict = dict((k, arr[k]) for k in columns)
     elif isinstance(arr, DataFrame):
         columns = list(arr.columns)
-        sdict = arr._series
+        sdict = dict((k, v.values) for k, v in arr.iteritems())
     elif isinstance(arr, dict):
         columns = sorted(arr)
         sdict = arr.copy()
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 3e71ac643..d5afb9926 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1465,6 +1465,11 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         result = DataFrame.from_records(tuples)
         self.assert_(np.array_equal(result.columns, range(4)))
 
+        # test exclude parameter
+        result = DataFrame.from_records(tuples, exclude=[0,1,3])
+        result.columns = ['C']
+        assert_frame_equal(result, df[['C']])
+
         # empty case
         result = DataFrame.from_records([], columns=['foo', 'bar', 'baz'])
         self.assertEqual(len(result), 0)
@@ -1474,6 +1479,27 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         self.assertEqual(len(result), 0)
         self.assertEqual(len(result.columns), 0)
 
+    def test_from_records_with_index_data(self):
+        df = DataFrame(np.random.randn(10,3), columns=['A', 'B', 'C'])
+
+        data = np.random.randn(10)
+        df1 = DataFrame.from_records(df, index=data)
+        assert(df1.index.equals(Index(data)))
+
+    def test_from_records_bad_index_column(self):
+        df = DataFrame(np.random.randn(10,3), columns=['A', 'B', 'C'])
+
+        # should pass
+        df1 = DataFrame.from_records(df, index=['C'])
+        assert(df1.index.equals(Index(df.C)))
+
+        df1 = DataFrame.from_records(df, index='C')
+        assert(df1.index.equals(Index(df.C)))
+
+        # should fail
+        self.assertRaises(Exception, DataFrame.from_records, df, index=[2])
+        self.assertRaises(KeyError, DataFrame.from_records, df, index=2)
+
     def test_get_agg_axis(self):
         cols = self.frame._get_agg_axis(0)
         self.assert_(cols is self.frame.columns)
