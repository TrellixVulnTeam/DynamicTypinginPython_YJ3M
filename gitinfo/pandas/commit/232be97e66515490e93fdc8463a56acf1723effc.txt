commit 232be97e66515490e93fdc8463a56acf1723effc
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Nov 22 14:17:57 2011 -0500

    ENH: more nanops refactoring, tests pass, #382

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 9b16bbeaf..3d10f4bbb 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2747,16 +2747,8 @@ class DataFrame(NDFrame):
         if level is not None:
             return self._agg_by_level('prod', axis=axis, level=level,
                                       skipna=skipna)
-
-        values, axis_labels = self._get_agg_data(axis, numeric_only=True)
-
-        if skipna and not issubclass(values.dtype.type, np.integer):
-            values[np.isnan(values)] = 1
-        result = values.prod(axis)
-        count = self.count(axis, numeric_only=True)
-        result[count == 0] = nan
-
-        return Series(result, index=axis_labels)
+        return self._reduce(nanops.nanprod, axis=axis, skipna=skipna,
+                            numeric_only=None)
     _add_stat_doc(prod, 'product', 'product',
                   na_action='NA/null values are treated as 1')
     product = prod
@@ -2765,30 +2757,8 @@ class DataFrame(NDFrame):
         if level is not None:
             return self._agg_by_level('median', axis=axis, level=level,
                                       skipna=skipna)
-
-        frame = self._get_numeric_data()
-
-        if axis == 0:
-            values = frame.values.T
-            result_index = frame.columns
-        elif axis == 1:
-            values = frame.values
-            result_index = self.index
-        else:
-            raise ValueError('axis must be in {0, 1}')
-
-        def get_median(x):
-            mask = notnull(x)
-            if not skipna and not mask.all():
-                return np.nan
-            return lib.median(x[mask])
-
-        if values.dtype != np.float64:
-            values = values.astype('f8')
-
-        medians = [get_median(arr) for arr in values]
-        return Series(medians, index=result_index)
-
+        return self._reduce(nanops.nanmedian, axis=axis, skipna=skipna,
+                            numeric_only=None)
     _add_stat_doc(median, 'median', 'median')
 
     def mad(self, axis=0, skipna=True, level=None):
@@ -2852,7 +2822,11 @@ class DataFrame(NDFrame):
             result = f(values)
 
         if result.dtype == np.object_:
-            result = result.astype('f8')
+            try:
+                result = result.astype('f8')
+            except (ValueError, TypeError):
+                pass
+
         return Series(result, index=labels)
 
     def idxmin(self, axis=0, skipna=True):
diff --git a/pandas/core/nanops.py b/pandas/core/nanops.py
index 52735eda0..3b173c49e 100644
--- a/pandas/core/nanops.py
+++ b/pandas/core/nanops.py
@@ -1,6 +1,7 @@
 import numpy as np
 
 from pandas.core.common import isnull, notnull
+import pandas._tseries as lib
 
 def nansum(values, axis=0, skipna=True, copy=True):
     if values.dtype == np.object_:
@@ -43,6 +44,21 @@ def nanmean(values, axis=0, skipna=True, copy=True):
 
     return the_mean
 
+def nanmedian(values, axis=0, skipna=True, copy=True):
+    def get_median(x):
+        mask = notnull(x)
+        if not skipna and not mask.all():
+            return np.nan
+        return lib.median(x[mask])
+
+    if values.dtype != np.float64:
+        values = values.astype('f8')
+
+    if axis == 0:
+        values = values.T
+
+    return np.asarray([get_median(arr) for arr in values])
+
 def nanvar(values, axis=0, skipna=True, copy=True):
     mask = isnull(values)
     count = (values.shape[axis] - mask.sum(axis)).astype(float)
@@ -98,3 +114,11 @@ def nanmax(values, axis=0, skipna=True, copy=True):
 
     return values.max(axis)
 
+def nanprod(values, axis=0, skipna=True, copy=True):
+    mask = isnull(values)
+    if skipna and not issubclass(values.dtype.type, np.integer):
+        values[mask] = 1
+    result = values.prod(axis)
+    count = mask.shape[axis] - mask.sum(axis)
+    result[count == 0] = np.nan
+    return result
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index fe7a1718b..a0bb3f996 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3028,7 +3028,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         }
         df = DataFrame(data, index=['foo', 'bar', 'baz'],
                        dtype='O')
-        methods = ['sum', 'mean', 'var', 'std', 'skew', 'min', 'max']
+        methods = ['sum', 'mean', 'prod', 'var', 'std', 'skew', 'min', 'max']
 
         for meth in methods:
             self.assert_(df.values.dtype == np.object_)
@@ -3122,6 +3122,14 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         getattr(self.mixed_frame, name)(axis=0)
         getattr(self.mixed_frame, name)(axis=1)
 
+        # all NA case
+        # if has_skipna:
+        #     all_na = self.frame * np.NaN
+        #     r0 = getattr(all_na, name)(axis=0)
+        #     r1 = getattr(all_na, name)(axis=1)
+        #     self.assert_(np.isnan(r0).all())
+        #     self.assert_(np.isnan(r1).all())
+
     def test_sum_corner(self):
         axis0 = self.empty.sum(0)
         axis1 = self.empty.sum(1)
