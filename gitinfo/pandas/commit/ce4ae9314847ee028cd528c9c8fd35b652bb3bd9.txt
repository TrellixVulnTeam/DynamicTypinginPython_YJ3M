commit ce4ae9314847ee028cd528c9c8fd35b652bb3bd9
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jun 28 14:21:45 2012 -0400

    BUG: fix MultiIndex segfault due to internal refactoring. close #1532

diff --git a/doc/source/v0.8.0.txt b/doc/source/v0.8.0.txt
index c4049c208..9df248106 100644
--- a/doc/source/v0.8.0.txt
+++ b/doc/source/v0.8.0.txt
@@ -14,7 +14,12 @@ necessary. See the `full release notes
 <https://github.com/pydata/pandas/blob/master/RELEASE.rst>`__ or issue tracker
 on GitHub for a complete list.
 
-TODO: contributor list
+Support for non-unique indexes
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+All objects can now work with non-unique indexes. Data alignment / join
+operations work according to SQL join semantics (including, if application,
+index duplication in many-to-many joins)
 
 NumPy datetime64 dtype and 1.6 dependency
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -102,13 +107,6 @@ Time series changes and improvements
   using the frequency (if any) of the index, as opposed to a naive lead/lag
   using shift
 
-Support for non-unique indexes
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-All objects can now work with non-unique indexes. Data alignment / join
-operations work according to SQL join semantics (including, if application,
-index duplication in many-to-many joins)
-
 Other new features
 ~~~~~~~~~~~~~~~~~~
 
diff --git a/pandas/core/index.py b/pandas/core/index.py
index e6502465b..384378287 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -976,35 +976,34 @@ class Index(np.ndarray):
             else:
                 return ret_index
 
+        sv = self.values
+        ov = other.values
+
         if self.is_unique and other.is_unique:
             # We can perform much better than the general case
             if how == 'left':
                 join_index = self
                 lidx = None
-                ridx = self._left_indexer_unique(self, other)
+                ridx = self._left_indexer_unique(sv, ov)
             elif how == 'right':
                 join_index = other
-                lidx = self._left_indexer_unique(other, self)
+                lidx = self._left_indexer_unique(ov, sv)
                 ridx = None
             elif how == 'inner':
-                join_index, lidx, ridx = self._inner_indexer(self.values,
-                                                             other.values)
+                join_index, lidx, ridx = self._inner_indexer(sv,ov)
                 join_index = self._wrap_joined_index(join_index, other)
             elif how == 'outer':
-                join_index, lidx, ridx = self._outer_indexer(self.values,
-                                                             other.values)
+                join_index, lidx, ridx = self._outer_indexer(sv, ov)
                 join_index = self._wrap_joined_index(join_index, other)
         else:
             if how == 'left':
-                join_index, lidx, ridx = self._left_indexer(self, other)
+                join_index, lidx, ridx = self._left_indexer(sv, ov)
             elif how == 'right':
                 join_index, ridx, lidx = self._left_indexer(other, self)
             elif how == 'inner':
-                join_index, lidx, ridx = self._inner_indexer(self.values,
-                                                             other.values)
+                join_index, lidx, ridx = self._inner_indexer(sv, ov)
             elif how == 'outer':
-                join_index, lidx, ridx = self._outer_indexer(self.values,
-                                                             other.values)
+                join_index, lidx, ridx = self._outer_indexer(sv, ov)
             join_index = self._wrap_joined_index(join_index, other)
 
         if return_indexers:
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index 0057662f6..43f0a90b7 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -1384,6 +1384,16 @@ x   q   30      3    -0.6662 -0.5243 -0.3580  0.89145  2.5838"""
         df['new'] = s
         self.assert_(df['new'].isnull().all())
 
+    def test_join_segfault(self):
+        # 1532
+        df1 = DataFrame({'a': [1, 1], 'b': [1, 2], 'x': [1, 2]})
+        df2 = DataFrame({'a': [2, 2], 'b': [1, 2], 'y': [1, 2]})
+        df1 = df1.set_index(['a', 'b'])
+        df2 = df2.set_index(['a', 'b'])
+        # it works!
+        for how in ['left', 'right', 'outer']:
+            df1.join(df2, how=how)
+
 if __name__ == '__main__':
 
     # unittest.main()
