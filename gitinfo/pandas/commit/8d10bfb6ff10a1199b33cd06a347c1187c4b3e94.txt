commit 8d10bfb6ff10a1199b33cd06a347c1187c4b3e94
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Wed Jul 1 17:16:05 2020 -0700

    TYP: annotations, typing for infer_tzinfo (#35084)

diff --git a/pandas/_libs/tslibs/conversion.pyx b/pandas/_libs/tslibs/conversion.pyx
index ac24dd546..9ee76a8c2 100644
--- a/pandas/_libs/tslibs/conversion.pyx
+++ b/pandas/_libs/tslibs/conversion.pyx
@@ -246,11 +246,12 @@ def datetime_to_datetime64(ndarray[object] values):
     """
     cdef:
         Py_ssize_t i, n = len(values)
-        object val, inferred_tz = None
+        object val
         int64_t[:] iresult
         npy_datetimestruct dts
         _TSObject _ts
         bint found_naive = False
+        tzinfo inferred_tz = None
 
     result = np.empty(n, dtype='M8[ns]')
     iresult = result.view('i8')
diff --git a/pandas/_libs/tslibs/timezones.pyx b/pandas/_libs/tslibs/timezones.pyx
index 7d8aabcc4..112da2eb5 100644
--- a/pandas/_libs/tslibs/timezones.pyx
+++ b/pandas/_libs/tslibs/timezones.pyx
@@ -1,5 +1,5 @@
 from datetime import timezone
-from cpython.datetime cimport tzinfo, PyTZInfo_Check, PyDateTime_IMPORT
+from cpython.datetime cimport datetime, tzinfo, PyTZInfo_Check, PyDateTime_IMPORT
 PyDateTime_IMPORT
 
 # dateutil compat
@@ -286,7 +286,7 @@ cdef object get_dst_info(tzinfo tz):
     return dst_cache[cache_key]
 
 
-def infer_tzinfo(start, end):
+def infer_tzinfo(datetime start, datetime end):
     if start is not None and end is not None:
         tz = start.tzinfo
         if not tz_compare(tz, end.tzinfo):
diff --git a/pandas/core/arrays/datetimes.py b/pandas/core/arrays/datetimes.py
index 461f71ff8..296f11583 100644
--- a/pandas/core/arrays/datetimes.py
+++ b/pandas/core/arrays/datetimes.py
@@ -1,4 +1,4 @@
-from datetime import datetime, time, timedelta
+from datetime import datetime, time, timedelta, tzinfo
 from typing import Optional, Union
 import warnings
 
@@ -1908,6 +1908,7 @@ def sequence_to_dt64ns(
     inferred_freq = None
 
     dtype = _validate_dt64_dtype(dtype)
+    tz = timezones.maybe_get_tz(tz)
 
     if not hasattr(data, "dtype"):
         # e.g. list, tuple
@@ -1950,14 +1951,14 @@ def sequence_to_dt64ns(
             data, inferred_tz = objects_to_datetime64ns(
                 data, dayfirst=dayfirst, yearfirst=yearfirst
             )
-            tz = maybe_infer_tz(tz, inferred_tz)
+            tz = _maybe_infer_tz(tz, inferred_tz)
         data_dtype = data.dtype
 
     # `data` may have originally been a Categorical[datetime64[ns, tz]],
     # so we need to handle these types.
     if is_datetime64tz_dtype(data_dtype):
         # DatetimeArray -> ndarray
-        tz = maybe_infer_tz(tz, data.tz)
+        tz = _maybe_infer_tz(tz, data.tz)
         result = data._data
 
     elif is_datetime64_dtype(data_dtype):
@@ -2144,7 +2145,9 @@ def maybe_convert_dtype(data, copy):
 # Validation and Inference
 
 
-def maybe_infer_tz(tz, inferred_tz):
+def _maybe_infer_tz(
+    tz: Optional[tzinfo], inferred_tz: Optional[tzinfo]
+) -> Optional[tzinfo]:
     """
     If a timezone is inferred from data, check that it is compatible with
     the user-provided timezone, if any.
@@ -2216,7 +2219,7 @@ def _validate_dt64_dtype(dtype):
     return dtype
 
 
-def validate_tz_from_dtype(dtype, tz):
+def validate_tz_from_dtype(dtype, tz: Optional[tzinfo]) -> Optional[tzinfo]:
     """
     If the given dtype is a DatetimeTZDtype, extract the implied
     tzinfo object from it and check that it does not conflict with the given
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 981b380f8..b67a1c578 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -4714,7 +4714,7 @@ def _set_tz(
     if tz is not None:
         name = getattr(values, "name", None)
         values = values.ravel()
-        tz = timezones.get_timezone(_ensure_decoded(tz))
+        tz = _ensure_decoded(tz)
         values = DatetimeIndex(values, name=name)
         values = values.tz_localize("UTC").tz_convert(tz)
     elif coerce:
