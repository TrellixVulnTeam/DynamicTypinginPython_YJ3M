commit e99f56e43ab65710a34440067efe372d5f74280b
Author: Jeff Reback <jeff@reback.net>
Date:   Thu May 4 10:27:36 2017 -0400

    CLN: make submodules of pandas.util private (#16223)
    
    * CLN: make submodules of pandas.util private
    
    xref #13634
    
    CLN: move pandas.util.*
    
    validators, depr_module, decorators, print_versions
    
    to _ leading
    
    * CLN: move remaning extensions to _libs
    
    * pandas.tools.hashing FutureWarning -> DeprecationWarning

diff --git a/asv_bench/benchmarks/algorithms.py b/asv_bench/benchmarks/algorithms.py
index d79051ed2..40cfec1bc 100644
--- a/asv_bench/benchmarks/algorithms.py
+++ b/asv_bench/benchmarks/algorithms.py
@@ -5,7 +5,7 @@ import numpy as np
 import pandas as pd
 from pandas.util import testing as tm
 
-for imp in ['pandas.util.hashing', 'pandas.tools.hashing']:
+for imp in ['pandas.util', 'pandas.tools.hashing']:
     try:
         hashing = import_module(imp)
         break
diff --git a/asv_bench/benchmarks/attrs_caching.py b/asv_bench/benchmarks/attrs_caching.py
index 9210f1f28..b7610037b 100644
--- a/asv_bench/benchmarks/attrs_caching.py
+++ b/asv_bench/benchmarks/attrs_caching.py
@@ -1,5 +1,9 @@
 from .pandas_vb_common import *
-from pandas.util.decorators import cache_readonly
+
+try:
+    from pandas.util import cache_readonly
+except ImportError:
+    from pandas.util.decorators import cache_readonly
 
 
 class DataFrameAttributes(object):
diff --git a/doc/source/merging.rst b/doc/source/merging.rst
index fb020727d..170dde87c 100644
--- a/doc/source/merging.rst
+++ b/doc/source/merging.rst
@@ -13,7 +13,7 @@
 
    import matplotlib.pyplot as plt
    plt.close('all')
-   import pandas.util.doctools as doctools
+   import pandas.util._doctools as doctools
    p = doctools.TablePlotter()
 
 
diff --git a/doc/source/whatsnew/v0.20.0.txt b/doc/source/whatsnew/v0.20.0.txt
index 230c7c0b9..bfd8031b4 100644
--- a/doc/source/whatsnew/v0.20.0.txt
+++ b/doc/source/whatsnew/v0.20.0.txt
@@ -1230,19 +1230,19 @@ If indicated, a deprecation warning will be issued if you reference theses modul
     "pandas.algos", "pandas._libs.algos", ""
     "pandas.hashtable", "pandas._libs.hashtable", ""
     "pandas.indexes", "pandas.core.indexes", ""
-    "pandas.json", "pandas.io.json.libjson", "X"
-    "pandas.parser", "pandas.io.libparsers", "X"
+    "pandas.json", "pandas._libs.json", "X"
+    "pandas.parser", "pandas._libs.parsers", "X"
     "pandas.formats", "pandas.io.formats", ""
     "pandas.sparse", "pandas.core.sparse", ""
     "pandas.tools", "pandas.core.reshape", ""
     "pandas.types", "pandas.core.dtypes", ""
-    "pandas.io.sas.saslib", "pandas.io.sas.libsas", ""
+    "pandas.io.sas.saslib", "pandas.io.sas._sas", ""
     "pandas._join", "pandas._libs.join", ""
-    "pandas._hash", "pandas.util.libhashing", ""
+    "pandas._hash", "pandas._libs.hashing", ""
     "pandas._period", "pandas._libs.period", ""
-    "pandas._sparse", "pandas.core.sparse.libsparse", ""
-    "pandas._testing", "pandas.util.libtesting", ""
-    "pandas._window", "pandas.core.libwindow", ""
+    "pandas._sparse", "pandas._libs.sparse", ""
+    "pandas._testing", "pandas._libs.testing", ""
+    "pandas._window", "pandas._libs.window", ""
 
 
 Some new subpackages are created with public functionality that is not directly
@@ -1254,6 +1254,8 @@ these are now the public subpackages.
 
 - The function :func:`~pandas.api.types.union_categoricals` is now importable from ``pandas.api.types``, formerly from ``pandas.types.concat`` (:issue:`15998`)
 - The type import ``pandas.tslib.NaTType`` is deprecated and can be replaced by using ``type(pandas.NaT)`` (:issue:`16146`)
+- The public functions in ``pandas.tools.hashing`` deprecated from that locations, but are now importable from ``pandas.util`` (:issue:`16223`)
+- The modules in ``pandas.util``: ``decorators``, ``print_versions``, ``doctools``, `validators``, ``depr_module`` are now private (:issue:`16223`)
 
 .. _whatsnew_0200.privacy.errors:
 
@@ -1278,7 +1280,7 @@ The following are now part of this API:
     'UnsupportedFunctionCall']
 
 
-.. _whatsnew_0200.privay.testing:
+.. _whatsnew_0200.privacy.testing:
 
 ``pandas.testing``
 ^^^^^^^^^^^^^^^^^^
@@ -1292,14 +1294,13 @@ The following testing functions are now part of this API:
 - :func:`testing.assert_index_equal`
 
 
-.. _whatsnew_0200.privay.plotting:
+.. _whatsnew_0200.privacy.plotting:
 
 ``pandas.plotting``
 ^^^^^^^^^^^^^^^^^^^
 
 A new public ``pandas.plotting`` module has been added that holds plotting functionality that was previously in either ``pandas.tools.plotting`` or in the top-level namespace. See the :ref:`deprecations sections <whatsnew_0200.privacy.deprecate_plotting>` for more details.
 
-
 .. _whatsnew_0200.privacy.development:
 
 Other Development Changes
diff --git a/pandas/__init__.py b/pandas/__init__.py
index 20c7e0d9d..48ac9d173 100644
--- a/pandas/__init__.py
+++ b/pandas/__init__.py
@@ -50,17 +50,17 @@ from pandas.core.reshape.api import *
 import pandas.tools.plotting
 plot_params = pandas.plotting._style._Options(deprecated=True)
 # do not import deprecate to top namespace
-scatter_matrix = pandas.util.decorators.deprecate(
+scatter_matrix = pandas.util._decorators.deprecate(
     'pandas.scatter_matrix', pandas.plotting.scatter_matrix,
     'pandas.plotting.scatter_matrix')
 
-from pandas.util.print_versions import show_versions
+from pandas.util._print_versions import show_versions
 from pandas.io.api import *
 from pandas.util._tester import test
 import pandas.testing
 
 # extension module deprecations
-from pandas.util.depr_module import _DeprecatedModule
+from pandas.util._depr_module import _DeprecatedModule
 
 json = _DeprecatedModule(deprmod='pandas.json',
                          moved={'dumps': 'pandas.io.json.dumps',
diff --git a/pandas/util/hashing.pyx b/pandas/_libs/hashing.pyx
similarity index 100%
rename from pandas/util/hashing.pyx
rename to pandas/_libs/hashing.pyx
diff --git a/pandas/io/parsers.pyx b/pandas/_libs/parsers.pyx
similarity index 100%
rename from pandas/io/parsers.pyx
rename to pandas/_libs/parsers.pyx
diff --git a/pandas/core/sparse/sparse.pyx b/pandas/_libs/sparse.pyx
similarity index 100%
rename from pandas/core/sparse/sparse.pyx
rename to pandas/_libs/sparse.pyx
diff --git a/pandas/core/sparse/sparse_op_helper.pxi.in b/pandas/_libs/sparse_op_helper.pxi.in
similarity index 100%
rename from pandas/core/sparse/sparse_op_helper.pxi.in
rename to pandas/_libs/sparse_op_helper.pxi.in
diff --git a/pandas/_libs/src/ujson/python/ujson.c b/pandas/_libs/src/ujson/python/ujson.c
index ec6720f16..a0c2146c3 100644
--- a/pandas/_libs/src/ujson/python/ujson.c
+++ b/pandas/_libs/src/ujson/python/ujson.c
@@ -90,14 +90,14 @@ static struct PyModuleDef moduledef = {
     NULL          /* m_free */
 };
 
-#define PYMODINITFUNC PyMODINIT_FUNC PyInit_libjson(void)
+#define PYMODINITFUNC PyMODINIT_FUNC PyInit_json(void)
 #define PYMODULE_CREATE() PyModule_Create(&moduledef)
 #define MODINITERROR return NULL
 
 #else
 
-#define PYMODINITFUNC PyMODINIT_FUNC initlibjson(void)
-#define PYMODULE_CREATE() Py_InitModule("libjson", ujsonMethods)
+#define PYMODINITFUNC PyMODINIT_FUNC initjson(void)
+#define PYMODULE_CREATE() Py_InitModule("json", ujsonMethods)
 #define MODINITERROR return
 
 #endif
diff --git a/pandas/util/testing.pyx b/pandas/_libs/testing.pyx
similarity index 100%
rename from pandas/util/testing.pyx
rename to pandas/_libs/testing.pyx
diff --git a/pandas/core/window.pyx b/pandas/_libs/window.pyx
similarity index 100%
rename from pandas/core/window.pyx
rename to pandas/_libs/window.pyx
diff --git a/pandas/compat/numpy/function.py b/pandas/compat/numpy/function.py
index d707ac66c..a324bf941 100644
--- a/pandas/compat/numpy/function.py
+++ b/pandas/compat/numpy/function.py
@@ -19,8 +19,8 @@ easier to adjust to future upstream changes in the analogous numpy signatures.
 """
 
 from numpy import ndarray
-from pandas.util.validators import (validate_args, validate_kwargs,
-                                    validate_args_and_kwargs)
+from pandas.util._validators import (validate_args, validate_kwargs,
+                                     validate_args_and_kwargs)
 from pandas.errors import UnsupportedFunctionCall
 from pandas.core.dtypes.common import is_integer, is_bool
 from pandas.compat import OrderedDict
diff --git a/pandas/compat/pickle_compat.py b/pandas/compat/pickle_compat.py
index 6df365a1c..b875bbb0d 100644
--- a/pandas/compat/pickle_compat.py
+++ b/pandas/compat/pickle_compat.py
@@ -71,7 +71,7 @@ _class_locations_map = {
 
     # 12588, extensions moving
     ('pandas._sparse', 'BlockIndex'):
-        ('pandas.core.sparse.libsparse', 'BlockIndex'),
+        ('pandas._libs.sparse', 'BlockIndex'),
     ('pandas.tslib', 'Timestamp'):
         ('pandas._libs.tslib', 'Timestamp'),
     ('pandas.tslib', '__nat_unpickle'):
diff --git a/pandas/core/api.py b/pandas/core/api.py
index 3e84720c3..265fb4004 100644
--- a/pandas/core/api.py
+++ b/pandas/core/api.py
@@ -35,7 +35,7 @@ from pandas.core.tools.timedeltas import to_timedelta
 from pandas.core.resample import TimeGrouper
 
 # see gh-14094.
-from pandas.util.depr_module import _DeprecatedModule
+from pandas.util._depr_module import _DeprecatedModule
 
 _removals = ['day', 'bday', 'businessDay', 'cday', 'customBusinessDay',
              'customBusinessMonthEnd', 'customBusinessMonthBegin',
diff --git a/pandas/core/base.py b/pandas/core/base.py
index fd0846b0a..a3ef24c80 100644
--- a/pandas/core/base.py
+++ b/pandas/core/base.py
@@ -9,14 +9,14 @@ import numpy as np
 from pandas.core.dtypes.missing import isnull
 from pandas.core.dtypes.generic import ABCDataFrame, ABCSeries, ABCIndexClass
 from pandas.core.dtypes.common import is_object_dtype, is_list_like, is_scalar
-from pandas.util.validators import validate_bool_kwarg
+from pandas.util._validators import validate_bool_kwarg
 
 from pandas.core import common as com
 import pandas.core.nanops as nanops
 import pandas._libs.lib as lib
 from pandas.compat.numpy import function as nv
-from pandas.util.decorators import (Appender, cache_readonly,
-                                    deprecate_kwarg, Substitution)
+from pandas.util._decorators import (Appender, cache_readonly,
+                                     deprecate_kwarg, Substitution)
 from pandas.core.common import AbstractMethodError
 
 _shared_docs = dict()
diff --git a/pandas/core/categorical.py b/pandas/core/categorical.py
index a3667e932..7eb86232c 100644
--- a/pandas/core/categorical.py
+++ b/pandas/core/categorical.py
@@ -34,11 +34,11 @@ from pandas.core.base import (PandasObject, PandasDelegate,
 import pandas.core.common as com
 from pandas.core.missing import interpolate_2d
 from pandas.compat.numpy import function as nv
-from pandas.util.decorators import (Appender, cache_readonly,
-                                    deprecate_kwarg, Substitution)
+from pandas.util._decorators import (Appender, cache_readonly,
+                                     deprecate_kwarg, Substitution)
 
-from pandas.util.terminal import get_terminal_size
-from pandas.util.validators import validate_bool_kwarg
+from pandas.io.formats.terminal import get_terminal_size
+from pandas.util._validators import validate_bool_kwarg
 from pandas.core.config import get_option
 
 
diff --git a/pandas/core/computation/eval.py b/pandas/core/computation/eval.py
index 15e13025a..22e376306 100644
--- a/pandas/core/computation/eval.py
+++ b/pandas/core/computation/eval.py
@@ -11,7 +11,7 @@ from pandas.core.computation.expr import Expr, _parsers, tokenize_string
 from pandas.core.computation.scope import _ensure_scope
 from pandas.compat import string_types
 from pandas.core.computation.engines import _engines
-from pandas.util.validators import validate_bool_kwarg
+from pandas.util._validators import validate_bool_kwarg
 
 
 def _check_engine(engine):
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 67966374f..e6ea58e7e 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -80,8 +80,8 @@ from pandas.compat import (range, map, zip, lrange, lmap, lzip, StringIO, u,
                            OrderedDict, raise_with_traceback)
 from pandas import compat
 from pandas.compat.numpy import function as nv
-from pandas.util.decorators import Appender, Substitution
-from pandas.util.validators import validate_bool_kwarg
+from pandas.util._decorators import Appender, Substitution
+from pandas.util._validators import validate_bool_kwarg
 
 from pandas.core.indexes.period import PeriodIndex
 from pandas.core.indexes.datetimes import DatetimeIndex
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 2bc64795b..27a489293 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -51,8 +51,8 @@ from pandas.compat.numpy import function as nv
 from pandas.compat import (map, zip, lzip, lrange, string_types,
                            isidentifier, set_function_name)
 import pandas.core.nanops as nanops
-from pandas.util.decorators import Appender, Substitution, deprecate_kwarg
-from pandas.util.validators import validate_bool_kwarg
+from pandas.util._decorators import Appender, Substitution, deprecate_kwarg
+from pandas.util._validators import validate_bool_kwarg
 from pandas.core import config
 
 # goal is to be able to define the docs close to function, while still being
@@ -1382,7 +1382,7 @@ class NDFrame(PandasObject, SelectionMixin):
           - Windows: none
           - OS X: none
         """
-        from pandas.io import clipboard
+        from pandas.io.clipboard import clipboard
         clipboard.to_clipboard(self, excel=excel, sep=sep, **kwargs)
 
     def to_xarray(self):
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 479d2f7d2..91b55c414 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -54,10 +54,10 @@ from pandas.core.panel import Panel
 from pandas.core.sorting import (get_group_index_sorter, get_group_index,
                                  compress_group_index, get_flattened_iterator,
                                  decons_obs_group_ids, get_indexer_dict)
-from pandas.util.decorators import (cache_readonly, Substitution,
-                                    Appender, make_signature)
+from pandas.util._decorators import (cache_readonly, Substitution,
+                                     Appender, make_signature)
 from pandas.io.formats.printing import pprint_thing
-from pandas.util.validators import validate_kwargs
+from pandas.util._validators import validate_kwargs
 
 import pandas.core.algorithms as algorithms
 import pandas.core.common as com
diff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py
index 4345c7466..82f3bf3b1 100644
--- a/pandas/core/indexes/base.py
+++ b/pandas/core/indexes/base.py
@@ -41,8 +41,8 @@ from pandas.core.common import (is_bool_indexer,
 
 from pandas.core.base import PandasObject, IndexOpsMixin
 import pandas.core.base as base
-from pandas.util.decorators import (Appender, Substitution, cache_readonly,
-                                    deprecate, deprecate_kwarg)
+from pandas.util._decorators import (Appender, Substitution, cache_readonly,
+                                     deprecate, deprecate_kwarg)
 from pandas.core.indexes.frozen import FrozenList
 import pandas.core.common as com
 import pandas.core.dtypes.concat as _concat
diff --git a/pandas/core/indexes/category.py b/pandas/core/indexes/category.py
index 760db4ba2..395513d7b 100644
--- a/pandas/core/indexes/category.py
+++ b/pandas/core/indexes/category.py
@@ -16,7 +16,7 @@ from pandas.core.dtypes.missing import array_equivalent
 from pandas.core.algorithms import take_1d
 
 
-from pandas.util.decorators import Appender, cache_readonly
+from pandas.util._decorators import Appender, cache_readonly
 from pandas.core.config import get_option
 from pandas.core.indexes.base import Index, _index_shared_docs
 import pandas.core.base as base
diff --git a/pandas/core/indexes/datetimelike.py b/pandas/core/indexes/datetimelike.py
index 387209ceb..cd8559bcc 100644
--- a/pandas/core/indexes/datetimelike.py
+++ b/pandas/core/indexes/datetimelike.py
@@ -28,7 +28,7 @@ from pandas._libs import (tslib as libts, lib,
 from pandas._libs.period import Period
 
 from pandas.core.indexes.base import Index, _index_shared_docs
-from pandas.util.decorators import Appender, cache_readonly
+from pandas.util._decorators import Appender, cache_readonly
 import pandas.core.dtypes.concat as _concat
 import pandas.tseries.frequencies as frequencies
 
diff --git a/pandas/core/indexes/datetimes.py b/pandas/core/indexes/datetimes.py
index b0264759f..ec678b157 100644
--- a/pandas/core/indexes/datetimes.py
+++ b/pandas/core/indexes/datetimes.py
@@ -41,8 +41,8 @@ from pandas.tseries.offsets import DateOffset, generate_range, Tick, CDay
 from pandas.core.tools.datetimes import (
     parse_time_string, normalize_date, to_time)
 from pandas.core.tools.timedeltas import to_timedelta
-from pandas.util.decorators import (Appender, cache_readonly,
-                                    deprecate_kwarg, Substitution)
+from pandas.util._decorators import (Appender, cache_readonly,
+                                     deprecate_kwarg, Substitution)
 import pandas.core.common as com
 import pandas.tseries.offsets as offsets
 import pandas.core.tools.datetimes as tools
diff --git a/pandas/core/indexes/interval.py b/pandas/core/indexes/interval.py
index ccd0d8bee..039346cba 100644
--- a/pandas/core/indexes/interval.py
+++ b/pandas/core/indexes/interval.py
@@ -28,7 +28,7 @@ from pandas._libs.interval import (
 from pandas.core.indexes.multi import MultiIndex
 from pandas.compat.numpy import function as nv
 from pandas.core import common as com
-from pandas.util.decorators import cache_readonly, Appender
+from pandas.util._decorators import cache_readonly, Appender
 from pandas.core.config import get_option
 
 import pandas.core.indexes.base as ibase
diff --git a/pandas/core/indexes/multi.py b/pandas/core/indexes/multi.py
index c760d2943..7ef037d8f 100644
--- a/pandas/core/indexes/multi.py
+++ b/pandas/core/indexes/multi.py
@@ -26,8 +26,8 @@ from pandas.core.common import (_values_from_object,
                                 is_null_slice)
 
 import pandas.core.base as base
-from pandas.util.decorators import (Appender, cache_readonly,
-                                    deprecate, deprecate_kwarg)
+from pandas.util._decorators import (Appender, cache_readonly,
+                                     deprecate, deprecate_kwarg)
 import pandas.core.common as com
 import pandas.core.missing as missing
 import pandas.core.algorithms as algos
@@ -718,7 +718,7 @@ class MultiIndex(Index):
     @cache_readonly
     def _hashed_values(self):
         """ return a uint64 ndarray of my hashed values """
-        from pandas.util.hashing import hash_tuples
+        from pandas.core.util.hashing import hash_tuples
         return hash_tuples(self)
 
     def _hashed_indexing_key(self, key):
@@ -740,7 +740,7 @@ class MultiIndex(Index):
         we need to stringify if we have mixed levels
 
         """
-        from pandas.util.hashing import hash_tuples
+        from pandas.core.util.hashing import hash_tuples
 
         if not isinstance(key, tuple):
             return hash_tuples(key)
diff --git a/pandas/core/indexes/numeric.py b/pandas/core/indexes/numeric.py
index 21ba2a386..bdae0ac7a 100644
--- a/pandas/core/indexes/numeric.py
+++ b/pandas/core/indexes/numeric.py
@@ -11,7 +11,7 @@ from pandas import compat
 from pandas.core import algorithms
 from pandas.core.indexes.base import (
     Index, InvalidIndexError, _index_shared_docs)
-from pandas.util.decorators import Appender, cache_readonly
+from pandas.util._decorators import Appender, cache_readonly
 import pandas.core.indexes.base as ibase
 
 
diff --git a/pandas/core/indexes/period.py b/pandas/core/indexes/period.py
index 378661a49..15fd9b7dc 100644
--- a/pandas/core/indexes/period.py
+++ b/pandas/core/indexes/period.py
@@ -40,8 +40,8 @@ from pandas.core.base import _shared_docs
 from pandas.core.indexes.base import _index_shared_docs, _ensure_index
 
 from pandas import compat
-from pandas.util.decorators import (Appender, Substitution, cache_readonly,
-                                    deprecate_kwarg)
+from pandas.util._decorators import (Appender, Substitution, cache_readonly,
+                                     deprecate_kwarg)
 from pandas.compat import zip, u
 
 import pandas.core.indexes.base as ibase
diff --git a/pandas/core/indexes/range.py b/pandas/core/indexes/range.py
index acd040693..b7a8e0b54 100644
--- a/pandas/core/indexes/range.py
+++ b/pandas/core/indexes/range.py
@@ -13,7 +13,7 @@ from pandas import compat
 from pandas.compat import lrange, range
 from pandas.compat.numpy import function as nv
 from pandas.core.indexes.base import Index, _index_shared_docs
-from pandas.util.decorators import Appender, cache_readonly
+from pandas.util._decorators import Appender, cache_readonly
 import pandas.core.indexes.base as ibase
 
 from pandas.core.indexes.numeric import Int64Index
diff --git a/pandas/core/indexes/timedeltas.py b/pandas/core/indexes/timedeltas.py
index 1081787b2..ab94a5bff 100644
--- a/pandas/core/indexes/timedeltas.py
+++ b/pandas/core/indexes/timedeltas.py
@@ -27,7 +27,7 @@ from pandas.core.base import _shared_docs
 from pandas.core.indexes.base import _index_shared_docs
 import pandas.core.common as com
 import pandas.core.dtypes.concat as _concat
-from pandas.util.decorators import Appender, Substitution, deprecate_kwarg
+from pandas.util._decorators import Appender, Substitution, deprecate_kwarg
 from pandas.core.indexes.datetimelike import TimelikeOps, DatetimeIndexOpsMixin
 from pandas.core.tools.timedeltas import (
     to_timedelta, _coerce_scalar_to_timedelta_type)
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 840206977..15851a172 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -64,8 +64,8 @@ from pandas._libs.tslib import Timedelta
 from pandas._libs.lib import BlockPlacement
 
 import pandas.core.computation.expressions as expressions
-from pandas.util.decorators import cache_readonly
-from pandas.util.validators import validate_bool_kwarg
+from pandas.util._decorators import cache_readonly
+from pandas.util._validators import validate_bool_kwarg
 
 from pandas import compat, _np_version_under1p9
 from pandas.compat import range, map, zip, u
diff --git a/pandas/core/ops.py b/pandas/core/ops.py
index 41a17a095..e7cfbdb0f 100644
--- a/pandas/core/ops.py
+++ b/pandas/core/ops.py
@@ -15,7 +15,7 @@ from pandas._libs import (lib, index as libindex,
                           tslib as libts, algos as libalgos, iNaT)
 
 from pandas import compat
-from pandas.util.decorators import Appender
+from pandas.util._decorators import Appender
 import pandas.core.computation.expressions as expressions
 
 from pandas.compat import bind_method
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 39d2ebdee..d1f5b4587 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -34,7 +34,7 @@ from pandas.core.internals import (BlockManager,
 from pandas.core.ops import _op_descriptions
 from pandas.core.series import Series
 from pandas.core.reshape.util import cartesian_product
-from pandas.util.decorators import (deprecate, Appender)
+from pandas.util._decorators import (deprecate, Appender)
 
 _shared_doc_kwargs = dict(
     axes='items, major_axis, minor_axis',
diff --git a/pandas/core/resample.py b/pandas/core/resample.py
index cbb2f6a93..631b91c3a 100644
--- a/pandas/core/resample.py
+++ b/pandas/core/resample.py
@@ -25,7 +25,7 @@ from pandas._libs import lib, tslib
 from pandas._libs.lib import Timestamp
 from pandas._libs.period import IncompatibleFrequency
 
-from pandas.util.decorators import Appender
+from pandas.util._decorators import Appender
 from pandas.core.generic import _shared_docs
 _shared_docs_kwargs = dict()
 
diff --git a/pandas/core/reshape/merge.py b/pandas/core/reshape/merge.py
index 1ca3786ec..c55f4b5bf 100644
--- a/pandas/core/reshape/merge.py
+++ b/pandas/core/reshape/merge.py
@@ -34,7 +34,7 @@ from pandas.core.dtypes.common import (
 from pandas.core.dtypes.missing import na_value_for_dtype
 from pandas.core.internals import (items_overlap_with_suffix,
                                    concatenate_block_managers)
-from pandas.util.decorators import Appender, Substitution
+from pandas.util._decorators import Appender, Substitution
 
 from pandas.core.sorting import is_int64_overflow_possible
 import pandas.core.algorithms as algos
diff --git a/pandas/core/reshape/reshape.py b/pandas/core/reshape/reshape.py
index a3cf80d75..779002b30 100644
--- a/pandas/core/reshape/reshape.py
+++ b/pandas/core/reshape/reshape.py
@@ -20,7 +20,7 @@ from pandas.core.frame import DataFrame
 
 from pandas.core.sparse.api import SparseDataFrame, SparseSeries
 from pandas.core.sparse.array import SparseArray
-from pandas.core.sparse.libsparse import IntIndex
+from pandas._libs.sparse import IntIndex
 
 from pandas.core.categorical import Categorical, _factorize_from_iterable
 from pandas.core.sorting import (get_group_index, get_compressed_ids,
@@ -30,7 +30,7 @@ import pandas.core.algorithms as algos
 from pandas._libs import algos as _algos, reshape as _reshape
 
 from pandas.core.frame import _shared_docs
-from pandas.util.decorators import Appender
+from pandas.util._decorators import Appender
 from pandas.core.index import MultiIndex, _get_na_value
 
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index e5f1d91ee..6ec163bba 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -60,7 +60,7 @@ from pandas.core.indexes.datetimes import DatetimeIndex
 from pandas.core.indexes.timedeltas import TimedeltaIndex
 from pandas.core.indexes.period import PeriodIndex
 from pandas import compat
-from pandas.util.terminal import get_terminal_size
+from pandas.io.formats.terminal import get_terminal_size
 from pandas.compat import zip, u, OrderedDict, StringIO
 from pandas.compat.numpy import function as nv
 
@@ -70,8 +70,8 @@ import pandas.core.algorithms as algorithms
 import pandas.core.common as com
 import pandas.core.nanops as nanops
 import pandas.io.formats.format as fmt
-from pandas.util.decorators import Appender, deprecate_kwarg, Substitution
-from pandas.util.validators import validate_bool_kwarg
+from pandas.util._decorators import Appender, deprecate_kwarg, Substitution
+from pandas.util._validators import validate_bool_kwarg
 
 from pandas._libs import index as libindex, tslib as libts, lib, iNaT
 from pandas.core.config import get_option
diff --git a/pandas/core/sparse/array.py b/pandas/core/sparse/array.py
index ef3600266..8ac9d3916 100644
--- a/pandas/core/sparse/array.py
+++ b/pandas/core/sparse/array.py
@@ -29,13 +29,13 @@ from pandas.core.dtypes.cast import (
     astype_nansafe, find_common_type)
 from pandas.core.dtypes.missing import isnull, notnull, na_value_for_dtype
 
-from pandas.core.sparse import libsparse as splib
-from pandas.core.sparse.libsparse import SparseIndex, BlockIndex, IntIndex
+import pandas._libs.sparse as splib
+from pandas._libs.sparse import SparseIndex, BlockIndex, IntIndex
 from pandas._libs import index as libindex
 import pandas.core.algorithms as algos
 import pandas.core.ops as ops
 import pandas.io.formats.printing as printing
-from pandas.util.decorators import Appender
+from pandas.util._decorators import Appender
 from pandas.core.indexes.base import _index_shared_docs
 
 
diff --git a/pandas/core/sparse/frame.py b/pandas/core/sparse/frame.py
index 05c97fac4..3c8f6e8c6 100644
--- a/pandas/core/sparse/frame.py
+++ b/pandas/core/sparse/frame.py
@@ -25,8 +25,8 @@ from pandas.core.internals import (BlockManager,
                                    create_block_manager_from_arrays)
 import pandas.core.generic as generic
 from pandas.core.sparse.series import SparseSeries, SparseArray
-from pandas.core.sparse.libsparse import BlockIndex, get_blocks
-from pandas.util.decorators import Appender
+from pandas._libs.sparse import BlockIndex, get_blocks
+from pandas.util._decorators import Appender
 import pandas.core.ops as ops
 
 
diff --git a/pandas/core/sparse/list.py b/pandas/core/sparse/list.py
index e69ad6d0a..e2a8c6a29 100644
--- a/pandas/core/sparse/list.py
+++ b/pandas/core/sparse/list.py
@@ -5,8 +5,8 @@ from pandas.io.formats.printing import pprint_thing
 
 from pandas.core.dtypes.common import is_scalar
 from pandas.core.sparse.array import SparseArray
-from pandas.util.validators import validate_bool_kwarg
-from pandas.core.sparse import libsparse as splib
+from pandas.util._validators import validate_bool_kwarg
+import pandas._libs.sparse as splib
 
 
 class SparseList(PandasObject):
diff --git a/pandas/core/sparse/series.py b/pandas/core/sparse/series.py
index a77bce8f0..9dd061e26 100644
--- a/pandas/core/sparse/series.py
+++ b/pandas/core/sparse/series.py
@@ -21,13 +21,13 @@ from pandas.core import generic
 import pandas.core.common as com
 import pandas.core.ops as ops
 import pandas._libs.index as _index
-from pandas.util.decorators import Appender
+from pandas.util._decorators import Appender
 
 from pandas.core.sparse.array import (
     make_sparse, _sparse_array_op, SparseArray,
     _make_index)
-from pandas.core.sparse.libsparse import BlockIndex, IntIndex
-import pandas.core.sparse.libsparse as splib
+from pandas._libs.sparse import BlockIndex, IntIndex
+import pandas._libs.sparse as splib
 
 from pandas.core.sparse.scipy_sparse import (
     _sparse_series_to_coo,
diff --git a/pandas/core/strings.py b/pandas/core/strings.py
index 5082ac7f8..c57d7a936 100644
--- a/pandas/core/strings.py
+++ b/pandas/core/strings.py
@@ -17,7 +17,7 @@ from pandas.core.common import _values_from_object
 from pandas.core.algorithms import take_1d
 import pandas.compat as compat
 from pandas.core.base import AccessorProperty, NoNewAttributesMixin
-from pandas.util.decorators import Appender
+from pandas.util._decorators import Appender
 import re
 import pandas._libs.lib as lib
 import warnings
diff --git a/pandas/util/importing.py b/pandas/core/util/__init__.py
similarity index 100%
rename from pandas/util/importing.py
rename to pandas/core/util/__init__.py
diff --git a/pandas/util/hashing.py b/pandas/core/util/hashing.py
similarity index 94%
rename from pandas/util/hashing.py
rename to pandas/core/util/hashing.py
index 3046c62a0..6a5343e8a 100644
--- a/pandas/util/hashing.py
+++ b/pandas/core/util/hashing.py
@@ -4,10 +4,10 @@ data hash pandas / numpy objects
 import itertools
 
 import numpy as np
-from pandas import Series, factorize, Categorical, Index, MultiIndex
-from pandas.util import libhashing as _hash
+from pandas._libs import hashing
 from pandas._libs.lib import is_bool_array
 from pandas.core.dtypes.generic import (
+    ABCMultiIndex,
     ABCIndexClass,
     ABCSeries,
     ABCDataFrame)
@@ -73,10 +73,11 @@ def hash_pandas_object(obj, index=True, encoding='utf8', hash_key=None,
     Series of uint64, same length as the object
 
     """
+    from pandas import Series
     if hash_key is None:
         hash_key = _default_hash_key
 
-    if isinstance(obj, MultiIndex):
+    if isinstance(obj, ABCMultiIndex):
         return Series(hash_tuples(obj, encoding, hash_key),
                       dtype='uint64', copy=False)
 
@@ -143,7 +144,9 @@ def hash_tuples(vals, encoding='utf8', hash_key=None):
     elif not is_list_like(vals):
         raise TypeError("must be convertible to a list-of-tuples")
 
-    if not isinstance(vals, MultiIndex):
+    from pandas import Categorical, MultiIndex
+
+    if not isinstance(vals, ABCMultiIndex):
         vals = MultiIndex.from_tuples(vals)
 
     # create a list-of-Categoricals
@@ -257,17 +260,18 @@ def hash_array(vals, encoding='utf8', hash_key=None, categorize=True):
         # then hash and rename categories. We allow skipping the categorization
         # when the values are known/likely to be unique.
         if categorize:
+            from pandas import factorize, Categorical, Index
             codes, categories = factorize(vals, sort=False)
             cat = Categorical(codes, Index(categories),
                               ordered=False, fastpath=True)
             return _hash_categorical(cat, encoding, hash_key)
 
         try:
-            vals = _hash.hash_object_array(vals, hash_key, encoding)
+            vals = hashing.hash_object_array(vals, hash_key, encoding)
         except TypeError:
             # we have mixed types
-            vals = _hash.hash_object_array(vals.astype(str).astype(object),
-                                           hash_key, encoding)
+            vals = hashing.hash_object_array(vals.astype(str).astype(object),
+                                             hash_key, encoding)
 
     # Then, redistribute these 64-bit ints within the space of 64-bit ints
     vals ^= vals >> 30
diff --git a/pandas/core/window.py b/pandas/core/window.py
index 6d8f12e98..df8e0c050 100644
--- a/pandas/core/window.py
+++ b/pandas/core/window.py
@@ -33,12 +33,12 @@ import pandas as pd
 from pandas.core.base import (PandasObject, SelectionMixin,
                               GroupByMixin)
 import pandas.core.common as com
-import pandas.core.libwindow as _window
+import pandas._libs.window as _window
 from pandas.tseries.offsets import DateOffset
 from pandas import compat
 from pandas.compat.numpy import function as nv
-from pandas.util.decorators import (Substitution, Appender,
-                                    cache_readonly)
+from pandas.util._decorators import (Substitution, Appender,
+                                     cache_readonly)
 from pandas.core.generic import _shared_docs
 from textwrap import dedent
 
diff --git a/pandas/io/api.py b/pandas/io/api.py
index e312e7bc2..7f0d3c363 100644
--- a/pandas/io/api.py
+++ b/pandas/io/api.py
@@ -5,7 +5,7 @@ Data IO api
 # flake8: noqa
 
 from pandas.io.parsers import read_csv, read_table, read_fwf
-from pandas.io.clipboard import read_clipboard
+from pandas.io.clipboard.clipboard import read_clipboard
 from pandas.io.excel import ExcelFile, ExcelWriter, read_excel
 from pandas.io.pytables import HDFStore, get_store, read_hdf
 from pandas.io.json import read_json
diff --git a/pandas/util/clipboard/__init__.py b/pandas/io/clipboard/__init__.py
similarity index 100%
rename from pandas/util/clipboard/__init__.py
rename to pandas/io/clipboard/__init__.py
diff --git a/pandas/io/clipboard.py b/pandas/io/clipboard/clipboard.py
similarity index 97%
rename from pandas/io/clipboard.py
rename to pandas/io/clipboard/clipboard.py
index 3c7ac528d..6252a02b0 100644
--- a/pandas/io/clipboard.py
+++ b/pandas/io/clipboard/clipboard.py
@@ -26,7 +26,7 @@ def read_clipboard(sep='\s+', **kwargs):  # pragma: no cover
         raise NotImplementedError(
             'reading from clipboard only supports utf-8 encoding')
 
-    from pandas.util.clipboard import clipboard_get
+    from pandas.io.clipboard import clipboard_get
     from pandas.io.parsers import read_table
     text = clipboard_get()
 
@@ -92,7 +92,7 @@ def to_clipboard(obj, excel=None, sep=None, **kwargs):  # pragma: no cover
     if encoding is not None and encoding.lower().replace('-', '') != 'utf8':
         raise ValueError('clipboard only supports utf-8 encoding')
 
-    from pandas.util.clipboard import clipboard_set
+    from pandas.io.clipboard import clipboard_set
     if excel is None:
         excel = True
 
diff --git a/pandas/util/clipboard/clipboards.py b/pandas/io/clipboard/clipboards.py
similarity index 100%
rename from pandas/util/clipboard/clipboards.py
rename to pandas/io/clipboard/clipboards.py
diff --git a/pandas/util/clipboard/exceptions.py b/pandas/io/clipboard/exceptions.py
similarity index 100%
rename from pandas/util/clipboard/exceptions.py
rename to pandas/io/clipboard/exceptions.py
diff --git a/pandas/util/clipboard/windows.py b/pandas/io/clipboard/windows.py
similarity index 100%
rename from pandas/util/clipboard/windows.py
rename to pandas/io/clipboard/windows.py
diff --git a/pandas/io/excel.py b/pandas/io/excel.py
index fbb10ebdf..9b0f49ccc 100644
--- a/pandas/io/excel.py
+++ b/pandas/io/excel.py
@@ -20,7 +20,7 @@ from pandas.errors import EmptyDataError
 from pandas.io.common import (_is_url, _urlopen, _validate_header_arg,
                               get_filepath_or_buffer, _NA_VALUES)
 from pandas.core.indexes.period import Period
-from pandas.io.json import libjson
+import pandas._libs.json as json
 from pandas.compat import (map, zip, reduce, range, lrange, u, add_metaclass,
                            string_types, OrderedDict)
 from pandas.core import config
@@ -29,7 +29,7 @@ import pandas.compat as compat
 import pandas.compat.openpyxl_compat as openpyxl_compat
 from warnings import warn
 from distutils.version import LooseVersion
-from pandas.util.decorators import Appender
+from pandas.util._decorators import Appender
 from textwrap import fill
 
 __all__ = ["read_excel", "ExcelWriter", "ExcelFile"]
@@ -1447,7 +1447,7 @@ class _XlwtWriter(ExcelWriter):
             elif isinstance(cell.val, date):
                 num_format_str = self.date_format
 
-            stylekey = libjson.dumps(cell.style)
+            stylekey = json.dumps(cell.style)
             if num_format_str:
                 stylekey += num_format_str
 
@@ -1575,7 +1575,7 @@ class _XlsxWriter(ExcelWriter):
             elif isinstance(cell.val, date):
                 num_format_str = self.date_format
 
-            stylekey = libjson.dumps(cell.style)
+            stylekey = json.dumps(cell.style)
             if num_format_str:
                 stylekey += num_format_str
 
diff --git a/pandas/io/formats/console.py b/pandas/io/formats/console.py
index 0e46b0073..ab75e3fa2 100644
--- a/pandas/io/formats/console.py
+++ b/pandas/io/formats/console.py
@@ -4,7 +4,7 @@ Internal module for console introspection
 
 import sys
 import locale
-from pandas.util.terminal import get_terminal_size
+from pandas.io.formats.terminal import get_terminal_size
 
 # -----------------------------------------------------------------------------
 # Global formatting options
diff --git a/pandas/io/formats/format.py b/pandas/io/formats/format.py
index 43b0b5fbe..65098bb2a 100644
--- a/pandas/io/formats/format.py
+++ b/pandas/io/formats/format.py
@@ -30,7 +30,7 @@ from pandas.core.index import Index, MultiIndex, _ensure_index
 from pandas import compat
 from pandas.compat import (StringIO, lzip, range, map, zip, u,
                            OrderedDict, unichr)
-from pandas.util.terminal import get_terminal_size
+from pandas.io.formats.terminal import get_terminal_size
 from pandas.core.config import get_option, set_option
 from pandas.io.common import _get_handle, UnicodeWriter, _expand_user
 from pandas.io.formats.printing import adjoin, justify, pprint_thing
diff --git a/pandas/io/formats/style.py b/pandas/io/formats/style.py
index 71c61998b..eac82ddde 100644
--- a/pandas/io/formats/style.py
+++ b/pandas/io/formats/style.py
@@ -29,7 +29,7 @@ from pandas.core.config import get_option
 from pandas.core.generic import _shared_docs
 import pandas.core.common as com
 from pandas.core.indexing import _maybe_numeric_slice, _non_reducing_slice
-from pandas.util.decorators import Appender
+from pandas.util._decorators import Appender
 try:
     import matplotlib.pyplot as plt
     from matplotlib import colors
diff --git a/pandas/util/terminal.py b/pandas/io/formats/terminal.py
similarity index 100%
rename from pandas/util/terminal.py
rename to pandas/io/formats/terminal.py
diff --git a/pandas/io/json/json.py b/pandas/io/json/json.py
index 28ea8298c..b2fe07473 100644
--- a/pandas/io/json/json.py
+++ b/pandas/io/json/json.py
@@ -2,7 +2,7 @@
 import os
 import numpy as np
 
-from pandas.io.json import libjson
+import pandas._libs.json as json
 from pandas._libs.tslib import iNaT
 from pandas.compat import StringIO, long, u
 from pandas import compat, isnull
@@ -14,8 +14,8 @@ from .normalize import _convert_to_line_delimits
 from .table_schema import build_table_schema
 from pandas.core.dtypes.common import is_period_dtype
 
-loads = libjson.loads
-dumps = libjson.dumps
+loads = json.loads
+dumps = json.dumps
 
 TABLE_SCHEMA_VERSION = '0.20.0'
 
diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index 95b1394c8..ce8643504 100755
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -37,10 +37,10 @@ from pandas.io.common import (get_filepath_or_buffer, _validate_header_arg,
                               _NA_VALUES, _infer_compression)
 from pandas.core.tools import datetimes as tools
 
-from pandas.util.decorators import Appender
+from pandas.util._decorators import Appender
 
 import pandas._libs.lib as lib
-import pandas.io.libparsers as libparsers
+import pandas._libs.parsers as parsers
 
 
 # BOM character (byte order mark)
@@ -1460,7 +1460,7 @@ class ParserBase(object):
 
             if issubclass(cvals.dtype.type, np.integer) and self.compact_ints:
                 cvals = lib.downcast_int64(
-                    cvals, libparsers.na_values,
+                    cvals, parsers.na_values,
                     self.use_unsigned)
 
             result[c] = cvals
@@ -1579,7 +1579,7 @@ class CParserWrapper(ParserBase):
         # #2442
         kwds['allow_leading_cols'] = self.index_col is not False
 
-        self._reader = libparsers.TextReader(src, **kwds)
+        self._reader = parsers.TextReader(src, **kwds)
 
         # XXX
         self.usecols, self.usecols_dtype = _validate_usecols_arg(
diff --git a/pandas/io/sas/sas7bdat.py b/pandas/io/sas/sas7bdat.py
index d33cee2c5..20b0cf85e 100644
--- a/pandas/io/sas/sas7bdat.py
+++ b/pandas/io/sas/sas7bdat.py
@@ -20,7 +20,7 @@ from pandas.io.common import get_filepath_or_buffer, BaseIterator
 import numpy as np
 import struct
 import pandas.io.sas.sas_constants as const
-from pandas.io.sas.libsas import Parser
+from pandas.io.sas._sas import Parser
 
 
 class _subheader_pointer(object):
diff --git a/pandas/io/sas/sas_xport.py b/pandas/io/sas/sas_xport.py
index 76fc55154..a43a5988a 100644
--- a/pandas/io/sas/sas_xport.py
+++ b/pandas/io/sas/sas_xport.py
@@ -14,7 +14,7 @@ from pandas.io.common import get_filepath_or_buffer, BaseIterator
 from pandas import compat
 import struct
 import numpy as np
-from pandas.util.decorators import Appender
+from pandas.util._decorators import Appender
 import warnings
 
 _correct_line1 = ("HEADER RECORD*******LIBRARY HEADER RECORD!!!!!!!"
diff --git a/pandas/io/stata.py b/pandas/io/stata.py
index 691582629..55cac8380 100644
--- a/pandas/io/stata.py
+++ b/pandas/io/stata.py
@@ -27,7 +27,7 @@ import datetime
 from pandas import compat, to_timedelta, to_datetime, isnull, DatetimeIndex
 from pandas.compat import lrange, lmap, lzip, text_type, string_types, range, \
     zip, BytesIO
-from pandas.util.decorators import Appender
+from pandas.util._decorators import Appender
 import pandas as pd
 
 from pandas.io.common import get_filepath_or_buffer, BaseIterator
diff --git a/pandas/json.py b/pandas/json.py
index 5b1e395fa..0b87aa223 100644
--- a/pandas/json.py
+++ b/pandas/json.py
@@ -4,4 +4,4 @@ import warnings
 warnings.warn("The pandas.json module is deprecated and will be "
               "removed in a future version. Please import from "
               "the pandas.io.json instead", FutureWarning, stacklevel=2)
-from pandas.io.json.libjson import dumps, loads
+from pandas._libs.json import dumps, loads
diff --git a/pandas/parser.py b/pandas/parser.py
index af203c3df..c0c3bf317 100644
--- a/pandas/parser.py
+++ b/pandas/parser.py
@@ -4,5 +4,5 @@ import warnings
 warnings.warn("The pandas.parser module is deprecated and will be "
               "removed in a future version. Please import from "
               "the pandas.io.parser instead", FutureWarning, stacklevel=2)
-from pandas.io.libparsers import na_values
+from pandas._libs.parsers import na_values
 from pandas.io.common import CParserError
diff --git a/pandas/plotting/_core.py b/pandas/plotting/_core.py
index c3476d144..e88979b14 100644
--- a/pandas/plotting/_core.py
+++ b/pandas/plotting/_core.py
@@ -9,7 +9,7 @@ from distutils.version import LooseVersion
 
 import numpy as np
 
-from pandas.util.decorators import cache_readonly
+from pandas.util._decorators import cache_readonly
 from pandas.core.base import PandasObject
 from pandas.core.dtypes.common import (
     is_list_like,
@@ -25,7 +25,7 @@ from pandas.core.indexes.period import PeriodIndex
 from pandas.compat import range, lrange, map, zip, string_types
 import pandas.compat as compat
 from pandas.io.formats.printing import pprint_thing
-from pandas.util.decorators import Appender
+from pandas.util._decorators import Appender
 
 from pandas.plotting._compat import (_mpl_ge_1_3_1,
                                      _mpl_ge_1_5_0)
diff --git a/pandas/plotting/_misc.py b/pandas/plotting/_misc.py
index 93eceba9a..20ada033c 100644
--- a/pandas/plotting/_misc.py
+++ b/pandas/plotting/_misc.py
@@ -4,7 +4,7 @@ from __future__ import division
 
 import numpy as np
 
-from pandas.util.decorators import deprecate_kwarg
+from pandas.util._decorators import deprecate_kwarg
 from pandas.core.dtypes.missing import notnull
 from pandas.compat import range, lrange, lmap, zip
 from pandas.io.formats.printing import pprint_thing
diff --git a/pandas/stats/moments.py b/pandas/stats/moments.py
index f98ffa26e..f6c3a08c6 100644
--- a/pandas/stats/moments.py
+++ b/pandas/stats/moments.py
@@ -8,7 +8,7 @@ import warnings
 import numpy as np
 from pandas.core.dtypes.common import is_scalar
 from pandas.core.api import DataFrame, Series
-from pandas.util.decorators import Substitution, Appender
+from pandas.util._decorators import Substitution, Appender
 
 __all__ = ['rolling_count', 'rolling_max', 'rolling_min',
            'rolling_sum', 'rolling_mean', 'rolling_std', 'rolling_cov',
diff --git a/pandas/tests/dtypes/test_io.py b/pandas/tests/dtypes/test_io.py
index 58a1c3540..ae92e9ecc 100644
--- a/pandas/tests/dtypes/test_io.py
+++ b/pandas/tests/dtypes/test_io.py
@@ -73,7 +73,7 @@ class TestParseSQL(object):
         tm.assert_numpy_array_equal(result, expected)
 
     def test_convert_downcast_int64(self):
-        from pandas.io.libparsers import na_values
+        from pandas._libs.parsers import na_values
 
         arr = np.array([1, 2, 7, 8, 10], dtype=np.int64)
         expected = np.array([1, 2, 7, 8, 10], dtype=np.int8)
diff --git a/pandas/tests/frame/common.py b/pandas/tests/frame/common.py
index b9cd764c8..b475d25eb 100644
--- a/pandas/tests/frame/common.py
+++ b/pandas/tests/frame/common.py
@@ -1,7 +1,7 @@
 import numpy as np
 
 from pandas import compat
-from pandas.util.decorators import cache_readonly
+from pandas.util._decorators import cache_readonly
 import pandas.util.testing as tm
 import pandas as pd
 
diff --git a/pandas/tests/io/formats/test_format.py b/pandas/tests/io/formats/test_format.py
index e99c70952..3f08013e0 100644
--- a/pandas/tests/io/formats/test_format.py
+++ b/pandas/tests/io/formats/test_format.py
@@ -29,7 +29,7 @@ import pandas.io.formats.format as fmt
 import pandas.io.formats.printing as printing
 
 import pandas.util.testing as tm
-from pandas.util.terminal import get_terminal_size
+from pandas.io.formats.terminal import get_terminal_size
 from pandas.core.config import (set_option, get_option, option_context,
                                 reset_option)
 
diff --git a/pandas/tests/io/json/test_ujson.py b/pandas/tests/io/json/test_ujson.py
index 10f99c4fc..86b0e5a0c 100644
--- a/pandas/tests/io/json/test_ujson.py
+++ b/pandas/tests/io/json/test_ujson.py
@@ -13,7 +13,7 @@ import re
 import decimal
 from functools import partial
 from pandas.compat import range, zip, StringIO, u
-import pandas.io.json.libjson as ujson
+import pandas._libs.json as ujson
 import pandas.compat as compat
 
 import numpy as np
diff --git a/pandas/tests/io/parser/test_textreader.py b/pandas/tests/io/parser/test_textreader.py
index 7cd02a07b..c9088d2ec 100644
--- a/pandas/tests/io/parser/test_textreader.py
+++ b/pandas/tests/io/parser/test_textreader.py
@@ -22,8 +22,8 @@ from pandas.util.testing import assert_frame_equal
 
 import pandas.util.testing as tm
 
-from pandas.io.libparsers import TextReader
-import pandas.io.libparsers as parser
+from pandas._libs.parsers import TextReader
+import pandas._libs.parsers as parser
 
 
 class TestTextReader(object):
diff --git a/pandas/tests/io/test_clipboard.py b/pandas/tests/io/test_clipboard.py
index 406045a69..940a331a9 100644
--- a/pandas/tests/io/test_clipboard.py
+++ b/pandas/tests/io/test_clipboard.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 import numpy as np
 from numpy.random import randint
+from textwrap import dedent
 
 import pytest
 import pandas as pd
@@ -10,7 +11,8 @@ from pandas import read_clipboard
 from pandas import get_option
 from pandas.util import testing as tm
 from pandas.util.testing import makeCustomDataframe as mkdf
-from pandas.util.clipboard.exceptions import PyperclipException
+from pandas.io.clipboard.exceptions import PyperclipException
+from pandas.io.clipboard import clipboard_set
 
 
 try:
@@ -89,8 +91,6 @@ class TestClipboard(object):
             self.check_round_trip_frame(dt)
 
     def test_read_clipboard_infer_excel(self):
-        from textwrap import dedent
-        from pandas.util.clipboard import clipboard_set
 
         text = dedent("""
             John James	Charlie Mingus
diff --git a/pandas/tests/io/test_html.py b/pandas/tests/io/test_html.py
index fa83c43ba..6da77bf42 100644
--- a/pandas/tests/io/test_html.py
+++ b/pandas/tests/io/test_html.py
@@ -23,7 +23,7 @@ from pandas.compat import (map, zip, StringIO, string_types, BytesIO,
                            is_platform_windows)
 from pandas.io.common import URLError, urlopen, file_path_to_url
 from pandas.io.html import read_html
-from pandas.io.libparsers import ParserError
+from pandas._libs.parsers import ParserError
 
 import pandas.util.testing as tm
 from pandas.util.testing import makeCustomDataframe as mkdf, network
diff --git a/pandas/tests/plotting/common.py b/pandas/tests/plotting/common.py
index ac490a00b..1dbba676e 100644
--- a/pandas/tests/plotting/common.py
+++ b/pandas/tests/plotting/common.py
@@ -7,7 +7,7 @@ import warnings
 
 from pandas import DataFrame, Series
 from pandas.compat import zip, iteritems
-from pandas.util.decorators import cache_readonly
+from pandas.util._decorators import cache_readonly
 from pandas.core.dtypes.api import is_list_like
 import pandas.util.testing as tm
 from pandas.util.testing import (ensure_clean,
diff --git a/pandas/tests/series/common.py b/pandas/tests/series/common.py
index 613961e1c..0c25dcb29 100644
--- a/pandas/tests/series/common.py
+++ b/pandas/tests/series/common.py
@@ -1,4 +1,4 @@
-from pandas.util.decorators import cache_readonly
+from pandas.util._decorators import cache_readonly
 import pandas.util.testing as tm
 import pandas as pd
 
diff --git a/pandas/tests/sparse/test_array.py b/pandas/tests/sparse/test_array.py
index ab7340c89..4ce03f72d 100644
--- a/pandas/tests/sparse/test_array.py
+++ b/pandas/tests/sparse/test_array.py
@@ -10,7 +10,7 @@ import numpy as np
 
 from pandas import _np_version_under1p8
 from pandas.core.sparse.api import SparseArray, SparseSeries
-from pandas.core.sparse.libsparse import IntIndex
+from pandas._libs.sparse import IntIndex
 from pandas.util.testing import assert_almost_equal
 import pandas.util.testing as tm
 
diff --git a/pandas/tests/sparse/test_frame.py b/pandas/tests/sparse/test_frame.py
index 4a4a596e3..0312b76ec 100644
--- a/pandas/tests/sparse/test_frame.py
+++ b/pandas/tests/sparse/test_frame.py
@@ -21,7 +21,7 @@ from pandas.compat import lrange
 from pandas import compat
 from pandas.core.sparse import frame as spf
 
-from pandas.core.sparse.libsparse import BlockIndex, IntIndex
+from pandas._libs.sparse import BlockIndex, IntIndex
 from pandas.core.sparse.api import SparseSeries, SparseDataFrame, SparseArray
 from pandas.tests.frame.test_api import SharedWithSparse
 
diff --git a/pandas/tests/sparse/test_libsparse.py b/pandas/tests/sparse/test_libsparse.py
index c41025582..4842ebdd1 100644
--- a/pandas/tests/sparse/test_libsparse.py
+++ b/pandas/tests/sparse/test_libsparse.py
@@ -8,7 +8,7 @@ import pandas.util.testing as tm
 from pandas import compat
 
 from pandas.core.sparse.array import IntIndex, BlockIndex, _make_index
-import pandas.core.sparse.libsparse as splib
+import pandas._libs.sparse as splib
 
 TEST_LENGTH = 20
 
diff --git a/pandas/tests/sparse/test_series.py b/pandas/tests/sparse/test_series.py
index 344bca54b..b524d6bfa 100644
--- a/pandas/tests/sparse/test_series.py
+++ b/pandas/tests/sparse/test_series.py
@@ -17,7 +17,7 @@ from pandas.core.reshape.util import cartesian_product
 
 import pandas.core.sparse.frame as spf
 
-from pandas.core.sparse.libsparse import BlockIndex, IntIndex
+from pandas._libs.sparse import BlockIndex, IntIndex
 from pandas.core.sparse.api import SparseSeries
 from pandas.tests.series.test_api import SharedWithSparse
 
diff --git a/pandas/tests/util/__init__.py b/pandas/tests/util/__init__.py
new file mode 100644
index 000000000..e69de29bb
diff --git a/pandas/tests/reshape/test_hashing.py b/pandas/tests/util/test_hashing.py
similarity index 94%
rename from pandas/tests/reshape/test_hashing.py
rename to pandas/tests/util/test_hashing.py
index 5f2c67ee3..e1e6e4352 100644
--- a/pandas/tests/reshape/test_hashing.py
+++ b/pandas/tests/util/test_hashing.py
@@ -5,7 +5,8 @@ import numpy as np
 import pandas as pd
 
 from pandas import DataFrame, Series, Index, MultiIndex
-from pandas.util.hashing import hash_array, hash_tuples, hash_pandas_object
+from pandas.util import hash_array, hash_pandas_object
+from pandas.core.util.hashing import hash_tuples
 import pandas.util.testing as tm
 
 
@@ -267,3 +268,18 @@ class TestHashing(object):
         result = hash_array(np.asarray(L, dtype=object), 'utf8')
         tm.assert_numpy_array_equal(
             result, np.concatenate([expected1, expected2], axis=0))
+
+
+def test_deprecation():
+
+    with tm.assert_produces_warning(DeprecationWarning,
+                                    check_stacklevel=False):
+        from pandas.tools.hashing import hash_pandas_object
+        obj = Series(list('abc'))
+        hash_pandas_object(obj, hash_key='9876543210123456')
+
+    with tm.assert_produces_warning(DeprecationWarning,
+                                    check_stacklevel=False):
+        from pandas.tools.hashing import hash_array
+        obj = np.array([1, 2, 3])
+        hash_array(obj, hash_key='9876543210123456')
diff --git a/pandas/tests/test_testing.py b/pandas/tests/util/test_testing.py
similarity index 100%
rename from pandas/tests/test_testing.py
rename to pandas/tests/util/test_testing.py
diff --git a/pandas/tests/test_util.py b/pandas/tests/util/test_util.py
similarity index 98%
rename from pandas/tests/test_util.py
rename to pandas/tests/util/test_util.py
index 2d9ab78ce..532d59622 100644
--- a/pandas/tests/test_util.py
+++ b/pandas/tests/util/test_util.py
@@ -9,10 +9,10 @@ from collections import OrderedDict
 import pytest
 from pandas.compat import intern
 from pandas.util._move import move_into_mutable_buffer, BadMove, stolenbuf
-from pandas.util.decorators import deprecate_kwarg
-from pandas.util.validators import (validate_args, validate_kwargs,
-                                    validate_args_and_kwargs,
-                                    validate_bool_kwarg)
+from pandas.util._decorators import deprecate_kwarg
+from pandas.util._validators import (validate_args, validate_kwargs,
+                                     validate_args_and_kwargs,
+                                     validate_bool_kwarg)
 
 import pandas.util.testing as tm
 
diff --git a/pandas/tools/hashing.py b/pandas/tools/hashing.py
new file mode 100644
index 000000000..ba38710b6
--- /dev/null
+++ b/pandas/tools/hashing.py
@@ -0,0 +1,18 @@
+import warnings
+import sys
+
+m = sys.modules['pandas.tools.hashing']
+for t in ['hash_pandas_object', 'hash_array']:
+
+    def outer(t=t):
+
+        def wrapper(*args, **kwargs):
+            from pandas import util
+            warnings.warn("pandas.tools.hashing is deprecated and will be "
+                          "removed in a future version, import "
+                          "from pandas.util",
+                          DeprecationWarning, stacklevel=3)
+            return getattr(util, t)(*args, **kwargs)
+        return wrapper
+
+    setattr(m, t, outer(t))
diff --git a/pandas/tseries/frequencies.py b/pandas/tseries/frequencies.py
index 06d70f145..dddf83542 100644
--- a/pandas/tseries/frequencies.py
+++ b/pandas/tseries/frequencies.py
@@ -16,7 +16,7 @@ from pandas.core.dtypes.common import (
 import pandas.core.algorithms as algos
 from pandas.core.algorithms import unique
 from pandas.tseries.offsets import DateOffset
-from pandas.util.decorators import cache_readonly, deprecate_kwarg
+from pandas.util._decorators import cache_readonly, deprecate_kwarg
 import pandas.tseries.offsets as offsets
 
 from pandas._libs import lib, tslib
diff --git a/pandas/util/__init__.py b/pandas/util/__init__.py
index e69de29bb..e86af930f 100644
--- a/pandas/util/__init__.py
+++ b/pandas/util/__init__.py
@@ -0,0 +1,2 @@
+from pandas.core.util.hashing import hash_pandas_object, hash_array   # noqa
+from pandas.util._decorators import Appender, Substitution, cache_readonly  # noqa
diff --git a/pandas/util/decorators.py b/pandas/util/_decorators.py
similarity index 100%
rename from pandas/util/decorators.py
rename to pandas/util/_decorators.py
diff --git a/pandas/util/depr_module.py b/pandas/util/_depr_module.py
similarity index 100%
rename from pandas/util/depr_module.py
rename to pandas/util/_depr_module.py
diff --git a/pandas/util/doctools.py b/pandas/util/_doctools.py
similarity index 100%
rename from pandas/util/doctools.py
rename to pandas/util/_doctools.py
diff --git a/pandas/util/print_versions.py b/pandas/util/_print_versions.py
similarity index 100%
rename from pandas/util/print_versions.py
rename to pandas/util/_print_versions.py
diff --git a/pandas/util/validators.py b/pandas/util/_validators.py
similarity index 100%
rename from pandas/util/validators.py
rename to pandas/util/_validators.py
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 0d70d5103..f6b572cdf 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -48,7 +48,7 @@ from pandas import (bdate_range, CategoricalIndex, Categorical, IntervalIndex,
                     Index, MultiIndex,
                     Series, DataFrame, Panel, Panel4D)
 
-from pandas.util import libtesting
+from pandas._libs import testing as _testing
 from pandas.io.common import urlopen
 try:
     import pytest
@@ -170,7 +170,7 @@ def assert_almost_equal(left, right, check_exact=False,
                 else:
                     obj = 'Input'
                 assert_class_equal(left, right, obj=obj)
-        return libtesting.assert_almost_equal(
+        return _testing.assert_almost_equal(
             left, right,
             check_dtype=check_dtype,
             check_less_precise=check_less_precise,
@@ -206,7 +206,7 @@ def _check_isinstance(left, right, cls):
 def assert_dict_equal(left, right, compare_keys=True):
 
     _check_isinstance(left, right, dict)
-    return libtesting.assert_dict_equal(left, right, compare_keys=compare_keys)
+    return _testing.assert_dict_equal(left, right, compare_keys=compare_keys)
 
 
 def randbool(size=(), p=0.5):
@@ -923,10 +923,10 @@ def assert_index_equal(left, right, exact='equiv', check_names=True,
                 .format(obj, np.round(diff, 5))
             raise_assert_detail(obj, msg, left, right)
     else:
-        libtesting.assert_almost_equal(left.values, right.values,
-                                       check_less_precise=check_less_precise,
-                                       check_dtype=exact,
-                                       obj=obj, lobj=left, robj=right)
+        _testing.assert_almost_equal(left.values, right.values,
+                                     check_less_precise=check_less_precise,
+                                     check_dtype=exact,
+                                     obj=obj, lobj=left, robj=right)
 
     # metadata comparison
     if check_names:
@@ -1259,10 +1259,10 @@ def assert_series_equal(left, right, check_dtype=True,
         assert_index_equal(l, r, obj='{0}.index'.format(obj))
 
     else:
-        libtesting.assert_almost_equal(left.get_values(), right.get_values(),
-                                       check_less_precise=check_less_precise,
-                                       check_dtype=check_dtype,
-                                       obj='{0}'.format(obj))
+        _testing.assert_almost_equal(left.get_values(), right.get_values(),
+                                     check_less_precise=check_less_precise,
+                                     check_dtype=check_dtype,
+                                     obj='{0}'.format(obj))
 
     # metadata comparison
     if check_names:
@@ -1476,8 +1476,8 @@ def assert_sp_array_equal(left, right, check_dtype=True):
                              check_dtype=check_dtype)
 
     # SparseIndex comparison
-    assert isinstance(left.sp_index, pd.core.sparse.libsparse.SparseIndex)
-    assert isinstance(right.sp_index, pd.core.sparse.libsparse.SparseIndex)
+    assert isinstance(left.sp_index, pd._libs.sparse.SparseIndex)
+    assert isinstance(right.sp_index, pd._libs.sparse.SparseIndex)
 
     if not left.sp_index.equals(right.sp_index):
         raise_assert_detail('SparseArray.index', 'index are not equal',
diff --git a/setup.py b/setup.py
index 6f3ddbe2a..806047a34 100755
--- a/setup.py
+++ b/setup.py
@@ -116,9 +116,9 @@ _pxi_dep_template = {
     'join': ['_libs/join_helper.pxi.in', '_libs/join_func_helper.pxi.in'],
     'reshape': ['_libs/reshape_helper.pxi.in'],
     'hashtable': ['_libs/hashtable_class_helper.pxi.in',
-                   '_libs/hashtable_func_helper.pxi.in'],
+                  '_libs/hashtable_func_helper.pxi.in'],
     'index': ['_libs/index_class_helper.pxi.in'],
-    'sparse': ['core/sparse/sparse_op_helper.pxi.in'],
+    'sparse': ['_libs/sparse_op_helper.pxi.in'],
     'interval': ['_libs/intervaltree.pxi.in']
 }
 
@@ -337,11 +337,11 @@ class CheckSDist(sdist_class):
                  'pandas/_libs/algos.pyx',
                  'pandas/_libs/join.pyx',
                  'pandas/_libs/interval.pyx',
-                 'pandas/core/window.pyx',
-                 'pandas/core/sparse/sparse.pyx',
-                 'pandas/util/testing.pyx',
-                 'pandas/tools/hash.pyx',
-                 'pandas/io/parsers.pyx',
+                 'pandas/_libs/hashing.pyx',
+                 'pandas/_libs/testing.pyx',
+                 'pandas/_libs/window.pyx',
+                 'pandas/_libs/sparse.pyx',
+                 'pandas/_libs/parsers.pyx',
                  'pandas/io/sas/sas.pyx']
 
     def initialize_options(self):
@@ -513,24 +513,24 @@ ext_data = {
     '_libs.interval': {'pyxfile': '_libs/interval',
                        'pxdfiles': ['_libs/hashtable'],
                        'depends': _pxi_dep['interval']},
-    'core.libwindow': {'pyxfile': 'core/window',
-                       'pxdfiles': ['_libs/src/skiplist', '_libs/src/util'],
-                       'depends': ['pandas/_libs/src/skiplist.pyx',
-                                   'pandas/_libs/src/skiplist.h']},
-    'io.libparsers': {'pyxfile': 'io/parsers',
+    '_libs.window': {'pyxfile': '_libs/window',
+                     'pxdfiles': ['_libs/src/skiplist', '_libs/src/util'],
+                     'depends': ['pandas/_libs/src/skiplist.pyx',
+                                 'pandas/_libs/src/skiplist.h']},
+    '_libs.parsers': {'pyxfile': '_libs/parsers',
                       'depends': ['pandas/_libs/src/parser/tokenizer.h',
                                   'pandas/_libs/src/parser/io.h',
                                   'pandas/_libs/src/numpy_helper.h'],
                       'sources': ['pandas/_libs/src/parser/tokenizer.c',
                                   'pandas/_libs/src/parser/io.c']},
-    'core.sparse.libsparse': {'pyxfile': 'core/sparse/sparse',
-                              'depends': (['pandas/core/sparse/sparse.pyx'] +
-                                     _pxi_dep['sparse'])},
-    'util.libtesting': {'pyxfile': 'util/testing',
-                        'depends': ['pandas/util/testing.pyx']},
-    'util.libhashing': {'pyxfile': 'util/hashing',
-                        'depends': ['pandas/util/hashing.pyx']},
-    'io.sas.libsas': {'pyxfile': 'io/sas/sas'},
+    '_libs.sparse': {'pyxfile': '_libs/sparse',
+                     'depends': (['pandas/core/sparse/sparse.pyx'] +
+                                 _pxi_dep['sparse'])},
+    '_libs.testing': {'pyxfile': '_libs/testing',
+                      'depends': ['pandas/_libs/testing.pyx']},
+    '_libs.hashing': {'pyxfile': '_libs/hashing',
+                      'depends': ['pandas/_libs/hashing.pyx']},
+    'io.sas._sas': {'pyxfile': 'io/sas/sas'},
     }
 
 extensions = []
@@ -596,7 +596,7 @@ if suffix == '.pyx' and 'setuptools' in sys.modules:
             root, _ = os.path.splitext(ext.sources[0])
             ext.sources[0] = root + suffix
 
-ujson_ext = Extension('pandas.io.json.libjson',
+ujson_ext = Extension('pandas._libs.json',
                       depends=['pandas/_libs/src/ujson/lib/ultrajson.h',
                                'pandas/_libs/src/datetime_helper.h',
                                'pandas/_libs/src/numpy_helper.h'],
@@ -645,6 +645,7 @@ setup(name=DISTNAME,
                 'pandas.core.reshape',
                 'pandas.core.sparse',
                 'pandas.core.tools',
+                'pandas.core.util',
                 'pandas.computation',
                 'pandas.errors',
                 'pandas.io',
@@ -652,6 +653,7 @@ setup(name=DISTNAME,
                 'pandas.io.sas',
                 'pandas.io.msgpack',
                 'pandas.io.formats',
+                'pandas.io.clipboard',
                 'pandas._libs',
                 'pandas.plotting',
                 'pandas.stats',
@@ -679,9 +681,9 @@ setup(name=DISTNAME,
                 'pandas.tests.tseries',
                 'pandas.tests.plotting',
                 'pandas.tests.tools',
+                'pandas.tests.util',
                 'pandas.tools',
                 'pandas.tseries',
-                'pandas.util.clipboard'
                 ],
       package_data={'pandas.tests': ['data/*.csv'],
                     'pandas.tests.indexes': ['data/*.pickle'],
