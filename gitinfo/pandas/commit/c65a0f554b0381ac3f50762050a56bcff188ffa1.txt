commit c65a0f554b0381ac3f50762050a56bcff188ffa1
Author: Licht Takeuchi <licht-t@outlook.jp>
Date:   Tue Oct 31 10:29:58 2017 +0900

    TST: Add tests for sparse quantile/where (#17568)

diff --git a/pandas/tests/sparse/test_frame.py b/pandas/tests/sparse/test_frame.py
index ef94e2f78..e65059156 100644
--- a/pandas/tests/sparse/test_frame.py
+++ b/pandas/tests/sparse/test_frame.py
@@ -1398,3 +1398,139 @@ class TestSparseDataFrameAnalytics(object):
                  'std', 'min', 'max']
         for func in funcs:
             getattr(np, func)(self.frame)
+
+    @pytest.mark.parametrize('data', [
+        [[1, 1], [2, 2], [3, 3], [4, 4], [0, 0]],
+        [[1.0, 1.0], [2.0, 2.0], [3.0, 3.0], [4.0, 4.0], [nan, nan]],
+        [
+            [1.0, 1.0 + 1.0j],
+            [2.0 + 2.0j, 2.0],
+            [3.0, 3.0 + 3.0j],
+            [4.0 + 4.0j, 4.0],
+            [nan, nan]
+        ]
+    ])
+    @pytest.mark.xfail(reason='Wrong SparseBlock initialization '
+                              '(GH 17386)')
+    def test_where_with_numeric_data(self, data):
+        # GH 17386
+        lower_bound = 1.5
+
+        sparse = SparseDataFrame(data)
+        result = sparse.where(sparse > lower_bound)
+
+        dense = DataFrame(data)
+        dense_expected = dense.where(dense > lower_bound)
+        sparse_expected = SparseDataFrame(dense_expected)
+
+        tm.assert_frame_equal(result, dense_expected)
+        tm.assert_sp_frame_equal(result, sparse_expected)
+
+    @pytest.mark.parametrize('data', [
+        [[1, 1], [2, 2], [3, 3], [4, 4], [0, 0]],
+        [[1.0, 1.0], [2.0, 2.0], [3.0, 3.0], [4.0, 4.0], [nan, nan]],
+        [
+            [1.0, 1.0 + 1.0j],
+            [2.0 + 2.0j, 2.0],
+            [3.0, 3.0 + 3.0j],
+            [4.0 + 4.0j, 4.0],
+            [nan, nan]
+        ]
+    ])
+    @pytest.mark.parametrize('other', [
+        True,
+        -100,
+        0.1,
+        100.0 + 100.0j
+    ])
+    @pytest.mark.xfail(reason='Wrong SparseBlock initialization '
+                              '(GH 17386)')
+    def test_where_with_numeric_data_and_other(self, data, other):
+        # GH 17386
+        lower_bound = 1.5
+
+        sparse = SparseDataFrame(data)
+        result = sparse.where(sparse > lower_bound, other)
+
+        dense = DataFrame(data)
+        dense_expected = dense.where(dense > lower_bound, other)
+        sparse_expected = SparseDataFrame(dense_expected,
+                                          default_fill_value=other)
+
+        tm.assert_frame_equal(result, dense_expected)
+        tm.assert_sp_frame_equal(result, sparse_expected)
+
+    @pytest.mark.xfail(reason='Wrong SparseBlock initialization '
+                              '(GH 17386)')
+    def test_where_with_bool_data(self):
+        # GH 17386
+        data = [[False, False], [True, True], [False, False]]
+        cond = True
+
+        sparse = SparseDataFrame(data)
+        result = sparse.where(sparse == cond)
+
+        dense = DataFrame(data)
+        dense_expected = dense.where(dense == cond)
+        sparse_expected = SparseDataFrame(dense_expected)
+
+        tm.assert_frame_equal(result, dense_expected)
+        tm.assert_sp_frame_equal(result, sparse_expected)
+
+    @pytest.mark.parametrize('other', [
+        True,
+        0,
+        0.1,
+        100.0 + 100.0j
+    ])
+    @pytest.mark.xfail(reason='Wrong SparseBlock initialization '
+                              '(GH 17386)')
+    def test_where_with_bool_data_and_other(self, other):
+        # GH 17386
+        data = [[False, False], [True, True], [False, False]]
+        cond = True
+
+        sparse = SparseDataFrame(data)
+        result = sparse.where(sparse == cond, other)
+
+        dense = DataFrame(data)
+        dense_expected = dense.where(dense == cond, other)
+        sparse_expected = SparseDataFrame(dense_expected,
+                                          default_fill_value=other)
+
+        tm.assert_frame_equal(result, dense_expected)
+        tm.assert_sp_frame_equal(result, sparse_expected)
+
+    @pytest.mark.xfail(reason='Wrong SparseBlock initialization '
+                              '(GH 17386)')
+    def test_quantile(self):
+        # GH 17386
+        data = [[1, 1], [2, 10], [3, 100], [nan, nan]]
+        q = 0.1
+
+        sparse_df = SparseDataFrame(data)
+        result = sparse_df.quantile(q)
+
+        dense_df = DataFrame(data)
+        dense_expected = dense_df.quantile(q)
+        sparse_expected = SparseSeries(dense_expected)
+
+        tm.assert_series_equal(result, dense_expected)
+        tm.assert_sp_series_equal(result, sparse_expected)
+
+    @pytest.mark.xfail(reason='Wrong SparseBlock initialization '
+                              '(GH 17386)')
+    def test_quantile_multi(self):
+        # GH 17386
+        data = [[1, 1], [2, 10], [3, 100], [nan, nan]]
+        q = [0.1, 0.5]
+
+        sparse_df = SparseDataFrame(data)
+        result = sparse_df.quantile(q)
+
+        dense_df = DataFrame(data)
+        dense_expected = dense_df.quantile(q)
+        sparse_expected = SparseDataFrame(dense_expected)
+
+        tm.assert_frame_equal(result, dense_expected)
+        tm.assert_sp_frame_equal(result, sparse_expected)
diff --git a/pandas/tests/sparse/test_series.py b/pandas/tests/sparse/test_series.py
index df1badb86..1dc1c7f15 100644
--- a/pandas/tests/sparse/test_series.py
+++ b/pandas/tests/sparse/test_series.py
@@ -1419,6 +1419,108 @@ class TestSparseSeriesAnalytics(object):
             self.bseries.reindex_axis([0, 1, 2])
         assert 'reindex' in str(m[0].message)
 
+    @pytest.mark.parametrize('data', [
+        [1, 1, 2, 2, 3, 3, 4, 4, 0, 0],
+        [1.0, 1.0, 2.0, 2.0, 3.0, 3.0, 4.0, 4.0, nan, nan],
+        [
+            1.0, 1.0 + 1.0j,
+            2.0 + 2.0j, 2.0,
+            3.0, 3.0 + 3.0j,
+            4.0 + 4.0j, 4.0,
+            nan, nan
+        ]
+    ])
+    @pytest.mark.xfail(reason='Wrong SparseBlock initialization '
+                              '(GH 17386)')
+    def test_where_with_numeric_data(self, data):
+        # GH 17386
+        lower_bound = 1.5
+
+        sparse = SparseSeries(data)
+        result = sparse.where(sparse > lower_bound)
+
+        dense = Series(data)
+        dense_expected = dense.where(dense > lower_bound)
+        sparse_expected = SparseSeries(dense_expected)
+
+        tm.assert_series_equal(result, dense_expected)
+        tm.assert_sp_series_equal(result, sparse_expected)
+
+    @pytest.mark.parametrize('data', [
+        [1, 1, 2, 2, 3, 3, 4, 4, 0, 0],
+        [1.0, 1.0, 2.0, 2.0, 3.0, 3.0, 4.0, 4.0, nan, nan],
+        [
+            1.0, 1.0 + 1.0j,
+            2.0 + 2.0j, 2.0,
+            3.0, 3.0 + 3.0j,
+            4.0 + 4.0j, 4.0,
+            nan, nan
+        ]
+    ])
+    @pytest.mark.parametrize('other', [
+        True,
+        -100,
+        0.1,
+        100.0 + 100.0j
+    ])
+    @pytest.mark.skip(reason='Wrong SparseBlock initialization '
+                             '(Segfault) '
+                             '(GH 17386)')
+    def test_where_with_numeric_data_and_other(self, data, other):
+        # GH 17386
+        lower_bound = 1.5
+
+        sparse = SparseSeries(data)
+        result = sparse.where(sparse > lower_bound, other)
+
+        dense = Series(data)
+        dense_expected = dense.where(dense > lower_bound, other)
+        sparse_expected = SparseSeries(dense_expected, fill_value=other)
+
+        tm.assert_series_equal(result, dense_expected)
+        tm.assert_sp_series_equal(result, sparse_expected)
+
+    @pytest.mark.xfail(reason='Wrong SparseBlock initialization '
+                              '(GH 17386)')
+    def test_where_with_bool_data(self):
+        # GH 17386
+        data = [False, False, True, True, False, False]
+        cond = True
+
+        sparse = SparseSeries(data)
+        result = sparse.where(sparse == cond)
+
+        dense = Series(data)
+        dense_expected = dense.where(dense == cond)
+        sparse_expected = SparseSeries(dense_expected)
+
+        tm.assert_series_equal(result, dense_expected)
+        tm.assert_sp_series_equal(result, sparse_expected)
+
+    @pytest.mark.parametrize('other', [
+        True,
+        0,
+        0.1,
+        100.0 + 100.0j
+    ])
+    @pytest.mark.skip(reason='Wrong SparseBlock initialization '
+                             '(Segfault) '
+                             '(GH 17386)')
+    def test_where_with_bool_data_and_other(self, other):
+        # GH 17386
+        data = [False, False, True, True, False, False]
+        cond = True
+
+        sparse = SparseSeries(data)
+        result = sparse.where(sparse == cond, other)
+
+        dense = Series(data)
+        dense_expected = dense.where(dense == cond, other)
+        sparse_expected = SparseSeries(dense_expected, fill_value=other)
+
+        tm.assert_series_equal(result, dense_expected)
+        tm.assert_sp_series_equal(result, sparse_expected)
+
 
 @pytest.mark.parametrize(
     'datetime_type', (np.datetime64,
