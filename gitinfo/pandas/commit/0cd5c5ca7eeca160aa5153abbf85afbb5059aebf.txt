commit 0cd5c5ca7eeca160aa5153abbf85afbb5059aebf
Author: Priyanka Ojha <priyankaoe@gmail.com>
Date:   Tue Mar 13 11:52:47 2018 +0100

    Docstring changes to pandas.Series.dt.to_pydatetime (#20198)

diff --git a/pandas/core/indexes/accessors.py b/pandas/core/indexes/accessors.py
index c5b300848..c27754d57 100644
--- a/pandas/core/indexes/accessors.py
+++ b/pandas/core/indexes/accessors.py
@@ -126,6 +126,49 @@ class DatetimeProperties(Properties):
     """
 
     def to_pydatetime(self):
+        """
+        Return the data as an array of native Python datetime objects
+
+        Timezone information is retained if present.
+
+        .. warning::
+
+           Python's datetime uses microsecond resolution, which is lower than
+           pandas (nanosecond). The values are truncated.
+
+        Returns
+        -------
+        numpy.ndarray
+            object dtype array containing native Python datetime objects.
+
+        See Also
+        --------
+        datetime.datetime : Standard library value for a datetime.
+
+        Examples
+        --------
+        >>> s = pd.Series(pd.date_range('20180310', periods=2))
+        >>> s
+        0   2018-03-10
+        1   2018-03-11
+        dtype: datetime64[ns]
+
+        >>> s.dt.to_pydatetime()
+        array([datetime.datetime(2018, 3, 10, 0, 0),
+               datetime.datetime(2018, 3, 11, 0, 0)], dtype=object)
+
+        pandas' nanosecond precision is truncated to microseconds.
+
+        >>> s = pd.Series(pd.date_range('20180310', periods=2, freq='ns'))
+        >>> s
+        0   2018-03-10 00:00:00.000000000
+        1   2018-03-10 00:00:00.000000001
+        dtype: datetime64[ns]
+
+        >>> s.dt.to_pydatetime()
+        array([datetime.datetime(2018, 3, 10, 0, 0),
+               datetime.datetime(2018, 3, 10, 0, 0)], dtype=object)
+        """
         return self._get_values().to_pydatetime()
 
     @property
