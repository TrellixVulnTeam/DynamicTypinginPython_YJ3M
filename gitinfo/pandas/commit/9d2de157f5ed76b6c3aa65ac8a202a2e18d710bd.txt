commit 9d2de157f5ed76b6c3aa65ac8a202a2e18d710bd
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Nov 22 01:55:11 2010 -0500

    misc code reorg

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 536ab727d..2798d6265 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1197,21 +1197,16 @@ class DataFrame(Picklable, Groupable):
         if timeRule and not offset:
             offset = datetools.getOffset(timeRule)
 
-        N = len(self)
-
         if offset is None:
             newIndex = self.index
+            indexer = self._shift_indexer(periods)
 
-            indexer = np.zeros(N, dtype=int)
             if periods > 0:
-                indexer[periods:] = np.arange(N - periods)
                 def do_shift(series):
                     values = np.asarray(series).take(indexer)
                     values[:periods] = NaN
                     return values
-
             else:
-                indexer[:periods] = np.arange(-periods, N)
                 def do_shift(series):
                     values = np.asarray(series).take(indexer)
                     values[periods:] = NaN
@@ -1226,6 +1221,18 @@ class DataFrame(Picklable, Groupable):
 
         return DataFrame(data=newValues, index=newIndex)
 
+    def _shift_indexer(self, periods):
+        # small reusable utility
+        N = len(self)
+        indexer = np.zeros(N, dtype=int)
+
+        if periods > 0:
+            indexer[periods:] = np.arange(N - periods)
+        else:
+            indexer[:periods] = np.arange(-periods, N)
+
+        return indexer
+
     def apply(self, func, axis=0):
         """
         Applies func to columns (Series) of this DataFrame and returns either
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index 068c053f8..c2bd40b9a 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -362,7 +362,7 @@ class DataMatrix(DataFrame):
             newColumns = self.columns
         else:
             newColumns = self.columns.union(other.columns)
-            need_reindex = True or need_reindex
+            need_reindex = True
 
         if need_reindex:
             myReindex = self.reindex(index=newIndex,
@@ -1015,6 +1015,40 @@ class DataMatrix(DataFrame):
         return DataMatrix(result, index=self.index,
                           columns=self.columns, objects=self.objects)
 
+    def min(self, axis=0):
+        """
+        Return array or Series of minimums over requested axis.
+
+        Parameters
+        ----------
+        axis : {0, 1}
+            0 for row-wise, 1 for column-wise
+
+        Returns
+        -------
+        Series or TimeSeries
+        """
+        values = self.values.copy()
+        np.putmask(values, -np.isfinite(values), np.inf)
+        return Series(values.min(axis), index=self._get_agg_axis(axis))
+
+    def max(self, axis=0):
+        """
+        Return array or Series of maximums over requested axis.
+
+        Parameters
+        ----------
+        axis : {0, 1}
+            0 for row-wise, 1 for column-wise
+
+        Returns
+        -------
+        Series or TimeSeries
+        """
+        values = self.values.copy()
+        np.putmask(values, -np.isfinite(values), -np.inf)
+        return Series(values.max(axis), index=self._get_agg_axis(axis))
+
     def fill(self, value=None, method='pad'):
         """
         Fill NaN values using the specified method.
@@ -1127,18 +1161,13 @@ class DataMatrix(DataFrame):
         if timeRule is not None and offset is None:
             offset = datetools.getOffset(timeRule)
 
-        N = len(self)
-
         if offset is None:
+            indexer = self._shift_indexer(periods)
+            newValues = self.values.take(indexer, axis=0)
             newIndex = self.index
-            indexer = np.zeros(N, dtype=int)
             if periods > 0:
-                indexer[periods:] = np.arange(N - periods)
-                newValues = self.values.take(indexer, axis=0)
                 newValues[:periods] = NaN
             else:
-                indexer[:periods] = np.arange(-periods, N)
-                newValues = self.values.take(indexer, axis=0)
                 newValues[periods:] = NaN
         else:
             newIndex = self.index.shift(periods, offset)
@@ -1155,40 +1184,6 @@ class DataMatrix(DataFrame):
         return DataMatrix(data=newValues, index=newIndex, columns=self.columns,
                           objects=shifted_objects)
 
-    def min(self, axis=0):
-        """
-        Return array or Series of minimums over requested axis.
-
-        Parameters
-        ----------
-        axis : {0, 1}
-            0 for row-wise, 1 for column-wise
-
-        Returns
-        -------
-        Series or TimeSeries
-        """
-        values = self.values.copy()
-        np.putmask(values, -np.isfinite(values), np.inf)
-        return Series(values.min(axis), index=self._get_agg_axis(axis))
-
-    def max(self, axis=0):
-        """
-        Return array or Series of maximums over requested axis.
-
-        Parameters
-        ----------
-        axis : {0, 1}
-            0 for row-wise, 1 for column-wise
-
-        Returns
-        -------
-        Series or TimeSeries
-        """
-        values = self.values.copy()
-        np.putmask(values, -np.isfinite(values), -np.inf)
-        return Series(values.max(axis), index=self._get_agg_axis(axis))
-
 def _reorder_columns(mat, current, desired):
     indexer, mask = common.get_indexer(current, desired, None)
     return mat.take(indexer[mask], axis=1)
