commit 45d412fcfa1730bcf4e24a598fcdb53ff7db07d0
Author: Martin Winkel <martin.winkel.pps@gmail.com>
Date:   Sat Mar 7 10:40:09 2020 +0100

    CI: Fix flaky test_value_counts_null (#32449)

diff --git a/pandas/tests/base/test_ops.py b/pandas/tests/base/test_ops.py
index 8f48d0a3e..f1cc98a1b 100644
--- a/pandas/tests/base/test_ops.py
+++ b/pandas/tests/base/test_ops.py
@@ -311,9 +311,10 @@ class TestIndexOps(Ops):
         if isinstance(obj, pd.MultiIndex):
             expected.index = pd.Index(expected.index)
 
-        # sort_index to avoid switched order when values share the same count
-        result = result.sort_index()
-        expected = expected.sort_index()
+        # TODO: Order of entries with the same count is inconsistent on CI (gh-32449)
+        if obj.duplicated().any():
+            result = result.sort_index()
+            expected = expected.sort_index()
         tm.assert_series_equal(result, expected)
 
     @pytest.mark.parametrize("null_obj", [np.nan, None])
@@ -344,13 +345,26 @@ class TestIndexOps(Ops):
         expected = pd.Series(dict(counter.most_common()), dtype=np.int64)
         expected.index = expected.index.astype(obj.dtype)
 
-        tm.assert_series_equal(obj.value_counts(), expected)
+        result = obj.value_counts()
+        if obj.duplicated().any():
+            # TODO:
+            #  Order of entries with the same count is inconsistent on CI (gh-32449)
+            expected = expected.sort_index()
+            result = result.sort_index()
+        tm.assert_series_equal(result, expected)
 
         # can't use expected[null_obj] = 3 as
         # IntervalIndex doesn't allow assignment
         new_entry = pd.Series({np.nan: 3}, dtype=np.int64)
         expected = expected.append(new_entry)
-        tm.assert_series_equal(obj.value_counts(dropna=False), expected)
+
+        result = obj.value_counts(dropna=False)
+        if obj.duplicated().any():
+            # TODO:
+            #  Order of entries with the same count is inconsistent on CI (gh-32449)
+            expected = expected.sort_index()
+            result = result.sort_index()
+        tm.assert_series_equal(result, expected)
 
     def test_value_counts_inferred(self, index_or_series):
         klass = index_or_series
