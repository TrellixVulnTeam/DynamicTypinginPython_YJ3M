commit 7d1499c54dc647b0c2ef5d27cddb6c29971e6045
Author: Da Wang <dawang@twosigma.com>
Date:   Fri Feb 26 12:55:06 2016 -0500

    BUG: Add mode, rank and factorize tests for #5986 (unique, quantile and value_counts tests already exist)
    
    closes #5986
    closes #12465
    
    DOC: emphasize reference in windows installation

diff --git a/doc/source/contributing.rst b/doc/source/contributing.rst
index 9ba4915d2..c26fd8255 100644
--- a/doc/source/contributing.rst
+++ b/doc/source/contributing.rst
@@ -219,7 +219,8 @@ For Python 2.7, you can install the ``mingw`` compiler which will work equivalen
 
 or use the `Microsoft Visual Studio VC++ compiler for Python <https://www.microsoft.com/en-us/download/details.aspx?id=44266>`__. Note that you have to check the ``x64`` box to install the ``x64`` extension building capability as this is not installed by default.
 
-For Python 3.4, you can download and install the `Windows 7.1 SDK <https://www.microsoft.com/en-us/download/details.aspx?id=8279>`__
+For Python 3.4, you can download and install the `Windows 7.1 SDK <https://www.microsoft.com/en-us/download/details.aspx?id=8279>`__. Read the references below as there may be various gotchas during the installation.
+
 For Python 3.5, you can download and install the `Visual Studio 2015 Community Edition <https://www.visualstudio.com/en-us/downloads/visual-studio-2015-downloads-vs.aspx>`__.
 
 Here are some references:
diff --git a/pandas/tests/series/test_analytics.py b/pandas/tests/series/test_analytics.py
index 455e5cda0..5f2512c26 100644
--- a/pandas/tests/series/test_analytics.py
+++ b/pandas/tests/series/test_analytics.py
@@ -160,6 +160,16 @@ class TestSeriesAnalytics(TestData, tm.TestCase):
         assert_series_equal(s.mode(), Series(['2011-01-03', '2013-01-02'],
                                              dtype='M8[ns]'))
 
+        # GH 5986
+        s = Series(['1 days', '-1 days', '0 days'], dtype='timedelta64[ns]')
+        assert_series_equal(s.mode(), Series([], dtype='timedelta64[ns]'))
+
+        s = Series(['1 day', '1 day', '-1 day', '-1 day 2 min',
+                    '2 min', '2 min'],
+                   dtype='timedelta64[ns]')
+        assert_series_equal(s.mode(), Series(['2 min', '1 day'],
+                                             dtype='timedelta64[ns]'))
+
     def test_prod(self):
         self._check_stat_op('prod', np.prod)
 
@@ -1015,6 +1025,13 @@ class TestSeriesAnalytics(TestData, tm.TestCase):
         iranks = iseries.rank()
         assert_series_equal(iranks, exp)
 
+        # GH 5968
+        iseries = Series(['3 day', '1 day 10m', '-2 day', pd.NaT],
+                         dtype='m8[ns]')
+        exp = Series([3, 2, 1, np.nan])
+        iranks = iseries.rank()
+        assert_series_equal(iranks, exp)
+
         values = np.array(
             [-50, -1, -1e-20, -1e-25, -1e-50, 0, 1e-40, 1e-20, 1e-10, 2, 40
              ], dtype='float64')
diff --git a/pandas/tests/test_algos.py b/pandas/tests/test_algos.py
index ef3f6210f..b9a438460 100644
--- a/pandas/tests/test_algos.py
+++ b/pandas/tests/test_algos.py
@@ -143,6 +143,20 @@ class TestFactorize(tm.TestCase):
             [0, 0, 0, 1, 1, 0], dtype=np.int64))
         self.assert_numpy_array_equal(uniques, pd.PeriodIndex([v1, v2]))
 
+        # GH 5986
+        v1 = pd.to_timedelta('1 day 1 min')
+        v2 = pd.to_timedelta('1 day')
+        x = Series([v1, v2, v1, v1, v2, v2, v1])
+        labels, uniques = algos.factorize(x)
+        self.assert_numpy_array_equal(labels, np.array(
+            [0, 1, 0, 0, 1, 1, 0], dtype=np.int64))
+        self.assert_numpy_array_equal(uniques, pd.to_timedelta([v1, v2]))
+
+        labels, uniques = algos.factorize(x, sort=True)
+        self.assert_numpy_array_equal(labels, np.array(
+            [1, 0, 1, 1, 0, 0, 1], dtype=np.int64))
+        self.assert_numpy_array_equal(uniques, pd.to_timedelta([v2, v1]))
+
     def test_factorize_nan(self):
         # nan should map to na_sentinel, not reverse_indexer[na_sentinel]
         # rizer.factorize should not raise an exception if na_sentinel indexes
