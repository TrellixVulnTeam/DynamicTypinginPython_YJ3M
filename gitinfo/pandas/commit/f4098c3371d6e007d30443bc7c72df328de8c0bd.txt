commit f4098c3371d6e007d30443bc7c72df328de8c0bd
Author: Joris Van den Bossche <jorisvandenbossche@gmail.com>
Date:   Mon Nov 11 23:51:44 2019 +0100

    TST: filter warnings for is_extension_type deprecation (#29549)

diff --git a/pandas/core/dtypes/common.py b/pandas/core/dtypes/common.py
index 5180f513d..4f9481ecc 100644
--- a/pandas/core/dtypes/common.py
+++ b/pandas/core/dtypes/common.py
@@ -1508,6 +1508,7 @@ def is_extension_type(arr):
     Check whether an array-like is of a pandas extension class instance.
 
     .. deprecated:: 1.0.0
+        Use ``is_extension_array_dtype`` instead.
 
     Extension classes include categoricals, pandas sparse objects (i.e.
     classes represented within the pandas library and not ones external
diff --git a/pandas/tests/dtypes/test_common.py b/pandas/tests/dtypes/test_common.py
index 7abaa0651..d84206731 100644
--- a/pandas/tests/dtypes/test_common.py
+++ b/pandas/tests/dtypes/test_common.py
@@ -549,6 +549,7 @@ def test_is_bool_dtype():
     assert com.is_bool_dtype(pd.Index([True, False]))
 
 
+@pytest.mark.filterwarnings("ignore:'is_extension_type' is deprecated:FutureWarning")
 @pytest.mark.parametrize(
     "check_scipy", [False, pytest.param(True, marks=td.skip_if_no_scipy)]
 )
@@ -573,6 +574,35 @@ def test_is_extension_type(check_scipy):
         assert not com.is_extension_type(scipy.sparse.bsr_matrix([1, 2, 3]))
 
 
+def test_is_extension_type_deprecation():
+    with tm.assert_produces_warning(FutureWarning):
+        com.is_extension_type([1, 2, 3])
+
+
+@pytest.mark.parametrize(
+    "check_scipy", [False, pytest.param(True, marks=td.skip_if_no_scipy)]
+)
+def test_is_extension_array_dtype(check_scipy):
+    assert not com.is_extension_array_dtype([1, 2, 3])
+    assert not com.is_extension_array_dtype(np.array([1, 2, 3]))
+    assert not com.is_extension_array_dtype(pd.DatetimeIndex([1, 2, 3]))
+
+    cat = pd.Categorical([1, 2, 3])
+    assert com.is_extension_array_dtype(cat)
+    assert com.is_extension_array_dtype(pd.Series(cat))
+    assert com.is_extension_array_dtype(pd.SparseArray([1, 2, 3]))
+    assert com.is_extension_array_dtype(pd.DatetimeIndex(["2000"], tz="US/Eastern"))
+
+    dtype = DatetimeTZDtype("ns", tz="US/Eastern")
+    s = pd.Series([], dtype=dtype)
+    assert com.is_extension_array_dtype(s)
+
+    if check_scipy:
+        import scipy.sparse
+
+        assert not com.is_extension_array_dtype(scipy.sparse.bsr_matrix([1, 2, 3]))
+
+
 def test_is_complex_dtype():
     assert not com.is_complex_dtype(int)
     assert not com.is_complex_dtype(str)
