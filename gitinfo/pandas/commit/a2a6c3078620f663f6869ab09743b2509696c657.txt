commit a2a6c3078620f663f6869ab09743b2509696c657
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Feb 19 17:09:23 2011 -0500

    added ability to boolean index DataFrame objects

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index dbff7d289..30dff695b 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -472,6 +472,30 @@ class DataFrame(Picklable, Groupable):
         ensure homogeneity.
         """
         # Array
+        if isinstance(key, DataFrame):
+            if not (key.index.equals(self.index) and
+                    key.columns.equals(self.columns)):
+                raise Exception('Can only index with like-indexed '
+                                'DataFrame objects')
+
+            self._boolean_set(key, value)
+        else:
+            self._insert_item(key, value)
+
+    def _boolean_set(self, key, value):
+        mask = key.values
+        columns = self.columns
+        values = self.values
+
+        if mask.dtype != np.bool_:
+            raise Exception('Must pass DataFrame with boolean values only')
+
+        values[mask] = value
+        values = values.T
+        self._series = dict((c, Series(values[i], index=self.index))
+                            for i, c in enumerate(columns))
+
+    def _insert_item(self, key, value):
         if hasattr(value, '__iter__'):
             if isinstance(value, Series):
                 cleanSeries = value.reindex(self.index)
@@ -1054,7 +1078,7 @@ class DataFrame(Picklable, Groupable):
 
         return self.reindex(self.index[theCount >= minObs])
 
-    def fill(self, value=None, method='pad'):
+    def fill(self, value=None, method='pad'): # pragma: no cover
         warnings.warn("fill is being replaced by fillna, and the fill function "
                       "behavior will disappear in the next release: please "
                       "modify your code accordingly",
@@ -1149,7 +1173,7 @@ class DataFrame(Picklable, Groupable):
         else:
             return Series(np.array(rowValues), index=subset)
 
-    def getXS(self, key):
+    def getXS(self, key): # pragma: no cover
         warnings.warn("'getXS' is deprecated. Use 'xs' instead",
                       FutureWarning)
 
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index 1a324b108..066174061 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -535,8 +535,16 @@ class DataMatrix(DataFrame):
             else:
                 return self._getSeries(item)
 
-    _dataTypes = [np.float_, np.bool_, np.int_]
-    def __setitem__(self, key, value):
+    # __setitem__ logic
+
+    def _boolean_set(self, key, value):
+        mask = key.values
+        if mask.dtype != np.bool_:
+            raise Exception('Must pass DataFrame with boolean values only')
+
+        self.values[mask] = value
+
+    def _insert_item(self, key, value):
         """
         Add series to DataMatrix in specified column.
 
@@ -568,6 +576,7 @@ class DataMatrix(DataFrame):
         else:
             self._insert_float_dtype(key, value)
 
+    _dataTypes = [np.float_, np.bool_, np.int_]
     def _insert_float_dtype(self, key, value):
         isObject = value.dtype not in self._dataTypes
 
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 55a2ee45f..effc1504c 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -25,7 +25,7 @@ def _arith_method(func, name):
 
     def f(self, other):
         if not np.isscalar(other):
-            raise Exception('Simple arithmetic with WidePanel can only be '
+            raise ValueError('Simple arithmetic with WidePanel can only be '
                             'done with scalar values')
 
         return self._combine(other, func)
@@ -311,7 +311,7 @@ class WidePanel(Panel):
         # XXX
         if isinstance(value, LongPanel):
             if len(value.items) != 1:
-                raise Exception('Input panel must have only one item!')
+                raise ValueError('Input panel must have only one item!')
 
             value = value.toWide()[value.items[0]]
 
@@ -399,7 +399,7 @@ class WidePanel(Panel):
             result = result._reindex_axis(items, method, 0)
 
         if result is self:
-            raise Exception('Must specify at least one axis')
+            raise ValueError('Must specify at least one axis')
 
         return result
 
@@ -472,7 +472,7 @@ class WidePanel(Panel):
         return WidePanel(newValues, self.items, self.major_axis,
                          self.minor_axis)
 
-    def fill(self, value=None, method='pad'):
+    def fill(self, value=None, method='pad'): # pragma: no cover
         warnings.warn("fill is being replaced by fillna, and the fill function "
                       "behavior will disappear in the next release: please "
                       "modify your code accordingly",
@@ -603,7 +603,7 @@ class WidePanel(Panel):
         j = self._get_axis_number(axis2)
 
         if i == j:
-            raise Exception('Cannot specify the same axis')
+            raise ValueError('Cannot specify the same axis')
 
         mapping = {i : j, j : i}
 
@@ -938,7 +938,7 @@ class WidePanel(Panel):
             values = values[:, :, :-lags]
             minor_axis = minor_axis[lags:]
         else:
-            raise Exception('Invalid axis')
+            raise ValueError('Invalid axis')
 
         return WidePanel(values=values, items=items, major_axis=major_axis,
                          minor_axis=minor_axis)
@@ -1037,7 +1037,7 @@ class LongPanel(Panel):
         if isinstance(data, np.ndarray):
             # Dtype when you have data
             if not issubclass(data.dtype.type, np.void):
-                raise Exception('Input was not a structured array!')
+                raise ValueError('Input was not a structured array!')
 
             columns = data.dtype.names
             data = dict((k, data[k]) for k in columns)
@@ -1132,7 +1132,7 @@ class LongPanel(Panel):
         shape = len(self.index.major_labels), len(self.items)
 
         if values.shape != shape:
-            raise Exception('Values shape %s mismatch to %s' % (values.shape,
+            raise ValueError('Values shape %s mismatch to %s' % (values.shape,
                                                                 shape))
 
         self._values = values
@@ -1155,10 +1155,10 @@ class LongPanel(Panel):
             mat = value
         elif isinstance(value, LongPanel):
             if len(value.items) > 1:
-                raise Exception('input LongPanel must only have one column')
+                raise ValueError('input LongPanel must only have one column')
 
             if value.index is not self.index:
-                raise Exception('Only can set identically-indexed LongPanel '
+                raise ValueError('Only can set identically-indexed LongPanel '
                                 'items for now')
 
             mat = value.values
@@ -1214,7 +1214,7 @@ class LongPanel(Panel):
         Arithmetic operation between panels
         """
         if self.index is not other.index:
-            raise Exception("Can only combine identically-indexed "
+            raise ValueError("Can only combine identically-indexed "
                             "panels for now")
 
         if len(other.items) == 1:
@@ -1433,7 +1433,7 @@ class LongPanel(Panel):
             items = self.major_axis
             labels = self.index.major_labels
         else: # pragma: no cover
-            raise Exception('Do not recognize axis %s' % axis)
+            raise ValueError('Do not recognize axis %s' % axis)
 
         if transform:
             mapped = np.array([transform(val) for val in items])
@@ -1554,7 +1554,7 @@ class LongPanel(Panel):
         elif axis == 'minor':
             lp = self.swapaxes()
         else: # pragma: no cover
-            raise Exception('invalid axis')
+            raise ValueError('invalid axis')
 
         N = len(lp.values)
         bounds = lp.index._bounds
@@ -1720,7 +1720,7 @@ class LongPanelIndex(object):
             j = len(self.major_axis)
 
         if i > j:
-            raise Exception('Must have begin <= end!')
+            raise ValueError('Must have begin <= end!')
 
         return i, j
 
@@ -2018,7 +2018,7 @@ class WidePanelGroupBy(GroupBy):
         self.axis = axis
 
         if axis not in (0, 1, 2): # pragma: no cover
-            raise Exception('invalid axis')
+            raise ValueError('invalid axis')
 
         GroupBy.__init__(self, obj, grouper)
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index bc8822e26..28d5d3c99 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -864,7 +864,7 @@ class Series(np.ndarray, Picklable, Groupable):
         """
         return self.reindex(other.index, method=method)
 
-    def fill(self, value=None, method='pad'):
+    def fill(self, value=None, method='pad'): # pragma: no cover
         warnings.warn("fill is being replaced by fillna, and the fill function "
                       "behavior will disappear in the next release: please "
                       "modify your code accordingly",
diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index d21ec6373..8763e5bff 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -449,6 +449,21 @@ class TestDataFrame(unittest.TestCase):
         self.assertEqual(smaller['col10'].dtype, np.object_)
         self.assert_((smaller['col10'] == ['1', '2']).all())
 
+    def test_setitem_boolean(self):
+        df = self.frame.copy()
+        values = self.frame.values
+
+        df[df > 0] = 5
+        values[values > 0] = 5
+        assert_almost_equal(df.values, values)
+
+        df[df == 5] = 0
+        values[values == 5] = 0
+        assert_almost_equal(df.values, values)
+
+        self.assertRaises(Exception, df.__setitem__, df[:-1] > 0, 2)
+        self.assertRaises(Exception, df.__setitem__, df * 0, 2)
+
     def test_delitem(self):
         del self.frame['A']
         self.assert_('A' not in self.frame)
