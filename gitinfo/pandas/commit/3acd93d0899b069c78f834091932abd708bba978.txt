commit 3acd93d0899b069c78f834091932abd708bba978
Author: Jeff Reback <jeff@reback.net>
Date:   Fri Jan 8 09:20:23 2016 -0500

    BUG: accept unicode in Timedelta constructor, #11995

diff --git a/doc/source/whatsnew/v0.18.0.txt b/doc/source/whatsnew/v0.18.0.txt
index 4fd5edb21..9ebed15c0 100644
--- a/doc/source/whatsnew/v0.18.0.txt
+++ b/doc/source/whatsnew/v0.18.0.txt
@@ -438,7 +438,7 @@ Bug Fixes
 - Regression in ``.clip`` with tz-aware datetimes (:issue:`11838`)
 - Bug in ``date_range`` when the boundaries fell on the frequency (:issue:`11804`)
 - Bug in consistency of passing nested dicts to ``.groupby(...).agg(...)`` (:issue:`9052`)
-
+- Accept unicode in ``Timedelta`` constructor (:issue:`11995`)
 
 
 
diff --git a/pandas/tseries/tests/test_timedeltas.py b/pandas/tseries/tests/test_timedeltas.py
index 21f0c4478..3dec7414f 100644
--- a/pandas/tseries/tests/test_timedeltas.py
+++ b/pandas/tseries/tests/test_timedeltas.py
@@ -161,9 +161,22 @@ class TestTimedeltas(tm.TestCase):
         self.assertTrue(isnull(Timedelta('nat')))
 
         # offset
-        self.assertEqual(to_timedelta(pd.offsets.Hour(2)),Timedelta('0 days, 02:00:00'))
-        self.assertEqual(Timedelta(pd.offsets.Hour(2)),Timedelta('0 days, 02:00:00'))
-        self.assertEqual(Timedelta(pd.offsets.Second(2)),Timedelta('0 days, 00:00:02'))
+        self.assertEqual(to_timedelta(pd.offsets.Hour(2)),
+                         Timedelta('0 days, 02:00:00'))
+        self.assertEqual(Timedelta(pd.offsets.Hour(2)),
+                         Timedelta('0 days, 02:00:00'))
+        self.assertEqual(Timedelta(pd.offsets.Second(2)),
+                         Timedelta('0 days, 00:00:02'))
+
+        # unicode
+        # GH 11995
+        expected = Timedelta('1H')
+        result = pd.Timedelta(u'1H')
+        self.assertEqual(result, expected)
+        self.assertEqual(to_timedelta(pd.offsets.Hour(2)),
+                         Timedelta(u'0 days, 02:00:00'))
+
+        self.assertRaises(ValueError, lambda: Timedelta(u'foo bar'))
 
     def test_round(self):
 
@@ -171,15 +184,41 @@ class TestTimedeltas(tm.TestCase):
         t2 = Timedelta('-1 days 02:34:56.789123456')
 
         for (freq, s1, s2) in [('N', t1, t2),
-                               ('U', Timedelta('1 days 02:34:56.789123000'),Timedelta('-1 days 02:34:56.789123000')),
-                               ('L', Timedelta('1 days 02:34:56.789000000'),Timedelta('-1 days 02:34:56.789000000')),
-                               ('S',  Timedelta('1 days 02:34:56'),Timedelta('-1 days 02:34:56')),
-                               ('2S',  Timedelta('1 days 02:34:56'),Timedelta('-1 days 02:34:56')),
-                               ('5S',  Timedelta('1 days 02:34:55'),Timedelta('-1 days 02:34:55')),
-                               ('T',  Timedelta('1 days 02:34:00'),Timedelta('-1 days 02:34:00')),
-                               ('12T',  Timedelta('1 days 02:24:00'),Timedelta('-1 days 02:24:00')),
-                               ('H',  Timedelta('1 days 02:00:00'),Timedelta('-1 days 02:00:00')),
-                               ('d',  Timedelta('1 days'),Timedelta('-1 days'))]:
+                               ('U',
+                                Timedelta('1 days 02:34:56.789123000'),
+                                Timedelta('-1 days 02:34:56.789123000')
+                                ),
+                               ('L',
+                                Timedelta('1 days 02:34:56.789000000'),
+                                Timedelta('-1 days 02:34:56.789000000')
+                                ),
+                               ('S',
+                                Timedelta('1 days 02:34:56'),
+                                Timedelta('-1 days 02:34:56')
+                                ),
+                               ('2S',
+                                Timedelta('1 days 02:34:56'),
+                                Timedelta('-1 days 02:34:56')
+                                ),
+                               ('5S',
+                                Timedelta('1 days 02:34:55'),
+                                Timedelta('-1 days 02:34:55')
+                                ),
+                               ('T',
+                                Timedelta('1 days 02:34:00'),
+                                Timedelta('-1 days 02:34:00')
+                                ),
+                               ('12T',
+                                Timedelta('1 days 02:24:00'),
+                                Timedelta('-1 days 02:24:00')),
+                               ('H',
+                                Timedelta('1 days 02:00:00'),
+                                Timedelta('-1 days 02:00:00')
+                                ),
+                               ('d',
+                                Timedelta('1 days'),
+                                Timedelta('-1 days')
+                                )]:
             r1 = t1.round(freq)
             self.assertEqual(r1, s1)
             r2 = t2.round(freq)
@@ -1104,20 +1143,32 @@ class TestTimedeltaIndex(tm.TestCase):
         self.assertTrue(result.iloc[1].isnull().all())
 
     def test_constructor(self):
-        expected = TimedeltaIndex(['1 days','1 days 00:00:05',
-                                   '2 days','2 days 00:00:02','0 days 00:00:03'])
-        result = TimedeltaIndex(['1 days','1 days, 00:00:05',
-                                 np.timedelta64(2,'D'),
-                                 timedelta(days=2,seconds=2),
+        expected = TimedeltaIndex(['1 days', '1 days 00:00:05',
+                                   '2 days', '2 days 00:00:02',
+                                   '0 days 00:00:03'])
+        result = TimedeltaIndex(['1 days', '1 days, 00:00:05',
+                                 np.timedelta64(2, 'D'),
+                                 timedelta(days=2, seconds=2),
+                                 pd.offsets.Second(3)])
+        tm.assert_index_equal(result, expected)
+
+        # unicode
+        result = TimedeltaIndex([u'1 days', '1 days, 00:00:05',
+                                 np.timedelta64(2, 'D'),
+                                 timedelta(days=2, seconds=2),
                                  pd.offsets.Second(3)])
-        tm.assert_index_equal(result,expected)
 
-        expected = TimedeltaIndex(['0 days 00:00:00', '0 days 00:00:01', '0 days 00:00:02'])
+        expected = TimedeltaIndex(['0 days 00:00:00', '0 days 00:00:01',
+                                   '0 days 00:00:02'])
         tm.assert_index_equal(TimedeltaIndex(range(3), unit='s'), expected)
-        expected = TimedeltaIndex(['0 days 00:00:00', '0 days 00:00:05', '0 days 00:00:09'])
+        expected = TimedeltaIndex(['0 days 00:00:00', '0 days 00:00:05',
+                                   '0 days 00:00:09'])
         tm.assert_index_equal(TimedeltaIndex([0, 5, 9], unit='s'), expected)
-        expected = TimedeltaIndex(['0 days 00:00:00.400', '0 days 00:00:00.450', '0 days 00:00:01.200'])
-        tm.assert_index_equal(TimedeltaIndex([400, 450, 1200], unit='ms'), expected)
+        expected = TimedeltaIndex(['0 days 00:00:00.400',
+                                   '0 days 00:00:00.450',
+                                   '0 days 00:00:01.200'])
+        tm.assert_index_equal(TimedeltaIndex([400, 450, 1200], unit='ms'),
+                              expected)
 
     def test_constructor_coverage(self):
         rng = timedelta_range('1 days', periods=10.5)
diff --git a/pandas/tslib.pyx b/pandas/tslib.pyx
index 45dc42f5c..49ffdcbf2 100644
--- a/pandas/tslib.pyx
+++ b/pandas/tslib.pyx
@@ -17,8 +17,9 @@ from cpython cimport (
     PyLong_Check,
     PyObject_RichCompareBool,
     PyObject_RichCompare,
-    PyString_Check,
-    Py_GT, Py_GE, Py_EQ, Py_NE, Py_LT, Py_LE
+    Py_GT, Py_GE, Py_EQ, Py_NE, Py_LT, Py_LE,
+    PyUnicode_Check,
+    PyUnicode_AsUTF8String,
 )
 
 # Cython < 0.17 doesn't have this in cpython
@@ -31,10 +32,9 @@ cdef extern from "datetime_helper.h":
 
 # this is our datetime.pxd
 from datetime cimport cmp_pandas_datetimestruct
-from util cimport is_integer_object, is_float_object, is_datetime64_object, is_timedelta64_object
-
 from libc.stdlib cimport free
 
+from util cimport is_integer_object, is_float_object, is_datetime64_object, is_timedelta64_object
 cimport util
 
 from datetime cimport *
@@ -2769,7 +2769,7 @@ cdef inline parse_timedelta_string(object ts, coerce=False):
     """
 
     cdef:
-        str c
+        unicode c
         bint neg=0, have_dot=0, have_value=0, have_hhmmss=0
         object current_unit=None
         int64_t result=0, m=0, r
@@ -2783,6 +2783,10 @@ cdef inline parse_timedelta_string(object ts, coerce=False):
     if ts in _nat_strings or not len(ts):
         return NPY_NAT
 
+    # decode ts if necessary
+    if not PyUnicode_Check(ts) and not PY3:
+        ts = str(ts).decode('utf-8')
+
     for c in ts:
 
         # skip whitespace / commas
