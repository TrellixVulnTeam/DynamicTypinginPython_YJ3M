commit 12094e9a6bfe0e941289eb2b20863a792ba38b58
Author: Adam Klein <adamklein@gmail.com>
Date:   Fri Jan 27 09:28:01 2012 -0500

    ENH: added drop parameter to reset_index, added to Series for symmetry

diff --git a/RELEASE.rst b/RELEASE.rst
index 36439009d..98a742203 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -83,6 +83,8 @@ pandas 0.7.0
   - Add new ``cummin`` and ``cummax`` instance methods to ``Series`` and
     ``DataFrame`` (GH #647)
   - Add new ``value_range`` function to return min/max of a dataframe (GH #288)
+  - Add ``drop`` parameter to ``reset_index`` method of ``DataFrame`` and added
+    method to ``Series`` as well (GH #699)
 
 **API Changes**
 
diff --git a/doc/source/indexing.rst b/doc/source/indexing.rst
index 7d8c1bc1e..b9ba5ba86 100644
--- a/doc/source/indexing.rst
+++ b/doc/source/indexing.rst
@@ -834,6 +834,9 @@ integer index. This is the inverse operation to ``set_index``
 The output is more similar to a SQL table or a record array. The names for the
 columns derived from the index are the ones stored in the ``names`` attribute.
 
+``reset_index`` takes an optional parameter ``drop`` which if true simply
+discards the index, instead of putting index values in the DataFrame's columns.
+
 .. note::
 
    The ``reset_index`` method used to be called ``delevel`` which is now deprecated.
diff --git a/doc/source/whatsnew/v0.7.0.txt b/doc/source/whatsnew/v0.7.0.txt
index 1a97b5e0a..6fe5c2a11 100644
--- a/doc/source/whatsnew/v0.7.0.txt
+++ b/doc/source/whatsnew/v0.7.0.txt
@@ -224,6 +224,8 @@ Other API Changes
 - Miscellaneous renames and deprecations which will (harmlessly) raise
   ``FutureWarning``
 
+- ``drop`` added as an optional parameter to ``DataFrame.reset_index`` (GH699_)
+
 Performance improvements
 ~~~~~~~~~~~~~~~~~~~~~~~~
 
@@ -296,6 +298,7 @@ similar operation to the above but using a Python function:
 .. _GH554: https://github.com/wesm/pandas/issues/554
 .. _GH595: https://github.com/wesm/pandas/issues/595
 .. _GH647: https://github.com/wesm/pandas/issues/647
+.. _GH699: https://github.com/wesm/pandas/issues/699
 .. _GH93: https://github.com/wesm/pandas/issues/93
 .. _GH93: https://github.com/wesm/pandas/issues/93
 .. _PR521: https://github.com/wesm/pandas/pull/521
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index c8876f2ba..385cecdab 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1852,7 +1852,7 @@ class DataFrame(NDFrame):
         frame.index = index
         return frame
 
-    def reset_index(self):
+    def reset_index(self, drop=False):
         """
         For DataFrame with multi-level index, return new DataFrame with
         labeling information in the columns under the index names, defaulting
@@ -1860,30 +1860,36 @@ class DataFrame(NDFrame):
         the index name will be used (if set), otherwise a default 'index' or
         'level_0' (if 'index' is already taken) will be used.
 
+        Parameters
+        ----------
+        drop : boolean, default False
+            Do not try to insert index into dataframe columns
+
         Returns
         -------
         resetted : DataFrame
         """
         new_obj = self.copy()
-        if isinstance(self.index, MultiIndex):
-            names = self.index.names
-            zipped = zip(self.index.levels, self.index.labels)
-            for i, (lev, lab) in reversed(list(enumerate(zipped))):
-                col_name = names[i]
-                if col_name is None:
-                    col_name = 'level_%d' % i
-
-                # to ndarray and maybe infer different dtype
-                level_values = lev.values
-                if level_values.dtype == np.object_:
-                    level_values = lib.maybe_convert_objects(level_values)
-
-                new_obj.insert(0, col_name, level_values.take(lab))
-        else:
-            name = self.index.name
-            if name is None:
-                name = 'index' if 'index' not in self else 'level_0'
-            new_obj.insert(0, name, self.index.values)
+        if not drop:
+            if isinstance(self.index, MultiIndex):
+                names = self.index.names
+                zipped = zip(self.index.levels, self.index.labels)
+                for i, (lev, lab) in reversed(list(enumerate(zipped))):
+                    col_name = names[i]
+                    if col_name is None:
+                        col_name = 'level_%d' % i
+
+                    # to ndarray and maybe infer different dtype
+                    level_values = lev.values
+                    if level_values.dtype == np.object_:
+                        level_values = lib.maybe_convert_objects(level_values)
+
+                    new_obj.insert(0, col_name, level_values.take(lab))
+            else:
+                name = self.index.name
+                if name is None:
+                    name = 'index' if 'index' not in self else 'level_0'
+                new_obj.insert(0, name, self.index.values)
         new_obj.index = np.arange(len(new_obj))
         return new_obj
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 3a0c50d94..b5d782ba2 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -548,6 +548,25 @@ copy : boolean, default False
             new_values = np.concatenate([self.values, [value]])
             return Series(new_values, index=new_index, name=self.name)
 
+    def reset_index(self, drop=False):
+        """
+        Analagous to the DataFrame.reset_index function, see docstring there.
+
+        Parameters
+        ----------
+        drop : boolean, default False
+            Do not try to insert index into dataframe columns
+
+        Returns
+        ----------
+        resetted : DataFrame, or Series if drop == True
+        """
+        if drop:
+            return Series(self, index=np.arange(len(self)), name=self.name)
+        else:
+            from pandas.core.frame import DataFrame
+            return DataFrame(self).reset_index(drop=drop)
+
     def __repr__(self):
         """Clean string representation of a Series"""
         width, height = get_terminal_size()
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index 0e5c66cdb..50a28f84c 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -451,6 +451,17 @@ x   q   30      3    -0.6662 -0.5243 -0.3580  0.89145  2.5838"""
         self.assert_(com.is_integer_dtype(deleveled['prm1']))
         self.assert_(com.is_float_dtype(deleveled['prm2']))
 
+    def test_reset_index_with_drop(self):
+        deleveled = self.ymd.reset_index(drop = True)
+        self.assertEquals(len(deleveled.columns), len(self.ymd.columns))
+
+        deleveled = self.series.reset_index()
+        self.assert_(isinstance(deleveled, DataFrame))
+        self.assert_(len(deleveled.columns) == len(self.series.index.levels)+1)
+
+        deleveled = self.series.reset_index(drop = True)
+        self.assert_(isinstance(deleveled, Series))
+
     def test_sortlevel_by_name(self):
         self.frame.index.names = ['first', 'second']
         result = self.frame.sortlevel(level='second')
