commit a4acf6201a5c9dd0598e2745297bbd6e88ddce19
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun May 20 12:28:23 2012 -0400

    BUG: Timestamp hashing, misc test coverage

diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index 3ba6bbbd7..c0dfb4097 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -204,6 +204,12 @@ cdef class _Timestamp(datetime):
         int64_t value, nanosecond
         object offset       # frequency reference
 
+    def __hash__(self):
+        if self.nanosecond:
+            return hash(self.value)
+        else:
+            return datetime.__hash__(self)
+
     def __richcmp__(_Timestamp self, object other, int op):
         cdef _Timestamp ots
 
diff --git a/pandas/tseries/frequencies.py b/pandas/tseries/frequencies.py
index 6eb6e9487..c1a7d56b3 100644
--- a/pandas/tseries/frequencies.py
+++ b/pandas/tseries/frequencies.py
@@ -70,16 +70,11 @@ def get_freq_code(freqstr):
 
 def _get_freq_str(base, mult=1):
     code = _reverse_period_code_map.get(base)
-    if code is None:
-        return _unknown_freq
     if mult == 1:
         return code
     return str(mult) + code
 
 
-_unknown_freq = 'Unknown'
-
-
 #----------------------------------------------------------------------
 # Offset names ("time rules") and related functions
 
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 4e62e8ab1..b081f244a 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -18,6 +18,7 @@ from pandas import DatetimeIndex, Int64Index, to_datetime
 from pandas.core.daterange import DateRange
 import pandas.core.datetools as datetools
 import pandas.tseries.offsets as offsets
+import pandas.tseries.frequencies as fmod
 
 from pandas.util.testing import assert_series_equal, assert_almost_equal
 import pandas.util.testing as tm
@@ -1201,6 +1202,22 @@ class TestTimestamp(unittest.TestCase):
         result = val + timedelta(1)
         self.assert_(result.nanosecond == val.nanosecond)
 
+    def test_frequency_misc(self):
+        self.assertEquals(fmod.get_freq_group('T'),
+                          fmod.FreqGroup.FR_MIN)
+
+        code, stride = fmod.get_freq_code(offsets.Hour())
+        self.assertEquals(code, fmod.FreqGroup.FR_HR)
+
+        code, stride = fmod.get_freq_code((5, 'T'))
+        self.assertEquals(code, fmod.FreqGroup.FR_MIN)
+        self.assertEquals(stride, 5)
+
+    def test_hash_equivalent(self):
+        d = {datetime(2011, 1, 1) : 5}
+        stamp = Timestamp(datetime(2011, 1, 1))
+        self.assertEquals(d[stamp], 5)
+
 """
 
 class TestNewOffsets(unittest.TestCase):
