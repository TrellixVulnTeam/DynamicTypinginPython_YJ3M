commit f937843bf1cd56ce2294772e924590efe3da7158
Author: MomIsBestFriend <50263213+MomIsBestFriend@users.noreply.github.com>
Date:   Fri Jan 3 20:23:57 2020 +0200

    DOC: Code style documentation (#30129)

diff --git a/doc/source/development/code_style.rst b/doc/source/development/code_style.rst
new file mode 100644
index 000000000..2fc2f1fb6
--- /dev/null
+++ b/doc/source/development/code_style.rst
@@ -0,0 +1,129 @@
+.. _code_style:
+
+{{ header }}
+
+=======================
+pandas code style guide
+=======================
+
+.. contents:: Table of contents:
+   :local:
+
+Patterns
+========
+
+foo.__class__
+-------------
+
+*pandas* uses 'type(foo)' instead 'foo.__class__' as it is making the code more
+readable.
+
+For example:
+
+**Good:**
+
+.. code-block:: python
+
+    foo = "bar"
+    type(foo)
+
+**Bad:**
+
+.. code-block:: python
+
+    foo = "bar"
+    foo.__class__
+
+
+String formatting
+=================
+
+Concatenated strings
+--------------------
+
+f-strings
+~~~~~~~~~
+
+*pandas* uses f-strings formatting instead of '%' and '.format()' string formatters.
+
+The convention of using f-strings on a string that is concatenated over serveral lines,
+is to prefix only the lines containing the value needs to be interpeted.
+
+For example:
+
+**Good:**
+
+.. code-block:: python
+
+    foo = "old_function"
+    bar = "new_function"
+
+    my_warning_message = (
+        f"Warning, {foo} is deprecated, "
+        "please use the new and way better "
+        f"{bar}"
+    )
+
+**Bad:**
+
+.. code-block:: python
+
+    foo = "old_function"
+    bar = "new_function"
+
+    my_warning_message = (
+        f"Warning, {foo} is deprecated, "
+        f"please use the new and way better "
+        f"{bar}"
+    )
+
+White spaces
+~~~~~~~~~~~~
+
+Putting the white space only at the end of the previous line, so
+there is no whitespace at the beggining of the concatenated string.
+
+For example:
+
+**Good:**
+
+.. code-block:: python
+
+    example_string = (
+        "Some long concatenated string, "
+        "with good placement of the "
+        "whitespaces"
+    )
+
+**Bad:**
+
+.. code-block:: python
+
+    example_string = (
+        "Some long concatenated string,"
+        " with bad placement of the"
+        " whitespaces"
+    )
+
+Representation function (aka 'repr()')
+--------------------------------------
+
+*pandas* uses 'repr()' instead of '%r' and '!r'.
+
+The use of 'repr()' will only happend when the value is not an obvious string.
+
+For example:
+
+**Good:**
+
+.. code-block:: python
+
+    value = str
+    f"Unknown recived value, got: {repr(value)}"
+
+**Good:**
+
+.. code-block:: python
+
+    value = str
+    f"Unknown recived type, got: '{type(value).__name__}'"
diff --git a/doc/source/development/contributing.rst b/doc/source/development/contributing.rst
index d7b3e159f..4d38a89b9 100644
--- a/doc/source/development/contributing.rst
+++ b/doc/source/development/contributing.rst
@@ -569,8 +569,7 @@ do not make sudden changes to the code that could have the potential to break
 a lot of user code as a result, that is, we need it to be as *backwards compatible*
 as possible to avoid mass breakages.
 
-Additional standards are outlined on the `code style wiki
-page <https://github.com/pandas-dev/pandas/wiki/Code-Style-and-Conventions>`_.
+Additional standards are outlined on the `pandas code style guide <code_style>`_
 
 Optional dependencies
 ---------------------
diff --git a/doc/source/development/index.rst b/doc/source/development/index.rst
index 757b197c7..f8a6bb6de 100644
--- a/doc/source/development/index.rst
+++ b/doc/source/development/index.rst
@@ -13,6 +13,7 @@ Development
     :maxdepth: 2
 
     contributing
+    code_style
     maintaining
     internals
     extending
diff --git a/doc/source/index.rst.template b/doc/source/index.rst.template
index 9cea68530..10705787d 100644
--- a/doc/source/index.rst.template
+++ b/doc/source/index.rst.template
@@ -109,6 +109,7 @@ See the :ref:`overview` for more detail about what's in the library.
 * :doc:`development/index`
 
   * :doc:`development/contributing`
+  * :doc:`development/code_style`
   * :doc:`development/internals`
   * :doc:`development/extending`
   * :doc:`development/developer`
