commit 1f0c920698b86949f448d6fae4f84ed50bd79725
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Sep 6 15:34:00 2011 -0400

    BUG: let downstream code convert list to ndarray, asarray not tuplesafe

diff --git a/pandas/src/groupby.pyx b/pandas/src/groupby.pyx
index 87a2ae036..d070e3258 100644
--- a/pandas/src/groupby.pyx
+++ b/pandas/src/groupby.pyx
@@ -300,7 +300,7 @@ def fast_unique_multiple(list arrays):
     except Exception:
         pass
 
-    return np.asarray(uniques, dtype=object)
+    return uniques
 
 # from libcpp.set cimport set as stlset
 
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index b250846c6..cf7f141f0 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -295,6 +295,31 @@ class TestIndex(unittest.TestCase):
 
         self.assertRaises(ValueError, self.strIndex.drop, ['foo', 'bar'])
 
+    def test_tuple_union_bug(self):
+        import pandas
+        import numpy as np
+
+        idx1 = np.array([(1, 'A'),(2, 'A'),(1, 'B'),(2, 'B')], dtype=[('num',
+        int),('let', 'a1')])
+        idx2 = np.array([(1, 'A'),(2, 'A'),(1, 'B'),(2, 'B'),(1,'C'),(2,
+        'C')], dtype=[('num', int),('let', 'a1')])
+
+        idx1 = pandas.Index(idx1)
+        idx2 = pandas.Index(idx2)
+
+        # intersection broken?
+        int_idx = idx1.intersection(idx2)
+        # needs to be 1d like idx1 and idx2
+        expected = pandas.Index(sorted(set(idx1) & set(idx2)))
+        self.assert_(int_idx.ndim == 1)
+        self.assert_(int_idx.equals(expected))
+
+        # union broken
+        union_idx = idx1.union(idx2)
+        expected = pandas.Index(sorted(set(idx1) | set(idx2)))
+        self.assert_(union_idx.ndim == 1)
+        self.assert_(union_idx.equals(expected))
+
 class TestMultiIndex(unittest.TestCase):
 
     def setUp(self):
