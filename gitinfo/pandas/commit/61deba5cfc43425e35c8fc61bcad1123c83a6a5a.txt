commit 61deba5cfc43425e35c8fc61bcad1123c83a6a5a
Author: Joshua Bradt <bradt@nscl.msu.edu>
Date:   Fri Feb 10 14:48:11 2017 -0500

    BUG: Fixed handling of non-list value_vars in melt
    
    The value_vars argument of melt is now cast to list like the
    id_vars argument.
    
    closes #15348
    
    Author: Joshua Bradt <bradt@nscl.msu.edu>
    Author: Joshua Bradt <jbradt26@gmail.com>
    
    Closes #15351 from jbradt/fix-melt and squashes the following commits:
    
    a2f2510 [Joshua Bradt] Changed to tm.assertRaisesRegexp for Python 2 compat.
    3038f64 [Joshua Bradt] Merge remote-tracking branch 'upstream/master' into fix-melt
    e907135 [Joshua Bradt] Split test into two parts
    20159c1 [Joshua Bradt] Changed exception classes to ValueError.
    129d531 [Joshua Bradt] Moved binary operators to satisfy flake8
    70d7256 [Joshua Bradt] Merge branch 'master' into fix-melt
    455a310 [Joshua Bradt] Tested types when using MultiIndex to ensure they are lists.
    7406222 [Joshua Bradt] Fixed formatting. Added comment with issue number to test.
    d4c5da3 [Joshua Bradt] Improved type checking and tests. Added whatsnew note.
    33728de [Joshua Bradt] BUG: Fixed handling of non-list value_vars in melt

diff --git a/doc/source/whatsnew/v0.20.0.txt b/doc/source/whatsnew/v0.20.0.txt
index d0ffa786a..9f86c777c 100644
--- a/doc/source/whatsnew/v0.20.0.txt
+++ b/doc/source/whatsnew/v0.20.0.txt
@@ -578,6 +578,5 @@ Bug Fixes
 
 - Bug in ``DataFrame.boxplot`` where ``fontsize`` was not applied to the tick labels on both axes (:issue:`15108`)
 - Bug in ``Series.replace`` and ``DataFrame.replace`` which failed on empty replacement dicts (:issue:`15289`)
-
-
+- Bug in ``pd.melt()`` where passing a tuple value for ``value_vars`` caused a ``TypeError`` (:issue:`15348`)
 - Bug in ``.eval()`` which caused multiline evals to fail with local variables not on the first line (:issue:`15342`)
diff --git a/pandas/core/reshape.py b/pandas/core/reshape.py
index bd0358abf..cebaf4e3f 100644
--- a/pandas/core/reshape.py
+++ b/pandas/core/reshape.py
@@ -761,16 +761,26 @@ def melt(frame, id_vars=None, value_vars=None, var_name=None,
     """
     # TODO: what about the existing index?
     if id_vars is not None:
-        if not isinstance(id_vars, (tuple, list, np.ndarray)):
+        if not is_list_like(id_vars):
             id_vars = [id_vars]
+        elif (isinstance(frame.columns, MultiIndex) and
+              not isinstance(id_vars, list)):
+            raise ValueError('id_vars must be a list of tuples when columns'
+                             ' are a MultiIndex')
         else:
             id_vars = list(id_vars)
     else:
         id_vars = []
 
     if value_vars is not None:
-        if not isinstance(value_vars, (tuple, list, np.ndarray)):
+        if not is_list_like(value_vars):
             value_vars = [value_vars]
+        elif (isinstance(frame.columns, MultiIndex) and
+              not isinstance(value_vars, list)):
+            raise ValueError('value_vars must be a list of tuples when'
+                             ' columns are a MultiIndex')
+        else:
+            value_vars = list(value_vars)
         frame = frame.loc[:, id_vars + value_vars]
     else:
         frame = frame.copy()
diff --git a/pandas/tests/test_reshape.py b/pandas/tests/test_reshape.py
index ed5ec970b..d587e4ea6 100644
--- a/pandas/tests/test_reshape.py
+++ b/pandas/tests/test_reshape.py
@@ -56,6 +56,45 @@ class TestMelt(tm.TestCase):
                               columns=['id1', 'id2', 'variable', 'value'])
         tm.assert_frame_equal(result4, expected4)
 
+    def test_value_vars_types(self):
+        # GH 15348
+        expected = DataFrame({'id1': self.df['id1'].tolist() * 2,
+                              'id2': self.df['id2'].tolist() * 2,
+                              'variable': ['A'] * 10 + ['B'] * 10,
+                              'value': (self.df['A'].tolist() +
+                                        self.df['B'].tolist())},
+                             columns=['id1', 'id2', 'variable', 'value'])
+
+        for type_ in (tuple, list, np.array):
+            result = melt(self.df, id_vars=['id1', 'id2'],
+                          value_vars=type_(('A', 'B')))
+            tm.assert_frame_equal(result, expected)
+
+    def test_vars_work_with_multiindex(self):
+        expected = DataFrame({
+            ('A', 'a'): self.df1[('A', 'a')],
+            'CAP': ['B'] * len(self.df1),
+            'low': ['b'] * len(self.df1),
+            'value': self.df1[('B', 'b')],
+        }, columns=[('A', 'a'), 'CAP', 'low', 'value'])
+
+        result = melt(self.df1, id_vars=[('A', 'a')], value_vars=[('B', 'b')])
+        tm.assert_frame_equal(result, expected)
+
+    def test_tuple_vars_fail_with_multiindex(self):
+        # melt should fail with an informative error message if
+        # the columns have a MultiIndex and a tuple is passed
+        # for id_vars or value_vars.
+        tuple_a = ('A', 'a')
+        list_a = [tuple_a]
+        tuple_b = ('B', 'b')
+        list_b = [tuple_b]
+
+        for id_vars, value_vars in ((tuple_a, list_b), (list_a, tuple_b),
+                                    (tuple_a, tuple_b)):
+            with tm.assertRaisesRegexp(ValueError, r'MultiIndex'):
+                melt(self.df1, id_vars=id_vars, value_vars=value_vars)
+
     def test_custom_var_name(self):
         result5 = melt(self.df, var_name=self.var_name)
         self.assertEqual(result5.columns.tolist(), ['var', 'value'])
