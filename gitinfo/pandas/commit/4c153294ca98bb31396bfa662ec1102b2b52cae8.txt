commit 4c153294ca98bb31396bfa662ec1102b2b52cae8
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jul 28 19:40:50 2011 -0400

    ENH: added Index.format functions and improved datetime formatting when no time information

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 69bb008d7..f84debb7e 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -514,7 +514,7 @@ class DataFrame(NDFrame):
             print >> buf, 'Empty %s' % type(self).__name__
             print >> buf, repr(self.index)
         else:
-            str_index = [''] + [str(x) for x in self.index]
+            str_index = [''] + self.index.format().split('\n')
             stringified = [[' %s' % c] + _stringify(c) for c in columns]
             print >> buf, adjoin(2, str_index, *stringified)
 
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 720028ac3..f7a7bd802 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -135,6 +135,20 @@ class Index(np.ndarray):
                 except Exception, e2: # pragma: no cover
                     raise e1
 
+    def format(self):
+        from datetime import time
+
+        if self.is_all_dates():
+            to_join = []
+            zero_time = time(0, 0)
+            for dt in self:
+                if dt.time() != zero_time or dt.tzinfo is not None:
+                    return '\n'.join(str(x) for x in self)
+                to_join.append(dt.strftime("%Y-%m-%d"))
+            return '\n'.join(to_join)
+
+        return '\n'.join(str(x) for x in self)
+
     def equals(self, other):
         """
         Determines if two Index objects contain the same elements.
@@ -417,6 +431,20 @@ class MultiLevelIndex(Index):
         self.levels = [Index(x) for x in levels]
         self.labels = labels
 
+    def format(self, space=2):
+        from pandas.core.common import _format, adjoin
+
+        stringified_levels = [lev.format().split('\n') for lev in self.levels]
+
+        padded_levels = []
+        for lab, lev in zip(self.labels, stringified_levels):
+            maxlen = max(len(x) for x in lev)
+            padded = [x.ljust(maxlen) for x in lev]
+            padded = np.array(padded, dtype=object).take(lab)
+            padded_levels.append(padded)
+
+        return adjoin(2, *padded_levels)
+
     def sort(self, bylevel=0):
         pass
 
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index aec930bc9..d6e6bd24b 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -93,7 +93,6 @@ class Panel(object):
     Abstract superclass for LongPanel and WidePanel data structures
     """
     _values = None
-    factors = None
 
     __add__ = _arith_method(operator.add, '__add__')
     __sub__ = _arith_method(operator.sub, '__sub__')
@@ -131,9 +130,6 @@ class Panel(object):
 
         output = '%s\n%s\n%s\n%s\n%s' % (class_name, dims, items, major, minor)
 
-        if self.factors:
-            output += '\nFactors: %s' % ', '.join(self.factors)
-
         return output
 
     def __iter__(self):
@@ -204,7 +200,6 @@ class WidePanel(Panel, NDFrame):
         else: # pragma: no cover
             raise PandasError('Panel constructor not properly called!')
 
-        self.factors = {}
         self._data = mgr
 
     def _init_matrix(self, data, axes, dtype=None, copy=False):
@@ -989,16 +984,18 @@ class LongPanel(Panel, DataFrame):
         return len(self.index)
 
     def __repr__(self):
-        if len(self.items) < 7 and len(self.index) < 500:
-            buf = StringIO()
-            self.toString(buf=buf)
-            return buf.getvalue()
-        else:
-            return Panel.__repr__(self)
+        return DataFrame.__repr__(self)
+
+        # if len(self.items) < 7 and len(self.index) < 500:
+        #     buf = StringIO()
+        #     self.toString(buf=buf)
+        #     return buf.getvalue()
+        # else:
+        #     return Panel.__repr__(self)
 
     @classmethod
     def fromRecords(cls, data, major_field, minor_field,
-                    factors=None, exclude=None):
+                    exclude=None):
         """
         Create LongPanel from DataFrame or record / structured ndarray
         object
@@ -1009,7 +1006,6 @@ class LongPanel(Panel, DataFrame):
         major_field : string
         minor_field : string
             Name of field
-        factors : list-like, default None
         exclude : list-like, default None
 
         Returns
@@ -1062,7 +1058,6 @@ class LongPanel(Panel, DataFrame):
                                [major_labels, minor_labels])
 
         return LongPanel(values, index=index, columns=items)
-        # , factors=factor_dict)
 
     def toRecords(self):
         major = np.asarray(self.major_axis).take(self.index.major_labels)
@@ -1230,9 +1225,6 @@ class LongPanel(Panel, DataFrame):
         new_index = LongPanelIndex([self.major_axis, self.minor_axis],
                                     [new_major, new_minor])
 
-        # new_factors = dict((k, v.take(indexer))
-        #                    for k, v in self.factors.iteritems())
-
         return LongPanel(new_values, columns=self.items,
                          index=new_index)
 
@@ -1272,37 +1264,37 @@ class LongPanel(Panel, DataFrame):
         self._textConvert(f, format_cols, format_row)
         f.close()
 
-    def toString(self, buf=sys.stdout, col_space=15):
-        """
-        Output a screen-friendly version of this Panel
-        """
-        _pf = _pfixed
-        major_space = max(max([len(str(idx))
-                               for idx in self.major_axis]) + 4, 9)
-        minor_space = max(max([len(str(idx))
-                               for idx in self.minor_axis]) + 4, 9)
-
-        def format_cols(items):
-            return '%s%s%s' % (_pf('Major', major_space),
-                               _pf('Minor', minor_space),
-                               ''.join(_pf(h, col_space) for h in items))
-
-        def format_row(major, minor, values):
-            return '%s%s%s' % (_pf(major, major_space),
-                               _pf(minor, minor_space),
-                               ''.join(_pf(v, col_space) for v in values))
-
-        self._textConvert(buf, format_cols, format_row)
-
-    def _textConvert(self, buf, format_cols, format_row):
-        print >> buf, format_cols(self.items)
-
-        label_pairs = zip(self.index.major_labels,
-                          self.index.minor_labels)
-        major, minor = self.major_axis, self.minor_axis
-        for i, (major_i, minor_i) in enumerate(label_pairs):
-            row = format_row(major[major_i], minor[minor_i], self.values[i])
-            print >> buf, row
+    # def toString(self, buf=sys.stdout, col_space=15):
+    #     """
+    #     Output a screen-friendly version of this Panel
+    #     """
+    #     _pf = _pfixed
+    #     major_space = max(max([len(str(idx))
+    #                            for idx in self.major_axis]) + 4, 9)
+    #     minor_space = max(max([len(str(idx))
+    #                            for idx in self.minor_axis]) + 4, 9)
+
+    #     def format_cols(items):
+    #         return '%s%s%s' % (_pf('Major', major_space),
+    #                            _pf('Minor', minor_space),
+    #                            ''.join(_pf(h, col_space) for h in items))
+
+    #     def format_row(major, minor, values):
+    #         return '%s%s%s' % (_pf(major, major_space),
+    #                            _pf(minor, minor_space),
+    #                            ''.join(_pf(v, col_space) for v in values))
+
+    #     self._textConvert(buf, format_cols, format_row)
+
+    # def _textConvert(self, buf, format_cols, format_row):
+    #     print >> buf, format_cols(self.items)
+
+    #     label_pairs = zip(self.index.major_labels,
+    #                       self.index.minor_labels)
+    #     major, minor = self.major_axis, self.minor_axis
+    #     for i, (major_i, minor_i) in enumerate(label_pairs):
+    #         row = format_row(major[major_i], minor[minor_i], self.values[i])
+    #         print >> buf, row
 
     def swapaxes(self):
         """
diff --git a/pandas/core/series.py b/pandas/core/series.py
index f782f4b30..e1f232a6b 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1434,7 +1434,7 @@ def remove_na(arr):
     return arr[notnull(arr)]
 
 def _seriesRepr(index, vals, nanRep='NaN'):
-    string_index = [str(x) for x in index]
+    string_index = index.format().split('\n')
     maxlen = max(len(x) for x in string_index)
     padSpace = min(maxlen, 60)
 
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index df6d1fa9f..ee974b58d 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -787,10 +787,6 @@ class TestLongPanel(unittest.TestCase):
         self.assert_(np.array_equal(thecopy.values, self.panel.values))
         self.assert_(thecopy.values is not self.panel.values)
 
-    # def test_values(self):
-    #     valslice = self.panel.values[:-1]
-    #     self.assertRaises(Exception, self.panel._set_values, valslice)
-
     def test_getitem(self):
         col = self.panel['ItemA']
 
