commit 9aef32db29925bec7a0372b92a63cfc4e78398c2
Author: pilkibun <51503352+pilkibun@users.noreply.github.com>
Date:   Fri Jun 21 21:19:58 2019 +0000

    BUG: Handle NA values for ExtensionArrays in Series.count  (#26836)

diff --git a/doc/source/whatsnew/v0.25.0.rst b/doc/source/whatsnew/v0.25.0.rst
index 5e5a2aed3..19636f42c 100644
--- a/doc/source/whatsnew/v0.25.0.rst
+++ b/doc/source/whatsnew/v0.25.0.rst
@@ -782,11 +782,16 @@ Build Changes
 
 - Fix install error with PyPy on macOS (:issue:`26536`)
 
+ExtensionArray
+^^^^^^^^^^^^^^
+
+- Bug in :func:`factorize` when passing an ``ExtensionArray`` with a custom ``na_sentinel`` (:issue:`25696`).
+- :meth:`Series.count` miscounts NA values in ExtensionArrays (:issue:`26835`)
+
 Other
 ^^^^^
 
 - Removed unused C functions from vendored UltraJSON implementation (:issue:`26198`)
-- Bug in :func:`factorize` when passing an ``ExtensionArray`` with a custom ``na_sentinel`` (:issue:`25696`).
 - Allow :class:`Index` and :class:`RangeIndex` to be passed to numpy ``min`` and ``max`` functions (:issue:`26125`)
 
 .. _whatsnew_0.250.contributors:
diff --git a/pandas/core/series.py b/pandas/core/series.py
index c4a449154..11e578e74 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1659,7 +1659,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         2
         """
         if level is None:
-            return notna(com.values_from_object(self)).sum()
+            return notna(self.array).sum()
 
         if isinstance(level, str):
             level = self.index._get_level_number(level)
diff --git a/pandas/tests/extension/base/methods.py b/pandas/tests/extension/base/methods.py
index 1852edaa9..c8fd4d1b7 100644
--- a/pandas/tests/extension/base/methods.py
+++ b/pandas/tests/extension/base/methods.py
@@ -30,6 +30,13 @@ class BaseMethodsTests(BaseExtensionTests):
         expected = pd.Series([0, 1])
         self.assert_series_equal(result, expected)
 
+    def test_series_count(self, data_missing):
+        # GH#26835
+        ser = pd.Series(data_missing)
+        result = ser.count()
+        expected = 1
+        assert result == expected
+
     def test_apply_simple_series(self, data):
         result = pd.Series(data).apply(id)
         assert isinstance(result, pd.Series)
