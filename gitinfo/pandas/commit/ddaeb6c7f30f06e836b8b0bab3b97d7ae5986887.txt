commit ddaeb6c7f30f06e836b8b0bab3b97d7ae5986887
Author: Adam Klein <adamklein@gmail.com>
Date:   Sat Dec 31 17:22:39 2011 -0500

    got test_frame coverage to 100%

diff --git a/RELEASE.rst b/RELEASE.rst
index da466edb6..5d6588ea4 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -122,6 +122,7 @@ pandas 0.7.0
   - Fix outer join between two DateRanges with different offsets that returned
     an invalid DateRange
   - Cleanup DataFrame.from_records failure where index argument is an integer
+  - Fix Data.from_records failure when passed a dictionary
 
 Thanks
 ------
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index aadc0aca7..fdcf72964 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -642,6 +642,9 @@ class DataFrame(NDFrame):
                     result_index = MultiIndex.from_arrays(arrays)
                 except Exception:
                     result_index = index
+        elif isinstance(data, dict) and len(data) > 0:
+            # utilize first element of sdict to get length
+            result_index = np.arange(len(data.values()[0]))
         else:
             result_index = np.arange(len(data))
 
@@ -2681,13 +2684,6 @@ class DataFrame(NDFrame):
 
         return result
 
-    def _apply_level(self, f, level=0, broadcast=False):
-        grouped = self.groupby(level=level)
-        if broadcast:
-            return grouped.transform(f)
-        else:
-            return grouped.agg(f)
-
     def applymap(self, func):
         """
         Apply a function to a DataFrame that is intended to operate
@@ -3033,10 +3029,6 @@ class DataFrame(NDFrame):
             else:
                 result = DataFrame.apply(frame, Series.count, axis=axis)
 
-        # what happens with empty DataFrame
-        if isinstance(result, DataFrame):
-            result = Series({})
-
         return result
 
     def _count_level(self, level, axis=0, numeric_only=False):
@@ -3823,18 +3815,6 @@ def _homogenize(data, index, columns, dtype=None):
 
     return homogenized
 
-def _get_join_data(left_index, right_index, how, level):
-    # defaults
-    join_index = left_index
-    lidx, ridx = None, None
-
-    if not left_index.equals(right_index):
-        join_index, lidx, ridx = \
-            left_index.join(right_index, how=how, level=level,
-                            return_indexers=True)
-
-    return join_index, lidx, ridx
-
 def _put_str(s, space):
     return ('%s' % s)[:space].ljust(space)
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 016575123..e7956af08 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1453,7 +1453,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         self.assertEqual(len(records.dtype.names), 2)
         self.assert_('index' not in records.dtype.names)
 
-    def test_from_records_tuples(self):
+    def test_from_records_sequencelike(self):
         df = DataFrame({'A' : np.random.randn(6),
                         'B' : np.arange(6),
                         'C' : ['foo'] * 6,
@@ -1461,11 +1461,15 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         tuples = [tuple(x) for x in df.values]
         lists = [list(x) for x in tuples]
+        asdict = dict((x,y) for x, y in df.iteritems())
 
         result = DataFrame.from_records(tuples, columns=df.columns)
         result2 = DataFrame.from_records(lists, columns=df.columns)
+        result3 = DataFrame.from_records(asdict, columns=df.columns)
+
         assert_frame_equal(result, df)
         assert_frame_equal(result2, df)
+        assert_frame_equal(result3, df)
 
         result = DataFrame.from_records(tuples)
         self.assert_(np.array_equal(result.columns, range(4)))
@@ -3474,6 +3478,11 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         expected = Series(0, index=df.columns)
         assert_series_equal(result, expected)
 
+        df = DataFrame()
+        result = df.count()
+        expected = Series(0, index=[])
+        assert_series_equal(result, expected)
+
     def test_sum(self):
         self._check_stat_op('sum', np.sum, has_numeric_only=True)
 
@@ -3663,6 +3672,10 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         q = self.intframe.quantile(0.1)
         self.assertEqual(q['A'], scoreatpercentile(self.intframe['A'], 10))
 
+        # test degenerate case
+        q = DataFrame({'x':[],'y':[]}).quantile(0.1, axis=0)
+        assert(np.isnan(q['x']) and np.isnan(q['y']))
+
     def test_cumsum(self):
         self.tsframe.ix[5:10, 0] = nan
         self.tsframe.ix[10:15, 1] = nan
@@ -4095,11 +4108,11 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         for skipna in [True, False]:
             for axis in [0, 1]:
                 for df in [frame, self.intframe]:
-                    result = df.idxmax(axis=axis, skipna=skipna)
-                    expected = df.apply(Series.idxmax, axis=axis, skipna=skipna)
+                    result = df.idxmin(axis=axis, skipna=skipna)
+                    expected = df.apply(Series.idxmin, axis=axis, skipna=skipna)
                     assert_series_equal(result, expected)
 
-        self.assertRaises(Exception, frame.idxmax, axis=2)
+        self.assertRaises(Exception, frame.idxmin, axis=2)
 
     def test_idxmax(self):
         frame = self.frame
diff --git a/pandas/tests/test_graphics.py b/pandas/tests/test_graphics.py
index 50798ba0b..b299b21be 100644
--- a/pandas/tests/test_graphics.py
+++ b/pandas/tests/test_graphics.py
@@ -67,6 +67,9 @@ class TestDataFramePlots(unittest.TestCase):
         _check_plot_works(df.plot, subplots=True)
         _check_plot_works(df.plot, subplots=True, use_index=False)
 
+        df = DataFrame({'x':[1,2], 'y':[3,4]})
+        self._check_plot_fails(df.plot, kind='line', blarg=True)
+
     @slow
     def test_plot_bar(self):
         df = DataFrame(np.random.randn(6, 4),
@@ -107,6 +110,8 @@ class TestDataFramePlots(unittest.TestCase):
         df = DataFrame(np.random.randn(100, 4)).cumsum()
         _check_plot_works(df.plot, legend=True)
 
+    def _check_plot_fails(self, f, *args, **kwargs):
+        self.assertRaises(Exception, f, *args, **kwargs)
 
 PNG_PATH = 'tmp.png'
 
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index add5391e0..f0421af4c 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -960,6 +960,20 @@ class TestPanel(unittest.TestCase, PanelTests, CheckIndexing,
         renamed_nocopy['foo'] = 3.
         self.assert_((self.panel['ItemA'].values == 3).all())
 
+    def test_group_agg(self):
+        values = np.ones((10, 2)) * np.arange(10).reshape((10, 1))
+        bounds = np.arange(5) * 2
+        f = lambda x: x.mean(axis=0)
+
+        agged = group_agg(values, bounds, f)
+
+        assert(agged[1][0] == 2.5)
+        assert(agged[2][0] == 4.5)
+
+        # test a function that doesn't aggregate
+        f2 = lambda x: np.zeros((2,2))
+        self.assertRaises(Exception, group_agg, values, bounds, f2)
+
 class TestLongPanel(unittest.TestCase):
     """
     LongPanel no longer exists, but...
@@ -1172,17 +1186,6 @@ class TestLongPanel(unittest.TestCase):
         # corner case, empty
         df = pivot(np.array([]), np.array([]), np.array([]))
 
-
-def test_group_agg():
-    values = np.ones((10, 2)) * np.arange(10).reshape((10, 1))
-    bounds = np.arange(5) * 2
-    f = lambda x: x.mean(axis=0)
-
-    agged = group_agg(values, bounds, f)
-
-    assert(agged[1][0] == 2.5)
-    assert(agged[2][0] == 4.5)
-
 def test_monotonic():
     pos = np.array([1, 2, 3, 5])
 
