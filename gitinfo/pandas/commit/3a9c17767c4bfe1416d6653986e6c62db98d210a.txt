commit 3a9c17767c4bfe1416d6653986e6c62db98d210a
Author: jreback <jeff@reback.net>
Date:   Fri Sep 13 14:51:06 2013 -0400

    TST: explicity tests for iterator/generator types in DataFrame/Series construction
    
    ENH: add generator support in DataFrame constructor

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 5aad9c6a4..fb08c5eaa 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -16,6 +16,7 @@ import operator
 import sys
 import collections
 import warnings
+import types
 
 from numpy import nan as NA
 import numpy as np
@@ -413,7 +414,9 @@ class DataFrame(NDFrame):
             else:
                 mgr = self._init_ndarray(data, index, columns, dtype=dtype,
                                          copy=copy)
-        elif isinstance(data, list):
+        elif isinstance(data, (list, types.GeneratorType)):
+            if isinstance(data, types.GeneratorType):
+                data = list(data)
             if len(data) > 0:
                 if index is None and isinstance(data[0], Series):
                     index = _get_names_from_index(data)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 9a42a9d1d..507c2055e 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2632,6 +2632,31 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         expected = DataFrame({ 'A' : list(range(10)) })
         assert_frame_equal(result, expected, check_dtype=False)
 
+        expected = DataFrame([ list(range(10)), list(range(10)) ])
+        result = DataFrame([ array.array('i', range(10)), array.array('i',range(10)) ])
+        assert_frame_equal(result, expected, check_dtype=False)
+
+    def test_constructor_iterator(self):
+
+        expected = DataFrame([ list(range(10)), list(range(10)) ])
+        result = DataFrame([ range(10), range(10) ])
+        assert_frame_equal(result, expected)
+
+    def test_constructor_generator(self):
+        #related #2305
+
+        gen1 = (i for i in range(10))
+        gen2 = (i for i in range(10))
+
+        expected = DataFrame([ list(range(10)), list(range(10)) ])
+        result = DataFrame([ gen1, gen2 ])
+        assert_frame_equal(result, expected)
+
+        gen = ([ i, 'a'] for i in range(10))
+        result = DataFrame(gen)
+        expected = DataFrame({ 0 : range(10), 1 : 'a' })
+        assert_frame_equal(result, expected)
+
     def test_constructor_list_of_dicts(self):
         data = [OrderedDict([['a', 1.5], ['b', 3], ['c', 4], ['d', 6]]),
                 OrderedDict([['a', 1.5], ['b', 3], ['d', 6]]),
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 7a993cbcf..d2d0bc39f 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -353,6 +353,12 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
 
         assert_series_equal(s2, s1.sort_index())
 
+    def test_constructor_iterator(self):
+
+        expected = Series(list(range(10)))
+        result = Series(range(10))
+        assert_series_equal(result, expected)
+
     def test_constructor_generator(self):
         gen = (i for i in range(10))
 
