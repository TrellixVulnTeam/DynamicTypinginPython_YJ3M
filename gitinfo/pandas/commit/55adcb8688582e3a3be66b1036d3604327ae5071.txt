commit 55adcb8688582e3a3be66b1036d3604327ae5071
Author: Simon Hawkins <simonjayhawkins@gmail.com>
Date:   Sun Jun 14 10:51:39 2020 +0100

    TYP: check_untyped_defs pandas.io.json._table_schema (#34695)
    
    Co-authored-by: William Ayd <william.ayd@icloud.com>

diff --git a/pandas/io/json/_table_schema.py b/pandas/io/json/_table_schema.py
index 239ff6241..84146a5d7 100644
--- a/pandas/io/json/_table_schema.py
+++ b/pandas/io/json/_table_schema.py
@@ -3,10 +3,11 @@ Table Schema builders
 
 https://specs.frictionlessdata.io/json-table-schema/
 """
+from typing import TYPE_CHECKING, Any, Dict, Optional, cast
 import warnings
 
 import pandas._libs.json as json
-from pandas._typing import DtypeObj
+from pandas._typing import DtypeObj, FrameOrSeries, JSONSerializable
 
 from pandas.core.dtypes.common import (
     is_bool_dtype,
@@ -24,6 +25,9 @@ from pandas.core.dtypes.dtypes import CategoricalDtype
 from pandas import DataFrame
 import pandas.core.common as com
 
+if TYPE_CHECKING:
+    from pandas.core.indexes.multi import MultiIndex  # noqa: F401
+
 loads = json.loads
 
 
@@ -103,7 +107,10 @@ def convert_pandas_type_to_json_field(arr):
         name = "values"
     else:
         name = arr.name
-    field = {"name": name, "type": as_json_table_type(dtype)}
+    field: Dict[str, JSONSerializable] = {
+        "name": name,
+        "type": as_json_table_type(dtype),
+    }
 
     if is_categorical_dtype(dtype):
         cats = dtype.categories
@@ -182,7 +189,12 @@ def convert_json_field_to_pandas_type(field):
     raise ValueError(f"Unsupported or invalid field type: {typ}")
 
 
-def build_table_schema(data, index=True, primary_key=None, version=True):
+def build_table_schema(
+    data: FrameOrSeries,
+    index: bool = True,
+    primary_key: Optional[bool] = None,
+    version: bool = True,
+) -> Dict[str, JSONSerializable]:
     """
     Create a Table schema from ``data``.
 
@@ -233,11 +245,12 @@ def build_table_schema(data, index=True, primary_key=None, version=True):
     if index is True:
         data = set_default_names(data)
 
-    schema = {}
+    schema: Dict[str, Any] = {}
     fields = []
 
     if index:
         if data.index.nlevels > 1:
+            data.index = cast("MultiIndex", data.index)
             for level, name in zip(data.index.levels, data.index.names):
                 new_field = convert_pandas_type_to_json_field(level)
                 new_field["name"] = name
diff --git a/setup.cfg b/setup.cfg
index 65749941c..aaebff441 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -268,9 +268,6 @@ check_untyped_defs=False
 [mypy-pandas.io.json._json]
 check_untyped_defs=False
 
-[mypy-pandas.io.json._table_schema]
-check_untyped_defs=False
-
 [mypy-pandas.io.parsers]
 check_untyped_defs=False
 
