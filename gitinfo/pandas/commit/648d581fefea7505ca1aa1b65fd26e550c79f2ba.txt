commit 648d581fefea7505ca1aa1b65fd26e550c79f2ba
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Dec 10 15:43:57 2012 -0500

    ENH: index_col=False disables first column -> index. fixes FEC parsing problem. close #2442

diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index 8a8df8dc6..dd46d5758 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -48,9 +48,11 @@ header : int, default 0
 skiprows : list-like or integer
     Row numbers to skip (0-indexed) or number of rows to skip (int)
     at the start of the file
-index_col : int or sequence, default None
-    Column to use as the row labels of the DataFrame. If a sequence is
-    given, a MultiIndex is used.
+index_col : int or sequence or False, default None
+    Column to use as the row labels of the DataFrame. If a sequence is given, a
+    MultiIndex is used. If you have a malformed file with delimiters at the end
+    of each line, you might consider index_col=False to force pandas to _not_
+    use the first column as the index (row names)
 names : array-like
     List of column names to use. If file contains no header row, then you
     should explicitly pass header=None
@@ -559,7 +561,7 @@ class TextFileReader(object):
         # really delete this one
         keep_default_na = result.pop('keep_default_na')
 
-        if index_col is not None:
+        if _is_index_col(index_col):
             if not isinstance(index_col, (list, tuple, np.ndarray)):
                 index_col = [index_col]
         result['index_col'] = index_col
@@ -642,6 +644,8 @@ class TextFileReader(object):
     get_chunk = read
 
 
+def _is_index_col(col):
+    return col is not None and col is not False
 
 class ParserBase(object):
 
@@ -687,7 +691,7 @@ class ParserBase(object):
                 return (j in self.parse_dates) or (name in self.parse_dates)
 
     def _make_index(self, data, alldata, columns):
-        if self.index_col is None or len(self.index_col) == 0:
+        if not _is_index_col(self.index_col) or len(self.index_col) == 0:
             index = None
 
         elif not self._has_complex_date_col:
@@ -872,6 +876,8 @@ class CParserWrapper(ParserBase):
             src = com.UTF8Recoder(src, kwds['encoding'])
             kwds['encoding'] = 'utf-8'
 
+        # #2442
+        kwds['allow_leading_cols'] = self.index_col is not False
         self._reader = _parser.TextReader(src, **kwds)
 
         # XXX
@@ -897,7 +903,9 @@ class CParserWrapper(ParserBase):
         self.orig_names = self.names
 
         if not self._has_complex_date_col:
-            if self._reader.leading_cols == 0 and self.index_col is not None:
+            if (self._reader.leading_cols == 0 and
+                _is_index_col(self.index_col)):
+
                 self._name_processed = True
                 (self.index_names, self.names,
                  self.index_col) = _clean_index_names(self.names,
@@ -1390,7 +1398,10 @@ class PythonParser(ParserBase):
         # implicitly index_col=0 b/c 1 fewer column names
         implicit_first_cols = 0
         if line is not None:
-            implicit_first_cols = len(line) - len(columns)
+            # leave it 0, #2442
+            if self.index_col is not False:
+                implicit_first_cols = len(line) - len(columns)
+
             if next_line is not None:
                 if len(next_line) == len(line) + len(columns):
                     # column and index names on diff rows
@@ -1427,7 +1438,7 @@ class PythonParser(ParserBase):
 
         assert(self.skip_footer >= 0)
 
-        if col_len != zip_len:
+        if col_len != zip_len and self.index_col is not False:
             row_num = -1
             i = 0
             for (i, l) in enumerate(content):
@@ -1622,7 +1633,7 @@ def _clean_na_values(na_values, keep_default_na=True):
 
 
 def _clean_index_names(columns, index_col):
-    if index_col is None:
+    if not _is_index_col(index_col):
         return None, columns, index_col
 
     columns = list(columns)
diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index bc95f8113..06c6b2491 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -1455,6 +1455,20 @@ A,B,C
 
         self.assertEquals(got, expected)
 
+    def test_trailing_delimiters(self):
+        # #2442. grumble grumble
+        data = """A,B,C
+1,2,3,
+4,5,6,
+7,8,9,"""
+        result = self.read_csv(StringIO(data), index_col=False)
+
+        expected = DataFrame({'A': [1, 4, 7], 'B': [2, 5, 8],
+                              'C': [3, 6, 9]})
+
+        tm.assert_frame_equal(result, expected)
+
+
 
 class TestPythonParser(ParserTests, unittest.TestCase):
 
diff --git a/pandas/src/parser.pyx b/pandas/src/parser.pyx
index 325eb55a4..cf875c9d8 100644
--- a/pandas/src/parser.pyx
+++ b/pandas/src/parser.pyx
@@ -236,6 +236,7 @@ cdef class TextReader:
 
     cdef public:
         int leading_cols, table_width, skip_footer, buffer_lines
+        object allow_leading_cols
         object delimiter, converters, delim_whitespace
         object na_values, true_values, false_values
         object memory_map
@@ -290,6 +291,7 @@ cdef class TextReader:
                   false_values=None,
 
                   compact_ints=False,
+                  allow_leading_cols=True,
                   use_unsigned=False,
                   low_memory=False,
                   buffer_lines=None,
@@ -422,6 +424,7 @@ cdef class TextReader:
         #----------------------------------------
         # header stuff
 
+        self.allow_leading_cols = allow_leading_cols
         self.leading_cols = 0
 
         # TODO: no header vs. header is not the first row
@@ -604,7 +607,9 @@ cdef class TextReader:
                                    'data has %d fields'
                                    % (passed_count, field_count))
 
-            self.leading_cols = field_count - passed_count
+            # oh boy, #2442
+            if self.allow_leading_cols:
+                self.leading_cols = field_count - passed_count
         else:
             # TODO: some better check here
             # field_count = len(header)
@@ -1002,7 +1007,12 @@ cdef class TextReader:
                 return self.names[i]
         else:
             if self.header is not None:
-                return self.header[i - self.leading_cols]
+                j = i - self.leading_cols
+                # hack for #2442
+                if j == len(self.header):
+                    return j
+                else:
+                    return self.header[j]
             else:
                 return None
 
