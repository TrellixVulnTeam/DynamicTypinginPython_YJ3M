commit dbdb6e021bf3e64a1eb2ad9905f886695ff593d0
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Dec 28 22:18:31 2011 -0500

    ENH: default name assignment with regular index in reset_index, GH #476

diff --git a/RELEASE.rst b/RELEASE.rst
index ab2c85737..3cf3590ff 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -74,6 +74,8 @@ pandas 0.6.2
   - Friendlier error message in setup.py if NumPy not installed
   - Use common set of NA-handling operations (sum, mean, etc.) in Panel class
     also (GH #536)
+  - Default name assignment when calling ``reset_index`` on DataFrame with a
+    regular (non-hierarchical) index (GH #476)
 
 **Bug fixes**
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index bb8032559..5a764808d 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1644,9 +1644,10 @@ class DataFrame(NDFrame):
                 level_values = lib.maybe_convert_objects(level_values)
                 new_obj.insert(0, col_name, level_values.take(lab))
         else:
-            if self.index.name is None:
-                raise Exception('Must have name set')
-            new_obj.insert(0, self.index.name, self.index.values)
+            name = self.index.name
+            if name is None:
+                name = 'index' if 'index' not in self else 'level_0'
+            new_obj.insert(0, name, self.index.values)
         new_obj.index = np.arange(len(new_obj))
         return new_obj
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index c4da54275..3047a2e9f 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3828,8 +3828,15 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         self.assert_(np.array_equal(deleveled['second'],
                                     deleveled2['level_1']))
 
-        # exception if no name
-        self.assertRaises(Exception, self.frame.reset_index)
+        # default name assigned
+        rdf = self.frame.reset_index()
+        self.assert_(np.array_equal(rdf['index'], self.frame.index.values))
+
+        # default name assigned, corner case
+        df = self.frame.copy()
+        df['index'] = 'foo'
+        rdf = df.reset_index()
+        self.assert_(np.array_equal(rdf['level_0'], self.frame.index.values))
 
         # but this is ok
         self.frame.index.name = 'index'
