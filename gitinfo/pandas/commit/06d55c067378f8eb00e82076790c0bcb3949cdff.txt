commit 06d55c067378f8eb00e82076790c0bcb3949cdff
Author: jreback <jeff@reback.net>
Date:   Sat Dec 1 08:30:30 2012 -0500

    store.keys() now returns the ABSOLUTE path-name of the sub-stores (e.g always has a leading '/')
    bug in __repr__ for tables - fixed

diff --git a/RELEASE.rst b/RELEASE.rst
index 089bcde77..7746d8bd5 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -57,6 +57,7 @@ pandas 0.10.0
   - `obj.fillna()` is no longer valid; make `method='pad'` no longer the
     default option, to be more explicit about what kind of filling to
     perform. Add `ffill/bfill` convenience functions per above (#2284)
+  - `HDFStore.keys()` now returns an absolute path-name for each key
 
 **Improvements to existing features**
 
diff --git a/doc/source/io.rst b/doc/source/io.rst
index 9d802d3ae..a81899078 100644
--- a/doc/source/io.rst
+++ b/doc/source/io.rst
@@ -877,6 +877,9 @@ Keys to a store can be specified as a string. These can be in a hierarchical pat
    store.append('food/apple',  df)
    store
 
+   # a list of keys are returned
+   store.keys()
+
    # remove all nodes under this level
    store.remove('food')
    store	
diff --git a/doc/source/v0.10.0.txt b/doc/source/v0.10.0.txt
index d1f56aa02..cb6711f46 100644
--- a/doc/source/v0.10.0.txt
+++ b/doc/source/v0.10.0.txt
@@ -90,7 +90,7 @@ Updated PyTables Support
 
        - performance improvments on table writing
        - support for arbitrarily indexed dimensions
-	   - ``SparseSeries`` now has a ``density`` property (#2384)
+       - ``SparseSeries`` now has a ``density`` property (#2384)
 
   **Bug Fixes**
 
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index da1b2f277..bcfe94c17 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -211,7 +211,14 @@ class HDFStore(object):
         return self.remove(key)
 
     def __contains__(self, key):
-        return hasattr(self.root, key)
+        """ check for existance of this key
+              can match the exact pathname or the pathnm w/o the leading '/'
+        """
+        node = self.get_node(key)
+        if node is not None:
+            name = node._v_pathname
+            return re.search(key,name) is not None
+        return False
 
     def __len__(self):
         return len(self.groups())
@@ -228,14 +235,14 @@ class HDFStore(object):
 
                 keys.append(str(n._v_pathname))
 
-                # a group
-                if kind is None:
-                    values.append('')
-
                 # a table
-                elif _is_table_type(v):
+                if _is_table_type(n):
                     values.append(str(create_table(self, n)))
                 
+                # a group
+                elif kind is None:
+                    values.append('unknown type')
+
                 # another type of pandas object
                 else:
                     values.append(_NAME_MAP[kind])
@@ -249,9 +256,9 @@ class HDFStore(object):
     def keys(self):
         """
         Return a (potentially unordered) list of the keys corresponding to the
-        objects stored in the HDFStore
+        objects stored in the HDFStore. These are ABSOLUTE path-names (e.g. have the leading '/'
         """
-        return [ n._v_pathname[1:] for n in self.groups() ]
+        return [ n._v_pathname for n in self.groups() ]
 
     def open(self, mode='a', warn=True):
         """
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index 5907c8098..0ecb71b8a 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -53,14 +53,14 @@ class TestHDFStore(unittest.TestCase):
 
         os.remove(self.scratchpath)
 
-    def test_len_keys(self):
+    def test_keys(self):
         self.store['a'] = tm.makeTimeSeries()
         self.store['b'] = tm.makeStringSeries()
         self.store['c'] = tm.makeDataFrame()
         self.store['d'] = tm.makePanel()
         self.store['foo/bar'] = tm.makePanel()
         self.assertEquals(len(self.store), 5)
-        self.assert_(set(self.store.keys()) == set(['a', 'b', 'c', 'd', 'foo/bar']))
+        self.assert_(set(self.store.keys()) == set(['/a', '/b', '/c', '/d', '/foo/bar']))
 
     def test_repr(self):
         repr(self.store)
@@ -81,6 +81,9 @@ class TestHDFStore(unittest.TestCase):
         self.assert_('b' in self.store)
         self.assert_('c' not in self.store)
         self.assert_('foo/bar' in self.store)
+        self.assert_('/foo/bar' in self.store)
+        self.assert_('/foo/b' not in self.store)
+        self.assert_('bar' not in self.store)
 
     def test_reopen_handle(self):
         self.store['a'] = tm.makeTimeSeries()
