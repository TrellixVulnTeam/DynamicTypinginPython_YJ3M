commit 2ca5441ab589eee02e3e24342e134c774c81a726
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jun 27 20:45:57 2011 -0400

    changed float_format to precision

diff --git a/pandas/core/common.py b/pandas/core/common.py
index e13fc03fb..4c635b5b8 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -125,19 +125,17 @@ def _try_sort(iterable):
 _float_format = lambda x: '%.4g' % x
 _column_space = 12
 
-def set_printoptions(float_format=None, column_space=None):
+def set_printoptions(precision=None, column_space=None):
     """
-    float_format : string or function
-        Strings must be of the form '%s', '%.4f', '%.4g', etc.
+    precision : int
+        Floating point output precision
     column_space : int
         Default space for DataFrame columns, defaults to 12
     """
     global _float_format, _column_space
-    if float_format is not None:
-        if isinstance(float_format, basestring):
-            _float_format = lambda x: float_format % x
-        else:
-            _float_format = float_format
+    if precision is not None:
+        float_format = '%.' + '%d' % precision + 'g'
+        _float_format = lambda x: float_format % x
     if column_space is not None:
         _column_space = column_space
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 96b2252ac..ebaeec371 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -911,21 +911,13 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         foo = repr(self.unsortable)
 
         import pandas.core.common as common
-        common.set_printoptions(float_format='%.4f', column_space=10)
-        repr(self.frame)
-        common.set_printoptions(float_format=lambda x: '%.4f' % x)
+        common.set_printoptions(precision=3, column_space=10)
         repr(self.frame)
 
     def test_head_tail(self):
         assert_frame_equal(self.frame.head(), self.frame[:5])
         assert_frame_equal(self.frame.tail(), self.frame[-5:])
 
-        # for i in range(5):
-        #     self.frame['foo%d' % i] = 1
-
-        # self.frame.head(buf=buf)
-        # self.frame.tail(buf=buf)
-
     def test_repr_corner(self):
         # representing infs poses no problems
         df = DataFrame({'foo' : np.inf * np.empty(10)})
