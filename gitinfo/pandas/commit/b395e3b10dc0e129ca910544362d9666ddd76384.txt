commit b395e3b10dc0e129ca910544362d9666ddd76384
Author: Adam Klein <adamklein@gmail.com>
Date:   Mon Apr 2 13:01:09 2012 -0400

    BUG: fixed YearEnd offset for month != 12, added tests

diff --git a/pandas/core/datetools.py b/pandas/core/datetools.py
index 1ca043351..e8510bc74 100644
--- a/pandas/core/datetools.py
+++ b/pandas/core/datetools.py
@@ -1557,16 +1557,17 @@ class YearEnd(DateOffset, CacheableOffset):
 
     def apply(self, other):
         n = self.n
-        if other.month != 12 or other.day != 31:
-            other = datetime(other.year - 1, 12, 31)
+        wkday, days_in_month = monthrange(other.year, self.month)
+        if other.month != self.month or other.day != days_in_month:
+            other = datetime(other.year - 1, self.month, days_in_month)
             if n <= 0:
                 n = n + 1
         other = other + relativedelta(years=n)
         return other
 
-    @classmethod
-    def onOffset(cls, someDate):
-        return someDate.month == 12 and someDate.day == 31
+    def onOffset(self, someDate):
+        wkday, days_in_month = monthrange(someDate.year, self.month)
+        return self.month == someDate.month and someDate.day == days_in_month
 
 
 class YearBegin(DateOffset, CacheableOffset):
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 4eb8eef79..8f1f6d869 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -740,19 +740,18 @@ def _generate_time_binner(dtindex, offset,
     if begin is None:
         first = lib.Timestamp(dtindex[0] - offset)
     else:
-        first = lib.Timestamp(begin)
+        first = lib.Timestamp(offset.rollback(begin))
 
     if end is None:
         last = lib.Timestamp(dtindex[-1] + offset)
     else:
-        last = lib.Timestamp(end)
+        last = lib.Timestamp(offset.rollforward(end))
 
     if isinstance(offset, dt.Tick):
         return np.arange(first.value, last.value+1, offset.us_stride(),
                          dtype=np.int64)
 
-    return DatetimeIndex(offset=offset,
-                         start=first, end=last, periods=nperiods)
+    return DatetimeIndex(freq=offset, start=first, end=last, periods=nperiods)
 
 class Tinterval(Grouper, CustomGrouper):
     """
diff --git a/pandas/core/index.py b/pandas/core/index.py
index f14b5db31..99d9cc7ff 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1315,8 +1315,11 @@ class DatetimeIndex(Int64Index):
 
             endLoc = startLoc + periods
         else:
-            start = offset.rollforward(start)
-            end = offset.rollback(end)
+            if not offset.onOffset(start):
+                start = offset.rollforward(start)
+
+            if not offset.onOffset(end):
+                end = offset.rollback(end)
 
             startLoc = cachedRange.get_loc(start)
             endLoc = cachedRange.get_loc(end) + 1
diff --git a/pandas/tests/test_datetools.py b/pandas/tests/test_datetools.py
index 94f65b2bd..a9bfcf72b 100644
--- a/pandas/tests/test_datetools.py
+++ b/pandas/tests/test_datetools.py
@@ -1160,6 +1160,53 @@ class TestYearEnd(unittest.TestCase):
         for offset, date, expected in tests:
             assertOnOffset(offset, date, expected)
 
+class TestYearEndDiffMonth(unittest.TestCase):
+
+    def test_offset(self):
+        tests = []
+
+        tests.append((YearEnd(month=3),
+                      {datetime(2008, 1, 1): datetime(2008, 3, 31),
+                       datetime(2008, 2, 15): datetime(2008, 3, 31),
+                       datetime(2008, 3, 31): datetime(2009, 3, 31),
+                       datetime(2008, 3, 30): datetime(2008, 3, 31),
+                       datetime(2005, 3, 31): datetime(2006, 3, 31),}))
+
+        tests.append((YearEnd(0, month=3),
+                      {datetime(2008, 1, 1): datetime(2008, 3, 31),
+                       datetime(2008, 2, 28): datetime(2008, 3, 31),
+                       datetime(2008, 3, 31): datetime(2008, 3, 31),
+                       datetime(2005, 3, 30): datetime(2005, 3, 31),}))
+
+        tests.append((YearEnd(-1, month=3),
+                      {datetime(2007, 1, 1): datetime(2006, 3, 31),
+                       datetime(2008, 2, 28): datetime(2007, 3, 31),
+                       datetime(2008, 3, 31): datetime(2007, 3, 31),
+                       datetime(2006, 3, 29): datetime(2005, 3, 31),
+                       datetime(2006, 3, 30): datetime(2005, 3, 31),
+                       datetime(2007, 3, 1): datetime(2006, 3, 31),}))
+
+        tests.append((YearEnd(-2, month=3),
+                      {datetime(2007, 1, 1): datetime(2005, 3, 31),
+                       datetime(2008, 6, 30): datetime(2006, 3, 31),
+                       datetime(2008, 3, 31): datetime(2006, 3, 31),}))
+
+        for dateOffset, cases in tests:
+            for baseDate, expected in cases.iteritems():
+                assertEq(dateOffset, baseDate, expected)
+
+    def test_onOffset(self):
+
+        tests = [
+            (YearEnd(month=3), datetime(2007, 3, 31), True),
+            (YearEnd(month=3), datetime(2008, 1, 1), False),
+            (YearEnd(month=3), datetime(2006, 3, 31), True),
+            (YearEnd(month=3), datetime(2006, 3, 29), False),
+        ]
+
+        for offset, date, expected in tests:
+            assertOnOffset(offset, date, expected)
+
 def assertEq(dateOffset, baseDate, expected):
     actual = dateOffset + baseDate
     try:
