commit 91802b14cfcf8a0ab0af9d17be8552c75e2dd324
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Apr 10 13:10:58 2012 -0400

    TST: more test coverage

diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index e15f38db5..171b8ffa8 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -120,7 +120,7 @@ def _read(cls, filepath_or_buffer, kwds):
     if isinstance(filepath_or_buffer, str) and _is_url(filepath_or_buffer):
         from urllib2 import urlopen
         filepath_or_buffer = urlopen(filepath_or_buffer)
-        if py3compat.PY3:
+        if py3compat.PY3:  # pragma: no cover
             from io import TextIOWrapper
             if encoding:
                 errors = 'strict'
@@ -745,6 +745,11 @@ class FixedWidthFieldParser(TextParser):
 #-------------------------------------------------------------------------------
 # ExcelFile class
 
+_openpyxl_msg = ("\nFor parsing .xlsx files 'openpyxl' is required.\n"
+                 "You can install it via 'easy_install openpyxl' or "
+                 "'pip install openpyxl'.\nAlternatively, you could save"
+                 " the .xlsx file as a .xls file.\n")
+
 
 class ExcelFile(object):
     """
@@ -767,10 +772,8 @@ class ExcelFile(object):
             try:
                 from openpyxl.reader.excel import load_workbook
                 self.book = load_workbook(path, use_iterators=True)
-            except ImportError:
-                raise ImportError("\nFor parsing .xlsx files 'openpyxl' is required.\n"
-                      "You can install it via 'easy_install openpyxl' or 'pip install openpyxl'.\n"
-                      "Alternatively, you could save the .xlsx file as a .xls file.\n")
+            except ImportError:  # pragma: no cover
+                raise ImportError(_openpyxl_msg)
         self.path = path
 
     def __repr__(self):
diff --git a/pandas/tests/test_functions.py b/pandas/tests/test_functions.py
deleted file mode 100644
index 5b416eda1..000000000
--- a/pandas/tests/test_functions.py
+++ /dev/null
@@ -1,30 +0,0 @@
-from pandas import Index, isnull
-import pandas.sandbox.functions as fns
-import numpy as np
-import unittest
-import numpy as np
-
-
-class TestReductions(unittest.TestCase):
-
-    def setUp(self):
-        self.index = Index(np.arange(100))
-        pass
-
-    def test_upsample_mean(self):
-        pass
-
-    def test_upsample_max(self):
-        pass
-
-    def test_upsample_min(self):
-        pass
-
-    def test_upsample_generic(self):
-        pass
-
-if __name__ == '__main__':
-    import nose
-    nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
-                   exit=False)
-
