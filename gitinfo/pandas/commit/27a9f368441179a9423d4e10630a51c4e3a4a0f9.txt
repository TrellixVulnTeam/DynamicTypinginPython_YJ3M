commit 27a9f368441179a9423d4e10630a51c4e3a4a0f9
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Apr 4 01:27:38 2012 -0400

    BUG: make it further in the test suite

diff --git a/pandas/core/index.py b/pandas/core/index.py
index 02511119c..d58262a12 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -70,8 +70,6 @@ class Index(np.ndarray):
     _left_indexer = lib.left_join_indexer_object
     _inner_indexer = lib.inner_join_indexer_object
     _outer_indexer = lib.outer_join_indexer_object
-    _pad = lib.pad_object
-    _backfill = lib.backfill_object
 
     name = None
     asi8 = None
@@ -999,8 +997,6 @@ class Int64Index(Index):
     _left_indexer = lib.left_join_indexer_int64
     _inner_indexer = lib.inner_join_indexer_int64
     _outer_indexer = lib.outer_join_indexer_int64
-    _pad = lib.pad_int64
-    _backfill = lib.backfill_int64
 
     _engine_type = _gin.Int64Engine
 
@@ -1178,8 +1174,6 @@ class DatetimeIndex(Int64Index):
     _left_indexer  = _join_i8_wrapper(lib.left_join_indexer_int64,
                                       with_indexers=False)
     _map_indices   = _wrap_i8_function(lib.map_indices_int64)
-    _pad           = _wrap_i8_function(lib.pad_int64)
-    _backfill      = _wrap_i8_function(lib.backfill_int64)
     _groupby       = lib.groupby_arrays # _wrap_i8_function(lib.groupby_int64)
 
     _arrmap        = _wrap_dt_function(lib.arrmap_object)
diff --git a/pandas/src/engines.pyx b/pandas/src/engines.pyx
index ee9dc09df..34316e62d 100644
--- a/pandas/src/engines.pyx
+++ b/pandas/src/engines.pyx
@@ -1,8 +1,6 @@
 from numpy cimport ndarray
 
 
-cdef inline is_definitely_invalid_key(object val):
-    return PySlice_Check(val) or cnp.PyArray_Check(val)
 
 from numpy cimport float64_t, int32_t, int64_t, uint8_t
 cimport cython
@@ -28,6 +26,12 @@ PyDateTime_IMPORT
 
 cdef extern from "Python.h":
     int PySlice_Check(object)
+    int PyList_Check(object)
+
+
+cdef inline is_definitely_invalid_key(object val):
+    return (PySlice_Check(val) or cnp.PyArray_Check(val)
+            or PyList_Check(val))
 
 def get_value_at(ndarray arr, object loc):
     return util.get_value_at(arr, loc)
@@ -239,6 +243,9 @@ cdef class DatetimeEngine(IndexEngine):
     cdef _get_index_values(self):
         return self.index_weakref().values.view('i8')
 
+    def _call_monotonic(self, values):
+        return _tseries.is_monotonic_int64(values)
+
     cpdef get_loc(self, object val):
         if is_definitely_invalid_key(val):
             raise TypeError
@@ -256,6 +263,24 @@ cdef class DatetimeEngine(IndexEngine):
 
         return self.mapping.get_item(val)
 
+    def get_indexer(self, values):
+        self._ensure_mapping_populated()
+        if values.dtype != 'M8':
+            return np.repeat(-1, len(values)).astype('i4')
+        values = np.asarray(values).view('i8')
+        return self.mapping.lookup(values)
+
+    def get_pad_indexer(self, other):
+        if other.dtype != 'M8':
+            return np.repeat(-1, len(other)).astype('i4')
+        other = np.asarray(other).view('i8')
+        return _tseries.pad_int64(self._get_index_values(), other)
+
+    def get_backfill_indexer(self, other):
+        if other.dtype != 'M8':
+            return np.repeat(-1, len(other)).astype('i4')
+        other = np.asarray(other).view('i8')
+        return _tseries.backfill_int64(self._get_index_values(), other)
 
 # ctypedef fused idxvalue_t:
 #     object
