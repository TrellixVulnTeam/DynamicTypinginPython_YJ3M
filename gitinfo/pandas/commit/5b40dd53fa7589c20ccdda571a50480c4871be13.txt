commit 5b40dd53fa7589c20ccdda571a50480c4871be13
Author: Chang She <chang@lambdafoundry.com>
Date:   Fri Jun 15 16:25:18 2012 -0400

    BUG: do not convert bday freq in ts plots #1482

diff --git a/pandas/tseries/frequencies.py b/pandas/tseries/frequencies.py
index ea108ee76..52640237b 100644
--- a/pandas/tseries/frequencies.py
+++ b/pandas/tseries/frequencies.py
@@ -239,7 +239,6 @@ _offset_map = {
 _offset_to_period_map = {
     'WEEKDAY' : 'D',
     'EOM' : 'M',
-    'B' : 'D',
     'BM' : 'M',
     'BQS' : 'Q',
     'QS' : 'Q',
@@ -258,7 +257,7 @@ for prefix in need_suffix:
         _offset_to_period_map['%s-%s' % (prefix, m)] = \
             _offset_to_period_map[prefix]
 
-def to_calendar_freq(offset_str):
+def get_period_alias(offset_str):
     """ alias to closest period strings BQ->Q etc"""
     return _offset_to_period_map.get(offset_str, offset_str)
 
diff --git a/pandas/tseries/plotting.py b/pandas/tseries/plotting.py
index ea2596e0c..4fae7107c 100644
--- a/pandas/tseries/plotting.py
+++ b/pandas/tseries/plotting.py
@@ -81,11 +81,10 @@ def tsplot(series, plotf, *args, **kwargs):
     else:
         freq = frequencies.get_base_alias(freq)
 
-    freq = frequencies.to_calendar_freq(freq)
+    freq = frequencies.get_period_alias(freq)
     # Convert DatetimeIndex to PeriodIndex
     if isinstance(series.index, DatetimeIndex):
-        idx = series.index.to_period(freq=freq)
-        series = Series(series.values, idx, name=series.name)
+        series = series.to_period(freq=freq)
 
     if not isinstance(series.index, PeriodIndex):
         #try to get it to DatetimeIndex then to period
@@ -99,8 +98,6 @@ def tsplot(series, plotf, *args, **kwargs):
     if freq != series.index.freq:
         series = series.asfreq(freq)
 
-
-
     style = kwargs.pop('style', None)
 
     if 'ax' in kwargs:
diff --git a/pandas/tseries/tests/test_plotting.py b/pandas/tseries/tests/test_plotting.py
index 35a3233f0..e5e1b95d7 100644
--- a/pandas/tseries/tests/test_plotting.py
+++ b/pandas/tseries/tests/test_plotting.py
@@ -110,9 +110,9 @@ class TestTSPlot(unittest.TestCase):
 
     @slow
     def test_irregular_datetime64_repr_bug(self):
+        import matplotlib.pyplot as plt
         ser = tm.makeTimeSeries()
         ser = ser[[0,1,2,7]]
-        import matplotlib.pyplot as plt
 
         fig = plt.gcf()
         plt.clf()
@@ -125,21 +125,34 @@ class TestTSPlot(unittest.TestCase):
 
     @slow
     def test_business_freq(self):
+        import matplotlib.pyplot as plt
+        plt.close('all')
         bts = tm.makePeriodSeries()
-        ts = bts.asfreq('D')
+        ax = bts.plot()
+        self.assert_(ax.get_lines()[0].get_xydata()[0, 0],
+                     bts.index[0].ordinal)
+        idx = ax.get_lines()[0].get_xdata()
+        self.assert_(idx.freqstr == 'B')
+
+    @slow
+    def test_business_freq_convert(self):
+        import matplotlib.pyplot as plt
+        plt.close('all')
+        n = tm.N
+        tm.N = 300
+        bts = tm.makeTimeSeries().asfreq('BM')
+        tm.N = n
+        ts = bts.to_period('M')
         ax = bts.plot()
         self.assert_(ax.get_lines()[0].get_xydata()[0, 0], ts.index[0].ordinal)
         idx = ax.get_lines()[0].get_xdata()
-        self.assert_(idx.freqstr == 'D')
+        self.assert_(idx.freqstr == 'M')
 
     @slow
     def test_dataframe(self):
-        bts = DataFrame({'a': tm.makePeriodSeries()})
-        ts = bts.asfreq('D')
+        bts = DataFrame({'a': tm.makeTimeSeries()})
         ax = bts.plot()
-        self.assert_(ax.get_lines()[0].get_xydata()[0, 0], ts.index[0].ordinal)
         idx = ax.get_lines()[0].get_xdata()
-        self.assert_(idx.freqstr == 'D')
 
     @slow
     def test_set_xlim(self):
