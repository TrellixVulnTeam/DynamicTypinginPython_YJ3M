commit bc696a7404711d053acbcda98043b65248fa9907
Author: Chang She <chang@lambdafoundry.com>
Date:   Fri Apr 5 10:42:41 2013 -0700

    BUG: Series diff(0) fails #3257

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 22fad2aed..49d3015a5 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -634,7 +634,7 @@ def diff(arr, n, axis=0):
         res_indexer = tuple(res_indexer)
 
         lag_indexer = [slice(None)] * arr.ndim
-        lag_indexer[axis] = slice(None, -n) if n >= 0 else slice(-n, None)
+        lag_indexer[axis] = slice(None, -n) if n > 0 else slice(-n, None)
         lag_indexer = tuple(lag_indexer)
 
         out_arr[res_indexer] = arr[res_indexer] - arr[lag_indexer]
@@ -763,7 +763,7 @@ def _maybe_upcast_putmask(result, mask, other, dtype=None, change=None):
             # our type is wrong here, need to upcast
             r, fill_value = _maybe_upcast(result, fill_value=other, dtype=dtype, copy=True)
             np.putmask(r, mask, other)
-                
+
             # we need to actually change the dtype here
             if change is not None:
                 change.dtype = r.dtype
@@ -778,7 +778,7 @@ def _maybe_upcast_putmask(result, mask, other, dtype=None, change=None):
         new_dtype, fill_value = _maybe_promote(result.dtype,other)
         if new_dtype != result.dtype:
 
-            # we have a scalar or len 0 ndarray 
+            # we have a scalar or len 0 ndarray
             # and its nan and we are changing some values
             if np.isscalar(other) or (isinstance(other,np.ndarray) and other.ndim < 1):
                 if isnull(other):
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index ae409ca22..839941b00 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -3909,6 +3909,11 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         xp = self.ts - self.ts.shift(-1)
         assert_series_equal(rs, xp)
 
+        # 0
+        rs = self.ts.diff(0)
+        xp = self.ts - self.ts
+        assert_series_equal(rs, xp)
+
     def test_pct_change(self):
         rs = self.ts.pct_change(fill_method=None)
         assert_series_equal(rs, self.ts / self.ts.shift(1) - 1)
