commit 9c60d182399ddc4ccdf166f23b6e196e57d455c0
Author: Ka Wo Chen <kawoc@tepper.cmu.edu>
Date:   Tue Aug 18 23:57:56 2015 -0400

    TST: GH10837 remove test_ujson.py reliance on dict iteration order

diff --git a/pandas/io/tests/test_json/test_ujson.py b/pandas/io/tests/test_json/test_ujson.py
index 43e1c5c89..af0a1da83 100644
--- a/pandas/io/tests/test_json/test_ujson.py
+++ b/pandas/io/tests/test_json/test_ujson.py
@@ -1131,22 +1131,20 @@ class NumpyJSONTests(TestCase):
         self.assertTrue(output[1] is None)
         self.assertTrue((np.array([u('a')]) == output[2]).all())
 
-        # py3 is non-determinstic on the ordering......
-        if not compat.PY3:
-            input = [{'a': 42, 'b':31}, {'a': 24, 'c': 99}, {'a': 2.4, 'b': 78}]
-            output = ujson.loads(ujson.dumps(input), numpy=True, labelled=True)
-            expectedvals = np.array([42, 31, 24, 99, 2.4, 78], dtype=int).reshape((3,2))
-            self.assertTrue((expectedvals == output[0]).all())
-            self.assertTrue(output[1] is None)
-            self.assertTrue((np.array([u('a'), 'b']) == output[2]).all())
-
-
-            input = {1: {'a': 42, 'b':31}, 2: {'a': 24, 'c': 99}, 3: {'a': 2.4, 'b': 78}}
-            output = ujson.loads(ujson.dumps(input), numpy=True, labelled=True)
-            expectedvals = np.array([42, 31, 24, 99, 2.4, 78], dtype=int).reshape((3,2))
-            self.assertTrue((expectedvals == output[0]).all())
-            self.assertTrue((np.array(['1','2','3']) == output[1]).all())
-            self.assertTrue((np.array(['a', 'b']) == output[2]).all())
+        # Write out the dump explicitly so there is no dependency on iteration order GH10837
+        input_dumps = '[{"a": 42, "b":31}, {"a": 24, "c": 99}, {"a": 2.4, "b": 78}]'
+        output = ujson.loads(input_dumps, numpy=True, labelled=True)
+        expectedvals = np.array([42, 31, 24, 99, 2.4, 78], dtype=int).reshape((3, 2))
+        self.assertTrue((expectedvals == output[0]).all())
+        self.assertTrue(output[1] is None)
+        self.assertTrue((np.array([u('a'), 'b']) == output[2]).all())
+
+        input_dumps = '{"1": {"a": 42, "b":31}, "2": {"a": 24, "c": 99}, "3": {"a": 2.4, "b": 78}}'
+        output = ujson.loads(input_dumps, numpy=True, labelled=True)
+        expectedvals = np.array([42, 31, 24, 99, 2.4, 78], dtype=int).reshape((3, 2))
+        self.assertTrue((expectedvals == output[0]).all())
+        self.assertTrue((np.array(['1', '2', '3']) == output[1]).all())
+        self.assertTrue((np.array(['a', 'b']) == output[2]).all())
 
 
 class PandasJSONTests(TestCase):
