commit 5dd2ea0b3211528ffcfe9b231ce6c00f02918153
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Fri Oct 27 15:03:55 2017 -0700

    Add timestamp method+test; closes #17329 (#17906)

diff --git a/doc/source/api.rst b/doc/source/api.rst
index 80f8d42be..e8b8b3624 100644
--- a/doc/source/api.rst
+++ b/doc/source/api.rst
@@ -1794,6 +1794,7 @@ Methods
     Timestamp.strftime
     Timestamp.strptime
     Timestamp.time
+    Timestamp.timestamp
     Timestamp.timetuple
     Timestamp.timetz
     Timestamp.to_datetime64
diff --git a/doc/source/whatsnew/v0.21.1.txt b/doc/source/whatsnew/v0.21.1.txt
index 868d1e74a..64b662c38 100644
--- a/doc/source/whatsnew/v0.21.1.txt
+++ b/doc/source/whatsnew/v0.21.1.txt
@@ -21,7 +21,7 @@ New features
 Other Enhancements
 ^^^^^^^^^^^^^^^^^^
 
--
+- :meth:`Timestamp.timestamp` is now available in Python 2.7. (:issue:`17329`)
 -
 -
 
diff --git a/pandas/_libs/tslib.pyx b/pandas/_libs/tslib.pyx
index 6f534d4ac..0f39c2947 100644
--- a/pandas/_libs/tslib.pyx
+++ b/pandas/_libs/tslib.pyx
@@ -977,8 +977,7 @@ class NaTType(_NaT):
     combine = _make_error_func('combine', None)
     utcnow = _make_error_func('utcnow', None)
 
-    if PY3:
-        timestamp = _make_error_func('timestamp', datetime)
+    timestamp = _make_error_func('timestamp', Timestamp)
 
     # GH9513 NaT methods (except to_datetime64) to raise, return np.nan, or
     # return NaT create functions that raise, for binding to NaTType
@@ -1425,6 +1424,11 @@ cdef class _Timestamp(datetime):
         def __get__(self):
             return np.datetime64(self.value, 'ns')
 
+    def timestamp(self):
+        """Return POSIX timestamp as float."""
+        # py27 compat, see GH#17329
+        return round(self.value / 1e9, 6)
+
 
 cdef PyTypeObject* ts_type = <PyTypeObject*> Timestamp
 
@@ -3382,7 +3386,7 @@ cpdef int64_t tz_convert_single(int64_t val, object tz1, object tz2):
     """
     Convert the val (in i8) from timezone1 to timezone2
 
-    This is a single timezone versoin of tz_convert
+    This is a single timezone version of tz_convert
 
     Parameters
     ----------
diff --git a/pandas/tests/scalar/test_nat.py b/pandas/tests/scalar/test_nat.py
index 135e4c544..0e6937151 100644
--- a/pandas/tests/scalar/test_nat.py
+++ b/pandas/tests/scalar/test_nat.py
@@ -125,12 +125,13 @@ def test_round_nat(klass):
 
 def test_NaT_methods():
     # GH 9513
+    # GH 17329 for `timestamp`
     raise_methods = ['astimezone', 'combine', 'ctime', 'dst',
                      'fromordinal', 'fromtimestamp', 'isocalendar',
                      'strftime', 'strptime', 'time', 'timestamp',
                      'timetuple', 'timetz', 'toordinal', 'tzname',
                      'utcfromtimestamp', 'utcnow', 'utcoffset',
-                     'utctimetuple']
+                     'utctimetuple', 'timestamp']
     nat_methods = ['date', 'now', 'replace', 'to_datetime', 'today',
                    'tz_convert', 'tz_localize']
     nan_methods = ['weekday', 'isoweekday']
diff --git a/pandas/tests/scalar/test_timestamp.py b/pandas/tests/scalar/test_timestamp.py
index 9a2e5565a..e30cd322c 100644
--- a/pandas/tests/scalar/test_timestamp.py
+++ b/pandas/tests/scalar/test_timestamp.py
@@ -19,7 +19,7 @@ from pandas.tseries import offsets, frequencies
 from pandas._libs import tslib, period
 from pandas._libs.tslibs.timezones import get_timezone
 
-from pandas.compat import lrange, long
+from pandas.compat import lrange, long, PY3
 from pandas.util.testing import assert_series_equal
 from pandas.compat.numpy import np_datetime64_compat
 from pandas import (Timestamp, date_range, Period, Timedelta, compat,
@@ -1097,6 +1097,23 @@ class TestTimestamp(object):
             dt = Timestamp('2100-01-01 00:00:00', tz=tz)
             assert not dt.is_leap_year
 
+    def test_timestamp(self):
+        # GH#17329
+        # tz-naive --> treat it as if it were UTC for purposes of timestamp()
+        ts = Timestamp.now()
+        uts = ts.replace(tzinfo=utc)
+        assert ts.timestamp() == uts.timestamp()
+
+        tsc = Timestamp('2014-10-11 11:00:01.12345678', tz='US/Central')
+        utsc = tsc.tz_convert('UTC')
+        # utsc is a different representation of the same time
+        assert tsc.timestamp() == utsc.timestamp()
+
+        if PY3:
+            # should agree with datetime.timestamp method
+            dt = ts.to_pydatetime()
+            assert dt.timestamp() == ts.timestamp()
+
 
 class TestTimestampNsOperations(object):
 
