commit a0c7a8ab5b544db598d01f083dd2edaf8cd3afe8
Author: Joris Van den Bossche <jorisvandenbossche@gmail.com>
Date:   Fri Jan 17 18:48:43 2020 +0100

    CLN: Index._values docstring + Block.internal/external_values (#31103)

diff --git a/pandas/core/arrays/sparse/scipy_sparse.py b/pandas/core/arrays/sparse/scipy_sparse.py
index 88d63071c..17a953fce 100644
--- a/pandas/core/arrays/sparse/scipy_sparse.py
+++ b/pandas/core/arrays/sparse/scipy_sparse.py
@@ -17,14 +17,14 @@ def _check_is_partition(parts, whole):
 
 
 def _to_ijv(ss, row_levels=(0,), column_levels=(1,), sort_labels=False):
-    """ For arbitrary (MultiIndexed) SparseSeries return
+    """ For arbitrary (MultiIndexed) sparse Series return
     (v, i, j, ilabels, jlabels) where (v, (i, j)) is suitable for
     passing to scipy.sparse.coo constructor. """
     # index and column levels must be a partition of the index
     _check_is_partition([row_levels, column_levels], range(ss.index.nlevels))
 
-    # from the SparseSeries: get the labels and data for non-null entries
-    values = ss._data.internal_values()._valid_sp_values
+    # from the sparse Series: get the labels and data for non-null entries
+    values = ss.array._valid_sp_values
 
     nonnull_labels = ss.dropna()
 
@@ -85,7 +85,7 @@ def _to_ijv(ss, row_levels=(0,), column_levels=(1,), sort_labels=False):
 
 def _sparse_series_to_coo(ss, row_levels=(0,), column_levels=(1,), sort_labels=False):
     """
-    Convert a SparseSeries to a scipy.sparse.coo_matrix using index
+    Convert a sparse Series to a scipy.sparse.coo_matrix using index
     levels row_levels, column_levels as the row and column
     labels respectively. Returns the sparse_matrix, row and column labels.
     """
diff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py
index 3cec698ce..bb893bd2f 100644
--- a/pandas/core/indexes/base.py
+++ b/pandas/core/indexes/base.py
@@ -3925,15 +3925,16 @@ class Index(IndexOpsMixin, PandasObject):
 
     @property
     def _values(self) -> Union[ExtensionArray, ABCIndexClass, np.ndarray]:
-        # TODO(EA): remove index types as they become extension arrays
         """
         The best array representation.
 
-        This is an ndarray, ExtensionArray, or Index subclass. This differs
-        from ``_ndarray_values``, which always returns an ndarray.
+        This is an ndarray or ExtensionArray. This differs from
+        ``_ndarray_values``, which always returns an ndarray.
 
         Both ``_values`` and ``_ndarray_values`` are consistent between
-        ``Series`` and ``Index``.
+        ``Series`` and ``Index`` (except for datetime64[ns], which returns
+        a DatetimeArray for _values on the Index, but ndarray[M8ns] on the
+        Series).
 
         It may differ from the public '.values' method.
 
@@ -3941,8 +3942,8 @@ class Index(IndexOpsMixin, PandasObject):
         ----------------- | --------------- | ------------- | --------------- |
         Index             | ndarray         | ndarray       | ndarray         |
         CategoricalIndex  | Categorical     | Categorical   | ndarray[int]    |
-        DatetimeIndex     | ndarray[M8ns]   | ndarray[M8ns] | ndarray[M8ns]   |
-        DatetimeIndex[tz] | ndarray[M8ns]   | DTI[tz]       | ndarray[M8ns]   |
+        DatetimeIndex     | ndarray[M8ns]   | DatetimeArray | ndarray[M8ns]   |
+        DatetimeIndex[tz] | ndarray[M8ns]   | DatetimeArray | ndarray[M8ns]   |
         PeriodIndex       | ndarray[object] | PeriodArray   | ndarray[int]    |
         IntervalIndex     | IntervalArray   | IntervalArray | ndarray[object] |
 
diff --git a/pandas/core/indexes/interval.py b/pandas/core/indexes/interval.py
index 8da690775..4df1d25c7 100644
--- a/pandas/core/indexes/interval.py
+++ b/pandas/core/indexes/interval.py
@@ -405,10 +405,6 @@ class IntervalIndex(IntervalMixin, ExtensionIndex, accessor.PandasDelegate):
         """
         return self._data
 
-    @cache_readonly
-    def _values(self):
-        return self._data
-
     def __array_wrap__(self, result, context=None):
         # we don't want the superclass implementation
         return result
diff --git a/pandas/core/internals/blocks.py b/pandas/core/internals/blocks.py
index 5fe5290fa..cb702a81d 100644
--- a/pandas/core/internals/blocks.py
+++ b/pandas/core/internals/blocks.py
@@ -192,13 +192,19 @@ class Block(PandasObject):
 
         return False
 
-    def external_values(self, dtype=None):
-        """ return an outside world format, currently just the ndarray """
+    def external_values(self):
+        """
+        The array that Series.values returns (public attribute).
+        This has some historical constraints, and is overridden in block
+        subclasses to return the correct array (e.g. period returns
+        object ndarray and datetimetz a datetime64[ns] ndarray instead of
+        proper extension array).
+        """
         return self.values
 
-    def internal_values(self, dtype=None):
-        """ return an internal format, currently just the ndarray
-        this should be the pure internal API format
+    def internal_values(self):
+        """
+        The array that Series._values returns (internal values).
         """
         return self.values
 
@@ -1966,7 +1972,7 @@ class ObjectValuesExtensionBlock(ExtensionBlock):
     Series[T].values is an ndarray of objects.
     """
 
-    def external_values(self, dtype=None):
+    def external_values(self):
         return self.values.astype(object)
 
 
@@ -2482,7 +2488,7 @@ class TimeDeltaBlock(DatetimeLikeBlockMixin, IntBlock):
         )
         return rvalues
 
-    def external_values(self, dtype=None):
+    def external_values(self):
         return np.asarray(self.values.astype("timedelta64[ns]", copy=False))
 
 
diff --git a/pandas/core/internals/managers.py b/pandas/core/internals/managers.py
index 24cc551ad..39e0aa078 100644
--- a/pandas/core/internals/managers.py
+++ b/pandas/core/internals/managers.py
@@ -1531,9 +1531,11 @@ class SingleBlockManager(BlockManager):
         return np.array([self._block.dtype])
 
     def external_values(self):
+        """The array that Series.values returns"""
         return self._block.external_values()
 
     def internal_values(self):
+        """The array that Series._values returns"""
         return self._block.internal_values()
 
     def get_values(self):
