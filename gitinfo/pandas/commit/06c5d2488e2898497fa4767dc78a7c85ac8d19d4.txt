commit 06c5d2488e2898497fa4767dc78a7c85ac8d19d4
Author: Simon Hawkins <simonjayhawkins@gmail.com>
Date:   Sat Jan 4 18:28:53 2020 +0000

    TYP: enable strict_equality to prohibit comparisons of non-overlappinâ€¦ (#30619)

diff --git a/pandas/core/arrays/boolean.py b/pandas/core/arrays/boolean.py
index 102150b1c..409be244c 100644
--- a/pandas/core/arrays/boolean.py
+++ b/pandas/core/arrays/boolean.py
@@ -62,6 +62,8 @@ class BooleanDtype(ExtensionDtype):
     BooleanDtype
     """
 
+    name = "boolean"
+
     @property
     def na_value(self) -> "Scalar":
         """
@@ -81,19 +83,6 @@ class BooleanDtype(ExtensionDtype):
     def kind(self) -> str:
         return "b"
 
-    @property
-    def name(self) -> str:
-        """
-        The alias for BooleanDtype is ``'boolean'``.
-        """
-        return "boolean"
-
-    @classmethod
-    def construct_from_string(cls, string: str) -> ExtensionDtype:
-        if string == "boolean":
-            return cls()
-        return super().construct_from_string(string)
-
     @classmethod
     def construct_array_type(cls) -> "Type[BooleanArray]":
         return BooleanArray
diff --git a/pandas/core/arrays/period.py b/pandas/core/arrays/period.py
index 056c80717..1e492a457 100644
--- a/pandas/core/arrays/period.py
+++ b/pandas/core/arrays/period.py
@@ -332,7 +332,7 @@ class PeriodArray(dtl.DatetimeLikeArrayMixin, dtl.DatelikeOps):
     def dtype(self):
         return self._dtype
 
-    # read-only property overwriting read/write
+    # error: Read-only property cannot override read-write property  [misc]
     @property  # type: ignore
     def freq(self):
         """
@@ -654,7 +654,7 @@ class PeriodArray(dtl.DatetimeLikeArrayMixin, dtl.DatelikeOps):
         return new_data
 
     def _addsub_int_array(
-        self, other: np.ndarray, op: Callable[[Any], Any],
+        self, other: np.ndarray, op: Callable[[Any, Any], Any],
     ) -> "PeriodArray":
         """
         Add or subtract array of integers; equivalent to applying
diff --git a/pandas/core/arrays/string_.py b/pandas/core/arrays/string_.py
index de254f662..0da877fb1 100644
--- a/pandas/core/arrays/string_.py
+++ b/pandas/core/arrays/string_.py
@@ -47,6 +47,8 @@ class StringDtype(ExtensionDtype):
     StringDtype
     """
 
+    name = "string"
+
     #: StringDtype.na_value uses pandas.NA
     na_value = libmissing.NA
 
@@ -54,19 +56,6 @@ class StringDtype(ExtensionDtype):
     def type(self) -> Type:
         return str
 
-    @property
-    def name(self) -> str:
-        """
-        The alias for StringDtype is ``'string'``.
-        """
-        return "string"
-
-    @classmethod
-    def construct_from_string(cls, string: str) -> ExtensionDtype:
-        if string == "string":
-            return cls()
-        return super().construct_from_string(string)
-
     @classmethod
     def construct_array_type(cls) -> "Type[StringArray]":
         return StringArray
diff --git a/pandas/core/dtypes/base.py b/pandas/core/dtypes/base.py
index 4a06ea950..1b4e7062b 100644
--- a/pandas/core/dtypes/base.py
+++ b/pandas/core/dtypes/base.py
@@ -236,6 +236,10 @@ class ExtensionDtype:
         """
         if not isinstance(string, str):
             raise TypeError(f"Expects a string, got {type(string).__name__}")
+
+        # error: Non-overlapping equality check (left operand type: "str", right
+        #  operand type: "Callable[[ExtensionDtype], str]")  [comparison-overlap]
+        assert isinstance(cls.name, str), (cls, type(cls.name))
         if string != cls.name:
             raise TypeError(f"Cannot construct a '{cls.__name__}' from '{string}'")
         return cls()
diff --git a/pandas/io/excel/_odfreader.py b/pandas/io/excel/_odfreader.py
index 2afb41e7b..ec5f6fcb1 100644
--- a/pandas/io/excel/_odfreader.py
+++ b/pandas/io/excel/_odfreader.py
@@ -156,7 +156,7 @@ class _ODFReader(_BaseExcelReader):
             # GH5394
             cell_value = float(cell.attributes.get((OFFICENS, "value")))
 
-            if cell_value == 0.0 and str(cell) != cell_value:  # NA handling
+            if cell_value == 0.0:  # NA handling
                 return str(cell)
 
             if convert_float:
diff --git a/pandas/io/formats/format.py b/pandas/io/formats/format.py
index 1b18e0fc3..ea2299947 100644
--- a/pandas/io/formats/format.py
+++ b/pandas/io/formats/format.py
@@ -231,7 +231,7 @@ class SeriesFormatter:
         self,
         series: "Series",
         buf: Optional[IO[str]] = None,
-        length: bool = True,
+        length: Union[bool, str] = True,
         header: bool = True,
         index: bool = True,
         na_rep: str = "NaN",
@@ -450,7 +450,7 @@ def _get_adjustment() -> TextAdjustment:
 
 class TableFormatter:
 
-    show_dimensions: bool
+    show_dimensions: Union[bool, str]
     is_truncated: bool
     formatters: formatters_type
     columns: Index
@@ -554,7 +554,7 @@ class DataFrameFormatter(TableFormatter):
         max_rows: Optional[int] = None,
         min_rows: Optional[int] = None,
         max_cols: Optional[int] = None,
-        show_dimensions: bool = False,
+        show_dimensions: Union[bool, str] = False,
         decimal: str = ".",
         table_id: Optional[str] = None,
         render_links: bool = False,
@@ -1276,7 +1276,7 @@ class FloatArrayFormatter(GenericArrayFormatter):
     """
 
     def __init__(self, *args, **kwargs):
-        GenericArrayFormatter.__init__(self, *args, **kwargs)
+        super().__init__(*args, **kwargs)
 
         # float_format is expected to be a string
         # formatter should be used to pass a function
diff --git a/setup.cfg b/setup.cfg
index 192ba9bc4..f813d1296 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -123,6 +123,7 @@ skip = pandas/__init__.py,pandas/core/api.py
 ignore_missing_imports=True
 no_implicit_optional=True
 check_untyped_defs=True
+strict_equality=True
 
 [mypy-pandas.tests.*]
 check_untyped_defs=False
