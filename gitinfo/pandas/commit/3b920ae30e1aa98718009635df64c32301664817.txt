commit 3b920ae30e1aa98718009635df64c32301664817
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Oct 24 11:25:07 2011 -0400

    BUG: corner cases in MultiIndex set operations

diff --git a/RELEASE.rst b/RELEASE.rst
index 5ab212d8c..4428553c9 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -193,6 +193,7 @@ feedback on the library.
   - Can pass list of tuples to `Series` (GH #270)
   - Can pass level name to `DataFrame.stack`
   - Support set operations between MultiIndex and Index
+  - Fix many corner cases in MultiIndex set operations
 
 Thanks
 ------
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 914ac9fd6..62a141378 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1501,12 +1501,15 @@ class MultiIndex(Index):
         if len(other) == 0 or self.equals(other):
             return self
 
+        result_names = self.names if self.names == other.names else None
+
         # TODO: optimize / make less wasteful
         self_tuples = self.get_tuple_index()
         other_tuples = other.get_tuple_index()
 
         uniq_tuples = lib.fast_unique_multiple([self_tuples, other_tuples])
-        return MultiIndex.from_arrays(zip(*uniq_tuples), sortorder=0)
+        return MultiIndex.from_arrays(zip(*uniq_tuples), sortorder=0,
+                                      names=result_names)
 
     def intersection(self, other):
         """
@@ -1528,11 +1531,19 @@ class MultiIndex(Index):
         if self.equals(other):
             return self
 
+        result_names = self.names if self.names == other.names else None
+
         # TODO: optimize / make less wasteful
         self_tuples = self.get_tuple_index()
         other_tuples = other.get_tuple_index()
         uniq_tuples = sorted(set(self_tuples) & set(other_tuples))
-        return MultiIndex.from_arrays(zip(*uniq_tuples), sortorder=0)
+        if len(uniq_tuples) == 0:
+            return MultiIndex(levels=[[]]*self.nlevels,
+                              labels=[[]]*self.nlevels,
+                              names=result_names)
+        else:
+            return MultiIndex.from_arrays(zip(*uniq_tuples), sortorder=0,
+                                          names=result_names)
 
     def diff(self, other):
         """
@@ -1553,7 +1564,7 @@ class MultiIndex(Index):
 
         difference = sorted(set(self.values) - set(other.values))
 
-        if not difference:
+        if len(difference) == 0:
             return MultiIndex(levels=[[]]*self.nlevels,
                               labels=[[]]*self.nlevels,
                               names=result_names)
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index f48b05877..5db73bdd3 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -920,6 +920,11 @@ class TestMultiIndex(unittest.TestCase):
         the_int = self.index.intersection(self.index)
         self.assert_(the_int is self.index)
 
+        # empty intersection: disjoint
+        empty = self.index[:2] & self.index[2:]
+        expected = self.index[:0]
+        self.assert_(empty.equals(expected))
+
         tuples = self.index.get_tuple_index()
         result = self.index & tuples
         self.assert_(result.equals(tuples))
@@ -935,9 +940,19 @@ class TestMultiIndex(unittest.TestCase):
         self.assert_(result.equals(expected))
         self.assertEqual(result.names, self.index.names)
 
-        # empty difference
-        result = first - first
-        expected = first[:0]
+        # empty difference: reflexive
+        result = self.index - self.index
+        expected = self.index[:0]
+        self.assert_(result.equals(expected))
+
+        # empty difference: superset
+        result = self.index[-3:] - self.index
+        expected = self.index[:0]
+        self.assert_(result.equals(expected))
+
+        # empty difference: degenerate
+        result = self.index[:0] - self.index
+        expected = self.index[:0]
         self.assert_(result.equals(expected))
 
         # names not the same
