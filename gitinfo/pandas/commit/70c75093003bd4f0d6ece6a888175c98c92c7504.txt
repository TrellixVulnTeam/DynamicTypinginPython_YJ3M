commit 70c75093003bd4f0d6ece6a888175c98c92c7504
Author: Adam Klein <adamklein@gmail.com>
Date:   Sun Feb 5 14:44:52 2012 -0500

    BUG: fixes #742 per comments on PR #750

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 7ff4ef4af..2782d9e3c 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -3591,7 +3591,7 @@ class DataFrame(NDFrame):
         """
         return self.apply(lambda x: x.clip_lower(threshold))
 
-    def rank(self, axis=0):
+    def rank(self, axis=0, numeric_only=True):
         """
         Compute numerical data ranks (1 through n) along axis. Equal values are
         assigned a rank that is the average of the ranks of those values
@@ -3600,40 +3600,21 @@ class DataFrame(NDFrame):
         ----------
         axis : {0, 1}, default 0
             Ranks over columns (0) or rows (1)
+        numeric_only : boolean, default None
+            Include only float, int, boolean data
 
         Returns
         -------
         ranks : DataFrame
         """
-        data = self._get_numeric_data()
-        ranks = lib.rank_2d_float64(data.values.astype('f8'), axis=axis)
-        df = DataFrame(ranks, index=data.index, columns=data.columns)
-
-        odata = self._get_nonnumeric_data()
-        if len(odata):
-            if axis == 0:
-                odata = odata.T
-                df = df.T
-
-                for col in odata.columns:
-                    try:
-                        ranked = lib.rank_1d_object(odata[col])
-                        if len(df[col]) == 0:
-                            df = df.reindex(self.T.index)
-                        df[col] = ranked
-                    except Exception:
-                        continue
-
-                return df.T
-            else:
-                for col in odata.columns:
-                    try:
-                        ranked = lib.rank_1d_object(odata[col])
-                        df[col] = ranked
-                    except Exception:
-                        continue
-                return df
-        return df
+        if numeric_only:
+            data = self._get_numeric_data()
+            ranks = lib.rank_2d_float64(data.values.astype('f8'), axis=axis)
+            return DataFrame(ranks, index=data.index, columns=data.columns)
+        else:
+            data = self
+            ranks = lib.rank_2d_generic(data.values.astype('O'), axis=axis)
+            return DataFrame(ranks, index=data.index, columns=data.columns)
 
     #----------------------------------------------------------------------
     # Plotting
diff --git a/pandas/src/stats.pyx b/pandas/src/stats.pyx
index e50bf8c61..97dc1d4a7 100644
--- a/pandas/src/stats.pyx
+++ b/pandas/src/stats.pyx
@@ -133,44 +133,52 @@ def rank_1d_generic(object in_arr):
             sum_ranks = dups = 0
     return ranks
 
-def rank_1d_object(object in_arr):
+def rank_2d_generic(object in_arr, axis=0):
     """
     Fast NaN-friendly version of scipy.stats.rankdata
     """
 
     cdef:
-        Py_ssize_t i, j, n, dups = 0
-        ndarray[float64_t] ranks
-        ndarray sorted_data, values
-        ndarray[int64_t] argsorted
+        Py_ssize_t i, j, z, k, n, infs, dups = 0
+        ndarray[float64_t, ndim=2] ranks
+        ndarray[object, ndim=2] values
+        ndarray[int64_t, ndim=2] argsorted
         int32_t idx
         object val, nan_value
         float64_t sum_ranks = 0
 
-    values = np.asarray(in_arr).copy()
+    in_arr = np.asarray(in_arr)
 
-    nan_value = np.inf
+    if axis == 0:
+        values = in_arr.T.copy()
+    else:
+        values = in_arr.copy()
 
-    mask = isnullobj(values.astype('O'))
+    nan_value = -np.inf # subtlety, infs are ranked before alphanumeric!
+    mask = isnullobj2d(values)
     np.putmask(values, mask, nan_value)
 
-    n = len(values)
-    ranks = np.empty(n, dtype='f8')
-
-    # py2.5/win32 hack, can't pass i8
-    _as = values.argsort()
-    sorted_data = values.take(_as)
-    argsorted = _as.astype('i8')
+    n, k = (<object> values).shape
+    ranks = np.empty((n, k), dtype='f8')
+    argsorted = values.argsort(1).astype('i8')
+    values.sort(axis=1)
 
     for i in range(n):
-        sum_ranks += i + 1
-        dups += 1
-        val = util.get_value_at(sorted_data, i)
-        if val != val or val is None:
-            ranks[argsorted[i]] = nan
-            continue
-        if (i == n - 1) or util.get_value_at(sorted_data, i + 1) != val:
-            for j in range(i - dups + 1, i + 1):
-                ranks[argsorted[j]] = sum_ranks / dups
-            sum_ranks = dups = 0
-    return ranks
+        dups = sum_ranks = infs = 0
+        for j in range(k):
+            val = values[i, j]
+            if val == nan_value:
+                ranks[i, argsorted[i, j]] = nan
+                infs += 1
+                continue
+            sum_ranks += (j - infs) + 1
+            dups += 1
+            if j == k - 1 or values[i, j + 1] != val:
+                for z in range(j - dups + 1, j + 1):
+                    ranks[i, argsorted[i, z]] = sum_ranks / dups
+                sum_ranks = dups = 0
+
+    if axis == 0:
+        return ranks.T
+    else:
+        return ranks
diff --git a/pandas/src/tseries.pyx b/pandas/src/tseries.pyx
index 8160ce73c..a453e2d99 100644
--- a/pandas/src/tseries.pyx
+++ b/pandas/src/tseries.pyx
@@ -242,6 +242,20 @@ def isnullobj(ndarray[object] arr):
             result[i] = 1
     return result.view(np.bool_)
 
+def isnullobj2d(ndarray[object, ndim=2] arr):
+    cdef Py_ssize_t i, j, n, m
+    cdef object val
+    cdef ndarray[uint8_t, ndim=2] result
+
+    n, m = (<object> arr).shape
+    result = np.zeros((n, m), dtype=np.uint8)
+    for i from 0 <= i < n:
+        for j from 0 <= j < m:
+            val = arr[i, j]
+            if checknull(val):
+                result[i, j] = 1
+    return result.view(np.bool_)
+
 def list_to_object_array(list obj):
     '''
     Convert list to object ndarray. Seriously can't believe I had to write this
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index bacfddf1c..819490af4 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -4167,23 +4167,22 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
     def test_rank2(self):
         df = DataFrame([['b','c','a'],['a','c','b']])
-        result = df.rank(1)
-        expected = DataFrame([[2.0, 1.5, 1.0], [1, 1.5, 2]])
-        assert_frame_equal(result, expected)
-
-        result = df.rank(0)
         expected = DataFrame([[2.0, 3.0, 1.0], [1, 3, 2]])
+        result = df.rank(1, numeric_only=False)
         assert_frame_equal(result, expected)
 
-        df = DataFrame([['b', None,'a'],['a','c','b']])
-        result = df.rank(0)
-        expected = DataFrame([[3.0, 1.0, 2.0], [1.0, 3.0, 2.0]])
+        expected = DataFrame([[2.0, 1.5, 1.0], [1, 1.5, 2]])
+        result = df.rank(0, numeric_only=False)
         assert_frame_equal(result, expected)
 
-        result = df.rank(1)
-        expected = DataFrame([[2.0, 1.0, 1.0], [1.0, 2.0, 2.0]])
+        df = DataFrame([['b',np.nan,'a'],['a','c','b']])
+        expected = DataFrame([[2.0, nan, 1.0], [1.0, 3.0, 2.0]])
+        result = df.rank(1, numeric_only=False)
         assert_frame_equal(result, expected)
 
+        expected = DataFrame([[2.0, nan, 1.0], [1.0, 1.0, 2.0]])
+        result = df.rank(0, numeric_only=False)
+        assert_frame_equal(result, expected)
 
     def test_describe(self):
         desc = self.tsframe.describe()
