commit fa508d3178c0615a65264fb3bbc96e5622e48042
Author: sinhrks <sinhrks@gmail.com>
Date:   Sun Apr 6 21:12:18 2014 +0900

    BUG: adding np.timedelta64 to DatetimeIndex with tz outputs incorrect result

diff --git a/doc/source/release.rst b/doc/source/release.rst
index a5d41b9f6..a9b65b922 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -315,7 +315,6 @@ Bug Fixes
   as regexs even when ``regex=False`` (:issue:`6777`).
 - Bug in timedelta ops on 32-bit platforms (:issue:`6808`)
 - Bug in setting a tz-aware index directly via ``.index`` (:issue:`6785`)
-<<<<<<< HEAD
 - Bug in expressions.py where numexpr would try to evaluate arithmetic ops
   (:issue:`6762`).
 - Bug in Makefile where it didn't remove Cython generated C files with ``make
@@ -324,6 +323,7 @@ Bug Fixes
 - Bug in ``DataFrame._reduce`` where non bool-like (0/1) integers were being
   coverted into bools. (:issue:`6806`)
 - Regression from 0.13 with ``fillna`` and a Series on datetime-like (:issue:`6344`)
+- Bug in adding np.timedelta64 to DatetimeIndex with tz outputs incorrect result (:issue:`6818`)
 
 pandas 0.13.1
 -------------
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index c58447ace..c5915f4bd 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -624,17 +624,15 @@ class DatetimeIndex(Int64Index):
         if isinstance(delta, (Tick, timedelta)):
             inc = offsets._delta_to_nanoseconds(delta)
             new_values = (self.asi8 + inc).view(_NS_DTYPE)
-            tz = 'UTC' if self.tz is not None else None
-            result = DatetimeIndex(new_values, tz=tz, freq='infer')
-            utc = _utc()
-            if self.tz is not None and self.tz is not utc:
-                result = result.tz_convert(self.tz)
         elif isinstance(delta, np.timedelta64):
             new_values = self.to_series() + delta
-            result = DatetimeIndex(new_values, tz=self.tz, freq='infer')
         else:
             new_values = self.astype('O') + delta
-            result = DatetimeIndex(new_values, tz=self.tz, freq='infer')
+        tz = 'UTC' if self.tz is not None else None
+        result = DatetimeIndex(new_values, tz=tz, freq='infer')
+        utc = _utc()
+        if self.tz is not None and self.tz is not utc:
+            result = result.tz_convert(self.tz)
         return result
 
     def __contains__(self, key):
diff --git a/pandas/tseries/tests/test_timezones.py b/pandas/tseries/tests/test_timezones.py
index dda722366..db0690c5a 100644
--- a/pandas/tseries/tests/test_timezones.py
+++ b/pandas/tseries/tests/test_timezones.py
@@ -31,6 +31,7 @@ from pandas.compat import range, lrange, zip, cPickle as pickle
 from pandas.core.datetools import BDay
 import pandas.core.common as com
 
+from pandas import _np_version_under1p7
 
 def _skip_if_no_pytz():
     try:
@@ -961,6 +962,21 @@ class TestTimeZones(tm.TestCase):
         offset = dates + offsets.Hour(5)
         self.assertEqual(dates[0] + offsets.Hour(5), offset[0])
 
+        # GH 6818
+        for tz in ['UTC', 'US/Pacific', 'Asia/Tokyo']:
+            dates = date_range('2010-11-01 00:00', periods=3, tz=tz, freq='H')
+            expected = DatetimeIndex(['2010-11-01 05:00', '2010-11-01 06:00',
+                                      '2010-11-01 07:00'], freq='H', tz=tz)
+
+            offset = dates + offsets.Hour(5)
+            self.assert_(offset.equals(expected))
+            if not _np_version_under1p7:
+                offset = dates + np.timedelta64(5, 'h')
+                self.assert_(offset.equals(expected))
+            offset = dates + timedelta(hours=5)
+            self.assert_(offset.equals(expected))
+            
+
 if __name__ == '__main__':
     nose.runmodule(argv=[__file__, '-vvs', '-x', '--pdb', '--pdb-failure'],
                    exit=False)
