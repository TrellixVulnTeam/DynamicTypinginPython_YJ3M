commit 18de260fcbfbe8cc2210aa96533fb84ccb579edf
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Jun 13 22:31:52 2012 -0400

    BUG: fix erroneous upsampling of irregular data #1464

diff --git a/pandas/src/reduce.pyx b/pandas/src/reduce.pyx
index 9d9a3ba49..c02baa917 100644
--- a/pandas/src/reduce.pyx
+++ b/pandas/src/reduce.pyx
@@ -154,7 +154,7 @@ cdef class SeriesBinGrouper:
 
         counts = np.zeros(self.ngroups, dtype=np.int64)
 
-        if self.ngroups > 0:
+        if self.ngroups > 1:
             counts[0] = self.bins[0]
             for i in range(1, self.ngroups):
                 if i == self.ngroups - 1:
diff --git a/pandas/tseries/resample.py b/pandas/tseries/resample.py
index 74686f6b6..5d8dc0b02 100644
--- a/pandas/tseries/resample.py
+++ b/pandas/tseries/resample.py
@@ -140,17 +140,23 @@ class TimeGrouper(CustomGrouper):
 
         binner, grouper = self._get_time_grouper(obj)
 
-        # downsamples
-        if len(grouper.binlabels) < len(axlabels):
+        # Determine if we're downsampling
+        if axlabels.freq is not None or axlabels.inferred_freq is not None:
+            if len(grouper.binlabels) < len(axlabels):
+                grouped  = obj.groupby(grouper, axis=self.axis)
+                result = grouped.aggregate(self.how)
+            else:
+                # upsampling shortcut
+                assert(self.axis == 0)
+                result = obj.reindex(binner[1:], method=self.fill_method,
+                                     limit=self.limit)
+        else:
+            # Irregular data, have to use groupby
             grouped  = obj.groupby(grouper, axis=self.axis)
             result = grouped.aggregate(self.how)
-        else:
-            assert(self.axis == 0)
-            # upsampling
 
-            # this is sort of a hack
-            result = obj.reindex(binner[1:], method=self.fill_method,
-                                 limit=self.limit)
+            if self.fill_method is not None:
+                result = result.fillna(method=self.fill_method, limit=self.limit)
 
         loffset = self.loffset
         if isinstance(loffset, basestring):
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index 39018f78e..c292b4110 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -612,6 +612,29 @@ class TestResamplePeriodIndex(unittest.TestCase):
         result = ts.resample('A')
         self.assert_(len(result) == 0)
 
+    def test_resample_irregular_sparse(self):
+        dr = date_range(start='1/1/2012', freq='5min', periods=1000)
+        s = Series(np.array(100), index=dr)
+        # subset the data.
+        subset = s[:'2012-01-04 07:00']
+
+        result = subset.resample('10min', how=len)
+        expected = s.resample('10min', how=len).ix[result.index]
+        assert_series_equal(result, expected)
+
+    def test_resample_weekly_all_na(self):
+        rng = date_range('1/1/2000', periods=10, freq='W-WED')
+        ts = Series(np.random.randn(len(rng)), index=rng)
+
+        result = ts.resample('W-THU')
+
+        self.assert_(result.isnull().all())
+
+        result = ts.resample('W-THU', fill_method='ffill')[:-1]
+        expected = ts.asfreq('W-THU', method='ffill')
+        assert_series_equal(result, expected)
+
+
 class TestTimeGrouper(unittest.TestCase):
 
     def setUp(self):
diff --git a/setup.py b/setup.py
index 1f963f4c8..ba80a4640 100755
--- a/setup.py
+++ b/setup.py
@@ -174,7 +174,7 @@ CLASSIFIERS = [
 MAJOR = 0
 MINOR = 8
 MICRO = 0
-ISRELEASED = True
+ISRELEASED = False
 VERSION = '%d.%d.%d' % (MAJOR, MINOR, MICRO)
 QUALIFIER = 'b2'
 
