commit 49643c94f42c62a88e0d76b9036d3eba8313d5d2
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Nov 22 01:16:29 2010 -0500

    changed fillMethod argument name and added DeprecationWarning

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 778412f48..33912576c 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -667,7 +667,7 @@ class DataFrame(Picklable, Groupable):
 
         return DataFrame(data=newValues, index=newIndex)
 
-    def asfreq(self, freq, fillMethod=None):
+    def asfreq(self, freq, method=None, fillMethod=None):
         """
         Convert all TimeSeries inside to specified frequency using
         DateOffset objects. Optionally provide fill method to pad or
@@ -689,7 +689,7 @@ class DataFrame(Picklable, Groupable):
         else:
             dateRange = DateRange(self.index[0], self.index[-1], timeRule=freq)
 
-        return self.reindex(dateRange, fillMethod=fillMethod)
+        return self.reindex(dateRange, method=method, fillMethod=fillMethod)
 
     def asMatrix(self, columns=None):
         """
@@ -973,7 +973,7 @@ class DataFrame(Picklable, Groupable):
 
         return _slow_pivot(self[index], self[columns], self[values])
 
-    def reindex(self, index=None, columns=None, fillMethod=None):
+    def reindex(self, index=None, columns=None, method=None, fillMethod=None):
         """
         Reindex data inside, optionally filling according to some rule.
 
@@ -982,17 +982,25 @@ class DataFrame(Picklable, Groupable):
         index : array-like, optional
             preferably an Index object (to avoid duplicating data)
         columns : array-like, optional
-        fillMethod : {'backfill', 'pad', None}
-            Method to use for filling data holes using the index
+        method : {'backfill', 'pad', None}
+            Method to use for filling data holes using the index. See
+            Series.reindex for more information
 
         Returns
         -------
         y : same type as calling instance
         """
+        import warnings
+        if fillMethod is not None:
+            warnings.warn("'fillMethod' is deprecated. Use 'method' instead",
+                          DeprecationWarning)
+
+            method = fillMethod
+
         frame = self
 
         if index is not None:
-            frame = frame._reindex_index(index, fillMethod)
+            frame = frame._reindex_index(index, method)
 
         if columns is not None:
             frame = frame._reindex_columns(columns)
@@ -1060,14 +1068,14 @@ class DataFrame(Picklable, Groupable):
 
         return result
 
-    def reindex_like(self, other, fillMethod=None):
+    def reindex_like(self, other, method=None):
         """
         Reindex DataFrame to match indices of another DataFrame
 
         Parameters
         ----------
         other : DataFrame
-        fillMethod : string or None
+        method : string or None
 
         Notes
         -----
@@ -1078,7 +1086,8 @@ class DataFrame(Picklable, Groupable):
         reindexed : DataFrame
         """
         # todo: object columns
-        return self.reindex(index=other.index, columns=other.columns)
+        return self.reindex(index=other.index, columns=other.columns,
+                            method=method)
 
     def groupby(self, mapper, axis=0):
         """
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 9d26cb8e8..4587905b1 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -759,41 +759,47 @@ class Series(np.ndarray, Picklable, Groupable):
 
     merge = map
 
-    def reindex(self, newIndex, fillMethod=None):
-        """Overloaded version of reindex for TimeSeries. Supports filling
-        with values based on new index.
-
-        See analogous method for DataFrame, will be faster for multiple
-        TimeSeries
+    def reindex(self, new_index, method=None, fillMethod=None):
+        """Conform Series to new Index
 
         Parameters
         ----------
-        newIndex :   array-like, preferably an Index object (to avoid
-                    duplicating data)
-        fillMethod : {'backfill', 'pad', 'interpolate', None}
-                    Method to use for filling holes in reindexed Series
+        new_index :   array-like
+            Preferably an Index object (to avoid duplicating data)
+        method : {'backfill', 'pad', None}
+            Method to use for filling holes in reindexed Series
+
+            pad : propagate last valid observation forward to next valid
+            backfill : use NEXT valid observation to fill gap
 
         Returns
         -------
-        TimeSeries
+        reindexed : Series
         """
-        if self.index.equals(newIndex):
+        import warnings
+        if fillMethod is not None:
+            warnings.warn("'fillMethod' is deprecated. Use 'method' instead",
+                          DeprecationWarning)
+
+            method = fillMethod
+
+        if self.index.equals(new_index):
             return self.copy()
 
-        if not isinstance(newIndex, Index):
-            newIndex = Index(newIndex)
+        if not isinstance(new_index, Index):
+            new_index = Index(new_index)
 
         if len(self.index) == 0:
-            return Series.fromValue(NaN, index=newIndex)
+            return Series.fromValue(NaN, index=new_index)
 
-        if fillMethod is not None:
-            fillMethod = fillMethod.upper()
+        if method is not None:
+            method = method.upper()
 
         # Cython for blazing speed
-        fillVec, mask = tseries.getFillVec(self.index, newIndex,
+        fillVec, mask = tseries.getFillVec(self.index, new_index,
                                            self.index.indexMap,
-                                           newIndex.indexMap,
-                                           kind=fillMethod)
+                                           new_index.indexMap,
+                                           kind=method)
 
         newValues = self.values.take(fillVec)
 
@@ -806,16 +812,17 @@ class Series(np.ndarray, Picklable, Groupable):
 
             np.putmask(newValues, notmask, NaN)
 
-        return Series(newValues, index=newIndex)
+        return Series(newValues, index=new_index)
 
-    def reindex_like(self, other, fillMethod=None):
+    def reindex_like(self, other, method=None):
         """
         Reindex Series to match index of another Series
 
         Parameters
         ----------
         other : Series
-        fillMethod : string or None
+        method : string or None
+            See Series.reindex docstring
 
         Notes
         -----
@@ -825,7 +832,7 @@ class Series(np.ndarray, Picklable, Groupable):
         -------
         reindexed : Series
         """
-        return self.reindex(other.index, fillMethod=fillMethod)
+        return self.reindex(other.index, method=method)
 
     def fill(self, value=None, method='pad'):
         """
@@ -853,7 +860,7 @@ class Series(np.ndarray, Picklable, Groupable):
             return newSeries
         else: # Using reindex to pad / backfill
             withoutna = remove_na(self)
-            return withoutna.reindex(self.index, fillMethod=method)
+            return withoutna.reindex(self.index, method=method)
 
 #-------------------------------------------------------------------------------
 # Miscellaneous
@@ -981,8 +988,7 @@ class Series(np.ndarray, Picklable, Groupable):
 
             return Series(newValues, index=self.index)
         else:
-            newIndex = self.index.shift(periods, offset)
-            return Series(self, index=newIndex)
+            return Series(self, index=self.index.shift(periods, offset))
 
     def truncate(self, before=None, after=None):
         """Function truncate a sorted TimeSeries before and/or after
@@ -1064,7 +1070,7 @@ class Series(np.ndarray, Picklable, Groupable):
         else:
             return v
 
-    def asfreq(self, freq, fillMethod=None):
+    def asfreq(self, freq, method=None, fillMethod=None):
         """
         Convert this TimeSeries to the provided frequency using DateOffset
         objects. Optionally provide fill method to pad/backfill/interpolate
@@ -1074,9 +1080,8 @@ class Series(np.ndarray, Picklable, Groupable):
         ----------
         offset : DateOffset object, or string in {'WEEKDAY', 'EOM'}
             DateOffset object or subclass (e.g. monthEnd)
-
-        fillMethod : {'backfill', 'pad', 'interpolate', None}
-                    Method to use for filling holes in new inde
+        method : {'backfill', 'pad', None}
+            Method to use for filling holes in new index
 
         Returns
         -------
@@ -1087,7 +1092,7 @@ class Series(np.ndarray, Picklable, Groupable):
         else:
             dateRange = DateRange(self.index[0], self.index[-1], timeRule=freq)
 
-        return self.reindex(dateRange, fillMethod=fillMethod)
+        return self.reindex(dateRange, method=method, fillMethod=fillMethod)
 
     def interpolate(self, method='linear'):
         """
diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index 2df234740..f838cdf30 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -624,7 +624,7 @@ class TestDataFrame(unittest.TestCase):
 
         assert_almost_equal(offset_monthly['A'], rule_monthly['A'])
 
-        filled = rule_monthly.asfreq('WEEKDAY', fillMethod='pad')
+        filled = rule_monthly.asfreq('WEEKDAY', method='pad')
 
         # test does not blow up on length-0 DataFrame
         zero_length = self.tsframe.reindex([])
diff --git a/pandas/core/tests/test_series.py b/pandas/core/tests/test_series.py
index 2d8b8b7f2..8e1fc74c1 100644
--- a/pandas/core/tests/test_series.py
+++ b/pandas/core/tests/test_series.py
@@ -618,10 +618,10 @@ class TestSeries(unittest.TestCase):
 
         # bad fill method
         ts = self.ts[::2]
-        self.assertRaises(Exception, ts.reindex, self.ts.index, fillMethod='foo')
+        self.assertRaises(Exception, ts.reindex, self.ts.index, method='foo')
 
         # corner case: pad empty series
-        reindexed = self.empty.reindex(self.ts.index, fillMethod='pad')
+        reindexed = self.empty.reindex(self.ts.index, method='pad')
 
         # pass non-Index
         reindexed = self.ts.reindex(list(self.ts.index))
@@ -661,7 +661,7 @@ class TestSeries(unittest.TestCase):
         # fail
         ts = self.ts[5:]
         bool_ts = Series(np.zeros(len(ts), dtype=bool), index=ts.index)
-        filled_bool = bool_ts.reindex(self.ts.index, fillMethod='pad')
+        filled_bool = bool_ts.reindex(self.ts.index, method='pad')
         self.assert_(isnull(filled_bool[:5]).all())
 
     def test_reindex_like(self):
@@ -711,7 +711,7 @@ class TestSeries(unittest.TestCase):
         monthly_ts = daily_ts.asfreq('EOM')
         self.assert_(np.array_equal(monthly_ts, ts))
 
-        daily_ts = ts.asfreq('WEEKDAY', fillMethod='pad')
+        daily_ts = ts.asfreq('WEEKDAY', method='pad')
         monthly_ts = daily_ts.asfreq('EOM')
         self.assert_(np.array_equal(monthly_ts, ts))
 
diff --git a/pandas/lib/src/reindex.pyx b/pandas/lib/src/reindex.pyx
index 5d548f96a..c1d232338 100644
--- a/pandas/lib/src/reindex.pyx
+++ b/pandas/lib/src/reindex.pyx
@@ -8,7 +8,7 @@ def getFillVec(ndarray oldIndex, ndarray newIndex, dict oldMap, dict newMap,
     elif kind == 'BACKFILL':
         fillVec, maskVec = _backfill(oldIndex, newIndex, oldMap, newMap)
     else:
-        raise Exception("Don't recognize fillMethod: %s" % kind)
+        raise Exception("Don't recognize method: %s" % kind)
 
     return fillVec, maskVec.astype(np.bool)
 
