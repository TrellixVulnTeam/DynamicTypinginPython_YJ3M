commit b9b462c01819e704aced371b64c6b5886f871b45
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Sun Nov 17 16:20:37 2019 -0800

    CLN: parts of #29667 (#29677)

diff --git a/pandas/core/computation/eval.py b/pandas/core/computation/eval.py
index de2133f64..72f2e1d8e 100644
--- a/pandas/core/computation/eval.py
+++ b/pandas/core/computation/eval.py
@@ -11,7 +11,7 @@ from pandas.util._validators import validate_bool_kwarg
 
 from pandas.core.computation.engines import _engines
 from pandas.core.computation.expr import Expr, _parsers, tokenize_string
-from pandas.core.computation.scope import _ensure_scope
+from pandas.core.computation.scope import ensure_scope
 
 from pandas.io.formats.printing import pprint_thing
 
@@ -309,7 +309,7 @@ def eval(
         _check_for_locals(expr, level, parser)
 
         # get our (possibly passed-in) scope
-        env = _ensure_scope(
+        env = ensure_scope(
             level + 1,
             global_dict=global_dict,
             local_dict=local_dict,
diff --git a/pandas/core/computation/ops.py b/pandas/core/computation/ops.py
index ce67c3152..524013cee 100644
--- a/pandas/core/computation/ops.py
+++ b/pandas/core/computation/ops.py
@@ -197,7 +197,9 @@ class Op:
     Hold an operator of arbitrary arity.
     """
 
-    def __init__(self, op, operands, *args, **kwargs):
+    op: str
+
+    def __init__(self, op: str, operands, *args, **kwargs):
         self.op = _bool_op_map.get(op, op)
         self.operands = operands
         self.encoding = kwargs.get("encoding", None)
diff --git a/pandas/core/computation/pytables.py b/pandas/core/computation/pytables.py
index 4eb398982..ff7e713b3 100644
--- a/pandas/core/computation/pytables.py
+++ b/pandas/core/computation/pytables.py
@@ -13,7 +13,7 @@ from pandas.core.dtypes.common import is_list_like
 
 import pandas as pd
 import pandas.core.common as com
-from pandas.core.computation import expr, ops
+from pandas.core.computation import expr, ops, scope as _scope
 from pandas.core.computation.common import _ensure_decoded
 from pandas.core.computation.expr import BaseExprVisitor
 from pandas.core.computation.ops import UndefinedVariableError, is_term
@@ -21,10 +21,10 @@ from pandas.core.computation.ops import UndefinedVariableError, is_term
 from pandas.io.formats.printing import pprint_thing, pprint_thing_encoded
 
 
-class Scope(expr.Scope):
+class Scope(_scope.Scope):
     __slots__ = ("queryables",)
 
-    def __init__(self, level, global_dict=None, local_dict=None, queryables=None):
+    def __init__(self, level: int, global_dict=None, local_dict=None, queryables=None):
         super().__init__(level + 1, global_dict=global_dict, local_dict=local_dict)
         self.queryables = queryables or dict()
 
@@ -40,6 +40,7 @@ class Term(ops.Term):
     def _resolve_name(self):
         # must be a queryables
         if self.side == "left":
+            # Note: The behavior of __new__ ensures that self.name is a str here
             if self.name not in self.env.queryables:
                 raise NameError("name {name!r} is not defined".format(name=self.name))
             return self.name
diff --git a/pandas/core/computation/scope.py b/pandas/core/computation/scope.py
index ee82664f6..2c5c687a4 100644
--- a/pandas/core/computation/scope.py
+++ b/pandas/core/computation/scope.py
@@ -16,9 +16,9 @@ from pandas._libs.tslibs import Timestamp
 from pandas.compat.chainmap import DeepChainMap
 
 
-def _ensure_scope(
-    level, global_dict=None, local_dict=None, resolvers=(), target=None, **kwargs
-):
+def ensure_scope(
+    level: int, global_dict=None, local_dict=None, resolvers=(), target=None, **kwargs
+) -> "Scope":
     """Ensure that we are grabbing the correct scope."""
     return Scope(
         level + 1,
@@ -119,7 +119,7 @@ class Scope:
             self.scope.update(local_dict.scope)
             if local_dict.target is not None:
                 self.target = local_dict.target
-            self.update(local_dict.level)
+            self._update(local_dict.level)
 
         frame = sys._getframe(self.level)
 
@@ -251,7 +251,7 @@ class Scope:
                 # scope after the loop
                 del frame
 
-    def update(self, level: int):
+    def _update(self, level: int):
         """
         Update the current scope by going back `level` levels.
 
