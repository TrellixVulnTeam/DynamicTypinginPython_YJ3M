commit ecd11e4d1df5c776e5ca1d9997c53db4b394c0e9
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Dec 27 21:36:42 2011 -0500

    TST: some panel fixes. More robust label-based slicing for MultiIndex

diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index ea90e6353..fa6302d16 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -398,10 +398,12 @@ def _is_list_like(obj):
 
 def _is_label_slice(labels, obj):
     def crit(x):
-        if x in labels:
+        try:
+            _ = labels.get_loc(x)
             return False
-        else:
+        except KeyError:
             return isinstance(x, int) or x is None
+
     return not crit(obj.start) or not crit(obj.stop)
 
 def _need_slice(obj):
diff --git a/pandas/stats/fama_macbeth.py b/pandas/stats/fama_macbeth.py
index 8640ded23..799e0f4d6 100644
--- a/pandas/stats/fama_macbeth.py
+++ b/pandas/stats/fama_macbeth.py
@@ -39,7 +39,7 @@ class FamaMacBeth(object):
             time_effects=time_effects, x_effects=x_effects, cluster=cluster,
             dropped_dummies=dropped_dummies, verbose=verbose)
 
-        self._cols = self._ols_result._x.items
+        self._cols = self._ols_result._x.columns
 
     @cache_readonly
     def _beta_raw(self):
diff --git a/pandas/stats/ols.py b/pandas/stats/ols.py
index 1a27c45e1..c129f4f71 100644
--- a/pandas/stats/ols.py
+++ b/pandas/stats/ols.py
@@ -11,7 +11,7 @@ import numpy as np
 
 from pandas.core.api import DataFrame, Series
 from pandas.core.index import MultiIndex
-from pandas.core.panel import Panel, LongPanel
+from pandas.core.panel import Panel
 from pandas.util.decorators import cache_readonly
 import pandas.stats.common as common
 import pandas.stats.math as math
@@ -32,6 +32,8 @@ class OLS(object):
     nw_lags: None or int
         Number of Newey-West lags.
     """
+    _panel_model = False
+
     def __init__(self, y, x, intercept=True, weights=None, nw_lags=None,
                  nw_overlap=False):
         import scikits.statsmodels.api as sm
@@ -757,7 +759,7 @@ class MovingOLS(OLS):
         cum_xx = []
 
         slicer = lambda df, dt: df.truncate(dt, dt).values
-        if isinstance(x, DataFrame) and not isinstance(x, LongPanel):
+        if not self._panel_model:
             _get_index = x.index.get_loc
             def slicer(df, dt):
                 i = _get_index(dt)
@@ -782,7 +784,7 @@ class MovingOLS(OLS):
         cum_xy = []
 
         x_slicer = lambda df, dt: df.truncate(dt, dt).values
-        if isinstance(x, DataFrame) and not isinstance(x, LongPanel):
+        if not self._panel_model:
             _get_index = x.index.get_loc
             def x_slicer(df, dt):
                 i = _get_index(dt)
diff --git a/pandas/stats/plm.py b/pandas/stats/plm.py
index 4583acd48..e014d049e 100644
--- a/pandas/stats/plm.py
+++ b/pandas/stats/plm.py
@@ -15,7 +15,7 @@ from pandas.core.frame import DataFrame
 from pandas.core.series import Series
 from pandas.core.sparse import SparsePanel
 from pandas.stats.ols import OLS, MovingOLS
-import pandas.stats.common as common
+import pandas.stats.common as com
 import pandas.stats.math as math
 from pandas.util.decorators import cache_readonly
 
@@ -24,6 +24,8 @@ class PanelOLS(OLS):
 
     See ols function docs
     """
+    _panel_model = True
+
     def __init__(self, y, x, weights=None, intercept=True, nw_lags=None,
                  entity_effects=False, time_effects=False, x_effects=None,
                  cluster=None, dropped_dummies=None, verbose=False,
@@ -39,14 +41,14 @@ class PanelOLS(OLS):
         self._time_effects = time_effects
         self._x_effects = x_effects
         self._dropped_dummies = dropped_dummies or {}
-        self._cluster = common._get_cluster_type(cluster)
+        self._cluster = com._get_cluster_type(cluster)
         self._verbose = verbose
 
         (self._x, self._x_trans,
          self._x_filtered, self._y,
          self._y_trans) = self._prepare_data()
 
-        self._index = self._x.major_axis
+        self._index = self._x.index.levels[0]
 
         self._T = len(self._index)
 
@@ -470,6 +472,8 @@ class MovingPanelOLS(MovingOLS, PanelOLS):
 
     See ols function docs
     """
+    _panel_model = True
+
     def __init__(self, y, x, weights=None,
                  window_type='expanding', window=None,
                  min_periods=None,
@@ -499,7 +503,7 @@ class MovingPanelOLS(MovingOLS, PanelOLS):
         self._set_window(window_type, window, min_periods)
 
         if min_obs is None:
-            min_obs = len(self._x.items) + 1
+            min_obs = len(self._x.columns) + 1
 
         self._min_obs = min_obs
 
@@ -553,7 +557,7 @@ class MovingPanelOLS(MovingOLS, PanelOLS):
         x = self._x
         y = self._y
 
-        dates = x.major_axis
+        dates = x.index.levels[0]
 
         cluster_axis = None
         if self._cluster == 'time':
@@ -639,7 +643,7 @@ class MovingPanelOLS(MovingOLS, PanelOLS):
         # XXX: what's the best way to determine where to start?
         # TODO: write unit tests for this
 
-        rank_threshold = len(self._x.items) + 1
+        rank_threshold = len(self._x.columns) + 1
         if self._min_obs < rank_threshold: # pragma: no cover
             warnings.warn('min_obs is smaller than rank of X matrix')
 
@@ -763,7 +767,7 @@ def _var_beta_panel(y, x, beta, xx, rmse, cluster_axis,
             nw_lags = 0
 
         xox = 0
-        for i in range(len(x.major_axis)):
+        for i in range(len(x.index.levels[0])):
             xox += math.newey_west(m[i : i + 1], nw_lags,
                                    nobs, df, nw_overlap)
 
