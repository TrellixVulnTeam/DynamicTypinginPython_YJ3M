commit cc9ad4e6eaafbf9de3adc38e75c11aa2d6a75fcd
Author: waitingkuo <waitingkuo0527@gmail.com>
Date:   Tue Mar 26 02:39:00 2013 +0800

    BUG: Fix the rename for Series and DataFrame, #3165

diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 385695ec6..9729cc76c 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -5,7 +5,7 @@ from numpy import nan
 import numpy as np
 
 from pandas.core.common import _possibly_downcast_to_dtype, isnull
-from pandas.core.index import Index, _ensure_index, _handle_legacy_indexes
+from pandas.core.index import Index, MultiIndex, _ensure_index, _handle_legacy_indexes
 from pandas.core.indexing import _check_slice_bounds, _maybe_convert_indices
 import pandas.core.common as com
 import pandas.lib as lib
@@ -1646,7 +1646,13 @@ class BlockManager(object):
         return True
 
     def rename_axis(self, mapper, axis=1):
-        new_axis = Index([mapper(x) for x in self.axes[axis]])
+
+        index = self.axes[axis]
+        if isinstance(index, MultiIndex):
+            new_axis = MultiIndex.from_tuples([tuple(mapper(y) for y in x) for x in index], names=index.names)
+        else:
+            new_axis = Index([mapper(x) for x in index], name=index.name)
+
         if not new_axis.is_unique:
             raise AssertionError('New axis must be unique to rename')
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 35448d26e..acfc875fa 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -3108,7 +3108,7 @@ class Series(pa.Array, generic.PandasObject):
         """
         mapper_f = _get_rename_function(mapper)
         result = self if inplace else self.copy()
-        result.index = [mapper_f(x) for x in self.index]
+        result.index = Index([mapper_f(x) for x in self.index], name=self.index.name)
 
         if inplace:
             import warnings
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 881bc4c26..db7dac0ac 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -6742,6 +6742,20 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         renamed = self.frame.T.rename(index={'C': 'foo', 'D': 'bar'})
         self.assert_(np.array_equal(renamed.index, ['A', 'B', 'foo', 'bar']))
 
+        # index with name
+        index = Index(['foo', 'bar'], name='name')
+        renamer = DataFrame(data, index=index)
+        renamed = renamer.rename(index={'foo': 'bar', 'bar': 'foo'})
+        self.assert_(np.array_equal(renamed.index, ['bar', 'foo']))
+        self.assertEquals(renamed.index.name, renamer.index.name)
+
+        # MultiIndex
+        index = MultiIndex.from_tuples([('foo1', 'bar1'), ('foo2', 'bar2')], names=['foo', 'bar'])
+        renamer = DataFrame(data, index=index)
+        renamed = renamer.rename(index={'foo1': 'foo3', 'bar2': 'bar3'})
+        self.assert_(np.array_equal(renamed.index, MultiIndex.from_tuples([('foo3', 'bar1'), ('foo2', 'bar3')])))
+        self.assertEquals(renamed.index.names, renamer.index.names)
+
     def test_rename_nocopy(self):
         renamed = self.frame.rename(columns={'C': 'foo'}, copy=False)
         renamed['foo'] = 1.
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index cc69649f2..353f03eaf 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -3576,6 +3576,11 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         renamed = s.rename({'b': 'foo', 'd': 'bar'})
         self.assert_(np.array_equal(renamed.index, ['a', 'foo', 'c', 'bar']))
 
+        # index with name
+        renamer = Series(np.arange(4), index=Index(['a', 'b', 'c', 'd'], name='name'))
+        renamed = renamer.rename({})
+        self.assertEqual(renamed.index.name, renamer.index.name)
+
     def test_rename_inplace(self):
         renamer = lambda x: x.strftime('%Y%m%d')
         expected = renamer(self.ts.index[0])
