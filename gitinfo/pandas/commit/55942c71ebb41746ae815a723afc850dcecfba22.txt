commit 55942c71ebb41746ae815a723afc850dcecfba22
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Mar 16 15:07:54 2012 -0400

    ENH: tweak to PR and close #879

diff --git a/pandas/sandbox/qtpandas.py b/pandas/sandbox/qtpandas.py
index eb16e182f..50d183dbe 100644
--- a/pandas/sandbox/qtpandas.py
+++ b/pandas/sandbox/qtpandas.py
@@ -15,19 +15,20 @@ class DataFrameModel(QAbstractTableModel):
     def __init__(self):
         super(DataFrameModel,self).__init__()
         self.df = DataFrame()
-         
+
     def setDataFrame(self,dataFrame):
         self.df = dataFrame
-    
+
     def signalUpdate(self):
-        ''' tell viewers to update their data (this is full update, not efficient)'''
+        ''' tell viewers to update their data (this is full update, not
+        efficient)'''
         self.layoutChanged.emit()
-              
-    #------------- table display functions -----------------     
+
+    #------------- table display functions -----------------
     def headerData(self,section,orientation,role=Qt.DisplayRole):
         if role != Qt.DisplayRole:
             return QVariant()
-          
+
         if orientation == Qt.Horizontal:
             try:
                 return self.df.columns.tolist()[section]
@@ -39,86 +40,88 @@ class DataFrameModel(QAbstractTableModel):
                 return self.df.index.tolist()[section]
             except (IndexError, ):
                 return QVariant()
-            
+
     def data(self, index, role=Qt.DisplayRole):
         if role != Qt.DisplayRole:
             return QVariant()
-        
+
         if not index.isValid():
             return QVariant()
-        
+
         return QVariant(str(self.df.ix[index.row(),index.column()]))
-    
+
     def flags(self, index):
             flags = super(DataFrameModel, self).flags(index)
             flags |= Qt.ItemIsEditable
             return flags
 
     def setData(self, index, value, role):
-        
-        
-        self.df.set_value(str(self.df.index[index.row()]),str(self.df.columns[index.column()]), value.toPyObject())
-        return  True        
-      
+        self.df.set_value(self.df.index[index.row()],
+                          self.df.columns[index.column()],
+                          value.toPyObject())
+        return  True
+
     def rowCount(self, index=QModelIndex()):
         return self.df.shape[0]
-    
+
     def columnCount(self, index=QModelIndex()):
-        return self.df.shape[1] 
+        return self.df.shape[1]
 
 
 class DataFrameWidget(QWidget):
     ''' a simple widget for using DataFrames in a gui '''
     def __init__(self,dataFrame, parent=None):
         super(DataFrameWidget,self).__init__(parent)
-        
+
         self.dataModel = DataFrameModel()
         self.dataModel.setDataFrame(dataFrame)
-        
+
         self.dataTable = QTableView()
         self.dataTable.setModel(self.dataModel)
         self.dataModel.signalUpdate()
-        
+
         layout = QVBoxLayout()
         layout.addWidget(self.dataTable)
         self.setLayout(layout)
-        
-        
-    
+
+
+
     def resizeColumnsToContents(self):
-        self.dataTable.resizeColumnsToContents()    
-        
+        self.dataTable.resizeColumnsToContents()
+
 #-----------------stand alone test code
 
 def testDf():
     ''' creates test dataframe '''
-    data = {'int':[1,2,3],'float':[1.5,2.5,3.5],'string':['a','b','c'],'nan':[np.nan,np.nan,np.nan]}
-    return DataFrame(data, index=Index(['AAA','BBB','CCC']))[['int','float','string','nan']]
+    data = {'int':[1,2,3], 'float':[1.5,2.5,3.5],
+            'string':['a','b','c'], 'nan':[np.nan,np.nan,np.nan]}
+    return DataFrame(data, index=Index(['AAA','BBB','CCC']),
+                     columns=['int','float','string','nan'])
 
 
 class Form(QDialog):
     def __init__(self,parent=None):
         super(Form,self).__init__(parent)
-         
+
         df = testDf() # make up some data
         widget = DataFrameWidget(df)
         widget.resizeColumnsToContents()
-                     
+
         layout = QVBoxLayout()
         layout.addWidget(widget)
         self.setLayout(layout)
-        
+
 if __name__=='__main__':
     import sys
     import numpy as np
-    
+
     app = QApplication(sys.argv)
     form = Form()
     form.show()
     app.exec_()
-    
 
-        
-        
 
-        
\ No newline at end of file
+
+
+
+
