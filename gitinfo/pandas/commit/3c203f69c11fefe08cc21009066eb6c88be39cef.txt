commit 3c203f69c11fefe08cc21009066eb6c88be39cef
Author: jreback <jeff@reback.net>
Date:   Mon May 12 09:48:40 2014 -0400

    DOC: groupby.rst edits

diff --git a/doc/source/groupby.rst b/doc/source/groupby.rst
index 041f7e6cc..480f75c8a 100644
--- a/doc/source/groupby.rst
+++ b/doc/source/groupby.rst
@@ -822,8 +822,6 @@ that could be potential groupers.
    df.groupby([pd.Grouper(freq='6M',level='Date'),'Buyer']).sum()
 
 
-.. _groupby.nth:
-
 Taking the first rows of each group
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
@@ -854,6 +852,8 @@ This shows the first or last n rows from each group.
         1 0  1  2
         5 2  5  6
 
+.. _groupby.nth:
+
 Taking the nth row of each group
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
@@ -864,24 +864,21 @@ To select from a DataFrame or Series the nth item, use the nth method. This is a
    df = DataFrame([[1, np.nan], [1, 4], [5, 6]], columns=['A', 'B'])
    g = df.groupby('A')
 
-   # nth(0) is the same as g.first()
    g.nth(0)
-   g.first()
-
-   # nth(-1) is the same as g.last()
    g.nth(-1)
-   g.last()
-
-   # return the nth item
    g.nth(1)
 
 If you want to select the nth not-null method, use the ``dropna`` kwarg. For a DataFrame this should be either ``'any'`` or ``'all'`` just like you would pass to dropna, for a Series this just needs to be truthy.
 
 .. ipython:: python
 
+   # nth(0) is the same as g.first()
    g.nth(0, dropna='any')
+   g.first()
 
+   # nth(-1) is the same as g.last()
    g.nth(1, dropna='any')  # NaNs denote group exhausted when using dropna
+   g.last()
 
    g.B.nth(0, dropna=True)
 
diff --git a/doc/source/v0.14.0.txt b/doc/source/v0.14.0.txt
index d600a72f0..4f3f7976e 100644
--- a/doc/source/v0.14.0.txt
+++ b/doc/source/v0.14.0.txt
@@ -230,10 +230,10 @@ More consistent behaviour for some groupby methods:
 
      df = DataFrame([[1, np.nan], [1, 4], [5, 6]], columns=['A', 'B'])
      g = df.groupby('A')
-     g.nth(0)  # can also use negative ints
+     g.nth(0)
 
      # this is equivalent to g.first()
-     g.nth(0, dropna='any')  # similar to old behaviour
+     g.nth(0, dropna='any')
 
      # this is equivalent to g.last()
      g.nth(-1, dropna='any')
