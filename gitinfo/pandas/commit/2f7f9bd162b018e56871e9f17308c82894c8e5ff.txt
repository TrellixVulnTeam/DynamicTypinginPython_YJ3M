commit 2f7f9bd162b018e56871e9f17308c82894c8e5ff
Author: jreback <jeff@reback.net>
Date:   Wed Jun 5 14:09:07 2013 -0400

    DOC: release notes update

diff --git a/RELEASE.rst b/RELEASE.rst
index c05bb526a..3a347246b 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -63,14 +63,7 @@ pandas 0.11.1
       to append an index with a different name than the existing
     - support datelike columns with a timezone as data_columns (GH2852_)
     - table writing performance improvements.
-<<<<<<< HEAD
-<<<<<<< HEAD
-=======
-    - support python3 (via ``PyTables 3.0.0``)
->>>>>>> 116ab91... DOC: docstring/release notes updates for py3k
-=======
-    - support py3 (via ``PyTables 3.0.0``)
->>>>>>> ab16d43... ENH: partial py3k support
+    - support python3 (via ``PyTables 3.0.0``) (GH3750_)
   - Add modulo operator to Series, DataFrame
   - Add ``date`` method to DatetimeIndex
   - Simplified the API and added a describe method to Categorical
@@ -87,29 +80,14 @@ pandas 0.11.1
 
 **API Changes**
 
-<<<<<<< HEAD
-<<<<<<< HEAD
-  - When removing an object from a ``HDFStore``, ``remove(key)`` raises
-    ``KeyError`` if the key is not a valid store object.
-  - In an ``HDFStore``, raise a ``TypeError`` on passing ``where`` or ``columns`` 
-    to select with a Storer; these are invalid parameters at this time
-=======
-=======
->>>>>>> ab16d43... ENH: partial py3k support
   - ``HDFStore``
 
     - When removing an object, ``remove(key)`` raises
       ``KeyError`` if the key is not a valid store object.
     - raise a ``TypeError`` on passing ``where`` or ``columns`` 
       to select with a Storer; these are invalid parameters at this time
-<<<<<<< HEAD
     - can now specify an ``encoding`` option to ``append/put`` 
-      to enable alternate encodings
->>>>>>> 116ab91... DOC: docstring/release notes updates for py3k
-=======
-    - can now specify an ``encoding`` option to ``append`` and ``select`` 
-      to enable alternate encodings
->>>>>>> ab16d43... ENH: partial py3k support
+      to enable alternate encodings (GH3750_)
   - The repr() for (Multi)Index now obeys display.max_seq_items rather
     then numpy threshold print options. (GH3426_, GH3466_)
   - Added mangle_dupe_cols option to read_table/csv, allowing users
@@ -315,6 +293,7 @@ pandas 0.11.1
 .. _GH3740: https://github.com/pydata/pandas/issues/3740
 .. _GH3748: https://github.com/pydata/pandas/issues/3748
 .. _GH3741: https://github.com/pydata/pandas/issues/3741
+.. _GH3750: https://github.com/pydata/pandas/issues/3750
 
 pandas 0.11.0
 =============
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 86edb7a43..e772d95d0 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -218,7 +218,7 @@ class HDFStore(object):
     complevel : int, 1-9, default 0
             If a complib is specified compression will be applied
             where possible
-    complib : {'zliu', 'bzip2', 'lzo', 'blosc', None}, default None
+    complib : {'zlib', 'bzip2', 'lzo', 'blosc', None}, default None
             If complevel is > 0 apply compression to objects written
             in the store wherever possible
     fletcher32 : bool, default False
@@ -711,7 +711,8 @@ class HDFStore(object):
     def groups(self):
         """ return a list of all the top-level nodes (that are not themselves a pandas storage object) """
         _tables()
-        return [ g for g in self._handle.walkNodes() if getattr(g._v_attrs,'pandas_type',None) or getattr(g,'table',None) or (isinstance(g,_table_mod.table.Table) and g._v_name != u'table') ]
+        return [ g for g in self._handle.walkNodes() if getattr(g._v_attrs,'pandas_type',None) or getattr(
+            g,'table',None) or (isinstance(g,_table_mod.table.Table) and g._v_name != u'table') ]
 
     def get_node(self, key):
         """ return the node with the key or None if it does not exist """
@@ -731,7 +732,8 @@ class HDFStore(object):
         s.infer_axes()
         return s
 
-    def copy(self, file, mode = 'w', propindexes = True, keys = None, complib = None, complevel = None, fletcher32 = False, overwrite = True):
+    def copy(self, file, mode = 'w', propindexes = True, keys = None, complib = None, complevel = None,
+             fletcher32 = False, overwrite = True):
         """ copy the existing store to a new file, upgrading in place
 
             Parameters
@@ -845,7 +847,8 @@ class HDFStore(object):
         except:
             error('_TABLE_MAP')
 
-    def _write_to_group(self, key, value, index=True, table=False, append=False, complib=None, encoding=None, **kwargs):
+    def _write_to_group(self, key, value, index=True, table=False, append=False,
+                        complib=None, encoding=None, **kwargs):
         group = self.get_node(key)
 
         # remove the node if we are not appending
@@ -870,7 +873,8 @@ class HDFStore(object):
                     group = self._handle.createGroup(path, p)
                 path = new_path
 
-        s = self._create_storer(group, value, table=table, append=append, encoding=encoding, **kwargs)
+        s = self._create_storer(group, value, table=table, append=append,
+                                encoding=encoding, **kwargs)
         if append:
             # raise if we are trying to append to a non-table,
             #       or a table that exists (and we are putting)
