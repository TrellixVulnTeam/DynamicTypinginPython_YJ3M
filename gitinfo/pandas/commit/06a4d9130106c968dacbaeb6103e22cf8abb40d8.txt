commit 06a4d9130106c968dacbaeb6103e22cf8abb40d8
Author: maximilianr <maximilian@sixtycapital.com>
Date:   Fri Jul 24 14:25:06 2015 -0400

    Drop & insert on subtypes of index return their subtypes, #10620

diff --git a/doc/source/whatsnew/v0.17.0.txt b/doc/source/whatsnew/v0.17.0.txt
index c947758b8..914ea6751 100644
--- a/doc/source/whatsnew/v0.17.0.txt
+++ b/doc/source/whatsnew/v0.17.0.txt
@@ -400,5 +400,8 @@ Bug Fixes
 - Bug in `read_msgpack` where DataFrame to decode has duplicate column names (:issue:`9618`)
 - Bug in ``io.common.get_filepath_or_buffer`` which caused reading of valid S3 files to fail if the bucket also contained keys for which the user does not have read permission (:issue:`10604`)
 - Bug in vectorised setting of timestamp columns with python ``datetime.date`` and numpy ``datetime64`` (:issue:`10408`, :issue:`10412`)
+
 - Bug in ``pd.DataFrame`` when constructing an empty DataFrame with a string dtype (:issue:`9428`)
+- Bug in `Index` subtypes (such as `PeriodIndex`) not returning their own type for `.drop` and `.insert` methods
 
+- Bug in `Index` subtypes (such as `PeriodIndex`) not returning their own type for `.drop` and `.insert` methods
diff --git a/pandas/core/index.py b/pandas/core/index.py
index e62fd646e..f6f625762 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1548,8 +1548,13 @@ class Index(IndexOpsMixin, PandasObject):
         other, result_name_update = self._convert_can_do_setop(other)
         if result_name is None:
             result_name = result_name_update
+
         the_diff = sorted(set((self.difference(other)).union(other.difference(self))))
-        return Index(the_diff, name=result_name)
+        attribs = self._get_attributes_dict()
+        attribs['name'] = result_name
+        if 'freq' in attribs:
+            attribs['freq'] = None
+        return self._shallow_copy(the_diff, infer=True, **attribs)
 
     def get_loc(self, key, method=None):
         """
@@ -2527,7 +2532,7 @@ class Index(IndexOpsMixin, PandasObject):
         -------
         new_index : Index
         """
-        return Index(np.delete(self._data, loc), name=self.name)
+        return self._shallow_copy(np.delete(self._data, loc))
 
     def insert(self, loc, item):
         """
@@ -2543,11 +2548,12 @@ class Index(IndexOpsMixin, PandasObject):
         -------
         new_index : Index
         """
-        _self = np.asarray(self)
-        item_idx = Index([item], dtype=self.dtype).values
-        idx = np.concatenate(
-            (_self[:loc], item_idx, _self[loc:]))
-        return Index(idx, name=self.name)
+        indexes=[self[:loc],
+                 Index([item]),
+                 self[loc:]]
+
+        return indexes[0].append(indexes[1]).append(indexes[2])
+
 
     def drop(self, labels, errors='raise'):
         """
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 0b592368e..b030908b7 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -396,6 +396,36 @@ class Base(object):
                 with tm.assertRaisesRegexp(TypeError, msg):
                     result = first.sym_diff([1, 2, 3])
 
+    def test_insert_base(self):
+
+        for name, idx in compat.iteritems(self.indices):
+            result = idx[1:4]
+
+            if len(idx)>0:
+                #test 0th element
+                self.assertTrue(idx[0:4].equals(
+                    result.insert(0, idx[0])))
+
+    def test_delete_base(self):
+
+        for name, idx in compat.iteritems(self.indices):
+
+            if len(idx)>0:
+
+                expected = idx[1:]
+                result = idx.delete(0)
+                self.assertTrue(result.equals(expected))
+                self.assertEqual(result.name, expected.name)
+
+                expected = idx[:-1]
+                result = idx.delete(-1)
+                self.assertTrue(result.equals(expected))
+                self.assertEqual(result.name, expected.name)
+
+                with tm.assertRaises((IndexError, ValueError)):
+                    # either depending on numpy version
+                    result = idx.delete(len(idx))
+
     def test_equals_op(self):
         # GH9947, GH10637
         index_a = self.create_index()
