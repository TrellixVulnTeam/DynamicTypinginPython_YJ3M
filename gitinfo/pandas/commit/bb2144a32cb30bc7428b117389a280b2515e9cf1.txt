commit bb2144a32cb30bc7428b117389a280b2515e9cf1
Author: tzinckgraf <tzinckgraf@gmail.com>
Date:   Tue Feb 21 08:29:55 2017 -0500

    BUG: Bug on reset_index for a MultiIndex of all NaNs
    
    closes #6322
    
    Author: tzinckgraf <tzinckgraf@gmail.com>
    
    Closes #15466 from tzinckgraf/GH6322 and squashes the following commits:
    
    35f97f4 [tzinckgraf] GH6322, Bug on reset_index for a MultiIndex of all NaNs

diff --git a/doc/source/whatsnew/v0.20.0.txt b/doc/source/whatsnew/v0.20.0.txt
index 40b068547..86f916bc0 100644
--- a/doc/source/whatsnew/v0.20.0.txt
+++ b/doc/source/whatsnew/v0.20.0.txt
@@ -575,6 +575,7 @@ Bug Fixes
 - Incorrect dtyped ``Series`` was returned by comparison methods (e.g., ``lt``, ``gt``, ...) against a constant for an empty ``DataFrame`` (:issue:`15077`)
 - Bug in ``Series.dt.round`` inconsistent behaviour on NAT's with different arguments (:issue:`14940`)
 - Bug in ``DataFrame.fillna()`` where the argument ``downcast`` was ignored when fillna value was of type ``dict`` (:issue:`15277`)
+- Bug in ``.reset_index()`` when an all ``NaN`` level of a ``MultiIndex`` would fail (:issue:`6322`)
 
 
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 3ebdf72a5..bfef2cfbd 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2973,10 +2973,17 @@ class DataFrame(NDFrame):
             # if we have the labels, extract the values with a mask
             if labels is not None:
                 mask = labels == -1
-                values = values.take(labels)
-                if mask.any():
-                    values, changed = _maybe_upcast_putmask(values, mask,
-                                                            np.nan)
+
+                # we can have situations where the whole mask is -1,
+                # meaning there is nothing found in labels, so make all nan's
+                if mask.all():
+                    values = np.empty(len(mask))
+                    values.fill(np.nan)
+                else:
+                    values = values.take(labels)
+                    if mask.any():
+                        values, changed = _maybe_upcast_putmask(values, mask,
+                                                                np.nan)
             return values
 
         new_index = _default_index(len(new_obj))
diff --git a/pandas/tests/frame/test_alter_axes.py b/pandas/tests/frame/test_alter_axes.py
index e84bb6407..e52bfdbd4 100644
--- a/pandas/tests/frame/test_alter_axes.py
+++ b/pandas/tests/frame/test_alter_axes.py
@@ -624,6 +624,33 @@ class TestDataFrameAlterAxes(tm.TestCase, TestData):
                                 ['a', 'mean', 'median', 'mean']])
         assert_frame_equal(rs, xp)
 
+    def test_reset_index_multiindex_nan(self):
+        # GH6322, testing reset_index on MultiIndexes
+        # when we have a nan or all nan
+        df = pd.DataFrame({'A': ['a', 'b', 'c'],
+                           'B': [0, 1, np.nan],
+                           'C': np.random.rand(3)})
+        rs = df.set_index(['A', 'B']).reset_index()
+        assert_frame_equal(rs, df)
+
+        df = pd.DataFrame({'A': [np.nan, 'b', 'c'],
+                           'B': [0, 1, 2],
+                           'C': np.random.rand(3)})
+        rs = df.set_index(['A', 'B']).reset_index()
+        assert_frame_equal(rs, df)
+
+        df = pd.DataFrame({'A': ['a', 'b', 'c'],
+                           'B': [0, 1, 2],
+                           'C': [np.nan, 1.1, 2.2]})
+        rs = df.set_index(['A', 'B']).reset_index()
+        assert_frame_equal(rs, df)
+
+        df = pd.DataFrame({'A': ['a', 'b', 'c'],
+                           'B': [np.nan, np.nan, np.nan],
+                           'C': np.random.rand(3)})
+        rs = df.set_index(['A', 'B']).reset_index()
+        assert_frame_equal(rs, df)
+
     def test_reset_index_with_datetimeindex_cols(self):
         # GH5818
         #
