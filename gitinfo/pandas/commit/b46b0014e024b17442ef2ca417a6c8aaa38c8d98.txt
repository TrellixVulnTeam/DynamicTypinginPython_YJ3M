commit b46b0014e024b17442ef2ca417a6c8aaa38c8d98
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jul 12 12:27:45 2012 -0400

    ENH: add multi_sparse option to set_printoptions to disable sparsification in MultiIndex.format, close #1538

diff --git a/RELEASE.rst b/RELEASE.rst
index 7fa54dc3f..b4d2a534a 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -33,6 +33,8 @@ pandas 0.8.1
   - Add new ``bootstrap_plot`` plot function
   - Add new ``parallel_coordinates`` plot function (#1488)
   - Add ``radviz`` plot function (#1566)
+  - Add ``multi_sparse`` option to ``set_printoptions`` to modify display of
+    hierarchical indexes (#1538)
 
 **Improvements to existing features**
 
diff --git a/pandas/core/format.py b/pandas/core/format.py
index e2ca85bf9..c5be148db 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -149,12 +149,17 @@ class DataFrameFormatter(object):
 
     def __init__(self, frame, buf=None, columns=None, col_space=None,
                  header=True, index=True, na_rep='NaN', formatters=None,
-                 justify=None, float_format=None, sparsify=True,
+                 justify=None, float_format=None, sparsify=None,
                  index_names=True, **kwds):
         self.frame = frame
         self.buf = buf if buf is not None else StringIO()
         self.show_index_names = index_names
+
+        if sparsify is None:
+            sparsify = print_config.multi_sparse
+
         self.sparsify = sparsify
+
         self.float_format = float_format
         self.formatters = formatters if formatters is not None else {}
         self.na_rep = na_rep
@@ -662,7 +667,8 @@ def _has_names(index):
 def set_printoptions(precision=None, column_space=None, max_rows=None,
                      max_columns=None, colheader_justify=None,
                      max_colwidth=None, notebook_repr_html=None,
-                     date_dayfirst=None, date_yearfirst=None):
+                     date_dayfirst=None, date_yearfirst=None,
+                     multi_sparse=None):
     """
     Alter default behavior of DataFrame.toString
 
@@ -686,6 +692,9 @@ def set_printoptions(precision=None, column_space=None, max_rows=None,
         When True, prints and parses dates with the day first, eg 20/01/2005
     date_yearfirst : boolean
         When True, prints and parses dates with the year first, eg 2005/01/20
+    multi_sparse : boolean
+        Default True, "sparsify" MultiIndex display (don't display repeated
+        elements in outer levels within groups)
     """
     if precision is not None:
         print_config.precision = precision
@@ -705,6 +714,8 @@ def set_printoptions(precision=None, column_space=None, max_rows=None,
         print_config.date_dayfirst = date_dayfirst
     if date_yearfirst is not None:
         print_config.date_yearfirst = date_yearfirst
+    if multi_sparse is not None:
+        print_config.multi_sparse = multi_sparse
 
 def reset_printoptions():
     print_config.reset()
@@ -834,6 +845,7 @@ class _GlobalPrintConfig(object):
         self.notebook_repr_html = True
         self.date_dayfirst = False
         self.date_yearfirst = False
+        self.multi_sparse = True
 
     def reset(self):
         self.__init__()
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index f532e8df1..0fe8ff022 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1199,7 +1199,7 @@ class DataFrame(NDFrame):
     @Appender(fmt.docstring_to_string, indents=1)
     def to_string(self, buf=None, columns=None, col_space=None, colSpace=None,
                   header=True, index=True, na_rep='NaN', formatters=None,
-                  float_format=None, sparsify=True, nanRep=None,
+                  float_format=None, sparsify=None, nanRep=None,
                   index_names=True, justify=None, force_unicode=False):
         """
         Render a DataFrame to a console-friendly tabular output.
@@ -1239,7 +1239,7 @@ class DataFrame(NDFrame):
     @Appender(fmt.docstring_to_string, indents=1)
     def to_html(self, buf=None, columns=None, col_space=None, colSpace=None,
                 header=True, index=True, na_rep='NaN', formatters=None,
-                float_format=None, sparsify=True, index_names=True,
+                float_format=None, sparsify=None, index_names=True,
                 bold_rows=True):
         """
         to_html-specific options
diff --git a/pandas/core/index.py b/pandas/core/index.py
index a3733ef8d..13517231a 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1438,7 +1438,7 @@ class MultiIndex(Index):
         labels = self.labels[num]
         return unique_vals.take(labels)
 
-    def format(self, space=2, sparsify=True, adjoin=True, names=False):
+    def format(self, space=2, sparsify=None, adjoin=True, names=False):
         if len(self) == 0:
             return []
 
@@ -1454,6 +1454,10 @@ class MultiIndex(Index):
             level.extend(ndtake(np.array(lev, dtype=object), lab))
             result_levels.append(level)
 
+        if sparsify is None:
+            import pandas.core.format as fmt
+            sparsify = fmt.print_config.multi_sparse
+
         if sparsify:
             # little bit of a kludge job for #1217
             result_levels = _sparsify(result_levels,
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 7f0745dab..d14637bef 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -21,6 +21,8 @@ import pandas.util.testing as tm
 from pandas.tseries.index import _to_m8
 import pandas.tseries.offsets as offsets
 
+import pandas as pd
+
 class TestIndex(unittest.TestCase):
 
     def setUp(self):
@@ -1208,6 +1210,15 @@ class TestMultiIndex(unittest.TestCase):
         result = index.format()
         self.assertEqual(result[3], '1  0  0  0')
 
+    def test_format_sparse_config(self):
+        # #1538
+        pd.set_printoptions(multi_sparse=False)
+
+        result = self.index.format()
+        self.assertEqual(result[1], 'foo  two')
+
+        pd.reset_printoptions()
+
     def test_bounds(self):
         self.index._bounds
 
