commit 5f475d6c69545f5bbda1cb0a66fabf54dae434d2
Author: Chang She <chang@lambdafoundry.com>
Date:   Fri Apr 27 19:36:15 2012 -0400

    ENH: TimeSeries.asof to take an array of dates/index

diff --git a/pandas/core/series.py b/pandas/core/series.py
index de40f6cba..b0474f7b2 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -2278,22 +2278,37 @@ copy : boolean, default False
         if isinstance(date, basestring):
             date = datetools.to_datetime(date)
 
-        v = self.get(date)
+        if not isinstance(date, (list, tuple, np.ndarray)):
+            try:
+                date = list(date)
+            except TypeError:
+                date = [date]
 
-        if isnull(v):
-            # this will convert datetime -> datetime64 index
-            candidates = self.index[notnull(self)]
+        if not isinstance(date, Index):
+            date = Index(date)
 
-            index = candidates.searchsorted(lib.Timestamp(date))
+        candidates = self.index[notnull(self)]
 
-            if index > 0:
-                asOfDate = candidates[index - 1]
-            else:
-                return nan
+        mask = date.isin(candidates)
 
-            return self.get(asOfDate)
-        else:
-            return v
+        there = self.reindex(date[mask])
+        todo = date[-mask]
+
+        if len(there) == len(date):
+            if len(there) == 1:
+                return there[0]
+            return there
+
+        index = candidates.searchsorted(todo)
+        index = index - 1
+        asof_mask = index >= 0
+        asof = self.ix[candidates[index[asof_mask]]]
+        asof.index = todo[asof_mask]
+
+        if len(date) == 1 and len(asof) > 0:
+            return asof[0]
+
+        return there.combine_first(asof).reindex(date)
 
     def interpolate(self, method='linear'):
         """
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 38e089ef2..45b3964e5 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -13,7 +13,7 @@ import numpy as np
 import numpy.ma as ma
 
 from pandas import (Index, Series, TimeSeries, DataFrame, isnull, notnull,
-                    bdate_range)
+                    bdate_range, date_range)
 from pandas.core.index import MultiIndex
 from pandas.tseries.index import Timestamp
 
@@ -1876,6 +1876,25 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
                           after=self.ts.index[0] - offset)
 
     def test_asof(self):
+        # array or list or dates
+        N = 50
+        rng = date_range('1/1/1990', periods=N, freq='53s')
+        ts = Series(np.random.randn(N), index=rng)
+        ts[15:30] = np.nan
+        dates = date_range('1/1/1990', periods=N * 3, freq='25s')
+
+        result = ts.asof(dates)
+        self.assert_(notnull(result).all())
+        lb = ts.index[14]
+        ub = ts.index[30]
+
+        mask = (result.index >= lb) & (result.index < ub)
+        rs = result[mask]
+        self.assert_((rs == ts[lb]).all())
+
+        val = result[result.index[result.index >= ub][0]]
+        self.assertEqual(ts[ub], val)
+
         self.ts[5:10] = np.NaN
         self.ts[15:20] = np.NaN
 
@@ -1896,6 +1915,7 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         d = self.ts.index[0] - datetools.bday
         self.assert_(np.isnan(self.ts.asof(d)))
 
+
     def test_astype_cast_nan_int(self):
         df = Series([1.0, 2.0, 3.0, np.nan])
         self.assertRaises(ValueError, df.astype, np.int64)
diff --git a/vb_suite/timeseries.py b/vb_suite/timeseries.py
index 926a5e90f..3fb986086 100644
--- a/vb_suite/timeseries.py
+++ b/vb_suite/timeseries.py
@@ -68,13 +68,18 @@ datetimeindex_add_offset = Benchmark('rng + timedelta(minutes=2)', setup,
                                      start_date=datetime(2012, 4, 1))
 
 setup = common_setup + """
-N = 1000
+N = 10000
 rng = date_range('1/1/1990', periods=N, freq='53s')
 ts = Series(np.random.randn(N), index=rng)
 dates = date_range('1/1/1990', periods=N * 10, freq='5s')
 """
-timeseries_asof_loop = Benchmark('[ts.asof(d) for d in dates]', setup,
+timeseries_asof_single = Benchmark('ts.asof(dates[0])', setup,
                                  start_date=datetime(2012, 4, 27))
 
 timeseries_asof = Benchmark('ts.asof(dates)', setup,
                             start_date=datetime(2012, 4, 27))
+
+setup = setup + 'ts[250:5000] = np.nan'
+
+timeseries_asof_nan = Benchmark('ts.asof(dates)', setup,
+                                start_date=datetime(2012, 4, 27))
