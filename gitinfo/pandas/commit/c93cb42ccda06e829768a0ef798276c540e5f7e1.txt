commit c93cb42ccda06e829768a0ef798276c540e5f7e1
Author: y-p <yoval@gmx.com>
Date:   Tue Dec 4 03:20:31 2012 +0200

    DOC: document new 'options API' functions.

diff --git a/doc/source/basics.rst b/doc/source/basics.rst
index 2978edf7d..8855af08e 100644
--- a/doc/source/basics.rst
+++ b/doc/source/basics.rst
@@ -1043,11 +1043,95 @@ There is also a ``save`` function which takes any object as its first argument:
    import os
    os.remove('foo.pickle')
 
+Working with package options
+----------------------------
+
+.. _basics.working_with_options:
+
+Introduced in 0.10.0, pandas supports a new system for working with options.
+The 4 relavent functions are available directly from the ``pandas`` namespace,
+and they are:
+
+- ``get_option`` / ``set_option`` - get/set the value of a single option.
+- ``reset_option`` - reset one or more options to their default value.
+- ``describe_option`` - print the descriptions of one or more options.
+
+**Note:** developers can check out pandas/core/config.py for more info.
+
+Options have a full "dotted-style", case-insensitive name (e.g. ``print.max_rows``),
+but all of the functions above accept a regexp pattern (``re.search`` style) as argument,
+so passing in a substring will work - as long as it is unambiguous :
+
+.. ipython:: python
+
+   get_option("print.max_rows")
+   set_option("print.max_rows",101)
+   get_option("print.max_rows")
+   set_option("max_r",102)
+   get_option("print.max_rows")
+
+
+However, the following will **not work** because it matches multiple option names, e.g.``print.max_colwidth``, ``print.max_rows``, ``print.max_columns``:
+
+.. ipython:: python
+
+   get_option("print.max_")
+
+
+**Note:** Using this form of convenient shorthand may make your code break if new options with similar names are added in future versions.
+
+
+The docstrings of all the functions document the available options, but you can also get a
+list of available options and their descriptions with ``describe_option``. When called
+with no argument ``describe_option`` will print out descriptions for all available options.
+
+.. ipython:: python
+
+   describe_option()
+
+
+or you can get the description for just the options that match the regexp you pass in:
+
+.. ipython:: python
+
+   describe_option("date")
+
+
+All options also have a default value, and you can use the ``reset_option`` to do just that:
+
+.. ipython:: python
+   :suppress:
+
+   reset_option("print.max_rows")
+
+
+.. ipython:: python
+
+   get_option("print.max_rows")
+   set_option("print.max_rows",999)
+   get_option("print.max_rows")
+   reset_option("print.max_rows")
+   get_option("print.max_rows")
+
+
+and you also set multiple options at once:
+
+.. ipython:: python
+
+   reset_option("^print\.")
+
+
+
 Console Output Formatting
 -------------------------
 
 .. _basics.console_output:
 
+**Note:** ``set_printoptions``/ ``reset_printoptions``  are now deprecated (but functioning),
+and both, as well as ``set_eng_float_format``, use the options API behind the scenes.
+The corresponding options now live under "print.XYZ", and you can set them directly with
+``get/set_option``.
+
 Use the ``set_eng_float_format`` function in the ``pandas.core.common`` module
 to alter the floating-point formatting of pandas objects to produce a particular
 format.
