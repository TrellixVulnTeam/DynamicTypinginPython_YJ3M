commit 4efb5e998be2d2a5b917aed537a5a8740b7d975f
Author: Jeff Reback <jeff@reback.net>
Date:   Sat Feb 27 11:38:18 2016 -0500

    TST/DOC: some test cleanups

diff --git a/doc/source/whatsnew/v0.18.0.txt b/doc/source/whatsnew/v0.18.0.txt
index 58e97ff16..1e07e38c2 100644
--- a/doc/source/whatsnew/v0.18.0.txt
+++ b/doc/source/whatsnew/v0.18.0.txt
@@ -365,70 +365,63 @@ New Behavior:
 Changes to dtype assignment behaviors
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-When a DataFrame's slice is updated with a new slice of the same
-dtype, the dtype of the DataFrame will now remain the same.
+When a DataFrame's slice is updated with a new slice of the same dtype, the dtype of the DataFrame will now remain the same. (:issue:`10503`)
 
 Previous Behavior:
 
 .. code-block:: python
 
-   In [2]: df = pd.DataFrame({'a':[0, 1, 1], 'b':[100, 200, 300]}, dtype='uint32')
+   In [5]: df = pd.DataFrame({'a': [0, 1, 1],
+                              'b': pd.Series([100, 200, 300], dtype='uint32')})
 
-   In [3]: df.info()
-   <class 'pandas.core.frame.DataFrame'>
-   RangeIndex: 3 entries, 0 to 2
-   Data columns (total 2 columns):
-   a    3 non-null uint32
-   b    3 non-null uint32
-   dtypes: uint32(2)
-   memory usage: 96.0 bytes
+   In [7]: df.dtypes
+   Out[7]:
+   a     int64
+   b    uint32
+   dtype: object
 
-   In [4]: ix = df['a'] == 1
+   In [8]: ix = df['a'] == 1
 
-   In [5]: df.loc[ix, 'b'] = df.loc[ix, 'b']
+   In [9]: df.loc[ix, 'b'] = df.loc[ix, 'b']
 
-   In [6]: df.info()
-   <class 'pandas.core.frame.DataFrame'>
-   RangeIndex: 3 entries, 0 to 2
-   Data columns (total 2 columns):
-   a    3 non-null int64
-   b    3 non-null int64
-   dtypes: int64(2)
+   In [11]: df.dtypes
+   Out[11]:
+   a    int64
+   b    int64
+   dtype: object
 
 New Behavior:
 
 .. ipython:: python
 
-   df = pd.DataFrame({'a':[0, 1, 1], 'b':[100, 200, 300]}, dtype='uint32')
-   df.info()
+   df = pd.DataFrame({'a': [0, 1, 1],
+                      'b': pd.Series([100, 200, 300], dtype='uint32')})
+   df.dtypes
    ix = df['a'] == 1
    df.loc[ix, 'b'] = df.loc[ix, 'b']
-   df.info()
-
+   df.dtypes
 
-When a DataFrame's integer slice is partially updated with a new slice of floats that
-could potentially be downcasted to integer without losing precision,
-the dtype of the slice will be set to float instead of integer.
+When a DataFrame's integer slice is partially updated with a new slice of floats that could potentially be downcasted to integer without losing precision, the dtype of the slice will be set to float instead of integer.
 
 Previous Behavior:
 
 .. code-block:: python
 
    In [4]: df = pd.DataFrame(np.array(range(1,10)).reshape(3,3),
-      ...: columns=list('abc'),
-      ...: index=[[4,4,8], [8,10,12]])
+                             columns=list('abc'),
+                             index=[[4,4,8], [8,10,12]])
 
    In [5]: df
-   Out[5]: 
+   Out[5]:
          a  b  c
    4 8   1  2  3
      10  4  5  6
    8 12  7  8  9
 
-   In [6]: df.ix[4, 'c'] = np.array([0., 1.])
+   In [7]: df.ix[4, 'c'] = np.array([0., 1.])
 
-   In [7]: df
-   Out[7]: 
+   In [8]: df
+   Out[8]:
          a  b  c
    4 8   1  2  0
      10  4  5  1
@@ -439,8 +432,8 @@ New Behavior:
 .. ipython:: python
 
    df = pd.DataFrame(np.array(range(1,10)).reshape(3,3),
-      columns=list('abc'),
-      index=[[4,4,8], [8,10,12]])
+                     columns=list('abc'),
+                     index=[[4,4,8], [8,10,12]])
    df
    df.ix[4, 'c'] = np.array([0., 1.])
    df
@@ -1202,4 +1195,3 @@ Bug Fixes
 - Bug in ``DataFrame.apply`` in which reduction was not being prevented for cases in which ``dtype`` was not a numpy dtype (:issue:`12244`)
 - Bug when initializing categorical series with a scalar value. (:issue:`12336`)
 - Bug when specifying a UTC ``DatetimeIndex`` by setting ``utc=True`` in ``.to_datetime`` (:issue:`11934`)
-- Bug when modifying a slice of a ``DataFrame`` with the same ``dtype``, the ``dtype`` of the ``DataFrame`` could unexpected changed. (:issue:`10503`).
diff --git a/pandas/tests/test_generic.py b/pandas/tests/test_generic.py
index bdef725a5..1198d6b19 100644
--- a/pandas/tests/test_generic.py
+++ b/pandas/tests/test_generic.py
@@ -362,24 +362,6 @@ class Generic(object):
             self._compare(o.head(-3), o.head(7))
             self._compare(o.tail(-3), o.tail(7))
 
-    def test_dtype_after_slice_update(self):
-        # GH10503
-
-        # assigning the same type should not change the type
-        df1 = pd.DataFrame({'a': [0, 1, 1], 'b': [100, 200, 300]},
-                           dtype='uint32')
-        ix = df1['a'] == 1
-        newb1 = df1.loc[ix, 'b'] + 1
-        df1.loc[ix, 'b'] = newb1
-        assert_equal(df1['a'].dtype, newb1.dtype)
-
-        # assigning a new type should get the inferred type
-        df2 = pd.DataFrame({'a': [0, 1, 1], 'b': [100, 200, 300]},
-                           dtype='uint64')
-        newb2 = df2.loc[ix, 'b']
-        df1.loc[ix, 'b'] = newb2
-        assert_equal(df1['a'].dtype, np.dtype('int64'))
-
     def test_sample(self):
         # Fixes issue: 2419
 
diff --git a/pandas/tests/test_indexing.py b/pandas/tests/test_indexing.py
index 41b5c473a..c95be009e 100644
--- a/pandas/tests/test_indexing.py
+++ b/pandas/tests/test_indexing.py
@@ -699,6 +699,29 @@ class TestIndexing(tm.TestCase):
         expected = Series([0, 1, 0], index=[4, 5, 6])
         assert_series_equal(s, expected)
 
+    def test_loc_setitem_slice(self):
+        # GH10503
+
+        # assigning the same type should not change the type
+        df1 = DataFrame({'a': [0, 1, 1],
+                         'b': Series([100, 200, 300], dtype='uint32')})
+        ix = df1['a'] == 1
+        newb1 = df1.loc[ix, 'b'] + 1
+        df1.loc[ix, 'b'] = newb1
+        expected = DataFrame({'a': [0, 1, 1],
+                              'b': Series([100, 201, 301], dtype='uint32')})
+        assert_frame_equal(df1, expected)
+
+        # assigning a new type should get the inferred type
+        df2 = DataFrame({'a': [0, 1, 1], 'b': [100, 200, 300]},
+                        dtype='uint64')
+        ix = df1['a'] == 1
+        newb2 = df2.loc[ix, 'b']
+        df1.loc[ix, 'b'] = newb2
+        expected = DataFrame({'a': [0, 1, 1], 'b': [100, 200, 300]},
+                             dtype='uint64')
+        assert_frame_equal(df2, expected)
+
     def test_ix_loc_setitem_consistency(self):
 
         # GH 5771
