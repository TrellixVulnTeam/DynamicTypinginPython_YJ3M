commit 2ea45834573e5143727055827d31d7aadb72fde9
Author: Jeffrey Tratner <jeffrey.tratner@gmail.com>
Date:   Mon Jun 17 23:25:36 2013 -0400

    ENH: Add test decorator 'with_connectivity_check'.
    
    Allows tests to check that a url is available before bubbling up
    an error from a test case.
    
    TST: Change tests to use with_connectivity_check to better approximate previous behavior
    
    TST: Add check_before_test option to with_connectivity_check.
    
    CLN: PEP8 all the recent jratner code

diff --git a/pandas/io/tests/test_fred.py b/pandas/io/tests/test_fred.py
index c1b59f782..cd52dca50 100644
--- a/pandas/io/tests/test_fred.py
+++ b/pandas/io/tests/test_fred.py
@@ -8,7 +8,7 @@ import pandas as pd
 import pandas.io.data as web
 from pandas.util.testing import (network, assert_frame_equal,
                                  assert_series_equal,
-                                 assert_almost_equal)
+                                 assert_almost_equal, with_connectivity_check)
 from numpy.testing.decorators import slow
 
 import urllib2
@@ -17,7 +17,7 @@ import urllib2
 class TestFred(unittest.TestCase):
 
     @slow
-    @network
+    @with_connectivity_check("http://www.google.com")
     def test_fred(self):
         """
         Throws an exception when DataReader can't get a 200 response from
diff --git a/pandas/io/tests/test_ga.py b/pandas/io/tests/test_ga.py
index 05f767b99..d2061a6d0 100644
--- a/pandas/io/tests/test_ga.py
+++ b/pandas/io/tests/test_ga.py
@@ -5,7 +5,7 @@ from datetime import datetime
 import nose
 import pandas as pd
 from pandas import DataFrame
-from pandas.util.testing import network, assert_frame_equal
+from pandas.util.testing import network, assert_frame_equal, with_connectivity_check
 from numpy.testing.decorators import slow
 
 try:
@@ -71,7 +71,7 @@ class TestGoogle(unittest.TestCase):
             raise nose.SkipTest
 
     @slow
-    @network
+    @with_connectivity_check("http://www.google.com")
     def test_iterator(self):
         try:
             reader = GAnalytics()
@@ -97,16 +97,9 @@ class TestGoogle(unittest.TestCase):
 
         except AuthenticationConfigError:
             raise nose.SkipTest
-        except httplib2.ServerNotFoundError:
-            try:
-                h = httplib2.Http()
-                response, content = h.request("http://www.google.com")
-                raise
-            except httplib2.ServerNotFoundError:
-                raise nose.SkipTest
 
     @slow
-    @network
+    @with_connectivity_check("http://www.google.com")
     def test_segment(self):
         try:
             end_date = datetime.now()
diff --git a/pandas/io/tests/test_google.py b/pandas/io/tests/test_google.py
index 18ddf06d3..8ceda94f0 100644
--- a/pandas/io/tests/test_google.py
+++ b/pandas/io/tests/test_google.py
@@ -2,18 +2,15 @@ import unittest
 import nose
 from datetime import datetime
 
+import numpy as np
 import pandas as pd
 import pandas.io.data as web
-from pandas.util.testing import (network, assert_series_equal)
-from numpy.testing.decorators import slow
-import numpy as np
-
-import urllib2
+from pandas.util.testing import network, with_connectivity_check
 
 
 class TestGoogle(unittest.TestCase):
 
-    @with_connectivity_check('http://www.google.com')
+    @with_connectivity_check("http://www.google.com")
     def test_google(self):
         # asserts that google is minimally working and that it throws
         # an exception when DataReader can't get a 200 response from
diff --git a/pandas/io/tests/test_yahoo.py b/pandas/io/tests/test_yahoo.py
index 3cf800c88..712475f76 100644
--- a/pandas/io/tests/test_yahoo.py
+++ b/pandas/io/tests/test_yahoo.py
@@ -4,15 +4,15 @@ from datetime import datetime
 
 import pandas as pd
 import pandas.io.data as web
-from pandas.util.testing import network, assert_series_equal
+from pandas.util.testing import network, assert_series_equal, with_connectivity_check
 
 
 class TestYahoo(unittest.TestCase):
 
-    @network
+    @with_connectivity_check("http://www.google.com")
     def test_yahoo(self):
         # asserts that yahoo is minimally working and that it throws
-        # an excecption when DataReader can't get a 200 response from
+        # an exception when DataReader can't get a 200 response from
         # yahoo
         start = datetime(2010, 1, 1)
         end = datetime(2013, 01, 27)
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 91f8aefb0..5a583ca3a 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -41,6 +41,7 @@ N = 30
 K = 4
 _RAISE_NETWORK_ERROR_DEFAULT = False
 
+
 def rands(n):
     choices = string.ascii_letters + string.digits
     return ''.join(random.choice(choices) for _ in xrange(n))
@@ -675,10 +676,12 @@ def optional_args(decorator):
         def function(): pass
 
     Calls decorator with decorator(f, *args, **kwargs)"""
+
     @wraps(decorator)
     def wrapper(*args, **kwargs):
         def dec(f):
             return decorator(f, *args, **kwargs)
+
         is_decorating = not kwargs and len(args) == 1 and callable(args[0])
         if is_decorating:
             f = args[0]
@@ -686,11 +689,13 @@ def optional_args(decorator):
             return dec(f)
         else:
             return dec
+
     return wrapper
 
+
 @optional_args
 def network(t, raise_on_error=_RAISE_NETWORK_ERROR_DEFAULT,
-        error_classes=(IOError,)):
+            error_classes=(IOError,)):
     """
     Label a test as requiring network connection and skip test if it encounters a ``URLError``.
 
@@ -751,6 +756,7 @@ def network(t, raise_on_error=_RAISE_NETWORK_ERROR_DEFAULT,
     ``pandas/util/testing.py`` sets the default behavior (currently False).
     """
     t.network = True
+
     @wraps(t)
     def network_wrapper(*args, **kwargs):
         if raise_on_error:
@@ -760,8 +766,98 @@ def network(t, raise_on_error=_RAISE_NETWORK_ERROR_DEFAULT,
                 return t(*args, **kwargs)
             except error_classes as e:
                 raise nose.SkipTest("Skipping test %s" % e)
+
     return network_wrapper
 
+
+def can_connect(url):
+    """tries to connect to the given url. True if succeeds, False if IOError raised"""
+    try:
+        urllib2.urlopen(url)
+    except IOError:
+        return False
+    else:
+        return True
+
+
+@optional_args
+def with_connectivity_check(t, url="http://www.google.com",
+                            raise_on_error=_RAISE_NETWORK_ERROR_DEFAULT, check_before_test=False,
+                            error_classes=IOError):
+    """
+    Label a test as requiring network connection and, if an error is
+    encountered, only raise if it does not find a network connection.
+
+    In comparison to ``network``, this assumes an added contract to your test:
+    you must assert that, under normal conditions, your test will ONLY fail if
+    it does not have network connectivity.
+
+    You can call this in 3 ways: as a standard decorator, with keyword
+    arguments, or with a positional argument that is the url to check.
+
+    Parameters
+    ----------
+    t : callable
+        The test requiring network connectivity.
+    url : path
+        The url to test via ``urllib2.urlopen`` to check for connectivity.
+        Defaults to 'http://www.google.com'.
+    raise_on_error : bool
+        If True, never catches errors.
+    check_before_test : bool
+        If True, checks connectivity before running the test case.
+    error_classes : tuple or Exception
+        error classes to ignore. If not in ``error_classes``, raises the error.
+        defaults to IOError. Be careful about changing the error classes here.
+
+    NOTE: ``raise_on_error`` supercedes ``check_before_test``
+    Returns
+    -------
+    t : callable
+        The decorated test ``t``, with checks for connectivity errors.
+
+    Example
+    -------
+
+    In this example, you see how it will raise the error if it can connect to
+    the url::
+        >>> @with_connectivity_check("http://www.yahoo.com")
+        ... def test_something_with_yahoo():
+        ...    raise IOError("Failure Message")
+        >>> test_something_with_yahoo()
+        Traceback (most recent call last):
+            ...
+        IOError: Failure Message
+
+    I you set check_before_test, it will check the url first and not run the test on failure::
+        >>> @with_connectivity_check("failing://url.blaher", check_before_test=True)
+        ... def test_something():
+        ...     print("I ran!")
+        ...     raise ValueError("Failure")
+        >>> test_something()
+        Traceback (most recent call last):
+            ...
+        SkipTest
+    """
+    t.network = True
+
+    @wraps(t)
+    def wrapper(*args, **kwargs):
+        if check_before_test and not raise_on_error:
+            if not can_connect(url):
+                raise nose.SkipTest
+        try:
+            return t(*args, **kwargs)
+        except error_classes as e:
+            if raise_on_error or can_connect(url):
+                raise
+            else:
+                raise nose.SkipTest("Skipping test due to lack of connectivity"
+                                    " and error %s" % e)
+
+    return wrapper
+
+
 class SimpleMock(object):
     """
     Poor man's mocking object
@@ -806,11 +902,13 @@ def stdin_encoding(encoding=None):
 
     """
     import sys
+
     _stdin = sys.stdin
     sys.stdin = SimpleMock(sys.stdin, "encoding", encoding)
     yield
     sys.stdin = _stdin
 
+
 def assertRaisesRegexp(exception, regexp, callable, *args, **kwargs):
     """ Port of assertRaisesRegexp from unittest in Python 2.7 - used in with statement.
 
@@ -842,6 +940,7 @@ def assertRaisesRegexp(exception, regexp, callable, *args, **kwargs):
     """
 
     import re
+
     try:
         callable(*args, **kwargs)
     except Exception as e:
@@ -855,7 +954,7 @@ def assertRaisesRegexp(exception, regexp, callable, *args, **kwargs):
             expected_regexp = re.compile(regexp)
         if not expected_regexp.search(str(e)):
             raise AssertionError('"%s" does not match "%s"' %
-                     (expected_regexp.pattern, str(e)))
+                                 (expected_regexp.pattern, str(e)))
     else:
         # Apparently some exceptions don't have a __name__ attribute? Just aping unittest library here
         name = getattr(exception, "__name__", str(exception))
