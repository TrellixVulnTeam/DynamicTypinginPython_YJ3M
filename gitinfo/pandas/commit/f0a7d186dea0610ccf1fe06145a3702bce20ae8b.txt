commit f0a7d186dea0610ccf1fe06145a3702bce20ae8b
Author: Gim Seng <26968986+gimseng@users.noreply.github.com>
Date:   Fri Jul 10 20:33:13 2020 +0100

    Fix strange behavior when precision display option is zero (#20359) (#35212)

diff --git a/doc/source/whatsnew/v1.1.0.rst b/doc/source/whatsnew/v1.1.0.rst
index 798a3d838..d3724112e 100644
--- a/doc/source/whatsnew/v1.1.0.rst
+++ b/doc/source/whatsnew/v1.1.0.rst
@@ -1018,6 +1018,7 @@ MultiIndex
 
 I/O
 ^^^
+- Bug in print-out when ``display.precision`` is zero. (:issue:`20359`)
 - Bug in :meth:`read_json` where integer overflow was occurring when json contains big number strings. (:issue:`30320`)
 - `read_csv` will now raise a ``ValueError`` when the arguments `header` and `prefix` both are not `None`. (:issue:`27394`)
 - Bug in :meth:`DataFrame.to_json` was raising ``NotFoundError`` when ``path_or_buf`` was an S3 URI (:issue:`28375`)
diff --git a/pandas/io/formats/format.py b/pandas/io/formats/format.py
index 22cdd8e23..27df01462 100644
--- a/pandas/io/formats/format.py
+++ b/pandas/io/formats/format.py
@@ -1382,9 +1382,9 @@ class FloatArrayFormatter(GenericArrayFormatter):
 
             if self.fixed_width:
                 if is_complex:
-                    result = _trim_zeros_complex(values, na_rep)
+                    result = _trim_zeros_complex(values, self.decimal, na_rep)
                 else:
-                    result = _trim_zeros_float(values, na_rep)
+                    result = _trim_zeros_float(values, self.decimal, na_rep)
                 return np.asarray(result, dtype="object")
 
             return values
@@ -1754,19 +1754,21 @@ def _make_fixed_width(
     return result
 
 
-def _trim_zeros_complex(str_complexes: np.ndarray, na_rep: str = "NaN") -> List[str]:
+def _trim_zeros_complex(
+    str_complexes: np.ndarray, decimal: str = ".", na_rep: str = "NaN"
+) -> List[str]:
     """
     Separates the real and imaginary parts from the complex number, and
     executes the _trim_zeros_float method on each of those.
     """
     return [
-        "".join(_trim_zeros_float(re.split(r"([j+-])", x), na_rep))
+        "".join(_trim_zeros_float(re.split(r"([j+-])", x), decimal, na_rep))
         for x in str_complexes
     ]
 
 
 def _trim_zeros_float(
-    str_floats: Union[np.ndarray, List[str]], na_rep: str = "NaN"
+    str_floats: Union[np.ndarray, List[str]], decimal: str = ".", na_rep: str = "NaN"
 ) -> List[str]:
     """
     Trims zeros, leaving just one before the decimal points if need be.
@@ -1778,8 +1780,11 @@ def _trim_zeros_float(
 
     def _cond(values):
         finite = [x for x in values if _is_number(x)]
+        has_decimal = [decimal in x for x in finite]
+
         return (
             len(finite) > 0
+            and all(has_decimal)
             and all(x.endswith("0") for x in finite)
             and not (any(("e" in x) or ("E" in x) for x in finite))
         )
@@ -1788,7 +1793,7 @@ def _trim_zeros_float(
         trimmed = [x[:-1] if _is_number(x) else x for x in trimmed]
 
     # leave one 0 after the decimal points if need be.
-    return [x + "0" if x.endswith(".") and _is_number(x) else x for x in trimmed]
+    return [x + "0" if x.endswith(decimal) and _is_number(x) else x for x in trimmed]
 
 
 def _has_names(index: Index) -> bool:
diff --git a/pandas/tests/io/formats/test_format.py b/pandas/tests/io/formats/test_format.py
index 3c40a2ae8..e236b3da7 100644
--- a/pandas/tests/io/formats/test_format.py
+++ b/pandas/tests/io/formats/test_format.py
@@ -2910,6 +2910,15 @@ class TestFloatArrayFormatter:
         assert result[0] == " 12.0"
         assert result[1] == "  0.0"
 
+    def test_output_display_precision_trailing_zeroes(self):
+        # Issue #20359: trimming zeros while there is no decimal point
+
+        # Happens when display precision is set to zero
+        with pd.option_context("display.precision", 0):
+            s = pd.Series([840.0, 4200.0])
+            expected_output = "0     840\n1    4200\ndtype: float64"
+            assert str(s) == expected_output
+
     def test_output_significant_digits(self):
         # Issue #9764
 
