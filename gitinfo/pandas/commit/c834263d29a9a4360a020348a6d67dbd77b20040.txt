commit c834263d29a9a4360a020348a6d67dbd77b20040
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Apr 21 20:40:39 2010 +0000

    rename methods
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@160 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index d928cb0af..4f6ac4ed6 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -964,6 +964,54 @@ class DataFrame(Picklable, Groupable):
 
         return result
 
+    def rename(self, index=None, columns=None):
+        """
+        Alter index and / or columns using input function or functions
+
+        Parameters
+        ----------
+        index : dict-like or function, optional
+            Transformation to apply to index values
+        columns : dict-like or function, optional
+            Transformation to apply to column values
+
+        See also
+        --------
+        Series.rename
+
+        Notes
+        -----
+        Function / dict values must be unique (1-to-1)
+
+        Returns
+        -------
+        y : DataFrame (new object)
+        """
+        if isinstance(index, (dict, Series)):
+            index = index.__getitem__
+
+        if isinstance(columns, (dict, Series)):
+            columns = columns.__getitem__
+
+        if index is None and columns is None:
+            raise Exception('must pass either index or columns')
+
+        result = self.copy()
+
+        if index is not None:
+            result._rename_index_inplace(index)
+
+        if columns is not None:
+            result._rename_columns_inplace(columns)
+
+        return result
+
+    def _rename_index_inplace(self, mapper):
+        self.index = [mapper(x) for x in self.index]
+
+    def _rename_columns_inplace(self, mapper):
+        self._series = dict((mapper(k), v) for k, v in self._series.iteritems())
+
     @property
     def T(self):
         """
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index 17b09d8c8..cfd23196c 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -307,6 +307,12 @@ class DataMatrix(DataFrame):
         return DataMatrix(newValues, index=self.index, columns=columns,
                           objects=objects)
 
+    def _rename_columns_inplace(self, mapper):
+        self.columns = [mapper(x) for x in self.columns]
+
+        if self.objects is not None:
+            self.objects._rename_columns_inplace(mapper)
+
     def _combineFrame(self, other, func):
         """
         Methodology, briefly
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 4700ec573..992258b43 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -6,12 +6,10 @@ Contains data structures designed for manipulating panel (3-dimensional) data
 # pylint: disable-msg=W0212
 # pylint: disable-msg=W0621
 
-from cStringIO import StringIO
 import operator
 import sys
 
 import numpy as np
-from numpy.lib.format import write_array, read_array
 
 from pandas.core.common import (_pickle_array, _unpickle_array,
                                 _pfixed)
@@ -1012,6 +1010,9 @@ class LongPanel(Panel):
             data = dict((k, data[k]) for k in columns)
         elif isinstance(data, DataFrame):
             data = data._series.copy()
+        elif isinstance(data, dict):
+            # otherwise will pop columns out of original
+            data = data.copy()
 
         if exclude is None:
             exclude = set()
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 16b98e2e6..29a60caf5 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1070,6 +1070,31 @@ class Series(np.ndarray, Picklable, Groupable):
 
         return self.__class__(newValues, index=newIndex)
 
+    def rename(self, mapper):
+        """
+        Alter Series index using dict or function
+
+        Parameters
+        ----------
+        mapper : dict-like or function
+            Transformation to apply to each index
+
+        Notes
+        -----
+        Function / dict values must be unique (1-to-1)
+
+        Returns
+        -------
+        y : Series (new object)
+        """
+        if isinstance(mapper, (dict, Series)):
+            mapper = mapper.__getitem__
+
+        result = self.copy()
+        result.index = [mapper(x) for x in self.index]
+
+        return result
+
     @property
     def weekday(self):
         return self.__class__([d.weekday() for d in self.index],
