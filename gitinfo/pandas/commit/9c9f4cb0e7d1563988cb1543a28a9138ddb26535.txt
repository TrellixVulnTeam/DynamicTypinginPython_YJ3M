commit 9c9f4cb0e7d1563988cb1543a28a9138ddb26535
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Sep 18 11:31:21 2012 -0400

    ENH: index_label=False -> no leading comma in header in DataFrame.to_csv. close #1583

diff --git a/RELEASE.rst b/RELEASE.rst
index e983a8cd9..945f1e1da 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -50,6 +50,8 @@ pandas 0.9.0
   - DataFrame.dot will not do data alignment, and also work with Series (#1915)
   - Add ``na`` option for missing data handling in some vectorized string
     methods (#1689)
+  - If index_label=False in DataFrame.to_csv, do not print fields/commas in the
+    text output. Results in easier importing into R (#1583)
 
 **API Changes**
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index f28c0c288..82c3c768c 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1041,8 +1041,8 @@ class DataFrame(NDFrame):
     to_wide = deprecate('to_wide', to_panel)
 
     def _helper_csvexcel(self, writer, na_rep=None, cols=None,
-                         header=True, index=True, index_label=None,
-                         float_format=None):
+                         header=True, index=True,
+                         index_label=None, float_format=None):
         if cols is None:
             cols = self.columns
 
@@ -1054,24 +1054,28 @@ class DataFrame(NDFrame):
         if has_aliases or header:
             if index:
                 # should write something for index label
-                if index_label is None:
-                    if isinstance(self.index, MultiIndex):
-                        index_label = []
-                        for i, name in enumerate(self.index.names):
-                            if name is None:
-                                name = ''
-                            index_label.append(name)
-                    else:
-                        index_label = self.index.name
-                        if index_label is None:
-                            index_label = ['']
+                if index_label is not False:
+                    if index_label is None:
+                        if isinstance(self.index, MultiIndex):
+                            index_label = []
+                            for i, name in enumerate(self.index.names):
+                                if name is None:
+                                    name = ''
+                                index_label.append(name)
                         else:
-                            index_label = [index_label]
-                elif not isinstance(index_label, (list, tuple, np.ndarray)):
-                    # given a string for a DF with Index
-                    index_label = [index_label]
+                            index_label = self.index.name
+                            if index_label is None:
+                                index_label = ['']
+                            else:
+                                index_label = [index_label]
+                    elif not isinstance(index_label, (list, tuple, np.ndarray)):
+                        # given a string for a DF with Index
+                        index_label = [index_label]
+
+                    encoded_labels = list(index_label)
+                else:
+                    encoded_labels = []
 
-                encoded_labels = list(index_label)
                 if has_aliases:
                     if len(header) != len(cols):
                         raise ValueError(('Writing %d cols but got %d aliases'
@@ -1127,10 +1131,12 @@ class DataFrame(NDFrame):
             assumed to be aliases for the column names
         index : boolean, default True
             Write row names (index)
-        index_label : string or sequence, default None
+        index_label : string or sequence, or False, default None
             Column label for index column(s) if desired. If None is given, and
             `header` and `index` are True, then the index names are used. A
-            sequence should be given if the DataFrame uses MultiIndex.
+            sequence should be given if the DataFrame uses MultiIndex.  If
+            False do not print fields for index names. Use index_label=False
+            for easier importing in R
         mode : Python write mode, default 'w'
         sep : character, default ","
             Field delimiter for the output file.
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 023fe57bc..b99608a70 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3392,6 +3392,17 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         self.assertEqual(result, expected)
 
+    def test_to_csv_index_no_leading_comma(self):
+        df = DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]},
+                       index=['one', 'two', 'three'])
+
+        buf = StringIO()
+        df.to_csv(buf, index_label=False)
+        expected = ('A,B\n'
+                    'one,1,4\n'
+                    'two,2,5\n'
+                    'three,3,6\n')
+        self.assertEqual(buf.getvalue(), expected)
 
     def test_to_excel_from_excel(self):
         try:
