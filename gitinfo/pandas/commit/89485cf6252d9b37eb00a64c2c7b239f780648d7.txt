commit 89485cf6252d9b37eb00a64c2c7b239f780648d7
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun May 20 22:10:16 2012 -0400

    BUG/TST: more test coverage, resample bugfix

diff --git a/pandas/core/series.py b/pandas/core/series.py
index 221972269..1ba5a19b0 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1986,7 +1986,9 @@ copy : boolean, default False
         index = _ensure_index(index)
         if self.index.equals(index):
             if copy:
-                return self.copy()
+                result = self.copy()
+                result.index = index
+                return result
             else:
                 return self
 
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 75ee6762f..c66ba4071 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -259,7 +259,7 @@ class DatetimeIndex(Int64Index):
         subarr.offset = offset
         subarr.tz = tz
 
-        if verify_integrity:
+        if verify_integrity and len(subarr) > 0:
             if offset is not None and not infer_freq:
                 inferred = subarr.inferred_freq
                 if inferred != offset.freqstr:
diff --git a/pandas/tseries/resample.py b/pandas/tseries/resample.py
index 65bce58ea..241e692db 100644
--- a/pandas/tseries/resample.py
+++ b/pandas/tseries/resample.py
@@ -70,7 +70,7 @@ class TimeGrouper(CustomGrouper):
             else:
                 obj = obj.to_timestamp(how=self.convention)
                 return self._resample_timestamps(obj)
-        else:
+        else:  # pragma: no cover
             raise TypeError('Only valid with DatetimeIndex or PeriodIndex')
 
     def get_grouper(self, obj):
@@ -92,8 +92,8 @@ class TimeGrouper(CustomGrouper):
         assert(isinstance(axis, DatetimeIndex))
 
         if len(axis) == 0:
-            # TODO: Should we be a bit more careful here?
-            return [], [], []
+            binner = labels = DatetimeIndex(data=[], freq=self.freq)
+            return binner, [], labels
 
         first, last = _get_range_edges(axis, self.begin, self.end, self.freq,
                                        closed=self.closed, base=self.base)
@@ -121,8 +121,9 @@ class TimeGrouper(CustomGrouper):
         assert(isinstance(axis, DatetimeIndex))
 
         if len(axis) == 0:
-            # TODO: Should we be a bit more careful here?
-            return [], [], []
+            binner = labels = PeriodIndex(data=[], freq=self.freq)
+            return binner, [], labels
+
         labels = binner = PeriodIndex(start=axis[0], end=axis[-1],
                                       freq=self.freq)
 
@@ -165,9 +166,13 @@ class TimeGrouper(CustomGrouper):
     def _resample_periods(self, obj):
         axlabels = obj._get_axis(self.axis)
 
-        start = axlabels[0].asfreq(self.freq, how=self.convention)
-        end = axlabels[-1].asfreq(self.freq, how=self.convention)
-        new_index = period_range(start, end, freq=self.freq)
+        if len(axlabels) == 0:
+            new_index = PeriodIndex(data=[], freq=self.freq)
+            return obj.reindex(new_index)
+        else:
+            start = axlabels[0].asfreq(self.freq, how=self.convention)
+            end = axlabels[-1].asfreq(self.freq, how=self.convention)
+            new_index = period_range(start, end, freq=self.freq)
 
         # Start vs. end of period
         memb = axlabels.asfreq(self.freq, how=self.convention)
diff --git a/pandas/tseries/tests/test_frequencies.py b/pandas/tseries/tests/test_frequencies.py
index 8d70e33b6..ccfbbb743 100644
--- a/pandas/tseries/tests/test_frequencies.py
+++ b/pandas/tseries/tests/test_frequencies.py
@@ -92,6 +92,12 @@ class TestFrequencyInference(unittest.TestCase):
     def test_microsecond(self):
         self._check_tick(timedelta(microseconds=1), 'U')
 
+    def test_nanosecond(self):
+        idx = DatetimeIndex(np.arange(0, 100, 10))
+        inferred = idx.inferred_freq
+
+        self.assert_(inferred == '10N')
+
     def _check_tick(self, base_delta, code):
         b = datetime.now()
         for i in range(1, 5):
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index 489983c60..f6e1a6077 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -391,17 +391,17 @@ class TestResample(unittest.TestCase):
         exp_index = period_range('Jan-2000', 'Dec-2000', freq='M')
         self.assert_(result.index.equals(exp_index))
 
-    def test_upsample_daily_business_daily(self):
-        ts = _simple_ts('1/1/2000', '2/1/2000', freq='B')
+    def test_resample_empty(self):
+        ts = _simple_ts('1/1/2000', '2/1/2000')[:0]
 
-        result = ts.resample('D')
-        expected = ts.reindex(date_range('1/3/2000', '2/1/2000'))
-        assert_series_equal(result, expected)
+        result = ts.resample('A')
+        self.assert_(len(result) == 0)
+        self.assert_(result.index.freqstr == 'A-DEC')
+
+        result = ts.resample('A', kind='period')
+        self.assert_(len(result) == 0)
+        self.assert_(result.index.freqstr == 'A-DEC')
 
-        ts = _simple_ts('1/1/2000', '2/1/2000')
-        result = ts.resample('H')
-        expected = ts.reindex(date_range('1/1/2000', '2/1/2000', freq='H'))
-        assert_series_equal(result, expected)
 
 def _simple_ts(start, end, freq='D'):
     rng = date_range(start, end, freq=freq)
@@ -565,6 +565,25 @@ class TestResamplePeriodIndex(unittest.TestCase):
         expected = ts.to_timestamp().resample('5min')
         assert_series_equal(result, expected)
 
+    def test_upsample_daily_business_daily(self):
+        ts = _simple_pts('1/1/2000', '2/1/2000', freq='B')
+
+        result = ts.resample('D')
+        expected = ts.asfreq('D').reindex(period_range('1/3/2000', '2/1/2000'))
+        assert_series_equal(result, expected)
+
+        ts = _simple_pts('1/1/2000', '2/1/2000')
+        result = ts.resample('H', convention='s')
+        exp_rng = period_range('1/1/2000', '2/1/2000', freq='H')
+        expected = ts.asfreq('H', how='s').reindex(exp_rng)
+        assert_series_equal(result, expected)
+
+    def test_resample_empty(self):
+        ts = _simple_pts('1/1/2000', '2/1/2000')[:0]
+
+        result = ts.resample('A')
+        self.assert_(len(result) == 0)
+
 class TestTimeGrouper(unittest.TestCase):
 
     def setUp(self):
