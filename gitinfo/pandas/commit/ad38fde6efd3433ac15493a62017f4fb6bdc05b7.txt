commit ad38fde6efd3433ac15493a62017f4fb6bdc05b7
Author: Adam Klein <adamklein@gmail.com>
Date:   Sun Feb 26 21:45:39 2012 -0500

    ENH: added day-of-week, week-of-year, day-of-year, quarter accessors

diff --git a/pandas/src/datetime.pxd b/pandas/src/datetime.pxd
index c2fcda827..95fbed759 100644
--- a/pandas/src/datetime.pxd
+++ b/pandas/src/datetime.pxd
@@ -75,6 +75,8 @@ cdef extern from "np_datetime.h":
                                              NPY_DATETIMEUNIT *out_bestunit,
                                              int apply_tzinfo)
     int _days_per_month_table[2][12]
+    int _month_offset[2][13]
+
     int dayofweek(int y, int m, int d)
     int is_leapyear(int64_t year)
 
diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index a37efd8b4..eb851adf6 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -1612,6 +1612,7 @@ def fast_field_accessor(ndarray[int64_t] dtindex, object field):
         _TSObject ts
         Py_ssize_t i, count = 0
         ndarray[int32_t] out
+        int isleap
 
     count = len(dtindex)
     out = np.empty(count, dtype='i4')
@@ -1659,18 +1660,34 @@ def fast_field_accessor(ndarray[int64_t] dtindex, object field):
         return out
 
     elif field == 'doy':
-        pass
+        for i in range(count):
+            ts = convert_to_tsobject(dtindex[i])
+            isleap = is_leapyear(ts.dtval.year)
+            out[i] = _month_offset[isleap][ts.dtval.month-1] + ts.dtval.day
+        return out
 
     elif field == 'dow':
-        pass
+        for i in range(count):
+            ts = convert_to_tsobject(dtindex[i])
+            out[i] = ts_dayofweek(ts)
+        return out
 
     elif field == 'woy':
-        pass
+        for i in range(count):
+            ts = convert_to_tsobject(dtindex[i])
+            isleap = is_leapyear(ts.dtval.year)
+            out[i] = _month_offset[isleap][ts.dtval.month-1] + ts.dtval.day
+            out[i] = ((out[i] - 1) / 7) + 1
+        return out
 
     elif field == 'q':
-        pass
+        for i in range(count):
+            ts = convert_to_tsobject(dtindex[i])
+            out[i] = ts.dtval.month
+            out[i] = ((out[i] - 1) / 3) + 1
+        return out
 
-    raise ValueError("Field %s not supported; not in (Y,M,D,h,m,s,us)" % field)
+    raise ValueError("Field %s not supported" % field)
 
 
 # Some general helper functions
diff --git a/pandas/src/np_datetime.h b/pandas/src/np_datetime.h
index c0f471b37..3a795d469 100644
--- a/pandas/src/np_datetime.h
+++ b/pandas/src/np_datetime.h
@@ -24,6 +24,12 @@ static int _days_per_month_table[2][12] = {
     { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }
 };
 
+/* Table with day offsets for each month (0-based, without and with leap) */
+static int _month_offset[2][13] = {
+    { 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365 },
+    { 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366 }
+};
+
 // stuff numpy needs in header
 // ----------------------------------------------------------------------------
 
diff --git a/pandas/tests/test_datetime64.py b/pandas/tests/test_datetime64.py
index 3259a74b9..0b982f721 100644
--- a/pandas/tests/test_datetime64.py
+++ b/pandas/tests/test_datetime64.py
@@ -207,13 +207,23 @@ class TestDatetime64(unittest.TestCase):
         dti = DatetimeIndex(offset='Q@JAN', start=datetime(1997,12,31),
                             periods=100)
 
-        dti.year[0] == 1997
-        dti.month[0] == 12
-        dti.day[0] == 31
-        dti.hour[0] = 0
-        dti.minute[0] = 0
-        dti.second[0] = 0
-        dti.microsecond[0] = 0
+        self.assertEquals(dti.year[0], 1998)
+        self.assertEquals(dti.month[0], 1)
+        self.assertEquals(dti.day[0], 31)
+        self.assertEquals(dti.hour[0], 0)
+        self.assertEquals(dti.minute[0], 0)
+        self.assertEquals(dti.second[0], 0)
+        self.assertEquals(dti.microsecond[0], 0)
+        self.assertEquals(dti.dayofweek[0], 5)
+
+        self.assertEquals(dti.dayofyear[0], 31)
+        self.assertEquals(dti.dayofyear[1], 120) 
+
+        self.assertEquals(dti.weekofyear[0], 5)
+        self.assertEquals(dti.weekofyear[1], 18) 
+
+        self.assertEquals(dti.quarter[0], 1)
+        self.assertEquals(dti.quarter[1], 2)
 
         self.assertEquals(len(dti.year), 100)
         self.assertEquals(len(dti.month), 100)
@@ -222,6 +232,10 @@ class TestDatetime64(unittest.TestCase):
         self.assertEquals(len(dti.minute), 100)
         self.assertEquals(len(dti.second), 100)
         self.assertEquals(len(dti.microsecond), 100)
+        self.assertEquals(len(dti.dayofweek), 100)
+        self.assertEquals(len(dti.dayofyear), 100)
+        self.assertEquals(len(dti.weekofyear), 100)
+        self.assertEquals(len(dti.quarter), 100)
 
     def test_datetimeindex_diff(self):
         dti1 = DatetimeIndex(offset='Q@JAN', start=datetime(1997,12,31),
