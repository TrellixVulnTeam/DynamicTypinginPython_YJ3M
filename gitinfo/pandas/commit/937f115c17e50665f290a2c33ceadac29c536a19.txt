commit 937f115c17e50665f290a2c33ceadac29c536a19
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Aug 10 18:05:10 2012 -0400

    BUG: don't assume sortedness when performing tz_convert, close #1756

diff --git a/RELEASE.rst b/RELEASE.rst
index d676c9919..549f93a63 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -56,6 +56,7 @@ pandas 0.8.2
   - Don't lose tzinfo when passing DatetimeIndex as DataFrame column (#1682)
   - Fix tz conversion with time zones that haven't had any DST transitions since
     first date in the array (#1673)
+  - Fix field access with  UTC->local conversion on unsorted arrays (#1756)
 
 pandas 0.8.1
 ============
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 5afa00e1e..9869cf5c2 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -32,12 +32,11 @@ def _field_accessor(name, field):
         if self.tz is not None:
             utc = _utc()
             if self.tz is not utc:
-                values = lib.tz_convert(values, utc, self.tz)
+                values = self._local_timestamps()
         return lib.get_date_field(values, field)
     f.__name__ = name
     return property(f)
 
-
 def _join_i8_wrapper(joinf, with_indexers=True):
     @staticmethod
     def wrapper(left, right):
@@ -302,6 +301,21 @@ class DatetimeIndex(Int64Index):
 
         return index
 
+    def _local_timestamps(self):
+        utc = _utc()
+
+        if self.is_monotonic:
+            return lib.tz_convert(self.asi8, utc, self.tz)
+        else:
+            values = self.asi8
+            indexer = values.argsort()
+            result = lib.tz_convert(values.take(indexer), utc, self.tz)
+
+            n = len(indexer)
+            reverse = np.empty(n, dtype=np.int_)
+            reverse.put(indexer, np.arange(n))
+            return result.take(reverse)
+
     @classmethod
     def _simple_new(cls, values, name, freq=None, tz=None):
         result = values.view(cls)
@@ -531,19 +545,11 @@ class DatetimeIndex(Int64Index):
         # do not cache or you'll create a memory leak
         return self.values.view('i8')
 
-    # @property
-    # def asstruct(self):
-    #     utc = _utc()
-    #     values = self.asi8
-    #     if self.tz is not None and self.tz is not utc:
-    #         values = lib.tz_convert(values, utc, self.tz)
-    #     return lib.build_field_sarray(values)
-
     def _get_time_micros(self):
         utc = _utc()
         values = self.asi8
         if self.tz is not None and self.tz is not utc:
-            values = lib.tz_convert(values, utc, self.tz)
+            values = self._local_timestamps()
         return lib.get_time_micros(values)
 
     @property
diff --git a/pandas/tseries/tests/test_timezones.py b/pandas/tseries/tests/test_timezones.py
index 8c025b4e4..f8bdb3b3f 100644
--- a/pandas/tseries/tests/test_timezones.py
+++ b/pandas/tseries/tests/test_timezones.py
@@ -389,6 +389,14 @@ class TestTimeZoneSupport(unittest.TestCase):
         # it works!
         dr.hour
 
+    def test_tz_convert_unsorted(self):
+        dr = date_range('2012-03-09', freq='H', periods=100, tz='utc')
+        dr = dr.tz_convert('US/Eastern')
+
+        result = dr[::-1].hour
+        exp = dr.hour[::-1]
+        tm.assert_almost_equal(result, exp)
+
 class TestTimeZones(unittest.TestCase):
 
     def setUp(self):
