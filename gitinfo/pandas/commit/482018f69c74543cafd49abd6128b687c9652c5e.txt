commit 482018f69c74543cafd49abd6128b687c9652c5e
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Jul 3 16:39:48 2011 -0400

    made BlockManager.xs more generic to support nd

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 8dff83776..77e280bef 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -854,7 +854,7 @@ class DataFrame(PandasGeneric):
     # to support old APIs
     @property
     def _series(self):
-        return self._data.get_series_dict(self.index)
+        return self._data.get_series_dict()
 
     def xs(self, key, copy=True):
         """
@@ -873,7 +873,8 @@ class DataFrame(PandasGeneric):
 
         self._consolidate_inplace()
         loc = self.index.get_loc(key)
-        return self._data.xs(loc, axis=1, copy=copy)
+        values = self._data.xs(loc, axis=1, copy=copy)
+        return Series(values, index=self.columns)
 
     #----------------------------------------------------------------------
     # Reindexing
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index db63cd1b7..d51929102 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -6,7 +6,6 @@ import numpy as np
 
 from pandas.core.index import Index, NULL_INDEX
 from pandas.core.common import _ensure_index, _try_sort
-from pandas.core.series import Series
 import pandas.core.common as common
 import pandas._tseries as _tseries
 
@@ -356,8 +355,9 @@ class BlockManager(object):
             new_blocks.append(newb)
         return new_blocks
 
-    def get_series_dict(self, index):
-        return _blocks_to_series_dict(self.blocks, index)
+    def get_series_dict(self):
+        # For DataFrame
+        return _blocks_to_series_dict(self.blocks, self.axes[1])
 
     @classmethod
     def from_blocks(cls, blocks, index):
@@ -415,7 +415,7 @@ class BlockManager(object):
         return result
 
     def xs(self, i, axis=1, copy=True):
-        # TODO: fix this mess
+        from pandas.core.series import Series
 
         slicer = [slice(None, None) for _ in range(self.ndim)]
         slicer[axis] = i
@@ -426,15 +426,14 @@ class BlockManager(object):
                 raise Exception('cannot get view of mixed-type or '
                                 'non-consolidated DataFrame')
             vals = np.concatenate([b.values[slicer] for b in self.blocks])
-            items = np.concatenate([b.items for b in self.blocks])
-            xs = Series(vals, index=items).reindex(self.items)
+            items = Index(np.concatenate([b.items for b in self.blocks]))
+            indexer, _ = items.get_indexer(self.items)
+            vals = vals.take(indexer, axis=0)
         else:
             vals = self.blocks[0].values[slicer]
-            items = self.blocks[0].items
-            xs = Series(vals, items)
             if copy:
-                xs = xs.copy()
-        return xs
+                vals = vals.copy()
+        return vals
 
     def consolidate(self):
         """
@@ -723,6 +722,8 @@ def _stack_dict(dct):
     return items, stacked
 
 def _blocks_to_series_dict(blocks, index=None):
+    from pandas.core.series import Series
+
     series_dict = {}
 
     for block in blocks:
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 010cd4b0f..75dbcad0a 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -402,10 +402,12 @@ class WidePanel(Panel, PandasGeneric):
         _unpickle = common._unpickle_array
         vals, items, major, minor = state
 
-        self.items = _unpickle(items)
-        self.major_axis = _unpickle(major)
-        self.minor_axis = _unpickle(minor)
-        self.values = _unpickle(vals)
+        items = _unpickle(items)
+        major = _unpickle(major)
+        minor = _unpickle(minor)
+        values = _unpickle(vals)
+        wp = WidePanel(values, items, major, minor)
+        self._data = wp._data
 
     def conform(self, frame, axis='items'):
         """
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index ece091a26..8020b9bdf 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1436,6 +1436,17 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         self.assertRaises(Exception, self.tsframe.xs,
                           self.tsframe.index[0] - datetools.bday)
 
+        # pathological mixed-type reordering case
+        df = DataFrame(index=[0])
+        df['A'] = 1.
+        df['B'] = 'foo'
+        df['C'] = 2.
+        df['D'] = 'bar'
+        df['E'] = 3.
+
+        xs = df.xs(0)
+        assert_almost_equal(xs, [1., 'foo', 2., 'bar', 3.])
+
     def test_pivot(self):
         data = {
             'index' : ['A', 'B', 'C', 'C', 'B', 'A'],
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 1da16aae4..db4cd650c 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -316,7 +316,7 @@ class TestWidePanel(unittest.TestCase, PanelTests,
         values = self.panel.values
         self.panel.values = values
 
-    def test_fromDict(self):
+    def test_from_dict(self):
         itema = self.panel['ItemA']
         itemb = self.panel['ItemB']
 
@@ -325,16 +325,19 @@ class TestWidePanel(unittest.TestCase, PanelTests,
         d3 = {'A' : DataFrame(itema._series),
               'B' : DataFrame(itemb[5:]._series)}
 
-        wp = WidePanel.fromDict(d)
-        wp2 = WidePanel.fromDict(d2) # nested Dict
-        wp3 = WidePanel.fromDict(d3)
+        wp = WidePanel.from_dict(d)
+        wp2 = WidePanel.from_dict(d2) # nested Dict
+        wp3 = WidePanel.from_dict(d3)
         self.assert_(wp.major_axis.equals(self.panel.major_axis))
         assert_panel_equal(wp, wp2)
 
         # intersect
-        wp = WidePanel.fromDict(d, intersect=True)
+        wp = WidePanel.from_dict(d, intersect=True)
         self.assert_(wp.major_axis.equals(itemb.index[5:]))
 
+    def test_from_dict_mixed(self):
+        pass
+
     def test_values(self):
         self.assertRaises(Exception, WidePanel, np.random.randn(5, 5, 5),
                           range(5), range(5), range(4))
