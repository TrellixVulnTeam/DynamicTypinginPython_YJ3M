commit d9ea01f8d4371a2f009d540136b7ee709fc3c24a
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Oct 19 17:05:10 2011 -0400

    BUG: allow casting DataFrame float column to int, GH #252

diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index e3dc1e296..05a5526bb 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -171,21 +171,35 @@ class Block(object):
 
 class FloatBlock(Block):
 
+    def should_store(self, value):
+        # when inserting a column should not coerce integers to floats
+        # unnecessarily
+        return issubclass(value.dtype.type, np.floating)
+
     def can_store(self, value):
         return issubclass(value.dtype.type, (np.integer, np.floating))
 
 class IntBlock(Block):
 
+    def should_store(self, value):
+        return self.can_store(value)
+
     def can_store(self, value):
         return issubclass(value.dtype.type, np.integer)
 
 class BoolBlock(Block):
 
+    def should_store(self, value):
+        return self.can_store(value)
+
     def can_store(self, value):
         return issubclass(value.dtype.type, np.bool_)
 
 class ObjectBlock(Block):
 
+    def should_store(self, value):
+        return self.can_store(value)
+
     def can_store(self, value):
         return not issubclass(value.dtype.type,
                               (np.integer, np.floating, np.bool_))
@@ -534,7 +548,7 @@ class BlockManager(object):
         assert(value.shape[1:] == self.shape[1:])
         if item in self.items:
             i, block = self._find_block(item)
-            if not block.can_store(value):
+            if not block.should_store(value):
                 # delete from block, create and append new block
                 self._delete_from_block(i, item)
                 self._add_new_block(item, value)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 85d2aa432..5aa040d60 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -160,6 +160,10 @@ class CheckIndexing(object):
         np.putmask(expected.values, mask.values, df.values * 2)
         assert_frame_equal(df, expected)
 
+    def test_setitem_cast(self):
+        self.frame['D'] = self.frame['D'].astype('i8')
+        self.assert_(self.frame['D'].dtype == np.int64)
+
     def test_setitem_boolean_column(self):
         expected = self.frame.copy()
         mask = self.frame['A'] > 0
@@ -284,8 +288,8 @@ class CheckIndexing(object):
         frame = self.frame.copy()
         expected = frame.copy()
         frame.ix[:, ['B', 'A']] = 1
-        expected['B'] = 1
-        expected['A'] = 1
+        expected['B'] = 1.
+        expected['A'] = 1.
         assert_frame_equal(frame, expected)
 
         # case 2
@@ -370,7 +374,7 @@ class CheckIndexing(object):
 
         # get view with single block
         sliced = self.frame.ix[:, -3:]
-        sliced['C'] = 4
+        sliced['C'] = 4.
         self.assert_((self.frame['C'] == 4).all())
 
     def test_fancy_setitem_int_labels(self):
