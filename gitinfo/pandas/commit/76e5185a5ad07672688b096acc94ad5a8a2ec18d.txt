commit 76e5185a5ad07672688b096acc94ad5a8a2ec18d
Author: Yimeng Zhang <zym1010@gmail.com>
Date:   Wed Mar 15 09:26:37 2017 -0400

    compatibility with scipy 0.19
    
    fix #15662
    
    Author: Yimeng Zhang <zym1010@gmail.com>
    
    Closes #15689 from zym1010/fix_scipy019 and squashes the following commits:
    
    3cc6528 [Yimeng Zhang] doc and PEP8
    9ed7524 [Yimeng Zhang] fix interpolation related issue with scipy 0.19
    ca09705 [Yimeng Zhang] get symmetric window

diff --git a/doc/source/whatsnew/v0.20.0.txt b/doc/source/whatsnew/v0.20.0.txt
index 9c6f5d3e0..2a6c8a1e2 100644
--- a/doc/source/whatsnew/v0.20.0.txt
+++ b/doc/source/whatsnew/v0.20.0.txt
@@ -816,6 +816,7 @@ Bug Fixes
 - Bug in ``Rolling.quantile`` function that caused a segmentation fault when called with a quantile value outside of the range [0, 1] (:issue:`15463`)
 - Bug in ``pd.cut()`` with a single bin on an all 0s array (:issue:`15428`)
 - Bug in ``pd.qcut()`` with a single quantile and an array with identical values (:issue:`15431`)
+- Compat with SciPy 0.19.0 for testing on ``.interpolate()`` (:issue:`15662`)
 
 
 - Bug in the display of ``.info()`` where a qualifier (+) would always be displayed with a ``MultiIndex`` that contains only non-strings (:issue:`15245`)
diff --git a/pandas/core/window.py b/pandas/core/window.py
index 6fda60c44..9c9f86145 100644
--- a/pandas/core/window.py
+++ b/pandas/core/window.py
@@ -544,7 +544,8 @@ class Window(_Window):
                 return all_args
 
             win_type = _validate_win_type(self.win_type, kwargs)
-            return sig.get_window(win_type, window).astype(float)
+            # GH #15662. `False` makes symmetric window, rather than periodic.
+            return sig.get_window(win_type, window, False).astype(float)
 
     def _apply_window(self, mean=True, how=None, **kwargs):
         """
diff --git a/pandas/tests/frame/test_missing.py b/pandas/tests/frame/test_missing.py
index 923ed2e7c..93c3ba78a 100644
--- a/pandas/tests/frame/test_missing.py
+++ b/pandas/tests/frame/test_missing.py
@@ -19,6 +19,13 @@ import pandas.util.testing as tm
 from pandas.tests.frame.common import TestData, _check_mixed_float
 
 
+try:
+    import scipy
+    _is_scipy_ge_0190 = scipy.__version__ >= LooseVersion('0.19.0')
+except:
+    _is_scipy_ge_0190 = False
+
+
 def _skip_if_no_pchip():
     try:
         from scipy.interpolate import pchip_interpolate  # noqa
@@ -548,7 +555,7 @@ class TestDataFrameInterpolate(tm.TestCase, TestData):
             df.interpolate(method='values')
 
     def test_interp_various(self):
-        tm.skip_if_no_package('scipy', max_version='0.19.0')
+        tm._skip_if_no_scipy()
 
         df = DataFrame({'A': [1, 2, np.nan, 4, 5, np.nan, 7],
                         'C': [1, 2, 3, 5, 8, 13, 21]})
@@ -561,8 +568,15 @@ class TestDataFrameInterpolate(tm.TestCase, TestData):
         assert_frame_equal(result, expected)
 
         result = df.interpolate(method='cubic')
-        expected.A.loc[3] = 2.81621174
-        expected.A.loc[13] = 5.64146581
+        # GH #15662.
+        # new cubic and quadratic interpolation algorithms from scipy 0.19.0.
+        # previously `splmake` was used. See scipy/scipy#6710
+        if _is_scipy_ge_0190:
+            expected.A.loc[3] = 2.81547781
+            expected.A.loc[13] = 5.52964175
+        else:
+            expected.A.loc[3] = 2.81621174
+            expected.A.loc[13] = 5.64146581
         assert_frame_equal(result, expected)
 
         result = df.interpolate(method='nearest')
@@ -571,8 +585,12 @@ class TestDataFrameInterpolate(tm.TestCase, TestData):
         assert_frame_equal(result, expected, check_dtype=False)
 
         result = df.interpolate(method='quadratic')
-        expected.A.loc[3] = 2.82533638
-        expected.A.loc[13] = 6.02817974
+        if _is_scipy_ge_0190:
+            expected.A.loc[3] = 2.82150771
+            expected.A.loc[13] = 6.12648668
+        else:
+            expected.A.loc[3] = 2.82533638
+            expected.A.loc[13] = 6.02817974
         assert_frame_equal(result, expected)
 
         result = df.interpolate(method='slinear')
@@ -585,11 +603,6 @@ class TestDataFrameInterpolate(tm.TestCase, TestData):
         expected.A.loc[13] = 5
         assert_frame_equal(result, expected, check_dtype=False)
 
-        result = df.interpolate(method='quadratic')
-        expected.A.loc[3] = 2.82533638
-        expected.A.loc[13] = 6.02817974
-        assert_frame_equal(result, expected)
-
     def test_interp_alt_scipy(self):
         tm._skip_if_no_scipy()
         df = DataFrame({'A': [1, 2, np.nan, 4, 5, np.nan, 7],
diff --git a/pandas/tests/series/test_missing.py b/pandas/tests/series/test_missing.py
index 9e997da51..717428349 100644
--- a/pandas/tests/series/test_missing.py
+++ b/pandas/tests/series/test_missing.py
@@ -4,6 +4,7 @@
 import pytz
 from datetime import timedelta, datetime
 
+from distutils.version import LooseVersion
 from numpy import nan
 import numpy as np
 import pandas as pd
@@ -17,6 +18,12 @@ import pandas.util.testing as tm
 
 from .common import TestData
 
+try:
+    import scipy
+    _is_scipy_ge_0190 = scipy.__version__ >= LooseVersion('0.19.0')
+except:
+    _is_scipy_ge_0190 = False
+
 
 def _skip_if_no_pchip():
     try:
@@ -827,7 +834,7 @@ class TestSeriesInterpolateData(TestData, tm.TestCase):
         assert_series_equal(result, expected)
 
     def test_interp_scipy_basic(self):
-        tm.skip_if_no_package('scipy', max_version='0.19.0')
+        tm._skip_if_no_scipy()
 
         s = Series([1, 3, np.nan, 12, np.nan, 25])
         # slinear
@@ -852,7 +859,13 @@ class TestSeriesInterpolateData(TestData, tm.TestCase):
         result = s.interpolate(method='zero', downcast='infer')
         assert_series_equal(result, expected)
         # quadratic
-        expected = Series([1, 3., 6.769231, 12., 18.230769, 25.])
+        # GH #15662.
+        # new cubic and quadratic interpolation algorithms from scipy 0.19.0.
+        # previously `splmake` was used. See scipy/scipy#6710
+        if _is_scipy_ge_0190:
+            expected = Series([1, 3., 6.823529, 12., 18.058824, 25.])
+        else:
+            expected = Series([1, 3., 6.769231, 12., 18.230769, 25.])
         result = s.interpolate(method='quadratic')
         assert_series_equal(result, expected)
 
diff --git a/pandas/tests/test_window.py b/pandas/tests/test_window.py
index b7164d31b..3f2973a98 100644
--- a/pandas/tests/test_window.py
+++ b/pandas/tests/test_window.py
@@ -905,7 +905,7 @@ class TestMoments(Base):
 
     def test_cmov_window_regular(self):
         # GH 8238
-        tm.skip_if_no_package('scipy', max_version='0.19.0')
+        tm._skip_if_no_scipy()
 
         win_types = ['triang', 'blackman', 'hamming', 'bartlett', 'bohman',
                      'blackmanharris', 'nuttall', 'barthann']
@@ -938,7 +938,7 @@ class TestMoments(Base):
 
     def test_cmov_window_regular_linear_range(self):
         # GH 8238
-        tm.skip_if_no_package('scipy', max_version='0.19.0')
+        tm._skip_if_no_scipy()
 
         win_types = ['triang', 'blackman', 'hamming', 'bartlett', 'bohman',
                      'blackmanharris', 'nuttall', 'barthann']
@@ -955,7 +955,7 @@ class TestMoments(Base):
 
     def test_cmov_window_regular_missing_data(self):
         # GH 8238
-        tm.skip_if_no_package('scipy', max_version='0.19.0')
+        tm._skip_if_no_scipy()
 
         win_types = ['triang', 'blackman', 'hamming', 'bartlett', 'bohman',
                      'blackmanharris', 'nuttall', 'barthann']
@@ -988,7 +988,7 @@ class TestMoments(Base):
 
     def test_cmov_window_special(self):
         # GH 8238
-        tm.skip_if_no_package('scipy', max_version='0.19.0')
+        tm._skip_if_no_scipy()
 
         win_types = ['kaiser', 'gaussian', 'general_gaussian', 'slepian']
         kwds = [{'beta': 1.}, {'std': 1.}, {'power': 2.,
@@ -1015,7 +1015,7 @@ class TestMoments(Base):
 
     def test_cmov_window_special_linear_range(self):
         # GH 8238
-        tm.skip_if_no_package('scipy', max_version='0.19.0')
+        tm._skip_if_no_scipy()
 
         win_types = ['kaiser', 'gaussian', 'general_gaussian', 'slepian']
         kwds = [{'beta': 1.}, {'std': 1.}, {'power': 2.,
