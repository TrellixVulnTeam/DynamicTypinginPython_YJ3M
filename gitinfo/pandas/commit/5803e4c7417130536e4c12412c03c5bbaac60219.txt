commit 5803e4c7417130536e4c12412c03c5bbaac60219
Author: Sebastian Rubbert <S.H.P.Rubbert@tudelft.nl>
Date:   Sun Aug 30 14:12:49 2015 +0200

    consistent imports in text.rst
    
    consistent imports in sparse.rst
    
    consistent imports in release.rst

diff --git a/doc/source/release.rst b/doc/source/release.rst
index 2b5a5d28c..9580f90c2 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -5,21 +5,13 @@
 .. ipython:: python
    :suppress:
 
-   import os
-   import csv
-   from pandas.compat import StringIO
    import pandas as pd
-   ExcelWriter = pd.ExcelWriter
-
    import numpy as np
    np.random.seed(123456)
-   randn = np.random.randn
    np.set_printoptions(precision=4, suppress=True)
-
    import matplotlib.pyplot as plt
    plt.close('all')
 
-   from pandas import *
    options.display.max_rows=15
    import pandas.util.testing as tm
 
@@ -1998,9 +1990,9 @@ Improvements to existing features
 
   .. ipython:: python
 
-     p = Panel(randn(3,4,4),items=['ItemA','ItemB','ItemC'],
-                        major_axis=date_range('20010102',periods=4),
-                        minor_axis=['A','B','C','D'])
+     p = pd.Panel(np.random.randn(3,4,4),items=['ItemA','ItemB','ItemC'],
+                  major_axis=pd.date_range('20010102',periods=4),
+                  minor_axis=['A','B','C','D'])
      p
      p.reindex(items=['ItemA']).squeeze()
      p.reindex(items=['ItemA'],minor=['B']).squeeze()
@@ -2016,11 +2008,11 @@ Improvements to existing features
 
   .. ipython:: python
 
-      idx = date_range("2001-10-1", periods=5, freq='M')
-      ts = Series(np.random.rand(len(idx)),index=idx)
+      idx = pd.date_range("2001-10-1", periods=5, freq='M')
+      ts = pd.Series(np.random.rand(len(idx)),index=idx)
       ts['2001']
 
-      df = DataFrame(dict(A = ts))
+      df = pd.DataFrame(dict(A = ts))
       df['2001']
 
 - added option `display.mpl_style` providing a sleeker visual style for plots. Based on https://gist.github.com/huyng/816622 (:issue:`3075`).
diff --git a/doc/source/sparse.rst b/doc/source/sparse.rst
index 79def066f..257fb2909 100644
--- a/doc/source/sparse.rst
+++ b/doc/source/sparse.rst
@@ -6,9 +6,8 @@
 
    import numpy as np
    np.random.seed(123456)
-   from pandas import *
+   import pandas as pd
    import pandas.util.testing as tm
-   randn = np.random.randn
    np.set_printoptions(precision=4, suppress=True)
    options.display.max_rows = 15
 
@@ -26,7 +25,7 @@ method:
 
 .. ipython:: python
 
-   ts = Series(randn(10))
+   ts = pd.Series(randn(10))
    ts[2:-2] = np.nan
    sts = ts.to_sparse()
    sts
@@ -44,7 +43,7 @@ large, mostly NA DataFrame:
 
 .. ipython:: python
 
-   df = DataFrame(randn(10000, 4))
+   df = pd.DataFrame(randn(10000, 4))
    df.ix[:9998] = np.nan
    sdf = df.to_sparse()
    sdf
@@ -75,7 +74,7 @@ distinct from the ``fill_value``:
 
    arr = np.random.randn(10)
    arr[2:5] = np.nan; arr[7:8] = np.nan
-   sparr = SparseArray(arr)
+   sparr = pd.SparseArray(arr)
    sparr
 
 Like the indexed objects (SparseSeries, SparseDataFrame, SparsePanel), a
@@ -97,7 +96,7 @@ a ``fill_value`` (defaulting to ``NaN``):
 
 .. ipython:: python
 
-   spl = SparseList()
+   spl = pd.SparseList()
    spl
 
 The two important methods are ``append`` and ``to_array``. ``append`` can
@@ -108,8 +107,7 @@ accept scalar values or any 1-dimensional sequence:
 
 .. ipython:: python
 
-   from numpy import nan
-   spl.append(np.array([1., nan, nan, 2., 3.]))
+   spl.append(np.array([1., np.nan, np.nan, 2., 3.]))
    spl.append(5)
    spl.append(sparr)
    spl
@@ -149,15 +147,14 @@ The method requires a ``MultiIndex`` with two or more levels.
 
 .. ipython:: python
 
-   from numpy import nan
-   s = Series([3.0, nan, 1.0, 3.0, nan, nan])
-   s.index = MultiIndex.from_tuples([(1, 2, 'a', 0),
-                                     (1, 2, 'a', 1),
-                                     (1, 1, 'b', 0),
-                                     (1, 1, 'b', 1),
-                                     (2, 1, 'b', 0),
-                                     (2, 1, 'b', 1)],
-                                     names=['A', 'B', 'C', 'D'])
+   s = pd.Series([3.0, np.nan, 1.0, 3.0, np.nan, np.nan])
+   s.index = pd.MultiIndex.from_tuples([(1, 2, 'a', 0),
+                                        (1, 2, 'a', 1),
+                                        (1, 1, 'b', 0),
+                                        (1, 1, 'b', 1),
+                                        (2, 1, 'b', 0),
+                                        (2, 1, 'b', 1)],
+                                        names=['A', 'B', 'C', 'D'])
 
    s
    # SparseSeries
@@ -199,7 +196,7 @@ A convenience method :meth:`SparseSeries.from_coo` is implemented for creating a
 
    from scipy import sparse
    A = sparse.coo_matrix(([3.0, 1.0, 2.0], ([1, 0, 0], [0, 2, 3])),
-                               shape=(3, 4))
+                         shape=(3, 4))
    A
    A.todense()
 
@@ -208,7 +205,7 @@ only the non-null entries.
 
 .. ipython:: python
 
-   ss = SparseSeries.from_coo(A)
+   ss = pd.SparseSeries.from_coo(A)
    ss
 
 Specifying ``dense_index=True`` will result in an index that is the Cartesian product of the
@@ -217,5 +214,5 @@ row and columns coordinates of the matrix. Note that this will consume a signifi
 
 .. ipython:: python
 
-   ss_dense = SparseSeries.from_coo(A, dense_index=True)
+   ss_dense = pd.SparseSeries.from_coo(A, dense_index=True)
    ss_dense
diff --git a/doc/source/text.rst b/doc/source/text.rst
index 9bbb152f5..ee4f96b41 100644
--- a/doc/source/text.rst
+++ b/doc/source/text.rst
@@ -5,7 +5,7 @@
    :suppress:
 
    import numpy as np
-   from pandas import *
+   import pandas as pd
    randn = np.random.randn
    np.set_printoptions(precision=4, suppress=True)
    from pandas.compat import lrange
@@ -25,14 +25,14 @@ the equivalent (scalar) built-in string methods:
 
 .. ipython:: python
 
-   s = Series(['A', 'B', 'C', 'Aaba', 'Baca', np.nan, 'CABA', 'dog', 'cat'])
+   s = pd.Series(['A', 'B', 'C', 'Aaba', 'Baca', np.nan, 'CABA', 'dog', 'cat'])
    s.str.lower()
    s.str.upper()
    s.str.len()
 
 .. ipython:: python
 
-   idx = Index([' jack', 'jill ', ' jesse ', 'frank'])
+   idx = pd.Index([' jack', 'jill ', ' jesse ', 'frank'])
    idx.str.strip()
    idx.str.lstrip()
    idx.str.rstrip()
@@ -43,8 +43,8 @@ leading or trailing whitespace:
 
 .. ipython:: python
 
-   df = DataFrame(randn(3, 2), columns=[' Column A ', ' Column B '],
-                  index=range(3))
+   df = pd.DataFrame(randn(3, 2), columns=[' Column A ', ' Column B '],
+                     index=range(3))
    df
 
 Since ``df.columns`` is an Index object, we can use the ``.str`` accessor
@@ -72,7 +72,7 @@ Methods like ``split`` return a Series of lists:
 
 .. ipython:: python
 
-   s2 = Series(['a_b_c', 'c_d_e', np.nan, 'f_g_h'])
+   s2 = pd.Series(['a_b_c', 'c_d_e', np.nan, 'f_g_h'])
    s2.str.split('_')
 
 Elements in the split lists can be accessed using ``get`` or ``[]`` notation:
@@ -106,8 +106,8 @@ Methods like ``replace`` and ``findall`` take `regular expressions
 
 .. ipython:: python
 
-   s3 = Series(['A', 'B', 'C', 'Aaba', 'Baca',
-               '', np.nan, 'CABA', 'dog', 'cat'])
+   s3 = pd.Series(['A', 'B', 'C', 'Aaba', 'Baca',
+                  '', np.nan, 'CABA', 'dog', 'cat'])
    s3
    s3.str.replace('^.a|dog', 'XX-XX ', case=False)
 
@@ -118,7 +118,7 @@ following code will cause trouble because of the regular expression meaning of
 .. ipython:: python
 
    # Consider the following badly formatted financial data
-   dollars = Series(['12', '-$10', '$10,000'])
+   dollars = pd.Series(['12', '-$10', '$10,000'])
 
    # This does what you'd naively expect:
    dollars.str.replace('$', '')
@@ -140,8 +140,8 @@ of the string, the result will be a ``NaN``.
 
 .. ipython:: python
 
-   s = Series(['A', 'B', 'C', 'Aaba', 'Baca', np.nan,
-               'CABA', 'dog', 'cat'])
+   s = pd.Series(['A', 'B', 'C', 'Aaba', 'Baca', np.nan,
+                  'CABA', 'dog', 'cat'])
 
    s.str[0]
    s.str[1]
@@ -157,14 +157,14 @@ regular expression with one group returns a Series of strings.
 
 .. ipython:: python
 
-   Series(['a1', 'b2', 'c3']).str.extract('[ab](\d)')
+   pd.Series(['a1', 'b2', 'c3']).str.extract('[ab](\d)')
 
 Elements that do not match return ``NaN``. Extracting a regular expression
 with more than one group returns a DataFrame with one column per group.
 
 .. ipython:: python
 
-   Series(['a1', 'b2', 'c3']).str.extract('([ab])(\d)')
+   pd.Series(['a1', 'b2', 'c3']).str.extract('([ab])(\d)')
 
 Elements that do not match return a row filled with ``NaN``.
 Thus, a Series of messy strings can be "converted" into a
@@ -178,13 +178,13 @@ Named groups like
 
 .. ipython:: python
 
-   Series(['a1', 'b2', 'c3']).str.extract('(?P<letter>[ab])(?P<digit>\d)')
+   pd.Series(['a1', 'b2', 'c3']).str.extract('(?P<letter>[ab])(?P<digit>\d)')
 
 and optional groups like
 
 .. ipython:: python
 
-   Series(['a1', 'b2', '3']).str.extract('(?P<letter>[ab])?(?P<digit>\d)')
+   pd.Series(['a1', 'b2', '3']).str.extract('(?P<letter>[ab])?(?P<digit>\d)')
 
 can also be used.
 
@@ -196,14 +196,14 @@ You can check whether elements contain a pattern:
 .. ipython:: python
 
    pattern = r'[a-z][0-9]'
-   Series(['1', '2', '3a', '3b', '03c']).str.contains(pattern)
+   pd.Series(['1', '2', '3a', '3b', '03c']).str.contains(pattern)
 
 or match a pattern:
 
 
 .. ipython:: python
 
-   Series(['1', '2', '3a', '3b', '03c']).str.match(pattern, as_indexer=True)
+   pd.Series(['1', '2', '3a', '3b', '03c']).str.match(pattern, as_indexer=True)
 
 The distinction between ``match`` and ``contains`` is strictness: ``match``
 relies on strict ``re.match``, while ``contains`` relies on ``re.search``.
@@ -225,7 +225,7 @@ Methods like ``match``, ``contains``, ``startswith``, and ``endswith`` take
 
 .. ipython:: python
 
-   s4 = Series(['A', 'B', 'C', 'Aaba', 'Baca', np.nan, 'CABA', 'dog', 'cat'])
+   s4 = pd.Series(['A', 'B', 'C', 'Aaba', 'Baca', np.nan, 'CABA', 'dog', 'cat'])
    s4.str.contains('A', na=False)
 
 Creating Indicator Variables
@@ -236,7 +236,7 @@ For example if they are separated by a ``'|'``:
 
   .. ipython:: python
 
-      s = Series(['a', 'a|b', np.nan, 'a|c'])
+      s = pd.Series(['a', 'a|b', np.nan, 'a|c'])
       s.str.get_dummies(sep='|')
 
 See also :func:`~pandas.get_dummies`.
