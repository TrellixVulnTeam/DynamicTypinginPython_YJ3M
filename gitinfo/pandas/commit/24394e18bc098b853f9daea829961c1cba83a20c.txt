commit 24394e18bc098b853f9daea829961c1cba83a20c
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Dec 15 23:43:15 2012 -0500

    BUG: fix panel bin-grouping aggregation with custom functions. close #2537

diff --git a/RELEASE.rst b/RELEASE.rst
index 3ef165f50..1a0b87627 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -236,6 +236,7 @@ pandas 0.10.0
   - Fix several DataFrame.icol/irow with duplicate indices issues (GH2228_, GH2259_)
   - Use Series names for column names when using concat with axis=1 (GH2489_)
   - Raise Exception if start, end, periods all passed to date_range (GH2538_)
+  - Fix Panel resampling issue (GH2537_)
 
 .. _GH407: https://github.com/pydata/pandas/issues/407
 .. _GH821: https://github.com/pydata/pandas/issues/821
@@ -356,6 +357,7 @@ pandas 0.10.0
 .. _GH2259: https://github.com/pydata/pandas/issues/2259
 .. _GH2489: https://github.com/pydata/pandas/issues/2489
 .. _GH2538: https://github.com/pydata/pandas/issues/2538
+.. _GH2537: https://github.com/pydata/pandas/issues/2537
 
 
 pandas 0.9.1
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index c6a591ade..c75e468cf 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -942,16 +942,26 @@ class BinGrouper(Grouper):
         Generator yielding sequence of (name, subsetted object)
         for each group
         """
-        if axis == 1:
-            raise NotImplementedError
+        if axis == 0:
+            start = 0
+            for edge, label in izip(self.bins, self.binlabels):
+                yield label, data[start:edge]
+                start = edge
+
+            if edge < len(data):
+                yield self.binlabels[-1], data[edge:]
+        else:
+            start = 0
+            for edge, label in izip(self.bins, self.binlabels):
+                inds = range(start, edge)
+                yield label, data.take(inds, axis=axis)
+                start = edge
 
-        start = 0
-        for edge, label in izip(self.bins, self.binlabels):
-            yield label, data[start:edge]
-            start = edge
+            n = len(data.axes[axis])
+            if edge < n:
+                inds = range(edge, n)
+                yield self.binlabels[-1], data.take(inds, axis=axis)
 
-        if edge < len(data):
-            yield self.binlabels[-1], data[edge:]
 
     def apply(self, f, data, axis=0, keep_internal=False):
         result_keys = []
@@ -1652,8 +1662,9 @@ class NDFrameGroupBy(GroupBy):
         result = {}
         if axis != obj._het_axis:
             try:
-                for name in self.indices:
-                    data = self.get_group(name, obj=obj)
+                for name, data in self:
+                    # for name in self.indices:
+                    #     data = self.get_group(name, obj=obj)
                     result[name] = func(data, *args, **kwargs)
             except Exception:
                 return self._aggregate_item_by_item(func, *args, **kwargs)
@@ -1993,13 +2004,22 @@ class PanelGroupBy(NDFrameGroupBy):
         return self._aggregate_generic(arg, *args, **kwargs)
 
     def _wrap_generic_output(self, result, obj):
-        new_axes = list(obj.axes)
-        new_axes[self.axis] = self.grouper.result_index
+        if self.axis == 0:
+            new_axes = list(obj.axes)
+            new_axes[0] = self.grouper.result_index
+        elif self.axis == 1:
+            x, y, z = obj.axes
+            new_axes = [self.grouper.result_index, z, x]
+        else:
+            x, y, z = obj.axes
+            new_axes = [self.grouper.result_index, y, x]
 
         result = Panel._from_axes(result, new_axes)
 
-        if self.axis > 0:
-            result = result.swapaxes(0, self.axis)
+        if self.axis == 1:
+            result = result.swapaxes(0, 1).swapaxes(0, 2)
+        elif self.axis == 2:
+            result = result.swapaxes(0, 2)
 
         return result
 
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 35578421b..eff481bb9 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1156,7 +1156,7 @@ class Index(np.ndarray):
         -------
         new_index : Index
         """
-        arr = np.delete(np.asarray(self), loc)
+        arr = np.delete(self.values, loc)
         return Index(arr)
 
     def insert(self, loc, item):
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index a4e393699..1cd713130 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -27,8 +27,13 @@ class Block(object):
         if values.ndim != ndim:
             raise AssertionError('Wrong number of dimensions')
 
-        if len(items) != len(values):
-            raise AssertionError('Wrong number of items passed')
+        nitems = len(items)
+        nvalues = len(values)
+        if nitems != nvalues:
+            import pdb
+            pdb.set_trace()
+            raise AssertionError('Wrong number of items passed (%d vs %d)'
+                                 % (len(items), len(values)))
 
         self._ref_locs = None
         self.values = values
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 9805da28d..15bdc5669 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -283,8 +283,9 @@ class Panel(NDFrame):
                 data[k] = self._constructor_sliced(v)
 
         # extract axis for remaining axes & create the slicemap
-        raxes      = [ self._extract_axis(self, data, axis=i) if a is None else a for i, a in enumerate(axes) ]
-        raxes_sm   = self._extract_axes_for_slice(self, raxes)
+        raxes = [self._extract_axis(self, data, axis=i)
+                 if a is None else a for i, a in enumerate(axes)]
+        raxes_sm = self._extract_axes_for_slice(self, raxes)
 
         # shallow copy
         arrays = []
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index 0722e4368..af28b2e6b 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -371,10 +371,15 @@ class TestResample(unittest.TestCase):
                       major_axis=rng,
                       minor_axis=['a', 'b', 'c', 'd', 'e'])
 
-        result = panel.resample('M', how=lambda x: x.mean(), axis=1)
+        result = panel.resample('M', how=lambda x: x.mean(1), axis=1)
         expected = panel.resample('M', how='mean', axis=1)
         tm.assert_panel_equal(result, expected)
 
+        panel = panel.swapaxes(1, 2)
+        result = panel.resample('M', how=lambda x: x.mean(2), axis=2)
+        expected = panel.resample('M', how='mean', axis=2)
+        tm.assert_panel_equal(result, expected)
+
     def test_resample_anchored_ticks(self):
         # If a fixed delta (5 minute, 4 hour) evenly divides a day, we should
         # "anchor" the origin at midnight so we get regular intervals rather
@@ -1013,7 +1018,24 @@ class TestTimeGrouper(unittest.TestCase):
         result = grouped.apply(f)
         self.assertTrue(result.index.equals(df.index))
 
+    def test_panel_aggregation(self):
+        ind = pd.date_range('1/1/2000', periods=100)
+        data = np.random.randn(2,len(ind),4)
+        wp = pd.Panel(data, items=['Item1', 'Item2'], major_axis=ind,
+                      minor_axis=['A', 'B', 'C', 'D'])
+
+        tg = TimeGrouper('M', axis=1)
+        grouper = tg.get_grouper(wp)
+        bingrouped = wp.groupby(grouper)
+        binagg = bingrouped.mean()
+
+        def f(x):
+            assert(isinstance(x, Panel))
+            return x.mean(1)
+        result = bingrouped.agg(f)
+        tm.assert_panel_equal(result, binagg)
+
+
 if __name__ == '__main__':
-    nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure',
-                         '--with-timer'],
+    nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
                    exit=False)
