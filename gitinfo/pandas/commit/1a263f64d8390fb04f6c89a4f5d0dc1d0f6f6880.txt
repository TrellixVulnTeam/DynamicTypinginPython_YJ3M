commit 1a263f64d8390fb04f6c89a4f5d0dc1d0f6f6880
Author: Adam Klein <adamklein@gmail.com>
Date:   Mon Mar 5 17:52:35 2012 -0500

    ENH: add vectorized datetimeindex construction from string array

diff --git a/pandas/core/datetools.py b/pandas/core/datetools.py
index 4a1f7c531..d7fd49923 100644
--- a/pandas/core/datetools.py
+++ b/pandas/core/datetools.py
@@ -62,8 +62,11 @@ def _dt_unbox_array(arr):
     return unboxer(arr)
 
 def _from_string_array(arr):
-    from dateutil import parser
-    p_ufunc = np.frompyfunc(lambda x: parser.parse(x), 1, 1)
+    def parser(x):
+        result = parse_time_string(x)
+        return result[0]
+
+    p_ufunc = np.frompyfunc(parser, 1, 1)
     data = p_ufunc(arr)
     return np.array(data, dtype='M8[us]')
 
@@ -116,6 +119,9 @@ def parse_time_string(arg):
         parsed = _dtparser._parse(arg)
         default = datetime.now().replace(hour=0, minute=0,
                                          second=0, microsecond=0)
+        if parsed is None:
+            raise DateParseError("Could not parse %s" % arg)
+
         repl = {}
         reso = 'year'
         stopped = False
@@ -126,12 +132,14 @@ def parse_time_string(arg):
                 repl[attr] = value
                 if not stopped:
                     reso = attr
+                else:
+                    raise DateParseError("Missing attribute before %s", attr)
             else:
                 stopped = True
         ret = default.replace(**repl)
         return ret, parsed, reso  # datetime, partial parse, resolution
-    except Exception:
-        raise DateParseError
+    except Exception, e:
+        raise DateParseError(e)
 
 def to_datetime(arg):
     """Attempts to convert arg to datetime"""
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 791cf9cd5..431b57356 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1217,12 +1217,13 @@ class DatetimeIndex(Int64Index):
             if not isinstance(data, (list, tuple)):
                 data = list(data)
 
-            # try to make it datetime64
-            try:
+            data = np.asarray(data, dtype='O')
+
+            # try a few ways to make it datetime64
+            if lib.is_string_array(data):
+                data = datetools._from_string_array(data)
+            else:
                 data = np.asarray(data, dtype='M8[us]')
-            except ValueError:
-                data = np.asarray(data, dtype='O')
-                data = np.asarray(_dt_unbox_array(data), dtype='M8[us]')
 
         if issubclass(data.dtype.type, basestring):
             subarr = datetools._from_string_array(data)
diff --git a/pandas/tests/test_datetime64.py b/pandas/tests/test_datetime64.py
index 08eb970f3..83231743e 100644
--- a/pandas/tests/test_datetime64.py
+++ b/pandas/tests/test_datetime64.py
@@ -529,13 +529,34 @@ class TestDatetime64(unittest.TestCase):
         self.assert_((unpickled.index == dtindex).all())
         self.assertEquals(unpickled.index.offset, BDay(1))
 
-    def test_from_string_array(self):
-        arr = ['1/1/2005', '1/2/2005', 'Jan 3, 2005', '2005-01-04']
-        idx = DatetimeIndex(arr)
-        self.assertEquals(len(idx), 4)
-        self.assertEquals(idx[0], lib.Timestamp(datetime(2005,1,1)))
+    def test_datetimeindex_constructor(self):
+        arr = ['1/1/2005', '1/2/2005', 'Jn 3, 2005', '2005-01-04']
+        self.assertRaises(Exception, DatetimeIndex, arr)
 
+        arr = ['1/1/2005', '1/2/2005', '1/3/2005', '2005-01-04']
+        idx1 = DatetimeIndex(arr)
 
+        arr = [datetime(2005,1,1), '1/2/2005', '1/3/2005', '2005-01-04']
+        idx2 = DatetimeIndex(arr)
+
+        arr = [lib.Timestamp(datetime(2005,1,1)), '1/2/2005', '1/3/2005',
+               '2005-01-04']
+        idx3 = DatetimeIndex(arr)
+
+        arr = np.array(['1/1/2005', '1/2/2005', '1/3/2005',
+                        '2005-01-04'], dtype='O')
+        idx4 = DatetimeIndex(arr)
+
+        arr = np.array(['1/1/2005', '1/2/2005', '1/3/2005',
+                        '2005-01-04'], dtype='M8[us]')
+        idx5 = DatetimeIndex(arr)
+
+        arr = np.array(['1/1/2005', '1/2/2005', 'Jan 3, 2005',
+                        '2005-01-04'], dtype='M8[us]')
+        idx6 = DatetimeIndex(arr)
+
+        for other in [idx2, idx3, idx4, idx5, idx6]:
+            self.assert_( (idx1.values == other.values).all() )
 
 if __name__ == '__main__':
     import nose
