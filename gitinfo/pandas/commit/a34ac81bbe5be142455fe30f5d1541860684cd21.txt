commit a34ac81bbe5be142455fe30f5d1541860684cd21
Author: y-p <yoval@gmx.com>
Date:   Wed Nov 14 03:20:23 2012 +0200

    ENH: convert more internal string processing to unicode, SeriesFormatter, Index.format, etc'

diff --git a/pandas/core/format.py b/pandas/core/format.py
index b28e825fd..790770883 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -62,7 +62,7 @@ class SeriesFormatter(object):
     def __init__(self, series, buf=None, header=True, length=True,
                  na_rep='NaN', name=False, float_format=None):
         self.series = series
-        self.buf = buf if buf is not None else StringIO()
+        self.buf = buf if buf is not None else StringIO(u"")
         self.name = name
         self.na_rep = na_rep
         self.length = length
@@ -112,7 +112,7 @@ class SeriesFormatter(object):
         series = self.series
 
         if len(series) == 0:
-            return ''
+            return u''
 
         fmt_index, have_header = self._get_formatted_index()
         fmt_values = self._get_formatted_values()
@@ -719,18 +719,10 @@ class GenericArrayFormatter(object):
         self.justify = justify
 
     def get_result(self):
-        if self._have_unicode():
-            fmt_values = self._format_strings(use_unicode=True)
-        else:
-            fmt_values = self._format_strings(use_unicode=False)
-
+        fmt_values = self._format_strings()
         return _make_fixed_width(fmt_values, self.justify)
 
-    def _have_unicode(self):
-        mask = lib.map_infer(self.values, lambda x: isinstance(x, unicode))
-        return mask.any()
-
-    def _format_strings(self, use_unicode=False):
+    def _format_strings(self):
         if self.float_format is None:
             float_format = print_config.float_format
             if float_format is None:
diff --git a/pandas/core/index.py b/pandas/core/index.py
index b7792309f..500712d42 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -394,8 +394,8 @@ class Index(np.ndarray):
             result = []
             for dt in self:
                 if dt.time() != zero_time or dt.tzinfo is not None:
-                    return header + ['%s' % x for x in self]
-                result.append('%d-%.2d-%.2d' % (dt.year, dt.month, dt.day))
+                    return header + [u'%s' % x for x in self]
+                result.append(u'%d-%.2d-%.2d' % (dt.year, dt.month, dt.day))
             return header + result
 
         values = self.values
@@ -1496,7 +1496,7 @@ class MultiIndex(Index):
                 formatted = lev.take(lab).format()
             else:
                 # weird all NA case
-                formatted = [str(x) for x in com.take_1d(lev.values, lab)]
+                formatted = [com.pprint_thing(x) for x in com.take_1d(lev.values, lab)]
             stringified_levels.append(formatted)
 
         result_levels = []
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index 8e8772dca..0b5182acb 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -840,16 +840,16 @@ class TestSeriesFormatting(unittest.TestCase):
     def test_to_string_mixed(self):
         s = Series(['foo', np.nan, -1.23, 4.56])
         result = s.to_string()
-        expected = ('0     foo\n'
-                    '1     NaN\n'
-                    '2   -1.23\n'
-                    '3    4.56')
+        expected = (u'0     foo\n'
+                    u'1     NaN\n'
+                    u'2   -1.23\n'
+                    u'3    4.56')
         self.assertEqual(result, expected)
 
         # but don't count NAs as floats
         s = Series(['foo', np.nan, 'bar', 'baz'])
         result = s.to_string()
-        expected = ('0    foo\n'
+        expected = (u'0    foo\n'
                     '1    NaN\n'
                     '2    bar\n'
                     '3    baz')
@@ -857,7 +857,7 @@ class TestSeriesFormatting(unittest.TestCase):
 
         s = Series(['foo', 5, 'bar', 'baz'])
         result = s.to_string()
-        expected = ('0    foo\n'
+        expected = (u'0    foo\n'
                     '1      5\n'
                     '2    bar\n'
                     '3    baz')
@@ -868,7 +868,7 @@ class TestSeriesFormatting(unittest.TestCase):
         s[::2] = np.nan
 
         result = s.to_string()
-        expected = ('0       NaN\n'
+        expected = (u'0       NaN\n'
                     '1    1.5678\n'
                     '2       NaN\n'
                     '3   -3.0000\n'
