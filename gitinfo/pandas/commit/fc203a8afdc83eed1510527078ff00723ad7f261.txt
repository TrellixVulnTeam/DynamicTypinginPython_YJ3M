commit fc203a8afdc83eed1510527078ff00723ad7f261
Author: Jeff Reback <jeff@reback.net>
Date:   Wed Nov 18 08:39:38 2015 -0500

    TST: windows test fixes

diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 01a746f5f..025ed1719 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -392,7 +392,7 @@ class TestGroupBy(tm.TestCase):
         expected = df.reset_index().groupby([pd.Grouper(key='foo', freq='W'),
                                              pd.Grouper(key='bar', freq='W')]).sum()
         # reset index changes columns dtype to object
-        expected.columns = pd.Index([0], dtype=int)
+        expected.columns = pd.Index([0], dtype='int64')
 
         result = df.groupby([pd.Grouper(level='foo', freq='W'),
                              pd.Grouper(level='bar', freq='W')]).sum()
diff --git a/pandas/tests/test_indexing.py b/pandas/tests/test_indexing.py
index 88dcf80d4..e24edbeae 100644
--- a/pandas/tests/test_indexing.py
+++ b/pandas/tests/test_indexing.py
@@ -3623,7 +3623,7 @@ Region_1,Site_2,3977723089,A,5/20/2015 8:33,5/20/2015 9:09,Yes,No"""
         # these work as they don't really change
         # anything but the index
         # GH5632
-        expected = DataFrame(columns=['foo'], index=pd.Index([], dtype=int))
+        expected = DataFrame(columns=['foo'], index=pd.Index([], dtype='int64'))
         def f():
             df = DataFrame()
             df['foo'] = Series([], dtype='object')
@@ -3640,7 +3640,7 @@ Region_1,Site_2,3977723089,A,5/20/2015 8:33,5/20/2015 9:09,Yes,No"""
             return df
         assert_frame_equal(f(), expected)
 
-        expected = DataFrame(columns=['foo'], index=pd.Index([], dtype=int))
+        expected = DataFrame(columns=['foo'], index=pd.Index([], dtype='int64'))
         expected['foo'] = expected['foo'].astype('float64')
         def f():
             df = DataFrame()
@@ -3682,7 +3682,7 @@ Region_1,Site_2,3977723089,A,5/20/2015 8:33,5/20/2015 9:09,Yes,No"""
 
         # GH5720, GH5744
         # don't create rows when empty
-        expected = DataFrame(columns=['A', 'B', 'New'], index=pd.Index([], dtype=int))
+        expected = DataFrame(columns=['A', 'B', 'New'], index=pd.Index([], dtype='int64'))
         expected['A'] = expected['A'].astype('int64')
         expected['B'] = expected['B'].astype('float64')
         expected['New'] = expected['New'].astype('float64')
@@ -3703,7 +3703,7 @@ Region_1,Site_2,3977723089,A,5/20/2015 8:33,5/20/2015 9:09,Yes,No"""
         df = DataFrame({"A": [1, 2, 3], "B": [1.2, 4.2, 5.2]})
         y = df[df.A > 5]
         result = y.reindex(columns=['A','B','C'])
-        expected = DataFrame(columns=['A','B','C'], index=pd.Index([], dtype=int))
+        expected = DataFrame(columns=['A','B','C'], index=pd.Index([], dtype='int64'))
         expected['A'] = expected['A'].astype('int64')
         expected['B'] = expected['B'].astype('float64')
         expected['C'] = expected['C'].astype('float64')
@@ -4151,7 +4151,7 @@ Region_1,Site_2,3977723089,A,5/20/2015 8:33,5/20/2015 9:09,Yes,No"""
             assert_series_equal(s.loc[fancy_idx], expected)
             assert_series_equal(s.ix[fancy_idx], expected)
 
-        expected = Series([2, 0], index=Index([5, 0], dtype=int))
+        expected = Series([2, 0], index=Index([5, 0], dtype='int64'))
         for fancy_idx in [[5, 0], np.array([5, 0])]: #int
             assert_series_equal(s[fancy_idx], expected)
             assert_series_equal(s.loc[fancy_idx], expected)
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 015b7eb23..4b0f9a9f6 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -1471,7 +1471,7 @@ class TestSeries(tm.TestCase, CheckNameIntegration):
         assert_series_equal(result, expected)
 
         s = Series(['A', 'B'])
-        expected = Series(dtype=object, index=Index([], dtype=int))
+        expected = Series(dtype=object, index=Index([], dtype='int64'))
         result = s[Series([], dtype=object)]
         assert_series_equal(result, expected)
 
