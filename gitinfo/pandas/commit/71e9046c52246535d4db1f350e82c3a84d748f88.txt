commit 71e9046c52246535d4db1f350e82c3a84d748f88
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Jan 11 19:45:44 2012 -0500

    BUG: handle non-numeric aggregates in pure python Series aggregation, GH #612

diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index a793e137a..2f12f64db 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -414,15 +414,26 @@ class GroupBy(object):
 
     def _aggregate_series_pure_python(self, obj, func, ngroups):
         counts = np.zeros(ngroups, dtype=int)
-        result = np.empty(ngroups, dtype=float)
-        result.fill(np.nan)
+        result = None
 
         for label, group in self._generator_factory(obj):
             if group is None:
                 continue
+            res = func(group)
+            if result is None:
+                try:
+                    assert(not isinstance(res, np.ndarray))
+                    assert(not (isinstance(res, list) and
+                                len(res) == len(self.dummy)))
+
+                    result = np.empty(ngroups, dtype='O')
+                except Exception:
+                    raise ValueError('function does not reduce')
+
             counts[label] = group.shape[0]
-            result[label] = func(group)
+            result[label] = res
 
+        result = lib.maybe_convert_objects(result)
         return result, counts
 
     def _python_apply_general(self, func, *args, **kwargs):
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 8b611dc9a..e2de14a07 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -343,6 +343,28 @@ class TestGroupBy(unittest.TestCase):
         expected = grouped.sum()
         assert_series_equal(result, expected)
 
+    def test_series_agg_multi_pure_python(self):
+        data = DataFrame({'A' : ['foo', 'foo', 'foo', 'foo',
+                                 'bar', 'bar', 'bar', 'bar',
+                                 'foo', 'foo', 'foo'],
+                          'B' : ['one', 'one', 'one', 'two',
+                                 'one', 'one', 'one', 'two',
+                                 'two', 'two', 'one'],
+                          'C' : ['dull', 'dull', 'shiny', 'dull',
+                                 'dull', 'shiny', 'shiny', 'dull',
+                                 'shiny', 'shiny', 'shiny'],
+                          'D' : np.random.randn(11),
+                          'E' : np.random.randn(11),
+                          'F' : np.random.randn(11)})
+
+        def bad(x):
+            assert(len(x.base) == len(x))
+            return 'foo'
+
+        result = data.groupby(['A', 'B']).agg(bad)
+        expected = data.groupby(['A', 'B']).agg(lambda x: 'foo')
+        assert_frame_equal(result, expected)
+
     def test_series_index_name(self):
         grouped = self.df.ix[:, ['C']].groupby(self.df['A'])
         result = grouped.agg(lambda x: x.mean())
diff --git a/vb_suite/stat_ops.py b/vb_suite/stat_ops.py
index 4728cfa88..999f07800 100644
--- a/vb_suite/stat_ops.py
+++ b/vb_suite/stat_ops.py
@@ -4,6 +4,16 @@ from datetime import datetime
 common_setup = """from pandas_vb_common import *
 """
 
+#----------------------------------------------------------------------
+# nanops
+
+setup = common_setup + """
+s = Series(np.random.randn(100000))
+s[::2] = np.nan
+"""
+
+stat_ops_series_std = Benchmark("s.std()", setup)
+
 #----------------------------------------------------------------------
 # ops by level
 
@@ -19,21 +29,17 @@ df_level = DataFrame(np.random.randn(100, 4), index=index.levels[1])
 
 stat_ops_level_frame_sum = \
     Benchmark("df.sum(level=1)", setup,
-              name='stat_ops_level_frame_sum',
               start_date=datetime(2011, 11, 15))
 
 stat_ops_level_frame_sum_multiple = \
     Benchmark("df.sum(level=[0, 1])", setup, repeat=1,
-              name='stat_ops_level_frame_sum_multiple',
               start_date=datetime(2011, 11, 15))
 
 stat_ops_level_series_sum = \
     Benchmark("df[1].sum(level=1)", setup,
-              name='stat_ops_level_series_sum',
               start_date=datetime(2011, 11, 15))
 
 stat_ops_level_series_sum_multiple = \
     Benchmark("df[1].sum(level=[0, 1])", setup, repeat=1,
-              name='stat_ops_level_series_sum_multiple',
               start_date=datetime(2011, 11, 15))
 
