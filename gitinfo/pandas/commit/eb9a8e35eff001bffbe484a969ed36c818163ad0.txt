commit eb9a8e35eff001bffbe484a969ed36c818163ad0
Author: Jiang Yue <35633013+jiangyue12392@users.noreply.github.com>
Date:   Wed Jul 31 20:30:59 2019 +0800

    ENH: Infer integer-na in infer_dtype (#27392)

diff --git a/doc/source/whatsnew/v1.0.0.rst b/doc/source/whatsnew/v1.0.0.rst
index 97b4c6cd4..e93d3d391 100644
--- a/doc/source/whatsnew/v1.0.0.rst
+++ b/doc/source/whatsnew/v1.0.0.rst
@@ -45,6 +45,7 @@ Backwards incompatible API changes
 Other API changes
 ^^^^^^^^^^^^^^^^^
 
+- :meth:`pandas.api.types.infer_dtype` will now return "integer-na" for integer and ``np.nan`` mix (:issue:`27283`)
 -
 -
 
diff --git a/pandas/_libs/lib.pyx b/pandas/_libs/lib.pyx
index d430cb3d3..928af2de0 100644
--- a/pandas/_libs/lib.pyx
+++ b/pandas/_libs/lib.pyx
@@ -1265,7 +1265,10 @@ def infer_dtype(value: object, skipna: object=None) -> str:
         if is_integer_array(values):
             return 'integer'
         elif is_integer_float_array(values):
-            return 'mixed-integer-float'
+            if is_integer_na_array(values):
+                return 'integer-na'
+            else:
+                return 'mixed-integer-float'
         return 'mixed-integer'
 
     elif PyDateTime_Check(val):
@@ -1290,7 +1293,10 @@ def infer_dtype(value: object, skipna: object=None) -> str:
         if is_float_array(values):
             return 'floating'
         elif is_integer_float_array(values):
-            return 'mixed-integer-float'
+            if is_integer_na_array(values):
+                return 'integer-na'
+            else:
+                return 'mixed-integer-float'
 
     elif util.is_bool_object(val):
         if is_bool_array(values, skipna=skipna):
@@ -1526,6 +1532,19 @@ cpdef bint is_integer_array(ndarray values):
     return validator.validate(values)
 
 
+cdef class IntegerNaValidator(Validator):
+    cdef inline bint is_value_typed(self, object value) except -1:
+        return (util.is_integer_object(value)
+                or (util.is_nan(value) and util.is_float_object(value)))
+
+
+cdef bint is_integer_na_array(ndarray values):
+    cdef:
+        IntegerNaValidator validator = IntegerNaValidator(len(values),
+                                                          values.dtype)
+    return validator.validate(values)
+
+
 cdef class IntegerFloatValidator(Validator):
     cdef inline bint is_value_typed(self, object value) except -1:
         return util.is_integer_object(value) or util.is_float_object(value)
diff --git a/pandas/core/arrays/integer.py b/pandas/core/arrays/integer.py
index 62b1a8a18..1f14bd169 100644
--- a/pandas/core/arrays/integer.py
+++ b/pandas/core/arrays/integer.py
@@ -187,6 +187,7 @@ def coerce_to_array(values, dtype, mask=None, copy=False):
             "floating",
             "integer",
             "mixed-integer",
+            "integer-na",
             "mixed-integer-float",
         ]:
             raise TypeError(
diff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py
index 8cacd22fb..ce7b73a92 100644
--- a/pandas/core/indexes/base.py
+++ b/pandas/core/indexes/base.py
@@ -450,7 +450,8 @@ class Index(IndexOpsMixin, PandasObject):
                         pass
 
                     return Index(subarr, copy=copy, dtype=object, name=name)
-                elif inferred in ["floating", "mixed-integer-float"]:
+                elif inferred in ["floating", "mixed-integer-float", "integer-na"]:
+                    # TODO: Returns IntegerArray for integer-na case in the future
                     from .numeric import Float64Index
 
                     return Float64Index(subarr, copy=copy, name=name)
@@ -1787,7 +1788,7 @@ class Index(IndexOpsMixin, PandasObject):
         return self.inferred_type in ["integer"]
 
     def is_floating(self):
-        return self.inferred_type in ["floating", "mixed-integer-float"]
+        return self.inferred_type in ["floating", "mixed-integer-float", "integer-na"]
 
     def is_numeric(self):
         return self.inferred_type in ["integer", "floating"]
@@ -3096,6 +3097,7 @@ class Index(IndexOpsMixin, PandasObject):
                 if self.inferred_type not in [
                     "floating",
                     "mixed-integer-float",
+                    "integer-na",
                     "string",
                     "unicode",
                     "mixed",
@@ -3173,7 +3175,7 @@ class Index(IndexOpsMixin, PandasObject):
                     self.get_loc(stop)
                 is_positional = False
         except KeyError:
-            if self.inferred_type == "mixed-integer-float":
+            if self.inferred_type in ["mixed-integer-float", "integer-na"]:
                 raise
 
         if is_null_slicer:
diff --git a/pandas/core/indexes/datetimes.py b/pandas/core/indexes/datetimes.py
index 04522fde4..d6f0008a2 100644
--- a/pandas/core/indexes/datetimes.py
+++ b/pandas/core/indexes/datetimes.py
@@ -778,6 +778,7 @@ class DatetimeIndex(DatetimeIndexOpsMixin, Int64Index, DatetimeDelegateMixin):
             not in (
                 "floating",
                 "integer",
+                "integer-na",
                 "mixed-integer",
                 "mixed-integer-float",
                 "mixed",
diff --git a/pandas/core/indexes/timedeltas.py b/pandas/core/indexes/timedeltas.py
index 1fc168433..a9f49ec8b 100644
--- a/pandas/core/indexes/timedeltas.py
+++ b/pandas/core/indexes/timedeltas.py
@@ -704,6 +704,7 @@ def _is_convertible_to_index(other):
         "floating",
         "mixed-integer",
         "integer",
+        "integer-na",
         "mixed-integer-float",
         "mixed",
     ):
diff --git a/pandas/tests/dtypes/test_inference.py b/pandas/tests/dtypes/test_inference.py
index ff48ae9b3..0ae4fcc0f 100644
--- a/pandas/tests/dtypes/test_inference.py
+++ b/pandas/tests/dtypes/test_inference.py
@@ -596,6 +596,21 @@ class TestTypeInference:
         result = lib.infer_dtype(arr, skipna=True)
         assert result == "integer"
 
+    @pytest.mark.parametrize(
+        "arr, skipna",
+        [
+            (np.array([1, 2, np.nan, np.nan, 3], dtype="O"), False),
+            (np.array([1, 2, np.nan, np.nan, 3], dtype="O"), True),
+            (np.array([1, 2, 3, np.int64(4), np.int32(5), np.nan], dtype="O"), False),
+            (np.array([1, 2, 3, np.int64(4), np.int32(5), np.nan], dtype="O"), True),
+        ],
+    )
+    def test_integer_na(self, arr, skipna):
+        # GH 27392
+        result = lib.infer_dtype(arr, skipna=skipna)
+        expected = "integer" if skipna else "integer-na"
+        assert result == expected
+
     def test_deprecation(self):
         # GH 24050
         arr = np.array([1, 2, 3], dtype=object)
