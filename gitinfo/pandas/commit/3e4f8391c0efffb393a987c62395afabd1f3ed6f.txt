commit 3e4f8391c0efffb393a987c62395afabd1f3ed6f
Author: Ajay Saxena <aileronajay@gmail.com>
Date:   Thu Dec 22 06:34:45 2016 -0500

    ENH: allowing datetime and timedelta datatype in pd cut bins
    
    xref #14714, follow-on to #14737
    
    Author: Ajay Saxena <aileronajay@gmail.com>
    
    Closes #14798 from aileronajay/cut_timetype_bin and squashes the following commits:
    
    82bffa1 [Ajay Saxena] added method for time type bins in pd cut and modified tests
    ac919cf [Ajay Saxena] added test for datetime bin type
    355e569 [Ajay Saxena]  allowing datetime and timedelta datatype in pd cut bins

diff --git a/doc/source/whatsnew/v0.20.0.txt b/doc/source/whatsnew/v0.20.0.txt
index 27f8564ba..e7b2fc5a6 100644
--- a/doc/source/whatsnew/v0.20.0.txt
+++ b/doc/source/whatsnew/v0.20.0.txt
@@ -101,7 +101,7 @@ Other enhancements
   unsorted MultiIndex (:issue:`11897`). This allows differentiation between errors due to lack
   of sorting or an incorrect key. See :ref:`here <advanced.unsorted>`
 
-- ``pd.cut`` and ``pd.qcut`` now support datetime64 and timedelta64 dtypes (:issue:`14714`)
+- ``pd.cut`` and ``pd.qcut`` now support datetime64 and timedelta64 dtypes (:issue:`14714`, :issue:`14798`)
 - ``Series`` provides a ``to_excel`` method to output Excel files (:issue:`8825`)
 - The ``usecols`` argument in ``pd.read_csv`` now accepts a callable function as a value  (:issue:`14154`)
 - ``pd.DataFrame.plot`` now prints a title above each subplot if ``suplots=True`` and ``title`` is a list of strings (:issue:`14753`)
diff --git a/pandas/tools/tests/test_tile.py b/pandas/tools/tests/test_tile.py
index 33d2a01b1..c9a96d80f 100644
--- a/pandas/tools/tests/test_tile.py
+++ b/pandas/tools/tests/test_tile.py
@@ -12,7 +12,7 @@ import pandas.core.common as com
 from pandas.core.algorithms import quantile
 from pandas.tools.tile import cut, qcut
 import pandas.tools.tile as tmod
-from pandas import to_datetime, DatetimeIndex
+from pandas import to_datetime, DatetimeIndex, Timestamp
 
 
 class TestCut(tm.TestCase):
@@ -313,6 +313,26 @@ class TestCut(tm.TestCase):
         result, bins = cut(data, 3, retbins=True)
         tm.assert_series_equal(Series(result), expected)
 
+    def test_datetime_bin(self):
+        data = [np.datetime64('2012-12-13'), np.datetime64('2012-12-15')]
+        bin_data = ['2012-12-12', '2012-12-14', '2012-12-16']
+        expected = Series(['(2012-12-12 00:00:00, 2012-12-14 00:00:00]',
+                          '(2012-12-14 00:00:00, 2012-12-16 00:00:00]'],
+                          ).astype("category", ordered=True)
+
+        for conv in [Timestamp, Timestamp, np.datetime64]:
+            bins = [conv(v) for v in bin_data]
+            result = cut(data, bins=bins)
+            tm.assert_series_equal(Series(result), expected)
+
+        bin_pydatetime = [Timestamp(v).to_pydatetime() for v in bin_data]
+        result = cut(data, bins=bin_pydatetime)
+        tm.assert_series_equal(Series(result), expected)
+
+        bins = to_datetime(bin_data)
+        result = cut(data, bins=bin_pydatetime)
+        tm.assert_series_equal(Series(result), expected)
+
 
 def curpath():
     pth, _ = os.path.split(os.path.abspath(__file__))
diff --git a/pandas/tools/tile.py b/pandas/tools/tile.py
index f62bac9e9..a372e113f 100644
--- a/pandas/tools/tile.py
+++ b/pandas/tools/tile.py
@@ -13,6 +13,7 @@ import pandas.core.nanops as nanops
 from pandas.compat import zip
 from pandas import to_timedelta, to_datetime
 from pandas.types.common import is_datetime64_dtype, is_timedelta64_dtype
+from pandas.lib import infer_dtype
 
 import numpy as np
 
@@ -116,6 +117,7 @@ def cut(x, bins, right=True, labels=None, retbins=False, precision=3,
 
     else:
         bins = np.asarray(bins)
+        bins = _convert_bin_to_numeric_type(bins)
         if (np.diff(bins) < 0).any():
             raise ValueError('bins must increase monotonically.')
 
@@ -327,6 +329,19 @@ def _coerce_to_type(x):
     return x, dtype
 
 
+def _convert_bin_to_numeric_type(x):
+    """
+    if the passed bin is of datetime/timedelta type,
+    this method converts it to integer
+    """
+    dtype = infer_dtype(x)
+    if dtype == 'timedelta' or dtype == 'timedelta64':
+        x = to_timedelta(x).view(np.int64)
+    elif dtype == 'datetime' or dtype == 'datetime64':
+        x = to_datetime(x).view(np.int64)
+    return x
+
+
 def _preprocess_for_cut(x):
     """
     handles preprocessing for cut where we convert passed
