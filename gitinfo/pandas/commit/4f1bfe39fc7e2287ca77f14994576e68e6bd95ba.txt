commit 4f1bfe39fc7e2287ca77f14994576e68e6bd95ba
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Jul 29 00:46:37 2011 -0400

    ENH: sortlevel function, refactoring for hierarchical indexing

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index f84debb7e..1a76922d3 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -26,7 +26,7 @@ from pandas.core.common import (isnull, notnull, PandasError, _ensure_index,
                                 _infer_dtype)
 from pandas.core.daterange import DateRange
 from pandas.core.generic import AxisProperty, NDFrame
-from pandas.core.index import Index, NULL_INDEX
+from pandas.core.index import Index, MultiIndex, NULL_INDEX
 from pandas.core.internals import BlockManager, make_block
 from pandas.core.series import Series, _is_bool_indexer
 import pandas.core.common as common
@@ -993,7 +993,7 @@ class DataFrame(NDFrame):
     #----------------------------------------------------------------------
     # Sorting
 
-    def sort(self, column=None, ascending=True):
+    def sort(self, column=None, axis=0, ascending=True):
         """
         Sort DataFrame either by index (default) by the values in a column
 
@@ -1021,6 +1021,46 @@ class DataFrame(NDFrame):
 
         return self.reindex(sort_index)
 
+    def sortlevel(self, level=0, axis=0, ascending=True):
+        """
+        Sort value by chosen axis (break ties using other axis)
+
+        Note
+        ----
+        A LongPanel must be sorted to convert to a WidePanel
+
+        Returns
+        -------
+        LongPanel (in sorted order)
+        """
+        the_axis = self._get_axis(axis)
+
+        if not isinstance(the_axis, MultiIndex):
+            raise Exception('can only sort by level with a hierarchical index')
+
+        labels = list(the_axis.labels)
+        primary = labels.pop(level)
+
+        # Lexsort starts from END
+        indexer = np.lexsort(tuple(labels[::-1]) + (primary,))
+
+        if not ascending:
+            indexer = indexer[::-1]
+
+        new_labels = [lab.take(indexer) for lab in the_axis.labels]
+        new_values = self.values.take(indexer, axis=0)
+
+        new_axis = MultiIndex(levels=self.index.levels, labels=new_labels)
+
+        if axis == 0:
+            index = new_axis
+            columns = self.columns
+        else:
+            index = self.index
+            columns = new_axis
+
+        return self._constructor(new_values, index=index, columns=columns)
+
     #----------------------------------------------------------------------
     # Filling NA's
 
@@ -1581,6 +1621,32 @@ class DataFrame(NDFrame):
 
         return result
 
+    def _apply_level(self, f, axis='major', broadcast=False):
+        from pandas.core.panel import LongPanel
+
+        if axis == 'major':
+            panel = self.swapaxes()
+            result = panel._apply_level(f, axis='minor', broadcast=broadcast)
+            if broadcast:
+                result = result.swapaxes()
+
+            return result
+
+        bounds = self.index._bounds
+        values = self.values
+        N, _ = values.shape
+        result = group_agg(values, bounds, f)
+
+        if broadcast:
+            repeater = np.concatenate((np.diff(bounds), [N - bounds[-1]]))
+            panel = LongPanel(result.repeat(repeater, axis=0),
+                              columns=self.items, index=self.index)
+        else:
+            panel = DataFrame(result, index=self.major_axis,
+                              columns=self.items)
+
+        return panel
+
     def tapply(self, func):
         """
         Apply func to the transposed DataFrame, results as per apply
@@ -2469,6 +2535,70 @@ class DataFrame(NDFrame):
 
         return self._ix
 
+
+def group_agg(values, bounds, f):
+    """
+    R-style aggregator
+
+    Parameters
+    ----------
+    values : N-length or N x K ndarray
+    bounds : B-length ndarray
+    f : ndarray aggregation function
+
+    Returns
+    -------
+    ndarray with same length as bounds array
+    """
+    if values.ndim == 1:
+        N = len(values)
+        result = np.empty(len(bounds), dtype=float)
+    elif values.ndim == 2:
+        N, K = values.shape
+        result = np.empty((len(bounds), K), dtype=float)
+
+    testagg = f(values[:min(1, len(values))])
+    if isinstance(testagg, np.ndarray) and testagg.ndim == 2:
+        raise Exception('Passed function does not aggregate!')
+
+    for i, left_bound in enumerate(bounds):
+        if i == len(bounds) - 1:
+            right_bound = N
+        else:
+            right_bound = bounds[i + 1]
+
+        result[i] = f(values[left_bound : right_bound])
+
+    return result
+
+
+def factor_agg(factor, vec, func):
+    """
+    Aggregate array based on Factor
+
+    Parameters
+    ----------
+    factor : Factor
+        length n
+    vec : sequence
+        length n
+    func : function
+        1D array aggregation function
+
+    Returns
+    -------
+    ndarray corresponding to Factor levels
+    """
+    indexer = np.argsort(factor.labels)
+    unique_labels = np.arange(len(factor.levels))
+
+    ordered_labels = factor.labels.take(indexer)
+    ordered_vec = np.asarray(vec).take(indexer)
+    bounds = ordered_labels.searchsorted(unique_labels)
+
+    return group_agg(ordered_vec, bounds, func)
+
+
 def _union_indices(a, b):
     if len(a) == 0:
         return b
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 2521d3220..c29dfb82c 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -334,9 +334,9 @@ class Factor(object):
 
     @classmethod
     def fromarray(cls, values):
-        levels = np.array(sorted(set(values)), dtype=object)
-        labels = levels.searchsorted(values)
-
+        values = np.asarray(values, dtype=object)
+        levels = Index(sorted(set(values)))
+        labels, _ = _tseries.getMergeVec(values, levels.indexMap)
         return Factor(labels, levels=levels)
 
     def asarray(self):
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index a829311f9..09eb21a3b 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -11,11 +11,11 @@ import warnings
 import numpy as np
 
 from pandas.core.common import (PandasError, _mut_exclusive, _ensure_index,
-                                _pfixed, _default_index, _infer_dtype)
-from pandas.core.index import Index, Factor, MultiIndex
+                                _default_index, _infer_dtype)
+from pandas.core.index import Factor, Index, MultiIndex
 from pandas.core.internals import BlockManager, make_block
 from pandas.core.frame import DataFrame
-from pandas.core.generic import AxisProperty, NDFrame, Picklable
+from pandas.core.generic import AxisProperty, NDFrame
 import pandas.core.common as common
 import pandas._tseries as _tseries
 
@@ -647,16 +647,15 @@ class WidePanel(Panel, NDFrame):
 
         if filter_observations:
             mask = np.isfinite(self.values).all(axis=0)
-            size = mask.sum()
+            # size = mask.sum()
             selector = mask.ravel()
         else:
-            size = N * K
+            # size = N * K
             selector = slice(None, None)
 
-        values = np.empty((size, I), dtype=float)
-
-        for i in xrange(len(self.items)):
-            values[:, i] = self.values[i].ravel()[selector]
+        data = {}
+        for item in self.items:
+            data[item] = self[item].values.ravel()[selector]
 
         major_labels = np.arange(N).repeat(K)[selector]
 
@@ -665,17 +664,10 @@ class WidePanel(Panel, NDFrame):
         minor_labels = np.arange(K).reshape(1, K)[np.zeros(N, dtype=int)]
         minor_labels = minor_labels.ravel()[selector]
 
-        if filter_observations:
-            mask = selector
-        else:
-            mask = None
-
-        index = MultiIndex(levels=[self.major_axis,
-                                        self.minor_axis],
-                                labels=[major_labels,
-                                        minor_labels])
+        index = MultiIndex(levels=[self.major_axis, self.minor_axis],
+                           labels=[major_labels, minor_labels])
 
-        return LongPanel(values, index=index, columns=self.items)
+        return LongPanel(data, index=index, columns=self.items)
 
     toLong = to_long
 
@@ -985,13 +977,6 @@ class LongPanel(Panel, DataFrame):
     def __repr__(self):
         return DataFrame.__repr__(self)
 
-        # if len(self.items) < 7 and len(self.index) < 500:
-        #     buf = StringIO()
-        #     self.toString(buf=buf)
-        #     return buf.getvalue()
-        # else:
-        #     return Panel.__repr__(self)
-
     @classmethod
     def fromRecords(cls, data, major_field, minor_field,
                     exclude=None):
@@ -1029,34 +1014,14 @@ class LongPanel(Panel, DataFrame):
         else:
             exclude = set(exclude)
 
-        major_vec = data.pop(major_field)
-        minor_vec = data.pop(minor_field)
-
-        major_axis = Index(sorted(set(major_vec)))
-        minor_axis = Index(sorted(set(minor_vec)))
-
-        major_labels, _ = _tseries.getMergeVec(major_vec, major_axis.indexMap)
-        minor_labels, _ = _tseries.getMergeVec(minor_vec, minor_axis.indexMap)
-
         for col in exclude:
             del data[col]
 
-        # factor_dict = {}
-        # for col in data.keys():
-        #     series = data[col]
-
-        #     # Is it a factor?
-        #     if not np.issctype(series.dtype):
-        #         factor_dict[col] = factor = Factor.fromarray(series)
-        #         data[col] = factor.labels
-
-        items = sorted(data)
-        values = np.array([data[k] for k in items]).T
-
-        index = MultiIndex(levels=[major_axis, minor_axis],
-                                labels=[major_labels, minor_labels])
-
-        return LongPanel(values, index=index, columns=items)
+        major = Factor.fromarray(data.pop(major_field))
+        minor = Factor.fromarray(data.pop(minor_field))
+        index = MultiIndex(levels=[major.levels, minor.levels],
+                           labels=[major.labels, minor.labels])
+        return LongPanel(data, index=index)
 
     def toRecords(self):
         major = np.asarray(self.major_axis).take(self.major_labels)
@@ -1069,17 +1034,6 @@ class LongPanel(Panel, DataFrame):
 
         return np.rec.fromarrays(arrays, names=names)
 
-    def copy(self):
-        """
-        Return copy of LongPanel (copies ndarray)
-
-        Returns
-        -------
-        y : LongPanel
-        """
-        return LongPanel(self.values.copy(), columns=self.items,
-                         index=self.index)
-
     @property
     def major_axis(self):
         return self.index.levels[0]
@@ -1096,64 +1050,6 @@ class LongPanel(Panel, DataFrame):
     def minor_labels(self):
         return self.index.labels[1]
 
-    # def _get_values(self):
-    #     return self._values
-
-    # def _set_values(self, values):
-    #     if not values.flags.contiguous:
-    #         values = values.copy()
-
-    #     shape = len(self.index.major_labels), len(self.items)
-
-    #     if values.shape != shape:
-    #         raise ValueError('Values shape %s mismatch to %s' % (values.shape,
-    #                                                             shape))
-
-    #     self._values = values
-
-    # values = property(fget=_get_values, fset=_set_values)
-
-    # def __getitem__(self, key):
-    #     "Return column of panel as LongPanel"
-    #     loc = self.items.get_loc(key)
-    #     return LongPanel(self.values[:, loc : loc + 1].copy(),
-    #                      [key], self.index, factors=self.factors)
-
-    # def __setitem__(self, key, value):
-    #     if np.isscalar(value):
-    #         mat = np.empty((len(self.values), 1), dtype=float)
-    #         mat.fill(value)
-    #     elif isinstance(value, np.ndarray):
-    #         mat = value
-    #     elif isinstance(value, LongPanel):
-    #         if len(value.items) > 1:
-    #             raise ValueError('input LongPanel must only have one column')
-
-    #         if value.index is not self.index:
-    #             raise ValueError('Only can set identically-indexed LongPanel '
-    #                             'items for now')
-
-    #         mat = value.values
-
-    #     # Insert item at end of items for now
-    #     self.columns = Index(list(self.columns) + [key])
-    #     self.values = np.column_stack((self.values, mat))
-
-    # def __getstate__(self):
-    #     "Returned pickled representation of the panel"
-
-    #     return (common._pickle_array(self.values),
-    #             common._pickle_array(self.items),
-    #             self.index)
-
-    # def __setstate__(self, state):
-    #     "Unpickle the panel"
-    #     (vals, items, index) = state
-
-    #     self.items = common._unpickle_array(items)
-    #     self.index = index
-    #     self.values = common._unpickle_array(vals)
-
     def _combine(self, other, func, axis='items'):
         if isinstance(other, Panel):
             return self._combine_panel(other, func)
@@ -1271,28 +1167,6 @@ class LongPanel(Panel, DataFrame):
         self._textConvert(f, format_cols, format_row)
         f.close()
 
-    # def toString(self, buf=sys.stdout, col_space=15):
-    #     """
-    #     Output a screen-friendly version of this Panel
-    #     """
-    #     _pf = _pfixed
-    #     major_space = max(max([len(str(idx))
-    #                            for idx in self.major_axis]) + 4, 9)
-    #     minor_space = max(max([len(str(idx))
-    #                            for idx in self.minor_axis]) + 4, 9)
-
-    #     def format_cols(items):
-    #         return '%s%s%s' % (_pf('Major', major_space),
-    #                            _pf('Minor', minor_space),
-    #                            ''.join(_pf(h, col_space) for h in items))
-
-    #     def format_row(major, minor, values):
-    #         return '%s%s%s' % (_pf(major, major_space),
-    #                            _pf(minor, minor_space),
-    #                            ''.join(_pf(v, col_space) for v in values))
-
-    #     self._textConvert(buf, format_cols, format_row)
-
     def _textConvert(self, buf, format_cols, format_row):
         print >> buf, format_cols(self.items)
 
@@ -1318,13 +1192,10 @@ class LongPanel(Panel, DataFrame):
 
         new_major = self.minor_labels.take(indexer)
         new_minor = self.major_labels.take(indexer)
-
         new_values = self.values.take(indexer, axis=0)
 
-        new_index = MultiIndex([self.minor_axis,
-                                     self.major_axis],
-                                    [new_major,
-                                     new_minor])
+        new_index = MultiIndex(levels=[self.minor_axis, self.major_axis],
+                               labels=[new_major, new_minor])
 
         return LongPanel(new_values, columns=self.items,
                          index=new_index)
@@ -1351,25 +1222,6 @@ class LongPanel(Panel, DataFrame):
         return LongPanel(self.values[left : right],
                          columns=self.items, index=new_index)
 
-    def filter(self, items):
-        """
-        Restrict items in panel to input list
-
-        Parameters
-        ----------
-        items : sequence
-
-        Returns
-        -------
-        WidePanel
-        """
-        intersection = self.items.intersection(items)
-        indexer = [self.items.indexMap[col] for col in intersection]
-
-        new_values = self.values.take(indexer, axis=1)
-        return LongPanel(new_values, columns=intersection,
-                         index=self.index)
-
     def get_axis_dummies(self, axis='minor', transform=None,
                          prefix=None):
         """
@@ -1472,37 +1324,13 @@ class LongPanel(Panel, DataFrame):
         broadcast=False -> DataFrame
         """
         try:
-            return self._apply_axis(f, axis=axis, broadcast=broadcast)
+            return self._apply_level(f, axis=axis, broadcast=broadcast)
         except Exception:
             # ufunc
             new_values = f(self.values)
             return LongPanel(new_values, columns=self.items,
                              index=self.index)
 
-    def _apply_axis(self, f, axis='major', broadcast=False):
-        if axis == 'major':
-            panel = self.swapaxes()
-            result = panel._apply_axis(f, axis='minor', broadcast=broadcast)
-            if broadcast:
-                result = result.swapaxes()
-
-            return result
-
-        bounds = self.index._bounds
-        values = self.values
-        N, _ = values.shape
-        result = group_agg(values, bounds, f)
-
-        if broadcast:
-            repeater = np.concatenate((np.diff(bounds), [N - bounds[-1]]))
-            panel = LongPanel(result.repeat(repeater, axis=0),
-                              columns=self.items, index=self.index)
-        else:
-            panel = DataFrame(result, index=self.major_axis,
-                               columns=self.items)
-
-        return panel
-
     def count(self, axis='major'):
         """
         Compute observation counts within each group
@@ -1530,20 +1358,7 @@ class LongPanel(Panel, DataFrame):
 
         return np.concatenate((np.diff(bounds), [N - bounds[-1]]))
 
-    def leftJoin(self, other):
-        """
-
-        Parameters
-        ----------
-        other : LongPanel
-        """
-        assert(self.index is other.index)
-
-        values = np.concatenate((self.values, other.values), axis=1).copy()
-        items = Index(np.concatenate((self.items, other.items)))
-        items._verify_integrity()
-
-        return LongPanel(values, columns=items, index=self.index)
+    leftJoin = DataFrame.join
 
     def addPrefix(self, prefix=None):
         """
@@ -1580,67 +1395,6 @@ def _prep_ndarray(values, copy=True):
     return values
 
 
-def factor_agg(factor, vec, func):
-    """
-    Aggregate array based on Factor
-
-    Parameters
-    ----------
-    factor : Factor
-        length n
-    vec : sequence
-        length n
-    func : function
-        1D array aggregation function
-
-    Returns
-    -------
-    ndarray corresponding to Factor levels
-    """
-    indexer = np.argsort(factor.labels)
-    unique_labels = np.arange(len(factor.levels))
-
-    ordered_labels = factor.labels.take(indexer)
-    ordered_vec = np.asarray(vec).take(indexer)
-    bounds = ordered_labels.searchsorted(unique_labels)
-
-    return group_agg(ordered_vec, bounds, func)
-
-def group_agg(values, bounds, f):
-    """
-    R-style aggregator
-
-    Parameters
-    ----------
-    values : N-length or N x K ndarray
-    bounds : B-length ndarray
-    f : ndarray aggregation function
-
-    Returns
-    -------
-    ndarray with same length as bounds array
-    """
-    if values.ndim == 1:
-        N = len(values)
-        result = np.empty(len(bounds), dtype=float)
-    elif values.ndim == 2:
-        N, K = values.shape
-        result = np.empty((len(bounds), K), dtype=float)
-
-    testagg = f(values[:min(1, len(values))])
-    if isinstance(testagg, np.ndarray) and testagg.ndim == 2:
-        raise Exception('Passed function does not aggregate!')
-
-    for i, left_bound in enumerate(bounds):
-        if i == len(bounds) - 1:
-            right_bound = N
-        else:
-            right_bound = bounds[i + 1]
-
-        result[i] = f(values[left_bound : right_bound])
-
-    return result
-
 def _prefix_item(item, prefix=None):
     if prefix is None:
         return item
diff --git a/pandas/stats/plm.py b/pandas/stats/plm.py
index cb43d38e5..a11323219 100644
--- a/pandas/stats/plm.py
+++ b/pandas/stats/plm.py
@@ -862,8 +862,8 @@ class NonPooledPanelOLS(object):
 
 def _var_beta_panel(y, x, beta, xx, rmse, cluster_axis,
                    nw_lags, nobs, df, nw_overlap):
-
-    from pandas.core.panel import LongPanel, group_agg
+    from pandas.core.frame import group_agg
+    from pandas.core.panel import LongPanel
 
     xx_inv = math.inv(xx)
 
diff --git a/pandas/stats/tests/test_ols.py b/pandas/stats/tests/test_ols.py
index 70e797cd1..de5e19f4b 100644
--- a/pandas/stats/tests/test_ols.py
+++ b/pandas/stats/tests/test_ols.py
@@ -282,10 +282,12 @@ class TestPanelOLS(BaseTest):
         result = ols(y=self.panel_y2, x=self.panel_x2, entity_effects=True)
 
         assert_almost_equal(result._y.values.flat, [1, 4, 5])
-        exp_x = [[6, 14, 0, 1], [9, 17, 0, 1], [30, 48, 1, 1]]
+        exp_x = [[0, 6, 14, 1], [0, 9, 17, 1], [1, 30, 48, 1]]
+        # exp_x = [[6, 14, 0, 1], [9, 17, 0, 1], [30, 48, 1, 1]]
         assert_almost_equal(result._x.values, exp_x)
 
-        exp_index = Index(['x1', 'x2', 'FE_B', 'intercept'])
+        exp_index = Index(['FE_B', 'x1', 'x2', 'intercept'])
+        # exp_index = Index(['x1', 'x2', 'FE_B', 'intercept'])
         self.assertTrue(exp_index.equals(result._x.items))
 
         # _check_non_raw_results(result)
@@ -295,10 +297,11 @@ class TestPanelOLS(BaseTest):
                      dropped_dummies={'entity' : 'B'})
 
         assert_almost_equal(result._y.values.flat, [1, 4, 5])
-        exp_x = [[6, 14, 1, 1], [9, 17, 1, 1], [30, 48, 0, 1]]
+        exp_x = [[1, 6, 14, 1], [1, 9, 17, 1], [0, 30, 48, 1]]
+        # exp_x = [[6, 14, 1, 1], [9, 17, 1, 1], [30, 48, 0, 1]]
         assert_almost_equal(result._x.values, exp_x)
 
-        exp_index = Index(['x1', 'x2', 'FE_A', 'intercept'])
+        exp_index = Index(['FE_A', 'x1', 'x2', 'intercept'])
         self.assertTrue(exp_index.equals(result._x.items))
 
         # _check_non_raw_results(result)
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index e46d9f3d6..ff71b7baa 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -299,12 +299,12 @@ class TestFactor(unittest.TestCase):
         common.assert_almost_equal(subf.labels, [2, 2, 2])
 
     def test_factor_agg(self):
-        import pandas.core.panel as panelmod
+        import pandas.core.frame as frame
 
         arr = np.arange(len(self.factor))
 
         f = np.sum
-        agged = panelmod.factor_agg(self.factor, arr, f)
+        agged = frame.factor_agg(self.factor, arr, f)
         labels = self.factor.labels
         for i, idx in enumerate(self.factor.levels):
             self.assertEqual(f(arr[labels == i]), agged[i])
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 6ae98ac5c..fedf9aa95 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -10,7 +10,8 @@ import numpy as np
 
 from pandas.core.api import DataFrame, Index, notnull
 from pandas.core.datetools import bday
-from pandas.core.panel import (WidePanel, LongPanel, group_agg, pivot)
+from pandas.core.frame import group_agg
+from pandas.core.panel import WidePanel, LongPanel, pivot
 import pandas.core.panel as panelmod
 
 from pandas.util.testing import (assert_panel_equal,
