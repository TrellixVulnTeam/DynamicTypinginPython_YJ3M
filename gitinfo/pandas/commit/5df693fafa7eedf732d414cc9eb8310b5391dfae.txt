commit 5df693fafa7eedf732d414cc9eb8310b5391dfae
Author: Rob deCarvalho <robdmc@gmail.com>
Date:   Wed Oct 28 13:01:30 2015 -0400

    Fixed groupby().apply(func) bug when working with time colums (GH #11324)
    
    Addressed PR comments
    
    Added comments and updated whatsnew

diff --git a/doc/source/whatsnew/v0.17.1.txt b/doc/source/whatsnew/v0.17.1.txt
index f6d2b16d1..3d10566e4 100755
--- a/doc/source/whatsnew/v0.17.1.txt
+++ b/doc/source/whatsnew/v0.17.1.txt
@@ -134,6 +134,7 @@ Bug Fixes
 
 
 - Bug in ``DataFrame.to_latex()`` produces an extra rule when ``header=False`` (:issue:`7124`)
+- Bug in ``df.groupby(...).apply(func)`` when a func returns a ``Series`` containing a new datetimelike column (:issue:`11324`)
 
 
 - Bug in ``pandas.json`` when file to load is big (:issue:`11344`)
@@ -148,6 +149,7 @@ Bug Fixes
 
 - Bug in ``DataFrame.to_dict()`` produces a ``np.datetime64`` object instead of ``Timestamp`` when only datetime is present in data (:issue:`11327`)
 
+
 - Bug in ``DataFrame.corr()`` raises exception when computes Kendall correlation for DataFrames with boolean and not boolean columns (:issue:`11560`)
 
 - Bug in the link-time error caused by C ``inline`` functions on FreeBSD 10+ (with ``clang``) (:issue:`10510`)
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index add5080a6..9c5a40f6e 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -3124,6 +3124,7 @@ class NDFrameGroupBy(GroupBy):
                     result = result._convert(numeric=True)
                     date_cols = self._selected_obj.select_dtypes(
                         include=list(_DATELIKE_DTYPES)).columns
+                    date_cols = date_cols.intersection(result.columns)
                     result[date_cols] = (result[date_cols]
                                          ._convert(datetime=True,
                                                           coerce=True))
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 46026a4c8..9649288ab 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -824,6 +824,30 @@ class TestGroupBy(tm.TestCase):
         result = df.groupby('date').apply(lambda x: x['time'][x['value'].idxmax()])
         assert_series_equal(result, expected)
 
+    def test_time_field_bug(self):
+        # Test a fix for the following error related to GH issue 11324
+        # When non-key fields in a group-by dataframe contained time-based fields that
+        # were not returned by the apply function, an exception would be raised.
+
+        df = pd.DataFrame({'a': 1,'b': [datetime.now() for nn in range(10)]})
+
+        def func_with_no_date(batch):
+            return pd.Series({'c': 2})
+
+        def func_with_date(batch):
+            return pd.Series({'c': 2, 'b': datetime(2015, 1, 1)})
+
+        dfg_no_conversion = df.groupby(by=['a']).apply(func_with_no_date)
+        dfg_no_conversion_expected = pd.DataFrame({'c': 2}, index=[1])
+        dfg_no_conversion_expected.index.name = 'a'
+
+        dfg_conversion = df.groupby(by=['a']).apply(func_with_date)
+        dfg_conversion_expected = pd.DataFrame({'b': datetime(2015, 1, 1), 'c': 2}, index=[1])
+        dfg_conversion_expected.index.name = 'a'
+
+        self.assert_frame_equal(dfg_no_conversion, dfg_no_conversion_expected)
+        self.assert_frame_equal(dfg_conversion, dfg_conversion_expected)
+
     def test_len(self):
         df = tm.makeTimeDataFrame()
         grouped = df.groupby([lambda x: x.year,
