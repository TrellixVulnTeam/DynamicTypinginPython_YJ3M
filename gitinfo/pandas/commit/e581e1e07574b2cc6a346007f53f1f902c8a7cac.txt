commit e581e1e07574b2cc6a346007f53f1f902c8a7cac
Author: springcoil <peadarcoyle@googlemail.com>
Date:   Thu Aug 20 20:05:21 2015 +0200

    BUG: 10633 and 10800 fix

diff --git a/doc/source/whatsnew/v0.17.0.txt b/doc/source/whatsnew/v0.17.0.txt
index 77130343c..6b4bde588 100644
--- a/doc/source/whatsnew/v0.17.0.txt
+++ b/doc/source/whatsnew/v0.17.0.txt
@@ -679,6 +679,7 @@ Bug Fixes
 - Bug in ``to_datetime`` with invalid dates and formats supplied (:issue:`10154`)
 - Bug in ``Index.drop_duplicates`` dropping name(s) (:issue:`10115`)
 - Bug in ``pd.Series`` when setting a value on an empty ``Series`` whose index has a frequency. (:issue:`10193`)
+- Bug in ``pd.Series.interpolate`` with invalid ``order`` keyword values. (:issue:`10633`)
 - Bug in ``DataFrame.plot`` raises ``ValueError`` when color name is specified by multiple characters (:issue:`10387`)
 - Bug in ``Index`` construction with a mixed list of tuples (:issue:`10697`)
 - Bug in ``DataFrame.reset_index`` when index contains `NaT`. (:issue:`10388`)
diff --git a/pandas/core/common.py b/pandas/core/common.py
index 53cd5ca9a..0d74a4449 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -1718,6 +1718,9 @@ def _interpolate_scipy_wrapper(x, y, new_x, method, fill_value=None,
                                     bounds_error=bounds_error)
         new_y = terp(new_x)
     elif method == 'spline':
+        # GH #10633
+        if not order:
+            raise ValueError("order needs to be specified and greater than 0")
         terp = interpolate.UnivariateSpline(x, y, k=order, **kwargs)
         new_y = terp(new_x)
     else:
diff --git a/pandas/tests/test_generic.py b/pandas/tests/test_generic.py
index c1f6045c6..cfee33da5 100644
--- a/pandas/tests/test_generic.py
+++ b/pandas/tests/test_generic.py
@@ -374,7 +374,7 @@ class Generic(object):
 
             self._compare(o.sample(frac=0.7,random_state=np.random.RandomState(test)),
                           o.sample(frac=0.7, random_state=np.random.RandomState(test)))
- 
+
 
         # Check for error when random_state argument invalid.
         with tm.assertRaises(ValueError):
@@ -418,7 +418,7 @@ class Generic(object):
         with tm.assertRaises(ValueError):
             bad_weight_series = Series([0,0,0.2])
             o.sample(n=4, weights=bad_weight_series)
-            
+
         # Check won't accept negative weights
         with tm.assertRaises(ValueError):
             bad_weights = [-0.1]*10
@@ -545,7 +545,7 @@ class Generic(object):
         s = Series([1,0,0], index=[3,5,9])
         assert_frame_equal(df.loc[[3]], df.sample(1, weights=s))
 
-        # Weights have index values to be dropped because not in 
+        # Weights have index values to be dropped because not in
         # sampled DataFrame
         s2 = Series([0.001,0,10000], index=[3,5,10])
         assert_frame_equal(df.loc[[3]], df.sample(1, weights=s2))
@@ -1423,6 +1423,27 @@ class TestDataFrame(tm.TestCase, Generic):
         self.assertNotEqual(s.interpolate(method='spline', order=3, s=0)[5],
                             s.interpolate(method='spline', order=3)[5])
 
+    def test_spline_interpolation(self):
+        tm._skip_if_no_scipy()
+
+        s = Series(np.arange(10)**2)
+        s[np.random.randint(0,9,3)] = np.nan
+        result1 = s.interpolate(method='spline', order=1)
+        expected1 = s.interpolate(method='spline', order=1)
+        assert_series_equal(result1, expected1)
+
+    # GH #10633
+    def test_spline_error(self):
+        tm._skip_if_no_scipy()
+
+        s = pd.Series(np.arange(10)**2)
+        s[np.random.randint(0,9,3)] = np.nan
+        with tm.assertRaises(ValueError):
+            s.interpolate(method='spline')
+
+        with tm.assertRaises(ValueError):
+            s.interpolate(method='spline', order=0)
+
     def test_metadata_propagation_indiv(self):
 
         # groupby
