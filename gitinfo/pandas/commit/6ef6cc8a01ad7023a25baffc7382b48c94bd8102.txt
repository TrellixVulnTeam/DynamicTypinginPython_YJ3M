commit 6ef6cc8a01ad7023a25baffc7382b48c94bd8102
Author: Adam Klein <adamklein@gmail.com>
Date:   Thu Dec 29 18:38:48 2011 -0500

    more working on v0.6

diff --git a/doc/source/basics.rst b/doc/source/basics.rst
index 01dcc17f1..8d5dd6d88 100644
--- a/doc/source/basics.rst
+++ b/doc/source/basics.rst
@@ -292,6 +292,17 @@ will exclude NAs on Series input by default:
    np.mean(df['one'])
    np.mean(df['one'].values)
 
+``Series`` also has a method ``nunique`` which will return the number of unique
+non-null values:
+
+.. ipython:: python
+
+   series = Series(randn(500))
+   series[20:500] = np.nan
+   series[10:20]  = 5
+   series.nunique()
+
+
 Summarizing data: describe
 ~~~~~~~~~~~~~~~~~~~~~~~~~~
 
@@ -319,6 +330,8 @@ number of unique values and most frequently occurring values:
    s = Series(['a', 'a', 'b', 'b', 'a', 'a', np.nan, 'c', 'd', 'a'])
    s.describe()
 
+.. _basics.idxmin:
+
 Index of Min/Max Values
 ~~~~~~~~~~~~~~~~~~~~~~~
 
diff --git a/doc/source/dsintro.rst b/doc/source/dsintro.rst
index 007f0aa3e..65c09897d 100644
--- a/doc/source/dsintro.rst
+++ b/doc/source/dsintro.rst
@@ -211,7 +211,8 @@ pandas object. Like Series, DataFrame accepts many different kinds of input:
  - 2-D numpy.ndarray
  - `Structured or record
    <http://docs.scipy.org/doc/numpy/user/basics.rec.html>`__ ndarray
- - Another DataFrame
+ - A ``Series``
+ - Another ``DataFrame``
 
 Along with the data, you can optionally pass **index** (row labels) and
 **columns** (column labels) arguments. If you pass an index and / or columns,
@@ -225,9 +226,15 @@ based on common sense rules.
 Main constructor
 ~~~~~~~~~~~~~~~~
 
+**From a Series**
+
+The result will be a DataFrame with the same index as the input Series, and
+with one column whose name is the original name of the Series (only if no other
+column name provided).
+
 **From dict of Series or dicts**
 
-the result **index** will be the **union** of the indexes of the various
+The result **index** will be the **union** of the indexes of the various
 Series. If there are any nested dicts, these will be first converted to
 Series. If no columns are passed, the columns will be the sorted list of dict
 keys.
@@ -286,6 +293,14 @@ This case is handled identically to a dict of arrays.
     DataFrame is not intended to work exactly like a 2-dimensional NumPy
     ndarray.
 
+**Missing Data**
+
+Much more will be said on this topic in the :ref:`Missing data <missing_data>`
+section. To construct a DataFrame with missing data, use ``np.nan`` for those
+values which are missing. Alternatively, you may pass a ``numpy.MaskedArray``
+as the data argument to the DataFrame constructor, and its masked entries will
+be considered missing.
+
 Alternate Constructors
 ~~~~~~~~~~~~~~~~~~~~~~
 
diff --git a/doc/source/io.rst b/doc/source/io.rst
index 046c7a404..d8bbe7db1 100644
--- a/doc/source/io.rst
+++ b/doc/source/io.rst
@@ -15,11 +15,40 @@
    np.set_printoptions(precision=4, suppress=True)
    import matplotlib.pyplot as plt
    plt.close('all')
+   clipdf = DataFrame({'A':[1,2,3],'B':[4,5,6],'C':['p','q','r']}, 
+                      index=['x','y','z'])
 
 *******************************
 IO Tools (Text, CSV, HDF5, ...)
 *******************************
 
+Clipboard
+---------
+
+.. _io.clipboard:
+
+As of version 0.6, a handy way to grab data is to use the ``read_clipboard``
+method, which takes the contents of the clipboard buffer and passes them to the
+``read_table`` method described in the next section. For instance, you can copy
+the following text to the clipboard (CTRL-C on many operating systems):
+
+.. code-block:: python
+
+     A B C
+   x 1 4 p
+   y 2 5 q
+   z 3 6 r
+
+And then import the data directly to a DataFrame by calling:
+
+.. code-block:: python
+
+   clipdf = read_clipboard(sep='\s*')
+
+.. ipython:: python
+
+   clipdf
+
 CSV & Text files
 ----------------
 
@@ -33,7 +62,9 @@ data into a DataFrame object. They can take a number of arguments:
   - ``path_or_buffer``: Either a string path to a file, or any object with a
     ``read`` method (such as an open file or ``StringIO``).
   - ``sep``: A delimiter / separator to split fields on. `read_csv` is capable
-    of inferring the delimiter automatically in some cases by "sniffing"
+    of inferring the delimiter automatically in some cases by "sniffing." The
+    separator may be specified as a regular expression; for instance you may
+    use '\s*' to indicate arbitrary whitespace.
   - ``header``: row number to use as the column names, and the start of the data.
     Defaults to 0 (first row); specify None if there is no header row.
   - ``names``: List of column names to use. If passed, header will be
@@ -237,6 +268,42 @@ function takes a number of arguments. Only the first is required.
   - ``mode`` : Python write mode, default 'w'
   - ``sep`` : Field delimiter for the output file (default "'")
 
+Writing a formatted string
+~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+.. _io.formatting:
+
+The DataFrame object has an instance method ``to_string`` which allows control
+over the string representation of the object. All arguments are optional:
+
+  - ``buf`` default None, for example a StringIO object
+  - ``columns`` default None, which columns to write
+  - ``colSpace`` default None, number of spaces to write between columns
+  - ``na_rep`` default ``NaN``, representation of NA value
+  - ``formatters`` default None, a dictionary (by column) of functions each of
+    which takes a single argument and returns a formatted string
+  - ``float_format`` default None, a function which takes a single (float)
+    argument and returns a formatted string; to be applied to floats in the
+    DataFrame.
+  - ``sparsify`` default True, set to False for a DataFrame with a hierarchical
+    index to print every multiindex key at each row.
+  - ``index_names`` default True, will print the names of the indices
+
+The Series object also has a ``to_string`` method, but with only the ``buf``,
+``na_rep``, ``float_format`` arguments. There is also a ``length`` argument
+which, if set to ``True``, will additionally output the length of the Series.
+
+
+Writing to HTML format
+~~~~~~~~~~~~~~~~~~~~~
+
+.. _io.html:
+
+DataFrame object has an instance method ``to_html`` which renders the contents
+of the DataFrame as an html table. The function arguments are as in the method
+``to_string`` described above.
+
+
 Excel 2003 files
 ----------------
 
diff --git a/doc/source/visualization.rst b/doc/source/visualization.rst
index f343f4304..20b6660bf 100644
--- a/doc/source/visualization.rst
+++ b/doc/source/visualization.rst
@@ -119,3 +119,23 @@ subplots:
 
    @savefig frame_hist_ex.png width=4.5in
    df.diff().hist(color='k', alpha=0.5, bins=50)
+
+.. _visualization.box:
+
+Box-Plotting
+~~~~~~~~~~~~
+
+As of version 0.6.0, DataFrame has a ``boxplot`` method which allows you to
+visualize the distribution of values within each column.
+
+For instance, here is a boxplot representing five trials of 10 observations of
+a uniform random variable on [0,1).
+
+.. ipython:: python
+
+   df = DataFrame(np.random.rand(10,5))
+   plt.figure();
+
+   @savefig box_blot_ex.png width=4.5in
+   df.boxplot()
+
diff --git a/doc/source/whatsnew/v0.6.0.txt b/doc/source/whatsnew/v0.6.0.txt
index 380c19551..a8043c0f9 100644
--- a/doc/source/whatsnew/v0.6.0.txt
+++ b/doc/source/whatsnew/v0.6.0.txt
@@ -9,7 +9,7 @@ New Features
 - :ref:`Added <groupby.multiindex>` ``level`` parameter to group by level in Series and DataFrame descriptive statistics (PR313_)
 - :ref:`Added <basics.head_tail>` ``head`` and ``tail`` methods to Series, analogous to to DataFrame (PR296_)
 - :ref:`Added <indexing.boolean>` ``Series.isin`` function which checks if each value is contained in a passed sequence (GH289_)
-- Add ``float_format`` option to ``Series.to_string``
+- :ref:`Added <io.formatting>` ``float_format`` option to ``Series.to_string``
 - :ref:`Added <io.parse_dates>` ``skip_footer`` (GH291_) and ``converters`` (GH343_) options to ``read_csv`` and ``read_table``
 - Added proper, tested weighted least squares to standard and panel OLS (GH303_)
 - :ref:`Added <indexing.duplicate>` ``drop_duplicates`` and ``duplicated`` functions for removing duplicate DataFrame rows and checking for duplicate rows, respectively (GH319_)
@@ -25,14 +25,14 @@ New Features
 - :ref:`Added <indexing.basics.get_value>` fast ``get_value`` and ``put_value`` methods to DataFrame (GH360_)
 - :ref:`Added <computation.covariance>` ``cov`` instance methods to Series and DataFrame (GH194_, PR362_)
 - :ref:`Added <visualization.barplot>` ``kind='bar'`` option to ``DataFrame.plot`` (PR348_)
-- Add ``idxmin`` and ``idxmax`` functions to Series and DataFrame for computing index labels achieving maximum and minimum values (PR286_)
-- Add ``read_clipboard`` function for parsing DataFrame from OS clipboard, should work across platforms (GH300_)
-- Add ``nunique`` function to Series for counting unique elements (GH297_)
-- DataFrame constructor will use Series name if no columns passed (GH373_)
-- Support regular expressions and longer delimiters in read_table/read_csv, but does not handle quoted strings yet (GH364_)
-- Add ``DataFrame.to_html`` for formatting DataFrame to HTML (PR387_)
-- MaskedArray can be passed to DataFrame constructor and masked values will be converted to NaN (PR396_)
-- Add ``DataFrame.boxplot`` function (GH368_, others)
+- :ref:`Added <basics.idxmin>` ``idxmin`` and ``idxmax`` to Series and DataFrame (PR286_)
+- :ref:`Added <io.clipboard>` ``read_clipboard`` function to parse DataFrame from clipboard (GH300_)
+- :ref:`Added <basics.stats>` ``nunique`` function to Series for counting unique elements (GH297_)
+- :ref:`Made <basics.dataframe>` DataFrame constructor use Series name if no columns passed (GH373_)
+- :ref:`Support <io.parse_dates>` regular expressions in read_table/read_csv (GH364_)
+- :ref:`Added <io.html>` ``DataFrame.to_html`` for writing DataFrame to HTML (PR387_)
+- :ref:`Added <basics.dataframe>` support for MaskedArray data in DataFrame, masked values converted to NaN (PR396_)
+- :ref:`Added <visualization.box>` ``DataFrame.boxplot`` function (GH368_)
 - Can pass extra args, kwds to DataFrame.apply (GH376_)
 - Arithmetic methods like ``sum`` will attempt to sum dtype=object values by default instead of excluding them (GH382_)
 - Print level names in hierarchical index in Series repr (GH305_)
