commit 29d7914eff868c3b540441e3c0fc89b16f0f8ef2
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Nov 4 16:09:24 2011 -0400

    ENH: can pass an ndarray to DataFrame.join as the join key, GH #312

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 59d08334f..489006a09 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2209,9 +2209,11 @@ class DataFrame(NDFrame):
         ----------
         other : DataFrame
             Index should be similar to one of the columns in this one
-        on : string, default None
-            Column name to use, otherwise join on index. Just like an Excel
-            VLOOKUP operation
+        on : column name, tuple/list of column names, or array-like
+            Column(s) to use for joining, otherwise join on index. If multiples
+            columns given, the passed DataFrame must have a MultiIndex. Can
+            pass an array as the join key if not already contained in the
+            calling DataFrame. Like an Excel VLOOKUP operation
         how : {'left', 'right', 'outer', 'inner'}
             How to handle indexes of the two objects. Default: 'left'
             for joining on index, None otherwise
@@ -2250,6 +2252,8 @@ class DataFrame(NDFrame):
                 join_key = zip(*[self[k] for k in on])
                 join_key = common._asarray_tuplesafe(join_key,
                                                      dtype=np.object_)
+        elif isinstance(on, np.ndarray) and len(on) == len(self):
+            join_key = on
         else:
             join_key = self[on].values
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index dba75211e..6a19064ef 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3270,6 +3270,14 @@ class TestDataFrameJoin(unittest.TestCase):
         source_copy['A'] = 0
         self.assertRaises(Exception, target.join, source_copy, on='A')
 
+    def test_join_on_pass_vector(self):
+        expected = self.target.join(self.source, on='C')
+        del expected['C']
+
+        join_col = self.target.pop('C')
+        result = self.target.join(self.source, on=join_col)
+        assert_frame_equal(result, expected)
+
     def test_join_with_len0(self):
         # nothing to merge
         merged = self.target.join(self.source.reindex([]), on='C')
