commit 149294129f2da569fb9bbf8538a12e1e5a2636d3
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Dec 28 10:53:03 2011 -0500

    REF: more cleanup of LongPanel stuff

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 5bca2817f..519f98fb5 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -36,6 +36,7 @@ from pandas.util.decorators import deprecate
 
 import pandas.core.nanops as nanops
 import pandas.core.common as com
+import pandas.core.generic as generic
 import pandas.core.datetools as datetools
 import pandas._tseries as lib
 
@@ -1557,6 +1558,8 @@ class DataFrame(NDFrame):
         return self.reindex(index=other.index, columns=other.columns,
                             method=method, copy=copy)
 
+    truncate = generic.truncate
+
     def set_index(self, col_or_cols, drop=True, inplace=False):
         """
         Set the DataFrame index (row labels) using one or more existing
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index c0afb0c73..c7a365aba 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -118,47 +118,6 @@ class PandasObject(Picklable):
         from pandas.core.groupby import groupby
         return groupby(self, by, axis=axis, level=level, as_index=as_index)
 
-    index = None
-
-    def truncate(self, before=None, after=None):
-        """Function truncate a sorted DataFrame / Series before and/or after
-        some particular dates.
-
-        Parameters
-        ----------
-        before : date
-            Truncate before date
-        after : date
-            Truncate after date
-
-        Returns
-        -------
-        truncated : type of caller
-        """
-        before = datetools.to_datetime(before)
-        after = datetools.to_datetime(after)
-
-        if before is not None and after is not None:
-            assert(before <= after)
-
-        # returns view, want to copy
-        truncated = self.ix[before:after].copy()
-
-        # slice off chunks of level, adjust labels, a bit of an ugly hack to
-        # get the unit tests to pass
-        index = truncated.index
-        if isinstance(index, MultiIndex):
-            if index is self.index:
-                index = self.index.copy()
-            level = index.levels[0]
-            start, end = level.slice_locs(before, after)
-            index.levels[0] = level[start:end]
-            index.labels[0] = index.labels[0] - start
-
-            truncated.index = index
-
-        return truncated
-
     def select(self, crit, axis=0):
         """
         Return data corresponding to axis labels matching criteria
@@ -608,3 +567,37 @@ class NDFrame(PandasObject):
             new_data = self._data.take(indices, axis=axis)
         return self._constructor(new_data)
 
+# Good for either Series or DataFrame
+
+def truncate(self, before=None, after=None, copy=True):
+    """Function truncate a sorted DataFrame / Series before and/or after
+    some particular dates.
+
+    Parameters
+    ----------
+    before : date
+        Truncate before date
+    after : date
+        Truncate after date
+
+    Returns
+    -------
+    truncated : type of caller
+    """
+    before = datetools.to_datetime(before)
+    after = datetools.to_datetime(after)
+
+    if before is not None and after is not None:
+        assert(before <= after)
+
+    left, right = self.index.slice_locs(before, after)
+    result = self[left:right]
+
+    if isinstance(self.index, MultiIndex):
+        result.index = self.index.truncate(before, after)
+
+    if copy:
+        result = result.copy()
+
+    return result
+
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 794faef18..0c132a8b9 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -1161,51 +1161,6 @@ class Panel(NDFrame):
 WidePanel = Panel
 LongPanel = DataFrame
 
-def long_truncate(lp, before=None, after=None):
-    """
-    Slice panel between two major axis values, return complete DataFrame
-
-    Parameters
-    ----------
-    before : type of major_axis values or None, default None
-        None defaults to start of panel
-    after : type of major_axis values or None, default None
-        None defaults to end of panel
-
-    Returns
-    -------
-    DataFrame
-    """
-    left, right = lp.index.slice_locs(before, after)
-    new_index = lp.index.truncate(before, after)
-
-    return DataFrame(lp.values[left:right], columns=lp.columns,
-                     index=new_index)
-
-
-def long_apply(lp, f, axis='major', broadcast=False):
-    """
-    Aggregate over a particular axis
-
-    Parameters
-    ----------
-    f : function
-        NumPy function to apply to each group
-    axis : {'major', 'minor'}
-    broadcast : boolean
-
-    Returns
-    -------
-    applied : DataFrame
-    """
-    try:
-        return lp._apply_level(f, axis=axis, broadcast=broadcast)
-    except Exception:
-        # ufunc
-        new_values = f(lp.values)
-        return DataFrame(new_values, columns=lp.items, index=lp.index)
-
-
 def make_dummies(frame, item):
     """
     Use unique values in column of panel to construct DataFrame containing
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 830fa1da7..1885bab22 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -16,13 +16,13 @@ from pandas.core.common import (isnull, notnull, _is_bool_indexer,
                                 _default_index, _maybe_upcast,
                                 _asarray_tuplesafe)
 from pandas.core.daterange import DateRange
-from pandas.core.generic import PandasObject
 from pandas.core.index import Index, MultiIndex, _ensure_index
 from pandas.core.indexing import _SeriesIndexer, _maybe_droplevels
 from pandas.util import py3compat
 from pandas.util.terminal import get_terminal_size
 import pandas.core.common as com
 import pandas.core.datetools as datetools
+import pandas.core.generic as generic
 import pandas.core.nanops as nanops
 import pandas._tseries as lib
 import pandas._engines as _gin
@@ -129,7 +129,7 @@ def _add_stat_doc(f, name, shortname, na_action=_doc_exclude_na,
 #-------------------------------------------------------------------------------
 # Series class
 
-class Series(np.ndarray, PandasObject):
+class Series(np.ndarray, generic.PandasObject):
     _AXIS_NUMBERS = {
         'index' : 0
     }
@@ -1583,6 +1583,8 @@ copy : boolean, default False
         new_values = self.values.take(indices)
         return Series(new_values, index=new_index, name=self.name)
 
+    truncate = generic.truncate
+
     def fillna(self, value=None, method='pad'):
         """
         Fill NA/NaN values using the specified method
diff --git a/pandas/sparse/tests/test_sparse.py b/pandas/sparse/tests/test_sparse.py
index ef1b0a3d2..1339392e1 100644
--- a/pandas/sparse/tests/test_sparse.py
+++ b/pandas/sparse/tests/test_sparse.py
@@ -1115,7 +1115,7 @@ class TestSparseDataFrame(TestCase, test_frame.SafeForSparse):
             dense_frame = frame.to_dense()
 
             wp = Panel.from_dict({'foo' : frame})
-            from_dense_lp = wp.to_long()
+            from_dense_lp = wp.to_frame()
 
             from_sparse_lp = spf.stack_sparse_frame(frame)
 
@@ -1273,10 +1273,10 @@ class TestSparsePanel(TestCase,
         dwp2 = Panel.from_dict(self.data_dict)
         assert_panel_equal(dwp, dwp2)
 
-    def test_to_long(self):
+    def test_to_frame(self):
         def _compare_with_dense(panel):
-            slp = panel.to_long()
-            dlp = panel.to_dense().to_long()
+            slp = panel.to_frame()
+            dlp = panel.to_dense().to_frame()
 
             self.assert_(np.array_equal(slp.values, dlp.values))
             self.assert_(slp.index.equals(dlp.index))
@@ -1285,9 +1285,9 @@ class TestSparsePanel(TestCase,
         _compare_with_dense(self.panel.reindex(items=['ItemA']))
 
         zero_panel = SparsePanel(self.data_dict, default_fill_value=0)
-        self.assertRaises(Exception, zero_panel.to_long)
+        self.assertRaises(Exception, zero_panel.to_frame)
 
-        self.assertRaises(Exception, self.panel.to_long,
+        self.assertRaises(Exception, self.panel.to_frame,
                           filter_observations=False)
 
     def test_long_to_wide_sparse(self):
@@ -1379,7 +1379,7 @@ class TestSparsePanel(TestCase,
             _dense_comp(op5)
 
             # TODO: this case not yet supported!
-            # op6 = lambda x: x.add(x.to_long())
+            # op6 = lambda x: x.add(x.to_frame())
             # _dense_comp(op6)
 
         _check_ops(self.panel)
diff --git a/pandas/stats/interface.py b/pandas/stats/interface.py
index e6c1e3824..48c4fd6f6 100644
--- a/pandas/stats/interface.py
+++ b/pandas/stats/interface.py
@@ -13,8 +13,8 @@ def ols(**kwargs):
     y : Series, x : DataFrame -> OLS
     y : Series, x : dict of DataFrame -> OLS
     y : DataFrame, x : DataFrame -> PanelOLS
-    y : DataFrame, x : dict of DataFrame/Panel/LongPanel -> PanelOLS
-    y : Series with MultiIndex, x : Panel/LongPanel -> PanelOLS
+    y : DataFrame, x : dict of DataFrame/Panel -> PanelOLS
+    y : Series with MultiIndex, x : Panel/DataFrame + MultiIndex -> PanelOLS
 
     Parameters
     ----------
diff --git a/pandas/stats/plm.py b/pandas/stats/plm.py
index 2c597cc13..fe9b2fdb1 100644
--- a/pandas/stats/plm.py
+++ b/pandas/stats/plm.py
@@ -133,9 +133,9 @@ class PanelOLS(OLS):
             data['__weights__'] = self._weights
 
         # Filter x's without y (so we can make a prediction)
-        filtered = data.to_long()
+        filtered = data.to_frame()
 
-        # Filter all data together using to_long
+        # Filter all data together using to_frame
 
         # convert to DataFrame
         y = self._y_orig
@@ -143,7 +143,7 @@ class PanelOLS(OLS):
             y = y.unstack()
 
         data['__y__'] = y
-        data_long = data.to_long()
+        data_long = data.to_frame()
 
         x_filt = filtered.filter(x_names)
         x = data_long.filter(x_names)
@@ -189,11 +189,11 @@ class PanelOLS(OLS):
 
     def _add_dummies(self, panel, mapping):
         """
-        Add entity and / or categorical dummies to input X LongPanel
+        Add entity and / or categorical dummies to input X DataFrame
 
         Returns
         -------
-        LongPanel
+        DataFrame
         """
         panel = self._add_entity_effects(panel)
         panel = self._add_categorical_dummies(panel, mapping)
@@ -206,7 +206,7 @@ class PanelOLS(OLS):
 
         Returns
         -------
-        LongPanel
+        DataFrame
         """
         from pandas.core.panel import make_axis_dummies
 
@@ -242,7 +242,7 @@ class PanelOLS(OLS):
 
         Returns
         -------
-        LongPanel
+        DataFrame
         """
         from pandas.core.panel import make_dummies
 
@@ -457,7 +457,7 @@ def add_intercept(panel, name='intercept'):
 
     Parameters
     ----------
-    panel: Panel (Long or Wide)
+    panel: Panel / DataFrame
     name: string, default 'intercept']
 
     Returns
@@ -737,8 +737,6 @@ class NonPooledPanelOLS(object):
 def _var_beta_panel(y, x, beta, xx, rmse, cluster_axis,
                    nw_lags, nobs, df, nw_overlap):
     from pandas.core.frame import group_agg
-    from pandas.core.panel import LongPanel
-
     xx_inv = math.inv(xx)
 
     yv = y.values
@@ -755,8 +753,7 @@ def _var_beta_panel(y, x, beta, xx, rmse, cluster_axis,
             return np.dot(xx_inv, np.dot(xeps, xx_inv))
     else:
         Xb = np.dot(x.values, beta).reshape((len(x.values), 1))
-        resid = LongPanel(yv[:, None] - Xb, index=y.index,
-                          columns=['resid'])
+        resid = DataFrame(yv[:, None] - Xb, index=y.index, columns=['resid'])
 
         if cluster_axis == 1:
             x = x.swaplevel(0, 1).sortlevel(0)
diff --git a/pandas/stats/tests/test_ols.py b/pandas/stats/tests/test_ols.py
index 42c814da5..097c79966 100644
--- a/pandas/stats/tests/test_ols.py
+++ b/pandas/stats/tests/test_ols.py
@@ -286,7 +286,7 @@ class TestOLSMisc(unittest.TestCase):
 
     def test_longpanel_series_combo(self):
         wp = tm.makePanel()
-        lp = wp.to_long()
+        lp = wp.to_frame()
 
         y = lp.pop('ItemA')
         model = ols(y=y, x=lp, entity_effects=True, window=20)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 1532c7ed1..c4da54275 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2628,7 +2628,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         # pivot multiple columns
         wp = tm.makePanel()
-        lp = wp.to_long()
+        lp = wp.to_frame()
         df = lp.reset_index()
         assert_frame_equal(df.pivot('major', 'minor'), lp.unstack())
 
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 8693062bd..ecd82e994 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -11,7 +11,7 @@ import numpy as np
 from pandas import DataFrame, Index, isnull, notnull, pivot, MultiIndex
 from pandas.core.datetools import bday
 from pandas.core.frame import group_agg
-from pandas.core.panel import Panel, LongPanel
+from pandas.core.panel import Panel
 from pandas.core.series import remove_na
 import pandas.core.common as com
 import pandas.core.panel as panelmod
@@ -356,7 +356,7 @@ class CheckIndexing(object):
 
     def test_setitem(self):
         # LongPanel with one item
-        lp = self.panel.filter(['ItemA', 'ItemB']).to_long()
+        lp = self.panel.filter(['ItemA', 'ItemB']).to_frame()
         self.assertRaises(Exception, self.panel.__setitem__,
                           'ItemE', lp)
 
@@ -838,21 +838,21 @@ class TestPanel(unittest.TestCase, PanelTests, CheckIndexing,
         # this should also work
         self.assertRaises(Exception, self.panel.swapaxes, 'items', 'items')
 
-    def test_to_long(self):
+    def test_to_frame(self):
         # filtered
-        filtered = self.panel.to_long()
+        filtered = self.panel.to_frame()
 
         # unfiltered
-        unfiltered = self.panel.to_long(filter_observations=False)
+        unfiltered = self.panel.to_frame(filter_observations=False)
 
         assert_panel_equal(unfiltered.to_panel(), self.panel)
 
-    def test_to_long_mixed(self):
+    def test_to_frame_mixed(self):
         panel = self.panel.fillna(0)
         panel['str'] = 'foo'
         panel['bool'] = panel['ItemA'] > 0
 
-        lp = panel.to_long()
+        lp = panel.to_frame()
         wp = lp.to_panel()
         self.assertEqual(wp['bool'].values.dtype, np.bool_)
         assert_frame_equal(wp['bool'], panel['bool'])
@@ -962,8 +962,8 @@ class TestLongPanel(unittest.TestCase):
         panel = tm.makePanel()
         tm.add_nans(panel)
 
-        self.panel = panel.to_long()
-        self.unfiltered_panel = panel.to_long(filter_observations=False)
+        self.panel = panel.to_frame()
+        self.unfiltered_panel = panel.to_frame(filter_observations=False)
 
     def test_pickle(self):
         import cPickle
@@ -983,7 +983,7 @@ class TestLongPanel(unittest.TestCase):
         # trying to set non-identically indexed panel
         wp = self.panel.to_panel()
         wp2 = wp.reindex(major=wp.major_axis[:-1])
-        lp2 = wp2.to_long()
+        lp2 = wp2.to_frame()
 
         result = self.panel + lp2
         assert_frame_equal(result.reindex(lp2.index), lp2 * 2)
@@ -1074,7 +1074,7 @@ class TestLongPanel(unittest.TestCase):
 
         wp2 = wp.reindex(major=new_index)
 
-        lp2 = wp2.to_long()
+        lp2 = wp2.to_frame()
         lp_trunc = lp2.truncate(wp.major_axis[2], wp.major_axis[-2])
 
         wp_trunc = wp2.truncate(wp.major_axis[2], wp.major_axis[-2])
