commit b9aa410ea6c15b1ea6d1cc1db3a29e588f877f27
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jun 4 15:31:14 2012 -0400

    DOC: barebones but reasonably complete scikits.timeseries -> pandas migration guide. close #1273

diff --git a/doc/source/faq.rst b/doc/source/faq.rst
index 5d16a5e8c..e2c8b4dfd 100644
--- a/doc/source/faq.rst
+++ b/doc/source/faq.rst
@@ -5,6 +5,23 @@
 Frequently Asked Questions (FAQ)
 ********************************
 
+.. ipython:: python
+   :suppress:
+
+   from datetime import datetime
+   import numpy as np
+   np.random.seed(123456)
+   from pandas import *
+   randn = np.random.randn
+   randint = np.random.randint
+   np.set_printoptions(precision=4, suppress=True)
+   from dateutil.relativedelta import relativedelta
+   from pandas.tseries.api import *
+   from pandas.tseries.offsets import *
+   import matplotlib.pyplot as plt
+   plt.close('all')
+
+
 Migrating from scikits.timeseries to pandas >= 0.8.0
 ----------------------------------------------------
 
@@ -39,14 +56,16 @@ pandas ``Period`` and ``PeriodIndex``:
 
 .. ipython:: python
 
-    p = Period('1984Q3')
-    p
-    p.asfreq('D', 'start')
-    p.asfreq('D', 'end')
-    (p + 3).asfreq('T') + 6 * 60 + 30
-    rng = period_range('1990', '2010', freq='A')
-    rng
-    rng.asfreq('B', 'end') - 3
+   pnow('D')  # scikits.timeseries.now()
+   Period(year=2007, month=3, day=15, freq='D')
+   p = Period('1984Q3')
+   p
+   p.asfreq('D', 'start')
+   p.asfreq('D', 'end')
+   (p + 3).asfreq('T') + 6 * 60 + 30
+   rng = period_range('1990', '2010', freq='A')
+   rng
+   rng.asfreq('B', 'end') - 3
 
 .. csv-table::
     :header: "scikits.timeseries", "pandas", "Notes"
@@ -57,8 +76,99 @@ pandas ``Period`` and ``PeriodIndex``:
     convert, resample, "Frequency conversion in scikits.timeseries"
     convert_to_annual, pivot_annual, "currently supports up to daily frequency, see :issue:`736`"
 
+
+PeriodIndex / DateArray properties and functions
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+The scikits.timeseries ``DateArray`` had a number of information
+properties. Here are the pandas equivalents:
+
+.. csv-table::
+    :header: "scikits.timeseries", "pandas", "Notes"
+    :widths: 20, 60, 20
+
+    get_steps, ``np.diff(idx.values)``,
+    has_missing_dates, ``not idx.is_full``,
+    is_full, ``idx.is_full``,
+    is_valid, ``idx.is_monotonic and idx.is_unique``,
+    is_chronological, ``is_monotonic``,
+    ``arr.sort_chronologically()``, ``idx.order()``,
+
+Frequency conversion
+~~~~~~~~~~~~~~~~~~~~
+
+Frequency conversion is implemented using the ``resample`` method on TimeSeries
+and DataFrame objects (multiple time series). ``resample`` also works on panels
+(3D). Here is some code that resamples daily data to montly with
+scikits.timeseries:
+
+.. ipython:: python
+
+   import scikits.timeseries as ts
+   data = ts.time_series(np.random.randn(50), start_date='Jan-2000', freq='M')
+   data
+   data.convert('A', func=np.mean)
+
+Here is the equivalent pandas code:
+
+.. ipython:: python
+
+   rng = period_range('Jan-2000', periods=50, freq='M')
+   data = Series(np.random.randn(50), index=rng)
+   data
+   data.resample('A', how=np.mean)
+
+Plotting
+~~~~~~~~
+
+Much of the plotting functionality of scikits.timeseries has been ported and
+adopted to pandas's data structures. For example:
+
+.. ipython:: python
+
+   rng = period_range('1987Q2', periods=20, freq='Q-DEC')
+   data = Series(np.random.randn(20), index=rng)
+
+   @savefig skts_ts_plot.png width=4.5in
+   plt.figure(); data.plot()
+
 Converting to and from period format
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
+Use the ``to_timestamp`` and ``to_period`` instance methods.
+
+Treatment of missing data
+~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Unlike scikits.timeseries, pandas data structures are not based on NumPy's
+``MaskedArray`` object. Missing data is represented as ``NaN`` in numerical
+arrays and either as ``None`` or ``NaN`` in non-numerical arrays. Implementing
+a version of pandas's data structures that use MaskedArray is possible but
+would require the involvement of a dedicated maintainer. Active pandas
+developers are not interested in this.
+
 Resampling with timestamps and periods
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+``resample`` has a ``kind`` argument which allows you to resample time series
+with a DatetimeIndex to PeriodIndex:
+
+.. ipython:: python
+
+   rng = date_range('1/1/2000', periods=200, freq='D')
+   data = Series(np.random.randn(200), index=rng)
+   data[:10]
+   data.index
+   data.resample('M', kind='period')
+
+Similarly, resampling from periods to timestamps is possible with an optional
+interval (``'start'`` or ``'end'``) convention:
+
+.. ipython:: python
+
+   rng = period_range('Jan-2000', periods=50, freq='M')
+   data = Series(np.random.randn(50), index=rng)
+   resampled = data.resample('A', kind='timestamp', convention='end')
+   resampled.index
+
+
diff --git a/pandas/src/plib.pyx b/pandas/src/plib.pyx
index c7317ceb0..41870c3af 100644
--- a/pandas/src/plib.pyx
+++ b/pandas/src/plib.pyx
@@ -230,7 +230,7 @@ def period_format(int64_t value, int freq, object fmt=None):
         elif freq_group == 2000: # FR_QTR
             fmt = b'%FQ%q'
         elif freq_group == 3000: # FR_MTH
-            fmt = b'%b-Y'
+            fmt = b'%b-%Y'
         elif (freq_group == 4000 # WK
               or freq_group == 5000 # BUS
               or freq_group == 6000): # DAY
diff --git a/pandas/tseries/tests/test_period.py b/pandas/tseries/tests/test_period.py
index b28486df1..ccc3022dc 100644
--- a/pandas/tseries/tests/test_period.py
+++ b/pandas/tseries/tests/test_period.py
@@ -164,6 +164,10 @@ class TestPeriodProperties(TestCase):
         i1 = Period('1982', freq='Min')
         self.assert_(i1.freq[0] != '1')
 
+    def test_repr(self):
+        p = Period('Jan-2000')
+        self.assert_('Jan-2000' in repr(p))
+
     def test_to_timestamp(self):
         p = Period('1982', freq='A')
         start_ts = p.to_timestamp(how='S')
