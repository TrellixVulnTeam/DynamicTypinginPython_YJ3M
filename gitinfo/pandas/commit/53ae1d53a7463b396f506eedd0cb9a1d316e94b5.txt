commit 53ae1d53a7463b396f506eedd0cb9a1d316e94b5
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jun 28 20:00:15 2012 -0400

    BUG: fix MultiIndex indexing issues in #1537, python 2.5 api fix

diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 05678c974..0602f4574 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -361,7 +361,10 @@ class _NDFrameIndexer(object):
                 objarr = _check_bool_indexer(labels, obj)
                 return objarr
             else:
-                objarr = _asarray_tuplesafe(obj)
+                if isinstance(obj, Index):
+                    objarr = obj.values
+                else:
+                    objarr = _asarray_tuplesafe(obj)
 
                 # If have integer labels, defer to label-based indexing
                 if _is_integer_dtype(objarr) and not is_int_index:
diff --git a/pandas/core/series.py b/pandas/core/series.py
index a24b40cb1..1243a8501 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -477,7 +477,10 @@ copy : boolean, default False
             if not isinstance(key, (list, np.ndarray)):  # pragma: no cover
                 key = list(key)
 
-            key_type = lib.infer_dtype(key)
+            if isinstance(key, Index):
+                key_type = lib.infer_dtype(key.values)
+            else:
+                key_type = lib.infer_dtype(key)
 
             if key_type == 'integer':
                 if self.index.inferred_type == 'integer':
@@ -564,7 +567,10 @@ copy : boolean, default False
             if not isinstance(key, (list, np.ndarray)):
                 key = list(key)
 
-            key_type = lib.infer_dtype(key)
+            if isinstance(key, Index):
+                key_type = lib.infer_dtype(key.values)
+            else:
+                key_type = lib.infer_dtype(key)
 
             if key_type == 'integer':
                 if self.index.inferred_type == 'integer':
@@ -577,7 +583,10 @@ copy : boolean, default False
                 self._set_labels(key, value)
 
     def _set_labels(self, key, value):
-        key = _asarray_tuplesafe(key)
+        if isinstance(key, Index):
+            key = key.values
+        else:
+            key = _asarray_tuplesafe(key)
         indexer = self.index.get_indexer(key)
         mask = indexer == -1
         if mask.any():
diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index acfaae7c1..137bca5a5 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -1150,9 +1150,9 @@ class ExcelFile(object):
                     raise ImportError(_openpyxl_msg)
         else:
             import tempfile
-            fd  = tempfile.NamedTemporaryFile(delete=False)
+            fd  = tempfile.NamedTemporaryFile()
             fd.write(path_or_buf.read())
-            fd.close()
+            fd.seek(0)
 
             try:
                 import xlrd
@@ -1162,14 +1162,7 @@ class ExcelFile(object):
                 from openpyxl.reader.excel import load_workbook
                 self.book = load_workbook(fd.name, use_iterators=True)
 
-            self.tmpfile = fd.name
-
-    def __name__(self):
-        if self.tmpfile:
-            try:
-                os.remove(self.tmpfile)
-            except Exception:
-                pass
+            self.tmpfile = fd
 
     def __repr__(self):
         return object.__repr__(self)
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index 43f0a90b7..d2b27db68 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -1394,6 +1394,16 @@ x   q   30      3    -0.6662 -0.5243 -0.3580  0.89145  2.5838"""
         for how in ['left', 'right', 'outer']:
             df1.join(df2, how=how)
 
+    def test_set_column_scalar_with_ix(self):
+        subset = self.frame.index[[1, 4, 5]]
+
+        self.frame.ix[subset] = 99
+        self.assert_((self.frame.ix[subset].values == 99).all())
+
+        col = self.frame['B']
+        col[subset] = 97
+        self.assert_((self.frame.ix[subset, 'B'] == 97).all())
+
 if __name__ == '__main__':
 
     # unittest.main()
