commit f47516d50b670439929894cf6afbacdfa85855cf
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Wed Mar 18 17:02:06 2020 -0700

    BUG: Series.__getitem__ with downstream scalars (#32684)

diff --git a/doc/source/whatsnew/v1.1.0.rst b/doc/source/whatsnew/v1.1.0.rst
index 0d3a9a8f9..441c6cee3 100644
--- a/doc/source/whatsnew/v1.1.0.rst
+++ b/doc/source/whatsnew/v1.1.0.rst
@@ -303,6 +303,7 @@ Indexing
 - Bug in :meth:`Series.loc` and :meth:`DataFrame.loc` when indexing with an integer key on a object-dtype :class:`Index` that is not all-integers (:issue:`31905`)
 - Bug in :meth:`DataFrame.iloc.__setitem__` on a :class:`DataFrame` with duplicate columns incorrectly setting values for all matching columns (:issue:`15686`, :issue:`22036`)
 - Bug in :meth:`DataFrame.loc:` and :meth:`Series.loc` with a :class:`DatetimeIndex`, :class:`TimedeltaIndex`, or :class:`PeriodIndex` incorrectly allowing lookups of non-matching datetime-like dtypes (:issue:`32650`)
+- Bug in :meth:`Series.__getitem__` indexing with non-standard scalars, e.g. ``np.dtype`` (:issue:`32684`)
 
 Missing
 ^^^^^^^
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 8a6839b4f..21477cce4 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -926,6 +926,10 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         elif isinstance(key, tuple):
             return self._get_values_tuple(key)
 
+        elif not is_list_like(key):
+            # e.g. scalars that aren't recognized by lib.is_scalar, GH#32684
+            return self.loc[key]
+
         if not isinstance(key, (list, np.ndarray, ExtensionArray, Series, Index)):
             key = list(key)
 
diff --git a/pandas/tests/dtypes/test_inference.py b/pandas/tests/dtypes/test_inference.py
index e0fef833d..ab9916eea 100644
--- a/pandas/tests/dtypes/test_inference.py
+++ b/pandas/tests/dtypes/test_inference.py
@@ -1437,6 +1437,7 @@ class TestIsScalar:
         assert is_scalar(Period("2014-01-01"))
         assert is_scalar(Interval(left=0, right=1))
         assert is_scalar(DateOffset(days=1))
+        assert is_scalar(pd.offsets.Minute(3))
 
     def test_is_scalar_pandas_containers(self):
         assert not is_scalar(Series(dtype=object))
@@ -1445,6 +1446,11 @@ class TestIsScalar:
         assert not is_scalar(DataFrame([[1]]))
         assert not is_scalar(Index([]))
         assert not is_scalar(Index([1]))
+        assert not is_scalar(Categorical([]))
+        assert not is_scalar(DatetimeIndex([])._data)
+        assert not is_scalar(TimedeltaIndex([])._data)
+        assert not is_scalar(DatetimeIndex([])._data.to_period("D"))
+        assert not is_scalar(pd.array([1, 2, 3]))
 
     def test_is_scalar_number(self):
         # Number() is not recognied by PyNumber_Check, so by extension
diff --git a/pandas/tests/series/indexing/test_indexing.py b/pandas/tests/series/indexing/test_indexing.py
index 18fcbea68..5b3786e1a 100644
--- a/pandas/tests/series/indexing/test_indexing.py
+++ b/pandas/tests/series/indexing/test_indexing.py
@@ -923,3 +923,15 @@ def test_getitem_2d_no_warning():
     series = pd.Series([1, 2, 3], index=[1, 2, 3])
     with tm.assert_produces_warning(None):
         series[:, None]
+
+
+def test_getitem_unrecognized_scalar():
+    # GH#32684 a scalar key that is not recognized by lib.is_scalar
+
+    # a series that might be produced via `frame.dtypes`
+    ser = pd.Series([1, 2], index=[np.dtype("O"), np.dtype("i8")])
+
+    key = ser.index[1]
+
+    result = ser[key]
+    assert result == 2
