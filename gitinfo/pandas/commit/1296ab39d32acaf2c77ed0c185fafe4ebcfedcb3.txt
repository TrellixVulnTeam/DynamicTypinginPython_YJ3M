commit 1296ab39d32acaf2c77ed0c185fafe4ebcfedcb3
Author: Pawel Kordek <pawel.kordek@gmail.com>
Date:   Sat Apr 30 19:07:15 2016 +0200

    BUG: Return non-dates in xls date cells directly
    
    closes #10001
    closes #13042
    
    If there is a date column in excel in which there are cells with some big
    integers, that during parsing to date cause int/long overflow, issue a
    warning and convert the value to int or float.

diff --git a/doc/source/whatsnew/v0.18.2.txt b/doc/source/whatsnew/v0.18.2.txt
index ac9c1cf10..a5734dc1d 100644
--- a/doc/source/whatsnew/v0.18.2.txt
+++ b/doc/source/whatsnew/v0.18.2.txt
@@ -38,6 +38,7 @@ API changes
 ~~~~~~~~~~~
 
 
+- Non-convertible dates in an excel date column will be returned without conversion and the column will be ``object`` dtype, rather than raising an exception  (:issue:`10001`)
 
 
 
diff --git a/pandas/io/excel.py b/pandas/io/excel.py
index 642f322f1..4c26480a0 100644
--- a/pandas/io/excel.py
+++ b/pandas/io/excel.py
@@ -329,11 +329,15 @@ class ExcelFile(object):
                appropriate object"""
 
             if cell_typ == XL_CELL_DATE:
+
                 if xlrd_0_9_3:
                     # Use the newer xlrd datetime handling.
-                    cell_contents = xldate.xldate_as_datetime(cell_contents,
-                                                              epoch1904)
-
+                    try:
+                        cell_contents = \
+                            xldate.xldate_as_datetime(cell_contents,
+                                                      epoch1904)
+                    except OverflowError:
+                        return cell_contents
                     # Excel doesn't distinguish between dates and time,
                     # so we treat dates on the epoch as times only.
                     # Also, Excel supports 1900 and 1904 epochs.
@@ -346,7 +350,11 @@ class ExcelFile(object):
                                              cell_contents.microsecond)
                 else:
                     # Use the xlrd <= 0.9.2 date handling.
-                    dt = xldate.xldate_as_tuple(cell_contents, epoch1904)
+                    try:
+                        dt = xldate.xldate_as_tuple(cell_contents, epoch1904)
+
+                    except xldate.XLDateTooLarge:
+                        return cell_contents
 
                     if dt[0] < MINYEAR:
                         cell_contents = time(*dt[3:])
diff --git a/pandas/io/tests/data/testdateoverflow.xls b/pandas/io/tests/data/testdateoverflow.xls
new file mode 100644
index 000000000..d63942f1b
Binary files /dev/null and b/pandas/io/tests/data/testdateoverflow.xls differ
diff --git a/pandas/io/tests/data/testdateoverflow.xlsm b/pandas/io/tests/data/testdateoverflow.xlsm
new file mode 100644
index 000000000..020754969
Binary files /dev/null and b/pandas/io/tests/data/testdateoverflow.xlsm differ
diff --git a/pandas/io/tests/data/testdateoverflow.xlsx b/pandas/io/tests/data/testdateoverflow.xlsx
new file mode 100644
index 000000000..15f0e8825
Binary files /dev/null and b/pandas/io/tests/data/testdateoverflow.xlsx differ
diff --git a/pandas/io/tests/test_excel.py b/pandas/io/tests/test_excel.py
index 5dd764b47..af053450d 100644
--- a/pandas/io/tests/test_excel.py
+++ b/pandas/io/tests/test_excel.py
@@ -481,6 +481,16 @@ class ReadingTestsBase(SharedItems):
             tm.assert_frame_equal(xlsdf_no_head, refdf)
             tm.assert_frame_equal(xlsdf_with_head, refdf)
 
+    def test_date_conversion_overflow(self):
+        # GH 10001 : pandas.ExcelFile ignore parse_dates=False
+        expected = pd.DataFrame([[pd.Timestamp('2016-03-12'), 'Marc Johnson'],
+                                 [pd.Timestamp('2016-03-16'), 'Jack Black'],
+                                 [1e+20, 'Timothy Brown']],
+                                columns=['DateColWithBigInt', 'StringCol'])
+
+        result = self.get_exceldf('testdateoverflow')
+        tm.assert_frame_equal(result, expected)
+
 
 class XlrdTests(ReadingTestsBase):
     """
