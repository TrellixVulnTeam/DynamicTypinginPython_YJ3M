commit dc67be8a254d8e12d71223aec5407e6f352d2fca
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Aug 16 14:16:49 2011 -0400

    ENH: accept arbitrary iterables in fancy indexing

diff --git a/pandas/core/index.py b/pandas/core/index.py
index f542fe26d..d867fecf5 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -45,6 +45,9 @@ class Index(np.ndarray):
             raise ValueError('Index(...) must be called with a collection '
                              'of some kind, %s was passed' % repr(data))
         else:
+            # other iterable of some kind
+            if not isinstance(data, (list, tuple)):
+                data = list(data)
             subarr = np.empty(len(data), dtype=dtype)
             subarr[:] = data
         return subarr.view(cls)
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index f906ebcaa..d487c3f76 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -97,7 +97,7 @@ class _DataFrameIndexer(object):
         elif isinstance(key, tuple):
             return self._getitem_tuple(key)
         elif _is_list_like(key):
-            return self._fancy_getitem(key, axis=0)
+            return self._fancy_getitem_iterable(key, axis=0)
         else:
             return self._fancy_getitem_axis(key, axis=0)
 
@@ -194,7 +194,7 @@ class _DataFrameIndexer(object):
         if isinstance(key, slice):
             return self._get_slice_axis(key, axis=axis)
         elif _is_list_like(key):
-            return self._fancy_getitem(key, axis=axis)
+            return self._fancy_getitem_iterable(key, axis=axis)
         elif axis == 0:
             is_int_index = _is_integer_index(self.frame.index)
 
@@ -213,7 +213,7 @@ class _DataFrameIndexer(object):
                 col = self.frame.columns[key]
             return self.frame[col]
 
-    def _fancy_getitem(self, key, axis=0):
+    def _fancy_getitem_iterable(self, key, axis=0):
         from pandas.core.series import Series
 
         labels = self.frame._get_axis(axis)
@@ -230,9 +230,9 @@ class _DataFrameIndexer(object):
             return self.frame.reindex(**{axis_name : labels[np.asarray(key)]})
         else:
             if _is_integer_dtype(keyarr) and not _is_integer_index(labels):
-                key = labels.take(keyarr)
+                keyarr = labels.take(keyarr)
 
-            return self.frame.reindex(**{axis_name : key})
+            return self.frame.reindex(**{axis_name : keyarr})
 
     def _get_slice_axis(self, slice_obj, axis=0):
         frame = self.frame
@@ -290,7 +290,7 @@ def _is_label_like(key):
     return not isinstance(key, slice) and not _is_list_like(key)
 
 def _is_list_like(obj):
-    return isinstance(obj, (list, np.ndarray))
+    return np.iterable(obj) and not isinstance(obj, basestring)
 
 def _is_label_slice(labels, obj):
     def crit(x):
@@ -314,8 +314,14 @@ def _maybe_droplevels(index, key):
     return index
 
 def _asarray_tuplesafe(values):
+    if not isinstance(values, (list, np.ndarray)):
+        values = list(values)
+
     result = np.asarray(values)
 
+    if issubclass(result.dtype.type, basestring):
+        result = np.asarray(values, dtype=object)
+
     if result.ndim == 2:
         result = np.empty(len(values), dtype=object)
         result[:] = values
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index bbde18deb..74f1ff78a 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -45,6 +45,12 @@ class CheckIndexing(object):
         self.assert_('random' not in self.frame)
         self.assertRaises(Exception, self.frame.__getitem__, 'random')
 
+    def test_getitem_iterator(self):
+        idx = iter(['A', 'B', 'C'])
+        result = self.frame.ix[:, idx]
+        expected = self.frame.ix[:, ['A', 'B', 'C']]
+        assert_frame_equal(result, expected)
+
     def test_getitem_boolean(self):
         # boolean indexing
         d = self.tsframe.index[10]
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index ae4179c45..6720199ff 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -141,10 +141,9 @@ class TestSeries(unittest.TestCase):
 
         # missing
         d = self.ts.index[0] - datetools.bday
-        self.assertRaises(Exception, self.ts.__getitem__, d),
+        self.assertRaises(KeyError, self.ts.__getitem__, d)
 
     def test_getitem_regression(self):
-        from pandas import Series
         s = Series(range(5), index=range(5))
         result = s[range(5)]
         assert_series_equal(result, s)
@@ -263,6 +262,11 @@ class TestSeries(unittest.TestCase):
         self.assertEquals(self.series.ix[d1], self.series[d1])
         self.assertEquals(self.series.ix[d2], self.series[d2])
 
+    def test_ix_getitem_iterator(self):
+        idx = iter(self.series.index[:10])
+        result = self.series.ix[idx]
+        assert_series_equal(result, self.series[:10])
+
     def test_ix_setitem(self):
         inds = self.series.index[[3,4,7]]
 
