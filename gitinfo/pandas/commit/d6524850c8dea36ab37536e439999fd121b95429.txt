commit d6524850c8dea36ab37536e439999fd121b95429
Author: Joris Van den Bossche <jorisvandenbossche@gmail.com>
Date:   Sat Mar 4 10:37:58 2017 -0500

    Revert FrozenList changes (doc build slowdown, #15559)
    
    See #15559. This temporarily reverts #15506, to see if this fixes the
    doc build slowdown.
    
    Author: Joris Van den Bossche <jorisvandenbossche@gmail.com>
    
    Closes #15566 from jorisvandenbossche/revert and squashes the following commits:
    
    befd858 [Joris Van den Bossche] Revert "ENH: Added FrozenList difference setop"
    527ded9 [Joris Van den Bossche] Revert "TST: remove deprecated usages of FrozenList.__add__ from test code"

diff --git a/doc/source/groupby.rst b/doc/source/groupby.rst
index 2d406de7c..8484ccd69 100644
--- a/doc/source/groupby.rst
+++ b/doc/source/groupby.rst
@@ -126,16 +126,6 @@ We could naturally group by either the ``A`` or ``B`` columns or both:
    grouped = df.groupby('A')
    grouped = df.groupby(['A', 'B'])
 
-.. versionadded:: 0.20
-
-If we also have a MultiIndex on columns ``A`` and ``B``, we can group by all
-but the specified columns.
-
-.. ipython:: python
-
-   df2 = df.set_index(['A', 'B'])
-   grouped = df2.groupby(level=df2.index.names.difference(['B'])
-
 These will split the DataFrame on its index (rows). We could also split by the
 columns:
 
diff --git a/doc/source/whatsnew/v0.20.0.txt b/doc/source/whatsnew/v0.20.0.txt
index eac187b52..1ba327a4e 100644
--- a/doc/source/whatsnew/v0.20.0.txt
+++ b/doc/source/whatsnew/v0.20.0.txt
@@ -29,7 +29,6 @@ New features
 
 - Integration with the ``feather-format``, including a new top-level ``pd.read_feather()`` and ``DataFrame.to_feather()`` method, see :ref:`here <io.feather>`.
 - ``.str.replace`` now accepts a callable, as replacement, which is passed to ``re.sub`` (:issue:`15055`)
-- ``FrozenList`` has gained the ``.difference()`` setop method (:issue:`15475`)
 
 
 
@@ -601,7 +600,6 @@ Deprecations
 - ``Series.sortlevel`` and ``DataFrame.sortlevel`` have been deprecated in favor of ``Series.sort_index`` and ``DataFrame.sort_index`` (:issue:`15099`)
 - importing ``concat`` from ``pandas.tools.merge`` has been deprecated in favor of imports from the ``pandas`` namespace. This should only affect explict imports (:issue:`15358`)
 - ``Series/DataFrame/Panel.consolidate()`` been deprecated as a public method. (:issue:`15483`)
-- ``FrozenList`` addition (new object and inplace) have been deprecated in favor of the ``.union()`` method. (:issue: `15475`)
 - The following top-level pandas functions have been deprecated and will be removed in a future version (:issue:`13790`)
   * ``pd.pnow()``, replaced by ``Period.now()``
   * ``pd.Term``, is removed, as it is not applicable to user code. Instead use in-line string expressions in the where clause when searching in HDFStore
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index c5ea51322..4a6c6cf29 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -940,9 +940,9 @@ class Panel(NDFrame):
             minor_labels, minor_levels, minor_names = construct_index_parts(
                 self.minor_axis, major=False)
 
-        levels = list(major_levels) + list(minor_levels)
-        labels = list(major_labels) + list(minor_labels)
-        names = list(major_names) + list(minor_names)
+        levels = major_levels + minor_levels
+        labels = major_labels + minor_labels
+        names = major_names + minor_names
 
         index = MultiIndex(levels=levels, labels=labels, names=names,
                            verify_integrity=False)
diff --git a/pandas/core/reshape.py b/pandas/core/reshape.py
index faad6c500..87cb088c2 100644
--- a/pandas/core/reshape.py
+++ b/pandas/core/reshape.py
@@ -216,8 +216,8 @@ class _Unstacker(object):
         width = len(self.value_columns)
         propagator = np.repeat(np.arange(width), stride)
         if isinstance(self.value_columns, MultiIndex):
-            new_levels = self.value_columns.levels.union((self.removed_level,))
-            new_names = self.value_columns.names.union((self.removed_name,))
+            new_levels = self.value_columns.levels + (self.removed_level,)
+            new_names = self.value_columns.names + (self.removed_name,)
 
             new_labels = [lab.take(propagator)
                           for lab in self.value_columns.labels]
@@ -806,7 +806,7 @@ def melt(frame, id_vars=None, value_vars=None, var_name=None,
     for col in id_vars:
         mdata[col] = np.tile(frame.pop(col).values, K)
 
-    mcolumns = list(id_vars) + list(var_name) + list([value_name])
+    mcolumns = id_vars + var_name + [value_name]
 
     mdata[value_name] = frame.values.ravel('F')
     for i, col in enumerate(var_name):
diff --git a/pandas/core/strings.py b/pandas/core/strings.py
index 51016926d..ac8d1db6a 100644
--- a/pandas/core/strings.py
+++ b/pandas/core/strings.py
@@ -787,7 +787,7 @@ def str_extractall(arr, pat, flags=0):
     if 0 < len(index_list):
         from pandas import MultiIndex
         index = MultiIndex.from_tuples(
-            index_list, names=arr.index.names.union(["match"]))
+            index_list, names=arr.index.names + ["match"])
     else:
         index = None
     result = arr._constructor_expanddim(match_list, index=index,
diff --git a/pandas/indexes/frozen.py b/pandas/indexes/frozen.py
index 47e255733..e043ba64b 100644
--- a/pandas/indexes/frozen.py
+++ b/pandas/indexes/frozen.py
@@ -13,8 +13,6 @@ from pandas.core.base import PandasObject
 from pandas.types.cast import _coerce_indexer_dtype
 from pandas.formats.printing import pprint_thing
 
-import warnings
-
 
 class FrozenList(PandasObject, list):
 
@@ -27,14 +25,11 @@ class FrozenList(PandasObject, list):
     #           typechecks
 
     def __add__(self, other):
-        warnings.warn("__add__ is deprecated, use union(...)", FutureWarning)
-        return self.union(other)
-
-    def __iadd__(self, other):
-        warnings.warn("__iadd__ is deprecated, use union(...)", FutureWarning)
         if isinstance(other, tuple):
             other = list(other)
-        return super(FrozenList, self).__iadd__(other)
+        return self.__class__(super(FrozenList, self).__add__(other))
+
+    __iadd__ = __add__
 
     # Python 2 compat
     def __getslice__(self, i, j):
@@ -85,19 +80,6 @@ class FrozenList(PandasObject, list):
     __setitem__ = __setslice__ = __delitem__ = __delslice__ = _disabled
     pop = append = extend = remove = sort = insert = _disabled
 
-    def union(self, other):
-        """Returns a FrozenList with other concatenated to the end of self"""
-        if isinstance(other, tuple):
-            other = list(other)
-        return self.__class__(super(FrozenList, self).__add__(other))
-
-    def difference(self, other):
-        """Returns a FrozenList with the same elements as self, but with elements
-        that are also in other removed."""
-        other = set(other)
-        temp = [x for x in self if x not in other]
-        return self.__class__(temp)
-
 
 class FrozenNDArray(PandasObject, np.ndarray):
 
diff --git a/pandas/tests/groupby/test_value_counts.py b/pandas/tests/groupby/test_value_counts.py
index ff01df269..801d0da07 100644
--- a/pandas/tests/groupby/test_value_counts.py
+++ b/pandas/tests/groupby/test_value_counts.py
@@ -28,7 +28,7 @@ def test_series_groupby_value_counts(n, m):
 
             gr = df.groupby(keys, sort=isort)
             right = gr['3rd'].apply(Series.value_counts, **kwargs)
-            right.index.names = right.index.names[:-1].union(['3rd'])
+            right.index.names = right.index.names[:-1] + ['3rd']
 
             # have to sort on index because of unstable sort on values
             left, right = map(rebuild_index, (left, right))  # xref GH9212
diff --git a/pandas/tests/indexes/test_frozen.py b/pandas/tests/indexes/test_frozen.py
index a5fbf066a..a82409fbf 100644
--- a/pandas/tests/indexes/test_frozen.py
+++ b/pandas/tests/indexes/test_frozen.py
@@ -15,35 +15,20 @@ class TestFrozenList(CheckImmutable, CheckStringMixin, tm.TestCase):
         self.klass = FrozenList
 
     def test_add(self):
-        q = FrozenList([1])
-        with tm.assert_produces_warning(FutureWarning,
-                                        check_stacklevel=False):
-            q = q + [2, 3]
-        expected = FrozenList([1, 2, 3])
-        self.check_result(q, expected)
-
-    def test_iadd(self):
-        q = FrozenList([1])
-        with tm.assert_produces_warning(FutureWarning,
-                                        check_stacklevel=False):
-            q += [2, 3]
-        expected = FrozenList([1, 2, 3])
-        self.check_result(q, expected)
-
-    def test_union(self):
-        result = self.container.union((1, 2, 3))
+        result = self.container + (1, 2, 3)
         expected = FrozenList(self.lst + [1, 2, 3])
         self.check_result(result, expected)
 
-    def test_difference(self):
-        result = self.container.difference([2])
-        expected = FrozenList([1, 3, 4, 5])
+        result = (1, 2, 3) + self.container
+        expected = FrozenList([1, 2, 3] + self.lst)
         self.check_result(result, expected)
 
-    def test_difference_dupe(self):
-        result = FrozenList([1, 2, 3, 2]).difference([2])
-        expected = FrozenList([1, 3])
-        self.check_result(result, expected)
+    def test_inplace(self):
+        q = r = self.container
+        q += [5]
+        self.check_result(q, self.lst + [5])
+        # other shouldn't be mutated
+        self.check_result(r, self.lst)
 
 
 class TestFrozenNDArray(CheckImmutable, CheckStringMixin, tm.TestCase):
diff --git a/pandas/tools/concat.py b/pandas/tools/concat.py
index ae9d7af9d..640510611 100644
--- a/pandas/tools/concat.py
+++ b/pandas/tools/concat.py
@@ -574,7 +574,7 @@ def _make_concat_multiindex(indexes, keys, levels=None, names=None):
                                      " not have the same number of levels")
 
             # also copies
-            names = list(names) + list(_get_consensus_names(indexes))
+            names = names + _get_consensus_names(indexes)
 
         return MultiIndex(levels=levels, labels=label_list, names=names,
                           verify_integrity=False)
diff --git a/test_fast.sh b/test_fast.sh
index f22ab7327..30ac7f84c 100755
--- a/test_fast.sh
+++ b/test_fast.sh
@@ -5,4 +5,4 @@
 # https://github.com/pytest-dev/pytest/issues/1075
 export PYTHONHASHSEED=$(python -c 'import random; print(random.randint(1, 4294967295))')
 
-pytest pandas --skip-slow --skip-network -m "not single" -n 4 $@
+pytest pandas --skip-slow --skip-network -m "not single" -n 4
