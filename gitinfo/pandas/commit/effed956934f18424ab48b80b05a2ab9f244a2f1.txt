commit effed956934f18424ab48b80b05a2ab9f244a2f1
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Jun 5 11:41:47 2012 -0400

    API: don't check for duplicate by default in Series.append/DataFrame.append, close #1394

diff --git a/RELEASE.rst b/RELEASE.rst
index a3cbf81bd..2625e24e2 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -129,6 +129,8 @@ pandas 0.8.0
   - Default merge suffixes for overlap now have underscores instead of periods
     to facilitate tab completion, etc. (#1239)
   - Deprecation of offset, time_rule timeRule parameters throughout codebase
+  - Series.append and DataFrame.append no longer check for duplicate indexes
+    by default, add verify_integrity parameter (#1394)
 
 **Bug fixes**
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 03a9f364e..48b144018 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -3681,7 +3681,7 @@ class DataFrame(NDFrame):
     #----------------------------------------------------------------------
     # Merging / joining methods
 
-    def append(self, other, ignore_index=False, verify_integrity=True):
+    def append(self, other, ignore_index=False, verify_integrity=False):
         """
         Append columns of other to end of this frame's columns and index,
         returning a new object.  Columns not in this frame are added as new
@@ -3693,6 +3693,8 @@ class DataFrame(NDFrame):
         ignore_index : boolean, default False
             If True do not use the index labels. Useful for gluing together
             record arrays
+        verify_integrity : boolean, default False
+            If True, raise Exception on creating index with duplicates
 
         Notes
         -----
diff --git a/pandas/core/series.py b/pandas/core/series.py
index fae765adf..e098bd0b5 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1546,13 +1546,15 @@ copy : boolean, default False
 #-------------------------------------------------------------------------------
 # Combination
 
-    def append(self, to_append):
+    def append(self, to_append, verify_integrity=False):
         """
         Concatenate two or more Series. The indexes must not overlap
 
         Parameters
         ----------
         to_append : Series or list/tuple of Series
+        verify_integrity : boolean, default False
+            If True, raise Exception on creating index with duplicates
 
         Returns
         -------
@@ -1563,7 +1565,8 @@ copy : boolean, default False
             to_concat = [self] + to_append
         else:
             to_concat = [self, to_append]
-        return concat(to_concat, ignore_index=False, verify_integrity=True)
+        return concat(to_concat, ignore_index=False,
+                      verify_integrity=verify_integrity)
 
     def _binop(self, other, func, level=None, fill_value=None):
         """
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 349177ac4..cfb7138ab 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3328,12 +3328,13 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
                        columns=['foo', 'bar', 'baz', 'qux'])
 
         series = df.ix[4]
-        self.assertRaises(Exception, df.append, series)
+        self.assertRaises(Exception, df.append, series, verify_integrity=True)
         series.name = None
-        self.assertRaises(Exception, df.append, series)
+        self.assertRaises(Exception, df.append, series, verify_integrity=True)
 
         result = df.append(series[::-1], ignore_index=True)
-        expected = df.append(DataFrame({0 : series[::-1]}, index=df.columns).T, ignore_index=True)
+        expected = df.append(DataFrame({0 : series[::-1]}, index=df.columns).T,
+                             ignore_index=True)
         assert_frame_equal(result, expected)
 
         # dict
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index f0deaf289..28a9a2ed3 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -1212,7 +1212,8 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
             else:
                 self.fail("orphaned index!")
 
-        self.assertRaises(Exception, self.ts.append, self.ts)
+        self.assertRaises(Exception, self.ts.append, self.ts,
+                          verify_integrity=True)
 
     def test_append_many(self):
         pieces = [self.ts[:5], self.ts[5:10], self.ts[10:]]
diff --git a/pandas/tools/tests/test_merge.py b/pandas/tools/tests/test_merge.py
index 35530a4bb..0600fe9df 100644
--- a/pandas/tools/tests/test_merge.py
+++ b/pandas/tools/tests/test_merge.py
@@ -848,7 +848,8 @@ class TestConcatenate(unittest.TestCase):
         self.assert_(appended is not self.frame)
 
         # overlap
-        self.assertRaises(Exception, self.frame.append, self.frame)
+        self.assertRaises(Exception, self.frame.append, self.frame,
+                          verify_integrity=True)
 
     def test_append_length0_frame(self):
         df = DataFrame(columns=['A', 'B', 'C'])
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 97aba73dc..a366da780 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -555,6 +555,10 @@ class DatetimeIndex(Int64Index):
         else:
             return Index(np.concatenate(to_concat), name=name)
 
+    def get_duplicates(self):
+        values = Index.get_duplicates(self)
+        return DatetimeIndex(values)
+
     def astype(self, dtype):
         dtype = np.dtype(dtype)
 
diff --git a/pandas/tseries/tests/test_cursor.py b/pandas/tseries/tests/test_cursor.py
new file mode 100644
index 000000000..ffada1876
--- /dev/null
+++ b/pandas/tseries/tests/test_cursor.py
@@ -0,0 +1,196 @@
+
+"""
+
+class TestNewOffsets(unittest.TestCase):
+
+    def test_yearoffset(self):
+        off = lib.YearOffset(dayoffset=0, biz=0, anchor=datetime(2002,1,1))
+
+        for i in range(500):
+            t = lib.Timestamp(off.ts)
+            self.assert_(t.day == 1)
+            self.assert_(t.month == 1)
+            self.assert_(t.year == 2002 + i)
+            off.next()
+
+        for i in range(499, -1, -1):
+            off.prev()
+            t = lib.Timestamp(off.ts)
+            self.assert_(t.day == 1)
+            self.assert_(t.month == 1)
+            self.assert_(t.year == 2002 + i)
+
+        off = lib.YearOffset(dayoffset=-1, biz=0, anchor=datetime(2002,1,1))
+
+        for i in range(500):
+            t = lib.Timestamp(off.ts)
+            self.assert_(t.month == 12)
+            self.assert_(t.day == 31)
+            self.assert_(t.year == 2001 + i)
+            off.next()
+
+        for i in range(499, -1, -1):
+            off.prev()
+            t = lib.Timestamp(off.ts)
+            self.assert_(t.month == 12)
+            self.assert_(t.day == 31)
+            self.assert_(t.year == 2001 + i)
+
+        off = lib.YearOffset(dayoffset=-1, biz=-1, anchor=datetime(2002,1,1))
+
+        stack = []
+
+        for i in range(500):
+            t = lib.Timestamp(off.ts)
+            stack.append(t)
+            self.assert_(t.month == 12)
+            self.assert_(t.day == 31 or t.day == 30 or t.day == 29)
+            self.assert_(t.year == 2001 + i)
+            self.assert_(t.weekday() < 5)
+            off.next()
+
+        for i in range(499, -1, -1):
+            off.prev()
+            t = lib.Timestamp(off.ts)
+            self.assert_(t == stack.pop())
+            self.assert_(t.month == 12)
+            self.assert_(t.day == 31 or t.day == 30 or t.day == 29)
+            self.assert_(t.year == 2001 + i)
+            self.assert_(t.weekday() < 5)
+
+    def test_monthoffset(self):
+        off = lib.MonthOffset(dayoffset=0, biz=0, anchor=datetime(2002,1,1))
+
+        for i in range(12):
+            t = lib.Timestamp(off.ts)
+            self.assert_(t.day == 1)
+            self.assert_(t.month == 1 + i)
+            self.assert_(t.year == 2002)
+            off.next()
+
+        for i in range(11, -1, -1):
+            off.prev()
+            t = lib.Timestamp(off.ts)
+            self.assert_(t.day == 1)
+            self.assert_(t.month == 1 + i)
+            self.assert_(t.year == 2002)
+
+        off = lib.MonthOffset(dayoffset=-1, biz=0, anchor=datetime(2002,1,1))
+
+        for i in range(12):
+            t = lib.Timestamp(off.ts)
+            self.assert_(t.day >= 28)
+            self.assert_(t.month == (12 if i == 0 else i))
+            self.assert_(t.year == 2001 + (i != 0))
+            off.next()
+
+        for i in range(11, -1, -1):
+            off.prev()
+            t = lib.Timestamp(off.ts)
+            self.assert_(t.day >= 28)
+            self.assert_(t.month == (12 if i == 0 else i))
+            self.assert_(t.year == 2001 + (i != 0))
+
+        off = lib.MonthOffset(dayoffset=-1, biz=-1, anchor=datetime(2002,1,1))
+
+        stack = []
+
+        for i in range(500):
+            t = lib.Timestamp(off.ts)
+            stack.append(t)
+            if t.month != 2:
+                self.assert_(t.day >= 28)
+            else:
+                self.assert_(t.day >= 26)
+            self.assert_(t.weekday() < 5)
+            off.next()
+
+        for i in range(499, -1, -1):
+            off.prev()
+            t = lib.Timestamp(off.ts)
+            self.assert_(t == stack.pop())
+            if t.month != 2:
+                self.assert_(t.day >= 28)
+            else:
+                self.assert_(t.day >= 26)
+            self.assert_(t.weekday() < 5)
+
+        for i in (-2, -1, 1, 2):
+            for j in (-1, 0, 1):
+                off1 = lib.MonthOffset(dayoffset=i, biz=j, stride=12,
+                                       anchor=datetime(2002,1,1))
+                off2 = lib.YearOffset(dayoffset=i, biz=j,
+                                      anchor=datetime(2002,1,1))
+
+                for k in range(500):
+                    self.assert_(off1.ts == off2.ts)
+                    off1.next()
+                    off2.next()
+
+                for k in range(500):
+                    self.assert_(off1.ts == off2.ts)
+                    off1.prev()
+                    off2.prev()
+
+    def test_dayoffset(self):
+        off = lib.DayOffset(biz=0, anchor=datetime(2002,1,1))
+
+        us_in_day = 1e6 * 60 * 60 * 24
+
+        t0 = lib.Timestamp(off.ts)
+        for i in range(500):
+            off.next()
+            t1 = lib.Timestamp(off.ts)
+            self.assert_(t1.value - t0.value == us_in_day)
+            t0 = t1
+
+        t0 = lib.Timestamp(off.ts)
+        for i in range(499, -1, -1):
+            off.prev()
+            t1 = lib.Timestamp(off.ts)
+            self.assert_(t0.value - t1.value == us_in_day)
+            t0 = t1
+
+        off = lib.DayOffset(biz=1, anchor=datetime(2002,1,1))
+
+        t0 = lib.Timestamp(off.ts)
+        for i in range(500):
+            off.next()
+            t1 = lib.Timestamp(off.ts)
+            self.assert_(t1.weekday() < 5)
+            self.assert_(t1.value - t0.value == us_in_day or
+                         t1.value - t0.value == 3 * us_in_day)
+            t0 = t1
+
+        t0 = lib.Timestamp(off.ts)
+        for i in range(499, -1, -1):
+            off.prev()
+            t1 = lib.Timestamp(off.ts)
+            self.assert_(t1.weekday() < 5)
+            self.assert_(t0.value - t1.value == us_in_day or
+                         t0.value - t1.value == 3 * us_in_day)
+            t0 = t1
+
+
+    def test_dayofmonthoffset(self):
+        for week in (-1, 0, 1):
+            for day in (0, 2, 4):
+                off = lib.DayOfMonthOffset(week=-1, day=day,
+                                           anchor=datetime(2002,1,1))
+
+                stack = []
+
+                for i in range(500):
+                    t = lib.Timestamp(off.ts)
+                    stack.append(t)
+                    self.assert_(t.weekday() == day)
+                    off.next()
+
+                for i in range(499, -1, -1):
+                    off.prev()
+                    t = lib.Timestamp(off.ts)
+                    self.assert_(t == stack.pop())
+                    self.assert_(t.weekday() == day)
+
+
+"""
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 83c1a5933..ff1e34ea4 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -860,6 +860,23 @@ class TestTimeSeries(unittest.TestCase):
         self.assertRaises(Exception, date_range, datetime(2011,11,11),
                           datetime(2011,11,12), freq=offset)
 
+    def test_append_concat(self):
+        rng = date_range('5/8/2012 1:45', periods=10, freq='5T')
+        ts = Series(np.random.randn(len(rng)), rng)
+        df = DataFrame(np.random.randn(len(rng), 4), index=rng)
+
+        result = ts.append(ts)
+        result_df = df.append(df)
+        ex_index = DatetimeIndex(np.tile(rng.values, 2))
+        self.assert_(result.index.equals(ex_index))
+        self.assert_(result_df.index.equals(ex_index))
+
+        appended = rng.append(rng)
+        self.assert_(appended.equals(ex_index))
+
+        appended = rng.append([rng, rng])
+        ex_index = DatetimeIndex(np.tile(rng.values, 3))
+        self.assert_(appended.equals(ex_index))
 
 def _simple_ts(start, end, freq='D'):
     rng = date_range(start, end, freq=freq)
@@ -1544,202 +1561,6 @@ class TestTimestamp(unittest.TestCase):
         stamp = Timestamp(datetime(2011, 1, 1))
         self.assertEquals(d[stamp], 5)
 
-"""
-
-class TestNewOffsets(unittest.TestCase):
-
-    def test_yearoffset(self):
-        off = lib.YearOffset(dayoffset=0, biz=0, anchor=datetime(2002,1,1))
-
-        for i in range(500):
-            t = lib.Timestamp(off.ts)
-            self.assert_(t.day == 1)
-            self.assert_(t.month == 1)
-            self.assert_(t.year == 2002 + i)
-            off.next()
-
-        for i in range(499, -1, -1):
-            off.prev()
-            t = lib.Timestamp(off.ts)
-            self.assert_(t.day == 1)
-            self.assert_(t.month == 1)
-            self.assert_(t.year == 2002 + i)
-
-        off = lib.YearOffset(dayoffset=-1, biz=0, anchor=datetime(2002,1,1))
-
-        for i in range(500):
-            t = lib.Timestamp(off.ts)
-            self.assert_(t.month == 12)
-            self.assert_(t.day == 31)
-            self.assert_(t.year == 2001 + i)
-            off.next()
-
-        for i in range(499, -1, -1):
-            off.prev()
-            t = lib.Timestamp(off.ts)
-            self.assert_(t.month == 12)
-            self.assert_(t.day == 31)
-            self.assert_(t.year == 2001 + i)
-
-        off = lib.YearOffset(dayoffset=-1, biz=-1, anchor=datetime(2002,1,1))
-
-        stack = []
-
-        for i in range(500):
-            t = lib.Timestamp(off.ts)
-            stack.append(t)
-            self.assert_(t.month == 12)
-            self.assert_(t.day == 31 or t.day == 30 or t.day == 29)
-            self.assert_(t.year == 2001 + i)
-            self.assert_(t.weekday() < 5)
-            off.next()
-
-        for i in range(499, -1, -1):
-            off.prev()
-            t = lib.Timestamp(off.ts)
-            self.assert_(t == stack.pop())
-            self.assert_(t.month == 12)
-            self.assert_(t.day == 31 or t.day == 30 or t.day == 29)
-            self.assert_(t.year == 2001 + i)
-            self.assert_(t.weekday() < 5)
-
-    def test_monthoffset(self):
-        off = lib.MonthOffset(dayoffset=0, biz=0, anchor=datetime(2002,1,1))
-
-        for i in range(12):
-            t = lib.Timestamp(off.ts)
-            self.assert_(t.day == 1)
-            self.assert_(t.month == 1 + i)
-            self.assert_(t.year == 2002)
-            off.next()
-
-        for i in range(11, -1, -1):
-            off.prev()
-            t = lib.Timestamp(off.ts)
-            self.assert_(t.day == 1)
-            self.assert_(t.month == 1 + i)
-            self.assert_(t.year == 2002)
-
-        off = lib.MonthOffset(dayoffset=-1, biz=0, anchor=datetime(2002,1,1))
-
-        for i in range(12):
-            t = lib.Timestamp(off.ts)
-            self.assert_(t.day >= 28)
-            self.assert_(t.month == (12 if i == 0 else i))
-            self.assert_(t.year == 2001 + (i != 0))
-            off.next()
-
-        for i in range(11, -1, -1):
-            off.prev()
-            t = lib.Timestamp(off.ts)
-            self.assert_(t.day >= 28)
-            self.assert_(t.month == (12 if i == 0 else i))
-            self.assert_(t.year == 2001 + (i != 0))
-
-        off = lib.MonthOffset(dayoffset=-1, biz=-1, anchor=datetime(2002,1,1))
-
-        stack = []
-
-        for i in range(500):
-            t = lib.Timestamp(off.ts)
-            stack.append(t)
-            if t.month != 2:
-                self.assert_(t.day >= 28)
-            else:
-                self.assert_(t.day >= 26)
-            self.assert_(t.weekday() < 5)
-            off.next()
-
-        for i in range(499, -1, -1):
-            off.prev()
-            t = lib.Timestamp(off.ts)
-            self.assert_(t == stack.pop())
-            if t.month != 2:
-                self.assert_(t.day >= 28)
-            else:
-                self.assert_(t.day >= 26)
-            self.assert_(t.weekday() < 5)
-
-        for i in (-2, -1, 1, 2):
-            for j in (-1, 0, 1):
-                off1 = lib.MonthOffset(dayoffset=i, biz=j, stride=12,
-                                       anchor=datetime(2002,1,1))
-                off2 = lib.YearOffset(dayoffset=i, biz=j,
-                                      anchor=datetime(2002,1,1))
-
-                for k in range(500):
-                    self.assert_(off1.ts == off2.ts)
-                    off1.next()
-                    off2.next()
-
-                for k in range(500):
-                    self.assert_(off1.ts == off2.ts)
-                    off1.prev()
-                    off2.prev()
-
-    def test_dayoffset(self):
-        off = lib.DayOffset(biz=0, anchor=datetime(2002,1,1))
-
-        us_in_day = 1e6 * 60 * 60 * 24
-
-        t0 = lib.Timestamp(off.ts)
-        for i in range(500):
-            off.next()
-            t1 = lib.Timestamp(off.ts)
-            self.assert_(t1.value - t0.value == us_in_day)
-            t0 = t1
-
-        t0 = lib.Timestamp(off.ts)
-        for i in range(499, -1, -1):
-            off.prev()
-            t1 = lib.Timestamp(off.ts)
-            self.assert_(t0.value - t1.value == us_in_day)
-            t0 = t1
-
-        off = lib.DayOffset(biz=1, anchor=datetime(2002,1,1))
-
-        t0 = lib.Timestamp(off.ts)
-        for i in range(500):
-            off.next()
-            t1 = lib.Timestamp(off.ts)
-            self.assert_(t1.weekday() < 5)
-            self.assert_(t1.value - t0.value == us_in_day or
-                         t1.value - t0.value == 3 * us_in_day)
-            t0 = t1
-
-        t0 = lib.Timestamp(off.ts)
-        for i in range(499, -1, -1):
-            off.prev()
-            t1 = lib.Timestamp(off.ts)
-            self.assert_(t1.weekday() < 5)
-            self.assert_(t0.value - t1.value == us_in_day or
-                         t0.value - t1.value == 3 * us_in_day)
-            t0 = t1
-
-
-    def test_dayofmonthoffset(self):
-        for week in (-1, 0, 1):
-            for day in (0, 2, 4):
-                off = lib.DayOfMonthOffset(week=-1, day=day,
-                                           anchor=datetime(2002,1,1))
-
-                stack = []
-
-                for i in range(500):
-                    t = lib.Timestamp(off.ts)
-                    stack.append(t)
-                    self.assert_(t.weekday() == day)
-                    off.next()
-
-                for i in range(499, -1, -1):
-                    off.prev()
-                    t = lib.Timestamp(off.ts)
-                    self.assert_(t == stack.pop())
-                    self.assert_(t.weekday() == day)
-
-
-"""
-
 if __name__ == '__main__':
     nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
                    exit=False)
