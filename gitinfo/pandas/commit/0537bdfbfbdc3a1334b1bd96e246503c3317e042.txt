commit 0537bdfbfbdc3a1334b1bd96e246503c3317e042
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Dec 2 17:00:56 2011 -0500

    BUG: groupby.agg(len) failure with column selected and as_index=False, GH #421

diff --git a/RELEASE.rst b/RELEASE.rst
index 03c007e5b..8478fcd7f 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -46,7 +46,10 @@ pandas 0.6.1
   - Fix upstream bug causing failure in Series.align with empty Series (GH #434)
   - Function passed to DataFrame.apply can return a list, as long as it's the
     right length. Regression from 0.4 (GH #432)
-  - Don't "accidentally" upcast scalar values when indexing using .ix (GH #
+  - Don't "accidentally" upcast scalar values when indexing using .ix (GH #431)
+  - Fix groupby exception raised with as_index=False and single column selected
+    (GH #421)
+
 
 Thanks
 ------
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 724695edf..e334179a1 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -401,13 +401,10 @@ class GroupBy(object):
 
         try:
             stride_shape = self._agg_stride_shape
-            output = np.empty(group_shape + stride_shape,
-                              dtype=float)
+            output = np.empty(group_shape + stride_shape, dtype=float)
             output.fill(np.nan)
             obj = self._obj_with_exclusions
-            _doit(output, counts, gen_factory(obj),
-                  shape_axis=self.axis)
-
+            _doit(output, counts, gen_factory(obj), shape_axis=self.axis)
             mask = counts.ravel() > 0
             output = output.reshape((np.prod(group_shape),) + stride_shape)
             output = output[mask]
@@ -862,6 +859,10 @@ class DataFrameGroupBy(GroupBy):
 
     @property
     def _agg_stride_shape(self):
+        if self._column is not None:
+            # ffffff
+            return 1
+
         if self.axis == 0:
             n = len(self.obj.columns)
         else:
@@ -1028,7 +1029,7 @@ class DataFrameGroupBy(GroupBy):
 
     def _wrap_aggregated_output(self, output, mask):
         agg_axis = 0 if self.axis == 1 else 1
-        agg_labels = self.obj._get_axis(agg_axis)
+        agg_labels = self._obj_with_exclusions._get_axis(agg_axis)
         if isinstance(output, dict):
             if len(output) == len(agg_labels):
                 output_keys = agg_labels
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index d2f79a3e0..3925cde25 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -614,6 +614,15 @@ class TestGroupBy(unittest.TestCase):
         expected.index = np.arange(len(expected))
         assert_frame_equal(result, expected)
 
+    def test_groupby_as_index_series_scalar(self):
+        grouped = self.df.groupby(['A', 'B'], as_index=False)
+
+        # GH #421
+
+        result = grouped['C'].agg(len)
+        expected = grouped.agg(len).ix[:, ['A', 'B', 'C']]
+        assert_frame_equal(result, expected)
+
     def test_groupby_as_index_corner(self):
         self.assertRaises(TypeError, self.ts.groupby,
                           lambda x: x.weekday(), as_index=False)
