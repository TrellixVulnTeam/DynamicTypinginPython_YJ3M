commit dd3cd7131d985c5c94eb18291592482656276b6e
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Oct 21 22:35:34 2011 -0400

    BUG: handle NAs in Series.value_counts and describe with dtype=object, GH #277

diff --git a/pandas/core/series.py b/pandas/core/series.py
index 511fd7925..c804e4dfa 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -604,7 +604,7 @@ copy : boolean, default False
         """
         Returns Series containing counts of unique values. The resulting Series
         will be in descending order so that the first element is the most
-        frequently-occurring element
+        frequently-occurring element. Excludes NA values
 
         Returns
         -------
@@ -612,7 +612,7 @@ copy : boolean, default False
         """
         from collections import defaultdict
         counter = defaultdict(lambda: 0)
-        for value in self.values:
+        for value in self.dropna().values:
             counter[value] += 1
         return Series(counter).order(ascending=False)
 
@@ -906,7 +906,7 @@ copy : boolean, default False
         if self.dtype == object:
             names = ['count', 'unique', 'top', 'freq']
 
-            objcounts = Counter(self)
+            objcounts = Counter(self.dropna().values)
             top, freq = objcounts.most_common(1)[0]
             data = [self.count(), len(objcounts), top, freq]
 
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index c14d04d06..07ada8ae1 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -555,7 +555,13 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
     def test_describe(self):
         _ = self.series.describe()
         _ = self.ts.describe()
-        _ = self.objSeries.describe()
+
+    def test_describe_objects(self):
+        s = Series(['a', 'b', 'b', np.nan, np.nan, np.nan, 'c', 'd', 'a', 'a'])
+        result = s.describe()
+        expected = Series({'count' : 7, 'unique' : 4,
+                           'top' : 'a', 'freq' : 3}, index=result.index)
+        assert_series_equal(result, expected)
 
     def test_append(self):
         appendedSeries = self.series.append(self.ts)
@@ -770,6 +776,12 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         expected = Series([4, 3, 2, 1], index=['b', 'a', 'd', 'c'])
         assert_series_equal(hist, expected)
 
+        # handle NA's properly
+        s[5:7] = np.nan
+        hist = s.value_counts()
+        expected = s.dropna().value_counts()
+        assert_series_equal(hist, expected)
+
         s = Series({})
         hist = s.value_counts()
         expected = Series([])
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 92982e100..a4b914e43 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -1,3 +1,5 @@
+from __future__ import division
+
 # pylint: disable-msg=W0402
 
 from datetime import datetime
@@ -116,7 +118,7 @@ def assert_dict_equal(a, b, compare_keys=True):
         assert_almost_equal(a[k], b[k])
 
 def assert_series_equal(left, right):
-    assert_almost_equal(left, right)
+    assert_almost_equal(left.values, right.values)
     assert(left.dtype == right.dtype)
     assert(left.index.equals(right.index))
 
