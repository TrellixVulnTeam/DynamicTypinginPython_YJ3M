commit 58db03eec9bd6d78976b844267c3c1a9f61a8eb3
Author: cel4 <cel4@users.noreply.github.com>
Date:   Tue Dec 30 14:28:51 2014 +0100

    ERR: improved error message when concatenating an empty sequence of dataframes, #9157

diff --git a/doc/source/whatsnew/v0.17.0.txt b/doc/source/whatsnew/v0.17.0.txt
index 8320f3cbc..4d18ed23d 100644
--- a/doc/source/whatsnew/v0.17.0.txt
+++ b/doc/source/whatsnew/v0.17.0.txt
@@ -494,8 +494,7 @@ Other API Changes
 ^^^^^^^^^^^^^^^^^
 
 - Line and kde plot with ``subplots=True`` now uses default colors, not all black. Specify ``color='k'`` to draw all lines in black (:issue:`9894`)
-- Calling the ``.value_counts`` method on a Series with ``categorical`` dtype now returns a
-Series with a ``CategoricalIndex`` (:issue:`10704`)
+- Calling the ``.value_counts`` method on a Series with ``categorical`` dtype now returns a Series with a ``CategoricalIndex`` (:issue:`10704`)
 - Enable writing Excel files in :ref:`memory <_io.excel_writing_buffer>` using StringIO/BytesIO (:issue:`7074`)
 - Enable serialization of lists and dicts to strings in ExcelWriter (:issue:`8188`)
 - Allow passing `kwargs` to the interpolation methods (:issue:`10378`).
@@ -527,6 +526,8 @@ Series with a ``CategoricalIndex`` (:issue:`10704`)
    ``raise ValueError``                All other public methods (names not beginning with underscores)
    ===============================     ===============================================================
 
+- Improved error message when concatenating an empty iterable of dataframes (:issue:`9157`)
+
 .. _whatsnew_0170.deprecations:
 
 Deprecations
diff --git a/pandas/tools/merge.py b/pandas/tools/merge.py
index 430828a3d..5ee774635 100644
--- a/pandas/tools/merge.py
+++ b/pandas/tools/merge.py
@@ -1,7 +1,6 @@
 """
 SQL-style merge routines
 """
-import types
 
 import numpy as np
 from pandas.compat import range, long, lrange, lzip, zip, map, filter
@@ -17,11 +16,9 @@ from pandas.core.internals import (items_overlap_with_suffix,
                                    concatenate_block_managers)
 from pandas.util.decorators import Appender, Substitution
 from pandas.core.common import ABCSeries
-from pandas.io.parsers import TextFileReader
 
 import pandas.core.common as com
 
-import pandas.lib as lib
 import pandas.algos as algos
 import pandas.hashtable as _hash
 
@@ -775,9 +772,14 @@ class _Concatenator(object):
             if keys is None:
                 keys = sorted(objs)
             objs = [objs[k] for k in keys]
+        else:
+            objs = list(objs)
+
+        if len(objs) == 0:
+            raise ValueError('No objects to concatenate')
 
         if keys is None:
-            objs = [obj for obj in objs if obj is not None ]
+            objs = [obj for obj in objs if obj is not None]
         else:
             # #1649
             clean_keys = []
diff --git a/pandas/tools/tests/test_merge.py b/pandas/tools/tests/test_merge.py
index 8b1457e7f..236157d02 100644
--- a/pandas/tools/tests/test_merge.py
+++ b/pandas/tools/tests/test_merge.py
@@ -2552,6 +2552,23 @@ class TestOrderedMerge(tm.TestCase):
 
         tm.assertIsInstance(result, NotADataFrame)
 
+    def test_empty_sequence_concat(self):
+        # GH 9157
+        empty_pat = "[Nn]o objects"
+        none_pat = "objects.*None"
+        test_cases = [
+            ((), empty_pat),
+            ([], empty_pat),
+            ({}, empty_pat),
+            ([None], none_pat),
+            ([None, None], none_pat)
+        ]
+        for df_seq, pattern in test_cases:
+            assertRaisesRegexp(ValueError, pattern, pd.concat, df_seq)
+
+        pd.concat([pd.DataFrame()])
+        pd.concat([None, pd.DataFrame()])
+        pd.concat([pd.DataFrame(), None])
 
 if __name__ == '__main__':
     nose.runmodule(argv=[__file__, '-vvs', '-x', '--pdb', '--pdb-failure'],
