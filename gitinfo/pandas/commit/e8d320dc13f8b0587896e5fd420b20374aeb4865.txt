commit e8d320dc13f8b0587896e5fd420b20374aeb4865
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Nov 24 23:22:51 2009 +0000

    made Panel objects Picklable
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@58 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index a477f7551..c2d5a546b 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -17,6 +17,7 @@ from pandas.core.groupby import GroupBy
 from pandas.core.index import Index
 from pandas.core.frame import DataFrame
 from pandas.core.matrix import DataMatrix
+from pandas.core.mixins import Picklable
 
 class PanelError(Exception):
     pass
@@ -36,7 +37,7 @@ def _interpret(s):
     arr = read_array(StringIO(s))
     return arr
 
-class Panel(object):
+class Panel(Picklable):
     """
     Abstract superclass for LongPanel and WidePanel data structures
     """
@@ -270,10 +271,10 @@ class WidePanel(Panel):
         "Unpickle the panel"
         vals, items, major, minor = state
 
-        self.values = _interpret(vals)
         self.items = _interpret(items)
         self.major_axis = _interpret(major)
         self.minor_axis = _interpret(minor)
+        self.values = _interpret(vals)
 
     def conform(self, frame, axis='items'):
         """
@@ -876,9 +877,9 @@ class LongPanel(Panel):
         "Unpickle the panel"
         (vals, items, index) = state
 
-        self.values = _interpret(vals)
         self.items = _interpret(items)
         self.index = index
+        self.values = _interpret(vals)
 
     def _combine(self, other, func, axis=0):
         if isinstance(other, DataFrame):
diff --git a/pandas/lib/src/common.pyx b/pandas/lib/src/common.pyx
index 853b64d13..debf0c03f 100644
--- a/pandas/lib/src/common.pyx
+++ b/pandas/lib/src/common.pyx
@@ -43,12 +43,17 @@ cdef int32_t *get_int32_ptr(ndarray arr):
 
     return <int32_t *> arr.data
 
+cdef int64_t *get_int64_ptr(ndarray arr):
+    _contiguous_check(arr)
+
+    return <int64_t *> arr.data
+
 cdef double_t *get_double_ptr(ndarray arr):
     _contiguous_check(arr)
 
     return <double_t *> arr.data
 
-cpdef map_indices(ndarray index):
+def map_indices(ndarray[object, ndim=1] index):
     '''
     Produce a dict mapping the values of the input array to their respective
     locations.
@@ -58,20 +63,12 @@ cpdef map_indices(ndarray index):
 
     Better to do this with Cython because of the enormous speed boost.
     '''
-    cdef int i, length
-    cdef flatiter iter
+    cdef int i
     cdef dict result
-    cdef object idx
 
     result = {}
-
-    iter = <flatiter> PyArray_IterNew(index)
-    length = PyArray_SIZE(index)
-
-    for i from 0 <= i < length:
-        idx = PyArray_GETITEM(index, PyArray_ITER_DATA(iter))
-        result[idx] = i
-        PyArray_ITER_NEXT(iter)
+    for i from 0 <= i < PyArray_SIZE(index):
+        result[index[i]] = i
 
     return result
 
