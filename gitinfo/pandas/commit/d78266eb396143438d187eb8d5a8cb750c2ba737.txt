commit d78266eb396143438d187eb8d5a8cb750c2ba737
Author: Nicolas Bonnotte <nicolas.bonnotte@qucit.com>
Date:   Sat Nov 7 22:40:04 2015 +0100

    BUG: df.join(df2, how='right') TypeError: Argument 'left' has incorrect type (issue #11519)

diff --git a/doc/source/whatsnew/v0.17.1.txt b/doc/source/whatsnew/v0.17.1.txt
index 3f1a827ad..28819c522 100755
--- a/doc/source/whatsnew/v0.17.1.txt
+++ b/doc/source/whatsnew/v0.17.1.txt
@@ -127,3 +127,4 @@ Bug Fixes
 
 - Bug in the link-time error caused by C ``inline`` functions on FreeBSD 10+ (with ``clang``) (:issue:`10510`)
 - Bug in ``DataFrame.to_csv`` in passing through arguments for formatting ``MultiIndexes``, including ``date_format`` (:issue:`7791`)
+- Bug in ``DataFrame.join()`` with ``how='right'`` producing a ``TypeError`` (:issue:`11519`)
diff --git a/pandas/core/index.py b/pandas/core/index.py
index edca7893c..644b6a411 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -2490,7 +2490,7 @@ class Index(IndexOpsMixin, PandasObject):
             if how == 'left':
                 join_index, lidx, ridx = self._left_indexer(sv, ov)
             elif how == 'right':
-                join_index, ridx, lidx = self._left_indexer(other, self)
+                join_index, ridx, lidx = self._left_indexer(ov, sv)
             elif how == 'inner':
                 join_index, lidx, ridx = self._inner_indexer(sv, ov)
             elif how == 'outer':
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index f7d93a978..228ce9c01 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -1682,6 +1682,7 @@ class TestIndex(Base, tm.TestCase):
             for kind in kinds:
                 joined = res.join(res, how=kind)
                 self.assertIs(res, joined)
+
     def test_str_attribute(self):
         # GH9068
         methods = ['strip', 'rstrip', 'lstrip']
@@ -3056,17 +3057,15 @@ class TestInt64Index(Numeric, tm.TestCase):
         tm.assert_numpy_array_equal(ridx, eridx)
 
         # non-unique
-        """
-        idx = Index([1,1,2,5])
-        idx2 = Index([1,2,5,7,9])
+        idx = Index([1, 1, 2, 5])
+        idx2 = Index([1, 2, 5, 7, 9])
         res, lidx, ridx = idx2.join(idx, how='left', return_indexers=True)
-        eres = idx2
-        eridx = np.array([0, 2, 3, -1, -1])
-        elidx = np.array([0, 1, 2, 3, 4])
+        eres = Index([1, 1, 2, 5, 7, 9])  # 1 is in idx2, so it should be x2
+        eridx = np.array([0, 1, 2, 3, -1, -1])
+        elidx = np.array([0, 0, 1, 2, 3, 4])
         self.assertTrue(res.equals(eres))
         tm.assert_numpy_array_equal(lidx, elidx)
         tm.assert_numpy_array_equal(ridx, eridx)
-        """
 
     def test_join_right(self):
         other = Int64Index([7, 12, 25, 1, 2, 5])
@@ -3096,24 +3095,16 @@ class TestInt64Index(Numeric, tm.TestCase):
         self.assertIsNone(ridx)
 
         # non-unique
-        """
-        idx = Index([1,1,2,5])
-        idx2 = Index([1,2,5,7,9])
+        idx = Index([1, 1, 2, 5])
+        idx2 = Index([1, 2, 5, 7, 9])
         res, lidx, ridx = idx.join(idx2, how='right', return_indexers=True)
-        eres = idx2
-        elidx = np.array([0, 2, 3, -1, -1])
-        eridx = np.array([0, 1, 2, 3, 4])
+        eres = Index([1, 1, 2, 5, 7, 9])  # 1 is in idx2, so it should be x2
+        elidx = np.array([0, 1, 2, 3, -1, -1])
+        eridx = np.array([0, 0, 1, 2, 3, 4])
         self.assertTrue(res.equals(eres))
         tm.assert_numpy_array_equal(lidx, elidx)
         tm.assert_numpy_array_equal(ridx, eridx)
 
-        idx = Index([1,1,2,5])
-        idx2 = Index([1,2,5,9,7])
-        res = idx.join(idx2, how='right', return_indexers=False)
-        eres = idx2
-        self.assert(res.equals(eres))
-        """
-
     def test_join_non_int_index(self):
         other = Index([3, 6, 7, 8, 10], dtype=object)
 
diff --git a/pandas/tools/tests/test_merge.py b/pandas/tools/tests/test_merge.py
index 3a77cfec5..0f920fc5a 100644
--- a/pandas/tools/tests/test_merge.py
+++ b/pandas/tools/tests/test_merge.py
@@ -517,6 +517,23 @@ class TestMerge(tm.TestCase):
 
         assert_frame_equal(result, expected.ix[:, result.columns])
 
+        # GH 11519
+        df = DataFrame({'A': ['foo', 'bar', 'foo', 'bar',
+                              'foo', 'bar', 'foo', 'foo'],
+                        'B': ['one', 'one', 'two', 'three',
+                              'two', 'two', 'one', 'three'],
+                        'C': np.random.randn(8),
+                        'D': np.random.randn(8)})
+        s = Series(np.repeat(np.arange(8), 2),
+                   index=np.repeat(np.arange(8), 2), name='TEST')
+        inner = df.join(s, how='inner')
+        outer = df.join(s, how='outer')
+        left = df.join(s, how='left')
+        right = df.join(s, how='right')
+        assert_frame_equal(inner, outer)
+        assert_frame_equal(inner, left)
+        assert_frame_equal(inner, right)
+
     def test_merge_index_singlekey_right_vs_left(self):
         left = DataFrame({'key': ['a', 'b', 'c', 'd', 'e', 'e', 'a'],
                           'v1': np.random.randn(7)})
