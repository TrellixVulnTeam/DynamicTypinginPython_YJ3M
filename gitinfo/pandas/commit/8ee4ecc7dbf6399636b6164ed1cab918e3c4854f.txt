commit 8ee4ecc7dbf6399636b6164ed1cab918e3c4854f
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Aug 31 17:28:15 2011 -0400

    DOC: finished basic sorting docs.

diff --git a/RELEASE.rst b/RELEASE.rst
index 3854d3d3a..18ea29b58 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -115,6 +115,9 @@ Release notes
 * `reindex` methods now sport a `copy` option so that data is not forced to be
   copied then the resulting object is indexed the same
 
+* Added `sort_index` methods to Series and WidePanel. Renamed `DataFrame.sort`
+  to `sort_index`. Leaving `DataFrame.sort` for now.
+
 **Improvements to existing features**
 
 * The 2-dimensional `DataFrame` and `DataMatrix` classes have been extensively
diff --git a/doc/source/basics.rst b/doc/source/basics.rst
index 92fd0eece..8b67d5cfa 100644
--- a/doc/source/basics.rst
+++ b/doc/source/basics.rst
@@ -1047,68 +1047,45 @@ For example:
 Sorting by index and value
 --------------------------
 
-A number of methods for sorting Series data are provided:
+There are two obvious kinds of sorting that you may be interested in: sorting
+by label and sorting by actual values. The primary method for sorting axis
+labels (indexes) across data structures is the ``sort_index`` method.
 
-::
+.. ipython:: python
 
-    >>> s = Series(randn(5), index=['a', 'b', 'c', 'd', 'e'])
-    >>> s
-    a    -0.308339649397
-    b    -0.447658314192
-    c    -0.391847354208
-    d    0.427084101354
-    e    1.51816072219
-
-    >>> s.order()
-    b    -0.447658314192
-    c    -0.391847354208
-    a    -0.308339649397
-    d    0.427084101354
-    e    1.51816072219
-
-    >>> s.argsort()
-    a    1
-    b    2
-    c    0
-    d    3
-    e    4
-
-    >>> s.sort()    # in-place sort
-    >>> s
-    b    -0.447658314192
-    c    -0.391847354208
-    a    -0.308339649397
-    d    0.427084101354
-    e    1.51816072219
-
-:func:`Series.order` is intended to behave similarly to the R function
-of the same name. In the presence of missing data it accepts an
-optional argument specifying where to sort the NaN values (either the
-end or the beginning). The default is to sort them to the end, which
-is the new sorting behavior in NumPy >= 1.4.0:
+   unsorted_df = df.reindex(index=['a', 'd', 'c', 'b'],
+                            columns=['three', 'two', 'one'])
+   unsorted_df.sort_index()
+   unsorted_df.sort_index(ascending=False)
+   unsorted_df.sort_index(axis=1)
 
-::
+``DataFrame.sort_index`` can accept an optional ``by`` argument for ``axis=0``
+which will use an arbitrary vector or a column name of the DataFrame to
+determine the sort order:
+
+.. ipython:: python
+
+   df.sort_index(by='two')
+
+Series has the method ``order`` (analogous to `R's order function
+<http://stat.ethz.ch/R-manual/R-patched/library/base/html/order.html>`__) which
+sorts by value, with special treatment of NA values via the ``na_last``
+argument:
+
+.. ipython:: python
+
+   s[2] = np.nan
+   s.order()
+   s.order(na_last=False)
+
+Some other sorting notes / nuances:
 
-    >>> s
-    a    -2.21668112685
-    b    -0.520791835078
-    c    NaN
-    d    -0.788775281233
-    e    -0.779555719818
-
-    >>> s.order()
-    a    -2.21668112685
-    d    -0.788775281233
-    e    -0.779555719818
-    b    -0.520791835078
-    c    NaN
-
-    >>> s.order(missingAtEnd=False)
-    c    NaN
-    a    -2.21668112685
-    d    -0.788775281233
-    e    -0.779555719818
-    b    -0.520791835078
+  * ``Series.sort`` sorts a Series by value in-place. This is to provide
+    compatibility with NumPy methods which expect the ``ndarray.sort``
+    behavior.
+  * ``DataFrame.sort`` takes a ``column`` argument instead of ``by``. This
+    method will likely be deprecated in a future release in favor of just using
+    ``sort_index``.
 
 .. _basics.cast:
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index acad6cc6a..2ad184d8a 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1195,9 +1195,12 @@ class DataFrame(NDFrame):
         labels = self._get_axis(axis)
 
         if by is not None:
-            if isinstance(by, basestring):
-                assert(axis == 0)
+            try:
+                if by in self.columns:
+                    assert(axis == 0)
                 by = self[by].values
+            except Exception:
+                pass
 
             assert(len(by) == len(labels))
             sort_index = Series(by, index=labels).order().index
