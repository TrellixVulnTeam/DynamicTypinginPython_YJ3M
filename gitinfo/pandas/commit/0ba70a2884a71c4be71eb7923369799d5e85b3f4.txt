commit 0ba70a2884a71c4be71eb7923369799d5e85b3f4
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Aug 16 11:10:32 2011 -0400

    ENH: enable group by level of MultiIndex

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 8fb86ef24..651d3a4a1 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1951,7 +1951,7 @@ class DataFrame(NDFrame):
     #----------------------------------------------------------------------
     # groupby
 
-    def groupby(self, by, axis=0, column=None):
+    def groupby(self, by=None, axis=0, level=None):
         """
         Goup series using mapper (dict or key function, apply given function to
         group, return result as series) or by a series of columns
@@ -1980,7 +1980,7 @@ class DataFrame(NDFrame):
         GroupBy object
         """
         from pandas.core.groupby import groupby
-        return groupby(self, by, axis=axis)
+        return groupby(self, by, axis=axis, level=level)
 
     def tgroupby(self, keyfunc, applyfunc):
         """
@@ -2149,31 +2149,34 @@ class DataFrame(NDFrame):
         n = len(level_index)
         locs = axis_index.labels[level].searchsorted(np.arange(n))
 
+        # WORKAROUND: reduceat fusses about the endpoints. should file ticket?
         start = locs.searchsorted(0, side='right') - 1
         end = locs.searchsorted(len(mask), side='left')
 
-        # WORKAROUND: reduceat fusses about the endpoints. should file ticket?
-        # WORKAROUND: to see why, try this
-        # arr = np.ones((10, 4), dtype=bool)
-        # np.add.reduceat(arr, [0, 3, 3, 7, 9], axis=0)
-
-        # this stinks
-        workaround_mask = locs[:-1] == locs[1:]
-
         if axis == 0:
             index = level_index
             columns = self.columns
             result = np.zeros((n, len(self.columns)), dtype=int)
             out = result[start:end]
             np.add.reduceat(mask, locs[start:end], axis=axis, out=out)
-            result[:-1][workaround_mask] = 0
         else:
             index = self.index
             columns = level_index
             result = np.zeros((len(self.index), n), dtype=int)
             out = result[:, start:end]
             np.add.reduceat(mask, locs[start:end], axis=axis, out=out)
-            result[:, :-1][:, workaround_mask] = 0
+
+        # WORKAROUND: to see why, try this
+        # arr = np.ones((10, 4), dtype=bool)
+        # np.add.reduceat(arr, [0, 3, 3, 7, 9], axis=0)
+
+        # this stinks
+        if len(locs) > 1:
+            workaround_mask = locs[:-1] == locs[1:]
+            if axis == 0:
+                result[:-1][workaround_mask] = 0
+            else:
+                result[:, :-1][:, workaround_mask] = 0
 
         return DataFrame(result, index=index, columns=columns)
 
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index e1cad7d25..10c538b6f 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -79,7 +79,7 @@ class PandasObject(Picklable):
         name = self._get_axis_name(axis)
         return getattr(self, name)
 
-    def groupby(self, mapper, axis=0):
+    def groupby(self, mapper=None, axis=0, level=None):
         """
         Goup series using mapper (dict or key function, apply given
         function to group, return result as series).
@@ -96,7 +96,7 @@ class PandasObject(Picklable):
         GroupBy object
         """
         from pandas.core.groupby import groupby
-        return groupby(self, mapper, axis=axis)
+        return groupby(self, mapper, axis=axis, level=level)
 
     def truncate(self, before=None, after=None):
         """Function truncate a sorted DataFrame / Series before and/or after
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 98e33b017..758f17ea1 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -30,14 +30,16 @@ class GroupBy(object):
 
     Supported classes: Series, DataFrame
     """
-    def __init__(self, obj, grouper=None, axis=0, groupings=None,
-                 exclusions=None, name=None):
+    def __init__(self, obj, grouper=None, axis=0, level=None,
+                 groupings=None, exclusions=None, name=None):
         self.name = name
         self.obj = obj
         self.axis = axis
+        self.level = level
 
         if groupings is None:
-            groupings, exclusions = _get_groupings(obj, grouper, axis=axis)
+            groupings, exclusions = _get_groupings(obj, grouper, axis=axis,
+                                                   level=level)
 
         self.groupings = groupings
         self.exclusions = set(exclusions)
@@ -265,11 +267,23 @@ class GroupBy(object):
 
 class Grouping(object):
 
-    def __init__(self, index, grouper, name=None):
+    def __init__(self, index, grouper=None, name=None, level=None):
         self.name = name
-        self.index = np.asarray(index)
+        self.level = level
         self.grouper = _convert_grouper(index, grouper)
 
+        if level is not None:
+            inds = index.labels[level]
+            labels = index.levels[level].values.take(inds)
+
+            if grouper is not None:
+                self.grouper = _tseries.arrmap(labels, self.grouper)
+            else:
+                self.grouper = labels
+
+        self.index = index.values
+
+        # no level passed
         if not isinstance(self.grouper, np.ndarray):
             self.grouper = _tseries.arrmap(self.index, self.grouper)
 
@@ -336,9 +350,12 @@ def labelize(*key_arrays):
 
     return tuple(shape), labels, idicts
 
-def _get_groupings(obj, grouper, axis=0):
+def _get_groupings(obj, grouper=None, axis=0, level=None):
     group_axis = obj._get_axis(axis)
 
+    if level is not None and not isinstance(group_axis, MultiIndex):
+        raise ValueError('can only specify level with multi-level index')
+
     groupings = []
     exclusions = []
     if isinstance(grouper, (tuple, list)):
@@ -352,7 +369,7 @@ def _get_groupings(obj, grouper, axis=0):
                 name = arg
                 arg = obj[arg]
 
-            ping = Grouping(group_axis, arg, name=name)
+            ping = Grouping(group_axis, arg, name=name, level=level)
             groupings.append(ping)
     else:
         name = 'key'
@@ -360,8 +377,13 @@ def _get_groupings(obj, grouper, axis=0):
             exclusions.append(grouper)
             name = grouper
             grouper = obj[grouper]
-        ping = Grouping(group_axis, grouper, name=name)
+        ping = Grouping(group_axis, grouper, name=name, level=level)
         groupings.append(ping)
+    # else:
+    #     labels = group_axis.labels[level]
+    #     grouper = np.asarray(group_axis.levels[level]).take(labels)
+    #     ping = Grouping(group_axis, grouper, name=name)
+    #     groupings.append(ping)
 
     return groupings, exclusions
 
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 44dbef4d0..f542fe26d 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -56,6 +56,10 @@ class Index(np.ndarray):
             index_summary = ''
         return 'Index: %s entries%s' % (len(self), index_summary)
 
+    @property
+    def values(self):
+        return np.asarray(self)
+
     _indexMap = None
     @property
     def indexMap(self):
@@ -378,6 +382,12 @@ class MultiIndex(Index):
                   for lev, lab in zip(self.levels, self.labels)]
         return izip(*values)
 
+    @property
+    def values(self):
+        result = np.empty(len(self), dtype=object)
+        result[:] = list(self)
+        return result
+
     def __contains__(self, key):
         try:
             label_key = self._get_label_key(key)
