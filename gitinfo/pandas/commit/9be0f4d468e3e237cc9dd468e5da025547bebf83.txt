commit 9be0f4d468e3e237cc9dd468e5da025547bebf83
Author: Chang She <changshe@gmail.com>
Date:   Fri Jul 6 18:19:16 2012 -0400

    ENH: append keyword to set_index

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 0fc0158e4..1b41bbfe1 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2258,7 +2258,7 @@ class DataFrame(NDFrame):
 
     truncate = generic.truncate
 
-    def set_index(self, keys, drop=True, inplace=False,
+    def set_index(self, keys, drop=True, append=False, inplace=False,
                   verify_integrity=False):
         """
         Set the DataFrame index (row labels) using one or more existing
@@ -2269,6 +2269,8 @@ class DataFrame(NDFrame):
         keys : column label or list of column labels / arrays
         drop : boolean, default True
             Delete columns to be used as the new index
+        append : boolean, default False
+            Whether to append columns to existing index
         inplace : boolean, default False
             Modify the DataFrame in place (do not create a new object)
         verify_integrity : boolean, default False
@@ -2295,7 +2297,18 @@ class DataFrame(NDFrame):
         else:
             frame = self.copy()
 
+        names = keys
+
         arrays = []
+        if append:
+            names = [x for x in self.index.names]
+            if isinstance(self.index, MultiIndex):
+                for i in range(self.index.nlevels):
+                    arrays.append(self.index.get_level_values(i))
+            else:
+                arrays.append(np.asarray(self.index))
+            names.extend(keys)
+
         for col in keys:
             if isinstance(col, (list, Series, np.ndarray)):
                 level = col
@@ -2305,7 +2318,7 @@ class DataFrame(NDFrame):
                     del frame[col]
             arrays.append(level)
 
-        index = MultiIndex.from_arrays(arrays, names=keys)
+        index = MultiIndex.from_arrays(arrays, names=names)
 
         if verify_integrity and not index.is_unique:
             duplicates = index.get_duplicates()
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 1b019496f..845c9ff7d 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1386,6 +1386,12 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         # corner case
         self.assertRaises(Exception, df.set_index, 'A', verify_integrity=True)
 
+        # append
+        result = df.set_index(['A', 'B'], append=True)
+        xp = df.reset_index().set_index(['index', 'A', 'B'])
+        xp.index.names = [None, 'A', 'B']
+        assert_frame_equal(result, xp)
+
     def test_set_index_pass_arrays(self):
         df = DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',
                                'foo', 'bar', 'foo', 'foo'],
@@ -6183,6 +6189,16 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         rs = frame.reset_index(['A', 'B'])
         assert_frame_equal(rs, self.frame)
 
+        rs = frame.reset_index(['index', 'A', 'B'])
+        assert_frame_equal(rs, self.frame.reset_index())
+
+        rs = frame.reset_index(['index', 'A', 'B'])
+        assert_frame_equal(rs, self.frame.reset_index())
+
+        rs = frame.reset_index('A')
+        xp = self.frame.reset_index().set_index(['index', 'B'])
+        assert_frame_equal(rs, xp)
+
     def test_reset_index_right_dtype(self):
         time = np.arange(0.0, 10, np.sqrt(2)/2)
         s1 = Series((9.81 * time ** 2) /2,
