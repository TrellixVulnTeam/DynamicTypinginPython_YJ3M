commit 39efc7b5382963b9e0662e4bc0655978c5f17a36
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Mar 15 12:49:11 2012 -0400

    ENH: add coerce_float option to DataFrame.from_records, close #893

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 4e289eb39..248a4e944 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -652,7 +652,7 @@ class DataFrame(NDFrame):
 
     @classmethod
     def from_records(cls, data, index=None, exclude=None, columns=None,
-                     names=None):
+                     names=None, coerce_float=False):
         """
         Convert structured or record ndarray to DataFrame
 
@@ -666,6 +666,9 @@ class DataFrame(NDFrame):
             Columns or fields to exclude
         columns : sequence, default None
             Column names to use, replacing any found in passed data
+        coerce_float : boolean, default False
+            Attempt to convert values to non-string, non-numeric objects (like
+            decimal.Decimal) to floating point, useful for SQL result sets
 
         Returns
         -------
@@ -682,7 +685,8 @@ class DataFrame(NDFrame):
         if isinstance(data, (np.ndarray, DataFrame, dict)):
             columns, sdict = _rec_to_dict(data)
         else:
-            sdict, columns = _to_sdict(data, columns)
+            sdict, columns = _to_sdict(data, columns,
+                                       coerce_float=coerce_float)
 
         if exclude is None:
             exclude = set()
@@ -4209,19 +4213,20 @@ def _rec_to_dict(arr):
     return columns, sdict
 
 
-def _to_sdict(data, columns):
+def _to_sdict(data, columns, coerce_float=False):
     if len(data) == 0:
         return {}, columns
     if isinstance(data[0], (list, tuple)):
-        return _list_to_sdict(data, columns)
+        return _list_to_sdict(data, columns, coerce_float=coerce_float)
     elif isinstance(data[0], dict):
-        return _list_of_dict_to_sdict(data, columns)
+        return _list_of_dict_to_sdict(data, columns, coerce_float=coerce_float)
     elif isinstance(data[0], Series):
-        return _list_of_series_to_sdict(data, columns)
+        return _list_of_series_to_sdict(data, columns,
+                                        coerce_float=coerce_float)
     else:  # pragma: no cover
         raise TypeError('No logic to handle %s type' % type(data[0]))
 
-def _list_to_sdict(data, columns):
+def _list_to_sdict(data, columns, coerce_float=False):
     if len(data) > 0 and isinstance(data[0], tuple):
         content = list(lib.to_object_array_tuples(data).T)
     elif len(data) > 0:
@@ -4231,9 +4236,10 @@ def _list_to_sdict(data, columns):
         if columns is None:
             columns = []
         return {}, columns
-    return _convert_object_array(content, columns)
+    return _convert_object_array(content, columns,
+                                 coerce_float=coerce_float)
 
-def _list_of_series_to_sdict(data, columns):
+def _list_of_series_to_sdict(data, columns, coerce_float=False):
     from pandas.core.index import _get_combined_index
 
     if columns is None:
@@ -4254,21 +4260,23 @@ def _list_of_series_to_sdict(data, columns):
 
     if values.dtype == np.object_:
         content = list(values.T)
-        return _convert_object_array(content, columns)
+        return _convert_object_array(content, columns,
+                                     coerce_float=coerce_float)
     else:
         return values, columns
 
 
-def _list_of_dict_to_sdict(data, columns):
+def _list_of_dict_to_sdict(data, columns, coerce_float=False):
     if columns is None:
         gen = (x.keys() for x in data)
         columns = lib.fast_unique_multiple_list_gen(gen)
 
     content = list(lib.dicts_to_array(data, list(columns)).T)
-    return _convert_object_array(content, columns)
+    return _convert_object_array(content, columns,
+                                 coerce_float=coerce_float)
 
 
-def _convert_object_array(content, columns):
+def _convert_object_array(content, columns, coerce_float=False):
     if columns is None:
         columns = range(len(content))
     else:
@@ -4276,7 +4284,7 @@ def _convert_object_array(content, columns):
             raise AssertionError('%d columns passed, passed data had %s '
                                  'columns' % (len(columns), len(content)))
 
-    sdict = dict((c, lib.maybe_convert_objects(vals))
+    sdict = dict((c, lib.maybe_convert_objects(vals, try_float=coerce_float))
                  for c, vals in zip(columns, content))
     return sdict, columns
 
diff --git a/pandas/io/sql.py b/pandas/io/sql.py
index 17ff86634..82b734e61 100644
--- a/pandas/io/sql.py
+++ b/pandas/io/sql.py
@@ -114,7 +114,7 @@ def uquery(sql, con=None, cur=None, retry=True, params=()):
             return uquery(sql, con, retry=False)
     return result
 
-def read_frame(sql, con, index_col=None):
+def read_frame(sql, con, index_col=None, coerce_float=True):
     """
     Returns a DataFrame corresponding to the result set of the query
     string.
@@ -135,7 +135,8 @@ def read_frame(sql, con, index_col=None):
     con.commit()
 
     columns = [col_desc[0] for col_desc in cur.description]
-    result = DataFrame.from_records(rows, columns=columns)
+    result = DataFrame.from_records(rows, columns=columns,
+                                    coerce_float=coerce_float)
 
     if index_col is not None:
         result = result.set_index(index_col)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 339b27030..497dbbed2 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1798,6 +1798,18 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         df = DataFrame.from_records(tuples, columns=['a', 'b', 'c', 'd'])
         self.assert_(np.isnan(df['c'][0]))
 
+    def test_from_records_decimal(self):
+        from decimal import Decimal
+
+        tuples = [(Decimal('1.5'),), (Decimal('2.5'),), (None,)]
+
+        df = DataFrame.from_records(tuples, columns=['a'])
+        self.assert_(df['a'].dtype == object)
+
+        df = DataFrame.from_records(tuples, columns=['a'], coerce_float=True)
+        self.assert_(df['a'].dtype == np.float64)
+        self.assert_(np.isnan(df['a'].values[-1]))
+
     def test_to_records_floats(self):
         df = DataFrame(np.random.rand(10,10))
         df.to_records()
