commit e3911df29d48a2e313d2758af23562285ccfc503
Author: Adam Klein <adamklein@gmail.com>
Date:   Mon Jan 16 14:49:02 2012 -0500

    ENH: docs build cleanly, per #635

diff --git a/doc/source/dsintro.rst b/doc/source/dsintro.rst
index a87ebce8e..9cf616a46 100644
--- a/doc/source/dsintro.rst
+++ b/doc/source/dsintro.rst
@@ -16,7 +16,8 @@ objects. To get started, import numpy and load pandas into your namespace:
    import numpy as np
    from pandas import *
    randn = np.random.randn
-   np.set_printoptions(precision=4, suppress=True, max_columns=8)
+   np.set_printoptions(precision=4, suppress=True)
+   set_printoptions(precision=4, max_columns=8)
 
 .. ipython:: python
 
diff --git a/doc/source/io.rst b/doc/source/io.rst
index 81683349e..6c7a60d2f 100644
--- a/doc/source/io.rst
+++ b/doc/source/io.rst
@@ -349,7 +349,6 @@ performance HDF5 format using the excellent `PyTables
 
 .. ipython:: python
 
-   fo
    store = HDFStore('store.h5')
    print store
 
diff --git a/doc/source/merging.rst b/doc/source/merging.rst
index 9b3c145d4..874bdcf58 100644
--- a/doc/source/merging.rst
+++ b/doc/source/merging.rst
@@ -152,8 +152,8 @@ along ``axis=0``, namely the index:
 .. ipython:: python
 
    s = Series(randn(10), index=np.arange(10))
-   s1 = s[:5]
-   s2 = s[-5:]
+   s1 = s[:5] # note we're slicing with labels here, so 5 is included
+   s2 = s[6:]
    s1.append(s2)
 
 In the case of DataFrame, the indexes must be disjoint but the columns do not
diff --git a/doc/source/missing_data.rst b/doc/source/missing_data.rst
index 06c9eead9..493492121 100644
--- a/doc/source/missing_data.rst
+++ b/doc/source/missing_data.rst
@@ -256,6 +256,7 @@ an ndarray (e.g. selecting values based on some criteria). If a boolean vector
 contains NAs, an exception will be generated:
 
 .. ipython:: python
+   :okexcept:
 
    reindexed = s.reindex(range(8)).fillna(0)
    reindexed[crit]
diff --git a/doc/source/visualization.rst b/doc/source/visualization.rst
index b4f1657fa..371057d82 100644
--- a/doc/source/visualization.rst
+++ b/doc/source/visualization.rst
@@ -170,7 +170,7 @@ groupings.  For instance,
    df = DataFrame(np.random.rand(10,2), columns=['Col1', 'Col2'] )
    df['X'] = Series(['A','A','A','A','A','B','B','B','B','B'])
 
-   plot.figure();
+   plt.figure();
 
    @savefig box_plot_ex2.png width=4.5in
    df.boxplot(by='X')
@@ -184,7 +184,7 @@ columns:
    df['X'] = Series(['A','A','A','A','A','B','B','B','B','B'])
    df['Y'] = Series(['A','B','A','B','A','B','A','B','A','B'])
 
-   plot.figure();
+   plt.figure();
 
    @savefig box_plot_ex3.png width=4.5in
    df.boxplot(column=['Col1','Col2'], by=['X','Y'])
diff --git a/doc/sphinxext/ipython_directive.py b/doc/sphinxext/ipython_directive.py
index c92fa0249..bbc8578c2 100644
--- a/doc/sphinxext/ipython_directive.py
+++ b/doc/sphinxext/ipython_directive.py
@@ -215,16 +215,6 @@ class EmbeddedSphinxShell(object):
         # Create and initialize ipython, but don't start its mainloop
         IP = InteractiveShell.instance(config=config, profile_dir=profile)
 
-        self_closure = self
-
-        def custom_handler(self, etype, value, tb, tb_offset=None):
-            if not self_closure.suppress_exception_warning:
-                errstr = ("WARNING: Exception in statement '%s', %s, %s)\n"
-                        % (self_closure.datacontent[1], etype, value))
-                sys.stderr.write(errstr)
-
-        IP.set_custom_exc((Exception,), custom_handler)
-
         # io.stdout redirect must be done *after* instantiating InteractiveShell
         io.stdout = self.cout
         io.stderr = self.cout
@@ -315,11 +305,6 @@ class EmbeddedSphinxShell(object):
 
         input_lines = input.split('\n')
 
-        if is_okexcept:
-            self.suppress_exception_warning = True
-        else:
-            self.suppress_exception_warning = False
-
         self.datacontent = data
 
         continuation = '   %s:'%''.join(['.']*(len(str(lineno))+2))
@@ -369,6 +354,9 @@ class EmbeddedSphinxShell(object):
         if not is_suppress and not is_semicolon:
             ret.append(output)
 
+        if not is_okexcept and "Traceback" in output:
+            sys.stdout.write(output)
+
         self.cout.truncate(0)
         return (ret, input_lines, output, is_doctest, image_file,
                     image_directive)
diff --git a/pandas/core/daterange.py b/pandas/core/daterange.py
index bb2270697..408ec43c1 100644
--- a/pandas/core/daterange.py
+++ b/pandas/core/daterange.py
@@ -221,6 +221,9 @@ class DateRange(Index):
             new_index.name = self.name
             return new_index
         else:
+            if result.ndim > 1:
+                return result
+
             return Index(result, name=self.name)
 
     def summary(self):
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index c88155307..0a5ee1d94 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -3555,17 +3555,17 @@ class DataFrame(NDFrame):
                 empty = self[col].count() == 0
                 y = self[col].values if not empty else np.zeros(x.shape)
 
-                try:
-                    if subplots:
-                        ax = axes[i]
-                        ax.plot(x, y, 'k', label=str(col), **kwds)
-                        ax.legend(loc='best')
-                    else:
-                        ax.plot(x, y, label=str(col), **kwds)
-                except Exception, e:
-                    msg = ('Unable to plot data %s vs index %s,\n'
-                           'error was: %s' % (str(y), str(x), str(e)))
-                    raise Exception(msg)
+                #try:
+                if subplots:
+                    ax = axes[i]
+                    ax.plot(x, y, 'k', label=str(col), **kwds)
+                    ax.legend(loc='best')
+                else:
+                    ax.plot(x, y, label=str(col), **kwds)
+                #except Exception, e:
+                #    msg = ('Unable to plot data %s vs index %s,\n'
+                #           'error was: %s' % (str(y), str(x), str(e)))
+                #    raise Exception(msg)
 
                 ax.grid(grid)
 
