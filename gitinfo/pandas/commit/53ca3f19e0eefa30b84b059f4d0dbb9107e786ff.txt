commit 53ca3f19e0eefa30b84b059f4d0dbb9107e786ff
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Nov 18 01:47:18 2011 -0500

    BUG: fix empty DataFrame corner cases described in #378

diff --git a/RELEASE.rst b/RELEASE.rst
index 8bfe7e20b..e122c1788 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -132,6 +132,7 @@ pandas 0.5.1
   - Fix block consolidation bug after inserting column into MultiIndex (GH #366)
   - Fix bug in join operations between Index and Int64Index (GH #367)
   - Handle min_periods=0 case in moving window functions (GH #365)
+  - Fixed corner cases in DataFrame.apply/pivot with empty DataFrame (GH #378)
 
 Thanks
 ------
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 5302d6f52..0e22965d1 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2256,7 +2256,7 @@ class DataFrame(NDFrame):
             for k, v in series_gen:
                 results[k] = func(v)
 
-        if hasattr(results.values()[0], '__iter__'):
+        if len(results) > 0 and hasattr(results.values()[0], '__iter__'):
             result = self._constructor(data=results, index=res_columns,
                                        columns=res_index)
 
diff --git a/pandas/core/reshape.py b/pandas/core/reshape.py
index e023dfb63..5cef790ff 100644
--- a/pandas/core/reshape.py
+++ b/pandas/core/reshape.py
@@ -119,8 +119,9 @@ class _Unstacker(object):
         index = self.get_new_index()
 
         # filter out missing levels
-        values = values[:, mask]
-        columns = columns[mask]
+        if values.shape[1] > 0:
+            values = values[:, mask]
+            columns = columns[mask]
 
         return DataFrame(values, index=index, columns=columns)
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index f2448f64d..ab5461057 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2282,6 +2282,12 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
                           'c' : [1., 2., 3., 3., 4.]})
         self.assertRaises(Exception, data.pivot, 'a', 'b', 'c')
 
+    def test_pivot_empty(self):
+        df = DataFrame({}, columns=['a', 'b', 'c'])
+        result = df.pivot('a', 'b', 'c')
+        expected = DataFrame({})
+        assert_frame_equal(result, expected)
+
     def test_reindex(self):
         newFrame = self.frame.reindex(self.ts1.index)
 
@@ -2631,10 +2637,18 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         # test with hierarchical index
 
+    def test_apply_mixed_dtype_corner(self):
+        df = DataFrame({'A' : ['foo'],
+                        'B' : [1.]})
+        result = df[:0].apply(np.mean, axis=1)
+        # the result here is actually kind of ambiguous, should it be a Series
+        # or a DataFrame?
+        expected = Series(np.nan, index=[])
+        assert_series_equal(result, expected)
+
     def test_applymap(self):
         applied = self.frame.applymap(lambda x: x * 2)
         assert_frame_equal(applied, self.frame * 2)
-
         result = self.frame.applymap(type)
 
     def test_filter(self):
