commit 12b0d4523ab9a0248e651f0ce7650108c2744384
Author: Simon Hawkins <simonjayhawkins@gmail.com>
Date:   Fri Apr 10 18:02:32 2020 +0100

    TYP: F used in decorators to _typing (#33456)

diff --git a/pandas/_config/config.py b/pandas/_config/config.py
index df706bf25..8955a0618 100644
--- a/pandas/_config/config.py
+++ b/pandas/_config/config.py
@@ -51,20 +51,11 @@ Implementation
 from collections import namedtuple
 from contextlib import contextmanager
 import re
-from typing import (
-    Any,
-    Callable,
-    Dict,
-    Iterable,
-    List,
-    Optional,
-    Tuple,
-    Type,
-    TypeVar,
-    cast,
-)
+from typing import Any, Callable, Dict, Iterable, List, Optional, Tuple, Type, cast
 import warnings
 
+from pandas._typing import F
+
 DeprecatedOption = namedtuple("DeprecatedOption", "key msg rkey removal_ver")
 RegisteredOption = namedtuple("RegisteredOption", "key defval doc validator cb")
 
@@ -704,9 +695,6 @@ def pp_options_list(keys: Iterable[str], width=80, _print: bool = False):
 #
 # helpers
 
-FuncType = Callable[..., Any]
-F = TypeVar("F", bound=FuncType)
-
 
 @contextmanager
 def config_prefix(prefix):
diff --git a/pandas/_typing.py b/pandas/_typing.py
index e1b6a5e2e..850f10bd7 100644
--- a/pandas/_typing.py
+++ b/pandas/_typing.py
@@ -75,3 +75,7 @@ Renamer = Union[Mapping[Label, Any], Callable[[Label], Label]]
 
 # to maintain type information across generic functions and parametrization
 T = TypeVar("T")
+# used in decorators to preserve the signature of the function it decorates
+# see https://mypy.readthedocs.io/en/stable/generics.html#declaring-decorators
+FuncType = Callable[..., Any]
+F = TypeVar("F", bound=FuncType)
diff --git a/pandas/compat/__init__.py b/pandas/compat/__init__.py
index 3547a33ea..6570e0782 100644
--- a/pandas/compat/__init__.py
+++ b/pandas/compat/__init__.py
@@ -12,6 +12,8 @@ import struct
 import sys
 import warnings
 
+from pandas._typing import F
+
 PY37 = sys.version_info >= (3, 7)
 PY38 = sys.version_info >= (3, 8)
 PYPY = platform.python_implementation() == "PyPy"
@@ -25,7 +27,7 @@ PYPY = platform.python_implementation() == "PyPy"
 # found at https://bitbucket.org/gutworth/six
 
 
-def set_function_name(f, name, cls):
+def set_function_name(f: F, name: str, cls) -> F:
     """
     Bind the name/qualname attributes of the function.
     """
diff --git a/pandas/util/_decorators.py b/pandas/util/_decorators.py
index 71d02db10..17815c437 100644
--- a/pandas/util/_decorators.py
+++ b/pandas/util/_decorators.py
@@ -1,24 +1,11 @@
 from functools import wraps
 import inspect
 from textwrap import dedent
-from typing import (
-    Any,
-    Callable,
-    List,
-    Mapping,
-    Optional,
-    Tuple,
-    Type,
-    TypeVar,
-    Union,
-    cast,
-)
+from typing import Any, Callable, List, Mapping, Optional, Tuple, Type, Union, cast
 import warnings
 
 from pandas._libs.properties import cache_readonly  # noqa
-
-FuncType = Callable[..., Any]
-F = TypeVar("F", bound=FuncType)
+from pandas._typing import F
 
 
 def deprecate(
@@ -29,7 +16,7 @@ def deprecate(
     klass: Optional[Type[Warning]] = None,
     stacklevel: int = 2,
     msg: Optional[str] = None,
-) -> Callable[..., Any]:
+) -> Callable[[F], F]:
     """
     Return a new function that emits a deprecation warning on use.
 
@@ -100,7 +87,7 @@ def deprecate_kwarg(
     new_arg_name: Optional[str],
     mapping: Optional[Union[Mapping[Any, Any], Callable[[Any], Any]]] = None,
     stacklevel: int = 2,
-) -> Callable[..., Any]:
+) -> Callable[[F], F]:
     """
     Decorator to deprecate a keyword argument of a function.
 
