commit dcbc020e6a53633ecd3f1bdd7240c01b5de6b02c
Author: jreback <jeff@reback.net>
Date:   Fri Dec 21 10:14:31 2012 -0500

    BUG: make Term more robust to whitespace and syntax

diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 5766db4f7..02476dfcf 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -2316,7 +2316,7 @@ class Term(object):
 
     """
 
-    _ops     = ['<=','<','>=','>','!=','=']
+    _ops     = ['<=','<','>=','>','!=','==','=']
     _search  = re.compile("^(?P<field>\w+)\s*(?P<op>%s)\s*(?P<value>.+)$" % '|'.join(_ops))
 
     def __init__(self, field, op = None, value = None, queryables = None):
@@ -2376,6 +2376,10 @@ class Term(object):
         if self.field is None or self.op is None or self.value is None:
             raise Exception("Could not create this term [%s]" % str(self))
 
+        # = vs ==
+        if self.op == '==':
+            self.op = '='
+
         # we have valid conditions
         if self.op in ['>','>=','<','<=']:
             if hasattr(self.value,'__iter__') and len(self.value) > 1:
@@ -2502,9 +2506,12 @@ class Selection(object):
         if not isinstance(where, (list,tuple)):
             where = [ where ]
         else:
-            # do we have all list/tuple
+
+            # make this a list of we think that we only have a sigle term & no operands inside any terms 
             if not any([ isinstance(w, (list,tuple,Term)) for w in where ]):
-                where = [ where ]
+
+                if not any([ isinstance(w,basestring) and Term._search.match(w) for w in where ]):
+                    where = [ where ]
 
         queryables = self.table.queryables()
         return [ Term(c, queryables = queryables) for c in where ]
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index 4a5167669..0dbd9000e 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -476,6 +476,23 @@ class TestHDFStore(unittest.TestCase):
         expected = df_new[(df_new.string == 'foo') & (df_new.string2 == 'bar') & (df_new.A > 0) & (df_new.B < 0)]
         tm.assert_frame_equal(result, expected)
 
+        # doc example
+        df_dc = df.copy()
+        df_dc['string'] = 'foo'
+        df_dc.ix[4:6,'string'] = np.nan
+        df_dc.ix[7:9,'string'] = 'bar'
+        df_dc['string2'] = 'cool'
+        df_dc
+        self.store.remove('df_dc')
+        self.store.append('df_dc', df_dc, columns = ['B','C','string','string2'])
+        result = self.store.select('df_dc',[ Term('B>0') ])
+        expected = df_dc[df_dc.B > 0]
+        tm.assert_frame_equal(result, expected)
+
+        result = self.store.select('df_dc',[ 'B > 0', 'C > 0', 'string == foo' ])
+        expected = df_dc[(df_dc.B > 0) & (df_dc.C > 0) & (df_dc.string == 'foo')]
+        tm.assert_frame_equal(result, expected)
+
     def test_create_table_index(self):
 
         # index=False
