commit 3213b0f4a82a067d3f311875ffb0a64e1596f54b
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Jun 14 11:34:12 2011 -0400

    read_csv and read_table renamings in parsers.py. updated release notes

diff --git a/RELEASE.rst b/RELEASE.rst
index a5843160a..937c24f0b 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -28,6 +28,11 @@ Release notes
 
 **New features / modules**
 
+* `pandas.core.sparse` module: "Sparse" (mostly-NA, or some other fill value)
+  versions of `Series`, `DataFrame`, and `WidePanel`. For low-density data, this
+  will result in significant performance boosts, and smaller memory
+  footprint. Added `to_sparse` methods to `Series`, `DataFrame`, and
+  `WidePanel`.
 * `Series.describe`, `DataFrame.describe`: produces an R-like table of summary
   statistics about each data column
 * `DataFrame.quantile`, `Series.quantile`
@@ -37,6 +42,13 @@ Release notes
 * Boolean indexing with DataFrame objects: df[df > 1] = 1
 * `pytz` / tzinfo support in `DateRange`
   * `tz_localize`, `tz_normalize`, and `tz_validate` methods added
+* Added `ExcelFile` class to `pandas.io.parsers` for parsing multiple sheets out
+  of a single Excel 2003 document
+* `GroupBy` aggregations can now optionally *broadcast*, e.g. produce an object
+  of the same size with the aggregated value propagated
+* Added `select` function in all data structures: reindex axis based on
+  arbitrary criterion (function returning boolean value),
+  e.g. frame.select(lambda x: 'foo' in x, axis=1)
 
 **Improvements to existing features**
 
@@ -47,6 +59,12 @@ Release notes
 * Column ordering for mixed type data is now completely consistent in
   `DataFrame`. In prior releases, there was inconsistent column ordering in
   `DataMatrix`
+* Improved console / string formatting of DataMatrix with negative numbers
+* Added `skiprows` and `na_values` arguments to `pandas.io.parsers` functions
+  for more flexible IO
+* Can slice `DataFrame` and get a view of the data (when homogeneously typed),
+  e.g. frame.xs(idx, copy=False) or frame.ix[idx]
+* Many speed optimizations throughout `Series` and `DataFrame`
 
 **API Changes**
 
@@ -71,7 +89,20 @@ Release notes
 
 **Bug fixes**
 
-* Column ordering in pandas.io.parsers.
+* Column ordering in `pandas.io.parsers.parseCSV` will match CSV in the presence
+  of mixed-type data
+* Fixed handling of Excel 2003 dates in `ExcelFile` / `parseExcel`
+* `DateRange` caching was happening with high resolution `DateOffset` objects,
+  e.g. `DateOffset(seconds=1)`. This has been fixed
+* Fixed __truediv__ issue in `DataFrame`
+* Fixed `DataFrame.toCSV` bug preventing IO round trips in some cases
+* Fixed bug in `Series.plot` causing matplotlib to barf in exceptional cases
+
+Thanks
+------
+- Joon Ro
+- Michael Pennington
+- Chris Withers
 
 ************************
 pandas 0.3 Release Notes
diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index 8fa587ab7..ab451c728 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -2,7 +2,7 @@
 Module contains tools for processing files into DataFrames or other objects
 """
 
-from datetime import datetime, timedelta
+from datetime import datetime
 from itertools import izip
 import re
 import string
@@ -19,7 +19,7 @@ def read_csv(filepath, header=0, skiprows=None, index_col=0,
 
     Parameters
     ----------
-    filepath : string
+    filepath : string or file handle
 
     header : int, default 0
         Row to use for the column labels of the parsed DataFrame
@@ -46,31 +46,35 @@ def read_csv(filepath, header=0, skiprows=None, index_col=0,
     return simpleParser(lines, header=header, indexCol=index_col,
                         na_values=na_values)
 
-def parseCSV(filepath, header=0, skiprows=None, indexCol=0,
-             na_values=None):
-    """
-    Parse CSV file into a DataFrame object. Try to parse dates if possible.
+def read_table(filepath, sep='\t', header=0, skiprows=None, index_col=0,
+               na_values=None, names=None):
     """
-    return read_csv(filepath, header=header, skiprows=skiprows,
-                    index_col=indexCol, na_values=na_values)
+    Read delimited file into DataFrame
 
-def read_table(path, header=0, index_col=0, delimiter=','):
-    data = np.genfromtxt(path, delimiter=delimiter,
-                         names=header is not None,
-                         dtype=object)
-
-    columns = data.dtype.names
-
-def parseText(filepath, sep='\t', header=0, indexCol=0, colNames=None):
-    """
-    Parse whitespace separated file into a DataFrame object.
-    Try to parse dates if possible.
+    Parameters
+    ----------
+    filepath : string or file handle
+    sep : string, default '\t'
+        Delimiter to use
+    header : int, default 0
+        Row to use for the column labels of the parsed DataFrame
+    skiprows : list-like
+        Row numbers to skip (0-indexed)
+    index_col : int, default 0
+        Column to use as the row labels of the DataFrame. Pass None if there is
+        no such column
     """
-    lines = [re.split(sep, l.rstrip()) for l in open(filepath,'rb').readlines()]
-    return simpleParser(lines, header=header, indexCol=indexCol,
-                        colNames = colNames)
+    reader = open(filepath,'rb')
 
+    if skiprows is not None:
+        skiprows = set(skiprows)
+        lines = [l for i, l in enumerate(reader) if i not in skiprows]
+    else:
+        lines = [l for l in reader]
 
+    lines = [re.split(sep, l.rstrip()) for l in lines]
+    return simpleParser(lines, header=header, indexCol=index_col,
+                        colNames=names, na_values=na_values)
 
 def simpleParser(lines, colNames=None, header=0, indexCol=0,
                  na_values=None):
@@ -171,9 +175,8 @@ def _try_parse_dates(values):
         # failed
         return values
 
-#===============================================================================
-# Excel tools
-#===============================================================================
+#-------------------------------------------------------------------------------
+# ExcelFile class
 
 
 class ExcelFile(object):
@@ -235,6 +238,26 @@ class ExcelFile(object):
         return simpleParser(data, header=header, indexCol=index_col,
                             na_values=na_values)
 
+#-------------------------------------------------------------------------------
+# Basically deprecated stuff
+
+def parseCSV(filepath, header=0, skiprows=None, indexCol=0,
+             na_values=None):
+    """
+    Parse CSV file into a DataFrame object. Try to parse dates if possible.
+    """
+    return read_csv(filepath, header=header, skiprows=skiprows,
+                    index_col=indexCol, na_values=na_values)
+
+def parseText(filepath, sep='\t', header=0, indexCol=0, colNames=None):
+    """
+    Parse whitespace separated file into a DataFrame object.
+    Try to parse dates if possible.
+    """
+    return read_table(filepath, sep=sep, header=header, index_col=indexCol,
+                      names=colNames)
+
+
 def parseExcel(filepath, header=None, indexCol=0, sheetname=None, **kwds):
     """
 
@@ -242,3 +265,4 @@ def parseExcel(filepath, header=None, indexCol=0, sheetname=None, **kwds):
     excel_file = ExcelFile(filepath)
     return excel_file.parse(sheetname, header=header, index_col=indexCol)
 
+
