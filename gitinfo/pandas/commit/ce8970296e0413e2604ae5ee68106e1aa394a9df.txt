commit ce8970296e0413e2604ae5ee68106e1aa394a9df
Author: Jim Crist <crist042@umn.edu>
Date:   Mon Apr 13 10:23:45 2015 -0500

    Period accepts datetime64 value
    
    Added support for `datetime64` value for Period. Fixes #9054.

diff --git a/doc/source/whatsnew/v0.16.1.txt b/doc/source/whatsnew/v0.16.1.txt
index e1e930ee2..dda5a34a6 100644
--- a/doc/source/whatsnew/v0.16.1.txt
+++ b/doc/source/whatsnew/v0.16.1.txt
@@ -49,6 +49,7 @@ Enhancements
 
 - Allow conversion of values with dtype ``datetime64`` or ``timedelta64`` to strings using ``astype(str)`` (:issue:`9757`)
 - ``get_dummies`` function now accepts ``sparse`` keyword.  If set to ``True``, the return ``DataFrame`` is sparse, e.g. ``SparseDataFrame``. (:issue:`8823`)
+- ``Period`` now accepts ``datetime64`` as value input. (:issue:`9054`)
 
 .. _whatsnew_0161.api:
 
diff --git a/pandas/src/period.pyx b/pandas/src/period.pyx
index cc6ad3def..b4a4930e0 100644
--- a/pandas/src/period.pyx
+++ b/pandas/src/period.pyx
@@ -710,6 +710,10 @@ cdef class Period(object):
             dt = value
             if freq is None:
                 raise ValueError('Must supply freq for datetime value')
+        elif isinstance(value, np.datetime64):
+            dt = Timestamp(value)
+            if freq is None:
+                raise ValueError('Must supply freq for datetime value')
         elif isinstance(value, date):
             dt = datetime(year=value.year, month=value.month, day=value.day)
             if freq is None:
diff --git a/pandas/tseries/tests/test_period.py b/pandas/tseries/tests/test_period.py
index 17edcd750..a471a536a 100644
--- a/pandas/tseries/tests/test_period.py
+++ b/pandas/tseries/tests/test_period.py
@@ -226,7 +226,13 @@ class TestPeriodProperties(tm.TestCase):
 
         i1 = Period(date(2007, 1, 1), freq='M')
         i2 = Period(datetime(2007, 1, 1), freq='M')
+        i3 = Period(np.datetime64('2007-01-01'), freq='M')
+        i4 = Period(np.datetime64('2007-01-01 00:00:00Z'), freq='M')
+        i5 = Period(np.datetime64('2007-01-01 00:00:00.000Z'), freq='M')
         self.assertEqual(i1, i2)
+        self.assertEqual(i1, i3)
+        self.assertEqual(i1, i4)
+        self.assertEqual(i1, i5)
 
         i1 = Period('2007-01-01 09:00:00.001')
         expected = Period(datetime(2007, 1, 1, 9, 0, 0, 1000), freq='L')
