commit feba1be541c53d75aa73f97f90efe62d43134896
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Jan 13 17:44:32 2012 -0500

    BUG: fix #623 and refactor Series.to_string into format.py

diff --git a/pandas/core/format.py b/pandas/core/format.py
index 015520750..d5d2ee815 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -1,5 +1,7 @@
+from itertools import izip
+
 from StringIO import StringIO
-from pandas.core.common import adjoin
+from pandas.core.common import adjoin, isnull, _format
 from pandas.core.index import MultiIndex, _ensure_index
 
 import pandas.core.common as com
@@ -37,6 +39,101 @@ docstring_to_string = """
     index_names : bool, optional
         Prints the names of the indexes, default True """
 
+class SeriesFormatter(object):
+
+    def __init__(self, series, buf=None, header=True, length=True,
+                 na_rep='NaN', name=False, float_format=None):
+        self.series = series
+        self.buf = buf if buf is not None else StringIO()
+        self.name = name
+        self.na_rep = na_rep
+        self.float_format = float_format
+        self.length = length
+        self.header = header
+
+        def formatter(x, col_width=None):
+            return _format(x, self.series.dtype,
+                           na_rep=self.na_rep,
+                           float_format=self.float_format,
+                           col_width=col_width)
+        self.formatter = formatter
+
+    def _get_footer(self):
+        footer = ''
+        if self.name:
+            footer += ("Name: %s" % str(self.series.name)
+                       if self.series.name else '')
+
+        if self.length:
+            if footer:
+                footer += ', '
+            footer += 'Length: %d' % len(self.series)
+        return footer
+
+    def _get_formatted_index(self):
+        index = self.series.index
+        is_multi = isinstance(index, MultiIndex)
+        if is_multi:
+            have_header = any(name for name in index.names)
+            fmt_index = index.format(names=True)
+        else:
+            have_header = index.name is not None
+            fmt_index = index.format(name=True)
+        return fmt_index, have_header
+
+    def _get_formatted_values(self):
+        series = self.series
+        vals = series.values
+
+        if self.float_format is None:
+            float_format = com.print_config.float_format
+            if float_format is None:
+                float_format = com._float_format_default
+
+        # floating point handling
+        if series.dtype == 'O':
+            is_float = (series.map(com.is_float) & series.notnull()).values
+            leading_space = is_float.any()
+
+            fmt_values = []
+            for i, v in enumerate(vals):
+                if not is_float[i] and leading_space:
+                    fmt_values.append(' %s' % self.formatter(v))
+                elif is_float[i]:
+                    fmt_values.append(float_format(v))
+                elif not leading_space:
+                    fmt_values.append(' %s' % self.formatter(v))
+                else:
+                    fmt_values.append(self.formatter(v))
+        else:
+            fmt_values = _format_fixed_width(self.series.values,
+                                             self.formatter)
+        return fmt_values
+
+    def to_string(self):
+        series = self.series
+
+        if len(series) == 0:
+            return ''
+
+        fmt_index, have_header = self._get_formatted_index()
+        fmt_values = self._get_formatted_values()
+
+        maxlen = max(len(x) for x in fmt_index)
+        pad_space = min(maxlen, 60)
+        result = ['%s   %s' % (k.ljust(pad_space), v)
+                  for (k, v) in izip(fmt_index[1:], fmt_values)]
+
+        if self.header and have_header:
+            result.insert(0, fmt_index[0])
+
+        footer = self._get_footer()
+        if footer:
+            result.append(footer)
+
+        return '\n'.join(result)
+
+
 class DataFrameFormatter(object):
     """
     Render a DataFrame
@@ -149,10 +246,8 @@ class DataFrameFormatter(object):
             if i is not None:
                 return formatter(self.frame[col][i])
             else:
-                formatted = [formatter(x) for x in self.frame[col]]
-                max_len = max(map(len, formatted))
-                return [formatter(x, col_width=max_len)
-                        for x in self.frame[col]]
+                return _format_fixed_width(self.frame[col],
+                                           formatter)
 
     def to_html(self):
         """
@@ -332,6 +427,11 @@ class DataFrameFormatter(object):
             names.append('' if columns.name is None else columns.name)
         return names
 
+def _format_fixed_width(values, formatter):
+    formatted = [formatter(x) for x in values]
+    max_len = max(len(x) for x in formatted)
+    return [formatter(x, col_width=max_len) for x in values]
+
 def single_column_table(column):
     table = '<table><tbody>'
     for i in column:
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 09e0edb8d..8fe51364f 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -15,9 +15,9 @@ import numpy.ma as ma
 
 from pandas.core.common import (isnull, notnull, _is_bool_indexer,
                                 _default_index, _maybe_upcast,
-                                _asarray_tuplesafe,
-                                AmbiguousIndexError)
+                                _asarray_tuplesafe)
 from pandas.core.daterange import DateRange
+from pandas.core.format import SeriesFormatter
 from pandas.core.index import Index, MultiIndex, _ensure_index
 from pandas.core.indexing import _SeriesIndexer, _maybe_droplevels
 from pandas.util import py3compat
@@ -545,69 +545,10 @@ copy : boolean, default False
 
     def _get_repr(self, name=False, print_header=False, length=True,
                   na_rep='NaN', float_format=None):
-        if len(self) == 0:
-            return ''
-
-        vals = self.values
-        index = self.index
-
-        is_multi = isinstance(index, MultiIndex)
-        if is_multi:
-            have_header = any(name for name in index.names)
-            string_index = index.format(names=True)
-            header, string_index = string_index[0], string_index[1:]
-        else:
-            have_header = index.name is not None
-            header = str(index.name)
-            string_index = index.format()
-
-        maxlen = max(len(x) for x in string_index)
-        padSpace = min(maxlen, 60)
-
-        if float_format is None:
-            float_format = com.print_config.float_format
-            if float_format is None:
-                float_format = com._float_format_default
-
-        def _format(k, v, extra=0):
-            # GH #490
-            if not isinstance(v, np.ndarray) and isnull(v):
-                v = na_rep
-            if com.is_float(v):
-                v = float_format(v)
-            strv = ' ' * extra + str(v).replace('\n', ' ')
-            return '%s    %s' % (str(k).ljust(padSpace), strv)
-
-        # floating point handling
-        if self.dtype == 'O':
-            is_float = (self.map(com.is_float) & self.notnull()).values
-            leading_space = is_float.any()
-
-            res = []
-            for i, (k, v) in enumerate(izip(string_index, vals)):
-                if not is_float[i] and leading_space:
-                    res.append(_format(k, v, extra=1))
-                else:
-                    res.append(_format(k, v))
-        else:
-            res = [_format(idx, v) for idx, v in izip(string_index, vals)]
-
-        if print_header and have_header:
-            res.insert(0, header)
-
-        footer = ''
-        if name:
-            footer += "Name: %s" % str(self.name) if self.name else ''
-
-        if length:
-            if footer:
-                footer += ', '
-            footer += 'Length: %d' % len(self)
-
-        if footer:
-            res.append(footer)
-
-        return '\n'.join(res)
+        formatter = SeriesFormatter(self, name=name, header=print_header,
+                                    length=length, na_rep=na_rep,
+                                    float_format=float_format)
+        return formatter.to_string()
 
     def __str__(self):
         return repr(self)
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index e88b5262d..8419760c6 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -722,10 +722,10 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
     def test_to_string_mixed(self):
         s = Series(['foo', np.nan, -1.23, 4.56])
         result = s.to_string()
-        expected = ('0     foo\n'
-                    '1     NaN\n'
-                    '2    -1.23\n'
-                    '3     4.56')
+        expected = ('0    foo\n'
+                    '1    NaN\n'
+                    '2   -1.23\n'
+                    '3    4.56')
         self.assertEqual(result, expected)
 
         # but don't count NAs as floats
@@ -737,6 +737,18 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
                     '3    baz')
         self.assertEqual(result, expected)
 
+    def test_to_string_float_na_spacing(self):
+        s = Series([0., 1.5678, 2., -3., 4.])
+        s[::2] = np.nan
+
+        result = s.to_string()
+        expected = ('0    NaN\n'
+                    '1    1.568\n'
+                    '2    NaN\n'
+                    '3   -3.000\n'
+                    '4    NaN')
+        self.assertEqual(result, expected)
+
     def test_iter(self):
         for i, val in enumerate(self.series):
             self.assertEqual(val, self.series[i])
