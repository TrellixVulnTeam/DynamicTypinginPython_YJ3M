commit 5ed523c22e4447e89614ad1311334d1ab69adcc7
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Oct 31 20:56:41 2012 -0400

    BUG: fix formatting of dict entries in Series/DataFrame. close #2144

diff --git a/RELEASE.rst b/RELEASE.rst
index b3a955539..7d62c780e 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -43,6 +43,7 @@ pandas 0.9.1
   - Correctly compute/box datetime64 min/max values from Series.min/max (#2083)
   - Fix unstacking edge case with unrepresented groups (#2100)
   - Fix Series.str failures when using pipe pattern '|' (#2119)
+  - Fix pretty-printing of dict entries in Series, DataFrame (#2144)
 
 pandas 0.9.0
 ============
diff --git a/pandas/core/common.py b/pandas/core/common.py
index c400a5e11..c52de8567 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -1053,6 +1053,19 @@ def _pprint_seq(seq, _nest_lvl=0):
     fmt = u"[%s]" if hasattr(seq, '__setitem__') else u"(%s)"
     return fmt % ", ".join(pprint_thing(e, _nest_lvl + 1) for e in seq)
 
+def _pprint_dict(seq, _nest_lvl=0):
+    """
+    internal. pprinter for iterables. you should probably use pprint_thing()
+    rather then calling this directly.
+    """
+    fmt = u"{%s}"
+    pairs = []
+
+    pfmt = u"%s: %s"
+    for k, v in seq.items():
+        pairs.append(pfmt % (repr(k), repr(v)))
+    return fmt % ", ".join(pairs)
+
 
 def pprint_thing(thing, _nest_lvl=0):
     """
@@ -1077,6 +1090,9 @@ def pprint_thing(thing, _nest_lvl=0):
     from pandas.core.format import print_config
     if thing is None:
         result = ''
+    elif (isinstance(thing, dict) and
+          _nest_lvl < print_config.pprint_nest_depth):
+        result = _pprint_dict(thing, _nest_lvl)
     elif _is_sequence(thing) and _nest_lvl < print_config.pprint_nest_depth:
         result = _pprint_seq(thing, _nest_lvl)
     else:
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index 650ef1453..00f92448b 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -785,6 +785,11 @@ class TestDataFrameFormatting(unittest.TestCase):
             self.assert_(('+10' in line) or skip)
             skip = False
 
+    def test_dict_entries(self):
+        df = DataFrame({'A': [{'a':1, 'b':2}]})
+
+        val = df.to_string()
+        self.assertTrue("{'a': 1, 'b': 2}" in val)
 
 class TestSeriesFormatting(unittest.TestCase):
 
