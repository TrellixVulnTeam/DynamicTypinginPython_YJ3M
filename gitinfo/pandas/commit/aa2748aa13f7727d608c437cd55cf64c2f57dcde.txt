commit aa2748aa13f7727d608c437cd55cf64c2f57dcde
Author: Martin Blais <blais@furius.ca>
Date:   Sat Aug 4 23:10:28 2012 -0400

    DataFrameFormatter: Implemented really basic (but working) LaTeX serialization support in DataFrame.to_latex().

diff --git a/pandas/core/format.py b/pandas/core/format.py
index f825cf5ea..3d2d4e75d 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -151,6 +151,7 @@ class DataFrameFormatter(object):
 
     self.to_string() : console-friendly tabular output
     self.to_html()   : html table
+    self.to_latex()   : LaTeX tabular environment table
 
     """
 
@@ -251,17 +252,41 @@ class DataFrameFormatter(object):
         else:
             strcols = self._to_str_columns(force_unicode)
             text = adjoin(1, *strcols)
-            
-        self.buf.writelines(text)
-
-
 
+        self.buf.writelines(text)
 
+    def to_latex(self, force_unicode=False, column_format=None):
+        """
+        Render a DataFrame to a LaTeX tabular environment output.
+        """
+        frame = self.frame
 
+        if len(frame.columns) == 0 or len(frame.index) == 0:
+            info_line = (u'Empty %s\nColumns: %s\nIndex: %s'
+                         % (type(self.frame).__name__,
+                            frame.columns, frame.index))
+            strcols = [[info_line]]
+        else:
+            strcols = self._to_str_columns(force_unicode)
 
+        if column_format is None:
+            column_format = '|l|%s|' % '|'.join('c' for _ in strcols)
+        else:
+            assert isinstance(column_format, str)
 
+        self.buf.write('\\begin{tabular}{%s}\n' % column_format)
+        self.buf.write('\\hline\n')
 
+        nlevels = frame.index.nlevels
+        for i, row in enumerate(izip(*strcols)):
+            if i == nlevels:
+                self.buf.write('\\hline\n') # End of header
+            crow = [(x.replace('_', '\\_') if x else '{}') for x in row]
+            self.buf.write(' & '.join(crow))
+            self.buf.write(' \\\\\n')
 
+        self.buf.write('\\hline\n')
+        self.buf.write('\\end{tabular}\n')
 
     def _format_col(self, i):
         col = self.columns[i]
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 1a09ba6a8..d32af46f7 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1268,6 +1268,32 @@ class DataFrame(NDFrame):
         if buf is None:
             return formatter.buf.getvalue()
 
+    @Appender(fmt.docstring_to_string, indents=1)
+    def to_latex(self, buf=None, columns=None, col_space=None, colSpace=None,
+                 header=True, index=True, na_rep='NaN', formatters=None,
+                 float_format=None, sparsify=None, index_names=True,
+                 bold_rows=True):
+        """
+        to_latex-specific options
+        bold_rows : boolean, default True
+            Make the row labels bold in the output
+
+        Render a DataFrame to a tabular environment table.
+        You can splice this into a LaTeX document.
+        """
+        formatter = fmt.DataFrameFormatter(self, buf=buf, columns=columns,
+                                           col_space=col_space, na_rep=na_rep,
+                                           header=header, index=index,
+                                           formatters=formatters,
+                                           float_format=float_format,
+                                           bold_rows=bold_rows,
+                                           sparsify=sparsify,
+                                           index_names=index_names)
+        formatter.to_latex()
+
+        if buf is None:
+            return formatter.buf.getvalue()
+
     def info(self, verbose=True, buf=None):
         """
         Concise summary of a DataFrame, used in __repr__ when very large.
