commit 7bc8f445c897e83cb9d5795081642d90fbb15c85
Author: Chang She <changshe@gmail.com>
Date:   Tue Sep 18 11:00:19 2012 -0400

    BUG: no zone in tzinfo #1838

diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index e1dc008ae..b2289baa5 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -579,7 +579,7 @@ class HDFStore(object):
                 node._v_attrs.freq = index.freq
 
             if hasattr(index, 'tz') and index.tz is not None:
-                node._v_attrs.tz = index.tz.zone
+                node._v_attrs.tz = lib.get_timezone(index.tz)
 
     def _read_index(self, group, key):
         variety = getattr(group._v_attrs, '%s_variety' % key)
@@ -1159,4 +1159,3 @@ def _get_index_factory(klass):
                                              tz=tz)
         return f
     return klass
-
diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index c24051ba8..80ebcecc6 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -107,12 +107,14 @@ class Timestamp(_Timestamp):
         try:
             result += self.strftime('%z')
             if self.tzinfo:
-                result += self.strftime(' %%Z, tz=%s' % self.tzinfo.zone)
+                zone = _get_zone(self.tzinfo)
+                result += self.strftime(' %%Z, tz=%s' % zone)
         except ValueError:
             year2000 = self.replace(year=2000)
             result += year2000.strftime('%z')
             if self.tzinfo:
-                result += year2000.strftime(' %%Z, tz=%s' % self.tzinfo.zone)
+                zone = _get_zone(self.tzinfo)
+                result += year2000.strftime(' %%Z, tz=%s' % zone)
 
         return '<Timestamp: %s>' % result
 
@@ -615,6 +617,9 @@ cpdef convert_to_tsobject(object ts, object tz=None):
 
     return obj
 
+def get_timezone(tz):
+    return _get_zone(tz)
+
 cdef inline bint _is_utc(object tz):
     return tz is UTC or isinstance(tz, _du_utc)
 
@@ -911,7 +916,7 @@ def tz_convert(ndarray[int64_t] vals, object tz1, object tz2):
 
     # Convert to UTC
 
-    if tz1.zone != 'UTC':
+    if _get_zone(tz1) != 'UTC':
         utc_dates = np.empty(n, dtype=np.int64)
         deltas = _get_deltas(tz1)
         trans = _get_transitions(tz1)
@@ -929,7 +934,7 @@ def tz_convert(ndarray[int64_t] vals, object tz1, object tz2):
     else:
         utc_dates = vals
 
-    if tz2.zone == 'UTC':
+    if _get_zone(tz2) == 'UTC':
         return utc_dates
 
     # Convert UTC to other timezone
@@ -968,7 +973,7 @@ def tz_convert_single(int64_t val, object tz1, object tz2):
 
     # Convert to UTC
 
-    if tz1.zone != 'UTC':
+    if _get_zone(tz1) != 'UTC':
         deltas = _get_deltas(tz1)
         trans = _get_transitions(tz1)
         pos = trans.searchsorted(val) - 1
@@ -979,7 +984,7 @@ def tz_convert_single(int64_t val, object tz1, object tz2):
     else:
         utc_date = val
 
-    if tz2.zone == 'UTC':
+    if _get_zone(tz2) == 'UTC':
         return utc_date
 
     # Convert UTC to other timezone
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 679a27365..efc67606d 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -1220,7 +1220,7 @@ class DatetimeIndex(Int64Index):
         if self.tz is not None:
             if other.tz is None:
                 return False
-            same_zone = self.tz.zone == other.tz.zone
+            same_zone = lib.get_timezone(self.tz) == lib.get_timezone(other.tz)
         else:
             if other.tz is not None:
                 return False
diff --git a/pandas/tseries/tests/test_timezones.py b/pandas/tseries/tests/test_timezones.py
index ce9e28d18..1fe3adbb2 100644
--- a/pandas/tseries/tests/test_timezones.py
+++ b/pandas/tseries/tests/test_timezones.py
@@ -152,6 +152,16 @@ class TestTimeZoneSupport(unittest.TestCase):
         stamp = Timestamp('3/11/2012 05:00').tz_localize('utc')
         self.assertEquals(utc_stamp.hour, 5)
 
+    def test_create_with_fixed_tz(self):
+        off = FixedOffset(4200, '+07:00')
+        start = Timestamp('3/11/2012 05:00', tz=off)
+        end = Timestamp('6/11/2012 05:00', tz=off)
+        rng = date_range(start=start, end=end)
+        self.assertEqual(off, rng.tz)
+
+        rng2 = date_range(start, periods=len(rng), tz=off)
+        self.assert_(rng.equals(rng2))
+
     def test_date_range_localize(self):
         rng = date_range('3/11/2012 03:00', periods=15, freq='H', tz='US/Eastern')
         rng2 = DatetimeIndex(['3/11/2012 03:00', '3/11/2012 04:00'],
diff --git a/pandas/tseries/tools.py b/pandas/tseries/tools.py
index 9d98c12d1..16b8c7497 100644
--- a/pandas/tseries/tools.py
+++ b/pandas/tseries/tools.py
@@ -21,12 +21,11 @@ except ImportError: # pragma: no cover
     print 'Please install python-dateutil via easy_install or some method!'
     raise # otherwise a 2nd import won't show the message
 
-
 def _infer_tzinfo(start, end):
     def _infer(a, b):
         tz = a.tzinfo
         if b and b.tzinfo:
-            assert(tz.zone == b.tzinfo.zone)
+            assert(lib.get_timezone(tz) == lib.get_timezone(b.tzinfo))
         return tz
     tz = None
     if start is not None:
