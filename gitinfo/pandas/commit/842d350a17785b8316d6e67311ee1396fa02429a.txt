commit 842d350a17785b8316d6e67311ee1396fa02429a
Author: Jeff Reback <jeff@reback.net>
Date:   Wed Feb 21 19:12:22 2018 -0500

    DEPR: remove pandas.core.common is_* (#19769)

diff --git a/doc/source/whatsnew/v0.23.0.txt b/doc/source/whatsnew/v0.23.0.txt
index c9951e0ec..f947cacbf 100644
--- a/doc/source/whatsnew/v0.23.0.txt
+++ b/doc/source/whatsnew/v0.23.0.txt
@@ -345,6 +345,23 @@ Convert to an xarray DataArray
 
    p.to_xarray()
 
+
+
+.. _whatsnew_0230.api_breaking.core_common:
+
+pandas.core.common removals
+~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+The following error & warning messages are removed from ``pandas.core.common`` (:issue:`13634`, :issue:`19769`):
+
+- ``PerformanceWarning``
+- ``UnsupportedFunctionCall``
+- ``UnsortedIndexError``
+- ``AbstractMethodError``
+
+These are available from import from ``pandas.errors`` (since 0.19.0).
+
+
 .. _whatsnew_0230.api_breaking.apply:
 
 Changes to make output of ``DataFrame.apply`` consistent
@@ -644,6 +661,7 @@ Removal of prior version deprecations/changes
 - The modules ``pandas.tools.hashing`` and ``pandas.util.hashing`` have been removed (:issue:`16223`)
 - The top-level functions ``pd.rolling_*``, ``pd.expanding_*`` and ``pd.ewm*`` have been removed (Deprecated since v0.18).
   Instead, use the DataFrame/Series methods :attr:`~DataFrame.rolling`, :attr:`~DataFrame.expanding` and :attr:`~DataFrame.ewm` (:issue:`18723`)
+- Imports from ``pandas.core.common`` for functions such as ``is_datetime64_dtype`` are now removed. These are located in ``pandas.api.types``. (:issue:`13634`, :issue:`19769`)
 
 .. _whatsnew_0230.performance:
 
diff --git a/pandas/core/base.py b/pandas/core/base.py
index ebd69a5f9..280b88497 100644
--- a/pandas/core/base.py
+++ b/pandas/core/base.py
@@ -17,7 +17,7 @@ from pandas.core.dtypes.common import (
     is_extension_array_dtype)
 
 from pandas.util._validators import validate_bool_kwarg
-
+from pandas.errors import AbstractMethodError
 from pandas.core import common as com, algorithms
 import pandas.core.nanops as nanops
 import pandas._libs.lib as lib
@@ -46,7 +46,7 @@ class StringMixin(object):
     # Formatting
 
     def __unicode__(self):
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     def __str__(self):
         """
@@ -278,10 +278,10 @@ class SelectionMixin(object):
             subset to act on
 
         """
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     def aggregate(self, func, *args, **kwargs):
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     agg = aggregate
 
@@ -1247,4 +1247,4 @@ class IndexOpsMixin(object):
     # abstracts
 
     def _update_inplace(self, result, **kwargs):
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
diff --git a/pandas/core/common.py b/pandas/core/common.py
index 77dc15220..c4fbcf28c 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -2,8 +2,6 @@
 Misc tools for implementing data structures
 """
 
-import sys
-import warnings
 from datetime import datetime, timedelta
 from functools import partial
 import inspect
@@ -20,66 +18,8 @@ from pandas.core.dtypes.common import _NS_DTYPE
 from pandas.core.dtypes.inference import _iterable_not_string
 from pandas.core.dtypes.missing import isna, isnull, notnull  # noqa
 from pandas.api import types
-from pandas.core.dtypes import common
 from pandas.core.dtypes.cast import construct_1d_object_array_from_listlike
 
-# compat
-from pandas.errors import (  # noqa
-    PerformanceWarning, UnsupportedFunctionCall, UnsortedIndexError,
-    AbstractMethodError)
-
-# back-compat of public API
-# deprecate these functions
-m = sys.modules['pandas.core.common']
-for t in [t for t in dir(types) if not t.startswith('_')]:
-
-    def outer(t=t):
-
-        def wrapper(*args, **kwargs):
-            warnings.warn("pandas.core.common.{t} is deprecated. "
-                          "import from the public API: "
-                          "pandas.api.types.{t} instead".format(t=t),
-                          DeprecationWarning, stacklevel=3)
-            return getattr(types, t)(*args, **kwargs)
-        return wrapper
-
-    setattr(m, t, outer(t))
-
-# back-compat for non-public functions
-# deprecate these functions
-for t in ['is_datetime_arraylike',
-          'is_datetime_or_timedelta_dtype',
-          'is_datetimelike',
-          'is_datetimelike_v_numeric',
-          'is_datetimelike_v_object',
-          'is_datetimetz',
-          'is_int_or_datetime_dtype',
-          'is_period_arraylike',
-          'is_string_like',
-          'is_string_like_dtype']:
-
-    def outer(t=t):
-
-        def wrapper(*args, **kwargs):
-            warnings.warn("pandas.core.common.{t} is deprecated. "
-                          "These are not longer public API functions, "
-                          "but can be imported from "
-                          "pandas.api.types.{t} instead".format(t=t),
-                          DeprecationWarning, stacklevel=3)
-            return getattr(common, t)(*args, **kwargs)
-        return wrapper
-
-    setattr(m, t, outer(t))
-
-
-# deprecate array_equivalent
-
-def array_equivalent(*args, **kwargs):
-    warnings.warn("'pandas.core.common.array_equivalent' is deprecated and "
-                  "is no longer public API", DeprecationWarning, stacklevel=2)
-    from pandas.core.dtypes import missing
-    return missing.array_equivalent(*args, **kwargs)
-
 
 class SettingWithCopyError(ValueError):
     pass
diff --git a/pandas/core/resample.py b/pandas/core/resample.py
index df656092f..772568ee8 100644
--- a/pandas/core/resample.py
+++ b/pandas/core/resample.py
@@ -16,7 +16,7 @@ from pandas.core.indexes.datetimes import DatetimeIndex, date_range
 from pandas.core.indexes.timedeltas import TimedeltaIndex
 from pandas.tseries.offsets import DateOffset, Tick, Day, delta_to_nanoseconds
 from pandas.core.indexes.period import PeriodIndex
-import pandas.core.common as com
+from pandas.errors import AbstractMethodError
 import pandas.core.algorithms as algos
 from pandas.core.dtypes.generic import ABCDataFrame, ABCSeries
 
@@ -205,10 +205,10 @@ class Resampler(_GroupBy):
     def __getitem__(self, key):
         try:
             return super(Resampler, self).__getitem__(key)
-        except (KeyError, com.AbstractMethodError):
+        except (KeyError, AbstractMethodError):
 
             # compat for deprecated
-            if isinstance(self.obj, com.ABCSeries):
+            if isinstance(self.obj, ABCSeries):
                 return self._deprecated('__getitem__')[key]
 
             raise
@@ -233,7 +233,7 @@ class Resampler(_GroupBy):
         return obj
 
     def _get_binner_for_time(self):
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     def _set_binner(self):
         """
@@ -372,10 +372,10 @@ one pass, you can do
             arg, *args, **kwargs)
 
     def _downsample(self, f):
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     def _upsample(self, f, limit=None, fill_value=None):
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     def _gotitem(self, key, ndim, subset=None):
         """
@@ -464,7 +464,7 @@ one pass, you can do
 
     def _wrap_result(self, result):
         """ potentially wrap any results """
-        if isinstance(result, com.ABCSeries) and self._selection is not None:
+        if isinstance(result, ABCSeries) and self._selection is not None:
             result.name = self._selection
 
         if isinstance(result, ABCSeries) and result.empty:
diff --git a/pandas/tests/api/test_types.py b/pandas/tests/api/test_types.py
index 7e6430acc..bd4891326 100644
--- a/pandas/tests/api/test_types.py
+++ b/pandas/tests/api/test_types.py
@@ -3,10 +3,8 @@
 import pytest
 
 from warnings import catch_warnings
-import numpy as np
 
 import pandas
-from pandas.core import common as com
 from pandas.api import types
 from pandas.util import testing as tm
 
@@ -52,42 +50,6 @@ class TestTypes(Base):
             except AttributeError:
                 pytest.raises(AttributeError, lambda: fnew('foo'))
 
-    def test_deprecation_core_common(self):
-
-        # test that we are in fact deprecating
-        # the pandas.core.common introspectors
-        for t in self.allowed:
-            self.check_deprecation(getattr(com, t), getattr(types, t))
-
-    def test_deprecation_core_common_array_equivalent(self):
-
-        with tm.assert_produces_warning(DeprecationWarning):
-            com.array_equivalent(np.array([1, 2]), np.array([1, 2]))
-
-    def test_deprecation_core_common_moved(self):
-
-        # these are in pandas.core.dtypes.common
-        l = ['is_datetime_arraylike',
-             'is_datetime_or_timedelta_dtype',
-             'is_datetimelike',
-             'is_datetimelike_v_numeric',
-             'is_datetimelike_v_object',
-             'is_datetimetz',
-             'is_int_or_datetime_dtype',
-             'is_period_arraylike',
-             'is_string_like',
-             'is_string_like_dtype']
-
-        from pandas.core.dtypes import common as c
-        for t in l:
-            self.check_deprecation(getattr(com, t), getattr(c, t))
-
-    def test_removed_from_core_common(self):
-
-        for t in ['is_null_datelike_scalar',
-                  'ensure_float']:
-            pytest.raises(AttributeError, lambda: getattr(com, t))
-
     def test_deprecated_from_api_types(self):
 
         for t in self.deprecated:
