commit ee4a25d5ddbe07e8a009284261e646d211b4bb09
Author: Chang She <chang@lambdafoundry.com>
Date:   Thu Jul 12 22:26:51 2012 -0400

    ENH: plot one column vs another #857 #1527

diff --git a/pandas/tests/test_graphics.py b/pandas/tests/test_graphics.py
index 134af4e36..d0053b478 100644
--- a/pandas/tests/test_graphics.py
+++ b/pandas/tests/test_graphics.py
@@ -10,6 +10,7 @@ import pandas.util.testing as tm
 
 import numpy as np
 
+from numpy.testing import assert_array_equal
 from numpy.testing.decorators import slow
 import pandas.tools.plotting as plotting
 
@@ -163,6 +164,34 @@ class TestDataFramePlots(unittest.TestCase):
                        index=MultiIndex.from_tuples(tuples))
         _check_plot_works(df.plot, use_index=True)
 
+    @slow
+    def test_plot_xy(self):
+        df = tm.makeTimeDataFrame()
+        self._check_data(df.plot(x=0, y=1),
+                         df.set_index('A').sort_index()['B'].plot())
+
+        self._check_data(df.plot(x=0), df.set_index('A').sort_index().plot())
+
+        self._check_data(df.plot(y=0), df.B.plot())
+
+        self._check_data(df.plot(x='A', y='B'),
+                         df.set_index('A').sort_index().B.plot())
+
+        self._check_data(df.plot(x='A'), df.set_index('A').sort_index().plot())
+
+        self._check_data(df.plot(y='B'), df.B.plot())
+
+    def _check_data(self, xp, rs):
+        xp_lines = xp.get_lines()
+        rs_lines = rs.get_lines()
+
+        def check_line(xpl, rsl):
+            xpdata = xpl.get_xydata()
+            rsdata = rsl.get_xydata()
+            assert_array_equal(xpdata, rsdata)
+
+        [check_line(xpl, rsl) for xpl, rsl in zip(xp_lines, rs_lines)]
+
     @slow
     def test_subplots(self):
         df = DataFrame(np.random.rand(10, 3),
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index 65d5a39cb..127e674ee 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -1038,17 +1038,21 @@ class HistPlot(MPLPlot):
     pass
 
 
-def plot_frame(frame=None, subplots=False, sharex=True, sharey=False,
-               use_index=True, figsize=None, grid=False, legend=True, rot=None,
-               ax=None, style=None, title=None, xlim=None, ylim=None, logy=False,
-               xticks=None, yticks=None, kind='line', sort_columns=False,
-               fontsize=None, secondary_y=False, **kwds):
+def plot_frame(frame=None, x=None, y=None, subplots=False, sharex=True,
+               sharey=False, use_index=True, figsize=None, grid=False,
+               legend=True, rot=None, ax=None, style=None, title=None, xlim=None,
+               ylim=None, logy=False, xticks=None, yticks=None, kind='line',
+               sort_columns=False, fontsize=None, secondary_y=False, **kwds):
+
     """
     Make line or bar plot of DataFrame's series with the index on the x-axis
     using matplotlib / pylab.
 
     Parameters
     ----------
+    x : int or str, default None
+    y : int or str, default None
+        Allows plotting of one column versus another
     subplots : boolean, default False
         Make separate subplots for each time series
     sharex : boolean, default True
@@ -1104,6 +1108,20 @@ def plot_frame(frame=None, subplots=False, sharex=True, sharey=False,
     else:
         raise ValueError('Invalid chart type given %s' % kind)
 
+    if isinstance(x, int):
+        x = frame.columns[x]
+    if x is not None:
+        frame = frame.set_index(x).sort_index()
+
+    if isinstance(y, int):
+        y = frame.columns[y]
+    if y is not None:
+        return plot_series(frame[y], label=y, kind=kind, use_index=True,
+                           rot=rot, xticks=xticks, yticks=yticks,
+                           xlim=xlim, ylim=ylim, ax=ax, style=style,
+                           grid=grid, logy=logy, secondary_y=secondary_y,
+                           **kwds)
+
     plot_obj = klass(frame, kind=kind, subplots=subplots, rot=rot,
                      legend=legend, ax=ax, style=style, fontsize=fontsize,
                      use_index=use_index, sharex=sharex, sharey=sharey,
@@ -1118,7 +1136,6 @@ def plot_frame(frame=None, subplots=False, sharex=True, sharey=False,
     else:
         return plot_obj.axes[0]
 
-
 def plot_series(series, label=None, kind='line', use_index=True, rot=None,
                 xticks=None, yticks=None, xlim=None, ylim=None,
                 ax=None, style=None, grid=None, logy=False, secondary_y=False,
