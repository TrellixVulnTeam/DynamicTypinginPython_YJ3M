commit 0c58a825181bde2c4d7e1a912e246181d33f55d6
Author: Matthew Roeschke <emailformattr@gmail.com>
Date:   Sun Jul 29 08:32:50 2018 -0700

    CLN: Remove unused variables (#21986)

diff --git a/pandas/core/arrays/categorical.py b/pandas/core/arrays/categorical.py
index 4584e4694..204e800b9 100644
--- a/pandas/core/arrays/categorical.py
+++ b/pandas/core/arrays/categorical.py
@@ -348,7 +348,6 @@ class Categorical(ExtensionArray, PandasObject):
                                  " or `ordered`.")
 
             categories = dtype.categories
-            ordered = dtype.ordered
 
         elif is_categorical(values):
             # If no "dtype" was passed, use the one from "values", but honor
diff --git a/pandas/core/arrays/interval.py b/pandas/core/arrays/interval.py
index 5ecc79e03..ad01d4ec9 100644
--- a/pandas/core/arrays/interval.py
+++ b/pandas/core/arrays/interval.py
@@ -401,7 +401,6 @@ class IntervalArray(IntervalMixin, ExtensionArray):
                     msg = ('{name}.from_tuples received an invalid '
                            'item, {tpl}').format(name=name, tpl=d)
                     raise TypeError(msg)
-                lhs, rhs = d
             left.append(lhs)
             right.append(rhs)
 
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 376700f14..edf341ae2 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -1084,7 +1084,8 @@ class NDFrame(PandasObject, SelectionMixin):
         level = kwargs.pop('level', None)
         axis = kwargs.pop('axis', None)
         if axis is not None:
-            axis = self._get_axis_number(axis)
+            # Validate the axis
+            self._get_axis_number(axis)
 
         if kwargs:
             raise TypeError('rename() got an unexpected keyword '
@@ -5299,6 +5300,12 @@ class NDFrame(PandasObject, SelectionMixin):
         return self.copy(deep=deep)
 
     def __deepcopy__(self, memo=None):
+        """
+        Parameters
+        ----------
+        memo, default None
+            Standard signature. Unused
+        """
         if memo is None:
             memo = {}
         return self.copy(deep=True)
diff --git a/pandas/core/groupby/ops.py b/pandas/core/groupby/ops.py
index 38ac144ac..ba04ff3a3 100644
--- a/pandas/core/groupby/ops.py
+++ b/pandas/core/groupby/ops.py
@@ -582,7 +582,6 @@ class BaseGrouper(object):
         elif values.ndim > 2:
             for i, chunk in enumerate(values.transpose(2, 0, 1)):
 
-                chunk = chunk.squeeze()
                 transform_func(result[:, :, i], values,
                                comp_ids, is_datetimelike, **kwargs)
         else:
diff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py
index f09fe8c8a..8ad058c00 100644
--- a/pandas/core/indexes/base.py
+++ b/pandas/core/indexes/base.py
@@ -993,6 +993,12 @@ class Index(IndexOpsMixin, PandasObject):
         return self.copy(**kwargs)
 
     def __deepcopy__(self, memo=None):
+        """
+        Parameters
+        ----------
+        memo, default None
+            Standard signature. Unused
+        """
         if memo is None:
             memo = {}
         return self.copy(deep=True)
diff --git a/pandas/core/indexes/category.py b/pandas/core/indexes/category.py
index d76a7ef00..ab180a13a 100644
--- a/pandas/core/indexes/category.py
+++ b/pandas/core/indexes/category.py
@@ -133,7 +133,7 @@ class CategoricalIndex(Index, accessor.PandasDelegate):
         if name is None:
             name = self.name
         cat = Categorical.from_codes(codes, categories=categories,
-                                     ordered=self.ordered)
+                                     ordered=ordered)
         return CategoricalIndex(cat, name=name)
 
     @classmethod
diff --git a/pandas/core/indexes/interval.py b/pandas/core/indexes/interval.py
index 246bd3d54..0b467760d 100644
--- a/pandas/core/indexes/interval.py
+++ b/pandas/core/indexes/interval.py
@@ -939,7 +939,6 @@ class IntervalIndex(IntervalMixin, Index):
                 summary = '[{head} ... {tail}]'.format(
                     head=', '.join(head), tail=', '.join(tail))
             else:
-                head = []
                 tail = [formatter(x) for x in self]
                 summary = '[{tail}]'.format(tail=', '.join(tail))
 
diff --git a/pandas/core/internals/blocks.py b/pandas/core/internals/blocks.py
index ffa2267dd..0f3ffb805 100644
--- a/pandas/core/internals/blocks.py
+++ b/pandas/core/internals/blocks.py
@@ -1248,7 +1248,7 @@ class Block(PandasObject):
         if fill_tuple is None:
             fill_value = self.fill_value
             new_values = algos.take_nd(values, indexer, axis=axis,
-                                       allow_fill=False)
+                                       allow_fill=False, fill_value=fill_value)
         else:
             fill_value = fill_tuple[0]
             new_values = algos.take_nd(values, indexer, axis=axis,
@@ -2699,7 +2699,6 @@ class DatetimeBlock(DatetimeLikeBlockMixin, Block):
 
         values_mask = isna(values)
         values = values.view('i8')
-        other_mask = False
 
         if isinstance(other, bool):
             raise TypeError
@@ -2872,11 +2871,9 @@ class DatetimeTZBlock(NonConsolidatableMixIn, DatetimeBlock):
         values_mask = _block_shape(isna(values), ndim=self.ndim)
         # asi8 is a view, needs copy
         values = _block_shape(values.asi8, ndim=self.ndim)
-        other_mask = False
 
         if isinstance(other, ABCSeries):
             other = self._holder(other)
-            other_mask = isna(other)
 
         if isinstance(other, bool):
             raise TypeError
diff --git a/pandas/core/nanops.py b/pandas/core/nanops.py
index 32fd70bcf..f44fb4f6e 100644
--- a/pandas/core/nanops.py
+++ b/pandas/core/nanops.py
@@ -479,7 +479,9 @@ def nanvar(values, axis=None, skipna=True, ddof=1):
 
 @disallow('M8', 'm8')
 def nansem(values, axis=None, skipna=True, ddof=1):
-    var = nanvar(values, axis, skipna, ddof=ddof)
+    # This checks if non-numeric-like data is passed with numeric_only=False
+    # and raises a TypeError otherwise
+    nanvar(values, axis, skipna, ddof=ddof)
 
     mask = isna(values)
     if not is_float_dtype(values.dtype):
@@ -635,7 +637,6 @@ def nankurt(values, axis=None, skipna=True):
         adj = 3 * (count - 1) ** 2 / ((count - 2) * (count - 3))
         numer = count * (count + 1) * (count - 1) * m4
         denom = (count - 2) * (count - 3) * m2**2
-        result = numer / denom - adj
 
     # floating point error
     #
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 08b77c505..8f9fe5ee5 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -2052,7 +2052,6 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
             lvals = left.values
             rvals = right.values
         else:
-            left = self
             lvals = self.values
             rvals = np.asarray(other)
             if lvals.shape[0] != rvals.shape[0]:
@@ -2480,7 +2479,8 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         dtype: object
         """
         inplace = validate_bool_kwarg(inplace, 'inplace')
-        axis = self._get_axis_number(axis)
+        # Validate the axis parameter
+        self._get_axis_number(axis)
 
         # GH 5856/5853
         if inplace and self._is_cached:
@@ -2652,7 +2652,8 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         # TODO: this can be combined with DataFrame.sort_index impl as
         # almost identical
         inplace = validate_bool_kwarg(inplace, 'inplace')
-        axis = self._get_axis_number(axis)
+        # Validate the axis parameter
+        self._get_axis_number(axis)
         index = self.index
 
         if level is not None:
@@ -3073,7 +3074,8 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         versionadded='.. versionadded:: 0.20.0',
         **_shared_doc_kwargs))
     def aggregate(self, func, axis=0, *args, **kwargs):
-        axis = self._get_axis_number(axis)
+        # Validate the axis parameter
+        self._get_axis_number(axis)
         result, how = self._aggregate(func, *args, **kwargs)
         if result is None:
 
@@ -3919,8 +3921,8 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         if kwargs:
             raise TypeError('dropna() got an unexpected keyword '
                             'argument "{0}"'.format(list(kwargs.keys())[0]))
-
-        axis = self._get_axis_number(axis or 0)
+        # Validate the axis parameter
+        self._get_axis_number(axis or 0)
 
         if self._can_hold_na:
             result = remove_na_arraylike(self)
diff --git a/pandas/core/sparse/frame.py b/pandas/core/sparse/frame.py
index 5cb9f4744..58e3001bc 100644
--- a/pandas/core/sparse/frame.py
+++ b/pandas/core/sparse/frame.py
@@ -597,7 +597,6 @@ class SparseDataFrame(DataFrame):
             new_data[col] = func(series.values, other.values)
 
         # fill_value is a function of our operator
-        fill_value = None
         if isna(other.fill_value) or isna(self.default_fill_value):
             fill_value = np.nan
         else:
diff --git a/pandas/core/window.py b/pandas/core/window.py
index f3b4aaa74..eed0e97f3 100644
--- a/pandas/core/window.py
+++ b/pandas/core/window.py
@@ -933,7 +933,8 @@ class _Rolling_and_Expanding(_Rolling):
     def count(self):
 
         blocks, obj, index = self._create_blocks()
-        index, indexi = self._get_index(index=index)
+        # Validate the index
+        self._get_index(index=index)
 
         window = self._get_window()
         window = min(window, len(obj)) if not self.center else window
diff --git a/pandas/io/formats/format.py b/pandas/io/formats/format.py
index f69e4a484..c6ca59aa0 100644
--- a/pandas/io/formats/format.py
+++ b/pandas/io/formats/format.py
@@ -495,8 +495,6 @@ class DataFrameFormatter(TableFormatter):
                                 frame.iloc[:, -col_num:]), axis=1)
             self.tr_col_num = col_num
         if truncate_v:
-            if max_rows_adj == 0:
-                row_num = len(frame)
             if max_rows_adj == 1:
                 row_num = max_rows
                 frame = frame.iloc[:max_rows, :]
diff --git a/pandas/io/formats/html.py b/pandas/io/formats/html.py
index 20be903f5..3ea5cb95b 100644
--- a/pandas/io/formats/html.py
+++ b/pandas/io/formats/html.py
@@ -222,7 +222,6 @@ class HTMLFormatter(TableFormatter):
             return row
 
         self.write('<thead>', indent)
-        row = []
 
         indent += self.indent_delta
 
diff --git a/pandas/io/formats/terminal.py b/pandas/io/formats/terminal.py
index 52262ea05..dcd6f2cf4 100644
--- a/pandas/io/formats/terminal.py
+++ b/pandas/io/formats/terminal.py
@@ -67,7 +67,7 @@ def is_terminal():
 
 
 def _get_terminal_size_windows():
-    res = None
+
     try:
         from ctypes import windll, create_string_buffer
 
diff --git a/pandas/io/json/json.py b/pandas/io/json/json.py
index 3ec5e8d9b..629e00ebf 100644
--- a/pandas/io/json/json.py
+++ b/pandas/io/json/json.py
@@ -547,7 +547,7 @@ class JsonReader(BaseIterator):
 
         if typ == 'series' or obj is None:
             if not isinstance(dtype, bool):
-                dtype = dict(data=dtype)
+                kwargs['dtype'] = dtype
             obj = SeriesParser(json, **kwargs).parse()
 
         return obj
diff --git a/pandas/io/sas/sas_xport.py b/pandas/io/sas/sas_xport.py
index 52b25898f..14e7ad968 100644
--- a/pandas/io/sas/sas_xport.py
+++ b/pandas/io/sas/sas_xport.py
@@ -181,10 +181,6 @@ def _parse_float_vec(vec):
     # number sans exponent
     ieee1 = xport1 & 0x00ffffff
 
-    # Get the second half of the ibm number into the second half of
-    # the ieee number
-    ieee2 = xport2
-
     # The fraction bit to the left of the binary point in the ieee
     # format was set and the number was shifted 0, 1, 2, or 3
     # places. This will tell us how to adjust the ibm exponent to be a
diff --git a/pandas/plotting/_timeseries.py b/pandas/plotting/_timeseries.py
index 0522d7e72..96e753274 100644
--- a/pandas/plotting/_timeseries.py
+++ b/pandas/plotting/_timeseries.py
@@ -86,7 +86,6 @@ def _maybe_resample(series, ax, kwargs):
             freq = ax_freq
         elif frequencies.is_subperiod(freq, ax_freq) or _is_sub(freq, ax_freq):
             _upsample_others(ax, freq, kwargs)
-            ax_freq = freq
         else:  # pragma: no cover
             raise ValueError('Incompatible frequency conversion')
     return freq, series
diff --git a/pandas/tests/io/json/test_pandas.py b/pandas/tests/io/json/test_pandas.py
index bcbac4400..d6e7c644c 100644
--- a/pandas/tests/io/json/test_pandas.py
+++ b/pandas/tests/io/json/test_pandas.py
@@ -642,6 +642,13 @@ class TestPandasContainer(object):
         result = read_json(s.to_json(), typ='series', precise_float=True)
         assert_series_equal(result, s, check_index_type=False)
 
+    def test_series_with_dtype(self):
+        # GH 21986
+        s = Series([4.56, 4.56, 4.56])
+        result = read_json(s.to_json(), typ='series', dtype=np.int64)
+        expected = Series([4] * 3)
+        assert_series_equal(result, expected)
+
     def test_frame_from_json_precise_float(self):
         df = DataFrame([[4.56, 4.56, 4.56], [4.56, 4.56, 4.56]])
         result = read_json(df.to_json(), precise_float=True)
