commit 0e85b605c8da3abe98caeb3c080605c72b81ad08
Author: Chang She <chang@lambdafoundry.com>
Date:   Tue Jul 3 10:33:49 2012 -0400

    BUG: intraday irregular freq plotting

diff --git a/doc/source/timeseries.rst b/doc/source/timeseries.rst
index ac62bae50..ac32b5f62 100644
--- a/doc/source/timeseries.rst
+++ b/doc/source/timeseries.rst
@@ -725,7 +725,7 @@ method. Let's start with the fiscal year 2011, ending in December:
 
 .. ipython:: python
 
-   p = Period('2011' freq='A-DEC')
+   p = Period('2011', freq='A-DEC')
    p
 
 We can convert it to a monthly frequency. Using the ``how`` parameter, we can
diff --git a/pandas/tseries/converter.py b/pandas/tseries/converter.py
index 86245ad4a..974607890 100644
--- a/pandas/tseries/converter.py
+++ b/pandas/tseries/converter.py
@@ -108,6 +108,30 @@ def get_datevalue(date, freq):
         return None
     raise ValueError("Unrecognizable date '%s'" % date)
 
+HOURS_PER_DAY = 24.
+MINUTES_PER_DAY  = 60.*HOURS_PER_DAY
+SECONDS_PER_DAY =  60.*MINUTES_PER_DAY
+MUSECONDS_PER_DAY = 1e6*SECONDS_PER_DAY
+
+def _dt_to_float_ordinal(dt):
+    """
+    Convert :mod:`datetime` to the Gregorian date as UTC float days,
+    preserving hours, minutes, seconds and microseconds.  Return value
+    is a :func:`float`.
+    """
+
+    if hasattr(dt, 'tzinfo') and dt.tzinfo is not None:
+        delta = dt.tzinfo.utcoffset(dt)
+        if delta is not None:
+            dt -= delta
+
+    base =  float(dt.toordinal())
+    if hasattr(dt, 'hour'):
+        base += (dt.hour/HOURS_PER_DAY + dt.minute/MINUTES_PER_DAY +
+                 dt.second/SECONDS_PER_DAY + dt.microsecond/MUSECONDS_PER_DAY
+                 )
+    return base
+
 ### Datetime Conversion
 class DatetimeConverter(dates.DateConverter):
 
@@ -115,12 +139,12 @@ class DatetimeConverter(dates.DateConverter):
     def convert(values, unit, axis):
         def try_parse(values):
             try:
-                return tools.to_datetime(values).toordinal()
+                return _dt_to_float_ordinal(tools.to_datetime(values))
             except Exception:
                 return values
 
         if isinstance(values, (datetime, pydt.date)):
-            return values.toordinal()
+            return _dt_to_float_ordinal(values)
         elif isinstance(values, pydt.time):
             return dates.date2num(values)
         elif (com.is_integer(values) or com.is_float(values)):
diff --git a/pandas/tseries/tests/test_plotting.py b/pandas/tseries/tests/test_plotting.py
index 198e88c36..fdf0ac36a 100644
--- a/pandas/tseries/tests/test_plotting.py
+++ b/pandas/tseries/tests/test_plotting.py
@@ -154,6 +154,31 @@ class TestTSPlot(unittest.TestCase):
         ser = Series(np.random.randn(len(dr)), dr)
         _check_plot_works(ser.plot)
 
+    @slow
+    def test_irreg_hf(self):
+        import matplotlib.pyplot as plt
+        fig = plt.gcf()
+        plt.clf()
+        fig.add_subplot(111)
+
+        idx = date_range('2012-6-22 21:59:51', freq='S', periods=100)
+        df = DataFrame(np.random.randn(len(idx), 2), idx)
+
+        irreg = df.ix[[0, 1, 3, 4]]
+        ax = irreg.plot()
+        diffs = Series(ax.get_lines()[0].get_xydata()[:, 0]).diff()
+
+        sec = 1. / 24 / 60 / 60
+        self.assert_((np.fabs(diffs[1:] - [sec, sec*2, sec]) < 1e-8).all())
+
+        plt.clf()
+        fig.add_subplot(111)
+        df2 = df.copy()
+        df2.index = df.index.asobject
+        ax = df2.plot()
+        diffs = Series(ax.get_lines()[0].get_xydata()[:, 0]).diff()
+        self.assert_((np.fabs(diffs[1:] - sec) < 1e-8).all())
+
     @slow
     def test_irregular_datetime64_repr_bug(self):
         import matplotlib.pyplot as plt
