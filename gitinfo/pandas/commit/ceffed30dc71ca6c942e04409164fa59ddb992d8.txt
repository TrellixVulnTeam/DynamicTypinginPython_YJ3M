commit ceffed30dc71ca6c942e04409164fa59ddb992d8
Author: Chang She <chang@lambdafoundry.com>
Date:   Sat Nov 24 18:01:01 2012 -0500

    ENH: small tweaks to sparse series/frame constructors #2322

diff --git a/RELEASE.rst b/RELEASE.rst
index 3ce9f2ade..1c8ef1501 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -46,11 +46,17 @@ pandas 0.10.0
 **Improvements to existing features**
 
   - Add ``nrows`` option to DataFrame.from_records for iterators (#1794)
+<<<<<<< Updated upstream
   - Unstack/reshape algorithm rewrite to avoid high memory use in cases where
     the number of observed key-tuples is much smaller than the total possible
     number that could occur (#2278). Also improves performance in most cases.
   - Support duplicate columns in DataFrame.from_records (#2179)
   - Add ``normalize`` option to Series/DataFrame.asfreq (#2137)
+||||||| merged common ancestors
+=======
+  - SparseSeries and SparseDataFrame construction from empty and scalar
+    values now no longer create dense ndarrays unnecessarily (#2322)
+>>>>>>> Stashed changes
 
 **Bug fixes**
 
diff --git a/pandas/sparse/series.py b/pandas/sparse/series.py
index ae9bda78d..655694a8a 100644
--- a/pandas/sparse/series.py
+++ b/pandas/sparse/series.py
@@ -104,14 +104,22 @@ class SparseSeries(SparseArray, Series):
             data = Series(data)
             values, sparse_index = make_sparse(data, kind=kind,
                                                fill_value=fill_value)
-        elif np.isscalar(data):  # pragma: no cover
+        elif isinstance(data, (tuple, list, np.ndarray)):
+            # array-like
+            if sparse_index is None:
+                values, sparse_index = make_sparse(data, kind=kind,
+                                                   fill_value=fill_value)
+            else:
+                values = data
+                assert(len(values) == sparse_index.npoints)
+        else:
             if index is None:
                 raise Exception('must pass index!')
 
             length = len(index)
 
-            if data == fill_value or (np.isnan(data)
-                    and np.isnan(fill_value)):
+            if data == fill_value or (isnull(data)
+                    and isnull(fill_value)):
                 if kind == 'block':
                     sparse_index = BlockIndex(length, [], [])
                 else:
@@ -126,15 +134,6 @@ class SparseSeries(SparseArray, Series):
                 values = np.empty(length)
                 values.fill(data)
 
-        else:
-            # array-like
-            if sparse_index is None:
-                values, sparse_index = make_sparse(data, kind=kind,
-                                                   fill_value=fill_value)
-            else:
-                values = data
-                assert(len(values) == sparse_index.npoints)
-
         if index is None:
             index = Index(np.arange(sparse_index.length))
         index = _ensure_index(index)
diff --git a/pandas/sparse/tests/test_sparse.py b/pandas/sparse/tests/test_sparse.py
index 3cc0b8baa..addd3e2d5 100644
--- a/pandas/sparse/tests/test_sparse.py
+++ b/pandas/sparse/tests/test_sparse.py
@@ -3,6 +3,7 @@
 from unittest import TestCase
 import cPickle as pickle
 import operator
+from datetime import datetime
 
 import nose
 
@@ -19,6 +20,7 @@ from pandas.core.datetools import BDay
 from pandas.core.index import Index
 from pandas.tseries.index import DatetimeIndex
 import pandas.core.datetools as datetools
+from pandas.core.common import isnull
 import pandas.util.testing as tm
 
 import pandas.sparse.frame as spf
@@ -221,6 +223,16 @@ class TestSparseSeries(TestCase,
         sp.sp_values[:5] = 100
         self.assert_(values[0] == 97)
 
+    def test_constructor_scalar(self):
+        data = 5
+        sp = SparseSeries(data, np.arange(100))
+        sp = sp.reindex(np.arange(200))
+        self.assert_((sp.ix[:99] == data).all())
+        self.assert_(isnull(sp.ix[100:]).all())
+
+        data = np.nan
+        sp = SparseSeries(data, np.arange(100))
+
     def test_constructor_ndarray(self):
         pass
 
@@ -735,7 +747,6 @@ class TestSparseDataFrame(TestCase, test_frame.SafeForSparse):
         sdf = SparseDataFrame(columns=np.arange(10), index=np.arange(10))
         for col, series in sdf.iteritems():
             self.assert_(isinstance(series, SparseSeries))
-        
 
         # construct from nested dict
         data = {}
diff --git a/vb_suite/sparse.py b/vb_suite/sparse.py
index 18cd71fb4..ef08a6e24 100644
--- a/vb_suite/sparse.py
+++ b/vb_suite/sparse.py
@@ -27,3 +27,13 @@ stmt = "SparseDataFrame(series)"
 
 bm_sparse1 = Benchmark(stmt, setup, name="sparse_series_to_frame",
                       start_date=datetime(2011, 6, 1))
+
+
+setup = common_setup + """
+from pandas.core.sparse import SparseDataFrame
+"""
+
+stmt = "SparseDataFrame(columns=np.arange(100), index=np.arange(1e6))"
+
+sparse_constructor = Benchmark(stmt, setup, name="sparse_frame_constructor",
+                               start_date=datetime(2012, 6, 1))
