commit 27de04416d1b604e7bd96373cea89fc2e0c2a1ee
Author: Robin to Roxel <35864265+r-toroxel@users.noreply.github.com>
Date:   Wed Jul 8 14:52:25 2020 +0200

    TST add test case for drop_duplicates (#35121)

diff --git a/pandas/tests/frame/methods/test_drop_duplicates.py b/pandas/tests/frame/methods/test_drop_duplicates.py
index 7c6391140..cebec215a 100644
--- a/pandas/tests/frame/methods/test_drop_duplicates.py
+++ b/pandas/tests/frame/methods/test_drop_duplicates.py
@@ -333,64 +333,73 @@ def test_drop_duplicates_inplace():
     )
     # single column
     df = orig.copy()
-    df.drop_duplicates("A", inplace=True)
+    return_value = df.drop_duplicates("A", inplace=True)
     expected = orig[:2]
     result = df
     tm.assert_frame_equal(result, expected)
+    assert return_value is None
 
     df = orig.copy()
-    df.drop_duplicates("A", keep="last", inplace=True)
+    return_value = df.drop_duplicates("A", keep="last", inplace=True)
     expected = orig.loc[[6, 7]]
     result = df
     tm.assert_frame_equal(result, expected)
+    assert return_value is None
 
     df = orig.copy()
-    df.drop_duplicates("A", keep=False, inplace=True)
+    return_value = df.drop_duplicates("A", keep=False, inplace=True)
     expected = orig.loc[[]]
     result = df
     tm.assert_frame_equal(result, expected)
     assert len(df) == 0
+    assert return_value is None
 
     # multi column
     df = orig.copy()
-    df.drop_duplicates(["A", "B"], inplace=True)
+    return_value = df.drop_duplicates(["A", "B"], inplace=True)
     expected = orig.loc[[0, 1, 2, 3]]
     result = df
     tm.assert_frame_equal(result, expected)
+    assert return_value is None
 
     df = orig.copy()
-    df.drop_duplicates(["A", "B"], keep="last", inplace=True)
+    return_value = df.drop_duplicates(["A", "B"], keep="last", inplace=True)
     expected = orig.loc[[0, 5, 6, 7]]
     result = df
     tm.assert_frame_equal(result, expected)
+    assert return_value is None
 
     df = orig.copy()
-    df.drop_duplicates(["A", "B"], keep=False, inplace=True)
+    return_value = df.drop_duplicates(["A", "B"], keep=False, inplace=True)
     expected = orig.loc[[0]]
     result = df
     tm.assert_frame_equal(result, expected)
+    assert return_value is None
 
     # consider everything
     orig2 = orig.loc[:, ["A", "B", "C"]].copy()
 
     df2 = orig2.copy()
-    df2.drop_duplicates(inplace=True)
+    return_value = df2.drop_duplicates(inplace=True)
     # in this case only
     expected = orig2.drop_duplicates(["A", "B"])
     result = df2
     tm.assert_frame_equal(result, expected)
+    assert return_value is None
 
     df2 = orig2.copy()
-    df2.drop_duplicates(keep="last", inplace=True)
+    return_value = df2.drop_duplicates(keep="last", inplace=True)
     expected = orig2.drop_duplicates(["A", "B"], keep="last")
     result = df2
     tm.assert_frame_equal(result, expected)
+    assert return_value is None
 
     df2 = orig2.copy()
-    df2.drop_duplicates(keep=False, inplace=True)
+    return_value = df2.drop_duplicates(keep=False, inplace=True)
     expected = orig2.drop_duplicates(["A", "B"], keep=False)
     result = df2
     tm.assert_frame_equal(result, expected)
+    assert return_value is None
 
 
 @pytest.mark.parametrize("inplace", [True, False])
