commit b43d8f006a33bad8058ef8e94c176a7f58d4c01d
Author: Jeff Reback <jeff@reback.net>
Date:   Thu Mar 5 20:33:43 2015 -0500

    TST: clean up deprecated asserts in io/tests/test_data.py

diff --git a/pandas/io/tests/test_data.py b/pandas/io/tests/test_data.py
index b3753f4cb..937af834d 100644
--- a/pandas/io/tests/test_data.py
+++ b/pandas/io/tests/test_data.py
@@ -112,7 +112,7 @@ class TestGoogle(tm.TestCase):
 
                 # sanity checking
 
-                assert np.issubdtype(result.dtype, np.floating)
+                self.assertTrue(np.issubdtype(result.dtype, np.floating))
                 result = pan.Open.ix['Jan-15-12':'Jan-20-12']
                 self.assertEqual((4, 3), result.shape)
                 assert_n_failed_equals_n_null_columns(w, result)
@@ -121,11 +121,11 @@ class TestGoogle(tm.TestCase):
     def test_dtypes(self):
         #GH3995, #GH8980
         data = web.get_data_google('F', start='JAN-01-10', end='JAN-27-13')
-        assert np.issubdtype(data.Open.dtype, np.number)
-        assert np.issubdtype(data.Close.dtype, np.number)
-        assert np.issubdtype(data.Low.dtype, np.number)
-        assert np.issubdtype(data.High.dtype, np.number)
-        assert np.issubdtype(data.Volume.dtype, np.number)
+        self.assertTrue(np.issubdtype(data.Open.dtype, np.number))
+        self.assertTrue(np.issubdtype(data.Close.dtype, np.number))
+        self.assertTrue(np.issubdtype(data.Low.dtype, np.number))
+        self.assertTrue(np.issubdtype(data.High.dtype, np.number))
+        self.assertTrue(np.issubdtype(data.Volume.dtype, np.number))
 
     @network
     def test_unicode_date(self):
@@ -183,7 +183,7 @@ class TestYahoo(tm.TestCase):
         raise nose.SkipTest('unreliable test, receive partial components back for dow_jones')
 
         df = web.get_components_yahoo('^DJI') #Dow Jones
-        assert isinstance(df, pd.DataFrame)
+        self.assertIsInstance(df, pd.DataFrame)
         self.assertEqual(len(df), 30)
 
     @network
@@ -191,7 +191,7 @@ class TestYahoo(tm.TestCase):
         raise nose.SkipTest('unreliable test, receive partial components back for dax')
 
         df = web.get_components_yahoo('^GDAXI') #DAX
-        assert isinstance(df, pd.DataFrame)
+        self.assertIsInstance(df, pd.DataFrame)
         self.assertEqual(len(df), 30)
         self.assertEqual(df[df.name.str.contains('adidas', case=False)].index,
                          'ADS.DE')
@@ -202,13 +202,13 @@ class TestYahoo(tm.TestCase):
         raise nose.SkipTest('unreliable test, receive partial components back for nasdaq_100')
 
         df = web.get_components_yahoo('^NDX') #NASDAQ-100
-        assert isinstance(df, pd.DataFrame)
+        self.assertIsInstance(df, pd.DataFrame)
 
         if len(df) > 1:
             # Usual culprits, should be around for a while
-            assert 'AAPL' in df.index
-            assert 'GOOG' in df.index
-            assert 'AMZN' in df.index
+            self.assertTrue('AAPL' in df.index)
+            self.assertTrue('GOOG' in df.index)
+            self.assertTrue('AMZN' in df.index)
         else:
             expected = DataFrame({'exchange': 'N/A', 'name': '@^NDX'},
                                  index=['@^NDX'])
@@ -256,7 +256,7 @@ class TestYahoo(tm.TestCase):
         self.assertEqual(len(result), 3)
 
         # sanity checking
-        assert np.issubdtype(result.dtype, np.floating)
+        self.assertTrue(np.issubdtype(result.dtype, np.floating))
 
         expected = np.array([[18.99,  28.4, 25.18],
                              [18.58, 28.31, 25.13],
@@ -276,7 +276,7 @@ class TestYahoo(tm.TestCase):
             self.assertEqual(result, 1.0)
 
         # sanity checking
-        assert np.issubdtype(pan.values.dtype, np.floating)
+        self.assertTrue(np.issubdtype(pan.values.dtype, np.floating))
 
 
 class TestYahooOptions(tm.TestCase):
@@ -383,26 +383,26 @@ class TestYahooOptions(tm.TestCase):
             quote_price = options_object._underlying_price_from_root(root)
         except RemoteDataError as e:
             raise nose.SkipTest(e)
-        self.assert_(isinstance(quote_price, float))
+        self.assertIsInstance(quote_price, float)
 
     def test_sample_page_price_quote_time1(self):
         #Tests the weekend quote time format
         price, quote_time = self.aapl._underlying_price_and_time_from_url(self.html1)
-        self.assert_(isinstance(price, (int, float, complex)))
-        self.assert_(isinstance(quote_time, (datetime, Timestamp)))
+        self.assertIsInstance(price, (int, float, complex))
+        self.assertIsInstance(quote_time, (datetime, Timestamp))
 
     def test_chop(self):
         #regression test for #7625
         self.aapl.chop_data(self.data1, above_below=2, underlying_price=np.nan)
         chopped = self.aapl.chop_data(self.data1, above_below=2, underlying_price=100)
-        self.assert_(isinstance(chopped, DataFrame))
+        self.assertIsInstance(chopped, DataFrame)
         self.assertTrue(len(chopped) > 1)
 
     def test_chop_out_of_strike_range(self):
         #regression test for #7625
         self.aapl.chop_data(self.data1, above_below=2, underlying_price=np.nan)
         chopped = self.aapl.chop_data(self.data1, above_below=2, underlying_price=100000)
-        self.assert_(isinstance(chopped, DataFrame))
+        self.assertIsInstance(chopped, DataFrame)
         self.assertTrue(len(chopped) > 1)
 
 
@@ -411,8 +411,8 @@ class TestYahooOptions(tm.TestCase):
         #Tests the EDT page format
         #regression test for #8741
         price, quote_time = self.aapl._underlying_price_and_time_from_url(self.html2)
-        self.assert_(isinstance(price, (int, float, complex)))
-        self.assert_(isinstance(quote_time, (datetime, Timestamp)))
+        self.assertIsInstance(price, (int, float, complex))
+        self.assertIsInstance(quote_time, (datetime, Timestamp))
 
     @network
     def test_sample_page_chg_float(self):
@@ -452,17 +452,17 @@ class TestDataReader(tm.TestCase):
     @network
     def test_read_yahoo(self):
         gs = DataReader("GS", "yahoo")
-        assert isinstance(gs, DataFrame)
+        self.assertIsInstance(gs, DataFrame)
 
     @network
     def test_read_google(self):
         gs = DataReader("GS", "google")
-        assert isinstance(gs, DataFrame)
+        self.assertIsInstance(gs, DataFrame)
 
     @network
     def test_read_fred(self):
         vix = DataReader("VIXCLS", "fred")
-        assert isinstance(vix, DataFrame)
+        self.assertIsInstance(vix, DataFrame)
 
     @network
     def test_read_famafrench(self):
@@ -470,8 +470,8 @@ class TestDataReader(tm.TestCase):
                      "F-F_Research_Data_Factors_weekly", "6_Portfolios_2x3",
                      "F-F_ST_Reversal_Factor", "F-F_Momentum_Factor"):
             ff = DataReader(name, "famafrench")
-            assert ff
-            assert isinstance(ff, dict)
+            self.assertTrue(ff is not None)
+            self.assertIsInstance(ff, dict)
 
 
 class TestFred(tm.TestCase):
@@ -498,7 +498,7 @@ class TestFred(tm.TestCase):
         start = datetime(2010, 1, 1)
         end = datetime(2013, 1, 27)
         df = web.DataReader("DFII5", "fred", start, end)
-        assert pd.isnull(df.ix['2010-01-01'][0])
+        self.assertTrue(pd.isnull(df.ix['2010-01-01'][0]))
 
     @network
     def test_fred_parts(self):
@@ -510,7 +510,7 @@ class TestFred(tm.TestCase):
         self.assertEqual(df.ix['2010-05-01'][0], 217.23)
 
         t = df.CPIAUCSL.values
-        assert np.issubdtype(t.dtype, np.floating)
+        self.assertTrue(np.issubdtype(t.dtype, np.floating))
         self.assertEqual(t.shape, (37,))
 
     @network
