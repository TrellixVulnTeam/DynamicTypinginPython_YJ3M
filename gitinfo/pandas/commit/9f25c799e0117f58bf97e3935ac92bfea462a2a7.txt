commit 9f25c799e0117f58bf97e3935ac92bfea462a2a7
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Nov 22 13:15:23 2011 -0500

    BUG: infer better return type in DataFrame.apply with empty frame, GH #389

diff --git a/RELEASE.rst b/RELEASE.rst
index 7dfc4f306..db60f44c8 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -22,7 +22,7 @@ Where to get it
 * Binary installers on PyPI: http://pypi.python.org/pypi/pandas
 * Documentation: http://pandas.sourceforge.net
 
-pandas 0.5.1
+pandas 0.6.0
 ============
 
 **Release date:** Not yet released
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index da4125a9f..ed528940a 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2204,7 +2204,8 @@ class DataFrame(NDFrame):
 
         Notes
         -----
-        Functions should not alter the index of the Series passed to them
+        Function passed should not have side effects. If the result is a Series,
+        it should have the same index
 
         Returns
         -------
@@ -2219,6 +2220,14 @@ class DataFrame(NDFrame):
                                      columns=self.columns, copy=False)
         else:
             if not broadcast:
+                if not all(self.shape):
+                    is_reduction = not isinstance(func(_EMPTY_SERIES),
+                                                  np.ndarray)
+                    if is_reduction:
+                        return Series(np.nan, index=self._get_agg_axis(axis))
+                    else:
+                        return self.copy()
+
                 if raw and not self._is_mixed_type:
                     return self._apply_raw(func, axis)
                 else:
@@ -2246,7 +2255,7 @@ class DataFrame(NDFrame):
             dummy = Series(np.nan, index=self._get_axis(axis),
                            dtype=values.dtype)
             result = lib.reduce(values, func, axis=axis, dummy=dummy)
-            return Series(result, index=self._get_agg_axis(axis))
+            return Series(result, index=agg_axis)
         except Exception:
             pass
 
@@ -3254,6 +3263,9 @@ class DataFrame(NDFrame):
         return self.mul(other, fill_value=1.)
 
 
+_EMPTY_SERIES = Series([])
+
+
 class _DataFrameFormatter(object):
     """
     Render a DataFrame
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 446145946..95dcf02e3 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2684,6 +2684,36 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         expected = Series(np.nan, index=[])
         assert_series_equal(result, expected)
 
+    def test_apply_empty_infer_type(self):
+        no_cols = DataFrame(index=['a', 'b', 'c'])
+        no_index = DataFrame(columns=['a', 'b', 'c'])
+
+        def _check(df, f):
+            test_res = f(np.array([], dtype='f8'))
+            is_reduction = not isinstance(test_res, np.ndarray)
+
+            def _checkit(axis=0, raw=False):
+                res = df.apply(f, axis=axis, raw=raw)
+                if is_reduction:
+                    agg_axis = df._get_agg_axis(axis)
+                    self.assert_(isinstance(res, Series))
+                    self.assert_(res.index is agg_axis)
+                else:
+                    self.assert_(isinstance(res, DataFrame))
+
+            _checkit()
+            _checkit(axis=1)
+            _checkit(raw=True)
+            _checkit(axis=0, raw=True)
+
+        _check(no_cols, lambda x: x)
+        _check(no_cols, lambda x: x.mean())
+        _check(no_index, lambda x: x)
+        _check(no_index, lambda x: x.mean())
+
+        result = no_cols.apply(lambda x: x.mean(), broadcast=True)
+        self.assert_(isinstance(result, DataFrame))
+
     def test_applymap(self):
         applied = self.frame.applymap(lambda x: x * 2)
         assert_frame_equal(applied, self.frame * 2)
diff --git a/setup.py b/setup.py
index ed97dde79..c584f5359 100755
--- a/setup.py
+++ b/setup.py
@@ -128,8 +128,8 @@ CLASSIFIERS = [
 ]
 
 MAJOR = 0
-MINOR = 5
-MICRO = 1
+MINOR = 6
+MICRO = 0
 ISRELEASED = False
 VERSION = '%d.%d.%d' % (MAJOR, MINOR, MICRO)
 QUALIFIER = ''
