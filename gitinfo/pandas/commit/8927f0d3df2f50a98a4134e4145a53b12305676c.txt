commit 8927f0d3df2f50a98a4134e4145a53b12305676c
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Oct 16 10:29:34 2011 -0400

    ENH: better about int conversions, consolidated numeric conversion function

diff --git a/RELEASE.rst b/RELEASE.rst
index 4f834dde2..7ea238bae 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -125,6 +125,8 @@ feedback on the library.
   - Index and Series names are now stored in HDFStore
   - Can create empty Panel (GH #239)
   - Panel.__repr__ raised exception on length-0 major/minor axes
+  - Be less aggressive about converting float->int in `read_csv` and
+    `read_table`
 
 pandas 0.4.3
 ============
diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index d0f7b0133..5208f30c0 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -237,7 +237,7 @@ def _floatify(tup, na_values):
     """
     try:
         if isinstance(tup, tuple):
-            return lib.maybe_convert_float_tuple(tup, na_values)
+            return lib.maybe_convert_numeric(tup, na_values)
         else:
             return lib.maybe_convert_float_list(tup, na_values)
     except Exception:
@@ -283,7 +283,6 @@ def _convert_to_ndarrays(dct, na_values):
 
 def _convert_ndarray(tup, na_values):
     values = _floatify(tup, na_values)
-    values = _maybe_convert_int(values)
     values = _maybe_convert_bool(values)
     return values
 
diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index 8dca1a738..cd1a57847 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -174,6 +174,16 @@ True,3
         data = read_csv(StringIO(data))
         self.assert_(data['A'].dtype == np.bool_)
 
+    def test_int_conversion(self):
+        data = """A,B
+1.0,1
+2.0,2
+3.0,3
+"""
+        data = read_csv(StringIO(data))
+        self.assert_(data['A'].dtype == np.float_)
+        self.assert_(data['B'].dtype == np.int_)
+
 def curpath():
     pth, _ = os.path.split(os.path.abspath(__file__))
     return pth
diff --git a/pandas/src/parsing.pyx b/pandas/src/parsing.pyx
index 715c7fc83..e792342d1 100644
--- a/pandas/src/parsing.pyx
+++ b/pandas/src/parsing.pyx
@@ -18,55 +18,91 @@ def maybe_convert_float_list(tuple values):
 
     return val
 
-def maybe_convert_float_tuple(tuple values, set na_values):
+def maybe_convert_numeric(tuple values, set na_values):
     cdef:
         Py_ssize_t i, n
-        ndarray[float64_t] result
+        ndarray[float64_t] floats
+        ndarray[int64_t] ints
+        bint seen_float = 0
         object val
+        float64_t fval
 
     n = len(values)
-    result = np.empty(n, dtype='f8')
+
+    floats = np.empty(n, dtype='f8')
+    ints = np.empty(n, dtype='i8')
 
     for i from 0 <= i < n:
         val = values[i]
 
         if cpython.PyFloat_Check(val):
-            result[i] = val
+            floats[i] = val
+            seen_float = 1
         elif val in na_values:
-            result[i] = nan
+            floats[i] = nan
+            seen_float = 1
         elif val is None:
-            result[i] = nan
+            floats[i] = nan
+            seen_float = 1
         elif len(val) == 0:
-            result[i] = nan
+            floats[i] = nan
+            seen_float = 1
         else:
-            result[i] = float(val)
-
-    return result
-
-def maybe_convert_float_list(list values, set na_values):
+            fval = float(val)
+            floats[i] = fval
+            if not seen_float:
+                if '.' in val:
+                    seen_float = 1
+                else:
+                    ints[i] = <int64_t> fval
+
+    if seen_float:
+        return floats
+    else:
+        return ints
+
+def maybe_convert_numeric_list(list values, set na_values):
     cdef:
         Py_ssize_t i, n
-        ndarray[float64_t] result
+        ndarray[float64_t] floats
+        ndarray[int64_t] ints
+        bint seen_float = 0
         object val
+        float64_t fval
 
     n = len(values)
-    result = np.empty(n, dtype='f8')
+
+    floats = np.empty(n, dtype='f8')
+    ints = np.empty(n, dtype='i8')
 
     for i from 0 <= i < n:
         val = values[i]
 
         if cpython.PyFloat_Check(val):
-            result[i] = val
+            floats[i] = val
+            seen_float = 1
         elif val in na_values:
-            result[i] = nan
+            floats[i] = nan
+            seen_float = 1
         elif val is None:
-            result[i] = nan
+            floats[i] = nan
+            seen_float = 1
         elif len(val) == 0:
-            result[i] = nan
+            floats[i] = nan
+            seen_float = 1
         else:
-            result[i] = float(val)
-
-    return result
+            fval = float(val)
+            floats[i] = fval
+            if not seen_float:
+                if '.' in val:
+                    seen_float = 1
+                else:
+                    ints[i] = <int64_t> fval
+
+    if seen_float:
+        return floats
+    else:
+        return ints
 
 def string_to_ndarray_tuple(tuple values):
     cdef:
