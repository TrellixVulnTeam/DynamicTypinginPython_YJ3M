commit 4d29e4744fee873b895581851bf33abef81e3225
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jan 23 22:06:21 2012 -0500

    BUG: fix indexing corner case with MultiIndex re: #671

diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index e7a1d2e4c..9f862923c 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -101,7 +101,12 @@ class _NDFrameIndexer(object):
         # no shortcut needed
         retval = self.obj
         for i, key in enumerate(tup):
-            # hack?
+            if i >= self.obj.ndim:
+                raise IndexingError('Too many indexers')
+
+            if _is_null_slice(key):
+                continue
+
             retval = retval.ix._getitem_axis(key, axis=i)
 
         return retval
@@ -109,15 +114,17 @@ class _NDFrameIndexer(object):
     def _getitem_lowerdim(self, tup):
         from pandas.core.frame import DataFrame
 
+        ax0 = self.obj._get_axis(0)
         # a bit kludgy
-        if isinstance(self.obj._get_axis(0), MultiIndex):
+        if isinstance(ax0, MultiIndex):
             try:
                 return self._get_label(tup, axis=0)
             except TypeError:
                 # slices are unhashable
                 pass
             except Exception:
-                raise
+                if tup[0] not in ax0:
+                    raise
 
         # to avoid wasted computation
         # df.ix[d1:d2, 0] -> columns first (True)
@@ -148,12 +155,14 @@ class _NDFrameIndexer(object):
         raise IndexingError('not applicable')
 
     def _getitem_axis(self, key, axis=0):
+        labels = self.obj._get_axis(axis)
         if isinstance(key, slice):
             return self._get_slice_axis(key, axis=axis)
-        elif _is_list_like(key):
+        elif _is_list_like(key) and not (isinstance(key, tuple) and
+                                         isinstance(labels, MultiIndex)):
+
             return self._getitem_iterable(key, axis=axis)
         elif axis == 0:
-            labels = self.obj._get_axis(0)
             is_int_index = _is_integer_index(labels)
 
             idx = key
@@ -374,6 +383,10 @@ def _maybe_convert_ix(*args):
     else:
         return args
 
+def _is_null_slice(obj):
+    return (isinstance(obj, slice) and obj.start is None and
+            obj.stop is None and obj.step is None)
+
 def _is_integer_dtype(arr):
     return issubclass(arr.dtype.type, np.integer)
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 138a95770..6d606ace7 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2424,9 +2424,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         self.assertRaises(Exception, df.append, series)
 
         result = df.append(series[::-1], ignore_index=True)
-        expected = df.append(DataFrame({0 : series[::-1]},
-                                       index=df.columns).T,
-                             ignore_index=True)
+        expected = df.append(DataFrame({0 : series[::-1]}, index=df.columns).T, ignore_index=True)
         assert_frame_equal(result, expected)
 
         # dict
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index 279cbeb30..251b82ce7 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -215,6 +215,22 @@ class TestMultiLevel(unittest.TestCase):
         self.assert_((cp.values[:4] == 0).all())
         self.assert_((cp.values[4:] != 0).all())
 
+    def test_getitem_tuple_plus_slice(self):
+        # GH #671
+        df = DataFrame({'a' : range(10),
+                        'b' : range(10),
+                        'c' : np.random.randn(10),
+                        'd' : np.random.randn(10)})
+
+        idf = df.set_index(['a', 'b'])
+
+        result = idf.ix[(0, 0), :]
+        expected = idf.ix[0, 0]
+        expected2 = idf.xs((0, 0))
+
+        assert_series_equal(result, expected)
+        assert_series_equal(result, expected2)
+
     def test_xs(self):
         xs = self.frame.xs(('bar', 'two'))
         xs2 = self.frame.ix[('bar', 'two')]
