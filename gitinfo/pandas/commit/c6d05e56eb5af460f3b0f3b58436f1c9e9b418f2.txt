commit c6d05e56eb5af460f3b0f3b58436f1c9e9b418f2
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Dec 2 15:45:19 2011 -0500

    BUG: DataFrame.apply function returning list resulted in unexpected Series return value, GH #432

diff --git a/RELEASE.rst b/RELEASE.rst
index 0a5cbc5f3..e3fcced92 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -39,12 +39,15 @@ pandas 0.6.1
     axis (GH #423)
   - Fix Yahoo! Finance API usage in pandas.io.data (GH #419, PR #427)
   - Fix upstream bug causing failure in Series.align with empty Series (GH #434)
+  - Function passed to DataFrame.apply can return a list, as long as it's the
+    right length. Regression from 0.4 (GH #432)
 
 Thanks
 ------
 - Ralph Bean
 - Joon Ro
 - Wouter Overmeire
+- Chris Uga
 
 pandas 0.6.0
 ============
diff --git a/pandas/src/reduce.pyx b/pandas/src/reduce.pyx
index e325c727d..33624aa7f 100644
--- a/pandas/src/reduce.pyx
+++ b/pandas/src/reduce.pyx
@@ -77,6 +77,8 @@ cdef class Reducer:
     def _get_result_array(self, object res):
         try:
             assert(not isinstance(res, np.ndarray))
+            assert(not (isinstance(res, list) and len(res) == len(self.dummy)))
+
             result = np.empty(self.nresults, dtype='O')
             # if hasattr(res, 'dtype'):
             #     result = np.empty(self.nresults, dtype=res.dtype)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index c02cc5d3f..5db43b25b 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2795,6 +2795,17 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         exp = self.frame.apply(lambda x: (x - 2.) / 2.)
         assert_frame_equal(res, exp)
 
+    def test_apply_yield_list(self):
+        result = self.frame.apply(list)
+        assert_frame_equal(result, self.frame)
+
+    def test_apply_reduce_Series(self):
+        self.frame.ix[::2, 'A'] = np.nan
+        result = self.frame.apply(np.mean, axis=1)
+        expected = self.frame.mean(1)
+        assert_series_equal(result, expected)
+
+
     def test_applymap(self):
         applied = self.frame.applymap(lambda x: x * 2)
         assert_frame_equal(applied, self.frame * 2)
