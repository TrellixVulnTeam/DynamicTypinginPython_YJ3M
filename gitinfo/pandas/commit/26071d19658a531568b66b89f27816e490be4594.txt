commit 26071d19658a531568b66b89f27816e490be4594
Author: Adam Klein <adamklein@gmail.com>
Date:   Thu Mar 22 13:20:37 2012 -0400

    BUG: pass native char* instead of PyObject* to let cython handle 2/3 compatibility

diff --git a/pandas/src/datetime.pxd b/pandas/src/datetime.pxd
index c60f6629c..a838ec8b4 100644
--- a/pandas/src/datetime.pxd
+++ b/pandas/src/datetime.pxd
@@ -115,9 +115,9 @@ cdef extern from "skts.h":
 
     long get_python_ordinal(long skts_ordinal, int freq) except -1
 
-    PyObject *interval_strftime(long value, int freq, PyObject *args)
-    PyObject *interval_to_string(long value, int freq)
-    PyObject *interval_to_string2(long value, int freq, char *fmt)
+    char *interval_strftime(long value, int freq, PyObject *args)
+    char *interval_to_string(long value, int freq)
+    char *interval_to_string2(long value, int freq, char *fmt)
 
     int get_date_info(long ordinal, int freq, date_info *dinfo) except -1
 
diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index d74a28bc3..0a0168492 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -1021,11 +1021,19 @@ cpdef int64_t skts_ordinal_to_dt64(long skts_ordinal, int base, long mult):
     return PyArray_DatetimeStructToDatetime(NPY_FR_us, &dts)
 
 def skts_ordinal_to_string(long value, int base, long mult):
-    return <object>interval_to_string(remove_mult(value, mult), base)
+    cdef:
+        char *ptr
+
+    ptr = interval_to_string(remove_mult(value, mult), base)
+
+    if ptr == NULL:
+        raise ValueError("Could not create string from ordinal '%d'" % value)
+
+    return <object>ptr
 
 def skts_strftime(long value, int freq, long mult, object fmt):
     cdef:
-        PyObject *ptr
+        char *ptr
 
     value = remove_mult(value, mult)
     ptr = interval_to_string2(value, freq, <char*>fmt)
diff --git a/pandas/src/skts.c b/pandas/src/skts.c
index ffba61819..165cd5755 100644
--- a/pandas/src/skts.c
+++ b/pandas/src/skts.c
@@ -1122,7 +1122,7 @@ char *str_replace(const char *s, const char *old, const char *new) {
 // function to generate a nice string representation of the interval
 // object, originally from DateObject_strftime
 
-PyObject *interval_strftime(long value, int freq, PyObject *args)
+char *interval_strftime(long value, int freq, PyObject *args)
 {
     char *orig_fmt_str, *fmt_str;
     char *result;
@@ -1145,7 +1145,8 @@ PyObject *interval_strftime(long value, int freq, PyObject *args)
     long (*toDaily)(long, char, asfreq_info*) = NULL;
     asfreq_info af_info;
 
-    if (!PyArg_ParseTuple(args, "s:strftime(fmt)", &orig_fmt_str)) return NULL;
+    if (!PyArg_ParseTuple(args, "s:strftime(fmt)", &orig_fmt_str)) 
+        return NULL;
 
     toDaily = get_asfreq_func(freq, FR_DAY, 0);
     get_asfreq_info(freq, FR_DAY, &af_info);
@@ -1168,7 +1169,9 @@ PyObject *interval_strftime(long value, int freq, PyObject *args)
     c_date.tm_isdst = -1;
 
     result_len = strlen(orig_fmt_str) + 50;
-    if ((result = PyArray_malloc(result_len * sizeof(char))) == NULL) {return PyErr_NoMemory();}
+    if ((result = PyArray_malloc(result_len * sizeof(char))) == NULL) {
+        return (char*)PyErr_NoMemory();
+    }
 
     fmt_str = orig_fmt_str;
 
@@ -1217,7 +1220,7 @@ PyObject *interval_strftime(long value, int freq, PyObject *args)
                 if(strcmp(extra_fmts[i][0], "%q") == 0) {
                     if ((extra_str = PyArray_malloc(2 * sizeof(char))) == NULL) {
                         free(tmp_str);
-                        return PyErr_NoMemory();
+                        return (char *)PyErr_NoMemory();
                     }
                     sprintf(extra_str, "%i", quarter);
                 } else {
@@ -1230,7 +1233,7 @@ PyObject *interval_strftime(long value, int freq, PyObject *args)
 
                     if ((extra_str = PyArray_malloc((year_len+1) * sizeof(char))) == NULL) {
                         free(tmp_str);
-                        return PyErr_NoMemory();
+                        return (char *)PyErr_NoMemory();
                     }
 
                     if (year_len == 2 && year < 10) {
@@ -1250,13 +1253,10 @@ PyObject *interval_strftime(long value, int freq, PyObject *args)
         }
     }
 
-    py_result = PyString_FromString(result);
-    free(result);
-
-    return py_result;
+    return result;
 }
 
-PyObject *interval_to_string(long value, int freq)
+char *interval_to_string(long value, int freq)
 {
     int freq_group = get_freq_group(freq);
     PyObject *string_arg, *retval;
@@ -1284,9 +1284,10 @@ PyObject *interval_to_string(long value, int freq)
     return retval;
 }
 
-PyObject *interval_to_string2(long value, int freq, char *fmt)
+char *interval_to_string2(long value, int freq, char *fmt)
 {
-    PyObject *string_arg, *retval;
+    PyObject *string_arg;
+    char *retval;
     string_arg = Py_BuildValue("(s)", fmt);
     if (string_arg == NULL) { return NULL; }
     retval = interval_strftime(value, freq, string_arg);
diff --git a/pandas/src/skts.h b/pandas/src/skts.h
index a971917b6..f8fc35266 100644
--- a/pandas/src/skts.h
+++ b/pandas/src/skts.h
@@ -158,9 +158,9 @@ long get_skts_ordinal(int year, int month, int day,
 
 long get_python_ordinal(long skts_ordinal, int freq);
 
-PyObject *interval_strftime(long value, int freq, PyObject *args);
-PyObject *interval_to_string(long value, int freq);
-PyObject *interval_to_string2(long value, int freq, char *fmt);
+char *interval_strftime(long value, int freq, PyObject *args);
+char *interval_to_string(long value, int freq);
+char *interval_to_string2(long value, int freq, char *fmt);
 
 int get_date_info(long ordinal, int freq, struct date_info *dinfo);
 
