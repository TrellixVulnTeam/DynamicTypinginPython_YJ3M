commit 772e39a9386404c764694d0393fa35df7cace171
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Jul 11 17:50:44 2012 -0400

    BUG: fix DataFrame.rank on integer data close #1589

diff --git a/RELEASE.rst b/RELEASE.rst
index c85c6a9be..abeb363c9 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -54,6 +54,7 @@ pandas 0.8.1
   - Unordered index with duplicates doesn't yield scalar location for single
     entry (#1586)
   - Fix resampling of tz-aware time series with "anchored" freq (#1591)
+  - Fix DataFrame.rank error on integer data (#1589)
 
 pandas 0.8.0
 ============
diff --git a/pandas/core/algorithms.py b/pandas/core/algorithms.py
index 2334c47ec..b4d5c2352 100644
--- a/pandas/core/algorithms.py
+++ b/pandas/core/algorithms.py
@@ -310,6 +310,7 @@ _rank1d_functions = {
 
 _rank2d_functions = {
     'float64' : lib.rank_2d_float64,
+    'int64' : lib.rank_2d_int64,
     'generic' : lib.rank_2d_generic
 }
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index c234b3045..bc76da056 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -5893,6 +5893,17 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         assert_almost_equal(ranks0.values, exp0)
         assert_almost_equal(ranks1.values, exp1)
 
+        # integers
+        df = DataFrame(np.random.randint(0, 5, size=40).reshape((10, 4)))
+
+        result = df.rank()
+        exp = df.astype(float).rank()
+        assert_frame_equal(result, exp)
+
+        result = df.rank(1)
+        exp = df.astype(float).rank(1)
+        assert_frame_equal(result, exp)
+
     def test_rank2(self):
         from datetime import datetime
 
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 44a24e5ee..1dba08335 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -1893,6 +1893,12 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
 
         assert_almost_equal(ranks, exp)
 
+        iseries = Series(np.arange(5).repeat(2))
+
+        iranks = iseries.rank()
+        exp = iseries.astype(float).rank()
+        assert_series_equal(iranks, exp)
+
     def test_from_csv(self):
         self.ts.to_csv('_foo')
         ts = Series.from_csv('_foo')
