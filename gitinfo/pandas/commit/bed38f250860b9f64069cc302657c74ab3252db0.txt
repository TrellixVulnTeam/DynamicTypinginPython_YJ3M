commit bed38f250860b9f64069cc302657c74ab3252db0
Author: Henning Sperr <henning.sperr@gmail.com>
Date:   Mon Apr 13 12:08:10 2015 -0400

    FIX: division of Decimal would crash on fill because Decimal does not support type or dtype. (GH9787)
    ENH: replace np.isscalar with better lib.isscalar
    ADD: Test decimal division

diff --git a/doc/source/whatsnew/v0.16.1.txt b/doc/source/whatsnew/v0.16.1.txt
index a0d81567d..9f55257d2 100644
--- a/doc/source/whatsnew/v0.16.1.txt
+++ b/doc/source/whatsnew/v0.16.1.txt
@@ -140,3 +140,5 @@ Bug Fixes
 - Bug in ``MultiIndex.sortlevel()`` results in unicode level name breaks (:issue:`9875`)
 
 - Bug in which ``groupby.transform`` incorrectly enforced output dtypes to match input dtypes. (:issue:`9807`)
+
+- Bug where dividing a dataframe containing values of type ``Decimal`` by another ``Decimal`` would raise. (:issue:`9787`)
diff --git a/pandas/core/common.py b/pandas/core/common.py
index 0fb35c2fb..5587ba5f9 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -1397,14 +1397,19 @@ def _fill_zeros(result, x, y, name, fill):
 
     mask the nan's from x
     """
-
     if fill is None or is_float_dtype(result):
         return result
 
     if name.startswith(('r', '__r')):
         x,y = y,x
 
-    if np.isscalar(y):
+    is_typed_variable = (hasattr(y, 'dtype') or hasattr(y,'type'))
+    is_scalar = lib.isscalar(y)
+
+    if not is_typed_variable and not is_scalar:
+        return result
+
+    if is_scalar:
         y = np.array(y)
 
     if is_integer_dtype(y):
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 70a6e2541..420992a3c 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -5617,6 +5617,22 @@ class TestSeries(tm.TestCase, CheckNameIntegration):
         s2 = s.map(lambda x: np.where(x == 0, 0, 1))
         self.assertTrue(issubclass(s2.dtype.type, np.integer))
 
+    def test_divide_decimal(self):
+        ''' resolves issue #9787 '''
+        from decimal import Decimal
+
+        expected = Series([Decimal(5)])
+
+        s =  Series([Decimal(10)])
+        s =  s/Decimal(2)
+
+        tm.assert_series_equal(expected, s)
+
+        s =  Series([Decimal(10)])
+        s =  s//Decimal(2)
+
+        tm.assert_series_equal(expected, s)
+
     def test_map_decimal(self):
         from decimal import Decimal
 
