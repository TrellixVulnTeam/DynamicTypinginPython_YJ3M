commit 93492a368cf8c2547c7b69bd126880c446ff1ef9
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Sep 25 21:05:48 2011 -0400

    TST: wrap up test coverage

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 85a90947e..c6844b15e 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2084,21 +2084,24 @@ class DataFrame(NDFrame):
 
         new_data = {}
         for col in self:
-            values = self._data.get(col)
+            values = self._get_raw_column(col)
             if col in other:
-                other_values = other._data.get(col)
+                other_values = other._get_raw_column(col)
             else:
                 values, other_values = _concat_missing(values, len(other))
             new_data[col] = np.concatenate((values, other_values))
 
         for col in other:
-            values = other._data.get(col)
+            values = other._get_raw_column(col)
             if col not in self:
                 values, missing_values = _concat_missing(values, len(self))
                 new_data[col] = np.concatenate((missing_values, values))
 
         return new_data
 
+    def _get_raw_column(self, col):
+        return self._data.get(col)
+
     def join(self, other, on=None, how=None, lsuffix='', rsuffix=''):
         """
         Join columns with other DataFrame either on index or on a key
diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index 2a7e51f94..f9bc1ed81 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -782,10 +782,7 @@ class SparseDataFrame(DataFrame):
         """
         Make a copy of this SparseDataFrame
         """
-        if deep:
-            series = self._series.copy()
-        else:
-            series = self._series
+        series = self._series.copy()
         return SparseDataFrame(series, index=self.index, columns=self.columns,
                                default_fill_value=self.default_fill_value,
                                default_kind=self.default_kind)
@@ -1062,23 +1059,8 @@ class SparseDataFrame(DataFrame):
         self.columns = new_columns
         self._series = new_series
 
-    def _append_column_by_column(self, other):
-        new_data = {}
-        for col in self:
-            values = self[col].values
-            if col in other:
-                other_values = other[col].values
-            else:
-                values = _maybe_upcast(values)
-                other_values = np.empty(len(other), dtype=values.dtype)
-                other_values.fill(np.nan)
-            new_data[col] = np.concatenate((values, other_values))
-
-        for column, series in other.iteritems():
-            if column not in self:
-                new_data[column] = series.values
-
-        return new_data
+    def _get_raw_column(self, col):
+        return self._series[col].values
 
     def add_prefix(self, prefix):
         f = (('%s' % prefix) + '%s').__mod__
diff --git a/pandas/tests/test_sparse.py b/pandas/tests/test_sparse.py
index ec9487292..025ec042d 100644
--- a/pandas/tests/test_sparse.py
+++ b/pandas/tests/test_sparse.py
@@ -233,6 +233,11 @@ class TestSparseSeries(TestCase):
         assert_sp_series_equal(zbcop, self.zbseries)
         assert_sp_series_equal(zicop, self.ziseries)
 
+        # no deep copy
+        view = self.bseries.copy(deep=False)
+        view.sp_values[:5] = 5
+        self.assert_((self.bseries.sp_values[:5] == 5).all())
+
     def test_astype(self):
         self.assertRaises(Exception, self.bseries.astype, np.int_)
 
@@ -909,6 +914,11 @@ class TestSparseDataFrame(TestCase, test_frame.SafeForSparse):
         appended = a.append(b)
         assert_sp_frame_equal(appended, self.frame)
 
+        a = self.frame.ix[:5, :3]
+        b = self.frame.ix[5:]
+        appended = a.append(b)
+        assert_sp_frame_equal(appended.ix[:, :3], self.frame.ix[:, :3])
+
     def test_apply(self):
         applied = self.frame.apply(np.sqrt)
         self.assert_(isinstance(applied, SparseDataFrame))
