commit bd3953493609395667e225fc7a43c9c9014fef5d
Author: Thomas Kluyver <takowl@gmail.com>
Date:   Wed Oct 5 22:35:35 2011 +0100

    Fix up more tests for Python 3.

diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index d303ab2cd..8caae56dd 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -61,7 +61,7 @@ class TestGroupBy(unittest.TestCase):
                                 columns=['A', 'B', 'C'])
 
     def test_basic(self):
-        data = Series(np.arange(9) / 3, index=np.arange(9))
+        data = Series(np.arange(9) // 3, index=np.arange(9))
 
         index = np.arange(9)
         np.random.shuffle(index)
@@ -197,7 +197,7 @@ class TestGroupBy(unittest.TestCase):
         grouped.mean()
 
     def test_transform(self):
-        data = Series(np.arange(9) / 3, index=np.arange(9))
+        data = Series(np.arange(9) // 3, index=np.arange(9))
 
         index = np.arange(9)
         np.random.shuffle(index)
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index b4cafb42b..dd0f6a8d5 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -14,6 +14,7 @@ from pandas.core.frame import group_agg
 from pandas.core.panel import Panel, LongPanel
 from pandas.core.series import remove_na
 import pandas.core.panel as panelmod
+from pandas.util import py3compat
 
 from pandas.util.testing import (assert_panel_equal,
                                  assert_frame_equal,
@@ -199,7 +200,8 @@ class SafeForSparse(object):
         self._test_op(self.panel, operator.add)
         self._test_op(self.panel, operator.sub)
         self._test_op(self.panel, operator.mul)
-        self._test_op(self.panel, operator.div)
+        self._test_op(self.panel, operator.truediv)
+        self._test_op(self.panel, operator.floordiv)
         self._test_op(self.panel, operator.pow)
 
         self._test_op(self.panel, lambda x, y: y + x)
@@ -258,7 +260,10 @@ class SafeForSparse(object):
         check_op(operator.add, 'add')
         check_op(operator.sub, 'subtract')
         check_op(operator.mul, 'multiply')
-        check_op(operator.div, 'divide')
+        if py3compat.PY3:
+            check_op(operator.truediv, 'divide')
+        else:
+            check_op(operator.div, 'divide')
 
     def test_combinePanel(self):
         result = self.panel.add(self.panel)
@@ -843,8 +848,8 @@ class TestLongPanel(unittest.TestCase):
         K = 10
 
         recs = np.zeros(K, dtype='O,O,f8,f8')
-        recs['f0'] = range(K / 2) * 2
-        recs['f1'] = np.arange(K) / (K / 2)
+        recs['f0'] = range(K // 2) * 2
+        recs['f1'] = np.arange(K) / (K // 2)
         recs['f2'] = np.arange(K) * 2
         recs['f3'] = np.arange(K)
 
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 9bbc2e33d..c8c9d4f84 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -11,6 +11,7 @@ import numpy as np
 from pandas import Index, Series, TimeSeries, DataFrame, isnull, notnull
 from pandas.core.index import MultiIndex
 import pandas.core.datetools as datetools
+from pandas.util import py3compat
 from pandas.util.testing import assert_series_equal, assert_almost_equal
 import pandas.util.testing as common
 
@@ -566,13 +567,15 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         def check(other):
             _check_op(other, operator.add)
             _check_op(other, operator.sub)
-            _check_op(other, operator.div)
+            _check_op(other, operator.truediv)
+            _check_op(other, operator.floordiv)
             _check_op(other, operator.mul)
             _check_op(other, operator.pow)
 
             _check_op(other, lambda x, y: operator.add(y, x))
             _check_op(other, lambda x, y: operator.sub(y, x))
-            _check_op(other, lambda x, y: operator.div(y, x))
+            _check_op(other, lambda x, y: operator.truediv(y, x))
+            _check_op(other, lambda x, y: operator.floordiv(y, x))
             _check_op(other, lambda x, y: operator.mul(y, x))
             _check_op(other, lambda x, y: operator.pow(y, x))
 
@@ -630,7 +633,8 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         _check_op(arr, operator.add)
         _check_op(arr, operator.sub)
         _check_op(arr, operator.mul)
-        _check_op(arr, operator.div)
+        _check_op(arr, operator.truediv)
+        _check_op(arr, operator.floordiv)
 
     def test_operators_frame(self):
         # rpow does not work with DataFrame
@@ -671,7 +675,11 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         b = Series([nan, 1, nan, 3, nan, 4.], index=np.arange(6))
 
         ops = [Series.add, Series.sub, Series.mul, Series.div]
-        equivs = [operator.add, operator.sub, operator.mul, operator.div]
+        equivs = [operator.add, operator.sub, operator.mul]
+        if py3compat.PY3:
+            equivs.append(operator.truediv)
+        else:
+            equivs.append(operator.div)
         fillvals = [0, 0, 1, 1]
 
         for op, equiv_op, fv in zip(ops, equivs, fillvals):
