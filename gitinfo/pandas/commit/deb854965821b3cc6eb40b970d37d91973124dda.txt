commit deb854965821b3cc6eb40b970d37d91973124dda
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Aug 9 18:54:01 2011 -0400

    BUG: fix GH #98

diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 24fe25239..6dfda019a 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -1,11 +1,10 @@
-from operator import attrgetter
 import itertools
 
 from numpy import nan
 import numpy as np
 
-from pandas.core.index import Index, NULL_INDEX
-from pandas.core.common import _ensure_index, _try_sort
+from pandas.core.index import Index
+from pandas.core.common import _ensure_index
 import pandas.core.common as common
 import pandas._tseries as _tseries
 
@@ -375,7 +374,6 @@ class BlockManager(object):
     def from_blocks(cls, blocks, index):
         # also checks for overlap
         items = _union_block_items(blocks)
-        ndim = blocks[0].ndim
         return BlockManager(blocks, [items, index])
 
     def __contains__(self, item):
@@ -429,8 +427,6 @@ class BlockManager(object):
         return result
 
     def xs(self, key, axis=1, copy=True):
-        from pandas.core.series import Series
-
         assert(axis >= 1)
 
         i = self.axes[axis].get_loc(key)
@@ -441,15 +437,15 @@ class BlockManager(object):
         new_axes = list(self.axes)
         new_axes.pop(axis)
 
+        new_blocks = []
         if len(self.blocks) > 1:
             if not copy:
                 raise Exception('cannot get view of mixed-type or '
                                 'non-consolidated DataFrame')
-            new_blocks = []
             for blk in self.blocks:
                 newb = make_block(blk.values[slicer], blk.items, blk.ref_items)
                 new_blocks.append(newb)
-        else:
+        elif len(self.blocks) == 1:
             vals = self.blocks[0].values[slicer]
             if copy:
                 vals = vals.copy()
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 5b50bde5e..12f2eb4e4 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1548,6 +1548,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         self.assertRaises(Exception, self.tsframe.xs,
                           self.tsframe.index[0] - datetools.bday)
 
+    def test_xs_corner(self):
         # pathological mixed-type reordering case
         df = DataFrame(index=[0])
         df['A'] = 1.
@@ -1559,6 +1560,12 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         xs = df.xs(0)
         assert_almost_equal(xs, [1., 'foo', 2., 'bar', 3.])
 
+        # no columns but index
+        df = DataFrame(index=['a', 'b', 'c'])
+        result = df.xs('a')
+        expected = Series([])
+        assert_series_equal(result, expected)
+
     def test_pivot(self):
         data = {
             'index' : ['A', 'B', 'C', 'C', 'B', 'A'],
