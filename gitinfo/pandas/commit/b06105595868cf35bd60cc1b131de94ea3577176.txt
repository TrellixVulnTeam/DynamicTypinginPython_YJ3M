commit b06105595868cf35bd60cc1b131de94ea3577176
Author: Jeff Reback <jeff@reback.net>
Date:   Fri Jul 17 10:39:04 2015 -0400

    DOC: corrections for None/np.nan comparisons

diff --git a/doc/source/missing_data.rst b/doc/source/missing_data.rst
index e28a06b81..51293ca42 100644
--- a/doc/source/missing_data.rst
+++ b/doc/source/missing_data.rst
@@ -91,6 +91,7 @@ pandas provides the :func:`~pandas.core.common.isnull` and
 .. warning::
 
    One has to be mindful that in python (and numpy), the ``nan's`` don't compare equal, but ``None's`` **do**.
+   Note that Pandas/numpy uses the fact that ``np.nan != np.nan``, and treats ``None`` like ``np.nan``.
 
    .. ipython:: python
 
diff --git a/doc/source/whatsnew/v0.17.0.txt b/doc/source/whatsnew/v0.17.0.txt
index 9b8aeff97..77adbfc41 100644
--- a/doc/source/whatsnew/v0.17.0.txt
+++ b/doc/source/whatsnew/v0.17.0.txt
@@ -230,7 +230,7 @@ Boolean comparisons of a ``Series`` vs ``None`` will now be equivalent to compar
 
 .. ipython:: python
 
-   s = Series(range(3.))
+   s = Series(range(3))
    s.iloc[1] = None
    s
 
@@ -256,7 +256,7 @@ Usually you simply want to know which values are null.
 .. warning::
 
    You generally will want to use ``isnull/notnull`` for these types of comparisons, as ``isnull/notnull`` tells you which elements are null. One has to be
-   mindful that ``nan's`` don't compare equal, but ``None's`` do.
+   mindful that ``nan's`` don't compare equal, but ``None's`` do. Note that Pandas/numpy uses the fact that ``np.nan != np.nan``, and treats ``None`` like ``np.nan``.
 
    .. ipython:: python
 
