commit ecc437a97c30a26e4461b22d909c1fa3159519a8
Author: Devin Petersohn <devin-petersohn@users.noreply.github.com>
Date:   Mon Feb 4 05:05:38 2019 -0800

    BUG: Fixing regression in DataFrame.all and DataFrame.any with bool_only=True (#25102)

diff --git a/doc/source/whatsnew/v0.24.2.rst b/doc/source/whatsnew/v0.24.2.rst
index 316fc21c1..a047ad46e 100644
--- a/doc/source/whatsnew/v0.24.2.rst
+++ b/doc/source/whatsnew/v0.24.2.rst
@@ -20,9 +20,7 @@ including other versions of pandas.
 Fixed Regressions
 ^^^^^^^^^^^^^^^^^
 
--
--
--
+- Fixed regression in :meth:`DataFrame.all` and :meth:`DataFrame.any` where ``bool_only=True`` was ignored (:issue:`25101`)
 
 .. _whatsnew_0242.enhancements:
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index be125983c..b11d14377 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -7498,7 +7498,8 @@ class DataFrame(NDFrame):
                 if filter_type is None or filter_type == 'numeric':
                     data = self._get_numeric_data()
                 elif filter_type == 'bool':
-                    data = self
+                    # GH 25101, # GH 24434
+                    data = self._get_bool_data() if axis == 0 else self
                 else:  # pragma: no cover
                     msg = ("Generating numeric_only data with filter_type {f}"
                            "not supported.".format(f=filter_type))
diff --git a/pandas/tests/frame/test_analytics.py b/pandas/tests/frame/test_analytics.py
index 386e5f576..456af34e7 100644
--- a/pandas/tests/frame/test_analytics.py
+++ b/pandas/tests/frame/test_analytics.py
@@ -1442,6 +1442,26 @@ class TestDataFrameAnalytics():
         expected = Series([True, True, True, False])
         tm.assert_series_equal(result, expected)
 
+    def test_any_all_bool_only(self):
+
+        # GH 25101
+        df = DataFrame({"col1": [1, 2, 3],
+                        "col2": [4, 5, 6],
+                        "col3": [None, None, None]})
+
+        result = df.all(bool_only=True)
+        expected = Series(dtype=np.bool)
+        tm.assert_series_equal(result, expected)
+
+        df = DataFrame({"col1": [1, 2, 3],
+                        "col2": [4, 5, 6],
+                        "col3": [None, None, None],
+                        "col4": [False, False, True]})
+
+        result = df.all(bool_only=True)
+        expected = Series({"col4": False})
+        tm.assert_series_equal(result, expected)
+
     @pytest.mark.parametrize('func, data, expected', [
         (np.any, {}, False),
         (np.all, {}, True),
