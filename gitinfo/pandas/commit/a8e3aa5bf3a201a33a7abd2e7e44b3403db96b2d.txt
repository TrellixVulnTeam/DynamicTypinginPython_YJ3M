commit a8e3aa5bf3a201a33a7abd2e7e44b3403db96b2d
Author: MomIsBestFriend <50263213+MomIsBestFriend@users.noreply.github.com>
Date:   Mon Dec 9 18:43:22 2019 +0200

    Remove blank lines under docstring, Put underscores (#30156)

diff --git a/pandas/_libs/groupby.pyx b/pandas/_libs/groupby.pyx
index 49fb1ca50..9e5fa75eb 100644
--- a/pandas/_libs/groupby.pyx
+++ b/pandas/_libs/groupby.pyx
@@ -175,7 +175,6 @@ def group_cumprod_float64(float64_t[:, :] out,
     -----
     This method modifies the `out` parameter, rather than returning an object.
     """
-
     cdef:
         Py_ssize_t i, j, N, K, size
         float64_t val
@@ -233,7 +232,6 @@ def group_cumsum(numeric[:, :] out,
     -----
     This method modifies the `out` parameter, rather than returning an object.
     """
-
     cdef:
         Py_ssize_t i, j, N, K, size
         numeric val
@@ -1404,7 +1402,6 @@ def group_cummin(groupby_t[:, :] out,
     -----
     This method modifies the `out` parameter, rather than returning an object.
     """
-
     cdef:
         Py_ssize_t i, j, N, K, size
         groupby_t val, mval
@@ -1465,7 +1462,6 @@ def group_cummax(groupby_t[:, :] out,
     -----
     This method modifies the `out` parameter, rather than returning an object.
     """
-
     cdef:
         Py_ssize_t i, j, N, K, size
         groupby_t val, mval
diff --git a/pandas/_libs/hashing.pyx b/pandas/_libs/hashing.pyx
index 190619362..d735890f7 100644
--- a/pandas/_libs/hashing.pyx
+++ b/pandas/_libs/hashing.pyx
@@ -25,13 +25,17 @@ def hash_object_array(object[:] arr, object key, object encoding='utf8'):
 
     Returns
     -------
-    1-d uint64 ndarray of hashes
+    1-d uint64 ndarray of hashes.
+
+    Raises
+    ------
+    TypeError
+        If the array contains mixed types.
 
     Notes
     -----
-    allowed values must be strings, or nulls
-    mixed array types will raise TypeError
-
+    Allowed values must be strings, or nulls
+    mixed array types will raise TypeError.
     """
     cdef:
         Py_ssize_t i, l, n
@@ -47,7 +51,7 @@ def hash_object_array(object[:] arr, object key, object encoding='utf8'):
     k = <bytes>key.encode(encoding)
     kb = <uint8_t *>k
     if len(k) != 16:
-        raise ValueError(f"key should be a 16-byte string encoded, "
+        raise ValueError("key should be a 16-byte string encoded, "
                          f"got {k} (len {len(k)})")
 
     n = len(arr)
@@ -68,8 +72,7 @@ def hash_object_array(object[:] arr, object key, object encoding='utf8'):
 
         else:
             raise TypeError(f"{val} of type {type(val)} is not a valid type "
-                            f"for hashing, must be string or null"
-                            )
+                            "for hashing, must be string or null")
 
         l = len(data)
         lens[i] = l
diff --git a/pandas/_libs/hashtable.pyx b/pandas/_libs/hashtable.pyx
index 8179822b9..6e68a687d 100644
--- a/pandas/_libs/hashtable.pyx
+++ b/pandas/_libs/hashtable.pyx
@@ -142,7 +142,7 @@ cdef class Int64Factorizer:
 @cython.boundscheck(False)
 def unique_label_indices(const int64_t[:] labels):
     """
-    indices of the first occurrences of the unique labels
+    Indices of the first occurrences of the unique labels
     *excluding* -1. equivalent to:
         np.unique(labels, return_index=True)[1]
     """
diff --git a/pandas/_libs/index.pyx b/pandas/_libs/index.pyx
index 2c69d6aaa..0ed48efb0 100644
--- a/pandas/_libs/index.pyx
+++ b/pandas/_libs/index.pyx
@@ -52,7 +52,7 @@ cpdef get_value_at(ndarray arr, object loc, object tz=None):
 
 
 # Don't populate hash tables in monotonic indexes larger than this
-_SIZE_CUTOFF = 1000000
+_SIZE_CUTOFF = 1_000_000
 
 
 cdef class IndexEngine:
@@ -79,6 +79,8 @@ cdef class IndexEngine:
 
     cpdef get_value(self, ndarray arr, object key, object tz=None):
         """
+        Parameters
+        ----------
         arr : 1-dimensional ndarray
         """
         cdef:
@@ -93,6 +95,8 @@ cdef class IndexEngine:
 
     cpdef set_value(self, ndarray arr, object key, object value):
         """
+        Parameters
+        ----------
         arr : 1-dimensional ndarray
         """
         cdef:
@@ -283,11 +287,12 @@ cdef class IndexEngine:
         return self.mapping.lookup(values)
 
     def get_indexer_non_unique(self, targets):
-        """ return an indexer suitable for takng from a non unique index
-            return the labels in the same order ast the target
-            and a missing indexer into the targets (which correspond
-            to the -1 indices in the results """
-
+        """
+        Return an indexer suitable for takng from a non unique index
+        return the labels in the same order ast the target
+        and a missing indexer into the targets (which correspond
+        to the -1 indices in the results
+        """
         cdef:
             ndarray values, x
             ndarray[int64_t] result, missing
@@ -302,8 +307,8 @@ cdef class IndexEngine:
         stargets = set(targets)
         n = len(values)
         n_t = len(targets)
-        if n > 10000:
-            n_alloc = 10000
+        if n > 10_000:
+            n_alloc = 10_000
         else:
             n_alloc = n
 
@@ -345,7 +350,7 @@ cdef class IndexEngine:
 
                     # realloc if needed
                     if count >= n_alloc:
-                        n_alloc += 10000
+                        n_alloc += 10_000
                         result = np.resize(result, n_alloc)
 
                     result[count] = j
@@ -355,7 +360,7 @@ cdef class IndexEngine:
             else:
 
                 if count >= n_alloc:
-                    n_alloc += 10000
+                    n_alloc += 10_000
                     result = np.resize(result, n_alloc)
                 result[count] = -1
                 count += 1
@@ -393,7 +398,7 @@ cdef Py_ssize_t _bin_search(ndarray values, object val) except -1:
 
 cdef class ObjectEngine(IndexEngine):
     """
-    Index Engine for use with object-dtype Index, namely the base class Index
+    Index Engine for use with object-dtype Index, namely the base class Index.
     """
     cdef _make_hash_table(self, Py_ssize_t n):
         return _hash.PyObjectHashTable(n)
@@ -560,7 +565,7 @@ cpdef convert_scalar(ndarray arr, object value):
             pass
         elif value is None or value != value:
             return np.datetime64("NaT", "ns")
-        raise ValueError(f"cannot set a Timestamp with a non-timestamp "
+        raise ValueError("cannot set a Timestamp with a non-timestamp "
                          f"{type(value).__name__}")
 
     elif arr.descr.type_num == NPY_TIMEDELTA:
@@ -577,17 +582,17 @@ cpdef convert_scalar(ndarray arr, object value):
             pass
         elif value is None or value != value:
             return np.timedelta64("NaT", "ns")
-        raise ValueError(f"cannot set a Timedelta with a non-timedelta "
+        raise ValueError("cannot set a Timedelta with a non-timedelta "
                          f"{type(value).__name__}")
 
     if (issubclass(arr.dtype.type, (np.integer, np.floating, np.complex)) and
             not issubclass(arr.dtype.type, np.bool_)):
         if util.is_bool_object(value):
-            raise ValueError('Cannot assign bool to float/integer series')
+            raise ValueError("Cannot assign bool to float/integer series")
 
     if issubclass(arr.dtype.type, (np.integer, np.bool_)):
         if util.is_float_object(value) and value != value:
-            raise ValueError('Cannot assign nan to integer series')
+            raise ValueError("Cannot assign nan to integer series")
 
     return value
 
@@ -625,13 +630,12 @@ cdef class BaseMultiIndexCodesEngine:
         Parameters
         ----------
         levels : list-like of numpy arrays
-            Levels of the MultiIndex
+            Levels of the MultiIndex.
         labels : list-like of numpy arrays of integer dtype
-            Labels of the MultiIndex
+            Labels of the MultiIndex.
         offsets : numpy array of uint64 dtype
-            Pre-calculated offsets, one for each level of the index
+            Pre-calculated offsets, one for each level of the index.
         """
-
         self.levels = levels
         self.offsets = offsets
 
@@ -664,7 +668,6 @@ cdef class BaseMultiIndexCodesEngine:
         int_keys : 1-dimensional array of dtype uint64 or object
             Integers representing one combination each
         """
-
         level_codes = [lev.get_indexer(codes) + 1 for lev, codes
                        in zip(self.levels, zip(*target))]
         return self._codes_to_ints(np.array(level_codes, dtype='uint64').T)
diff --git a/pandas/_libs/indexing.pyx b/pandas/_libs/indexing.pyx
index 7a25a52c7..01f4fb060 100644
--- a/pandas/_libs/indexing.pyx
+++ b/pandas/_libs/indexing.pyx
@@ -18,7 +18,6 @@ cdef class _NDFrameIndexerBase:
         if ndim is None:
             ndim = self._ndim = self.obj.ndim
             if ndim > 2:
-                msg = ("NDFrameIndexer does not support NDFrame objects with"
-                       " ndim > 2")
-                raise ValueError(msg)
+                raise ValueError("NDFrameIndexer does not support "
+                                 "NDFrame objects with ndim > 2")
         return ndim
