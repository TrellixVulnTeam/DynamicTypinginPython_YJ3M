commit 3e2e7afd686059a8629c3d1c0d44332931dc323e
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Nov 17 12:57:24 2011 -0500

    BUG: handling of mixed-type frames in DataFrame.apply, GH #377

diff --git a/RELEASE.rst b/RELEASE.rst
index 9653bfef9..687428569 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -94,6 +94,7 @@ pandas 0.5.1
   - Add `raw` option to `DataFrame.apply` for getting better performance when
     the passed function only requires an ndarray (GH #309)
   - Improve performance of `MultiIndex.from_tuples`
+  - Can pass multiple levels to `stack` and `unstack` (GH #370)
 
 **Bug fixes**
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 17d43bcc6..5302d6f52 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2199,7 +2199,7 @@ class DataFrame(NDFrame):
                                      columns=self.columns, copy=False)
         else:
             if not broadcast:
-                if raw:
+                if raw and not self._is_mixed_type:
                     return self._apply_raw(func, axis)
                 else:
                     return self._apply_standard(func, axis)
@@ -2221,6 +2221,7 @@ class DataFrame(NDFrame):
 
     def _apply_standard(self, func, axis, ignore_failures=False):
         try:
+            assert(not self._is_mixed_type)  # maybe a hack for now
             values = self.values
             dummy = Series(np.nan, index=self._get_axis(axis),
                            dtype=values.dtype)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 8578627a5..f2448f64d 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1815,7 +1815,9 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
     def test_dtypes(self):
         self.mixed_frame['bool'] = self.mixed_frame['A'] > 0
         result = self.mixed_frame.dtypes
-        expected = self.mixed_frame.dtypes
+        expected = Series(dict((k, v.dtype)
+                               for k, v in self.mixed_frame.iteritems()),
+                          index=result.index)
         assert_series_equal(result, expected)
 
     def test_append(self):
