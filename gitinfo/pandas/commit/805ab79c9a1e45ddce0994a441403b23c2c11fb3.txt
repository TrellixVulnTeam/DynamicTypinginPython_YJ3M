commit 805ab79c9a1e45ddce0994a441403b23c2c11fb3
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri May 25 11:30:17 2012 -0400

    BUG: handle other datetime64 scalar frequency units in Timestamp/DatetimeIndex, close #1314

diff --git a/pandas/src/datetime.pxd b/pandas/src/datetime.pxd
index e71139f0a..3d27eee4e 100644
--- a/pandas/src/datetime.pxd
+++ b/pandas/src/datetime.pxd
@@ -51,7 +51,7 @@ cdef extern from "numpy/ndarrayobject.h":
 
 
 cdef extern from "numpy_helper.h":
-    npy_datetime unbox_datetime64_scalar(object o)
+    npy_datetime get_datetime64_value(object o)
 
 cdef extern from "numpy/npy_common.h":
 
@@ -93,6 +93,7 @@ cdef extern from "np_datetime.h":
 
     int dayofweek(int y, int m, int d)
     int is_leapyear(int64_t year)
+    PANDAS_DATETIMEUNIT get_datetime64_unit(object o)
 
 cdef extern from "np_datetime_strings.h":
 
diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index ca0fa8406..d1949317e 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -320,7 +320,7 @@ cpdef convert_to_tsobject(object ts, object tz=None):
     obj = _TSObject()
 
     if is_datetime64_object(ts):
-        obj.value = unbox_datetime64_scalar(ts)
+        obj.value = _get_datetime64_nanos(ts)
         pandas_datetime_to_datetimestruct(obj.value, PANDAS_FR_ns, &obj.dts)
     elif is_integer_object(ts):
         obj.value = ts
@@ -821,7 +821,7 @@ def string_to_datetime(ndarray[object] strings, raise_=False, dayfirst=False):
             elif PyDate_Check(val):
                 iresult[i] = _date_to_datetime64(val, &dts)
             elif util.is_datetime64_object(val):
-                result[i] = val
+                iresult[i] = _get_datetime64_nanos(val)
             else:
                 if len(val) == 0:
                     iresult[i] = NaT
@@ -852,6 +852,20 @@ def string_to_datetime(ndarray[object] strings, raise_=False, dayfirst=False):
 
         return oresult
 
+cdef inline _get_datetime64_nanos(object val):
+    cdef:
+        pandas_datetimestruct dts
+        PANDAS_DATETIMEUNIT unit
+        npy_datetime ival
+
+    unit = get_datetime64_unit(val)
+    ival = get_datetime64_value(val)
+
+    if unit != PANDAS_FR_ns:
+        pandas_datetime_to_datetimestruct(ival, unit, &dts)
+        return pandas_datetimestruct_to_datetime(PANDAS_FR_ns, &dts)
+    else:
+        return ival
 
 #----------------------------------------------------------------------
 # Conversion routines
diff --git a/pandas/src/engines.pyx b/pandas/src/engines.pyx
index d6d20aabf..a6c734ed9 100644
--- a/pandas/src/engines.pyx
+++ b/pandas/src/engines.pyx
@@ -438,7 +438,7 @@ cdef class DatetimeEngine(Int64Engine):
 cdef inline _to_i8(object val):
     cdef pandas_datetimestruct dts
     if util.is_datetime64_object(val):
-        val = unbox_datetime64_scalar(val)
+        val = get_datetime64_value(val)
     elif PyDateTime_Check(val):
         return _pydatetime_to_dts(val, &dts)
     return val
diff --git a/pandas/src/np_datetime.c b/pandas/src/np_datetime.c
index 06b7b8abd..d6afcbe53 100644
--- a/pandas/src/np_datetime.c
+++ b/pandas/src/np_datetime.c
@@ -16,6 +16,7 @@
 /* #define time _time64 */
 
 #include <numpy/ndarrayobject.h>
+#include <numpy/arrayscalars.h>
 #include "np_datetime.h"
 
 #if PY_MAJOR_VERSION >= 3
@@ -60,7 +61,7 @@ int dayofweek(int y, int m, int d)
 
 /*
  * Adjusts a datetimestruct based on a minutes offset. Assumes
- * the current values are valid.
+ * the current values are valid.g
  */
 void
 add_minutes_to_datetimestruct(pandas_datetimestruct *dts, int minutes)
@@ -505,6 +506,11 @@ void pandas_datetime_to_datetimestruct(npy_datetime val, PANDAS_DATETIMEUNIT fr,
     convert_datetime_to_datetimestruct(&meta, val, result);
 }
 
+PANDAS_DATETIMEUNIT get_datetime64_unit(PyObject *obj) {
+    return ((PyDatetimeScalarObject *) obj)->obmeta.base;
+}
+
+
 /*
  * Converts a datetime from a datetimestruct to a datetime based
  * on some metadata. The date is assumed to be valid.
diff --git a/pandas/src/np_datetime.h b/pandas/src/np_datetime.h
index 042ea11d0..0fbf74547 100644
--- a/pandas/src/np_datetime.h
+++ b/pandas/src/np_datetime.h
@@ -112,5 +112,7 @@ convert_datetime_to_datetimestruct(pandas_datetime_metadata *meta,
                                    pandas_datetimestruct *out);
 
 
+PANDAS_DATETIMEUNIT get_datetime64_unit(PyObject *obj);
+
 
 #endif
diff --git a/pandas/src/numpy_helper.h b/pandas/src/numpy_helper.h
index b63835119..ef83ec266 100644
--- a/pandas/src/numpy_helper.h
+++ b/pandas/src/numpy_helper.h
@@ -49,11 +49,12 @@ get_nat() {
 }
 
 PANDAS_INLINE npy_datetime
-unbox_datetime64_scalar(PyObject* obj) {
+get_datetime64_value(PyObject* obj) {
   return ((PyDatetimeScalarObject*) obj)->obval;
 
 }
 
+
 PANDAS_INLINE int
 is_integer_object(PyObject* obj) {
   return (!PyBool_Check(obj)) && PyArray_IsIntegerScalar(obj);
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 7201de7de..77f1badf0 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -441,6 +441,17 @@ class TestTimeSeries(unittest.TestCase):
         result = to_datetime(['', ''])
         self.assert_(isnull(result).all())
 
+    def test_to_datetime_other_datetime64_units(self):
+        # 5/25/2012
+        scalar = np.int64(1337904000000000).view('M8[us]')
+        as_obj = scalar.astype('O')
+
+        index = DatetimeIndex([scalar])
+        self.assertEquals(index[0], scalar.astype('O'))
+
+        value = Timestamp(scalar)
+        self.assertEquals(value, as_obj)
+
     def test_index_to_datetime(self):
         idx = Index(['1/1/2000', '1/2/2000', '1/3/2000'])
 
