commit f85a9273f3bb3e7396008c74b949a74383d77629
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Oct 22 22:09:26 2011 -0400

    DOC: some more docs, getting closer to complete for 0.5.0

diff --git a/RELEASE.rst b/RELEASE.rst
index 8ffdaa447..e3db0d171 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -127,6 +127,7 @@ feedback on the library.
     #261)
   - Added `pivot_table` convenience function to pandas namespace (GH #234)
   - Implemented `Panel.rename_axis` function (GH #243)
+  - DataFrame will show index level names in console output
 
 **Improvements to existing features**
 
diff --git a/TODO.rst b/TODO.rst
index e81f58197..90a59e374 100644
--- a/TODO.rst
+++ b/TODO.rst
@@ -27,16 +27,16 @@ TODO docs
 - DONE as_index=False in groupby
 - DONOTWANT is_monotonic
 - DONE DataFrame.to_csv: different delimiters
-- Inner join on key
-- Multi-key joining
-- Index / MultiIndex names
+- DONE combine_first
+- DONE groupby with level name
+- DONE MultiIndex get_level_values
 
-- combine_first
+- Index / MultiIndex names
 - Unstack / stack by level name
 - name attribute on Series
-- groupby with level name
-- MultiIndex
-  - get_level_values
+
+- Inner join on key
+- Multi-key joining
 
 - Update to reflect Python 3 support in intro
 - align functions
diff --git a/doc/source/groupby.rst b/doc/source/groupby.rst
index b520a3357..57aafef86 100644
--- a/doc/source/groupby.rst
+++ b/doc/source/groupby.rst
@@ -159,7 +159,7 @@ natural to group by one of the levels of the hierarchy.
              ['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two']]
    tuples = zip(*arrays)
    tuples
-   index = MultiIndex.from_tuples(tuples)
+   index = MultiIndex.from_tuples(tuples, names=['first', 'second'])
    s = Series(randn(8), index=index)
 
 .. ipython:: python
@@ -168,6 +168,13 @@ natural to group by one of the levels of the hierarchy.
    grouped = s.groupby(level=0)
    grouped.sum()
 
+If the MultiIndex has names specified, these can be passed instead of the level
+number:
+
+.. ipython:: python
+
+   s.groupby(level='second').sum()
+
 More on the ``sum`` function and aggregation later. Grouping with multiple
 levels (as opposed to a single level) is not yet supported, though implementing
 it is not difficult.
diff --git a/doc/source/indexing.rst b/doc/source/indexing.rst
index 905f004e9..e51dae00b 100644
--- a/doc/source/indexing.rst
+++ b/doc/source/indexing.rst
@@ -346,10 +346,18 @@ can think of ``MultiIndex`` an array of tuples where each tuple is unique. A
              ['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two']]
    tuples = zip(*arrays)
    tuples
-   index = MultiIndex.from_tuples(tuples)
+   index = MultiIndex.from_tuples(tuples, names=['first', 'second'])
    s = Series(randn(8), index=index)
    s
 
+All of the ``MultiIndex`` constructors accept a ``names`` argument which stores
+string names for the levels themselves. If no names are provided, some
+arbitrary ones will be assigned:
+
+.. ipython:: python
+
+   index.names
+
 This index can back any axis of a pandas object, and the number of **levels**
 of the index is up to you:
 
@@ -376,17 +384,17 @@ can find yourself working with hierarchically-indexed data without creating a
 ``MultiIndex`` explicitly yourself. However, when loading data from a file, you
 may wish to generate your own ``MultiIndex`` when preparing the data set.
 
-Level names
-~~~~~~~~~~~
+Reconstructing the level labels
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
-All of the ``MultiIndex`` constructors accept a ``names`` argument which stores
-string names for the levels themselves. This will get increasingly integrated
-in to groupby and reshaping routines. If no names are provided, some arbitrary
-ones will be assigned:
+The method ``get_level_values`` will return a vector of the labels for each
+location at a particular level:
 
 .. ipython:: python
 
-   index.names
+   index.get_level_values(0)
+   index.get_level_values(1)
+
 
 Basic indexing on axis with MultiIndex
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -576,6 +584,16 @@ To do this, use the ``swaplevels`` function:
    df
    df.swaplevels(0, 1)
 
+Index methods
+-------------
+
+The pandas Index class and its subclasses can be viewed as implementing an
+*ordered set* in addition to providing the support infrastructure necessary for
+lookups, data alignment, and reindexing.
+
+Set operations on Index objects
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
 Indexing internal details
 -------------------------
 
