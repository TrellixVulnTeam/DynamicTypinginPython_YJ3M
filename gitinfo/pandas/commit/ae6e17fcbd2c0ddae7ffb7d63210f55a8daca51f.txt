commit ae6e17fcbd2c0ddae7ffb7d63210f55a8daca51f
Author: Adam Klein <adamklein@gmail.com>
Date:   Fri Jan 20 16:06:34 2012 -0500

    Added datetime c extension skeleton

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 7f0734323..2b75d87f9 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -89,28 +89,6 @@ def notnull(obj):
         return not res
     return -res
 
-_unbox_cache = dict()
-def _dt_unbox(key):
-    '''
-    Unbox datetime to datetime64
-    '''
-    try:
-        return _unbox_cache[key]
-    except KeyError:
-        _unbox_cache[key] = np.datetime64(key)
-        return _unbox_cache[key]
-
-_box_cache = dict()
-def _dt_box(key):
-    '''
-    Box datetime64 to datetime
-    '''
-    try:
-        return _box_cache[key]
-    except KeyError:
-        _box_cache[key] = key.astype('O')
-        return _box_cache[key]
-
 def _pickle_array(arr):
     arr = arr.view(np.ndarray)
 
diff --git a/pandas/core/daterange.py b/pandas/core/daterange.py
index 34e98119b..af3ec2a7b 100644
--- a/pandas/core/daterange.py
+++ b/pandas/core/daterange.py
@@ -7,7 +7,7 @@ import numpy as np
 
 from pandas.core.index import DatetimeIndex
 import pandas.core.datetools as datetools
-from pandas.core.common import _dt_box
+from pandas.core.datetools import _dt_box
 
 __all__ = ['DateRange']
 
diff --git a/pandas/core/datetools.py b/pandas/core/datetools.py
index fe3f38225..eb85f722f 100644
--- a/pandas/core/datetools.py
+++ b/pandas/core/datetools.py
@@ -3,7 +3,7 @@
 from datetime import datetime, timedelta
 import sys
 import numpy as np
-from pandas.core.common import _dt_box
+import pandas._tseries as lib
 
 try:
     import dateutil
@@ -21,6 +21,15 @@ except ImportError: # pragma: no cover
 
 import calendar
 
+#-------------------------------------------------------------------------------
+# Boxing and unboxing
+
+def _dt_unbox(key):
+    lib.dt_unbox(key)
+
+def _dt_box(key):
+    lib.dt_box(key)
+
 #-------------------------------------------------------------------------------
 # Miscellaneous date functions
 
diff --git a/pandas/core/index.py b/pandas/core/index.py
index b7501893a..b1c4b4d60 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -7,7 +7,8 @@ import numpy as np
 
 from pandas.core.common import (adjoin as _adjoin, _stringify, _try_sort,
                                 _is_bool_indexer, _asarray_tuplesafe,
-                                _dt_box, _dt_unbox, is_iterator)
+                                is_iterator)
+from pandas.core.datetools import _dt_box, _dt_unbox
 from pandas.util.decorators import cache_readonly
 import pandas._tseries as lib
 import pandas._engines as _gin
diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
new file mode 100644
index 000000000..b2430c9ac
--- /dev/null
+++ b/pandas/src/datetime.pyx
@@ -0,0 +1,77 @@
+cimport numpy as cnp
+cimport cython
+cimport cpython
+import numpy as np
+
+from numpy cimport int64_t, import_array
+
+cdef extern from "datetime.h":
+
+    ctypedef class datetime.datetime [object PyDateTime_DateTime]:
+        # cdef int *data
+        # cdef long hashcode
+        # cdef char hastzinfo
+        pass
+
+    int PyDateTime_GET_YEAR(datetime o)
+    int PyDateTime_GET_MONTH(datetime o)
+    int PyDateTime_GET_DAY(datetime o)
+    int PyDateTime_DATE_GET_HOUR(datetime o)
+    int PyDateTime_DATE_GET_MINUTE(datetime o)
+    int PyDateTime_DATE_GET_SECOND(datetime o)
+    int PyDateTime_DATE_GET_MICROSECOND(datetime o)
+    int PyDateTime_TIME_GET_HOUR(datetime o)
+    int PyDateTime_TIME_GET_MINUTE(datetime o)
+    int PyDateTime_TIME_GET_SECOND(datetime o)
+    int PyDateTime_TIME_GET_MICROSECOND(datetime o)
+    bint PyDateTime_Check(object o)
+    void PyDateTime_IMPORT()
+
+# import datetime C API
+PyDateTime_IMPORT
+
+# initialize numpy
+import_array()
+
+cdef class Date:
+    cdef:
+        int64_t timestamp
+        object freq
+        object tzinfo
+
+    def __init__(self, int64_t stamp, object freq = None,
+                 object tzinfo = None):
+        self.timestamp = stamp
+        self.freq = <char *>freq
+        self.tzinfo = tzinfo
+
+_unbox_cache = dict()
+def dt_unbox(object key):
+    '''
+    Unbox datetime to datetime64
+    '''
+    cdef int64_t y, M, d, h, m, s, u
+    cdef int64_t val
+
+    # NAT bit pattern
+    val = 0x8000000000000000
+
+    if PyDateTime_Check(key):
+        u = PyDateTime_TIME_GET_MICROSECOND(key)
+        s = PyDateTime_TIME_GET_SECOND(key)
+        m = PyDateTime_TIME_GET_MINUTE(key)
+        h = PyDateTime_TIME_GET_HOUR(key)
+        d = PyDateTime_GET_DAY(key)
+        M = PyDateTime_GET_MONTH(key)
+        y = PyDateTime_GET_YEAR(key)
+        val = y + M + d + h + m + s + u
+
+    return np.datetime64(val)
+
+_box_cache = dict()
+def dt_box(object key):
+    '''
+    Box datetime64 to datetime
+    '''
+    return key.astype('O')
+
diff --git a/pandas/tests/test_datetools.py b/pandas/tests/test_datetools.py
index 3543ba698..d0eb15ec9 100644
--- a/pandas/tests/test_datetools.py
+++ b/pandas/tests/test_datetools.py
@@ -1,11 +1,13 @@
 from datetime import datetime, timedelta
 import unittest
+import numpy as np
 
 from pandas.core.datetools import (
     bday, BDay, BQuarterEnd, BMonthEnd, BYearEnd, MonthEnd,
     DateOffset, Week, YearBegin, YearEnd, Hour, Minute, Second,
     WeekOfMonth, format, ole2datetime, QuarterEnd, to_datetime, normalize_date,
-    getOffset, getOffsetName, inferTimeRule, hasOffsetName)
+    getOffset, getOffsetName, inferTimeRule, hasOffsetName,
+    _dt_box, _dt_unbox)
 
 from nose.tools import assert_raises
 
@@ -37,6 +39,19 @@ def test_normalize_date():
     actual = normalize_date(datetime(2007, 10, 1, 1, 12, 5, 10))
     assert actual == datetime(2007, 10, 1)
 
+def test_datetime64_unbox():
+    valb = datetime(2007,10,1)
+    valu = _dt_unbox(valb)
+    print valu
+    #assert type(valu) == np.datetime64
+    #assert valu == np.datetime64(datetime(2007,10,1))
+
+#def test_datetime64_box():
+#    valu = np.datetime64(datetime(2007,10,1))
+#    valb = _dt_box(valu)
+#    assert type(valb) == datetime
+#    assert valb == datetime(2007,10,1)
+
 #####
 ### DateOffset Tests
 #####
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 09f3ff3f0..cccedd36b 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -14,7 +14,7 @@ from pandas.util import py3compat
 
 import pandas.util.testing as tm
 import pandas._tseries as tseries
-from pandas.core.common import _dt_unbox
+from pandas.core.datetools import _dt_unbox
 
 class TestIndex(unittest.TestCase):
 
diff --git a/setup.py b/setup.py
index b91e8f244..63df8f53d 100755
--- a/setup.py
+++ b/setup.py
@@ -322,6 +322,7 @@ tseries_depends = ['reindex', 'groupby', 'skiplist', 'moments',
                    'generated', 'reduce', 'stats',
                    'inference', 'properties', 'internals',
                    'hashtable', 'join']
+
 def srcpath(name=None, suffix='.pyx', subdir='src'):
     return pjoin('pandas', subdir, name+suffix)
 
@@ -347,19 +348,22 @@ sparse_ext = Extension('pandas._sparse',
 engines_ext = Extension('pandas._engines',
                         depends=['pandas/src/numpy_helper.h'],
                         sources=[srcpath('engines', suffix=suffix)],
-                        pyrex_gdb=True,
                         include_dirs=[np.get_include()])
 
 sandbox_ext = Extension('pandas._sandbox',
                         sources=[srcpath('sandbox', suffix=suffix)],
                         include_dirs=[np.get_include()])
 
+datetime_ext = Extension('pandas._datetime',
+                         sources=[srcpath('datetime', suffix=suffix)],
+                         include_dirs=[np.get_include()])
+
 cppsandbox_ext = Extension('pandas._cppsandbox',
                            language='c++',
                            sources=[srcpath('cppsandbox', suffix=suffix)],
                            include_dirs=[np.get_include()])
 
-extensions = [tseries_ext, engines_ext, sparse_ext]
+extensions = [tseries_ext, engines_ext, sparse_ext, datetime_ext]
 
 if not ISRELEASED:
     extensions.extend([sandbox_ext])
