commit 0555ab8cc65e0c4299f6c905da9b55b2726d7a3a
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Apr 27 17:52:54 2012 -0400

    ENH: joins, setops, alignment for PeriodIndex and objects having one as index, close #1138

diff --git a/pandas/core/format.py b/pandas/core/format.py
index b92edfab9..62dc47e45 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -70,7 +70,7 @@ class SeriesFormatter(object):
             if getattr(self.series.index, 'freq', None):
                 footer += 'Freq: %s' % self.series.index.freqstr
 
-            if footer:
+            if footer and self.series.name:
                 footer += ', '
             footer += ("Name: %s" % str(self.series.name)
                        if self.series.name else '')
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 45605d8f6..70630d480 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -131,6 +131,9 @@ class Index(np.ndarray):
         else:
             return DatetimeIndex(self.values)
 
+    def _assert_can_do_setop(self, other):
+        return True
+
     @property
     def dtype(self):
         return self.values.dtype
@@ -465,6 +468,8 @@ class Index(np.ndarray):
         if len(self) == 0:
             return _ensure_index(other)
 
+        self._assert_can_do_setop(other)
+
         if self.dtype != other.dtype:
             this = self.astype('O')
             other = other.astype('O')
@@ -493,7 +498,10 @@ class Index(np.ndarray):
                     pass
             else:
                 # contained in
-                result = sorted(self)
+                try:
+                    result = np.sort(self.values)
+                except TypeError:
+                    result = self.values
 
         # for subclasses
         return self._wrap_union_result(other, result)
@@ -518,6 +526,8 @@ class Index(np.ndarray):
         if not hasattr(other, '__iter__'):
             raise Exception('Input must be iterable!')
 
+        self._assert_can_do_setop(other)
+
         other = _ensure_index(other)
 
         if self.equals(other):
diff --git a/pandas/tseries/period.py b/pandas/tseries/period.py
index d642e5aac..d7bf6ef4e 100644
--- a/pandas/tseries/period.py
+++ b/pandas/tseries/period.py
@@ -1,3 +1,5 @@
+# pylint: disable=E1101,E1103,W0232
+
 from datetime import datetime
 import numpy as np
 
@@ -727,6 +729,40 @@ class PeriodIndex(Int64Index):
             key = to_period(key, self.freq).ordinal
             return self._engine.get_loc(key)
 
+    def join(self, other, how='left', level=None, return_indexers=False):
+        """
+        See Index.join
+        """
+        self._assert_can_do_setop(other)
+
+        result = Int64Index.join(self, other, how=how, level=level,
+                                 return_indexers=return_indexers)
+
+        if return_indexers:
+            result, lidx, ridx = result
+            return self._apply_meta(result), lidx, ridx
+        else:
+            return self._apply_meta(result)
+
+    def _assert_can_do_setop(self, other):
+        if not isinstance(other, PeriodIndex):
+            raise TypeError('can only call with other PeriodIndex-ed objects')
+
+        if self.freq != other.freq:
+            raise ValueError('Only like-indexed PeriodIndexes compatible '
+                             'for join (for now)')
+
+    def _wrap_union_result(self, other, result):
+        name = self.name if self.name == other.name else None
+        result = self._apply_meta(result)
+        result.name = name
+        return result
+
+    def _apply_meta(self, rawarr):
+        idx = rawarr.view(PeriodIndex)
+        idx.freq = self.freq
+        return idx
+
     def __getitem__(self, key):
         """Override numpy.ndarray's __getitem__ method to work as desired"""
         arr_idx = self.view(np.ndarray)
@@ -784,6 +820,7 @@ class PeriodIndex(Int64Index):
         taken.name = self.name
         return taken
 
+
 def _get_ordinal_range(start, end, periods, freq):
     if com._count_not_none(start, end, periods) < 2:
         raise ValueError('Must specify 2 of start, end, periods')
diff --git a/pandas/tseries/tests/test_period.py b/pandas/tseries/tests/test_period.py
index e098a64b4..95a0f14b8 100644
--- a/pandas/tseries/tests/test_period.py
+++ b/pandas/tseries/tests/test_period.py
@@ -11,7 +11,7 @@ from datetime import datetime, timedelta
 
 from numpy.ma.testutils import assert_equal
 
-from pandas.tseries.period import Period, PeriodIndex
+from pandas.tseries.period import Period, PeriodIndex, period_range
 from pandas.tseries.index import DatetimeIndex, date_range
 from pandas.tseries.tools import to_datetime
 
@@ -20,6 +20,7 @@ import numpy as np
 
 from pandas import Series, TimeSeries, DataFrame
 from pandas.util.testing import assert_series_equal
+import pandas.util.testing as tm
 
 class TestPeriodProperties(TestCase):
     "Test properties such as year, month, weekday, etc...."
@@ -1184,6 +1185,80 @@ class TestPeriodIndex(TestCase):
         self.assert_(isinstance(taken2, PeriodIndex))
         self.assert_(taken2.freq == index.freq)
 
+    def test_joins(self):
+        index = period_range('1/1/2000', '1/20/2000', freq='D')
+
+        for kind in ['inner', 'outer', 'left', 'right']:
+            joined = index.join(index[:-5], how=kind)
+
+            self.assert_(isinstance(joined, PeriodIndex))
+            self.assert_(joined.freq == index.freq)
+
+    def test_align_series(self):
+        rng = period_range('1/1/2000', '1/1/2010', freq='A')
+        ts = Series(np.random.randn(len(rng)), index=rng)
+
+        result = ts + ts[::2]
+        expected = ts + ts
+        expected[1::2] = np.nan
+        assert_series_equal(result, expected)
+
+        result = ts + _permute(ts[::2])
+        assert_series_equal(result, expected)
+
+        # it works!
+        for kind in ['inner', 'outer', 'left', 'right']:
+            ts.align(ts[::2], join=kind)
+
+        self.assertRaises(Exception, ts.__add__,
+                          ts.asfreq('D', how='end'))
+
+    def test_align_frame(self):
+        rng = period_range('1/1/2000', '1/1/2010', freq='A')
+        ts = DataFrame(np.random.randn(len(rng), 3), index=rng)
+
+        result = ts + ts[::2]
+        expected = ts + ts
+        expected.values[1::2] = np.nan
+        tm.assert_frame_equal(result, expected)
+
+        result = ts + _permute(ts[::2])
+        tm.assert_frame_equal(result, expected)
+
+    def test_union(self):
+        index = period_range('1/1/2000', '1/20/2000', freq='D')
+
+        result = index[:-5].union(index[10:])
+        self.assert_(result.equals(index))
+
+        # not in order
+        result = _permute(index[:-5]).union(_permute(index[10:]))
+        self.assert_(result.equals(index))
+
+        # raise if different frequencies
+        index = period_range('1/1/2000', '1/20/2000', freq='D')
+        index2 = period_range('1/1/2000', '1/20/2000', freq='W-WED')
+        self.assertRaises(Exception, index.union, index2)
+
+    def test_intersection(self):
+        index = period_range('1/1/2000', '1/20/2000', freq='D')
+
+        result = index[:-5].intersection(index[10:])
+        self.assert_(result.equals(index[10:-5]))
+
+        # not in order
+        left = _permute(index[:-5])
+        right = _permute(index[10:])
+        result = left.intersection(right).order()
+        self.assert_(result.equals(index[10:-5]))
+
+        # raise if different frequencies
+        index = period_range('1/1/2000', '1/20/2000', freq='D')
+        index2 = period_range('1/1/2000', '1/20/2000', freq='W-WED')
+        self.assertRaises(Exception, index.intersection, index2)
+
+def _permute(obj):
+    return obj.take(np.random.permutation(len(obj)))
 
 class TestMethods(TestCase):
     "Base test class for MaskedArrays."
