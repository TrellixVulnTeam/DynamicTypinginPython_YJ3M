commit 744d27e4e8d8fbc931231e6a271988c13a74dd9d
Author: Gábor Lipták <gliptak@gmail.com>
Date:   Thu Apr 28 20:22:31 2016 -0400

    DOC/TST: Update truncate() documentation and testcases
    
    TST: assert_panel_equal now can use by_blocks for much faster comparisons
    
    closes #13024
    closes #11382

diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 5231fa82c..6c80ab9d8 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -4633,14 +4633,15 @@ class NDFrame(PandasObject):
 
     def truncate(self, before=None, after=None, axis=None, copy=True):
         """Truncates a sorted NDFrame before and/or after some particular
-        dates.
+        index value. If the axis contains only datetime values, before/after
+        parameters are converted to datetime values.
 
         Parameters
         ----------
         before : date
-            Truncate before date
+            Truncate before index value
         after : date
-            Truncate after date
+            Truncate after index value
         axis : the truncation axis, defaults to the stat axis
         copy : boolean, default is True,
             return a copy of the truncated section
diff --git a/pandas/tests/test_generic.py b/pandas/tests/test_generic.py
index 1c2494e7d..ba282f010 100644
--- a/pandas/tests/test_generic.py
+++ b/pandas/tests/test_generic.py
@@ -595,6 +595,23 @@ class Generic(object):
                                lower=lower, upper=upper,
                                axis=bad_axis)
 
+    def test_truncate_out_of_bounds(self):
+        # GH11382
+
+        # small
+        shape = [int(2e3)] + ([1] * (self._ndim - 1))
+        small = self._construct(shape, dtype='int8')
+        self._compare(small.truncate(), small)
+        self._compare(small.truncate(before=0, after=3e3), small)
+        self._compare(small.truncate(before=-1, after=2e3), small)
+
+        # big
+        shape = [int(2e6)] + ([1] * (self._ndim - 1))
+        big = self._construct(shape, dtype='int8')
+        self._compare(big.truncate(), big)
+        self._compare(big.truncate(before=0, after=3e6), big)
+        self._compare(big.truncate(before=-1, after=2e6), big)
+
     def test_numpy_clip(self):
         lower = 1
         upper = 3
@@ -1412,7 +1429,7 @@ class TestDataFrame(tm.TestCase, Generic):
 
 class TestPanel(tm.TestCase, Generic):
     _typ = Panel
-    _comparator = lambda self, x, y: assert_panel_equal(x, y)
+    _comparator = lambda self, x, y: assert_panel_equal(x, y, by_blocks=True)
 
     def test_to_xarray(self):
 
@@ -1434,7 +1451,7 @@ class TestPanel(tm.TestCase, Generic):
 
 class TestPanel4D(tm.TestCase, Generic):
     _typ = Panel4D
-    _comparator = lambda self, x, y: assert_panel4d_equal(x, y)
+    _comparator = lambda self, x, y: assert_panel4d_equal(x, y, by_blocks=True)
 
     def test_sample(self):
         raise nose.SkipTest("sample on Panel4D")
diff --git a/pandas/tests/test_panel4d.py b/pandas/tests/test_panel4d.py
index 40447fffd..e3e906d48 100644
--- a/pandas/tests/test_panel4d.py
+++ b/pandas/tests/test_panel4d.py
@@ -426,7 +426,7 @@ class CheckIndexing(object):
         p1 = tm.makePanel4D()
         p2 = tm.makePanel4D()
 
-        tp = p1.reindex(labels=p1.labels + ['foo'])
+        tp = p1.reindex(labels=p1.labels.tolist() + ['foo'])
         p = p1[p1.labels[0]]
 
         def test_comp(func):
diff --git a/pandas/tseries/tests/test_plotting.py b/pandas/tseries/tests/test_plotting.py
index 4a06a5500..ac284e199 100644
--- a/pandas/tseries/tests/test_plotting.py
+++ b/pandas/tseries/tests/test_plotting.py
@@ -1185,7 +1185,7 @@ class TestTSPlot(tm.TestCase):
 
         ax = ts.plot()
         left_before, right_before = ax.get_xlim()
-        ts.resample('D').plot(secondary_y=True, ax=ax)
+        ts.resample('D').mean().plot(secondary_y=True, ax=ax)
         left_after, right_after = ax.get_xlim()
 
         # a downsample should not have changed either limit
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index eb1d5c6c2..49887adc8 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -1167,26 +1167,59 @@ def assert_frame_equal(left, right, check_dtype=True,
 
 
 def assert_panelnd_equal(left, right,
+                         check_dtype=True,
                          check_panel_type=False,
                          check_less_precise=False,
                          assert_func=assert_frame_equal,
-                         check_names=False):
+                         check_names=False,
+                         by_blocks=False):
+    """Check that left and right Panels are equal.
+
+    Parameters
+    ----------
+    left : Panel (or nd)
+    right : Panel (or nd)
+    check_dtype : bool, default True
+        Whether to check the Panel dtype is identical.
+    check_panel_type : bool, default False
+        Whether to check the Panel class is identical.
+    check_less_precise : bool, default False
+        Specify comparison precision. Only used when check_exact is False.
+        5 digits (False) or 3 digits (True) after decimal points are compared.
+    assert_func : function for comparing data
+    check_names : bool, default True
+        Whether to check the Index names attribute.
+    by_blocks : bool, default False
+        Specify how to compare internal data. If False, compare by columns.
+        If True, compare by blocks.
+    """
+
     if check_panel_type:
         assertIsInstance(left, type(right))
 
-    for axis in ['items', 'major_axis', 'minor_axis']:
+    for axis in left._AXIS_ORDERS:
         left_ind = getattr(left, axis)
         right_ind = getattr(right, axis)
         assert_index_equal(left_ind, right_ind, check_names=check_names)
 
-    for i, item in enumerate(left._get_axis(0)):
-        assert item in right, "non-matching item (right) '%s'" % item
-        litem = left.iloc[i]
-        ritem = right.iloc[i]
-        assert_func(litem, ritem, check_less_precise=check_less_precise)
+    if by_blocks:
+        rblocks = right.blocks
+        lblocks = left.blocks
+        for dtype in list(set(list(lblocks.keys()) + list(rblocks.keys()))):
+            assert dtype in lblocks
+            assert dtype in rblocks
+            array_equivalent(lblocks[dtype].values, rblocks[dtype].values)
+    else:
+
+        # can potentially be slow
+        for i, item in enumerate(left._get_axis(0)):
+            assert item in right, "non-matching item (right) '%s'" % item
+            litem = left.iloc[i]
+            ritem = right.iloc[i]
+            assert_func(litem, ritem, check_less_precise=check_less_precise)
 
-    for i, item in enumerate(right._get_axis(0)):
-        assert item in left, "non-matching item (left) '%s'" % item
+        for i, item in enumerate(right._get_axis(0)):
+            assert item in left, "non-matching item (left) '%s'" % item
 
 # TODO: strangely check_names fails in py3 ?
 _panel_frame_equal = partial(assert_frame_equal, check_names=False)
