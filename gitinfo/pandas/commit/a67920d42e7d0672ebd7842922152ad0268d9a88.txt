commit a67920d42e7d0672ebd7842922152ad0268d9a88
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat May 19 22:56:50 2012 -0400

    BUG: fix resampling buglet and weekly period ordinals, close #1259

diff --git a/pandas/src/groupby.pyx b/pandas/src/groupby.pyx
index 78c3b0ff3..7bb22393c 100644
--- a/pandas/src/groupby.pyx
+++ b/pandas/src/groupby.pyx
@@ -1106,8 +1106,8 @@ def group_ohlc(ndarray[float64_t, ndim=2] out,
             out[b, 3] = vclose
 
 
-@cython.boundscheck(False)
-@cython.wraparound(False)
+# @cython.boundscheck(False)
+# @cython.wraparound(False)
 def group_mean_bin(ndarray[float64_t, ndim=2] out,
                    ndarray[int64_t] counts,
                    ndarray[float64_t, ndim=2] values,
diff --git a/pandas/src/period.c b/pandas/src/period.c
index 447a183c1..d46fdde86 100644
--- a/pandas/src/period.c
+++ b/pandas/src/period.c
@@ -1069,9 +1069,8 @@ npy_int64 get_period_ordinal(int year, int month, int day,
         {
             goto onError;
         }
-        day_adj = (7 - (freq - FR_WK)) % 7;
-        adj_ordinal = ordinal + ((7 - day_adj) - ordinal % 7) % 7;
-        return adj_ordinal / 7 - WEEK_OFFSET;
+        day_adj = freq - FR_WK;
+        return (ordinal - (1 + day_adj)) / 7 + 1 - WEEK_OFFSET;
     }
 
     if (freq == FR_MTH)
diff --git a/pandas/tseries/resample.py b/pandas/tseries/resample.py
index f1109dd52..65bce58ea 100644
--- a/pandas/tseries/resample.py
+++ b/pandas/tseries/resample.py
@@ -6,7 +6,7 @@ from pandas.core.groupby import BinGrouper, CustomGrouper
 from pandas.tseries.frequencies import to_offset, is_subperiod, is_superperiod
 from pandas.tseries.index import DatetimeIndex, date_range
 from pandas.tseries.offsets import DateOffset
-from pandas.tseries.period import PeriodIndex, period_range
+from pandas.tseries.period import Period, PeriodIndex, period_range
 from pandas.util.decorators import cache_readonly
 import pandas.core.common as com
 
@@ -118,9 +118,21 @@ class TimeGrouper(CustomGrouper):
         return binner, bins, labels
 
     def _get_time_period_bins(self, axis):
-        return _make_period_bins(axis, self.freq, begin=self.begin,
-                                 end=self.end, closed=self.closed,
-                                 label=self.label)
+        assert(isinstance(axis, DatetimeIndex))
+
+        if len(axis) == 0:
+            # TODO: Should we be a bit more careful here?
+            return [], [], []
+        labels = binner = PeriodIndex(start=axis[0], end=axis[-1],
+                                      freq=self.freq)
+
+        end_stamps = (labels + 1).asfreq('D', 's').to_timestamp()
+        bins = axis.searchsorted(end_stamps, side='left')
+
+        if bins[-1] < len(axis):
+            bins = np.concatenate([bins, [len(axis)]])
+
+        return binner, bins, labels
 
     def _resample_timestamps(self, obj):
         axlabels = obj._get_axis(self.axis)
@@ -204,36 +216,6 @@ def _take_new_index(obj, indexer, new_index, axis=0):
         raise NotImplementedError
 
 
-def _make_period_bins(axis, freq, begin=None, end=None,
-                    closed='right', label='right'):
-    assert(isinstance(axis, DatetimeIndex))
-
-    if len(axis) == 0:
-        # TODO: Should we be a bit more careful here?
-        return [], [], []
-
-    first, last = _get_range_edges(axis, begin, end, freq, closed=closed)
-    binlabels = binner = PeriodIndex(start=first, end=last, freq=freq)
-
-    # a little hack
-    trimmed = False
-    if len(binner) > 2 and binner[-2] == axis[-1]:
-        binner = binner[:-1]
-        trimmed = True
-
-    end_stamps = (binlabels + 1).asfreq('D', 's').to_timestamp()
-    bins = axis.searchsorted(end_stamps, side='left')
-
-    if label == 'right':
-        bins = bins[1:]
-        labels = binner[1:]
-    elif not trimmed:
-        labels = binner[:-1]
-    else:
-        labels = binner
-
-    return binner, bins, labels
-
 
 def _get_range_edges(axis, begin, end, offset, closed='left',
                      base=0):
diff --git a/pandas/tseries/tests/test_period.py b/pandas/tseries/tests/test_period.py
index 1e897eb73..794618d52 100644
--- a/pandas/tseries/tests/test_period.py
+++ b/pandas/tseries/tests/test_period.py
@@ -50,6 +50,16 @@ class TestPeriodProperties(TestCase):
             p = Period(stamp, freq=freq)
             self.assertEquals(p, exp + 1)
 
+    def test_period_cons_weekly(self):
+        for num in range(10, 17):
+            daystr = '2011-02-%d' % num
+            for day in DAYS:
+                freq = 'W-%s' % day
+
+                result = Period(daystr, freq=freq)
+                expected = Period(daystr, freq='D').asfreq(freq)
+                self.assertEquals(result, expected)
+
     def test_period_constructor(self):
         i1 = Period('1/1/2005', freq='M')
         i2 = Period('Jan 2005')
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index ce568f5a9..0e322e9e9 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -381,6 +381,16 @@ class TestResample(unittest.TestCase):
         expected = ts.resample('D', closed='left', label='left')
         assert_series_equal(result, expected)
 
+    def test_resample_to_period_monthly_buglet(self):
+        # GH #1259
+
+        rng = date_range('1/1/2000','12/31/2000')
+        ts = Series(np.random.randn(len(rng)), index=rng)
+
+        result = ts.resample('M', kind='period')
+        exp_index = period_range('Jan-2000', 'Dec-2000', freq='M')
+        self.assert_(result.index.equals(exp_index))
+
 
 def _simple_ts(start, end, freq='D'):
     rng = date_range(start, end, freq=freq)
@@ -544,7 +554,6 @@ class TestResamplePeriodIndex(unittest.TestCase):
         expected = ts.to_timestamp().resample('5min')
         assert_series_equal(result, expected)
 
-
 class TestTimeGrouper(unittest.TestCase):
 
     def setUp(self):
