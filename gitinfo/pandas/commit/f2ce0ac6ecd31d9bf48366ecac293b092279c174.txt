commit f2ce0ac6ecd31d9bf48366ecac293b092279c174
Author: Gábor Lipták <gliptak@gmail.com>
Date:   Thu May 26 08:36:24 2016 -0400

    ERR: error in datetime conversion with non-convertibles
    
    closes #11853
    
    Author: Gábor Lipták <gliptak@gmail.com>
    
    Closes #13176 from gliptak/dtbool1 and squashes the following commits:
    
    5179d1d [Gábor Lipták] Bug in pd.to_datetime when passing bools; will now respect the errors value

diff --git a/doc/source/whatsnew/v0.18.2.txt b/doc/source/whatsnew/v0.18.2.txt
index 004e2dcc2..d7918152a 100644
--- a/doc/source/whatsnew/v0.18.2.txt
+++ b/doc/source/whatsnew/v0.18.2.txt
@@ -245,6 +245,7 @@ Bug Fixes
 - Bug in ``Series`` arithmetic raises ``TypeError`` if it contains datetime-like as ``object`` dtype (:issue:`13043`)
 
 
+- Bug in ``pd.to_datetime()`` when passing invalid datatypes (e.g. bool); will now respect the ``errors`` keyword (:issue:`13176`)
 
 - Bug in ``NaT`` - ``Period`` raises ``AttributeError`` (:issue:`13071`)
 - Bug in ``Period`` addition raises ``TypeError`` if ``Period`` is on right hand side (:issue:`13069`)
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 50cf38be6..1564c0a81 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -2292,6 +2292,33 @@ class TestToDatetime(tm.TestCase):
                                     dtype='datetime64[ns, UTC]')
         tm.assert_index_equal(result, expected)
 
+    def test_datetime_bool(self):
+        # GH13176
+        with self.assertRaises(TypeError):
+            to_datetime(False)
+        self.assertTrue(to_datetime(False, errors="coerce") is tslib.NaT)
+        self.assertEqual(to_datetime(False, errors="ignore"), False)
+        with self.assertRaises(TypeError):
+            to_datetime(True)
+        self.assertTrue(to_datetime(True, errors="coerce") is tslib.NaT)
+        self.assertEqual(to_datetime(True, errors="ignore"), True)
+        with self.assertRaises(TypeError):
+            to_datetime([False, datetime.today()])
+        with self.assertRaises(TypeError):
+            to_datetime(['20130101', True])
+        tm.assert_index_equal(to_datetime([0, False, tslib.NaT, 0.0],
+                                          errors="coerce"),
+                              DatetimeIndex([to_datetime(0), tslib.NaT,
+                                             tslib.NaT, to_datetime(0)]))
+
+    def test_datetime_invalid_datatype(self):
+        # GH13176
+
+        with self.assertRaises(TypeError):
+            pd.to_datetime(bool)
+        with self.assertRaises(TypeError):
+            pd.to_datetime(pd.to_datetime)
+
     def test_unit(self):
         # GH 11758
         # test proper behavior with erros
diff --git a/pandas/tslib.pyx b/pandas/tslib.pyx
index f5301d374..b3fb4989b 100644
--- a/pandas/tslib.pyx
+++ b/pandas/tslib.pyx
@@ -2220,8 +2220,10 @@ cpdef array_to_datetime(ndarray[object] values, errors='raise',
         iresult = result.view('i8')
         for i in range(n):
             val = values[i]
+
             if _checknull_with_nat(val):
                 iresult[i] = NPY_NAT
+
             elif PyDateTime_Check(val):
                 seen_datetime=1
                 if val.tzinfo is not None:
@@ -2250,6 +2252,7 @@ cpdef array_to_datetime(ndarray[object] values, errors='raise',
                             iresult[i] = NPY_NAT
                             continue
                         raise
+
             elif PyDate_Check(val):
                 iresult[i] = _date_to_datetime64(val, &dts)
                 try:
@@ -2260,6 +2263,7 @@ cpdef array_to_datetime(ndarray[object] values, errors='raise',
                         iresult[i] = NPY_NAT
                         continue
                     raise
+
             elif util.is_datetime64_object(val):
                 if get_datetime64_value(val) == NPY_NAT:
                     iresult[i] = NPY_NAT
@@ -2273,8 +2277,8 @@ cpdef array_to_datetime(ndarray[object] values, errors='raise',
                             continue
                         raise
 
-            # these must be ns unit by-definition
             elif is_integer_object(val) or is_float_object(val):
+                # these must be ns unit by-definition
 
                 if val != val or val == NPY_NAT:
                     iresult[i] = NPY_NAT
@@ -2292,7 +2296,10 @@ cpdef array_to_datetime(ndarray[object] values, errors='raise',
                         iresult[i] = cast_from_unit(val, 'ns')
                     except:
                         iresult[i] = NPY_NAT
-            else:
+
+            elif util.is_string_object(val):
+                # string
+
                 try:
                     if len(val) == 0 or val in _nat_strings:
                         iresult[i] = NPY_NAT
@@ -2340,6 +2347,12 @@ cpdef array_to_datetime(ndarray[object] values, errors='raise',
                         iresult[i] = NPY_NAT
                         continue
                     raise
+            else:
+                if is_coerce:
+                    iresult[i] = NPY_NAT
+                else:
+                    raise TypeError("{0} is not convertible to datetime"
+                                    .format(type(val)))
 
         if  seen_datetime and seen_integer:
             # we have mixed datetimes & integers
