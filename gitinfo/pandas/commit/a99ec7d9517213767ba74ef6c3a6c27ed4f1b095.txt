commit a99ec7d9517213767ba74ef6c3a6c27ed4f1b095
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Mar 22 16:01:17 2011 -0400

    tweaked toString output for DataFrame and DataMatrix

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 48dadce41..03d4de5a0 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -81,11 +81,13 @@ def _pfixed(s, space, nanRep=None, float_format=None):
         if float_format:
             formatted = float_format(s)
         else:
-            formatted = '%.4g' % s
+            is_pos = s >= 0
+            formatted = '%.4g' % np.abs(s)
 
-            if formatted[0] != '-':
+            if is_pos:
                 formatted = ' ' + formatted
-
+            else:
+                formatted = '-' + formatted
         return formatted.ljust(space)
     else:
         return ('%s' % s)[:space].ljust(space)
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index b3ef82d7c..53305fed8 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -758,7 +758,7 @@ class DataFrame(Picklable, Groupable):
         from pandas.core.matrix import DataMatrix
         return DataMatrix(self._series, index=self.index)
 
-    def toString(self, buffer=sys.stdout, columns=None, colSpace=15,
+    def toString(self, buffer=sys.stdout, columns=None, colSpace=None,
                  nanRep='NaN', formatters=None, float_format=None):
         """Output a tab-separated version of this DataFrame"""
         series = self._series
@@ -770,6 +770,18 @@ class DataFrame(Picklable, Groupable):
         formatters = formatters or {}
         ident = lambda x: x
 
+        if colSpace is None:
+            colSpace = {}
+
+            for c in columns:
+                if np.issctype(self[c].dtype):
+                    colSpace[c] = max(len(str(c)) + 4, 12)
+                else:
+                    # hack
+                    colSpace[c] = 15
+        else:
+            colSpace = dict((k, 15) for k in columns)
+
         if len(columns) == 0 or len(self.index) == 0:
             print >> buffer, 'Empty DataFrame'
             print >> buffer, repr(self.index)
@@ -778,16 +790,17 @@ class DataFrame(Picklable, Groupable):
             head = _pfixed('', idxSpace)
 
             for h in columns:
-                head += _pfixed(h, colSpace)
+                head += _pfixed(h, colSpace[h])
 
             print >> buffer, head
 
             for idx in self.index:
-                ot = _pfixed(idx, idxSpace)
+
+                ot = _pfixed(idx, idxSpace - 1)
                 for k in columns:
                     formatter = formatters.get(k, ident)
                     ot += _pfixed(formatter(series[k][idx]),
-                                  colSpace, nanRep=nanRep,
+                                  colSpace[k], nanRep=nanRep,
                                   float_format=float_format)
                 print >> buffer, ot
 
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index 01364def4..2f927599a 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -704,7 +704,7 @@ class DataMatrix(DataFrame):
 #-------------------------------------------------------------------------------
 # Outputting
 
-    def toString(self, buffer=sys.stdout, columns=None, colSpace=15,
+    def toString(self, buffer=sys.stdout, columns=None, colSpace=None,
                  nanRep='NaN', formatters=None, float_format=None):
         """
         Output a string version of this DataMatrix
@@ -727,20 +727,32 @@ class DataMatrix(DataFrame):
 
         idxSpace = max([len(str(idx)) for idx in self.index]) + 4
 
+        if colSpace is None:
+            colSpace = {}
+
+            for c in columns:
+                if np.issctype(self[c].dtype):
+                    colSpace[c] = max(len(str(c)) + 4, 12)
+                else:
+                    # hack
+                    colSpace[c] = 15
+        else:
+            colSpace = dict((k, 15) for k in columns)
+
         if len(self.cols()) == 0:
             buffer.write('DataMatrix is empty!\n')
             buffer.write(repr(self.index))
         else:
             buffer.write(_pf('', idxSpace))
             for h in columns:
-                buffer.write(_pf(h, colSpace))
+                buffer.write(_pf(h, colSpace[h]))
             buffer.write('\n')
 
             for i, idx in enumerate(self.index):
-                buffer.write(_pf(idx, idxSpace))
+                buffer.write(_pf(idx, idxSpace - 1))
                 for j, col in enumerate(columns):
                     formatter = formatters.get(col, ident)
-                    buffer.write(_pf(formatter(values[i, j]), colSpace,
+                    buffer.write(_pf(formatter(values[i, j]), colSpace[col],
                                      float_format=float_format,
                                      nanRep=nanRep))
                 buffer.write('\n')
