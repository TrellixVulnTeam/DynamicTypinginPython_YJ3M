commit 0bcc0a41641b73e876af401bcf2feae7a65bd628
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jul 28 20:51:38 2011 -0400

    ENH: removed LongPanelIndex in favor of the generic multilevel, patched up code and unit tests

diff --git a/pandas/core/index.py b/pandas/core/index.py
index f7a7bd802..dfedc8043 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -136,6 +136,9 @@ class Index(np.ndarray):
                     raise e1
 
     def format(self):
+        """
+        Render a string representation of the Index
+        """
         from datetime import time
 
         if self.is_all_dates():
@@ -438,9 +441,10 @@ class MultiLevelIndex(Index):
 
         padded_levels = []
         for lab, lev in zip(self.labels, stringified_levels):
-            maxlen = max(len(x) for x in lev)
-            padded = [x.ljust(maxlen) for x in lev]
-            padded = np.array(padded, dtype=object).take(lab)
+            # maxlen = max(len(x) for x in lev)
+            # adjoin does this automatically
+            # padded = [x.ljust(maxlen) for x in lev]
+            padded = np.array(lev, dtype=object).take(lab)
             padded_levels.append(padded)
 
         return adjoin(2, *padded_levels)
@@ -511,42 +515,10 @@ class MultiLevelIndex(Index):
 
         return beg_slice, end_slice
 
-class LongPanelIndex(MultiLevelIndex):
-    """
-    Holds axis indexing information for a LongPanel instance
-
-    Parameters
-    ----------
-    major_axis : Index-like
-    minor_axis : Index-like
-    major_labels : ndarray
-    minor_labels : ndarray
-    mask : ndarray (bool), optional
-        observation selection vector using major and minor labels, for
-        converting to wide format.
-    """
-
-    @property
-    def major_axis(self):
-        return self.levels[0]
-
-    @property
-    def minor_axis(self):
-        return self.levels[1]
-
-
-    @property
-    def major_labels(self):
-        return self.labels[0]
-
-    @property
-    def minor_labels(self):
-        return self.labels[1]
-
     def truncate(self, before=None, after=None):
         """
         Slice index between two major axis values, return new
-        LongPanelIndex
+        MultiLevelIndex
 
         Parameters
         ----------
@@ -558,15 +530,18 @@ class LongPanelIndex(MultiLevelIndex):
 
         Returns
         -------
-        LongPanelIndex
+        MultiLevelIndex
         """
         i, j = self._get_axis_bounds(before, after)
         left, right = self._get_label_bounds(i, j)
 
-        return LongPanelIndex([self.major_axis[i : j],
-                               self.minor_axis],
-                              [self.major_labels[left : right] - i,
-                               self.minor_labels[left : right]])
+        new_levels = list(self.levels)
+        new_levels[0] = new_levels[0][i:j]
+
+        new_labels = [lab[left:right] for lab in self.labels]
+        new_labels[0] = new_labels[0] - i
+
+        return MultiLevelIndex(levels=new_levels, labels=new_labels)
 
     def get_major_bounds(self, begin=None, end=None):
         """
@@ -593,20 +568,20 @@ class LongPanelIndex(MultiLevelIndex):
         Return major axis locations corresponding to interval values
         """
         if begin is not None:
-            i = self.major_axis.indexMap.get(begin)
+            i = self.levels[0].indexMap.get(begin)
             if i is None:
-                i = self.major_axis.searchsorted(begin, side='right')
+                i = self.levels[0].searchsorted(begin, side='right')
         else:
             i = 0
 
         if end is not None:
-            j = self.major_axis.indexMap.get(end)
+            j = self.levels[0].indexMap.get(end)
             if j is None:
-                j = self.major_axis.searchsorted(end)
+                j = self.levels[0].searchsorted(end)
             else:
                 j = j + 1
         else:
-            j = len(self.major_axis)
+            j = len(self.levels[0])
 
         if i > j:
             raise ValueError('Must have begin <= end!')
@@ -618,8 +593,8 @@ class LongPanelIndex(MultiLevelIndex):
 
         left = self._bounds[i]
 
-        if j >= len(self.major_axis):
-            right = len(self.major_labels)
+        if j >= len(self.levels[0]):
+            right = len(self.labels[0])
         else:
             right = self._bounds[j]
 
@@ -630,37 +605,11 @@ class LongPanelIndex(MultiLevelIndex):
     def _bounds(self):
         "Return or compute and return slice points for major axis"
         if self.__bounds is None:
-            inds = np.arange(len(self.major_axis))
-            self.__bounds = self.major_labels.searchsorted(inds)
+            inds = np.arange(len(self.levels[0]))
+            self.__bounds = self.labels[0].searchsorted(inds)
 
         return self.__bounds
 
-    @property
-    def mask(self):
-        return self._make_mask()
-        # if self._mask is None:
-        #     self._mask = self._make_mask()
-
-        # return self._mask
-
-    def _make_mask(self):
-        """
-        Create observation selection vector using major and minor
-        labels, for converting to wide format.
-        """
-        N, K = self.levshape
-        selector = self.minor_labels + K * self.major_labels
-
-        mask = np.zeros(N * K, dtype=bool)
-        mask[selector] = True
-
-        return mask
-
-    # @property
-    # def shape(self):
-    #     return len(self.major_axis), len(self.minor_axis)
-
-
 # For utility purposes
 
 NULL_INDEX = Index([])
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index d6e6bd24b..77e062aa4 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -12,7 +12,7 @@ import numpy as np
 
 from pandas.core.common import (PandasError, _mut_exclusive, _ensure_index,
                                 _pfixed, _default_index, _infer_dtype)
-from pandas.core.index import Index, Factor, LongPanelIndex
+from pandas.core.index import Index, Factor, MultiLevelIndex
 from pandas.core.internals import BlockManager, make_block
 from pandas.core.frame import DataFrame
 from pandas.core.generic import AxisProperty, NDFrame, Picklable
@@ -670,11 +670,10 @@ class WidePanel(Panel, NDFrame):
         else:
             mask = None
 
-        index = LongPanelIndex(levels=[self.major_axis,
-                                       self.minor_axis],
-                               labels=[major_labels,
-                                       minor_labels])
-                               # mask=mask)
+        index = MultiLevelIndex(levels=[self.major_axis,
+                                        self.minor_axis],
+                                labels=[major_labels,
+                                        minor_labels])
 
         return LongPanel(values, index=index, columns=self.items)
 
@@ -963,13 +962,13 @@ class LongPanel(Panel, DataFrame):
     ----------
     values : ndarray (N x K)
     items : sequence
-    index : LongPanelIndex
+    index : MultiLevelIndex
 
     Note
     ----
     Constructor should probably not be called directly since it
     requires creating the major and minor axis label vectors for for
-    the LongPanelIndex
+    the MultiLevelIndex
     """
 
     @property
@@ -1054,14 +1053,14 @@ class LongPanel(Panel, DataFrame):
         items = sorted(data)
         values = np.array([data[k] for k in items]).T
 
-        index = LongPanelIndex([major_axis, minor_axis],
-                               [major_labels, minor_labels])
+        index = MultiLevelIndex(levels=[major_axis, minor_axis],
+                                labels=[major_labels, minor_labels])
 
         return LongPanel(values, index=index, columns=items)
 
     def toRecords(self):
-        major = np.asarray(self.major_axis).take(self.index.major_labels)
-        minor = np.asarray(self.minor_axis).take(self.index.minor_labels)
+        major = np.asarray(self.major_axis).take(self.major_labels)
+        minor = np.asarray(self.minor_axis).take(self.minor_labels)
 
         arrays = [major, minor] + list(self.values[:, i]
                                        for i in range(len(self.items)))
@@ -1083,11 +1082,19 @@ class LongPanel(Panel, DataFrame):
 
     @property
     def major_axis(self):
-        return self.index.major_axis
+        return self.index.levels[0]
 
     @property
     def minor_axis(self):
-        return self.index.minor_axis
+        return self.index.levels[1]
+
+    @property
+    def major_labels(self):
+        return self.index.labels[0]
+
+    @property
+    def minor_labels(self):
+        return self.index.labels[1]
 
     # def _get_values(self):
     #     return self._values
@@ -1208,21 +1215,21 @@ class LongPanel(Panel, DataFrame):
         LongPanel (in sorted order)
         """
         if axis == 'major':
-            first = self.index.major_labels
-            second = self.index.minor_labels
+            first = self.major_labels
+            second = self.minor_labels
 
         elif axis == 'minor':
-            first = self.index.minor_labels
-            second = self.index.major_labels
+            first = self.minor_labels
+            second = self.major_labels
 
         # Lexsort starts from END
         indexer = np.lexsort((second, first))
 
-        new_major = self.index.major_labels.take(indexer)
-        new_minor = self.index.minor_labels.take(indexer)
+        new_major = self.major_labels.take(indexer)
+        new_minor = self.minor_labels.take(indexer)
         new_values = self.values.take(indexer, axis=0)
 
-        new_index = LongPanelIndex([self.major_axis, self.minor_axis],
+        new_index = MultiLevelIndex([self.major_axis, self.minor_axis],
                                     [new_major, new_minor])
 
         return LongPanel(new_values, columns=self.items,
@@ -1240,7 +1247,7 @@ class LongPanel(Panel, DataFrame):
 
         values = np.empty((I, N, K), dtype=self.values.dtype)
 
-        mask = self.index.mask
+        mask = make_mask(self.index)
         notmask = -mask
 
         for i in xrange(len(self.items)):
@@ -1286,15 +1293,14 @@ class LongPanel(Panel, DataFrame):
 
     #     self._textConvert(buf, format_cols, format_row)
 
-    # def _textConvert(self, buf, format_cols, format_row):
-    #     print >> buf, format_cols(self.items)
+    def _textConvert(self, buf, format_cols, format_row):
+        print >> buf, format_cols(self.items)
 
-    #     label_pairs = zip(self.index.major_labels,
-    #                       self.index.minor_labels)
-    #     major, minor = self.major_axis, self.minor_axis
-    #     for i, (major_i, minor_i) in enumerate(label_pairs):
-    #         row = format_row(major[major_i], minor[minor_i], self.values[i])
-    #         print >> buf, row
+        label_pairs = zip(self.major_axis.take(self.major_labels),
+                          self.minor_axis.take(self.minor_labels))
+        for i, (major, minor) in enumerate(label_pairs):
+            row = format_row(major, minor, self.values[i])
+            print >> buf, row
 
     def swapaxes(self):
         """
@@ -1308,18 +1314,17 @@ class LongPanel(Panel, DataFrame):
         # Order everything by minor labels. Have to use mergesort
         # because NumPy quicksort is not stable. Here of course I'm
         # using the property that the major labels are ordered.
-        indexer = self.index.minor_labels.argsort(kind='mergesort')
+        indexer = self.minor_labels.argsort(kind='mergesort')
 
-        new_major = self.index.minor_labels.take(indexer)
-        new_minor = self.index.major_labels.take(indexer)
+        new_major = self.minor_labels.take(indexer)
+        new_minor = self.major_labels.take(indexer)
 
         new_values = self.values.take(indexer, axis=0)
 
-        new_index = LongPanelIndex([self.minor_axis,
-                                    self.major_axis],
-                                   [new_major,
-                                    new_minor])
-                                   # mask=self.index.mask)
+        new_index = MultiLevelIndex([self.minor_axis,
+                                     self.major_axis],
+                                    [new_major,
+                                     new_minor])
 
         return LongPanel(new_values, columns=self.items,
                          index=new_index)
@@ -1389,11 +1394,11 @@ class LongPanel(Panel, DataFrame):
         if axis == 'minor':
             dim = len(self.minor_axis)
             items = self.minor_axis
-            labels = self.index.minor_labels
+            labels = self.minor_labels
         elif axis == 'major':
             dim = len(self.major_axis)
             items = self.major_axis
-            labels = self.index.major_labels
+            labels = self.major_labels
         else: # pragma: no cover
             raise ValueError('Do not recognize axis %s' % axis)
 
@@ -1748,6 +1753,18 @@ def pivot(index, columns, values):
     except Exception:
         return _slow_pivot(index, columns, values)
 
+
+def make_mask(index):
+    """
+    Create observation selection vector using major and minor
+    labels, for converting to wide format.
+    """
+    N, K = index.levshape
+    selector = index.labels[1] + K * index.labels[0]
+    mask = np.zeros(N * K, dtype=bool)
+    mask.put(selector, True)
+    return mask
+
 def _make_long_index(major_values, minor_values):
     major_axis = Index(sorted(set(major_values)))
     minor_axis = Index(sorted(set(minor_values)))
@@ -1755,8 +1772,8 @@ def _make_long_index(major_values, minor_values):
     major_labels, _ = _tseries.getMergeVec(major_values, major_axis.indexMap)
     minor_labels, _ = _tseries.getMergeVec(minor_values, minor_axis.indexMap)
 
-    long_index = LongPanelIndex(levels=[major_axis, minor_axis],
-                                labels=[major_labels, minor_labels])
+    long_index = MultiLevelIndex(levels=[major_axis, minor_axis],
+                                 labels=[major_labels, minor_labels])
     return long_index
 
 def _slow_pivot(index, columns, values):
diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index 2ce86128f..a51928e0b 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -12,12 +12,11 @@ import operator
 
 from pandas.core.common import (isnull, notnull, _pickle_array, _unpickle_array,
                                 _mut_exclusive, _ensure_index, _try_sort)
-from pandas.core.index import Index, NULL_INDEX
+from pandas.core.index import Index, MultiLevelIndex, NULL_INDEX
 from pandas.core.series import Series, TimeSeries
 from pandas.core.frame import (DataFrame, extract_index, _prep_ndarray,
                                _default_index, _union_indices)
-from pandas.core.panel import (Panel, WidePanel, LongPanelIndex, LongPanel,
-                               PanelAxis)
+from pandas.core.panel import Panel, WidePanel, LongPanel, PanelAxis
 import pandas.core.common as common
 import pandas.core.datetools as datetools
 
@@ -1174,8 +1173,8 @@ def stack_sparse_frame(frame):
 
     major_labels = np.concatenate(inds_to_concat)
     stacked_values = np.concatenate(vals_to_concat)
-    index = LongPanelIndex(levels=[frame.index, frame.columns],
-                           labels=[major_labels, minor_labels])
+    index = MultiLevelIndex(levels=[frame.index, frame.columns],
+                            labels=[major_labels, minor_labels])
 
     lp = LongPanel(stacked_values.reshape((nobs, 1)), index=index,
                    columns=['foo'])
@@ -1424,8 +1423,8 @@ class SparseWidePanel(WidePanel):
         major_labels = inds % N
         minor_labels = inds // N
 
-        index = LongPanelIndex(levels=[self.major_axis, self.minor_axis],
-                               labels=[major_labels, minor_labels])
+        index = MultiLevelIndex(levels=[self.major_axis, self.minor_axis],
+                                labels=[major_labels, minor_labels])
 
         lp = LongPanel(values, index=index, columns=self.items)
         return lp.sort('major')
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index b77e30939..306d50ac5 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -401,15 +401,15 @@ class HDFStore(object):
         return self._read_panel_table(group, where)
 
     def _write_long(self, group, panel, append=False):
-        self._write_index(group, 'major_axis', panel.index.major_axis)
-        self._write_index(group, 'minor_axis', panel.index.minor_axis)
+        self._write_index(group, 'major_axis', panel.major_axis)
+        self._write_index(group, 'minor_axis', panel.minor_axis)
         self._write_index(group, 'items', panel.items)
-        self._write_array(group, 'major_labels', panel.index.major_labels)
-        self._write_array(group, 'minor_labels', panel.index.minor_labels)
+        self._write_array(group, 'major_labels', panel.major_labels)
+        self._write_array(group, 'minor_labels', panel.minor_labels)
         self._write_array(group, 'values', panel.values)
 
     def _read_long(self, group, where=None):
-        from pandas.core.panel import LongPanelIndex
+        from pandas.core.index import MultiLevelIndex
 
         items = _read_index(group, 'items')
         major_axis = _read_index(group, 'major_axis')
@@ -418,8 +418,8 @@ class HDFStore(object):
         minor_labels = _read_array(group, 'minor_labels')
         values = _read_array(group, 'values')
 
-        index = LongPanelIndex(levels=[major_axis, minor_axis],
-                               labels=[major_labels, minor_labels])
+        index = MultiLevelIndex(levels=[major_axis, minor_axis],
+                                labels=[major_labels, minor_labels])
         return LongPanel(values, index=index, columns=items)
 
     def _write_index(self, group, key, value):
diff --git a/pandas/stats/plm.py b/pandas/stats/plm.py
index a5f693eb9..cb43d38e5 100644
--- a/pandas/stats/plm.py
+++ b/pandas/stats/plm.py
@@ -687,7 +687,7 @@ class MovingPanelOLS(MovingOLS, PanelOLS):
         x = self._x
         y = self._y
 
-        dates = x.index.major_axis
+        dates = x.major_axis
 
         cluster_axis = None
         if self._cluster == common.TIME:
@@ -758,7 +758,7 @@ class MovingPanelOLS(MovingOLS, PanelOLS):
     def _beta_matrix(self, lag=0):
         assert(lag >= 0)
 
-        labels = self._y_trans.index.major_labels - lag
+        labels = self._y_trans.major_labels - lag
         indexer = self._valid_indices.searchsorted(labels, side='left')
 
         beta_matrix = self._beta_raw[indexer]
diff --git a/pandas/stats/tests/test_ols.py b/pandas/stats/tests/test_ols.py
index 85ef62fde..70e797cd1 100644
--- a/pandas/stats/tests/test_ols.py
+++ b/pandas/stats/tests/test_ols.py
@@ -198,18 +198,18 @@ class TestPanelOLS(BaseTest):
         result = ols(y=self.panel_y2, x=self.panel_x2)
 
         x = result._x
-        index = [x.major_axis[i] for i in x.index.major_labels]
+        index = [x.major_axis[i] for i in x.major_labels]
         index = Index(sorted(set(index)))
         exp_index = Index([datetime(2000, 1, 1), datetime(2000, 1, 3)])
         self.assertTrue(exp_index.equals(index))
 
-        index = [x.minor_axis[i] for i in x.index.minor_labels]
+        index = [x.minor_axis[i] for i in x.minor_labels]
         index = Index(sorted(set(index)))
         exp_index = Index(['A', 'B'])
         self.assertTrue(exp_index.equals(index))
 
         x = result._x_filtered
-        index = [x.major_axis[i] for i in x.index.major_labels]
+        index = [x.major_axis[i] for i in x.major_labels]
         index = Index(sorted(set(index)))
         exp_index = Index([datetime(2000, 1, 1),
                            datetime(2000, 1, 3),
@@ -516,7 +516,7 @@ def _check_non_raw_results(model):
 
 def _period_slice(panelModel, i):
     index = panelModel._x_trans.index
-    period = index.major_axis[i]
+    period = index.levels[0][i]
 
     L, R = index.get_major_bounds(period, period)
 
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index cc80025a1..5363e96d3 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -5,7 +5,7 @@ import unittest
 
 import numpy as np
 
-from pandas.core.index import Index, Factor, MultiLevelIndex, LongPanelIndex
+from pandas.core.index import Index, Factor, MultiLevelIndex
 import pandas.util.testing as common
 import pandas._tseries as tseries
 
@@ -211,6 +211,77 @@ class TestIndex(unittest.TestCase):
         testit(self.dateIndex)
 
 
+class TestMultiLevelIndex(unittest.TestCase):
+
+    def setUp(self):
+        major_axis = Index([1, 2, 3, 4])
+        minor_axis = Index([1, 2])
+
+        major_labels = np.array([0, 0, 1, 2, 3, 3])
+        minor_labels = np.array([0, 1, 0, 1, 0, 1])
+
+        self.index = MultiLevelIndex(levels=[major_axis, minor_axis],
+                                     labels=[major_labels, minor_labels])
+
+    def test_consistency(self):
+        # need to construct an overflow
+        major_axis = range(70000)
+        minor_axis = range(10)
+
+        major_labels = np.arange(70000)
+        minor_labels = np.repeat(range(10), 7000)
+
+        # the fact that is works means it's consistent
+        index = MultiLevelIndex(levels=[major_axis, minor_axis],
+                                labels=[major_labels, minor_labels])
+
+        # inconsistent
+        major_labels = np.array([0, 0, 1, 1, 1, 2, 2, 3, 3])
+        minor_labels = np.array([0, 1, 0, 1, 1, 0, 1, 0, 1])
+
+        self.assertRaises(Exception, MultiLevelIndex,
+                          levels=[major_axis, minor_axis],
+                          labels=[major_labels, minor_labels])
+
+
+    def test_truncate(self):
+        result = self.index.truncate(before=1)
+        self.assert_(0 not in result.levels[0])
+        self.assert_(1 in result.levels[0])
+
+        result = self.index.truncate(after=1)
+        self.assert_(2 not in result.levels[0])
+        self.assert_(1 in result.levels[0])
+
+        result = self.index.truncate(before=1, after=2)
+        self.assertEqual(len(result.levels[0]), 2)
+
+    def test_getMajorBounds(self):
+        pass
+
+    def test_getAxisBounds(self):
+        pass
+
+    def test_getLabelBounds(self):
+        pass
+
+    def test_bounds(self):
+        pass
+
+    def test_makeMask(self):
+        from pandas.core.panel import make_mask
+
+        mask =  make_mask(self.index)
+        expected = np.array([True, True,
+                             True, False,
+                             False, True,
+                             True, True], dtype=bool)
+        self.assert_(np.array_equal(mask, expected))
+
+    def test_dims(self):
+        pass
+
+
 class TestFactor(unittest.TestCase):
 
     def setUp(self):
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index ee974b58d..0d74f9357 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -10,7 +10,7 @@ import numpy as np
 
 from pandas.core.api import DataFrame, Index, notnull
 from pandas.core.datetools import bday
-from pandas.core.index import LongPanelIndex
+from pandas.core.index import MultiLevelIndex
 from pandas.core.panel import (WidePanel, LongPanel, group_agg, pivot)
 import pandas.core.panel as panelmod
 
@@ -640,74 +640,6 @@ class TestWidePanel(unittest.TestCase, PanelTests,
 
         self.assertRaises(Exception, self.panel.shift, 1, axis='items')
 
-class TestLongPanelIndex(unittest.TestCase):
-
-    def setUp(self):
-        major_axis = Index([1, 2, 3, 4])
-        minor_axis = Index([1, 2])
-
-        major_labels = np.array([0, 0, 1, 2, 3, 3])
-        minor_labels = np.array([0, 1, 0, 1, 0, 1])
-
-        self.index = LongPanelIndex(levels=[major_axis, minor_axis],
-                                    labels=[major_labels, minor_labels])
-
-    def test_consistency(self):
-        # need to construct an overflow
-        major_axis = range(70000)
-        minor_axis = range(10)
-
-        major_labels = np.arange(70000)
-        minor_labels = np.repeat(range(10), 7000)
-
-        # the fact that is works means it's consistent
-        index = LongPanelIndex(levels=[major_axis, minor_axis],
-                               labels=[major_labels, minor_labels])
-
-        # inconsistent
-        major_labels = np.array([0, 0, 1, 1, 1, 2, 2, 3, 3])
-        minor_labels = np.array([0, 1, 0, 1, 1, 0, 1, 0, 1])
-
-        self.assertRaises(Exception, LongPanelIndex,
-                          levels=[major_axis, minor_axis],
-                          labels=[major_labels, minor_labels])
-
-
-    def test_truncate(self):
-        result = self.index.truncate(before=1)
-        self.assert_(0 not in result.major_axis)
-        self.assert_(1 in result.major_axis)
-
-        result = self.index.truncate(after=1)
-        self.assert_(2 not in result.major_axis)
-        self.assert_(1 in result.major_axis)
-
-        result = self.index.truncate(before=1, after=2)
-        self.assertEqual(len(result.major_axis), 2)
-
-    def test_getMajorBounds(self):
-        pass
-
-    def test_getAxisBounds(self):
-        pass
-
-    def test_getLabelBounds(self):
-        pass
-
-    def test_bounds(self):
-        pass
-
-    def test_makeMask(self):
-        mask =  self.index.mask
-        expected = np.array([True, True,
-                             True, False,
-                             False, True,
-                             True, True], dtype=bool)
-        self.assert_(np.array_equal(mask, expected))
-
-    def test_dims(self):
-        pass
-
 class TestLongPanel(unittest.TestCase):
 
     def setUp(self):
@@ -840,10 +772,10 @@ class TestLongPanel(unittest.TestCase):
             return (arr[1:] > arr[:-1]).any()
 
         sorted_minor = self.panel.sort(axis='minor')
-        self.assert_(is_sorted(sorted_minor.index.minor_labels))
+        self.assert_(is_sorted(sorted_minor.minor_labels))
 
         sorted_major = sorted_minor.sort(axis='major')
-        self.assert_(is_sorted(sorted_major.index.major_labels))
+        self.assert_(is_sorted(sorted_major.major_labels))
 
     def test_to_wide(self):
         pass
@@ -857,7 +789,6 @@ class TestLongPanel(unittest.TestCase):
 
         buf = StringIO()
         self.panel.toString(buf)
-        self.panel.toString(buf, col_space=12)
 
     def test_swapaxes(self):
         swapped = self.panel.swapaxes()
@@ -928,7 +859,7 @@ class TestLongPanel(unittest.TestCase):
         # TODO: test correctness
 
     def test_get_dummies(self):
-        self.panel['Label'] = self.panel.index.minor_labels
+        self.panel['Label'] = self.panel.minor_labels
 
         minor_dummies = self.panel.get_axis_dummies('minor')
         dummies = self.panel.get_dummies('Label')
@@ -964,13 +895,13 @@ class TestLongPanel(unittest.TestCase):
         index = self.panel.index
 
         major_count = self.panel.count('major')
-        labels = index.major_labels
-        for i, idx in enumerate(index.major_axis):
+        labels = index.labels[0]
+        for i, idx in enumerate(index.levels[0]):
             self.assertEqual(major_count[i], (labels == i).sum())
 
         minor_count = self.panel.count('minor')
-        labels = index.minor_labels
-        for i, idx in enumerate(index.minor_axis):
+        labels = index.labels[1]
+        for i, idx in enumerate(index.levels[1]):
             self.assertEqual(minor_count[i], (labels == i).sum())
 
     def test_leftJoin(self):
diff --git a/pandas/tests/test_sparse.py b/pandas/tests/test_sparse.py
index 475c4606d..a56278dd5 100644
--- a/pandas/tests/test_sparse.py
+++ b/pandas/tests/test_sparse.py
@@ -1182,10 +1182,10 @@ class TestSparseWidePanel(TestCase,
             dlp = panel.to_dense().to_long()
 
             self.assert_(np.array_equal(slp.values, dlp.values))
-            self.assert_(np.array_equal(slp.index.major_labels,
-                                        dlp.index.major_labels))
-            self.assert_(np.array_equal(slp.index.minor_labels,
-                                        dlp.index.minor_labels))
+            self.assert_(np.array_equal(slp.major_labels,
+                                        dlp.major_labels))
+            self.assert_(np.array_equal(slp.minor_labels,
+                                        dlp.minor_labels))
 
         _compare_with_dense(self.panel)
         _compare_with_dense(self.panel.reindex(items=['ItemA']))
