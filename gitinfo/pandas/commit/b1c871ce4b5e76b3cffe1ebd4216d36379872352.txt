commit b1c871ce4b5e76b3cffe1ebd4216d36379872352
Author: Luiz Gustavo <lgmsantos@gmail.com>
Date:   Thu Aug 22 10:07:47 2019 -0300

    BUG: Series.rename raises error on values accepted by Series construcâ€¦ (#27814)
    
    * BUG: Series.rename raises error on values accepted by Series constructor.

diff --git a/doc/source/whatsnew/v0.25.1.rst b/doc/source/whatsnew/v0.25.1.rst
index 680d69a98..b307fae4f 100644
--- a/doc/source/whatsnew/v0.25.1.rst
+++ b/doc/source/whatsnew/v0.25.1.rst
@@ -108,6 +108,7 @@ Other
 ^^^^^
 
 - Bug in :meth:`Series.replace` and :meth:`DataFrame.replace` when replacing timezone-aware timestamps using a dict-like replacer (:issue:`27720`)
+- Bug in :meth:`Series.rename` when using a custom type indexer. Now any value that isn't callable or dict-like is treated as a scalar. (:issue:`27814`)
 
 .. _whatsnew_0.251.contributors:
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 3f04970ee..8b6c963e4 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -4165,12 +4165,10 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         """
         kwargs["inplace"] = validate_bool_kwarg(kwargs.get("inplace", False), "inplace")
 
-        non_mapping = is_scalar(index) or (
-            is_list_like(index) and not is_dict_like(index)
-        )
-        if non_mapping:
+        if callable(index) or is_dict_like(index):
+            return super().rename(index=index, **kwargs)
+        else:
             return self._set_name(index, inplace=kwargs.get("inplace"))
-        return super().rename(index=index, **kwargs)
 
     @Substitution(**_shared_doc_kwargs)
     @Appender(generic.NDFrame.reindex.__doc__)
diff --git a/pandas/tests/series/test_alter_axes.py b/pandas/tests/series/test_alter_axes.py
index 0a25d6ba2..5d74ad95b 100644
--- a/pandas/tests/series/test_alter_axes.py
+++ b/pandas/tests/series/test_alter_axes.py
@@ -267,6 +267,25 @@ class TestSeriesAlterAxes:
         expected = Series([1, 2, 3], index=expected_index)
         tm.assert_series_equal(result, expected)
 
+    def test_rename_with_custom_indexer(self):
+        # GH 27814
+        class MyIndexer:
+            pass
+
+        ix = MyIndexer()
+        s = Series([1, 2, 3]).rename(ix)
+        assert s.name is ix
+
+    def test_rename_with_custom_indexer_inplace(self):
+        # GH 27814
+        class MyIndexer:
+            pass
+
+        ix = MyIndexer()
+        s = Series([1, 2, 3])
+        s.rename(ix, inplace=True)
+        assert s.name is ix
+
     def test_set_axis_inplace_axes(self, axis_series):
         # GH14636
         ser = Series(np.arange(4), index=[1, 3, 5, 7], dtype="int64")
