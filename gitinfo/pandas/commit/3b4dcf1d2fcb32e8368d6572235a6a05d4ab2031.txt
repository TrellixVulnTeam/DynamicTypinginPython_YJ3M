commit 3b4dcf1d2fcb32e8368d6572235a6a05d4ab2031
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Jun 2 16:44:48 2012 -0400

    TST: fix NumPy 1.7 test failures per #1361, skip tests depending on scipy.stats

diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index d01799e82..d0d716d65 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -32,6 +32,12 @@ from pandas.util.testing import (assert_almost_equal,
 import pandas.util.testing as tm
 import pandas.lib as lib
 
+def _skip_if_no_scipy():
+    try:
+        import scipy
+    except ImportError:
+        raise nose.SkipTest
+
 #-------------------------------------------------------------------------------
 # DataFrame test cases
 
@@ -3422,6 +3428,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
     #     self.assert_(self.frame.columns.name is None)
 
     def test_corr(self):
+        _skip_if_no_scipy()
         self.frame['A'][:5] = nan
         self.frame['B'][:10] = nan
 
@@ -5427,6 +5434,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
             nanops._USE_BOTTLENECK = True
 
     def test_skew(self):
+        _skip_if_no_scipy()
         from scipy.stats import skew
 
         def alt(x):
@@ -5437,6 +5445,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         self._check_stat_op('skew', alt)
 
     def test_kurt(self):
+        _skip_if_no_scipy()
+
         from scipy.stats import kurtosis
 
         def alt(x):
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 6025eb093..34c37b2c4 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -71,7 +71,10 @@ class SafeForLongAndSparse(object):
         self._check_stat_op('max', np.max)
 
     def test_skew(self):
-        from scipy.stats import skew
+        try:
+            from scipy.stats import skew
+        except ImportError:
+            raise nose.SkipTest
         def this_skew(x):
             if len(x) < 3:
                 return np.nan
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 426b703e0..301c131f9 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -26,6 +26,13 @@ from pandas.util import py3compat
 from pandas.util.testing import assert_series_equal, assert_almost_equal
 import pandas.util.testing as tm
 
+def _skip_if_no_scipy():
+    try:
+        import scipy
+    except ImportError:
+        raise nose.SkipTest
+
+
 #-------------------------------------------------------------------------------
 # Series test cases
 
@@ -1019,11 +1026,15 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         assert_almost_equal(result, expected)
 
     def test_skew(self):
+        _skip_if_no_scipy()
+
         from scipy.stats import skew
         alt =lambda x: skew(x, bias=False)
         self._check_stat_op('skew', alt)
 
     def test_kurt(self):
+        _skip_if_no_scipy()
+
         from scipy.stats import kurtosis
         alt = lambda x: kurtosis(x, bias=False)
         self._check_stat_op('kurt', alt)
@@ -1627,6 +1638,8 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         assert_series_equal(s, expected)
 
     def test_corr(self):
+        _skip_if_no_scipy()
+
         import scipy.stats as stats
 
         # full overlap
@@ -1650,6 +1663,8 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         self.assertAlmostEqual(result, expected)
 
     def test_corr_rank(self):
+        _skip_if_no_scipy()
+
         import scipy
         import scipy.stats as stats
 
diff --git a/pandas/tseries/tests/test_period.py b/pandas/tseries/tests/test_period.py
index 55288d9d7..7b779cd9d 100644
--- a/pandas/tseries/tests/test_period.py
+++ b/pandas/tseries/tests/test_period.py
@@ -11,7 +11,6 @@ from datetime import datetime, timedelta
 import unittest
 
 from numpy.ma.testutils import assert_equal
-from numpy.testing import assert_array_equal
 
 from pandas.tseries.frequencies import MONTHS, DAYS
 from pandas.tseries.period import Period, PeriodIndex, period_range
@@ -1520,7 +1519,7 @@ class TestPeriodIndex(TestCase):
         index = PeriodIndex([2005, 2007, 2009], freq='A')
         result = index.map(lambda x: x + 1)
         expected = index + 1
-        assert_array_equal(result, expected)
+        self.assert_(result.equals(expected))
 
 def _permute(obj):
     return obj.take(np.random.permutation(len(obj)))
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 3d1f36e5c..7bb3ce40b 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -330,7 +330,7 @@ class TestTimeSeries(unittest.TestCase):
 
         for unit in units:
             dtype = np.dtype('M8[%s]' % unit)
-            vals = np.arange(n, dtype=dtype)
+            vals = np.arange(n, dtype=np.int64).view(dtype)
 
             df = DataFrame({'ints' : np.arange(n)}, index=np.arange(n))
             df[unit] = vals
@@ -342,11 +342,11 @@ class TestTimeSeries(unittest.TestCase):
 
         # Test insertion into existing datetime64 column
         df = DataFrame({'ints' : np.arange(n)}, index=np.arange(n))
-        df['dates'] = np.arange(n, dtype=ns_dtype)
+        df['dates'] = np.arange(n, dtype=np.int64).view(ns_dtype)
 
         for unit in units:
             dtype = np.dtype('M8[%s]' % unit)
-            vals = np.arange(n, dtype=dtype)
+            vals = np.arange(n, dtype=np.int64).view(dtype)
 
             tmp = df.copy()
 
