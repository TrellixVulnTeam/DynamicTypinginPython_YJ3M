commit c0d4339b18ab29d3d692901e19393a3ea10d7cf3
Author: Younggun Kim <scari.net@gmail.com>
Date:   Sat May 2 05:31:35 2015 +0900

    BUG: Resample BM/BQ adds extra index point #9756

diff --git a/doc/source/whatsnew/v0.16.1.txt b/doc/source/whatsnew/v0.16.1.txt
index d422e7815..9436b4c4b 100755
--- a/doc/source/whatsnew/v0.16.1.txt
+++ b/doc/source/whatsnew/v0.16.1.txt
@@ -287,6 +287,7 @@ Bug Fixes
 
 - Bug where dividing a dataframe containing values of type ``Decimal`` by another ``Decimal`` would raise. (:issue:`9787`)
 - Bug where using DataFrames asfreq would remove the name of the index. (:issue:`9885`)
+- Bug causing extra index point when resample BM/BQ (:issue:`9756`)
 - Changed caching in ``AbstractHolidayCalendar`` to be at the instance level rather than at the class level as the latter can result in unexpected behaviour. (:issue:`9552`)
 
 - Fixed latex output for multi-indexed dataframes (:issue:`9778`)
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 0e64d2764..e16dd0e4c 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -966,6 +966,16 @@ class TestGroupBy(tm.TestCase):
         expected = DataFrame({'b' : range(5)})
         tm.assert_frame_equal(result, expected)
 
+    def test_resample_extra_index_point(self):
+        # GH 9756
+        expected_i = pd.DatetimeIndex(start='20150101', end='20150331', freq='BM')
+        expected = pd.DataFrame(index=expected_i, data=len(expected_i)*[0])
+
+        index = pd.DatetimeIndex(start='20150101', end='20150331', freq='B')
+        df = pd.DataFrame(index=index, data=len(index)*[0])
+        result = df.resample('BM', how='last')
+        assert_frame_equal(result, expected)
+
     def test_transform_fast(self):
 
         df = DataFrame( { 'id' : np.arange( 100000 ) / 3,
diff --git a/pandas/tseries/frequencies.py b/pandas/tseries/frequencies.py
index b220e03fd..a63e9e55b 100644
--- a/pandas/tseries/frequencies.py
+++ b/pandas/tseries/frequencies.py
@@ -989,7 +989,7 @@ def is_subperiod(source, target):
         return source in ['D', 'C', 'B', 'M', 'H', 'T', 'S', 'L', 'U', 'N']
     elif _is_quarterly(target):
         return source in ['D', 'C', 'B', 'M', 'H', 'T', 'S', 'L', 'U', 'N']
-    elif target == 'M':
+    elif _is_monthly(target):
         return source in ['D', 'C', 'B', 'H', 'T', 'S', 'L', 'U', 'N']
     elif _is_weekly(target):
         return source in [target, 'D', 'C', 'B', 'H', 'T', 'S', 'L', 'U', 'N']
@@ -1048,7 +1048,7 @@ def is_superperiod(source, target):
         return target in ['D', 'C', 'B', 'M', 'H', 'T', 'S', 'L', 'U', 'N']
     elif _is_quarterly(source):
         return target in ['D', 'C', 'B', 'M', 'H', 'T', 'S', 'L', 'U', 'N']
-    elif source == 'M':
+    elif _is_monthly(source):
         return target in ['D', 'C', 'B', 'H', 'T', 'S', 'L', 'U', 'N']
     elif _is_weekly(source):
         return target in [source, 'D', 'C', 'B', 'H', 'T', 'S', 'L', 'U', 'N']
@@ -1093,7 +1093,12 @@ def _quarter_months_conform(source, target):
 
 def _is_quarterly(rule):
     rule = rule.upper()
-    return rule == 'Q' or rule.startswith('Q-')
+    return rule == 'Q' or rule.startswith('Q-') or rule.startswith('BQ')
+
+
+def _is_monthly(rule):
+    rule = rule.upper()
+    return rule == 'M' or rule == 'BM'
 
 
 def _is_weekly(rule):
