commit 595580464a256fb883e8baa5b6e62f2013f0cf1a
Author: Dr-Irv <irv@princeton.com>
Date:   Fri Feb 24 15:07:25 2017 -0500

    BUG: GH #12223, GH #15262. Allow ints for names in MultiIndex
    
    closes #12223
    closes #15262
    
    Author: Dr-Irv <irv@princeton.com>
    
    Closes #15478 from Dr-Irv/Issue15262 and squashes the following commits:
    
    15d8433 [Dr-Irv] Address jreback comments
    10667a3 [Dr-Irv] Fix types for test
    8935068 [Dr-Irv] resolve conflicts
    385ca3e [Dr-Irv] BUG: GH #12223, GH #15262. Allow ints for names in MultiIndex

diff --git a/doc/source/whatsnew/v0.20.0.txt b/doc/source/whatsnew/v0.20.0.txt
index 4b3a65780..7426b5ca2 100644
--- a/doc/source/whatsnew/v0.20.0.txt
+++ b/doc/source/whatsnew/v0.20.0.txt
@@ -550,6 +550,7 @@ Bug Fixes
 
 - Bug in ``Series.where()`` and ``DataFrame.where()`` where array-like conditionals were being rejected (:issue:`15414`)
 - Bug in ``Series`` construction with a datetimetz (:issue:`14928`)
+- Bug in output formatting of a ``MultiIndex`` when names are integers (:issue:`12223`, :issue:`15262`)
 
 - Bug in compat for passing long integers to ``Timestamp.replace`` (:issue:`15030`)
 - Bug in ``.loc`` that would not return the correct dtype for scalar access for a DataFrame (:issue:`11617`)
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index bfef2cfbd..ce3481fc1 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2876,7 +2876,7 @@ class DataFrame(NDFrame):
             names = [x for x in self.index.names]
             if isinstance(self.index, MultiIndex):
                 for i in range(self.index.nlevels):
-                    arrays.append(self.index.get_level_values(i))
+                    arrays.append(self.index._get_level_values(i))
             else:
                 arrays.append(self.index)
 
@@ -2886,9 +2886,9 @@ class DataFrame(NDFrame):
                 # append all but the last column so we don't have to modify
                 # the end of this loop
                 for n in range(col.nlevels - 1):
-                    arrays.append(col.get_level_values(n))
+                    arrays.append(col._get_level_values(n))
 
-                level = col.get_level_values(col.nlevels - 1)
+                level = col._get_level_values(col.nlevels - 1)
                 names.extend(col.names)
             elif isinstance(col, Series):
                 level = col._values
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 0b3fcba1c..831ca3886 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -291,8 +291,8 @@ class Grouper(object):
                 # equivalent to the axis name
                 if isinstance(ax, MultiIndex):
                     level = ax._get_level_number(level)
-                    ax = Index(ax.get_level_values(
-                        level), name=ax.names[level])
+                    ax = Index(ax._get_level_values(level),
+                               name=ax.names[level])
 
                 else:
                     if level not in (0, ax.name):
@@ -761,7 +761,7 @@ class _GroupBy(PandasObject, SelectionMixin):
         gp = self.grouper
         levels = chain((gp.levels[i][gp.labels[i][b]]
                         for i in range(len(gp.groupings))),
-                       (original.get_level_values(i)[b]
+                       (original._get_level_values(i)[b]
                         for i in range(original.nlevels)))
         new = MultiIndex.from_arrays(list(levels))
         new.names = gp.names + original.names
diff --git a/pandas/core/reshape.py b/pandas/core/reshape.py
index 5fc0d590a..87cb088c2 100644
--- a/pandas/core/reshape.py
+++ b/pandas/core/reshape.py
@@ -811,7 +811,8 @@ def melt(frame, id_vars=None, value_vars=None, var_name=None,
     mdata[value_name] = frame.values.ravel('F')
     for i, col in enumerate(var_name):
         # asanyarray will keep the columns as an Index
-        mdata[col] = np.asanyarray(frame.columns.get_level_values(i)).repeat(N)
+        mdata[col] = np.asanyarray(frame.columns
+                                   ._get_level_values(i)).repeat(N)
 
     return DataFrame(mdata, columns=mcolumns)
 
diff --git a/pandas/formats/format.py b/pandas/formats/format.py
index 6b235b5e1..4c081770e 100644
--- a/pandas/formats/format.py
+++ b/pandas/formats/format.py
@@ -1566,7 +1566,7 @@ class CSVFormatter(object):
                     if isinstance(index_label, list) and len(index_label) > 1:
                         col_line.extend([''] * (len(index_label) - 1))
 
-                col_line.extend(columns.get_level_values(i))
+                col_line.extend(columns._get_level_values(i))
 
                 writer.writerow(col_line)
 
diff --git a/pandas/indexes/base.py b/pandas/indexes/base.py
index dcbcccdfc..5d43d2d32 100644
--- a/pandas/indexes/base.py
+++ b/pandas/indexes/base.py
@@ -2334,9 +2334,9 @@ class Index(IndexOpsMixin, StringAccessorMixin, PandasObject):
         self._engine.set_value(_values_from_object(arr),
                                _values_from_object(key), value)
 
-    def get_level_values(self, level):
+    def _get_level_values(self, level):
         """
-        Return vector of label values for requested level, equal to the length
+        Return an Index of values for requested level, equal to the length
         of the index
 
         Parameters
@@ -2345,12 +2345,14 @@ class Index(IndexOpsMixin, StringAccessorMixin, PandasObject):
 
         Returns
         -------
-        values : ndarray
+        values : Index
         """
-        # checks that level number is actually just 1
+
         self._validate_index_level(level)
         return self
 
+    get_level_values = _get_level_values
+
     _index_shared_docs['get_indexer'] = """
         Compute indexer and mask for new index given the current index. The
         indexer should be then used as an input to ndarray.take to align the
diff --git a/pandas/indexes/multi.py b/pandas/indexes/multi.py
index ec30d2c44..23a42265a 100644
--- a/pandas/indexes/multi.py
+++ b/pandas/indexes/multi.py
@@ -684,7 +684,7 @@ class MultiIndex(Index):
         """
 
         # reversed() because lexsort() wants the most significant key last.
-        values = [self._get_level_values(i)
+        values = [self._get_level_values(i).values
                   for i in reversed(range(len(self.levels)))]
         try:
             sort_order = np.lexsort(values)
@@ -866,7 +866,8 @@ class MultiIndex(Index):
         labels = self.labels[level]
         filled = algos.take_1d(unique._values, labels,
                                fill_value=unique._na_value)
-        return filled
+        values = unique._shallow_copy(filled)
+        return values
 
     def get_level_values(self, level):
         """
@@ -883,7 +884,7 @@ class MultiIndex(Index):
         """
         level = self._get_level_number(level)
         values = self._get_level_values(level)
-        return self.levels[level]._shallow_copy(values)
+        return values
 
     def format(self, space=2, sparsify=None, adjoin=True, names=False,
                na_rep=None, formatter=None):
@@ -966,7 +967,8 @@ class MultiIndex(Index):
         """
 
         from pandas import DataFrame
-        result = DataFrame({(name or level): self.get_level_values(level)
+        result = DataFrame({(name or level):
+                            self._get_level_values(level)
                             for name, level in
                             zip(self.names, range(len(self.levels)))},
                            copy=False)
@@ -1301,8 +1303,8 @@ class MultiIndex(Index):
                for o in other):
             arrays = []
             for i in range(self.nlevels):
-                label = self.get_level_values(i)
-                appended = [o.get_level_values(i) for o in other]
+                label = self._get_level_values(i)
+                appended = [o._get_level_values(i) for o in other]
                 arrays.append(label.append(appended))
             return MultiIndex.from_arrays(arrays, names=self.names)
 
diff --git a/pandas/io/sql.py b/pandas/io/sql.py
index bace43e78..2ab642b3a 100644
--- a/pandas/io/sql.py
+++ b/pandas/io/sql.py
@@ -749,7 +749,7 @@ class SQLTable(PandasObject):
         if self.index is not None:
             for i, idx_label in enumerate(self.index):
                 idx_type = dtype_mapper(
-                    self.frame.index.get_level_values(i))
+                    self.frame.index._get_level_values(i))
                 column_names_and_types.append((text_type(idx_label),
                                               idx_type, True))
 
diff --git a/pandas/tests/frame/test_combine_concat.py b/pandas/tests/frame/test_combine_concat.py
index eed4d6261..6f06a55ad 100644
--- a/pandas/tests/frame/test_combine_concat.py
+++ b/pandas/tests/frame/test_combine_concat.py
@@ -422,6 +422,24 @@ class TestDataFrameConcatCommon(tm.TestCase, TestData):
         with assertRaisesRegexp(ValueError, 'No axis named'):
             pd.concat([series1, series2], axis='something')
 
+    def test_concat_numerical_names(self):
+        # #15262  # #12223
+        df = pd.DataFrame({'col': range(9)},
+                          dtype='int32',
+                          index=(pd.MultiIndex
+                                 .from_product([['A0', 'A1', 'A2'],
+                                                ['B0', 'B1', 'B2']],
+                                               names=[1, 2])))
+        result = pd.concat((df.iloc[:2, :], df.iloc[-2:, :]))
+        expected = pd.DataFrame({'col': [0, 1, 7, 8]},
+                                dtype='int32',
+                                index=pd.MultiIndex.from_tuples([('A0', 'B0'),
+                                                                 ('A0', 'B1'),
+                                                                 ('A2', 'B1'),
+                                                                 ('A2', 'B2')],
+                                                                names=[1, 2]))
+        tm.assert_frame_equal(result, expected)
+
 
 class TestDataFrameCombineFirst(tm.TestCase, TestData):
 
diff --git a/pandas/util/doctools.py b/pandas/util/doctools.py
index 62dcba140..6df6444ae 100644
--- a/pandas/util/doctools.py
+++ b/pandas/util/doctools.py
@@ -113,12 +113,12 @@ class TablePlotter(object):
         else:
             for i in range(idx_nlevels):
                 data.insert(i, 'Index{0}'.format(i),
-                            data.index.get_level_values(i))
+                            data.index._get_level_values(i))
 
         col_nlevels = data.columns.nlevels
         if col_nlevels > 1:
-            col = data.columns.get_level_values(0)
-            values = [data.columns.get_level_values(i).values
+            col = data.columns._get_level_values(0)
+            values = [data.columns._get_level_values(i).values
                       for i in range(1, col_nlevels)]
             col_df = pd.DataFrame(values)
             data.columns = col_df.columns
