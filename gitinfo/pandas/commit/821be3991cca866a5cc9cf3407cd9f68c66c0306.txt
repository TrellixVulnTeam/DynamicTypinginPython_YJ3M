commit 821be3991cca866a5cc9cf3407cd9f68c66c0306
Author: Pietro Battiston <me@pietrobattiston.it>
Date:   Mon Feb 20 09:36:19 2017 -0500

    BUG: MultiIndex indexing with passed Series/DataFrame/ndarray as indexers
    
    closes #15424
    closes #15434
    
    Author: Pietro Battiston <me@pietrobattiston.it>
    
    Closes #15425 from toobaz/mi_indexing and squashes the following commits:
    
    2ba2d5d [Pietro Battiston] Updated comment
    900e3ce [Pietro Battiston] whatsnew
    8467b57 [Pietro Battiston] Tests for previous commit
    17209f3 [Pietro Battiston] BUG: support indexing MultiIndex with 1-D array
    7606114 [Pietro Battiston] Whatsnew
    0b719f5 [Pietro Battiston] Test for previous commit
    1f2f385 [Pietro Battiston] BUG: Fix indexing MultiIndex with Series with 0 not index

diff --git a/doc/source/whatsnew/v0.20.0.txt b/doc/source/whatsnew/v0.20.0.txt
index ae4a3d3c3..9e71b9a11 100644
--- a/doc/source/whatsnew/v0.20.0.txt
+++ b/doc/source/whatsnew/v0.20.0.txt
@@ -501,7 +501,8 @@ Bug Fixes
 - Bug in ``pd.tools.hashing.hash_pandas_object()`` in which hashing of categoricals depended on the ordering of categories, instead of just their values. (:issue:`15143`)
 - Bug in ``.groupby(..).resample()`` when passed the ``on=`` kwarg. (:issue:`15021`)
 
-- Bug in ``DataFrame.loc`` with indexing a ``MultiIndex`` with a ``Series`` indexer (:issue:`14730`)
+- Bug in ``DataFrame.loc`` with indexing a ``MultiIndex`` with a ``Series`` indexer (:issue:`14730`, :issue:`15424`)
+- Bug in ``DataFrame.loc`` with indexing a ``MultiIndex`` with a numpy array (:issue:`15434`)
 
 
 
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 66510a770..6f4908757 100755
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -1521,15 +1521,28 @@ class _LocIndexer(_LocationIndexer):
             return self._getbool_axis(key, axis=axis)
         elif is_list_like_indexer(key):
 
-            # GH 7349
-            # possibly convert a list-like into a nested tuple
-            # but don't convert a list-like of tuples
+            # convert various list-like indexers
+            # to a list of keys
+            # we will use the *values* of the object
+            # and NOT the index if its a PandasObject
             if isinstance(labels, MultiIndex):
+
+                if isinstance(key, (ABCSeries, np.ndarray)) and key.ndim <= 1:
+                    # Series, or 0,1 ndim ndarray
+                    # GH 14730
+                    key = list(key)
+                elif isinstance(key, ABCDataFrame):
+                    # GH 15438
+                    raise NotImplementedError("Indexing a MultiIndex with a "
+                                              "DataFrame key is not "
+                                              "implemented")
+                elif hasattr(key, 'ndim') and key.ndim > 1:
+                    raise NotImplementedError("Indexing a MultiIndex with a "
+                                              "multidimensional key is not "
+                                              "implemented")
+
                 if (not isinstance(key, tuple) and len(key) > 1 and
                         not isinstance(key[0], tuple)):
-                    if isinstance(key, ABCSeries):
-                        # GH 14730
-                        key = list(key)
                     key = tuple([key])
 
             # an iterable multi-selection
diff --git a/pandas/tests/indexing/test_multiindex.py b/pandas/tests/indexing/test_multiindex.py
index b6b9ac93b..b40f0b8cd 100644
--- a/pandas/tests/indexing/test_multiindex.py
+++ b/pandas/tests/indexing/test_multiindex.py
@@ -158,12 +158,46 @@ class TestMultiIndexBasic(tm.TestCase):
         result = x.loc[[1, 3]]
         tm.assert_series_equal(result, expected)
 
+        # GH15424
+        y1 = Series([1, 3], index=[1, 2])
+        result = x.loc[y1]
+        tm.assert_series_equal(result, expected)
+
         empty = Series(data=[], dtype=np.float64)
         expected = Series([], index=MultiIndex(
             levels=index.levels, labels=[[], []], dtype=np.float64))
         result = x.loc[empty]
         tm.assert_series_equal(result, expected)
 
+    def test_loc_getitem_array(self):
+        # GH15434
+        # passing an array as a key with a MultiIndex
+        index = MultiIndex.from_product([[1, 2, 3], ['A', 'B', 'C']])
+        x = Series(index=index, data=range(9), dtype=np.float64)
+        y = np.array([1, 3])
+        expected = Series(
+            data=[0, 1, 2, 6, 7, 8],
+            index=MultiIndex.from_product([[1, 3], ['A', 'B', 'C']]),
+            dtype=np.float64)
+        result = x.loc[y]
+        tm.assert_series_equal(result, expected)
+
+        # empty array:
+        empty = np.array([])
+        expected = Series([], index=MultiIndex(
+            levels=index.levels, labels=[[], []], dtype=np.float64))
+        result = x.loc[empty]
+        tm.assert_series_equal(result, expected)
+
+        # 0-dim array (scalar):
+        scalar = np.int64(1)
+        expected = Series(
+            data=[0, 1, 2],
+            index=['A', 'B', 'C'],
+            dtype=np.float64)
+        result = x.loc[scalar]
+        tm.assert_series_equal(result, expected)
+
     def test_iloc_getitem_multiindex(self):
         mi_labels = DataFrame(np.random.randn(4, 3),
                               columns=[['i', 'i', 'j'], ['A', 'A', 'B']],
