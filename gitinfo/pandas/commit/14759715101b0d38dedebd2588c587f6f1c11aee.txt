commit 14759715101b0d38dedebd2588c587f6f1c11aee
Author: Chang She <chang@lambdafoundry.com>
Date:   Tue Jun 26 11:57:34 2012 -0400

    ENH: register converters with matplotlib for better datetime convesion

diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index 37b3f6e64..1f116529d 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -1,6 +1,7 @@
 # being a bit too dynamic
 # pylint: disable=E1101
 from itertools import izip
+import datetime
 
 import numpy as np
 
@@ -13,6 +14,7 @@ from pandas.tseries.period import PeriodIndex
 from pandas.tseries.frequencies import get_period_alias, get_base_alias
 from pandas.tseries.offsets import DateOffset
 import pandas.tseries.tools as datetools
+import pandas.lib as lib
 
 def _get_standard_kind(kind):
     return {'density' : 'kde'}.get(kind, kind)
@@ -573,24 +575,39 @@ class KdePlot(MPLPlot):
         if self.subplots and self.legend:
             self.axes[0].legend(loc='best')
 
-class DatetimeConverter(object):
-
-    @classmethod
-    def convert(cls, values, units, axis):
-        def try_parse(values):
-            try:
-                return datetools.to_datetime(values).toordinal()
-            except Exception:
+try:
+    import matplotlib.units as units
+    import matplotlib.dates as dates
+
+    class DatetimeConverter(dates.DateConverter):
+
+        @staticmethod
+        def convert(values, unit, axis):
+            def try_parse(values):
+                try:
+                    return datetools.to_datetime(values).toordinal()
+                except Exception:
+                    return values
+
+            if isinstance(values, (datetime.datetime, datetime.date)):
+                return values.toordinal()
+            elif isinstance(values, (datetime.time)):
+                return dates.date2num(values)
+            elif (com.is_integer(values) or com.is_float(values)):
                 return values
-
-        if (com.is_integer(values) or
-            com.is_float(values)):
+            elif isinstance(values, str):
+                return try_parse(values)
+            elif isinstance(values, Index):
+                return values.map(try_parse)
+            elif isinstance(values, (list, tuple, np.ndarray)):
+                return [try_parse(x) for x in values]
             return values
-        elif isinstance(values, str):
-            return try_parse(values)
-        elif isinstance(values, Index):
-            return values.map(try_parse)
-        return map(try_parse, values)
+
+    units.registry[lib.Timestamp] = DatetimeConverter()
+    units.registry[datetime.date] = DatetimeConverter()
+    units.registry[datetime.datetime] = DatetimeConverter()
+except ImportError:
+    pass
 
 class LinePlot(MPLPlot):
 
@@ -648,10 +665,6 @@ class LinePlot(MPLPlot):
                     y = np.ma.masked_where(mask, y)
                 plotf(ax, x, y, style, label=label, **self.kwds)
                 ax.grid(self.grid)
-                idx = getattr(self.data, 'index', None)
-                if isinstance(idx, DatetimeIndex) or (idx is not None and
-                    idx.inferred_type == 'datetime'):
-                    ax.get_xaxis().converter = DatetimeConverter
 
     def _maybe_convert_index(self, data):
         # tsplot converts automatically, but don't want to convert index
diff --git a/pandas/tseries/plotting.py b/pandas/tseries/plotting.py
index 3e3540271..152f677a5 100644
--- a/pandas/tseries/plotting.py
+++ b/pandas/tseries/plotting.py
@@ -77,7 +77,6 @@ def tsplot(series, plotf, **kwargs):
     ax.freq = freq
     xaxis = ax.get_xaxis()
     xaxis.freq = freq
-    xaxis.converter = DateConverter
     ax.legendlabels = [kwargs.get('label', None)]
     ax.view_interval = None
     ax.date_axis_info = None
@@ -739,12 +738,24 @@ def format_dateaxis(subplot, freq):
     subplot.xaxis.set_minor_formatter(minformatter)
     pylab.draw_if_interactive()
 
-class DateConverter(object):
 
-    @classmethod
-    def convert(cls, values, units, axis):
-        if isinstance(values, (int, float, str, datetime, Period)):
+import matplotlib.units as units
+import matplotlib.dates as dates
+
+class PeriodConverter(dates.DateConverter):
+
+    @staticmethod
+    def convert(values, units, axis):
+        if not hasattr(axis, 'freq'):
+            raise TypeError('Axis must have `freq` set to convert to Periods')
+        valid_types = (str, datetime, Period, pydt.date, pydt.time)
+        if (isinstance(values, valid_types) or com.is_integer(values) or
+            com.is_float(values)):
             return get_datevalue(values, axis.freq)
         if isinstance(values, Index):
             return values.map(lambda x: get_datevalue(x, axis.freq))
-        return map(lambda x: get_datevalue(x, axis.freq), values)
+        if isinstance(values, (list, tuple, np.ndarray)):
+            return [get_datevalue(x, axis.freq) for x in values]
+        return values
+
+units.registry[Period] = PeriodConverter()
diff --git a/pandas/tseries/tests/test_plotting.py b/pandas/tseries/tests/test_plotting.py
index 6e246fb8e..58ffd2c8c 100644
--- a/pandas/tseries/tests/test_plotting.py
+++ b/pandas/tseries/tests/test_plotting.py
@@ -1,5 +1,5 @@
 import os
-from datetime import datetime, timedelta
+from datetime import datetime, timedelta, date, time
 
 import unittest
 import nose
@@ -559,6 +559,25 @@ class TestTSPlot(unittest.TestCase):
         for l in ax.get_lines():
             self.assert_(l.get_xdata().freq == 'M')
 
+    @slow
+    def test_irreg_dtypes(self):
+        #date
+        idx = [date(2000, 1, 1), date(2000, 1, 5), date(2000, 1, 20)]
+        df = DataFrame(np.random.randn(len(idx), 3), Index(idx, dtype=object))
+        _check_plot_works(df.plot)
+
+        #np.datetime64
+        idx = date_range('1/1/2000', periods=10)
+        idx = idx[[0, 2, 5, 9]].asobject
+        df = DataFrame(np.random.randn(len(idx), 3), idx)
+        _check_plot_works(df.plot)
+
+        #time
+        inc = Series(np.random.randint(1, 6, 9)).cumsum().values
+        idx = [time(1, 1, i) for i in inc]
+        df = DataFrame(np.random.randn(len(idx), 3), idx)
+        _check_plot_works(df.plot)
+
 PNG_PATH = 'tmp.png'
 def _check_plot_works(f, freq=None, series=None, *args, **kwargs):
     import matplotlib.pyplot as plt
