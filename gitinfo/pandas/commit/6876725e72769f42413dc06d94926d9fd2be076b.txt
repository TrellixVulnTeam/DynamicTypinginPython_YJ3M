commit 6876725e72769f42413dc06d94926d9fd2be076b
Author: Chang She <changshe@gmail.com>
Date:   Sun Aug 19 09:20:30 2012 -0400

    BUG: dayfirst and yearfirst in DatetimeIndex constructor #1769

diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 1840cc223..82b1cab7d 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -138,6 +138,8 @@ class DatetimeIndex(Int64Index):
                 copy=False, name=None, tz=None,
                 verify_integrity=True, normalize=False, **kwds):
 
+        dayfirst = kwds.pop('dayfirst', None)
+        yearfirst = kwds.pop('yearfirst', None)
         warn = False
         if 'offset' in kwds and kwds['offset']:
             freq = kwds['offset']
@@ -188,13 +190,15 @@ class DatetimeIndex(Int64Index):
 
             # try a few ways to make it datetime64
             if lib.is_string_array(data):
-                data = _str_to_dt_array(data, offset)
+                data = _str_to_dt_array(data, offset, dayfirst=dayfirst,
+                                        yearfirst=yearfirst)
             else:
                 data = tools.to_datetime(data)
                 data.offset = offset
 
         if issubclass(data.dtype.type, basestring):
-            subarr = _str_to_dt_array(data, offset)
+            subarr = _str_to_dt_array(data, offset, dayfirst=dayfirst,
+                                      yearfirst=yearfirst)
         elif issubclass(data.dtype.type, np.datetime64):
             if isinstance(data, DatetimeIndex):
                 if tz is None:
@@ -1481,9 +1485,9 @@ def _to_m8(key):
 
 
 
-def _str_to_dt_array(arr, offset=None):
+def _str_to_dt_array(arr, offset=None, dayfirst=None, yearfirst=None):
     def parser(x):
-        result = parse_time_string(x, offset)
+        result = parse_time_string(x, offset, dayfirst=dayfirst, yearfirst=None)
         return result[0]
 
     arr = np.asarray(arr, dtype=object)
@@ -1520,4 +1524,3 @@ def _utc_naive(dt):
         dt = dt.tz_convert('utc').replace(tzinfo=None)
 
     return dt
-
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 69f2bafe1..886dbad7e 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -1789,6 +1789,11 @@ class TestDatetime64(unittest.TestCase):
         arr = to_datetime(['1/1/2005', '1/2/2005', 'Jan 3, 2005', '2005-01-04'])
         idx6 = DatetimeIndex(arr)
 
+        idx7 = DatetimeIndex(['12/05/2007', '25/01/2008'], dayfirst=True)
+        idx8 = DatetimeIndex(['2007/05/12', '2008/01/25'], dayfirst=False,
+                             yearfirst=True)
+        self.assert_(idx7.equals(idx8))
+
         for other in [idx2, idx3, idx4, idx5, idx6]:
             self.assert_( (idx1.values == other.values).all() )
 
diff --git a/pandas/tseries/tools.py b/pandas/tseries/tools.py
index c3cff335b..f839f3ba6 100644
--- a/pandas/tseries/tools.py
+++ b/pandas/tseries/tools.py
@@ -113,7 +113,7 @@ qpat1 = re.compile(r'(\d)Q(\d\d)')
 qpat2 = re.compile(r'(\d\d)Q(\d)')
 ypat = re.compile(r'(\d\d\d\d)$')
 
-def parse_time_string(arg, freq=None):
+def parse_time_string(arg, freq=None, dayfirst=None, yearfirst=None):
     """
     Try hard to parse datetime string, leveraging dateutil plus some extra
     goodies like quarter recognition.
@@ -123,6 +123,10 @@ def parse_time_string(arg, freq=None):
     arg : basestring
     freq : str or DateOffset, default None
         Helps with interpreting time string if supplied
+    dayfirst : bool, default None
+        If None uses default from print_config
+    yearfirst : bool, default None
+        If None uses default from print_config
 
     Returns
     -------
@@ -196,8 +200,10 @@ def parse_time_string(arg, freq=None):
     if mresult:
         return mresult
 
-    dayfirst = print_config.date_dayfirst
-    yearfirst = print_config.date_yearfirst
+    if dayfirst is None:
+        dayfirst = print_config.date_dayfirst
+    if yearfirst is None:
+        yearfirst = print_config.date_yearfirst
 
     try:
         parsed = parse(arg, dayfirst=dayfirst, yearfirst=yearfirst)
@@ -272,4 +278,3 @@ def ole2datetime(oledt):
         raise Exception("Value is outside of acceptable range: %s " % val)
 
     return OLE_TIME_ZERO + timedelta(days=val)
-
