commit 95e1b844cac1b2524a9a8667209f2755ca7cca22
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri May 25 19:24:06 2012 -0400

    ENH: encode datetime objects as nanosecond timestamps using numpy machinery, close #1304

diff --git a/pandas/src/datetime.pxd b/pandas/src/datetime.pxd
index 3d27eee4e..835b8a067 100644
--- a/pandas/src/datetime.pxd
+++ b/pandas/src/datetime.pxd
@@ -57,7 +57,7 @@ cdef extern from "numpy/npy_common.h":
 
     ctypedef unsigned char npy_bool
 
-cdef extern from "np_datetime.h":
+cdef extern from "datetime/np_datetime.h":
 
     ctypedef enum PANDAS_DATETIMEUNIT:
         PANDAS_FR_Y
@@ -95,7 +95,7 @@ cdef extern from "np_datetime.h":
     int is_leapyear(int64_t year)
     PANDAS_DATETIMEUNIT get_datetime64_unit(object o)
 
-cdef extern from "np_datetime_strings.h":
+cdef extern from "datetime/np_datetime_strings.h":
 
     int parse_iso_8601_datetime(char *str, int len, PANDAS_DATETIMEUNIT unit,
                                 NPY_CASTING casting, pandas_datetimestruct *out,
diff --git a/pandas/src/np_datetime.c b/pandas/src/datetime/np_datetime.c
similarity index 99%
rename from pandas/src/np_datetime.c
rename to pandas/src/datetime/np_datetime.c
index d6afcbe53..ad2ffacbb 100644
--- a/pandas/src/np_datetime.c
+++ b/pandas/src/datetime/np_datetime.c
@@ -15,7 +15,7 @@
 /* #define localtime _localtime64 */
 /* #define time _time64 */
 
-#include <numpy/ndarrayobject.h>
+#include <numpy/arrayobject.h>
 #include <numpy/arrayscalars.h>
 #include "np_datetime.h"
 
diff --git a/pandas/src/np_datetime.h b/pandas/src/datetime/np_datetime.h
similarity index 100%
rename from pandas/src/np_datetime.h
rename to pandas/src/datetime/np_datetime.h
diff --git a/pandas/src/np_datetime_strings.c b/pandas/src/datetime/np_datetime_strings.c
similarity index 100%
rename from pandas/src/np_datetime_strings.c
rename to pandas/src/datetime/np_datetime_strings.c
diff --git a/pandas/src/np_datetime_strings.h b/pandas/src/datetime/np_datetime_strings.h
similarity index 100%
rename from pandas/src/np_datetime_strings.h
rename to pandas/src/datetime/np_datetime_strings.h
diff --git a/pandas/src/numpy_helper.h b/pandas/src/numpy_helper.h
index ef83ec266..e2f772ad4 100644
--- a/pandas/src/numpy_helper.h
+++ b/pandas/src/numpy_helper.h
@@ -1,5 +1,5 @@
 #include "Python.h"
-#include "numpy/ndarrayobject.h"
+#include "numpy/arrayobject.h"
 #include "numpy/arrayscalars.h"
 
 #ifndef PANDAS_INLINE
diff --git a/pandas/src/stdint.h b/pandas/src/stdint.h
index e9a139380..b0fd235ad 100644
--- a/pandas/src/stdint.h
+++ b/pandas/src/stdint.h
@@ -1,5 +1,10 @@
+#ifndef _PANDAS_STDINT_H_
+#define _PANDAS_STDINT_H_
+
 #if defined(_MSC_VER)
 #include "ms_stdint.h"
 #else
 #include <stdint.h>
 #endif
+
+#endif
diff --git a/pandas/src/ujson/python/objToJSON.c b/pandas/src/ujson/python/objToJSON.c
index f4bed8f86..86afccd35 100644
--- a/pandas/src/ujson/python/objToJSON.c
+++ b/pandas/src/ujson/python/objToJSON.c
@@ -1,8 +1,8 @@
-#include <py_defines.h>
-
 #define PY_ARRAY_UNIQUE_SYMBOL UJSON_NUMPY
 
+#include <Python.h>
 #include <numpy/arrayobject.h>
+#include <np_datetime.h>
 #include <numpy/halffloat.h>
 #include <stdio.h>
 #include <datetime.h>
@@ -190,33 +190,31 @@ static void *NpyDateTimeToINT64(JSOBJ _obj, JSONTypeContext *tc, void *outValue,
 
 static void *PyDateTimeToINT64(JSOBJ _obj, JSONTypeContext *tc, void *outValue, size_t *_outLen)
 {
+    pandas_datetimestruct dts;
     PyObject *obj = (PyObject *) _obj;
-    int y, m, d, h, mn, s, days;
-
-    y = PyDateTime_GET_YEAR(obj);
-    m = PyDateTime_GET_MONTH(obj);
-    d = PyDateTime_GET_DAY(obj);
-    h = PyDateTime_DATE_GET_HOUR(obj);
-    mn = PyDateTime_DATE_GET_MINUTE(obj);
-    s = PyDateTime_DATE_GET_SECOND(obj);
 
-    days = PyInt_AS_LONG(PyObject_CallMethod(PyDate_FromDate(y, m, 1), "toordinal", NULL)) - EPOCH_ORD + d - 1;
-    *( (JSINT64 *) outValue) = (((JSINT64) ((days * 24 + h) * 60 + mn)) * 60 + s);
+    dts.year = PyDateTime_GET_YEAR(obj);
+    dts.month = PyDateTime_GET_MONTH(obj);
+    dts.day = PyDateTime_GET_DAY(obj);
+    dts.hour = PyDateTime_DATE_GET_HOUR(obj);
+    dts.min = PyDateTime_DATE_GET_MINUTE(obj);
+    dts.sec = PyDateTime_DATE_GET_SECOND(obj);
+    dts.us = PyDateTime_DATE_GET_MICROSECOND(obj);
+    dts.ps = dts.as = 0;
+    *((JSINT64*)outValue) = (JSINT64) pandas_datetimestruct_to_datetime(PANDAS_FR_ns, &dts);
     return NULL;
 }
 
 static void *PyDateToINT64(JSOBJ _obj, JSONTypeContext *tc, void *outValue, size_t *_outLen)
 {
+    pandas_datetimestruct dts;
     PyObject *obj = (PyObject *) _obj;
-    int y, m, d, days;
-
-    y = PyDateTime_GET_YEAR(obj);
-    m = PyDateTime_GET_MONTH(obj);
-    d = PyDateTime_GET_DAY(obj);
-
-    days = PyInt_AS_LONG(PyObject_CallMethod(PyDate_FromDate(y, m, 1), "toordinal", NULL)) - EPOCH_ORD + d - 1;
-    *( (JSINT64 *) outValue) = ((JSINT64) days * 86400);
 
+    dts.year = PyDateTime_GET_YEAR(obj);
+    dts.month = PyDateTime_GET_MONTH(obj);
+    dts.day = PyDateTime_GET_DAY(obj);
+    dts.hour = dts.min = dts.sec = dts.ps = dts.as = 0;
+    *((JSINT64*)outValue) = (JSINT64) pandas_datetimestruct_to_datetime(PANDAS_FR_ns, &dts);
     return NULL;
 }
 
diff --git a/pandas/tests/test_ujson.py b/pandas/tests/test_ujson.py
index 3584e4eab..f2910ec7a 100644
--- a/pandas/tests/test_ujson.py
+++ b/pandas/tests/test_ujson.py
@@ -239,26 +239,35 @@ class UltraJSONTests(TestCase):
         self.assertEquals(input, ujson.decode(output))
         pass
 
-    def test_encodeDatetimeConversion(self):
-        ts = time.time()
-        input = datetime.datetime.fromtimestamp(ts)
-        output = ujson.encode(input)
-        expected = calendar.timegm(input.utctimetuple())
-        self.assertEquals(int(expected), json.loads(output))
-        self.assertEquals(int(expected), ujson.decode(output))
-        pass
-
-    def test_encodeDateConversion(self):
-        ts = time.time()
-        input = datetime.date.fromtimestamp(ts)
-
-        output = ujson.encode(input)
-        tup = ( input.year, input.month, input.day, 0, 0, 0 )
-
-        expected = calendar.timegm(tup)
-        self.assertEquals(int(expected), json.loads(output))
-        self.assertEquals(int(expected), ujson.decode(output))
-        pass
+    # def test_encodeDatetimeConversion(self):
+    #     ts = time.time()
+    #     input = datetime.datetime.fromtimestamp(ts)
+    #     output = ujson.encode(input)
+    #     expected = calendar.timegm(input.utctimetuple())
+    #     self.assertEquals(int(expected), json.loads(output))
+    #     self.assertEquals(int(expected), ujson.decode(output))
+    #     pass
+
+    # def test_encodeDateConversion(self):
+    #     ts = time.time()
+    #     input = datetime.date.fromtimestamp(ts)
+
+    #     output = ujson.encode(input)
+    #     tup = ( input.year, input.month, input.day, 0, 0, 0 )
+
+    #     expected = calendar.timegm(tup)
+    #     self.assertEquals(int(expected), json.loads(output))
+    #     self.assertEquals(int(expected), ujson.decode(output))
+
+    def test_datetime_nanosecond_unit(self):
+        from datetime import datetime
+        from pandas._tseries import Timestamp
+
+        val = datetime.now()
+        stamp = Timestamp(val)
+
+        roundtrip = ujson.decode(ujson.encode(val))
+        self.assert_(roundtrip == stamp.value)
 
     def test_encodeToUTF8(self):
         input = "\xe6\x97\xa5\xd1\x88"
diff --git a/setup.py b/setup.py
index c5c50b636..3b8cf1112 100755
--- a/setup.py
+++ b/setup.py
@@ -366,8 +366,8 @@ tseries_ext = Extension('pandas._tseries',
                       depends=tseries_depends + ['pandas/src/numpy_helper.h'],
                       sources=[srcpath('tseries', suffix=suffix),
                                'pandas/src/period.c',
-                               'pandas/src/np_datetime.c',
-                               'pandas/src/np_datetime_strings.c'],
+                               'pandas/src/datetime/np_datetime.c',
+                               'pandas/src/datetime/np_datetime_strings.c'],
                       include_dirs=[np.get_include()],
                       # pyrex_gdb=True,
                       # extra_compile_args=['-Wconversion']
@@ -387,18 +387,21 @@ sparse_ext = Extension('pandas._sparse',
                        include_dirs=[np.get_include()])
 
 npymath_info = get_info('npymath')
-                       
+
 npymath_libdir = npymath_info['library_dirs'][0]
 npymath_libdir = npymath_libdir.replace('\\\\', '\\')
-                       
+
 ujson_ext = Extension('pandas._ujson',
                       sources=['pandas/src/ujson/python/ujson.c',
                                'pandas/src/ujson/python/objToJSON.c',
                                'pandas/src/ujson/python/JSONtoObj.c',
                                'pandas/src/ujson/lib/ultrajsonenc.c',
-                               'pandas/src/ujson/lib/ultrajsondec.c'],
+                               'pandas/src/ujson/lib/ultrajsondec.c',
+                               'pandas/src/datetime/np_datetime.c'
+                               ],
                       include_dirs=['pandas/src/ujson/python',
                                     'pandas/src/ujson/lib',
+                                    'pandas/src/datetime',
                                     np.get_include()],
                       libraries=['npymath'],
                       library_dirs=[npymath_libdir],
