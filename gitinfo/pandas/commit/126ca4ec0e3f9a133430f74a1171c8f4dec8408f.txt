commit 126ca4ec0e3f9a133430f74a1171c8f4dec8408f
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Jun 13 23:22:19 2012 -0400

    BUG: handling of -1 NA markers in Categorical, make isnull/notnull work on cat, close #1457

diff --git a/pandas/core/common.py b/pandas/core/common.py
index b560c8978..87615a7ad 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -56,29 +56,36 @@ def isnull(obj):
         return lib.checknull(obj)
 
     from pandas.core.generic import PandasObject
-    from pandas import Series
     if isinstance(obj, np.ndarray):
-        if obj.dtype.kind in ('O', 'S'):
-            # Working around NumPy ticket 1542
-            shape = obj.shape
-            result = np.empty(shape, dtype=bool)
-            vec = lib.isnullobj(obj.ravel())
-            result[:] = vec.reshape(shape)
-
-            if isinstance(obj, Series):
-                result = Series(result, index=obj.index, copy=False)
-        elif obj.dtype == np.dtype('M8[ns]'):
-            # this is the NaT pattern
-            result = np.array(obj).view('i8') == lib.iNaT
-        else:
-            result = -np.isfinite(obj)
-        return result
+        return _isnull_ndarraylike(obj)
     elif isinstance(obj, PandasObject):
         # TODO: optimize for DataFrame, etc.
         return obj.apply(isnull)
+    elif hasattr(obj, '__array__'):
+        return _isnull_ndarraylike(obj)
     else:
         return obj is None
 
+def _isnull_ndarraylike(obj):
+    from pandas import Series
+    values = np.asarray(obj)
+
+    if values.dtype.kind in ('O', 'S'):
+        # Working around NumPy ticket 1542
+        shape = values.shape
+        result = np.empty(shape, dtype=bool)
+        vec = lib.isnullobj(values.ravel())
+        result[:] = vec.reshape(shape)
+
+        if isinstance(obj, Series):
+            result = Series(result, index=obj.index, copy=False)
+    elif values.dtype == np.dtype('M8[ns]'):
+        # this is the NaT pattern
+        result = values.view('i8') == lib.iNaT
+    else:
+        result = -np.isfinite(obj)
+    return result
+
 def notnull(obj):
     '''
     Replacement for numpy.isfinite / -numpy.isnan which is suitable
diff --git a/pandas/core/factor.py b/pandas/core/factor.py
index 6252cb4fd..188103c4d 100644
--- a/pandas/core/factor.py
+++ b/pandas/core/factor.py
@@ -76,7 +76,7 @@ class Categorical(object):
     __ge__ = _cat_compare_op('__ge__')
 
     def __array__(self, dtype=None):
-        return com.take_1d(self.levels, self.labels)
+        return com.take_1d(self.levels.values, self.labels)
 
     def __len__(self):
         return len(self.labels)
diff --git a/pandas/tests/test_factor.py b/pandas/tests/test_factor.py
index e61565f12..908346171 100644
--- a/pandas/tests/test_factor.py
+++ b/pandas/tests/test_factor.py
@@ -7,17 +7,18 @@ import nose
 import numpy as np
 
 from pandas.core.api import value_counts
-from pandas.core.factor import Factor
+from pandas.core.factor import Categorical
 from pandas.core.index import Index, Int64Index, MultiIndex
 from pandas.util.testing import assert_almost_equal
+import pandas.core.common as com
 
 import pandas.util.testing as tm
 
 
-class TestFactor(unittest.TestCase):
+class TestCategorical(unittest.TestCase):
 
     def setUp(self):
-        self.factor = Factor.from_array(['a', 'b', 'b', 'a',
+        self.factor = Categorical.from_array(['a', 'b', 'b', 'a',
                                          'a', 'c', 'c', 'c'])
 
     def test_getitem(self):
@@ -34,7 +35,7 @@ class TestFactor(unittest.TestCase):
         arr = np.array([1, 2, 3, datetime.now()], dtype='O')
 
         # it works!
-        factor = Factor.from_array(arr)
+        factor = Categorical.from_array(arr)
 
     def test_factor_agg(self):
         import pandas.core.frame as frame
@@ -89,12 +90,24 @@ class TestFactor(unittest.TestCase):
         arr = np.random.randn(4)
         factor = cut(arr, 4)
 
-        self.assert_(isinstance(factor, Factor))
+        self.assert_(isinstance(factor, Categorical))
 
         result = value_counts(factor)
         expected = value_counts(np.asarray(factor))
         tm.assert_series_equal(result, expected)
 
+    def test_na_flags_int_levels(self):
+        # #1457
+
+        levels = range(10)
+        labels = np.random.randint(0, 10, 20)
+        labels[::5] = -1
+
+        cat = Categorical(labels, levels)
+        repr(cat)
+
+        self.assert_(np.array_equal(com.isnull(cat), labels == -1))
+
 if __name__ == '__main__':
     import nose
     nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
