commit a2e86c20f893075ed8efe6c199507582c4880df6
Author: Wouter Overmeire <lodagro@gmail.com>
Date:   Mon Feb 20 12:28:18 2012 +0100

    BUG: Fix Series, DataFrame plot() for non numerical/datetime (Multi)Index (closes #741).

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 6d578c5fb..ff5cfff9e 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -3828,8 +3828,20 @@ class DataFrame(NDFrame):
 
         if kind == 'line':
             if use_index:
-                x = self.index
+                if self.index.is_numeric() or self.index.is_datetime():
+                    """
+                    Matplotlib supports numeric values or datetime objects as
+                    xaxis values. Taking LBYL approach here, by the time
+                    matplotlib raises exception when using non numeric/datetime
+                    values for xaxis, several actions are already taken by plt.
+                    """
+                    need_to_set_xticklabels = False
+                    x = self.index
+                else:
+                    need_to_set_xticklabels = True
+                    x = range(len(self))
             else:
+                need_to_set_xticklabels = False
                 x = range(len(self))
 
             for i, col in enumerate(_try_sort(self.columns)):
@@ -3847,6 +3859,12 @@ class DataFrame(NDFrame):
 
             if legend and not subplots:
                 ax.legend(loc='best')
+
+            if need_to_set_xticklabels:
+                xticklabels = [gfx._stringify(key) for key in self.index]
+                for ax_ in axes:
+                    ax_.set_xticks(x)
+                    ax_.set_xticklabels(xticklabels, rotation=rot)
         elif kind == 'bar':
             self._bar_plot(axes, subplots=subplots, grid=grid, rot=rot,
                            legend=legend)
@@ -3865,6 +3883,8 @@ class DataFrame(NDFrame):
 
     def _bar_plot(self, axes, subplots=False, use_index=True, grid=True,
                   rot=30, legend=True, **kwds):
+        import pandas.tools.plotting as gfx
+
         N, K = self.shape
         xinds = np.arange(N) + 0.25
         colors = 'rgbyk'
@@ -3894,7 +3914,9 @@ class DataFrame(NDFrame):
             fontsize = 10
 
         ax.set_xticks(xinds + 0.25)
-        ax.set_xticklabels(self.index, rotation=rot, fontsize=fontsize)
+        ax.set_xticklabels([gfx._stringify(key) for key in self.index],
+                           rotation=rot,
+                           fontsize=fontsize)
 
         if legend and not subplots:
             fig = ax.get_figure()
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 1d8e3f072..ea6e15612 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1,6 +1,6 @@
 # pylint: disable=E1101,E1103,W0232
 
-from datetime import time
+from datetime import time, datetime
 from itertools import izip
 
 import numpy as np
@@ -142,6 +142,15 @@ class Index(np.ndarray):
         except TypeError:
             return False
 
+    def is_numeric(self):
+        return issubclass(self.dtype.type, np.number)
+
+    def is_datetime(self):
+        for key in self.values:
+            if not isinstance(key, datetime):
+                return False
+        return True
+
     def get_duplicates(self):
         from collections import defaultdict
         counter = defaultdict(lambda: 0)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 714b74fea..fe91a6ba9 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -2076,8 +2076,20 @@ copy : boolean, default False
 
         if kind == 'line':
             if use_index:
-                x = np.asarray(self.index)
+                if self.index.is_numeric() or self.index.is_datetime():
+                    """
+                    Matplotlib supports numeric values or datetime objects as
+                    xaxis values. Taking LBYL approach here, by the time
+                    matplotlib raises exception when using non numeric/datetime
+                    values for xaxis, several actions are already taken by plt.
+                    """
+                    need_to_set_xticklabels = False
+                    x = np.asarray(self.index)
+                else:
+                    need_to_set_xticklabels = True
+                    x = range(len(self))
             else:
+                need_to_set_xticklabels = False
                 x = range(len(self))
 
             if logy:
@@ -2085,6 +2097,11 @@ copy : boolean, default False
             else:
                 ax.plot(x, self.values.astype(float), style, **kwds)
             gfx.format_date_labels(ax)
+
+            if need_to_set_xticklabels:
+                ax.set_xticks(x)
+                ax.set_xticklabels([gfx._stringify(key) for key in self.index],
+                                   rotation=rot)
         elif kind == 'bar':
             xinds = np.arange(N) + 0.25
             ax.bar(xinds, self.values.astype(float), 0.5,
@@ -2096,8 +2113,9 @@ copy : boolean, default False
                 fontsize = 10
 
             ax.set_xticks(xinds + 0.25)
-            ax.set_xticklabels(self.index, rotation=rot, fontsize=fontsize)
-
+            ax.set_xticklabels([gfx._stringify(key) for key in self.index],
+                               rotation=rot,
+                               fontsize=fontsize)
         ax.grid(grid)
         plt.draw_if_interactive()
 
diff --git a/pandas/tests/test_graphics.py b/pandas/tests/test_graphics.py
index 3253d7ca1..67e8a33e0 100644
--- a/pandas/tests/test_graphics.py
+++ b/pandas/tests/test_graphics.py
@@ -3,7 +3,7 @@ import os
 import string
 import unittest
 
-from pandas import Series, DataFrame
+from pandas import Series, DataFrame, MultiIndex
 import pandas.util.testing as tm
 
 import numpy as np
@@ -39,6 +39,7 @@ class TestSeriesPlots(unittest.TestCase):
         _check_plot_works(self.ts.plot, style='.', logy=True)
         _check_plot_works(self.ts[:10].plot, kind='bar')
         _check_plot_works(self.series[:5].plot, kind='bar')
+        _check_plot_works(self.series[:5].plot, kind='line')
 
     @slow
     def test_hist(self):
@@ -70,6 +71,15 @@ class TestDataFramePlots(unittest.TestCase):
         df = DataFrame({'x':[1,2], 'y':[3,4]})
         self._check_plot_fails(df.plot, kind='line', blarg=True)
 
+        df = DataFrame(np.random.rand(10, 3),
+                       index=list(string.ascii_letters[:10]))
+        _check_plot_works(df.plot, use_index=True)
+
+        tuples = zip(list(string.ascii_letters[:10]), range(10))
+        df = DataFrame(np.random.rand(10, 3),
+                       index=MultiIndex.from_tuples(tuples))
+        _check_plot_works(df.plot, use_index=True)
+
     @slow
     def test_plot_bar(self):
         df = DataFrame(np.random.randn(6, 4),
