commit 35d2b28d0bf69f1371c2f1360248760f5ac27c63
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Sep 9 17:31:30 2011 -0400

    ENH: skipna in Panel methods. need to unit test

diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index bb07d6500..f40b1b973 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -307,7 +307,7 @@ class NDFrame(PandasObject):
                                                method=fill_method)
         return self._constructor(new_data)
 
-    def cumsum(self, axis=None):
+    def cumsum(self, axis=None, skipna=True):
         """
         Return DataFrame of cumulative sums over requested axis.
 
@@ -315,6 +315,9 @@ class NDFrame(PandasObject):
         ----------
         axis : {0, 1}
             0 for row-wise, 1 for column-wise
+        skipna : boolean, default True
+            Exclude NA/null values. If an entire row/column is NA, the result
+            will be NA
 
         Returns
         -------
@@ -328,9 +331,14 @@ class NDFrame(PandasObject):
         y = self.values.copy()
         if not issubclass(y.dtype.type, np.int_):
             mask = np.isnan(self.values)
-            np.putmask(y, mask, 0.)
+
+            if skipna:
+                np.putmask(y, mask, 0.)
+
             result = y.cumsum(axis)
-            np.putmask(result, mask, np.nan)
+
+            if skipna:
+                np.putmask(result, mask, np.nan)
         else:
             result = y.cumsum(axis)
         return self._wrap_array(result, self.axes, copy=False)
@@ -338,7 +346,7 @@ class NDFrame(PandasObject):
     def _wrap_array(self, array, axes, copy=False):
         raise NotImplementedError
 
-    def cumprod(self, axis=None):
+    def cumprod(self, axis=None, skipna=True):
         """
         Return cumulative product over requested axis as DataFrame
 
@@ -346,6 +354,9 @@ class NDFrame(PandasObject):
         ----------
         axis : {0, 1}
             0 for row-wise, 1 for column-wise
+        skipna : boolean, default True
+            Exclude NA/null values. If an entire row/column is NA, the result
+            will be NA
 
         Returns
         -------
@@ -359,20 +370,24 @@ class NDFrame(PandasObject):
         y = self.values.copy()
         if not issubclass(y.dtype.type, np.int_):
             mask = np.isnan(self.values)
-            np.putmask(y, mask, 1.)
+
+            if skipna:
+                np.putmask(y, mask, 1.)
             result = y.cumprod(axis)
-            np.putmask(result, mask, np.nan)
+
+            if skipna:
+                np.putmask(result, mask, np.nan)
         else:
             result = y.cumprod(axis)
         return self._wrap_array(result, self.axes, copy=False)
 
-    def _values_aggregate(self, func, axis, fill_value):
+    def _values_aggregate(self, func, axis, fill_value, skipna=True):
         axis = self._get_axis_number(axis)
 
         values = self.values
         mask = np.isfinite(values)
 
-        if fill_value is not None:
+        if skipna and fill_value is not None:
             values = values.copy()
             values[-mask] = fill_value
 
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 766116fc4..043da9e40 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -61,11 +61,14 @@ def _panel_arith_method(op, name):
 
 
 _agg_doc = """
-Return %(desc)s over requested axis.%(na_info)s
+Return %(desc)s over requested axis
 
 Parameters
 ----------
 axis : {'items', 'major', 'minor'} or {0, 1, 2}
+skipna : boolean, default True
+    Exclude NA/null values. If an entire row/column is NA, the result
+    will be NA
 
 Returns
 -------
@@ -78,12 +81,9 @@ NA/null values are %s.
 If all values are NA, result will be NA"""
 
 
-def _add_docs(method, desc, outname, na_info=None):
-    if na_info is not None:
-        na_info = _na_info % na_info
-    else:
-        na_info = ''
-    doc = _agg_doc % locals()
+def _add_docs(method, desc, outname):
+    doc = _agg_doc % {'desc' : desc,
+                      'outname' : outname}
     method.__doc__ = doc
 
 class Panel(NDFrame):
@@ -766,7 +766,7 @@ class Panel(NDFrame):
         result = np.apply_along_axis(func, i, self.values)
         return self._wrap_result(result, axis=axis)
 
-    def _array_method(self, func, axis='major', fill_value=None):
+    def _array_method(self, func, axis='major', fill_value=None, skipna=True):
         """
         Parameters
         ----------
@@ -775,12 +775,15 @@ class Panel(NDFrame):
         axis : {'major', 'minor', 'items'}
         fill_value : boolean, default True
             Replace NaN values with specified first
+        skipna : boolean, default True
+            Exclude NA/null values. If an entire row/column is NA, the result
+            will be NA
 
         Returns
         -------
         y : DataFrame
         """
-        result = self._values_aggregate(func, axis, fill_value)
+        result = self._values_aggregate(func, axis, fill_value, skipna=skipna)
         return self._wrap_result(result, axis=axis)
 
     def _wrap_result(self, result, axis):
@@ -794,11 +797,15 @@ class Panel(NDFrame):
 
     def count(self, axis='major'):
         """
-        Return DataFrame of observation counts along desired axis
+        Return number of observations over requested axis.
+
+        Parameters
+        ----------
+        axis : {'items', 'major', 'minor'} or {0, 1, 2}
 
         Returns
         -------
-        y : DataFrame
+        count : DataFrame
         """
         i = self._get_axis_number(axis)
 
@@ -808,45 +815,28 @@ class Panel(NDFrame):
 
         return self._wrap_result(result, axis)
 
-    _add_docs(count, 'number of observations', 'count')
-
-    def sum(self, axis='major'):
-        """
-
-        Returns
-        -------
-        y : DataFrame
-        """
-        return self._array_method(np.sum, axis=axis, fill_value=0)
-
-    _add_docs(sum, 'sum', 'sum', na_info='excluded')
-
-    def mean(self, axis='major'):
-        """
+    def sum(self, axis='major', skipna=True):
+        return self._array_method(np.sum, axis=axis, fill_value=0,
+                                  skipna=skipna)
 
-        Returns
-        -------
-        y : DataFrame
-        """
-        return self.sum(axis=axis) / self.count(axis=axis)
+    _add_docs(sum, 'sum', 'sum')
 
-    _add_docs(mean, 'mean', 'mean', na_info='excluded')
+    def mean(self, axis='major', skipna=True):
+        the_sum = self.sum(axis=axis, skipna=skipna)
+        the_count = self.count(axis=axis)
+        return the_sum / the_count
 
-    def var(self, axis='major'):
-        """
+    _add_docs(mean, 'mean', 'mean')
 
-        Returns
-        -------
-        y : DataFrame
-        """
+    def var(self, axis='major', skipna=True):
         i = self._get_axis_number(axis)
-        index, columns = self._get_plane_axes(axis)
-
         y = np.array(self.values)
         mask = np.isnan(y)
 
         count = (-mask).sum(axis=i).astype(float)
-        y[mask] = 0
+
+        if skipna:
+            y[mask] = 0
 
         X = y.sum(axis=i)
         XX = (y ** 2).sum(axis=i)
@@ -855,58 +845,34 @@ class Panel(NDFrame):
 
         return self._wrap_result(theVar, axis)
 
-    _add_docs(var, 'unbiased variance', 'variance', na_info='excluded')
-
-    def std(self, axis='major'):
-        """
+    _add_docs(var, 'unbiased variance', 'variance')
 
-        Returns
-        -------
-        y : DataFrame
-        """
-        return self.var(axis=axis).apply(np.sqrt)
+    def std(self, axis='major', skipna=True):
+        return self.var(axis=axis, skipna=skipna).apply(np.sqrt)
 
-    _add_docs(std, 'unbiased standard deviation', 'stdev', na_info='excluded')
+    _add_docs(std, 'unbiased standard deviation', 'stdev')
 
-    def skew(self, axis='major'):
+    def skew(self, axis='major', skipna=True):
         raise NotImplementedError
 
-    def prod(self, axis='major'):
-        """
-
-        Returns
-        -------
-        y : DataFrame
-        """
-        return self._array_method(np.prod, axis=axis, fill_value=1)
+    def prod(self, axis='major', skipna=True):
+        return self._array_method(np.prod, axis=axis, fill_value=1,
+                                  skipna=skipna)
 
-    _add_docs(prod, 'product', 'prod', na_info='excluded')
+    _add_docs(prod, 'product', 'prod')
 
-    def compound(self, axis='major'):
-        """
-
-        Returns
-        -------
-        y : DataFrame
-        """
-        return (1 + self).prod(axis=axis) - 1
+    def compound(self, axis='major', skipna=True):
+        return (1 + self).prod(axis=axis, skipna=skipna) - 1
 
-    _add_docs(compound, 'compounded percentage', 'compounded',
-              na_info='excluded')
+    _add_docs(compound, 'compounded percentage', 'compounded')
 
     def median(self, axis='major'):
-        """
-
-        Returns
-        -------
-        y : DataFrame
-        """
         def f(arr):
             return _tseries.median(arr[common.notnull(arr)])
 
         return self.apply(f, axis=axis)
 
-    _add_docs(median, 'median', 'median', na_info='excluded')
+    _add_docs(median, 'median', 'median')
 
     def max(self, axis='major'):
         i = self._get_axis_number(axis)
@@ -914,16 +880,12 @@ class Panel(NDFrame):
         y = np.array(self.values)
         mask = np.isfinite(y)
 
-        fill_value = y.flat[mask.ravel()].min() - 1
-
-        y[-mask] = fill_value
-
+        y[-mask] = -np.inf
         result = y.max(axis=i)
-        result[result == fill_value] = np.NaN
-
+        result = np.where(np.isneginf(result), np.nan, result)
         return self._wrap_result(result, axis)
 
-    _add_docs(max, 'maximum', 'maximum', na_info='excluded')
+    _add_docs(max, 'maximum', 'maximum')
 
     def min(self, axis='major'):
         i = self._get_axis_number(axis)
@@ -931,16 +893,13 @@ class Panel(NDFrame):
         y = np.array(self.values)
         mask = np.isfinite(y)
 
-        fill_value = y.flat[mask.ravel()].max() + 1
-
-        y[-mask] = fill_value
+        y[-mask] = np.inf
 
         result = y.min(axis=i)
-        result[result == fill_value] = np.NaN
-
+        result = np.where(np.isinf(result), np.nan, result)
         return self._wrap_result(result, axis)
 
-    _add_docs(min, 'minimum', 'minimum', na_info='excluded')
+    _add_docs(min, 'minimum', 'minimum')
 
     def shift(self, lags, axis='major'):
         """
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index ef72d5615..d58b73b4e 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -42,13 +42,6 @@ class SafeForLongAndSparse(object):
     def test_iter(self):
         common.equalContents(list(self.panel), self.panel.items)
 
-    def _check_statistic(self, frame, name, alternative):
-        f = getattr(frame, name)
-
-        for i, ax in enumerate(['items', 'major', 'minor']):
-            result = f(axis=i)
-            assert_frame_equal(result, frame.apply(alternative, axis=ax))
-
     def test_count(self):
         f = lambda s: notnull(s).sum()
 
@@ -153,6 +146,13 @@ class SafeForLongAndSparse(object):
 
         self._check_statistic(self.panel, 'skew', f)
 
+    def _check_statistic(self, frame, name, alternative):
+        f = getattr(frame, name)
+
+        for i, ax in enumerate(['items', 'major', 'minor']):
+            result = f(axis=i)
+            assert_frame_equal(result, frame.apply(alternative, axis=ax))
+
 class SafeForSparse(object):
 
     @staticmethod
