commit 89ed0958157bd599ea5770e62093a52cc04f59ae
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Tue Feb 25 18:10:39 2020 -0800

    CLN: simplify+annotate _shallow_copy (#32244)

diff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py
index aa22527d8..67f2f05c8 100644
--- a/pandas/core/indexes/base.py
+++ b/pandas/core/indexes/base.py
@@ -8,7 +8,7 @@ import numpy as np
 
 from pandas._libs import algos as libalgos, index as libindex, lib
 import pandas._libs.join as libjoin
-from pandas._libs.lib import is_datetime_array
+from pandas._libs.lib import is_datetime_array, no_default
 from pandas._libs.tslibs import OutOfBoundsDatetime, Timestamp
 from pandas._libs.tslibs.period import IncompatibleFrequency
 from pandas._libs.tslibs.timezones import tz_compare
@@ -485,7 +485,7 @@ class Index(IndexOpsMixin, PandasObject):
         """
         return {k: getattr(self, k, None) for k in self._attributes}
 
-    def _shallow_copy(self, values=None, **kwargs):
+    def _shallow_copy(self, values=None, name: Label = no_default):
         """
         Create a new Index with the same class as the caller, don't copy the
         data, use the same object attributes with passed in attributes taking
@@ -496,16 +496,14 @@ class Index(IndexOpsMixin, PandasObject):
         Parameters
         ----------
         values : the values to create the new Index, optional
-        kwargs : updates the default attributes for this Index
+        name : Label, defaults to self.name
         """
+        name = self.name if name is no_default else name
+
         if values is None:
             values = self.values
 
-        attributes = self._get_attributes_dict()
-
-        attributes.update(kwargs)
-
-        return self._simple_new(values, **attributes)
+        return self._simple_new(values, name=name)
 
     def _shallow_copy_with_infer(self, values, **kwargs):
         """
diff --git a/pandas/core/indexes/category.py b/pandas/core/indexes/category.py
index caa6a9a93..603ec486d 100644
--- a/pandas/core/indexes/category.py
+++ b/pandas/core/indexes/category.py
@@ -7,6 +7,8 @@ from pandas._config import get_option
 
 from pandas._libs import index as libindex
 from pandas._libs.hashtable import duplicated_int64
+from pandas._libs.lib import no_default
+from pandas._typing import Label
 from pandas.util._decorators import Appender, cache_readonly
 
 from pandas.core.dtypes.common import (
@@ -264,13 +266,14 @@ class CategoricalIndex(ExtensionIndex, accessor.PandasDelegate):
     # --------------------------------------------------------------------
 
     @Appender(Index._shallow_copy.__doc__)
-    def _shallow_copy(self, values=None, **kwargs):
+    def _shallow_copy(self, values=None, name: Label = no_default):
+        name = self.name if name is no_default else name
+
         if values is None:
             values = self.values
 
         cat = Categorical(values, dtype=self.dtype)
 
-        name = kwargs.get("name", self.name)
         return type(self)._simple_new(cat, name=name)
 
     def _is_dtype_compat(self, other) -> bool:
diff --git a/pandas/core/indexes/datetimelike.py b/pandas/core/indexes/datetimelike.py
index 1b3b6934a..1abd58007 100644
--- a/pandas/core/indexes/datetimelike.py
+++ b/pandas/core/indexes/datetimelike.py
@@ -8,6 +8,7 @@ import numpy as np
 
 from pandas._libs import NaT, iNaT, join as libjoin, lib
 from pandas._libs.tslibs import timezones
+from pandas._typing import Label
 from pandas.compat.numpy import function as nv
 from pandas.errors import AbstractMethodError
 from pandas.util._decorators import Appender, cache_readonly
@@ -649,7 +650,9 @@ class DatetimeTimedeltaMixin(DatetimeIndexOpsMixin, Int64Index):
 
         self._data._freq = freq
 
-    def _shallow_copy(self, values=None, **kwargs):
+    def _shallow_copy(self, values=None, name: Label = lib.no_default):
+        name = self.name if name is lib.no_default else name
+
         if values is None:
             values = self._data
 
@@ -657,18 +660,16 @@ class DatetimeTimedeltaMixin(DatetimeIndexOpsMixin, Int64Index):
             values = values._data
         if isinstance(values, np.ndarray):
             # TODO: We would rather not get here
-            if kwargs.get("freq") is not None:
-                raise ValueError(kwargs)
             values = type(self._data)(values, dtype=self.dtype)
 
         attributes = self._get_attributes_dict()
 
-        if "freq" not in kwargs and self.freq is not None:
+        if self.freq is not None:
             if isinstance(values, (DatetimeArray, TimedeltaArray)):
                 if values.freq is None:
                     del attributes["freq"]
 
-        attributes.update(kwargs)
+        attributes["name"] = name
         return type(self)._simple_new(values, **attributes)
 
     # --------------------------------------------------------------------
@@ -738,9 +739,7 @@ class DatetimeTimedeltaMixin(DatetimeIndexOpsMixin, Int64Index):
             # this point, depending on the values.
 
             result._set_freq(None)
-            result = self._shallow_copy(
-                result._data, name=result.name, dtype=result.dtype, freq=None
-            )
+            result = self._shallow_copy(result._data, name=result.name)
             if result.freq is None:
                 result._set_freq("infer")
             return result
diff --git a/pandas/core/indexes/numeric.py b/pandas/core/indexes/numeric.py
index 367870f0e..06a26cc90 100644
--- a/pandas/core/indexes/numeric.py
+++ b/pandas/core/indexes/numeric.py
@@ -3,7 +3,7 @@ from typing import Any
 import numpy as np
 
 from pandas._libs import index as libindex, lib
-from pandas._typing import Dtype
+from pandas._typing import Dtype, Label
 from pandas.util._decorators import Appender, cache_readonly
 
 from pandas.core.dtypes.cast import astype_nansafe
@@ -103,7 +103,7 @@ class NumericIndex(Index):
         return self._maybe_cast_indexer(label)
 
     @Appender(Index._shallow_copy.__doc__)
-    def _shallow_copy(self, values=None, name=lib.no_default):
+    def _shallow_copy(self, values=None, name: Label = lib.no_default):
         name = name if name is not lib.no_default else self.name
 
         if values is not None and not self._can_hold_na and values.dtype.kind == "f":
diff --git a/pandas/core/indexes/period.py b/pandas/core/indexes/period.py
index 0b85433b6..c7c11c601 100644
--- a/pandas/core/indexes/period.py
+++ b/pandas/core/indexes/period.py
@@ -5,9 +5,11 @@ import weakref
 import numpy as np
 
 from pandas._libs import index as libindex
+from pandas._libs.lib import no_default
 from pandas._libs.tslibs import frequencies as libfrequencies, resolution
 from pandas._libs.tslibs.parsing import parse_time_string
 from pandas._libs.tslibs.period import Period
+from pandas._typing import Label
 from pandas.util._decorators import Appender, cache_readonly
 
 from pandas.core.dtypes.common import (
@@ -248,8 +250,10 @@ class PeriodIndex(DatetimeIndexOpsMixin, Int64Index):
         # used to avoid libreduction code paths, which raise or require conversion
         return True
 
-    def _shallow_copy(self, values=None, **kwargs):
+    def _shallow_copy(self, values=None, name: Label = no_default):
         # TODO: simplify, figure out type of values
+        name = name if name is not no_default else self.name
+
         if values is None:
             values = self._data
 
@@ -263,18 +267,7 @@ class PeriodIndex(DatetimeIndexOpsMixin, Int64Index):
                 # GH#30713 this should never be reached
                 raise TypeError(type(values), getattr(values, "dtype", None))
 
-        # We don't allow changing `freq` in _shallow_copy.
-        validate_dtype_freq(self.dtype, kwargs.get("freq"))
-        attributes = self._get_attributes_dict()
-
-        attributes.update(kwargs)
-        if not len(values) and "dtype" not in kwargs:
-            attributes["dtype"] = self.dtype
-        return self._simple_new(values, **attributes)
-
-    def _shallow_copy_with_infer(self, values=None, **kwargs):
-        """ we always want to return a PeriodIndex """
-        return self._shallow_copy(values=values, **kwargs)
+        return self._simple_new(values, name=name)
 
     def _maybe_convert_timedelta(self, other):
         """
diff --git a/pandas/core/indexes/range.py b/pandas/core/indexes/range.py
index d6752da6b..fa8551bc6 100644
--- a/pandas/core/indexes/range.py
+++ b/pandas/core/indexes/range.py
@@ -7,6 +7,8 @@ import warnings
 import numpy as np
 
 from pandas._libs import index as libindex
+from pandas._libs.lib import no_default
+from pandas._typing import Label
 import pandas.compat as compat
 from pandas.compat.numpy import function as nv
 from pandas.util._decorators import Appender, cache_readonly
@@ -385,13 +387,13 @@ class RangeIndex(Int64Index):
         return list(self._range)
 
     @Appender(Int64Index._shallow_copy.__doc__)
-    def _shallow_copy(self, values=None, **kwargs):
+    def _shallow_copy(self, values=None, name: Label = no_default):
+        name = self.name if name is no_default else name
+
         if values is None:
-            name = kwargs.get("name", self.name)
             return self._simple_new(self._range, name=name)
         else:
-            kwargs.setdefault("name", self.name)
-            return self._int64index._shallow_copy(values, **kwargs)
+            return Int64Index._simple_new(values, name=name)
 
     @Appender(Int64Index.copy.__doc__)
     def copy(self, name=None, deep=False, dtype=None, **kwargs):
diff --git a/pandas/tests/indexes/period/test_period.py b/pandas/tests/indexes/period/test_period.py
index 6479b14e9..40c7ffba4 100644
--- a/pandas/tests/indexes/period/test_period.py
+++ b/pandas/tests/indexes/period/test_period.py
@@ -128,15 +128,9 @@ class TestPeriodIndex(DatetimeLike):
     def test_shallow_copy_i8(self):
         # GH-24391
         pi = period_range("2018-01-01", periods=3, freq="2D")
-        result = pi._shallow_copy(pi.asi8, freq=pi.freq)
+        result = pi._shallow_copy(pi.asi8)
         tm.assert_index_equal(result, pi)
 
-    def test_shallow_copy_changing_freq_raises(self):
-        pi = period_range("2018-01-01", periods=3, freq="2D")
-        msg = "specified freq and dtype are different"
-        with pytest.raises(IncompatibleFrequency, match=msg):
-            pi._shallow_copy(pi, freq="H")
-
     def test_view_asi8(self):
         idx = PeriodIndex([], freq="M")
 
