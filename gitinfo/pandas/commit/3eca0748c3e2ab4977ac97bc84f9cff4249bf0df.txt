commit 3eca0748c3e2ab4977ac97bc84f9cff4249bf0df
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Nov 22 00:37:23 2011 -0500

    BUG: can pass level names to swaplevel, GH #379

diff --git a/RELEASE.rst b/RELEASE.rst
index 522c5f824..53ced7a54 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -135,6 +135,8 @@ pandas 0.5.1
   - Handle min_periods=0 case in moving window functions (GH #365)
   - Fixed corner cases in DataFrame.apply/pivot with empty DataFrame (GH #378)
   - Fixed repr exception when Series name is a tuple
+  - Always return DateRange from asfreq (GH #390)
+  -
 
 Thanks
 ------
diff --git a/pandas/core/index.py b/pandas/core/index.py
index e8609b9fb..3beab8088 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -2,7 +2,6 @@
 
 from datetime import time
 from itertools import izip
-import gc
 
 import numpy as np
 
@@ -1197,6 +1196,9 @@ class MultiIndex(Index):
         new_labels = list(self.labels)
         new_names = list(self.names)
 
+        i = self._get_level_number(i)
+        j = self._get_level_number(j)
+
         new_levels[i], new_levels[j] = new_levels[j], new_levels[i]
         new_labels[i], new_labels[j] = new_labels[j], new_labels[i]
         new_names[i], new_names[j] = new_names[j], new_names[i]
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index 4492a0c39..615f16061 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -495,10 +495,19 @@ class TestMultiLevel(unittest.TestCase):
 
     def test_swaplevel(self):
         swapped = self.frame['A'].swaplevel(0, 1)
+        swapped2 = self.frame['A'].swaplevel('first', 'second')
         self.assert_(not swapped.index.equals(self.frame.index))
+        assert_series_equal(swapped, swapped2)
 
         back = swapped.swaplevel(0, 1)
+        back2 = swapped.swaplevel('second', 'first')
         self.assert_(back.index.equals(self.frame.index))
+        assert_series_equal(back, back2)
+
+        ft = self.frame.T
+        swapped = ft.swaplevel('first', 'second', axis=1)
+        exp = self.frame.swaplevel('first', 'second').T
+        assert_frame_equal(swapped, exp)
 
     def test_swaplevel_panel(self):
         panel = Panel({'ItemA' : self.frame,
@@ -507,6 +516,7 @@ class TestMultiLevel(unittest.TestCase):
         result = panel.swaplevel(0, 1, axis='major')
         expected = panel.copy()
         expected.major_axis = expected.major_axis.swaplevel(0, 1)
+        tm.assert_panel_equal(result, expected)
 
     def test_insert_index(self):
         df = self.ymd[:5].T
