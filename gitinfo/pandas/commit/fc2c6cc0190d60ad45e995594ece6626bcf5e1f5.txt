commit fc2c6cc0190d60ad45e995594ece6626bcf5e1f5
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Nov 22 01:06:16 2010 -0500

    DataFrame.corrwith and unit test coverage

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index d96ab0ee6..778412f48 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -742,11 +742,66 @@ class DataFrame(Picklable, Groupable):
 
         return self._constructor(correl, index=cols, columns=cols)
 
-    def corr_with(self, other, axis=0):
+    def corrwith(self, other, axis=0, drop=False):
         """
+        Compute pairwise correlation between rows or columns of two DataFrame
+        objects.
 
+        Parameters
+        ----------
+        other : DataFrame
+        axis : int
+        drop : boolean, default False
+            Drop missing indices from result, default returns union of all
+
+        Returns
+        -------
+        correls : Series
         """
-        pass
+        com_index, com_cols = self._intersect_labels(other)
+
+        # feels hackish
+        if axis == 0:
+            result_index = com_index
+            if not drop:
+                result_index = self.columns.union(other.columns)
+        else:
+            result_index = com_cols
+            if not drop:
+                result_index = self.index.union(other.index)
+
+        left = self.reindex(index=com_index, columns=com_cols)
+        right = other.reindex(index=com_index, columns=com_cols)
+
+        # mask missing values
+        left += right * 0
+        right += left * 0
+
+        # demeaned data
+        ldem = left - left.mean(axis)
+        rdem = right - right.mean(axis)
+
+        num = (ldem * rdem).sum(axis)
+        dom = (left.count(axis) - 1) * left.std(axis) * right.std(axis)
+
+        correl = num / dom
+
+        if not drop:
+            correl = correl.reindex(result_index)
+
+        return correl
+
+    def _intersect_labels(self, other):
+        common_cols = self.columns
+        common_index = self.index
+
+        if not common_index.equals(other.index):
+            common_index = common_index.intersection(other.index)
+
+        if not common_cols.equals(other.columns):
+            common_cols = common_cols.intersection(other.columns)
+
+        return common_index, common_cols
 
     def dropEmptyRows(self, specificColumns=None):
         """
@@ -1567,6 +1622,10 @@ class DataFrame(Picklable, Groupable):
         axis : {0, 1}
             0 for row-wise, 1 for column-wise
 
+        Notes
+        -----
+        Also examines non-float data and checks for None and NaN in such data
+
         Returns
         -------
         Series or TimeSeries
@@ -1725,7 +1784,7 @@ class DataFrame(Picklable, Groupable):
         count = self.count(axis).astype(float)
 
         if not count.index.equals(summed.index):
-            count= count.reindex(summed.index)
+            count = count.reindex(summed.index)
 
         return summed / count
 
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 2ab297189..490f4388b 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -203,7 +203,7 @@ class Index(np.ndarray):
         if not hasattr(other, '__iter__'):
             raise Exception('Input must be iterable!')
 
-        if other is self:
+        if self.equals(other):
             return self
 
         theIntersection = sorted(set(self) & set(other))
@@ -213,7 +213,7 @@ class Index(np.ndarray):
         if not hasattr(other, '__iter__'):
             raise Exception('Input must be iterable!')
 
-        if other is self:
+        if self.equals(other):
             return Index([])
 
         otherArr = np.asarray(other)
diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index 7fa6c1d47..2df234740 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -11,7 +11,7 @@ import numpy as np
 
 import pandas.core.datetools as datetools
 from pandas.core.index import NULL_INDEX
-from pandas.core.api import DataFrame, Index, Series, notnull
+from pandas.core.api import DataFrame, DataMatrix, Index, Series, notnull
 
 from pandas.util.testing import (assert_almost_equal,
                                  assert_series_equal,
@@ -556,13 +556,19 @@ class TestDataFrame(unittest.TestCase):
 
         assert_frame_equal(self.tsframe, recons)
 
+        recons = self.klass.fromcsv(path, index_col=None)
+        assert(len(recons.cols()) == len(self.tsframe.cols()) + 1)
+
         os.remove(path)
 
     def test_toDataMatrix(self):
         dm = self.frame.toDataMatrix()
 
+        self.assert_(isinstance(dm, DataMatrix))
+
     def test_info(self):
-        pass
+        self.frame.info()
+        self.tsframe.info()
 
     def test_rows(self):
         self.assert_(self.tsframe.rows() is self.tsframe.index)
@@ -620,6 +626,11 @@ class TestDataFrame(unittest.TestCase):
 
         filled = rule_monthly.asfreq('WEEKDAY', fillMethod='pad')
 
+        # test does not blow up on length-0 DataFrame
+        zero_length = self.tsframe.reindex([])
+        result = zero_length.asfreq('EOM')
+        self.assert_(result is not zero_length)
+
     def test_asMatrix(self):
         frame = self.frame
         mat = frame.asMatrix()
@@ -660,6 +671,29 @@ class TestDataFrame(unittest.TestCase):
         assert_almost_equal(correls['A']['C'],
                             self.frame['A'].corr(self.frame['C']))
 
+    def test_corrwith(self):
+        a = self.tsframe
+        noise = Series(np.random.randn(len(a)), index=a.index)
+
+        b = self.tsframe + noise
+
+        # make sure order does not matter
+        b = b.reindex(columns=b.columns[::-1], index=b.index[::-1][10:])
+        del b['B']
+
+        colcorr = a.corrwith(b, axis=0)
+        assert_almost_equal(colcorr['A'], a['A'].corr(b['A']))
+
+        rowcorr = a.corrwith(b, axis=1)
+        assert_series_equal(rowcorr, a.T.corrwith(b.T, axis=0))
+
+        dropped = a.corrwith(b, axis=0, drop=True)
+        assert_almost_equal(dropped['A'], a['A'].corr(b['A']))
+        self.assert_('B' not in dropped)
+
+        dropped = a.corrwith(b, axis=1, drop=True)
+        self.assert_(a.index[-1] not in dropped.index)
+
     def test_dropEmptyRows(self):
         N = len(self.frame.index)
         mat = randn(N)
@@ -1252,6 +1286,9 @@ class TestDataFrame(unittest.TestCase):
         floored = self.frame.clip_lower(median)
         self.assert_(not (floored.values < median).any())
 
+        double = self.frame.clip(upper=median, lower=median)
+        self.assert_(not (double.values != median).any())
+
     def test_statistics(self):
         sumFrame = self.frame.apply(np.sum)
         for col, series in self.frame.iteritems():
@@ -1302,6 +1339,8 @@ class TestDataFrame(unittest.TestCase):
 
         self._check_statistic(self.frame, 'mean', f)
 
+        # TODO: unit test when have object data
+
     def test_median(self):
         def f(x):
             x = np.asarray(x)
diff --git a/pandas/stats/var.py b/pandas/stats/var.py
index 4ff6133aa..6f8b864cf 100644
--- a/pandas/stats/var.py
+++ b/pandas/stats/var.py
@@ -153,7 +153,7 @@ class VAR(object):
                 f_stat = ((ssr_reduced - ssr_full) / M) / (ssr_full / (N - K))
                 f_stats.append(f_stat)
 
-                p_value = 1 - f.cdf(f_stat, M, N - K)
+                p_value = f.sf(f_stat, M, N - K)
                 p_values.append(p_value)
 
             f_stat_dict[col] = Series(f_stats, self._columns)
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 7f73cbdc3..1c3caabf0 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -8,8 +8,23 @@ import sys
 from numpy.random import randn
 import numpy as np
 
-from pandas.core.api import (DateRange, Index, Series, DataFrame,
-                             DataMatrix, WidePanel)
+import pandas.core.index as index
+import pandas.core.daterange as daterange
+import pandas.core.series as series
+import pandas.core.frame as frame
+import pandas.core.matrix as matrix
+import pandas.core.panel as panel
+
+# to_reload = ['index', 'daterange', 'series', 'frame', 'matrix', 'panel']
+# for mod in to_reload:
+#     reload(locals()[mod])
+
+DateRange = daterange.DateRange
+Index = index.Index
+Series = series.Series
+DataFrame = frame.DataFrame
+DataMatrix = matrix.DataMatrix
+WidePanel = panel.WidePanel
 
 N = 30
 K = 4
