commit f742a66a9b1c5c7756ecfefb5d38c5fca14700b2
Author: Albert Villanova del Moral <albert.villanova@gmail.com>
Date:   Mon Feb 6 10:23:26 2017 -0500

    BUG: Fix downcast argument for DataFrame.fillna()
    
    closes #15277
    
    Author: Albert Villanova del Moral <albert.villanova@gmail.com>
    
    Closes #15278 from albertvillanova/fix-15277 and squashes the following commits:
    
    1b594a9 [Albert Villanova del Moral] Fix tab indentation
    631a2dc [Albert Villanova del Moral] Add whatsnew note
    d691954 [Albert Villanova del Moral] BUG: Fix downcast argument for DataFrame.fillna()

diff --git a/doc/source/whatsnew/v0.20.0.txt b/doc/source/whatsnew/v0.20.0.txt
index c6d757c68..16caef576 100644
--- a/doc/source/whatsnew/v0.20.0.txt
+++ b/doc/source/whatsnew/v0.20.0.txt
@@ -496,6 +496,7 @@ Bug Fixes
 - Bug in ``pd.read_csv()`` for the C engine where ``usecols`` were being indexed incorrectly with ``parse_dates`` (:issue:`14792`)
 - Incorrect dtyped ``Series`` was returned by comparison methods (e.g., ``lt``, ``gt``, ...) against a constant for an empty ``DataFrame`` (:issue:`15077`)
 - Bug in ``Series.dt.round`` inconsistent behaviour on NAT's with different arguments (:issue:`14940`)
+- Bug in ``DataFrame.fillna()`` where the argument ``downcast`` was ignored when fillna value was of type ``dict`` (:issue:`15277`)
 
 
 - Bug in ``.read_json()`` for Python 2 where ``lines=True`` and contents contain non-ascii unicode characters (:issue:`15132`)
@@ -509,7 +510,5 @@ Bug Fixes
 
 
 
-
-
 - Bug in ``DataFrame.boxplot`` where ``fontsize`` was not applied to the tick labels on both axes (:issue:`15108`)
 - Bug in ``Series.replace`` and ``DataFrame.replace`` which failed on empty replacement dicts (:issue:`15289`)
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 8074b167f..bb2664a5b 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -3347,7 +3347,7 @@ class NDFrame(PandasObject):
                     if k not in result:
                         continue
                     obj = result[k]
-                    obj.fillna(v, limit=limit, inplace=True)
+                    obj.fillna(v, limit=limit, inplace=True, downcast=downcast)
                 return result
             elif not is_list_like(value):
                 new_data = self._data.fillna(value=value, limit=limit,
diff --git a/pandas/tests/frame/test_missing.py b/pandas/tests/frame/test_missing.py
index a8c9c7295..eabdb7929 100644
--- a/pandas/tests/frame/test_missing.py
+++ b/pandas/tests/frame/test_missing.py
@@ -252,6 +252,20 @@ class TestDataFrameMissingData(tm.TestCase, TestData):
         result = df.fillna(value={'Date': df['Date2']})
         assert_frame_equal(result, expected)
 
+    def test_fillna_downcast(self):
+        # GH 15277
+        # infer int64 from float64
+        df = pd.DataFrame({'a': [1., np.nan]})
+        result = df.fillna(0, downcast='infer')
+        expected = pd.DataFrame({'a': [1, 0]})
+        assert_frame_equal(result, expected)
+
+        # infer int64 from float64 when fillna value is a dict
+        df = pd.DataFrame({'a': [1., np.nan]})
+        result = df.fillna({'a': 0}, downcast='infer')
+        expected = pd.DataFrame({'a': [1, 0]})
+        assert_frame_equal(result, expected)
+
     def test_fillna_dtype_conversion(self):
         # make sure that fillna on an empty frame works
         df = DataFrame(index=["A", "B", "C"], columns=[1, 2, 3, 4, 5])
diff --git a/pandas/tests/series/test_missing.py b/pandas/tests/series/test_missing.py
index 8cf0d190a..8c877ade6 100644
--- a/pandas/tests/series/test_missing.py
+++ b/pandas/tests/series/test_missing.py
@@ -273,6 +273,20 @@ class TestSeriesMissingData(TestData, tm.TestCase):
 
         assert_series_equal(filled, expected)
 
+    def test_fillna_downcast(self):
+        # GH 15277
+        # infer int64 from float64
+        s = pd.Series([1., np.nan])
+        result = s.fillna(0, downcast='infer')
+        expected = pd.Series([1, 0])
+        assert_series_equal(result, expected)
+
+        # infer int64 from float64 when fillna value is a dict
+        s = pd.Series([1., np.nan])
+        result = s.fillna({1: 0}, downcast='infer')
+        expected = pd.Series([1, 0])
+        assert_series_equal(result, expected)
+
     def test_fillna_int(self):
         s = Series(np.random.randint(-100, 100, 50))
         s.fillna(method='ffill', inplace=True)
