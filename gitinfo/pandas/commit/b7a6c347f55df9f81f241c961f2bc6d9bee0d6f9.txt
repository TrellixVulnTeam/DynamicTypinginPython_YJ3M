commit b7a6c347f55df9f81f241c961f2bc6d9bee0d6f9
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Oct 10 21:02:18 2011 -0400

    ENH: DataFrame.align function, speed up DataFrame arith, refactoring

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 4430bb607..e8da7c3cb 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -90,6 +90,7 @@ def comp_method(func, name):
 
     return f
 
+
 #----------------------------------------------------------------------
 # DataFrame class
 
@@ -1027,15 +1028,33 @@ class DataFrame(NDFrame):
         (left, right) : (Series, Series)
             Aligned Series
         """
-        join_index, ilidx, iridx = self.index.join(other.index, how=join,
-                                                   return_indexers=True)
-
-        # TODO: speed up on homogeneous DataFrame objects
-        join_columns, clidx, cridx = self.columns.join(other.columns, how=join,
+        if self.index.equals(other.index):
+            join_index = self.index
+            ilidx, iridx = None, None
+        else:
+            join_index, ilidx, iridx = self.index.join(other.index, how=join,
                                                        return_indexers=True)
 
+        if self.columns.equals(other.columns):
+            join_columns = self.columns
+            clidx, cridx = None, None
+        else:
+            join_columns, clidx, cridx = self.columns.join(other.columns,
+                                                           how=join,
+                                                           return_indexers=True)
+
         def _align_frame(frame, row_idx, col_idx):
             new_data = frame._data
+            if row_idx is not None:
+                new_data = new_data.reindex_indexer(join_index, row_idx, axis=1)
+
+            if col_idx is not None:
+                # TODO: speed up on homogeneous DataFrame objects
+                new_data = new_data.reindex_items(join_columns)
+
+            if copy and new_data is frame._data:
+                new_data = new_data.copy()
+
             return DataFrame(new_data)
 
         left = _align_frame(self, ilidx, clidx)
@@ -1477,7 +1496,8 @@ class DataFrame(NDFrame):
     # Arithmetic / combination related
 
     def _combine_frame(self, other, func, fill_value=None):
-        new_index = self.index.union(other.index)
+        this, other = self.align(other, join='outer', copy=False)
+        new_index, new_columns = this.index, this.columns
 
         # some shortcuts
         if fill_value is None:
@@ -1488,18 +1508,6 @@ class DataFrame(NDFrame):
             elif not other:
                 return self * nan
 
-        need_reindex = False
-        new_columns = self.columns.union(other.columns)
-        need_reindex = (need_reindex or not new_index.equals(self.index)
-                        or not new_index.equals(other.index))
-        need_reindex = (need_reindex or not new_columns.equals(self.columns)
-                        or not new_columns.equals(other.columns))
-
-        this = self
-        if need_reindex:
-            this = self.reindex(index=new_index, columns=new_columns)
-            other = other.reindex(index=new_index, columns=new_columns)
-
         this_vals = this.values
         other_vals = other.values
 
@@ -2275,21 +2283,7 @@ class DataFrame(NDFrame):
         this = self._get_numeric_data()
         other = other._get_numeric_data()
 
-        com_index = this._intersect_index(other)
-        com_cols = this._intersect_columns(other)
-
-        # feels hackish
-        if axis == 0:
-            result_index = com_index
-            if not drop:
-                result_index = this.columns.union(other.columns)
-        else:
-            result_index = com_cols
-            if not drop:
-                result_index = this.index.union(other.index)
-
-        left = this.reindex(index=com_index, columns=com_cols)
-        right = other.reindex(index=com_index, columns=com_cols)
+        left, right = this.align(other, join='inner', copy=False)
 
         # mask missing values
         left = left + right * 0
@@ -2309,6 +2303,8 @@ class DataFrame(NDFrame):
         correl = num / dom
 
         if not drop:
+            raxis = 1 if axis == 0 else 0
+            result_index = this._get_axis(raxis).union(other._get_axis(raxis))
             correl = correl.reindex(result_index)
 
         return correl
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index dea6c9d54..ff43280a8 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -580,6 +580,24 @@ class BlockManager(object):
         new_axes[axis] = new_axis
         return BlockManager(new_blocks, new_axes)
 
+    def reindex_indexer(self, new_axis, indexer, axis=1):
+        """
+        pandas-indexer with -1's only
+        """
+        if axis == 0:
+            raise NotImplementedError
+
+        new_axes = list(self.axes)
+        new_axes[axis] = new_axis
+        new_blocks = []
+        for blk in self.blocks:
+            new_values = common.take_fast(blk.values, indexer, None,
+                                          False, axis=axis)
+            newb = make_block(new_values, blk.items, self.items)
+            new_blocks.append(newb)
+
+        return BlockManager(new_blocks, new_axes)
+
     def reindex_items(self, new_items):
         """
 
@@ -617,16 +635,21 @@ class BlockManager(object):
 
         return BlockManager(new_blocks, new_axes)
 
-    def take(self, indices, axis=1):
+    def take(self, indexer, axis=1, pandas_indexer=False):
         if axis == 0:
             raise NotImplementedError
 
+        if pandas_indexer:
+            take_f = lambda arr: common.take_fast(arr, indexer,
+                                                  None, False, axis=axis)
+        else:
+            take_f = lambda arr: arr.take(indexer, axis=axis)
+
         new_axes = list(self.axes)
-        new_axes[axis] = self.axes[axis].take(indices)
+        new_axes[axis] = self.axes[axis].take(indexer)
         new_blocks = []
         for blk in self.blocks:
-            newb = make_block(blk.values.take(indices, axis=axis), blk.items,
-                              self.items)
+            newb = make_block(take_f(blk.values), blk.items, self.items)
             new_blocks.append(newb)
 
         return BlockManager(new_blocks, new_axes)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 2c56a374c..80f53372b 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1350,6 +1350,13 @@ copy : boolean, default False
         (left, right) : (Series, Series)
             Aligned Series
         """
+        if self.index.equals(other.index):
+            left, right = self, other
+            if copy:
+                left = left.copy()
+                right = right.copy()
+            return left, right
+
         join_index, lidx, ridx = self.index.join(other.index, how=join,
                                                  return_indexers=True)
 
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index f8b865ab7..5ad68539f 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -1025,6 +1025,11 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         rb[:2] = 5
         self.assert_((b[:2] == 5).all())
 
+    def test_align_sameindex(self):
+        a, b = self.ts.align(self.ts)
+        self.assert_(a.index is self.ts.index)
+        self.assert_(b.index is self.ts.index)
+
     def test_reindex(self):
         identity = self.series.reindex(self.series.index)
         self.assertEqual(id(self.series.index), id(identity.index))
