commit 2743ac075a8eccac26fc768596bc1e53394cd70d
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Aug 17 17:40:58 2011 -0400

    BUG: fixed mysterious major memory leak with method wrappers in groupby

diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index b683189d8..ad3c063d3 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -1,4 +1,5 @@
 from itertools import izip
+import sys
 import types
 
 import numpy as np
@@ -25,6 +26,18 @@ def groupby(obj, grouper, **kwds):
 
     return klass(obj, grouper, **kwds)
 
+class MethodWrapper(object):
+
+    def __init__(self, caller, name):
+        self.caller = caller
+        self.name = name
+
+    def __call__(self, *args, **kwargs):
+        def curried(x):
+            f = getattr(x, self.name)
+            return f(*args, **kwargs)
+        return self.caller(curried)
+
 class GroupBy(object):
     """
     Class for grouping and aggregating relational data.
@@ -65,14 +78,7 @@ class GroupBy(object):
         if not isinstance(f, types.MethodType):
             return self.aggregate(lambda self: getattr(self, name))
 
-        # return the class reference
-        f = getattr(type(self.obj), name)
-
-        def wrapper(*args, **kwargs):
-            curried = lambda self: f(self, *args, **kwargs)
-            return self.aggregate(curried)
-
-        return wrapper
+        return MethodWrapper(self.aggregate, name)
 
     @property
     def primary(self):
