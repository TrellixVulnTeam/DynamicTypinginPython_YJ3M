commit cae4616c2f8dac13f5230c6c195b3c7e6b69cb92
Author: doosik_bae <qoentlr37@naver.com>
Date:   Mon Dec 31 22:19:04 2018 +0900

    .ne fails if comparing a list of columns containing column name 'dtype' #22383 (#22416)

diff --git a/doc/source/whatsnew/v0.24.0.rst b/doc/source/whatsnew/v0.24.0.rst
index b82e8f048..1b39f6c24 100644
--- a/doc/source/whatsnew/v0.24.0.rst
+++ b/doc/source/whatsnew/v0.24.0.rst
@@ -1475,6 +1475,7 @@ Interval
 Indexing
 ^^^^^^^^
 
+- Bug in :meth:`DataFrame.ne` fails if columns contain column name "dtype" (:issue:`22383`)
 - The traceback from a ``KeyError`` when asking ``.loc`` for a single missing label is now shorter and more clear (:issue:`21557`)
 - :class:`PeriodIndex` now emits a ``KeyError`` when a malformed string is looked up, which is consistent with the behavior of :class:`DatetimeIndex` (:issue:`22803`)
 - When ``.ix`` is asked for a missing integer label in a :class:`MultiIndex` with a first level of integer type, it now raises a ``KeyError``, consistently with the case of a flat :class:`Int64Index`, rather than falling back to positional indexing (:issue:`21593`)
diff --git a/pandas/core/computation/expressions.py b/pandas/core/computation/expressions.py
index d44fae624..a91ef7592 100644
--- a/pandas/core/computation/expressions.py
+++ b/pandas/core/computation/expressions.py
@@ -10,6 +10,8 @@ import warnings
 
 import numpy as np
 
+from pandas.core.dtypes.generic import ABCDataFrame
+
 import pandas.core.common as com
 from pandas.core.computation.check import _NUMEXPR_INSTALLED
 from pandas.core.config import get_option
@@ -160,12 +162,12 @@ set_use_numexpr(get_option('compute.use_numexpr'))
 
 def _has_bool_dtype(x):
     try:
-        return x.dtype == bool
-    except AttributeError:
-        try:
+        if isinstance(x, ABCDataFrame):
             return 'bool' in x.dtypes
-        except AttributeError:
-            return isinstance(x, (bool, np.bool_))
+        else:
+            return x.dtype == bool
+    except AttributeError:
+        return isinstance(x, (bool, np.bool_))
 
 
 def _bool_arith_check(op_str, a, b, not_allowed=frozenset(('/', '//', '**')),
diff --git a/pandas/tests/test_expressions.py b/pandas/tests/test_expressions.py
index 4a61ce930..cc5ae9b15 100644
--- a/pandas/tests/test_expressions.py
+++ b/pandas/tests/test_expressions.py
@@ -443,3 +443,19 @@ class TestExpressions(object):
                     r = f(df, True)
                     e = fe(df, True)
                     tm.assert_frame_equal(r, e)
+
+    @pytest.mark.parametrize("test_input,expected", [
+        (DataFrame([[0, 1, 2, 'aa'], [0, 1, 2, 'aa']],
+                   columns=['a', 'b', 'c', 'dtype']),
+         DataFrame([[False, False], [False, False]],
+                   columns=['a', 'dtype'])),
+        (DataFrame([[0, 3, 2, 'aa'], [0, 4, 2, 'aa'], [0, 1, 1, 'bb']],
+                   columns=['a', 'b', 'c', 'dtype']),
+         DataFrame([[False, False], [False, False],
+                   [False, False]], columns=['a', 'dtype'])),
+    ])
+    def test_bool_ops_column_name_dtype(self, test_input, expected):
+        # GH 22383 - .ne fails if columns containing column name 'dtype'
+        result = test_input.loc[:, ['a', 'dtype']].ne(
+            test_input.loc[:, ['a', 'dtype']])
+        assert_frame_equal(result, expected)
