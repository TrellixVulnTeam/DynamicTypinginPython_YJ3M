commit 6e37f8782fcc192cf21f4d989588ea665becb616
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Sun Feb 18 08:09:44 2018 -0800

    collect index formatting tests (#19661)

diff --git a/pandas/tests/indexes/datetimes/test_formats.py b/pandas/tests/indexes/datetimes/test_formats.py
index ea2731f66..0d1a9e65c 100644
--- a/pandas/tests/indexes/datetimes/test_formats.py
+++ b/pandas/tests/indexes/datetimes/test_formats.py
@@ -1,6 +1,10 @@
-from pandas import DatetimeIndex
+from datetime import datetime
+from pandas import DatetimeIndex, Series
 
 import numpy as np
+import dateutil.tz
+import pytz
+import pytest
 
 import pandas.util.testing as tm
 import pandas as pd
@@ -45,3 +49,172 @@ def test_to_native_types():
 
     result = index.to_native_types(na_rep='pandas')
     tm.assert_numpy_array_equal(result, expected)
+
+
+class TestDatetimeIndexRendering(object):
+    def test_dti_repr_short(self):
+        dr = pd.date_range(start='1/1/2012', periods=1)
+        repr(dr)
+
+        dr = pd.date_range(start='1/1/2012', periods=2)
+        repr(dr)
+
+        dr = pd.date_range(start='1/1/2012', periods=3)
+        repr(dr)
+
+    @pytest.mark.parametrize('method', ['__repr__', '__unicode__', '__str__'])
+    def test_dti_representation(self, method):
+        idxs = []
+        idxs.append(DatetimeIndex([], freq='D'))
+        idxs.append(DatetimeIndex(['2011-01-01'], freq='D'))
+        idxs.append(DatetimeIndex(['2011-01-01', '2011-01-02'], freq='D'))
+        idxs.append(DatetimeIndex(['2011-01-01', '2011-01-02', '2011-01-03'],
+                                  freq='D'))
+        idxs.append(DatetimeIndex(
+            ['2011-01-01 09:00', '2011-01-01 10:00', '2011-01-01 11:00'
+             ], freq='H', tz='Asia/Tokyo'))
+        idxs.append(DatetimeIndex(
+            ['2011-01-01 09:00', '2011-01-01 10:00', pd.NaT], tz='US/Eastern'))
+        idxs.append(DatetimeIndex(
+            ['2011-01-01 09:00', '2011-01-01 10:00', pd.NaT], tz='UTC'))
+
+        exp = []
+        exp.append("""DatetimeIndex([], dtype='datetime64[ns]', freq='D')""")
+        exp.append("DatetimeIndex(['2011-01-01'], dtype='datetime64[ns]', "
+                   "freq='D')")
+        exp.append("DatetimeIndex(['2011-01-01', '2011-01-02'], "
+                   "dtype='datetime64[ns]', freq='D')")
+        exp.append("DatetimeIndex(['2011-01-01', '2011-01-02', '2011-01-03'], "
+                   "dtype='datetime64[ns]', freq='D')")
+        exp.append("DatetimeIndex(['2011-01-01 09:00:00+09:00', "
+                   "'2011-01-01 10:00:00+09:00', '2011-01-01 11:00:00+09:00']"
+                   ", dtype='datetime64[ns, Asia/Tokyo]', freq='H')")
+        exp.append("DatetimeIndex(['2011-01-01 09:00:00-05:00', "
+                   "'2011-01-01 10:00:00-05:00', 'NaT'], "
+                   "dtype='datetime64[ns, US/Eastern]', freq=None)")
+        exp.append("DatetimeIndex(['2011-01-01 09:00:00+00:00', "
+                   "'2011-01-01 10:00:00+00:00', 'NaT'], "
+                   "dtype='datetime64[ns, UTC]', freq=None)""")
+
+        with pd.option_context('display.width', 300):
+            for indx, expected in zip(idxs, exp):
+                result = getattr(indx, method)()
+                assert result == expected
+
+    def test_dti_representation_to_series(self):
+        idx1 = DatetimeIndex([], freq='D')
+        idx2 = DatetimeIndex(['2011-01-01'], freq='D')
+        idx3 = DatetimeIndex(['2011-01-01', '2011-01-02'], freq='D')
+        idx4 = DatetimeIndex(
+            ['2011-01-01', '2011-01-02', '2011-01-03'], freq='D')
+        idx5 = DatetimeIndex(['2011-01-01 09:00', '2011-01-01 10:00',
+                              '2011-01-01 11:00'], freq='H', tz='Asia/Tokyo')
+        idx6 = DatetimeIndex(['2011-01-01 09:00', '2011-01-01 10:00', pd.NaT],
+                             tz='US/Eastern')
+        idx7 = DatetimeIndex(['2011-01-01 09:00', '2011-01-02 10:15'])
+
+        exp1 = """Series([], dtype: datetime64[ns])"""
+
+        exp2 = ("0   2011-01-01\n"
+                "dtype: datetime64[ns]")
+
+        exp3 = ("0   2011-01-01\n"
+                "1   2011-01-02\n"
+                "dtype: datetime64[ns]")
+
+        exp4 = ("0   2011-01-01\n"
+                "1   2011-01-02\n"
+                "2   2011-01-03\n"
+                "dtype: datetime64[ns]")
+
+        exp5 = ("0   2011-01-01 09:00:00+09:00\n"
+                "1   2011-01-01 10:00:00+09:00\n"
+                "2   2011-01-01 11:00:00+09:00\n"
+                "dtype: datetime64[ns, Asia/Tokyo]")
+
+        exp6 = ("0   2011-01-01 09:00:00-05:00\n"
+                "1   2011-01-01 10:00:00-05:00\n"
+                "2                         NaT\n"
+                "dtype: datetime64[ns, US/Eastern]")
+
+        exp7 = ("0   2011-01-01 09:00:00\n"
+                "1   2011-01-02 10:15:00\n"
+                "dtype: datetime64[ns]")
+
+        with pd.option_context('display.width', 300):
+            for idx, expected in zip([idx1, idx2, idx3, idx4,
+                                      idx5, idx6, idx7],
+                                     [exp1, exp2, exp3, exp4,
+                                      exp5, exp6, exp7]):
+                result = repr(Series(idx))
+                assert result == expected
+
+    def test_dti_summary(self):
+        # GH#9116
+        idx1 = DatetimeIndex([], freq='D')
+        idx2 = DatetimeIndex(['2011-01-01'], freq='D')
+        idx3 = DatetimeIndex(['2011-01-01', '2011-01-02'], freq='D')
+        idx4 = DatetimeIndex(
+            ['2011-01-01', '2011-01-02', '2011-01-03'], freq='D')
+        idx5 = DatetimeIndex(['2011-01-01 09:00', '2011-01-01 10:00',
+                              '2011-01-01 11:00'],
+                             freq='H', tz='Asia/Tokyo')
+        idx6 = DatetimeIndex(['2011-01-01 09:00', '2011-01-01 10:00', pd.NaT],
+                             tz='US/Eastern')
+
+        exp1 = ("DatetimeIndex: 0 entries\n"
+                "Freq: D")
+
+        exp2 = ("DatetimeIndex: 1 entries, 2011-01-01 to 2011-01-01\n"
+                "Freq: D")
+
+        exp3 = ("DatetimeIndex: 2 entries, 2011-01-01 to 2011-01-02\n"
+                "Freq: D")
+
+        exp4 = ("DatetimeIndex: 3 entries, 2011-01-01 to 2011-01-03\n"
+                "Freq: D")
+
+        exp5 = ("DatetimeIndex: 3 entries, 2011-01-01 09:00:00+09:00 "
+                "to 2011-01-01 11:00:00+09:00\n"
+                "Freq: H")
+
+        exp6 = """DatetimeIndex: 3 entries, 2011-01-01 09:00:00-05:00 to NaT"""
+
+        for idx, expected in zip([idx1, idx2, idx3, idx4, idx5, idx6],
+                                 [exp1, exp2, exp3, exp4, exp5, exp6]):
+            result = idx.summary()
+            assert result == expected
+
+    def test_dti_business_repr(self):
+        # only really care that it works
+        repr(pd.bdate_range(datetime(2009, 1, 1), datetime(2010, 1, 1)))
+
+    def test_dti_business_summary(self):
+        rng = pd.bdate_range(datetime(2009, 1, 1), datetime(2010, 1, 1))
+        rng.summary()
+        rng[2:2].summary()
+
+    def test_dti_business_summary_pytz(self):
+        pd.bdate_range('1/1/2005', '1/1/2009', tz=pytz.utc).summary()
+
+    def test_dti_business_summary_dateutil(self):
+        pd.bdate_range('1/1/2005', '1/1/2009',
+                       tz=dateutil.tz.tzutc()).summary()
+
+    def test_dti_custom_business_repr(self):
+        # only really care that it works
+        repr(pd.bdate_range(datetime(2009, 1, 1), datetime(2010, 1, 1),
+                            freq='C'))
+
+    def test_dti_custom_business_summary(self):
+        rng = pd.bdate_range(datetime(2009, 1, 1), datetime(2010, 1, 1),
+                             freq='C')
+        rng.summary()
+        rng[2:2].summary()
+
+    def test_dti_custom_business_summary_pytz(self):
+        pd.bdate_range('1/1/2005', '1/1/2009', freq='C', tz=pytz.utc).summary()
+
+    def test_dti_custom_business_summary_dateutil(self):
+        pd.bdate_range('1/1/2005', '1/1/2009', freq='C',
+                       tz=dateutil.tz.tzutc()).summary()
diff --git a/pandas/tests/indexes/datetimes/test_misc.py b/pandas/tests/indexes/datetimes/test_misc.py
index 4a46c3b04..2013b5e6c 100644
--- a/pandas/tests/indexes/datetimes/test_misc.py
+++ b/pandas/tests/indexes/datetimes/test_misc.py
@@ -83,16 +83,6 @@ class TestTimeSeries(object):
                              '1970-01-03', '1970-01-04'])
         tm.assert_index_equal(idx, exp)
 
-    def test_datetimeindex_repr_short(self):
-        dr = date_range(start='1/1/2012', periods=1)
-        repr(dr)
-
-        dr = date_range(start='1/1/2012', periods=2)
-        repr(dr)
-
-        dr = date_range(start='1/1/2012', periods=3)
-        repr(dr)
-
 
 class TestDatetime64(object):
 
diff --git a/pandas/tests/indexes/datetimes/test_ops.py b/pandas/tests/indexes/datetimes/test_ops.py
index bc43b427f..b42cd4548 100644
--- a/pandas/tests/indexes/datetimes/test_ops.py
+++ b/pandas/tests/indexes/datetimes/test_ops.py
@@ -1,6 +1,4 @@
-import pytz
 import pytest
-import dateutil
 import warnings
 import numpy as np
 from datetime import datetime
@@ -153,130 +151,6 @@ class TestDatetimeIndexOps(Ops):
             tm.assert_raises_regex(ValueError, msg, np.repeat,
                                    rng, reps, axis=1)
 
-    def test_representation(self):
-
-        idx = []
-        idx.append(DatetimeIndex([], freq='D'))
-        idx.append(DatetimeIndex(['2011-01-01'], freq='D'))
-        idx.append(DatetimeIndex(['2011-01-01', '2011-01-02'], freq='D'))
-        idx.append(DatetimeIndex(
-            ['2011-01-01', '2011-01-02', '2011-01-03'], freq='D'))
-        idx.append(DatetimeIndex(
-            ['2011-01-01 09:00', '2011-01-01 10:00', '2011-01-01 11:00'
-             ], freq='H', tz='Asia/Tokyo'))
-        idx.append(DatetimeIndex(
-            ['2011-01-01 09:00', '2011-01-01 10:00', pd.NaT], tz='US/Eastern'))
-        idx.append(DatetimeIndex(
-            ['2011-01-01 09:00', '2011-01-01 10:00', pd.NaT], tz='UTC'))
-
-        exp = []
-        exp.append("""DatetimeIndex([], dtype='datetime64[ns]', freq='D')""")
-        exp.append("DatetimeIndex(['2011-01-01'], dtype='datetime64[ns]', "
-                   "freq='D')")
-        exp.append("DatetimeIndex(['2011-01-01', '2011-01-02'], "
-                   "dtype='datetime64[ns]', freq='D')")
-        exp.append("DatetimeIndex(['2011-01-01', '2011-01-02', '2011-01-03'], "
-                   "dtype='datetime64[ns]', freq='D')")
-        exp.append("DatetimeIndex(['2011-01-01 09:00:00+09:00', "
-                   "'2011-01-01 10:00:00+09:00', '2011-01-01 11:00:00+09:00']"
-                   ", dtype='datetime64[ns, Asia/Tokyo]', freq='H')")
-        exp.append("DatetimeIndex(['2011-01-01 09:00:00-05:00', "
-                   "'2011-01-01 10:00:00-05:00', 'NaT'], "
-                   "dtype='datetime64[ns, US/Eastern]', freq=None)")
-        exp.append("DatetimeIndex(['2011-01-01 09:00:00+00:00', "
-                   "'2011-01-01 10:00:00+00:00', 'NaT'], "
-                   "dtype='datetime64[ns, UTC]', freq=None)""")
-
-        with pd.option_context('display.width', 300):
-            for indx, expected in zip(idx, exp):
-                for func in ['__repr__', '__unicode__', '__str__']:
-                    result = getattr(indx, func)()
-                    assert result == expected
-
-    def test_representation_to_series(self):
-        idx1 = DatetimeIndex([], freq='D')
-        idx2 = DatetimeIndex(['2011-01-01'], freq='D')
-        idx3 = DatetimeIndex(['2011-01-01', '2011-01-02'], freq='D')
-        idx4 = DatetimeIndex(
-            ['2011-01-01', '2011-01-02', '2011-01-03'], freq='D')
-        idx5 = DatetimeIndex(['2011-01-01 09:00', '2011-01-01 10:00',
-                              '2011-01-01 11:00'], freq='H', tz='Asia/Tokyo')
-        idx6 = DatetimeIndex(['2011-01-01 09:00', '2011-01-01 10:00', pd.NaT],
-                             tz='US/Eastern')
-        idx7 = DatetimeIndex(['2011-01-01 09:00', '2011-01-02 10:15'])
-
-        exp1 = """Series([], dtype: datetime64[ns])"""
-
-        exp2 = ("0   2011-01-01\n"
-                "dtype: datetime64[ns]")
-
-        exp3 = ("0   2011-01-01\n"
-                "1   2011-01-02\n"
-                "dtype: datetime64[ns]")
-
-        exp4 = ("0   2011-01-01\n"
-                "1   2011-01-02\n"
-                "2   2011-01-03\n"
-                "dtype: datetime64[ns]")
-
-        exp5 = ("0   2011-01-01 09:00:00+09:00\n"
-                "1   2011-01-01 10:00:00+09:00\n"
-                "2   2011-01-01 11:00:00+09:00\n"
-                "dtype: datetime64[ns, Asia/Tokyo]")
-
-        exp6 = ("0   2011-01-01 09:00:00-05:00\n"
-                "1   2011-01-01 10:00:00-05:00\n"
-                "2                         NaT\n"
-                "dtype: datetime64[ns, US/Eastern]")
-
-        exp7 = ("0   2011-01-01 09:00:00\n"
-                "1   2011-01-02 10:15:00\n"
-                "dtype: datetime64[ns]")
-
-        with pd.option_context('display.width', 300):
-            for idx, expected in zip([idx1, idx2, idx3, idx4,
-                                      idx5, idx6, idx7],
-                                     [exp1, exp2, exp3, exp4,
-                                      exp5, exp6, exp7]):
-                result = repr(Series(idx))
-                assert result == expected
-
-    def test_summary(self):
-        # GH9116
-        idx1 = DatetimeIndex([], freq='D')
-        idx2 = DatetimeIndex(['2011-01-01'], freq='D')
-        idx3 = DatetimeIndex(['2011-01-01', '2011-01-02'], freq='D')
-        idx4 = DatetimeIndex(
-            ['2011-01-01', '2011-01-02', '2011-01-03'], freq='D')
-        idx5 = DatetimeIndex(['2011-01-01 09:00', '2011-01-01 10:00',
-                              '2011-01-01 11:00'],
-                             freq='H', tz='Asia/Tokyo')
-        idx6 = DatetimeIndex(['2011-01-01 09:00', '2011-01-01 10:00', pd.NaT],
-                             tz='US/Eastern')
-
-        exp1 = ("DatetimeIndex: 0 entries\n"
-                "Freq: D")
-
-        exp2 = ("DatetimeIndex: 1 entries, 2011-01-01 to 2011-01-01\n"
-                "Freq: D")
-
-        exp3 = ("DatetimeIndex: 2 entries, 2011-01-01 to 2011-01-02\n"
-                "Freq: D")
-
-        exp4 = ("DatetimeIndex: 3 entries, 2011-01-01 to 2011-01-03\n"
-                "Freq: D")
-
-        exp5 = ("DatetimeIndex: 3 entries, 2011-01-01 09:00:00+09:00 "
-                "to 2011-01-01 11:00:00+09:00\n"
-                "Freq: H")
-
-        exp6 = """DatetimeIndex: 3 entries, 2011-01-01 09:00:00-05:00 to NaT"""
-
-        for idx, expected in zip([idx1, idx2, idx3, idx4, idx5, idx6],
-                                 [exp1, exp2, exp3, exp4, exp5, exp6]):
-            result = idx.summary()
-            assert result == expected
-
     def test_resolution(self):
         for freq, expected in zip(['A', 'Q', 'M', 'D', 'H', 'T',
                                    'S', 'L', 'U'],
@@ -544,10 +418,6 @@ class TestBusinessDatetimeIndex(object):
         repr(cp)
         tm.assert_index_equal(cp, self.rng)
 
-    def test_repr(self):
-        # only really care that it works
-        repr(self.rng)
-
     def test_shift(self):
         shifted = self.rng.shift(5)
         assert shifted[0] == self.rng[5]
@@ -565,16 +435,6 @@ class TestBusinessDatetimeIndex(object):
         shifted = rng.shift(1, freq=BDay())
         assert shifted[0] == rng[0] + BDay()
 
-    def test_summary(self):
-        self.rng.summary()
-        self.rng[2:2].summary()
-
-    def test_summary_pytz(self):
-        bdate_range('1/1/2005', '1/1/2009', tz=pytz.utc).summary()
-
-    def test_summary_dateutil(self):
-        bdate_range('1/1/2005', '1/1/2009', tz=dateutil.tz.tzutc()).summary()
-
     def test_equals(self):
         assert not self.rng.equals(list(self.rng))
 
@@ -612,10 +472,6 @@ class TestCustomDatetimeIndex(object):
         repr(cp)
         tm.assert_index_equal(cp, self.rng)
 
-    def test_repr(self):
-        # only really care that it works
-        repr(self.rng)
-
     def test_shift(self):
 
         shifted = self.rng.shift(5)
@@ -640,16 +496,5 @@ class TestCustomDatetimeIndex(object):
         unpickled = tm.round_trip_pickle(self.rng)
         assert unpickled.offset is not None
 
-    def test_summary(self):
-        self.rng.summary()
-        self.rng[2:2].summary()
-
-    def test_summary_pytz(self):
-        bdate_range('1/1/2005', '1/1/2009', freq='C', tz=pytz.utc).summary()
-
-    def test_summary_dateutil(self):
-        bdate_range('1/1/2005', '1/1/2009', freq='C',
-                    tz=dateutil.tz.tzutc()).summary()
-
     def test_equals(self):
         assert not self.rng.equals(list(self.rng))
diff --git a/pandas/tests/indexes/period/test_formats.py b/pandas/tests/indexes/period/test_formats.py
index 533481ce0..b1a1060bf 100644
--- a/pandas/tests/indexes/period/test_formats.py
+++ b/pandas/tests/indexes/period/test_formats.py
@@ -1,6 +1,7 @@
 from pandas import PeriodIndex
 
 import numpy as np
+import pytest
 
 import pandas.util.testing as tm
 import pandas as pd
@@ -46,3 +47,163 @@ def test_to_native_types():
 
     result = index.to_native_types(na_rep='pandas')
     tm.assert_numpy_array_equal(result, expected)
+
+
+class TestPeriodIndexRendering(object):
+    @pytest.mark.parametrize('method', ['__repr__', '__unicode__', '__str__'])
+    def test_representation(self, method):
+        # GH#7601
+        idx1 = PeriodIndex([], freq='D')
+        idx2 = PeriodIndex(['2011-01-01'], freq='D')
+        idx3 = PeriodIndex(['2011-01-01', '2011-01-02'], freq='D')
+        idx4 = PeriodIndex(['2011-01-01', '2011-01-02', '2011-01-03'],
+                           freq='D')
+        idx5 = PeriodIndex(['2011', '2012', '2013'], freq='A')
+        idx6 = PeriodIndex(['2011-01-01 09:00', '2012-02-01 10:00', 'NaT'],
+                           freq='H')
+        idx7 = pd.period_range('2013Q1', periods=1, freq="Q")
+        idx8 = pd.period_range('2013Q1', periods=2, freq="Q")
+        idx9 = pd.period_range('2013Q1', periods=3, freq="Q")
+        idx10 = PeriodIndex(['2011-01-01', '2011-02-01'], freq='3D')
+
+        exp1 = """PeriodIndex([], dtype='period[D]', freq='D')"""
+
+        exp2 = """PeriodIndex(['2011-01-01'], dtype='period[D]', freq='D')"""
+
+        exp3 = ("PeriodIndex(['2011-01-01', '2011-01-02'], dtype='period[D]', "
+                "freq='D')")
+
+        exp4 = ("PeriodIndex(['2011-01-01', '2011-01-02', '2011-01-03'], "
+                "dtype='period[D]', freq='D')")
+
+        exp5 = ("PeriodIndex(['2011', '2012', '2013'], dtype='period[A-DEC]', "
+                "freq='A-DEC')")
+
+        exp6 = ("PeriodIndex(['2011-01-01 09:00', '2012-02-01 10:00', 'NaT'], "
+                "dtype='period[H]', freq='H')")
+
+        exp7 = ("PeriodIndex(['2013Q1'], dtype='period[Q-DEC]', "
+                "freq='Q-DEC')")
+
+        exp8 = ("PeriodIndex(['2013Q1', '2013Q2'], dtype='period[Q-DEC]', "
+                "freq='Q-DEC')")
+
+        exp9 = ("PeriodIndex(['2013Q1', '2013Q2', '2013Q3'], "
+                "dtype='period[Q-DEC]', freq='Q-DEC')")
+
+        exp10 = ("PeriodIndex(['2011-01-01', '2011-02-01'], "
+                 "dtype='period[3D]', freq='3D')")
+
+        for idx, expected in zip([idx1, idx2, idx3, idx4, idx5,
+                                  idx6, idx7, idx8, idx9, idx10],
+                                 [exp1, exp2, exp3, exp4, exp5,
+                                  exp6, exp7, exp8, exp9, exp10]):
+            result = getattr(idx, method)()
+            assert result == expected
+
+    def test_representation_to_series(self):
+        # GH#10971
+        idx1 = PeriodIndex([], freq='D')
+        idx2 = PeriodIndex(['2011-01-01'], freq='D')
+        idx3 = PeriodIndex(['2011-01-01', '2011-01-02'], freq='D')
+        idx4 = PeriodIndex(['2011-01-01', '2011-01-02', '2011-01-03'],
+                           freq='D')
+        idx5 = PeriodIndex(['2011', '2012', '2013'], freq='A')
+        idx6 = PeriodIndex(['2011-01-01 09:00', '2012-02-01 10:00', 'NaT'],
+                           freq='H')
+
+        idx7 = pd.period_range('2013Q1', periods=1, freq="Q")
+        idx8 = pd.period_range('2013Q1', periods=2, freq="Q")
+        idx9 = pd.period_range('2013Q1', periods=3, freq="Q")
+
+        exp1 = """Series([], dtype: object)"""
+
+        exp2 = """0   2011-01-01
+dtype: object"""
+
+        exp3 = """0   2011-01-01
+1   2011-01-02
+dtype: object"""
+
+        exp4 = """0   2011-01-01
+1   2011-01-02
+2   2011-01-03
+dtype: object"""
+
+        exp5 = """0   2011
+1   2012
+2   2013
+dtype: object"""
+
+        exp6 = """0   2011-01-01 09:00
+1   2012-02-01 10:00
+2                NaT
+dtype: object"""
+
+        exp7 = """0   2013Q1
+dtype: object"""
+
+        exp8 = """0   2013Q1
+1   2013Q2
+dtype: object"""
+
+        exp9 = """0   2013Q1
+1   2013Q2
+2   2013Q3
+dtype: object"""
+
+        for idx, expected in zip([idx1, idx2, idx3, idx4, idx5,
+                                  idx6, idx7, idx8, idx9],
+                                 [exp1, exp2, exp3, exp4, exp5,
+                                  exp6, exp7, exp8, exp9]):
+            result = repr(pd.Series(idx))
+            assert result == expected
+
+    def test_summary(self):
+        # GH#9116
+        idx1 = PeriodIndex([], freq='D')
+        idx2 = PeriodIndex(['2011-01-01'], freq='D')
+        idx3 = PeriodIndex(['2011-01-01', '2011-01-02'], freq='D')
+        idx4 = PeriodIndex(['2011-01-01', '2011-01-02', '2011-01-03'],
+                           freq='D')
+        idx5 = PeriodIndex(['2011', '2012', '2013'], freq='A')
+        idx6 = PeriodIndex(['2011-01-01 09:00', '2012-02-01 10:00', 'NaT'],
+                           freq='H')
+
+        idx7 = pd.period_range('2013Q1', periods=1, freq="Q")
+        idx8 = pd.period_range('2013Q1', periods=2, freq="Q")
+        idx9 = pd.period_range('2013Q1', periods=3, freq="Q")
+
+        exp1 = """PeriodIndex: 0 entries
+Freq: D"""
+
+        exp2 = """PeriodIndex: 1 entries, 2011-01-01 to 2011-01-01
+Freq: D"""
+
+        exp3 = """PeriodIndex: 2 entries, 2011-01-01 to 2011-01-02
+Freq: D"""
+
+        exp4 = """PeriodIndex: 3 entries, 2011-01-01 to 2011-01-03
+Freq: D"""
+
+        exp5 = """PeriodIndex: 3 entries, 2011 to 2013
+Freq: A-DEC"""
+
+        exp6 = """PeriodIndex: 3 entries, 2011-01-01 09:00 to NaT
+Freq: H"""
+
+        exp7 = """PeriodIndex: 1 entries, 2013Q1 to 2013Q1
+Freq: Q-DEC"""
+
+        exp8 = """PeriodIndex: 2 entries, 2013Q1 to 2013Q2
+Freq: Q-DEC"""
+
+        exp9 = """PeriodIndex: 3 entries, 2013Q1 to 2013Q3
+Freq: Q-DEC"""
+
+        for idx, expected in zip([idx1, idx2, idx3, idx4, idx5,
+                                  idx6, idx7, idx8, idx9],
+                                 [exp1, exp2, exp3, exp4, exp5,
+                                  exp6, exp7, exp8, exp9]):
+            result = idx.summary()
+            assert result == expected
diff --git a/pandas/tests/indexes/period/test_indexing.py b/pandas/tests/indexes/period/test_indexing.py
index 6cb4226df..b91393419 100644
--- a/pandas/tests/indexes/period/test_indexing.py
+++ b/pandas/tests/indexes/period/test_indexing.py
@@ -14,9 +14,6 @@ from pandas._libs.tslibs import period as libperiod
 
 class TestGetItem(object):
 
-    def setup_method(self, method):
-        pass
-
     def test_getitem(self):
         idx1 = pd.period_range('2011-01-01', '2011-01-31', freq='D',
                                name='idx')
diff --git a/pandas/tests/indexes/period/test_ops.py b/pandas/tests/indexes/period/test_ops.py
index 6c272864e..3b6641bc7 100644
--- a/pandas/tests/indexes/period/test_ops.py
+++ b/pandas/tests/indexes/period/test_ops.py
@@ -79,164 +79,6 @@ class TestPeriodIndexOps(Ops):
             tm.assert_raises_regex(
                 ValueError, errmsg, np.argmax, pr, out=0)
 
-    def test_representation(self):
-        # GH 7601
-        idx1 = PeriodIndex([], freq='D')
-        idx2 = PeriodIndex(['2011-01-01'], freq='D')
-        idx3 = PeriodIndex(['2011-01-01', '2011-01-02'], freq='D')
-        idx4 = PeriodIndex(['2011-01-01', '2011-01-02', '2011-01-03'],
-                           freq='D')
-        idx5 = PeriodIndex(['2011', '2012', '2013'], freq='A')
-        idx6 = PeriodIndex(['2011-01-01 09:00', '2012-02-01 10:00',
-                            'NaT'], freq='H')
-        idx7 = pd.period_range('2013Q1', periods=1, freq="Q")
-        idx8 = pd.period_range('2013Q1', periods=2, freq="Q")
-        idx9 = pd.period_range('2013Q1', periods=3, freq="Q")
-        idx10 = PeriodIndex(['2011-01-01', '2011-02-01'], freq='3D')
-
-        exp1 = """PeriodIndex([], dtype='period[D]', freq='D')"""
-
-        exp2 = """PeriodIndex(['2011-01-01'], dtype='period[D]', freq='D')"""
-
-        exp3 = ("PeriodIndex(['2011-01-01', '2011-01-02'], dtype='period[D]', "
-                "freq='D')")
-
-        exp4 = ("PeriodIndex(['2011-01-01', '2011-01-02', '2011-01-03'], "
-                "dtype='period[D]', freq='D')")
-
-        exp5 = ("PeriodIndex(['2011', '2012', '2013'], dtype='period[A-DEC]', "
-                "freq='A-DEC')")
-
-        exp6 = ("PeriodIndex(['2011-01-01 09:00', '2012-02-01 10:00', 'NaT'], "
-                "dtype='period[H]', freq='H')")
-
-        exp7 = ("PeriodIndex(['2013Q1'], dtype='period[Q-DEC]', "
-                "freq='Q-DEC')")
-
-        exp8 = ("PeriodIndex(['2013Q1', '2013Q2'], dtype='period[Q-DEC]', "
-                "freq='Q-DEC')")
-
-        exp9 = ("PeriodIndex(['2013Q1', '2013Q2', '2013Q3'], "
-                "dtype='period[Q-DEC]', freq='Q-DEC')")
-
-        exp10 = ("PeriodIndex(['2011-01-01', '2011-02-01'], "
-                 "dtype='period[3D]', freq='3D')")
-
-        for idx, expected in zip([idx1, idx2, idx3, idx4, idx5,
-                                  idx6, idx7, idx8, idx9, idx10],
-                                 [exp1, exp2, exp3, exp4, exp5,
-                                  exp6, exp7, exp8, exp9, exp10]):
-            for func in ['__repr__', '__unicode__', '__str__']:
-                result = getattr(idx, func)()
-                assert result == expected
-
-    def test_representation_to_series(self):
-        # GH 10971
-        idx1 = PeriodIndex([], freq='D')
-        idx2 = PeriodIndex(['2011-01-01'], freq='D')
-        idx3 = PeriodIndex(['2011-01-01', '2011-01-02'], freq='D')
-        idx4 = PeriodIndex(['2011-01-01', '2011-01-02',
-                            '2011-01-03'], freq='D')
-        idx5 = PeriodIndex(['2011', '2012', '2013'], freq='A')
-        idx6 = PeriodIndex(['2011-01-01 09:00', '2012-02-01 10:00',
-                            'NaT'], freq='H')
-
-        idx7 = pd.period_range('2013Q1', periods=1, freq="Q")
-        idx8 = pd.period_range('2013Q1', periods=2, freq="Q")
-        idx9 = pd.period_range('2013Q1', periods=3, freq="Q")
-
-        exp1 = """Series([], dtype: object)"""
-
-        exp2 = """0   2011-01-01
-dtype: object"""
-
-        exp3 = """0   2011-01-01
-1   2011-01-02
-dtype: object"""
-
-        exp4 = """0   2011-01-01
-1   2011-01-02
-2   2011-01-03
-dtype: object"""
-
-        exp5 = """0   2011
-1   2012
-2   2013
-dtype: object"""
-
-        exp6 = """0   2011-01-01 09:00
-1   2012-02-01 10:00
-2                NaT
-dtype: object"""
-
-        exp7 = """0   2013Q1
-dtype: object"""
-
-        exp8 = """0   2013Q1
-1   2013Q2
-dtype: object"""
-
-        exp9 = """0   2013Q1
-1   2013Q2
-2   2013Q3
-dtype: object"""
-
-        for idx, expected in zip([idx1, idx2, idx3, idx4, idx5,
-                                  idx6, idx7, idx8, idx9],
-                                 [exp1, exp2, exp3, exp4, exp5,
-                                  exp6, exp7, exp8, exp9]):
-            result = repr(pd.Series(idx))
-            assert result == expected
-
-    def test_summary(self):
-        # GH9116
-        idx1 = PeriodIndex([], freq='D')
-        idx2 = PeriodIndex(['2011-01-01'], freq='D')
-        idx3 = PeriodIndex(['2011-01-01', '2011-01-02'], freq='D')
-        idx4 = PeriodIndex(
-            ['2011-01-01', '2011-01-02', '2011-01-03'], freq='D')
-        idx5 = PeriodIndex(['2011', '2012', '2013'], freq='A')
-        idx6 = PeriodIndex(
-            ['2011-01-01 09:00', '2012-02-01 10:00', 'NaT'], freq='H')
-
-        idx7 = pd.period_range('2013Q1', periods=1, freq="Q")
-        idx8 = pd.period_range('2013Q1', periods=2, freq="Q")
-        idx9 = pd.period_range('2013Q1', periods=3, freq="Q")
-
-        exp1 = """PeriodIndex: 0 entries
-Freq: D"""
-
-        exp2 = """PeriodIndex: 1 entries, 2011-01-01 to 2011-01-01
-Freq: D"""
-
-        exp3 = """PeriodIndex: 2 entries, 2011-01-01 to 2011-01-02
-Freq: D"""
-
-        exp4 = """PeriodIndex: 3 entries, 2011-01-01 to 2011-01-03
-Freq: D"""
-
-        exp5 = """PeriodIndex: 3 entries, 2011 to 2013
-Freq: A-DEC"""
-
-        exp6 = """PeriodIndex: 3 entries, 2011-01-01 09:00 to NaT
-Freq: H"""
-
-        exp7 = """PeriodIndex: 1 entries, 2013Q1 to 2013Q1
-Freq: Q-DEC"""
-
-        exp8 = """PeriodIndex: 2 entries, 2013Q1 to 2013Q2
-Freq: Q-DEC"""
-
-        exp9 = """PeriodIndex: 3 entries, 2013Q1 to 2013Q3
-Freq: Q-DEC"""
-
-        for idx, expected in zip([idx1, idx2, idx3, idx4, idx5,
-                                  idx6, idx7, idx8, idx9],
-                                 [exp1, exp2, exp3, exp4, exp5,
-                                  exp6, exp7, exp8, exp9]):
-            result = idx.summary()
-            assert result == expected
-
     def test_resolution(self):
         for freq, expected in zip(['A', 'Q', 'M', 'D', 'H',
                                    'T', 'S', 'L', 'U'],
diff --git a/pandas/tests/indexes/timedeltas/test_formats.py b/pandas/tests/indexes/timedeltas/test_formats.py
new file mode 100644
index 000000000..a8375459d
--- /dev/null
+++ b/pandas/tests/indexes/timedeltas/test_formats.py
@@ -0,0 +1,96 @@
+# -*- coding: utf-8 -*-
+
+import pytest
+
+import pandas as pd
+from pandas import TimedeltaIndex
+
+
+class TestTimedeltaIndexRendering(object):
+    @pytest.mark.parametrize('method', ['__repr__', '__unicode__', '__str__'])
+    def test_representation(self, method):
+        idx1 = TimedeltaIndex([], freq='D')
+        idx2 = TimedeltaIndex(['1 days'], freq='D')
+        idx3 = TimedeltaIndex(['1 days', '2 days'], freq='D')
+        idx4 = TimedeltaIndex(['1 days', '2 days', '3 days'], freq='D')
+        idx5 = TimedeltaIndex(['1 days 00:00:01', '2 days', '3 days'])
+
+        exp1 = """TimedeltaIndex([], dtype='timedelta64[ns]', freq='D')"""
+
+        exp2 = ("TimedeltaIndex(['1 days'], dtype='timedelta64[ns]', "
+                "freq='D')")
+
+        exp3 = ("TimedeltaIndex(['1 days', '2 days'], "
+                "dtype='timedelta64[ns]', freq='D')")
+
+        exp4 = ("TimedeltaIndex(['1 days', '2 days', '3 days'], "
+                "dtype='timedelta64[ns]', freq='D')")
+
+        exp5 = ("TimedeltaIndex(['1 days 00:00:01', '2 days 00:00:00', "
+                "'3 days 00:00:00'], dtype='timedelta64[ns]', freq=None)")
+
+        with pd.option_context('display.width', 300):
+            for idx, expected in zip([idx1, idx2, idx3, idx4, idx5],
+                                     [exp1, exp2, exp3, exp4, exp5]):
+                result = getattr(idx, method)()
+                assert result == expected
+
+    def test_representation_to_series(self):
+        idx1 = TimedeltaIndex([], freq='D')
+        idx2 = TimedeltaIndex(['1 days'], freq='D')
+        idx3 = TimedeltaIndex(['1 days', '2 days'], freq='D')
+        idx4 = TimedeltaIndex(['1 days', '2 days', '3 days'], freq='D')
+        idx5 = TimedeltaIndex(['1 days 00:00:01', '2 days', '3 days'])
+
+        exp1 = """Series([], dtype: timedelta64[ns])"""
+
+        exp2 = ("0   1 days\n"
+                "dtype: timedelta64[ns]")
+
+        exp3 = ("0   1 days\n"
+                "1   2 days\n"
+                "dtype: timedelta64[ns]")
+
+        exp4 = ("0   1 days\n"
+                "1   2 days\n"
+                "2   3 days\n"
+                "dtype: timedelta64[ns]")
+
+        exp5 = ("0   1 days 00:00:01\n"
+                "1   2 days 00:00:00\n"
+                "2   3 days 00:00:00\n"
+                "dtype: timedelta64[ns]")
+
+        with pd.option_context('display.width', 300):
+            for idx, expected in zip([idx1, idx2, idx3, idx4, idx5],
+                                     [exp1, exp2, exp3, exp4, exp5]):
+                result = repr(pd.Series(idx))
+                assert result == expected
+
+    def test_summary(self):
+        # GH#9116
+        idx1 = TimedeltaIndex([], freq='D')
+        idx2 = TimedeltaIndex(['1 days'], freq='D')
+        idx3 = TimedeltaIndex(['1 days', '2 days'], freq='D')
+        idx4 = TimedeltaIndex(['1 days', '2 days', '3 days'], freq='D')
+        idx5 = TimedeltaIndex(['1 days 00:00:01', '2 days', '3 days'])
+
+        exp1 = ("TimedeltaIndex: 0 entries\n"
+                "Freq: D")
+
+        exp2 = ("TimedeltaIndex: 1 entries, 1 days to 1 days\n"
+                "Freq: D")
+
+        exp3 = ("TimedeltaIndex: 2 entries, 1 days to 2 days\n"
+                "Freq: D")
+
+        exp4 = ("TimedeltaIndex: 3 entries, 1 days to 3 days\n"
+                "Freq: D")
+
+        exp5 = ("TimedeltaIndex: 3 entries, 1 days 00:00:01 to 3 days "
+                "00:00:00")
+
+        for idx, expected in zip([idx1, idx2, idx3, idx4, idx5],
+                                 [exp1, exp2, exp3, exp4, exp5]):
+            result = idx.summary()
+            assert result == expected
diff --git a/pandas/tests/indexes/timedeltas/test_ops.py b/pandas/tests/indexes/timedeltas/test_ops.py
index d154aa217..690ba66b6 100644
--- a/pandas/tests/indexes/timedeltas/test_ops.py
+++ b/pandas/tests/indexes/timedeltas/test_ops.py
@@ -73,94 +73,6 @@ class TestTimedeltaIndexOps(Ops):
             tm.assert_raises_regex(
                 ValueError, errmsg, np.argmax, td, out=0)
 
-    def test_representation(self):
-        idx1 = TimedeltaIndex([], freq='D')
-        idx2 = TimedeltaIndex(['1 days'], freq='D')
-        idx3 = TimedeltaIndex(['1 days', '2 days'], freq='D')
-        idx4 = TimedeltaIndex(['1 days', '2 days', '3 days'], freq='D')
-        idx5 = TimedeltaIndex(['1 days 00:00:01', '2 days', '3 days'])
-
-        exp1 = """TimedeltaIndex([], dtype='timedelta64[ns]', freq='D')"""
-
-        exp2 = ("TimedeltaIndex(['1 days'], dtype='timedelta64[ns]', "
-                "freq='D')")
-
-        exp3 = ("TimedeltaIndex(['1 days', '2 days'], "
-                "dtype='timedelta64[ns]', freq='D')")
-
-        exp4 = ("TimedeltaIndex(['1 days', '2 days', '3 days'], "
-                "dtype='timedelta64[ns]', freq='D')")
-
-        exp5 = ("TimedeltaIndex(['1 days 00:00:01', '2 days 00:00:00', "
-                "'3 days 00:00:00'], dtype='timedelta64[ns]', freq=None)")
-
-        with pd.option_context('display.width', 300):
-            for idx, expected in zip([idx1, idx2, idx3, idx4, idx5],
-                                     [exp1, exp2, exp3, exp4, exp5]):
-                for func in ['__repr__', '__unicode__', '__str__']:
-                    result = getattr(idx, func)()
-                    assert result == expected
-
-    def test_representation_to_series(self):
-        idx1 = TimedeltaIndex([], freq='D')
-        idx2 = TimedeltaIndex(['1 days'], freq='D')
-        idx3 = TimedeltaIndex(['1 days', '2 days'], freq='D')
-        idx4 = TimedeltaIndex(['1 days', '2 days', '3 days'], freq='D')
-        idx5 = TimedeltaIndex(['1 days 00:00:01', '2 days', '3 days'])
-
-        exp1 = """Series([], dtype: timedelta64[ns])"""
-
-        exp2 = """0   1 days
-dtype: timedelta64[ns]"""
-
-        exp3 = """0   1 days
-1   2 days
-dtype: timedelta64[ns]"""
-
-        exp4 = """0   1 days
-1   2 days
-2   3 days
-dtype: timedelta64[ns]"""
-
-        exp5 = """0   1 days 00:00:01
-1   2 days 00:00:00
-2   3 days 00:00:00
-dtype: timedelta64[ns]"""
-
-        with pd.option_context('display.width', 300):
-            for idx, expected in zip([idx1, idx2, idx3, idx4, idx5],
-                                     [exp1, exp2, exp3, exp4, exp5]):
-                result = repr(pd.Series(idx))
-                assert result == expected
-
-    def test_summary(self):
-        # GH9116
-        idx1 = TimedeltaIndex([], freq='D')
-        idx2 = TimedeltaIndex(['1 days'], freq='D')
-        idx3 = TimedeltaIndex(['1 days', '2 days'], freq='D')
-        idx4 = TimedeltaIndex(['1 days', '2 days', '3 days'], freq='D')
-        idx5 = TimedeltaIndex(['1 days 00:00:01', '2 days', '3 days'])
-
-        exp1 = ("TimedeltaIndex: 0 entries\n"
-                "Freq: D")
-
-        exp2 = ("TimedeltaIndex: 1 entries, 1 days to 1 days\n"
-                "Freq: D")
-
-        exp3 = ("TimedeltaIndex: 2 entries, 1 days to 2 days\n"
-                "Freq: D")
-
-        exp4 = ("TimedeltaIndex: 3 entries, 1 days to 3 days\n"
-                "Freq: D")
-
-        exp5 = ("TimedeltaIndex: 3 entries, 1 days 00:00:01 to 3 days "
-                "00:00:00")
-
-        for idx, expected in zip([idx1, idx2, idx3, idx4, idx5],
-                                 [exp1, exp2, exp3, exp4, exp5]):
-            result = idx.summary()
-            assert result == expected
-
     def test_value_counts_unique(self):
         # GH 7735
 
