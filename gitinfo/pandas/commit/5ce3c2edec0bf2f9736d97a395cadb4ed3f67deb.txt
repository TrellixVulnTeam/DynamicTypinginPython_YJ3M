commit 5ce3c2edec0bf2f9736d97a395cadb4ed3f67deb
Author: Adam Klein <adamklein@gmail.com>
Date:   Mon Mar 19 16:47:06 2012 -0400

    ENH: added interval->dt64->interval conversions

diff --git a/pandas/core/index.py b/pandas/core/index.py
index c471801a7..20bd3272a 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -2043,12 +2043,14 @@ class IntervalIndex(Int64Index):
         # how to represent ourselves to matplotlib
         return datetools._skts_box_array(self, self.freq), False
 
-    def to_timestamp(self, how='E'):
+    def to_timestamp(self):
         """
-        Cast to datetimeindex of timestamps, either at end or beginning of
-        interval
+        Cast to datetimeindex of timestamps, at *beginning* of interval
         """
-        raise NotImplementedError
+        base, mult = datetools._get_freq_code('S')
+        new_data = self.resample('S', 'S')
+        new_data = lib.sktsarr_to_dt64arr(new_data.values, base, mult)
+        return DatetimeIndex(new_data, freq=self.freq)
 
     def shift(self, n):
         """
diff --git a/pandas/src/datetime.pxd b/pandas/src/datetime.pxd
index c6c28d844..be2989726 100644
--- a/pandas/src/datetime.pxd
+++ b/pandas/src/datetime.pxd
@@ -118,7 +118,7 @@ cdef extern from "skts.h":
     PyObject *interval_strftime(long value, int freq, PyObject *args)
     PyObject *interval_to_string(long value, int freq)
 
-    # int get_date_info(long ordinal, int freq, date_info *dinfo) except -1
+    int get_date_info(long ordinal, int freq, date_info *dinfo) except -1
 
     int iyear(long ordinal, int freq) except -1
     int iqyear(long ordinal, int freq) except -1
diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index f0d1a9e21..18b93297e 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -1898,18 +1898,13 @@ def sktsarr_to_dt64arr(ndarray[int64_t] sktsarr, int base, long mult):
     cdef:
         ndarray[int64_t] out
         Py_ssize_t i, l
-        long ordinal
 
     l = len(sktsarr)
 
     out = np.empty(l, dtype='i8')
 
     for i in range(l):
-        ordinal = remove_mult(sktsarr[i], mult)
-        # TODO: allow to select begin, not just end as is default
-        ordinal = get_python_ordinal(ordinal, base)
-        # TODO: python ordinal -> dt64 fast?
-        out[i] = 0
+        out[i] = skts_ordinal_to_dt64(sktsarr[i], base, mult)
 
     return out
 
@@ -1964,14 +1959,25 @@ def skts_ordinal(int y, int m, int d, int h, int min, int s, int base, long mult
 
     return apply_mult(ordinal, mult)
 
-def skts_ordinal_to_dt(long skts_ordinal, int base, long mult):
+cpdef int64_t skts_ordinal_to_dt64(long skts_ordinal, int base, long mult):
     cdef:
         long ordinal
+        npy_datetimestruct dts
+        date_info dinfo
 
     ordinal = remove_mult(skts_ordinal, mult)
-    ordinal = get_python_ordinal(ordinal, base)
 
-    return datetime.fromordinal(ordinal)
+    get_date_info(ordinal, base, &dinfo)
+
+    dts.year = dinfo.year
+    dts.month = dinfo.month
+    dts.day = dinfo.day
+    dts.hour = dinfo.hour
+    dts.min = dinfo.minute
+    dts.sec = int(dinfo.second)
+    dts.us = 0
+
+    return PyArray_DatetimeStructToDatetime(NPY_FR_us, &dts)
 
 def skts_ordinal_to_string(long value, int base, long mult):
     return <object>interval_to_string(remove_mult(value, mult), base)
diff --git a/pandas/tests/test_datetime64.py b/pandas/tests/test_datetime64.py
index 6628d56df..4b7a44897 100644
--- a/pandas/tests/test_datetime64.py
+++ b/pandas/tests/test_datetime64.py
@@ -583,6 +583,17 @@ class TestDatetime64(unittest.TestCase):
         self.assertEquals(len(dti2), len(dti))
         self.assertEquals(dti2.freq, None)
 
+    def test_dti_to_interval(self):
+        dti = DatetimeIndex(start='1/1/2005', end='12/1/2005', freq='M')
+        ii1 = dti.to_interval()
+        ii2 = dti.to_interval(freq='D')
+
+        self.assertEquals(ii1[0], Interval('Jan 2005', freq='M'))
+        self.assertEquals(ii2[0], Interval('1/31/2005', freq='D'))
+
+        self.assertEquals(ii1[-1], Interval('Nov 2005', freq='M'))
+        self.assertEquals(ii2[-1], Interval('11/30/2005', freq='D'))
+
     def test_iindex_slice_index(self):
         ii = IntervalIndex(start='1/1/10', end='12/31/12', freq='M')
         s = Series(np.random.rand(len(ii)), index=ii)
@@ -593,6 +604,17 @@ class TestDatetime64(unittest.TestCase):
         exp = s[12:24]
         assert_series_equal(res, exp)
 
+    def test_interval_dt64_round_trip(self):
+        dti = DatetimeIndex(['1/1/2002', '1/2/2002', '1/3/2002', '1/4/2002', 
+                             '1/5/2002', '1/6/2002', '1/7/2002'], freq='B')
+        ii = dti.to_interval()
+        self.assert_(ii.to_timestamp().equals(dti))
+
+        dti = DatetimeIndex(['1/1/2002', '1/2/2002', '1/3/2002', '1/4/2002', 
+                             '1/5/2002', '1/6/2002', '1/7/2002'], freq='B')
+        ii = dti.to_interval(freq='3H')
+        self.assert_(ii.to_timestamp().equals(dti))
+
     def test_iindex_multiples(self):
         ii = IntervalIndex(start='1/1/10', end='12/31/12', freq='2M')
         self.assertEquals(ii[0], Interval('1/1/10', '2M'))
