commit 6b5ee264598c523ccaf6866758de8a3daa657001
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Apr 8 12:51:26 2013 -0700

    BUG: fix engine='python' integer outside fp rep range issue. close #3258

diff --git a/RELEASE.rst b/RELEASE.rst
index 924e97111..8edc59d0d 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -280,6 +280,8 @@ pandas 0.11.0
   - Fixed a bug in the legend of plotting.andrews_curves() (GH3278_)
   - Produce a series on apply if we only generate a singular series and have
     a simple index (GH2893_)
+  - Fix Python ascii file parsing when integer falls outside of floating point
+    spacing (GH3258_)
 
 .. _GH622: https://github.com/pydata/pandas/issues/622
 .. _GH797: https://github.com/pydata/pandas/issues/797
@@ -381,6 +383,7 @@ pandas 0.11.0
 .. _GH3222: https://github.com/pydata/pandas/issues/3222
 .. _GH2641: https://github.com/pydata/pandas/issues/2641
 .. _GH3238: https://github.com/pydata/pandas/issues/3238
+.. _GH3258: https://github.com/pydata/pandas/issues/3258
 .. _GH3283: https://github.com/pydata/pandas/issues/3283
 
 pandas 0.10.1
diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index 3eb29e82c..358f64df6 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -1548,6 +1548,33 @@ A,B,C
 
         tm.assert_frame_equal(result, expected)
 
+    def test_parse_integers_above_fp_precision(self):
+        data = """Numbers
+17007000002000191
+17007000002000191
+17007000002000191
+17007000002000191
+17007000002000192
+17007000002000192
+17007000002000192
+17007000002000192
+17007000002000192
+17007000002000194"""
+
+        result = self.read_csv(StringIO(data))
+        expected = DataFrame({'Numbers': [17007000002000191,
+                                          17007000002000191,
+                                          17007000002000191,
+                                          17007000002000191,
+                                          17007000002000192,
+                                          17007000002000192,
+                                          17007000002000192,
+                                          17007000002000192,
+                                          17007000002000192,
+                                          17007000002000194]})
+
+        self.assertTrue(np.array_equal(result['Numbers'], expected['Numbers']))
+
 
 class TestPythonParser(ParserTests, unittest.TestCase):
 
diff --git a/pandas/src/inference.pyx b/pandas/src/inference.pyx
index 095968494..3ecf513cc 100644
--- a/pandas/src/inference.pyx
+++ b/pandas/src/inference.pyx
@@ -393,7 +393,10 @@ def maybe_convert_numeric(ndarray[object] values, set na_values,
                     elif 'inf' in val:  # special case to handle +/-inf
                         seen_float = 1
                     elif fval < fINT64_MAX and fval > fINT64_MIN:
-                        ints[i] = <int64_t> fval
+                        try:
+                            ints[i] = int(val)
+                        except ValueError:
+                            ints[i] = <int64_t> fval
                     else:
                         seen_float = 1
             except:
@@ -402,7 +405,7 @@ def maybe_convert_numeric(ndarray[object] values, set na_values,
 
                 floats[i] = nan
                 seen_float = 1
-               
+
 
     if seen_complex:
         return complexes
