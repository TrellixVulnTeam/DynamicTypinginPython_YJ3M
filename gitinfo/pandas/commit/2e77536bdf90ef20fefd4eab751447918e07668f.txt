commit 2e77536bdf90ef20fefd4eab751447918e07668f
Author: paul-mannino <pmannino10@gmail.com>
Date:   Sun Oct 9 17:45:34 2016 -0500

    BUG: Fix issue with inserting duplicate columns in a dataframe
    
    closes #14291
    closes #14431

diff --git a/doc/source/whatsnew/v0.19.1.txt b/doc/source/whatsnew/v0.19.1.txt
index e5310a272..8bebe5e78 100644
--- a/doc/source/whatsnew/v0.19.1.txt
+++ b/doc/source/whatsnew/v0.19.1.txt
@@ -50,6 +50,7 @@ Bug Fixes
 
 
 - Source installs from PyPI will now work without ``cython`` installed, as in previous versions (:issue:`14204`)
+- Bug in ``DataFrame.insert`` where multiple calls with duplicate columns can fail (:issue:`14291`)
 
 - ``pd.merge()`` will raise ``ValueError`` with non-boolean parameters in passed boolean type arguments (:issue:`14434`)
 
@@ -63,4 +64,11 @@ Bug Fixes
 - Bug in ``DataFrame.to_json`` where ``lines=True`` and a value contained a ``}`` character (:issue:`14391`)
 - Bug in ``df.groupby`` causing an ``AttributeError`` when grouping a single index frame by a column and the index level (:issue`14327`)
 
+
+
+
+
+
+
+
 - Bug in ``pd.pivot_table`` may raise ``TypeError`` or ``ValueError`` when ``index`` or ``columns`` is not scalar and ``values`` is not specified (:issue:`14380`)
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index dfe7e90c1..05148c1f7 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2487,7 +2487,7 @@ class DataFrame(NDFrame):
 
         # check if we are modifying a copy
         # try to set first as we want an invalid
-        # value exeption to occur first
+        # value exception to occur first
         if len(self):
             self._check_setitem_copy()
 
@@ -2503,10 +2503,10 @@ class DataFrame(NDFrame):
         loc : int
             Must have 0 <= loc <= len(columns)
         column : object
-        value : int, Series, or array-like
+        value : scalar, Series, or array-like
         """
         self._ensure_valid_index(value)
-        value = self._sanitize_column(column, value)
+        value = self._sanitize_column(column, value, broadcast=False)
         self._data.insert(loc, column, value,
                           allow_duplicates=allow_duplicates)
 
@@ -2590,9 +2590,25 @@ class DataFrame(NDFrame):
 
         return data
 
-    def _sanitize_column(self, key, value):
-        # Need to make sure new columns (which go into the BlockManager as new
-        # blocks) are always copied
+    def _sanitize_column(self, key, value, broadcast=True):
+        """
+        Ensures new columns (which go into the BlockManager as new blocks) are
+        always copied and converted into an array.
+
+        Parameters
+        ----------
+        key : object
+        value : scalar, Series, or array-like
+        broadcast : bool, default True
+            If ``key`` matches multiple duplicate column names in the
+            DataFrame, this parameter indicates whether ``value`` should be
+            tiled so that the returned array contains a (duplicated) column for
+            each occurrence of the key. If False, ``value`` will not be tiled.
+
+        Returns
+        -------
+        sanitized_column : numpy-array
+        """
 
         def reindexer(value):
             # reindex if necessary
@@ -2665,7 +2681,7 @@ class DataFrame(NDFrame):
             return value
 
         # broadcast across multiple columns if necessary
-        if key in self.columns and value.ndim == 1:
+        if broadcast and key in self.columns and value.ndim == 1:
             if (not self.columns.is_unique or
                     isinstance(self.columns, MultiIndex)):
                 existing_piece = self[key]
diff --git a/pandas/sparse/frame.py b/pandas/sparse/frame.py
index 8eeff045d..56020e32b 100644
--- a/pandas/sparse/frame.py
+++ b/pandas/sparse/frame.py
@@ -302,7 +302,21 @@ class SparseDataFrame(DataFrame):
     # ----------------------------------------------------------------------
     # Support different internal representation of SparseDataFrame
 
-    def _sanitize_column(self, key, value):
+    def _sanitize_column(self, key, value, **kwargs):
+        """
+        Creates a new SparseArray from the input value.
+
+        Parameters
+        ----------
+        key : object
+        value : scalar, Series, or array-like
+        kwargs : dict
+
+        Returns
+        -------
+        sanitized_column : SparseArray
+
+        """
         sp_maker = lambda x, index=None: SparseArray(
             x, index=index, fill_value=self._default_fill_value,
             kind=self._default_kind)
diff --git a/pandas/tests/frame/test_nonunique_indexes.py b/pandas/tests/frame/test_nonunique_indexes.py
index 779747187..220d29f62 100644
--- a/pandas/tests/frame/test_nonunique_indexes.py
+++ b/pandas/tests/frame/test_nonunique_indexes.py
@@ -468,3 +468,13 @@ class TestDataFrameNonuniqueIndexes(tm.TestCase, TestData):
 
         df.iloc[:, 0] = 3
         assert_series_equal(df.iloc[:, 1], expected)
+
+    def test_insert_with_columns_dups(self):
+        # GH 14291
+        df = pd.DataFrame()
+        df.insert(0, 'A', ['g', 'h', 'i'], allow_duplicates=True)
+        df.insert(0, 'A', ['d', 'e', 'f'], allow_duplicates=True)
+        df.insert(0, 'A', ['a', 'b', 'c'], allow_duplicates=True)
+        exp = pd.DataFrame([['a', 'd', 'g'], ['b', 'e', 'h'],
+                            ['c', 'f', 'i']], columns=['A', 'A', 'A'])
+        assert_frame_equal(df, exp)
