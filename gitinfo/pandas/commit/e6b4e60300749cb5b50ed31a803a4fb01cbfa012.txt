commit e6b4e60300749cb5b50ed31a803a4fb01cbfa012
Author: jreback <jeff@reback.net>
Date:   Sat Aug 31 10:41:35 2013 -0400

    API: add io.hdf.default_format option to enable an override to default storage formats in HDFStore

diff --git a/doc/source/io.rst b/doc/source/io.rst
index 500f1b10c..92042b6fe 100644
--- a/doc/source/io.rst
+++ b/doc/source/io.rst
@@ -1831,7 +1831,11 @@ Table Format
 format. Conceptually a ``table`` is shaped very much like a DataFrame,
 with rows and columns. A ``table`` may be appended to in the same or
 other sessions.  In addition, delete & query type operations are
-supported. This format is specified by ``format='table'`` or ``format='t'`` to ``append`` or ``put`` or ``to_hdf``
+supported. This format is specified by ``format='table'`` or ``format='t'``
+to ``append`` or ``put`` or ``to_hdf``
+
+This format can be set as an option as well ``pd.set_option('io.hdf.default_format','table')`` to
+enable ``put/append/to_hdf`` to by default store in the ``table`` format.
 
 .. ipython:: python
    :suppress:
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 5de292f15..aa1c20d58 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -172,10 +172,17 @@ dropna_doc = """
 : boolean
     drop ALL nan rows when appending to a table
 """
+format_doc = """
+: format
+    default format writing format, if None, then
+    put will default to 'fixed' and append will default to 'table'
+"""
 
 with config.config_prefix('io.hdf'):
     config.register_option('dropna_table', True, dropna_doc,
                            validator=config.is_bool)
+    config.register_option('default_format', None, format_doc,
+                           validator=config.is_one_of_factory(['fixed','table',None]))
 
 # oh the troubles to reduce import time
 _table_mod = None
@@ -228,7 +235,7 @@ def get_store(path, **kwargs):
 
 # interface to/from ###
 
-def to_hdf(path_or_buf, key, value, mode=None, format=None, complevel=None, complib=None, append=None, **kwargs):
+def to_hdf(path_or_buf, key, value, mode=None, complevel=None, complib=None, append=None, **kwargs):
     """ store this object, close it if we opened it """
     if append:
         f = lambda store: store.append(key, value, **kwargs)
@@ -685,7 +692,9 @@ class HDFStore(StringMixin):
             For Table format, append the input data to the existing
         encoding : default None, provide an encoding for strings
         """
-        kwargs = self._validate_format(format or 'fixed', kwargs)
+        if format is None:
+            format = get_option("io.hdf.default_format") or 'fixed'
+        kwargs = self._validate_format(format, kwargs)
         self._write_to_group(key, value, append=append, **kwargs)
 
     def remove(self, key, where=None, start=None, stop=None):
@@ -771,7 +780,9 @@ class HDFStore(StringMixin):
 
         if dropna is None:
             dropna = get_option("io.hdf.dropna_table")
-        kwargs = self._validate_format(format or 'table', kwargs)
+        if format is None:
+            format = get_option("io.hdf.default_format") or 'table'
+        kwargs = self._validate_format(format, kwargs)
         self._write_to_group(key, value, append=append, dropna=dropna, **kwargs)
 
     def append_to_multiple(self, d, value, selector, data_columns=None, axes=None, **kwargs):
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index af7601ddf..0ab7a3293 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -222,6 +222,49 @@ class TestHDFStore(unittest.TestCase):
             self.assertRaises(TypeError, df.to_hdf, path,'df',append=True,format='foo')
             self.assertRaises(TypeError, df.to_hdf, path,'df',append=False,format='bar')
 
+
+    def test_api_default_format(self):
+
+        # default_format option
+        with ensure_clean(self.path) as store:
+            df = tm.makeDataFrame()
+
+            pandas.set_option('io.hdf.default_format','fixed')
+            _maybe_remove(store,'df')
+            store.put('df',df)
+            self.assert_(not store.get_storer('df').is_table)
+            self.assertRaises(ValueError, store.append, 'df2',df)
+
+            pandas.set_option('io.hdf.default_format','table')
+            _maybe_remove(store,'df')
+            store.put('df',df)
+            self.assert_(store.get_storer('df').is_table)
+            _maybe_remove(store,'df2')
+            store.append('df2',df)
+            self.assert_(store.get_storer('df').is_table)
+
+            pandas.set_option('io.hdf.default_format',None)
+
+        with tm.ensure_clean(self.path) as path:
+
+            df = tm.makeDataFrame()
+
+            pandas.set_option('io.hdf.default_format','fixed')
+            df.to_hdf(path,'df')
+            with get_store(path) as store:
+                self.assert_(not store.get_storer('df').is_table)
+            self.assertRaises(ValueError, df.to_hdf, path,'df2', append=True)
+
+            pandas.set_option('io.hdf.default_format','table')
+            df.to_hdf(path,'df3')
+            with get_store(path) as store:
+                self.assert_(store.get_storer('df3').is_table)
+            df.to_hdf(path,'df4',append=True)
+            with get_store(path) as store:
+                self.assert_(store.get_storer('df4').is_table)
+
+            pandas.set_option('io.hdf.default_format',None)
+
     def test_keys(self):
 
         with ensure_clean(self.path) as store:
