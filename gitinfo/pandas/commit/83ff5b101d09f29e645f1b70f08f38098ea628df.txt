commit 83ff5b101d09f29e645f1b70f08f38098ea628df
Author: jreback <jeff@reback.net>
Date:   Wed Sep 17 11:11:53 2014 -0400

    BUG: Bug in 32-bit platforms with Series.shift (GH8129)

diff --git a/doc/source/v0.15.0.txt b/doc/source/v0.15.0.txt
index 27ee5444d..a8213a50a 100644
--- a/doc/source/v0.15.0.txt
+++ b/doc/source/v0.15.0.txt
@@ -751,7 +751,7 @@ Bug Fixes
 - Bug in sorting a multi-index frame with a Float64Index (:issue:`8017`)
 
 - Bug in ``is_superperiod`` and ``is_subperiod`` cannot handle higher frequencies than ``S`` (:issue:`7760`, :issue:`7772`, :issue:`7803`)
-
+- Bug in 32-bit platforms with ``Series.shift`` (:issue:`8129`)
 - Bug in ``PeriodIndex.unique`` returns int64 ``np.ndarray`` (:issue:`7540`)
 
 - Bug in ``DataFrame.reset_index`` which has ``MultiIndex`` contains ``PeriodIndex`` or ``DatetimeIndex`` with tz raises ``ValueError`` (:issue:`7746`, :issue:`7793`)
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 95c82cc02..9db029304 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -827,7 +827,7 @@ class Block(PandasObject):
             axis = new_values.ndim - axis - 1
 
         if np.prod(new_values.shape):
-            new_values = np.roll(new_values, periods, axis=axis)
+            new_values = np.roll(new_values, com._ensure_platform_int(periods), axis=axis)
 
         axis_indexer = [ slice(None) ] * self.ndim
         if periods > 0:
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 8b9fee0e5..2e8442be7 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -4602,6 +4602,16 @@ class TestSeries(tm.TestCase, CheckNameIntegration):
         shifted5 = ps.shift(1, offset=datetools.bday)
         assert_series_equal(shifted5, shifted4)
 
+        # 32-bit taking
+        # GH 8129
+        index=date_range('2000-01-01',periods=5)
+        for dtype in ['int32','int64']:
+            s1 = Series(np.arange(5,dtype=dtype),index=index)
+            p = s1.iloc[1]
+            result = s1.shift(periods=p)
+            expected = Series([np.nan,0,1,2,3],index=index)
+            assert_series_equal(result,expected)
+
     def test_tshift(self):
         # PeriodIndex
         ps = tm.makePeriodSeries()
