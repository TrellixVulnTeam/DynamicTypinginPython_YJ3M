commit 59524af1e90d3dda2d885e711f7258704a020b6d
Author: Jeff Reback <jeff@reback.net>
Date:   Fri Sep 2 20:00:37 2016 -0400

    TST: sparse / dummy array comparisons on windows, xref #14140 (#14141)

diff --git a/pandas/sparse/tests/test_list.py b/pandas/sparse/tests/test_list.py
index 0b933b4f9..b117685b6 100644
--- a/pandas/sparse/tests/test_list.py
+++ b/pandas/sparse/tests/test_list.py
@@ -60,8 +60,11 @@ class TestSparseList(unittest.TestCase):
             splist.append(arr[5])
             splist.append(arr[6:])
 
+            # list always produces int64, but SA constructor
+            # is platform dtype aware
             sparr = splist.to_array()
-            tm.assert_sp_array_equal(sparr, SparseArray(arr, fill_value=0))
+            exp = SparseArray(arr, fill_value=0)
+            tm.assert_sp_array_equal(sparr, exp, check_dtype=False)
 
     def test_consolidate(self):
         with tm.assert_produces_warning(FutureWarning,
diff --git a/pandas/tests/test_reshape.py b/pandas/tests/test_reshape.py
index 413724d1a..80d1f5f76 100644
--- a/pandas/tests/test_reshape.py
+++ b/pandas/tests/test_reshape.py
@@ -323,7 +323,7 @@ class TestGetDummies(tm.TestCase):
                               [3, 1, 0, 0, 1]],
                              columns=['C', 'bad_a', 'bad_b', 'bad_b', 'bad_c'],
                              dtype=np.uint8)
-        expected = expected.astype({"C": np.int})
+        expected = expected.astype({"C": np.int64})
         assert_frame_equal(result, expected)
 
     def test_dataframe_dummies_subset(self):
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index d50a6c460..f5a93d1f1 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -1385,11 +1385,22 @@ assert_panel4d_equal = partial(assert_panelnd_equal,
 # Sparse
 
 
-def assert_sp_array_equal(left, right):
+def assert_sp_array_equal(left, right, check_dtype=True):
+    """Check that the left and right SparseArray are equal.
+
+    Parameters
+    ----------
+    left : SparseArray
+    right : SparseArray
+    check_dtype : bool, default True
+        Whether to check the data dtype is identical.
+    """
+
     assertIsInstance(left, pd.SparseArray, '[SparseArray]')
     assertIsInstance(right, pd.SparseArray, '[SparseArray]')
 
-    assert_numpy_array_equal(left.sp_values, right.sp_values)
+    assert_numpy_array_equal(left.sp_values, right.sp_values,
+                             check_dtype=check_dtype)
 
     # SparseIndex comparison
     assertIsInstance(left.sp_index, pd._sparse.SparseIndex, '[SparseIndex]')
@@ -1400,8 +1411,10 @@ def assert_sp_array_equal(left, right):
                             left.sp_index, right.sp_index)
 
     assert_attr_equal('fill_value', left, right)
-    assert_attr_equal('dtype', left, right)
-    assert_numpy_array_equal(left.values, right.values)
+    if check_dtype:
+        assert_attr_equal('dtype', left, right)
+    assert_numpy_array_equal(left.values, right.values,
+                             check_dtype=check_dtype)
 
 
 def assert_sp_series_equal(left, right, check_dtype=True, exact_indices=True,
