commit 75d0cc63610b679b6634bda834788f9c6ec6b480
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue May 31 12:57:18 2011 +0100

    finished select implementation, refactored _get_axis* methods, unit tests

diff --git a/pandas/core/collection.py b/pandas/core/collection.py
index 13dfc3376..fbf02c679 100644
--- a/pandas/core/collection.py
+++ b/pandas/core/collection.py
@@ -1,7 +1,5 @@
-from collections import defaultdict
-from pandas.core.mixins import Picklable
-from pandas.core.index import Index
-from pandas.core.pytools import rands, adjoin, groupby
+from pandas.core.generic import Picklable
+from pandas.core.pytools import rands, adjoin
 import cPickle
 import os
 
diff --git a/pandas/core/common.py b/pandas/core/common.py
index e5e3a0a0a..e39f0378e 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -94,3 +94,11 @@ def ensure_float(arr):
         arr = arr.astype(float)
 
     return arr
+
+def _mut_exclusive(arg1, arg2):
+    if arg1 is not None and arg2 is not None:
+        raise Exception('mutually exclusive arguments')
+    elif arg1 is not None:
+        return arg1
+    else:
+        return arg2
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index a716d3d7c..46241069f 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -12,8 +12,8 @@ import numpy as np
 
 from pandas.core.common import (_pickle_array, _unpickle_array, isnull, notnull)
 from pandas.core.daterange import DateRange
+from pandas.core.generic import PandasGeneric
 from pandas.core.index import Index, NULL_INDEX
-from pandas.core.mixins import Picklable, Groupable
 from pandas.core.series import Series, _ensure_index
 import pandas.core.common as common
 import pandas.core.datetools as datetools
@@ -74,17 +74,10 @@ def comp_method(func, name):
 
     return f
 
-_AXIS_NUMBERS = {
-    'index' : 0,
-    'columns' : 1
-}
-
-_AXIS_NAMES = dict((v, k) for k, v in _AXIS_NUMBERS.iteritems())
-
 #-------------------------------------------------------------------------------
 # DataFrame class
 
-class DataFrame(Picklable, Groupable):
+class DataFrame(PandasGeneric):
     """
     Homogenously indexed table with named columns, with intelligent arithmetic
     operations, slicing, reindexing, aggregation, etc. Can function
@@ -119,6 +112,13 @@ class DataFrame(Picklable, Groupable):
     """
     _columns = None
 
+    _AXIS_NUMBERS = {
+        'index' : 0,
+        'columns' : 1
+    }
+
+    _AXIS_NAMES = dict((v, k) for k, v in _AXIS_NUMBERS.iteritems())
+
     def __init__(self, data=None, index=None, columns=None, dtype=None):
         if isinstance(data, dict):
             sdict, columns, index = self._init_dict(data, index, columns, dtype)
@@ -209,28 +209,6 @@ class DataFrame(Picklable, Groupable):
         data = dict([(idx, data[:, i]) for i, idx in enumerate(columns)])
         return self._init_dict(data, index, columns, dtype)
 
-    @classmethod
-    def _get_axis_number(cls, axis):
-        if axis in (0, 1):
-            return axis
-        else:
-            return _AXIS_NUMBERS[axis]
-
-    @classmethod
-    def _get_axis_name(cls, axis):
-        if axis in _AXIS_NUMBERS:
-            return axis
-        else:
-            return _AXIS_NAMES[axis]
-
-    def _get_axis(self, axis):
-        results = {
-            0 : self.index,
-            1 : self.columns,
-        }
-
-        return results[self._get_axis_number(axis)]
-
     @property
     def _constructor(self):
         return DataFrame
@@ -844,8 +822,7 @@ class DataFrame(Picklable, Groupable):
         print >> buf, 'Index: %s entries%s' % (len(self.index), index_summary)
 
         if len(self.cols()) == 0:
-            name = type(self).__name__
-            print >> buf, 'Empty',
+            print >> buf, 'Empty %s' % type(self).__name__
             return
 
         cols = self.cols()
@@ -1657,17 +1634,15 @@ class DataFrame(Picklable, Groupable):
         """
         import re
         if items is not None:
-            columns = [r for r in items if r in self]
+            return self.reindex(columns=[r for r in items if r in self])
         elif like:
-            columns = [c for c in self.cols() if like in c]
+            return self.select(lambda x: like in x, axis=1)
         elif regex:
             matcher = re.compile(regex)
-            columns = [c for c in self.cols() if matcher.match(c)]
+            return self.select(lambda x: matcher.match(x) is not None, axis=1)
         else:
             raise Exception('items was None!')
 
-        return self.reindex(columns=columns)
-
     def sort(self, column=None, ascending=True):
         if column:
             series = self[column].order(missingAtEnd=False)
@@ -2382,10 +2357,7 @@ class DataFrame(Picklable, Groupable):
         -------
         selection : DataFrame
         """
-        axis_name = self._get_axis_name(axis)
-        axis = self._get_axis(axis)
-        new_axis = axis[np.asarray([crit(label) for label in axis])]
-        return self.reindex(**{axis_name : new_axis})
+        return self._select_generic(crit, axis=axis)
 
     _ix = None
     @property
@@ -2421,12 +2393,10 @@ class DataFrame(Picklable, Groupable):
         return result
 
     def _fancy_index_axis(self, key, axis=0):
-        axis_name = self._get_axis_name(axis)
-        labels = self._get_axis(axis)
         if isinstance(key, slice):
-            return self._slice_axis( key, axis=axis)
+            return self._slice_axis(key, axis=axis)
         elif _is_list_like(key):
-            return self._fancy_index( key, axis=axis)
+            return self._fancy_index(key, axis=axis)
         elif axis == 0:
             idx = key
             if isinstance(key, int):
@@ -2589,3 +2559,7 @@ def _pfixed(s, space, nanRep=None, float_format=None):
 def _put_str(s, space):
     return ('%s' % s)[:space].ljust(space)
 
+if __name__ == '__main__':
+    import nose
+    nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
+                   exit=False)
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index de10380e0..d2fe1c01e 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -9,10 +9,11 @@ import warnings
 
 import numpy as np
 
+from pandas.core.common import _mut_exclusive
 from pandas.core.index import Index
 from pandas.core.frame import DataFrame, _pfixed, _ensure_index
 from pandas.core.matrix import DataMatrix
-from pandas.core.mixins import Picklable, Groupable
+from pandas.core.generic import PandasGeneric, Picklable
 import pandas.core.common as common
 import pandas.lib.tseries as tseries
 
@@ -85,7 +86,7 @@ class PanelAxis(object):
         value = _ensure_index(value)
         setattr(obj, self.cache_field, value)
 
-class Panel(Picklable):
+class Panel(object):
     """
     Abstract superclass for LongPanel and WidePanel data structures
     """
@@ -146,23 +147,12 @@ class Panel(Picklable):
 
     @property
     def dims(self): # pragma: no cover
-        import warnings
         warnings.warn("Please change panel.dims to panel.shape, will be removed"
                       " in future release",
                       FutureWarning)
-
         return self.shape
 
-_WIDE_AXIS_NUMBERS = {
-    'items' : 0,
-    'major' : 1,
-    'minor' : 2
-}
-
-_WIDE_AXIS_NAMES = dict((v, k) for k, v in _WIDE_AXIS_NUMBERS.iteritems())
-
-
-class WidePanel(Panel, Groupable):
+class WidePanel(Panel, PandasGeneric):
     """
     Represents wide format panel data, stored as 3-dimensional array
 
@@ -173,6 +163,22 @@ class WidePanel(Panel, Groupable):
     major_axis : sequence
     minor_axis : sequence
     """
+    _AXIS_NUMBERS = {
+        'items' : 0,
+        'major_axis' : 1,
+        'minor_axis' : 2
+    }
+
+    _AXIS_ALIASES = {
+        'major' : 'major_axis',
+        'minor' : 'minor_axis'
+    }
+
+    _AXIS_NAMES = {
+        0 : 'items',
+        1 : 'major_axis',
+        2 : 'minor_axis'
+    }
     def __init__(self, values, items, major_axis, minor_axis):
         self.items = items
         self.major_axis = major_axis
@@ -182,39 +188,16 @@ class WidePanel(Panel, Groupable):
         self.factors = {}
         self.values = values
 
-    @classmethod
-    def _get_axis_number(cls, axis):
-        if axis in (0, 1, 2):
-            return axis
-        else:
-            return _WIDE_AXIS_NUMBERS[axis]
-
-    @classmethod
-    def _get_axis_name(cls, axis):
-        if axis in _WIDE_AXIS_NUMBERS:
-            return axis
-        else:
-            return _WIDE_AXIS_NAMES[axis]
-
-    def _get_axis(self, axis):
-        results = {
-            0 : self.items,
-            1 : self.major_axis,
-            2 : self.minor_axis
-        }
-
-        return results[self._get_axis_number(axis)]
-
     def _get_plane_axes(self, axis):
         """
 
         """
         axis = self._get_axis_name(axis)
 
-        if axis == 'major':
+        if axis == 'major_axis':
             index = self.minor_axis
             columns = self.items
-        if axis == 'minor':
+        if axis == 'minor_axis':
             index = self.major_axis
             columns = self.items
         elif axis == 'items':
@@ -375,15 +358,18 @@ class WidePanel(Panel, Groupable):
 
         return frame.reindex(index=index, columns=columns)
 
-    def reindex(self, major=None, items=None, minor=None, method=None):
+    def reindex(self, major=None, items=None, minor=None, method=None,
+                major_axis=None, minor_axis=None):
         """
         Conform panel to new axis or axes
 
         Parameters
         ----------
         major : Index or sequence, default None
+            Can also use 'major_axis' keyword
         items : Index or sequence, default None
         minor : Index or sequence, default None
+            Can also use 'minor_axis' keyword
         method : {'backfill', 'pad', 'interpolate', None}
             Method to use for filling holes in reindexed panel
 
@@ -393,6 +379,9 @@ class WidePanel(Panel, Groupable):
         """
         result = self
 
+        major = _mut_exclusive(major, major_axis)
+        minor = _mut_exclusive(minor, minor_axis)
+
         if major is not None:
             result = result._reindex_axis(major, method, 1)
 
@@ -434,7 +423,8 @@ class WidePanel(Panel, Groupable):
         indexer, mask = common.get_indexer(old_index, new_index, fill_method)
 
         new_values = self.values.take(indexer, axis=axis)
-        common.null_out_axis(new_values, -mask, axis)
+        if len(new_index) > 0:
+            common.null_out_axis(new_values, -mask, axis)
 
         new_axes = [self._get_axis(i) for i in range(3)]
         new_axes[axis] = new_index
@@ -978,31 +968,33 @@ class WidePanel(Panel, Groupable):
         axis = self._get_axis_name(axis)
         index = self._get_axis(axis)
 
-        beg_slice, end_slice = self._getIndices(before, after, axis=axis)
+        beg_slice, end_slice = index.slice_locs(before, after)
         new_index = index[beg_slice:end_slice]
 
         return self.reindex(**{axis : new_index})
 
-    def _getIndices(self, before, after, axis='major'):
-        index = self._get_axis(axis)
-
-        if before is None:
-            beg_slice = 0
-        else:
-            beg_slice = index.searchsorted(before, side='left')
+    def select(self, crit, axis=0):
+        """
+        Return data corresponding to axis labels matching criteria
 
-        if after is None:
-            end_slice = len(index)
-        else:
-            end_slice = index.searchsorted(after, side='right')
+        Parameters
+        ----------
+        crit : function
+            To be called on each index (label). Should return True or False
+        axis : {0, 1, 2} or {'items', 'major', 'minor'}, default 'items'
+            Axis to select on
 
-        return beg_slice, end_slice
+        Returns
+        -------
+        selection : DataFrame
+        """
+        return self._select_generic(crit, axis=axis)
 
 #-------------------------------------------------------------------------------
 # LongPanel and friends
 
 
-class LongPanel(Panel):
+class LongPanel(Panel, Picklable):
     """
     Represents long or "stacked" format panel data
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 6925f845f..c8dcbb17b 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -15,8 +15,8 @@ import numpy as np
 
 from pandas.core.common import isnull, notnull
 from pandas.core.daterange import DateRange
+from pandas.core.generic import PandasGeneric
 from pandas.core.index import Index, NULL_INDEX
-from pandas.core.mixins import Picklable, Groupable
 import pandas.core.datetools as datetools
 import pandas.lib.tseries as tseries
 
@@ -82,7 +82,7 @@ def _arith_method(op, name):
 #-------------------------------------------------------------------------------
 # Series class
 
-class Series(np.ndarray, Picklable, Groupable):
+class Series(np.ndarray, PandasGeneric):
     """
     Generic indexed (labeled) vector (time series or cross-section)
 
@@ -118,6 +118,12 @@ class Series(np.ndarray, Picklable, Groupable):
 
     Data is *not* copied from input arrays by default
     """
+    _AXIS_NUMBERS = {
+        'index' : 0
+    }
+
+    _AXIS_NAMES = dict((v, k) for k, v in _AXIS_NUMBERS.iteritems())
+
     def __new__(cls, data, index=None, dtype=None, copy=False):
         if isinstance(data, Series):
             if index is None:
@@ -178,10 +184,6 @@ class Series(np.ndarray, Picklable, Groupable):
 
         return subarr
 
-    # @property
-    # def _constructor(self):
-    #     return Series
-
     def __hash__(self):
         raise TypeError('unhashable type')
 
@@ -1303,8 +1305,7 @@ class Series(np.ndarray, Picklable, Groupable):
         -------
         selection : Series
         """
-        mask = np.asarray([crit(idx) for idx in self.index])
-        return self[mask]
+        return self._select_generic(crit, axis=0)
 
 class TimeSeries(Series):
     pass
diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index ff51a5d8e..7746e7e43 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -8,8 +8,8 @@ import numpy as np
 
 import operator
 
-from pandas.core.common import _pickle_array, _unpickle_array
-from pandas.core.index import Index, NULL_INDEX
+from pandas.core.common import _pickle_array, _unpickle_array, _mut_exclusive
+from pandas.core.index import Index
 from pandas.core.series import Series, TimeSeries, _ensure_index
 from pandas.core.frame import DataFrame, extract_index, try_sort
 from pandas.core.matrix import DataMatrix
@@ -1018,7 +1018,8 @@ class SparseWidePanel(WidePanel):
         lp = LongPanel(values, self.items, index)
         return lp.sort('major')
 
-    def reindex(self, major=None, items=None, minor=None):
+    def reindex(self, major=None, items=None, minor=None, major_axis=None,
+                minor_axis=None):
         """
 
         Parameters
@@ -1028,6 +1029,9 @@ class SparseWidePanel(WidePanel):
         -------
         reindexed : SparseWidePanel
         """
+        major = _mut_exclusive(major, major_axis)
+        minor = _mut_exclusive(minor, minor_axis)
+
         if None == major == items == minor:
             raise ValueError('Must specify at least one axis')
 
@@ -1051,29 +1055,6 @@ class SparseWidePanel(WidePanel):
                                default_fill_value=self.default_fill_value,
                                default_kind=self.default_kind)
 
-    def truncate(self, before=None, after=None, axis='major'):
-        """Function truncates a sorted Panel before and/or after
-        some particular dates
-
-        Parameters
-        ----------
-        before : date
-            Left boundary
-        after : date
-            Right boundary
-
-        Returns
-        -------
-        WidePanel
-        """
-        axis = self._get_axis_name(axis)
-        index = self._get_axis(axis)
-
-        beg_slice, end_slice = self._getIndices(before, after, axis=axis)
-        new_index = index[beg_slice:end_slice]
-
-        return self.reindex(**{axis : new_index})
-
     def _combine(self, other, func, axis=0):
         if isinstance(other, DataFrame):
             return self._combineFrame(other, func, axis=axis)
diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index acaeff2aa..d42549499 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -71,15 +71,15 @@ class TestDataFrame(unittest.TestCase):
         self.assert_(self.klass._get_axis_name(1) == 'columns')
         self.assert_(self.klass._get_axis_name('index') == 'index')
         self.assert_(self.klass._get_axis_name('columns') == 'columns')
-        self.assertRaises(KeyError, self.klass._get_axis_name, 'foo')
-        self.assertRaises(KeyError, self.klass._get_axis_name, None)
+        self.assertRaises(Exception, self.klass._get_axis_name, 'foo')
+        self.assertRaises(Exception, self.klass._get_axis_name, None)
 
         self.assert_(self.klass._get_axis_number(0) == 0)
         self.assert_(self.klass._get_axis_number(1) == 1)
         self.assert_(self.klass._get_axis_number('index') == 0)
         self.assert_(self.klass._get_axis_number('columns') == 1)
-        self.assertRaises(KeyError, self.klass._get_axis_number, 2)
-        self.assertRaises(KeyError, self.klass._get_axis_number, None)
+        self.assertRaises(Exception, self.klass._get_axis_number, 2)
+        self.assertRaises(Exception, self.klass._get_axis_number, None)
 
         self.assert_(self.frame._get_axis(0) is self.frame.index)
         self.assert_(self.frame._get_axis(1) is self.frame.columns)
@@ -1805,6 +1805,19 @@ class TestDataFrame(unittest.TestCase):
         expected = self.frame.reindex(columns=['B', 'D'])
         assert_frame_equal(result, expected)
 
+    def test_get_axis_etc(self):
+        f = self.frame
+
+        self.assertEquals(f._get_axis_number(0), 0)
+        self.assertEquals(f._get_axis_number(1), 1)
+        self.assertEquals(f._get_axis_name(0), 'index')
+        self.assertEquals(f._get_axis_name(1), 'columns')
+
+        self.assert_(f._get_axis(0) is f.index)
+        self.assert_(f._get_axis(1) is f.columns)
+        self.assertRaises(Exception, f._get_axis_number, 2)
+
+
 if __name__ == '__main__':
     import nose
     nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
diff --git a/pandas/core/tests/test_matrix.py b/pandas/core/tests/test_matrix.py
index 40e046b6e..4f15d4b60 100644
--- a/pandas/core/tests/test_matrix.py
+++ b/pandas/core/tests/test_matrix.py
@@ -293,3 +293,4 @@ if __name__ == '__main__':
     import nose
     nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
                    exit=False)
+
diff --git a/pandas/core/tests/test_panel.py b/pandas/core/tests/test_panel.py
index c7cc21afc..a57c0d85b 100644
--- a/pandas/core/tests/test_panel.py
+++ b/pandas/core/tests/test_panel.py
@@ -1,6 +1,7 @@
 # pylint: disable=W0612
 
 
+from datetime import datetime
 import os
 import operator
 import unittest
@@ -204,15 +205,15 @@ class TestWidePanel(unittest.TestCase, PanelTests, SafeForSparseTests):
 
     def test_get_axis_name(self):
         self.assertEqual(self.panel._get_axis_name(0), 'items')
-        self.assertEqual(self.panel._get_axis_name(1), 'major')
-        self.assertEqual(self.panel._get_axis_name(2), 'minor')
+        self.assertEqual(self.panel._get_axis_name(1), 'major_axis')
+        self.assertEqual(self.panel._get_axis_name(2), 'minor_axis')
 
     def test_get_plane_axes(self):
         # what to do here?
 
         index, columns = self.panel._get_plane_axes('items')
-        index, columns = self.panel._get_plane_axes('major')
-        index, columns = self.panel._get_plane_axes('minor')
+        index, columns = self.panel._get_plane_axes('major_axis')
+        index, columns = self.panel._get_plane_axes('minor_axis')
 
         index, columns = self.panel._get_plane_axes(0)
 
@@ -349,6 +350,10 @@ class TestWidePanel(unittest.TestCase, PanelTests, SafeForSparseTests):
         result = self.panel.reindex(major=new_major)
         assert_frame_equal(result['ItemB'], ref.reindex(index=new_major))
 
+        # raise exception put both major and major_axis
+        self.assertRaises(Exception, self.panel.reindex,
+                          major_axis=new_major, major=new_major)
+
         # minor
         new_minor = list(self.panel.minor_axis[:2])
         result = self.panel.reindex(minor=new_minor)
@@ -536,6 +541,29 @@ class TestWidePanel(unittest.TestCase, PanelTests, SafeForSparseTests):
 
         self.assertRaises(Exception, self.panel.shift, 1, axis='items')
 
+    def test_select(self):
+        p = self.panel
+
+        # select items
+        result = p.select(lambda x: x in ('ItemA', 'ItemC'), axis='items')
+        expected = p.reindex(items=['ItemA', 'ItemC'])
+        assert_panel_equal(result, expected)
+
+        # select major_axis
+        result = p.select(lambda x: x >= datetime(2000, 1, 15), axis='major')
+        new_major = p.major_axis[p.major_axis >= datetime(2000, 1, 15)]
+        expected = p.reindex(major=new_major)
+        assert_panel_equal(result, expected)
+
+        # select minor_axis
+        result = p.select(lambda x: x in ('D', 'A'), axis=2)
+        expected = p.reindex(minor=['A', 'D'])
+        assert_panel_equal(result, expected)
+
+        # corner case, empty thing
+        result = p.select(lambda x: x in ('foo',), axis='items')
+        assert_panel_equal(result, p.reindex(items=[]))
+
 class TestLongPanelIndex(unittest.TestCase):
 
     def setUp(self):
@@ -961,3 +989,8 @@ class TestFactor(unittest.TestCase):
         labels = self.factor.labels
         for i, idx in enumerate(self.factor.levels):
             self.assertEqual(f(arr[labels == i]), agged[i])
+
+if __name__ == '__main__':
+    import nose
+    nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
+                   exit=False)
diff --git a/pandas/core/tests/test_series.py b/pandas/core/tests/test_series.py
index 7e36ee978..9bb058daf 100644
--- a/pandas/core/tests/test_series.py
+++ b/pandas/core/tests/test_series.py
@@ -150,6 +150,14 @@ class TestSeries(unittest.TestCase):
         self.assertEqual(self.series[2], slice1[1])
         self.assertEqual(self.objSeries[2], slice2[1])
 
+    def test_getitem_boolean_list(self):
+        s = self.series
+        vec = s > s.median()
+
+        result = s[list(vec)]
+        expected = s[vec]
+        assert_series_equal(result, expected)
+
     def test_slice(self):
         numSlice = self.series[10:20]
         numSliceEnd = self.series[-10:]
@@ -884,7 +892,15 @@ class TestSeries(unittest.TestCase):
             for idx in group.index:
                 self.assertEqual(transformed[idx], mean)
 
+    def test_select(self):
+        n = len(self.ts)
+        result = self.ts.select(lambda x: x >= self.ts.index[n // 2])
+        expected = self.ts.reindex(self.ts.index[n//2:])
+        assert_series_equal(result, expected)
 
+        result = self.ts.select(lambda x: x.weekday() == 2)
+        expected = self.ts[self.ts.weekday == 2]
+        assert_series_equal(result, expected)
 
 if __name__ == '__main__':
     import nose
diff --git a/test.sh b/test.sh
index a70147c39..71deef338 100755
--- a/test.sh
+++ b/test.sh
@@ -1,5 +1,5 @@
 #!/bin/sh
 coverage erase
-nosetests -w pandas/core --with-coverage --cover-package=pandas.core --pdb-failure
+nosetests -w pandas/core --with-coverage --cover-package=pandas.core --pdb-failure --pdb
 # nosetests -w pandas/stats --with-coverage --cover-package=pandas.stats
 # coverage run runtests.py
\ No newline at end of file
