commit 60e12566193610e34e7271446871085fa85ecf49
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jan 19 21:21:53 2012 -0500

    ENH: enable binary and logical Series operator to do data alignment

diff --git a/pandas/core/nanops.py b/pandas/core/nanops.py
index c9ba4f7cf..c0b4b9430 100644
--- a/pandas/core/nanops.py
+++ b/pandas/core/nanops.py
@@ -306,3 +306,30 @@ def nancov(a, b):
         return np.nan
 
     return np.cov(a, b)[0, 1]
+
+# NA-friendly array comparisons
+
+import operator
+
+def make_nancomp(op):
+    def f(x, y):
+        xmask = isnull(x)
+        ymask = isnull(y)
+        mask = xmask | ymask
+
+        result = op(x, y)
+
+        if mask.any():
+            if result.dtype == np.bool_:
+                result = result.astype('O')
+            np.putmask(result, mask, np.nan)
+
+        return result
+    return f
+
+nangt = make_nancomp(operator.gt)
+nange = make_nancomp(operator.ge)
+nanlt = make_nancomp(operator.lt)
+nanle = make_nancomp(operator.le)
+naneq = make_nancomp(operator.eq)
+nanne = make_nancomp(operator.ne)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 6e8849d42..67a04671d 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -621,6 +621,19 @@ copy : boolean, default False
     __rfloordiv__ = _arith_method(lambda x, y: y // x, '__floordiv__')
     __rpow__ = _arith_method(lambda x, y: y ** x, '__pow__')
 
+    # comparisons
+    __gt__ = _arith_method(operator.gt, '__gt__')
+    __ge__ = _arith_method(operator.ge, '__ge__')
+    __lt__ = _arith_method(operator.lt, '__lt__')
+    __le__ = _arith_method(operator.le, '__le__')
+    __eq__ = _arith_method(operator.eq, '__eq__')
+    __ne__ = _arith_method(operator.ne, '__ne__')
+
+    # binary logic
+    __or__ = _arith_method(operator.or_, '__or__')
+    __and__ = _arith_method(operator.and_, '__and__')
+    __xor__ = _arith_method(operator.xor, '__xor__')
+
     # Inplace operators
     __iadd__ = __add__
     __isub__ = __sub__
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index b250bc932..b2d314ce5 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1,4 +1,3 @@
-
 # pylint: disable-msg=W0612,E1101
 from copy import deepcopy
 from datetime import datetime, timedelta
@@ -2208,7 +2207,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
             result2 = func(self.simple, row)
             self.assert_(np.array_equal(result2.values,
-                                        func(self.simple.values, row)))
+                                        func(self.simple.values, row.values)))
 
             result3 = func(self.frame, 0)
             self.assert_(np.array_equal(result3.values,
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index fa3104316..fb9358c00 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -999,11 +999,11 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
             tm.assert_almost_equal(cython_or_numpy, python)
 
         def check(other):
-            _check_op(other, operator.add)
-            _check_op(other, operator.sub)
-            _check_op(other, operator.truediv)
-            _check_op(other, operator.floordiv)
-            _check_op(other, operator.mul)
+            simple_ops = ['add', 'sub', 'mul', 'truediv', 'floordiv',
+                          'gt', 'ge', 'lt', 'le']
+
+            for opname in simple_ops:
+                _check_op(other, getattr(operator, opname))
             _check_op(other, operator.pow, pos_only=True)
 
             _check_op(other, lambda x, y: operator.add(y, x))
