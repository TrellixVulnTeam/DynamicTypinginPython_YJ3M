commit e2bf92590143880782d8a2ee23c53d3c1f584b8b
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun May 29 23:51:12 2011 +0100

    consistent column ordering in simpleParser, select function in DataFrame, boolean indexing fix in Series

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 0f11ce036..2b6cf87a6 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2376,6 +2376,25 @@ class DataFrame(Picklable, Groupable):
 
         return self._ix
 
+    def select(self, crit, axis=0):
+        """
+        Return data corresponding to axis labels matching criteria
+
+        Parameters
+        ----------
+        crit : function
+            To be called on each index (label). Should return True or False
+        axis : {0, 1}
+
+        Returns
+        -------
+        selection : DataFrame
+        """
+        axis_name = self._get_axis_name(axis)
+        axis = self._get_axis(axis)
+        new_axis = axis[np.asarray([crit(label) for label in axis])]
+        return self.reindex(**{axis_name : new_axis})
+
 class _DataFrameIndexer(object):
     """
     Class to support fancy indexing, potentially using labels of DataFrame
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 8bf4f686a..f166fe5fe 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -107,10 +107,18 @@ class Index(np.ndarray):
 
     def __getitem__(self, key):
         """Override numpy.ndarray's __getitem__ method to work as desired"""
+        arr_idx = self.view(np.ndarray)
         if np.isscalar(key):
-            return np.ndarray.__getitem__(self, key)
+            return arr_idx[key]
         else:
-            return Index(self.view(np.ndarray)[key])
+            # easier to ask forgiveness than permission
+            try:
+                return Index(arr_idx[key])
+            except Exception, e1:
+                try:
+                    return Index(arr_idx[np.asarray(key)])
+                except Exception, e2: # pragma: no cover
+                    raise e1
 
     def equals(self, other):
         """
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 335d33013..5e9ffd88b 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -280,9 +280,14 @@ class Series(np.ndarray, Picklable, Groupable):
 
         # is there a case where this would NOT be an ndarray?
         # need to find an example, I took out the case for now
-        dataSlice = values[key]
-        new_index = Index(self.index.view(ndarray)[key])
-        return Series(dataSlice, index=new_index)
+
+        # TODO: [slice(0, 5, None)] will break if you convert to ndarray,
+        # e.g. as requested by np.median
+        try:
+            return Series(values[key], index=self.index[key])
+        except Exception, e1:
+            key = np.asarray(key)
+            return Series(values[key], index=self.index[key])
 
     def get(self, key, default=None):
         """
@@ -1285,6 +1290,21 @@ class Series(np.ndarray, Picklable, Groupable):
         return Series([d.weekday() for d in self.index],
                       index=self.index)
 
+    def select(self, crit):
+        """
+        Return data corresponding to index values matching criteria
+
+        Parameters
+        ----------
+        crit : function
+            To be called on each index (label). Should return True or False
+
+        Returns
+        -------
+        selection : Series
+        """
+        mask = np.asarray([crit(idx) for idx in self.index])
+        return self[mask]
 
 class TimeSeries(Series):
     pass
diff --git a/pandas/core/tests/test_index.py b/pandas/core/tests/test_index.py
index 60304eff6..97c18bb5a 100644
--- a/pandas/core/tests/test_index.py
+++ b/pandas/core/tests/test_index.py
@@ -95,6 +95,10 @@ class TestIndex(unittest.TestCase):
         common.assert_dict_equal(tseries.map_indices(subIndex),
                                  subIndex.indexMap)
 
+        subIndex = self.strIndex[list(boolIdx)]
+        common.assert_dict_equal(tseries.map_indices(subIndex),
+                                 subIndex.indexMap)
+
     def test_fancy(self):
         sl = self.strIndex[[1,2,3]]
         for i in sl:
@@ -191,3 +195,8 @@ class TestIndex(unittest.TestCase):
         testit(self.strIndex)
         testit(self.dateIndex)
 
+if __name__ == '__main__':
+    import nose
+    nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
+                   exit=False)
+
diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index 69648ea1b..003483ac2 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -88,7 +88,7 @@ def simpleParser(lines, colNames=None, header=0, indexCol=0,
 
     data = _floatify(data, na_values=na_values)
     data = _convert_to_ndarrays(data)
-    return DataFrame(data=data, index=Index(index))
+    return DataFrame(data=data, columns=columns, index=Index(index))
 
 def _floatify(data_dict, na_values=None):
     # common NA values
