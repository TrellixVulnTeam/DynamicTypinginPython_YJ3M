commit cc2a22a872eca3dbc244cddfc034abc3d0747a44
Author: y-p <yoval@gmx.com>
Date:   Fri Dec 14 06:33:06 2012 +0200

    ENH: provide attribute style access to options via pd.options

diff --git a/RELEASE.rst b/RELEASE.rst
index 7e4eb0e69..72961f4d3 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -73,7 +73,8 @@ pandas 0.10.0
     backfilling time series data (GH2284_)
   - New option configuration system and functions `set_option`, `get_option`,
     `describe_option`, and `reset_option`. Deprecate `set_printoptions` and
-    `reset_printoptions` (GH2393_)
+    `reset_printoptions` (GH2393_).
+    You can also access options as attributes via ``pandas.options.X``
   - Wide DataFrames can be viewed more easily in the console with new
     `expand_frame_repr` and `line_width` configuration options. This is on by
     default now (GH2436_)
diff --git a/doc/source/basics.rst b/doc/source/basics.rst
index 6d26aaf86..abdade7b6 100644
--- a/doc/source/basics.rst
+++ b/doc/source/basics.rst
@@ -1049,8 +1049,20 @@ Working with package options
 .. _basics.working_with_options:
 
 Introduced in 0.10.0, pandas supports a new system for working with options.
-The 4 relavent functions are available directly from the ``pandas`` namespace,
-and they are:
+Options have a full "dotted-style", case-insensitive name (e.g. ``display.max_rows``),
+
+You can get/set options directly as attributes of the top-level ``options`` attribute:
+
+.. ipython:: python
+
+   import pandas as pd
+   pd.options.display.max_rows
+   pd.options.display.max_rows = 999
+   pd.options.display.max_rows
+
+
+There is also an API composed of 4 relavent functions, available directly from the ``pandas``
+namespace, and they are:
 
 - ``get_option`` / ``set_option`` - get/set the value of a single option.
 - ``reset_option`` - reset one or more options to their default value.
@@ -1058,7 +1070,7 @@ and they are:
 
 **Note:** developers can check out pandas/core/config.py for more info.
 
-Options have a full "dotted-style", case-insensitive name (e.g. ``display.max_rows``),
+
 but all of the functions above accept a regexp pattern (``re.search`` style) as argument,
 so passing in a substring will work - as long as it is unambiguous :
 
diff --git a/pandas/core/api.py b/pandas/core/api.py
index 68dc2d1b1..7820a94fd 100644
--- a/pandas/core/api.py
+++ b/pandas/core/api.py
@@ -31,4 +31,4 @@ from pandas.core.daterange import DateRange # deprecated
 import pandas.core.datetools as datetools
 
 from pandas.core.config import get_option,set_option,reset_option,\
-                               describe_option
+                               describe_option, options
diff --git a/pandas/core/config.py b/pandas/core/config.py
index 87f0b2050..8eb5afc4a 100644
--- a/pandas/core/config.py
+++ b/pandas/core/config.py
@@ -138,6 +138,29 @@ def _reset_option(pat):
     for k in keys:
         _set_option(k, _registered_options[k].defval)
 
+class DictWrapper(object):
+    """ provide attribute-style access to a nested dict
+    """
+    def __init__(self,d):
+        object.__setattr__(self,"d",d)
+
+    def __setattr__(self,key,val):
+        # you can't set new keys
+        # can you can't overwrite subtrees
+        if key in self.d and not isinstance(self.d[key],dict):
+            self.d[key]=val
+        else:
+            raise KeyError("You can only set the value of existing options")
+
+    def __getattr__(self,key):
+        v=object.__getattribute__(self,"d")[key]
+        if isinstance(v,dict):
+            return DictWrapper(v)
+        else:
+            return v
+
+    def __dir__(self):
+        return self.d.keys()
 
 # For user convenience,  we'd like to have the available options described
 # in the docstring. For dev convenience we'd like to generate the docstrings
@@ -266,7 +289,7 @@ get_option = CallableDyanmicDoc(_get_option, _get_option_tmpl)
 set_option = CallableDyanmicDoc(_set_option, _set_option_tmpl)
 reset_option = CallableDyanmicDoc(_reset_option, _reset_option_tmpl)
 describe_option = CallableDyanmicDoc(_describe_option, _describe_option_tmpl)
-
+options = DictWrapper(_global_config)
 
 ######################################################
 # Functions for use by pandas developers, in addition to User - api
diff --git a/pandas/tests/test_config.py b/pandas/tests/test_config.py
index 14d0a115c..91318421b 100644
--- a/pandas/tests/test_config.py
+++ b/pandas/tests/test_config.py
@@ -19,6 +19,7 @@ class TestConfig(unittest.TestCase):
 
     def setUp(self):
         setattr(self.cf, '_global_config', {})
+        setattr(self.cf, 'options', self.cf.DictWrapper(self.cf._global_config))
         setattr(self.cf, '_deprecated_options', {})
         setattr(self.cf, '_registered_options', {})
 
@@ -323,5 +324,26 @@ class TestConfig(unittest.TestCase):
         self.cf.set_option("a",17)
         eq(17)
 
+    def test_attribute_access(self):
+        def f():
+            options.b=1
+        def f2():
+            options.display=1
+        self.cf.register_option('a',0)
+        options=self.cf.options
+
+        self.assertEqual(options.a,0)
+        with self.cf.option_context("a",15):
+            self.assertEqual(options.a,15)
+
+        options.a=500
+        self.assertEqual(self.cf.get_option("a"),500)
+
+        self.cf.reset_option("a")
+        self.assertEqual(options.a, self.cf.get_option("a",0))
+
+        self.assertRaises(KeyError,f)
+        self.assertRaises(KeyError,f2)
+
 # fmt.reset_printoptions and fmt.set_printoptions were altered
 # to use core.config, test_format exercises those paths.
