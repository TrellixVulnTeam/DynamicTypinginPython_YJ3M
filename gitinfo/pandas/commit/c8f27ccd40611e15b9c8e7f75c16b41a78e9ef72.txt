commit c8f27ccd40611e15b9c8e7f75c16b41a78e9ef72
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Wed Jun 13 03:54:55 2018 -0700

    parametrize tests, unify repeated tests (#21405)

diff --git a/pandas/tests/tseries/offsets/test_offsets.py b/pandas/tests/tseries/offsets/test_offsets.py
index a1c5a8250..8bf0d9f91 100644
--- a/pandas/tests/tseries/offsets/test_offsets.py
+++ b/pandas/tests/tseries/offsets/test_offsets.py
@@ -83,6 +83,7 @@ def test_to_m8():
 
 class Base(object):
     _offset = None
+    d = Timestamp(datetime(2008, 1, 2))
 
     timezones = [None, 'UTC', 'Asia/Tokyo', 'US/Eastern',
                  'dateutil/Asia/Tokyo', 'dateutil/US/Pacific']
@@ -142,6 +143,56 @@ class Base(object):
             # so ignore
             pass
 
+    def test_offsets_compare_equal(self):
+        # root cause of GH#456: __ne__ was not implemented
+        if self._offset is None:
+            return
+        offset1 = self._offset()
+        offset2 = self._offset()
+        assert not offset1 != offset2
+        assert offset1 == offset2
+
+    def test_rsub(self):
+        if self._offset is None or not hasattr(self, "offset2"):
+            # i.e. skip for TestCommon and YQM subclasses that do not have
+            # offset2 attr
+            return
+        assert self.d - self.offset2 == (-self.offset2).apply(self.d)
+
+    def test_radd(self):
+        if self._offset is None or not hasattr(self, "offset2"):
+            # i.e. skip for TestCommon and YQM subclasses that do not have
+            # offset2 attr
+            return
+        assert self.d + self.offset2 == self.offset2 + self.d
+
+    def test_sub(self):
+        if self._offset is None or not hasattr(self, "offset2"):
+            # i.e. skip for TestCommon and YQM subclasses that do not have
+            # offset2 attr
+            return
+        off = self.offset2
+        with pytest.raises(Exception):
+            off - self.d
+
+        assert 2 * off - off == off
+        assert self.d - self.offset2 == self.d + self._offset(-2)
+        assert self.d - self.offset2 == self.d - (2 * off - off)
+
+    def testMult1(self):
+        if self._offset is None or not hasattr(self, "offset1"):
+            # i.e. skip for TestCommon and YQM subclasses that do not have
+            # offset1 attr
+            return
+        assert self.d + 10 * self.offset1 == self.d + self._offset(10)
+        assert self.d + 5 * self.offset1 == self.d + self._offset(5)
+
+    def testMult2(self):
+        if self._offset is None:
+            return
+        assert self.d + (-5 * self._offset(-10)) == self.d + self._offset(50)
+        assert self.d + (-3 * self._offset(-2)) == self.d + self._offset(6)
+
 
 class TestCommon(Base):
     # exected value created by Base._get_offset
@@ -509,6 +560,7 @@ class TestBusinessDay(Base):
         self.d = datetime(2008, 1, 1)
 
         self.offset = BDay()
+        self.offset1 = self.offset
         self.offset2 = BDay(2)
 
     def test_different_normalize_equals(self):
@@ -530,7 +582,7 @@ class TestBusinessDay(Base):
 
         assert (self.d + offset) == datetime(2008, 1, 2, 2)
 
-    def testEQ(self):
+    def test_eq(self):
         assert self.offset2 == self.offset2
 
     def test_mul(self):
@@ -539,28 +591,9 @@ class TestBusinessDay(Base):
     def test_hash(self):
         assert hash(self.offset2) == hash(self.offset2)
 
-    def testCall(self):
+    def test_call(self):
         assert self.offset2(self.d) == datetime(2008, 1, 3)
 
-    def testRAdd(self):
-        assert self.d + self.offset2 == self.offset2 + self.d
-
-    def testSub(self):
-        off = self.offset2
-        pytest.raises(Exception, off.__sub__, self.d)
-        assert 2 * off - off == off
-
-        assert self.d - self.offset2 == self.d + BDay(-2)
-
-    def testRSub(self):
-        assert self.d - self.offset2 == (-self.offset2).apply(self.d)
-
-    def testMult1(self):
-        assert self.d + 10 * self.offset == self.d + BDay(10)
-
-    def testMult2(self):
-        assert self.d + (-5 * BDay(-10)) == self.d + BDay(50)
-
     def testRollback1(self):
         assert BDay(10).rollback(self.d) == self.d
 
@@ -672,12 +705,6 @@ class TestBusinessDay(Base):
     def test_apply_corner(self):
         pytest.raises(TypeError, BDay().apply, BMonthEnd())
 
-    def test_offsets_compare_equal(self):
-        # root cause of #456
-        offset1 = BDay()
-        offset2 = BDay()
-        assert not offset1 != offset2
-
 
 class TestBusinessHour(Base):
     _offset = BusinessHour
@@ -729,7 +756,7 @@ class TestBusinessHour(Base):
         assert self.d + BusinessHour() * 3 == expected
         assert self.d + BusinessHour(n=3) == expected
 
-    def testEQ(self):
+    def test_eq(self):
         for offset in [self.offset1, self.offset2, self.offset3, self.offset4]:
             assert offset == offset
 
@@ -743,31 +770,22 @@ class TestBusinessHour(Base):
         for offset in [self.offset1, self.offset2, self.offset3, self.offset4]:
             assert hash(offset) == hash(offset)
 
-    def testCall(self):
+    def test_call(self):
         assert self.offset1(self.d) == datetime(2014, 7, 1, 11)
         assert self.offset2(self.d) == datetime(2014, 7, 1, 13)
         assert self.offset3(self.d) == datetime(2014, 6, 30, 17)
         assert self.offset4(self.d) == datetime(2014, 6, 30, 14)
 
-    def testRAdd(self):
-        assert self.d + self.offset2 == self.offset2 + self.d
-
-    def testSub(self):
+    def test_sub(self):
+        # we have to override test_sub here becasue self.offset2 is not
+        # defined as self._offset(2)
         off = self.offset2
-        pytest.raises(Exception, off.__sub__, self.d)
+        with pytest.raises(Exception):
+            off - self.d
         assert 2 * off - off == off
 
         assert self.d - self.offset2 == self.d + self._offset(-3)
 
-    def testRSub(self):
-        assert self.d - self.offset2 == (-self.offset2).apply(self.d)
-
-    def testMult1(self):
-        assert self.d + 5 * self.offset1 == self.d + self._offset(5)
-
-    def testMult2(self):
-        assert self.d + (-3 * self._offset(-2)) == self.d + self._offset(6)
-
     def testRollback1(self):
         assert self.offset1.rollback(self.d) == self.d
         assert self.offset2.rollback(self.d) == self.d
@@ -1317,12 +1335,6 @@ class TestBusinessHour(Base):
             for base, expected in compat.iteritems(cases):
                 assert_offset_equal(offset, base, expected)
 
-    def test_offsets_compare_equal(self):
-        # root cause of #456
-        offset1 = self._offset()
-        offset2 = self._offset()
-        assert not offset1 != offset2
-
     def test_datetimeindex(self):
         idx1 = DatetimeIndex(start='2014-07-04 15:00', end='2014-07-08 10:00',
                              freq='BH')
@@ -1361,6 +1373,8 @@ class TestBusinessHour(Base):
 
 class TestCustomBusinessHour(Base):
     _offset = CustomBusinessHour
+    holidays = ['2014-06-27', datetime(2014, 6, 30),
+                np.datetime64('2014-07-02')]
 
     def setup_method(self, method):
         # 2014 Calendar to check custom holidays
@@ -1371,8 +1385,6 @@ class TestCustomBusinessHour(Base):
         self.d = datetime(2014, 7, 1, 10, 00)
         self.offset1 = CustomBusinessHour(weekmask='Tue Wed Thu Fri')
 
-        self.holidays = ['2014-06-27', datetime(2014, 6, 30),
-                         np.datetime64('2014-07-02')]
         self.offset2 = CustomBusinessHour(holidays=self.holidays)
 
     def test_constructor_errors(self):
@@ -1401,7 +1413,7 @@ class TestCustomBusinessHour(Base):
         assert self.d + CustomBusinessHour() * 3 == expected
         assert self.d + CustomBusinessHour(n=3) == expected
 
-    def testEQ(self):
+    def test_eq(self):
         for offset in [self.offset1, self.offset2]:
             assert offset == offset
 
@@ -1418,33 +1430,19 @@ class TestCustomBusinessHour(Base):
         assert (CustomBusinessHour(holidays=['2014-06-27']) !=
                 CustomBusinessHour(holidays=['2014-06-28']))
 
+    def test_sub(self):
+        # override the Base.test_sub implementation because self.offset2 is
+        # defined differently in this class than the test expects
+        pass
+
     def test_hash(self):
         assert hash(self.offset1) == hash(self.offset1)
         assert hash(self.offset2) == hash(self.offset2)
 
-    def testCall(self):
+    def test_call(self):
         assert self.offset1(self.d) == datetime(2014, 7, 1, 11)
         assert self.offset2(self.d) == datetime(2014, 7, 1, 11)
 
-    def testRAdd(self):
-        assert self.d + self.offset2 == self.offset2 + self.d
-
-    def testSub(self):
-        off = self.offset2
-        pytest.raises(Exception, off.__sub__, self.d)
-        assert 2 * off - off == off
-
-        assert self.d - self.offset2 == self.d - (2 * off - off)
-
-    def testRSub(self):
-        assert self.d - self.offset2 == (-self.offset2).apply(self.d)
-
-    def testMult1(self):
-        assert self.d + 5 * self.offset1 == self.d + self._offset(5)
-
-    def testMult2(self):
-        assert self.d + (-3 * self._offset(-2)) == self.d + self._offset(6)
-
     def testRollback1(self):
         assert self.offset1.rollback(self.d) == self.d
         assert self.offset2.rollback(self.d) == self.d
@@ -1484,49 +1482,51 @@ class TestCustomBusinessHour(Base):
         result = offset.rollforward(dt)
         assert result == datetime(2014, 7, 7, 9)
 
-    def test_normalize(self):
-        tests = []
-
-        tests.append((CustomBusinessHour(normalize=True,
-                                         holidays=self.holidays),
-                      {datetime(2014, 7, 1, 8): datetime(2014, 7, 1),
-                       datetime(2014, 7, 1, 17): datetime(2014, 7, 3),
-                       datetime(2014, 7, 1, 16): datetime(2014, 7, 3),
-                       datetime(2014, 7, 1, 23): datetime(2014, 7, 3),
-                       datetime(2014, 7, 1, 0): datetime(2014, 7, 1),
-                       datetime(2014, 7, 4, 15): datetime(2014, 7, 4),
-                       datetime(2014, 7, 4, 15, 59): datetime(2014, 7, 4),
-                       datetime(2014, 7, 4, 16, 30): datetime(2014, 7, 7),
-                       datetime(2014, 7, 5, 23): datetime(2014, 7, 7),
-                       datetime(2014, 7, 6, 10): datetime(2014, 7, 7)}))
-
-        tests.append((CustomBusinessHour(-1, normalize=True,
-                                         holidays=self.holidays),
-                      {datetime(2014, 7, 1, 8): datetime(2014, 6, 26),
-                       datetime(2014, 7, 1, 17): datetime(2014, 7, 1),
-                       datetime(2014, 7, 1, 16): datetime(2014, 7, 1),
-                       datetime(2014, 7, 1, 10): datetime(2014, 6, 26),
-                       datetime(2014, 7, 1, 0): datetime(2014, 6, 26),
-                       datetime(2014, 7, 7, 10): datetime(2014, 7, 4),
-                       datetime(2014, 7, 7, 10, 1): datetime(2014, 7, 7),
-                       datetime(2014, 7, 5, 23): datetime(2014, 7, 4),
-                       datetime(2014, 7, 6, 10): datetime(2014, 7, 4)}))
-
-        tests.append((CustomBusinessHour(1, normalize=True, start='17:00',
-                                         end='04:00', holidays=self.holidays),
-                      {datetime(2014, 7, 1, 8): datetime(2014, 7, 1),
-                       datetime(2014, 7, 1, 17): datetime(2014, 7, 1),
-                       datetime(2014, 7, 1, 23): datetime(2014, 7, 2),
-                       datetime(2014, 7, 2, 2): datetime(2014, 7, 2),
-                       datetime(2014, 7, 2, 3): datetime(2014, 7, 3),
-                       datetime(2014, 7, 4, 23): datetime(2014, 7, 5),
-                       datetime(2014, 7, 5, 2): datetime(2014, 7, 5),
-                       datetime(2014, 7, 7, 2): datetime(2014, 7, 7),
-                       datetime(2014, 7, 7, 17): datetime(2014, 7, 7)}))
-
-        for offset, cases in tests:
-            for dt, expected in compat.iteritems(cases):
-                assert offset.apply(dt) == expected
+    normalize_cases = []
+    normalize_cases.append((
+        CustomBusinessHour(normalize=True, holidays=holidays),
+        {datetime(2014, 7, 1, 8): datetime(2014, 7, 1),
+         datetime(2014, 7, 1, 17): datetime(2014, 7, 3),
+         datetime(2014, 7, 1, 16): datetime(2014, 7, 3),
+         datetime(2014, 7, 1, 23): datetime(2014, 7, 3),
+         datetime(2014, 7, 1, 0): datetime(2014, 7, 1),
+         datetime(2014, 7, 4, 15): datetime(2014, 7, 4),
+         datetime(2014, 7, 4, 15, 59): datetime(2014, 7, 4),
+         datetime(2014, 7, 4, 16, 30): datetime(2014, 7, 7),
+         datetime(2014, 7, 5, 23): datetime(2014, 7, 7),
+         datetime(2014, 7, 6, 10): datetime(2014, 7, 7)}))
+
+    normalize_cases.append((
+        CustomBusinessHour(-1, normalize=True, holidays=holidays),
+        {datetime(2014, 7, 1, 8): datetime(2014, 6, 26),
+         datetime(2014, 7, 1, 17): datetime(2014, 7, 1),
+         datetime(2014, 7, 1, 16): datetime(2014, 7, 1),
+         datetime(2014, 7, 1, 10): datetime(2014, 6, 26),
+         datetime(2014, 7, 1, 0): datetime(2014, 6, 26),
+         datetime(2014, 7, 7, 10): datetime(2014, 7, 4),
+         datetime(2014, 7, 7, 10, 1): datetime(2014, 7, 7),
+         datetime(2014, 7, 5, 23): datetime(2014, 7, 4),
+         datetime(2014, 7, 6, 10): datetime(2014, 7, 4)}))
+
+    normalize_cases.append((
+        CustomBusinessHour(1, normalize=True,
+                           start='17:00', end='04:00',
+                           holidays=holidays),
+        {datetime(2014, 7, 1, 8): datetime(2014, 7, 1),
+         datetime(2014, 7, 1, 17): datetime(2014, 7, 1),
+         datetime(2014, 7, 1, 23): datetime(2014, 7, 2),
+         datetime(2014, 7, 2, 2): datetime(2014, 7, 2),
+         datetime(2014, 7, 2, 3): datetime(2014, 7, 3),
+         datetime(2014, 7, 4, 23): datetime(2014, 7, 5),
+         datetime(2014, 7, 5, 2): datetime(2014, 7, 5),
+         datetime(2014, 7, 7, 2): datetime(2014, 7, 7),
+         datetime(2014, 7, 7, 17): datetime(2014, 7, 7)}))
+
+    @pytest.mark.parametrize('norm_cases', normalize_cases)
+    def test_normalize(self, norm_cases):
+        offset, cases = norm_cases
+        for dt, expected in compat.iteritems(cases):
+            assert offset.apply(dt) == expected
 
     def test_onOffset(self):
         tests = []
@@ -1544,75 +1544,75 @@ class TestCustomBusinessHour(Base):
             for dt, expected in compat.iteritems(cases):
                 assert offset.onOffset(dt) == expected
 
-    def test_apply(self):
-        tests = []
-
-        tests.append((
-            CustomBusinessHour(holidays=self.holidays),
-            {datetime(2014, 7, 1, 11): datetime(2014, 7, 1, 12),
-             datetime(2014, 7, 1, 13): datetime(2014, 7, 1, 14),
-             datetime(2014, 7, 1, 15): datetime(2014, 7, 1, 16),
-             datetime(2014, 7, 1, 19): datetime(2014, 7, 3, 10),
-             datetime(2014, 7, 1, 16): datetime(2014, 7, 3, 9),
-             datetime(2014, 7, 1, 16, 30, 15): datetime(2014, 7, 3, 9, 30, 15),
-             datetime(2014, 7, 1, 17): datetime(2014, 7, 3, 10),
-             datetime(2014, 7, 2, 11): datetime(2014, 7, 3, 10),
-             # out of business hours
-             datetime(2014, 7, 2, 8): datetime(2014, 7, 3, 10),
-             datetime(2014, 7, 2, 19): datetime(2014, 7, 3, 10),
-             datetime(2014, 7, 2, 23): datetime(2014, 7, 3, 10),
-             datetime(2014, 7, 3, 0): datetime(2014, 7, 3, 10),
-             # saturday
-             datetime(2014, 7, 5, 15): datetime(2014, 7, 7, 10),
-             datetime(2014, 7, 4, 17): datetime(2014, 7, 7, 10),
-             datetime(2014, 7, 4, 16, 30): datetime(2014, 7, 7, 9, 30),
-             datetime(2014, 7, 4, 16, 30, 30): datetime(2014, 7, 7, 9, 30,
-                                                        30)}))
-
-        tests.append((
-            CustomBusinessHour(4, holidays=self.holidays),
-            {datetime(2014, 7, 1, 11): datetime(2014, 7, 1, 15),
-             datetime(2014, 7, 1, 13): datetime(2014, 7, 3, 9),
-             datetime(2014, 7, 1, 15): datetime(2014, 7, 3, 11),
-             datetime(2014, 7, 1, 16): datetime(2014, 7, 3, 12),
-             datetime(2014, 7, 1, 17): datetime(2014, 7, 3, 13),
-             datetime(2014, 7, 2, 11): datetime(2014, 7, 3, 13),
-             datetime(2014, 7, 2, 8): datetime(2014, 7, 3, 13),
-             datetime(2014, 7, 2, 19): datetime(2014, 7, 3, 13),
-             datetime(2014, 7, 2, 23): datetime(2014, 7, 3, 13),
-             datetime(2014, 7, 3, 0): datetime(2014, 7, 3, 13),
-             datetime(2014, 7, 5, 15): datetime(2014, 7, 7, 13),
-             datetime(2014, 7, 4, 17): datetime(2014, 7, 7, 13),
-             datetime(2014, 7, 4, 16, 30): datetime(2014, 7, 7, 12, 30),
-             datetime(2014, 7, 4, 16, 30, 30): datetime(2014, 7, 7, 12, 30,
-                                                        30)}))
-
-        for offset, cases in tests:
-            for base, expected in compat.iteritems(cases):
-                assert_offset_equal(offset, base, expected)
-
-    def test_apply_nanoseconds(self):
-        tests = []
-
-        tests.append((CustomBusinessHour(holidays=self.holidays),
-                      {Timestamp('2014-07-01 15:00') + Nano(5): Timestamp(
-                          '2014-07-01 16:00') + Nano(5),
-                       Timestamp('2014-07-01 16:00') + Nano(5): Timestamp(
-                           '2014-07-03 09:00') + Nano(5),
-                       Timestamp('2014-07-01 16:00') - Nano(5): Timestamp(
-                           '2014-07-01 17:00') - Nano(5)}))
-
-        tests.append((CustomBusinessHour(-1, holidays=self.holidays),
-                      {Timestamp('2014-07-01 15:00') + Nano(5): Timestamp(
-                          '2014-07-01 14:00') + Nano(5),
-                       Timestamp('2014-07-01 10:00') + Nano(5): Timestamp(
-                           '2014-07-01 09:00') + Nano(5),
-                       Timestamp('2014-07-01 10:00') - Nano(5): Timestamp(
-                           '2014-06-26 17:00') - Nano(5), }))
+    apply_cases = []
+    apply_cases.append((
+        CustomBusinessHour(holidays=holidays),
+        {datetime(2014, 7, 1, 11): datetime(2014, 7, 1, 12),
+         datetime(2014, 7, 1, 13): datetime(2014, 7, 1, 14),
+         datetime(2014, 7, 1, 15): datetime(2014, 7, 1, 16),
+         datetime(2014, 7, 1, 19): datetime(2014, 7, 3, 10),
+         datetime(2014, 7, 1, 16): datetime(2014, 7, 3, 9),
+         datetime(2014, 7, 1, 16, 30, 15): datetime(2014, 7, 3, 9, 30, 15),
+         datetime(2014, 7, 1, 17): datetime(2014, 7, 3, 10),
+         datetime(2014, 7, 2, 11): datetime(2014, 7, 3, 10),
+         # out of business hours
+         datetime(2014, 7, 2, 8): datetime(2014, 7, 3, 10),
+         datetime(2014, 7, 2, 19): datetime(2014, 7, 3, 10),
+         datetime(2014, 7, 2, 23): datetime(2014, 7, 3, 10),
+         datetime(2014, 7, 3, 0): datetime(2014, 7, 3, 10),
+         # saturday
+         datetime(2014, 7, 5, 15): datetime(2014, 7, 7, 10),
+         datetime(2014, 7, 4, 17): datetime(2014, 7, 7, 10),
+         datetime(2014, 7, 4, 16, 30): datetime(2014, 7, 7, 9, 30),
+         datetime(2014, 7, 4, 16, 30, 30): datetime(2014, 7, 7, 9, 30, 30)}))
+
+    apply_cases.append((
+        CustomBusinessHour(4, holidays=holidays),
+        {datetime(2014, 7, 1, 11): datetime(2014, 7, 1, 15),
+         datetime(2014, 7, 1, 13): datetime(2014, 7, 3, 9),
+         datetime(2014, 7, 1, 15): datetime(2014, 7, 3, 11),
+         datetime(2014, 7, 1, 16): datetime(2014, 7, 3, 12),
+         datetime(2014, 7, 1, 17): datetime(2014, 7, 3, 13),
+         datetime(2014, 7, 2, 11): datetime(2014, 7, 3, 13),
+         datetime(2014, 7, 2, 8): datetime(2014, 7, 3, 13),
+         datetime(2014, 7, 2, 19): datetime(2014, 7, 3, 13),
+         datetime(2014, 7, 2, 23): datetime(2014, 7, 3, 13),
+         datetime(2014, 7, 3, 0): datetime(2014, 7, 3, 13),
+         datetime(2014, 7, 5, 15): datetime(2014, 7, 7, 13),
+         datetime(2014, 7, 4, 17): datetime(2014, 7, 7, 13),
+         datetime(2014, 7, 4, 16, 30): datetime(2014, 7, 7, 12, 30),
+         datetime(2014, 7, 4, 16, 30, 30): datetime(2014, 7, 7, 12, 30, 30)}))
+
+    @pytest.mark.parametrize('apply_case', apply_cases)
+    def test_apply(self, apply_case):
+        offset, cases = apply_case
+        for base, expected in compat.iteritems(cases):
+            assert_offset_equal(offset, base, expected)
 
-        for offset, cases in tests:
-            for base, expected in compat.iteritems(cases):
-                assert_offset_equal(offset, base, expected)
+    nano_cases = []
+    nano_cases.append(
+        (CustomBusinessHour(holidays=holidays),
+         {Timestamp('2014-07-01 15:00') + Nano(5):
+            Timestamp('2014-07-01 16:00') + Nano(5),
+          Timestamp('2014-07-01 16:00') + Nano(5):
+            Timestamp('2014-07-03 09:00') + Nano(5),
+          Timestamp('2014-07-01 16:00') - Nano(5):
+            Timestamp('2014-07-01 17:00') - Nano(5)}))
+
+    nano_cases.append(
+        (CustomBusinessHour(-1, holidays=holidays),
+         {Timestamp('2014-07-01 15:00') + Nano(5):
+            Timestamp('2014-07-01 14:00') + Nano(5),
+          Timestamp('2014-07-01 10:00') + Nano(5):
+            Timestamp('2014-07-01 09:00') + Nano(5),
+          Timestamp('2014-07-01 10:00') - Nano(5):
+            Timestamp('2014-06-26 17:00') - Nano(5)}))
+
+    @pytest.mark.parametrize('nano_case', nano_cases)
+    def test_apply_nanoseconds(self, nano_case):
+        offset, cases = nano_case
+        for base, expected in compat.iteritems(cases):
+            assert_offset_equal(offset, base, expected)
 
 
 class TestCustomBusinessDay(Base):
@@ -1623,6 +1623,7 @@ class TestCustomBusinessDay(Base):
         self.nd = np_datetime64_compat('2008-01-01 00:00:00Z')
 
         self.offset = CDay()
+        self.offset1 = self.offset
         self.offset2 = CDay(2)
 
     def test_different_normalize_equals(self):
@@ -1644,7 +1645,7 @@ class TestCustomBusinessDay(Base):
 
         assert (self.d + offset) == datetime(2008, 1, 2, 2)
 
-    def testEQ(self):
+    def test_eq(self):
         assert self.offset2 == self.offset2
 
     def test_mul(self):
@@ -1653,29 +1654,10 @@ class TestCustomBusinessDay(Base):
     def test_hash(self):
         assert hash(self.offset2) == hash(self.offset2)
 
-    def testCall(self):
+    def test_call(self):
         assert self.offset2(self.d) == datetime(2008, 1, 3)
         assert self.offset2(self.nd) == datetime(2008, 1, 3)
 
-    def testRAdd(self):
-        assert self.d + self.offset2 == self.offset2 + self.d
-
-    def testSub(self):
-        off = self.offset2
-        pytest.raises(Exception, off.__sub__, self.d)
-        assert 2 * off - off == off
-
-        assert self.d - self.offset2 == self.d + CDay(-2)
-
-    def testRSub(self):
-        assert self.d - self.offset2 == (-self.offset2).apply(self.d)
-
-    def testMult1(self):
-        assert self.d + 10 * self.offset == self.d + CDay(10)
-
-    def testMult2(self):
-        assert self.d + (-5 * CDay(-10)) == self.d + CDay(50)
-
     def testRollback1(self):
         assert CDay(10).rollback(self.d) == self.d
 
@@ -1783,12 +1765,6 @@ class TestCustomBusinessDay(Base):
     def test_apply_corner(self):
         pytest.raises(Exception, CDay().apply, BMonthEnd())
 
-    def test_offsets_compare_equal(self):
-        # root cause of #456
-        offset1 = CDay()
-        offset2 = CDay()
-        assert not offset1 != offset2
-
     def test_holidays(self):
         # Define a TradingDay offset
         holidays = ['2012-05-01', datetime(2013, 5, 1),
@@ -1857,10 +1833,11 @@ class CustomBusinessMonthBase(object):
     def setup_method(self, method):
         self.d = datetime(2008, 1, 1)
 
-        self.offset = self._object()
-        self.offset2 = self._object(2)
+        self.offset = self._offset()
+        self.offset1 = self.offset
+        self.offset2 = self._offset(2)
 
-    def testEQ(self):
+    def test_eq(self):
         assert self.offset2 == self.offset2
 
     def test_mul(self):
@@ -1869,47 +1846,23 @@ class CustomBusinessMonthBase(object):
     def test_hash(self):
         assert hash(self.offset2) == hash(self.offset2)
 
-    def testRAdd(self):
-        assert self.d + self.offset2 == self.offset2 + self.d
-
-    def testSub(self):
-        off = self.offset2
-        pytest.raises(Exception, off.__sub__, self.d)
-        assert 2 * off - off == off
-
-        assert self.d - self.offset2 == self.d + self._object(-2)
-
-    def testRSub(self):
-        assert self.d - self.offset2 == (-self.offset2).apply(self.d)
-
-    def testMult1(self):
-        assert self.d + 10 * self.offset == self.d + self._object(10)
-
-    def testMult2(self):
-        assert self.d + (-5 * self._object(-10)) == self.d + self._object(50)
-
-    def test_offsets_compare_equal(self):
-        offset1 = self._object()
-        offset2 = self._object()
-        assert not offset1 != offset2
-
     def test_roundtrip_pickle(self):
         def _check_roundtrip(obj):
             unpickled = tm.round_trip_pickle(obj)
             assert unpickled == obj
 
-        _check_roundtrip(self._object())
-        _check_roundtrip(self._object(2))
-        _check_roundtrip(self._object() * 2)
+        _check_roundtrip(self._offset())
+        _check_roundtrip(self._offset(2))
+        _check_roundtrip(self._offset() * 2)
 
     def test_copy(self):
         # GH 17452
-        off = self._object(weekmask='Mon Wed Fri')
+        off = self._offset(weekmask='Mon Wed Fri')
         assert off == off.copy()
 
 
 class TestCustomBusinessMonthEnd(CustomBusinessMonthBase, Base):
-    _object = CBMonthEnd
+    _offset = CBMonthEnd
 
     def test_different_normalize_equals(self):
         # equivalent in this special case
@@ -2026,7 +1979,7 @@ class TestCustomBusinessMonthEnd(CustomBusinessMonthBase, Base):
 
 
 class TestCustomBusinessMonthBegin(CustomBusinessMonthBase, Base):
-    _object = CBMonthBegin
+    _offset = CBMonthBegin
 
     def test_different_normalize_equals(self):
         # equivalent in this special case
@@ -2144,6 +2097,9 @@ class TestCustomBusinessMonthBegin(CustomBusinessMonthBase, Base):
 
 class TestWeek(Base):
     _offset = Week
+    d = Timestamp(datetime(2008, 1, 2))
+    offset1 = _offset()
+    offset2 = _offset(2)
 
     def test_repr(self):
         assert repr(Week(weekday=0)) == "<Week: weekday=0>"
@@ -2151,9 +2107,11 @@ class TestWeek(Base):
         assert repr(Week(n=-2, weekday=0)) == "<-2 * Weeks: weekday=0>"
 
     def test_corner(self):
-        pytest.raises(ValueError, Week, weekday=7)
-        tm.assert_raises_regex(
-            ValueError, "Day must be", Week, weekday=-1)
+        with pytest.raises(ValueError):
+            Week(weekday=7)
+
+        with pytest.raises(ValueError, match="Day must be"):
+            Week(weekday=-1)
 
     def test_isAnchored(self):
         assert Week(weekday=0).isAnchored()
@@ -2198,38 +2156,37 @@ class TestWeek(Base):
         for base, expected in compat.iteritems(cases):
             assert_offset_equal(offset, base, expected)
 
-    def test_onOffset(self):
-        for weekday in range(7):
-            offset = Week(weekday=weekday)
-
-            for day in range(1, 8):
-                date = datetime(2008, 1, day)
+    @pytest.mark.parametrize('weekday', range(7))
+    def test_onOffset(self, weekday):
+        offset = Week(weekday=weekday)
 
-                if day % 7 == weekday:
-                    expected = True
-                else:
-                    expected = False
-            assert_onOffset(offset, date, expected)
+        for day in range(1, 8):
+            date = datetime(2008, 1, day)
 
-    def test_offsets_compare_equal(self):
-        # root cause of #456
-        offset1 = Week()
-        offset2 = Week()
-        assert not offset1 != offset2
+            if day % 7 == weekday:
+                expected = True
+            else:
+                expected = False
+        assert_onOffset(offset, date, expected)
 
 
 class TestWeekOfMonth(Base):
     _offset = WeekOfMonth
+    offset1 = _offset()
+    offset2 = _offset(2)
 
     def test_constructor(self):
-        tm.assert_raises_regex(ValueError, "^Week", WeekOfMonth,
-                               n=1, week=4, weekday=0)
-        tm.assert_raises_regex(ValueError, "^Week", WeekOfMonth,
-                               n=1, week=-1, weekday=0)
-        tm.assert_raises_regex(ValueError, "^Day", WeekOfMonth,
-                               n=1, week=0, weekday=-1)
-        tm.assert_raises_regex(ValueError, "^Day", WeekOfMonth,
-                               n=1, week=0, weekday=7)
+        with pytest.raises(ValueError, match="^Week"):
+            WeekOfMonth(n=1, week=4, weekday=0)
+
+        with pytest.raises(ValueError, match="^Week"):
+            WeekOfMonth(n=1, week=-1, weekday=0)
+
+        with pytest.raises(ValueError, match="^Day"):
+            WeekOfMonth(n=1, week=0, weekday=-1)
+
+        with pytest.raises(ValueError, match="^Day"):
+            WeekOfMonth(n=1, week=0, weekday=-7)
 
     def test_repr(self):
         assert (repr(WeekOfMonth(weekday=1, week=2)) ==
@@ -2316,15 +2273,18 @@ class TestWeekOfMonth(Base):
 
 class TestLastWeekOfMonth(Base):
     _offset = LastWeekOfMonth
+    offset1 = _offset()
+    offset2 = _offset(2)
 
     def test_constructor(self):
-        tm.assert_raises_regex(ValueError, "^N cannot be 0",
-                               LastWeekOfMonth, n=0, weekday=1)
+        with pytest.raises(ValueError, match="^N cannot be 0"):
+            LastWeekOfMonth(n=0, weekday=1)
+
+        with pytest.raises(ValueError, match="^Day"):
+            LastWeekOfMonth(n=1, weekday=-1)
 
-        tm.assert_raises_regex(ValueError, "^Day", LastWeekOfMonth, n=1,
-                               weekday=-1)
-        tm.assert_raises_regex(
-            ValueError, "^Day", LastWeekOfMonth, n=1, weekday=7)
+        with pytest.raises(ValueError, match="^Day"):
+            LastWeekOfMonth(n=1, weekday=7)
 
     def test_offset(self):
         # Saturday
@@ -2390,6 +2350,8 @@ class TestLastWeekOfMonth(Base):
 
 class TestSemiMonthEnd(Base):
     _offset = SemiMonthEnd
+    offset1 = _offset()
+    offset2 = _offset(2)
 
     def test_offset_whole_year(self):
         dates = (datetime(2007, 12, 31),
@@ -2560,6 +2522,8 @@ class TestSemiMonthEnd(Base):
 
 class TestSemiMonthBegin(Base):
     _offset = SemiMonthBegin
+    offset1 = _offset()
+    offset2 = _offset(2)
 
     def test_offset_whole_year(self):
         dates = (datetime(2007, 12, 15),
@@ -2767,9 +2731,9 @@ class TestOffsetNames(object):
 
 
 def test_get_offset():
-    with tm.assert_raises_regex(ValueError, _INVALID_FREQ_ERROR):
+    with pytest.raises(ValueError, match=_INVALID_FREQ_ERROR):
         get_offset('gibberish')
-    with tm.assert_raises_regex(ValueError, _INVALID_FREQ_ERROR):
+    with pytest.raises(ValueError, match=_INVALID_FREQ_ERROR):
         get_offset('QS-JAN-B')
 
     pairs = [
@@ -2787,7 +2751,7 @@ def test_get_offset():
 def test_get_offset_legacy():
     pairs = [('w@Sat', Week(weekday=5))]
     for name, expected in pairs:
-        with tm.assert_raises_regex(ValueError, _INVALID_FREQ_ERROR):
+        with pytest.raises(ValueError, match=_INVALID_FREQ_ERROR):
             get_offset(name)
 
 
