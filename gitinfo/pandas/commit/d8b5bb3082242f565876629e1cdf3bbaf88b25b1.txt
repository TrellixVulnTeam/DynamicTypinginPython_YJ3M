commit d8b5bb3082242f565876629e1cdf3bbaf88b25b1
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Sun Jun 14 07:20:26 2020 -0700

    CLN: remove libfrequencies.get_freq_group (#34701)

diff --git a/pandas/_libs/tslibs/dtypes.pxd b/pandas/_libs/tslibs/dtypes.pxd
index bce071d45..f43bc283d 100644
--- a/pandas/_libs/tslibs/dtypes.pxd
+++ b/pandas/_libs/tslibs/dtypes.pxd
@@ -1,3 +1,4 @@
+cdef dict attrname_to_abbrevs
 
 cdef enum c_FreqGroup:
     # Mirrors FreqGroup in the .pxy file
diff --git a/pandas/_libs/tslibs/dtypes.pyx b/pandas/_libs/tslibs/dtypes.pyx
index e38cfe21a..075291031 100644
--- a/pandas/_libs/tslibs/dtypes.pyx
+++ b/pandas/_libs/tslibs/dtypes.pyx
@@ -21,6 +21,11 @@ cdef class PeriodDtypeBase:
             return False
         return self.dtype_code == other.dtype_code
 
+    @property
+    def freq_group(self) -> int:
+        # See also: libperiod.get_freq_group
+        return (self.dtype_code // 1000) * 1000
+
     @property
     def date_offset(self):
         """
@@ -108,6 +113,22 @@ _period_code_map.update({
 })
 
 
+# Map attribute-name resolutions to resolution abbreviations
+_attrname_to_abbrevs = {
+    "year": "A",
+    "quarter": "Q",
+    "month": "M",
+    "day": "D",
+    "hour": "H",
+    "minute": "T",
+    "second": "S",
+    "millisecond": "L",
+    "microsecond": "U",
+    "nanosecond": "N",
+}
+cdef dict attrname_to_abbrevs = _attrname_to_abbrevs
+
+
 class FreqGroup:
     # Mirrors c_FreqGroup in the .pxd file
     FR_ANN = 1000
@@ -123,3 +144,8 @@ class FreqGroup:
     FR_US = 11000
     FR_NS = 12000
     FR_UND = -10000  # undefined
+
+    @staticmethod
+    def get_freq_group(code: int) -> int:
+        # See also: PeriodDtypeBase.freq_group
+        return (code // 1000) * 1000
diff --git a/pandas/_libs/tslibs/frequencies.pxd b/pandas/_libs/tslibs/frequencies.pxd
index 896eec77e..b3ad6e6c1 100644
--- a/pandas/_libs/tslibs/frequencies.pxd
+++ b/pandas/_libs/tslibs/frequencies.pxd
@@ -1,3 +1 @@
-cdef dict attrname_to_abbrevs
-
 cpdef int get_to_timestamp_base(int base)
diff --git a/pandas/_libs/tslibs/frequencies.pyx b/pandas/_libs/tslibs/frequencies.pyx
index 6e525500e..fd28240ab 100644
--- a/pandas/_libs/tslibs/frequencies.pyx
+++ b/pandas/_libs/tslibs/frequencies.pyx
@@ -1,43 +1,8 @@
 
 from .dtypes import FreqGroup
 
-# ---------------------------------------------------------------------
-# Period codes
-
-
-# Map attribute-name resolutions to resolution abbreviations
-_attrname_to_abbrevs = {
-    "year": "A",
-    "quarter": "Q",
-    "month": "M",
-    "day": "D",
-    "hour": "H",
-    "minute": "T",
-    "second": "S",
-    "millisecond": "L",
-    "microsecond": "U",
-    "nanosecond": "N",
-}
-cdef dict attrname_to_abbrevs = _attrname_to_abbrevs
-
-
 # ----------------------------------------------------------------------
 
-# TODO: this is now identical to the version in libperiod
-def get_freq_group(freq: int) -> int:
-    """
-    Return frequency code group of given frequency str or offset.
-
-    Examples
-    --------
-    >>> get_freq_group(4001)
-    4000
-
-    >>> get_freq_group(4006)
-    4000
-    """
-    return (freq // 1000) * 1000
-
 
 cpdef int get_to_timestamp_base(int base):
     """
diff --git a/pandas/_libs/tslibs/period.pyx b/pandas/_libs/tslibs/period.pyx
index 47ebf139e..d14f9d82e 100644
--- a/pandas/_libs/tslibs/period.pyx
+++ b/pandas/_libs/tslibs/period.pyx
@@ -71,12 +71,10 @@ from pandas._libs.tslibs.dtypes cimport (
     FR_MS,
     FR_US,
     FR_NS,
-)
-
-from pandas._libs.tslibs.frequencies cimport (
     attrname_to_abbrevs,
-    get_to_timestamp_base,
 )
+
+from pandas._libs.tslibs.frequencies cimport get_to_timestamp_base
 from pandas._libs.tslibs.parsing cimport get_rule_month
 from pandas._libs.tslibs.parsing import parse_time_string
 from pandas._libs.tslibs.nattype cimport (
diff --git a/pandas/_libs/tslibs/resolution.pyx b/pandas/_libs/tslibs/resolution.pyx
index 7453933dd..55522e994 100644
--- a/pandas/_libs/tslibs/resolution.pyx
+++ b/pandas/_libs/tslibs/resolution.pyx
@@ -5,9 +5,9 @@ from numpy cimport ndarray, int64_t, int32_t
 
 from pandas._libs.tslibs.util cimport get_nat
 
+from pandas._libs.tslibs.dtypes cimport attrname_to_abbrevs
 from pandas._libs.tslibs.np_datetime cimport (
     npy_datetimestruct, dt64_to_dtstruct)
-from pandas._libs.tslibs.frequencies cimport attrname_to_abbrevs
 from pandas._libs.tslibs.frequencies import FreqGroup
 from pandas._libs.tslibs.timezones cimport (
     is_utc, is_tzlocal, maybe_get_tz, get_dst_info)
diff --git a/pandas/core/indexes/period.py b/pandas/core/indexes/period.py
index fc29f786a..2022a4a56 100644
--- a/pandas/core/indexes/period.py
+++ b/pandas/core/indexes/period.py
@@ -6,7 +6,6 @@ import numpy as np
 from pandas._libs import index as libindex
 from pandas._libs.lib import no_default
 from pandas._libs.tslibs import Period, Resolution
-from pandas._libs.tslibs.frequencies import get_freq_group
 from pandas._libs.tslibs.parsing import DateParseError, parse_time_string
 from pandas._typing import DtypeObj, Label
 from pandas.util._decorators import Appender, cache_readonly, doc
@@ -510,7 +509,7 @@ class PeriodIndex(DatetimeIndexOpsMixin, Int64Index):
 
             reso = Resolution.from_attrname(reso)
             grp = reso.freq_group
-            freqn = get_freq_group(self.dtype.dtype_code)
+            freqn = self.dtype.freq_group
 
             # _get_string_slice will handle cases where grp < freqn
             assert grp >= freqn
@@ -586,7 +585,7 @@ class PeriodIndex(DatetimeIndexOpsMixin, Int64Index):
     def _validate_partial_date_slice(self, reso: Resolution):
         assert isinstance(reso, Resolution), (type(reso), reso)
         grp = reso.freq_group
-        freqn = get_freq_group(self.dtype.dtype_code)
+        freqn = self.dtype.freq_group
 
         if not grp < freqn:
             # TODO: we used to also check for
diff --git a/pandas/plotting/_matplotlib/converter.py b/pandas/plotting/_matplotlib/converter.py
index 65f030223..05377e0c2 100644
--- a/pandas/plotting/_matplotlib/converter.py
+++ b/pandas/plotting/_matplotlib/converter.py
@@ -10,9 +10,9 @@ from matplotlib.transforms import nonsingular
 import matplotlib.units as units
 import numpy as np
 
-from pandas._libs import lib, tslibs
-from pandas._libs.tslibs import to_offset
-from pandas._libs.tslibs.frequencies import FreqGroup, get_freq_group
+from pandas._libs import lib
+from pandas._libs.tslibs import Timestamp, to_offset
+from pandas._libs.tslibs.dtypes import FreqGroup
 from pandas._libs.tslibs.offsets import BaseOffset
 
 from pandas.core.dtypes.common import (
@@ -45,7 +45,7 @@ _mpl_units = {}  # Cache for units overwritten by us
 
 def get_pairs():
     pairs = [
-        (tslibs.Timestamp, DatetimeConverter),
+        (Timestamp, DatetimeConverter),
         (Period, PeriodConverter),
         (pydt.datetime, DatetimeConverter),
         (pydt.date, DatetimeConverter),
@@ -281,7 +281,7 @@ class DatetimeConverter(dates.DateConverter):
         if isinstance(values, (datetime, pydt.date)):
             return _dt_to_float_ordinal(values)
         elif isinstance(values, np.datetime64):
-            return _dt_to_float_ordinal(tslibs.Timestamp(values))
+            return _dt_to_float_ordinal(Timestamp(values))
         elif isinstance(values, pydt.time):
             return dates.date2num(values)
         elif is_integer(values) or is_float(values):
@@ -553,7 +553,7 @@ def _daily_finder(vmin, vmax, freq: BaseOffset):
     elif dtype_code == FreqGroup.FR_DAY:
         periodsperyear = 365
         periodspermonth = 28
-    elif get_freq_group(dtype_code) == FreqGroup.FR_WK:
+    elif FreqGroup.get_freq_group(dtype_code) == FreqGroup.FR_WK:
         periodsperyear = 52
         periodspermonth = 3
     else:  # pragma: no cover
diff --git a/pandas/tests/tseries/frequencies/test_freq_code.py b/pandas/tests/tseries/frequencies/test_freq_code.py
index 189a0cc21..5383c1ff1 100644
--- a/pandas/tests/tseries/frequencies/test_freq_code.py
+++ b/pandas/tests/tseries/frequencies/test_freq_code.py
@@ -1,7 +1,8 @@
 import pytest
 
 from pandas._libs.tslibs import Resolution, to_offset
-from pandas._libs.tslibs.frequencies import _attrname_to_abbrevs, get_to_timestamp_base
+from pandas._libs.tslibs.dtypes import _attrname_to_abbrevs
+from pandas._libs.tslibs.frequencies import get_to_timestamp_base
 
 
 @pytest.mark.parametrize(
