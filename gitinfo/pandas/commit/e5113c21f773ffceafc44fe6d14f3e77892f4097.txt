commit e5113c21f773ffceafc44fe6d14f3e77892f4097
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Apr 21 23:12:54 2012 -0400

    ENH: add order method to Index, close #1028

diff --git a/pandas/core/index.py b/pandas/core/index.py
index 4650a2592..15bb06b52 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -375,6 +375,21 @@ class Index(np.ndarray):
 
         return label
 
+    def order(self, return_indexer=False, ascending=True):
+        """
+        Return sorted copy of Index
+        """
+        _as = self.argsort()
+        if not ascending:
+            _as = _as[::-1]
+
+        sorted_index = self.take(_as)
+
+        if return_indexer:
+            return sorted_index, _as
+        else:
+            return sorted_index
+
     def sort(self, *args, **kwargs):
         raise Exception('Cannot sort an Index object')
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 6dbf2c12f..6e3eb9b6d 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1591,12 +1591,9 @@ copy : boolean, default False
         -------
         sorted_obj : Series
         """
-        labels = self.index
-        sort_index = labels.argsort()
-        if not ascending:
-            sort_index = sort_index[::-1]
-        new_labels = labels.take(sort_index)
-        new_values = self.values.take(sort_index)
+        new_labels, indexer = self.index.order(return_indexer=True,
+                                               ascending=ascending)
+        new_values = self.values.take(indexer)
         return Series(new_values, new_labels, name=self.name)
 
     def argsort(self, axis=0, kind='quicksort', order=None):
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 5b058bcc2..930d5d081 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -443,6 +443,22 @@ class DatetimeIndex(Int64Index):
 
         return PeriodIndex(self.values, freq=freq)
 
+    def order(self, return_indexer=False, ascending=True):
+        """
+        Return sorted copy of Index
+        """
+        if return_indexer:
+            _as = self.argsort()
+            if not ascending:
+                _as = _as[::-1]
+            sorted_index = self.take(_as)
+            return sorted_index, _as
+        else:
+            sorted_values = np.sort(self.values)
+            return self._simple_new(sorted_values, self.name, None,
+                                    self.tz)
+
+
     def snap(self, freq='S'):
         """
         Snap time stamps to nearest occuring frequency
diff --git a/vb_suite/timeseries.py b/vb_suite/timeseries.py
index 299a3f6d5..4a034f4e0 100644
--- a/vb_suite/timeseries.py
+++ b/vb_suite/timeseries.py
@@ -41,3 +41,16 @@ right = Series(ts.values.take(rindex), index=ts.index.take(rindex))
 """
 
 timeseries_add_irregular = Benchmark('left + right', setup)
+
+#----------------------------------------------------------------------
+# Sort large irregular time series
+
+setup = common_setup + """
+N = 100000
+rng = date_range('1/1/2000', periods=N, freq='s')
+rng = rng.take(np.random.permutation(N))
+ts = Series(np.random.randn(N), index=rng)
+"""
+
+timeseries_sort_index = Benchmark('ts.sort_index()', setup,
+                                  start_date=datetime(2011, 11, 1))
