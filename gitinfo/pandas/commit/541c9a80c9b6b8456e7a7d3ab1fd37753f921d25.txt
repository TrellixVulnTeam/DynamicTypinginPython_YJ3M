commit 541c9a80c9b6b8456e7a7d3ab1fd37753f921d25
Author: Chang She <chang@lambdafoundry.com>
Date:   Sat Nov 24 15:14:52 2012 -0500

    DOC tweaks and better deprecation message for DataFrame #2304 #2337

diff --git a/RELEASE.rst b/RELEASE.rst
index 19aa9cd3a..260316b55 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -38,6 +38,7 @@ pandas 0.10.0
     `header` argument will be respected. If there is an existing header column,
     this can rename the columns. To fix legacy code, put ``header=None`` when
     passing ``names``
+  - DataFrame selection using a boolean frame now preserves input shape
 
 **Improvements to existing features**
 
diff --git a/doc/source/indexing.rst b/doc/source/indexing.rst
index 78bbd34b3..5473cefed 100644
--- a/doc/source/indexing.rst
+++ b/doc/source/indexing.rst
@@ -234,8 +234,9 @@ indexing expressions.
 Where and Masking
 ~~~~~~~~~~~~~~~~~
 
-Selecting values from a Series with a boolean vector in the *[]*, returns a subset of the rows.
-The method `where` allows selection that preserves the original data shape (and is a copy).
+Selecting values from a Series with a boolean vector generally returns a subset of the data.
+To guarantee that selection output has the same shape as the original data, you can use the
+``where`` method in ``Series`` and ``DataFrame``.
 
 .. ipython:: python
 
@@ -245,16 +246,16 @@ The method `where` allows selection that preserves the original data shape (and
    # return a Series of the same shape as the original
    s.where(s > 0)
 
-Selecting values from a DataFrame with a boolean critierion in the *[]*, that is the same shape as
-the original DataFrame, returns a similary sized DataFrame (and is a copy). `where` is used under the hood as the implementation.
+Selecting values from a DataFrame with a boolean critierion now also preserves input data shape.
+``where`` is used under the hood as the implementation.
 
 .. ipython:: python
 
    # return a DataFrame of the same shape as the original
-   # this is equiavalent to `df.where(df < 0)` 
+   # this is equiavalent to ``df.where(df < 0)``
    df[df < 0]
 
-In addition, `where` takes an optional `other` argument for replacement of values where the 
+In addition, ``where`` takes an optional ``other`` argument for replacement of values where the
 condition is False, in the returned copy.
 
 .. ipython:: python
@@ -274,8 +275,8 @@ This can be done intuitively like so:
    df2[df2 < 0] = 0
    df2
 
-Furthermore, `where` aligns the input boolean condition (ndarray or DataFrame), such that partial selection
-with setting is possible. This is analagous to partial setting via `.ix` (but on the contents rather than the axis labels)
+Furthermore, ``where`` aligns the input boolean condition (ndarray or DataFrame), such that partial selection
+with setting is possible. This is analagous to partial setting via ``.ix`` (but on the contents rather than the axis labels)
 
 .. ipython:: python
 
@@ -283,11 +284,23 @@ with setting is possible. This is analagous to partial setting via `.ix` (but on
    df2[ df2[1:4] > 0 ] = 3
    df2
 
-`mask` is the inverse boolean operation of `where`.
+By default, ``where`` returns a modified copy of the data. There is an optional parameter ``inplace``
+so that the original data can be modified without creating a copy:
+
+.. ipython:: python
+
+   df_orig = df.copy()
+
+   df_orig.where(df > 0, -df, inplace=True);
+
+   df_orig
+
+``mask`` is the inverse boolean operation of ``where``.
 
 .. ipython:: python
 
    s.mask(s >= 0)
+
    df.mask(df >= 0)
 
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 839141a30..07460f217 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -3453,9 +3453,10 @@ class DataFrame(NDFrame):
         # teeny hack because one does DataFrame + TimeSeries all the time
         if self.index.is_all_dates and other.index.is_all_dates:
             import warnings
-            warnings.warn(("TimeSeries broadcasting across DataFrame index "
+            warnings.warn(("TimeSeries broadcasting along DataFrame index "
                            "by default is deprecated. Please use "
-                           "DataFrame.sub"),
+                           "DataFrame.<op> to explicitly broadcast arithmetic "
+                           "operations along the index"),
                            FutureWarning)
             return self._combine_match_index(other, func, fill_value)
         else:
