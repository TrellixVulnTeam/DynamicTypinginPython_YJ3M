commit 8ea102acdb45bb70cb30ea77108a50054c28c24d
Author: Joris Van den Bossche <jorisvandenbossche@gmail.com>
Date:   Thu Jun 27 12:19:01 2019 -0500

    Fix-up black formatting: fix noqa comments + type annotations

diff --git a/pandas/api/extensions/__init__.py b/pandas/api/extensions/__init__.py
index 431dd2b19..573d700da 100644
--- a/pandas/api/extensions/__init__.py
+++ b/pandas/api/extensions/__init__.py
@@ -5,10 +5,9 @@ from pandas.core.dtypes.dtypes import (  # noqa: F401
 )
 
 from pandas.core.accessor import (  # noqa: F401
+    register_dataframe_accessor,
     register_index_accessor,
     register_series_accessor,
 )
 from pandas.core.algorithms import take  # noqa: F401
 from pandas.core.arrays import ExtensionArray, ExtensionScalarOpsMixin  # noqa: F401
-
-from pandas.core.accessor import register_dataframe_accessor  # noqa: F401; noqa: F401
diff --git a/pandas/compat/numpy/function.py b/pandas/compat/numpy/function.py
index 840dec248..89f7d71e2 100644
--- a/pandas/compat/numpy/function.py
+++ b/pandas/compat/numpy/function.py
@@ -108,8 +108,7 @@ def validate_argmax_with_skipna(skipna, args, kwargs):
     return skipna
 
 
-ARGSORT_DEFAULTS = OrderedDict()
-# type: OrderedDict[str, Optional[Union[int, str]]]
+ARGSORT_DEFAULTS = OrderedDict()  # type: OrderedDict[str, Optional[Union[int, str]]]
 ARGSORT_DEFAULTS["axis"] = -1
 ARGSORT_DEFAULTS["kind"] = "quicksort"
 ARGSORT_DEFAULTS["order"] = None
@@ -125,8 +124,7 @@ validate_argsort = CompatValidator(
 
 # two different signatures of argsort, this second validation
 # for when the `kind` param is supported
-ARGSORT_DEFAULTS_KIND = OrderedDict()
-# type: OrderedDict[str, Optional[int]]
+ARGSORT_DEFAULTS_KIND = OrderedDict()  # type: OrderedDict[str, Optional[int]]
 ARGSORT_DEFAULTS_KIND["axis"] = -1
 ARGSORT_DEFAULTS_KIND["order"] = None
 validate_argsort_kind = CompatValidator(
@@ -243,8 +241,7 @@ validate_round = CompatValidator(
     ROUND_DEFAULTS, fname="round", method="both", max_fname_arg_count=1
 )
 
-SORT_DEFAULTS = OrderedDict()
-# type: OrderedDict[str, Optional[Union[int, str]]]
+SORT_DEFAULTS = OrderedDict()  # type: OrderedDict[str, Optional[Union[int, str]]]
 SORT_DEFAULTS["axis"] = -1
 SORT_DEFAULTS["kind"] = "quicksort"
 SORT_DEFAULTS["order"] = None
@@ -278,8 +275,7 @@ validate_median = CompatValidator(
     MEDIAN_DEFAULTS, fname="median", method="both", max_fname_arg_count=1
 )
 
-STAT_DDOF_FUNC_DEFAULTS = OrderedDict()
-# type: OrderedDict[str, Optional[bool]]
+STAT_DDOF_FUNC_DEFAULTS = OrderedDict()  # type: OrderedDict[str, Optional[bool]]
 STAT_DDOF_FUNC_DEFAULTS["dtype"] = None
 STAT_DDOF_FUNC_DEFAULTS["out"] = None
 STAT_DDOF_FUNC_DEFAULTS["keepdims"] = False
diff --git a/pandas/core/indexes/datetimelike.py b/pandas/core/indexes/datetimelike.py
index f2e6f631a..731ab9c41 100644
--- a/pandas/core/indexes/datetimelike.py
+++ b/pandas/core/indexes/datetimelike.py
@@ -73,14 +73,14 @@ class DatetimeIndexOpsMixin(ExtensionOpsMixin):
     # properties there.  They can be made into cache_readonly for Index
     # subclasses bc they are immutable
     inferred_freq = cache_readonly(
-        DatetimeLikeArrayMixin.inferred_freq.fget
-    )  # type: ignore
+        DatetimeLikeArrayMixin.inferred_freq.fget  # type: ignore
+    )
     _isnan = cache_readonly(DatetimeLikeArrayMixin._isnan.fget)  # type: ignore
     hasnans = cache_readonly(DatetimeLikeArrayMixin._hasnans.fget)  # type: ignore
     _hasnans = hasnans  # for index / array -agnostic code
     _resolution = cache_readonly(
-        DatetimeLikeArrayMixin._resolution.fget
-    )  # type: ignore
+        DatetimeLikeArrayMixin._resolution.fget  # type: ignore
+    )
     resolution = cache_readonly(DatetimeLikeArrayMixin.resolution.fget)  # type: ignore
 
     _maybe_mask_results = ea_passthrough(DatetimeLikeArrayMixin._maybe_mask_results)
diff --git a/pandas/tests/arrays/categorical/test_constructors.py b/pandas/tests/arrays/categorical/test_constructors.py
index 4bf31a52d..704f9c944 100644
--- a/pandas/tests/arrays/categorical/test_constructors.py
+++ b/pandas/tests/arrays/categorical/test_constructors.py
@@ -224,8 +224,8 @@ class TestCategoricalConstructors:
 
         # this is a legitimate constructor
         with tm.assert_produces_warning(None):
-            c = Categorical(
-                np.array([], dtype="int64"), categories=[3, 2, 1], ordered=True  # noqa
+            c = Categorical(  # noqa
+                np.array([], dtype="int64"), categories=[3, 2, 1], ordered=True
             )
 
     def test_constructor_with_existing_categories(self):
diff --git a/pandas/tests/arrays/sparse/test_array.py b/pandas/tests/arrays/sparse/test_array.py
index c76b4d960..b94e2a16d 100644
--- a/pandas/tests/arrays/sparse/test_array.py
+++ b/pandas/tests/arrays/sparse/test_array.py
@@ -689,13 +689,13 @@ class TestSparseArray:
         dense = np.array([np.nan, 0, 3, 4, 0, 5, np.nan, np.nan, 0])
 
         sparse = SparseArray(dense)
-        res = sparse[4:,]
-        exp = SparseArray(dense[4:,])
+        res = sparse[4:,]  # noqa: E231
+        exp = SparseArray(dense[4:,])  # noqa: E231
         tm.assert_sp_array_equal(res, exp)
 
         sparse = SparseArray(dense, fill_value=0)
-        res = sparse[4:,]
-        exp = SparseArray(dense[4:,], fill_value=0)
+        res = sparse[4:,]  # noqa: E231
+        exp = SparseArray(dense[4:,], fill_value=0)  # noqa: E231
         tm.assert_sp_array_equal(res, exp)
 
         with pytest.raises(IndexError):
diff --git a/pandas/tests/frame/test_alter_axes.py b/pandas/tests/frame/test_alter_axes.py
index 229713a5a..2ce65bd15 100644
--- a/pandas/tests/frame/test_alter_axes.py
+++ b/pandas/tests/frame/test_alter_axes.py
@@ -238,9 +238,8 @@ class TestDataFrameAlterAxes:
         # cannot drop the same column twice;
         # use "is" because == would give ambiguous Boolean error for containers
         first_drop = (
-            False if (keys[0] is "A" and keys[1] is "A") else drop
-        )  # noqa: F632
-
+            False if (keys[0] is "A" and keys[1] is "A") else drop  # noqa: F632
+        )
         # to test against already-tested behaviour, we add sequentially,
         # hence second append always True; must wrap keys in list, otherwise
         # box = list would be interpreted as keys
diff --git a/pandas/tests/frame/test_analytics.py b/pandas/tests/frame/test_analytics.py
index 8c1534aa5..13ffa8d17 100644
--- a/pandas/tests/frame/test_analytics.py
+++ b/pandas/tests/frame/test_analytics.py
@@ -2135,8 +2135,8 @@ class TestDataFrameAnalytics:
         nan_round_Series = Series({"col1": np.nan, "col2": 1})
 
         # TODO(wesm): unused?
-        expected_nan_round = DataFrame(
-            {"col1": [1.123, 2.123, 3.123], "col2": [1.2, 2.2, 3.2]}  # noqa
+        expected_nan_round = DataFrame(  # noqa
+            {"col1": [1.123, 2.123, 3.123], "col2": [1.2, 2.2, 3.2]}
         )
 
         with pytest.raises(TypeError):
diff --git a/pandas/tests/frame/test_query_eval.py b/pandas/tests/frame/test_query_eval.py
index 70c58471d..0781e20a7 100644
--- a/pandas/tests/frame/test_query_eval.py
+++ b/pandas/tests/frame/test_query_eval.py
@@ -102,8 +102,8 @@ class TestDataFrameEval(TestData):
                 ("/", "__truediv__", "__rtruediv__"),
             ]:
 
-                base = DataFrame(
-                    np.tile(m.values, n).reshape(n, -1), columns=list("abcd")  # noqa
+                base = DataFrame(  # noqa
+                    np.tile(m.values, n).reshape(n, -1), columns=list("abcd")
                 )
 
                 expected = eval("base{op}df".format(op=op_str))
diff --git a/pandas/tests/indexing/test_callable.py b/pandas/tests/indexing/test_callable.py
index 78aaf80b5..aa73bd728 100644
--- a/pandas/tests/indexing/test_callable.py
+++ b/pandas/tests/indexing/test_callable.py
@@ -17,11 +17,11 @@ class TestIndexingCallable:
         res = df.loc[lambda x: x.A > 2]
         tm.assert_frame_equal(res, df.loc[df.A > 2])
 
-        res = df.loc[lambda x: x.A > 2,]
-        tm.assert_frame_equal(res, df.loc[df.A > 2,])
+        res = df.loc[lambda x: x.A > 2,]  # noqa: E231
+        tm.assert_frame_equal(res, df.loc[df.A > 2,])  # noqa: E231
 
-        res = df.loc[lambda x: x.A > 2,]
-        tm.assert_frame_equal(res, df.loc[df.A > 2,])
+        res = df.loc[lambda x: x.A > 2,]  # noqa: E231
+        tm.assert_frame_equal(res, df.loc[df.A > 2,])  # noqa: E231
 
         res = df.loc[lambda x: x.B == "b", :]
         tm.assert_frame_equal(res, df.loc[df.B == "b", :])
@@ -90,8 +90,8 @@ class TestIndexingCallable:
         res = df.loc[lambda x: ["A", "C"]]
         tm.assert_frame_equal(res, df.loc[["A", "C"]])
 
-        res = df.loc[lambda x: ["A", "C"],]
-        tm.assert_frame_equal(res, df.loc[["A", "C"],])
+        res = df.loc[lambda x: ["A", "C"],]  # noqa: E231
+        tm.assert_frame_equal(res, df.loc[["A", "C"],])  # noqa: E231
 
         res = df.loc[lambda x: ["A", "C"], :]
         tm.assert_frame_equal(res, df.loc[["A", "C"], :])
diff --git a/pandas/tests/test_strings.py b/pandas/tests/test_strings.py
index d70614fcd..6833757c6 100644
--- a/pandas/tests/test_strings.py
+++ b/pandas/tests/test_strings.py
@@ -1839,13 +1839,13 @@ class TestStringMethods:
         digit_e = [False, False, False, True, False, False, False, True, False, False]
 
         # TODO: unused
-        num_e = [
+        num_e = [  # noqa
             False,
             False,
             False,
             True,
             False,
-            False,  # noqa
+            False,
             False,
             True,
             False,
