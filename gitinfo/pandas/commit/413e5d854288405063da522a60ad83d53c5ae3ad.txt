commit 413e5d854288405063da522a60ad83d53c5ae3ad
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat May 12 17:40:46 2012 -0400

    BUG: support resampling of period data to, e.g. 5minute thoguh with timestamped result, close #1231

diff --git a/pandas/tseries/resample.py b/pandas/tseries/resample.py
index 2497bf752..081375f82 100644
--- a/pandas/tseries/resample.py
+++ b/pandas/tseries/resample.py
@@ -57,6 +57,13 @@ class TimeGrouper(CustomGrouper):
         if isinstance(axis, DatetimeIndex):
             return self._resample_timestamps(obj)
         elif isinstance(axis, PeriodIndex):
+            offset = to_offset(self.freq)
+            if offset.n > 1:
+                if self.kind == 'period':  # pragma: no cover
+                    print 'Warning: multiple of frequency -> timestamps'
+                # Cannot have multiple of periods, convert to timestamp
+                self.kind = 'timestamp'
+
             if self.kind is None or self.kind == 'period':
                 return self._resample_periods(obj)
             else:
@@ -248,7 +255,6 @@ def _get_range_edges(axis, begin, end, offset, closed='left'):
             return _adjust_dates_anchored(axis[0], axis[-1], offset,
                                           closed=closed)
 
-
     if begin is None:
         if closed == 'left':
             first = Timestamp(offset.rollback(axis[0]))
@@ -259,7 +265,6 @@ def _get_range_edges(axis, begin, end, offset, closed='left'):
 
     if end is None:
         last = Timestamp(axis[-1] + offset)
-        # last = Timestamp(offset.rollforward(axis[-1]))
     else:
         last = Timestamp(offset.rollforward(end))
 
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index d508a73f9..5b3613e57 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -527,6 +527,15 @@ class TestResamplePeriodIndex(unittest.TestCase):
         s = TimeSeries(np.random.randn(5), index=rng)
         self.assertRaises(Exception, s.resample, 'A')
 
+    def test_resample_5minute(self):
+        rng = period_range('1/1/2000', '1/5/2000', freq='T')
+        ts = TimeSeries(np.random.randn(len(rng)), index=rng)
+
+        result = ts.resample('5min')
+        expected = ts.to_timestamp().resample('5min')
+        assert_series_equal(result, expected)
+
+
 class TestTimeGrouper(unittest.TestCase):
 
     def setUp(self):
