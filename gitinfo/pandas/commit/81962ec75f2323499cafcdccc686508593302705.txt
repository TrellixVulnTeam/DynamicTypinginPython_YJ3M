commit 81962ec75f2323499cafcdccc686508593302705
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jun 23 01:50:06 2011 -0400

    starting flexible arith methods on Series

diff --git a/pandas/__init__.py b/pandas/__init__.py
index 5b38851f4..0063917c1 100644
--- a/pandas/__init__.py
+++ b/pandas/__init__.py
@@ -16,11 +16,12 @@ from pandas.stats.api import *
 from pandas.util.testing import debug
 
 from numpy.testing import Tester
-class NoseWrapper(Tester):
+
+class NoseWrapper(Tester): # pragma: no cover
     '''
-    This is simply a monkey patch for numpy.testing.Tester, so that extra_argv can
-    be changed from its default None to ['--exe'] so that the tests can be run
-    the same across platforms.
+    This is simply a monkey patch for numpy.testing.Tester, so that extra_argv
+    can be changed from its default None to ['--exe'] so that the tests can be
+    run the same across platforms.
     '''
     def test(self, label='fast', verbose=1, extra_argv=['--exe'], doctests=False,
              coverage=False):
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 159508264..8923a91cb 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1671,16 +1671,17 @@ class DataFrame(PandasGeneric):
 
         Columns not in this frame are added as new columns.
         """
-        # TODO: with blocks
         if not other:
             return self.copy()
         if not self:
             return other.copy()
 
         new_index = np.concatenate((self.index, other.index))
-        new_columns = self.columns
         new_data = {}
 
+        new_columns = self.columns
+
+        this = self
         if not new_columns.equals(other.columns):
             new_columns = self.columns + other.columns
 
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 6f7e5cc13..3dd65f904 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -57,15 +57,6 @@ class GroupBy(object):
         self.groups = tseries.groupby(axis, self.grouper,
                                       output=GroupDict())
 
-    # @property
-    # def groups(self):
-    #     if self._groups is None:
-    #         axis = self._group_axis
-    #         self._groups = tseries.groupby(axis, self.grouper,
-    #                                        output=GroupDict())
-
-    #     return self._groups
-
     @property
     def group_indices(self):
         if self._group_indices is None:
diff --git a/pandas/core/series.py b/pandas/core/series.py
index cdefc7208..1303b94bc 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -66,8 +66,8 @@ def _arith_method(op, name):
                                           self.index.indexMap,
                                           other.index.indexMap)
             except Exception:
-                arr = Series.combineFunc(self, other,
-                                         getattr(type(self[0]), name))
+                arr = Series._combineFunc(self, other,
+                                          getattr(type(self[0]), name))
             result = Series(arr, index=newIndex)
             return result
 
@@ -82,6 +82,23 @@ def _arith_method(op, name):
             return Series(op(values, other), index=self.index)
     return wrapper
 
+def _flex_method(op, name):
+    def f(self, other, fill_value=None):
+        return self._combine(other, op, fill_value=fill_value)
+
+    f.__doc__ = """
+    Binary operator %s
+
+    Parameters
+    ----------
+    other: Series or scalar value
+    fill_value : None or float value, default None
+        Fill missing (NaN) values with this value. If both Series are
+        missing, the result will be missing
+    """ % name
+    f.__name__ = name
+    return f
+
 #-------------------------------------------------------------------------------
 # Series class
 
@@ -717,7 +734,53 @@ class Series(np.ndarray, PandasGeneric):
         new_values = np.concatenate((self, other))
         return Series(new_values, index=newIndex)
 
-    def combineFunc(self, other, func):
+    def _combine(self, other, func, fill_value=None):
+        """
+        Parameters
+        ----------
+        other : Series
+
+        Returns
+        -------
+        combined : Series
+        """
+        # TODO: docstring
+
+        assert(isinstance(other, Series))
+
+        new_index = self.index
+        this = self
+
+        if not self.index.equals(other.index):
+            new_index = self.index + other.index
+            this = self.reindex(new_index)
+            other = other.reindex(new_index)
+
+        do_fill = fill_value is not None
+
+        this_vals = this.values
+        other_vals = other.values
+
+        if do_fill:
+            this_mask = isnull(this_vals)
+            other_mask = isnull(other_vals)
+            this_vals = this_vals.copy()
+            other_vals = other_vals.copy()
+
+            # one but not both
+            mask = this_mask ^ other_mask
+            this_vals[this_mask & mask] = fill_value
+            other_vals[other_mask & mask] = fill_value
+
+        result = func(this_vals, other_vals)
+        return Series(result, index=new_index)
+
+    add = _flex_method(operator.add, 'add')
+    sub = _flex_method(operator.sub, 'subtract')
+    mul = _flex_method(operator.mul, 'multiply')
+    div = _flex_method(operator.div, 'divide')
+
+    def _combineFunc(self, other, func):
         """
         Combines this Series using the given function with either
           * another Series index by index
diff --git a/pandas/core/tests/test_series.py b/pandas/core/tests/test_series.py
index 1b5ac4c83..df10aabb0 100644
--- a/pandas/core/tests/test_series.py
+++ b/pandas/core/tests/test_series.py
@@ -5,6 +5,7 @@ import os
 import operator
 import unittest
 
+from numpy import nan
 import numpy as np
 
 from pandas import Index, Series, TimeSeries, DataFrame, isnull
@@ -394,7 +395,7 @@ class TestSeries(unittest.TestCase):
 
         def _check_op(other, op):
             cython_or_numpy = op(series, other)
-            python = series.combineFunc(other, op)
+            python = series._combineFunc(other, op)
 
             common.assert_almost_equal(cython_or_numpy, python)
 
@@ -459,6 +460,18 @@ class TestSeries(unittest.TestCase):
         common.assert_almost_equal(self.ts + self.ts, (self.ts + df)['A'])
         self.assertRaises(Exception, self.ts.__pow__, df)
 
+    def test_operators_combine(self):
+        a = Series([nan, 1., 2., 3., nan], index=np.arange(5))
+        b = Series([nan, 1, nan, 3, nan, 4.], index=np.arange(6))
+
+        result = a.add(b)
+        expected = Series([nan, 2., nan, 6, nan, nan], index=np.arange(6))
+        assert_series_equal(result, expected)
+
+        result = a.add(b, fill_value=0)
+        expected = Series([nan, 2., 2, 6, nan, 4], index=np.arange(6))
+        assert_series_equal(result, expected)
+
     def test_combineFirst(self):
         series = Series(common.makeIntIndex(20).astype(float),
                         index=common.makeIntIndex(20))
diff --git a/test.sh b/test.sh
index 5b162f97d..b92e3fd54 100755
--- a/test.sh
+++ b/test.sh
@@ -1,7 +1,7 @@
 #!/bin/sh
 coverage erase
-# nosetests -w pandas --with-coverage --cover-package=pandas --pdb-failure --pdb
+nosetests -w pandas --with-coverage --cover-package=pandas --pdb-failure --pdb
 # nosetests -w pandas/io --with-coverage --cover-package=pandas.io --pdb-failure --pdb
-nosetests -w pandas/core --with-coverage --cover-package=pandas.core --pdb-failure --pdb
+# nosetests -w pandas/core --with-coverage --cover-package=pandas.core --pdb-failure --pdb
 # nosetests -w pandas/stats --with-coverage --cover-package=pandas.stats
 # coverage run runtests.py
\ No newline at end of file
