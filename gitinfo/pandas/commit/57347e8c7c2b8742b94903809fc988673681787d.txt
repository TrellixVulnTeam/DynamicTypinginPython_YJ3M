commit 57347e8c7c2b8742b94903809fc988673681787d
Author: gfyoung <gfyoung17+GitHub@gmail.com>
Date:   Fri Nov 16 06:09:30 2018 -0800

    ERR: Fail-fast with incompatible skipfooter combos (#23711)
    
    * ERR: Fail-fast with incompatible skipfooter combos
    
    * Don't create the iterator and error immediately
    if the skipfooter parameter is passed in.
    * Raise the correct error message when nrows is
    passed in with skipfooter.
    
    * Fix doc lint errors

diff --git a/doc/source/whatsnew/v0.24.0.rst b/doc/source/whatsnew/v0.24.0.rst
index 4ca659756..b6451ed4f 100644
--- a/doc/source/whatsnew/v0.24.0.rst
+++ b/doc/source/whatsnew/v0.24.0.rst
@@ -1369,6 +1369,7 @@ Notice how we now instead output ``np.nan`` itself instead of a stringified form
 - Bug in :func:`DataFrame.to_string()` that caused representations of :class:`DataFrame` to not take up the whole window (:issue:`22984`)
 - Bug in :func:`DataFrame.to_csv` where a single level MultiIndex incorrectly wrote a tuple. Now just the value of the index is written (:issue:`19589`).
 - Bug in :meth:`HDFStore.append` when appending a :class:`DataFrame` with an empty string column and ``min_itemsize`` < 8 (:issue:`12242`)
+- Bug in :func:`read_csv()` in which incorrect error messages were being raised when ``skipfooter`` was passed in along with ``nrows``, ``iterator``, or ``chunksize`` (:issue:`23711`)
 - Bug in :meth:`read_csv()` in which :class:`MultiIndex` index names were being improperly handled in the cases when they were not provided (:issue:`23484`)
 - Bug in :meth:`read_html()` in which the error message was not displaying the valid flavors when an invalid one was provided (:issue:`23549`)
 - Bug in :meth:`read_excel()` in which ``index_col=None`` was not being respected and parsing index columns anyway (:issue:`20480`)
diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index 7bf570fe4..f76e0d874 100755
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -787,6 +787,12 @@ class TextFileReader(BaseIterator):
                                   stacklevel=2)
                 kwds[param] = dialect_val
 
+        if kwds.get("skipfooter"):
+            if kwds.get("iterator") or kwds.get("chunksize"):
+                raise ValueError("'skipfooter' not supported for 'iteration'")
+            if kwds.get("nrows"):
+                raise ValueError("'skipfooter' not supported with 'nrows'")
+
         if kwds.get('header', 'infer') == 'infer':
             kwds['header'] = 0 if kwds.get('names') is None else None
 
@@ -1054,11 +1060,6 @@ class TextFileReader(BaseIterator):
 
     def read(self, nrows=None):
         nrows = _validate_integer('nrows', nrows)
-
-        if nrows is not None:
-            if self.options.get('skipfooter'):
-                raise ValueError('skipfooter not supported for iteration')
-
         ret = self._engine.read(nrows)
 
         # May alter columns / col_dict
diff --git a/pandas/tests/io/parser/common.py b/pandas/tests/io/parser/common.py
index 67a3bd6f9..6ce08f10e 100644
--- a/pandas/tests/io/parser/common.py
+++ b/pandas/tests/io/parser/common.py
@@ -537,12 +537,21 @@ baz,7,8,9
         assert len(result) == 3
         tm.assert_frame_equal(pd.concat(result), expected)
 
-        # skipfooter is not supported with the C parser yet
-        if self.engine == 'python':
-            # test bad parameter (skipfooter)
-            reader = self.read_csv(StringIO(self.data1), index_col=0,
-                                   iterator=True, skipfooter=1)
-            pytest.raises(ValueError, reader.read, 3)
+    @pytest.mark.parametrize("kwargs", [
+        dict(iterator=True,
+             chunksize=1),
+        dict(iterator=True),
+        dict(chunksize=1)
+    ])
+    def test_iterator_skipfooter_errors(self, kwargs):
+        msg = "'skipfooter' not supported for 'iteration'"
+        with pytest.raises(ValueError, match=msg):
+            self.read_csv(StringIO(self.data1), skipfooter=1, **kwargs)
+
+    def test_nrows_skipfooter_errors(self):
+        msg = "'skipfooter' not supported with 'nrows'"
+        with pytest.raises(ValueError, match=msg):
+            self.read_csv(StringIO(self.data1), skipfooter=1, nrows=5)
 
     def test_pass_names_with_index(self):
         lines = self.data1.split('\n')
