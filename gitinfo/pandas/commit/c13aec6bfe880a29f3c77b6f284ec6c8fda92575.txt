commit c13aec6bfe880a29f3c77b6f284ec6c8fda92575
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Jan 3 00:21:33 2012 -0500

    ENH: merge benchmarks, use khash to factorize

diff --git a/bench/bench_merge.R b/bench/bench_merge.R
index c02f989ba..a9d4ed39d 100644
--- a/bench/bench_merge.R
+++ b/bench/bench_merge.R
@@ -9,3 +9,60 @@ left <- data.frame(key=rep(indices, 10),
 right <- data.frame(key=indices,
                     key2=sample(indices),
                     value2=rnorm(10000))
+
+timeit <- function(func, niter=10) {
+  timing = rep(NA, niter)
+  for (i in 1:niter) {
+    gc()
+    timing[i] <- system.time(func())[3]
+  }
+  mean(timing)
+}
+
+left.join <- function(sort=TRUE) {
+  result <- merge(left, right, all.x=TRUE, sort=sort)
+}
+
+right.join <- function(sort=TRUE) {
+  result <- merge(left, right, all.y=TRUE, sort=sort)
+}
+
+outer.join <- function(sort=TRUE) {
+  result <- merge(left, right, all=TRUE, sort=sort)
+}
+
+inner.join <- function(sort=TRUE) {
+  reuslt <- merge(left, right, sort=sort)
+}
+
+sort.options <- c(FALSE, TRUE)
+
+results <- matrix(nrow=4, ncol=2)
+colnames(results) <- c("dont_sort", "sort")
+rownames(results) <- c("inner", "outer", "left", "right")
+
+join.functions <- c(inner.join, outer.join, left.join, right.join)
+for (i in 1:4) {
+  results[1, 1] <- timeit(function() {inner.join(sort=sort.options[1])})
+  results[1, 2] <- timeit(function() {inner.join(sort=sort.options[2])})
+  results[2, 1] <- timeit(function() {outer.join(sort=sort.options[1])})
+  results[2, 2] <- timeit(function() {outer.join(sort=sort.options[2])})
+  results[3, 1] <- timeit(function() {left.join(sort=sort.options[1])})
+  results[3, 2] <- timeit(function() {left.join(sort=sort.options[2])})
+  results[4, 1] <- timeit(function() {right.join(sort=sort.options[1])})
+  results[4, 2] <- timeit(function() {right.join(sort=sort.options[2])})
+}
+
+## do.something <- function(df, f) {
+##   f(df)
+## }
+## df <- matrix(nrow=4, ncol=2)
+## functions <- c(colSums, rowSums)
+## g <- functions[1]
+## do.something(df, function(df) g(df))
+
+##       dont_sort   sort
+## inner    0.2297 0.2286
+## outer    1.1811 1.2843
+## left     0.6706 0.7766
+## right    0.2995 0.3371
diff --git a/bench/bench_merge.py b/bench/bench_merge.py
index b0fc5bf0f..01d445e35 100644
--- a/bench/bench_merge.py
+++ b/bench/bench_merge.py
@@ -17,21 +17,19 @@ def get_test_data(ngroups=100, n=N):
     return arr
 
 # aggregate multiple columns
-df = DataFrame({'key1' : get_test_data(ngroups=ngroups),
-                'key2' : get_test_data(ngroups=ngroups),
-                'data1' : np.random.randn(N),
-                'data2' : np.random.randn(N)})
+# df = DataFrame({'key1' : get_test_data(ngroups=ngroups),
+#                 'key2' : get_test_data(ngroups=ngroups),
+#                 'data1' : np.random.randn(N),
+#                 'data2' : np.random.randn(N)})
 
-df2 = DataFrame({'key1'  : get_test_data(ngroups=ngroups, n=N//10),
-                 'key2'  : get_test_data(ngroups=ngroups//2, n=N//10),
-                 'value' : np.random.randn(N // 10)})
-
-
-import pandas.tools.merge as merge
-reload(merge)
-
-result = merge.merge(df, df2, on='key2')
+# df2 = DataFrame({'key1'  : get_test_data(ngroups=ngroups, n=N//10),
+#                  'key2'  : get_test_data(ngroups=ngroups//2, n=N//10),
+#                  'value' : np.random.randn(N // 10)})
+# result = merge.merge(df, df2, on='key2')
 
+from collections import defaultdict
+import gc
+import time
 from pandas.util.testing import rands
 N = 10000
 indices = np.array([rands(10) for _ in xrange(N)], dtype='O')
@@ -41,9 +39,41 @@ key2 = key.copy()
 random.shuffle(key2)
 indices2 = indices.copy()
 random.shuffle(indices2)
-
-
 left = DataFrame({'key' : key, 'key2':key2,
                   'value' : np.random.randn(100000)})
 right = DataFrame({'key': indices, 'key2':indices2,
                    'value2' : np.random.randn(10000)})
+join_methods = ['inner', 'outer', 'left', 'right']
+results = DataFrame(index=join_methods, columns=[False, True])
+niter = 10
+for sort in [False, True]:
+    for join_method in join_methods:
+        f = lambda: merge(left, right, how=join_method, sort=sort)
+        gc.disable()
+        start = time.time()
+        for _ in xrange(niter):
+            f()
+        elapsed = (time.time() - start) / niter
+        gc.enable()
+        results[sort][join_method] = elapsed
+results.columns = ['dont_sort', 'sort']
+
+
+# R results
+from StringIO import StringIO
+r_results = read_table(StringIO("""dont_sort   sort
+inner    0.2297 0.2286
+outer    1.1811 1.2843
+left     0.6706 0.7766
+right    0.2995 0.3371
+"""), sep='\s+')
+
+sort_results = DataFrame.from_items([('pandas', results['sort']),
+                                     ('R', r_results['sort'])])
+sort_results['Ratio'] = sort_results['R'] / sort_results['pandas']
+
+
+nosort_results = DataFrame.from_items([('pandas', results['dont_sort']),
+                                       ('R', r_results['dont_sort'])])
+nosort_results['Ratio'] = sort_results['R'] / sort_results['pandas']
+
diff --git a/pandas/tools/merge.py b/pandas/tools/merge.py
index ea31782da..3b9e1b9fd 100644
--- a/pandas/tools/merge.py
+++ b/pandas/tools/merge.py
@@ -298,10 +298,9 @@ def _get_multiindex_indexer(join_keys, index, sort=True):
     shape = []
     labels = []
     for level, key in zip(index.levels, join_keys):
-        rizer = lib.DictFactorizer(level.indexMap.copy(), list(level))
-        lab, _ = rizer.factorize(key)
-        labels.append(lab)
-        shape.append(len(rizer.uniques))
+        llab, rlab, count = _factorize_objects(level, key, sort=False)
+        labels.append(rlab)
+        shape.append(count)
 
     left_group_key = get_group_index(labels, shape) #.astype('i4')
     right_group_key = get_group_index(index.labels, shape) #.astype('i4')
