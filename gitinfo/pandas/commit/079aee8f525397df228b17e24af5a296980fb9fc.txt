commit 079aee8f525397df228b17e24af5a296980fb9fc
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Apr 1 23:35:16 2012 -0400

    BUG: eradicate use of NULL_INDEX 'singleton', failing unit test for #980

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 46fd75c12..64d84dfb9 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -335,11 +335,8 @@ def _is_bool_indexer(key):
     return False
 
 def _default_index(n):
-    from pandas.core.index import NULL_INDEX, Index
-    if n == 0:
-        return NULL_INDEX
-    else:
-        return Index(np.arange(n))
+    from pandas.core.index import Index
+    return Index(np.arange(n))
 
 def ensure_float(arr):
     if issubclass(arr.dtype.type, np.integer):
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 1e88e77b4..538bc6d1b 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -28,7 +28,7 @@ from pandas.core.common import (isnull, notnull, PandasError, _try_sort,
                                 _default_index, _stringify)
 from pandas.core.daterange import DateRange
 from pandas.core.generic import NDFrame
-from pandas.core.index import Index, MultiIndex, NULL_INDEX, _ensure_index
+from pandas.core.index import Index, MultiIndex, _ensure_index
 from pandas.core.indexing import _NDFrameIndexer, _maybe_droplevels
 from pandas.core.internals import BlockManager, make_block, form_blocks
 from pandas.core.series import Series, _radd_compat
@@ -3927,7 +3927,7 @@ def extract_index(data):
 
     index = None
     if len(data) == 0:
-        index = NULL_INDEX
+        index = Index([])
     elif len(data) > 0 and index is None:
         raw_lengths = []
         indexes = []
@@ -3964,9 +3964,6 @@ def extract_index(data):
             else:
                 index = Index(np.arange(lengths[0]))
 
-    if len(index) == 0:
-        index = NULL_INDEX
-
     return _ensure_index(index)
 
 
diff --git a/pandas/core/index.py b/pandas/core/index.py
index f556af8a0..42c31498e 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -514,7 +514,7 @@ class Index(np.ndarray):
         try:
             return self._engine.get_value(series, key)
         except KeyError, e1:
-            if self.inferred_type == 'integer':
+            if len(self) > 0 and self.inferred_type == 'integer':
                 raise
 
             try:
@@ -2128,8 +2128,6 @@ class MultiIndex(Index):
 
 # For utility purposes
 
-NULL_INDEX = Index([])
-
 
 def _sparsify(label_list):
     pivoted = zip(*label_list)
@@ -2172,7 +2170,7 @@ def _validate_join_method(method):
 def _get_combined_index(indexes, intersect=False):
     indexes = _get_distinct_indexes(indexes)
     if len(indexes) == 0:
-        return NULL_INDEX
+        return Index([])
     if len(indexes) == 1:
         return indexes[0]
     if intersect:
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 15c8efd00..bf3c005c5 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -10,7 +10,7 @@ import numpy as np
 from pandas.core.common import (PandasError, _mut_exclusive,
                                 _try_sort, _default_index, _infer_dtype)
 from pandas.core.index import (Factor, Index, MultiIndex, _ensure_index,
-                               _get_combined_index, NULL_INDEX)
+                               _get_combined_index)
 from pandas.core.indexing import _NDFrameIndexer, _maybe_droplevels
 from pandas.core.internals import BlockManager, make_block, form_blocks
 from pandas.core.frame import DataFrame
@@ -1273,7 +1273,7 @@ def _extract_axis(data, axis=0, intersect=False):
     from pandas.core.index import _union_indexes
 
     if len(data) == 0:
-        index = NULL_INDEX
+        index = Index([])
     elif len(data) > 0:
         raw_lengths = []
         indexes = []
@@ -1302,9 +1302,6 @@ def _extract_axis(data, axis=0, intersect=False):
             else:
                 index = Index(np.arange(lengths[0]))
 
-    if len(index) == 0:
-        index = NULL_INDEX
-
     return _ensure_index(index)
 
 
diff --git a/pandas/sparse/frame.py b/pandas/sparse/frame.py
index c86d24771..e158db876 100644
--- a/pandas/sparse/frame.py
+++ b/pandas/sparse/frame.py
@@ -9,7 +9,7 @@ from numpy import nan
 import numpy as np
 
 from pandas.core.common import _pickle_array, _unpickle_array, _try_sort
-from pandas.core.index import Index, MultiIndex, NULL_INDEX, _ensure_index
+from pandas.core.index import Index, MultiIndex, _ensure_index
 from pandas.core.series import Series
 from pandas.core.frame import (DataFrame, extract_index, _prep_ndarray,
                                _default_index)
@@ -80,10 +80,10 @@ class SparseDataFrame(DataFrame):
             sdict = {}
 
             if index is None:
-                index = NULL_INDEX
+                index = Index([])
 
             if columns is None:
-                columns = NULL_INDEX
+                columns = Index([])
             else:
                 for c in columns:
                     sdict[c] = Series(np.nan, index=index)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 79e8e7031..67e3d1154 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -19,7 +19,6 @@ import pandas as pan
 import pandas.core.common as com
 import pandas.core.format as fmt
 import pandas.core.datetools as datetools
-from pandas.core.index import NULL_INDEX
 from pandas.core.api import (DataFrame, Index, Series, notnull, isnull,
                              MultiIndex)
 from pandas.io.parsers import (ExcelFile, ExcelWriter)
@@ -1289,14 +1288,15 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         # with dict of empty list and Series
         frame = DataFrame({'A' : [], 'B' : []}, columns=['A', 'B'])
-        self.assert_(frame.index is NULL_INDEX)
+        self.assert_(frame.index.equals(Index([])))
 
     def test_constructor_subclass_dict(self):
         # Test for passing dict subclass to constructor
         data = {'col1': tm.TestSubDict((x, 10.0 * x) for x in xrange(10)),
                 'col2': tm.TestSubDict((x, 20.0 * x) for x in xrange(10))}
         df = DataFrame(data)
-        refdf = DataFrame(dict((col, dict(val.iteritems())) for col, val in data.iteritems()))
+        refdf = DataFrame(dict((col, dict(val.iteritems()))
+                               for col, val in data.iteritems()))
         assert_frame_equal(refdf, df)
 
         data = tm.TestSubDict(data.iteritems())
@@ -1400,7 +1400,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         # 0-length axis
         frame = DataFrame(np.empty((0, 3)))
-        self.assert_(frame.index is NULL_INDEX)
+        self.assert_(len(frame.index) == 0)
 
         frame = DataFrame(np.empty((3, 0)))
         self.assert_(len(frame.columns) == 0)
@@ -1458,7 +1458,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         # 0-length axis
         frame = DataFrame(ma.masked_all((0, 3)))
-        self.assert_(frame.index is NULL_INDEX)
+        self.assert_(len(frame.index) == 0)
 
         frame = DataFrame(ma.masked_all((3, 0)))
         self.assert_(len(frame.columns) == 0)
@@ -1720,6 +1720,12 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         expected = DataFrame([[np.nan, 1], [1, 0]])
         assert_frame_equal(df, expected)
 
+    def test_new_empty_index(self):
+        df1 = DataFrame(randn(0, 3))
+        df2 = DataFrame(randn(0, 3))
+        df1.index.name = 'foo'
+        self.assert_(df2.index.name is None)
+
     def test_astype(self):
         casted = self.frame.astype(int)
         expected = DataFrame(self.frame.values.astype(int),
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index dc1c3114d..dcba93fea 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -263,11 +263,6 @@ class TestIndex(unittest.TestCase):
 
         testit(self.dateIndex)
 
-    # def test_always_get_null_index(self):
-    #     empty = Index([])
-    #     self.assert_(empty is NULL_INDEX)
-    #     self.assert_(self.dateIndex[15:15] is NULL_INDEX)
-
     def test_is_numeric(self):
         self.assert_(not self.dateIndex.is_numeric())
         self.assert_(not self.strIndex.is_numeric())
@@ -1466,10 +1461,9 @@ class TestFactor(unittest.TestCase):
 
 
 def test_get_combined_index():
-    from pandas.core.index import _get_combined_index, NULL_INDEX
-
+    from pandas.core.index import _get_combined_index
     result = _get_combined_index([])
-    assert(result is NULL_INDEX)
+    assert(result.equals(Index([])))
 
 if __name__ == '__main__':
     import nose
diff --git a/pandas/tools/tests/test_merge.py b/pandas/tools/tests/test_merge.py
index 5b78f41c0..d6bef583f 100644
--- a/pandas/tools/tests/test_merge.py
+++ b/pandas/tools/tests/test_merge.py
@@ -836,6 +836,17 @@ class TestConcatenate(unittest.TestCase):
         self.assert_((result['foo'][15:] == 'bar').all())
         self.assert_(result['foo'][:15].isnull().all())
 
+    def test_append_preserve_index_name(self):
+        # #980
+        df1 = DataFrame(data=None, columns=['A','B','C'])
+        df1 = df1.set_index(['A'])
+        df2 = DataFrame(data=[[1,4,7], [2,5,8], [3,6,9]],
+                        columns=['A','B','C'])
+        df2 = df2.set_index(['A'])
+
+        result = df1.append(df2)
+        self.assert_(result.index.name == 'A')
+
     def test_join_many(self):
         df = DataFrame(np.random.randn(10, 6), columns=list('abcdef'))
         df_list = [df[['a', 'b']], df[['c', 'd']], df[['e', 'f']]]
