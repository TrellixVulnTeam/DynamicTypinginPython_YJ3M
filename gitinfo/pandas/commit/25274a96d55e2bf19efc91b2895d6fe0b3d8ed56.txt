commit 25274a96d55e2bf19efc91b2895d6fe0b3d8ed56
Author: Chang She <changshe@gmail.com>
Date:   Mon Dec 3 08:50:16 2012 -0500

    BUG: specify formatters for the index

diff --git a/pandas/core/format.py b/pandas/core/format.py
index 3b668f522..554ac41d7 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -99,6 +99,7 @@ class SeriesFormatter(object):
     def _get_formatted_index(self):
         index = self.series.index
         is_multi = isinstance(index, MultiIndex)
+
         if is_multi:
             have_header = any(name for name in index.names)
             fmt_index = index.format(names=True)
@@ -391,11 +392,13 @@ class DataFrameFormatter(object):
         show_index_names = self.show_index_names and self.has_index_names
         show_col_names = (self.show_index_names and self.has_column_names)
 
+        fmt = self.formatters.get('__index__', None)
         if isinstance(index, MultiIndex):
             fmt_index = index.format(sparsify=self.sparsify, adjoin=False,
-                                     names=show_index_names)
+                                     names=show_index_names,
+                                     formatter=fmt)
         else:
-            fmt_index = [index.format(name=show_index_names)]
+            fmt_index = [index.format(name=show_index_names, formatter=fmt)]
 
         adjoined = adjoin(1, *fmt_index).split('\n')
 
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 9f0992908..bc4f72f14 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -421,7 +421,7 @@ class Index(np.ndarray):
         taken = self.view(np.ndarray).take(indexer)
         return self._constructor(taken, name=self.name)
 
-    def format(self, name=False):
+    def format(self, name=False, formatter=None):
         """
         Render a string representation of the Index
         """
@@ -429,7 +429,11 @@ class Index(np.ndarray):
 
         header = []
         if name:
-            header.append(com.pprint_thing(self.name) if self.name is not None else '')
+            header.append(com.pprint_thing(self.name)
+                          if self.name is not None else '')
+
+        if formatter is not None:
+            return header + list(self.map(formatter))
 
         if self.is_all_dates:
             zero_time = time(0, 0)
@@ -1559,14 +1563,14 @@ class MultiIndex(Index):
         return unique_vals.take(labels)
 
     def format(self, space=2, sparsify=None, adjoin=True, names=False,
-               na_rep='NaN'):
+               na_rep='NaN', formatter=None):
         if len(self) == 0:
             return []
 
         stringified_levels = []
         for lev, lab in zip(self.levels, self.labels):
             if len(lev) > 0:
-                formatted = lev.take(lab).format()
+                formatted = lev.take(lab).format(formatter=formatter)
             else:
                 # weird all NA case
                 formatted = [com.pprint_thing(x) for x in com.take_1d(lev.values, lab)]
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index 168e4afd9..54ad50573 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -579,6 +579,19 @@ class TestDataFrameFormatting(unittest.TestCase):
                     '3 -35')
         self.assertEqual(output, expected)
 
+    def test_to_string_index_formatter(self):
+        df = DataFrame([range(5), range(5, 10), range(10, 15)])
+
+        rs = df.to_string(formatters={'__index__': lambda x: 'abc'[x]})
+
+        xp = """\
+    0   1   2   3   4
+a   0   1   2   3   4
+b   5   6   7   8   9
+c  10  11  12  13  14\
+"""
+        self.assertEqual(rs, xp)
+
     def test_to_string_left_justify_cols(self):
         fmt.reset_printoptions()
         df = DataFrame({'x' : [3234, 0.253]})
diff --git a/pandas/tests/test_panel4d.py b/pandas/tests/test_panel4d.py
index 18022cf59..8340d5560 100644
--- a/pandas/tests/test_panel4d.py
+++ b/pandas/tests/test_panel4d.py
@@ -145,6 +145,8 @@ class SafeForLongAndSparse(object):
 
 class SafeForSparse(object):
 
+    _multiprocess_can_split_ = True
+
     @classmethod
     def assert_panel_equal(cls, x, y):
         assert_panel_equal(x, y)
@@ -193,37 +195,6 @@ class SafeForSparse(object):
         self.assertEqual(self.panel4d._get_axis_name(2), 'major_axis')
         self.assertEqual(self.panel4d._get_axis_name(3), 'minor_axis')
 
-    #def test_get_plane_axes(self):
-    #    # what to do here?
-
-    #    index, columns = self.panel._get_plane_axes('items')
-    #    index, columns = self.panel._get_plane_axes('major_axis')
-    #    index, columns = self.panel._get_plane_axes('minor_axis')
-    #    index, columns = self.panel._get_plane_axes(0)
-
-    def test_truncate(self):
-        raise nose.SkipTest
-
-        #dates = self.panel.major_axis
-        #start, end = dates[1], dates[5]
-
-        #trunced = self.panel.truncate(start, end, axis='major')
-        #expected = self.panel['ItemA'].truncate(start, end)
-
-        #assert_frame_equal(trunced['ItemA'], expected)
-
-        #trunced = self.panel.truncate(before=start, axis='major')
-        #expected = self.panel['ItemA'].truncate(before=start)
-
-        #assert_frame_equal(trunced['ItemA'], expected)
-
-        #trunced = self.panel.truncate(after=end, axis='major')
-        #expected = self.panel['ItemA'].truncate(after=end)
-
-        #assert_frame_equal(trunced['ItemA'], expected)
-
-        # XXX test other axes
-
     def test_arith(self):
         self._test_op(self.panel4d, operator.add)
         self._test_op(self.panel4d, operator.sub)
@@ -317,6 +288,7 @@ class SafeForSparse(object):
 
 class CheckIndexing(object):
 
+    _multiprocess_can_split_ = True
 
     def test_getitem(self):
         self.assertRaises(Exception, self.panel4d.__getitem__, 'ItemQ')
@@ -396,22 +368,6 @@ class CheckIndexing(object):
         self.panel4d['lP'] = self.panel4d['l1'] > 0
         self.assert_(self.panel4d['lP'].values.dtype == np.bool_)
 
-    def test_setitem_ndarray(self):
-        raise nose.SkipTest
-    #    from pandas import DateRange, datetools
-
-    #    timeidx = DateRange(start=datetime(2009,1,1),
-    #                        end=datetime(2009,12,31),
-    #                        offset=datetools.MonthEnd())
-    #    lons_coarse = np.linspace(-177.5, 177.5, 72)
-    #    lats_coarse = np.linspace(-87.5, 87.5, 36)
-    #    P = Panel(items=timeidx, major_axis=lons_coarse, minor_axis=lats_coarse)
-    #    data = np.random.randn(72*36).reshape((72,36))
-    #    key = datetime(2009,2,28)
-    #    P[key] = data#
-
-    #    assert_almost_equal(P[key].values, data)
-
     def test_major_xs(self):
         ref = self.panel4d['l1']['ItemA']
 
@@ -514,38 +470,6 @@ class CheckIndexing(object):
         #self.assertRaises(NotImplementedError, self.panel4d.major_xs)
         #self.assertRaises(NotImplementedError, self.panel4d.minor_xs)
 
-    def test_getitem_fancy_xs_check_view(self):
-        raise nose.SkipTest
-    #    item = 'ItemB'
-    #    date = self.panel.major_axis[5]
-    #    col = 'C'
-
-    #    # make sure it's always a view
-    #    NS = slice(None, None)
-
-    #    # DataFrames
-    #    comp = assert_frame_equal
-    #    self._check_view(item, comp)
-    #    self._check_view((item, NS), comp)
-    #    self._check_view((item, NS, NS), comp)
-    #    self._check_view((NS, date), comp)
-    #    self._check_view((NS, date, NS), comp)
-    #    self._check_view((NS, NS, 'C'), comp)
-
-    #    # Series
-    #    comp = assert_series_equal
-    #    self._check_view((item, date), comp)
-    #    self._check_view((item, date, NS), comp)
-    #    self._check_view((item, NS, 'C'), comp)
-    #    self._check_view((NS, date, 'C'), comp)#
-
-    #def _check_view(self, indexer, comp):
-    #    cp = self.panel.copy()
-    #    obj = cp.ix[indexer]
-    #    obj.values[:] = 0
-    #    self.assert_((obj.values == 0).all())
-    #    comp(cp.ix[indexer].reindex_like(obj), obj)
-
     def test_get_value(self):
         for label in self.panel4d.labels:
             for item in self.panel4d.items:
@@ -574,6 +498,8 @@ class CheckIndexing(object):
 
 class TestPanel4d(unittest.TestCase, CheckIndexing, SafeForSparse, SafeForLongAndSparse):
 
+    _multiprocess_can_split_ = True
+
     @classmethod
     def assert_panel4d_equal(cls,x, y):
         assert_panel4d_equal(x, y)
