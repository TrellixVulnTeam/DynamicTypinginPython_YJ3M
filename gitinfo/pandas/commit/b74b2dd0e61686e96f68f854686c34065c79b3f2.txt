commit b74b2dd0e61686e96f68f854686c34065c79b3f2
Author: jreback <jeff@reback.net>
Date:   Fri Jan 11 14:28:00 2013 -0500

    ENH: added neg/inv operators to series
         fixed setitem with boolean indexer to accept an object needing alignment (e.g. a partial series)

diff --git a/pandas/core/series.py b/pandas/core/series.py
index 2dae1a743..bd211d529 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -616,6 +616,9 @@ copy : boolean, default False
         if len(cond) != len(self):
             raise ValueError('condition must have same length as series')
 
+        if not cond.dtype == np.bool_:
+            cond = cond.astype(np.bool_)
+
         ser = self if inplace else self.copy()
         if not isinstance(other, (list, tuple, np.ndarray)):
             ser._set_with(~cond, other)
@@ -672,10 +675,11 @@ copy : boolean, default False
             # Could not hash item
 
         if _is_bool_indexer(key):
+            #import pdb; pdb.set_
             key = self._check_bool_indexer(key)
-            key = np.asarray(key, dtype=bool)
-
-        self._set_with(key, value)
+            self.where(~key,value,inplace=True)
+        else:
+            self._set_with(key, value)
 
     def _set_with(self, key, value):
         # other: fancy integer or otherwise
@@ -707,13 +711,7 @@ copy : boolean, default False
                 else:
                     return self._set_values(key, value)
             elif key_type == 'boolean':
-
-                # scalar setting with boolean key
-                if np.isscalar(value):
                     self._set_values(key, value)
-                # we have a key mask and a value that is np.array like
-                else:
-                    np.putmask(self.values, key, value)
             else:
                 self._set_labels(key, value)
 
@@ -758,6 +756,12 @@ copy : boolean, default False
                 raise ValueError('cannot index with vector containing '
                                  'NA / NaN values')
 
+        # coerce to bool type
+        if not hasattr(result, 'shape'):
+            result = np.array(result)
+        if not result.dtype == np.bool_:
+            result = result.astype(np.bool_)
+
         return result
 
     def __setslice__(self, i, j, value):
@@ -1115,6 +1119,15 @@ copy : boolean, default False
     __le__ = _comp_method(operator.le, '__le__')
     __eq__ = _comp_method(operator.eq, '__eq__')
     __ne__ = _comp_method(operator.ne, '__ne__')
+    
+    # inversion
+    def __neg__(self):
+        arr = operator.neg(self.values)
+        return Series(arr, self.index, name=self.name)
+
+    def __invert__(self):
+        arr = operator.inv(self.values)
+        return Series(arr, self.index, name=self.name)
 
     # binary logic
     __or__ = _bool_method(operator.or_, '__or__')
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 46b76a0a1..e16bad145 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -1047,11 +1047,19 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
     def test_setitem_boolean(self):
         mask = self.series > self.series.median()
 
+        # similiar indexed series
         result = self.series.copy()
         result[mask] = self.series*2
         expected = self.series*2
         assert_series_equal(result[mask], expected[mask])
 
+        # needs alignment
+        result = self.series.copy()
+        result[mask] = (self.series*2)[0:5]
+        expected = (self.series*2)[0:5].reindex_like(self.series)
+        expected[-mask] = self.series[mask]
+        assert_series_equal(result[mask], expected[mask])
+
     def test_ix_setitem_boolean(self):
         mask = self.series > self.series.median()
 
@@ -1525,6 +1533,12 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         check(self.ts, self.ts[::2])
         check(self.ts, 5)
 
+    def test_neg(self):
+        assert_series_equal(-self.series, -1 * self.series)
+
+    def test_invert(self):
+        assert_series_equal(-(self.series < 0), ~(self.series < 0))
+
     def test_operators(self):
 
         def _check_op(series, other, op, pos_only=False):
