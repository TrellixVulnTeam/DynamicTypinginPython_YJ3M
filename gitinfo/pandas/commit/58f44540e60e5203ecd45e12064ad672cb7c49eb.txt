commit 58f44540e60e5203ecd45e12064ad672cb7c49eb
Author: Matti Picus <matti.picus@gmail.com>
Date:   Thu Jun 1 02:04:55 2017 +0300

    COMPAT: cython str-to-int can raise a ValueError on non-CPython (#16563)

diff --git a/pandas/_libs/index.pyx b/pandas/_libs/index.pyx
index 21680fb0b..5e92c506b 100644
--- a/pandas/_libs/index.pyx
+++ b/pandas/_libs/index.pyx
@@ -152,7 +152,7 @@ cdef class IndexEngine:
 
         try:
             return self.mapping.get_item(val)
-        except TypeError:
+        except (TypeError, ValueError):
             raise KeyError(val)
 
     cdef inline _get_loc_duplicates(self, object val):
@@ -470,7 +470,7 @@ cdef class DatetimeEngine(Int64Engine):
         try:
             val = _to_i8(val)
             return self.mapping.get_item(val)
-        except TypeError:
+        except (TypeError, ValueError):
             self._date_check_type(val)
             raise KeyError(val)
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 907959c42..25c3c3fe4 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1918,7 +1918,7 @@ it is assumed to be aliases for the column names')
 
         try:
             return engine.get_value(series._values, index)
-        except TypeError:
+        except (TypeError, ValueError):
 
             # we cannot handle direct indexing
             # use positional
diff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py
index 2af4f112c..e1e08e008 100644
--- a/pandas/core/indexes/base.py
+++ b/pandas/core/indexes/base.py
@@ -1590,7 +1590,7 @@ class Index(IndexOpsMixin, StringAccessorMixin, PandasObject):
         hash(key)
         try:
             return key in self._engine
-        except TypeError:
+        except (TypeError, ValueError):
             return False
 
     _index_shared_docs['contains'] = """
@@ -1610,7 +1610,7 @@ class Index(IndexOpsMixin, StringAccessorMixin, PandasObject):
         hash(key)
         try:
             return key in self._engine
-        except TypeError:
+        except (TypeError, ValueError):
             return False
 
     def __hash__(self):
