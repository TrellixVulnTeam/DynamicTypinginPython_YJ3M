commit bc1998fb0d7bf060c0e2c27e7bc84b6e00607c0e
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jun 13 23:50:48 2011 -0400

    more tests. basically satisfied with SparseDataFrame at the moment

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 73e678f2a..086aa4ab0 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1655,8 +1655,8 @@ class DataFrame(PandasGeneric):
         except Exception:
             pass
 
-        return DataFrame(results, index=self.index, columns=self.columns,
-                         copy=False)
+        return self._constructor(results, index=self.index,
+                                 columns=self.columns)
 
     #----------------------------------------------------------------------
     # Merging / joining methods
@@ -1829,7 +1829,7 @@ class DataFrame(PandasGeneric):
                         correl[i, j] = c
                         correl[j, i] = c
 
-        return self._constructor(correl, index=cols, columns=cols)
+        return DataFrame(correl, index=cols, columns=cols)
 
     def corrwith(self, other, axis=0, drop=False):
         """
@@ -1899,7 +1899,7 @@ class DataFrame(PandasGeneric):
                 tmp.quantile(.1), tmp.median(),
                 tmp.quantile(.9), tmp.max()]
 
-        return self._constructor(data, index=cols_destat, columns=cols)
+        return DataFrame(data, index=cols_destat, columns=cols)
 
     #----------------------------------------------------------------------
     # ndarray-like stats methods
@@ -2152,9 +2152,14 @@ class DataFrame(PandasGeneric):
         from scipy.stats import scoreatpercentile
         per = q * 100
         def f(arr):
+            arr = arr.values
             if arr.dtype != np.float_:
                 arr = arr.astype(float)
-            return scoreatpercentile(arr[notnull(arr)], per)
+            arr = arr[notnull(arr)]
+            if len(arr) == 0:
+                return nan
+            else:
+                return scoreatpercentile(arr, per)
 
         return self.apply(f, axis=axis)
 
diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index db79fd5f5..674b56da5 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -1046,7 +1046,7 @@ class SparseDataFrame(DataFrame):
         -------
         Series or TimeSeries
         """
-        return self.apply(SparseSeries.count, axis=0)
+        return self.apply(SparseSeries.count, axis=axis)
 
     def shift(self, periods, offset=None, timeRule=None):
         """
diff --git a/pandas/core/tests/test_sparse.py b/pandas/core/tests/test_sparse.py
index ce5a9e3ac..4c6a5ea97 100644
--- a/pandas/core/tests/test_sparse.py
+++ b/pandas/core/tests/test_sparse.py
@@ -904,6 +904,11 @@ class TestSparseDataFrame(TestCase):
 
         self.assert_(self.empty.apply(np.sqrt) is self.empty)
 
+    def test_applymap(self):
+        # just test that it works
+        result = self.frame.applymap(lambda x: x * 2)
+        self.assert_(isinstance(result, SparseDataFrame))
+
     def test_astype(self):
         pass
 
@@ -917,8 +922,11 @@ class TestSparseDataFrame(TestCase):
 
     def test_corr(self):
         res = self.frame.corr()
-        self.assert_(isinstance(res, SparseDataFrame))
-        assert_frame_equal(res.to_dense(), self.frame.to_dense().corr())
+        assert_frame_equal(res, self.frame.to_dense().corr())
+
+    def test_describe(self):
+        self.frame['foo'] = np.nan
+        desc = self.frame.describe()
 
     def test_join(self):
         left = self.frame.ix[:, ['A', 'B']]
@@ -1047,6 +1055,10 @@ class TestSparseDataFrame(TestCase):
         dense_result = self.frame.to_dense().count()
         assert_series_equal(result, dense_result)
 
+        result = self.frame.count(1)
+        dense_result = self.frame.to_dense().count(1)
+        assert_series_equal(result, dense_result)
+
     def _check_all(self, check_func):
         check_func(self.frame)
         check_func(self.iframe)
