commit 0d3d0a42d8ce0b0f3da674c425fb76ed501270e3
Author: Jeff Reback <jeff@reback.net>
Date:   Sat Feb 6 14:33:19 2016 -0500

    TST: fix some scipy 0.17.0 changes
    
    partially on #12235
    
    Author: Jeff Reback <jeff@reback.net>
    
    Closes #12239 from jreback/py35_fix and squashes the following commits:
    
    b15ec40 [Jeff Reback] TST: fix some scipy 0.17.0 changes

diff --git a/pandas/tests/test_generic.py b/pandas/tests/test_generic.py
index 2a97fdad8..7cb0dd249 100644
--- a/pandas/tests/test_generic.py
+++ b/pandas/tests/test_generic.py
@@ -6,6 +6,7 @@ import numpy as np
 from numpy import nan
 import pandas as pd
 
+from distutils.version import LooseVersion
 from pandas import (Index, Series, DataFrame, Panel, isnull,
                     date_range, period_range)
 from pandas.core.index import MultiIndex
@@ -1195,9 +1196,15 @@ class TestDataFrame(tm.TestCase, Generic):
         assert_frame_equal(result, expectedk)
 
         _skip_if_no_pchip()
+        import scipy
         result = df.interpolate(method='pchip')
         expected.ix[2, 'A'] = 3
-        expected.ix[5, 'A'] = 6.125
+
+        if LooseVersion(scipy.__version__) >= '0.17.0':
+            expected.ix[5, 'A'] = 6.0
+        else:
+            expected.ix[5, 'A'] = 6.125
+
         assert_frame_equal(result, expected)
 
     def test_interp_rowwise(self):
diff --git a/pandas/tests/test_nanops.py b/pandas/tests/test_nanops.py
index 79e200225..8364da245 100644
--- a/pandas/tests/test_nanops.py
+++ b/pandas/tests/test_nanops.py
@@ -122,7 +122,7 @@ class TestnanopsDataFrame(tm.TestCase):
 
         # timedeltas are a beast here
         def _coerce_tds(targ, res):
-            if targ.dtype == 'm8[ns]':
+            if hasattr(targ, 'dtype') and targ.dtype == 'm8[ns]':
                 if len(targ) == 1:
                     targ = targ[0].item()
                     res = res.item()
@@ -141,7 +141,8 @@ class TestnanopsDataFrame(tm.TestCase):
             tm.assert_almost_equal(targ, res)
         except:
 
-            if targ.dtype == 'm8[ns]':
+            # handle timedelta dtypes
+            if hasattr(targ, 'dtype') and targ.dtype == 'm8[ns]':
                 targ, res = _coerce_tds(targ, res)
                 tm.assert_almost_equal(targ, res)
                 return
diff --git a/pandas/tests/test_stats.py b/pandas/tests/test_stats.py
index b4cc57cb8..56f6a80e5 100644
--- a/pandas/tests/test_stats.py
+++ b/pandas/tests/test_stats.py
@@ -2,6 +2,7 @@
 from pandas import compat
 import nose
 
+from distutils.version import LooseVersion
 from numpy import nan
 import numpy as np
 
@@ -47,6 +48,7 @@ class TestRank(tm.TestCase):
 
     def test_rank_methods_series(self):
         tm.skip_if_no_package('scipy', '0.13', 'scipy.stats.rankdata')
+        import scipy
         from scipy.stats import rankdata
 
         xs = np.random.randn(9)
@@ -61,10 +63,15 @@ class TestRank(tm.TestCase):
             for m in ['average', 'min', 'max', 'first', 'dense']:
                 result = ts.rank(method=m)
                 sprank = rankdata(vals, m if m != 'first' else 'ordinal')
-                tm.assert_series_equal(result, Series(sprank, index=index))
+                expected = Series(sprank, index=index)
+
+                if LooseVersion(scipy.__version__) >= '0.17.0':
+                    expected = expected.astype('float64')
+                tm.assert_series_equal(result, expected)
 
     def test_rank_methods_frame(self):
         tm.skip_if_no_package('scipy', '0.13', 'scipy.stats.rankdata')
+        import scipy
         from scipy.stats import rankdata
 
         xs = np.random.randint(0, 21, (100, 26))
@@ -81,6 +88,9 @@ class TestRank(tm.TestCase):
                         rankdata, ax, vals,
                         m if m != 'first' else 'ordinal')
                     expected = DataFrame(sprank, columns=cols)
+
+                    if LooseVersion(scipy.__version__) >= '0.17.0':
+                        expected = expected.astype('float64')
                     tm.assert_frame_equal(result, expected)
 
     def test_rank_dense_method(self):
