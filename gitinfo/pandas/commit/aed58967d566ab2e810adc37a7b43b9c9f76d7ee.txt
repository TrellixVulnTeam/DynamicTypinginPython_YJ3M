commit aed58967d566ab2e810adc37a7b43b9c9f76d7ee
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Nov 14 19:35:20 2012 -0500

    BUG: override SparseDataFrame.icol to use __getitem__ instead of accessing _data internals. close #2251

diff --git a/pandas/sparse/frame.py b/pandas/sparse/frame.py
index 2dc48fc73..c38936b55 100644
--- a/pandas/sparse/frame.py
+++ b/pandas/sparse/frame.py
@@ -343,6 +343,37 @@ class SparseDataFrame(DataFrame):
             else:  # pragma: no cover
                 raise
 
+    def icol(self, i):
+        """
+        Retrieve the i-th column or columns of the DataFrame by location
+
+        Parameters
+        ----------
+        i : int, slice, or sequence of integers
+
+        Notes
+        -----
+        If slice passed, the resulting data will be a view
+
+        Returns
+        -------
+        column : Series (int) or DataFrame (slice, sequence)
+        """
+        if isinstance(i, slice):
+            # need to return view
+            lab_slice = slice(label[0], label[-1])
+            return self.ix[:, lab_slice]
+        else:
+            label = self.columns[i]
+            if isinstance(label, Index):
+                if self.columns.inferred_type == 'integer':
+                    # XXX re: #2228
+                    return self.reindex(columns=label)
+                else:
+                    return self.ix[:, i]
+
+            return self[label]
+
     @Appender(DataFrame.get_value.__doc__, indents=0)
     def get_value(self, index, col):
         s = self._series[col]
diff --git a/pandas/sparse/tests/test_sparse.py b/pandas/sparse/tests/test_sparse.py
index 6750534e0..87ffa0822 100644
--- a/pandas/sparse/tests/test_sparse.py
+++ b/pandas/sparse/tests/test_sparse.py
@@ -907,6 +907,12 @@ class TestSparseDataFrame(TestCase, test_frame.SafeForSparse):
         self.assertTrue(isinstance(result, SparseSeries))
         assert_sp_series_equal(result, self.frame['A'])
 
+        # preserve sparse index type. #2251
+        data = {'A' : [0,1 ]}
+        iframe = SparseDataFrame(data, default_kind='integer')
+        self.assertEquals(type(iframe['A'].sp_index),
+                          type(iframe.icol(0).sp_index))
+
     def test_set_value(self):
         res = self.frame.set_value('foobar', 'B', 1.5)
         self.assert_(res is not self.frame)
