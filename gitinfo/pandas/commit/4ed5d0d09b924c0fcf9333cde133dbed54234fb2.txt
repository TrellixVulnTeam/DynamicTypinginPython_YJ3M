commit 4ed5d0d09b924c0fcf9333cde133dbed54234fb2
Author: y-p <yoval@gmx.com>
Date:   Mon Mar 18 07:35:16 2013 +0200

    DOC: RELEASE.rst is a full changelog, v0.x.y.txt is what's new/changed

diff --git a/RELEASE.rst b/RELEASE.rst
index 4a7eaf838..7e0187df9 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -41,7 +41,7 @@ pandas 0.11.0
   - Added ``.loc``  attribute, to support strict label based indexing, analagous to ``.ix`` (GH3053_)
   - Added ``.iat``  attribute, to support fast scalar access via integers (replaces ``iget_value/iset_value``)
   - Added ``.at``   attribute, to support fast scalar access via labels (replaces ``get_value/set_value``)
-  - Moved functionaility from ``irow,icol,iget_value/iset_value`` to ``.iloc`` indexer 
+  - Moved functionaility from ``irow,icol,iget_value/iset_value`` to ``.iloc`` indexer
     (via ``_ixs`` methods in each object)
   - Added support for expression evaluation using the ``numexpr`` library
 
@@ -154,7 +154,7 @@ pandas 0.11.0
   - TimeDeltas
 
     - Series ops with a Timestamp on the rhs was throwing an exception (GH2898_)
-      added tests for Series ops with datetimes,timedeltas,Timestamps, and datelike 
+      added tests for Series ops with datetimes,timedeltas,Timestamps, and datelike
       Series on both lhs and rhs
     - Fixed subtle timedelta64 inference issue on py3
     - Fixed some formatting issues on timedelta when negative
@@ -169,14 +169,14 @@ pandas 0.11.0
   - Bug in value_counts of ``datetime64[ns]`` Series (GH3002_)
   - Fixed printing of ``NaT` in an index
   - Bug in idxmin/idxmax of ``datetime64[ns]`` Series with ``NaT`` (GH2982__)
-  - Bug in ``icol, take`` with negative indicies was producing incorrect return 
+  - Bug in ``icol, take`` with negative indicies was producing incorrect return
     values (see GH2922_, GH2892_), also check for out-of-bounds indices (GH3029_)
   - Bug in DataFrame column insertion when the column creation fails, existing frame is left in
     an irrecoverable state (GH3010_)
-  - Bug in DataFrame update, combine_first where non-specified values could cause 
+  - Bug in DataFrame update, combine_first where non-specified values could cause
     dtype changes (GH3016_, GH3041_)
   - Bug in groupby with first/last where dtypes could change (GH3041_)
-  - Formatting of an index that has ``nan`` was inconsistent or wrong (would fill from 
+  - Formatting of an index that has ``nan`` was inconsistent or wrong (would fill from
     other values), (GH2850_)
   - Unstack of a frame with no nans would always cause dtype upcasting (GH2929_)
   - Fix scalar datetime.datetime parsing bug in read_csv (GH3071_)
diff --git a/doc/source/v0.11.0.txt b/doc/source/v0.11.0.txt
index 84a870014..487321b35 100644
--- a/doc/source/v0.11.0.txt
+++ b/doc/source/v0.11.0.txt
@@ -6,7 +6,7 @@ v0.11.0 (March ??, 2013)
 This is a major release from 0.10.1 and includes many new features and
 enhancements along with a large number of bug fixes. The methods of Selecting
 Data have had quite a number of additions, and Dtype support is now full-fledged.
-There are also a number of important API changes that long-time pandas users should 
+There are also a number of important API changes that long-time pandas users should
 pay close attention to.
 
 There is a new section in the documentation, :ref:`10 Minutes to Pandas <10min>`,
@@ -38,7 +38,7 @@ three types of multi-axis indexing.
 
     See more at :ref:`Selection by Label <indexing.label>`
 
-  - ``.iloc`` is strictly integer position based (from 0 to length-1 of the axis), will 
+  - ``.iloc`` is strictly integer position based (from 0 to length-1 of the axis), will
     raise ``IndexError`` when the requested indicies are out of bounds. Allowed inputs are:
 
     - An integer e.g. ``5``
@@ -46,17 +46,17 @@ three types of multi-axis indexing.
     - A slice object with ints ``1:7``
     - A boolean array
 
-    See more at :ref:`Selection by Position <indexing.integer>` 
+    See more at :ref:`Selection by Position <indexing.integer>`
 
   - ``.ix`` supports mixed integer and label based access. It is primarily label based, but
-    will fallback to integer positional access. ``.ix`` is the most general and will support 
+    will fallback to integer positional access. ``.ix`` is the most general and will support
     any of the inputs to ``.loc`` and ``.iloc``, as well as support for floating point label schemes.
 
-    As using integer slices with ``.ix`` have different behavior depending on whether the slice 
-    is interpreted as integer location based or label position based, it's usually better to be 
+    As using integer slices with ``.ix`` have different behavior depending on whether the slice
+    is interpreted as integer location based or label position based, it's usually better to be
     explicit and use ``.iloc`` (integer location) or ``.loc`` (label location).
 
-    ``.ix`` is especially usefull when dealing with mixed positional/label based hierarchial indexes. 
+    ``.ix`` is especially usefull when dealing with mixed positional/label based hierarchial indexes.
 
     See more at :ref:`Advanced Indexing <indexing.advanced>` and :ref:`Advanced Hierarchical <indexing.advanced_hierarchical>`
 
@@ -92,8 +92,8 @@ Numeric dtypes will propagate and can coexist in DataFrames. If a dtype is passe
    df1 = DataFrame(randn(8, 1), columns = ['A'], dtype = 'float32')
    df1
    df1.dtypes
-   df2 = DataFrame(dict( A = Series(randn(8),dtype='float16'), 
-                         B = Series(randn(8)), 
+   df2 = DataFrame(dict( A = Series(randn(8),dtype='float16'),
+                         B = Series(randn(8)),
                          C = Series(randn(8),dtype='uint8') ))
    df2
    df2.dtypes
@@ -266,10 +266,10 @@ Enhancements
       ``above_below``. This allows the user to specify if they would like to
       only return forward looking data for options near the current stock
       price. This just obtains the data from Options.get_near_stock_price
-      instead of Options.get_xxx_data().
+      instead of Options.get_xxx_data().  (GH2758_)
 
   - added option `display.max_seq_items` to control the number of
-    elements printed per sequence pprinting it.
+    elements printed per sequence pprinting it.  (GH2979_)
 
   - added option `display.chop_threshold` to control display of small numerical
     values. (GH2739_)
@@ -284,48 +284,6 @@ Enhancements
     the collections.Mapping ABC.
 
 
-
-Bug Fixes
-~~~~~~~~~
-
-  - Timedeltas are now fully operational (closes GH2898_)
-
-    .. ipython:: python
-
-        from datetime import datetime, timedelta
-        s  = Series(date_range('2012-1-1', periods=3, freq='D'))
-        td = Series([ timedelta(days=i) for i in range(3) ])
-        df = DataFrame(dict(A = s, B = td))
-        df
-        s - s.max()
-        df['C'] = df['A'] + df['B']
-        df
-        df.dtypes
-
-        # timedelta are representas as ``NaT``
-        y = s - s.shift()
-	y
-
-	# can be set via ``np.nan``
-	y[1] = np.nan
-	y
-
-        # works on lhs too
-   	s.max() - s
-
-        # some timedelta numeric operations are supported
-        td - timedelta(minutes=5,seconds=5,microseconds=5)
-
-  - Fixed slow printing of large Dataframes, due to inefficient dtype
-    reporting (GH2807_)
-  - Fixed a segfault when using a function as grouper in groupby (GH3035_)
-  - Fix pretty-printing of infinite data structures (closes GH2978_)
-  - Fixed exception when plotting timeseries bearing a timezone (closes GH2877_)
-  - str.contains ignored na argument (GH2806_)
-  - Substitute warning for segfault when grouping with categorical grouper
-    of mismatched length (GH3011_)
-
-
 See the `full release notes
 <https://github.com/pydata/pandas/blob/master/RELEASE.rst>`__ or issue tracker
 on GitHub for a complete list.
@@ -343,3 +301,5 @@ on GitHub for a complete list.
 .. _GH2807: https://github.com/pydata/pandas/issues/2807
 .. _GH2918: https://github.com/pydata/pandas/issues/2918
 .. _GH3011: https://github.com/pydata/pandas/issues/3011
+.. _GH2979: https://github.com/pydata/pandas/issues/2979
+.. _GH2758: https://github.com/pydata/pandas/issues/2758
