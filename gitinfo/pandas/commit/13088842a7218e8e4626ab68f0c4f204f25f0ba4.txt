commit 13088842a7218e8e4626ab68f0c4f204f25f0ba4
Author: Thiago Serafim <thiago.serafim@gmail.com>
Date:   Mon Oct 24 18:10:51 2016 -0400

    ERR: Fix GH13139: better error message on invalid pd.eval and df.query input
    
    closes #13139
    
    Added test case to check for invalid input(empy string) on pd.eval('')
    and df.query('').  Used existing helper function(_check_expression)
    
    Author: Thiago Serafim <thiago.serafim@gmail.com>
    
    Closes #14473 from tserafim/issue#13139 and squashes the following commits:
    
    77483dd [Thiago Serafim] ERR: correctly raise ValueError on empty input to pd.eval() and df.query() (#13139)
    9a5c55f [Thiago Serafim] Fix GH13139: better error message on invalid pd.eval and df.query input

diff --git a/doc/source/whatsnew/v0.19.1.txt b/doc/source/whatsnew/v0.19.1.txt
index 147ff8795..1940c841c 100644
--- a/doc/source/whatsnew/v0.19.1.txt
+++ b/doc/source/whatsnew/v0.19.1.txt
@@ -41,7 +41,7 @@ Bug Fixes
 
 
 - Bug in string indexing against data with ``object`` ``Index`` may raise ``AttributeError`` (:issue:`14424`)
-
+- Corrrecly raise ``ValueError`` on empty input to ``pd.eval()`` and ``df.query()`` (:issue:`13139`)
 
 
 
diff --git a/pandas/computation/eval.py b/pandas/computation/eval.py
index 6c5c631a6..fffde4d9d 100644
--- a/pandas/computation/eval.py
+++ b/pandas/computation/eval.py
@@ -233,6 +233,7 @@ def eval(expr, parser='pandas', engine=None, truediv=True,
     """
     first_expr = True
     if isinstance(expr, string_types):
+        _check_expression(expr)
         exprs = [e for e in expr.splitlines() if e != '']
     else:
         exprs = [expr]
diff --git a/pandas/computation/tests/test_eval.py b/pandas/computation/tests/test_eval.py
index f480eae2d..ffa2cb068 100644
--- a/pandas/computation/tests/test_eval.py
+++ b/pandas/computation/tests/test_eval.py
@@ -1891,6 +1891,18 @@ def test_bad_resolver_raises():
         yield check_bad_resolver_raises, engine, parser
 
 
+def check_empty_string_raises(engine, parser):
+    # GH 13139
+    tm.skip_if_no_ne(engine)
+    with tm.assertRaisesRegexp(ValueError, 'expr cannot be an empty string'):
+        pd.eval('', engine=engine, parser=parser)
+
+
+def test_empty_string_raises():
+    for engine, parser in ENGINES_PARSERS:
+        yield check_empty_string_raises, engine, parser
+
+
 def check_more_than_one_expression_raises(engine, parser):
     tm.skip_if_no_ne(engine)
     with tm.assertRaisesRegexp(SyntaxError,
diff --git a/pandas/tests/frame/test_query_eval.py b/pandas/tests/frame/test_query_eval.py
index 85159de64..29662c5ad 100644
--- a/pandas/tests/frame/test_query_eval.py
+++ b/pandas/tests/frame/test_query_eval.py
@@ -147,6 +147,14 @@ class TestDataFrameEval(tm.TestCase, TestData):
         with tm.assertRaisesRegexp(ValueError, msg):
             df.query(111)
 
+    def test_query_empty_string(self):
+        # GH 13139
+        df = pd.DataFrame({'A': [1, 2, 3]})
+
+        msg = "expr cannot be an empty string"
+        with tm.assertRaisesRegexp(ValueError, msg):
+            df.query('')
+
     def test_eval_resolvers_as_list(self):
         # GH 14095
         df = DataFrame(randn(10, 2), columns=list('ab'))
