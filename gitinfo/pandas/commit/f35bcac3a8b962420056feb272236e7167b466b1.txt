commit f35bcac3a8b962420056feb272236e7167b466b1
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Sat Mar 14 08:50:16 2020 -0700

    TST: fix test creating invalid CategoricalBlock (#32519)
    
    * TST: fix test creating invalid CategoricalBlock
    
    * ValueError->AssertionError

diff --git a/pandas/core/internals/blocks.py b/pandas/core/internals/blocks.py
index f07fa99fe..83980e902 100644
--- a/pandas/core/internals/blocks.py
+++ b/pandas/core/internals/blocks.py
@@ -1739,6 +1739,10 @@ class ExtensionBlock(NonConsolidatableMixIn, Block):
         values = self._maybe_coerce_values(values)
         super().__init__(values, placement, ndim)
 
+        if self.ndim == 2 and len(self.mgr_locs) != 1:
+            # TODO(2DEA): check unnecessary with 2D EAs
+            raise AssertionError("block.size != values.size")
+
     def _maybe_coerce_values(self, values):
         """
         Unbox to an extension array.
diff --git a/pandas/tests/internals/test_internals.py b/pandas/tests/internals/test_internals.py
index 0bbea671b..1a7d5839d 100644
--- a/pandas/tests/internals/test_internals.py
+++ b/pandas/tests/internals/test_internals.py
@@ -540,6 +540,13 @@ class TestBlockManager:
         assert new_mgr.get("g").dtype == np.float64
         assert new_mgr.get("h").dtype == np.float16
 
+    def test_invalid_ea_block(self):
+        with pytest.raises(AssertionError, match="block.size != values.size"):
+            create_mgr("a: category; b: category")
+
+        with pytest.raises(AssertionError, match="block.size != values.size"):
+            create_mgr("a: category2; b: category2")
+
     def test_interleave(self):
 
         # self
@@ -552,14 +559,10 @@ class TestBlockManager:
         # will be converted according the actual dtype of the underlying
         mgr = create_mgr("a: category")
         assert mgr.as_array().dtype == "i8"
-        mgr = create_mgr("a: category; b: category")
-        assert mgr.as_array().dtype == "i8"
         mgr = create_mgr("a: category; b: category2")
         assert mgr.as_array().dtype == "object"
         mgr = create_mgr("a: category2")
         assert mgr.as_array().dtype == "object"
-        mgr = create_mgr("a: category2; b: category2")
-        assert mgr.as_array().dtype == "object"
 
         # combinations
         mgr = create_mgr("a: f8")
@@ -702,7 +705,7 @@ class TestBlockManager:
             "a:i8;b:f8",  # basic case
             "a:i8;b:f8;c:c8;d:b",  # many types
             "a:i8;e:dt;f:td;g:string",  # more types
-            "a:i8;b:category;c:category2;d:category2",  # categories
+            "a:i8;b:category;c:category2",  # categories
             "c:sparse;d:sparse_na;b:f8",  # sparse
         ],
     )
