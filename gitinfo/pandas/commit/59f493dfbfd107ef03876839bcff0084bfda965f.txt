commit 59f493dfbfd107ef03876839bcff0084bfda965f
Author: Chang She <chang@lambdafoundry.com>
Date:   Sun Apr 29 15:03:34 2012 -0400

    ENH: turn off redundant tick labels if sharex and sharey GH #1124

diff --git a/pandas/tests/test_graphics.py b/pandas/tests/test_graphics.py
index a799b31ac..41739326e 100644
--- a/pandas/tests/test_graphics.py
+++ b/pandas/tests/test_graphics.py
@@ -96,10 +96,35 @@ class TestDataFramePlots(unittest.TestCase):
                        index=MultiIndex.from_tuples(tuples))
         _check_plot_works(df.plot, use_index=True)
 
-        axes = df.plot(subplots=True)
+    @slow
+    def test_subplots(self):
+        df = DataFrame(np.random.rand(10, 3),
+                       index=list(string.ascii_letters[:10]))
+
+        axes = df.plot(subplots=True, sharex=True, legend=True)
+
         for ax in axes:
             self.assert_(ax.get_legend() is not None)
 
+        axes = df.plot(subplots=True, sharex=True)
+        for ax in axes[:-2]:
+            [self.assert_(not label.get_visible())
+             for label in ax.get_xticklabels()]
+            [self.assert_(label.get_visible())
+             for label in ax.get_yticklabels()]
+
+        [self.assert_(label.get_visible())
+         for label in axes[-1].get_xticklabels()]
+        [self.assert_(label.get_visible())
+         for label in axes[-1].get_yticklabels()]
+
+        axes = df.plot(subplots=True, sharex=False)
+        for ax in axes:
+            [self.assert_(label.get_visible())
+             for label in ax.get_xticklabels()]
+            [self.assert_(label.get_visible())
+             for label in ax.get_yticklabels()]
+
     @slow
     def test_plot_bar(self):
         df = DataFrame(np.random.randn(6, 4),
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index b5b985cee..4af3f7fef 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -1,11 +1,11 @@
 # being a bit too dynamic
 # pylint: disable=E1101
-
-from pandas.util.decorators import cache_readonly
-import pandas.core.common as com
+from itertools import izip
 
 import numpy as np
 
+from pandas.util.decorators import cache_readonly
+import pandas.core.common as com
 
 def scatter_matrix(frame, alpha=0.5, figsize=None, **kwds):
     """
@@ -1019,17 +1019,29 @@ def _subplots(nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True,
     for i in range(1, nplots):
         axarr[i] = fig.add_subplot(nrows, ncols, i+1, **subplot_kw)
 
+    if nplots > 1:
+        if sharex and nrows > 1:
+            for i, ax in enumerate(axarr):
+                if np.ceil(float(i + 1) / ncols) < nrows: # only last row
+                    [label.set_visible(False) for label in ax.get_xticklabels()]
+        if sharey and ncols > 1:
+            for i, ax in enumerate(axarr):
+                if (i % ncols) != 0: # only first column
+                    [label.set_visible(False) for label in ax.get_yticklabels()]
+
     if squeeze:
         # Reshape the array to have the final desired dimension (nrow,ncol),
         # though discarding unneeded dimensions that equal 1.  If we only have
         # one subplot, just return it instead of a 1-element array.
         if nplots==1:
-            return fig, axarr[0]
+            axes = axarr[0]
         else:
-            return fig, axarr.reshape(nrows, ncols).squeeze()
+            axes = axarr.reshape(nrows, ncols).squeeze()
     else:
         # returned axis array will be always 2-d, even if nrows=ncols=1
-        return fig, axarr.reshape(nrows, ncols)
+        axes = axarr.reshape(nrows, ncols)
+
+    return fig, axes
 
 if __name__ == '__main__':
     # import pandas.rpy.common as com
