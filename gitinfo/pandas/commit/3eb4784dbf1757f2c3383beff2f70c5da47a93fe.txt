commit 3eb4784dbf1757f2c3383beff2f70c5da47a93fe
Author: gfyoung <gfyoung17@gmail.com>
Date:   Thu Jun 9 07:35:59 2016 -0400

    BUG: don't raise on empty usecols
    
    Title is self-explanatory.
    
    Author: gfyoung <gfyoung17@gmail.com>
    
    Closes #13402 from gfyoung/empty-usecols-bug and squashes the following commits:
    
    8eed8d1 [gfyoung] BUG: don't raise on empty usecols

diff --git a/doc/source/whatsnew/v0.18.2.txt b/doc/source/whatsnew/v0.18.2.txt
index 8b8090177..105194e50 100644
--- a/doc/source/whatsnew/v0.18.2.txt
+++ b/doc/source/whatsnew/v0.18.2.txt
@@ -358,6 +358,7 @@ Bug Fixes
 - Bug in ``pd.read_csv()`` with ``engine='python'`` in which infinities of mixed-case forms were not being interpreted properly (:issue:`13274`)
 - Bug in ``pd.read_csv()`` with ``engine='python'`` in which trailing ``NaN`` values were not being parsed (:issue:`13320`)
 - Bug in ``pd.read_csv()`` that prevents ``usecols`` kwarg from accepting single-byte unicode strings (:issue:`13219`)
+- Bug in ``pd.read_csv()`` that prevents ``usecols`` from being an empty set (:issue:`13402`)
 
 
 
diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index 4e954979f..475eb7381 100755
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -944,7 +944,8 @@ def _validate_usecols_arg(usecols):
 
     if usecols is not None:
         usecols_dtype = lib.infer_dtype(usecols)
-        if usecols_dtype not in ('integer', 'string', 'unicode'):
+        if usecols_dtype not in ('empty', 'integer',
+                                 'string', 'unicode'):
             raise ValueError(msg)
 
     return usecols
diff --git a/pandas/io/tests/parser/usecols.py b/pandas/io/tests/parser/usecols.py
index 0d3ae95f0..8e34018df 100644
--- a/pandas/io/tests/parser/usecols.py
+++ b/pandas/io/tests/parser/usecols.py
@@ -354,3 +354,10 @@ a,b,c
 
         df = self.read_csv(StringIO(s), usecols=[u'あああ', u'いい'])
         tm.assert_frame_equal(df, expected)
+
+    def test_empty_usecols(self):
+        # should not raise
+        data = 'a,b,c\n1,2,3\n4,5,6'
+        expected = DataFrame()
+        result = self.read_csv(StringIO(data), usecols=set([]))
+        tm.assert_frame_equal(result, expected)
