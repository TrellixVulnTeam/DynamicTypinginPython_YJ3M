commit f2a349f083f5aed11bcce2f87a791481c0526f71
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Aug 11 18:08:57 2012 -0400

    BUG: fix another numpy 1.6 datetime64 concat bug close #1681

diff --git a/RELEASE.rst b/RELEASE.rst
index 218461841..d56932dc5 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -59,6 +59,7 @@ pandas 0.8.2
   - Fix field access with  UTC->local conversion on unsorted arrays (#1756)
   - Fix isnull handling of array-like (list) inputs (#1755)
   - Fix regression in handling of Series in Series constructor (#1671)
+  - Fix another NumPy datetime64 concatenate bug in DataFrame.append (#1681)
 
 pandas 0.8.1
 ============
diff --git a/pandas/core/common.py b/pandas/core/common.py
index d6adc4328..435f09830 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -928,10 +928,14 @@ else:
 
 _NS_DTYPE = np.dtype('M8[ns]')
 
-def _concat_compat(to_concat):
+def _concat_compat(to_concat, axis=0):
+    # filter empty arrays
+    to_concat = [x for x in to_concat if x.shape[axis] > 0]
+
     if all(x.dtype == _NS_DTYPE for x in to_concat):
         # work around NumPy 1.6 bug
-        new_values = np.concatenate([x.view(np.int64) for x in to_concat])
+        new_values = np.concatenate([x.view(np.int64) for x in to_concat],
+                                    axis=axis)
         return new_values.view(_NS_DTYPE)
     else:
-        return np.concatenate(to_concat)
+        return np.concatenate(to_concat, axis=axis)
diff --git a/pandas/tools/merge.py b/pandas/tools/merge.py
index 2d3e459e0..fa9517dad 100644
--- a/pandas/tools/merge.py
+++ b/pandas/tools/merge.py
@@ -13,7 +13,7 @@ from pandas.core.index import (Index, MultiIndex, _get_combined_index,
                                _ensure_index, _get_consensus_names,
                                _all_indexes_same)
 from pandas.core.internals import (IntBlock, BoolBlock, BlockManager,
-                                   DatetimeBlock, make_block, _consolidate)
+                                   make_block, _consolidate)
 from pandas.util.decorators import cache_readonly, Appender, Substitution
 
 from pandas.sparse.frame import SparseDataFrame
@@ -914,7 +914,7 @@ class _Concatenator(object):
 
     def get_result(self):
         if self._is_series and self.axis == 0:
-            new_data = np.concatenate([x.values for x in self.objs])
+            new_data = com._concat_compat([x.values for x in self.objs])
             name = com._consensus_name_attr(self.objs)
             return Series(new_data, index=self.new_axes[0], name=name)
         elif self._is_series:
@@ -985,14 +985,7 @@ class _Concatenator(object):
 
     def _concat_blocks(self, blocks):
         values_list = [b.values for b in blocks if b is not None]
-        if isinstance(blocks[0], DatetimeBlock):
-            # hack around NumPy 1.6 bug
-            concat_values = np.concatenate([x.view(np.int64)
-                                            for x in values_list],
-                                           axis=self.axis)
-            concat_values = concat_values.view(np.dtype('M8[ns]'))
-        else:
-            concat_values = np.concatenate(values_list, axis=self.axis)
+        concat_values = com._concat_compat(values_list)
 
         if self.axis > 0:
             # Not safe to remove this check, need to profile
@@ -1004,8 +997,8 @@ class _Concatenator(object):
             offsets = np.r_[0, np.cumsum([len(x._data.axes[0]) for
                                             x in self.objs])]
             indexer = np.concatenate([offsets[i] + b.ref_locs
-                                        for i, b in enumerate(blocks)
-                                        if b is not None])
+                                      for i, b in enumerate(blocks)
+                                      if b is not None])
             if self.ignore_index:
                 concat_items = indexer
             else:
@@ -1050,7 +1043,7 @@ class _Concatenator(object):
 
         # this method only gets called with axis >= 1
         assert(self.axis >= 1)
-        return np.concatenate(to_concat, axis=self.axis - 1)
+        return com._concat_compat(to_concat, axis=self.axis - 1)
 
     def _get_result_dim(self):
         if self._is_series and self.axis == 1:
@@ -1159,7 +1152,8 @@ def _make_concat_multiindex(indexes, keys, levels=None, names=None):
                 try:
                     i = level.get_loc(key)
                 except KeyError:
-                    raise ValueError('Key %s not in level %s' % (str(key), str(level)))
+                    raise ValueError('Key %s not in level %s'
+                                     % (str(key), str(level)))
 
                 to_concat.append(np.repeat(i, len(index)))
             label_list.append(np.concatenate(to_concat))
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 923b14e3b..22cfa70e3 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -1253,6 +1253,15 @@ class TestDatetimeIndex(unittest.TestCase):
         result = monthly_group.mean()
         self.assert_(isinstance(result.index[0], tuple))
 
+    def test_append_numpy_bug_1681(self):
+        # another datetime64 bug
+        dr = date_range('2011/1/1', '2012/1/1', freq='W-FRI')
+        a = DataFrame()
+        c = DataFrame({'A': 'foo', 'B': dr}, index=dr)
+
+        result = a.append(c)
+        self.assert_((result['B'] == dr).all())
+
 class TestLegacySupport(unittest.TestCase):
 
     @classmethod
