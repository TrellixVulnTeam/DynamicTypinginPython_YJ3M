commit 6a5388039d76c82caf907028e6cae087e635c7a9
Author: Chang She <changshe@gmail.com>
Date:   Sun Aug 19 09:49:25 2012 -0400

    ENH: to_period converts BQS,QS,BQ to Q and similarly for annual

diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 82b1cab7d..f3dc28bd4 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -7,7 +7,7 @@ import numpy as np
 
 from pandas.core.common import isnull
 from pandas.core.index import Index, Int64Index
-from pandas.tseries.frequencies import infer_freq, to_offset
+from pandas.tseries.frequencies import infer_freq, to_offset, get_period_alias
 from pandas.tseries.offsets import DateOffset, generate_range, Tick
 from pandas.tseries.tools import parse_time_string, normalize_date
 from pandas.util.decorators import cache_readonly
@@ -683,7 +683,7 @@ class DatetimeIndex(Int64Index):
             raise ValueError(msg)
 
         if freq is None:
-            freq = self.freqstr
+            freq = get_period_alias(self.freqstr)
 
         return PeriodIndex(self.values, freq=freq)
 
diff --git a/pandas/tseries/tests/test_period.py b/pandas/tseries/tests/test_period.py
index 1a82b9b08..ebea4cdb9 100644
--- a/pandas/tseries/tests/test_period.py
+++ b/pandas/tseries/tests/test_period.py
@@ -1568,6 +1568,27 @@ class TestPeriodIndex(TestCase):
             result = stamps.to_period(freq)
             self.assert_(rng.equals(result))
 
+    def test_to_period_quarterlyish(self):
+        offsets = ['BQ', 'QS', 'BQS']
+        for off in offsets:
+            rng = date_range('01-Jan-2012', periods=8, freq=off)
+            prng = rng.to_period()
+            self.assert_(prng.freq == 'Q-DEC')
+
+    def test_to_period_annualish(self):
+        offsets = ['BA', 'AS', 'BAS']
+        for off in offsets:
+            rng = date_range('01-Jan-2012', periods=8, freq=off)
+            prng = rng.to_period()
+            self.assert_(prng.freq == 'A-DEC')
+
+    def test_to_period_monthish(self):
+        offsets = ['MS', 'EOM', 'BM']
+        for off in offsets:
+            rng = date_range('01-Jan-2012', periods=8, freq=off)
+            prng = rng.to_period()
+            self.assert_(prng.freq == 'M')
+
     def test_no_multiples(self):
         self.assertRaises(ValueError, period_range, '1989Q3', periods=10,
                           freq='2Q')
