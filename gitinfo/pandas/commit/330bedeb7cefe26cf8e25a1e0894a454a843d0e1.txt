commit 330bedeb7cefe26cf8e25a1e0894a454a843d0e1
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Fri Sep 13 13:13:45 2019 -0700

    CLN: Exception in core.dtypes (#28387)

diff --git a/pandas/core/arrays/sparse.py b/pandas/core/arrays/sparse.py
index 201174b6b..24dafd11a 100644
--- a/pandas/core/arrays/sparse.py
+++ b/pandas/core/arrays/sparse.py
@@ -245,10 +245,10 @@ class SparseDtype(ExtensionDtype):
         if string.startswith("Sparse"):
             try:
                 sub_type, has_fill_value = cls._parse_subtype(string)
-                result = SparseDtype(sub_type)
-            except Exception:
+            except ValueError:
                 raise TypeError(msg)
             else:
+                result = SparseDtype(sub_type)
                 msg = (
                     "Could not construct SparseDtype from '{}'.\n\nIt "
                     "looks like the fill_value in the string is not "
diff --git a/pandas/core/dtypes/common.py b/pandas/core/dtypes/common.py
index f75493be2..cf1a602e9 100644
--- a/pandas/core/dtypes/common.py
+++ b/pandas/core/dtypes/common.py
@@ -2049,10 +2049,8 @@ def pandas_dtype(dtype):
     # raise a consistent TypeError if failed
     try:
         npdtype = np.dtype(dtype)
-    except Exception:
-        # we don't want to force a repr of the non-string
-        if not isinstance(dtype, str):
-            raise TypeError("data type not understood")
+    except SyntaxError:
+        # np.dtype uses `eval` which can raise SyntaxError
         raise TypeError("data type '{}' not understood".format(dtype))
 
     # Any invalid dtype (such as pd.Timestamp) should raise an error.
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 1ff340032..4f3f639de 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -1791,7 +1791,7 @@ class IndexCol:
         # making an Index instance could throw a number of different errors
         try:
             self.values = Index(values, **kwargs)
-        except Exception:  # noqa: E722
+        except Exception:
 
             # if the output freq is different that what we recorded,
             # it should be None (see also 'doc example part 2')
diff --git a/pandas/tests/dtypes/test_common.py b/pandas/tests/dtypes/test_common.py
index 36548f351..db9f647e0 100644
--- a/pandas/tests/dtypes/test_common.py
+++ b/pandas/tests/dtypes/test_common.py
@@ -678,7 +678,7 @@ def test__get_dtype_sparse():
         (None, "Cannot deduce dtype from null object"),
         (1, "data type not understood"),
         (1.2, "data type not understood"),
-        ("random string", "data type 'random string' not understood"),
+        ("random string", 'data type "random string" not understood'),
         (pd.DataFrame([1, 2]), "data type not understood"),
     ],
 )
diff --git a/pandas/tests/indexes/interval/test_astype.py b/pandas/tests/indexes/interval/test_astype.py
index 91022fef1..863b8c908 100644
--- a/pandas/tests/indexes/interval/test_astype.py
+++ b/pandas/tests/indexes/interval/test_astype.py
@@ -67,7 +67,7 @@ class Base:
             index.astype(dtype)
 
     def test_astype_invalid_dtype(self, index):
-        msg = "data type 'fake_dtype' not understood"
+        msg = 'data type "fake_dtype" not understood'
         with pytest.raises(TypeError, match=msg):
             index.astype("fake_dtype")
 
diff --git a/pandas/tests/indexes/interval/test_construction.py b/pandas/tests/indexes/interval/test_construction.py
index 82a10d24d..98c1f7c6c 100644
--- a/pandas/tests/indexes/interval/test_construction.py
+++ b/pandas/tests/indexes/interval/test_construction.py
@@ -164,7 +164,7 @@ class Base:
             constructor(dtype="int64", **filler)
 
         # invalid dtype
-        msg = "data type 'invalid' not understood"
+        msg = 'data type "invalid" not understood'
         with pytest.raises(TypeError, match=msg):
             constructor(dtype="invalid", **filler)
 
diff --git a/pandas/tests/io/parser/test_dtypes.py b/pandas/tests/io/parser/test_dtypes.py
index 92c91565e..a68d46e8a 100644
--- a/pandas/tests/io/parser/test_dtypes.py
+++ b/pandas/tests/io/parser/test_dtypes.py
@@ -79,7 +79,7 @@ one,two
 3,4.5
 4,5.5"""
 
-    with pytest.raises(TypeError, match="data type 'foo' not understood"):
+    with pytest.raises(TypeError, match='data type "foo" not understood'):
         parser.read_csv(StringIO(data), dtype={"one": "foo", 1: "int"})
 
 
