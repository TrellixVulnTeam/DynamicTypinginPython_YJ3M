commit e70bcf5914512ce9b70189827febeb56687608e0
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Aug 25 17:29:46 2011 -0400

    TST: don't have time to figure out how to make pandas.test() work so removing it

diff --git a/pandas/__init__.py b/pandas/__init__.py
index fe92f72b7..7cd5468ea 100644
--- a/pandas/__init__.py
+++ b/pandas/__init__.py
@@ -15,48 +15,3 @@ from pandas.io.parsers import read_csv, read_table, ExcelFile
 from pandas.io.pytables import HDFStore
 from pandas.stats.api import *
 from pandas.util.testing import debug
-
-from numpy.testing import Tester
-
-class NoseWrapper(Tester): # pragma: no cover
-    '''
-    This is simply a monkey patch for numpy.testing.Tester, so that extra_argv
-    can be changed from its default None to ['--exe'] so that the tests can be
-    run the same across platforms.
-    '''
-    def test(self, label='fast', verbose=1, extra_argv=['--exe'], doctests=False,
-             coverage=False):
-        ''' Run tests for module using nose
-
-        %(test_header)s
-        doctests : boolean
-            If True, run doctests in module, default False
-        coverage : boolean
-            If True, report coverage of NumPy code, default False
-            (Requires the coverage module:
-             http://nedbatchelder.com/code/modules/coverage.html)
-        '''
-
-        # cap verbosity at 3 because nose becomes *very* verbose beyond that
-        verbose = min(verbose, 3)
-
-        from numpy.testing import utils
-        utils.verbose = verbose
-
-        if doctests:
-            print "Running unit tests and doctests for %s" % self.package_name
-        else:
-            print "Running unit tests for %s" % self.package_name
-
-        self._show_system_info()
-
-        # reset doctest state on every run
-        import doctest
-        doctest.master = None
-
-        argv, plugins = self.prepare_test_args(label, verbose, extra_argv,
-                                               doctests, coverage)
-        from numpy.testing.noseclasses import NumpyTestProgram
-        t = NumpyTestProgram(argv=argv, exit=False, plugins=plugins)
-        return t.result
-test = NoseWrapper().test
