commit e5a49ffdc367aa2d9982135a25117e3ff107bf10
Author: jreback <jeff@reback.net>
Date:   Thu Dec 19 20:19:33 2013 -0500

    DOC: io.rst top-level can now click on read/write methods to acess the appropriate sections
    
    DOC: cleaned v0.13.txt

diff --git a/doc/source/io.rst b/doc/source/io.rst
index 3e3ced2b8..48fe6e24d 100644
--- a/doc/source/io.rst
+++ b/doc/source/io.rst
@@ -32,31 +32,31 @@ IO Tools (Text, CSV, HDF5, ...)
 The Pandas I/O api is a set of top level ``reader`` functions accessed like ``pd.read_csv()`` that generally return a ``pandas``
 object.
 
-    * ``read_csv``
-    * ``read_excel``
-    * ``read_hdf``
-    * ``read_sql``
-    * ``read_json``
-    * ``read_msgpack`` (experimental)
-    * ``read_html``
-    * ``read_gbq`` (experimental)
-    * ``read_stata``
-    * ``read_clipboard``
-    * ``read_pickle``
+    * :ref:`read_csv<io.read_csv_table>`
+    * :ref:`read_excel<io.excel>`
+    * :ref:`read_hdf<io.hdf5>`
+    * :ref:`read_sql<io.sql>`
+    * :ref:`read_json<io.json_reader>`
+    * :ref:`read_msgpack<io.msgpack>` (experimental)
+    * :ref:`read_html<io.read_html>`
+    * :ref:`read_gbq<io.bigquery>` (experimental)
+    * :ref:`read_stata<io.stata_reader>`
+    * :ref:`read_clipboard<io.clipboard>`
+    * :ref:`read_pickle<io.pickle>`
 
 The corresponding ``writer`` functions are object methods that are accessed like ``df.to_csv()``
 
-    * ``to_csv``
-    * ``to_excel``
-    * ``to_hdf``
-    * ``to_sql``
-    * ``to_json``
-    * ``to_msgpack`` (experimental)
-    * ``to_html``
-    * ``to_gbq`` (experimental)
-    * ``to_stata``
-    * ``to_clipboard``
-    * ``to_pickle``
+    * :ref:`to_csv<io.store_in_csv>`
+    * :ref:`to_excel<io.excel>`
+    * :ref:`to_hdf<io.hdf5>`
+    * :ref:`to_sql<io.sql>`
+    * :ref:`to_json<io.json_writer>`
+    * :ref:`to_msgpack<io.msgpack>` (experimental)
+    * :ref:`to_html<io.html>`
+    * :ref:`to_gbq<io.bigquery>` (experimental)
+    * :ref:`to_stata<io.stata_writer>`
+    * :ref:`to_clipboard<io.clipboard>`
+    * :ref:`to_pickle<io.pickle>`
 
 .. _io.read_csv_table:
 
@@ -979,11 +979,11 @@ Specifying ``iterator=True`` will also return the ``TextFileReader`` object:
    os.remove('tmp.sv')
    os.remove('tmp2.sv')
 
+.. _io.store_in_csv:
+
 Writing to CSV format
 ~~~~~~~~~~~~~~~~~~~~~
 
-.. _io.store_in_csv:
-
 The Series and DataFrame objects have an instance method ``to_csv`` which
 allows storing the contents of the object as a comma-separated-values file. The
 function takes a number of arguments. Only the first is required.
@@ -1032,13 +1032,14 @@ The Series object also has a ``to_string`` method, but with only the ``buf``,
 ``na_rep``, ``float_format`` arguments. There is also a ``length`` argument
 which, if set to ``True``, will additionally output the length of the Series.
 
+.. _io.json:
 
 JSON
 ----
 
 Read and write ``JSON`` format files and strings.
 
-.. _io.json:
+.. _io.json_writer:
 
 Writing JSON
 ~~~~~~~~~~~~
@@ -1229,6 +1230,8 @@ which can be dealt with by specifying a simple ``default_handler``:
       return obj.total_seconds()
    dftd.to_json(default_handler=my_handler)
 
+.. _io.json_reader:
+
 Reading JSON
 ~~~~~~~~~~~~
 
@@ -1460,6 +1463,8 @@ into a flat table.
 HTML
 ----
 
+.. _io.read_html:
+
 Reading HTML Content
 ~~~~~~~~~~~~~~~~~~~~~~
 
@@ -1469,8 +1474,6 @@ Reading HTML Content
    <html-gotchas>` regarding the issues surrounding the
    BeautifulSoup4/html5lib/lxml parsers.
 
-.. _io.read_html:
-
 .. versionadded:: 0.12.0
 
 The top-level :func:`~pandas.io.html.read_html` function can accept an HTML
@@ -1617,11 +1620,11 @@ succeeds, the function will return*.
    dfs = read_html(url, 'Metcalf Bank', index_col=0, flavor=['lxml', 'bs4'])
 
 
+.. _io.html:
+
 Writing to HTML files
 ~~~~~~~~~~~~~~~~~~~~~~
 
-.. _io.html:
-
 ``DataFrame`` objects have an instance method ``to_html`` which renders the
 contents of the ``DataFrame`` as an HTML table. The function arguments are as
 in the method ``to_string`` described above.
diff --git a/doc/source/timeseries.rst b/doc/source/timeseries.rst
index b43a8fff4..d01930e97 100644
--- a/doc/source/timeseries.rst
+++ b/doc/source/timeseries.rst
@@ -1247,7 +1247,7 @@ Time Deltas & Reductions
 
 .. warning::
 
-   A numeric reduction operation for ``timedelta64[ns]`` will return a single-element ``Series`` of
+   A numeric reduction operation for ``timedelta64[ns]`` can return a single-element ``Series`` of
    dtype ``timedelta64[ns]``.
 
 You can do numeric reduction operations on timedeltas.
diff --git a/doc/source/v0.13.0.txt b/doc/source/v0.13.0.txt
index 720150015..3bc5b1c4f 100644
--- a/doc/source/v0.13.0.txt
+++ b/doc/source/v0.13.0.txt
@@ -58,9 +58,12 @@ API changes
       # and all methods take an inplace kwarg - but return None
       index.set_names(["bob", "cranberry"], inplace=True)
 
-- **All** division with ``NDFrame`` - likes is now truedivision, regardless
-  of the future import. You can use ``//`` and ``floordiv`` to do integer
-  division.
+- **All** division with ``NDFrame`` objects is now *truedivision*, regardless
+  of the future import. This means that operating on pandas objects will by default
+  use *floating point* division, and return a floating point dtype.
+  You can use ``//`` and ``floordiv`` to do integer division.
+
+  Integer division
 
   .. code-block:: python
 
@@ -71,8 +74,20 @@ API changes
       In [5]: arr / arr2
       Out[5]: array([0, 0, 1, 4])
 
-      In [6]: pd.Series(arr) / pd.Series(arr2) # no future import required
+      In [6]: Series(arr) // Series(arr2)
       Out[6]:
+      0    0
+      1    0
+      2    1
+      3    4
+      dtype: int64
+
+  True Division
+
+  .. code-block:: python
+
+      In [7]: pd.Series(arr) / pd.Series(arr2) # no future import required
+      Out[7]:
       0    0.200000
       1    0.666667
       2    1.500000
@@ -146,6 +161,7 @@ These were announced changes in 0.12 or prior that are taking effect as of 0.13.
 - Remove deprecated ``set_printoptions/reset_printoptions`` (:issue:`3046`)
 - Remove deprecated ``_verbose_info`` (:issue:`3215`)
 - Remove deprecated ``read_clipboard/to_clipboard/ExcelFile/ExcelWriter`` from ``pandas.io.parsers`` (:issue:`3717`)
+  These are available as functions in the main pandas namespace (e.g. ``pd.read_clipboard``)
 - default for ``tupleize_cols`` is now ``False`` for both ``to_csv`` and ``read_csv``. Fair warning in 0.12 (:issue:`3604`)
 
 Deprecations
@@ -169,7 +185,7 @@ Indexing API Changes
 ~~~~~~~~~~~~~~~~~~~~
 
 Prior to 0.13, it was impossible to use a label indexer (``.loc/.ix``) to set a value that
-was not contained in the index of a particular axis. (:issue:`2578`). See more :ref:`the docs<indexing.basics.partial_setting>`
+was not contained in the index of a particular axis. (:issue:`2578`). See :ref:`the docs<indexing.basics.partial_setting>`
 
 In the ``Series`` case this is effectively an appending operation
 
@@ -420,7 +436,7 @@ Enhancements
      get_dummies([1, 2, np.nan], dummy_na=True)
 
 
-- ``timedelta64[ns]`` operations. See :ref:`the docs<timeseries.timedeltas_convert>` for the docs.
+- ``timedelta64[ns]`` operations. See :ref:`the docs<timeseries.timedeltas_convert>`.
 
   .. warning::
 
@@ -478,8 +494,7 @@ Enhancements
      td.fillna(0)
      td.fillna(timedelta(days=1,seconds=5))
 
-  You can do numeric reduction operations on timedeltas. Note that these will return
-  a single-element Series.
+  You can do numeric reduction operations on timedeltas.
 
   .. ipython:: python
 
@@ -584,7 +599,7 @@ Enhancements
 - ``tz_localize`` can infer a fall daylight savings transition based on the structure
   of the unlocalized data (:issue:`4230`), see :ref:`the docs<timeseries.timezone>`
 
-- DatetimeIndex is now in the API documentation, see :ref:`the docs<api.datetimeindex>`
+- ``DatetimeIndex`` is now in the API documentation, see :ref:`the docs<api.datetimeindex>`
 
 - :meth:`~pandas.io.json.json_normalize` is a new method to allow you to create a flat table
   from semi-structured JSON data. See :ref:`the docs<io.json_normalize>` (:issue:`1067`)
@@ -593,11 +608,14 @@ Enhancements
 
 - Python csv parser now supports usecols (:issue:`4335`)
 
-- DataFrame has a new ``interpolate`` method, similar to Series (:issue:`4434`, :issue:`1892`)
-- Added ``LastWeekOfMonth`` DateOffset (:issue:`4637`)
-- Added ``FY5253``, and ``FY5253Quarter`` DateOffsets (:issue:`4511`)
+- Frequencies gained several new offsets:
+
+  * ``LastWeekOfMonth`` (:issue:`4637`)
+  * ``FY5253``, and ``FY5253Quarter`` (:issue:`4511`)
 
 
+- DataFrame has a new ``interpolate`` method, similar to Series (:issue:`4434`, :issue:`1892`)
+
   .. ipython:: python
 
       df = DataFrame({'A': [1, 2.1, np.nan, 4.7, 5.6, 6.8],
@@ -618,12 +636,10 @@ Enhancements
     ser = Series([1, 3, np.nan, np.nan, np.nan, 11])
     ser.interpolate(limit=2)
 
-- Added ``wide_to_long`` panel data convenience function.
+- Added ``wide_to_long`` panel data convenience function. See :ref:`the docs<reshaping.melt>`.
 
   .. ipython:: python
 
-    import pandas as pd
-    import numpy as np
     np.random.seed(123)
     df = pd.DataFrame({"A1970" : {0 : "a", 1 : "b", 2 : "c"},
                        "A1980" : {0 : "d", 1 : "e", 2 : "f"},
@@ -887,15 +903,8 @@ to unify methods and behaviors. Series formerly subclassed directly from
 
 - Reindex called with no arguments will now return a copy of the input object
 
-- Series now inherits from ``NDFrame`` rather than directly from ``ndarray``.
-  There are several minor changes that affect the API.
-
-  - numpy functions that do not support the array interface will now
-    return ``ndarrays`` rather than series, e.g. ``np.diff`` and ``np.ones_like``
-  - ``Series(0.5)`` would previously return the scalar ``0.5``, this is no
-    longer supported
-  - ``TimeSeries`` is now an alias for ``Series``. the property ``is_time_series``
-    can be used to distinguish (if desired)
+- ``TimeSeries`` is now an alias for ``Series``. the property ``is_time_series``
+  can be used to distinguish (if desired)
 
 - Refactor of Sparse objects to use BlockManager
 
