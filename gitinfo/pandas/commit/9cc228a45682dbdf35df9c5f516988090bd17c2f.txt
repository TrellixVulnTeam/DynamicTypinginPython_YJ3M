commit 9cc228a45682dbdf35df9c5f516988090bd17c2f
Author: Chang She <changshe@gmail.com>
Date:   Thu Dec 13 16:56:15 2012 -0500

    TST: refactoring to speed up test suite

diff --git a/pandas/stats/tests/test_moments.py b/pandas/stats/tests/test_moments.py
index 38442005e..7d25fe342 100644
--- a/pandas/stats/tests/test_moments.py
+++ b/pandas/stats/tests/test_moments.py
@@ -20,6 +20,8 @@ N, K = 100, 10
 
 class TestMoments(unittest.TestCase):
 
+    _multiprocess_can_split_ = True
+
     _nan_locs = np.arange(20, 40)
     _inf_locs = np.array([])
 
diff --git a/pandas/stats/tests/test_ols.py b/pandas/stats/tests/test_ols.py
index bfad17a18..60ec67643 100644
--- a/pandas/stats/tests/test_ols.py
+++ b/pandas/stats/tests/test_ols.py
@@ -10,6 +10,7 @@ from datetime import datetime
 import unittest
 import nose
 import numpy as np
+from numpy.testing.decorators import slow
 
 from pandas import date_range, bdate_range
 from pandas.core.panel import Panel
@@ -52,6 +53,8 @@ def _compare_moving_ols(model1, model2):
 
 class TestOLS(BaseTest):
 
+    _multiprocess_can_split_ = True
+
     # TODO: Add tests for OLS y predict
     # TODO: Right now we just check for consistency between full-sample and
     # rolling/expanding results of the panel OLS.  We should also cross-check
@@ -69,12 +72,18 @@ class TestOLS(BaseTest):
         if not _have_statsmodels:
             raise nose.SkipTest
 
-    def testOLSWithDatasets(self):
+    def testOLSWithDatasets_ccard(self):
         self.checkDataSet(sm.datasets.ccard.load(), skip_moving=True)
         self.checkDataSet(sm.datasets.cpunish.load(), skip_moving=True)
         self.checkDataSet(sm.datasets.longley.load(), skip_moving=True)
         self.checkDataSet(sm.datasets.stackloss.load(), skip_moving=True)
+
+    @slow
+    def testOLSWithDatasets_copper(self):
         self.checkDataSet(sm.datasets.copper.load())
+
+    @slow
+    def testOLSWithDatasets_scotland(self):
         self.checkDataSet(sm.datasets.scotland.load())
 
         # degenerate case fails on some platforms
@@ -233,6 +242,9 @@ class TestOLS(BaseTest):
         summary = repr(model)
 
 class TestOLSMisc(unittest.TestCase):
+
+    _multiprocess_can_split_ = True
+
     '''
     For test coverage with faux data
     '''
@@ -446,6 +458,8 @@ class TestOLSMisc(unittest.TestCase):
 
 class TestPanelOLS(BaseTest):
 
+    _multiprocess_can_split_ = True
+
     FIELDS = ['beta', 'df', 'df_model', 'df_resid', 'f_stat',
               'p_value', 'r2', 'r2_adj', 'rmse', 'std_err',
               't_stat', 'var_beta']
@@ -765,6 +779,8 @@ def _period_slice(panelModel, i):
 
 class TestOLSFilter(unittest.TestCase):
 
+    _multiprocess_can_split_ = True
+
     def setUp(self):
         date_index = date_range(datetime(2009, 12, 11), periods=3,
                                 freq=datetools.bday)
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index d252b8eb6..b60c1d440 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -1738,12 +1738,12 @@ class TestGroupBy(unittest.TestCase):
         assert_frame_equal(result, expected)
 
     def test_rank_apply(self):
-        lev1 = np.array([rands(10) for _ in xrange(1000)], dtype=object)
+        lev1 = np.array([rands(10) for _ in xrange(100)], dtype=object)
         lev2 = np.array([rands(10) for _ in xrange(130)], dtype=object)
-        lab1 = np.random.randint(0, 1000, size=5000)
-        lab2 = np.random.randint(0, 130, size=5000)
+        lab1 = np.random.randint(0, 100, size=500)
+        lab2 = np.random.randint(0, 130, size=500)
 
-        df = DataFrame({'value' : np.random.randn(5000),
+        df = DataFrame({'value' : np.random.randn(500),
                         'key1' : lev1.take(lab1),
                         'key2' : lev2.take(lab2)})
 
diff --git a/pandas/tests/test_panel4d.py b/pandas/tests/test_panel4d.py
index 39d7d5fd0..088e9a9fa 100644
--- a/pandas/tests/test_panel4d.py
+++ b/pandas/tests/test_panel4d.py
@@ -29,13 +29,6 @@ def add_nans(panel4d):
         panel = panel4d[label]
         tm.add_nans(panel)
 
-def _skip_if_no_scipy():
-    try:
-        import scipy.stats
-    except ImportError:
-        raise nose.SkipTest
-
-
 class SafeForLongAndSparse(object):
 
     _multiprocess_can_split_ = True
@@ -74,8 +67,11 @@ class SafeForLongAndSparse(object):
         self._check_stat_op('max', np.max)
 
     def test_skew(self):
-        _skip_if_no_scipy()
-        from scipy.stats import skew
+        try:
+            from scipy.stats import skew
+        except ImportError:
+            raise nose.SkipTest
+
         def this_skew(x):
             if len(x) < 3:
                 return np.nan
@@ -541,7 +537,8 @@ class CheckIndexing(object):
         res3 = self.panel4d.set_value('l4', 'ItemE', 'foobar', 'baz', 5)
         self.assert_(com.is_float_dtype(res3['l4'].values))
 
-class TestPanel4d(unittest.TestCase, CheckIndexing, SafeForSparse, SafeForLongAndSparse):
+class TestPanel4d(unittest.TestCase, CheckIndexing, SafeForSparse,
+                  SafeForLongAndSparse):
 
     _multiprocess_can_split_ = True
 
@@ -550,7 +547,7 @@ class TestPanel4d(unittest.TestCase, CheckIndexing, SafeForSparse, SafeForLongAn
         assert_panel4d_equal(x, y)
 
     def setUp(self):
-        self.panel4d = tm.makePanel4D()
+        self.panel4d = tm.makePanel4D(nper=8)
         add_nans(self.panel4d)
 
     def test_constructor(self):
@@ -900,7 +897,7 @@ class TestPanel4d(unittest.TestCase, CheckIndexing, SafeForSparse, SafeForLongAn
                          [1.5, np.nan, 3.],
                          [1.5, np.nan, 3.],
                          [1.5, np.nan, 3.]]]])
-        
+
         other = Panel4D([[[[3.6, 2., np.nan]],
                           [[np.nan, np.nan, 7]]]])
 
@@ -914,7 +911,7 @@ class TestPanel4d(unittest.TestCase, CheckIndexing, SafeForSparse, SafeForLongAn
                               [1.5, np.nan, 3.],
                               [1.5, np.nan, 3.],
                               [1.5, np.nan, 3.]]]])
-        
+
         assert_panel4d_equal(p4d, expected)
 
     def test_filter(self):
@@ -1053,5 +1050,6 @@ class TestPanel4d(unittest.TestCase, CheckIndexing, SafeForSparse, SafeForLongAn
 
 if __name__ == '__main__':
     import nose
-    nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
+    nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure',
+                         '--with-timer'],
                    exit=False)
diff --git a/pandas/tests/test_panelnd.py b/pandas/tests/test_panelnd.py
index 6cf0afe11..1debfd54a 100644
--- a/pandas/tests/test_panelnd.py
+++ b/pandas/tests/test_panelnd.py
@@ -27,73 +27,83 @@ class TestPanelnd(unittest.TestCase):
 
         # create a 4D
         Panel4D = panelnd.create_nd_panel_factory(
-            klass_name   = 'Panel4D', 
-            axis_orders  = ['labels','items','major_axis','minor_axis'], 
-            axis_slices  = { 'items' : 'items', 'major_axis' : 'major_axis', 'minor_axis' : 'minor_axis' },
+            klass_name   = 'Panel4D',
+            axis_orders  = ['labels','items','major_axis','minor_axis'],
+            axis_slices  = { 'items' : 'items', 'major_axis' : 'major_axis',
+                             'minor_axis' : 'minor_axis' },
             slicer       = Panel,
             axis_aliases = { 'major' : 'major_axis', 'minor' : 'minor_axis' },
             stat_axis    = 2)
-    
+
         p4d = Panel4D(dict(L1 = tm.makePanel(), L2 = tm.makePanel()))
 
     def test_4d_construction_alt(self):
 
         # create a 4D
         Panel4D = panelnd.create_nd_panel_factory(
-            klass_name   = 'Panel4D', 
-            axis_orders  = ['labels','items','major_axis','minor_axis'], 
-            axis_slices  = { 'items' : 'items', 'major_axis' : 'major_axis', 'minor_axis' : 'minor_axis' },
+            klass_name   = 'Panel4D',
+            axis_orders  = ['labels','items','major_axis','minor_axis'],
+            axis_slices  = { 'items' : 'items', 'major_axis' : 'major_axis',
+                             'minor_axis' : 'minor_axis' },
             slicer       = 'Panel',
             axis_aliases = { 'major' : 'major_axis', 'minor' : 'minor_axis' },
             stat_axis    = 2)
-    
+
         p4d = Panel4D(dict(L1 = tm.makePanel(), L2 = tm.makePanel()))
 
     def test_4d_construction_error(self):
 
         # create a 4D
-        self.assertRaises(Exception, 
+        self.assertRaises(Exception,
                           panelnd.create_nd_panel_factory,
-                          klass_name   = 'Panel4D', 
-                          axis_orders  = ['labels','items','major_axis','minor_axis'], 
-                          axis_slices  = { 'items' : 'items', 'major_axis' : 'major_axis', 'minor_axis' : 'minor_axis' },
+                          klass_name   = 'Panel4D',
+                          axis_orders  = ['labels', 'items', 'major_axis',
+                                          'minor_axis'],
+                          axis_slices  = { 'items' : 'items',
+                                           'major_axis' : 'major_axis',
+                                           'minor_axis' : 'minor_axis' },
                           slicer       = 'foo',
-                          axis_aliases = { 'major' : 'major_axis', 'minor' : 'minor_axis' },
+                          axis_aliases = { 'major' : 'major_axis',
+                                           'minor' : 'minor_axis' },
                           stat_axis    = 2)
-    
+
 
     def test_5d_construction(self):
 
         # create a 4D
         Panel4D = panelnd.create_nd_panel_factory(
-            klass_name   = 'Panel4D', 
-            axis_orders  = ['labels1','items','major_axis','minor_axis'], 
-            axis_slices  = { 'items' : 'items', 'major_axis' : 'major_axis', 'minor_axis' : 'minor_axis' },
+            klass_name   = 'Panel4D',
+            axis_orders  = ['labels1','items','major_axis','minor_axis'],
+            axis_slices  = { 'items' : 'items', 'major_axis' : 'major_axis',
+                             'minor_axis' : 'minor_axis' },
             slicer       = Panel,
             axis_aliases = { 'major' : 'major_axis', 'minor' : 'minor_axis' },
             stat_axis    = 2)
-    
+
         p4d = Panel4D(dict(L1 = tm.makePanel(), L2 = tm.makePanel()))
 
         # create a 5D
         Panel5D = panelnd.create_nd_panel_factory(
-            klass_name   = 'Panel5D', 
-            axis_orders  = [ 'cool1', 'labels1','items','major_axis','minor_axis'], 
-            axis_slices  = { 'labels1' : 'labels1', 'items' : 'items', 'major_axis' : 'major_axis', 'minor_axis' : 'minor_axis' },
+            klass_name   = 'Panel5D',
+            axis_orders  = [ 'cool1', 'labels1', 'items', 'major_axis',
+                             'minor_axis'],
+            axis_slices  = { 'labels1' : 'labels1', 'items' : 'items',
+                             'major_axis' : 'major_axis',
+                             'minor_axis' : 'minor_axis' },
             slicer       = Panel4D,
             axis_aliases = { 'major' : 'major_axis', 'minor' : 'minor_axis' },
             stat_axis    = 2)
-    
+
         p5d = Panel5D(dict(C1 = p4d))
 
         # slice back to 4d
         results  = p5d.ix['C1',:,:,0:3,:]
         expected = p4d.ix[:,:,0:3,:]
         assert_panel_equal(results['L1'], expected['L1'])
-        
+
         # test a transpose
         #results  = p5d.transpose(1,2,3,4,0)
-        #expected = 
+        #expected =
 
 if __name__ == '__main__':
     import nose
diff --git a/pandas/tools/tests/test_merge.py b/pandas/tools/tests/test_merge.py
index 547a4ec84..5df54537c 100644
--- a/pandas/tools/tests/test_merge.py
+++ b/pandas/tools/tests/test_merge.py
@@ -36,6 +36,8 @@ def get_test_data(ngroups=NGROUPS, n=N):
 
 class TestMerge(unittest.TestCase):
 
+    _multiprocess_can_split_ = True
+
     def setUp(self):
         # aggregate multiple columns
         self.df = DataFrame({'key1': get_test_data(),
@@ -923,6 +925,8 @@ def _join_by_hand(a, b, how='left'):
 
 class TestConcatenate(unittest.TestCase):
 
+    _multiprocess_can_split_ = True
+
     def setUp(self):
         self.frame = DataFrame(tm.getSeriesData())
         self.mixed_frame = self.frame.copy()
diff --git a/pandas/tools/tests/test_pivot.py b/pandas/tools/tests/test_pivot.py
index 423fae8eb..133f6757f 100644
--- a/pandas/tools/tests/test_pivot.py
+++ b/pandas/tools/tests/test_pivot.py
@@ -9,6 +9,8 @@ import pandas.util.testing as tm
 
 class TestPivotTable(unittest.TestCase):
 
+    _multiprocess_can_split_ = True
+
     def setUp(self):
         self.data = DataFrame({'A' : ['foo', 'foo', 'foo', 'foo',
                                       'bar', 'bar', 'bar', 'bar',
@@ -322,5 +324,3 @@ if __name__ == '__main__':
     import nose
     nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
                    exit=False)
-
-
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index 0ccc5fb3c..0722e4368 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -22,7 +22,6 @@ import pandas.util.testing as tm
 
 bday = BDay()
 
-
 def _skip_if_no_pytz():
     try:
         import pytz
@@ -450,7 +449,7 @@ class TestResample(unittest.TestCase):
     def test_resample_anchored_intraday(self):
         # #1471, #1458
 
-        rng = date_range('1/1/2012', '4/1/2012', freq='10min')
+        rng = date_range('1/1/2012', '4/1/2012', freq='100min')
         df = DataFrame(rng.month, index=rng)
 
         result = df.resample('M')
@@ -463,7 +462,7 @@ class TestResample(unittest.TestCase):
 
         tm.assert_frame_equal(result, exp)
 
-        rng = date_range('1/1/2012', '4/1/2013', freq='10min')
+        rng = date_range('1/1/2012', '4/1/2012', freq='100min')
         df = DataFrame(rng.month, index=rng)
 
         result = df.resample('Q')
@@ -590,7 +589,55 @@ from pandas.util.compat import product
 
 
 class TestResamplePeriodIndex(unittest.TestCase):
+
     _multiprocess_can_split_ = True
+
+    def test_annual_upsample_D_s_f(self):
+        self._check_annual_upsample_cases('D', 'start', 'ffill')
+
+    def test_annual_upsample_D_e_f(self):
+        self._check_annual_upsample_cases('D', 'end', 'ffill')
+
+    def test_annual_upsample_D_s_b(self):
+        self._check_annual_upsample_cases('D', 'start', 'bfill')
+
+    def test_annual_upsample_D_e_b(self):
+        self._check_annual_upsample_cases('D', 'end', 'bfill')
+
+    def test_annual_upsample_B_s_f(self):
+        self._check_annual_upsample_cases('B', 'start', 'ffill')
+
+    def test_annual_upsample_B_e_f(self):
+        self._check_annual_upsample_cases('B', 'end', 'ffill')
+
+    def test_annual_upsample_B_s_b(self):
+        self._check_annual_upsample_cases('B', 'start', 'bfill')
+
+    def test_annual_upsample_B_e_b(self):
+        self._check_annual_upsample_cases('B', 'end', 'bfill')
+
+    def test_annual_upsample_M_s_f(self):
+        self._check_annual_upsample_cases('M', 'start', 'ffill')
+
+    def test_annual_upsample_M_e_f(self):
+        self._check_annual_upsample_cases('M', 'end', 'ffill')
+
+    def test_annual_upsample_M_s_b(self):
+        self._check_annual_upsample_cases('M', 'start', 'bfill')
+
+    def test_annual_upsample_M_e_b(self):
+        self._check_annual_upsample_cases('M', 'end', 'bfill')
+
+    def _check_annual_upsample_cases(self, targ, conv, meth, end='12/31/1991'):
+        for month in MONTHS:
+            ts = _simple_pts('1/1/1990', end, freq='A-%s' % month)
+
+            result = ts.resample(targ, fill_method=meth,
+                                 convention=conv)
+            expected = result.to_timestamp(targ, how=conv)
+            expected = expected.asfreq(targ, meth).to_period()
+            assert_series_equal(result, expected)
+
     def test_basic_downsample(self):
         ts = _simple_pts('1/1/1990', '6/30/1995', freq='M')
         result = ts.resample('a-dec')
@@ -634,25 +681,12 @@ class TestResamplePeriodIndex(unittest.TestCase):
         assert_series_equal(result, expected)
 
     def test_annual_upsample(self):
-        targets = ['D', 'B', 'M']
-
-        for month in MONTHS:
-            ts = _simple_pts('1/1/1990', '12/31/1995', freq='A-%s' % month)
-
-            for targ, conv, meth in product(targets, ['start', 'end'],
-                                            ['ffill', 'bfill']):
-                result = ts.resample(targ, fill_method=meth,
-                                     convention=conv)
-                expected = result.to_timestamp(targ, how=conv)
-                expected = expected.asfreq(targ, meth).to_period()
-                assert_series_equal(result, expected)
-
+        ts = _simple_pts('1/1/1990', '12/31/1995', freq='A-DEC')
         df = DataFrame({'a' : ts})
         rdf = df.resample('D', fill_method='ffill')
         exp = df['a'].resample('D', fill_method='ffill')
         assert_series_equal(rdf['a'], exp)
 
-
         rng = period_range('2000', '2003', freq='A-DEC')
         ts = Series([1, 2, 3, 4], index=rng)
 
@@ -979,7 +1013,7 @@ class TestTimeGrouper(unittest.TestCase):
         result = grouped.apply(f)
         self.assertTrue(result.index.equals(df.index))
 
-
 if __name__ == '__main__':
-    nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
+    nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure',
+                         '--with-timer'],
                    exit=False)
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index aeef7fc35..45022353c 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -309,12 +309,12 @@ def makePeriodSeries(nper=None):
     return Series(randn(nper), index=makePeriodIndex(nper))
 
 
-def getTimeSeriesData():
-    return dict((c, makeTimeSeries()) for c in getCols(K))
+def getTimeSeriesData(nper=None):
+    return dict((c, makeTimeSeries(nper)) for c in getCols(K))
 
 
-def makeTimeDataFrame():
-    data = getTimeSeriesData()
+def makeTimeDataFrame(nper=None):
+    data = getTimeSeriesData(nper)
     return DataFrame(data)
 
 
@@ -327,13 +327,14 @@ def makePeriodFrame():
     return DataFrame(data)
 
 
-def makePanel():
+def makePanel(nper=None):
     cols = ['Item' + c for c in string.ascii_uppercase[:K - 1]]
-    data = dict((c, makeTimeDataFrame()) for c in cols)
+    data = dict((c, makeTimeDataFrame(nper)) for c in cols)
     return Panel.fromDict(data)
 
-def makePanel4D():
-    return Panel4D(dict(l1 = makePanel(), l2 = makePanel(), l3 = makePanel()))
+def makePanel4D(nper=None):
+    return Panel4D(dict(l1 = makePanel(nper), l2 = makePanel(nper),
+                        l3 = makePanel(nper)))
 
 def makeCustomIndex(nentries, nlevels, prefix='#', names=False, ndupe_l=None,
                     idx_type=None):
