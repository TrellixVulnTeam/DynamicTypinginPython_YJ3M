commit 0e5fc4449462f2b5615b6286485223cde3033637
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Jul 11 20:04:25 2012 -0400

    BUG: Fix unhandled IndexError when indexing very large time series close #1562

diff --git a/RELEASE.rst b/RELEASE.rst
index 9b9e7e5b8..7b4ba071f 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -41,6 +41,7 @@ pandas 0.8.1
   - Add ability to append hierarchical index levels with ``set_index`` and to
     drop single levels with ``reset_index`` (#1569, #1577)
   - Always apply passed functions in ``resample``, even if upsampling (#1596)
+  - Avoid unnecessary copies in DataFrame constructor with explicit dtype (#1572)
 
 **Bug fixes**
 
@@ -63,6 +64,7 @@ pandas 0.8.1
   - Fix hierarchical summing bug with MultiIndex of length 1 (#1568)
   - Work around numpy.concatenate use/bug in Series.set_value (#1561)
   - Ensure Series/DataFrame are sorted before resampling (#1580)
+  - Fix unhandled IndexError when indexing very large time series (#1562)
 
 pandas 0.8.0
 ============
diff --git a/pandas/src/engines.pyx b/pandas/src/engines.pyx
index 92972d94d..cad847c6e 100644
--- a/pandas/src/engines.pyx
+++ b/pandas/src/engines.pyx
@@ -394,7 +394,7 @@ cdef class DatetimeEngine(Int64Engine):
             values = self._get_index_values()
             conv = _to_i8(val)
             loc = values.searchsorted(conv, side='left')
-            if util.get_value_at(values, loc) != conv:
+            if loc == len(values) or util.get_value_at(values, loc) != conv:
                 raise KeyError(val)
             return loc
 
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 307bae7ac..a91db2de0 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -33,6 +33,8 @@ import pandas.util.py3compat as py3compat
 from pandas.core.datetools import BDay
 import pandas.core.common as com
 
+from numpy.testing.decorators import slow
+
 
 class TestTimeSeriesDuplicates(unittest.TestCase):
 
@@ -1708,6 +1710,12 @@ class TestDatetime64(unittest.TestCase):
         # s2 = s.set_value(dates[1], index[1])
         # self.assert_(s2.values.dtype == 'M8[ns]')
 
+    @slow
+    def test_slice_locs_indexerror(self):
+        times = [datetime(2000, 1, 1) + timedelta(minutes=i) for i in range(1000000)]
+        s = Series(range(1000000), times)
+        s.ix[datetime(1900,1,1):datetime(2100,1,1)]
+
 class TestSeriesDatetime64(unittest.TestCase):
 
     def setUp(self):
