commit a1405d5beaf3c16a6ec3fcc5ee3e833cd9df1cec
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Tue Dec 24 12:41:17 2019 -0800

    TST: clean up skips and xfails (#30441)

diff --git a/pandas/tests/frame/methods/test_rank.py b/pandas/tests/frame/methods/test_rank.py
index be1a423c2..f01a030ad 100644
--- a/pandas/tests/frame/methods/test_rank.py
+++ b/pandas/tests/frame/methods/test_rank.py
@@ -3,6 +3,8 @@ from datetime import datetime, timedelta
 import numpy as np
 import pytest
 
+import pandas.util._test_decorators as td
+
 from pandas import DataFrame, Series
 import pandas.util.testing as tm
 
@@ -26,8 +28,10 @@ class TestRank:
         """
         return request.param
 
+    @td.skip_if_no_scipy
     def test_rank(self, float_frame):
-        rankdata = pytest.importorskip("scipy.stats.rankdata")
+        import scipy.stats  # noqa:F401
+        from scipy.stats import rankdata
 
         float_frame["A"][::2] = np.nan
         float_frame["B"][::3] = np.nan
@@ -117,8 +121,10 @@ class TestRank:
         expected = float_string_frame.rank(1, numeric_only=True)
         tm.assert_frame_equal(result, expected)
 
+    @td.skip_if_no_scipy
     def test_rank_na_option(self, float_frame):
-        rankdata = pytest.importorskip("scipy.stats.rankdata")
+        import scipy.stats  # noqa:F401
+        from scipy.stats import rankdata
 
         float_frame["A"][::2] = np.nan
         float_frame["B"][::3] = np.nan
@@ -199,9 +205,10 @@ class TestRank:
         tm.assert_frame_equal(df.rank(axis=0), df.rank(axis="index"))
         tm.assert_frame_equal(df.rank(axis=1), df.rank(axis="columns"))
 
+    @td.skip_if_no_scipy
     def test_rank_methods_frame(self):
-        pytest.importorskip("scipy.stats.special")
-        rankdata = pytest.importorskip("scipy.stats.rankdata")
+        import scipy.stats  # noqa:F401
+        from scipy.stats import rankdata
 
         xs = np.random.randint(0, 21, (100, 26))
         xs = (xs - 10.0) / 10.0
diff --git a/pandas/tests/indexes/datetimes/test_constructors.py b/pandas/tests/indexes/datetimes/test_constructors.py
index 2f7ed3238..58ab44fba 100644
--- a/pandas/tests/indexes/datetimes/test_constructors.py
+++ b/pandas/tests/indexes/datetimes/test_constructors.py
@@ -725,15 +725,10 @@ class TestDatetimeIndex:
         expected = klass([ts])
         assert result == expected
 
-    # This is the desired future behavior
-    # Note: this xfail is not strict because the test passes with
-    #  None or any of the UTC variants for tz_naive_fixture
-    @pytest.mark.xfail(reason="Future behavior", strict=False)
-    @pytest.mark.filterwarnings("ignore:\\n    Passing:FutureWarning")
     def test_construction_int_rountrip(self, tz_naive_fixture):
-        # GH 12619
-        # TODO(GH-24559): Remove xfail
+        # GH 12619, GH#24559
         tz = tz_naive_fixture
+
         result = 1293858000000000000
         expected = DatetimeIndex([result], tz=tz).asi8[0]
         assert result == expected
diff --git a/pandas/tests/indexes/datetimes/test_tools.py b/pandas/tests/indexes/datetimes/test_tools.py
index 6e919571d..f1c23d7b2 100644
--- a/pandas/tests/indexes/datetimes/test_tools.py
+++ b/pandas/tests/indexes/datetimes/test_tools.py
@@ -720,13 +720,11 @@ class TestToDatetime:
         tm.assert_series_equal(result, expected)
 
     @pytest.mark.parametrize("cache", [True, False])
+    @td.skip_if_no("psycopg2")
     def test_to_datetime_tz_psycopg2(self, cache):
 
         # xref 8260
-        try:
-            import psycopg2
-        except ImportError:
-            pytest.skip("no psycopg2 installed")
+        import psycopg2
 
         # misc cases
         tz1 = psycopg2.tz.FixedOffsetTimezone(offset=-300, name=None)
diff --git a/pandas/tests/indexes/multi/test_missing.py b/pandas/tests/indexes/multi/test_missing.py
index 31de40512..f053f690e 100644
--- a/pandas/tests/indexes/multi/test_missing.py
+++ b/pandas/tests/indexes/multi/test_missing.py
@@ -101,7 +101,7 @@ def test_nulls(idx):
         idx.isna()
 
 
-@pytest.mark.xfail
+@pytest.mark.xfail(reason="isna is not defined for MultiIndex")
 def test_hasnans_isnans(idx):
     # GH 11343, added tests for hasnans / isnans
     index = idx.copy()
diff --git a/pandas/tests/test_downstream.py b/pandas/tests/test_downstream.py
index ea128c8c3..12d834131 100644
--- a/pandas/tests/test_downstream.py
+++ b/pandas/tests/test_downstream.py
@@ -55,6 +55,10 @@ def test_oo_optimizable():
 @tm.network
 # Cython import warning
 @pytest.mark.filterwarnings("ignore:can't:ImportWarning")
+@pytest.mark.filterwarnings(
+    # patsy needs to update their imports
+    "ignore:Using or importing the ABCs from 'collections:DeprecationWarning"
+)
 def test_statsmodels():
 
     statsmodels = import_module("statsmodels")  # noqa
diff --git a/pandas/tests/window/test_moments.py b/pandas/tests/window/test_moments.py
index 2c65c9e2a..7a6c64d9f 100644
--- a/pandas/tests/window/test_moments.py
+++ b/pandas/tests/window/test_moments.py
@@ -2150,6 +2150,7 @@ class TestMomentsConsistency(Base):
             lambda x: x.rolling(win_type="boxcar", window=10, min_periods=5).mean(),
         ],
     )
+    @td.skip_if_no_scipy
     def test_rolling_functions_window_non_shrinkage(self, f):
         # GH 7764
         s = Series(range(4))
@@ -2157,16 +2158,11 @@ class TestMomentsConsistency(Base):
         df = DataFrame([[1, 5], [3, 2], [3, 9], [-1, 0]], columns=["A", "B"])
         df_expected = DataFrame(np.nan, index=df.index, columns=df.columns)
 
-        try:
-            s_result = f(s)
-            tm.assert_series_equal(s_result, s_expected)
-
-            df_result = f(df)
-            tm.assert_frame_equal(df_result, df_expected)
-        except (ImportError):
+        s_result = f(s)
+        tm.assert_series_equal(s_result, s_expected)
 
-            # scipy needed for rolling_window
-            pytest.skip("scipy not available")
+        df_result = f(df)
+        tm.assert_frame_equal(df_result, df_expected)
 
     def test_rolling_functions_window_non_shrinkage_binary(self):
 
