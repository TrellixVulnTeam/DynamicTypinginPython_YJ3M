commit 074e88baa326373123caba23832f33ccdf7db0d8
Author: Wouter Overmeire <lodagro@gmail.com>
Date:   Wed Dec 7 15:04:54 2011 +0100

    Adding clever screen render mode.

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 080a3a894..f6cbcd565 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -359,6 +359,9 @@ def set_printoptions(precision=None, column_space=None, max_rows=None,
     max_columns : int
         max_rows and max_columns are used in __repr__() methods to decide if
         to_string() or info() is used to render an object to a string.
+        Either one, or both can be set to 0 (experimental). Pandas will figure
+        out how big the terminal is and will not display more rows or/and
+        columns that can fit on it.
     """
     global _float_format, _column_space, _max_rows, _max_columns
     if precision is not None:
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index a1e45141c..e186f02f4 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -32,6 +32,7 @@ from pandas.core.indexing import _NDFrameIndexer, _maybe_droplevels
 from pandas.core.internals import BlockManager, make_block, form_blocks
 from pandas.core.series import Series, _is_bool_indexer
 from pandas.util import py3compat
+from pandas.util.terminal import get_terminal_size
 import pandas.core.nanops as nanops
 import pandas.core.common as com
 import pandas.core.datetools as datetools
@@ -317,14 +318,33 @@ class DataFrame(NDFrame):
         """
         Return a string representation for a particular DataFrame
         """
-        buf = StringIO()
-        if len(self.index) < com._max_rows and \
-                len(self.columns) <= com._max_columns:
-            self.to_string(buf=buf)
-        else:
-            self.info(buf=buf, verbose=self._verbose_info)
+        terminal_width, terminal_height = get_terminal_size()
+        max_rows = terminal_height if com._max_rows == 0 else com._max_rows
+        max_columns = com._max_columns
 
-        return buf.getvalue()
+        if max_columns > 0:
+            buf = StringIO()
+            if len(self.index) < max_rows and \
+                    len(self.columns) <= max_columns:
+                self.to_string(buf=buf)
+            else:
+                self.info(buf=buf, verbose=self._verbose_info)
+            return buf.getvalue()
+        else:
+            if len(self.index) > max_rows:
+                buf = StringIO()
+                self.info(buf=buf, verbose=self._verbose_info)
+                return buf.getvalue()
+            else:
+                buf = StringIO()
+                self.to_string(buf=buf)
+                value = buf.getvalue()
+                if max([len(l) for l in value.split('\n')]) <= terminal_width:
+                    return value
+                else:
+                    buf = StringIO()
+                    self.info(buf=buf, verbose=self._verbose_info)
+                    return buf.getvalue()
 
     def __iter__(self):
         """
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 9133e24a1..7de65689e 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -20,6 +20,7 @@ from pandas.core.generic import PandasObject
 from pandas.core.index import Index, MultiIndex, _ensure_index
 from pandas.core.indexing import _SeriesIndexer, _maybe_droplevels
 from pandas.util import py3compat
+from pandas.util.terminal import get_terminal_size
 import pandas.core.common as common
 import pandas.core.datetools as datetools
 import pandas.core.nanops as nanops
@@ -419,8 +420,10 @@ copy : boolean, default False
 
     def __repr__(self):
         """Clean string representation of a Series"""
-        if len(self.index) > common._max_rows:
-            result = self._tidy_repr(min(30, common._max_rows))
+        width, height = get_terminal_size()
+        max_rows = height if common._max_rows == 0 else common._max_rows
+        if len(self.index) > max_rows:
+            result = self._tidy_repr(min(30, max_rows - 4))
         elif len(self.index) > 0:
             result = self._get_repr(print_header=True,
                                     length=len(self) > 50,
