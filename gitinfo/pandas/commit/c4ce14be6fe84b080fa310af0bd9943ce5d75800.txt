commit c4ce14be6fe84b080fa310af0bd9943ce5d75800
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat May 5 16:16:40 2012 -0400

    ENH: convert passed dates to UTC, add tz_convert method to Timestamp #1172

diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index 80f0709ad..3a0860b97 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -125,6 +125,14 @@ class Timestamp(_Timestamp):
     def freqstr(self):
         return getattr(self.offset, 'freqstr', self.offset)
 
+    def tz_convert(self, tz):
+        if isinstance(tz, basestring):
+            import pytz
+            tz = pytz.timezone(tz)
+
+        conv = tz.normalize(self)
+        return Timestamp(conv)
+
 cdef inline bint is_timestamp(object o):
     return isinstance(o, Timestamp)
 
@@ -232,6 +240,7 @@ cpdef convert_to_tsobject(object ts, object tz=None):
     """
     cdef:
         _TSObject obj
+        bint utc_convert = 1
 
     obj = _TSObject()
 
@@ -246,8 +255,8 @@ cpdef convert_to_tsobject(object ts, object tz=None):
         obj.value = PyArray_DatetimeStructToDatetime(NPY_FR_us, &obj.dts)
     elif PyDateTime_Check(ts):
         obj.value = _pydatetime_to_dts(ts, &obj.dts)
-        if tz is None:
-            tz = ts.tzinfo
+        obj.tzinfo = ts.tzinfo
+        utc_convert = 0
     elif PyDate_Check(ts):
         obj.value  = _date_to_datetime64(ts, &obj.dts)
     else:
@@ -265,8 +274,11 @@ cpdef convert_to_tsobject(object ts, object tz=None):
             inf = tz._transition_info[pos]
 
             obj.value = obj.value + deltas[pos]
-            PyArray_DatetimeToDatetimeStruct(obj.value, NPY_FR_us, &obj.dts)
-            obj.tzinfo = tz._tzinfos[inf]
+
+            if utc_convert:
+                PyArray_DatetimeToDatetimeStruct(obj.value, NPY_FR_us,
+                                                 &obj.dts)
+                obj.tzinfo = tz._tzinfos[inf]
 
     return obj
 
@@ -843,6 +855,43 @@ def tz_convert(ndarray[int64_t] vals, object tz1, object tz2):
 
     return result
 
+def tz_convert_single(int64_t val, object tz1, object tz2):
+    cdef:
+        ndarray[int64_t] trans, deltas
+        Py_ssize_t pos
+        int64_t v, offset, utc_date
+
+
+    if not have_pytz:
+        import pytz
+
+    # Convert to UTC
+
+    if tz1.zone != 'UTC':
+        deltas = _get_deltas(tz1)
+        trans = _get_transitions(tz1)
+        pos = trans.searchsorted(val) - 1
+        if pos < 0:
+            raise ValueError('First time before start of DST info')
+        offset = deltas[pos]
+        utc_date = val - offset
+    else:
+        utc_date = val
+
+    if tz2.zone == 'UTC':
+        return utc_date
+
+    # Convert UTC to other timezone
+    trans = _get_transitions(tz2)
+    deltas = _get_deltas(tz2)
+    pos = trans.searchsorted(utc_date) - 1
+    if pos < 0:
+        raise ValueError('First time before start of DST info')
+
+    offset = deltas[pos]
+    return utc_date + offset
+
+
 trans_cache = {}
 utc_offset_cache = {}
 
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 383d31df4..b2dead38b 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -30,7 +30,12 @@ def _as_i8(arg):
 
 def _field_accessor(name, field):
     def f(self):
-        return lib.fast_field_accessor(self.asi8, field)
+        values = self.asi8
+        if self.tz is not None:
+            utc = _utc()
+            if self.tz is not utc:
+                values = lib.tz_convert(values, utc, self.tz)
+        return lib.fast_field_accessor(values, field)
     f.__name__ = name
     return property(f)
 
@@ -237,6 +242,14 @@ class DatetimeIndex(Int64Index):
         else:
             subarr = np.array(data, dtype='M8[us]', copy=copy)
 
+        if tz is not None:
+            tz = tools._maybe_get_tz(tz)
+            # Convert local to UTC
+            ints = subarr.view('i8')
+            lib.tz_localize_check(ints, tz)
+            subarr = lib.tz_convert(ints, tz, _utc())
+            subarr = subarr.view('M8[us]')
+
         subarr = subarr.view(cls)
         subarr.name = name
         subarr.offset = offset
diff --git a/pandas/tseries/tests/test_timezones.py b/pandas/tseries/tests/test_timezones.py
index 29951197c..6c7c2f099 100644
--- a/pandas/tseries/tests/test_timezones.py
+++ b/pandas/tseries/tests/test_timezones.py
@@ -119,13 +119,29 @@ class TestTimeZoneSupport(unittest.TestCase):
         self.assert_('EDT' in repr(rng_eastern[0].tzinfo))
 
     def test_timestamp_tz_convert(self):
-        pass
+        strdates = ['1/1/2012', '3/1/2012', '4/1/2012']
+        idx = DatetimeIndex(strdates, tz='US/Eastern')
+
+        conv = idx[0].tz_convert('US/Pacific')
+        expected = idx.tz_convert('US/Pacific')[0]
+
+        self.assertEquals(conv, expected)
 
     def test_pass_dates_convert_to_utc(self):
-        pass
+        strdates = ['1/1/2012', '3/1/2012', '4/1/2012']
+
+        idx = DatetimeIndex(strdates)
+        conv = idx.tz_convert('US/Eastern')
+
+        fromdates = DatetimeIndex(strdates, tz='US/Eastern')
+
+        self.assert_(conv.tz == fromdates.tz)
+        self.assert_(np.array_equal(conv.values, fromdates.values))
 
     def test_field_access_localize(self):
-        pass
+        strdates = ['1/1/2012', '3/1/2012', '4/1/2012']
+        rng = DatetimeIndex(strdates, tz='US/Eastern')
+        self.assert_((rng.hour == 0).all())
 
     def test_with_tz(self):
         tz = pytz.timezone('US/Central')
