commit 848632336d5e240ae949fbd11feb790e66006668
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jun 9 16:52:35 2011 -0400

    more bug fixes. more work needed on the mixed-type front

diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index ddf687a83..9b242a98b 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -248,6 +248,9 @@ class BlockManager(object):
         for block in self.blocks:
             assert(len(block) == length)
 
+        tot_cols = sum(len(x.columns) for x in self.blocks)
+        assert(len(self.columns) == tot_cols)
+
     def cast(self, dtype):
         new_blocks = []
         for block in self.blocks:
@@ -407,8 +410,8 @@ class BlockManager(object):
     def rename(self, mapper):
         pass
 
-    def reindex_index(self, new_index, method):
-        assert(isinstance(new_index, Index))
+    def reindex_index(self, new_index, method=None):
+        new_index = _ensure_index(new_index)
         indexer, mask = self.index.get_indexer(new_index, method)
 
         # TODO: deal with length-0 case? or does it fall out?
@@ -427,11 +430,11 @@ class BlockManager(object):
         # TODO
         assert(self.index.equals(other.index))
         consolidated = _consolidate(self.blocks + other.blocks)
-        cons_columns = _union_block_columns(self.blocks)
+        cons_columns = _union_block_columns(consolidated)
         return BlockManager(consolidated, self.index, cons_columns)
 
     def join_on(self, other, on):
-        reindexed = other.reindex(on)
+        reindexed = other.reindex_index(on)
         reindexed.index = self.index
         return self.merge(reindexed)
 
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index bce2e4d81..76cac608a 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -11,7 +11,7 @@ from pandas.core.common import (_pickle_array, _unpickle_array, _try_sort)
 from pandas.core.frame import (DataFrame, extract_index, _homogenize_series,
                                _default_index, _ensure_index, _prep_ndarray)
 from pandas.core.index import Index, NULL_INDEX
-from pandas.core.internals import BlockManager, Block
+from pandas.core.internals import BlockManager, make_block
 from pandas.core.series import Series
 import pandas.core.common as common
 import pandas.core.datetools as datetools
@@ -52,10 +52,11 @@ class DataMatrix(DataFrame):
             mgr = data
         elif isinstance(data, DataMatrix):
             mgr = data._data.copy()
-
             if dtype is not None:
                 mgr = mgr.cast(dtype)
-
+        # HACK
+        elif isinstance(data, DataFrame):
+            mgr = _init_dict(data._series, index, columns, dtype)
         elif isinstance(data, dict):
             mgr = _init_dict(data, index, columns, dtype)
         elif isinstance(data, (np.ndarray, list)):
@@ -122,7 +123,7 @@ class DataMatrix(DataFrame):
         if on not in self:
             raise Exception('%s column not contained in this frame!' % on)
 
-        new_data = self.data.join_on(other.data, self[on])
+        new_data = self._data.join_on(other._data, self[on])
         return DataMatrix(new_data)
 
     def _reindex_index(self, new_index, method):
@@ -588,7 +589,7 @@ class DataMatrix(DataFrame):
                 new_values[:periods] = nan
             else:
                 new_values[periods:] = nan
-            return Block(new_values, blk.columns)
+            return make_block(new_values, blk.columns)
 
         if offset is None:
             indexer = self._shift_indexer(periods)
@@ -690,7 +691,7 @@ def _simple_blockify(dct, dtype):
     # CHECK DTYPE?
     if values.dtype != dtype:
         values = values.astype(dtype)
-    return Block(values, columns)
+    return make_block(values, columns)
 
 def _stack_dict(dct):
     columns = Index(_try_sort(dct))
@@ -710,7 +711,7 @@ def _float_blockify(dct, index, columns):
         values[:, indexer] = stacked
 
     # do something with dtype?
-    return Block(values, columns)
+    return make_block(values, columns)
 
 def _init_matrix(values, index, columns, dtype):
     values = _prep_ndarray(values)
@@ -737,7 +738,7 @@ def _init_matrix(values, index, columns, dtype):
         columns = _default_index(K)
 
     columns = _ensure_index(columns)
-    block = Block(values, columns)
+    block = make_block(values, columns)
     return BlockManager([block], index, columns)
 
 def _reorder_columns(mat, current, desired):
diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index 53b95b584..3bb48c04c 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -1,4 +1,4 @@
-# pylint: disable-msg=W0612
+# pylint: disable-msg=W0612,E1101
 from copy import deepcopy
 from datetime import datetime, timedelta
 from cStringIO import StringIO
@@ -304,6 +304,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         indexed_frame = self.klass(data, index=index)
         unindexed_frame = self.klass(data)
 
+        self.assertEqual(self.mixed_frame['foo'].dtype, np.object_)
+
     def test_constructor_dict(self):
         frame = self.klass({'col1' : self.ts1,
                             'col2' : self.ts2})
@@ -352,9 +354,6 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         self.assert_(frame.columns is idx)
         self.assertEqual(len(frame._series), 3)
 
-    def test_constructor_mixed(self):
-        self.assertEqual(self.mixed_frame['foo'].dtype, np.object_)
-
     def test_constructor_dict_cast(self):
         # cast float tests
         test_data = {
diff --git a/pandas/core/tests/test_matrix.py b/pandas/core/tests/test_matrix.py
index 76394bf9b..525b64665 100644
--- a/pandas/core/tests/test_matrix.py
+++ b/pandas/core/tests/test_matrix.py
@@ -237,11 +237,11 @@ class TestDataMatrix(test_frame.TestDataFrame):
                            columns=[0, 2])
 
         reindexed = frame.reindex(np.arange(10))
-        self.assert_(reindexed.values.dtype == np.float_)
-        self.assert_(np.isnan(reindexed[0][1]))
+        self.assert_(reindexed.values.dtype == np.object_)
+        self.assert_(isnull(reindexed[0][1]))
 
         reindexed = frame.reindex(columns=range(3))
-        self.assert_(reindexed.values.dtype == np.float_)
+        self.assert_(reindexed.values.dtype == np.object_)
         self.assert_(isnull(reindexed[1]).all())
 
     def test_reindex_objects(self):
