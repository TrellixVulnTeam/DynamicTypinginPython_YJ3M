commit 896836be45ee5c2a232cba3e3072fd83e71b1c34
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue May 17 01:18:14 2011 -0400

    more to_long unit tests, minor bugfix

diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index 6d3e86008..52f4cad88 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -992,9 +992,6 @@ class SparseWidePanel(WidePanel):
         values = np.column_stack([d_values[item][mask.take(d_indexer[item])]
                                   for item in self.items])
 
-        if I == 1:
-            values = np.atleast_2d(values).T
-
         inds, = mask.nonzero()
 
         # still column major
diff --git a/pandas/core/tests/test_sparse.py b/pandas/core/tests/test_sparse.py
index f6dd57234..2e7c66bb0 100644
--- a/pandas/core/tests/test_sparse.py
+++ b/pandas/core/tests/test_sparse.py
@@ -889,14 +889,21 @@ class TestSparseWidePanel(TestCase):
         assert_panel_equal(dwp, dwp2)
 
     def test_to_long(self):
-        slp = self.panel.to_long()
-        dlp = self.panel.to_dense().to_long()
-
-        self.assert_(np.array_equal(slp.values, dlp.values))
-        self.assert_(np.array_equal(slp.index.major_labels,
-                                    dlp.index.major_labels))
-        self.assert_(np.array_equal(slp.index.minor_labels,
-                                    dlp.index.minor_labels))
+        def _compare_with_dense(panel):
+            slp = panel.to_long()
+            dlp = panel.to_dense().to_long()
+
+            self.assert_(np.array_equal(slp.values, dlp.values))
+            self.assert_(np.array_equal(slp.index.major_labels,
+                                        dlp.index.major_labels))
+            self.assert_(np.array_equal(slp.index.minor_labels,
+                                        dlp.index.minor_labels))
+
+        _compare_with_dense(self.panel)
+        _compare_with_dense(self.panel.reindex(items=['item1']))
+
+        zero_panel = SparseWidePanel(self.data_dict, default_fill_value=0)
+        self.assertRaises(Exception, zero_panel.to_long)
 
     def test_long_to_wide_sparse(self):
         pass
