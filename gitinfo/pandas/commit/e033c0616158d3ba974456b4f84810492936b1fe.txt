commit e033c0616158d3ba974456b4f84810492936b1fe
Author: Kalyan Gokhale <4734245+KalyanGokhale@users.noreply.github.com>
Date:   Fri May 18 11:23:45 2018 +0530

    BUG: make .reset_index() raise when passed an invalid level name (#21016)
    
    closes #20925

diff --git a/doc/source/whatsnew/v0.23.1.txt b/doc/source/whatsnew/v0.23.1.txt
index 9c19d4d6b..9382d74f9 100644
--- a/doc/source/whatsnew/v0.23.1.txt
+++ b/doc/source/whatsnew/v0.23.1.txt
@@ -64,7 +64,7 @@ Conversion
 Indexing
 ^^^^^^^^
 
--
+- Bug in :meth:`Series.reset_index` where appropriate error was not raised with an invalid level name (:issue:`20925`)
 -
 
 I/O
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 0e2ae22f3..6d396e845 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1195,12 +1195,13 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         inplace = validate_bool_kwarg(inplace, 'inplace')
         if drop:
             new_index = com._default_index(len(self))
-            if level is not None and isinstance(self.index, MultiIndex):
+            if level is not None:
                 if not isinstance(level, (tuple, list)):
                     level = [level]
                 level = [self.index._get_level_number(lev) for lev in level]
-                if len(level) < len(self.index.levels):
-                    new_index = self.index.droplevel(level)
+                if isinstance(self.index, MultiIndex):
+                    if len(level) < self.index.nlevels:
+                        new_index = self.index.droplevel(level)
 
             if inplace:
                 self.index = new_index
diff --git a/pandas/tests/series/test_alter_axes.py b/pandas/tests/series/test_alter_axes.py
index dce4e82cb..859082a7e 100644
--- a/pandas/tests/series/test_alter_axes.py
+++ b/pandas/tests/series/test_alter_axes.py
@@ -188,6 +188,11 @@ class TestSeriesAlterAxes(TestData):
             with tm.assert_raises_regex(IndexError, 'Too many levels'):
                 s.reset_index(level=[0, 1, 2])
 
+        # Check that .reset_index([],drop=True) doesn't fail
+        result = pd.Series(range(4)).reset_index([], drop=True)
+        expected = pd.Series(range(4))
+        assert_series_equal(result, expected)
+
     def test_reset_index_range(self):
         # GH 12071
         s = pd.Series(range(2), name='A', dtype='int64')
@@ -275,3 +280,18 @@ class TestSeriesAlterAxes(TestData):
             with tm.assert_produces_warning(FutureWarning):
                 result = s.set_axis(0, list('abcd'), inplace=False)
             tm.assert_series_equal(result, expected)
+
+    def test_reset_index_drop_errors(self):
+        #  GH 20925
+
+        # KeyError raised for series index when passed level name is missing
+        s = pd.Series(range(4))
+        with tm.assert_raises_regex(KeyError, 'must be same as name'):
+            s.reset_index('wrong', drop=True)
+        with tm.assert_raises_regex(KeyError, 'must be same as name'):
+            s.reset_index('wrong')
+
+        # KeyError raised for series when level to be dropped is missing
+        s = pd.Series(range(4), index=pd.MultiIndex.from_product([[1, 2]] * 2))
+        with tm.assert_raises_regex(KeyError, 'not found'):
+            s.reset_index('wrong', drop=True)
