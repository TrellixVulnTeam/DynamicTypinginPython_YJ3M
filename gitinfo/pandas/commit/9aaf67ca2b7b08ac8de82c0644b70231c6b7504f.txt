commit 9aaf67ca2b7b08ac8de82c0644b70231c6b7504f
Author: jreback <jeff@reback.net>
Date:   Mon Dec 16 13:48:21 2013 -0500

    BUG: Bug in groupby transform with a datetime-like grouper (GH5712)

diff --git a/doc/source/release.rst b/doc/source/release.rst
index 0a853938f..d5163b9db 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -823,6 +823,7 @@ Bug Fixes
   - Work around regression in numpy 1.7.0 which erroneously raises IndexError from ``ndarray.item`` (:issue:`5666`)
   - Bug in repeated indexing of object with resultant non-unique index (:issue:`5678`)
   - Bug in fillna with Series and a passed series/dict (:issue:`5703`)
+  - Bug in groupby transform with a datetime-like grouper (:issue:`5712`)
 
 pandas 0.12.0
 -------------
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 558843f55..f94cf8d1e 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -22,6 +22,7 @@ from pandas.core.common import(_possibly_downcast_to_dtype, isnull,
                                notnull, _DATELIKE_DTYPES)
 
 import pandas.lib as lib
+from pandas.lib import Timestamp
 import pandas.algos as _algos
 import pandas.hashtable as _hash
 
@@ -257,6 +258,12 @@ class GroupBy(PandasObject):
         """ dict {group name -> group indices} """
         return self.grouper.indices
 
+    def _get_index(self, name):
+        """ safe get index """
+        if isinstance(name, Timestamp):
+            name = name.value
+        return self.indices[name]
+
     @property
     def name(self):
         if self._selection is None:
@@ -350,7 +357,7 @@ class GroupBy(PandasObject):
         if obj is None:
             obj = self.obj
 
-        inds = self.indices[name]
+        inds = self._get_index(name)
         return obj.take(inds, axis=self.axis, convert=False)
 
     def __iter__(self):
@@ -1821,7 +1828,7 @@ class SeriesGroupBy(GroupBy):
             # need to do a safe put here, as the dtype may be different
             # this needs to be an ndarray
             result = Series(result)
-            result.iloc[self.indices[name]] = res
+            result.iloc[self._get_index(name)] = res
             result = result.values
 
         # downcast if we can (and need)
@@ -1860,7 +1867,7 @@ class SeriesGroupBy(GroupBy):
             return b and notnull(b)
 
         try:
-            indices = [self.indices[name] if true_and_notnull(group) else []
+            indices = [self._get_index(name) if true_and_notnull(group) else []
                        for name, group in self]
         except ValueError:
             raise TypeError("the filter must return a boolean result")
@@ -2412,7 +2419,7 @@ class NDFrameGroupBy(GroupBy):
                 res = path(group)
 
             def add_indices():
-                indices.append(self.indices[name])
+                indices.append(self._get_index(name))
 
             # interpret the result of the filter
             if isinstance(res, (bool, np.bool_)):
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index f83409447..fef6a18ac 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -627,6 +627,14 @@ class TestGroupBy(tm.TestCase):
             for idx in gp.index:
                 assert_fp_equal(res.xs(idx), agged[idx])
 
+    def test_transform_bug(self):
+        # GH 5712
+        # transforming on a datetime column
+        df = DataFrame(dict(A = Timestamp('20130101'), B = np.arange(5)))
+        result = df.groupby('A')['B'].transform(lambda x: x.rank(ascending=False))
+        expected = Series(np.arange(5,0,step=-1),name='B')
+        assert_series_equal(result,expected)
+
     def test_transform_multiple(self):
         grouped = self.ts.groupby([lambda x: x.year, lambda x: x.month])
 
