commit 2486fcd9991feb9a06918b90103b5da0e977bdf4
Author: Matt Wittmann <mwittmann@stitchfix.com>
Date:   Sun Apr 17 13:17:35 2016 -0700

    BUG: TypeError in index coercion
    
    closes #12916
    closes #12893

diff --git a/doc/source/whatsnew/v0.18.1.txt b/doc/source/whatsnew/v0.18.1.txt
index f02feccbf..8f6410205 100644
--- a/doc/source/whatsnew/v0.18.1.txt
+++ b/doc/source/whatsnew/v0.18.1.txt
@@ -305,6 +305,7 @@ Bug Fixes
 - Bug in ``Series.map`` raises ``TypeError`` if its dtype is ``category`` or tz-aware ``datetime`` (:issue:`12473`)
 
 
+- Bug in index coercion when falling back from ```RangeIndex``` construction (:issue:`12893`)
 
 - Bug in slicing subclassed ``DataFrame`` defined to return subclassed ``Series`` may return normal ``Series`` (:issue:`11559`)
 
diff --git a/pandas/indexes/multi.py b/pandas/indexes/multi.py
index 0d114a930..15fa93ebc 100644
--- a/pandas/indexes/multi.py
+++ b/pandas/indexes/multi.py
@@ -666,7 +666,7 @@ class MultiIndex(Index):
         filled = algos.take_1d(unique.values, labels,
                                fill_value=unique._na_value)
         _simple_new = unique._simple_new
-        values = _simple_new(filled, self.names[num],
+        values = _simple_new(filled, name=self.names[num],
                              freq=getattr(unique, 'freq', None),
                              tz=getattr(unique, 'tz', None))
         return values
diff --git a/pandas/tests/indexes/test_multi.py b/pandas/tests/indexes/test_multi.py
index 105ce37c1..d956d38b4 100644
--- a/pandas/tests/indexes/test_multi.py
+++ b/pandas/tests/indexes/test_multi.py
@@ -2147,3 +2147,26 @@ class TestMultiIndex(Base, tm.TestCase):
         # Slicing date on first level should break (of course)
         with assertRaises(KeyError):
             df_swap.loc['2016-01-01']
+
+    def test_rangeindex_fallback_coercion_bug(self):
+        # GH 12893
+        foo = pd.DataFrame(np.arange(100).reshape((10, 10)))
+        bar = pd.DataFrame(np.arange(100).reshape((10, 10)))
+        df = pd.concat({'foo': foo.stack(), 'bar': bar.stack()}, axis=1)
+        df.index.names = ['fizz', 'buzz']
+
+        str(df)
+        expected = pd.DataFrame({'bar': np.arange(100),
+                                 'foo': np.arange(100)},
+                                index=pd.MultiIndex.from_product(
+                                    [range(10), range(10)],
+                                    names=['fizz', 'buzz']))
+        tm.assert_frame_equal(df, expected, check_like=True)
+
+        result = df.index.get_level_values('fizz')
+        expected = pd.Int64Index(np.arange(10), name='fizz').repeat(10)
+        tm.assert_index_equal(result, expected)
+
+        result = df.index.get_level_values('buzz')
+        expected = pd.Int64Index(np.tile(np.arange(10), 10), name='buzz')
+        tm.assert_index_equal(result, expected)
