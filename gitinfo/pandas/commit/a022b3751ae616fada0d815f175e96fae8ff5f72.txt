commit a022b3751ae616fada0d815f175e96fae8ff5f72
Author: Adam Klein <adamklein@gmail.com>
Date:   Fri Jan 13 15:31:05 2012 -0500

    added docs for 0.7 release

diff --git a/doc/source/dsintro.rst b/doc/source/dsintro.rst
index fb9f4fdc6..a87ebce8e 100644
--- a/doc/source/dsintro.rst
+++ b/doc/source/dsintro.rst
@@ -299,6 +299,8 @@ From a list of dicts
    DataFrame(data2, index=['first', 'second'])
    DataFrame(data2, columns=['a', 'b'])
 
+.. _basics.dataframe.from_series:
+
 From a Series
 ~~~~~~~~~~~~~
 
diff --git a/doc/source/groupby.rst b/doc/source/groupby.rst
index 37addb3f9..4b7a08ca5 100644
--- a/doc/source/groupby.rst
+++ b/doc/source/groupby.rst
@@ -125,6 +125,8 @@ only verifies that you've passed a valid mapping.
    GroupBy operations (though can't be guaranteed to be the most
    efficient). You can get quite creative with the label mapping functions.
 
+.. _groupby.atributes:
+
 GroupBy object attributes
 ~~~~~~~~~~~~~~~~~~~~~~~~~
 
@@ -146,6 +148,15 @@ the length of the ``groups`` dict, so it is largely just a convenience:
    grouped.groups
    len(grouped)
 
+By default the group keys are sorted during the groupby operation. You may
+however pass ``sort``=``False`` for potential speedups:
+
+.. ipython:: python
+
+   df2 = DataFrame({'X' : ['B', 'B', 'A', 'A'], 'Y' : [1, 2, 3, 4]})
+   df2.groupby(['X'], sort=True).sum()
+   df2.groupby(['X'], sort=False).sum()
+
 .. _groupby.multiindex:
 
 GroupBy with MultiIndex
diff --git a/doc/source/indexing.rst b/doc/source/indexing.rst
index 1e4329e11..7d8c1bc1e 100644
--- a/doc/source/indexing.rst
+++ b/doc/source/indexing.rst
@@ -380,6 +380,18 @@ more direct way.  ``select`` takes a function which operates on labels along
 
    df.select(lambda x: x == 'A', axis=1)
 
+The ``lookup`` method
+~~~~~~~~~~~~~~~~~~~~~
+
+Sometimes you want to extract a set of values given a sequence of row labels
+and column labels, and the ``lookup`` method allows for this and returns a
+numpy array.  For instance,
+
+.. ipython:: python
+
+  dflookup = DataFrame(np.random.rand(20,4), columns = ['A','B','C','D'])
+  dflookup.lookup(xrange(0,10,2), ['B','C','A','B','D'])
+
 
 Advanced indexing with integer labels
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
diff --git a/doc/source/merging.rst b/doc/source/merging.rst
index 4dc6bbc77..11fc78e86 100644
--- a/doc/source/merging.rst
+++ b/doc/source/merging.rst
@@ -140,6 +140,8 @@ DataFrame:
    concat([df.ix[:7, ['a', 'b']], df.ix[2:-2, ['c']],
            df.ix[-7:, ['d']]], axis=1, join_axes=[df.index])
 
+.. _merging.concatenation:
+
 Concatenating using ``append``
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
@@ -167,6 +169,15 @@ need to be:
    df2
    df1.append(df2)
 
+``append`` may take multiple objects to concatenate:
+
+.. ipython:: python
+
+   df1 = df.ix[:2]
+   df2 = df.ix[2:4]
+   df3 = df.ix[4:]
+   df1.append([df2,df3])
+
 .. note::
 
    Unlike `list.append` method, which appends to the original list and
@@ -200,6 +211,7 @@ This is also a valid argument to ``DataFrame.append``:
 
    df1.append(df2, ignore_index=True)
 
+
 More concatenating with group keys
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
@@ -499,6 +511,8 @@ columns:
 ``DataFrame.join`` has ``lsuffix`` and ``rsuffix`` arguments which behave
 similarly.
 
+.. _merging.multiple_join:
+
 Joining multiple DataFrame or Panel objects
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
diff --git a/doc/source/whatsnew/v0.7.0.txt b/doc/source/whatsnew/v0.7.0.txt
index 881ae7395..a42426497 100644
--- a/doc/source/whatsnew/v0.7.0.txt
+++ b/doc/source/whatsnew/v0.7.0.txt
@@ -53,6 +53,31 @@ New features
 - :ref:`Add <io.formatting>` ``index`` and ``header`` options to
   ``DataFrame.to_string``
 
+- :ref:`Can <merging.multiple_join>` pass multiple DataFrames to
+  ``DataFrame.join`` to join on index (GH166_)
+
+- :ref:`Can <merging.multiple_join>` pass multiple Panels to ``Panel.join``
+  (GH115_)
+
+- :ref:`Can <merging.concatenation>` pass multiple DataFrames to
+  `DataFrame.append` to concatenate (stack) and multiple Series to
+  ``Series.append`` too
+
+- :ref:`Added <io.formatting>` ``justify`` argument to ``DataFrame.to_string``
+  to allow different alignment of column headers
+
+- :ref:`Add <groupby.atributes>` ``sort`` option to GroupBy to allow disabling
+  sorting of the group keys for potential speedups (GH595_)
+
+- :ref:`Can <basics.dataframe.from_series>` pass MaskedArray to Series
+  constructor (PR563_)
+
+- :ref:`Add <dsintro.panel_item_selection>` Panel item access via attributes
+  and IPython completion (GH554_)
+
+- Implement ``DataFrame.lookup``, fancy-indexing analogue for retrieving values
+  given a sequence of row and column labels (GH338_)
+
 Performance improvements
 ~~~~~~~~~~~~~~~~~~~~~~~~
 
@@ -141,9 +166,12 @@ similar operation to the above but using a Python function:
 - Ported skiplist data structure to C to speed up ``rolling_median`` by about
   5-10x in most typical use cases (GH374_)
 
+.. _GH115: https://github.com/wesm/pandas/issues/115
+.. _GH166: https://github.com/wesm/pandas/issues/166
 .. _GH220: https://github.com/wesm/pandas/issues/220
 .. _GH249: https://github.com/wesm/pandas/issues/249
 .. _GH267: https://github.com/wesm/pandas/issues/267
+.. _GH338: https://github.com/wesm/pandas/issues/338
 .. _GH342: https://github.com/wesm/pandas/issues/342
 .. _GH374: https://github.com/wesm/pandas/issues/374
 .. _GH439: https://github.com/wesm/pandas/issues/439
@@ -157,6 +185,8 @@ similar operation to the above but using a Python function:
 .. _GH536: https://github.com/wesm/pandas/issues/536
 .. _GH542: https://github.com/wesm/pandas/issues/542
 .. _GH545: https://github.com/wesm/pandas/issues/545
+.. _GH554: https://github.com/wesm/pandas/issues/554
+.. _GH595: https://github.com/wesm/pandas/issues/595
 .. _GH93: https://github.com/wesm/pandas/issues/93
 .. _GH93: https://github.com/wesm/pandas/issues/93
 .. _PR521: https://github.com/wesm/pandas/pull/521
