commit 2dc986097d486ca3bd89b4e8a491c1235db39c1c
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Aug 9 20:43:18 2011 -0400

    BUG: rewrote sparse formatting to fix buglet. created test_multilevel.py

diff --git a/pandas/core/api.py b/pandas/core/api.py
index 5b2c19a19..8e4a58822 100644
--- a/pandas/core/api.py
+++ b/pandas/core/api.py
@@ -6,7 +6,7 @@ from pandas.core.datetools import DateOffset
 import pandas.core.datetools as datetools
 
 from pandas.core.common import isnull, notnull
-from pandas.core.index import Index
+from pandas.core.index import Index, MultiIndex
 from pandas.core.daterange import DateRange
 from pandas.core.series import Series, TimeSeries
 from pandas.core.frame import DataFrame
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 6fb073e71..c75224690 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -534,9 +534,9 @@ class DataFrame(NDFrame):
             fmt_columns = self.columns.format(sparsify=False)
             str_columns = zip(*[[' %s' % y for y in x.split()]
                                 for x in fmt_columns])
-
             if sparsify:
-                str_columns = [_sparsify(lev) for lev in str_columns]
+                str_columns = _sparsify(str_columns)
+
             str_columns = [list(x) for x in zip(*str_columns)]
             str_index = [''] * self.columns.nlevels + fmt_index
         else:
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 629105a8c..43f016f21 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -400,10 +400,11 @@ class MultiIndex(Index):
         result_levels = []
         for lab, lev in zip(self.labels, stringified_levels):
             taken = np.array(lev, dtype=object).take(lab)
-            if sparsify:
-                taken = _sparsify(taken)
             result_levels.append(taken)
 
+        if sparsify:
+            result_levels = _sparsify(result_levels)
+
         return adjoin(space, *result_levels).split('\n')
 
     def is_all_dates(self):
@@ -773,17 +774,33 @@ class MultiIndex(Index):
 
 NULL_INDEX = Index([])
 
-def _sparsify(labels):
-    if len(labels) == 0:
-        return []
-    result = [labels[0]]
-    prev = labels[0]
-    for label in labels[1:]:
-        if label == prev:
-            result.append('')
-        else:
-            result.append(label)
-            prev = label
+def _sparsify(label_list):
+    pivoted = zip(*label_list)
+
+    if len(pivoted) == 0:
+        return label_list
+
+    k = len(label_list)
+
+    result = [pivoted[0]]
+    prev = pivoted[0]
+
+    for cur in pivoted[1:]:
+        sparse_cur = []
+
+        for i, (p, t) in enumerate(zip(prev, cur)):
+            if i == k - 1:
+                sparse_cur.append(t)
+                result.append(sparse_cur)
+                break
+
+            if p == t:
+                sparse_cur.append('')
+            else:
+                result.append(cur)
+                break
+
+        prev = cur
 
-    return result
+    return zip(*result)
 
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 6dfda019a..1eaf8d478 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -533,7 +533,7 @@ class BlockManager(object):
 
     def _check_have(self, item):
         if item not in self.items:
-            raise KeyError('no item named %s' % item)
+            raise KeyError('no item named %s' % str(item))
 
     def reindex_axis(self, new_axis, method=None, axis=0):
         if axis == 0:
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 12f2eb4e4..c96ba5521 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2574,6 +2574,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         expected = DataFrame({"a" : [0, 0, 0]}, index=idx)
         assert_frame_equal(df, expected)
 
+
 if __name__ == '__main__':
     # unittest.main()
     import nose
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
new file mode 100644
index 000000000..6bc7e58a4
--- /dev/null
+++ b/pandas/tests/test_multilevel.py
@@ -0,0 +1,55 @@
+# pylint: disable-msg=W0612,E1101
+from copy import deepcopy
+from datetime import datetime, timedelta
+from cStringIO import StringIO
+import cPickle as pickle
+import operator
+import os
+import unittest
+
+from numpy import random, nan
+from numpy.random import randn
+import numpy as np
+
+import pandas.core.datetools as datetools
+from pandas.core.index import MultiIndex, NULL_INDEX
+from pandas.core.api import (DataFrame, Index, Series, notnull, isnull)
+
+from pandas.util.testing import (assert_almost_equal,
+                                 assert_series_equal,
+                                 assert_frame_equal,
+                                 randn)
+
+import pandas.util.testing as tm
+
+class TestSeriesMultiLevel(unittest.TestCase):
+    pass
+
+class TestDataFrameMultiLevel(unittest.TestCase):
+
+    def setUp(self):
+        index = MultiIndex(levels=[['foo', 'bar', 'baz', 'qux'],
+                                   ['one', 'two', 'three']],
+                           labels=[[0, 0, 0, 1, 1, 2, 2, 3, 3, 3],
+                                   [0, 1, 2, 0, 1, 1, 2, 0, 1, 2]])
+        self.frame = DataFrame(np.random.randn(10, 3), index=index,
+                               columns=['A', 'B', 'C'])
+
+    def test_getitem_simple(self):
+        df = self.frame.T
+        self.assertRaises(KeyError, df.__getitem__, ('foo', 'four'))
+
+    def test_alignment(self):
+        pass
+
+
+
+
+if __name__ == '__main__':
+    # unittest.main()
+    import nose
+    # nose.runmodule(argv=[__file__,'-vvs','-x', '--pdb-failure'],
+    #                exit=False)
+    nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
+                   exit=False)
+
