commit 4236037d3aaa360426e870782a7b6f19f3e6a90e
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Jul 3 16:09:03 2011 -0400

    unit tests all pass!!

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 4e01df2df..8dff83776 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -202,7 +202,7 @@ class DataFrame(PandasGeneric):
             columns = _default_index(K)
 
         columns = _ensure_index(columns)
-        block = make_block(values.T, columns, columns, 2)
+        block = make_block(values.T, columns, columns)
         return BlockManager([block], [columns, index], ndim=2)
 
     def astype(self, dtype):
@@ -720,7 +720,7 @@ class DataFrame(PandasGeneric):
         cons_data = self._data.consolidate()
         if cons_data is self._data:
             cons_data = cons_data.copy()
-        return DataFrame(cons_data)
+        return type(self)(cons_data)
 
     #----------------------------------------------------------------------
     # Array interface
@@ -1524,7 +1524,7 @@ class DataFrame(PandasGeneric):
                 new_values[:, :periods] = nan
             else:
                 new_values[:, periods:] = nan
-            return make_block(new_values, blk.items, blk.ref_items, ndim=2)
+            return make_block(new_values, blk.items, blk.ref_items)
 
         if offset is None:
             indexer = self._shift_indexer(periods)
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index b079d6f23..db63cd1b7 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -81,8 +81,7 @@ class Block(object):
         return self.values.dtype
 
     def copy(self):
-        return make_block(self.values.copy(), self.items,
-                          self.ref_items, ndim=self.ndim)
+        return make_block(self.values.copy(), self.items, self.ref_items)
 
     def merge(self, other):
         assert(self.ref_items.equals(other.ref_items))
@@ -100,8 +99,7 @@ class Block(object):
         if needs_masking:
             new_values = _cast_if_bool_int(new_values)
             common.null_out_axis(new_values, notmask, axis)
-        return make_block(new_values, self.items, self.ref_items,
-                          ndim=self.ndim)
+        return make_block(new_values, self.items, self.ref_items)
 
     def reindex_items_from(self, new_ref_items):
         """
@@ -118,7 +116,7 @@ class Block(object):
         masked_idx = indexer[mask]
         new_values = self.values.take(masked_idx, axis=0)
         new_items = self.items.take(masked_idx)
-        return make_block(new_values, new_items, new_ref_items, ndim=self.ndim)
+        return make_block(new_values, new_items, new_ref_items)
 
     def get(self, item):
         loc = self.items.get_loc(item)
@@ -144,14 +142,13 @@ class Block(object):
         loc = self.items.get_loc(item)
         new_items = np.delete(np.asarray(self.items), loc)
         new_values = np.delete(self.values, loc, 0)
-        return make_block(new_values, new_items, self.ref_items, ndim=self.ndim)
+        return make_block(new_values, new_items, self.ref_items)
 
     def fillna(self, value):
         new_values = self.values.copy()
         mask = common.isnull(new_values.ravel())
         new_values.flat[mask] = value
-        return make_block(new_values, self.items, self.ref_items,
-                          ndim=self.ndim)
+        return make_block(new_values, self.items, self.ref_items)
 
 def _insert_into_items(items, item, loc):
     items = np.asarray(items)
@@ -195,7 +192,7 @@ class ObjectBlock(Block):
         return not issubclass(value.dtype.type,
                               (np.integer, np.floating, np.bool_))
 
-def make_block(values, items, ref_items, ndim):
+def make_block(values, items, ref_items):
     dtype = values.dtype
     vtype = dtype.type
 
@@ -208,7 +205,7 @@ def make_block(values, items, ref_items, ndim):
     else:
         klass = ObjectBlock
 
-    return klass(values, items, ref_items, ndim=ndim)
+    return klass(values, items, ref_items, ndim=values.ndim)
 
 # TODO: flexible with index=None and/or items=None
 
@@ -290,7 +287,7 @@ class BlockManager(object):
 
         blocks = []
         for values, items in zip(bvalues, bitems):
-            blk = make_block(values, items, self.axes[0], ndim)
+            blk = make_block(values, items, self.axes[0])
             blocks.append(blk)
         self.blocks = blocks
 
@@ -326,7 +323,7 @@ class BlockManager(object):
         new_blocks = []
         for block in self.blocks:
             newb = make_block(block.values.astype(dtype), block.items,
-                              block.ref_items, ndim=self.ndim)
+                              block.ref_items)
             new_blocks.append(newb)
 
         new_mgr = BlockManager(new_blocks, self.axes, ndim=self.ndim)
@@ -355,7 +352,7 @@ class BlockManager(object):
 
         for block in self.blocks:
             newb = make_block(block.values[slicer], block.items,
-                              block.ref_items, self.ndim)
+                              block.ref_items)
             new_blocks.append(newb)
         return new_blocks
 
@@ -502,7 +499,7 @@ class BlockManager(object):
 
     def _add_new_block(self, item, value):
         # Do we care about dtype at the moment?
-        new_block = make_block(value, [item], self.items, self.ndim)
+        new_block = make_block(value, [item], self.items)
         self.blocks.append(new_block)
 
     def _find_block(self, item):
@@ -562,8 +559,7 @@ class BlockManager(object):
             block_shape[0] = len(extra_items)
             block_values = np.empty(block_shape, dtype=np.float64)
             block_values.fill(nan)
-            na_block = make_block(block_values, extra_items, new_items,
-                                  ndim=self.ndim)
+            na_block = make_block(block_values, extra_items, new_items)
             new_blocks.append(na_block)
             new_blocks = _consolidate(new_blocks, new_items)
 
@@ -707,7 +703,7 @@ def form_blocks(data, index, items):
         block_values = np.empty((len(extra_items), len(index)), dtype=float)
         block_values.fill(nan)
 
-        na_block = make_block(block_values, extra_items, items, ndim)
+        na_block = make_block(block_values, extra_items, items)
         blocks.append(na_block)
         blocks = _consolidate(blocks, items)
 
@@ -719,7 +715,7 @@ def _simple_blockify(dct, ref_items, dtype, ndim):
     if values.dtype != dtype:
         values = values.astype(dtype)
 
-    return make_block(values, block_items, ref_items, ndim)
+    return make_block(values, block_items, ref_items)
 
 def _stack_dict(dct):
     items = Index(_try_sort(dct))
@@ -805,7 +801,7 @@ def _consolidate(blocks, items):
 def _merge_blocks(blocks, items):
     new_values = np.vstack([b.values for b in blocks])
     new_items = np.concatenate([b.items for b in blocks])
-    new_block = make_block(new_values, new_items, items, new_values.ndim)
+    new_block = make_block(new_values, new_items, items)
     return new_block.reindex_items_from(items)
 
 def _union_block_items(blocks):
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index d9b8bc90a..010cd4b0f 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -253,7 +253,7 @@ class WidePanel(Panel, PandasGeneric):
             fixed_axes.append(ax)
 
         items = fixed_axes[0]
-        block = make_block(values, items, items, 3)
+        block = make_block(values, items, items)
         return BlockManager([block], axes)
 
     def _get_plane_axes(self, axis):
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 6e3b4328f..2e62cd251 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -308,34 +308,47 @@ class HDFStore(object):
         self._write_array(group, 'values', series.values)
 
     def _write_frame(self, group, df):
-        self._write_index(group, 'index', df.index)
-        self._write_index(group, 'columns', df.columns)
+        self._write_block_manager(group, df._data)
 
-        # Supporting mixed-type DataFrame objects...nontrivial
+    def _read_frame(self, group, where=None):
+        return DataFrame(self._read_block_manager(group))
+
+    def _write_block_manager(self, group, data):
+        if not data.is_consolidated():
+            data = data.consolidate()
 
-        df._consolidate_inplace()
-        nblocks = len(df._data.blocks)
+        group._v_attrs.ndim = data.ndim
+        for i, ax in enumerate(data.axes):
+            self._write_index(group, 'axis%d' % i, ax)
+
+        # Supporting mixed-type DataFrame objects...nontrivial
+        nblocks = len(data.blocks)
         group._v_attrs.nblocks = nblocks
         for i in range(nblocks):
-            blk = df._data.blocks[i]
-            self._write_index(group, 'block%d_columns' % i, blk.columns)
+            blk = data.blocks[i]
+            self._write_index(group, 'block%d_items' % i, blk.items)
             self._write_array(group, 'block%d_values' % i, blk.values)
 
-    def _read_frame(self, group, where=None):
+    def _read_block_manager(self, group):
         from pandas.core.internals import BlockManager, make_block
 
-        index = _read_index(group, 'index')
-        frame_columns = _read_index(group, 'columns')
+        ndim = group._v_attrs.ndim
+        nblocks = group._v_attrs.nblocks
 
+        axes = []
+        for i in xrange(ndim):
+            ax = _read_index(group, 'axis%d' % i)
+            axes.append(ax)
+
+        items = axes[0]
         blocks = []
         for i in range(group._v_attrs.nblocks):
-            blk_columns = _read_index(group, 'block%d_columns' % i)
+            blk_items = _read_index(group, 'block%d_items' % i)
             values = _read_array(group, 'block%d_values' % i)
-            blk = make_block(values, blk_columns, frame_columns)
+            blk = make_block(values, blk_items, items)
             blocks.append(blk)
 
-        mgr = BlockManager(blocks, index=index, columns=frame_columns)
-        return DataFrame(mgr)
+        return BlockManager(blocks, axes)
 
     def _write_frame_table(self, group, df, append=False, comp=None):
         mat = df.values
@@ -350,23 +363,17 @@ class HDFStore(object):
                           values=values, append=append, compression=comp)
 
     def _write_wide(self, group, panel):
-        self._write_index(group, 'major_axis', panel.major_axis)
-        self._write_index(group, 'minor_axis', panel.minor_axis)
-        self._write_index(group, 'items', panel.items)
-        self._write_array(group, 'values', panel.values)
+        panel._consolidate_inplace()
+        self._write_block_manager(group, panel._data)
+
+    def _read_wide(self, group, where=None):
+        return WidePanel(self._read_block_manager(group))
 
     def _write_wide_table(self, group, panel, append=False, comp=None):
         self._write_table(group, items=panel.items, index=panel.major_axis,
                           columns=panel.minor_axis, values=panel.values,
                           append=append, compression=comp)
 
-    def _read_wide(self, group, where=None):
-        items = _read_index(group, 'items')
-        major_axis = _read_index(group, 'major_axis')
-        minor_axis = _read_index(group, 'minor_axis')
-        values = _read_array(group, 'values')
-        return WidePanel(values, items, major_axis, minor_axis)
-
     def _read_wide_table(self, group, where=None):
         return self._read_panel_table(group, where)
 
diff --git a/pandas/tests/test_internals.py b/pandas/tests/test_internals.py
index 4eeee6400..f2d3bd7fb 100644
--- a/pandas/tests/test_internals.py
+++ b/pandas/tests/test_internals.py
@@ -22,21 +22,21 @@ N = 10
 
 def get_float_ex(cols=['a', 'c', 'e']):
     floats = get_float_mat(N, 3).T
-    return make_block(floats, cols, TEST_COLS, 2)
+    return make_block(floats, cols, TEST_COLS)
 
 def get_obj_ex(cols=['b', 'd']):
     mat = np.empty((N, 2), dtype=object)
     mat[:, 0] = 'foo'
     mat[:, 1] = 'bar'
-    return make_block(mat.T, cols, TEST_COLS, 2)
+    return make_block(mat.T, cols, TEST_COLS)
 
 def get_bool_ex(cols=['f']):
     mat = np.ones((N, 1), dtype=bool)
-    return make_block(mat.T, cols, TEST_COLS, 2)
+    return make_block(mat.T, cols, TEST_COLS)
 
 def get_int_ex(cols=['g']):
     mat = randn(N, 1).astype(int)
-    return make_block(mat.T, cols, TEST_COLS, 2)
+    return make_block(mat.T, cols, TEST_COLS)
 
 class TestBlock(unittest.TestCase):
 
@@ -74,12 +74,12 @@ class TestBlock(unittest.TestCase):
 
         ref_cols = ['e', 'a', 'b', 'd', 'f']
 
-        ablock = make_block(avals, ['e', 'b'], ref_cols, 2)
-        bblock = make_block(bvals, ['a', 'd'], ref_cols, 2)
+        ablock = make_block(avals, ['e', 'b'], ref_cols)
+        bblock = make_block(bvals, ['a', 'd'], ref_cols)
         merged = ablock.merge(bblock)
         exvals = np.vstack((avals, bvals))
         excols = ['e', 'b', 'a', 'd']
-        eblock = make_block(exvals, excols, ref_cols, 2)
+        eblock = make_block(exvals, excols, ref_cols)
         eblock = eblock.reindex_items_from(ref_cols)
         assert_block_equal(merged, eblock)
 
