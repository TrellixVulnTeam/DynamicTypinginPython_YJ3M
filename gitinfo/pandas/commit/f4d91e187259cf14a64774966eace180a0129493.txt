commit f4d91e187259cf14a64774966eace180a0129493
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun May 20 13:14:12 2012 -0400

    TST: more test coverage, bug fixes. don't reference datetime_ for NumPy 1.7

diff --git a/pandas/core/index.py b/pandas/core/index.py
index 0b10fbbbd..fc10ed86e 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -2379,7 +2379,7 @@ def _maybe_box_dtindex(idx):
 def _clean_arrays(values):
     result = []
     for arr in values:
-        if np.issubdtype(arr.dtype, np.datetime_):
+        if np.issubdtype(arr.dtype, np.datetime64):
             result.append(lib.map_infer(arr, lib.Timestamp))
         else:
             result.append(arr)
diff --git a/pandas/core/nanops.py b/pandas/core/nanops.py
index ad65a589c..4a777a92b 100644
--- a/pandas/core/nanops.py
+++ b/pandas/core/nanops.py
@@ -405,7 +405,7 @@ def unique1d(values):
         uniques = np.array(table.unique(com._ensure_int64(values)),
                            dtype=np.int64)
 
-        if issubclass(values.dtype.type, np.datetime_):
+        if np.issubdtype(values.dtype, np.datetime64):
             uniques = uniques.view('M8[ns]')
     else:
         table = lib.PyObjectHashTable(len(values))
diff --git a/pandas/tseries/frequencies.py b/pandas/tseries/frequencies.py
index c1a7d56b3..ede8c127e 100644
--- a/pandas/tseries/frequencies.py
+++ b/pandas/tseries/frequencies.py
@@ -370,7 +370,7 @@ def to_offset(freqstr):
                     delta = offset
                 else:
                     delta = delta + offset
-        except ValueError:
+        except Exception:
             raise ValueError("Could not evaluate %s" % freqstr)
 
     return delta
@@ -667,10 +667,7 @@ def _period_str_to_code(freqstr):
         return _period_code_map[freqstr]
     except:
         alias = _period_alias_dict[freqstr]
-        try:
-            return _period_code_map[alias]
-        except:
-            raise "Could not interpret frequency %s" % freqstr
+        return _period_code_map[alias]
 
 
 
@@ -718,14 +715,11 @@ class _FrequencyInferer(object):
 
         self.deltas = lib.unique_deltas(self.values)
         self.is_unique = len(self.deltas) == 1
-
-    def is_monotonic(self):
-        try:
-            return self.index.is_monotonic
-        except:
-            return lib.is_monotonic_int64(self.values)[0]
+        self.is_monotonic = self.index.is_monotonic
 
     def get_freq(self):
+        if not self.is_monotonic:
+            return None
 
         delta = self.deltas[0]
         if _is_multiple(delta, _ONE_DAY):
@@ -784,7 +778,7 @@ class _FrequencyInferer(object):
             if calendar_start:
                 calendar_start &= d == 1
             if business_start:
-                business_start &= d == 1 or (d < 3 and wd == 0)
+                business_start &= d == 1 or (d <= 3 and wd == 0)
 
             _, daysinmonth = monthrange(y, m)
             cal = d == daysinmonth
@@ -874,9 +868,6 @@ class _FrequencyInferer(object):
                 'ce': 'M', 'be': 'BM'}.get(pos_check)
 
 
-def _is_weekday(y, m, d):
-    return datetime(y, m, d).weekday() < 5
-
 import pandas.core.algorithms as algos
 
 def _maybe_add_count(base, count):
@@ -952,7 +943,7 @@ def is_superperiod(source, target):
     elif source == 'B':
         return target in ['D', 'B', 'H', 'T', 'S']
     elif source == 'D':
-        return target not in ['D', 'B', 'H', 'T', 'S']
+        return target in ['D', 'B', 'H', 'T', 'S']
 
 def _get_rule_month(source, default='DEC'):
     if isinstance(source, offsets.DateOffset):
diff --git a/pandas/tseries/period.py b/pandas/tseries/period.py
index 5cae2375c..ac6a5bc42 100644
--- a/pandas/tseries/period.py
+++ b/pandas/tseries/period.py
@@ -610,7 +610,7 @@ class PeriodIndex(Int64Index):
                     raise ValueError(('freq not specified and cannot be '
                                       'inferred from first element'))
 
-                if issubclass(data.dtype.type, np.datetime_):
+                if np.issubdtype(data.dtype, np.datetime64):
                     data = dt64arr_to_periodarr(data, freq)
                 elif data.dtype == np.int64:
                     pass
diff --git a/pandas/tseries/tests/test_frequencies.py b/pandas/tseries/tests/test_frequencies.py
index 1cbdf152a..8d70e33b6 100644
--- a/pandas/tseries/tests/test_frequencies.py
+++ b/pandas/tseries/tests/test_frequencies.py
@@ -127,6 +127,9 @@ class TestFrequencyInference(unittest.TestCase):
     def test_business_monthly(self):
         self._check_generated_range('1/1/2000', 'BM')
 
+    def test_business_start_monthly(self):
+        self._check_generated_range('1/1/2000', 'BMS')
+
     def test_quarterly(self):
         for month in ['JAN', 'FEB', 'MAR']:
             self._check_generated_range('1/1/2000', 'Q-%s' % month)
@@ -154,6 +157,11 @@ class TestFrequencyInference(unittest.TestCase):
         index = _dti(gen.values)
         self.assert_(infer_freq(index) == gen.freqstr)
 
+    def test_not_monotonic(self):
+        rng = _dti(['1/31/2000', '1/31/2001', '1/31/2002'])
+        rng = rng[::-1]
+        self.assert_(rng.inferred_freq is None)
+
 MONTHS = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP',
           'OCT', 'NOV', 'DEC']
 
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index 0e322e9e9..489983c60 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -391,6 +391,17 @@ class TestResample(unittest.TestCase):
         exp_index = period_range('Jan-2000', 'Dec-2000', freq='M')
         self.assert_(result.index.equals(exp_index))
 
+    def test_upsample_daily_business_daily(self):
+        ts = _simple_ts('1/1/2000', '2/1/2000', freq='B')
+
+        result = ts.resample('D')
+        expected = ts.reindex(date_range('1/3/2000', '2/1/2000'))
+        assert_series_equal(result, expected)
+
+        ts = _simple_ts('1/1/2000', '2/1/2000')
+        result = ts.resample('H')
+        expected = ts.reindex(date_range('1/1/2000', '2/1/2000', freq='H'))
+        assert_series_equal(result, expected)
 
 def _simple_ts(start, end, freq='D'):
     rng = date_range(start, end, freq=freq)
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index b081f244a..dbf7ac23e 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -1213,6 +1213,23 @@ class TestTimestamp(unittest.TestCase):
         self.assertEquals(code, fmod.FreqGroup.FR_MIN)
         self.assertEquals(stride, 5)
 
+        offset = offsets.Hour()
+        result = fmod.to_offset(offset)
+        self.assertEquals(result, offset)
+
+        result = fmod.to_offset((5, 'T'))
+        expected = offsets.Minute(5)
+        self.assertEquals(result, expected)
+
+        self.assertRaises(KeyError, fmod.get_freq_code, (5, 'baz'))
+
+        self.assertRaises(ValueError, fmod.to_offset, '100foo')
+
+        self.assertRaises(ValueError, fmod.to_offset, ('', ''))
+
+        result = fmod.get_standard_freq(offsets.Hour())
+        self.assertEquals(result, 'H')
+
     def test_hash_equivalent(self):
         d = {datetime(2011, 1, 1) : 5}
         stamp = Timestamp(datetime(2011, 1, 1))
