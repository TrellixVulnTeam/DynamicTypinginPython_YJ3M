commit 27b601e81e45845555f7f565cf5670fce499af3a
Author: Jeffrey Tratner <jeffrey.tratner@gmail.com>
Date:   Sun Jul 28 17:03:57 2013 -0400

    CLN: pandas.util.compat --> pandas.compat

diff --git a/bench/alignment.py b/bench/alignment.py
index 0cc0de797..bc3134f59 100644
--- a/bench/alignment.py
+++ b/bench/alignment.py
@@ -1,5 +1,5 @@
 # Setup
-from pandas.util.compat import range, lrange
+from pandas.compat import range, lrange
 import numpy as np
 import pandas
 import la
diff --git a/bench/bench_get_put_value.py b/bench/bench_get_put_value.py
index 405f22450..427e0b1b1 100644
--- a/bench/bench_get_put_value.py
+++ b/bench/bench_get_put_value.py
@@ -1,6 +1,6 @@
 from pandas import *
 from pandas.util.testing import rands
-from pandas.util.compat import range
+from pandas.compat import range
 
 N = 1000
 K = 50
diff --git a/bench/bench_groupby.py b/bench/bench_groupby.py
index 76c92407d..a86e8ed62 100644
--- a/bench/bench_groupby.py
+++ b/bench/bench_groupby.py
@@ -1,6 +1,6 @@
 from pandas import *
 from pandas.util.testing import rands
-from pandas.util.compat import range
+from pandas.compat import range
 
 import string
 import random
diff --git a/bench/bench_khash_dict.py b/bench/bench_khash_dict.py
index 7e9f3c103..054fc3613 100644
--- a/bench/bench_khash_dict.py
+++ b/bench/bench_khash_dict.py
@@ -8,7 +8,7 @@ import os
 
 from vbench.api import Benchmark
 from pandas.util.testing import rands
-from pandas.util.compat import range
+from pandas.compat import range
 import pandas._tseries as lib
 import pandas._sandbox as sbx
 import time
diff --git a/bench/bench_merge.py b/bench/bench_merge.py
index da2706dcf..330dba7b9 100644
--- a/bench/bench_merge.py
+++ b/bench/bench_merge.py
@@ -2,7 +2,7 @@ import random
 import gc
 import time
 from pandas import *
-from pandas.util.compat import range, lrange, StringIO
+from pandas.compat import range, lrange, StringIO
 from pandas.util.testing import rands
 
 N = 10000
diff --git a/bench/bench_merge_sqlite.py b/bench/bench_merge_sqlite.py
index 6a8829e31..3ad4b8101 100644
--- a/bench/bench_merge_sqlite.py
+++ b/bench/bench_merge_sqlite.py
@@ -4,7 +4,7 @@ import gc
 import time
 from pandas import DataFrame
 from pandas.util.testing import rands
-from pandas.util.compat import range, zip
+from pandas.compat import range, zip
 import random
 
 N = 10000
diff --git a/bench/bench_sparse.py b/bench/bench_sparse.py
index beb3e84c3..7dc2db05c 100644
--- a/bench/bench_sparse.py
+++ b/bench/bench_sparse.py
@@ -3,7 +3,7 @@ import numpy as np
 
 from pandas import *
 import pandas.core.sparse as spm
-import pandas.util.compat as compat
+import pandas.compat as compat
 reload(spm)
 from pandas.core.sparse import *
 
diff --git a/bench/bench_take_indexing.py b/bench/bench_take_indexing.py
index cce9035a4..5fb584bcf 100644
--- a/bench/bench_take_indexing.py
+++ b/bench/bench_take_indexing.py
@@ -6,7 +6,7 @@ import pandas._tseries as lib
 
 from pandas import DataFrame
 import timeit
-from pandas.util.compat import zip
+from pandas.compat import zip
 
 setup = """
 from pandas import Series
diff --git a/bench/bench_unique.py b/bench/bench_unique.py
index 0c89f636f..87bd2f2df 100644
--- a/bench/bench_unique.py
+++ b/bench/bench_unique.py
@@ -1,7 +1,7 @@
 from __future__ import print_function
 from pandas import *
 from pandas.util.testing import rands
-from pandas.util.compat import range, zip
+from pandas.compat import range, zip
 import pandas._tseries as lib
 import numpy as np
 import matplotlib.pyplot as plt
diff --git a/bench/better_unique.py b/bench/better_unique.py
index 97c667fbf..e03a4f433 100644
--- a/bench/better_unique.py
+++ b/bench/better_unique.py
@@ -1,12 +1,12 @@
 from __future__ import print_function
 from pandas import DataFrame
-from pandas.util.compat import range, zip
+from pandas.compat import range, zip
 import timeit
 
 setup = """
 from pandas import Series
 import pandas._tseries as _tseries
-from pandas.util.compat import range
+from pandas.compat import range
 import random
 import numpy as np
 
diff --git a/bench/io_roundtrip.py b/bench/io_roundtrip.py
index bd2293d8f..e389481d1 100644
--- a/bench/io_roundtrip.py
+++ b/bench/io_roundtrip.py
@@ -5,7 +5,7 @@ import numpy as np
 
 import la
 import pandas
-from pandas.util.compat import range
+from pandas.compat import range
 from pandas import datetools, DateRange
 
 
diff --git a/bench/serialize.py b/bench/serialize.py
index 7a6d5838f..b0edd6a57 100644
--- a/bench/serialize.py
+++ b/bench/serialize.py
@@ -1,5 +1,5 @@
 from __future__ import print_function
-from pandas.util.compat import range, lrange
+from pandas.compat import range, lrange
 import time
 import os
 import numpy as np
diff --git a/bench/test.py b/bench/test.py
index 49396f608..2339deab3 100644
--- a/bench/test.py
+++ b/bench/test.py
@@ -2,7 +2,7 @@ import numpy as np
 import itertools
 import collections
 import scipy.ndimage as ndi
-from pandas.util.compat import zip, range
+from pandas.compat import zip, range
 
 N = 10000
 
diff --git a/doc/plots/stats/moment_plots.py b/doc/plots/stats/moment_plots.py
index 0e7ee89bd..86ec1d10d 100644
--- a/doc/plots/stats/moment_plots.py
+++ b/doc/plots/stats/moment_plots.py
@@ -1,4 +1,4 @@
-from pandas.util.compat import range
+from pandas.compat import range
 import numpy as np
 
 import matplotlib.pyplot as plt
diff --git a/doc/source/conf.py b/doc/source/conf.py
index 736d19011..99da77dd5 100644
--- a/doc/source/conf.py
+++ b/doc/source/conf.py
@@ -12,7 +12,7 @@
 
 import sys
 import os
-from pandas.util.compat import u
+from pandas.compat import u
 
 # If extensions (or modules to document with autodoc) are in another directory,
 # add these directories to sys.path here. If the directory is relative to the
diff --git a/doc/source/release.rst b/doc/source/release.rst
index abf7cb1c5..90d5b1600 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -52,8 +52,9 @@ pandas 0.13
     also led to the introduction of substantive parts of the Benjamin
     Peterson's ``six`` library into compat. (:issue:`4384`, :issue:`4375`,
     :issue:`4372`)
-  - ``pandas.util.py3compat`` has been merged into ``pandas.util.compat`` and
-    removed from pandas. It contains both list and iterator versions of range,
+  - ``pandas.util.compat`` and ``pandas.util.py3compat`` have been merged into
+    ``pandas.compat``. ``pandas.compat`` now includes many functions allowing
+    2/3 compatibility. It contains both list and iterator versions of range,
     filter, map and zip, plus other necessary elements for Python 3
     compatibility. ``lmap``, ``lzip``, ``lrange`` and ``lfilter`` all produce
     lists instead of iterators, for compatibility with ``numpy``, subscripting
diff --git a/doc/source/v0.13.0.txt b/doc/source/v0.13.0.txt
index 5aee66e34..9f2f7c870 100644
--- a/doc/source/v0.13.0.txt
+++ b/doc/source/v0.13.0.txt
@@ -19,8 +19,9 @@ API changes
     also led to the introduction of substantive parts of the Benjamin
     Peterson's ``six`` library into compat. (:issue:`4384`, :issue:`4375`,
     :issue:`4372`)
-  - ``pandas.util.py3compat`` has been merged into ``pandas.util.compat`` and
-    removed from pandas. It contains both list and iterator versions of range,
+  - ``pandas.util.compat`` and ``pandas.util.py3compat`` have been merged into
+    ``pandas.compat``. ``pandas.compat`` now includes many functions allowing
+    2/3 compatibility. It contains both list and iterator versions of range,
     filter, map and zip, plus other necessary elements for Python 3
     compatibility. ``lmap``, ``lzip``, ``lrange`` and ``lfilter`` all produce
     lists instead of iterators, for compatibility with ``numpy``, subscripting
diff --git a/doc/sphinxext/comment_eater.py b/doc/sphinxext/comment_eater.py
index f1c290b30..1c6d46c5a 100755
--- a/doc/sphinxext/comment_eater.py
+++ b/doc/sphinxext/comment_eater.py
@@ -1,4 +1,4 @@
-from pandas.util.compat import cStringIO
+from pandas.compat import cStringIO
 import compiler
 import inspect
 import textwrap
diff --git a/doc/sphinxext/compiler_unparse.py b/doc/sphinxext/compiler_unparse.py
index 69a4f8e9b..46b7257c4 100755
--- a/doc/sphinxext/compiler_unparse.py
+++ b/doc/sphinxext/compiler_unparse.py
@@ -12,7 +12,7 @@
 """
 
 import sys
-from pandas.util.compat import cStringIO as StringIO
+from pandas.compat import cStringIO as StringIO
 from compiler.ast import Const, Name, Tuple, Div, Mul, Sub, Add
 
 def unparse(ast, single_line_functions=False):
diff --git a/doc/sphinxext/docscrape.py b/doc/sphinxext/docscrape.py
index 1cc57b415..3c2c303e8 100755
--- a/doc/sphinxext/docscrape.py
+++ b/doc/sphinxext/docscrape.py
@@ -8,7 +8,7 @@ import textwrap
 import re
 import pydoc
 from warnings import warn
-from pandas.util.compat import StringIO, callable
+from pandas.compat import StringIO, callable
 
 class Reader(object):
     """A line-based string reader.
diff --git a/doc/sphinxext/docscrape_sphinx.py b/doc/sphinxext/docscrape_sphinx.py
index 0f3280776..650a2d8f3 100755
--- a/doc/sphinxext/docscrape_sphinx.py
+++ b/doc/sphinxext/docscrape_sphinx.py
@@ -1,7 +1,7 @@
 import re, inspect, textwrap, pydoc
 import sphinx
 from .docscrape import NumpyDocString, FunctionDoc, ClassDoc
-from pandas.util.compat import callable
+from pandas.compat import callable
 
 class SphinxDocString(NumpyDocString):
     def __init__(self, docstring, config={}):
diff --git a/doc/sphinxext/ipython_directive.py b/doc/sphinxext/ipython_directive.py
index 49e6ac913..948d60c37 100644
--- a/doc/sphinxext/ipython_directive.py
+++ b/doc/sphinxext/ipython_directive.py
@@ -58,7 +58,7 @@ from __future__ import print_function
 #-----------------------------------------------------------------------------
 
 # Stdlib
-from pandas.util.compat import zip, range, map, lmap, u, cStringIO as StringIO
+from pandas.compat import zip, range, map, lmap, u, cStringIO as StringIO
 import ast
 import os
 import re
diff --git a/doc/sphinxext/numpydoc.py b/doc/sphinxext/numpydoc.py
index 8857c1f80..6f7970338 100755
--- a/doc/sphinxext/numpydoc.py
+++ b/doc/sphinxext/numpydoc.py
@@ -23,7 +23,7 @@ if sphinx.__version__ < '1.0.1':
 
 import os, re, pydoc
 from .docscrape_sphinx import get_doc_object, SphinxDocString
-from pandas.util.compat import u, callable
+from pandas.compat import u, callable
 from sphinx.util.compat import Directive
 import inspect
 
diff --git a/doc/sphinxext/plot_directive.py b/doc/sphinxext/plot_directive.py
index e48899a06..b86c43249 100755
--- a/doc/sphinxext/plot_directive.py
+++ b/doc/sphinxext/plot_directive.py
@@ -75,7 +75,7 @@ TODO
 
 """
 
-from pandas.util.compat import range, cStringIO as StringIO, map
+from pandas.compat import range, cStringIO as StringIO, map
 import sys, os, glob, shutil, imp, warnings, re, textwrap, traceback
 import sphinx
 
diff --git a/doc/sphinxext/tests/test_docscrape.py b/doc/sphinxext/tests/test_docscrape.py
index e9de8cf63..ef2dfacc5 100755
--- a/doc/sphinxext/tests/test_docscrape.py
+++ b/doc/sphinxext/tests/test_docscrape.py
@@ -7,7 +7,7 @@ sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
 from docscrape import NumpyDocString, FunctionDoc, ClassDoc
 from docscrape_sphinx import SphinxDocString, SphinxClassDoc
 from nose.tools import *
-from pandas.util.compat import u
+from pandas.compat import u
 
 doc_txt = '''\
   numpy.multivariate_normal(mean, cov, shape=None)
diff --git a/doc/sphinxext/traitsdoc.py b/doc/sphinxext/traitsdoc.py
index 2c74e70bb..8ec57a607 100755
--- a/doc/sphinxext/traitsdoc.py
+++ b/doc/sphinxext/traitsdoc.py
@@ -18,7 +18,7 @@ import inspect
 import os
 import pydoc
 
-from pandas.util.compat import callable
+from pandas.compat import callable
 from . import docscrape
 from . import docscrape_sphinx
 from .docscrape_sphinx import SphinxClassDoc, SphinxFunctionDoc, SphinxDocString
diff --git a/examples/finance.py b/examples/finance.py
index f795b0c72..91ac57f67 100644
--- a/examples/finance.py
+++ b/examples/finance.py
@@ -3,7 +3,7 @@ Some examples playing around with yahoo finance data
 """
 
 from datetime import datetime
-from pandas.util.compat import zip
+from pandas.compat import zip
 
 import matplotlib.finance as fin
 import numpy as np
diff --git a/pandas/compat/__init__.py b/pandas/compat/__init__.py
index e69de29bb..27f5671ca 100644
--- a/pandas/compat/__init__.py
+++ b/pandas/compat/__init__.py
@@ -0,0 +1,688 @@
+"""
+compat
+======
+
+Cross-compatible functions for Python 2 and 3.
+
+Key items to import for 2/3 compatible code:
+* iterators: range(), map(), zip(), filter(), reduce()
+* lists: lrange(), lmap(), lzip(), lfilter()
+* unicode: u() [u"" is a syntax error in Python 3.0-3.2]
+* longs: long (int in Python 3)
+* callable
+* iterable method compatibility: iteritems, iterkeys, itervalues
+  * Uses the original method if available, otherwise uses items, keys, values.
+* types:
+    * text_type: unicode in Python 2, str in Python 3
+    * binary_type: str in Python 2, bythes in Python 3
+    * string_types: basestring in Python 2, str in Python 3
+* bind_method: binds functions to classes
+
+Python 2.6 compatibility:
+* OrderedDict
+* Counter
+
+Other items:
+* OrderedDefaultDict
+"""
+# pylint disable=W0611
+import functools
+import itertools
+from itertools import product
+import sys
+import types
+
+PY3 = (sys.version_info[0] >= 3)
+# import iterator versions of these functions
+
+try:
+    import __builtin__ as builtins
+    # not writeable when instantiated with string, doesn't handle unicode well
+    from cStringIO import StringIO as cStringIO
+    # always writeable
+    from StringIO import StringIO
+    BytesIO = StringIO
+    import cPickle
+except ImportError:
+    import builtins
+    from io import StringIO, BytesIO
+    cStringIO = StringIO
+    import pickle as cPickle
+
+
+if PY3:
+    def isidentifier(s):
+        return s.isidentifier()
+
+    def str_to_bytes(s, encoding='ascii'):
+        return s.encode(encoding)
+
+    def bytes_to_str(b, encoding='utf-8'):
+        return b.decode(encoding)
+
+    # have to explicitly put builtins into the namespace
+    range = range
+    map = map
+    zip = zip
+    filter = filter
+    reduce = functools.reduce
+    long = int
+    unichr = chr
+
+    # list-producing versions of the major Python iterating functions
+    def lrange(*args, **kwargs):
+        return list(range(*args, **kwargs))
+
+    def lzip(*args, **kwargs):
+        return list(zip(*args, **kwargs))
+
+    def lmap(*args, **kwargs):
+        return list(map(*args, **kwargs))
+
+    def lfilter(*args, **kwargs):
+        return list(filter(*args, **kwargs))
+else:
+    # Python 2
+    import re
+    _name_re = re.compile(r"[a-zA-Z_][a-zA-Z0-9_]*$")
+
+    def isidentifier(s, dotted=False):
+        return bool(_name_re.match(s))
+
+    def str_to_bytes(s, encoding='ascii'):
+        return s
+
+    def bytes_to_str(b, encoding='ascii'):
+        return b
+
+    range = xrange
+    zip = itertools.izip
+    filter = itertools.ifilter
+    map = itertools.imap
+    reduce = reduce
+    long = long
+    unichr = unichr
+
+    # Python 2-builtin ranges produce lists
+    lrange = builtins.range
+    lzip = builtins.zip
+    lmap = builtins.map
+    lfilter = builtins.filter
+
+
+def iteritems(obj, **kwargs):
+    """replacement for six's iteritems for Python2/3 compat
+       uses 'iteritems' if available and otherwise uses 'items'.
+
+       Passes kwargs to method."""
+    func = getattr(obj, "iteritems", None)
+    if not func:
+        func = obj.items
+    return func(**kwargs)
+
+
+def iterkeys(obj, **kwargs):
+    func = getattr(obj, "iterkeys", None)
+    if not func:
+        func = obj.keys
+    return func(**kwargs)
+
+
+def itervalues(obj, **kwargs):
+    func = getattr(obj, "itervalues", None)
+    if not func:
+        func = obj.values
+    return func(**kwargs)
+
+
+def bind_method(cls, name, func):
+    """Bind a method to class, python 2 and python 3 compatible.
+
+    Parameters
+    ----------
+
+    cls : type
+        class to receive bound method
+    name : basestring
+        name of method on class instance
+    func : function
+        function to be bound as method
+
+
+    Returns
+    -------
+    None
+    """
+    # only python 2 has bound/unbound method issue
+    if not PY3:
+        setattr(cls, name, types.MethodType(func, None, cls))
+    else:
+        setattr(cls, name, func)
+# ----------------------------------------------------------------------------
+# functions largely based / taken from the six module
+
+# Much of the code in this module comes from Benjamin Peterson's six library.
+# The license for this library can be found in LICENSES/SIX and the code can be
+# found at https://bitbucket.org/gutworth/six
+
+if PY3:
+    string_types = str,
+    integer_types = int,
+    class_types = type,
+    text_type = str
+    binary_type = bytes
+
+    def u(s):
+        return s
+else:
+    string_types = basestring,
+    integer_types = (int, long)
+    class_types = (type, types.ClassType)
+    text_type = unicode
+    binary_type = str
+
+    def u(s):
+        return unicode(s, "unicode_escape")
+
+try:
+    # callable reintroduced in later versions of Python
+    callable = callable
+except NameError:
+    def callable(obj):
+        return any("__call__" in klass.__dict__ for klass in type(obj).__mro__)
+
+# ----------------------------------------------------------------------------
+# Python 2.6 compatibility shims
+#
+
+# OrderedDict Shim from  Raymond Hettinger, python core dev
+# http://code.activestate.com/recipes/576693-ordered-dictionary-for-py24/
+# here to support versions before 2.6
+if not PY3:
+    # don't need this except in 2.6
+    try:
+        from thread import get_ident as _get_ident
+    except ImportError:
+        from dummy_thread import get_ident as _get_ident
+
+try:
+    from _abcoll import KeysView, ValuesView, ItemsView
+except ImportError:
+    pass
+
+
+class _OrderedDict(dict):
+
+    'Dictionary that remembers insertion order'
+    # An inherited dict maps keys to values.
+    # The inherited dict provides __getitem__, __len__, __contains__, and get.
+    # The remaining methods are order-aware.
+    # Big-O running times for all methods are the same as for regular
+    # dictionaries.
+
+    # The internal self.__map dictionary maps keys to links in a doubly linked
+    # list.  The circular doubly linked list starts and ends with a sentinel
+    # element.  The sentinel element never gets deleted (this simplifies the
+    # algorithm).  Each link is stored as a list of length three:  [PREV, NEXT,
+    # KEY].
+
+    def __init__(self, *args, **kwds):
+        '''Initialize an ordered dictionary.  Signature is the same as for
+        regular dictionaries, but keyword arguments are not recommended
+        because their insertion order is arbitrary.
+
+        '''
+        if len(args) > 1:
+            raise TypeError('expected at most 1 arguments, got %d' % len(args))
+        try:
+            self.__root
+        except AttributeError:
+            self.__root = root = []                     # sentinel node
+            root[:] = [root, root, None]
+            self.__map = {}
+        self.__update(*args, **kwds)
+
+    def __setitem__(self, key, value, dict_setitem=dict.__setitem__):
+        'od.__setitem__(i, y) <==> od[i]=y'
+        # Setting a new item creates a new link which goes at the end of the
+        # linked list, and the inherited dictionary is updated with the new
+        # key/value pair.
+        if key not in self:
+            root = self.__root
+            last = root[0]
+            last[1] = root[0] = self.__map[key] = [last, root, key]
+        dict_setitem(self, key, value)
+
+    def __delitem__(self, key, dict_delitem=dict.__delitem__):
+        'od.__delitem__(y) <==> del od[y]'
+        # Deleting an existing item uses self.__map to find the link which is
+        # then removed by updating the links in the predecessor and successor
+        # nodes.
+        dict_delitem(self, key)
+        link_prev, link_next, key = self.__map.pop(key)
+        link_prev[1] = link_next
+        link_next[0] = link_prev
+
+    def __iter__(self):
+        'od.__iter__() <==> iter(od)'
+        root = self.__root
+        curr = root[1]
+        while curr is not root:
+            yield curr[2]
+            curr = curr[1]
+
+    def __reversed__(self):
+        'od.__reversed__() <==> reversed(od)'
+        root = self.__root
+        curr = root[0]
+        while curr is not root:
+            yield curr[2]
+            curr = curr[0]
+
+    def clear(self):
+        'od.clear() -> None.  Remove all items from od.'
+        try:
+            for node in itervalues(self.__map):
+                del node[:]
+            root = self.__root
+            root[:] = [root, root, None]
+            self.__map.clear()
+        except AttributeError:
+            pass
+        dict.clear(self)
+
+    def popitem(self, last=True):
+        '''od.popitem() -> (k, v), return and remove a (key, value) pair.
+        Pairs are returned in LIFO order if last is true or FIFO order if
+        false.
+        '''
+        if not self:
+            raise KeyError('dictionary is empty')
+        root = self.__root
+        if last:
+            link = root[0]
+            link_prev = link[0]
+            link_prev[1] = root
+            root[0] = link_prev
+        else:
+            link = root[1]
+            link_next = link[1]
+            root[1] = link_next
+            link_next[0] = root
+        key = link[2]
+        del self.__map[key]
+        value = dict.pop(self, key)
+        return key, value
+
+    # -- the following methods do not depend on the internal structure --
+
+    def keys(self):
+        'od.keys() -> list of keys in od'
+        return list(self)
+
+    def values(self):
+        'od.values() -> list of values in od'
+        return [self[key] for key in self]
+
+    def items(self):
+        'od.items() -> list of (key, value) pairs in od'
+        return [(key, self[key]) for key in self]
+
+    def iterkeys(self):
+        'od.iterkeys() -> an iterator over the keys in od'
+        return iter(self)
+
+    def itervalues(self):
+        'od.itervalues -> an iterator over the values in od'
+        for k in self:
+            yield self[k]
+
+    def iteritems(self):
+        'od.iteritems -> an iterator over the (key, value) items in od'
+        for k in self:
+            yield (k, self[k])
+
+    def update(*args, **kwds):
+        '''od.update(E, **F) -> None.  Update od from dict/iterable E and F.
+
+        If E is a dict instance, does:        for k in E: od[k] = E[k]
+        If E has a .keys() method, does:      for k in E.keys(): od[k] = E[k]
+        Or if E is an iterable of items, does:for k, v in E: od[k] = v
+        In either case, this is followed by:  for k, v in F.items(): od[k] = v
+        '''
+        if len(args) > 2:
+            raise TypeError('update() takes at most 2 positional '
+                            'arguments (%d given)' % (len(args),))
+        elif not args:
+            raise TypeError('update() takes at least 1 argument (0 given)')
+        self = args[0]
+        # Make progressively weaker assumptions about "other"
+        other = ()
+        if len(args) == 2:
+            other = args[1]
+        if isinstance(other, dict):
+            for key in other:
+                self[key] = other[key]
+        elif hasattr(other, 'keys'):
+            for key in other.keys():
+                self[key] = other[key]
+        else:
+            for key, value in other:
+                self[key] = value
+        for key, value in kwds.items():
+            self[key] = value
+    # let subclasses override update without breaking __init__
+    __update = update
+
+    __marker = object()
+
+    def pop(self, key, default=__marker):
+        '''od.pop(k[,d]) -> v, remove specified key and return the\
+        corresponding value.  If key is not found, d is returned if given,
+        otherwise KeyError is raised.
+        '''
+        if key in self:
+            result = self[key]
+            del self[key]
+            return result
+        if default is self.__marker:
+            raise KeyError(key)
+        return default
+
+    def setdefault(self, key, default=None):
+        'od.setdefault(k[,d]) -> od.get(k,d), also set od[k]=d if k not in od'
+        if key in self:
+            return self[key]
+        self[key] = default
+        return default
+
+    def __repr__(self, _repr_running={}):
+        'od.__repr__() <==> repr(od)'
+        call_key = id(self), _get_ident()
+        if call_key in _repr_running:
+            return '...'
+        _repr_running[call_key] = 1
+        try:
+            if not self:
+                return '%s()' % (self.__class__.__name__,)
+            return '%s(%r)' % (self.__class__.__name__, list(self.items()))
+        finally:
+            del _repr_running[call_key]
+
+    def __reduce__(self):
+        'Return state information for pickling'
+        items = [[k, self[k]] for k in self]
+        inst_dict = vars(self).copy()
+        for k in vars(OrderedDict()):
+            inst_dict.pop(k, None)
+        if inst_dict:
+            return (self.__class__, (items,), inst_dict)
+        return self.__class__, (items,)
+
+    def copy(self):
+        'od.copy() -> a shallow copy of od'
+        return self.__class__(self)
+
+    @classmethod
+    def fromkeys(cls, iterable, value=None):
+        '''OD.fromkeys(S[, v]) -> New ordered dictionary with keys from S and
+        values equal to v (which defaults to None).
+        '''
+        d = cls()
+        for key in iterable:
+            d[key] = value
+        return d
+
+    def __eq__(self, other):
+        '''od.__eq__(y) <==> od==y.  Comparison to another OD is
+        order-sensitive while comparison to a regular mapping is
+        order-insensitive.
+        '''
+        if isinstance(other, OrderedDict):
+            return (len(self) == len(other) and
+                    list(self.items()) == list(other.items()))
+        return dict.__eq__(self, other)
+
+    def __ne__(self, other):
+        return not self == other
+
+    # -- the following methods are only used in Python 2.7 --
+
+    def viewkeys(self):
+        "od.viewkeys() -> a set-like object providing a view on od's keys"
+        return KeysView(self)
+
+    def viewvalues(self):
+        "od.viewvalues() -> an object providing a view on od's values"
+        return ValuesView(self)
+
+    def viewitems(self):
+        "od.viewitems() -> a set-like object providing a view on od's items"
+        return ItemsView(self)
+
+
+# {{{ http://code.activestate.com/recipes/576611/ (r11)
+
+try:
+    from operator import itemgetter
+    from heapq import nlargest
+except ImportError:
+    pass
+
+
+class _Counter(dict):
+
+    '''Dict subclass for counting hashable objects.  Sometimes called a bag
+    or multiset.  Elements are stored as dictionary keys and their counts
+    are stored as dictionary values.
+
+    >>> Counter('zyzygy')
+    Counter({'y': 3, 'z': 2, 'g': 1})
+
+    '''
+
+    def __init__(self, iterable=None, **kwds):
+        '''Create a new, empty Counter object.  And if given, count elements
+        from an input iterable.  Or, initialize the count from another mapping
+        of elements to their counts.
+
+        >>> c = Counter()                    # a new, empty counter
+        >>> c = Counter('gallahad')          # a new counter from an iterable
+        >>> c = Counter({'a': 4, 'b': 2})    # a new counter from a mapping
+        >>> c = Counter(a=4, b=2)            # a new counter from keyword args
+
+        '''
+        self.update(iterable, **kwds)
+
+    def __missing__(self, key):
+        return 0
+
+    def most_common(self, n=None):
+        '''List the n most common elements and their counts from the most
+        common to the least.  If n is None, then list all element counts.
+
+        >>> Counter('abracadabra').most_common(3)
+        [('a', 5), ('r', 2), ('b', 2)]
+
+        '''
+        if n is None:
+            return sorted(iteritems(self), key=itemgetter(1), reverse=True)
+        return nlargest(n, iteritems(self), key=itemgetter(1))
+
+    def elements(self):
+        '''Iterator over elements repeating each as many times as its count.
+
+        >>> c = Counter('ABCABC')
+        >>> sorted(c.elements())
+        ['A', 'A', 'B', 'B', 'C', 'C']
+
+        If an element's count has been set to zero or is a negative number,
+        elements() will ignore it.
+
+        '''
+        for elem, count in iteritems(self):
+            for _ in range(count):
+                yield elem
+
+    # Override dict methods where the meaning changes for Counter objects.
+
+    @classmethod
+    def fromkeys(cls, iterable, v=None):
+        raise NotImplementedError(
+            'Counter.fromkeys() is undefined.  Use Counter(iterable) instead.')
+
+    def update(self, iterable=None, **kwds):
+        '''Like dict.update() but add counts instead of replacing them.
+
+        Source can be an iterable, a dictionary, or another Counter instance.
+
+        >>> c = Counter('which')
+        >>> c.update('witch')           # add elements from another iterable
+        >>> d = Counter('watch')
+        >>> c.update(d)                 # add elements from another counter
+        >>> c['h']                      # four 'h' in which, witch, and watch
+        4
+
+        '''
+        if iterable is not None:
+            if hasattr(iterable, 'iteritems'):
+                if self:
+                    self_get = self.get
+                    for elem, count in iteritems(iterable):
+                        self[elem] = self_get(elem, 0) + count
+                else:
+                    dict.update(
+                        self, iterable)  # fast path when counter is empty
+            else:
+                self_get = self.get
+                for elem in iterable:
+                    self[elem] = self_get(elem, 0) + 1
+        if kwds:
+            self.update(kwds)
+
+    def copy(self):
+        'Like dict.copy() but returns a Counter instance instead of a dict.'
+        return Counter(self)
+
+    def __delitem__(self, elem):
+        '''Like dict.__delitem__() but does not raise KeyError for missing
+        values.'''
+        if elem in self:
+            dict.__delitem__(self, elem)
+
+    def __repr__(self):
+        if not self:
+            return '%s()' % self.__class__.__name__
+        items = ', '.join(map('%r: %r'.__mod__, self.most_common()))
+        return '%s({%s})' % (self.__class__.__name__, items)
+
+    # Multiset-style mathematical operations discussed in:
+    #       Knuth TAOCP Volume II section 4.6.3 exercise 19
+    #       and at http://en.wikipedia.org/wiki/Multiset
+    #
+    # Outputs guaranteed to only include positive counts.
+    #
+    # To strip negative and zero counts, add-in an empty counter:
+    #       c += Counter()
+
+    def __add__(self, other):
+        '''Add counts from two counters.
+
+        >>> Counter('abbb') + Counter('bcc')
+        Counter({'b': 4, 'c': 2, 'a': 1})
+
+
+        '''
+        if not isinstance(other, Counter):
+            return NotImplemented
+        result = Counter()
+        for elem in set(self) | set(other):
+            newcount = self[elem] + other[elem]
+            if newcount > 0:
+                result[elem] = newcount
+        return result
+
+    def __sub__(self, other):
+        ''' Subtract count, but keep only results with positive counts.
+
+        >>> Counter('abbbc') - Counter('bccd')
+        Counter({'b': 2, 'a': 1})
+
+        '''
+        if not isinstance(other, Counter):
+            return NotImplemented
+        result = Counter()
+        for elem in set(self) | set(other):
+            newcount = self[elem] - other[elem]
+            if newcount > 0:
+                result[elem] = newcount
+        return result
+
+    def __or__(self, other):
+        '''Union is the maximum of value in either of the input counters.
+
+        >>> Counter('abbb') | Counter('bcc')
+        Counter({'b': 3, 'c': 2, 'a': 1})
+
+        '''
+        if not isinstance(other, Counter):
+            return NotImplemented
+        _max = max
+        result = Counter()
+        for elem in set(self) | set(other):
+            newcount = _max(self[elem], other[elem])
+            if newcount > 0:
+                result[elem] = newcount
+        return result
+
+    def __and__(self, other):
+        ''' Intersection is the minimum of corresponding counts.
+
+        >>> Counter('abbb') & Counter('bcc')
+        Counter({'b': 1})
+
+        '''
+        if not isinstance(other, Counter):
+            return NotImplemented
+        _min = min
+        result = Counter()
+        if len(self) < len(other):
+            self, other = other, self
+        for elem in filter(self.__contains__, other):
+            newcount = _min(self[elem], other[elem])
+            if newcount > 0:
+                result[elem] = newcount
+        return result
+
+if sys.version_info[:2] < (2, 7):
+    OrderedDict = _OrderedDict
+    Counter = _Counter
+else:
+    from collections import OrderedDict, Counter
+
+# http://stackoverflow.com/questions/4126348
+# Thanks to @martineau at SO
+
+
+class OrderedDefaultdict(OrderedDict):
+
+    def __init__(self, *args, **kwargs):
+        newdefault = None
+        newargs = ()
+        if args:
+            newdefault = args[0]
+            if not (newdefault is None or callable(newdefault)):
+                raise TypeError('first argument must be callable or None')
+            newargs = args[1:]
+        self.default_factory = newdefault
+        super(self.__class__, self).__init__(*newargs, **kwargs)
+
+    def __missing__(self, key):
+        if self.default_factory is None:
+            raise KeyError(key)
+        self[key] = value = self.default_factory()
+        return value
+
+    def __reduce__(self):  # optional, for pickle support
+        args = self.default_factory if self.default_factory else tuple()
+        return type(self), args, None, None, list(self.items())
diff --git a/pandas/compat/scipy.py b/pandas/compat/scipy.py
index 7b357e2ff..3dab5b1f0 100644
--- a/pandas/compat/scipy.py
+++ b/pandas/compat/scipy.py
@@ -2,7 +2,7 @@
 Shipping functions from SciPy to reduce dependency on having SciPy installed
 """
 
-from pandas.util.compat import range, lrange
+from pandas.compat import range, lrange
 import numpy as np
 
 
diff --git a/pandas/core/algorithms.py b/pandas/core/algorithms.py
index 95bc7351a..a649edfad 100644
--- a/pandas/core/algorithms.py
+++ b/pandas/core/algorithms.py
@@ -8,7 +8,7 @@ import numpy as np
 import pandas.core.common as com
 import pandas.algos as algos
 import pandas.hashtable as htable
-import pandas.util.compat as compat
+import pandas.compat as compat
 
 
 def match(to_match, values, na_sentinel=-1):
diff --git a/pandas/core/base.py b/pandas/core/base.py
index 1f3cb7f9e..16fe28a80 100644
--- a/pandas/core/base.py
+++ b/pandas/core/base.py
@@ -1,7 +1,7 @@
 """
 Base class(es) for all pandas objects.
 """
-from pandas.util import compat
+from pandas import compat
 
 class StringMixin(object):
     """implements string methods so long as object defines a `__unicode__` method.
diff --git a/pandas/core/common.py b/pandas/core/common.py
index 2fdfe90f7..7e835a5b8 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -14,8 +14,8 @@ import pandas.algos as algos
 import pandas.lib as lib
 import pandas.tslib as tslib
 
-from pandas.util import compat
-from pandas.util.compat import StringIO, BytesIO, range, long, u, zip, map
+from pandas import compat
+from pandas.compat import StringIO, BytesIO, range, long, u, zip, map
 
 
 from pandas.core.config import get_option
diff --git a/pandas/core/config.py b/pandas/core/config.py
index d55888bc1..a14e8afa2 100644
--- a/pandas/core/config.py
+++ b/pandas/core/config.py
@@ -52,8 +52,8 @@ import re
 
 from collections import namedtuple
 import warnings
-from pandas.util.compat import map, lmap, u
-import pandas.util.compat as compat
+from pandas.compat import map, lmap, u
+import pandas.compat as compat
 
 DeprecatedOption = namedtuple('DeprecatedOption', 'key msg rkey removal_ver')
 RegisteredOption = namedtuple(
diff --git a/pandas/core/format.py b/pandas/core/format.py
index 1381d4e2e..30856d371 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -1,13 +1,13 @@
 from __future__ import print_function
 # pylint: disable=W0141
 
-from pandas.util import compat
+from pandas import compat
 import sys
 
-from pandas.util.compat import StringIO, lzip, range, map, zip, reduce, u, OrderedDict
+from pandas.compat import StringIO, lzip, range, map, zip, reduce, u, OrderedDict
 from pandas.core.common import adjoin, isnull, notnull
 from pandas.core.index import Index, MultiIndex, _ensure_index
-from pandas.util import compat
+from pandas import compat
 from pandas.util.terminal import get_terminal_size
 from pandas.core.config import get_option, set_option, reset_option
 import pandas.core.common as com
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index b947d61ab..902a6c736 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -12,8 +12,8 @@ labeling information
 # pylint: disable=E1101,E1103
 # pylint: disable=W0212,W0231,W0703,W0622
 
-from pandas.util.compat import range, zip, lrange, lmap, lzip, StringIO, u, OrderedDict
-from pandas.util import compat
+from pandas.compat import range, zip, lrange, lmap, lzip, StringIO, u, OrderedDict
+from pandas import compat
 import operator
 import sys
 import collections
@@ -37,7 +37,7 @@ from pandas.core.internals import (BlockManager,
 from pandas.core.series import Series, _radd_compat
 import pandas.core.expressions as expressions
 from pandas.compat.scipy import scoreatpercentile as _quantile
-from pandas.util import compat
+from pandas import compat
 from pandas.util.terminal import get_terminal_size
 from pandas.util.decorators import deprecate, Appender, Substitution
 
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 8bea809d9..0eaae228d 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -1,6 +1,6 @@
 # pylint: disable=W0231,E1101
 import warnings
-from pandas.util import compat
+from pandas import compat
 import numpy as np
 import pandas.lib as lib
 from pandas.core.base import PandasObject
@@ -10,7 +10,7 @@ import pandas.core.indexing as indexing
 from pandas.core.indexing import _maybe_convert_indices
 from pandas.tseries.index import DatetimeIndex
 import pandas.core.common as com
-from pandas.util.compat import map, zip
+from pandas.compat import map, zip
 
 
 class PandasError(Exception):
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index ed0636259..e12795682 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -1,10 +1,10 @@
 import types
 import numpy as np
 
-from pandas.util.compat import(
+from pandas.compat import(
     zip, builtins, range, long, lrange, lzip, OrderedDict, callable
 )
-from pandas.util import compat
+from pandas import compat
 
 from pandas.core.base import PandasObject
 from pandas.core.categorical import Categorical
@@ -2655,7 +2655,7 @@ def numpy_groupby(data, labels, axis=0):
 # Helper functions
 
 
-from pandas.util import compat
+from pandas import compat
 import sys
 
 
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 713400619..5175e01d1 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1,7 +1,7 @@
 # pylint: disable=E1101,E1103,W0232
 
-from pandas.util.compat import range, zip, lrange, lzip
-from pandas.util import compat
+from pandas.compat import range, zip, lrange, lzip
+from pandas import compat
 import numpy as np
 
 import pandas.tslib as tslib
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 2ad006123..4d64b058a 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -3,8 +3,8 @@
 from datetime import datetime
 from pandas.core.common import _asarray_tuplesafe
 from pandas.core.index import Index, MultiIndex, _ensure_index
-from pandas.util.compat import range, zip
-import pandas.util.compat as compat
+from pandas.compat import range, zip
+import pandas.compat as compat
 import pandas.core.common as com
 import pandas.lib as lib
 
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index ca1200b87..2d09bbec8 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -17,8 +17,8 @@ import pandas.tslib as tslib
 import pandas.core.expressions as expressions
 
 from pandas.tslib import Timestamp
-from pandas.util import compat
-from pandas.util.compat import range, lrange, lmap, callable, map, zip
+from pandas import compat
+from pandas.compat import range, lrange, lmap, callable, map, zip
 
 
 class Block(PandasObject):
diff --git a/pandas/core/nanops.py b/pandas/core/nanops.py
index 20fcc1430..23cc4fe31 100644
--- a/pandas/core/nanops.py
+++ b/pandas/core/nanops.py
@@ -1,4 +1,4 @@
-from pandas.util import compat
+from pandas import compat
 import sys
 import itertools
 import functools
@@ -12,7 +12,7 @@ import pandas.algos as algos
 import pandas.hashtable as _hash
 import pandas.tslib as tslib
 
-from pandas.util.compat import builtins
+from pandas.compat import builtins
 
 
 try:
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 05a4a4b4f..9f7785ae2 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -3,8 +3,8 @@ Contains data structures designed for manipulating panel (3-dimensional) data
 """
 # pylint: disable=E1103,W0231,W0212,W0621
 
-from pandas.util.compat import map, zip, range, lrange, lmap, u, OrderedDict, OrderedDefaultdict
-from pandas.util import compat
+from pandas.compat import map, zip, range, lrange, lmap, u, OrderedDict, OrderedDefaultdict
+from pandas import compat
 import operator
 import sys
 import numpy as np
@@ -22,7 +22,7 @@ from pandas.core.internals import (BlockManager,
 from pandas.core.series import Series
 from pandas.core.frame import DataFrame
 from pandas.core.generic import NDFrame
-from pandas.util import compat
+from pandas import compat
 from pandas.util.decorators import deprecate, Appender, Substitution
 import pandas.core.common as com
 import pandas.core.nanops as nanops
diff --git a/pandas/core/panelnd.py b/pandas/core/panelnd.py
index e1706a44f..f43ec2c31 100644
--- a/pandas/core/panelnd.py
+++ b/pandas/core/panelnd.py
@@ -1,8 +1,8 @@
 """ Factory methods to create N-D panels """
 
 import pandas.lib as lib
-from pandas.util.compat import zip
-import pandas.util.compat as compat
+from pandas.compat import zip
+import pandas.compat as compat
 
 
 def create_nd_panel_factory(klass_name, axis_orders, axis_slices, slicer, axis_aliases=None, stat_axis=2,ns=None):
diff --git a/pandas/core/reshape.py b/pandas/core/reshape.py
index c73d0803f..b69e4a6a9 100644
--- a/pandas/core/reshape.py
+++ b/pandas/core/reshape.py
@@ -1,8 +1,8 @@
 # pylint: disable=E1101,E1103
 # pylint: disable=W0703,W0622,W0613,W0201
 
-from pandas.util.compat import range, zip
-from pandas.util import compat
+from pandas.compat import range, zip
+from pandas import compat
 import itertools
 
 import numpy as np
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 21853f283..0e995f479 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -5,7 +5,7 @@ Data structure for 1-dimensional cross-sectional and time series data
 # pylint: disable=E1101,E1103
 # pylint: disable=W0703,W0622,W0613,W0201
 
-from pandas.util import compat
+from pandas import compat
 import operator
 from distutils.version import LooseVersion
 import types
@@ -26,9 +26,9 @@ from pandas.core.indexing import (_SeriesIndexer, _check_bool_indexer,
                                   _check_slice_bounds, _maybe_convert_indices)
 from pandas.tseries.index import DatetimeIndex
 from pandas.tseries.period import PeriodIndex, Period
-from pandas.util import compat
+from pandas import compat
 from pandas.util.terminal import get_terminal_size
-from pandas.util.compat import zip, lzip, u, OrderedDict
+from pandas.compat import zip, lzip, u, OrderedDict
 
 import pandas.core.array as pa
 
diff --git a/pandas/core/strings.py b/pandas/core/strings.py
index 4ab6b379f..462ed81aa 100644
--- a/pandas/core/strings.py
+++ b/pandas/core/strings.py
@@ -1,9 +1,9 @@
 import numpy as np
 
-from pandas.util.compat import zip
+from pandas.compat import zip
 from pandas.core.common import isnull
 from pandas.core.series import Series
-import pandas.util.compat as compat
+import pandas.compat as compat
 import re
 import pandas.lib as lib
 
diff --git a/pandas/io/clipboard.py b/pandas/io/clipboard.py
index ba0b80f2e..798f30e85 100644
--- a/pandas/io/clipboard.py
+++ b/pandas/io/clipboard.py
@@ -1,5 +1,5 @@
 """ io on the clipboard """
-from pandas.util.compat import StringIO
+from pandas.compat import StringIO
 
 def read_clipboard(**kwargs):  # pragma: no cover
     """
diff --git a/pandas/io/common.py b/pandas/io/common.py
index dc3001053..e96c54a9a 100644
--- a/pandas/io/common.py
+++ b/pandas/io/common.py
@@ -4,8 +4,8 @@ import sys
 import zipfile
 from contextlib import contextmanager, closing
 
-from pandas.util.compat import StringIO
-from pandas.util import compat
+from pandas.compat import StringIO
+from pandas import compat
 
 
 if compat.PY3:
diff --git a/pandas/io/data.py b/pandas/io/data.py
index d1962648a..e6d19aee4 100644
--- a/pandas/io/data.py
+++ b/pandas/io/data.py
@@ -12,10 +12,10 @@ from collections import defaultdict
 
 import numpy as np
 
-from pandas.util.compat import(
+from pandas.compat import(
     StringIO, bytes_to_str, range, lrange, lmap, zip
 )
-import pandas.util.compat as compat
+import pandas.compat as compat
 from pandas import Panel, DataFrame, Series, read_csv, concat
 from pandas.core.common import PandasError
 from pandas.io.parsers import TextParser
diff --git a/pandas/io/date_converters.py b/pandas/io/date_converters.py
index 26c3162ec..2be477f49 100644
--- a/pandas/io/date_converters.py
+++ b/pandas/io/date_converters.py
@@ -1,5 +1,5 @@
 """This module is designed for community supported date conversion functions"""
-from pandas.util.compat import range
+from pandas.compat import range
 import numpy as np
 import pandas.lib as lib
 
diff --git a/pandas/io/excel.py b/pandas/io/excel.py
index bf59d3620..534a88e30 100644
--- a/pandas/io/excel.py
+++ b/pandas/io/excel.py
@@ -11,8 +11,8 @@ import numpy as np
 from pandas.io.parsers import TextParser
 from pandas.tseries.period import Period
 from pandas import json
-from pandas.util.compat import map, zip, reduce, range, lrange
-import pandas.util.compat as compat
+from pandas.compat import map, zip, reduce, range, lrange
+import pandas.compat as compat
 
 
 def read_excel(path_or_buf, sheetname, kind=None, **kwds):
diff --git a/pandas/io/ga.py b/pandas/io/ga.py
index 19b478732..dcbecd748 100644
--- a/pandas/io/ga.py
+++ b/pandas/io/ga.py
@@ -5,7 +5,7 @@
 4. Download JSON secret file and move into same directory as this file
 """
 from datetime import datetime
-from pandas.util import compat
+from pandas import compat
 import numpy as np
 from pandas import DataFrame
 import pandas as pd
@@ -17,7 +17,7 @@ from pandas.util.decorators import Appender, Substitution
 
 from apiclient.errors import HttpError
 from oauth2client.client import AccessTokenRefreshError
-from pandas.util.compat import zip, u
+from pandas.compat import zip, u
 
 TYPE_MAP = {u('INTEGER'): int, u('FLOAT'): float, u('TIME'): int}
 
diff --git a/pandas/io/html.py b/pandas/io/html.py
index 841fd1bf9..df94e0ffa 100644
--- a/pandas/io/html.py
+++ b/pandas/io/html.py
@@ -14,8 +14,8 @@ import numpy as np
 
 from pandas import DataFrame, MultiIndex, isnull
 from pandas.io.common import _is_url, urlopen, parse_url
-from pandas.util.compat import range, lrange, lmap, u, map
-from pandas.util import compat
+from pandas.compat import range, lrange, lmap, u, map
+from pandas import compat
 
 
 try:
diff --git a/pandas/io/json.py b/pandas/io/json.py
index 35709b4dd..7b6c97be2 100644
--- a/pandas/io/json.py
+++ b/pandas/io/json.py
@@ -1,7 +1,7 @@
 
 # pylint: disable-msg=E1101,W0613,W0603
-from pandas.util.compat import StringIO, long
-from pandas.util import compat
+from pandas.compat import StringIO, long
+from pandas import compat
 import os
 
 from pandas import Series, DataFrame, to_datetime
diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index 433e6d0f8..f76b1c563 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -2,8 +2,8 @@
 Module contains tools for processing files into DataFrames or other objects
 """
 from __future__ import print_function
-from pandas.util.compat import range, lrange, StringIO, lzip, zip
-from pandas.util import compat
+from pandas.compat import range, lrange, StringIO, lzip, zip
+from pandas import compat
 import re
 import csv
 from warnings import warn
@@ -14,7 +14,7 @@ from pandas.core.index import Index, MultiIndex
 from pandas.core.frame import DataFrame
 import datetime
 import pandas.core.common as com
-from pandas.util import compat
+from pandas import compat
 from pandas.io.date_converters import generic_parser
 from pandas.io.common import get_filepath_or_buffer
 
diff --git a/pandas/io/pickle.py b/pandas/io/pickle.py
index 314a566d2..efa8bdb0b 100644
--- a/pandas/io/pickle.py
+++ b/pandas/io/pickle.py
@@ -1,4 +1,4 @@
-from pandas.util.compat import cPickle as pkl, PY3
+from pandas.compat import cPickle as pkl, PY3
 
 def to_pickle(obj, path):
     """
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 14de4d17e..a7daa7e7c 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -6,8 +6,8 @@ from __future__ import print_function
 
 # pylint: disable-msg=E1101,W0613,W0603
 from datetime import datetime, date
-from pandas.util.compat import map, range, zip, lrange, lmap, u
-from pandas.util import compat
+from pandas.compat import map, range, zip, lrange, lmap, u
+from pandas import compat
 import time
 import re
 import copy
@@ -30,7 +30,7 @@ from pandas.core.reshape import block2d_to_blocknd, factor_indexer
 from pandas.core.index import _ensure_index
 import pandas.core.common as com
 from pandas.tools.merge import concat
-from pandas.util import compat
+from pandas import compat
 from pandas.io.common import PerformanceWarning
 
 import pandas.lib as lib
diff --git a/pandas/io/sql.py b/pandas/io/sql.py
index 3a88f4e3b..b65c35e6b 100644
--- a/pandas/io/sql.py
+++ b/pandas/io/sql.py
@@ -5,8 +5,8 @@ retrieval and to reduce dependency on DB-specific API.
 from __future__ import print_function
 from datetime import datetime, date
 
-from pandas.util.compat import range, lzip, map, zip
-import pandas.util.compat as compat
+from pandas.compat import range, lzip, map, zip
+import pandas.compat as compat
 import numpy as np
 import traceback
 
diff --git a/pandas/io/stata.py b/pandas/io/stata.py
index 1ffd99b1c..21cf6d40d 100644
--- a/pandas/io/stata.py
+++ b/pandas/io/stata.py
@@ -19,9 +19,9 @@ from pandas.core.frame import DataFrame
 from pandas.core.series import Series
 from pandas.core.categorical import Categorical
 import datetime
-from pandas.util import compat
-from pandas.util import compat
-from pandas.util.compat import StringIO, long, lrange, lmap, lzip
+from pandas import compat
+from pandas import compat
+from pandas.compat import StringIO, long, lrange, lmap, lzip
 from pandas import isnull
 from pandas.io.parsers import _parser_params, Appender
 from pandas.io.common import get_filepath_or_buffer
diff --git a/pandas/io/tests/generate_legacy_pickles.py b/pandas/io/tests/generate_legacy_pickles.py
index ab08ff505..f5d949e2c 100644
--- a/pandas/io/tests/generate_legacy_pickles.py
+++ b/pandas/io/tests/generate_legacy_pickles.py
@@ -1,7 +1,7 @@
 """ self-contained to write legacy pickle files """
 from __future__ import print_function
 
-from pandas.util.compat import zip, cPickle as pickle
+from pandas.compat import zip, cPickle as pickle
 
 def _create_sp_series():
 
diff --git a/pandas/io/tests/test_cparser.py b/pandas/io/tests/test_cparser.py
index d15262bb6..d5f62cf90 100644
--- a/pandas/io/tests/test_cparser.py
+++ b/pandas/io/tests/test_cparser.py
@@ -2,9 +2,9 @@
 C/Cython ascii file parser tests
 """
 
-from pandas.util.compat import StringIO, BytesIO, map
+from pandas.compat import StringIO, BytesIO, map
 from datetime import datetime
-from pandas.util import compat
+from pandas import compat
 import csv
 import os
 import sys
@@ -23,7 +23,7 @@ from pandas.io.parsers import (read_csv, read_table, read_fwf,
 from pandas.util.testing import (assert_almost_equal, assert_frame_equal,
                                  assert_series_equal, network)
 import pandas.lib as lib
-from pandas.util import compat
+from pandas import compat
 from pandas.lib import Timestamp
 
 import pandas.util.testing as tm
diff --git a/pandas/io/tests/test_data.py b/pandas/io/tests/test_data.py
index 1e1267558..c85fd61e9 100644
--- a/pandas/io/tests/test_data.py
+++ b/pandas/io/tests/test_data.py
@@ -1,5 +1,5 @@
 from __future__ import print_function
-from pandas.util import compat
+from pandas import compat
 import unittest
 import warnings
 import nose
diff --git a/pandas/io/tests/test_date_converters.py b/pandas/io/tests/test_date_converters.py
index 13f03683d..8c1009b90 100644
--- a/pandas/io/tests/test_date_converters.py
+++ b/pandas/io/tests/test_date_converters.py
@@ -1,4 +1,4 @@
-from pandas.util.compat import StringIO, BytesIO
+from pandas.compat import StringIO, BytesIO
 from datetime import date, datetime
 import csv
 import os
@@ -19,7 +19,7 @@ from pandas.io.parsers import (read_csv, read_table, read_fwf,
 from pandas.util.testing import (assert_almost_equal, assert_frame_equal,
                                  assert_series_equal, network)
 import pandas.lib as lib
-from pandas.util import compat
+from pandas import compat
 from pandas.lib import Timestamp
 import pandas.io.date_converters as conv
 
diff --git a/pandas/io/tests/test_excel.py b/pandas/io/tests/test_excel.py
index 764c5959e..1ac4d4e31 100644
--- a/pandas/io/tests/test_excel.py
+++ b/pandas/io/tests/test_excel.py
@@ -1,6 +1,6 @@
 # pylint: disable=E1101
 
-from pandas.util.compat import StringIO, BytesIO, PY3, u, range, map
+from pandas.compat import StringIO, BytesIO, PY3, u, range, map
 from datetime import datetime
 from os.path import split as psplit
 import csv
@@ -27,7 +27,7 @@ import pandas.util.testing as tm
 import pandas as pd
 
 import pandas.lib as lib
-from pandas.util import compat
+from pandas import compat
 from pandas.lib import Timestamp
 from pandas.tseries.index import date_range
 import pandas.tseries.tools as tools
diff --git a/pandas/io/tests/test_html.py b/pandas/io/tests/test_html.py
index 09e2c86dd..44e4b5cfd 100644
--- a/pandas/io/tests/test_html.py
+++ b/pandas/io/tests/test_html.py
@@ -12,8 +12,8 @@ from nose.tools import assert_raises
 import numpy as np
 from numpy.random import rand
 from numpy.testing.decorators import slow
-from pandas.util.compat import map, zip, StringIO
-import pandas.util.compat as compat
+from pandas.compat import map, zip, StringIO
+import pandas.compat as compat
 
 try:
     from importlib import import_module
diff --git a/pandas/io/tests/test_json/test_pandas.py b/pandas/io/tests/test_json/test_pandas.py
index 94138ccbc..893243d14 100644
--- a/pandas/io/tests/test_json/test_pandas.py
+++ b/pandas/io/tests/test_json/test_pandas.py
@@ -2,8 +2,8 @@
 # pylint: disable-msg=W0612,E1101
 from copy import deepcopy
 from datetime import datetime, timedelta
-from pandas.util.compat import range, lrange, StringIO, cPickle as pickle
-from pandas.util import compat
+from pandas.compat import range, lrange, StringIO, cPickle as pickle
+from pandas import compat
 from pandas.io.common import URLError
 import operator
 import os
diff --git a/pandas/io/tests/test_json/test_ujson.py b/pandas/io/tests/test_json/test_ujson.py
index 6d89daa7e..ff684e30b 100644
--- a/pandas/io/tests/test_json/test_ujson.py
+++ b/pandas/io/tests/test_json/test_ujson.py
@@ -16,10 +16,10 @@ import re
 import random
 import decimal
 from functools import partial
-from pandas.util.compat import range, zip, StringIO, u
-from pandas.util import compat
+from pandas.compat import range, zip, StringIO, u
+from pandas import compat
 import pandas.json as ujson
-import pandas.util.compat as compat
+import pandas.compat as compat
 
 import numpy as np
 from pandas.util.testing import assert_almost_equal
diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index 0f46ffa90..163171c56 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -12,7 +12,7 @@ from numpy import nan
 import numpy as np
 
 from pandas import DataFrame, Series, Index, MultiIndex, DatetimeIndex
-from pandas.util.compat import(
+from pandas.compat import(
     StringIO, BytesIO, PY3, range, long, lrange, lmap, u, map, StringIO
 )
 from pandas.io.common import urlopen, URLError
@@ -28,7 +28,7 @@ import pandas.util.testing as tm
 import pandas as pd
 
 import pandas.lib as lib
-from pandas.util import compat
+from pandas import compat
 from pandas.lib import Timestamp
 from pandas.tseries.index import date_range
 import pandas.tseries.tools as tools
diff --git a/pandas/io/tests/test_pickle.py b/pandas/io/tests/test_pickle.py
index 55e4756dc..3c805e9fa 100644
--- a/pandas/io/tests/test_pickle.py
+++ b/pandas/io/tests/test_pickle.py
@@ -14,7 +14,7 @@ import pandas.util.testing as tm
 import pandas as pd
 from pandas import Index
 from pandas.sparse.tests import test_sparse
-from pandas.util import compat
+from pandas import compat
 from pandas.util.misc import is_little_endian
 
 class TestPickle(unittest.TestCase):
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index ee5b70ccb..3c532ea28 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -1,5 +1,5 @@
 from __future__ import print_function
-from pandas.util.compat import range, lrange, u
+from pandas.compat import range, lrange, u
 import nose
 import unittest
 import os
@@ -19,7 +19,7 @@ import pandas.util.testing as tm
 from pandas.tests.test_series import assert_series_equal
 from pandas.tests.test_frame import assert_frame_equal
 from pandas import concat, Timestamp
-from pandas.util import compat
+from pandas import compat
 
 from numpy.testing.decorators import slow
 
diff --git a/pandas/io/tests/test_sql.py b/pandas/io/tests/test_sql.py
index 8990515ce..624f16b32 100644
--- a/pandas/io/tests/test_sql.py
+++ b/pandas/io/tests/test_sql.py
@@ -11,8 +11,8 @@ import numpy as np
 
 from pandas.core.datetools import format as date_format
 from pandas.core.api import DataFrame, isnull
-from pandas.util.compat import StringIO, range, lrange
-import pandas.util.compat as compat
+from pandas.compat import StringIO, range, lrange
+import pandas.compat as compat
 
 import pandas.io.sql as sql
 import pandas.util.testing as tm
diff --git a/pandas/io/wb.py b/pandas/io/wb.py
index 867032cc9..7c50c0b41 100644
--- a/pandas/io/wb.py
+++ b/pandas/io/wb.py
@@ -1,6 +1,6 @@
 from __future__ import print_function
 
-from pandas.util.compat import map, reduce, range, lrange
+from pandas.compat import map, reduce, range, lrange
 from pandas.io.common import urlopen
 from pandas.io import json
 import pandas
diff --git a/pandas/rpy/common.py b/pandas/rpy/common.py
index 54fe50b44..a640b43ab 100644
--- a/pandas/rpy/common.py
+++ b/pandas/rpy/common.py
@@ -4,7 +4,7 @@ developer-friendly.
 """
 from __future__ import print_function
 
-from pandas.util.compat import zip, range
+from pandas.compat import zip, range
 import numpy as np
 
 import pandas as pd
diff --git a/pandas/sparse/array.py b/pandas/sparse/array.py
index 7dee8230b..7710749a8 100644
--- a/pandas/sparse/array.py
+++ b/pandas/sparse/array.py
@@ -11,7 +11,7 @@ import operator
 from pandas.core.base import PandasObject
 import pandas.core.common as com
 
-from pandas.util import compat
+from pandas import compat
 
 from pandas._sparse import BlockIndex, IntIndex
 import pandas._sparse as splib
diff --git a/pandas/sparse/frame.py b/pandas/sparse/frame.py
index 4505aac4e..d10809403 100644
--- a/pandas/sparse/frame.py
+++ b/pandas/sparse/frame.py
@@ -6,8 +6,8 @@ with float64 data
 # pylint: disable=E1101,E1103,W0231,E0202
 
 from numpy import nan
-from pandas.util.compat import range, lmap, map
-from pandas.util import compat
+from pandas.compat import range, lmap, map
+from pandas import compat
 import numpy as np
 
 from pandas.core.common import _pickle_array, _unpickle_array, _try_sort
diff --git a/pandas/sparse/panel.py b/pandas/sparse/panel.py
index 3f6b5e0d7..260d64824 100644
--- a/pandas/sparse/panel.py
+++ b/pandas/sparse/panel.py
@@ -5,8 +5,8 @@ with float64 data
 
 # pylint: disable=E1101,E1103,W0231
 
-from pandas.util.compat import range, lrange, zip
-from pandas.util import compat
+from pandas.compat import range, lrange, zip
+from pandas import compat
 import numpy as np
 
 from pandas.core.index import Index, MultiIndex, _ensure_index
diff --git a/pandas/sparse/series.py b/pandas/sparse/series.py
index 866ee5cb1..83adf135d 100644
--- a/pandas/sparse/series.py
+++ b/pandas/sparse/series.py
@@ -17,7 +17,7 @@ from pandas.core.frame import DataFrame
 import pandas.core.common as com
 import pandas.core.datetools as datetools
 
-from pandas.util import compat
+from pandas import compat
 
 from pandas.sparse.array import (make_sparse, _sparse_array_op, SparseArray)
 from pandas._sparse import BlockIndex, IntIndex
diff --git a/pandas/sparse/tests/test_array.py b/pandas/sparse/tests/test_array.py
index f11632e28..bd5f99ef7 100644
--- a/pandas/sparse/tests/test_array.py
+++ b/pandas/sparse/tests/test_array.py
@@ -1,4 +1,4 @@
-from pandas.util.compat import range
+from pandas.compat import range
 import re
 from numpy import nan, ndarray
 import numpy as np
diff --git a/pandas/sparse/tests/test_list.py b/pandas/sparse/tests/test_list.py
index 8be3026dd..21241050e 100644
--- a/pandas/sparse/tests/test_list.py
+++ b/pandas/sparse/tests/test_list.py
@@ -1,4 +1,4 @@
-from pandas.util.compat import range
+from pandas.compat import range
 import unittest
 
 from numpy import nan
diff --git a/pandas/sparse/tests/test_sparse.py b/pandas/sparse/tests/test_sparse.py
index 6a4280e05..248c920b0 100644
--- a/pandas/sparse/tests/test_sparse.py
+++ b/pandas/sparse/tests/test_sparse.py
@@ -22,8 +22,8 @@ from pandas.tseries.index import DatetimeIndex
 import pandas.core.datetools as datetools
 from pandas.core.common import isnull
 import pandas.util.testing as tm
-from pandas.util.compat import range, lrange, cPickle as pickle, StringIO, lrange
-from pandas.util import compat
+from pandas.compat import range, lrange, cPickle as pickle, StringIO, lrange
+from pandas import compat
 
 import pandas.sparse.frame as spf
 
diff --git a/pandas/src/generate_code.py b/pandas/src/generate_code.py
index b94ec6df7..70b68eae7 100644
--- a/pandas/src/generate_code.py
+++ b/pandas/src/generate_code.py
@@ -1,5 +1,5 @@
 from __future__ import print_function
-from pandas.util.compat import range, cStringIO as StringIO
+from pandas.compat import range, cStringIO as StringIO
 import os
 
 header = """
diff --git a/pandas/stats/fama_macbeth.py b/pandas/stats/fama_macbeth.py
index 04dd7e045..38fb5894c 100644
--- a/pandas/stats/fama_macbeth.py
+++ b/pandas/stats/fama_macbeth.py
@@ -1,5 +1,5 @@
 from pandas.core.base import StringMixin
-from pandas.util.compat import StringIO, range
+from pandas.compat import StringIO, range
 
 import numpy as np
 
diff --git a/pandas/stats/math.py b/pandas/stats/math.py
index 583c588c9..64548b90d 100644
--- a/pandas/stats/math.py
+++ b/pandas/stats/math.py
@@ -3,7 +3,7 @@
 
 from __future__ import division
 
-from pandas.util.compat import range
+from pandas.compat import range
 import numpy as np
 import numpy.linalg as linalg
 
diff --git a/pandas/stats/misc.py b/pandas/stats/misc.py
index aeeec7068..c79bae34f 100644
--- a/pandas/stats/misc.py
+++ b/pandas/stats/misc.py
@@ -1,10 +1,10 @@
 from numpy import NaN
-from pandas.util import compat
+from pandas import compat
 import numpy as np
 
 from pandas.core.api import Series, DataFrame, isnull, notnull
 from pandas.core.series import remove_na
-from pandas.util.compat import zip
+from pandas.compat import zip
 
 
 def zscore(series):
diff --git a/pandas/stats/ols.py b/pandas/stats/ols.py
index 9ea85739d..2b8f6fc16 100644
--- a/pandas/stats/ols.py
+++ b/pandas/stats/ols.py
@@ -4,9 +4,9 @@ Ordinary least squares regression
 
 # pylint: disable-msg=W0201
 
-from pandas.util.compat import zip, range, StringIO
+from pandas.compat import zip, range, StringIO
 from itertools import starmap
-from pandas.util import compat
+from pandas import compat
 import numpy as np
 
 from pandas.core.api import DataFrame, Series, isnull
diff --git a/pandas/stats/plm.py b/pandas/stats/plm.py
index 923f1b427..2c4e4c47c 100644
--- a/pandas/stats/plm.py
+++ b/pandas/stats/plm.py
@@ -6,8 +6,8 @@ Linear regression objects for panel data
 # pylint: disable-msg=E1101,E1103
 
 from __future__ import division
-from pandas.util.compat import range
-from pandas.util import compat
+from pandas.compat import range
+from pandas import compat
 import warnings
 
 import numpy as np
diff --git a/pandas/stats/tests/test_fama_macbeth.py b/pandas/stats/tests/test_fama_macbeth.py
index 6d315ceec..dd2f19636 100644
--- a/pandas/stats/tests/test_fama_macbeth.py
+++ b/pandas/stats/tests/test_fama_macbeth.py
@@ -2,8 +2,8 @@ from pandas import DataFrame, Panel
 from pandas.stats.api import fama_macbeth
 from .common import assert_almost_equal, BaseTest
 
-from pandas.util.compat import range
-from pandas.util import compat
+from pandas.compat import range
+from pandas import compat
 import numpy as np
 
 
diff --git a/pandas/stats/tests/test_moments.py b/pandas/stats/tests/test_moments.py
index 233ca78ce..24fc04d84 100644
--- a/pandas/stats/tests/test_moments.py
+++ b/pandas/stats/tests/test_moments.py
@@ -14,7 +14,7 @@ from pandas.util.testing import (
 import pandas.core.datetools as datetools
 import pandas.stats.moments as mom
 import pandas.util.testing as tm
-from pandas.util.compat import range, zip, PY3, StringIO
+from pandas.compat import range, zip, PY3, StringIO
 
 N, K = 100, 10
 
diff --git a/pandas/stats/tests/test_ols.py b/pandas/stats/tests/test_ols.py
index f9bcb6fab..697425c8e 100644
--- a/pandas/stats/tests/test_ols.py
+++ b/pandas/stats/tests/test_ols.py
@@ -7,7 +7,7 @@ Unit test suite for OLS and PanelOLS classes
 from __future__ import division
 
 from datetime import datetime
-from pandas.util import compat
+from pandas import compat
 import unittest
 import nose
 import numpy as np
@@ -22,7 +22,7 @@ from pandas.stats.plm import NonPooledPanelOLS, PanelOLS
 from pandas.util.testing import (assert_almost_equal, assert_series_equal,
                                  assert_frame_equal, assertRaisesRegexp)
 import pandas.util.testing as tm
-import pandas.util.compat as compat
+import pandas.compat as compat
 from .common import BaseTest
 
 _have_statsmodels = True
diff --git a/pandas/stats/tests/test_var.py b/pandas/stats/tests/test_var.py
index 1c7eec126..ab5709d01 100644
--- a/pandas/stats/tests/test_var.py
+++ b/pandas/stats/tests/test_var.py
@@ -3,7 +3,7 @@ from numpy.testing import run_module_suite, assert_equal, TestCase
 
 from pandas.util.testing import assert_almost_equal
 
-from pandas.util.compat import range
+from pandas.compat import range
 import nose
 import unittest
 
diff --git a/pandas/stats/var.py b/pandas/stats/var.py
index 2337dcf9c..be55507f9 100644
--- a/pandas/stats/var.py
+++ b/pandas/stats/var.py
@@ -1,7 +1,7 @@
 from __future__ import division
 
-from pandas.util.compat import range, lrange, zip, reduce
-from pandas.util import compat
+from pandas.compat import range, lrange, zip, reduce
+from pandas import compat
 import numpy as np
 from pandas.core.base import StringMixin
 from pandas.util.decorators import cache_readonly
diff --git a/pandas/tests/test_algos.py b/pandas/tests/test_algos.py
index af3b56e04..d0a050984 100644
--- a/pandas/tests/test_algos.py
+++ b/pandas/tests/test_algos.py
@@ -1,4 +1,4 @@
-from pandas.util.compat import range
+from pandas.compat import range
 import unittest
 
 import numpy as np
diff --git a/pandas/tests/test_categorical.py b/pandas/tests/test_categorical.py
index dc60cda24..29d104e9c 100644
--- a/pandas/tests/test_categorical.py
+++ b/pandas/tests/test_categorical.py
@@ -1,7 +1,7 @@
 # pylint: disable=E1101,E1103,W0232
 
 from datetime import datetime
-from pandas.util.compat import range, lrange
+from pandas.compat import range, lrange
 import unittest
 import nose
 
diff --git a/pandas/tests/test_common.py b/pandas/tests/test_common.py
index 7001f582e..ca119a8e2 100644
--- a/pandas/tests/test_common.py
+++ b/pandas/tests/test_common.py
@@ -6,7 +6,7 @@ import nose
 import unittest
 
 from pandas import Series, DataFrame, date_range, DatetimeIndex, Timestamp
-from pandas.util.compat import range, long, lrange, lmap, u, map
+from pandas.compat import range, long, lrange, lmap, u, map
 from pandas.core.common import notnull, isnull
 import pandas.core.common as com
 import pandas.util.testing as tm
@@ -15,7 +15,7 @@ import pandas.core.config as cf
 import numpy as np
 
 from pandas.tslib import iNaT
-from pandas.util import compat
+from pandas import compat
 
 _multiprocess_can_split_ = True
 
diff --git a/pandas/tests/test_compat.py b/pandas/tests/test_compat.py
index fe5c7590d..a8b9a8812 100644
--- a/pandas/tests/test_compat.py
+++ b/pandas/tests/test_compat.py
@@ -2,7 +2,7 @@
 Testing that functions from compat work as expected
 """
 
-from pandas.util.compat import (
+from pandas.compat import (
     range, zip, map, filter,
     lrange, lzip, lmap, lfilter,
     builtins
diff --git a/pandas/tests/test_expressions.py b/pandas/tests/test_expressions.py
index 8cfffaacc..ff76c7c07 100644
--- a/pandas/tests/test_expressions.py
+++ b/pandas/tests/test_expressions.py
@@ -17,7 +17,7 @@ from pandas.core import expressions as expr
 from pandas.util.testing import (assert_almost_equal,
                                  assert_series_equal,
                                  assert_frame_equal)
-from pandas.util import compat
+from pandas import compat
 
 import pandas.util.testing as tm
 import pandas.lib as lib
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index 7cd484f50..e7a527560 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -1,8 +1,8 @@
 from __future__ import print_function
 # -*- coding: utf-8 -*-
 
-from pandas.util.compat import range, zip, lrange, StringIO, PY3, lzip, u
-import pandas.util.compat as compat
+from pandas.compat import range, zip, lrange, StringIO, PY3, lzip, u
+import pandas.compat as compat
 import os
 import sys
 import unittest
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 39a62ddc3..e08f35523 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -7,11 +7,11 @@ import re
 import unittest
 import nose
 
-from pandas.util.compat import(
+from pandas.compat import(
     map, zip, range, long, lrange, lmap, lzip,
     OrderedDict, cPickle as pickle, u, StringIO
 )
-from pandas.util import compat
+from pandas import compat
 
 from numpy import random, nan
 from numpy.random import randn
diff --git a/pandas/tests/test_graphics.py b/pandas/tests/test_graphics.py
index 4364e741c..f017acce0 100644
--- a/pandas/tests/test_graphics.py
+++ b/pandas/tests/test_graphics.py
@@ -6,7 +6,7 @@ import unittest
 from datetime import datetime, date
 
 from pandas import Series, DataFrame, MultiIndex, PeriodIndex, date_range
-from pandas.util.compat import range, lrange, StringIO, lmap, lzip, u, map, zip
+from pandas.compat import range, lrange, StringIO, lmap, lzip, u, map, zip
 import pandas.util.testing as tm
 from pandas.util.testing import ensure_clean
 from pandas.core.config import set_option
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 58b7d808e..19f15e44d 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -13,10 +13,10 @@ from pandas.core.groupby import GroupByError, SpecificationError, DataError
 from pandas.core.series import Series
 from pandas.util.testing import (assert_panel_equal, assert_frame_equal,
                                  assert_series_equal, assert_almost_equal)
-from pandas.util.compat import(
+from pandas.compat import(
     range, long, lrange, StringIO, lmap, lzip, map, zip, builtins, OrderedDict
 )
-from pandas.util import compat
+from pandas import compat
 from pandas.core.panel import Panel
 from pandas.tools.merge import concat
 from collections import defaultdict
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 46fd7f218..200bc5d66 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -1,7 +1,7 @@
 # pylint: disable=E1101,E1103,W0232
 
 from datetime import datetime, timedelta
-from pandas.util.compat import range, lrange, lzip, u, zip
+from pandas.compat import range, lrange, lzip, u, zip
 import operator
 import pickle
 import unittest
@@ -13,7 +13,7 @@ from numpy.testing import assert_array_equal
 
 from pandas.core.index import Index, Int64Index, MultiIndex
 from pandas.util.testing import assert_almost_equal
-from pandas.util import compat
+from pandas import compat
 
 import pandas.util.testing as tm
 import pandas.core.config as cf
diff --git a/pandas/tests/test_indexing.py b/pandas/tests/test_indexing.py
index f2b22a4d9..f6a6bd158 100644
--- a/pandas/tests/test_indexing.py
+++ b/pandas/tests/test_indexing.py
@@ -3,7 +3,7 @@ import unittest
 import nose
 import itertools
 
-from pandas.util.compat import range, lrange, StringIO, lmap, map
+from pandas.compat import range, lrange, StringIO, lmap, map
 from numpy import random, nan
 from numpy.random import randn
 import numpy as np
@@ -15,7 +15,7 @@ from pandas.core.api import (DataFrame, Index, Series, Panel, notnull, isnull,
                              MultiIndex, DatetimeIndex, Timestamp)
 from pandas.util.testing import (assert_almost_equal, assert_series_equal,
                                  assert_frame_equal, assert_panel_equal)
-from pandas.util import compat
+from pandas import compat
 
 import pandas.util.testing as tm
 import pandas.lib as lib
diff --git a/pandas/tests/test_internals.py b/pandas/tests/test_internals.py
index 2490fa211..6f1367833 100644
--- a/pandas/tests/test_internals.py
+++ b/pandas/tests/test_internals.py
@@ -11,7 +11,7 @@ import pandas.util.testing as tm
 
 from pandas.util.testing import (
     assert_almost_equal, assert_frame_equal, randn)
-from pandas.util.compat import zip, u
+from pandas.compat import zip, u
 
 
 def assert_block_equal(left, right):
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index a98b613ae..d54fc32b6 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -13,7 +13,7 @@ from pandas.util.testing import (assert_almost_equal,
                                  assert_frame_equal)
 import pandas.core.common as com
 import pandas.util.testing as tm
-from pandas.util.compat import (range, lrange, StringIO, lzip, u, cPickle,
+from pandas.compat import (range, lrange, StringIO, lzip, u, cPickle,
                                 product as cart_product, zip)
 import pandas as pd
 
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 38117a591..d04192772 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -1,8 +1,8 @@
 # pylint: disable=W0612,E1101
 
 from datetime import datetime
-from pandas.util.compat import range, lrange, StringIO, cPickle, OrderedDict
-from pandas.util import compat
+from pandas.compat import range, lrange, StringIO, cPickle, OrderedDict
+from pandas import compat
 import operator
 import unittest
 import nose
@@ -15,7 +15,7 @@ from pandas.core.frame import group_agg
 from pandas.core.panel import Panel
 from pandas.core.series import remove_na
 import pandas.core.common as com
-from pandas.util import compat
+from pandas import compat
 
 from pandas.util.testing import (assert_panel_equal,
                                  assert_frame_equal,
diff --git a/pandas/tests/test_panel4d.py b/pandas/tests/test_panel4d.py
index f1b9bc645..3c6ab1812 100644
--- a/pandas/tests/test_panel4d.py
+++ b/pandas/tests/test_panel4d.py
@@ -1,5 +1,5 @@
 from datetime import datetime
-from pandas.util.compat import range, lrange
+from pandas.compat import range, lrange
 import os
 import operator
 import unittest
@@ -15,7 +15,7 @@ from pandas.core.panel4d import Panel4D
 from pandas.core.series import remove_na
 import pandas.core.common as com
 import pandas.core.panel as panelmod
-from pandas.util import compat
+from pandas import compat
 
 from pandas.util.testing import (assert_panel_equal,
                                  assert_panel4d_equal,
@@ -23,7 +23,7 @@ from pandas.util.testing import (assert_panel_equal,
                                  assert_series_equal,
                                  assert_almost_equal)
 import pandas.util.testing as tm
-import pandas.util.compat as compat
+import pandas.compat as compat
 
 
 def add_nans(panel4d):
diff --git a/pandas/tests/test_panelnd.py b/pandas/tests/test_panelnd.py
index 452fd2470..e19583924 100644
--- a/pandas/tests/test_panelnd.py
+++ b/pandas/tests/test_panelnd.py
@@ -9,7 +9,7 @@ import numpy as np
 from pandas.core import panelnd
 from pandas.core.panel import Panel
 import pandas.core.common as com
-from pandas.util import compat
+from pandas import compat
 
 from pandas.util.testing import (assert_panel_equal,
                                  assert_panel4d_equal,
diff --git a/pandas/tests/test_reshape.py b/pandas/tests/test_reshape.py
index e285d9764..0c6c34ff4 100644
--- a/pandas/tests/test_reshape.py
+++ b/pandas/tests/test_reshape.py
@@ -15,7 +15,7 @@ import numpy as np
 
 from pandas.core.reshape import melt, convert_dummies, lreshape
 import pandas.util.testing as tm
-from pandas.util.compat import StringIO, cPickle, range
+from pandas.compat import StringIO, cPickle, range
 
 _multiprocess_can_split_ = True
 
diff --git a/pandas/tests/test_rplot.py b/pandas/tests/test_rplot.py
index 176ffa231..e7faa8f25 100644
--- a/pandas/tests/test_rplot.py
+++ b/pandas/tests/test_rplot.py
@@ -1,4 +1,4 @@
-from pandas.util.compat import range
+from pandas.compat import range
 import unittest
 import pandas.tools.rplot as rplot
 import pandas.util.testing as tm
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 3ab924312..151a97a28 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -23,8 +23,8 @@ import pandas.lib as lib
 import pandas.core.datetools as datetools
 import pandas.core.nanops as nanops
 
-from pandas.util.compat import StringIO, lrange, range, zip, u, OrderedDict
-from pandas.util import compat
+from pandas.compat import StringIO, lrange, range, zip, u, OrderedDict
+from pandas import compat
 from pandas.util.testing import (assert_series_equal,
                                  assert_almost_equal,
                                  ensure_clean)
diff --git a/pandas/tests/test_stats.py b/pandas/tests/test_stats.py
index c8fb09cb3..e3533afc7 100644
--- a/pandas/tests/test_stats.py
+++ b/pandas/tests/test_stats.py
@@ -1,4 +1,4 @@
-from pandas.util import compat
+from pandas import compat
 import nose
 import unittest
 
@@ -7,7 +7,7 @@ import numpy as np
 
 from pandas import Series, DataFrame
 
-from pandas.util.compat import product
+from pandas.compat import product
 from pandas.util.testing import (assert_frame_equal,
                                  assert_series_equal,
                                  assert_almost_equal)
diff --git a/pandas/tests/test_strings.py b/pandas/tests/test_strings.py
index d3bdb4372..4170f34c1 100644
--- a/pandas/tests/test_strings.py
+++ b/pandas/tests/test_strings.py
@@ -13,8 +13,8 @@ import numpy as np
 from numpy.testing import assert_array_equal
 from numpy.random import randint
 
-from pandas.util.compat import range, lrange, u
-import pandas.util.compat as compat
+from pandas.compat import range, lrange, u
+import pandas.compat as compat
 from pandas import (Index, Series, TimeSeries, DataFrame, isnull, notnull,
                     bdate_range, date_range)
 import pandas.core.common as com
diff --git a/pandas/tests/test_tseries.py b/pandas/tests/test_tseries.py
index 651c888a0..1ed6dd446 100644
--- a/pandas/tests/test_tseries.py
+++ b/pandas/tests/test_tseries.py
@@ -5,7 +5,7 @@ import numpy as np
 from pandas import Index, isnull, Timestamp
 from pandas.util.testing import assert_almost_equal
 import pandas.util.testing as common
-from pandas.util.compat import range, lrange, zip
+from pandas.compat import range, lrange, zip
 import pandas.lib as lib
 import pandas.algos as algos
 from datetime import datetime
diff --git a/pandas/tools/merge.py b/pandas/tools/merge.py
index 04c7dfa6e..7133782fa 100644
--- a/pandas/tools/merge.py
+++ b/pandas/tools/merge.py
@@ -4,8 +4,8 @@ SQL-style merge routines
 import types
 
 import numpy as np
-from pandas.util.compat import range, long, lrange, lzip, zip
-import pandas.util.compat as compat
+from pandas.compat import range, long, lrange, lzip, zip
+import pandas.compat as compat
 from pandas.core.categorical import Categorical
 from pandas.core.frame import DataFrame, _merge_doc
 from pandas.core.generic import NDFrame
diff --git a/pandas/tools/pivot.py b/pandas/tools/pivot.py
index ed463fbe6..effcc3ff7 100644
--- a/pandas/tools/pivot.py
+++ b/pandas/tools/pivot.py
@@ -5,8 +5,8 @@ from pandas.core.index import MultiIndex
 from pandas.core.reshape import _unstack_multiple
 from pandas.tools.merge import concat
 from pandas.tools.util import cartesian_product
-from pandas.util.compat import range, lrange, zip
-from pandas.util import compat
+from pandas.compat import range, lrange, zip
+from pandas import compat
 import pandas.core.common as com
 import numpy as np
 
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index aef035ec4..3e3fff32a 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -15,8 +15,8 @@ from pandas.tseries.index import DatetimeIndex
 from pandas.tseries.period import PeriodIndex, Period
 from pandas.tseries.frequencies import get_period_alias, get_base_alias
 from pandas.tseries.offsets import DateOffset
-from pandas.util.compat import range, lrange, lmap, map, zip
-import pandas.util.compat as compat
+from pandas.compat import range, lrange, lmap, map, zip
+import pandas.compat as compat
 
 try:  # mpl optional
     import pandas.tseries.converter as conv
diff --git a/pandas/tools/rplot.py b/pandas/tools/rplot.py
index 0bd1e79a1..5928472df 100644
--- a/pandas/tools/rplot.py
+++ b/pandas/tools/rplot.py
@@ -2,7 +2,7 @@ import random
 from copy import deepcopy
 
 import numpy as np
-from pandas.util.compat import range, zip
+from pandas.compat import range, zip
 #
 # TODO:
 # * Make sure legends work properly
diff --git a/pandas/tools/tests/test_merge.py b/pandas/tools/tests/test_merge.py
index c3b91ed27..1008e23c3 100644
--- a/pandas/tools/tests/test_merge.py
+++ b/pandas/tools/tests/test_merge.py
@@ -9,8 +9,8 @@ from numpy import nan
 import numpy as np
 import random
 
-from pandas.util.compat import range, lrange, lzip, zip
-from pandas.util import compat
+from pandas.compat import range, lrange, lzip, zip
+from pandas import compat
 from pandas.tseries.index import DatetimeIndex
 from pandas.tools.merge import merge, concat, ordered_merge, MergeError
 from pandas.util.testing import (assert_frame_equal, assert_series_equal,
diff --git a/pandas/tools/tests/test_pivot.py b/pandas/tools/tests/test_pivot.py
index 8d3f25a7d..57e7d2f7f 100644
--- a/pandas/tools/tests/test_pivot.py
+++ b/pandas/tools/tests/test_pivot.py
@@ -8,7 +8,7 @@ import pandas
 from pandas import DataFrame, Series, Index, MultiIndex
 from pandas.tools.merge import concat
 from pandas.tools.pivot import pivot_table, crosstab
-from pandas.util.compat import range, u, product
+from pandas.compat import range, u, product
 import pandas.util.testing as tm
 
 
diff --git a/pandas/tools/tests/test_tile.py b/pandas/tools/tests/test_tile.py
index d939bebde..53258864b 100644
--- a/pandas/tools/tests/test_tile.py
+++ b/pandas/tools/tests/test_tile.py
@@ -3,7 +3,7 @@ import nose
 import unittest
 
 import numpy as np
-from pandas.util.compat import zip
+from pandas.compat import zip
 
 from pandas import DataFrame, Series, unique
 import pandas.util.testing as tm
diff --git a/pandas/tools/tile.py b/pandas/tools/tile.py
index f987042bb..aa64b046c 100644
--- a/pandas/tools/tile.py
+++ b/pandas/tools/tile.py
@@ -8,7 +8,7 @@ from pandas.core.index import _ensure_index
 import pandas.core.algorithms as algos
 import pandas.core.common as com
 import pandas.core.nanops as nanops
-from pandas.util.compat import zip
+from pandas.compat import zip
 
 import numpy as np
 
diff --git a/pandas/tools/util.py b/pandas/tools/util.py
index 1f2905b86..7de8c2537 100644
--- a/pandas/tools/util.py
+++ b/pandas/tools/util.py
@@ -8,7 +8,7 @@ def match(needles, haystack):
 
 def cartesian_product(X):
     '''
-    Numpy version of itertools.product or pandas.util.compat.product.
+    Numpy version of itertools.product or pandas.compat.product.
     Sometimes faster (for large inputs)...
 
     Examples
diff --git a/pandas/tseries/converter.py b/pandas/tseries/converter.py
index 3226a1cb4..54c2a4a2a 100644
--- a/pandas/tseries/converter.py
+++ b/pandas/tseries/converter.py
@@ -10,8 +10,8 @@ import matplotlib.dates as dates
 from matplotlib.ticker import Formatter, AutoLocator, Locator
 from matplotlib.transforms import nonsingular
 
-from pandas.util.compat import range, lrange
-import pandas.util.compat as compat
+from pandas.compat import range, lrange
+import pandas.compat as compat
 import pandas.lib as lib
 import pandas.core.common as com
 from pandas.core.index import Index
diff --git a/pandas/tseries/frequencies.py b/pandas/tseries/frequencies.py
index f6e792d4b..2c4fc0d1b 100644
--- a/pandas/tseries/frequencies.py
+++ b/pandas/tseries/frequencies.py
@@ -1,6 +1,6 @@
 from datetime import datetime
-from pandas.util.compat import range, long, zip
-from pandas.util import compat
+from pandas.compat import range, long, zip
+from pandas import compat
 import re
 
 import numpy as np
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 63e96efc2..17d357370 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -8,8 +8,8 @@ import numpy as np
 
 from pandas.core.common import isnull, _NS_DTYPE, _INT64_DTYPE
 from pandas.core.index import Index, Int64Index
-import pandas.util.compat as compat
-from pandas.util.compat import u
+import pandas.compat as compat
+from pandas.compat import u
 from pandas.tseries.frequencies import (
     infer_freq, to_offset, get_period_alias,
     Resolution, get_reso_string)
diff --git a/pandas/tseries/offsets.py b/pandas/tseries/offsets.py
index 565abc195..b78fa52f0 100644
--- a/pandas/tseries/offsets.py
+++ b/pandas/tseries/offsets.py
@@ -1,6 +1,6 @@
 from datetime import date, datetime, timedelta
-from pandas.util.compat import range
-from pandas.util import compat
+from pandas.compat import range
+from pandas import compat
 import numpy as np
 
 from pandas.tseries.tools import to_datetime
diff --git a/pandas/tseries/period.py b/pandas/tseries/period.py
index c512331ae..bf1199dc2 100644
--- a/pandas/tseries/period.py
+++ b/pandas/tseries/period.py
@@ -14,13 +14,13 @@ import pandas.tseries.frequencies as _freq_mod
 
 import pandas.core.common as com
 from pandas.core.common import isnull, _NS_DTYPE, _INT64_DTYPE
-from pandas.util import compat
+from pandas import compat
 
 from pandas.lib import Timestamp
 import pandas.lib as lib
 import pandas.tslib as tslib
 import pandas.algos as _algos
-from pandas.util.compat import map, zip, u
+from pandas.compat import map, zip, u
 
 
 #---------------
diff --git a/pandas/tseries/resample.py b/pandas/tseries/resample.py
index 687d505db..be0c5dfad 100644
--- a/pandas/tseries/resample.py
+++ b/pandas/tseries/resample.py
@@ -9,7 +9,7 @@ from pandas.tseries.offsets import DateOffset, Tick, _delta_to_nanoseconds
 from pandas.tseries.period import PeriodIndex, period_range
 import pandas.tseries.tools as tools
 import pandas.core.common as com
-import pandas.util.compat as compat
+import pandas.compat as compat
 
 from pandas.lib import Timestamp
 import pandas.lib as lib
diff --git a/pandas/tseries/tests/test_converter.py b/pandas/tseries/tests/test_converter.py
index 0d6449ec7..c3bb7d82d 100644
--- a/pandas/tseries/tests/test_converter.py
+++ b/pandas/tseries/tests/test_converter.py
@@ -6,7 +6,7 @@ import unittest
 import nose
 
 import numpy as np
-from pandas.util.compat import u
+from pandas.compat import u
 
 try:
     import pandas.tseries.converter as converter
diff --git a/pandas/tseries/tests/test_daterange.py b/pandas/tseries/tests/test_daterange.py
index ad1c04739..536d718d7 100644
--- a/pandas/tseries/tests/test_daterange.py
+++ b/pandas/tseries/tests/test_daterange.py
@@ -1,5 +1,5 @@
 from datetime import datetime
-from pandas.util.compat import range
+from pandas.compat import range
 import pickle
 import unittest
 import nose
diff --git a/pandas/tseries/tests/test_frequencies.py b/pandas/tseries/tests/test_frequencies.py
index 24d268972..6386f61a2 100644
--- a/pandas/tseries/tests/test_frequencies.py
+++ b/pandas/tseries/tests/test_frequencies.py
@@ -1,5 +1,5 @@
 from datetime import datetime, time, timedelta
-from pandas.util.compat import range
+from pandas.compat import range
 import sys
 import os
 import unittest
diff --git a/pandas/tseries/tests/test_offsets.py b/pandas/tseries/tests/test_offsets.py
index 3e64e4c03..7d026a46d 100644
--- a/pandas/tseries/tests/test_offsets.py
+++ b/pandas/tseries/tests/test_offsets.py
@@ -1,6 +1,6 @@
 from datetime import date, datetime, timedelta
-from pandas.util.compat import range
-from pandas.util import compat
+from pandas.compat import range
+from pandas import compat
 import unittest
 import nose
 from nose.tools import assert_raises
diff --git a/pandas/tseries/tests/test_period.py b/pandas/tseries/tests/test_period.py
index c2faf4511..03b1d8971 100644
--- a/pandas/tseries/tests/test_period.py
+++ b/pandas/tseries/tests/test_period.py
@@ -22,13 +22,13 @@ import pandas.tseries.period as pmod
 import pandas.core.datetools as datetools
 import pandas as pd
 import numpy as np
-from pandas.util.compat import range, lrange, lmap, map, zip
+from pandas.compat import range, lrange, lmap, map, zip
 randn = np.random.randn
 
 from pandas import Series, TimeSeries, DataFrame
 from pandas.util.testing import assert_series_equal, assert_almost_equal
 import pandas.util.testing as tm
-from pandas.util import compat
+from pandas import compat
 from numpy.testing import assert_array_equal
 
 
diff --git a/pandas/tseries/tests/test_plotting.py b/pandas/tseries/tests/test_plotting.py
index e4a707f28..717e7bfe5 100644
--- a/pandas/tseries/tests/test_plotting.py
+++ b/pandas/tseries/tests/test_plotting.py
@@ -3,7 +3,7 @@ from datetime import datetime, timedelta, date, time
 
 import unittest
 import nose
-from pandas.util.compat import range, lrange, zip
+from pandas.compat import range, lrange, zip
 
 import numpy as np
 from numpy.testing.decorators import slow
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index 52055d13f..1b75961cb 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -2,7 +2,7 @@
 
 from datetime import datetime, timedelta
 
-from pandas.util.compat import range, lrange, zip, product
+from pandas.compat import range, lrange, zip, product
 import numpy as np
 
 from pandas import Series, TimeSeries, DataFrame, Panel, isnull, notnull, Timestamp
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index e2213a85a..efee73792 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -28,7 +28,7 @@ import pandas.tslib as tslib
 
 import pandas.index as _index
 
-from pandas.util.compat import(
+from pandas.compat import(
     range, long, StringIO, lrange, lmap, map, zip, cPickle as pickle, product
 )
 from pandas import read_pickle
@@ -36,7 +36,7 @@ import pandas.core.datetools as dt
 from numpy.random import rand
 from numpy.testing import assert_array_equal
 from pandas.util.testing import assert_frame_equal
-import pandas.util.compat as compat
+import pandas.compat as compat
 from pandas.core.datetools import BDay
 import pandas.core.common as com
 from pandas import concat
diff --git a/pandas/tseries/tests/test_timezones.py b/pandas/tseries/tests/test_timezones.py
index 47e006af3..883025bee 100644
--- a/pandas/tseries/tests/test_timezones.py
+++ b/pandas/tseries/tests/test_timezones.py
@@ -27,8 +27,8 @@ import pandas.lib as lib
 import pandas.core.datetools as dt
 from numpy.random import rand
 from pandas.util.testing import assert_frame_equal
-import pandas.util.compat as compat
-from pandas.util.compat import range, lrange, zip, cPickle as pickle
+import pandas.compat as compat
+from pandas.compat import range, lrange, zip, cPickle as pickle
 from pandas.core.datetools import BDay
 import pandas.core.common as com
 
diff --git a/pandas/tseries/tests/test_util.py b/pandas/tseries/tests/test_util.py
index 84666b019..8bf448118 100644
--- a/pandas/tseries/tests/test_util.py
+++ b/pandas/tseries/tests/test_util.py
@@ -1,4 +1,4 @@
-from pandas.util.compat import range
+from pandas.compat import range
 import nose
 import unittest
 
diff --git a/pandas/tseries/tools.py b/pandas/tseries/tools.py
index f7eafdac1..9373d3076 100644
--- a/pandas/tseries/tools.py
+++ b/pandas/tseries/tools.py
@@ -7,8 +7,8 @@ import numpy as np
 import pandas.lib as lib
 import pandas.tslib as tslib
 import pandas.core.common as com
-from pandas.util.compat import StringIO, callable
-import pandas.util.compat as compat
+from pandas.compat import StringIO, callable
+import pandas.compat as compat
 
 try:
     import dateutil
diff --git a/pandas/tseries/util.py b/pandas/tseries/util.py
index 33d33045c..664a42543 100644
--- a/pandas/tseries/util.py
+++ b/pandas/tseries/util.py
@@ -1,4 +1,4 @@
-from pandas.util.compat import range, lrange
+from pandas.compat import range, lrange
 import numpy as np
 
 import pandas as pd
diff --git a/pandas/util/compat.py b/pandas/util/compat.py
deleted file mode 100644
index 27f5671ca..000000000
--- a/pandas/util/compat.py
+++ /dev/null
@@ -1,688 +0,0 @@
-"""
-compat
-======
-
-Cross-compatible functions for Python 2 and 3.
-
-Key items to import for 2/3 compatible code:
-* iterators: range(), map(), zip(), filter(), reduce()
-* lists: lrange(), lmap(), lzip(), lfilter()
-* unicode: u() [u"" is a syntax error in Python 3.0-3.2]
-* longs: long (int in Python 3)
-* callable
-* iterable method compatibility: iteritems, iterkeys, itervalues
-  * Uses the original method if available, otherwise uses items, keys, values.
-* types:
-    * text_type: unicode in Python 2, str in Python 3
-    * binary_type: str in Python 2, bythes in Python 3
-    * string_types: basestring in Python 2, str in Python 3
-* bind_method: binds functions to classes
-
-Python 2.6 compatibility:
-* OrderedDict
-* Counter
-
-Other items:
-* OrderedDefaultDict
-"""
-# pylint disable=W0611
-import functools
-import itertools
-from itertools import product
-import sys
-import types
-
-PY3 = (sys.version_info[0] >= 3)
-# import iterator versions of these functions
-
-try:
-    import __builtin__ as builtins
-    # not writeable when instantiated with string, doesn't handle unicode well
-    from cStringIO import StringIO as cStringIO
-    # always writeable
-    from StringIO import StringIO
-    BytesIO = StringIO
-    import cPickle
-except ImportError:
-    import builtins
-    from io import StringIO, BytesIO
-    cStringIO = StringIO
-    import pickle as cPickle
-
-
-if PY3:
-    def isidentifier(s):
-        return s.isidentifier()
-
-    def str_to_bytes(s, encoding='ascii'):
-        return s.encode(encoding)
-
-    def bytes_to_str(b, encoding='utf-8'):
-        return b.decode(encoding)
-
-    # have to explicitly put builtins into the namespace
-    range = range
-    map = map
-    zip = zip
-    filter = filter
-    reduce = functools.reduce
-    long = int
-    unichr = chr
-
-    # list-producing versions of the major Python iterating functions
-    def lrange(*args, **kwargs):
-        return list(range(*args, **kwargs))
-
-    def lzip(*args, **kwargs):
-        return list(zip(*args, **kwargs))
-
-    def lmap(*args, **kwargs):
-        return list(map(*args, **kwargs))
-
-    def lfilter(*args, **kwargs):
-        return list(filter(*args, **kwargs))
-else:
-    # Python 2
-    import re
-    _name_re = re.compile(r"[a-zA-Z_][a-zA-Z0-9_]*$")
-
-    def isidentifier(s, dotted=False):
-        return bool(_name_re.match(s))
-
-    def str_to_bytes(s, encoding='ascii'):
-        return s
-
-    def bytes_to_str(b, encoding='ascii'):
-        return b
-
-    range = xrange
-    zip = itertools.izip
-    filter = itertools.ifilter
-    map = itertools.imap
-    reduce = reduce
-    long = long
-    unichr = unichr
-
-    # Python 2-builtin ranges produce lists
-    lrange = builtins.range
-    lzip = builtins.zip
-    lmap = builtins.map
-    lfilter = builtins.filter
-
-
-def iteritems(obj, **kwargs):
-    """replacement for six's iteritems for Python2/3 compat
-       uses 'iteritems' if available and otherwise uses 'items'.
-
-       Passes kwargs to method."""
-    func = getattr(obj, "iteritems", None)
-    if not func:
-        func = obj.items
-    return func(**kwargs)
-
-
-def iterkeys(obj, **kwargs):
-    func = getattr(obj, "iterkeys", None)
-    if not func:
-        func = obj.keys
-    return func(**kwargs)
-
-
-def itervalues(obj, **kwargs):
-    func = getattr(obj, "itervalues", None)
-    if not func:
-        func = obj.values
-    return func(**kwargs)
-
-
-def bind_method(cls, name, func):
-    """Bind a method to class, python 2 and python 3 compatible.
-
-    Parameters
-    ----------
-
-    cls : type
-        class to receive bound method
-    name : basestring
-        name of method on class instance
-    func : function
-        function to be bound as method
-
-
-    Returns
-    -------
-    None
-    """
-    # only python 2 has bound/unbound method issue
-    if not PY3:
-        setattr(cls, name, types.MethodType(func, None, cls))
-    else:
-        setattr(cls, name, func)
-# ----------------------------------------------------------------------------
-# functions largely based / taken from the six module
-
-# Much of the code in this module comes from Benjamin Peterson's six library.
-# The license for this library can be found in LICENSES/SIX and the code can be
-# found at https://bitbucket.org/gutworth/six
-
-if PY3:
-    string_types = str,
-    integer_types = int,
-    class_types = type,
-    text_type = str
-    binary_type = bytes
-
-    def u(s):
-        return s
-else:
-    string_types = basestring,
-    integer_types = (int, long)
-    class_types = (type, types.ClassType)
-    text_type = unicode
-    binary_type = str
-
-    def u(s):
-        return unicode(s, "unicode_escape")
-
-try:
-    # callable reintroduced in later versions of Python
-    callable = callable
-except NameError:
-    def callable(obj):
-        return any("__call__" in klass.__dict__ for klass in type(obj).__mro__)
-
-# ----------------------------------------------------------------------------
-# Python 2.6 compatibility shims
-#
-
-# OrderedDict Shim from  Raymond Hettinger, python core dev
-# http://code.activestate.com/recipes/576693-ordered-dictionary-for-py24/
-# here to support versions before 2.6
-if not PY3:
-    # don't need this except in 2.6
-    try:
-        from thread import get_ident as _get_ident
-    except ImportError:
-        from dummy_thread import get_ident as _get_ident
-
-try:
-    from _abcoll import KeysView, ValuesView, ItemsView
-except ImportError:
-    pass
-
-
-class _OrderedDict(dict):
-
-    'Dictionary that remembers insertion order'
-    # An inherited dict maps keys to values.
-    # The inherited dict provides __getitem__, __len__, __contains__, and get.
-    # The remaining methods are order-aware.
-    # Big-O running times for all methods are the same as for regular
-    # dictionaries.
-
-    # The internal self.__map dictionary maps keys to links in a doubly linked
-    # list.  The circular doubly linked list starts and ends with a sentinel
-    # element.  The sentinel element never gets deleted (this simplifies the
-    # algorithm).  Each link is stored as a list of length three:  [PREV, NEXT,
-    # KEY].
-
-    def __init__(self, *args, **kwds):
-        '''Initialize an ordered dictionary.  Signature is the same as for
-        regular dictionaries, but keyword arguments are not recommended
-        because their insertion order is arbitrary.
-
-        '''
-        if len(args) > 1:
-            raise TypeError('expected at most 1 arguments, got %d' % len(args))
-        try:
-            self.__root
-        except AttributeError:
-            self.__root = root = []                     # sentinel node
-            root[:] = [root, root, None]
-            self.__map = {}
-        self.__update(*args, **kwds)
-
-    def __setitem__(self, key, value, dict_setitem=dict.__setitem__):
-        'od.__setitem__(i, y) <==> od[i]=y'
-        # Setting a new item creates a new link which goes at the end of the
-        # linked list, and the inherited dictionary is updated with the new
-        # key/value pair.
-        if key not in self:
-            root = self.__root
-            last = root[0]
-            last[1] = root[0] = self.__map[key] = [last, root, key]
-        dict_setitem(self, key, value)
-
-    def __delitem__(self, key, dict_delitem=dict.__delitem__):
-        'od.__delitem__(y) <==> del od[y]'
-        # Deleting an existing item uses self.__map to find the link which is
-        # then removed by updating the links in the predecessor and successor
-        # nodes.
-        dict_delitem(self, key)
-        link_prev, link_next, key = self.__map.pop(key)
-        link_prev[1] = link_next
-        link_next[0] = link_prev
-
-    def __iter__(self):
-        'od.__iter__() <==> iter(od)'
-        root = self.__root
-        curr = root[1]
-        while curr is not root:
-            yield curr[2]
-            curr = curr[1]
-
-    def __reversed__(self):
-        'od.__reversed__() <==> reversed(od)'
-        root = self.__root
-        curr = root[0]
-        while curr is not root:
-            yield curr[2]
-            curr = curr[0]
-
-    def clear(self):
-        'od.clear() -> None.  Remove all items from od.'
-        try:
-            for node in itervalues(self.__map):
-                del node[:]
-            root = self.__root
-            root[:] = [root, root, None]
-            self.__map.clear()
-        except AttributeError:
-            pass
-        dict.clear(self)
-
-    def popitem(self, last=True):
-        '''od.popitem() -> (k, v), return and remove a (key, value) pair.
-        Pairs are returned in LIFO order if last is true or FIFO order if
-        false.
-        '''
-        if not self:
-            raise KeyError('dictionary is empty')
-        root = self.__root
-        if last:
-            link = root[0]
-            link_prev = link[0]
-            link_prev[1] = root
-            root[0] = link_prev
-        else:
-            link = root[1]
-            link_next = link[1]
-            root[1] = link_next
-            link_next[0] = root
-        key = link[2]
-        del self.__map[key]
-        value = dict.pop(self, key)
-        return key, value
-
-    # -- the following methods do not depend on the internal structure --
-
-    def keys(self):
-        'od.keys() -> list of keys in od'
-        return list(self)
-
-    def values(self):
-        'od.values() -> list of values in od'
-        return [self[key] for key in self]
-
-    def items(self):
-        'od.items() -> list of (key, value) pairs in od'
-        return [(key, self[key]) for key in self]
-
-    def iterkeys(self):
-        'od.iterkeys() -> an iterator over the keys in od'
-        return iter(self)
-
-    def itervalues(self):
-        'od.itervalues -> an iterator over the values in od'
-        for k in self:
-            yield self[k]
-
-    def iteritems(self):
-        'od.iteritems -> an iterator over the (key, value) items in od'
-        for k in self:
-            yield (k, self[k])
-
-    def update(*args, **kwds):
-        '''od.update(E, **F) -> None.  Update od from dict/iterable E and F.
-
-        If E is a dict instance, does:        for k in E: od[k] = E[k]
-        If E has a .keys() method, does:      for k in E.keys(): od[k] = E[k]
-        Or if E is an iterable of items, does:for k, v in E: od[k] = v
-        In either case, this is followed by:  for k, v in F.items(): od[k] = v
-        '''
-        if len(args) > 2:
-            raise TypeError('update() takes at most 2 positional '
-                            'arguments (%d given)' % (len(args),))
-        elif not args:
-            raise TypeError('update() takes at least 1 argument (0 given)')
-        self = args[0]
-        # Make progressively weaker assumptions about "other"
-        other = ()
-        if len(args) == 2:
-            other = args[1]
-        if isinstance(other, dict):
-            for key in other:
-                self[key] = other[key]
-        elif hasattr(other, 'keys'):
-            for key in other.keys():
-                self[key] = other[key]
-        else:
-            for key, value in other:
-                self[key] = value
-        for key, value in kwds.items():
-            self[key] = value
-    # let subclasses override update without breaking __init__
-    __update = update
-
-    __marker = object()
-
-    def pop(self, key, default=__marker):
-        '''od.pop(k[,d]) -> v, remove specified key and return the\
-        corresponding value.  If key is not found, d is returned if given,
-        otherwise KeyError is raised.
-        '''
-        if key in self:
-            result = self[key]
-            del self[key]
-            return result
-        if default is self.__marker:
-            raise KeyError(key)
-        return default
-
-    def setdefault(self, key, default=None):
-        'od.setdefault(k[,d]) -> od.get(k,d), also set od[k]=d if k not in od'
-        if key in self:
-            return self[key]
-        self[key] = default
-        return default
-
-    def __repr__(self, _repr_running={}):
-        'od.__repr__() <==> repr(od)'
-        call_key = id(self), _get_ident()
-        if call_key in _repr_running:
-            return '...'
-        _repr_running[call_key] = 1
-        try:
-            if not self:
-                return '%s()' % (self.__class__.__name__,)
-            return '%s(%r)' % (self.__class__.__name__, list(self.items()))
-        finally:
-            del _repr_running[call_key]
-
-    def __reduce__(self):
-        'Return state information for pickling'
-        items = [[k, self[k]] for k in self]
-        inst_dict = vars(self).copy()
-        for k in vars(OrderedDict()):
-            inst_dict.pop(k, None)
-        if inst_dict:
-            return (self.__class__, (items,), inst_dict)
-        return self.__class__, (items,)
-
-    def copy(self):
-        'od.copy() -> a shallow copy of od'
-        return self.__class__(self)
-
-    @classmethod
-    def fromkeys(cls, iterable, value=None):
-        '''OD.fromkeys(S[, v]) -> New ordered dictionary with keys from S and
-        values equal to v (which defaults to None).
-        '''
-        d = cls()
-        for key in iterable:
-            d[key] = value
-        return d
-
-    def __eq__(self, other):
-        '''od.__eq__(y) <==> od==y.  Comparison to another OD is
-        order-sensitive while comparison to a regular mapping is
-        order-insensitive.
-        '''
-        if isinstance(other, OrderedDict):
-            return (len(self) == len(other) and
-                    list(self.items()) == list(other.items()))
-        return dict.__eq__(self, other)
-
-    def __ne__(self, other):
-        return not self == other
-
-    # -- the following methods are only used in Python 2.7 --
-
-    def viewkeys(self):
-        "od.viewkeys() -> a set-like object providing a view on od's keys"
-        return KeysView(self)
-
-    def viewvalues(self):
-        "od.viewvalues() -> an object providing a view on od's values"
-        return ValuesView(self)
-
-    def viewitems(self):
-        "od.viewitems() -> a set-like object providing a view on od's items"
-        return ItemsView(self)
-
-
-# {{{ http://code.activestate.com/recipes/576611/ (r11)
-
-try:
-    from operator import itemgetter
-    from heapq import nlargest
-except ImportError:
-    pass
-
-
-class _Counter(dict):
-
-    '''Dict subclass for counting hashable objects.  Sometimes called a bag
-    or multiset.  Elements are stored as dictionary keys and their counts
-    are stored as dictionary values.
-
-    >>> Counter('zyzygy')
-    Counter({'y': 3, 'z': 2, 'g': 1})
-
-    '''
-
-    def __init__(self, iterable=None, **kwds):
-        '''Create a new, empty Counter object.  And if given, count elements
-        from an input iterable.  Or, initialize the count from another mapping
-        of elements to their counts.
-
-        >>> c = Counter()                    # a new, empty counter
-        >>> c = Counter('gallahad')          # a new counter from an iterable
-        >>> c = Counter({'a': 4, 'b': 2})    # a new counter from a mapping
-        >>> c = Counter(a=4, b=2)            # a new counter from keyword args
-
-        '''
-        self.update(iterable, **kwds)
-
-    def __missing__(self, key):
-        return 0
-
-    def most_common(self, n=None):
-        '''List the n most common elements and their counts from the most
-        common to the least.  If n is None, then list all element counts.
-
-        >>> Counter('abracadabra').most_common(3)
-        [('a', 5), ('r', 2), ('b', 2)]
-
-        '''
-        if n is None:
-            return sorted(iteritems(self), key=itemgetter(1), reverse=True)
-        return nlargest(n, iteritems(self), key=itemgetter(1))
-
-    def elements(self):
-        '''Iterator over elements repeating each as many times as its count.
-
-        >>> c = Counter('ABCABC')
-        >>> sorted(c.elements())
-        ['A', 'A', 'B', 'B', 'C', 'C']
-
-        If an element's count has been set to zero or is a negative number,
-        elements() will ignore it.
-
-        '''
-        for elem, count in iteritems(self):
-            for _ in range(count):
-                yield elem
-
-    # Override dict methods where the meaning changes for Counter objects.
-
-    @classmethod
-    def fromkeys(cls, iterable, v=None):
-        raise NotImplementedError(
-            'Counter.fromkeys() is undefined.  Use Counter(iterable) instead.')
-
-    def update(self, iterable=None, **kwds):
-        '''Like dict.update() but add counts instead of replacing them.
-
-        Source can be an iterable, a dictionary, or another Counter instance.
-
-        >>> c = Counter('which')
-        >>> c.update('witch')           # add elements from another iterable
-        >>> d = Counter('watch')
-        >>> c.update(d)                 # add elements from another counter
-        >>> c['h']                      # four 'h' in which, witch, and watch
-        4
-
-        '''
-        if iterable is not None:
-            if hasattr(iterable, 'iteritems'):
-                if self:
-                    self_get = self.get
-                    for elem, count in iteritems(iterable):
-                        self[elem] = self_get(elem, 0) + count
-                else:
-                    dict.update(
-                        self, iterable)  # fast path when counter is empty
-            else:
-                self_get = self.get
-                for elem in iterable:
-                    self[elem] = self_get(elem, 0) + 1
-        if kwds:
-            self.update(kwds)
-
-    def copy(self):
-        'Like dict.copy() but returns a Counter instance instead of a dict.'
-        return Counter(self)
-
-    def __delitem__(self, elem):
-        '''Like dict.__delitem__() but does not raise KeyError for missing
-        values.'''
-        if elem in self:
-            dict.__delitem__(self, elem)
-
-    def __repr__(self):
-        if not self:
-            return '%s()' % self.__class__.__name__
-        items = ', '.join(map('%r: %r'.__mod__, self.most_common()))
-        return '%s({%s})' % (self.__class__.__name__, items)
-
-    # Multiset-style mathematical operations discussed in:
-    #       Knuth TAOCP Volume II section 4.6.3 exercise 19
-    #       and at http://en.wikipedia.org/wiki/Multiset
-    #
-    # Outputs guaranteed to only include positive counts.
-    #
-    # To strip negative and zero counts, add-in an empty counter:
-    #       c += Counter()
-
-    def __add__(self, other):
-        '''Add counts from two counters.
-
-        >>> Counter('abbb') + Counter('bcc')
-        Counter({'b': 4, 'c': 2, 'a': 1})
-
-
-        '''
-        if not isinstance(other, Counter):
-            return NotImplemented
-        result = Counter()
-        for elem in set(self) | set(other):
-            newcount = self[elem] + other[elem]
-            if newcount > 0:
-                result[elem] = newcount
-        return result
-
-    def __sub__(self, other):
-        ''' Subtract count, but keep only results with positive counts.
-
-        >>> Counter('abbbc') - Counter('bccd')
-        Counter({'b': 2, 'a': 1})
-
-        '''
-        if not isinstance(other, Counter):
-            return NotImplemented
-        result = Counter()
-        for elem in set(self) | set(other):
-            newcount = self[elem] - other[elem]
-            if newcount > 0:
-                result[elem] = newcount
-        return result
-
-    def __or__(self, other):
-        '''Union is the maximum of value in either of the input counters.
-
-        >>> Counter('abbb') | Counter('bcc')
-        Counter({'b': 3, 'c': 2, 'a': 1})
-
-        '''
-        if not isinstance(other, Counter):
-            return NotImplemented
-        _max = max
-        result = Counter()
-        for elem in set(self) | set(other):
-            newcount = _max(self[elem], other[elem])
-            if newcount > 0:
-                result[elem] = newcount
-        return result
-
-    def __and__(self, other):
-        ''' Intersection is the minimum of corresponding counts.
-
-        >>> Counter('abbb') & Counter('bcc')
-        Counter({'b': 1})
-
-        '''
-        if not isinstance(other, Counter):
-            return NotImplemented
-        _min = min
-        result = Counter()
-        if len(self) < len(other):
-            self, other = other, self
-        for elem in filter(self.__contains__, other):
-            newcount = _min(self[elem], other[elem])
-            if newcount > 0:
-                result[elem] = newcount
-        return result
-
-if sys.version_info[:2] < (2, 7):
-    OrderedDict = _OrderedDict
-    Counter = _Counter
-else:
-    from collections import OrderedDict, Counter
-
-# http://stackoverflow.com/questions/4126348
-# Thanks to @martineau at SO
-
-
-class OrderedDefaultdict(OrderedDict):
-
-    def __init__(self, *args, **kwargs):
-        newdefault = None
-        newargs = ()
-        if args:
-            newdefault = args[0]
-            if not (newdefault is None or callable(newdefault)):
-                raise TypeError('first argument must be callable or None')
-            newargs = args[1:]
-        self.default_factory = newdefault
-        super(self.__class__, self).__init__(*newargs, **kwargs)
-
-    def __missing__(self, key):
-        if self.default_factory is None:
-            raise KeyError(key)
-        self[key] = value = self.default_factory()
-        return value
-
-    def __reduce__(self):  # optional, for pickle support
-        args = self.default_factory if self.default_factory else tuple()
-        return type(self), args, None, None, list(self.items())
diff --git a/pandas/util/counter.py b/pandas/util/counter.py
index f07478246..75f7b214c 100644
--- a/pandas/util/counter.py
+++ b/pandas/util/counter.py
@@ -1,11 +1,11 @@
 # This is copied from collections in Python 2.7, for compatibility with older
 # versions of Python. It can be dropped when we depend on Python 2.7/3.1
 
-from pandas.util import compat
+from pandas import compat
 import heapq as _heapq
 from itertools import repeat as _repeat, chain as _chain, starmap as _starmap
 from operator import itemgetter as _itemgetter
-from pandas.util.compat import map
+from pandas.compat import map
 
 try:
     from collections import Mapping
diff --git a/pandas/util/decorators.py b/pandas/util/decorators.py
index 9711f3600..8c6744cbf 100644
--- a/pandas/util/decorators.py
+++ b/pandas/util/decorators.py
@@ -1,4 +1,4 @@
-from pandas.util.compat import StringIO, callable
+from pandas.compat import StringIO, callable
 from pandas.lib import cache_readonly
 import sys
 import warnings
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 469612698..0628d6705 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -24,8 +24,8 @@ import pandas.core.series as series
 import pandas.core.frame as frame
 import pandas.core.panel as panel
 import pandas.core.panel4d as panel4d
-import pandas.util.compat as compat
-from pandas.util.compat import(
+import pandas.compat as compat
+from pandas.compat import(
     map, zip, range, unichr, lrange, lmap, lzip, u, callable, Counter
 )
 
diff --git a/scripts/bench_join.py b/scripts/bench_join.py
index e82d9cee6..5e50e8da6 100644
--- a/scripts/bench_join.py
+++ b/scripts/bench_join.py
@@ -1,4 +1,4 @@
-from pandas.util.compat import range, lrange
+from pandas.compat import range, lrange
 import numpy as np
 import pandas.lib as lib
 from pandas import *
diff --git a/scripts/bench_join_multi.py b/scripts/bench_join_multi.py
index 7e67eeb42..7b93112b7 100644
--- a/scripts/bench_join_multi.py
+++ b/scripts/bench_join_multi.py
@@ -1,7 +1,7 @@
 from pandas import *
 
 import numpy as np
-from pandas.util.compat import zip, range, lzip
+from pandas.compat import zip, range, lzip
 from pandas.util.testing import rands
 import pandas.lib as lib
 
diff --git a/scripts/bench_refactor.py b/scripts/bench_refactor.py
index 9ec57633f..dafba371e 100644
--- a/scripts/bench_refactor.py
+++ b/scripts/bench_refactor.py
@@ -1,5 +1,5 @@
 from pandas import *
-from pandas.util.compat import range
+from pandas.compat import range
 try:
     import pandas.core.internals as internals
     reload(internals)
diff --git a/scripts/file_sizes.py b/scripts/file_sizes.py
index 12cd12c25..de03c72ff 100644
--- a/scripts/file_sizes.py
+++ b/scripts/file_sizes.py
@@ -7,7 +7,7 @@ import matplotlib.pyplot as plt
 
 from pandas import DataFrame
 from pandas.util.testing import set_trace
-from pandas.util import compat
+from pandas import compat
 
 dirs = []
 names = []
diff --git a/scripts/find_commits_touching_func.py b/scripts/find_commits_touching_func.py
index 29a9c780c..0d4ecced9 100755
--- a/scripts/find_commits_touching_func.py
+++ b/scripts/find_commits_touching_func.py
@@ -4,7 +4,7 @@
 # copryright 2013, y-p @ github
 
 from __future__ import print_function
-from pandas.util.compat import range, lrange, map
+from pandas.compat import range, lrange, map
 
 """Search the git history for all commits touching a named method
 
diff --git a/scripts/groupby_sample.py b/scripts/groupby_sample.py
index a5e7dc60d..42008858d 100644
--- a/scripts/groupby_sample.py
+++ b/scripts/groupby_sample.py
@@ -1,7 +1,7 @@
 from pandas import *
 import numpy as np
 import string
-import pandas.util.compat as compat
+import pandas.compat as compat
 
 g1 = np.array(list(string.letters))[:-1]
 g2 = np.arange(510)
diff --git a/scripts/groupby_test.py b/scripts/groupby_test.py
index b6f9152af..3425f0cd9 100644
--- a/scripts/groupby_test.py
+++ b/scripts/groupby_test.py
@@ -8,7 +8,7 @@ from pandas import *
 import pandas.lib as tseries
 import pandas.core.groupby as gp
 import pandas.util.testing as tm
-from pandas.util.compat import range
+from pandas.compat import range
 reload(gp)
 
 """
diff --git a/scripts/hdfstore_panel_perf.py b/scripts/hdfstore_panel_perf.py
index d530a02de..06c2a15bd 100644
--- a/scripts/hdfstore_panel_perf.py
+++ b/scripts/hdfstore_panel_perf.py
@@ -1,6 +1,6 @@
 from pandas import *
 from pandas.util.testing import rands
-from pandas.util.compat import range
+from pandas.compat import range
 
 i, j, k = 7, 771, 5532
 
diff --git a/scripts/json_manip.py b/scripts/json_manip.py
index 3ad0edac2..72d0bbb34 100644
--- a/scripts/json_manip.py
+++ b/scripts/json_manip.py
@@ -74,8 +74,8 @@ from itertools import product
 from operator import attrgetter as aget, itemgetter as iget
 import operator
 import sys
-from pandas.util.compat import map, u, callable, Counter
-import pandas.util.compat as compat
+from pandas.compat import map, u, callable, Counter
+import pandas.compat as compat
 
 
 ##  note 'url' appears multiple places and not all extensions have same struct
diff --git a/scripts/leak.py b/scripts/leak.py
index 3416213cd..47f74bf02 100644
--- a/scripts/leak.py
+++ b/scripts/leak.py
@@ -1,5 +1,5 @@
 from pandas import *
-from pandas.util.compat import range
+from pandas.compat import range
 import numpy as np
 import pandas.util.testing as tm
 import os
diff --git a/scripts/parser_magic.py b/scripts/parser_magic.py
index 17bdba165..72fef39d8 100644
--- a/scripts/parser_magic.py
+++ b/scripts/parser_magic.py
@@ -1,6 +1,6 @@
 from pandas.util.testing import set_trace
 import pandas.util.testing as tm
-import pandas.util.compat as compat
+import pandas.compat as compat
 
 from pandas import *
 import ast
diff --git a/scripts/roll_median_leak.py b/scripts/roll_median_leak.py
index cd3feb60e..07161cc64 100644
--- a/scripts/roll_median_leak.py
+++ b/scripts/roll_median_leak.py
@@ -6,7 +6,7 @@ import os
 
 from vbench.api import Benchmark
 from pandas.util.testing import rands
-from pandas.util.compat import range
+from pandas.compat import range
 import pandas.lib as lib
 import pandas._sandbox as sbx
 import time
diff --git a/scripts/testmed.py b/scripts/testmed.py
index c3724af27..dd3b952d5 100644
--- a/scripts/testmed.py
+++ b/scripts/testmed.py
@@ -2,7 +2,7 @@
 
 from random import random
 from math import log, ceil
-from pandas.util.compat import range
+from pandas.compat import range
 from numpy.random import randn
 from pandas.lib.skiplist import rolling_median
 
diff --git a/vb_suite/groupby.py b/vb_suite/groupby.py
index 88aac2498..ded6a064e 100644
--- a/vb_suite/groupby.py
+++ b/vb_suite/groupby.py
@@ -1,6 +1,6 @@
 from vbench.api import Benchmark
 from datetime import datetime
-from pandas.util.compat import map
+from pandas.compat import map
 
 common_setup = """from pandas_vb_common import *
 """
diff --git a/vb_suite/indexing.py b/vb_suite/indexing.py
index 03961821b..a87c95f54 100644
--- a/vb_suite/indexing.py
+++ b/vb_suite/indexing.py
@@ -106,7 +106,7 @@ indexing_dataframe_boolean = \
               start_date=datetime(2012, 1, 1))
 
 setup = common_setup + """
-from pandas.util.compat import range
+from pandas.compat import range
 import pandas.core.expressions as expr
 df  = DataFrame(np.random.randn(50000, 100))
 df2 = DataFrame(np.random.randn(50000, 100))
diff --git a/vb_suite/parser.py b/vb_suite/parser.py
index 1d5f809f1..fb9fbc436 100644
--- a/vb_suite/parser.py
+++ b/vb_suite/parser.py
@@ -44,7 +44,7 @@ read_csv_comment2 = Benchmark(stmt, setup,
                               start_date=datetime(2011, 11, 1))
 
 setup = common_setup + """
-from pandas.util.compat import cStringIO as StringIO
+from pandas.compat import cStringIO as StringIO
 import os
 N = 10000
 K = 8
@@ -63,7 +63,7 @@ sdate = datetime(2012, 5, 7)
 read_table_multiple_date = Benchmark(cmd, setup, start_date=sdate)
 
 setup = common_setup + """
-from pandas.util.compat import cStringIO as StringIO
+from pandas.compat import cStringIO as StringIO
 import os
 N = 10000
 K = 8
diff --git a/vb_suite/perf_HEAD.py b/vb_suite/perf_HEAD.py
index b9f859942..95aa88939 100755
--- a/vb_suite/perf_HEAD.py
+++ b/vb_suite/perf_HEAD.py
@@ -11,7 +11,7 @@ from pandas.io.common import urlopen
 import json
 
 import pandas as pd
-import pandas.util.compat as compat
+import pandas.compat as compat
 
 WEB_TIMEOUT = 10
 
diff --git a/vb_suite/source/conf.py b/vb_suite/source/conf.py
index ac24d1d03..735a800fb 100644
--- a/vb_suite/source/conf.py
+++ b/vb_suite/source/conf.py
@@ -13,7 +13,7 @@
 import sys
 import os
 
-from pandas/util.compat import u
+from pandas.compat import u
 
 # If extensions (or modules to document with autodoc) are in another directory,
 # add these directories to sys.path here. If the directory is relative to the
diff --git a/vb_suite/test_perf.py b/vb_suite/test_perf.py
index 095eb04ec..92e27ba0f 100755
--- a/vb_suite/test_perf.py
+++ b/vb_suite/test_perf.py
@@ -27,7 +27,7 @@ everything and calculate a ration for the timing information.
 """
 from __future__ import print_function
 
-from pandas.util.compat import range, lmap
+from pandas.compat import range, lmap
 import shutil
 import os
 import sys
