commit bcfc608f61ac0ac719822ea303336c0d053d9d9b
Author: Simon Hawkins <simonjayhawkins@gmail.com>
Date:   Thu Feb 13 20:06:56 2020 +0000

    D412: No blank lines allowed between a section header and its content (#31956)

diff --git a/pandas/_config/config.py b/pandas/_config/config.py
index c283baeb9..2df940817 100644
--- a/pandas/_config/config.py
+++ b/pandas/_config/config.py
@@ -395,7 +395,6 @@ class option_context:
 
     Examples
     --------
-
     >>> with option_context('display.max_rows', 10, 'display.max_columns', 5):
     ...     ...
     """
@@ -716,8 +715,8 @@ def config_prefix(prefix):
     Warning: This is not thread - safe, and won't work properly if you import
     the API functions into your module using the "from x import y" construct.
 
-    Example:
-
+    Example
+    -------
     import pandas._config.config as cf
     with cf.config_prefix("display.font"):
         cf.register_option("color", "red")
diff --git a/pandas/_testing.py b/pandas/_testing.py
index 46ed65c87..6029fbe59 100644
--- a/pandas/_testing.py
+++ b/pandas/_testing.py
@@ -1970,35 +1970,39 @@ def makeCustomDataframe(
     r_idx_type=None,
 ):
     """
-   nrows,  ncols - number of data rows/cols
-   c_idx_names, idx_names  - False/True/list of strings,  yields No names ,
-        default names or uses the provided names for the levels of the
-        corresponding index. You can provide a single string when
-        c_idx_nlevels ==1.
-   c_idx_nlevels - number of levels in columns index. > 1 will yield MultiIndex
-   r_idx_nlevels - number of levels in rows index. > 1 will yield MultiIndex
-   data_gen_f - a function f(row,col) which return the data value
-        at that position, the default generator used yields values of the form
-        "RxCy" based on position.
-   c_ndupe_l, r_ndupe_l - list of integers, determines the number
-        of duplicates for each label at a given level of the corresponding
-        index. The default `None` value produces a multiplicity of 1 across
-        all levels, i.e. a unique index. Will accept a partial list of length
-        N < idx_nlevels, for just the first N levels. If ndupe doesn't divide
-        nrows/ncol, the last label might have lower multiplicity.
-   dtype - passed to the DataFrame constructor as is, in case you wish to
-        have more control in conjunction with a custom `data_gen_f`
-   r_idx_type, c_idx_type -  "i"/"f"/"s"/"u"/"dt"/"td".
-       If idx_type is not None, `idx_nlevels` must be 1.
-       "i"/"f" creates an integer/float index,
-       "s"/"u" creates a string/unicode index
-       "dt" create a datetime index.
-       "td" create a timedelta index.
-
-        if unspecified, string labels will be generated.
+    Create a DataFrame using supplied parameters.
 
-    Examples:
+    Parameters
+    ----------
+    nrows,  ncols - number of data rows/cols
+    c_idx_names, idx_names  - False/True/list of strings,  yields No names ,
+            default names or uses the provided names for the levels of the
+            corresponding index. You can provide a single string when
+            c_idx_nlevels ==1.
+    c_idx_nlevels - number of levels in columns index. > 1 will yield MultiIndex
+    r_idx_nlevels - number of levels in rows index. > 1 will yield MultiIndex
+    data_gen_f - a function f(row,col) which return the data value
+            at that position, the default generator used yields values of the form
+            "RxCy" based on position.
+    c_ndupe_l, r_ndupe_l - list of integers, determines the number
+            of duplicates for each label at a given level of the corresponding
+            index. The default `None` value produces a multiplicity of 1 across
+            all levels, i.e. a unique index. Will accept a partial list of length
+            N < idx_nlevels, for just the first N levels. If ndupe doesn't divide
+            nrows/ncol, the last label might have lower multiplicity.
+    dtype - passed to the DataFrame constructor as is, in case you wish to
+            have more control in conjunction with a custom `data_gen_f`
+    r_idx_type, c_idx_type -  "i"/"f"/"s"/"u"/"dt"/"td".
+        If idx_type is not None, `idx_nlevels` must be 1.
+        "i"/"f" creates an integer/float index,
+        "s"/"u" creates a string/unicode index
+        "dt" create a datetime index.
+        "td" create a timedelta index.
+
+            if unspecified, string labels will be generated.
 
+    Examples
+    --------
     # 5 row, 3 columns, default names on both, single index on both axis
     >> makeCustomDataframe(5,3)
 
@@ -2514,7 +2518,6 @@ class RNGContext:
 
     Examples
     --------
-
     with RNGContext(42):
         np.random.randn()
     """
@@ -2669,7 +2672,6 @@ def set_timezone(tz: str):
 
     Examples
     --------
-
     >>> from datetime import datetime
     >>> from dateutil.tz import tzlocal
     >>> tzlocal().tzname(datetime.now())
diff --git a/pandas/core/accessor.py b/pandas/core/accessor.py
index 4e3ef0c52..fc40f1db1 100644
--- a/pandas/core/accessor.py
+++ b/pandas/core/accessor.py
@@ -233,7 +233,6 @@ def _register_accessor(name, cls):
 
     Examples
     --------
-
     In your library code::
 
         import pandas as pd
diff --git a/pandas/core/arrays/boolean.py b/pandas/core/arrays/boolean.py
index 590b40b04..d93b5fbc8 100644
--- a/pandas/core/arrays/boolean.py
+++ b/pandas/core/arrays/boolean.py
@@ -488,7 +488,6 @@ class BooleanArray(BaseMaskedArray):
 
         Examples
         --------
-
         The result indicates whether any element is True (and by default
         skips NAs):
 
@@ -557,7 +556,6 @@ class BooleanArray(BaseMaskedArray):
 
         Examples
         --------
-
         The result indicates whether any element is True (and by default
         skips NAs):
 
diff --git a/pandas/core/arrays/categorical.py b/pandas/core/arrays/categorical.py
index b095288ac..6c7c35e9b 100644
--- a/pandas/core/arrays/categorical.py
+++ b/pandas/core/arrays/categorical.py
@@ -2388,7 +2388,6 @@ class Categorical(ExtensionArray, PandasObject):
 
         Examples
         --------
-
         >>> s = pd.Categorical(['lama', 'cow', 'lama', 'beetle', 'lama',
         ...                'hippo'])
         >>> s.isin(['cow', 'lama'])
diff --git a/pandas/core/arrays/sparse/dtype.py b/pandas/core/arrays/sparse/dtype.py
index 1ce735421..86869f50a 100644
--- a/pandas/core/arrays/sparse/dtype.py
+++ b/pandas/core/arrays/sparse/dtype.py
@@ -336,7 +336,6 @@ class SparseDtype(ExtensionDtype):
 
         Returns
         -------
-
         >>> SparseDtype(int, 1)._subtype_with_str
         dtype('int64')
 
diff --git a/pandas/core/computation/pytables.py b/pandas/core/computation/pytables.py
index 19f151846..097c3c22a 100644
--- a/pandas/core/computation/pytables.py
+++ b/pandas/core/computation/pytables.py
@@ -501,7 +501,6 @@ class PyTablesExpr(expr.Expr):
 
     Examples
     --------
-
     'index>=date'
     "columns=['A', 'D']"
     'columns=A'
diff --git a/pandas/core/dtypes/concat.py b/pandas/core/dtypes/concat.py
index e53eb3b4d..003c35058 100644
--- a/pandas/core/dtypes/concat.py
+++ b/pandas/core/dtypes/concat.py
@@ -215,13 +215,11 @@ def union_categoricals(
 
     Notes
     -----
-
     To learn more about categories, see `link
     <https://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html#unioning>`__
 
     Examples
     --------
-
     >>> from pandas.api.types import union_categoricals
 
     If you want to combine categoricals that do not necessarily have
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index da152b70a..2f9c8286d 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -927,7 +927,6 @@ class DataFrame(NDFrame):
 
         Notes
         -----
-
         1. Because ``iterrows`` returns a Series for each row,
            it does **not** preserve dtypes across the rows (dtypes are
            preserved across columns for DataFrames). For example,
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index adfb553d4..0ea8da0da 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -899,7 +899,6 @@ class NDFrame(PandasObject, SelectionMixin, indexing.IndexingMixin):
 
         Examples
         --------
-
         >>> s = pd.Series([1, 2, 3])
         >>> s
         0    1
@@ -2208,7 +2207,6 @@ class NDFrame(PandasObject, SelectionMixin, indexing.IndexingMixin):
 
         Examples
         --------
-
         >>> df = pd.DataFrame([['a', 'b'], ['c', 'd']],
         ...                   index=['row 1', 'row 2'],
         ...                   columns=['col 1', 'col 2'])
@@ -2507,7 +2505,6 @@ class NDFrame(PandasObject, SelectionMixin, indexing.IndexingMixin):
 
         Examples
         --------
-
         Create an in-memory SQLite database.
 
         >>> from sqlalchemy import create_engine
@@ -4185,7 +4182,6 @@ class NDFrame(PandasObject, SelectionMixin, indexing.IndexingMixin):
 
         Examples
         --------
-
         ``DataFrame.reindex`` supports two calling conventions
 
         * ``(index=index_labels, columns=column_labels, ...)``
@@ -5768,7 +5764,6 @@ class NDFrame(PandasObject, SelectionMixin, indexing.IndexingMixin):
 
         Notes
         -----
-
         By default, ``convert_dtypes`` will attempt to convert a Series (or each
         Series in a DataFrame) to dtypes that support ``pd.NA``. By using the options
         ``convert_string``, ``convert_integer``, and ``convert_boolean``, it is
@@ -7434,7 +7429,6 @@ class NDFrame(PandasObject, SelectionMixin, indexing.IndexingMixin):
 
         Examples
         --------
-
         Start by creating a series with 4 one minute timestamps.
 
         >>> index = pd.date_range('1/1/2000', periods=4, freq='T')
@@ -7713,7 +7707,6 @@ class NDFrame(PandasObject, SelectionMixin, indexing.IndexingMixin):
 
         Examples
         --------
-
         Start by creating a series with 9 one minute timestamps.
 
         >>> index = pd.date_range('1/1/2000', periods=9, freq='T')
@@ -8100,7 +8093,6 @@ class NDFrame(PandasObject, SelectionMixin, indexing.IndexingMixin):
 
         Examples
         --------
-
         >>> df = pd.DataFrame(data={'Animal': ['cat', 'penguin', 'dog',
         ...                                    'spider', 'snake'],
         ...                         'Number_legs': [4, 2, 4, 8, np.nan]})
@@ -9235,7 +9227,6 @@ class NDFrame(PandasObject, SelectionMixin, indexing.IndexingMixin):
 
         Examples
         --------
-
         Localize local times:
 
         >>> s = pd.Series([1],
diff --git a/pandas/core/groupby/groupby.py b/pandas/core/groupby/groupby.py
index 426b3b47d..1d7527e73 100644
--- a/pandas/core/groupby/groupby.py
+++ b/pandas/core/groupby/groupby.py
@@ -1995,7 +1995,6 @@ class GroupBy(_GroupBy):
 
         Examples
         --------
-
         >>> df = pd.DataFrame({"A": list("aaabba")})
         >>> df
            A
@@ -2062,7 +2061,6 @@ class GroupBy(_GroupBy):
 
         Examples
         --------
-
         >>> df = pd.DataFrame([['a'], ['a'], ['a'], ['b'], ['b'], ['a']],
         ...                   columns=['A'])
         >>> df
diff --git a/pandas/core/groupby/grouper.py b/pandas/core/groupby/grouper.py
index 8a42a8fa2..21e171f93 100644
--- a/pandas/core/groupby/grouper.py
+++ b/pandas/core/groupby/grouper.py
@@ -77,7 +77,6 @@ class Grouper:
 
     Examples
     --------
-
     Syntactic sugar for ``df.groupby('A')``
 
     >>> df.groupby(Grouper(key='A'))
diff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py
index f3bae63aa..3d5494055 100644
--- a/pandas/core/indexes/base.py
+++ b/pandas/core/indexes/base.py
@@ -1452,7 +1452,6 @@ class Index(IndexOpsMixin, PandasObject):
 
         Examples
         --------
-
         >>> idx = pd.Index(list('abc'))
         >>> idx
         Index(['a', 'b', 'c'], dtype='object')
@@ -2501,7 +2500,6 @@ class Index(IndexOpsMixin, PandasObject):
 
         Examples
         --------
-
         Union matching dtypes
 
         >>> idx1 = pd.Index([1, 2, 3, 4])
@@ -2632,7 +2630,6 @@ class Index(IndexOpsMixin, PandasObject):
 
         Examples
         --------
-
         >>> idx1 = pd.Index([1, 2, 3, 4])
         >>> idx2 = pd.Index([3, 4, 5, 6])
         >>> idx1.intersection(idx2)
@@ -2713,7 +2710,6 @@ class Index(IndexOpsMixin, PandasObject):
 
         Examples
         --------
-
         >>> idx1 = pd.Index([2, 1, 3, 4])
         >>> idx2 = pd.Index([3, 4, 5, 6])
         >>> idx1.difference(idx2)
diff --git a/pandas/core/indexes/multi.py b/pandas/core/indexes/multi.py
index 6fa42804d..5b357af0d 100644
--- a/pandas/core/indexes/multi.py
+++ b/pandas/core/indexes/multi.py
@@ -1549,7 +1549,6 @@ class MultiIndex(Index):
 
         Examples
         --------
-
         Create a MultiIndex:
 
         >>> mi = pd.MultiIndex.from_arrays((list('abc'), list('def')))
@@ -1713,7 +1712,6 @@ class MultiIndex(Index):
 
         Examples
         --------
-
         >>> mi = pd.MultiIndex(levels=[['a', 'b'], ['bb', 'aa']],
         ...                    codes=[[0, 0, 1, 1], [0, 1, 0, 1]])
         >>> mi
diff --git a/pandas/core/indexes/period.py b/pandas/core/indexes/period.py
index 987725bb4..986f87ffe 100644
--- a/pandas/core/indexes/period.py
+++ b/pandas/core/indexes/period.py
@@ -788,7 +788,6 @@ def period_range(
 
     Examples
     --------
-
     >>> pd.period_range(start='2017-01-01', end='2018-01-01', freq='M')
     PeriodIndex(['2017-01', '2017-02', '2017-03', '2017-04', '2017-05',
                  '2017-06', '2017-06', '2017-07', '2017-08', '2017-09',
diff --git a/pandas/core/indexes/timedeltas.py b/pandas/core/indexes/timedeltas.py
index 4a69570f1..b3b2bc46f 100644
--- a/pandas/core/indexes/timedeltas.py
+++ b/pandas/core/indexes/timedeltas.py
@@ -321,7 +321,6 @@ def timedelta_range(
 
     Examples
     --------
-
     >>> pd.timedelta_range(start='1 day', periods=4)
     TimedeltaIndex(['1 days', '2 days', '3 days', '4 days'],
                    dtype='timedelta64[ns]', freq='D')
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index b3777e949..cb8b9cc04 100755
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -48,7 +48,6 @@ class _IndexSlice:
 
     Examples
     --------
-
     >>> midx = pd.MultiIndex.from_product([['A0','A1'], ['B0','B1','B2','B3']])
     >>> columns = ['foo', 'bar']
     >>> dfmi = pd.DataFrame(np.arange(16).reshape((len(midx), len(columns))),
@@ -124,7 +123,6 @@ class IndexingMixin:
 
         Examples
         --------
-
         >>> mydict = [{'a': 1, 'b': 2, 'c': 3, 'd': 4},
         ...           {'a': 100, 'b': 200, 'c': 300, 'd': 400},
         ...           {'a': 1000, 'b': 2000, 'c': 3000, 'd': 4000 }]
diff --git a/pandas/core/resample.py b/pandas/core/resample.py
index 98910a9ba..f19a82ab6 100644
--- a/pandas/core/resample.py
+++ b/pandas/core/resample.py
@@ -550,7 +550,6 @@ class Resampler(_GroupBy, ShallowMixin):
 
         Examples
         --------
-
         Resampling a Series:
 
         >>> s = pd.Series([1, 2, 3],
diff --git a/pandas/core/strings.py b/pandas/core/strings.py
index 3a7e3fdab..4b0fc3e47 100644
--- a/pandas/core/strings.py
+++ b/pandas/core/strings.py
@@ -349,7 +349,6 @@ def str_contains(arr, pat, case=True, flags=0, na=np.nan, regex=True):
 
     Examples
     --------
-
     Returning a Series of booleans using only a literal pattern.
 
     >>> s1 = pd.Series(['Mouse', 'dog', 'house and parrot', '23', np.NaN])
@@ -1274,7 +1273,6 @@ def str_findall(arr, pat, flags=0):
 
     Examples
     --------
-
     >>> s = pd.Series(['Lion', 'Monkey', 'Rabbit'])
 
     The search for the pattern 'Monkey' returns one match:
@@ -1743,7 +1741,6 @@ def str_wrap(arr, width, **kwargs):
 
     Examples
     --------
-
     >>> s = pd.Series(['line to be wrapped', 'another line to be wrapped'])
     >>> s.str.wrap(12)
     0             line to be\nwrapped
diff --git a/pandas/core/tools/timedeltas.py b/pandas/core/tools/timedeltas.py
index 1d933cf43..d7529ec79 100644
--- a/pandas/core/tools/timedeltas.py
+++ b/pandas/core/tools/timedeltas.py
@@ -53,7 +53,6 @@ def to_timedelta(arg, unit="ns", errors="raise"):
 
     Examples
     --------
-
     Parsing a single string to a Timedelta:
 
     >>> pd.to_timedelta('1 days 06:05:01.00003')
diff --git a/pandas/core/window/ewm.py b/pandas/core/window/ewm.py
index 6da8b0c5c..e045d1c22 100644
--- a/pandas/core/window/ewm.py
+++ b/pandas/core/window/ewm.py
@@ -98,7 +98,6 @@ class EWM(_Rolling):
 
     Examples
     --------
-
     >>> df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})
     >>> df
          B
diff --git a/pandas/core/window/expanding.py b/pandas/core/window/expanding.py
index a0bf3376d..140e0144d 100644
--- a/pandas/core/window/expanding.py
+++ b/pandas/core/window/expanding.py
@@ -37,7 +37,6 @@ class Expanding(_Rolling_and_Expanding):
 
     Examples
     --------
-
     >>> df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})
          B
     0  0.0
diff --git a/pandas/core/window/rolling.py b/pandas/core/window/rolling.py
index f29cd428b..65ac064a1 100644
--- a/pandas/core/window/rolling.py
+++ b/pandas/core/window/rolling.py
@@ -846,7 +846,6 @@ class Window(_Window):
 
     Examples
     --------
-
     >>> df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})
     >>> df
          B
diff --git a/pandas/io/formats/style.py b/pandas/io/formats/style.py
index eca5a3fb1..9c46a0036 100644
--- a/pandas/io/formats/style.py
+++ b/pandas/io/formats/style.py
@@ -462,7 +462,6 @@ class Styler:
 
         Notes
         -----
-
         ``formatter`` is either an ``a`` or a dict ``{column name: a}`` where
         ``a`` is one of
 
@@ -474,7 +473,6 @@ class Styler:
 
         Examples
         --------
-
         >>> df = pd.DataFrame(np.random.randn(4, 2), columns=['a', 'b'])
         >>> df.style.format("{:.2%}")
         >>> df['c'] = ['a', 'b', 'c', 'd']
diff --git a/pandas/io/json/_json.py b/pandas/io/json/_json.py
index 39ee097bc..77a0c2f99 100644
--- a/pandas/io/json/_json.py
+++ b/pandas/io/json/_json.py
@@ -525,7 +525,6 @@ def read_json(
 
     Examples
     --------
-
     >>> df = pd.DataFrame([['a', 'b'], ['c', 'd']],
     ...                   index=['row 1', 'row 2'],
     ...                   columns=['col 1', 'col 2'])
diff --git a/pandas/io/json/_normalize.py b/pandas/io/json/_normalize.py
index 08dca6b57..714bebc26 100644
--- a/pandas/io/json/_normalize.py
+++ b/pandas/io/json/_normalize.py
@@ -61,7 +61,6 @@ def nested_to_record(
 
     Examples
     --------
-
     IN[52]: nested_to_record(dict(flat1=1,dict1=dict(c=1,d=2),
                                   nested=dict(e=dict(c=1,d=2),d=2)))
     Out[52]:
@@ -160,7 +159,6 @@ def _json_normalize(
 
     Examples
     --------
-
     >>> from pandas.io.json import json_normalize
     >>> data = [{'id': 1, 'name': {'first': 'Coleen', 'last': 'Volk'}},
     ...         {'name': {'given': 'Mose', 'family': 'Regner'}},
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index a75819d33..1390d2d51 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -1830,7 +1830,6 @@ class IndexCol:
 
     Parameters
     ----------
-
     axis   : axis which I reference
     values : the ndarray like converted values
     kind   : a string description of this type
@@ -2142,7 +2141,6 @@ class DataCol(IndexCol):
 
     Parameters
     ----------
-
     data   : the actual data
     cname  : the column name in the table to hold the data (typically
                 values)
diff --git a/pandas/plotting/_core.py b/pandas/plotting/_core.py
index 1fe383706..d3db53908 100644
--- a/pandas/plotting/_core.py
+++ b/pandas/plotting/_core.py
@@ -176,13 +176,12 @@ def hist_frame(
 
     Examples
     --------
+    This example draws a histogram based on the length and width of
+    some animals, displayed in three bins
 
     .. plot::
         :context: close-figs
 
-        This example draws a histogram based on the length and width of
-        some animals, displayed in three bins
-
         >>> df = pd.DataFrame({
         ...     'length': [1.5, 0.5, 1.2, 0.9, 3],
         ...     'width': [0.7, 0.2, 0.15, 0.2, 1.1]
diff --git a/pandas/plotting/_matplotlib/tools.py b/pandas/plotting/_matplotlib/tools.py
index d7732c869..dafdd6eec 100644
--- a/pandas/plotting/_matplotlib/tools.py
+++ b/pandas/plotting/_matplotlib/tools.py
@@ -105,8 +105,8 @@ def _subplots(
     This utility wrapper makes it convenient to create common layouts of
     subplots, including the enclosing figure object, in a single call.
 
-    Keyword arguments:
-
+    Parameters
+    ----------
     naxes : int
       Number of required axes. Exceeded axes are set invisible. Default is
       nrows * ncols.
@@ -146,16 +146,16 @@ def _subplots(
         Note that all keywords not recognized above will be
         automatically included here.
 
-    Returns:
-
+    Returns
+    -------
     fig, ax : tuple
       - fig is the Matplotlib Figure object
       - ax can be either a single axis object or an array of axis objects if
       more than one subplot was created.  The dimensions of the resulting array
       can be controlled with the squeeze keyword, see above.
 
-    **Examples:**
-
+    Examples
+    --------
     x = np.linspace(0, 2*np.pi, 400)
     y = np.sin(x**2)
 
diff --git a/pandas/plotting/_misc.py b/pandas/plotting/_misc.py
index 1369adcd8..47a4fd8ff 100644
--- a/pandas/plotting/_misc.py
+++ b/pandas/plotting/_misc.py
@@ -294,6 +294,7 @@ def bootstrap_plot(series, fig=None, size=50, samples=500, **kwds):
 
     Examples
     --------
+    This example draws a basic bootstap plot for a Series.
 
     .. plot::
             :context: close-figs
diff --git a/pandas/tests/extension/json/array.py b/pandas/tests/extension/json/array.py
index 1ba1b872f..e6b147e7a 100644
--- a/pandas/tests/extension/json/array.py
+++ b/pandas/tests/extension/json/array.py
@@ -3,8 +3,8 @@
 The JSONArray stores lists of dictionaries. The storage mechanism is a list,
 not an ndarray.
 
-Note:
-
+Note
+----
 We currently store lists of UserDicts. Pandas has a few places
 internally that specifically check for dicts, and does non-scalar things
 in that case. We *want* the dictionaries to be treated as scalars, so we
