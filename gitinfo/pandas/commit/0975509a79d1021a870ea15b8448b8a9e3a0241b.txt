commit 0975509a79d1021a870ea15b8448b8a9e3a0241b
Author: Joris Van den Bossche <jorisvandenbossche@gmail.com>
Date:   Sat Aug 13 18:18:49 2016 -0400

    Use DeprecationWarning for core.common deprecations (GH13634)
    
    Related to second question in #13634 (whether to use FutureWarning or
    DeprecationWarning in deprecating the public pandas.core.common
    functions).    As those functions are mostly used in library code, and
    less directly by users in their own code, I think a DeprecationWarning
    is more appropriate in this case.   For example, in our own docs, we
    started to get warnings due to an example with a statsmodels
    regression that uses patsy using one of those functions. Note that
    recent IPython also shows DeprecationWarnings when using a deprecated
    function interactively.
    
    Author: Joris Van den Bossche <jorisvandenbossche@gmail.com>
    
    Closes #13990 from jorisvandenbossche/common-depr-warning and squashes the following commits:
    
    2de5d48 [Joris Van den Bossche] Use DeprecationWarning for core.common deprecations (GH13634)

diff --git a/doc/source/whatsnew/v0.19.0.txt b/doc/source/whatsnew/v0.19.0.txt
index 0fafa6003..193987cb6 100644
--- a/doc/source/whatsnew/v0.19.0.txt
+++ b/doc/source/whatsnew/v0.19.0.txt
@@ -31,7 +31,7 @@ pandas development API
 As part of making pandas APi more uniform and accessible in the future, we have created a standard
 sub-package of pandas, ``pandas.api`` to hold public API's. We are starting by exposing type
 introspection functions in ``pandas.api.types``. More sub-packages and officially sanctioned API's
-will be published in future versions of pandas.
+will be published in future versions of pandas (:issue:`13147`, :issue:`13634`)
 
 The following are now part of this API:
 
@@ -42,6 +42,10 @@ The following are now part of this API:
    funcs = [ f for f in dir(types) if not f.startswith('_') ]
    pprint.pprint(funcs)
 
+.. note::
+
+   Calling these functions from the internal module ``pandas.core.common`` will now show a ``DeprecationWarning`` (:issue:`13990`)
+
 .. _whatsnew_0190.enhancements.asof_merge:
 
 ``merge_asof`` for asof-style time-series joining
diff --git a/pandas/api/tests/test_api.py b/pandas/api/tests/test_api.py
index fda81ee6c..253735409 100644
--- a/pandas/api/tests/test_api.py
+++ b/pandas/api/tests/test_api.py
@@ -163,7 +163,7 @@ class TestTypes(Base, tm.TestCase):
         self.check(types, self.allowed)
 
     def check_deprecation(self, fold, fnew):
-        with tm.assert_produces_warning(FutureWarning):
+        with tm.assert_produces_warning(DeprecationWarning):
             try:
                 result = fold('foo')
                 expected = fnew('foo')
diff --git a/pandas/core/common.py b/pandas/core/common.py
index 054b899f1..341bd3b4c 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -31,7 +31,7 @@ for t in [t for t in dir(types) if not t.startswith('_')]:
             warnings.warn("pandas.core.common.{t} is deprecated. "
                           "import from the public API: "
                           "pandas.api.types.{t} instead".format(t=t),
-                          FutureWarning, stacklevel=3)
+                          DeprecationWarning, stacklevel=3)
             return getattr(types, t)(*args, **kwargs)
         return wrapper
 
@@ -57,7 +57,7 @@ for t in ['is_datetime_arraylike',
                           "These are not longer public API functions, "
                           "but can be imported from "
                           "pandas.types.common.{t} instead".format(t=t),
-                          FutureWarning, stacklevel=3)
+                          DeprecationWarning, stacklevel=3)
             return getattr(common, t)(*args, **kwargs)
         return wrapper
 
