commit 0e230968daadaeb814a6698b327c644b015535f2
Author: jreback <jeff@reback.net>
Date:   Fri Dec 14 12:13:57 2012 -0500

    BUG: removed debugging info
         Term moved to top-level panas namespace (like HDFStore)
         bug in writing a Panel4D in cython (lib.pyx)

diff --git a/doc/source/io.rst b/doc/source/io.rst
index 6d3d29964..4015159e2 100644
--- a/doc/source/io.rst
+++ b/doc/source/io.rst
@@ -1140,7 +1140,7 @@ Queries are built up using a list of ``Terms`` (currently only **anding** of ter
 
    store.append('wp',wp)
    store
-   store.select('wp',[ 'major_axis>20000102', ('minor_axis', '=', ['A','B']) ])
+   store.select('wp',[ Term('major_axis>20000102'), Term('minor_axis', '=', ['A','B']) ])
 
 Indexing
 ~~~~~~~~
@@ -1226,7 +1226,6 @@ These, by default, index the three axes ``items, major_axis, minor_axis``. On an
 
 .. ipython:: python
 
-   from pandas.io.pytables import Term
    store.append('p4d2', p4d, axes = ['labels','major_axis','minor_axis'])
    store
    store.select('p4d2', [ Term('labels=l1'), Term('items=Item1'), Term('minor_axis=A_big_strings') ])
diff --git a/doc/source/v0.10.0.txt b/doc/source/v0.10.0.txt
index f92691f01..5316458ed 100644
--- a/doc/source/v0.10.0.txt
+++ b/doc/source/v0.10.0.txt
@@ -255,7 +255,6 @@ Updated PyTables Support
 
 .. ipython:: python
 
-   from pandas.io.pytables import Term
    wp = Panel(randn(2, 5, 4), items=['Item1', 'Item2'],
           major_axis=date_range('1/1/2000', periods=5),
           minor_axis=['A', 'B', 'C', 'D'])
diff --git a/pandas/__init__.py b/pandas/__init__.py
index dcecc1ccd..1d4572725 100644
--- a/pandas/__init__.py
+++ b/pandas/__init__.py
@@ -32,7 +32,7 @@ from pandas.tseries.api import *
 from pandas.io.parsers import (read_csv, read_table, read_clipboard,
                                read_fwf, to_clipboard, ExcelFile,
                                ExcelWriter)
-from pandas.io.pytables import HDFStore
+from pandas.io.pytables import HDFStore, Term
 from pandas.util.testing import debug
 
 from pandas.tools.describe import value_range
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 91bd27ff5..a165f4091 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -20,9 +20,9 @@ from pandas.sparse.api import SparseSeries, SparseDataFrame, SparsePanel
 from pandas.sparse.array import BlockIndex, IntIndex
 from pandas.tseries.api import PeriodIndex, DatetimeIndex
 from pandas.core.common import adjoin
-from pandas.core.algorithms import match, unique
+from pandas.core.algorithms import match, unique, factorize
 from pandas.core.strings import str_len
-from pandas.core.categorical import Factor
+from pandas.core.categorical import Categorical
 from pandas.core.common import _asarray_tuplesafe, _try_sort
 from pandas.core.internals import BlockManager, make_block, form_blocks
 from pandas.core.reshape import block2d_to_block3d, block2d_to_blocknd, factor_indexer
@@ -1548,14 +1548,10 @@ class LegacyTable(Table):
         """ we have n indexable columns, with an arbitrary number of data axes """
 
         
-        _dm = create_debug_memory(self.parent)
-        _dm('start')
-
         if not self.read_axes(where): return None
 
-        _dm('read_axes')
         indicies = [ i.values for i in self.index_axes ]
-        factors  = [ Factor.from_array(i) for i in indicies ]
+        factors  = [ Categorical.from_array(i) for i in indicies ]
         levels   = [ f.levels for f in factors ]
         N        = [ len(f.levels) for f in factors ]
         labels   = [ f.labels for f in factors ]
@@ -1577,9 +1573,7 @@ class LegacyTable(Table):
                 
                 take_labels   = [ l.take(sorter) for l in labels ]
                 items         = Index(c.values)
-                _dm('pre block')
                 block         = block2d_to_blocknd(sorted_values, items, tuple(N), take_labels)
-                _dm('block created done')
 
                 # create the object
                 mgr = BlockManager([block], [items] + levels)
@@ -1617,16 +1611,12 @@ class LegacyTable(Table):
                 lp = DataFrame(new_values, index=new_index, columns=lp.columns)
                 objs.append(lp.to_panel())
 
-        _dm('pre-concat')
-
         # create the composite object
         if len(objs) == 1:
             wp = objs[0]
         else:
             wp = concat(objs, axis = 0, verify_integrity = True)
 
-        _dm('post-concat')
-
         # reorder by any non_index_axes
         for axis,labels in self.non_index_axes:
             wp = wp.reindex_axis(labels,axis=axis,copy=False)
@@ -1638,8 +1628,6 @@ class LegacyTable(Table):
             new_axis = sorted(ordered & self.selection.filter)
             wp = wp.reindex(**{ filter_axis_name : new_axis, 'copy' : False })
 
-        _dm('done')
-
         return wp
 
 class LegacyFrameTable(LegacyTable):
@@ -2285,22 +2273,3 @@ def _get_index_factory(klass):
         return f
     return klass
 
-def create_debug_memory(parent):
-    _debug_memory = getattr(parent,'_debug_memory',False)
-    def get_memory(s):
-        pass
-  
-    if not _debug_memory:
-        pass
-    else:
-        try:
-            import psutil, os
-            def get_memory(s):
-                p = psutil.Process(os.getpid())
-                (rss,vms) = p.get_memory_info()
-                mp = p.get_memory_percent()
-                print "[%s] cur_mem->%.2f (MB),per_mem->%.2f" % (s,rss/1000000.0,mp)
-        except:
-            pass
-
-    return get_memory
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index a047109e5..a9b97bdaa 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -271,6 +271,14 @@ class TestHDFStore(unittest.TestCase):
         self.store.append('p4d', p4d.ix[:,:,10:,:], axes=['items','major_axis','minor_axis'])
         tm.assert_panel4d_equal(self.store['p4d'], p4d)
 
+        # test using differnt number of items on each axis
+        p4d2 = p4d.copy()
+        p4d2['l4'] = p4d['l1']
+        p4d2['l5'] = p4d['l1']
+        self.store.remove('p4d2')
+        self.store.append('p4d2', p4d2, axes=['items','major_axis','minor_axis'])
+        tm.assert_panel4d_equal(self.store['p4d2'], p4d2)
+
     def test_append_frame_column_oriented(self):
 
         # column oriented
diff --git a/pandas/lib.pyx b/pandas/lib.pyx
index 6570ce7ab..d904d86f1 100644
--- a/pandas/lib.pyx
+++ b/pandas/lib.pyx
@@ -754,7 +754,7 @@ def create_hdf_rows_2d(ndarray indexer0, ndarray[np.uint8_t, ndim=1] mask,
     """ return a list of objects ready to be converted to rec-array format """
 
     cdef:
-        unsigned int i, b, n_indexer0, n_blocks, tup_size
+        int i, b, n_indexer0, n_blocks, tup_size
         ndarray v
         list l
         object tup, val
@@ -789,7 +789,7 @@ def create_hdf_rows_3d(ndarray indexer0, ndarray indexer1,
     """ return a list of objects ready to be converted to rec-array format """
 
     cdef:
-        unsigned int i, j, b, n_indexer0, n_indexer1, n_blocks, tup_size
+        int i, j, b, n_indexer0, n_indexer1, n_blocks, tup_size
         ndarray v
         list l
         object tup, val
@@ -832,7 +832,7 @@ def create_hdf_rows_4d(ndarray indexer0, ndarray indexer1, ndarray indexer2,
     """ return a list of objects ready to be converted to rec-array format """
 
     cdef:
-        unsigned int i, j, k, b, n_indexer0, n_indexer1, n_indexer2, n_blocks, tup_size
+        int i, j, k, b, n_indexer0, n_indexer1, n_indexer2, n_blocks, tup_size
         ndarray v
         list l
         object tup, val
@@ -871,7 +871,7 @@ def create_hdf_rows_4d(ndarray indexer0, ndarray indexer1, ndarray indexer2,
                         PyTuple_SET_ITEM(tup, b+3, v)
                         Py_INCREF(v)
 
-                l.append(tup)
+                    l.append(tup)
 
     return l
 
