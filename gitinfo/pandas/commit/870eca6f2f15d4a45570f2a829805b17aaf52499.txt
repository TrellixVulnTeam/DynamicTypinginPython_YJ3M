commit 870eca6f2f15d4a45570f2a829805b17aaf52499
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Jul 6 10:53:32 2011 -0400

    always copy data when inserting into DataFrame. failing reverse op dtype=object unit test

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index d22cd508e..0f2dbd208 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -825,8 +825,8 @@ class DataFrame(PandasGeneric):
         if hasattr(value, '__iter__'):
             if isinstance(value, Series):
                 if value.index.equals(self.index):
-                    # no need to copy
-                    value = value.values
+                    # copy the values
+                    value = value.values.copy()
                 else:
                     value = value.reindex(self.index).values
             else:
@@ -836,6 +836,8 @@ class DataFrame(PandasGeneric):
                     value = np.array(value)
                     if value.dtype.type == np.str_:
                         value = np.array(value, dtype=object)
+                else:
+                    value = value.copy()
         else:
             value = np.repeat(value, len(self.index))
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index ece091a26..85e519da9 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -89,6 +89,13 @@ class CheckIndexing(object):
         self.assertEqual(smaller['col10'].dtype, np.object_)
         self.assert_((smaller['col10'] == ['1', '2']).all())
 
+    def test_setitem_always_copy(self):
+        s = self.frame['A'].copy()
+        self.frame['E'] = s
+
+        self.frame['E'][5:10] = np.nan
+        self.assert_(notnull(s[5:10]).all())
+
     def test_setitem_boolean(self):
         df = self.frame.copy()
         values = self.frame.values
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 732481eb3..102c9648c 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -453,6 +453,21 @@ class TestSeries(unittest.TestCase):
         expected = self.ts.values[:-5] + int_ts.values
         self.assert_(np.array_equal(added[:-5], expected))
 
+    def test_operators_reverse_object(self):
+        # GH 56
+        arr = Series(np.random.randn(10), index=np.arange(10),
+                     dtype=object)
+
+        def _check_op(arr, op):
+            result = op(1., arr)
+            expected = op(1., arr.astype(float))
+            assert_series_equal(result, expected)
+
+        _check_op(arr, operator.add)
+        _check_op(arr, operator.sub)
+        _check_op(arr, operator.mul)
+        _check_op(arr, operator.div)
+
     def test_operators_frame(self):
         # rpow does not work with DataFrame
         df = DataFrame({'A' : self.ts})
