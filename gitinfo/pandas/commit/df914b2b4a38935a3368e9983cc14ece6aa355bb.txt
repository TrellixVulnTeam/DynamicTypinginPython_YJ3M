commit df914b2b4a38935a3368e9983cc14ece6aa355bb
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu May 24 14:09:35 2012 -0400

    BLD: more msvc fixes

diff --git a/pandas/src/ujson/python/objToJSON.c b/pandas/src/ujson/python/objToJSON.c
index d5ff7e79a..0b90b3145 100644
--- a/pandas/src/ujson/python/objToJSON.c
+++ b/pandas/src/ujson/python/objToJSON.c
@@ -228,6 +228,7 @@ void NpyArr_iterBegin(JSOBJ _obj, JSONTypeContext *tc)
 {
     PyArrayObject *obj;
     PyArray_Descr *dtype;
+    NpyArrContext *npyarr;
 
     if (GET_TC(tc)->newObj)
     {
@@ -241,7 +242,7 @@ void NpyArr_iterBegin(JSOBJ _obj, JSONTypeContext *tc)
     if (PyArray_SIZE(obj) > 0)
     {
         PRINTMARK();
-        NpyArrContext *npyarr = PyObject_Malloc(sizeof(NpyArrContext));
+        npyarr = PyObject_Malloc(sizeof(NpyArrContext));
         GET_TC(tc)->npyarr = npyarr;
 
         if (!npyarr)
@@ -321,9 +322,10 @@ void NpyArrPassThru_iterBegin(JSOBJ obj, JSONTypeContext *tc)
 
 void NpyArrPassThru_iterEnd(JSOBJ obj, JSONTypeContext *tc)
 {
+    NpyArrContext* npyarr;
     PRINTMARK();
     // finished this dimension, reset the data pointer
-    NpyArrContext* npyarr = GET_TC(tc)->npyarr;
+    npyarr = GET_TC(tc)->npyarr;
     npyarr->curdim--;
     npyarr->dataptr -= npyarr->stride * npyarr->index[npyarr->stridedim];
     npyarr->stridedim -= npyarr->inc;
@@ -340,8 +342,9 @@ void NpyArrPassThru_iterEnd(JSOBJ obj, JSONTypeContext *tc)
 
 int NpyArr_iterNextItem(JSOBJ _obj, JSONTypeContext *tc)
 {
+    NpyArrContext* npyarr;
     PRINTMARK();
-    NpyArrContext* npyarr = GET_TC(tc)->npyarr;
+    npyarr = GET_TC(tc)->npyarr;
 
     if (GET_TC(tc)->itemValue != npyarr->array)
     {
@@ -363,8 +366,9 @@ int NpyArr_iterNextItem(JSOBJ _obj, JSONTypeContext *tc)
 
 int NpyArr_iterNext(JSOBJ _obj, JSONTypeContext *tc)
 {
+    NpyArrContext* npyarr;
     PRINTMARK();
-    NpyArrContext *npyarr = GET_TC(tc)->npyarr;
+    npyarr = GET_TC(tc)->npyarr;
 
     if (npyarr->curdim >= npyarr->ndim || npyarr->index[npyarr->stridedim] >= npyarr->dim)
     {
@@ -395,8 +399,9 @@ JSOBJ NpyArr_iterGetValue(JSOBJ obj, JSONTypeContext *tc)
 
 char *NpyArr_iterGetName(JSOBJ obj, JSONTypeContext *tc, size_t *outLen)
 {
+    NpyArrContext* npyarr;
     PRINTMARK();
-    NpyArrContext *npyarr = GET_TC(tc)->npyarr;
+    npyarr = GET_TC(tc)->npyarr;
     npy_intp idx;
     if (GET_TC(tc)->iterNext == NpyArr_iterNextItem)
     {
@@ -483,6 +488,8 @@ int Dir_iterNext(JSOBJ _obj, JSONTypeContext *tc)
     PyObject *obj = (PyObject *) _obj;
     PyObject *itemValue = GET_TC(tc)->itemValue;
     PyObject *itemName = NULL;
+    PyObject* attr;
+    char* attrStr;
 
 
     if (itemValue)
@@ -493,8 +500,8 @@ int Dir_iterNext(JSOBJ _obj, JSONTypeContext *tc)
 
     for (; GET_TC(tc)->index  < GET_TC(tc)->size; GET_TC(tc)->index ++)
     {
-        PyObject* attr = PyList_GET_ITEM(GET_TC(tc)->attrList, GET_TC(tc)->index);
-        char* attrStr = PyString_AS_STRING(attr);
+        attr = PyList_GET_ITEM(GET_TC(tc)->attrList, GET_TC(tc)->index);
+        attrStr = PyString_AS_STRING(attr);
 
         if (attrStr[0] == '_')
         {
@@ -608,12 +615,13 @@ void Index_iterBegin(JSOBJ obj, JSONTypeContext *tc)
 
 int Index_iterNext(JSOBJ obj, JSONTypeContext *tc)
 {
+    Py_ssize_t index;
     if (!GET_TC(tc)->citemName)
     {
         return 0;
     }
 
-    Py_ssize_t index = GET_TC(tc)->index;
+    index = GET_TC(tc)->index;
     Py_XDECREF(GET_TC(tc)->itemValue);
     if (index == 0)
     {
@@ -675,12 +683,13 @@ void Series_iterBegin(JSOBJ obj, JSONTypeContext *tc)
 
 int Series_iterNext(JSOBJ obj, JSONTypeContext *tc)
 {
+    Py_ssize_t index;
     if (!GET_TC(tc)->citemName)
     {
         return 0;
     }
 
-    Py_ssize_t index = GET_TC(tc)->index;
+    index = GET_TC(tc)->index;
     Py_XDECREF(GET_TC(tc)->itemValue);
     if (index == 0)
     {
@@ -750,12 +759,13 @@ void DataFrame_iterBegin(JSOBJ obj, JSONTypeContext *tc)
 
 int DataFrame_iterNext(JSOBJ obj, JSONTypeContext *tc)
 {
+    Py_ssize_t index;
     if (!GET_TC(tc)->citemName)
     {
         return 0;
     }
 
-    Py_ssize_t index = GET_TC(tc)->index;
+    index = GET_TC(tc)->index;
     Py_XDECREF(GET_TC(tc)->itemValue);
     if (index == 0)
     {
diff --git a/setup.py b/setup.py
index d65000584..1576eaf34 100755
--- a/setup.py
+++ b/setup.py
@@ -83,15 +83,17 @@ from distutils.command.sdist import sdist
 
 from os.path import splitext, basename, join as pjoin
 
-DESCRIPTION = "Powerful data structures for data analysis and statistics"
+DESCRIPTION = ("Powerful data structures for data analysis, time series,"
+               "and statistics")
 LONG_DESCRIPTION = """
 **pandas** is a Python package providing fast, flexible, and expressive data
-structures designed to make working with "relational" or "labeled" data both
-easy and intuitive. It aims to be the fundamental high-level building block for
-doing practical, **real world** data analysis in Python. Additionally, it has
-the broader goal of becoming **the most powerful and flexible open source data
-analysis / manipulation tool available in any language**. It is already well on
-its way toward this goal.
+structures designed to make working with structured (tabular, multidimensional,
+potentially heterogeneous) and time series data both easy and intuitive. It
+aims to be the fundamental high-level building block for doing practical,
+**real world** data analysis in Python. Additionally, it has the broader goal
+of becoming **the most powerful and flexible open source data analysis /
+manipulation tool available in any language**. It is already well on its way
+toward this goal.
 
 pandas is well suited for many different kinds of data:
 
