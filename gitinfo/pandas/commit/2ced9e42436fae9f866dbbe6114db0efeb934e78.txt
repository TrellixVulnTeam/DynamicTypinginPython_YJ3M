commit 2ced9e42436fae9f866dbbe6114db0efeb934e78
Author: Adam Klein <adamklein@gmail.com>
Date:   Thu Feb 23 18:16:50 2012 -0500

    TST: remove object/dt64 test duplication, fix broken tests

diff --git a/pandas/core/datetools.py b/pandas/core/datetools.py
index fdd16b960..d6de151c2 100644
--- a/pandas/core/datetools.py
+++ b/pandas/core/datetools.py
@@ -34,6 +34,9 @@ def _dt_box_array(arr, offset=None, tzinfo=None):
     if arr is None:
         return arr
 
+    if not isinstance(arr, np.ndarray):
+        return arr
+
     boxfunc = lambda x: _dt_box(x, offset=offset, tzinfo=tzinfo)
     boxer = np.frompyfunc(boxfunc, 1, 1)
     return boxer(arr)
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 352ed6792..2da952516 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -444,7 +444,6 @@ class Grouper(object):
             for name in groups:
                 inds = indices[name]
                 group = data.take(inds, axis=axis)
-
                 yield name, group
         else:
             # provide "flattened" iterator for multi-group setting
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 59b295fa3..6cfe21faf 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -994,7 +994,7 @@ class Int64Index(Index):
 # -------- some conversion wrapper functions
 
 def _as_i8(arg):
-    if isinstance(arg, np.ndarray):
+    if isinstance(arg, np.ndarray) and arg.dtype == np.datetime64:
         return arg.view('i8', type=np.ndarray)
     else:
         return arg
@@ -1009,7 +1009,7 @@ def _wrap_i8_function(f):
 def _wrap_dt_function(f):
     @staticmethod
     def wrapper(*args, **kwargs):
-        view_args = [_dt_box_array(arg) for arg in args]
+        view_args = [_dt_box_array(_as_i8(arg)) for arg in args]
         return f(*view_args, **kwargs)
     return wrapper
 
@@ -1090,9 +1090,9 @@ class DatetimeIndex(Int64Index):
     _map_indices   = _wrap_i8_function(lib.map_indices_int64)
     _pad           = _wrap_i8_function(lib.pad_int64)
     _backfill      = _wrap_i8_function(lib.backfill_int64)
+    _groupby       = lib.groupby_arrays # _wrap_i8_function(lib.groupby_int64)
 
     _arrmap        = _wrap_dt_function(lib.arrmap_object)
-    _groupby       = _wrap_dt_function(lib.groupby_object)
 
     __eq__ = _dt_index_cmp('__eq__')
     __ne__ = _dt_index_cmp('__ne__')
@@ -1258,8 +1258,6 @@ class DatetimeIndex(Int64Index):
 
         return indexSlice
 
-    # TODO: fix repr
-
     def __repr__(self):
         if self.offset is not None:
             output = str(self.__class__) + '\n'
@@ -1513,11 +1511,10 @@ class DatetimeIndex(Int64Index):
         return lib.fast_field_accessor(self.asi8, 'us')
 
     def __iter__(self):
-        asi8 = self.asi8
         if hasattr(self, 'offset') and self.offset is not None:
-            return iter(_dt_box_array(asi8, self.offset))
+            return iter(_dt_box_array(self.asi8, self.offset))
         else:
-            return iter(_dt_box_array(asi8))
+            return iter(_dt_box_array(self.asi8))
 
     def searchsorted(self, key, side='left'):
         if isinstance(key, np.ndarray):
@@ -1611,7 +1608,7 @@ class DatetimeIndex(Int64Index):
         -------
         normalized : DateRange
         """
-        new_dates = np.array([tz.normalize(x.replace(tzinfo=self.tzinfo)) 
+        new_dates = np.array([tz.normalize(x.replace(tzinfo=self.tzinfo))
                               for x in self])
         new_dates = new_dates.view(DatetimeIndex)
         new_dates.offset = self.offset
diff --git a/pandas/src/groupby.pyx b/pandas/src/groupby.pyx
index 7730077c4..99df8d745 100644
--- a/pandas/src/groupby.pyx
+++ b/pandas/src/groupby.pyx
@@ -864,3 +864,38 @@ def ts_upsample_generic(ndarray[object] indices,
 
     return output
 
+
+def groupby_arrays(ndarray index, ndarray _labels):
+    cdef:
+        Py_ssize_t i, lab, cur, start, n = len(index)
+        ndarray[int32_t] labels
+        dict result = {}
+
+    if _labels.dtype == np.int32:
+        labels = _labels
+    else:
+        labels = _labels.astype(np.int32)
+
+    index = np.asarray(index)
+
+    # this is N log N. If this is a bottleneck may we worth fixing someday
+    indexer = labels.argsort(kind='mergesort')
+
+    labels = labels.take(indexer)
+    index = index.take(indexer)
+
+    if n == 0:
+        return result
+
+    start = 0
+    cur = labels[0]
+    for i in range(1, n):
+        lab = labels[i]
+
+        if lab != cur:
+            if lab != -1:
+                result[cur] = index[start:i]
+            start = i
+        cur = lab
+
+    return result
diff --git a/pandas/tests/test_daterange.py b/pandas/tests/test_daterange.py
index 0edd07d41..5fb18dccb 100644
--- a/pandas/tests/test_daterange.py
+++ b/pandas/tests/test_daterange.py
@@ -561,18 +561,6 @@ class TestDatetimePyx(unittest.TestCase):
                     self.assert_(t == stack.pop())
                     self.assert_(t.weekday() == day)
 
-
-if tm.PERFORM_DATETIME64_TESTS:
-    class TestDatetime64Range(TestDateRange):
-        def setUp(self):
-            self.dt64_setting = tm._test_with_datetime64
-            tm._test_with_datetime64 = True
-            super(TestDatetime64Range, self).setUp()
-
-        def tearDown(self):
-            super(TestDatetime64Range, self).tearDown()
-            tm._test_with_datetime64 = self.dt64_setting
-
 def _skip_if_no_pytz():
     try:
         import pytz
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index d9532769f..5fd54466d 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -4660,20 +4660,6 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         exp = Y['g'].sum()
         self.assert_(isnull(Y['g']['c']))
 
-if tm.PERFORM_DATETIME64_TESTS:
-    class TestDataFrameDatetime64(TestDataFrame):
-        '''
-        Same tests as for TestSeries, but force datetime64 usage"
-        '''
-        def setUp(self):
-            self.dt64_setting = tm._test_with_datetime64
-            tm._test_with_datetime64 = True
-            super(TestDataFrameDatetime64, self).setUp()
-
-        def tearDown(self):
-            super(TestDataFrameDatetime64, self).tearDown()
-            tm._test_with_datetime64 = self.dt64_setting
-
 if __name__ == '__main__':
     # unittest.main()
     import nose
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 9c7532430..617a34027 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -472,8 +472,8 @@ class TestGroupBy(unittest.TestCase):
         indices = grouped.indices
 
         for k, v in groups.iteritems():
-            samething = self.tsframe.index.take(indices[k]).astype('O')
-            self.assert_(np.array_equal(v, samething))
+            samething = self.tsframe.index.take(indices[k])
+            self.assert_(np.array_equal(v, samething.values))
 
     def test_frame_groupby_columns(self):
         mapping = {
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 600fd26de..2b564d5e8 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -113,9 +113,7 @@ class TestIndex(unittest.TestCase):
     def test_comparators(self):
         index = self.dateIndex
         element = index[len(index) // 2]
-
-        if tm._test_with_datetime64:
-            element = _dt_unbox(element)
+        element = _dt_unbox(element)
 
         arr = np.array(index)
 
@@ -154,9 +152,7 @@ class TestIndex(unittest.TestCase):
     def test_getitem(self):
         arr = np.array(self.dateIndex)
         exp = self.dateIndex[5]
-
-        if tm._test_with_datetime64:
-            exp = _dt_unbox(exp)
+        exp = _dt_unbox(exp)
 
         self.assertEquals(exp, arr[5])
 
@@ -705,20 +701,6 @@ class TestInt64Index(unittest.TestCase):
         repr(s)
         repr(df)
 
-if tm.PERFORM_DATETIME64_TESTS:
-    class TestDatetime64Index(TestIndex):
-        '''
-        Same tests as for TestIndex, but force datetime64 usage"
-        '''
-        def setUp(self):
-            self.dt64_setting = tm._test_with_datetime64
-            tm._test_with_datetime64 = True
-            super(TestDatetime64Index, self).setUp()
-
-        def tearDown(self):
-            super(TestDatetime64Index, self).tearDown()
-            tm._test_with_datetime64 = self.dt64_setting
-
 class TestMultiIndex(unittest.TestCase):
 
     def setUp(self):
@@ -1420,20 +1402,6 @@ class TestMultiIndex(unittest.TestCase):
                                    [0, 1, 2, 0, 0, 1, 2]])
         self.assert_(index.has_duplicates)
 
-if tm.PERFORM_DATETIME64_TESTS:
-    class TestDatetime64MultiIndex(TestMultiIndex):
-        '''
-        Same tests as for TestIndex, but force datetime64 usage"
-        '''
-        def setUp(self):
-            self.dt64_setting = tm._test_with_datetime64
-            tm._test_with_datetime64 = True
-            super(TestDatetime64MultiIndex, self).setUp()
-
-        def tearDown(self):
-            super(TestDatetime64MultiIndex, self).tearDown()
-            tm._test_with_datetime64 = self.dt64_setting
-
 class TestFactor(unittest.TestCase):
 
     def setUp(self):
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 88f0b18d3..7cdfdc80c 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -1221,34 +1221,6 @@ class TestLongPanel(unittest.TestCase):
         # corner case, empty
         df = pivot(np.array([]), np.array([]), np.array([]))
 
-if tm.PERFORM_DATETIME64_TESTS:
-    class TestPanelDatetime64(TestPanel):
-        '''
-        Same tests as for TestPanel, but force datetime64 usage"
-        '''
-        def setUp(self):
-            self.dt64_setting = tm._test_with_datetime64
-            tm._test_with_datetime64 = True
-            super(TestPanelDatetime64, self).setUp()
-
-        def tearDown(self):
-            super(TestPanelDatetime64, self).tearDown()
-            tm._test_with_datetime64 = self.dt64_setting
-
-if tm.PERFORM_DATETIME64_TESTS:
-    class TestLongPanelDatetime64(TestLongPanel):
-        '''
-        Same tests as for TestLongPanel, but force datetime64 usage"
-        '''
-        def setUp(self):
-            self.dt64_setting = tm._test_with_datetime64
-            tm._test_with_datetime64 = True
-            super(TestLongPanelDatetime64, self).setUp()
-
-        def tearDown(self):
-            super(TestLongPanelDatetime64, self).tearDown()
-            tm._test_with_datetime64 = self.dt64_setting
-
 def test_monotonic():
     pos = np.array([1, 2, 3, 5])
 
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 003be6cde..a991ef464 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -2152,20 +2152,6 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         # it works!
         result = np.unique(self.ts)
 
-if tm.PERFORM_DATETIME64_TESTS:
-    class TestSeriesDatetime64(TestSeries):
-        '''
-        Same tests as for TestSeries, but force datetime64 usage"
-        '''
-        def setUp(self):
-            self.dt64_setting = tm._test_with_datetime64
-            tm._test_with_datetime64 = True
-            super(TestSeriesDatetime64, self).setUp()
-
-        def tearDown(self):
-            super(TestSeriesDatetime64, self).tearDown()
-            tm._test_with_datetime64 = self.dt64_setting
-
 if __name__ == '__main__':
     nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
                    exit=False)
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index c79ad688e..fecf6de89 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -34,12 +34,6 @@ Panel = panel.Panel
 N = 30
 K = 4
 
-# PERFORM_DATETIME64_TESTS additionally runs each of:
-#   test_(frame|panel|series|index|multiindex|daterange)
-# where date ranges and indices are composed of datetime64[us] dtype
-
-PERFORM_DATETIME64_TESTS = True
-
 def rands(n):
     choices = string.ascii_letters + string.digits
     return ''.join([random.choice(choices) for _ in xrange(n)])
@@ -207,16 +201,10 @@ def getMixedTypeDict():
 
     return index, data
 
-_test_with_datetime64 = False
-
 def makeDateIndex(k):
     dt = datetime(2000,1,1)
     dr = DateRange(dt, periods=k)
-    if _test_with_datetime64:
-        return DatetimeIndex(dr)
-    else:
-        dates = list(dr)
-        return Index(dates, dtype=object)
+    return DatetimeIndex(dr)
 
 def makeTimeSeries():
     return Series(randn(N), index=makeDateIndex(N))
