commit 96ce1a9a2cf3de03b3ace1af2aa4e5391476621b
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Jun 12 22:59:04 2011 -0400

    more unit tests

diff --git a/pandas/core/api.py b/pandas/core/api.py
index 2c613a4f7..5b2c19a19 100644
--- a/pandas/core/api.py
+++ b/pandas/core/api.py
@@ -10,6 +10,6 @@ from pandas.core.index import Index
 from pandas.core.daterange import DateRange
 from pandas.core.series import Series, TimeSeries
 from pandas.core.frame import DataFrame
-from pandas.core.matrix import DataMatrix
 from pandas.core.panel import WidePanel, LongPanel, pivot
 
+DataMatrix = DataFrame
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index ce586a861..5027f131e 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -245,17 +245,23 @@ class BlockManager(object):
         for block in self.blocks:
             block.set_ref_columns(self._columns, maybe_rename=False)
 
-    # TODO: FIX FIX FIX
     def __getstate__(self):
+        block_values = [b.values for b in self.blocks]
+        block_columns = [np.asarray(b.columns) for b in self.blocks]
         return (np.asarray(self.index),
                 np.asarray(self.columns),
-                self.blocks)
+                block_values, block_columns)
 
     def __setstate__(self, state):
-        index, columns, blocks = state
+        index, ref_columns, bvalues, bcolumns = state
         self.index = _ensure_index(index)
+        self._columns = _ensure_index(ref_columns)
+
+        blocks = []
+        for values, columns in zip(bvalues, bcolumns):
+            blk = make_block(values, columns, self.columns)
+            blocks.append(blk)
         self.blocks = blocks
-        self.columns = _ensure_index(columns)
 
     def __repr__(self):
         output = 'BlockManager'
diff --git a/pandas/core/tests/test_internals.py b/pandas/core/tests/test_internals.py
index fd52eb5a4..6ec4599f5 100644
--- a/pandas/core/tests/test_internals.py
+++ b/pandas/core/tests/test_internals.py
@@ -2,13 +2,14 @@ import unittest
 
 import numpy as np
 
-from pandas import Index
+from pandas import Index, DataFrame
 from pandas.core.internals import *
 
-from pandas.util.testing import (assert_almost_equal, randn)
+from pandas.util.testing import (assert_almost_equal, assert_frame_equal, randn)
 
 def assert_block_equal(left, right):
     assert_almost_equal(left.values, right.values)
+    assert(left.dtype == right.dtype)
     assert(left.columns.equals(right.columns))
     assert(left.ref_columns.equals(right.ref_columns))
 
@@ -42,6 +43,18 @@ class TestBlock(unittest.TestCase):
     def test_constructor(self):
         pass
 
+    def test_pickle(self):
+        import pickle
+
+        def _check(blk):
+            pickled = pickle.dumps(blk)
+            unpickled = pickle.loads(pickled)
+            assert_block_equal(blk, unpickled)
+
+        _check(self.fblock)
+        _check(self.oblock)
+        _check(self.bool_block)
+
     def test_ref_locs(self):
         assert_almost_equal(self.fblock.ref_locs, [0, 2, 4])
 
@@ -145,6 +158,18 @@ class TestBlockManager(unittest.TestCase):
         self.assert_('a' in self.mgr)
         self.assert_('g' not in self.mgr)
 
+    def test_pickle(self):
+        import pickle
+
+        pickled = pickle.dumps(self.mgr)
+        mgr2 = pickle.loads(pickled)
+
+        # same result
+        assert_frame_equal(DataFrame(self.mgr), DataFrame(mgr2))
+
+        # share ref_columns
+        self.assert_(mgr2.blocks[0].ref_columns is mgr2.blocks[1].ref_columns)
+
     def test_get(self):
         pass
 
diff --git a/pandas/stats/var.py b/pandas/stats/var.py
index 6f8b864cf..62f80b87d 100644
--- a/pandas/stats/var.py
+++ b/pandas/stats/var.py
@@ -3,7 +3,7 @@ from __future__ import division
 import numpy as np
 
 from pandas.util.decorators import cache_readonly
-from pandas.core.matrix import DataFrame, DataMatrix
+from pandas.core.frame import DataFrame
 from pandas.core.panel import WidePanel
 from pandas.core.series import Series
 import pandas.stats.common as common
@@ -60,7 +60,7 @@ class VAR(object):
 
     def forecast(self, h):
         """
-        Returns a DataMatrix containing the forecasts for 1, 2, ..., n time
+        Returns a DataFrame containing the forecasts for 1, 2, ..., n time
         steps.  Each column x1 contains the forecasts of the x1 column.
 
         Parameters
@@ -70,13 +70,11 @@ class VAR(object):
 
         Returns
         -------
-        DataMatrix
+        DataFrame
         """
         forecast = self._forecast_raw(h)[:, 0, :]
-
-        m = DataMatrix(
-            forecast, index=xrange(1, 1 + h), columns=self._columns)
-        return m
+        return DataFrame(forecast, index=xrange(1, 1 + h),
+                         columns=self._columns)
 
     def forecast_cov(self, h):
         """
@@ -84,9 +82,9 @@ class VAR(object):
 
         Returns
         -------
-        DataMatrix
+        DataFrame
         """
-        return [DataMatrix(value, index=self._columns, columns=self._columns)
+        return [DataFrame(value, index=self._columns, columns=self._columns)
                 for value in self._forecast_cov_raw(h)]
 
     def forecast_std_err(self, h):
@@ -95,10 +93,10 @@ class VAR(object):
 
         Returns
         -------
-        DataMatrix
+        DataFrame
         """
-        return DataMatrix(self._forecast_std_err_raw(h),
-                          index=xrange(1, 1 + h), columns=self._columns)
+        return DataFrame(self._forecast_std_err_raw(h),
+                         index=xrange(1, 1 + h), columns=self._columns)
 
     @cache_readonly
     def granger_causality(self):
@@ -112,12 +110,12 @@ class VAR(object):
         x1 ~ L(x1, x2)
 
         The f-stats of these results are placed in the 'x1' column of the
-        returned DataMatrix.  We then repeat for x2, x3.
+        returned DataFrame.  We then repeat for x2, x3.
 
         Returns
         -------
-        Dict, where 'f-stat' returns the DataMatrix containing the f-stats,
-        and 'p-value' returns the DataMatrix containing the corresponding
+        Dict, where 'f-stat' returns the DataFrame containing the f-stats,
+        and 'p-value' returns the DataFrame containing the corresponding
         p-values of the f-stats.
         """
         from pandas.stats.api import ols
@@ -199,13 +197,13 @@ class VAR(object):
     @cache_readonly
     def resid(self):
         """
-        Returns the DataMatrix containing the residuals of the VAR regressions.
+        Returns the DataFrame containing the residuals of the VAR regressions.
         Each column x1 contains the residuals generated by regressing the x1
         column of the input against the lagged input.
 
         Returns
         -------
-        DataMatrix
+        DataFrame
         """
         d = dict([(col, series.resid)
                   for (col, series) in self.ols_results.iteritems()])
@@ -535,13 +533,13 @@ class PanelVAR(VAR):
     @cache_readonly
     def resid(self):
         """
-        Returns the DataMatrix containing the residuals of the VAR regressions.
+        Returns the DataFrame containing the residuals of the VAR regressions.
         Each column x1 contains the residuals generated by regressing the x1
         column of the input against the lagged input.
 
         Returns
         -------
-        DataMatrix
+        DataFrame
         """
         d = dict([(key, value.resid)
                   for (key, value) in self.ols_results.iteritems()])
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 3b62faaf5..7e5d9e8d3 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -13,7 +13,6 @@ import pandas.core.index as index
 import pandas.core.daterange as daterange
 import pandas.core.series as series
 import pandas.core.frame as frame
-import pandas.core.matrix as matrix
 import pandas.core.panel as panel
 
 # to_reload = ['index', 'daterange', 'series', 'frame', 'matrix', 'panel']
@@ -24,7 +23,6 @@ DateRange = daterange.DateRange
 Index = index.Index
 Series = series.Series
 DataFrame = frame.DataFrame
-DataMatrix = matrix.DataMatrix
 WidePanel = panel.WidePanel
 
 N = 30
@@ -189,15 +187,15 @@ def makeTimeDataFrame():
 
 def makeDataMatrix():
     data = getSeriesData()
-    return DataMatrix(data)
+    return DataFrame(data)
 
 def makeTimeDataMatrix():
     data = getTimeSeriesData()
-    return DataMatrix(data)
+    return DataFrame(data)
 
 def makeWidePanel():
     cols = ['Item' + c for c in string.ascii_uppercase[:K - 1]]
-    data = dict((c, makeTimeDataMatrix()) for c in cols)
+    data = dict((c, makeTimeDataFrame()) for c in cols)
     return WidePanel.fromDict(data)
 
 def add_nans(panel):
