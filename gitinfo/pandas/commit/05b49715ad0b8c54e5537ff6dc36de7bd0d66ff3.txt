commit 05b49715ad0b8c54e5537ff6dc36de7bd0d66ff3
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jan 19 22:45:27 2012 -0500

    ENH: don't force the conversion of Decimal objects in groupby either, skip spearmanr test in scipy < 0.8

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 51c6fcaac..6728d98d1 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -3613,17 +3613,12 @@ class DataFrame(NDFrame):
                 empty = self[col].count() == 0
                 y = self[col].values if not empty else np.zeros(x.shape)
 
-                #try:
                 if subplots:
                     ax = axes[i]
                     ax.plot(x, y, 'k', label=str(col), **kwds)
                     ax.legend(loc='best')
                 else:
                     ax.plot(x, y, label=str(col), **kwds)
-                #except Exception, e:
-                #    msg = ('Unable to plot data %s vs index %s,\n'
-                #           'error was: %s' % (str(y), str(x), str(e)))
-                #    raise Exception(msg)
 
                 ax.grid(grid)
 
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 75ef4195b..e83f22342 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -446,7 +446,7 @@ class GroupBy(object):
             counts[label] = group.shape[0]
             result[label] = res
 
-        result = lib.maybe_convert_objects(result)
+        result = lib.maybe_convert_objects(result, try_float=0)
         return result, counts
 
     def _python_apply_general(self, func, *args, **kwargs):
diff --git a/pandas/src/inference.pyx b/pandas/src/inference.pyx
index edacd8f24..a87b9feaf 100644
--- a/pandas/src/inference.pyx
+++ b/pandas/src/inference.pyx
@@ -229,7 +229,7 @@ def maybe_convert_numeric(ndarray[object] values, set na_values):
     else:
         return ints
 
-def maybe_convert_objects(ndarray[object] objects, bint try_float=1):
+def maybe_convert_objects(ndarray[object] objects, bint try_float=0):
     '''
     Type inference function-- convert object array to proper dtype
     '''
@@ -302,7 +302,8 @@ def maybe_convert_objects(ndarray[object] objects, bint try_float=1):
 
         return objects
 
-convert_sql_column = maybe_convert_objects
+def convert_sql_column(x):
+    return maybe_convert_objects(x, try_float=1)
 
 def try_parse_dates(ndarray[object] values, parser=None):
     cdef:
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 81e75d5c2..059fc3678 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -1247,6 +1247,30 @@ class TestGroupBy(unittest.TestCase):
         result = obj.groupby(inds).agg(Series.median)
         self.assert_(result.isnull().all())
 
+    def test_convert_objects_leave_decimal_alone(self):
+        from decimal import Decimal
+
+        s = Series(range(5))
+        labels = np.array(['a', 'b', 'c', 'd', 'e'], dtype='O')
+
+        def convert_fast(x):
+            return Decimal(x.mean())
+
+        def convert_force_pure(x):
+            # base will be length 0
+            assert(len(x.base) == len(x))
+            return Decimal(x.mean())
+
+        grouped = s.groupby(labels)
+
+        result = grouped.agg(convert_fast)
+        self.assert_(result.dtype == np.object_)
+        self.assert_(isinstance(result[0], Decimal))
+
+        result = grouped.agg(convert_force_pure)
+        self.assert_(result.dtype == np.object_)
+        self.assert_(isinstance(result[0], Decimal))
+
 class TestPanelGroupBy(unittest.TestCase):
 
     def setUp(self):
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index fb9358c00..7006424b6 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -1257,9 +1257,10 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         self.assertAlmostEqual(result, expected)
 
     def test_corr_rank(self):
+        import scipy
         import scipy.stats as stats
-        # kendall and spearman
 
+        # kendall and spearman
         A = tm.makeTimeSeries()
         B = tm.makeTimeSeries()
         A[-5:] = A[:5]
@@ -1271,6 +1272,10 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         expected = stats.spearmanr(A, B)[0]
         self.assertAlmostEqual(result, expected)
 
+        # these methods got rewritten in 0.8
+        if int(scipy.__version__.split('.')[1]) < 9:
+            raise nose.SkipTest
+
         # results from R
         A = Series([-0.89926396,  0.94209606, -1.03289164, -0.95445587,
                     0.76910310, -0.06430576, -2.09704447, 0.40660407,
