commit 5924b7b972d92ea465f2df5f3e7e6d9ffecdb0b3
Author: Adam Klein <adamklein@gmail.com>
Date:   Fri Feb 3 18:30:27 2012 -0500

    cleaned up a bit

diff --git a/pandas/core/daterange.py b/pandas/core/daterange.py
index dda6e62b5..7c728c72b 100644
--- a/pandas/core/daterange.py
+++ b/pandas/core/daterange.py
@@ -1,4 +1,4 @@
-# pylint: disable=E1101,E110a
+# pylint: disable=E1101,E1103
 
 from datetime import datetime
 import operator
diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index afdaedcd3..959e36535 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -215,201 +215,6 @@ cdef class Timestamp(object):
     def weekday(Timestamp self):
         return dayofweek(self.dtval.year, self.dtval.month, self.dtval.day)
 
-    #def __getattr__(self, object attrib):
-    #    return getattr(self.dtval, attrib)
-
-# Objects to support date/time arithmetic
-# --------------------------------------------------------------------------------
-
-#cdef class Timestamp:
-#    """
-#    A timestamp (absolute moment in time) to microsecond resolution; number of
-#    microseconds since the POSIX epoch, ignoring leap seconds (thereby different
-#    from UTC).
-#    """
-#    cdef:
-#        int64_t value
-#        npy_datetimestruct dts
-
-#    def __init__(self, object ts):
-#        """
-#        Construct a timestamp that is datetime64-compatible from any of:
-#            - int64 pyarray scalar object
-#            - python int or long object
-#            - iso8601 string object
-#            - python datetime object
-#            - another timestamp object
-#        """
-#        cdef:
-#            Py_ssize_t strlen
-#            npy_bool islocal, special
-#            NPY_DATETIMEUNIT out_bestunit
-
-#        if is_integer_object(ts) or PyInt_Check(ts) or PyLong_Check(ts):
-#            self.value = ts
-#            PyArray_DatetimeToDatetimeStruct(self.value, NPY_FR_us, &self.dts)
-#        elif PyString_Check(ts):
-#            parse_iso_8601_datetime(ts, len(ts), NPY_FR_us, NPY_UNSAFE_CASTING,
-#                                    &self.dts, &islocal, &out_bestunit, &special)
-#            self.value = PyArray_DatetimeStructToDatetime(NPY_FR_us, &self.dts)
-#        elif PyDateTime_Check(ts):
-#            convert_pydatetime_to_datetimestruct(<PyObject *>ts, &self.dts,
-#                                                 &out_bestunit, 1)
-#            self.value = PyArray_DatetimeStructToDatetime(out_bestunit, &self.dts)
-#        else:
-#            raise ValueError("Could not construct Timestamp from argument")
-
-#    def __repr__(self):
-#        return "Timestamp(%d)" % self.value
-
-#    def __hash__(self):
-#        return hash(self.value)
-
-#    def __sub__(self, object other):
-#        """
-#        Subtract two timestamps, results in an duration.
-#        """
-#        if isinstance(other, Timestamp):
-#            return self.value - other.asint
-#        elif isinstance(other, Delta):
-#            return other.__sub__(self)
-#        else:
-#            raise NotImplementedError("Sub operation not supported")
-
-#    def __richcmp__(Timestamp self, object other, int op):
-#        if not isinstance(other, Timestamp):
-#            raise ValueError("Cannot compare to non-Timestamp")
-
-#        if op == 0:
-#            return self.value < other.asint
-#        if op == 2:
-#            return self.value == other.asint
-#        if op == 4:
-#            return self.value > other.asint
-#        if op == 1:
-#            return self.value <= other.asint
-#        if op == 3:
-#            return self.value != other.asint
-#        if op == 5:
-#            return self.value >= other.asint
-
-#        raise NotImplementedError("Op %d not recognized" % op)
-
-#    def __add__(self, object other):
-#        """
-#        Add an Interval, Duration, or Period to the Timestamp, resulting in
-#        new Timestamp.
-#        """
-#        if isinstance(other, Duration):
-#            return Timestamp(self.asint + other.length)
-#        elif isinstance(other, Delta):
-#            return other.__add__(self)
-#        else:
-#            raise NotImplementedError("Add operation not supported")
-
-#    def __str__(self):
-#        """
-#        Output ISO8601 format string representation of timestamp.
-#        """
-#        cdef:
-#            int outlen
-#            char *isostr
-#            bytes py_str
-
-#        outlen = get_datetime_iso_8601_strlen(0, NPY_FR_us)
-
-#        isostr = <char *>malloc(outlen)
-#        make_iso_8601_datetime(&self.dts, isostr, outlen, 0, NPY_FR_us,
-#                               0, NPY_UNSAFE_CASTING)
-#        py_str = isostr
-#        free(isostr)
-
-#        return py_str
-
-#    def replace(Timestamp self, int year=-1, int month=-1, int day=-1,
-#                                int hour=-1, int minute=-1, int second=-1,
-#                                int microsecond=-1):
-#        cdef:
-#            npy_datetimestruct dts
-
-#        dts = self.dts
-
-#        if year >= 0:
-#            dts.year = year
-#        if month >= 1:
-#            dts.month = month
-#        if day >= 1:
-#            dts.day = day
-#        if hour >= 0:
-#            dts.hour = hour
-#        if minute >= 0:
-#            dts.min = minute
-#        if second >= 0:
-#            dts.sec = second
-#        if microsecond >= 0:
-#            dts.us = microsecond
-
-#        return Timestamp(PyArray_DatetimeStructToDatetime(NPY_FR_us, &dts))
-
-#    cdef normalize(Timestamp self, time_res res):
-#        cdef:
-#            npy_datetimestruct dts
-
-#        dts = self.dts
-
-#        if res > r_microsecond:
-#            dts.us = 0
-#        if res > r_second:
-#            dts.sec = 0
-#        if res > r_minute:
-#            dts.min = 0
-#        if res > r_hour:
-#            dts.hour = 0
-#        if res > r_day:
-#            dts.day = 1
-#        if res > r_month:
-#            dts.month = 1
-#        if res > r_year:
-#            raise ValueError("Invalid resolution")
-
-#        return Timestamp(PyArray_DatetimeStructToDatetime(NPY_FR_us, &dts))
-
-#    property asint:
-#        def __get__(Timestamp self):
-#            return self.value
-
-#    property year:
-#        def __get__(Timestamp self):
-#            return self.dts.year
-
-#    property month:
-#        def __get__(Timestamp self):
-#            return self.dts.month
-
-#    property day:
-#        def __get__(Timestamp self):
-#            return self.dts.day
-
-#    property hour:
-#        def __get__(Timestamp self):
-#            return self.dts.hour
-
-#    property minute:
-#        def __get__(Timestamp self):
-#            return self.dts.min
-
-#    property second:
-#        def __get__(Timestamp self):
-#            return self.dts.sec
-
-#    property microsecond:
-#        def __get__(Timestamp self):
-#            return self.dts.us
-
-#    def weekday(Timestamp self):
-#        return dayofweek(self.dts.year, self.dts.month, self.dts.day)
-
-
 cdef class Duration:
     """
     Absolute length of time, similar to timedelta
