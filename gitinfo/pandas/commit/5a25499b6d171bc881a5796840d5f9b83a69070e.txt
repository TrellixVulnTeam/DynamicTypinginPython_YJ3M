commit 5a25499b6d171bc881a5796840d5f9b83a69070e
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jul 12 22:46:24 2012 -0400

    BUG: consider iso8601 strings as naive, not local close #1571

diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index 4b858f3a0..6685fd3ad 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -632,7 +632,9 @@ cdef inline _string_to_dts(object val, pandas_datetimestruct* dts):
 
     if PyUnicode_Check(val):
         val = PyUnicode_AsASCIIString(val);
-    result = parse_iso_8601_datetime(val, len(val), PANDAS_FR_ns, NPY_UNSAFE_CASTING,
+
+    result = parse_iso_8601_datetime(val, len(val), PANDAS_FR_ns,
+                                     NPY_UNSAFE_CASTING,
                                      dts, &islocal, &out_bestunit, &special)
     if result == -1:
         raise ValueError('Unable to parse %s' % str(val))
diff --git a/pandas/src/datetime/np_datetime_strings.c b/pandas/src/datetime/np_datetime_strings.c
index 857056427..a7b6d3b5f 100644
--- a/pandas/src/datetime/np_datetime_strings.c
+++ b/pandas/src/datetime/np_datetime_strings.c
@@ -774,16 +774,21 @@ parse_iso_8601_datetime(char *str, int len,
 
 parse_timezone:
     if (sublen == 0) {
+        // Unlike NumPy, treating no time zone as naive
+        goto finish;
+
+/*
         if (convert_datetimestruct_local_to_utc(out, out) < 0) {
             goto error;
         }
 
-        /* Since neither "Z" nor a time-zone was specified, it's local */
+        // Since neither "Z" nor a time-zone was specified, it's local
         if (out_local != NULL) {
             *out_local = 1;
         }
 
         goto finish;
+*/
     }
 
     /* UTC specifier */
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 7fdb05222..59ec0650f 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -575,6 +575,11 @@ class TestTimeSeries(unittest.TestCase):
         assert_series_equal(dresult, expected)
         self.assertEquals(dresult.name, 'foo')
 
+    def test_to_datetime_iso8601(self):
+        result = to_datetime(["2012-01-01 00:00:00"])
+        exp = Timestamp("2012-01-01 00:00:00")
+        self.assert_(result[0] == exp)
+
     def test_nat_vector_field_access(self):
         idx = DatetimeIndex(['1/1/2000', None, None, '1/4/2000'])
 
