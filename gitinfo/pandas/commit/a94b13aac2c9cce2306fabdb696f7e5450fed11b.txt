commit a94b13aac2c9cce2306fabdb696f7e5450fed11b
Author: Scott Gigante <scottgigante@users.noreply.github.com>
Date:   Sun May 31 21:46:30 2020 -0400

    patch ExtensionBlock fill_value, closes #27781, closes #29563 (#34158)
    
    Co-authored-by: Jeff Reback <jeff@reback.net>

diff --git a/doc/source/whatsnew/v1.1.0.rst b/doc/source/whatsnew/v1.1.0.rst
index 7b6dfce5b..f8e7360dd 100644
--- a/doc/source/whatsnew/v1.1.0.rst
+++ b/doc/source/whatsnew/v1.1.0.rst
@@ -965,6 +965,7 @@ Sparse
 - Creating a :class:`SparseArray` from timezone-aware dtype will issue a warning before dropping timezone information, instead of doing so silently (:issue:`32501`)
 - Bug in :meth:`arrays.SparseArray.from_spmatrix` wrongly read scipy sparse matrix (:issue:`31991`)
 - Bug in :meth:`Series.sum` with ``SparseArray`` raises ``TypeError`` (:issue:`25777`)
+- Bug where :class:`DataFrame` containing :class:`SparseArray` filled with ``NaN`` when indexed by a list-like (:issue:`27781`, :issue:`29563`)
 - The repr of :class:`SparseDtype` now includes the repr of its ``fill_value`` attribute. Previously it used ``fill_value``'s  string representation (:issue:`34352`)
 
 ExtensionArray
diff --git a/pandas/core/internals/blocks.py b/pandas/core/internals/blocks.py
index d880bd81b..e70c8f9d5 100644
--- a/pandas/core/internals/blocks.py
+++ b/pandas/core/internals/blocks.py
@@ -1634,7 +1634,10 @@ class ExtensionBlock(Block):
     @property
     def fill_value(self):
         # Used in reindex_indexer
-        return self.values.dtype.na_value
+        if is_sparse(self.values):
+            return self.values.dtype.fill_value
+        else:
+            return self.values.dtype.na_value
 
     @property
     def _can_hold_na(self):
diff --git a/pandas/tests/extension/base/getitem.py b/pandas/tests/extension/base/getitem.py
index 251376798..5d0ea6900 100644
--- a/pandas/tests/extension/base/getitem.py
+++ b/pandas/tests/extension/base/getitem.py
@@ -399,3 +399,31 @@ class BaseGetitemTests(BaseExtensionTests):
 
         with pytest.raises(ValueError, match=msg):
             s.item()
+
+    def test_boolean_mask_frame_fill_value(self, data):
+        # https://github.com/pandas-dev/pandas/issues/27781
+        df = pd.DataFrame({"A": data})
+
+        mask = np.random.choice([True, False], df.shape[0])
+        result = pd.isna(df.iloc[mask]["A"])
+        expected = pd.isna(df["A"].iloc[mask])
+        self.assert_series_equal(result, expected)
+
+        mask = pd.Series(mask, index=df.index)
+        result = pd.isna(df.loc[mask]["A"])
+        expected = pd.isna(df["A"].loc[mask])
+        self.assert_series_equal(result, expected)
+
+    def test_fancy_index_frame_fill_value(self, data):
+        # https://github.com/pandas-dev/pandas/issues/29563
+        df = pd.DataFrame({"A": data})
+
+        mask = np.random.choice(df.shape[0], df.shape[0])
+        result = pd.isna(df.iloc[mask]["A"])
+        expected = pd.isna(df["A"].iloc[mask])
+        self.assert_series_equal(result, expected)
+
+        mask = pd.Series(mask, index=df.index)
+        result = pd.isna(df.loc[mask]["A"])
+        expected = pd.isna(df["A"].loc[mask])
+        self.assert_series_equal(result, expected)
diff --git a/pandas/tests/extension/test_sparse.py b/pandas/tests/extension/test_sparse.py
index 332a7f5a4..f318934ef 100644
--- a/pandas/tests/extension/test_sparse.py
+++ b/pandas/tests/extension/test_sparse.py
@@ -41,6 +41,11 @@ def data_for_twos(request):
     return SparseArray(np.ones(100) * 2)
 
 
+@pytest.fixture(params=[0, np.nan])
+def data_zeros(request):
+    return SparseArray(np.zeros(100, dtype=int), fill_value=request.param)
+
+
 @pytest.fixture(params=[0, np.nan])
 def data_missing(request):
     """Length 2 array with [NA, Valid]"""
