commit 7754985ecfce2dc75f5719fc255f0898660cb490
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Oct 21 19:29:10 2011 -0400

    REF: deprecate nanRep in favor of na_rep, GH #275

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 259c428c1..fcbb2abf2 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -356,11 +356,11 @@ def set_printoptions(precision=None, column_space=None):
 _float_format = lambda x: '%.4g' % x
 _column_space = 12
 
-def _pfixed(s, space, nanRep=None, float_format=None):
+def _pfixed(s, space, na_rep=None, float_format=None):
     if isinstance(s, float):
-        if nanRep is not None and isnull(s):
+        if na_rep is not None and isnull(s):
             if np.isnan(s):
-                s = nanRep
+                s = na_rep
             return (' %s' % s).ljust(space)
 
         if float_format:
@@ -386,11 +386,11 @@ def _stringify(col):
     else:
         return '%s' % col
 
-def _format(s, nanRep=None, float_format=None):
+def _format(s, na_rep=None, float_format=None):
     if isinstance(s, float):
-        if nanRep is not None and isnull(s):
+        if na_rep is not None and isnull(s):
             if np.isnan(s):
-                s = nanRep
+                s = na_rep
             return ' %s' % s
 
         if float_format:
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 7386a987c..f63540e7c 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -468,8 +468,9 @@ class DataFrame(NDFrame):
                                default_kind=kind,
                                default_fill_value=fill_value)
 
-    def to_csv(self, path, nanRep='', cols=None, header=True,
-              index=True, index_label=None, mode='w', delimiter=","):
+    def to_csv(self, path, na_rep='', cols=None, header=True,
+              index=True, index_label=None, mode='w', delimiter=",",
+              nanRep=None):
         """
         Write DataFrame to a comma-separated values (csv) file
 
@@ -495,6 +496,12 @@ class DataFrame(NDFrame):
         f = open(path, mode)
         csvout = csv.writer(f, lineterminator='\n', delimiter=delimiter)
 
+        if nanRep is not None:  # pragma: no cover
+            import warnings
+            warnings.warn("nanRep is deprecated, use na_rep",
+                          FutureWarning)
+            na_rep = nanRep
+
         if cols is None:
             cols = self.columns
 
@@ -532,7 +539,7 @@ class DataFrame(NDFrame):
             for i, col in enumerate(cols):
                 val = series[col].get(idx)
                 if isnull(val):
-                    val = nanRep
+                    val = na_rep
 
                 row_fields.append(val)
 
@@ -541,10 +548,16 @@ class DataFrame(NDFrame):
         f.close()
 
     def to_string(self, buf=None, columns=None, colSpace=None,
-                  nanRep='NaN', formatters=None, float_format=None,
-                  sparsify=True):
+                  na_rep='NaN', formatters=None, float_format=None,
+                  sparsify=True, nanRep=None):
         from pandas.core.common import _format, adjoin
 
+        if nanRep is not None:  # pragma: no cover
+            import warnings
+            warnings.warn("nanRep is deprecated, use na_rep",
+                          FutureWarning)
+            na_rep = nanRep
+
         return_ = False
         if buf is None:  # pragma: no cover
             buf = StringIO()
@@ -552,11 +565,11 @@ class DataFrame(NDFrame):
 
         if colSpace is None:
             def _myformat(v):
-                return _format(v, nanRep=nanRep,
+                return _format(v, na_rep=na_rep,
                                float_format=float_format)
         else:
             def _myformat(v):
-                return _pfixed(v, colSpace, nanRep=nanRep,
+                return _pfixed(v, colSpace, na_rep=na_rep,
                                float_format=float_format)
 
         if formatters is None:
diff --git a/pandas/core/series.py b/pandas/core/series.py
index c79cddcc3..840e03e32 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -383,14 +383,20 @@ copy : boolean, default False
         result = '%s\nName: %s, Length: %d' % (result, self.name, len(self))
         return result
 
-    def to_string(self, buf=None, nanRep='NaN'):
-        the_repr = self._get_repr(nanRep=nanRep)
+    def to_string(self, buf=None, na_rep='NaN', nanRep=None):
+        if nanRep is not None:  # pragma: no cover
+            import warnings
+            warnings.warn("nanRep is deprecated, use na_rep",
+                          FutureWarning)
+            na_rep = nanRep
+
+        the_repr = self._get_repr(na_rep=na_rep)
         if buf is None:
             return the_repr
         else:
             print >> buf, the_repr
 
-    def _get_repr(self, name=False, nanRep='NaN'):
+    def _get_repr(self, name=False, na_rep='NaN'):
         vals = self.values
         index = self.index
 
@@ -400,7 +406,7 @@ copy : boolean, default False
 
         def _format_float(k, v):
             if np.isnan(v):
-                v = nanRep
+                v = na_rep
             else:
                 v = str(v)
             return '%s    %s' % (str(k).ljust(padSpace), v)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 5aa040d60..294de4698 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1626,7 +1626,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         df[1] = np.nan
 
         pth = '__tmp__.csv'
-        df.to_csv(pth, nanRep=999)
+        df.to_csv(pth, na_rep=999)
 
         lines = open(pth).readlines()
         self.assert_(lines[1].split(',')[2] == '999')
