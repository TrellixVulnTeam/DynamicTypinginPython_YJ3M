commit e86c03df32b7c5b00dcbb4bfa3e331a29ed6ea55
Author: Jeffrey Tratner <jeffrey.tratner@gmail.com>
Date:   Sun Jun 16 18:23:55 2013 -0400

    CLN: Cleanup stats/common and change exception type
    
    Made it explicit that cluster_type checks if it's a window type first.
    Changed `get_cluster_type` to be clearer as well.
    
    Replaced the `Exception` raise with a `ValueError` raise.
    
    TST: Add test case for bad window_type

diff --git a/pandas/stats/common.py b/pandas/stats/common.py
index 85e8916b3..75ebc9284 100644
--- a/pandas/stats/common.py
+++ b/pandas/stats/common.py
@@ -1,42 +1,33 @@
-def _get_cluster_type(cluster_type):
-    cluster_type = _WINDOW_TYPES.get(cluster_type, cluster_type)
-    if cluster_type is None:
-        return cluster_type
-
-    cluster_type_up = cluster_type.upper()
-
-    if cluster_type_up == 'ENTITY':
-        return 'entity'
-    elif cluster_type_up == 'TIME':
-        return 'time'
-    else:  # pragma: no cover
-        raise ValueError('Unrecognized cluster type: %s' % cluster_type)
-
-_CLUSTER_TYPES = {
-    0: 'time',
-    1: 'entity'
-}
 
 _WINDOW_TYPES = {
     0: 'full_sample',
     1: 'rolling',
     2: 'expanding'
 }
+# also allow 'rolling' as key
+_WINDOW_TYPES.update((v, v) for k,v in _WINDOW_TYPES.items())
+_ADDITIONAL_CLUSTER_TYPES = set(("entity", "time"))
 
+def _get_cluster_type(cluster_type):
+    # this was previous behavior
+    if cluster_type is None:
+        return cluster_type
+    try:
+        return _get_window_type(cluster_type)
+    except ValueError:
+        final_type = str(cluster_type).lower().replace("_", " ")
+        if final_type in _ADDITIONAL_CLUSTER_TYPES:
+            return final_type
+        raise ValueError('Unrecognized cluster type: %s' % cluster_type)
 
 def _get_window_type(window_type):
-    window_type = _WINDOW_TYPES.get(window_type, window_type)
-    window_type_up = window_type.upper()
-
-    if window_type_up in ('FULL SAMPLE', 'FULL_SAMPLE'):
-        return 'full_sample'
-    elif window_type_up == 'ROLLING':
-        return 'rolling'
-    elif window_type_up == 'EXPANDING':
-        return 'expanding'
-    else:  # pragma: no cover
+    # e.g., 0, 1, 2
+    final_type = _WINDOW_TYPES.get(window_type)
+    # e.g., 'full_sample'
+    final_type = final_type or _WINDOW_TYPES.get(str(window_type).lower().replace(" ", "_"))
+    if final_type is None:
         raise ValueError('Unrecognized window type: %s' % window_type)
-
+    return final_type
 
 def banner(text, width=80):
     """
diff --git a/pandas/stats/tests/test_ols.py b/pandas/stats/tests/test_ols.py
index c18db9457..abcf5b8df 100644
--- a/pandas/stats/tests/test_ols.py
+++ b/pandas/stats/tests/test_ols.py
@@ -692,6 +692,10 @@ class TestPanelOLS(BaseTest):
         self.checkNonPooled(y=self.panel_y, x=self.panel_x)
         self.checkNonPooled(y=self.panel_y, x=self.panel_x,
                             window_type='rolling', window=25, min_periods=10)
+    def testUnknownWindowType(self):
+        self.assertRaisesRegexp(ValueError, "window.*ridiculous",
+                self.checkNonPooled, y=self.panel_y, x=self.panel_x,
+                window_type='ridiculous', window=25, min_periods=10)
 
     def checkNonPooled(self, x, y, **kwds):
         # For now, just check that it doesn't crash
