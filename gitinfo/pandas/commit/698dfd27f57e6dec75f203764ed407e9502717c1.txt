commit 698dfd27f57e6dec75f203764ed407e9502717c1
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon May 24 04:51:08 2010 +0000

    unit tests
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@173 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 98b33f2c7..f02119f9a 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -222,6 +222,8 @@ class SeriesGroupBy(GroupBy):
         return Series(allSeries)
 
 class DataFrameGroupBy(GroupBy):
+    _klass = DataFrame
+
     def __init__(self, obj, grouper, axis=0):
         if isinstance(grouper, basestring):
             grouper = obj[grouper].get
@@ -265,16 +267,38 @@ class DataFrameGroupBy(GroupBy):
         else:
             return self._aggregate_columns(applyfunc)
 
-    def _aggregate_index(self, applyfunc):
+    def _aggregate_index(self, func):
         result = {}
-        for groupName in self.groups:
-            result[groupName] = self[groupName].apply(applyfunc)
-            assert(isinstance(result[groupName], Series))
+        for name in self.groups:
+            data = self[name]
+            try:
+                result[name] = func(data)
+            except Exception:
+                result[name] = data.apply(func)
+
+            assert(isinstance(result[name], Series))
 
-        return DataFrame(data=result).T
+        return self._klass(data=result).T
 
-    def _aggregate_columns(self, applyfunc):
-        pass
+    def _aggregate_columns(self, func):
+        result = {}
+        for name, group in self.groups.iteritems():
+            data = self.obj.reindex(columns=group)
+
+            try:
+                result[name] = func(data)
+            except Exception:
+                result[name] = data.apply(func, axis=1)
+
+            assert(isinstance(result[name], Series))
+
+        return self._klass(data=result)
+
+    def getGroup(self, groupList):
+        if self.axis == 0:
+            return self.obj.reindex(groupList)
+        else:
+            return self.obj.reindex(columns=groupList)
 
     def transform(self, applyfunc):
         """
@@ -317,70 +341,8 @@ class DataFrameGroupBy(GroupBy):
         for val, frame in result.iteritems():
             allSeries.update(frame._series)
 
-        return DataFrame(data=allSeries).T
+        return self._klass(data=allSeries).T
 
 
 class DataMatrixGroupBy(DataFrameGroupBy):
-    def aggregate(self, applyfunc):
-        """
-        Group series using mapper function (dict or key function, apply
-        given function to group, return result as series)
-
-        Main difference here is that applyfunc must return a value, so that the
-        result is a sensible series.
-
-        Parameters
-        ----------
-        mapper : function, dict-like, or string
-            Mapping or mapping function. If string given, must be a column
-            name in the frame
-        applyfunc : function
-            Function to use to aggregate each group
-        """
-        result = {}
-        for groupName in self.groups:
-            result[groupName] = self[groupName].apply(applyfunc)
-            assert(isinstance(result[groupName], Series))
-        return DataMatrix(data=result).T
-
-    def transform(self, applyfunc):
-        """
-        For given DataMatrix, group index by given mapper function or dict, take
-        the sub-DataMatrix (reindex) for this group and call apply(applyfunc)
-        on this sub-DataMatrix. Return a DataMatrix of the results for each
-        key.
-
-        Note: this function does not aggregate like groupby/tgroupby,
-        the results of the given function on the subDataMatrix should be another
-        DataMatrix.
-
-        Parameters
-        ----------
-        mapper : function
-            Function to apply to each index value
-        applyfunc : function
-            Function to apply to each subframe
-
-        Note
-        ----
-        Each subframe is endowed the attribute 'groupName' in case
-        you need to know which group you are working on.
-
-        Example
-        --------
-        df.fgroupby(lambda x: mapping[x],
-                    lambda x: (x - x.apply(mean)) / x.apply(std))
-
-        DataMatrix standardized by each unique value of mapping
-        """
-        result = {}
-        for val, group in self.groups.iteritems():
-            subframe = self.obj.reindex(list(group))
-            subframe.groupName = val
-            result[val] = applyfunc(subframe).T
-
-        allSeries = {}
-        for val, frame in result.iteritems():
-            allSeries.update(frame._series)
-
-        return DataMatrix(data = allSeries).T
+    _klass = DataMatrix
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 525d93911..a13e3187b 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -133,9 +133,6 @@ class Index(np.ndarray):
         raise Exception('Cannot sort an Index object')
 
     def shift(self, periods, offset):
-        if not isinstance(offset, DateOffset):
-            raise TypeError('must pass DateOffset')
-
         if periods == 0:
             # OK because immutable
             return self
diff --git a/pandas/core/tests/test_daterange.py b/pandas/core/tests/test_daterange.py
index 99aca3e1c..ce73a26da 100644
--- a/pandas/core/tests/test_daterange.py
+++ b/pandas/core/tests/test_daterange.py
@@ -5,7 +5,6 @@ import numpy as np
 
 import pandas.core.datetools as datetools
 from pandas.core.daterange import DateRange, XDateRange
-from pandas.util.testing import assert_almost_equal
 
 ####
 ## XDateRange Tests
@@ -98,6 +97,9 @@ class TestDateRange(unittest.TestCase):
 
         shifted = self.rng.shift(0)
 
+        rng = DateRange(START, END, offset=datetools.bmonthEnd)
+        shifted = rng.shift(1, offset=datetools.bday)
+
 # DateRange test
 
 def testDateRange1():
diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index a3b565bea..e4f7c265f 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -966,7 +966,22 @@ class TestDataFrame(unittest.TestCase):
         for weekday, group in grouped:
             self.assert_(group.index[0].weekday() == weekday)
 
-    def test_tgroupby(self):
+    def test_groupby_columns(self):
+        mapping = {
+            'A' : 0, 'B' : 0, 'C' : 1, 'D' : 1
+        }
+        grouped = self.tsframe.groupby(mapping, axis=1)
+
+        # aggregate
+        aggregated = grouped.aggregate(np.mean)
+        self.assertEqual(len(aggregated), len(self.tsframe))
+        self.assertEqual(len(aggregated.cols()), 2)
+
+        # iterate
+        for k, v in grouped:
+            self.assertEqual(len(v.cols()), 2)
+
+        # tgroupby
         grouping = {
             'A' : 0,
             'B' : 1,
@@ -1171,6 +1186,15 @@ class TestDataFrame(unittest.TestCase):
         self.assertRaises(Exception, target.join, source, on='C',
                           how='left')
 
+    def test_cap_floor(self):
+        median = self.frame.median().median()
+
+        capped = self.frame.cap(median)
+        self.assert_(not (capped.values > median).any())
+
+        floored = self.frame.floor(median)
+        self.assert_(not (floored.values < median).any())
+
     def test_statistics(self):
         sumFrame = self.frame.apply(np.sum)
         for col, series in self.frame.iteritems():
diff --git a/pandas/core/tests/test_index.py b/pandas/core/tests/test_index.py
index 3211c726c..0c75096a2 100644
--- a/pandas/core/tests/test_index.py
+++ b/pandas/core/tests/test_index.py
@@ -118,6 +118,13 @@ class TestIndex(unittest.TestCase):
         # this is valid too
         shifted = self.dateIndex + timedelta(1)
 
+    def test_shift(self):
+        shifted = self.dateIndex.shift(0, timedelta(1))
+        self.assert_(shifted is self.dateIndex)
+
+        shifted = self.dateIndex.shift(5, timedelta(1))
+        self.assert_(np.array_equal(shifted, self.dateIndex + timedelta(5)))
+
     def test_intersection(self):
         first = self.strIndex[:20]
         second = self.strIndex[:10]
diff --git a/pandas/core/tests/test_matrix.py b/pandas/core/tests/test_matrix.py
index 8f46cbe9d..b41432751 100644
--- a/pandas/core/tests/test_matrix.py
+++ b/pandas/core/tests/test_matrix.py
@@ -45,6 +45,9 @@ class TestDataMatrix(test_frame.TestDataFrame):
         df = DataMatrix(mat, index=[0, 1], columns=[0], dtype=float)
         self.assert_(df.values.dtype == np.object_)
 
+        dm = self.klass(DataFrame(self.frame._series))
+        common.assert_frame_equal(dm, self.frame)
+
     def test_constructor_with_objects(self):
         index = self.mixed_frame.index[:5]
 
