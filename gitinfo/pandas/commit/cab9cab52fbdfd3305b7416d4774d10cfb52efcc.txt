commit cab9cab52fbdfd3305b7416d4774d10cfb52efcc
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Apr 9 16:03:43 2012 -0400

    BUG: tighten up / revert NA comparison behavior, #953, #933

diff --git a/pandas/src/tseries.pyx b/pandas/src/tseries.pyx
index 1730b178c..06319c4d9 100644
--- a/pandas/src/tseries.pyx
+++ b/pandas/src/tseries.pyx
@@ -502,6 +502,7 @@ def scalar_compare(ndarray[object] values, object val, object op):
     import operator
     cdef:
         Py_ssize_t i, n = len(values)
+        ndarray[uint8_t, cast=True] result
         int flag
         object x
 
@@ -520,16 +521,24 @@ def scalar_compare(ndarray[object] values, object val, object op):
     else:
         raise ValueError('Unrecognized operator')
 
-    result = np.empty(n, dtype=object)
+    result = np.empty(n, dtype=bool)
 
-    for i in range(n):
-        x = values[i]
-        if _checknull(x):
-            result[i] = x
-        else:
-            result[i] = cpython.PyObject_RichCompareBool(x, val, flag)
+    if flag == cpython.Py_NE:
+        for i in range(n):
+            x = values[i]
+            if _checknull(x):
+                result[i] = True
+            else:
+                result[i] = cpython.PyObject_RichCompareBool(x, val, flag)
+    else:
+        for i in range(n):
+            x = values[i]
+            if _checknull(x):
+                result[i] = False
+            else:
+                result[i] = cpython.PyObject_RichCompareBool(x, val, flag)
 
-    return maybe_convert_bool(result)
+    return result
 
 @cython.wraparound(False)
 @cython.boundscheck(False)
@@ -537,6 +546,7 @@ def vec_compare(ndarray[object] left, ndarray[object] right, object op):
     import operator
     cdef:
         Py_ssize_t i, n = len(left)
+        ndarray[uint8_t, cast=True] result
         int flag
 
     if op is operator.lt:
@@ -554,22 +564,28 @@ def vec_compare(ndarray[object] left, ndarray[object] right, object op):
     else:
         raise ValueError('Unrecognized operator')
 
-    result = np.empty(n, dtype=object)
+    result = np.empty(n, dtype=bool)
 
-    for i in range(n):
-        x = left[i]
-        y = right[i]
-        try:
-            result[i] = cpython.PyObject_RichCompareBool(x, y, flag)
-        except TypeError:
-            if _checknull(x):
-                result[i] = x
-            elif _checknull(y):
-                result[i] = y
+    if flag == cpython.Py_NE:
+        for i in range(n):
+            x = left[i]
+            y = right[i]
+
+            if _checknull(x) or _checknull(y):
+                result[i] = True
             else:
-                raise
+                result[i] = cpython.PyObject_RichCompareBool(x, y, flag)
+    else:
+        for i in range(n):
+            x = left[i]
+            y = right[i]
 
-    return maybe_convert_bool(result)
+            if _checknull(x) or _checknull(y):
+                result[i] = False
+            else:
+                result[i] = cpython.PyObject_RichCompareBool(x, y, flag)
+
+    return result
 
 
 @cython.wraparound(False)
@@ -577,6 +593,7 @@ def vec_compare(ndarray[object] left, ndarray[object] right, object op):
 def scalar_binop(ndarray[object] values, object val, object op):
     cdef:
         Py_ssize_t i, n = len(values)
+        ndarray[uint8_t, cast=True] result
         object x
 
     result = np.empty(n, dtype=object)
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index bc14d69b7..4c44cd379 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -1157,6 +1157,21 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         expected = Series(['foo_suffix', 'bar_suffix', 'baz_suffix', np.nan])
         assert_series_equal(result, expected)
 
+    def test_object_comparisons(self):
+        s = Series(['a', 'b', np.nan, 'c', 'a'])
+
+        result = s == 'a'
+        expected = Series([True, False, False, False, True])
+        assert_series_equal(result, expected)
+
+        result = s < 'a'
+        expected = Series([False, False, False, False, False])
+        assert_series_equal(result, expected)
+
+        result = s != 'a'
+        expected = -(s == 'a')
+        assert_series_equal(result, expected)
+
     def test_comparison_operators_with_nas(self):
         from pandas import DateRange
 
@@ -1170,7 +1185,14 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
 
             f = getattr(operator, op)
             result = f(s, val)
+
             expected = f(s.dropna(), val).reindex(s.index)
+
+            if op == 'ne':
+                expected = expected.fillna(True).astype(bool)
+            else:
+                expected = expected.fillna(False).astype(bool)
+
             assert_series_equal(result, expected)
 
             # fffffffuuuuuuuuuuuu
@@ -1181,11 +1203,16 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         # boolean &, |, ^ should work with object arrays and propagate NAs
 
         ops = ['and_', 'or_', 'xor']
+        mask = s.isnull()
         for bool_op in ops:
             f = getattr(operator, bool_op)
 
+            filled = s.fillna(s[0])
+
             result = f(s < s[9], s > s[3])
-            expected = f(s.dropna() < s[9], s.dropna() > s[3]).reindex(s.index)
+
+            expected = f(filled < filled[9], filled > filled[3])
+            expected[mask] = False
             assert_series_equal(result, expected)
 
     def test_comparison_object_numeric_nas(self):
@@ -1200,6 +1227,26 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
             expected = f(s.astype(float), shifted.astype(float))
             assert_series_equal(result, expected)
 
+    def test_more_na_comparisons(self):
+        left = Series(['a', np.nan, 'c'])
+        right = Series(['a', np.nan, 'd'])
+
+        result = left == right
+        expected = Series([True, False, False])
+        assert_series_equal(result, expected)
+
+        result = left != right
+        expected = Series([False, True, True])
+        assert_series_equal(result, expected)
+
+        result = left == np.nan
+        expected = Series([False, False, False])
+        assert_series_equal(result, expected)
+
+        result = left != np.nan
+        expected = Series([True, True, True])
+        assert_series_equal(result, expected)
+
     def test_between(self):
         from pandas import DateRange
 
