commit de31cbecd8831195bab36fc0ddd61eb34393425d
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Sep 17 19:25:38 2012 -0400

    BUG: don't truncate small FP numbers to zero in DataFrame formatting close #1911

diff --git a/RELEASE.rst b/RELEASE.rst
index 71e6de992..c811d9b0d 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -178,6 +178,7 @@ pandas 0.9.0
   - Fix negative integer indexing regression in .ix from 0.7.x (#1888)
   - Fix error while retrieving timezone and utc offset from subclasses of
     datetime.tzinfo without .zone and ._utcoffset attributes (#1922)
+  - Fix DataFrame formatting of small, non-zero FP numbers (#1911)
 
 pandas 0.8.1
 ============
diff --git a/pandas/core/format.py b/pandas/core/format.py
index 8f4d1b592..333ef5d43 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -667,12 +667,19 @@ class FloatArrayFormatter(GenericArrayFormatter):
 
             too_long = maxlen > self.digits + 5
 
+            abs_vals = np.abs(self.values)
+
             # this is pretty arbitrary for now
-            has_large_values = (np.abs(self.values) > 1e8).any()
+            has_large_values = (abs_vals > 1e8).any()
+            has_small_values = ((abs_vals < 10**(-self.digits)) &
+                                (abs_vals > 0)).any()
 
             if too_long and has_large_values:
                 fmt_str = '%% .%de' % (self.digits - 1)
                 fmt_values = self._format_with(fmt_str)
+            elif has_small_values:
+                fmt_str = '%% .%de' % (self.digits - 1)
+                fmt_values = self._format_with(fmt_str)
 
         return _make_fixed_width(fmt_values, self.justify)
 
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index 571cc50f1..1ab8b3961 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -327,6 +327,24 @@ class TestDataFrameFormatting(unittest.TestCase):
                         '1  2.512000e-01')
         assert(df_s == expected)
 
+    def test_to_string_small_float_values(self):
+        df = DataFrame({'a': [1.5, 1e-17, -5.5e-7]})
+
+        result = df.to_string()
+        expected = ('              a\n'
+                    '0  1.500000e+00\n'
+                    '1  1.000000e-17\n'
+                    '2 -5.500000e-07')
+        self.assertEqual(result, expected)
+
+        # but not all exactly zero
+        df = df * 0
+        result = df.to_string()
+        expected = ('   0\n'
+                    '0  0\n'
+                    '1  0\n'
+                    '2 -0')
+
     def test_to_string_float_index(self):
         index = Index([1.5, 2, 3, 4, 5])
         df = DataFrame(range(5), index=index)
