commit 67cc0213def8b9f56c4d1f71bb95ebef22790b24
Author: gfyoung <gfyoung17@gmail.com>
Date:   Sun Apr 2 17:59:15 2017 -0400

    CLN: Remove "flake8: noqa" from more files
    
    Another round of house-cleaning that builds off #15842.    xref <a
    href="https://github.com/pandas-
    dev/pandas/issues/12066#issuecomment-172285473">#12066  (comment)</a>
    : the issue remains unresolved, but it does not seem entirely
    necessary to disable style-checking on the entire file for that IMO.
    
    Author: gfyoung <gfyoung17@gmail.com>
    
    Closes #15867 from gfyoung/flake8-noqa-clean and squashes the following commits:
    
    0c84926 [gfyoung] CLN: Make tseries/common.py flake8-able
    7a799ff [gfyoung] CLN: Make _version.py flake8-able
    7087b64 [gfyoung] CLN: Make test_categorical.py flake8-able
    5d5abf8 [gfyoung] CLN: Make test_categorical.py flake8-able
    6ace90b [gfyoung] CLN: Make test_eval.py flake8-able

diff --git a/pandas/_version.py b/pandas/_version.py
index d764923fd..4695b512f 100644
--- a/pandas/_version.py
+++ b/pandas/_version.py
@@ -1,4 +1,3 @@
-
 # This file helps to compute a version number in source trees obtained from
 # git-archive tarball (such as those provided by githubs download-from-tag
 # feature). Distribution tarballs (built by setup.py sdist) and build
@@ -8,8 +7,6 @@
 # This file is released into the public domain. Generated by
 # versioneer-0.15 (https://github.com/warner/python-versioneer)
 
-# flake8: noqa
-
 import errno
 import os
 import re
diff --git a/pandas/tests/computation/test_eval.py b/pandas/tests/computation/test_eval.py
index ed6006440..81e9b7c77 100644
--- a/pandas/tests/computation/test_eval.py
+++ b/pandas/tests/computation/test_eval.py
@@ -1,10 +1,6 @@
-
-# flake8: noqa
-
 import warnings
 import operator
 from itertools import product
-from distutils.version import LooseVersion
 
 import pytest
 
@@ -28,12 +24,11 @@ from pandas.computation.ops import (_binary_ops_dict,
 
 import pandas.computation.expr as expr
 import pandas.util.testing as tm
-import pandas._libs.lib as lib
 from pandas.util.testing import (assert_frame_equal, randbool,
                                  assertRaisesRegexp, assert_numpy_array_equal,
                                  assert_produces_warning, assert_series_equal,
                                  slow)
-from pandas.compat import PY3, u, reduce
+from pandas.compat import PY3, reduce
 
 _series_frame_incompatible = _bool_ops_syms
 _scalar_skip = 'in', 'not in'
@@ -43,9 +38,9 @@ _scalar_skip = 'in', 'not in'
     pytest.mark.skipif(engine == 'numexpr' and not _USE_NUMEXPR,
                        reason='numexpr enabled->{enabled}, '
                               'installed->{installed}'.format(
-                            enabled=_USE_NUMEXPR,
-                            installed=_NUMEXPR_INSTALLED))(engine)
-    for engine in _engines
+                                  enabled=_USE_NUMEXPR,
+                                  installed=_NUMEXPR_INSTALLED))(engine)
+                       for engine in _engines  # noqa
 ))
 def engine(request):
     return request.param
@@ -66,7 +61,8 @@ def _eval_single_bin(lhs, cmp1, rhs, engine):
         try:
             return c(lhs, rhs)
         except ValueError as e:
-            if str(e).startswith('negative number cannot be raised to a fractional power'):
+            if str(e).startswith('negative number cannot be '
+                                 'raised to a fractional power'):
                 return np.nan
             raise
     return c(lhs, rhs)
@@ -74,14 +70,14 @@ def _eval_single_bin(lhs, cmp1, rhs, engine):
 
 def _series_and_2d_ndarray(lhs, rhs):
     return ((isinstance(lhs, Series) and
-             isinstance(rhs, np.ndarray) and rhs.ndim > 1)
-            or (isinstance(rhs, Series) and
-                isinstance(lhs, np.ndarray) and lhs.ndim > 1))
+             isinstance(rhs, np.ndarray) and rhs.ndim > 1) or
+            (isinstance(rhs, Series) and
+             isinstance(lhs, np.ndarray) and lhs.ndim > 1))
 
 
 def _series_and_frame(lhs, rhs):
-    return ((isinstance(lhs, Series) and isinstance(rhs, DataFrame))
-            or (isinstance(rhs, Series) and isinstance(lhs, DataFrame)))
+    return ((isinstance(lhs, Series) and isinstance(rhs, DataFrame)) or
+            (isinstance(rhs, Series) and isinstance(lhs, DataFrame)))
 
 
 def _bool_and_frame(lhs, rhs):
@@ -228,19 +224,22 @@ class TestEvalNumexprPandas(tm.TestCase):
         else:
             lhs_new = _eval_single_bin(lhs, cmp1, rhs, self.engine)
             rhs_new = _eval_single_bin(lhs, cmp2, rhs, self.engine)
-            if (isinstance(lhs_new, Series) and isinstance(rhs_new, DataFrame)
-                    and binop in _series_frame_incompatible):
+            if (isinstance(lhs_new, Series) and
+                    isinstance(rhs_new, DataFrame) and
+                    binop in _series_frame_incompatible):
                 pass
                 # TODO: the code below should be added back when left and right
                 # hand side bool ops are fixed.
-
+                #
                 # try:
-                # self.assertRaises(Exception, pd.eval, ex,
-                #local_dict={'lhs': lhs, 'rhs': rhs},
-                # engine=self.engine, parser=self.parser)
+                #     self.assertRaises(Exception, pd.eval, ex,
+                #                       local_dict={'lhs': lhs, 'rhs': rhs},
+                #                       engine=self.engine, parser=self.parser)
                 # except AssertionError:
-                #import ipdb; ipdb.set_trace()
-                # raise
+                #     import ipdb
+                #
+                #     ipdb.set_trace()
+                #     raise
             else:
                 expected = _eval_single_bin(
                     lhs_new, binop, rhs_new, self.engine)
@@ -248,7 +247,6 @@ class TestEvalNumexprPandas(tm.TestCase):
                 self.check_equal(result, expected)
 
     def check_chained_cmp_op(self, lhs, cmp1, mid, cmp2, rhs):
-        skip_these = _scalar_skip
 
         def check_operands(left, right, cmp_op):
             return _eval_single_bin(left, cmp_op, right, self.engine)
@@ -334,7 +332,8 @@ class TestEvalNumexprPandas(tm.TestCase):
         try:
             expected = _eval_single_bin(lhs, '**', rhs, self.engine)
         except ValueError as e:
-            if str(e).startswith('negative number cannot be raised to a fractional power'):
+            if str(e).startswith('negative number cannot be '
+                                 'raised to a fractional power'):
                 if self.engine == 'python':
                     pytest.skip(str(e))
                 else:
@@ -650,7 +649,7 @@ class TestEvalNumexprPandas(tm.TestCase):
         exprs += '2 * x > 2 or 1 and 2',
         exprs += '2 * df > 3 and 1 or a',
 
-        x, a, b, df = np.random.randn(3), 1, 2, DataFrame(randn(3, 2))
+        x, a, b, df = np.random.randn(3), 1, 2, DataFrame(randn(3, 2))  # noqa
         for ex in exprs:
             with tm.assertRaises(NotImplementedError):
                 pd.eval(ex, engine=self.engine, parser=self.parser)
@@ -682,7 +681,7 @@ class TestEvalNumexprPandas(tm.TestCase):
         tm.assert_numpy_array_equal(result, np.array([1.5]))
         self.assertEqual(result.shape, (1, ))
 
-        x = np.array([False])
+        x = np.array([False])  # noqa
         result = pd.eval('x', engine=self.engine, parser=self.parser)
         tm.assert_numpy_array_equal(result, np.array([False]))
         self.assertEqual(result.shape, (1, ))
@@ -792,9 +791,8 @@ class TestEvalPythonPandas(TestEvalPythonPython):
 f = lambda *args, **kwargs: np.random.randn()
 
 
-#-------------------------------------
-# typecasting rules consistency with python
-# issue #12388
+# -------------------------------------
+# gh-12388: Typecasting rules consistency with python
 
 
 class TestTypeCasting(object):
@@ -817,8 +815,8 @@ class TestTypeCasting(object):
         assert_frame_equal(res, eval(s))
 
 
-#-------------------------------------
-# basic and complex alignment
+# -------------------------------------
+# Basic and complex alignment
 
 def _is_datetime(x):
     return issubclass(x.dtype.type, np.datetime64)
@@ -1064,8 +1062,8 @@ class TestAlignment(object):
                 tm.assert_equal(msg, expected)
 
 
-#------------------------------------
-# slightly more complex ops
+# ------------------------------------
+# Slightly more complex ops
 
 class TestOperationsNumExprPandas(tm.TestCase):
 
@@ -1156,7 +1154,7 @@ class TestOperationsNumExprPandas(tm.TestCase):
     def test_truediv(self):
         s = np.array([1])
         ex = 's / 1'
-        d = {'s': s}
+        d = {'s': s}  # noqa
 
         if PY3:
             res = self.eval(ex, truediv=False)
@@ -1204,7 +1202,7 @@ class TestOperationsNumExprPandas(tm.TestCase):
             self.assertEqual(res, expec)
 
     def test_failing_subscript_with_name_error(self):
-        df = DataFrame(np.random.randn(5, 3))
+        df = DataFrame(np.random.randn(5, 3))  # noqa
         with tm.assertRaises(NameError):
             self.eval('df[x > 2] > 2')
 
@@ -1501,7 +1499,7 @@ class TestOperationsNumExprPython(TestOperationsNumExprPandas):
                                cls.arith_ops)
 
     def test_check_many_exprs(self):
-        a = 1
+        a = 1  # noqa
         expr = ' * '.join('a' * 33)
         expected = 1
         res = pd.eval(expr, engine=self.engine, parser=self.parser)
@@ -1526,13 +1524,13 @@ class TestOperationsNumExprPython(TestOperationsNumExprPandas):
                           engine=self.engine)
 
     def test_fails_ampersand(self):
-        df = DataFrame(np.random.randn(5, 3))
+        df = DataFrame(np.random.randn(5, 3))  # noqa
         ex = '(df + 2)[df > 1] > 0 & (df > 0)'
         with tm.assertRaises(NotImplementedError):
             pd.eval(ex, parser=self.parser, engine=self.engine)
 
     def test_fails_pipe(self):
-        df = DataFrame(np.random.randn(5, 3))
+        df = DataFrame(np.random.randn(5, 3))  # noqa
         ex = '(df + 2)[df > 1] > 0 | (df > 0)'
         with tm.assertRaises(NotImplementedError):
             pd.eval(ex, parser=self.parser, engine=self.engine)
@@ -1728,7 +1726,7 @@ class TestScope(object):
                                                         parser=parser))
 
     def test_no_new_locals(self, engine, parser):
-        x = 1
+        x = 1  # noqa
         lcls = locals().copy()
         pd.eval('x + 1', local_dict=lcls, engine=engine, parser=parser)
         lcls2 = locals().copy()
@@ -1736,7 +1734,7 @@ class TestScope(object):
         tm.assert_equal(lcls, lcls2)
 
     def test_no_new_globals(self, engine, parser):
-        x = 1
+        x = 1  # noqa
         gbls = globals().copy()
         pd.eval('x + 1', engine=engine, parser=parser)
         gbls2 = globals().copy()
@@ -1787,15 +1785,16 @@ def test_name_error_exprs(engine, parser):
 
 
 def test_invalid_local_variable_reference(engine, parser):
-    a, b = 1, 2
+    a, b = 1, 2  # noqa
     exprs = 'a + @b', '@a + b', '@a + @b'
-    for expr in exprs:
+
+    for _expr in exprs:
         if parser != 'pandas':
             with tm.assertRaisesRegexp(SyntaxError, "The '@' prefix is only"):
-                pd.eval(exprs, engine=engine, parser=parser)
+                pd.eval(_expr, engine=engine, parser=parser)
         else:
             with tm.assertRaisesRegexp(SyntaxError, "The '@' prefix is not"):
-                pd.eval(exprs, engine=engine, parser=parser)
+                pd.eval(_expr, engine=engine, parser=parser)
 
 
 def test_numexpr_builtin_raises(engine, parser):
@@ -1834,9 +1833,9 @@ def test_more_than_one_expression_raises(engine, parser):
 def test_bool_ops_fails_on_scalars(lhs, cmp, rhs, engine, parser):
     gen = {int: lambda: np.random.randint(10), float: np.random.randn}
 
-    mid = gen[lhs]()
-    lhs = gen[lhs]()
-    rhs = gen[rhs]()
+    mid = gen[lhs]()  # noqa
+    lhs = gen[lhs]()  # noqa
+    rhs = gen[rhs]()  # noqa
 
     ex1 = 'lhs {0} mid {1} rhs'.format(cmp, cmp)
     ex2 = 'lhs {0} mid and mid {1} rhs'.format(cmp, cmp)
diff --git a/pandas/tests/indexes/test_category.py b/pandas/tests/indexes/test_category.py
index ef1be7e60..0d75ba5f2 100644
--- a/pandas/tests/indexes/test_category.py
+++ b/pandas/tests/indexes/test_category.py
@@ -1,8 +1,5 @@
 # -*- coding: utf-8 -*-
 
-# TODO(wesm): fix long line flake8 issues
-# flake8: noqa
-
 import pandas.util.testing as tm
 from pandas.indexes.api import Index, CategoricalIndex
 from .common import Base
@@ -215,7 +212,8 @@ class TestCategoricalIndex(Base, tm.TestCase):
 
         # GH 12766: Return an index not an array
         tm.assert_index_equal(ci.map(lambda x: 1),
-                              Index(np.array([1] * 5, dtype=np.int64), name='XXX'))
+                              Index(np.array([1] * 5, dtype=np.int64),
+                                    name='XXX'))
 
         # change categories dtype
         ci = pd.CategoricalIndex(list('ABABC'), categories=list('BAC'),
@@ -225,7 +223,8 @@ class TestCategoricalIndex(Base, tm.TestCase):
             return {'A': 10, 'B': 20, 'C': 30}.get(x)
 
         result = ci.map(f)
-        exp = pd.CategoricalIndex([10, 20, 10, 20, 30], categories=[20, 10, 30],
+        exp = pd.CategoricalIndex([10, 20, 10, 20, 30],
+                                  categories=[20, 10, 30],
                                   ordered=False)
         tm.assert_index_equal(result, exp)
 
@@ -589,10 +588,10 @@ class TestCategoricalIndex(Base, tm.TestCase):
         # short
         idx = pd.CategoricalIndex(['a', 'bb', 'ccc'])
         if PY3:
-            expected = u"""CategoricalIndex(['a', 'bb', 'ccc'], categories=['a', 'bb', 'ccc'], ordered=False, dtype='category')"""
+            expected = u"""CategoricalIndex(['a', 'bb', 'ccc'], categories=['a', 'bb', 'ccc'], ordered=False, dtype='category')"""  # noqa
             self.assertEqual(repr(idx), expected)
         else:
-            expected = u"""CategoricalIndex([u'a', u'bb', u'ccc'], categories=[u'a', u'bb', u'ccc'], ordered=False, dtype='category')"""
+            expected = u"""CategoricalIndex([u'a', u'bb', u'ccc'], categories=[u'a', u'bb', u'ccc'], ordered=False, dtype='category')"""  # noqa
             self.assertEqual(unicode(idx), expected)
 
         # multiple lines
@@ -601,7 +600,7 @@ class TestCategoricalIndex(Base, tm.TestCase):
             expected = u"""CategoricalIndex(['a', 'bb', 'ccc', 'a', 'bb', 'ccc', 'a', 'bb', 'ccc', 'a',
                   'bb', 'ccc', 'a', 'bb', 'ccc', 'a', 'bb', 'ccc', 'a', 'bb',
                   'ccc', 'a', 'bb', 'ccc', 'a', 'bb', 'ccc', 'a', 'bb', 'ccc'],
-                 categories=['a', 'bb', 'ccc'], ordered=False, dtype='category')"""
+                 categories=['a', 'bb', 'ccc'], ordered=False, dtype='category')"""  # noqa
 
             self.assertEqual(repr(idx), expected)
         else:
@@ -609,7 +608,7 @@ class TestCategoricalIndex(Base, tm.TestCase):
                   u'ccc', u'a', u'bb', u'ccc', u'a', u'bb', u'ccc', u'a',
                   u'bb', u'ccc', u'a', u'bb', u'ccc', u'a', u'bb', u'ccc',
                   u'a', u'bb', u'ccc', u'a', u'bb', u'ccc'],
-                 categories=[u'a', u'bb', u'ccc'], ordered=False, dtype='category')"""
+                 categories=[u'a', u'bb', u'ccc'], ordered=False, dtype='category')"""  # noqa
 
             self.assertEqual(unicode(idx), expected)
 
@@ -619,7 +618,7 @@ class TestCategoricalIndex(Base, tm.TestCase):
             expected = u"""CategoricalIndex(['a', 'bb', 'ccc', 'a', 'bb', 'ccc', 'a', 'bb', 'ccc', 'a',
                   ...
                   'ccc', 'a', 'bb', 'ccc', 'a', 'bb', 'ccc', 'a', 'bb', 'ccc'],
-                 categories=['a', 'bb', 'ccc'], ordered=False, dtype='category', length=300)"""
+                 categories=['a', 'bb', 'ccc'], ordered=False, dtype='category', length=300)"""  # noqa
 
             self.assertEqual(repr(idx), expected)
         else:
@@ -628,7 +627,7 @@ class TestCategoricalIndex(Base, tm.TestCase):
                   ...
                   u'ccc', u'a', u'bb', u'ccc', u'a', u'bb', u'ccc', u'a',
                   u'bb', u'ccc'],
-                 categories=[u'a', u'bb', u'ccc'], ordered=False, dtype='category', length=300)"""
+                 categories=[u'a', u'bb', u'ccc'], ordered=False, dtype='category', length=300)"""  # noqa
 
             self.assertEqual(unicode(idx), expected)
 
@@ -637,23 +636,23 @@ class TestCategoricalIndex(Base, tm.TestCase):
         if PY3:
             expected = u"""CategoricalIndex(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',
                   'm', 'm', 'o'],
-                 categories=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', ...], ordered=False, dtype='category')"""
+                 categories=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', ...], ordered=False, dtype='category')"""  # noqa
 
             self.assertEqual(repr(idx), expected)
         else:
             expected = u"""CategoricalIndex([u'a', u'b', u'c', u'd', u'e', u'f', u'g', u'h', u'i', u'j',
                   u'k', u'l', u'm', u'm', u'o'],
-                 categories=[u'a', u'b', u'c', u'd', u'e', u'f', u'g', u'h', ...], ordered=False, dtype='category')"""
+                 categories=[u'a', u'b', u'c', u'd', u'e', u'f', u'g', u'h', ...], ordered=False, dtype='category')"""  # noqa
 
             self.assertEqual(unicode(idx), expected)
 
         # short
         idx = pd.CategoricalIndex([u'あ', u'いい', u'ううう'])
         if PY3:
-            expected = u"""CategoricalIndex(['あ', 'いい', 'ううう'], categories=['あ', 'いい', 'ううう'], ordered=False, dtype='category')"""
+            expected = u"""CategoricalIndex(['あ', 'いい', 'ううう'], categories=['あ', 'いい', 'ううう'], ordered=False, dtype='category')"""  # noqa
             self.assertEqual(repr(idx), expected)
         else:
-            expected = u"""CategoricalIndex([u'あ', u'いい', u'ううう'], categories=[u'あ', u'いい', u'ううう'], ordered=False, dtype='category')"""
+            expected = u"""CategoricalIndex([u'あ', u'いい', u'ううう'], categories=[u'あ', u'いい', u'ううう'], ordered=False, dtype='category')"""  # noqa
             self.assertEqual(unicode(idx), expected)
 
         # multiple lines
@@ -662,7 +661,7 @@ class TestCategoricalIndex(Base, tm.TestCase):
             expected = u"""CategoricalIndex(['あ', 'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ',
                   'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい',
                   'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう'],
-                 categories=['あ', 'いい', 'ううう'], ordered=False, dtype='category')"""
+                 categories=['あ', 'いい', 'ううう'], ordered=False, dtype='category')"""  # noqa
 
             self.assertEqual(repr(idx), expected)
         else:
@@ -670,7 +669,7 @@ class TestCategoricalIndex(Base, tm.TestCase):
                   u'ううう', u'あ', u'いい', u'ううう', u'あ', u'いい', u'ううう', u'あ',
                   u'いい', u'ううう', u'あ', u'いい', u'ううう', u'あ', u'いい', u'ううう',
                   u'あ', u'いい', u'ううう', u'あ', u'いい', u'ううう'],
-                 categories=[u'あ', u'いい', u'ううう'], ordered=False, dtype='category')"""
+                 categories=[u'あ', u'いい', u'ううう'], ordered=False, dtype='category')"""  # noqa
 
             self.assertEqual(unicode(idx), expected)
 
@@ -680,7 +679,7 @@ class TestCategoricalIndex(Base, tm.TestCase):
             expected = u"""CategoricalIndex(['あ', 'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ',
                   ...
                   'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう'],
-                 categories=['あ', 'いい', 'ううう'], ordered=False, dtype='category', length=300)"""
+                 categories=['あ', 'いい', 'ううう'], ordered=False, dtype='category', length=300)"""  # noqa
 
             self.assertEqual(repr(idx), expected)
         else:
@@ -689,7 +688,7 @@ class TestCategoricalIndex(Base, tm.TestCase):
                   ...
                   u'ううう', u'あ', u'いい', u'ううう', u'あ', u'いい', u'ううう', u'あ',
                   u'いい', u'ううう'],
-                 categories=[u'あ', u'いい', u'ううう'], ordered=False, dtype='category', length=300)"""
+                 categories=[u'あ', u'いい', u'ううう'], ordered=False, dtype='category', length=300)"""  # noqa
 
             self.assertEqual(unicode(idx), expected)
 
@@ -698,13 +697,13 @@ class TestCategoricalIndex(Base, tm.TestCase):
         if PY3:
             expected = u"""CategoricalIndex(['あ', 'い', 'う', 'え', 'お', 'か', 'き', 'く', 'け', 'こ', 'さ', 'し',
                   'す', 'せ', 'そ'],
-                 categories=['あ', 'い', 'う', 'え', 'お', 'か', 'き', 'く', ...], ordered=False, dtype='category')"""
+                 categories=['あ', 'い', 'う', 'え', 'お', 'か', 'き', 'く', ...], ordered=False, dtype='category')"""  # noqa
 
             self.assertEqual(repr(idx), expected)
         else:
             expected = u"""CategoricalIndex([u'あ', u'い', u'う', u'え', u'お', u'か', u'き', u'く', u'け', u'こ',
                   u'さ', u'し', u'す', u'せ', u'そ'],
-                 categories=[u'あ', u'い', u'う', u'え', u'お', u'か', u'き', u'く', ...], ordered=False, dtype='category')"""
+                 categories=[u'あ', u'い', u'う', u'え', u'お', u'か', u'き', u'く', ...], ordered=False, dtype='category')"""  # noqa
 
             self.assertEqual(unicode(idx), expected)
 
@@ -714,10 +713,10 @@ class TestCategoricalIndex(Base, tm.TestCase):
             # short
             idx = pd.CategoricalIndex([u'あ', u'いい', u'ううう'])
             if PY3:
-                expected = u"""CategoricalIndex(['あ', 'いい', 'ううう'], categories=['あ', 'いい', 'ううう'], ordered=False, dtype='category')"""
+                expected = u"""CategoricalIndex(['あ', 'いい', 'ううう'], categories=['あ', 'いい', 'ううう'], ordered=False, dtype='category')"""  # noqa
                 self.assertEqual(repr(idx), expected)
             else:
-                expected = u"""CategoricalIndex([u'あ', u'いい', u'ううう'], categories=[u'あ', u'いい', u'ううう'], ordered=False, dtype='category')"""
+                expected = u"""CategoricalIndex([u'あ', u'いい', u'ううう'], categories=[u'あ', u'いい', u'ううう'], ordered=False, dtype='category')"""  # noqa
                 self.assertEqual(unicode(idx), expected)
 
             # multiple lines
@@ -727,7 +726,7 @@ class TestCategoricalIndex(Base, tm.TestCase):
                   'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう',
                   'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい',
                   'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう'],
-                 categories=['あ', 'いい', 'ううう'], ordered=False, dtype='category')"""
+                 categories=['あ', 'いい', 'ううう'], ordered=False, dtype='category')"""  # noqa
 
                 self.assertEqual(repr(idx), expected)
             else:
@@ -736,7 +735,7 @@ class TestCategoricalIndex(Base, tm.TestCase):
                   u'いい', u'ううう', u'あ', u'いい', u'ううう', u'あ',
                   u'いい', u'ううう', u'あ', u'いい', u'ううう', u'あ',
                   u'いい', u'ううう', u'あ', u'いい', u'ううう'],
-                 categories=[u'あ', u'いい', u'ううう'], ordered=False, dtype='category')"""
+                 categories=[u'あ', u'いい', u'ううう'], ordered=False, dtype='category')"""  # noqa
 
                 self.assertEqual(unicode(idx), expected)
 
@@ -748,7 +747,7 @@ class TestCategoricalIndex(Base, tm.TestCase):
                   ...
                   'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう',
                   'あ', 'いい', 'ううう'],
-                 categories=['あ', 'いい', 'ううう'], ordered=False, dtype='category', length=300)"""
+                 categories=['あ', 'いい', 'ううう'], ordered=False, dtype='category', length=300)"""  # noqa
 
                 self.assertEqual(repr(idx), expected)
             else:
@@ -757,7 +756,7 @@ class TestCategoricalIndex(Base, tm.TestCase):
                   ...
                   u'ううう', u'あ', u'いい', u'ううう', u'あ', u'いい',
                   u'ううう', u'あ', u'いい', u'ううう'],
-                 categories=[u'あ', u'いい', u'ううう'], ordered=False, dtype='category', length=300)"""
+                 categories=[u'あ', u'いい', u'ううう'], ordered=False, dtype='category', length=300)"""  # noqa
 
                 self.assertEqual(unicode(idx), expected)
 
@@ -766,13 +765,13 @@ class TestCategoricalIndex(Base, tm.TestCase):
             if PY3:
                 expected = u"""CategoricalIndex(['あ', 'い', 'う', 'え', 'お', 'か', 'き', 'く', 'け', 'こ',
                   'さ', 'し', 'す', 'せ', 'そ'],
-                 categories=['あ', 'い', 'う', 'え', 'お', 'か', 'き', 'く', ...], ordered=False, dtype='category')"""
+                 categories=['あ', 'い', 'う', 'え', 'お', 'か', 'き', 'く', ...], ordered=False, dtype='category')"""  # noqa
 
                 self.assertEqual(repr(idx), expected)
             else:
                 expected = u"""CategoricalIndex([u'あ', u'い', u'う', u'え', u'お', u'か', u'き', u'く',
                   u'け', u'こ', u'さ', u'し', u'す', u'せ', u'そ'],
-                 categories=[u'あ', u'い', u'う', u'え', u'お', u'か', u'き', u'く', ...], ordered=False, dtype='category')"""
+                 categories=[u'あ', u'い', u'う', u'え', u'お', u'か', u'き', u'く', ...], ordered=False, dtype='category')"""  # noqa
 
                 self.assertEqual(unicode(idx), expected)
 
diff --git a/pandas/tests/test_categorical.py b/pandas/tests/test_categorical.py
index ea2697ec1..63c1ae70e 100644
--- a/pandas/tests/test_categorical.py
+++ b/pandas/tests/test_categorical.py
@@ -10,7 +10,6 @@ import numpy as np
 
 from pandas.types.dtypes import CategoricalDtype
 from pandas.types.common import (is_categorical_dtype,
-                                 is_object_dtype,
                                  is_float_dtype,
                                  is_integer_dtype)
 
@@ -25,9 +24,6 @@ from pandas import (Categorical, Index, Series, DataFrame,
 from pandas.compat import range, lrange, u, PY3
 from pandas.core.config import option_context
 
-# GH 12066
-# flake8: noqa
-
 
 class TestCategorical(tm.TestCase):
 
@@ -291,7 +287,6 @@ class TestCategorical(tm.TestCase):
             pd.Categorical(DatetimeIndex(['nat', '20160101']),
                            categories=[NaT, Timestamp('20160101')])
 
-
     def test_constructor_with_index(self):
         ci = CategoricalIndex(list('aabbca'), categories=list('cab'))
         tm.assert_categorical_equal(ci.values, Categorical(ci))
@@ -710,8 +705,7 @@ Categories (3, object): [aaaaa, bb, cccc]"""
 
         self.assertEqual(_rep(c), expected)
 
-        c = pd.Categorical([u'ああああ', u'いいいいい', u'ううううううう']
-                           * 20)
+        c = pd.Categorical([u'ああああ', u'いいいいい', u'ううううううう'] * 20)
         expected = u"""\
 [ああああ, いいいいい, ううううううう, ああああ, いいいいい, ..., いいいいい, ううううううう, ああああ, いいいいい, ううううううう]
 Length: 60
@@ -723,8 +717,7 @@ Categories (3, object): [ああああ, いいいいい, ううううううう]""
         # the repr width
         with option_context('display.unicode.east_asian_width', True):
 
-            c = pd.Categorical([u'ああああ', u'いいいいい', u'ううううううう']
-                               * 20)
+            c = pd.Categorical([u'ああああ', u'いいいいい', u'ううううううう'] * 20)
             expected = u"""[ああああ, いいいいい, ううううううう, ああああ, いいいいい, ..., いいいいい, ううううううう, ああああ, いいいいい, ううううううう]
 Length: 60
 Categories (3, object): [ああああ, いいいいい, ううううううう]"""  # noqa
@@ -1279,7 +1272,8 @@ Categories (3, object): [ああああ, いいいいい, ううううううう]""
         s = Categorical([1, 2, 3, 4, 5], categories=[5, 4, 3, 2, 1],
                         ordered=True)
         res = s.mode()
-        exp = Categorical([5, 4, 3, 2, 1], categories=[5, 4, 3, 2, 1], ordered=True)
+        exp = Categorical([5, 4, 3, 2, 1],
+                          categories=[5, 4, 3, 2, 1], ordered=True)
         tm.assert_categorical_equal(res, exp)
         # NaN should not become the mode!
         s = Categorical([np.nan, np.nan, np.nan, 4, 5],
@@ -2233,7 +2227,7 @@ Categories (5, datetime64[ns, US/Eastern]): [2011-01-01 09:00:00-05:00 < 2011-01
         exp = """[2011-01-01 09:00:00-05:00, 2011-01-01 10:00:00-05:00, 2011-01-01 11:00:00-05:00, 2011-01-01 12:00:00-05:00, 2011-01-01 13:00:00-05:00, 2011-01-01 09:00:00-05:00, 2011-01-01 10:00:00-05:00, 2011-01-01 11:00:00-05:00, 2011-01-01 12:00:00-05:00, 2011-01-01 13:00:00-05:00]
 Categories (5, datetime64[ns, US/Eastern]): [2011-01-01 09:00:00-05:00 < 2011-01-01 10:00:00-05:00 <
                                              2011-01-01 11:00:00-05:00 < 2011-01-01 12:00:00-05:00 <
-                                             2011-01-01 13:00:00-05:00]"""
+                                             2011-01-01 13:00:00-05:00]"""  # noqa
 
         self.assertEqual(repr(c), exp)
 
@@ -2242,14 +2236,14 @@ Categories (5, datetime64[ns, US/Eastern]): [2011-01-01 09:00:00-05:00 < 2011-01
         c = pd.Categorical(idx)
         exp = """[2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00, 2011-01-01 12:00, 2011-01-01 13:00]
 Categories (5, period[H]): [2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00, 2011-01-01 12:00,
-                            2011-01-01 13:00]"""
+                            2011-01-01 13:00]"""  # noqa
 
         self.assertEqual(repr(c), exp)
 
         c = pd.Categorical(idx.append(idx), categories=idx)
         exp = """[2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00, 2011-01-01 12:00, 2011-01-01 13:00, 2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00, 2011-01-01 12:00, 2011-01-01 13:00]
 Categories (5, period[H]): [2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00, 2011-01-01 12:00,
-                            2011-01-01 13:00]"""
+                            2011-01-01 13:00]"""  # noqa
 
         self.assertEqual(repr(c), exp)
 
@@ -2262,7 +2256,7 @@ Categories (5, period[M]): [2011-01, 2011-02, 2011-03, 2011-04, 2011-05]"""
 
         c = pd.Categorical(idx.append(idx), categories=idx)
         exp = """[2011-01, 2011-02, 2011-03, 2011-04, 2011-05, 2011-01, 2011-02, 2011-03, 2011-04, 2011-05]
-Categories (5, period[M]): [2011-01, 2011-02, 2011-03, 2011-04, 2011-05]"""
+Categories (5, period[M]): [2011-01, 2011-02, 2011-03, 2011-04, 2011-05]"""  # noqa
 
         self.assertEqual(repr(c), exp)
 
@@ -2271,14 +2265,14 @@ Categories (5, period[M]): [2011-01, 2011-02, 2011-03, 2011-04, 2011-05]"""
         c = pd.Categorical(idx, ordered=True)
         exp = """[2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00, 2011-01-01 12:00, 2011-01-01 13:00]
 Categories (5, period[H]): [2011-01-01 09:00 < 2011-01-01 10:00 < 2011-01-01 11:00 < 2011-01-01 12:00 <
-                            2011-01-01 13:00]"""
+                            2011-01-01 13:00]"""  # noqa
 
         self.assertEqual(repr(c), exp)
 
         c = pd.Categorical(idx.append(idx), categories=idx, ordered=True)
         exp = """[2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00, 2011-01-01 12:00, 2011-01-01 13:00, 2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00, 2011-01-01 12:00, 2011-01-01 13:00]
 Categories (5, period[H]): [2011-01-01 09:00 < 2011-01-01 10:00 < 2011-01-01 11:00 < 2011-01-01 12:00 <
-                            2011-01-01 13:00]"""
+                            2011-01-01 13:00]"""  # noqa
 
         self.assertEqual(repr(c), exp)
 
@@ -2291,7 +2285,7 @@ Categories (5, period[M]): [2011-01 < 2011-02 < 2011-03 < 2011-04 < 2011-05]"""
 
         c = pd.Categorical(idx.append(idx), categories=idx, ordered=True)
         exp = """[2011-01, 2011-02, 2011-03, 2011-04, 2011-05, 2011-01, 2011-02, 2011-03, 2011-04, 2011-05]
-Categories (5, period[M]): [2011-01 < 2011-02 < 2011-03 < 2011-04 < 2011-05]"""
+Categories (5, period[M]): [2011-01 < 2011-02 < 2011-03 < 2011-04 < 2011-05]"""  # noqa
 
         self.assertEqual(repr(c), exp)
 
@@ -2305,7 +2299,7 @@ Categories (5, timedelta64[ns]): [1 days, 2 days, 3 days, 4 days, 5 days]"""
 
         c = pd.Categorical(idx.append(idx), categories=idx)
         exp = """[1 days, 2 days, 3 days, 4 days, 5 days, 1 days, 2 days, 3 days, 4 days, 5 days]
-Categories (5, timedelta64[ns]): [1 days, 2 days, 3 days, 4 days, 5 days]"""
+Categories (5, timedelta64[ns]): [1 days, 2 days, 3 days, 4 days, 5 days]"""  # noqa
 
         self.assertEqual(repr(c), exp)
 
@@ -2315,7 +2309,7 @@ Categories (5, timedelta64[ns]): [1 days, 2 days, 3 days, 4 days, 5 days]"""
 Length: 20
 Categories (20, timedelta64[ns]): [0 days 01:00:00, 1 days 01:00:00, 2 days 01:00:00,
                                    3 days 01:00:00, ..., 16 days 01:00:00, 17 days 01:00:00,
-                                   18 days 01:00:00, 19 days 01:00:00]"""
+                                   18 days 01:00:00, 19 days 01:00:00]"""  # noqa
 
         self.assertEqual(repr(c), exp)
 
@@ -2324,7 +2318,7 @@ Categories (20, timedelta64[ns]): [0 days 01:00:00, 1 days 01:00:00, 2 days 01:0
 Length: 40
 Categories (20, timedelta64[ns]): [0 days 01:00:00, 1 days 01:00:00, 2 days 01:00:00,
                                    3 days 01:00:00, ..., 16 days 01:00:00, 17 days 01:00:00,
-                                   18 days 01:00:00, 19 days 01:00:00]"""
+                                   18 days 01:00:00, 19 days 01:00:00]"""  # noqa
 
         self.assertEqual(repr(c), exp)
 
@@ -2332,13 +2326,13 @@ Categories (20, timedelta64[ns]): [0 days 01:00:00, 1 days 01:00:00, 2 days 01:0
         idx = pd.timedelta_range('1 days', periods=5)
         c = pd.Categorical(idx, ordered=True)
         exp = """[1 days, 2 days, 3 days, 4 days, 5 days]
-Categories (5, timedelta64[ns]): [1 days < 2 days < 3 days < 4 days < 5 days]"""
+Categories (5, timedelta64[ns]): [1 days < 2 days < 3 days < 4 days < 5 days]"""  # noqa
 
         self.assertEqual(repr(c), exp)
 
         c = pd.Categorical(idx.append(idx), categories=idx, ordered=True)
         exp = """[1 days, 2 days, 3 days, 4 days, 5 days, 1 days, 2 days, 3 days, 4 days, 5 days]
-Categories (5, timedelta64[ns]): [1 days < 2 days < 3 days < 4 days < 5 days]"""
+Categories (5, timedelta64[ns]): [1 days < 2 days < 3 days < 4 days < 5 days]"""  # noqa
 
         self.assertEqual(repr(c), exp)
 
@@ -2348,7 +2342,7 @@ Categories (5, timedelta64[ns]): [1 days < 2 days < 3 days < 4 days < 5 days]"""
 Length: 20
 Categories (20, timedelta64[ns]): [0 days 01:00:00 < 1 days 01:00:00 < 2 days 01:00:00 <
                                    3 days 01:00:00 ... 16 days 01:00:00 < 17 days 01:00:00 <
-                                   18 days 01:00:00 < 19 days 01:00:00]"""
+                                   18 days 01:00:00 < 19 days 01:00:00]"""  # noqa
 
         self.assertEqual(repr(c), exp)
 
@@ -2357,7 +2351,7 @@ Categories (20, timedelta64[ns]): [0 days 01:00:00 < 1 days 01:00:00 < 2 days 01
 Length: 40
 Categories (20, timedelta64[ns]): [0 days 01:00:00 < 1 days 01:00:00 < 2 days 01:00:00 <
                                    3 days 01:00:00 ... 16 days 01:00:00 < 17 days 01:00:00 <
-                                   18 days 01:00:00 < 19 days 01:00:00]"""
+                                   18 days 01:00:00 < 19 days 01:00:00]"""  # noqa
 
         self.assertEqual(repr(c), exp)
 
@@ -2423,7 +2417,7 @@ Categories (10, int64): [0 < 1 < 2 < 3 ... 6 < 7 < 8 < 9]"""
 4   2011-01-01 13:00:00
 dtype: category
 Categories (5, datetime64[ns]): [2011-01-01 09:00:00, 2011-01-01 10:00:00, 2011-01-01 11:00:00,
-                                 2011-01-01 12:00:00, 2011-01-01 13:00:00]"""
+                                 2011-01-01 12:00:00, 2011-01-01 13:00:00]"""  # noqa
 
         self.assertEqual(repr(s), exp)
 
@@ -2438,7 +2432,7 @@ Categories (5, datetime64[ns]): [2011-01-01 09:00:00, 2011-01-01 10:00:00, 2011-
 dtype: category
 Categories (5, datetime64[ns, US/Eastern]): [2011-01-01 09:00:00-05:00, 2011-01-01 10:00:00-05:00,
                                              2011-01-01 11:00:00-05:00, 2011-01-01 12:00:00-05:00,
-                                             2011-01-01 13:00:00-05:00]"""
+                                             2011-01-01 13:00:00-05:00]"""  # noqa
 
         self.assertEqual(repr(s), exp)
 
@@ -2452,7 +2446,7 @@ Categories (5, datetime64[ns, US/Eastern]): [2011-01-01 09:00:00-05:00, 2011-01-
 4   2011-01-01 13:00:00
 dtype: category
 Categories (5, datetime64[ns]): [2011-01-01 09:00:00 < 2011-01-01 10:00:00 < 2011-01-01 11:00:00 <
-                                 2011-01-01 12:00:00 < 2011-01-01 13:00:00]"""
+                                 2011-01-01 12:00:00 < 2011-01-01 13:00:00]"""  # noqa
 
         self.assertEqual(repr(s), exp)
 
@@ -2467,7 +2461,7 @@ Categories (5, datetime64[ns]): [2011-01-01 09:00:00 < 2011-01-01 10:00:00 < 201
 dtype: category
 Categories (5, datetime64[ns, US/Eastern]): [2011-01-01 09:00:00-05:00 < 2011-01-01 10:00:00-05:00 <
                                              2011-01-01 11:00:00-05:00 < 2011-01-01 12:00:00-05:00 <
-                                             2011-01-01 13:00:00-05:00]"""
+                                             2011-01-01 13:00:00-05:00]"""  # noqa
 
         self.assertEqual(repr(s), exp)
 
@@ -2481,7 +2475,7 @@ Categories (5, datetime64[ns, US/Eastern]): [2011-01-01 09:00:00-05:00 < 2011-01
 4   2011-01-01 13:00
 dtype: category
 Categories (5, period[H]): [2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00, 2011-01-01 12:00,
-                            2011-01-01 13:00]"""
+                            2011-01-01 13:00]"""  # noqa
 
         self.assertEqual(repr(s), exp)
 
@@ -2507,7 +2501,7 @@ Categories (5, period[M]): [2011-01, 2011-02, 2011-03, 2011-04, 2011-05]"""
 4   2011-01-01 13:00
 dtype: category
 Categories (5, period[H]): [2011-01-01 09:00 < 2011-01-01 10:00 < 2011-01-01 11:00 < 2011-01-01 12:00 <
-                            2011-01-01 13:00]"""
+                            2011-01-01 13:00]"""  # noqa
 
         self.assertEqual(repr(s), exp)
 
@@ -2551,7 +2545,7 @@ Categories (5, timedelta64[ns]): [1 days, 2 days, 3 days, 4 days, 5 days]"""
 dtype: category
 Categories (10, timedelta64[ns]): [0 days 01:00:00, 1 days 01:00:00, 2 days 01:00:00,
                                    3 days 01:00:00, ..., 6 days 01:00:00, 7 days 01:00:00,
-                                   8 days 01:00:00, 9 days 01:00:00]"""
+                                   8 days 01:00:00, 9 days 01:00:00]"""  # noqa
 
         self.assertEqual(repr(s), exp)
 
@@ -2564,7 +2558,7 @@ Categories (10, timedelta64[ns]): [0 days 01:00:00, 1 days 01:00:00, 2 days 01:0
 3   4 days
 4   5 days
 dtype: category
-Categories (5, timedelta64[ns]): [1 days < 2 days < 3 days < 4 days < 5 days]"""
+Categories (5, timedelta64[ns]): [1 days < 2 days < 3 days < 4 days < 5 days]"""  # noqa
 
         self.assertEqual(repr(s), exp)
 
@@ -2583,26 +2577,26 @@ Categories (5, timedelta64[ns]): [1 days < 2 days < 3 days < 4 days < 5 days]"""
 dtype: category
 Categories (10, timedelta64[ns]): [0 days 01:00:00 < 1 days 01:00:00 < 2 days 01:00:00 <
                                    3 days 01:00:00 ... 6 days 01:00:00 < 7 days 01:00:00 <
-                                   8 days 01:00:00 < 9 days 01:00:00]"""
+                                   8 days 01:00:00 < 9 days 01:00:00]"""  # noqa
 
         self.assertEqual(repr(s), exp)
 
     def test_categorical_index_repr(self):
         idx = pd.CategoricalIndex(pd.Categorical([1, 2, 3]))
-        exp = """CategoricalIndex([1, 2, 3], categories=[1, 2, 3], ordered=False, dtype='category')"""
+        exp = """CategoricalIndex([1, 2, 3], categories=[1, 2, 3], ordered=False, dtype='category')"""  # noqa
         self.assertEqual(repr(idx), exp)
 
         i = pd.CategoricalIndex(pd.Categorical(np.arange(10)))
-        exp = """CategoricalIndex([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], categories=[0, 1, 2, 3, 4, 5, 6, 7, ...], ordered=False, dtype='category')"""
+        exp = """CategoricalIndex([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], categories=[0, 1, 2, 3, 4, 5, 6, 7, ...], ordered=False, dtype='category')"""  # noqa
         self.assertEqual(repr(i), exp)
 
     def test_categorical_index_repr_ordered(self):
         i = pd.CategoricalIndex(pd.Categorical([1, 2, 3], ordered=True))
-        exp = """CategoricalIndex([1, 2, 3], categories=[1, 2, 3], ordered=True, dtype='category')"""
+        exp = """CategoricalIndex([1, 2, 3], categories=[1, 2, 3], ordered=True, dtype='category')"""  # noqa
         self.assertEqual(repr(i), exp)
 
         i = pd.CategoricalIndex(pd.Categorical(np.arange(10), ordered=True))
-        exp = """CategoricalIndex([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], categories=[0, 1, 2, 3, 4, 5, 6, 7, ...], ordered=True, dtype='category')"""
+        exp = """CategoricalIndex([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], categories=[0, 1, 2, 3, 4, 5, 6, 7, ...], ordered=True, dtype='category')"""  # noqa
         self.assertEqual(repr(i), exp)
 
     def test_categorical_index_repr_datetime(self):
@@ -2611,7 +2605,7 @@ Categories (10, timedelta64[ns]): [0 days 01:00:00 < 1 days 01:00:00 < 2 days 01
         exp = """CategoricalIndex(['2011-01-01 09:00:00', '2011-01-01 10:00:00',
                   '2011-01-01 11:00:00', '2011-01-01 12:00:00',
                   '2011-01-01 13:00:00'],
-                 categories=[2011-01-01 09:00:00, 2011-01-01 10:00:00, 2011-01-01 11:00:00, 2011-01-01 12:00:00, 2011-01-01 13:00:00], ordered=False, dtype='category')"""
+                 categories=[2011-01-01 09:00:00, 2011-01-01 10:00:00, 2011-01-01 11:00:00, 2011-01-01 12:00:00, 2011-01-01 13:00:00], ordered=False, dtype='category')"""  # noqa
 
         self.assertEqual(repr(i), exp)
 
@@ -2621,7 +2615,7 @@ Categories (10, timedelta64[ns]): [0 days 01:00:00 < 1 days 01:00:00 < 2 days 01
         exp = """CategoricalIndex(['2011-01-01 09:00:00-05:00', '2011-01-01 10:00:00-05:00',
                   '2011-01-01 11:00:00-05:00', '2011-01-01 12:00:00-05:00',
                   '2011-01-01 13:00:00-05:00'],
-                 categories=[2011-01-01 09:00:00-05:00, 2011-01-01 10:00:00-05:00, 2011-01-01 11:00:00-05:00, 2011-01-01 12:00:00-05:00, 2011-01-01 13:00:00-05:00], ordered=False, dtype='category')"""
+                 categories=[2011-01-01 09:00:00-05:00, 2011-01-01 10:00:00-05:00, 2011-01-01 11:00:00-05:00, 2011-01-01 12:00:00-05:00, 2011-01-01 13:00:00-05:00], ordered=False, dtype='category')"""  # noqa
 
         self.assertEqual(repr(i), exp)
 
@@ -2631,7 +2625,7 @@ Categories (10, timedelta64[ns]): [0 days 01:00:00 < 1 days 01:00:00 < 2 days 01
         exp = """CategoricalIndex(['2011-01-01 09:00:00', '2011-01-01 10:00:00',
                   '2011-01-01 11:00:00', '2011-01-01 12:00:00',
                   '2011-01-01 13:00:00'],
-                 categories=[2011-01-01 09:00:00, 2011-01-01 10:00:00, 2011-01-01 11:00:00, 2011-01-01 12:00:00, 2011-01-01 13:00:00], ordered=True, dtype='category')"""
+                 categories=[2011-01-01 09:00:00, 2011-01-01 10:00:00, 2011-01-01 11:00:00, 2011-01-01 12:00:00, 2011-01-01 13:00:00], ordered=True, dtype='category')"""  # noqa
 
         self.assertEqual(repr(i), exp)
 
@@ -2641,7 +2635,7 @@ Categories (10, timedelta64[ns]): [0 days 01:00:00 < 1 days 01:00:00 < 2 days 01
         exp = """CategoricalIndex(['2011-01-01 09:00:00-05:00', '2011-01-01 10:00:00-05:00',
                   '2011-01-01 11:00:00-05:00', '2011-01-01 12:00:00-05:00',
                   '2011-01-01 13:00:00-05:00'],
-                 categories=[2011-01-01 09:00:00-05:00, 2011-01-01 10:00:00-05:00, 2011-01-01 11:00:00-05:00, 2011-01-01 12:00:00-05:00, 2011-01-01 13:00:00-05:00], ordered=True, dtype='category')"""
+                 categories=[2011-01-01 09:00:00-05:00, 2011-01-01 10:00:00-05:00, 2011-01-01 11:00:00-05:00, 2011-01-01 12:00:00-05:00, 2011-01-01 13:00:00-05:00], ordered=True, dtype='category')"""  # noqa
 
         self.assertEqual(repr(i), exp)
 
@@ -2651,7 +2645,7 @@ Categories (10, timedelta64[ns]): [0 days 01:00:00 < 1 days 01:00:00 < 2 days 01
                   '2011-01-01 13:00:00-05:00', '2011-01-01 09:00:00-05:00',
                   '2011-01-01 10:00:00-05:00', '2011-01-01 11:00:00-05:00',
                   '2011-01-01 12:00:00-05:00', '2011-01-01 13:00:00-05:00'],
-                 categories=[2011-01-01 09:00:00-05:00, 2011-01-01 10:00:00-05:00, 2011-01-01 11:00:00-05:00, 2011-01-01 12:00:00-05:00, 2011-01-01 13:00:00-05:00], ordered=True, dtype='category')"""
+                 categories=[2011-01-01 09:00:00-05:00, 2011-01-01 10:00:00-05:00, 2011-01-01 11:00:00-05:00, 2011-01-01 12:00:00-05:00, 2011-01-01 13:00:00-05:00], ordered=True, dtype='category')"""  # noqa
 
         self.assertEqual(repr(i), exp)
 
@@ -2659,24 +2653,24 @@ Categories (10, timedelta64[ns]): [0 days 01:00:00 < 1 days 01:00:00 < 2 days 01
         # test all length
         idx = pd.period_range('2011-01-01 09:00', freq='H', periods=1)
         i = pd.CategoricalIndex(pd.Categorical(idx))
-        exp = """CategoricalIndex(['2011-01-01 09:00'], categories=[2011-01-01 09:00], ordered=False, dtype='category')"""
+        exp = """CategoricalIndex(['2011-01-01 09:00'], categories=[2011-01-01 09:00], ordered=False, dtype='category')"""  # noqa
         self.assertEqual(repr(i), exp)
 
         idx = pd.period_range('2011-01-01 09:00', freq='H', periods=2)
         i = pd.CategoricalIndex(pd.Categorical(idx))
-        exp = """CategoricalIndex(['2011-01-01 09:00', '2011-01-01 10:00'], categories=[2011-01-01 09:00, 2011-01-01 10:00], ordered=False, dtype='category')"""
+        exp = """CategoricalIndex(['2011-01-01 09:00', '2011-01-01 10:00'], categories=[2011-01-01 09:00, 2011-01-01 10:00], ordered=False, dtype='category')"""  # noqa
         self.assertEqual(repr(i), exp)
 
         idx = pd.period_range('2011-01-01 09:00', freq='H', periods=3)
         i = pd.CategoricalIndex(pd.Categorical(idx))
-        exp = """CategoricalIndex(['2011-01-01 09:00', '2011-01-01 10:00', '2011-01-01 11:00'], categories=[2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00], ordered=False, dtype='category')"""
+        exp = """CategoricalIndex(['2011-01-01 09:00', '2011-01-01 10:00', '2011-01-01 11:00'], categories=[2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00], ordered=False, dtype='category')"""  # noqa
         self.assertEqual(repr(i), exp)
 
         idx = pd.period_range('2011-01-01 09:00', freq='H', periods=5)
         i = pd.CategoricalIndex(pd.Categorical(idx))
         exp = """CategoricalIndex(['2011-01-01 09:00', '2011-01-01 10:00', '2011-01-01 11:00',
                   '2011-01-01 12:00', '2011-01-01 13:00'],
-                 categories=[2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00, 2011-01-01 12:00, 2011-01-01 13:00], ordered=False, dtype='category')"""
+                 categories=[2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00, 2011-01-01 12:00, 2011-01-01 13:00], ordered=False, dtype='category')"""  # noqa
 
         self.assertEqual(repr(i), exp)
 
@@ -2685,13 +2679,13 @@ Categories (10, timedelta64[ns]): [0 days 01:00:00 < 1 days 01:00:00 < 2 days 01
                   '2011-01-01 12:00', '2011-01-01 13:00', '2011-01-01 09:00',
                   '2011-01-01 10:00', '2011-01-01 11:00', '2011-01-01 12:00',
                   '2011-01-01 13:00'],
-                 categories=[2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00, 2011-01-01 12:00, 2011-01-01 13:00], ordered=False, dtype='category')"""
+                 categories=[2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00, 2011-01-01 12:00, 2011-01-01 13:00], ordered=False, dtype='category')"""  # noqa
 
         self.assertEqual(repr(i), exp)
 
         idx = pd.period_range('2011-01', freq='M', periods=5)
         i = pd.CategoricalIndex(pd.Categorical(idx))
-        exp = """CategoricalIndex(['2011-01', '2011-02', '2011-03', '2011-04', '2011-05'], categories=[2011-01, 2011-02, 2011-03, 2011-04, 2011-05], ordered=False, dtype='category')"""
+        exp = """CategoricalIndex(['2011-01', '2011-02', '2011-03', '2011-04', '2011-05'], categories=[2011-01, 2011-02, 2011-03, 2011-04, 2011-05], ordered=False, dtype='category')"""  # noqa
         self.assertEqual(repr(i), exp)
 
     def test_categorical_index_repr_period_ordered(self):
@@ -2699,19 +2693,19 @@ Categories (10, timedelta64[ns]): [0 days 01:00:00 < 1 days 01:00:00 < 2 days 01
         i = pd.CategoricalIndex(pd.Categorical(idx, ordered=True))
         exp = """CategoricalIndex(['2011-01-01 09:00', '2011-01-01 10:00', '2011-01-01 11:00',
                   '2011-01-01 12:00', '2011-01-01 13:00'],
-                 categories=[2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00, 2011-01-01 12:00, 2011-01-01 13:00], ordered=True, dtype='category')"""
+                 categories=[2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00, 2011-01-01 12:00, 2011-01-01 13:00], ordered=True, dtype='category')"""  # noqa
 
         self.assertEqual(repr(i), exp)
 
         idx = pd.period_range('2011-01', freq='M', periods=5)
         i = pd.CategoricalIndex(pd.Categorical(idx, ordered=True))
-        exp = """CategoricalIndex(['2011-01', '2011-02', '2011-03', '2011-04', '2011-05'], categories=[2011-01, 2011-02, 2011-03, 2011-04, 2011-05], ordered=True, dtype='category')"""
+        exp = """CategoricalIndex(['2011-01', '2011-02', '2011-03', '2011-04', '2011-05'], categories=[2011-01, 2011-02, 2011-03, 2011-04, 2011-05], ordered=True, dtype='category')"""  # noqa
         self.assertEqual(repr(i), exp)
 
     def test_categorical_index_repr_timedelta(self):
         idx = pd.timedelta_range('1 days', periods=5)
         i = pd.CategoricalIndex(pd.Categorical(idx))
-        exp = """CategoricalIndex(['1 days', '2 days', '3 days', '4 days', '5 days'], categories=[1 days 00:00:00, 2 days 00:00:00, 3 days 00:00:00, 4 days 00:00:00, 5 days 00:00:00], ordered=False, dtype='category')"""
+        exp = """CategoricalIndex(['1 days', '2 days', '3 days', '4 days', '5 days'], categories=[1 days 00:00:00, 2 days 00:00:00, 3 days 00:00:00, 4 days 00:00:00, 5 days 00:00:00], ordered=False, dtype='category')"""  # noqa
         self.assertEqual(repr(i), exp)
 
         idx = pd.timedelta_range('1 hours', periods=10)
@@ -2720,14 +2714,14 @@ Categories (10, timedelta64[ns]): [0 days 01:00:00 < 1 days 01:00:00 < 2 days 01
                   '3 days 01:00:00', '4 days 01:00:00', '5 days 01:00:00',
                   '6 days 01:00:00', '7 days 01:00:00', '8 days 01:00:00',
                   '9 days 01:00:00'],
-                 categories=[0 days 01:00:00, 1 days 01:00:00, 2 days 01:00:00, 3 days 01:00:00, 4 days 01:00:00, 5 days 01:00:00, 6 days 01:00:00, 7 days 01:00:00, ...], ordered=False, dtype='category')"""
+                 categories=[0 days 01:00:00, 1 days 01:00:00, 2 days 01:00:00, 3 days 01:00:00, 4 days 01:00:00, 5 days 01:00:00, 6 days 01:00:00, 7 days 01:00:00, ...], ordered=False, dtype='category')"""  # noqa
 
         self.assertEqual(repr(i), exp)
 
     def test_categorical_index_repr_timedelta_ordered(self):
         idx = pd.timedelta_range('1 days', periods=5)
         i = pd.CategoricalIndex(pd.Categorical(idx, ordered=True))
-        exp = """CategoricalIndex(['1 days', '2 days', '3 days', '4 days', '5 days'], categories=[1 days 00:00:00, 2 days 00:00:00, 3 days 00:00:00, 4 days 00:00:00, 5 days 00:00:00], ordered=True, dtype='category')"""
+        exp = """CategoricalIndex(['1 days', '2 days', '3 days', '4 days', '5 days'], categories=[1 days 00:00:00, 2 days 00:00:00, 3 days 00:00:00, 4 days 00:00:00, 5 days 00:00:00], ordered=True, dtype='category')"""  # noqa
         self.assertEqual(repr(i), exp)
 
         idx = pd.timedelta_range('1 hours', periods=10)
@@ -2736,7 +2730,7 @@ Categories (10, timedelta64[ns]): [0 days 01:00:00 < 1 days 01:00:00 < 2 days 01
                   '3 days 01:00:00', '4 days 01:00:00', '5 days 01:00:00',
                   '6 days 01:00:00', '7 days 01:00:00', '8 days 01:00:00',
                   '9 days 01:00:00'],
-                 categories=[0 days 01:00:00, 1 days 01:00:00, 2 days 01:00:00, 3 days 01:00:00, 4 days 01:00:00, 5 days 01:00:00, 6 days 01:00:00, 7 days 01:00:00, ...], ordered=True, dtype='category')"""
+                 categories=[0 days 01:00:00, 1 days 01:00:00, 2 days 01:00:00, 3 days 01:00:00, 4 days 01:00:00, 5 days 01:00:00, 6 days 01:00:00, 7 days 01:00:00, ...], ordered=True, dtype='category')"""  # noqa
 
         self.assertEqual(repr(i), exp)
 
@@ -2833,7 +2827,8 @@ Categories (10, timedelta64[ns]): [0 days 01:00:00 < 1 days 01:00:00 < 2 days 01
         s = Series(Categorical([1, 2, 3, 4, 5], categories=[5, 4, 3, 2, 1],
                                ordered=True))
         res = s.mode()
-        exp = Series(Categorical([5, 4, 3, 2, 1], categories=[5, 4, 3, 2, 1], ordered=True))
+        exp = Series(Categorical([5, 4, 3, 2, 1], categories=[5, 4, 3, 2, 1],
+                                 ordered=True))
         tm.assert_series_equal(res, exp)
 
     def test_value_counts(self):
@@ -4275,10 +4270,10 @@ Categories (10, timedelta64[ns]): [0 days 01:00:00 < 1 days 01:00:00 < 2 days 01
         # * `translate` has different interfaces for py2 vs. py3
         _ignore_names = ["get", "join", "translate"]
 
-        str_func_names = [f
-                          for f in dir(s.str)
-                          if not (f.startswith("_") or f in _special_func_names
-                                  or f in _ignore_names)]
+        str_func_names = [f for f in dir(s.str) if not (
+            f.startswith("_") or
+            f in _special_func_names or
+            f in _ignore_names)]
 
         func_defs = [(f, (), {}) for f in str_func_names]
         func_defs.extend(special_func_defs)
@@ -4418,10 +4413,3 @@ class TestCategoricalSubclassing(tm.TestCase):
         self.assertIsInstance(res, tm.SubclassedCategorical)
         exp = Categorical(['A', 'B', 'C'])
         tm.assert_categorical_equal(res, exp)
-
-    def test_map(self):
-        sc = tm.SubclassedCategorical(['a', 'b', 'c'])
-        res = sc.map(lambda x: x.upper())
-        self.assertIsInstance(res, tm.SubclassedCategorical)
-        exp = Categorical(['A', 'B', 'C'])
-        tm.assert_categorical_equal(res, exp)
diff --git a/pandas/tseries/common.py b/pandas/tseries/common.py
index 7940efc7e..955edce25 100644
--- a/pandas/tseries/common.py
+++ b/pandas/tseries/common.py
@@ -4,8 +4,7 @@ datetimelike delegation
 
 import numpy as np
 
-from pandas.types.common import (_NS_DTYPE, _TD_DTYPE,
-                                 is_period_arraylike,
+from pandas.types.common import (is_period_arraylike,
                                  is_datetime_arraylike, is_integer_dtype,
                                  is_datetime64_dtype, is_datetime64tz_dtype,
                                  is_timedelta64_dtype, is_categorical_dtype,
@@ -13,7 +12,7 @@ from pandas.types.common import (_NS_DTYPE, _TD_DTYPE,
 
 from pandas.core.base import PandasDelegate, NoNewAttributesMixin
 from pandas.tseries.index import DatetimeIndex
-from pandas._libs.period import IncompatibleFrequency    # flake8: noqa
+from pandas._libs.period import IncompatibleFrequency  # noqa
 from pandas.tseries.period import PeriodIndex
 from pandas.tseries.tdi import TimedeltaIndex
 from pandas.core.algorithms import take_1d
@@ -162,6 +161,7 @@ class DatetimeProperties(Properties):
     def to_pydatetime(self):
         return self.values.to_pydatetime()
 
+
 DatetimeProperties._add_delegate_accessors(
     delegate=DatetimeIndex,
     accessors=DatetimeIndex._datetimelike_ops,
@@ -201,6 +201,7 @@ class TimedeltaProperties(Properties):
         """
         return self.values.components.set_index(self.index)
 
+
 TimedeltaProperties._add_delegate_accessors(
     delegate=TimedeltaIndex,
     accessors=TimedeltaIndex._datetimelike_ops,
@@ -225,6 +226,7 @@ class PeriodProperties(Properties):
     Raises TypeError if the Series does not contain datetimelike values.
     """
 
+
 PeriodProperties._add_delegate_accessors(
     delegate=PeriodIndex,
     accessors=PeriodIndex._datetimelike_ops,
