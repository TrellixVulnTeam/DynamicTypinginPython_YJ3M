commit 2e4b2956ac6a8693869c9f057b570d67b287b5a7
Author: Chang She <chang@lambdafoundry.com>
Date:   Sun May 6 23:01:16 2012 -0400

    Revert "ENH: parsing numbers with commas in read_csv/table/clipboard/fwf #796"
    
    This reverts commit f61c8771c1da504ab39b045d8def091f1f0d9754.

diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index 2206169df..909eec9da 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -53,8 +53,6 @@ date_parser : function
     dateutil.parser
 dayfirst : boolean, default False
     DD/MM format dates, international and European format
-thousands : str, default None
-    Thousands separator
 nrows : int, default None
     Number of rows of file to read. Useful for reading pieces of large files
 iterator : boolean, default False
@@ -178,7 +176,6 @@ def read_csv(filepath_or_buffer,
              names=None,
              skiprows=None,
              na_values=None,
-             thousands=None,
              parse_dates=False,
              dayfirst=False,
              date_parser=None,
@@ -207,7 +204,6 @@ def read_table(filepath_or_buffer,
                names=None,
                skiprows=None,
                na_values=None,
-               thousands=None,
                parse_dates=False,
                dayfirst=False,
                date_parser=None,
@@ -240,7 +236,6 @@ def read_fwf(filepath_or_buffer,
              names=None,
              skiprows=None,
              na_values=None,
-             thousands=None,
              parse_dates=False,
              dayfirst=False,
              date_parser=None,
@@ -270,9 +265,10 @@ def read_fwf(filepath_or_buffer,
             col += w
         kwds['colspecs'] = colspecs
 
-    kwds['thousands'] = thousands
     return _read(FixedWidthFieldParser, filepath_or_buffer, kwds)
 
+
+
 def read_clipboard(**kwargs):  # pragma: no cover
     """
     Read text from clipboard and pass to read_table. See read_table for the
@@ -350,8 +346,7 @@ class TextParser(object):
     """
 
     def __init__(self, f, delimiter=None, names=None, header=0,
-                 index_col=None, na_values=None, thousands=None,
-                 parse_dates=False,
+                 index_col=None, na_values=None, parse_dates=False,
                  date_parser=None, dayfirst=False, chunksize=None,
                  skiprows=None, skip_footer=0, converters=None,
                  verbose=False, encoding=None):
@@ -397,8 +392,6 @@ class TextParser(object):
         else:
             self.na_values = set(list(na_values)) | _NA_VALUES
 
-        self.thousands = thousands
-
         if hasattr(f, 'readline'):
             self._make_reader(f)
         else:
@@ -506,31 +499,11 @@ class TextParser(object):
                 next(self.data)
                 self.pos += 1
             line = next(self.data)
-
-        line = self._check_thousands([line])[0]
-
         self.pos += 1
         self.buf.append(line)
 
         return line
 
-    def _check_thousands(self, lines):
-        if self.thousands is None:
-            return lines
-        nonnum = re.compile('[^-^0-9^%s^.]+' % self.thousands)
-        ret = []
-        for l in lines:
-            rl = []
-            for x in l:
-                if (not isinstance(x, basestring) or
-                    self.thousands not in x or
-                    nonnum.search(x.strip())):
-                    rl.append(x)
-                else:
-                    rl.append(x.replace(',', ''))
-            ret.append(rl)
-        return ret
-
     def _clear_buffer(self):
         self.buf = []
 
@@ -730,7 +703,7 @@ class TextParser(object):
         if self.skip_footer:
             lines = lines[:-self.skip_footer]
 
-        return self._check_thousands(lines)
+        return lines
 
 def _convert_to_ndarrays(dct, na_values, verbose=False):
     def _get_na_values(col):
@@ -778,11 +751,10 @@ class FixedWidthReader(object):
     """
     A reader of fixed-width lines.
     """
-    def __init__(self, f, colspecs, filler, thousands=None):
+    def __init__(self, f, colspecs, filler):
         self.f = f
         self.colspecs = colspecs
         self.filler = filler # Empty characters between fields.
-        self.thousands = thousands
 
         assert isinstance(colspecs, (tuple, list))
         for colspec in colspecs:
@@ -796,7 +768,7 @@ class FixedWidthReader(object):
         # Note: 'colspecs' is a sequence of half-open intervals.
         return [line[fromm:to].strip(self.filler or ' ')
                 for (fromm, to) in self.colspecs]
-
+    
     # Iterator protocol in Python 3 uses __next__()
     __next__ = next
 
@@ -855,7 +827,7 @@ class ExcelFile(object):
 
     def parse(self, sheetname, header=0, skiprows=None, index_col=None,
               parse_dates=False, date_parser=None, na_values=None,
-              thousands=None, chunksize=None):
+              chunksize=None):
         """
         Read Excel table into DataFrame
 
@@ -883,13 +855,11 @@ class ExcelFile(object):
                                      skiprows=skiprows, index_col=index_col,
                                      parse_dates=parse_dates,
                                      date_parser=date_parser,
-                                     na_values=na_values,
-                                     thousands=thousands,
-                                     chunksize=chunksize)
+                                     na_values=na_values, chunksize=chunksize)
 
     def _parse_xlsx(self, sheetname, header=0, skiprows=None, index_col=None,
-                    parse_dates=False, date_parser=None, na_values=None,
-                    thousands=None, chunksize=None):
+              parse_dates=False, date_parser=None, na_values=None,
+              chunksize=None):
         sheet = self.book.get_sheet_by_name(name=sheetname)
         data = []
 
@@ -902,7 +872,6 @@ class ExcelFile(object):
 
         parser = TextParser(data, header=header, index_col=index_col,
                             na_values=na_values,
-                            thousands=thousands,
                             parse_dates=parse_dates,
                             date_parser=date_parser,
                             skiprows=skiprows,
@@ -911,8 +880,8 @@ class ExcelFile(object):
         return parser.get_chunk()
 
     def _parse_xls(self, sheetname, header=0, skiprows=None, index_col=None,
-                   parse_dates=False, date_parser=None, na_values=None,
-                   thousands=None, chunksize=None):
+              parse_dates=False, date_parser=None, na_values=None,
+              chunksize=None):
         from datetime import MINYEAR, time, datetime
         from xlrd import xldate_as_tuple, XL_CELL_DATE
 
@@ -938,7 +907,6 @@ class ExcelFile(object):
 
         parser = TextParser(data, header=header, index_col=index_col,
                             na_values=na_values,
-                            thousands=thousands,
                             parse_dates=parse_dates,
                             date_parser=date_parser,
                             skiprows=skiprows,
diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index 07ff3eb6e..3061779bf 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -41,31 +41,6 @@ bar2,12,13,14,15
     def test_read_csv(self):
         pass
 
-    def test_1000_sep(self):
-        data = """A|B|C
-1|2,334.0|5
-10|13|10.
-"""
-        expected = [[1, 2334., 5],
-                    [10, 13, 10]]
-
-        df = read_csv(StringIO(data), sep='|', thousands=',')
-        assert_almost_equal(df.values, expected)
-
-        df = read_table(StringIO(data), sep='|', thousands=',')
-        assert_almost_equal(df.values, expected)
-
-    def test_1000_fwf(self):
-        data = """
- 1 2,334.0    5
-10   13     10.
-"""
-        expected = [[1, 2334., 5],
-                    [10, 13, 10]]
-        df = read_fwf(StringIO(data), colspecs=[(0,3),(3,11),(12,16)],
-                      thousands=',')
-        assert_almost_equal(df.values, expected)
-
     def test_custom_na_values(self):
         data = """A,B,C
 ignore,this,row
diff --git a/vb_suite/frame_methods.py b/vb_suite/frame_methods.py
index 6a78b7d59..b20bc5436 100644
--- a/vb_suite/frame_methods.py
+++ b/vb_suite/frame_methods.py
@@ -49,4 +49,4 @@ cols = cols[0:99]
 """
 
 frame_multiaxis_reindex = Benchmark('df.reindex(index=idx, columns=cols)',
-                                    setup, start_date=datetime(2012, 5, 6))
+                                    setup)
diff --git a/vb_suite/parser.py b/vb_suite/parser.py
deleted file mode 100644
index 298196e0b..000000000
--- a/vb_suite/parser.py
+++ /dev/null
@@ -1,34 +0,0 @@
-from vbench.api import Benchmark
-from datetime import datetime
-
-common_setup = """from pandas_vb_common import *
-"""
-
-setup = common_setup + """
-from pandas import read_csv
-import os
-N = 10000
-K = 8
-df = DataFrame(np.random.randn(N, K) * np.random.randint(100, 10000, (N, K)))
-df.to_csv('test.csv')
-"""
-
-read_csv_vb = Benchmark("read_csv('test.csv')", setup,
-                        cleanup="os.remove('test.csv')",
-                        start_date=datetime(2012, 5, 7))
-
-
-setup = common_setup + """
-from pandas import read_csv
-import os
-N = 10000
-K = 8
-format = lambda x: '{:,}'.format(x)
-df = DataFrame(np.random.randn(N, K) * np.random.randint(100, 10000, (N, K)))
-df = df.applymap(format)
-df.to_csv('test.csv', sep='|')
-"""
-
-read_csv_thou_vb = Benchmark("read_csv('test.csv')", setup,
-                             cleanup="os.remove('test.csv')",
-                             start_date=datetime(2012, 5, 7))
