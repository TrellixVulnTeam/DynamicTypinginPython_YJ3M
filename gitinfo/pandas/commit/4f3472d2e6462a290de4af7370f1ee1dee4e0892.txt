commit 4f3472d2e6462a290de4af7370f1ee1dee4e0892
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Dec 30 11:10:59 2012 -0500

    BUG: fix groupby bug/segfault with NAs in hierarchical level. fix MultiIndex tuple with NA issue. close #2616

diff --git a/RELEASE.rst b/RELEASE.rst
index 3d817e490..a1fd1622e 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -65,6 +65,9 @@ pandas 0.10.1
   - More robust detection of being in IPython session for wide DataFrame
     console formatting (GH2585_)
   - Fix platform issues with ``file:///`` in unit test (#2564)
+  - Fix bug and possible segfault when grouping by hierarchical level that
+    contains NA values (GH2616_)
+  - Ensure that MultiIndex tuples can be constructed with NAs (seen in #2616)
 
 **API Changes**
 
@@ -78,6 +81,7 @@ pandas 0.10.1
 .. _GH2576: https://github.com/pydata/pandas/issues/2576
 .. _GH2585: https://github.com/pydata/pandas/issues/2585
 .. _GH2604: https://github.com/pydata/pandas/issues/2604
+.. _GH2616: https://github.com/pydata/pandas/issues/2616
 
 pandas 0.10.0
 =============
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index c75e468cf..23b65d4d6 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -1109,6 +1109,15 @@ class Grouping(object):
                 # all levels may not be observed
                 labels, uniques = algos.factorize(inds, sort=True)
 
+                if len(uniques) > 0 and uniques[0] == -1:
+                    # handle NAs
+                    mask = inds != -1
+                    ok_labels, uniques = algos.factorize(inds[mask], sort=True)
+
+                    labels = np.empty(len(inds), dtype=inds.dtype)
+                    labels[mask] = ok_labels
+                    labels[-mask] = -1
+
                 if len(uniques) < len(level_index):
                     level_index = level_index.take(uniques)
 
diff --git a/pandas/core/index.py b/pandas/core/index.py
index e1cb050e7..8ac5f6feb 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1467,7 +1467,7 @@ class MultiIndex(Index):
 
             values = []
             for lev, lab in zip(self.levels, self.labels):
-                taken = ndtake(lev.values, lab)
+                taken = com.take_1d(lev.values, lab)
                 # Need to box timestamps, etc.
                 if hasattr(lev, '_box_values'):
                     taken = lev._box_values(taken)
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index eec7a39fb..ec7f5421a 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -1157,6 +1157,27 @@ class TestGroupBy(unittest.TestCase):
         # raise exception for non-MultiIndex
         self.assertRaises(ValueError, self.df.groupby, level=1)
 
+    def test_groupby_level_with_nas(self):
+        index = MultiIndex(levels=[[1, 0], [0, 1, 2, 3]],
+                           labels=[[1, 1, 1, 1, 0, 0, 0, 0],
+                                   [0, 1, 2, 3, 0, 1, 2, 3]])
+
+        # factorizing doesn't confuse things
+        s = Series(np.arange(8.), index=index)
+        result = s.groupby(level=0).sum()
+        expected = Series([22., 6.], index=[1, 0])
+        assert_series_equal(result, expected)
+
+        index = MultiIndex(levels=[[1, 0], [0, 1, 2, 3]],
+                           labels=[[1, 1, 1, 1, -1, 0, 0, 0],
+                                   [0, 1, 2, 3, 0, 1, 2, 3]])
+
+        # factorizing doesn't confuse things
+        s = Series(np.arange(8.), index=index)
+        result = s.groupby(level=0).sum()
+        expected = Series([18., 6.], index=[1, 0])
+        assert_series_equal(result, expected)
+
     def test_groupby_level_apply(self):
         frame = self.mframe
 
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index 3793645c7..da67b7cb3 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -1684,6 +1684,14 @@ Thur,Lunch,Yes,51.51,17"""
         df.index = l
         repr(df)
 
+    def test_tuples_have_na(self):
+        index = MultiIndex(levels=[[1, 0], [0, 1, 2, 3]],
+                           labels=[[1, 1, 1, 1, -1, 0, 0, 0],
+                                   [0, 1, 2, 3, 0, 1, 2, 3]])
+
+        self.assertTrue(isnull(index[4][0]))
+        self.assertTrue(isnull(index.values[4][0]))
+
 
 if __name__ == '__main__':
 
