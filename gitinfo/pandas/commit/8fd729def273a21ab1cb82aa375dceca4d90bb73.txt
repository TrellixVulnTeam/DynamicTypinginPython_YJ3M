commit 8fd729def273a21ab1cb82aa375dceca4d90bb73
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Aug 11 21:58:10 2011 -0400

    ENH: drop levels when selecting higher level from Series or DataFrame. refactoring needed

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index b09cb80e0..cecfbc73d 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -695,7 +695,7 @@ class DataFrame(NDFrame):
     #----------------------------------------------------------------------
     # getitem/setitem related
 
-    def __getitem__(self, item):
+    def __getitem__(self, key):
         """
         Retrieve column, slice, or subset from DataFrame.
 
@@ -718,35 +718,45 @@ class DataFrame(NDFrame):
         -----
         This is a magic method. Do NOT call explicity.
         """
-        if isinstance(item, slice):
-            new_data = self._data.get_slice(item, axis=1)
+        if isinstance(key, slice):
+            new_data = self._data.get_slice(key, axis=1)
             return self._constructor(new_data)
-        elif isinstance(item, np.ndarray):
-            if len(item) != len(self.index):
+        elif isinstance(key, np.ndarray):
+            if len(key) != len(self.index):
                 raise ValueError('Item wrong length %d instead of %d!' %
-                                 (len(item), len(self.index)))
+                                 (len(key), len(self.index)))
 
             # also raises Exception if object array with NA values
-            if _is_bool_indexer(item):
-                item = np.asarray(item, dtype=bool)
+            if _is_bool_indexer(key):
+                key = np.asarray(key, dtype=bool)
 
-            new_index = self.index[item]
+            new_index = self.index[key]
             return self.reindex(new_index)
         elif isinstance(self.columns, MultiIndex):
-            loc = self.columns.get_loc(item)
+            loc = self.columns.get_loc(key)
             if isinstance(loc, slice):
                 new_columns = self.columns[loc]
-                return self.reindex(columns=new_columns)
+                result = self.reindex(columns=new_columns)
+
+                # drop levels
+                if isinstance(key, tuple):
+                    for _ in key:
+                        new_columns = new_columns.droplevel(0)
+                else:
+                    new_columns = new_columns.droplevel(0)
+
+                result.columns = new_columns
+                return result
             else:
-                return self._getitem_single(item)
+                return self._getitem_single(key)
         else:
-            return self._getitem_single(item)
+            return self._getitem_single(key)
 
-    def _getitem_multilevel(self, item):
+    def _getitem_multilevel(self, key):
         pass
 
-    def _getitem_single(self, item):
-        values = self._data.get(item)
+    def _getitem_single(self, key):
+        values = self._data.get(key)
         return Series(values, index=self.index)
 
     def __setitem__(self, key, value):
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 49801c4ef..050c2075d 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -504,6 +504,33 @@ class MultiIndex(Index):
         new_labels = [lab.take(*args, **kwargs) for lab in self.labels]
         return MultiIndex(levels=self.levels, labels=new_labels)
 
+    def droplevel(self, level=0):
+        """
+        Return Index with requested level removed. If MultiIndex has only 2
+        levels, the result will be of Index type not MultiIndex.
+
+        Parameters
+        ----------
+        level : int
+
+        Notes
+        -----
+        Does not check if result index is unique or not
+
+        Returns
+        -------
+        index : Index or MultiIndex
+        """
+        new_levels = list(self.levels)
+        new_levels.pop(level)
+        new_labels = list(self.labels)
+        new_labels.pop(level)
+
+        if len(new_levels) == 1:
+            return new_levels[0].take(new_labels[0])
+        else:
+            return MultiIndex(levels=new_levels, labels=new_labels)
+
     def __getslice__(self, i, j):
         return self.__getitem__(slice(i, j))
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 96521fd10..5338535a1 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -261,10 +261,10 @@ class Series(np.ndarray, PandasObject):
               will be returned, otherwise a single value.
         """
         try:
-            if isinstance(key, int):
-                return self._regular_index(key)
-            elif isinstance(self.index, MultiIndex):
+            if isinstance(self.index, MultiIndex):
                 return self._multilevel_index(key)
+            elif isinstance(key, int):
+                return self._regular_index(key)
             else:
                 return self._regular_index(key)
         except Exception:
@@ -307,7 +307,15 @@ class Series(np.ndarray, PandasObject):
         try:
             loc = self.index.get_loc(key)
             if isinstance(loc, slice):
-                return Series(values[loc], index=self.index[loc])
+                # TODO: what if a level contains tuples??
+                new_index = self.index[loc]
+                if isinstance(key, tuple):
+                    for _ in key:
+                        new_index = new_index.droplevel(0)
+                else:
+                    new_index = new_index.droplevel(0)
+
+                return Series(values[loc], index=new_index)
             else:
                 return values[loc]
         except KeyError:
