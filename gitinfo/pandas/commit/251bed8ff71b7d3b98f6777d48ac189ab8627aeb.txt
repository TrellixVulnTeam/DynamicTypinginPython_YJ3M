commit 251bed8ff71b7d3b98f6777d48ac189ab8627aeb
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jun 13 18:40:36 2011 -0400

    sparse unit tests post refactor, getting closer

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 89ef63ada..fb6e81bed 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -16,7 +16,7 @@ from pandas.core.common import (isnull, notnull, _check_step, _is_list_like,
 from pandas.core.daterange import DateRange
 from pandas.core.generic import PandasGeneric
 from pandas.core.index import Index, NULL_INDEX
-from pandas.core.internals import BlockManager, make_block
+from pandas.core.internals import BlockManager
 from pandas.core.series import Series
 import pandas.core.common as common
 import pandas.core.datetools as datetools
@@ -152,7 +152,6 @@ class DataFrame(PandasGeneric):
         Somehow this got outrageously complicated
         """
         from pandas.core.internals import form_blocks
-
         # TODO: deal with emptiness!
         # prefilter if columns passed
         if columns is not None:
@@ -175,16 +174,8 @@ class DataFrame(PandasGeneric):
     def _init_matrix(self, values, index, columns, dtype=None,
                      copy=True):
         from pandas.core.internals import make_block
-
         values = _prep_ndarray(values, copy=copy)
 
-        if values.ndim == 1:
-            N = values.shape[0]
-            if N == 0:
-                values = values.reshape((values.shape[0], 0))
-            else:
-                values = values.reshape((values.shape[0], 1))
-
         if dtype is not None:
             try:
                 values = values.astype(dtype)
@@ -890,6 +881,7 @@ class DataFrame(PandasGeneric):
         -------
         y : same type as calling instance
         """
+        self._consolidate_inplace()
         frame = self
 
         if index is not None:
@@ -903,8 +895,6 @@ class DataFrame(PandasGeneric):
         return frame
 
     def _reindex_index(self, new_index, method):
-        self._consolidate_inplace()
-
         if new_index is self.index:
             return self.copy()
 
@@ -913,8 +903,6 @@ class DataFrame(PandasGeneric):
         return DataFrame(new_data)
 
     def _reindex_columns(self, new_columns):
-        self._consolidate_inplace()
-
         new_data = self._data.reindex_columns(new_columns)
         return DataFrame(new_data)
 
@@ -2561,6 +2549,16 @@ def _prep_ndarray(values, copy=True):
     else:
         if copy:
             values = values.copy()
+
+    if values.ndim == 1:
+        N = values.shape[0]
+        if N == 0:
+            values = values.reshape((values.shape[0], 0))
+        else:
+            values = values.reshape((values.shape[0], 1))
+    elif values.ndim != 2:
+        raise Exception('Must pass 2-d input')
+
     return values
 
 def _homogenize_series(data, index, dtype=None):
diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index 1e738c03a..d53bfe674 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -14,7 +14,8 @@ from pandas.core.common import (isnull, _pickle_array, _unpickle_array,
                                 _mut_exclusive, _ensure_index, _try_sort)
 from pandas.core.index import Index, NULL_INDEX
 from pandas.core.series import Series, TimeSeries
-from pandas.core.frame import DataFrame, extract_index
+from pandas.core.frame import (DataFrame, extract_index, _prep_ndarray,
+                               _default_index)
 from pandas.core.panel import Panel, WidePanel, LongPanelIndex, LongPanel
 import pandas.core.common as common
 import pandas.core.datetools as datetools
@@ -619,6 +620,7 @@ class SparseDataFrame(DataFrame):
         self.index = index
 
     def _consolidate_inplace(self):
+        # do nothing when DataFrame calls this method
         pass
 
     @property
@@ -668,29 +670,19 @@ class SparseDataFrame(DataFrame):
         return sdict, columns, index
 
     def _init_matrix(self, data, index, columns, dtype=None):
-        if not isinstance(data, np.ndarray):
-            arr = np.array(data)
-            if issubclass(arr.dtype.type, basestring):
-                arr = np.array(data, dtype=object, copy=True)
-
-            data = arr
-
-        if data.ndim == 1:
-            data = data.reshape((len(data), 1))
-        elif data.ndim != 2:
-            raise Exception('Must pass 2-d input!')
-
+        data = _prep_ndarray(data, copy=False)
         N, K = data.shape
-
         if index is None:
             index = _default_index(N)
-
         if columns is None:
             columns = _default_index(K)
 
         if len(columns) != K:
             raise Exception('Column length mismatch: %d vs. %d' %
                             (len(columns), K))
+        if len(index) != N:
+            raise Exception('Index length mismatch: %d vs. %d' %
+                            (len(index), N))
 
         data = dict([(idx, data[:, i]) for i, idx in enumerate(columns)])
         return self._init_dict(data, index, columns, dtype)
@@ -791,27 +783,10 @@ class SparseDataFrame(DataFrame):
             self._series[key] = sp_maker(value)
 
         if key not in self.columns:
-            loc = self._get_insert_loc(key)
-            self._insert_column_index(key, loc)
-
-    def _insert_column_index(self, key, loc):
-        if loc == len(self.columns):
-            columns = Index(np.concatenate((self.columns, [key])))
-        elif loc == 0:
-            columns = Index(np.concatenate(([key], self.columns)))
-        else:
-            columns = Index(np.concatenate((self.columns[:loc], [key],
-                                            self.columns[loc:])))
-
-        self.columns = columns
-
-    def _get_insert_loc(self, key):
-        try:
-            loc = self.columns.searchsorted(key)
-        except TypeError:
-            loc = len(self.columns)
+            self._insert_column(key)
 
-        return loc
+    def _insert_column(self, key):
+        self.columns = Index(np.concatenate((self.columns, [key])))
 
     def __delitem__(self, key):
         """
diff --git a/pandas/core/tests/test_sparse.py b/pandas/core/tests/test_sparse.py
index e97debf63..f34e4cbc0 100644
--- a/pandas/core/tests/test_sparse.py
+++ b/pandas/core/tests/test_sparse.py
@@ -643,6 +643,26 @@ class TestSparseDataFrame(TestCase):
         reindexed = self.frame.reindex(idx)
         assert_sp_frame_equal(cons, reindexed)
 
+    def test_constructor_ndarray(self):
+        # no index or columns
+        sp = SparseDataFrame(self.frame.values)
+
+        # 1d
+        sp = SparseDataFrame(self.data['A'], index=self.dates,
+                             columns=['A'])
+        assert_sp_frame_equal(sp, self.frame.reindex(columns=['A']))
+
+        # wrong length index / columns
+        self.assertRaises(Exception, SparseDataFrame, self.frame.values,
+                          index=self.frame.index[:-1])
+        self.assertRaises(Exception, SparseDataFrame, self.frame.values,
+                          columns=self.frame.columns[:-1])
+
+    def test_constructor_empty(self):
+        sp = SparseDataFrame()
+        self.assert_(len(sp.index) == 0)
+        self.assert_(len(sp.columns) == 0)
+
     def test_constructor_dataframe(self):
         dense = self.frame.to_dense()
         sp = SparseDataFrame(dense)
@@ -780,6 +800,35 @@ class TestSparseDataFrame(TestCase):
 
         self._check_all(_check_frame)
 
+    def test_insert_item_corner(self):
+        self.frame['a'] = self.frame['B']
+        assert_sp_series_equal(self.frame['a'], self.frame['B'])
+
+    def test_delitem(self):
+        A = self.frame['A']
+        C = self.frame['C']
+
+        del self.frame['B']
+        self.assert_('B' not in self.frame)
+        assert_sp_series_equal(self.frame['A'], A)
+        assert_sp_series_equal(self.frame['C'], C)
+
+        del self.frame['D']
+        self.assert_('D' not in self.frame)
+
+        del self.frame['A']
+        self.assert_('A' not in self.frame)
+
+    def test_set_columns(self):
+        self.frame.columns = self.frame.columns
+        self.assertRaises(Exception, setattr, self.frame, 'columns',
+                          self.frame.columns[:-1])
+
+    def test_set_index(self):
+        self.frame.index = self.frame.index
+        self.assertRaises(Exception, setattr, self.frame, 'index',
+                          self.frame.index[:-1])
+
     def test_corr(self):
         res = self.frame.corr()
         self.assert_(isinstance(res, SparseDataFrame))
