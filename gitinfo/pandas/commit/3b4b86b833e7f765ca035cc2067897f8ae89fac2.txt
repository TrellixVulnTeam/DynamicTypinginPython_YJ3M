commit 3b4b86b833e7f765ca035cc2067897f8ae89fac2
Author: Daniel Saxton <2658661+dsaxton@users.noreply.github.com>
Date:   Mon Feb 17 14:03:05 2020 -0600

    CLN: Clean reductions/test_reductions.py (#32035)

diff --git a/pandas/tests/reductions/test_reductions.py b/pandas/tests/reductions/test_reductions.py
index 0b312fe2f..211d0d52d 100644
--- a/pandas/tests/reductions/test_reductions.py
+++ b/pandas/tests/reductions/test_reductions.py
@@ -66,60 +66,64 @@ class TestReductions:
             expected = expected.astype("M8[ns]").astype("int64")
             assert result.value == expected
 
-    def test_nanops(self):
+    @pytest.mark.parametrize("opname", ["max", "min"])
+    def test_nanops(self, opname, index_or_series):
         # GH#7261
-        for opname in ["max", "min"]:
-            for klass in [Index, Series]:
-                arg_op = "arg" + opname if klass is Index else "idx" + opname
-
-                obj = klass([np.nan, 2.0])
-                assert getattr(obj, opname)() == 2.0
-
-                obj = klass([np.nan])
-                assert pd.isna(getattr(obj, opname)())
-                assert pd.isna(getattr(obj, opname)(skipna=False))
-
-                obj = klass([], dtype=object)
-                assert pd.isna(getattr(obj, opname)())
-                assert pd.isna(getattr(obj, opname)(skipna=False))
-
-                obj = klass([pd.NaT, datetime(2011, 11, 1)])
-                # check DatetimeIndex monotonic path
-                assert getattr(obj, opname)() == datetime(2011, 11, 1)
-                assert getattr(obj, opname)(skipna=False) is pd.NaT
-
-                assert getattr(obj, arg_op)() == 1
-                result = getattr(obj, arg_op)(skipna=False)
-                if klass is Series:
-                    assert np.isnan(result)
-                else:
-                    assert result == -1
-
-                obj = klass([pd.NaT, datetime(2011, 11, 1), pd.NaT])
-                # check DatetimeIndex non-monotonic path
-                assert getattr(obj, opname)(), datetime(2011, 11, 1)
-                assert getattr(obj, opname)(skipna=False) is pd.NaT
-
-                assert getattr(obj, arg_op)() == 1
-                result = getattr(obj, arg_op)(skipna=False)
-                if klass is Series:
-                    assert np.isnan(result)
-                else:
-                    assert result == -1
-
-                for dtype in ["M8[ns]", "datetime64[ns, UTC]"]:
-                    # cases with empty Series/DatetimeIndex
-                    obj = klass([], dtype=dtype)
-
-                    assert getattr(obj, opname)() is pd.NaT
-                    assert getattr(obj, opname)(skipna=False) is pd.NaT
-
-                    with pytest.raises(ValueError, match="empty sequence"):
-                        getattr(obj, arg_op)()
-                    with pytest.raises(ValueError, match="empty sequence"):
-                        getattr(obj, arg_op)(skipna=False)
-
-        # argmin/max
+        klass = index_or_series
+        arg_op = "arg" + opname if klass is Index else "idx" + opname
+
+        obj = klass([np.nan, 2.0])
+        assert getattr(obj, opname)() == 2.0
+
+        obj = klass([np.nan])
+        assert pd.isna(getattr(obj, opname)())
+        assert pd.isna(getattr(obj, opname)(skipna=False))
+
+        obj = klass([], dtype=object)
+        assert pd.isna(getattr(obj, opname)())
+        assert pd.isna(getattr(obj, opname)(skipna=False))
+
+        obj = klass([pd.NaT, datetime(2011, 11, 1)])
+        # check DatetimeIndex monotonic path
+        assert getattr(obj, opname)() == datetime(2011, 11, 1)
+        assert getattr(obj, opname)(skipna=False) is pd.NaT
+
+        assert getattr(obj, arg_op)() == 1
+        result = getattr(obj, arg_op)(skipna=False)
+        if klass is Series:
+            assert np.isnan(result)
+        else:
+            assert result == -1
+
+        obj = klass([pd.NaT, datetime(2011, 11, 1), pd.NaT])
+        # check DatetimeIndex non-monotonic path
+        assert getattr(obj, opname)(), datetime(2011, 11, 1)
+        assert getattr(obj, opname)(skipna=False) is pd.NaT
+
+        assert getattr(obj, arg_op)() == 1
+        result = getattr(obj, arg_op)(skipna=False)
+        if klass is Series:
+            assert np.isnan(result)
+        else:
+            assert result == -1
+
+    @pytest.mark.parametrize("opname", ["max", "min"])
+    @pytest.mark.parametrize("dtype", ["M8[ns]", "datetime64[ns, UTC]"])
+    def test_nanops_empty_object(self, opname, index_or_series, dtype):
+        klass = index_or_series
+        arg_op = "arg" + opname if klass is Index else "idx" + opname
+
+        obj = klass([], dtype=dtype)
+
+        assert getattr(obj, opname)() is pd.NaT
+        assert getattr(obj, opname)(skipna=False) is pd.NaT
+
+        with pytest.raises(ValueError, match="empty sequence"):
+            getattr(obj, arg_op)()
+        with pytest.raises(ValueError, match="empty sequence"):
+            getattr(obj, arg_op)(skipna=False)
+
+    def test_argminmax(self):
         obj = Index(np.arange(5, dtype="int64"))
         assert obj.argmin() == 0
         assert obj.argmax() == 4
@@ -224,16 +228,17 @@ class TestIndexReductions:
             assert idx.argmin() == 0
             assert idx.argmax() == 2
 
-        for op in ["min", "max"]:
-            # Return NaT
-            obj = TimedeltaIndex([])
-            assert pd.isna(getattr(obj, op)())
+    @pytest.mark.parametrize("op", ["min", "max"])
+    def test_minmax_timedelta_empty_or_na(self, op):
+        # Return NaT
+        obj = TimedeltaIndex([])
+        assert getattr(obj, op)() is pd.NaT
 
-            obj = TimedeltaIndex([pd.NaT])
-            assert pd.isna(getattr(obj, op)())
+        obj = TimedeltaIndex([pd.NaT])
+        assert getattr(obj, op)() is pd.NaT
 
-            obj = TimedeltaIndex([pd.NaT, pd.NaT, pd.NaT])
-            assert pd.isna(getattr(obj, op)())
+        obj = TimedeltaIndex([pd.NaT, pd.NaT, pd.NaT])
+        assert getattr(obj, op)() is pd.NaT
 
     def test_numpy_minmax_timedelta64(self):
         td = timedelta_range("16815 days", "16820 days", freq="D")
