commit da836e9654c9429dc088c98d8be9d41349acb76c
Author: jreback <jeff@reback.net>
Date:   Sun Mar 31 13:42:44 2013 -0400

    TST: more robust tests in HDFStore
    
    TST: print output on exception

diff --git a/RELEASE.rst b/RELEASE.rst
index 8b4034c80..8fec644a0 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -346,7 +346,7 @@ pandas 0.11.0
 .. _GH2751: https://github.com/pydata/pandas/issues/2751
 .. _GH2747: https://github.com/pydata/pandas/issues/2747
 .. _GH2816: https://github.com/pydata/pandas/issues/2816
-.. _GH3216: https://github.com/pydata/pandas/issues/2816
+.. _GH3216: https://github.com/pydata/pandas/issues/3216
 
 pandas 0.10.1
 =============
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index f9cc850cc..b68a34c2a 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -453,18 +453,24 @@ class HDFStore(object):
         tbls = [ self.get_storer(k) for k in keys ]
 
         # validate rows
-        if tbls[0] is None:
-            raise Exception("no valid tables to select as multiple")
-        nrows = tbls[0].nrows
-        for t in tbls:
-            if t.nrows != nrows:
-                raise ValueError("all tables must have exactly the same nrows!")
+        nrows = None
+        for t, k in zip(tbls, keys):
+            if t is None:
+                raise TypeError("Invalid table [%s]" % k)
             if not t.is_table:
                 raise TypeError("object [%s] is not a table, and cannot be used in all select as multiple" % t.pathname)
 
+            if nrows is None:
+                nrows = t.nrows
+            elif t.nrows != nrows:
+                raise ValueError("all tables must have exactly the same nrows!")
+
         # select coordinates from the selector table
-        c = self.select_as_coordinates(selector, where, start=start, stop=stop)
-        nrows = len(c)
+        try:
+            c = self.select_as_coordinates(selector, where, start=start, stop=stop)
+            nrows = len(c)
+        except (Exception), detail:
+            raise ValueError("invalid selector [%s]" % selector)
 
         def func(_start, _stop):
 
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index bd90323da..2cc80e7b3 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -15,6 +15,8 @@ from pandas.tests.test_series import assert_series_equal
 from pandas.tests.test_frame import assert_frame_equal
 from pandas import concat, Timestamp
 
+from numpy.testing.decorators import slow
+
 try:
     import tables
 except ImportError:
@@ -2177,6 +2179,12 @@ class TestHDFStore(unittest.TestCase):
                               None, where=['A>0', 'B>0'], selector='df1')
             self.assertRaises(Exception, store.select_as_multiple,
                               [None], where=['A>0', 'B>0'], selector='df1')
+            self.assertRaises(TypeError, store.select_as_multiple,
+                              ['df1','df3'], where=['A>0', 'B>0'], selector='df1')
+            self.assertRaises(KeyError, store.select_as_multiple,
+                              ['df3'], where=['A>0', 'B>0'], selector='df1')
+            self.assertRaises(ValueError, store.select_as_multiple,
+                              ['df1','df2'], where=['A>0', 'B>0'], selector='df4')
             
             # default select
             result = store.select('df1', ['A>0', 'B>0'])
@@ -2195,12 +2203,19 @@ class TestHDFStore(unittest.TestCase):
             tm.assert_frame_equal(result, expected)
             
             # multiple (diff selector)
-            result = store.select_as_multiple(['df1', 'df2'], where=[Term(
-                        'index', '>', df2.index[4])], selector='df2')
-            expected = concat([df1, df2], axis=1)
-            expected = expected[5:]
-            tm.assert_frame_equal(result, expected)
-            
+            try:
+                result = store.select_as_multiple(['df1', 'df2'], where=[Term(
+                            'index', '>', df2.index[4])], selector='df2')
+                expected = concat([df1, df2], axis=1)
+                expected = expected[5:]
+                tm.assert_frame_equal(result, expected)
+            except (Exception), detail:
+                print "error in select_as_multiple %s" % str(detail)
+                print "store: ", store
+                print "df1: ", df1
+                print "df2: ", df2
+
+
             # test excpection for diff rows
             store.append('df3', tm.makeTimeDataFrame(nper=50))
             self.assertRaises(ValueError, store.select_as_multiple, 
