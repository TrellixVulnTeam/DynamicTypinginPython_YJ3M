commit ab8822ae85ab469efd338d34c10aef6ff89cc8d0
Author: Tom Augspurger <tom.augspurger88@gmail.com>
Date:   Fri Feb 10 10:33:36 2017 -0500

    TST: Use pytest
    
    closes https://github.com/pydata/pandas/issues/13097
    
    Author: Tom Augspurger <tom.augspurger88@gmail.com>
    
    Closes #13856 from TomAugspurger/pytest and squashes the following commits:
    
    59e2be9 [Tom Augspurger] NOSE_ARGS -> TEST_ARGS
    03695aa [Tom Augspurger] TST: Remove disabled marks
    42790ae [Tom Augspurger] TST: Remove test_multi.sh
    40d7336 [Tom Augspurger] PKG: redo pd.test import
    9ba1f12 [Tom Augspurger] TST: Skip if getlocale is None
    14c447c [Tom Augspurger] TST: pd.test uses pytest
    c4f6008 [Tom Augspurger] TST/CI: Use pytest
    b268d89 [Tom Augspurger] TST: Change method to make reporting more standard
    a638390 [Tom Augspurger] TST: Test consistency change
    c8dc927 [Tom Augspurger] TST: Refactor to use setup_class
    9b5f2b2 [Tom Augspurger] TST: Refactor sql test inheritance

diff --git a/.gitignore b/.gitignore
index a77e780f3..808d9fb73 100644
--- a/.gitignore
+++ b/.gitignore
@@ -56,6 +56,8 @@ dist
 **/wheelhouse/*
 # coverage
 .coverage
+coverage.xml
+coverage_html_report
 
 # OS generated files #
 ######################
diff --git a/.travis.yml b/.travis.yml
index be2058950..b38c99e3a 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -32,7 +32,7 @@ matrix:
       env:
         - PYTHON_VERSION=3.5
         - JOB_NAME: "35_osx"
-        - NOSE_ARGS="not slow and not network and not disabled"
+        - TEST_ARGS="--skip-slow --skip-network"
         - BUILD_TYPE=conda
         - JOB_TAG=_OSX
         - TRAVIS_PYTHON_VERSION=3.5
@@ -42,7 +42,7 @@ matrix:
       env:
         - PYTHON_VERSION=2.7
         - JOB_NAME: "27_slow_nnet_LOCALE"
-        - NOSE_ARGS="slow and not network and not disabled"
+        - TEST_ARGS="--only-slow --skip-network"
         - LOCALE_OVERRIDE="zh_CN.UTF-8"
         - FULL_DEPS=true
         - JOB_TAG=_LOCALE
@@ -56,7 +56,7 @@ matrix:
       env:
         - PYTHON_VERSION=2.7
         - JOB_NAME: "27_nslow"
-        - NOSE_ARGS="not slow and not disabled"
+        - TEST_ARGS="--skip-slow"
         - FULL_DEPS=true
         - CLIPBOARD_GUI=gtk2
         - LINT=true
@@ -70,7 +70,7 @@ matrix:
       env:
         - PYTHON_VERSION=3.5
         - JOB_NAME: "35_nslow"
-        - NOSE_ARGS="not slow and not network and not disabled"
+        - TEST_ARGS="--skip-slow --skip-network"
         - FULL_DEPS=true
         - CLIPBOARD=xsel
         - COVERAGE=true
@@ -84,7 +84,7 @@ matrix:
       env:
         - PYTHON_VERSION=3.6
         - JOB_NAME: "36"
-        - NOSE_ARGS="not slow and not network and not disabled"
+        - TEST_ARGS="--skip-slow --skip-network"
         - PANDAS_TESTING_MODE="deprecate"
       addons:
         apt:
@@ -96,7 +96,7 @@ matrix:
       env:
         - PYTHON_VERSION=2.7
         - JOB_NAME: "27_nslow_nnet_COMPAT"
-        - NOSE_ARGS="not slow and not network and not disabled"
+        - TEST_ARGS="--skip-slow --skip-network"
         - LOCALE_OVERRIDE="it_IT.UTF-8"
         - INSTALL_TEST=true
         - JOB_TAG=_COMPAT
@@ -112,7 +112,7 @@ matrix:
         - PYTHON_VERSION=2.7
         - JOB_NAME: "27_slow"
         - JOB_TAG=_SLOW
-        - NOSE_ARGS="slow and not network and not disabled"
+        - TEST_ARGS="--only-slow --skip-network"
         - FULL_DEPS=true
         - CACHE_NAME="27_slow"
         - USE_CACHE=true
@@ -122,7 +122,7 @@ matrix:
         - PYTHON_VERSION=2.7
         - JOB_NAME: "27_build_test_conda"
         - JOB_TAG=_BUILD_TEST
-        - NOSE_ARGS="not slow and not disabled"
+        - TEST_ARGS="--skip-slow"
         - FULL_DEPS=true
         - BUILD_TEST=true
         - CACHE_NAME="27_build_test_conda"
@@ -133,7 +133,7 @@ matrix:
         - PYTHON_VERSION=3.4
         - JOB_NAME: "34_nslow"
         - LOCALE_OVERRIDE="zh_CN.UTF-8"
-        - NOSE_ARGS="not slow and not disabled"
+        - TEST_ARGS="--skip-slow"
         - FULL_DEPS=true
         - CLIPBOARD=xsel
         - CACHE_NAME="34_nslow"
@@ -149,7 +149,7 @@ matrix:
         - PYTHON_VERSION=3.4
         - JOB_NAME: "34_slow"
         - JOB_TAG=_SLOW
-        - NOSE_ARGS="slow and not network and not disabled"
+        - TEST_ARGS="--only-slow --skip-network"
         - FULL_DEPS=true
         - CLIPBOARD=xsel
         - CACHE_NAME="34_slow"
@@ -164,7 +164,7 @@ matrix:
         - PYTHON_VERSION=3.5
         - JOB_NAME: "35_numpy_dev"
         - JOB_TAG=_NUMPY_DEV
-        - NOSE_ARGS="not slow and not network and not disabled"
+        - TEST_ARGS="--skip-slow --skip-network"
         - PANDAS_TESTING_MODE="deprecate"
         - CACHE_NAME="35_numpy_dev"
         - USE_CACHE=true
@@ -179,7 +179,7 @@ matrix:
         - PYTHON_VERSION=3.5
         - JOB_NAME: "35_ascii"
         - JOB_TAG=_ASCII
-        - NOSE_ARGS="not slow and not network and not disabled"
+        - TEST_ARGS="--skip-slow --skip-network"
         - LOCALE_OVERRIDE="C"
         - CACHE_NAME="35_ascii"
         - USE_CACHE=true
@@ -199,7 +199,7 @@ matrix:
         - PYTHON_VERSION=2.7
         - JOB_NAME: "27_slow"
         - JOB_TAG=_SLOW
-        - NOSE_ARGS="slow and not network and not disabled"
+        - TEST_ARGS="--only-slow --skip-network"
         - FULL_DEPS=true
         - CACHE_NAME="27_slow"
         - USE_CACHE=true
@@ -208,7 +208,7 @@ matrix:
         - PYTHON_VERSION=3.4
         - JOB_NAME: "34_slow"
         - JOB_TAG=_SLOW
-        - NOSE_ARGS="slow and not network and not disabled"
+        - TEST_ARGS="--only-slow --skip-network"
         - FULL_DEPS=true
         - CLIPBOARD=xsel
         - CACHE_NAME="34_slow"
@@ -222,7 +222,7 @@ matrix:
         - PYTHON_VERSION=2.7
         - JOB_NAME: "27_build_test_conda"
         - JOB_TAG=_BUILD_TEST
-        - NOSE_ARGS="not slow and not disabled"
+        - TEST_ARGS="--skip-slow"
         - FULL_DEPS=true
         - BUILD_TEST=true
         - CACHE_NAME="27_build_test_conda"
@@ -232,7 +232,7 @@ matrix:
           - PYTHON_VERSION=3.4
           - JOB_NAME: "34_nslow"
           - LOCALE_OVERRIDE="zh_CN.UTF-8"
-          - NOSE_ARGS="not slow and not disabled"
+          - TEST_ARGS="--skip-slow"
           - FULL_DEPS=true
           - CLIPBOARD=xsel
           - CACHE_NAME="34_nslow"
@@ -247,7 +247,7 @@ matrix:
           - PYTHON_VERSION=3.5
           - JOB_NAME: "35_numpy_dev"
           - JOB_TAG=_NUMPY_DEV
-          - NOSE_ARGS="not slow and not network and not disabled"
+          - TEST_ARGS="--skip-slow --skip-network"
           - PANDAS_TESTING_MODE="deprecate"
           - CACHE_NAME="35_numpy_dev"
           - USE_CACHE=true
@@ -260,7 +260,7 @@ matrix:
         env:
         - PYTHON_VERSION=2.7
         - JOB_NAME: "27_nslow_nnet_COMPAT"
-        - NOSE_ARGS="not slow and not network and not disabled"
+        - TEST_ARGS="--skip-slow --skip-network"
         - LOCALE_OVERRIDE="it_IT.UTF-8"
         - INSTALL_TEST=true
         - JOB_TAG=_COMPAT
@@ -275,7 +275,7 @@ matrix:
         - PYTHON_VERSION=3.5
         - JOB_NAME: "35_ascii"
         - JOB_TAG=_ASCII
-        - NOSE_ARGS="not slow and not network and not disabled"
+        - TEST_ARGS="--skip-slow --skip-network"
         - LOCALE_OVERRIDE="C"
         - CACHE_NAME="35_ascii"
         - USE_CACHE=true
diff --git a/appveyor.yml b/appveyor.yml
index 2499e7069..42c3be13a 100644
--- a/appveyor.yml
+++ b/appveyor.yml
@@ -14,6 +14,7 @@ environment:
     # /E:ON and /V:ON options are not enabled in the batch script intepreter
     # See: http://stackoverflow.com/a/13751649/163740
     CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\ci\\run_with_env.cmd"
+    clone_folder: C:\projects\pandas
 
   matrix:
 
@@ -82,7 +83,7 @@ install:
   - cmd: '%CMD_IN_ENV% conda build ci\appveyor.recipe -q'
 
   # create our env
-  - cmd: conda create -q -n pandas python=%PYTHON_VERSION% nose
+  - cmd: conda create -q -n pandas python=%PYTHON_VERSION% nose pytest
   - cmd: activate pandas
   - SET REQ=ci\requirements-%PYTHON_VERSION%-%PYTHON_ARCH%.run
   - cmd: echo "installing requirements from %REQ%"
@@ -93,7 +94,8 @@ install:
 
 test_script:
   # tests
-  - cd \
   - cmd: activate pandas
   - cmd: conda list
-  - cmd: nosetests --exe -A "not slow and not network and not disabled" pandas
+  - cmd: cd \
+  - cmd: python -c "import pandas; pandas.test(['--skip-slow', '--skip-network'])"
+
diff --git a/ci/install_test.sh b/ci/install_test.sh
index e01ad7b94..cbb84d8fa 100755
--- a/ci/install_test.sh
+++ b/ci/install_test.sh
@@ -8,7 +8,8 @@ if [ "$INSTALL_TEST" ]; then
     conda uninstall cython || exit 1
     python "$TRAVIS_BUILD_DIR"/setup.py sdist --formats=zip,gztar || exit 1
     pip install "$TRAVIS_BUILD_DIR"/dist/*tar.gz || exit 1
-    nosetests --exe -A "$NOSE_ARGS" pandas/tests/test_series.py --with-xunit --xunit-file=/tmp/nosetests_install.xml
+    # nosetests --exe -A "$TEST_ARGS" pandas/tests/test_series.py --with-xunit --xunit-file=/tmp/nosetests_install.xml
+    pytest pandas/tests/test_series.py --junitxml=/tmp/pytest_install.xml
 else
     echo "Skipping installation test."
 fi
diff --git a/ci/install_travis.sh b/ci/install_travis.sh
index 52b52d787..f65176fb1 100755
--- a/ci/install_travis.sh
+++ b/ci/install_travis.sh
@@ -83,6 +83,7 @@ else
 
     # Useful for debugging any issues with conda
     conda info -a || exit 1
+
 fi
 
 # may have installation instructions for this build
@@ -90,13 +91,9 @@ INSTALL="ci/install-${PYTHON_VERSION}${JOB_TAG}.sh"
 if [ -e ${INSTALL} ]; then
     time bash $INSTALL || exit 1
 else
-
     # create new env
-    time conda create -n pandas python=$PYTHON_VERSION nose || exit 1
+    time conda create -n pandas python=$PYTHON_VERSION nose pytest || exit 1
 
-    if [ "$COVERAGE" ]; then
-        pip install coverage
-    fi
     if [ "$LINT" ]; then
         conda install flake8
         pip install cpplint
@@ -119,6 +116,10 @@ fi
 
 source activate pandas
 
+if [ "$COVERAGE" ]; then
+    pip install coverage pytest-cov
+fi
+
 if [ "$BUILD_TEST" ]; then
 
     # build testing
diff --git a/ci/requirements_all.txt b/ci/requirements_all.txt
index bc97957bf..b64143fcd 100644
--- a/ci/requirements_all.txt
+++ b/ci/requirements_all.txt
@@ -1,4 +1,6 @@
 nose
+pytest
+pytest-cov
 flake8
 sphinx
 ipython
diff --git a/ci/requirements_dev.txt b/ci/requirements_dev.txt
index 7396fba65..b8af9d035 100644
--- a/ci/requirements_dev.txt
+++ b/ci/requirements_dev.txt
@@ -3,4 +3,6 @@ pytz
 numpy
 cython
 nose
+pytest
+pytest-cov
 flake8
diff --git a/ci/script.sh b/ci/script.sh
index e2ba883b8..3eac3002d 100755
--- a/ci/script.sh
+++ b/ci/script.sh
@@ -20,11 +20,11 @@ fi
 if [ "$BUILD_TEST" ]; then
     echo "We are not running nosetests as this is simply a build test."
 elif [ "$COVERAGE" ]; then
-    echo nosetests --exe -A "$NOSE_ARGS" pandas --with-coverage --with-xunit --xunit-file=/tmp/nosetests.xml
-    nosetests --exe -A "$NOSE_ARGS" pandas --with-coverage --cover-package=pandas --cover-tests --with-xunit --xunit-file=/tmp/nosetests.xml
+    echo pytest -s --cov=pandas --cov-report xml:/tmp/nosetests.xml $TEST_ARGS pandas
+    pytest -s --cov=pandas --cov-report xml:/tmp/nosetests.xml $TEST_ARGS pandas
 else
-    echo nosetests --exe -A "$NOSE_ARGS" pandas --doctest-tests --with-xunit --xunit-file=/tmp/nosetests.xml
-    nosetests --exe -A "$NOSE_ARGS" pandas --doctest-tests --with-xunit --xunit-file=/tmp/nosetests.xml
+    echo pytest $TEST_ARGS pandas
+    pytest $TEST_ARGS pandas # TODO: doctest
 fi
 
 RET="$?"
diff --git a/doc/source/contributing.rst b/doc/source/contributing.rst
index ecc2a5e72..dbe329b58 100644
--- a/doc/source/contributing.rst
+++ b/doc/source/contributing.rst
@@ -552,8 +552,8 @@ use cases and writing corresponding tests.
 Adding tests is one of the most common requests after code is pushed to *pandas*.  Therefore,
 it is worth getting in the habit of writing tests ahead of time so this is never an issue.
 
-Like many packages, *pandas* uses the `Nose testing system
-<https://nose.readthedocs.io/en/latest/index.html>`_ and the convenient
+Like many packages, *pandas* uses `pytest
+<http://doc.pytest.org/en/latest/>`_ and the convenient
 extensions in `numpy.testing
 <http://docs.scipy.org/doc/numpy/reference/routines.testing.html>`_.
 
@@ -595,17 +595,25 @@ Running the test suite
 The tests can then be run directly inside your Git clone (without having to
 install *pandas*) by typing::
 
-    nosetests pandas
+    pytest pandas
 
 The tests suite is exhaustive and takes around 20 minutes to run.  Often it is
 worth running only a subset of tests first around your changes before running the
-entire suite.  This is done using one of the following constructs::
+entire suite.
 
-    nosetests pandas/tests/[test-module].py
-    nosetests pandas/tests/[test-module].py:[TestClass]
-    nosetests pandas/tests/[test-module].py:[TestClass].[test_method]
+The easiest way to do this is with::
 
-  .. versionadded:: 0.18.0
+    pytest pandas/path/to/test.py -k regex_matching_test_name
+
+Or with one of the following constructs::
+
+    pytest pandas/tests/[test-module].py
+    pytest pandas/tests/[test-module].py::[TestClass]
+    pytest pandas/tests/[test-module].py::[TestClass]::[test_method]
+
+For more, see the `pytest<http://doc.pytest.org/en/latest/>`_ documentation.
+
+    .. versionadded:: 0.18.0
 
 Furthermore one can run
 
diff --git a/doc/source/install.rst b/doc/source/install.rst
index 4b3ea1962..1c7cbc932 100644
--- a/doc/source/install.rst
+++ b/doc/source/install.rst
@@ -188,8 +188,8 @@ Running the test suite
 pandas is equipped with an exhaustive set of unit tests covering about 97% of
 the codebase as of this writing. To run it on your machine to verify that
 everything is working (and you have all of the dependencies, soft and hard,
-installed), make sure you have `nose
-<https://nose.readthedocs.io/en/latest/>`__ and run:
+installed), make sure you have `pytest
+<http://doc.pytest.org/en/latest/>`__ and run:
 
 ::
 
diff --git a/doc/source/whatsnew/v0.20.0.txt b/doc/source/whatsnew/v0.20.0.txt
index 5fbce3d25..d0ffa786a 100644
--- a/doc/source/whatsnew/v0.20.0.txt
+++ b/doc/source/whatsnew/v0.20.0.txt
@@ -11,6 +11,9 @@ Highlights include:
 
 - Building pandas for development now requires ``cython >= 0.23`` (:issue:`14831`)
 - The ``.ix`` indexer has been deprecated, see :ref:`here <whatsnew_0200.api_breaking.deprecate_ix>`
+- Switched the test framework to `pytest`_ (:issue:`13097`)
+
+.. _pytest: http://doc.pytest.org/en/latest/
 
 Check the :ref:`API Changes <whatsnew_0200.api_breaking>` and :ref:`deprecations <whatsnew_0200.deprecations>` before updating.
 
diff --git a/pandas/__init__.py b/pandas/__init__.py
index 76542db22..70c547010 100644
--- a/pandas/__init__.py
+++ b/pandas/__init__.py
@@ -56,11 +56,7 @@ from pandas.util.print_versions import show_versions
 
 from pandas.io.api import *
 
-# define the testing framework
-import pandas.util.testing
-from pandas.util.nosetester import NoseTester
-test = NoseTester().test
-del NoseTester
+from pandas.util._tester import test
 
 # use the closest tagged version if possible
 from ._version import get_versions
diff --git a/pandas/api/tests/test_api.py b/pandas/api/tests/test_api.py
index a53f6103b..05cf5dc4b 100644
--- a/pandas/api/tests/test_api.py
+++ b/pandas/api/tests/test_api.py
@@ -28,7 +28,7 @@ class TestPDApi(Base, tm.TestCase):
 
     # these are optionally imported based on testing
     # & need to be ignored
-    ignored = ['tests', 'locale']
+    ignored = ['tests', 'locale', 'conftest']
 
     # top-level sub-packages
     lib = ['api', 'compat', 'computation', 'core',
diff --git a/pandas/conftest.py b/pandas/conftest.py
new file mode 100644
index 000000000..b3683de3a
--- /dev/null
+++ b/pandas/conftest.py
@@ -0,0 +1,21 @@
+import pytest
+
+
+def pytest_addoption(parser):
+    parser.addoption("--skip-slow", action="store_true",
+                     help="skip slow tests")
+    parser.addoption("--skip-network", action="store_true",
+                     help="run network tests")
+    parser.addoption("--only-slow", action="store_true",
+                     help="run only slow tests")
+
+
+def pytest_runtest_setup(item):
+    if 'slow' in item.keywords and item.config.getoption("--skip-slow"):
+        pytest.skip("skipping due to --skip-slow")
+
+    if 'slow' not in item.keywords and item.config.getoption("--only-slow"):
+        pytest.skip("skipping due to --only-slow")
+
+    if 'skip' in item.keywords and item.config.getoption("--skip-network"):
+        pytest.skip("skipping due to --skip-network")
diff --git a/pandas/io/tests/parser/test_network.py b/pandas/io/tests/parser/test_network.py
index e06f94c78..533b7733b 100644
--- a/pandas/io/tests/parser/test_network.py
+++ b/pandas/io/tests/parser/test_network.py
@@ -24,7 +24,7 @@ class TestCompressedUrl(object):
         'xz': '.xz',
     }
 
-    def __init__(self):
+    def setup(self):
         path = os.path.join(tm.get_data_path(), 'salaries.csv')
         self.local_table = read_table(path)
         self.base_url = ('https://github.com/pandas-dev/pandas/raw/master/'
diff --git a/pandas/io/tests/test_packers.py b/pandas/io/tests/test_packers.py
index 8a0cfb92b..2ee36d85f 100644
--- a/pandas/io/tests/test_packers.py
+++ b/pandas/io/tests/test_packers.py
@@ -793,18 +793,19 @@ TestPackers
     http://stackoverflow.com/questions/6689537/nose-test-generators-inside-class
     """
 
-    def setUp(self):
+    @classmethod
+    def setup_class(cls):
         from pandas.io.tests.generate_legacy_storage_files import (
             create_msgpack_data, create_data)
-        self.data = create_msgpack_data()
-        self.all_data = create_data()
-        self.path = u('__%s__.msgpack' % tm.rands(10))
-        self.minimum_structure = {'series': ['float', 'int', 'mixed',
-                                             'ts', 'mi', 'dup'],
-                                  'frame': ['float', 'int', 'mixed', 'mi'],
-                                  'panel': ['float'],
-                                  'index': ['int', 'date', 'period'],
-                                  'mi': ['reg2']}
+        cls.data = create_msgpack_data()
+        cls.all_data = create_data()
+        cls.path = u('__%s__.msgpack' % tm.rands(10))
+        cls.minimum_structure = {'series': ['float', 'int', 'mixed',
+                                            'ts', 'mi', 'dup'],
+                                 'frame': ['float', 'int', 'mixed', 'mi'],
+                                 'panel': ['float'],
+                                 'index': ['int', 'date', 'period'],
+                                 'mi': ['reg2']}
 
     def check_min_structure(self, data):
         for typ, v in self.minimum_structure.items():
diff --git a/pandas/io/tests/test_pickle.py b/pandas/io/tests/test_pickle.py
index 73a9173e8..89827817a 100644
--- a/pandas/io/tests/test_pickle.py
+++ b/pandas/io/tests/test_pickle.py
@@ -31,11 +31,12 @@ class TestPickle():
     nose-test-generators-inside-class
     """
 
-    def setUp(self):
+    @classmethod
+    def setup_class(cls):
         from pandas.io.tests.generate_legacy_storage_files import (
             create_pickle_data)
-        self.data = create_pickle_data()
-        self.path = u('__%s__.pickle' % tm.rands(10))
+        cls.data = create_pickle_data()
+        cls.path = u('__%s__.pickle' % tm.rands(10))
 
     def compare_element(self, result, expected, typ, version=None):
         if isinstance(expected, Index):
diff --git a/pandas/io/tests/test_sql.py b/pandas/io/tests/test_sql.py
index 4bcde7640..ddda65c5b 100644
--- a/pandas/io/tests/test_sql.py
+++ b/pandas/io/tests/test_sql.py
@@ -236,7 +236,7 @@ class SQLAlchemyMixIn(MixInBase):
         pass
 
 
-class PandasSQLTest(unittest.TestCase):
+class PandasSQLTest(object):
     """
     Base class with common private methods for SQLAlchemy and fallback cases.
 
@@ -839,7 +839,7 @@ class _TestSQLApi(PandasSQLTest):
         df.to_sql('test_unicode', self.conn, index=False)
 
 
-class TestSQLApi(SQLAlchemyMixIn, _TestSQLApi):
+class TestSQLApi(SQLAlchemyMixIn, _TestSQLApi, unittest.TestCase):
     """
     Test the public API as it would be used directly
 
@@ -1024,11 +1024,11 @@ class _EngineToConnMixin(object):
         super(_EngineToConnMixin, self).tearDown()
 
 
-class TestSQLApiConn(_EngineToConnMixin, TestSQLApi):
+class TestSQLApiConn(_EngineToConnMixin, TestSQLApi, unittest.TestCase):
     pass
 
 
-class TestSQLiteFallbackApi(SQLiteMixIn, _TestSQLApi):
+class TestSQLiteFallbackApi(SQLiteMixIn, _TestSQLApi, unittest.TestCase):
     """
     Test the public sqlite connection fallback API
 
@@ -1875,34 +1875,39 @@ class _TestPostgreSQLAlchemy(object):
             tm.assert_frame_equal(res1, res2)
 
 
-class TestMySQLAlchemy(_TestMySQLAlchemy, _TestSQLAlchemy):
+class TestMySQLAlchemy(_TestMySQLAlchemy, _TestSQLAlchemy, unittest.TestCase):
     pass
 
 
-class TestMySQLAlchemyConn(_TestMySQLAlchemy, _TestSQLAlchemyConn):
+class TestMySQLAlchemyConn(_TestMySQLAlchemy, _TestSQLAlchemyConn,
+                           unittest.TestCase):
     pass
 
 
-class TestPostgreSQLAlchemy(_TestPostgreSQLAlchemy, _TestSQLAlchemy):
+class TestPostgreSQLAlchemy(_TestPostgreSQLAlchemy, _TestSQLAlchemy,
+                            unittest.TestCase):
     pass
 
 
-class TestPostgreSQLAlchemyConn(_TestPostgreSQLAlchemy, _TestSQLAlchemyConn):
+class TestPostgreSQLAlchemyConn(_TestPostgreSQLAlchemy, _TestSQLAlchemyConn,
+                                unittest.TestCase):
     pass
 
 
-class TestSQLiteAlchemy(_TestSQLiteAlchemy, _TestSQLAlchemy):
+class TestSQLiteAlchemy(_TestSQLiteAlchemy, _TestSQLAlchemy,
+                        unittest.TestCase):
     pass
 
 
-class TestSQLiteAlchemyConn(_TestSQLiteAlchemy, _TestSQLAlchemyConn):
+class TestSQLiteAlchemyConn(_TestSQLiteAlchemy, _TestSQLAlchemyConn,
+                            unittest.TestCase):
     pass
 
 
 # -----------------------------------------------------------------------------
 # -- Test Sqlite / MySQL fallback
 
-class TestSQLiteFallback(SQLiteMixIn, PandasSQLTest):
+class TestSQLiteFallback(SQLiteMixIn, PandasSQLTest, unittest.TestCase):
     """
     Test the fallback mode against an in-memory sqlite database.
 
diff --git a/pandas/tests/formats/test_format.py b/pandas/tests/formats/test_format.py
index 99cc70ae3..9a24ae332 100644
--- a/pandas/tests/formats/test_format.py
+++ b/pandas/tests/formats/test_format.py
@@ -3923,6 +3923,15 @@ $1$,$2$
         self.assertEqual(str(df), exp)
 
 
+def gen_series_formatting():
+    s1 = pd.Series(['a'] * 100)
+    s2 = pd.Series(['ab'] * 100)
+    s3 = pd.Series(['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef'])
+    s4 = s3[::-1]
+    test_sers = {'onel': s1, 'twol': s2, 'asc': s3, 'desc': s4}
+    return test_sers
+
+
 class TestSeriesFormatting(tm.TestCase):
 
     def setUp(self):
@@ -4320,15 +4329,6 @@ class TestSeriesFormatting(tm.TestCase):
                '1.0000\n129    1.0000\ndtype: float64')
         self.assertEqual(res, exp)
 
-    @staticmethod
-    def gen_test_series():
-        s1 = pd.Series(['a'] * 100)
-        s2 = pd.Series(['ab'] * 100)
-        s3 = pd.Series(['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef'])
-        s4 = s3[::-1]
-        test_sers = {'onel': s1, 'twol': s2, 'asc': s3, 'desc': s4}
-        return test_sers
-
     def chck_ncols(self, s):
         with option_context("display.max_rows", 10):
             res = repr(s)
@@ -4339,7 +4339,7 @@ class TestSeriesFormatting(tm.TestCase):
         self.assertEqual(ncolsizes, 1)
 
     def test_format_explicit(self):
-        test_sers = self.gen_test_series()
+        test_sers = gen_series_formatting()
         with option_context("display.max_rows", 4):
             res = repr(test_sers['onel'])
             exp = '0     a\n1     a\n     ..\n98    a\n99    a\ndtype: object'
@@ -4358,7 +4358,7 @@ class TestSeriesFormatting(tm.TestCase):
             self.assertEqual(exp, res)
 
     def test_ncols(self):
-        test_sers = self.gen_test_series()
+        test_sers = gen_series_formatting()
         for s in test_sers.values():
             self.chck_ncols(s)
 
diff --git a/pandas/tests/frame/common.py b/pandas/tests/frame/common.py
index 37f67712e..b9cd764c8 100644
--- a/pandas/tests/frame/common.py
+++ b/pandas/tests/frame/common.py
@@ -89,11 +89,11 @@ class TestData(object):
 
     @cache_readonly
     def ts1(self):
-        return tm.makeTimeSeries()
+        return tm.makeTimeSeries(nper=30)
 
     @cache_readonly
     def ts2(self):
-        return tm.makeTimeSeries()[5:]
+        return tm.makeTimeSeries(nper=30)[5:]
 
     @cache_readonly
     def simple(self):
diff --git a/pandas/tools/tests/test_util.py b/pandas/tools/tests/test_util.py
index e1d057eb3..0716a13fa 100644
--- a/pandas/tools/tests/test_util.py
+++ b/pandas/tools/tests/test_util.py
@@ -93,6 +93,11 @@ class TestLocaleUtils(tm.TestCase):
             raise nose.SkipTest("Only a single locale found, no point in "
                                 "trying to test setting another locale")
 
+        if all(x is None for x in CURRENT_LOCALE):
+            # Not sure why, but on some travis runs with pytest,
+            # getlocale() returned (None, None).
+            raise nose.SkipTest("CURRENT_LOCALE is not set.")
+
         if LOCALE_OVERRIDE is None:
             lang, enc = 'it_CH', 'UTF-8'
         elif LOCALE_OVERRIDE == 'C':
diff --git a/pandas/util/_tester.py b/pandas/util/_tester.py
new file mode 100644
index 000000000..b0e402939
--- /dev/null
+++ b/pandas/util/_tester.py
@@ -0,0 +1,23 @@
+"""
+Entrypoint for testing from the top-level namespace
+"""
+import os
+
+PKG = os.path.dirname(os.path.dirname(__file__))
+
+
+try:
+    import pytest
+except ImportError:
+    def test():
+        raise ImportError("Need pytest>=3.0 to run tests")
+else:
+    def test(extra_args=None):
+        if extra_args:
+            cmd = ['-q'] + extra_args + [PKG]
+        else:
+            cmd = ['-q', PKG]
+        pytest.main(cmd)
+
+
+__all__ = ['test']
diff --git a/pandas/util/nosetester.py b/pandas/util/nosetester.py
deleted file mode 100644
index 1bdaaff99..000000000
--- a/pandas/util/nosetester.py
+++ /dev/null
@@ -1,261 +0,0 @@
-"""
-Nose test running.
-
-This module implements ``test()`` function for pandas modules.
-
-"""
-from __future__ import division, absolute_import, print_function
-
-import os
-import sys
-import warnings
-from pandas.compat import string_types
-from numpy.testing import nosetester
-
-
-def get_package_name(filepath):
-    """
-    Given a path where a package is installed, determine its name.
-
-    Parameters
-    ----------
-    filepath : str
-        Path to a file. If the determination fails, "pandas" is returned.
-
-    Examples
-    --------
-    >>> pandas.util.nosetester.get_package_name('nonsense')
-    'pandas'
-
-    """
-
-    pkg_name = []
-    while 'site-packages' in filepath or 'dist-packages' in filepath:
-        filepath, p2 = os.path.split(filepath)
-        if p2 in ('site-packages', 'dist-packages'):
-            break
-        pkg_name.append(p2)
-
-    # if package name determination failed, just default to pandas
-    if not pkg_name:
-        return "pandas"
-
-    # otherwise, reverse to get correct order and return
-    pkg_name.reverse()
-
-    # don't include the outer egg directory
-    if pkg_name[0].endswith('.egg'):
-        pkg_name.pop(0)
-
-    return '.'.join(pkg_name)
-
-import_nose = nosetester.import_nose
-run_module_suite = nosetester.run_module_suite
-
-
-class NoseTester(nosetester.NoseTester):
-    """
-    Nose test runner.
-
-    This class is made available as pandas.util.nosetester.NoseTester, and
-    a test function is typically added to a package's __init__.py like so::
-
-      from numpy.testing import Tester
-      test = Tester().test
-
-    Calling this test function finds and runs all tests associated with the
-    package and all its sub-packages.
-
-    Attributes
-    ----------
-    package_path : str
-        Full path to the package to test.
-    package_name : str
-        Name of the package to test.
-
-    Parameters
-    ----------
-    package : module, str or None, optional
-        The package to test. If a string, this should be the full path to
-        the package. If None (default), `package` is set to the module from
-        which `NoseTester` is initialized.
-    raise_warnings : None, str or sequence of warnings, optional
-        This specifies which warnings to configure as 'raise' instead
-        of 'warn' during the test execution.  Valid strings are:
-
-          - "develop" : equals ``(DeprecationWarning, RuntimeWarning)``
-          - "release" : equals ``()``, don't raise on any warnings.
-
-        See Notes for more details.
-
-    Notes
-    -----
-    The default for `raise_warnings` is
-    ``(DeprecationWarning, RuntimeWarning)`` for development versions of
-    pandas, and ``()`` for released versions.  The purpose of this switching
-    behavior is to catch as many warnings as possible during development, but
-    not give problems for packaging of released versions.
-
-    """
-    excludes = []
-
-    def _show_system_info(self):
-        nose = import_nose()
-
-        import pandas
-        print("pandas version %s" % pandas.__version__)
-        import numpy
-        print("numpy version %s" % numpy.__version__)
-        pddir = os.path.dirname(pandas.__file__)
-        print("pandas is installed in %s" % pddir)
-
-        pyversion = sys.version.replace('\n', '')
-        print("Python version %s" % pyversion)
-        print("nose version %d.%d.%d" % nose.__versioninfo__)
-
-    def _get_custom_doctester(self):
-        """ Return instantiated plugin for doctests
-
-        Allows subclassing of this class to override doctester
-
-        A return value of None means use the nose builtin doctest plugin
-        """
-        return None
-
-    def _test_argv(self, label, verbose, extra_argv):
-        """
-        Generate argv for nosetest command
-
-        Parameters
-        ----------
-        label : {'fast', 'full', '', attribute identifier}, optional
-            see ``test`` docstring
-        verbose : int, optional
-            Verbosity value for test outputs, in the range 1-10. Default is 1.
-        extra_argv : list, optional
-            List with any extra arguments to pass to nosetests.
-
-        Returns
-        -------
-        argv : list
-            command line arguments that will be passed to nose
-        """
-
-        argv = [__file__, self.package_path]
-        if label and label != 'full':
-            if not isinstance(label, string_types):
-                raise TypeError('Selection label should be a string')
-            if label == 'fast':
-                label = 'not slow and not network and not disabled'
-            argv += ['-A', label]
-        argv += ['--verbosity', str(verbose)]
-
-        # When installing with setuptools, and also in some other cases, the
-        # test_*.py files end up marked +x executable. Nose, by default, does
-        # not run files marked with +x as they might be scripts. However, in
-        # our case nose only looks for test_*.py files under the package
-        # directory, which should be safe.
-        argv += ['--exe']
-
-        if extra_argv:
-            argv += extra_argv
-        return argv
-
-    def test(self, label='fast', verbose=1, extra_argv=None,
-             doctests=False, coverage=False, raise_warnings=None):
-        """
-        Run tests for module using nose.
-
-        Parameters
-        ----------
-        label : {'fast', 'full', '', attribute identifier}, optional
-            Identifies the tests to run. This can be a string to pass to
-            the nosetests executable with the '-A' option, or one of several
-            special values.  Special values are:
-
-            * 'fast' - the default - which corresponds to the ``nosetests -A``
-              option of 'not slow'.
-            * 'full' - fast (as above) and slow tests as in the
-              'no -A' option to nosetests - this is the same as ''.
-            * None or '' - run all tests.
-            * attribute_identifier - string passed directly to nosetests
-              as '-A'.
-
-        verbose : int, optional
-            Verbosity value for test outputs, in the range 1-10. Default is 1.
-        extra_argv : list, optional
-            List with any extra arguments to pass to nosetests.
-        doctests : bool, optional
-            If True, run doctests in module. Default is False.
-        coverage : bool, optional
-            If True, report coverage of NumPy code. Default is False.
-            (This requires the `coverage module
-            <http://nedbatchelder.com/code/modules/coverage.html>`_).
-        raise_warnings : str or sequence of warnings, optional
-            This specifies which warnings to configure as 'raise' instead
-            of 'warn' during the test execution.  Valid strings are:
-
-            - 'develop' : equals ``(DeprecationWarning, RuntimeWarning)``
-            - 'release' : equals ``()``, don't raise on any warnings.
-
-        Returns
-        -------
-        result : object
-            Returns the result of running the tests as a
-            ``nose.result.TextTestResult`` object.
-
-        """
-
-        # cap verbosity at 3 because nose becomes *very* verbose beyond that
-        verbose = min(verbose, 3)
-
-        if doctests:
-            print("Running unit tests and doctests for %s" % self.package_name)
-        else:
-            print("Running unit tests for %s" % self.package_name)
-
-        self._show_system_info()
-
-        # reset doctest state on every run
-        import doctest
-        doctest.master = None
-
-        if raise_warnings is None:
-
-            # default based on if we are released
-            from pandas import __version__
-            from distutils.version import StrictVersion
-            try:
-                StrictVersion(__version__)
-                raise_warnings = 'release'
-            except ValueError:
-                raise_warnings = 'develop'
-
-        _warn_opts = dict(develop=(DeprecationWarning, RuntimeWarning),
-                          release=())
-        if isinstance(raise_warnings, string_types):
-            raise_warnings = _warn_opts[raise_warnings]
-
-        with warnings.catch_warnings():
-
-            if len(raise_warnings):
-
-                # Reset the warning filters to the default state,
-                # so that running the tests is more repeatable.
-                warnings.resetwarnings()
-                # Set all warnings to 'warn', this is because the default
-                # 'once' has the bad property of possibly shadowing later
-                # warnings.
-                warnings.filterwarnings('always')
-                # Force the requested warnings to raise
-                for warningtype in raise_warnings:
-                    warnings.filterwarnings('error', category=warningtype)
-                # Filter out annoying import messages.
-                warnings.filterwarnings("ignore", category=FutureWarning)
-
-            from numpy.testing.noseclasses import NumpyTestProgram
-            argv, plugins = self.prepare_test_args(
-                label, verbose, extra_argv, doctests, coverage)
-            t = NumpyTestProgram(argv=argv, exit=False, plugins=plugins)
-
-        return t.result
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 6b2e920a2..336a766fd 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -19,7 +19,8 @@ from contextlib import contextmanager
 from distutils.version import LooseVersion
 
 from numpy.random import randn, rand
-from numpy.testing.decorators import slow     # noqa
+# from numpy.testing.decorators import slow     # noqa
+import pytest
 import numpy as np
 
 import pandas as pd
@@ -2549,9 +2550,7 @@ def assert_produces_warning(expected_warning=Warning, filter_level="always",
                                     % extra_warnings)
 
 
-def disabled(t):
-    t.disabled = True
-    return t
+slow = pytest.mark.slow
 
 
 class RNGContext(object):
diff --git a/setup.cfg b/setup.cfg
index f69e256b8..143470f7e 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -19,3 +19,9 @@ based_on_style = pep8
 split_before_named_assigns = false
 split_penalty_after_opening_bracket = 1000000
 split_penalty_logical_operator = 30
+
+[tool:pytest]
+# TODO: Change all yield-based (nose-style) fixutures to pytest fixtures
+# Silencing the warning until then
+addopts = --disable-pytest-warnings
+testpaths = pandas
diff --git a/test.bat b/test.bat
index 16aa6c910..7f9244abb 100644
--- a/test.bat
+++ b/test.bat
@@ -1,3 +1,4 @@
 :: test on windows
 
-nosetests --exe -A "not slow and not network and not disabled" pandas %*
+:: nosetests --exe -A "not slow and not network and not disabled" pandas %*
+pytest pandas
diff --git a/test.sh b/test.sh
index 4a9ffd7be..23c7ff52d 100755
--- a/test.sh
+++ b/test.sh
@@ -1,11 +1,4 @@
 #!/bin/sh
 command -v coverage >/dev/null && coverage erase
 command -v python-coverage >/dev/null && python-coverage erase
-# nosetests pandas/tests/test_index.py --with-coverage --cover-package=pandas.core --pdb-failure --pdb
-#nosetests -w pandas --with-coverage --cover-package=pandas --pdb-failure --pdb #--cover-inclusive
-#nosetests -A "not slow" -w pandas/tseries --with-coverage --cover-package=pandas.tseries $* #--cover-inclusive
-nosetests -w pandas --with-coverage --cover-package=pandas $*
-# nosetests -w pandas/io --with-coverage --cover-package=pandas.io --pdb-failure --pdb
-# nosetests -w pandas/core --with-coverage --cover-package=pandas.core --pdb-failure --pdb
-# nosetests -w pandas/stats --with-coverage --cover-package=pandas.stats
-# coverage run runtests.py
+pytest pandas --cov=pandas
diff --git a/test_fast.sh b/test_fast.sh
index b390705f9..0b394cffa 100755
--- a/test_fast.sh
+++ b/test_fast.sh
@@ -1 +1,2 @@
-nosetests -A "not slow and not network" pandas --with-id $*
+# nosetests -A "not slow and not network" pandas --with-id $*
+pytest pandas --skip-slow
diff --git a/test_multi.sh b/test_multi.sh
deleted file mode 100755
index 5d77945c6..000000000
--- a/test_multi.sh
+++ /dev/null
@@ -1 +0,0 @@
-nosetests -A "not slow and not network" pandas --processes=4 $*
diff --git a/test_rebuild.sh b/test_rebuild.sh
index d3710c5ff..65aa10988 100755
--- a/test_rebuild.sh
+++ b/test_rebuild.sh
@@ -3,10 +3,4 @@
 python setup.py clean
 python setup.py build_ext --inplace
 coverage erase
-# nosetests pandas/tests/test_index.py --with-coverage --cover-package=pandas.core --pdb-failure --pdb
-#nosetests -w pandas --with-coverage --cover-package=pandas --pdb-failure --pdb #--cover-inclusive
-nosetests -w pandas --with-coverage --cover-package=pandas $* #--cover-inclusive
-# nosetests -w pandas/io --with-coverage --cover-package=pandas.io --pdb-failure --pdb
-# nosetests -w pandas/core --with-coverage --cover-package=pandas.core --pdb-failure --pdb
-# nosetests -w pandas/stats --with-coverage --cover-package=pandas.stats
-# coverage run runtests.py
+pytest pandas --cov=pandas
diff --git a/tox.ini b/tox.ini
index 5d6c89753..85c5d90fd 100644
--- a/tox.ini
+++ b/tox.ini
@@ -10,6 +10,7 @@ envlist = py27, py34, py35
 deps =
     cython
     nose
+    pytest
     pytz>=2011k
     python-dateutil
     beautifulsoup4
@@ -26,7 +27,7 @@ changedir = {envdir}
 
 commands =
     # TODO:  --exe because of GH #761
-    {envbindir}/nosetests --exe pandas {posargs:-A "not network and not disabled"}
+    {envbindir}/pytest pandas {posargs:-A "not network and not disabled"}
     # cleanup the temp. build dir created by the tox build
 #    /bin/rm -rf {toxinidir}/build
 
@@ -63,18 +64,18 @@ usedevelop = True
 deps =
     {[testenv]deps}
     openpyxl<2.0.0
-commands = {envbindir}/nosetests {toxinidir}/pandas/io/tests/test_excel.py
+commands = {envbindir}/pytest {toxinidir}/pandas/io/tests/test_excel.py
 
 [testenv:openpyxl20]
 usedevelop = True
 deps =
     {[testenv]deps}
     openpyxl<2.2.0
-commands = {envbindir}/nosetests {posargs} {toxinidir}/pandas/io/tests/test_excel.py
+commands = {envbindir}/pytest {posargs} {toxinidir}/pandas/io/tests/test_excel.py
 
 [testenv:openpyxl22]
 usedevelop = True
 deps =
     {[testenv]deps}
     openpyxl>=2.2.0
-commands = {envbindir}/nosetests {posargs} {toxinidir}/pandas/io/tests/test_excel.py
+commands = {envbindir}/pytest {posargs} {toxinidir}/pandas/io/tests/test_excel.py
