commit 81bf29fb5fea7b0fc94ef410cfbf5228eb633116
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Dec 28 09:10:13 2012 -0500

    ENH: return DatetimeIndex with metadata from unique. close #2563

diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 07dadc66c..1ff675bbe 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -770,6 +770,18 @@ class DatetimeIndex(Int64Index):
         taken = self.values.take(indices, axis=axis)
         return self._simple_new(taken, self.name, None, self.tz)
 
+    def unique(self):
+        """
+        Index.unique with handling for DatetimeIndex metadata
+
+        Returns
+        -------
+        result : DatetimeIndex
+        """
+        result = Int64Index.unique(self)
+        return DatetimeIndex._simple_new(result, tz=self.tz,
+                                         name=self.name)
+
     def union(self, other):
         """
         Specialized union for DatetimeIndex objects. If combine
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 855bbd024..3d09c7942 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -63,6 +63,15 @@ class TestTimeSeriesDuplicates(unittest.TestCase):
         uniques = self.dups.index.unique()
         self.assert_(uniques.dtype == 'M8[ns]') # sanity
 
+        # #2563
+        self.assertTrue(isinstance(uniques, DatetimeIndex))
+
+        dups_local = self.dups.index.tz_localize('US/Eastern')
+        dups_local.name = 'foo'
+        result = dups_local.unique()
+        self.assertTrue(result.tz is not None)
+        self.assertEquals(result.name, 'foo')
+
     def test_index_dupes_contains(self):
         d = datetime(2011, 12, 5, 20, 30)
         ix=DatetimeIndex([d,d])
diff --git a/vb_suite/timeseries.py b/vb_suite/timeseries.py
index adac4a935..733deb8e7 100644
--- a/vb_suite/timeseries.py
+++ b/vb_suite/timeseries.py
@@ -204,3 +204,11 @@ df = DataFrame(np.random.randn(len(rng), 2), rng, tz='US/Eastern')
 
 dti_reset_index_tz = \
     Benchmark('df.reset_index()', setup, start_date=datetime(2012,9,1))
+
+setup = common_setup + """
+rng = date_range('1/1/2000', periods=10000, freq='T')
+index = rng.repeat(10)
+"""
+
+datetimeindex_unique = Benchmark('index.unique()', setup,
+                                 date=datetime(2012, 7, 1))
