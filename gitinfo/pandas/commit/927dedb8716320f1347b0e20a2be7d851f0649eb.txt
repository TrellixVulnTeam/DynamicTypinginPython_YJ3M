commit 927dedb8716320f1347b0e20a2be7d851f0649eb
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Tue Mar 31 06:39:47 2020 -0700

    REF: .get tests (#33164)

diff --git a/pandas/tests/frame/indexing/test_get.py b/pandas/tests/frame/indexing/test_get.py
new file mode 100644
index 000000000..5f2651eec
--- /dev/null
+++ b/pandas/tests/frame/indexing/test_get.py
@@ -0,0 +1,27 @@
+import pytest
+
+from pandas import DataFrame
+import pandas._testing as tm
+
+
+class TestGet:
+    def test_get(self, float_frame):
+        b = float_frame.get("B")
+        tm.assert_series_equal(b, float_frame["B"])
+
+        assert float_frame.get("foo") is None
+        tm.assert_series_equal(
+            float_frame.get("foo", float_frame["B"]), float_frame["B"]
+        )
+
+    @pytest.mark.parametrize(
+        "df",
+        [
+            DataFrame(),
+            DataFrame(columns=list("AB")),
+            DataFrame(columns=list("AB"), index=range(3)),
+        ],
+    )
+    def test_get_none(self, df):
+        # see gh-5652
+        assert df.get(None) is None
diff --git a/pandas/tests/frame/indexing/test_indexing.py b/pandas/tests/frame/indexing/test_indexing.py
index 4fa5e4196..2498bfbaa 100644
--- a/pandas/tests/frame/indexing/test_indexing.py
+++ b/pandas/tests/frame/indexing/test_indexing.py
@@ -31,29 +31,6 @@ from pandas.tseries.offsets import BDay
 _slice_msg = "slice indices must be integers or None or have an __index__ method"
 
 
-class TestGet:
-    def test_get(self, float_frame):
-        b = float_frame.get("B")
-        tm.assert_series_equal(b, float_frame["B"])
-
-        assert float_frame.get("foo") is None
-        tm.assert_series_equal(
-            float_frame.get("foo", float_frame["B"]), float_frame["B"]
-        )
-
-    @pytest.mark.parametrize(
-        "df",
-        [
-            DataFrame(),
-            DataFrame(columns=list("AB")),
-            DataFrame(columns=list("AB"), index=range(3)),
-        ],
-    )
-    def test_get_none(self, df):
-        # see gh-5652
-        assert df.get(None) is None
-
-
 class TestDataFrameIndexing:
     def test_getitem(self, float_frame):
         # Slicing
diff --git a/pandas/tests/series/indexing/test_get.py b/pandas/tests/series/indexing/test_get.py
index 5847141a4..3371c47fa 100644
--- a/pandas/tests/series/indexing/test_get.py
+++ b/pandas/tests/series/indexing/test_get.py
@@ -1,7 +1,9 @@
 import numpy as np
+import pytest
 
 import pandas as pd
 from pandas import Series
+import pandas._testing as tm
 
 
 def test_get():
@@ -149,3 +151,44 @@ def test_get_with_default():
             for other in others:
                 assert s.get(other, "z") == "z"
                 assert s.get(other, other) == other
+
+
+@pytest.mark.parametrize(
+    "arr",
+    [np.random.randn(10), tm.makeDateIndex(10, name="a").tz_localize(tz="US/Eastern")],
+)
+def test_get2(arr):
+    # TODO: better name, possibly split
+    # GH#21260
+    ser = Series(arr, index=[2 * i for i in range(len(arr))])
+    assert ser.get(4) == ser.iloc[2]
+
+    result = ser.get([4, 6])
+    expected = ser.iloc[[2, 3]]
+    tm.assert_series_equal(result, expected)
+
+    result = ser.get(slice(2))
+    expected = ser.iloc[[0, 1]]
+    tm.assert_series_equal(result, expected)
+
+    assert ser.get(-1) is None
+    assert ser.get(ser.index.max() + 1) is None
+
+    ser = Series(arr[:6], index=list("abcdef"))
+    assert ser.get("c") == ser.iloc[2]
+
+    result = ser.get(slice("b", "d"))
+    expected = ser.iloc[[1, 2, 3]]
+    tm.assert_series_equal(result, expected)
+
+    result = ser.get("Z")
+    assert result is None
+
+    assert ser.get(4) == ser.iloc[4]
+    assert ser.get(-1) == ser.iloc[-1]
+    assert ser.get(len(ser)) is None
+
+    # GH#21257
+    ser = Series(arr)
+    ser2 = ser[::2]
+    assert ser2.get(1) is None
diff --git a/pandas/tests/series/indexing/test_indexing.py b/pandas/tests/series/indexing/test_indexing.py
index 5b3786e1a..232b2a61f 100644
--- a/pandas/tests/series/indexing/test_indexing.py
+++ b/pandas/tests/series/indexing/test_indexing.py
@@ -188,46 +188,6 @@ def test_getitem_box_float64(datetime_series):
     assert isinstance(value, np.float64)
 
 
-@pytest.mark.parametrize(
-    "arr",
-    [np.random.randn(10), tm.makeDateIndex(10, name="a").tz_localize(tz="US/Eastern")],
-)
-def test_get(arr):
-    # GH 21260
-    s = Series(arr, index=[2 * i for i in range(len(arr))])
-    assert s.get(4) == s.iloc[2]
-
-    result = s.get([4, 6])
-    expected = s.iloc[[2, 3]]
-    tm.assert_series_equal(result, expected)
-
-    result = s.get(slice(2))
-    expected = s.iloc[[0, 1]]
-    tm.assert_series_equal(result, expected)
-
-    assert s.get(-1) is None
-    assert s.get(s.index.max() + 1) is None
-
-    s = Series(arr[:6], index=list("abcdef"))
-    assert s.get("c") == s.iloc[2]
-
-    result = s.get(slice("b", "d"))
-    expected = s.iloc[[1, 2, 3]]
-    tm.assert_series_equal(result, expected)
-
-    result = s.get("Z")
-    assert result is None
-
-    assert s.get(4) == s.iloc[4]
-    assert s.get(-1) == s.iloc[-1]
-    assert s.get(len(s)) is None
-
-    # GH 21257
-    s = pd.Series(arr)
-    s2 = s[::2]
-    assert s2.get(1) is None
-
-
 def test_series_box_timestamp():
     rng = pd.date_range("20090415", "20090519", freq="B")
     ser = Series(rng)
