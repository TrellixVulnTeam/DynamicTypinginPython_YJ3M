commit 37a1e1384aaf67539e283313f29182f9f6d22585
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Aug 17 13:29:50 2011 -0400

    BUG: tuples could not be inserted as new column keys in DataFrame

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 113da4316..c5d4987bb 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -832,7 +832,7 @@ class DataFrame(NDFrame):
         value : int, Series, or array-like
         """
         value = self._sanitize_column(value)
-        value = np.atleast_2d(value) # is this a hack?
+        value = np.atleast_2d(value)
         self._data.insert(loc, column, value)
 
     def _set_item(self, key, value):
@@ -846,7 +846,7 @@ class DataFrame(NDFrame):
         ensure homogeneity.
         """
         value = self._sanitize_column(value)
-        value = np.atleast_2d(value) # is this a hack?
+        value = np.atleast_2d(value)
         self._data.set(key, value)
 
         try:
diff --git a/pandas/core/index.py b/pandas/core/index.py
index d867fecf5..628943fd1 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -311,6 +311,11 @@ class Index(np.ndarray):
         arr = np.delete(np.asarray(self), loc)
         return Index(arr)
 
+    def insert(self, loc, item):
+        new_index = list(self)
+        new_index.insert(loc, item)
+        return Index(new_index)
+
     def drop(self, labels):
         labels = np.asarray(list(labels), dtype=object)
         indexer, mask = self.get_indexer(labels)
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 5d4ac48fd..6756a355b 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -162,11 +162,6 @@ class Block(object):
         new_values.flat[mask] = value
         return make_block(new_values, self.items, self.ref_items)
 
-def _insert_into_items(items, item, loc):
-    items = np.asarray(items)
-    new_items = np.insert(items, loc, item)
-    return Index(new_items)
-
 def _cast_if_bool_int(values):
     if issubclass(values.dtype.type, np.int_):
         values = values.astype(float)
@@ -506,7 +501,7 @@ class BlockManager(object):
         if item in self.items:
             raise Exception('cannot insert %s, already exists' % item)
 
-        new_items = _insert_into_items(self.items, item, loc)
+        new_items = self.items.insert(loc, item)
         self.set_items_norename(new_items)
         # new block
         self._add_new_block(item, value)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index f77ea3529..bea5bb812 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -101,6 +101,10 @@ class CheckIndexing(object):
         self.assertEqual(smaller['col10'].dtype, np.object_)
         self.assert_((smaller['col10'] == ['1', '2']).all())
 
+    def test_setitem_tuple(self):
+        self.frame['A', 'B'] = self.frame['A']
+        assert_series_equal(self.frame['A', 'B'], self.frame['A'])
+
     def test_setitem_always_copy(self):
         s = self.frame['A'].copy()
         self.frame['E'] = s
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 16652e036..4f4889779 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -308,6 +308,16 @@ class TestGroupBy(unittest.TestCase):
         assert_frame_equal(agged.ix[:, ['C', 'D']],
                            expected.ix[:, ['C', 'D']])
 
+        # some "groups" with no data
+        df = DataFrame({'v1' : np.random.randn(6),
+                        'v2' : np.random.randn(6),
+                        'k1' : np.array(['b', 'b', 'b', 'a', 'a', 'a']),
+                        'k2' : np.array(['1', '1', '1', '2', '2', '2'])},
+                       index=['one', 'two', 'three', 'four', 'five', 'six'])
+        # only verify that it works for now
+        grouped = df.groupby(['k1', 'k2'])
+        grouped.agg(np.sum)
+
     def test_groupby_multiple_columns(self):
         data = self.df
         grouped = data.groupby(['A', 'B'])
