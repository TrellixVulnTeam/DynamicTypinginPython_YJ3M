commit 8bf6852d7a93a7fb46ad05c279f3e9b3ecaa6792
Author: Jeff Reback <jeff@reback.net>
Date:   Mon Jan 9 12:52:23 2017 -0500

    TST/BLD: test 3.6 on appveyor (#15088)
    
    CLN: clean up appveyor.yml a bit

diff --git a/appveyor.yml b/appveyor.yml
index a8e5218ab..33b8be57e 100644
--- a/appveyor.yml
+++ b/appveyor.yml
@@ -17,20 +17,19 @@ environment:
 
   matrix:
 
-    # disable python 3.4 ATM
-    #- PYTHON: "C:\\Python34_64"
-    #  PYTHON_VERSION: "3.4"
-    #  PYTHON_ARCH: "64"
-    #  CONDA_PY: "34"
-    #  CONDA_NPY: "19"
-
-    - PYTHON: "C:\\Python27_64"
+    - CONDA_ROOT: "C:\\Miniconda3.5_64"
+      PYTHON_VERSION: "3.6"
+      PYTHON_ARCH: "64"
+      CONDA_PY: "36"
+      CONDA_NPY: "111"
+
+    - CONDA_ROOT: "C:\\Miniconda3.5_64"
       PYTHON_VERSION: "2.7"
       PYTHON_ARCH: "64"
       CONDA_PY: "27"
       CONDA_NPY: "110"
 
-    - PYTHON: "C:\\Python35_64"
+    - CONDA_ROOT: "C:\\Miniconda3.5_64"
       PYTHON_VERSION: "3.5"
       PYTHON_ARCH: "64"
       CONDA_PY: "35"
@@ -45,9 +44,6 @@ platform:
 # all our python builds have to happen in tests_script...
 build: false
 
-init:
-  - "ECHO %PYTHON_VERSION% %PYTHON%"
-
 install:
   # cancel older builds for the same PR
   - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
@@ -58,7 +54,7 @@ install:
   # this installs the appropriate Miniconda (Py2/Py3, 32/64 bit)
   # updates conda & installs: conda-build jinja2 anaconda-client
   - powershell .\ci\install.ps1
-  - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%
+  - SET PATH=%CONDA_ROOT%;%CONDA_ROOT%\Scripts;%PATH%
   - echo "install"
   - cd
   - ls -ltr
@@ -70,13 +66,6 @@ install:
   # install our build environment
   - cmd: conda config --set show_channel_urls true --set always_yes true --set changeps1 false
   - cmd: conda update -q conda
-
-  # fix conda-build version
-  # https://github.com/conda/conda-build/issues/1001
-  # disabling 3.4 as windows complains upon compiling byte
-  # code
-
-  - cmd: conda install conda-build=1.21.7
   - cmd: conda config --set ssl_verify false
 
   # add the pandas channel *before* defaults to have defaults take priority
@@ -84,7 +73,6 @@ install:
   - cmd: conda config --add channels pandas
   - cmd: conda config --remove channels defaults
   - cmd: conda config --add channels defaults
-  - cmd: conda install anaconda-client
 
   # this is now the downloaded conda...
   - cmd: conda info -a
@@ -98,6 +86,8 @@ install:
   - SET REQ=ci\requirements-%PYTHON_VERSION%-%PYTHON_ARCH%.run
   - cmd: echo "installing requirements from %REQ%"
   - cmd: conda install -n pandas -q --file=%REQ%
+  - cmd: conda list -n pandas
+  - cmd: echo "installing requirements from %REQ% - done"
   - ps: conda install -n pandas (conda build ci\appveyor.recipe -q --output)
 
 test_script:
diff --git a/ci/appveyor.recipe/meta.yaml b/ci/appveyor.recipe/meta.yaml
index 6bf0a14bc..777fd9d68 100644
--- a/ci/appveyor.recipe/meta.yaml
+++ b/ci/appveyor.recipe/meta.yaml
@@ -1,6 +1,6 @@
 package:
     name: pandas
-    version: 0.18.1
+    version: 0.20.0
 
 build:
     number: {{environ.get('APPVEYOR_BUILD_NUMBER', 0)}}  # [win]
diff --git a/ci/install.ps1 b/ci/install.ps1
index 16c92dc76..64ec7f818 100644
--- a/ci/install.ps1
+++ b/ci/install.ps1
@@ -84,9 +84,9 @@ function UpdateConda ($python_home) {
 
 
 function main () {
-    InstallMiniconda $env:PYTHON_VERSION $env:PYTHON_ARCH $env:PYTHON
-    UpdateConda $env:PYTHON
-    InstallCondaPackages $env:PYTHON "conda-build jinja2 anaconda-client"
+    InstallMiniconda "3.5" $env:PYTHON_ARCH $env:CONDA_ROOT
+    UpdateConda $env:CONDA_ROOT
+    InstallCondaPackages $env:CONDA_ROOT "conda-build jinja2 anaconda-client"
 }
 
 main
diff --git a/ci/install_appveyor.ps1 b/ci/install_appveyor.ps1
deleted file mode 100644
index a022995dc..000000000
--- a/ci/install_appveyor.ps1
+++ /dev/null
@@ -1,133 +0,0 @@
-# Sample script to install Miniconda under Windows
-# Authors: Olivier Grisel, Jonathan Helmus and Kyle Kastner, Robert McGibbon
-# License: CC0 1.0 Universal: http://creativecommons.org/publicdomain/zero/1.0/
-
-$MINICONDA_URL = "http://repo.continuum.io/miniconda/"
-
-
-function DownloadMiniconda ($python_version, $platform_suffix) {
-    $webclient = New-Object System.Net.WebClient
-    if ($python_version -match "3.4") {
-        $filename = "Miniconda3-3.5.5-Windows-" + $platform_suffix + ".exe"
-    } else {
-        $filename = "Miniconda-3.5.5-Windows-" + $platform_suffix + ".exe"
-    }
-    $url = $MINICONDA_URL + $filename
-
-    $basedir = $pwd.Path + "\"
-    $filepath = $basedir + $filename
-    if (Test-Path $filename) {
-        Write-Host "Reusing" $filepath
-        return $filepath
-    }
-
-    # Download and retry up to 3 times in case of network transient errors.
-    Write-Host "Downloading" $filename "from" $url
-    $retry_attempts = 2
-    for($i=0; $i -lt $retry_attempts; $i++){
-        try {
-            $webclient.DownloadFile($url, $filepath)
-            break
-        }
-        Catch [Exception]{
-            Start-Sleep 1
-        }
-   }
-   if (Test-Path $filepath) {
-       Write-Host "File saved at" $filepath
-   } else {
-       # Retry once to get the error message if any at the last try
-       $webclient.DownloadFile($url, $filepath)
-   }
-   return $filepath
-}
-
-function Start-Executable {
-   param(
-     [String] $FilePath,
-     [String[]] $ArgumentList
-   )
-   $OFS = " "
-   $process = New-Object System.Diagnostics.Process
-   $process.StartInfo.FileName = $FilePath
-   $process.StartInfo.Arguments = $ArgumentList
-   $process.StartInfo.UseShellExecute = $false
-   $process.StartInfo.RedirectStandardOutput = $true
-   if ( $process.Start() ) {
-     $output = $process.StandardOutput.ReadToEnd() `
-       -replace "\r\n$",""
-     if ( $output ) {
-       if ( $output.Contains("`r`n") ) {
-         $output -split "`r`n"
-       }
-       elseif ( $output.Contains("`n") ) {
-         $output -split "`n"
-       }
-       else {
-         $output
-       }
-     }
-     $process.WaitForExit()
-     & "$Env:SystemRoot\system32\cmd.exe" `
-       /c exit $process.ExitCode
-   }
- }
-
-function InstallMiniconda ($python_version, $architecture, $python_home) {
-    Write-Host "Installing Python" $python_version "for" $architecture "bit architecture to" $python_home
-    if (Test-Path $python_home) {
-        Write-Host $python_home "already exists, skipping."
-        return $false
-    }
-    if ($architecture -match "32") {
-        $platform_suffix = "x86"
-    } else {
-        $platform_suffix = "x86_64"
-    }
-
-    $filepath = DownloadMiniconda $python_version $platform_suffix
-    Write-Host "Installing" $filepath "to" $python_home
-    $install_log = $python_home + ".log"
-    $args = "/S /D=$python_home"
-    Write-Host $filepath $args
-    Start-Process -FilePath $filepath -ArgumentList $args -Wait
-    if (Test-Path $python_home) {
-        Write-Host "Python $python_version ($architecture) installation complete"
-    } else {
-        Write-Host "Failed to install Python in $python_home"
-        Get-Content -Path $install_log
-        Exit 1
-    }
-}
-
-
-function InstallCondaPackages ($python_home, $spec) {
-    $conda_path = $python_home + "\Scripts\conda.exe"
-    $args = "install --yes --quiet " + $spec
-    Write-Host ("conda " + $args)
-    Start-Executable -FilePath "$conda_path" -ArgumentList $args
-}
-function InstallCondaPackagesFromFile ($python_home, $ver, $arch) {
-    $conda_path = $python_home + "\Scripts\conda.exe"
-    $args = "install --yes --quiet --file " + $env:APPVEYOR_BUILD_FOLDER + "\ci\requirements-" + $ver + "_" + $arch + ".txt"
-    Write-Host ("conda " + $args)
-    Start-Executable -FilePath "$conda_path" -ArgumentList $args
-}
-
-function UpdateConda ($python_home) {
-    $conda_path = $python_home + "\Scripts\conda.exe"
-    Write-Host "Updating conda..."
-    $args = "update --yes conda"
-    Write-Host $conda_path $args
-    Start-Process -FilePath "$conda_path" -ArgumentList $args -Wait
-}
-
-
-function main () {
-    InstallMiniconda $env:PYTHON_VERSION $env:PYTHON_ARCH $env:PYTHON
-    UpdateConda $env:PYTHON
-    InstallCondaPackages $env:PYTHON "pip setuptools nose"
-    InstallCondaPackagesFromFile $env:PYTHON $env:PYTHON_VERSION $env:PYTHON_ARCH
-}
-
-main
\ No newline at end of file
diff --git a/ci/requirements-3.6-64.run b/ci/requirements-3.6-64.run
new file mode 100644
index 000000000..58ba10350
--- /dev/null
+++ b/ci/requirements-3.6-64.run
@@ -0,0 +1,13 @@
+python-dateutil
+pytz
+numpy
+openpyxl
+xlsxwriter
+xlrd
+#xlwt
+scipy
+feather-format
+numexpr
+pytables
+matplotlib
+blosc
diff --git a/pandas/io/tests/test_excel.py b/pandas/io/tests/test_excel.py
index 8db0e6202..4b8e7714a 100644
--- a/pandas/io/tests/test_excel.py
+++ b/pandas/io/tests/test_excel.py
@@ -448,6 +448,7 @@ class ReadingTestsBase(SharedItems):
 
     # GH 12292 : error when read one empty column from excel file
     def test_read_one_empty_col_no_header(self):
+        _skip_if_no_xlwt()
         df = pd.DataFrame(
             [["", 1, 100],
              ["", 2, 200],
@@ -504,6 +505,7 @@ class ReadingTestsBase(SharedItems):
         tm.assert_frame_equal(actual_header_zero, expected_header_zero)
 
     def test_set_column_names_in_parameter(self):
+        _skip_if_no_xlwt()
         # GH 12870 : pass down column names associated with
         # keyword argument names
         refdf = pd.DataFrame([[1, 'foo'], [2, 'bar'],
