commit af5ffc5d86bda5e2225745e34017497f68eb64cc
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Jan 26 05:28:52 2010 +0000

    edits to docs. unit tests
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@121 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/doc/conf.py b/doc/conf.py
deleted file mode 100644
index bd4e86939..000000000
--- a/doc/conf.py
+++ /dev/null
@@ -1,194 +0,0 @@
-# -*- coding: utf-8 -*-
-#
-# pandas documentation build configuration file, created by
-# sphinx-quickstart on Thu Dec 03 16:49:32 2009.
-#
-# This file is execfile()d with the current directory set to its containing dir.
-#
-# Note that not all possible configuration values are present in this
-# autogenerated file.
-#
-# All configuration values have a default; values that are commented out
-# serve to show the default.
-
-import sys, os
-
-# If extensions (or modules to document with autodoc) are in another directory,
-# add these directories to sys.path here. If the directory is relative to the
-# documentation root, use os.path.abspath to make it absolute, like shown here.
-#sys.path.append(os.path.abspath('.'))
-
-# -- General configuration -----------------------------------------------------
-
-# Add any Sphinx extension module names here, as strings. They can be extensions
-# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
-extensions = ['sphinx.ext.autodoc', 'sphinx.ext.pngmath']
-
-# Add any paths that contain templates here, relative to this directory.
-templates_path = ['_templates']
-
-# The suffix of source filenames.
-source_suffix = '.rst'
-
-# The encoding of source files.
-#source_encoding = 'utf-8'
-
-# The master toctree document.
-master_doc = 'index'
-
-# General information about the project.
-project = u'pandas'
-copyright = u'2009, AQR Capital Management, LLC'
-
-# The version info for the project you're documenting, acts as replacement for
-# |version| and |release|, also used in various other places throughout the
-# built documents.
-#
-# The short X.Y version.
-version = '0.1'
-# The full version, including alpha/beta/rc tags.
-release = '0.1'
-
-# The language for content autogenerated by Sphinx. Refer to documentation
-# for a list of supported languages.
-#language = None
-
-# There are two options for replacing |today|: either, you set today to some
-# non-false value, then it is used:
-#today = ''
-# Else, today_fmt is used as the format for a strftime call.
-#today_fmt = '%B %d, %Y'
-
-# List of documents that shouldn't be included in the build.
-#unused_docs = []
-
-# List of directories, relative to source directory, that shouldn't be searched
-# for source files.
-exclude_trees = ['_build']
-
-# The reST default role (used for this markup: `text`) to use for all documents.
-#default_role = None
-
-# If true, '()' will be appended to :func: etc. cross-reference text.
-#add_function_parentheses = True
-
-# If true, the current module name will be prepended to all description
-# unit titles (such as .. function::).
-#add_module_names = True
-
-# If true, sectionauthor and moduleauthor directives will be shown in the
-# output. They are ignored by default.
-#show_authors = False
-
-# The name of the Pygments (syntax highlighting) style to use.
-pygments_style = 'sphinx'
-
-# A list of ignored prefixes for module index sorting.
-#modindex_common_prefix = []
-
-
-# -- Options for HTML output ---------------------------------------------------
-
-# The theme to use for HTML and HTML Help pages.  Major themes that come with
-# Sphinx are currently 'default' and 'sphinxdoc'.
-html_theme = 'default'
-
-# Theme options are theme-specific and customize the look and feel of a theme
-# further.  For a list of options available for each theme, see the
-# documentation.
-#html_theme_options = {}
-
-# Add any paths that contain custom themes here, relative to this directory.
-#html_theme_path = []
-
-# The name for this set of Sphinx documents.  If None, it defaults to
-# "<project> v<release> documentation".
-#html_title = None
-
-# A shorter title for the navigation bar.  Default is the same as html_title.
-#html_short_title = None
-
-# The name of an image file (relative to this directory) to place at the top
-# of the sidebar.
-#html_logo = None
-
-# The name of an image file (within the static path) to use as favicon of the
-# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
-# pixels large.
-#html_favicon = None
-
-# Add any paths that contain custom static files (such as style sheets) here,
-# relative to this directory. They are copied after the builtin static files,
-# so a file named "default.css" will overwrite the builtin "default.css".
-html_static_path = ['_static']
-
-# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
-# using the given strftime format.
-#html_last_updated_fmt = '%b %d, %Y'
-
-# If true, SmartyPants will be used to convert quotes and dashes to
-# typographically correct entities.
-#html_use_smartypants = True
-
-# Custom sidebar templates, maps document names to template names.
-#html_sidebars = {}
-
-# Additional templates that should be rendered to pages, maps page names to
-# template names.
-#html_additional_pages = {}
-
-# If false, no module index is generated.
-#html_use_modindex = True
-
-# If false, no index is generated.
-#html_use_index = True
-
-# If true, the index is split into individual pages for each letter.
-#html_split_index = False
-
-# If true, links to the reST sources are added to the pages.
-#html_show_sourcelink = True
-
-# If true, an OpenSearch description file will be output, and all pages will
-# contain a <link> tag referring to it.  The value of this option must be the
-# base URL from which the finished HTML is served.
-#html_use_opensearch = ''
-
-# If nonempty, this is the file name suffix for HTML files (e.g. ".xhtml").
-#html_file_suffix = ''
-
-# Output file base name for HTML help builder.
-htmlhelp_basename = 'pandasdoc'
-
-
-# -- Options for LaTeX output --------------------------------------------------
-
-# The paper size ('letter' or 'a4').
-#latex_paper_size = 'letter'
-
-# The font size ('10pt', '11pt' or '12pt').
-#latex_font_size = '10pt'
-
-# Grouping the document tree into LaTeX files. List of tuples
-# (source start file, target name, title, author, documentclass [howto/manual]).
-latex_documents = [
-  ('index', 'pandas.tex', u'pandas Documentation',
-   u'AQR Capital Management, LLC', 'manual'),
-]
-
-# The name of an image file (relative to this directory) to place at the top of
-# the title page.
-#latex_logo = None
-
-# For "manual" documents, if this is true, then toplevel headings are parts,
-# not chapters.
-#latex_use_parts = False
-
-# Additional stuff for the LaTeX preamble.
-#latex_preamble = ''
-
-# Documents to append as an appendix to all manuals.
-#latex_appendices = []
-
-# If false, no module index is generated.
-#latex_use_modindex = True
diff --git a/doc/index.rst b/doc/index.rst
deleted file mode 100644
index c74d9ce7e..000000000
--- a/doc/index.rst
+++ /dev/null
@@ -1,20 +0,0 @@
-.. pandas documentation master file, created by
-   sphinx-quickstart on Thu Dec 03 16:49:32 2009.
-   You can adapt this file completely to your liking, but it should at least
-   contain the root `toctree` directive.
-
-Welcome to pandas's documentation!
-==================================
-
-Contents:
-
-.. toctree::
-   :maxdepth: 2
-
-Indices and tables
-==================
-
-* :ref:`genindex`
-* :ref:`modindex`
-* :ref:`search`
-
diff --git a/doc/source/conf.py b/doc/source/conf.py
index 8a047441f..d6ad23939 100644
--- a/doc/source/conf.py
+++ b/doc/source/conf.py
@@ -50,16 +50,17 @@ master_doc = 'index'
 
 # General information about the project.
 project = u'pandas'
-copyright = u'2008-2009, AQR Capital Management, LLC'
+copyright = u'2008-2010, AQR Capital Management, LLC'
 
 # The version info for the project you're documenting, acts as replacement for
 # |version| and |release|, also used in various other places throughout the
 # built documents.
 #
 # The short X.Y version.
-version = '0.1.0'
+import pandas
+version = pandas.__version__
 # The full version, including alpha/beta/rc tags.
-release = '0.1.0'
+release = version
 
 # JP: added from sphinxdocs
 autosummary_generate = True
diff --git a/doc/source/index.rst b/doc/source/index.rst
index 4c3659b46..4e2f97c37 100755
--- a/doc/source/index.rst
+++ b/doc/source/index.rst
@@ -42,9 +42,13 @@ User manual
 
 .. module:: pandas
 
+**Date**: |today|
+
+**Version**: |version|
+
 **License:** BSD
 
-**Requirements:** python 2.4 to 2.6 and latest NumPy
+**Requirements:** python 2.4 to 2.6, NumPy, and dateutil
 
 **Code Repository:** http://pandas.googlecode.com
 
diff --git a/doc/source/installation.rst b/doc/source/installation.rst
index 11fa7558f..5b6cac12d 100644
--- a/doc/source/installation.rst
+++ b/doc/source/installation.rst
@@ -15,11 +15,11 @@ Available from the Google Code website and PyPI.
 Dependencies
 ------------
   * `NumPy <http://www.numpy.org>`__: 1.3.0 or higher
+  * `dateutil <http://labix.org/python-dateutil>`__
 
 Optional dependencies
 ---------------------
 
-  * `dateutil <http://labix.org/python-dateutil>`__
   * `SciPy <http://www.scipy.org>`__: miscellaneous statistical functions
   * `matplotlib <http://matplotlib.sourceforge.net/>`__: for plotting
   * `scikits.statsmodels <http://statsmodels.sourceforge.net/>`__
diff --git a/doc/source/series.rst b/doc/source/series.rst
index f7d3c4241..54cb63719 100644
--- a/doc/source/series.rst
+++ b/doc/source/series.rst
@@ -340,11 +340,61 @@ Filling, padding, and interpolating values
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 It is often desirable to deal with missing values in some specific
-way, especially for time series data.
+way, especially for time series data. As seen above, reindexing can be
+a useful approach, however we frequently will want to deal
+specifically with missing data in a particular way.
+
+The **fill** method provides two distinct behaviors: filling in NaNs
+with a static value or alternately padding / backfilling as with
+**reindex**:
+
+::
+
+    >>> ts
+    2009-01-01 00:00:00	0.0
+    2009-01-02 00:00:00	1.0
+    2009-01-05 00:00:00	nan
+    2009-01-06 00:00:00	nan
+    2009-01-07 00:00:00	4.0
+
+    >>> ts.fill(value=6)
+    2009-01-01 00:00:00	0.0
+    2009-01-02 00:00:00	1.0
+    2009-01-05 00:00:00	6.0
+    2009-01-06 00:00:00	6.0
+    2009-01-07 00:00:00	4.0
+
+    >>> ts.fill(method='pad')
+    2009-01-01 00:00:00	0.0
+    2009-01-02 00:00:00	1.0
+    2009-01-05 00:00:00	1.0
+    2009-01-06 00:00:00	1.0
+    2009-01-07 00:00:00	4.0
+
+
+In a similar vein, values can be linearly interpolated in either a
+naive way or in a time-spaced way
+
+::
+
+    >>> ts.interpolate()
+    2009-01-01 00:00:00	0.0
+    2009-01-02 00:00:00	1.0
+    2009-01-05 00:00:00	2.0
+    2009-01-06 00:00:00	3.0
+    2009-01-07 00:00:00	4.0
+
+    >>> ts.interpolate(method='time')
+    2009-01-01 00:00:00	0.0
+    2009-01-02 00:00:00	1.0
+    2009-01-05 00:00:00	2.8
+    2009-01-06 00:00:00	3.4
+    2009-01-07 00:00:00	4.0
 
 .. autosummary::
    :toctree: generated/
 
+   Series.reindex
    Series.fill
    Series.interpolate
 
@@ -356,6 +406,25 @@ ndarray.
 
 Otherwise, methods providing dict-like iteration are available:
 
+::
+
+    >>> for x in ts:
+            print x
+    0.0
+    1.0
+    2.0
+    3.0
+    4.0
+
+    >>> for index, value in ts.iteritems():
+            print index, value
+    2009-01-01 00:00:00 0.0
+    2009-01-02 00:00:00 1.0
+    2009-01-05 00:00:00 2.0
+    2009-01-06 00:00:00 3.0
+    2009-01-07 00:00:00 4.0
+
+
 .. autosummary::
    :toctree: generated/
 
@@ -436,7 +505,32 @@ implemented:
 Merging Series based on key
 ---------------------------
 
-TODO
+You may be occasionally interested in joining data sets which are
+keyed on different index values. This comes down to a simple mapping
+problem in the one dimensional case and will be more interesting in
+the 2- and 3-D cases, but the basic concept is the same:
+
+::
+
+    >>> s = Series(['six', 'seven', 'six', 'seven', 'six'],
+                   index=['a', 'b', 'c', 'd', 'e'])
+    >>> t = Series.fromDict({'six' : 6., 'seven' : 7.})
+
+    >>> s
+    a	six
+    b	seven
+    c	six
+    d	seven
+    e	six
+
+    >>> s.merge(t)
+    a	6.0
+    b	7.0
+    c	6.0
+    d	7.0
+    e	6.0
+
+
 
 .. autosummary::
    :toctree: generated/
diff --git a/pandas/core/datetools.py b/pandas/core/datetools.py
index db94f3fa8..65133bd89 100644
--- a/pandas/core/datetools.py
+++ b/pandas/core/datetools.py
@@ -85,7 +85,7 @@ class DateOffset(object):
     # For some offsets, want to drop the time information off the
     # first date
     _normalizeFirst = False
-    def __init__(self, n = 1, **kwds):
+    def __init__(self, n=1, **kwds):
         self.n = int(n)
         self.kwds = kwds
 
@@ -114,7 +114,7 @@ class DateOffset(object):
         return params
 
     def __repr__(self):
-        className = getattr(self, '_outputName', self.__class__.__name__)
+        className = getattr(self, '_outputName', type(self).__name__)
         exclude = set(['n', 'inc'])
         attrs = []
         for attr in self.__dict__:
@@ -157,10 +157,10 @@ class DateOffset(object):
         return self.__class__(-self.n, **self.kwds) + other
 
     def __mul__(self, someInt):
-        return self.__class__(n = someInt * self.n, **self.kwds)
+        return self.__class__(n=someInt * self.n, **self.kwds)
 
     def __rmul__(self, someInt):
-        return self.__class__(n = someInt * self.n, **self.kwds)
+        return self.__mul__(someInt)
 
     def __neg__(self):
         return self.__class__(-self.n, **self.kwds)
@@ -209,7 +209,6 @@ class BDay(DateOffset):
 
     def __repr__(self):
         className = getattr(self, '_outputName', self.__class__.__name__)
-        exclude = set(['n', 'inc'])
         attrs = []
 
         if self.offset:
diff --git a/pandas/core/tests/test_datetools.py b/pandas/core/tests/test_datetools.py
index 6146b5f87..7b78c4f81 100644
--- a/pandas/core/tests/test_datetools.py
+++ b/pandas/core/tests/test_datetools.py
@@ -1,29 +1,36 @@
-from pandas.core.datetools import BDay
-from datetime import datetime
-from pandas.core.datetools import *
+from datetime import datetime, timedelta
+import unittest
+
+from pandas.core.datetools import (
+    bday, BDay, BQuarterEnd, BMonthEnd, BYearEnd, MonthEnd,
+    DateOffset, Week)
+
 from pandas.core.daterange import XDateRange, DateRange
 import pandas.core.datetools as datetools
 
 ####
 ## Misc function tests
 ####
-def testFormat():
+def test_format():
     actual = datetools.format(datetime(2008, 1, 15))
     assert actual == '20080115'
 
-def testOle2datetime():
+def test_ole2datetime():
     actual = datetools.ole2datetime(60000)
     assert actual == datetime(2064, 4, 8)
 
-def testTto_datetime1():
+def test_to_datetime1():
     actual = datetools.to_datetime(datetime(2008, 1, 15))
     assert actual == datetime(2008, 1, 15)
 
-def testTto_datetime2():
     actual = datetools.to_datetime('20080115')
     assert actual == datetime(2008, 1, 15)
 
-def testNormalize_date():
+    # unparseable
+    s = 'Month 1, 1999'
+    assert datetools.to_datetime(s) == s
+
+def test_normalize_date():
     actual = datetools.normalize_date(datetime(2007, 10, 1, 1, 12, 5, 10))
     assert actual == datetime(2007, 10, 1)
 
@@ -34,95 +41,489 @@ def testNormalize_date():
 def myAssert(actual, expected):
     assert actual == expected
 
-def testEQ():
-    myAssert(datetools.BDay(2), datetools.BDay(2))
+class TestDateOffset(object):
+
+    def setUp(self):
+        self.d = datetime(2008, 1, 2)
+
+    def test_repr(self):
+        repr(DateOffset())
+        repr(DateOffset(2))
+        repr(2 * DateOffset())
+        repr(2 * DateOffset(months=2))
+
+    def test_mul(self):
+        assert DateOffset(2) == 2 * DateOffset(1)
+        assert DateOffset(2) == DateOffset(1) * 2
+
+    def test_constructor(self):
+
+        assert((self.d + DateOffset(months=2)) == datetime(2008, 3, 2))
+        assert((self.d - DateOffset(months=2)) == datetime(2007, 11, 2))
+
+        assert((self.d + DateOffset(2)) == datetime(2008, 1, 4))
+
+        assert not DateOffset(2).isAnchored()
+        assert DateOffset(1).isAnchored()
+
+        d = datetime(2008, 1, 31)
+        assert((d + DateOffset(months=1)) == datetime(2008, 2, 29))
+
+    def test_copy(self):
+        assert(DateOffset(months=2).copy() == DateOffset(months=2))
+
+class TestBusinessDay(unittest.TestCase):
+
+    def setUp(self):
+        self.d = datetime(2008, 1, 1)
+
+        self.offset = BDay()
+        self.offset2 = BDay(2)
+
+    def test_repr(self):
+        assert repr(self.offset) == '<1 BusinessDay>'
+        assert repr(self.offset2) == '<2 BusinessDays>'
+
+    def test_with_offset(self):
+        offset = self.offset + timedelta(hours=2)
+
+        assert (self.d + offset) == datetime(2008, 1, 2, 2)
+
+    def testEQ(self):
+        myAssert(self.offset2, self.offset2)
+
+    def test_mul(self):
+        pass
+
+    def test_hash(self):
+        myAssert(hash(self.offset2), hash(self.offset2))
+
+    def testCall(self):
+        myAssert(self.offset2(self.d), datetime(2008, 1, 3))
 
-def testHash():
-    myAssert(datetools.BDay(2).__hash__(), datetools.BDay(2).__hash__())
+    def testRAdd(self):
+        myAssert(self.d + self.offset2, self.offset2 + self.d)
 
-def testCall():
-    myAssert(BDay(2)(datetime(2008, 1, 1)), datetime(2008, 1, 3))
+    def testSub(self):
+        myAssert(self.d - self.offset2,  self.d + BDay(-2))
 
-def testRAdd():
-    myAssert(datetime(2008, 1, 1) + BDay(2), BDay(2) + datetime(2008, 1, 1))
+    def testRSub(self):
+        myAssert(self.d - self.offset2, self.offset2 - self.d)
 
-def testSub():
-    myAssert(datetime(2008, 1, 1) - BDay(2),  datetime(2008, 1, 1) + BDay(-2))
+    def testMult1(self):
+        myAssert(self.d + 10*self.offset, self.d + BDay(10))
 
-def testRSub():
-    myAssert(datetime(2008, 1, 1) - BDay(2), BDay(2) - datetime(2008, 1, 1))
+    def testMult2(self):
+        myAssert(self.d + (-5*BDay(-10)),
+                 self.d + BDay(50))
 
-def testMult1():
-    myAssert(datetime(2008, 1, 1) + 10*BDay(), datetime(2008, 1, 1) + BDay(10))
 
-def testMult2():
-    myAssert(datetime(2008, 1, 1) + (-5*BDay(-10)),
-             datetime(2008, 1, 1) + BDay(50))
+    def testRollback1(self):
+        myAssert(BDay(10).rollback(self.d), self.d)
 
+    def testRollback2(self):
+        myAssert(BDay(10).rollback(datetime(2008, 1, 5)), datetime(2008, 1, 4))
 
-def testRollback1():
-    myAssert(BDay(10).rollback(datetime(2008, 1, 1)), datetime(2008, 1, 1))
+    def testRollforward1(self):
+        myAssert(BDay(10).rollforward(self.d), self.d)
 
-def testRollback2():
-    myAssert(BDay(10).rollback(datetime(2008, 1, 5)), datetime(2008, 1, 4))
+    def testRollforward2(self):
+        myAssert(BDay(10).rollforward(datetime(2008, 1, 5)), datetime(2008, 1, 7))
+
+    def test_onOffset(self):
+        tests = [(BDay(), datetime(2008, 1, 1), True),
+                 (BDay(), datetime(2008, 1, 5), False)]
+
+        for offset, date, expected in tests:
+            assertOnOffset(offset, date, expected)
+
+    def test_offset(self):
+        tests = []
+
+        tests.append((bday,
+                      {datetime(2008, 1, 1): datetime(2008, 1, 2),
+                       datetime(2008, 1, 4): datetime(2008, 1, 7),
+                       datetime(2008, 1, 5): datetime(2008, 1, 7),
+                       datetime(2008, 1, 6): datetime(2008, 1, 7),
+                       datetime(2008, 1, 7): datetime(2008, 1, 8)}))
+
+        tests.append((2*bday,
+                      {datetime(2008, 1, 1): datetime(2008, 1, 3),
+                       datetime(2008, 1, 4): datetime(2008, 1, 8),
+                       datetime(2008, 1, 5): datetime(2008, 1, 8),
+                       datetime(2008, 1, 6): datetime(2008, 1, 8),
+                       datetime(2008, 1, 7): datetime(2008, 1, 9)}))
+
+        tests.append((-bday,
+                      {datetime(2008, 1, 1): datetime(2007, 12, 31),
+                       datetime(2008, 1, 4): datetime(2008, 1, 3),
+                       datetime(2008, 1, 5): datetime(2008, 1, 4),
+                       datetime(2008, 1, 6): datetime(2008, 1, 4),
+                       datetime(2008, 1, 7): datetime(2008, 1, 4),
+                       datetime(2008, 1, 8): datetime(2008, 1, 7)}))
+
+        tests.append((-2*bday,
+                      {datetime(2008, 1, 1): datetime(2007, 12, 28),
+                       datetime(2008, 1, 4): datetime(2008, 1, 2),
+                       datetime(2008, 1, 5): datetime(2008, 1, 3),
+                       datetime(2008, 1, 6): datetime(2008, 1, 3),
+                       datetime(2008, 1, 7): datetime(2008, 1, 3),
+                       datetime(2008, 1, 8): datetime(2008, 1, 4),
+                       datetime(2008, 1, 9): datetime(2008, 1, 7)}))
+
+        tests.append((BDay(0),
+                      {datetime(2008, 1, 1): datetime(2008, 1, 1),
+                       datetime(2008, 1, 4): datetime(2008, 1, 4),
+                       datetime(2008, 1, 5): datetime(2008, 1, 7),
+                       datetime(2008, 1, 6): datetime(2008, 1, 7),
+                       datetime(2008, 1, 7): datetime(2008, 1, 7)}))
+
+        for dateOffset, cases in tests:
+            for baseDate, expected in cases.iteritems():
+                assertEq(dateOffset, baseDate, expected)
 
-def testRollforward1():
-    myAssert(BDay(10).rollforward(datetime(2008, 1, 1)), datetime(2008, 1, 1))
 
-def testRollforward2():
-    myAssert(BDay(10).rollforward(datetime(2008, 1, 5)), datetime(2008, 1, 7))
 
 def assertOnOffset(offset, date, expected):
     actual = offset.onOffset(date)
     assert actual == expected
 
+class TestWeek(unittest.TestCase):
+    def test_offset(self):
+        tests = []
+
+        tests.append((datetools.week, # not business week
+                      {datetime(2008, 1, 1): datetime(2008, 1, 8),
+                       datetime(2008, 1, 4): datetime(2008, 1, 11),
+                       datetime(2008, 1, 5): datetime(2008, 1, 12),
+                       datetime(2008, 1, 6): datetime(2008, 1, 13),
+                       datetime(2008, 1, 7): datetime(2008, 1, 14)}))
+
+        tests.append((Week(dayOfWeek=0), # Mon
+                      {datetime(2007, 12, 31): datetime(2008, 1, 7),
+                       datetime(2008, 1, 4): datetime(2008, 1, 7),
+                       datetime(2008, 1, 5): datetime(2008, 1, 7),
+                       datetime(2008, 1, 6): datetime(2008, 1, 7),
+                       datetime(2008, 1, 7): datetime(2008, 1, 14)}))
+
+        tests.append((Week(0, dayOfWeek=0), # n=0 -> roll forward. Mon
+                      {datetime(2007, 12, 31): datetime(2007, 12, 31),
+                       datetime(2008, 1, 4): datetime(2008, 1, 7),
+                       datetime(2008, 1, 5): datetime(2008, 1, 7),
+                       datetime(2008, 1, 6): datetime(2008, 1, 7),
+                       datetime(2008, 1, 7): datetime(2008, 1, 7)}))
+
+        for dateOffset, cases in tests:
+            for baseDate, expected in cases.iteritems():
+                assertEq(dateOffset, baseDate, expected)
+
+    def test_onOffset(self):
+
+        tests = [(Week(dayOfWeek=0), datetime(2008, 1, 1), False),
+                 (Week(dayOfWeek=0), datetime(2008, 1, 2), False),
+                 (Week(dayOfWeek=0), datetime(2008, 1, 3), False),
+                 (Week(dayOfWeek=0), datetime(2008, 1, 4), False),
+                 (Week(dayOfWeek=0), datetime(2008, 1, 5), False),
+                 (Week(dayOfWeek=0), datetime(2008, 1, 6), False),
+                 (Week(dayOfWeek=0), datetime(2008, 1, 7), True),
+
+                 (Week(dayOfWeek=1), datetime(2008, 1, 1), True),
+                 (Week(dayOfWeek=1), datetime(2008, 1, 2), False),
+                 (Week(dayOfWeek=1), datetime(2008, 1, 3), False),
+                 (Week(dayOfWeek=1), datetime(2008, 1, 4), False),
+                 (Week(dayOfWeek=1), datetime(2008, 1, 5), False),
+                 (Week(dayOfWeek=1), datetime(2008, 1, 6), False),
+                 (Week(dayOfWeek=1), datetime(2008, 1, 7), False),
+
+                 (Week(dayOfWeek=2), datetime(2008, 1, 1), False),
+                 (Week(dayOfWeek=2), datetime(2008, 1, 2), True),
+                 (Week(dayOfWeek=2), datetime(2008, 1, 3), False),
+                 (Week(dayOfWeek=2), datetime(2008, 1, 4), False),
+                 (Week(dayOfWeek=2), datetime(2008, 1, 5), False),
+                 (Week(dayOfWeek=2), datetime(2008, 1, 6), False),
+                 (Week(dayOfWeek=2), datetime(2008, 1, 7), False),
+
+                 (Week(dayOfWeek=3), datetime(2008, 1, 1), False),
+                 (Week(dayOfWeek=3), datetime(2008, 1, 2), False),
+                 (Week(dayOfWeek=3), datetime(2008, 1, 3), True),
+                 (Week(dayOfWeek=3), datetime(2008, 1, 4), False),
+                 (Week(dayOfWeek=3), datetime(2008, 1, 5), False),
+                 (Week(dayOfWeek=3), datetime(2008, 1, 6), False),
+                 (Week(dayOfWeek=3), datetime(2008, 1, 7), False),
+
+                 (Week(dayOfWeek=4), datetime(2008, 1, 1), False),
+                 (Week(dayOfWeek=4), datetime(2008, 1, 2), False),
+                 (Week(dayOfWeek=4), datetime(2008, 1, 3), False),
+                 (Week(dayOfWeek=4), datetime(2008, 1, 4), True),
+                 (Week(dayOfWeek=4), datetime(2008, 1, 5), False),
+                 (Week(dayOfWeek=4), datetime(2008, 1, 6), False),
+                 (Week(dayOfWeek=4), datetime(2008, 1, 7), False),
+
+                 (Week(dayOfWeek=5), datetime(2008, 1, 1), False),
+                 (Week(dayOfWeek=5), datetime(2008, 1, 2), False),
+                 (Week(dayOfWeek=5), datetime(2008, 1, 3), False),
+                 (Week(dayOfWeek=5), datetime(2008, 1, 4), False),
+                 (Week(dayOfWeek=5), datetime(2008, 1, 5), True),
+                 (Week(dayOfWeek=5), datetime(2008, 1, 6), False),
+                 (Week(dayOfWeek=5), datetime(2008, 1, 7), False),
+
+                 (Week(dayOfWeek=6), datetime(2008, 1, 1), False),
+                 (Week(dayOfWeek=6), datetime(2008, 1, 2), False),
+                 (Week(dayOfWeek=6), datetime(2008, 1, 3), False),
+                 (Week(dayOfWeek=6), datetime(2008, 1, 4), False),
+                 (Week(dayOfWeek=6), datetime(2008, 1, 5), False),
+                 (Week(dayOfWeek=6), datetime(2008, 1, 6), True),
+                 (Week(dayOfWeek=6), datetime(2008, 1, 7), False),
+             ]
+
+        for offset, date, expected in tests:
+            assertOnOffset(offset, date, expected)
+            pass
+
+class TestBMonthEnd(unittest.TestCase):
+
+    def test_offset(self):
+        tests = []
+
+        tests.append((BMonthEnd(),
+                     {datetime(2008, 1, 1): datetime(2008, 1, 31),
+                      datetime(2008, 1, 31): datetime(2008, 2, 29),
+                      datetime(2006, 12, 29): datetime(2007, 1, 31),
+                      datetime(2006, 12, 31): datetime(2007, 1, 31),
+                      datetime(2007, 1, 1): datetime(2007, 1, 31),
+                      datetime(2006, 12, 1): datetime(2006, 12, 29)}))
+
+        tests.append((BMonthEnd(0),
+                      {datetime(2008, 1, 1): datetime(2008, 1, 31),
+                       datetime(2008, 1, 31): datetime(2008, 1, 31),
+                       datetime(2006, 12, 29): datetime(2006, 12, 29),
+                       datetime(2006, 12, 31): datetime(2007, 1, 31),
+                       datetime(2007, 1, 1): datetime(2007, 1, 31)}))
+
+        tests.append((BMonthEnd(2),
+                     {datetime(2008, 1, 1): datetime(2008, 2, 29),
+                      datetime(2008, 1, 31): datetime(2008, 3, 31),
+                      datetime(2006, 12, 29): datetime(2007, 2, 28),
+                      datetime(2006, 12, 31): datetime(2007, 2, 28),
+                      datetime(2007, 1, 1): datetime(2007, 2, 28),
+                      datetime(2006, 11, 1): datetime(2006, 12, 29)}))
+
+        tests.append((BMonthEnd(-1),
+                     {datetime(2007, 1, 1): datetime(2006, 12, 29),
+                      datetime(2008, 6, 30): datetime(2008, 5, 30),
+                      datetime(2008, 12, 31): datetime(2008, 11, 28),
+                      datetime(2006, 12, 29): datetime(2006, 11, 30),
+                      datetime(2006, 12, 30): datetime(2006, 12, 29),
+                      datetime(2007, 1, 1): datetime(2006, 12, 29)}))
+
+        for dateOffset, cases in tests:
+            for baseDate, expected in cases.iteritems():
+                assertEq(dateOffset, baseDate, expected)
+
+    def test_onOffset(self):
+
+        tests = [(BMonthEnd(), datetime(2007, 12, 31), True),
+                 (BMonthEnd(), datetime(2008, 1, 1), False)]
+
+        for offset, date, expected in tests:
+            assertOnOffset(offset, date, expected)
+
+class TestBQuarterEnd(unittest.TestCase):
+    def test_offset(self):
+        tests = []
+
+        tests.append((BQuarterEnd(startingMonth=1),
+                      {datetime(2008, 1, 1): datetime(2008, 1, 31),
+                       datetime(2008, 1, 31): datetime(2008, 4, 30),
+                       datetime(2008, 2, 15): datetime(2008, 4, 30),
+                       datetime(2008, 2, 29): datetime(2008, 4, 30),
+                       datetime(2008, 3, 15): datetime(2008, 4, 30),
+                       datetime(2008, 3, 31): datetime(2008, 4, 30),
+                       datetime(2008, 4, 15): datetime(2008, 4, 30),
+                       datetime(2008, 4, 30): datetime(2008, 7, 31),}))
+
+        tests.append((BQuarterEnd(startingMonth=2),
+                      {datetime(2008, 1, 1): datetime(2008, 2, 29),
+                       datetime(2008, 1, 31): datetime(2008, 2, 29),
+                       datetime(2008, 2, 15): datetime(2008, 2, 29),
+                       datetime(2008, 2, 29): datetime(2008, 5, 30),
+                       datetime(2008, 3, 15): datetime(2008, 5, 30),
+                       datetime(2008, 3, 31): datetime(2008, 5, 30),
+                       datetime(2008, 4, 15): datetime(2008, 5, 30),
+                       datetime(2008, 4, 30): datetime(2008, 5, 30),}))
+
+        tests.append((BQuarterEnd(startingMonth=1, n=0),
+                      {datetime(2008, 1, 1): datetime(2008, 1, 31),
+                       datetime(2008, 1, 31): datetime(2008, 1, 31),
+                       datetime(2008, 2, 15): datetime(2008, 4, 30),
+                       datetime(2008, 2, 29): datetime(2008, 4, 30),
+                       datetime(2008, 3, 15): datetime(2008, 4, 30),
+                       datetime(2008, 3, 31): datetime(2008, 4, 30),
+                       datetime(2008, 4, 15): datetime(2008, 4, 30),
+                       datetime(2008, 4, 30): datetime(2008, 4, 30),}))
+
+        tests.append((BQuarterEnd(startingMonth=1, n=-1),
+                      {datetime(2008, 1, 1): datetime(2007, 10, 31),
+                       datetime(2008, 1, 31): datetime(2007, 10, 31),
+                       datetime(2008, 2, 15): datetime(2008, 1, 31),
+                       datetime(2008, 2, 29): datetime(2008, 1, 31),
+                       datetime(2008, 3, 15): datetime(2008, 1, 31),
+                       datetime(2008, 3, 31): datetime(2008, 1, 31),
+                       datetime(2008, 4, 15): datetime(2008, 1, 31),
+                       datetime(2008, 4, 30): datetime(2008, 1, 31),}))
+
+        tests.append((BQuarterEnd(startingMonth=1, n=2),
+                      {datetime(2008, 1, 31): datetime(2008, 7, 31),
+                       datetime(2008, 2, 15): datetime(2008, 7, 31),
+                       datetime(2008, 2, 29): datetime(2008, 7, 31),
+                       datetime(2008, 3, 15): datetime(2008, 7, 31),
+                       datetime(2008, 3, 31): datetime(2008, 7, 31),
+                       datetime(2008, 4, 15): datetime(2008, 7, 31),
+                       datetime(2008, 4, 30): datetime(2008, 10, 31),}))
+
+        for dateOffset, cases in tests:
+            for baseDate, expected in cases.iteritems():
+                assertEq(dateOffset, baseDate, expected)
+
+    def test_onOffset(self):
+
+        tests = [(BQuarterEnd(1, startingMonth=1), datetime(2008, 1, 31), True),
+                 (BQuarterEnd(1, startingMonth=1), datetime(2007, 12, 31), False),
+                 (BQuarterEnd(1, startingMonth=1), datetime(2008, 2, 29), False),
+                 (BQuarterEnd(1, startingMonth=1), datetime(2007, 3, 30), False),
+                 (BQuarterEnd(1, startingMonth=1), datetime(2007, 3, 31), False),
+                 (BQuarterEnd(1, startingMonth=1), datetime(2008, 4, 30), True),
+                 (BQuarterEnd(1, startingMonth=1), datetime(2008, 5, 30), False),
+                 (BQuarterEnd(1, startingMonth=1), datetime(2007, 6, 29), False),
+                 (BQuarterEnd(1, startingMonth=1), datetime(2007, 6, 30), False),
+
+                 (BQuarterEnd(1, startingMonth=2), datetime(2008, 1, 31), False),
+                 (BQuarterEnd(1, startingMonth=2), datetime(2007, 12, 31), False),
+                 (BQuarterEnd(1, startingMonth=2), datetime(2008, 2, 29), True),
+                 (BQuarterEnd(1, startingMonth=2), datetime(2007, 3, 30), False),
+                 (BQuarterEnd(1, startingMonth=2), datetime(2007, 3, 31), False),
+                 (BQuarterEnd(1, startingMonth=2), datetime(2008, 4, 30), False),
+                 (BQuarterEnd(1, startingMonth=2), datetime(2008, 5, 30), True),
+                 (BQuarterEnd(1, startingMonth=2), datetime(2007, 6, 29), False),
+                 (BQuarterEnd(1, startingMonth=2), datetime(2007, 6, 30), False),
+
+                 (BQuarterEnd(1, startingMonth=3), datetime(2008, 1, 31), False),
+                 (BQuarterEnd(1, startingMonth=3), datetime(2007, 12, 31), True),
+                 (BQuarterEnd(1, startingMonth=3), datetime(2008, 2, 29), False),
+                 (BQuarterEnd(1, startingMonth=3), datetime(2007, 3, 30), True),
+                 (BQuarterEnd(1, startingMonth=3), datetime(2007, 3, 31), False),
+                 (BQuarterEnd(1, startingMonth=3), datetime(2008, 4, 30), False),
+                 (BQuarterEnd(1, startingMonth=3), datetime(2008, 5, 30), False),
+                 (BQuarterEnd(1, startingMonth=3), datetime(2007, 6, 29), True),
+                 (BQuarterEnd(1, startingMonth=3), datetime(2007, 6, 30), False),
+             ]
+
+        for offset, date, expected in tests:
+            assertOnOffset(offset, date, expected)
+
+
+
+class TestYearBegin(unittest.TestCase):
+
+    def test_offset(self):
+        tests = []
+
+        tests.append((datetools.YearBegin(),
+                      {datetime(2008, 1, 1): datetime(2009, 1, 1),
+                       datetime(2008, 6, 30): datetime(2009, 1, 1),
+                       datetime(2008, 12, 31): datetime(2009, 1, 1),
+                       datetime(2005, 12, 30): datetime(2006, 1, 1),
+                       datetime(2005, 12, 31): datetime(2006, 1, 1),}))
+
+        tests.append((datetools.YearBegin(0),
+                      {datetime(2008, 1, 1): datetime(2008, 1, 1),
+                       datetime(2008, 6, 30): datetime(2009, 1, 1),
+                       datetime(2008, 12, 31): datetime(2009, 1, 1),
+                       datetime(2005, 12, 30): datetime(2006, 1, 1),
+                       datetime(2005, 12, 31): datetime(2006, 1, 1),}))
+
+
+        tests.append((datetools.YearBegin(-1),
+                      {datetime(2007, 1, 1): datetime(2006, 1, 1),
+                       datetime(2008, 6, 30): datetime(2008, 1, 1),
+                       datetime(2008, 12, 31): datetime(2008, 1, 1),
+                       datetime(2006, 12, 29): datetime(2006, 1, 1),
+                       datetime(2006, 12, 30): datetime(2006, 1, 1),
+                       datetime(2007, 1, 1): datetime(2006, 1, 1),}))
+
+        tests.append((datetools.YearBegin(-2),
+                      {datetime(2007, 1, 1): datetime(2005, 1, 1),
+                       datetime(2008, 6, 30): datetime(2007, 1, 1),
+                       datetime(2008, 12, 31): datetime(2007, 1, 1),}))
+
+        for dateOffset, cases in tests:
+            for baseDate, expected in cases.iteritems():
+                assertEq(dateOffset, baseDate, expected)
+
+
+
+class TestBYearEnd(unittest.TestCase):
+
+    def test_offset(self):
+        tests = []
+
+        tests.append((BYearEnd(),
+                      {datetime(2008, 1, 1): datetime(2008, 12, 31),
+                       datetime(2008, 6, 30): datetime(2008, 12, 31),
+                       datetime(2008, 12, 31): datetime(2009, 12, 31),
+                       datetime(2005, 12, 30): datetime(2006, 12, 29),
+                       datetime(2005, 12, 31): datetime(2006, 12, 29),}))
+
+        tests.append((BYearEnd(0),
+                      {datetime(2008, 1, 1): datetime(2008, 12, 31),
+                       datetime(2008, 6, 30): datetime(2008, 12, 31),
+                       datetime(2008, 12, 31): datetime(2008, 12, 31),
+                       datetime(2005, 12, 31): datetime(2006, 12, 29),}))
+
+        tests.append((BYearEnd(-1),
+                      {datetime(2007, 1, 1): datetime(2006, 12, 29),
+                       datetime(2008, 6, 30): datetime(2007, 12, 31),
+                       datetime(2008, 12, 31): datetime(2007, 12, 31),
+                       datetime(2006, 12, 29): datetime(2005, 12, 30),
+                       datetime(2006, 12, 30): datetime(2006, 12, 29),
+                       datetime(2007, 1, 1): datetime(2006, 12, 29),}))
+
+        tests.append((BYearEnd(-2),
+                      {datetime(2007, 1, 1): datetime(2005, 12, 30),
+                       datetime(2008, 6, 30): datetime(2006, 12, 29),
+                       datetime(2008, 12, 31): datetime(2006, 12, 29),}))
+
+        for dateOffset, cases in tests:
+            for baseDate, expected in cases.iteritems():
+                assertEq(dateOffset, baseDate, expected)
+
+    def test_onOffset(self):
+
+        tests = [
+            (BYearEnd(), datetime(2007, 12, 31), True),
+            (BYearEnd(), datetime(2008, 1, 1), False),
+            (BYearEnd(), datetime(2006, 12, 31), False),
+            (BYearEnd(), datetime(2006, 12, 29), True),
+        ]
+
+        for offset, date, expected in tests:
+            assertOnOffset(offset, date, expected)
+
+
+class TestMonthEnd(unittest.TestCase):
+    def test_onOffset(self):
+
+        tests = [
+            (MonthEnd(), datetime(2007, 3, 30), False),
+            (MonthEnd(), datetime(2007, 3, 31), True),
+        ]
+
+        for offset, date, expected in tests:
+            assertOnOffset(offset, date, expected)
+
 def testOnOffset():
 
-    tests = [(BDay(), datetime(2008, 1, 1), True),
-             (BDay(), datetime(2008, 1, 5), False),
-
-             (BMonthEnd(), datetime(2007, 12, 31), True),
-             (BMonthEnd(), datetime(2008, 1, 1), False),
-
-             (BQuarterEnd(1, startingMonth=1), datetime(2008, 1, 31), True),
-             (BQuarterEnd(1, startingMonth=1), datetime(2007, 12, 31), False),
-             (BQuarterEnd(1, startingMonth=1), datetime(2008, 2, 29), False),
-             (BQuarterEnd(1, startingMonth=1), datetime(2007, 3, 30), False),
-             (BQuarterEnd(1, startingMonth=1), datetime(2007, 3, 31), False),
-             (BQuarterEnd(1, startingMonth=1), datetime(2008, 4, 30), True),
-             (BQuarterEnd(1, startingMonth=1), datetime(2008, 5, 30), False),
-             (BQuarterEnd(1, startingMonth=1), datetime(2007, 6, 29), False),
-             (BQuarterEnd(1, startingMonth=1), datetime(2007, 6, 30), False),
-
-             (BQuarterEnd(1, startingMonth=2), datetime(2008, 1, 31), False),
-             (BQuarterEnd(1, startingMonth=2), datetime(2007, 12, 31), False),
-             (BQuarterEnd(1, startingMonth=2), datetime(2008, 2, 29), True),
-             (BQuarterEnd(1, startingMonth=2), datetime(2007, 3, 30), False),
-             (BQuarterEnd(1, startingMonth=2), datetime(2007, 3, 31), False),
-             (BQuarterEnd(1, startingMonth=2), datetime(2008, 4, 30), False),
-             (BQuarterEnd(1, startingMonth=2), datetime(2008, 5, 30), True),
-             (BQuarterEnd(1, startingMonth=2), datetime(2007, 6, 29), False),
-             (BQuarterEnd(1, startingMonth=2), datetime(2007, 6, 30), False),
-
-             (BQuarterEnd(1, startingMonth=3), datetime(2008, 1, 31), False),
-             (BQuarterEnd(1, startingMonth=3), datetime(2007, 12, 31), True),
-             (BQuarterEnd(1, startingMonth=3), datetime(2008, 2, 29), False),
-             (BQuarterEnd(1, startingMonth=3), datetime(2007, 3, 30), True),
-             (BQuarterEnd(1, startingMonth=3), datetime(2007, 3, 31), False),
-             (BQuarterEnd(1, startingMonth=3), datetime(2008, 4, 30), False),
-             (BQuarterEnd(1, startingMonth=3), datetime(2008, 5, 30), False),
-             (BQuarterEnd(1, startingMonth=3), datetime(2007, 6, 29), True),
-             (BQuarterEnd(1, startingMonth=3), datetime(2007, 6, 30), False),
-
-             (BYearEnd(), datetime(2007, 12, 31), True),
-             (BYearEnd(), datetime(2008, 1, 1), False),
-             (BYearEnd(), datetime(2006, 12, 31), False),
-             (BYearEnd(), datetime(2006, 12, 29), True),
-
-             (MonthEnd(), datetime(2007, 3, 30), False),
-             (MonthEnd(), datetime(2007, 3, 31), True),
-
-             #(QuarterEnd(1, startingMonth=1), datetime(2008, 1, 31), True),
+    tests = [#(QuarterEnd(1, startingMonth=1), datetime(2008, 1, 31), True),
              #(QuarterEnd(1, startingMonth=1), datetime(2007, 12, 31), False),
              #(QuarterEnd(1, startingMonth=1), datetime(2008, 2, 29), False),
              #(QuarterEnd(1, startingMonth=3), datetime(2007, 3, 30), False),
@@ -151,62 +552,6 @@ def testOnOffset():
              #(QuarterEnd(1, startingMonth=3), datetime(2008, 5, 30), False),
              #(QuarterEnd(1, startingMonth=3), datetime(2008, 6, 29), False),
              #(QuarterEnd(1, startingMonth=3), datetime(2008, 6, 30), True),
-
-             (datetools.Week(dayOfWeek=0), datetime(2008, 1, 1), False),
-             (datetools.Week(dayOfWeek=0), datetime(2008, 1, 2), False),
-             (datetools.Week(dayOfWeek=0), datetime(2008, 1, 3), False),
-             (datetools.Week(dayOfWeek=0), datetime(2008, 1, 4), False),
-             (datetools.Week(dayOfWeek=0), datetime(2008, 1, 5), False),
-             (datetools.Week(dayOfWeek=0), datetime(2008, 1, 6), False),
-             (datetools.Week(dayOfWeek=0), datetime(2008, 1, 7), True),
-
-             (datetools.Week(dayOfWeek=1), datetime(2008, 1, 1), True),
-             (datetools.Week(dayOfWeek=1), datetime(2008, 1, 2), False),
-             (datetools.Week(dayOfWeek=1), datetime(2008, 1, 3), False),
-             (datetools.Week(dayOfWeek=1), datetime(2008, 1, 4), False),
-             (datetools.Week(dayOfWeek=1), datetime(2008, 1, 5), False),
-             (datetools.Week(dayOfWeek=1), datetime(2008, 1, 6), False),
-             (datetools.Week(dayOfWeek=1), datetime(2008, 1, 7), False),
-
-             (datetools.Week(dayOfWeek=2), datetime(2008, 1, 1), False),
-             (datetools.Week(dayOfWeek=2), datetime(2008, 1, 2), True),
-             (datetools.Week(dayOfWeek=2), datetime(2008, 1, 3), False),
-             (datetools.Week(dayOfWeek=2), datetime(2008, 1, 4), False),
-             (datetools.Week(dayOfWeek=2), datetime(2008, 1, 5), False),
-             (datetools.Week(dayOfWeek=2), datetime(2008, 1, 6), False),
-             (datetools.Week(dayOfWeek=2), datetime(2008, 1, 7), False),
-
-             (datetools.Week(dayOfWeek=3), datetime(2008, 1, 1), False),
-             (datetools.Week(dayOfWeek=3), datetime(2008, 1, 2), False),
-             (datetools.Week(dayOfWeek=3), datetime(2008, 1, 3), True),
-             (datetools.Week(dayOfWeek=3), datetime(2008, 1, 4), False),
-             (datetools.Week(dayOfWeek=3), datetime(2008, 1, 5), False),
-             (datetools.Week(dayOfWeek=3), datetime(2008, 1, 6), False),
-             (datetools.Week(dayOfWeek=3), datetime(2008, 1, 7), False),
-
-             (datetools.Week(dayOfWeek=4), datetime(2008, 1, 1), False),
-             (datetools.Week(dayOfWeek=4), datetime(2008, 1, 2), False),
-             (datetools.Week(dayOfWeek=4), datetime(2008, 1, 3), False),
-             (datetools.Week(dayOfWeek=4), datetime(2008, 1, 4), True),
-             (datetools.Week(dayOfWeek=4), datetime(2008, 1, 5), False),
-             (datetools.Week(dayOfWeek=4), datetime(2008, 1, 6), False),
-             (datetools.Week(dayOfWeek=4), datetime(2008, 1, 7), False),
-
-             (datetools.Week(dayOfWeek=5), datetime(2008, 1, 1), False),
-             (datetools.Week(dayOfWeek=5), datetime(2008, 1, 2), False),
-             (datetools.Week(dayOfWeek=5), datetime(2008, 1, 3), False),
-             (datetools.Week(dayOfWeek=5), datetime(2008, 1, 4), False),
-             (datetools.Week(dayOfWeek=5), datetime(2008, 1, 5), True),
-             (datetools.Week(dayOfWeek=5), datetime(2008, 1, 6), False),
-             (datetools.Week(dayOfWeek=5), datetime(2008, 1, 7), False),
-
-             (datetools.Week(dayOfWeek=6), datetime(2008, 1, 1), False),
-             (datetools.Week(dayOfWeek=6), datetime(2008, 1, 2), False),
-             (datetools.Week(dayOfWeek=6), datetime(2008, 1, 3), False),
-             (datetools.Week(dayOfWeek=6), datetime(2008, 1, 4), False),
-             (datetools.Week(dayOfWeek=6), datetime(2008, 1, 5), False),
-             (datetools.Week(dayOfWeek=6), datetime(2008, 1, 6), True),
-             (datetools.Week(dayOfWeek=6), datetime(2008, 1, 7), False),
          ]
 
     for offset, date, expected in tests:
@@ -216,289 +561,23 @@ def assertEq(dateOffset, baseDate, expected):
     actual = dateOffset + baseDate
     assert actual == expected
 
-def testBday():
-    tests = []
-
-    tests.append((datetools.bday,
-                  {datetime(2008, 1, 1): datetime(2008, 1, 2),
-                   datetime(2008, 1, 4): datetime(2008, 1, 7),
-                   datetime(2008, 1, 5): datetime(2008, 1, 7),
-                   datetime(2008, 1, 6): datetime(2008, 1, 7),
-                   datetime(2008, 1, 7): datetime(2008, 1, 8)}))
-
-    tests.append((2*datetools.bday,
-                  {datetime(2008, 1, 1): datetime(2008, 1, 3),
-                   datetime(2008, 1, 4): datetime(2008, 1, 8),
-                   datetime(2008, 1, 5): datetime(2008, 1, 8),
-                   datetime(2008, 1, 6): datetime(2008, 1, 8),
-                   datetime(2008, 1, 7): datetime(2008, 1, 9)}))
-
-    tests.append((-datetools.bday,
-                  {datetime(2008, 1, 1): datetime(2007, 12, 31),
-                   datetime(2008, 1, 4): datetime(2008, 1, 3),
-                   datetime(2008, 1, 5): datetime(2008, 1, 4),
-                   datetime(2008, 1, 6): datetime(2008, 1, 4),
-                   datetime(2008, 1, 7): datetime(2008, 1, 4),
-                   datetime(2008, 1, 8): datetime(2008, 1, 7)}))
-
-    tests.append((-2*datetools.bday,
-                  {datetime(2008, 1, 1): datetime(2007, 12, 28),
-                   datetime(2008, 1, 4): datetime(2008, 1, 2),
-                   datetime(2008, 1, 5): datetime(2008, 1, 3),
-                   datetime(2008, 1, 6): datetime(2008, 1, 3),
-                   datetime(2008, 1, 7): datetime(2008, 1, 3),
-                   datetime(2008, 1, 8): datetime(2008, 1, 4),
-                   datetime(2008, 1, 9): datetime(2008, 1, 7)}))
-
-    tests.append((datetools.BDay(0),
-                  {datetime(2008, 1, 1): datetime(2008, 1, 1),
-                   datetime(2008, 1, 4): datetime(2008, 1, 4),
-                   datetime(2008, 1, 5): datetime(2008, 1, 7),
-                   datetime(2008, 1, 6): datetime(2008, 1, 7),
-                   datetime(2008, 1, 7): datetime(2008, 1, 7)}))
-
-    for dateOffset, cases in tests:
-        for baseDate, expected in cases.iteritems():
-            assertEq(dateOffset, baseDate, expected)
-
-def testWeek():
-    tests = []
-
-    tests.append((datetools.week, # not business week
-                  {datetime(2008, 1, 1): datetime(2008, 1, 8),
-                   datetime(2008, 1, 4): datetime(2008, 1, 11),
-                   datetime(2008, 1, 5): datetime(2008, 1, 12),
-                   datetime(2008, 1, 6): datetime(2008, 1, 13),
-                   datetime(2008, 1, 7): datetime(2008, 1, 14)}))
-
-    tests.append((datetools.Week(dayOfWeek=0), # Mon
-                  {datetime(2007, 12, 31): datetime(2008, 1, 7),
-                   datetime(2008, 1, 4): datetime(2008, 1, 7),
-                   datetime(2008, 1, 5): datetime(2008, 1, 7),
-                   datetime(2008, 1, 6): datetime(2008, 1, 7),
-                   datetime(2008, 1, 7): datetime(2008, 1, 14)}))
-
-    tests.append((datetools.Week(0, dayOfWeek=0), # n=0 -> roll forward. Mon
-                  {datetime(2007, 12, 31): datetime(2007, 12, 31),
-                   datetime(2008, 1, 4): datetime(2008, 1, 7),
-                   datetime(2008, 1, 5): datetime(2008, 1, 7),
-                   datetime(2008, 1, 6): datetime(2008, 1, 7),
-                   datetime(2008, 1, 7): datetime(2008, 1, 7)}))
-
-    for dateOffset, cases in tests:
-        for baseDate, expected in cases.iteritems():
-            assertEq(dateOffset, baseDate, expected)
-
-def testBMonthEnd():
-    tests = []
-
-    tests.append((datetools.BMonthEnd(),
-                 {datetime(2008, 1, 1): datetime(2008, 1, 31),
-                  datetime(2008, 1, 31): datetime(2008, 2, 29),
-                  datetime(2006, 12, 29): datetime(2007, 1, 31),
-                  datetime(2006, 12, 31): datetime(2007, 1, 31),
-                  datetime(2007, 1, 1): datetime(2007, 1, 31),
-                  datetime(2006, 12, 1): datetime(2006, 12, 29)}))
-
-    tests.append((datetools.BMonthEnd(0),
-                  {datetime(2008, 1, 1): datetime(2008, 1, 31),
-                   datetime(2008, 1, 31): datetime(2008, 1, 31),
-                   datetime(2006, 12, 29): datetime(2006, 12, 29),
-                   datetime(2006, 12, 31): datetime(2007, 1, 31),
-                   datetime(2007, 1, 1): datetime(2007, 1, 31)}))
-
-    tests.append((datetools.BMonthEnd(2),
-                 {datetime(2008, 1, 1): datetime(2008, 2, 29),
-                  datetime(2008, 1, 31): datetime(2008, 3, 31),
-                  datetime(2006, 12, 29): datetime(2007, 2, 28),
-                  datetime(2006, 12, 31): datetime(2007, 2, 28),
-                  datetime(2007, 1, 1): datetime(2007, 2, 28),
-                  datetime(2006, 11, 1): datetime(2006, 12, 29)}))
-
-    tests.append((datetools.BMonthEnd(-1),
-                 {datetime(2007, 1, 1): datetime(2006, 12, 29),
-                  datetime(2008, 6, 30): datetime(2008, 5, 30),
-                  datetime(2008, 12, 31): datetime(2008, 11, 28),
-                  datetime(2006, 12, 29): datetime(2006, 11, 30),
-                  datetime(2006, 12, 30): datetime(2006, 12, 29),
-                  datetime(2007, 1, 1): datetime(2006, 12, 29)}))
-
-    for dateOffset, cases in tests:
-        for baseDate, expected in cases.iteritems():
-            assertEq(dateOffset, baseDate, expected)
-
-
-def testBYearEnd():
-    tests = []
-
-    tests.append((datetools.BYearEnd(),
-                  {datetime(2008, 1, 1): datetime(2008, 12, 31),
-                   datetime(2008, 6, 30): datetime(2008, 12, 31),
-                   datetime(2008, 12, 31): datetime(2009, 12, 31),
-                   datetime(2005, 12, 30): datetime(2006, 12, 29),
-                   datetime(2005, 12, 31): datetime(2006, 12, 29),}))
-
-    tests.append((datetools.BYearEnd(0),
-                  {datetime(2008, 1, 1): datetime(2008, 12, 31),
-                   datetime(2008, 6, 30): datetime(2008, 12, 31),
-                   datetime(2008, 12, 31): datetime(2008, 12, 31),
-                   datetime(2005, 12, 31): datetime(2006, 12, 29),}))
-
-    tests.append((datetools.BYearEnd(-1),
-                  {datetime(2007, 1, 1): datetime(2006, 12, 29),
-                   datetime(2008, 6, 30): datetime(2007, 12, 31),
-                   datetime(2008, 12, 31): datetime(2007, 12, 31),
-                   datetime(2006, 12, 29): datetime(2005, 12, 30),
-                   datetime(2006, 12, 30): datetime(2006, 12, 29),
-                   datetime(2007, 1, 1): datetime(2006, 12, 29),}))
-
-    tests.append((datetools.BYearEnd(-2),
-                  {datetime(2007, 1, 1): datetime(2005, 12, 30),
-                   datetime(2008, 6, 30): datetime(2006, 12, 29),
-                   datetime(2008, 12, 31): datetime(2006, 12, 29),}))
-
-    for dateOffset, cases in tests:
-        for baseDate, expected in cases.iteritems():
-            assertEq(dateOffset, baseDate, expected)
-
-def testYearBegin():
-    tests = []
-
-    tests.append((datetools.YearBegin(),
-                  {datetime(2008, 1, 1): datetime(2009, 1, 1),
-                   datetime(2008, 6, 30): datetime(2009, 1, 1),
-                   datetime(2008, 12, 31): datetime(2009, 1, 1),
-                   datetime(2005, 12, 30): datetime(2006, 1, 1),
-                   datetime(2005, 12, 31): datetime(2006, 1, 1),}))
-
-    tests.append((datetools.YearBegin(0),
-                  {datetime(2008, 1, 1): datetime(2008, 1, 1),
-                   datetime(2008, 6, 30): datetime(2009, 1, 1),
-                   datetime(2008, 12, 31): datetime(2009, 1, 1),
-                   datetime(2005, 12, 30): datetime(2006, 1, 1),
-                   datetime(2005, 12, 31): datetime(2006, 1, 1),}))
-
-
-    tests.append((datetools.YearBegin(-1),
-                  {datetime(2007, 1, 1): datetime(2006, 1, 1),
-                   datetime(2008, 6, 30): datetime(2008, 1, 1),
-                   datetime(2008, 12, 31): datetime(2008, 1, 1),
-                   datetime(2006, 12, 29): datetime(2006, 1, 1),
-                   datetime(2006, 12, 30): datetime(2006, 1, 1),
-                   datetime(2007, 1, 1): datetime(2006, 1, 1),}))
-
-    tests.append((datetools.YearBegin(-2),
-                  {datetime(2007, 1, 1): datetime(2005, 1, 1),
-                   datetime(2008, 6, 30): datetime(2007, 1, 1),
-                   datetime(2008, 12, 31): datetime(2007, 1, 1),}))
-
-    for dateOffset, cases in tests:
-        for baseDate, expected in cases.iteritems():
-            assertEq(dateOffset, baseDate, expected)
-
-
-def testBQuarterEnd():
-    tests = []
-
-    tests.append((datetools.BQuarterEnd(),
-                  {datetime(2008, 1, 1): datetime(2008, 3, 31),
-                   datetime(2008, 1, 31): datetime(2008, 3, 31),
-                   datetime(2008, 2, 15): datetime(2008, 3, 31),
-                   datetime(2008, 2, 29): datetime(2008, 3, 31),
-                   datetime(2008, 3, 15): datetime(2008, 3, 31),
-                   datetime(2008, 3, 31): datetime(2008, 6, 30),
-                   datetime(2008, 4, 15): datetime(2008, 6, 30),
-                   datetime(2008, 4, 30): datetime(2008, 6, 30),}))
-
-    tests.append((datetools.BQuarterEnd(n = 0),
-                  {datetime(2008, 1, 1): datetime(2008, 3, 31),
-                   datetime(2008, 1, 31): datetime(2008, 3, 31),
-                   datetime(2008, 2, 15): datetime(2008, 3, 31),
-                   datetime(2008, 2, 29): datetime(2008, 3, 31),
-                   datetime(2008, 3, 15): datetime(2008, 3, 31),
-                   datetime(2008, 3, 31): datetime(2008, 3, 31),
-                   datetime(2008, 4, 15): datetime(2008, 6, 30),
-                   datetime(2008, 4, 30): datetime(2008, 6, 30),}))
-
-    tests.append((datetools.BQuarterEnd(n = -1),
-                  {datetime(2008, 1, 1): datetime(2007, 12, 31),
-                   datetime(2008, 1, 31): datetime(2007, 12, 31),
-                   datetime(2008, 2, 15): datetime(2007, 12, 31),
-                   datetime(2008, 2, 29): datetime(2007, 12, 31),
-                   datetime(2008, 3, 15): datetime(2007, 12, 31),
-                   datetime(2008, 3, 31): datetime(2007, 12, 31),
-                   datetime(2008, 4, 15): datetime(2008, 3, 31),
-                  datetime(2008, 4, 30): datetime(2008, 3, 31),}))
-
-    tests.append((datetools.BQuarterEnd(n = 2),
-                  {datetime(2008, 1, 1): datetime(2008, 6, 30),
-                   datetime(2008, 1, 31): datetime(2008, 6, 30),
-                   datetime(2008, 2, 15): datetime(2008, 6, 30),
-                   datetime(2008, 2, 29): datetime(2008, 6, 30),
-                   datetime(2008, 3, 15): datetime(2008, 6, 30),
-                   datetime(2008, 3, 31): datetime(2008, 9, 30),
-                   datetime(2008, 4, 15): datetime(2008, 9, 30),
-                   datetime(2008, 4, 30): datetime(2008, 9, 30),}))
-
-    for dateOffset, cases in tests:
-        for baseDate, expected in cases.iteritems():
-            assertEq(dateOffset, baseDate, expected)
-
-def testBQuarterEndOffsets():
-    tests = []
-
-    tests.append((datetools.BQuarterEnd(startingMonth=1),
-                  {datetime(2008, 1, 1): datetime(2008, 1, 31),
-                   datetime(2008, 1, 31): datetime(2008, 4, 30),
-                   datetime(2008, 2, 15): datetime(2008, 4, 30),
-                   datetime(2008, 2, 29): datetime(2008, 4, 30),
-                   datetime(2008, 3, 15): datetime(2008, 4, 30),
-                   datetime(2008, 3, 31): datetime(2008, 4, 30),
-                   datetime(2008, 4, 15): datetime(2008, 4, 30),
-                   datetime(2008, 4, 30): datetime(2008, 7, 31),}))
-
-    tests.append((datetools.BQuarterEnd(startingMonth=2),
-                  {datetime(2008, 1, 1): datetime(2008, 2, 29),
-                   datetime(2008, 1, 31): datetime(2008, 2, 29),
-                   datetime(2008, 2, 15): datetime(2008, 2, 29),
-                   datetime(2008, 2, 29): datetime(2008, 5, 30),
-                   datetime(2008, 3, 15): datetime(2008, 5, 30),
-                   datetime(2008, 3, 31): datetime(2008, 5, 30),
-                   datetime(2008, 4, 15): datetime(2008, 5, 30),
-                   datetime(2008, 4, 30): datetime(2008, 5, 30),}))
-
-    tests.append((datetools.BQuarterEnd(startingMonth=1, n=0),
-                  {datetime(2008, 1, 1): datetime(2008, 1, 31),
-                   datetime(2008, 1, 31): datetime(2008, 1, 31),
-                   datetime(2008, 2, 15): datetime(2008, 4, 30),
-                   datetime(2008, 2, 29): datetime(2008, 4, 30),
-                   datetime(2008, 3, 15): datetime(2008, 4, 30),
-                   datetime(2008, 3, 31): datetime(2008, 4, 30),
-                   datetime(2008, 4, 15): datetime(2008, 4, 30),
-                   datetime(2008, 4, 30): datetime(2008, 4, 30),}))
-
-    tests.append((datetools.BQuarterEnd(startingMonth=1, n=-1),
-                  {datetime(2008, 1, 1): datetime(2007, 10, 31),
-                   datetime(2008, 1, 31): datetime(2007, 10, 31),
-                   datetime(2008, 2, 15): datetime(2008, 1, 31),
-                   datetime(2008, 2, 29): datetime(2008, 1, 31),
-                   datetime(2008, 3, 15): datetime(2008, 1, 31),
-                   datetime(2008, 3, 31): datetime(2008, 1, 31),
-                   datetime(2008, 4, 15): datetime(2008, 1, 31),
-                   datetime(2008, 4, 30): datetime(2008, 1, 31),}))
-
-    tests.append((datetools.BQuarterEnd(startingMonth=1, n=2),
-                  {datetime(2008, 1, 31): datetime(2008, 7, 31),
-                   datetime(2008, 2, 15): datetime(2008, 7, 31),
-                   datetime(2008, 2, 29): datetime(2008, 7, 31),
-                   datetime(2008, 3, 15): datetime(2008, 7, 31),
-                   datetime(2008, 3, 31): datetime(2008, 7, 31),
-                   datetime(2008, 4, 15): datetime(2008, 7, 31),
-                   datetime(2008, 4, 30): datetime(2008, 10, 31),}))
-
-    for dateOffset, cases in tests:
-        for baseDate, expected in cases.iteritems():
-            assertEq(dateOffset, baseDate, expected)
+
+def test_getOffsetName():
+    try:
+        datetools.getOffsetName(BDay(2))
+    except Exception:
+        pass
+    else:
+        raise Exception('failure')
+
+    assert datetools.getOffsetName(BDay()) == 'WEEKDAY'
+    assert datetools.getOffsetName(BMonthEnd()) == 'EOM'
+    assert datetools.getOffsetName(Week(dayOfWeek=0)) == 'W@MON'
+    assert datetools.getOffsetName(Week(dayOfWeek=1)) == 'W@TUE'
+    assert datetools.getOffsetName(Week(dayOfWeek=2)) == 'W@WED'
+    assert datetools.getOffsetName(Week(dayOfWeek=3)) == 'W@THU'
+    assert datetools.getOffsetName(Week(dayOfWeek=4)) == 'W@FRI'
+
 
 ####
 ## XDateRange Tests
@@ -528,14 +607,10 @@ def testXDateRange3():
 
 # DateRange test
 
-def assertEqual(a, b):
-    actual = dateOffset + baseDate
-    assert actual == expected
-
 def testDateRange1():
     toDate = datetime(2009, 5, 13)
     dr = DateRange(toDate=toDate, periods=20)
-    firstDate = toDate - 19 * datetools.bday
+    firstDate = toDate - 19 * bday
 
     assert len(dr) == 20
     assert dr[0] == firstDate
diff --git a/pandas/core/tests/test_index.py b/pandas/core/tests/test_index.py
index e1f84cad2..3c346d0fa 100644
--- a/pandas/core/tests/test_index.py
+++ b/pandas/core/tests/test_index.py
@@ -8,6 +8,7 @@ import pickle
 import unittest
 
 class TestIndex(unittest.TestCase):
+
     def setUp(self):
         self.strIndex = common.makeStringIndex(100)
         self.dateIndex = common.makeDateIndex(100)
@@ -158,20 +159,13 @@ class TestIndex(unittest.TestCase):
 
     def test_pickle(self):
         def testit(index):
-            f = open('__tmp__', 'wb')
-            pickle.dump(index, f)
-            f.close()
-
-            f = open('__tmp__', 'rb')
-            unPickled = pickle.load(f)
-            f.close()
-
-            os.remove('__tmp__')
+            pickled = pickle.dumps(index)
+            unpickled = pickle.loads(pickled)
 
-            self.assert_(isinstance(unPickled, Index))
-            self.assert_(np.array_equal(unPickled, index))
+            self.assert_(isinstance(unpickled, Index))
+            self.assert_(np.array_equal(unpickled, index))
 
-            common.assert_dict_equal(unPickled.indexMap, index.indexMap)
+            common.assert_dict_equal(unpickled.indexMap, index.indexMap)
 
         testit(self.strIndex)
         testit(self.dateIndex)
diff --git a/pandas/version.py b/pandas/version.py
index caf7fccfc..e12f3e031 100644
--- a/pandas/version.py
+++ b/pandas/version.py
@@ -1,4 +1,4 @@
 # from pkg_resources import require
 # __version__ = require('pandas')[0].version
 
-__version__ = 0.1
+__version__ = 0.2
diff --git a/setup.py b/setup.py
index e91fbe7f4..cbe02a732 100644
--- a/setup.py
+++ b/setup.py
@@ -41,7 +41,7 @@ CLASSIFIERS = [
 ]
 
 MAJOR = 0
-MINOR = 1
+MINOR = 2
 
 def get_version():
     return '%d.%d' % (MAJOR, MINOR)
