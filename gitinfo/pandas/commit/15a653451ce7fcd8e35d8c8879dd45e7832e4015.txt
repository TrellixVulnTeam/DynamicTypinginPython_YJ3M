commit 15a653451ce7fcd8e35d8c8879dd45e7832e4015
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Tue Mar 19 16:28:29 2019 -0700

    make core.config self-contained (#25613)

diff --git a/pandas/core/config.py b/pandas/core/config.py
index b6264a525..306311dc8 100644
--- a/pandas/core/config.py
+++ b/pandas/core/config.py
@@ -53,9 +53,6 @@ from contextlib import contextmanager
 import re
 import warnings
 
-import pandas.compat as compat
-from pandas.compat import lmap, map, u
-
 DeprecatedOption = namedtuple('DeprecatedOption', 'key msg rkey removal_ver')
 RegisteredOption = namedtuple('RegisteredOption',
                               'key defval doc validator cb')
@@ -140,7 +137,7 @@ def _describe_option(pat='', _print_desc=True):
     if len(keys) == 0:
         raise OptionError('No such keys(s)')
 
-    s = u('')
+    s = ''
     for k in keys:  # filter by pat
         s += _build_option_description(k)
 
@@ -634,7 +631,7 @@ def _build_option_description(k):
     o = _get_registered_option(k)
     d = _get_deprecated_option(k)
 
-    s = u('{k} ').format(k=k)
+    s = '{k} '.format(k=k)
 
     if o.doc:
         s += '\n'.join(o.doc.strip().split('\n'))
@@ -642,14 +639,14 @@ def _build_option_description(k):
         s += 'No description available.'
 
     if o:
-        s += (u('\n    [default: {default}] [currently: {current}]')
+        s += ('\n    [default: {default}] [currently: {current}]'
               .format(default=o.defval, current=_get_option(k, True)))
 
     if d:
-        s += u('\n    (Deprecated')
-        s += (u(', use `{rkey}` instead.')
+        s += '\n    (Deprecated'
+        s += (', use `{rkey}` instead.'
               .format(rkey=d.rkey if d.rkey else ''))
-        s += u(')')
+        s += ')'
 
     return s
 
@@ -776,8 +773,7 @@ def is_instance_factory(_type):
     """
     if isinstance(_type, (tuple, list)):
         _type = tuple(_type)
-        from pandas.io.formats.printing import pprint_thing
-        type_repr = "|".join(map(pprint_thing, _type))
+        type_repr = "|".join(map(str, _type))
     else:
         type_repr = "'{typ}'".format(typ=_type)
 
@@ -795,11 +791,11 @@ def is_one_of_factory(legal_values):
     legal_values = [c for c in legal_values if not callable(c)]
 
     def inner(x):
-        from pandas.io.formats.printing import pprint_thing as pp
         if x not in legal_values:
 
             if not any(c(x) for c in callables):
-                pp_values = pp("|".join(lmap(pp, legal_values)))
+                uvals = [str(lval) for lval in legal_values]
+                pp_values = "|".join(uvals)
                 msg = "Value must be one of {pp_values}"
                 if len(callables):
                     msg += " or a callable"
@@ -814,7 +810,6 @@ is_int = is_type_factory(int)
 is_bool = is_type_factory(bool)
 is_float = is_type_factory(float)
 is_str = is_type_factory(str)
-is_unicode = is_type_factory(compat.text_type)
 is_text = is_instance_factory((str, bytes))
 
 
