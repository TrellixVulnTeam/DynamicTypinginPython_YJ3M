commit ab60f4b1b05760f0b996cc0d9b553301c91a6dee
Author: Phillip Cloud <cpcloud@gmail.com>
Date:   Mon Sep 16 14:23:04 2013 -0400

    CLN: remove expr maybe_expression

diff --git a/pandas/computation/expr.py b/pandas/computation/expr.py
index db92e7f57..ff9adc26b 100644
--- a/pandas/computation/expr.py
+++ b/pandas/computation/expr.py
@@ -749,46 +749,6 @@ class Expr(StringMixin):
         self.env.locals.update(self.env.resolver_dict)
 
 
-# these we don't look for since column names can have these characters
-_needs_filter = frozenset(['and', 'or', 'not', 'not in', 'in'])
-
-# these OTOH can only be operators, so you cannot create column names that are
-# valid expressions
-_ops_to_filter = frozenset([' and ', ' or ', 'not ', ' in '])
-
-# if you don't filter out the above expressions you'll get a stack overflow,
-# because DataFrame.__getitem__ will continue to search for a column name then
-# an expression then a column name then an expression, and so on, until you
-# blow up the stack and kill a kitten.
-
-
-def maybe_expression(s, kind='pandas'):
-    """Loose checking if ``s`` is an expression.
-
-    Parameters
-    ----------
-    s : str or unicode
-        The expression to check
-    kind : str or unicode
-        The parser whose ops to check
-
-    Returns
-    -------
-    bool
-        ``True`` the expression contains some operators that would be valid
-        when parsed with the ``kind`` parser, otherwise ``False``.
-    """
-    if not isinstance(s, string_types):
-        return False
-
-    visitor = _parsers[kind]
-    ops = visitor.binary_ops + visitor.unary_ops
-    filtered = (frozenset(ops) | _ops_to_filter) - _needs_filter
-
-    # make sure we have an op at least
-    return any(op in s for op in filtered)
-
-
 def isexpr(s, check_names=True):
     """Strict checking for a valid expression."""
     try:
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 4a1155abf..86565a3a1 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -37,7 +37,7 @@ from pandas.core.internals import (BlockManager,
 from pandas.core.series import Series, _radd_compat
 import pandas.computation.expressions as expressions
 from pandas.computation.eval import eval as _eval
-from pandas.computation.expr import maybe_expression, _ensure_scope
+from pandas.computation.expr import _ensure_scope
 from pandas.compat.scipy import scoreatpercentile as _quantile
 from pandas.compat import(range, zip, lrange, lmap, lzip, StringIO, u,
                           OrderedDict, raise_with_traceback)
