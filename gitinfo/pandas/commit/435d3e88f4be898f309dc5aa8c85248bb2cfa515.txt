commit 435d3e88f4be898f309dc5aa8c85248bb2cfa515
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Mar 13 20:46:51 2012 -0400

    ENH: add axis argument to DataFrame.fillna, #174

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index f6f072d07..cd6fba022 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2392,7 +2392,7 @@ class DataFrame(NDFrame):
     #----------------------------------------------------------------------
     # Filling NA's
 
-    def fillna(self, value=None, method='pad', inplace=False):
+    def fillna(self, value=None, method='pad', axis=0, inplace=False):
         """
         Fill NA/NaN values using the specified method
 
@@ -2406,6 +2406,9 @@ class DataFrame(NDFrame):
             Value to use to fill holes (e.g. 0), alternately a dict of values
             specifying which value to use for each column (columns not in the
             dict will not be filled)
+        axis : {0, 1}, default 0
+            0: fill column-by-column
+            1: fill row-by-row
         inplace : boolean, default False
             If True, fill the DataFrame in place. Note: this will modify any
             other views on this DataFrame, like if you took a no-copy slice of
@@ -2425,12 +2428,14 @@ class DataFrame(NDFrame):
         self._consolidate_inplace()
 
         if value is None:
-            new_blocks = []
+            if self._is_mixed_type and axis == 1:
+                return self.T.fillna(method=method).T
 
+            new_blocks = []
             method = com._clean_fill_method(method)
             for block in self._data.blocks:
                 if isinstance(block, (FloatBlock, ObjectBlock)):
-                    newb = block.interpolate(method, inplace=inplace)
+                    newb = block.interpolate(method, axis=axis, inplace=inplace)
                 else:
                     newb = block if inplace else block.copy()
                 new_blocks.append(newb)
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 86315ec15..f1025fae4 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -216,16 +216,18 @@ class Block(object):
         else:
             return make_block(new_values, self.items, self.ref_items)
 
-    def interpolate(self, method='pad', inplace=False):
+    def interpolate(self, method='pad', axis=0, inplace=False):
         values = self.values if inplace else self.values.copy()
 
         if values.ndim != 2:
             raise NotImplementedError
 
+        transf = (lambda x: x) if axis == 0 else (lambda x: x.T)
+
         if method == 'pad':
-            _pad(values)
+            _pad(transf(values))
         else:
-            _backfill(values)
+            _backfill(transf(values))
 
         return make_block(values, self.items, self.ref_items)
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 0136e33c1..dd4cb12cf 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2989,6 +2989,19 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         # it works
         result = df.fillna({'a': 0, 'b': 5, 'd' : 7})
 
+    def test_fillna_columns(self):
+        df = DataFrame(np.random.randn(10, 10))
+        df.values[:, ::2] = np.nan
+
+        result = df.fillna(axis=1)
+        expected = df.T.fillna(method='pad').T
+        assert_frame_equal(result, expected)
+
+        df.insert(6, 'foo', 5)
+        result = df.fillna(axis=1)
+        expected = df.astype(float).fillna(axis=1)
+        assert_frame_equal(result, expected)
+
     def test_truncate(self):
         offset = datetools.bday
 
