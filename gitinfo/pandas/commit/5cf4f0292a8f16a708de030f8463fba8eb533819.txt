commit 5cf4f0292a8f16a708de030f8463fba8eb533819
Author: Matti Airas <matti.airas@eniram.fi>
Date:   Thu Dec 18 15:40:26 2014 +0200

    Fixes GH9099: Support simultaneous copy and dtype args in DataFrame init

diff --git a/doc/source/whatsnew/v0.16.0.txt b/doc/source/whatsnew/v0.16.0.txt
index 8720774b8..0389b829b 100644
--- a/doc/source/whatsnew/v0.16.0.txt
+++ b/doc/source/whatsnew/v0.16.0.txt
@@ -51,3 +51,4 @@ Bug Fixes
 
 - Fixed compatibility issue in ``DatetimeIndex`` affecting architectures where ``numpy.int_`` defaults to ``numpy.int32`` (:issue:`8943`)
 - Bug in ``MultiIndex.has_duplicates`` when having many levels causes an indexer overflow (:issue:`9075`)
+- DataFrame now properly supports simultaneous ``copy`` and ``dtype`` arguments in constructor (:issue:`9099`)
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 0fc717141..392fda6ee 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -121,11 +121,11 @@ class NDFrame(PandasObject):
                 mgr = mgr.reindex_axis(
                     axe, axis=self._get_block_manager_axis(a), copy=False)
 
-        # do not copy BlockManager unless explicitly done
-        if copy and dtype is None:
+        # make a copy if explicitly requested
+        if copy:
             mgr = mgr.copy()
-        elif dtype is not None:
-            # avoid copy if we can
+        if dtype is not None:
+            # avoid further copies if we can
             if len(mgr.blocks) > 1 or mgr.blocks[0].values.dtype != dtype:
                 mgr = mgr.astype(dtype=dtype)
         return mgr
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 40823537d..a19a32ea7 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2489,6 +2489,17 @@ class TestDataFrame(tm.TestCase, CheckIndexing,
         # this is ok
         df['foo2'] = np.ones((4,2)).tolist()
 
+    def test_constructor_dtype_copy(self):
+        orig_df = DataFrame({
+            'col1': [1.],
+            'col2': [2.],
+            'col3': [3.]})
+
+        new_df = pd.DataFrame(orig_df, dtype=float, copy=True)
+
+        new_df['col1'] = 200.
+        self.assertEqual(orig_df['col1'][0], 1.)
+
     def test_constructor_dtype_nocast_view(self):
         df = DataFrame([[1, 2]])
         should_be_view = DataFrame(df, dtype=df[0].dtype)
