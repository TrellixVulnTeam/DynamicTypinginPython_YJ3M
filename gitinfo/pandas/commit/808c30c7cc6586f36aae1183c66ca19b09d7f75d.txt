commit 808c30c7cc6586f36aae1183c66ca19b09d7f75d
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Nov 27 19:42:57 2012 -0500

    BUG: don't let dateutil do weird stuff with empty strings. close #2263

diff --git a/RELEASE.rst b/RELEASE.rst
index a34d5f0d4..e9f31c092 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -72,6 +72,8 @@ pandas 0.10.0
   - Respect dtype=object in DataFrame constructor (#2291)
   - Fix DatetimeIndex.join bug with tz-aware indexes and how='outer' (#2317)
   - pop(...) and del works with DataFrame with duplicate columns (#2349)
+  - Treat empty strings as NA in date parsing (rather than let dateutil do
+    something weird) (#2263)
 
 pandas 0.9.1
 ============
diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index 9a95b8e91..cb02506e8 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -1763,6 +1763,12 @@ class TestCParserHighMemory(ParserTests, unittest.TestCase):
         ex_dtype = np.dtype([(str(i), 'u1') for i in range(4)])
         self.assertEqual(result.dtype, ex_dtype)
 
+    def test_parse_dates_empty_string(self):
+        # #2263
+        s = StringIO("Date, test\n2012-01-01, 1\n,2")
+        result = pd.read_csv(s, parse_dates=["Date"], na_filter=False)
+        self.assertTrue(result['Date'].isnull()[1])
+
 class TestCParserLowMemory(ParserTests, unittest.TestCase):
 
     def read_csv(self, *args, **kwds):
diff --git a/pandas/src/inference.pyx b/pandas/src/inference.pyx
index 6b50f33ed..8e8b2d15a 100644
--- a/pandas/src/inference.pyx
+++ b/pandas/src/inference.pyx
@@ -544,7 +544,10 @@ def try_parse_dates(ndarray[object] values, parser=None,
         # EAFP here
         try:
             for i from 0 <= i < n:
-                result[i] = parse_date(values[i])
+                if values[i] == '':
+                    result[i] = np.nan
+                else:
+                    result[i] = parse_date(values[i])
         except Exception:
             # failed
             return values
@@ -553,7 +556,10 @@ def try_parse_dates(ndarray[object] values, parser=None,
 
         try:
             for i from 0 <= i < n:
-                result[i] = parse_date(values[i])
+                if values[i] == '':
+                    result[i] = np.nan
+                else:
+                    result[i] = parse_date(values[i])
         except Exception:
             # raise if passed parser and it failed
             raise
