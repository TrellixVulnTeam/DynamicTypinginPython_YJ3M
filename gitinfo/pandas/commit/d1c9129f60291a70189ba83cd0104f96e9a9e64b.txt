commit d1c9129f60291a70189ba83cd0104f96e9a9e64b
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun May 8 00:05:54 2011 -0400

    unit tests, identified weird NumPy issue with r* operators and sort of worked around

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index d211321c0..56f3ac6fa 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -40,7 +40,7 @@ Returns
 result : DataFrame
 """
 
-def arith_method(func, name, default_axis='columns'):
+def _arith_method(func, name, default_axis='columns'):
     def f(self, other, axis=default_axis):
         if isinstance(other, DataFrame):    # Another DataFrame
             return self._combine_frame(other, func)
@@ -568,31 +568,31 @@ class DataFrame(Picklable, Groupable):
 #-------------------------------------------------------------------------------
 # Arithmetic methods
 
-    add = arith_method(operator.add, 'add')
-    mul = arith_method(operator.mul, 'multiply')
-    sub = arith_method(operator.sub, 'subtract')
-    div = arith_method(operator.div, 'divide')
-
-    radd = arith_method(operator.add, 'add')
-    rmul = arith_method(operator.mul, 'multiply')
-    rsub = arith_method(lambda x, y: y - x, 'subtract')
-    rdiv = arith_method(lambda x, y: y / x, 'divide')
-
-    __add__ = arith_method(operator.add, '__add__', default_axis=None)
-    __sub__ = arith_method(operator.sub, '__sub__', default_axis=None)
-    __mul__ = arith_method(operator.mul, '__mul__', default_axis=None)
-    __div__ = arith_method(operator.div, '__div__', default_axis=None)
-    __truediv__ = arith_method(operator.truediv, '__truediv__',
+    add = _arith_method(operator.add, 'add')
+    mul = _arith_method(operator.mul, 'multiply')
+    sub = _arith_method(operator.sub, 'subtract')
+    div = _arith_method(operator.div, 'divide')
+
+    radd = _arith_method(operator.add, 'add')
+    rmul = _arith_method(operator.mul, 'multiply')
+    rsub = _arith_method(lambda x, y: y - x, 'subtract')
+    rdiv = _arith_method(lambda x, y: y / x, 'divide')
+
+    __add__ = _arith_method(operator.add, '__add__', default_axis=None)
+    __sub__ = _arith_method(operator.sub, '__sub__', default_axis=None)
+    __mul__ = _arith_method(operator.mul, '__mul__', default_axis=None)
+    __div__ = _arith_method(operator.div, '__div__', default_axis=None)
+    __truediv__ = _arith_method(operator.truediv, '__truediv__',
                                default_axis=None)
-    __pow__ = arith_method(operator.pow, '__pow__', default_axis=None)
+    __pow__ = _arith_method(operator.pow, '__pow__', default_axis=None)
 
-    __radd__ = arith_method(operator.add, '__radd__', default_axis=None)
-    __rmul__ = arith_method(operator.mul, '__rmul__', default_axis=None)
-    __rsub__ = arith_method(lambda x, y: y - x, '__rsub__', default_axis=None)
-    __rdiv__ = arith_method(lambda x, y: y / x, '__rdiv__', default_axis=None)
-    __rtruediv__ = arith_method(lambda x, y: y / x, '__rtruediv__',
+    __radd__ = _arith_method(operator.add, '__radd__', default_axis=None)
+    __rmul__ = _arith_method(operator.mul, '__rmul__', default_axis=None)
+    __rsub__ = _arith_method(lambda x, y: y - x, '__rsub__', default_axis=None)
+    __rdiv__ = _arith_method(lambda x, y: y / x, '__rdiv__', default_axis=None)
+    __rtruediv__ = _arith_method(lambda x, y: y / x, '__rtruediv__',
                                 default_axis=None)
-    __rpow__ = arith_method(lambda x, y: y ** x, '__rpow__', default_axis=None)
+    __rpow__ = _arith_method(lambda x, y: y ** x, '__rpow__', default_axis=None)
 
     def __neg__(self):
         return self * -1
diff --git a/pandas/core/series.py b/pandas/core/series.py
index e8ec8b1ab..ffab25e50 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -6,6 +6,7 @@ Data structure for 1-dimensional cross-sectional and time series data
 # pylint: disable=W0703,W0622
 
 import itertools
+import operator
 import sys
 import warnings
 
@@ -24,7 +25,7 @@ __all__ = ['Series', 'TimeSeries']
 #-------------------------------------------------------------------------------
 # Wrapper function for Series arithmetic methods
 
-def _seriesOpWrap(opname):
+def _arith_method(op, name):
     """
     Wrapper function for Series arithmetic operations, to avoid
     code duplication.
@@ -38,10 +39,11 @@ def _seriesOpWrap(opname):
     def wrapper(self, other):
         from pandas.core.frame import DataFrame
 
-        func = getattr(self.values, opname)
+        values = self.values
+
         if isinstance(other, Series):
             if self.index.equals(other.index):
-                return Series(func(other.values), index=self.index)
+                return Series(op(values, other.values), index=self.index)
 
             newIndex = self.index + other.index
 
@@ -56,25 +58,25 @@ def _seriesOpWrap(opname):
 
                 # buffered Cython function expects double type
 
-                arr = tseries.combineFunc(opname, newIndex,
+                arr = tseries.combineFunc(name, newIndex,
                                           this, other,
                                           self.index.indexMap,
                                           other.index.indexMap)
             except Exception:
                 arr = Series.combineFunc(self, other,
-                                         getattr(type(self[0]), opname))
+                                         getattr(type(self[0]), name))
             result = Series(arr, index=newIndex)
             return result
 
         elif isinstance(other, DataFrame):
-            reverse_op = MIRROR_OPS.get(opname)
+            reverse_op = MIRROR_OPS.get(name)
 
             if reverse_op is None:
                 raise Exception('Cannot do %s op, sorry!')
 
             return getattr(other, reverse_op)(self)
         else:
-            return Series(func(other), index=self.index)
+            return Series(op(values, other), index=self.index)
     return wrapper
 
 #-------------------------------------------------------------------------------
@@ -368,12 +370,12 @@ class Series(np.ndarray, Picklable, Groupable):
 #-------------------------------------------------------------------------------
 #   Arithmetic operators
 
-    __add__ = _seriesOpWrap('__add__')
-    __sub__ = _seriesOpWrap('__sub__')
-    __mul__ = _seriesOpWrap('__mul__')
-    __div__ = _seriesOpWrap('__div__')
-    __truediv__ = _seriesOpWrap('__truediv__')
-    __pow__ = _seriesOpWrap('__pow__')
+    __add__ = _arith_method(operator.add, '__add__')
+    __sub__ = _arith_method(operator.sub, '__sub__')
+    __mul__ = _arith_method(operator.mul, '__mul__')
+    __div__ = _arith_method(operator.div, '__div__')
+    __truediv__ = _arith_method(operator.truediv, '__truediv__')
+    __pow__ = _arith_method(operator.pow, '__pow__')
 
     # Inplace operators
     __iadd__ = __add__
diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index 45c5e71eb..ebc69bc92 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -62,14 +62,12 @@ _MIRROR_OPS = {
     'mul' : '__rmul__',
 }
 
-def _sparse_op_wrap(name):
+def _sparse_op_wrap(op, name):
     """
     Wrapper function for Series arithmetic operations, to avoid
     code duplication.
     """
     def wrapper(self, other):
-        py_op = getattr(operator, name)
-
         if isinstance(other, SparseSeries):
             if np.isnan(self.fill_value):
                 sparse_op = lambda a, b: _sparse_nanop(a, b, name)
@@ -86,13 +84,13 @@ def _sparse_op_wrap(name):
                 other = other.reindex(new_index)
 
             if self.sp_index.equals(other.sp_index):
-                result = py_op(this.sp_values, other.sp_values)
+                result = op(this.sp_values, other.sp_values)
                 result_index = self.sp_index
             else:
                 result, result_index = sparse_op(this, other)
 
             try:
-                fill_value = py_op(this.fill_value, other.fill_value)
+                fill_value = op(this.fill_value, other.fill_value)
             except ZeroDivisionError:
                 fill_value = nan
 
@@ -103,13 +101,18 @@ def _sparse_op_wrap(name):
         elif isinstance(other, SparseDataFrame):
             reverse_op = _MIRROR_OPS.get(name)
             if reverse_op is None: # pragma: no cover
-                raise Exception('Cannot do %s op, sorry!')
+                raise Exception('Cannot do %s op, sorry!' % name)
             return getattr(other, reverse_op)(self)
         elif np.isscalar(other):
-            return SparseSeries(py_op(self.sp_values, other),
+            new_fill_value = op(np.float64(self.fill_value),
+                                np.float64(other))
+
+            return SparseSeries(op(self.sp_values, other),
                                 index=self.index,
                                 sparse_index=self.sp_index,
-                                fill_value=py_op(self.fill_value, other))
+                                fill_value=new_fill_value)
+        else:
+            raise Exception('operation with %s not supported' % type(other))
 
     wrapper.__name__ = name
     return wrapper
@@ -161,39 +164,49 @@ class SparseSeries(Series):
     change values, convert to dense, make your changes, then convert back to
     sparse
     """
+    __array_priority__ = 15
+
     sp_index = None
     fill_value = None
 
     def __new__(cls, data, index=None, sparse_index=None, kind='block',
                 fill_value=None, copy=False):
 
-        if isinstance(data, SparseSeries):
-            if index is None:
-                index = data.index
-
-            if fill_value is None:
+        is_sparse_series = isinstance(data, SparseSeries)
+        if fill_value is None:
+            if is_sparse_series:
                 fill_value = data.fill_value
+            else:
+                fill_value = nan
 
-            if index is not None:
+        if is_sparse_series:
+            if index is None:
+                index = data.index
+            else:
                 assert(len(index) == len(data))
 
             sparse_index = data.sp_index
             values = np.asarray(data)
         elif isinstance(data, (Series, dict)):
-            if fill_value is None:
-                fill_value = nan
-
-            data = Series(data)
             if index is None:
                 index = data.index
+
+            data = Series(data)
             values, sparse_index = make_sparse(data, kind=kind,
                                                fill_value=fill_value)
         elif np.isscalar(data): # pragma: no cover
-            raise Exception('not supported yet')
-        else:
-            if fill_value is None:
-                fill_value = nan
+            if index is None:
+                raise Exception('must pass index!')
+
+            values = np.empty(len(index))
+            values.fill(data)
 
+            # TODO: more efficient
+
+            values, sparse_index = make_sparse(values, kind=kind,
+                                               fill_value=fill_value)
+
+        else:
             # array-like
             if sparse_index is None:
                 values, sparse_index = make_sparse(data, kind=kind,
@@ -273,12 +286,20 @@ class SparseSeries(Series):
 
     # Arithmetic operators
 
-    __add__ = _sparse_op_wrap('add')
-    __sub__ = _sparse_op_wrap('sub')
-    __mul__ = _sparse_op_wrap('mul')
-    __div__ = _sparse_op_wrap('div')
-    __truediv__ = _sparse_op_wrap('div')
-    __pow__ = _sparse_op_wrap('pow')
+    __add__ = _sparse_op_wrap(operator.add, 'add')
+    __sub__ = _sparse_op_wrap(operator.sub, 'sub')
+    __mul__ = _sparse_op_wrap(operator.mul, 'mul')
+    __div__ = _sparse_op_wrap(operator.div, 'div')
+    __truediv__ = _sparse_op_wrap(operator.truediv, 'truediv')
+    __pow__ = _sparse_op_wrap(operator.pow, 'pow')
+
+    # reverse operators
+    __radd__ = _sparse_op_wrap(operator.add, '__radd__')
+    __rmul__ = _sparse_op_wrap(operator.mul, '__rmul__')
+    __rsub__ = _sparse_op_wrap(lambda x, y: y - x, '__rsub__')
+    __rdiv__ = _sparse_op_wrap(lambda x, y: y / x, '__rdiv__')
+    __rtruediv__ = _sparse_op_wrap(lambda x, y: y / x, '__rtruediv__')
+    __rpow__ = _sparse_op_wrap(lambda x, y: y ** x, '__rpow__')
 
     # Inplace operators
     __iadd__ = __add__
@@ -363,7 +384,8 @@ class SparseSeries(Series):
     def copy(self):
         values = self.sp_values.copy()
         return SparseSeries(values, index=self.index,
-                            sparse_index=self.sp_index)
+                            sparse_index=self.sp_index,
+                            fill_value=self.fill_value)
 
     def reindex(self, new_index, method=None):
         """
@@ -409,16 +431,6 @@ class SparseSeries(Series):
         """
         pass
 
-    def put(self, indices, values):
-        """
-        Sparse-compatible version of ndarray.put
-
-        Returns
-        -------
-        y : SparseSeries
-        """
-        pass
-
     def count(self):
         sp_values = self.sp_values
         valid_spvals = np.isfinite(sp_values).sum()
@@ -507,7 +519,8 @@ class SparseDataFrame(DataFrame):
 
         sp_maker = lambda x: SparseSeries(x, index=index,
                                           kind=self.default_kind,
-                                          fill_value=self.default_fill_value)
+                                          fill_value=self.default_fill_value,
+                                          copy=True)
 
         sdict = {}
         for k, v in data.iteritems():
@@ -521,7 +534,7 @@ class SparseDataFrame(DataFrame):
                 if isinstance(v, dict):
                     v = [v.get(i, nan) for i in index]
 
-                v = sp_maker(v).copy()
+                v = sp_maker(v)
             sdict[k] = v
 
         # TODO: figure out how to handle this case, all nan's?
@@ -534,6 +547,17 @@ class SparseDataFrame(DataFrame):
 
         return sdict, columns, index
 
+    def to_dense(self):
+        """
+        Convert to dense DataFrame
+
+        Returns
+        -------
+        df : DataFrame
+        """
+        data = dict((k, v.to_dense()) for k, v in self.iteritems())
+        return DataFrame(data, index=self.index)
+
     def copy(self):
         """
         Make a deep copy of this frame
@@ -544,34 +568,44 @@ class SparseDataFrame(DataFrame):
                                kind=self.default_kind)
 
     def _insert_item(self, key, value):
+        sp_maker = lambda x: SparseSeries(x, index=self.index,
+                                          fill_value=self.default_fill_value)
         if hasattr(value, '__iter__'):
             if isinstance(value, Series):
                 cleanSeries = value.reindex(self.index)
                 if not isinstance(value, SparseSeries):
-                    cleanSeries = SparseSeries(cleanSeries)
+                    cleanSeries = sp_maker(cleanSeries)
             else:
-                cleanSeries = SparseSeries(value, index=self.index,
-                                           fill_value=self.default_fill_value)
+                cleanSeries = sp_maker(value)
 
             self._series[key] = cleanSeries
         # Scalar
         else:
-            self._series[key] = SparseSeries(value, index=self.index)
+            self._series[key] = sp_maker(value)
 
         if key not in self.columns:
             loc = self._get_insert_loc(key)
             self._insert_column_index(key, loc)
 
-    def to_dense(self):
-        """
-        Convert to dense DataFrame
+    def _combine_match_columns(self, other, func):
+        # patched version of DataFrame._combine_match_columns to account for
+        # NumPy circumventing __rsub__ with float64 types, e.g.: 3.0 - series,
+        # where 3.0 is numpy.float64 and series is a SparseSeries. Still
+        # possible for this to happen, which is bothersome
 
-        Returns
-        -------
-        df : DataFrame
-        """
-        data = dict((k, v.to_dense()) for k, v in self.iteritems())
-        return DataFrame(data, index=self.index)
+        new_data = {}
+
+        union = intersection = self.columns
+
+        if not union.equals(other.index):
+            union = other.index.union(self.columns)
+            intersection = other.index.intersection(self.columns)
+
+        for col in intersection:
+            new_data[col] = func(self[col], float(other[col]))
+
+        return self._constructor(new_data, index=self.index,
+                                 columns=union)
 
     def _reindex_index(self, index, method):
         if self.index.equals(index):
diff --git a/pandas/core/tests/test_sparse.py b/pandas/core/tests/test_sparse.py
index 9b63181b4..7edc3ab1e 100644
--- a/pandas/core/tests/test_sparse.py
+++ b/pandas/core/tests/test_sparse.py
@@ -3,8 +3,11 @@
 from unittest import TestCase
 import operator
 
+import nose
+
 from numpy import nan
 import numpy as np
+dec = np.testing.dec
 
 from pandas.util.testing import (assert_almost_equal, assert_series_equal,
                                  assert_frame_equal)
@@ -200,6 +203,13 @@ class TestSparseSeries(TestCase):
         self.assert_(cop.sp_values[0] == 97)
         self.assert_(self.bseries.sp_values[0] != 97)
 
+        # correct fill value
+        zbcop = self.zbseries.copy()
+        zicop = self.ziseries.copy()
+
+        assert_sp_series_equal(zbcop, self.zbseries)
+        assert_sp_series_equal(zicop, self.ziseries)
+
     def test_kind(self):
         self.assertEquals(self.bseries.kind, 'block')
         self.assertEquals(self.iseries.kind, 'integer')
@@ -270,7 +280,7 @@ class TestSparseSeries(TestCase):
         self.assertRaises(Exception, self.iseries.__setitem__, 5, 7.)
 
     def test_setslice(self):
-        self.assertRaises(Exception, lambda: eval('self.bseries[5:10] = 10'))
+        self.assertRaises(Exception, self.bseries.__setslice__, 5, 10, 7.)
 
     def test_operators(self):
         def _check_op(a, b, op):
@@ -311,6 +321,19 @@ class TestSparseSeries(TestCase):
         check(self.zbseries, self.zbseries2)
         check(self.ziseries, self.ziseries2)
 
+    def test_operators_corner(self):
+        self.assertRaises(Exception, self.bseries.__add__,
+                          self.bseries.to_dense())
+
+    # @dec.knownfailureif(True, 'Known NumPy failer as of 1.5.1')
+    def test_operators_corner2(self):
+        raise nose.SkipTest('known failer on numpy 1.5.1')
+
+        # NumPy circumvents __r*__ operations
+        val = np.float64(3.0)
+        result = val - self.zbseries
+        assert_sp_series_equal(result, 3 - self.zbseries)
+
     def test_reindex(self):
         def _compare_with_series(sps, new_index):
             spsre = sps.reindex(new_index)
@@ -342,7 +365,8 @@ class TestSparseSeries(TestCase):
         _compare_with_series(sp, np.arange(10))
 
     def test_repr(self):
-        pass
+        bsrepr = repr(self.bseries)
+        isrepr = repr(self.iseries)
 
     def test_iter(self):
         pass
@@ -431,6 +455,11 @@ class TestSparseDataFrame(TestCase):
 
         self.assert_(isinstance(self.iframe['A'].sp_index, IntIndex))
 
+        # constructed zframe from matrix above
+        self.assertEquals(self.zframe['A'].fill_value, 0)
+        assert_almost_equal([0, 0, 0, 0, 1, 2, 3, 4, 5, 6],
+                            self.zframe['A'].values)
+
         # construct from nested dict
         data = {}
         for c, s in self.frame.iteritems():
@@ -439,6 +468,8 @@ class TestSparseDataFrame(TestCase):
         sdf = SparseDataFrame(data)
         assert_sp_frame_equal(sdf, self.frame)
 
+        # TODO: test data is copied from inputs
+
     def test_array_interface(self):
         res = np.sqrt(self.frame)
         dres = np.sqrt(self.frame.to_dense())
@@ -468,9 +499,8 @@ class TestSparseDataFrame(TestCase):
     def test_sparse_series_ops(self):
         self._check_frame_ops(self.frame)
         self._check_frame_ops(self.iframe)
-
-        self._check_frame_ops(self.zframe)
         self._check_frame_ops(self.fill_frame)
+        self._check_frame_ops(self.zframe)
 
     def _check_frame_ops(self, frame):
         def _compare_to_dense(a, b, da, db, op, fill=np.NaN):
@@ -517,28 +547,56 @@ class TestSparseDataFrame(TestCase):
     def test_scalar_ops(self):
         pass
 
-    def test_insert_col(self):
-        sdf = self.frame.copy()
-
-        # insert SparseSeries
-        sdf['E'] = sdf['A']
-        self.assert_(isinstance(sdf['E'], SparseSeries))
-        assert_sp_series_equal(sdf['E'], sdf['A'])
-
-        # TODO insert SparseSeries differently-indexed
-        sdf['E'] = sdf['A'][::2]
-
-        # insert Series
-        sdf['F'] = sdf['A'].to_dense()
-        self.assert_(isinstance(sdf['F'], SparseSeries))
-        assert_sp_series_equal(sdf['F'], sdf['A'])
-
-        # insert Series differently-indexed
-
-        # insert ndarray
-
-        # insert ndarray wrong size
-
+    def test_insert_item(self):
+        def _check_frame(frame):
+            N = len(frame)
+
+            # insert SparseSeries
+            frame['E'] = frame['A']
+            self.assert_(isinstance(frame['E'], SparseSeries))
+            assert_sp_series_equal(frame['E'], frame['A'])
+
+            # insert SparseSeries differently-indexed
+            to_insert = frame['A'][::2]
+            frame['E'] = to_insert
+            assert_series_equal(frame['E'].to_dense(),
+                                to_insert.to_dense().reindex(frame.index))
+
+            # insert Series
+            frame['F'] = frame['A'].to_dense()
+            self.assert_(isinstance(frame['F'], SparseSeries))
+            assert_sp_series_equal(frame['F'], frame['A'])
+
+            # insert Series differently-indexed
+            to_insert = frame['A'].to_dense()[::2]
+            frame['G'] = to_insert
+            assert_series_equal(frame['G'].to_dense(),
+                                to_insert.reindex(frame.index))
+
+            # insert ndarray
+            frame['H'] = np.random.randn(N)
+            self.assert_(isinstance(frame['H'], SparseSeries))
+
+            to_sparsify = np.random.randn(N)
+            to_sparsify[N // 2:] = frame.default_fill_value
+            frame['I'] = to_sparsify
+            self.assertEquals(len(frame['I'].sp_values), N // 2)
+
+            # insert ndarray wrong size
+            self.assertRaises(Exception, frame.__setitem__, 'foo',
+                              np.random.randn(N - 1))
+
+            # scalar value
+            frame['J'] = 5
+            self.assertEquals(len(frame['J'].sp_values), N)
+            self.assert_((frame['J'].sp_values == 5).all())
+
+            frame['K'] = frame.default_fill_value
+            self.assertEquals(len(frame['K'].sp_values), 0)
+
+        _check_frame(self.frame)
+        _check_frame(self.zframe)
+        _check_frame(self.fill_frame)
 
     def test_corr(self):
         res = self.frame.corr()
