commit 080ef0ceb1fc1f3b13695bdfb906beac3cf76b09
Author: akosel <aaronjkosel@gmail.com>
Date:   Sun Mar 11 12:43:10 2018 +0000

    DOC: update the DataFrame.iat[] docstring (#20219)
    
    * DOC: update the DataFrame.iat[] docstring
    
    * Update based on PR comments
    
    * Update based on PR comments
    
    * Singular not plural
    
    * Update to account for use with Series. Add example using Series.
    
    * Update indexing.py
    
    * PEP8

diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index ec2874b3b..560e7638b 100755
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -1920,11 +1920,49 @@ class _AtIndexer(_ScalarAccessIndexer):
 
 
 class _iAtIndexer(_ScalarAccessIndexer):
-    """Fast integer location scalar accessor.
+    """
+    Access a single value for a row/column pair by integer position.
 
-    Similarly to ``iloc``, ``iat`` provides **integer** based lookups.
-    You can also set using these indexers.
+    Similar to ``iloc``, in that both provide integer-based lookups. Use
+    ``iat`` if you only need to get or set a single value in a DataFrame
+    or Series.
+
+    See Also
+    --------
+    DataFrame.at : Access a single value for a row/column label pair
+    DataFrame.loc : Access a group of rows and columns by label(s)
+    DataFrame.iloc : Access a group of rows and columns by integer position(s)
+
+    Examples
+    --------
+    >>> df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],
+    ...                   columns=['A', 'B', 'C'])
+    >>> df
+        A   B   C
+    0   0   2   3
+    1   0   4   1
+    2  10  20  30
+
+    Get value at specified row/column pair
 
+    >>> df.iat[1, 2]
+    1
+
+    Set value at specified row/column pair
+
+    >>> df.iat[1, 2] = 10
+    >>> df.iat[1, 2]
+    10
+
+    Get value within a series
+
+    >>> df.loc[0].iat[1]
+    2
+
+    Raises
+    ------
+    IndexError
+        When integer position is out of bounds
     """
 
     _takeable = True
