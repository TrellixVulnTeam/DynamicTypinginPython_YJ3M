commit 6fcad98708a3b68b6acfcfb0aa583cd84ef8d5e8
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Jun 26 23:44:11 2011 -0400

    more deprecations, release notes, parsers docs and added new functions to pandas namespace

diff --git a/RELEASE.rst b/RELEASE.rst
index ea69cc620..59ba07ecb 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -115,8 +115,13 @@ Release notes
   avoid using Python built-in name
 * `DataFrame.rows()` removed (use `DataFrame.index`)
 * Added deprecation warning to `DataFrame.cols()`, to be removed in next release
-* `DataFrame` deprecations: `merge`, `asMatrix`, `toDataMatrix`,
-  `_firstTimeWithValue`, `_lastTimeWithValue`
+* `DataFrame` deprecations and de-camelCasing: `merge`, `asMatrix`,
+  `toDataMatrix`, `_firstTimeWithValue`, `_lastTimeWithValue`, `toRecords`,
+  `fromRecords`
+* `pandas.io.parsers` method deprecations
+  * `parseCSV` is now `read_csv` and keyword arguments have been de-camelCased
+  * `parseText` is now `read_table`
+  * `parseExcel` is replaced by the `ExcelFile` class and its `parse` method
 * `fillMethod` arguments (deprecated in prior release) removed, should be
   replaced with `method`
 * `Series.fill`, `DataFrame.fill`, and `WidePanel.fill` removed, use `fillna`
@@ -126,7 +131,7 @@ Release notes
 
 * Column ordering in `pandas.io.parsers.parseCSV` will match CSV in the presence
   of mixed-type data
-* Fixed handling of Excel 2003 dates in `ExcelFile` / `parseExcel`
+* Fixed handling of Excel 2003 dates in `pandas.io.parsers`
 * `DateRange` caching was happening with high resolution `DateOffset` objects,
   e.g. `DateOffset(seconds=1)`. This has been fixed
 * Fixed __truediv__ issue in `DataFrame`
diff --git a/pandas/__init__.py b/pandas/__init__.py
index 0063917c1..b53555a70 100644
--- a/pandas/__init__.py
+++ b/pandas/__init__.py
@@ -10,7 +10,8 @@ from pandas.version import version as __version__
 from pandas.info import __doc__
 
 from pandas.core.api import *
-from pandas.io.parsers import parseCSV, parseText, parseExcel
+from pandas.io.parsers import (parseCSV, parseText, parseExcel, read_csv,
+                               read_table, ExcelFile)
 from pandas.io.pytables import HDFStore
 from pandas.stats.api import *
 from pandas.util.testing import debug
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index d42463c58..b340366b9 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -333,7 +333,7 @@ class DataFrame(PandasGeneric):
         return dict((k, v.toDict()) for k, v in self.iteritems())
 
     @classmethod
-    def fromRecords(cls, data, indexField=None):
+    def from_records(cls, data, indexField=None):
         """
         Convert structured or record ndarray to DataFrame
 
@@ -360,7 +360,7 @@ class DataFrame(PandasGeneric):
 
         return cls(sdict, index=index, columns=columns)
 
-    def toRecords(self, index=True):
+    def to_records(self, index=True):
         """
         Convert DataFrame to record array. Index will be put in the
         'index' field of the record array.
@@ -2440,6 +2440,17 @@ class DataFrame(PandasGeneric):
                       "instead", FutureWarning)
         return self.as_matrix(*args, **kwargs)
 
+    def toRecords(self, *args, **kwargs): # pragma: no cover
+        warnings.warn("toRecords is deprecated. Use 'to_records' "
+                      "instead", FutureWarning)
+        return self.to_records(*args, **kwargs)
+
+    @classmethod
+    def fromRecords(cls, *args, **kwargs): # pragma: no cover
+        warnings.warn("fromRecords is deprecated. Use 'from_records' "
+                      "instead", FutureWarning)
+        return cls.from_records(*args, **kwargs)
+
     def _firstTimeWithValue(self): # pragma: no cover
         warnings.warn("_firstTimeWithValue is deprecated. Use "
                       "first_valid_index instead", FutureWarning)
diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index ab451c728..a63a0fe62 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -13,7 +13,7 @@ from pandas.core.index import Index
 from pandas.core.frame import DataFrame
 
 def read_csv(filepath, header=0, skiprows=None, index_col=0,
-             na_values=None):
+             na_values=None, date_parser=None):
     """
     Read CSV file into DataFrame
 
@@ -28,6 +28,8 @@ def read_csv(filepath, header=0, skiprows=None, index_col=0,
     index_col : int, default 0
         Column to use as the row labels of the DataFrame. Pass None if there is
         no such column
+    na_values : list-like, default None
+        List of strings to recognize as NA/NaN
     """
     import csv
     try:
@@ -43,11 +45,11 @@ def read_csv(filepath, header=0, skiprows=None, index_col=0,
     else:
         lines = [l for l in reader]
     f.close()
-    return simpleParser(lines, header=header, indexCol=index_col,
-                        na_values=na_values)
+    return _simple_parser(lines, header=header, indexCol=index_col,
+                          na_values=na_values, date_parser=date_parser)
 
 def read_table(filepath, sep='\t', header=0, skiprows=None, index_col=0,
-               na_values=None, names=None):
+               na_values=None, names=None, date_parser=None):
     """
     Read delimited file into DataFrame
 
@@ -63,6 +65,8 @@ def read_table(filepath, sep='\t', header=0, skiprows=None, index_col=0,
     index_col : int, default 0
         Column to use as the row labels of the DataFrame. Pass None if there is
         no such column
+    na_values : list-like, default None
+        List of strings to recognize as NA/NaN
     """
     reader = open(filepath,'rb')
 
@@ -73,11 +77,12 @@ def read_table(filepath, sep='\t', header=0, skiprows=None, index_col=0,
         lines = [l for l in reader]
 
     lines = [re.split(sep, l.rstrip()) for l in lines]
-    return simpleParser(lines, header=header, indexCol=index_col,
-                        colNames=names, na_values=na_values)
+    return _simple_parser(lines, header=header, indexCol=index_col,
+                          colNames=names, na_values=na_values,
+                          date_parser=date_parser)
 
-def simpleParser(lines, colNames=None, header=0, indexCol=0,
-                 na_values=None):
+def _simple_parser(lines, colNames=None, header=0, indexCol=0,
+                   na_values=None, date_parser=None, parse_dates=True):
     """
     Workhorse function for processing nested list into DataFrame
 
@@ -111,7 +116,9 @@ def simpleParser(lines, colNames=None, header=0, indexCol=0,
     if indexCol is not None:
         index_name = columns[indexCol]
         # try to parse dates
-        index = _try_parse_dates(data.pop(index_name))
+        index = data.pop(index_name)
+        if parse_dates:
+            index = _try_parse_dates(index, parser=date_parser)
     else:
         index = np.arange(len(data.values()[0]))
 
@@ -157,19 +164,19 @@ def _convert_to_ndarrays(dct):
 
     return result
 
-def _try_parse_dates(values):
-    try:
-        from dateutil import parser
-        parse_date = parser.parse
-    except ImportError:
-        def parse_date(s):
-            try:
-                return datetime.strptime(s, '%m/%d/%Y')
-            except Exception:
-                return s
-
+def _try_parse_dates(values, parser=None):
+    if parser is None:
+        try:
+            from dateutil import parser
+            parse_date = parser.parse
+        except ImportError:
+            def parse_date(s):
+                try:
+                    return datetime.strptime(s, '%m/%d/%Y')
+                except Exception:
+                    return s
+    # EAFP
     try:
-        # easier to ask forgiveness than permission
         return [parse_date(val) for val in values]
     except Exception:
         # failed
@@ -181,19 +188,22 @@ def _try_parse_dates(values):
 
 class ExcelFile(object):
     """
-    Class for parsing tabular .xls sheets into DataFrame objects, uses xlrd
+    Class for parsing tabular .xls sheets into DataFrame objects, uses xlrd. See
+    ExcelFile.parse for more documentation
 
     Parameters
     ----------
     path : string
         Path to xls file
     """
-
     def __init__(self, path):
         import xlrd
         self.path = path
         self.book = xlrd.open_workbook(path)
 
+    def __repr__(self):
+        return object.__repr__(self)
+
     def old_parse(self, sheetname, header=None, index_col=0, date_col=0):
         from pandas.core.datetools import ole2datetime
         sheet = self.book.sheet_by_name(sheetname)
@@ -205,10 +215,27 @@ class ExcelFile(object):
                     row[date_col] = ole2datetime(row[date_col])
                 except Exception:
                     pass
-        return simpleParser(data, header=header, indexCol=index_col)
+        return _simple_parser(data, header=header, indexCol=index_col)
 
     def parse(self, sheetname, header=None, skiprows=None, index_col=0,
               na_values=None):
+        """
+        Read Excel table into DataFrame
+
+        Parameters
+        ----------
+        sheetname : string
+            Name of Excel sheet
+        header : int, default 0
+            Row to use for the column labels of the parsed DataFrame
+        skiprows : list-like
+            Row numbers to skip (0-indexed)
+        index_col : int, default 0
+            Column to use as the row labels of the DataFrame. Pass None if there
+            is no such column
+        na_values : list-like, default None
+            List of strings to recognize as NA/NaN
+        """
         from datetime import MINYEAR, time, datetime
         from xlrd import xldate_as_tuple, XL_CELL_DATE
 
@@ -235,17 +262,20 @@ class ExcelFile(object):
                         value = datetime(*dt)
                 row.append(value)
             data.append(row)
-        return simpleParser(data, header=header, indexCol=index_col,
-                            na_values=na_values)
+        return _simple_parser(data, header=header, indexCol=index_col,
+                              na_values=na_values)
 
 #-------------------------------------------------------------------------------
-# Basically deprecated stuff
+# Deprecated stuff
+
+import warnings
 
 def parseCSV(filepath, header=0, skiprows=None, indexCol=0,
              na_values=None):
     """
     Parse CSV file into a DataFrame object. Try to parse dates if possible.
     """
+    warnings.warn("parseCSV is deprecated. Use read_csv instead", FutureWarning)
     return read_csv(filepath, header=header, skiprows=skiprows,
                     index_col=indexCol, na_values=na_values)
 
@@ -254,6 +284,8 @@ def parseText(filepath, sep='\t', header=0, indexCol=0, colNames=None):
     Parse whitespace separated file into a DataFrame object.
     Try to parse dates if possible.
     """
+    warnings.warn("parseText is deprecated. Use read_table instead",
+                  FutureWarning)
     return read_table(filepath, sep=sep, header=header, index_col=indexCol,
                       names=colNames)
 
@@ -262,6 +294,8 @@ def parseExcel(filepath, header=None, indexCol=0, sheetname=None, **kwds):
     """
 
     """
+    warnings.warn("parseExcel is deprecated. Use the ExcelFile class instead",
+                  FutureWarning)
     excel_file = ExcelFile(filepath)
     return excel_file.parse(sheetname, header=header, index_col=indexCol)
 
