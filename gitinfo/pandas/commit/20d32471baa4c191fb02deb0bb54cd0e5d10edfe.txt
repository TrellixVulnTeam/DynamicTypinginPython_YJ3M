commit 20d32471baa4c191fb02deb0bb54cd0e5d10edfe
Author: y-p <yoval@gmx.com>
Date:   Sun Mar 17 12:01:51 2013 +0200

    PERF: avoid iteritems->iloc panelty for data conversion, use blocks

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 6babf2453..aff9001f2 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -110,13 +110,14 @@ def _ndarray_to_native_types(v,na_rep='',float_format=None):
     if v.dtype == 'datetime64[ns]' or v.dtype == 'timedelta64[ns]':
         values = np.empty(len(v),dtype=object)
         values[mask] = 'NaT'
-
         if v.dtype == 'datetime64[ns]':
             values[imask] = np.array([ val._repr_base for val in v[imask] ],dtype=object)
         elif v.dtype == 'timedelta64[ns]':
             values[imask] = np.array([ lib.repr_timedelta64(val) for val in v[imask] ],dtype=object)
     else:
-        values = np.array(v.values,dtype=object)
+        if hasattr(v,"values"):
+            v= v.values
+        values = np.array(v,dtype=object)
         values[mask] = na_rep
         if issubclass(v.dtype.type,np.floating):
             if float_format:
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 946f98ae2..23d1ad08c 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1296,6 +1296,11 @@ class DataFrame(NDFrame):
         if cols is None:
             cols = self.columns
 
+        if isinstance(cols,np.ndarray):
+            cols = _ndarray_to_native_types(cols,na_rep,float_format)
+        else:
+            cols=list(cols)
+
         has_aliases = isinstance(header, (tuple, list, np.ndarray))
         if has_aliases or header:
             if index:
@@ -1352,11 +1357,6 @@ class DataFrame(NDFrame):
             chunksize = (100000/ (len(cols) or 1)) or 1
         chunks = int(nrows / chunksize)+1
 
-        if isinstance(cols,np.ndarray):
-            cols = _ndarray_to_native_types(cols,na_rep,float_format)
-        else:
-            cols=list(cols)
-
         for i in xrange(chunks):
             start_i = i * chunksize
             end_i = min((i + 1) * chunksize, nrows)
@@ -1364,10 +1364,22 @@ class DataFrame(NDFrame):
                 break
 
             # create the data for a chunk
-            chunk = self.iloc[start_i:end_i]
 
-            data = [ _ndarray_to_native_types(v,na_rep,float_format
-                                              ) for k, v in chunk.iteritems() ]
+            blocks = self._data.blocks
+            data =[None] * sum(len(b.items) for b in blocks)
+            for i in range(len(blocks)):
+                b = blocks[i]
+                v = b.values
+                colname_map = dict((k,i) for i,k in  enumerate(self.columns))
+                if v.dtype == 'datetime64[ns]' or v.dtype == 'timedelta64[ns]':
+                    d = blocks[i].values[:,start_i:end_i]
+                    for j, k in enumerate(b.items):
+                        data[colname_map[k]] = d[j]
+                else:
+                    d = _ndarray_to_native_types(b.values[:,start_i:end_i],  na_rep,float_format)
+                    for j, k in enumerate(b.items):
+                        data[colname_map[k]] = d[j]
+
             ix = _ndarray_to_native_types(data_index[start_i:end_i],
                                           na_rep,float_format)
 
