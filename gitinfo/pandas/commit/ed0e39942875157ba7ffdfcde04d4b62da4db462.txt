commit ed0e39942875157ba7ffdfcde04d4b62da4db462
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Dec 28 10:49:34 2012 -0500

    BUG: DataFrame.info bug with utf8 columns. close #2576

diff --git a/RELEASE.rst b/RELEASE.rst
index 48e7bd6cd..ea720c63d 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -58,6 +58,7 @@ pandas 0.10.1
     - raise correctly on non-implemented column types (unicode/date)
     - handle correctly ``Term`` passed types (e.g. ``index<1000``, when index
       is ``Int64``), (closes GH512_)
+  - Fix DataFrame.info bug with UTF8-encoded columns. (GH2576_)
 
 **API Changes**
 
@@ -68,6 +69,7 @@ pandas 0.10.1
 .. _GH512: https://github.com/pydata/pandas/issues/512
 .. _GH1277: https://github.com/pydata/pandas/issues/1277
 .. _GH2327: https://github.com/pydata/pandas/issues/2327
+.. _GH2576: https://github.com/pydata/pandas/issues/2576
 
 pandas 0.10.0
 =============
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index c426c665d..b9617cd91 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1628,8 +1628,7 @@ class DataFrame(NDFrame):
             if len(cols) != len(counts):
                 raise AssertionError('Columns must equal counts')
             for col, count in counts.iteritems():
-                if not isinstance(col, basestring):
-                    col = str(col)
+                col = com.pprint_thing(col)
                 lines.append(_put_str(col, space) +
                              '%d  non-null values' % count)
         else:
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index 2ee9be660..1de2becc7 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -159,6 +159,13 @@ class TestDataFrameFormatting(unittest.TestCase):
         result = self.frame.to_string()
         self.assert_(isinstance(result, unicode))
 
+    def test_to_string_utf8_columns(self):
+        n = u"\u05d0".encode('utf-8')
+
+        with option_context('display.max_rows', 1):
+            df = pd.DataFrame([1,2], columns=[n])
+            repr(df)
+
     def test_to_string_unicode_two(self):
         dm = DataFrame({u'c/\u03c3': []})
         buf = StringIO()
