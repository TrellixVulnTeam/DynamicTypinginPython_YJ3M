commit 13b22fd94d45afd44045ef77b8c929744efe6a7b
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Mon Jan 13 20:46:11 2020 -0800

    CLN: de-duplicate _getitem_scalar (#30992)

diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index cc1187914..10e71e72d 100755
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -1743,12 +1743,14 @@ class _NDFrameIndexer(_NDFrameIndexerBase):
 
 
 class _LocationIndexer(_NDFrameIndexer):
+    _takeable: bool = False
+
     def __getitem__(self, key):
         if type(key) is tuple:
             key = tuple(com.apply_if_callable(x, self.obj) for x in key)
             if self._is_scalar_access(key):
                 try:
-                    return self._getitem_scalar(key)
+                    return self.obj._get_value(*key, takeable=self._takeable)
                 except (KeyError, IndexError, AttributeError):
                     # AttributeError for IntervalTree get_value
                     pass
@@ -1763,9 +1765,6 @@ class _LocationIndexer(_NDFrameIndexer):
     def _is_scalar_access(self, key: Tuple):
         raise NotImplementedError()
 
-    def _getitem_scalar(self, key):
-        raise NotImplementedError()
-
     def _getitem_axis(self, key, axis: int):
         raise NotImplementedError()
 
@@ -1854,12 +1853,6 @@ class _LocIndexer(_LocationIndexer):
 
         return True
 
-    def _getitem_scalar(self, key):
-        # a fast-path to scalar access
-        # if not, raise
-        values = self.obj._get_value(*key)
-        return values
-
     def _get_partial_string_timestamp_match_key(self, key, labels):
         """
         Translate any partial string timestamp matches in key, returning the
@@ -1965,6 +1958,7 @@ class _iLocIndexer(_LocationIndexer):
         "point is EXCLUDED), listlike of integers, boolean array"
     )
     _get_slice_axis = _NDFrameIndexer._get_slice_axis
+    _takeable = True
 
     def _validate_key(self, key, axis: int):
         if com.is_bool_indexer(key):
@@ -2029,12 +2023,6 @@ class _iLocIndexer(_LocationIndexer):
 
         return True
 
-    def _getitem_scalar(self, key):
-        # a fast-path to scalar access
-        # if not, raise
-        values = self.obj._get_value(*key, takeable=True)
-        return values
-
     def _validate_integer(self, key: int, axis: int) -> None:
         """
         Check that 'key' is a valid position in the desired axis.
