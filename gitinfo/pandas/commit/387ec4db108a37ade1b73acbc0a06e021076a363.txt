commit 387ec4db108a37ade1b73acbc0a06e021076a363
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Mar 12 22:25:02 2012 -0400

    ENH: column selection via attributes on DataFrameGroupBy, GH #882

diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 67adc48c6..d7d121b09 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -139,8 +139,12 @@ class GroupBy(object):
         return self.obj
 
     def __getattr__(self, attr):
+        if attr in self.obj:
+            return self[attr]
+
         if hasattr(self.obj, attr) and attr != '_cache':
             return self._make_wrapper(attr)
+
         raise AttributeError("'%s' object has no attribute '%s'" %
                              (type(self).__name__, attr))
 
@@ -1644,3 +1648,27 @@ def numpy_groupby(data, labels, axis=0):
     group_sums = np.add.reduceat(ordered_data, groups_at, axis=axis)
 
     return group_sums
+
+from pandas.util import py3compat
+import sys
+
+def install_ipython_completers():  # pragma: no cover
+    """Register the DataFrame type with IPython's tab completion machinery, so
+    that it knows about accessing column names as attributes."""
+    from IPython.utils.generics import complete_object
+
+    @complete_object.when_type(DataFrameGroupBy)
+    def complete_dataframe(obj, prev_completions):
+        return prev_completions + [c for c in obj.obj.columns \
+                    if isinstance(c, basestring) and py3compat.isidentifier(c)]
+
+
+# Importing IPython brings in about 200 modules, so we want to avoid it unless
+# we're in IPython (when those modules are loaded anyway).
+if "IPython" in sys.modules:  # pragma: no cover
+    try:
+        install_ipython_completers()
+    except Exception:
+        pass
+
+
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 1f2162d9c..39cdbaa85 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -1542,6 +1542,16 @@ class TestGroupBy(unittest.TestCase):
         assert_series_equal(result, expected)
         assert_series_equal(result2, expected)
 
+    def test_column_select_via_attr(self):
+        result = self.df.groupby('A').C.sum()
+        expected = self.df.groupby('A')['C'].sum()
+        assert_series_equal(result, expected)
+
+        self.df['mean'] = 1.5
+        result = self.df.groupby('A').mean()
+        expected = self.df.groupby('A').agg(np.mean)
+        assert_frame_equal(result, expected)
+
 def _check_groupby(df, result, keys, field, f=lambda x: x.sum()):
     tups = map(tuple, df[keys].values)
     tups = com._asarray_tuplesafe(tups)
