commit 6bac0955dd7bbd40631fb6392abf486a82c8f1cc
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Sep 30 00:17:25 2011 -0400

    ENH: Int64Index.union optimization in the monotonic case

diff --git a/bench/zoo_bench.R b/bench/zoo_bench.R
new file mode 100644
index 000000000..5599bce6d
--- /dev/null
+++ b/bench/zoo_bench.R
@@ -0,0 +1,17 @@
+library(zoo)
+
+indices = rep(NA, 100000)
+for (i in 1:100000)
+  indices[i] <- paste(sample(letters, 10), collapse="")
+
+timings <- numeric()
+
+x <- zoo(rnorm(100000), indices)
+y <- zoo(rnorm(90000), indices[sample(1:100000, 90000)])
+
+for (i in 1:10) {
+  gc()
+  timings[i] = system.time(x + y)[3]
+}
+
+mean(timings)
diff --git a/bench/zoo_bench.py b/bench/zoo_bench.py
new file mode 100644
index 000000000..521db3e3c
--- /dev/null
+++ b/bench/zoo_bench.py
@@ -0,0 +1,23 @@
+from pandas import *
+from pandas.util.testing import rands
+
+from la import larry
+
+n = 100000
+indices = Index([rands(10) for _ in xrange(n)])
+
+def sample(values, k):
+    from random import shuffle
+    sampler = np.arange(len(values))
+    shuffle(sampler)
+    return values.take(sampler[:k])
+
+subsample_size = 90000
+
+x = Series(np.random.randn(100000), indices)
+y = Series(np.random.randn(subsample_size),
+           index=sample(indices, subsample_size))
+
+
+lx = larry(np.random.randn(100000), [list(indices)])
+ly = larry(np.random.randn(subsample_size), [list(y.index)])
diff --git a/pandas/core/index.py b/pandas/core/index.py
index ff7771970..0220177bb 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -643,6 +643,17 @@ class Int64Index(Index):
         else:
             return join_index
 
+    def union(self, other):
+        if not isinstance(other, Int64Index):
+            return Index.union(self, other)
+
+        if self.is_monotonic and other.is_monotonic:
+            result = lib.outer_join_indexer_int64(self, other)[0]
+        else:
+            result = np.unique(np.concatenate((self, other)))
+        return Int64Index(result)
+    union.__doc__ = Index.union.__doc__
+
     def groupby(self, to_groupby):
         return lib.groupby_int64(self, to_groupby)
 
diff --git a/scripts/parser_magic.py b/scripts/parser_magic.py
index 01594a352..4eec900b8 100644
--- a/scripts/parser_magic.py
+++ b/scripts/parser_magic.py
@@ -1,11 +1,11 @@
+from pandas.util.testing import set_trace
+import pandas.util.testing as tm
+
+from pandas import *
 import ast
 import inspect
 import sys
 
-from pandas import *
-from pandas.util.testing import set_trace
-import pandas.util.testing as tm
-
 def merge(a, b):
     f, args, _ = parse_stmt(inspect.currentframe().f_back)
     return DataFrame({args[0] : a,
@@ -23,7 +23,6 @@ def parse_stmt(frame):
     return _parse_call(call)
 
 def _parse_call(call):
-    set_trace()
     func = _maybe_format_attribute(call.func)
 
     str_args = []
@@ -65,4 +64,4 @@ def _format_attribute(attr):
 
 a = tm.makeTimeSeries()
 b = tm.makeTimeSeries()
-df = merge(a * 2, np.log(np.exp(b)))
+df = merge(a, b)
