commit 504671dc8feaf0be29899b14cfff9c5a409e1dc9
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jun 13 17:13:26 2011 -0400

    DataFrame.join optimization. unit tests for consol

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 5616eb805..89ef63ada 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -859,7 +859,7 @@ class DataFrame(PandasGeneric):
 
         Returns
         -------
-        Series
+        xs : Series
         """
         if key not in self.index:
             raise Exception('No cross-section for %s' % key)
@@ -903,6 +903,8 @@ class DataFrame(PandasGeneric):
         return frame
 
     def _reindex_index(self, new_index, method):
+        self._consolidate_inplace()
+
         if new_index is self.index:
             return self.copy()
 
@@ -911,6 +913,8 @@ class DataFrame(PandasGeneric):
         return DataFrame(new_data)
 
     def _reindex_columns(self, new_columns):
+        self._consolidate_inplace()
+
         new_data = self._data.reindex_columns(new_columns)
         return DataFrame(new_data)
 
@@ -1700,6 +1704,16 @@ class DataFrame(PandasGeneric):
         return DataFrame(new_data)
 
     def _join_index(self, other, how):
+        join_index = self._get_join_index(other, how)
+        this_data = self.reindex(join_index)._data
+        other_data = other.reindex(join_index)._data
+
+        # merge blocks
+        merged_data = this_data.merge(other_data)
+        assert(merged_data.index is join_index) # maybe unnecessary
+        return DataFrame(merged_data)
+
+    def _get_join_index(self, other, how):
         if how == 'left':
             join_index = self.index
         elif how == 'right':
@@ -1711,16 +1725,7 @@ class DataFrame(PandasGeneric):
         else:
             raise Exception('do not recognize join method %s' % how)
 
-        result_series = self.reindex(join_index)._series
-        other_series = other.reindex(join_index)._series
-
-        for col in other_series:
-            if col in result_series:
-                raise Exception('Overlapping columns!')
-
-        result_series.update(other_series)
-
-        return self._constructor(result_series, index=join_index)
+        return join_index
 
     #----------------------------------------------------------------------
     # Data reshaping
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 99d9336c6..77f81bf52 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -481,9 +481,12 @@ class BlockManager(object):
             if len(newb.columns) > 0:
                 new_blocks.append(newb)
 
-        # will put these in the float bucket
-        extra_columns = new_columns - self.columns
-        if len(extra_columns):
+        # TODO: this part could be faster (!)
+        _, mask = self.columns.get_indexer(new_columns)
+        notmask = -mask
+
+        if notmask.any():
+            extra_columns = new_columns[notmask]
             na_block = add_na_columns(extra_columns, self.index, new_columns)
             new_blocks.append(na_block)
             new_blocks = _consolidate(new_blocks, new_columns)
diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index 98cef0cdd..1e738c03a 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -618,6 +618,9 @@ class SparseDataFrame(DataFrame):
         self.columns = columns
         self.index = index
 
+    def _consolidate_inplace(self):
+        pass
+
     @property
     def _constructor(self):
         return SparseDataFrame
@@ -1010,6 +1013,24 @@ class SparseDataFrame(DataFrame):
         return SparseDataFrame(sdict, index=self.index, columns=columns,
                                default_fill_value=self.default_fill_value)
 
+    def _join_on(self, other, on):
+        # need to implement?
+        raise NotImplementedError
+
+    def _join_index(self, other, how):
+        join_index = self._get_join_index(other, how)
+
+        result_series = self.reindex(join_index)._series
+        other_series = other.reindex(join_index)._series
+
+        for col in other_series:
+            if col in result_series:
+                raise Exception('Overlapping columns!')
+
+        result_series.update(other_series)
+
+        return self._constructor(result_series, index=join_index)
+
     def transpose(self):
         """
         Returns a DataFrame with the rows/columns switched.
diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index ae971e486..152663f11 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -2107,8 +2107,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         assert_almost_equal(expected, self.frame.values)
 
     def test_xs_view(self):
-        dm = DataFrame(np.arange(20).reshape(4, 5),
-                        index=range(4), columns=range(5))
+        dm = DataFrame(np.arange(20.).reshape(4, 5),
+                       index=range(4), columns=range(5))
 
         dm.xs(2, copy=False)[:] = 5
         self.assert_((dm.xs(2) == 5).all())
@@ -2120,6 +2120,11 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         self.assertRaises(Exception, self.mixed_frame.xs,
                           self.mixed_frame.index[2], copy=False)
 
+        # unconsolidated
+        dm['foo'] = 6.
+        dm.xs(3, copy=False)[:] = 10
+        self.assert_((dm.xs(3) == 10).all())
+
 if __name__ == '__main__':
     # unittest.main()
     import nose
diff --git a/scripts/bench_refactor.py b/scripts/bench_refactor.py
new file mode 100644
index 000000000..5ae36f7dd
--- /dev/null
+++ b/scripts/bench_refactor.py
@@ -0,0 +1,46 @@
+from pandas import *
+try:
+    import pandas.core.internals as internals
+    reload(internals)
+    import pandas.core.frame as frame
+    reload(frame)
+    from pandas.core.frame import DataFrame as DataMatrix
+except ImportError:
+    pass
+
+N = 1000
+K = 500
+
+def horribly_unconsolidated():
+    index = np.arange(N)
+
+    df = DataMatrix(index=index)
+
+    for i in xrange(K):
+        df[i] = float(K)
+
+    return df
+
+def bench_reindex_index(df, it=100):
+    new_idx = np.arange(0, N, 2)
+    for i in xrange(it):
+        df.reindex(new_idx)
+
+def bench_reindex_columns(df, it=100):
+    new_cols = np.arange(0, K, 2)
+    for i in xrange(it):
+        df.reindex(columns=new_cols)
+
+def bench_join_index(df, it=10):
+    left = df.reindex(index=np.arange(0, N, 2),
+                      columns=np.arange(K // 2))
+    right = df.reindex(columns=np.arange(K // 2 + 1, K))
+    for i in xrange(it):
+        joined = left.join(right)
+
+if __name__ == '__main__':
+    df = horribly_unconsolidated()
+    left = df.reindex(index=np.arange(0, N, 2),
+                      columns=np.arange(K // 2))
+    right = df.reindex(columns=np.arange(K // 2 + 1, K))
+    bench_join_index(df)
