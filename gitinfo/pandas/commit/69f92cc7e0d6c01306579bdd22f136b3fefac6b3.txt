commit 69f92cc7e0d6c01306579bdd22f136b3fefac6b3
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri May 28 20:31:45 2010 +0000

    display bugfix
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@181 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index ef13c712a..7649fbc55 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -877,26 +877,19 @@ class DataMatrix(DataFrame):
 
         counts = self.count()
 
-        columns = []
-        for j, col in enumerate(self.columns):
-            columns.append((col, '%s%d  non-null values' %
-                           (_pfixed(col, space), counts[j])))
-
-        if self.objects is not None and len(self.objects.columns) > 0:
-            n = len(self.objects.index)
-            for col in self.objects:
-                line = '%s%d  non-null values' % (_pfixed(col, space), n)
-                columns.append((col, line))
+        cols = self.cols()
+        assert(len(cols) == len(counts))
 
-        try:
-            columns = [c[1] for c in sorted(columns)]
-        except TypeError:
-            columns = sorted([c[1] for c in columns])
+        columns = []
+        for col, count in counts.iteritems():
+            columns.append('%s%d  non-null values' %
+                           (_pfixed(col, space), count))
 
         dtypeLine = ''
 
         nf = len(self.columns)
         df = self.values.dtype
+
         if self.objects is not None:
             no = len(self.objects.columns)
             do = self.objects.values.dtype
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 50f608207..663b2c9ec 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -386,7 +386,7 @@ class Series(np.ndarray, Picklable, Groupable):
         Compute minimum of non-null values
         """
         arr = self.values().copy()
-        if not self._int_type:
+        if not issubclass(arr.dtype.type, np.int_):
             arr[isnull(arr)] = np.inf
         return arr.min()
 
@@ -395,14 +395,10 @@ class Series(np.ndarray, Picklable, Groupable):
         Compute maximum of non-null values
         """
         arr = self.values().copy()
-        if not self._int_type:
+        if not issubclass(arr.dtype.type, np.int_):
             arr[isnull(arr)] = -np.inf
         return arr.max()
 
-    @property
-    def _int_type(self):
-        return issubclass(self.dtype.type, np.int_)
-
     def std(self, axis=None, dtype=None, out=None, ddof=1):
         """
         Compute unbiased standard deviation of non-null values
