commit a1e2798590dac2ad7a20515fbc27d46ce87cdb0c
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Nov 13 13:25:05 2011 -0500

    ENH: more testing and retool multi-column sorting for better perf, GH #92

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 01a13f8f4..682a13217 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1512,30 +1512,23 @@ class DataFrame(NDFrame):
         sorted : DataFrame
         """
         labels = self._get_axis(axis)
-        order_list = None
+
         if by is not None:
             assert(axis == 0)
-            by = self[by]
-            
-            if isinstance(by, Series):
-                assert(len(by) == len(labels))
-                by = by.values
-                sort_index = Series(by, index=labels).order().index
-            elif isinstance(by, DataFrame):
-                assert(len(by.index) == len(labels))
-                type_list = [(col_name, by[col_name].dtype) for col_name in by.columns]
-                sort_arr = np.array([tuple(r) for r in by.values], dtype=type_list)
-                sort_index = labels.take(sort_arr.argsort(order=by.columns.tolist()))
-        else:
-            sort_index = labels.take(labels.argsort())
+            if isinstance(by, (tuple, list)):
+                to_sort = lib.fast_zip([self[x] for x in by])
+            else:
+                to_sort = self[by].values
+
+            # stable sort
+            indexer = to_sort.argsort()
+        else:
+            indexer = labels.argsort()
 
         if not ascending:
-            sort_index = sort_index[::-1]
+            indexer = indexer[::-1]
 
-        if axis == 0:
-            return self.reindex(sort_index)
-        else:
-            return self.reindex(columns=sort_index)
+        return self.take(indexer, axis=axis)
 
     def sortlevel(self, level=0, axis=0, ascending=True):
         """
@@ -2508,7 +2501,7 @@ class DataFrame(NDFrame):
             c = np.cov(ac, bc)[0, 1]
             baseCov[i, j] = c
             baseCov[j, i] = c
-            
+
         return self._constructor(baseCov, index=cols, columns=cols)
 
     def _cov_helper(self, mat):
@@ -2519,7 +2512,7 @@ class DataFrame(NDFrame):
                 for j, B in enumerate(mat):
                     in_common = mask[i] & mask[j]
                     if in_common.any():
-                        yield i, j, A[in_common], B[in_common]        
+                        yield i, j, A[in_common], B[in_common]
 
     def corrwith(self, other, axis=0, drop=False):
         """
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 0fe76f412..fe8e57339 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1950,7 +1950,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         assert_almost_equal(correls['A']['C'],
                             self.frame['A'].corr(self.frame['C']))
-    
+
     def test_cov(self):
         self.frame['A'][:5] = nan
         self.frame['B'][:10] = nan
@@ -2706,28 +2706,6 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         expected = frame.ix[frame.index[indexer]]
         assert_frame_equal(sorted_df, expected)
 
-        # by multiple columns
-        frame.values[1, 0] = frame.values[0, 0]
-        smaller, larger = min(frame.values[:1, 1]), max(frame.values[:1, 1])
-        if smaller == larger:
-            larger = smaller + 1
-        frame.values[0, 1] = larger
-        frame.values[1, 1] = smaller
-
-        sorted_df = frame.sort_index(by=['A', 'B'])
-        indexer = frame['A'].argsort().values
-        zero_mask = indexer == 0
-        one_mask = indexer == 1
-        indexer[zero_mask] = 1
-        indexer[one_mask] = 0
-        expected = frame.ix[frame.index[indexer]]
-        assert_frame_equal(sorted_df, expected)
-
-        sorted_df = frame.sort_index(by=['A', 'B'], ascending=False)
-        indexer = indexer[::-1]
-        expected = frame.ix[frame.index[indexer]]
-        assert_frame_equal(sorted_df, expected)
-
         # check for now
         sorted_df = frame.sort(column='A')
         expected = frame.sort_index(by='A')
@@ -2737,6 +2715,29 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         expected = frame.sort_index(by='A', ascending=False)
         assert_frame_equal(sorted_df, expected)
 
+    def test_sort_index_multicolumn(self):
+        import random
+        A = np.arange(5).repeat(20)
+        B = np.tile(np.arange(5), 20)
+        random.shuffle(A)
+        random.shuffle(B)
+        frame = DataFrame({'A' : A, 'B' : B,
+                           'C' : np.random.randn(100)})
+
+        result = frame.sort_index(by=['A', 'B'])
+        indexer = Index(zip(*(frame['A'], frame['B']))).argsort()
+        expected = frame.take(indexer)
+        assert_frame_equal(result, expected)
+
+        result = frame.sort_index(by=['A', 'B'], ascending=False)
+        expected = frame.take(indexer[::-1])
+        assert_frame_equal(result, expected)
+
+        result = frame.sort_index(by=['B', 'A'])
+        indexer = Index(zip(*(frame['B'], frame['A']))).argsort()
+        expected = frame.take(indexer)
+        assert_frame_equal(result, expected)
+
     # punting on trying to fix this for now
     # def test_frame_column_inplace_sort_exception(self):
     #     s = self.frame['A']
