commit e01a762ffe53c31163d0573fc6f03a9cdcc51971
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Sep 30 21:40:27 2011 -0400

    ENH: notnull/isnull perf enhancement regression from 0.3.0. address GH #187

diff --git a/bench/zoo_bench.R b/bench/zoo_bench.R
index 179d063e6..c6af52588 100644
--- a/bench/zoo_bench.R
+++ b/bench/zoo_bench.R
@@ -12,10 +12,10 @@ timings <- numeric()
 
 ## indices <- as.POSIXct(1:100000)
 
-indices <- as.POSIXct(Sys.Date()) + 1:100000
+indices <- as.POSIXct(Sys.Date()) + 1:1000000
 
-x <- xts(rnorm(100000), indices)
-y <- xts(rnorm(90000), indices[sample(1:100000, 90000)])
+x <- xts(rnorm(1000000), indices)
+y <- xts(rnorm(900000), indices[sample(1:1000000, 900000)])
 
 for (i in 1:10) {
   gc()
diff --git a/pandas/core/common.py b/pandas/core/common.py
index 5e5ecb887..d420d4183 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -19,7 +19,7 @@ except Exception: # pragma: no cover
 class PandasError(Exception):
     pass
 
-def isnull(input):
+def isnull(obj):
     '''
     Replacement for numpy.isnan / -numpy.isfinite which is suitable
     for use on object arrays.
@@ -32,29 +32,31 @@ def isnull(input):
     -------
     boolean ndarray or boolean
     '''
+    if np.isscalar(obj) or obj is None:
+        return lib.checknull(obj)
+
     from pandas.core.generic import PandasObject
     from pandas import Series
-    if isinstance(input, np.ndarray):
-        if input.dtype.kind in ('O', 'S'):
+    if isinstance(obj, np.ndarray):
+        if obj.dtype.kind in ('O', 'S'):
             # Working around NumPy ticket 1542
-            shape = input.shape
+            shape = obj.shape
             result = np.empty(shape, dtype=bool)
-            vec = lib.isnullobj(input.ravel())
+            vec = lib.isnullobj(obj.ravel())
             result[:] = vec.reshape(shape)
 
-            if isinstance(input, Series):
-                result = Series(result, index=input.index, copy=False)
+            if isinstance(obj, Series):
+                result = Series(result, index=obj.index, copy=False)
         else:
-            result = -np.isfinite(input)
-    elif isinstance(input, PandasObject):
+            result = -np.isfinite(obj)
+        return result
+    elif isinstance(obj, PandasObject):
         # TODO: optimize for DataFrame, etc.
-        return input.apply(isnull)
+        return obj.apply(isnull)
     else:
-        result = lib.checknull(input)
-
-    return result
+        raise TypeError('cannot handle %s type' % type(obj))
 
-def notnull(input):
+def notnull(obj):
     '''
     Replacement for numpy.isfinite / -numpy.isnan which is suitable
     for use on object arrays.
@@ -67,7 +69,9 @@ def notnull(input):
     -------
     boolean ndarray or boolean
     '''
-    return np.negative(isnull(input))
+    if np.isscalar(obj) or obj is None:
+        return not lib.checknull(obj)
+    return -isnull(obj)
 
 def _pickle_array(arr):
     arr = arr.view(np.ndarray)
diff --git a/scripts/groupby_sample.py b/scripts/groupby_sample.py
index fc4a54c81..ce5e738f8 100644
--- a/scripts/groupby_sample.py
+++ b/scripts/groupby_sample.py
@@ -3,7 +3,7 @@ import numpy as np
 import string
 
 g1 = np.array(list(string.letters))[:-1]
-g2 = np.arange(5100)
+g2 = np.arange(510)
 df_small = DataFrame({'group1' : ["a","b","a","a","b","c","c","c","c",
                                   "c","a","a","a","b","b","b","b"],
                       'group2' : [1,2,3,4,1,3,5,6,5,4,1,2,3,4,3,2,1],
