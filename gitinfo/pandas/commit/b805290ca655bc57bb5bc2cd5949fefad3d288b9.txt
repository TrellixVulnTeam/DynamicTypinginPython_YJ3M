commit b805290ca655bc57bb5bc2cd5949fefad3d288b9
Author: Simon Hawkins <simonjayhawkins@gmail.com>
Date:   Mon Dec 30 14:08:45 2019 +0000

    update per comments

diff --git a/pandas/_typing.py b/pandas/_typing.py
index 6c604fac6..5ef26b124 100644
--- a/pandas/_typing.py
+++ b/pandas/_typing.py
@@ -25,22 +25,27 @@ if TYPE_CHECKING:
     from pandas.core.generic import NDFrame  # noqa: F401
     from pandas import Interval  # noqa: F401
 
+# arrary-like
 
 AnyArrayLike = TypeVar("AnyArrayLike", "ExtensionArray", "Index", "Series", np.ndarray)
 ArrayLike = TypeVar("ArrayLike", "ExtensionArray", np.ndarray)
-DatetimeLikeScalar = TypeVar("DatetimeLikeScalar", "Period", "Timestamp", "Timedelta")
-Dtype = Union[str, np.dtype, "ExtensionDtype"]
-FilePathOrBuffer = Union[str, Path, IO[AnyStr]]
 
-FrameOrSeries = TypeVar("FrameOrSeries", bound="NDFrame")
+# scalars
+
 PythonScalar = Union[str, int, float, bool]
+DatetimeLikeScalar = TypeVar("DatetimeLikeScalar", "Period", "Timestamp", "Timedelta")
 PandasScalar = Union[DatetimeLikeScalar, "Interval"]
 Scalar = Union[PythonScalar, PandasScalar]
+
+# other
+
+Dtype = Union[str, np.dtype, "ExtensionDtype"]
+FilePathOrBuffer = Union[str, Path, IO[AnyStr]]
+FrameOrSeries = TypeVar("FrameOrSeries", bound="NDFrame")
 Axis = Union[str, int]
 Ordered = Optional[bool]
 JSONSerializable = Union[PythonScalar, List, Dict]
-
 Axes = Collection
 
 # to maintain type information across generic functions and parametrization
-_T = TypeVar("_T")
+T = TypeVar("T")
diff --git a/pandas/core/common.py b/pandas/core/common.py
index 2920f0ede..8a430a4aa 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -9,11 +9,12 @@ from collections import abc
 from datetime import datetime, timedelta
 from functools import partial
 import inspect
-from typing import Any, Collection, Iterable, TypeVar, Union
+from typing import Any, Collection, Iterable, Union
 
 import numpy as np
 
 from pandas._libs import lib, tslibs
+from pandas._typing import T
 
 from pandas.core.dtypes.cast import construct_1d_object_array_from_listlike
 from pandas.core.dtypes.common import (
@@ -270,10 +271,7 @@ def maybe_make_list(obj):
     return obj
 
 
-_T = TypeVar("_T")
-
-
-def maybe_iterable_to_list(obj: Union[Iterable[_T], _T]) -> Union[Collection[_T], _T]:
+def maybe_iterable_to_list(obj: Union[Iterable[T], T]) -> Union[Collection[T], T]:
     """
     If obj is Iterable but not list-like, consume into list.
     """
