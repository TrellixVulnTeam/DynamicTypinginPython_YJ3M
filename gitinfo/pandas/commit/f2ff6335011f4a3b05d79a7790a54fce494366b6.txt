commit f2ff6335011f4a3b05d79a7790a54fce494366b6
Author: Thein Oo <thoo@users.noreply.github.com>
Date:   Wed Nov 21 07:53:41 2018 -0500

    DOC: Updating the docstring of read_csv and related functions (#23517)

diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index a1f02165f..acb9bca25 100755
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -1,6 +1,7 @@
 """
 Module contains tools for processing files into DataFrames or other objects
 """
+
 from __future__ import print_function
 
 from collections import defaultdict
@@ -52,7 +53,10 @@ from pandas.io.date_converters import generic_parser
 # so we need to remove it if we see it.
 _BOM = u('\ufeff')
 
-_parser_params = r"""Also supports optionally iterating or breaking of the file
+_doc_read_csv_and_table = r"""
+{summary}
+
+Also supports optionally iterating or breaking of the file
 into chunks.
 
 Additional help can be found in the `online docs for IO Tools
@@ -70,16 +74,17 @@ filepath_or_buffer : str, path object, or file-like object
 
     By file-like object, we refer to objects with a ``read()`` method, such as
     a file handler (e.g. via builtin ``open`` function) or ``StringIO``.
-%s
-delim_whitespace : boolean, default False
-    Specifies whether or not whitespace (e.g. ``' '`` or ``'\t'``) will be
-    used as the sep. Equivalent to setting ``sep='\s+'``. If this option
-    is set to True, nothing should be passed in for the ``delimiter``
-    parameter.
-
-    .. versionadded:: 0.18.1 support for the Python parser.
-
-header : int or list of ints, default 'infer'
+sep : str, default {_default_sep}
+    Delimiter to use. If sep is None, the C engine cannot automatically detect
+    the separator, but the Python parsing engine can, meaning the latter will
+    be used and automatically detect the separator by Python's builtin sniffer
+    tool, ``csv.Sniffer``. In addition, separators longer than 1 character and
+    different from ``'\s+'`` will be interpreted as regular expressions and
+    will also force the use of the Python parsing engine. Note that regex
+    delimiters are prone to ignoring quoted data. Regex example: ``'\r\t'``.
+delimiter : str, default ``None``
+    Alias for sep.
+header : int, list of int, default 'infer'
     Row number(s) to use as the column names, and the start of the
     data.  Default behavior is to infer the column names: if no names
     are passed the behavior is identical to ``header=0`` and column
@@ -91,24 +96,24 @@ header : int or list of ints, default 'infer'
     e.g. [0,1,3]. Intervening rows that are not specified will be
     skipped (e.g. 2 in this example is skipped). Note that this
     parameter ignores commented lines and empty lines if
-    ``skip_blank_lines=True``, so header=0 denotes the first line of
+    ``skip_blank_lines=True``, so ``header=0`` denotes the first line of
     data rather than the first line of the file.
-names : array-like, default None
+names : array-like, optional
     List of column names to use. If file contains no header row, then you
-    should explicitly pass header=None. Duplicates in this list will cause
+    should explicitly pass ``header=None``. Duplicates in this list will cause
     a ``UserWarning`` to be issued.
-index_col : int or sequence or False, default None
+index_col : int, sequence or bool, optional
     Column to use as the row labels of the DataFrame. If a sequence is given, a
     MultiIndex is used. If you have a malformed file with delimiters at the end
-    of each line, you might consider index_col=False to force pandas to _not_
-    use the first column as the index (row names)
-usecols : list-like or callable, default None
+    of each line, you might consider ``index_col=False`` to force pandas to
+    not use the first column as the index (row names).
+usecols : list-like or callable, optional
     Return a subset of the columns. If list-like, all elements must either
     be positional (i.e. integer indices into the document columns) or strings
     that correspond to column names provided either by the user in `names` or
     inferred from the document header row(s). For example, a valid list-like
-    `usecols` parameter would be [0, 1, 2] or ['foo', 'bar', 'baz']. Element
-    order is ignored, so ``usecols=[0, 1]`` is the same as ``[1, 0]``.
+    `usecols` parameter would be ``[0, 1, 2]`` or ``['foo', 'bar', 'baz']``.
+    Element order is ignored, so ``usecols=[0, 1]`` is the same as ``[1, 0]``.
     To instantiate a DataFrame from ``data`` with element order preserved use
     ``pd.read_csv(data, usecols=['foo', 'bar'])[['foo', 'bar']]`` for columns
     in ``['foo', 'bar']`` order or
@@ -120,31 +125,33 @@ usecols : list-like or callable, default None
     example of a valid callable argument would be ``lambda x: x.upper() in
     ['AAA', 'BBB', 'DDD']``. Using this parameter results in much faster
     parsing time and lower memory usage.
-squeeze : boolean, default False
-    If the parsed data only contains one column then return a Series
-prefix : str, default None
+squeeze : bool, default False
+    If the parsed data only contains one column then return a Series.
+prefix : str, optional
     Prefix to add to column numbers when no header, e.g. 'X' for X0, X1, ...
-mangle_dupe_cols : boolean, default True
+mangle_dupe_cols : bool, default True
     Duplicate columns will be specified as 'X', 'X.1', ...'X.N', rather than
     'X'...'X'. Passing in False will cause data to be overwritten if there
     are duplicate names in the columns.
-dtype : Type name or dict of column -> type, default None
-    Data type for data or columns. E.g. {'a': np.float64, 'b': np.int32}
+dtype : Type name or dict of column -> type, optional
+    Data type for data or columns. E.g. {{'a': np.float64, 'b': np.int32}}
     Use `str` or `object` together with suitable `na_values` settings
     to preserve and not interpret dtype.
     If converters are specified, they will be applied INSTEAD
     of dtype conversion.
-%s
-converters : dict, default None
+engine : {{'c', 'python'}}, optional
+    Parser engine to use. The C engine is faster while the python engine is
+    currently more feature-complete.
+converters : dict, optional
     Dict of functions for converting values in certain columns. Keys can either
-    be integers or column labels
-true_values : list, default None
-    Values to consider as True
-false_values : list, default None
-    Values to consider as False
-skipinitialspace : boolean, default False
+    be integers or column labels.
+true_values : list, optional
+    Values to consider as True.
+false_values : list, optional
+    Values to consider as False.
+skipinitialspace : bool, default False
     Skip spaces after delimiter.
-skiprows : list-like or integer or callable, default None
+skiprows : list-like, int or callable, optional
     Line numbers to skip (0-indexed) or number of lines to skip (int)
     at the start of the file.
 
@@ -152,10 +159,10 @@ skiprows : list-like or integer or callable, default None
     indices, returning True if the row should be skipped and False otherwise.
     An example of a valid callable argument would be ``lambda x: x in [0, 2]``.
 skipfooter : int, default 0
-    Number of lines at bottom of file to skip (Unsupported with engine='c')
-nrows : int, default None
-    Number of rows of file to read. Useful for reading pieces of large files
-na_values : scalar, str, list-like, or dict, default None
+    Number of lines at bottom of file to skip (Unsupported with engine='c').
+nrows : int, optional
+    Number of rows of file to read. Useful for reading pieces of large files.
+na_values : scalar, str, list-like, or dict, optional
     Additional strings to recognize as NA/NaN. If dict passed, specific
     per-column NA values.  By default the following values are interpreted as
     NaN: '""" + fill("', '".join(sorted(_NA_VALUES)),
@@ -175,39 +182,40 @@ keep_default_na : bool, default True
 
     Note that if `na_filter` is passed in as False, the `keep_default_na` and
     `na_values` parameters will be ignored.
-na_filter : boolean, default True
+na_filter : bool, default True
     Detect missing value markers (empty strings and the value of na_values). In
     data without any NAs, passing na_filter=False can improve the performance
-    of reading a large file
-verbose : boolean, default False
-    Indicate number of NA values placed in non-numeric columns
-skip_blank_lines : boolean, default True
-    If True, skip over blank lines rather than interpreting as NaN values
-parse_dates : boolean or list of ints or names or list of lists or dict, \
+    of reading a large file.
+verbose : bool, default False
+    Indicate number of NA values placed in non-numeric columns.
+skip_blank_lines : bool, default True
+    If True, skip over blank lines rather than interpreting as NaN values.
+parse_dates : bool or list of int or names or list of lists or dict, \
 default False
+    The behavior is as follows:
 
     * boolean. If True -> try parsing the index.
-    * list of ints or names. e.g. If [1, 2, 3] -> try parsing columns 1, 2, 3
+    * list of int or names. e.g. If [1, 2, 3] -> try parsing columns 1, 2, 3
       each as a separate date column.
     * list of lists. e.g.  If [[1, 3]] -> combine columns 1 and 3 and parse as
       a single date column.
-    * dict, e.g. {'foo' : [1, 3]} -> parse columns 1, 3 as date and call result
-      'foo'
+    * dict, e.g. {{'foo' : [1, 3]}} -> parse columns 1, 3 as date and call
+      result 'foo'
 
     If a column or index contains an unparseable date, the entire column or
     index will be returned unaltered as an object data type. For non-standard
     datetime parsing, use ``pd.to_datetime`` after ``pd.read_csv``
 
     Note: A fast-path exists for iso8601-formatted dates.
-infer_datetime_format : boolean, default False
+infer_datetime_format : bool, default False
     If True and `parse_dates` is enabled, pandas will attempt to infer the
     format of the datetime strings in the columns, and if it can be inferred,
     switch to a faster method of parsing them. In some cases this can increase
     the parsing speed by 5-10x.
-keep_date_col : boolean, default False
+keep_date_col : bool, default False
     If True and `parse_dates` specifies combining multiple columns then
     keep the original columns.
-date_parser : function, default None
+date_parser : function, optional
     Function to use for converting a sequence of string columns to an array of
     datetime instances. The default uses ``dateutil.parser.parser`` to do the
     conversion. Pandas will try to call `date_parser` in three different ways,
@@ -217,17 +225,17 @@ date_parser : function, default None
     and pass that; and 3) call `date_parser` once for each row using one or
     more strings (corresponding to the columns defined by `parse_dates`) as
     arguments.
-dayfirst : boolean, default False
-    DD/MM format dates, international and European format
-iterator : boolean, default False
+dayfirst : bool, default False
+    DD/MM format dates, international and European format.
+iterator : bool, default False
     Return TextFileReader object for iteration or getting chunks with
     ``get_chunk()``.
-chunksize : int, default None
+chunksize : int, optional
     Return TextFileReader object for iteration.
     See the `IO Tools docs
     <http://pandas.pydata.org/pandas-docs/stable/io.html#io-chunking>`_
     for more information on ``iterator`` and ``chunksize``.
-compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}, default 'infer'
+compression : {{'infer', 'gzip', 'bz2', 'zip', 'xz', None}}, default 'infer'
     For on-the-fly decompression of on-disk data. If 'infer' and
     `filepath_or_buffer` is path-like, then detect compression from the
     following extensions: '.gz', '.bz2', '.zip', or '.xz' (otherwise no
@@ -236,16 +244,11 @@ compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}, default 'infer'
 
     .. versionadded:: 0.18.1 support for 'zip' and 'xz' compression.
 
-thousands : str, default None
-    Thousands separator
+thousands : str, optional
+    Thousands separator.
 decimal : str, default '.'
     Character to recognize as decimal point (e.g. use ',' for European data).
-float_precision : string, default None
-    Specifies which converter the C engine should use for floating-point
-    values. The options are `None` for the ordinary converter,
-    `high` for the high-precision converter, and `round_trip` for the
-    round-trip converter.
-lineterminator : str (length 1), default None
+lineterminator : str (length 1), optional
     Character to break file into lines. Only valid with C parser.
 quotechar : str (length 1), optional
     The character used to denote the start and end of a quoted item. Quoted
@@ -253,13 +256,13 @@ quotechar : str (length 1), optional
 quoting : int or csv.QUOTE_* instance, default 0
     Control field quoting behavior per ``csv.QUOTE_*`` constants. Use one of
     QUOTE_MINIMAL (0), QUOTE_ALL (1), QUOTE_NONNUMERIC (2) or QUOTE_NONE (3).
-doublequote : boolean, default ``True``
+doublequote : bool, default ``True``
    When quotechar is specified and quoting is not ``QUOTE_NONE``, indicate
    whether or not to interpret two consecutive quotechar elements INSIDE a
    field as a single ``quotechar`` element.
-escapechar : str (length 1), default None
+escapechar : str (length 1), optional
     One-character string used to escape delimiter when quoting is QUOTE_NONE.
-comment : str, default None
+comment : str, optional
     Indicates remainder of line should not be parsed. If found at the beginning
     of a line, the line will be ignored altogether. This parameter must be a
     single character. Like empty lines (as long as ``skip_blank_lines=True``),
@@ -267,102 +270,73 @@ comment : str, default None
     `skiprows`. For example, if ``comment='#'``, parsing
     ``#empty\\na,b,c\\n1,2,3`` with ``header=0`` will result in 'a,b,c' being
     treated as the header.
-encoding : str, default None
+encoding : str, optional
     Encoding to use for UTF when reading/writing (ex. 'utf-8'). `List of Python
     standard encodings
-    <https://docs.python.org/3/library/codecs.html#standard-encodings>`_
-dialect : str or csv.Dialect instance, default None
+    <https://docs.python.org/3/library/codecs.html#standard-encodings>`_ .
+dialect : str or csv.Dialect, optional
     If provided, this parameter will override values (default or not) for the
     following parameters: `delimiter`, `doublequote`, `escapechar`,
     `skipinitialspace`, `quotechar`, and `quoting`. If it is necessary to
     override values, a ParserWarning will be issued. See csv.Dialect
     documentation for more details.
-tupleize_cols : boolean, default False
+tupleize_cols : bool, default False
+    Leave a list of tuples on columns as is (default is to convert to
+    a MultiIndex on the columns).
+
     .. deprecated:: 0.21.0
        This argument will be removed and will always convert to MultiIndex
 
-    Leave a list of tuples on columns as is (default is to convert to
-    a MultiIndex on the columns)
-error_bad_lines : boolean, default True
+error_bad_lines : bool, default True
     Lines with too many fields (e.g. a csv line with too many commas) will by
     default cause an exception to be raised, and no DataFrame will be returned.
     If False, then these "bad lines" will dropped from the DataFrame that is
     returned.
-warn_bad_lines : boolean, default True
+warn_bad_lines : bool, default True
     If error_bad_lines is False, and warn_bad_lines is True, a warning for each
     "bad line" will be output.
-low_memory : boolean, default True
+delim_whitespace : bool, default False
+    Specifies whether or not whitespace (e.g. ``' '`` or ``'\t'``) will be
+    used as the sep. Equivalent to setting ``sep='\\s+'``. If this option
+    is set to True, nothing should be passed in for the ``delimiter``
+    parameter.
+
+    .. versionadded:: 0.18.1 support for the Python parser.
+
+low_memory : bool, default True
     Internally process the file in chunks, resulting in lower memory use
     while parsing, but possibly mixed type inference.  To ensure no mixed
     types either set False, or specify the type with the `dtype` parameter.
     Note that the entire file is read into a single DataFrame regardless,
     use the `chunksize` or `iterator` parameter to return the data in chunks.
-    (Only valid with C parser)
-memory_map : boolean, default False
+    (Only valid with C parser).
+memory_map : bool, default False
     If a filepath is provided for `filepath_or_buffer`, map the file object
     directly onto memory and access the data directly from there. Using this
     option can improve performance because there is no longer any I/O overhead.
+float_precision : str, optional
+    Specifies which converter the C engine should use for floating-point
+    values. The options are `None` for the ordinary converter,
+    `high` for the high-precision converter, and `round_trip` for the
+    round-trip converter.
 
 Returns
 -------
-result : DataFrame or TextParser
+DataFrame or TextParser
+    A comma-separated values (csv) file is returned as two-dimensional
+    data structure with labeled axes.
+
+See Also
+--------
+to_csv : Write DataFrame to a comma-separated values (csv) file.
+read_csv : Read a comma-separated values (csv) file into DataFrame.
+read_fwf : Read a table of fixed-width formatted lines into DataFrame.
+
+Examples
+--------
+>>> pd.{func_name}('data.csv')  # doctest: +SKIP
 """
 
-# engine is not used in read_fwf() so is factored out of the shared docstring
-_engine_doc = """engine : {'c', 'python'}, optional
-    Parser engine to use. The C engine is faster while the python engine is
-    currently more feature-complete."""
-
-_sep_doc = r"""sep : str, default {default}
-    Delimiter to use. If sep is None, the C engine cannot automatically detect
-    the separator, but the Python parsing engine can, meaning the latter will
-    be used and automatically detect the separator by Python's builtin sniffer
-    tool, ``csv.Sniffer``. In addition, separators longer than 1 character and
-    different from ``'\s+'`` will be interpreted as regular expressions and
-    will also force the use of the Python parsing engine. Note that regex
-    delimiters are prone to ignoring quoted data. Regex example: ``'\r\t'``
-delimiter : str, default ``None``
-    Alternative argument name for sep."""
-
-_read_csv_doc = """
-Read CSV (comma-separated) file into DataFrame
-
-%s
-""" % (_parser_params % (_sep_doc.format(default="','"), _engine_doc))
-
-_read_table_doc = """
-
-.. deprecated:: 0.24.0
-   Use :func:`pandas.read_csv` instead, passing ``sep='\t'`` if necessary.
-
-Read general delimited file into DataFrame
-
-%s
-""" % (_parser_params % (_sep_doc.format(default="\\t (tab-stop)"),
-                         _engine_doc))
-
-_fwf_widths = """\
-colspecs : list of pairs (int, int) or 'infer'. optional
-    A list of pairs (tuples) giving the extents of the fixed-width
-    fields of each line as half-open intervals (i.e.,  [from, to[ ).
-    String value 'infer' can be used to instruct the parser to try
-    detecting the column specifications from the first 100 rows of
-    the data which are not being skipped via skiprows (default='infer').
-widths : list of ints. optional
-    A list of field widths which can be used instead of 'colspecs' if
-    the intervals are contiguous.
-delimiter : str, default ``'\t' + ' '``
-    Characters to consider as filler characters in the fixed-width file.
-    Can be used to specify the filler character of the fields
-    if it is not spaces (e.g., '~').
-"""
-
-_read_fwf_doc = """
-Read a table of fixed-width formatted lines into DataFrame
-
-%s
-""" % (_parser_params % (_fwf_widths, ''))
-
 
 def _validate_integer(name, val, min_val=0):
     """
@@ -468,10 +442,10 @@ def _read(filepath_or_buffer, kwds):
 _parser_defaults = {
     'delimiter': None,
 
-    'doublequote': True,
     'escapechar': None,
     'quotechar': '"',
     'quoting': csv.QUOTE_MINIMAL,
+    'doublequote': True,
     'skipinitialspace': False,
     'lineterminator': None,
 
@@ -480,14 +454,16 @@ _parser_defaults = {
     'names': None,
     'prefix': None,
     'skiprows': None,
+    'skipfooter': 0,
+    'nrows': None,
     'na_values': None,
+    'keep_default_na': True,
+
     'true_values': None,
     'false_values': None,
     'converters': None,
     'dtype': None,
-    'skipfooter': 0,
 
-    'keep_default_na': True,
     'thousands': None,
     'comment': None,
     'decimal': b'.',
@@ -497,10 +473,8 @@ _parser_defaults = {
     'keep_date_col': False,
     'dayfirst': False,
     'date_parser': None,
-
     'usecols': None,
 
-    'nrows': None,
     # 'iterator': False,
     'chunksize': None,
     'verbose': False,
@@ -573,6 +547,7 @@ def _make_parser_function(name, default_sep=','):
                  false_values=None,
                  skipinitialspace=False,
                  skiprows=None,
+                 skipfooter=0,
                  nrows=None,
 
                  # NA and Missing Data Handling
@@ -600,6 +575,7 @@ def _make_parser_function(name, default_sep=','):
                  lineterminator=None,
                  quotechar='"',
                  quoting=csv.QUOTE_MINIMAL,
+                 doublequote=True,
                  escapechar=None,
                  comment=None,
                  encoding=None,
@@ -610,10 +586,7 @@ def _make_parser_function(name, default_sep=','):
                  error_bad_lines=True,
                  warn_bad_lines=True,
 
-                 skipfooter=0,
-
                  # Internal
-                 doublequote=True,
                  delim_whitespace=False,
                  low_memory=_c_parser_defaults['low_memory'],
                  memory_map=False,
@@ -683,6 +656,7 @@ def _make_parser_function(name, default_sep=','):
                     names=names,
                     prefix=prefix,
                     skiprows=skiprows,
+                    skipfooter=skipfooter,
                     na_values=na_values,
                     true_values=true_values,
                     false_values=false_values,
@@ -699,7 +673,6 @@ def _make_parser_function(name, default_sep=','):
                     nrows=nrows,
                     iterator=iterator,
                     chunksize=chunksize,
-                    skipfooter=skipfooter,
                     converters=converters,
                     dtype=dtype,
                     usecols=usecols,
@@ -727,14 +700,77 @@ def _make_parser_function(name, default_sep=','):
 
 
 read_csv = _make_parser_function('read_csv', default_sep=',')
-read_csv = Appender(_read_csv_doc)(read_csv)
+read_csv = Appender(_doc_read_csv_and_table.format(
+                    func_name='read_csv',
+                    summary=('Read a comma-separated values (csv) file '
+                             'into DataFrame.'),
+                    _default_sep="','")
+                    )(read_csv)
 
 read_table = _make_parser_function('read_table', default_sep='\t')
-read_table = Appender(_read_table_doc)(read_table)
+read_table = Appender(_doc_read_csv_and_table.format(
+                      func_name='read_table',
+                      summary="""Read general delimited file into DataFrame.
+
+.. deprecated:: 0.24.0
+Use :func:`pandas.read_csv` instead, passing ``sep='\\t'`` if necessary.""",
+                      _default_sep=r"'\\t' (tab-stop)")
+                      )(read_table)
+
 
+def read_fwf(filepath_or_buffer, colspecs='infer',
+             widths=None, **kwds):
+
+    r"""
+    Read a table of fixed-width formatted lines into DataFrame.
+
+    Also supports optionally iterating or breaking of the file
+    into chunks.
+
+    Additional help can be found in the `online docs for IO Tools
+    <http://pandas.pydata.org/pandas-docs/stable/io.html>`_.
+
+    Parameters
+    ----------
+    filepath_or_buffer : str, path object, or file-like object
+        Any valid string path is acceptable. The string could be a URL. Valid
+        URL schemes include http, ftp, s3, and file. For file URLs, a host is
+        expected. A local file could be: file://localhost/path/to/table.csv.
+
+        If you want to pass in a path object, pandas accepts either
+        ``pathlib.Path`` or ``py._path.local.LocalPath``.
+
+        By file-like object, we refer to objects with a ``read()`` method,
+        such as a file handler (e.g. via builtin ``open`` function)
+        or ``StringIO``.
+    colspecs : list of tuple (int, int) or 'infer'. optional
+        A list of tuples giving the extents of the fixed-width
+        fields of each line as half-open intervals (i.e.,  [from, to[ ).
+        String value 'infer' can be used to instruct the parser to try
+        detecting the column specifications from the first 100 rows of
+        the data which are not being skipped via skiprows (default='infer').
+    widths : list of int, optional
+        A list of field widths which can be used instead of 'colspecs' if
+        the intervals are contiguous.
+    **kwds : optional
+        Optional keyword arguments can be passed to ``TextFileReader``.
+
+    Returns
+    -------
+    DataFrame or TextParser
+        A comma-separated values (csv) file is returned as two-dimensional
+        data structure with labeled axes.
+
+    See Also
+    --------
+    to_csv : Write DataFrame to a comma-separated values (csv) file.
+    read_csv : Read a comma-separated values (csv) file into DataFrame.
+
+    Examples
+    --------
+    >>> pd.read_fwf('data.csv')  # doctest: +SKIP
+    """
 
-@Appender(_read_fwf_doc)
-def read_fwf(filepath_or_buffer, colspecs='infer', widths=None, **kwds):
     # Check input arguments.
     if colspecs is None and widths is None:
         raise ValueError("Must specify either colspecs or widths")
@@ -2018,45 +2054,45 @@ def TextParser(*args, **kwds):
     ----------
     data : file-like object or list
     delimiter : separator character to use
-    dialect : str or csv.Dialect instance, default None
+    dialect : str or csv.Dialect instance, optional
         Ignored if delimiter is longer than 1 character
     names : sequence, default
     header : int, default 0
         Row to use to parse column labels. Defaults to the first row. Prior
         rows will be discarded
-    index_col : int or list, default None
+    index_col : int or list, optional
         Column or columns to use as the (possibly hierarchical) index
-    has_index_names: boolean, default False
+    has_index_names: bool, default False
         True if the cols defined in index_col have an index name and are
-        not in the header
-    na_values : scalar, str, list-like, or dict, default None
+        not in the header.
+    na_values : scalar, str, list-like, or dict, optional
         Additional strings to recognize as NA/NaN.
     keep_default_na : bool, default True
-    thousands : str, default None
+    thousands : str, optional
         Thousands separator
-    comment : str, default None
+    comment : str, optional
         Comment out remainder of line
-    parse_dates : boolean, default False
-    keep_date_col : boolean, default False
-    date_parser : function, default None
+    parse_dates : bool, default False
+    keep_date_col : bool, default False
+    date_parser : function, optional
     skiprows : list of integers
         Row numbers to skip
     skipfooter : int
         Number of line at bottom of file to skip
-    converters : dict, default None
+    converters : dict, optional
         Dict of functions for converting values in certain columns. Keys can
         either be integers or column labels, values are functions that take one
         input argument, the cell (not column) content, and return the
         transformed content.
-    encoding : string, default None
+    encoding : str, optional
         Encoding to use for UTF when reading/writing (ex. 'utf-8')
-    squeeze : boolean, default False
-        returns Series if only one column
-    infer_datetime_format: boolean, default False
+    squeeze : bool, default False
+        returns Series if only one column.
+    infer_datetime_format: bool, default False
         If True and `parse_dates` is True for a column, try to infer the
         datetime format based on the first datetime string. If the format
         can be inferred, there often will be a large parsing speed-up.
-    float_precision : string, default None
+    float_precision : str, optional
         Specifies which converter the C engine should use for floating-point
         values. The options are None for the ordinary converter,
         'high' for the high-precision converter, and 'round_trip' for the
