commit ba4f146ee120e8afa0b093060f4ade662352dc10
Author: jreback <jeff@reback.net>
Date:   Sat Oct 4 15:02:23 2014 -0400

    DOC: categorical.rst fixups

diff --git a/doc/source/categorical.rst b/doc/source/categorical.rst
index e29e2d311..728f0d373 100644
--- a/doc/source/categorical.rst
+++ b/doc/source/categorical.rst
@@ -10,15 +10,16 @@
    import os
    np.random.seed(123456)
    from pandas import options
+   from pandas import *
    import pandas as pd
    np.set_printoptions(precision=4, suppress=True)
    options.display.mpl_style='default'
    options.display.max_rows=15
 
 
-***********
-Categorical
-***********
+****************
+Categorical Data
+****************
 
 .. versionadded:: 0.15
 
@@ -65,14 +66,14 @@ By specifying ``dtype="category"`` when constructing a `Series`:
 
 .. ipython:: python
 
-    s = pd.Series(["a","b","c","a"], dtype="category")
+    s = Series(["a","b","c","a"], dtype="category")
     s
 
 By converting an existing `Series` or column to a ``category`` dtype:
 
 .. ipython:: python
 
-    df = pd.DataFrame({"A":["a","b","c","a"]})
+    df = DataFrame({"A":["a","b","c","a"]})
     df["B"] = df["A"].astype('category')
     df
 
@@ -80,7 +81,7 @@ By using some special functions:
 
 .. ipython:: python
 
-    df = pd.DataFrame({'value': np.random.randint(0, 100, 20)})
+    df = DataFrame({'value': np.random.randint(0, 100, 20)})
     labels = [ "{0} - {1}".format(i, i + 9) for i in range(0, 100, 10) ]
 
     df['group'] = pd.cut(df.value, range(0, 105, 10), right=False, labels=labels)
@@ -94,11 +95,11 @@ creation time and the only reason to use :class:`pandas.Categorical` directly:
 
 .. ipython:: python
 
-    raw_cat = pd.Categorical(["a","b","c","a"], categories=["b","c","d"],
+    raw_cat = Categorical(["a","b","c","a"], categories=["b","c","d"],
                              ordered=False)
-    s = pd.Series(raw_cat)
+    s = Series(raw_cat)
     s
-    df = pd.DataFrame({"A":["a","b","c","a"]})
+    df = DataFrame({"A":["a","b","c","a"]})
     df["B"] = raw_cat
     df
 
@@ -123,7 +124,7 @@ To get back to the original Series or `numpy` array, use ``Series.astype(origina
 
 .. ipython:: python
 
-    s = pd.Series(["a","b","c","a"])
+    s = Series(["a","b","c","a"])
     s
     s2 = s.astype('category')
     s2
@@ -137,7 +138,7 @@ constructor to save the factorize step during normal constructor mode:
 .. ipython:: python
 
     splitter = np.random.choice([0,1], 5, p=[0.5,0.5])
-    s = pd.Series(pd.Categorical.from_codes(splitter, categories=["train", "test"]))
+    s = Series(Categorical.from_codes(splitter, categories=["train", "test"]))
 
 Description
 -----------
@@ -147,8 +148,8 @@ Using ``.describe()`` on categorical data will produce similar output to a `Seri
 
 .. ipython:: python
 
-    cat = pd.Categorical(["a","c","c",np.nan], categories=["b","a","c",np.nan] )
-    df = pd.DataFrame({"cat":cat, "s":["a","c","c",np.nan]})
+    cat = Categorical(["a","c","c",np.nan], categories=["b","a","c",np.nan] )
+    df = DataFrame({"cat":cat, "s":["a","c","c",np.nan]})
     df.describe()
     df["cat"].describe()
 
@@ -162,7 +163,7 @@ passed in values.
 
 .. ipython:: python
 
-    s = pd.Series(["a","b","c","a"], dtype="category")
+    s = Series(["a","b","c","a"], dtype="category")
     s.cat.categories
     s.cat.ordered
 
@@ -170,7 +171,7 @@ It's also possible to pass in the categories in a specific order:
 
 .. ipython:: python
 
-    s = pd.Series(pd.Categorical(["a","b","c","a"], categories=["c","b","a"]))
+    s = Series(Categorical(["a","b","c","a"], categories=["c","b","a"]))
     s.cat.categories
     s.cat.ordered
 
@@ -182,14 +183,14 @@ It's also possible to pass in the categories in a specific order:
 
 
 Renaming categories
-*******************
+~~~~~~~~~~~~~~~~~~~
 
 Renaming categories is done by assigning new values to the ``Series.cat.categories`` property or
 by using the :func:`Categorical.rename_categories` method:
 
 .. ipython:: python
 
-    s = pd.Series(["a","b","c","a"], dtype="category")
+    s = Series(["a","b","c","a"], dtype="category")
     s
     s.cat.categories = ["Group %s" % g for g in s.cat.categories]
     s
@@ -214,7 +215,7 @@ Categories must be unique or a `ValueError` is raised:
         print("ValueError: " + str(e))
 
 Appending new categories
-************************
+~~~~~~~~~~~~~~~~~~~~~~~~
 
 Appending categories can be done by using the :func:`Categorical.add_categories` method:
 
@@ -225,7 +226,7 @@ Appending categories can be done by using the :func:`Categorical.add_categories`
     s
 
 Removing categories
-*******************
+~~~~~~~~~~~~~~~~~~~
 
 Removing categories can be done by using the :func:`Categorical.remove_categories` method. Values
 which are removed are replaced by ``np.nan``.:
@@ -236,25 +237,25 @@ which are removed are replaced by ``np.nan``.:
     s
 
 Renaming unused categories
-**************************
+~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 Removing unused categories can also be done:
 
 .. ipython:: python
 
-    s = pd.Series(pd.Categorical(["a","b","a"], categories=["a","b","c","d"]))
+    s = Series(Categorical(["a","b","a"], categories=["a","b","c","d"]))
     s
     s.cat.remove_unused_categories()
 
 Setting categories
-******************
+~~~~~~~~~~~~~~~~~~
 
 If you want to do remove and add new categories in one step (which has some speed advantage),
 or simply set the categories to a predefined scale, use :func:`Categorical.set_categories`.
 
 .. ipython:: python
 
-    s = pd.Series(["one","two","four", "-"], dtype="category")
+    s = Series(["one","two","four", "-"], dtype="category")
     s
     s = s.cat.set_categories(["one","two","three","four"])
     s
@@ -273,12 +274,12 @@ raised.
 
 .. ipython:: python
 
-    s = pd.Series(pd.Categorical(["a","b","c","a"], ordered=False))
+    s = Series(Categorical(["a","b","c","a"], ordered=False))
     try:
         s.sort()
     except TypeError as e:
         print("TypeError: " + str(e))
-    s = pd.Series(["a","b","c","a"], dtype="category") # ordered per default!
+    s = Series(["a","b","c","a"], dtype="category") # ordered per default!
     s.sort()
     s
     s.min(), s.max()
@@ -288,7 +289,7 @@ This is even true for strings and numeric data:
 
 .. ipython:: python
 
-    s = pd.Series([1,2,3,1], dtype="category")
+    s = Series([1,2,3,1], dtype="category")
     s.cat.categories = [2,3,1]
     s
     s.sort()
@@ -301,7 +302,7 @@ old categories must be included in the new categories and no new categories are
 
 .. ipython:: python
 
-    s = pd.Series([1,2,3,1], dtype="category")
+    s = Series([1,2,3,1], dtype="category")
     s = s.cat.reorder_categories([2,3,1])
     s
     s.sort()
@@ -337,9 +338,9 @@ All other comparisons will raise a TypeError.
 
 .. ipython:: python
 
-    cat = pd.Series(pd.Categorical([1,2,3], categories=[3,2,1]))
-    cat_base = pd.Series(pd.Categorical([2,2,2], categories=[3,2,1]))
-    cat_base2 = pd.Series(pd.Categorical([2,2,2]))
+    cat = Series(Categorical([1,2,3], categories=[3,2,1]))
+    cat_base = Series(Categorical([2,2,2], categories=[3,2,1]))
+    cat_base2 = Series(Categorical([2,2,2]))
 
     cat
     cat_base
@@ -391,19 +392,19 @@ present in the data:
 
 .. ipython:: python
 
-    s = pd.Series(pd.Categorical(["a","b","c","c"], categories=["c","a","b","d"]))
+    s = Series(Categorical(["a","b","c","c"], categories=["c","a","b","d"]))
     s.value_counts()
 
 Groupby will also show "unused" categories:
 
 .. ipython:: python
 
-    cats = pd.Categorical(["a","b","b","b","c","c","c"], categories=["a","b","c","d"])
-    df = pd.DataFrame({"cats":cats,"values":[1,2,2,2,3,4,5]})
+    cats = Categorical(["a","b","b","b","c","c","c"], categories=["a","b","c","d"])
+    df = DataFrame({"cats":cats,"values":[1,2,2,2,3,4,5]})
     df.groupby("cats").mean()
 
-    cats2 = pd.Categorical(["a","a","b","b"], categories=["a","b","c"])
-    df2 = pd.DataFrame({"cats":cats2,"B":["c","d","c","d"], "values":[1,2,3,4]})
+    cats2 = Categorical(["a","a","b","b"], categories=["a","b","c"])
+    df2 = DataFrame({"cats":cats2,"B":["c","d","c","d"], "values":[1,2,3,4]})
     df2.groupby(["cats","B"]).mean()
 
 
@@ -411,8 +412,8 @@ Pivot tables:
 
 .. ipython:: python
 
-    raw_cat = pd.Categorical(["a","a","b","b"], categories=["a","b","c"])
-    df = pd.DataFrame({"A":raw_cat,"B":["c","d","c","d"], "values":[1,2,3,4]})
+    raw_cat = Categorical(["a","a","b","b"], categories=["a","b","c"])
+    df = DataFrame({"A":raw_cat,"B":["c","d","c","d"], "values":[1,2,3,4]})
     pd.pivot_table(df, values='values', index=['A', 'B'])
 
 Data munging
@@ -430,10 +431,10 @@ the ``category`` dtype is preserved.
 
 .. ipython:: python
 
-    idx = pd.Index(["h","i","j","k","l","m","n",])
-    cats = pd.Series(["a","b","b","b","c","c","c"], dtype="category", index=idx)
+    idx = Index(["h","i","j","k","l","m","n",])
+    cats = Series(["a","b","b","b","c","c","c"], dtype="category", index=idx)
     values= [1,2,2,2,3,4,5]
-    df = pd.DataFrame({"cats":cats,"values":values}, index=idx)
+    df = DataFrame({"cats":cats,"values":values}, index=idx)
     df.iloc[2:4,:]
     df.iloc[2:4,:].dtypes
     df.loc["h":"j","cats"]
@@ -475,10 +476,10 @@ Setting values in a categorical column (or `Series`) works as long as the value
 
 .. ipython:: python
 
-    idx = pd.Index(["h","i","j","k","l","m","n"])
-    cats = pd.Categorical(["a","a","a","a","a","a","a"], categories=["a","b"])
+    idx = Index(["h","i","j","k","l","m","n"])
+    cats = Categorical(["a","a","a","a","a","a","a"], categories=["a","b"])
     values = [1,1,1,1,1,1,1]
-    df = pd.DataFrame({"cats":cats,"values":values}, index=idx)
+    df = DataFrame({"cats":cats,"values":values}, index=idx)
 
     df.iloc[2:4,:] = [["b",2],["b",2]]
     df
@@ -491,10 +492,10 @@ Setting values by assigning categorical data will also check that the `categorie
 
 .. ipython:: python
 
-    df.loc["j":"k","cats"] = pd.Categorical(["a","a"], categories=["a","b"])
+    df.loc["j":"k","cats"] = Categorical(["a","a"], categories=["a","b"])
     df
     try:
-        df.loc["j":"k","cats"] = pd.Categorical(["b","b"], categories=["a","b","c"])
+        df.loc["j":"k","cats"] = Categorical(["b","b"], categories=["a","b","c"])
     except ValueError as e:
         print("ValueError: " + str(e))
 
@@ -502,9 +503,9 @@ Assigning a `Categorical` to parts of a column of other types will use the value
 
 .. ipython:: python
 
-    df = pd.DataFrame({"a":[1,1,1,1,1], "b":["a","a","a","a","a"]})
-    df.loc[1:2,"a"] = pd.Categorical(["b","b"], categories=["a","b"])
-    df.loc[2:3,"b"] = pd.Categorical(["b","b"], categories=["a","b"])
+    df = DataFrame({"a":[1,1,1,1,1], "b":["a","a","a","a","a"]})
+    df.loc[1:2,"a"] = Categorical(["b","b"], categories=["a","b"])
+    df.loc[2:3,"b"] = Categorical(["b","b"], categories=["a","b"])
     df
     df.dtypes
 
@@ -517,9 +518,9 @@ but the categories of these categoricals need to be the same:
 
 .. ipython:: python
 
-    cat = pd.Series(["a","b"], dtype="category")
+    cat = Series(["a","b"], dtype="category")
     vals = [1,2]
-    df = pd.DataFrame({"cats":cat, "vals":vals})
+    df = DataFrame({"cats":cat, "vals":vals})
     res = pd.concat([df,df])
     res
     res.dtypes
@@ -554,12 +555,12 @@ relevant columns back to `category` and assign the right categories and categori
 
 .. ipython:: python
 
-    s = pd.Series(pd.Categorical(['a', 'b', 'b', 'a', 'a', 'd']))
+    s = Series(Categorical(['a', 'b', 'b', 'a', 'a', 'd']))
     # rename the categories
     s.cat.categories = ["very good", "good", "bad"]
     # reorder the categories and add missing categories
     s = s.cat.set_categories(["very bad", "bad", "medium", "good", "very good"])
-    df = pd.DataFrame({"cats":s, "vals":[1,2,3,4,5,6]})
+    df = DataFrame({"cats":s, "vals":[1,2,3,4,5,6]})
     csv = StringIO()
     df.to_csv(csv)
     df2 = pd.read_csv(StringIO(csv.getvalue()))
@@ -585,10 +586,10 @@ available ("missing value") or `np.nan` is a valid category.
 
 .. ipython:: python
 
-    s = pd.Series(["a","b",np.nan,"a"], dtype="category")
+    s = Series(["a","b",np.nan,"a"], dtype="category")
     # only two categories
     s
-    s2 = pd.Series(["a","b","c","a"], dtype="category")
+    s2 = Series(["a","b","c","a"], dtype="category")
     s2.cat.categories = [1,2,np.nan]
     # three categories, np.nan included
     s2
@@ -602,20 +603,15 @@ available ("missing value") or `np.nan` is a valid category.
 
 .. ipython:: python
 
-    c = pd.Series(["a","b",np.nan], dtype="category")
+    c = Series(["a","b",np.nan], dtype="category")
     c.cat.set_categories(["a","b",np.nan], inplace=True)
     # will be inserted as a NA category:
     c[0] = np.nan
-    s = pd.Series(c)
+    s = Series(c)
     s
     pd.isnull(s)
     s.fillna("a")
 
-Gotchas
--------
-
-.. _categorical.rfactor:
-
 Differences to R's `factor`
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
@@ -632,13 +628,18 @@ The following differences to R's factor functions can be observed:
   new categorical series will *not* remove unused categories but create a new categorical series
   which is equal to the passed in one!
 
+Gotchas
+-------
+
+.. _categorical.rfactor:
+
 Memory Usage
 ~~~~~~~~~~~~
 
 .. _categorical.memory:
 
-The memory usage of a ``Categorical`` is proportional to the length of the categories times the length of the data. In contrast,
-the an ``object`` dtype is a fixed function of the length of the data.
+The memory usage of a ``Categorical`` is proportional to the number of categories times the length of the data. In contrast,
+an ``object`` dtype is a constant times the length of the data.
 
 .. ipython:: python
 
@@ -650,8 +651,21 @@ the an ``object`` dtype is a fixed function of the length of the data.
    # category dtype
    s.astype('category').nbytes
 
-Note that if the number of categories approaches the length of the data, the ``Categorical`` will use nearly (or more) memory than an
-equivalent ``object`` dtype representation.
+.. note::
+
+   If the number of categories approaches the length of the data, the ``Categorical`` will use nearly (or more) memory than an
+   equivalent ``object`` dtype representation.
+
+   .. ipython:: python
+
+      s = Series(['foo%04d' % i for i in range(2000)])
+
+      # object dtype
+      s.nbytes
+
+      # category dtype
+      s.astype('category').nbytes
+
 
 Old style constructor usage
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -666,7 +680,7 @@ will work with the current pandas version, resulting in subtle bugs:
 
 .. code-block:: python
 
-    >>> cat = pd.Categorical([1,2], [1,2,3])
+    >>> cat = Categorical([1,2], [1,2,3])
     >>> # old version
     >>> cat.get_values()
     array([2, 3], dtype=int64)
@@ -694,7 +708,7 @@ object and not as a low-level `numpy` array dtype. This leads to some problems.
     except TypeError as e:
         print("TypeError: " + str(e))
 
-    dtype = pd.Categorical(["a"]).dtype
+    dtype = Categorical(["a"]).dtype
     try:
         np.dtype(dtype)
     except TypeError as e:
@@ -712,7 +726,7 @@ are not numeric data (even in the case that ``.categories`` is numeric).
 
 .. ipython:: python
 
-    s = pd.Series(pd.Categorical([1,2,3,4]))
+    s = Series(Categorical([1,2,3,4]))
     try:
         np.sum(s)
         #same with np.log(s),..
@@ -731,9 +745,9 @@ basic type) and applying along columns will also convert to object.
 
 .. ipython:: python
 
-    df = pd.DataFrame({"a":[1,2,3,4],
-                       "b":["a","b","c","d"],
-                       "cats":pd.Categorical([1,2,3,2])})
+    df = DataFrame({"a":[1,2,3,4],
+                    "b":["a","b","c","d"],
+                    "cats":Categorical([1,2,3,2])})
     df.apply(lambda row: type(row["cats"]), axis=1)
     df.apply(lambda col: col.dtype, axis=0)
 
@@ -746,10 +760,10 @@ ordering of the categories:
 
 .. ipython:: python
 
-    cats = pd.Categorical([1,2,3,4], categories=[4,2,3,1])
+    cats = Categorical([1,2,3,4], categories=[4,2,3,1])
     strings = ["a","b","c","d"]
     values = [4,2,3,1]
-    df = pd.DataFrame({"strings":strings, "values":values}, index=cats)
+    df = DataFrame({"strings":strings, "values":values}, index=cats)
     df.index
     # This should sort by categories but does not as there is no CategoricalIndex!
     df.sort_index()
@@ -767,12 +781,12 @@ means that changes to the `Series` will in most cases change the original `Categ
 
 .. ipython:: python
 
-    cat = pd.Categorical([1,2,3,10], categories=[1,2,3,4,10])
-    s = pd.Series(cat, name="cat")
+    cat = Categorical([1,2,3,10], categories=[1,2,3,4,10])
+    s = Series(cat, name="cat")
     cat
     s.iloc[0:2] = 10
     cat
-    df = pd.DataFrame(s)
+    df = DataFrame(s)
     df["cat"].cat.categories = [1,2,3,4,5]
     cat
 
@@ -780,8 +794,8 @@ Use ``copy=True`` to prevent such a behaviour or simply don't reuse `Categorical
 
 .. ipython:: python
 
-    cat = pd.Categorical([1,2,3,10], categories=[1,2,3,4,10])
-    s = pd.Series(cat, name="cat", copy=True)
+    cat = Categorical([1,2,3,10], categories=[1,2,3,4,10])
+    s = Series(cat, name="cat", copy=True)
     cat
     s.iloc[0:2] = 10
     cat
