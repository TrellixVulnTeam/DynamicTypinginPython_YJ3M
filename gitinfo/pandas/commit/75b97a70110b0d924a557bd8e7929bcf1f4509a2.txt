commit 75b97a70110b0d924a557bd8e7929bcf1f4509a2
Author: Nis Martensen <nis.martensen@web.de>
Date:   Thu Dec 21 10:30:57 2017 -0500

    BUG: Fix TimeFormatter behavior with fractional seconds
    
    closes #18478
    
    Author: Nis Martensen <nis.martensen@web.de>
    
    Closes #18552 from nmartensen/time_formatter and squashes the following commits:
    
    c1ace3881 [Nis Martensen] TimeFormatter: Docstring: add parameters and returns sections
    9b8bde484 [Nis Martensen] test_datetimelike::test_time: update expected results
    75ae4f1e2 [Nis Martensen] test_datetimelike::test_time*: make testing tick labels actually work
    8157c351c [Nis Martensen] test_converter::test_time_formatter: comment, formatting
    d7fa51f5d [Nis Martensen] TimeFormatter: Add __call__ docstring
    1a1115359 [Nis Martensen] simplify
    e7d5b0dd3 [Nis Martensen] Add whatsnew entry
    91bf9b2fa [Nis Martensen] Add some TimeFormatter test comparisons
    c86238c29 [Nis Martensen] TimeFormatter: Only show seconds if non-zero
    9a78cd77b [Nis Martensen] TimeFormatter: use round() for microseconds
    9efa68cb4 [Nis Martensen] Fix TimeFormatter for fractional seconds

diff --git a/doc/source/whatsnew/v0.22.0.txt b/doc/source/whatsnew/v0.22.0.txt
index 2054c1828..a289cf329 100644
--- a/doc/source/whatsnew/v0.22.0.txt
+++ b/doc/source/whatsnew/v0.22.0.txt
@@ -316,6 +316,7 @@ Plotting
 ^^^^^^^^
 
 - :func: `DataFrame.plot` now raises a ``ValueError`` when the ``x`` or ``y`` argument is improperly formed (:issue:`18671`)
+- Bug in formatting tick labels with ``datetime.time()`` and fractional seconds (:issue:`18478`).
 -
 -
 
diff --git a/pandas/plotting/_converter.py b/pandas/plotting/_converter.py
index 3a3d871c0..2a45e20dd 100644
--- a/pandas/plotting/_converter.py
+++ b/pandas/plotting/_converter.py
@@ -190,19 +190,39 @@ class TimeFormatter(Formatter):
         self.locs = locs
 
     def __call__(self, x, pos=0):
-        fmt = '%H:%M:%S'
+        """
+        Return the time of day as a formatted string.
+
+        Parameters
+        ----------
+        x : float
+            The time of day specified as seconds since 00:00 (midnight),
+            with upto microsecond precision.
+        pos
+            Unused
+
+        Returns
+        -------
+        str
+            A string in HH:MM:SS.mmmuuu format. Microseconds,
+            milliseconds and seconds are only displayed if non-zero.
+        """
+        fmt = '%H:%M:%S.%f'
         s = int(x)
-        ms = int((x - s) * 1e3)
-        us = int((x - s) * 1e6 - ms)
+        msus = int(round((x - s) * 1e6))
+        ms = msus // 1000
+        us = msus % 1000
         m, s = divmod(s, 60)
         h, m = divmod(m, 60)
         _, h = divmod(h, 24)
         if us != 0:
-            fmt += '.%6f'
+            return pydt.time(h, m, s, msus).strftime(fmt)
         elif ms != 0:
-            fmt += '.%3f'
+            return pydt.time(h, m, s, msus).strftime(fmt)[:-3]
+        elif s != 0:
+            return pydt.time(h, m, s).strftime('%H:%M:%S')
 
-        return pydt.time(h, m, s, us).strftime(fmt)
+        return pydt.time(h, m).strftime('%H:%M')
 
 
 # Period Conversion
diff --git a/pandas/tests/plotting/test_converter.py b/pandas/tests/plotting/test_converter.py
index 3818c0464..cc2752824 100644
--- a/pandas/tests/plotting/test_converter.py
+++ b/pandas/tests/plotting/test_converter.py
@@ -236,7 +236,28 @@ class TestDateTimeConverter(object):
         assert rs == xp
 
     def test_time_formatter(self):
-        self.tc(90000)
+        # issue 18478
+
+        # time2num(datetime.time.min)
+        rs = self.tc(0)
+        xp = '00:00'
+        assert rs == xp
+
+        # time2num(datetime.time.max)
+        rs = self.tc(86399.999999)
+        xp = '23:59:59.999999'
+        assert rs == xp
+
+        # some other times
+        rs = self.tc(90000)
+        xp = '01:00'
+        assert rs == xp
+        rs = self.tc(3723)
+        xp = '01:02:03'
+        assert rs == xp
+        rs = self.tc(39723.2)
+        xp = '11:02:03.200'
+        assert rs == xp
 
     def test_dateindex_conversion(self):
         decimals = 9
diff --git a/pandas/tests/plotting/test_datetimelike.py b/pandas/tests/plotting/test_datetimelike.py
index 7f9ae7b8b..935e75ae7 100644
--- a/pandas/tests/plotting/test_datetimelike.py
+++ b/pandas/tests/plotting/test_datetimelike.py
@@ -1032,32 +1032,40 @@ class TestTSPlot(TestPlotBase):
         df = DataFrame({'a': np.random.randn(len(ts)),
                         'b': np.random.randn(len(ts))},
                        index=ts)
-        _, ax = self.plt.subplots()
+        fig, ax = self.plt.subplots()
         df.plot(ax=ax)
 
         # verify tick labels
+        fig.canvas.draw()
         ticks = ax.get_xticks()
         labels = ax.get_xticklabels()
         for t, l in zip(ticks, labels):
             m, s = divmod(int(t), 60)
             h, m = divmod(m, 60)
-            xp = l.get_text()
-            if len(xp) > 0:
-                rs = time(h, m, s).strftime('%H:%M:%S')
+            rs = l.get_text()
+            if len(rs) > 0:
+                if s != 0:
+                    xp = time(h, m, s).strftime('%H:%M:%S')
+                else:
+                    xp = time(h, m, s).strftime('%H:%M')
                 assert xp == rs
 
         # change xlim
         ax.set_xlim('1:30', '5:00')
 
         # check tick labels again
+        fig.canvas.draw()
         ticks = ax.get_xticks()
         labels = ax.get_xticklabels()
         for t, l in zip(ticks, labels):
             m, s = divmod(int(t), 60)
             h, m = divmod(m, 60)
-            xp = l.get_text()
-            if len(xp) > 0:
-                rs = time(h, m, s).strftime('%H:%M:%S')
+            rs = l.get_text()
+            if len(rs) > 0:
+                if s != 0:
+                    xp = time(h, m, s).strftime('%H:%M:%S')
+                else:
+                    xp = time(h, m, s).strftime('%H:%M')
                 assert xp == rs
 
     @pytest.mark.slow
@@ -1069,22 +1077,29 @@ class TestTSPlot(TestPlotBase):
         df = DataFrame({'a': np.random.randn(len(ts)),
                         'b': np.random.randn(len(ts))},
                        index=ts)
-        _, ax = self.plt.subplots()
+        fig, ax = self.plt.subplots()
         ax = df.plot(ax=ax)
 
         # verify tick labels
+        fig.canvas.draw()
         ticks = ax.get_xticks()
         labels = ax.get_xticklabels()
         for t, l in zip(ticks, labels):
             m, s = divmod(int(t), 60)
 
-            # TODO: unused?
-            # us = int((t - int(t)) * 1e6)
+            us = int(round((t - int(t)) * 1e6))
 
             h, m = divmod(m, 60)
-            xp = l.get_text()
-            if len(xp) > 0:
-                rs = time(h, m, s).strftime('%H:%M:%S.%f')
+            rs = l.get_text()
+            if len(rs) > 0:
+                if (us % 1000) != 0:
+                    xp = time(h, m, s, us).strftime('%H:%M:%S.%f')
+                elif (us // 1000) != 0:
+                    xp = time(h, m, s, us).strftime('%H:%M:%S.%f')[:-3]
+                elif s != 0:
+                    xp = time(h, m, s, us).strftime('%H:%M:%S')
+                else:
+                    xp = time(h, m, s, us).strftime('%H:%M')
                 assert xp == rs
 
     @pytest.mark.slow
