commit 64129d11e5a4f668378a6c8ace6cad1abd864aa3
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Wed Aug 9 03:27:34 2017 -0700

    Create ABCDateOffset (#17165)

diff --git a/pandas/core/dtypes/generic.py b/pandas/core/dtypes/generic.py
index 90608c18a..618bcf649 100644
--- a/pandas/core/dtypes/generic.py
+++ b/pandas/core/dtypes/generic.py
@@ -52,6 +52,8 @@ ABCSparseArray = create_pandas_abc_type("ABCSparseArray", "_subtyp",
 ABCCategorical = create_pandas_abc_type("ABCCategorical", "_typ",
                                         ("categorical"))
 ABCPeriod = create_pandas_abc_type("ABCPeriod", "_typ", ("period", ))
+ABCDateOffset = create_pandas_abc_type("ABCDateOffset", "_typ",
+                                       ("dateoffset",))
 
 
 class _ABCGeneric(type):
diff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py
index 4aecc75d9..de6221987 100644
--- a/pandas/core/indexes/base.py
+++ b/pandas/core/indexes/base.py
@@ -13,7 +13,11 @@ from pandas.compat.numpy import function as nv
 from pandas import compat
 
 
-from pandas.core.dtypes.generic import ABCSeries, ABCMultiIndex, ABCPeriodIndex
+from pandas.core.dtypes.generic import (
+    ABCSeries,
+    ABCMultiIndex,
+    ABCPeriodIndex,
+    ABCDateOffset)
 from pandas.core.dtypes.missing import isna, array_equivalent
 from pandas.core.dtypes.common import (
     _ensure_int64,
@@ -3814,8 +3818,6 @@ class Index(IndexOpsMixin, StringAccessorMixin, PandasObject):
 
         internal method called by ops
         """
-        from pandas.tseries.offsets import DateOffset
-
         # if we are an inheritor of numeric,
         # but not actually numeric (e.g. DatetimeIndex/PeriodInde)
         if not self._is_numeric_dtype:
@@ -3843,7 +3845,7 @@ class Index(IndexOpsMixin, StringAccessorMixin, PandasObject):
             if other.dtype.kind not in ['f', 'i', 'u']:
                 raise TypeError("cannot evaluate a numeric op "
                                 "with a non-numeric dtype")
-        elif isinstance(other, (DateOffset, np.timedelta64,
+        elif isinstance(other, (ABCDateOffset, np.timedelta64,
                                 Timedelta, datetime.timedelta)):
             # higher up to handle
             pass
@@ -3862,12 +3864,10 @@ class Index(IndexOpsMixin, StringAccessorMixin, PandasObject):
 
         def _make_evaluate_binop(op, opstr, reversed=False, constructor=Index):
             def _evaluate_numeric_binop(self, other):
-
-                from pandas.tseries.offsets import DateOffset
                 other = self._validate_for_numeric_binop(other, op, opstr)
 
                 # handle time-based others
-                if isinstance(other, (DateOffset, np.timedelta64,
+                if isinstance(other, (ABCDateOffset, np.timedelta64,
                                       Timedelta, datetime.timedelta)):
                     return self._evaluate_with_timedelta_like(other, op, opstr)
                 elif isinstance(other, (Timestamp, np.datetime64)):
diff --git a/pandas/core/ops.py b/pandas/core/ops.py
index 4e08e1483..82101414e 100644
--- a/pandas/core/ops.py
+++ b/pandas/core/ops.py
@@ -35,7 +35,11 @@ from pandas.core.dtypes.common import (
     is_scalar,
     _ensure_object)
 from pandas.core.dtypes.cast import maybe_upcast_putmask, find_common_type
-from pandas.core.dtypes.generic import ABCSeries, ABCIndex, ABCPeriodIndex
+from pandas.core.dtypes.generic import (
+    ABCSeries,
+    ABCIndex,
+    ABCPeriodIndex,
+    ABCDateOffset)
 
 # -----------------------------------------------------------------------------
 # Functions that add arithmetic methods to objects, given arithmetic factory
@@ -605,10 +609,10 @@ class _TimeOp(_Op):
 
     def _is_offset(self, arr_or_obj):
         """ check if obj or all elements of list-like is DateOffset """
-        if isinstance(arr_or_obj, pd.DateOffset):
+        if isinstance(arr_or_obj, ABCDateOffset):
             return True
         elif is_list_like(arr_or_obj) and len(arr_or_obj):
-            return all(isinstance(x, pd.DateOffset) for x in arr_or_obj)
+            return all(isinstance(x, ABCDateOffset) for x in arr_or_obj)
         return False
 
 
diff --git a/pandas/core/tools/datetimes.py b/pandas/core/tools/datetimes.py
index a1f323aff..eebf78d76 100644
--- a/pandas/core/tools/datetimes.py
+++ b/pandas/core/tools/datetimes.py
@@ -17,7 +17,7 @@ from pandas.core.dtypes.common import (
     is_numeric_dtype)
 from pandas.core.dtypes.generic import (
     ABCIndexClass, ABCSeries,
-    ABCDataFrame)
+    ABCDataFrame, ABCDateOffset)
 from pandas.core.dtypes.missing import notna
 from pandas.core import algorithms
 
@@ -720,8 +720,7 @@ def parse_time_string(arg, freq=None, dayfirst=None, yearfirst=None):
     if not isinstance(arg, compat.string_types):
         return arg
 
-    from pandas.tseries.offsets import DateOffset
-    if isinstance(freq, DateOffset):
+    if isinstance(freq, ABCDateOffset):
         freq = freq.rule_code
 
     if dayfirst is None:
diff --git a/pandas/tests/dtypes/test_generic.py b/pandas/tests/dtypes/test_generic.py
index ec850cc34..82444d6c9 100644
--- a/pandas/tests/dtypes/test_generic.py
+++ b/pandas/tests/dtypes/test_generic.py
@@ -40,6 +40,12 @@ class TestABCClasses(object):
         assert isinstance(self.categorical, gt.ABCCategorical)
         assert isinstance(pd.Period('2012', freq='A-DEC'), gt.ABCPeriod)
 
+        assert isinstance(pd.DateOffset(), gt.ABCDateOffset)
+        assert isinstance(pd.Period('2012', freq='A-DEC').freq,
+                          gt.ABCDateOffset)
+        assert not isinstance(pd.Period('2012', freq='A-DEC'),
+                              gt.ABCDateOffset)
+
 
 def test_setattr_warnings():
     # GH5904 - Suggestion: Warning for DataFrame colname-methodname clash
diff --git a/pandas/tseries/offsets.py b/pandas/tseries/offsets.py
index 2a120a069..56ef703e6 100644
--- a/pandas/tseries/offsets.py
+++ b/pandas/tseries/offsets.py
@@ -184,6 +184,7 @@ class DateOffset(object):
     )
     _use_relativedelta = False
     _adjust_dst = False
+    _typ = "dateoffset"
 
     # default for prior pickles
     normalize = False
