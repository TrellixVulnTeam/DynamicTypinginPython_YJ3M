commit b164624aa3a8170fd7d140122da391cbe32b7b8b
Author: Joao Victor Martinelli <jvmartinellis@gmail.com>
Date:   Tue Dec 10 10:06:19 2019 -0300

    #29886 - Replace !r for repr() on pandas/io/parses.py (#30073)

diff --git a/pandas/io/html.py b/pandas/io/html.py
index cc93bba46..3521bad37 100644
--- a/pandas/io/html.py
+++ b/pandas/io/html.py
@@ -102,9 +102,7 @@ def _get_skiprows(skiprows):
         return skiprows
     elif skiprows is None:
         return 0
-    raise TypeError(
-        f"'{type(skiprows).__name__}' is not a valid type for skipping rows"
-    )
+    raise TypeError(f"{type(skiprows).__name__} is not a valid type for skipping rows")
 
 
 def _read(obj):
diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index aeade1d5e..2d8787d1c 100755
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -913,8 +913,8 @@ class TextFileReader(BaseIterator):
                         pass
                     else:
                         raise ValueError(
-                            "The %r option is not supported with the"
-                            " %r engine" % (argname, engine)
+                            f"The {repr(argname)} option is not supported with the"
+                            f" {repr(engine)} engine"
                         )
             else:
                 value = _deprecated_defaults.get(argname, default)
@@ -1079,8 +1079,8 @@ class TextFileReader(BaseIterator):
         if converters is not None:
             if not isinstance(converters, dict):
                 raise TypeError(
-                    f"Type converters must be a dict or subclass, "
-                    f"input was a {repr(type(converters).__name__)}"
+                    "Type converters must be a dict or subclass, "
+                    f"input was a {type(converters).__name__}"
                 )
         else:
             converters = {}
@@ -3608,7 +3608,7 @@ class FixedWidthReader(BaseIterator):
         if not isinstance(self.colspecs, (tuple, list)):
             raise TypeError(
                 "column specifications must be a list or tuple, "
-                "input was a %r" % type(colspecs).__name__
+                f"input was a {type(colspecs).__name__}"
             )
 
         for colspec in self.colspecs:
