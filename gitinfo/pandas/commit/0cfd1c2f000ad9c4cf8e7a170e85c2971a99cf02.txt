commit 0cfd1c2f000ad9c4cf8e7a170e85c2971a99cf02
Author: Alex Volkov <alex@flamy.ca>
Date:   Fri Dec 7 19:49:40 2018 +0700

    Adding docstring validation error for when the function does not have a docstring (#23673)

diff --git a/scripts/tests/test_validate_docstrings.py b/scripts/tests/test_validate_docstrings.py
index ca3efbfce..0c88b7f68 100644
--- a/scripts/tests/test_validate_docstrings.py
+++ b/scripts/tests/test_validate_docstrings.py
@@ -407,6 +407,9 @@ class BadGenericDocStrings(object):
             before Examples.
         """
 
+    def method_wo_docstrings(self):
+        pass
+
 
 class BadSummaries(object):
 
@@ -826,6 +829,8 @@ class TestValidator(object):
          ('Do not import numpy, as it is imported automatically',)),
         ('BadGenericDocStrings', 'method',
          ('Do not import pandas, as it is imported automatically',)),
+        ('BadGenericDocStrings', 'method_wo_docstrings',
+         ("The object does not have a docstring",)),
         # See Also tests
         ('BadSeeAlso', 'prefix_pandas',
          ('pandas.Series.rename in `See Also` section '
diff --git a/scripts/validate_docstrings.py b/scripts/validate_docstrings.py
index 2039fda90..0f553cc4f 100755
--- a/scripts/validate_docstrings.py
+++ b/scripts/validate_docstrings.py
@@ -78,6 +78,7 @@ ERROR_MSGS = {
             '{allowed_sections}',
     'GL07': 'Sections are in the wrong order. Correct order is: '
             '{correct_sections}',
+    'GL08': 'The object does not have a docstring',
     'SS01': 'No summary found (a short summary in a single line should be '
             'present at the beginning of the docstring)',
     'SS02': 'Summary does not start with a capital letter',
@@ -545,20 +546,24 @@ class Docstring(object):
         yield from application.guide.stats.statistics_for('')
 
 
-def validate_one(func_name):
+def get_validation_data(doc):
     """
-    Validate the docstring for the given func_name
+    Validate the docstring.
 
     Parameters
     ----------
-    func_name : function
-        Function whose docstring will be evaluated (e.g. pandas.read_csv).
+    doc : Docstring
+        A Docstring object with the given function name.
 
     Returns
     -------
-    dict
-        A dictionary containing all the information obtained from validating
-        the docstring.
+    tuple
+        errors : list of tuple
+            Errors occurred during validation.
+        warnings : list of tuple
+            Warnings occurred during validation.
+        examples_errs : str
+            Examples usage displayed along the error, otherwise empty string.
 
     Notes
     -----
@@ -585,10 +590,13 @@ def validate_one(func_name):
     they are validated, are not documented more than in the source code of this
     function.
     """
-    doc = Docstring(func_name)
 
     errs = []
     wrns = []
+    if not doc.raw_doc:
+        errs.append(error('GL08'))
+        return errs, wrns, ''
+
     if doc.start_blank_lines != 1:
         errs.append(error('GL01'))
     if doc.end_blank_lines != 1:
@@ -706,7 +714,26 @@ def validate_one(func_name):
         for wrong_import in ('numpy', 'pandas'):
             if 'import {}'.format(wrong_import) in examples_source_code:
                 errs.append(error('EX04', imported_library=wrong_import))
+    return errs, wrns, examples_errs
+
+
+def validate_one(func_name):
+    """
+    Validate the docstring for the given func_name
 
+    Parameters
+    ----------
+    func_name : function
+        Function whose docstring will be evaluated (e.g. pandas.read_csv).
+
+    Returns
+    -------
+    dict
+        A dictionary containing all the information obtained from validating
+        the docstring.
+    """
+    doc = Docstring(func_name)
+    errs, wrns, examples_errs = get_validation_data(doc)
     return {'type': doc.type,
             'docstring': doc.clean_doc,
             'deprecated': doc.deprecated,
