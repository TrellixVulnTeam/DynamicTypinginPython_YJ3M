commit 71cb70d28bbfe9cde99404c5ff260be6013de423
Author: jreback <jeff@reback.net>
Date:   Sun Mar 17 06:07:43 2013 +0200

    ENH: refactor series from dict to list, eliminate one level of indirection

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 6de1e3012..20a366a3f 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1366,14 +1366,12 @@ class DataFrame(NDFrame):
             # create the data for a chunk
             chunk = self.iloc[start_i:end_i]
 
-            series = {}
-            for k, v in chunk.iteritems():
-                series[k] = _ndarray_to_native_types(v,na_rep,float_format)
-
+            data = [ _ndarray_to_native_types(v,na_rep,float_format
+                                              ) for k, v in chunk.iteritems() ]
             ix = _ndarray_to_native_types(data_index[start_i:end_i],
                                           na_rep,float_format)
 
-            lib.write_csv_rows(series, ix, nlevels, cols, writer)
+            lib.write_csv_rows(data, ix, nlevels, cols, writer)
 
     def to_csv(self, path_or_buf, sep=",", na_rep='', float_format=None,
                cols=None, header=True, index=True, index_label=None,
diff --git a/pandas/lib.pyx b/pandas/lib.pyx
index 2bc4eccdb..850cd7fb9 100644
--- a/pandas/lib.pyx
+++ b/pandas/lib.pyx
@@ -787,7 +787,7 @@ def array_replace_from_nan_rep(ndarray[object, ndim=1] arr, object nan_rep, obje
 @cython.boundscheck(False)
 @cython.wraparound(False)
 
-def write_csv_rows(dict series, list data_index, int nlevels, list cols, object writer):
+def write_csv_rows(list data, list data_index, int nlevels, list cols, object writer):
 
     cdef int N, j, i, ncols
     cdef list rows
@@ -806,7 +806,7 @@ def write_csv_rows(dict series, list data_index, int nlevels, list cols, object
             row = rows[j % N]
             row[0] = data_index[j]
             for i in range(ncols):
-                row[nlevels+i] = series[cols[i]][j]
+                row[nlevels+i] = data[i][j]
 
             if j >= N-1 and j % N == N-1:
                 writer.writerows(rows)
@@ -815,7 +815,7 @@ def write_csv_rows(dict series, list data_index, int nlevels, list cols, object
             row = rows[j % N]
             row[:nlevels] = list(data_index[j])
             for i in range(ncols):
-                row[nlevels+i] = series[cols[i]][j]
+                row[nlevels+i] = data[i][j]
 
             if j >= N-1 and j % N == N-1:
                 writer.writerows(rows)
@@ -823,7 +823,7 @@ def write_csv_rows(dict series, list data_index, int nlevels, list cols, object
         for j in range(len(data_index)):
             row = rows[j % N]
             for i in range(ncols):
-                row[nlevels+i] = series[cols[i]][j]
+                row[i] = data[i][j]
 
             if j >= N-1 and j % N == N-1:
                 writer.writerows(rows)
