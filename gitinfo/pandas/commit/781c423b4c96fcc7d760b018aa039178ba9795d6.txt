commit 781c423b4c96fcc7d760b018aa039178ba9795d6
Author: Adam Klein <adamklein@gmail.com>
Date:   Thu Dec 29 15:51:09 2011 -0500

    more working on v0.6

diff --git a/doc/source/basics.rst b/doc/source/basics.rst
index 671c54a23..f2d9d6a71 100644
--- a/doc/source/basics.rst
+++ b/doc/source/basics.rst
@@ -693,6 +693,13 @@ determine the sort order:
 
    df.sort_index(by='two')
 
+As of v0.6, the ``by`` argument can take a list of column names, e.g.:
+
+.. ipython:: python
+
+   df = DataFrame({'one':[2,1,1,1],'two':[1,3,2,4],'three':[5,4,3,2]})
+   df[['one', 'two', 'three']].sort_index(by=['one','two'])
+
 Series has the method ``order`` (analogous to `R's order function
 <http://stat.ethz.ch/R-manual/R-patched/library/base/html/order.html>`__) which
 sorts by value, with special treatment of NA values via the ``na_last``
diff --git a/doc/source/computation.rst b/doc/source/computation.rst
index e042a76b4..083859743 100644
--- a/doc/source/computation.rst
+++ b/doc/source/computation.rst
@@ -19,6 +19,28 @@ Computational tools
 Statistical functions
 ---------------------
 
+.. _computation.covariance:
+
+Covariance
+~~~~~~~~~~
+
+The ``Series`` object has a method ``cov`` to compute covariance between series
+(excluding NA/null values).
+
+.. ipython:: python
+
+   s1 = Series(randn(1000))
+   s2 = Series(randn(1000))
+   s1.cov(s2)
+
+Analogously, ``DataFrame`` has a method ``cov`` to compute pairwise covariances
+among the series in the DataFrame, also excluding NA/null values.
+
+.. ipython:: python
+
+   frame = DataFrame(randn(1000, 5), columns=['a', 'b', 'c', 'd', 'e'])
+   frame.cov()
+
 .. _computation.correlation:
 
 Correlation
@@ -37,7 +59,7 @@ correlation methods are provided:
 
 .. \rho = \cov(x, y) / \sigma_x \sigma_y
 
-All of these are currently computed using pariwise complete observations.
+All of these are currently computed using pairwise complete observations.
 
 .. ipython:: python
 
diff --git a/doc/source/dsintro.rst b/doc/source/dsintro.rst
index 3067981b2..007f0aa3e 100644
--- a/doc/source/dsintro.rst
+++ b/doc/source/dsintro.rst
@@ -293,10 +293,25 @@ Alternate Constructors
 
 **DataFrame.from_dict**
 
+``DataFrame.from_dict`` takes a dict of dicts or a dict of array-like sequences
+and returns a DataFrame. It operates like the ``DataFrame`` constructor except
+for the ``orient`` parameter which is ``'columns'`` by default, but which can be
+set to ``'index'`` in order to use the dict keys as row labels.
+
 .. _basics.dataframe.from_records:
 
 **DataFrame.from_records**
 
+``DataFrame.from_records`` takes a list of tuples or an ndarray with structured
+dtype. Works analogously to the normal ``DataFrame`` constructor, except that
+index maybe be a specific field of the structured dtype to use as the index.
+For example:
+
+.. ipython:: python
+
+   data
+   DataFrame.from_records(data, index='C')
+
 .. _basics.dataframe.from_items:
 
 **DataFrame.from_items**
diff --git a/doc/source/groupby.rst b/doc/source/groupby.rst
index 25d489d11..b5e344153 100644
--- a/doc/source/groupby.rst
+++ b/doc/source/groupby.rst
@@ -184,9 +184,24 @@ parameter directly:
 
    s.sum(level='second')
 
-More on the ``sum`` function and aggregation later. Grouping with multiple
-levels (as opposed to a single level) is not yet supported, though implementing
-it is not difficult.
+Also as of v0.6, grouping with multiple levels is supported.
+
+.. ipython:: python
+   :suppress:
+
+   arrays = [['bar', 'bar', 'baz', 'baz', 'foo', 'foo', 'qux', 'qux'],
+             ['doo', 'doo', 'bee', 'bee', 'bop', 'bop', 'bop', 'bop'],
+             ['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two']]
+   tuples = zip(*arrays)
+   index = MultiIndex.from_tuples(tuples, names=['first', 'second', 'third'])
+   s = Series(randn(8), index=index)
+
+.. ipython:: python
+
+   s
+   s.groupby(level=['first','second']).sum()
+
+More on the ``sum`` function and aggregation later.
 
 DataFrame column selection in GroupBy
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
diff --git a/doc/source/whatsnew/v0.6.0.txt b/doc/source/whatsnew/v0.6.0.txt
index f79c619e6..36502023e 100644
--- a/doc/source/whatsnew/v0.6.0.txt
+++ b/doc/source/whatsnew/v0.6.0.txt
@@ -18,12 +18,12 @@ New Features
 - :ref:`Added <timeseries.offsets>` ``QuarterEnd`` DateOffset (PR321_)
 - :ref:`Added <dsintro.numpy_interop>` ``dot`` to DataFrame (GH65_)
 - :ref:`Added <basics.panel>` ``orient`` option to ``Panel.from_dict`` (GH359_, GH301_)
-- Add ``DataFrame.from_dict`` with similar ``orient`` option
-- Can now pass list of tuples or list of lists to ``DataFrame.from_records`` for fast conversion to DataFrame (GH357_)
-- Can pass multiple levels to groupby, e.g. ``df.groupby(level=[0, 1])`` (GH103_)
-- Can sort by multiple columns in ``DataFrame.sort_index`` (GH92_, PR362_)
-- Add fast ``get_value`` and ``put_value`` methods to DataFrame and micro-performance tweaks (GH360_)
-- Add ``cov`` instance methods to Series and DataFrame (GH194_, PR362_)
+- :ref:`Added <basics.dataframe.from_dict>` ``orient`` option to ``DataFrame.from_dict``
+- :ref:`Added <basics.dataframe.from_records>` passing list of tuples or list of lists to ``DataFrame.from_records`` (GH357_)
+- :ref:`Added <groupby.multiindex>` multiple levels to groupby (GH103_)
+- :ref:`Allow <basics.sorting>` multiple columns in ``by`` argument of ``DataFrame.sort_index`` (GH92_, PR362_)
+- :ref:`Added <indexing.basics.get_value>` fast ``get_value`` and ``put_value`` methods to DataFrame (GH360_)
+- :ref:`Added <computation.covariance>` ``cov`` instance methods to Series and DataFrame (GH194_, PR362_)
 - Add bar plot option to ``DataFrame.plot`` (PR348_)
 - Add ``idxmin`` and ``idxmax`` functions to Series and DataFrame for computing index labels achieving maximum and minimum values (PR286_)
 - Add ``read_clipboard`` function for parsing DataFrame from OS clipboard, should work across platforms (GH300_)
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index ddb75254a..5a6bdc7f2 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -480,25 +480,20 @@ class DataFrame(NDFrame):
     @classmethod
     def from_dict(cls, data, orient='columns', dtype=None):
         """
-        Construct Panel from dict of DataFrame objects
+        Construct DataFrame from dict of array-like or dicts
 
         Parameters
         ----------
         data : dict
-            {field : DataFrame}
-        intersect : boolean
-            Intersect indexes of input DataFrames
-        orient : {'columns', 'index'}, default 'items'
+            {field : array-like} or {field : dict}
+        orient : {'columns', 'index'}, default 'columns'
             The "orientation" of the data. If the keys of the passed dict
-            should be the items of the result panel, pass 'items'
-            (default). Otherwise if the columns of the values of the passed
-            DataFrame objects should be the items (which in the case of
-            mixed-dtype data you should do), instead pass 'minor'
-
+            should be the columns of the resulting DataFrame, pass 'columns'
+            (default). Otherwise if the keys should be rows, pass 'index'.
 
         Returns
         -------
-        Panel
+        DataFrame
         """
         from collections import defaultdict
 
