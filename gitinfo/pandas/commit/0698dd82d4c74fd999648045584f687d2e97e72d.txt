commit 0698dd82d4c74fd999648045584f687d2e97e72d
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Wed May 6 16:06:47 2020 -0700

    CLN: avoid getattr checks in liboffsets (#34008)

diff --git a/pandas/_libs/tslibs/offsets.pyx b/pandas/_libs/tslibs/offsets.pyx
index 9fbe717fa..6005905ad 100644
--- a/pandas/_libs/tslibs/offsets.pyx
+++ b/pandas/_libs/tslibs/offsets.pyx
@@ -32,6 +32,7 @@ from pandas._libs.tslibs.np_datetime cimport (
     npy_datetimestruct, dtstruct_to_dt64, dt64_to_dtstruct)
 from pandas._libs.tslibs.timezones import UTC
 from pandas._libs.tslibs.tzconversion cimport tz_convert_single
+from pandas._libs.tslibs.c_timestamp cimport _Timestamp
 
 
 # ---------------------------------------------------------------------
@@ -105,17 +106,18 @@ cdef to_offset(object obj):
     return to_offset(obj)
 
 
-def as_datetime(obj):
-    f = getattr(obj, 'to_pydatetime', None)
-    if f is not None:
-        obj = f()
+def as_datetime(obj: datetime) -> datetime:
+    if isinstance(obj, _Timestamp):
+        return obj.to_pydatetime()
     return obj
 
 
-cpdef bint is_normalized(dt):
-    if (dt.hour != 0 or dt.minute != 0 or dt.second != 0 or
-            dt.microsecond != 0 or getattr(dt, 'nanosecond', 0) != 0):
+cpdef bint is_normalized(datetime dt):
+    if dt.hour != 0 or dt.minute != 0 or dt.second != 0 or dt.microsecond != 0:
+        # Regardless of whether dt is datetime vs Timestamp
         return False
+    if isinstance(dt, _Timestamp):
+        return dt.nanosecond == 0
     return True
 
 
