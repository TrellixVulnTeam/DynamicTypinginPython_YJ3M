commit 8d45dc4b766629a99d5c766448c433bc2c067b8e
Author: Chang She <changshe@gmail.com>
Date:   Fri Nov 9 14:39:25 2012 -0500

    ENH: let users disable autoconversion to PeriodIndex in plotting so an externally setup twinx can work with irregular + regular freq timeseries #2205

diff --git a/RELEASE.rst b/RELEASE.rst
index fb5b1173f..a64cfdc44 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -56,6 +56,7 @@ pandas 0.9.1
   - Make .drop(...) work with non-unique indexes (#2101)
   - Improve performance of Series/DataFrame.diff (re: #2087)
   - Support unary ~ (__invert__) in DataFrame (#2110)
+  - Turn off pandas-style tick locators and formatters (#2205)
 
 **Bug fixes**
 
diff --git a/doc/source/v0.9.1.txt b/doc/source/v0.9.1.txt
index 13ad23eec..6cf6bb0ed 100644
--- a/doc/source/v0.9.1.txt
+++ b/doc/source/v0.9.1.txt
@@ -60,6 +60,9 @@ New features
                  parse_cols='A:D')
 
 
+  - Added option to disable pandas-style tick locators and formatters
+    using `series.plot(x_compat=True)` or `pandas.plot_params['x_compat'] =
+    True` (GH2205_)
   - Existing TimeSeries methods `at_time` and `between_time` were added to
     DataFrame (GH2149_)
   - DataFrame.dot can now accept ndarrays (GH2042_)
@@ -122,6 +125,7 @@ on GitHub for a complete list.
 .. _GH2124: https://github.com/pydata/pandas/issues/2124
 .. _GH2110: https://github.com/pydata/pandas/issues/2110
 .. _GH2184: https://github.com/pydata/pandas/issues/2184
+.. _GH2205: https://github.com/pydata/pandas/issues/2205
 
 .. _GH2181: https://github.com/pydata/pandas/issues/2181
 .. _GH2180: https://github.com/pydata/pandas/issues/2180
@@ -197,4 +201,3 @@ on GitHub for a complete list.
 .. _GH1959: https://github.com/pydata/pandas/issues/1959
 .. _GH1890: https://github.com/pydata/pandas/issues/1890
 .. _GH1555: https://github.com/pydata/pandas/issues/1555
-
diff --git a/pandas/__init__.py b/pandas/__init__.py
index 1119f72b5..3760e3fbc 100644
--- a/pandas/__init__.py
+++ b/pandas/__init__.py
@@ -36,5 +36,5 @@ from pandas.util.testing import debug
 from pandas.tools.describe import value_range
 from pandas.tools.merge import merge, concat, ordered_merge
 from pandas.tools.pivot import pivot_table, crosstab
-from pandas.tools.plotting import scatter_matrix
+from pandas.tools.plotting import scatter_matrix, plot_params
 from pandas.tools.tile import cut, qcut
diff --git a/pandas/tests/test_graphics.py b/pandas/tests/test_graphics.py
index 505020342..5d536dcbb 100644
--- a/pandas/tests/test_graphics.py
+++ b/pandas/tests/test_graphics.py
@@ -233,6 +233,28 @@ class TestDataFramePlots(unittest.TestCase):
         # columns.inferred_type == 'mixed'
         # TODO add MultiIndex test
 
+    @slow
+    def test_xcompat(self):
+        import pandas as pd
+        import matplotlib.pyplot as plt
+
+        df = tm.makeTimeDataFrame()
+        ax = df.plot(x_compat=True)
+        lines = ax.get_lines()
+        self.assert_(not isinstance(lines[0].get_xdata(), PeriodIndex))
+
+        plt.close('all')
+        pd.plot_params['xaxis.compat'] = True
+        ax = df.plot()
+        lines = ax.get_lines()
+        self.assert_(not isinstance(lines[0].get_xdata(), PeriodIndex))
+
+        plt.close('all')
+        pd.plot_params['x_compat'] = False
+        ax = df.plot()
+        lines = ax.get_lines()
+        self.assert_(isinstance(lines[0].get_xdata(), PeriodIndex))
+
     def _check_data(self, xp, rs):
         xp_lines = xp.get_lines()
         rs_lines = rs.get_lines()
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index d2ab5f303..4cfd32d58 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -26,6 +26,43 @@ def _get_standard_kind(kind):
     return {'density': 'kde'}.get(kind, kind)
 
 
+class _Options(dict):
+
+    #alias so the names are same as plotting method parameter names
+    _ALIASES = {'x_compat' : 'xaxis.compat'}
+    _DEFAULT_KEYS = ['xaxis.compat']
+
+    def __init__(self):
+        self['xaxis.compat'] = False
+
+    def __getitem__(self, key):
+        key = self._get_canonical_key(key)
+        if key not in self:
+            raise ValueError('%s is not a valid pandas plotting option' % key)
+        return super(_Options, self).__getitem__(key)
+
+    def __setitem__(self, key, value):
+        key = self._get_canonical_key(key)
+        return super(_Options, self).__setitem__(key, value)
+
+    def __delitem__(self, key):
+        key = self._get_canonical_key(key)
+        if key in self._DEFAULT_KEYS:
+            raise ValueError('Cannot remove default parameter %s' % key)
+        return super(_Options, self).__delitem__(key)
+
+    def __contains__(self, key):
+        key = self._get_canonical_key(key)
+        return super(_Options, self).__contains__(key)
+
+    def reset(self):
+        self.__init__()
+
+    def _get_canonical_key(self, key):
+        return self._ALIASES.get(key, key)
+
+plot_params = _Options()
+
 def scatter_matrix(frame, alpha=0.5, figsize=None, ax=None, grid=False,
                    diagonal='hist', marker='.', **kwds):
     """
@@ -875,6 +912,9 @@ class LinePlot(MPLPlot):
     def __init__(self, data, **kwargs):
         self.mark_right = kwargs.pop('mark_right', True)
         MPLPlot.__init__(self, data, **kwargs)
+        self.x_compat = plot_params['x_compat']
+        if 'x_compat' in self.kwds:
+           self.x_compat = bool(self.kwds.pop('x_compat'))
 
     def _index_freq(self):
         from pandas.core.frame import DataFrame
@@ -923,7 +963,7 @@ class LinePlot(MPLPlot):
     def _make_plot(self):
         import pandas.tseries.plotting as tsplot
         # this is slightly deceptive
-        if self.use_index and self._use_dynamic_x():
+        if not self.x_compat and self.use_index and self._use_dynamic_x():
             data = self._maybe_convert_index(self.data)
             self._make_ts_plot(data, **self.kwds)
         else:
