commit c3910a39bf6bf3a754acc39cbfffe5c37a7f535e
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Jun 3 14:07:04 2012 -0400

    ENH: add to_pydatetime methods on Timestamp, DatetimeIndex, close #1372

diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index e920b5430..3efef8312 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -45,16 +45,36 @@ try:
 except NameError: # py3
     basestring = str
 
-def ints_to_pydatetime(ndarray[int64_t] arr):
+def ints_to_pydatetime(ndarray[int64_t] arr, tz=None):
     cdef:
         Py_ssize_t i, n = len(arr)
         pandas_datetimestruct dts
         ndarray[object] result = np.empty(n, dtype=object)
 
-    for i in range(n):
-        pandas_datetime_to_datetimestruct(arr[i], PANDAS_FR_ns, &dts)
-        result[i] = datetime(dts.year, dts.month, dts.day,
-                             dts.hour, dts.min, dts.sec, dts.us)
+    if tz is not None:
+        if tz is pytz.utc:
+            for i in range(n):
+                pandas_datetime_to_datetimestruct(arr[i], PANDAS_FR_ns, &dts)
+                result[i] = datetime(dts.year, dts.month, dts.day, dts.hour,
+                                     dts.min, dts.sec, dts.us, tz)
+        else:
+            trans = _get_transitions(tz)
+            deltas = _get_deltas(tz)
+            for i in range(n):
+                # Adjust datetime64 timestamp, recompute datetimestruct
+                pos = trans.searchsorted(arr[i]) - 1
+                inf = tz._transition_info[pos]
+
+                pandas_datetime_to_datetimestruct(arr[i] + deltas[pos],
+                                                  PANDAS_FR_ns, &dts)
+                result[i] = datetime(dts.year, dts.month, dts.day, dts.hour,
+                                     dts.min, dts.sec, dts.us,
+                                     tz._tzinfos[inf])
+    else:
+        for i in range(n):
+            pandas_datetime_to_datetimestruct(arr[i], PANDAS_FR_ns, &dts)
+            result[i] = datetime(dts.year, dts.month, dts.day, dts.hour,
+                                 dts.min, dts.sec, dts.us)
 
     return result
 
@@ -163,6 +183,23 @@ class Timestamp(_Timestamp):
         return Timestamp(datetime.replace(self, **kwds),
                          offset=self.offset)
 
+    def to_pydatetime(self, warn=True):
+        """
+        If warn=True, issue warning if nanoseconds is nonzero
+        """
+        cdef:
+            pandas_datetimestruct dts
+            _TSObject ts
+
+        if self.nanosecond != 0 and warn:
+            print 'Warning: discarding nonzero nanoseconds'
+        ts = convert_to_tsobject(self, self.tzinfo)
+
+        return datetime(ts.dts.year, ts.dts.month, ts.dts.day,
+                        ts.dts.hour, ts.dts.min, ts.dts.sec,
+                        ts.dts.us, ts.tzinfo)
+
+
 class NaTType(_NaT):
 
     def __new__(cls):
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index e1b033eb8..4e8f75b55 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -542,6 +542,16 @@ class DatetimeIndex(Int64Index):
         boxed_values = _dt_box_array(self.asi8, self.offset, self.tz)
         return Index(boxed_values, dtype=object)
 
+    def to_pydatetime(self):
+        """
+        Return DatetimeIndex as object ndarray of datetime.datetime objects
+
+        Returns
+        -------
+        datetimes : ndarray
+        """
+        return lib.ints_to_pydatetime(self.asi8, tz=self.tz)
+
     def to_period(self, freq=None):
         """
         Cast to PeriodIndex at a particular frequency
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 7bb3ce40b..0f412055c 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -139,6 +139,32 @@ class TestTimeSeries(unittest.TestCase):
 
         self.assert_(isinstance(s[5], Timestamp))
 
+    def test_timestamp_to_datetime(self):
+        rng = date_range('20090415', '20090519',
+                         tz='US/Eastern')
+
+        stamp = rng[0]
+        dtval = stamp.to_pydatetime()
+        self.assertEquals(stamp, dtval)
+        self.assertEquals(stamp.tzinfo, dtval.tzinfo)
+
+    def test_index_convert_to_datetime_array(self):
+        def _check_rng(rng):
+            converted = rng.to_pydatetime()
+            self.assert_(isinstance(converted, np.ndarray))
+            for x, stamp in zip(converted, rng):
+                self.assert_(type(x) is datetime)
+                self.assertEquals(x, stamp.to_pydatetime())
+                self.assertEquals(x.tzinfo, stamp.tzinfo)
+
+        rng = date_range('20090415', '20090519')
+        rng_eastern = date_range('20090415', '20090519', tz='US/Eastern')
+        rng_utc = date_range('20090415', '20090519', tz='utc')
+
+        _check_rng(rng)
+        _check_rng(rng_eastern)
+        _check_rng(rng_utc)
+
     def test_series_ctor_plus_datetimeindex(self):
         rng = date_range('20090415', '20090519', freq='B')
         data = dict((k, 1) for k in rng)
