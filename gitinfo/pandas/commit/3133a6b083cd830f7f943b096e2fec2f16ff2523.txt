commit 3133a6b083cd830f7f943b096e2fec2f16ff2523
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Jun 12 18:55:23 2011 -0400

    need some changes to block internals, getting started there. misc other impl

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 4b9758b29..f4d5514b0 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -166,6 +166,8 @@ class DataFrame(PandasGeneric):
         return BlockManager(blocks, index, columns).consolidate()
 
     def _init_matrix(self, values, index, columns, dtype=None):
+        from pandas.core.internals import make_block
+
         values = _prep_ndarray(values)
 
         if values.ndim == 1:
@@ -567,6 +569,7 @@ class DataFrame(PandasGeneric):
         return self._data.columns
 
     def _get_values(self):
+        self._consolidate_inplace()
         return self._data.as_matrix()
 
     index = property(fget=lambda self: self._get_index(),
@@ -682,10 +685,18 @@ class DataFrame(PandasGeneric):
 
     def consolidate(self):
         """
+        Compute DataFrame with "consolidated" internals (data of each dtype
+        grouped together in a single ndarray). Mainly an internal API function,
+        but available here to the savvy user
 
+        Returns
+        -------
+        consolidated : DataFrame
         """
-        #TODO
-        raise NotImplementedError
+        cons_data = self._data.consolidate()
+        if cons_data is self._data:
+            cons_data = cons_data.copy()
+        return DataFrame(cons_data)
 
     #----------------------------------------------------------------------
     # Array interface
@@ -1412,6 +1423,8 @@ class DataFrame(PandasGeneric):
         -------
         DataFrame
         """
+        from pandas.core.internals import make_block
+
         if periods == 0:
             return self
 
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index f1fb1c483..0f33a4eb2 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -1,4 +1,5 @@
 import itertools
+import operator
 
 from numpy import nan
 import numpy as np
@@ -14,14 +15,27 @@ class Block(object):
 
     Index-ignorant; let the container take care of that
     """
-    def __init__(self, values, columns):
+    def __init__(self, values, ref_locs, ref_columns):
         values = _convert_if_1d(values)
         if issubclass(values.dtype.type, basestring):
             values = np.array(values, dtype=object)
 
         self.values = values
-        self.columns = _ensure_index(columns)
-        assert(len(self.columns) == values.shape[1])
+        self.ref_locs = ref_locs
+        self._ref_columns = _ensure_index(ref_columns)
+        assert(len(ref_locs) == values.shape[1])
+
+    @property
+    def columns(self):
+        return self.ref_columns.take(self.ref_locs)
+
+    _ref_columns = None
+    def _set_ref_columns(self, value):
+        assert(len(value) == self.ref_columns)
+        self._ref_columns = _ensure_index(value)
+
+    ref_columns = property(fget=operator.attrgetter('_ref_columns'),
+                           fset=_set_ref_columns)
 
     def __repr__(self):
         x, y = self.shape
@@ -36,12 +50,16 @@ class Block(object):
         return len(self.values)
 
     def __getstate__(self):
-        return (np.asarray(self.columns),
+        # should not pickle generally (want to share ref_columns), but here for
+        # completeness
+        return (np.asarray(self.ref_locs),
+                np.asarray(self.ref_columns),
                 self.values)
 
     def __setstate__(self, state):
-        columns, values = state
-        self.columns = _ensure_index(columns)
+        locs, columns, values = state
+        self.ref_locs = locs
+        self.ref_columns = _ensure_index(columns)
         self.values = values
 
     @property
@@ -53,7 +71,8 @@ class Block(object):
         return self.values.dtype
 
     def copy(self):
-        return make_block(self.values.copy(), self.columns)
+        return make_block(self.values.copy(), self.ref_locs,
+                          self.ref_columns)
 
     def merge(self, other):
         return _merge_blocks([self, other])
@@ -66,21 +85,21 @@ class Block(object):
         if needs_masking:
             new_values = _cast_if_bool_int(new_values)
             common.null_out_axis(new_values, notmask, 0)
-        return make_block(new_values, self.columns)
+        return make_block(new_values, self.ref_locs, self.ref_columns)
 
-    def reindex_columns(self, new_columns):
-        """
+    # def reindex_columns(self, new_columns):
+    #     """
 
-        """
-        indexer, mask = self.columns.get_indexer(new_columns)
-        new_values = self.values.take(indexer, axis=1)
+    #     """
+    #     indexer, mask = self.columns.get_indexer(new_columns)
+    #     new_values = self.values.take(indexer, axis=1)
 
-        notmask = -mask
-        if len(mask) > 0 and notmask.any():
-            new_values = _cast_if_bool_int(new_values)
-            common.null_out_axis(new_values, notmask, 1)
+    #     notmask = -mask
+    #     if len(mask) > 0 and notmask.any():
+    #         new_values = _cast_if_bool_int(new_values)
+    #         common.null_out_axis(new_values, notmask, 1)
 
-        return make_block(new_values, new_columns)
+    #     return make_block(new_values, new_columns)
 
     def reindex_columns_from(self, columns):
         """
@@ -97,7 +116,7 @@ class Block(object):
         masked_idx = indexer[mask]
         new_values = self.values.take(masked_idx, axis=1)
         new_columns = self.columns.take(masked_idx)
-        return make_block(new_values, new_columns)
+        return make_block(new_values, new_locs, columns)
 
     def insert(self, col, value, loc=None):
         """
@@ -191,7 +210,7 @@ class BoolBlock(Block):
 class ObjectBlock(Block):
     pass
 
-def make_block(values, columns):
+def make_block(values, ref_locs, ref_columns):
     dtype = values.dtype
     vtype = dtype.type
 
@@ -204,7 +223,7 @@ def make_block(values, columns):
     else:
         klass = ObjectBlock
 
-    return klass(values, columns)
+    return klass(values, ref_locs, ref_columns)
 
 # TODO: flexible with index=None and/or columns=None
 
@@ -674,18 +693,6 @@ def _nan_array(index, columns, dtype=np.float64):
     values.fill(nan)
     return values
 
-import unittest
-class TestBlockOperations(unittest.TestCase):
-
-    def test_interleave(self):
-        pass
-
-    def test_consolidate(self):
-        pass
-
-    def test_xs(self):
-        pass
-
 if __name__ == '__main__':
     n = 10
     floats = np.repeat(np.atleast_2d(np.arange(3.)), n, axis=0)
@@ -699,11 +706,14 @@ if __name__ == '__main__':
     index = np.arange(n)
     new_columns = Index(['a', 'c', 'e', 'b', 'd'])
 
-    fblock = make_block(floats, float_cols)
-    oblock = make_block(objects, object_cols)
+    float_locs = new_columns.get_indexer(float_cols)[0]
+    obj_locs = new_columns.get_indexer(object_cols)[0]
+
+    fblock = make_block(floats, float_locs, float_cols)
+    oblock = make_block(objects, obj_locs, object_cols)
 
-    blocks = [fblock, oblock]
+    # blocks = [fblock, oblock]
 
-    interleaved = _interleave(blocks, columns)
+    # interleaved = _interleave(blocks, columns)
 
-    mgr = BlockManager(blocks, index, columns)
+    # mgr = BlockManager(blocks, index, columns)
diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index c32555fc8..55a3f1a29 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -1407,6 +1407,16 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         filtered = self.mixed_frame.filter(like='foo')
         self.assert_('foo' in filtered)
 
+    def test_select(self):
+        f = lambda x: x.weekday() == 2
+        result = self.tsframe.select(f, axis=0)
+        expected = self.tsframe.reindex(
+            index=self.tsframe.index[[f(x) for x in self.tsframe.index]])
+        assert_frame_equal(result, expected)
+
+        result = self.frame.select(lambda x: x in ('B', 'D'), axis=1)
+        expected = self.frame.reindex(columns=['B', 'D'])
+        assert_frame_equal(result, expected)
 
     def test_sort(self):
         # what to test?
@@ -1798,17 +1808,6 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         desc = self.mixed_frame.describe()
         desc = self.frame.describe()
 
-    def test_select(self):
-        f = lambda x: x.weekday() == 2
-        result = self.tsframe.select(f, axis=0)
-        expected = self.tsframe.reindex(
-            index=self.tsframe.index[[f(x) for x in self.tsframe.index]])
-        assert_frame_equal(result, expected)
-
-        result = self.frame.select(lambda x: x in ('B', 'D'), axis=1)
-        expected = self.frame.reindex(columns=['B', 'D'])
-        assert_frame_equal(result, expected)
-
     def test_get_axis_etc(self):
         f = self.frame
 
@@ -1821,6 +1820,39 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         self.assert_(f._get_axis(1) is f.columns)
         self.assertRaises(Exception, f._get_axis_number, 2)
 
+    #----------------------------------------------------------------------
+    # Tests to cope with refactored internals
+
+    def test_assign_columns(self):
+        self.frame['hi'] = 'there'
+
+        frame = self.frame.copy()
+        frame.columns = ['foo', 'bar', 'baz', 'quux', 'foo2']
+        assert_series_equal(self.frame['C'], frame['baz'])
+        assert_series_equal(self.frame['hi'], frame['foo2'])
+
+    def test_consolidate(self):
+        self.frame['E'] = 7.
+        consolidated = self.frame.consolidate()
+        self.assert_(len(consolidated._data.blocks) == 1)
+
+    def test_modify_values(self):
+        self.frame.values[5] = 5
+        self.assert_((self.frame.values[5] == 5).all())
+
+        # unconsolidated
+        self.frame['E'] = 7.
+        self.frame.values[6] = 6
+        self.assert_((self.frame.values[6] == 6).all())
+
+    def test_boolean_set_uncons(self):
+        self.frame['E'] = 7.
+
+        expected = self.frame.values.copy()
+        expected[expected > 1] = 2
+
+        self.frame[self.frame > 1] = 2
+        assert_almost_equal(expected, self.frame.values)
 
 if __name__ == '__main__':
     # unittest.main()
diff --git a/pandas/core/tests/test_internals.py b/pandas/core/tests/test_internals.py
new file mode 100644
index 000000000..6d1f46607
--- /dev/null
+++ b/pandas/core/tests/test_internals.py
@@ -0,0 +1,75 @@
+import unittest
+
+import numpy as np
+
+from pandas import Index
+from pandas.core.internals import *
+
+from pandas.util.testing import (assert_almost_equal, randn)
+
+class TestBlock(unittest.TestCase):
+
+    def test_merge(self):
+        pass
+
+    def test_copy(self):
+        pass
+
+    def test_assign_columns(self):
+        pass
+
+    def test_reindex_index(self):
+        pass
+
+    def test_reindex_columns_from(self):
+        floats = np.repeat(np.atleast_2d(np.arange(3.)), n, axis=0)
+        block = make_block(floats, [0, 2, 4],
+                           ['a', 'b', 'c', 'd', 'e'])
+
+        new_cols = Index(['e', 'b', 'c', 'f'])
+
+        reindexed = block.reindex_columns_from(new_cols)
+        assert_almost_equal(reindexed.ref_locs, [0, 2])
+        self.assertEquals(reindexed.values.shape[1], 2)
+        self.assert_((reindexed.values[:, 0] == 2).all())
+        self.assert_((reindexed.values[:, 0] == 1).all())
+
+    def test_insert(self):
+        pass
+
+    def test_delete(self):
+        pass
+
+    def test_get(self):
+        pass
+
+    def test_set(self):
+        pass
+
+    def test_fillna(self):
+        pass
+
+    def test_repr(self):
+        pass
+
+
+class TestBlockManager(unittest.TestCase):
+
+    def test_interleave(self):
+        pass
+
+    def test_consolidate(self):
+        pass
+
+    def test_xs(self):
+        pass
+
+
+if __name__ == '__main__':
+    # unittest.main()
+    import nose
+    # nose.runmodule(argv=[__file__,'-vvs','-x', '--pdb-failure'],
+    #                exit=False)
+    nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
+                   exit=False)
+
diff --git a/pandas/core/tests/test_matrix.py b/pandas/core/tests/test_matrix.py
index 5c31ed358..f6afe4d45 100644
--- a/pandas/core/tests/test_matrix.py
+++ b/pandas/core/tests/test_matrix.py
@@ -222,14 +222,6 @@ class TestDataMatrix(test_frame.TestDataFrame):
         del f['B']
         self.assertEqual(len(f.columns), 2)
 
-    # def test_shift_objects(self):
-    #     tsf = self.tsframe.copy()
-    #     tsf['foo'] = 'bar'
-
-    #     shifted = tsf.shift(1)
-    #     self.assert_(shifted.objects is not None)
-    #     self.assert_(shifted.objects.index is shifted.index)
-
     def test_more_asMatrix(self):
         values = self.mixed_frame.asMatrix()
         self.assertEqual(values.shape[1], len(self.mixed_frame.columns))
