commit ff254f7ca062f6b1602b2ef558a7d43c19968adc
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Mar 16 15:36:09 2012 -0400

    ENH: handle tuple-like objects as last ditch effort in DataFrame.from_records, close #907

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 8cc0ec8d0..4d6e31761 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -4220,8 +4220,10 @@ def _to_sdict(data, columns, coerce_float=False):
     elif isinstance(data[0], Series):
         return _list_of_series_to_sdict(data, columns,
                                         coerce_float=coerce_float)
-    else:  # pragma: no cover
-        raise TypeError('No logic to handle %s type' % type(data[0]))
+    else:
+        # last ditch effort
+        data = map(tuple, data)
+        return _list_to_sdict(data, columns, coerce_float=coerce_float)
 
 def _list_to_sdict(data, columns, coerce_float=False):
     if len(data) > 0 and isinstance(data[0], tuple):
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 0ae56ab34..74382309c 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1881,6 +1881,25 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         self.assertRaises(Exception, DataFrame.from_records, df, index=[2])
         self.assertRaises(KeyError, DataFrame.from_records, df, index=2)
 
+    def test_from_records_non_tuple(self):
+        class Record(object):
+
+            def __init__(self, *args):
+                self.args = args
+
+            def __getitem__(self, i):
+                return self.args[i]
+
+            def __iter__(self):
+                return iter(self.args)
+
+        recs = [Record(1, 2, 3), Record(4, 5, 6), Record(7, 8, 9)]
+        tups = map(tuple, recs)
+
+        result = DataFrame.from_records(recs)
+        expected = DataFrame.from_records(tups)
+        assert_frame_equal(result, expected)
+
     def test_get_agg_axis(self):
         cols = self.frame._get_agg_axis(0)
         self.assert_(cols is self.frame.columns)
