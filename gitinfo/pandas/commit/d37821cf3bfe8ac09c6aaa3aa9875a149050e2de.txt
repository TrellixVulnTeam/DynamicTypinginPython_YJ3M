commit d37821cf3bfe8ac09c6aaa3aa9875a149050e2de
Author: y-p <yoval@gmx.com>
Date:   Sat Dec 8 21:42:31 2012 +0200

    BUG: further hash randomization fixes in test_groupby

diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 0c06cd305..d252b8eb6 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -811,6 +811,7 @@ class TestGroupBy(unittest.TestCase):
         assert_series_equal(result, expected)
 
     def test_groupby_as_index_agg(self):
+        from pandas.util.compat import OrderedDict
         grouped = self.df.groupby('A', as_index=False)
 
         # single-key
@@ -819,7 +820,7 @@ class TestGroupBy(unittest.TestCase):
         expected = grouped.mean()
         assert_frame_equal(result, expected)
 
-        result2 = grouped.agg({'C' : np.mean, 'D' : np.sum})
+        result2 = grouped.agg(OrderedDict([['C' , np.mean], ['D' , np.sum]]))
         expected2 = grouped.mean()
         expected2['D'] = grouped.sum()['D']
         assert_frame_equal(result2, expected2)
@@ -838,7 +839,7 @@ class TestGroupBy(unittest.TestCase):
         expected = grouped.mean()
         assert_frame_equal(result, expected)
 
-        result2 = grouped.agg({'C' : np.mean, 'D' : np.sum})
+        result2 = grouped.agg(OrderedDict([['C' , np.mean], ['D' , np.sum]]))
         expected2 = grouped.mean()
         expected2['D'] = grouped.sum()['D']
         assert_frame_equal(result2, expected2)
@@ -1884,8 +1885,8 @@ class TestGroupBy(unittest.TestCase):
 
         grouped = self.df.groupby('A')
 
-        exmean = grouped.agg({'C' : np.mean, 'D' : np.mean})
-        exstd = grouped.agg({'C' : np.std, 'D' : np.std})
+        exmean = grouped.agg(OrderedDict([['C' , np.mean], ['D' , np.mean]]))
+        exstd = grouped.agg(OrderedDict([['C' , np.std], ['D' , np.std]]))
 
         expected = concat([exmean, exstd], keys=['mean', 'std'], axis=1)
         expected = expected.swaplevel(0, 1, axis=1).sortlevel(0, axis=1)
@@ -1896,39 +1897,43 @@ class TestGroupBy(unittest.TestCase):
         assert_frame_equal(result, expected)
 
         # be careful
-        result = grouped.aggregate({'C' : np.mean,
-                                     'D' : [np.mean, np.std]})
-        expected = grouped.aggregate({'C' : [np.mean],
-                                      'D' : [np.mean, np.std]})
+        result = grouped.aggregate(OrderedDict([['C' , np.mean],
+                                                [ 'D' , [np.mean, np.std]]]))
+        expected = grouped.aggregate(OrderedDict([['C' , np.mean],
+                                                [ 'D' , [np.mean, np.std]]]))
         assert_frame_equal(result, expected)
 
 
         def foo(x): return np.mean(x)
         def bar(x): return np.std(x, ddof=1)
-        result = grouped.aggregate({'C' : np.mean,
-                                    'D' : OrderedDict([['foo', np.mean],
-                                           ['bar', np.std]])})
+        d=OrderedDict([['C' , np.mean],
+                                 ['D', OrderedDict([['foo', np.mean],
+                                                              ['bar', np.std]])]])
+        result = grouped.aggregate(d)
 
-        expected = grouped.aggregate({'C' : [np.mean],
-                                      'D' : [foo, bar]})
+        d = OrderedDict([['C' , [np.mean]],['D' , [foo, bar]]])
+        expected = grouped.aggregate(d)
 
         assert_frame_equal(result, expected)
 
     def test_multi_function_flexible_mix(self):
         # GH #1268
-
+        from pandas.util.compat import OrderedDict
         grouped = self.df.groupby('A')
 
-        result = grouped.aggregate({'C' : {'foo' : 'mean',
-                                          'bar' : 'std'},
-                                    'D' : 'sum'})
-        result2 = grouped.aggregate({'C' : {'foo' : 'mean',
-                                           'bar' : 'std'},
-                                    'D' : ['sum']})
-
-        expected = grouped.aggregate({'C' : {'foo' : 'mean',
-                                             'bar' : 'std'},
-                                      'D' : {'sum' : 'sum'}})
+        d = OrderedDict([['C' , OrderedDict([['foo' , 'mean'],
+                                                                ['bar' , 'std']])],
+                                    ['D' , 'sum']])
+        result = grouped.aggregate(d)
+        d2 = OrderedDict([['C' , OrderedDict([['foo' , 'mean'],
+                                                                  ['bar' , 'std']])],
+                                    ['D' ,[ 'sum']]])
+        result2 = grouped.aggregate(d2)
+
+        d3 = OrderedDict([['C' , OrderedDict([['foo' , 'mean'],
+                                                                ['bar' , 'std']])],
+                                    ['D' , {'sum':'sum'}]])
+        expected = grouped.aggregate(d3)
 
         assert_frame_equal(result, expected)
         assert_frame_equal(result2, expected)
