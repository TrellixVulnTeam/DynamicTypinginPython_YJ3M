commit a7437430b5cb62e49a79b64d18eccfb2b4d6367f
Author: Garrett-R <garrettreynolds5@gmail.com>
Date:   Sat Jun 27 21:25:41 2015 -0700

    MAINT: minor refactoring and some documentation
    
    MAINT: minor readability edits to conf.py
    
    DOC: fix typos in documentation

diff --git a/doc/source/conf.py b/doc/source/conf.py
index 08fc84837..57c1667dc 100644
--- a/doc/source/conf.py
+++ b/doc/source/conf.py
@@ -52,7 +52,7 @@ extensions = ['sphinx.ext.autodoc',
 
 
 with open("index.rst") as f:
-    lines = f.readlines()
+    index_rst_lines = f.readlines()
 
 # only include the slow autosummary feature if we're building the API section
 # of the docs
@@ -60,20 +60,21 @@ with open("index.rst") as f:
 # JP: added from sphinxdocs
 autosummary_generate = False
 
-if any([re.match("\s*api\s*",l) for l in lines]):
+if any([re.match("\s*api\s*",l) for l in index_rst_lines]):
     autosummary_generate = True
 
-ds = []
+files_to_delete = []
 for f in os.listdir(os.path.dirname(__file__)):
-    if (not f.endswith(('.rst'))) or (f.startswith('.')) or os.path.basename(f) == 'index.rst':
+    if not f.endswith('.rst') or f.startswith('.') or os.path.basename(f) == 'index.rst':
         continue
 
-    _f = f.split('.rst')[0]
-    if not any([re.match("\s*%s\s*$" % _f,l) for l in lines]):
-        ds.append(f)
+    _file_basename = f.split('.rst')[0]
+    _regex_to_match = "\s*{}\s*$".format(_file_basename)
+    if not any([re.match(_regex_to_match, line) for line in index_rst_lines]):
+        files_to_delete.append(f)
 
-if ds:
-    print("I'm about to DELETE the following:\n%s\n" % list(sorted(ds)))
+if files_to_delete:
+    print("I'm about to DELETE the following:\n%s\n" % list(sorted(files_to_delete)))
     sys.stdout.write("WARNING: I'd like to delete those to speed up processing (yes/no)? ")
     if PY3:
         answer = input()
@@ -81,7 +82,7 @@ if ds:
         answer = raw_input()
 
     if answer.lower().strip() in ('y','yes'):
-        for f in ds:
+        for f in files_to_delete:
             f = os.path.join(os.path.join(os.path.dirname(__file__),f))
             f= os.path.abspath(f)
             try:
diff --git a/doc/source/internals.rst b/doc/source/internals.rst
index 5899c3089..3d96b93de 100644
--- a/doc/source/internals.rst
+++ b/doc/source/internals.rst
@@ -35,7 +35,7 @@ containers for the axis labels:
 - ``TimedeltaIndex``: An Index object with ``Timedelta`` boxed elements (impl are the in64 values)
 - ``PeriodIndex``: An Index object with Period elements
 
-These are range generates to make the creation of a regular index easy:
+There are functions that make the creation of a regular index easy:
 
 - ``date_range``: fixed frequency date range generated from a time rule or
   DateOffset. An ndarray of Python datetime objects
@@ -193,7 +193,7 @@ Below example shows how to define ``SubclassedSeries`` and ``SubclassedDataFrame
 Define Original Properties
 ~~~~~~~~~~~~~~~~~~~~~~~~~~
 
-To let original data structures have additional properties, you should let ``pandas`` knows what properties are added. ``pandas`` maps unknown properties to data names overriding ``__getattribute__``. Defining original properties can be done in one of 2 ways:
+To let original data structures have additional properties, you should let ``pandas`` know what properties are added. ``pandas`` maps unknown properties to data names overriding ``__getattribute__``. Defining original properties can be done in one of 2 ways:
 
 1. Define ``_internal_names`` and ``_internal_names_set`` for temporary properties which WILL NOT be passed to manipulation results.
 2. Define ``_metadata`` for normal properties which will be passed to manipulation results.
diff --git a/pandas/core/common.py b/pandas/core/common.py
index 796038f0b..873e6a79f 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -47,7 +47,7 @@ class AbstractMethodError(NotImplementedError):
         self.class_instance = class_instance
 
     def __str__(self):
-        return "This method must be defined on the concrete class of " \
+        return "This method must be defined in the concrete class of " \
                + self.class_instance.__class__.__name__
 
 _POSSIBLY_CAST_DTYPES = set([np.dtype(t).name
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index d52a85908..872e8efb0 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -184,7 +184,6 @@ class DataFrame(NDFrame):
     DataFrame.from_items : from sequence of (key, value) pairs
     pandas.read_csv, pandas.read_table, pandas.read_clipboard
     """
-    _auto_consolidate = True
 
     @property
     def _constructor(self):
@@ -2171,16 +2170,11 @@ class DataFrame(NDFrame):
         ensure that if we don't have an index, that we can create one from the
         passed value
         """
-        if not len(self.index):
-
-            # GH5632, make sure that we are a Series convertible
-            if is_list_like(value):
+        # GH5632, make sure that we are a Series convertible
+        if not len(self.index) and is_list_like(value):
                 try:
                     value = Series(value)
                 except:
-                    pass
-
-                if not isinstance(value, Series):
                     raise ValueError('Cannot set a frame with no defined index '
                                      'and a value that cannot be converted to a '
                                      'Series')
@@ -2188,11 +2182,6 @@ class DataFrame(NDFrame):
                 self._data = self._data.reindex_axis(value.index.copy(), axis=1,
                                                      fill_value=np.nan)
 
-            # we are a scalar
-            # noop
-            else:
-
-                pass
 
     def _set_item(self, key, value):
         """
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 273c444b3..292871000 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -138,6 +138,9 @@ class NDFrame(PandasObject):
 
     @property
     def _constructor(self):
+        """Used when a manipulation result has the same dimesions as the
+        original.
+        """
         raise AbstractMethodError(self)
 
     def __unicode__(self):
@@ -153,10 +156,16 @@ class NDFrame(PandasObject):
 
     @property
     def _constructor_sliced(self):
+        """Used when a manipulation result has one lower dimension(s) as the
+        original, such as DataFrame single columns slicing.
+        """
         raise AbstractMethodError(self)
 
     @property
     def _constructor_expanddim(self):
+        """Used when a manipulation result has one higher dimension as the
+        original, such as Series.to_frame() and DataFrame.to_panel()
+        """
         raise NotImplementedError
 
     #----------------------------------------------------------------------
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 84cf0256d..7fbc6736d 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -431,8 +431,8 @@ class _NDFrameIndexer(object):
 
                 return False
 
-            # we need an interable, with a ndim of at least 1
-            # eg. don't pass thru np.array(0)
+            # we need an iterable, with a ndim of at least 1
+            # eg. don't pass through np.array(0)
             if is_list_like_indexer(value) and getattr(value,'ndim',1) > 0:
 
                 # we have an equal len Frame
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 5953e783f..127327dd0 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -2121,7 +2121,7 @@ def make_block(values, placement, klass=None, ndim=None,
 class BlockManager(PandasObject):
 
     """
-    Core internal data structure to implement DataFrame
+    Core internal data structure to implement DataFrame, Series, Panel, etc.
 
     Manage a bunch of labeled 2D mixed-type ndarrays. Essentially it's a
     lightweight blocked set of labeled data to be manipulated by the DataFrame
diff --git a/pandas/src/generate_code.py b/pandas/src/generate_code.py
index 53fcdb61b..48e828af8 100644
--- a/pandas/src/generate_code.py
+++ b/pandas/src/generate_code.py
@@ -2613,13 +2613,7 @@ def generate_take_cython_file():
             print(generate_put_selection_template(template, use_ints=True,
                                                   use_datelikes=True,
                                                   use_objects=True),
-                  file=f)
-
-        # for template in templates_1d_datetime:
-        #     print >> f, generate_from_template_datetime(template)
-
-        # for template in templates_2d_datetime:
-        #     print >> f, generate_from_template_datetime(template, ndim=2)
+                                                  file=f)
 
         for template in nobool_1d_templates:
             print(generate_from_template(template, exclude=['bool']), file=f)
