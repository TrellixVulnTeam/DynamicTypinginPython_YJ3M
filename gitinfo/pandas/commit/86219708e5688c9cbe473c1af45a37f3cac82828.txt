commit 86219708e5688c9cbe473c1af45a37f3cac82828
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Wed Feb 26 20:44:57 2020 -0800

    TST: move misplaced to_datetime test (#32273)

diff --git a/pandas/tests/indexes/datetimes/test_tools.py b/pandas/tests/indexes/datetimes/test_tools.py
index 0a774e9c0..ecfecfb41 100644
--- a/pandas/tests/indexes/datetimes/test_tools.py
+++ b/pandas/tests/indexes/datetimes/test_tools.py
@@ -2,7 +2,7 @@
 
 import calendar
 from collections import deque
-from datetime import datetime, time
+from datetime import datetime, time, timedelta
 import locale
 
 from dateutil.parser import parse
@@ -1376,6 +1376,86 @@ class TestToDatetimeUnit:
         expected = DatetimeIndex(["1970-01-01 00:00:01"], tz="UTC")
         tm.assert_index_equal(result, expected)
 
+    # TODO: this is moved from tests.series.test_timeseries, may be redundant
+    def test_to_datetime_unit(self):
+
+        epoch = 1370745748
+        s = Series([epoch + t for t in range(20)])
+        result = to_datetime(s, unit="s")
+        expected = Series(
+            [Timestamp("2013-06-09 02:42:28") + timedelta(seconds=t) for t in range(20)]
+        )
+        tm.assert_series_equal(result, expected)
+
+        s = Series([epoch + t for t in range(20)]).astype(float)
+        result = to_datetime(s, unit="s")
+        expected = Series(
+            [Timestamp("2013-06-09 02:42:28") + timedelta(seconds=t) for t in range(20)]
+        )
+        tm.assert_series_equal(result, expected)
+
+        s = Series([epoch + t for t in range(20)] + [iNaT])
+        result = to_datetime(s, unit="s")
+        expected = Series(
+            [Timestamp("2013-06-09 02:42:28") + timedelta(seconds=t) for t in range(20)]
+            + [NaT]
+        )
+        tm.assert_series_equal(result, expected)
+
+        s = Series([epoch + t for t in range(20)] + [iNaT]).astype(float)
+        result = to_datetime(s, unit="s")
+        expected = Series(
+            [Timestamp("2013-06-09 02:42:28") + timedelta(seconds=t) for t in range(20)]
+            + [NaT]
+        )
+        tm.assert_series_equal(result, expected)
+
+        # GH13834
+        s = Series([epoch + t for t in np.arange(0, 2, 0.25)] + [iNaT]).astype(float)
+        result = to_datetime(s, unit="s")
+        expected = Series(
+            [
+                Timestamp("2013-06-09 02:42:28") + timedelta(seconds=t)
+                for t in np.arange(0, 2, 0.25)
+            ]
+            + [NaT]
+        )
+        tm.assert_series_equal(result, expected)
+
+        s = pd.concat(
+            [Series([epoch + t for t in range(20)]).astype(float), Series([np.nan])],
+            ignore_index=True,
+        )
+        result = to_datetime(s, unit="s")
+        expected = Series(
+            [Timestamp("2013-06-09 02:42:28") + timedelta(seconds=t) for t in range(20)]
+            + [NaT]
+        )
+        tm.assert_series_equal(result, expected)
+
+        result = to_datetime([1, 2, "NaT", pd.NaT, np.nan], unit="D")
+        expected = DatetimeIndex(
+            [Timestamp("1970-01-02"), Timestamp("1970-01-03")] + ["NaT"] * 3
+        )
+        tm.assert_index_equal(result, expected)
+
+        msg = "non convertible value foo with the unit 'D'"
+        with pytest.raises(ValueError, match=msg):
+            to_datetime([1, 2, "foo"], unit="D")
+        msg = "cannot convert input 111111111 with the unit 'D'"
+        with pytest.raises(OutOfBoundsDatetime, match=msg):
+            to_datetime([1, 2, 111111111], unit="D")
+
+        # coerce we can process
+        expected = DatetimeIndex(
+            [Timestamp("1970-01-02"), Timestamp("1970-01-03")] + ["NaT"] * 1
+        )
+        result = to_datetime([1, 2, "foo"], unit="D", errors="coerce")
+        tm.assert_index_equal(result, expected)
+
+        result = to_datetime([1, 2, 111111111], unit="D", errors="coerce")
+        tm.assert_index_equal(result, expected)
+
 
 class TestToDatetimeMisc:
     def test_to_datetime_barely_out_of_bounds(self):
diff --git a/pandas/tests/series/test_timeseries.py b/pandas/tests/series/test_timeseries.py
index 8f06ea69f..544634a2d 100644
--- a/pandas/tests/series/test_timeseries.py
+++ b/pandas/tests/series/test_timeseries.py
@@ -1,11 +1,10 @@
-from datetime import datetime, timedelta
+from datetime import datetime
 from io import StringIO
 
 import numpy as np
 import pytest
 
 from pandas._libs.tslib import iNaT
-from pandas._libs.tslibs.np_datetime import OutOfBoundsDatetime
 
 import pandas as pd
 from pandas import (
@@ -14,10 +13,8 @@ from pandas import (
     NaT,
     Series,
     Timestamp,
-    concat,
     date_range,
     timedelta_range,
-    to_datetime,
 )
 import pandas._testing as tm
 
@@ -127,85 +124,6 @@ class TestTimeSeries:
         masked = rng[mask]
         assert masked.freq is None
 
-    def test_to_datetime_unit(self):
-
-        epoch = 1370745748
-        s = Series([epoch + t for t in range(20)])
-        result = to_datetime(s, unit="s")
-        expected = Series(
-            [Timestamp("2013-06-09 02:42:28") + timedelta(seconds=t) for t in range(20)]
-        )
-        tm.assert_series_equal(result, expected)
-
-        s = Series([epoch + t for t in range(20)]).astype(float)
-        result = to_datetime(s, unit="s")
-        expected = Series(
-            [Timestamp("2013-06-09 02:42:28") + timedelta(seconds=t) for t in range(20)]
-        )
-        tm.assert_series_equal(result, expected)
-
-        s = Series([epoch + t for t in range(20)] + [iNaT])
-        result = to_datetime(s, unit="s")
-        expected = Series(
-            [Timestamp("2013-06-09 02:42:28") + timedelta(seconds=t) for t in range(20)]
-            + [NaT]
-        )
-        tm.assert_series_equal(result, expected)
-
-        s = Series([epoch + t for t in range(20)] + [iNaT]).astype(float)
-        result = to_datetime(s, unit="s")
-        expected = Series(
-            [Timestamp("2013-06-09 02:42:28") + timedelta(seconds=t) for t in range(20)]
-            + [NaT]
-        )
-        tm.assert_series_equal(result, expected)
-
-        # GH13834
-        s = Series([epoch + t for t in np.arange(0, 2, 0.25)] + [iNaT]).astype(float)
-        result = to_datetime(s, unit="s")
-        expected = Series(
-            [
-                Timestamp("2013-06-09 02:42:28") + timedelta(seconds=t)
-                for t in np.arange(0, 2, 0.25)
-            ]
-            + [NaT]
-        )
-        tm.assert_series_equal(result, expected)
-
-        s = concat(
-            [Series([epoch + t for t in range(20)]).astype(float), Series([np.nan])],
-            ignore_index=True,
-        )
-        result = to_datetime(s, unit="s")
-        expected = Series(
-            [Timestamp("2013-06-09 02:42:28") + timedelta(seconds=t) for t in range(20)]
-            + [NaT]
-        )
-        tm.assert_series_equal(result, expected)
-
-        result = to_datetime([1, 2, "NaT", pd.NaT, np.nan], unit="D")
-        expected = DatetimeIndex(
-            [Timestamp("1970-01-02"), Timestamp("1970-01-03")] + ["NaT"] * 3
-        )
-        tm.assert_index_equal(result, expected)
-
-        msg = "non convertible value foo with the unit 'D'"
-        with pytest.raises(ValueError, match=msg):
-            to_datetime([1, 2, "foo"], unit="D")
-        msg = "cannot convert input 111111111 with the unit 'D'"
-        with pytest.raises(OutOfBoundsDatetime, match=msg):
-            to_datetime([1, 2, 111111111], unit="D")
-
-        # coerce we can process
-        expected = DatetimeIndex(
-            [Timestamp("1970-01-02"), Timestamp("1970-01-03")] + ["NaT"] * 1
-        )
-        result = to_datetime([1, 2, "foo"], unit="D", errors="coerce")
-        tm.assert_index_equal(result, expected)
-
-        result = to_datetime([1, 2, 111111111], unit="D", errors="coerce")
-        tm.assert_index_equal(result, expected)
-
     def test_series_ctor_datetime64(self):
         rng = date_range("1/1/2000 00:00:00", "1/1/2000 1:59:50", freq="10s")
         dates = np.asarray(rng)
