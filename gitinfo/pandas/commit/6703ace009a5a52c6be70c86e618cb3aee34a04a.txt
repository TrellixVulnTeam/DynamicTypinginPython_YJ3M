commit 6703ace009a5a52c6be70c86e618cb3aee34a04a
Author: Kaiqi Dong <kaiqidong1991@gmail.com>
Date:   Fri Oct 26 03:38:17 2018 +0200

    TST: Add base test for extensionarray setitem #23300 (#23304)

diff --git a/pandas/tests/extension/base/setitem.py b/pandas/tests/extension/base/setitem.py
index 307543eca..6ebe3cb74 100644
--- a/pandas/tests/extension/base/setitem.py
+++ b/pandas/tests/extension/base/setitem.py
@@ -9,18 +9,20 @@ from .base import BaseExtensionTests
 
 
 class BaseSetitemTests(BaseExtensionTests):
-    def test_setitem_scalar_series(self, data):
-        arr = pd.Series(data)
-        arr[0] = data[1]
-        assert arr[0] == data[1]
-
-    def test_setitem_sequence(self, data):
-        arr = pd.Series(data)
+    def test_setitem_scalar_series(self, data, box_in_series):
+        if box_in_series:
+            data = pd.Series(data)
+        data[0] = data[1]
+        assert data[0] == data[1]
+
+    def test_setitem_sequence(self, data, box_in_series):
+        if box_in_series:
+            data = pd.Series(data)
         original = data.copy()
 
-        arr[[0, 1]] = [data[1], data[0]]
-        assert arr[0] == original[1]
-        assert arr[1] == original[0]
+        data[[0, 1]] = [data[1], data[0]]
+        assert data[0] == original[1]
+        assert data[1] == original[0]
 
     @pytest.mark.parametrize('as_array', [True, False])
     def test_setitem_sequence_mismatched_length_raises(self, data, as_array):
@@ -32,22 +34,25 @@ class BaseSetitemTests(BaseExtensionTests):
         xpr = 'cannot set using a {} indexer with a different length'
         with tm.assert_raises_regex(ValueError, xpr.format('list-like')):
             ser[[0, 1]] = value
+            assert ser._values[[0, 1]] == value
 
         with tm.assert_raises_regex(ValueError, xpr.format('slice')):
             ser[slice(3)] = value
+            assert ser._values[slice(3)] == value
 
-    def test_setitem_empty_indxer(self, data):
-        ser = pd.Series(data)
-        original = ser.copy()
-        ser[[]] = []
-        self.assert_series_equal(ser, original)
-
-    def test_setitem_sequence_broadcasts(self, data):
-        arr = pd.Series(data)
-
-        arr[[0, 1]] = data[2]
-        assert arr[0] == data[2]
-        assert arr[1] == data[2]
+    def test_setitem_empty_indxer(self, data, box_in_series):
+        if box_in_series:
+            data = pd.Series(data)
+        original = data.copy()
+        data[np.array([], dtype=int)] = []
+        self.assert_equal(data, original)
+
+    def test_setitem_sequence_broadcasts(self, data, box_in_series):
+        if box_in_series:
+            data = pd.Series(data)
+        data[[0, 1]] = data[2]
+        assert data[0] == data[2]
+        assert data[1] == data[2]
 
     @pytest.mark.parametrize('setter', ['loc', 'iloc'])
     def test_setitem_scalar(self, data, setter):
diff --git a/pandas/tests/extension/conftest.py b/pandas/tests/extension/conftest.py
index 8e397d228..7758bd018 100644
--- a/pandas/tests/extension/conftest.py
+++ b/pandas/tests/extension/conftest.py
@@ -98,3 +98,9 @@ def data_for_grouping():
     Where A < B < C and NA is missing
     """
     raise NotImplementedError
+
+
+@pytest.fixture(params=[True, False])
+def box_in_series(request):
+    """Whether to box the data in a Series"""
+    return request.param
