commit a58412abad35fb8b42e74606503a2e0d069acad4
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Dec 12 15:16:49 2011 -0500

    ENH: add inplace option to NDFrame/DataFrame.consolidate, GH #474

diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 00d9cf9ed..c47407e08 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -335,20 +335,29 @@ class NDFrame(PandasObject):
         self._clear_item_cache()
         self._data = self._data.consolidate()
 
-    def consolidate(self):
+    def consolidate(self, inplace=False):
         """
         Compute NDFrame with "consolidated" internals (data of each dtype
         grouped together in a single ndarray). Mainly an internal API function,
         but available here to the savvy user
 
+        Parameters
+        ----------
+        inplace : boolean, default False
+            If False return new object, otherwise modify existing object
+
         Returns
         -------
         consolidated : type of caller
         """
-        cons_data = self._data.consolidate()
-        if cons_data is self._data:
-            cons_data = cons_data.copy()
-        return self._constructor(cons_data)
+        if inplace:
+            self._consolidate_inplace()
+            return self
+        else:
+            cons_data = self._data.consolidate()
+            if cons_data is self._data:
+                cons_data = cons_data.copy()
+            return self._constructor(cons_data)
 
     @property
     def _is_mixed_type(self):
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 034bbc6f6..520e852d7 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3739,6 +3739,11 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         self.assert_(recons is not consolidated)
         assert_frame_equal(recons, consolidated)
 
+        self.frame['F'] = 8.
+        self.assert_(len(self.frame._data.blocks) == 3)
+        self.frame.consolidate(inplace=True)
+        self.assert_(len(self.frame._data.blocks) == 1)
+
     def test_as_matrix_consolidate(self):
         self.frame['E'] = 7.
         self.assert_(not self.frame._data.is_consolidated())
