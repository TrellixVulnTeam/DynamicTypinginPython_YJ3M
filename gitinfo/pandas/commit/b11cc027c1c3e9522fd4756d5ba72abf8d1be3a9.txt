commit b11cc027c1c3e9522fd4756d5ba72abf8d1be3a9
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jun 13 15:39:36 2011 -0400

    consolidated DataFrame unit tests

diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index 176896cbc..ae971e486 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -11,7 +11,7 @@ import numpy as np
 
 import pandas.core.datetools as datetools
 from pandas.core.index import NULL_INDEX
-from pandas.core.api import DataFrame, DataMatrix, Index, Series, notnull
+from pandas.core.api import (DataFrame, Index, Series, notnull, isnull)
 
 from pandas.util.testing import (assert_almost_equal,
                                  assert_series_equal,
@@ -74,7 +74,6 @@ class CheckIndexing(object):
         self.frame['col9'] = arr
         self.assert_((self.frame['col9'] == arr).all())
 
-        # set value, do out of order for DataMatrix
         self.frame['col7'] = 5
         assert((self.frame['col7'] == 5).all())
 
@@ -104,6 +103,78 @@ class CheckIndexing(object):
         self.assertRaises(Exception, df.__setitem__, df[:-1] > 0, 2)
         self.assertRaises(Exception, df.__setitem__, df * 0, 2)
 
+    def test_setitem_corner(self):
+        # corner case
+        df = self.klass({'B' : [1., 2., 3.],
+                         'C' : ['a', 'b', 'c']},
+                        index=np.arange(3))
+        del df['B']
+        df['B'] = [1., 2., 3.]
+        self.assert_('B' in df)
+        self.assertEqual(len(df.columns), 2)
+
+        df['A'] = 'beginning'
+        df['E'] = 'foo'
+        df['D'] = 'bar'
+        df[datetime.now()] = 'date'
+        df[datetime.now()] = 5.
+
+        # what to do when empty frame with index
+        dm = DataFrame(index=self.frame.index)
+        dm['A'] = 'foo'
+        dm['B'] = 'bar'
+        self.assertEqual(len(dm.columns), 2)
+        self.assertEqual(dm.values.dtype, np.object_)
+
+        dm['C'] = 1
+        self.assertEqual(dm['C'].dtype, np.int_)
+
+        # set existing column
+        dm['A'] = 'bar'
+        self.assertEqual('bar', dm['A'][0])
+
+        dm = DataFrame(index=np.arange(3))
+        dm['A'] = 1
+        dm['foo'] = 'bar'
+        del dm['foo']
+        dm['foo'] = 'bar'
+        self.assertEqual(dm['foo'].dtype, np.object_)
+
+        dm['coercable'] = ['1', '2', '3']
+        self.assertEqual(dm['coercable'].dtype, np.object_)
+
+    def test_setitem_ambig(self):
+        # difficulties with mixed-type data
+        from decimal import Decimal
+
+        # created as float type
+        dm = DataFrame(index=range(3), columns=range(3))
+
+        coercable_series = Series([Decimal(1) for _ in range(3)],
+                                  index=range(3))
+        uncoercable_series = Series(['foo', 'bzr', 'baz'], index=range(3))
+
+        dm[0] = np.ones(3)
+        self.assertEqual(len(dm.columns), 3)
+        # self.assert_(dm.objects is None)
+
+        dm[1] = coercable_series
+        self.assertEqual(len(dm.columns), 3)
+        # self.assert_(dm.objects is None)
+
+        dm[2] = uncoercable_series
+        self.assertEqual(len(dm.columns), 3)
+        # self.assert_(dm.objects is not None)
+        self.assert_(dm[2].dtype == np.object_)
+
+    def test_delitem_corner(self):
+        f = self.frame.copy()
+        del f['D']
+        self.assertEqual(len(f.columns), 3)
+        self.assertRaises(KeyError, f.__delitem__, 'D')
+        del f['B']
+        self.assertEqual(len(f.columns), 2)
+
     def test_getitem_fancy_2d(self):
         f = self.frame
         ix = f.ix
@@ -442,6 +513,46 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         df_casted = self.klass(self.frame, dtype=int)
         self.assert_(df_casted.values.dtype == np.int_)
 
+    def test_constructor_more(self):
+        # used to be in test_matrix.py
+        arr = randn(10)
+        dm = self.klass(arr, columns=['A'], index=np.arange(10))
+        self.assertEqual(dm.values.ndim, 2)
+
+        arr = randn(0)
+        dm = self.klass(arr)
+        self.assertEqual(dm.values.ndim, 2)
+        self.assertEqual(dm.values.ndim, 2)
+
+        # no data specified
+        dm = self.klass(columns=['A', 'B'], index=np.arange(10))
+        self.assertEqual(dm.values.shape, (10, 2))
+
+        dm = self.klass(columns=['A', 'B'])
+        self.assertEqual(dm.values.shape, (0, 2))
+
+        dm = self.klass(index=np.arange(10))
+        self.assertEqual(dm.values.shape, (10, 0))
+
+        # corner, silly
+        self.assertRaises(Exception, self.klass, (1, 2, 3))
+
+        # can't cast
+        mat = np.array(['foo', 'bar'], dtype=object).reshape(2, 1)
+        df = DataFrame(mat, index=[0, 1], columns=[0], dtype=float)
+        self.assert_(df.values.dtype == np.object_)
+
+        dm = self.klass(DataFrame(self.frame._series))
+        common.assert_frame_equal(dm, self.frame)
+
+        # int cast
+        dm = DataFrame({'A' : np.ones(10, dtype=int),
+                         'B' : np.ones(10, dtype=float)},
+                        index=np.arange(10))
+
+        self.assertEqual(len(dm.columns), 2)
+        self.assert_(dm.values.dtype == np.float_)
+
     def test_astype(self):
         casted = self.frame.astype(int)
         expected = DataFrame(self.frame.values.astype(int),
@@ -556,7 +667,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
 
         foo = repr(biggie)
 
-        # exhausting cases in DataMatrix.info
+        # exhausting cases in DataFrame.info
 
         # columns but no index
         no_index = self.klass(columns=[0, 1, 3])
@@ -940,6 +1051,10 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         cop['E'] = cop['A']
         self.assert_('E' not in self.frame)
 
+        # copy objects
+        copy = self.mixed_frame.copy()
+        self.assert_(copy._data is not self.mixed_frame._data)
+
     def test_corr(self):
         self.frame['A'][:5] = np.NaN
         self.frame['B'][:10] = np.NaN
@@ -1166,6 +1281,50 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
 
         assert_frame_equal(other, self.frame.reindex_like(other))
 
+    def test_reindex_columns(self):
+        newFrame = self.frame.reindex(columns=['A', 'B', 'E'])
+
+        assert_series_equal(newFrame['B'], self.frame['B'])
+        self.assert_(np.isnan(newFrame['E']).all())
+        self.assert_('C' not in newFrame)
+
+        # length zero
+        newFrame = self.frame.reindex(columns=[])
+        self.assert_(not newFrame)
+
+    def test_reindex_mixed(self):
+        pass
+
+    #----------------------------------------------------------------------
+    # Transposing
+
+    def test_transpose(self):
+        frame = self.frame
+        dft = frame.T
+        for idx, series in dft.iteritems():
+            for col, value in series.iteritems():
+                if np.isnan(value):
+                    self.assert_(np.isnan(frame[col][idx]))
+                else:
+                    self.assertEqual(value, frame[col][idx])
+
+        # mixed type
+        index, data = common.getMixedTypeDict()
+        mixed = self.klass(data, index=index)
+
+        mixed_T = mixed.T
+        for col, s in mixed_T.iteritems():
+            self.assert_(s.dtype == np.object_)
+
+    def test_transpose_get_view(self):
+        dft = self.frame.T
+        dft.values[:, 5:10] = 5
+
+        self.assert_((self.frame.values[5:10] == 5).all())
+
+    #----------------------------------------------------------------------
+    # Renaming
+
     def test_rename(self):
         mapping = {
             'A' : 'a',
@@ -1207,37 +1366,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         # have to pass something
         self.assertRaises(Exception, self.frame.rename)
 
-    def test_reindex_columns(self):
-        newFrame = self.frame.reindex(columns=['A', 'B', 'E'])
-
-        assert_series_equal(newFrame['B'], self.frame['B'])
-        self.assert_(np.isnan(newFrame['E']).all())
-        self.assert_('C' not in newFrame)
-
-        # length zero
-        newFrame = self.frame.reindex(columns=[])
-        self.assert_(not newFrame)
-
-    def test_reindex_mixed(self):
-        pass
-
-    def test_transpose(self):
-        frame = self.frame
-        dft = frame.T
-        for idx, series in dft.iteritems():
-            for col, value in series.iteritems():
-                if np.isnan(value):
-                    self.assert_(np.isnan(frame[col][idx]))
-                else:
-                    self.assertEqual(value, frame[col][idx])
-
-        # mixed type
-        index, data = common.getMixedTypeDict()
-        mixed = self.klass(data, index=index)
-
-        mixed_T = mixed.T
-        for col, s in mixed_T.iteritems():
-            self.assert_(s.dtype == np.object_)
+    #----------------------------------------------------------------------
+    # Time series related
 
     def test_diff(self):
         the_diff = self.tsframe.diff(1)
@@ -1653,7 +1783,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
     def test_get_X_columns(self):
         # numeric and object columns
 
-        # Booleans get casted to float in DataMatrix, so skip for now
+        # Booleans get casted to float in DataFrame, so skip for now
         df = self.klass({'a' : [1, 2, 3],
                          # 'b' : [True, False, True],
                          'c' : ['foo', 'bar', 'baz'],
@@ -1834,6 +1964,80 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         self.assert_(f._get_axis(1) is f.columns)
         self.assertRaises(Exception, f._get_axis_number, 2)
 
+    def test_combineFirst_mixed(self):
+        a = Series(['a','b'], index=range(2))
+        b = Series(range(2), index=range(2))
+        f = DataFrame({'A' : a, 'B' : b})
+
+        a = Series(['a','b'], index=range(5, 7))
+        b = Series(range(2), index=range(5, 7))
+        g = DataFrame({'A' : a, 'B' : b})
+
+        combined = f.combineFirst(g)
+
+    def test_more_asMatrix(self):
+        values = self.mixed_frame.as_matrix()
+        self.assertEqual(values.shape[1], len(self.mixed_frame.columns))
+
+    def test_reindex_boolean(self):
+        frame = DataFrame(np.ones((10, 2), dtype=bool),
+                           index=np.arange(0, 20, 2),
+                           columns=[0, 2])
+
+        reindexed = frame.reindex(np.arange(10))
+        self.assert_(reindexed.values.dtype == np.object_)
+        self.assert_(isnull(reindexed[0][1]))
+
+        reindexed = frame.reindex(columns=range(3))
+        self.assert_(reindexed.values.dtype == np.object_)
+        self.assert_(isnull(reindexed[1]).all())
+
+    def test_reindex_objects(self):
+        reindexed = self.mixed_frame.reindex(columns=['foo', 'A', 'B'])
+        self.assert_('foo' in reindexed)
+
+        reindexed = self.mixed_frame.reindex(columns=['A', 'B'])
+        self.assert_('foo' not in reindexed)
+
+    def test_reindex_corner(self):
+        index = Index(['a', 'b', 'c'])
+        dm = self.empty.reindex(index=[1, 2, 3])
+        reindexed = dm.reindex(columns=index)
+        self.assert_(reindexed.columns.equals(index))
+
+        # ints are weird
+
+        smaller = self.intframe.reindex(columns=['A', 'B', 'E'])
+        self.assert_(smaller['E'].dtype == np.float_)
+
+    def test_rename_objects(self):
+        renamed = self.mixed_frame.rename(columns=str.upper)
+        self.assert_('FOO' in renamed)
+        self.assert_('foo' not in renamed)
+
+    def test_fill_corner(self):
+        self.mixed_frame['foo'][5:20] = np.NaN
+        self.mixed_frame['A'][-10:] = np.NaN
+
+        filled = self.mixed_frame.fillna(value=0)
+        self.assert_((filled['foo'][5:20] == 0).all())
+        del self.mixed_frame['foo']
+
+	empty_float = self.frame.reindex(columns=[])
+        result = empty_float.fillna(value=0)
+
+    def test_count_objects(self):
+        dm = DataFrame(self.mixed_frame._series)
+        df = DataFrame(self.mixed_frame._series)
+
+        common.assert_series_equal(dm.count(), df.count())
+        common.assert_series_equal(dm.count(1), df.count(1))
+
+    def test_cumsum_corner(self):
+        dm = DataFrame(np.arange(20).reshape(4, 5),
+                        index=range(4), columns=range(5))
+        result = dm.cumsum()
+
     #----------------------------------------------------------------------
     # Tests to cope with refactored internals
 
@@ -1902,6 +2106,20 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         self.frame[self.frame > 1] = 2
         assert_almost_equal(expected, self.frame.values)
 
+    def test_xs_view(self):
+        dm = DataFrame(np.arange(20).reshape(4, 5),
+                        index=range(4), columns=range(5))
+
+        dm.xs(2, copy=False)[:] = 5
+        self.assert_((dm.xs(2) == 5).all())
+
+        dm.xs(2)[:] = 10
+        self.assert_((dm.xs(2) == 5).all())
+
+        # TODO: deal with mixed-type fiasco?
+        self.assertRaises(Exception, self.mixed_frame.xs,
+                          self.mixed_frame.index[2], copy=False)
+
 if __name__ == '__main__':
     # unittest.main()
     import nose
diff --git a/pandas/core/tests/test_matrix.py b/pandas/core/tests/test_matrix.py
index 2ef78dad1..39b72e9dc 100644
--- a/pandas/core/tests/test_matrix.py
+++ b/pandas/core/tests/test_matrix.py
@@ -11,298 +11,3 @@ from pandas.core.api import Index, Series, DataMatrix, DataFrame, isnull
 import pandas.util.testing as common
 import test_frame
 
-#-------------------------------------------------------------------------------
-# DataMatrix test cases
-
-class TestDataMatrix(test_frame.TestDataFrame):
-    klass = DataMatrix
-
-    def test_more_constructor(self):
-        arr = randn(10)
-        dm = self.klass(arr, columns=['A'], index=np.arange(10))
-        self.assertEqual(dm.values.ndim, 2)
-
-        arr = randn(0)
-        dm = self.klass(arr)
-        self.assertEqual(dm.values.ndim, 2)
-        self.assertEqual(dm.values.ndim, 2)
-
-        # no data specified
-        dm = self.klass(columns=['A', 'B'], index=np.arange(10))
-        self.assertEqual(dm.values.shape, (10, 2))
-
-        dm = self.klass(columns=['A', 'B'])
-        self.assertEqual(dm.values.shape, (0, 2))
-
-        dm = self.klass(index=np.arange(10))
-        self.assertEqual(dm.values.shape, (10, 0))
-
-        # corner, silly
-        self.assertRaises(Exception, self.klass, (1, 2, 3))
-
-        # can't cast
-        mat = np.array(['foo', 'bar'], dtype=object).reshape(2, 1)
-        df = DataMatrix(mat, index=[0, 1], columns=[0], dtype=float)
-        self.assert_(df.values.dtype == np.object_)
-
-        dm = self.klass(DataFrame(self.frame._series))
-        common.assert_frame_equal(dm, self.frame)
-
-        # int cast
-        dm = DataMatrix({'A' : np.ones(10, dtype=int),
-                         'B' : np.ones(10, dtype=float)},
-                        index=np.arange(10))
-
-        self.assertEqual(len(dm.columns), 2)
-        self.assert_(dm.values.dtype == np.float_)
-
-    # TODO: adapt ALL these unit tests
-    """
-    def test_constructor_with_objects(self):
-        index = self.mixed_frame.index[:5]
-
-        dm = DataMatrix(data=None, index=index,
-                        objects=self.mixed_frame.objects)
-        self.assert_(dm.index is index)
-        self.assert_(dm.objects.index is index)
-
-        dm = DataMatrix(data=None, index=index,
-                        objects=self.mixed_frame.objects._series)
-        self.assert_(dm.index is index)
-        self.assert_(dm.objects.index is index)
-
-        index = self.mixed_frame.index
-        dm = DataMatrix(data=None, index=index,
-                        objects=self.mixed_frame.objects)
-        self.assert_(dm.index is index)
-        self.assert_(dm.objects.index is index)
-
-        index = self.mixed_frame.index
-        dm = DataMatrix(objects=self.mixed_frame.objects)
-        self.assert_(dm.index is self.mixed_frame.index)
-
-        # take dict of objects
-        index = self.mixed_frame.index
-        dm = DataMatrix(data={}, objects=self.mixed_frame.objects._series)
-        self.assert_(isinstance(dm.objects, DataMatrix))
-        self.assert_(dm.index is dm.objects.index)
-
-        index = self.mixed_frame.index
-        dm = DataMatrix(objects=self.mixed_frame.objects._series)
-        self.assert_(isinstance(dm.objects, DataMatrix))
-        self.assert_(dm.index is dm.objects.index)
-
-        index = self.mixed_frame.index
-        dm = DataMatrix(data=self.frame._series,
-                        objects=self.mixed_frame.objects._series)
-        self.assert_(isinstance(dm.objects, DataMatrix))
-        self.assert_(dm.objects.columns.equals(
-                self.mixed_frame.objects.columns))
-
-        objs = DataMatrix({'bar' : ['bar'] * len(self.mixed_frame)})
-        dm = DataMatrix(self.mixed_frame._series, objects=objs)
-        self.assert_('foo' in dm.objects)
-
-    def test_constructor_objects_corner(self):
-        obj = {'A' : {1 : '1', 2 : '2'}}
-        obj_dm = DataMatrix(obj)
-        mat = np.zeros((3, 3), dtype=float)
-
-        dm = DataMatrix(mat, index=[1, 2, 3], columns=['B', 'C', 'D'],
-                        objects=obj_dm)
-        assert dm.index is not obj_dm.index
-
-        dm = DataMatrix(mat, index=[1, 2, 3], columns=['B', 'C', 'D'],
-                        objects=obj)
-
-        dm = DataMatrix(index=[1, 2, 3], objects=obj_dm)
-        dm = DataMatrix(index=[1, 2, 3], objects=obj)
-
-    """
-    # def test_constructor_objects_corner(self):
-    #     obj = {'A' : {1 : '1', 2 : '2'}}
-    #     obj_dm = DataMatrix(obj)
-    #     mat = np.zeros((3, 3), dtype=float)
-
-    #     dm = DataMatrix(mat, index=[1, 2, 3], columns=['B', 'C', 'D'],
-    #                     objects=obj_dm)
-    #     assert dm.index is not obj_dm.index
-
-    #     dm = DataMatrix(mat, index=[1, 2, 3], columns=['B', 'C', 'D'],
-    #                     objects=obj)
-
-    #     dm = DataMatrix(index=[1, 2, 3], objects=obj_dm)
-    #     dm = DataMatrix(index=[1, 2, 3], objects=obj)
-
-    def test_copy(self):
-        # copy objects
-        copy = self.mixed_frame.copy()
-        self.assert_(copy._data is not self.mixed_frame._data)
-
-    def test_combineFirst_mixed(self):
-        a = Series(['a','b'], index=range(2))
-        b = Series(range(2), index=range(2))
-        f = DataMatrix({'A' : a, 'B' : b})
-
-        a = Series(['a','b'], index=range(5, 7))
-        b = Series(range(2), index=range(5, 7))
-        g = DataMatrix({'A' : a, 'B' : b})
-
-        combined = f.combineFirst(g)
-
-    def test_setitem_corner(self):
-        # corner case
-        df = self.klass({'B' : [1., 2., 3.],
-                         'C' : ['a', 'b', 'c']},
-                        index=np.arange(3))
-        del df['B']
-        df['B'] = [1., 2., 3.]
-        self.assert_('B' in df)
-        self.assertEqual(len(df.columns), 2)
-
-        df['A'] = 'beginning'
-        df['E'] = 'foo'
-        df['D'] = 'bar'
-        df[datetime.now()] = 'date'
-        df[datetime.now()] = 5.
-
-        # what to do when empty frame with index
-        dm = DataMatrix(index=self.frame.index)
-        dm['A'] = 'foo'
-        dm['B'] = 'bar'
-        self.assertEqual(len(dm.columns), 2)
-        self.assertEqual(dm.values.dtype, np.object_)
-
-        dm['C'] = 1
-        self.assertEqual(dm['C'].dtype, np.int_)
-
-        # set existing column
-        dm['A'] = 'bar'
-        self.assertEqual('bar', dm['A'][0])
-
-        dm = DataMatrix(index=np.arange(3))
-        dm['A'] = 1
-        dm['foo'] = 'bar'
-        del dm['foo']
-        dm['foo'] = 'bar'
-        self.assertEqual(dm['foo'].dtype, np.object_)
-
-        dm['coercable'] = ['1', '2', '3']
-        self.assertEqual(dm['coercable'].dtype, np.object_)
-
-    def test_setitem_ambig(self):
-        # difficulties with mixed-type data
-        from decimal import Decimal
-
-        # created as float type
-        dm = DataMatrix(index=range(3), columns=range(3))
-
-        coercable_series = Series([Decimal(1) for _ in range(3)],
-                                  index=range(3))
-        uncoercable_series = Series(['foo', 'bzr', 'baz'], index=range(3))
-
-        dm[0] = np.ones(3)
-        self.assertEqual(len(dm.columns), 3)
-        # self.assert_(dm.objects is None)
-
-        dm[1] = coercable_series
-        self.assertEqual(len(dm.columns), 3)
-        # self.assert_(dm.objects is None)
-
-        dm[2] = uncoercable_series
-        self.assertEqual(len(dm.columns), 3)
-        # self.assert_(dm.objects is not None)
-        self.assert_(dm[2].dtype == np.object_)
-
-    def test_delitem_corner(self):
-        f = self.frame.copy()
-        del f['D']
-        self.assertEqual(len(f.columns), 3)
-        self.assertRaises(KeyError, f.__delitem__, 'D')
-        del f['B']
-        self.assertEqual(len(f.columns), 2)
-
-    def test_more_asMatrix(self):
-        values = self.mixed_frame.as_matrix()
-        self.assertEqual(values.shape[1], len(self.mixed_frame.columns))
-
-    def test_reindex_boolean(self):
-        frame = DataMatrix(np.ones((10, 2), dtype=bool),
-                           index=np.arange(0, 20, 2),
-                           columns=[0, 2])
-
-        reindexed = frame.reindex(np.arange(10))
-        self.assert_(reindexed.values.dtype == np.object_)
-        self.assert_(isnull(reindexed[0][1]))
-
-        reindexed = frame.reindex(columns=range(3))
-        self.assert_(reindexed.values.dtype == np.object_)
-        self.assert_(isnull(reindexed[1]).all())
-
-    def test_reindex_objects(self):
-        reindexed = self.mixed_frame.reindex(columns=['foo', 'A', 'B'])
-        self.assert_('foo' in reindexed)
-
-        reindexed = self.mixed_frame.reindex(columns=['A', 'B'])
-        self.assert_('foo' not in reindexed)
-
-    def test_reindex_corner(self):
-        index = Index(['a', 'b', 'c'])
-        dm = self.empty.reindex(index=[1, 2, 3])
-        reindexed = dm.reindex(columns=index)
-        self.assert_(reindexed.columns.equals(index))
-
-        # ints are weird
-
-        smaller = self.intframe.reindex(columns=['A', 'B', 'E'])
-        self.assert_(smaller['E'].dtype == np.float_)
-
-    def test_rename_objects(self):
-        renamed = self.mixed_frame.rename(columns=str.upper)
-        self.assert_('FOO' in renamed)
-        self.assert_('foo' not in renamed)
-
-    def test_fill_corner(self):
-        self.mixed_frame['foo'][5:20] = np.NaN
-        self.mixed_frame['A'][-10:] = np.NaN
-
-        filled = self.mixed_frame.fillna(value=0)
-        self.assert_((filled['foo'][5:20] == 0).all())
-        del self.mixed_frame['foo']
-
-	empty_float = self.frame.reindex(columns=[])
-        result = empty_float.fillna(value=0)
-
-    def test_count_objects(self):
-        dm = DataMatrix(self.mixed_frame._series)
-        df = DataFrame(self.mixed_frame._series)
-
-        common.assert_series_equal(dm.count(), df.count())
-        common.assert_series_equal(dm.count(1), df.count(1))
-
-    def test_cumsum_corner(self):
-        dm = DataMatrix(np.arange(20).reshape(4, 5),
-                        index=range(4), columns=range(5))
-        result = dm.cumsum()
-
-    def test_xs_view(self):
-        dm = DataMatrix(np.arange(20).reshape(4, 5),
-                        index=range(4), columns=range(5))
-
-        dm.xs(2, copy=False)[:] = 5
-        self.assert_((dm.xs(2) == 5).all())
-
-        dm.xs(2)[:] = 10
-        self.assert_((dm.xs(2) == 5).all())
-
-        # TODO: deal with mixed-type fiasco?
-        self.assertRaises(Exception, self.mixed_frame.xs,
-                          self.mixed_frame.index[2], copy=False)
-
-if __name__ == '__main__':
-    import nose
-    # nose.runmodule(argv=[__file__,'-vvs','-x','--pdb-failure'],
-    #                exit=False)
-    nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
-                   exit=False)
-
