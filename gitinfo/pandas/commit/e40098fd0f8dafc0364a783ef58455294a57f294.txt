commit e40098fd0f8dafc0364a783ef58455294a57f294
Author: Chang She <changshe@gmail.com>
Date:   Mon Sep 10 21:24:25 2012 -0400

    BUG: use _maybe_upcast and removes dup code. #1814

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 1319b864b..962e50e36 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -534,19 +534,6 @@ def ensure_float(arr):
 
     return arr
 
-def ensure_nansafe(arr):
-    """
-    convert int to float
-    convert bool to object
-    """
-    if issubclass(arr.dtype.type, np.integer):
-        arr = arr.astype(float)
-
-    elif issubclass(arr.dtype.type, np.bool_):
-        arr = arr.astype(object)
-
-    return arr
-
 def _mut_exclusive(arg1, arg2):
     if arg1 is not None and arg2 is not None:
         raise Exception('mutually exclusive arguments')
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 818131182..164a9f4e7 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -3567,7 +3567,7 @@ class DataFrame(NDFrame):
             new_values = blk.values.take(indexer, axis=1)
             # convert integer to float if necessary. need to do a lot more than
             # that, handle boolean etc also
-            new_values = com.ensure_nansafe(new_values)
+            new_values = com._maybe_upcast(new_values)
             if periods > 0:
                 new_values[:, :periods] = nan
             else:
diff --git a/pandas/core/reshape.py b/pandas/core/reshape.py
index a8815744c..d8c9087a3 100644
--- a/pandas/core/reshape.py
+++ b/pandas/core/reshape.py
@@ -157,11 +157,7 @@ class _Unstacker(object):
         new_values = np.empty((length, result_width), dtype=values.dtype)
         new_mask = np.zeros((length, result_width), dtype=bool)
 
-        if issubclass(values.dtype.type, np.integer):
-            new_values = new_values.astype(float)
-        elif issubclass(values.dtype.type, np.bool_):
-            new_values = new_values.astype(object)
-
+        new_values = com._maybe_upcast(new_values)
         new_values.fill(np.nan)
 
         # is there a simpler / faster way of doing this?
