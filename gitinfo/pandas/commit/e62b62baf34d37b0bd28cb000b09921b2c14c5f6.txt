commit e62b62baf34d37b0bd28cb000b09921b2c14c5f6
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Tue Jul 9 13:48:31 2019 -0700

    CLN: checks instead of try/except (#27296)

diff --git a/pandas/core/internals/blocks.py b/pandas/core/internals/blocks.py
index 5785dbfbd..36074e192 100644
--- a/pandas/core/internals/blocks.py
+++ b/pandas/core/internals/blocks.py
@@ -3376,36 +3376,36 @@ def _putmask_smart(v, m, n):
     # will work in the current dtype
     try:
         nn = n[m]
-
+    except TypeError:
+        # TypeError: only integer scalar arrays can be converted to a scalar index
+        pass
+    else:
         # make sure that we have a nullable type
         # if we have nulls
         if not _isna_compat(v, nn[0]):
-            raise ValueError
-
-        # we ignore ComplexWarning here
-        with warnings.catch_warnings(record=True):
-            warnings.simplefilter("ignore", np.ComplexWarning)
-            nn_at = nn.astype(v.dtype)
-
-        # avoid invalid dtype comparisons
-        # between numbers & strings
-
-        # only compare integers/floats
-        # don't compare integers to datetimelikes
-        if not is_numeric_v_string_like(nn, nn_at) and (
-            is_float_dtype(nn.dtype)
-            or is_integer_dtype(nn.dtype)
-            and is_float_dtype(nn_at.dtype)
-            or is_integer_dtype(nn_at.dtype)
-        ):
+            pass
+        elif is_numeric_v_string_like(nn, v):
+            # avoid invalid dtype comparisons
+            # between numbers & strings
+            pass
+        elif not (is_float_dtype(nn.dtype) or is_integer_dtype(nn.dtype)):
+            # only compare integers/floats
+            pass
+        elif not (is_float_dtype(v.dtype) or is_integer_dtype(v.dtype)):
+            # only compare integers/floats
+            pass
+        else:
+
+            # we ignore ComplexWarning here
+            with warnings.catch_warnings(record=True):
+                warnings.simplefilter("ignore", np.ComplexWarning)
+                nn_at = nn.astype(v.dtype)
 
             comp = nn == nn_at
             if is_list_like(comp) and comp.all():
                 nv = v.copy()
                 nv[m] = nn_at
                 return nv
-    except (ValueError, IndexError, TypeError, OverflowError):
-        pass
 
     n = np.asarray(n)
 
