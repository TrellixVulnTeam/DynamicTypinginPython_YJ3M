commit 04cef6e22267f6847d680cb69b132dc418938538
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue May 31 14:03:53 2011 +0100

    boolean indexing with Series must match index labels

diff --git a/pandas/core/series.py b/pandas/core/series.py
index c8dcbb17b..884530d4c 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -280,14 +280,19 @@ class Series(np.ndarray, PandasGeneric):
             # Could not hash item
             pass
 
-        # is there a case where this would NOT be an ndarray?
-        # need to find an example, I took out the case for now
+        # boolean indexing, need to check that the data are aligned, otherwise
+        # disallowed
+        if isinstance(key, Series) and key.dtype == np.bool_:
+            if not key.index.equals(self.index):
+                raise Exception('can only boolean index with like-indexed '
+                                'Series or raw ndarrays')
 
         # TODO: [slice(0, 5, None)] will break if you convert to ndarray,
         # e.g. as requested by np.median
+
         try:
             return Series(values[key], index=self.index[key])
-        except Exception, e1:
+        except Exception:
             key = np.asarray(key)
             return Series(values[key], index=self.index[key])
 
@@ -329,12 +334,28 @@ class Series(np.ndarray, PandasGeneric):
         return Series(self.values[i:j].copy(), index=self.index[i:j])
 
     def __setitem__(self, key, value):
+        values = self.values
         try:
             loc = self.index.indexMap[key]
-            ndarray.__setitem__(self, loc, value)
-        except Exception:
-            values = self.values
-            values[key] = value
+            values[loc] = value
+            return
+        except KeyError:
+            if isinstance(key, (int, np.integer)):
+                values[key] = value
+                return
+            raise Exception('Requested index not in this series!')
+        except TypeError:
+            # Could not hash item
+            pass
+
+        # boolean indexing, need to check that the data are aligned, otherwise
+        # disallowed
+        if isinstance(key, Series) and key.dtype == np.bool_:
+            if not key.index.equals(self.index):
+                raise Exception('can only boolean index with like-indexed '
+                                'Series or raw ndarrays')
+
+        values[key] = value
 
     def __setslice__(self, i, j, value):
         """Set slice equal to given value(s)"""
diff --git a/pandas/core/tests/test_series.py b/pandas/core/tests/test_series.py
index 9bb058daf..caf6abf73 100644
--- a/pandas/core/tests/test_series.py
+++ b/pandas/core/tests/test_series.py
@@ -150,13 +150,21 @@ class TestSeries(unittest.TestCase):
         self.assertEqual(self.series[2], slice1[1])
         self.assertEqual(self.objSeries[2], slice2[1])
 
-    def test_getitem_boolean_list(self):
+    def test_getitem_boolean(self):
         s = self.series
         vec = s > s.median()
 
+        # passing list is OK
         result = s[list(vec)]
         expected = s[vec]
         assert_series_equal(result, expected)
+        self.assert_(np.array_equal(result.index, s.index[vec]))
+
+    def test_getitem_setitem_boolean_corner(self):
+        ts = self.ts
+        mask_shifted = ts.shift(1, offset=datetools.bday) > ts.median()
+        self.assertRaises(Exception, ts.__getitem__, mask_shifted)
+        self.assertRaises(Exception, ts.__setitem__, mask_shifted, 1)
 
     def test_slice(self):
         numSlice = self.series[10:20]
