commit 1ca094f8b0d9776965210cd4b378af5ed7404e55
Author: Pietro Battiston <me@pietrobattiston.it>
Date:   Fri Feb 12 09:33:31 2016 -0500

    BUG: Refine validation of parameters to RangeIndex.__init__
    
    closes #12288
    
    Author: Pietro Battiston <me@pietrobattiston.it>
    
    Closes #12295 from toobaz/rangeindexparams and squashes the following commits:
    
    ee92354 [Pietro Battiston] BUG: Refine validation of parameters to RangeIndex.__init__

diff --git a/doc/source/whatsnew/v0.18.0.txt b/doc/source/whatsnew/v0.18.0.txt
index 0a329af0d..f4015b48f 100644
--- a/doc/source/whatsnew/v0.18.0.txt
+++ b/doc/source/whatsnew/v0.18.0.txt
@@ -134,7 +134,7 @@ Range Index
 
 A ``RangeIndex`` has been added to the ``Int64Index`` sub-classes to support a memory saving alternative for common use cases. This has a similar implementation to the python ``range`` object (``xrange`` in python 2), in that it only stores the start, stop, and step values for the index. It will transparently interact with the user API, converting to ``Int64Index`` if needed.
 
-This will now be the default constructed index for ``NDFrame`` objects, rather than previous an ``Int64Index``. (:issue:`939`, :issue:`12070`, :issue:`12071`, :issue:`12109`)
+This will now be the default constructed index for ``NDFrame`` objects, rather than previous an ``Int64Index``. (:issue:`939`, :issue:`12070`, :issue:`12071`, :issue:`12109`, :issue:`12888`)
 
 Previous Behavior:
 
diff --git a/pandas/indexes/range.py b/pandas/indexes/range.py
index f4f574565..ca12a06b4 100644
--- a/pandas/indexes/range.py
+++ b/pandas/indexes/range.py
@@ -23,13 +23,14 @@ class RangeIndex(Int64Index):
 
     Parameters
     ----------
-    start : int (default: 0)
+    start : int (default: 0), or other RangeIndex instance.
+        If int and "stop" is not given, interpreted as "stop" instead.
     stop : int (default: 0)
     step : int (default: 1)
     name : object, optional
         Name to be stored in the index
     copy : bool, default False
-        Make a copy of input if its a RangeIndex
+        Unused, accepted for homogeneity with other index types.
 
     """
 
@@ -46,20 +47,17 @@ class RangeIndex(Int64Index):
 
         # RangeIndex
         if isinstance(start, RangeIndex):
-            if not copy:
-                return start
             if name is None:
-                name = getattr(start, 'name', None)
-            start, stop, step = start._start, start._stop, start._step
+                name = start.name
+            return cls._simple_new(name=name,
+                                   **dict(start._get_data_as_items()))
 
         # validate the arguments
         def _ensure_int(value, field):
             try:
                 new_value = int(value)
-            except:
-                new_value = value
-
-            if not com.is_integer(new_value) or new_value != value:
+                assert(new_value == value)
+            except (ValueError, AssertionError):
                 raise TypeError("RangeIndex(...) must be called with integers,"
                                 " {value} was passed for {field}".format(
                                     value=type(value).__name__,
diff --git a/pandas/tests/indexes/test_range.py b/pandas/tests/indexes/test_range.py
index cf7fe67be..84ed10499 100644
--- a/pandas/tests/indexes/test_range.py
+++ b/pandas/tests/indexes/test_range.py
@@ -138,6 +138,25 @@ class TestRangeIndex(Numeric, tm.TestCase):
         self.assertRaises(TypeError,
                           lambda: Index(range(1, 5, 2), dtype='float64'))
 
+    def test_constructor_name(self):
+        # GH12288
+        orig = RangeIndex(10)
+        orig.name = 'original'
+
+        copy = RangeIndex(orig)
+        copy.name = 'copy'
+
+        self.assertTrue(orig.name, 'original')
+        self.assertTrue(copy.name, 'copy')
+
+        new = Index(copy)
+        self.assertTrue(new.name, 'copy')
+
+        new.name = 'new'
+        self.assertTrue(orig.name, 'original')
+        self.assertTrue(new.name, 'copy')
+        self.assertTrue(new.name, 'new')
+
     def test_numeric_compat2(self):
         # validate that we are handling the RangeIndex overrides to numeric ops
         # and returning RangeIndex where possible
