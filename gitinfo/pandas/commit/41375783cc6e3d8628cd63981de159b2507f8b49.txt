commit 41375783cc6e3d8628cd63981de159b2507f8b49
Author: Adam Klein <adamklein@gmail.com>
Date:   Wed Mar 7 20:01:29 2012 -0500

    TST: made interval constructor test work

diff --git a/pandas/core/datetools.py b/pandas/core/datetools.py
index 9b10f106a..847d37096 100644
--- a/pandas/core/datetools.py
+++ b/pandas/core/datetools.py
@@ -185,15 +185,38 @@ class Interval:
             self.ordinal = lib.skts_ordinal(dt.year, dt.month, dt.day, dt.hour,
                                             dt.minute, dt.second, self.freq)
 
-    def asfreq(self, freq=None):
+    def __eq__(self, other):
+        if isinstance(other, Interval):
+            return self.ordinal == other.ordinal and self.freq == other.freq
+        return False
+
+    def asfreq(self, freq=None, how='E'):
+        if how not in ('S', 'E'):
+            raise ValueError('How must be one of S or E')
+
         if isinstance(freq, basestring):
             freq = _interval_freq_map[freq]
-        new_ordinal = lib.interval_freq_conv(self.ordinal, self.freq, freq)
+
+        new_ordinal = lib.interval_freq_conv(self.ordinal,
+                                             self.freq, freq, how)
+
         return Interval(new_ordinal, freq)
 
+    @classmethod
+    def now(cls, freq=None):
+        if isinstance(freq, basestring):
+            freq = _interval_freq_map[freq]
+
+        dt = datetime.now()
+
+        skts_ordinal  = lib.skts_ordinal(dt.year, dt.month, dt.day, dt.hour,
+                                         dt.minute, dt.second, freq)
+
+        return Interval(skts_ordinal, freq)
+
     def __repr__(self):
         formatted = lib.skts_interval_to_string(self.ordinal, self.freq)
-        freqstr = _reverse_interval_map[self.req]
+        freqstr = _reverse_interval_map[self.freq]
         return ("<%s : %s>" % (freqstr, formatted))
 
 #-------------------------------------------------------------------------------
diff --git a/pandas/src/skts.c b/pandas/src/skts.c
index 6628f0ec1..67d54dbfe 100644
--- a/pandas/src/skts.c
+++ b/pandas/src/skts.c
@@ -2,7 +2,7 @@
 #include "limits.h"
 #include "numpy/ndarraytypes.h"
 
-/* 
+/*
  * Borrowed and derived code from scikits.timeseries that we will expose via
  * Cython to pandas. This primarily concerns interval representation and
  * frequency conversion routines.
@@ -248,13 +248,13 @@ int dInfoCalc_SetFromAbsDate(register struct date_info *dinfo,
 ///////////////////////////////////////////////
 
 // frequency specifc conversion routines
-// each function must take an integer fromDate and 
+// each function must take an integer fromDate and
 // a char relation ('S' or 'E' for 'START' or 'END')
 ///////////////////////////////////////////////////////////////////////
 
 // helpers for frequency conversion routines //
 
-static long DtoB_weekday(long fromDate) { 
+static long DtoB_weekday(long fromDate) {
     return (((fromDate) / 7) * 5) + (fromDate)%7;
 }
 
diff --git a/pandas/tests/test_datetime64.py b/pandas/tests/test_datetime64.py
index 48ace8ed4..1d9e35418 100644
--- a/pandas/tests/test_datetime64.py
+++ b/pandas/tests/test_datetime64.py
@@ -567,7 +567,7 @@ class TestDatetime64(unittest.TestCase):
 
         self.assertEquals(i1, i2)
 
-        i1 = Interval('2005', freq='Y')
+        i1 = Interval('2005', freq='A')
         i2 = Interval('2005')
 
         self.assertEquals(i1, i2)
@@ -577,6 +577,10 @@ class TestDatetime64(unittest.TestCase):
 
         self.assertEquals(i1, i2)
 
+    def test_interval_asfreq(self):
+        # need a whole bunch of tests here ...
+        pass
+
     def test_intervalindex_constructor(self):
         pass
         #ii = IntervalIndex(freq='M', start='1/1/2005', end='12/1/2005')
