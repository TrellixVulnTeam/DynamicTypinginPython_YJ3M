commit 3588fded4ffe65a708341f19509cffe99aa5a643
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Wed Apr 8 16:22:31 2020 -0700

    REF: collect DataFrame.__setitem__ tests (#33408)

diff --git a/pandas/tests/frame/indexing/test_categorical.py b/pandas/tests/frame/indexing/test_categorical.py
index 0ae2f8110..d94dc8d2f 100644
--- a/pandas/tests/frame/indexing/test_categorical.py
+++ b/pandas/tests/frame/indexing/test_categorical.py
@@ -391,11 +391,3 @@ class TestDataFrameIndexingCategorical:
 
         result = df.loc[["a"]].index.levels[0]
         tm.assert_index_equal(result, expected)
-
-    def test_wrong_length_cat_dtype_raises(self):
-        # GH29523
-        cat = pd.Categorical.from_codes([0, 1, 1, 0, 1, 2], ["a", "b", "c"])
-        df = pd.DataFrame({"bar": range(10)})
-        err = "Length of values does not match length of index"
-        with pytest.raises(ValueError, match=err):
-            df["foo"] = cat
diff --git a/pandas/tests/frame/indexing/test_datetime.py b/pandas/tests/frame/indexing/test_datetime.py
index c1a7cb9f4..1937a4c38 100644
--- a/pandas/tests/frame/indexing/test_datetime.py
+++ b/pandas/tests/frame/indexing/test_datetime.py
@@ -44,12 +44,3 @@ class TestDataFrameIndexingDatetimeWithTZ:
 
         df = result.set_index("foo")
         tm.assert_index_equal(df.index, idx)
-
-    def test_scalar_assignment(self):
-        # issue #19843
-        df = pd.DataFrame(index=(0, 1, 2))
-        df["now"] = pd.Timestamp("20130101", tz="UTC")
-        expected = pd.DataFrame(
-            {"now": pd.Timestamp("20130101", tz="UTC")}, index=[0, 1, 2]
-        )
-        tm.assert_frame_equal(df, expected)
diff --git a/pandas/tests/frame/indexing/test_indexing.py b/pandas/tests/frame/indexing/test_indexing.py
index c3b9a7bf0..ed3c4689c 100644
--- a/pandas/tests/frame/indexing/test_indexing.py
+++ b/pandas/tests/frame/indexing/test_indexing.py
@@ -1921,22 +1921,6 @@ class TestDataFrameIndexing:
         result = df.loc[:, "A"]
         tm.assert_series_equal(result, expected)
 
-    def test_setitem_with_sparse_value(self):
-        # GH8131
-        df = pd.DataFrame({"c_1": ["a", "b", "c"], "n_1": [1.0, 2.0, 3.0]})
-        sp_array = SparseArray([0, 0, 1])
-        df["new_column"] = sp_array
-        tm.assert_series_equal(
-            df["new_column"], pd.Series(sp_array, name="new_column"), check_names=False
-        )
-
-    def test_setitem_with_unaligned_sparse_value(self):
-        df = pd.DataFrame({"c_1": ["a", "b", "c"], "n_1": [1.0, 2.0, 3.0]})
-        sp_series = pd.Series(SparseArray([0, 0, 1]), index=[2, 1, 0])
-        df["new_column"] = sp_series
-        exp = pd.Series(SparseArray([1, 0, 0]), name="new_column")
-        tm.assert_series_equal(df["new_column"], exp)
-
     def test_setitem_with_unaligned_tz_aware_datetime_column(self):
         # GH 12981
         # Assignment of unaligned offset-aware datetime series.
diff --git a/pandas/tests/frame/indexing/test_setitem.py b/pandas/tests/frame/indexing/test_setitem.py
index c12643f41..d53665539 100644
--- a/pandas/tests/frame/indexing/test_setitem.py
+++ b/pandas/tests/frame/indexing/test_setitem.py
@@ -1,13 +1,12 @@
 import numpy as np
 import pytest
 
-from pandas import DataFrame, Index, Series
+from pandas import Categorical, DataFrame, Index, Series, Timestamp, date_range
 import pandas._testing as tm
+from pandas.core.arrays import SparseArray
 
-# Column add, remove, delete.
 
-
-class TestDataFrameMutateColumns:
+class TestDataFrameSetItem:
     def test_setitem_error_msmgs(self):
 
         # GH 7432
@@ -84,3 +83,46 @@ class TestDataFrameMutateColumns:
         df["X"] = ["x", "y", "z"]
         exp = DataFrame(data={"X": ["x", "y", "z"]}, index=["A", "B", "C"])
         tm.assert_frame_equal(df, exp)
+
+    def test_setitem_dt64_index_empty_columns(self):
+        rng = date_range("1/1/2000 00:00:00", "1/1/2000 1:59:50", freq="10s")
+        df = DataFrame(index=np.arange(len(rng)))
+
+        df["A"] = rng
+        assert df["A"].dtype == np.dtype("M8[ns]")
+
+    def test_setitem_timestamp_empty_columns(self):
+        # GH#19843
+        df = DataFrame(index=range(3))
+        df["now"] = Timestamp("20130101", tz="UTC")
+
+        expected = DataFrame(
+            [[Timestamp("20130101", tz="UTC")]] * 3, index=[0, 1, 2], columns=["now"],
+        )
+        tm.assert_frame_equal(df, expected)
+
+    def test_setitem_wrong_length_categorical_dtype_raises(self):
+        # GH#29523
+        cat = Categorical.from_codes([0, 1, 1, 0, 1, 2], ["a", "b", "c"])
+        df = DataFrame(range(10), columns=["bar"])
+
+        msg = "Length of values does not match length of index"
+        with pytest.raises(ValueError, match=msg):
+            df["foo"] = cat
+
+    def test_setitem_with_sparse_value(self):
+        # GH#8131
+        df = DataFrame({"c_1": ["a", "b", "c"], "n_1": [1.0, 2.0, 3.0]})
+        sp_array = SparseArray([0, 0, 1])
+        df["new_column"] = sp_array
+
+        expected = Series(sp_array, name="new_column")
+        tm.assert_series_equal(df["new_column"], expected)
+
+    def test_setitem_with_unaligned_sparse_value(self):
+        df = DataFrame({"c_1": ["a", "b", "c"], "n_1": [1.0, 2.0, 3.0]})
+        sp_series = Series(SparseArray([0, 0, 1]), index=[2, 1, 0])
+
+        df["new_column"] = sp_series
+        expected = Series(SparseArray([1, 0, 0]), name="new_column")
+        tm.assert_series_equal(df["new_column"], expected)
diff --git a/pandas/tests/frame/test_timeseries.py b/pandas/tests/frame/test_timeseries.py
index dea921a92..63361789b 100644
--- a/pandas/tests/frame/test_timeseries.py
+++ b/pandas/tests/frame/test_timeseries.py
@@ -13,13 +13,6 @@ class TestDataFrameTimeSeriesMethods:
         df = DataFrame({"A": np.random.randn(len(rng)), "B": dates})
         assert np.issubdtype(df["B"].dtype, np.dtype("M8[ns]"))
 
-    def test_frame_append_datetime64_column(self):
-        rng = date_range("1/1/2000 00:00:00", "1/1/2000 1:59:50", freq="10s")
-        df = DataFrame(index=np.arange(len(rng)))
-
-        df["A"] = rng
-        assert np.issubdtype(df["A"].dtype, np.dtype("M8[ns]"))
-
     def test_frame_append_datetime64_col_other_units(self):
         n = 100
 
diff --git a/pandas/tests/indexing/multiindex/test_insert.py b/pandas/tests/indexing/multiindex/test_insert.py
index 835e61da2..42922c3de 100644
--- a/pandas/tests/indexing/multiindex/test_insert.py
+++ b/pandas/tests/indexing/multiindex/test_insert.py
@@ -5,7 +5,7 @@ import pandas._testing as tm
 
 
 class TestMultiIndexInsertion:
-    def test_mixed_depth_insert(self):
+    def test_setitem_mixed_depth(self):
         arrays = [
             ["a", "top", "top", "routine1", "routine1", "routine2"],
             ["", "OD", "OD", "result1", "result2", "result1"],
