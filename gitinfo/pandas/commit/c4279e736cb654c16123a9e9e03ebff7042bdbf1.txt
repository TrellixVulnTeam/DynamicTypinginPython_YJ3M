commit c4279e736cb654c16123a9e9e03ebff7042bdbf1
Author: jreback <jeff@reback.net>
Date:   Wed Sep 11 16:59:58 2013 -0400

    API: Complex compat for Series with ndarray. (GH4819)

diff --git a/doc/source/cookbook.rst b/doc/source/cookbook.rst
index 0b0023f53..5dcb6c20b 100644
--- a/doc/source/cookbook.rst
+++ b/doc/source/cookbook.rst
@@ -116,7 +116,7 @@ panelnd
 The :ref:`panelnd<dsintro.panelnd>` docs.
 
 `Construct a 5D panelnd
-http://stackoverflow.com/questions/18748598/why-my-panelnd-factory-throwing-a-keyerror`__
+<http://stackoverflow.com/questions/18748598/why-my-panelnd-factory-throwing-a-keyerror>`__
 
 .. _cookbook.missing_data:
 
diff --git a/doc/source/release.rst b/doc/source/release.rst
index fd724af99..087d28805 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -265,6 +265,7 @@ See :ref:`Internal Refactoring<whatsnew_0130.refactoring>`
 - Refactor of ``_get_numeric_data/_get_bool_data`` to core/generic.py, allowing Series/Panel functionaility
 - Refactor of Series arithmetic with time-like objects (datetime/timedelta/time
   etc.) into a separate, cleaned up wrapper class. (:issue:`4613`)
+- Complex compat for ``Series`` with ``ndarray``. (:issue:`4819`)
 
 Experimental Features
 ~~~~~~~~~~~~~~~~~~~~~
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 32f6765b5..577e0a8b5 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -35,6 +35,7 @@ from pandas.tseries.offsets import DateOffset
 from pandas import compat
 from pandas.util.terminal import get_terminal_size
 from pandas.compat import zip, lzip, u, OrderedDict
+from pandas.util import rwproperty
 
 import pandas.core.array as pa
 
@@ -793,6 +794,23 @@ class Series(generic.NDFrame):
     def __contains__(self, key):
         return key in self.index
 
+    # complex
+    @rwproperty.getproperty
+    def real(self):
+        return self.values.real
+
+    @rwproperty.setproperty
+    def real(self, v):
+        self.values.real = v
+
+    @rwproperty.getproperty
+    def imag(self):
+        return self.values.imag
+
+    @rwproperty.setproperty
+    def imag(self, v):
+        self.values.imag = v
+
     # coercion
     __float__ = _coerce_method(float)
     __long__ = _coerce_method(int)
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 7f8fa1019..1f0083547 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -2814,6 +2814,19 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         expected = Series(1,index=range(10),dtype='float64')
         #assert_series_equal(result,expected)
 
+    def test_complexx(self):
+
+        # GH4819
+        # complex access for ndarray compat
+        a = np.arange(5)
+        b = Series(a + 4j*a)
+        tm.assert_almost_equal(a,b.real)
+        tm.assert_almost_equal(4*a,b.imag)
+
+        b.real = np.arange(5)+5
+        tm.assert_almost_equal(a+5,b.real)
+        tm.assert_almost_equal(4*a,b.imag)
+
     def test_underlying_data_conversion(self):
 
         # GH 4080
