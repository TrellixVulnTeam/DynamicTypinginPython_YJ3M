commit 9207e524e484a0d82ec50ed17acc514d567c4fbd
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Feb 7 16:38:16 2012 -0500

    BUG: handle object dtype arrays in OLS class, GH #759

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 8ab5cefec..cd109bac2 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -533,7 +533,10 @@ def is_float_dtype(arr_or_dtype):
 
 
 def _ensure_float64(arr):
-    if arr.dtype != np.float64:
+    try:
+        if arr.dtype != np.float64:
+            arr = arr.astype(np.float64)
+    except AttributeError:
         arr = arr.astype(np.float64)
     return arr
 
@@ -542,6 +545,11 @@ def _ensure_int64(arr):
         arr = arr.astype(np.int64)
     return arr
 
+def _ensure_platform_int(labels):
+    if labels.dtype != np.int_:  # pragma: no cover
+        labels = labels.astype(np.int_)
+    return labels
+
 def _ensure_int32(arr):
     if arr.dtype != np.int32:
         arr = arr.astype(np.int32)
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index c32807c9d..bd79f9af8 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -406,7 +406,7 @@ class GroupBy(object):
 
         name_list = []
         for ping, labels in zip(self.groupings, recons_labels):
-            labels = _ensure_platform_int(labels)
+            labels = com._ensure_platform_int(labels)
             name_list.append((ping.name, ping.group_index.take(labels)))
 
         return name_list
@@ -1492,7 +1492,7 @@ def _compress_group_index(group_index, sort=True):
     uniques = []
     table = lib.Int64HashTable(len(group_index))
 
-    group_index = _ensure_int64(group_index)
+    group_index = com._ensure_int64(group_index)
 
     # note, group labels come out ascending (ie, 1,2,3 etc)
     comp_ids = table.get_labels_groupby(group_index, uniques)
@@ -1523,13 +1523,3 @@ def _groupby_indices(values):
     if values.dtype != np.object_:
         values = values.astype('O')
     return lib.groupby_indices(values)
-
-def _ensure_platform_int(labels):
-    if labels.dtype != np.int_:  # pragma: no cover
-        labels = labels.astype(np.int_)
-    return labels
-
-def _ensure_int64(labels):
-    if labels.dtype != np.int64:  # pragma: no cover
-        labels = labels.astype(np.int64)
-    return labels
diff --git a/pandas/sparse/frame.py b/pandas/sparse/frame.py
index ba17086e1..f656269d6 100644
--- a/pandas/sparse/frame.py
+++ b/pandas/sparse/frame.py
@@ -221,6 +221,12 @@ class SparseDataFrame(DataFrame):
         data = dict((k, v.to_dense()) for k, v in self.iteritems())
         return DataFrame(data, index=self.index)
 
+    def astype(self, dtype):
+        new_series = dict((k, v.astype(dtype)) for k, v in self.iteritems())
+        return SparseDataFrame(new_series, index=self.index, columns=self.columns,
+                               default_fill_value=self.default_fill_value,
+                               default_kind=self.default_kind)
+
     def copy(self, deep=True):
         """
         Make a copy of this SparseDataFrame
diff --git a/pandas/stats/ols.py b/pandas/stats/ols.py
index c129f4f71..4e1958136 100644
--- a/pandas/stats/ols.py
+++ b/pandas/stats/ols.py
@@ -10,10 +10,12 @@ from StringIO import StringIO
 import numpy as np
 
 from pandas.core.api import DataFrame, Series
+from pandas.core.common import _ensure_float64
 from pandas.core.index import MultiIndex
 from pandas.core.panel import Panel
 from pandas.util.decorators import cache_readonly
-import pandas.stats.common as common
+
+import pandas.stats.common as scom
 import pandas.stats.math as math
 import pandas.stats.moments as moments
 
@@ -393,7 +395,7 @@ class OLS(object):
         buf.write('%14s %10s %10s %10s %10s %10s %10s\n' %
                   ('Variable', 'Coef', 'Std Err', 't-stat',
                    'p-value', 'CI 2.5%', 'CI 97.5%'))
-        buf.write(common.banner(''))
+        buf.write(scom.banner(''))
         coef_template = '\n%14s %10.4f %10.4f %10.2f %10.4f %10.4f %10.4f'
 
         results = self._results
@@ -402,7 +404,7 @@ class OLS(object):
 
         for i, name in enumerate(beta.index):
             if i and not (i % 5):
-                buf.write('\n' + common.banner(''))
+                buf.write('\n' + scom.banner(''))
 
             std_err = results['std_err'][name]
             CI1 = beta[name] - 1.96 * std_err
@@ -482,9 +484,9 @@ Degrees of Freedom: model %(df_model)d, resid %(df_resid)d
             formula.write(' + ' + coef)
 
         params = {
-            'bannerTop' : common.banner('Summary of Regression Analysis'),
-            'bannerCoef' : common.banner('Summary of Estimated Coefficients'),
-            'bannerEnd' : common.banner('End of Summary'),
+            'bannerTop' : scom.banner('Summary of Regression Analysis'),
+            'bannerCoef' : scom.banner('Summary of Estimated Coefficients'),
+            'bannerEnd' : scom.banner('End of Summary'),
             'formula' : formula.getvalue(),
             'r2' : results['r2'],
             'r2_adj' : results['r2_adj'],
@@ -544,7 +546,7 @@ class MovingOLS(OLS):
         self._set_window(window_type, window, min_periods)
 
     def _set_window(self, window_type, window, min_periods):
-        self._window_type = common._get_window_type(window_type)
+        self._window_type = scom._get_window_type(window_type)
 
         if self._is_rolling:
             assert(window is not None)
@@ -1154,33 +1156,6 @@ def _safe_update(d, other):
 
         d[k] = v
 
-def _combine_rhs(rhs):
-    """
-    Glue input X variables together while checking for potential
-    duplicates
-    """
-    series = {}
-
-    if isinstance(rhs, Series):
-        series['x'] = rhs
-    elif isinstance(rhs, DataFrame):
-        series = rhs.copy()
-    elif isinstance(rhs, dict):
-        for name, value in rhs.iteritems():
-            if isinstance(value, Series):
-                _safe_update(series, {name : value})
-            elif isinstance(value, (dict, DataFrame)):
-                _safe_update(series, value)
-            else: # pragma: no cover
-                raise Exception('Invalid RHS data type: %s' % type(value))
-    else: # pragma: no cover
-        raise Exception('Invalid RHS type: %s' % type(rhs))
-
-    if not isinstance(series, DataFrame):
-        series = DataFrame(series)
-
-    return series
-
 def _filter_data(lhs, rhs, weights=None):
     """
     Cleans the input for single OLS.
@@ -1202,7 +1177,7 @@ def _filter_data(lhs, rhs, weights=None):
         lhs = Series(lhs, index=rhs.index)
 
     rhs = _combine_rhs(rhs)
-    lhs = DataFrame({'__y__' : lhs})
+    lhs = DataFrame({'__y__' : lhs}, dtype=float)
     pre_filt_rhs = rhs.dropna(how='any')
 
     combined = rhs.join(lhs, how='outer')
@@ -1224,6 +1199,34 @@ def _filter_data(lhs, rhs, weights=None):
     return (filt_lhs, filt_rhs, filt_weights,
             pre_filt_rhs, index, valid)
 
+
+def _combine_rhs(rhs):
+    """
+    Glue input X variables together while checking for potential
+    duplicates
+    """
+    series = {}
+
+    if isinstance(rhs, Series):
+        series['x'] = rhs
+    elif isinstance(rhs, DataFrame):
+        series = rhs.copy()
+    elif isinstance(rhs, dict):
+        for name, value in rhs.iteritems():
+            if isinstance(value, Series):
+                _safe_update(series, {name : value})
+            elif isinstance(value, (dict, DataFrame)):
+                _safe_update(series, value)
+            else: # pragma: no cover
+                raise Exception('Invalid RHS data type: %s' % type(value))
+    else: # pragma: no cover
+        raise Exception('Invalid RHS type: %s' % type(rhs))
+
+    if not isinstance(series, DataFrame):
+        series = DataFrame(series, dtype=float)
+
+    return series
+
 # A little kludge so we can use this method for both
 # MovingOLS and MovingPanelOLS
 def _y_converter(y):
diff --git a/pandas/stats/tests/test_ols.py b/pandas/stats/tests/test_ols.py
index 097c79966..1c48f67ec 100644
--- a/pandas/stats/tests/test_ols.py
+++ b/pandas/stats/tests/test_ols.py
@@ -221,6 +221,11 @@ class TestOLS(BaseTest):
 
             assert_almost_equal(ref, res)
 
+    def test_ols_object_dtype(self):
+        df = DataFrame(np.random.randn(20, 2), dtype=object)
+        model = ols(y=df[0], x=df[1])
+        summary = repr(model)
+
 class TestOLSMisc(unittest.TestCase):
     '''
     For test coverage with faux data
diff --git a/vb_suite/suite.py b/vb_suite/suite.py
index 576220308..59a38834b 100644
--- a/vb_suite/suite.py
+++ b/vb_suite/suite.py
@@ -54,7 +54,7 @@ python setup.py build_ext --inplace
 """
 dependencies = ['pandas_vb_common.py']
 
-START_DATE = datetime(2012, 1, 20)
+START_DATE = datetime(2010, 6, 1)
 
 repo = GitRepo(REPO_PATH)
 
