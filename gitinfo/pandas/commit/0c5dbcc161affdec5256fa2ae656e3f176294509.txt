commit 0c5dbcc161affdec5256fa2ae656e3f176294509
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Nov 7 01:20:35 2011 -0500

    ENH: add WLS to standard regression model

diff --git a/pandas/stats/interface.py b/pandas/stats/interface.py
index 89da36c98..cf3a2c82b 100644
--- a/pandas/stats/interface.py
+++ b/pandas/stats/interface.py
@@ -24,6 +24,10 @@ def ols(**kwargs):
         See above for types
     x: Series, DataFrame, dict of Series, dict of DataFrame, Panel, or
         LongPanel
+    weights : Series or ndarray
+        The weights are presumed to be (proportional to) the inverse of the
+        variance of the observations.  That is, if the variables are to be
+        transformed by 1/sqrt(W) you must supply weights = 1/W
     intercept: bool
         True if you want an intercept.  Defaults to True.
     nw_lags: None or int
diff --git a/pandas/stats/ols.py b/pandas/stats/ols.py
index 3a067cda5..41e3279f3 100644
--- a/pandas/stats/ols.py
+++ b/pandas/stats/ols.py
@@ -32,41 +32,58 @@ class OLS(object):
     nw_lags: None or int
         Number of Newey-West lags.
     """
-    def __init__(self, y, x, intercept=True, nw_lags=None, nw_overlap=False):
+    def __init__(self, y, x, intercept=True, weights=None, nw_lags=None,
+                 nw_overlap=False):
         import scikits.statsmodels.api as sm
         self._x_orig = x
         self._y_orig = y
+        self._weights_orig = weights
         self._intercept = intercept
         self._nw_lags = nw_lags
         self._nw_overlap = nw_overlap
 
-        (self._y, self._x, self._x_filtered,
+        (self._y, self._x, self._weights, self._x_filtered,
          self._index, self._time_has_obs) = self._prepare_data()
 
-        # for compat with PanelOLS
-        self._x_trans = self._x
-        self._y_trans = self._y
-
-        self._x_raw = self._x.values
-        self._y_raw = self._y.view(np.ndarray)
+        if self._weights is not None:
+            self._x_trans = self._x.mul(np.sqrt(self._weights), axis=0)
+            self._y_trans = self._y * np.sqrt(self._weights)
+            self.sm_ols = sm.WLS(self._y.values,
+                                 self._x.values,
+                                 weights=self._weights.values).fit()
+        else:
+            self._x_trans = self._x
+            self._y_trans = self._y
+            self.sm_ols = sm.OLS(self._y.values,
+                                 self._x.values).fit()
 
-        self.sm_ols = sm.OLS(self._y_raw, self._x.values).fit()
+        self._y_raw = self._y_trans.values
 
     def _prepare_data(self):
         """
-        Filters the data and sets up an intercept if necessary.
+        Cleans the input for single OLS.
+
+        Parameters
+        ----------
+        lhs: Series
+            Dependent variable in the regression.
+        rhs: dict, whose values are Series, DataFrame, or dict
+            Explanatory variables of the regression.
 
         Returns
         -------
-        (DataFrame, Series).
+        Series, DataFrame
+            Cleaned lhs and rhs
         """
-        (y, x, x_filtered,
-         union_index, valid) = _filter_data(self._y_orig, self._x_orig)
-
+        (filt_lhs, filt_rhs, filt_weights,
+         pre_filt_rhs, index, valid) = _filter_data(self._y_orig, self._x_orig,
+                                                    self._weights_orig)
         if self._intercept:
-            x['intercept'] = x_filtered['intercept'] = 1.
+            filt_rhs['intercept'] = 1.
+            pre_filt_rhs['intercept'] = 1.
 
-        return y, x, x_filtered, union_index, valid
+        return (filt_lhs, filt_rhs, filt_weights,
+                pre_filt_rhs, index, valid)
 
     @property
     def nobs(self):
@@ -952,8 +969,8 @@ class MovingOLS(OLS):
     @cache_readonly
     def _var_beta_raw(self):
         """Returns the raw covariance of beta."""
-        x = self._x
-        y = self._y
+        x = self._x_trans
+        y = self._y_trans
         dates = self._index
         nobs = self._nobs
         rmse = self._rmse_raw
@@ -1156,7 +1173,7 @@ def _combine_rhs(rhs):
 
     return series
 
-def _filter_data(lhs, rhs):
+def _filter_data(lhs, rhs, weights=None):
     """
     Cleans the input for single OLS.
 
@@ -1177,32 +1194,27 @@ def _filter_data(lhs, rhs):
         lhs = Series(lhs, index=rhs.index)
 
     rhs = _combine_rhs(rhs)
+    lhs = DataFrame({'__y__' : lhs})
+    pre_filt_rhs = rhs.dropna(how='any')
 
-    rhs_valid = np.isfinite(rhs.values).sum(1) == len(rhs.columns)
+    combined = rhs.join(lhs, how='outer')
+    if weights is not None:
+        combined['__weights__'] = weights
 
-    if not rhs_valid.all():
-        pre_filtered_rhs = rhs[rhs_valid]
-    else:
-        pre_filtered_rhs = rhs
-
-    index = lhs.index + rhs.index
-    if not index.equals(rhs.index) or not index.equals(lhs.index):
-        rhs = rhs.reindex(index)
-        lhs = lhs.reindex(index)
+    valid = (combined.count(1) == len(combined.columns)).values
 
-        rhs_valid = np.isfinite(rhs.values).sum(1) == len(rhs.columns)
+    combined = combined[valid]
 
-    lhs_valid = np.isfinite(lhs.values)
-    valid = rhs_valid & lhs_valid
-
-    if not valid.all():
-        filt_index = rhs.index[valid]
-        filtered_rhs = rhs.reindex(filt_index)
-        filtered_lhs = lhs.reindex(filt_index)
+    if weights is not None:
+        filt_weights = combined.pop('__weights__')
     else:
-        filtered_rhs, filtered_lhs = rhs, lhs
+        filt_weights = None
+
+    filt_lhs = combined.pop('__y__')
+    filt_rhs = combined
 
-    return filtered_lhs, filtered_rhs, pre_filtered_rhs, index, valid
+    return (filt_lhs, filt_rhs, filt_weights,
+            pre_filt_rhs, combined.index, valid)
 
 # A little kludge so we can use this method for both
 # MovingOLS and MovingPanelOLS
diff --git a/pandas/stats/tests/test_ols.py b/pandas/stats/tests/test_ols.py
index 53626bf5b..937b7cb33 100644
--- a/pandas/stats/tests/test_ols.py
+++ b/pandas/stats/tests/test_ols.py
@@ -20,6 +20,11 @@ import pandas.util.testing as tm
 
 from common import BaseTest
 
+try:
+    import scikits.statsmodels.api as sm
+except ImportError:
+    pass
+
 def _check_repr(obj):
     repr(obj)
     str(obj)
@@ -61,18 +66,44 @@ class TestOLS(BaseTest):
             raise nose.SkipTest
 
     def testOLSWithDatasets(self):
-        import scikits.statsmodels.datasets as datasets
-
-        self.checkDataSet(datasets.ccard.load(), skip_moving=True)
-        self.checkDataSet(datasets.cpunish.load(), skip_moving=True)
-        self.checkDataSet(datasets.longley.load(), skip_moving=True)
-        self.checkDataSet(datasets.stackloss.load(), skip_moving=True)
-        self.checkDataSet(datasets.copper.load())
-        self.checkDataSet(datasets.scotland.load())
+        self.checkDataSet(sm.datasets.ccard.load(), skip_moving=True)
+        self.checkDataSet(sm.datasets.cpunish.load(), skip_moving=True)
+        self.checkDataSet(sm.datasets.longley.load(), skip_moving=True)
+        self.checkDataSet(sm.datasets.stackloss.load(), skip_moving=True)
+        self.checkDataSet(sm.datasets.copper.load())
+        self.checkDataSet(sm.datasets.scotland.load())
 
         # degenerate case fails on some platforms
         # self.checkDataSet(datasets.ccard.load(), 39, 49) # one col in X all 0s
 
+    def testWLS(self):
+        X = DataFrame(np.random.randn(30, 4), columns=['A', 'B', 'C', 'D'])
+        Y = np.random.randn(30)
+        weights = X.std(1)
+
+        self._check_wls(X, Y, weights)
+
+        weights.ix[[5, 15]] = np.nan
+        Y[[2, 21]] = np.nan
+        self._check_wls(X, Y, weights)
+
+    def _check_wls(self, x, y, weights):
+        result = ols(y=y, x=x, weights=1/weights)
+
+        combined = x.copy()
+        combined['__y__'] = y
+        combined['__weights__'] = weights
+        combined = combined.dropna()
+
+        endog = combined.pop('__y__').values
+        aweights = combined.pop('__weights__').values
+        exog = sm.add_constant(combined.values, prepend=False)
+
+        sm_result = sm.WLS(endog, exog, weights=1/aweights).fit()
+
+        assert_almost_equal(sm_result.params, result._beta_raw)
+        assert_almost_equal(sm_result.resid, result._resid_raw)
+
     def checkDataSet(self, dataset, start=None, end=None, skip_moving=False):
         exog = dataset.exog[start : end]
         endog = dataset.endog[start : end]
@@ -91,7 +122,6 @@ class TestOLS(BaseTest):
             self.checkMovingOLS('expanding', x, y, nw_lags=1, nw_overlap=True)
 
     def checkOLS(self, exog, endog, x, y):
-        import scikits.statsmodels.api as sm
         reference = sm.OLS(endog, sm.add_constant(exog, prepend=False)).fit()
         result = ols(y=y, x=x)
 
diff --git a/pandas/stats/tests/test_ols_filter.py b/pandas/stats/tests/test_ols_filter.py
index 2224a4cf4..1624ddc47 100644
--- a/pandas/stats/tests/test_ols_filter.py
+++ b/pandas/stats/tests/test_ols_filter.py
@@ -34,22 +34,22 @@ class TestOLSFilter(unittest.TestCase):
         self.DICT1 = data
 
     def testFilterWithSeriesRHS(self):
-        (lhs, rhs, rhs_pre,
-        index, valid) = _filter_data(self.TS1, {'x1' : self.TS2})
+        (lhs, rhs, weights, rhs_pre,
+        index, valid) = _filter_data(self.TS1, {'x1' : self.TS2}, None)
         self.tsAssertEqual(self.TS1, lhs)
         self.tsAssertEqual(self.TS2[:3], rhs['x1'])
         self.tsAssertEqual(self.TS2, rhs_pre['x1'])
 
     def testFilterWithSeriesRHS2(self):
-        (lhs, rhs, rhs_pre,
-        index, valid) = _filter_data(self.TS2, {'x1' : self.TS1})
+        (lhs, rhs, weights, rhs_pre,
+        index, valid) = _filter_data(self.TS2, {'x1' : self.TS1}, None)
         self.tsAssertEqual(self.TS2[:3], lhs)
         self.tsAssertEqual(self.TS1, rhs['x1'])
         self.tsAssertEqual(self.TS1, rhs_pre['x1'])
 
     def testFilterWithSeriesRHS3(self):
-        (lhs, rhs, rhs_pre,
-        index, valid) = _filter_data(self.TS3, {'x1' : self.TS4})
+        (lhs, rhs, weights, rhs_pre,
+        index, valid) = _filter_data(self.TS3, {'x1' : self.TS4}, None)
         exp_lhs = self.TS3[2:3]
         exp_rhs = self.TS4[2:3]
         exp_rhs_pre = self.TS4[1:]
@@ -58,8 +58,8 @@ class TestOLSFilter(unittest.TestCase):
         self.tsAssertEqual(exp_rhs_pre, rhs_pre['x1'])
 
     def testFilterWithDataFrameRHS(self):
-        (lhs, rhs, rhs_pre,
-        index, valid) = _filter_data(self.TS1, self.DF1)
+        (lhs, rhs, weights, rhs_pre,
+        index, valid) = _filter_data(self.TS1, self.DF1, None)
         exp_lhs = self.TS1[1:]
         exp_rhs1 = self.TS2[1:3]
         exp_rhs2 = self.TS4[1:3]
@@ -68,8 +68,8 @@ class TestOLSFilter(unittest.TestCase):
         self.tsAssertEqual(exp_rhs2, rhs['x2'])
 
     def testFilterWithDictRHS(self):
-        (lhs, rhs, rhs_pre,
-        index, valid) = _filter_data(self.TS1, self.DICT1)
+        (lhs, rhs, weights, rhs_pre,
+        index, valid) = _filter_data(self.TS1, self.DICT1, None)
         exp_lhs = self.TS1[1:]
         exp_rhs1 = self.TS2[1:3]
         exp_rhs2 = self.TS4[1:3]
