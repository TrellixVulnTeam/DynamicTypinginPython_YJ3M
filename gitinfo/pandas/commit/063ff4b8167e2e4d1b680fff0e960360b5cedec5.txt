commit 063ff4b8167e2e4d1b680fff0e960360b5cedec5
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Jan 6 20:23:59 2012 -0500

    ENH: also address Series setitem per #328

diff --git a/pandas/core/common.py b/pandas/core/common.py
index bd43ea644..622170115 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -324,11 +324,11 @@ def _is_bool_indexer(key):
     return False
 
 def _default_index(n):
-    from pandas.core.index import NULL_INDEX
+    from pandas.core.index import NULL_INDEX, Index
     if n == 0:
         return NULL_INDEX
     else:
-        return np.arange(n)
+        return Index(np.arange(n))
 
 def ensure_float(arr):
     if issubclass(arr.dtype.type, np.integer):
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 248c9b820..94022d856 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -14,10 +14,6 @@ class IndexingError(Exception):
     pass
 
 
-class AmbiguousIndexError(Exception):
-    pass
-
-
 class _NDFrameIndexer(object):
 
     def __init__(self, obj):
@@ -391,11 +387,7 @@ def _is_integer_dtype(arr):
     return issubclass(arr.dtype.type, np.integer)
 
 def _is_integer_index(index):
-    # make an educated and not too intelligent guess
-    if len(index) == 0: # pragma: no cover
-        return False
-    else:
-        return com.is_integer(index[0])
+    return index.inferred_type == 'integer'
 
 def _is_label_like(key):
     # select a label or row
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 1287d6562..761ff220c 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -161,15 +161,17 @@ class Series(np.ndarray, generic.PandasObject):
 
         if index is None:
             index = _default_index(len(subarr))
+        else:
+            index = _ensure_index(index)
 
         # Change the class of the array to be the subclass type.
-        subarr = subarr.view(cls)
+        if index.is_all_dates:
+            subarr = subarr.view(TimeSeries)
+        else:
+            subarr = subarr.view(Series)
         subarr.index = index
         subarr.name = name
 
-        if subarr.index.is_all_dates:
-            subarr = subarr.view(TimeSeries)
-
         return subarr
 
     def __init__(self, data=None, index=None, dtype=None, name=None,
@@ -288,7 +290,7 @@ copy : boolean, default False
                     pass
 
             if index.inferred_type == 'integer':
-                raise AmbiguousIndexError(key)
+                raise # AmbiguousIndexError(key)
 
             try:
                 return _gin.get_value_at(self, key)
@@ -402,9 +404,12 @@ copy : boolean, default False
             values[self.index.get_loc(key)] = value
             return
         except KeyError:
-            if isinstance(key, (int, np.integer)):
+            if (com.is_integer(key)
+                and not self.index.inferred_type == 'integer'):
+
                 values[key] = value
                 return
+
             raise KeyError('%s not in this series!' % str(key))
         except TypeError:
             # Could not hash item
@@ -597,6 +602,7 @@ copy : boolean, default False
         "Alias for index"
         return self.index
 
+    # alas, I wish this worked
     # values = lib.ValuesProperty()
 
     @property
diff --git a/pandas/src/inference.pyx b/pandas/src/inference.pyx
index 9a8d2ae1e..50f0f43fe 100644
--- a/pandas/src/inference.pyx
+++ b/pandas/src/inference.pyx
@@ -96,6 +96,9 @@ def is_bool_array(ndarray values):
     else:
         return False
 
+def is_integer(object o):
+    return util.is_integer_object(o)
+
 def is_integer_array(ndarray values):
     cdef:
         Py_ssize_t i, n = len(values)
diff --git a/pandas/src/numpy_helper.h b/pandas/src/numpy_helper.h
index 11c220d96..83ae9b61b 100644
--- a/pandas/src/numpy_helper.h
+++ b/pandas/src/numpy_helper.h
@@ -72,19 +72,19 @@ get_value_1d(PyArrayObject* ap, Py_ssize_t i) {
   return PyArray_Scalar(item, PyArray_DESCR(ap), (PyObject*) ap);
 }
 
-PANDAS_INLINE PyObject*
-get_base_ndarray(PyObject* ap) {
-  // if (!ap || (NULL == ap)) {
-  //   Py_RETURN_NONE;
-  // }
+// PANDAS_INLINE PyObject*
+// get_base_ndarray(PyObject* ap) {
+//   // if (!ap || (NULL == ap)) {
+//   //   Py_RETURN_NONE;
+//   // }
 
-  while (!PyArray_CheckExact(ap)) {
-    ap = PyArray_BASE((PyArrayObject*) ap);
-    if (ap == Py_None) Py_RETURN_NONE;
-  }
-  // PyArray_BASE is a borrowed reference
-  if(ap) {
-    Py_INCREF(ap);
-  }
-  return ap;
-}
+//   while (!PyArray_CheckExact(ap)) {
+//     ap = PyArray_BASE((PyArrayObject*) ap);
+//     if (ap == Py_None) Py_RETURN_NONE;
+//   }
+//   // PyArray_BASE is a borrowed reference
+//   if(ap) {
+//     Py_INCREF(ap);
+//   }
+//   return ap;
+// }
diff --git a/pandas/src/properties.pyx b/pandas/src/properties.pyx
index 4268e9d07..30184979d 100644
--- a/pandas/src/properties.pyx
+++ b/pandas/src/properties.pyx
@@ -66,13 +66,8 @@ cdef class ValuesProperty(object):
             object base
 
         base = np.get_array_base(arr)
-        if base is None:
+        if base is None or not np.PyArray_CheckExact(base):
             arr = arr.view(np.ndarray)
         else:
             arr = base
-            while arr is not None and not np.PyArray_CheckExact(arr):
-                base = np.get_array_base(arr)
-                if base is None:
-                    break
-                arr = base
         return arr
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 987ab465d..017403215 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -405,6 +405,11 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         self.assertRaises(KeyError, s.__getitem__, 1)
         self.assertRaises(KeyError, s.ix.__getitem__, 1)
 
+    def test_setitem_ambiguous_keyerror(self):
+        s = Series(range(10), index=range(0, 20, 2))
+        self.assertRaises(KeyError, s.__setitem__, 1, 5)
+        self.assertRaises(KeyError, s.ix.__setitem__, 1, 5)
+
     def test_slice(self):
         numSlice = self.series[10:20]
         numSliceEnd = self.series[-10:]
