commit dbbf32eb3c2e6b24c3bbac8e844da25e91244e60
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Apr 27 13:42:14 2012 -0400

    ENH: frequency inference when adding delta to DatetimeIndex

diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index b35bd7e3d..1ff9b06a0 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -221,14 +221,6 @@ class TestIndex(unittest.TestCase):
         tm.assert_contains_all(self.strIndex, secondCat)
         tm.assert_contains_all(self.dateIndex, firstCat)
 
-    def test_timedelta(self):
-        # this is valid too
-        shifted = self.dateIndex + timedelta(1)
-        back = shifted + timedelta(-1)
-        self.assert_(tm.equalContents(self.dateIndex, back))
-        self.assertEqual(shifted.freq, self.dateIndex.freq)
-        self.assertEqual(shifted.freq, back.freq)
-
     def test_append_multiple(self):
         index = Index(['a', 'b', 'c', 'd', 'e', 'f'])
 
diff --git a/pandas/tseries/frequencies.py b/pandas/tseries/frequencies.py
index 51b5ad796..89fdc344d 100644
--- a/pandas/tseries/frequencies.py
+++ b/pandas/tseries/frequencies.py
@@ -1,7 +1,8 @@
 from datetime import datetime
-
 import re
 
+import numpy as np
+
 from pandas.tseries.offsets import DateOffset
 from pandas.util.decorators import cache_readonly
 import pandas.tseries.offsets as offsets
@@ -646,7 +647,7 @@ class _FrequencyInferer(object):
 
     def __init__(self, index, warn=True):
         self.index = index
-        self.values = index.asi8
+        self.values = np.asarray(index).view('i8')
         self.warn = warn
 
         if len(index) < 3:
@@ -655,9 +656,13 @@ class _FrequencyInferer(object):
         self.deltas = lib.unique_deltas(self.values)
         self.is_unique = len(self.deltas) == 1
 
+    def is_monotonic(self):
+        try:
+            return self.index.is_monotonic
+        except:
+            return lib.is_monotonic_int64(self.values)[0]
+
     def get_freq(self):
-        if not self.index.is_monotonic:
-            return None
 
         delta = self.deltas[0]
         if _is_multiple(delta, _day_us):
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index fb835343a..fac41f391 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -9,6 +9,7 @@ from pandas.tseries.offsets import DateOffset, generate_range, Tick
 from pandas.tseries.tools import parse_time_string, normalize_date
 from pandas.util.decorators import cache_readonly
 import pandas.core.common as com
+import pandas.tseries.offsets as offsets
 import pandas.tseries.tools as tools
 
 from pandas._engines import DatetimeEngine
@@ -169,8 +170,13 @@ class DatetimeIndex(Int64Index):
             freq = kwds['offset']
             warn = True
 
+        infer_freq = False
         if not isinstance(freq, DateOffset):
-            freq = to_offset(freq)
+            if freq != 'infer':
+                freq = to_offset(freq)
+            else:
+                infer_freq = True
+                freq = None
 
         if warn:
             import warnings
@@ -263,21 +269,23 @@ class DatetimeIndex(Int64Index):
         else:
             subarr = np.array(data, dtype='M8[us]', copy=copy)
 
-        # TODO: this is horribly inefficient. If user passes data + offset, we
-        # need to make sure data points conform. Punting on this
-
-        if verify_integrity:
-            if offset is not None:
-                for i, ts in enumerate(subarr):
-                    if not offset.onOffset(Timestamp(ts)):
-                        val = Timestamp(offset.rollforward(ts)).value
-                        subarr[i] = val
-
         subarr = subarr.view(cls)
         subarr.name = name
         subarr.offset = offset
         subarr.tz = tz
 
+        if verify_integrity:
+            if offset is not None and not infer_freq:
+                inferred = subarr.inferred_freq
+                if inferred != offset.freqstr:
+                    raise ValueError('Dates do not conform to passed '
+                                     'frequency')
+
+        if infer_freq:
+            inferred = subarr.inferred_freq
+            if inferred:
+                subarr.offset = to_offset(inferred)
+
         return subarr
 
     @classmethod
@@ -418,11 +426,18 @@ class DatetimeIndex(Int64Index):
         if isinstance(other, Index):
             return self.union(other)
         elif isinstance(other, (DateOffset, timedelta)):
-            new_values = self.astype('O') + other
-            return DatetimeIndex(new_values, tz=self.tz)
+            return self._add_delta(other)
         else:
             return Index(self.view(np.ndarray) + other)
 
+    def _add_delta(self, delta):
+        if isinstance(delta, (Tick, timedelta)):
+            inc = offsets._delta_to_microseconds(delta)
+            new_values = (self.asi8 + inc).view('M8[us]')
+        else:
+            new_values = self.astype('O') + delta
+        return DatetimeIndex(new_values, tz=self.tz, freq='infer')
+
     def summary(self, name=None):
         if len(self) > 0:
             index_summary = ', %s to %s' % (str(self[0]), str(self[-1]))
diff --git a/pandas/tseries/offsets.py b/pandas/tseries/offsets.py
index 36360f6f4..c1d915a04 100644
--- a/pandas/tseries/offsets.py
+++ b/pandas/tseries/offsets.py
@@ -996,6 +996,8 @@ def _delta_to_tick(delta):
             return Micro(mus)
 
 def _delta_to_microseconds(delta):
+    if isinstance(delta, Tick):
+        delta = delta.delta
     return (delta.days * 24 * 60 * 60 * 1000000
             + delta.seconds * 1000000
             + delta.microseconds)
diff --git a/pandas/tseries/period.py b/pandas/tseries/period.py
index 8dbc4ed15..e3222bbf5 100644
--- a/pandas/tseries/period.py
+++ b/pandas/tseries/period.py
@@ -615,9 +615,7 @@ class PeriodIndex(Int64Index):
         base, mult = _gfc(freq)
         new_data = self.asfreq(freq, how)
         new_data = lib.periodarr_to_dt64arr(new_data.values, base, mult)
-
-        ts_freq = _period_rule_to_timestamp_rule(self.freq, how=how)
-        return DatetimeIndex(new_data, freq=ts_freq)
+        return DatetimeIndex(new_data, freq='infer')
 
     def shift(self, n):
         """
diff --git a/pandas/tseries/tests/test_period.py b/pandas/tseries/tests/test_period.py
index 30baaee80..821870e2d 100644
--- a/pandas/tseries/tests/test_period.py
+++ b/pandas/tseries/tests/test_period.py
@@ -1115,13 +1115,11 @@ class TestPeriodIndex(TestCase):
         self.assert_(s['05Q4'] == s[2])
 
     def test_interval_dt64_round_trip(self):
-        dti = DatetimeIndex(['1/1/2002', '1/2/2002', '1/3/2002', '1/4/2002',
-                             '1/5/2002', '1/6/2002', '1/7/2002'], freq='B')
+        dti = date_range('1/1/2000', '1/7/2002', freq='B')
         ii = dti.to_period()
         self.assert_(ii.to_timestamp().equals(dti))
 
-        dti = DatetimeIndex(['1/1/2002', '1/2/2002', '1/3/2002', '1/4/2002',
-                             '1/5/2002', '1/6/2002', '1/7/2002'], freq='B')
+        dti = date_range('1/1/2000', '1/7/2002', freq='B')
         ii = dti.to_period(freq='3H')
         self.assert_(ii.to_timestamp().equals(dti))
 
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index 2451bbeed..6470bb793 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -143,6 +143,8 @@ class TestResample(unittest.TestCase):
                           index=idx + timedelta(minutes=1))
         assert_series_equal(result, expected)
 
+        self.assert_(result.index.freq == Minute(5))
+
                 # from daily
         dti = DatetimeIndex(start=datetime(2005,1,1), end=datetime(2005,1,10),
                             freq='D')
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 14e1553cf..206e93a94 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -714,6 +714,15 @@ class TestLegacySupport(unittest.TestCase):
         for val in rng:
             self.assert_(val.time() == the_time)
 
+    def test_timedelta(self):
+        # this is valid too
+        index = date_range('1/1/2000', periods=50, freq='B')
+        shifted = index + timedelta(1)
+        back = shifted + timedelta(-1)
+        self.assert_(tm.equalContents(index, back))
+        self.assertEqual(shifted.freq, index.freq)
+        self.assertEqual(shifted.freq, back.freq)
+
     def test_shift_multiple_of_same_base(self):
         # GH #1063
         ts = Series(np.random.randn(5),
@@ -1028,18 +1037,14 @@ class TestDatetime64(unittest.TestCase):
                              '1/5/2002', '1/6/2002', '1/7/2002'], freq='D')
 
         res = dti.snap(freq='W-MON')
-
-        exp = DatetimeIndex(['12/31/2001', '12/31/2001', '12/31/2001',
-                             '1/7/2002', '1/7/2002', '1/7/2002', '1/7/2002'],
-                             freq='W-MON')
-
+        exp = date_range('12/31/2001', '1/7/2002', freq='w-mon')
+        exp = exp.repeat([3, 4])
         self.assert_( (res == exp).all() )
 
         res = dti.snap(freq='B')
 
-        exp = DatetimeIndex(['1/1/2002', '1/2/2002', '1/3/2002', '1/4/2002',
-                             '1/4/2002', '1/7/2002', '1/7/2002'], freq='B')
-
+        exp = date_range('1/1/2002', '1/7/2002', freq='b')
+        exp = exp.repeat([1, 1, 1, 2, 2])
         self.assert_( (res == exp).all() )
 
     def test_dti_reset_index_round_trip(self):
diff --git a/vb_suite/timeseries.py b/vb_suite/timeseries.py
index 4a034f4e0..efabd0be3 100644
--- a/vb_suite/timeseries.py
+++ b/vb_suite/timeseries.py
@@ -2,12 +2,14 @@ from vbench.api import Benchmark
 from datetime import datetime
 
 common_setup = """from pandas_vb_common import *
+from datetime import timedelta
 N = 100000
 
 try:
     rng = date_range('1/1/2000', periods=N, freq='min')
 except NameError:
     rng = DateRange('1/1/2000', periods=N, offset=datetools.Minute())
+    date_range = DateRange
 
 ts = Series(np.random.randn(N), index=rng)
 """
@@ -53,4 +55,14 @@ ts = Series(np.random.randn(N), index=rng)
 """
 
 timeseries_sort_index = Benchmark('ts.sort_index()', setup,
-                                  start_date=datetime(2011, 11, 1))
+                                  start_date=datetime(2012, 4, 1))
+
+#----------------------------------------------------------------------
+# Shifting, add offset
+
+setup = common_setup + """
+rng = date_range('1/1/2000', periods=10000, freq='T')
+"""
+
+datetimeindex_add_offset = Benchmark('rng + timedelta(minutes=2)', setup,
+                                     start_date=datetime(2012, 4, 1))
