commit 3944a369265f27268d1b3867a161e97f9c63cd62
Author: Joris Van den Bossche <jorisvandenbossche@gmail.com>
Date:   Wed Jun 29 14:16:22 2016 +0200

    BUG: date_range closed keyword with timezone aware start/end (GH12684) (#13510)

diff --git a/doc/source/whatsnew/v0.18.1.txt b/doc/source/whatsnew/v0.18.1.txt
index ba14ac510..7f74d8a76 100644
--- a/doc/source/whatsnew/v0.18.1.txt
+++ b/doc/source/whatsnew/v0.18.1.txt
@@ -658,7 +658,7 @@ Bug Fixes
 - Bug in ``CategoricalIndex.get_loc`` returns different result from regular ``Index`` (:issue:`12531`)
 - Bug in ``PeriodIndex.resample`` where name not propagated (:issue:`12769`)
 
-
+- Bug in ``date_range`` ``closed`` keyword and timezones (:issue:`12684`).
 
 - Bug in ``pd.concat`` raises ``AttributeError`` when input data contains tz-aware datetime and timedelta (:issue:`12620`)
 - Bug in ``pd.concat`` did not handle empty ``Series`` properly (:issue:`11082`)
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index af60a2d02..77500081b 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -541,6 +541,13 @@ class DatetimeIndex(DatelikeOps, TimelikeOps, DatetimeIndexOpsMixin,
                                                  ambiguous=ambiguous)
                 index = index.view(_NS_DTYPE)
 
+                # index is localized datetime64 array -> have to convert
+                # start/end as well to compare
+                if start is not None:
+                    start = start.tz_localize(tz).asm8
+                if end is not None:
+                    end = end.tz_localize(tz).asm8
+
         if not left_closed and len(index) and index[0] == start:
             index = index[1:]
         if not right_closed and len(index) and index[-1] == end:
diff --git a/pandas/tseries/tests/test_daterange.py b/pandas/tseries/tests/test_daterange.py
index 6ad33b6b9..854b60c17 100644
--- a/pandas/tseries/tests/test_daterange.py
+++ b/pandas/tseries/tests/test_daterange.py
@@ -485,7 +485,7 @@ class TestDateRange(tm.TestCase):
         begin = datetime(2011, 1, 1)
         end = datetime(2014, 1, 1)
 
-        for freq in ["3D", "2M", "7W", "3H", "A"]:
+        for freq in ["1D", "3D", "2M", "7W", "3H", "A"]:
             closed = date_range(begin, end, closed=None, freq=freq)
             left = date_range(begin, end, closed="left", freq=freq)
             right = date_range(begin, end, closed="right", freq=freq)
@@ -501,11 +501,11 @@ class TestDateRange(tm.TestCase):
             self.assert_index_equal(expected_right, right)
 
     def test_range_closed_with_tz_aware_start_end(self):
-        # GH12409
+        # GH12409, GH12684
         begin = Timestamp('2011/1/1', tz='US/Eastern')
         end = Timestamp('2014/1/1', tz='US/Eastern')
 
-        for freq in ["3D", "2M", "7W", "3H", "A"]:
+        for freq in ["1D", "3D", "2M", "7W", "3H", "A"]:
             closed = date_range(begin, end, closed=None, freq=freq)
             left = date_range(begin, end, closed="left", freq=freq)
             right = date_range(begin, end, closed="right", freq=freq)
@@ -520,15 +520,28 @@ class TestDateRange(tm.TestCase):
             self.assert_index_equal(expected_left, left)
             self.assert_index_equal(expected_right, right)
 
-        # test with default frequency, UTC
-        begin = Timestamp('2011/1/1', tz='UTC')
-        end = Timestamp('2014/1/1', tz='UTC')
+        begin = Timestamp('2011/1/1')
+        end = Timestamp('2014/1/1')
+        begintz = Timestamp('2011/1/1', tz='US/Eastern')
+        endtz = Timestamp('2014/1/1', tz='US/Eastern')
+
+        for freq in ["1D", "3D", "2M", "7W", "3H", "A"]:
+            closed = date_range(begin, end, closed=None, freq=freq,
+                                tz='US/Eastern')
+            left = date_range(begin, end, closed="left", freq=freq,
+                              tz='US/Eastern')
+            right = date_range(begin, end, closed="right", freq=freq,
+                               tz='US/Eastern')
+            expected_left = left
+            expected_right = right
 
-        intervals = ['left', 'right', None]
-        for i in intervals:
-            result = date_range(start=begin, end=end, closed=i)
-            self.assertEqual(result[0], begin)
-            self.assertEqual(result[-1], end)
+            if endtz == closed[-1]:
+                expected_left = closed[:-1]
+            if begintz == closed[0]:
+                expected_right = closed[1:]
+
+            self.assert_index_equal(expected_left, left)
+            self.assert_index_equal(expected_right, right)
 
     def test_range_closed_boundary(self):
         # GH 11804
