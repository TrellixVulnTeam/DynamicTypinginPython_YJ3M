commit 02cea49fa69f9a8aea60c8287c89389f31d32919
Author: Matthias Kuhn <matthias.kuhn@gmx.ch>
Date:   Wed Mar 19 11:46:27 2014 +0100

    ENH: Add an 'escape' keyword to DataFrame.to_latex (GH6472)
    
         The new keyword prevents the conversion from escaping column names

diff --git a/doc/source/release.rst b/doc/source/release.rst
index 12dc1fec5..03b89f907 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -264,6 +264,7 @@ Improvements to existing features
 - :ref:`Holidays and holiday calendars<timeseries.holiday>` are now available and can be used with CustomBusinessDay (:issue:`6719`)
 - ``Float64Index`` is now backed by a ``float64`` dtype ndarray instead of an
   ``object`` dtype array (:issue:`6471`).
+- Add option to turn off escaping in ``DataFrame.to_latex`` (:issue:`6472`)
 
 .. _release.bug_fixes-0.14.0:
 
diff --git a/pandas/core/format.py b/pandas/core/format.py
index 117b686b0..6d0b0596d 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -422,6 +422,7 @@ class DataFrameFormatter(TableFormatter):
         """
         Render a DataFrame to a LaTeX tabular/longtable environment output.
         """
+        self.escape = self.kwds.get('escape', True)
         #TODO: column_format is not settable in df.to_latex
         def get_col_type(dtype):
             if issubclass(dtype.type, np.number):
@@ -471,16 +472,19 @@ class DataFrameFormatter(TableFormatter):
                         buf.write('\endfoot\n\n')
                         buf.write('\\bottomrule\n')
                         buf.write('\\endlastfoot\n')
-                crow = [(x.replace('\\', '\\textbackslash') # escape backslashes first
-                         .replace('_', '\\_')
-                         .replace('%', '\\%')
-                         .replace('$', '\\$')
-                         .replace('#', '\\#')
-                         .replace('{', '\\{')
-                         .replace('}', '\\}')
-                         .replace('~', '\\textasciitilde')
-                         .replace('^', '\\textasciicircum')
-                         .replace('&', '\\&') if x else '{}') for x in row]
+                if self.escape:
+                  crow = [(x.replace('\\', '\\textbackslash') # escape backslashes first
+                           .replace('_', '\\_')
+                           .replace('%', '\\%')
+                           .replace('$', '\\$')
+                           .replace('#', '\\#')
+                           .replace('{', '\\{')
+                           .replace('}', '\\}')
+                           .replace('~', '\\textasciitilde')
+                           .replace('^', '\\textasciicircum')
+                           .replace('&', '\\&') if x else '{}') for x in row]
+                else:
+                  crow = [x if x else '{}' for x in row]
                 buf.write(' & '.join(crow))
                 buf.write(' \\\\\n')
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 2f8c70024..7346fd522 100755
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1348,7 +1348,7 @@ class DataFrame(NDFrame):
     def to_latex(self, buf=None, columns=None, col_space=None, colSpace=None,
                  header=True, index=True, na_rep='NaN', formatters=None,
                  float_format=None, sparsify=None, index_names=True,
-                 bold_rows=True, longtable=False):
+                 bold_rows=True, longtable=False, escape=True):
         """
         Render a DataFrame to a tabular environment table. You can splice
         this into a LaTeX document. Requires \\usepackage(booktabs}.
@@ -1360,6 +1360,9 @@ class DataFrame(NDFrame):
         longtable : boolean, default False
             Use a longtable environment instead of tabular. Requires adding
             a \\usepackage{longtable} to your LaTeX preamble.
+        escape : boolean, default True
+            When set to False prevents from escaping latex special
+            characters in column names.
 
         """
 
@@ -1375,7 +1378,8 @@ class DataFrame(NDFrame):
                                            float_format=float_format,
                                            bold_rows=bold_rows,
                                            sparsify=sparsify,
-                                           index_names=index_names)
+                                           index_names=index_names,
+                                           escape=escape)
         formatter.to_latex(longtable=longtable)
 
         if buf is None:
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index 3ce65c815..aee1fad6c 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -1671,6 +1671,40 @@ c  10  11  12  13  14\
 """
         self.assertEqual(withoutindex_result, withoutindex_expected)
 
+    def test_to_latex_escape(self):
+        a = 'a'
+        b = 'b'
+
+        test_dict = {u('co^l1')  : {a: "a",
+                                    b: "b"},
+                     u('co$e^x$'): {a: "a",
+                                    b: "b"}}
+
+        unescaped_result = pd.DataFrame(test_dict).to_latex(escape=False)
+        escaped_result   = pd.DataFrame(test_dict).to_latex() # default: escape=True
+
+        unescaped_expected = r'''\begin{tabular}{lll}
+\toprule
+{} & co$e^x$ & co^l1 \\
+\midrule
+a &       a &     a \\
+b &       b &     b \\
+\bottomrule
+\end{tabular}
+'''
+
+        escaped_expected = r'''\begin{tabular}{lll}
+\toprule
+{} & co\$e\textasciicircumx\$ & co\textasciicircuml1 \\
+\midrule
+a &       a &     a \\
+b &       b &     b \\
+\bottomrule
+\end{tabular}
+'''
+        self.assertEqual(unescaped_result, unescaped_expected)
+        self.assertEqual(escaped_result, escaped_expected)
+
     def test_to_latex_longtable(self):
         self.frame.to_latex(longtable=True)
 
