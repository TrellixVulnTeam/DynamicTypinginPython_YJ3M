commit bd1eebb8dbc4bd173fb5c15ebf31f42fe90bec62
Author: gfyoung <gfyoung@mit.edu>
Date:   Tue Feb 23 19:05:21 2016 -0500

    MAINT: More informative TypeError for IndexEngine.get_loc
    
    Title is self-explanatory.  Closes #12218.
    
    Author: gfyoung <gfyoung@mit.edu>
    
    Closes #12414 from gfyoung/invalid_key_inform and squashes the following commits:
    
    5a66b7d [gfyoung] MAINT: More informative TypeError for IndexEngine.get_loc

diff --git a/pandas/index.pyx b/pandas/index.pyx
index a7e613ee8..dad2b26e1 100644
--- a/pandas/index.pyx
+++ b/pandas/index.pyx
@@ -136,7 +136,7 @@ cdef class IndexEngine:
 
     cpdef get_loc(self, object val):
         if is_definitely_invalid_key(val):
-            raise TypeError
+            raise TypeError("'{val}' is an invalid key".format(val=val))
 
         if self.over_size_threshold and self.is_monotonic_increasing:
             if not self.is_unique:
diff --git a/pandas/tests/frame/test_indexing.py b/pandas/tests/frame/test_indexing.py
index 7c5ec8f35..43509857c 100644
--- a/pandas/tests/frame/test_indexing.py
+++ b/pandas/tests/frame/test_indexing.py
@@ -2590,3 +2590,30 @@ class TestDataFrameIndexing(tm.TestCase, TestData):
         empty_df = DataFrame()
         assert_frame_equal(empty_df.tail(), empty_df)
         assert_frame_equal(empty_df.head(), empty_df)
+
+    def test_type_error_multiindex(self):
+        # See gh-12218
+        df = DataFrame(columns=['i', 'c', 'x', 'y'],
+                       data=[[0, 0, 1, 2], [1, 0, 3, 4],
+                             [0, 1, 1, 2], [1, 1, 3, 4]])
+        dg = df.pivot_table(index='i', columns='c',
+                            values=['x', 'y'])
+
+        with assertRaisesRegexp(TypeError, "is an invalid key"):
+            str(dg[:, 0])
+
+        index = Index(range(2), name='i')
+        columns = MultiIndex(levels=[['x', 'y'], [0, 1]],
+                             labels=[[0, 1], [0, 0]],
+                             names=[None, 'c'])
+        expected = DataFrame([[1, 2], [3, 4]], columns=columns, index=index)
+
+        result = dg.loc[:, (slice(None), 0)]
+        assert_frame_equal(result, expected)
+
+        name = ('x', 0)
+        index = Index(range(2), name='i')
+        expected = Series([1, 3], index=index, name=name)
+
+        result = dg['x', 0]
+        assert_series_equal(result, expected)
