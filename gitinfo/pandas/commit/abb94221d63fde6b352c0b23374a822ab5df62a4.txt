commit abb94221d63fde6b352c0b23374a822ab5df62a4
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jan 9 19:00:28 2012 -0500

    ENH: can pass multiple objects to Series.append, #599

diff --git a/pandas/core/series.py b/pandas/core/series.py
index 74549f13a..c8a370f0b 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1094,24 +1094,24 @@ copy : boolean, default False
 #-------------------------------------------------------------------------------
 # Combination
 
-    def append(self, other):
+    def append(self, to_append):
         """
-        Concatenate two Series. The indexes must not overlap
+        Concatenate two or more Series. The indexes must not overlap
 
         Parameters
         ----------
-        other : Series
+        to_append : Series or list/tuple of Series
 
         Returns
         -------
-        y : Series
+        appended : Series
         """
-        new_index = self.index.append(other.index)
-        assert(new_index._verify_integrity())
-
-        new_values = np.concatenate((self.values, other.values))
-        name = _maybe_match_name(self, other)
-        return self._constructor(new_values, index=new_index, name=name)
+        from pandas.tools.merge import concat
+        if isinstance(to_append, (list, tuple)):
+            to_concat = [self] + to_append
+        else:
+            to_concat = [self, to_append]
+        return concat(to_concat, ignore_index=False, verify_integrity=True)
 
     def _binop(self, other, func, level=None, fill_value=None):
         """
diff --git a/pandas/tools/merge.py b/pandas/tools/merge.py
index edbdfba24..d7745ac02 100644
--- a/pandas/tools/merge.py
+++ b/pandas/tools/merge.py
@@ -690,7 +690,8 @@ class _Concatenator(object):
     def get_result(self):
         if self._is_series:
             new_data = np.concatenate([x.values for x in self.objs])
-            return Series(new_data, index=self.new_axes[0])
+            name = _consensus_name_attr(self.objs)
+            return Series(new_data, index=self.new_axes[0], name=name)
         else:
             new_data = self._get_concatenated_data()
             return self.objs[0]._from_axes(new_data, self.new_axes)
@@ -927,7 +928,7 @@ def _make_concat_multiindex(indexes, keys, levels=None, names=None):
         if single_level:
             new_levels = [_ensure_index(keys)]
         else:
-            new_levels = [Factor(zp).level for zp in zipped]
+            new_levels = [Factor(zp).levels for zp in zipped]
     else:
         new_levels = [_ensure_index(x) for x in levels]
 
@@ -953,6 +954,13 @@ def _get_consensus_names(indexes):
             break
     return consensus_name
 
+def _consensus_name_attr(objs):
+    name = objs[0].name
+    for obj in objs[1:]:
+        if obj.name != name:
+            return None
+    return name
+
 def _all_indexes_same(indexes):
     first = indexes[0]
     for index in indexes[1:]:
diff --git a/pandas/tools/tests/test_merge.py b/pandas/tools/tests/test_merge.py
index 20857443a..aa176cba9 100644
--- a/pandas/tools/tests/test_merge.py
+++ b/pandas/tools/tests/test_merge.py
@@ -961,11 +961,13 @@ class TestConcatenate(unittest.TestCase):
 
     def test_concat_series(self):
         ts = tm.makeTimeSeries()
+        ts.name = 'foo'
 
         pieces = [ts[:5], ts[5:15], ts[15:]]
 
         result = concat(pieces)
         tm.assert_series_equal(result, ts)
+        self.assertEqual(result.name, ts.name)
 
         result = concat(pieces, keys=[0, 1, 2])
         expected = ts.copy()
