commit 50dede6cd400e83ebe877d07bfbb781282edfc43
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Mar 2 20:48:26 2010 +0000

    removed Series.fromDict and integrated with Series.__new__
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@135 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index f3202ec3e..ebc499423 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -212,8 +212,7 @@ class DataFrame(Picklable, Groupable):
 
     def toDict(self):
         """
-        Simpler pseudo-inverse operation of DataFrame.fromDict, NaN
-        values will be included in the resulting dict-tree.
+        Convert DataFrame to nested dictionary (non-pandas)
 
         Return
         ------
@@ -1058,7 +1057,7 @@ class DataFrame(Picklable, Groupable):
         if hasattr(results.values()[0], '__iter__'):
             return DataFrame(data=results, index=target.index)
         else:
-            return Series.fromDict(results)
+            return Series(results)
 
     def tapply(self, func):
         """
@@ -1109,6 +1108,8 @@ class DataFrame(Picklable, Groupable):
         elif regex:
             matcher = re.compile(regex)
             columns = [c for c in self.cols() if matcher.match(c)]
+        else:
+            raise Exception('items was None!')
 
         return self.reindex(columns=columns)
 
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 4ddb0e82e..c5bf50d67 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -180,7 +180,7 @@ class SeriesGroupBy(GroupBy):
                 for missingIdx in (self.obj.index - list(theUnion)):
                     result[missingIdx] = np.nan
 
-            retVal = Series.fromDict(result)
+            retVal = Series(result)
 
         return retVal
 
@@ -228,7 +228,7 @@ class SeriesGroupBy(GroupBy):
         for val, subseries in result.iteritems():
             allSeries.update(subseries.iteritems())
 
-        return Series.fromDict(allSeries)
+        return Series(allSeries)
 
 class DataFrameGroupBy(GroupBy):
     def __init__(self, obj, grouper):
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index ba82a50dd..7467455fc 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -1243,7 +1243,7 @@ class DataMatrix(DataFrame):
                                   columns=self.columns,
                                   objects=self.objects)
             else:
-                return Series.fromDict(results)
+                return Series(results)
         else:
             raise Exception('Should not reach here')
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index ba11abe3d..e124f0c64 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -108,8 +108,13 @@ class Series(np.ndarray, Picklable, Groupable):
         >>> s[d]    # Valid
     """
     def __new__(cls, data, index=None, dtype=None, copy=False):
-        if index is None and isinstance(data, Series):
-            index = data.index
+        if isinstance(data, Series):
+            if index is None:
+                index = data.index
+        elif isinstance(data, dict):
+            if index is None:
+                index = Index(sorted(data.keys()))
+            data = [data[idx] for idx in index]
 
         # Make a copy of the data, infer type
         subarr = np.array(data, dtype=dtype, copy=copy)
@@ -122,7 +127,6 @@ class Series(np.ndarray, Picklable, Groupable):
 
         # This is to prevent mixed-type Series getting all casted to
         # NumPy string type, e.g. NaN --> '-1#IND'.
-
         if issubclass(subarr.dtype.type, basestring):
             subarr = np.array(data, dtype=object, copy=copy)
 
@@ -165,34 +169,6 @@ class Series(np.ndarray, Picklable, Groupable):
         """
         self._index = getattr(obj, '_index', None)
 
-    @classmethod
-    def fromDict(cls, input, castFloat=True, **kwds):
-        """
-        Construct Series from dict
-
-        Parameters
-        ----------
-        input : dict object
-            Keys become indices of returned Series
-        kwds : optionally provide arguments as keywords
-
-        Returns
-        -------
-        y : Series
-        """
-        input = input.copy()
-        input.update(kwds)
-
-        index = Index(sorted(input.keys()))
-        if castFloat:
-            try:
-                useData = [float(input[idx]) for idx in index]
-            except Exception:
-                useData = [input[idx] for idx in index]
-        else:
-            useData = [input[idx] for idx in index]
-        return Series(useData, index=index)
-
     def toDict(self):
         return dict(self.iteritems())
 
@@ -997,7 +973,7 @@ class Series(np.ndarray, Picklable, Groupable):
         input Series
         """
         if isinstance(other, dict):
-            other = Series.fromDict(other)
+            other = Series(other)
 
         if not isinstance(other, Series): # pragma: no cover
             raise Exception('Argument must be a Series!')
diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index cfb2a03f5..e326cd6ae 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -406,7 +406,7 @@ class TestDataFrame(unittest.TestCase):
 
         larger_series = series.toDict()
         larger_series['E'] = 1
-        larger_series = Series.fromDict(larger_series)
+        larger_series = Series(larger_series)
         larger_added = self.frame + larger_series
 
         for key, s in self.frame.iteritems():
@@ -843,6 +843,9 @@ class TestDataFrame(unittest.TestCase):
         self.assertEqual(len(filtered.cols()), 2)
         self.assert_('AA' in filtered)
 
+        # pass in None
+        self.assertRaises(Exception, self.frame.filter, items=None)
+
     def test_sortUp(self):
         # what to do?
         sorted = self.frame.sortUp()
diff --git a/pandas/core/tests/test_series.py b/pandas/core/tests/test_series.py
index ca537c430..bcc820851 100644
--- a/pandas/core/tests/test_series.py
+++ b/pandas/core/tests/test_series.py
@@ -49,6 +49,24 @@ class TestSeries(unittest.TestCase):
 
         self.assertRaises(Exception, Series, [0, 1, 2], index=None)
 
+    def test_fromDict(self):
+        data = {'a' : 0, 'b' : 1, 'c' : 2, 'd' : 3}
+
+        series = Series(data)
+        self.assert_(common.is_sorted(series.index))
+
+        data = {'a' : 0, 'b' : '1', 'c' : '2', 'd' : datetime.now()}
+        series = Series(data)
+        self.assert_(series.dtype == np.object_)
+
+        data = {'a' : 0, 'b' : '1', 'c' : '2', 'd' : '3'}
+        series = Series(data)
+        self.assert_(series.dtype == np.object_)
+
+        data = {'a' : '0', 'b' : '1'}
+        series = Series(data, dtype=float)
+        self.assert_(series.dtype == np.float64)
+
     def test_setindex(self):
         # wrong type
         series = self.series.copy()
@@ -67,20 +85,6 @@ class TestSeries(unittest.TestCase):
     def test_array_finalize(self):
         pass
 
-    def test_fromDict(self):
-        data = {'a' : 0, 'b' : 1, 'c' : 2, 'd' : 3}
-
-        series = Series.fromDict(data)
-        self.assert_(common.is_sorted(series.index))
-
-        data = {'a' : 0, 'b' : '1', 'c' : '2', 'd' : datetime.now()}
-        series = Series.fromDict(data)
-        self.assert_(series.dtype == np.object_)
-
-        data = {'a' : 0, 'b' : '1', 'c' : '2', 'd' : '3'}
-        series = Series.fromDict(data, castFloat=False)
-        self.assert_(series.dtype == np.object_)
-
     def test_fromValue(self):
         nans = Series.fromValue(np.NaN, index=self.ts.index)
         self.assert_(nans.dtype == np.float_)
@@ -443,7 +447,7 @@ class TestSeries(unittest.TestCase):
         os.remove('_foo')
 
     def test_toDict(self):
-        self.assert_(np.array_equal(Series.fromDict(self.ts.toDict()), self.ts))
+        self.assert_(np.array_equal(Series(self.ts.toDict()), self.ts))
 
     def test_cap(self):
         val = self.ts.median()
