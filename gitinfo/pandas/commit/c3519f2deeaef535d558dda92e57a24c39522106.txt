commit c3519f2deeaef535d558dda92e57a24c39522106
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Feb 18 20:33:23 2010 +0000

    more unit test coverage
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@126 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/datetools.py b/pandas/core/datetools.py
index 65133bd89..1acd63f17 100644
--- a/pandas/core/datetools.py
+++ b/pandas/core/datetools.py
@@ -17,11 +17,13 @@ OLE_TIME_ZERO = datetime(1899, 12, 30, 0, 0, 0)
 
 def ole2datetime(oledt):
     """function for converting excel date to normal date format"""
+    val = float(oledt)
+
     # Excel has a bug where it thinks the date 2/29/1900 exists
     # we just reject any date before 3/1/1900.
-    val = float(oledt)
     if val < 61:
         raise Exception("Value is outside of acceptable range: %s " % val)
+
     return OLE_TIME_ZERO + timedelta(days=val)
 
 def to_datetime(arg):
@@ -165,9 +167,6 @@ class DateOffset(object):
     def __neg__(self):
         return self.__class__(-self.n, **self.kwds)
 
-    def __contains__(self, other):
-        return self.onOffset(other)
-
     def rollback(self, someDate):
         """Roll provided date backward to next offset only if not on offset"""
         if self._normalizeFirst:
@@ -212,7 +211,7 @@ class BDay(DateOffset):
         attrs = []
 
         if self.offset:
-            attrs = ['offset=%s' % self.offset]
+            attrs = ['offset=%s' % repr(self.offset)]
 
         if abs(self.n) != 1:
             plural = 's'
diff --git a/pandas/core/tests/test_datetools.py b/pandas/core/tests/test_datetools.py
index 7b78c4f81..157a52f35 100644
--- a/pandas/core/tests/test_datetools.py
+++ b/pandas/core/tests/test_datetools.py
@@ -8,6 +8,7 @@ from pandas.core.datetools import (
 from pandas.core.daterange import XDateRange, DateRange
 import pandas.core.datetools as datetools
 
+
 ####
 ## Misc function tests
 ####
@@ -19,6 +20,13 @@ def test_ole2datetime():
     actual = datetools.ole2datetime(60000)
     assert actual == datetime(2064, 4, 8)
 
+    try:
+        datetools.ole2datetime(60)
+    except Exception:
+        pass
+    else:
+        raise Exception('should have raised an exception')
+
 def test_to_datetime1():
     actual = datetools.to_datetime(datetime(2008, 1, 15))
     assert actual == datetime(2008, 1, 15)
@@ -84,6 +92,9 @@ class TestBusinessDay(unittest.TestCase):
         assert repr(self.offset) == '<1 BusinessDay>'
         assert repr(self.offset2) == '<2 BusinessDays>'
 
+        expected = '<1 BusinessDay: offset=datetime.timedelta(1)>'
+        assert repr(self.offset + timedelta(1)) == expected
+
     def test_with_offset(self):
         offset = self.offset + timedelta(hours=2)
 
@@ -137,7 +148,7 @@ class TestBusinessDay(unittest.TestCase):
         for offset, date, expected in tests:
             assertOnOffset(offset, date, expected)
 
-    def test_offset(self):
+    def test_apply(self):
         tests = []
 
         tests.append((bday,
@@ -182,7 +193,8 @@ class TestBusinessDay(unittest.TestCase):
             for baseDate, expected in cases.iteritems():
                 assertEq(dateOffset, baseDate, expected)
 
-
+    def test_apply_corner(self):
+        self.assertRaises(Exception, BDay().apply, BMonthEnd())
 
 def assertOnOffset(offset, date, expected):
     actual = offset.onOffset(date)
diff --git a/pandas/core/tests/test_panel.py b/pandas/core/tests/test_panel.py
index 8be5ef5ac..41a34fd09 100644
--- a/pandas/core/tests/test_panel.py
+++ b/pandas/core/tests/test_panel.py
@@ -162,15 +162,15 @@ class TestWidePanel(unittest.TestCase, PanelTests):
         assert(self.panel._get_axis(1) is self.panel.major_axis)
         assert(self.panel._get_axis(2) is self.panel.minor_axis)
 
-    def test_wide_axis_number(self):
-        assert(self.panel._wide_axis_number('items'), 0)
-        assert(self.panel._wide_axis_number('major'), 1)
-        assert(self.panel._wide_axis_number('minor'), 2)
-
-    def test_wide_axis_name(self):
-        assert(self.panel._wide_axis_name(0), 'items')
-        assert(self.panel._wide_axis_name(1), 'major')
-        assert(self.panel._wide_axis_name(2), 'minor')
+    def test_get_axis_number(self):
+        assert(self.panel._get_axis_number('items'), 0)
+        assert(self.panel._get_axis_number('major'), 1)
+        assert(self.panel._get_axis_number('minor'), 2)
+
+    def test_get_axis_name(self):
+        assert(self.panel._get_axis_name(0), 'items')
+        assert(self.panel._get_axis_name(1), 'major')
+        assert(self.panel._get_axis_name(2), 'minor')
 
     def test_get_plane_axes(self):
         # what to do here?
diff --git a/pandas/core/tests/test_series.py b/pandas/core/tests/test_series.py
index f39f9e43f..ca537c430 100644
--- a/pandas/core/tests/test_series.py
+++ b/pandas/core/tests/test_series.py
@@ -10,7 +10,8 @@ import unittest
 
 import numpy as np
 
-from pandas.core.api import (Index, Series, TimeSeries, DataFrame, isnull)
+from pandas.core.api import (Index, Series, TimeSeries, DataFrame)
+from pandas.core.tests.common import assert_series_equal
 import pandas.core.datetools as datetools
 import pandas.core.tests.common as common
 
@@ -23,6 +24,8 @@ class TestSeries(unittest.TestCase):
         self.series = common.makeStringSeries()
         self.objSeries = common.makeObjectSeries()
 
+        self.empty = Series([], index=[])
+
     def test_constructor(self):
         # Recognize TimeSeries
         self.assert_(isinstance(self.ts, TimeSeries))
@@ -131,6 +134,10 @@ class TestSeries(unittest.TestCase):
         self.assert_(self.series.get(-1) is None)
         self.assertEqual(self.series[5], self.series.get(self.series.index[5]))
 
+        # missing
+        d = self.ts.index[0] - datetools.bday
+        self.assertRaises(Exception, self.ts.__getitem__, d),
+
     def test_fancy(self):
         slice1 = self.series[[1,2,3]]
         slice2 = self.objSeries[[1,2,3]]
@@ -184,6 +191,13 @@ class TestSeries(unittest.TestCase):
 
         str(Series(common.randn(1000), index=np.arange(1000)))
 
+        # empty
+        str(self.empty)
+
+        # with NaNs
+        self.series[5:7] = np.NaN
+        str(self.series)
+
     def test_iter(self):
         for i, val in enumerate(self.series):
             self.assertEqual(val, self.series[i])
@@ -344,7 +358,7 @@ class TestSeries(unittest.TestCase):
         # corner case
         s = Series([1., 2, 3], index=[0, 1, 2])
         result = s.combineFirst(Series([], index=[]))
-        common.assert_series_equal(s, result)
+        assert_series_equal(s, result)
 
     def test_overloads(self):
         methods = ['argsort', 'cumsum', 'cumprod']
@@ -460,19 +474,19 @@ class TestSeries(unittest.TestCase):
         shifted = self.ts.shift(1, offset=offset)
         unshifted = shifted.shift(-1, offset=offset)
 
-        common.assert_series_equal(unshifted, self.ts)
+        assert_series_equal(unshifted, self.ts)
 
         unshifted = self.ts.shift(0, offset=offset)
-        common.assert_series_equal(unshifted, self.ts)
+        assert_series_equal(unshifted, self.ts)
 
         shifted = self.ts.shift(1, timeRule='WEEKDAY')
         unshifted = shifted.shift(-1, timeRule='WEEKDAY')
 
-        common.assert_series_equal(unshifted, self.ts)
+        assert_series_equal(unshifted, self.ts)
 
         # corner case
         unshifted = self.ts.shift(0)
-        common.assert_series_equal(unshifted, self.ts)
+        assert_series_equal(unshifted, self.ts)
 
     def test_truncate(self):
         offset = datetools.bday
@@ -484,34 +498,45 @@ class TestSeries(unittest.TestCase):
 
         # neither specified
         truncated = ts.truncate()
-        common.assert_series_equal(truncated, ts)
+        assert_series_equal(truncated, ts)
 
         # both specified
         expected = ts[1:3]
 
         truncated = ts.truncate(start, end)
-        common.assert_series_equal(truncated, expected)
+        assert_series_equal(truncated, expected)
 
         truncated = ts.truncate(start_missing, end_missing)
-        common.assert_series_equal(truncated, expected)
+        assert_series_equal(truncated, expected)
 
         # start specified
         expected = ts[1:]
 
         truncated = ts.truncate(before=start)
-        common.assert_series_equal(truncated, expected)
+        assert_series_equal(truncated, expected)
 
         truncated = ts.truncate(before=start_missing)
-        common.assert_series_equal(truncated, expected)
+        assert_series_equal(truncated, expected)
 
         # end specified
         expected = ts[:3]
 
         truncated = ts.truncate(after=end)
-        common.assert_series_equal(truncated, expected)
+        assert_series_equal(truncated, expected)
 
         truncated = ts.truncate(after=end_missing)
-        common.assert_series_equal(truncated, expected)
+        assert_series_equal(truncated, expected)
+
+        # corner case, empty series returned
+        truncated = ts.truncate(after=self.ts.index[0] - offset)
+        assert(len(truncated) == 0)
+
+        truncated = ts.truncate(before=self.ts.index[-1] + offset)
+        assert(len(truncated) == 0)
+
+        truncated = ts.truncate(before=self.ts.index[-1] + offset,
+                                after=self.ts.index[0] - offset)
+        assert(len(truncated) == 0)
 
     def test_asOf(self):
         self.ts[5:10] = np.NaN
@@ -530,6 +555,10 @@ class TestSeries(unittest.TestCase):
         # in there
         self.assertEqual(self.ts.asOf(self.ts.index[3]), self.ts[3])
 
+        # no as of value
+        d = self.ts.index[0] - datetools.bday
+        self.assert_(np.isnan(self.ts.asOf(d)))
+
     def test_merge(self):
         index, data = common.getMixedTypeDict()
 
@@ -550,15 +579,20 @@ class TestSeries(unittest.TestCase):
     def test_reindex(self):
         identity = self.series.reindex(self.series.index)
         self.assertEqual(id(self.series.index), id(identity.index))
+
         subIndex = self.series.index[10:20]
         subSeries = self.series.reindex(subIndex)
+
         for idx, val in subSeries.iteritems():
             self.assertEqual(val, self.series[idx])
+
         subIndex2 = self.ts.index[10:20]
         subTS = self.ts.reindex(subIndex2)
+
         for idx, val in subTS.iteritems():
             self.assertEqual(val, self.ts[idx])
         crapSeries = self.ts.reindex(subIndex)
+
         self.assert_(np.isnan(crapSeries).all())
 
         # This is extremely important for the Cython code to not screw up
@@ -572,8 +606,11 @@ class TestSeries(unittest.TestCase):
         self.assertRaises(Exception, ts.reindex, self.ts.index, fillMethod='foo')
 
         # corner case: pad empty series
-        s = Series([], index=[])
-        reindexed = s.reindex(self.ts.index, fillMethod='pad')
+        reindexed = self.empty.reindex(self.ts.index, fillMethod='pad')
+
+        # pass non-Index
+        reindexed = self.ts.reindex(list(self.ts.index))
+        assert_series_equal(self.ts, reindexed)
 
     def test_reindex_bool(self):
 
@@ -657,6 +694,9 @@ class TestSeries(unittest.TestCase):
         time_interp = ord_ts_copy.interpolate(method='time')
         self.assert_(np.array_equal(time_interp, ord_ts))
 
+        # try time interpolation on a non-TimeSeries
+        self.assertRaises(Exception, self.series.interpolate, method='time')
+
     def test_weekday(self):
         # Just run the function
         weekdays = self.ts.weekday
