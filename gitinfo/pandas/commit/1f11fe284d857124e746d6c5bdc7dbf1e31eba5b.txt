commit 1f11fe284d857124e746d6c5bdc7dbf1e31eba5b
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Sep 10 14:01:41 2011 -0400

    DOC: sparse docs. getting closer to release

diff --git a/RELEASE.rst b/RELEASE.rst
index 22e98188e..343dd9e8e 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -106,6 +106,8 @@ Release notes
     to `sort_index`. Leaving `DataFrame.sort` for now.
   - Added ``skipna`` option to statistical instance methods on all the data
     structures
+  - `pandas.io.data` module providing a consistent interface for reading time
+    series data from several different sources
 
 **Improvements to existing features**
 
@@ -272,7 +274,9 @@ Thanks
   - Tim McNamara
   - Justin Berka
   - Dieter Vandenbussche
-
+  - Shane Conway
+  - Skipper Seabold
+  - Chris Jordan-Squire
 
 ========================
 pandas 0.3 Release Notes
diff --git a/doc/source/api.rst b/doc/source/api.rst
index 16c6951b6..d9c8790d6 100644
--- a/doc/source/api.rst
+++ b/doc/source/api.rst
@@ -261,6 +261,8 @@ Reindexing / Selection / Label manipulation
 .. autosummary::
    :toctree: generated/
 
+   DataFrame.add_prefix
+   DataFrame.add_suffix
    DataFrame.drop
    DataFrame.filter
    DataFrame.reindex
diff --git a/doc/source/install.rst b/doc/source/install.rst
index 91a2bedd5..0b9d7679c 100644
--- a/doc/source/install.rst
+++ b/doc/source/install.rst
@@ -18,7 +18,9 @@ Python version support
 
 Officially Python 2.5 to 2.7. I will aim for Python 3.x support in the next
 release. Python 2.4 support is being phased out since the userbase has shrunk
-significantly.
+significantly. Continuing Python 2.4 support will require either monetary
+development support or someone contributing to the project to maintain
+compatibility.
 
 
 Binary installers
diff --git a/doc/source/r_interface.rst b/doc/source/r_interface.rst
index a91aca3f3..c2e547016 100644
--- a/doc/source/r_interface.rst
+++ b/doc/source/r_interface.rst
@@ -6,12 +6,17 @@
 rpy2 / R interface
 ******************
 
-If your computer has R and rpy2 (> 2.2) installed (which will be left
-to the reader), you will be able to leverage the below
-functionality. On Windows, doing this is quite an ordeal at the
-moment, but users on Unix-like systems should find it quite easy. As a
-general rule, I would recommend using the latest revision of rpy2 from
-bitbucket:
+.. note::
+
+   This is all highly experimental. I would like to get more people involved
+   with building a nice RPy2 interface for pandas
+
+
+If your computer has R and rpy2 (> 2.2) installed (which will be left to the
+reader), you will be able to leverage the below functionality. On Windows,
+doing this is quite an ordeal at the moment, but users on Unix-like systems
+should find it quite easy. As a general rule, I would recommend using the
+latest revision of rpy2 from bitbucket:
 
 ::
 
@@ -29,21 +34,27 @@ bitbucket:
     them inside R yourself. At the moment it cannot install them for
     you.
 
-Once you have done installed R and rpy2, you should be able to
-import :mod:`pandas.rpy` without a hitch.
+Once you have done installed R and rpy2, you should be able to import
+``pandas.rpy.common`` without a hitch.
 
-Calling R functions with pandas objects
----------------------------------------
+Transferring R data sets into Python
+------------------------------------
 
+The **load_data** function retrieves an R data set and converts it to the
+appropriate pandas object (most likely a DataFrame):
 
 
-Transferring R data sets into Python
-------------------------------------
+.. ipython:: python
 
-The **load_data** function retrieves an R data set and converts
-it to the appropriate pandas object (most likely a DataFrame):
+   import pandas.rpy.common as com
+   infert = com.load_data('infert')
+
+   infert.head()
+
+Calling R functions with pandas objects
+---------------------------------------
 
 
 
 High-level interface to R estimators
-------------------------------------
\ No newline at end of file
+------------------------------------
diff --git a/doc/source/related.rst b/doc/source/related.rst
index dade0d610..ff83102cd 100644
--- a/doc/source/related.rst
+++ b/doc/source/related.rst
@@ -5,16 +5,43 @@ Related Python libraries
 la (larry)
 ----------
 
+Keith Goodman's excellent `labeled array package
+<http://pypi.python.org/pypi/la>`__ is very similar to pandas in many regards,
+though with some key differences. The main philosophical design difference is
+to be a wrapper around a single NumPy ``ndarray`` object while adding axis
+labeling and label-based operations and indexing. Because of this, creating a
+size-mutable object with heterogeneous columns (e.g. DataFrame) is not possible
+with the ``la`` package.
+
+  - Provide a single n-dimensional object with labeled axes with functionally
+    analogous data alignment semantics to pandas objects
+  - Advanced / label-based indexing similar to that provided in pandas but
+    setting is not supported
+  - Stays much closer to NumPy arrays than pandas-- ``larry`` objects must be
+    homogeneously typed
+  - GroupBy support is relatively limited, but a few functions are available:
+    ``group_mean``, ``group_median``, and ``group_ranking``
+  - It has a collection of analytical functions suited to quantitative
+    portfolio construction for financial applications
+  - It has a collection of moving window statistics implemented in
+    `Bottleneck <http://pypi.python.org/pypi/Bottleneck>`__
+
 scikits.statsmodels
 -------------------
 
+The main `statistics and econometrics library
+<http://statsmodels.sourceforge.net>`__ for Python. pandas has become a
+dependency of this library.
+
 scikits.timeseries
 ------------------
 
-:mod:`scikits.timeseries` provides a data structure for fixed
-frequency time series data based on the numpy.MaskedArray class. For
-time series data, it provides much of the same functionality to the
-pandas Series class. It has many more functions for time
-series-specific manipulation.
+`scikits.timeseries <http://pytseries.sourceforge.net/>`__ provides a data
+structure for fixed frequency time series data based on the numpy.MaskedArray
+class. For time series data, it provides some of the same functionality to the
+pandas Series class. It has many more functions for time series-specific
+manipulation. Also, it has support for many more frequencies, though less
+customizable by the user (so 5-minutely data is easier to do with pandas for
+example).
 
-In designing
\ No newline at end of file
+We are aiming to merge these libraries together in the near future.
diff --git a/doc/source/sparse.rst b/doc/source/sparse.rst
index 5161e293e..ccb99e597 100644
--- a/doc/source/sparse.rst
+++ b/doc/source/sparse.rst
@@ -1,6 +1,67 @@
 .. currentmodule:: pandas
-.. _spares:
+.. _sparse:
+
+.. ipython:: python
+   :suppress:
+
+   import numpy as np
+   np.random.seed(123456)
+   from pandas import *
+   import pandas.util.testing as tm
+   randn = np.random.randn
+   np.set_printoptions(precision=4, suppress=True)
+   import matplotlib.pyplot as plt
+   plt.close('all')
 
 **********************
 Sparse data structures
 **********************
+
+We have implemented "sparse" versions of Series, DataFrame, and Panel. These
+are not sparse in the typical "mostly 0". You can view these objects as being
+"compressed" where any data matching a specific value (NaN/missing by default,
+though any value can be chosen) is omitted. A special ``SparseIndex`` object
+tracks where data has been "sparsified". This will make much more sense in an
+example. All of the standard pandas data structures have a ``to_sparse``
+method:
+
+.. ipython:: python
+
+   ts = Series(randn(10))
+   ts[2:-2] = np.nan
+   sts = ts.to_sparse()
+   sts
+
+The ``to_sparse`` method takes a ``kind`` argument (for the sparse index, see
+below) and a ``fill_value``. So if we had a mostly zero Series, we could
+convert it to sparse with ``fill_value=0``:
+
+.. ipython:: python
+
+   ts.fillna(0).to_sparse(fill_value=0)
+
+The sparse objects exist for memory efficiency reasons. Suppose you had a
+large, mostly NA DataFrame:
+
+.. ipython:: python
+
+   df = DataFrame(randn(10000, 4))
+   df.ix[:9998] = np.nan
+   sdf = df.to_sparse()
+   sdf
+   sdf.density
+
+As you can see, the density (% of values that have not been "compressed") is
+extremely low. This sparse object takes up much less memory on disk (pickled)
+and in the Python interpreter. Functionally, their behavior should be nearly
+identical to their dense counterparts. If not, you should report any
+inconsistencies as bugs on GitHub.
+
+Kinds of ``SparseIndex`` objects
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Two kinds of ``SparseIndex`` are implemented, ``block`` and ``integer``. We
+recommend using ``block`` as it's more memory efficient. The ``integer`` format
+keeps an arrays of all of the locations where the data are not equal to the
+fill value. The ``block`` format tracks only the locations and sizes of blocks
+of data.
diff --git a/doc/source/stats.rst b/doc/source/stats.rst
index 3b82c19c4..037bd9734 100755
--- a/doc/source/stats.rst
+++ b/doc/source/stats.rst
@@ -269,7 +269,12 @@ significant. Note the correlation after winsorization remains high:
 
    winz.corrwith(rets)
 
-Multiple regressions can be run by passing a DataFrame for
+Multiple regressions can be run by passing a DataFrame with multiple columns
+for the predictors ``x``:
+
+.. ipython:: python
+
+   ols(y=winz['AAPL'], x=winz.drop(['AAPL'], axis=1))
 
 Panel regression
 ~~~~~~~~~~~~~~~~
diff --git a/pandas/core/api.py b/pandas/core/api.py
index 8f0223250..b2c453e6e 100644
--- a/pandas/core/api.py
+++ b/pandas/core/api.py
@@ -13,6 +13,7 @@ from pandas.core.frame import DataFrame
 from pandas.core.panel import Panel, LongPanel
 from pandas.core.groupby import groupby
 from pandas.core.reshape import pivot_simple as pivot
+from pandas.core.sparse import SparseSeries, SparseDataFrame, SparsePanel
 
 DataMatrix = DataFrame
 WidePanel = Panel
