commit c0276e8eccfae360d299f9e116fedd91701aa709
Author: Adam Klein <adamklein@gmail.com>
Date:   Tue Jan 24 09:43:36 2012 -0500

    TST: added test coverage to unboxed arithmetic with dataframe

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 955f5efc5..ca4ff02d4 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -173,9 +173,26 @@ def _arith_method(func, name, default_axis='columns'):
             return self._combine_frame(other, func, fill_value, level)
         elif isinstance(other, Series):
             return self._combine_series(other, func, fill_value, axis, level)
-        elif isinstance(other, (list, tuple, np.ndarray)):
-            casted = Series(other, index=self.index)
+        elif isinstance(other, (list, tuple)):
+            if axis is not None and self._get_axis_name(axis) == 'index':
+                casted = Series(other, index=self.index)
+            else:
+                casted = Series(other, index=self.columns)
             return self._combine_series(casted, func, fill_value, axis, level)
+        elif isinstance(other, np.ndarray):
+            if len(other.shape) == 1:
+                if axis is not None and self._get_axis_name(axis) == 'index':
+                    casted = Series(other, index=self.index)
+                else:
+                    casted = Series(other, index=self.columns)
+                return self._combine_series(casted, func, fill_value,
+                                            axis, level)
+            elif len(other.shape) == 2:
+                casted = DataFrame(other, index=self.index,
+                                   columns=self.columns)
+                return self._combine_frame(casted, func, fill_value, level)
+            else:
+                raise ValueError("Bad argument shape") # pragma: no cover
         else:
             return self._combine_const(other, func)
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 98f4e033f..558d99c69 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2148,6 +2148,31 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         assert_frame_equal(df.div(col, axis=0), (df.T / col).T)
         assert_frame_equal(df.mul(col, axis=0), (df.T * col).T)
 
+    def test_arith_non_pandas_object(self):
+        df = self.simple
+
+        val1 = df.xs('a').values
+        added = DataFrame(df.values + val1, index=df.index, columns=df.columns)
+        assert_frame_equal(df + val1, added)
+
+        added = DataFrame((df.values.T + val1).T,
+                          index=df.index, columns=df.columns)
+        assert_frame_equal(df.add(val1, axis=0), added)
+
+
+        val2 = list(df['two'])
+
+        added = DataFrame(df.values + val2, index=df.index, columns=df.columns)
+        assert_frame_equal(df + val2, added)
+
+        added = DataFrame((df.values.T + val2).T, index=df.index,
+                          columns=df.columns)
+        assert_frame_equal(df.add(val2, axis='index'), added)
+
+        val3 = np.random.rand(*df.shape)
+        added = DataFrame(df.values + val3, index=df.index, columns=df.columns)
+        assert_frame_equal(df.add(val3), added)
+
     def test_combineFrame(self):
         frame_copy = self.frame.reindex(self.frame.index[::2])
 
