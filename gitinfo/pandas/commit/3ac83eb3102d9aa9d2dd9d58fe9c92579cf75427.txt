commit 3ac83eb3102d9aa9d2dd9d58fe9c92579cf75427
Author: Giacomo Ferroni <giaferroni@gmail.com>
Date:   Tue Jan 24 12:54:54 2017 -0500

    BUG: Fix bug in window function count should count anything non-null
    
    closes #12541
    
    Author: Giacomo Ferroni <giaferroni@gmail.com>
    Author: Giacomo <mralgos@users.noreply.github.com>
    
    Closes #15196 from mralgos/gh12541 and squashes the following commits:
    
    65d70eb [Giacomo Ferroni] Added Periods to the test
    94084b4 [Giacomo] Merge branch 'master' into gh12541
    9621315 [Giacomo Ferroni] Added extra test and updated whatsnew
    cb84935 [Giacomo Ferroni] pylint checks
    26c86a5 [Giacomo Ferroni] Test added for GH12541
    ea49e77 [Giacomo Ferroni] Fix for GH12541

diff --git a/doc/source/whatsnew/v0.20.0.txt b/doc/source/whatsnew/v0.20.0.txt
index c738d8d9c..49e0f4cb0 100644
--- a/doc/source/whatsnew/v0.20.0.txt
+++ b/doc/source/whatsnew/v0.20.0.txt
@@ -432,6 +432,7 @@ Bug Fixes
 - Bug in ``pd.pivot_table()`` where no error was raised when values argument was not in the columns (:issue:`14938`)
 
 - Bug in ``.to_json()`` where ``lines=True`` and contents (keys or values) contain escaped characters (:issue:`15096`)
+- Bug in ``.rolling/expanding()`` functions where ``count()`` was not counting ``np.Inf``, nor handling ``object`` dtypes (:issue:`12541`)
 
 - Bug in ``DataFrame.groupby().describe()`` when grouping on ``Index`` containing tuples (:issue:`14848`)
 - Bug in creating a ``MultiIndex`` with tuples and not passing a list of names; this will now raise ``ValueError`` (:issue:`15110`)
diff --git a/pandas/core/window.py b/pandas/core/window.py
index b330a1211..bda134dd8 100644
--- a/pandas/core/window.py
+++ b/pandas/core/window.py
@@ -762,17 +762,7 @@ class _Rolling_and_Expanding(_Rolling):
 
         results = []
         for b in blocks:
-
-            if needs_i8_conversion(b.values):
-                result = b.notnull().astype(int)
-            else:
-                try:
-                    result = np.isfinite(b).astype(float)
-                except TypeError:
-                    result = np.isfinite(b.astype(float)).astype(float)
-
-                result[pd.isnull(result)] = 0
-
+            result = b.notnull().astype(int)
             result = self._constructor(result, window=window, min_periods=0,
                                        center=self.center).sum()
             results.append(result)
diff --git a/pandas/tests/test_window.py b/pandas/tests/test_window.py
index 1afd5dad4..c05316ae3 100644
--- a/pandas/tests/test_window.py
+++ b/pandas/tests/test_window.py
@@ -207,6 +207,49 @@ class TestApi(Base):
             'A', 'ra', 'std'), ('B', 'rb', 'mean'), ('B', 'rb', 'std')])
         tm.assert_frame_equal(result, expected, check_like=True)
 
+    def test_count_nonnumeric_types(self):
+        # GH12541
+        cols = ['int', 'float', 'string', 'datetime', 'timedelta', 'periods',
+                'fl_inf', 'fl_nan', 'str_nan', 'dt_nat', 'periods_nat']
+
+        df = DataFrame(
+            {'int': [1, 2, 3],
+             'float': [4., 5., 6.],
+             'string': list('abc'),
+             'datetime': pd.date_range('20170101', periods=3),
+             'timedelta': pd.timedelta_range('1 s', periods=3, freq='s'),
+             'periods': [pd.Period('2012-01'), pd.Period('2012-02'),
+                         pd.Period('2012-03')],
+             'fl_inf': [1., 2., np.Inf],
+             'fl_nan': [1., 2., np.NaN],
+             'str_nan': ['aa', 'bb', np.NaN],
+             'dt_nat': [pd.Timestamp('20170101'), pd.Timestamp('20170203'),
+                        pd.Timestamp(None)],
+             'periods_nat': [pd.Period('2012-01'), pd.Period('2012-02'),
+                         pd.Period(None)]},
+            columns=cols)
+
+        expected = DataFrame(
+            {'int': [1., 2., 2.],
+             'float': [1., 2., 2.],
+             'string': [1., 2., 2.],
+             'datetime': [1., 2., 2.],
+             'timedelta': [1., 2., 2.],
+             'periods': [1., 2., 2.],
+             'fl_inf': [1., 2., 2.],
+             'fl_nan': [1., 2., 1.],
+             'str_nan': [1., 2., 1.],
+             'dt_nat': [1., 2., 1.],
+             'periods_nat': [1., 2., 1.]},
+            columns=cols)
+
+        result = df.rolling(window=2).count()
+        tm.assert_frame_equal(result, expected)
+
+        result = df.rolling(1).count()
+        expected = df.notnull().astype(float)
+        tm.assert_frame_equal(result, expected)
+
     def test_window_with_args(self):
         tm._skip_if_no_scipy()
 
