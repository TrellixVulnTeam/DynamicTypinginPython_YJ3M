commit 744daa7278cf34bfcbf5a40e4f9153342370e0bc
Author: jreback <jeff@reback.net>
Date:   Fri Sep 19 13:59:38 2014 -0400

    DOC: v0.15.0.txt corrections

diff --git a/doc/source/io.rst b/doc/source/io.rst
index 46a68e53c..4afd95b20 100644
--- a/doc/source/io.rst
+++ b/doc/source/io.rst
@@ -405,7 +405,7 @@ result in byte strings being decoded to unicode in the result:
 
 Some formats which encode all characters as multiple bytes, like UTF-16, won't
 parse correctly at all without specifying the encoding. `Full list of Python
-standard encodings 
+standard encodings
 <https://docs.python.org/3/library/codecs.html#standard-encodings>`_
 
 .. _io.index_col:
@@ -542,6 +542,8 @@ data columns:
    specify `index_col` as a column label rather then as an index on the resulting frame.
 
 
+.. _io.float_precision:
+
 Specifying method for floating-point conversion
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 The parameter ``float_precision`` can be specified in order to use
@@ -3382,7 +3384,7 @@ functions. Note however that this depends on the database flavor (sqlite does no
 have schema's). For example:
 
 .. code-block:: python
-   
+
    df.to_sql('table', engine, schema='other_schema')
    pd.read_sql_table('table', engine, schema='other_schema')
 
diff --git a/doc/source/v0.15.0.txt b/doc/source/v0.15.0.txt
index 1aa0f0de3..627d8f7bd 100644
--- a/doc/source/v0.15.0.txt
+++ b/doc/source/v0.15.0.txt
@@ -25,7 +25,7 @@ users upgrade to this version.
 
 - :ref:`Other Enhancements <whatsnew_0150.enhancements>`
 
-- :ref:`API Changes <whatsnew_0150.api>`
+- :ref:`API Changes <whatsnew_0150.api>`, and :ref:`Rolling/expanding moments API Changes <whatsnew_0150.roll>`
 
 - :ref:`Performance Improvements <whatsnew_0150.performance>`
 
@@ -61,121 +61,11 @@ API changes
 
 - Raise a ``ValueError`` in ``df.to_hdf`` with 'fixed' format, if ``df`` has non-unique columns as the resulting file will be broken (:issue:`7761`)
 
-- :func:`rolling_min`, :func:`rolling_max`, :func:`rolling_cov`, and :func:`rolling_corr`
-  now return objects with all ``NaN`` when ``len(arg) < min_periods <= window`` rather
-  than raising. (This makes all rolling functions consistent in this behavior), (:issue:`7766`)
-
-  Prior to 0.15.0
-
-  .. ipython:: python
-
-     s = Series([10, 11, 12, 13])
-
-  .. code-block:: python
-
-     In [15]: rolling_min(s, window=10, min_periods=5)
-     ValueError: min_periods (5) must be <= window (4)
-
-  New behavior
-
-  .. ipython:: python
-
-     rolling_min(s, window=10, min_periods=5)
-
-- :func:`rolling_max`, :func:`rolling_min`, :func:`rolling_sum`, :func:`rolling_mean`, :func:`rolling_median`,
-  :func:`rolling_std`, :func:`rolling_var`, :func:`rolling_skew`, :func:`rolling_kurt`, :func:`rolling_quantile`,
-  :func:`rolling_cov`, :func:`rolling_corr`, :func:`rolling_corr_pairwise`,
-  :func:`rolling_window`, and :func:`rolling_apply` with ``center=True`` previously would return a result of the same
-  structure as the input ``arg`` with ``NaN`` in the final ``(window-1)/2`` entries.
-  Now the final ``(window-1)/2`` entries of the result are calculated as if the input ``arg`` were followed
-  by ``(window-1)/2`` ``NaN`` values (or with shrinking windows, in the case of :func:`rolling_apply`).
-  (:issue:`7925`, :issue:`8269`)
-
-  Prior behavior (note final value is ``NaN``):
-
-  .. code-block:: python
-
-    In [7]: rolling_sum(Series(range(4)), window=3, min_periods=0, center=True)
-    Out[7]:
-    0     1
-    1     3
-    2     6
-    3   NaN
-    dtype: float64
-
-  New behavior (note final value is ``5 = sum([2, 3, NaN])``):
-
-  .. ipython:: python
-
-    rolling_sum(Series(range(4)), window=3, min_periods=0, center=True)
-
-- Removed ``center`` argument from :func:`expanding_max`, :func:`expanding_min`, :func:`expanding_sum`,
-  :func:`expanding_mean`, :func:`expanding_median`, :func:`expanding_std`, :func:`expanding_var`,
-  :func:`expanding_skew`, :func:`expanding_kurt`, :func:`expanding_quantile`, :func:`expanding_count`,
-  :func:`expanding_cov`, :func:`expanding_corr`, :func:`expanding_corr_pairwise`, and :func:`expanding_apply`,
-  as the results produced when ``center=True`` did not make much sense. (:issue:`7925`)
-
-- Added optional ``ddof`` argument to :func:`expanding_cov` and :func:`rolling_cov`.
-  The default value of ``1`` is backwards-compatible. (:issue:`8279`)
-
-- Documented the ``ddof`` argument to :func:`expanding_var`, :func:`expanding_std`,
-  :func:`rolling_var`, and :func:`rolling_std`. These functions' support of a
-  ``ddof`` argument (with a default value of ``1``) was previously undocumented. (:issue:`8064`)
-
-- :func:`ewma`, :func:`ewmstd`, :func:`ewmvol`, :func:`ewmvar`, :func:`ewmcov`, and :func:`ewmcorr`
-  now interpret ``min_periods`` in the same manner that the ``rolling_*`` and ``expanding_*`` functions do:
-  a given result entry will be ``NaN`` if the (expanding, in this case) window does not contain
-  at least ``min_periods`` values. The previous behavior was to set to ``NaN`` the ``min_periods`` entries
-  starting with the first non- ``NaN`` value. (:issue:`7977`)
-
-  Prior behavior (note values start at index ``2``, which is ``min_periods`` after index ``0``
-  (the index of the first non-empty value)):
-
-  .. ipython:: python
-
-    s  = Series([1, None, None, None, 2, 3])
-
-  .. code-block:: python
-
-	In [51]: ewma(s, com=3., min_periods=2)
-	Out[51]:
-	0         NaN
-	1         NaN
-	2    1.000000
-	3    1.000000
-	4    1.571429
-	5    2.189189
-	dtype: float64
-
-  New behavior (note values start at index ``4``, the location of the 2nd (since ``min_periods=2``) non-empty value):
-
-  .. ipython:: python
-
-    ewma(s, com=3., min_periods=2)
-
 - Made both the C-based and Python engines for `read_csv` and `read_table` ignore empty lines in input as well as
   whitespace-filled lines, as long as `sep` is not whitespace. This is an API change
   that can be controlled by the keyword parameter `skip_blank_lines`.
   (:issue:`4466`, see :ref:`skiplines <_io.skiplines>`)
 
-- :func:`ewmstd`, :func:`ewmvol`, :func:`ewmvar`, :func:`ewmcov`, and :func:`ewmcorr`
-  now have an optional ``adjust`` argument, just like :func:`ewma` does,
-  affecting how the weights are calculated.
-  The default value of ``adjust`` is ``True``, which is backwards-compatible.
-  See :ref:`Exponentially weighted moment functions <stats.moments.exponentially_weighted>` for details. (:issue:`7911`)
-
-- :func:`ewma`, :func:`ewmstd`, :func:`ewmvol`, :func:`ewmvar`, :func:`ewmcov`, and :func:`ewmcorr`
-  now have an optional ``ignore_na`` argument.
-  When ``ignore_na=False`` (the default), missing values are taken into account in the weights calculation.
-  When ``ignore_na=True`` (which reproduces the pre-0.15.0 behavior), missing values are ignored in the weights calculation.
-  (:issue:`7543`)
-
-  .. ipython:: python
-
-     ewma(Series([None, 1., 8.]), com=2.)
-     ewma(Series([1., None, 8.]), com=2., ignore_na=True)  # pre-0.15.0 behavior
-     ewma(Series([1., None, 8.]), com=2., ignore_na=False)  # new default
-
 - Bug in passing a ``DatetimeIndex`` with a timezone that was not being retained in DataFrame construction from a dict (:issue:`7822`)
 
   In prior versions this would drop the timezone.
@@ -428,6 +318,121 @@ The ``.dt`` accessor works for period and timedelta dtypes.
    s.dt.seconds
    s.dt.components
 
+.. _whatsnew_0150.roll:
+
+Rolling/exapnding moments API changes
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+- :func:`rolling_min`, :func:`rolling_max`, :func:`rolling_cov`, and :func:`rolling_corr`
+  now return objects with all ``NaN`` when ``len(arg) < min_periods <= window`` rather
+  than raising. (This makes all rolling functions consistent in this behavior), (:issue:`7766`)
+
+  Prior to 0.15.0
+
+  .. ipython:: python
+
+     s = Series([10, 11, 12, 13])
+
+  .. code-block:: python
+
+     In [15]: rolling_min(s, window=10, min_periods=5)
+     ValueError: min_periods (5) must be <= window (4)
+
+  New behavior
+
+  .. ipython:: python
+
+     rolling_min(s, window=10, min_periods=5)
+
+- :func:`rolling_max`, :func:`rolling_min`, :func:`rolling_sum`, :func:`rolling_mean`, :func:`rolling_median`,
+  :func:`rolling_std`, :func:`rolling_var`, :func:`rolling_skew`, :func:`rolling_kurt`, :func:`rolling_quantile`,
+  :func:`rolling_cov`, :func:`rolling_corr`, :func:`rolling_corr_pairwise`,
+  :func:`rolling_window`, and :func:`rolling_apply` with ``center=True`` previously would return a result of the same
+  structure as the input ``arg`` with ``NaN`` in the final ``(window-1)/2`` entries.
+  Now the final ``(window-1)/2`` entries of the result are calculated as if the input ``arg`` were followed
+  by ``(window-1)/2`` ``NaN`` values (or with shrinking windows, in the case of :func:`rolling_apply`).
+  (:issue:`7925`, :issue:`8269`)
+
+  Prior behavior (note final value is ``NaN``):
+
+  .. code-block:: python
+
+    In [7]: rolling_sum(Series(range(4)), window=3, min_periods=0, center=True)
+    Out[7]:
+    0     1
+    1     3
+    2     6
+    3   NaN
+    dtype: float64
+
+  New behavior (note final value is ``5 = sum([2, 3, NaN])``):
+
+  .. ipython:: python
+
+    rolling_sum(Series(range(4)), window=3, min_periods=0, center=True)
+
+- Removed ``center`` argument from :func:`expanding_max`, :func:`expanding_min`, :func:`expanding_sum`,
+  :func:`expanding_mean`, :func:`expanding_median`, :func:`expanding_std`, :func:`expanding_var`,
+  :func:`expanding_skew`, :func:`expanding_kurt`, :func:`expanding_quantile`, :func:`expanding_count`,
+  :func:`expanding_cov`, :func:`expanding_corr`, :func:`expanding_corr_pairwise`, and :func:`expanding_apply`,
+  as the results produced when ``center=True`` did not make much sense. (:issue:`7925`)
+
+- Added optional ``ddof`` argument to :func:`expanding_cov` and :func:`rolling_cov`.
+  The default value of ``1`` is backwards-compatible. (:issue:`8279`)
+
+- Documented the ``ddof`` argument to :func:`expanding_var`, :func:`expanding_std`,
+  :func:`rolling_var`, and :func:`rolling_std`. These functions' support of a
+  ``ddof`` argument (with a default value of ``1``) was previously undocumented. (:issue:`8064`)
+
+- :func:`ewma`, :func:`ewmstd`, :func:`ewmvol`, :func:`ewmvar`, :func:`ewmcov`, and :func:`ewmcorr`
+  now interpret ``min_periods`` in the same manner that the ``rolling_*`` and ``expanding_*`` functions do:
+  a given result entry will be ``NaN`` if the (expanding, in this case) window does not contain
+  at least ``min_periods`` values. The previous behavior was to set to ``NaN`` the ``min_periods`` entries
+  starting with the first non- ``NaN`` value. (:issue:`7977`)
+
+  Prior behavior (note values start at index ``2``, which is ``min_periods`` after index ``0``
+  (the index of the first non-empty value)):
+
+  .. ipython:: python
+
+    s  = Series([1, None, None, None, 2, 3])
+
+  .. code-block:: python
+
+	In [51]: ewma(s, com=3., min_periods=2)
+	Out[51]:
+	0         NaN
+	1         NaN
+	2    1.000000
+	3    1.000000
+	4    1.571429
+	5    2.189189
+	dtype: float64
+
+  New behavior (note values start at index ``4``, the location of the 2nd (since ``min_periods=2``) non-empty value):
+
+  .. ipython:: python
+
+    ewma(s, com=3., min_periods=2)
+
+- :func:`ewmstd`, :func:`ewmvol`, :func:`ewmvar`, :func:`ewmcov`, and :func:`ewmcorr`
+  now have an optional ``adjust`` argument, just like :func:`ewma` does,
+  affecting how the weights are calculated.
+  The default value of ``adjust`` is ``True``, which is backwards-compatible.
+  See :ref:`Exponentially weighted moment functions <stats.moments.exponentially_weighted>` for details. (:issue:`7911`)
+
+- :func:`ewma`, :func:`ewmstd`, :func:`ewmvol`, :func:`ewmvar`, :func:`ewmcov`, and :func:`ewmcorr`
+  now have an optional ``ignore_na`` argument.
+  When ``ignore_na=False`` (the default), missing values are taken into account in the weights calculation.
+  When ``ignore_na=True`` (which reproduces the pre-0.15.0 behavior), missing values are ignored in the weights calculation.
+  (:issue:`7543`)
+
+  .. ipython:: python
+
+     ewma(Series([None, 1., 8.]), com=2.)
+     ewma(Series([1., None, 8.]), com=2., ignore_na=True)  # pre-0.15.0 behavior
+     ewma(Series([1., None, 8.]), com=2., ignore_na=False)  # new default
+
 .. _whatsnew_0150.refactoring:
 
 Internal Refactoring
@@ -629,15 +634,11 @@ Enhancements
 
 - Added support for bool, uint8, uint16 and uint32 datatypes in ``to_stata`` (:issue:`7097`, :issue:`7365`)
 
-- Added ``layout`` keyword to ``DataFrame.plot``. You can pass a tuple of
-  ``(rows, columns)``, one of which can be ``-1`` to automatically
-  infer (:issue:`6667`, :issue:`8071`).
+- Added ``layout`` keyword to ``DataFrame.plot``. You can pass a tuple of ``(rows, columns)``, one of which can be ``-1`` to automatically infer (:issue:`6667`, :issue:`8071`).
 - Allow to pass multiple axes to ``DataFrame.plot``, ``hist`` and ``boxplot`` (:issue:`5353`, :issue:`6970`, :issue:`7069`)
-- Added support for ``c``, ``colormap`` and ``colorbar`` arguments for
-  ``DataFrame.plot`` with ``kind='scatter'`` (:issue:`7780`)
+- Added support for ``c``, ``colormap`` and ``colorbar`` arguments for ``DataFrame.plot`` with ``kind='scatter'`` (:issue:`7780`)
 
-- ``read_csv`` now has a keyword parameter ``float_precision`` which specifies which floating-point
-  converter the C engine should use during parsing, see :ref:`_io` (:issue:`8002`, :issue:`8044`)
+- ``read_csv`` now has a keyword parameter ``float_precision`` which specifies which floating-point converter the C engine should use during parsing, see :ref:`here <io.float_precision>` (:issue:`8002`, :issue:`8044`)
 
 - ``PeriodIndex`` supports ``resolution`` as the same as ``DatetimeIndex`` (:issue:`7708`)
 - ``pandas.tseries.holiday`` has added support for additional holidays and ways to observe holidays (:issue:`7070`)
