commit c32cc6ed4716fec2747bcf117ecc9b67cc89d96c
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Sep 10 22:39:54 2012 -0400

    BUG: fix mixed-integer .ix indexing bugs. close#1799

diff --git a/RELEASE.rst b/RELEASE.rst
index e67aeea86..fdbe096bb 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -147,6 +147,7 @@ pandas 0.9.0
     backfill_2d
   - Fix resampling error with intraday times and anchored target time (like
     AS-DEC) (#1772)
+  - Fix .ix indexing bugs with mixed-integer indexes (#1799)
 
 pandas 0.8.1
 ============
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 4dce75a29..661e13748 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -300,8 +300,15 @@ class _NDFrameIndexer(object):
                 # asarray can be unsafe, NumPy strings are weird
                 keyarr = _asarray_tuplesafe(key)
 
-            if _is_integer_dtype(keyarr) and not _is_integer_index(labels):
-                return self.obj.take(keyarr, axis=axis)
+            if _is_integer_dtype(keyarr):
+                if labels.inferred_type == 'mixed-integer':
+                    indexer = labels.get_indexer(keyarr)
+                    if (indexer >= 0).all():
+                        self.obj.take(indexer, axis=axis)
+                    else:
+                        return self.obj.take(keyarr, axis=axis)
+                elif not labels.inferred_type == 'integer':
+                    return self.obj.take(keyarr, axis=axis)
 
             # this is not the most robust, but...
             if (isinstance(labels, MultiIndex) and
@@ -368,7 +375,7 @@ class _NDFrameIndexer(object):
                         j = labels.get_loc(stop)
                     position_slice = False
             except KeyError:
-                if ltype == 'mixed-integer':
+                if ltype == 'mixed-integer-float':
                     raise
 
             if null_slice or position_slice:
@@ -471,7 +478,7 @@ class _NDFrameIndexer(object):
                     j = labels.get_loc(stop)
                 position_slice = False
         except KeyError:
-            if labels.inferred_type == 'mixed-integer':
+            if labels.inferred_type == 'mixed-integer-float':
                 raise
 
         if null_slice or position_slice:
diff --git a/pandas/src/inference.pyx b/pandas/src/inference.pyx
index 6ffb8c1bb..6f6126415 100644
--- a/pandas/src/inference.pyx
+++ b/pandas/src/inference.pyx
@@ -59,6 +59,8 @@ def infer_dtype(object _values):
     elif util.is_integer_object(val):
         if is_integer_array(values):
             return 'integer'
+        elif is_integer_float_array(values):
+            return 'mixed-integer-float'
         return 'mixed-integer'
     elif is_datetime(val):
         if is_datetime_array(values):
@@ -75,6 +77,8 @@ def infer_dtype(object _values):
     elif util.is_float_object(val):
         if is_float_array(values):
             return 'floating'
+        elif is_integer_float_array(values):
+            return 'mixed-integer-float'
 
     elif util.is_bool_object(val):
         if is_bool_array(values):
@@ -155,6 +159,29 @@ def is_integer_array(ndarray values):
     else:
         return False
 
+def is_integer_float_array(ndarray values):
+    cdef:
+        Py_ssize_t i, n = len(values)
+        ndarray[object] objbuf
+        object obj
+
+    if issubclass(values.dtype.type, np.integer):
+        return True
+    elif values.dtype == np.object_:
+        objbuf = values
+
+        if n == 0:
+            return False
+
+        for i in range(n):
+            if not (util.is_integer_object(objbuf[i]) or
+                    util.is_float_object(objbuf[i])):
+
+                return False
+        return True
+    else:
+        return False
+
 def is_float_array(ndarray values):
     cdef:
         Py_ssize_t i, n = len(values)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 63b5ed97b..39f40b663 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -163,6 +163,18 @@ class CheckIndexing(object):
 
         assert_almost_equal(df.values, arr)
 
+    def test_getitem_ix_mixed_integer(self):
+        df = DataFrame(np.random.randn(4, 3),
+                       index=[1, 10, 'C', 'E'], columns=[1, 2, 3])
+
+        result = df.ix[:-1]
+        expected = df.ix[df.index[:-1]]
+        assert_frame_equal(result, expected)
+
+        result = df.ix[[1, 10]]
+        expected = df.ix[Index([1, 10], dtype=object)]
+        assert_frame_equal(result, expected)
+
     def test_getattr(self):
         tm.assert_series_equal(self.frame.A, self.frame['A'])
         self.assertRaises(AttributeError, getattr, self.frame,
