commit f32efa82746b2c5aa8583c22680bf3b489be2153
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Mar 14 21:23:31 2012 -0400

    TST: raise exception if passed date_parser fails

diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index f7ddd92e2..21173757d 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -638,6 +638,32 @@ bar"""
                                        'foo', 'bar']})
         assert_frame_equal(df, expected)
 
+    def test_parse_dates_custom_euroformat(self):
+        from dateutil.parser import parse
+        text = """foo,bar,baz
+31/01/2010,1,2
+01/02/2010,1,NA
+02/02/2010,1,2
+"""
+        parser = lambda d: parse(d, dayfirst=True)
+        df = read_csv(StringIO(text), skiprows=[0],
+                      names=['time', 'Q', 'NTU'], index_col=0,
+                      parse_dates=True, date_parser=parser,
+                      na_values=['NA'])
+
+        exp_index = Index([datetime(2010, 1, 31), datetime(2010, 2, 1),
+                           datetime(2010, 2, 2)], name='time')
+        expected = DataFrame({'Q' : [1, 1, 1], 'NTU' : [2, np.nan, 2]},
+                             index=exp_index, columns=['Q', 'NTU'])
+        assert_frame_equal(df, expected)
+
+        parser = lambda d: parse(d, day_first=True)
+        self.assertRaises(Exception, read_csv,
+                          StringIO(text), skiprows=[0],
+                          names=['time', 'Q', 'NTU'], index_col=0,
+                          parse_dates=True, date_parser=parser,
+                          na_values=['NA'])
+
     def test_converters_corner_with_nas(self):
         import StringIO
         import numpy as np
diff --git a/pandas/src/inference.pyx b/pandas/src/inference.pyx
index 37b9d2138..2c3b83791 100644
--- a/pandas/src/inference.pyx
+++ b/pandas/src/inference.pyx
@@ -352,16 +352,22 @@ def try_parse_dates(ndarray[object] values, parser=None):
                     return datetime.strptime(s, '%m/%d/%Y')
                 except Exception:
                     return s
+        # EAFP here
+        try:
+            for i from 0 <= i < n:
+                result[i] = parse_date(values[i])
+        except Exception:
+            # failed
+            return values
     else:
         parse_date = parser
 
-    # EAFP
-    try:
-        for i from 0 <= i < n:
-            result[i] = parse_date(values[i])
-    except Exception:
-        # failed
-        return values
+        try:
+            for i from 0 <= i < n:
+                result[i] = parse_date(values[i])
+        except Exception:
+            # raise if passed parser and it failed
+            raise
 
     return result
 
