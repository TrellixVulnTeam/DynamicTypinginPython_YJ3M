commit e330b6095bc15225eedf7cceb3088dae8babe490
Author: bwignall <brianwignall@gmail.com>
Date:   Sat Feb 8 17:59:24 2014 -0500

    CLN: Convert last of assert_(x == y) to assertEqual
    
    Work on #6175. Fixes last of vanilla assert_(x == y) conversions in pandas/tests and pandas/*/tests. Tests still pass locally.

diff --git a/pandas/io/tests/test_json/test_ujson.py b/pandas/io/tests/test_json/test_ujson.py
index 4e9310d2d..36963d193 100644
--- a/pandas/io/tests/test_json/test_ujson.py
+++ b/pandas/io/tests/test_json/test_ujson.py
@@ -387,16 +387,16 @@ class UltraJSONTests(TestCase):
         stamp = Timestamp(val)
 
         roundtrip = ujson.decode(ujson.encode(val, date_unit='s'))
-        self.assert_(roundtrip == stamp.value // 10**9)
+        self.assertEqual(roundtrip, stamp.value // 10**9)
 
         roundtrip = ujson.decode(ujson.encode(val, date_unit='ms'))
-        self.assert_(roundtrip == stamp.value // 10**6)
+        self.assertEqual(roundtrip, stamp.value // 10**6)
 
         roundtrip = ujson.decode(ujson.encode(val, date_unit='us'))
-        self.assert_(roundtrip == stamp.value // 10**3)
+        self.assertEqual(roundtrip, stamp.value // 10**3)
 
         roundtrip = ujson.decode(ujson.encode(val, date_unit='ns'))
-        self.assert_(roundtrip == stamp.value)
+        self.assertEqual(roundtrip, stamp.value)
 
         self.assertRaises(ValueError, ujson.encode, val, date_unit='foo')
 
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index 3c8e40fb1..c0149f0bb 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -3140,7 +3140,8 @@ class TestHDFStore(tm.TestCase):
 
             for attr in ['freq','tz','name']:
                 for idx in ['index','columns']:
-                    self.assert_(getattr(getattr(df,idx),attr,None) == getattr(getattr(result,idx),attr,None))
+                    self.assertEqual(getattr(getattr(df,idx),attr,None),
+                                     getattr(getattr(result,idx),attr,None))
 
 
             # try to append a table with a different frequency
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 3fae4ee68..9d5c449d7 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1563,24 +1563,24 @@ class CheckIndexing(object):
         # so column is not created
         df = df_orig.copy()
         df.set_value('C', 2, 1.0)
-        self.assert_(list(df.index) == list(df_orig.index) + ['C'])
-        #self.assert_(list(df.columns) == list(df_orig.columns) + [2])
+        self.assertEqual(list(df.index), list(df_orig.index) + ['C'])
+        #self.assertEqual(list(df.columns), list(df_orig.columns) + [2])
 
         df = df_orig.copy()
         df.loc['C', 2] = 1.0
-        self.assert_(list(df.index) == list(df_orig.index) + ['C'])
-        #self.assert_(list(df.columns) == list(df_orig.columns) + [2])
+        self.assertEqual(list(df.index), list(df_orig.index) + ['C'])
+        #self.assertEqual(list(df.columns), list(df_orig.columns) + [2])
 
         # create both new
         df = df_orig.copy()
         df.set_value('C', 'D', 1.0)
-        self.assert_(list(df.index) == list(df_orig.index) + ['C'])
-        self.assert_(list(df.columns) == list(df_orig.columns) + ['D'])
+        self.assertEqual(list(df.index), list(df_orig.index) + ['C'])
+        self.assertEqual(list(df.columns), list(df_orig.columns) + ['D'])
 
         df = df_orig.copy()
         df.loc['C', 'D'] = 1.0
-        self.assert_(list(df.index) == list(df_orig.index) + ['C'])
-        self.assert_(list(df.columns) == list(df_orig.columns) + ['D'])
+        self.assertEqual(list(df.index), list(df_orig.index) + ['C'])
+        self.assertEqual(list(df.columns), list(df_orig.columns) + ['D'])
 
     def test_get_set_value_no_partial_indexing(self):
         # partial w/ MultiIndex raise exception
diff --git a/pandas/tseries/tests/test_offsets.py b/pandas/tseries/tests/test_offsets.py
index 6e553959f..e37e27019 100644
--- a/pandas/tseries/tests/test_offsets.py
+++ b/pandas/tseries/tests/test_offsets.py
@@ -774,7 +774,7 @@ class TestLastWeekOfMonth(TestBase):
 
         for weekday, date, expected in test_cases:
             offset = LastWeekOfMonth(weekday=weekday)
-            self.assert_(offset.onOffset(date) == expected, date)
+            self.assertEqual(offset.onOffset(date), expected, msg=date)
 
 
 class TestBMonthBegin(TestBase):
diff --git a/pandas/tseries/tests/test_period.py b/pandas/tseries/tests/test_period.py
index 21e9756da..1786a6d2a 100644
--- a/pandas/tseries/tests/test_period.py
+++ b/pandas/tseries/tests/test_period.py
@@ -1191,19 +1191,19 @@ class TestPeriodIndex(tm.TestCase):
         create_index = lambda: PeriodIndex(freq='A', start='1/1/2001',
                                            end='12/1/2009')
         index = create_index()
-        self.assertTrue(index.is_(index))
-        self.assertFalse(index.is_(create_index()))
-        self.assertTrue(index.is_(index.view()))
-        self.assertTrue(index.is_(index.view().view().view().view().view()))
-        self.assertTrue(index.view().is_(index))
+        self.assertEqual(index.is_(index), True)
+        self.assertEqual(index.is_(create_index()), False)
+        self.assertEqual(index.is_(index.view()), True)
+        self.assertEqual(index.is_(index.view().view().view().view().view()), True)
+        self.assertEqual(index.view().is_(index), True)
         ind2 = index.view()
         index.name = "Apple"
-        self.assertTrue(ind2.is_(index))
-        self.assertFalse(index.is_(index[:]))
-        self.assertFalse(index.is_(index.asfreq('M')))
-        self.assertFalse(index.is_(index.asfreq('A')))
-        self.assertFalse(index.is_(index - 2))
-        self.assertFalse(index.is_(index - 0))
+        self.assertEqual(ind2.is_(index), True)
+        self.assertEqual(index.is_(index[:]), False)
+        self.assertEqual(index.is_(index.asfreq('M')), False)
+        self.assertEqual(index.is_(index.asfreq('A')), False)
+        self.assertEqual(index.is_(index - 2), False)
+        self.assertEqual(index.is_(index - 0), False)
 
     def test_comp_period(self):
         idx = period_range('2007-01', periods=20, freq='M')
