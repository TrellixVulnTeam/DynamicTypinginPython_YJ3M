commit cb43fa668c5dd7ac88c919b8f432a410c65319e7
Author: h-vetinari <33685575+h-vetinari@users.noreply.github.com>
Date:   Sun Mar 10 22:45:01 2019 +0100

    Fixturize tests/frame/test_combine_concat.py (#25634)

diff --git a/pandas/tests/frame/test_combine_concat.py b/pandas/tests/frame/test_combine_concat.py
index c2364dc13..c803d15a6 100644
--- a/pandas/tests/frame/test_combine_concat.py
+++ b/pandas/tests/frame/test_combine_concat.py
@@ -11,12 +11,11 @@ from pandas.compat import lrange
 
 import pandas as pd
 from pandas import DataFrame, Index, Series, Timestamp, date_range
-from pandas.tests.frame.common import TestData
 import pandas.util.testing as tm
 from pandas.util.testing import assert_frame_equal, assert_series_equal
 
 
-class TestDataFrameConcatCommon(TestData):
+class TestDataFrameConcatCommon():
 
     def test_concat_multiple_frames_dtypes(self):
 
@@ -515,7 +514,7 @@ class TestDataFrameConcatCommon(TestData):
         tm.assert_frame_equal(result, expected)
 
 
-class TestDataFrameCombineFirst(TestData):
+class TestDataFrameCombineFirst():
 
     def test_combine_first_mixed(self):
         a = Series(['a', 'b'], index=lrange(2))
@@ -531,22 +530,22 @@ class TestDataFrameCombineFirst(TestData):
         combined = f.combine_first(g)
         tm.assert_frame_equal(combined, exp)
 
-    def test_combine_first(self):
+    def test_combine_first(self, float_frame):
         # disjoint
-        head, tail = self.frame[:5], self.frame[5:]
+        head, tail = float_frame[:5], float_frame[5:]
 
         combined = head.combine_first(tail)
-        reordered_frame = self.frame.reindex(combined.index)
+        reordered_frame = float_frame.reindex(combined.index)
         assert_frame_equal(combined, reordered_frame)
-        assert tm.equalContents(combined.columns, self.frame.columns)
+        assert tm.equalContents(combined.columns, float_frame.columns)
         assert_series_equal(combined['A'], reordered_frame['A'])
 
         # same index
-        fcopy = self.frame.copy()
+        fcopy = float_frame.copy()
         fcopy['A'] = 1
         del fcopy['C']
 
-        fcopy2 = self.frame.copy()
+        fcopy2 = float_frame.copy()
         fcopy2['B'] = 0
         del fcopy2['D']
 
@@ -570,20 +569,20 @@ class TestDataFrameCombineFirst(TestData):
         assert (combined['A'][:10] == 0).all()
 
         # no overlap
-        f = self.frame[:10]
-        g = self.frame[10:]
+        f = float_frame[:10]
+        g = float_frame[10:]
         combined = f.combine_first(g)
         assert_series_equal(combined['A'].reindex(f.index), f['A'])
         assert_series_equal(combined['A'].reindex(g.index), g['A'])
 
         # corner cases
-        comb = self.frame.combine_first(self.empty)
-        assert_frame_equal(comb, self.frame)
+        comb = float_frame.combine_first(DataFrame({}))
+        assert_frame_equal(comb, float_frame)
 
-        comb = self.empty.combine_first(self.frame)
-        assert_frame_equal(comb, self.frame)
+        comb = DataFrame({}).combine_first(float_frame)
+        assert_frame_equal(comb, float_frame)
 
-        comb = self.frame.combine_first(DataFrame(index=["faz", "boo"]))
+        comb = float_frame.combine_first(DataFrame(index=["faz", "boo"]))
         assert "faz" in comb.index
 
         # #2525
@@ -850,7 +849,7 @@ class TestDataFrameCombineFirst(TestData):
         pd.concat([df1, df2_obj])
 
 
-class TestDataFrameUpdate(TestData):
+class TestDataFrameUpdate():
 
     def test_update_nan(self):
         # #15593 #15617
