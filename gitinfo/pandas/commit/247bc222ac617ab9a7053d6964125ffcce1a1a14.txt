commit 247bc222ac617ab9a7053d6964125ffcce1a1a14
Author: jreback <jeff@reback.net>
Date:   Thu May 1 10:31:23 2014 -0400

    TST: tests for groupby not using grouper column, solved in GH7000, (GH5614)

diff --git a/doc/source/release.rst b/doc/source/release.rst
index 4532c1d6e..f970d67fa 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -188,7 +188,7 @@ API Changes
   validation warnings in :func:`read_csv`/:func:`read_table` (:issue:`6607`)
 - Raise a ``TypeError`` when ``DataFrame`` is passed an iterator as the
   ``data`` argument (:issue:`5357`)
-- groupby will now not return the grouped column for non-cython functions (:issue:`5610`),
+- groupby will now not return the grouped column for non-cython functions (:issue:`5610`, :issue:`5614`),
   as its already the index
 
 Deprecations
diff --git a/doc/source/v0.14.0.txt b/doc/source/v0.14.0.txt
index ffdd77bab..bd91dc2d2 100644
--- a/doc/source/v0.14.0.txt
+++ b/doc/source/v0.14.0.txt
@@ -124,7 +124,7 @@ API changes
 
      g.nth(0, dropna='any')  # similar to old behaviour
 
-  groupby will now not return the grouped column for non-cython functions (:issue:`5610`),
+  groupby will now not return the grouped column for non-cython functions (:issue:`5610`, :issue:`5614`),
   as its already the index
 
   .. ipython:: python
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index fcc4eb83b..9b7c07325 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -2029,6 +2029,16 @@ class TestGroupBy(tm.TestCase):
         result = g.idxmax()
         assert_frame_equal(result,expected)
 
+        # cumsum (GH5614)
+        df = DataFrame([[1, 2, np.nan], [1, np.nan, 9], [3, 4, 9]], columns=['A', 'B', 'C'])
+        expected = DataFrame([[2, np.nan], [np.nan, 9], [4, 9]], columns=['B', 'C'])
+        result = df.groupby('A').cumsum()
+        assert_frame_equal(result,expected)
+
+        expected = DataFrame([[1, 2, np.nan], [2, np.nan, 9], [3, 4, 9]], columns=['A', 'B', 'C']).astype('float64')
+        result = df.groupby('A', as_index=False).cumsum()
+        assert_frame_equal(result,expected)
+
     def test_grouping_ndarray(self):
         grouped = self.df.groupby(self.df['A'].values)
 
