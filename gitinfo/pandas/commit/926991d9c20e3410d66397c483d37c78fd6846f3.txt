commit 926991d9c20e3410d66397c483d37c78fd6846f3
Author: Viktor Kerkez <alefnula@gmail.com>
Date:   Sat Sep 28 01:26:24 2013 +0200

    ENH: Added PySide support for qtpandas.

diff --git a/doc/source/release.rst b/doc/source/release.rst
index 058ea1651..488fd8dea 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -77,6 +77,7 @@ Experimental Features
     (:issue:`4897`).
   - Add msgpack support via ``pd.read_msgpack()`` and ``pd.to_msgpack()`` / ``df.to_msgpack()`` for serialization
     of arbitrary pandas (and python objects) in a lightweight portable binary format (:issue:`686`)
+  - Added PySide support for the qtpandas DataFrameModel and DataFrameWidget.
 
 Improvements to existing features
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
diff --git a/doc/source/v0.13.0.txt b/doc/source/v0.13.0.txt
index 90d2989de..3f5989856 100644
--- a/doc/source/v0.13.0.txt
+++ b/doc/source/v0.13.0.txt
@@ -600,6 +600,8 @@ Experimental
 
      os.remove('foo.msg')
 
+- Added PySide support for the qtpandas DataFrameModel and DataFrameWidget.
+
 .. _whatsnew_0130.refactoring:
 
 Internal Refactoring
diff --git a/pandas/sandbox/qtpandas.py b/pandas/sandbox/qtpandas.py
index 35aa28fea..86a5478da 100644
--- a/pandas/sandbox/qtpandas.py
+++ b/pandas/sandbox/qtpandas.py
@@ -3,10 +3,15 @@ Easy integration of DataFrame into pyqt framework
 
 @author: Jev Kuznetsov
 '''
-from PyQt4.QtCore import (
-    QAbstractTableModel, Qt, QVariant, QModelIndex, SIGNAL)
-from PyQt4.QtGui import (
-    QApplication, QDialog, QVBoxLayout, QTableView, QWidget)
+try:
+    from PyQt4.QtCore import QAbstractTableModel, Qt, QVariant, QModelIndex
+    from PyQt4.QtGui import (
+        QApplication, QDialog, QVBoxLayout, QTableView, QWidget)
+except ImportError:
+    from PySide.QtCore import QAbstractTableModel, Qt, QModelIndex
+    from PySide.QtGui import (
+        QApplication, QDialog, QVBoxLayout, QTableView, QWidget)
+    QVariant = lambda value=None: value
 
 from pandas import DataFrame, Index
 
@@ -57,9 +62,17 @@ class DataFrameModel(QAbstractTableModel):
             return flags
 
     def setData(self, index, value, role):
-        self.df.set_value(self.df.index[index.row()],
-                          self.df.columns[index.column()],
-                          value.toPyObject())
+        row = self.df.index[index.row()]
+        col = self.df.columns[index.column()]
+        if hasattr(value, 'toPyObject'):
+            # PyQt4 gets a QVariant
+            value = value.toPyObject()
+        else:
+            # PySide gets an unicode
+            dtype = self.df[col].dtype
+            if dtype != object:
+                value = None if value == '' else dtype.type(value)
+        self.df.set_value(row, col, value)
         return True
 
     def rowCount(self, index=QModelIndex()):
