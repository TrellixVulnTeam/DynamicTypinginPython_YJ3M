commit edaad31d9e7fafe6cea0b3482c7ee6d6a9ff8a84
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jul 19 17:38:45 2012 -0400

    BUG: ensure that key aliases get properly converted when assigned to Series from DataFrame slice, close #1644

diff --git a/RELEASE.rst b/RELEASE.rst
index 681055310..7998da377 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -91,6 +91,8 @@ pandas 0.8.1
   - Fix cases where extra keywords weren't being passed on to matplotlib from
     Series.plot (#1636)
   - Fix BusinessMonthBegin logic for dates before 1st bday of month (#1645)
+  - Ensure string alias converted (valid in DatetimeIndex.get_loc) in
+    DataFrame.xs / __getitem__ (#1644)
 
 pandas 0.8.0
 ============
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 0fe8ff022..dc5c6c0f6 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1684,12 +1684,11 @@ class DataFrame(NDFrame):
             return self._get_item_cache(key)
 
     def _box_item_values(self, key, values):
+        items = self.columns[self.columns.get_loc(key)]
         if values.ndim == 2:
-            item_cols = self.columns[self.columns.get_loc(key)]
-            return DataFrame(values.T, columns=item_cols,
-                             index=self.index)
+            return DataFrame(values.T, columns=items, index=self.index)
         else:
-            return Series(values, index=self.index, name=key)
+            return Series(values, index=self.index, name=items)
 
     def __getattr__(self, name):
         """After regular attribute access, try looking up the name of a column.
@@ -1893,7 +1892,8 @@ class DataFrame(NDFrame):
 
         if np.isscalar(loc):
             new_values = self._data.fast_2d_xs(loc, copy=copy)
-            return Series(new_values, index=self.columns, name=key)
+            return Series(new_values, index=self.columns,
+                          name=self.index[loc])
         else: # isinstance(loc, slice) or loc.dtype == np.bool_:
             result = self[loc]
             result.index = new_index
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 473c70f9a..47ae08bd0 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -446,6 +446,12 @@ class DatetimeIndex(Int64Index):
             new_values = self.astype('O') + delta
         return DatetimeIndex(new_values, tz=self.tz, freq='infer')
 
+    def __contains__(self, key):
+        try:
+            return np.isscalar(self.get_loc(key))
+        except (KeyError, TypeError):
+            return False
+
     def groupby(self, f):
         objs = self.asobject
         return _algos.groupby_object(objs, f)
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 1415a126c..759a7c2ec 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -1847,6 +1847,17 @@ class TestSeriesDatetime64(unittest.TestCase):
         ex_first = Timestamp('2000-01-03')
         self.assertEquals(rng[0], ex_first)
 
+    def test_string_index_series_name_converted(self):
+        # #1644
+        df = DataFrame(np.random.randn(10, 4),
+                       index=date_range('1/1/2000', periods=10))
+
+        result = df.ix['1/3/2000']
+        self.assertEquals(result.name, df.index[2])
+
+        result = df.T['1/3/2000']
+        self.assertEquals(result.name, df.index[2])
+
 class TestTimestamp(unittest.TestCase):
 
     def test_basics_nanos(self):
