commit a8f66b4bd91a4739c2e7ec36b7f54f9a31e13f54
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Jul 20 12:54:11 2011 -0400

    ENH: DataFrame.insert method implementation

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 75e9e5ef6..eb41fc00b 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -717,7 +717,7 @@ class DataFrame(NDFrame):
 
             self._boolean_set(key, value)
         else:
-            self._insert_item(key, value)
+            self._set_item(key, value)
 
     def _boolean_set(self, key, value):
         mask = key.values
@@ -729,7 +729,23 @@ class DataFrame(NDFrame):
 
         self.values[mask] = value
 
-    def _insert_item(self, key, value):
+    def insert(self, loc, column, value):
+        """
+        Insert column into DataFrame at specified location. Raises Exception if
+        column is already contained in the DataFrame
+
+        Parameters
+        ----------
+        loc : int
+            Must have 0 <= loc <= len(columns)
+        column : object
+        value : int, Series, or array-like
+        """
+        value = self._sanitize_column(value)
+        value = np.atleast_2d(value) # is this a hack?
+        self._data.insert(loc, column, value)
+
+    def _set_item(self, key, value):
         """
         Add series to DataFrame in specified column.
 
@@ -739,9 +755,13 @@ class DataFrame(NDFrame):
         Series/TimeSeries will be conformed to the DataFrame's index to
         ensure homogeneity.
         """
+        value = self._sanitize_column(value)
+        value = np.atleast_2d(value) # is this a hack?
+        self._data.set(key, value)
+
+    def _sanitize_column(self, value):
         # Need to make sure new columns (which go into the BlockManager as new
         # blocks) are always copied
-
         if hasattr(value, '__iter__'):
             if isinstance(value, Series):
                 if value.index.equals(self.index):
@@ -761,8 +781,7 @@ class DataFrame(NDFrame):
         else:
             value = np.repeat(value, len(self.index))
 
-        value = np.atleast_2d(value)
-        self._data.set(key, value)
+        return value
 
     def __delitem__(self, key):
         """
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index f8990005a..b2e16d5ed 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -490,9 +490,9 @@ class BlockManager(object):
                 block.set(item, value)
         else:
             # insert at end
-            self.insert(item, len(self.items), value)
+            self.insert(len(self.items), item, value)
 
-    def insert(self, item, loc, value):
+    def insert(self, loc, item, value):
         if item in self.items:
             raise Exception('cannot insert %s, already exists' % item)
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index bf2180149..21295150e 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -977,6 +977,21 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         frame = self.klass(index=np.arange(1000))
         frame.toString(buf=buf)
 
+    def test_insert(self):
+        df = DataFrame(np.random.randn(5, 3), index=np.arange(5),
+                       columns=['c', 'b', 'a'])
+
+        df.insert(0, 'foo', df['a'])
+        self.assert_(np.array_equal(df.columns, ['foo', 'c', 'b', 'a']))
+        assert_almost_equal(df['a'], df['foo'])
+
+        df.insert(2, 'bar', df['c'])
+        self.assert_(np.array_equal(df.columns, ['foo', 'c', 'bar', 'b', 'a']))
+        assert_almost_equal(df['c'], df['bar'])
+
+        self.assertRaises(Exception, df.insert, 1, 'a')
+        self.assertRaises(Exception, df.insert, 1, 'c')
+
     def test_delitem(self):
         del self.frame['A']
         self.assert_('A' not in self.frame)
