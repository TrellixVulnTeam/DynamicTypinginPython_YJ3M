commit 3625333e4b29c4d5a4e344c2d35d7acc0a16e4c1
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Jan 1 23:31:37 2012 -0500

    TST: core/index test coverage

diff --git a/pandas/core/index.py b/pandas/core/index.py
index 301beae24..b5807b5f6 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1649,7 +1649,7 @@ class MultiIndex(Index):
             return True
 
         if not isinstance(other, MultiIndex):
-            return False
+            return np.array_equal(self.values, _ensure_index(other))
 
         if self.nlevels != other.nlevels:
             return False
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 85b273fe9..66e8255ad 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -357,6 +357,19 @@ class TestIndex(unittest.TestCase):
         self.assert_(union_idx.ndim == 1)
         self.assert_(union_idx.equals(expected))
 
+    def test_is_monotonic_incomparable(self):
+        index = Index([5, datetime.now(), 7])
+        self.assert_(not index.is_monotonic)
+
+    def test_get_set_value(self):
+        values = np.random.randn(100)
+        date = self.dateIndex[67]
+
+        assert_almost_equal(self.dateIndex.get_value(values, date),
+                            values[67])
+
+        self.dateIndex.set_value(values, date, 10)
+        self.assertEquals(values[67], 10)
 
 class TestInt64Index(unittest.TestCase):
 
@@ -881,6 +894,9 @@ class TestMultiIndex(unittest.TestCase):
         result = index.truncate(before=1, after=2)
         self.assertEqual(len(result.levels[0]), 2)
 
+        # after < before
+        self.assertRaises(ValueError, index.truncate, 3, 1)
+
     def test_get_indexer(self):
         major_axis = Index(range(4))
         minor_axis = Index(range(2))
@@ -928,7 +944,8 @@ class TestMultiIndex(unittest.TestCase):
         self.assert_(self.index.equal_levels(self.index))
 
         self.assert_(not self.index.equals(self.index[:-1]))
-        self.assert_(not self.index.equals(self.index.get_tuple_index()))
+
+        self.assert_(self.index.equals(self.index.get_tuple_index()))
 
         # different number of levels
         index = MultiIndex(levels=[Index(range(4)),
@@ -1193,6 +1210,31 @@ class TestMultiIndex(unittest.TestCase):
         _check_all(Index(['one']))
         _check_all(Index(['one', 'three']))
 
+        # some corner cases
+        idx = Index(['three', 'one', 'two'])
+        result = idx.join(self.index, level='second')
+        self.assert_(isinstance(result, MultiIndex))
+
+        self.assertRaises(Exception, self.index.join, self.index, level=1)
+
+    def test_reindex(self):
+        result, indexer = self.index.reindex(list(self.index[:4]))
+        self.assert_(isinstance(result, MultiIndex))
+
+        result, indexer = self.index.reindex(list(self.index))
+        self.assert_(isinstance(result, MultiIndex))
+        self.assert_(indexer is None)
+
+    def test_reindex_level(self):
+        idx = Index(['one'])
+
+        target, indexer = self.index.reindex(idx, level='second')
+        target2, indexer2 = idx.reindex(self.index, idx, level='second')
+
+        exp_index = self.index.join(idx, level='second', how='left')
+        self.assert_(target.equals(exp_index))
+        self.assert_(target2.equals(exp_index))
+
     def test_has_duplicates(self):
         self.assert_(not self.index.has_duplicates)
         self.assert_(self.index.append(self.index).has_duplicates)
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index e249a0c98..01155a0e1 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -618,6 +618,9 @@ class TestMultiLevel(unittest.TestCase):
         expected = self.ymd.T.swaplevel(0, 1, axis=1).swaplevel(1, 2, axis=1)
         assert_frame_equal(result, expected)
 
+        self.assertRaises(Exception, self.ymd.index.reorder_levels,
+                          [1, 2, 3])
+
     def test_insert_index(self):
         df = self.ymd[:5].T
         df[2000, 1, 10] = df[2000, 1, 7]
