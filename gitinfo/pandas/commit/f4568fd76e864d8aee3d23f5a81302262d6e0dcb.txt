commit f4568fd76e864d8aee3d23f5a81302262d6e0dcb
Author: Thijs Damsma <tdamsma@gmail.com>
Date:   Wed Feb 20 09:04:31 2019 +0100

    [CLN] Excel Module Cleanups (#25275)
    
    Closes gh-25153
    
    Authored-By: tdamsma <tdamsma@gmail.com>

diff --git a/pandas/io/excel/_base.py b/pandas/io/excel/_base.py
index ed5943e9a..8f7bf8e04 100644
--- a/pandas/io/excel/_base.py
+++ b/pandas/io/excel/_base.py
@@ -590,9 +590,8 @@ class ExcelWriter(object):
                     if engine == 'auto':
                         engine = _get_default_writer(ext)
                 except KeyError:
-                    error = ValueError("No engine for filetype: '{ext}'"
-                                       .format(ext=ext))
-                    raise error
+                    raise ValueError("No engine for filetype: '{ext}'"
+                                     .format(ext=ext))
             cls = get_writer(engine)
 
         return object.__new__(cls)
diff --git a/pandas/io/excel/_util.py b/pandas/io/excel/_util.py
index 1aeaf70f0..49255d83d 100644
--- a/pandas/io/excel/_util.py
+++ b/pandas/io/excel/_util.py
@@ -5,32 +5,39 @@ from pandas.compat import lrange, range
 
 from pandas.core.dtypes.common import is_integer, is_list_like
 
-from pandas.core import config
-
-_writer_extensions = ["xlsx", "xls", "xlsm"]
-
-
 _writers = {}
 
 
 def register_writer(klass):
-    """Adds engine to the excel writer registry. You must use this method to
-    integrate with ``to_excel``. Also adds config options for any new
-    ``supported_extensions`` defined on the writer."""
+    """
+    Add engine to the excel writer registry.io.excel.
+
+    You must use this method to integrate with ``to_excel``.
+
+    Parameters
+    ----------
+    klass : ExcelWriter
+    """
     if not callable(klass):
         raise ValueError("Can only register callables as engines")
     engine_name = klass.engine
     _writers[engine_name] = klass
-    for ext in klass.supported_extensions:
-        if ext.startswith('.'):
-            ext = ext[1:]
-        if ext not in _writer_extensions:
-            config.register_option("io.excel.{ext}.writer".format(ext=ext),
-                                   engine_name, validator=str)
-            _writer_extensions.append(ext)
 
 
 def _get_default_writer(ext):
+    """
+    Return the default writer for the given extension.
+
+    Parameters
+    ----------
+    ext : str
+        The excel file extension for which to get the default engine.
+
+    Returns
+    -------
+    str
+        The default engine for the extension.
+    """
     _default_writers = {'xlsx': 'openpyxl', 'xlsm': 'openpyxl', 'xls': 'xlwt'}
     try:
         import xlsxwriter  # noqa
@@ -230,8 +237,6 @@ def _fill_mi_header(row, control_row):
 
     return _maybe_convert_to_string(row), control_row
 
-# fill blank if index_col not None
-
 
 def _pop_header_name(row, index_col):
     """
diff --git a/pandas/tests/io/test_excel.py b/pandas/tests/io/test_excel.py
index 09b2d86bd..04c9c58a3 100644
--- a/pandas/tests/io/test_excel.py
+++ b/pandas/tests/io/test_excel.py
@@ -2359,7 +2359,7 @@ class TestExcelWriterEngineTests(object):
         class DummyClass(ExcelWriter):
             called_save = False
             called_write_cells = False
-            supported_extensions = ['test', 'xlsx', 'xls']
+            supported_extensions = ['xlsx', 'xls']
             engine = 'dummy'
 
             def save(self):
@@ -2377,12 +2377,9 @@ class TestExcelWriterEngineTests(object):
 
         with pd.option_context('io.excel.xlsx.writer', 'dummy'):
             register_writer(DummyClass)
-            writer = ExcelWriter('something.test')
+            writer = ExcelWriter('something.xlsx')
             assert isinstance(writer, DummyClass)
             df = tm.makeCustomDataframe(1, 1)
-
-            func = lambda: df.to_excel('something.test')
-            check_called(func)
             check_called(lambda: df.to_excel('something.xlsx'))
             check_called(
                 lambda: df.to_excel(
