commit 0dd6c3770198d0b24150c0498baba55191b0ed07
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jan 2 14:16:53 2012 -0500

    TST: test convert_dummies, pandas/core test coverage complete

diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 52f7c880e..8fbe34f36 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -1108,64 +1108,6 @@ class Panel(NDFrame):
 WidePanel = Panel
 LongPanel = DataFrame
 
-def make_dummies(frame, item):
-    """
-    Use unique values in column of panel to construct DataFrame containing
-    dummy variables in the columns (constructed from the unique values)
-
-    Parameters
-    ----------
-    item : object
-        Value in panel items Index
-
-    Returns
-    -------
-    dummies : DataFrame
-    """
-    from pandas import Factor
-    factor = Factor(frame[item].values)
-    values = np.eye(len(factor.levels))
-    dummy_mat = values.take(factor.labels, axis=0)
-    return DataFrame(dummy_mat, columns=factor.levels, index=frame.index)
-
-def make_axis_dummies(frame, axis='minor', transform=None):
-    """
-    Construct 1-0 dummy variables corresponding to designated axis
-    labels
-
-    Parameters
-    ----------
-    axis : {'major', 'minor'}, default 'minor'
-    transform : function, default None
-        Function to apply to axis labels first. For example, to
-        get "day of week" dummies in a time series regression you might
-        call:
-            make_axis_dummies(panel, axis='major',
-                              transform=lambda d: d.weekday())
-    Returns
-    -------
-    dummies : DataFrame
-        Column names taken from chosen axis
-    """
-    numbers = {
-        'major' : 0,
-        'minor' : 1
-    }
-    num = numbers.get(axis, axis)
-
-    items = frame.index.levels[num]
-    labels = frame.index.labels[num]
-    if transform is not None:
-        mapped_items = items.map(transform)
-        factor = Factor(mapped_items.take(labels))
-        labels = factor.labels
-        items = factor.levels
-
-    values = np.eye(len(items), dtype=float)
-    values = values.take(labels, axis=0)
-
-    return DataFrame(values, columns=items, index=frame.index)
-
 def _prep_ndarray(values, copy=True):
     if not isinstance(values, np.ndarray):
         values = np.asarray(values)
diff --git a/pandas/core/reshape.py b/pandas/core/reshape.py
index 216e59b98..b9f00320d 100644
--- a/pandas/core/reshape.py
+++ b/pandas/core/reshape.py
@@ -485,29 +485,80 @@ def melt(frame, id_vars=None, value_vars=None):
     mdata['variable'] = np.asarray(frame.columns).repeat(N)
     return DataFrame(mdata, columns=mcolumns)
 
-def make_dummies(data, cat_variables):
+def convert_dummies(data, cat_variables, prefix_sep='_'):
     """
+    Compute DataFrame with specified columns converted to dummy variables (0 /
+    1). Result columns will be prefixed with the column name, then the level
+    name, e.g. 'A_foo' for column A and level foo
 
     Parameters
     ----------
+    data : DataFrame
+    cat_variables : list-like
+        Must be column names in the DataFrame
+    prefix_sep : string, default '_'
+        String to use to separate column name from dummy level
 
     Returns
     -------
     dummies : DataFrame
     """
     result = data.drop(cat_variables, axis=1)
-
     for variable in cat_variables:
-        dummies = _get_dummy_frame(data, variable)
+        dummies = make_column_dummies(data, variable, prefix=True,
+                                      prefix_sep=prefix_sep)
         result = result.join(dummies)
     return result
 
-def _get_dummy_frame(data, column):
+def make_column_dummies(data, column, prefix=False, prefix_sep='_'):
     from pandas import Factor
-    factor = Factor(data[column])
-    dummy_mat = np.eye(len(factor.levels)).take(factor.labels)
-    dummy_cols = ['%s.%s' % (column, v) for v in factor.levels]
-    dummies = DataFrame(dummy_mat, index=data.index,
-                        columns=dummy_cols)
+    factor = Factor(data[column].values)
+    dummy_mat = np.eye(len(factor.levels)).take(factor.labels, axis=0)
 
+    if prefix:
+        dummy_cols = ['%s%s%s' % (column, prefix_sep, str(v))
+                      for v in factor.levels]
+    else:
+        dummy_cols = factor.levels
+    dummies = DataFrame(dummy_mat, index=data.index, columns=dummy_cols)
     return dummies
+
+def make_axis_dummies(frame, axis='minor', transform=None):
+    """
+    Construct 1-0 dummy variables corresponding to designated axis
+    labels
+
+    Parameters
+    ----------
+    axis : {'major', 'minor'}, default 'minor'
+    transform : function, default None
+        Function to apply to axis labels first. For example, to
+        get "day of week" dummies in a time series regression you might
+        call:
+            make_axis_dummies(panel, axis='major',
+                              transform=lambda d: d.weekday())
+    Returns
+    -------
+    dummies : DataFrame
+        Column names taken from chosen axis
+    """
+    from pandas import Factor
+
+    numbers = {
+        'major' : 0,
+        'minor' : 1
+    }
+    num = numbers.get(axis, axis)
+
+    items = frame.index.levels[num]
+    labels = frame.index.labels[num]
+    if transform is not None:
+        mapped_items = items.map(transform)
+        factor = Factor(mapped_items.take(labels))
+        labels = factor.labels
+        items = factor.levels
+
+    values = np.eye(len(items), dtype=float)
+    values = values.take(labels, axis=0)
+
+    return DataFrame(values, columns=items, index=frame.index)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 29247d65a..971b9cdba 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -460,7 +460,7 @@ copy : boolean, default False
         return result
 
     def to_string(self, buf=None, na_rep='NaN', float_format=None, nanRep=None,
-                  length=False):
+                  length=False, name=False):
         if nanRep is not None:  # pragma: no cover
             import warnings
             warnings.warn("nanRep is deprecated, use na_rep",
@@ -468,7 +468,7 @@ copy : boolean, default False
             na_rep = nanRep
 
         the_repr = self._get_repr(float_format=float_format, na_rep=na_rep,
-                                  length=length)
+                                  length=length, name=name)
         if buf is None:
             return the_repr
         else:
@@ -1149,13 +1149,7 @@ copy : boolean, default False
             for i, idx in enumerate(new_index):
                 lv = self.get(idx, fill_value)
                 rv = other.get(idx, fill_value)
-
-                # not thrilled about this but...
-                try:
-                    res = func(lv, rv)
-                except Exception:
-                    res = np.nan
-                new_values[i] = res
+                new_values[i] = func(lv, rv)
         else:
             new_index = self.index
             new_values = func(self.values, other)
diff --git a/pandas/stats/plm.py b/pandas/stats/plm.py
index fe9b2fdb1..975b97305 100644
--- a/pandas/stats/plm.py
+++ b/pandas/stats/plm.py
@@ -208,7 +208,7 @@ class PanelOLS(OLS):
         -------
         DataFrame
         """
-        from pandas.core.panel import make_axis_dummies
+        from pandas.core.reshape import make_axis_dummies
 
         if not self._entity_effects:
             return panel
@@ -244,7 +244,7 @@ class PanelOLS(OLS):
         -------
         DataFrame
         """
-        from pandas.core.panel import make_dummies
+        from pandas.core.reshape import make_column_dummies
 
         if not self._x_effects:
             return panel
@@ -254,7 +254,7 @@ class PanelOLS(OLS):
         for effect in self._x_effects:
             self.log('-- Adding fixed effect dummies for %s' % effect)
 
-            dummies = make_dummies(panel, effect)
+            dummies = make_column_dummies(panel, effect, prefix=False)
 
             val_map = cat_mappings.get(effect)
             if val_map:
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 15ba83c7c..891f74031 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -1101,11 +1101,13 @@ class TestLongPanel(unittest.TestCase):
                           wp.major_axis[2])
 
     def test_axis_dummies(self):
-        minor_dummies = panelmod.make_axis_dummies(self.panel, 'minor')
+        from pandas.core.reshape import make_axis_dummies
+
+        minor_dummies = make_axis_dummies(self.panel, 'minor')
         self.assertEqual(len(minor_dummies.columns),
                          len(self.panel.index.levels[1]))
 
-        major_dummies = panelmod.make_axis_dummies(self.panel, 'major')
+        major_dummies = make_axis_dummies(self.panel, 'major')
         self.assertEqual(len(major_dummies.columns),
                          len(self.panel.index.levels[0]))
 
@@ -1114,7 +1116,7 @@ class TestLongPanel(unittest.TestCase):
                    'C' : 'two',
                    'D' : 'two'}
 
-        transformed = panelmod.make_axis_dummies(self.panel, 'minor',
+        transformed = make_axis_dummies(self.panel, 'minor',
                                                   transform=mapping.get)
         self.assertEqual(len(transformed.columns), 2)
         self.assert_(np.array_equal(transformed.columns, ['one', 'two']))
@@ -1122,9 +1124,11 @@ class TestLongPanel(unittest.TestCase):
         # TODO: test correctness
 
     def test_get_dummies(self):
+        from pandas.core.reshape import make_column_dummies, make_axis_dummies
+
         self.panel['Label'] = self.panel.index.labels[1]
-        minor_dummies = panelmod.make_axis_dummies(self.panel, 'minor')
-        dummies = panelmod.make_dummies(self.panel, 'Label')
+        minor_dummies = make_axis_dummies(self.panel, 'minor')
+        dummies = make_column_dummies(self.panel, 'Label')
         self.assert_(np.array_equal(dummies.values, minor_dummies.values))
 
     def test_apply(self):
diff --git a/pandas/tests/test_reshape.py b/pandas/tests/test_reshape.py
index 50531068e..036ee8677 100644
--- a/pandas/tests/test_reshape.py
+++ b/pandas/tests/test_reshape.py
@@ -1,4 +1,8 @@
-from pandas.core.reshape import melt
+from pandas import DataFrame
+
+import numpy as np
+
+from pandas.core.reshape import melt, convert_dummies
 import pandas.util.testing as tm
 
 def test_melt():
@@ -10,6 +14,30 @@ def test_melt():
     molten2 = melt(df, id_vars=['id1'])
     molten3 = melt(df, id_vars=['id1', 'id2'])
 
+def test_convert_dummies():
+    df = DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',
+                           'foo', 'bar', 'foo', 'foo'],
+                    'B' : ['one', 'one', 'two', 'three',
+                           'two', 'two', 'one', 'three'],
+                    'C' : np.random.randn(8),
+                    'D' : np.random.randn(8)})
+
+    result = convert_dummies(df, ['A', 'B'])
+    result2 = convert_dummies(df, ['A', 'B'], prefix_sep='.')
+
+    expected = DataFrame({'A_foo' : [1, 0, 1, 0, 1, 0, 1, 1],
+                          'A_bar' : [0, 1, 0, 1, 0, 1, 0, 0],
+                          'B_one' : [1, 1, 0, 0, 0, 0, 1, 0],
+                          'B_two' : [0, 0, 1, 0, 1, 1, 0, 0],
+                          'B_three' : [0, 0, 0, 1, 0, 0, 0, 1],
+                          'C' : df['C'].values,
+                          'D' : df['D'].values},
+                         columns=result.columns, dtype=float)
+    expected2 = expected.rename(columns=lambda x: x.replace('_', '.'))
+
+    tm.assert_frame_equal(result, expected)
+    tm.assert_frame_equal(result2, expected2)
+
 if __name__ == '__main__':
     import nose
     nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index fdd5f9dfb..447a0f4a8 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -568,6 +568,13 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         result = self.ts[:0].to_string(length=0)
         self.assertEqual(result, '')
 
+        # name and length
+        cp = self.ts.copy()
+        cp.name = 'foo'
+        result = cp.to_string(length=True, name=True)
+        last_line = result.split('\n')[-1].strip()
+        self.assertEqual(last_line, "Name: foo, Length: %d" % len(cp))
+
     def test_iter(self):
         for i, val in enumerate(self.series):
             self.assertEqual(val, self.series[i])
