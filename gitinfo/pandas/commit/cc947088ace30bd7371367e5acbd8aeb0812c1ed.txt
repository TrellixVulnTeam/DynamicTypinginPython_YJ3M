commit cc947088ace30bd7371367e5acbd8aeb0812c1ed
Author: Phillip Cloud <cpcloud@gmail.com>
Date:   Sat Jun 15 14:08:37 2013 -0400

    ENH/CLN: use @jtratner's decorator to check for raised warnings

diff --git a/pandas/tests/test_graphics.py b/pandas/tests/test_graphics.py
index 4851ea975..e57e5a9af 100644
--- a/pandas/tests/test_graphics.py
+++ b/pandas/tests/test_graphics.py
@@ -199,13 +199,12 @@ class TestSeriesPlots(unittest.TestCase):
 
     @slow
     def test_valid_object_plot(self):
-        from pandas.io.pytables import PerformanceWarning
+        from pandas.io.common import PerformanceWarning
         s = Series(range(10), dtype=object)
         kinds = 'line', 'bar', 'barh', 'kde', 'density'
 
         for kind in kinds:
-            tm.assert_warns(PerformanceWarning, _check_plot_works, s.plot,
-                            kind=kind)
+            _check_plot_works(s.plot, kind=kind)
 
     def test_partially_invalid_plot_data(self):
         s = Series(['a', 'b', 1.0, 2])
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index 51bad322f..4e85d742e 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -877,25 +877,21 @@ class MPLPlot(object):
         return (len(self.data.columns), 1)
 
     def _compute_plot_data(self):
-        from pandas.io.pytables import PerformanceWarning
         try:
-            # might be a frame
+            # might be an ndframe
             numeric_data = self.data._get_numeric_data()
-        except AttributeError:
+        except AttributeError:  # TODO: rm in 0.12 (series-inherit-ndframe)
             numeric_data = self.data
             orig_dtype = numeric_data.dtype
 
+            # possible object array of numeric data
             if orig_dtype == np.object_:
-                # attempt soft conversion, but raise a perf warning
-                numeric_data = numeric_data.convert_objects()
-                num_data_dtype = numeric_data.dtype
+                numeric_data = numeric_data.convert_objects()  # soft convert
 
-                if num_data_dtype == np.object_:
-                    raise TypeError('No numeric data to plot')
-                else:
-                    warnings.warn('Coerced object dtype to numeric dtype, '
-                                  'you should avoid object dtyped Series if '
-                                  'possible', PerformanceWarning)
+                # still an object dtype so we can't plot it
+                if numeric_data.dtype == np.object_:
+                    raise TypeError('Series has object dtype and cannot be'
+                                    ' converted: no numeric data to plot')
 
         try:
             is_empty = numeric_data.empty
@@ -904,7 +900,8 @@ class MPLPlot(object):
 
         # no empty frames or series allowed
         if is_empty:
-            raise TypeError('No numeric data to plot')
+            raise TypeError('Empty {0!r}: no numeric data to '
+                            'plot'.format(numeric_data.__class__.__name__))
 
         self.data = numeric_data
 
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 66fc7d66f..20e59b6d3 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -40,7 +40,7 @@ K = 4
 
 def rands(n):
     choices = string.ascii_letters + string.digits
-    return ''.join([random.choice(choices) for _ in xrange(n)])
+    return ''.join(random.choice(choices) for _ in xrange(n))
 
 
 def randu(n):
@@ -749,13 +749,46 @@ def stdin_encoding(encoding=None):
     sys.stdin = _stdin
 
 
-def assert_warns(warning, f, *args, **kwargs):
+@contextmanager
+def assert_produces_warning(expected_warning=Warning, filter_level="always"):
     """
-    From: http://stackoverflow.com/questions/3892218/how-to-test-with-pythons-unittest-that-a-warning-has-been-thrown
+    Context manager for running code that expects to raise (or not raise)
+    warnings.  Checks that code raises the expected warning and only the
+    expected warning. Pass ``False`` or ``None`` to check that it does *not*
+    raise a warning. Defaults to ``exception.Warning``, baseclass of all
+    Warnings. (basically a wrapper around ``warnings.catch_warnings``).
+
+    >>> import warnings
+    >>> with assert_produces_warning():
+    ...     warnings.warn(UserWarning())
+    ...
+    >>> with assert_produces_warning(False):
+    ...     warnings.warn(RuntimeWarning())
+    ...
+    Traceback (most recent call last):
+        ...
+    AssertionError: Caused unexpected warning(s): ['RuntimeWarning'].
+    >>> with assert_produces_warning(UserWarning):
+    ...     warnings.warn(RuntimeWarning())
+    Traceback (most recent call last):
+        ...
+    AssertionError: Did not see expected warning of class 'UserWarning'.
+
+    ..warn:: This is *not* thread-safe.
     """
-    with warnings.catch_warnings(record=True) as warning_list:
-        warnings.simplefilter('always')
-        f(*args, **kwargs)
-        msg = '{0!r} not raised'.format(warning)
-        assert any(issubclass(item.category, warning)
-                   for item in warning_list), msg
+    with warnings.catch_warnings(record=True) as w:
+        saw_warning = False
+        warnings.simplefilter(filter_level)
+        yield w
+        extra_warnings = []
+        for actual_warning in w:
+            if (expected_warning and issubclass(actual_warning.category,
+                                                expected_warning)):
+                saw_warning = True
+            else:
+                extra_warnings.append(actual_warning.category.__name__)
+        if expected_warning:
+            assert saw_warning, ("Did not see expected warning of class %r."
+                                 % expected_warning.__name__)
+            assert not extra_warnings, ("Caused unexpected warning(s): %r."
+                                        % extra_warnings)
