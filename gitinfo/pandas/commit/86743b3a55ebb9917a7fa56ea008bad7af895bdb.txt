commit 86743b3a55ebb9917a7fa56ea008bad7af895bdb
Author: Phillip Cloud <cpcloud@gmail.com>
Date:   Sun May 26 21:39:07 2013 -0400

    ENH/API: implemenet __nonzero__ for NDFrame
    
    ENH/API: remove __nonzero__ in frames, use NDFrame implementation

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 1dfeae997..8dc1a921e 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -595,14 +595,6 @@ class DataFrame(NDFrame):
 
     #----------------------------------------------------------------------
     # Class behavior
-
-    @property
-    def empty(self):
-        return not (len(self.columns) > 0 and len(self.index) > 0)
-
-    def __nonzero__(self):
-        raise ValueError("Cannot call bool() on DataFrame.")
-
     def _repr_fits_vertical_(self):
         """
         Check length against max_rows.
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index aa574219a..7dd0315d7 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -559,6 +559,13 @@ class NDFrame(PandasObject):
     def values(self):
         return self._data.as_matrix()
 
+    @property
+    def empty(self):
+        return not all(len(ax) > 0 for ax in self.axes)
+
+    def __nonzero__(self):
+        return not self.empty
+
     @property
     def ndim(self):
         return self._data.ndim
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 1de643985..39452ece7 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -10379,9 +10379,15 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         df = DataFrame([(1, 2), (3, 4)], index=index, columns=["A", "B"])
         self.assertEqual(df.ix[IndexType("foo", "bar")]["A"], 1)
 
-    def test_bool_raises_value_error_1069(self):
+    def test_bool_empty_nonzero(self):
         df = DataFrame([1, 2, 3])
-        self.failUnlessRaises(ValueError, lambda: bool(df))
+        self.assertTrue(bool(df))
+        self.assertFalse(df.empty)
+        df = DataFrame(index=['a', 'b'], columns=['c', 'd']).dropna()
+        self.assertFalse(bool(df))
+        self.assertFalse(bool(df.T))
+        self.assertTrue(df.empty)
+        self.assertTrue(df.T.empty)
 
     def test_any_all(self):
         self._check_bool_op('any', np.any, has_skipna=True, has_bool_only=True)
