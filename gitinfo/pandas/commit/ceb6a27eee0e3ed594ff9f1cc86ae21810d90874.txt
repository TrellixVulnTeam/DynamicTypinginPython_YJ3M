commit ceb6a27eee0e3ed594ff9f1cc86ae21810d90874
Author: Adam Klein <adamklein@gmail.com>
Date:   Tue Jan 3 17:36:21 2012 -0500

    added docs covering new features

diff --git a/RELEASE.rst b/RELEASE.rst
index b069457cb..e5eb3b588 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -47,8 +47,7 @@ pandas 0.7.0
   - Add ``level`` option to the ``reindex`` and ``align`` methods on Series and
     DataFrame for broadcasting values across a level (GH #542, PR #552, others)
   - Add attribute-based item access to ``Panel`` and add IPython completion (PR
-    #563)
-  - Can pass list of dicts to DataFrame constructor (GH #526)
+    #554)
   - Add ``logy`` option to ``Series.plot`` for log-scaling on the Y axis
 
 **API Changes**
diff --git a/doc/source/basics.rst b/doc/source/basics.rst
index 818d6b0db..41ad9e8b0 100644
--- a/doc/source/basics.rst
+++ b/doc/source/basics.rst
@@ -262,7 +262,9 @@ values:
 
    df.cumsum()
 
-Here is a quick reference summary table of common functions
+Here is a quick reference summary table of common functions. Each also takes an
+optional ``level`` parameter which applies only if the object has a
+:ref:`hierarchical index<indexing.hierarchical>`.
 
 .. csv-table::
     :header: "Function", "Description"
@@ -482,6 +484,9 @@ With a DataFrame, you can simultaneously reindex the index and columns:
    df
    df.reindex(index=['c', 'f', 'b'], columns=['three', 'two', 'one'])
 
+For convenience, you may utilize the ``reindex_axis`` method, which takes the
+labels and a keyword ``axis`` paramater.
+
 Note that the ``Index`` objects containing the actual axis labels can be
 **shared** between objects. So if we have a Series and a DataFrame, the
 following can be done:
@@ -534,6 +539,9 @@ make this simpler:
    df2
    df.reindex_like(df2)
 
+Reindexing with ``reindex_axis``
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
 .. _basics.align:
 
 Aligning objects with each other with ``align``
@@ -717,6 +725,25 @@ For example:
       ...:     print frame
       ...:
 
+
+.. _basics.iterrows:
+
+iterrows
+~~~~~~~~
+
+New in v0.7 is the ability to iterate efficiently through rows of a DataFrame.
+For instance, a contrived way to transpose the dataframe would be:
+
+.. ipython:: python
+
+   df2 = DataFrame({'x': [1, 2, 3], 'y': [4, 5, 6]})
+   print df2
+   print df2.T
+
+   df2_t = DataFrame(dict((idx,values) for idx, values in df2.iterrows()))
+   print df2_t
+
+
 Sorting by index and value
 --------------------------
 
diff --git a/doc/source/computation.rst b/doc/source/computation.rst
index 083859743..8863f790c 100644
--- a/doc/source/computation.rst
+++ b/doc/source/computation.rst
@@ -331,14 +331,12 @@ Generally speaking, the ``ols`` works by being given a ``y`` (response) object
 and an ``x`` (predictors) object. These can take many forms:
 
   - ``y``: a Series, ndarray, or DataFrame (panel model)
-  - ``x``: Series, DataFrame, dict of Series, dict of DataFrame, Panel,
-    LongPanel
+  - ``x``: Series, DataFrame, dict of Series, dict of DataFrame or Panel
 
 Based on the types of ``y`` and ``x``, the model will be inferred to either a
 panel model or a regular linear model. If the ``y`` variable is a DataFrame,
 the result will be a panel model. In this case, the ``x`` variable must either
-be a Panel, LongPanel, or a dict of DataFrame (which will be coerced into a
-Panel).
+be a Panel, or a dict of DataFrame (which will be coerced into a Panel).
 
 Standard OLS regression
 ~~~~~~~~~~~~~~~~~~~~~~~
diff --git a/doc/source/dsintro.rst b/doc/source/dsintro.rst
index 7b4ca8bd9..25e5bb612 100644
--- a/doc/source/dsintro.rst
+++ b/doc/source/dsintro.rst
@@ -16,7 +16,7 @@ objects. To get started, import numpy and load pandas into your namespace:
    import numpy as np
    from pandas import *
    randn = np.random.randn
-   np.set_printoptions(precision=4, suppress=True, max_columns=10)
+   np.set_printoptions(precision=4, suppress=True, max_columns=8)
 
 .. ipython:: python
 
@@ -223,9 +223,6 @@ not matching up to the passed index.
 If axis labels are not passed, they will be constructed from the input data
 based on common sense rules.
 
-Main constructor
-~~~~~~~~~~~~~~~~
-
 From dict of Series or dicts
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
@@ -564,7 +561,7 @@ R package):
 .. ipython:: python
 
    baseball = read_csv('data/baseball.csv')
-   baseball
+   print baseball
 
 However, using ``to_string`` will return a string representation of the
 DataFrame in tabular form, though it won't always fit the console width:
@@ -635,7 +632,8 @@ slightly arbitrary:
 
 Construction of Panels works about like you would expect:
 
-**3D ndarray with optional axis labels**
+From 3D ndarray with optional axis labels
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 .. ipython:: python
 
@@ -645,7 +643,8 @@ Construction of Panels works about like you would expect:
    wp
 
 
-**dict of DataFrame objects**
+From dict of DataFrame objects
+~~~~~~~~~~~~~~~~~~~~~~~~~
 
 .. ipython:: python
 
@@ -683,6 +682,22 @@ Orient is especially useful for mixed-type DataFrames.
    on, of course, in future releases. And faster if you join me in working on
    the codebase.
 
+.. _dsintro.to_panel:
+
+From DataFrame using ``to_panel`` method
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+This method was introduced in v0.7 to replace ``LongPanel.to_long``, and converts
+a DataFrame with a two-level index to a Panel.
+
+.. ipython:: python
+
+   midx = MultiIndex(levels=[['one', 'two'], ['x','y']], labels=[[1,1,0,0],[1,0,1,0]])
+   df = DataFrame({'A' : [1, 2, 3, 4], 'B': [5, 6, 7, 8]}, index=midx)
+   df.to_panel()
+
+.. _dsintro.panel_item_selection:
+
 Item selection / addition / deletion
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
@@ -694,7 +709,9 @@ of DataFrames:
    wp['Item1']
    wp['Item3'] = wp['Item1'] / wp['Item2']
 
-The API for insertion and deletion is the same as for DataFrame.
+The API for insertion and deletion is the same as for DataFrame. And as with
+DataFrame, if the item is a valid python identifier, you can access it as an
+attribute and tab-complete it in IPython.
 
 Indexing / Selection
 ~~~~~~~~~~~~~~~~~~~~
diff --git a/doc/source/indexing.rst b/doc/source/indexing.rst
index bc958dabe..26aa484c7 100644
--- a/doc/source/indexing.rst
+++ b/doc/source/indexing.rst
@@ -618,6 +618,29 @@ but as you use it you may uncover corner cases or unintuitive behavior. If you
 do find something like this, do not hesitate to report the issue or ask on the
 mailing list.
 
+.. _indexing.advanced_reindex:
+
+Advanced reindexing and alignment with hierarchical index
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+As of v0.7, the parameter ``level`` has been added to the ``reindex`` and
+``align`` methods of pandas objects. This is useful to broadcast values across
+a level. For instance:
+
+.. ipython:: python
+
+   midx = MultiIndex(levels=[['one', 'two'], ['x','y']],
+                     labels=[[1,1,0,0],[1,0,1,0]])
+   df = DataFrame(randn(4,2), index=midx)
+   print df
+   df2 = df.mean(level=0)
+   print df2
+   print df2.reindex(df.index, level=0)
+   df_aligned, df2_aligned = df.align(df2, level=0)
+   print df_aligned
+   print df2_aligned
+
+
 The need for sortedness
 ~~~~~~~~~~~~~~~~~~~~~~~
 
diff --git a/doc/source/visualization.rst b/doc/source/visualization.rst
index 68a8bb005..0dd973ded 100644
--- a/doc/source/visualization.rst
+++ b/doc/source/visualization.rst
@@ -79,6 +79,19 @@ Some other options are available, like plotting each Series on a different axis:
    @savefig frame_plot_subplots.png width=4.5in
    df.plot(subplots=True, figsize=(8, 8)); plt.legend(loc='best')
 
+You may pass ``logy`` to get a log-scale Y axis.
+
+.. ipython:: python
+
+   plt.figure();
+
+   ts = Series(randn(1000), index=DateRange('1/1/2000', periods=1000))
+   ts = np.exp(ts.cumsum())
+
+   @savefig series_plot_logy.png width=4.5in
+   ts.plot(logy=True)
+
+
 Targeting different subplots
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
diff --git a/doc/source/whatsnew/v0.7.0.txt b/doc/source/whatsnew/v0.7.0.txt
index 7b320930a..fbe325183 100644
--- a/doc/source/whatsnew/v0.7.0.txt
+++ b/doc/source/whatsnew/v0.7.0.txt
@@ -29,25 +29,26 @@ New features
 
 - :ref:`Add<indexing.dictionarylike>` dict-like ``get`` function to DataFrame and Panel (PR521_)
 
-- ``DataFrame.iterrows`` method for efficiently iterating through the rows of
-  a DataFrame
+- :ref:`Add<basics.iterrows>` ``DataFrame.iterrows`` method for efficiently
+  iterating through the rows of a DataFrame
 
-- Added ``DataFrame.to_panel`` with code adapted from ``LongPanel.to_long``
+- :ref:`Add<dsintro.to_panel>` ``DataFrame.to_panel`` with code adapted from
+  ``LongPanel.to_long``
 
-- ``reindex_axis`` method added to DataFrame
+- :ref:`Add <basics.reindexing>` ``reindex_axis`` method added to DataFrame
 
-- Add ``level`` option to binary arithmetic functions on ``DataFrame`` and
-  ``Series``
+- :ref:`Add <basics.stats>` ``level`` option to binary arithmetic functions on
+  ``DataFrame`` and ``Series``
 
-- Add ``level`` option to the ``reindex`` and ``align`` methods on Series and
-  DataFrame for broadcasting values across a level (GH542_, PR552_, others)
+- :ref:`Add <indexing.advanced_reindex>` ``level`` option to the ``reindex``
+  and ``align`` methods on Series and DataFrame for broadcasting values across
+  a level (GH542_, PR552_, others)
 
-- Add attribute-based item access to ``Panel`` and add IPython completion
-  (PR563_)
+- :ref:`Add <dsintro.panel_item_selection>` attribute-based item access to
+  ``Panel`` and add IPython completion (PR563_)
 
-- Can pass list of dicts to DataFrame constructor (GH526_)
-
-- Add ``logy`` option to ``Series.plot`` for log-scaling on the Y axis
+- :ref:`Add <visualization.basic>` ``logy`` option to ``Series.plot`` for
+  log-scaling on the Y axis
 
 Performance improvements
 ~~~~~~~~~~~~~~~~~~~~~~~~
@@ -113,14 +114,13 @@ similar operation to the above but using a Python function:
    :width: 6in
 
 - Better error message in DataFrame constructor when passed column labels
-  don't match data (GH #497)
+  don't match data (GH497_)
 - Substantially improve performance of multi-GroupBy aggregation when a
-  Python function is passed, reuse ndarray object in Cython (GH #496)
-- Can store objects indexed by tuples and floats in HDFStore (GH #492)
-- Don't print length by default in Series.to_string, add `length` option (GH
-  #489)
+  Python function is passed, reuse ndarray object in Cython (GH496_)
+- Can store objects indexed by tuples and floats in HDFStore (GH492_)
+- Don't print length by default in Series.to_string, add `length` option (GH489_)
 - Improve Cython code for multi-groupby to aggregate without having to sort
-  the data (GH #93)
+  the data (GH93_)
 - Improve MultiIndex reindexing speed by storing tuples in the MultiIndex,
   test for backwards unpickling compatibility
 - Improve column reindexing performance by using specialized Cython take
@@ -130,25 +130,33 @@ similar operation to the above but using a Python function:
   regression from prior versions
 - Friendlier error message in setup.py if NumPy not installed
 - Use common set of NA-handling operations (sum, mean, etc.) in Panel class
-  also (GH #536)
+  also (GH536_)
 - Default name assignment when calling ``reset_index`` on DataFrame with a
-  regular (non-hierarchical) index (GH #476)
+  regular (non-hierarchical) index (GH476_)
 - Use Cythonized groupers when possible in Series/DataFrame stat ops with
-  ``level`` parameter passed (GH #545)
+  ``level`` parameter passed (GH545_)
 - Ported skiplist data structure to C to speed up ``rolling_median`` by about
-  5-10x in most typical use cases (GH #374)
+  5-10x in most typical use cases (GH374_)
 
 .. _GH220: https://github.com/wesm/pandas/issues/220
 .. _GH249: https://github.com/wesm/pandas/issues/249
 .. _GH267: https://github.com/wesm/pandas/issues/267
 .. _GH342: https://github.com/wesm/pandas/issues/342
+.. _GH374: https://github.com/wesm/pandas/issues/374
 .. _GH439: https://github.com/wesm/pandas/issues/439
+.. _GH476: https://github.com/wesm/pandas/issues/476
+.. _GH489: https://github.com/wesm/pandas/issues/489
 .. _GH496: https://github.com/wesm/pandas/issues/496
+.. _GH497: https://github.com/wesm/pandas/issues/497
 .. _GH498: https://github.com/wesm/pandas/issues/498
 .. _GH526: https://github.com/wesm/pandas/issues/526
+.. _GH536: https://github.com/wesm/pandas/issues/536
 .. _GH542: https://github.com/wesm/pandas/issues/542
+.. _GH545: https://github.com/wesm/pandas/issues/545
+.. _GH93: https://github.com/wesm/pandas/issues/93
 .. _GH93: https://github.com/wesm/pandas/issues/93
 .. _PR521: https://github.com/wesm/pandas/pull/521
 .. _PR534: https://github.com/wesm/pandas/pull/534
 .. _PR552: https://github.com/wesm/pandas/pull/552
+.. _PR554: https://github.com/wesm/pandas/pull/554
 .. _PR563: https://github.com/wesm/pandas/pull/563
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 727558902..e00d5f1c5 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1561,7 +1561,7 @@ class DataFrame(NDFrame):
 
         Examples
         --------
-        >>> df.reindex(['A', 'B', 'C'], axis=1)
+        >>> df.reindex_axis(['A', 'B', 'C'], axis=1)
 
         See also
         --------
