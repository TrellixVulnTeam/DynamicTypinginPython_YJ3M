commit 77e6556ab55bb2746e1d1bb1f7c3da66bba2a4a1
Author: pilkibun <51503352+pilkibun@users.noreply.github.com>
Date:   Tue Jun 18 10:07:16 2019 +0000

    CLN: introduce test decorator skip_if_np_lt(ver_string) (#26901)

diff --git a/pandas/compat/numpy/__init__.py b/pandas/compat/numpy/__init__.py
index 3499d6313..c738cc74e 100644
--- a/pandas/compat/numpy/__init__.py
+++ b/pandas/compat/numpy/__init__.py
@@ -1,9 +1,9 @@
 """ support numpy compatiblitiy across versions """
 
-import re
-import numpy as np
 from distutils.version import LooseVersion
+import re
 
+import numpy as np
 
 # numpy versioning
 _np_version = np.__version__
@@ -62,6 +62,7 @@ def np_array_datetime64_compat(arr, *args, **kwargs):
 
 
 __all__ = ['np',
+           '_np_version',
            '_np_version_under1p14',
            '_np_version_under1p15',
            '_np_version_under1p16',
diff --git a/pandas/tests/arrays/sparse/test_array.py b/pandas/tests/arrays/sparse/test_array.py
index 659f2b974..c0a1b3207 100644
--- a/pandas/tests/arrays/sparse/test_array.py
+++ b/pandas/tests/arrays/sparse/test_array.py
@@ -6,7 +6,6 @@ import numpy as np
 import pytest
 
 from pandas._libs.sparse import IntIndex
-from pandas.compat.numpy import _np_version_under1p16
 import pandas.util._test_decorators as td
 
 import pandas as pd
@@ -175,8 +174,8 @@ class TestSparseArray:
     @pytest.mark.parametrize('format', ['coo', 'csc', 'csr'])
     @pytest.mark.parametrize('size', [
         pytest.param(0,
-                     marks=pytest.mark.skipif(_np_version_under1p16,
-                                              reason='NumPy-11383')),
+                     marks=td.skip_if_np_lt("1.16",
+                                            reason='NumPy-11383')),
         10
     ])
     @td.skip_if_no_scipy
@@ -870,7 +869,7 @@ class TestSparseArrayAnalytics:
         ([1, 2, 1], 1, 0),
         ([1.0, 2.0, 1.0], 1.0, 0.0)
     ])
-    @td.skip_if_np_lt_115  # prior didn't dispatch
+    @td.skip_if_np_lt("1.15")  # prior didn't dispatch
     def test_numpy_all(self, data, pos, neg):
         # GH 17570
         out = np.all(SparseArray(data))
@@ -916,7 +915,7 @@ class TestSparseArrayAnalytics:
         ([0, 2, 0], 2, 0),
         ([0.0, 2.0, 0.0], 2.0, 0.0)
     ])
-    @td.skip_if_np_lt_115  # prior didn't dispatch
+    @td.skip_if_np_lt("1.15")  # prior didn't dispatch
     def test_numpy_any(self, data, pos, neg):
         # GH 17570
         out = np.any(SparseArray(data))
diff --git a/pandas/tests/frame/test_analytics.py b/pandas/tests/frame/test_analytics.py
index 18d8d351e..01a398584 100644
--- a/pandas/tests/frame/test_analytics.py
+++ b/pandas/tests/frame/test_analytics.py
@@ -1565,21 +1565,21 @@ class TestDataFrameAnalytics:
         (np.all, {'A': pd.Series([0, 1], dtype=int)}, False),
         (np.any, {'A': pd.Series([0, 1], dtype=int)}, True),
         pytest.param(np.all, {'A': pd.Series([0, 1], dtype='M8[ns]')}, False,
-                     marks=[td.skip_if_np_lt_115]),
+                     marks=[td.skip_if_np_lt("1.15")]),
         pytest.param(np.any, {'A': pd.Series([0, 1], dtype='M8[ns]')}, True,
-                     marks=[td.skip_if_np_lt_115]),
+                     marks=[td.skip_if_np_lt("1.15")]),
         pytest.param(np.all, {'A': pd.Series([1, 2], dtype='M8[ns]')}, True,
-                     marks=[td.skip_if_np_lt_115]),
+                     marks=[td.skip_if_np_lt("1.15")]),
         pytest.param(np.any, {'A': pd.Series([1, 2], dtype='M8[ns]')}, True,
-                     marks=[td.skip_if_np_lt_115]),
+                     marks=[td.skip_if_np_lt("1.15")]),
         pytest.param(np.all, {'A': pd.Series([0, 1], dtype='m8[ns]')}, False,
-                     marks=[td.skip_if_np_lt_115]),
+                     marks=[td.skip_if_np_lt("1.15")]),
         pytest.param(np.any, {'A': pd.Series([0, 1], dtype='m8[ns]')}, True,
-                     marks=[td.skip_if_np_lt_115]),
+                     marks=[td.skip_if_np_lt("1.15")]),
         pytest.param(np.all, {'A': pd.Series([1, 2], dtype='m8[ns]')}, True,
-                     marks=[td.skip_if_np_lt_115]),
+                     marks=[td.skip_if_np_lt("1.15")]),
         pytest.param(np.any, {'A': pd.Series([1, 2], dtype='m8[ns]')}, True,
-                     marks=[td.skip_if_np_lt_115]),
+                     marks=[td.skip_if_np_lt("1.15")]),
         (np.all, {'A': pd.Series([0, 1], dtype='category')}, False),
         (np.any, {'A': pd.Series([0, 1], dtype='category')}, True),
         (np.all, {'A': pd.Series([1, 2], dtype='category')}, True),
diff --git a/pandas/tests/series/test_analytics.py b/pandas/tests/series/test_analytics.py
index e5eb7d19d..aed08b78f 100644
--- a/pandas/tests/series/test_analytics.py
+++ b/pandas/tests/series/test_analytics.py
@@ -1105,7 +1105,7 @@ class TestSeriesAnalytics:
         dict(keepdims=True),
         dict(out=object()),
     ])
-    @td.skip_if_np_lt_115
+    @td.skip_if_np_lt("1.15")
     def test_validate_any_all_out_keepdims_raises(self, kwargs, func):
         s = pd.Series([1, 2])
         param = list(kwargs)[0]
@@ -1117,7 +1117,7 @@ class TestSeriesAnalytics:
         with pytest.raises(ValueError, match=msg):
             func(s, **kwargs)
 
-    @td.skip_if_np_lt_115
+    @td.skip_if_np_lt("1.15")
     def test_validate_sum_initial(self):
         s = pd.Series([1, 2])
         msg = (r"the 'initial' parameter is not "
@@ -1136,7 +1136,7 @@ class TestSeriesAnalytics:
             # method instead of the ufunc.
             s.median(overwrite_input=True)
 
-    @td.skip_if_np_lt_115
+    @td.skip_if_np_lt("1.15")
     def test_validate_stat_keepdims(self):
         s = pd.Series([1, 2])
         msg = (r"the 'keepdims' parameter is not "
diff --git a/pandas/util/_test_decorators.py b/pandas/util/_test_decorators.py
index 4cc316ffd..0cb82c002 100644
--- a/pandas/util/_test_decorators.py
+++ b/pandas/util/_test_decorators.py
@@ -23,6 +23,7 @@ def test_foo():
 
 For more information, refer to the ``pytest`` documentation on ``skipif``.
 """
+from distutils.version import LooseVersion
 import locale
 from typing import Optional
 
@@ -30,7 +31,7 @@ from _pytest.mark.structures import MarkDecorator
 import pytest
 
 from pandas.compat import is_platform_32bit, is_platform_windows
-from pandas.compat.numpy import _np_version_under1p15
+from pandas.compat.numpy import _np_version
 
 from pandas.core.computation.expressions import (
     _NUMEXPR_INSTALLED, _USE_NUMEXPR)
@@ -142,8 +143,6 @@ def skip_if_no(
 
 skip_if_no_mpl = pytest.mark.skipif(_skip_if_no_mpl(),
                                     reason="Missing matplotlib dependency")
-skip_if_np_lt_115 = pytest.mark.skipif(_np_version_under1p15,
-                                       reason="NumPy 1.15 or greater required")
 skip_if_mpl = pytest.mark.skipif(not _skip_if_no_mpl(),
                                  reason="matplotlib is present")
 skip_if_32bit = pytest.mark.skipif(is_platform_32bit(),
@@ -168,6 +167,13 @@ skip_if_no_ne = pytest.mark.skipif(not _USE_NUMEXPR,
                                        installed=_NUMEXPR_INSTALLED))
 
 
+def skip_if_np_lt(ver_str, reason=None, *args, **kwds):
+    if reason is None:
+        reason = "NumPy %s or greater required" % ver_str
+    return pytest.mark.skipif(_np_version < LooseVersion(ver_str),
+                              reason=reason, *args, **kwds)
+
+
 def parametrize_fixture_doc(*args):
     """
     Intended for use as a decorator for parametrized fixture,
