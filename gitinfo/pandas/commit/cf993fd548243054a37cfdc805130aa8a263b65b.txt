commit cf993fd548243054a37cfdc805130aa8a263b65b
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Tue Feb 25 12:41:12 2020 -0800

    REF/TST: method-specific files for rename, reset_index (#32227)

diff --git a/pandas/tests/frame/methods/test_rename.py b/pandas/tests/frame/methods/test_rename.py
new file mode 100644
index 000000000..e69a562f8
--- /dev/null
+++ b/pandas/tests/frame/methods/test_rename.py
@@ -0,0 +1,353 @@
+from collections import ChainMap
+
+import numpy as np
+import pytest
+
+from pandas import DataFrame, Index, MultiIndex
+import pandas._testing as tm
+
+
+class TestRename:
+    def test_rename(self, float_frame):
+        mapping = {"A": "a", "B": "b", "C": "c", "D": "d"}
+
+        renamed = float_frame.rename(columns=mapping)
+        renamed2 = float_frame.rename(columns=str.lower)
+
+        tm.assert_frame_equal(renamed, renamed2)
+        tm.assert_frame_equal(
+            renamed2.rename(columns=str.upper), float_frame, check_names=False
+        )
+
+        # index
+        data = {"A": {"foo": 0, "bar": 1}}
+
+        # gets sorted alphabetical
+        df = DataFrame(data)
+        renamed = df.rename(index={"foo": "bar", "bar": "foo"})
+        tm.assert_index_equal(renamed.index, Index(["foo", "bar"]))
+
+        renamed = df.rename(index=str.upper)
+        tm.assert_index_equal(renamed.index, Index(["BAR", "FOO"]))
+
+        # have to pass something
+        with pytest.raises(TypeError, match="must pass an index to rename"):
+            float_frame.rename()
+
+        # partial columns
+        renamed = float_frame.rename(columns={"C": "foo", "D": "bar"})
+        tm.assert_index_equal(renamed.columns, Index(["A", "B", "foo", "bar"]))
+
+        # other axis
+        renamed = float_frame.T.rename(index={"C": "foo", "D": "bar"})
+        tm.assert_index_equal(renamed.index, Index(["A", "B", "foo", "bar"]))
+
+        # index with name
+        index = Index(["foo", "bar"], name="name")
+        renamer = DataFrame(data, index=index)
+        renamed = renamer.rename(index={"foo": "bar", "bar": "foo"})
+        tm.assert_index_equal(renamed.index, Index(["bar", "foo"], name="name"))
+        assert renamed.index.name == renamer.index.name
+
+    @pytest.mark.parametrize(
+        "args,kwargs",
+        [
+            ((ChainMap({"A": "a"}, {"B": "b"}),), dict(axis="columns")),
+            ((), dict(columns=ChainMap({"A": "a"}, {"B": "b"}))),
+        ],
+    )
+    def test_rename_chainmap(self, args, kwargs):
+        # see gh-23859
+        colAData = range(1, 11)
+        colBdata = np.random.randn(10)
+
+        df = DataFrame({"A": colAData, "B": colBdata})
+        result = df.rename(*args, **kwargs)
+
+        expected = DataFrame({"a": colAData, "b": colBdata})
+        tm.assert_frame_equal(result, expected)
+
+    @pytest.mark.parametrize(
+        "kwargs, rename_index, rename_columns",
+        [
+            ({"mapper": None, "axis": 0}, True, False),
+            ({"mapper": None, "axis": 1}, False, True),
+            ({"index": None}, True, False),
+            ({"columns": None}, False, True),
+            ({"index": None, "columns": None}, True, True),
+            ({}, False, False),
+        ],
+    )
+    def test_rename_axis_none(self, kwargs, rename_index, rename_columns):
+        # GH 25034
+        index = Index(list("abc"), name="foo")
+        columns = Index(["col1", "col2"], name="bar")
+        data = np.arange(6).reshape(3, 2)
+        df = DataFrame(data, index, columns)
+
+        result = df.rename_axis(**kwargs)
+        expected_index = index.rename(None) if rename_index else index
+        expected_columns = columns.rename(None) if rename_columns else columns
+        expected = DataFrame(data, expected_index, expected_columns)
+        tm.assert_frame_equal(result, expected)
+
+    def test_rename_multiindex(self):
+
+        tuples_index = [("foo1", "bar1"), ("foo2", "bar2")]
+        tuples_columns = [("fizz1", "buzz1"), ("fizz2", "buzz2")]
+        index = MultiIndex.from_tuples(tuples_index, names=["foo", "bar"])
+        columns = MultiIndex.from_tuples(tuples_columns, names=["fizz", "buzz"])
+        df = DataFrame([(0, 0), (1, 1)], index=index, columns=columns)
+
+        #
+        # without specifying level -> across all levels
+
+        renamed = df.rename(
+            index={"foo1": "foo3", "bar2": "bar3"},
+            columns={"fizz1": "fizz3", "buzz2": "buzz3"},
+        )
+        new_index = MultiIndex.from_tuples(
+            [("foo3", "bar1"), ("foo2", "bar3")], names=["foo", "bar"]
+        )
+        new_columns = MultiIndex.from_tuples(
+            [("fizz3", "buzz1"), ("fizz2", "buzz3")], names=["fizz", "buzz"]
+        )
+        tm.assert_index_equal(renamed.index, new_index)
+        tm.assert_index_equal(renamed.columns, new_columns)
+        assert renamed.index.names == df.index.names
+        assert renamed.columns.names == df.columns.names
+
+        #
+        # with specifying a level (GH13766)
+
+        # dict
+        new_columns = MultiIndex.from_tuples(
+            [("fizz3", "buzz1"), ("fizz2", "buzz2")], names=["fizz", "buzz"]
+        )
+        renamed = df.rename(columns={"fizz1": "fizz3", "buzz2": "buzz3"}, level=0)
+        tm.assert_index_equal(renamed.columns, new_columns)
+        renamed = df.rename(columns={"fizz1": "fizz3", "buzz2": "buzz3"}, level="fizz")
+        tm.assert_index_equal(renamed.columns, new_columns)
+
+        new_columns = MultiIndex.from_tuples(
+            [("fizz1", "buzz1"), ("fizz2", "buzz3")], names=["fizz", "buzz"]
+        )
+        renamed = df.rename(columns={"fizz1": "fizz3", "buzz2": "buzz3"}, level=1)
+        tm.assert_index_equal(renamed.columns, new_columns)
+        renamed = df.rename(columns={"fizz1": "fizz3", "buzz2": "buzz3"}, level="buzz")
+        tm.assert_index_equal(renamed.columns, new_columns)
+
+        # function
+        func = str.upper
+        new_columns = MultiIndex.from_tuples(
+            [("FIZZ1", "buzz1"), ("FIZZ2", "buzz2")], names=["fizz", "buzz"]
+        )
+        renamed = df.rename(columns=func, level=0)
+        tm.assert_index_equal(renamed.columns, new_columns)
+        renamed = df.rename(columns=func, level="fizz")
+        tm.assert_index_equal(renamed.columns, new_columns)
+
+        new_columns = MultiIndex.from_tuples(
+            [("fizz1", "BUZZ1"), ("fizz2", "BUZZ2")], names=["fizz", "buzz"]
+        )
+        renamed = df.rename(columns=func, level=1)
+        tm.assert_index_equal(renamed.columns, new_columns)
+        renamed = df.rename(columns=func, level="buzz")
+        tm.assert_index_equal(renamed.columns, new_columns)
+
+        # index
+        new_index = MultiIndex.from_tuples(
+            [("foo3", "bar1"), ("foo2", "bar2")], names=["foo", "bar"]
+        )
+        renamed = df.rename(index={"foo1": "foo3", "bar2": "bar3"}, level=0)
+        tm.assert_index_equal(renamed.index, new_index)
+
+    def test_rename_nocopy(self, float_frame):
+        renamed = float_frame.rename(columns={"C": "foo"}, copy=False)
+        renamed["foo"] = 1.0
+        assert (float_frame["C"] == 1.0).all()
+
+    def test_rename_inplace(self, float_frame):
+        float_frame.rename(columns={"C": "foo"})
+        assert "C" in float_frame
+        assert "foo" not in float_frame
+
+        c_id = id(float_frame["C"])
+        float_frame = float_frame.copy()
+        float_frame.rename(columns={"C": "foo"}, inplace=True)
+
+        assert "C" not in float_frame
+        assert "foo" in float_frame
+        assert id(float_frame["foo"]) != c_id
+
+    def test_rename_bug(self):
+        # GH 5344
+        # rename set ref_locs, and set_index was not resetting
+        df = DataFrame({0: ["foo", "bar"], 1: ["bah", "bas"], 2: [1, 2]})
+        df = df.rename(columns={0: "a"})
+        df = df.rename(columns={1: "b"})
+        df = df.set_index(["a", "b"])
+        df.columns = ["2001-01-01"]
+        expected = DataFrame(
+            [[1], [2]],
+            index=MultiIndex.from_tuples(
+                [("foo", "bah"), ("bar", "bas")], names=["a", "b"]
+            ),
+            columns=["2001-01-01"],
+        )
+        tm.assert_frame_equal(df, expected)
+
+    def test_rename_bug2(self):
+        # GH 19497
+        # rename was changing Index to MultiIndex if Index contained tuples
+
+        df = DataFrame(data=np.arange(3), index=[(0, 0), (1, 1), (2, 2)], columns=["a"])
+        df = df.rename({(1, 1): (5, 4)}, axis="index")
+        expected = DataFrame(
+            data=np.arange(3), index=[(0, 0), (5, 4), (2, 2)], columns=["a"]
+        )
+        tm.assert_frame_equal(df, expected)
+
+    def test_rename_errors_raises(self):
+        df = DataFrame(columns=["A", "B", "C", "D"])
+        with pytest.raises(KeyError, match="'E'] not found in axis"):
+            df.rename(columns={"A": "a", "E": "e"}, errors="raise")
+
+    @pytest.mark.parametrize(
+        "mapper, errors, expected_columns",
+        [
+            ({"A": "a", "E": "e"}, "ignore", ["a", "B", "C", "D"]),
+            ({"A": "a"}, "raise", ["a", "B", "C", "D"]),
+            (str.lower, "raise", ["a", "b", "c", "d"]),
+        ],
+    )
+    def test_rename_errors(self, mapper, errors, expected_columns):
+        # GH 13473
+        # rename now works with errors parameter
+        df = DataFrame(columns=["A", "B", "C", "D"])
+        result = df.rename(columns=mapper, errors=errors)
+        expected = DataFrame(columns=expected_columns)
+        tm.assert_frame_equal(result, expected)
+
+    def test_rename_objects(self, float_string_frame):
+        renamed = float_string_frame.rename(columns=str.upper)
+
+        assert "FOO" in renamed
+        assert "foo" not in renamed
+
+    def test_rename_axis_style(self):
+        # https://github.com/pandas-dev/pandas/issues/12392
+        df = DataFrame({"A": [1, 2], "B": [1, 2]}, index=["X", "Y"])
+        expected = DataFrame({"a": [1, 2], "b": [1, 2]}, index=["X", "Y"])
+
+        result = df.rename(str.lower, axis=1)
+        tm.assert_frame_equal(result, expected)
+
+        result = df.rename(str.lower, axis="columns")
+        tm.assert_frame_equal(result, expected)
+
+        result = df.rename({"A": "a", "B": "b"}, axis=1)
+        tm.assert_frame_equal(result, expected)
+
+        result = df.rename({"A": "a", "B": "b"}, axis="columns")
+        tm.assert_frame_equal(result, expected)
+
+        # Index
+        expected = DataFrame({"A": [1, 2], "B": [1, 2]}, index=["x", "y"])
+        result = df.rename(str.lower, axis=0)
+        tm.assert_frame_equal(result, expected)
+
+        result = df.rename(str.lower, axis="index")
+        tm.assert_frame_equal(result, expected)
+
+        result = df.rename({"X": "x", "Y": "y"}, axis=0)
+        tm.assert_frame_equal(result, expected)
+
+        result = df.rename({"X": "x", "Y": "y"}, axis="index")
+        tm.assert_frame_equal(result, expected)
+
+        result = df.rename(mapper=str.lower, axis="index")
+        tm.assert_frame_equal(result, expected)
+
+    def test_rename_mapper_multi(self):
+        df = DataFrame({"A": ["a", "b"], "B": ["c", "d"], "C": [1, 2]}).set_index(
+            ["A", "B"]
+        )
+        result = df.rename(str.upper)
+        expected = df.rename(index=str.upper)
+        tm.assert_frame_equal(result, expected)
+
+    def test_rename_positional_named(self):
+        # https://github.com/pandas-dev/pandas/issues/12392
+        df = DataFrame({"a": [1, 2], "b": [1, 2]}, index=["X", "Y"])
+        result = df.rename(index=str.lower, columns=str.upper)
+        expected = DataFrame({"A": [1, 2], "B": [1, 2]}, index=["x", "y"])
+        tm.assert_frame_equal(result, expected)
+
+    def test_rename_axis_style_raises(self):
+        # see gh-12392
+        df = DataFrame({"A": [1, 2], "B": [1, 2]}, index=["0", "1"])
+
+        # Named target and axis
+        over_spec_msg = "Cannot specify both 'axis' and any of 'index' or 'columns'"
+        with pytest.raises(TypeError, match=over_spec_msg):
+            df.rename(index=str.lower, axis=1)
+
+        with pytest.raises(TypeError, match=over_spec_msg):
+            df.rename(index=str.lower, axis="columns")
+
+        with pytest.raises(TypeError, match=over_spec_msg):
+            df.rename(columns=str.lower, axis="columns")
+
+        with pytest.raises(TypeError, match=over_spec_msg):
+            df.rename(index=str.lower, axis=0)
+
+        # Multiple targets and axis
+        with pytest.raises(TypeError, match=over_spec_msg):
+            df.rename(str.lower, index=str.lower, axis="columns")
+
+        # Too many targets
+        over_spec_msg = "Cannot specify both 'mapper' and any of 'index' or 'columns'"
+        with pytest.raises(TypeError, match=over_spec_msg):
+            df.rename(str.lower, index=str.lower, columns=str.lower)
+
+        # Duplicates
+        with pytest.raises(TypeError, match="multiple values"):
+            df.rename(id, mapper=id)
+
+    def test_rename_positional_raises(self):
+        # GH 29136
+        df = DataFrame(columns=["A", "B"])
+        msg = r"rename\(\) takes from 1 to 2 positional arguments"
+
+        with pytest.raises(TypeError, match=msg):
+            df.rename(None, str.lower)
+
+    def test_rename_no_mappings_raises(self):
+        # GH 29136
+        df = DataFrame([[1]])
+        msg = "must pass an index to rename"
+        with pytest.raises(TypeError, match=msg):
+            df.rename()
+
+        with pytest.raises(TypeError, match=msg):
+            df.rename(None, index=None)
+
+        with pytest.raises(TypeError, match=msg):
+            df.rename(None, columns=None)
+
+        with pytest.raises(TypeError, match=msg):
+            df.rename(None, columns=None, index=None)
+
+    def test_rename_mapper_and_positional_arguments_raises(self):
+        # GH 29136
+        df = DataFrame([[1]])
+        msg = "Cannot specify both 'mapper' and any of 'index' or 'columns'"
+        with pytest.raises(TypeError, match=msg):
+            df.rename({}, index={})
+
+        with pytest.raises(TypeError, match=msg):
+            df.rename({}, columns={})
+
+        with pytest.raises(TypeError, match=msg):
+            df.rename({}, columns={}, index={})
diff --git a/pandas/tests/frame/methods/test_reset_index.py b/pandas/tests/frame/methods/test_reset_index.py
new file mode 100644
index 000000000..6586c19af
--- /dev/null
+++ b/pandas/tests/frame/methods/test_reset_index.py
@@ -0,0 +1,299 @@
+from datetime import datetime
+
+import numpy as np
+import pytest
+
+from pandas import (
+    DataFrame,
+    Index,
+    IntervalIndex,
+    MultiIndex,
+    RangeIndex,
+    Series,
+    Timestamp,
+    date_range,
+)
+import pandas._testing as tm
+
+
+class TestResetIndex:
+    def test_reset_index_tz(self, tz_aware_fixture):
+        # GH 3950
+        # reset_index with single level
+        tz = tz_aware_fixture
+        idx = date_range("1/1/2011", periods=5, freq="D", tz=tz, name="idx")
+        df = DataFrame({"a": range(5), "b": ["A", "B", "C", "D", "E"]}, index=idx)
+
+        expected = DataFrame(
+            {
+                "idx": [
+                    datetime(2011, 1, 1),
+                    datetime(2011, 1, 2),
+                    datetime(2011, 1, 3),
+                    datetime(2011, 1, 4),
+                    datetime(2011, 1, 5),
+                ],
+                "a": range(5),
+                "b": ["A", "B", "C", "D", "E"],
+            },
+            columns=["idx", "a", "b"],
+        )
+        expected["idx"] = expected["idx"].apply(lambda d: Timestamp(d, tz=tz))
+        tm.assert_frame_equal(df.reset_index(), expected)
+
+    def test_reset_index_with_intervals(self):
+        idx = IntervalIndex.from_breaks(np.arange(11), name="x")
+        original = DataFrame({"x": idx, "y": np.arange(10)})[["x", "y"]]
+
+        result = original.set_index("x")
+        expected = DataFrame({"y": np.arange(10)}, index=idx)
+        tm.assert_frame_equal(result, expected)
+
+        result2 = result.reset_index()
+        tm.assert_frame_equal(result2, original)
+
+    def test_reset_index(self, float_frame):
+        stacked = float_frame.stack()[::2]
+        stacked = DataFrame({"foo": stacked, "bar": stacked})
+
+        names = ["first", "second"]
+        stacked.index.names = names
+        deleveled = stacked.reset_index()
+        for i, (lev, level_codes) in enumerate(
+            zip(stacked.index.levels, stacked.index.codes)
+        ):
+            values = lev.take(level_codes)
+            name = names[i]
+            tm.assert_index_equal(values, Index(deleveled[name]))
+
+        stacked.index.names = [None, None]
+        deleveled2 = stacked.reset_index()
+        tm.assert_series_equal(
+            deleveled["first"], deleveled2["level_0"], check_names=False
+        )
+        tm.assert_series_equal(
+            deleveled["second"], deleveled2["level_1"], check_names=False
+        )
+
+        # default name assigned
+        rdf = float_frame.reset_index()
+        exp = Series(float_frame.index.values, name="index")
+        tm.assert_series_equal(rdf["index"], exp)
+
+        # default name assigned, corner case
+        df = float_frame.copy()
+        df["index"] = "foo"
+        rdf = df.reset_index()
+        exp = Series(float_frame.index.values, name="level_0")
+        tm.assert_series_equal(rdf["level_0"], exp)
+
+        # but this is ok
+        float_frame.index.name = "index"
+        deleveled = float_frame.reset_index()
+        tm.assert_series_equal(deleveled["index"], Series(float_frame.index))
+        tm.assert_index_equal(deleveled.index, Index(np.arange(len(deleveled))))
+
+        # preserve column names
+        float_frame.columns.name = "columns"
+        resetted = float_frame.reset_index()
+        assert resetted.columns.name == "columns"
+
+        # only remove certain columns
+        df = float_frame.reset_index().set_index(["index", "A", "B"])
+        rs = df.reset_index(["A", "B"])
+
+        # TODO should reset_index check_names ?
+        tm.assert_frame_equal(rs, float_frame, check_names=False)
+
+        rs = df.reset_index(["index", "A", "B"])
+        tm.assert_frame_equal(rs, float_frame.reset_index(), check_names=False)
+
+        rs = df.reset_index(["index", "A", "B"])
+        tm.assert_frame_equal(rs, float_frame.reset_index(), check_names=False)
+
+        rs = df.reset_index("A")
+        xp = float_frame.reset_index().set_index(["index", "B"])
+        tm.assert_frame_equal(rs, xp, check_names=False)
+
+        # test resetting in place
+        df = float_frame.copy()
+        resetted = float_frame.reset_index()
+        df.reset_index(inplace=True)
+        tm.assert_frame_equal(df, resetted, check_names=False)
+
+        df = float_frame.reset_index().set_index(["index", "A", "B"])
+        rs = df.reset_index("A", drop=True)
+        xp = float_frame.copy()
+        del xp["A"]
+        xp = xp.set_index(["B"], append=True)
+        tm.assert_frame_equal(rs, xp, check_names=False)
+
+    def test_reset_index_name(self):
+        df = DataFrame(
+            [[1, 2, 3, 4], [5, 6, 7, 8]],
+            columns=["A", "B", "C", "D"],
+            index=Index(range(2), name="x"),
+        )
+        assert df.reset_index().index.name is None
+        assert df.reset_index(drop=True).index.name is None
+        df.reset_index(inplace=True)
+        assert df.index.name is None
+
+    def test_reset_index_level(self):
+        df = DataFrame([[1, 2, 3, 4], [5, 6, 7, 8]], columns=["A", "B", "C", "D"])
+
+        for levels in ["A", "B"], [0, 1]:
+            # With MultiIndex
+            result = df.set_index(["A", "B"]).reset_index(level=levels[0])
+            tm.assert_frame_equal(result, df.set_index("B"))
+
+            result = df.set_index(["A", "B"]).reset_index(level=levels[:1])
+            tm.assert_frame_equal(result, df.set_index("B"))
+
+            result = df.set_index(["A", "B"]).reset_index(level=levels)
+            tm.assert_frame_equal(result, df)
+
+            result = df.set_index(["A", "B"]).reset_index(level=levels, drop=True)
+            tm.assert_frame_equal(result, df[["C", "D"]])
+
+            # With single-level Index (GH 16263)
+            result = df.set_index("A").reset_index(level=levels[0])
+            tm.assert_frame_equal(result, df)
+
+            result = df.set_index("A").reset_index(level=levels[:1])
+            tm.assert_frame_equal(result, df)
+
+            result = df.set_index(["A"]).reset_index(level=levels[0], drop=True)
+            tm.assert_frame_equal(result, df[["B", "C", "D"]])
+
+        # Missing levels - for both MultiIndex and single-level Index:
+        for idx_lev in ["A", "B"], ["A"]:
+            with pytest.raises(KeyError, match=r"(L|l)evel \(?E\)?"):
+                df.set_index(idx_lev).reset_index(level=["A", "E"])
+            with pytest.raises(IndexError, match="Too many levels"):
+                df.set_index(idx_lev).reset_index(level=[0, 1, 2])
+
+    def test_reset_index_right_dtype(self):
+        time = np.arange(0.0, 10, np.sqrt(2) / 2)
+        s1 = Series(
+            (9.81 * time ** 2) / 2, index=Index(time, name="time"), name="speed"
+        )
+        df = DataFrame(s1)
+
+        resetted = s1.reset_index()
+        assert resetted["time"].dtype == np.float64
+
+        resetted = df.reset_index()
+        assert resetted["time"].dtype == np.float64
+
+    def test_reset_index_multiindex_col(self):
+        vals = np.random.randn(3, 3).astype(object)
+        idx = ["x", "y", "z"]
+        full = np.hstack(([[x] for x in idx], vals))
+        df = DataFrame(
+            vals,
+            Index(idx, name="a"),
+            columns=[["b", "b", "c"], ["mean", "median", "mean"]],
+        )
+        rs = df.reset_index()
+        xp = DataFrame(
+            full, columns=[["a", "b", "b", "c"], ["", "mean", "median", "mean"]]
+        )
+        tm.assert_frame_equal(rs, xp)
+
+        rs = df.reset_index(col_fill=None)
+        xp = DataFrame(
+            full, columns=[["a", "b", "b", "c"], ["a", "mean", "median", "mean"]]
+        )
+        tm.assert_frame_equal(rs, xp)
+
+        rs = df.reset_index(col_level=1, col_fill="blah")
+        xp = DataFrame(
+            full, columns=[["blah", "b", "b", "c"], ["a", "mean", "median", "mean"]]
+        )
+        tm.assert_frame_equal(rs, xp)
+
+        df = DataFrame(
+            vals,
+            MultiIndex.from_arrays([[0, 1, 2], ["x", "y", "z"]], names=["d", "a"]),
+            columns=[["b", "b", "c"], ["mean", "median", "mean"]],
+        )
+        rs = df.reset_index("a")
+        xp = DataFrame(
+            full,
+            Index([0, 1, 2], name="d"),
+            columns=[["a", "b", "b", "c"], ["", "mean", "median", "mean"]],
+        )
+        tm.assert_frame_equal(rs, xp)
+
+        rs = df.reset_index("a", col_fill=None)
+        xp = DataFrame(
+            full,
+            Index(range(3), name="d"),
+            columns=[["a", "b", "b", "c"], ["a", "mean", "median", "mean"]],
+        )
+        tm.assert_frame_equal(rs, xp)
+
+        rs = df.reset_index("a", col_fill="blah", col_level=1)
+        xp = DataFrame(
+            full,
+            Index(range(3), name="d"),
+            columns=[["blah", "b", "b", "c"], ["a", "mean", "median", "mean"]],
+        )
+        tm.assert_frame_equal(rs, xp)
+
+    def test_reset_index_multiindex_nan(self):
+        # GH#6322, testing reset_index on MultiIndexes
+        # when we have a nan or all nan
+        df = DataFrame(
+            {"A": ["a", "b", "c"], "B": [0, 1, np.nan], "C": np.random.rand(3)}
+        )
+        rs = df.set_index(["A", "B"]).reset_index()
+        tm.assert_frame_equal(rs, df)
+
+        df = DataFrame(
+            {"A": [np.nan, "b", "c"], "B": [0, 1, 2], "C": np.random.rand(3)}
+        )
+        rs = df.set_index(["A", "B"]).reset_index()
+        tm.assert_frame_equal(rs, df)
+
+        df = DataFrame({"A": ["a", "b", "c"], "B": [0, 1, 2], "C": [np.nan, 1.1, 2.2]})
+        rs = df.set_index(["A", "B"]).reset_index()
+        tm.assert_frame_equal(rs, df)
+
+        df = DataFrame(
+            {
+                "A": ["a", "b", "c"],
+                "B": [np.nan, np.nan, np.nan],
+                "C": np.random.rand(3),
+            }
+        )
+        rs = df.set_index(["A", "B"]).reset_index()
+        tm.assert_frame_equal(rs, df)
+
+    def test_reset_index_with_datetimeindex_cols(self):
+        # GH#5818
+        df = DataFrame(
+            [[1, 2], [3, 4]],
+            columns=date_range("1/1/2013", "1/2/2013"),
+            index=["A", "B"],
+        )
+
+        result = df.reset_index()
+        expected = DataFrame(
+            [["A", 1, 2], ["B", 3, 4]],
+            columns=["index", datetime(2013, 1, 1), datetime(2013, 1, 2)],
+        )
+        tm.assert_frame_equal(result, expected)
+
+    def test_reset_index_range(self):
+        # GH#12071
+        df = DataFrame([[0, 0], [1, 1]], columns=["A", "B"], index=RangeIndex(stop=2))
+        result = df.reset_index()
+        assert isinstance(result.index, RangeIndex)
+        expected = DataFrame(
+            [[0, 0, 0], [1, 1, 1]],
+            columns=["index", "A", "B"],
+            index=RangeIndex(stop=2),
+        )
+        tm.assert_frame_equal(result, expected)
diff --git a/pandas/tests/frame/test_alter_axes.py b/pandas/tests/frame/test_alter_axes.py
index 0c19a38bb..751ed1dfd 100644
--- a/pandas/tests/frame/test_alter_axes.py
+++ b/pandas/tests/frame/test_alter_axes.py
@@ -1,4 +1,3 @@
-from collections import ChainMap
 from datetime import datetime, timedelta
 import inspect
 
@@ -18,7 +17,6 @@ from pandas import (
     Index,
     IntervalIndex,
     MultiIndex,
-    RangeIndex,
     Series,
     Timestamp,
     cut,
@@ -533,30 +531,6 @@ class TestDataFrameAlterAxes:
         df.pop("ts")
         tm.assert_frame_equal(df, expected)
 
-    def test_reset_index_tz(self, tz_aware_fixture):
-        # GH 3950
-        # reset_index with single level
-        tz = tz_aware_fixture
-        idx = date_range("1/1/2011", periods=5, freq="D", tz=tz, name="idx")
-        df = DataFrame({"a": range(5), "b": ["A", "B", "C", "D", "E"]}, index=idx)
-
-        expected = DataFrame(
-            {
-                "idx": [
-                    datetime(2011, 1, 1),
-                    datetime(2011, 1, 2),
-                    datetime(2011, 1, 3),
-                    datetime(2011, 1, 4),
-                    datetime(2011, 1, 5),
-                ],
-                "a": range(5),
-                "b": ["A", "B", "C", "D", "E"],
-            },
-            columns=["idx", "a", "b"],
-        )
-        expected["idx"] = expected["idx"].apply(lambda d: Timestamp(d, tz=tz))
-        tm.assert_frame_equal(df.reset_index(), expected)
-
     def test_set_index_timezone(self):
         # GH 12358
         # tz-aware Series should retain the tz
@@ -583,17 +557,6 @@ class TestDataFrameAlterAxes:
         exp = DataFrame({"b": [3, 4, 5]}, index=exp_index)
         tm.assert_frame_equal(res, exp)
 
-    def test_reset_index_with_intervals(self):
-        idx = IntervalIndex.from_breaks(np.arange(11), name="x")
-        original = DataFrame({"x": idx, "y": np.arange(10)})[["x", "y"]]
-
-        result = original.set_index("x")
-        expected = DataFrame({"y": np.arange(10)}, index=idx)
-        tm.assert_frame_equal(result, expected)
-
-        result2 = result.reset_index()
-        tm.assert_frame_equal(result2, original)
-
     def test_set_index_multiindexcolumns(self):
         columns = MultiIndex.from_tuples([("foo", 1), ("foo", 2), ("bar", 1)])
         df = DataFrame(np.random.randn(3, 3), columns=columns)
@@ -652,65 +615,6 @@ class TestDataFrameAlterAxes:
 
     # Renaming
 
-    def test_rename(self, float_frame):
-        mapping = {"A": "a", "B": "b", "C": "c", "D": "d"}
-
-        renamed = float_frame.rename(columns=mapping)
-        renamed2 = float_frame.rename(columns=str.lower)
-
-        tm.assert_frame_equal(renamed, renamed2)
-        tm.assert_frame_equal(
-            renamed2.rename(columns=str.upper), float_frame, check_names=False
-        )
-
-        # index
-        data = {"A": {"foo": 0, "bar": 1}}
-
-        # gets sorted alphabetical
-        df = DataFrame(data)
-        renamed = df.rename(index={"foo": "bar", "bar": "foo"})
-        tm.assert_index_equal(renamed.index, Index(["foo", "bar"]))
-
-        renamed = df.rename(index=str.upper)
-        tm.assert_index_equal(renamed.index, Index(["BAR", "FOO"]))
-
-        # have to pass something
-        with pytest.raises(TypeError, match="must pass an index to rename"):
-            float_frame.rename()
-
-        # partial columns
-        renamed = float_frame.rename(columns={"C": "foo", "D": "bar"})
-        tm.assert_index_equal(renamed.columns, Index(["A", "B", "foo", "bar"]))
-
-        # other axis
-        renamed = float_frame.T.rename(index={"C": "foo", "D": "bar"})
-        tm.assert_index_equal(renamed.index, Index(["A", "B", "foo", "bar"]))
-
-        # index with name
-        index = Index(["foo", "bar"], name="name")
-        renamer = DataFrame(data, index=index)
-        renamed = renamer.rename(index={"foo": "bar", "bar": "foo"})
-        tm.assert_index_equal(renamed.index, Index(["bar", "foo"], name="name"))
-        assert renamed.index.name == renamer.index.name
-
-    @pytest.mark.parametrize(
-        "args,kwargs",
-        [
-            ((ChainMap({"A": "a"}, {"B": "b"}),), dict(axis="columns")),
-            ((), dict(columns=ChainMap({"A": "a"}, {"B": "b"}))),
-        ],
-    )
-    def test_rename_chainmap(self, args, kwargs):
-        # see gh-23859
-        colAData = range(1, 11)
-        colBdata = np.random.randn(10)
-
-        df = DataFrame({"A": colAData, "B": colBdata})
-        result = df.rename(*args, **kwargs)
-
-        expected = DataFrame({"a": colAData, "b": colBdata})
-        tm.assert_frame_equal(result, expected)
-
     def test_rename_axis_inplace(self, float_frame):
         # GH 15704
         expected = float_frame.rename_axis("foo")
@@ -785,168 +689,6 @@ class TestDataFrameAlterAxes:
         with pytest.raises(TypeError, match="bogus"):
             df.rename_axis(bogus=None)
 
-    @pytest.mark.parametrize(
-        "kwargs, rename_index, rename_columns",
-        [
-            ({"mapper": None, "axis": 0}, True, False),
-            ({"mapper": None, "axis": 1}, False, True),
-            ({"index": None}, True, False),
-            ({"columns": None}, False, True),
-            ({"index": None, "columns": None}, True, True),
-            ({}, False, False),
-        ],
-    )
-    def test_rename_axis_none(self, kwargs, rename_index, rename_columns):
-        # GH 25034
-        index = Index(list("abc"), name="foo")
-        columns = Index(["col1", "col2"], name="bar")
-        data = np.arange(6).reshape(3, 2)
-        df = DataFrame(data, index, columns)
-
-        result = df.rename_axis(**kwargs)
-        expected_index = index.rename(None) if rename_index else index
-        expected_columns = columns.rename(None) if rename_columns else columns
-        expected = DataFrame(data, expected_index, expected_columns)
-        tm.assert_frame_equal(result, expected)
-
-    def test_rename_multiindex(self):
-
-        tuples_index = [("foo1", "bar1"), ("foo2", "bar2")]
-        tuples_columns = [("fizz1", "buzz1"), ("fizz2", "buzz2")]
-        index = MultiIndex.from_tuples(tuples_index, names=["foo", "bar"])
-        columns = MultiIndex.from_tuples(tuples_columns, names=["fizz", "buzz"])
-        df = DataFrame([(0, 0), (1, 1)], index=index, columns=columns)
-
-        #
-        # without specifying level -> across all levels
-
-        renamed = df.rename(
-            index={"foo1": "foo3", "bar2": "bar3"},
-            columns={"fizz1": "fizz3", "buzz2": "buzz3"},
-        )
-        new_index = MultiIndex.from_tuples(
-            [("foo3", "bar1"), ("foo2", "bar3")], names=["foo", "bar"]
-        )
-        new_columns = MultiIndex.from_tuples(
-            [("fizz3", "buzz1"), ("fizz2", "buzz3")], names=["fizz", "buzz"]
-        )
-        tm.assert_index_equal(renamed.index, new_index)
-        tm.assert_index_equal(renamed.columns, new_columns)
-        assert renamed.index.names == df.index.names
-        assert renamed.columns.names == df.columns.names
-
-        #
-        # with specifying a level (GH13766)
-
-        # dict
-        new_columns = MultiIndex.from_tuples(
-            [("fizz3", "buzz1"), ("fizz2", "buzz2")], names=["fizz", "buzz"]
-        )
-        renamed = df.rename(columns={"fizz1": "fizz3", "buzz2": "buzz3"}, level=0)
-        tm.assert_index_equal(renamed.columns, new_columns)
-        renamed = df.rename(columns={"fizz1": "fizz3", "buzz2": "buzz3"}, level="fizz")
-        tm.assert_index_equal(renamed.columns, new_columns)
-
-        new_columns = MultiIndex.from_tuples(
-            [("fizz1", "buzz1"), ("fizz2", "buzz3")], names=["fizz", "buzz"]
-        )
-        renamed = df.rename(columns={"fizz1": "fizz3", "buzz2": "buzz3"}, level=1)
-        tm.assert_index_equal(renamed.columns, new_columns)
-        renamed = df.rename(columns={"fizz1": "fizz3", "buzz2": "buzz3"}, level="buzz")
-        tm.assert_index_equal(renamed.columns, new_columns)
-
-        # function
-        func = str.upper
-        new_columns = MultiIndex.from_tuples(
-            [("FIZZ1", "buzz1"), ("FIZZ2", "buzz2")], names=["fizz", "buzz"]
-        )
-        renamed = df.rename(columns=func, level=0)
-        tm.assert_index_equal(renamed.columns, new_columns)
-        renamed = df.rename(columns=func, level="fizz")
-        tm.assert_index_equal(renamed.columns, new_columns)
-
-        new_columns = MultiIndex.from_tuples(
-            [("fizz1", "BUZZ1"), ("fizz2", "BUZZ2")], names=["fizz", "buzz"]
-        )
-        renamed = df.rename(columns=func, level=1)
-        tm.assert_index_equal(renamed.columns, new_columns)
-        renamed = df.rename(columns=func, level="buzz")
-        tm.assert_index_equal(renamed.columns, new_columns)
-
-        # index
-        new_index = MultiIndex.from_tuples(
-            [("foo3", "bar1"), ("foo2", "bar2")], names=["foo", "bar"]
-        )
-        renamed = df.rename(index={"foo1": "foo3", "bar2": "bar3"}, level=0)
-        tm.assert_index_equal(renamed.index, new_index)
-
-    def test_rename_nocopy(self, float_frame):
-        renamed = float_frame.rename(columns={"C": "foo"}, copy=False)
-        renamed["foo"] = 1.0
-        assert (float_frame["C"] == 1.0).all()
-
-    def test_rename_inplace(self, float_frame):
-        float_frame.rename(columns={"C": "foo"})
-        assert "C" in float_frame
-        assert "foo" not in float_frame
-
-        c_id = id(float_frame["C"])
-        float_frame = float_frame.copy()
-        float_frame.rename(columns={"C": "foo"}, inplace=True)
-
-        assert "C" not in float_frame
-        assert "foo" in float_frame
-        assert id(float_frame["foo"]) != c_id
-
-    def test_rename_bug(self):
-        # GH 5344
-        # rename set ref_locs, and set_index was not resetting
-        df = DataFrame({0: ["foo", "bar"], 1: ["bah", "bas"], 2: [1, 2]})
-        df = df.rename(columns={0: "a"})
-        df = df.rename(columns={1: "b"})
-        df = df.set_index(["a", "b"])
-        df.columns = ["2001-01-01"]
-        expected = DataFrame(
-            [[1], [2]],
-            index=MultiIndex.from_tuples(
-                [("foo", "bah"), ("bar", "bas")], names=["a", "b"]
-            ),
-            columns=["2001-01-01"],
-        )
-        tm.assert_frame_equal(df, expected)
-
-    def test_rename_bug2(self):
-        # GH 19497
-        # rename was changing Index to MultiIndex if Index contained tuples
-
-        df = DataFrame(data=np.arange(3), index=[(0, 0), (1, 1), (2, 2)], columns=["a"])
-        df = df.rename({(1, 1): (5, 4)}, axis="index")
-        expected = DataFrame(
-            data=np.arange(3), index=[(0, 0), (5, 4), (2, 2)], columns=["a"]
-        )
-        tm.assert_frame_equal(df, expected)
-
-    def test_rename_errors_raises(self):
-        df = DataFrame(columns=["A", "B", "C", "D"])
-        with pytest.raises(KeyError, match="'E'] not found in axis"):
-            df.rename(columns={"A": "a", "E": "e"}, errors="raise")
-
-    @pytest.mark.parametrize(
-        "mapper, errors, expected_columns",
-        [
-            ({"A": "a", "E": "e"}, "ignore", ["a", "B", "C", "D"]),
-            ({"A": "a"}, "raise", ["a", "B", "C", "D"]),
-            (str.lower, "raise", ["a", "b", "c", "d"]),
-        ],
-    )
-    def test_rename_errors(self, mapper, errors, expected_columns):
-        # GH 13473
-        # rename now works with errors parameter
-        df = DataFrame(columns=["A", "B", "C", "D"])
-        result = df.rename(columns=mapper, errors=errors)
-        expected = DataFrame(columns=expected_columns)
-        tm.assert_frame_equal(result, expected)
-
     def test_reorder_levels(self):
         index = MultiIndex(
             levels=[["bar"], ["one", "two", "three"], [0, 1]],
@@ -985,253 +727,6 @@ class TestDataFrameAlterAxes:
         result = df.reorder_levels(["L0", "L0", "L0"])
         tm.assert_frame_equal(result, expected)
 
-    def test_reset_index(self, float_frame):
-        stacked = float_frame.stack()[::2]
-        stacked = DataFrame({"foo": stacked, "bar": stacked})
-
-        names = ["first", "second"]
-        stacked.index.names = names
-        deleveled = stacked.reset_index()
-        for i, (lev, level_codes) in enumerate(
-            zip(stacked.index.levels, stacked.index.codes)
-        ):
-            values = lev.take(level_codes)
-            name = names[i]
-            tm.assert_index_equal(values, Index(deleveled[name]))
-
-        stacked.index.names = [None, None]
-        deleveled2 = stacked.reset_index()
-        tm.assert_series_equal(
-            deleveled["first"], deleveled2["level_0"], check_names=False
-        )
-        tm.assert_series_equal(
-            deleveled["second"], deleveled2["level_1"], check_names=False
-        )
-
-        # default name assigned
-        rdf = float_frame.reset_index()
-        exp = Series(float_frame.index.values, name="index")
-        tm.assert_series_equal(rdf["index"], exp)
-
-        # default name assigned, corner case
-        df = float_frame.copy()
-        df["index"] = "foo"
-        rdf = df.reset_index()
-        exp = Series(float_frame.index.values, name="level_0")
-        tm.assert_series_equal(rdf["level_0"], exp)
-
-        # but this is ok
-        float_frame.index.name = "index"
-        deleveled = float_frame.reset_index()
-        tm.assert_series_equal(deleveled["index"], Series(float_frame.index))
-        tm.assert_index_equal(deleveled.index, Index(np.arange(len(deleveled))))
-
-        # preserve column names
-        float_frame.columns.name = "columns"
-        resetted = float_frame.reset_index()
-        assert resetted.columns.name == "columns"
-
-        # only remove certain columns
-        df = float_frame.reset_index().set_index(["index", "A", "B"])
-        rs = df.reset_index(["A", "B"])
-
-        # TODO should reset_index check_names ?
-        tm.assert_frame_equal(rs, float_frame, check_names=False)
-
-        rs = df.reset_index(["index", "A", "B"])
-        tm.assert_frame_equal(rs, float_frame.reset_index(), check_names=False)
-
-        rs = df.reset_index(["index", "A", "B"])
-        tm.assert_frame_equal(rs, float_frame.reset_index(), check_names=False)
-
-        rs = df.reset_index("A")
-        xp = float_frame.reset_index().set_index(["index", "B"])
-        tm.assert_frame_equal(rs, xp, check_names=False)
-
-        # test resetting in place
-        df = float_frame.copy()
-        resetted = float_frame.reset_index()
-        df.reset_index(inplace=True)
-        tm.assert_frame_equal(df, resetted, check_names=False)
-
-        df = float_frame.reset_index().set_index(["index", "A", "B"])
-        rs = df.reset_index("A", drop=True)
-        xp = float_frame.copy()
-        del xp["A"]
-        xp = xp.set_index(["B"], append=True)
-        tm.assert_frame_equal(rs, xp, check_names=False)
-
-    def test_reset_index_name(self):
-        df = DataFrame(
-            [[1, 2, 3, 4], [5, 6, 7, 8]],
-            columns=["A", "B", "C", "D"],
-            index=Index(range(2), name="x"),
-        )
-        assert df.reset_index().index.name is None
-        assert df.reset_index(drop=True).index.name is None
-        df.reset_index(inplace=True)
-        assert df.index.name is None
-
-    def test_reset_index_level(self):
-        df = DataFrame([[1, 2, 3, 4], [5, 6, 7, 8]], columns=["A", "B", "C", "D"])
-
-        for levels in ["A", "B"], [0, 1]:
-            # With MultiIndex
-            result = df.set_index(["A", "B"]).reset_index(level=levels[0])
-            tm.assert_frame_equal(result, df.set_index("B"))
-
-            result = df.set_index(["A", "B"]).reset_index(level=levels[:1])
-            tm.assert_frame_equal(result, df.set_index("B"))
-
-            result = df.set_index(["A", "B"]).reset_index(level=levels)
-            tm.assert_frame_equal(result, df)
-
-            result = df.set_index(["A", "B"]).reset_index(level=levels, drop=True)
-            tm.assert_frame_equal(result, df[["C", "D"]])
-
-            # With single-level Index (GH 16263)
-            result = df.set_index("A").reset_index(level=levels[0])
-            tm.assert_frame_equal(result, df)
-
-            result = df.set_index("A").reset_index(level=levels[:1])
-            tm.assert_frame_equal(result, df)
-
-            result = df.set_index(["A"]).reset_index(level=levels[0], drop=True)
-            tm.assert_frame_equal(result, df[["B", "C", "D"]])
-
-        # Missing levels - for both MultiIndex and single-level Index:
-        for idx_lev in ["A", "B"], ["A"]:
-            with pytest.raises(KeyError, match=r"(L|l)evel \(?E\)?"):
-                df.set_index(idx_lev).reset_index(level=["A", "E"])
-            with pytest.raises(IndexError, match="Too many levels"):
-                df.set_index(idx_lev).reset_index(level=[0, 1, 2])
-
-    def test_reset_index_right_dtype(self):
-        time = np.arange(0.0, 10, np.sqrt(2) / 2)
-        s1 = Series(
-            (9.81 * time ** 2) / 2, index=Index(time, name="time"), name="speed"
-        )
-        df = DataFrame(s1)
-
-        resetted = s1.reset_index()
-        assert resetted["time"].dtype == np.float64
-
-        resetted = df.reset_index()
-        assert resetted["time"].dtype == np.float64
-
-    def test_reset_index_multiindex_col(self):
-        vals = np.random.randn(3, 3).astype(object)
-        idx = ["x", "y", "z"]
-        full = np.hstack(([[x] for x in idx], vals))
-        df = DataFrame(
-            vals,
-            Index(idx, name="a"),
-            columns=[["b", "b", "c"], ["mean", "median", "mean"]],
-        )
-        rs = df.reset_index()
-        xp = DataFrame(
-            full, columns=[["a", "b", "b", "c"], ["", "mean", "median", "mean"]]
-        )
-        tm.assert_frame_equal(rs, xp)
-
-        rs = df.reset_index(col_fill=None)
-        xp = DataFrame(
-            full, columns=[["a", "b", "b", "c"], ["a", "mean", "median", "mean"]]
-        )
-        tm.assert_frame_equal(rs, xp)
-
-        rs = df.reset_index(col_level=1, col_fill="blah")
-        xp = DataFrame(
-            full, columns=[["blah", "b", "b", "c"], ["a", "mean", "median", "mean"]]
-        )
-        tm.assert_frame_equal(rs, xp)
-
-        df = DataFrame(
-            vals,
-            MultiIndex.from_arrays([[0, 1, 2], ["x", "y", "z"]], names=["d", "a"]),
-            columns=[["b", "b", "c"], ["mean", "median", "mean"]],
-        )
-        rs = df.reset_index("a")
-        xp = DataFrame(
-            full,
-            Index([0, 1, 2], name="d"),
-            columns=[["a", "b", "b", "c"], ["", "mean", "median", "mean"]],
-        )
-        tm.assert_frame_equal(rs, xp)
-
-        rs = df.reset_index("a", col_fill=None)
-        xp = DataFrame(
-            full,
-            Index(range(3), name="d"),
-            columns=[["a", "b", "b", "c"], ["a", "mean", "median", "mean"]],
-        )
-        tm.assert_frame_equal(rs, xp)
-
-        rs = df.reset_index("a", col_fill="blah", col_level=1)
-        xp = DataFrame(
-            full,
-            Index(range(3), name="d"),
-            columns=[["blah", "b", "b", "c"], ["a", "mean", "median", "mean"]],
-        )
-        tm.assert_frame_equal(rs, xp)
-
-    def test_reset_index_multiindex_nan(self):
-        # GH6322, testing reset_index on MultiIndexes
-        # when we have a nan or all nan
-        df = DataFrame(
-            {"A": ["a", "b", "c"], "B": [0, 1, np.nan], "C": np.random.rand(3)}
-        )
-        rs = df.set_index(["A", "B"]).reset_index()
-        tm.assert_frame_equal(rs, df)
-
-        df = DataFrame(
-            {"A": [np.nan, "b", "c"], "B": [0, 1, 2], "C": np.random.rand(3)}
-        )
-        rs = df.set_index(["A", "B"]).reset_index()
-        tm.assert_frame_equal(rs, df)
-
-        df = DataFrame({"A": ["a", "b", "c"], "B": [0, 1, 2], "C": [np.nan, 1.1, 2.2]})
-        rs = df.set_index(["A", "B"]).reset_index()
-        tm.assert_frame_equal(rs, df)
-
-        df = DataFrame(
-            {
-                "A": ["a", "b", "c"],
-                "B": [np.nan, np.nan, np.nan],
-                "C": np.random.rand(3),
-            }
-        )
-        rs = df.set_index(["A", "B"]).reset_index()
-        tm.assert_frame_equal(rs, df)
-
-    def test_reset_index_with_datetimeindex_cols(self):
-        # GH5818
-        #
-        df = DataFrame(
-            [[1, 2], [3, 4]],
-            columns=date_range("1/1/2013", "1/2/2013"),
-            index=["A", "B"],
-        )
-
-        result = df.reset_index()
-        expected = DataFrame(
-            [["A", 1, 2], ["B", 3, 4]],
-            columns=["index", datetime(2013, 1, 1), datetime(2013, 1, 2)],
-        )
-        tm.assert_frame_equal(result, expected)
-
-    def test_reset_index_range(self):
-        # GH 12071
-        df = DataFrame([[0, 0], [1, 1]], columns=["A", "B"], index=RangeIndex(stop=2))
-        result = df.reset_index()
-        assert isinstance(result.index, RangeIndex)
-        expected = DataFrame(
-            [[0, 0, 0], [1, 1, 1]],
-            columns=["index", "A", "B"],
-            index=RangeIndex(stop=2),
-        )
-        tm.assert_frame_equal(result, expected)
-
     def test_set_index_names(self):
         df = tm.makeDataFrame()
         df.index.name = "name"
@@ -1262,92 +757,6 @@ class TestDataFrameAlterAxes:
         # Check equality
         tm.assert_index_equal(df.set_index([df.index, idx2]).index, mi2)
 
-    def test_rename_objects(self, float_string_frame):
-        renamed = float_string_frame.rename(columns=str.upper)
-
-        assert "FOO" in renamed
-        assert "foo" not in renamed
-
-    def test_rename_axis_style(self):
-        # https://github.com/pandas-dev/pandas/issues/12392
-        df = DataFrame({"A": [1, 2], "B": [1, 2]}, index=["X", "Y"])
-        expected = DataFrame({"a": [1, 2], "b": [1, 2]}, index=["X", "Y"])
-
-        result = df.rename(str.lower, axis=1)
-        tm.assert_frame_equal(result, expected)
-
-        result = df.rename(str.lower, axis="columns")
-        tm.assert_frame_equal(result, expected)
-
-        result = df.rename({"A": "a", "B": "b"}, axis=1)
-        tm.assert_frame_equal(result, expected)
-
-        result = df.rename({"A": "a", "B": "b"}, axis="columns")
-        tm.assert_frame_equal(result, expected)
-
-        # Index
-        expected = DataFrame({"A": [1, 2], "B": [1, 2]}, index=["x", "y"])
-        result = df.rename(str.lower, axis=0)
-        tm.assert_frame_equal(result, expected)
-
-        result = df.rename(str.lower, axis="index")
-        tm.assert_frame_equal(result, expected)
-
-        result = df.rename({"X": "x", "Y": "y"}, axis=0)
-        tm.assert_frame_equal(result, expected)
-
-        result = df.rename({"X": "x", "Y": "y"}, axis="index")
-        tm.assert_frame_equal(result, expected)
-
-        result = df.rename(mapper=str.lower, axis="index")
-        tm.assert_frame_equal(result, expected)
-
-    def test_rename_mapper_multi(self):
-        df = DataFrame({"A": ["a", "b"], "B": ["c", "d"], "C": [1, 2]}).set_index(
-            ["A", "B"]
-        )
-        result = df.rename(str.upper)
-        expected = df.rename(index=str.upper)
-        tm.assert_frame_equal(result, expected)
-
-    def test_rename_positional_named(self):
-        # https://github.com/pandas-dev/pandas/issues/12392
-        df = DataFrame({"a": [1, 2], "b": [1, 2]}, index=["X", "Y"])
-        result = df.rename(index=str.lower, columns=str.upper)
-        expected = DataFrame({"A": [1, 2], "B": [1, 2]}, index=["x", "y"])
-        tm.assert_frame_equal(result, expected)
-
-    def test_rename_axis_style_raises(self):
-        # see gh-12392
-        df = DataFrame({"A": [1, 2], "B": [1, 2]}, index=["0", "1"])
-
-        # Named target and axis
-        over_spec_msg = "Cannot specify both 'axis' and any of 'index' or 'columns'"
-        with pytest.raises(TypeError, match=over_spec_msg):
-            df.rename(index=str.lower, axis=1)
-
-        with pytest.raises(TypeError, match=over_spec_msg):
-            df.rename(index=str.lower, axis="columns")
-
-        with pytest.raises(TypeError, match=over_spec_msg):
-            df.rename(columns=str.lower, axis="columns")
-
-        with pytest.raises(TypeError, match=over_spec_msg):
-            df.rename(index=str.lower, axis=0)
-
-        # Multiple targets and axis
-        with pytest.raises(TypeError, match=over_spec_msg):
-            df.rename(str.lower, index=str.lower, axis="columns")
-
-        # Too many targets
-        over_spec_msg = "Cannot specify both 'mapper' and any of 'index' or 'columns'"
-        with pytest.raises(TypeError, match=over_spec_msg):
-            df.rename(str.lower, index=str.lower, columns=str.lower)
-
-        # Duplicates
-        with pytest.raises(TypeError, match="multiple values"):
-            df.rename(id, mapper=id)
-
     def test_reindex_api_equivalence(self):
         # equivalence of the labels/axis and index/columns API's
         df = DataFrame(
@@ -1376,43 +785,6 @@ class TestDataFrameAlterAxes:
         for res in [res2, res3]:
             tm.assert_frame_equal(res1, res)
 
-    def test_rename_positional_raises(self):
-        # GH 29136
-        df = DataFrame(columns=["A", "B"])
-        msg = r"rename\(\) takes from 1 to 2 positional arguments"
-
-        with pytest.raises(TypeError, match=msg):
-            df.rename(None, str.lower)
-
-    def test_rename_no_mappings_raises(self):
-        # GH 29136
-        df = DataFrame([[1]])
-        msg = "must pass an index to rename"
-        with pytest.raises(TypeError, match=msg):
-            df.rename()
-
-        with pytest.raises(TypeError, match=msg):
-            df.rename(None, index=None)
-
-        with pytest.raises(TypeError, match=msg):
-            df.rename(None, columns=None)
-
-        with pytest.raises(TypeError, match=msg):
-            df.rename(None, columns=None, index=None)
-
-    def test_rename_mapper_and_positional_arguments_raises(self):
-        # GH 29136
-        df = DataFrame([[1]])
-        msg = "Cannot specify both 'mapper' and any of 'index' or 'columns'"
-        with pytest.raises(TypeError, match=msg):
-            df.rename({}, index={})
-
-        with pytest.raises(TypeError, match=msg):
-            df.rename({}, columns={})
-
-        with pytest.raises(TypeError, match=msg):
-            df.rename({}, columns={}, index={})
-
     def test_assign_columns(self, float_frame):
         float_frame["hi"] = "there"
 
diff --git a/pandas/tests/series/methods/test_rename.py b/pandas/tests/series/methods/test_rename.py
new file mode 100644
index 000000000..60182f509
--- /dev/null
+++ b/pandas/tests/series/methods/test_rename.py
@@ -0,0 +1,91 @@
+from datetime import datetime
+
+import numpy as np
+
+from pandas import Index, Series
+import pandas._testing as tm
+
+
+class TestRename:
+    def test_rename(self, datetime_series):
+        ts = datetime_series
+        renamer = lambda x: x.strftime("%Y%m%d")
+        renamed = ts.rename(renamer)
+        assert renamed.index[0] == renamer(ts.index[0])
+
+        # dict
+        rename_dict = dict(zip(ts.index, renamed.index))
+        renamed2 = ts.rename(rename_dict)
+        tm.assert_series_equal(renamed, renamed2)
+
+        # partial dict
+        s = Series(np.arange(4), index=["a", "b", "c", "d"], dtype="int64")
+        renamed = s.rename({"b": "foo", "d": "bar"})
+        tm.assert_index_equal(renamed.index, Index(["a", "foo", "c", "bar"]))
+
+        # index with name
+        renamer = Series(
+            np.arange(4), index=Index(["a", "b", "c", "d"], name="name"), dtype="int64"
+        )
+        renamed = renamer.rename({})
+        assert renamed.index.name == renamer.index.name
+
+    def test_rename_by_series(self):
+        s = Series(range(5), name="foo")
+        renamer = Series({1: 10, 2: 20})
+        result = s.rename(renamer)
+        expected = Series(range(5), index=[0, 10, 20, 3, 4], name="foo")
+        tm.assert_series_equal(result, expected)
+
+    def test_rename_set_name(self):
+        s = Series(range(4), index=list("abcd"))
+        for name in ["foo", 123, 123.0, datetime(2001, 11, 11), ("foo",)]:
+            result = s.rename(name)
+            assert result.name == name
+            tm.assert_numpy_array_equal(result.index.values, s.index.values)
+            assert s.name is None
+
+    def test_rename_set_name_inplace(self):
+        s = Series(range(3), index=list("abc"))
+        for name in ["foo", 123, 123.0, datetime(2001, 11, 11), ("foo",)]:
+            s.rename(name, inplace=True)
+            assert s.name == name
+
+            exp = np.array(["a", "b", "c"], dtype=np.object_)
+            tm.assert_numpy_array_equal(s.index.values, exp)
+
+    def test_rename_axis_supported(self):
+        # Supporting axis for compatibility, detailed in GH-18589
+        s = Series(range(5))
+        s.rename({}, axis=0)
+        s.rename({}, axis="index")
+        # FIXME: dont leave commenred-out
+        # TODO: clean up shared index validation
+        # with pytest.raises(ValueError, match="No axis named 5"):
+        #     s.rename({}, axis=5)
+
+    def test_rename_inplace(self, datetime_series):
+        renamer = lambda x: x.strftime("%Y%m%d")
+        expected = renamer(datetime_series.index[0])
+
+        datetime_series.rename(renamer, inplace=True)
+        assert datetime_series.index[0] == expected
+
+    def test_rename_with_custom_indexer(self):
+        # GH 27814
+        class MyIndexer:
+            pass
+
+        ix = MyIndexer()
+        s = Series([1, 2, 3]).rename(ix)
+        assert s.name is ix
+
+    def test_rename_with_custom_indexer_inplace(self):
+        # GH 27814
+        class MyIndexer:
+            pass
+
+        ix = MyIndexer()
+        s = Series([1, 2, 3])
+        s.rename(ix, inplace=True)
+        assert s.name is ix
diff --git a/pandas/tests/series/methods/test_reset_index.py b/pandas/tests/series/methods/test_reset_index.py
new file mode 100644
index 000000000..f0c4895ad
--- /dev/null
+++ b/pandas/tests/series/methods/test_reset_index.py
@@ -0,0 +1,110 @@
+import numpy as np
+import pytest
+
+from pandas import DataFrame, Index, MultiIndex, RangeIndex, Series
+import pandas._testing as tm
+
+
+class TestResetIndex:
+    def test_reset_index(self):
+        df = tm.makeDataFrame()[:5]
+        ser = df.stack()
+        ser.index.names = ["hash", "category"]
+
+        ser.name = "value"
+        df = ser.reset_index()
+        assert "value" in df
+
+        df = ser.reset_index(name="value2")
+        assert "value2" in df
+
+        # check inplace
+        s = ser.reset_index(drop=True)
+        s2 = ser
+        s2.reset_index(drop=True, inplace=True)
+        tm.assert_series_equal(s, s2)
+
+        # level
+        index = MultiIndex(
+            levels=[["bar"], ["one", "two", "three"], [0, 1]],
+            codes=[[0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 1, 2], [0, 1, 0, 1, 0, 1]],
+        )
+        s = Series(np.random.randn(6), index=index)
+        rs = s.reset_index(level=1)
+        assert len(rs.columns) == 2
+
+        rs = s.reset_index(level=[0, 2], drop=True)
+        tm.assert_index_equal(rs.index, Index(index.get_level_values(1)))
+        assert isinstance(rs, Series)
+
+    def test_reset_index_name(self):
+        s = Series([1, 2, 3], index=Index(range(3), name="x"))
+        assert s.reset_index().index.name is None
+        assert s.reset_index(drop=True).index.name is None
+
+    def test_reset_index_level(self):
+        df = DataFrame([[1, 2, 3], [4, 5, 6]], columns=["A", "B", "C"])
+
+        for levels in ["A", "B"], [0, 1]:
+            # With MultiIndex
+            s = df.set_index(["A", "B"])["C"]
+
+            result = s.reset_index(level=levels[0])
+            tm.assert_frame_equal(result, df.set_index("B"))
+
+            result = s.reset_index(level=levels[:1])
+            tm.assert_frame_equal(result, df.set_index("B"))
+
+            result = s.reset_index(level=levels)
+            tm.assert_frame_equal(result, df)
+
+            result = df.set_index(["A", "B"]).reset_index(level=levels, drop=True)
+            tm.assert_frame_equal(result, df[["C"]])
+
+            with pytest.raises(KeyError, match="Level E "):
+                s.reset_index(level=["A", "E"])
+
+            # With single-level Index
+            s = df.set_index("A")["B"]
+
+            result = s.reset_index(level=levels[0])
+            tm.assert_frame_equal(result, df[["A", "B"]])
+
+            result = s.reset_index(level=levels[:1])
+            tm.assert_frame_equal(result, df[["A", "B"]])
+
+            result = s.reset_index(level=levels[0], drop=True)
+            tm.assert_series_equal(result, df["B"])
+
+            with pytest.raises(IndexError, match="Too many levels"):
+                s.reset_index(level=[0, 1, 2])
+
+        # Check that .reset_index([],drop=True) doesn't fail
+        result = Series(range(4)).reset_index([], drop=True)
+        expected = Series(range(4))
+        tm.assert_series_equal(result, expected)
+
+    def test_reset_index_range(self):
+        # GH 12071
+        s = Series(range(2), name="A", dtype="int64")
+        series_result = s.reset_index()
+        assert isinstance(series_result.index, RangeIndex)
+        series_expected = DataFrame(
+            [[0, 0], [1, 1]], columns=["index", "A"], index=RangeIndex(stop=2)
+        )
+        tm.assert_frame_equal(series_result, series_expected)
+
+    def test_reset_index_drop_errors(self):
+        #  GH 20925
+
+        # KeyError raised for series index when passed level name is missing
+        s = Series(range(4))
+        with pytest.raises(KeyError, match="does not match index name"):
+            s.reset_index("wrong", drop=True)
+        with pytest.raises(KeyError, match="does not match index name"):
+            s.reset_index("wrong")
+
+        # KeyError raised for series when level to be dropped is missing
+        s = Series(range(4), index=MultiIndex.from_product([[1, 2]] * 2))
+        with pytest.raises(KeyError, match="not found"):
+            s.reset_index("wrong", drop=True)
diff --git a/pandas/tests/series/test_alter_axes.py b/pandas/tests/series/test_alter_axes.py
index 71f6681e8..9be8744d7 100644
--- a/pandas/tests/series/test_alter_axes.py
+++ b/pandas/tests/series/test_alter_axes.py
@@ -3,7 +3,7 @@ from datetime import datetime
 import numpy as np
 import pytest
 
-from pandas import DataFrame, Index, MultiIndex, RangeIndex, Series
+from pandas import Index, MultiIndex, Series
 import pandas._testing as tm
 
 
@@ -31,62 +31,6 @@ class TestSeriesAlterAxes:
 
     # Renaming
 
-    def test_rename(self, datetime_series):
-        ts = datetime_series
-        renamer = lambda x: x.strftime("%Y%m%d")
-        renamed = ts.rename(renamer)
-        assert renamed.index[0] == renamer(ts.index[0])
-
-        # dict
-        rename_dict = dict(zip(ts.index, renamed.index))
-        renamed2 = ts.rename(rename_dict)
-        tm.assert_series_equal(renamed, renamed2)
-
-        # partial dict
-        s = Series(np.arange(4), index=["a", "b", "c", "d"], dtype="int64")
-        renamed = s.rename({"b": "foo", "d": "bar"})
-        tm.assert_index_equal(renamed.index, Index(["a", "foo", "c", "bar"]))
-
-        # index with name
-        renamer = Series(
-            np.arange(4), index=Index(["a", "b", "c", "d"], name="name"), dtype="int64"
-        )
-        renamed = renamer.rename({})
-        assert renamed.index.name == renamer.index.name
-
-    def test_rename_by_series(self):
-        s = Series(range(5), name="foo")
-        renamer = Series({1: 10, 2: 20})
-        result = s.rename(renamer)
-        expected = Series(range(5), index=[0, 10, 20, 3, 4], name="foo")
-        tm.assert_series_equal(result, expected)
-
-    def test_rename_set_name(self):
-        s = Series(range(4), index=list("abcd"))
-        for name in ["foo", 123, 123.0, datetime(2001, 11, 11), ("foo",)]:
-            result = s.rename(name)
-            assert result.name == name
-            tm.assert_numpy_array_equal(result.index.values, s.index.values)
-            assert s.name is None
-
-    def test_rename_set_name_inplace(self):
-        s = Series(range(3), index=list("abc"))
-        for name in ["foo", 123, 123.0, datetime(2001, 11, 11), ("foo",)]:
-            s.rename(name, inplace=True)
-            assert s.name == name
-
-            exp = np.array(["a", "b", "c"], dtype=np.object_)
-            tm.assert_numpy_array_equal(s.index.values, exp)
-
-    def test_rename_axis_supported(self):
-        # Supporting axis for compatibility, detailed in GH-18589
-        s = Series(range(5))
-        s.rename({}, axis=0)
-        s.rename({}, axis="index")
-        # TODO: clean up shared index validation
-        # with pytest.raises(ValueError, match="No axis named 5"):
-        #     s.rename({}, axis=5)
-
     def test_set_name_attribute(self):
         s = Series([1, 2, 3])
         s2 = Series([1, 2, 3], name="bar")
@@ -103,13 +47,6 @@ class TestSeriesAlterAxes:
         assert s.name is None
         assert s is not s2
 
-    def test_rename_inplace(self, datetime_series):
-        renamer = lambda x: x.strftime("%Y%m%d")
-        expected = renamer(datetime_series.index[0])
-
-        datetime_series.rename(renamer, inplace=True)
-        assert datetime_series.index[0] == expected
-
     def test_set_index_makes_timeseries(self):
         idx = tm.makeDateIndex(10)
 
@@ -117,94 +54,6 @@ class TestSeriesAlterAxes:
         s.index = idx
         assert s.index.is_all_dates
 
-    def test_reset_index(self):
-        df = tm.makeDataFrame()[:5]
-        ser = df.stack()
-        ser.index.names = ["hash", "category"]
-
-        ser.name = "value"
-        df = ser.reset_index()
-        assert "value" in df
-
-        df = ser.reset_index(name="value2")
-        assert "value2" in df
-
-        # check inplace
-        s = ser.reset_index(drop=True)
-        s2 = ser
-        s2.reset_index(drop=True, inplace=True)
-        tm.assert_series_equal(s, s2)
-
-        # level
-        index = MultiIndex(
-            levels=[["bar"], ["one", "two", "three"], [0, 1]],
-            codes=[[0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 1, 2], [0, 1, 0, 1, 0, 1]],
-        )
-        s = Series(np.random.randn(6), index=index)
-        rs = s.reset_index(level=1)
-        assert len(rs.columns) == 2
-
-        rs = s.reset_index(level=[0, 2], drop=True)
-        tm.assert_index_equal(rs.index, Index(index.get_level_values(1)))
-        assert isinstance(rs, Series)
-
-    def test_reset_index_name(self):
-        s = Series([1, 2, 3], index=Index(range(3), name="x"))
-        assert s.reset_index().index.name is None
-        assert s.reset_index(drop=True).index.name is None
-
-    def test_reset_index_level(self):
-        df = DataFrame([[1, 2, 3], [4, 5, 6]], columns=["A", "B", "C"])
-
-        for levels in ["A", "B"], [0, 1]:
-            # With MultiIndex
-            s = df.set_index(["A", "B"])["C"]
-
-            result = s.reset_index(level=levels[0])
-            tm.assert_frame_equal(result, df.set_index("B"))
-
-            result = s.reset_index(level=levels[:1])
-            tm.assert_frame_equal(result, df.set_index("B"))
-
-            result = s.reset_index(level=levels)
-            tm.assert_frame_equal(result, df)
-
-            result = df.set_index(["A", "B"]).reset_index(level=levels, drop=True)
-            tm.assert_frame_equal(result, df[["C"]])
-
-            with pytest.raises(KeyError, match="Level E "):
-                s.reset_index(level=["A", "E"])
-
-            # With single-level Index
-            s = df.set_index("A")["B"]
-
-            result = s.reset_index(level=levels[0])
-            tm.assert_frame_equal(result, df[["A", "B"]])
-
-            result = s.reset_index(level=levels[:1])
-            tm.assert_frame_equal(result, df[["A", "B"]])
-
-            result = s.reset_index(level=levels[0], drop=True)
-            tm.assert_series_equal(result, df["B"])
-
-            with pytest.raises(IndexError, match="Too many levels"):
-                s.reset_index(level=[0, 1, 2])
-
-        # Check that .reset_index([],drop=True) doesn't fail
-        result = Series(range(4)).reset_index([], drop=True)
-        expected = Series(range(4))
-        tm.assert_series_equal(result, expected)
-
-    def test_reset_index_range(self):
-        # GH 12071
-        s = Series(range(2), name="A", dtype="int64")
-        series_result = s.reset_index()
-        assert isinstance(series_result.index, RangeIndex)
-        series_expected = DataFrame(
-            [[0, 0], [1, 1]], columns=["index", "A"], index=RangeIndex(stop=2)
-        )
-        tm.assert_frame_equal(series_result, series_expected)
-
     def test_reorder_levels(self):
         index = MultiIndex(
             levels=[["bar"], ["one", "two", "three"], [0, 1]],
@@ -268,25 +117,6 @@ class TestSeriesAlterAxes:
         expected = Series([1, 2, 3], index=expected_index)
         tm.assert_series_equal(result, expected)
 
-    def test_rename_with_custom_indexer(self):
-        # GH 27814
-        class MyIndexer:
-            pass
-
-        ix = MyIndexer()
-        s = Series([1, 2, 3]).rename(ix)
-        assert s.name is ix
-
-    def test_rename_with_custom_indexer_inplace(self):
-        # GH 27814
-        class MyIndexer:
-            pass
-
-        ix = MyIndexer()
-        s = Series([1, 2, 3])
-        s.rename(ix, inplace=True)
-        assert s.name is ix
-
     def test_set_axis_inplace_axes(self, axis_series):
         # GH14636
         ser = Series(np.arange(4), index=[1, 3, 5, 7], dtype="int64")
@@ -323,21 +153,6 @@ class TestSeriesAlterAxes:
             with pytest.raises(ValueError, match="No axis named"):
                 s.set_axis(list("abcd"), axis=axis, inplace=False)
 
-    def test_reset_index_drop_errors(self):
-        #  GH 20925
-
-        # KeyError raised for series index when passed level name is missing
-        s = Series(range(4))
-        with pytest.raises(KeyError, match="does not match index name"):
-            s.reset_index("wrong", drop=True)
-        with pytest.raises(KeyError, match="does not match index name"):
-            s.reset_index("wrong")
-
-        # KeyError raised for series when level to be dropped is missing
-        s = Series(range(4), index=MultiIndex.from_product([[1, 2]] * 2))
-        with pytest.raises(KeyError, match="not found"):
-            s.reset_index("wrong", drop=True)
-
     def test_droplevel(self):
         # GH20342
         ser = Series([1, 2, 3, 4])
