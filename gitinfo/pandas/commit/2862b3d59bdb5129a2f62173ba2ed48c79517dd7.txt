commit 2862b3d59bdb5129a2f62173ba2ed48c79517dd7
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Tue Feb 4 17:27:37 2020 -0800

    CLN: convert_list_indexer is always kind=loc (#31599)

diff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py
index e7f3acc57..6bc4a0fdb 100644
--- a/pandas/core/indexes/base.py
+++ b/pandas/core/indexes/base.py
@@ -68,7 +68,7 @@ import pandas.core.algorithms as algos
 from pandas.core.arrays import ExtensionArray
 from pandas.core.base import IndexOpsMixin, PandasObject
 import pandas.core.common as com
-from pandas.core.indexers import deprecate_ndim_indexing, maybe_convert_indices
+from pandas.core.indexers import deprecate_ndim_indexing
 from pandas.core.indexes.frozen import FrozenList
 import pandas.core.missing as missing
 from pandas.core.ops import get_op_result_name
@@ -3212,7 +3212,7 @@ class Index(IndexOpsMixin, PandasObject):
 
         return indexer
 
-    def _convert_listlike_indexer(self, keyarr, kind=None):
+    def _convert_listlike_indexer(self, keyarr):
         """
         Parameters
         ----------
@@ -3231,7 +3231,7 @@ class Index(IndexOpsMixin, PandasObject):
         else:
             keyarr = self._convert_arr_indexer(keyarr)
 
-        indexer = self._convert_list_indexer(keyarr, kind=kind)
+        indexer = self._convert_list_indexer(keyarr)
         return indexer, keyarr
 
     def _convert_arr_indexer(self, keyarr):
@@ -3265,7 +3265,7 @@ class Index(IndexOpsMixin, PandasObject):
         """
         return keyarr
 
-    def _convert_list_indexer(self, keyarr, kind=None):
+    def _convert_list_indexer(self, keyarr):
         """
         Convert a list-like indexer to the appropriate dtype.
 
@@ -3279,29 +3279,6 @@ class Index(IndexOpsMixin, PandasObject):
         -------
         positional indexer or None
         """
-        if (
-            kind in [None, "iloc"]
-            and is_integer_dtype(keyarr)
-            and not self.is_floating()
-        ):
-
-            if self.inferred_type == "mixed-integer":
-                indexer = self.get_indexer(keyarr)
-                if (indexer >= 0).all():
-                    return indexer
-                # missing values are flagged as -1 by get_indexer and negative
-                # indices are already converted to positive indices in the
-                # above if-statement, so the negative flags are changed to
-                # values outside the range of indices so as to trigger an
-                # IndexError in maybe_convert_indices
-                indexer[indexer < 0] = len(self)
-
-                return maybe_convert_indices(indexer, len(self))
-
-            elif not self.inferred_type == "integer":
-                keyarr = np.where(keyarr < 0, len(self) + keyarr, keyarr)
-                return keyarr
-
         return None
 
     def _invalid_indexer(self, form: str_t, key):
diff --git a/pandas/core/indexes/category.py b/pandas/core/indexes/category.py
index fc6da6f75..718b6afb7 100644
--- a/pandas/core/indexes/category.py
+++ b/pandas/core/indexes/category.py
@@ -667,12 +667,12 @@ class CategoricalIndex(ExtensionIndex, accessor.PandasDelegate):
         return super()._convert_scalar_indexer(key, kind=kind)
 
     @Appender(Index._convert_list_indexer.__doc__)
-    def _convert_list_indexer(self, keyarr, kind=None):
+    def _convert_list_indexer(self, keyarr):
         # Return our indexer or raise if all of the values are not included in
         # the categories
 
         if self.categories._defer_to_indexing:
-            indexer = self.categories._convert_list_indexer(keyarr, kind=kind)
+            indexer = self.categories._convert_list_indexer(keyarr)
             return Index(self.codes).get_indexer_for(indexer)
 
         indexer = self.categories.get_indexer(np.asarray(keyarr))
diff --git a/pandas/core/indexes/interval.py b/pandas/core/indexes/interval.py
index a665e4df0..0252a1366 100644
--- a/pandas/core/indexes/interval.py
+++ b/pandas/core/indexes/interval.py
@@ -537,7 +537,7 @@ class IntervalIndex(IntervalMixin, ExtensionIndex):
         return getattr(self, side)._maybe_cast_slice_bound(label, side, kind)
 
     @Appender(Index._convert_list_indexer.__doc__)
-    def _convert_list_indexer(self, keyarr, kind=None):
+    def _convert_list_indexer(self, keyarr):
         """
         we are passed a list-like indexer. Return the
         indexer for matching intervals.
diff --git a/pandas/core/indexes/multi.py b/pandas/core/indexes/multi.py
index 79b4cbbea..708bea7d1 100644
--- a/pandas/core/indexes/multi.py
+++ b/pandas/core/indexes/multi.py
@@ -2348,7 +2348,7 @@ class MultiIndex(Index):
             else:
                 raise
 
-    def _convert_listlike_indexer(self, keyarr, kind=None):
+    def _convert_listlike_indexer(self, keyarr):
         """
         Parameters
         ----------
@@ -2361,7 +2361,7 @@ class MultiIndex(Index):
             indexer is an ndarray or None if cannot convert
             keyarr are tuple-safe keys
         """
-        indexer, keyarr = super()._convert_listlike_indexer(keyarr, kind=kind)
+        indexer, keyarr = super()._convert_listlike_indexer(keyarr)
 
         # are we indexing a specific level
         if indexer is None and len(keyarr) and not isinstance(keyarr[0], tuple):
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index c818112e3..acbf05a74 100755
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -1462,7 +1462,8 @@ class _LocationIndexer(_NDFrameIndexerBase):
 
         # Have the index compute an indexer or return None
         # if it cannot handle:
-        indexer, keyarr = ax._convert_listlike_indexer(key, kind=self.name)
+        assert self.name == "loc"
+        indexer, keyarr = ax._convert_listlike_indexer(key)
         # We only act on all found values:
         if indexer is not None and (indexer != -1).all():
             self._validate_read_indexer(key, indexer, axis, raise_missing=raise_missing)
