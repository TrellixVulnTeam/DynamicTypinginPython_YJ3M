commit fa26bce51b78f0f3137ac977b365593dd706d141
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Fri Mar 13 20:12:12 2020 -0700

    values->_values (#32662)

diff --git a/pandas/core/indexes/category.py b/pandas/core/indexes/category.py
index 6388f2007..52423c400 100644
--- a/pandas/core/indexes/category.py
+++ b/pandas/core/indexes/category.py
@@ -396,7 +396,7 @@ class CategoricalIndex(ExtensionIndex, accessor.PandasDelegate):
     def unique(self, level=None):
         if level is not None:
             self._validate_index_level(level)
-        result = self.values.unique()
+        result = self._values.unique()
         # Use _simple_new instead of _shallow_copy to ensure we keep dtype
         #  of result, not self.
         return type(self)._simple_new(result, name=self.name)
@@ -423,7 +423,7 @@ class CategoricalIndex(ExtensionIndex, accessor.PandasDelegate):
         # 3. Rebuild CategoricalIndex.
         if other is None:
             other = self._na_value
-        values = np.where(cond, self.values, other)
+        values = np.where(cond, self._values, other)
         cat = Categorical(values, dtype=self.dtype)
         return type(self)._simple_new(cat, name=self.name)
 
@@ -532,13 +532,13 @@ class CategoricalIndex(ExtensionIndex, accessor.PandasDelegate):
                 "method='nearest' not implemented yet for CategoricalIndex"
             )
 
-        if isinstance(target, CategoricalIndex) and self.values.is_dtype_equal(target):
-            if self.values.equals(target.values):
+        if isinstance(target, CategoricalIndex) and self._values.is_dtype_equal(target):
+            if self._values.equals(target._values):
                 # we have the same codes
                 codes = target.codes
             else:
                 codes = _recode_for_categories(
-                    target.codes, target.categories, self.values.categories
+                    target.codes, target.categories, self._values.categories
                 )
         else:
             if isinstance(target, CategoricalIndex):
@@ -560,7 +560,7 @@ class CategoricalIndex(ExtensionIndex, accessor.PandasDelegate):
                 target = target.codes
                 indexer, missing = self._engine.get_indexer_non_unique(target)
                 return ensure_platform_int(indexer), missing
-            target = target.values
+            target = target._values
 
         codes = self.categories.get_indexer(target)
         indexer, missing = self._engine.get_indexer_non_unique(codes)
@@ -679,7 +679,7 @@ class CategoricalIndex(ExtensionIndex, accessor.PandasDelegate):
         >>> idx.map({'a': 'first', 'b': 'second'})
         Index(['first', 'second', nan], dtype='object')
         """
-        return self._shallow_copy_with_infer(self.values.map(mapper))
+        return self._shallow_copy_with_infer(self._values.map(mapper))
 
     def delete(self, loc):
         """
diff --git a/pandas/core/indexes/interval.py b/pandas/core/indexes/interval.py
index 80d58de6f..3d31e7f80 100644
--- a/pandas/core/indexes/interval.py
+++ b/pandas/core/indexes/interval.py
@@ -409,7 +409,7 @@ class IntervalIndex(IntervalMixin, ExtensionIndex):
     @Appender(Index.astype.__doc__)
     def astype(self, dtype, copy=True):
         with rewrite_exception("IntervalArray", type(self).__name__):
-            new_values = self.values.astype(dtype, copy=copy)
+            new_values = self._values.astype(dtype, copy=copy)
         if is_interval_dtype(new_values):
             return self._shallow_copy(new_values)
         return Index.astype(self, dtype, copy=copy)
@@ -887,7 +887,7 @@ class IntervalIndex(IntervalMixin, ExtensionIndex):
     def where(self, cond, other=None):
         if other is None:
             other = self._na_value
-        values = np.where(cond, self.values, other)
+        values = np.where(cond, self._values, other)
         result = IntervalArray(values)
         return self._shallow_copy(result)
 
diff --git a/pandas/core/indexes/numeric.py b/pandas/core/indexes/numeric.py
index 2d1d69772..3a6f3630c 100644
--- a/pandas/core/indexes/numeric.py
+++ b/pandas/core/indexes/numeric.py
@@ -248,7 +248,7 @@ class IntegerIndex(NumericIndex):
     @property
     def asi8(self) -> np.ndarray:
         # do not cache or you'll create a memory leak
-        return self.values.view(self._default_dtype)
+        return self._values.view(self._default_dtype)
 
 
 class Int64Index(IntegerIndex):
@@ -368,7 +368,7 @@ class Float64Index(NumericIndex):
         elif is_integer_dtype(dtype) and not is_extension_array_dtype(dtype):
             # TODO(jreback); this can change once we have an EA Index type
             # GH 13149
-            arr = astype_nansafe(self.values, dtype=dtype)
+            arr = astype_nansafe(self._values, dtype=dtype)
             return Int64Index(arr)
         return super().astype(dtype, copy=copy)
 
@@ -395,7 +395,7 @@ class Float64Index(NumericIndex):
         from pandas.io.formats.format import FloatArrayFormatter
 
         formatter = FloatArrayFormatter(
-            self.values,
+            self._values,
             na_rep=na_rep,
             float_format=float_format,
             decimal=decimal,
