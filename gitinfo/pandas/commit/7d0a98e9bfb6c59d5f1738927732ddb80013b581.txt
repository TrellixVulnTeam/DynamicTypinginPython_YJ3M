commit 7d0a98e9bfb6c59d5f1738927732ddb80013b581
Author: ri938 <r_irv938@hotmail.com>
Date:   Thu Jul 6 13:37:11 2017 +0100

    Bug issue 16819 Index.get_indexer_not_unique inconsistent return types vs get_indexer (#16826)

diff --git a/doc/source/whatsnew/v0.21.0.txt b/doc/source/whatsnew/v0.21.0.txt
index ce0d40d32..4b97fb83c 100644
--- a/doc/source/whatsnew/v0.21.0.txt
+++ b/doc/source/whatsnew/v0.21.0.txt
@@ -53,6 +53,7 @@ Backwards incompatible API changes
 - :func:`read_csv` now treats ``'n/a'`` strings as missing values by default (:issue:`16078`)
 - :class:`pandas.HDFStore`'s string representation is now faster and less detailed. For the previous behavior, use ``pandas.HDFStore.info()``. (:issue:`16503`).
 - Compression defaults in HDF stores now follow pytable standards. Default is no compression and if ``complib`` is missing and ``complevel`` > 0 ``zlib`` is used (:issue:`15943`)
+- ``Index.get_indexer_non_unique()`` now returns a ndarray indexer rather than an ``Index``; this is consistent with ``Index.get_indexer()`` (:issue:`16819`)
 
 .. _whatsnew_0210.api:
 
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index c4b3e25ac..daf3381ae 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -896,8 +896,9 @@ class _GroupBy(PandasObject, SelectionMixin):
                 # we can't reindex, so we resort to this
                 # GH 14776
                 if isinstance(ax, MultiIndex) and not ax.is_unique:
-                    result = result.take(result.index.get_indexer_for(
-                        ax.values).unique(), axis=self.axis)
+                    indexer = algorithms.unique1d(
+                        result.index.get_indexer_for(ax.values))
+                    result = result.take(indexer, axis=self.axis)
                 else:
                     result = result.reindex_axis(ax, axis=self.axis)
 
diff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py
index 695f9f119..8a4878d9c 100644
--- a/pandas/core/indexes/base.py
+++ b/pandas/core/indexes/base.py
@@ -2256,8 +2256,8 @@ class Index(IndexOpsMixin, StringAccessorMixin, PandasObject):
             indexer = indexer.take((indexer != -1).nonzero()[0])
         except:
             # duplicates
-            indexer = Index(other._values).get_indexer_non_unique(
-                self._values)[0].unique()
+            indexer = algos.unique1d(
+                Index(other._values).get_indexer_non_unique(self._values)[0])
             indexer = indexer[indexer != -1]
 
         taken = other.take(indexer)
@@ -2704,7 +2704,7 @@ class Index(IndexOpsMixin, StringAccessorMixin, PandasObject):
             tgt_values = target._values
 
         indexer, missing = self._engine.get_indexer_non_unique(tgt_values)
-        return Index(indexer), missing
+        return indexer, missing
 
     def get_indexer_for(self, target, **kwargs):
         """
@@ -2942,7 +2942,6 @@ class Index(IndexOpsMixin, StringAccessorMixin, PandasObject):
             else:
 
                 # need to retake to have the same size as the indexer
-                indexer = indexer.values
                 indexer[~check] = 0
 
                 # reset the new indexer to account for the new size
diff --git a/pandas/tests/indexes/test_base.py b/pandas/tests/indexes/test_base.py
index 18dbe6624..7a81a1254 100644
--- a/pandas/tests/indexes/test_base.py
+++ b/pandas/tests/indexes/test_base.py
@@ -1131,6 +1131,17 @@ class TestIndex(Base):
         with pytest.raises(TypeError):
             idx.get_indexer(['a', 'b', 'c', 'd'], method='pad', tolerance=2)
 
+    def test_get_indexer_consistency(self):
+        # See GH 16819
+        for name, index in self.indices.items():
+            indexer = index.get_indexer(index[0:2])
+            assert isinstance(indexer, np.ndarray)
+            assert indexer.dtype == np.intp
+
+            indexer, _ = index.get_indexer_non_unique(index[0:2])
+            assert isinstance(indexer, np.ndarray)
+            assert indexer.dtype == np.intp
+
     def test_get_loc(self):
         idx = pd.Index([0, 1, 2])
         all_methods = [None, 'pad', 'backfill', 'nearest']
diff --git a/pandas/tests/indexes/test_category.py b/pandas/tests/indexes/test_category.py
index 4e4f9b29f..493274fff 100644
--- a/pandas/tests/indexes/test_category.py
+++ b/pandas/tests/indexes/test_category.py
@@ -386,8 +386,7 @@ class TestCategoricalIndex(Base):
             expected = oidx.get_indexer_non_unique(finder)[0]
 
             actual = ci.get_indexer(finder)
-            tm.assert_numpy_array_equal(
-                expected.values, actual, check_dtype=False)
+            tm.assert_numpy_array_equal(expected, actual)
 
     def test_reindex_dtype(self):
         c = CategoricalIndex(['a', 'b', 'c', 'a'])
