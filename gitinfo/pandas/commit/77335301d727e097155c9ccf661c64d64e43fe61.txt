commit 77335301d727e097155c9ccf661c64d64e43fe61
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Thu Jul 5 09:51:01 2018 -0700

    implement _local_timestamps in DatetimeArrayMixin (#21721)

diff --git a/pandas/core/arrays/datetimes.py b/pandas/core/arrays/datetimes.py
index a5acc3d0e..e5159141d 100644
--- a/pandas/core/arrays/datetimes.py
+++ b/pandas/core/arrays/datetimes.py
@@ -2,10 +2,11 @@
 import warnings
 
 import numpy as np
+from pytz import utc
 
 from pandas._libs import tslib
 from pandas._libs.tslib import Timestamp, NaT, iNaT
-from pandas._libs.tslibs import timezones
+from pandas._libs.tslibs import conversion, timezones
 
 from pandas.util._decorators import cache_readonly
 
@@ -110,6 +111,25 @@ class DatetimeArrayMixin(DatetimeLikeArrayMixin):
             new_values[mask] = iNaT
         return new_values.view('timedelta64[ns]')
 
+    # -----------------------------------------------------------------
+    # Timezone Conversion and Localization Methods
+
+    def _local_timestamps(self):
+        """
+        Convert to an i8 (unix-like nanosecond timestamp) representation
+        while keeping the local timezone and not using UTC.
+        This is used to calculate time-of-day information as if the timestamps
+        were timezone-naive.
+        """
+        values = self.asi8
+        indexer = values.argsort()
+        result = conversion.tz_convert(values.take(indexer), utc, self.tz)
+
+        n = len(indexer)
+        reverse = np.empty(n, dtype=np.int_)
+        reverse.put(indexer, np.arange(n))
+        return result.take(reverse)
+
     # ----------------------------------------------------------------
     # Conversion Methods - Vectorized analogues of Timedelta methods
 
diff --git a/pandas/core/indexes/datetimes.py b/pandas/core/indexes/datetimes.py
index 3494811cc..05f7af638 100644
--- a/pandas/core/indexes/datetimes.py
+++ b/pandas/core/indexes/datetimes.py
@@ -603,14 +603,7 @@ class DatetimeIndex(DatetimeArrayMixin, DatelikeOps, TimelikeOps,
         if self.is_monotonic:
             return conversion.tz_convert(self.asi8, utc, self.tz)
         else:
-            values = self.asi8
-            indexer = values.argsort()
-            result = conversion.tz_convert(values.take(indexer), utc, self.tz)
-
-            n = len(indexer)
-            reverse = np.empty(n, dtype=np.int_)
-            reverse.put(indexer, np.arange(n))
-            return result.take(reverse)
+            return DatetimeArrayMixin._local_timestamps(self)
 
     @classmethod
     def _simple_new(cls, values, name=None, freq=None, tz=None,
