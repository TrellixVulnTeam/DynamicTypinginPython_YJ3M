commit 517cc63751b42736275a595121bc742dccea0113
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jan 5 11:15:47 2012 -0500

    ENH: more merge benchmarks

diff --git a/bench/bench_merge.R b/bench/bench_merge.R
index a73c7c642..eef56b7d9 100644
--- a/bench/bench_merge.R
+++ b/bench/bench_merge.R
@@ -7,16 +7,23 @@ for (i in 1:N) {
   indices[i] <- paste(sample(letters, 10), collapse="")
   indices2[i] <- paste(sample(letters, 10), collapse="")
 }
-left <- data.frame(key=rep(indices, 10),
-                   key2=rep(indices2, 10),
-                   value=rnorm(100000))
-right <- data.frame(key=indices,
-                    key2=indices2,
-                    value2=rnorm(10000))
+left <- data.frame(key=rep(indices[1:8000], 10),
+                   key2=rep(indices2[1:8000], 10),
+                   value=rnorm(80000))
+right <- data.frame(key=indices[2001:10000],
+                    key2=indices2[2001:10000],
+                    value2=rnorm(8000))
 
-right2 <- data.frame(key=rep(indices, 2),
-                     key2=rep(indices2, 2),
-                     value2=rnorm(20000))
+right2 <- data.frame(key=rep(right$key, 2),
+                     key2=rep(right$key2, 2),
+                     value2=rnorm(16000))
+
+left.dt <- data.table(left, key=c("key", "key2"))
+right.dt <- data.table(right, key=c("key", "key2"))
+right2.dt <- data.table(right2, key=c("key", "key2"))
+
+# left.dt2 <- data.table(left)
+# right.dt2 <- data.table(right)
 
 ## left <- data.frame(key=rep(indices[1:1000], 10),
 ##                    key2=rep(indices2[1:1000], 10),
@@ -47,7 +54,23 @@ outer.join <- function(sort=FALSE) {
 }
 
 inner.join <- function(sort=FALSE) {
-  result <- base::merge(left, right, sort=sort)
+  result <- base::merge(left, right, all=FALSE, sort=sort)
+}
+
+left.join.dt <- function(sort=FALSE) {
+  result <- merge(left.dt, right.dt, all.x=TRUE, sort=sort)
+}
+
+right.join.dt <- function(sort=FALSE) {
+  result <- merge(left.dt, right.dt, all.y=TRUE, sort=sort)
+}
+
+outer.join.dt <- function(sort=FALSE) {
+  result <- merge(left.dt, right.dt, all=TRUE, sort=sort)
+}
+
+inner.join.dt <- function(sort=FALSE) {
+  result <- merge(left.dt, right.dt, all=FALSE, sort=sort)
 }
 
 plyr.join <- function(type) {
@@ -57,6 +80,8 @@ plyr.join <- function(type) {
 
 sort.options <- c(FALSE, TRUE)
 
+# many-to-one
+
 results <- matrix(nrow=3, ncol=3)
 colnames(results) <- c("base::merge", "plyr", "data.table")
 rownames(results) <- c("inner", "outer", "left")
@@ -65,25 +90,68 @@ base.functions <- c(inner.join, outer.join, left.join)
 plyr.functions <- c(function() plyr.join("inner"),
                     function() plyr.join("full"),
                     function() plyr.join("left"))
-dt.functions <- c(inner.join, outer.join, left.join)
+dt.functions <- c(inner.join.dt, outer.join.dt, left.join.dt)
 for (i in 1:3) {
   base.func <- base.functions[[i]]
   plyr.func <- plyr.functions[[i]]
-  ## dt.func <- dt.functions[[i]]
+  dt.func <- dt.functions[[i]]
   results[i, 1] <- timeit(base.func)
   results[i, 2] <- timeit(plyr.func)
+  results[i, 3] <- timeit(dt.func)
+}
+
+
+# many-to-many
+
+left.join <- function(sort=FALSE) {
+  result <- base::merge(left, right2, all.x=TRUE, sort=sort)
+}
+
+right.join <- function(sort=FALSE) {
+  result <- base::merge(left, right2, all.y=TRUE, sort=sort)
+}
+
+outer.join <- function(sort=FALSE) {
+  result <- base::merge(left, right2, all=TRUE, sort=sort)
+}
+
+inner.join <- function(sort=FALSE) {
+  result <- base::merge(left, right2, all=FALSE, sort=sort)
+}
+
+left.join.dt <- function(sort=FALSE) {
+  result <- merge(left.dt, right2.dt, all.x=TRUE, sort=sort)
+}
+
+right.join.dt <- function(sort=FALSE) {
+  result <- merge(left.dt, right2.dt, all.y=TRUE, sort=sort)
 }
 
-## do.something <- function(df, f) {
-##   f(df)
-## }
-## df <- matrix(nrow=4, ncol=2)
-## functions <- c(colSums, rowSums)
-## g <- functions[1]
-## do.something(df, function(df) g(df))
+outer.join.dt <- function(sort=FALSE) {
+  result <- merge(left.dt, right2.dt, all=TRUE, sort=sort)
+}
+
+inner.join.dt <- function(sort=FALSE) {
+  result <- merge(left.dt, right2.dt, all=FALSE, sort=sort)
+}
+
+sort.options <- c(FALSE, TRUE)
+
+# many-to-one
 
-##       dont_sort   sort
-## inner    0.2297 0.2286
-## outer    1.1811 1.2843
-## left     0.6706 0.7766
-## right    0.2995 0.3371
+results <- matrix(nrow=3, ncol=2)
+colnames(results) <- c("base::merge", "data.table")
+rownames(results) <- c("inner", "outer", "left")
+
+base.functions <- c(inner.join, outer.join, left.join)
+plyr.functions <- c(function() plyr.join("inner"),
+                    function() plyr.join("full"),
+                    function() plyr.join("left"))
+dt.functions <- c(inner.join.dt, outer.join.dt, left.join.dt)
+for (i in 1:3) {
+  base.func <- base.functions[[i]]
+  plyr.func <- plyr.functions[[i]]
+  dt.func <- dt.functions[[i]]
+  results[i, 1] <- timeit(base.func)
+  results[i, 2] <- timeit(dt.func)
+}
diff --git a/bench/bench_merge.py b/bench/bench_merge.py
index 01d445e35..9f58f418c 100644
--- a/bench/bench_merge.py
+++ b/bench/bench_merge.py
@@ -32,23 +32,26 @@ import gc
 import time
 from pandas.util.testing import rands
 N = 10000
+
 indices = np.array([rands(10) for _ in xrange(N)], dtype='O')
+indices2 = np.array([rands(10) for _ in xrange(N)], dtype='O')
+key = np.tile(indices[:8000], 10)
+key2 = np.tile(indices2[:8000], 10)
 
-key = np.tile(indices, 10)
-key2 = key.copy()
-random.shuffle(key2)
-indices2 = indices.copy()
-random.shuffle(indices2)
 left = DataFrame({'key' : key, 'key2':key2,
-                  'value' : np.random.randn(100000)})
-right = DataFrame({'key': indices, 'key2':indices2,
-                   'value2' : np.random.randn(10000)})
-join_methods = ['inner', 'outer', 'left', 'right']
-results = DataFrame(index=join_methods, columns=[False, True])
+                  'value' : np.random.randn(80000)})
+right = DataFrame({'key': indices[2000:], 'key2':indices2[2000:],
+                   'value2' : np.random.randn(8000)})
+
+right2 = right.append(right, ignore_index=True)
+
+
+join_methods = ['inner', 'outer', 'left'] #, 'right']
+results = DataFrame(index=join_methods, columns=[False])
 niter = 10
-for sort in [False, True]:
+for sort in [False]:
     for join_method in join_methods:
-        f = lambda: merge(left, right, how=join_method, sort=sort)
+        f = lambda: merge(left, right2, how=join_method, sort=sort)
         gc.disable()
         start = time.time()
         for _ in xrange(niter):
@@ -56,18 +59,23 @@ for sort in [False, True]:
         elapsed = (time.time() - start) / niter
         gc.enable()
         results[sort][join_method] = elapsed
-results.columns = ['dont_sort', 'sort']
+results.columns = ['pandas']
+# results.columns = ['dont_sort', 'sort']
 
 
 # R results
 from StringIO import StringIO
-r_results = read_table(StringIO("""dont_sort   sort
-inner    0.2297 0.2286
-outer    1.1811 1.2843
-left     0.6706 0.7766
-right    0.2995 0.3371
+# many to one
+r_results = read_table(StringIO("""base::merge   plyr data.table
+inner      0.2172 0.1197     0.1035
+outer      0.3362 0.1658     0.1930
+left       0.2559 0.1217     0.1559
 """), sep='\s+')
 
+all_results = results.join(r_results)
+
+all_results = all_results.div(all_results['pandas'], axis=0)
+
 sort_results = DataFrame.from_items([('pandas', results['sort']),
                                      ('R', r_results['sort'])])
 sort_results['Ratio'] = sort_results['R'] / sort_results['pandas']
@@ -77,3 +85,15 @@ nosort_results = DataFrame.from_items([('pandas', results['dont_sort']),
                                        ('R', r_results['dont_sort'])])
 nosort_results['Ratio'] = sort_results['R'] / sort_results['pandas']
 
+# many to many
+
+from StringIO import StringIO
+# many to one
+r_results = read_table(StringIO("""base::merge data.table
+inner      0.4503     0.1278
+outer      0.7973     0.2347
+left       0.5433     0.1877
+"""), sep='\s+')
+
+all_results = results.join(r_results)
+all_results = all_results.div(all_results['pandas'], axis=0)
diff --git a/pandas/stats/plm.py b/pandas/stats/plm.py
index 975b97305..5734ba2e2 100644
--- a/pandas/stats/plm.py
+++ b/pandas/stats/plm.py
@@ -367,8 +367,11 @@ class PanelOLS(OLS):
     @cache_readonly
     def _rmse_raw(self):
         """Returns the raw rmse values."""
-        X = self._x_trans.values
-        Y = self._y_trans.values.squeeze()
+        X = self._x.values
+        Y = self._y.values.squeeze()
+
+        # X = self._x_trans.values
+        # Y = self._y_trans.values.squeeze()
 
         resid = Y - np.dot(X, self._beta_raw)
         ss = (resid ** 2).sum()
