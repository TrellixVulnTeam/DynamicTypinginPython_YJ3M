commit 45aee1b9f75daf1f7f63ba6cc01a7dc867f83c64
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Apr 12 22:53:12 2010 +0000

    removed duplicated code
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@156 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 6311bb95c..2bcaa93dd 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -720,7 +720,12 @@ class DataFrame(Picklable, Groupable):
         -------
         This DataFrame with rows containing any NaN values deleted
         """
-        newIndex = self.index[self.count(1) != 0]
+        if specificColumns:
+            theCount = self.filterItems(specificColumns).count(axis=1)
+        else:
+            theCount = self.count(axis=1)
+
+        newIndex = self.index[theCount != 0]
         return self.reindex(newIndex)
 
     def dropIncompleteRows(self, specificColumns=None, minObs=None):
@@ -742,7 +747,7 @@ class DataFrame(Picklable, Groupable):
         -------
         This DataFrame with rows containing any NaN values deleted
         """
-        N = len(self._series)
+        N = len(self.cols())
 
         if specificColumns:
             colSet = set(specificColumns)
@@ -904,9 +909,6 @@ class DataFrame(Picklable, Groupable):
         if self.index.equals(index):
             return self.copy()
 
-        # if len(index) == 0:
-        #     return DataFrame(index=NULL_INDEX)
-
         if not isinstance(index, Index):
             index = Index(index)
 
@@ -929,7 +931,7 @@ class DataFrame(Picklable, Groupable):
 
         missingValue = {
             float  : NaN,
-            object : None,
+            object : NaN,
             np.bool_ : False
         }
 
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index a0a79674c..492df57c7 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -866,62 +866,6 @@ class DataMatrix(DataFrame):
         return DataMatrix(result, index=self.index,
                           columns=self.columns, objects=self.objects)
 
-    def dropEmptyRows(self, specificColumns=None):
-        """
-        Return DataMatrix with rows omitted containing ALL NaN values
-        for optionally specified set of columns.
-
-        Parameters
-        ----------
-        specificColumns : list-like, optional keyword
-            Columns to consider in removing NaN values. As a typical
-            application, you might provide the list of the columns involved in
-            a regression to exclude all the missing data in one shot.
-
-        Returns
-        -------
-        DataMatrix with rows containing any NaN values deleted
-        """
-        if specificColumns:
-            theCount = self.filterItems(specificColumns).count(axis=1)
-        else:
-            theCount = self.count(axis=1)
-
-        return self.reindex(self.index[theCount > 0])
-
-    def dropIncompleteRows(self, specificColumns=None, minObs=None):
-        """
-        Return DataFrame with rows omitted containing ANY NaN values for
-        optionally specified set of columns.
-
-        Parameters
-        ----------
-        minObs : int or None (default)
-           Instead of requiring all the columns to have observations, require
-           only minObs observations
-        specificColumns : list-like, optional keyword
-            Columns to consider in removing NaN values. As a typical
-            application, you might provide the list of the columns involved in
-            a regression to exlude all the missing data in one shot.
-
-        Returns
-        -------
-        This DataFrame with rows containing any NaN values deleted
-        """
-        N = self.values.shape[1]
-
-        if specificColumns:
-            cols = self.columns.intersection(specificColumns)
-            theCount = self.filterItems(cols).count(axis=1)
-            N = len(cols)
-        else:
-            theCount = self.count(axis=1)
-
-        if minObs is None:
-            minObs = N
-
-        return self.reindex(self.index[theCount >= minObs])
-
     def fill(self, value=None, method='pad'):
         """
         Fill NaN values using the specified method.
