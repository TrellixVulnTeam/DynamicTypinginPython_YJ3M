commit 7399f636946fdc702d6877ddf034819436bf6ebd
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Dec 28 09:35:31 2012 -0500

    BUG: fix integer overflow possibility in python parser. close #2601

diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index 7f7abd8a0..259473284 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -1492,6 +1492,16 @@ A,B,C
                                header=0)
         tm.assert_frame_equal(result, expected)
 
+    def test_integer_overflow_bug(self):
+        # #2601
+        data = "65248E10 11\n55555E55 22\n"
+
+        result = self.read_csv(StringIO(data), header=None, sep=' ')
+        self.assertTrue(result[0].dtype == np.float64)
+
+        result = self.read_csv(StringIO(data), header=None, sep='\s+')
+        self.assertTrue(result[0].dtype == np.float64)
+
 
 class TestPythonParser(ParserTests, unittest.TestCase):
 
diff --git a/pandas/lib.pyx b/pandas/lib.pyx
index d904d86f1..a9096c24c 100644
--- a/pandas/lib.pyx
+++ b/pandas/lib.pyx
@@ -41,6 +41,8 @@ from util cimport is_array, _checknull, _checknan
 
 cdef extern from "headers/stdint.h":
     enum: UINT8_MAX
+    enum: INT64_MAX
+    enum: INT64_MIN
 
 
 cdef extern from "math.h":
diff --git a/pandas/src/inference.pyx b/pandas/src/inference.pyx
index 4c1bccda1..30d809c9f 100644
--- a/pandas/src/inference.pyx
+++ b/pandas/src/inference.pyx
@@ -298,6 +298,8 @@ def is_period_array(ndarray[object] values):
 cdef extern from "parse_helper.h":
     inline int floatify(object, double *result) except -1
 
+cdef double fINT64_MAX = <double> INT64_MAX
+cdef double fINT64_MIN = <double> INT64_MIN
 
 def maybe_convert_numeric(ndarray[object] values, set na_values,
                           convert_empty=True):
@@ -351,8 +353,10 @@ def maybe_convert_numeric(ndarray[object] values, set na_values,
                     seen_float = 1
                 elif 'inf' in val:  # special case to handle +/-inf
                     seen_float = 1
-                else:
+                elif fval < fINT64_MAX and fval > fINT64_MIN:
                     ints[i] = <int64_t> fval
+                else:
+                    seen_float = 1
 
     if seen_complex:
         return complexes
