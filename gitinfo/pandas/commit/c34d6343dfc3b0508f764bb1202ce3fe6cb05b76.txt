commit c34d6343dfc3b0508f764bb1202ce3fe6cb05b76
Author: jreback <jeff@reback.net>
Date:   Fri Dec 20 08:04:35 2013 -0500

    BUG: construction of DataFrame from empty Series regression (GH5756)

diff --git a/doc/source/release.rst b/doc/source/release.rst
index 8ac168e18..a2d6ae61b 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -247,7 +247,8 @@ API Changes
     (:issue:`4390`)
   - allow ``ix/loc`` for Series/DataFrame/Panel to set on any axis even when
     the single-key is not currently contained in the index for that axis
-    (:issue:`2578`, :issue:`5226`, :issue:`5632`, :issue:`5720`, :issue:`5744`)
+    (:issue:`2578`, :issue:`5226`, :issue:`5632`, :issue:`5720`,
+     :issue:`5744`, :issue:`5756`)
   - Default export for ``to_clipboard`` is now csv with a sep of `\t` for
     compat (:issue:`3368`)
   - ``at`` now will enlarge the object inplace (and return the same)
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 8a3869d15..ed6d7fef4 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -325,15 +325,16 @@ class DataFrame(NDFrame):
     def _init_ndarray(self, values, index, columns, dtype=None,
                       copy=False):
         if isinstance(values, Series):
-            if columns is None and values.name is not None:
-                columns = [values.name]
+            if columns is None:
+                if values.name is not None:
+                    columns = [values.name]
             if index is None:
                 index = values.index
             else:
                 values = values.reindex(index)
 
             # zero len case (GH #2234)
-            if not len(values) and len(columns):
+            if not len(values) and columns is not None and len(columns):
                 values = np.empty((0, 1), dtype=object)
 
         values = _prep_ndarray(values, copy=copy)
diff --git a/pandas/tests/test_indexing.py b/pandas/tests/test_indexing.py
index c7fb209b4..f4e203444 100644
--- a/pandas/tests/test_indexing.py
+++ b/pandas/tests/test_indexing.py
@@ -1793,6 +1793,14 @@ class TestIndexing(tm.TestCase):
         expected = DataFrame(columns=['A','B','C'])
         assert_frame_equal(result,expected)
 
+        # GH 5756
+        # setting with empty Series
+        df = DataFrame(Series())
+        assert_frame_equal(df, DataFrame({ 0 : Series() }))
+
+        df = DataFrame(Series(name='foo'))
+        assert_frame_equal(df, DataFrame({ 'foo' : Series() }))
+
     def test_cache_updating(self):
         # GH 4939, make sure to update the cache on setitem
 
