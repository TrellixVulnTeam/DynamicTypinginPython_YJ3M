commit 51d7bcaf56ea8f4297437a6ba75eb27375bb7b7b
Author: Roy Hyunjin Han <rhh@crosscompute.com>
Date:   Wed Apr 1 20:44:20 2015 -0400

    Fix zlib and blosc imports

diff --git a/pandas/io/packers.py b/pandas/io/packers.py
index b3e2e16af..04321296d 100644
--- a/pandas/io/packers.py
+++ b/pandas/io/packers.py
@@ -65,26 +65,7 @@ from pandas.msgpack import Unpacker as _Unpacker, Packer as _Packer
 # until we can pass this into our conversion functions,
 # this is pretty hacky
 compressor = None
-_IMPORTS = False
-_BLOSC = False
 
-def _importers():
-    # import things we need
-    # but make this done on a first use basis
-
-    global _IMPORTS
-    if _IMPORTS:
-        return
-
-    _IMPORTS = True
-
-    global  _BLOSC
-    import zlib
-    try:
-        import blosc
-        _BLOSC = True
-    except:
-        pass
 
 def to_msgpack(path_or_buf, *args, **kwargs):
     """
@@ -103,7 +84,6 @@ def to_msgpack(path_or_buf, *args, **kwargs):
     compress : type of compressor (zlib or blosc), default to None (no
                compression)
     """
-    _importers()
     global compressor
     compressor = kwargs.pop('compress', None)
     append = kwargs.pop('append', None)
@@ -146,7 +126,6 @@ def read_msgpack(path_or_buf, iterator=False, **kwargs):
     obj : type of object stored in file
 
     """
-    _importers()
     path_or_buf, _ = get_filepath_or_buffer(path_or_buf)
     if iterator:
         return Iterator(path_or_buf)
@@ -232,9 +211,10 @@ def convert(values):
 
         # convert to a bytes array
         v = v.tostring()
+        import zlib
         return zlib.compress(v)
 
-    elif compressor == 'blosc' and _BLOSC:
+    elif compressor == 'blosc':
 
         # return string arrays like they are
         if dtype == np.object_:
@@ -242,6 +222,7 @@ def convert(values):
 
         # convert to a bytes array
         v = v.tostring()
+        import blosc
         return blosc.compress(v, typesize=dtype.itemsize)
 
     # ndarray (on original dtype)
@@ -254,18 +235,13 @@ def unconvert(values, dtype, compress=None):
         return np.array(values, dtype=object)
 
     if compress == 'zlib':
-
+        import zlib
         values = zlib.decompress(values)
         return np.frombuffer(values, dtype=dtype)
 
     elif compress == 'blosc':
-
-        if not _BLOSC:
-            raise Exception("cannot uncompress w/o blosc")
-
-        # decompress
+        import blosc
         values = blosc.decompress(values)
-
         return np.frombuffer(values, dtype=dtype)
 
     # from a string
