commit 400181653e7c71c86d11123be87973f4ae6dd5f1
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Jun 28 08:43:29 2011 -0400

    BUG: boolean DataFrame comparison had been broken after internals refactoring

diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 4c59d43c8..a59a503fd 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -632,10 +632,13 @@ def form_blocks(data, index, columns):
     # put "leftover" columns in float bucket, where else?
     # generalize?
     num_dict = {}
+    bool_dict = {}
     object_dict = {}
     for k, v in data.iteritems():
         if issubclass(v.dtype.type, (np.floating, np.integer)):
             num_dict[k] = v
+        elif v.dtype == np.bool_:
+            bool_dict[k] = v
         else:
             object_dict[k] = v
 
@@ -653,6 +656,10 @@ def form_blocks(data, index, columns):
         num_block = _simple_blockify(num_dict, columns, num_dtype)
         blocks.append(num_block)
 
+    if len(bool_dict):
+        bool_block = _simple_blockify(bool_dict, columns, np.bool_)
+        blocks.append(bool_block)
+
     if len(object_dict) > 0:
         object_block = _simple_blockify(object_dict, columns, np.object_)
         blocks.append(object_block)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 46703e751..56c633c5b 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -104,6 +104,13 @@ class CheckIndexing(object):
         self.assertRaises(Exception, df.__setitem__, df[:-1] > 0, 2)
         self.assertRaises(Exception, df.__setitem__, df * 0, 2)
 
+        # index with DataFrame
+        mask = df > np.abs(df)
+        expected = df.copy()
+        df[df > np.abs(df)] = np.nan
+        expected.values[mask.values] = np.nan
+        assert_frame_equal(df, expected)
+
     def test_setitem_corner(self):
         # corner case
         df = self.klass({'B' : [1., 2., 3.],
@@ -604,6 +611,11 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
 
         self.assertEqual(self.mixed_frame['foo'].dtype, np.object_)
 
+    def test_constructor_bool(self):
+        df = DataFrame({0 : np.ones(10, dtype=bool),
+                        1 : np.zeros(10, dtype=bool)})
+        self.assertEqual(df.values.dtype, np.bool_)
+
     def test_is_mixed_type(self):
         self.assert_(not self.frame._is_mixed_type)
         self.assert_(self.mixed_frame._is_mixed_type)
