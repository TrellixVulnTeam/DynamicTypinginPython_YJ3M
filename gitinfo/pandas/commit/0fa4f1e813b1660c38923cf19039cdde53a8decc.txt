commit 0fa4f1e813b1660c38923cf19039cdde53a8decc
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Oct 24 15:03:25 2011 -0400

    ENH: -> int64 everywhere

diff --git a/RELEASE.rst b/RELEASE.rst
index 3afa14162..633f3bdd7 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -200,6 +200,7 @@ feedback on the library.
     indexed the same
   - Fix corner case bugs in DataFrame.apply
   - Setting DataFrame index did not cause Series cache to get cleared
+  - Various int32 -> int64 platform-specific issues
 
 Thanks
 ------
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index dd6bc1d70..747d271b6 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2455,7 +2455,7 @@ class DataFrame(NDFrame):
             mask = np.isfinite(y)
 
             if skipna:
-                if not issubclass(y.dtype.type, np.int_):
+                if not issubclass(y.dtype.type, np.integer):
                     np.putmask(y, -mask, 0)
 
             the_sum = y.sum(axis)
@@ -2484,7 +2484,7 @@ class DataFrame(NDFrame):
         min : Series
         """
         values = self.values.copy()
-        if skipna and not issubclass(values.dtype.type, np.int_):
+        if skipna and not issubclass(values.dtype.type, np.integer):
             np.putmask(values, -np.isfinite(values), np.inf)
         return Series(values.min(axis), index=self._get_agg_axis(axis))
 
@@ -2505,7 +2505,7 @@ class DataFrame(NDFrame):
         max : Series
         """
         values = self.values.copy()
-        if skipna and not issubclass(values.dtype.type, np.int_):
+        if skipna and not issubclass(values.dtype.type, np.integer):
             np.putmask(values, -np.isfinite(values), -np.inf)
         return Series(values.max(axis), index=self._get_agg_axis(axis))
 
@@ -2527,7 +2527,7 @@ class DataFrame(NDFrame):
         """
         y = np.array(self.values, subok=True)
         if skipna:
-            if not issubclass(y.dtype.type, np.int_):
+            if not issubclass(y.dtype.type, np.integer):
                 y[np.isnan(y)] = 1
         result = y.prod(axis)
         count = self.count(axis)
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index f4ff2ab09..90a3b1c2c 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -321,7 +321,7 @@ class NDFrame(PandasObject):
             axis = self._get_axis_number(axis)
 
         y = self.values.copy()
-        if not issubclass(y.dtype.type, np.int_):
+        if not issubclass(y.dtype.type, np.integer):
             mask = np.isnan(self.values)
 
             if skipna:
@@ -360,7 +360,7 @@ class NDFrame(PandasObject):
             axis = self._get_axis_number(axis)
 
         y = self.values.copy()
-        if not issubclass(y.dtype.type, np.int_):
+        if not issubclass(y.dtype.type, np.integer):
             mask = np.isnan(self.values)
 
             if skipna:
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 8bad5a77e..cee8b51c6 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -815,7 +815,6 @@ class BlockManager(object):
         assert((result >= 0).all())
         return result
 
-_data_types = [np.float_, np.int_]
 def form_blocks(data, axes):
     # pre-filter out items if we passed it
     items = axes[0]
@@ -847,7 +846,7 @@ def form_blocks(data, axes):
         blocks.append(float_block)
 
     if len(int_dict):
-        int_block = _simple_blockify(int_dict, items, np.int_)
+        int_block = _simple_blockify(int_dict, items, np.int64)
         blocks.append(int_block)
 
     if len(bool_dict):
diff --git a/pandas/core/series.py b/pandas/core/series.py
index e6648c677..2ef4e1ecd 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -709,7 +709,7 @@ copy : boolean, default False
         """
         arr = self.values.copy()
         if skipna:
-            if not issubclass(arr.dtype.type, np.int_):
+            if not issubclass(arr.dtype.type, np.integer):
                 np.putmask(arr, isnull(arr), np.inf)
         return arr.min()
 
@@ -728,7 +728,7 @@ copy : boolean, default False
         """
         arr = self.values.copy()
         if skipna:
-            if not issubclass(arr.dtype.type, np.int_):
+            if not issubclass(arr.dtype.type, np.integer):
                 np.putmask(arr, isnull(arr), -np.inf)
         return arr.max()
 
@@ -822,7 +822,7 @@ copy : boolean, default False
         """
         arr = self.values.copy()
 
-        do_mask = skipna and not issubclass(self.dtype.type, np.int_)
+        do_mask = skipna and not issubclass(self.dtype.type, np.integer)
         if do_mask:
             mask = isnull(arr)
             np.putmask(arr, mask, 0.)
@@ -851,7 +851,7 @@ copy : boolean, default False
         """
         arr = self.values.copy()
 
-        do_mask = skipna and not issubclass(self.dtype.type, np.int_)
+        do_mask = skipna and not issubclass(self.dtype.type, np.integer)
         if do_mask:
             mask = isnull(arr)
             np.putmask(arr, mask, 1.)
diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index 02e989515..b5496bbcb 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -221,8 +221,8 @@ True,3
 3.0,3
 """
         data = read_csv(StringIO(data))
-        self.assert_(data['A'].dtype == np.float_)
-        self.assert_(data['B'].dtype == np.int_)
+        self.assert_(data['A'].dtype == np.float64)
+        self.assert_(data['B'].dtype == np.int64)
 
     def test_infer_index_col(self):
         data = """A,B,C
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index ebc27fd83..4b55a4260 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -198,7 +198,7 @@ class CheckIndexing(object):
         self.assertEqual(dm.values.dtype, np.object_)
 
         dm['C'] = 1
-        self.assertEqual(dm['C'].dtype, np.int_)
+        self.assertEqual(dm['C'].dtype, np.int64)
 
         # set existing column
         dm['A'] = 'bar'
@@ -371,7 +371,7 @@ class CheckIndexing(object):
 
     def test_fancy_getitem_slice_mixed(self):
         sliced = self.mixed_frame.ix[:, -3:]
-        self.assert_(sliced['D'].dtype == np.float_)
+        self.assert_(sliced['D'].dtype == np.float64)
 
         # get view with single block
         sliced = self.frame.ix[:, -3:]
@@ -935,13 +935,13 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         }
         frame = DataFrame(test_data, dtype=float)
         self.assertEqual(len(frame), 3)
-        self.assert_(frame['B'].dtype == np.float_)
-        self.assert_(frame['A'].dtype == np.float_)
+        self.assert_(frame['B'].dtype == np.float64)
+        self.assert_(frame['A'].dtype == np.float64)
 
         frame = DataFrame(test_data)
         self.assertEqual(len(frame), 3)
         self.assert_(frame['B'].dtype == np.object_)
-        self.assert_(frame['A'].dtype == np.float_)
+        self.assert_(frame['A'].dtype == np.float64)
 
         # can't cast to float
         test_data = {
@@ -951,7 +951,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         frame = DataFrame(test_data, dtype=float)
         self.assertEqual(len(frame), 20)
         self.assert_(frame['A'].dtype == np.object_)
-        self.assert_(frame['B'].dtype == np.float_)
+        self.assert_(frame['B'].dtype == np.float64)
 
     def test_constructor_dict_dont_upcast(self):
         d = {'Col1': {'Row1': 'A String', 'Row2': np.nan}}
@@ -973,7 +973,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         # cast type
         frame = DataFrame(mat, columns=['A', 'B', 'C'],
                            index=[1, 2], dtype=int)
-        self.assert_(frame.values.dtype == np.int_)
+        self.assert_(frame.values.dtype == np.int64)
 
         # 1-D input
         frame = DataFrame(np.zeros(3), columns=['A'], index=[1, 2, 3])
@@ -1022,16 +1022,16 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         # does not error but ends up float
         df = DataFrame(index=range(10), columns=['a','b'], dtype=int)
-        self.assert_(df.values.dtype == np.float_)
+        self.assert_(df.values.dtype == np.float64)
 
     def test_constructor_scalar_inference(self):
         data = {'int' : 1, 'bool' : True,
                 'float' : 3., 'object' : 'foo'}
         df = DataFrame(data, index=np.arange(10))
 
-        self.assert_(df['int'].dtype == np.int_)
+        self.assert_(df['int'].dtype == np.int64)
         self.assert_(df['bool'].dtype == np.bool_)
-        self.assert_(df['float'].dtype == np.float_)
+        self.assert_(df['float'].dtype == np.float64)
         self.assert_(df['object'].dtype == np.object_)
 
     def test_constructor_DataFrame(self):
@@ -1039,7 +1039,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         assert_frame_equal(df, self.frame)
 
         df_casted = DataFrame(self.frame, dtype=int)
-        self.assert_(df_casted.values.dtype == np.int_)
+        self.assert_(df_casted.values.dtype == np.int64)
 
     def test_constructor_more(self):
         # used to be in test_matrix.py
@@ -1079,7 +1079,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
                         index=np.arange(10))
 
         self.assertEqual(len(dm.columns), 2)
-        self.assert_(dm.values.dtype == np.float_)
+        self.assert_(dm.values.dtype == np.float64)
 
     def test_constructor_ragged(self):
         data = {'A' : randn(10),
@@ -2162,13 +2162,13 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
     def test_reindex_int(self):
         smaller = self.intframe.reindex(self.intframe.index[::2])
 
-        self.assert_(smaller['A'].dtype == np.int_)
+        self.assert_(smaller['A'].dtype == np.int64)
 
         bigger = smaller.reindex(self.intframe.index)
-        self.assert_(bigger['A'].dtype == np.float_)
+        self.assert_(bigger['A'].dtype == np.float64)
 
         smaller = self.intframe.reindex(columns=['A', 'B'])
-        self.assert_(smaller['A'].dtype == np.int_)
+        self.assert_(smaller['A'].dtype == np.int64)
 
     def test_reindex_like(self):
         other = self.frame.reindex(index=self.frame.index[:10],
@@ -2966,7 +2966,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         # ints are weird
 
         smaller = self.intframe.reindex(columns=['A', 'B', 'E'])
-        self.assert_(smaller['E'].dtype == np.float_)
+        self.assert_(smaller['E'].dtype == np.float64)
 
     def test_rename_objects(self):
         renamed = self.mixed_frame.rename(columns=str.upper)
@@ -3306,7 +3306,7 @@ class TestDataFrameJoin(unittest.TestCase):
         df1 = DataFrame({'A' : 1., 'B' : 2, 'C' : 'foo', 'D' : True},
                         index=np.arange(10),
                         columns=['A', 'B', 'C', 'D'])
-        self.assert_(df1['B'].dtype == np.int_)
+        self.assert_(df1['B'].dtype == np.int64)
         self.assert_(df1['D'].dtype == np.bool_)
 
         df2 = DataFrame({'A' : 1., 'B' : 2, 'C' : 'foo', 'D' : True},
diff --git a/pandas/tests/test_ndframe.py b/pandas/tests/test_ndframe.py
index e09d78b17..70a5d79d2 100644
--- a/pandas/tests/test_ndframe.py
+++ b/pandas/tests/test_ndframe.py
@@ -13,15 +13,15 @@ class TestNDFrame(unittest.TestCase):
 
     def test_constructor(self):
         # with cast
-        ndf = NDFrame(self.ndf._data, dtype=int)
-        self.assert_(ndf.values.dtype == np.int_)
+        ndf = NDFrame(self.ndf._data, dtype=np.int64)
+        self.assert_(ndf.values.dtype == np.int64)
 
     def test_ndim(self):
         self.assertEquals(self.ndf.ndim, 2)
 
     def test_astype(self):
         casted = self.ndf.astype(int)
-        self.assert_(casted.values.dtype == np.int_)
+        self.assert_(casted.values.dtype == np.int64)
 
 if __name__ == '__main__':
     import nose
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 07ada8ae1..b555cae37 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -1137,7 +1137,7 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
 
         # NO NaNs introduced
         reindexed_int = int_ts.reindex(int_ts.index[::2])
-        self.assert_(reindexed_int.dtype == np.int_)
+        self.assert_(reindexed_int.dtype == np.int64)
 
     def test_reindex_bool(self):
 
diff --git a/pandas/tests/test_sparse.py b/pandas/tests/test_sparse.py
index 3ac04eb4d..a361dc70e 100644
--- a/pandas/tests/test_sparse.py
+++ b/pandas/tests/test_sparse.py
@@ -250,7 +250,7 @@ class TestSparseSeries(TestCase,
         self.assert_((self.bseries.sp_values[:5] == 5).all())
 
     def test_astype(self):
-        self.assertRaises(Exception, self.bseries.astype, np.int_)
+        self.assertRaises(Exception, self.bseries.astype, np.int64)
 
     def test_kind(self):
         self.assertEquals(self.bseries.kind, 'block')
@@ -958,7 +958,7 @@ class TestSparseDataFrame(TestCase, test_frame.SafeForSparse):
         self.assert_(isinstance(result, SparseDataFrame))
 
     def test_astype(self):
-        self.assertRaises(Exception, self.frame.astype, np.int_)
+        self.assertRaises(Exception, self.frame.astype, np.int64)
 
     def test_fillna(self):
         self.assertRaises(NotImplementedError, self.frame.fillna, 0)
