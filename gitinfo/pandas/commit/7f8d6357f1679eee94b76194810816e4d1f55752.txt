commit 7f8d6357f1679eee94b76194810816e4d1f55752
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Aug 8 23:07:04 2011 -0400

    TST: MultiIndex unit tests

diff --git a/pandas/core/index.py b/pandas/core/index.py
index 09aacf0cb..92cbc8641 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -499,8 +499,6 @@ class MultiIndex(Index):
             j = labels.searchsorted(loc, side='right')
             return slice(i, j)
 
-        return self.indexMap[key]
-
     def _get_tuple_loc(self, tup):
         indexer = self._get_label_key(tup)
         try:
@@ -566,19 +564,17 @@ class MultiIndex(Index):
 
         if start is None:
             start_slice = 0
-        elif isinstance(start, tuple):
-            start_slice = self._partial_tup_index(start, side='left')
         else:
-            start_label = self._get_label_key_approx(start, side='right')
-            start_slice = self.labels[0].searchsorted(start_label)
+            if not isinstance(start, tuple):
+                start = start,
+            start_slice = self._partial_tup_index(start, side='left')
 
         if end is None:
             end_slice = len(self)
-        elif isinstance(end, tuple):
-            end_slice = self._partial_tup_index(end, side='right')
         else:
-            end_label = self._get_label_key_approx(end, side='right')
-            end_slice = self.labels[0].searchsorted(end_label, side='right')
+            if not isinstance(end, tuple):
+                end = end,
+            end_slice = self._partial_tup_index(end, side='right')
 
         return start_slice, end_slice
 
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 3b5d3d649..e13061f8b 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -348,11 +348,28 @@ class TestMultiIndex(unittest.TestCase):
         self.assertEquals(sorted_idx.get_loc('baz'), slice(3, 4))
         self.assertEquals(sorted_idx.get_loc('foo'), slice(0, 2))
 
+    def test_get_loc(self):
+        self.assert_(self.index.get_loc(('foo', 'two')) == 1)
+        self.assert_(self.index.get_loc(('baz', 'two')) == 3)
+        self.assertRaises(KeyError, self.index.get_loc, ('bar', 'two'))
+
     def test_slice_locs_partial(self):
         sorted_idx, _ = self.index.sortlevel(0)
         result = sorted_idx.slice_locs(('foo', 'two'), ('qux', 'one'))
         self.assertEquals(result, (1, 5))
 
+        result = sorted_idx.slice_locs(None, ('qux', 'one'))
+        self.assertEquals(result, (0, 5))
+
+        result = sorted_idx.slice_locs(('foo', 'two'), None)
+        self.assertEquals(result, (1, len(sorted_idx)))
+
+        result = sorted_idx.slice_locs('bar', 'baz')
+        self.assertEquals(result, (2, 4))
+
+    def test_slice_locs_not_contained(self):
+        pass
+
     def test_consistency(self):
         # need to construct an overflow
         major_axis = range(70000)
@@ -394,6 +411,42 @@ class TestMultiIndex(unittest.TestCase):
         result = index.truncate(before=1, after=2)
         self.assertEqual(len(result.levels[0]), 2)
 
+    def test_get_indexer(self):
+        major_axis = Index(range(4))
+        minor_axis = Index(range(2))
+
+        major_labels = np.array([0, 0, 1, 2, 2, 3, 3])
+        minor_labels = np.array([0, 1, 0, 0, 1, 0, 1])
+
+        index = MultiIndex(levels=[major_axis, minor_axis],
+                           labels=[major_labels, minor_labels])
+        idx1 = index[:5]
+        idx2 = index[[1,3,5]]
+
+        r1, r2 = idx1.get_indexer(idx2)
+        assert_almost_equal(r1, [1, 3, -1])
+        assert_almost_equal(r2, [True, True, False])
+
+        r1, r2 = idx2.get_indexer(idx1, method='pad')
+        assert_almost_equal(r1, [-1, 0, 0, 1, 1])
+        assert_almost_equal(r2, [False, True, True, True, True])
+
+        rffill1, rffill2 = idx2.get_indexer(idx1, method='ffill')
+        assert_almost_equal(r1, rffill1)
+        assert_almost_equal(r2, rffill2)
+
+        r1, r2 = idx2.get_indexer(idx1, method='backfill')
+        assert_almost_equal(r1, [0, 0, 1, 1, 2])
+        assert_almost_equal(r2, [True, True, True, True, True])
+
+        rbfill1, rbfill2 = idx2.get_indexer(idx1, method='bfill')
+        assert_almost_equal(r1, rbfill1)
+        assert_almost_equal(r2, rbfill2)
+
+        # pass non-MultiIndex
+        self.assertRaises(Exception, idx1.get_indexer,
+                          idx2.get_tuple_index())
+
     def test_format(self):
         self.index.format()
 
