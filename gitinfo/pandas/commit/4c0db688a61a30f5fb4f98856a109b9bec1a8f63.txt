commit 4c0db688a61a30f5fb4f98856a109b9bec1a8f63
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Jul 9 18:04:53 2011 -0400

    added fill_value option to DataFrame.{add, mul, sub, div}

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 82ae28f6b..47768e71d 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -43,6 +43,9 @@ Parameters
 other : Series, DataFrame, or constant
 axis : {0, 1, 'index', 'columns'}
     For Series input, axis to match Series index on
+fill_value : None or float value, default None
+    Fill missing (NaN) values with this value. If both DataFrame locations are
+    missing, the result will be missing
 
 Notes
 -----
@@ -54,17 +57,17 @@ result : DataFrame
 """
 
 def _arith_method(func, name, default_axis='columns'):
-    def f(self, other, axis=default_axis):
+    def f(self, other, axis=default_axis, fill_value=None):
         if isinstance(other, DataFrame):    # Another DataFrame
-            return self._combine_frame(other, func)
+            return self._combine_frame(other, func, fill_value)
         elif isinstance(other, Series):
             if axis is not None:
                 axis = self._get_axis_name(axis)
                 if axis == 'index':
-                    return self._combine_match_index(other, func)
+                    return self._combine_match_index(other, func, fill_value)
                 else:
-                    return self._combine_match_columns(other, func)
-            return self._combine_series_infer(other, func)
+                    return self._combine_match_columns(other, func, fill_value)
+            return self._combine_series_infer(other, func, fill_value)
         else:
             return self._combine_const(other, func)
 
@@ -658,22 +661,6 @@ class DataFrame(PandasGeneric):
 
         return common_cols
 
-    def _union_columns(self, other):
-        union_cols = self.columns
-
-        if not union_cols.equals(other.columns):
-            union_cols = union_cols.union(other.columns)
-
-        return union_cols
-
-    def _union_index(self, other):
-        union_index = self.index
-
-        if not union_index.equals(other.index):
-            union_index = union_index.union(other.index)
-
-        return union_index
-
     #----------------------------------------------------------------------
     # Array interface
 
@@ -1143,7 +1130,7 @@ class DataFrame(PandasGeneric):
     #----------------------------------------------------------------------
     # Arithmetic / combination related
 
-    def _combine_frame(self, other, func):
+    def _combine_frame(self, other, func, fill_value=None):
         """
         Methodology, briefly
         - Really concerned here about speed, space
@@ -1156,17 +1143,19 @@ class DataFrame(PandasGeneric):
 
         Could probably deal with some Cython action in here at some point
         """
-        new_index = self._union_index(other)
+        new_index = _union_indices(self.index, other.index)
 
-        if not self and not other:
-            return DataFrame(index=new_index)
-        elif not self:
-            return other * nan
-        elif not other:
-            return self * nan
+        # some shortcuts
+        if fill_value is None:
+            if not self and not other:
+                return DataFrame(index=new_index)
+            elif not self:
+                return other * nan
+            elif not other:
+                return self * nan
 
         need_reindex = False
-        new_columns = self._union_columns(other)
+        new_columns = _union_indices(self.columns, other.columns)
         need_reindex = (need_reindex or new_index is not self.index
                         or new_index is not other.index)
         need_reindex = (need_reindex or new_columns is not self.columns
@@ -1177,8 +1166,22 @@ class DataFrame(PandasGeneric):
             this = self.reindex(index=new_index, columns=new_columns)
             other = other.reindex(index=new_index, columns=new_columns)
 
-        return DataFrame(func(this.values, other.values),
-                         index=new_index, columns=new_columns,
+        this_vals = this.values
+        other_vals = other.values
+
+        if fill_value is not None:
+            this_mask = isnull(this_vals)
+            other_mask = isnull(other_vals)
+            this_vals = this_vals.copy()
+            other_vals = other_vals.copy()
+
+            # one but not both
+            mask = this_mask ^ other_mask
+            this_vals[this_mask & mask] = fill_value
+            other_vals[other_mask & mask] = fill_value
+
+        result = func(this_vals, other_vals)
+        return DataFrame(result, index=new_index, columns=new_columns,
                          copy=False)
 
     def _indexed_same(self, other):
@@ -1186,7 +1189,7 @@ class DataFrame(PandasGeneric):
         same_columns = self.columns.equals(other.columns)
         return same_index and same_columns
 
-    def _combine_series_infer(self, other, func):
+    def _combine_series_infer(self, other, func, fill_value=None):
         if len(other) == 0:
             return self * nan
 
@@ -1197,12 +1200,12 @@ class DataFrame(PandasGeneric):
 
         # teeny hack because one does DataFrame + TimeSeries all the time
         if self.index.is_all_dates() and other.index.is_all_dates():
-            return self._combine_match_index(other, func)
+            return self._combine_match_index(other, func, fill_value)
         else:
-            return self._combine_match_columns(other, func)
+            return self._combine_match_columns(other, func, fill_value)
 
-    def _combine_match_index(self, other, func):
-        new_index = self._union_index(other)
+    def _combine_match_index(self, other, func, fill_value=None):
+        new_index = _union_indices(self.index, other.index)
         values = self.values
         other_vals = other.values
 
@@ -1213,16 +1216,22 @@ class DataFrame(PandasGeneric):
         if not self.index.equals(new_index):
             values = self.reindex(new_index).values
 
+        if fill_value is not None:
+            raise NotImplementedError
+
         return DataFrame(func(values.T, other_vals).T, index=new_index,
                          columns=self.columns, copy=False)
 
-    def _combine_match_columns(self, other, func):
+    def _combine_match_columns(self, other, func, fill_value=None):
         newCols = self.columns.union(other.index)
 
         # Operate column-wise
         this = self.reindex(columns=newCols)
         other = other.reindex(newCols).values
 
+        if fill_value is not None:
+            raise NotImplementedError
+
         return DataFrame(func(this.values, other), index=self.index,
                          columns=newCols, copy=False)
 
@@ -1341,7 +1350,7 @@ class DataFrame(PandasGeneric):
         -------
         DataFrame
         """
-        return self.combine(other, np.add, fill_value=0.)
+        return self.add(other, fill_value=0.)
 
     def combineMult(self, other):
         """
@@ -1357,7 +1366,7 @@ class DataFrame(PandasGeneric):
         -------
         DataFrame
         """
-        return self.combine(other, np.multiply, fill_value=1.)
+        return self.mul(other, fill_value=1.)
 
     #----------------------------------------------------------------------
     # Misc methods
@@ -2456,6 +2465,15 @@ class DataFrame(PandasGeneric):
 
         return self._ix
 
+def _union_indices(a, b):
+    if len(a) == 0:
+        return b
+    elif len(b) == 0:
+        return a
+    if not a.equals(b):
+        return a.union(b)
+    return a
+
 def extract_index(data):
     def _union_if(index, new_index):
         if index is None:
diff --git a/pandas/core/series.py b/pandas/core/series.py
index bd07c4c35..b0c6c23b7 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -745,12 +745,10 @@ class Series(np.ndarray, PandasGeneric):
             this = self.reindex(new_index)
             other = other.reindex(new_index)
 
-        do_fill = fill_value is not None
-
         this_vals = this.values
         other_vals = other.values
 
-        if do_fill:
+        if fill_value is not None:
             this_mask = isnull(this_vals)
             other_mask = isnull(other_vals)
             this_vals = this_vals.copy()
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index c58763ea1..e5892c4b5 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -6,7 +6,7 @@ import cPickle as pickle
 import os
 import unittest
 
-from numpy import random
+from numpy import random, nan
 from numpy.random import randn
 import numpy as np
 
@@ -98,7 +98,7 @@ class CheckIndexing(object):
         s = self.frame['A'].copy()
         self.frame['E'] = s
 
-        self.frame['E'][5:10] = np.nan
+        self.frame['E'][5:10] = nan
         self.assert_(notnull(s[5:10]).all())
 
     def test_setitem_boolean(self):
@@ -119,8 +119,8 @@ class CheckIndexing(object):
         # index with DataFrame
         mask = df > np.abs(df)
         expected = df.copy()
-        df[df > np.abs(df)] = np.nan
-        expected.values[mask.values] = np.nan
+        df[df > np.abs(df)] = nan
+        expected.values[mask.values] = nan
         assert_frame_equal(df, expected)
 
     def test_setitem_corner(self):
@@ -919,8 +919,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         biggie = self.klass({'A' : randn(1000),
                              'B' : tm.makeStringIndex(1000)},
                             index=range(1000))
-        biggie['A'][:20] = np.NaN
-        biggie['B'][:20] = np.NaN
+        biggie['A'][:20] = nan
+        biggie['B'][:20] = nan
 
         foo = repr(biggie)
 
@@ -955,8 +955,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
                              'B' : tm.makeStringIndex(1000)},
                             index=range(1000))
 
-        biggie['A'][:20] = np.NaN
-        biggie['B'][:20] = np.NaN
+        biggie['A'][:20] = nan
+        biggie['B'][:20] = nan
         buf = StringIO()
         biggie.toString(buf=buf)
 
@@ -1018,8 +1018,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
     def test_first_last_valid(self):
         N = len(self.frame.index)
         mat = randn(N)
-        mat[:5] = np.NaN
-        mat[-5:] = np.NaN
+        mat[:5] = nan
+        mat[-5:] = nan
 
         frame = self.klass({'foo' : mat}, index=self.frame.index)
         index = frame.first_valid_index()
@@ -1064,7 +1064,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         frame_copy = self.frame.reindex(self.frame.index[::2])
 
         del frame_copy['D']
-        frame_copy['C'][:5] = np.NaN
+        frame_copy['C'][:5] = nan
 
         added = self.frame + frame_copy
         tm.assert_dict_equal(added['A'].valid(),
@@ -1188,7 +1188,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
     def test_toCSV_fromcsv(self):
         path = '__tmp__'
 
-        self.frame['A'][:5] = np.NaN
+        self.frame['A'][:5] = nan
 
         self.frame.toCSV(path)
         self.frame.toCSV(path, cols=['A', 'B'])
@@ -1316,8 +1316,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         self.assert_(copy._data is not self.mixed_frame._data)
 
     def test_corr(self):
-        self.frame['A'][:5] = np.NaN
-        self.frame['B'][:10] = np.NaN
+        self.frame['A'][:5] = nan
+        self.frame['B'][:10] = nan
 
         correls = self.frame.corr()
 
@@ -1350,7 +1350,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
     def test_dropEmptyRows(self):
         N = len(self.frame.index)
         mat = randn(N)
-        mat[:5] = np.NaN
+        mat[:5] = nan
 
         frame = self.klass({'foo' : mat}, index=self.frame.index)
 
@@ -1363,7 +1363,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
     def test_dropIncompleteRows(self):
         N = len(self.frame.index)
         mat = randn(N)
-        mat[:5] = np.NaN
+        mat[:5] = nan
 
         frame = self.klass({'foo' : mat}, index=self.frame.index)
         frame['bar'] = 5
@@ -1375,8 +1375,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         self.assert_(samesize_frame.index.equals(self.frame.index))
 
     def test_fillna(self):
-        self.tsframe['A'][:5] = np.NaN
-        self.tsframe['A'][-5:] = np.NaN
+        self.tsframe['A'][:5] = nan
+        self.tsframe['A'][-5:] = nan
 
         zero_filled = self.tsframe.fillna(0)
         self.assert_((zero_filled['A'][:5] == 0).all())
@@ -1386,8 +1386,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         self.assert_((padded['A'][-5:] == padded['A'][-5]).all())
 
         # mixed type
-        self.mixed_frame['foo'][5:20] = np.NaN
-        self.mixed_frame['A'][-10:] = np.NaN
+        self.mixed_frame['foo'][5:20] = nan
+        self.mixed_frame['A'][-10:] = nan
 
         result = self.mixed_frame.fillna(value=0)
 
@@ -1923,9 +1923,20 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
     def test_combineAdd(self):
         # trivial
         comb = self.frame.combineAdd(self.frame)
-
         assert_frame_equal(comb, self.frame * 2)
 
+        # more rigorous
+        a = DataFrame([[1., nan, nan, 2., nan]],
+                      columns=np.arange(5))
+        b = DataFrame([[2., 3., nan, 2., 6., nan]],
+                      columns=np.arange(6))
+        expected = DataFrame([[3., 3., nan, 4., 6., nan]],
+                             columns=np.arange(6))
+        result = a.combineAdd(b)
+        assert_frame_equal(result, expected)
+        result2 = a.T.combineAdd(b.T)
+        assert_frame_equal(result2, expected.T)
+
         # corner cases
         comb = self.frame.combineAdd(self.empty)
         assert_frame_equal(comb, self.frame)
@@ -1936,10 +1947,12 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         # integer corner case
         df1 = DataFrame({'x':[5]})
         df2 = DataFrame({'x':[1]})
-        df3 = DataFrame({'x':[6.]})
+        df3 = DataFrame({'x':[6]})
         comb = df1.combineAdd(df2)
         assert_frame_equal(comb, df3)
 
+        # TODO: test integer fill corner?
+
     def test_combineMult(self):
         # trivial
         comb = self.frame.combineMult(self.frame)
@@ -2328,8 +2341,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         self.assert_('foo' not in renamed)
 
     def test_fill_corner(self):
-        self.mixed_frame['foo'][5:20] = np.NaN
-        self.mixed_frame['A'][-10:] = np.NaN
+        self.mixed_frame['foo'][5:20] = nan
+        self.mixed_frame['A'][-10:] = nan
 
         filled = self.mixed_frame.fillna(value=0)
         self.assert_((filled['foo'][5:20] == 0).all())
