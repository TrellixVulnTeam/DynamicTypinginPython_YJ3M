commit 570a03a475fd419f6d94b26a6e9dbbe60757f4ee
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Apr 6 00:39:54 2012 -0400

    BUG: convert datetime64 -> datetime.datetime for matplotlib, close #1003

diff --git a/pandas/core/api.py b/pandas/core/api.py
index 340d319c7..2bed120cf 100644
--- a/pandas/core/api.py
+++ b/pandas/core/api.py
@@ -19,7 +19,7 @@ from pandas.core.datetools import Timestamp, Interval
 from pandas.core.series import Series, TimeSeries
 from pandas.core.frame import DataFrame
 from pandas.core.panel import Panel
-from pandas.core.groupby import groupby
+from pandas.core.groupby import groupby, TimeGrouper
 from pandas.core.reshape import pivot_simple as pivot
 
 DataMatrix = DataFrame
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 81a9de163..0def5c3d8 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -145,7 +145,7 @@ class PandasObject(Picklable):
         axis : int, optional, default 0
         as_index : see synonymous argument of groupby
         """
-        from pandas.core.groupby import Tinterval, translate_grouping
+        from pandas.core.groupby import TimeGrouper, translate_grouping
 
         if isinstance(rule, basestring):
             rule = datetools.to_offset(rule)
@@ -160,7 +160,8 @@ class PandasObject(Picklable):
         if not isinstance(rule, datetools.DateOffset):
             raise ValueError("Rule not a recognized offset")
 
-        interval = Tinterval(rule, label='right', closed='right', _obj=self)
+        interval = TimeGrouper(rule, label='right',
+                               closed='right', _obj=self)
 
         currfreq = len(idx)
         targfreq = len(interval.binner) - 2 # since binner extends endpoints
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 74c3cfc7a..f86e10506 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -782,7 +782,7 @@ def _generate_time_binner(dtindex, offset,
 
     return DatetimeIndex(freq=offset, start=first, end=last, periods=nperiods)
 
-class Tinterval(Grouper, CustomGrouper):
+class TimeGrouper(Grouper, CustomGrouper):
     """
     Custom groupby class for time-interval grouping
 
@@ -831,7 +831,7 @@ class Tinterval(Grouper, CustomGrouper):
         self.obj = obj
 
         if not isinstance(obj.index, DatetimeIndex):
-            raise ValueError("Cannot apply Tinterval to non-DatetimeIndex")
+            raise ValueError("Cannot apply TimeGrouper to non-DatetimeIndex")
 
         index = obj.index
 
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 3a1a0b60c..69315e548 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -156,6 +156,10 @@ class Index(np.ndarray):
             return u'%s([%s], dtype=''%s'')' % (type(self).__name__, converted,
                                               str(self.values.dtype))
 
+    def _mpl_repr(self):
+        # how to represent ourselves to matplotlib
+        return self.values
+
     @property
     def values(self):
         return np.asarray(self)
@@ -1386,6 +1390,10 @@ class DatetimeIndex(Int64Index):
 
         return indexSlice
 
+    def _mpl_repr(self):
+        # how to represent ourselves to matplotlib
+        return self.values.astype('O')
+
     def __repr__(self):
         if self.offset is not None:
             output = str(self.__class__) + '\n'
@@ -2185,9 +2193,9 @@ class IntervalIndex(Int64Index):
         except:
             return super(DatetimeIndex, self).map(func_to_map)
 
-    def _mplib_repr(self):
+    def _mpl_repr(self):
         # how to represent ourselves to matplotlib
-        return datetools._skts_box_array(self, self.freq), False
+        return datetools._skts_box_array(self, self.freq)
 
     def to_timestamp(self):
         """
diff --git a/pandas/tests/test_timeseries.py b/pandas/tests/test_timeseries.py
index e01fd3ccb..2e3851fa9 100644
--- a/pandas/tests/test_timeseries.py
+++ b/pandas/tests/test_timeseries.py
@@ -5,23 +5,15 @@ import unittest
 
 import nose
 
-from numpy import nan
 import numpy as np
-import numpy.ma as ma
 
-from pandas import (Index, Series, TimeSeries, DataFrame, isnull, notnull,
+from pandas import (Index, Series, TimeSeries, DataFrame, isnull,
                     date_range, Timestamp)
-from pandas.core.index import MultiIndex
 
 from pandas import DatetimeIndex
 
-import pandas.core.datetools as datetools
-import pandas.core.nanops as nanops
-
-from pandas.util import py3compat
 from pandas.util.testing import assert_series_equal, assert_almost_equal
 import pandas.util.testing as tm
-import pandas
 
 
 import pandas._tseries as lib
@@ -42,7 +34,7 @@ from numpy.random import rand
 
 from pandas.util.testing import assert_series_equal, assert_frame_equal
 
-from pandas.core.groupby import Tinterval
+from pandas.core.groupby import TimeGrouper
 from pandas.core.datetools import Minute, BDay, Timestamp
 
 import pandas.core.common as com
@@ -483,7 +475,7 @@ class TestDatetime64(unittest.TestCase):
         data = np.array([1]*len(dti))
         s = Series(data, index=dti)
 
-        b = Tinterval(Minute(5))
+        b = TimeGrouper(Minute(5))
         g = s.groupby(b)
 
         self.assertEquals(g.ngroups, 2593)
@@ -511,7 +503,7 @@ class TestDatetime64(unittest.TestCase):
 
         result = s.convert('5Min')
 
-        grouper = Tinterval(Minute(5), closed='right', label='right')
+        grouper = TimeGrouper(Minute(5), closed='right', label='right')
         expect = s.groupby(grouper).agg(lambda x: x[-1])
 
         assert_series_equal(result, expect)
@@ -585,7 +577,7 @@ class TestDatetime64(unittest.TestCase):
     def test_convert_olhc(self):
         s = self.series
 
-        grouper = Tinterval(Minute(5), closed='right', label='right')
+        grouper = TimeGrouper(Minute(5), closed='right', label='right')
         expect = s.groupby(grouper).agg(lambda x: x[-1])
         result = s.convert('5Min', how='ohlc')
 
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index 4632bcc63..19da372ce 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -221,7 +221,8 @@ class MPLPlot(object):
 
     def _get_xticks(self):
         index = self.data.index
-        is_datetype = index.inferred_type in ('datetime', 'date')
+        is_datetype = index.inferred_type in ('datetime', 'date',
+                                              'datetime64')
 
         if self.use_index:
             if index.is_numeric() or is_datetype:
@@ -231,7 +232,7 @@ class MPLPlot(object):
                 matplotlib raises exception when using non numeric/datetime
                 values for xaxis, several actions are already taken by plt.
                 """
-                x = index.values
+                x = index._mpl_repr()
             else:
                 self._need_to_set_index = True
                 x = range(len(index))
@@ -535,6 +536,23 @@ def plot_series(series, label=None, kind='line', use_index=True, rot=None,
 
     return plot_obj.ax
 
+# if use_index:
+#     # custom datetime/interval plotting
+#     from pandas import IntervalIndex, DatetimeIndex
+#     if isinstance(self.index, IntervalIndex):
+#         return tsp.tsplot(self)
+#     if isinstance(self.index, DatetimeIndex):
+#         offset = self.index.freq
+#         name = datetools._newOffsetNames.get(offset, None)
+#         if name is not None:
+#             try:
+#                 code = datetools._interval_str_to_code(name)
+#                 s_ = Series(self.values,
+#                             index=self.index.to_interval(freq=code),
+#                             name=self.name)
+#                 tsp.tsplot(s_)
+#             except:
+#                 pass
 
 def boxplot(data, column=None, by=None, ax=None, fontsize=None,
             rot=0, grid=True, figsize=None):
