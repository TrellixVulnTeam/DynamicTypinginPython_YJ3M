commit f6c956949077cadcd0233c58418fa1fdc05fe1fa
Author: Adam Klein <adamklein@gmail.com>
Date:   Tue Feb 28 19:47:12 2012 -0500

    TST: more test coverage for release target

diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index 25076ef26..7f5567b20 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -153,7 +153,7 @@ def read_clipboard(**kwargs):  # pragma: no cover
     text = clipboard_get()
     return read_table(StringIO(text), **kwargs)
 
-def to_clipboard(obj):
+def to_clipboard(obj): # pragma: no cover
     """
     Attempt to write text representation of object to the system clipboard
 
diff --git a/pandas/sparse/series.py b/pandas/sparse/series.py
index 29a9805b4..c0f734b07 100644
--- a/pandas/sparse/series.py
+++ b/pandas/sparse/series.py
@@ -432,7 +432,7 @@ to sparse
                                   fill_value=self.fill_value)
 
         if inplace:
-            self.sp_values[:] = result.sp_values
+            self.sp_values[:] = result.values
             return self
         else:
             return result
diff --git a/pandas/sparse/tests/test_sparse.py b/pandas/sparse/tests/test_sparse.py
index 8dcd09e06..86a94c6a8 100644
--- a/pandas/sparse/tests/test_sparse.py
+++ b/pandas/sparse/tests/test_sparse.py
@@ -1053,6 +1053,16 @@ class TestSparseDataFrame(TestCase, test_frame.SafeForSparse):
         expected = df.to_dense().fillna(0).to_sparse(fill_value=0)
         assert_sp_frame_equal(result, expected)
 
+        result = df.copy()
+        result.fillna(0, inplace=True)
+        expected = df.to_dense().fillna(0).to_sparse(fill_value=0)
+        assert_sp_frame_equal(result, expected)
+
+        result = df.copy()
+        result = df['A']
+        result.fillna(0, inplace=True)
+        assert_series_equal(result, df['A'].fillna(0))
+
     def test_rename(self):
         # just check this works
         renamed = self.frame.rename(index=str)
diff --git a/pandas/tests/test_graphics.py b/pandas/tests/test_graphics.py
index 975c2a296..3253d7ca1 100644
--- a/pandas/tests/test_graphics.py
+++ b/pandas/tests/test_graphics.py
@@ -14,9 +14,9 @@ class TestSeriesPlots(unittest.TestCase):
 
     @classmethod
     def setUpClass(cls):
-        #import sys
-        #if 'IPython' in sys.modules:
-        #    raise nose.SkipTest
+        import sys
+        if 'IPython' in sys.modules:
+            raise nose.SkipTest
 
         try:
             import matplotlib as mpl
@@ -50,9 +50,9 @@ class TestDataFramePlots(unittest.TestCase):
 
     @classmethod
     def setUpClass(cls):
-        #import sys
-        #if 'IPython' in sys.modules:
-        #    raise nose.SkipTest
+        import sys
+        if 'IPython' in sys.modules:
+            raise nose.SkipTest
 
         try:
             import matplotlib as mpl
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 5fe7112e7..a7bb9b959 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -1149,7 +1149,7 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         expected = s[5:16].dropna()
         assert_series_equal(result, expected)
 
-    def test_scalar_na_cmp(self):
+    def test_scalar_na_cmp_corners(self):
         s = Series([2,3,4,5,6,7,8,9,10])
         s[::2] = np.nan
 
@@ -1158,6 +1158,14 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
 
         self.assertRaises(ValueError, tester, s, datetime(2005,1,1))
 
+        s = Series([2,3,4,5,6,7,8,9,datetime(2005,1,1)])
+        s[::2] = np.nan
+
+        assert_series_equal(tester(s, list(s)), s)
+
+        d = DataFrame({'A':s})
+        self.assertRaises(TypeError, tester, s, d)
+
     def test_idxmin(self):
         # test idxmin
         # _check_stat_op approach can not be used here because of isnull check.
@@ -2047,7 +2055,7 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
     def test_pad_nan(self):
         x = TimeSeries([np.nan, 1., np.nan, 3., np.nan],
                        ['z', 'a', 'b', 'c', 'd'], dtype=float)
-        x = x.fillna(method='pad')
+        x.fillna(method='pad', inplace=True)
         expected = TimeSeries([np.nan, 1.0, 1.0, 3.0, 3.0],
                                 ['z', 'a', 'b', 'c', 'd'], dtype=float)
         assert_series_equal(x[1:], expected[1:])
