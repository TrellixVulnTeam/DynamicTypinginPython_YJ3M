commit 03dacc1ef0a74c78a6912923425c742edaca7d3f
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Mon Apr 6 14:53:19 2020 -0700

    TST: misplaced reduction/indexing tests (#33307)

diff --git a/pandas/tests/frame/test_analytics.py b/pandas/tests/frame/test_analytics.py
index 6525e93d8..e1fc7e9d7 100644
--- a/pandas/tests/frame/test_analytics.py
+++ b/pandas/tests/frame/test_analytics.py
@@ -1274,3 +1274,28 @@ class TestDataFrameAnalytics:
             df_nan.clip(lower=s, axis=0)
             for op in ["lt", "le", "gt", "ge", "eq", "ne"]:
                 getattr(df, op)(s_nan, axis=0)
+
+
+class TestDataFrameReductions:
+    def test_min_max_dt64_with_NaT(self):
+        # Both NaT and Timestamp are in DataFrame.
+        df = pd.DataFrame({"foo": [pd.NaT, pd.NaT, pd.Timestamp("2012-05-01")]})
+
+        res = df.min()
+        exp = pd.Series([pd.Timestamp("2012-05-01")], index=["foo"])
+        tm.assert_series_equal(res, exp)
+
+        res = df.max()
+        exp = pd.Series([pd.Timestamp("2012-05-01")], index=["foo"])
+        tm.assert_series_equal(res, exp)
+
+        # GH12941, only NaTs are in DataFrame.
+        df = pd.DataFrame({"foo": [pd.NaT, pd.NaT]})
+
+        res = df.min()
+        exp = pd.Series([pd.NaT], index=["foo"])
+        tm.assert_series_equal(res, exp)
+
+        res = df.max()
+        exp = pd.Series([pd.NaT], index=["foo"])
+        tm.assert_series_equal(res, exp)
diff --git a/pandas/tests/frame/test_timeseries.py b/pandas/tests/frame/test_timeseries.py
index 452af895e..dea921a92 100644
--- a/pandas/tests/frame/test_timeseries.py
+++ b/pandas/tests/frame/test_timeseries.py
@@ -54,29 +54,6 @@ class TestDataFrameTimeSeriesMethods:
 
             assert (tmp["dates"].values == ex_vals).all()
 
-    def test_operation_on_NaT(self):
-        # Both NaT and Timestamp are in DataFrame.
-        df = pd.DataFrame({"foo": [pd.NaT, pd.NaT, pd.Timestamp("2012-05-01")]})
-
-        res = df.min()
-        exp = pd.Series([pd.Timestamp("2012-05-01")], index=["foo"])
-        tm.assert_series_equal(res, exp)
-
-        res = df.max()
-        exp = pd.Series([pd.Timestamp("2012-05-01")], index=["foo"])
-        tm.assert_series_equal(res, exp)
-
-        # GH12941, only NaTs are in DataFrame.
-        df = pd.DataFrame({"foo": [pd.NaT, pd.NaT]})
-
-        res = df.min()
-        exp = pd.Series([pd.NaT], index=["foo"])
-        tm.assert_series_equal(res, exp)
-
-        res = df.max()
-        exp = pd.Series([pd.NaT], index=["foo"])
-        tm.assert_series_equal(res, exp)
-
     def test_datetime_assignment_with_NaT_and_diff_time_units(self):
         # GH 7492
         data_ns = np.array([1, "nat"], dtype="datetime64[ns]")
diff --git a/pandas/tests/indexes/datetimes/test_indexing.py b/pandas/tests/indexes/datetimes/test_indexing.py
index 5882f5c77..58e2afc86 100644
--- a/pandas/tests/indexes/datetimes/test_indexing.py
+++ b/pandas/tests/indexes/datetimes/test_indexing.py
@@ -476,6 +476,13 @@ class TestGetLoc:
             index.get_loc("1/1/2000")
 
 
+class TestContains:
+    def test_index_dupes_contains(self):
+        d = datetime(2011, 12, 5, 20, 30)
+        ix = DatetimeIndex([d, d])
+        assert d in ix
+
+
 class TestDatetimeIndex:
     @pytest.mark.parametrize(
         "null", [None, np.nan, np.datetime64("NaT"), pd.NaT, pd.NA]
diff --git a/pandas/tests/series/indexing/test_datetime.py b/pandas/tests/series/indexing/test_datetime.py
index b5d04fd49..18c11f2b9 100644
--- a/pandas/tests/series/indexing/test_datetime.py
+++ b/pandas/tests/series/indexing/test_datetime.py
@@ -464,12 +464,6 @@ def test_index_unique(dups):
     assert idx.nunique(dropna=False) == 21
 
 
-def test_index_dupes_contains():
-    d = datetime(2011, 12, 5, 20, 30)
-    ix = DatetimeIndex([d, d])
-    assert d in ix
-
-
 def test_duplicate_dates_indexing(dups):
     ts = dups
 
@@ -705,15 +699,6 @@ def test_set_none_nan():
     assert series[6] is NaT
 
 
-def test_nat_operations():
-    # GH 8617
-    s = Series([0, pd.NaT], dtype="m8[ns]")
-    exp = s[0]
-    assert s.median() == exp
-    assert s.min() == exp
-    assert s.max() == exp
-
-
 def test_setitem_tuple_with_datetimetz():
     # GH 20441
     arr = date_range("2017", periods=4, tz="US/Eastern")
diff --git a/pandas/tests/series/test_reductions.py b/pandas/tests/series/test_reductions.py
new file mode 100644
index 000000000..be9330a14
--- /dev/null
+++ b/pandas/tests/series/test_reductions.py
@@ -0,0 +1,11 @@
+import pandas as pd
+from pandas import Series
+
+
+def test_reductions_td64_with_nat():
+    # GH#8617
+    ser = Series([0, pd.NaT], dtype="m8[ns]")
+    exp = ser[0]
+    assert ser.median() == exp
+    assert ser.min() == exp
+    assert ser.max() == exp
