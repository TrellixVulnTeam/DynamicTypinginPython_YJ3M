commit 8021575cb099ff2a10c4ce4dcf8103561dbbe980
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Jul 20 12:40:14 2011 -0400

    ENH: use _constructor properties to get factory function instead of type(self), for easier subclassing

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index c73f36117..75e9e5ef6 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -217,11 +217,11 @@ class DataFrame(NDFrame):
         -------
         casted : DataFrame
         """
-        return type(self)(self._data, dtype=dtype)
+        return self._constructor(self._data, dtype=dtype)
 
     def _wrap_array(self, arr, axes, copy=False):
         index, columns = axes
-        return type(self)(arr, index=index, columns=columns, copy=copy)
+        return self._constructor(arr, index=index, columns=columns, copy=copy)
 
     @property
     def axes(self):
@@ -229,7 +229,7 @@ class DataFrame(NDFrame):
 
     @property
     def _constructor(self):
-        return type(self)
+        return DataFrame
 
     #----------------------------------------------------------------------
     # Class behavior
@@ -277,7 +277,7 @@ class DataFrame(NDFrame):
         """
         Make a copy of this DataFrame
         """
-        return type(self)(self._data.copy())
+        return self._constructor(self._data.copy())
 
     #----------------------------------------------------------------------
     # Arithmetic methods
@@ -574,8 +574,8 @@ class DataFrame(NDFrame):
         Returns a DataFrame with the rows/columns switched. Copy of data is not
         made by default
         """
-        return type(self)(data=self.values.T, index=self.columns,
-                          columns=self.index, copy=False)
+        return self._constructor(data=self.values.T, index=self.columns,
+                                 columns=self.index, copy=False)
     T = property(transpose)
 
     #----------------------------------------------------------------------
@@ -651,8 +651,8 @@ class DataFrame(NDFrame):
         return self.values
 
     def __array_wrap__(self, result):
-        return type(self)(result, index=self.index, columns=self.columns,
-                          copy=False)
+        return self._constructor(result, index=self.index, columns=self.columns,
+                                 copy=False)
 
     #----------------------------------------------------------------------
     # getitem/setitem related
@@ -682,7 +682,7 @@ class DataFrame(NDFrame):
         """
         if isinstance(item, slice):
             new_data = self._data.get_slice(item, axis=1)
-            return type(self)(new_data)
+            return self._constructor(new_data)
         elif isinstance(item, np.ndarray):
             if len(item) != len(self.index):
                 raise ValueError('Item wrong length %d instead of %d!' %
@@ -846,11 +846,11 @@ class DataFrame(NDFrame):
         if new_index is self.index:
             return self.copy()
         new_data = self._data.reindex_axis(new_index, method, axis=1)
-        return type(self)(new_data)
+        return self._constructor(new_data)
 
     def _reindex_columns(self, new_columns):
         new_data = self._data.reindex_items(new_columns)
-        return type(self)(new_data)
+        return self._constructor(new_data)
 
     def reindex_like(self, other, method=None):
         """
@@ -1048,14 +1048,16 @@ class DataFrame(NDFrame):
             series = self._series
             for col, s in series.iteritems():
                 result[col] = s.fillna(method=method, value=value)
-            return type(self)(result, index=self.index, columns=self.columns)
+            return self._constructor(result, index=self.index,
+                                     columns=self.columns)
         else:
             # Float type values
             if len(self.columns) == 0:
                 return self
 
             new_data = self._data.fillna(value)
-            return type(self)(new_data, index=self.index, columns=self.columns)
+            return self._constructor(new_data, index=self.index,
+                                     columns=self.columns)
 
     #----------------------------------------------------------------------
     # Rename
@@ -1131,7 +1133,7 @@ class DataFrame(NDFrame):
         # some shortcuts
         if fill_value is None:
             if not self and not other:
-                return type(self)(index=new_index)
+                return self._constructor(index=new_index)
             elif not self:
                 return other * nan
             elif not other:
@@ -1164,8 +1166,8 @@ class DataFrame(NDFrame):
             other_vals[other_mask & mask] = fill_value
 
         result = func(this_vals, other_vals)
-        return type(self)(result, index=new_index, columns=new_columns,
-                          copy=False)
+        return self._constructor(result, index=new_index, columns=new_columns,
+                                 copy=False)
 
     def _indexed_same(self, other):
         same_index = self.index.equals(other.index)
@@ -1202,8 +1204,8 @@ class DataFrame(NDFrame):
         if fill_value is not None:
             raise NotImplementedError
 
-        return type(self)(func(values.T, other_vals).T, index=new_index,
-                          columns=self.columns, copy=False)
+        return self._constructor(func(values.T, other_vals).T, index=new_index,
+                                 columns=self.columns, copy=False)
 
     def _combine_match_columns(self, other, func, fill_value=None):
         newCols = self.columns.union(other.index)
@@ -1215,15 +1217,15 @@ class DataFrame(NDFrame):
         if fill_value is not None:
             raise NotImplementedError
 
-        return type(self)(func(this.values, other), index=self.index,
-                          columns=newCols, copy=False)
+        return self._constructor(func(this.values, other), index=self.index,
+                                 columns=newCols, copy=False)
 
     def _combine_const(self, other, func):
         if not self:
             return self
 
-        return type(self)(func(self.values, other), index=self.index,
-                          columns=self.columns, copy=False)
+        return self._constructor(func(self.values, other), index=self.index,
+                                 columns=self.columns, copy=False)
 
     def _compare_frame(self, other, func):
         if not self._indexed_same(other):
@@ -1488,7 +1490,7 @@ class DataFrame(NDFrame):
             new_data = self._data.copy()
             new_data.axes[1] = self.index.shift(periods, offset)
 
-        return type(self)(new_data)
+        return self._constructor(new_data)
 
     def _shift_indexer(self, periods):
         # small reusable utility
@@ -1535,8 +1537,8 @@ class DataFrame(NDFrame):
 
         if isinstance(func, np.ufunc):
             results = func(self.values)
-            return type(self)(data=results, index=self.index,
-                              columns=self.columns, copy=False)
+            return self._constructor(data=results, index=self.index,
+                                     columns=self.columns, copy=False)
         else:
             if not broadcast:
                 return self._apply_standard(func, axis)
@@ -1692,7 +1694,7 @@ class DataFrame(NDFrame):
             raise Exception('%s column not contained in this frame!' % on)
 
         new_data = self._data.join_on(other._data, self[on], axis=1)
-        return type(self)(new_data)
+        return self._constructor(new_data)
 
     def _join_index(self, other, how):
         join_index = self._get_join_index(other, how)
@@ -1702,7 +1704,7 @@ class DataFrame(NDFrame):
         # merge blocks
         merged_data = this_data.merge(other_data)
         assert(merged_data.axes[1] is join_index) # maybe unnecessary
-        return type(self)(merged_data)
+        return self._constructor(merged_data)
 
     def _get_join_index(self, other, how):
         if how == 'left':
@@ -1797,7 +1799,7 @@ class DataFrame(NDFrame):
                         correl[i, j] = c
                         correl[j, i] = c
 
-        return type(self)(correl, index=cols, columns=cols)
+        return self._constructor(correl, index=cols, columns=cols)
 
     def corrwith(self, other, axis=0, drop=False):
         """
@@ -1867,7 +1869,7 @@ class DataFrame(NDFrame):
                 tmp.quantile(.1), tmp.median(),
                 tmp.quantile(.9), tmp.max()]
 
-        return type(self)(data, index=cols_destat, columns=cols)
+        return self._constructor(data, index=cols_destat, columns=cols)
 
     #----------------------------------------------------------------------
     # ndarray-like stats methods
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 571458e9f..539cc6475 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -54,6 +54,10 @@ class NDFrame(Picklable):
     def __init__(self, data, axes=None, copy=False):
         self._data = data
 
+    @property
+    def _constructor(self):
+        return NDFrame
+
     @property
     def axes(self):
         return self._data.axes
@@ -89,7 +93,7 @@ class NDFrame(Picklable):
         cons_data = self._data.consolidate()
         if cons_data is self._data:
             cons_data = cons_data.copy()
-        return type(self)(cons_data)
+        return self._constructor(cons_data)
 
     @property
     def _is_mixed_type(self):
@@ -174,7 +178,7 @@ class NDFrame(Picklable):
         else:
             new_data = self._data.reindex_axis(new_index, axis=axis,
                                                method=fill_method)
-        return type(self)(new_data)
+        return self._constructor(new_data)
 
     def truncate(self, before=None, after=None):
         """Function truncate a sorted DataFrame / Series before and/or after
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 2be341c85..17a10019a 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -246,10 +246,14 @@ class WidePanel(Panel, NDFrame):
 
         return index, columns
 
+    @property
+    def _constructor(self):
+        return WidePanel
+
     def _wrap_array(self, arr, axes, copy=False):
         items, major, minor = axes
-        return type(self)(arr, items=items, major_axis=major,
-                          minor_axis=minor, copy=copy)
+        return self._constructor(arr, items=items, major_axis=major,
+                                 minor_axis=minor, copy=copy)
 
     def copy(self):
         """
