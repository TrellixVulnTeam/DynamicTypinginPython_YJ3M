commit 6e793a1bc20413980f9a7adce8f53629013344fe
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Jun 4 17:22:30 2010 +0000

    expanding docs toward 0.3 release
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@187 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/doc/source/conf.py b/doc/source/conf.py
index ffb51ef97..389a1b36d 100644
--- a/doc/source/conf.py
+++ b/doc/source/conf.py
@@ -21,7 +21,9 @@ sys.path.insert(0, os.path.abspath('../sphinxext'))
 sys.path.extend([
 
     # numpy standard doc extensions
-    os.path.join(os.path.dirname(__file__), '..', 'sphinxext')
+    os.path.join(os.path.dirname(__file__),
+                 '..', '../..',
+                 'sphinxext')
 
 ])
 
@@ -62,8 +64,7 @@ copyright = u'2008-2010, AQR Capital Management, LLC'
 #
 # The short X.Y version.
 import pandas
-# version = pandas.__version__
-version = 0.2
+version = pandas.__version__
 
 # The full version, including alpha/beta/rc tags.
 release = version
diff --git a/doc/source/dataframe.rst b/doc/source/dataframe.rst
index 4b9a6e270..5a60d686d 100644
--- a/doc/source/dataframe.rst
+++ b/doc/source/dataframe.rst
@@ -233,11 +233,11 @@ Retrieving cross sections, transposing
 It is often desirable to retrieve all data associated with a
 particular index values (we have been calling this a *cross
 section*). Rather than use *__getitem__* and extra notation to do
-this, DataFrame has the **getXS** method:
+this, DataFrame has the **xs** method:
 
 ::
 
-    >>> df.getXS(datetime(2009, 8, 31))
+    >>> df.xs(datetime(2009, 8, 31))
     A    0.060396849998
     D    nan
     N    7
@@ -419,7 +419,7 @@ index.
 
 ::
 
-    >>> df - df.getXS(df.index[5])
+    >>> df - df.xs(df.index[5])
 			   A              B              C
     2009-01-30 00:00:00    -1.1677        -0.179934      2.90215
     2009-02-27 00:00:00    -2.69939       -1.1941        0.902293
@@ -822,7 +822,6 @@ TODO
    DataFrame.values
    DataFrame.copy
    DataFrame.pivot
-   DataFrame.getXS
    DataFrame.T
    DataFrame.apply
    DataFrame.tapply
diff --git a/doc/source/examples.rst b/doc/source/examples.rst
index 2aede8361..5378ed725 100644
--- a/doc/source/examples.rst
+++ b/doc/source/examples.rst
@@ -1,9 +1,10 @@
+.. currentmodule:: pandas
+
 .. _examples:
 
 ********************
 Example applications
 ********************
 
-.. currentmodule:: pandas
-
-
+Financial data
+--------------
\ No newline at end of file
diff --git a/doc/source/index.rst b/doc/source/index.rst
index b5964780d..8ffd11716 100755
--- a/doc/source/index.rst
+++ b/doc/source/index.rst
@@ -37,17 +37,7 @@ such as :mod:`scikits.statsmodels`.
    haven't used NumPy much or at all, please check out the `NumPy
    documentation <http://docs.scipy.org>`__ first.
 
-Who is pandas for?
-------------------
-
- * Users of R or MATLAB who wish to switch to Python for interactive
-   data analysis and implementation of statistical models
-
- * NumPy users who are looking for richer data structures for working
-   with time series and cross-sectional data.
-
- * System developers who wish to have a robust and well-tested library
-   for building production applications involving such data sets.
+See the package overview for more detail about what's in the library.
 
 User manual
 -----------
@@ -73,6 +63,7 @@ User manual
     datetools
     stats
     r_interface
+    io
     examples
     missing_data
     related
diff --git a/doc/source/io.rst b/doc/source/io.rst
new file mode 100644
index 000000000..903e4061c
--- /dev/null
+++ b/doc/source/io.rst
@@ -0,0 +1,14 @@
+.. _io:
+
+********************
+Input / Output Tools
+********************
+
+HDF5 (PyTables)
+---------------
+
+Text files
+----------
+
+.. currentmodule:: pandas
+
diff --git a/doc/source/moments.rst b/doc/source/moments.rst
new file mode 100644
index 000000000..92318e236
--- /dev/null
+++ b/doc/source/moments.rst
@@ -0,0 +1,98 @@
+.. currentmodule:: pandas.stats.api
+
+.. _moments:
+
+Moving statistical statistics / moments
+---------------------------------------
+
+For TimeSeries-oriented operations, a number of functions are provided
+for computing common *moving* or *rolling* statistics. Among these are
+count, sum, mean, median, correlation, variance, covariance, standard
+deviation, skewness, and kurtosis. All of these methods are in the
+:mod:`pandas` namespace, but otherwise they can be found in
+:mod:`pandas.stats.moments`.
+
+Each of these methods observes the same interface (with relevant
+methods accepting two Series arguments instead of one):
+
+::
+
+    >>> ts
+    2000-01-31 00:00:00    -0.550139282247
+    2000-02-01 00:00:00    0.0950636484432
+    2000-02-02 00:00:00    0.0621763420914
+    2000-02-03 00:00:00    0.125698607137
+    2000-02-04 00:00:00    0.222288320816
+    2000-02-07 00:00:00    0.903314747152
+    2000-02-08 00:00:00    -0.391449402196
+    2000-02-09 00:00:00    -0.726137553115
+    2000-02-10 00:00:00    -0.89302167539
+    2000-02-11 00:00:00    0.228509179513
+
+    >>> rolling_sum(ts, 5, min_periods=3)
+    2000-01-31 00:00:00    NaN
+    2000-02-01 00:00:00    NaN
+    2000-02-02 00:00:00    -0.0913037710365
+    2000-02-03 00:00:00    0.798752592168
+    2000-02-04 00:00:00    1.39432346651
+    2000-02-07 00:00:00    2.44074916551
+    2000-02-08 00:00:00    2.77458564938
+    2000-02-09 00:00:00    1.87181399193
+    2000-02-10 00:00:00    2.48549563273
+    2000-02-11 00:00:00    1.81285272663
+
+If passed a DataFrame or DataMatrix argument, the statistics will be
+applied independently to the columns:
+
+::
+
+    >>> df
+			   A              B              C              D
+    2000-01-31 00:00:00    NaN            NaN            0.03752        -0.3952
+    2000-02-01 00:00:00    NaN            NaN            -1.511         -0.1126
+    2000-02-02 00:00:00    1.136          NaN            0.777          -0.3502
+    2000-02-03 00:00:00    0.8901         NaN            1.196          0.7456
+    2000-02-04 00:00:00    0.5956         0.7684         0.9042         0.4984
+    2000-02-07 00:00:00    -0.3502        1.015          0.5366         0.6628
+    2000-02-08 00:00:00    0.5036         1.825          0.8682         -1.69
+    2000-02-09 00:00:00    0.2327         -0.3899        0.4493         -0.1267
+    2000-02-10 00:00:00    1.504          0.3904         -0.06148       1.717
+    2000-02-11 00:00:00    -0.07707       0.2286         -1.039         0.1438
+
+    >>> rolling_mean(df, 5, min_periods=3)
+			   A              B              C              D
+    2000-01-31 00:00:00    NaN            NaN            NaN            NaN
+    2000-02-01 00:00:00    NaN            NaN            NaN            NaN
+    2000-02-02 00:00:00    NaN            NaN            -0.2321        -0.286
+    2000-02-03 00:00:00    NaN            NaN            0.125          -0.02811
+    2000-02-04 00:00:00    0.8737         NaN            0.2809         0.07718
+    2000-02-07 00:00:00    0.5677         NaN            0.3807         0.2888
+    2000-02-08 00:00:00    0.5549         1.203          0.8565         -0.0267
+    2000-02-09 00:00:00    0.3744         0.8047         0.7909         0.018
+    2000-02-10 00:00:00    0.4971         0.7219         0.5394         0.2123
+    2000-02-11 00:00:00    0.3626         0.6139         0.1507         0.1414
+
+Each of these methods can optionally accept a **time_rule** argument
+(see :ref:`time rules <datetools.timerules>`) which is provided as a
+convenience when the user wishes to guarantee that the window of the
+statistic
+
+Method summary
+~~~~~~~~~~~~~~
+
+.. autosummary::
+   :toctree: generated/
+
+   rolling_count
+   rolling_sum
+   rolling_mean
+   rolling_median
+   rolling_var
+   rolling_std
+   rolling_corr
+   rolling_cov
+   rolling_skew
+   rolling_kurt
+
+Exponentially weighted moving average
+-------------------------------------
diff --git a/doc/source/ols.rst b/doc/source/ols.rst
new file mode 100644
index 000000000..37c61cfd3
--- /dev/null
+++ b/doc/source/ols.rst
@@ -0,0 +1,6 @@
+.. currentmodule:: pandas
+
+.. _ols:
+
+Linear and panel regression
+---------------------------
\ No newline at end of file
diff --git a/doc/source/overview.rst b/doc/source/overview.rst
index 2c5798c73..9392dadb5 100644
--- a/doc/source/overview.rst
+++ b/doc/source/overview.rst
@@ -6,18 +6,29 @@
 Package overview
 ****************
 
-:mod:`pandas` is a library providing a set of convenient and powerful
-data structures for working with labeled statistical (financial,
-economic, econometric) data sets. We will refer to this data as *time
-series* and *cross-sectional* (or *longitudinal*) which are common
-terms in statistics and econometrics. It has multiple target audiences:
+:mod:`pandas` is a library providing, among other things, a set of
+convenient and powerful data structures for working with labeled
+statistical (financial, economic, econometric) data sets. We will
+refer to this data as *time series* and *cross-sectional* (or
+*longitudinal*) which are common terms in statistics and
+econometrics. pdnas has multiple target audiences:
 
-  * Non-developers who wish to be able to easily manipulate data sets
-in an interactive research environment.
+ * Users of R or MATLAB who wish to switch to Python for interactive
+   data analysis and implementation of statistical models
+
+ * NumPy users who are looking for richer data structures for working
+   with time series and cross-sectional data.
+
+ * System developers who wish to have a robust and well-tested library
+   for building production applications involving such data sets.
 
 History
 -------
 
+pandas development began at AQR Capital Management (a quantitative
+hedge fund) in April 2008. It was open-sourced at the end of 2009 and
+continues to be actively used and maintained.
+
 Data structures at a glance
 ---------------------------
 
@@ -35,7 +46,47 @@ Data structures at a glance
 Why more than 1 data structure?
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
+The best way to think about the pandas data tructures is as flexible
+containers for lower dimensional data. For example, DataFrame /
+DataMatrix are containers for Series, and WidePanel is a container for
+DataFrame / DataMatrix objects. We would like to be able to insert and
+remove objects from these containers in a dictionary-like fashion.
+
+Also, we would like sensible default behaviors for the common API
+functions which take into account the typical orientation of time
+series and cross-sectional data sets. When using ndarrays to store 2-
+and 3-dimensional data, a burden is placed on the user to consider the
+orientation of the data set when writing functions; axes are
+considered more or less equivalent (except when C- or
+Fortran-contiguousness matters for performance). In pandas, the axes
+are intended to lend more semantic meaning to the data; i.e., for a
+particular data set there is likely to be a "right" way to orient the
+data. The goal, then, is to reduce the amount of thought required to
+code up data transformations in downstream functions.
+
+Lest we be too hand-wavy, here are some common use cases to
+illustrate:
+
+ (A) :ref:`DataFrame <dataframe>` containing multiple related time series
+
+  * **columns**: "data type" associated with each time series
+  * **index**:  dates shared by time series
+
+ (B) :ref:`DataFrame <dataframe>` containing multiple cross-sections
 
+  * **columns**: "data type" associated with each cross-section
+  * **index**:  individual / entity common to cross-sections
+
+ (C) :ref:`WidePanel <panel>` containing panel data
+
+  * **items**: "data type" associated with each collection of time series
+  * **major_axis**: dates shared by time series
+  * **minor_axis**: individual / entity labels common to time series
+
+Lastly, particularly if you don't buy the above explanation, having a
+specialized vocabulary to refer to types of data sets often serves as
+a benefit when discussing a dataset with other users (or reading their
+code).
 
 A quick note on mutation
 ~~~~~~~~~~~~~~~~~~~~~~~~
@@ -45,6 +96,11 @@ data structure like DataFrame. In general, the result of method calls
 will return a new object (protecting the underlying data in the
 calling object). So we like to "favor immutability" where sensible.
 
+What else is in the package?
+----------------------------
+
+
+
 Installation
 ------------
 
@@ -68,9 +124,10 @@ Optional dependencies
 ~~~~~~~~~~~~~~~~~~~~~
 
   * `SciPy <http://www.scipy.org>`__: miscellaneous statistical functions
+  * `PyTables <<http://www.pytables.org>>`__: necessary for HDF5-based storage
   * `matplotlib <http://matplotlib.sourceforge.net/>`__: for plotting
   * `scikits.statsmodels <http://statsmodels.sourceforge.net/>`__
-     * Needed for many parts of :mod:`pandas.stats`
+     * Needed for parts of :mod:`pandas.stats`
 
 .. note::
 
@@ -93,9 +150,10 @@ checked out using SVN and compiled / installed like so:
 
 On Windows, you will need to download and install `gcc / MinGW
 <http://www.mingw.org/wiki/HOWTO_Install_the_MinGW_GCC_Compiler_Suite>`__.
-After adding it to your system path , you can install pandas by typing
+After adding it to your system path, you can install pandas by typing
 instead:
 
 ::
 
-  python setup.py install --compiler=mingw32
+  python setup.py build --compiler=mingw32
+  python setup.py install
diff --git a/doc/source/panel.rst b/doc/source/panel.rst
index c484bfe14..b27db6233 100644
--- a/doc/source/panel.rst
+++ b/doc/source/panel.rst
@@ -1,2 +1,6 @@
+
+.. _panel:
+
+*********************
 WidePanel / LongPanel
-=====================
+*********************
diff --git a/doc/source/r_interface.rst b/doc/source/r_interface.rst
index 2112ec46b..16c5e5514 100644
--- a/doc/source/r_interface.rst
+++ b/doc/source/r_interface.rst
@@ -1,8 +1,41 @@
-.. currentmodule:: pandas.io.rpy
+.. currentmodule:: pandas.rpy
 
 .. _rpy:
 
-***************************
-pandas interface to rpy / R
-***************************
+******************
+rpy2 / R interface
+******************
 
+If your computer has R and rpy2 (> 2.2) installed (which will be left
+to the reader), you will be able to leverage the below
+functionality. On Windows, doing this is quite an ordeal at the
+moment, but users on Unix-like systems should find it quite easy. As a
+general rule, I would recommend using the latest revision of rpy2 from
+bitbucket:
+
+::
+    hg clone ... # if installing for the first time
+
+    hg pull
+    hg update
+    sudo python setup.py install
+
+.. note::
+
+    To use R packages with this interface, you will need to install
+    them inside R yourself. At the moment it cannot install them for
+    you.
+
+Once you have done installed R and rpy2, you should be able to
+import :mod:`pandas.rpy` without a hitch.
+
+Calling R functions with pandas objects
+---------------------------------------
+
+
+
+Transferring R data sets into Python
+------------------------------------
+
+High-level interface to R estimators
+------------------------------------
\ No newline at end of file
diff --git a/doc/source/related.rst b/doc/source/related.rst
index 8a066cefe..dade0d610 100644
--- a/doc/source/related.rst
+++ b/doc/source/related.rst
@@ -2,6 +2,9 @@
 Related Python libraries
 ************************
 
+la (larry)
+----------
+
 scikits.statsmodels
 -------------------
 
diff --git a/doc/source/series.rst b/doc/source/series.rst
index e52b502ad..0aff4ab8f 100644
--- a/doc/source/series.rst
+++ b/doc/source/series.rst
@@ -195,6 +195,14 @@ Of course, the same behavior applies to *setting* values:
 
 .. _series.arithmetic:
 
+Accessing underlying data
+-------------------------
+
+The data stored in a Series can be accessed via the **values**
+attribute (which is a property returning a view of the Series as an
+ndarray). The higher dimensional pandas data structures observe the
+same interface for accessing the underlying data.
+
 Arithmetic, data alignment
 --------------------------
 
@@ -483,7 +491,6 @@ Otherwise, methods providing dict-like iteration are available:
 .. autosummary::
    :toctree: generated/
 
-   Series.keys
    Series.values
    Series.iteritems
 
diff --git a/doc/source/stats.rst b/doc/source/stats.rst
index 931b1da23..8f916365e 100755
--- a/doc/source/stats.rst
+++ b/doc/source/stats.rst
@@ -2,126 +2,14 @@
 
 .. _stats:
 
-*************************
-Statistical functionality
-*************************
+**********************************
+Built-in statistical functionality
+**********************************
 
-Moving statistical statistics / moments
----------------------------------------
+.. currentmodule:: pandas
 
-For TimeSeries-oriented operations, a number of functions are provided
-for computing common *moving* or *rolling* statistics. Among these are
-count, sum, mean, median, correlation, variance, covariance, standard
-deviation, skewness, and kurtosis. All of these methods are in the
-:mod:`pandas` namespace, but otherwise they can be found in
-:mod:`pandas.stats.moments`.
-
-Each of these methods observes the same interface (with relevant
-methods accepting two Series arguments instead of one):
-
-::
-
-    >>> ts
-    2000-01-31 00:00:00    -0.550139282247
-    2000-02-01 00:00:00    0.0950636484432
-    2000-02-02 00:00:00    0.0621763420914
-    2000-02-03 00:00:00    0.125698607137
-    2000-02-04 00:00:00    0.222288320816
-    2000-02-07 00:00:00    0.903314747152
-    2000-02-08 00:00:00    -0.391449402196
-    2000-02-09 00:00:00    -0.726137553115
-    2000-02-10 00:00:00    -0.89302167539
-    2000-02-11 00:00:00    0.228509179513
-
-    >>> rolling_sum(ts, 5, min_periods=3)
-    2000-01-31 00:00:00    NaN
-    2000-02-01 00:00:00    NaN
-    2000-02-02 00:00:00    -0.0913037710365
-    2000-02-03 00:00:00    0.798752592168
-    2000-02-04 00:00:00    1.39432346651
-    2000-02-07 00:00:00    2.44074916551
-    2000-02-08 00:00:00    2.77458564938
-    2000-02-09 00:00:00    1.87181399193
-    2000-02-10 00:00:00    2.48549563273
-    2000-02-11 00:00:00    1.81285272663
-
-If passed a DataFrame or DataMatrix argument, the statistics will be
-applied independently to the columns:
-
-::
-
-    >>> df
-			   A              B              C              D
-    2000-01-31 00:00:00    NaN            NaN            0.03752        -0.3952
-    2000-02-01 00:00:00    NaN            NaN            -1.511         -0.1126
-    2000-02-02 00:00:00    1.136          NaN            0.777          -0.3502
-    2000-02-03 00:00:00    0.8901         NaN            1.196          0.7456
-    2000-02-04 00:00:00    0.5956         0.7684         0.9042         0.4984
-    2000-02-07 00:00:00    -0.3502        1.015          0.5366         0.6628
-    2000-02-08 00:00:00    0.5036         1.825          0.8682         -1.69
-    2000-02-09 00:00:00    0.2327         -0.3899        0.4493         -0.1267
-    2000-02-10 00:00:00    1.504          0.3904         -0.06148       1.717
-    2000-02-11 00:00:00    -0.07707       0.2286         -1.039         0.1438
-
-    >>> rolling_mean(df, 5, min_periods=3)
-			   A              B              C              D
-    2000-01-31 00:00:00    NaN            NaN            NaN            NaN
-    2000-02-01 00:00:00    NaN            NaN            NaN            NaN
-    2000-02-02 00:00:00    NaN            NaN            -0.2321        -0.286
-    2000-02-03 00:00:00    NaN            NaN            0.125          -0.02811
-    2000-02-04 00:00:00    0.8737         NaN            0.2809         0.07718
-    2000-02-07 00:00:00    0.5677         NaN            0.3807         0.2888
-    2000-02-08 00:00:00    0.5549         1.203          0.8565         -0.0267
-    2000-02-09 00:00:00    0.3744         0.8047         0.7909         0.018
-    2000-02-10 00:00:00    0.4971         0.7219         0.5394         0.2123
-    2000-02-11 00:00:00    0.3626         0.6139         0.1507         0.1414
-
-Each of these methods can optionally accept a **time_rule** argument
-(see :ref:`time rules <datetools.timerules>`) which is provided as a
-convenience when the user wishes to guarantee that the window of the
-statistic
-
-.. autosummary::
-   :toctree: generated/
-
-   rolling_count
-   rolling_sum
-   rolling_mean
-   rolling_median
-   rolling_var
-   rolling_std
-   rolling_corr
-   rolling_cov
-   rolling_skew
-   rolling_kurt
-
-Exponentially weighted moving average
--------------------------------------
-
-Linear and panel regression
----------------------------
-
-.. autosummary::
-   :toctree: generated/
+.. toctree::
+   :maxdepth: 2
 
+   moments
    ols
-
-.. Class reference
-.. ---------------
-
-.. .. currentmodule:: pandas.stats.ols
-
-.. .. autosummary::
-..    :toctree: generated/
-
-..    OLS
-..    MovingOLS
-
-.. .. currentmodule:: pandas.stats.plm
-
-.. .. autosummary::
-..    :toctree: generated/
-
-..    PanelOLS
-..    MovingPanelOLS
-
