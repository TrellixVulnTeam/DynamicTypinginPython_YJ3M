commit 7b93f72cfb59f57ddc3c2bd94887624058b8fba9
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Nov 24 20:52:12 2011 -0500

    BUG: don't invoke function twice in DataFrame.apply

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 1ad42b3ae..a74a7ec59 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2267,7 +2267,7 @@ class DataFrame(NDFrame):
             dummy = Series(np.nan, index=self._get_axis(axis),
                            dtype=values.dtype)
             result = lib.reduce(values, func, axis=axis, dummy=dummy)
-            return Series(result, index=agg_axis)
+            return Series(result, index=self._get_agg_axis(axis))
         except Exception:
             pass
 
diff --git a/pandas/src/reduce.pyx b/pandas/src/reduce.pyx
index 765a73476..61b48b97c 100644
--- a/pandas/src/reduce.pyx
+++ b/pandas/src/reduce.pyx
@@ -50,29 +50,28 @@ cdef class Reducer:
             ndarray arr, result, chunk
             Py_ssize_t i
             flatiter it
+            object res
 
         arr = self.arr
         chunk = self.dummy
-
-        test = self.f(chunk)
-        try:
-            assert(not isinstance(test, np.ndarray))
-            if hasattr(test, 'dtype'):
-                result = np.empty(self.nresults, dtype=test.dtype)
-            else:
-                result = np.empty(self.nresults, dtype='O')
-            result[0] = test
-        except Exception:
-            raise ValueError('function does not reduce')
-
         it = <flatiter> PyArray_IterNew(result)
 
         dummy_buf = chunk.data
         chunk.data = arr.data
         try:
-            for i in range(self.nresults):
-                PyArray_SETITEM(result, PyArray_ITER_DATA(it),
-                                self.f(self.dummy))
+            for i in range(1, self.nresults):
+                res = self.f(self.dummy)
+                if i == 0:
+                    try:
+                        assert(not isinstance(res, np.ndarray))
+                        if hasattr(res, 'dtype'):
+                            result = np.empty(self.nresults, dtype=res.dtype)
+                        else:
+                            result = np.empty(self.nresults, dtype='O')
+                    except Exception:
+                        raise ValueError('function does not reduce')
+
+                PyArray_SETITEM(result, PyArray_ITER_DATA(it), res)
                 chunk.data = chunk.data + self.increment
                 PyArray_ITER_NEXT(it)
         finally:
diff --git a/pandas/tools/pivot.py b/pandas/tools/pivot.py
index 0860c1f51..73cca5dda 100644
--- a/pandas/tools/pivot.py
+++ b/pandas/tools/pivot.py
@@ -79,6 +79,8 @@ def pivot_table(data, values=None, rows=None, cols=None, aggfunc=np.mean,
 
     return table
 
+DataFrame.pivot_table = pivot_table
+
 def _convert_by(by):
     if by is None:
         by = []
@@ -88,8 +90,6 @@ def _convert_by(by):
         by = list(by)
     return by
 
-def pprint_table(table):
-    pass
 
 if __name__ == '__main__':
     def _sample(values, n):
diff --git a/pandas/tools/tests/test_pivot.py b/pandas/tools/tests/test_pivot.py
index 50ffd3f0c..c509cf33a 100644
--- a/pandas/tools/tests/test_pivot.py
+++ b/pandas/tools/tests/test_pivot.py
@@ -27,6 +27,9 @@ class TestPivotTable(unittest.TestCase):
         cols=  'C'
         table = pivot_table(self.data, values='D', rows=rows, cols=cols)
 
+        # this works
+        pivot_table(self.data, values='D', rows=rows)
+
         if len(rows) > 1:
             self.assertEqual(table.index.names, rows)
         else:
@@ -49,9 +52,9 @@ class TestPivotTable(unittest.TestCase):
 
     def test_pivot_multi_values(self):
         result = pivot_table(self.data, values=['D', 'E'],
-                             rows='A', cols=['B', 'C'])
+                             rows='A', cols=['B', 'C'], fill_value=0)
         expected = pivot_table(self.data.drop(['F'], axis=1),
-                               rows='A', cols=['B', 'C'])
+                               rows='A', cols=['B', 'C'], fill_value=0)
         assert_frame_equal(result, expected)
 
 if __name__ == '__main__':
