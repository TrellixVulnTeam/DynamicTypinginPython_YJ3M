commit d859b0405c456177b216070bad4bc9f4e43f50e2
Author: Jeff Reback <jeff@reback.net>
Date:   Sat Sep 5 14:07:24 2015 -0400

    add .astype('datetime64[ns, tz]') ability

diff --git a/doc/source/timeseries.rst b/doc/source/timeseries.rst
index c77715182..7e96fdad2 100644
--- a/doc/source/timeseries.rst
+++ b/doc/source/timeseries.rst
@@ -1774,6 +1774,17 @@ TZ aware Dtypes
 Both of these ``Series`` can be manipulated via the ``.dt`` accessor, see :ref:`here <basics.dt_accessors>`.
 See the :ref:`docs <timeseries.dtypes>` for more details.
 
+Further more you can ``.astype(...)`` timezone aware (and naive).
+
+.. ipython:: python
+
+   # make this naive
+   s_aware.astype('datetime64[ns]')
+
+   # convert
+   s_aware.astype('datetime64[ns, CET]')
+   s_naive.astype('datetime64[ns, CET]')
+
 .. note::
 
    Using the ``.values`` accessor on a ``Series``, returns an numpy array of the data.
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 58ee36142..94eccad8e 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -18,6 +18,7 @@ from pandas.core.common import (_possibly_downcast_to_dtype, isnull,
                                 array_equivalent, _maybe_convert_string_to_object,
                                 is_categorical, needs_i8_conversion, is_datetimelike_v_numeric,
                                 is_internal_type)
+from pandas.core.dtypes import DatetimeTZDtype
 
 from pandas.core.index import Index, MultiIndex, _ensure_index
 from pandas.core.indexing import maybe_convert_indices, length_of_indexer
@@ -1868,6 +1869,26 @@ class DatetimeBlock(Block):
                                             fastpath=True, placement=placement,
                                             **kwargs)
 
+    def _astype(self, dtype, **kwargs):
+        """
+        these automatically copy, so copy=True has no effect
+        raise on an except if raise == True
+        """
+
+        # if we are passed a datetime64[ns, tz]
+        if com.is_datetime64tz_dtype(dtype):
+            dtype = DatetimeTZDtype(dtype)
+
+            values = self.values
+            if getattr(values,'tz',None) is None:
+                values = DatetimeIndex(values).tz_localize('UTC')
+            values = values.tz_convert(dtype.tz)
+            return self.make_block(values)
+
+        # delegate
+        return super(DatetimeBlock, self)._astype(dtype=dtype, **kwargs)
+
+
     def _can_hold_element(self, element):
         if is_list_like(element):
             element = np.array(element)
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 8da821a1f..0794ae500 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -1072,6 +1072,20 @@ class TestSeries(tm.TestCase, CheckNameIntegration):
         expected = Series(DatetimeIndex(s._values).asobject)
         assert_series_equal(result, expected)
 
+        result = Series(s.values).dt.tz_localize('UTC').dt.tz_convert(s.dt.tz)
+        assert_series_equal(result, s)
+
+        # astype - datetime64[ns, tz]
+        result = Series(s.values).astype('datetime64[ns, US/Eastern]')
+        assert_series_equal(result, s)
+
+        result = Series(s.values).astype(s.dtype)
+        assert_series_equal(result, s)
+
+        result = s.astype('datetime64[ns, CET]')
+        expected = Series(date_range('20130101 06:00:00',periods=3,tz='CET'))
+        assert_series_equal(result, expected)
+
         # short str
         self.assertTrue('datetime64[ns, US/Eastern]' in str(s))
 
