commit a0ec11d38b076be5931b7653fb10c0e35bf359c1
Author: Adam Klein <adamklein@gmail.com>
Date:   Thu Jan 5 11:11:42 2012 -0500

    fixed alignment and printing issues

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 2e6e7e233..174921e08 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -361,7 +361,7 @@ def _try_sort(iterable):
         return listed
 
 def set_printoptions(precision=None, column_space=None, max_rows=None, 
-                     max_columns=None, justify='right'):
+                     max_columns=None):
     """
     Alter default behavior of DataFrame.toString
 
@@ -376,11 +376,8 @@ def set_printoptions(precision=None, column_space=None, max_rows=None,
         Either one, or both can be set to 0 (experimental). Pandas will figure
         out how big the terminal is and will not display more rows or/and
         columns that can fit on it.
-    justify : string
-        'right' or 'left' to justify the values of the dataframe using this
-        alignment
     """
-    global _float_format, _column_space, _max_rows, _max_columns, _justify
+    global _float_format, _column_space, _max_rows, _max_columns
     if precision is not None:
         float_format = '%.' + '%d' % precision + 'g'
         _float_format = lambda x: float_format % x
@@ -390,8 +387,6 @@ def set_printoptions(precision=None, column_space=None, max_rows=None,
         _max_rows = max_rows
     if max_columns is not None:
         _max_columns = max_columns
-    if justify is not None and justify in ('right', 'left'):
-        _justify = justify
 
 class EngFormatter(object):
     """
@@ -500,7 +495,6 @@ _float_format = lambda x: '% .4f' % x
 _column_space = 12
 _max_rows = 500
 _max_columns = 0
-_justify = 'right'
 
 def _stringify(col):
     # unicode workaround
@@ -513,10 +507,7 @@ def _format(s, space=None, na_rep=None, float_format=None):
     def _just_help(x):
         if space is None:
             return x
-        if _justify == 'right':
-            return x[:space].rjust(space)
-        else:
-            return x[:space].ljust(space)
+        return x[:space].ljust(space)
 
     if isinstance(s, float):
         if na_rep is not None and isnull(s):
@@ -530,6 +521,8 @@ def _format(s, space=None, na_rep=None, float_format=None):
             formatted = _float_format(s)
 
         return _just_help(formatted)
+    elif isinstance(s, int):
+        return _just_help('% d' % s)
     else:
         return _just_help('%s' % _stringify(s))
 
@@ -549,22 +542,14 @@ def adjoin(space, *lists):
     """
     outLines = []
     newLists = []
+    lengths = [max(map(len, x)) + space for x in lists[:-1]]
 
-    if _justify == 'right':
-        # everyone but the first one, add space (right-aligned)
-        lengths = [max(map(len, x)) + space for x in lists[1:]]
-        lengths.insert(0, max(map(len, lists[0])))
-    else:
-        # everyone but the last one, add space (left-aligned)
-        lengths = [max(map(len, x)) + space for x in lists[:-1]]
-        lengths.append(max(map(len, lists[-1])))
+    # not the last one
+    lengths.append(max(map(len, lists[-1])))
 
     maxLen = max(map(len, lists))
     for i, lst in enumerate(lists):
-        if _justify == 'right':
-            nl = [x.rjust(lengths[i]) for x in lst]
-        else:
-            nl = [x.ljust(lengths[i]) for x in lst]
+        nl = [x.ljust(lengths[i]) for x in lst]
         nl.extend([' ' * lengths[i]] * (maxLen - len(lst)))
         newLists.append(nl)
     toJoin = zip(*newLists)
@@ -684,9 +669,6 @@ def is_integer_dtype(arr):
 def is_float_dtype(arr):
     return issubclass(arr.dtype.type, np.floating)
 
-def is_numeric_dtype(arr):
-    return is_integer_dtype(arr) or is_float_dtype(arr)
-
 def save(obj, path):
     """
     Pickle (serialize) object to input file path
diff --git a/pandas/core/format.py b/pandas/core/format.py
index bf058c91b..29f5ce5a1 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -1,7 +1,9 @@
 from StringIO import StringIO
-from pandas.core.common import adjoin, is_numeric_dtype
+from pandas.core.common import adjoin
 from pandas.core.index import MultiIndex, _ensure_index
 
+import numpy as np
+
 docstring_to_string = """
     Parameters
     ----------
@@ -86,6 +88,7 @@ class DataFrameFormatter(object):
             else:
                 stringified = [format_col(c) for c in self.columns]
 
+
             if self.index:
                 to_write.append(adjoin(1, str_index, *stringified))
             else:
@@ -213,20 +216,31 @@ class DataFrameFormatter(object):
         if formatters is None:
             formatters = {}
 
+        def is_numeric_dtype(dtype):
+            return (issubclass(dtype.type, np.integer) or
+                    issubclass(dtype.type, np.floating))
+
         if isinstance(self.columns, MultiIndex):
             fmt_columns = self.columns.format(sparsify=False, adjoin=False)
-            str_columns = zip(*[[' %s' % y if y not in formatters and is_numeric_dtype(self.frame[x])
-                                else str(y)
-                                for y in x]
-                                for x in zip(*fmt_columns)])
+            fmt_columns = zip(*fmt_columns)
+            dtypes = self.frame.dtypes.values
+            need_leadsp = dict(zip(fmt_columns, map(is_numeric_dtype, dtypes)))
+            str_columns = zip(*[[' %s' % y
+                                if y not in formatters and need_leadsp[x]
+                                else str(y) for y in x]
+                               for x in fmt_columns])
             if self.sparsify:
                 str_columns = _sparsify(str_columns)
 
             str_columns = [list(x) for x in zip(*str_columns)]
         else:
-            str_columns = [[' %s' % x if x not in formatters and is_numeric_dtype(self.frame[x])
-                           else str(x)]
-                           for x in self.columns.format()]
+            fmt_columns = self.columns.format()
+            dtypes = self.frame.dtypes
+            need_leadsp = dict(zip(fmt_columns, map(is_numeric_dtype, dtypes)))
+            str_columns = [[' %s' % x
+                            if x not in formatters and need_leadsp[x]
+                            else str(x)]
+                           for x in fmt_columns]
 
         if self.show_index_names and self.has_index_names:
             for x in str_columns:
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 0caa525e9..3c015057e 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1636,7 +1636,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         df = DataFrame({'tups' : zip(range(10), range(10))})
         repr(df)
-        df.to_string(colSpace=10, buf=buf)
+        df.to_string(col_space=10, buf=buf)
 
     def test_to_string_unicode(self):
         buf = StringIO()
@@ -1644,7 +1644,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         unicode_values = [u'\u03c3'] * 10
         unicode_values = np.array(unicode_values, dtype=object)
         df = DataFrame({'unicode' : unicode_values})
-        df.to_string(colSpace=10, buf=buf)
+        df.to_string(col_space=10, buf=buf)
 
     def test_to_string_unicode_columns(self):
         df = DataFrame({u'\u03c3' : np.arange(10.)})
@@ -1687,7 +1687,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         self.assert_(isinstance(s, basestring))
 
         # print in right order
-        result = biggie.to_string(columns=['B', 'A'], colSpace=17,
+        result = biggie.to_string(columns=['B', 'A'], col_space=17,
                                   float_format='%.6f'.__mod__)
         lines = result.split('\n')
         header = lines[0].strip().split()
@@ -1701,7 +1701,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         # expected = ['B', 'A']
         # self.assertEqual(header, expected)
 
-        result = biggie.to_string(columns=['A'], colSpace=17)
+        result = biggie.to_string(columns=['A'], col_space=17)
         header = result.split('\n')[0].strip().split()
         expected = ['A']
         self.assertEqual(header, expected)
@@ -1710,7 +1710,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
                          formatters={'A' : lambda x: '%.1f' % x})
 
         biggie.to_string(columns=['B', 'A'], float_format=str)
-        biggie.to_string(columns=['B', 'A'], colSpace=12,
+        biggie.to_string(columns=['B', 'A'], col_space=12,
                          float_format=str)
 
         frame = DataFrame(index=np.arange(1000))
@@ -1725,6 +1725,16 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         assert(df_s == expected)
 
+    def test_to_string_no_index(self):
+        df = DataFrame({'x' : [1, 2, 3],
+                        'y' : [4, 5, 6]})
+
+        df_s = df.to_string(index=False)
+        expected = " x  y\n 1  4\n 2  5\n 3  6"
+
+        assert(df_s == expected)
+
+
     def test_to_html(self):
         # big mixed
         biggie = DataFrame({'A' : randn(1000),
@@ -1742,12 +1752,12 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         self.assert_(isinstance(s, basestring))
 
-        biggie.to_html(columns=['B', 'A'], colSpace=17)
+        biggie.to_html(columns=['B', 'A'], col_space=17)
         biggie.to_html(columns=['B', 'A'],
                        formatters={'A' : lambda x: '%.1f' % x})
 
         biggie.to_html(columns=['B', 'A'], float_format=str)
-        biggie.to_html(columns=['B', 'A'], colSpace=12,
+        biggie.to_html(columns=['B', 'A'], col_space=12,
                        float_format=str)
 
         frame = DataFrame(index=np.arange(1000))
