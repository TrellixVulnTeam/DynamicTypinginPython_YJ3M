commit f600e204cc199838c4ab8f2153b4217b03595680
Author: jreback <jeff@reback.net>
Date:   Wed Apr 10 09:41:30 2013 -0400

    ENH: added legacy pickel generation/testing suppport
    
    TST: added io/tests/test_pickle.py to test stored pickles
         added io/tests/generate_legacy_pickles.py to create legacy pickles
           on various arch and sytems (need contributions)
         added some sample pickles for 0.10.1/0.11.0

diff --git a/pandas/io/tests/data/legacy_pickle/0.10.1/AMD64_windows_2.7.3.pickle b/pandas/io/tests/data/legacy_pickle/0.10.1/AMD64_windows_2.7.3.pickle
new file mode 100644
index 000000000..a78e02147
Binary files /dev/null and b/pandas/io/tests/data/legacy_pickle/0.10.1/AMD64_windows_2.7.3.pickle differ
diff --git a/pandas/io/tests/data/legacy_pickle/0.10.1/x86_64_linux_2.7.3.pickle b/pandas/io/tests/data/legacy_pickle/0.10.1/x86_64_linux_2.7.3.pickle
new file mode 100644
index 000000000..a9c288a01
Binary files /dev/null and b/pandas/io/tests/data/legacy_pickle/0.10.1/x86_64_linux_2.7.3.pickle differ
diff --git a/pandas/io/tests/data/legacy_pickle/0.11.0/x86_64_linux_2.7.3.pickle b/pandas/io/tests/data/legacy_pickle/0.11.0/x86_64_linux_2.7.3.pickle
new file mode 100644
index 000000000..a9c288a01
Binary files /dev/null and b/pandas/io/tests/data/legacy_pickle/0.11.0/x86_64_linux_2.7.3.pickle differ
diff --git a/pandas/io/tests/generate_legacy_pickles.py b/pandas/io/tests/generate_legacy_pickles.py
new file mode 100644
index 000000000..47f2fc73f
--- /dev/null
+++ b/pandas/io/tests/generate_legacy_pickles.py
@@ -0,0 +1,74 @@
+""" self-contained to write legacy pickle files """
+
+def create_data():
+    """ create the pickle data """
+    
+    import numpy as np
+    import pandas
+    from pandas import (Series,DataFrame,Panel,
+                        SparseSeries,SparseDataFrame,SparsePanel,
+                        Index,MultiIndex,PeriodIndex,
+                        date_range,Timestamp)
+
+    data = {
+        'A': [0., 1., 2., 3., np.nan],
+        'B': [0, 1, 0, 1, 0],
+        'C': ['foo1', 'foo2', 'foo3', 'foo4', 'foo5'],
+        'D': date_range('1/1/2009', periods=5),
+        'E' : [0., 1, Timestamp('20100101'),'foo',2.],
+        }
+    
+    series = dict(float = Series(data['A']),
+                  int   = Series(data['B']),
+                  mixed = Series(data['E']))
+    frame  = dict(float = DataFrame(dict(A = series['float'], B = series['float'] + 1)),
+                  int   = DataFrame(dict(A = series['int']  , B = series['int']   + 1)),
+                  mixed = DataFrame(dict([ (k,data[k]) for k in ['A','B','C','D']])))
+    panel  = dict(float = Panel(dict(ItemA = frame['float'], ItemB = frame['float']+1)))
+    
+    return dict( series = series, 
+                 frame  = frame, 
+                 panel  = panel )
+
+def write_legacy_pickles():
+
+    # force our cwd to be the first searched
+    import sys
+    sys.path.insert(0,'.')
+
+    import os
+    import numpy as np
+    import pandas
+    import pandas.util.testing as tm
+    import platform as pl
+    import cPickle as pickle
+
+    print "This script generates a pickle file for the current arch, system, and python version"
+
+    base_dir, _ = os.path.split(os.path.abspath(__file__))
+    base_dir = os.path.join(base_dir,'data/legacy_pickle')
+    
+    # could make this a parameter?
+    version  = None
+
+
+    if version is None:
+        version = pandas.__version__
+    pth = os.path.join(base_dir, str(version))
+    try:
+        os.mkdir(pth)
+    except:
+        pass
+
+    # construct a reasonable platform name
+    f = '_'.join([ str(pl.machine()), str(pl.system().lower()), str(pl.python_version()) ])
+    pth = os.path.abspath(os.path.join(pth,'%s.pickle' % f))
+    
+    fh = open(pth,'wb')
+    pickle.dump(create_data(),fh,pickle.HIGHEST_PROTOCOL)
+    fh.close()
+    
+    print "created pickle file: %s" % pth
+
+if __name__ == '__main__':
+    write_legacy_pickles()
diff --git a/pandas/io/tests/test_pickle.py b/pandas/io/tests/test_pickle.py
index fc04f2c85..68e37e5a4 100644
--- a/pandas/io/tests/test_pickle.py
+++ b/pandas/io/tests/test_pickle.py
@@ -1,5 +1,7 @@
 # pylint: disable=E1101,E1103,W0232
 
+""" manage legacy pickle tests """
+
 from datetime import datetime, timedelta
 import operator
 import pickle
@@ -8,11 +10,6 @@ import nose
 import os
 
 import numpy as np
-from numpy.testing import assert_array_equal
-from pandas.util.testing import assert_almost_equal
-from pandas.util import py3compat
-import pandas.core.common as com
-
 import pandas.util.testing as tm
 import pandas as pd
 
@@ -20,10 +17,36 @@ class TestPickle(unittest.TestCase):
     _multiprocess_can_split_ = True
 
     def setUp(self):
-        pass
+        from pandas.io.tests.generate_legacy_pickles import create_data
+        self.data = create_data()
+
+    def compare(self, vf):
+
+        fh = open(vf,'rb')
+        data = pickle.load(fh)
+        fh.close()
+
+        for typ, dv in data.items():
+            for dt, result in dv.items():
+
+                expected = self.data[typ][dt]
+
+                comparator = getattr(tm,"assert_%s_equal" % typ)
+                comparator(result,expected)
+
+    def test_read_pickles_0_10_1(self):
+
+        pth = tm.get_data_path('legacy_pickle/0.10.1')
+        for f in os.listdir(pth):
+            vf = os.path.join(pth,f)
+            self.compare(vf)
+
+    def test_read_pickles_0_11_0(self):
 
-    #def test_hash_error(self):
-    #    self.assertRaises(TypeError, hash, self.strIndex)
+        pth = tm.get_data_path('legacy_pickle/0.11.0')
+        for f in os.listdir(pth):
+            vf = os.path.join(pth,f)
+            self.compare(vf)
 
 if __name__ == '__main__':
     import nose
