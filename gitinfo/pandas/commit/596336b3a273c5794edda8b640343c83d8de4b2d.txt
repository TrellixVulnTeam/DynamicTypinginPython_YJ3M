commit 596336b3a273c5794edda8b640343c83d8de4b2d
Author: Chang She <chang@lambdafoundry.com>
Date:   Sun Jun 3 20:33:11 2012 -0400

    DOC: some more examples and links from whatsnew

diff --git a/doc/source/basics.rst b/doc/source/basics.rst
index 014bf7ea5..0b72672fc 100644
--- a/doc/source/basics.rst
+++ b/doc/source/basics.rst
@@ -172,6 +172,18 @@ replace NaN with some other value using ``fillna`` if you wish).
    df + df2
    df.add(df2, fill_value=0)
 
+Flexible Comparisons
+~~~~~~~~~~~~~~~~~~~~
+Starting in v0.8, pandas introduced binary comparison methods eq, ne, lt, gt,
+le, and ge to Series and DataFrame whose behavior is analogous to the binary
+arithmetic operations described above:
+
+.. ipython:: python
+
+   df.gt(df2)
+
+   df2.ne(df)
+
 Combining overlapping data sets
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
diff --git a/doc/source/groupby.rst b/doc/source/groupby.rst
index 4176e17e0..3a9ea6d7a 100644
--- a/doc/source/groupby.rst
+++ b/doc/source/groupby.rst
@@ -119,9 +119,9 @@ columns:
     In [5]: grouped = df.groupby(get_letter_type, axis=1)
 
 Starting with 0.8, pandas Index objects now supports duplicate values. If a
-non-unique index is used as the group key in a groupby operation, all values for
-the same index value will be considered to be in one group and thus the output
-of aggregation functions will only contain unique index values:
+non-unique index is used as the group key in a groupby operation, all values
+for the same index value will be considered to be in one group and thus the
+output of aggregation functions will only contain unique index values:
 
 .. ipython:: python
 
diff --git a/doc/source/missing_data.rst b/doc/source/missing_data.rst
index 7078d9eb9..d00a19f28 100644
--- a/doc/source/missing_data.rst
+++ b/doc/source/missing_data.rst
@@ -11,7 +11,7 @@ pandas.
 .. ipython:: python
    :suppress:
 
-   import numpy as np; randn = np.random.randn
+   import numpy as np; randn = np.random.randn; randint =np.random.randint
    from pandas import *
    import matplotlib.pyplot as plt
 
@@ -210,33 +210,71 @@ eventually added to Panel. Series.dropna is a simpler method as it only has one
 axis to consider. DataFrame.dropna has considerably more options, which can be
 examined :ref:`in the API <api.dataframe.missing>`.
 
+.. _missing_data.interpolate:
+
 Interpolation
 ~~~~~~~~~~~~~
 
-A basic linear **interpolate** method has been implemented on Series with
-intended use for time series data. There has not been a great deal of demand
-for interpolation methods outside of the filling methods described above.
+A linear **interpolate** method has been implemented on Series. The default
+interpolation assumes equally spaced points.
 
 .. ipython:: python
    :suppress:
 
    np.random.seed(123456)
-   ts = Series(randn(100), index=date_range('1/1/2000', periods=100, freq='BM'))
-   ts[20:40] = np.nan
+   idx = date_range('1/1/2000', periods=100, freq='BM')
+   ts = Series(randn(100), index=idx)
+   ts[1:20] = np.nan
    ts[60:80] = np.nan
    ts = ts.cumsum()
 
 .. ipython:: python
 
-   fig, axes = plt.subplots(ncols=2, figsize=(8, 4))
-   ts.plot(ax=axes[0])
-   ts.interpolate().plot(ax=axes[1])
-   axes[0].set_title('Not interpolated')
+   ts.count()
+
+   ts.head()
+
+   ts.interpolate().count()
+
+   ts.interpolate().head()
+
    @savefig series_interpolate.png width=6in
-   axes[1].set_title('Interpolated')
+   fig = plt.figure()
+   ts.interpolate().plot()
 
    plt.close('all')
 
+Index aware interpolation is available via the ``method`` keyword:
+
+.. ipython:: python
+   :suppress:
+
+   ts = ts[[0, 1, 30, 60, 99]]
+
+.. ipython:: python
+
+   ts
+
+   ts.interpolate()
+
+   ts.interpolate(method='time')
+
+For a floating-point index, use ``method='values'``:
+
+.. ipython:: python
+   :suppress:
+
+   idx = [0., 1., 10.]
+   ser = Series([0., np.nan, 10.], idx)
+
+.. ipython:: python
+
+   ser
+
+   ser.interpolate()
+
+   ser.interpolate(method='values')
+
 .. _missing_data.replace:
 
 Replacing Generic Values
diff --git a/doc/source/reshaping.rst b/doc/source/reshaping.rst
index 4ac2892de..7f799a8e8 100644
--- a/doc/source/reshaping.rst
+++ b/doc/source/reshaping.rst
@@ -11,6 +11,7 @@
    import pandas.util.testing as tm
    randn = np.random.randn
    np.set_printoptions(precision=4, suppress=True)
+   from pandas.tools.tile import *
 
 **************************
 Reshaping and Pivot Tables
@@ -330,3 +331,27 @@ rows and columns:
 
    df.pivot_table(rows=['A', 'B'], cols='C', margins=True, aggfunc=np.std)
 
+.. _reshaping.tile:
+
+Tiling
+------
+
+.. _reshaping.tile.cut:
+
+The ``cut`` function computes groupings for the values of the input array and
+is often used to transform continuous variables to discrete or categorical
+variables:
+
+.. ipython:: python
+
+   ages = np.array([10, 15, 13, 12, 23, 25, 28, 59, 60])
+
+
+   cut(ages, bins=3)
+
+If the ``bins`` keyword is an integer, then equal-width bins are formed.
+Alternatively we can specify custom bin-edges:
+
+.. ipython:: python
+
+   cut(ages, bins=[0, 18, 35, 70])
diff --git a/doc/source/whatsnew/v0.8.0.txt b/doc/source/whatsnew/v0.8.0.txt
index cdf96072d..5ea0be0dd 100644
--- a/doc/source/whatsnew/v0.8.0.txt
+++ b/doc/source/whatsnew/v0.8.0.txt
@@ -54,13 +54,15 @@ Time series changes and improvements
   aggregation functions, and control over how the intervals and result labeling
   are defined. A suite of high performance Cython/C-based resampling functions
   (including Open-High-Low-Close) have also been implemented.
-- Revamp of **frequency aliases** and support for **frequency shortcuts** like
-  '15min', or '1h30min'
-- New **DatetimeIndex class** supports both fixed frequency and irregular time
+- Revamp of :ref:`frequency aliases <timeseries.alias>` and support for
+  **frequency shortcuts** like '15min', or '1h30min'
+- New :ref:`DatetimeIndex class <timeseries.datetimeindex>` supports both fixed
+  frequency and irregular time
   series. Replaces now deprecated DateRange class
-- New PeriodIndex and Period classes for representing **time spans** and
-  performing **calendar logic**, including the **12 fiscal quarterly
-  frequencies**. This is a partial port of, and a substantial enhancement to,
+- New ``PeriodIndex`` and ``Period`` classes for representing
+  :ref:`time spans <timeseries.periods>` and performing **calendar logic**,
+  including the `12 fiscal quarterly frequencies <timeseries.quarterly>`.
+  This is a partial port of, and a substantial enhancement to,
   elements of the scikits.timeseries codebase. Support for conversion between
   PeriodIndex and DatetimeIndex
 - New Timestamp data type subclasses `datetime.datetime`, providing the same
@@ -78,8 +80,8 @@ Time series changes and improvements
   and month, and index values with strings
 - Enhanced time series **plotting**; adaptation of scikits.timeseries
   matplotlib-based plotting code
-- New ``date_range``, ``bdate_range``, and ``period_range`` **factory
-  functions**
+- New ``date_range``, ``bdate_range``, and ``period_range`` :ref:`factory
+  functions <timeseries.daterange>`
 - Robust **frequency inference** function `infer_freq` and ``inferred_freq``
   property of DatetimeIndex, with option to infer frequency on construction of
   DatetimeIndex
@@ -95,8 +97,9 @@ Time series changes and improvements
 - Can index time series with datetime.time objects to select all data at
   particular **time of day** (``TimeSeries.at_time``) or **between two times**
   (``TimeSeries.between_time``)
-- Add tshift method for leading/lagging using the frequency (if any) of the
-  index, as opposed to a naive lead/lag using shift
+- Add :ref:`tshift <timeseries.advanced_datetime>` method for leading/lagging
+  using the frequency (if any) of the index, as opposed to a naive lead/lag
+  using shift
 
 Support for non-unique indexes
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -108,8 +111,8 @@ index duplication in many-to-many joins)
 Other new features
 ~~~~~~~~~~~~~~~~~~
 
-- New ``cut`` function (like R's cut function) for computing a categorical
-  variable from a continuous variable by binning values
+- New :ref:`cut <reshaping.tile.cut>` function (like R's cut function) for
+  computing a categorical variable from a continuous variable by binning values
 - Add :ref:`limit <missing_data.fillna.limit>` argument to fillna/reindex
 - More flexible multiple function application in GroupBy, and can pass list
   (name, function) tuples to get result in particular order with given names
@@ -130,7 +133,7 @@ Other new features
   memory usage than Python's dict
 - Add first, last, min, max, and prod optimized GroupBy functions
 - New :ref:`ordered_merge <merging.ordered_merge>` function
-- Add flexible comparison instance methods eq, ne, lt, gt, etc. to DataFrame,
+- Add flexible :ref:`comparison <basics.binop>` instance methods eq, ne, lt, gt, etc. to DataFrame,
   Series
 - Improve :ref:`scatter_matrix <visualization.scatter_matrix>` plotting
   function and add histogram or kernel density estimates to diagonal
@@ -139,7 +142,7 @@ Other new features
 - Improved support for complex numbers in Series and DataFrame
 - Add :ref:`pct_change <computation.pct_change>` method to all data structures
 - Add max_colwidth configuration option for DataFrame console output
-- Interpolate Series values using index values
+- :ref:`Interpolate <missing_data.interpolate>` Series values using index values
 - Can select multiple columns from GroupBy
 - Add :ref:`update <merging.combine_first.update>` methods to Series/DataFrame
   for updating values in place
