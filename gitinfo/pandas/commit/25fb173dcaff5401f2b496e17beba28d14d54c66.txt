commit 25fb173dcaff5401f2b496e17beba28d14d54c66
Author: Jeff Reback <jeff@reback.net>
Date:   Tue Feb 14 20:15:20 2017 -0500

    TST: fix incorrect url in compressed url network tests in parser

diff --git a/pandas/tests/io/parser/test_network.py b/pandas/tests/io/parser/test_network.py
index 4d75b59b0..6e762368f 100644
--- a/pandas/tests/io/parser/test_network.py
+++ b/pandas/tests/io/parser/test_network.py
@@ -7,7 +7,6 @@ and hence require a network connection to be read.
 
 import os
 import pytest
-import functools
 from itertools import product
 
 import pandas.util.testing as tm
@@ -15,42 +14,32 @@ from pandas import DataFrame
 from pandas.io.parsers import read_csv, read_table
 
 
-class TestCompressedUrl(object):
+@pytest.fixture(scope='module')
+def salaries_table():
+    path = os.path.join(tm.get_data_path(), 'salaries.csv')
+    return read_table(path)
 
-    compression_to_extension = {
-        'gzip': '.gz',
-        'bz2': '.bz2',
-        'zip': '.zip',
-        'xz': '.xz',
-    }
 
-    def setup(self):
-        path = os.path.join(tm.get_data_path(), 'salaries.csv')
-        self.local_table = read_table(path)
-        self.base_url = ('https://github.com/pandas-dev/pandas/raw/master/'
-                         'pandas/io/tests/parser/data/salaries.csv')
+@tm.network
+@pytest.mark.parametrize(
+    "compression,extension", [('gzip', '.gz'), ('bz2', '.bz2'),
+                              ('zip', '.zip'), ('xz', '.xz')])
+def test_compressed_urls(salaries_table, compression, extension):
+    # test reading compressed urls with various engines and
+    # extension inference
+    base_url = ('https://github.com/pandas-dev/pandas/raw/master/'
+                'pandas/tests/io/parser/data/salaries.csv')
+
+    url = base_url + extension
+
+    # args is a (compression, engine) tuple
+    for (c, engine) in product([compression, 'infer'], ['python', 'c']):
 
-    @tm.network
-    def test_compressed_urls(self):
-        # Test reading compressed tables from URL.
-        msg = ('Test reading {}-compressed tables from URL: '
-               'compression="{}", engine="{}"')
-
-        for compression, extension in self.compression_to_extension.items():
-            url = self.base_url + extension
-            # args is a (compression, engine) tuple
-            for args in product([compression, 'infer'], ['python', 'c']):
-                # test_fxn is a workaround for more descriptive nose reporting.
-                # See http://stackoverflow.com/a/37393684/4651668.
-                test_fxn = functools.partial(self.check_table)
-                test_fxn.description = msg.format(compression, *args)
-                yield (test_fxn, url) + args
-
-    def check_table(self, url, compression, engine):
         if url.endswith('.xz'):
             tm._skip_if_no_lzma()
-        url_table = read_table(url, compression=compression, engine=engine)
-        tm.assert_frame_equal(url_table, self.local_table)
+
+        url_table = read_table(url, compression=c, engine=engine)
+        tm.assert_frame_equal(url_table, salaries_table)
 
 
 class TestS3(tm.TestCase):
