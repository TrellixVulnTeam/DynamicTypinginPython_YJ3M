commit 0dd860b571d825531ef858599e3f546acddf06b8
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Sep 22 11:20:57 2011 -0400

    BUG: fix single-key groupby with as_index=False, address GH #160

diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 898ca4694..77b842942 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -923,8 +923,12 @@ class DataFrameGroupBy(GroupBy):
                 result = DataFrame(output, index=index, columns=output_keys)
         else:
             name_list = self._get_names()
-            result = DataFrame(output, index=name_list[0][1],
-                               columns=output_keys)
+            name, labels = name_list[0]
+            if not self.as_index:
+                result = DataFrame(output, columns=output_keys)
+                result.insert(0, name, labels)
+            else:
+                result = DataFrame(output, index=labels, columns=output_keys)
 
         if self.axis == 1:
             result = result.T
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index aa1cdd61e..d9418c2d8 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -519,12 +519,15 @@ class TestGroupBy(unittest.TestCase):
     def test_groupby_as_index(self):
         data = self.df
 
-        grouped = data.groupby(['A'], as_index=False)
+        # single-key
+        grouped = data.groupby('A', as_index=False)
         result = grouped.mean()
         expected = data.groupby(['A']).mean()
         expected.insert(0, 'A', expected.index)
         expected.index = np.arange(len(expected))
+        assert_frame_equal(result, expected)
 
+        # multi-key
         grouped = data.groupby(['A', 'B'], as_index=False)
         result = grouped.mean()
         expected = data.groupby(['A', 'B']).mean()
@@ -533,6 +536,7 @@ class TestGroupBy(unittest.TestCase):
         expected.insert(0, 'A', arrays[0])
         expected.insert(1, 'B', arrays[1])
         expected.index = np.arange(len(expected))
+        assert_frame_equal(result, expected)
 
     def test_groupby_multiple_key(self):
         df = tm.makeTimeDataFrame()
