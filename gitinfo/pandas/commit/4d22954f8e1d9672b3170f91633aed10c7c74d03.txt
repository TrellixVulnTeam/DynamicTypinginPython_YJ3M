commit 4d22954f8e1d9672b3170f91633aed10c7c74d03
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jan 23 18:12:00 2012 -0500

    BUG: pass on sort kind from Series.sort to order and in argsort GH #668

diff --git a/RELEASE.rst b/RELEASE.rst
index a74a2eeda..630e912bb 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -223,6 +223,8 @@ pandas 0.7.0
   - Fix out-of-bounds segfault in pad_object and backfill_object methods when
     either source or target array are empty
   - Could not create a new column in a DataFrame from a list of tuples
+  - Fix bugs preventing SparseDataFrame and SparseSeries working with groupby
+    (GH #666)
 
 Thanks
 ------
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 0284bbed4..a65e3df27 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1356,10 +1356,18 @@ copy : boolean, default False
 
     def sort(self, axis=0, kind='quicksort', order=None):
         """
-        Sort values and index labels in place, for compatibility with
-        ndarray. No return value
+        Sort values and index labels by value, in place. For compatibility with
+        ndarray API. No return value
+
+        Parameters
+        ----------
+        axis : int (can only be zero)
+        kind : {'mergesort', 'quicksort', 'heapsort'}, default 'quicksort'
+            Choice of sorting algorithm. See np.sort for more
+            information. 'mergesort' is the only stable algorithm
+        order : ignored
         """
-        sortedSeries = self.order(na_last=True)
+        sortedSeries = self.order(na_last=True, kind=kind)
 
         true_base = self
         while true_base.base is not None:
@@ -1399,6 +1407,14 @@ copy : boolean, default False
         Overrides ndarray.argsort. Argsorts the value, omitting NA/null values,
         and places the result in the same locations as the non-NA values
 
+        Parameters
+        ----------
+        axis : int (can only be zero)
+        kind : {'mergesort', 'quicksort', 'heapsort'}, default 'quicksort'
+            Choice of sorting algorithm. See np.sort for more
+            information. 'mergesort' is the only stable algorithm
+        order : ignored
+
         Returns
         -------
         argsorted : Series
@@ -1409,10 +1425,11 @@ copy : boolean, default False
         if mask.any():
             result = values.copy()
             notmask = -mask
-            result[notmask] = np.argsort(values[notmask])
+            result[notmask] = np.argsort(values[notmask], kind=kind)
             return Series(result, index=self.index, name=self.name)
         else:
-            return Series(np.argsort(values), index=self.index, name=self.name)
+            return Series(np.argsort(values, kind=kind), index=self.index,
+                          name=self.name)
 
     def rank(self):
         """
@@ -1429,7 +1446,7 @@ copy : boolean, default False
             ranks = lib.rank_1d_generic(self.values)
         return Series(ranks, index=self.index, name=self.name)
 
-    def order(self, na_last=True, ascending=True):
+    def order(self, na_last=True, ascending=True, kind='mergesort'):
         """
         Sorts Series object, by value, maintaining index-value link
 
@@ -1439,6 +1456,9 @@ copy : boolean, default False
             Put NaN's at beginning or end
         ascending : boolean, default True
             Sort ascending. Passing False sorts descending
+        kind : {'mergesort', 'quicksort', 'heapsort'}, default 'mergesort'
+            Choice of sorting algorithm. See np.sort for more
+            information. 'mergesort' is the only stable algorith
 
         Returns
         -------
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 1ddb411e1..2944f84a8 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -873,6 +873,18 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         argsorted = self.ts.argsort()
         self.assert_(issubclass(argsorted.dtype.type, np.integer))
 
+    def test_argsort_stable(self):
+        s = Series(np.random.randint(0, 100, size=10000))
+        mindexer = s.argsort(kind='mergesort')
+        qindexer = s.argsort()
+
+        mexpected = np.argsort(s.values, kind='mergesort')
+        qexpected = np.argsort(s.values, kind='quicksort')
+
+        self.assert_(np.array_equal(mindexer, mexpected))
+        self.assert_(np.array_equal(qindexer, qexpected))
+        self.assert_(not np.array_equal(qindexer, mindexer))
+
     def test_cumsum(self):
         self._check_accum_op('cumsum')
 
@@ -880,7 +892,7 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         self._check_accum_op('cumprod')
 
     def test_cummin(self):
-        self.assert_(np.array_equal(self.ts.cummin(), 
+        self.assert_(np.array_equal(self.ts.cummin(),
                                     np.minimum.accumulate(np.array(self.ts))))
         ts = self.ts.copy()
         ts[::2]  = np.NaN
@@ -890,7 +902,7 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         self.assert_(np.array_equal(result, expected))
 
     def test_cummax(self):
-        self.assert_(np.array_equal(self.ts.cummax(), 
+        self.assert_(np.array_equal(self.ts.cummax(),
                                     np.maximum.accumulate(np.array(self.ts))))
         ts = self.ts.copy()
         ts[::2]  = np.NaN
