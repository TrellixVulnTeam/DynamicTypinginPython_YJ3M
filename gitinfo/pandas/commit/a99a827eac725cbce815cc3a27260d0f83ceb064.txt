commit a99a827eac725cbce815cc3a27260d0f83ceb064
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jun 13 19:56:19 2011 -0400

    renaming DataMatrix to DataFrame, misc cleanup

diff --git a/bench/alignment.py b/bench/alignment.py
index 461e1a1d1..bf5d5604d 100644
--- a/bench/alignment.py
+++ b/bench/alignment.py
@@ -10,8 +10,8 @@ idx1 = range(N)
 idx2 = range(K)
 
 # pandas
-dma1 = pandas.DataMatrix(arr1, idx1, idx2)
-dma2 = pandas.DataMatrix(arr2, idx1[::-1], idx2[::-1])
+dma1 = pandas.DataFrame(arr1, idx1, idx2)
+dma2 = pandas.DataFrame(arr2, idx1[::-1], idx2[::-1])
 
 # larry
 lar1 = la.larry(arr1, [idx1, idx2])
diff --git a/bench/io_roundtrip.py b/bench/io_roundtrip.py
index 282b9cab5..84a3016b3 100644
--- a/bench/io_roundtrip.py
+++ b/bench/io_roundtrip.py
@@ -17,7 +17,7 @@ def rountrip_archive(N, iterations=10):
     # Create data
     arr = np.random.randn(N, N)
     lar = la.larry(arr)
-    dma = pandas.DataMatrix(arr, range(N), range(N))
+    dma = pandas.DataFrame(arr, range(N), range(N))
 
     # filenames
     filename_numpy = 'c:/temp/numpy.npz'
@@ -77,9 +77,9 @@ def pandas_roundtrip(filename, dma1, dma2):
 
 def pandas_roundtrip_pickle(filename, dma1, dma2):
     dma1.save(filename)
-    dma1 = pandas.DataMatrix.load(filename)
+    dma1 = pandas.DataFrame.load(filename)
     dma2.save(filename)
-    dma2 = pandas.DataMatrix.load(filename)
+    dma2 = pandas.DataFrame.load(filename)
 
 
     In [65]: df1
diff --git a/bench/serialize.py b/bench/serialize.py
index 2f5a5560e..29eecfc4c 100644
--- a/bench/serialize.py
+++ b/bench/serialize.py
@@ -17,7 +17,7 @@ def roundtrip_archive(N, iterations=10):
     # Create data
     arr = np.random.randn(N, N)
     lar = la.larry(arr)
-    dma = pandas.DataMatrix(arr, range(N), range(N))
+    dma = pandas.DataFrame(arr, range(N), range(N))
 
     # filenames
     filename_numpy = '/Users/wesm/tmp/numpy.npz'
@@ -75,6 +75,6 @@ def pandas_roundtrip(filename, dma1, dma2):
 
 def pandas_roundtrip_pickle(filename, dma1, dma2):
     dma1.save(filename)
-    dma1 = pandas.DataMatrix.load(filename)
+    dma1 = pandas.DataFrame.load(filename)
     dma2.save(filename)
-    dma2 = pandas.DataMatrix.load(filename)
+    dma2 = pandas.DataFrame.load(filename)
diff --git a/examples/finance.py b/examples/finance.py
index b099a40a2..b801edf59 100644
--- a/examples/finance.py
+++ b/examples/finance.py
@@ -9,7 +9,7 @@ import numpy as np
 from pylab import show
 
 
-from pandas import Index, DataMatrix
+from pandas import Index, DataFrame
 from pandas.core.datetools import BMonthEnd
 from pandas import ols
 
@@ -29,17 +29,17 @@ def getQuotes(symbol, start, end):
     }
 
     dates = Index([datetime.fromordinal(int(d)) for d in dates])
-    return DataMatrix(data, index=dates)
+    return DataFrame(data, index=dates)
 
 msft = getQuotes('MSFT', startDate, endDate)
 aapl = getQuotes('AAPL', startDate, endDate)
 goog = getQuotes('GOOG', startDate, endDate)
 ibm = getQuotes('IBM', startDate, endDate)
 
-px = DataMatrix({'MSFT' : msft['close'],
-                 'IBM' : ibm['close'],
-                 'GOOG' : goog['close'],
-                 'AAPL' : aapl['close']})
+px = DataFrame({'MSFT' : msft['close'],
+                'IBM' : ibm['close'],
+                'GOOG' : goog['close'],
+                'AAPL' : aapl['close']})
 returns = px / px.shift(1) - 1
 
 # Select dates
@@ -64,7 +64,7 @@ ibmMonthly = toMonthly(ibm, np.mean)
 
 # Statistics
 
-stdev = DataMatrix({
+stdev = DataFrame({
     'MSFT' : msft.std(),
     'IBM'  : ibm.std()
 })
diff --git a/examples/regressions.py b/examples/regressions.py
index f4383d9a5..1da65c692 100644
--- a/examples/regressions.py
+++ b/examples/regressions.py
@@ -3,7 +3,7 @@ import string
 
 import numpy as np
 
-from pandas.core.api import Series, DataMatrix, DateRange
+from pandas.core.api import Series, DataFrame, DateRange
 from pandas.stats.api import ols
 
 N = 100
@@ -11,8 +11,8 @@ N = 100
 start = datetime(2009, 9, 2)
 dateRange = DateRange(start, periods=N)
 
-def makeDataMatrix():
-    data = DataMatrix(np.random.randn(N, 7),
+def makeDataFrame():
+    data = DataFrame(np.random.randn(N, 7),
                       columns=list(string.ascii_uppercase[:7]),
                       index=dateRange)
 
@@ -24,7 +24,7 @@ def makeSeries():
 #-------------------------------------------------------------------------------
 # Standard rolling linear regression
 
-X = makeDataMatrix()
+X = makeDataFrame()
 Y =  makeSeries()
 
 model = ols(y=Y, x=X)
@@ -35,12 +35,12 @@ print model
 # Panel regression
 
 data = {
-    'A' : makeDataMatrix(),
-    'B' : makeDataMatrix(),
-    'C' : makeDataMatrix()
+    'A' : makeDataFrame(),
+    'B' : makeDataFrame(),
+    'C' : makeDataFrame()
 }
 
-Y = makeDataMatrix()
+Y = makeDataFrame()
 
 panelModel = ols(y=Y, x=data, window=50)
 
diff --git a/pandas/core/tests/common.py b/pandas/core/tests/common.py
deleted file mode 100644
index 543990f30..000000000
--- a/pandas/core/tests/common.py
+++ /dev/null
@@ -1,163 +0,0 @@
-# pylint: disable-msg=W0402
-
-from datetime import datetime
-import random
-import string
-
-from numpy.random import randn
-import numpy as np
-
-from pandas.core.api import (DateRange, Index, Series, DataFrame,
-                             DataMatrix, WidePanel)
-
-N = 30
-K = 4
-
-def rands(n):
-    choices = string.letters + string.digits
-    return ''.join([random.choice(choices) for _ in xrange(n)])
-
-def equalContents(arr1, arr2):
-    """Checks if the set of unique elements of arr1 and arr2 are equivalent.
-    """
-    return frozenset(arr1) == frozenset(arr2)
-
-def isiterable(obj):
-    return hasattr(obj, '__iter__')
-
-def assert_almost_equal(a, b):
-    if isiterable(a):
-        np.testing.assert_(isiterable(b))
-        np.testing.assert_equal(len(a), len(b))
-        for i in xrange(len(a)):
-            assert_almost_equal(a[i], b[i])
-        return True
-
-    err_msg = lambda a, b: 'expected %.5f but got %.5f' % (a, b)
-
-    if np.isnan(a):
-        np.testing.assert_(np.isnan(b))
-        return
-
-    # case for zero
-    if abs(a) < 1e-5:
-        np.testing.assert_almost_equal(
-            a, b, decimal=5, err_msg=err_msg(a, b), verbose=False)
-    else:
-        np.testing.assert_almost_equal(
-            1, a/b, decimal=5, err_msg=err_msg(a, b), verbose=False)
-
-def is_sorted(seq):
-    return assert_almost_equal(seq, np.sort(np.array(seq)))
-
-def assert_dict_equal(a, b, compare_keys=True):
-    a_keys = frozenset(a.keys())
-    b_keys = frozenset(b.keys())
-
-    if compare_keys:
-        assert(a_keys == b_keys)
-
-    for k in a_keys:
-        assert_almost_equal(a[k], b[k])
-
-def assert_series_equal(left, right):
-    assert_almost_equal(left, right)
-    assert(np.array_equal(left.index, right.index))
-
-def assert_frame_equal(left, right):
-    for col, series in left.iteritems():
-        assert(col in right)
-        assert_series_equal(series, right[col])
-
-    for col in right:
-        assert(col in left)
-
-def assert_contains_all(iterable, dic):
-    for k in iterable:
-        assert(k in dic)
-
-def getCols(k):
-    return string.ascii_uppercase[:k]
-
-def makeStringIndex(k):
-    return Index([rands(10) for _ in xrange(k)])
-
-def makeIntIndex(k):
-    return Index(np.arange(k))
-
-def makeDateIndex(k):
-    dates = list(DateRange(datetime(2000, 1, 1), periods=k))
-    return Index(dates)
-
-def makeFloatSeries():
-    index = makeStringIndex(N)
-    return Series(randn(N), index=index)
-
-def makeStringSeries():
-    index = makeStringIndex(N)
-    return Series(randn(N), index=index)
-
-def makeObjectSeries():
-    dateIndex = makeDateIndex(N)
-    index = makeStringIndex(N)
-    return Series(dateIndex, index=index)
-
-def makeTimeSeries():
-    return Series(randn(N), index=makeDateIndex(N))
-
-def getArangeMat():
-    return np.arange(N * K).reshape((N, K))
-
-def getSeriesData():
-    index = makeStringIndex(N)
-
-    return dict((c, Series(randn(N), index=index)) for c in getCols(K))
-
-def getTimeSeriesData():
-    return dict((c, makeTimeSeries()) for c in getCols(K))
-
-def getMixedTypeDict():
-    index = Index(['a', 'b', 'c', 'd', 'e'])
-
-    data = {
-        'A' : [0., 1., 2., 3., 4.],
-        'B' : [0., 1., 0., 1., 0.],
-        'C' : ['foo1', 'foo2', 'foo3', 'foo4', 'foo5'],
-        'D' : DateRange('1/1/2009', periods=5)
-    }
-
-    return index, data
-
-def makeDataFrame():
-    data = getSeriesData()
-    return DataFrame(data)
-
-def makeTimeDataFrame():
-    data = getTimeSeriesData()
-    return DataFrame(data)
-
-def makeDataMatrix():
-    data = getSeriesData()
-    return DataMatrix(data)
-
-def makeTimeDataMatrix():
-    data = getTimeSeriesData()
-    return DataMatrix(data)
-
-def makeWidePanel():
-    cols = ['Item' + c for c in string.ascii_uppercase[:K - 1]]
-    data = dict((c, makeTimeDataMatrix()) for c in cols)
-    return WidePanel.fromDict(data)
-
-def add_nans(panel):
-    I, J, N = panel.dims
-    for i, item in enumerate(panel.items):
-        dm = panel[item]
-        for j, col in enumerate(dm.columns):
-            dm[col][:i + j] = np.NaN
-
-def makeLongPanel():
-    wp = makeWidePanel()
-    add_nans(wp)
-
-    return wp.toLong()
diff --git a/pandas/stats/misc.py b/pandas/stats/misc.py
index 22c86a0ba..07fbb391a 100644
--- a/pandas/stats/misc.py
+++ b/pandas/stats/misc.py
@@ -1,7 +1,8 @@
 from numpy import NaN
 import numpy as np
 
-from pandas.core.api import Series, DataMatrix, isnull, notnull
+from pandas.core.api import Series, DataFrame, isnull, notnull
+from pandas.core.series import remove_na
 
 __all__ = ['bucket', 'bucketpanel']
 
@@ -43,7 +44,7 @@ def correl_xs(frame1, frame2):
 
 def bucket(series, k, by=None):
     """
-    Produce DataMatrix representing quantiles of a Series
+    Produce DataFrame representing quantiles of a Series
 
     Parameters
     ----------
@@ -55,7 +56,7 @@ def bucket(series, k, by=None):
 
     Returns
     -------
-    DataMatrix
+    DataFrame
     """
     if by is None:
         by = series
@@ -68,7 +69,7 @@ def bucket(series, k, by=None):
     for i, v in enumerate(split):
         mat[:, i][v] = series.take(v)
 
-    return DataMatrix(mat, index=series.index, columns=np.arange(k) + 1)
+    return DataFrame(mat, index=series.index, columns=np.arange(k) + 1)
 
 def _split_quantile(arr, k):
     arr = np.asarray(arr)
@@ -80,7 +81,7 @@ def _split_quantile(arr, k):
 
 def bucketcat(series, cats):
     """
-    Produce DataMatrix representing quantiles of a Series
+    Produce DataFrame representing quantiles of a Series
 
     Parameters
     ----------
@@ -90,7 +91,7 @@ def bucketcat(series, cats):
 
     Returns
     -------
-    DataMatrix
+    DataFrame
     """
     if not isinstance(series, Series):
         series = Series(series, index=np.arange(len(series)))
@@ -106,7 +107,7 @@ def bucketcat(series, cats):
     for i, label in enumerate(unique_labels):
         data[label] = series[cats == label]
 
-    return DataMatrix(data, columns=unique_labels)
+    return DataFrame(data, columns=unique_labels)
 
 def bucketpanel(series, bins=None, by=None, cat=None):
     """
@@ -124,7 +125,7 @@ def bucketpanel(series, bins=None, by=None, cat=None):
 
     Returns
     -------
-    DataMatrix
+    DataFrame
     """
     use_by = by is not None
     use_cat = cat is not None
@@ -235,7 +236,7 @@ def _cat_labels(labels):
         mask = labels == label
         data[stringified] = series[mask]
 
-    return DataMatrix(data, index=series.index)
+    return DataFrame(data, index=series.index)
 
 def _bucket_labels(series, k):
     arr = np.asarray(series)
@@ -288,7 +289,7 @@ def quantileTS(frame, percentile):
 
     Parameters
     ----------
-    frame: DataFrame / DataMatrix
+    frame: DataFrame
     percentile: int
        nth percentile
 
@@ -316,7 +317,7 @@ def percentileRank(frame, column=None, kind='mean'):
 
     Parameters
     ----------
-    frame: DataFrame / DataMatrix
+    frame: DataFrame
     column: string or Series, optional
        Column name or specific Series to compute percentiles for.
        If not provided, percentiles are computed for all values at each
@@ -365,5 +366,5 @@ def percentileRank(frame, column=None, kind='mean'):
         for column in frame.columns:
             for date, xs in framet.iteritems():
                 results.setdefault(date, {})[column] = fun(xs, xs[column])
-        results = frame.__class__(results).T
+        results = DataFrame(results).T
     return results
diff --git a/pandas/stats/moments.py b/pandas/stats/moments.py
index 7ec7ae036..8daa2be76 100644
--- a/pandas/stats/moments.py
+++ b/pandas/stats/moments.py
@@ -9,7 +9,7 @@ from functools import wraps
 from numpy import NaN
 import numpy as np
 
-from pandas.core.api import (DataFrame, DataMatrix, Series, notnull)
+from pandas.core.api import DataFrame, Series, notnull
 import pandas.lib.tseries as tseries
 
 __all__ = ['rolling_count', 'rolling_max', 'rolling_min',
@@ -251,8 +251,8 @@ Returns
 y : type of input argument
 """
 
-_unary_arg = "arg : Series, DataFrame, or DataMatrix"
-_binary_arg = """arg1 : Series, DataFrame, or DataMatrix, or ndarray
+_unary_arg = "arg : Series, DataFrame"
+_binary_arg = """arg1 : Series, DataFrame, or ndarray
 arg2 : type of arg1"""
 
 _bias_doc = r"""bias : boolean, default False
diff --git a/pandas/stats/ols.py b/pandas/stats/ols.py
index 72e1f4175..22a34bdbe 100644
--- a/pandas/stats/ols.py
+++ b/pandas/stats/ols.py
@@ -9,7 +9,7 @@ from StringIO import StringIO
 
 import numpy as np
 
-from pandas.core.api import DataFrame, DataMatrix, Series
+from pandas.core.api import DataFrame, Series
 from pandas.core.panel import WidePanel
 from pandas.util.decorators import cache_readonly
 import pandas.stats.common as common
@@ -330,8 +330,8 @@ class OLS(object):
     @cache_readonly
     def var_beta(self):
         """Returns the variance-covariance matrix of beta."""
-        return DataMatrix(self._var_beta_raw, index=self.beta.index,
-                          columns=self.beta.index)
+        return DataFrame(self._var_beta_raw, index=self.beta.index,
+                         columns=self.beta.index)
 
     @cache_readonly
     def _y_fitted_raw(self):
@@ -406,7 +406,7 @@ class OLS(object):
 
     @cache_readonly
     def summary_as_matrix(self):
-        """Returns the formatted results of the OLS as a DataMatrix."""
+        """Returns the formatted results of the OLS as a DataFrame."""
         results = self._results
         beta = results['beta']
         data = {'beta' : results['beta'],
@@ -547,10 +547,10 @@ class MovingOLS(OLS):
 
     @cache_readonly
     def beta(self):
-        """Returns the betas in Series/DataMatrix form."""
-        return DataMatrix(self._beta_raw,
-                          index=self._result_index,
-                          columns=self._x.columns)
+        """Returns the betas in Series/DataFrame form."""
+        return DataFrame(self._beta_raw,
+                         index=self._result_index,
+                         columns=self._x.columns)
 
     @cache_readonly
     def rank(self):
@@ -595,8 +595,8 @@ class MovingOLS(OLS):
     def p_value(self):
         """Returns the p values."""
         cols = self.beta.columns
-        return DataMatrix(self._p_value_raw, columns=cols,
-                          index=self._result_index)
+        return DataFrame(self._p_value_raw, columns=cols,
+                         index=self._result_index)
 
     @cache_readonly
     def r2(self):
@@ -624,14 +624,14 @@ class MovingOLS(OLS):
     @cache_readonly
     def std_err(self):
         """Returns the standard err values."""
-        return DataMatrix(self._std_err_raw, columns=self.beta.columns,
-                          index=self._result_index)
+        return DataFrame(self._std_err_raw, columns=self.beta.columns,
+                         index=self._result_index)
 
     @cache_readonly
     def t_stat(self):
         """Returns the t-stat value."""
-        return DataMatrix(self._t_stat_raw, columns=self.beta.columns,
-                          index=self._result_index)
+        return DataFrame(self._t_stat_raw, columns=self.beta.columns,
+                         index=self._result_index)
 
     @cache_readonly
     def var_beta(self):
@@ -639,8 +639,8 @@ class MovingOLS(OLS):
         result = {}
         result_index = self._result_index
         for i in xrange(len(self._var_beta_raw)):
-            dm = DataMatrix(self._var_beta_raw[i], columns=self.beta.columns,
-                            index=self.beta.columns)
+            dm = DataFrame(self._var_beta_raw[i], columns=self.beta.columns,
+                           index=self.beta.columns)
             result[result_index[i]] = dm
 
         return WidePanel.fromDict(result, intersect=False)
@@ -1005,7 +1005,7 @@ class MovingOLS(OLS):
         window = self._window
 
         # x should be ones
-        dummy = DataMatrix(index=self._y.index)
+        dummy = DataFrame(index=self._y.index)
         dummy['y'] = 1
 
         cum_xy = self._cum_xy(dummy, self._y)
@@ -1158,7 +1158,7 @@ def _combine_rhs(rhs):
         raise Exception('Invalid RHS type: %s' % type(rhs))
 
     if not isinstance(series, DataFrame):
-        series = DataMatrix(series)
+        series = DataFrame(series)
 
     return series
 
diff --git a/pandas/stats/plm.py b/pandas/stats/plm.py
index d0eb948da..6f8ec035c 100644
--- a/pandas/stats/plm.py
+++ b/pandas/stats/plm.py
@@ -194,7 +194,7 @@ class PanelOLS(OLS):
     def _convert_x(self, x):
 
         # Converts non-numeric data in x to floats. x_converted is the
-        # DataMatrix with converted values, and x_conversion is a dict that
+        # DataFrame with converted values, and x_conversion is a dict that
         # provides the reverse mapping.  For example, if 'A' was converted to 0
         # for x named 'variety', then x_conversion['variety'][0] is 'A'.
         x_converted = {}
diff --git a/pandas/stats/tests/common.py b/pandas/stats/tests/common.py
index 8466be138..593351811 100644
--- a/pandas/stats/tests/common.py
+++ b/pandas/stats/tests/common.py
@@ -7,7 +7,7 @@ import nose
 
 import numpy as np
 
-from pandas.core.api import DataMatrix, DateRange
+from pandas.core.api import DataFrame, DateRange
 from pandas.util.testing import assert_almost_equal # imported in other tests
 N = 100
 K = 4
@@ -17,17 +17,17 @@ DATE_RANGE = DateRange(start, periods=N)
 
 COLS = ['Col' + c for c in string.ascii_uppercase[:K]]
 
-def makeDataMatrix():
-    data = DataMatrix(np.random.randn(N, K),
+def makeDataFrame():
+    data = DataFrame(np.random.randn(N, K),
                       columns=COLS,
                       index=DATE_RANGE)
 
     return data
 
 def getBasicDatasets():
-    A = makeDataMatrix()
-    B = makeDataMatrix()
-    C = makeDataMatrix()
+    A = makeDataFrame()
+    B = makeDataFrame()
+    C = makeDataFrame()
 
     return A, B, C
 
@@ -93,7 +93,7 @@ class BaseTest(unittest.TestCase):
                    datetime(2000, 1, 2),
                    datetime(2000, 1, 3)]
         y_cols = ['A', 'B']
-        self.panel_y2 = DataMatrix(np.array(y_data), index=y_index,
+        self.panel_y2 = DataFrame(np.array(y_data), index=y_index,
                                    columns=y_cols)
 
         x1_data = [[6, np.NaN],
@@ -105,7 +105,7 @@ class BaseTest(unittest.TestCase):
                     datetime(2000, 1, 3),
                     datetime(2000, 1, 4)]
         x1_cols = ['A', 'B']
-        x1 = DataMatrix(np.array(x1_data), index=x1_index,
+        x1 = DataFrame(np.array(x1_data), index=x1_index,
                         columns=x1_cols)
 
         x2_data = [[13, 14, np.NaN],
@@ -119,7 +119,7 @@ class BaseTest(unittest.TestCase):
                     datetime(2000, 1, 4),
                     datetime(2000, 1, 5)]
         x2_cols = ['C', 'A', 'B']
-        x2 = DataMatrix(np.array(x2_data), index=x2_index,
+        x2 = DataFrame(np.array(x2_data), index=x2_index,
                         columns=x2_cols)
 
         self.panel_x2 = {'x1' : x1, 'x2' : x2}
@@ -130,7 +130,7 @@ class BaseTest(unittest.TestCase):
         y_index = [datetime(2000, 1, 1),
                    datetime(2000, 1, 2)]
         y_cols = ['A', 'B']
-        self.panel_y3 = DataMatrix(np.array(y_data), index=y_index,
+        self.panel_y3 = DataFrame(np.array(y_data), index=y_index,
                                    columns=y_cols)
 
         x1_data = [['A', 'B'],
@@ -138,7 +138,7 @@ class BaseTest(unittest.TestCase):
         x1_index = [datetime(2000, 1, 1),
                     datetime(2000, 1, 2)]
         x1_cols = ['A', 'B']
-        x1 = DataMatrix(np.array(x1_data), index=x1_index,
+        x1 = DataFrame(np.array(x1_data), index=x1_index,
                         columns=x1_cols)
 
         x2_data = [['3.14', '1.59'],
@@ -146,7 +146,7 @@ class BaseTest(unittest.TestCase):
         x2_index = [datetime(2000, 1, 1),
                     datetime(2000, 1, 2)]
         x2_cols = ['A', 'B']
-        x2 = DataMatrix(np.array(x2_data), index=x2_index,
+        x2 = DataFrame(np.array(x2_data), index=x2_index,
                         columns=x2_cols)
 
         self.panel_x3 = {'x1' : x1, 'x2' : x2}
diff --git a/pandas/stats/tests/test_moments.py b/pandas/stats/tests/test_moments.py
index 9efe9817a..87323879d 100644
--- a/pandas/stats/tests/test_moments.py
+++ b/pandas/stats/tests/test_moments.py
@@ -5,7 +5,7 @@ from datetime import datetime
 from numpy.random import randn
 import numpy as np
 
-from pandas.core.api import Series, DataFrame, DataMatrix, DateRange
+from pandas.core.api import Series, DataFrame, DateRange
 from pandas.util.testing import assert_almost_equal
 import pandas.core.datetools as datetools
 import pandas.stats.moments as moments
@@ -29,9 +29,6 @@ class TestMoments(unittest.TestCase):
         self.frame = DataFrame(randn(N, K), index=self.rng,
                                columns=np.arange(K))
 
-        self.matrix = DataMatrix(randn(N, K), index=self.rng,
-                                 columns=np.arange(K))
-
     def test_rolling_sum(self):
         self._check_moment_func(moments.rolling_sum, np.sum)
 
@@ -130,9 +127,6 @@ class TestMoments(unittest.TestCase):
         frame_result = func(self.frame, 50)
         self.assertEquals(type(frame_result), DataFrame)
 
-        matrix_result = func(self.matrix, 50)
-        self.assertEquals(type(matrix_result), DataMatrix)
-
         # check time_rule works
         if has_time_rule:
             win = 25
@@ -143,28 +137,21 @@ class TestMoments(unittest.TestCase):
                                      time_rule='WEEKDAY')
                 frame_result = func(self.frame[::2], win, min_periods=minp,
                                     time_rule='WEEKDAY')
-                matrix_result = func(self.matrix[::2], win, min_periods=minp,
-                                     time_rule='WEEKDAY')
             else:
                 series_result = func(self.series[::2], win, time_rule='WEEKDAY')
                 frame_result = func(self.frame[::2], win, time_rule='WEEKDAY')
-                matrix_result = func(self.matrix[::2], win, time_rule='WEEKDAY')
 
             last_date = series_result.index[-1]
             prev_date = last_date - 24 * datetools.bday
 
             trunc_series = self.series[::2].truncate(prev_date, last_date)
             trunc_frame = self.frame[::2].truncate(prev_date, last_date)
-            trunc_matrix = self.matrix[::2].truncate(prev_date, last_date)
 
             assert_almost_equal(series_result[-1], static_comp(trunc_series))
 
             assert_almost_equal(frame_result.xs(last_date),
                                 trunc_frame.apply(static_comp))
 
-            assert_almost_equal(matrix_result.xs(last_date),
-                                trunc_matrix.apply(static_comp))
-
     def test_ewma(self):
         self._check_ew(moments.ewma)
 
@@ -207,8 +194,6 @@ class TestMoments(unittest.TestCase):
         self.assert_(isinstance(series_result, Series))
         frame_result = func(self.frame, com=10)
         self.assertEquals(type(frame_result), DataFrame)
-        matrix_result = func(self.matrix, com=10)
-        self.assertEquals(type(matrix_result), DataMatrix)
 
     # binary moments
     def test_rolling_cov(self):
diff --git a/pandas/stats/tests/test_ols.py b/pandas/stats/tests/test_ols.py
index a845c8fb8..d4291441b 100644
--- a/pandas/stats/tests/test_ols.py
+++ b/pandas/stats/tests/test_ols.py
@@ -11,7 +11,7 @@ import unittest
 import numpy as np
 
 from pandas.core.panel import LongPanel
-from pandas.core.api import DataMatrix, Index, Series
+from pandas.core.api import DataFrame, Index, Series
 from pandas.stats.api import ols
 from pandas.stats.plm import NonPooledPanelOLS
 from pandas.util.testing import (assert_almost_equal, assert_series_equal,
@@ -64,8 +64,8 @@ class TestOLS(BaseTest):
     def checkDataSet(self, dataset, start=None, end=None, skip_moving=False):
         exog = dataset.exog[start : end]
         endog = dataset.endog[start : end]
-        x = DataMatrix(exog, index=np.arange(exog.shape[0]),
-                       columns=np.arange(exog.shape[1]))
+        x = DataFrame(exog, index=np.arange(exog.shape[0]),
+                      columns=np.arange(exog.shape[1]))
         y = Series(endog, index=np.arange(len(endog)))
 
         self.checkOLS(exog, endog, x, y)
@@ -250,7 +250,7 @@ class TestPanelOLS(BaseTest):
                  datetime(2000, 1, 4),
                  datetime(2000, 1, 5)]
         cols = ['A', 'B']
-        weights = DataMatrix(data, index=index, columns=cols)
+        weights = DataFrame(data, index=index, columns=cols)
 
         result = ols(y=self.panel_y2, x=self.panel_x2, weights=weights)
 
@@ -380,8 +380,8 @@ class TestPanelOLS(BaseTest):
         cols = self.panel_y.columns
 
 
-        weights = DataMatrix(np.random.standard_normal((len(idx), len(cols))),
-                             index=idx, columns=cols)
+        weights = DataFrame(np.random.standard_normal((len(idx), len(cols))),
+                            index=idx, columns=cols)
         self.checkMovingOLS(self.panel_x,
                             self.panel_y, weights=weights)
 
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 7e5d9e8d3..ab9228364 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -185,14 +185,6 @@ def makeTimeDataFrame():
     data = getTimeSeriesData()
     return DataFrame(data)
 
-def makeDataMatrix():
-    data = getSeriesData()
-    return DataFrame(data)
-
-def makeTimeDataMatrix():
-    data = getTimeSeriesData()
-    return DataFrame(data)
-
 def makeWidePanel():
     cols = ['Item' + c for c in string.ascii_uppercase[:K - 1]]
     data = dict((c, makeTimeDataFrame()) for c in cols)
