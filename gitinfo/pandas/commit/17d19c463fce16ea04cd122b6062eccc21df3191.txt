commit 17d19c463fce16ea04cd122b6062eccc21df3191
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Tue Dec 31 01:07:23 2019 -0800

    CLN: assorted cleanups (#30575)

diff --git a/doc/source/whatsnew/v1.0.0.rst b/doc/source/whatsnew/v1.0.0.rst
index 8755abe64..77c4ed616 100755
--- a/doc/source/whatsnew/v1.0.0.rst
+++ b/doc/source/whatsnew/v1.0.0.rst
@@ -794,6 +794,7 @@ Datetimelike
 - Bug in :class:`DatetimeIndex` addition when adding a non-optimized :class:`DateOffset` incorrectly dropping timezone information (:issue:`30336`)
 - Bug in :meth:`DataFrame.drop` where attempting to drop non-existent values from a DatetimeIndex would yield a confusing error message (:issue:`30399`)
 - Bug in :meth:`DataFrame.append` would remove the timezone-awareness of new data (:issue:`30238`)
+- Bug in :meth:`Series.cummin` and :meth:`Series.cummax` with timezone-aware dtype incorrectly dropping its timezone (:issue:`15553`)
 - Bug in :class:`DatetimeArray`, :class:`TimedeltaArray`, and :class:`PeriodArray` where inplace addition and subtraction did not actually operate inplace (:issue:`24115`)
 
 Timedelta
diff --git a/pandas/_config/config.py b/pandas/_config/config.py
index 6844df495..0a3009f74 100644
--- a/pandas/_config/config.py
+++ b/pandas/_config/config.py
@@ -197,7 +197,7 @@ class DictWrapper:
         else:
             raise OptionError("You can only set the value of existing options")
 
-    def __getattr__(self, key):
+    def __getattr__(self, key: str):
         prefix = object.__getattribute__(self, "prefix")
         if prefix:
             prefix += "."
diff --git a/pandas/compat/numpy/function.py b/pandas/compat/numpy/function.py
index fffe09a74..7158f251a 100644
--- a/pandas/compat/numpy/function.py
+++ b/pandas/compat/numpy/function.py
@@ -169,13 +169,6 @@ def validate_clip_with_axis(axis, args, kwargs):
     return axis
 
 
-COMPRESS_DEFAULTS: "OrderedDict[str, Any]" = OrderedDict()
-COMPRESS_DEFAULTS["axis"] = None
-COMPRESS_DEFAULTS["out"] = None
-validate_compress = CompatValidator(
-    COMPRESS_DEFAULTS, fname="compress", method="both", max_fname_arg_count=1
-)
-
 CUM_FUNC_DEFAULTS: "OrderedDict[str, Any]" = OrderedDict()
 CUM_FUNC_DEFAULTS["dtype"] = None
 CUM_FUNC_DEFAULTS["out"] = None
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index ff411c348..2b108d399 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -11120,6 +11120,7 @@ def _make_cum_function(
         def na_accum_func(blk_values):
             # We will be applying this function to block values
             if blk_values.dtype.kind in ["m", "M"]:
+                # GH#30460, GH#29058
                 # numpy 1.18 started sorting NaTs at the end instead of beginning,
                 #  so we need to work around to maintain backwards-consistency.
                 orig_dtype = blk_values.dtype
diff --git a/pandas/core/groupby/groupby.py b/pandas/core/groupby/groupby.py
index 6c7c3c1a5..8ff055ff4 100644
--- a/pandas/core/groupby/groupby.py
+++ b/pandas/core/groupby/groupby.py
@@ -325,7 +325,7 @@ class GroupByPlot(PandasObject):
         f.__name__ = "plot"
         return self._groupby.apply(f)
 
-    def __getattr__(self, name):
+    def __getattr__(self, name: str):
         def attr(*args, **kwargs):
             def f(self):
                 return getattr(self.plot, name)(*args, **kwargs)
@@ -570,7 +570,7 @@ class _GroupBy(PandasObject, SelectionMixin):
     def _dir_additions(self):
         return self.obj._dir_additions() | self._apply_whitelist
 
-    def __getattr__(self, attr):
+    def __getattr__(self, attr: str):
         if attr in self._internal_names_set:
             return object.__getattribute__(self, attr)
         if attr in self.obj:
diff --git a/pandas/core/resample.py b/pandas/core/resample.py
index 9ae0aa930..931653b63 100644
--- a/pandas/core/resample.py
+++ b/pandas/core/resample.py
@@ -96,7 +96,7 @@ class Resampler(_GroupBy, ShallowMixin):
         )
         return f"{type(self).__name__} [{', '.join(attrs)}]"
 
-    def __getattr__(self, attr):
+    def __getattr__(self, attr: str):
         if attr in self._internal_names_set:
             return object.__getattribute__(self, attr)
         if attr in self._attributes:
@@ -131,7 +131,7 @@ class Resampler(_GroupBy, ShallowMixin):
         return self.groupby.ax
 
     @property
-    def _typ(self):
+    def _typ(self) -> str:
         """
         Masquerade for compat as a Series or a DataFrame.
         """
@@ -140,7 +140,7 @@ class Resampler(_GroupBy, ShallowMixin):
         return "dataframe"
 
     @property
-    def _from_selection(self):
+    def _from_selection(self) -> bool:
         """
         Is the resampling from a DataFrame column or MultiIndex level.
         """
@@ -316,7 +316,7 @@ class Resampler(_GroupBy, ShallowMixin):
     def _upsample(self, f, limit=None, fill_value=None):
         raise AbstractMethodError(self)
 
-    def _gotitem(self, key, ndim, subset=None):
+    def _gotitem(self, key, ndim: int, subset=None):
         """
         Sub-classes to define. Return a sliced object.
 
@@ -1407,7 +1407,7 @@ class TimeGrouper(Grouper):
             f"but got an instance of '{type(ax).__name__}'"
         )
 
-    def _get_grouper(self, obj, validate=True):
+    def _get_grouper(self, obj, validate: bool = True):
         # create the resampler and return our binner
         r = self._get_resampler(obj)
         r._set_binner()
diff --git a/pandas/core/reshape/concat.py b/pandas/core/reshape/concat.py
index cea70012b..a3d9dbfba 100644
--- a/pandas/core/reshape/concat.py
+++ b/pandas/core/reshape/concat.py
@@ -472,9 +472,9 @@ class _Concatenator:
         else:
             return self.objs[0].ndim
 
-    def _get_new_axes(self):
+    def _get_new_axes(self) -> List[Index]:
         ndim = self._get_result_dim()
-        new_axes = [None] * ndim
+        new_axes: List = [None] * ndim
 
         for i in range(ndim):
             if i == self.axis:
diff --git a/pandas/core/window/rolling.py b/pandas/core/window/rolling.py
index 5b0fbbb35..176406f95 100644
--- a/pandas/core/window/rolling.py
+++ b/pandas/core/window/rolling.py
@@ -184,7 +184,7 @@ class _Window(PandasObject, ShallowMixin, SelectionMixin):
                 self._selection = key
         return self
 
-    def __getattr__(self, attr):
+    def __getattr__(self, attr: str):
         if attr in self._internal_names_set:
             return object.__getattribute__(self, attr)
         if attr in self.obj:
diff --git a/pandas/tests/indexes/datetimes/test_constructors.py b/pandas/tests/indexes/datetimes/test_constructors.py
index 58ab44fba..2f1fa3ce6 100644
--- a/pandas/tests/indexes/datetimes/test_constructors.py
+++ b/pandas/tests/indexes/datetimes/test_constructors.py
@@ -711,7 +711,6 @@ class TestDatetimeIndex:
         expected = DatetimeIndex([ts[0].to_pydatetime(), ts[1].to_pydatetime()])
         tm.assert_index_equal(result, expected)
 
-    # TODO(GH-24559): Remove the xfail for the tz-aware case.
     @pytest.mark.parametrize("klass", [Index, DatetimeIndex])
     @pytest.mark.parametrize("box", [np.array, partial(np.array, dtype=object), list])
     @pytest.mark.parametrize(
diff --git a/pandas/util/_depr_module.py b/pandas/util/_depr_module.py
index 5733663dd..5694ca24a 100644
--- a/pandas/util/_depr_module.py
+++ b/pandas/util/_depr_module.py
@@ -46,7 +46,7 @@ class _DeprecatedModule:
 
     __str__ = __repr__
 
-    def __getattr__(self, name):
+    def __getattr__(self, name: str):
         if name in self.self_dir:
             return object.__getattribute__(self, name)
 
