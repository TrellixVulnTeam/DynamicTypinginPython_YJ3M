commit dbf71f91584d19e0875781ded5c1c5671ff55ac7
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Apr 12 17:42:06 2012 -0400

    BUG: fix broken time_rule usage in legacy DateRange, close #1036

diff --git a/pandas/core/daterange.py b/pandas/core/daterange.py
index f8f2f5294..563b0666c 100644
--- a/pandas/core/daterange.py
+++ b/pandas/core/daterange.py
@@ -21,9 +21,9 @@ class DateRange(Index):
 
         # use old mapping
         if time_rule is not None:
-            offset = datetools._offsetMap[time_rule]
+            offset = datetools._offset_map[time_rule]
         elif 'timeRule' in kwds and kwds['timeRule'] is not None:
-            offset = datetools._offsetMap[kwds['timeRule']]
+            offset = datetools._offset_map[kwds['timeRule']]
 
         return DatetimeIndex(start=start, end=end,
                              periods=periods, offset=offset,
diff --git a/pandas/tests/test_timeseries.py b/pandas/tests/test_timeseries.py
index 2e3851fa9..d440214f2 100644
--- a/pandas/tests/test_timeseries.py
+++ b/pandas/tests/test_timeseries.py
@@ -1,6 +1,7 @@
 # pylint: disable-msg=E1101,W0612
 
 from datetime import datetime
+import sys
 import unittest
 
 import nose
@@ -12,6 +13,8 @@ from pandas import (Index, Series, TimeSeries, DataFrame, isnull,
 
 from pandas import DatetimeIndex
 
+from pandas.core.daterange import DateRange
+
 from pandas.util.testing import assert_series_equal, assert_almost_equal
 import pandas.util.testing as tm
 
@@ -389,6 +392,25 @@ class TestLegacyInteraction(unittest.TestCase):
         self.assert_(result.equals(expected))
 
 
+class TestDateRangeCompat(unittest.TestCase):
+
+    def setUp(self):
+        from StringIO import StringIO
+        # suppress deprecation warnings
+        sys.stderr = StringIO()
+
+    def test_time_rule(self):
+        result = DateRange('1/1/2000', '1/30/2000', time_rule='WEEKDAY')
+        result2 = DateRange('1/1/2000', '1/30/2000', timeRule='WEEKDAY')
+        expected = date_range('1/1/2000', '1/30/2000', freq='B')
+
+        self.assert_(result.equals(expected))
+        self.assert_(result2.equals(expected))
+
+    def tearDown(self):
+        sys.stderr = sys.__stderr__
+
+
 class TestDatetime64(unittest.TestCase):
 
     def setUp(self):
