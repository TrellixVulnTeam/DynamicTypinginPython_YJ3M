commit 3ce46e43c0ea4f6c31d815cb738631328077796b
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jul 18 12:01:03 2011 -0400

    ENH: make DataFrame a bit more amenable to subclassing

diff --git a/RELEASE.rst b/RELEASE.rst
index 104c1ddc0..576c12a6d 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -46,6 +46,8 @@ Release notes
 * `Series` arithmetic methods with optional fill_value for missing data,
   e.g. a.add(b, fill_value=0). If a location is missing for both it will still
   be missing in the result though.
+* fill_value option has been added to `DataFrame`.{add, mul, sub, div} methods
+  similar to `Series`
 * Boolean indexing with `DataFrame` objects: data[data > 0.1] = 0.1
 * `pytz` / tzinfo support in `DateRange`
   * `tz_localize`, `tz_normalize`, and `tz_validate` methods added
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 58aa1c8a5..2d4f96409 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -217,11 +217,11 @@ class DataFrame(PandasGeneric):
         -------
         casted : DataFrame
         """
-        return DataFrame(self._data, dtype=dtype)
+        return type(self)(self._data, dtype=dtype)
 
     @property
     def _constructor(self):
-        return DataFrame
+        return type(self)
 
     #----------------------------------------------------------------------
     # Class behavior
@@ -269,7 +269,7 @@ class DataFrame(PandasGeneric):
         """
         Make a copy of this DataFrame
         """
-        return DataFrame(self._data.copy())
+        return type(self)(self._data.copy())
 
     #----------------------------------------------------------------------
     # Arithmetic methods
@@ -566,8 +566,8 @@ class DataFrame(PandasGeneric):
         Returns a DataFrame with the rows/columns switched. Copy of data is not
         made by default
         """
-        return DataFrame(data=self.values.T, index=self.columns,
-                         columns=self.index, copy=False)
+        return type(self)(data=self.values.T, index=self.columns,
+                          columns=self.index, copy=False)
     T = property(transpose)
 
     #----------------------------------------------------------------------
@@ -643,8 +643,8 @@ class DataFrame(PandasGeneric):
         return self.values
 
     def __array_wrap__(self, result):
-        return DataFrame(result, index=self.index, columns=self.columns,
-                         copy=False)
+        return type(self)(result, index=self.index, columns=self.columns,
+                          copy=False)
 
     #----------------------------------------------------------------------
     # getitem/setitem related
@@ -674,7 +674,7 @@ class DataFrame(PandasGeneric):
         """
         if isinstance(item, slice):
             new_data = self._data.get_slice(item, axis=1)
-            return DataFrame(new_data)
+            return type(self)(new_data)
         elif isinstance(item, np.ndarray):
             if len(item) != len(self.index):
                 raise ValueError('Item wrong length %d instead of %d!' %
@@ -838,11 +838,11 @@ class DataFrame(PandasGeneric):
         if new_index is self.index:
             return self.copy()
         new_data = self._data.reindex_axis(new_index, method, axis=1)
-        return DataFrame(new_data)
+        return type(self)(new_data)
 
     def _reindex_columns(self, new_columns):
         new_data = self._data.reindex_items(new_columns)
-        return DataFrame(new_data)
+        return type(self)(new_data)
 
     def reindex_like(self, other, method=None):
         """
@@ -1040,14 +1040,14 @@ class DataFrame(PandasGeneric):
             series = self._series
             for col, s in series.iteritems():
                 result[col] = s.fillna(method=method, value=value)
-            return DataFrame(result, index=self.index, columns=self.columns)
+            return type(self)(result, index=self.index, columns=self.columns)
         else:
             # Float type values
             if len(self.columns) == 0:
                 return self
 
             new_data = self._data.fillna(value)
-            return DataFrame(new_data, index=self.index, columns=self.columns)
+            return type(self)(new_data, index=self.index, columns=self.columns)
 
     #----------------------------------------------------------------------
     # Rename
@@ -1123,7 +1123,7 @@ class DataFrame(PandasGeneric):
         # some shortcuts
         if fill_value is None:
             if not self and not other:
-                return DataFrame(index=new_index)
+                return type(self)(index=new_index)
             elif not self:
                 return other * nan
             elif not other:
@@ -1156,8 +1156,8 @@ class DataFrame(PandasGeneric):
             other_vals[other_mask & mask] = fill_value
 
         result = func(this_vals, other_vals)
-        return DataFrame(result, index=new_index, columns=new_columns,
-                         copy=False)
+        return type(self)(result, index=new_index, columns=new_columns,
+                          copy=False)
 
     def _indexed_same(self, other):
         same_index = self.index.equals(other.index)
@@ -1194,8 +1194,8 @@ class DataFrame(PandasGeneric):
         if fill_value is not None:
             raise NotImplementedError
 
-        return DataFrame(func(values.T, other_vals).T, index=new_index,
-                         columns=self.columns, copy=False)
+        return type(self)(func(values.T, other_vals).T, index=new_index,
+                          columns=self.columns, copy=False)
 
     def _combine_match_columns(self, other, func, fill_value=None):
         newCols = self.columns.union(other.index)
@@ -1207,15 +1207,15 @@ class DataFrame(PandasGeneric):
         if fill_value is not None:
             raise NotImplementedError
 
-        return DataFrame(func(this.values, other), index=self.index,
-                         columns=newCols, copy=False)
+        return type(self)(func(this.values, other), index=self.index,
+                          columns=newCols, copy=False)
 
     def _combine_const(self, other, func):
         if not self:
             return self
 
-        return DataFrame(func(self.values, other), index=self.index,
-                         columns=self.columns, copy=False)
+        return type(self)(func(self.values, other), index=self.index,
+                          columns=self.columns, copy=False)
 
     def _compare_frame(self, other, func):
         if not self._indexed_same(other):
@@ -1480,7 +1480,7 @@ class DataFrame(PandasGeneric):
             new_data = self._data.copy()
             new_data.axes[1] = self.index.shift(periods, offset)
 
-        return DataFrame(new_data)
+        return type(self)(new_data)
 
     def _shift_indexer(self, periods):
         # small reusable utility
@@ -1546,8 +1546,8 @@ class DataFrame(PandasGeneric):
 
         if isinstance(func, np.ufunc):
             results = func(self.values)
-            return DataFrame(data=results, index=self.index,
-                             columns=self.columns, copy=False)
+            return type(self)(data=results, index=self.index,
+                              columns=self.columns, copy=False)
         else:
             if not broadcast:
                 return self._apply_standard(func, axis)
@@ -1703,7 +1703,7 @@ class DataFrame(PandasGeneric):
             raise Exception('%s column not contained in this frame!' % on)
 
         new_data = self._data.join_on(other._data, self[on], axis=1)
-        return DataFrame(new_data)
+        return type(self)(new_data)
 
     def _join_index(self, other, how):
         join_index = self._get_join_index(other, how)
@@ -1713,7 +1713,7 @@ class DataFrame(PandasGeneric):
         # merge blocks
         merged_data = this_data.merge(other_data)
         assert(merged_data.axes[1] is join_index) # maybe unnecessary
-        return DataFrame(merged_data)
+        return type(self)(merged_data)
 
     def _get_join_index(self, other, how):
         if how == 'left':
@@ -1808,7 +1808,7 @@ class DataFrame(PandasGeneric):
                         correl[i, j] = c
                         correl[j, i] = c
 
-        return DataFrame(correl, index=cols, columns=cols)
+        return type(self)(correl, index=cols, columns=cols)
 
     def corrwith(self, other, axis=0, drop=False):
         """
@@ -1878,7 +1878,7 @@ class DataFrame(PandasGeneric):
                 tmp.quantile(.1), tmp.median(),
                 tmp.quantile(.9), tmp.max()]
 
-        return DataFrame(data, index=cols_destat, columns=cols)
+        return type(self)(data, index=cols_destat, columns=cols)
 
     #----------------------------------------------------------------------
     # ndarray-like stats methods
@@ -1981,8 +1981,8 @@ class DataFrame(PandasGeneric):
             result[-has_obs] = np.nan
         else:
             result = y.cumsum(axis)
-        return DataFrame(result, index=self.index, columns=self.columns,
-                         copy=False)
+        return type(self)(result, index=self.index, columns=self.columns,
+                          copy=False)
 
     def min(self, axis=0):
         """
