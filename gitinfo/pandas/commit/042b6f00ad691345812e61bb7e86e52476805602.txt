commit 042b6f00ad691345812e61bb7e86e52476805602
Author: Kernc <kerncece@gmail.com>
Date:   Fri Aug 26 15:58:24 2016 -0400

    BUG: yield correct Series subclass in df.iterrows() (#13977)
    
    closes #13977
    
    Author: Kernc <kerncece@gmail.com>
    
    Closes #13978 from kernc/iterrows-with-constructor-sliced and squashes the following commits:
    
    9aaac80 [Kernc] BUG: yield correct Series subclass in df.iterrows() (#13977)
    f8f4230 [Kernc] DOC: tm.assert_series_equal() fix docstring default values

diff --git a/doc/source/whatsnew/v0.19.0.txt b/doc/source/whatsnew/v0.19.0.txt
index 2811e3112..4a2468012 100644
--- a/doc/source/whatsnew/v0.19.0.txt
+++ b/doc/source/whatsnew/v0.19.0.txt
@@ -1209,6 +1209,7 @@ Bug Fixes
 - Bug in ``groupby`` where ``apply`` returns different result depending on whether first result is ``None`` or not (:issue:`12824`)
 - Bug in ``groupby(..).nth()`` where the group key is included inconsistently if called after ``.head()/.tail()`` (:issue:`12839`)
 - Bug in ``.to_html``, ``.to_latex`` and ``.to_string`` silently ignore custom datetime formatter passed through the ``formatters`` key word (:issue:`10690`)
+- Bug in ``DataFrame.iterrows()``, not yielding a ``Series`` subclasse if defined (:issue:`13977`)
 
 - Bug in ``pd.to_numeric`` when ``errors='coerce'`` and input contains non-hashable objects (:issue:`13324`)
 - Bug in invalid ``Timedelta`` arithmetic and comparison may raise ``ValueError`` rather than ``TypeError`` (:issue:`13624`)
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 501f4e443..205af5c80 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -694,8 +694,9 @@ class DataFrame(NDFrame):
 
         """
         columns = self.columns
+        klass = self._constructor_sliced
         for k, v in zip(self.index, self.values):
-            s = Series(v, index=columns, name=k)
+            s = klass(v, index=columns, name=k)
             yield k, s
 
     def itertuples(self, index=True, name="Pandas"):
diff --git a/pandas/tests/frame/test_subclass.py b/pandas/tests/frame/test_subclass.py
index 0e0ee75a3..6a57f67a6 100644
--- a/pandas/tests/frame/test_subclass.py
+++ b/pandas/tests/frame/test_subclass.py
@@ -211,6 +211,13 @@ class TestDataFrameSubclassing(tm.TestCase, TestData):
         tm.assertIsInstance(res2, tm.SubclassedDataFrame)
         tm.assert_frame_equal(res2, exp1)
 
+    def test_subclass_iterrows(self):
+        # GH 13977
+        df = tm.SubclassedDataFrame({'a': [1]})
+        for i, row in df.iterrows():
+            tm.assertIsInstance(row, tm.SubclassedSeries)
+            tm.assert_series_equal(row, df.loc[i])
+
     def test_subclass_sparse_slice(self):
         rows = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]
         ssdf = tm.SubclassedSparseDataFrame(rows)
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 2d1d88b69..94de8cb03 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -1104,10 +1104,10 @@ def assert_series_equal(left, right, check_dtype=True,
     right : Series
     check_dtype : bool, default True
         Whether to check the Series dtype is identical.
-    check_index_type : bool / string {'equiv'}, default False
+    check_index_type : bool / string {'equiv'}, default 'equiv'
         Whether to check the Index class, dtype and inferred_type
         are identical.
-    check_series_type : bool, default False
+    check_series_type : bool, default True
         Whether to check the Series class is identical.
     check_less_precise : bool or int, default False
         Specify comparison precision. Only used when check_exact is False.
