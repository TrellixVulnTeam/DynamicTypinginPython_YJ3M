commit 93f5e3a0c11c82ad6b7365e83637d133c1a6e8a5
Author: Jeff Reback <jeff@reback.net>
Date:   Wed Feb 15 12:59:11 2017 -0500

    STYLE: flake8 upgraded to 3.3 on conda (#15412)
    
    fixes for E305, 2 blank lines after a class definition

diff --git a/pandas/compat/numpy/__init__.py b/pandas/compat/numpy/__init__.py
index bfd770d7a..4a9a2647e 100644
--- a/pandas/compat/numpy/__init__.py
+++ b/pandas/compat/numpy/__init__.py
@@ -67,6 +67,7 @@ def np_array_datetime64_compat(arr, *args, **kwargs):
 
     return np.array(arr, *args, **kwargs)
 
+
 __all__ = ['np',
            '_np_version_under1p8',
            '_np_version_under1p9',
diff --git a/pandas/compat/numpy/function.py b/pandas/compat/numpy/function.py
index eb9e9ecc3..4053994ef 100644
--- a/pandas/compat/numpy/function.py
+++ b/pandas/compat/numpy/function.py
@@ -55,6 +55,7 @@ class CompatValidator(object):
             raise ValueError("invalid validation method "
                              "'{method}'".format(method=method))
 
+
 ARGMINMAX_DEFAULTS = dict(out=None)
 validate_argmin = CompatValidator(ARGMINMAX_DEFAULTS, fname='argmin',
                                   method='both', max_fname_arg_count=1)
@@ -97,6 +98,7 @@ def validate_argmax_with_skipna(skipna, args, kwargs):
     validate_argmax(args, kwargs)
     return skipna
 
+
 ARGSORT_DEFAULTS = OrderedDict()
 ARGSORT_DEFAULTS['axis'] = -1
 ARGSORT_DEFAULTS['kind'] = 'quicksort'
@@ -121,6 +123,7 @@ def validate_argsort_with_ascending(ascending, args, kwargs):
     validate_argsort(args, kwargs, max_fname_arg_count=1)
     return ascending
 
+
 CLIP_DEFAULTS = dict(out=None)
 validate_clip = CompatValidator(CLIP_DEFAULTS, fname='clip',
                                 method='both', max_fname_arg_count=3)
@@ -141,6 +144,7 @@ def validate_clip_with_axis(axis, args, kwargs):
     validate_clip(args, kwargs)
     return axis
 
+
 COMPRESS_DEFAULTS = OrderedDict()
 COMPRESS_DEFAULTS['axis'] = None
 COMPRESS_DEFAULTS['out'] = None
@@ -170,6 +174,7 @@ def validate_cum_func_with_skipna(skipna, args, kwargs, name):
     validate_cum_func(args, kwargs, fname=name)
     return skipna
 
+
 LOGICAL_FUNC_DEFAULTS = dict(out=None)
 validate_logical_func = CompatValidator(LOGICAL_FUNC_DEFAULTS, method='kwargs')
 
@@ -236,6 +241,7 @@ def validate_take_with_convert(convert, args, kwargs):
     validate_take(args, kwargs, max_fname_arg_count=3, method='both')
     return convert
 
+
 TRANSPOSE_DEFAULTS = dict(axes=None)
 validate_transpose = CompatValidator(TRANSPOSE_DEFAULTS, fname='transpose',
                                      method='both', max_fname_arg_count=0)
@@ -318,6 +324,7 @@ def validate_groupby_func(name, args, kwargs, allowed=None):
             "with groupby. Use .groupby(...)."
             "{func}() instead".format(func=name)))
 
+
 RESAMPLER_NUMPY_OPS = ('min', 'max', 'sum', 'prod',
                        'mean', 'std', 'var')
 
diff --git a/pandas/computation/expr.py b/pandas/computation/expr.py
index f1cf21075..a78228717 100644
--- a/pandas/computation/expr.py
+++ b/pandas/computation/expr.py
@@ -669,6 +669,7 @@ class BaseExprVisitor(ast.NodeVisitor):
         operands = node.values
         return reduce(visitor, operands)
 
+
 # ast.Call signature changed on 3.5,
 # conditionally change which methods is named
 # visit_Call depending on Python version, #11097
diff --git a/pandas/core/algorithms.py b/pandas/core/algorithms.py
index c922ac21e..4ae46fe33 100644
--- a/pandas/core/algorithms.py
+++ b/pandas/core/algorithms.py
@@ -926,6 +926,7 @@ def _finalize_nsmallest(arr, kth_val, n, keep, narr):
     else:
         return inds
 
+
 _dtype_map = {'datetime64[ns]': 'int64', 'timedelta64[ns]': 'int64'}
 
 
@@ -959,6 +960,7 @@ def _hashtable_algo(f, values, return_dtype=None):
     # use Object
     return f(htable.PyObjectHashTable, _ensure_object)
 
+
 _hashtables = {
     'float64': (htable.Float64HashTable, htable.Float64Vector),
     'uint64': (htable.UInt64HashTable, htable.UInt64Vector),
diff --git a/pandas/core/config.py b/pandas/core/config.py
index ed63c865e..1c0eb60b8 100644
--- a/pandas/core/config.py
+++ b/pandas/core/config.py
@@ -804,6 +804,7 @@ def is_one_of_factory(legal_values):
 
     return inner
 
+
 # common type validators, for convenience
 # usage: register_option(... , validator = is_int)
 is_int = is_type_factory(int)
diff --git a/pandas/core/config_init.py b/pandas/core/config_init.py
index fe47391c9..d3db633f3 100644
--- a/pandas/core/config_init.py
+++ b/pandas/core/config_init.py
@@ -278,6 +278,7 @@ def mpl_style_cb(key):
 
     return val
 
+
 with cf.config_prefix('display'):
     cf.register_option('precision', 6, pc_precision_doc, validator=is_int)
     cf.register_option('float_format', None, float_format_doc,
@@ -380,6 +381,7 @@ def use_inf_as_null_cb(key):
     from pandas.types.missing import _use_inf_as_null
     _use_inf_as_null(key)
 
+
 with cf.config_prefix('mode'):
     cf.register_option('use_inf_as_null', False, use_inf_as_null_doc,
                        cb=use_inf_as_null_cb)
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 9c66f6dbb..f7c306ea7 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -5741,9 +5741,9 @@ def _from_nested_dict(data):
 def _put_str(s, space):
     return ('%s' % s)[:space].ljust(space)
 
+
 # ----------------------------------------------------------------------
 # Add plotting methods to DataFrame
-
 DataFrame.plot = base.AccessorProperty(gfx.FramePlotMethods,
                                        gfx.FramePlotMethods)
 DataFrame.hist = gfx.hist_frame
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 6bb2d1c47..66510a770 100755
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -36,6 +36,7 @@ def get_indexers_list():
         ('iat', _iAtIndexer),
     ]
 
+
 # "null slice"
 _NS = slice(None, None)
 
@@ -1850,6 +1851,7 @@ class _iAtIndexer(_ScalarAccessIndexer):
                                  "indexers")
         return key
 
+
 # 32-bit floating point machine epsilon
 _eps = np.finfo('f4').eps
 
diff --git a/pandas/formats/format.py b/pandas/formats/format.py
index 1a7a06199..6b235b5e1 100644
--- a/pandas/formats/format.py
+++ b/pandas/formats/format.py
@@ -2479,9 +2479,9 @@ def _has_names(index):
     else:
         return index.name is not None
 
+
 # -----------------------------------------------------------------------------
 # Global formatting options
-
 _initial_defencoding = None
 
 
diff --git a/pandas/indexes/numeric.py b/pandas/indexes/numeric.py
index 0b9b33773..00ddf5b0c 100644
--- a/pandas/indexes/numeric.py
+++ b/pandas/indexes/numeric.py
@@ -159,6 +159,7 @@ class Int64Index(NumericIndex):
                 raise TypeError('Unsafe NumPy casting, you must '
                                 'explicitly cast')
 
+
 Int64Index._add_numeric_methods()
 Int64Index._add_logical_methods()
 
@@ -238,6 +239,7 @@ class UInt64Index(NumericIndex):
                 raise TypeError('Unsafe NumPy casting, you must '
                                 'explicitly cast')
 
+
 UInt64Index._add_numeric_methods()
 UInt64Index._add_logical_methods()
 
@@ -391,5 +393,6 @@ class Float64Index(NumericIndex):
         return lib.ismember_nans(np.array(self), value_set,
                                  isnull(list(value_set)).any())
 
+
 Float64Index._add_numeric_methods()
 Float64Index._add_logical_methods_disabled()
diff --git a/pandas/indexes/range.py b/pandas/indexes/range.py
index 7a7902b50..cc78361f8 100644
--- a/pandas/indexes/range.py
+++ b/pandas/indexes/range.py
@@ -652,5 +652,6 @@ class RangeIndex(Int64Index):
                 reversed=True,
                 step=operator.div)
 
+
 RangeIndex._add_numeric_methods()
 RangeIndex._add_logical_methods()
diff --git a/pandas/io/common.py b/pandas/io/common.py
index b24acb256..74c51b74c 100644
--- a/pandas/io/common.py
+++ b/pandas/io/common.py
@@ -75,6 +75,7 @@ class ParserError(ValueError):
     """
     pass
 
+
 # gh-12665: Alias for now and remove later.
 CParserError = ParserError
 
@@ -116,6 +117,7 @@ class BaseIterator(object):
     def __next__(self):
         raise AbstractMethodError(self)
 
+
 if not compat.PY3:
     BaseIterator.next = lambda self: self.__next__()
 
diff --git a/pandas/io/excel.py b/pandas/io/excel.py
index f34ba65cf..282198321 100644
--- a/pandas/io/excel.py
+++ b/pandas/io/excel.py
@@ -886,12 +886,14 @@ class _Openpyxl1Writer(ExcelWriter):
 
         return xls_style
 
+
 register_writer(_Openpyxl1Writer)
 
 
 class _OpenpyxlWriter(_Openpyxl1Writer):
     engine = 'openpyxl'
 
+
 register_writer(_OpenpyxlWriter)
 
 
@@ -1368,6 +1370,7 @@ class _Openpyxl22Writer(_Openpyxl20Writer):
                             for k, v in style_kwargs.items():
                                 setattr(xcell, k, v)
 
+
 register_writer(_Openpyxl22Writer)
 
 
@@ -1491,6 +1494,7 @@ class _XlwtWriter(ExcelWriter):
 
         return style
 
+
 register_writer(_XlwtWriter)
 
 
@@ -1603,4 +1607,5 @@ class _XlsxWriter(ExcelWriter):
 
         return xl_format
 
+
 register_writer(_XlsxWriter)
diff --git a/pandas/io/gbq.py b/pandas/io/gbq.py
index 0ffb6b4bf..a55588669 100644
--- a/pandas/io/gbq.py
+++ b/pandas/io/gbq.py
@@ -58,6 +58,7 @@ def _test_google_api_imports():
         raise ImportError("Missing module required for Google BigQuery "
                           "support: {0}".format(str(e)))
 
+
 logger = logging.getLogger('pandas.io.gbq')
 logger.setLevel(logging.ERROR)
 
diff --git a/pandas/io/packers.py b/pandas/io/packers.py
index ab44e46c9..3f4be6ad4 100644
--- a/pandas/io/packers.py
+++ b/pandas/io/packers.py
@@ -217,6 +217,7 @@ def read_msgpack(path_or_buf, encoding='utf-8', iterator=False, **kwargs):
 
     raise ValueError('path_or_buf needs to be a string file path or file-like')
 
+
 dtype_dict = {21: np.dtype('M8[ns]'),
               u('datetime64[ns]'): np.dtype('M8[ns]'),
               u('datetime64[us]'): np.dtype('M8[us]'),
@@ -237,6 +238,7 @@ def dtype_for(t):
         return dtype_dict[t]
     return np.typeDict.get(t, t)
 
+
 c2f_dict = {'complex': np.float64,
             'complex128': np.float64,
             'complex64': np.float32}
diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index f8905dfa3..88d0c6c12 100755
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -409,6 +409,7 @@ def _read(filepath_or_buffer, kwds):
 
     return data
 
+
 _parser_defaults = {
     'delimiter': None,
 
@@ -655,6 +656,7 @@ def _make_parser_function(name, sep=','):
 
     return parser_f
 
+
 read_csv = _make_parser_function('read_csv', sep=',')
 read_csv = Appender(_read_csv_doc)(read_csv)
 
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index d8de1dcd6..65ac4e565 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -74,6 +74,7 @@ def _ensure_encoding(encoding):
             encoding = _default_encoding
     return encoding
 
+
 Term = Expr
 
 
@@ -112,6 +113,7 @@ class ClosedFileError(Exception):
 class IncompatibilityWarning(Warning):
     pass
 
+
 incompatibility_doc = """
 where criteria is being ignored as this version [%s] is too old (or
 not-defined), read the file in and write it out to a new file to upgrade (with
@@ -122,6 +124,7 @@ the copy_to method)
 class AttributeConflictWarning(Warning):
     pass
 
+
 attribute_conflict_doc = """
 the [%s] attribute of the existing index is [%s] which conflicts with the new
 [%s], resetting the attribute to None
@@ -131,6 +134,7 @@ the [%s] attribute of the existing index is [%s] which conflicts with the new
 class DuplicateWarning(Warning):
     pass
 
+
 duplicate_doc = """
 duplicate entries in table, taking most recently appended
 """
diff --git a/pandas/io/sql.py b/pandas/io/sql.py
index 9fa01c413..55e145b49 100644
--- a/pandas/io/sql.py
+++ b/pandas/io/sql.py
@@ -495,6 +495,7 @@ def has_table(table_name, con, flavor=None, schema=None):
     pandas_sql = pandasSQL_builder(con, flavor=flavor, schema=schema)
     return pandas_sql.has_table(table_name)
 
+
 table_exists = has_table
 
 
diff --git a/pandas/io/stata.py b/pandas/io/stata.py
index 2be765788..1698ade4c 100644
--- a/pandas/io/stata.py
+++ b/pandas/io/stata.py
@@ -459,6 +459,7 @@ conversion range. This may result in a loss of precision in the saved data.
 class ValueLabelTypeMismatch(Warning):
     pass
 
+
 value_label_mismatch_doc = """
 Stata value labels (pandas categories) must be strings. Column {0} contains
 non-string labels which will be converted to strings.  Please check that the
diff --git a/pandas/msgpack/__init__.py b/pandas/msgpack/__init__.py
index 33d60a12e..4d6e24117 100644
--- a/pandas/msgpack/__init__.py
+++ b/pandas/msgpack/__init__.py
@@ -41,6 +41,7 @@ def packb(o, **kwargs):
     """
     return Packer(**kwargs).pack(o)
 
+
 # alias for compatibility to simplejson/marshal/pickle.
 load = unpack
 loads = unpackb
diff --git a/pandas/sparse/frame.py b/pandas/sparse/frame.py
index 1fc93a967..61b8434b0 100644
--- a/pandas/sparse/frame.py
+++ b/pandas/sparse/frame.py
@@ -863,6 +863,7 @@ def homogenize(series_dict):
 
     return output
 
+
 # use unaccelerated ops for sparse objects
 ops.add_flex_arithmetic_methods(SparseDataFrame, use_numexpr=False,
                                 **ops.frame_flex_funcs)
diff --git a/pandas/sparse/series.py b/pandas/sparse/series.py
index 2d3a9effe..dfdbb3c89 100644
--- a/pandas/sparse/series.py
+++ b/pandas/sparse/series.py
@@ -832,6 +832,7 @@ class SparseSeries(Series):
         """
         return _coo_to_sparse_series(A, dense_index=dense_index)
 
+
 # overwrite series methods with unaccelerated versions
 ops.add_special_arithmetic_methods(SparseSeries, use_numexpr=False,
                                    **ops.series_special_funcs)
diff --git a/pandas/stats/moments.py b/pandas/stats/moments.py
index 95b209aee..914c4c088 100644
--- a/pandas/stats/moments.py
+++ b/pandas/stats/moments.py
@@ -385,6 +385,7 @@ def ewmstd(arg, com=None, span=None, halflife=None, alpha=None, min_periods=0,
                          bias=bias,
                          func_kw=['bias'])
 
+
 ewmvol = ewmstd
 
 
@@ -476,6 +477,7 @@ def _rolling_func(name, desc, how=None, func_kw=None, additional_kw=''):
                              **kwargs)
     return f
 
+
 rolling_max = _rolling_func('max', 'Moving maximum.', how='max')
 rolling_min = _rolling_func('min', 'Moving minimum.', how='min')
 rolling_sum = _rolling_func('sum', 'Moving sum.')
@@ -683,6 +685,7 @@ def _expanding_func(name, desc, func_kw=None, additional_kw=''):
                              **kwargs)
     return f
 
+
 expanding_max = _expanding_func('max', 'Expanding maximum.')
 expanding_min = _expanding_func('min', 'Expanding minimum.')
 expanding_sum = _expanding_func('sum', 'Expanding sum.')
diff --git a/pandas/tests/sparse/test_libsparse.py b/pandas/tests/sparse/test_libsparse.py
index 4d5a93d77..0435b7329 100644
--- a/pandas/tests/sparse/test_libsparse.py
+++ b/pandas/tests/sparse/test_libsparse.py
@@ -560,8 +560,8 @@ class TestSparseOperators(tm.TestCase):
 
         check_cases(_check_case)
 
-# too cute? oh but how I abhor code duplication
 
+# too cute? oh but how I abhor code duplication
 check_ops = ['add', 'sub', 'mul', 'truediv', 'floordiv']
 
 
diff --git a/pandas/tests/test_generic.py b/pandas/tests/test_generic.py
index 28f1dc615..b087ca21d 100644
--- a/pandas/tests/test_generic.py
+++ b/pandas/tests/test_generic.py
@@ -1588,6 +1588,7 @@ class TestPanel4D(tm.TestCase, Generic):
             # non-convertible
             self.assertRaises(ValueError, lambda: result.to_pandas())
 
+
 # run all the tests, but wrap each in a warning catcher
 for t in ['test_rename', 'test_rename_axis', 'test_get_numeric_data',
           'test_get_default', 'test_nonzero',
diff --git a/pandas/tools/merge.py b/pandas/tools/merge.py
index e82e702cb..ba53d42fc 100644
--- a/pandas/tools/merge.py
+++ b/pandas/tools/merge.py
@@ -53,6 +53,7 @@ def concat_wrap():
         return pd.concat(*args, **kwargs)
     return wrapper
 
+
 concat = concat_wrap()
 
 
@@ -66,6 +67,8 @@ def merge(left, right, how='inner', on=None, left_on=None, right_on=None,
                          right_index=right_index, sort=sort, suffixes=suffixes,
                          copy=copy, indicator=indicator)
     return op.get_result()
+
+
 if __debug__:
     merge.__doc__ = _merge_doc % '\nleft : DataFrame'
 
@@ -264,6 +267,7 @@ def merge_ordered(left, right, on=None,
         result = _merger(left, right)
     return result
 
+
 ordered_merge.__doc__ = merge_ordered.__doc__
 
 
@@ -1334,6 +1338,7 @@ def _right_outer_join(x, y, max_groups):
     right_indexer, left_indexer = _join.left_outer_join(y, x, max_groups)
     return left_indexer, right_indexer
 
+
 _join_functions = {
     'inner': _join.inner_join,
     'left': _join.left_outer_join,
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index 0b1ced97d..b2050d7d8 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -149,6 +149,7 @@ def _mpl_ge_2_0_0():
     except ImportError:
         return False
 
+
 if _mpl_ge_1_5_0():
     # Compat with mp 1.5, which uses cycler.
     import cycler
diff --git a/pandas/tseries/frequencies.py b/pandas/tseries/frequencies.py
index e0c602bf5..957a934d1 100644
--- a/pandas/tseries/frequencies.py
+++ b/pandas/tseries/frequencies.py
@@ -660,6 +660,7 @@ def get_standard_freq(freq):
     warnings.warn(msg, FutureWarning, stacklevel=2)
     return to_offset(freq).rule_code
 
+
 # ---------------------------------------------------------------------
 # Period codes
 
@@ -795,6 +796,7 @@ def infer_freq(index, warn=True):
     inferer = _FrequencyInferer(index, warn=warn)
     return inferer.get_freq()
 
+
 _ONE_MICRO = long(1000)
 _ONE_MILLI = _ONE_MICRO * 1000
 _ONE_SECOND = _ONE_MILLI * 1000
diff --git a/pandas/tseries/holiday.py b/pandas/tseries/holiday.py
index 31e40c6bc..d3d936693 100644
--- a/pandas/tseries/holiday.py
+++ b/pandas/tseries/holiday.py
@@ -286,6 +286,7 @@ class Holiday(object):
                     dates += offset
         return dates
 
+
 holiday_calendars = {}
 
 
@@ -461,6 +462,7 @@ class AbstractHolidayCalendar(object):
         else:
             return holidays
 
+
 USMemorialDay = Holiday('MemorialDay', month=5, day=31,
                         offset=DateOffset(weekday=MO(-1)))
 USLaborDay = Holiday('Labor Day', month=9, day=1,
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 6cbb69678..5f00e8b64 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -138,6 +138,7 @@ def _ensure_datetime64(other):
         return other
     raise TypeError('%s type object %s' % (type(other), str(other)))
 
+
 _midnight = time(0, 0)
 
 
diff --git a/pandas/tseries/interval.py b/pandas/tseries/interval.py
index 6698c7e92..22801318a 100644
--- a/pandas/tseries/interval.py
+++ b/pandas/tseries/interval.py
@@ -33,6 +33,3 @@ class IntervalIndex(Index):
 
     def dtype(self):
         return self.values.dtype
-
-if __name__ == '__main__':
-    pass
diff --git a/pandas/tseries/offsets.py b/pandas/tseries/offsets.py
index 370dd0076..79227f6de 100644
--- a/pandas/tseries/offsets.py
+++ b/pandas/tseries/offsets.py
@@ -1652,6 +1652,7 @@ class WeekDay(object):
     SAT = 5
     SUN = 6
 
+
 _int_to_weekday = {
     WeekDay.MON: 'MON',
     WeekDay.TUE: 'TUE',
@@ -1924,6 +1925,7 @@ class BQuarterEnd(QuarterOffset):
         modMonth = (dt.month - self.startingMonth) % 3
         return BMonthEnd().onOffset(dt) and modMonth == 0
 
+
 _int_to_month = tslib._MONTH_ALIASES
 _month_to_int = dict((v, k) for k, v in _int_to_month.items())
 
@@ -2799,6 +2801,7 @@ def _delta_to_tick(delta):
         else:  # pragma: no cover
             return Nano(nanos)
 
+
 _delta_to_nanoseconds = tslib._delta_to_nanoseconds
 
 
@@ -2931,6 +2934,7 @@ def generate_range(start=None, end=None, periods=None,
                 raise ValueError('Offset %s did not decrement date' % offset)
             cur = next_date
 
+
 prefix_mapping = dict((offset._prefix, offset) for offset in [
     YearBegin,                 # 'AS'
     YearEnd,                   # 'A'
diff --git a/pandas/tseries/resample.py b/pandas/tseries/resample.py
index 5692d6c5c..a6a10c089 100755
--- a/pandas/tseries/resample.py
+++ b/pandas/tseries/resample.py
@@ -552,6 +552,8 @@ class Resampler(_GroupBy):
         """
         nv.validate_resampler_func('var', args, kwargs)
         return self._downsample('var', ddof=ddof)
+
+
 Resampler._deprecated_valids += dir(Resampler)
 
 # downsample methods
@@ -969,6 +971,8 @@ def resample(obj, kind=None, **kwds):
     """ create a TimeGrouper and return our resampler """
     tg = TimeGrouper(**kwds)
     return tg._get_resampler(obj, kind=kind)
+
+
 resample.__doc__ = Resampler.__doc__
 
 
diff --git a/pandas/tseries/timedeltas.py b/pandas/tseries/timedeltas.py
index 9bf39652a..5a5d1533b 100644
--- a/pandas/tseries/timedeltas.py
+++ b/pandas/tseries/timedeltas.py
@@ -87,6 +87,7 @@ def to_timedelta(arg, unit='ns', box=True, errors='raise'):
     return _coerce_scalar_to_timedelta_type(arg, unit=unit,
                                             box=box, errors=errors)
 
+
 _unit_map = {
     'Y': 'Y',
     'y': 'Y',
diff --git a/pandas/types/generic.py b/pandas/types/generic.py
index 756fb4759..e7b54ccc6 100644
--- a/pandas/types/generic.py
+++ b/pandas/types/generic.py
@@ -57,4 +57,5 @@ class _ABCGeneric(type):
     def __instancecheck__(cls, inst):
         return hasattr(inst, "_data")
 
+
 ABCGeneric = _ABCGeneric("ABCGeneric", tuple(), {})
diff --git a/pandas/util/print_versions.py b/pandas/util/print_versions.py
index 7c5148caf..b0f5d3994 100644
--- a/pandas/util/print_versions.py
+++ b/pandas/util/print_versions.py
@@ -153,5 +153,6 @@ def main():
 
     return 0
 
+
 if __name__ == "__main__":
     sys.exit(main())
diff --git a/pandas/util/terminal.py b/pandas/util/terminal.py
index 6b8428ff7..dadd09ae7 100644
--- a/pandas/util/terminal.py
+++ b/pandas/util/terminal.py
@@ -115,6 +115,7 @@ def _get_terminal_size_linux():
             return None
     return int(cr[1]), int(cr[0])
 
+
 if __name__ == "__main__":
     sizex, sizey = get_terminal_size()
     print('width = %s height = %s' % (sizex, sizey))
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 566ceec02..cda386781 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -74,6 +74,7 @@ def reset_testing_mode():
     if 'deprecate' in testing_mode:
         warnings.simplefilter('ignore', _testing_mode_warnings)
 
+
 set_testing_mode()
 
 
@@ -1381,6 +1382,7 @@ def assert_panelnd_equal(left, right,
         for i, item in enumerate(right._get_axis(0)):
             assert item in left, "non-matching item (left) '%s'" % item
 
+
 # TODO: strangely check_names fails in py3 ?
 _panel_frame_equal = partial(assert_frame_equal, check_names=False)
 assert_panel_equal = partial(assert_panelnd_equal,
@@ -2076,6 +2078,7 @@ def optional_args(decorator):
 
     return wrapper
 
+
 # skip tests on exceptions with this message
 _network_error_messages = (
     # 'urlopen error timed out',
