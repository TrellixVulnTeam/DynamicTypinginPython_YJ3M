commit 8c08acaef77e3b901dcbe09b612de785b0c5e782
Author: jreback <jeff@reback.net>
Date:   Thu May 2 10:11:09 2013 -0400

    PERF: allow a cache_readonly to be 'set' if allow_settings is passed on the decoration
    
          useful when specifiying an index that is **known** to be unique (e.g. in the case
          of a default range index)

diff --git a/pandas/core/common.py b/pandas/core/common.py
index e6ce9fc5f..490f269c8 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -1156,6 +1156,7 @@ def _default_index(n):
     values = np.arange(n, dtype=np.int64)
     result = values.view(Int64Index)
     result.name = None
+    result.is_unique = True
     return result
 
 
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 34edd26a4..101b69ffc 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -278,7 +278,7 @@ class Index(np.ndarray):
     def is_lexsorted_for_tuple(self, tup):
         return True
 
-    @cache_readonly
+    @cache_readonly(allow_setting=True)
     def is_unique(self):
         return self._engine.is_unique
 
diff --git a/pandas/src/properties.pyx b/pandas/src/properties.pyx
index 53bb561ef..1df11cecf 100644
--- a/pandas/src/properties.pyx
+++ b/pandas/src/properties.pyx
@@ -4,16 +4,20 @@ from cpython cimport PyDict_Contains, PyDict_GetItem, PyDict_GetItem
 cdef class cache_readonly(object):
 
     cdef readonly:
-        object fget, name
+        object func, name, allow_setting
 
-    def __init__(self, func):
-        self.fget = func
-        self.name = func.__name__
+    def __init__(self, func=None, allow_setting=False):
+        if func is not None:
+            self.func = func
+            self.name = func.__name__
+        self.allow_setting = allow_setting
 
-    def __get__(self, obj, type):
-        if obj is None:
-            return self.fget
+    def __call__(self, func, doc=None):
+        self.func = func
+        self.name = func.__name__
+        return self
 
+    def __get__(self, obj, typ):
         # Get the cache or set a default one if needed
 
         cache = getattr(obj, '_cache', None)
@@ -23,12 +27,23 @@ cdef class cache_readonly(object):
         if PyDict_Contains(cache, self.name):
             # not necessary to Py_INCREF
             val = <object> PyDict_GetItem(cache, self.name)
-            return val
         else:
-            val = self.fget(obj)
+            val = self.func(obj)
             PyDict_SetItem(cache, self.name, val)
-            return val
+        return val
+
+    def __set__(self, obj, value):
+
+        if not self.allow_setting:
+            raise Exception("cannot set values for [%s]" % self.name)
+
+        # Get the cache or set a default one if needed
+        cache = getattr(obj, '_cache', None)
+        if cache is None:
+            cache = obj._cache = {}
 
+        PyDict_SetItem(cache, self.name, value)
+            
 cdef class AxisProperty(object):
     cdef:
         Py_ssize_t axis
