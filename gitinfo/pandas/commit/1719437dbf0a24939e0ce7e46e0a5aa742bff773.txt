commit 1719437dbf0a24939e0ce7e46e0a5aa742bff773
Author: sfoo <sfoohei@gmail.com>
Date:   Wed Nov 1 06:53:18 2017 -0400

    BUG: DataFrame.groupby() interprets tuple as list of keys
    
    closes #17979
    
    Author: sfoo <sfoohei@gmail.com>
    Author: Jeff Reback <jeff@reback.net>
    
    Closes #17996 from GuessWhoSamFoo/groupby_tuples and squashes the following commits:
    
    afb00317a [Jeff Reback] TST: separate out grouping-type tests
    c52b2a88d [sfoo] Moved notes to 0.22; created is_axis_multiindex var - pending internal use
    fb52c1c97 [sfoo] Added whatsnew; checked match_axis_length
    99ebc4ec2 [sfoo] Cast groupby tuple as list when multiindex

diff --git a/doc/source/whatsnew/v0.22.0.txt b/doc/source/whatsnew/v0.22.0.txt
index e32b3ed26..957e6d38a 100644
--- a/doc/source/whatsnew/v0.22.0.txt
+++ b/doc/source/whatsnew/v0.22.0.txt
@@ -88,6 +88,7 @@ Bug Fixes
 ~~~~~~~~~
 
 - Bug in ``pd.read_msgpack()`` with a non existent file is passed in Python 2 (:issue:`15296`)
+- Bug in ``DataFrame.groupby`` where key as tuple in a ``MultiIndex`` were interpreted as a list of keys (:issue:`17979`)
 
 Conversion
 ^^^^^^^^^^
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 5c07033f5..c94b4a085 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -2705,6 +2705,7 @@ def _get_grouper(obj, key=None, axis=0, level=None, sort=True,
 
     """
     group_axis = obj._get_axis(axis)
+    is_axis_multiindex = isinstance(obj._info_axis, MultiIndex)
 
     # validate that the passed single level is compatible with the passed
     # axis of the object
@@ -2765,7 +2766,9 @@ def _get_grouper(obj, key=None, axis=0, level=None, sort=True,
     elif isinstance(key, BaseGrouper):
         return key, [], obj
 
-    if not isinstance(key, (tuple, list)):
+    # when MultiIndex, allow tuple to be a key
+    if not isinstance(key, (tuple, list)) or \
+            (isinstance(key, tuple) and is_axis_multiindex):
         keys = [key]
         match_axis_length = False
     else:
@@ -2869,7 +2872,6 @@ def _get_grouper(obj, key=None, axis=0, level=None, sort=True,
 
     # create the internals grouper
     grouper = BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)
-
     return grouper, exclusions, obj
 
 
diff --git a/pandas/tests/groupby/test_grouping.py b/pandas/tests/groupby/test_grouping.py
index 824c754a5..9e6de8749 100644
--- a/pandas/tests/groupby/test_grouping.py
+++ b/pandas/tests/groupby/test_grouping.py
@@ -356,6 +356,25 @@ class TestGrouping(MixIn):
         # it works!
         df.groupby(1, as_index=False)[2].agg({'Q': np.mean})
 
+    def test_groupby_multiindex_tuple(self):
+        # GH 17979
+        df = pd.DataFrame([[1, 2, 3, 4], [3, 4, 5, 6], [1, 4, 2, 3]],
+                          columns=pd.MultiIndex.from_arrays(
+                              [['a', 'b', 'b', 'c'],
+                               [1, 1, 2, 2]]))
+        expected = df.groupby([('b', 1)]).groups
+        result = df.groupby(('b', 1)).groups
+        tm.assert_dict_equal(expected, result)
+
+        df2 = pd.DataFrame([[1, 2, 3, 4], [3, 4, 5, 6], [1, 4, 2, 3]],
+                           columns=pd.MultiIndex.from_arrays(
+                               [['a', 'b', 'b', 'c'],
+                                ['d', 'd', 'e', 'e']]))
+        df2.groupby([('b', 'd')]).groups
+        expected = df.groupby([('b', 'd')]).groups
+        result = df.groupby(('b', 'd')).groups
+        tm.assert_dict_equal(expected, result)
+
     @pytest.mark.parametrize('sort', [True, False])
     def test_groupby_level(self, sort):
         # GH 17537
