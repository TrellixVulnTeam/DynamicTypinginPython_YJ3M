commit 8c6a994b2ecc311e3587cce3e5d04f48a470ea09
Author: Simon Hawkins <simonjayhawkins@gmail.com>
Date:   Sun Dec 15 21:46:16 2019 +0000

    CLN: various lgtm.com cleanups (#30258)

diff --git a/pandas/core/apply.py b/pandas/core/apply.py
index ef3d8cd53..14a3c3c00 100644
--- a/pandas/core/apply.py
+++ b/pandas/core/apply.py
@@ -320,7 +320,6 @@ class FrameApply(metaclass=abc.ABCMeta):
         series_gen = self.series_generator
         res_index = self.result_index
 
-        i = None
         keys = []
         results = {}
         if self.ignore_failures:
diff --git a/pandas/core/arrays/datetimes.py b/pandas/core/arrays/datetimes.py
index 2cd8aafe0..e41f2a840 100644
--- a/pandas/core/arrays/datetimes.py
+++ b/pandas/core/arrays/datetimes.py
@@ -2109,7 +2109,6 @@ def _validate_dt64_dtype(dtype):
         dtype = pandas_dtype(dtype)
         if is_dtype_equal(dtype, np.dtype("M8")):
             # no precision, disallowed GH#24806
-            dtype = _NS_DTYPE
             msg = (
                 "Passing in 'datetime64' dtype with no precision is not allowed. "
                 "Please pass in 'datetime64[ns]' instead."
diff --git a/pandas/core/arrays/integer.py b/pandas/core/arrays/integer.py
index 3469f782c..3f5a4ca49 100644
--- a/pandas/core/arrays/integer.py
+++ b/pandas/core/arrays/integer.py
@@ -78,7 +78,8 @@ class _IntegerDtype(ExtensionDtype):
 
     @classmethod
     def construct_array_type(cls):
-        """Return the array type associated with this dtype
+        """
+        Return the array type associated with this dtype.
 
         Returns
         -------
diff --git a/pandas/core/arrays/numpy_.py b/pandas/core/arrays/numpy_.py
index 13748e03e..deec30dfe 100644
--- a/pandas/core/arrays/numpy_.py
+++ b/pandas/core/arrays/numpy_.py
@@ -79,7 +79,15 @@ class PandasDtype(ExtensionDtype):
                 f"Cannot construct a 'PandasDtype' from '{string}'"
             ) from err
 
+    @classmethod
     def construct_array_type(cls):
+        """
+        Return the array type associated with this dtype.
+
+        Returns
+        -------
+        type
+        """
         return PandasArray
 
     @property
diff --git a/pandas/core/arrays/sparse/dtype.py b/pandas/core/arrays/sparse/dtype.py
index a295dfed2..935f65741 100644
--- a/pandas/core/arrays/sparse/dtype.py
+++ b/pandas/core/arrays/sparse/dtype.py
@@ -168,6 +168,13 @@ class SparseDtype(ExtensionDtype):
 
     @classmethod
     def construct_array_type(cls):
+        """
+        Return the array type associated with this dtype.
+
+        Returns
+        -------
+        type
+        """
         from .array import SparseArray
 
         return SparseArray
diff --git a/pandas/core/arrays/timedeltas.py b/pandas/core/arrays/timedeltas.py
index b51773961..db4effa60 100644
--- a/pandas/core/arrays/timedeltas.py
+++ b/pandas/core/arrays/timedeltas.py
@@ -1122,7 +1122,6 @@ def _validate_td64_dtype(dtype):
     dtype = pandas_dtype(dtype)
     if is_dtype_equal(dtype, np.dtype("timedelta64")):
         # no precision disallowed GH#24806
-        dtype = _TD_DTYPE
         msg = (
             "Passing in 'timedelta' dtype with no precision is not allowed. "
             "Please pass in 'timedelta64[ns]' instead."
diff --git a/pandas/core/dtypes/base.py b/pandas/core/dtypes/base.py
index ae544376c..1dda51da4 100644
--- a/pandas/core/dtypes/base.py
+++ b/pandas/core/dtypes/base.py
@@ -183,7 +183,7 @@ class ExtensionDtype:
     @classmethod
     def construct_array_type(cls):
         """
-        Return the array type associated with this dtype
+        Return the array type associated with this dtype.
 
         Returns
         -------
diff --git a/pandas/core/dtypes/dtypes.py b/pandas/core/dtypes/dtypes.py
index 4421fad5f..77ec182be 100644
--- a/pandas/core/dtypes/dtypes.py
+++ b/pandas/core/dtypes/dtypes.py
@@ -486,7 +486,7 @@ class CategoricalDtype(PandasExtensionDtype, ExtensionDtype):
     @classmethod
     def construct_array_type(cls):
         """
-        Return the array type associated with this dtype
+        Return the array type associated with this dtype.
 
         Returns
         -------
@@ -668,7 +668,7 @@ class DatetimeTZDtype(PandasExtensionDtype):
                 unit = result.unit
                 tz = result.tz
                 msg = (
-                    "Passing a dtype alias like 'datetime64[ns, {tz}]' "
+                    f"Passing a dtype alias like 'datetime64[ns, {tz}]' "
                     "to DatetimeTZDtype is no longer supported. Use "
                     "'DatetimeTZDtype.construct_from_string()' instead."
                 )
@@ -704,7 +704,7 @@ class DatetimeTZDtype(PandasExtensionDtype):
     @classmethod
     def construct_array_type(cls):
         """
-        Return the array type associated with this dtype
+        Return the array type associated with this dtype.
 
         Returns
         -------
@@ -936,6 +936,13 @@ class PeriodDtype(PandasExtensionDtype):
 
     @classmethod
     def construct_array_type(cls):
+        """
+        Return the array type associated with this dtype.
+
+        Returns
+        -------
+        type
+        """
         from pandas.core.arrays import PeriodArray
 
         return PeriodArray
@@ -1030,7 +1037,7 @@ class IntervalDtype(PandasExtensionDtype):
     @classmethod
     def construct_array_type(cls):
         """
-        Return the array type associated with this dtype
+        Return the array type associated with this dtype.
 
         Returns
         -------
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 568e41eb0..8edc11141 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2587,7 +2587,6 @@ class DataFrame(NDFrame):
         """
         # irow
         if axis == 0:
-            label = self.index[i]
             new_values = self._data.fast_xs(i)
 
             # if we are a copy, mark as such
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 15789f0fb..d83a60ffc 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -5746,8 +5746,6 @@ class NDFrame(PandasObject, SelectionMixin):
         memo, default None
             Standard signature. Unused
         """
-        if memo is None:
-            memo = {}
         return self.copy(deep=True)
 
     def _convert(
diff --git a/pandas/core/groupby/grouper.py b/pandas/core/groupby/grouper.py
index d9b6738e7..d7c3feef3 100644
--- a/pandas/core/groupby/grouper.py
+++ b/pandas/core/groupby/grouper.py
@@ -131,7 +131,7 @@ class Grouper:
         """
 
         self._set_grouper(obj)
-        self.grouper, exclusions, self.obj = get_grouper(
+        self.grouper, _, self.obj = get_grouper(
             self.obj,
             [self.key],
             axis=self.axis,
diff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py
index f44a2ce13..5abd049b9 100644
--- a/pandas/core/indexes/base.py
+++ b/pandas/core/indexes/base.py
@@ -911,8 +911,6 @@ class Index(IndexOpsMixin, PandasObject):
         memo, default None
             Standard signature. Unused
         """
-        if memo is None:
-            memo = {}
         return self.copy(deep=True)
 
     # --------------------------------------------------------------------
diff --git a/pandas/core/internals/blocks.py b/pandas/core/internals/blocks.py
index 8a543832b..610a39a05 100644
--- a/pandas/core/internals/blocks.py
+++ b/pandas/core/internals/blocks.py
@@ -3024,7 +3024,6 @@ def _merge_blocks(blocks, dtype=None, _can_consolidate=True):
         if dtype is None:
             if len({b.dtype for b in blocks}) != 1:
                 raise AssertionError("_merge_blocks are invalid!")
-            dtype = blocks[0].dtype
 
         # FIXME: optimization potential in case all mgrs contain slices and
         # combination of those slices is a slice, too.
diff --git a/pandas/core/reshape/reshape.py b/pandas/core/reshape/reshape.py
index a968e1831..004bd0199 100644
--- a/pandas/core/reshape/reshape.py
+++ b/pandas/core/reshape/reshape.py
@@ -230,11 +230,9 @@ class _Unstacker:
         if needs_i8_conversion(values):
             sorted_values = sorted_values.view("i8")
             new_values = new_values.view("i8")
-            name = "int64"
         elif is_bool_dtype(values):
             sorted_values = sorted_values.astype("object")
             new_values = new_values.astype("object")
-            name = "object"
         else:
             sorted_values = sorted_values.astype(name, copy=False)
 
diff --git a/pandas/plotting/_matplotlib/hist.py b/pandas/plotting/_matplotlib/hist.py
index dc9eede7e..8957389ac 100644
--- a/pandas/plotting/_matplotlib/hist.py
+++ b/pandas/plotting/_matplotlib/hist.py
@@ -27,7 +27,7 @@ class HistPlot(LinePlot):
             values = np.ravel(values)
             values = values[~isna(values)]
 
-            hist, self.bins = np.histogram(
+            _, self.bins = np.histogram(
                 values,
                 bins=self.bins,
                 range=self.kwds.get("range", None),
diff --git a/pandas/tests/arrays/test_array.py b/pandas/tests/arrays/test_array.py
index 479f8dbad..f2a4e73e7 100644
--- a/pandas/tests/arrays/test_array.py
+++ b/pandas/tests/arrays/test_array.py
@@ -287,6 +287,13 @@ class DecimalDtype2(DecimalDtype):
 
     @classmethod
     def construct_array_type(cls):
+        """
+        Return the array type associated with this dtype.
+
+        Returns
+        -------
+        type
+        """
         return DecimalArray2
 
 
diff --git a/pandas/tests/extension/arrow/arrays.py b/pandas/tests/extension/arrow/arrays.py
index 86e23b326..b0e5a6f85 100644
--- a/pandas/tests/extension/arrow/arrays.py
+++ b/pandas/tests/extension/arrow/arrays.py
@@ -37,6 +37,13 @@ class ArrowBoolDtype(ExtensionDtype):
 
     @classmethod
     def construct_array_type(cls):
+        """
+        Return the array type associated with this dtype.
+
+        Returns
+        -------
+        type
+        """
         return ArrowBoolArray
 
     def _is_boolean(self):
@@ -60,6 +67,13 @@ class ArrowStringDtype(ExtensionDtype):
 
     @classmethod
     def construct_array_type(cls):
+        """
+        Return the array type associated with this dtype.
+
+        Returns
+        -------
+        type
+        """
         return ArrowStringArray
 
 
diff --git a/pandas/tests/extension/decimal/array.py b/pandas/tests/extension/decimal/array.py
index 0b0865c42..74f1e3cfb 100644
--- a/pandas/tests/extension/decimal/array.py
+++ b/pandas/tests/extension/decimal/array.py
@@ -27,7 +27,8 @@ class DecimalDtype(ExtensionDtype):
 
     @classmethod
     def construct_array_type(cls):
-        """Return the array type associated with this dtype
+        """
+        Return the array type associated with this dtype.
 
         Returns
         -------
diff --git a/pandas/tests/extension/json/array.py b/pandas/tests/extension/json/array.py
index 28929d507..46ca7bd8f 100644
--- a/pandas/tests/extension/json/array.py
+++ b/pandas/tests/extension/json/array.py
@@ -31,7 +31,8 @@ class JSONDtype(ExtensionDtype):
 
     @classmethod
     def construct_array_type(cls):
-        """Return the array type associated with this dtype
+        """
+        Return the array type associated with this dtype.
 
         Returns
         -------
