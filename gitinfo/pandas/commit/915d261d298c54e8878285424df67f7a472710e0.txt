commit 915d261d298c54e8878285424df67f7a472710e0
Author: Chang She <changshe@gmail.com>
Date:   Fri Nov 30 15:04:42 2012 -0500

    ENH: centered moving windows for array input

diff --git a/RELEASE.rst b/RELEASE.rst
index 7c546c9fc..d31a10a8f 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -36,7 +36,8 @@ pandas 0.10.0
     for both Series and DataFrame (#2002)
   - Add ``duplicated`` and ``drop_duplicates`` functions to Series (#1923)
   - Add docs for ``HDFStore table`` format
-  - 'density' property in `SparseSeries` (#2384)
+  - 'density' property in ``SparseSeries`` (#2384)
+  - Centered moving window functions via ``center`` keyword (#1270)
 
 **API Changes**
 
diff --git a/pandas/stats/moments.py b/pandas/stats/moments.py
index 0fbe61204..ae703ee49 100644
--- a/pandas/stats/moments.py
+++ b/pandas/stats/moments.py
@@ -281,13 +281,26 @@ def _rolling_moment(arg, window, func, minp, axis=0, freq=None,
 
     rs = return_hook(result)
     if center:
-        if isinstance(rs, (Series, DataFrame, Panel)):
-            rs = rs.shift(-int((window + 1) / 2.), axis=axis)
-        else:
-            offset = int((window + 1)/ 2.)
-            rs[:-offset] = rs[offset:]
-            rs[-offset:] = np.nan
+        rs = _center_window(rs, window, axis)
+    return rs
+
+def _center_window(rs, window, axis):
+    if isinstance(rs, (Series, DataFrame, Panel)):
+        rs = rs.shift(-int((window + 1) / 2.), axis=axis)
+    else:
+        offset = int((window + 1) / 2.)
+
+        rs_indexer = [slice(None)] * rs.ndim
+        rs_indexer[axis] = slice(None, -offset)
+
+        lead_indexer = [slice(None)] * rs.ndim
+        lead_indexer[axis] = slice(offset, None)
+
+        na_indexer = [slice(None)] * rs.ndim
+        na_indexer[axis] = slice(-offset, None)
 
+        rs[rs_indexer] = rs[lead_indexer]
+        rs[na_indexer] = np.nan
     return rs
 
 def _process_data_structure(arg, kill_inf=True):
diff --git a/pandas/stats/tests/test_moments.py b/pandas/stats/tests/test_moments.py
index dbd94d628..101928300 100644
--- a/pandas/stats/tests/test_moments.py
+++ b/pandas/stats/tests/test_moments.py
@@ -190,22 +190,28 @@ class TestMoments(unittest.TestCase):
 
     def _check_moment_func(self, func, static_comp, window=50,
                            has_min_periods=True,
+                           has_center=True,
                            has_time_rule=True,
                            preserve_nan=True,
                            fill_value=None):
 
         self._check_ndarray(func, static_comp, window=window,
                             has_min_periods=has_min_periods,
-                            preserve_nan=preserve_nan)
+                            preserve_nan=preserve_nan,
+                            has_center=has_center,
+                            fill_value=fill_value)
 
         self._check_structures(func, static_comp,
                                has_min_periods=has_min_periods,
                                has_time_rule=has_time_rule,
-                               fill_value=fill_value)
+                               fill_value=fill_value,
+                               has_center=has_center)
 
     def _check_ndarray(self, func, static_comp, window=50,
                        has_min_periods=True,
-                       preserve_nan=True):
+                       preserve_nan=True,
+                       has_center=True,
+                       fill_value=None):
 
         result = func(self.arr, window)
         assert_almost_equal(result[-1],
@@ -244,6 +250,26 @@ class TestMoments(unittest.TestCase):
             result = func(arr, 50)
             assert_almost_equal(result[-1], static_comp(arr[10:-10]))
 
+
+        if has_center:
+            if has_min_periods:
+                result = func(arr, 20, min_periods=15, center=True)
+                expected = func(arr, 20, min_periods=15)
+            else:
+                result = func(arr, 20, center=True)
+                expected = func(arr, 20)
+
+            assert_almost_equal(result[0], expected[10])
+            if fill_value is None:
+                self.assert_(np.isnan(result[-10:]).all())
+            else:
+                self.assert_((result[-10:] == 0).all())
+            if has_min_periods:
+                self.assert_(np.isnan(expected[23]))
+                self.assert_(np.isnan(result[13]))
+                self.assert_(np.isnan(expected[-5]))
+                self.assert_(np.isnan(result[-15]))
+
     def _check_structures(self, func, static_comp,
                           has_min_periods=True, has_time_rule=True,
                           has_center=True,
