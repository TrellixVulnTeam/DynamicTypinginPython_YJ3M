commit 4c31c8339955d8c1cfc53eaae0166cf3a70af2a2
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon May 7 15:31:30 2012 -0400

    ENH: pass list of array to create MultiIndex, close #831

diff --git a/RELEASE.rst b/RELEASE.rst
index 44617dd77..fb857cbfb 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -37,6 +37,7 @@ pandas 0.8.0
     etc. (#825 and others)
   - Add support for indexes (dates or otherwise) with duplicates and common
     sense indexing/selection functionality
+  - Series/DataFrame.update methods, in-place variant of combine_first (#961)
 
 **Improvements to existing features**
 
@@ -44,6 +45,8 @@ pandas 0.8.0
     performance in many cases and lower memory footprint
   - Shipping some functions from scipy.stats to reduce dependency,
     e.g. Series.describe and DataFrame.describe (GH #1092)
+  - Can create MultiIndex by passing list of lists or list of arrays to Series,
+    DataFrame constructor, etc. (#831)
 
 **API Changes**
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 35bce6789..e320232f8 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -415,11 +415,14 @@ class DataFrame(NDFrame):
 
         if index is None:
             index = _default_index(N)
+        else:
+            index = _ensure_index(index)
 
         if columns is None:
             columns = _default_index(K)
+        else:
+            columns = _ensure_index(columns)
 
-        columns = _ensure_index(columns)
         block = make_block(values.T, columns, columns)
         return BlockManager([block], [columns, index])
 
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 25d86f50d..11a0b1419 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -2242,6 +2242,11 @@ def _ensure_index(index_like):
         return index_like
     if hasattr(index_like, 'name'):
         return Index(index_like, name=index_like.name)
+
+    if isinstance(index_like, list):
+        if len(index_like) and isinstance(index_like[0], (list, np.ndarray)):
+            return MultiIndex.from_arrays(index_like)
+
     return Index(index_like)
 
 def _validate_join_method(method):
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 8127b91ff..d2cfb3f0f 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -293,6 +293,9 @@ class Series(np.ndarray, generic.PandasObject):
         if dtype is not None:
             dtype = np.dtype(dtype)
 
+        if index is not None:
+            index = _ensure_index(index)
+
         subarr = _sanitize_array(data, index, dtype, copy,
                                  raise_cast_failure=True)
 
@@ -301,8 +304,6 @@ class Series(np.ndarray, generic.PandasObject):
 
         if index is None:
             index = _default_index(len(subarr))
-        else:
-            index = _ensure_index(index)
 
         # Change the class of the array to be the subclass type.
         if index.is_all_dates:
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index 5a09cefc5..fc464b209 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -59,6 +59,27 @@ class TestMultiLevel(unittest.TestCase):
         result = a['A'].append(b['A'])
         tm.assert_series_equal(result, self.frame['A'])
 
+    def test_dataframe_constructor(self):
+        multi = DataFrame(np.random.randn(4, 4),
+                          index=[np.array(['a', 'a', 'b', 'b']),
+                                 np.array(['x', 'y', 'x', 'y'])])
+        self.assert_(isinstance(multi.index, MultiIndex))
+        self.assert_(not isinstance(multi.columns, MultiIndex))
+
+        multi = DataFrame(np.random.randn(4, 4),
+                          columns=[['a', 'a', 'b', 'b'],
+                                   ['x', 'y', 'x', 'y']])
+        self.assert_(isinstance(multi.columns, MultiIndex))
+
+    def test_series_constructor(self):
+        multi = Series(1., index=[np.array(['a', 'a', 'b', 'b']),
+                                  np.array(['x', 'y', 'x', 'y'])])
+        self.assert_(isinstance(multi.index, MultiIndex))
+
+        multi = Series(1., index=[['a', 'a', 'b', 'b'],
+                                  ['x', 'y', 'x', 'y']])
+        self.assert_(isinstance(multi.index, MultiIndex))
+
     def test_reindex_level(self):
         # axis=0
         month_sums = self.ymd.sum(level='month')
