commit 083a740e67557245c91c6cf629ce3e48a9e5583c
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Sep 9 17:32:27 2012 -0400

    BUG: Timestamp comparisons with out-of-range datetime values, e.g. datetime.min

diff --git a/RELEASE.rst b/RELEASE.rst
index 8f46a9228..e0ad1d73a 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -128,6 +128,8 @@ pandas 0.9.0
   - Fix UnboundLocalError in Panel.__setitem__ and add better error (#1826)
   - Fix to_csv issues with list of string entries. Isnull works on list of
     strings now too (#1791)
+  - Fix Timestamp comparisons with datetime values outside the nanosecond range
+    (1677-2262)
 
 pandas 0.8.1
 ============
diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index b6e0b9eb4..c6cc8d4d4 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -379,7 +379,10 @@ cdef class _Timestamp(datetime):
         if isinstance(other, _Timestamp):
             ots = other
         elif isinstance(other, datetime):
-            ots = Timestamp(other)
+            try:
+                ots = Timestamp(other)
+            except ValueError:
+                return self._compare_outside_nanorange(other, op)
         else:
             if op == 2:
                 return False
@@ -388,11 +391,7 @@ cdef class _Timestamp(datetime):
             else:
                 raise TypeError('Cannot compare Timestamp with %s' % str(other))
 
-        if self.tzinfo is None:
-            if other.tzinfo is not None:
-                raise Exception('Cannot compare tz-naive and tz-aware timestamps')
-        elif other.tzinfo is None:
-            raise Exception('Cannot compare tz-naive and tz-aware timestamps')
+        self._assert_tzawareness_compat(other)
 
         if op == 2: # ==
             return self.value == ots.value
@@ -407,6 +406,52 @@ cdef class _Timestamp(datetime):
         elif op == 5: # >=
             return self.value >= ots.value
 
+    cdef _compare_outside_nanorange(self, object other, int op):
+        dtval = self.to_datetime()
+
+        self._assert_tzawareness_compat(other)
+
+        if self.nanosecond == 0:
+            if op == 2: # ==
+                return dtval == other
+            elif op == 3: # !=
+                return dtval != other
+            elif op == 0: # <
+                return dtval < other
+            elif op == 1: # <=
+                return dtval <= other
+            elif op == 4: # >
+                return dtval > other
+            elif op == 5: # >=
+                return dtval >= other
+        else:
+            if op == 2: # ==
+                return False
+            elif op == 3: # !=
+                return True
+            elif op == 0: # <
+                return dtval < other
+            elif op == 1: # <=
+                return dtval < other
+            elif op == 4: # >
+                return dtval >= other
+            elif op == 5: # >=
+                return dtval >= other
+
+    cdef _assert_tzawareness_compat(self, object other):
+        if self.tzinfo is None:
+            if other.tzinfo is not None:
+                raise Exception('Cannot compare tz-naive and '
+                                'tz-aware timestamps')
+        elif other.tzinfo is None:
+            raise Exception('Cannot compare tz-naive and tz-aware timestamps')
+
+    cpdef to_datetime(self):
+        return datetime(self.year, self.month, self.day,
+                        self.hour, self.minute, self.second,
+                        self.microsecond, tzinfo=self.tzinfo)
+
+
     def __add__(self, other):
         if is_integer_object(other):
             if self.offset is None:
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 6f22b2b48..3ea2d85c2 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -1096,6 +1096,21 @@ class TestTimeSeries(unittest.TestCase):
         result = tst.duplicated()
         self.assert_((-result).all())
 
+    def test_timestamp_compare_with_early_datetime(self):
+        # e.g. datetime.min
+        stamp = Timestamp('2012-01-01')
+
+        self.assertFalse(stamp == datetime.min)
+        self.assertFalse(stamp == datetime(1600, 1, 1))
+        self.assertFalse(stamp == datetime(2700, 1, 1))
+        self.assert_(stamp != datetime.min)
+        self.assert_(stamp != datetime(1600, 1, 1))
+        self.assert_(stamp != datetime(2700, 1, 1))
+        self.assert_(stamp > datetime(1600, 1, 1))
+        self.assert_(stamp >= datetime(1600, 1, 1))
+        self.assert_(stamp < datetime(2700, 1, 1))
+        self.assert_(stamp <= datetime(2700, 1, 1))
+
 def _simple_ts(start, end, freq='D'):
     rng = date_range(start, end, freq=freq)
     return Series(np.random.randn(len(rng)), index=rng)
