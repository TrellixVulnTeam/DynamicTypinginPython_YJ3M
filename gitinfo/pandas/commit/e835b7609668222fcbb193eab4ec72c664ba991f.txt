commit e835b7609668222fcbb193eab4ec72c664ba991f
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Mon Mar 30 14:49:19 2020 -0700

    REF: remove placement kwarg from Block.concat_same_type (#33123)

diff --git a/pandas/core/internals/blocks.py b/pandas/core/internals/blocks.py
index ef4d7b98d..778e2866f 100644
--- a/pandas/core/internals/blocks.py
+++ b/pandas/core/internals/blocks.py
@@ -325,16 +325,15 @@ class Block(PandasObject):
     def merge(self, other):
         return _merge_blocks([self, other])
 
-    def concat_same_type(self, to_concat, placement=None):
+    def concat_same_type(self, to_concat):
         """
         Concatenate list of single blocks of the same type.
         """
         values = self._concatenator(
             [blk.values for blk in to_concat], axis=self.ndim - 1
         )
-        return self.make_block_same_class(
-            values, placement=placement or slice(0, len(values), 1)
-        )
+        placement = self.mgr_locs if self.ndim == 2 else slice(len(values))
+        return self.make_block_same_class(values, placement=placement)
 
     def iget(self, i):
         return self.values[i]
@@ -1783,13 +1782,13 @@ class ExtensionBlock(Block):
 
         return self.values[slicer]
 
-    def concat_same_type(self, to_concat, placement=None):
+    def concat_same_type(self, to_concat):
         """
         Concatenate list of single blocks of the same type.
         """
         values = self._holder._concat_same_type([blk.values for blk in to_concat])
-        placement = placement or slice(0, len(values), 1)
-        return self.make_block_same_class(values, ndim=self.ndim, placement=placement)
+        placement = self.mgr_locs if self.ndim == 2 else slice(len(values))
+        return self.make_block_same_class(values, placement=placement)
 
     def fillna(self, value, limit=None, inplace=False, downcast=None):
         values = self.values if inplace else self.values.copy()
@@ -2301,19 +2300,19 @@ class DatetimeTZBlock(ExtensionBlock, DatetimeBlock):
         new_values = new_values.astype("timedelta64[ns]")
         return [TimeDeltaBlock(new_values, placement=self.mgr_locs.indexer)]
 
-    def concat_same_type(self, to_concat, placement=None):
+    def concat_same_type(self, to_concat):
         # need to handle concat([tz1, tz2]) here, since DatetimeArray
         # only handles cases where all the tzs are the same.
         # Instead of placing the condition here, it could also go into the
         # is_uniform_join_units check, but I'm not sure what is better.
         if len({x.dtype for x in to_concat}) > 1:
             values = concat_datetime([x.values for x in to_concat])
-            placement = placement or slice(0, len(values), 1)
 
-            if self.ndim > 1:
-                values = np.atleast_2d(values)
-            return ObjectBlock(values, ndim=self.ndim, placement=placement)
-        return super().concat_same_type(to_concat, placement)
+            values = values.astype(object, copy=False)
+            placement = self.mgr_locs if self.ndim == 2 else slice(len(values))
+
+            return self.make_block(_block_shape(values, self.ndim), placement=placement)
+        return super().concat_same_type(to_concat)
 
     def fillna(self, value, limit=None, inplace=False, downcast=None):
         # We support filling a DatetimeTZ with a `value` whose timezone
@@ -2767,7 +2766,7 @@ class CategoricalBlock(ExtensionBlock):
     def _holder(self):
         return Categorical
 
-    def concat_same_type(self, to_concat, placement=None):
+    def concat_same_type(self, to_concat):
         """
         Concatenate list of single blocks of the same type.
 
@@ -2783,9 +2782,10 @@ class CategoricalBlock(ExtensionBlock):
         values = self._concatenator(
             [blk.values for blk in to_concat], axis=self.ndim - 1
         )
+        placement = self.mgr_locs if self.ndim == 2 else slice(len(values))
         # not using self.make_block_same_class as values can be object dtype
-        return make_block(
-            values, placement=placement or slice(0, len(values), 1), ndim=self.ndim
+        return self.make_block(
+            _block_shape(values, ndim=self.ndim), placement=placement
         )
 
     def replace(
diff --git a/pandas/core/internals/managers.py b/pandas/core/internals/managers.py
index 37193bd6d..182a5b14a 100644
--- a/pandas/core/internals/managers.py
+++ b/pandas/core/internals/managers.py
@@ -1999,9 +1999,8 @@ def concatenate_block_managers(mgrs_indexers, axes, concat_axis, copy):
                 values = values.view()
             b = b.make_block_same_class(values, placement=placement)
         elif is_uniform_join_units(join_units):
-            b = join_units[0].block.concat_same_type(
-                [ju.block for ju in join_units], placement=placement
-            )
+            b = join_units[0].block.concat_same_type([ju.block for ju in join_units])
+            b.mgr_locs = placement
         else:
             b = make_block(
                 concatenate_join_units(join_units, concat_axis, copy=copy),
diff --git a/pandas/tests/extension/test_external_block.py b/pandas/tests/extension/test_external_block.py
index 1960e3d09..e9046be15 100644
--- a/pandas/tests/extension/test_external_block.py
+++ b/pandas/tests/extension/test_external_block.py
@@ -17,9 +17,8 @@ class CustomBlock(ExtensionBlock):
         always 1D in this custom Block
         """
         values = np.concatenate([blk.values for blk in to_concat])
-        return self.make_block_same_class(
-            values, placement=placement or slice(0, len(values), 1)
-        )
+        placement = self.mgr_locs if self.ndim == 2 else slice(len(values))
+        return self.make_block_same_class(values, placement=placement)
 
 
 @pytest.fixture
