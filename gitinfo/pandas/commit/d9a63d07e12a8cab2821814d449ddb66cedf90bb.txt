commit d9a63d07e12a8cab2821814d449ddb66cedf90bb
Author: JimStearns206 <jimstearns206@gmail.com>
Date:   Tue May 23 09:52:44 2017 -0700

    BUG: Render empty DataFrame as empty HTML table w/o raising IndexError. (#16441)
    
    * BUG: Render empty DataFrame as empty HTML table w/o raising IndexError.
    
    * TST: Test rendering of 2 empty-ish DataFrames (#15953)
    
    DataFrame with an index but no column, and one with a column but no index.
    Add entry to whatsnew.

diff --git a/doc/source/whatsnew/v0.20.2.txt b/doc/source/whatsnew/v0.20.2.txt
index d5fd879d3..b4675e03c 100644
--- a/doc/source/whatsnew/v0.20.2.txt
+++ b/doc/source/whatsnew/v0.20.2.txt
@@ -54,6 +54,7 @@ I/O
 ^^^
 
 - Bug that would force importing of the clipboard routines unnecessarily, potentially causing an import error on startup (:issue:`16288`)
+- Bug that raised IndexError HTML-rendering an empty DataFrame (:issue:`15953`)
 
 
 Plotting
diff --git a/pandas/io/formats/style.py b/pandas/io/formats/style.py
index eac82ddde..3d7e0fcdc 100644
--- a/pandas/io/formats/style.py
+++ b/pandas/io/formats/style.py
@@ -238,24 +238,25 @@ class Styler(object):
                            "class": " ".join(cs),
                            "is_visible": True})
 
-            for c, value in enumerate(clabels[r]):
-                cs = [COL_HEADING_CLASS, "level%s" % r, "col%s" % c]
-                cs.extend(cell_context.get(
-                    "col_headings", {}).get(r, {}).get(c, []))
-                es = {
-                    "type": "th",
-                    "value": value,
-                    "display_value": value,
-                    "class": " ".join(cs),
-                    "is_visible": _is_visible(c, r, col_lengths),
-                }
-                colspan = col_lengths.get((r, c), 0)
-                if colspan > 1:
-                    es["attributes"] = [
-                        format_attr({"key": "colspan", "value": colspan})
-                    ]
-                row_es.append(es)
-            head.append(row_es)
+            if clabels:
+                for c, value in enumerate(clabels[r]):
+                    cs = [COL_HEADING_CLASS, "level%s" % r, "col%s" % c]
+                    cs.extend(cell_context.get(
+                        "col_headings", {}).get(r, {}).get(c, []))
+                    es = {
+                        "type": "th",
+                        "value": value,
+                        "display_value": value,
+                        "class": " ".join(cs),
+                        "is_visible": _is_visible(c, r, col_lengths),
+                    }
+                    colspan = col_lengths.get((r, c), 0)
+                    if colspan > 1:
+                        es["attributes"] = [
+                            format_attr({"key": "colspan", "value": colspan})
+                        ]
+                    row_es.append(es)
+                head.append(row_es)
 
         if self.data.index.names and not all(x is None
                                              for x in self.data.index.names):
diff --git a/pandas/tests/io/formats/test_style.py b/pandas/tests/io/formats/test_style.py
index ee7356f12..9911888f7 100644
--- a/pandas/tests/io/formats/test_style.py
+++ b/pandas/tests/io/formats/test_style.py
@@ -103,6 +103,16 @@ class TestStyler(object):
         s.render()
         # it worked?
 
+    def test_render_empty_dfs(self):
+        empty_df = DataFrame()
+        es = Styler(empty_df)
+        es.render()
+        # An index but no columns
+        DataFrame(columns=['a']).style.render()
+        # A column but no index
+        DataFrame(index=['a']).style.render()
+        # No IndexError raised?
+
     def test_render_double(self):
         df = pd.DataFrame({"A": [0, 1]})
         style = lambda x: pd.Series(["color: red; border: 1px",
