commit 399a96b609802c5259c4f471efad3b9843abaacc
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Thu Feb 22 03:12:52 2018 -0800

    fix Timedelta.__mul__(NaT) (#19819)

diff --git a/doc/source/whatsnew/v0.23.0.txt b/doc/source/whatsnew/v0.23.0.txt
index 1ae15f363..b2ac6ecc7 100644
--- a/doc/source/whatsnew/v0.23.0.txt
+++ b/doc/source/whatsnew/v0.23.0.txt
@@ -757,6 +757,7 @@ Datetimelike
 Timedelta
 ^^^^^^^^^
 
+- Bug in :func:`Timedelta.__mul__` where multiplying by ``NaT`` returned ``NaT`` instead of raising a ``TypeError`` (:issue:`19819`)
 - Bug in :class:`Series` with ``dtype='timedelta64[ns]`` where addition or subtraction of ``TimedeltaIndex`` had results cast to ``dtype='int64'`` (:issue:`17250`)
 - Bug in :class:`Series` with ``dtype='timedelta64[ns]`` where addition or subtraction of ``TimedeltaIndex`` could return a ``Series`` with an incorrect name (:issue:`19043`)
 - Bug in :func:`Timedelta.__floordiv__` and :func:`Timedelta.__rfloordiv__` dividing by many incompatible numpy objects was incorrectly allowed (:issue:`18846`)
diff --git a/pandas/_libs/tslibs/timedeltas.pyx b/pandas/_libs/tslibs/timedeltas.pyx
index 78fdeb988..1285cbb9f 100644
--- a/pandas/_libs/tslibs/timedeltas.pyx
+++ b/pandas/_libs/tslibs/timedeltas.pyx
@@ -1057,7 +1057,7 @@ class Timedelta(_Timedelta):
             return other * self.to_timedelta64()
 
         elif other is NaT:
-            return NaT
+            raise TypeError('Cannot multiply Timedelta with NaT')
 
         elif not (is_integer_object(other) or is_float_object(other)):
             # only integers and floats allowed
diff --git a/pandas/tests/scalar/timedelta/test_arithmetic.py b/pandas/tests/scalar/timedelta/test_arithmetic.py
index 48da23f35..8460633fe 100644
--- a/pandas/tests/scalar/timedelta/test_arithmetic.py
+++ b/pandas/tests/scalar/timedelta/test_arithmetic.py
@@ -216,6 +216,16 @@ class TestTimedeltaMultiplicationDivision(object):
     # ---------------------------------------------------------------
     # Timedelta.__mul__, __rmul__
 
+    @pytest.mark.parametrize('td_nat', [pd.NaT,
+                                        np.timedelta64('NaT', 'ns'),
+                                        np.timedelta64('NaT')])
+    @pytest.mark.parametrize('op', [operator.mul, ops.rmul])
+    def test_td_mul_nat(self, op, td_nat):
+        # GH#19819
+        td = Timedelta(10, unit='d')
+        with pytest.raises(TypeError):
+            op(td, td_nat)
+
     @pytest.mark.parametrize('op', [operator.mul, ops.rmul])
     def test_td_mul_scalar(self, op):
         # GH#19738
diff --git a/pandas/tests/scalar/timedelta/test_timedelta.py b/pandas/tests/scalar/timedelta/test_timedelta.py
index 4257c610f..a80c5d661 100644
--- a/pandas/tests/scalar/timedelta/test_timedelta.py
+++ b/pandas/tests/scalar/timedelta/test_timedelta.py
@@ -62,11 +62,6 @@ class TestTimedeltaArithmetic(object):
         assert abs(-td) == td
         assert abs(-td) == Timedelta('10d')
 
-    def test_binary_ops_nat(self):
-        td = Timedelta(10, unit='d')
-        # FIXME: The next test is wrong: td * NaT should raise
-        assert (td * pd.NaT) is pd.NaT
-
 
 class TestTimedeltaComparison(object):
     def test_comparison_object_array(self):
