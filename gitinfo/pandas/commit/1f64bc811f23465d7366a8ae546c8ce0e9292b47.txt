commit 1f64bc811f23465d7366a8ae546c8ce0e9292b47
Author: jreback <jeff@reback.net>
Date:   Thu Aug 7 09:25:12 2014 -0400

    API: raise on __nonzero__ for Index (GH7897)

diff --git a/doc/source/v0.15.0.txt b/doc/source/v0.15.0.txt
index d8e5587e8..252001558 100644
--- a/doc/source/v0.15.0.txt
+++ b/doc/source/v0.15.0.txt
@@ -173,6 +173,7 @@ a transparent change with only very limited API implications (:issue:`5080`, :is
 
 - you may need to unpickle pandas version < 0.15.0 pickles using ``pd.read_pickle`` rather than ``pickle.load``. See :ref:`pickle docs <io.pickle>`
 - when plotting with a ``PeriodIndex``. The ``matplotlib`` internal axes will now be arrays of ``Period`` rather than a ``PeriodIndex``. (this is similar to how a ``DatetimeIndex`` passes arrays of ``datetimes`` now)
+- MultiIndexes will now raise similary to other pandas objects w.r.t. truth testing, See :ref:`here <gotchas.truth>` (:issue:`7897`).
 
 .. _whatsnew_0150.cat:
 
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 53da7eb8c..4f4fe092a 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -838,6 +838,13 @@ class Index(IndexOpsMixin, PandasObject):
     def __deepcopy__(self, memo={}):
         return self.copy(deep=True)
 
+    def __nonzero__(self):
+        raise ValueError("The truth value of a {0} is ambiguous. "
+                         "Use a.empty, a.bool(), a.item(), a.any() or a.all()."
+                         .format(self.__class__.__name__))
+
+    __bool__ = __nonzero__
+
     def __contains__(self, key):
         hash(key)
         # work around some kind of odd cython bug
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 5affdbe1c..416241355 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -74,6 +74,15 @@ class Base(object):
                               "cannot perform floor division",
                               lambda : 1 // idx)
 
+    def test_boolean_context_compat(self):
+
+        # boolean context compat
+        idx = self.create_index()
+        def f():
+            if idx:
+                pass
+        tm.assertRaisesRegexp(ValueError,'The truth value of a',f)
+
 class TestIndex(Base, tm.TestCase):
     _holder = Index
     _multiprocess_can_split_ = True
@@ -1656,6 +1665,19 @@ class TestMultiIndex(Base, tm.TestCase):
     def create_index(self):
         return self.index
 
+    def test_boolean_context_compat2(self):
+
+        # boolean context compat
+        # GH7897
+        i1 = MultiIndex.from_tuples([('A', 1), ('A', 2)])
+        i2 = MultiIndex.from_tuples([('A', 1), ('A', 3)])
+        common = i1.intersection(i2)
+
+        def f():
+            if common:
+                pass
+        tm.assertRaisesRegexp(ValueError,'The truth value of a',f)
+
     def test_hash_error(self):
         with tm.assertRaisesRegexp(TypeError,
                                    "unhashable type: %r" %
