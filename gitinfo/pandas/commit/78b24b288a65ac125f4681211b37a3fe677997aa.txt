commit 78b24b288a65ac125f4681211b37a3fe677997aa
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Sun Nov 26 07:06:08 2017 -0800

    parametrize offsets tests (#18494)

diff --git a/asv_bench/benchmarks/offset.py b/asv_bench/benchmarks/offset.py
new file mode 100644
index 000000000..ea826e827
--- /dev/null
+++ b/asv_bench/benchmarks/offset.py
@@ -0,0 +1,239 @@
+# -*- coding: utf-8 -*-
+from datetime import datetime
+
+import numpy as np
+
+import pandas as pd
+from pandas import date_range
+
+try:
+    import pandas.tseries.holiday
+except ImportError:
+    pass
+
+hcal = pd.tseries.holiday.USFederalHolidayCalendar()
+
+
+class ApplyIndex(object):
+    goal_time = 0.2
+
+    params = [pd.offsets.YearEnd(), pd.offsets.YearBegin(),
+              pd.offsets.BYearEnd(), pd.offsets.BYearBegin(),
+              pd.offsets.QuarterEnd(), pd.offsets.QuarterBegin(),
+              pd.offsets.BQuarterEnd(), pd.offsets.BQuarterBegin(),
+              pd.offsets.MonthEnd(), pd.offsets.MonthBegin(),
+              pd.offsets.BMonthEnd(), pd.offsets.BMonthBegin()]
+
+    def setup(self, param):
+        self.offset = param
+
+        self.N = 100000
+        self.rng = date_range(start='1/1/2000', periods=self.N, freq='T')
+        self.ser = pd.Series(self.rng)
+
+    def time_apply_index(self, param):
+        self.rng + self.offset
+
+    def time_apply_series(self, param):
+        self.ser + self.offset
+
+
+class DatetimeIndexArithmetic(object):
+    goal_time = 0.2
+
+    def setup(self):
+        self.N = 100000
+        self.rng = date_range(start='1/1/2000', periods=self.N, freq='T')
+        self.day_offset = pd.offsets.Day()
+        self.relativedelta_offset = pd.offsets.DateOffset(months=2, days=2)
+        self.busday_offset = pd.offsets.BusinessDay()
+
+    def time_add_offset_delta(self):
+        self.rng + self.day_offset
+
+    def time_add_offset_fast(self):
+        self.rng + self.relativedelta_offset
+
+    def time_add_offset_slow(self):
+        self.rng + self.busday_offset
+
+
+class SeriesArithmetic(object):
+    goal_time = 0.2
+
+    def setup(self):
+        self.N = 100000
+        rng = date_range(start='20140101', freq='T', periods=self.N)
+        self.ser = pd.Series(rng)
+        self.day_offset = pd.offsets.Day()
+        self.relativedelta_offset = pd.offsets.DateOffset(months=2, days=2)
+        self.busday_offset = pd.offsets.BusinessDay()
+
+    def time_add_offset_delta(self):
+        self.ser + self.day_offset
+
+    def time_add_offset_fast(self):
+        self.ser + self.relativedelta_offset
+
+    def time_add_offset_slow(self):
+        self.ser + self.busday_offset
+
+
+class YearBegin(object):
+    goal_time = 0.2
+
+    def setup(self):
+        self.date = datetime(2011, 1, 1)
+        self.year = pd.offsets.YearBegin()
+
+    def time_timeseries_year_apply(self):
+        self.year.apply(self.date)
+
+    def time_timeseries_year_incr(self):
+        self.date + self.year
+
+
+class Day(object):
+    goal_time = 0.2
+
+    def setup(self):
+        self.date = datetime(2011, 1, 1)
+        self.day = pd.offsets.Day()
+
+    def time_timeseries_day_apply(self):
+        self.day.apply(self.date)
+
+    def time_timeseries_day_incr(self):
+        self.date + self.day
+
+
+class CBDay(object):
+    goal_time = 0.2
+
+    def setup(self):
+        self.date = datetime(2011, 1, 1)
+        self.dt64 = np.datetime64('2011-01-01 09:00Z')
+        self.cday = pd.offsets.CustomBusinessDay()
+
+    def time_custom_bday_decr(self):
+        self.date - self.cday
+
+    def time_custom_bday_incr(self):
+        self.date + self.cday
+
+    def time_custom_bday_apply(self):
+        self.cday.apply(self.date)
+
+    def time_custom_bday_apply_dt64(self):
+        self.cday.apply(self.dt64)
+
+
+class CBDayHolidays(object):
+    goal_time = 0.2
+
+    def setup(self):
+        self.date = datetime(2011, 1, 1)
+        self.cdayh = pd.offsets.CustomBusinessDay(calendar=hcal)
+
+    def time_custom_bday_cal_incr(self):
+        self.date + 1 * self.cdayh
+
+    def time_custom_bday_cal_decr(self):
+        self.date - 1 * self.cdayh
+
+    def time_custom_bday_cal_incr_n(self):
+        self.date + 10 * self.cdayh
+
+    def time_custom_bday_cal_incr_neg_n(self):
+        self.date - 10 * self.cdayh
+
+
+class CBMonthBegin(object):
+    goal_time = 0.2
+
+    def setup(self):
+        self.date = datetime(2011, 1, 1)
+        self.cmb = pd.offsets.CustomBusinessMonthBegin(calendar=hcal)
+
+    def time_custom_bmonthbegin_decr_n(self):
+        self.date - (10 * self.cmb)
+
+    def time_custom_bmonthbegin_incr_n(self):
+        self.date + (10 * self.cmb)
+
+
+class CBMonthEnd(object):
+    goal_time = 0.2
+
+    def setup(self):
+        self.date = datetime(2011, 1, 1)
+        self.cme = pd.offsets.CustomBusinessMonthEnd(calendar=hcal)
+
+    def time_custom_bmonthend_incr(self):
+        self.date + self.cme
+
+    def time_custom_bmonthend_incr_n(self):
+        self.date + (10 * self.cme)
+
+    def time_custom_bmonthend_decr_n(self):
+        self.date - (10 * self.cme)
+
+
+class SemiMonthOffset(object):
+    goal_time = 0.2
+
+    def setup(self):
+        self.N = 100000
+        self.rng = date_range(start='1/1/2000', periods=self.N, freq='T')
+        # date is not on an offset which will be slowest case
+        self.date = datetime(2011, 1, 2)
+        self.semi_month_end = pd.offsets.SemiMonthEnd()
+        self.semi_month_begin = pd.offsets.SemiMonthBegin()
+
+    def time_end_apply(self):
+        self.semi_month_end.apply(self.date)
+
+    def time_end_incr(self):
+        self.date + self.semi_month_end
+
+    def time_end_incr_n(self):
+        self.date + 10 * self.semi_month_end
+
+    def time_end_decr(self):
+        self.date - self.semi_month_end
+
+    def time_end_decr_n(self):
+        self.date - 10 * self.semi_month_end
+
+    def time_end_apply_index(self):
+        self.semi_month_end.apply_index(self.rng)
+
+    def time_end_incr_rng(self):
+        self.rng + self.semi_month_end
+
+    def time_end_decr_rng(self):
+        self.rng - self.semi_month_end
+
+    def time_begin_apply(self):
+        self.semi_month_begin.apply(self.date)
+
+    def time_begin_incr(self):
+        self.date + self.semi_month_begin
+
+    def time_begin_incr_n(self):
+        self.date + 10 * self.semi_month_begin
+
+    def time_begin_decr(self):
+        self.date - self.semi_month_begin
+
+    def time_begin_decr_n(self):
+        self.date - 10 * self.semi_month_begin
+
+    def time_begin_apply_index(self):
+        self.semi_month_begin.apply_index(self.rng)
+
+    def time_begin_incr_rng(self):
+        self.rng + self.semi_month_begin
+
+    def time_begin_decr_rng(self):
+        self.rng - self.semi_month_begin
diff --git a/asv_bench/benchmarks/timeseries.py b/asv_bench/benchmarks/timeseries.py
index 2ca2416f5..b3996739e 100644
--- a/asv_bench/benchmarks/timeseries.py
+++ b/asv_bench/benchmarks/timeseries.py
@@ -2,13 +2,11 @@ try:
     from pandas.plotting._converter import DatetimeConverter
 except ImportError:
     from pandas.tseries.converter import DatetimeConverter
-from .pandas_vb_common import *
+
 import pandas as pd
+from pandas import to_datetime, date_range, Series, DataFrame, period_range
+
 import datetime as dt
-try:
-    import pandas.tseries.holiday
-except ImportError:
-    pass
 from pandas.tseries.frequencies import infer_freq
 import numpy as np
 
@@ -22,32 +20,38 @@ class DatetimeIndex(object):
     def setup(self):
         self.N = 100000
         self.rng = date_range(start='1/1/2000', periods=self.N, freq='T')
-        self.delta_offset = pd.offsets.Day()
-        self.fast_offset = pd.offsets.DateOffset(months=2, days=2)
-        self.slow_offset = pd.offsets.BusinessDay()
 
-        self.rng2 = date_range(start='1/1/2000 9:30', periods=10000, freq='S', tz='US/Eastern')
+        self.rng2 = date_range(start='1/1/2000 9:30', periods=10000,
+                               freq='S', tz='US/Eastern')
 
-        self.index_repeated = date_range(start='1/1/2000', periods=1000, freq='T').repeat(10)
+        self.index_repeated = date_range(start='1/1/2000',
+                                         periods=1000, freq='T').repeat(10)
 
         self.rng3 = date_range(start='1/1/2000', periods=1000, freq='H')
         self.df = DataFrame(np.random.randn(len(self.rng3), 2), self.rng3)
 
-        self.rng4 = date_range(start='1/1/2000', periods=1000, freq='H', tz='US/Eastern')
-        self.df2 = DataFrame(np.random.randn(len(self.rng4), 2), index=self.rng4)
+        self.rng4 = date_range(start='1/1/2000', periods=1000,
+                               freq='H', tz='US/Eastern')
+        self.df2 = DataFrame(np.random.randn(len(self.rng4), 2),
+                             index=self.rng4)
 
         N = 100000
         self.dti = pd.date_range('2011-01-01', freq='H', periods=N).repeat(5)
         self.dti_tz = pd.date_range('2011-01-01', freq='H', periods=N,
                                     tz='Asia/Tokyo').repeat(5)
 
-        self.rng5 = date_range(start='1/1/2000', end='3/1/2000', tz='US/Eastern')
+        self.rng5 = date_range(start='1/1/2000',
+                               end='3/1/2000', tz='US/Eastern')
 
-        self.dst_rng = date_range(start='10/29/2000 1:00:00', end='10/29/2000 1:59:59', freq='S')
-        self.index = date_range(start='10/29/2000', end='10/29/2000 00:59:59', freq='S')
+        self.dst_rng = date_range(start='10/29/2000 1:00:00',
+                                  end='10/29/2000 1:59:59', freq='S')
+        self.index = date_range(start='10/29/2000',
+                                end='10/29/2000 00:59:59', freq='S')
         self.index = self.index.append(self.dst_rng)
         self.index = self.index.append(self.dst_rng)
-        self.index = self.index.append(date_range(start='10/29/2000 2:00:00', end='10/29/2000 3:00:00', freq='S'))
+        self.index = self.index.append(date_range(start='10/29/2000 2:00:00',
+                                                  end='10/29/2000 3:00:00',
+                                                  freq='S'))
 
         self.N = 10000
         self.rng6 = date_range(start='1/1/1', periods=self.N, freq='B')
@@ -62,15 +66,6 @@ class DatetimeIndex(object):
     def time_add_timedelta(self):
         (self.rng + dt.timedelta(minutes=2))
 
-    def time_add_offset_delta(self):
-        (self.rng + self.delta_offset)
-
-    def time_add_offset_fast(self):
-        (self.rng + self.fast_offset)
-
-    def time_add_offset_slow(self):
-        (self.rng + self.slow_offset)
-
     def time_normalize(self):
         self.rng2.normalize()
 
@@ -116,6 +111,7 @@ class DatetimeIndex(object):
     def time_to_pydatetime(self):
         self.rng.to_pydatetime()
 
+
 class TimeDatetimeConverter(object):
     goal_time = 0.2
 
@@ -156,7 +152,7 @@ class Iteration(object):
         self.iter_n(self.idx2, self.M)
 
 
-#----------------------------------------------------------------------
+# ----------------------------------------------------------------------
 # Resampling
 
 class ResampleDataFrame(object):
@@ -195,7 +191,8 @@ class ResampleSeries(object):
         self.rng2 = date_range(start='1/1/2000', end='1/1/2001', freq='T')
         self.ts2 = Series(np.random.randn(len(self.rng2)), index=self.rng2)
 
-        self.rng3 = date_range(start='2000-01-01 00:00:00', end='2000-01-01 10:00:00', freq='555000U')
+        self.rng3 = date_range(start='2000-01-01 00:00:00',
+                               end='2000-01-01 10:00:00', freq='555000U')
         self.int_ts = Series(5, self.rng3, dtype='int64')
         self.dt_ts = self.int_ts.astype('datetime64[ns]')
 
@@ -223,7 +220,8 @@ class AsOf(object):
         self.N = 10000
         self.rng = date_range(start='1/1/1990', periods=self.N, freq='53s')
         self.ts = Series(np.random.randn(self.N), index=self.rng)
-        self.dates = date_range(start='1/1/1990', periods=(self.N * 10), freq='5s')
+        self.dates = date_range(start='1/1/1990',
+                                periods=(self.N * 10), freq='5s')
         self.ts2 = self.ts.copy()
         self.ts2[250:5000] = np.nan
         self.ts3 = self.ts.copy()
@@ -261,7 +259,8 @@ class AsOfDataFrame(object):
         self.N = 10000
         self.M = 100
         self.rng = date_range(start='1/1/1990', periods=self.N, freq='53s')
-        self.dates = date_range(start='1/1/1990', periods=(self.N * 10), freq='5s')
+        self.dates = date_range(start='1/1/1990',
+                                periods=(self.N * 10), freq='5s')
         self.ts = DataFrame(np.random.randn(self.N, self.M), index=self.rng)
         self.ts2 = self.ts.copy()
         self.ts2.iloc[250:5000] = np.nan
@@ -306,8 +305,10 @@ class TimeSeries(object):
 
         self.lindex = np.random.permutation(self.N)[:(self.N // 2)]
         self.rindex = np.random.permutation(self.N)[:(self.N // 2)]
-        self.left = Series(self.ts2.values.take(self.lindex), index=self.ts2.index.take(self.lindex))
-        self.right = Series(self.ts2.values.take(self.rindex), index=self.ts2.index.take(self.rindex))
+        self.left = Series(self.ts2.values.take(self.lindex),
+                           index=self.ts2.index.take(self.lindex))
+        self.right = Series(self.ts2.values.take(self.rindex),
+                            index=self.ts2.index.take(self.rindex))
 
         self.rng3 = date_range(start='1/1/2000', periods=1500000, freq='S')
         self.ts3 = Series(1, index=self.rng3)
@@ -329,26 +330,6 @@ class TimeSeries(object):
         self.ts3.index._cleanup()
 
 
-class SeriesArithmetic(object):
-    goal_time = 0.2
-
-    def setup(self):
-        self.N = 100000
-        self.s = Series(date_range(start='20140101', freq='T', periods=self.N))
-        self.delta_offset = pd.offsets.Day()
-        self.fast_offset = pd.offsets.DateOffset(months=2, days=2)
-        self.slow_offset = pd.offsets.BusinessDay()
-
-    def time_add_offset_delta(self):
-        (self.s + self.delta_offset)
-
-    def time_add_offset_fast(self):
-        (self.s + self.fast_offset)
-
-    def time_add_offset_slow(self):
-        (self.s + self.slow_offset)
-
-
 class ToDatetime(object):
     goal_time = 0.2
 
@@ -425,136 +406,6 @@ class ToDatetime(object):
         to_datetime(self.dup_string_with_tz, cache=False)
 
 
-class Offsets(object):
-    goal_time = 0.2
-
-    def setup(self):
-        self.date = dt.datetime(2011, 1, 1)
-        self.dt64 = np.datetime64('2011-01-01 09:00Z')
-        self.hcal = pd.tseries.holiday.USFederalHolidayCalendar()
-        self.day = pd.offsets.Day()
-        self.year = pd.offsets.YearBegin()
-        self.cday = pd.offsets.CustomBusinessDay()
-        self.cmb = pd.offsets.CustomBusinessMonthBegin(calendar=self.hcal)
-        self.cme = pd.offsets.CustomBusinessMonthEnd(calendar=self.hcal)
-        self.cdayh = pd.offsets.CustomBusinessDay(calendar=self.hcal)
-
-    def time_timeseries_day_apply(self):
-        self.day.apply(self.date)
-
-    def time_timeseries_day_incr(self):
-        (self.date + self.day)
-
-    def time_timeseries_year_apply(self):
-        self.year.apply(self.date)
-
-    def time_timeseries_year_incr(self):
-        (self.date + self.year)
-
-    # custom business offsets
-
-    def time_custom_bday_decr(self):
-        (self.date - self.cday)
-
-    def time_custom_bday_incr(self):
-        (self.date + self.cday)
-
-    def time_custom_bday_apply(self):
-        self.cday.apply(self.date)
-
-    def time_custom_bday_apply_dt64(self):
-        self.cday.apply(self.dt64)
-
-    def time_custom_bday_cal_incr(self):
-        self.date + 1 * self.cdayh
-
-    def time_custom_bday_cal_decr(self):
-        self.date - 1 * self.cdayh
-
-    def time_custom_bday_cal_incr_n(self):
-        self.date + 10 * self.cdayh
-
-    def time_custom_bday_cal_incr_neg_n(self):
-        self.date - 10 * self.cdayh
-
-    # Increment custom business month
-
-    def time_custom_bmonthend_incr(self):
-        (self.date + self.cme)
-
-    def time_custom_bmonthend_incr_n(self):
-        (self.date + (10 * self.cme))
-
-    def time_custom_bmonthend_decr_n(self):
-        (self.date - (10 * self.cme))
-
-    def time_custom_bmonthbegin_decr_n(self):
-        (self.date - (10 * self.cmb))
-
-    def time_custom_bmonthbegin_incr_n(self):
-        (self.date + (10 * self.cmb))
-
-
-class SemiMonthOffset(object):
-    goal_time = 0.2
-
-    def setup(self):
-        self.N = 100000
-        self.rng = date_range(start='1/1/2000', periods=self.N, freq='T')
-        # date is not on an offset which will be slowest case
-        self.date = dt.datetime(2011, 1, 2)
-        self.semi_month_end = pd.offsets.SemiMonthEnd()
-        self.semi_month_begin = pd.offsets.SemiMonthBegin()
-
-    def time_end_apply(self):
-        self.semi_month_end.apply(self.date)
-
-    def time_end_incr(self):
-        self.date + self.semi_month_end
-
-    def time_end_incr_n(self):
-        self.date + 10 * self.semi_month_end
-
-    def time_end_decr(self):
-        self.date - self.semi_month_end
-
-    def time_end_decr_n(self):
-        self.date - 10 * self.semi_month_end
-
-    def time_end_apply_index(self):
-        self.semi_month_end.apply_index(self.rng)
-
-    def time_end_incr_rng(self):
-        self.rng + self.semi_month_end
-
-    def time_end_decr_rng(self):
-        self.rng - self.semi_month_end
-
-    def time_begin_apply(self):
-        self.semi_month_begin.apply(self.date)
-
-    def time_begin_incr(self):
-        self.date + self.semi_month_begin
-
-    def time_begin_incr_n(self):
-        self.date + 10 * self.semi_month_begin
-
-    def time_begin_decr(self):
-        self.date - self.semi_month_begin
-
-    def time_begin_decr_n(self):
-        self.date - 10 * self.semi_month_begin
-
-    def time_begin_apply_index(self):
-        self.semi_month_begin.apply_index(self.rng)
-
-    def time_begin_incr_rng(self):
-        self.rng + self.semi_month_begin
-
-    def time_begin_decr_rng(self):
-        self.rng - self.semi_month_begin
-
-
 class DatetimeAccessor(object):
     def setup(self):
         self.N = 100000
diff --git a/pandas/tests/tseries/offsets/test_fiscal.py b/pandas/tests/tseries/offsets/test_fiscal.py
new file mode 100644
index 000000000..45f12c693
--- /dev/null
+++ b/pandas/tests/tseries/offsets/test_fiscal.py
@@ -0,0 +1,606 @@
+# -*- coding: utf-8 -*-
+"""
+Tests for Fiscal Year and Fiscal Quarter offset classes
+"""
+from datetime import datetime
+
+from dateutil.relativedelta import relativedelta
+import pytest
+
+import pandas.util.testing as tm
+
+from pandas.tseries.frequencies import get_offset, _INVALID_FREQ_ERROR
+from pandas.tseries.offsets import FY5253Quarter, FY5253
+from pandas._libs.tslibs.offsets import WeekDay
+
+from .common import assert_offset_equal, assert_onOffset
+from .test_offsets import Base
+
+
+def makeFY5253LastOfMonthQuarter(*args, **kwds):
+    return FY5253Quarter(*args, variation="last", **kwds)
+
+
+def makeFY5253NearestEndMonthQuarter(*args, **kwds):
+    return FY5253Quarter(*args, variation="nearest", **kwds)
+
+
+def makeFY5253NearestEndMonth(*args, **kwds):
+    return FY5253(*args, variation="nearest", **kwds)
+
+
+def makeFY5253LastOfMonth(*args, **kwds):
+    return FY5253(*args, variation="last", **kwds)
+
+
+def test_get_offset_name():
+    assert (makeFY5253LastOfMonthQuarter(
+            weekday=1, startingMonth=3,
+            qtr_with_extra_week=4).freqstr == "REQ-L-MAR-TUE-4")
+    assert (makeFY5253NearestEndMonthQuarter(
+            weekday=1, startingMonth=3,
+            qtr_with_extra_week=3).freqstr == "REQ-N-MAR-TUE-3")
+
+
+def test_get_offset():
+    with tm.assert_raises_regex(ValueError, _INVALID_FREQ_ERROR):
+        get_offset('gibberish')
+    with tm.assert_raises_regex(ValueError, _INVALID_FREQ_ERROR):
+        get_offset('QS-JAN-B')
+
+    pairs = [
+        ("RE-N-DEC-MON",
+         makeFY5253NearestEndMonth(weekday=0, startingMonth=12)),
+        ("RE-L-DEC-TUE",
+         makeFY5253LastOfMonth(weekday=1, startingMonth=12)),
+        ("REQ-L-MAR-TUE-4",
+         makeFY5253LastOfMonthQuarter(weekday=1,
+                                      startingMonth=3,
+                                      qtr_with_extra_week=4)),
+        ("REQ-L-DEC-MON-3",
+         makeFY5253LastOfMonthQuarter(weekday=0,
+                                      startingMonth=12,
+                                      qtr_with_extra_week=3)),
+        ("REQ-N-DEC-MON-3",
+         makeFY5253NearestEndMonthQuarter(weekday=0,
+                                          startingMonth=12,
+                                          qtr_with_extra_week=3))]
+
+    for name, expected in pairs:
+        offset = get_offset(name)
+        assert offset == expected, ("Expected %r to yield %r (actual: %r)" %
+                                    (name, expected, offset))
+
+
+class TestFY5253LastOfMonth(Base):
+    offset_lom_sat_aug = makeFY5253LastOfMonth(1, startingMonth=8,
+                                               weekday=WeekDay.SAT)
+    offset_lom_sat_sep = makeFY5253LastOfMonth(1, startingMonth=9,
+                                               weekday=WeekDay.SAT)
+
+    on_offset_cases = [
+        # From Wikipedia (see:
+        # http://en.wikipedia.org/wiki/4%E2%80%934%E2%80%935_calendar#Last_Saturday_of_the_month_at_fiscal_year_end)
+        (offset_lom_sat_aug, datetime(2006, 8, 26), True),
+        (offset_lom_sat_aug, datetime(2007, 8, 25), True),
+        (offset_lom_sat_aug, datetime(2008, 8, 30), True),
+        (offset_lom_sat_aug, datetime(2009, 8, 29), True),
+        (offset_lom_sat_aug, datetime(2010, 8, 28), True),
+        (offset_lom_sat_aug, datetime(2011, 8, 27), True),
+        (offset_lom_sat_aug, datetime(2012, 8, 25), True),
+        (offset_lom_sat_aug, datetime(2013, 8, 31), True),
+        (offset_lom_sat_aug, datetime(2014, 8, 30), True),
+        (offset_lom_sat_aug, datetime(2015, 8, 29), True),
+        (offset_lom_sat_aug, datetime(2016, 8, 27), True),
+        (offset_lom_sat_aug, datetime(2017, 8, 26), True),
+        (offset_lom_sat_aug, datetime(2018, 8, 25), True),
+        (offset_lom_sat_aug, datetime(2019, 8, 31), True),
+
+        (offset_lom_sat_aug, datetime(2006, 8, 27), False),
+        (offset_lom_sat_aug, datetime(2007, 8, 28), False),
+        (offset_lom_sat_aug, datetime(2008, 8, 31), False),
+        (offset_lom_sat_aug, datetime(2009, 8, 30), False),
+        (offset_lom_sat_aug, datetime(2010, 8, 29), False),
+        (offset_lom_sat_aug, datetime(2011, 8, 28), False),
+
+        (offset_lom_sat_aug, datetime(2006, 8, 25), False),
+        (offset_lom_sat_aug, datetime(2007, 8, 24), False),
+        (offset_lom_sat_aug, datetime(2008, 8, 29), False),
+        (offset_lom_sat_aug, datetime(2009, 8, 28), False),
+        (offset_lom_sat_aug, datetime(2010, 8, 27), False),
+        (offset_lom_sat_aug, datetime(2011, 8, 26), False),
+        (offset_lom_sat_aug, datetime(2019, 8, 30), False),
+
+        # From GMCR (see for example:
+        # http://yahoo.brand.edgar-online.com/Default.aspx?
+        # companyid=3184&formtypeID=7)
+        (offset_lom_sat_sep, datetime(2010, 9, 25), True),
+        (offset_lom_sat_sep, datetime(2011, 9, 24), True),
+        (offset_lom_sat_sep, datetime(2012, 9, 29), True)]
+
+    @pytest.mark.parametrize('case', on_offset_cases)
+    def test_onOffset(self, case):
+        offset, dt, expected = case
+        assert_onOffset(offset, dt, expected)
+
+    def test_apply(self):
+        offset_lom_aug_sat = makeFY5253LastOfMonth(startingMonth=8,
+                                                   weekday=WeekDay.SAT)
+        offset_lom_aug_sat_1 = makeFY5253LastOfMonth(n=1, startingMonth=8,
+                                                     weekday=WeekDay.SAT)
+
+        date_seq_lom_aug_sat = [datetime(2006, 8, 26), datetime(2007, 8, 25),
+                                datetime(2008, 8, 30), datetime(2009, 8, 29),
+                                datetime(2010, 8, 28), datetime(2011, 8, 27),
+                                datetime(2012, 8, 25), datetime(2013, 8, 31),
+                                datetime(2014, 8, 30), datetime(2015, 8, 29),
+                                datetime(2016, 8, 27)]
+
+        tests = [
+            (offset_lom_aug_sat, date_seq_lom_aug_sat),
+            (offset_lom_aug_sat_1, date_seq_lom_aug_sat),
+            (offset_lom_aug_sat, [
+                datetime(2006, 8, 25)] + date_seq_lom_aug_sat),
+            (offset_lom_aug_sat_1, [
+                datetime(2006, 8, 27)] + date_seq_lom_aug_sat[1:]),
+            (makeFY5253LastOfMonth(n=-1, startingMonth=8,
+                                   weekday=WeekDay.SAT),
+             list(reversed(date_seq_lom_aug_sat))),
+        ]
+        for test in tests:
+            offset, data = test
+            current = data[0]
+            for datum in data[1:]:
+                current = current + offset
+                assert current == datum
+
+
+class TestFY5253NearestEndMonth(Base):
+
+    def test_get_target_month_end(self):
+        assert (makeFY5253NearestEndMonth(
+            startingMonth=8, weekday=WeekDay.SAT).get_target_month_end(
+            datetime(2013, 1, 1)) == datetime(2013, 8, 31))
+        assert (makeFY5253NearestEndMonth(
+            startingMonth=12, weekday=WeekDay.SAT).get_target_month_end(
+            datetime(2013, 1, 1)) == datetime(2013, 12, 31))
+        assert (makeFY5253NearestEndMonth(
+            startingMonth=2, weekday=WeekDay.SAT).get_target_month_end(
+            datetime(2013, 1, 1)) == datetime(2013, 2, 28))
+
+    def test_get_year_end(self):
+        assert (makeFY5253NearestEndMonth(
+            startingMonth=8, weekday=WeekDay.SAT).get_year_end(
+            datetime(2013, 1, 1)) == datetime(2013, 8, 31))
+        assert (makeFY5253NearestEndMonth(
+            startingMonth=8, weekday=WeekDay.SUN).get_year_end(
+            datetime(2013, 1, 1)) == datetime(2013, 9, 1))
+        assert (makeFY5253NearestEndMonth(
+            startingMonth=8, weekday=WeekDay.FRI).get_year_end(
+            datetime(2013, 1, 1)) == datetime(2013, 8, 30))
+
+        offset_n = FY5253(weekday=WeekDay.TUE, startingMonth=12,
+                          variation="nearest")
+        assert (offset_n.get_year_end(datetime(2012, 1, 1)) ==
+                datetime(2013, 1, 1))
+        assert (offset_n.get_year_end(datetime(2012, 1, 10)) ==
+                datetime(2013, 1, 1))
+
+        assert (offset_n.get_year_end(datetime(2013, 1, 1)) ==
+                datetime(2013, 12, 31))
+        assert (offset_n.get_year_end(datetime(2013, 1, 2)) ==
+                datetime(2013, 12, 31))
+        assert (offset_n.get_year_end(datetime(2013, 1, 3)) ==
+                datetime(2013, 12, 31))
+        assert (offset_n.get_year_end(datetime(2013, 1, 10)) ==
+                datetime(2013, 12, 31))
+
+        JNJ = FY5253(n=1, startingMonth=12, weekday=6, variation="nearest")
+        assert (JNJ.get_year_end(datetime(2006, 1, 1)) ==
+                datetime(2006, 12, 31))
+
+    offset_lom_aug_sat = makeFY5253NearestEndMonth(1, startingMonth=8,
+                                                   weekday=WeekDay.SAT)
+    offset_lom_aug_thu = makeFY5253NearestEndMonth(1, startingMonth=8,
+                                                   weekday=WeekDay.THU)
+    offset_n = FY5253(weekday=WeekDay.TUE, startingMonth=12,
+                      variation="nearest")
+
+    on_offset_cases = [
+        #    From Wikipedia (see:
+        #    http://en.wikipedia.org/wiki/4%E2%80%934%E2%80%935_calendar
+        #    #Saturday_nearest_the_end_of_month)
+        #    2006-09-02   2006 September 2
+        #    2007-09-01   2007 September 1
+        #    2008-08-30   2008 August 30    (leap year)
+        #    2009-08-29   2009 August 29
+        #    2010-08-28   2010 August 28
+        #    2011-09-03   2011 September 3
+        #    2012-09-01   2012 September 1  (leap year)
+        #    2013-08-31   2013 August 31
+        #    2014-08-30   2014 August 30
+        #    2015-08-29   2015 August 29
+        #    2016-09-03   2016 September 3  (leap year)
+        #    2017-09-02   2017 September 2
+        #    2018-09-01   2018 September 1
+        #    2019-08-31   2019 August 31
+        (offset_lom_aug_sat, datetime(2006, 9, 2), True),
+        (offset_lom_aug_sat, datetime(2007, 9, 1), True),
+        (offset_lom_aug_sat, datetime(2008, 8, 30), True),
+        (offset_lom_aug_sat, datetime(2009, 8, 29), True),
+        (offset_lom_aug_sat, datetime(2010, 8, 28), True),
+        (offset_lom_aug_sat, datetime(2011, 9, 3), True),
+
+        (offset_lom_aug_sat, datetime(2016, 9, 3), True),
+        (offset_lom_aug_sat, datetime(2017, 9, 2), True),
+        (offset_lom_aug_sat, datetime(2018, 9, 1), True),
+        (offset_lom_aug_sat, datetime(2019, 8, 31), True),
+
+        (offset_lom_aug_sat, datetime(2006, 8, 27), False),
+        (offset_lom_aug_sat, datetime(2007, 8, 28), False),
+        (offset_lom_aug_sat, datetime(2008, 8, 31), False),
+        (offset_lom_aug_sat, datetime(2009, 8, 30), False),
+        (offset_lom_aug_sat, datetime(2010, 8, 29), False),
+        (offset_lom_aug_sat, datetime(2011, 8, 28), False),
+
+        (offset_lom_aug_sat, datetime(2006, 8, 25), False),
+        (offset_lom_aug_sat, datetime(2007, 8, 24), False),
+        (offset_lom_aug_sat, datetime(2008, 8, 29), False),
+        (offset_lom_aug_sat, datetime(2009, 8, 28), False),
+        (offset_lom_aug_sat, datetime(2010, 8, 27), False),
+        (offset_lom_aug_sat, datetime(2011, 8, 26), False),
+        (offset_lom_aug_sat, datetime(2019, 8, 30), False),
+
+        # From Micron, see:
+        # http://google.brand.edgar-online.com/?sym=MU&formtypeID=7
+        (offset_lom_aug_thu, datetime(2012, 8, 30), True),
+        (offset_lom_aug_thu, datetime(2011, 9, 1), True),
+
+        (offset_n, datetime(2012, 12, 31), False),
+        (offset_n, datetime(2013, 1, 1), True),
+        (offset_n, datetime(2013, 1, 2), False)]
+
+    @pytest.mark.parametrize('case', on_offset_cases)
+    def test_onOffset(self, case):
+        offset, dt, expected = case
+        assert_onOffset(offset, dt, expected)
+
+    def test_apply(self):
+        date_seq_nem_8_sat = [datetime(2006, 9, 2), datetime(2007, 9, 1),
+                              datetime(2008, 8, 30), datetime(2009, 8, 29),
+                              datetime(2010, 8, 28), datetime(2011, 9, 3)]
+
+        JNJ = [datetime(2005, 1, 2), datetime(2006, 1, 1),
+               datetime(2006, 12, 31), datetime(2007, 12, 30),
+               datetime(2008, 12, 28), datetime(2010, 1, 3),
+               datetime(2011, 1, 2), datetime(2012, 1, 1),
+               datetime(2012, 12, 30)]
+
+        DEC_SAT = FY5253(n=-1, startingMonth=12, weekday=5,
+                         variation="nearest")
+
+        tests = [
+            (makeFY5253NearestEndMonth(startingMonth=8,
+                                       weekday=WeekDay.SAT),
+             date_seq_nem_8_sat),
+            (makeFY5253NearestEndMonth(n=1, startingMonth=8,
+                                       weekday=WeekDay.SAT),
+             date_seq_nem_8_sat),
+            (makeFY5253NearestEndMonth(startingMonth=8, weekday=WeekDay.SAT),
+             [datetime(2006, 9, 1)] + date_seq_nem_8_sat),
+            (makeFY5253NearestEndMonth(n=1, startingMonth=8,
+                                       weekday=WeekDay.SAT),
+             [datetime(2006, 9, 3)] + date_seq_nem_8_sat[1:]),
+            (makeFY5253NearestEndMonth(n=-1, startingMonth=8,
+                                       weekday=WeekDay.SAT),
+             list(reversed(date_seq_nem_8_sat))),
+            (makeFY5253NearestEndMonth(n=1, startingMonth=12,
+                                       weekday=WeekDay.SUN), JNJ),
+            (makeFY5253NearestEndMonth(n=-1, startingMonth=12,
+                                       weekday=WeekDay.SUN),
+             list(reversed(JNJ))),
+            (makeFY5253NearestEndMonth(n=1, startingMonth=12,
+                                       weekday=WeekDay.SUN),
+             [datetime(2005, 1, 2), datetime(2006, 1, 1)]),
+            (makeFY5253NearestEndMonth(n=1, startingMonth=12,
+                                       weekday=WeekDay.SUN),
+             [datetime(2006, 1, 2), datetime(2006, 12, 31)]),
+            (DEC_SAT, [datetime(2013, 1, 15), datetime(2012, 12, 29)])
+        ]
+        for test in tests:
+            offset, data = test
+            current = data[0]
+            for datum in data[1:]:
+                current = current + offset
+                assert current == datum
+
+
+class TestFY5253LastOfMonthQuarter(Base):
+
+    def test_isAnchored(self):
+        assert makeFY5253LastOfMonthQuarter(
+            startingMonth=1, weekday=WeekDay.SAT,
+            qtr_with_extra_week=4).isAnchored()
+        assert makeFY5253LastOfMonthQuarter(
+            weekday=WeekDay.SAT, startingMonth=3,
+            qtr_with_extra_week=4).isAnchored()
+        assert not makeFY5253LastOfMonthQuarter(
+            2, startingMonth=1, weekday=WeekDay.SAT,
+            qtr_with_extra_week=4).isAnchored()
+
+    def test_equality(self):
+        assert (makeFY5253LastOfMonthQuarter(
+            startingMonth=1, weekday=WeekDay.SAT,
+            qtr_with_extra_week=4) == makeFY5253LastOfMonthQuarter(
+            startingMonth=1, weekday=WeekDay.SAT, qtr_with_extra_week=4))
+        assert (makeFY5253LastOfMonthQuarter(
+            startingMonth=1, weekday=WeekDay.SAT,
+            qtr_with_extra_week=4) != makeFY5253LastOfMonthQuarter(
+            startingMonth=1, weekday=WeekDay.SUN, qtr_with_extra_week=4))
+        assert (makeFY5253LastOfMonthQuarter(
+            startingMonth=1, weekday=WeekDay.SAT,
+            qtr_with_extra_week=4) != makeFY5253LastOfMonthQuarter(
+            startingMonth=2, weekday=WeekDay.SAT, qtr_with_extra_week=4))
+
+    def test_offset(self):
+        offset = makeFY5253LastOfMonthQuarter(1, startingMonth=9,
+                                              weekday=WeekDay.SAT,
+                                              qtr_with_extra_week=4)
+        offset2 = makeFY5253LastOfMonthQuarter(2, startingMonth=9,
+                                               weekday=WeekDay.SAT,
+                                               qtr_with_extra_week=4)
+        offset4 = makeFY5253LastOfMonthQuarter(4, startingMonth=9,
+                                               weekday=WeekDay.SAT,
+                                               qtr_with_extra_week=4)
+
+        offset_neg1 = makeFY5253LastOfMonthQuarter(-1, startingMonth=9,
+                                                   weekday=WeekDay.SAT,
+                                                   qtr_with_extra_week=4)
+        offset_neg2 = makeFY5253LastOfMonthQuarter(-2, startingMonth=9,
+                                                   weekday=WeekDay.SAT,
+                                                   qtr_with_extra_week=4)
+
+        GMCR = [datetime(2010, 3, 27), datetime(2010, 6, 26),
+                datetime(2010, 9, 25), datetime(2010, 12, 25),
+                datetime(2011, 3, 26), datetime(2011, 6, 25),
+                datetime(2011, 9, 24), datetime(2011, 12, 24),
+                datetime(2012, 3, 24), datetime(2012, 6, 23),
+                datetime(2012, 9, 29), datetime(2012, 12, 29),
+                datetime(2013, 3, 30), datetime(2013, 6, 29)]
+
+        assert_offset_equal(offset, base=GMCR[0], expected=GMCR[1])
+        assert_offset_equal(offset, base=GMCR[0] + relativedelta(days=-1),
+                            expected=GMCR[0])
+        assert_offset_equal(offset, base=GMCR[1], expected=GMCR[2])
+
+        assert_offset_equal(offset2, base=GMCR[0], expected=GMCR[2])
+        assert_offset_equal(offset4, base=GMCR[0], expected=GMCR[4])
+
+        assert_offset_equal(offset_neg1, base=GMCR[-1], expected=GMCR[-2])
+        assert_offset_equal(offset_neg1,
+                            base=GMCR[-1] + relativedelta(days=+1),
+                            expected=GMCR[-1])
+        assert_offset_equal(offset_neg2, base=GMCR[-1], expected=GMCR[-3])
+
+        date = GMCR[0] + relativedelta(days=-1)
+        for expected in GMCR:
+            assert_offset_equal(offset, date, expected)
+            date = date + offset
+
+        date = GMCR[-1] + relativedelta(days=+1)
+        for expected in reversed(GMCR):
+            assert_offset_equal(offset_neg1, date, expected)
+            date = date + offset_neg1
+
+    lomq_aug_sat_4 = makeFY5253LastOfMonthQuarter(1, startingMonth=8,
+                                                  weekday=WeekDay.SAT,
+                                                  qtr_with_extra_week=4)
+    lomq_sep_sat_4 = makeFY5253LastOfMonthQuarter(1, startingMonth=9,
+                                                  weekday=WeekDay.SAT,
+                                                  qtr_with_extra_week=4)
+
+    on_offset_cases = [
+        # From Wikipedia
+        (lomq_aug_sat_4, datetime(2006, 8, 26), True),
+        (lomq_aug_sat_4, datetime(2007, 8, 25), True),
+        (lomq_aug_sat_4, datetime(2008, 8, 30), True),
+        (lomq_aug_sat_4, datetime(2009, 8, 29), True),
+        (lomq_aug_sat_4, datetime(2010, 8, 28), True),
+        (lomq_aug_sat_4, datetime(2011, 8, 27), True),
+        (lomq_aug_sat_4, datetime(2019, 8, 31), True),
+
+        (lomq_aug_sat_4, datetime(2006, 8, 27), False),
+        (lomq_aug_sat_4, datetime(2007, 8, 28), False),
+        (lomq_aug_sat_4, datetime(2008, 8, 31), False),
+        (lomq_aug_sat_4, datetime(2009, 8, 30), False),
+        (lomq_aug_sat_4, datetime(2010, 8, 29), False),
+        (lomq_aug_sat_4, datetime(2011, 8, 28), False),
+
+        (lomq_aug_sat_4, datetime(2006, 8, 25), False),
+        (lomq_aug_sat_4, datetime(2007, 8, 24), False),
+        (lomq_aug_sat_4, datetime(2008, 8, 29), False),
+        (lomq_aug_sat_4, datetime(2009, 8, 28), False),
+        (lomq_aug_sat_4, datetime(2010, 8, 27), False),
+        (lomq_aug_sat_4, datetime(2011, 8, 26), False),
+        (lomq_aug_sat_4, datetime(2019, 8, 30), False),
+
+        # From GMCR
+        (lomq_sep_sat_4, datetime(2010, 9, 25), True),
+        (lomq_sep_sat_4, datetime(2011, 9, 24), True),
+        (lomq_sep_sat_4, datetime(2012, 9, 29), True),
+
+        (lomq_sep_sat_4, datetime(2013, 6, 29), True),
+        (lomq_sep_sat_4, datetime(2012, 6, 23), True),
+        (lomq_sep_sat_4, datetime(2012, 6, 30), False),
+
+        (lomq_sep_sat_4, datetime(2013, 3, 30), True),
+        (lomq_sep_sat_4, datetime(2012, 3, 24), True),
+
+        (lomq_sep_sat_4, datetime(2012, 12, 29), True),
+        (lomq_sep_sat_4, datetime(2011, 12, 24), True),
+
+        # INTC (extra week in Q1)
+        # See: http://www.intc.com/releasedetail.cfm?ReleaseID=542844
+        (makeFY5253LastOfMonthQuarter(1, startingMonth=12,
+                                      weekday=WeekDay.SAT,
+                                      qtr_with_extra_week=1),
+         datetime(2011, 4, 2), True),
+
+        # see: http://google.brand.edgar-online.com/?sym=INTC&formtypeID=7
+        (makeFY5253LastOfMonthQuarter(1, startingMonth=12,
+                                      weekday=WeekDay.SAT,
+                                      qtr_with_extra_week=1),
+         datetime(2012, 12, 29), True),
+        (makeFY5253LastOfMonthQuarter(1, startingMonth=12,
+                                      weekday=WeekDay.SAT,
+                                      qtr_with_extra_week=1),
+         datetime(2011, 12, 31), True),
+        (makeFY5253LastOfMonthQuarter(1, startingMonth=12,
+                                      weekday=WeekDay.SAT,
+                                      qtr_with_extra_week=1),
+         datetime(2010, 12, 25), True)]
+
+    @pytest.mark.parametrize('case', on_offset_cases)
+    def test_onOffset(self, case):
+        offset, dt, expected = case
+        assert_onOffset(offset, dt, expected)
+
+    def test_year_has_extra_week(self):
+        # End of long Q1
+        assert makeFY5253LastOfMonthQuarter(
+            1, startingMonth=12, weekday=WeekDay.SAT,
+            qtr_with_extra_week=1).year_has_extra_week(datetime(2011, 4, 2))
+
+        # Start of long Q1
+        assert makeFY5253LastOfMonthQuarter(
+            1, startingMonth=12, weekday=WeekDay.SAT,
+            qtr_with_extra_week=1).year_has_extra_week(datetime(2010, 12, 26))
+
+        # End of year before year with long Q1
+        assert not makeFY5253LastOfMonthQuarter(
+            1, startingMonth=12, weekday=WeekDay.SAT,
+            qtr_with_extra_week=1).year_has_extra_week(datetime(2010, 12, 25))
+
+        for year in [x
+                     for x in range(1994, 2011 + 1)
+                     if x not in [2011, 2005, 2000, 1994]]:
+            assert not makeFY5253LastOfMonthQuarter(
+                1, startingMonth=12, weekday=WeekDay.SAT,
+                qtr_with_extra_week=1).year_has_extra_week(
+                datetime(year, 4, 2))
+
+        # Other long years
+        assert makeFY5253LastOfMonthQuarter(
+            1, startingMonth=12, weekday=WeekDay.SAT,
+            qtr_with_extra_week=1).year_has_extra_week(datetime(2005, 4, 2))
+
+        assert makeFY5253LastOfMonthQuarter(
+            1, startingMonth=12, weekday=WeekDay.SAT,
+            qtr_with_extra_week=1).year_has_extra_week(datetime(2000, 4, 2))
+
+        assert makeFY5253LastOfMonthQuarter(
+            1, startingMonth=12, weekday=WeekDay.SAT,
+            qtr_with_extra_week=1).year_has_extra_week(datetime(1994, 4, 2))
+
+    def test_get_weeks(self):
+        sat_dec_1 = makeFY5253LastOfMonthQuarter(1, startingMonth=12,
+                                                 weekday=WeekDay.SAT,
+                                                 qtr_with_extra_week=1)
+        sat_dec_4 = makeFY5253LastOfMonthQuarter(1, startingMonth=12,
+                                                 weekday=WeekDay.SAT,
+                                                 qtr_with_extra_week=4)
+
+        assert sat_dec_1.get_weeks(datetime(2011, 4, 2)) == [14, 13, 13, 13]
+        assert sat_dec_4.get_weeks(datetime(2011, 4, 2)) == [13, 13, 13, 14]
+        assert sat_dec_1.get_weeks(datetime(2010, 12, 25)) == [13, 13, 13, 13]
+
+
+class TestFY5253NearestEndMonthQuarter(Base):
+
+    offset_nem_sat_aug_4 = makeFY5253NearestEndMonthQuarter(
+        1, startingMonth=8, weekday=WeekDay.SAT,
+        qtr_with_extra_week=4)
+    offset_nem_thu_aug_4 = makeFY5253NearestEndMonthQuarter(
+        1, startingMonth=8, weekday=WeekDay.THU,
+        qtr_with_extra_week=4)
+    offset_n = FY5253(weekday=WeekDay.TUE, startingMonth=12,
+                      variation="nearest")
+
+    on_offset_cases = [
+        # From Wikipedia
+        (offset_nem_sat_aug_4, datetime(2006, 9, 2), True),
+        (offset_nem_sat_aug_4, datetime(2007, 9, 1), True),
+        (offset_nem_sat_aug_4, datetime(2008, 8, 30), True),
+        (offset_nem_sat_aug_4, datetime(2009, 8, 29), True),
+        (offset_nem_sat_aug_4, datetime(2010, 8, 28), True),
+        (offset_nem_sat_aug_4, datetime(2011, 9, 3), True),
+
+        (offset_nem_sat_aug_4, datetime(2016, 9, 3), True),
+        (offset_nem_sat_aug_4, datetime(2017, 9, 2), True),
+        (offset_nem_sat_aug_4, datetime(2018, 9, 1), True),
+        (offset_nem_sat_aug_4, datetime(2019, 8, 31), True),
+
+        (offset_nem_sat_aug_4, datetime(2006, 8, 27), False),
+        (offset_nem_sat_aug_4, datetime(2007, 8, 28), False),
+        (offset_nem_sat_aug_4, datetime(2008, 8, 31), False),
+        (offset_nem_sat_aug_4, datetime(2009, 8, 30), False),
+        (offset_nem_sat_aug_4, datetime(2010, 8, 29), False),
+        (offset_nem_sat_aug_4, datetime(2011, 8, 28), False),
+
+        (offset_nem_sat_aug_4, datetime(2006, 8, 25), False),
+        (offset_nem_sat_aug_4, datetime(2007, 8, 24), False),
+        (offset_nem_sat_aug_4, datetime(2008, 8, 29), False),
+        (offset_nem_sat_aug_4, datetime(2009, 8, 28), False),
+        (offset_nem_sat_aug_4, datetime(2010, 8, 27), False),
+        (offset_nem_sat_aug_4, datetime(2011, 8, 26), False),
+        (offset_nem_sat_aug_4, datetime(2019, 8, 30), False),
+
+        # From Micron, see:
+        # http://google.brand.edgar-online.com/?sym=MU&formtypeID=7
+        (offset_nem_thu_aug_4, datetime(2012, 8, 30), True),
+        (offset_nem_thu_aug_4, datetime(2011, 9, 1), True),
+
+        # See: http://google.brand.edgar-online.com/?sym=MU&formtypeID=13
+        (offset_nem_thu_aug_4, datetime(2013, 5, 30), True),
+        (offset_nem_thu_aug_4, datetime(2013, 2, 28), True),
+        (offset_nem_thu_aug_4, datetime(2012, 11, 29), True),
+        (offset_nem_thu_aug_4, datetime(2012, 5, 31), True),
+        (offset_nem_thu_aug_4, datetime(2007, 3, 1), True),
+        (offset_nem_thu_aug_4, datetime(1994, 3, 3), True),
+
+        (offset_n, datetime(2012, 12, 31), False),
+        (offset_n, datetime(2013, 1, 1), True),
+        (offset_n, datetime(2013, 1, 2), False)]
+
+    @pytest.mark.parametrize('case', on_offset_cases)
+    def test_onOffset(self, case):
+        offset, dt, expected = case
+        assert_onOffset(offset, dt, expected)
+
+    def test_offset(self):
+        offset = makeFY5253NearestEndMonthQuarter(1, startingMonth=8,
+                                                  weekday=WeekDay.THU,
+                                                  qtr_with_extra_week=4)
+
+        MU = [datetime(2012, 5, 31),
+              datetime(2012, 8, 30), datetime(2012, 11, 29),
+              datetime(2013, 2, 28), datetime(2013, 5, 30)]
+
+        date = MU[0] + relativedelta(days=-1)
+        for expected in MU:
+            assert_offset_equal(offset, date, expected)
+            date = date + offset
+
+        assert_offset_equal(offset,
+                            datetime(2012, 5, 31),
+                            datetime(2012, 8, 30))
+        assert_offset_equal(offset,
+                            datetime(2012, 5, 30),
+                            datetime(2012, 5, 31))
+
+        offset2 = FY5253Quarter(weekday=5, startingMonth=12, variation="last",
+                                qtr_with_extra_week=4)
+
+        assert_offset_equal(offset2,
+                            datetime(2013, 1, 15),
+                            datetime(2013, 3, 30))
diff --git a/pandas/tests/tseries/offsets/test_offsets.py b/pandas/tests/tseries/offsets/test_offsets.py
index 357c95282..d6b64896b 100644
--- a/pandas/tests/tseries/offsets/test_offsets.py
+++ b/pandas/tests/tseries/offsets/test_offsets.py
@@ -1,7 +1,6 @@
 import os
 from distutils.version import LooseVersion
 from datetime import date, datetime, timedelta
-from dateutil.relativedelta import relativedelta
 
 import pytest
 from pandas.compat import range
@@ -621,50 +620,50 @@ class TestBusinessDay(Base):
         for offset, d, expected in tests:
             assert_onOffset(offset, d, expected)
 
-    def test_apply(self):
-        tests = []
-
-        tests.append((BDay(), {datetime(2008, 1, 1): datetime(2008, 1, 2),
-                               datetime(2008, 1, 4): datetime(2008, 1, 7),
-                               datetime(2008, 1, 5): datetime(2008, 1, 7),
-                               datetime(2008, 1, 6): datetime(2008, 1, 7),
-                               datetime(2008, 1, 7): datetime(2008, 1, 8)}))
-
-        tests.append((2 * BDay(), {datetime(2008, 1, 1): datetime(2008, 1, 3),
-                                   datetime(2008, 1, 4): datetime(2008, 1, 8),
-                                   datetime(2008, 1, 5): datetime(2008, 1, 8),
-                                   datetime(2008, 1, 6): datetime(2008, 1, 8),
-                                   datetime(2008, 1, 7): datetime(2008, 1, 9)}
-                      ))
-
-        tests.append((-BDay(), {datetime(2008, 1, 1): datetime(2007, 12, 31),
-                                datetime(2008, 1, 4): datetime(2008, 1, 3),
-                                datetime(2008, 1, 5): datetime(2008, 1, 4),
-                                datetime(2008, 1, 6): datetime(2008, 1, 4),
-                                datetime(2008, 1, 7): datetime(2008, 1, 4),
-                                datetime(2008, 1, 8): datetime(2008, 1, 7)}
-                      ))
-
-        tests.append((-2 * BDay(), {
-            datetime(2008, 1, 1): datetime(2007, 12, 28),
-            datetime(2008, 1, 4): datetime(2008, 1, 2),
-            datetime(2008, 1, 5): datetime(2008, 1, 3),
-            datetime(2008, 1, 6): datetime(2008, 1, 3),
-            datetime(2008, 1, 7): datetime(2008, 1, 3),
-            datetime(2008, 1, 8): datetime(2008, 1, 4),
-            datetime(2008, 1, 9): datetime(2008, 1, 7)}
-        ))
-
-        tests.append((BDay(0), {datetime(2008, 1, 1): datetime(2008, 1, 1),
-                                datetime(2008, 1, 4): datetime(2008, 1, 4),
-                                datetime(2008, 1, 5): datetime(2008, 1, 7),
-                                datetime(2008, 1, 6): datetime(2008, 1, 7),
-                                datetime(2008, 1, 7): datetime(2008, 1, 7)}
-                      ))
+    apply_cases = []
+    apply_cases.append((BDay(), {
+        datetime(2008, 1, 1): datetime(2008, 1, 2),
+        datetime(2008, 1, 4): datetime(2008, 1, 7),
+        datetime(2008, 1, 5): datetime(2008, 1, 7),
+        datetime(2008, 1, 6): datetime(2008, 1, 7),
+        datetime(2008, 1, 7): datetime(2008, 1, 8)}))
+
+    apply_cases.append((2 * BDay(), {
+        datetime(2008, 1, 1): datetime(2008, 1, 3),
+        datetime(2008, 1, 4): datetime(2008, 1, 8),
+        datetime(2008, 1, 5): datetime(2008, 1, 8),
+        datetime(2008, 1, 6): datetime(2008, 1, 8),
+        datetime(2008, 1, 7): datetime(2008, 1, 9)}))
+
+    apply_cases.append((-BDay(), {
+        datetime(2008, 1, 1): datetime(2007, 12, 31),
+        datetime(2008, 1, 4): datetime(2008, 1, 3),
+        datetime(2008, 1, 5): datetime(2008, 1, 4),
+        datetime(2008, 1, 6): datetime(2008, 1, 4),
+        datetime(2008, 1, 7): datetime(2008, 1, 4),
+        datetime(2008, 1, 8): datetime(2008, 1, 7)}))
+
+    apply_cases.append((-2 * BDay(), {
+        datetime(2008, 1, 1): datetime(2007, 12, 28),
+        datetime(2008, 1, 4): datetime(2008, 1, 2),
+        datetime(2008, 1, 5): datetime(2008, 1, 3),
+        datetime(2008, 1, 6): datetime(2008, 1, 3),
+        datetime(2008, 1, 7): datetime(2008, 1, 3),
+        datetime(2008, 1, 8): datetime(2008, 1, 4),
+        datetime(2008, 1, 9): datetime(2008, 1, 7)}))
+
+    apply_cases.append((BDay(0), {
+        datetime(2008, 1, 1): datetime(2008, 1, 1),
+        datetime(2008, 1, 4): datetime(2008, 1, 4),
+        datetime(2008, 1, 5): datetime(2008, 1, 7),
+        datetime(2008, 1, 6): datetime(2008, 1, 7),
+        datetime(2008, 1, 7): datetime(2008, 1, 7)}))
 
-        for offset, cases in tests:
-            for base, expected in compat.iteritems(cases):
-                assert_offset_equal(offset, base, expected)
+    @pytest.mark.parametrize('case', apply_cases)
+    def test_apply(self, case):
+        offset, cases = case
+        for base, expected in compat.iteritems(cases):
+            assert_offset_equal(offset, base, expected)
 
     def test_apply_large_n(self):
         dt = datetime(2012, 10, 23)
@@ -851,483 +850,469 @@ class TestBusinessHour(Base):
         result = offset.rollforward(dt)
         assert result == datetime(2014, 7, 7, 9)
 
-    def test_normalize(self):
-        tests = []
-
-        tests.append((BusinessHour(normalize=True),
-                      {datetime(2014, 7, 1, 8): datetime(2014, 7, 1),
-                       datetime(2014, 7, 1, 17): datetime(2014, 7, 2),
-                       datetime(2014, 7, 1, 16): datetime(2014, 7, 2),
-                       datetime(2014, 7, 1, 23): datetime(2014, 7, 2),
-                       datetime(2014, 7, 1, 0): datetime(2014, 7, 1),
-                       datetime(2014, 7, 4, 15): datetime(2014, 7, 4),
-                       datetime(2014, 7, 4, 15, 59): datetime(2014, 7, 4),
-                       datetime(2014, 7, 4, 16, 30): datetime(2014, 7, 7),
-                       datetime(2014, 7, 5, 23): datetime(2014, 7, 7),
-                       datetime(2014, 7, 6, 10): datetime(2014, 7, 7)}))
-
-        tests.append((BusinessHour(-1, normalize=True),
-                      {datetime(2014, 7, 1, 8): datetime(2014, 6, 30),
-                       datetime(2014, 7, 1, 17): datetime(2014, 7, 1),
-                       datetime(2014, 7, 1, 16): datetime(2014, 7, 1),
-                       datetime(2014, 7, 1, 10): datetime(2014, 6, 30),
-                       datetime(2014, 7, 1, 0): datetime(2014, 6, 30),
-                       datetime(2014, 7, 7, 10): datetime(2014, 7, 4),
-                       datetime(2014, 7, 7, 10, 1): datetime(2014, 7, 7),
-                       datetime(2014, 7, 5, 23): datetime(2014, 7, 4),
-                       datetime(2014, 7, 6, 10): datetime(2014, 7, 4)}))
-
-        tests.append((BusinessHour(1, normalize=True, start='17:00',
-                                   end='04:00'),
-                      {datetime(2014, 7, 1, 8): datetime(2014, 7, 1),
-                       datetime(2014, 7, 1, 17): datetime(2014, 7, 1),
-                       datetime(2014, 7, 1, 23): datetime(2014, 7, 2),
-                       datetime(2014, 7, 2, 2): datetime(2014, 7, 2),
-                       datetime(2014, 7, 2, 3): datetime(2014, 7, 2),
-                       datetime(2014, 7, 4, 23): datetime(2014, 7, 5),
-                       datetime(2014, 7, 5, 2): datetime(2014, 7, 5),
-                       datetime(2014, 7, 7, 2): datetime(2014, 7, 7),
-                       datetime(2014, 7, 7, 17): datetime(2014, 7, 7)}))
-
-        for offset, cases in tests:
-            for dt, expected in compat.iteritems(cases):
-                assert offset.apply(dt) == expected
-
-    def test_onOffset(self):
-        tests = []
-
-        tests.append((BusinessHour(), {datetime(2014, 7, 1, 9): True,
-                                       datetime(2014, 7, 1, 8, 59): False,
-                                       datetime(2014, 7, 1, 8): False,
-                                       datetime(2014, 7, 1, 17): True,
-                                       datetime(2014, 7, 1, 17, 1): False,
-                                       datetime(2014, 7, 1, 18): False,
-                                       datetime(2014, 7, 5, 9): False,
-                                       datetime(2014, 7, 6, 12): False}))
-
-        tests.append((BusinessHour(start='10:00', end='15:00'),
-                      {datetime(2014, 7, 1, 9): False,
-                       datetime(2014, 7, 1, 10): True,
-                       datetime(2014, 7, 1, 15): True,
-                       datetime(2014, 7, 1, 15, 1): False,
-                       datetime(2014, 7, 5, 12): False,
-                       datetime(2014, 7, 6, 12): False}))
-
-        tests.append((BusinessHour(start='19:00', end='05:00'),
-                      {datetime(2014, 7, 1, 9, 0): False,
-                       datetime(2014, 7, 1, 10, 0): False,
-                       datetime(2014, 7, 1, 15): False,
-                       datetime(2014, 7, 1, 15, 1): False,
-                       datetime(2014, 7, 5, 12, 0): False,
-                       datetime(2014, 7, 6, 12, 0): False,
-                       datetime(2014, 7, 1, 19, 0): True,
-                       datetime(2014, 7, 2, 0, 0): True,
-                       datetime(2014, 7, 4, 23): True,
-                       datetime(2014, 7, 5, 1): True,
-                       datetime(2014, 7, 5, 5, 0): True,
-                       datetime(2014, 7, 6, 23, 0): False,
-                       datetime(2014, 7, 7, 3, 0): False}))
-
-        for offset, cases in tests:
-            for dt, expected in compat.iteritems(cases):
-                assert offset.onOffset(dt) == expected
-
-    def test_opening_time(self):
-        tests = []
-
-        # opening time should be affected by sign of n, not by n's value and
-        # end
-        tests.append((
-            [BusinessHour(), BusinessHour(n=2), BusinessHour(
-                n=4), BusinessHour(end='10:00'), BusinessHour(n=2, end='4:00'),
-             BusinessHour(n=4, end='15:00')],
-            {datetime(2014, 7, 1, 11): (datetime(2014, 7, 2, 9), datetime(
-                2014, 7, 1, 9)),
-             datetime(2014, 7, 1, 18): (datetime(2014, 7, 2, 9), datetime(
-                 2014, 7, 1, 9)),
-             datetime(2014, 7, 1, 23): (datetime(2014, 7, 2, 9), datetime(
-                 2014, 7, 1, 9)),
-             datetime(2014, 7, 2, 8): (datetime(2014, 7, 2, 9), datetime(
-                 2014, 7, 1, 9)),
-             # if timestamp is on opening time, next opening time is
-             # as it is
-             datetime(2014, 7, 2, 9): (datetime(2014, 7, 2, 9), datetime(
-                 2014, 7, 2, 9)),
-             datetime(2014, 7, 2, 10): (datetime(2014, 7, 3, 9), datetime(
-                 2014, 7, 2, 9)),
-             # 2014-07-05 is saturday
-             datetime(2014, 7, 5, 10): (datetime(2014, 7, 7, 9), datetime(
-                 2014, 7, 4, 9)),
-             datetime(2014, 7, 4, 10): (datetime(2014, 7, 7, 9), datetime(
-                 2014, 7, 4, 9)),
-             datetime(2014, 7, 4, 23): (datetime(2014, 7, 7, 9), datetime(
-                 2014, 7, 4, 9)),
-             datetime(2014, 7, 6, 10): (datetime(2014, 7, 7, 9), datetime(
-                 2014, 7, 4, 9)),
-             datetime(2014, 7, 7, 5): (datetime(2014, 7, 7, 9), datetime(
-                 2014, 7, 4, 9)),
-             datetime(2014, 7, 7, 9, 1): (datetime(2014, 7, 8, 9), datetime(
-                 2014, 7, 7, 9))}))
-
-        tests.append(([BusinessHour(start='11:15'),
-                       BusinessHour(n=2, start='11:15'),
-                       BusinessHour(n=3, start='11:15'),
-                       BusinessHour(start='11:15', end='10:00'),
-                       BusinessHour(n=2, start='11:15', end='4:00'),
-                       BusinessHour(n=3, start='11:15', end='15:00')],
-                      {datetime(2014, 7, 1, 11): (datetime(
-                          2014, 7, 1, 11, 15), datetime(2014, 6, 30, 11, 15)),
-                       datetime(2014, 7, 1, 18): (datetime(
-                           2014, 7, 2, 11, 15), datetime(2014, 7, 1, 11, 15)),
-                       datetime(2014, 7, 1, 23): (datetime(
-                           2014, 7, 2, 11, 15), datetime(2014, 7, 1, 11, 15)),
-                       datetime(2014, 7, 2, 8): (datetime(2014, 7, 2, 11, 15),
-                                                 datetime(2014, 7, 1, 11, 15)),
-                       datetime(2014, 7, 2, 9): (datetime(2014, 7, 2, 11, 15),
-                                                 datetime(2014, 7, 1, 11, 15)),
-                       datetime(2014, 7, 2, 10): (datetime(
-                           2014, 7, 2, 11, 15), datetime(2014, 7, 1, 11, 15)),
-                       datetime(2014, 7, 2, 11, 15): (datetime(
-                           2014, 7, 2, 11, 15), datetime(2014, 7, 2, 11, 15)),
-                       datetime(2014, 7, 2, 11, 15, 1): (datetime(
-                           2014, 7, 3, 11, 15), datetime(2014, 7, 2, 11, 15)),
-                       datetime(2014, 7, 5, 10): (datetime(
-                           2014, 7, 7, 11, 15), datetime(2014, 7, 4, 11, 15)),
-                       datetime(2014, 7, 4, 10): (datetime(
-                           2014, 7, 4, 11, 15), datetime(2014, 7, 3, 11, 15)),
-                       datetime(2014, 7, 4, 23): (datetime(
-                           2014, 7, 7, 11, 15), datetime(2014, 7, 4, 11, 15)),
-                       datetime(2014, 7, 6, 10): (datetime(
-                           2014, 7, 7, 11, 15), datetime(2014, 7, 4, 11, 15)),
-                       datetime(2014, 7, 7, 5): (datetime(2014, 7, 7, 11, 15),
-                                                 datetime(2014, 7, 4, 11, 15)),
-                       datetime(2014, 7, 7, 9, 1): (
-                           datetime(2014, 7, 7, 11, 15),
-                           datetime(2014, 7, 4, 11, 15))}))
-
-        tests.append(([BusinessHour(-1), BusinessHour(n=-2),
-                       BusinessHour(n=-4),
-                       BusinessHour(n=-1, end='10:00'),
-                       BusinessHour(n=-2, end='4:00'),
-                       BusinessHour(n=-4, end='15:00')],
-                      {datetime(2014, 7, 1, 11): (datetime(2014, 7, 1, 9),
-                                                  datetime(2014, 7, 2, 9)),
-                       datetime(2014, 7, 1, 18): (datetime(2014, 7, 1, 9),
-                                                  datetime(2014, 7, 2, 9)),
-                       datetime(2014, 7, 1, 23): (datetime(2014, 7, 1, 9),
-                                                  datetime(2014, 7, 2, 9)),
-                       datetime(2014, 7, 2, 8): (datetime(2014, 7, 1, 9),
-                                                 datetime(2014, 7, 2, 9)),
-                       datetime(2014, 7, 2, 9): (datetime(2014, 7, 2, 9),
-                                                 datetime(2014, 7, 2, 9)),
-                       datetime(2014, 7, 2, 10): (datetime(2014, 7, 2, 9),
-                                                  datetime(2014, 7, 3, 9)),
-                       datetime(2014, 7, 5, 10): (datetime(2014, 7, 4, 9),
-                                                  datetime(2014, 7, 7, 9)),
-                       datetime(2014, 7, 4, 10): (datetime(2014, 7, 4, 9),
-                                                  datetime(2014, 7, 7, 9)),
-                       datetime(2014, 7, 4, 23): (datetime(2014, 7, 4, 9),
-                                                  datetime(2014, 7, 7, 9)),
-                       datetime(2014, 7, 6, 10): (datetime(2014, 7, 4, 9),
-                                                  datetime(2014, 7, 7, 9)),
-                       datetime(2014, 7, 7, 5): (datetime(2014, 7, 4, 9),
-                                                 datetime(2014, 7, 7, 9)),
-                       datetime(2014, 7, 7, 9): (datetime(2014, 7, 7, 9),
-                                                 datetime(2014, 7, 7, 9)),
-                       datetime(2014, 7, 7, 9, 1): (datetime(2014, 7, 7, 9),
-                                                    datetime(2014, 7, 8, 9))}))
-
-        tests.append(([BusinessHour(start='17:00', end='05:00'),
-                       BusinessHour(n=3, start='17:00', end='03:00')],
-                      {datetime(2014, 7, 1, 11): (datetime(2014, 7, 1, 17),
-                                                  datetime(2014, 6, 30, 17)),
-                       datetime(2014, 7, 1, 18): (datetime(2014, 7, 2, 17),
-                                                  datetime(2014, 7, 1, 17)),
-                       datetime(2014, 7, 1, 23): (datetime(2014, 7, 2, 17),
-                                                  datetime(2014, 7, 1, 17)),
-                       datetime(2014, 7, 2, 8): (datetime(2014, 7, 2, 17),
-                                                 datetime(2014, 7, 1, 17)),
-                       datetime(2014, 7, 2, 9): (datetime(2014, 7, 2, 17),
-                                                 datetime(2014, 7, 1, 17)),
-                       datetime(2014, 7, 4, 17): (datetime(2014, 7, 4, 17),
-                                                  datetime(2014, 7, 4, 17)),
-                       datetime(2014, 7, 5, 10): (datetime(2014, 7, 7, 17),
-                                                  datetime(2014, 7, 4, 17)),
-                       datetime(2014, 7, 4, 10): (datetime(2014, 7, 4, 17),
-                                                  datetime(2014, 7, 3, 17)),
-                       datetime(2014, 7, 4, 23): (datetime(2014, 7, 7, 17),
-                                                  datetime(2014, 7, 4, 17)),
-                       datetime(2014, 7, 6, 10): (datetime(2014, 7, 7, 17),
-                                                  datetime(2014, 7, 4, 17)),
-                       datetime(2014, 7, 7, 5): (datetime(2014, 7, 7, 17),
-                                                 datetime(2014, 7, 4, 17)),
-                       datetime(2014, 7, 7, 17, 1): (datetime(
-                           2014, 7, 8, 17), datetime(2014, 7, 7, 17)), }))
-
-        tests.append(([BusinessHour(-1, start='17:00', end='05:00'),
-                       BusinessHour(n=-2, start='17:00', end='03:00')],
-                      {datetime(2014, 7, 1, 11): (datetime(2014, 6, 30, 17),
-                                                  datetime(2014, 7, 1, 17)),
-                       datetime(2014, 7, 1, 18): (datetime(2014, 7, 1, 17),
-                                                  datetime(2014, 7, 2, 17)),
-                       datetime(2014, 7, 1, 23): (datetime(2014, 7, 1, 17),
-                                                  datetime(2014, 7, 2, 17)),
-                       datetime(2014, 7, 2, 8): (datetime(2014, 7, 1, 17),
-                                                 datetime(2014, 7, 2, 17)),
-                       datetime(2014, 7, 2, 9): (datetime(2014, 7, 1, 17),
-                                                 datetime(2014, 7, 2, 17)),
-                       datetime(2014, 7, 2, 16, 59): (datetime(
-                           2014, 7, 1, 17), datetime(2014, 7, 2, 17)),
-                       datetime(2014, 7, 5, 10): (datetime(2014, 7, 4, 17),
-                                                  datetime(2014, 7, 7, 17)),
-                       datetime(2014, 7, 4, 10): (datetime(2014, 7, 3, 17),
-                                                  datetime(2014, 7, 4, 17)),
-                       datetime(2014, 7, 4, 23): (datetime(2014, 7, 4, 17),
-                                                  datetime(2014, 7, 7, 17)),
-                       datetime(2014, 7, 6, 10): (datetime(2014, 7, 4, 17),
-                                                  datetime(2014, 7, 7, 17)),
-                       datetime(2014, 7, 7, 5): (datetime(2014, 7, 4, 17),
-                                                 datetime(2014, 7, 7, 17)),
-                       datetime(2014, 7, 7, 18): (datetime(2014, 7, 7, 17),
-                                                  datetime(2014, 7, 8, 17))}))
-
-        for _offsets, cases in tests:
-            for offset in _offsets:
-                for dt, (exp_next, exp_prev) in compat.iteritems(cases):
-                    assert offset._next_opening_time(dt) == exp_next
-                    assert offset._prev_opening_time(dt) == exp_prev
-
-    def test_apply(self):
-        tests = []
-
-        tests.append((
-            BusinessHour(),
-            {datetime(2014, 7, 1, 11): datetime(2014, 7, 1, 12),
-             datetime(2014, 7, 1, 13): datetime(2014, 7, 1, 14),
-             datetime(2014, 7, 1, 15): datetime(2014, 7, 1, 16),
-             datetime(2014, 7, 1, 19): datetime(2014, 7, 2, 10),
-             datetime(2014, 7, 1, 16): datetime(2014, 7, 2, 9),
-             datetime(2014, 7, 1, 16, 30, 15): datetime(2014, 7, 2, 9, 30, 15),
-             datetime(2014, 7, 1, 17): datetime(2014, 7, 2, 10),
-             datetime(2014, 7, 2, 11): datetime(2014, 7, 2, 12),
-             # out of business hours
-             datetime(2014, 7, 2, 8): datetime(2014, 7, 2, 10),
-             datetime(2014, 7, 2, 19): datetime(2014, 7, 3, 10),
-             datetime(2014, 7, 2, 23): datetime(2014, 7, 3, 10),
-             datetime(2014, 7, 3, 0): datetime(2014, 7, 3, 10),
-             # saturday
-             datetime(2014, 7, 5, 15): datetime(2014, 7, 7, 10),
-             datetime(2014, 7, 4, 17): datetime(2014, 7, 7, 10),
-             datetime(2014, 7, 4, 16, 30): datetime(2014, 7, 7, 9, 30),
-             datetime(2014, 7, 4, 16, 30, 30): datetime(2014, 7, 7, 9, 30,
-                                                        30)}))
-
-        tests.append((BusinessHour(
-            4), {datetime(2014, 7, 1, 11): datetime(2014, 7, 1, 15),
-                 datetime(2014, 7, 1, 13): datetime(2014, 7, 2, 9),
-                 datetime(2014, 7, 1, 15): datetime(2014, 7, 2, 11),
-                 datetime(2014, 7, 1, 16): datetime(2014, 7, 2, 12),
-                 datetime(2014, 7, 1, 17): datetime(2014, 7, 2, 13),
-                 datetime(2014, 7, 2, 11): datetime(2014, 7, 2, 15),
-                 datetime(2014, 7, 2, 8): datetime(2014, 7, 2, 13),
-                 datetime(2014, 7, 2, 19): datetime(2014, 7, 3, 13),
-                 datetime(2014, 7, 2, 23): datetime(2014, 7, 3, 13),
-                 datetime(2014, 7, 3, 0): datetime(2014, 7, 3, 13),
-                 datetime(2014, 7, 5, 15): datetime(2014, 7, 7, 13),
-                 datetime(2014, 7, 4, 17): datetime(2014, 7, 7, 13),
-                 datetime(2014, 7, 4, 16, 30): datetime(2014, 7, 7, 12, 30),
-                 datetime(2014, 7, 4, 16, 30, 30): datetime(2014, 7, 7, 12, 30,
-                                                            30)}))
-
-        tests.append(
-            (BusinessHour(-1),
-             {datetime(2014, 7, 1, 11): datetime(2014, 7, 1, 10),
-              datetime(2014, 7, 1, 13): datetime(2014, 7, 1, 12),
-              datetime(2014, 7, 1, 15): datetime(2014, 7, 1, 14),
-              datetime(2014, 7, 1, 16): datetime(2014, 7, 1, 15),
-              datetime(2014, 7, 1, 10): datetime(2014, 6, 30, 17),
-              datetime(2014, 7, 1, 16, 30, 15): datetime(
-                  2014, 7, 1, 15, 30, 15),
-              datetime(2014, 7, 1, 9, 30, 15): datetime(
-                  2014, 6, 30, 16, 30, 15),
-              datetime(2014, 7, 1, 17): datetime(2014, 7, 1, 16),
-              datetime(2014, 7, 1, 5): datetime(2014, 6, 30, 16),
-              datetime(2014, 7, 2, 11): datetime(2014, 7, 2, 10),
-              # out of business hours
-              datetime(2014, 7, 2, 8): datetime(2014, 7, 1, 16),
-              datetime(2014, 7, 2, 19): datetime(2014, 7, 2, 16),
-              datetime(2014, 7, 2, 23): datetime(2014, 7, 2, 16),
-              datetime(2014, 7, 3, 0): datetime(2014, 7, 2, 16),
-              # saturday
-              datetime(2014, 7, 5, 15): datetime(2014, 7, 4, 16),
-              datetime(2014, 7, 7, 9): datetime(2014, 7, 4, 16),
-              datetime(2014, 7, 7, 9, 30): datetime(2014, 7, 4, 16, 30),
-              datetime(2014, 7, 7, 9, 30, 30): datetime(2014, 7, 4, 16, 30,
-                                                        30)}))
-
-        tests.append((BusinessHour(
-            -4), {datetime(2014, 7, 1, 11): datetime(2014, 6, 30, 15),
-                  datetime(2014, 7, 1, 13): datetime(2014, 6, 30, 17),
-                  datetime(2014, 7, 1, 15): datetime(2014, 7, 1, 11),
-                  datetime(2014, 7, 1, 16): datetime(2014, 7, 1, 12),
-                  datetime(2014, 7, 1, 17): datetime(2014, 7, 1, 13),
-                  datetime(2014, 7, 2, 11): datetime(2014, 7, 1, 15),
-                  datetime(2014, 7, 2, 8): datetime(2014, 7, 1, 13),
-                  datetime(2014, 7, 2, 19): datetime(2014, 7, 2, 13),
-                  datetime(2014, 7, 2, 23): datetime(2014, 7, 2, 13),
-                  datetime(2014, 7, 3, 0): datetime(2014, 7, 2, 13),
-                  datetime(2014, 7, 5, 15): datetime(2014, 7, 4, 13),
-                  datetime(2014, 7, 4, 18): datetime(2014, 7, 4, 13),
-                  datetime(2014, 7, 7, 9, 30): datetime(2014, 7, 4, 13, 30),
-                  datetime(2014, 7, 7, 9, 30, 30): datetime(2014, 7, 4, 13, 30,
-                                                            30)}))
-
-        tests.append((BusinessHour(start='13:00', end='16:00'),
-                      {datetime(2014, 7, 1, 11): datetime(2014, 7, 1, 14),
-                       datetime(2014, 7, 1, 13): datetime(2014, 7, 1, 14),
-                       datetime(2014, 7, 1, 15): datetime(2014, 7, 2, 13),
-                       datetime(2014, 7, 1, 19): datetime(2014, 7, 2, 14),
-                       datetime(2014, 7, 1, 16): datetime(2014, 7, 2, 14),
-                       datetime(2014, 7, 1, 15, 30, 15): datetime(2014, 7, 2,
-                                                                  13, 30, 15),
-                       datetime(2014, 7, 5, 15): datetime(2014, 7, 7, 14),
-                       datetime(2014, 7, 4, 17): datetime(2014, 7, 7, 14)}))
-
-        tests.append((BusinessHour(n=2, start='13:00', end='16:00'), {
-            datetime(2014, 7, 1, 17): datetime(2014, 7, 2, 15),
-            datetime(2014, 7, 2, 14): datetime(2014, 7, 3, 13),
-            datetime(2014, 7, 2, 8): datetime(2014, 7, 2, 15),
-            datetime(2014, 7, 2, 19): datetime(2014, 7, 3, 15),
-            datetime(2014, 7, 2, 14, 30): datetime(2014, 7, 3, 13, 30),
-            datetime(2014, 7, 3, 0): datetime(2014, 7, 3, 15),
-            datetime(2014, 7, 5, 15): datetime(2014, 7, 7, 15),
-            datetime(2014, 7, 4, 17): datetime(2014, 7, 7, 15),
-            datetime(2014, 7, 4, 14, 30): datetime(2014, 7, 7, 13, 30),
-            datetime(2014, 7, 4, 14, 30, 30): datetime(2014, 7, 7, 13, 30, 30)
-        }))
-
-        tests.append((BusinessHour(n=-1, start='13:00', end='16:00'),
-                      {datetime(2014, 7, 2, 11): datetime(2014, 7, 1, 15),
-                       datetime(2014, 7, 2, 13): datetime(2014, 7, 1, 15),
-                       datetime(2014, 7, 2, 14): datetime(2014, 7, 1, 16),
-                       datetime(2014, 7, 2, 15): datetime(2014, 7, 2, 14),
-                       datetime(2014, 7, 2, 19): datetime(2014, 7, 2, 15),
-                       datetime(2014, 7, 2, 16): datetime(2014, 7, 2, 15),
-                       datetime(2014, 7, 2, 13, 30, 15): datetime(2014, 7, 1,
-                                                                  15, 30, 15),
-                       datetime(2014, 7, 5, 15): datetime(2014, 7, 4, 15),
-                       datetime(2014, 7, 7, 11): datetime(2014, 7, 4, 15)}))
-
-        tests.append((BusinessHour(n=-3, start='10:00', end='16:00'), {
-            datetime(2014, 7, 1, 17): datetime(2014, 7, 1, 13),
-            datetime(2014, 7, 2, 14): datetime(2014, 7, 2, 11),
-            datetime(2014, 7, 2, 8): datetime(2014, 7, 1, 13),
-            datetime(2014, 7, 2, 13): datetime(2014, 7, 1, 16),
-            datetime(2014, 7, 2, 19): datetime(2014, 7, 2, 13),
-            datetime(2014, 7, 2, 11, 30): datetime(2014, 7, 1, 14, 30),
-            datetime(2014, 7, 3, 0): datetime(2014, 7, 2, 13),
-            datetime(2014, 7, 4, 10): datetime(2014, 7, 3, 13),
-            datetime(2014, 7, 5, 15): datetime(2014, 7, 4, 13),
-            datetime(2014, 7, 4, 16): datetime(2014, 7, 4, 13),
-            datetime(2014, 7, 4, 12, 30): datetime(2014, 7, 3, 15, 30),
-            datetime(2014, 7, 4, 12, 30, 30): datetime(2014, 7, 3, 15, 30, 30)
-        }))
-
-        tests.append((BusinessHour(start='19:00', end='05:00'), {
-            datetime(2014, 7, 1, 17): datetime(2014, 7, 1, 20),
-            datetime(2014, 7, 2, 14): datetime(2014, 7, 2, 20),
-            datetime(2014, 7, 2, 8): datetime(2014, 7, 2, 20),
-            datetime(2014, 7, 2, 13): datetime(2014, 7, 2, 20),
-            datetime(2014, 7, 2, 19): datetime(2014, 7, 2, 20),
-            datetime(2014, 7, 2, 4, 30): datetime(2014, 7, 2, 19, 30),
-            datetime(2014, 7, 3, 0): datetime(2014, 7, 3, 1),
-            datetime(2014, 7, 4, 10): datetime(2014, 7, 4, 20),
-            datetime(2014, 7, 4, 23): datetime(2014, 7, 5, 0),
-            datetime(2014, 7, 5, 0): datetime(2014, 7, 5, 1),
-            datetime(2014, 7, 5, 4): datetime(2014, 7, 7, 19),
-            datetime(2014, 7, 5, 4, 30): datetime(2014, 7, 7, 19, 30),
-            datetime(2014, 7, 5, 4, 30, 30): datetime(2014, 7, 7, 19, 30, 30)
-        }))
-
-        tests.append((BusinessHour(n=-1, start='19:00', end='05:00'), {
-            datetime(2014, 7, 1, 17): datetime(2014, 7, 1, 4),
-            datetime(2014, 7, 2, 14): datetime(2014, 7, 2, 4),
-            datetime(2014, 7, 2, 8): datetime(2014, 7, 2, 4),
-            datetime(2014, 7, 2, 13): datetime(2014, 7, 2, 4),
-            datetime(2014, 7, 2, 20): datetime(2014, 7, 2, 5),
-            datetime(2014, 7, 2, 19): datetime(2014, 7, 2, 4),
-            datetime(2014, 7, 2, 19, 30): datetime(2014, 7, 2, 4, 30),
-            datetime(2014, 7, 3, 0): datetime(2014, 7, 2, 23),
-            datetime(2014, 7, 3, 6): datetime(2014, 7, 3, 4),
-            datetime(2014, 7, 4, 23): datetime(2014, 7, 4, 22),
-            datetime(2014, 7, 5, 0): datetime(2014, 7, 4, 23),
-            datetime(2014, 7, 5, 4): datetime(2014, 7, 5, 3),
-            datetime(2014, 7, 7, 19, 30): datetime(2014, 7, 5, 4, 30),
-            datetime(2014, 7, 7, 19, 30, 30): datetime(2014, 7, 5, 4, 30, 30)
-        }))
-
-        for offset, cases in tests:
-            for base, expected in compat.iteritems(cases):
-                assert_offset_equal(offset, base, expected)
-
-    def test_apply_large_n(self):
-        tests = []
+    normalize_cases = []
+    normalize_cases.append((BusinessHour(normalize=True), {
+        datetime(2014, 7, 1, 8): datetime(2014, 7, 1),
+        datetime(2014, 7, 1, 17): datetime(2014, 7, 2),
+        datetime(2014, 7, 1, 16): datetime(2014, 7, 2),
+        datetime(2014, 7, 1, 23): datetime(2014, 7, 2),
+        datetime(2014, 7, 1, 0): datetime(2014, 7, 1),
+        datetime(2014, 7, 4, 15): datetime(2014, 7, 4),
+        datetime(2014, 7, 4, 15, 59): datetime(2014, 7, 4),
+        datetime(2014, 7, 4, 16, 30): datetime(2014, 7, 7),
+        datetime(2014, 7, 5, 23): datetime(2014, 7, 7),
+        datetime(2014, 7, 6, 10): datetime(2014, 7, 7)}))
+
+    normalize_cases.append((BusinessHour(-1, normalize=True), {
+        datetime(2014, 7, 1, 8): datetime(2014, 6, 30),
+        datetime(2014, 7, 1, 17): datetime(2014, 7, 1),
+        datetime(2014, 7, 1, 16): datetime(2014, 7, 1),
+        datetime(2014, 7, 1, 10): datetime(2014, 6, 30),
+        datetime(2014, 7, 1, 0): datetime(2014, 6, 30),
+        datetime(2014, 7, 7, 10): datetime(2014, 7, 4),
+        datetime(2014, 7, 7, 10, 1): datetime(2014, 7, 7),
+        datetime(2014, 7, 5, 23): datetime(2014, 7, 4),
+        datetime(2014, 7, 6, 10): datetime(2014, 7, 4)}))
+
+    normalize_cases.append((BusinessHour(1, normalize=True, start='17:00',
+                                         end='04:00'), {
+        datetime(2014, 7, 1, 8): datetime(2014, 7, 1),
+        datetime(2014, 7, 1, 17): datetime(2014, 7, 1),
+        datetime(2014, 7, 1, 23): datetime(2014, 7, 2),
+        datetime(2014, 7, 2, 2): datetime(2014, 7, 2),
+        datetime(2014, 7, 2, 3): datetime(2014, 7, 2),
+        datetime(2014, 7, 4, 23): datetime(2014, 7, 5),
+        datetime(2014, 7, 5, 2): datetime(2014, 7, 5),
+        datetime(2014, 7, 7, 2): datetime(2014, 7, 7),
+        datetime(2014, 7, 7, 17): datetime(2014, 7, 7)}))
+
+    @pytest.mark.parametrize('case', normalize_cases)
+    def test_normalize(self, case):
+        offset, cases = case
+        for dt, expected in compat.iteritems(cases):
+            assert offset.apply(dt) == expected
+
+    on_offset_cases = []
+    on_offset_cases.append((BusinessHour(), {
+        datetime(2014, 7, 1, 9): True,
+        datetime(2014, 7, 1, 8, 59): False,
+        datetime(2014, 7, 1, 8): False,
+        datetime(2014, 7, 1, 17): True,
+        datetime(2014, 7, 1, 17, 1): False,
+        datetime(2014, 7, 1, 18): False,
+        datetime(2014, 7, 5, 9): False,
+        datetime(2014, 7, 6, 12): False}))
+
+    on_offset_cases.append((BusinessHour(start='10:00', end='15:00'), {
+        datetime(2014, 7, 1, 9): False,
+        datetime(2014, 7, 1, 10): True,
+        datetime(2014, 7, 1, 15): True,
+        datetime(2014, 7, 1, 15, 1): False,
+        datetime(2014, 7, 5, 12): False,
+        datetime(2014, 7, 6, 12): False}))
+
+    on_offset_cases.append((BusinessHour(start='19:00', end='05:00'), {
+        datetime(2014, 7, 1, 9, 0): False,
+        datetime(2014, 7, 1, 10, 0): False,
+        datetime(2014, 7, 1, 15): False,
+        datetime(2014, 7, 1, 15, 1): False,
+        datetime(2014, 7, 5, 12, 0): False,
+        datetime(2014, 7, 6, 12, 0): False,
+        datetime(2014, 7, 1, 19, 0): True,
+        datetime(2014, 7, 2, 0, 0): True,
+        datetime(2014, 7, 4, 23): True,
+        datetime(2014, 7, 5, 1): True,
+        datetime(2014, 7, 5, 5, 0): True,
+        datetime(2014, 7, 6, 23, 0): False,
+        datetime(2014, 7, 7, 3, 0): False}))
 
-        tests.append(
-            (BusinessHour(40),  # A week later
-             {datetime(2014, 7, 1, 11): datetime(2014, 7, 8, 11),
-              datetime(2014, 7, 1, 13): datetime(2014, 7, 8, 13),
-              datetime(2014, 7, 1, 15): datetime(2014, 7, 8, 15),
-              datetime(2014, 7, 1, 16): datetime(2014, 7, 8, 16),
-              datetime(2014, 7, 1, 17): datetime(2014, 7, 9, 9),
-              datetime(2014, 7, 2, 11): datetime(2014, 7, 9, 11),
-              datetime(2014, 7, 2, 8): datetime(2014, 7, 9, 9),
-              datetime(2014, 7, 2, 19): datetime(2014, 7, 10, 9),
-              datetime(2014, 7, 2, 23): datetime(2014, 7, 10, 9),
-              datetime(2014, 7, 3, 0): datetime(2014, 7, 10, 9),
-              datetime(2014, 7, 5, 15): datetime(2014, 7, 14, 9),
-              datetime(2014, 7, 4, 18): datetime(2014, 7, 14, 9),
-              datetime(2014, 7, 7, 9, 30): datetime(2014, 7, 14, 9, 30),
-              datetime(2014, 7, 7, 9, 30, 30): datetime(2014, 7, 14, 9, 30,
-                                                        30)}))
+    @pytest.mark.parametrize('case', on_offset_cases)
+    def test_onOffset(self, case):
+        offset, cases = case
+        for dt, expected in compat.iteritems(cases):
+            assert offset.onOffset(dt) == expected
 
-        tests.append(
-            (BusinessHour(-25),  # 3 days and 1 hour before
-             {datetime(2014, 7, 1, 11): datetime(2014, 6, 26, 10),
-              datetime(2014, 7, 1, 13): datetime(2014, 6, 26, 12),
-              datetime(2014, 7, 1, 9): datetime(2014, 6, 25, 16),
-              datetime(2014, 7, 1, 10): datetime(2014, 6, 25, 17),
-              datetime(2014, 7, 3, 11): datetime(2014, 6, 30, 10),
-              datetime(2014, 7, 3, 8): datetime(2014, 6, 27, 16),
-              datetime(2014, 7, 3, 19): datetime(2014, 6, 30, 16),
-              datetime(2014, 7, 3, 23): datetime(2014, 6, 30, 16),
-              datetime(2014, 7, 4, 9): datetime(2014, 6, 30, 16),
-              datetime(2014, 7, 5, 15): datetime(2014, 7, 1, 16),
-              datetime(2014, 7, 6, 18): datetime(2014, 7, 1, 16),
-              datetime(2014, 7, 7, 9, 30): datetime(2014, 7, 1, 16, 30),
-              datetime(2014, 7, 7, 10, 30, 30): datetime(2014, 7, 2, 9, 30,
-                                                         30)}))
-
-        # 5 days and 3 hours later
-        tests.append((BusinessHour(28, start='21:00', end='02:00'),
-                      {datetime(2014, 7, 1, 11): datetime(2014, 7, 9, 0),
-                       datetime(2014, 7, 1, 22): datetime(2014, 7, 9, 1),
-                       datetime(2014, 7, 1, 23): datetime(2014, 7, 9, 21),
-                       datetime(2014, 7, 2, 2): datetime(2014, 7, 10, 0),
-                       datetime(2014, 7, 3, 21): datetime(2014, 7, 11, 0),
-                       datetime(2014, 7, 4, 1): datetime(2014, 7, 11, 23),
-                       datetime(2014, 7, 4, 2): datetime(2014, 7, 12, 0),
-                       datetime(2014, 7, 4, 3): datetime(2014, 7, 12, 0),
-                       datetime(2014, 7, 5, 1): datetime(2014, 7, 14, 23),
-                       datetime(2014, 7, 5, 15): datetime(2014, 7, 15, 0),
-                       datetime(2014, 7, 6, 18): datetime(2014, 7, 15, 0),
-                       datetime(2014, 7, 7, 1): datetime(2014, 7, 15, 0),
-                       datetime(2014, 7, 7, 23, 30): datetime(2014, 7, 15, 21,
-                                                              30)}))
+    opening_time_cases = []
+    # opening time should be affected by sign of n, not by n's value and
+    # end
+    opening_time_cases.append(([BusinessHour(), BusinessHour(n=2),
+                                BusinessHour(n=4), BusinessHour(end='10:00'),
+                                BusinessHour(n=2, end='4:00'),
+                                BusinessHour(n=4, end='15:00')], {
+        datetime(2014, 7, 1, 11): (datetime(2014, 7, 2, 9),
+                                   datetime(2014, 7, 1, 9)),
+        datetime(2014, 7, 1, 18): (datetime(2014, 7, 2, 9),
+                                   datetime(2014, 7, 1, 9)),
+        datetime(2014, 7, 1, 23): (datetime(2014, 7, 2, 9),
+                                   datetime(2014, 7, 1, 9)),
+        datetime(2014, 7, 2, 8): (datetime(2014, 7, 2, 9),
+                                  datetime(2014, 7, 1, 9)),
+        # if timestamp is on opening time, next opening time is
+        # as it is
+        datetime(2014, 7, 2, 9): (datetime(2014, 7, 2, 9),
+                                  datetime(2014, 7, 2, 9)),
+        datetime(2014, 7, 2, 10): (datetime(2014, 7, 3, 9),
+                                   datetime(2014, 7, 2, 9)),
+        # 2014-07-05 is saturday
+        datetime(2014, 7, 5, 10): (datetime(2014, 7, 7, 9),
+                                   datetime(2014, 7, 4, 9)),
+        datetime(2014, 7, 4, 10): (datetime(2014, 7, 7, 9),
+                                   datetime(2014, 7, 4, 9)),
+        datetime(2014, 7, 4, 23): (datetime(2014, 7, 7, 9),
+                                   datetime(2014, 7, 4, 9)),
+        datetime(2014, 7, 6, 10): (datetime(2014, 7, 7, 9),
+                                   datetime(2014, 7, 4, 9)),
+        datetime(2014, 7, 7, 5): (datetime(2014, 7, 7, 9),
+                                  datetime(2014, 7, 4, 9)),
+        datetime(2014, 7, 7, 9, 1): (datetime(2014, 7, 8, 9),
+                                     datetime(2014, 7, 7, 9))}))
+
+    opening_time_cases.append(([BusinessHour(start='11:15'),
+                                BusinessHour(n=2, start='11:15'),
+                                BusinessHour(n=3, start='11:15'),
+                                BusinessHour(start='11:15', end='10:00'),
+                                BusinessHour(n=2, start='11:15', end='4:00'),
+                                BusinessHour(n=3, start='11:15',
+                                             end='15:00')], {
+        datetime(2014, 7, 1, 11): (datetime(2014, 7, 1, 11, 15),
+                                   datetime(2014, 6, 30, 11, 15)),
+        datetime(2014, 7, 1, 18): (datetime(2014, 7, 2, 11, 15),
+                                   datetime(2014, 7, 1, 11, 15)),
+        datetime(2014, 7, 1, 23): (datetime(2014, 7, 2, 11, 15),
+                                   datetime(2014, 7, 1, 11, 15)),
+        datetime(2014, 7, 2, 8): (datetime(2014, 7, 2, 11, 15),
+                                  datetime(2014, 7, 1, 11, 15)),
+        datetime(2014, 7, 2, 9): (datetime(2014, 7, 2, 11, 15),
+                                  datetime(2014, 7, 1, 11, 15)),
+        datetime(2014, 7, 2, 10): (datetime(2014, 7, 2, 11, 15),
+                                   datetime(2014, 7, 1, 11, 15)),
+        datetime(2014, 7, 2, 11, 15): (datetime(2014, 7, 2, 11, 15),
+                                       datetime(2014, 7, 2, 11, 15)),
+        datetime(2014, 7, 2, 11, 15, 1): (datetime(2014, 7, 3, 11, 15),
+                                          datetime(2014, 7, 2, 11, 15)),
+        datetime(2014, 7, 5, 10): (datetime(2014, 7, 7, 11, 15),
+                                   datetime(2014, 7, 4, 11, 15)),
+        datetime(2014, 7, 4, 10): (datetime(2014, 7, 4, 11, 15),
+                                   datetime(2014, 7, 3, 11, 15)),
+        datetime(2014, 7, 4, 23): (datetime(2014, 7, 7, 11, 15),
+                                   datetime(2014, 7, 4, 11, 15)),
+        datetime(2014, 7, 6, 10): (datetime(2014, 7, 7, 11, 15),
+                                   datetime(2014, 7, 4, 11, 15)),
+        datetime(2014, 7, 7, 5): (datetime(2014, 7, 7, 11, 15),
+                                  datetime(2014, 7, 4, 11, 15)),
+        datetime(2014, 7, 7, 9, 1): (datetime(2014, 7, 7, 11, 15),
+                                     datetime(2014, 7, 4, 11, 15))}))
+
+    opening_time_cases.append(([BusinessHour(-1), BusinessHour(n=-2),
+                                BusinessHour(n=-4),
+                                BusinessHour(n=-1, end='10:00'),
+                                BusinessHour(n=-2, end='4:00'),
+                                BusinessHour(n=-4, end='15:00')], {
+        datetime(2014, 7, 1, 11): (datetime(2014, 7, 1, 9),
+                                   datetime(2014, 7, 2, 9)),
+        datetime(2014, 7, 1, 18): (datetime(2014, 7, 1, 9),
+                                   datetime(2014, 7, 2, 9)),
+        datetime(2014, 7, 1, 23): (datetime(2014, 7, 1, 9),
+                                   datetime(2014, 7, 2, 9)),
+        datetime(2014, 7, 2, 8): (datetime(2014, 7, 1, 9),
+                                  datetime(2014, 7, 2, 9)),
+        datetime(2014, 7, 2, 9): (datetime(2014, 7, 2, 9),
+                                  datetime(2014, 7, 2, 9)),
+        datetime(2014, 7, 2, 10): (datetime(2014, 7, 2, 9),
+                                   datetime(2014, 7, 3, 9)),
+        datetime(2014, 7, 5, 10): (datetime(2014, 7, 4, 9),
+                                   datetime(2014, 7, 7, 9)),
+        datetime(2014, 7, 4, 10): (datetime(2014, 7, 4, 9),
+                                   datetime(2014, 7, 7, 9)),
+        datetime(2014, 7, 4, 23): (datetime(2014, 7, 4, 9),
+                                   datetime(2014, 7, 7, 9)),
+        datetime(2014, 7, 6, 10): (datetime(2014, 7, 4, 9),
+                                   datetime(2014, 7, 7, 9)),
+        datetime(2014, 7, 7, 5): (datetime(2014, 7, 4, 9),
+                                  datetime(2014, 7, 7, 9)),
+        datetime(2014, 7, 7, 9): (datetime(2014, 7, 7, 9),
+                                  datetime(2014, 7, 7, 9)),
+        datetime(2014, 7, 7, 9, 1): (datetime(2014, 7, 7, 9),
+                                     datetime(2014, 7, 8, 9))}))
+
+    opening_time_cases.append(([BusinessHour(start='17:00', end='05:00'),
+                                BusinessHour(n=3, start='17:00',
+                                             end='03:00')], {
+        datetime(2014, 7, 1, 11): (datetime(2014, 7, 1, 17),
+                                   datetime(2014, 6, 30, 17)),
+        datetime(2014, 7, 1, 18): (datetime(2014, 7, 2, 17),
+                                   datetime(2014, 7, 1, 17)),
+        datetime(2014, 7, 1, 23): (datetime(2014, 7, 2, 17),
+                                   datetime(2014, 7, 1, 17)),
+        datetime(2014, 7, 2, 8): (datetime(2014, 7, 2, 17),
+                                  datetime(2014, 7, 1, 17)),
+        datetime(2014, 7, 2, 9): (datetime(2014, 7, 2, 17),
+                                  datetime(2014, 7, 1, 17)),
+        datetime(2014, 7, 4, 17): (datetime(2014, 7, 4, 17),
+                                   datetime(2014, 7, 4, 17)),
+        datetime(2014, 7, 5, 10): (datetime(2014, 7, 7, 17),
+                                   datetime(2014, 7, 4, 17)),
+        datetime(2014, 7, 4, 10): (datetime(2014, 7, 4, 17),
+                                   datetime(2014, 7, 3, 17)),
+        datetime(2014, 7, 4, 23): (datetime(2014, 7, 7, 17),
+                                   datetime(2014, 7, 4, 17)),
+        datetime(2014, 7, 6, 10): (datetime(2014, 7, 7, 17),
+                                   datetime(2014, 7, 4, 17)),
+        datetime(2014, 7, 7, 5): (datetime(2014, 7, 7, 17),
+                                  datetime(2014, 7, 4, 17)),
+        datetime(2014, 7, 7, 17, 1): (datetime(2014, 7, 8, 17),
+                                      datetime(2014, 7, 7, 17)), }))
+
+    opening_time_cases.append(([BusinessHour(-1, start='17:00', end='05:00'),
+                                BusinessHour(n=-2, start='17:00',
+                                             end='03:00')], {
+        datetime(2014, 7, 1, 11): (datetime(2014, 6, 30, 17),
+                                   datetime(2014, 7, 1, 17)),
+        datetime(2014, 7, 1, 18): (datetime(2014, 7, 1, 17),
+                                   datetime(2014, 7, 2, 17)),
+        datetime(2014, 7, 1, 23): (datetime(2014, 7, 1, 17),
+                                   datetime(2014, 7, 2, 17)),
+        datetime(2014, 7, 2, 8): (datetime(2014, 7, 1, 17),
+                                  datetime(2014, 7, 2, 17)),
+        datetime(2014, 7, 2, 9): (datetime(2014, 7, 1, 17),
+                                  datetime(2014, 7, 2, 17)),
+        datetime(2014, 7, 2, 16, 59): (datetime(2014, 7, 1, 17),
+                                       datetime(2014, 7, 2, 17)),
+        datetime(2014, 7, 5, 10): (datetime(2014, 7, 4, 17),
+                                   datetime(2014, 7, 7, 17)),
+        datetime(2014, 7, 4, 10): (datetime(2014, 7, 3, 17),
+                                   datetime(2014, 7, 4, 17)),
+        datetime(2014, 7, 4, 23): (datetime(2014, 7, 4, 17),
+                                   datetime(2014, 7, 7, 17)),
+        datetime(2014, 7, 6, 10): (datetime(2014, 7, 4, 17),
+                                   datetime(2014, 7, 7, 17)),
+        datetime(2014, 7, 7, 5): (datetime(2014, 7, 4, 17),
+                                  datetime(2014, 7, 7, 17)),
+        datetime(2014, 7, 7, 18): (datetime(2014, 7, 7, 17),
+                                   datetime(2014, 7, 8, 17))}))
+
+    @pytest.mark.parametrize('case', opening_time_cases)
+    def test_opening_time(self, case):
+        _offsets, cases = case
+        for offset in _offsets:
+            for dt, (exp_next, exp_prev) in compat.iteritems(cases):
+                assert offset._next_opening_time(dt) == exp_next
+                assert offset._prev_opening_time(dt) == exp_prev
+
+    apply_cases = []
+    apply_cases.append((BusinessHour(), {
+        datetime(2014, 7, 1, 11): datetime(2014, 7, 1, 12),
+        datetime(2014, 7, 1, 13): datetime(2014, 7, 1, 14),
+        datetime(2014, 7, 1, 15): datetime(2014, 7, 1, 16),
+        datetime(2014, 7, 1, 19): datetime(2014, 7, 2, 10),
+        datetime(2014, 7, 1, 16): datetime(2014, 7, 2, 9),
+        datetime(2014, 7, 1, 16, 30, 15): datetime(2014, 7, 2, 9, 30, 15),
+        datetime(2014, 7, 1, 17): datetime(2014, 7, 2, 10),
+        datetime(2014, 7, 2, 11): datetime(2014, 7, 2, 12),
+        # out of business hours
+        datetime(2014, 7, 2, 8): datetime(2014, 7, 2, 10),
+        datetime(2014, 7, 2, 19): datetime(2014, 7, 3, 10),
+        datetime(2014, 7, 2, 23): datetime(2014, 7, 3, 10),
+        datetime(2014, 7, 3, 0): datetime(2014, 7, 3, 10),
+        # saturday
+        datetime(2014, 7, 5, 15): datetime(2014, 7, 7, 10),
+        datetime(2014, 7, 4, 17): datetime(2014, 7, 7, 10),
+        datetime(2014, 7, 4, 16, 30): datetime(2014, 7, 7, 9, 30),
+        datetime(2014, 7, 4, 16, 30, 30): datetime(2014, 7, 7, 9, 30, 30)}))
+
+    apply_cases.append((BusinessHour(4), {
+        datetime(2014, 7, 1, 11): datetime(2014, 7, 1, 15),
+        datetime(2014, 7, 1, 13): datetime(2014, 7, 2, 9),
+        datetime(2014, 7, 1, 15): datetime(2014, 7, 2, 11),
+        datetime(2014, 7, 1, 16): datetime(2014, 7, 2, 12),
+        datetime(2014, 7, 1, 17): datetime(2014, 7, 2, 13),
+        datetime(2014, 7, 2, 11): datetime(2014, 7, 2, 15),
+        datetime(2014, 7, 2, 8): datetime(2014, 7, 2, 13),
+        datetime(2014, 7, 2, 19): datetime(2014, 7, 3, 13),
+        datetime(2014, 7, 2, 23): datetime(2014, 7, 3, 13),
+        datetime(2014, 7, 3, 0): datetime(2014, 7, 3, 13),
+        datetime(2014, 7, 5, 15): datetime(2014, 7, 7, 13),
+        datetime(2014, 7, 4, 17): datetime(2014, 7, 7, 13),
+        datetime(2014, 7, 4, 16, 30): datetime(2014, 7, 7, 12, 30),
+        datetime(2014, 7, 4, 16, 30, 30): datetime(2014, 7, 7, 12, 30, 30)}))
+
+    apply_cases.append((BusinessHour(-1), {
+        datetime(2014, 7, 1, 11): datetime(2014, 7, 1, 10),
+        datetime(2014, 7, 1, 13): datetime(2014, 7, 1, 12),
+        datetime(2014, 7, 1, 15): datetime(2014, 7, 1, 14),
+        datetime(2014, 7, 1, 16): datetime(2014, 7, 1, 15),
+        datetime(2014, 7, 1, 10): datetime(2014, 6, 30, 17),
+        datetime(2014, 7, 1, 16, 30, 15): datetime(2014, 7, 1, 15, 30, 15),
+        datetime(2014, 7, 1, 9, 30, 15): datetime(2014, 6, 30, 16, 30, 15),
+        datetime(2014, 7, 1, 17): datetime(2014, 7, 1, 16),
+        datetime(2014, 7, 1, 5): datetime(2014, 6, 30, 16),
+        datetime(2014, 7, 2, 11): datetime(2014, 7, 2, 10),
+        # out of business hours
+        datetime(2014, 7, 2, 8): datetime(2014, 7, 1, 16),
+        datetime(2014, 7, 2, 19): datetime(2014, 7, 2, 16),
+        datetime(2014, 7, 2, 23): datetime(2014, 7, 2, 16),
+        datetime(2014, 7, 3, 0): datetime(2014, 7, 2, 16),
+        # saturday
+        datetime(2014, 7, 5, 15): datetime(2014, 7, 4, 16),
+        datetime(2014, 7, 7, 9): datetime(2014, 7, 4, 16),
+        datetime(2014, 7, 7, 9, 30): datetime(2014, 7, 4, 16, 30),
+        datetime(2014, 7, 7, 9, 30, 30): datetime(2014, 7, 4, 16, 30, 30)}))
+
+    apply_cases.append((BusinessHour(-4), {
+        datetime(2014, 7, 1, 11): datetime(2014, 6, 30, 15),
+        datetime(2014, 7, 1, 13): datetime(2014, 6, 30, 17),
+        datetime(2014, 7, 1, 15): datetime(2014, 7, 1, 11),
+        datetime(2014, 7, 1, 16): datetime(2014, 7, 1, 12),
+        datetime(2014, 7, 1, 17): datetime(2014, 7, 1, 13),
+        datetime(2014, 7, 2, 11): datetime(2014, 7, 1, 15),
+        datetime(2014, 7, 2, 8): datetime(2014, 7, 1, 13),
+        datetime(2014, 7, 2, 19): datetime(2014, 7, 2, 13),
+        datetime(2014, 7, 2, 23): datetime(2014, 7, 2, 13),
+        datetime(2014, 7, 3, 0): datetime(2014, 7, 2, 13),
+        datetime(2014, 7, 5, 15): datetime(2014, 7, 4, 13),
+        datetime(2014, 7, 4, 18): datetime(2014, 7, 4, 13),
+        datetime(2014, 7, 7, 9, 30): datetime(2014, 7, 4, 13, 30),
+        datetime(2014, 7, 7, 9, 30, 30): datetime(2014, 7, 4, 13, 30, 30)}))
+
+    apply_cases.append((BusinessHour(start='13:00', end='16:00'), {
+        datetime(2014, 7, 1, 11): datetime(2014, 7, 1, 14),
+        datetime(2014, 7, 1, 13): datetime(2014, 7, 1, 14),
+        datetime(2014, 7, 1, 15): datetime(2014, 7, 2, 13),
+        datetime(2014, 7, 1, 19): datetime(2014, 7, 2, 14),
+        datetime(2014, 7, 1, 16): datetime(2014, 7, 2, 14),
+        datetime(2014, 7, 1, 15, 30, 15): datetime(2014, 7, 2, 13, 30, 15),
+        datetime(2014, 7, 5, 15): datetime(2014, 7, 7, 14),
+        datetime(2014, 7, 4, 17): datetime(2014, 7, 7, 14)}))
+
+    apply_cases.append((BusinessHour(n=2, start='13:00', end='16:00'), {
+        datetime(2014, 7, 1, 17): datetime(2014, 7, 2, 15),
+        datetime(2014, 7, 2, 14): datetime(2014, 7, 3, 13),
+        datetime(2014, 7, 2, 8): datetime(2014, 7, 2, 15),
+        datetime(2014, 7, 2, 19): datetime(2014, 7, 3, 15),
+        datetime(2014, 7, 2, 14, 30): datetime(2014, 7, 3, 13, 30),
+        datetime(2014, 7, 3, 0): datetime(2014, 7, 3, 15),
+        datetime(2014, 7, 5, 15): datetime(2014, 7, 7, 15),
+        datetime(2014, 7, 4, 17): datetime(2014, 7, 7, 15),
+        datetime(2014, 7, 4, 14, 30): datetime(2014, 7, 7, 13, 30),
+        datetime(2014, 7, 4, 14, 30, 30): datetime(2014, 7, 7, 13, 30, 30)}))
+
+    apply_cases.append((BusinessHour(n=-1, start='13:00', end='16:00'), {
+        datetime(2014, 7, 2, 11): datetime(2014, 7, 1, 15),
+        datetime(2014, 7, 2, 13): datetime(2014, 7, 1, 15),
+        datetime(2014, 7, 2, 14): datetime(2014, 7, 1, 16),
+        datetime(2014, 7, 2, 15): datetime(2014, 7, 2, 14),
+        datetime(2014, 7, 2, 19): datetime(2014, 7, 2, 15),
+        datetime(2014, 7, 2, 16): datetime(2014, 7, 2, 15),
+        datetime(2014, 7, 2, 13, 30, 15): datetime(2014, 7, 1, 15, 30, 15),
+        datetime(2014, 7, 5, 15): datetime(2014, 7, 4, 15),
+        datetime(2014, 7, 7, 11): datetime(2014, 7, 4, 15)}))
+
+    apply_cases.append((BusinessHour(n=-3, start='10:00', end='16:00'), {
+        datetime(2014, 7, 1, 17): datetime(2014, 7, 1, 13),
+        datetime(2014, 7, 2, 14): datetime(2014, 7, 2, 11),
+        datetime(2014, 7, 2, 8): datetime(2014, 7, 1, 13),
+        datetime(2014, 7, 2, 13): datetime(2014, 7, 1, 16),
+        datetime(2014, 7, 2, 19): datetime(2014, 7, 2, 13),
+        datetime(2014, 7, 2, 11, 30): datetime(2014, 7, 1, 14, 30),
+        datetime(2014, 7, 3, 0): datetime(2014, 7, 2, 13),
+        datetime(2014, 7, 4, 10): datetime(2014, 7, 3, 13),
+        datetime(2014, 7, 5, 15): datetime(2014, 7, 4, 13),
+        datetime(2014, 7, 4, 16): datetime(2014, 7, 4, 13),
+        datetime(2014, 7, 4, 12, 30): datetime(2014, 7, 3, 15, 30),
+        datetime(2014, 7, 4, 12, 30, 30): datetime(2014, 7, 3, 15, 30, 30)}))
+
+    apply_cases.append((BusinessHour(start='19:00', end='05:00'), {
+        datetime(2014, 7, 1, 17): datetime(2014, 7, 1, 20),
+        datetime(2014, 7, 2, 14): datetime(2014, 7, 2, 20),
+        datetime(2014, 7, 2, 8): datetime(2014, 7, 2, 20),
+        datetime(2014, 7, 2, 13): datetime(2014, 7, 2, 20),
+        datetime(2014, 7, 2, 19): datetime(2014, 7, 2, 20),
+        datetime(2014, 7, 2, 4, 30): datetime(2014, 7, 2, 19, 30),
+        datetime(2014, 7, 3, 0): datetime(2014, 7, 3, 1),
+        datetime(2014, 7, 4, 10): datetime(2014, 7, 4, 20),
+        datetime(2014, 7, 4, 23): datetime(2014, 7, 5, 0),
+        datetime(2014, 7, 5, 0): datetime(2014, 7, 5, 1),
+        datetime(2014, 7, 5, 4): datetime(2014, 7, 7, 19),
+        datetime(2014, 7, 5, 4, 30): datetime(2014, 7, 7, 19, 30),
+        datetime(2014, 7, 5, 4, 30, 30): datetime(2014, 7, 7, 19, 30, 30)}))
+
+    apply_cases.append((BusinessHour(n=-1, start='19:00', end='05:00'), {
+        datetime(2014, 7, 1, 17): datetime(2014, 7, 1, 4),
+        datetime(2014, 7, 2, 14): datetime(2014, 7, 2, 4),
+        datetime(2014, 7, 2, 8): datetime(2014, 7, 2, 4),
+        datetime(2014, 7, 2, 13): datetime(2014, 7, 2, 4),
+        datetime(2014, 7, 2, 20): datetime(2014, 7, 2, 5),
+        datetime(2014, 7, 2, 19): datetime(2014, 7, 2, 4),
+        datetime(2014, 7, 2, 19, 30): datetime(2014, 7, 2, 4, 30),
+        datetime(2014, 7, 3, 0): datetime(2014, 7, 2, 23),
+        datetime(2014, 7, 3, 6): datetime(2014, 7, 3, 4),
+        datetime(2014, 7, 4, 23): datetime(2014, 7, 4, 22),
+        datetime(2014, 7, 5, 0): datetime(2014, 7, 4, 23),
+        datetime(2014, 7, 5, 4): datetime(2014, 7, 5, 3),
+        datetime(2014, 7, 7, 19, 30): datetime(2014, 7, 5, 4, 30),
+        datetime(2014, 7, 7, 19, 30, 30): datetime(2014, 7, 5, 4, 30, 30)}))
+
+    @pytest.mark.parametrize('case', apply_cases)
+    def test_apply(self, case):
+        offset, cases = case
+        for base, expected in compat.iteritems(cases):
+            assert_offset_equal(offset, base, expected)
 
-        for offset, cases in tests:
-            for base, expected in compat.iteritems(cases):
-                assert_offset_equal(offset, base, expected)
+    apply_large_n_cases = []
+    # A week later
+    apply_large_n_cases.append((BusinessHour(40), {
+        datetime(2014, 7, 1, 11): datetime(2014, 7, 8, 11),
+        datetime(2014, 7, 1, 13): datetime(2014, 7, 8, 13),
+        datetime(2014, 7, 1, 15): datetime(2014, 7, 8, 15),
+        datetime(2014, 7, 1, 16): datetime(2014, 7, 8, 16),
+        datetime(2014, 7, 1, 17): datetime(2014, 7, 9, 9),
+        datetime(2014, 7, 2, 11): datetime(2014, 7, 9, 11),
+        datetime(2014, 7, 2, 8): datetime(2014, 7, 9, 9),
+        datetime(2014, 7, 2, 19): datetime(2014, 7, 10, 9),
+        datetime(2014, 7, 2, 23): datetime(2014, 7, 10, 9),
+        datetime(2014, 7, 3, 0): datetime(2014, 7, 10, 9),
+        datetime(2014, 7, 5, 15): datetime(2014, 7, 14, 9),
+        datetime(2014, 7, 4, 18): datetime(2014, 7, 14, 9),
+        datetime(2014, 7, 7, 9, 30): datetime(2014, 7, 14, 9, 30),
+        datetime(2014, 7, 7, 9, 30, 30): datetime(2014, 7, 14, 9, 30, 30)}))
+
+    # 3 days and 1 hour before
+    apply_large_n_cases.append((BusinessHour(-25), {
+        datetime(2014, 7, 1, 11): datetime(2014, 6, 26, 10),
+        datetime(2014, 7, 1, 13): datetime(2014, 6, 26, 12),
+        datetime(2014, 7, 1, 9): datetime(2014, 6, 25, 16),
+        datetime(2014, 7, 1, 10): datetime(2014, 6, 25, 17),
+        datetime(2014, 7, 3, 11): datetime(2014, 6, 30, 10),
+        datetime(2014, 7, 3, 8): datetime(2014, 6, 27, 16),
+        datetime(2014, 7, 3, 19): datetime(2014, 6, 30, 16),
+        datetime(2014, 7, 3, 23): datetime(2014, 6, 30, 16),
+        datetime(2014, 7, 4, 9): datetime(2014, 6, 30, 16),
+        datetime(2014, 7, 5, 15): datetime(2014, 7, 1, 16),
+        datetime(2014, 7, 6, 18): datetime(2014, 7, 1, 16),
+        datetime(2014, 7, 7, 9, 30): datetime(2014, 7, 1, 16, 30),
+        datetime(2014, 7, 7, 10, 30, 30): datetime(2014, 7, 2, 9, 30, 30)}))
+
+    # 5 days and 3 hours later
+    apply_large_n_cases.append((BusinessHour(28, start='21:00', end='02:00'), {
+        datetime(2014, 7, 1, 11): datetime(2014, 7, 9, 0),
+        datetime(2014, 7, 1, 22): datetime(2014, 7, 9, 1),
+        datetime(2014, 7, 1, 23): datetime(2014, 7, 9, 21),
+        datetime(2014, 7, 2, 2): datetime(2014, 7, 10, 0),
+        datetime(2014, 7, 3, 21): datetime(2014, 7, 11, 0),
+        datetime(2014, 7, 4, 1): datetime(2014, 7, 11, 23),
+        datetime(2014, 7, 4, 2): datetime(2014, 7, 12, 0),
+        datetime(2014, 7, 4, 3): datetime(2014, 7, 12, 0),
+        datetime(2014, 7, 5, 1): datetime(2014, 7, 14, 23),
+        datetime(2014, 7, 5, 15): datetime(2014, 7, 15, 0),
+        datetime(2014, 7, 6, 18): datetime(2014, 7, 15, 0),
+        datetime(2014, 7, 7, 1): datetime(2014, 7, 15, 0),
+        datetime(2014, 7, 7, 23, 30): datetime(2014, 7, 15, 21, 30)}))
+
+    @pytest.mark.parametrize('case', apply_large_n_cases)
+    def test_apply_large_n(self, case):
+        offset, cases = case
+        for base, expected in compat.iteritems(cases):
+            assert_offset_equal(offset, base, expected)
 
     def test_apply_nanoseconds(self):
         tests = []
@@ -1743,58 +1728,58 @@ class TestCustomBusinessDay(Base):
         result = offset.rollforward(dt)
         assert result == datetime(2012, 9, 15)
 
-    def test_onOffset(self):
-        tests = [(CDay(), datetime(2008, 1, 1), True),
-                 (CDay(), datetime(2008, 1, 5), False)]
-
-        for offset, d, expected in tests:
-            assert_onOffset(offset, d, expected)
-
-    def test_apply(self):
-        tests = []
+    on_offset_cases = [(CDay(), datetime(2008, 1, 1), True),
+                       (CDay(), datetime(2008, 1, 5), False)]
 
-        tests.append((CDay(), {datetime(2008, 1, 1): datetime(2008, 1, 2),
-                               datetime(2008, 1, 4): datetime(2008, 1, 7),
-                               datetime(2008, 1, 5): datetime(2008, 1, 7),
-                               datetime(2008, 1, 6): datetime(2008, 1, 7),
-                               datetime(2008, 1, 7): datetime(2008, 1, 8)}))
-
-        tests.append((2 * CDay(), {
-            datetime(2008, 1, 1): datetime(2008, 1, 3),
-            datetime(2008, 1, 4): datetime(2008, 1, 8),
-            datetime(2008, 1, 5): datetime(2008, 1, 8),
-            datetime(2008, 1, 6): datetime(2008, 1, 8),
-            datetime(2008, 1, 7): datetime(2008, 1, 9)}
-        ))
-
-        tests.append((-CDay(), {
-            datetime(2008, 1, 1): datetime(2007, 12, 31),
-            datetime(2008, 1, 4): datetime(2008, 1, 3),
-            datetime(2008, 1, 5): datetime(2008, 1, 4),
-            datetime(2008, 1, 6): datetime(2008, 1, 4),
-            datetime(2008, 1, 7): datetime(2008, 1, 4),
-            datetime(2008, 1, 8): datetime(2008, 1, 7)}
-        ))
-
-        tests.append((-2 * CDay(), {
-            datetime(2008, 1, 1): datetime(2007, 12, 28),
-            datetime(2008, 1, 4): datetime(2008, 1, 2),
-            datetime(2008, 1, 5): datetime(2008, 1, 3),
-            datetime(2008, 1, 6): datetime(2008, 1, 3),
-            datetime(2008, 1, 7): datetime(2008, 1, 3),
-            datetime(2008, 1, 8): datetime(2008, 1, 4),
-            datetime(2008, 1, 9): datetime(2008, 1, 7)}
-        ))
-
-        tests.append((CDay(0), {datetime(2008, 1, 1): datetime(2008, 1, 1),
-                                datetime(2008, 1, 4): datetime(2008, 1, 4),
-                                datetime(2008, 1, 5): datetime(2008, 1, 7),
-                                datetime(2008, 1, 6): datetime(2008, 1, 7),
-                                datetime(2008, 1, 7): datetime(2008, 1, 7)}))
+    @pytest.mark.parametrize('case', on_offset_cases)
+    def test_onOffset(self, case):
+        offset, d, expected = case
+        assert_onOffset(offset, d, expected)
+
+    apply_cases = []
+    apply_cases.append((CDay(), {
+        datetime(2008, 1, 1): datetime(2008, 1, 2),
+        datetime(2008, 1, 4): datetime(2008, 1, 7),
+        datetime(2008, 1, 5): datetime(2008, 1, 7),
+        datetime(2008, 1, 6): datetime(2008, 1, 7),
+        datetime(2008, 1, 7): datetime(2008, 1, 8)}))
+
+    apply_cases.append((2 * CDay(), {
+        datetime(2008, 1, 1): datetime(2008, 1, 3),
+        datetime(2008, 1, 4): datetime(2008, 1, 8),
+        datetime(2008, 1, 5): datetime(2008, 1, 8),
+        datetime(2008, 1, 6): datetime(2008, 1, 8),
+        datetime(2008, 1, 7): datetime(2008, 1, 9)}))
+
+    apply_cases.append((-CDay(), {
+        datetime(2008, 1, 1): datetime(2007, 12, 31),
+        datetime(2008, 1, 4): datetime(2008, 1, 3),
+        datetime(2008, 1, 5): datetime(2008, 1, 4),
+        datetime(2008, 1, 6): datetime(2008, 1, 4),
+        datetime(2008, 1, 7): datetime(2008, 1, 4),
+        datetime(2008, 1, 8): datetime(2008, 1, 7)}))
+
+    apply_cases.append((-2 * CDay(), {
+        datetime(2008, 1, 1): datetime(2007, 12, 28),
+        datetime(2008, 1, 4): datetime(2008, 1, 2),
+        datetime(2008, 1, 5): datetime(2008, 1, 3),
+        datetime(2008, 1, 6): datetime(2008, 1, 3),
+        datetime(2008, 1, 7): datetime(2008, 1, 3),
+        datetime(2008, 1, 8): datetime(2008, 1, 4),
+        datetime(2008, 1, 9): datetime(2008, 1, 7)}))
+
+    apply_cases.append((CDay(0), {
+        datetime(2008, 1, 1): datetime(2008, 1, 1),
+        datetime(2008, 1, 4): datetime(2008, 1, 4),
+        datetime(2008, 1, 5): datetime(2008, 1, 7),
+        datetime(2008, 1, 6): datetime(2008, 1, 7),
+        datetime(2008, 1, 7): datetime(2008, 1, 7)}))
 
-        for offset, cases in tests:
-            for base, expected in compat.iteritems(cases):
-                assert_offset_equal(offset, base, expected)
+    @pytest.mark.parametrize('case', apply_cases)
+    def test_apply(self, case):
+        offset, cases = case
+        for base, expected in compat.iteritems(cases):
+            assert_offset_equal(offset, base, expected)
 
     def test_apply_large_n(self):
         dt = datetime(2012, 10, 23)
@@ -1988,37 +1973,40 @@ class TestCustomBusinessMonthEnd(CustomBusinessMonthBase, Base):
         result = offset.rollforward(dt)
         assert result == datetime(2012, 9, 15)
 
-    def test_onOffset(self):
-        tests = [(CBMonthEnd(), datetime(2008, 1, 31), True),
-                 (CBMonthEnd(), datetime(2008, 1, 1), False)]
-
-        for offset, d, expected in tests:
-            assert_onOffset(offset, d, expected)
+    on_offset_cases = [(CBMonthEnd(), datetime(2008, 1, 31), True),
+                       (CBMonthEnd(), datetime(2008, 1, 1), False)]
 
-    def test_apply(self):
-        cbm = CBMonthEnd()
-        tests = []
+    @pytest.mark.parametrize('case', on_offset_cases)
+    def test_onOffset(self, case):
+        offset, d, expected = case
+        assert_onOffset(offset, d, expected)
 
-        tests.append((cbm, {datetime(2008, 1, 1): datetime(2008, 1, 31),
-                            datetime(2008, 2, 7): datetime(2008, 2, 29)}))
+    apply_cases = []
+    apply_cases.append((CBMonthEnd(), {
+        datetime(2008, 1, 1): datetime(2008, 1, 31),
+        datetime(2008, 2, 7): datetime(2008, 2, 29)}))
 
-        tests.append((2 * cbm, {datetime(2008, 1, 1): datetime(2008, 2, 29),
-                                datetime(2008, 2, 7): datetime(2008, 3, 31)}))
+    apply_cases.append((2 * CBMonthEnd(), {
+        datetime(2008, 1, 1): datetime(2008, 2, 29),
+        datetime(2008, 2, 7): datetime(2008, 3, 31)}))
 
-        tests.append((-cbm, {datetime(2008, 1, 1): datetime(2007, 12, 31),
-                             datetime(2008, 2, 8): datetime(2008, 1, 31)}))
+    apply_cases.append((-CBMonthEnd(), {
+        datetime(2008, 1, 1): datetime(2007, 12, 31),
+        datetime(2008, 2, 8): datetime(2008, 1, 31)}))
 
-        tests.append((-2 * cbm, {datetime(2008, 1, 1): datetime(2007, 11, 30),
-                                 datetime(2008, 2, 9): datetime(2007, 12, 31)}
-                      ))
+    apply_cases.append((-2 * CBMonthEnd(), {
+        datetime(2008, 1, 1): datetime(2007, 11, 30),
+        datetime(2008, 2, 9): datetime(2007, 12, 31)}))
 
-        tests.append((CBMonthEnd(0),
-                      {datetime(2008, 1, 1): datetime(2008, 1, 31),
-                       datetime(2008, 2, 7): datetime(2008, 2, 29)}))
+    apply_cases.append((CBMonthEnd(0), {
+        datetime(2008, 1, 1): datetime(2008, 1, 31),
+        datetime(2008, 2, 7): datetime(2008, 2, 29)}))
 
-        for offset, cases in tests:
-            for base, expected in compat.iteritems(cases):
-                assert_offset_equal(offset, base, expected)
+    @pytest.mark.parametrize('case', apply_cases)
+    def test_apply(self, case):
+        offset, cases = case
+        for base, expected in compat.iteritems(cases):
+            assert_offset_equal(offset, base, expected)
 
     def test_apply_large_n(self):
         dt = datetime(2012, 10, 23)
@@ -2102,36 +2090,40 @@ class TestCustomBusinessMonthBegin(CustomBusinessMonthBase, Base):
         result = offset.rollforward(dt)
         assert result == datetime(2012, 9, 15)
 
-    def test_onOffset(self):
-        tests = [(CBMonthBegin(), datetime(2008, 1, 1), True),
-                 (CBMonthBegin(), datetime(2008, 1, 31), False)]
-
-        for offset, dt, expected in tests:
-            assert_onOffset(offset, dt, expected)
+    on_offset_cases = [(CBMonthBegin(), datetime(2008, 1, 1), True),
+                       (CBMonthBegin(), datetime(2008, 1, 31), False)]
 
-    def test_apply(self):
-        cbm = CBMonthBegin()
-        tests = []
+    @pytest.mark.parametrize('case', on_offset_cases)
+    def test_onOffset(self, case):
+        offset, dt, expected = case
+        assert_onOffset(offset, dt, expected)
 
-        tests.append((cbm, {datetime(2008, 1, 1): datetime(2008, 2, 1),
-                            datetime(2008, 2, 7): datetime(2008, 3, 3)}))
+    apply_cases = []
+    apply_cases.append((CBMonthBegin(), {
+        datetime(2008, 1, 1): datetime(2008, 2, 1),
+        datetime(2008, 2, 7): datetime(2008, 3, 3)}))
 
-        tests.append((2 * cbm, {datetime(2008, 1, 1): datetime(2008, 3, 3),
-                                datetime(2008, 2, 7): datetime(2008, 4, 1)}))
+    apply_cases.append((2 * CBMonthBegin(), {
+        datetime(2008, 1, 1): datetime(2008, 3, 3),
+        datetime(2008, 2, 7): datetime(2008, 4, 1)}))
 
-        tests.append((-cbm, {datetime(2008, 1, 1): datetime(2007, 12, 3),
-                             datetime(2008, 2, 8): datetime(2008, 2, 1)}))
+    apply_cases.append((-CBMonthBegin(), {
+        datetime(2008, 1, 1): datetime(2007, 12, 3),
+        datetime(2008, 2, 8): datetime(2008, 2, 1)}))
 
-        tests.append((-2 * cbm, {datetime(2008, 1, 1): datetime(2007, 11, 1),
-                                 datetime(2008, 2, 9): datetime(2008, 1, 1)}))
+    apply_cases.append((-2 * CBMonthBegin(), {
+        datetime(2008, 1, 1): datetime(2007, 11, 1),
+        datetime(2008, 2, 9): datetime(2008, 1, 1)}))
 
-        tests.append((CBMonthBegin(0),
-                      {datetime(2008, 1, 1): datetime(2008, 1, 1),
-                       datetime(2008, 1, 7): datetime(2008, 2, 1)}))
+    apply_cases.append((CBMonthBegin(0), {
+        datetime(2008, 1, 1): datetime(2008, 1, 1),
+        datetime(2008, 1, 7): datetime(2008, 2, 1)}))
 
-        for offset, cases in tests:
-            for base, expected in compat.iteritems(cases):
-                assert_offset_equal(offset, base, expected)
+    @pytest.mark.parametrize('case', apply_cases)
+    def test_apply(self, case):
+        offset, cases = case
+        for base, expected in compat.iteritems(cases):
+            assert_offset_equal(offset, base, expected)
 
     def test_apply_large_n(self):
         dt = datetime(2012, 10, 23)
@@ -2189,38 +2181,42 @@ class TestWeek(Base):
         assert not Week(2, weekday=2).isAnchored()
         assert not Week(2).isAnchored()
 
-    def test_offset(self):
-        tests = []
-
-        tests.append((Week(),  # not business week
-                      {datetime(2008, 1, 1): datetime(2008, 1, 8),
-                       datetime(2008, 1, 4): datetime(2008, 1, 11),
-                       datetime(2008, 1, 5): datetime(2008, 1, 12),
-                       datetime(2008, 1, 6): datetime(2008, 1, 13),
-                       datetime(2008, 1, 7): datetime(2008, 1, 14)}))
-
-        tests.append((Week(weekday=0),  # Mon
-                      {datetime(2007, 12, 31): datetime(2008, 1, 7),
-                       datetime(2008, 1, 4): datetime(2008, 1, 7),
-                       datetime(2008, 1, 5): datetime(2008, 1, 7),
-                       datetime(2008, 1, 6): datetime(2008, 1, 7),
-                       datetime(2008, 1, 7): datetime(2008, 1, 14)}))
-
-        tests.append((Week(0, weekday=0),  # n=0 -> roll forward. Mon
-                      {datetime(2007, 12, 31): datetime(2007, 12, 31),
-                       datetime(2008, 1, 4): datetime(2008, 1, 7),
-                       datetime(2008, 1, 5): datetime(2008, 1, 7),
-                       datetime(2008, 1, 6): datetime(2008, 1, 7),
-                       datetime(2008, 1, 7): datetime(2008, 1, 7)}))
-
-        tests.append((Week(-2, weekday=1),  # n=0 -> roll forward. Mon
-                      {datetime(2010, 4, 6): datetime(2010, 3, 23),
-                       datetime(2010, 4, 8): datetime(2010, 3, 30),
-                       datetime(2010, 4, 5): datetime(2010, 3, 23)}))
+    offset_cases = []
+    # not business week
+    offset_cases.append((Week(), {
+        datetime(2008, 1, 1): datetime(2008, 1, 8),
+        datetime(2008, 1, 4): datetime(2008, 1, 11),
+        datetime(2008, 1, 5): datetime(2008, 1, 12),
+        datetime(2008, 1, 6): datetime(2008, 1, 13),
+        datetime(2008, 1, 7): datetime(2008, 1, 14)}))
+
+    # Mon
+    offset_cases.append((Week(weekday=0), {
+        datetime(2007, 12, 31): datetime(2008, 1, 7),
+        datetime(2008, 1, 4): datetime(2008, 1, 7),
+        datetime(2008, 1, 5): datetime(2008, 1, 7),
+        datetime(2008, 1, 6): datetime(2008, 1, 7),
+        datetime(2008, 1, 7): datetime(2008, 1, 14)}))
+
+    # n=0 -> roll forward. Mon
+    offset_cases.append((Week(0, weekday=0), {
+        datetime(2007, 12, 31): datetime(2007, 12, 31),
+        datetime(2008, 1, 4): datetime(2008, 1, 7),
+        datetime(2008, 1, 5): datetime(2008, 1, 7),
+        datetime(2008, 1, 6): datetime(2008, 1, 7),
+        datetime(2008, 1, 7): datetime(2008, 1, 7)}))
+
+    # n=0 -> roll forward. Mon
+    offset_cases.append((Week(-2, weekday=1), {
+        datetime(2010, 4, 6): datetime(2010, 3, 23),
+        datetime(2010, 4, 8): datetime(2010, 3, 30),
+        datetime(2010, 4, 5): datetime(2010, 3, 23)}))
 
-        for offset, cases in tests:
-            for base, expected in compat.iteritems(cases):
-                assert_offset_equal(offset, base, expected)
+    @pytest.mark.parametrize('case', offset_cases)
+    def test_offset(self, case):
+        offset, cases = case
+        for base, expected in compat.iteritems(cases):
+            assert_offset_equal(offset, base, expected)
 
     def test_onOffset(self):
         for weekday in range(7):
@@ -2300,8 +2296,7 @@ class TestWeekOfMonth(Base):
             (2, 2, 1, date1, datetime(2011, 2, 15)),
             (2, 2, 1, date2, datetime(2011, 2, 15)),
             (2, 2, 1, date3, datetime(2011, 3, 15)),
-            (2, 2, 1, date4, datetime(2011, 3, 15)),
-        ]
+            (2, 2, 1, date4, datetime(2011, 3, 15))]
 
         for n, week, weekday, dt, expected in test_cases:
             offset = WeekOfMonth(n, week=week, weekday=weekday)
@@ -2314,19 +2309,18 @@ class TestWeekOfMonth(Base):
         result = datetime(2011, 2, 3) - WeekOfMonth(week=0, weekday=2)
         assert result == datetime(2011, 2, 2)
 
-    def test_onOffset(self):
-        test_cases = [
-            (0, 0, datetime(2011, 2, 7), True),
-            (0, 0, datetime(2011, 2, 6), False),
-            (0, 0, datetime(2011, 2, 14), False),
-            (1, 0, datetime(2011, 2, 14), True),
-            (0, 1, datetime(2011, 2, 1), True),
-            (0, 1, datetime(2011, 2, 8), False),
-        ]
-
-        for week, weekday, dt, expected in test_cases:
-            offset = WeekOfMonth(week=week, weekday=weekday)
-            assert offset.onOffset(dt) == expected
+    on_offset_cases = [(0, 0, datetime(2011, 2, 7), True),
+                       (0, 0, datetime(2011, 2, 6), False),
+                       (0, 0, datetime(2011, 2, 14), False),
+                       (1, 0, datetime(2011, 2, 14), True),
+                       (0, 1, datetime(2011, 2, 1), True),
+                       (0, 1, datetime(2011, 2, 8), False)]
+
+    @pytest.mark.parametrize('case', on_offset_cases)
+    def test_onOffset(self, case):
+        week, weekday, dt, expected = case
+        offset = WeekOfMonth(week=week, weekday=weekday)
+        assert offset.onOffset(dt) == expected
 
 
 class TestLastWeekOfMonth(Base):
@@ -2380,346 +2374,32 @@ class TestLastWeekOfMonth(Base):
         offset_sunday = LastWeekOfMonth(n=1, weekday=WeekDay.SUN)
         assert datetime(2013, 7, 31) + offset_sunday == datetime(2013, 8, 25)
 
-    def test_onOffset(self):
-        test_cases = [
-            (WeekDay.SUN, datetime(2013, 1, 27), True),
-            (WeekDay.SAT, datetime(2013, 3, 30), True),
-            (WeekDay.MON, datetime(2013, 2, 18), False),  # Not the last Mon
-            (WeekDay.SUN, datetime(2013, 2, 25), False),  # Not a SUN
-            (WeekDay.MON, datetime(2013, 2, 25), True),
-            (WeekDay.SAT, datetime(2013, 11, 30), True),
-
-            (WeekDay.SAT, datetime(2006, 8, 26), True),
-            (WeekDay.SAT, datetime(2007, 8, 25), True),
-            (WeekDay.SAT, datetime(2008, 8, 30), True),
-            (WeekDay.SAT, datetime(2009, 8, 29), True),
-            (WeekDay.SAT, datetime(2010, 8, 28), True),
-            (WeekDay.SAT, datetime(2011, 8, 27), True),
-            (WeekDay.SAT, datetime(2019, 8, 31), True),
-        ]
-
-        for weekday, dt, expected in test_cases:
-            offset = LastWeekOfMonth(weekday=weekday)
-            assert offset.onOffset(dt) == expected
-
-
-class TestBMonthBegin(Base):
-    _offset = BMonthBegin
-
-    def test_offset(self):
-        tests = []
-
-        tests.append((BMonthBegin(),
-                      {datetime(2008, 1, 1): datetime(2008, 2, 1),
-                       datetime(2008, 1, 31): datetime(2008, 2, 1),
-                       datetime(2006, 12, 29): datetime(2007, 1, 1),
-                       datetime(2006, 12, 31): datetime(2007, 1, 1),
-                       datetime(2006, 9, 1): datetime(2006, 10, 2),
-                       datetime(2007, 1, 1): datetime(2007, 2, 1),
-                       datetime(2006, 12, 1): datetime(2007, 1, 1)}))
-
-        tests.append((BMonthBegin(0),
-                      {datetime(2008, 1, 1): datetime(2008, 1, 1),
-                       datetime(2006, 10, 2): datetime(2006, 10, 2),
-                       datetime(2008, 1, 31): datetime(2008, 2, 1),
-                       datetime(2006, 12, 29): datetime(2007, 1, 1),
-                       datetime(2006, 12, 31): datetime(2007, 1, 1),
-                       datetime(2006, 9, 15): datetime(2006, 10, 2)}))
-
-        tests.append((BMonthBegin(2),
-                      {datetime(2008, 1, 1): datetime(2008, 3, 3),
-                       datetime(2008, 1, 15): datetime(2008, 3, 3),
-                       datetime(2006, 12, 29): datetime(2007, 2, 1),
-                       datetime(2006, 12, 31): datetime(2007, 2, 1),
-                       datetime(2007, 1, 1): datetime(2007, 3, 1),
-                       datetime(2006, 11, 1): datetime(2007, 1, 1)}))
-
-        tests.append((BMonthBegin(-1),
-                      {datetime(2007, 1, 1): datetime(2006, 12, 1),
-                       datetime(2008, 6, 30): datetime(2008, 6, 2),
-                       datetime(2008, 6, 1): datetime(2008, 5, 1),
-                       datetime(2008, 3, 10): datetime(2008, 3, 3),
-                       datetime(2008, 12, 31): datetime(2008, 12, 1),
-                       datetime(2006, 12, 29): datetime(2006, 12, 1),
-                       datetime(2006, 12, 30): datetime(2006, 12, 1),
-                       datetime(2007, 1, 1): datetime(2006, 12, 1)}))
-
-        for offset, cases in tests:
-            for base, expected in compat.iteritems(cases):
-                assert_offset_equal(offset, base, expected)
-
-    def test_onOffset(self):
-
-        tests = [(BMonthBegin(), datetime(2007, 12, 31), False),
-                 (BMonthBegin(), datetime(2008, 1, 1), True),
-                 (BMonthBegin(), datetime(2001, 4, 2), True),
-                 (BMonthBegin(), datetime(2008, 3, 3), True)]
-
-        for offset, dt, expected in tests:
-            assert_onOffset(offset, dt, expected)
-
-    def test_offsets_compare_equal(self):
-        # root cause of #456
-        offset1 = BMonthBegin()
-        offset2 = BMonthBegin()
-        assert not offset1 != offset2
-
-
-class TestBMonthEnd(Base):
-    _offset = BMonthEnd
-
-    def test_offset(self):
-        tests = []
-
-        tests.append((BMonthEnd(),
-                      {datetime(2008, 1, 1): datetime(2008, 1, 31),
-                       datetime(2008, 1, 31): datetime(2008, 2, 29),
-                       datetime(2006, 12, 29): datetime(2007, 1, 31),
-                       datetime(2006, 12, 31): datetime(2007, 1, 31),
-                       datetime(2007, 1, 1): datetime(2007, 1, 31),
-                       datetime(2006, 12, 1): datetime(2006, 12, 29)}))
-
-        tests.append((BMonthEnd(0),
-                      {datetime(2008, 1, 1): datetime(2008, 1, 31),
-                       datetime(2008, 1, 31): datetime(2008, 1, 31),
-                       datetime(2006, 12, 29): datetime(2006, 12, 29),
-                       datetime(2006, 12, 31): datetime(2007, 1, 31),
-                       datetime(2007, 1, 1): datetime(2007, 1, 31)}))
-
-        tests.append((BMonthEnd(2),
-                      {datetime(2008, 1, 1): datetime(2008, 2, 29),
-                       datetime(2008, 1, 31): datetime(2008, 3, 31),
-                       datetime(2006, 12, 29): datetime(2007, 2, 28),
-                       datetime(2006, 12, 31): datetime(2007, 2, 28),
-                       datetime(2007, 1, 1): datetime(2007, 2, 28),
-                       datetime(2006, 11, 1): datetime(2006, 12, 29)}))
-
-        tests.append((BMonthEnd(-1),
-                      {datetime(2007, 1, 1): datetime(2006, 12, 29),
-                       datetime(2008, 6, 30): datetime(2008, 5, 30),
-                       datetime(2008, 12, 31): datetime(2008, 11, 28),
-                       datetime(2006, 12, 29): datetime(2006, 11, 30),
-                       datetime(2006, 12, 30): datetime(2006, 12, 29),
-                       datetime(2007, 1, 1): datetime(2006, 12, 29)}))
-
-        for offset, cases in tests:
-            for base, expected in compat.iteritems(cases):
-                assert_offset_equal(offset, base, expected)
-
-    def test_normalize(self):
-        dt = datetime(2007, 1, 1, 3)
-
-        result = dt + BMonthEnd(normalize=True)
-        expected = dt.replace(hour=0) + BMonthEnd()
-        assert result == expected
-
-    def test_onOffset(self):
-
-        tests = [(BMonthEnd(), datetime(2007, 12, 31), True),
-                 (BMonthEnd(), datetime(2008, 1, 1), False)]
-
-        for offset, dt, expected in tests:
-            assert_onOffset(offset, dt, expected)
-
-    def test_offsets_compare_equal(self):
-        # root cause of #456
-        offset1 = BMonthEnd()
-        offset2 = BMonthEnd()
-        assert not offset1 != offset2
-
-
-class TestMonthBegin(Base):
-    _offset = MonthBegin
-
-    def test_offset(self):
-        tests = []
-
-        # NOTE: I'm not entirely happy with the logic here for Begin -ss
-        # see thread 'offset conventions' on the ML
-        tests.append((MonthBegin(),
-                      {datetime(2008, 1, 31): datetime(2008, 2, 1),
-                       datetime(2008, 2, 1): datetime(2008, 3, 1),
-                       datetime(2006, 12, 31): datetime(2007, 1, 1),
-                       datetime(2006, 12, 1): datetime(2007, 1, 1),
-                       datetime(2007, 1, 31): datetime(2007, 2, 1)}))
-
-        tests.append((MonthBegin(0),
-                      {datetime(2008, 1, 31): datetime(2008, 2, 1),
-                       datetime(2008, 1, 1): datetime(2008, 1, 1),
-                       datetime(2006, 12, 3): datetime(2007, 1, 1),
-                       datetime(2007, 1, 31): datetime(2007, 2, 1)}))
-
-        tests.append((MonthBegin(2),
-                      {datetime(2008, 2, 29): datetime(2008, 4, 1),
-                       datetime(2008, 1, 31): datetime(2008, 3, 1),
-                       datetime(2006, 12, 31): datetime(2007, 2, 1),
-                       datetime(2007, 12, 28): datetime(2008, 2, 1),
-                       datetime(2007, 1, 1): datetime(2007, 3, 1),
-                       datetime(2006, 11, 1): datetime(2007, 1, 1)}))
-
-        tests.append((MonthBegin(-1),
-                      {datetime(2007, 1, 1): datetime(2006, 12, 1),
-                       datetime(2008, 5, 31): datetime(2008, 5, 1),
-                       datetime(2008, 12, 31): datetime(2008, 12, 1),
-                       datetime(2006, 12, 29): datetime(2006, 12, 1),
-                       datetime(2006, 1, 2): datetime(2006, 1, 1)}))
-
-        for offset, cases in tests:
-            for base, expected in compat.iteritems(cases):
-                assert_offset_equal(offset, base, expected)
-
-
-class TestMonthEnd(Base):
-    _offset = MonthEnd
-
-    def test_offset(self):
-        tests = []
-
-        tests.append((MonthEnd(),
-                      {datetime(2008, 1, 1): datetime(2008, 1, 31),
-                       datetime(2008, 1, 31): datetime(2008, 2, 29),
-                       datetime(2006, 12, 29): datetime(2006, 12, 31),
-                       datetime(2006, 12, 31): datetime(2007, 1, 31),
-                       datetime(2007, 1, 1): datetime(2007, 1, 31),
-                       datetime(2006, 12, 1): datetime(2006, 12, 31)}))
-
-        tests.append((MonthEnd(0),
-                      {datetime(2008, 1, 1): datetime(2008, 1, 31),
-                       datetime(2008, 1, 31): datetime(2008, 1, 31),
-                       datetime(2006, 12, 29): datetime(2006, 12, 31),
-                       datetime(2006, 12, 31): datetime(2006, 12, 31),
-                       datetime(2007, 1, 1): datetime(2007, 1, 31)}))
-
-        tests.append((MonthEnd(2),
-                      {datetime(2008, 1, 1): datetime(2008, 2, 29),
-                       datetime(2008, 1, 31): datetime(2008, 3, 31),
-                       datetime(2006, 12, 29): datetime(2007, 1, 31),
-                       datetime(2006, 12, 31): datetime(2007, 2, 28),
-                       datetime(2007, 1, 1): datetime(2007, 2, 28),
-                       datetime(2006, 11, 1): datetime(2006, 12, 31)}))
-
-        tests.append((MonthEnd(-1),
-                      {datetime(2007, 1, 1): datetime(2006, 12, 31),
-                       datetime(2008, 6, 30): datetime(2008, 5, 31),
-                       datetime(2008, 12, 31): datetime(2008, 11, 30),
-                       datetime(2006, 12, 29): datetime(2006, 11, 30),
-                       datetime(2006, 12, 30): datetime(2006, 11, 30),
-                       datetime(2007, 1, 1): datetime(2006, 12, 31)}))
-
-        for offset, cases in tests:
-            for base, expected in compat.iteritems(cases):
-                assert_offset_equal(offset, base, expected)
-
-    def test_day_of_month(self):
-        dt = datetime(2007, 1, 1)
-        offset = MonthEnd()
-
-        result = dt + offset
-        assert result == Timestamp(2007, 1, 31)
-
-        result = result + offset
-        assert result == Timestamp(2007, 2, 28)
-
-    def test_normalize(self):
-        dt = datetime(2007, 1, 1, 3)
-
-        result = dt + MonthEnd(normalize=True)
-        expected = dt.replace(hour=0) + MonthEnd()
-        assert result == expected
-
-    def test_onOffset(self):
-
-        tests = [(MonthEnd(), datetime(2007, 12, 31), True),
-                 (MonthEnd(), datetime(2008, 1, 1), False)]
+    on_offset_cases = [
+        (WeekDay.SUN, datetime(2013, 1, 27), True),
+        (WeekDay.SAT, datetime(2013, 3, 30), True),
+        (WeekDay.MON, datetime(2013, 2, 18), False),  # Not the last Mon
+        (WeekDay.SUN, datetime(2013, 2, 25), False),  # Not a SUN
+        (WeekDay.MON, datetime(2013, 2, 25), True),
+        (WeekDay.SAT, datetime(2013, 11, 30), True),
+
+        (WeekDay.SAT, datetime(2006, 8, 26), True),
+        (WeekDay.SAT, datetime(2007, 8, 25), True),
+        (WeekDay.SAT, datetime(2008, 8, 30), True),
+        (WeekDay.SAT, datetime(2009, 8, 29), True),
+        (WeekDay.SAT, datetime(2010, 8, 28), True),
+        (WeekDay.SAT, datetime(2011, 8, 27), True),
+        (WeekDay.SAT, datetime(2019, 8, 31), True)]
 
-        for offset, dt, expected in tests:
-            assert_onOffset(offset, dt, expected)
+    @pytest.mark.parametrize('case', on_offset_cases)
+    def test_onOffset(self, case):
+        weekday, dt, expected = case
+        offset = LastWeekOfMonth(weekday=weekday)
+        assert offset.onOffset(dt) == expected
 
 
 class TestSemiMonthEnd(Base):
     _offset = SemiMonthEnd
 
-    def _get_tests(self):
-        tests = []
-
-        tests.append((SemiMonthEnd(),
-                      {datetime(2008, 1, 1): datetime(2008, 1, 15),
-                       datetime(2008, 1, 15): datetime(2008, 1, 31),
-                       datetime(2008, 1, 31): datetime(2008, 2, 15),
-                       datetime(2006, 12, 14): datetime(2006, 12, 15),
-                       datetime(2006, 12, 29): datetime(2006, 12, 31),
-                       datetime(2006, 12, 31): datetime(2007, 1, 15),
-                       datetime(2007, 1, 1): datetime(2007, 1, 15),
-                       datetime(2006, 12, 1): datetime(2006, 12, 15),
-                       datetime(2006, 12, 15): datetime(2006, 12, 31)}))
-
-        tests.append((SemiMonthEnd(day_of_month=20),
-                      {datetime(2008, 1, 1): datetime(2008, 1, 20),
-                       datetime(2008, 1, 15): datetime(2008, 1, 20),
-                       datetime(2008, 1, 21): datetime(2008, 1, 31),
-                       datetime(2008, 1, 31): datetime(2008, 2, 20),
-                       datetime(2006, 12, 14): datetime(2006, 12, 20),
-                       datetime(2006, 12, 29): datetime(2006, 12, 31),
-                       datetime(2006, 12, 31): datetime(2007, 1, 20),
-                       datetime(2007, 1, 1): datetime(2007, 1, 20),
-                       datetime(2006, 12, 1): datetime(2006, 12, 20),
-                       datetime(2006, 12, 15): datetime(2006, 12, 20)}))
-
-        tests.append((SemiMonthEnd(0),
-                      {datetime(2008, 1, 1): datetime(2008, 1, 15),
-                       datetime(2008, 1, 16): datetime(2008, 1, 31),
-                       datetime(2008, 1, 15): datetime(2008, 1, 15),
-                       datetime(2008, 1, 31): datetime(2008, 1, 31),
-                       datetime(2006, 12, 29): datetime(2006, 12, 31),
-                       datetime(2006, 12, 31): datetime(2006, 12, 31),
-                       datetime(2007, 1, 1): datetime(2007, 1, 15)}))
-
-        tests.append((SemiMonthEnd(0, day_of_month=16),
-                      {datetime(2008, 1, 1): datetime(2008, 1, 16),
-                       datetime(2008, 1, 16): datetime(2008, 1, 16),
-                       datetime(2008, 1, 15): datetime(2008, 1, 16),
-                       datetime(2008, 1, 31): datetime(2008, 1, 31),
-                       datetime(2006, 12, 29): datetime(2006, 12, 31),
-                       datetime(2006, 12, 31): datetime(2006, 12, 31),
-                       datetime(2007, 1, 1): datetime(2007, 1, 16)}))
-
-        tests.append((SemiMonthEnd(2),
-                      {datetime(2008, 1, 1): datetime(2008, 1, 31),
-                       datetime(2008, 1, 31): datetime(2008, 2, 29),
-                       datetime(2006, 12, 29): datetime(2007, 1, 15),
-                       datetime(2006, 12, 31): datetime(2007, 1, 31),
-                       datetime(2007, 1, 1): datetime(2007, 1, 31),
-                       datetime(2007, 1, 16): datetime(2007, 2, 15),
-                       datetime(2006, 11, 1): datetime(2006, 11, 30)}))
-
-        tests.append((SemiMonthEnd(-1),
-                      {datetime(2007, 1, 1): datetime(2006, 12, 31),
-                       datetime(2008, 6, 30): datetime(2008, 6, 15),
-                       datetime(2008, 12, 31): datetime(2008, 12, 15),
-                       datetime(2006, 12, 29): datetime(2006, 12, 15),
-                       datetime(2006, 12, 30): datetime(2006, 12, 15),
-                       datetime(2007, 1, 1): datetime(2006, 12, 31)}))
-
-        tests.append((SemiMonthEnd(-1, day_of_month=4),
-                      {datetime(2007, 1, 1): datetime(2006, 12, 31),
-                       datetime(2007, 1, 4): datetime(2006, 12, 31),
-                       datetime(2008, 6, 30): datetime(2008, 6, 4),
-                       datetime(2008, 12, 31): datetime(2008, 12, 4),
-                       datetime(2006, 12, 5): datetime(2006, 12, 4),
-                       datetime(2006, 12, 30): datetime(2006, 12, 4),
-                       datetime(2007, 1, 1): datetime(2006, 12, 31)}))
-
-        tests.append((SemiMonthEnd(-2),
-                      {datetime(2007, 1, 1): datetime(2006, 12, 15),
-                       datetime(2008, 6, 30): datetime(2008, 5, 31),
-                       datetime(2008, 3, 15): datetime(2008, 2, 15),
-                       datetime(2008, 12, 31): datetime(2008, 11, 30),
-                       datetime(2006, 12, 29): datetime(2006, 11, 30),
-                       datetime(2006, 12, 14): datetime(2006, 11, 15),
-                       datetime(2007, 1, 1): datetime(2006, 12, 15)}))
-
-        return tests
-
     def test_offset_whole_year(self):
         dates = (datetime(2007, 12, 31),
                  datetime(2008, 1, 15),
@@ -2761,28 +2441,107 @@ class TestSemiMonthEnd(Base):
         exp = DatetimeIndex(dates)
         tm.assert_index_equal(result, exp)
 
-    def test_offset(self):
-        for offset, cases in self._get_tests():
-            for base, expected in compat.iteritems(cases):
-                assert_offset_equal(offset, base, expected)
-
-    def test_apply_index(self):
-        for offset, cases in self._get_tests():
-            s = DatetimeIndex(cases.keys())
-            result = offset.apply_index(s)
-            exp = DatetimeIndex(cases.values())
-            tm.assert_index_equal(result, exp)
-
-    def test_onOffset(self):
-
-        tests = [(datetime(2007, 12, 31), True),
-                 (datetime(2007, 12, 15), True),
-                 (datetime(2007, 12, 14), False),
-                 (datetime(2007, 12, 1), False),
-                 (datetime(2008, 2, 29), True)]
+    offset_cases = []
+    offset_cases.append((SemiMonthEnd(), {
+        datetime(2008, 1, 1): datetime(2008, 1, 15),
+        datetime(2008, 1, 15): datetime(2008, 1, 31),
+        datetime(2008, 1, 31): datetime(2008, 2, 15),
+        datetime(2006, 12, 14): datetime(2006, 12, 15),
+        datetime(2006, 12, 29): datetime(2006, 12, 31),
+        datetime(2006, 12, 31): datetime(2007, 1, 15),
+        datetime(2007, 1, 1): datetime(2007, 1, 15),
+        datetime(2006, 12, 1): datetime(2006, 12, 15),
+        datetime(2006, 12, 15): datetime(2006, 12, 31)}))
+
+    offset_cases.append((SemiMonthEnd(day_of_month=20), {
+        datetime(2008, 1, 1): datetime(2008, 1, 20),
+        datetime(2008, 1, 15): datetime(2008, 1, 20),
+        datetime(2008, 1, 21): datetime(2008, 1, 31),
+        datetime(2008, 1, 31): datetime(2008, 2, 20),
+        datetime(2006, 12, 14): datetime(2006, 12, 20),
+        datetime(2006, 12, 29): datetime(2006, 12, 31),
+        datetime(2006, 12, 31): datetime(2007, 1, 20),
+        datetime(2007, 1, 1): datetime(2007, 1, 20),
+        datetime(2006, 12, 1): datetime(2006, 12, 20),
+        datetime(2006, 12, 15): datetime(2006, 12, 20)}))
+
+    offset_cases.append((SemiMonthEnd(0), {
+        datetime(2008, 1, 1): datetime(2008, 1, 15),
+        datetime(2008, 1, 16): datetime(2008, 1, 31),
+        datetime(2008, 1, 15): datetime(2008, 1, 15),
+        datetime(2008, 1, 31): datetime(2008, 1, 31),
+        datetime(2006, 12, 29): datetime(2006, 12, 31),
+        datetime(2006, 12, 31): datetime(2006, 12, 31),
+        datetime(2007, 1, 1): datetime(2007, 1, 15)}))
+
+    offset_cases.append((SemiMonthEnd(0, day_of_month=16), {
+        datetime(2008, 1, 1): datetime(2008, 1, 16),
+        datetime(2008, 1, 16): datetime(2008, 1, 16),
+        datetime(2008, 1, 15): datetime(2008, 1, 16),
+        datetime(2008, 1, 31): datetime(2008, 1, 31),
+        datetime(2006, 12, 29): datetime(2006, 12, 31),
+        datetime(2006, 12, 31): datetime(2006, 12, 31),
+        datetime(2007, 1, 1): datetime(2007, 1, 16)}))
+
+    offset_cases.append((SemiMonthEnd(2), {
+        datetime(2008, 1, 1): datetime(2008, 1, 31),
+        datetime(2008, 1, 31): datetime(2008, 2, 29),
+        datetime(2006, 12, 29): datetime(2007, 1, 15),
+        datetime(2006, 12, 31): datetime(2007, 1, 31),
+        datetime(2007, 1, 1): datetime(2007, 1, 31),
+        datetime(2007, 1, 16): datetime(2007, 2, 15),
+        datetime(2006, 11, 1): datetime(2006, 11, 30)}))
+
+    offset_cases.append((SemiMonthEnd(-1), {
+        datetime(2007, 1, 1): datetime(2006, 12, 31),
+        datetime(2008, 6, 30): datetime(2008, 6, 15),
+        datetime(2008, 12, 31): datetime(2008, 12, 15),
+        datetime(2006, 12, 29): datetime(2006, 12, 15),
+        datetime(2006, 12, 30): datetime(2006, 12, 15),
+        datetime(2007, 1, 1): datetime(2006, 12, 31)}))
+
+    offset_cases.append((SemiMonthEnd(-1, day_of_month=4), {
+        datetime(2007, 1, 1): datetime(2006, 12, 31),
+        datetime(2007, 1, 4): datetime(2006, 12, 31),
+        datetime(2008, 6, 30): datetime(2008, 6, 4),
+        datetime(2008, 12, 31): datetime(2008, 12, 4),
+        datetime(2006, 12, 5): datetime(2006, 12, 4),
+        datetime(2006, 12, 30): datetime(2006, 12, 4),
+        datetime(2007, 1, 1): datetime(2006, 12, 31)}))
+
+    offset_cases.append((SemiMonthEnd(-2), {
+        datetime(2007, 1, 1): datetime(2006, 12, 15),
+        datetime(2008, 6, 30): datetime(2008, 5, 31),
+        datetime(2008, 3, 15): datetime(2008, 2, 15),
+        datetime(2008, 12, 31): datetime(2008, 11, 30),
+        datetime(2006, 12, 29): datetime(2006, 11, 30),
+        datetime(2006, 12, 14): datetime(2006, 11, 15),
+        datetime(2007, 1, 1): datetime(2006, 12, 15)}))
 
-        for dt, expected in tests:
-            assert_onOffset(SemiMonthEnd(), dt, expected)
+    @pytest.mark.parametrize('case', offset_cases)
+    def test_offset(self, case):
+        offset, cases = case
+        for base, expected in compat.iteritems(cases):
+            assert_offset_equal(offset, base, expected)
+
+    @pytest.mark.parametrize('case', offset_cases)
+    def test_apply_index(self, case):
+        offset, cases = case
+        s = DatetimeIndex(cases.keys())
+        result = offset.apply_index(s)
+        exp = DatetimeIndex(cases.values())
+        tm.assert_index_equal(result, exp)
+
+    on_offset_cases = [(datetime(2007, 12, 31), True),
+                       (datetime(2007, 12, 15), True),
+                       (datetime(2007, 12, 14), False),
+                       (datetime(2007, 12, 1), False),
+                       (datetime(2008, 2, 29), True)]
+
+    @pytest.mark.parametrize('case', on_offset_cases)
+    def test_onOffset(self, case):
+        dt, expected = case
+        assert_onOffset(SemiMonthEnd(), dt, expected)
 
     @pytest.mark.parametrize('klass,assert_func',
                              [(Series, tm.assert_series_equal),
@@ -2811,91 +2570,6 @@ class TestSemiMonthEnd(Base):
 class TestSemiMonthBegin(Base):
     _offset = SemiMonthBegin
 
-    def _get_tests(self):
-        tests = []
-
-        tests.append((SemiMonthBegin(),
-                      {datetime(2008, 1, 1): datetime(2008, 1, 15),
-                       datetime(2008, 1, 15): datetime(2008, 2, 1),
-                       datetime(2008, 1, 31): datetime(2008, 2, 1),
-                       datetime(2006, 12, 14): datetime(2006, 12, 15),
-                       datetime(2006, 12, 29): datetime(2007, 1, 1),
-                       datetime(2006, 12, 31): datetime(2007, 1, 1),
-                       datetime(2007, 1, 1): datetime(2007, 1, 15),
-                       datetime(2006, 12, 1): datetime(2006, 12, 15),
-                       datetime(2006, 12, 15): datetime(2007, 1, 1)}))
-
-        tests.append((SemiMonthBegin(day_of_month=20),
-                      {datetime(2008, 1, 1): datetime(2008, 1, 20),
-                       datetime(2008, 1, 15): datetime(2008, 1, 20),
-                       datetime(2008, 1, 21): datetime(2008, 2, 1),
-                       datetime(2008, 1, 31): datetime(2008, 2, 1),
-                       datetime(2006, 12, 14): datetime(2006, 12, 20),
-                       datetime(2006, 12, 29): datetime(2007, 1, 1),
-                       datetime(2006, 12, 31): datetime(2007, 1, 1),
-                       datetime(2007, 1, 1): datetime(2007, 1, 20),
-                       datetime(2006, 12, 1): datetime(2006, 12, 20),
-                       datetime(2006, 12, 15): datetime(2006, 12, 20)}))
-
-        tests.append((SemiMonthBegin(0),
-                      {datetime(2008, 1, 1): datetime(2008, 1, 1),
-                       datetime(2008, 1, 16): datetime(2008, 2, 1),
-                       datetime(2008, 1, 15): datetime(2008, 1, 15),
-                       datetime(2008, 1, 31): datetime(2008, 2, 1),
-                       datetime(2006, 12, 29): datetime(2007, 1, 1),
-                       datetime(2006, 12, 2): datetime(2006, 12, 15),
-                       datetime(2007, 1, 1): datetime(2007, 1, 1)}))
-
-        tests.append((SemiMonthBegin(0, day_of_month=16),
-                      {datetime(2008, 1, 1): datetime(2008, 1, 1),
-                       datetime(2008, 1, 16): datetime(2008, 1, 16),
-                       datetime(2008, 1, 15): datetime(2008, 1, 16),
-                       datetime(2008, 1, 31): datetime(2008, 2, 1),
-                       datetime(2006, 12, 29): datetime(2007, 1, 1),
-                       datetime(2006, 12, 31): datetime(2007, 1, 1),
-                       datetime(2007, 1, 5): datetime(2007, 1, 16),
-                       datetime(2007, 1, 1): datetime(2007, 1, 1)}))
-
-        tests.append((SemiMonthBegin(2),
-                      {datetime(2008, 1, 1): datetime(2008, 2, 1),
-                       datetime(2008, 1, 31): datetime(2008, 2, 15),
-                       datetime(2006, 12, 1): datetime(2007, 1, 1),
-                       datetime(2006, 12, 29): datetime(2007, 1, 15),
-                       datetime(2006, 12, 15): datetime(2007, 1, 15),
-                       datetime(2007, 1, 1): datetime(2007, 2, 1),
-                       datetime(2007, 1, 16): datetime(2007, 2, 15),
-                       datetime(2006, 11, 1): datetime(2006, 12, 1)}))
-
-        tests.append((SemiMonthBegin(-1),
-                      {datetime(2007, 1, 1): datetime(2006, 12, 15),
-                       datetime(2008, 6, 30): datetime(2008, 6, 15),
-                       datetime(2008, 6, 14): datetime(2008, 6, 1),
-                       datetime(2008, 12, 31): datetime(2008, 12, 15),
-                       datetime(2006, 12, 29): datetime(2006, 12, 15),
-                       datetime(2006, 12, 15): datetime(2006, 12, 1),
-                       datetime(2007, 1, 1): datetime(2006, 12, 15)}))
-
-        tests.append((SemiMonthBegin(-1, day_of_month=4),
-                      {datetime(2007, 1, 1): datetime(2006, 12, 4),
-                       datetime(2007, 1, 4): datetime(2007, 1, 1),
-                       datetime(2008, 6, 30): datetime(2008, 6, 4),
-                       datetime(2008, 12, 31): datetime(2008, 12, 4),
-                       datetime(2006, 12, 5): datetime(2006, 12, 4),
-                       datetime(2006, 12, 30): datetime(2006, 12, 4),
-                       datetime(2006, 12, 2): datetime(2006, 12, 1),
-                       datetime(2007, 1, 1): datetime(2006, 12, 4)}))
-
-        tests.append((SemiMonthBegin(-2),
-                      {datetime(2007, 1, 1): datetime(2006, 12, 1),
-                       datetime(2008, 6, 30): datetime(2008, 6, 1),
-                       datetime(2008, 6, 14): datetime(2008, 5, 15),
-                       datetime(2008, 12, 31): datetime(2008, 12, 1),
-                       datetime(2006, 12, 29): datetime(2006, 12, 1),
-                       datetime(2006, 12, 15): datetime(2006, 11, 15),
-                       datetime(2007, 1, 1): datetime(2006, 12, 1)}))
-
-        return tests
-
     def test_offset_whole_year(self):
         dates = (datetime(2007, 12, 15),
                  datetime(2008, 1, 1),
@@ -2937,27 +2611,111 @@ class TestSemiMonthBegin(Base):
         exp = DatetimeIndex(dates)
         tm.assert_index_equal(result, exp)
 
-    def test_offset(self):
-        for offset, cases in self._get_tests():
-            for base, expected in compat.iteritems(cases):
-                assert_offset_equal(offset, base, expected)
+    offset_cases = []
+    offset_cases.append((SemiMonthBegin(), {
+        datetime(2008, 1, 1): datetime(2008, 1, 15),
+        datetime(2008, 1, 15): datetime(2008, 2, 1),
+        datetime(2008, 1, 31): datetime(2008, 2, 1),
+        datetime(2006, 12, 14): datetime(2006, 12, 15),
+        datetime(2006, 12, 29): datetime(2007, 1, 1),
+        datetime(2006, 12, 31): datetime(2007, 1, 1),
+        datetime(2007, 1, 1): datetime(2007, 1, 15),
+        datetime(2006, 12, 1): datetime(2006, 12, 15),
+        datetime(2006, 12, 15): datetime(2007, 1, 1)}))
+
+    offset_cases.append((SemiMonthBegin(day_of_month=20), {
+        datetime(2008, 1, 1): datetime(2008, 1, 20),
+        datetime(2008, 1, 15): datetime(2008, 1, 20),
+        datetime(2008, 1, 21): datetime(2008, 2, 1),
+        datetime(2008, 1, 31): datetime(2008, 2, 1),
+        datetime(2006, 12, 14): datetime(2006, 12, 20),
+        datetime(2006, 12, 29): datetime(2007, 1, 1),
+        datetime(2006, 12, 31): datetime(2007, 1, 1),
+        datetime(2007, 1, 1): datetime(2007, 1, 20),
+        datetime(2006, 12, 1): datetime(2006, 12, 20),
+        datetime(2006, 12, 15): datetime(2006, 12, 20)}))
+
+    offset_cases.append((SemiMonthBegin(0), {
+        datetime(2008, 1, 1): datetime(2008, 1, 1),
+        datetime(2008, 1, 16): datetime(2008, 2, 1),
+        datetime(2008, 1, 15): datetime(2008, 1, 15),
+        datetime(2008, 1, 31): datetime(2008, 2, 1),
+        datetime(2006, 12, 29): datetime(2007, 1, 1),
+        datetime(2006, 12, 2): datetime(2006, 12, 15),
+        datetime(2007, 1, 1): datetime(2007, 1, 1)}))
 
-    def test_apply_index(self):
-        for offset, cases in self._get_tests():
-            s = DatetimeIndex(cases.keys())
-            result = offset.apply_index(s)
-            exp = DatetimeIndex(cases.values())
-            tm.assert_index_equal(result, exp)
+    offset_cases.append((SemiMonthBegin(0, day_of_month=16), {
+        datetime(2008, 1, 1): datetime(2008, 1, 1),
+        datetime(2008, 1, 16): datetime(2008, 1, 16),
+        datetime(2008, 1, 15): datetime(2008, 1, 16),
+        datetime(2008, 1, 31): datetime(2008, 2, 1),
+        datetime(2006, 12, 29): datetime(2007, 1, 1),
+        datetime(2006, 12, 31): datetime(2007, 1, 1),
+        datetime(2007, 1, 5): datetime(2007, 1, 16),
+        datetime(2007, 1, 1): datetime(2007, 1, 1)}))
 
-    def test_onOffset(self):
-        tests = [(datetime(2007, 12, 1), True),
-                 (datetime(2007, 12, 15), True),
-                 (datetime(2007, 12, 14), False),
-                 (datetime(2007, 12, 31), False),
-                 (datetime(2008, 2, 15), True)]
+    offset_cases.append((SemiMonthBegin(2), {
+        datetime(2008, 1, 1): datetime(2008, 2, 1),
+        datetime(2008, 1, 31): datetime(2008, 2, 15),
+        datetime(2006, 12, 1): datetime(2007, 1, 1),
+        datetime(2006, 12, 29): datetime(2007, 1, 15),
+        datetime(2006, 12, 15): datetime(2007, 1, 15),
+        datetime(2007, 1, 1): datetime(2007, 2, 1),
+        datetime(2007, 1, 16): datetime(2007, 2, 15),
+        datetime(2006, 11, 1): datetime(2006, 12, 1)}))
+
+    offset_cases.append((SemiMonthBegin(-1), {
+        datetime(2007, 1, 1): datetime(2006, 12, 15),
+        datetime(2008, 6, 30): datetime(2008, 6, 15),
+        datetime(2008, 6, 14): datetime(2008, 6, 1),
+        datetime(2008, 12, 31): datetime(2008, 12, 15),
+        datetime(2006, 12, 29): datetime(2006, 12, 15),
+        datetime(2006, 12, 15): datetime(2006, 12, 1),
+        datetime(2007, 1, 1): datetime(2006, 12, 15)}))
+
+    offset_cases.append((SemiMonthBegin(-1, day_of_month=4), {
+        datetime(2007, 1, 1): datetime(2006, 12, 4),
+        datetime(2007, 1, 4): datetime(2007, 1, 1),
+        datetime(2008, 6, 30): datetime(2008, 6, 4),
+        datetime(2008, 12, 31): datetime(2008, 12, 4),
+        datetime(2006, 12, 5): datetime(2006, 12, 4),
+        datetime(2006, 12, 30): datetime(2006, 12, 4),
+        datetime(2006, 12, 2): datetime(2006, 12, 1),
+        datetime(2007, 1, 1): datetime(2006, 12, 4)}))
+
+    offset_cases.append((SemiMonthBegin(-2), {
+        datetime(2007, 1, 1): datetime(2006, 12, 1),
+        datetime(2008, 6, 30): datetime(2008, 6, 1),
+        datetime(2008, 6, 14): datetime(2008, 5, 15),
+        datetime(2008, 12, 31): datetime(2008, 12, 1),
+        datetime(2006, 12, 29): datetime(2006, 12, 1),
+        datetime(2006, 12, 15): datetime(2006, 11, 15),
+        datetime(2007, 1, 1): datetime(2006, 12, 1)}))
 
-        for dt, expected in tests:
-            assert_onOffset(SemiMonthBegin(), dt, expected)
+    @pytest.mark.parametrize('case', offset_cases)
+    def test_offset(self, case):
+        offset, cases = case
+        for base, expected in compat.iteritems(cases):
+            assert_offset_equal(offset, base, expected)
+
+    @pytest.mark.parametrize('case', offset_cases)
+    def test_apply_index(self, case):
+        offset, cases = case
+        s = DatetimeIndex(cases.keys())
+        result = offset.apply_index(s)
+        exp = DatetimeIndex(cases.values())
+        tm.assert_index_equal(result, exp)
+
+    on_offset_cases = [(datetime(2007, 12, 1), True),
+                       (datetime(2007, 12, 15), True),
+                       (datetime(2007, 12, 14), False),
+                       (datetime(2007, 12, 31), False),
+                       (datetime(2008, 2, 15), True)]
+
+    @pytest.mark.parametrize('case', on_offset_cases)
+    def test_onOffset(self, case):
+        dt, expected = case
+        assert_onOffset(SemiMonthBegin(), dt, expected)
 
     @pytest.mark.parametrize('klass,assert_func',
                              [(Series, tm.assert_series_equal),
@@ -2982,1276 +2740,6 @@ class TestSemiMonthBegin(Base):
         assert_func(result2, exp)
 
 
-class TestBQuarterBegin(Base):
-    _offset = BQuarterBegin
-
-    def test_repr(self):
-        assert (repr(BQuarterBegin()) ==
-                "<BusinessQuarterBegin: startingMonth=3>")
-        assert (repr(BQuarterBegin(startingMonth=3)) ==
-                "<BusinessQuarterBegin: startingMonth=3>")
-        assert (repr(BQuarterBegin(startingMonth=1)) ==
-                "<BusinessQuarterBegin: startingMonth=1>")
-
-    def test_isAnchored(self):
-        assert BQuarterBegin(startingMonth=1).isAnchored()
-        assert BQuarterBegin().isAnchored()
-        assert not BQuarterBegin(2, startingMonth=1).isAnchored()
-
-    offset_cases = []
-    offset_cases.append((BQuarterBegin(startingMonth=1), {
-        datetime(2008, 1, 1): datetime(2008, 4, 1),
-        datetime(2008, 1, 31): datetime(2008, 4, 1),
-        datetime(2008, 2, 15): datetime(2008, 4, 1),
-        datetime(2008, 2, 29): datetime(2008, 4, 1),
-        datetime(2008, 3, 15): datetime(2008, 4, 1),
-        datetime(2008, 3, 31): datetime(2008, 4, 1),
-        datetime(2008, 4, 15): datetime(2008, 7, 1),
-        datetime(2007, 3, 15): datetime(2007, 4, 2),
-        datetime(2007, 2, 28): datetime(2007, 4, 2),
-        datetime(2007, 1, 1): datetime(2007, 4, 2),
-        datetime(2007, 4, 15): datetime(2007, 7, 2),
-        datetime(2007, 7, 1): datetime(2007, 7, 2),
-        datetime(2007, 4, 1): datetime(2007, 4, 2),
-        datetime(2007, 4, 2): datetime(2007, 7, 2),
-        datetime(2008, 4, 30): datetime(2008, 7, 1)}))
-
-    offset_cases.append((BQuarterBegin(startingMonth=2), {
-        datetime(2008, 1, 1): datetime(2008, 2, 1),
-        datetime(2008, 1, 31): datetime(2008, 2, 1),
-        datetime(2008, 1, 15): datetime(2008, 2, 1),
-        datetime(2008, 2, 29): datetime(2008, 5, 1),
-        datetime(2008, 3, 15): datetime(2008, 5, 1),
-        datetime(2008, 3, 31): datetime(2008, 5, 1),
-        datetime(2008, 4, 15): datetime(2008, 5, 1),
-        datetime(2008, 8, 15): datetime(2008, 11, 3),
-        datetime(2008, 9, 15): datetime(2008, 11, 3),
-        datetime(2008, 11, 1): datetime(2008, 11, 3),
-        datetime(2008, 4, 30): datetime(2008, 5, 1)}))
-
-    offset_cases.append((BQuarterBegin(startingMonth=1, n=0), {
-        datetime(2008, 1, 1): datetime(2008, 1, 1),
-        datetime(2007, 12, 31): datetime(2008, 1, 1),
-        datetime(2008, 2, 15): datetime(2008, 4, 1),
-        datetime(2008, 2, 29): datetime(2008, 4, 1),
-        datetime(2008, 1, 15): datetime(2008, 4, 1),
-        datetime(2008, 2, 27): datetime(2008, 4, 1),
-        datetime(2008, 3, 15): datetime(2008, 4, 1),
-        datetime(2007, 4, 1): datetime(2007, 4, 2),
-        datetime(2007, 4, 2): datetime(2007, 4, 2),
-        datetime(2007, 7, 1): datetime(2007, 7, 2),
-        datetime(2007, 4, 15): datetime(2007, 7, 2),
-        datetime(2007, 7, 2): datetime(2007, 7, 2)}))
-
-    offset_cases.append((BQuarterBegin(startingMonth=1, n=-1), {
-        datetime(2008, 1, 1): datetime(2007, 10, 1),
-        datetime(2008, 1, 31): datetime(2008, 1, 1),
-        datetime(2008, 2, 15): datetime(2008, 1, 1),
-        datetime(2008, 2, 29): datetime(2008, 1, 1),
-        datetime(2008, 3, 15): datetime(2008, 1, 1),
-        datetime(2008, 3, 31): datetime(2008, 1, 1),
-        datetime(2008, 4, 15): datetime(2008, 4, 1),
-        datetime(2007, 7, 3): datetime(2007, 7, 2),
-        datetime(2007, 4, 3): datetime(2007, 4, 2),
-        datetime(2007, 7, 2): datetime(2007, 4, 2),
-        datetime(2008, 4, 1): datetime(2008, 1, 1)}))
-
-    offset_cases.append((BQuarterBegin(startingMonth=1, n=2), {
-        datetime(2008, 1, 1): datetime(2008, 7, 1),
-        datetime(2008, 1, 15): datetime(2008, 7, 1),
-        datetime(2008, 2, 29): datetime(2008, 7, 1),
-        datetime(2008, 3, 15): datetime(2008, 7, 1),
-        datetime(2007, 3, 31): datetime(2007, 7, 2),
-        datetime(2007, 4, 15): datetime(2007, 10, 1),
-        datetime(2008, 4, 30): datetime(2008, 10, 1)}))
-
-    @pytest.mark.parametrize('case', offset_cases)
-    def test_offset(self, case):
-        offset, cases = case
-        for base, expected in compat.iteritems(cases):
-            assert_offset_equal(offset, base, expected)
-
-    def test_offset_corner_case(self):
-        # corner
-        offset = BQuarterBegin(n=-1, startingMonth=1)
-        assert datetime(2007, 4, 3) + offset == datetime(2007, 4, 2)
-
-
-class TestBQuarterEnd(Base):
-    _offset = BQuarterEnd
-
-    def test_repr(self):
-        assert (repr(BQuarterEnd()) ==
-                "<BusinessQuarterEnd: startingMonth=3>")
-        assert (repr(BQuarterEnd(startingMonth=3)) ==
-                "<BusinessQuarterEnd: startingMonth=3>")
-        assert (repr(BQuarterEnd(startingMonth=1)) ==
-                "<BusinessQuarterEnd: startingMonth=1>")
-
-    def test_isAnchored(self):
-        assert BQuarterEnd(startingMonth=1).isAnchored()
-        assert BQuarterEnd().isAnchored()
-        assert not BQuarterEnd(2, startingMonth=1).isAnchored()
-
-    offset_cases = []
-    offset_cases.append((BQuarterEnd(startingMonth=1),
-                        {datetime(2008, 1, 1): datetime(2008, 1, 31),
-                         datetime(2008, 1, 31): datetime(2008, 4, 30),
-                         datetime(2008, 2, 15): datetime(2008, 4, 30),
-                         datetime(2008, 2, 29): datetime(2008, 4, 30),
-                         datetime(2008, 3, 15): datetime(2008, 4, 30),
-                         datetime(2008, 3, 31): datetime(2008, 4, 30),
-                         datetime(2008, 4, 15): datetime(2008, 4, 30),
-                         datetime(2008, 4, 30): datetime(2008, 7, 31), }))
-
-    offset_cases.append((BQuarterEnd(startingMonth=2),
-                        {datetime(2008, 1, 1): datetime(2008, 2, 29),
-                         datetime(2008, 1, 31): datetime(2008, 2, 29),
-                         datetime(2008, 2, 15): datetime(2008, 2, 29),
-                         datetime(2008, 2, 29): datetime(2008, 5, 30),
-                         datetime(2008, 3, 15): datetime(2008, 5, 30),
-                         datetime(2008, 3, 31): datetime(2008, 5, 30),
-                         datetime(2008, 4, 15): datetime(2008, 5, 30),
-                         datetime(2008, 4, 30): datetime(2008, 5, 30), }))
-
-    offset_cases.append((BQuarterEnd(startingMonth=1, n=0),
-                        {datetime(2008, 1, 1): datetime(2008, 1, 31),
-                         datetime(2008, 1, 31): datetime(2008, 1, 31),
-                         datetime(2008, 2, 15): datetime(2008, 4, 30),
-                         datetime(2008, 2, 29): datetime(2008, 4, 30),
-                         datetime(2008, 3, 15): datetime(2008, 4, 30),
-                         datetime(2008, 3, 31): datetime(2008, 4, 30),
-                         datetime(2008, 4, 15): datetime(2008, 4, 30),
-                         datetime(2008, 4, 30): datetime(2008, 4, 30), }))
-
-    offset_cases.append((BQuarterEnd(startingMonth=1, n=-1),
-                        {datetime(2008, 1, 1): datetime(2007, 10, 31),
-                         datetime(2008, 1, 31): datetime(2007, 10, 31),
-                         datetime(2008, 2, 15): datetime(2008, 1, 31),
-                         datetime(2008, 2, 29): datetime(2008, 1, 31),
-                         datetime(2008, 3, 15): datetime(2008, 1, 31),
-                         datetime(2008, 3, 31): datetime(2008, 1, 31),
-                         datetime(2008, 4, 15): datetime(2008, 1, 31),
-                         datetime(2008, 4, 30): datetime(2008, 1, 31), }))
-
-    offset_cases.append((BQuarterEnd(startingMonth=1, n=2),
-                        {datetime(2008, 1, 31): datetime(2008, 7, 31),
-                         datetime(2008, 2, 15): datetime(2008, 7, 31),
-                         datetime(2008, 2, 29): datetime(2008, 7, 31),
-                         datetime(2008, 3, 15): datetime(2008, 7, 31),
-                         datetime(2008, 3, 31): datetime(2008, 7, 31),
-                         datetime(2008, 4, 15): datetime(2008, 7, 31),
-                         datetime(2008, 4, 30): datetime(2008, 10, 31), }))
-
-    @pytest.mark.parametrize('case', offset_cases)
-    def test_offset(self, case):
-        offset, cases = case
-        for base, expected in compat.iteritems(cases):
-            assert_offset_equal(offset, base, expected)
-
-    def test_offset_corner_case(self):
-        # corner
-        offset = BQuarterEnd(n=-1, startingMonth=1)
-        assert datetime(2010, 1, 31) + offset == datetime(2010, 1, 29)
-
-    on_offset_cases = [
-        (BQuarterEnd(1, startingMonth=1), datetime(2008, 1, 31), True),
-        (BQuarterEnd(1, startingMonth=1), datetime(2007, 12, 31), False),
-        (BQuarterEnd(1, startingMonth=1), datetime(2008, 2, 29), False),
-        (BQuarterEnd(1, startingMonth=1), datetime(2007, 3, 30), False),
-        (BQuarterEnd(1, startingMonth=1), datetime(2007, 3, 31), False),
-        (BQuarterEnd(1, startingMonth=1), datetime(2008, 4, 30), True),
-        (BQuarterEnd(1, startingMonth=1), datetime(2008, 5, 30), False),
-        (BQuarterEnd(1, startingMonth=1), datetime(2007, 6, 29), False),
-        (BQuarterEnd(1, startingMonth=1), datetime(2007, 6, 30), False),
-        (BQuarterEnd(1, startingMonth=2), datetime(2008, 1, 31), False),
-        (BQuarterEnd(1, startingMonth=2), datetime(2007, 12, 31), False),
-        (BQuarterEnd(1, startingMonth=2), datetime(2008, 2, 29), True),
-        (BQuarterEnd(1, startingMonth=2), datetime(2007, 3, 30), False),
-        (BQuarterEnd(1, startingMonth=2), datetime(2007, 3, 31), False),
-        (BQuarterEnd(1, startingMonth=2), datetime(2008, 4, 30), False),
-        (BQuarterEnd(1, startingMonth=2), datetime(2008, 5, 30), True),
-        (BQuarterEnd(1, startingMonth=2), datetime(2007, 6, 29), False),
-        (BQuarterEnd(1, startingMonth=2), datetime(2007, 6, 30), False),
-        (BQuarterEnd(1, startingMonth=3), datetime(2008, 1, 31), False),
-        (BQuarterEnd(1, startingMonth=3), datetime(2007, 12, 31), True),
-        (BQuarterEnd(1, startingMonth=3), datetime(2008, 2, 29), False),
-        (BQuarterEnd(1, startingMonth=3), datetime(2007, 3, 30), True),
-        (BQuarterEnd(1, startingMonth=3), datetime(2007, 3, 31), False),
-        (BQuarterEnd(1, startingMonth=3), datetime(2008, 4, 30), False),
-        (BQuarterEnd(1, startingMonth=3), datetime(2008, 5, 30), False),
-        (BQuarterEnd(1, startingMonth=3), datetime(2007, 6, 29), True),
-        (BQuarterEnd(1, startingMonth=3), datetime(2007, 6, 30), False)]
-
-    @pytest.mark.parametrize('case', on_offset_cases)
-    def test_onOffset(self, case):
-        offset, dt, expected = case
-        assert_onOffset(offset, dt, expected)
-
-
-def makeFY5253LastOfMonthQuarter(*args, **kwds):
-    return FY5253Quarter(*args, variation="last", **kwds)
-
-
-def makeFY5253NearestEndMonthQuarter(*args, **kwds):
-    return FY5253Quarter(*args, variation="nearest", **kwds)
-
-
-def makeFY5253NearestEndMonth(*args, **kwds):
-    return FY5253(*args, variation="nearest", **kwds)
-
-
-def makeFY5253LastOfMonth(*args, **kwds):
-    return FY5253(*args, variation="last", **kwds)
-
-
-class TestFY5253LastOfMonth(Base):
-    offset_lom_sat_aug = makeFY5253LastOfMonth(1, startingMonth=8,
-                                               weekday=WeekDay.SAT)
-    offset_lom_sat_sep = makeFY5253LastOfMonth(1, startingMonth=9,
-                                               weekday=WeekDay.SAT)
-
-    on_offset_cases = [
-        # From Wikipedia (see:
-        # http://en.wikipedia.org/wiki/4%E2%80%934%E2%80%935_calendar#Last_Saturday_of_the_month_at_fiscal_year_end)
-        (offset_lom_sat_aug, datetime(2006, 8, 26), True),
-        (offset_lom_sat_aug, datetime(2007, 8, 25), True),
-        (offset_lom_sat_aug, datetime(2008, 8, 30), True),
-        (offset_lom_sat_aug, datetime(2009, 8, 29), True),
-        (offset_lom_sat_aug, datetime(2010, 8, 28), True),
-        (offset_lom_sat_aug, datetime(2011, 8, 27), True),
-        (offset_lom_sat_aug, datetime(2012, 8, 25), True),
-        (offset_lom_sat_aug, datetime(2013, 8, 31), True),
-        (offset_lom_sat_aug, datetime(2014, 8, 30), True),
-        (offset_lom_sat_aug, datetime(2015, 8, 29), True),
-        (offset_lom_sat_aug, datetime(2016, 8, 27), True),
-        (offset_lom_sat_aug, datetime(2017, 8, 26), True),
-        (offset_lom_sat_aug, datetime(2018, 8, 25), True),
-        (offset_lom_sat_aug, datetime(2019, 8, 31), True),
-
-        (offset_lom_sat_aug, datetime(2006, 8, 27), False),
-        (offset_lom_sat_aug, datetime(2007, 8, 28), False),
-        (offset_lom_sat_aug, datetime(2008, 8, 31), False),
-        (offset_lom_sat_aug, datetime(2009, 8, 30), False),
-        (offset_lom_sat_aug, datetime(2010, 8, 29), False),
-        (offset_lom_sat_aug, datetime(2011, 8, 28), False),
-
-        (offset_lom_sat_aug, datetime(2006, 8, 25), False),
-        (offset_lom_sat_aug, datetime(2007, 8, 24), False),
-        (offset_lom_sat_aug, datetime(2008, 8, 29), False),
-        (offset_lom_sat_aug, datetime(2009, 8, 28), False),
-        (offset_lom_sat_aug, datetime(2010, 8, 27), False),
-        (offset_lom_sat_aug, datetime(2011, 8, 26), False),
-        (offset_lom_sat_aug, datetime(2019, 8, 30), False),
-
-        # From GMCR (see for example:
-        # http://yahoo.brand.edgar-online.com/Default.aspx?
-        # companyid=3184&formtypeID=7)
-        (offset_lom_sat_sep, datetime(2010, 9, 25), True),
-        (offset_lom_sat_sep, datetime(2011, 9, 24), True),
-        (offset_lom_sat_sep, datetime(2012, 9, 29), True)]
-
-    @pytest.mark.parametrize('case', on_offset_cases)
-    def test_onOffset(self, case):
-        offset, dt, expected = case
-        assert_onOffset(offset, dt, expected)
-
-    def test_apply(self):
-        offset_lom_aug_sat = makeFY5253LastOfMonth(startingMonth=8,
-                                                   weekday=WeekDay.SAT)
-        offset_lom_aug_sat_1 = makeFY5253LastOfMonth(n=1, startingMonth=8,
-                                                     weekday=WeekDay.SAT)
-
-        date_seq_lom_aug_sat = [datetime(2006, 8, 26), datetime(2007, 8, 25),
-                                datetime(2008, 8, 30), datetime(2009, 8, 29),
-                                datetime(2010, 8, 28), datetime(2011, 8, 27),
-                                datetime(2012, 8, 25), datetime(2013, 8, 31),
-                                datetime(2014, 8, 30), datetime(2015, 8, 29),
-                                datetime(2016, 8, 27)]
-
-        tests = [
-            (offset_lom_aug_sat, date_seq_lom_aug_sat),
-            (offset_lom_aug_sat_1, date_seq_lom_aug_sat),
-            (offset_lom_aug_sat, [
-                datetime(2006, 8, 25)] + date_seq_lom_aug_sat),
-            (offset_lom_aug_sat_1, [
-                datetime(2006, 8, 27)] + date_seq_lom_aug_sat[1:]),
-            (makeFY5253LastOfMonth(n=-1, startingMonth=8,
-                                   weekday=WeekDay.SAT),
-             list(reversed(date_seq_lom_aug_sat))),
-        ]
-        for test in tests:
-            offset, data = test
-            current = data[0]
-            for datum in data[1:]:
-                current = current + offset
-                assert current == datum
-
-
-class TestFY5253NearestEndMonth(Base):
-
-    def test_get_target_month_end(self):
-        assert (makeFY5253NearestEndMonth(
-            startingMonth=8, weekday=WeekDay.SAT).get_target_month_end(
-            datetime(2013, 1, 1)) == datetime(2013, 8, 31))
-        assert (makeFY5253NearestEndMonth(
-            startingMonth=12, weekday=WeekDay.SAT).get_target_month_end(
-            datetime(2013, 1, 1)) == datetime(2013, 12, 31))
-        assert (makeFY5253NearestEndMonth(
-            startingMonth=2, weekday=WeekDay.SAT).get_target_month_end(
-            datetime(2013, 1, 1)) == datetime(2013, 2, 28))
-
-    def test_get_year_end(self):
-        assert (makeFY5253NearestEndMonth(
-            startingMonth=8, weekday=WeekDay.SAT).get_year_end(
-            datetime(2013, 1, 1)) == datetime(2013, 8, 31))
-        assert (makeFY5253NearestEndMonth(
-            startingMonth=8, weekday=WeekDay.SUN).get_year_end(
-            datetime(2013, 1, 1)) == datetime(2013, 9, 1))
-        assert (makeFY5253NearestEndMonth(
-            startingMonth=8, weekday=WeekDay.FRI).get_year_end(
-            datetime(2013, 1, 1)) == datetime(2013, 8, 30))
-
-        offset_n = FY5253(weekday=WeekDay.TUE, startingMonth=12,
-                          variation="nearest")
-        assert (offset_n.get_year_end(datetime(2012, 1, 1)) ==
-                datetime(2013, 1, 1))
-        assert (offset_n.get_year_end(datetime(2012, 1, 10)) ==
-                datetime(2013, 1, 1))
-
-        assert (offset_n.get_year_end(datetime(2013, 1, 1)) ==
-                datetime(2013, 12, 31))
-        assert (offset_n.get_year_end(datetime(2013, 1, 2)) ==
-                datetime(2013, 12, 31))
-        assert (offset_n.get_year_end(datetime(2013, 1, 3)) ==
-                datetime(2013, 12, 31))
-        assert (offset_n.get_year_end(datetime(2013, 1, 10)) ==
-                datetime(2013, 12, 31))
-
-        JNJ = FY5253(n=1, startingMonth=12, weekday=6, variation="nearest")
-        assert (JNJ.get_year_end(datetime(2006, 1, 1)) ==
-                datetime(2006, 12, 31))
-
-    offset_lom_aug_sat = makeFY5253NearestEndMonth(1, startingMonth=8,
-                                                   weekday=WeekDay.SAT)
-    offset_lom_aug_thu = makeFY5253NearestEndMonth(1, startingMonth=8,
-                                                   weekday=WeekDay.THU)
-    offset_n = FY5253(weekday=WeekDay.TUE, startingMonth=12,
-                      variation="nearest")
-
-    on_offset_cases = [
-        #    From Wikipedia (see:
-        #    http://en.wikipedia.org/wiki/4%E2%80%934%E2%80%935_calendar
-        #    #Saturday_nearest_the_end_of_month)
-        #    2006-09-02   2006 September 2
-        #    2007-09-01   2007 September 1
-        #    2008-08-30   2008 August 30    (leap year)
-        #    2009-08-29   2009 August 29
-        #    2010-08-28   2010 August 28
-        #    2011-09-03   2011 September 3
-        #    2012-09-01   2012 September 1  (leap year)
-        #    2013-08-31   2013 August 31
-        #    2014-08-30   2014 August 30
-        #    2015-08-29   2015 August 29
-        #    2016-09-03   2016 September 3  (leap year)
-        #    2017-09-02   2017 September 2
-        #    2018-09-01   2018 September 1
-        #    2019-08-31   2019 August 31
-        (offset_lom_aug_sat, datetime(2006, 9, 2), True),
-        (offset_lom_aug_sat, datetime(2007, 9, 1), True),
-        (offset_lom_aug_sat, datetime(2008, 8, 30), True),
-        (offset_lom_aug_sat, datetime(2009, 8, 29), True),
-        (offset_lom_aug_sat, datetime(2010, 8, 28), True),
-        (offset_lom_aug_sat, datetime(2011, 9, 3), True),
-
-        (offset_lom_aug_sat, datetime(2016, 9, 3), True),
-        (offset_lom_aug_sat, datetime(2017, 9, 2), True),
-        (offset_lom_aug_sat, datetime(2018, 9, 1), True),
-        (offset_lom_aug_sat, datetime(2019, 8, 31), True),
-
-        (offset_lom_aug_sat, datetime(2006, 8, 27), False),
-        (offset_lom_aug_sat, datetime(2007, 8, 28), False),
-        (offset_lom_aug_sat, datetime(2008, 8, 31), False),
-        (offset_lom_aug_sat, datetime(2009, 8, 30), False),
-        (offset_lom_aug_sat, datetime(2010, 8, 29), False),
-        (offset_lom_aug_sat, datetime(2011, 8, 28), False),
-
-        (offset_lom_aug_sat, datetime(2006, 8, 25), False),
-        (offset_lom_aug_sat, datetime(2007, 8, 24), False),
-        (offset_lom_aug_sat, datetime(2008, 8, 29), False),
-        (offset_lom_aug_sat, datetime(2009, 8, 28), False),
-        (offset_lom_aug_sat, datetime(2010, 8, 27), False),
-        (offset_lom_aug_sat, datetime(2011, 8, 26), False),
-        (offset_lom_aug_sat, datetime(2019, 8, 30), False),
-
-        # From Micron, see:
-        # http://google.brand.edgar-online.com/?sym=MU&formtypeID=7
-        (offset_lom_aug_thu, datetime(2012, 8, 30), True),
-        (offset_lom_aug_thu, datetime(2011, 9, 1), True),
-
-        (offset_n, datetime(2012, 12, 31), False),
-        (offset_n, datetime(2013, 1, 1), True),
-        (offset_n, datetime(2013, 1, 2), False)]
-
-    @pytest.mark.parametrize('case', on_offset_cases)
-    def test_onOffset(self, case):
-        offset, dt, expected = case
-        assert_onOffset(offset, dt, expected)
-
-    def test_apply(self):
-        date_seq_nem_8_sat = [datetime(2006, 9, 2), datetime(2007, 9, 1),
-                              datetime(2008, 8, 30), datetime(2009, 8, 29),
-                              datetime(2010, 8, 28), datetime(2011, 9, 3)]
-
-        JNJ = [datetime(2005, 1, 2), datetime(2006, 1, 1),
-               datetime(2006, 12, 31), datetime(2007, 12, 30),
-               datetime(2008, 12, 28), datetime(2010, 1, 3),
-               datetime(2011, 1, 2), datetime(2012, 1, 1),
-               datetime(2012, 12, 30)]
-
-        DEC_SAT = FY5253(n=-1, startingMonth=12, weekday=5,
-                         variation="nearest")
-
-        tests = [
-            (makeFY5253NearestEndMonth(startingMonth=8,
-                                       weekday=WeekDay.SAT),
-             date_seq_nem_8_sat),
-            (makeFY5253NearestEndMonth(n=1, startingMonth=8,
-                                       weekday=WeekDay.SAT),
-             date_seq_nem_8_sat),
-            (makeFY5253NearestEndMonth(startingMonth=8, weekday=WeekDay.SAT),
-             [datetime(2006, 9, 1)] + date_seq_nem_8_sat),
-            (makeFY5253NearestEndMonth(n=1, startingMonth=8,
-                                       weekday=WeekDay.SAT),
-             [datetime(2006, 9, 3)] + date_seq_nem_8_sat[1:]),
-            (makeFY5253NearestEndMonth(n=-1, startingMonth=8,
-                                       weekday=WeekDay.SAT),
-             list(reversed(date_seq_nem_8_sat))),
-            (makeFY5253NearestEndMonth(n=1, startingMonth=12,
-                                       weekday=WeekDay.SUN), JNJ),
-            (makeFY5253NearestEndMonth(n=-1, startingMonth=12,
-                                       weekday=WeekDay.SUN),
-             list(reversed(JNJ))),
-            (makeFY5253NearestEndMonth(n=1, startingMonth=12,
-                                       weekday=WeekDay.SUN),
-             [datetime(2005, 1, 2), datetime(2006, 1, 1)]),
-            (makeFY5253NearestEndMonth(n=1, startingMonth=12,
-                                       weekday=WeekDay.SUN),
-             [datetime(2006, 1, 2), datetime(2006, 12, 31)]),
-            (DEC_SAT, [datetime(2013, 1, 15), datetime(2012, 12, 29)])
-        ]
-        for test in tests:
-            offset, data = test
-            current = data[0]
-            for datum in data[1:]:
-                current = current + offset
-                assert current == datum
-
-
-class TestFY5253LastOfMonthQuarter(Base):
-
-    def test_isAnchored(self):
-        assert makeFY5253LastOfMonthQuarter(
-            startingMonth=1, weekday=WeekDay.SAT,
-            qtr_with_extra_week=4).isAnchored()
-        assert makeFY5253LastOfMonthQuarter(
-            weekday=WeekDay.SAT, startingMonth=3,
-            qtr_with_extra_week=4).isAnchored()
-        assert not makeFY5253LastOfMonthQuarter(
-            2, startingMonth=1, weekday=WeekDay.SAT,
-            qtr_with_extra_week=4).isAnchored()
-
-    def test_equality(self):
-        assert (makeFY5253LastOfMonthQuarter(
-            startingMonth=1, weekday=WeekDay.SAT,
-            qtr_with_extra_week=4) == makeFY5253LastOfMonthQuarter(
-            startingMonth=1, weekday=WeekDay.SAT, qtr_with_extra_week=4))
-        assert (makeFY5253LastOfMonthQuarter(
-            startingMonth=1, weekday=WeekDay.SAT,
-            qtr_with_extra_week=4) != makeFY5253LastOfMonthQuarter(
-            startingMonth=1, weekday=WeekDay.SUN, qtr_with_extra_week=4))
-        assert (makeFY5253LastOfMonthQuarter(
-            startingMonth=1, weekday=WeekDay.SAT,
-            qtr_with_extra_week=4) != makeFY5253LastOfMonthQuarter(
-            startingMonth=2, weekday=WeekDay.SAT, qtr_with_extra_week=4))
-
-    def test_offset(self):
-        offset = makeFY5253LastOfMonthQuarter(1, startingMonth=9,
-                                              weekday=WeekDay.SAT,
-                                              qtr_with_extra_week=4)
-        offset2 = makeFY5253LastOfMonthQuarter(2, startingMonth=9,
-                                               weekday=WeekDay.SAT,
-                                               qtr_with_extra_week=4)
-        offset4 = makeFY5253LastOfMonthQuarter(4, startingMonth=9,
-                                               weekday=WeekDay.SAT,
-                                               qtr_with_extra_week=4)
-
-        offset_neg1 = makeFY5253LastOfMonthQuarter(-1, startingMonth=9,
-                                                   weekday=WeekDay.SAT,
-                                                   qtr_with_extra_week=4)
-        offset_neg2 = makeFY5253LastOfMonthQuarter(-2, startingMonth=9,
-                                                   weekday=WeekDay.SAT,
-                                                   qtr_with_extra_week=4)
-
-        GMCR = [datetime(2010, 3, 27), datetime(2010, 6, 26),
-                datetime(2010, 9, 25), datetime(2010, 12, 25),
-                datetime(2011, 3, 26), datetime(2011, 6, 25),
-                datetime(2011, 9, 24), datetime(2011, 12, 24),
-                datetime(2012, 3, 24), datetime(2012, 6, 23),
-                datetime(2012, 9, 29), datetime(2012, 12, 29),
-                datetime(2013, 3, 30), datetime(2013, 6, 29)]
-
-        assert_offset_equal(offset, base=GMCR[0], expected=GMCR[1])
-        assert_offset_equal(offset, base=GMCR[0] + relativedelta(days=-1),
-                            expected=GMCR[0])
-        assert_offset_equal(offset, base=GMCR[1], expected=GMCR[2])
-
-        assert_offset_equal(offset2, base=GMCR[0], expected=GMCR[2])
-        assert_offset_equal(offset4, base=GMCR[0], expected=GMCR[4])
-
-        assert_offset_equal(offset_neg1, base=GMCR[-1], expected=GMCR[-2])
-        assert_offset_equal(offset_neg1,
-                            base=GMCR[-1] + relativedelta(days=+1),
-                            expected=GMCR[-1])
-        assert_offset_equal(offset_neg2, base=GMCR[-1], expected=GMCR[-3])
-
-        date = GMCR[0] + relativedelta(days=-1)
-        for expected in GMCR:
-            assert_offset_equal(offset, date, expected)
-            date = date + offset
-
-        date = GMCR[-1] + relativedelta(days=+1)
-        for expected in reversed(GMCR):
-            assert_offset_equal(offset_neg1, date, expected)
-            date = date + offset_neg1
-
-    lomq_aug_sat_4 = makeFY5253LastOfMonthQuarter(1, startingMonth=8,
-                                                  weekday=WeekDay.SAT,
-                                                  qtr_with_extra_week=4)
-    lomq_sep_sat_4 = makeFY5253LastOfMonthQuarter(1, startingMonth=9,
-                                                  weekday=WeekDay.SAT,
-                                                  qtr_with_extra_week=4)
-
-    on_offset_cases = [
-        # From Wikipedia
-        (lomq_aug_sat_4, datetime(2006, 8, 26), True),
-        (lomq_aug_sat_4, datetime(2007, 8, 25), True),
-        (lomq_aug_sat_4, datetime(2008, 8, 30), True),
-        (lomq_aug_sat_4, datetime(2009, 8, 29), True),
-        (lomq_aug_sat_4, datetime(2010, 8, 28), True),
-        (lomq_aug_sat_4, datetime(2011, 8, 27), True),
-        (lomq_aug_sat_4, datetime(2019, 8, 31), True),
-
-        (lomq_aug_sat_4, datetime(2006, 8, 27), False),
-        (lomq_aug_sat_4, datetime(2007, 8, 28), False),
-        (lomq_aug_sat_4, datetime(2008, 8, 31), False),
-        (lomq_aug_sat_4, datetime(2009, 8, 30), False),
-        (lomq_aug_sat_4, datetime(2010, 8, 29), False),
-        (lomq_aug_sat_4, datetime(2011, 8, 28), False),
-
-        (lomq_aug_sat_4, datetime(2006, 8, 25), False),
-        (lomq_aug_sat_4, datetime(2007, 8, 24), False),
-        (lomq_aug_sat_4, datetime(2008, 8, 29), False),
-        (lomq_aug_sat_4, datetime(2009, 8, 28), False),
-        (lomq_aug_sat_4, datetime(2010, 8, 27), False),
-        (lomq_aug_sat_4, datetime(2011, 8, 26), False),
-        (lomq_aug_sat_4, datetime(2019, 8, 30), False),
-
-        # From GMCR
-        (lomq_sep_sat_4, datetime(2010, 9, 25), True),
-        (lomq_sep_sat_4, datetime(2011, 9, 24), True),
-        (lomq_sep_sat_4, datetime(2012, 9, 29), True),
-
-        (lomq_sep_sat_4, datetime(2013, 6, 29), True),
-        (lomq_sep_sat_4, datetime(2012, 6, 23), True),
-        (lomq_sep_sat_4, datetime(2012, 6, 30), False),
-
-        (lomq_sep_sat_4, datetime(2013, 3, 30), True),
-        (lomq_sep_sat_4, datetime(2012, 3, 24), True),
-
-        (lomq_sep_sat_4, datetime(2012, 12, 29), True),
-        (lomq_sep_sat_4, datetime(2011, 12, 24), True),
-
-        # INTC (extra week in Q1)
-        # See: http://www.intc.com/releasedetail.cfm?ReleaseID=542844
-        (makeFY5253LastOfMonthQuarter(1, startingMonth=12,
-                                      weekday=WeekDay.SAT,
-                                      qtr_with_extra_week=1),
-         datetime(2011, 4, 2), True),
-
-        # see: http://google.brand.edgar-online.com/?sym=INTC&formtypeID=7
-        (makeFY5253LastOfMonthQuarter(1, startingMonth=12,
-                                      weekday=WeekDay.SAT,
-                                      qtr_with_extra_week=1),
-         datetime(2012, 12, 29), True),
-        (makeFY5253LastOfMonthQuarter(1, startingMonth=12,
-                                      weekday=WeekDay.SAT,
-                                      qtr_with_extra_week=1),
-         datetime(2011, 12, 31), True),
-        (makeFY5253LastOfMonthQuarter(1, startingMonth=12,
-                                      weekday=WeekDay.SAT,
-                                      qtr_with_extra_week=1),
-         datetime(2010, 12, 25), True)]
-
-    @pytest.mark.parametrize('case', on_offset_cases)
-    def test_onOffset(self, case):
-        offset, dt, expected = case
-        assert_onOffset(offset, dt, expected)
-
-    def test_year_has_extra_week(self):
-        # End of long Q1
-        assert makeFY5253LastOfMonthQuarter(
-            1, startingMonth=12, weekday=WeekDay.SAT,
-            qtr_with_extra_week=1).year_has_extra_week(datetime(2011, 4, 2))
-
-        # Start of long Q1
-        assert makeFY5253LastOfMonthQuarter(
-            1, startingMonth=12, weekday=WeekDay.SAT,
-            qtr_with_extra_week=1).year_has_extra_week(datetime(2010, 12, 26))
-
-        # End of year before year with long Q1
-        assert not makeFY5253LastOfMonthQuarter(
-            1, startingMonth=12, weekday=WeekDay.SAT,
-            qtr_with_extra_week=1).year_has_extra_week(datetime(2010, 12, 25))
-
-        for year in [x
-                     for x in range(1994, 2011 + 1)
-                     if x not in [2011, 2005, 2000, 1994]]:
-            assert not makeFY5253LastOfMonthQuarter(
-                1, startingMonth=12, weekday=WeekDay.SAT,
-                qtr_with_extra_week=1).year_has_extra_week(
-                datetime(year, 4, 2))
-
-        # Other long years
-        assert makeFY5253LastOfMonthQuarter(
-            1, startingMonth=12, weekday=WeekDay.SAT,
-            qtr_with_extra_week=1).year_has_extra_week(datetime(2005, 4, 2))
-
-        assert makeFY5253LastOfMonthQuarter(
-            1, startingMonth=12, weekday=WeekDay.SAT,
-            qtr_with_extra_week=1).year_has_extra_week(datetime(2000, 4, 2))
-
-        assert makeFY5253LastOfMonthQuarter(
-            1, startingMonth=12, weekday=WeekDay.SAT,
-            qtr_with_extra_week=1).year_has_extra_week(datetime(1994, 4, 2))
-
-    def test_get_weeks(self):
-        sat_dec_1 = makeFY5253LastOfMonthQuarter(1, startingMonth=12,
-                                                 weekday=WeekDay.SAT,
-                                                 qtr_with_extra_week=1)
-        sat_dec_4 = makeFY5253LastOfMonthQuarter(1, startingMonth=12,
-                                                 weekday=WeekDay.SAT,
-                                                 qtr_with_extra_week=4)
-
-        assert sat_dec_1.get_weeks(datetime(2011, 4, 2)) == [14, 13, 13, 13]
-        assert sat_dec_4.get_weeks(datetime(2011, 4, 2)) == [13, 13, 13, 14]
-        assert sat_dec_1.get_weeks(datetime(2010, 12, 25)) == [13, 13, 13, 13]
-
-
-class TestFY5253NearestEndMonthQuarter(Base):
-
-    offset_nem_sat_aug_4 = makeFY5253NearestEndMonthQuarter(
-        1, startingMonth=8, weekday=WeekDay.SAT,
-        qtr_with_extra_week=4)
-    offset_nem_thu_aug_4 = makeFY5253NearestEndMonthQuarter(
-        1, startingMonth=8, weekday=WeekDay.THU,
-        qtr_with_extra_week=4)
-    offset_n = FY5253(weekday=WeekDay.TUE, startingMonth=12,
-                      variation="nearest")
-
-    on_offset_cases = [
-        # From Wikipedia
-        (offset_nem_sat_aug_4, datetime(2006, 9, 2), True),
-        (offset_nem_sat_aug_4, datetime(2007, 9, 1), True),
-        (offset_nem_sat_aug_4, datetime(2008, 8, 30), True),
-        (offset_nem_sat_aug_4, datetime(2009, 8, 29), True),
-        (offset_nem_sat_aug_4, datetime(2010, 8, 28), True),
-        (offset_nem_sat_aug_4, datetime(2011, 9, 3), True),
-
-        (offset_nem_sat_aug_4, datetime(2016, 9, 3), True),
-        (offset_nem_sat_aug_4, datetime(2017, 9, 2), True),
-        (offset_nem_sat_aug_4, datetime(2018, 9, 1), True),
-        (offset_nem_sat_aug_4, datetime(2019, 8, 31), True),
-
-        (offset_nem_sat_aug_4, datetime(2006, 8, 27), False),
-        (offset_nem_sat_aug_4, datetime(2007, 8, 28), False),
-        (offset_nem_sat_aug_4, datetime(2008, 8, 31), False),
-        (offset_nem_sat_aug_4, datetime(2009, 8, 30), False),
-        (offset_nem_sat_aug_4, datetime(2010, 8, 29), False),
-        (offset_nem_sat_aug_4, datetime(2011, 8, 28), False),
-
-        (offset_nem_sat_aug_4, datetime(2006, 8, 25), False),
-        (offset_nem_sat_aug_4, datetime(2007, 8, 24), False),
-        (offset_nem_sat_aug_4, datetime(2008, 8, 29), False),
-        (offset_nem_sat_aug_4, datetime(2009, 8, 28), False),
-        (offset_nem_sat_aug_4, datetime(2010, 8, 27), False),
-        (offset_nem_sat_aug_4, datetime(2011, 8, 26), False),
-        (offset_nem_sat_aug_4, datetime(2019, 8, 30), False),
-
-        # From Micron, see:
-        # http://google.brand.edgar-online.com/?sym=MU&formtypeID=7
-        (offset_nem_thu_aug_4, datetime(2012, 8, 30), True),
-        (offset_nem_thu_aug_4, datetime(2011, 9, 1), True),
-
-        # See: http://google.brand.edgar-online.com/?sym=MU&formtypeID=13
-        (offset_nem_thu_aug_4, datetime(2013, 5, 30), True),
-        (offset_nem_thu_aug_4, datetime(2013, 2, 28), True),
-        (offset_nem_thu_aug_4, datetime(2012, 11, 29), True),
-        (offset_nem_thu_aug_4, datetime(2012, 5, 31), True),
-        (offset_nem_thu_aug_4, datetime(2007, 3, 1), True),
-        (offset_nem_thu_aug_4, datetime(1994, 3, 3), True),
-
-        (offset_n, datetime(2012, 12, 31), False),
-        (offset_n, datetime(2013, 1, 1), True),
-        (offset_n, datetime(2013, 1, 2), False)]
-
-    @pytest.mark.parametrize('case', on_offset_cases)
-    def test_onOffset(self, case):
-        offset, dt, expected = case
-        assert_onOffset(offset, dt, expected)
-
-    def test_offset(self):
-        offset = makeFY5253NearestEndMonthQuarter(1, startingMonth=8,
-                                                  weekday=WeekDay.THU,
-                                                  qtr_with_extra_week=4)
-
-        MU = [datetime(2012, 5, 31),
-              datetime(2012, 8, 30), datetime(2012, 11, 29),
-              datetime(2013, 2, 28), datetime(2013, 5, 30)]
-
-        date = MU[0] + relativedelta(days=-1)
-        for expected in MU:
-            assert_offset_equal(offset, date, expected)
-            date = date + offset
-
-        assert_offset_equal(offset,
-                            datetime(2012, 5, 31),
-                            datetime(2012, 8, 30))
-        assert_offset_equal(offset,
-                            datetime(2012, 5, 30),
-                            datetime(2012, 5, 31))
-
-        offset2 = FY5253Quarter(weekday=5, startingMonth=12, variation="last",
-                                qtr_with_extra_week=4)
-
-        assert_offset_equal(offset2,
-                            datetime(2013, 1, 15),
-                            datetime(2013, 3, 30))
-
-
-class TestQuarterBegin(Base):
-
-    def test_repr(self):
-        assert (repr(QuarterBegin()) ==
-                "<QuarterBegin: startingMonth=3>")
-        assert (repr(QuarterBegin(startingMonth=3)) ==
-                "<QuarterBegin: startingMonth=3>")
-        assert (repr(QuarterBegin(startingMonth=1)) ==
-                "<QuarterBegin: startingMonth=1>")
-
-    def test_isAnchored(self):
-        assert QuarterBegin(startingMonth=1).isAnchored()
-        assert QuarterBegin().isAnchored()
-        assert not QuarterBegin(2, startingMonth=1).isAnchored()
-
-    offset_cases = []
-    offset_cases.append((QuarterBegin(startingMonth=1),
-                        {datetime(2007, 12, 1): datetime(2008, 1, 1),
-                         datetime(2008, 1, 1): datetime(2008, 4, 1),
-                         datetime(2008, 2, 15): datetime(2008, 4, 1),
-                         datetime(2008, 2, 29): datetime(2008, 4, 1),
-                         datetime(2008, 3, 15): datetime(2008, 4, 1),
-                         datetime(2008, 3, 31): datetime(2008, 4, 1),
-                         datetime(2008, 4, 15): datetime(2008, 7, 1),
-                         datetime(2008, 4, 1): datetime(2008, 7, 1), }))
-
-    offset_cases.append((QuarterBegin(startingMonth=2),
-                        {datetime(2008, 1, 1): datetime(2008, 2, 1),
-                         datetime(2008, 1, 31): datetime(2008, 2, 1),
-                         datetime(2008, 1, 15): datetime(2008, 2, 1),
-                         datetime(2008, 2, 29): datetime(2008, 5, 1),
-                         datetime(2008, 3, 15): datetime(2008, 5, 1),
-                         datetime(2008, 3, 31): datetime(2008, 5, 1),
-                         datetime(2008, 4, 15): datetime(2008, 5, 1),
-                         datetime(2008, 4, 30): datetime(2008, 5, 1), }))
-
-    offset_cases.append((QuarterBegin(startingMonth=1, n=0),
-                        {datetime(2008, 1, 1): datetime(2008, 1, 1),
-                         datetime(2008, 12, 1): datetime(2009, 1, 1),
-                         datetime(2008, 1, 1): datetime(2008, 1, 1),
-                         datetime(2008, 2, 15): datetime(2008, 4, 1),
-                         datetime(2008, 2, 29): datetime(2008, 4, 1),
-                         datetime(2008, 3, 15): datetime(2008, 4, 1),
-                         datetime(2008, 3, 31): datetime(2008, 4, 1),
-                         datetime(2008, 4, 15): datetime(2008, 7, 1),
-                         datetime(2008, 4, 30): datetime(2008, 7, 1), }))
-
-    offset_cases.append((QuarterBegin(startingMonth=1, n=-1),
-                        {datetime(2008, 1, 1): datetime(2007, 10, 1),
-                         datetime(2008, 1, 31): datetime(2008, 1, 1),
-                         datetime(2008, 2, 15): datetime(2008, 1, 1),
-                         datetime(2008, 2, 29): datetime(2008, 1, 1),
-                         datetime(2008, 3, 15): datetime(2008, 1, 1),
-                         datetime(2008, 3, 31): datetime(2008, 1, 1),
-                         datetime(2008, 4, 15): datetime(2008, 4, 1),
-                         datetime(2008, 4, 30): datetime(2008, 4, 1),
-                         datetime(2008, 7, 1): datetime(2008, 4, 1)}))
-
-    offset_cases.append((QuarterBegin(startingMonth=1, n=2),
-                        {datetime(2008, 1, 1): datetime(2008, 7, 1),
-                         datetime(2008, 2, 15): datetime(2008, 7, 1),
-                         datetime(2008, 2, 29): datetime(2008, 7, 1),
-                         datetime(2008, 3, 15): datetime(2008, 7, 1),
-                         datetime(2008, 3, 31): datetime(2008, 7, 1),
-                         datetime(2008, 4, 15): datetime(2008, 10, 1),
-                         datetime(2008, 4, 1): datetime(2008, 10, 1), }))
-
-    @pytest.mark.parametrize('case', offset_cases)
-    def test_offset(self, case):
-        offset, cases = case
-        for base, expected in compat.iteritems(cases):
-            assert_offset_equal(offset, base, expected)
-
-    def test_offset_corner_case(self):
-        # corner
-        offset = QuarterBegin(n=-1, startingMonth=1)
-        assert datetime(2010, 2, 1) + offset == datetime(2010, 1, 1)
-
-
-class TestQuarterEnd(Base):
-    _offset = QuarterEnd
-
-    def test_repr(self):
-        assert (repr(QuarterEnd()) ==
-                "<QuarterEnd: startingMonth=3>")
-        assert (repr(QuarterEnd(startingMonth=3)) ==
-                "<QuarterEnd: startingMonth=3>")
-        assert (repr(QuarterEnd(startingMonth=1)) ==
-                "<QuarterEnd: startingMonth=1>")
-
-    def test_isAnchored(self):
-        assert QuarterEnd(startingMonth=1).isAnchored()
-        assert QuarterEnd().isAnchored()
-        assert not QuarterEnd(2, startingMonth=1).isAnchored()
-
-    offset_cases = []
-    offset_cases.append((QuarterEnd(startingMonth=1),
-                        {datetime(2008, 1, 1): datetime(2008, 1, 31),
-                         datetime(2008, 1, 31): datetime(2008, 4, 30),
-                         datetime(2008, 2, 15): datetime(2008, 4, 30),
-                         datetime(2008, 2, 29): datetime(2008, 4, 30),
-                         datetime(2008, 3, 15): datetime(2008, 4, 30),
-                         datetime(2008, 3, 31): datetime(2008, 4, 30),
-                         datetime(2008, 4, 15): datetime(2008, 4, 30),
-                         datetime(2008, 4, 30): datetime(2008, 7, 31), }))
-
-    offset_cases.append((QuarterEnd(startingMonth=2),
-                        {datetime(2008, 1, 1): datetime(2008, 2, 29),
-                         datetime(2008, 1, 31): datetime(2008, 2, 29),
-                         datetime(2008, 2, 15): datetime(2008, 2, 29),
-                         datetime(2008, 2, 29): datetime(2008, 5, 31),
-                         datetime(2008, 3, 15): datetime(2008, 5, 31),
-                         datetime(2008, 3, 31): datetime(2008, 5, 31),
-                         datetime(2008, 4, 15): datetime(2008, 5, 31),
-                         datetime(2008, 4, 30): datetime(2008, 5, 31), }))
-
-    offset_cases.append((QuarterEnd(startingMonth=1, n=0),
-                        {datetime(2008, 1, 1): datetime(2008, 1, 31),
-                         datetime(2008, 1, 31): datetime(2008, 1, 31),
-                         datetime(2008, 2, 15): datetime(2008, 4, 30),
-                         datetime(2008, 2, 29): datetime(2008, 4, 30),
-                         datetime(2008, 3, 15): datetime(2008, 4, 30),
-                         datetime(2008, 3, 31): datetime(2008, 4, 30),
-                         datetime(2008, 4, 15): datetime(2008, 4, 30),
-                         datetime(2008, 4, 30): datetime(2008, 4, 30), }))
-
-    offset_cases.append((QuarterEnd(startingMonth=1, n=-1),
-                        {datetime(2008, 1, 1): datetime(2007, 10, 31),
-                         datetime(2008, 1, 31): datetime(2007, 10, 31),
-                         datetime(2008, 2, 15): datetime(2008, 1, 31),
-                         datetime(2008, 2, 29): datetime(2008, 1, 31),
-                         datetime(2008, 3, 15): datetime(2008, 1, 31),
-                         datetime(2008, 3, 31): datetime(2008, 1, 31),
-                         datetime(2008, 4, 15): datetime(2008, 1, 31),
-                         datetime(2008, 4, 30): datetime(2008, 1, 31),
-                         datetime(2008, 7, 1): datetime(2008, 4, 30)}))
-
-    offset_cases.append((QuarterEnd(startingMonth=1, n=2),
-                        {datetime(2008, 1, 31): datetime(2008, 7, 31),
-                         datetime(2008, 2, 15): datetime(2008, 7, 31),
-                         datetime(2008, 2, 29): datetime(2008, 7, 31),
-                         datetime(2008, 3, 15): datetime(2008, 7, 31),
-                         datetime(2008, 3, 31): datetime(2008, 7, 31),
-                         datetime(2008, 4, 15): datetime(2008, 7, 31),
-                         datetime(2008, 4, 30): datetime(2008, 10, 31), }))
-
-    @pytest.mark.parametrize('case', offset_cases)
-    def test_offset(self, case):
-        offset, cases = case
-        for base, expected in compat.iteritems(cases):
-            assert_offset_equal(offset, base, expected)
-
-    def test_offset_corner_case(self):
-        # corner
-        offset = QuarterEnd(n=-1, startingMonth=1)
-        assert datetime(2010, 2, 1) + offset == datetime(2010, 1, 31)
-
-    on_offset_cases = [
-        (QuarterEnd(1, startingMonth=1), datetime(2008, 1, 31), True),
-        (QuarterEnd(1, startingMonth=1), datetime(2007, 12, 31), False),
-        (QuarterEnd(1, startingMonth=1), datetime(2008, 2, 29), False),
-        (QuarterEnd(1, startingMonth=1), datetime(2007, 3, 30), False),
-        (QuarterEnd(1, startingMonth=1), datetime(2007, 3, 31), False),
-        (QuarterEnd(1, startingMonth=1), datetime(2008, 4, 30), True),
-        (QuarterEnd(1, startingMonth=1), datetime(2008, 5, 30), False),
-        (QuarterEnd(1, startingMonth=1), datetime(2008, 5, 31), False),
-        (QuarterEnd(1, startingMonth=1), datetime(2007, 6, 29), False),
-        (QuarterEnd(1, startingMonth=1), datetime(2007, 6, 30), False),
-        (QuarterEnd(1, startingMonth=2), datetime(2008, 1, 31), False),
-        (QuarterEnd(1, startingMonth=2), datetime(2007, 12, 31), False),
-        (QuarterEnd(1, startingMonth=2), datetime(2008, 2, 29), True),
-        (QuarterEnd(1, startingMonth=2), datetime(2007, 3, 30), False),
-        (QuarterEnd(1, startingMonth=2), datetime(2007, 3, 31), False),
-        (QuarterEnd(1, startingMonth=2), datetime(2008, 4, 30), False),
-        (QuarterEnd(1, startingMonth=2), datetime(2008, 5, 30), False),
-        (QuarterEnd(1, startingMonth=2), datetime(2008, 5, 31), True),
-        (QuarterEnd(1, startingMonth=2), datetime(2007, 6, 29), False),
-        (QuarterEnd(1, startingMonth=2), datetime(2007, 6, 30), False),
-        (QuarterEnd(1, startingMonth=3), datetime(2008, 1, 31), False),
-        (QuarterEnd(1, startingMonth=3), datetime(2007, 12, 31), True),
-        (QuarterEnd(1, startingMonth=3), datetime(2008, 2, 29), False),
-        (QuarterEnd(1, startingMonth=3), datetime(2007, 3, 30), False),
-        (QuarterEnd(1, startingMonth=3), datetime(2007, 3, 31), True),
-        (QuarterEnd(1, startingMonth=3), datetime(2008, 4, 30), False),
-        (QuarterEnd(1, startingMonth=3), datetime(2008, 5, 30), False),
-        (QuarterEnd(1, startingMonth=3), datetime(2008, 5, 31), False),
-        (QuarterEnd(1, startingMonth=3), datetime(2007, 6, 29), False),
-        (QuarterEnd(1, startingMonth=3), datetime(2007, 6, 30), True)]
-
-    @pytest.mark.parametrize('case', on_offset_cases)
-    def test_onOffset(self, case):
-        offset, dt, expected = case
-        assert_onOffset(offset, dt, expected)
-
-
-class TestBYearBegin(Base):
-    _offset = BYearBegin
-
-    def test_misspecified(self):
-        pytest.raises(ValueError, BYearBegin, month=13)
-        pytest.raises(ValueError, BYearEnd, month=13)
-
-    offset_cases = []
-    offset_cases.append((BYearBegin(),
-                        {datetime(2008, 1, 1): datetime(2009, 1, 1),
-                         datetime(2008, 6, 30): datetime(2009, 1, 1),
-                         datetime(2008, 12, 31): datetime(2009, 1, 1),
-                         datetime(2011, 1, 1): datetime(2011, 1, 3),
-                         datetime(2011, 1, 3): datetime(2012, 1, 2),
-                         datetime(2005, 12, 30): datetime(2006, 1, 2),
-                         datetime(2005, 12, 31): datetime(2006, 1, 2)}))
-
-    offset_cases.append((BYearBegin(0),
-                        {datetime(2008, 1, 1): datetime(2008, 1, 1),
-                         datetime(2008, 6, 30): datetime(2009, 1, 1),
-                         datetime(2008, 12, 31): datetime(2009, 1, 1),
-                         datetime(2005, 12, 30): datetime(2006, 1, 2),
-                         datetime(2005, 12, 31): datetime(2006, 1, 2), }))
-
-    offset_cases.append((BYearBegin(-1),
-                        {datetime(2007, 1, 1): datetime(2006, 1, 2),
-                         datetime(2009, 1, 4): datetime(2009, 1, 1),
-                         datetime(2009, 1, 1): datetime(2008, 1, 1),
-                         datetime(2008, 6, 30): datetime(2008, 1, 1),
-                         datetime(2008, 12, 31): datetime(2008, 1, 1),
-                         datetime(2006, 12, 29): datetime(2006, 1, 2),
-                         datetime(2006, 12, 30): datetime(2006, 1, 2),
-                         datetime(2006, 1, 1): datetime(2005, 1, 3), }))
-
-    offset_cases.append((BYearBegin(-2),
-                        {datetime(2007, 1, 1): datetime(2005, 1, 3),
-                         datetime(2007, 6, 30): datetime(2006, 1, 2),
-                         datetime(2008, 12, 31): datetime(2007, 1, 1), }))
-
-    @pytest.mark.parametrize('case', offset_cases)
-    def test_offset(self, case):
-        offset, cases = case
-        for base, expected in compat.iteritems(cases):
-            assert_offset_equal(offset, base, expected)
-
-
-class TestYearBegin(Base):
-    _offset = YearBegin
-
-    def test_misspecified(self):
-        pytest.raises(ValueError, YearBegin, month=13)
-
-    offset_cases = []
-    offset_cases.append((YearBegin(),
-                        {datetime(2008, 1, 1): datetime(2009, 1, 1),
-                         datetime(2008, 6, 30): datetime(2009, 1, 1),
-                         datetime(2008, 12, 31): datetime(2009, 1, 1),
-                         datetime(2005, 12, 30): datetime(2006, 1, 1),
-                         datetime(2005, 12, 31): datetime(2006, 1, 1), }))
-
-    offset_cases.append((YearBegin(0),
-                        {datetime(2008, 1, 1): datetime(2008, 1, 1),
-                         datetime(2008, 6, 30): datetime(2009, 1, 1),
-                         datetime(2008, 12, 31): datetime(2009, 1, 1),
-                         datetime(2005, 12, 30): datetime(2006, 1, 1),
-                         datetime(2005, 12, 31): datetime(2006, 1, 1), }))
-
-    offset_cases.append((YearBegin(3),
-                        {datetime(2008, 1, 1): datetime(2011, 1, 1),
-                         datetime(2008, 6, 30): datetime(2011, 1, 1),
-                         datetime(2008, 12, 31): datetime(2011, 1, 1),
-                         datetime(2005, 12, 30): datetime(2008, 1, 1),
-                         datetime(2005, 12, 31): datetime(2008, 1, 1), }))
-
-    offset_cases.append((YearBegin(-1),
-                        {datetime(2007, 1, 1): datetime(2006, 1, 1),
-                         datetime(2007, 1, 15): datetime(2007, 1, 1),
-                         datetime(2008, 6, 30): datetime(2008, 1, 1),
-                         datetime(2008, 12, 31): datetime(2008, 1, 1),
-                         datetime(2006, 12, 29): datetime(2006, 1, 1),
-                         datetime(2006, 12, 30): datetime(2006, 1, 1),
-                         datetime(2007, 1, 1): datetime(2006, 1, 1), }))
-
-    offset_cases.append((YearBegin(-2),
-                        {datetime(2007, 1, 1): datetime(2005, 1, 1),
-                         datetime(2008, 6, 30): datetime(2007, 1, 1),
-                         datetime(2008, 12, 31): datetime(2007, 1, 1), }))
-
-    offset_cases.append((YearBegin(month=4),
-                        {datetime(2007, 4, 1): datetime(2008, 4, 1),
-                         datetime(2007, 4, 15): datetime(2008, 4, 1),
-                         datetime(2007, 3, 1): datetime(2007, 4, 1),
-                         datetime(2007, 12, 15): datetime(2008, 4, 1),
-                         datetime(2012, 1, 31): datetime(2012, 4, 1), }))
-
-    offset_cases.append((YearBegin(0, month=4),
-                        {datetime(2007, 4, 1): datetime(2007, 4, 1),
-                         datetime(2007, 3, 1): datetime(2007, 4, 1),
-                         datetime(2007, 12, 15): datetime(2008, 4, 1),
-                         datetime(2012, 1, 31): datetime(2012, 4, 1), }))
-
-    offset_cases.append((YearBegin(4, month=4),
-                        {datetime(2007, 4, 1): datetime(2011, 4, 1),
-                         datetime(2007, 4, 15): datetime(2011, 4, 1),
-                         datetime(2007, 3, 1): datetime(2010, 4, 1),
-                         datetime(2007, 12, 15): datetime(2011, 4, 1),
-                         datetime(2012, 1, 31): datetime(2015, 4, 1), }))
-
-    offset_cases.append((YearBegin(-1, month=4),
-                        {datetime(2007, 4, 1): datetime(2006, 4, 1),
-                         datetime(2007, 3, 1): datetime(2006, 4, 1),
-                         datetime(2007, 12, 15): datetime(2007, 4, 1),
-                         datetime(2012, 1, 31): datetime(2011, 4, 1), }))
-
-    offset_cases.append((YearBegin(-3, month=4),
-                        {datetime(2007, 4, 1): datetime(2004, 4, 1),
-                         datetime(2007, 3, 1): datetime(2004, 4, 1),
-                         datetime(2007, 12, 15): datetime(2005, 4, 1),
-                         datetime(2012, 1, 31): datetime(2009, 4, 1), }))
-
-    @pytest.mark.parametrize('case', offset_cases)
-    def test_offset(self, case):
-        offset, cases = case
-        for base, expected in compat.iteritems(cases):
-            assert_offset_equal(offset, base, expected)
-
-    on_offset_cases = [(YearBegin(), datetime(2007, 1, 3), False),
-                       (YearBegin(), datetime(2008, 1, 1), True),
-                       (YearBegin(), datetime(2006, 12, 31), False),
-                       (YearBegin(), datetime(2006, 1, 2), False)]
-
-    @pytest.mark.parametrize('case', on_offset_cases)
-    def test_onOffset(self, case):
-        offset, dt, expected = case
-        assert_onOffset(offset, dt, expected)
-
-
-class TestBYearEndLagged(Base):
-
-    def test_bad_month_fail(self):
-        pytest.raises(Exception, BYearEnd, month=13)
-        pytest.raises(Exception, BYearEnd, month=0)
-
-    offset_cases = []
-    offset_cases.append((BYearEnd(month=6),
-                         {datetime(2008, 1, 1): datetime(2008, 6, 30),
-                          datetime(2007, 6, 30): datetime(2008, 6, 30)}, ))
-
-    offset_cases.append((BYearEnd(n=-1, month=6),
-                        {datetime(2008, 1, 1): datetime(2007, 6, 29),
-                         datetime(2007, 6, 30): datetime(2007, 6, 29)}, ))
-
-    @pytest.mark.parametrize('case', offset_cases)
-    def test_offset(self, case):
-        offset, cases = case
-        for base, expected in compat.iteritems(cases):
-            assert base + offset == expected
-
-    def test_roll(self):
-        offset = BYearEnd(month=6)
-        date = datetime(2009, 11, 30)
-
-        assert offset.rollforward(date) == datetime(2010, 6, 30)
-        assert offset.rollback(date) == datetime(2009, 6, 30)
-
-    on_offset_cases = [(BYearEnd(month=2), datetime(2007, 2, 28), True),
-                       (BYearEnd(month=6), datetime(2007, 6, 30), False)]
-
-    @pytest.mark.parametrize('case', on_offset_cases)
-    def test_onOffset(self, case):
-        offset, dt, expected = case
-        assert_onOffset(offset, dt, expected)
-
-
-class TestBYearEnd(Base):
-    _offset = BYearEnd
-
-    offset_cases = []
-    offset_cases.append((BYearEnd(),
-                        {datetime(2008, 1, 1): datetime(2008, 12, 31),
-                         datetime(2008, 6, 30): datetime(2008, 12, 31),
-                         datetime(2008, 12, 31): datetime(2009, 12, 31),
-                         datetime(2005, 12, 30): datetime(2006, 12, 29),
-                         datetime(2005, 12, 31): datetime(2006, 12, 29), }))
-
-    offset_cases.append((BYearEnd(0),
-                        {datetime(2008, 1, 1): datetime(2008, 12, 31),
-                         datetime(2008, 6, 30): datetime(2008, 12, 31),
-                         datetime(2008, 12, 31): datetime(2008, 12, 31),
-                         datetime(2005, 12, 31): datetime(2006, 12, 29), }))
-
-    offset_cases.append((BYearEnd(-1),
-                        {datetime(2007, 1, 1): datetime(2006, 12, 29),
-                         datetime(2008, 6, 30): datetime(2007, 12, 31),
-                         datetime(2008, 12, 31): datetime(2007, 12, 31),
-                         datetime(2006, 12, 29): datetime(2005, 12, 30),
-                         datetime(2006, 12, 30): datetime(2006, 12, 29),
-                         datetime(2007, 1, 1): datetime(2006, 12, 29), }))
-
-    offset_cases.append((BYearEnd(-2),
-                        {datetime(2007, 1, 1): datetime(2005, 12, 30),
-                         datetime(2008, 6, 30): datetime(2006, 12, 29),
-                         datetime(2008, 12, 31): datetime(2006, 12, 29), }))
-
-    @pytest.mark.parametrize('case', offset_cases)
-    def test_offset(self, case):
-        offset, cases = case
-        for base, expected in compat.iteritems(cases):
-            assert_offset_equal(offset, base, expected)
-
-    on_offset_cases = [(BYearEnd(), datetime(2007, 12, 31), True),
-                       (BYearEnd(), datetime(2008, 1, 1), False),
-                       (BYearEnd(), datetime(2006, 12, 31), False),
-                       (BYearEnd(), datetime(2006, 12, 29), True)]
-
-    @pytest.mark.parametrize('case', on_offset_cases)
-    def test_onOffset(self, case):
-        offset, dt, expected = case
-        assert_onOffset(offset, dt, expected)
-
-
-class TestYearEnd(Base):
-    _offset = YearEnd
-
-    def test_misspecified(self):
-        pytest.raises(ValueError, YearEnd, month=13)
-
-    offset_cases = []
-    offset_cases.append((YearEnd(),
-                        {datetime(2008, 1, 1): datetime(2008, 12, 31),
-                         datetime(2008, 6, 30): datetime(2008, 12, 31),
-                         datetime(2008, 12, 31): datetime(2009, 12, 31),
-                         datetime(2005, 12, 30): datetime(2005, 12, 31),
-                         datetime(2005, 12, 31): datetime(2006, 12, 31), }))
-
-    offset_cases.append((YearEnd(0),
-                        {datetime(2008, 1, 1): datetime(2008, 12, 31),
-                         datetime(2008, 6, 30): datetime(2008, 12, 31),
-                         datetime(2008, 12, 31): datetime(2008, 12, 31),
-                         datetime(2005, 12, 30): datetime(2005, 12, 31), }))
-
-    offset_cases.append((YearEnd(-1),
-                        {datetime(2007, 1, 1): datetime(2006, 12, 31),
-                         datetime(2008, 6, 30): datetime(2007, 12, 31),
-                         datetime(2008, 12, 31): datetime(2007, 12, 31),
-                         datetime(2006, 12, 29): datetime(2005, 12, 31),
-                         datetime(2006, 12, 30): datetime(2005, 12, 31),
-                         datetime(2007, 1, 1): datetime(2006, 12, 31), }))
-
-    offset_cases.append((YearEnd(-2),
-                        {datetime(2007, 1, 1): datetime(2005, 12, 31),
-                         datetime(2008, 6, 30): datetime(2006, 12, 31),
-                         datetime(2008, 12, 31): datetime(2006, 12, 31), }))
-
-    @pytest.mark.parametrize('case', offset_cases)
-    def test_offset(self, case):
-        offset, cases = case
-        for base, expected in compat.iteritems(cases):
-            assert_offset_equal(offset, base, expected)
-
-    on_offset_cases = [(YearEnd(), datetime(2007, 12, 31), True),
-                       (YearEnd(), datetime(2008, 1, 1), False),
-                       (YearEnd(), datetime(2006, 12, 31), True),
-                       (YearEnd(), datetime(2006, 12, 29), False)]
-
-    @pytest.mark.parametrize('case', on_offset_cases)
-    def test_onOffset(self, case):
-        offset, dt, expected = case
-        assert_onOffset(offset, dt, expected)
-
-
-class TestYearEndDiffMonth(Base):
-
-    offset_cases = []
-    offset_cases.append((YearEnd(month=3),
-                        {datetime(2008, 1, 1): datetime(2008, 3, 31),
-                         datetime(2008, 2, 15): datetime(2008, 3, 31),
-                         datetime(2008, 3, 31): datetime(2009, 3, 31),
-                         datetime(2008, 3, 30): datetime(2008, 3, 31),
-                         datetime(2005, 3, 31): datetime(2006, 3, 31),
-                         datetime(2006, 7, 30): datetime(2007, 3, 31)}))
-
-    offset_cases.append((YearEnd(0, month=3),
-                        {datetime(2008, 1, 1): datetime(2008, 3, 31),
-                         datetime(2008, 2, 28): datetime(2008, 3, 31),
-                         datetime(2008, 3, 31): datetime(2008, 3, 31),
-                         datetime(2005, 3, 30): datetime(2005, 3, 31), }))
-
-    offset_cases.append((YearEnd(-1, month=3),
-                        {datetime(2007, 1, 1): datetime(2006, 3, 31),
-                         datetime(2008, 2, 28): datetime(2007, 3, 31),
-                         datetime(2008, 3, 31): datetime(2007, 3, 31),
-                         datetime(2006, 3, 29): datetime(2005, 3, 31),
-                         datetime(2006, 3, 30): datetime(2005, 3, 31),
-                         datetime(2007, 3, 1): datetime(2006, 3, 31), }))
-
-    offset_cases.append((YearEnd(-2, month=3),
-                        {datetime(2007, 1, 1): datetime(2005, 3, 31),
-                         datetime(2008, 6, 30): datetime(2007, 3, 31),
-                         datetime(2008, 3, 31): datetime(2006, 3, 31), }))
-
-    @pytest.mark.parametrize('case', offset_cases)
-    def test_offset(self, case):
-        offset, cases = case
-        for base, expected in compat.iteritems(cases):
-            assert_offset_equal(offset, base, expected)
-
-    on_offset_cases = [(YearEnd(month=3), datetime(2007, 3, 31), True),
-                       (YearEnd(month=3), datetime(2008, 1, 1), False),
-                       (YearEnd(month=3), datetime(2006, 3, 31), True),
-                       (YearEnd(month=3), datetime(2006, 3, 29), False)]
-
-    @pytest.mark.parametrize('case', on_offset_cases)
-    def test_onOffset(self, case):
-        offset, dt, expected = case
-        assert_onOffset(offset, dt, expected)
-
-
 def test_Easter():
     assert_offset_equal(Easter(), datetime(2010, 1, 1), datetime(2010, 4, 4))
     assert_offset_equal(Easter(), datetime(2010, 4, 5), datetime(2011, 4, 24))
@@ -4285,12 +2773,6 @@ class TestOffsetNames(object):
         assert Week(weekday=4).freqstr == 'W-FRI'
 
         assert LastWeekOfMonth(weekday=WeekDay.SUN).freqstr == "LWOM-SUN"
-        assert (makeFY5253LastOfMonthQuarter(
-            weekday=1, startingMonth=3,
-            qtr_with_extra_week=4).freqstr == "REQ-L-MAR-TUE-4")
-        assert (makeFY5253NearestEndMonthQuarter(
-            weekday=1, startingMonth=3,
-            qtr_with_extra_week=3).freqstr == "REQ-N-MAR-TUE-3")
 
 
 def test_get_offset():
@@ -4303,17 +2785,7 @@ def test_get_offset():
         ('B', BDay()), ('b', BDay()), ('bm', BMonthEnd()),
         ('Bm', BMonthEnd()), ('W-MON', Week(weekday=0)),
         ('W-TUE', Week(weekday=1)), ('W-WED', Week(weekday=2)),
-        ('W-THU', Week(weekday=3)), ('W-FRI', Week(weekday=4)),
-        ("RE-N-DEC-MON", makeFY5253NearestEndMonth(weekday=0,
-                                                   startingMonth=12)),
-        ("RE-L-DEC-TUE", makeFY5253LastOfMonth(weekday=1, startingMonth=12)),
-        ("REQ-L-MAR-TUE-4", makeFY5253LastOfMonthQuarter(
-            weekday=1, startingMonth=3, qtr_with_extra_week=4)),
-        ("REQ-L-DEC-MON-3", makeFY5253LastOfMonthQuarter(
-            weekday=0, startingMonth=12, qtr_with_extra_week=3)),
-        ("REQ-N-DEC-MON-3", makeFY5253NearestEndMonthQuarter(
-            weekday=0, startingMonth=12, qtr_with_extra_week=3)),
-    ]
+        ('W-THU', Week(weekday=3)), ('W-FRI', Week(weekday=4))]
 
     for name, expected in pairs:
         offset = get_offset(name)
@@ -4381,16 +2853,6 @@ def test_get_standard_freq():
         assert fstr == get_standard_freq(('q', 5))
 
 
-def test_quarterly_dont_normalize():
-    date = datetime(2012, 3, 31, 5, 30)
-
-    offsets = (QuarterBegin, QuarterEnd, BQuarterEnd, BQuarterBegin)
-
-    for klass in offsets:
-        result = date + klass()
-        assert (result.time() == date.time())
-
-
 class TestOffsetAliases(object):
 
     def setup_method(self, method):
diff --git a/pandas/tests/tseries/offsets/test_yqm_offsets.py b/pandas/tests/tseries/offsets/test_yqm_offsets.py
new file mode 100644
index 000000000..1d47cf67c
--- /dev/null
+++ b/pandas/tests/tseries/offsets/test_yqm_offsets.py
@@ -0,0 +1,994 @@
+# -*- coding: utf-8 -*-
+"""
+Tests for Year, Quarter, and Month-based DateOffset subclasses
+"""
+from datetime import datetime
+
+import pytest
+
+from pandas import Timestamp
+from pandas import compat
+
+from pandas.tseries.offsets import (BMonthBegin, BMonthEnd,
+                                    MonthBegin, MonthEnd,
+                                    YearEnd, YearBegin, BYearEnd, BYearBegin,
+                                    QuarterEnd, QuarterBegin,
+                                    BQuarterEnd, BQuarterBegin)
+
+from .test_offsets import Base
+from .common import assert_offset_equal, assert_onOffset
+
+
+# --------------------------------------------------------------------
+# Misc
+
+def test_quarterly_dont_normalize():
+    date = datetime(2012, 3, 31, 5, 30)
+
+    offsets = (QuarterBegin, QuarterEnd, BQuarterEnd, BQuarterBegin)
+
+    for klass in offsets:
+        result = date + klass()
+        assert (result.time() == date.time())
+
+
+# --------------------------------------------------------------------
+# Months
+
+class TestMonthBegin(Base):
+    _offset = MonthBegin
+
+    offset_cases = []
+    # NOTE: I'm not entirely happy with the logic here for Begin -ss
+    # see thread 'offset conventions' on the ML
+    offset_cases.append((MonthBegin(), {
+        datetime(2008, 1, 31): datetime(2008, 2, 1),
+        datetime(2008, 2, 1): datetime(2008, 3, 1),
+        datetime(2006, 12, 31): datetime(2007, 1, 1),
+        datetime(2006, 12, 1): datetime(2007, 1, 1),
+        datetime(2007, 1, 31): datetime(2007, 2, 1)}))
+
+    offset_cases.append((MonthBegin(0), {
+        datetime(2008, 1, 31): datetime(2008, 2, 1),
+        datetime(2008, 1, 1): datetime(2008, 1, 1),
+        datetime(2006, 12, 3): datetime(2007, 1, 1),
+        datetime(2007, 1, 31): datetime(2007, 2, 1)}))
+
+    offset_cases.append((MonthBegin(2), {
+        datetime(2008, 2, 29): datetime(2008, 4, 1),
+        datetime(2008, 1, 31): datetime(2008, 3, 1),
+        datetime(2006, 12, 31): datetime(2007, 2, 1),
+        datetime(2007, 12, 28): datetime(2008, 2, 1),
+        datetime(2007, 1, 1): datetime(2007, 3, 1),
+        datetime(2006, 11, 1): datetime(2007, 1, 1)}))
+
+    offset_cases.append((MonthBegin(-1), {
+        datetime(2007, 1, 1): datetime(2006, 12, 1),
+        datetime(2008, 5, 31): datetime(2008, 5, 1),
+        datetime(2008, 12, 31): datetime(2008, 12, 1),
+        datetime(2006, 12, 29): datetime(2006, 12, 1),
+        datetime(2006, 1, 2): datetime(2006, 1, 1)}))
+
+    @pytest.mark.parametrize('case', offset_cases)
+    def test_offset(self, case):
+        offset, cases = case
+        for base, expected in compat.iteritems(cases):
+            assert_offset_equal(offset, base, expected)
+
+
+class TestMonthEnd(Base):
+    _offset = MonthEnd
+
+    def test_day_of_month(self):
+        dt = datetime(2007, 1, 1)
+        offset = MonthEnd()
+
+        result = dt + offset
+        assert result == Timestamp(2007, 1, 31)
+
+        result = result + offset
+        assert result == Timestamp(2007, 2, 28)
+
+    def test_normalize(self):
+        dt = datetime(2007, 1, 1, 3)
+
+        result = dt + MonthEnd(normalize=True)
+        expected = dt.replace(hour=0) + MonthEnd()
+        assert result == expected
+
+    offset_cases = []
+    offset_cases.append((MonthEnd(), {
+        datetime(2008, 1, 1): datetime(2008, 1, 31),
+        datetime(2008, 1, 31): datetime(2008, 2, 29),
+        datetime(2006, 12, 29): datetime(2006, 12, 31),
+        datetime(2006, 12, 31): datetime(2007, 1, 31),
+        datetime(2007, 1, 1): datetime(2007, 1, 31),
+        datetime(2006, 12, 1): datetime(2006, 12, 31)}))
+
+    offset_cases.append((MonthEnd(0), {
+        datetime(2008, 1, 1): datetime(2008, 1, 31),
+        datetime(2008, 1, 31): datetime(2008, 1, 31),
+        datetime(2006, 12, 29): datetime(2006, 12, 31),
+        datetime(2006, 12, 31): datetime(2006, 12, 31),
+        datetime(2007, 1, 1): datetime(2007, 1, 31)}))
+
+    offset_cases.append((MonthEnd(2), {
+        datetime(2008, 1, 1): datetime(2008, 2, 29),
+        datetime(2008, 1, 31): datetime(2008, 3, 31),
+        datetime(2006, 12, 29): datetime(2007, 1, 31),
+        datetime(2006, 12, 31): datetime(2007, 2, 28),
+        datetime(2007, 1, 1): datetime(2007, 2, 28),
+        datetime(2006, 11, 1): datetime(2006, 12, 31)}))
+
+    offset_cases.append((MonthEnd(-1), {
+        datetime(2007, 1, 1): datetime(2006, 12, 31),
+        datetime(2008, 6, 30): datetime(2008, 5, 31),
+        datetime(2008, 12, 31): datetime(2008, 11, 30),
+        datetime(2006, 12, 29): datetime(2006, 11, 30),
+        datetime(2006, 12, 30): datetime(2006, 11, 30),
+        datetime(2007, 1, 1): datetime(2006, 12, 31)}))
+
+    @pytest.mark.parametrize('case', offset_cases)
+    def test_offset(self, case):
+        offset, cases = case
+        for base, expected in compat.iteritems(cases):
+            assert_offset_equal(offset, base, expected)
+
+    on_offset_cases = [(MonthEnd(), datetime(2007, 12, 31), True),
+                       (MonthEnd(), datetime(2008, 1, 1), False)]
+
+    @pytest.mark.parametrize('case', on_offset_cases)
+    def test_onOffset(self, case):
+        offset, dt, expected = case
+        assert_onOffset(offset, dt, expected)
+
+
+class TestBMonthBegin(Base):
+    _offset = BMonthBegin
+
+    def test_offsets_compare_equal(self):
+        # root cause of #456
+        offset1 = BMonthBegin()
+        offset2 = BMonthBegin()
+        assert not offset1 != offset2
+
+    offset_cases = []
+    offset_cases.append((BMonthBegin(), {
+        datetime(2008, 1, 1): datetime(2008, 2, 1),
+        datetime(2008, 1, 31): datetime(2008, 2, 1),
+        datetime(2006, 12, 29): datetime(2007, 1, 1),
+        datetime(2006, 12, 31): datetime(2007, 1, 1),
+        datetime(2006, 9, 1): datetime(2006, 10, 2),
+        datetime(2007, 1, 1): datetime(2007, 2, 1),
+        datetime(2006, 12, 1): datetime(2007, 1, 1)}))
+
+    offset_cases.append((BMonthBegin(0), {
+        datetime(2008, 1, 1): datetime(2008, 1, 1),
+        datetime(2006, 10, 2): datetime(2006, 10, 2),
+        datetime(2008, 1, 31): datetime(2008, 2, 1),
+        datetime(2006, 12, 29): datetime(2007, 1, 1),
+        datetime(2006, 12, 31): datetime(2007, 1, 1),
+        datetime(2006, 9, 15): datetime(2006, 10, 2)}))
+
+    offset_cases.append((BMonthBegin(2), {
+        datetime(2008, 1, 1): datetime(2008, 3, 3),
+        datetime(2008, 1, 15): datetime(2008, 3, 3),
+        datetime(2006, 12, 29): datetime(2007, 2, 1),
+        datetime(2006, 12, 31): datetime(2007, 2, 1),
+        datetime(2007, 1, 1): datetime(2007, 3, 1),
+        datetime(2006, 11, 1): datetime(2007, 1, 1)}))
+
+    offset_cases.append((BMonthBegin(-1), {
+        datetime(2007, 1, 1): datetime(2006, 12, 1),
+        datetime(2008, 6, 30): datetime(2008, 6, 2),
+        datetime(2008, 6, 1): datetime(2008, 5, 1),
+        datetime(2008, 3, 10): datetime(2008, 3, 3),
+        datetime(2008, 12, 31): datetime(2008, 12, 1),
+        datetime(2006, 12, 29): datetime(2006, 12, 1),
+        datetime(2006, 12, 30): datetime(2006, 12, 1),
+        datetime(2007, 1, 1): datetime(2006, 12, 1)}))
+
+    @pytest.mark.parametrize('case', offset_cases)
+    def test_offset(self, case):
+        offset, cases = case
+        for base, expected in compat.iteritems(cases):
+            assert_offset_equal(offset, base, expected)
+
+    on_offset_cases = [(BMonthBegin(), datetime(2007, 12, 31), False),
+                       (BMonthBegin(), datetime(2008, 1, 1), True),
+                       (BMonthBegin(), datetime(2001, 4, 2), True),
+                       (BMonthBegin(), datetime(2008, 3, 3), True)]
+
+    @pytest.mark.parametrize('case', on_offset_cases)
+    def test_onOffset(self, case):
+        offset, dt, expected = case
+        assert_onOffset(offset, dt, expected)
+
+
+class TestBMonthEnd(Base):
+    _offset = BMonthEnd
+
+    def test_normalize(self):
+        dt = datetime(2007, 1, 1, 3)
+
+        result = dt + BMonthEnd(normalize=True)
+        expected = dt.replace(hour=0) + BMonthEnd()
+        assert result == expected
+
+    def test_offsets_compare_equal(self):
+        # root cause of #456
+        offset1 = BMonthEnd()
+        offset2 = BMonthEnd()
+        assert not offset1 != offset2
+
+    offset_cases = []
+    offset_cases.append((BMonthEnd(), {
+        datetime(2008, 1, 1): datetime(2008, 1, 31),
+        datetime(2008, 1, 31): datetime(2008, 2, 29),
+        datetime(2006, 12, 29): datetime(2007, 1, 31),
+        datetime(2006, 12, 31): datetime(2007, 1, 31),
+        datetime(2007, 1, 1): datetime(2007, 1, 31),
+        datetime(2006, 12, 1): datetime(2006, 12, 29)}))
+
+    offset_cases.append((BMonthEnd(0), {
+        datetime(2008, 1, 1): datetime(2008, 1, 31),
+        datetime(2008, 1, 31): datetime(2008, 1, 31),
+        datetime(2006, 12, 29): datetime(2006, 12, 29),
+        datetime(2006, 12, 31): datetime(2007, 1, 31),
+        datetime(2007, 1, 1): datetime(2007, 1, 31)}))
+
+    offset_cases.append((BMonthEnd(2), {
+        datetime(2008, 1, 1): datetime(2008, 2, 29),
+        datetime(2008, 1, 31): datetime(2008, 3, 31),
+        datetime(2006, 12, 29): datetime(2007, 2, 28),
+        datetime(2006, 12, 31): datetime(2007, 2, 28),
+        datetime(2007, 1, 1): datetime(2007, 2, 28),
+        datetime(2006, 11, 1): datetime(2006, 12, 29)}))
+
+    offset_cases.append((BMonthEnd(-1), {
+        datetime(2007, 1, 1): datetime(2006, 12, 29),
+        datetime(2008, 6, 30): datetime(2008, 5, 30),
+        datetime(2008, 12, 31): datetime(2008, 11, 28),
+        datetime(2006, 12, 29): datetime(2006, 11, 30),
+        datetime(2006, 12, 30): datetime(2006, 12, 29),
+        datetime(2007, 1, 1): datetime(2006, 12, 29)}))
+
+    @pytest.mark.parametrize('case', offset_cases)
+    def test_offset(self, case):
+        offset, cases = case
+        for base, expected in compat.iteritems(cases):
+            assert_offset_equal(offset, base, expected)
+
+    on_offset_cases = [(BMonthEnd(), datetime(2007, 12, 31), True),
+                       (BMonthEnd(), datetime(2008, 1, 1), False)]
+
+    @pytest.mark.parametrize('case', on_offset_cases)
+    def test_onOffset(self, case):
+        offset, dt, expected = case
+        assert_onOffset(offset, dt, expected)
+
+# --------------------------------------------------------------------
+# Quarters
+
+
+class TestQuarterBegin(Base):
+
+    def test_repr(self):
+        expected = "<QuarterBegin: startingMonth=3>"
+        assert repr(QuarterBegin()) == expected
+        expected = "<QuarterBegin: startingMonth=3>"
+        assert repr(QuarterBegin(startingMonth=3)) == expected
+        expected = "<QuarterBegin: startingMonth=1>"
+        assert repr(QuarterBegin(startingMonth=1)) == expected
+
+    def test_isAnchored(self):
+        assert QuarterBegin(startingMonth=1).isAnchored()
+        assert QuarterBegin().isAnchored()
+        assert not QuarterBegin(2, startingMonth=1).isAnchored()
+
+    def test_offset_corner_case(self):
+        # corner
+        offset = QuarterBegin(n=-1, startingMonth=1)
+        assert datetime(2010, 2, 1) + offset == datetime(2010, 1, 1)
+
+    offset_cases = []
+    offset_cases.append((QuarterBegin(startingMonth=1), {
+        datetime(2007, 12, 1): datetime(2008, 1, 1),
+        datetime(2008, 1, 1): datetime(2008, 4, 1),
+        datetime(2008, 2, 15): datetime(2008, 4, 1),
+        datetime(2008, 2, 29): datetime(2008, 4, 1),
+        datetime(2008, 3, 15): datetime(2008, 4, 1),
+        datetime(2008, 3, 31): datetime(2008, 4, 1),
+        datetime(2008, 4, 15): datetime(2008, 7, 1),
+        datetime(2008, 4, 1): datetime(2008, 7, 1)}))
+
+    offset_cases.append((QuarterBegin(startingMonth=2), {
+        datetime(2008, 1, 1): datetime(2008, 2, 1),
+        datetime(2008, 1, 31): datetime(2008, 2, 1),
+        datetime(2008, 1, 15): datetime(2008, 2, 1),
+        datetime(2008, 2, 29): datetime(2008, 5, 1),
+        datetime(2008, 3, 15): datetime(2008, 5, 1),
+        datetime(2008, 3, 31): datetime(2008, 5, 1),
+        datetime(2008, 4, 15): datetime(2008, 5, 1),
+        datetime(2008, 4, 30): datetime(2008, 5, 1)}))
+
+    offset_cases.append((QuarterBegin(startingMonth=1, n=0), {
+        datetime(2008, 1, 1): datetime(2008, 1, 1),
+        datetime(2008, 12, 1): datetime(2009, 1, 1),
+        datetime(2008, 1, 1): datetime(2008, 1, 1),
+        datetime(2008, 2, 15): datetime(2008, 4, 1),
+        datetime(2008, 2, 29): datetime(2008, 4, 1),
+        datetime(2008, 3, 15): datetime(2008, 4, 1),
+        datetime(2008, 3, 31): datetime(2008, 4, 1),
+        datetime(2008, 4, 15): datetime(2008, 7, 1),
+        datetime(2008, 4, 30): datetime(2008, 7, 1)}))
+
+    offset_cases.append((QuarterBegin(startingMonth=1, n=-1), {
+        datetime(2008, 1, 1): datetime(2007, 10, 1),
+        datetime(2008, 1, 31): datetime(2008, 1, 1),
+        datetime(2008, 2, 15): datetime(2008, 1, 1),
+        datetime(2008, 2, 29): datetime(2008, 1, 1),
+        datetime(2008, 3, 15): datetime(2008, 1, 1),
+        datetime(2008, 3, 31): datetime(2008, 1, 1),
+        datetime(2008, 4, 15): datetime(2008, 4, 1),
+        datetime(2008, 4, 30): datetime(2008, 4, 1),
+        datetime(2008, 7, 1): datetime(2008, 4, 1)}))
+
+    offset_cases.append((QuarterBegin(startingMonth=1, n=2), {
+        datetime(2008, 1, 1): datetime(2008, 7, 1),
+        datetime(2008, 2, 15): datetime(2008, 7, 1),
+        datetime(2008, 2, 29): datetime(2008, 7, 1),
+        datetime(2008, 3, 15): datetime(2008, 7, 1),
+        datetime(2008, 3, 31): datetime(2008, 7, 1),
+        datetime(2008, 4, 15): datetime(2008, 10, 1),
+        datetime(2008, 4, 1): datetime(2008, 10, 1)}))
+
+    @pytest.mark.parametrize('case', offset_cases)
+    def test_offset(self, case):
+        offset, cases = case
+        for base, expected in compat.iteritems(cases):
+            assert_offset_equal(offset, base, expected)
+
+
+class TestQuarterEnd(Base):
+    _offset = QuarterEnd
+
+    def test_repr(self):
+        expected = "<QuarterEnd: startingMonth=3>"
+        assert repr(QuarterEnd()) == expected
+        expected = "<QuarterEnd: startingMonth=3>"
+        assert repr(QuarterEnd(startingMonth=3)) == expected
+        expected = "<QuarterEnd: startingMonth=1>"
+        assert repr(QuarterEnd(startingMonth=1)) == expected
+
+    def test_isAnchored(self):
+        assert QuarterEnd(startingMonth=1).isAnchored()
+        assert QuarterEnd().isAnchored()
+        assert not QuarterEnd(2, startingMonth=1).isAnchored()
+
+    def test_offset_corner_case(self):
+        # corner
+        offset = QuarterEnd(n=-1, startingMonth=1)
+        assert datetime(2010, 2, 1) + offset == datetime(2010, 1, 31)
+
+    offset_cases = []
+    offset_cases.append((QuarterEnd(startingMonth=1), {
+        datetime(2008, 1, 1): datetime(2008, 1, 31),
+        datetime(2008, 1, 31): datetime(2008, 4, 30),
+        datetime(2008, 2, 15): datetime(2008, 4, 30),
+        datetime(2008, 2, 29): datetime(2008, 4, 30),
+        datetime(2008, 3, 15): datetime(2008, 4, 30),
+        datetime(2008, 3, 31): datetime(2008, 4, 30),
+        datetime(2008, 4, 15): datetime(2008, 4, 30),
+        datetime(2008, 4, 30): datetime(2008, 7, 31)}))
+
+    offset_cases.append((QuarterEnd(startingMonth=2), {
+        datetime(2008, 1, 1): datetime(2008, 2, 29),
+        datetime(2008, 1, 31): datetime(2008, 2, 29),
+        datetime(2008, 2, 15): datetime(2008, 2, 29),
+        datetime(2008, 2, 29): datetime(2008, 5, 31),
+        datetime(2008, 3, 15): datetime(2008, 5, 31),
+        datetime(2008, 3, 31): datetime(2008, 5, 31),
+        datetime(2008, 4, 15): datetime(2008, 5, 31),
+        datetime(2008, 4, 30): datetime(2008, 5, 31)}))
+
+    offset_cases.append((QuarterEnd(startingMonth=1, n=0), {
+        datetime(2008, 1, 1): datetime(2008, 1, 31),
+        datetime(2008, 1, 31): datetime(2008, 1, 31),
+        datetime(2008, 2, 15): datetime(2008, 4, 30),
+        datetime(2008, 2, 29): datetime(2008, 4, 30),
+        datetime(2008, 3, 15): datetime(2008, 4, 30),
+        datetime(2008, 3, 31): datetime(2008, 4, 30),
+        datetime(2008, 4, 15): datetime(2008, 4, 30),
+        datetime(2008, 4, 30): datetime(2008, 4, 30)}))
+
+    offset_cases.append((QuarterEnd(startingMonth=1, n=-1), {
+        datetime(2008, 1, 1): datetime(2007, 10, 31),
+        datetime(2008, 1, 31): datetime(2007, 10, 31),
+        datetime(2008, 2, 15): datetime(2008, 1, 31),
+        datetime(2008, 2, 29): datetime(2008, 1, 31),
+        datetime(2008, 3, 15): datetime(2008, 1, 31),
+        datetime(2008, 3, 31): datetime(2008, 1, 31),
+        datetime(2008, 4, 15): datetime(2008, 1, 31),
+        datetime(2008, 4, 30): datetime(2008, 1, 31),
+        datetime(2008, 7, 1): datetime(2008, 4, 30)}))
+
+    offset_cases.append((QuarterEnd(startingMonth=1, n=2), {
+        datetime(2008, 1, 31): datetime(2008, 7, 31),
+        datetime(2008, 2, 15): datetime(2008, 7, 31),
+        datetime(2008, 2, 29): datetime(2008, 7, 31),
+        datetime(2008, 3, 15): datetime(2008, 7, 31),
+        datetime(2008, 3, 31): datetime(2008, 7, 31),
+        datetime(2008, 4, 15): datetime(2008, 7, 31),
+        datetime(2008, 4, 30): datetime(2008, 10, 31)}))
+
+    @pytest.mark.parametrize('case', offset_cases)
+    def test_offset(self, case):
+        offset, cases = case
+        for base, expected in compat.iteritems(cases):
+            assert_offset_equal(offset, base, expected)
+
+    on_offset_cases = [
+        (QuarterEnd(1, startingMonth=1), datetime(2008, 1, 31), True),
+        (QuarterEnd(1, startingMonth=1), datetime(2007, 12, 31), False),
+        (QuarterEnd(1, startingMonth=1), datetime(2008, 2, 29), False),
+        (QuarterEnd(1, startingMonth=1), datetime(2007, 3, 30), False),
+        (QuarterEnd(1, startingMonth=1), datetime(2007, 3, 31), False),
+        (QuarterEnd(1, startingMonth=1), datetime(2008, 4, 30), True),
+        (QuarterEnd(1, startingMonth=1), datetime(2008, 5, 30), False),
+        (QuarterEnd(1, startingMonth=1), datetime(2008, 5, 31), False),
+        (QuarterEnd(1, startingMonth=1), datetime(2007, 6, 29), False),
+        (QuarterEnd(1, startingMonth=1), datetime(2007, 6, 30), False),
+        (QuarterEnd(1, startingMonth=2), datetime(2008, 1, 31), False),
+        (QuarterEnd(1, startingMonth=2), datetime(2007, 12, 31), False),
+        (QuarterEnd(1, startingMonth=2), datetime(2008, 2, 29), True),
+        (QuarterEnd(1, startingMonth=2), datetime(2007, 3, 30), False),
+        (QuarterEnd(1, startingMonth=2), datetime(2007, 3, 31), False),
+        (QuarterEnd(1, startingMonth=2), datetime(2008, 4, 30), False),
+        (QuarterEnd(1, startingMonth=2), datetime(2008, 5, 30), False),
+        (QuarterEnd(1, startingMonth=2), datetime(2008, 5, 31), True),
+        (QuarterEnd(1, startingMonth=2), datetime(2007, 6, 29), False),
+        (QuarterEnd(1, startingMonth=2), datetime(2007, 6, 30), False),
+        (QuarterEnd(1, startingMonth=3), datetime(2008, 1, 31), False),
+        (QuarterEnd(1, startingMonth=3), datetime(2007, 12, 31), True),
+        (QuarterEnd(1, startingMonth=3), datetime(2008, 2, 29), False),
+        (QuarterEnd(1, startingMonth=3), datetime(2007, 3, 30), False),
+        (QuarterEnd(1, startingMonth=3), datetime(2007, 3, 31), True),
+        (QuarterEnd(1, startingMonth=3), datetime(2008, 4, 30), False),
+        (QuarterEnd(1, startingMonth=3), datetime(2008, 5, 30), False),
+        (QuarterEnd(1, startingMonth=3), datetime(2008, 5, 31), False),
+        (QuarterEnd(1, startingMonth=3), datetime(2007, 6, 29), False),
+        (QuarterEnd(1, startingMonth=3), datetime(2007, 6, 30), True)]
+
+    @pytest.mark.parametrize('case', on_offset_cases)
+    def test_onOffset(self, case):
+        offset, dt, expected = case
+        assert_onOffset(offset, dt, expected)
+
+
+class TestBQuarterBegin(Base):
+    _offset = BQuarterBegin
+
+    def test_repr(self):
+        expected = "<BusinessQuarterBegin: startingMonth=3>"
+        assert repr(BQuarterBegin()) == expected
+        expected = "<BusinessQuarterBegin: startingMonth=3>"
+        assert repr(BQuarterBegin(startingMonth=3)) == expected
+        expected = "<BusinessQuarterBegin: startingMonth=1>"
+        assert repr(BQuarterBegin(startingMonth=1)) == expected
+
+    def test_isAnchored(self):
+        assert BQuarterBegin(startingMonth=1).isAnchored()
+        assert BQuarterBegin().isAnchored()
+        assert not BQuarterBegin(2, startingMonth=1).isAnchored()
+
+    def test_offset_corner_case(self):
+        # corner
+        offset = BQuarterBegin(n=-1, startingMonth=1)
+        assert datetime(2007, 4, 3) + offset == datetime(2007, 4, 2)
+
+    offset_cases = []
+    offset_cases.append((BQuarterBegin(startingMonth=1), {
+        datetime(2008, 1, 1): datetime(2008, 4, 1),
+        datetime(2008, 1, 31): datetime(2008, 4, 1),
+        datetime(2008, 2, 15): datetime(2008, 4, 1),
+        datetime(2008, 2, 29): datetime(2008, 4, 1),
+        datetime(2008, 3, 15): datetime(2008, 4, 1),
+        datetime(2008, 3, 31): datetime(2008, 4, 1),
+        datetime(2008, 4, 15): datetime(2008, 7, 1),
+        datetime(2007, 3, 15): datetime(2007, 4, 2),
+        datetime(2007, 2, 28): datetime(2007, 4, 2),
+        datetime(2007, 1, 1): datetime(2007, 4, 2),
+        datetime(2007, 4, 15): datetime(2007, 7, 2),
+        datetime(2007, 7, 1): datetime(2007, 7, 2),
+        datetime(2007, 4, 1): datetime(2007, 4, 2),
+        datetime(2007, 4, 2): datetime(2007, 7, 2),
+        datetime(2008, 4, 30): datetime(2008, 7, 1)}))
+
+    offset_cases.append((BQuarterBegin(startingMonth=2), {
+        datetime(2008, 1, 1): datetime(2008, 2, 1),
+        datetime(2008, 1, 31): datetime(2008, 2, 1),
+        datetime(2008, 1, 15): datetime(2008, 2, 1),
+        datetime(2008, 2, 29): datetime(2008, 5, 1),
+        datetime(2008, 3, 15): datetime(2008, 5, 1),
+        datetime(2008, 3, 31): datetime(2008, 5, 1),
+        datetime(2008, 4, 15): datetime(2008, 5, 1),
+        datetime(2008, 8, 15): datetime(2008, 11, 3),
+        datetime(2008, 9, 15): datetime(2008, 11, 3),
+        datetime(2008, 11, 1): datetime(2008, 11, 3),
+        datetime(2008, 4, 30): datetime(2008, 5, 1)}))
+
+    offset_cases.append((BQuarterBegin(startingMonth=1, n=0), {
+        datetime(2008, 1, 1): datetime(2008, 1, 1),
+        datetime(2007, 12, 31): datetime(2008, 1, 1),
+        datetime(2008, 2, 15): datetime(2008, 4, 1),
+        datetime(2008, 2, 29): datetime(2008, 4, 1),
+        datetime(2008, 1, 15): datetime(2008, 4, 1),
+        datetime(2008, 2, 27): datetime(2008, 4, 1),
+        datetime(2008, 3, 15): datetime(2008, 4, 1),
+        datetime(2007, 4, 1): datetime(2007, 4, 2),
+        datetime(2007, 4, 2): datetime(2007, 4, 2),
+        datetime(2007, 7, 1): datetime(2007, 7, 2),
+        datetime(2007, 4, 15): datetime(2007, 7, 2),
+        datetime(2007, 7, 2): datetime(2007, 7, 2)}))
+
+    offset_cases.append((BQuarterBegin(startingMonth=1, n=-1), {
+        datetime(2008, 1, 1): datetime(2007, 10, 1),
+        datetime(2008, 1, 31): datetime(2008, 1, 1),
+        datetime(2008, 2, 15): datetime(2008, 1, 1),
+        datetime(2008, 2, 29): datetime(2008, 1, 1),
+        datetime(2008, 3, 15): datetime(2008, 1, 1),
+        datetime(2008, 3, 31): datetime(2008, 1, 1),
+        datetime(2008, 4, 15): datetime(2008, 4, 1),
+        datetime(2007, 7, 3): datetime(2007, 7, 2),
+        datetime(2007, 4, 3): datetime(2007, 4, 2),
+        datetime(2007, 7, 2): datetime(2007, 4, 2),
+        datetime(2008, 4, 1): datetime(2008, 1, 1)}))
+
+    offset_cases.append((BQuarterBegin(startingMonth=1, n=2), {
+        datetime(2008, 1, 1): datetime(2008, 7, 1),
+        datetime(2008, 1, 15): datetime(2008, 7, 1),
+        datetime(2008, 2, 29): datetime(2008, 7, 1),
+        datetime(2008, 3, 15): datetime(2008, 7, 1),
+        datetime(2007, 3, 31): datetime(2007, 7, 2),
+        datetime(2007, 4, 15): datetime(2007, 10, 1),
+        datetime(2008, 4, 30): datetime(2008, 10, 1)}))
+
+    @pytest.mark.parametrize('case', offset_cases)
+    def test_offset(self, case):
+        offset, cases = case
+        for base, expected in compat.iteritems(cases):
+            assert_offset_equal(offset, base, expected)
+
+
+class TestBQuarterEnd(Base):
+    _offset = BQuarterEnd
+
+    def test_repr(self):
+        expected = "<BusinessQuarterEnd: startingMonth=3>"
+        assert repr(BQuarterEnd()) == expected
+        expected = "<BusinessQuarterEnd: startingMonth=3>"
+        assert repr(BQuarterEnd(startingMonth=3)) == expected
+        expected = "<BusinessQuarterEnd: startingMonth=1>"
+        assert repr(BQuarterEnd(startingMonth=1)) == expected
+
+    def test_isAnchored(self):
+        assert BQuarterEnd(startingMonth=1).isAnchored()
+        assert BQuarterEnd().isAnchored()
+        assert not BQuarterEnd(2, startingMonth=1).isAnchored()
+
+    def test_offset_corner_case(self):
+        # corner
+        offset = BQuarterEnd(n=-1, startingMonth=1)
+        assert datetime(2010, 1, 31) + offset == datetime(2010, 1, 29)
+
+    offset_cases = []
+    offset_cases.append((BQuarterEnd(startingMonth=1), {
+        datetime(2008, 1, 1): datetime(2008, 1, 31),
+        datetime(2008, 1, 31): datetime(2008, 4, 30),
+        datetime(2008, 2, 15): datetime(2008, 4, 30),
+        datetime(2008, 2, 29): datetime(2008, 4, 30),
+        datetime(2008, 3, 15): datetime(2008, 4, 30),
+        datetime(2008, 3, 31): datetime(2008, 4, 30),
+        datetime(2008, 4, 15): datetime(2008, 4, 30),
+        datetime(2008, 4, 30): datetime(2008, 7, 31)}))
+
+    offset_cases.append((BQuarterEnd(startingMonth=2), {
+        datetime(2008, 1, 1): datetime(2008, 2, 29),
+        datetime(2008, 1, 31): datetime(2008, 2, 29),
+        datetime(2008, 2, 15): datetime(2008, 2, 29),
+        datetime(2008, 2, 29): datetime(2008, 5, 30),
+        datetime(2008, 3, 15): datetime(2008, 5, 30),
+        datetime(2008, 3, 31): datetime(2008, 5, 30),
+        datetime(2008, 4, 15): datetime(2008, 5, 30),
+        datetime(2008, 4, 30): datetime(2008, 5, 30)}))
+
+    offset_cases.append((BQuarterEnd(startingMonth=1, n=0), {
+        datetime(2008, 1, 1): datetime(2008, 1, 31),
+        datetime(2008, 1, 31): datetime(2008, 1, 31),
+        datetime(2008, 2, 15): datetime(2008, 4, 30),
+        datetime(2008, 2, 29): datetime(2008, 4, 30),
+        datetime(2008, 3, 15): datetime(2008, 4, 30),
+        datetime(2008, 3, 31): datetime(2008, 4, 30),
+        datetime(2008, 4, 15): datetime(2008, 4, 30),
+        datetime(2008, 4, 30): datetime(2008, 4, 30)}))
+
+    offset_cases.append((BQuarterEnd(startingMonth=1, n=-1), {
+        datetime(2008, 1, 1): datetime(2007, 10, 31),
+        datetime(2008, 1, 31): datetime(2007, 10, 31),
+        datetime(2008, 2, 15): datetime(2008, 1, 31),
+        datetime(2008, 2, 29): datetime(2008, 1, 31),
+        datetime(2008, 3, 15): datetime(2008, 1, 31),
+        datetime(2008, 3, 31): datetime(2008, 1, 31),
+        datetime(2008, 4, 15): datetime(2008, 1, 31),
+        datetime(2008, 4, 30): datetime(2008, 1, 31)}))
+
+    offset_cases.append((BQuarterEnd(startingMonth=1, n=2), {
+        datetime(2008, 1, 31): datetime(2008, 7, 31),
+        datetime(2008, 2, 15): datetime(2008, 7, 31),
+        datetime(2008, 2, 29): datetime(2008, 7, 31),
+        datetime(2008, 3, 15): datetime(2008, 7, 31),
+        datetime(2008, 3, 31): datetime(2008, 7, 31),
+        datetime(2008, 4, 15): datetime(2008, 7, 31),
+        datetime(2008, 4, 30): datetime(2008, 10, 31)}))
+
+    @pytest.mark.parametrize('case', offset_cases)
+    def test_offset(self, case):
+        offset, cases = case
+        for base, expected in compat.iteritems(cases):
+            assert_offset_equal(offset, base, expected)
+
+    on_offset_cases = [
+        (BQuarterEnd(1, startingMonth=1), datetime(2008, 1, 31), True),
+        (BQuarterEnd(1, startingMonth=1), datetime(2007, 12, 31), False),
+        (BQuarterEnd(1, startingMonth=1), datetime(2008, 2, 29), False),
+        (BQuarterEnd(1, startingMonth=1), datetime(2007, 3, 30), False),
+        (BQuarterEnd(1, startingMonth=1), datetime(2007, 3, 31), False),
+        (BQuarterEnd(1, startingMonth=1), datetime(2008, 4, 30), True),
+        (BQuarterEnd(1, startingMonth=1), datetime(2008, 5, 30), False),
+        (BQuarterEnd(1, startingMonth=1), datetime(2007, 6, 29), False),
+        (BQuarterEnd(1, startingMonth=1), datetime(2007, 6, 30), False),
+        (BQuarterEnd(1, startingMonth=2), datetime(2008, 1, 31), False),
+        (BQuarterEnd(1, startingMonth=2), datetime(2007, 12, 31), False),
+        (BQuarterEnd(1, startingMonth=2), datetime(2008, 2, 29), True),
+        (BQuarterEnd(1, startingMonth=2), datetime(2007, 3, 30), False),
+        (BQuarterEnd(1, startingMonth=2), datetime(2007, 3, 31), False),
+        (BQuarterEnd(1, startingMonth=2), datetime(2008, 4, 30), False),
+        (BQuarterEnd(1, startingMonth=2), datetime(2008, 5, 30), True),
+        (BQuarterEnd(1, startingMonth=2), datetime(2007, 6, 29), False),
+        (BQuarterEnd(1, startingMonth=2), datetime(2007, 6, 30), False),
+        (BQuarterEnd(1, startingMonth=3), datetime(2008, 1, 31), False),
+        (BQuarterEnd(1, startingMonth=3), datetime(2007, 12, 31), True),
+        (BQuarterEnd(1, startingMonth=3), datetime(2008, 2, 29), False),
+        (BQuarterEnd(1, startingMonth=3), datetime(2007, 3, 30), True),
+        (BQuarterEnd(1, startingMonth=3), datetime(2007, 3, 31), False),
+        (BQuarterEnd(1, startingMonth=3), datetime(2008, 4, 30), False),
+        (BQuarterEnd(1, startingMonth=3), datetime(2008, 5, 30), False),
+        (BQuarterEnd(1, startingMonth=3), datetime(2007, 6, 29), True),
+        (BQuarterEnd(1, startingMonth=3), datetime(2007, 6, 30), False)]
+
+    @pytest.mark.parametrize('case', on_offset_cases)
+    def test_onOffset(self, case):
+        offset, dt, expected = case
+        assert_onOffset(offset, dt, expected)
+
+# --------------------------------------------------------------------
+# Years
+
+
+class TestYearBegin(Base):
+    _offset = YearBegin
+
+    def test_misspecified(self):
+        pytest.raises(ValueError, YearBegin, month=13)
+
+    offset_cases = []
+    offset_cases.append((YearBegin(), {
+        datetime(2008, 1, 1): datetime(2009, 1, 1),
+        datetime(2008, 6, 30): datetime(2009, 1, 1),
+        datetime(2008, 12, 31): datetime(2009, 1, 1),
+        datetime(2005, 12, 30): datetime(2006, 1, 1),
+        datetime(2005, 12, 31): datetime(2006, 1, 1)}))
+
+    offset_cases.append((YearBegin(0), {
+        datetime(2008, 1, 1): datetime(2008, 1, 1),
+        datetime(2008, 6, 30): datetime(2009, 1, 1),
+        datetime(2008, 12, 31): datetime(2009, 1, 1),
+        datetime(2005, 12, 30): datetime(2006, 1, 1),
+        datetime(2005, 12, 31): datetime(2006, 1, 1)}))
+
+    offset_cases.append((YearBegin(3), {
+        datetime(2008, 1, 1): datetime(2011, 1, 1),
+        datetime(2008, 6, 30): datetime(2011, 1, 1),
+        datetime(2008, 12, 31): datetime(2011, 1, 1),
+        datetime(2005, 12, 30): datetime(2008, 1, 1),
+        datetime(2005, 12, 31): datetime(2008, 1, 1)}))
+
+    offset_cases.append((YearBegin(-1), {
+        datetime(2007, 1, 1): datetime(2006, 1, 1),
+        datetime(2007, 1, 15): datetime(2007, 1, 1),
+        datetime(2008, 6, 30): datetime(2008, 1, 1),
+        datetime(2008, 12, 31): datetime(2008, 1, 1),
+        datetime(2006, 12, 29): datetime(2006, 1, 1),
+        datetime(2006, 12, 30): datetime(2006, 1, 1),
+        datetime(2007, 1, 1): datetime(2006, 1, 1)}))
+
+    offset_cases.append((YearBegin(-2), {
+        datetime(2007, 1, 1): datetime(2005, 1, 1),
+        datetime(2008, 6, 30): datetime(2007, 1, 1),
+        datetime(2008, 12, 31): datetime(2007, 1, 1)}))
+
+    offset_cases.append((YearBegin(month=4), {
+        datetime(2007, 4, 1): datetime(2008, 4, 1),
+        datetime(2007, 4, 15): datetime(2008, 4, 1),
+        datetime(2007, 3, 1): datetime(2007, 4, 1),
+        datetime(2007, 12, 15): datetime(2008, 4, 1),
+        datetime(2012, 1, 31): datetime(2012, 4, 1)}))
+
+    offset_cases.append((YearBegin(0, month=4), {
+        datetime(2007, 4, 1): datetime(2007, 4, 1),
+        datetime(2007, 3, 1): datetime(2007, 4, 1),
+        datetime(2007, 12, 15): datetime(2008, 4, 1),
+        datetime(2012, 1, 31): datetime(2012, 4, 1)}))
+
+    offset_cases.append((YearBegin(4, month=4), {
+        datetime(2007, 4, 1): datetime(2011, 4, 1),
+        datetime(2007, 4, 15): datetime(2011, 4, 1),
+        datetime(2007, 3, 1): datetime(2010, 4, 1),
+        datetime(2007, 12, 15): datetime(2011, 4, 1),
+        datetime(2012, 1, 31): datetime(2015, 4, 1)}))
+
+    offset_cases.append((YearBegin(-1, month=4), {
+        datetime(2007, 4, 1): datetime(2006, 4, 1),
+        datetime(2007, 3, 1): datetime(2006, 4, 1),
+        datetime(2007, 12, 15): datetime(2007, 4, 1),
+        datetime(2012, 1, 31): datetime(2011, 4, 1)}))
+
+    offset_cases.append((YearBegin(-3, month=4), {
+        datetime(2007, 4, 1): datetime(2004, 4, 1),
+        datetime(2007, 3, 1): datetime(2004, 4, 1),
+        datetime(2007, 12, 15): datetime(2005, 4, 1),
+        datetime(2012, 1, 31): datetime(2009, 4, 1)}))
+
+    @pytest.mark.parametrize('case', offset_cases)
+    def test_offset(self, case):
+        offset, cases = case
+        for base, expected in compat.iteritems(cases):
+            assert_offset_equal(offset, base, expected)
+
+    on_offset_cases = [(YearBegin(), datetime(2007, 1, 3), False),
+                       (YearBegin(), datetime(2008, 1, 1), True),
+                       (YearBegin(), datetime(2006, 12, 31), False),
+                       (YearBegin(), datetime(2006, 1, 2), False)]
+
+    @pytest.mark.parametrize('case', on_offset_cases)
+    def test_onOffset(self, case):
+        offset, dt, expected = case
+        assert_onOffset(offset, dt, expected)
+
+
+class TestYearEnd(Base):
+    _offset = YearEnd
+
+    def test_misspecified(self):
+        pytest.raises(ValueError, YearEnd, month=13)
+
+    offset_cases = []
+    offset_cases.append((YearEnd(), {
+        datetime(2008, 1, 1): datetime(2008, 12, 31),
+        datetime(2008, 6, 30): datetime(2008, 12, 31),
+        datetime(2008, 12, 31): datetime(2009, 12, 31),
+        datetime(2005, 12, 30): datetime(2005, 12, 31),
+        datetime(2005, 12, 31): datetime(2006, 12, 31)}))
+
+    offset_cases.append((YearEnd(0), {
+        datetime(2008, 1, 1): datetime(2008, 12, 31),
+        datetime(2008, 6, 30): datetime(2008, 12, 31),
+        datetime(2008, 12, 31): datetime(2008, 12, 31),
+        datetime(2005, 12, 30): datetime(2005, 12, 31)}))
+
+    offset_cases.append((YearEnd(-1), {
+        datetime(2007, 1, 1): datetime(2006, 12, 31),
+        datetime(2008, 6, 30): datetime(2007, 12, 31),
+        datetime(2008, 12, 31): datetime(2007, 12, 31),
+        datetime(2006, 12, 29): datetime(2005, 12, 31),
+        datetime(2006, 12, 30): datetime(2005, 12, 31),
+        datetime(2007, 1, 1): datetime(2006, 12, 31)}))
+
+    offset_cases.append((YearEnd(-2), {
+        datetime(2007, 1, 1): datetime(2005, 12, 31),
+        datetime(2008, 6, 30): datetime(2006, 12, 31),
+        datetime(2008, 12, 31): datetime(2006, 12, 31)}))
+
+    @pytest.mark.parametrize('case', offset_cases)
+    def test_offset(self, case):
+        offset, cases = case
+        for base, expected in compat.iteritems(cases):
+            assert_offset_equal(offset, base, expected)
+
+    on_offset_cases = [(YearEnd(), datetime(2007, 12, 31), True),
+                       (YearEnd(), datetime(2008, 1, 1), False),
+                       (YearEnd(), datetime(2006, 12, 31), True),
+                       (YearEnd(), datetime(2006, 12, 29), False)]
+
+    @pytest.mark.parametrize('case', on_offset_cases)
+    def test_onOffset(self, case):
+        offset, dt, expected = case
+        assert_onOffset(offset, dt, expected)
+
+
+class TestYearEndDiffMonth(Base):
+    offset_cases = []
+    offset_cases.append((YearEnd(month=3),
+                        {datetime(2008, 1, 1): datetime(2008, 3, 31),
+                         datetime(2008, 2, 15): datetime(2008, 3, 31),
+                         datetime(2008, 3, 31): datetime(2009, 3, 31),
+                         datetime(2008, 3, 30): datetime(2008, 3, 31),
+                         datetime(2005, 3, 31): datetime(2006, 3, 31),
+                         datetime(2006, 7, 30): datetime(2007, 3, 31)}))
+
+    offset_cases.append((YearEnd(0, month=3),
+                        {datetime(2008, 1, 1): datetime(2008, 3, 31),
+                         datetime(2008, 2, 28): datetime(2008, 3, 31),
+                         datetime(2008, 3, 31): datetime(2008, 3, 31),
+                         datetime(2005, 3, 30): datetime(2005, 3, 31)}))
+
+    offset_cases.append((YearEnd(-1, month=3),
+                        {datetime(2007, 1, 1): datetime(2006, 3, 31),
+                         datetime(2008, 2, 28): datetime(2007, 3, 31),
+                         datetime(2008, 3, 31): datetime(2007, 3, 31),
+                         datetime(2006, 3, 29): datetime(2005, 3, 31),
+                         datetime(2006, 3, 30): datetime(2005, 3, 31),
+                         datetime(2007, 3, 1): datetime(2006, 3, 31)}))
+
+    offset_cases.append((YearEnd(-2, month=3),
+                        {datetime(2007, 1, 1): datetime(2005, 3, 31),
+                         datetime(2008, 6, 30): datetime(2007, 3, 31),
+                         datetime(2008, 3, 31): datetime(2006, 3, 31)}))
+
+    @pytest.mark.parametrize('case', offset_cases)
+    def test_offset(self, case):
+        offset, cases = case
+        for base, expected in compat.iteritems(cases):
+            assert_offset_equal(offset, base, expected)
+
+    on_offset_cases = [(YearEnd(month=3), datetime(2007, 3, 31), True),
+                       (YearEnd(month=3), datetime(2008, 1, 1), False),
+                       (YearEnd(month=3), datetime(2006, 3, 31), True),
+                       (YearEnd(month=3), datetime(2006, 3, 29), False)]
+
+    @pytest.mark.parametrize('case', on_offset_cases)
+    def test_onOffset(self, case):
+        offset, dt, expected = case
+        assert_onOffset(offset, dt, expected)
+
+
+class TestBYearBegin(Base):
+    _offset = BYearBegin
+
+    def test_misspecified(self):
+        pytest.raises(ValueError, BYearBegin, month=13)
+        pytest.raises(ValueError, BYearEnd, month=13)
+
+    offset_cases = []
+    offset_cases.append((BYearBegin(), {
+        datetime(2008, 1, 1): datetime(2009, 1, 1),
+        datetime(2008, 6, 30): datetime(2009, 1, 1),
+        datetime(2008, 12, 31): datetime(2009, 1, 1),
+        datetime(2011, 1, 1): datetime(2011, 1, 3),
+        datetime(2011, 1, 3): datetime(2012, 1, 2),
+        datetime(2005, 12, 30): datetime(2006, 1, 2),
+        datetime(2005, 12, 31): datetime(2006, 1, 2)}))
+
+    offset_cases.append((BYearBegin(0), {
+        datetime(2008, 1, 1): datetime(2008, 1, 1),
+        datetime(2008, 6, 30): datetime(2009, 1, 1),
+        datetime(2008, 12, 31): datetime(2009, 1, 1),
+        datetime(2005, 12, 30): datetime(2006, 1, 2),
+        datetime(2005, 12, 31): datetime(2006, 1, 2)}))
+
+    offset_cases.append((BYearBegin(-1), {
+        datetime(2007, 1, 1): datetime(2006, 1, 2),
+        datetime(2009, 1, 4): datetime(2009, 1, 1),
+        datetime(2009, 1, 1): datetime(2008, 1, 1),
+        datetime(2008, 6, 30): datetime(2008, 1, 1),
+        datetime(2008, 12, 31): datetime(2008, 1, 1),
+        datetime(2006, 12, 29): datetime(2006, 1, 2),
+        datetime(2006, 12, 30): datetime(2006, 1, 2),
+        datetime(2006, 1, 1): datetime(2005, 1, 3)}))
+
+    offset_cases.append((BYearBegin(-2), {
+        datetime(2007, 1, 1): datetime(2005, 1, 3),
+        datetime(2007, 6, 30): datetime(2006, 1, 2),
+        datetime(2008, 12, 31): datetime(2007, 1, 1)}))
+
+    @pytest.mark.parametrize('case', offset_cases)
+    def test_offset(self, case):
+        offset, cases = case
+        for base, expected in compat.iteritems(cases):
+            assert_offset_equal(offset, base, expected)
+
+
+class TestBYearEnd(Base):
+    _offset = BYearEnd
+
+    offset_cases = []
+    offset_cases.append((BYearEnd(), {
+        datetime(2008, 1, 1): datetime(2008, 12, 31),
+        datetime(2008, 6, 30): datetime(2008, 12, 31),
+        datetime(2008, 12, 31): datetime(2009, 12, 31),
+        datetime(2005, 12, 30): datetime(2006, 12, 29),
+        datetime(2005, 12, 31): datetime(2006, 12, 29)}))
+
+    offset_cases.append((BYearEnd(0), {
+        datetime(2008, 1, 1): datetime(2008, 12, 31),
+        datetime(2008, 6, 30): datetime(2008, 12, 31),
+        datetime(2008, 12, 31): datetime(2008, 12, 31),
+        datetime(2005, 12, 31): datetime(2006, 12, 29)}))
+
+    offset_cases.append((BYearEnd(-1), {
+        datetime(2007, 1, 1): datetime(2006, 12, 29),
+        datetime(2008, 6, 30): datetime(2007, 12, 31),
+        datetime(2008, 12, 31): datetime(2007, 12, 31),
+        datetime(2006, 12, 29): datetime(2005, 12, 30),
+        datetime(2006, 12, 30): datetime(2006, 12, 29),
+        datetime(2007, 1, 1): datetime(2006, 12, 29)}))
+
+    offset_cases.append((BYearEnd(-2), {
+        datetime(2007, 1, 1): datetime(2005, 12, 30),
+        datetime(2008, 6, 30): datetime(2006, 12, 29),
+        datetime(2008, 12, 31): datetime(2006, 12, 29)}))
+
+    @pytest.mark.parametrize('case', offset_cases)
+    def test_offset(self, case):
+        offset, cases = case
+        for base, expected in compat.iteritems(cases):
+            assert_offset_equal(offset, base, expected)
+
+    on_offset_cases = [(BYearEnd(), datetime(2007, 12, 31), True),
+                       (BYearEnd(), datetime(2008, 1, 1), False),
+                       (BYearEnd(), datetime(2006, 12, 31), False),
+                       (BYearEnd(), datetime(2006, 12, 29), True)]
+
+    @pytest.mark.parametrize('case', on_offset_cases)
+    def test_onOffset(self, case):
+        offset, dt, expected = case
+        assert_onOffset(offset, dt, expected)
+
+
+class TestBYearEndLagged(Base):
+    _offset = BYearEnd
+
+    def test_bad_month_fail(self):
+        pytest.raises(Exception, BYearEnd, month=13)
+        pytest.raises(Exception, BYearEnd, month=0)
+
+    offset_cases = []
+    offset_cases.append((BYearEnd(month=6), {
+        datetime(2008, 1, 1): datetime(2008, 6, 30),
+        datetime(2007, 6, 30): datetime(2008, 6, 30)}))
+
+    offset_cases.append((BYearEnd(n=-1, month=6), {
+        datetime(2008, 1, 1): datetime(2007, 6, 29),
+        datetime(2007, 6, 30): datetime(2007, 6, 29)}))
+
+    @pytest.mark.parametrize('case', offset_cases)
+    def test_offset(self, case):
+        offset, cases = case
+        for base, expected in compat.iteritems(cases):
+            assert_offset_equal(offset, base, expected)
+
+    def test_roll(self):
+        offset = BYearEnd(month=6)
+        date = datetime(2009, 11, 30)
+
+        assert offset.rollforward(date) == datetime(2010, 6, 30)
+        assert offset.rollback(date) == datetime(2009, 6, 30)
+
+    on_offset_cases = [(BYearEnd(month=2), datetime(2007, 2, 28), True),
+                       (BYearEnd(month=6), datetime(2007, 6, 30), False)]
+
+    @pytest.mark.parametrize('case', on_offset_cases)
+    def test_onOffset(self, case):
+        offset, dt, expected = case
+        assert_onOffset(offset, dt, expected)
diff --git a/pandas/tseries/offsets.py b/pandas/tseries/offsets.py
index 7b699349c..a307b7e58 100644
--- a/pandas/tseries/offsets.py
+++ b/pandas/tseries/offsets.py
@@ -985,6 +985,162 @@ class BusinessMonthBegin(MonthOffset):
     _day_opt = 'business_start'
 
 
+class CustomBusinessMonthEnd(BusinessMixin, MonthOffset):
+    """
+    DateOffset subclass representing one custom business month, incrementing
+    between end of month dates
+
+    Parameters
+    ----------
+    n : int, default 1
+    offset : timedelta, default timedelta(0)
+    normalize : bool, default False
+        Normalize start/end dates to midnight before generating date range
+    weekmask : str, Default 'Mon Tue Wed Thu Fri'
+        weekmask of valid business days, passed to ``numpy.busdaycalendar``
+    holidays : list
+        list/array of dates to exclude from the set of valid business days,
+        passed to ``numpy.busdaycalendar``
+    calendar : pd.HolidayCalendar or np.busdaycalendar
+    """
+
+    _cacheable = False
+    _prefix = 'CBM'
+
+    onOffset = DateOffset.onOffset  # override MonthOffset method
+
+    def __init__(self, n=1, normalize=False, weekmask='Mon Tue Wed Thu Fri',
+                 holidays=None, calendar=None, offset=timedelta(0)):
+        self.n = self._validate_n(n)
+        self.normalize = normalize
+        self._offset = offset
+        self.kwds = {}
+
+        calendar, holidays = _get_calendar(weekmask=weekmask,
+                                           holidays=holidays,
+                                           calendar=calendar)
+        self.kwds['weekmask'] = self.weekmask = weekmask
+        self.kwds['holidays'] = self.holidays = holidays
+        self.kwds['calendar'] = self.calendar = calendar
+        self.kwds['offset'] = offset
+
+    @cache_readonly
+    def cbday(self):
+        kwds = self.kwds
+        return CustomBusinessDay(n=self.n, normalize=self.normalize, **kwds)
+
+    @cache_readonly
+    def m_offset(self):
+        kwds = self.kwds
+        kwds = {key: kwds[key] for key in kwds
+                if key not in ['calendar', 'weekmask', 'holidays', 'offset']}
+        return MonthEnd(n=1, normalize=self.normalize, **kwds)
+
+    @apply_wraps
+    def apply(self, other):
+        n = self.n
+
+        # First move to month offset
+        cur_mend = self.m_offset.rollforward(other)
+
+        # Find this custom month offset
+        cur_cmend = self.cbday.rollback(cur_mend)
+
+        # handle zero case. arbitrarily rollforward
+        if n == 0 and other != cur_cmend:
+            n += 1
+
+        if other < cur_cmend and n >= 1:
+            n -= 1
+        elif other > cur_cmend and n <= -1:
+            n += 1
+
+        new = cur_mend + n * self.m_offset
+        result = self.cbday.rollback(new)
+        return result
+
+
+class CustomBusinessMonthBegin(BusinessMixin, MonthOffset):
+    """
+    DateOffset subclass representing one custom business month, incrementing
+    between beginning of month dates
+
+    Parameters
+    ----------
+    n : int, default 1
+    offset : timedelta, default timedelta(0)
+    normalize : bool, default False
+        Normalize start/end dates to midnight before generating date range
+    weekmask : str, Default 'Mon Tue Wed Thu Fri'
+        weekmask of valid business days, passed to ``numpy.busdaycalendar``
+    holidays : list
+        list/array of dates to exclude from the set of valid business days,
+        passed to ``numpy.busdaycalendar``
+    calendar : pd.HolidayCalendar or np.busdaycalendar
+    """
+
+    _cacheable = False
+    _prefix = 'CBMS'
+
+    onOffset = DateOffset.onOffset  # override MonthOffset method
+
+    def __init__(self, n=1, normalize=False, weekmask='Mon Tue Wed Thu Fri',
+                 holidays=None, calendar=None, offset=timedelta(0)):
+        self.n = self._validate_n(n)
+        self.normalize = normalize
+        self._offset = offset
+        self.kwds = {}
+
+        # _get_calendar does validation and possible transformation
+        # of calendar and holidays.
+        calendar, holidays = _get_calendar(weekmask=weekmask,
+                                           holidays=holidays,
+                                           calendar=calendar)
+        self.kwds['calendar'] = self.calendar = calendar
+        self.kwds['weekmask'] = self.weekmask = weekmask
+        self.kwds['holidays'] = self.holidays = holidays
+        self.kwds['offset'] = offset
+
+    @cache_readonly
+    def cbday(self):
+        kwds = self.kwds
+        return CustomBusinessDay(n=self.n, normalize=self.normalize, **kwds)
+
+    @cache_readonly
+    def m_offset(self):
+        kwds = self.kwds
+        kwds = {key: kwds[key] for key in kwds
+                if key not in ['calendar', 'weekmask', 'holidays', 'offset']}
+        return MonthBegin(n=1, normalize=self.normalize, **kwds)
+
+    @apply_wraps
+    def apply(self, other):
+        n = self.n
+        dt_in = other
+
+        # First move to month offset
+        cur_mbegin = self.m_offset.rollback(dt_in)
+
+        # Find this custom month offset
+        cur_cmbegin = self.cbday.rollforward(cur_mbegin)
+
+        # handle zero case. arbitrarily rollforward
+        if n == 0 and dt_in != cur_cmbegin:
+            n += 1
+
+        if dt_in > cur_cmbegin and n <= -1:
+            n += 1
+        elif dt_in < cur_cmbegin and n >= 1:
+            n -= 1
+
+        new = cur_mbegin + n * self.m_offset
+        result = self.cbday.rollforward(new)
+        return result
+
+
+# ---------------------------------------------------------------------
+# Semi-Month Based Offset Classes
+
 class SemiMonthOffset(DateOffset):
     _adjust_dst = True
     _default_day_of_month = 15
@@ -1185,155 +1341,6 @@ class SemiMonthBegin(SemiMonthOffset):
         return i + (roll % 2) * Timedelta(days=self.day_of_month - 1).value
 
 
-class CustomBusinessMonthEnd(BusinessMixin, MonthOffset):
-    """
-    DateOffset subclass representing one custom business month, incrementing
-    between end of month dates
-
-    Parameters
-    ----------
-    n : int, default 1
-    offset : timedelta, default timedelta(0)
-    normalize : bool, default False
-        Normalize start/end dates to midnight before generating date range
-    weekmask : str, Default 'Mon Tue Wed Thu Fri'
-        weekmask of valid business days, passed to ``numpy.busdaycalendar``
-    holidays : list
-        list/array of dates to exclude from the set of valid business days,
-        passed to ``numpy.busdaycalendar``
-    calendar : pd.HolidayCalendar or np.busdaycalendar
-    """
-
-    _cacheable = False
-    _prefix = 'CBM'
-
-    onOffset = DateOffset.onOffset  # override MonthOffset method
-
-    def __init__(self, n=1, normalize=False, weekmask='Mon Tue Wed Thu Fri',
-                 holidays=None, calendar=None, offset=timedelta(0)):
-        self.n = self._validate_n(n)
-        self.normalize = normalize
-        self._offset = offset
-        self.kwds = {}
-
-        calendar, holidays = _get_calendar(weekmask=weekmask,
-                                           holidays=holidays,
-                                           calendar=calendar)
-        self.kwds['weekmask'] = self.weekmask = weekmask
-        self.kwds['holidays'] = self.holidays = holidays
-        self.kwds['calendar'] = self.calendar = calendar
-        self.kwds['offset'] = offset
-
-    @cache_readonly
-    def cbday(self):
-        kwds = self.kwds
-        return CustomBusinessDay(n=self.n, normalize=self.normalize, **kwds)
-
-    @cache_readonly
-    def m_offset(self):
-        kwds = self.kwds
-        kwds = {key: kwds[key] for key in kwds
-                if key not in ['calendar', 'weekmask', 'holidays', 'offset']}
-        return MonthEnd(n=1, normalize=self.normalize, **kwds)
-
-    @apply_wraps
-    def apply(self, other):
-        n = self.n
-        # First move to month offset
-        cur_mend = self.m_offset.rollforward(other)
-        # Find this custom month offset
-        cur_cmend = self.cbday.rollback(cur_mend)
-
-        # handle zero case. arbitrarily rollforward
-        if n == 0 and other != cur_cmend:
-            n += 1
-
-        if other < cur_cmend and n >= 1:
-            n -= 1
-        elif other > cur_cmend and n <= -1:
-            n += 1
-
-        new = cur_mend + n * self.m_offset
-        result = self.cbday.rollback(new)
-        return result
-
-
-class CustomBusinessMonthBegin(BusinessMixin, MonthOffset):
-    """
-    DateOffset subclass representing one custom business month, incrementing
-    between beginning of month dates
-
-    Parameters
-    ----------
-    n : int, default 1
-    offset : timedelta, default timedelta(0)
-    normalize : bool, default False
-        Normalize start/end dates to midnight before generating date range
-    weekmask : str, Default 'Mon Tue Wed Thu Fri'
-        weekmask of valid business days, passed to ``numpy.busdaycalendar``
-    holidays : list
-        list/array of dates to exclude from the set of valid business days,
-        passed to ``numpy.busdaycalendar``
-    calendar : pd.HolidayCalendar or np.busdaycalendar
-    """
-
-    _cacheable = False
-    _prefix = 'CBMS'
-
-    onOffset = DateOffset.onOffset  # override MonthOffset method
-
-    def __init__(self, n=1, normalize=False, weekmask='Mon Tue Wed Thu Fri',
-                 holidays=None, calendar=None, offset=timedelta(0)):
-        self.n = self._validate_n(n)
-        self.normalize = normalize
-        self._offset = offset
-        self.kwds = {}
-
-        # _get_calendar does validation and possible transformation
-        # of calendar and holidays.
-        calendar, holidays = _get_calendar(weekmask=weekmask,
-                                           holidays=holidays,
-                                           calendar=calendar)
-        self.kwds['calendar'] = self.calendar = calendar
-        self.kwds['weekmask'] = self.weekmask = weekmask
-        self.kwds['holidays'] = self.holidays = holidays
-        self.kwds['offset'] = offset
-
-    @cache_readonly
-    def cbday(self):
-        kwds = self.kwds
-        return CustomBusinessDay(n=self.n, normalize=self.normalize, **kwds)
-
-    @cache_readonly
-    def m_offset(self):
-        kwds = self.kwds
-        kwds = {key: kwds[key] for key in kwds
-                if key not in ['calendar', 'weekmask', 'holidays', 'offset']}
-        return MonthBegin(n=1, normalize=self.normalize, **kwds)
-
-    @apply_wraps
-    def apply(self, other):
-        n = self.n
-        dt_in = other
-        # First move to month offset
-        cur_mbegin = self.m_offset.rollback(dt_in)
-        # Find this custom month offset
-        cur_cmbegin = self.cbday.rollforward(cur_mbegin)
-
-        # handle zero case. arbitrarily rollforward
-        if n == 0 and dt_in != cur_cmbegin:
-            n += 1
-
-        if dt_in > cur_cmbegin and n <= -1:
-            n += 1
-        elif dt_in < cur_cmbegin and n >= 1:
-            n -= 1
-
-        new = cur_mbegin + n * self.m_offset
-        result = self.cbday.rollforward(new)
-        return result
-
-
 # ---------------------------------------------------------------------
 # Week-Based Offset Classes
 
