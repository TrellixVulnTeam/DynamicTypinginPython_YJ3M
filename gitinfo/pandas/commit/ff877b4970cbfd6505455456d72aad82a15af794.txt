commit ff877b4970cbfd6505455456d72aad82a15af794
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Nov 16 14:26:15 2011 -0500

    ENH: use series name as the column name if passed to DataFrame constructor, GH #373

diff --git a/RELEASE.rst b/RELEASE.rst
index ad739f637..2056916f8 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -63,6 +63,8 @@ pandas 0.5.1
     index labels achieving maximum and minimum values (PR #286)
   - Add `read_clipboard` function for parsing DataFrame from OS clipboard,
     should work across platforms (GH #300)
+  - Add `nunique` function to Series for counting unique elements (GH #297)
+  - DataFrame constructor will use Series name if no columns passed (GH #373)
 
 **Improvements to existing features**
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 4451cfa47..0fa72d5ca 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -238,6 +238,10 @@ class DataFrame(NDFrame):
 
     def _init_ndarray(self, values, index, columns, dtype=None,
                       copy=False):
+        if isinstance(values, Series) and values.name is not None:
+            if columns is None:
+                columns = [values.name]
+
         values = _prep_ndarray(values, copy=copy)
 
         if dtype is not None:
diff --git a/pandas/src/cppsandbox.pyx b/pandas/src/cppsandbox.pyx
index 4a0f8981c..0210f6d56 100644
--- a/pandas/src/cppsandbox.pyx
+++ b/pandas/src/cppsandbox.pyx
@@ -13,5 +13,3 @@ def map_indices(ndarray[i4] values):
     n = len(values)
     for i in range(n):
         mapping[i] = values[i]
-
-
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index eb25ed949..951f1bbfd 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1143,6 +1143,11 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         expected = self.mixed_frame.sort_index()
         assert_frame_equal(recons, expected)
 
+    def test_constructor_Series_named(self):
+        a = Series([1,2,3], index=['a','b','c'], name='x')
+        df = DataFrame(a)
+        self.assert_(df.columns[0] == 'x')
+
     def test_astype(self):
         casted = self.frame.astype(int)
         expected = DataFrame(self.frame.values.astype(int),
