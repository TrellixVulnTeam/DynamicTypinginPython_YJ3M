commit 86d34554d7802109541580d52850358e44777551
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Aug 22 18:01:11 2011 -0400

    TST: Series test coverage

diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 543d517e5..50046f192 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -43,6 +43,11 @@ class _SeriesIndexer(object):
                 return series[key]
 
             def do_list_like():
+                if isinstance(series.index, MultiIndex):
+                    try:
+                        return series[key]
+                    except (KeyError, TypeError, IndexError):
+                        pass
                 return series.reindex(key)
         else:
             def do_default():
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 5daa4481e..5dbf31221 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -287,14 +287,10 @@ class Series(np.ndarray, PandasObject):
             key = np.asarray(key, dtype=bool)
             return _index_with(key)
 
-        # TODO: [slice(0, 5, None)] will break if you convert to ndarray,
+        # [slice(0, 5, None)] will break if you convert to ndarray,
         # e.g. as requested by np.median
 
-        try:
-            return _index_with(key)
-        except Exception:
-            key = np.asarray(key)
-            return _index_with(key)
+        return _index_with(key)
 
     def _multilevel_index(self, key):
         values = self.values
@@ -310,7 +306,7 @@ class Series(np.ndarray, PandasObject):
         except KeyError:
             if isinstance(key, (int, np.integer)):
                 return values[key]
-            raise Exception('Requested index not in this series!')
+            raise KeyError('%s not in this series!' % str(key))
 
     def get(self, key, default=None):
         """
@@ -358,7 +354,7 @@ class Series(np.ndarray, PandasObject):
             if isinstance(key, (int, np.integer)):
                 values[key] = value
                 return
-            raise Exception('Requested index not in this series!')
+            raise KeyError('%s not in this series!' % str(key))
         except TypeError:
             # Could not hash item
             pass
@@ -1551,7 +1547,7 @@ class _Unstacker(object):
         self.values = values
         self.value_columns = value_columns
 
-        if value_columns is None and values.shape[1] != 1:
+        if value_columns is None and values.shape[1] != 1: # pragma: no cover
             raise ValueError('must pass column labels for multi-column data')
 
         self.index = index
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index 5d6836ac7..38945746c 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -18,10 +18,7 @@ from pandas.util.testing import (assert_almost_equal,
 
 import pandas.util.testing as tm
 
-class TestSeriesMultiLevel(unittest.TestCase):
-    pass
-
-class TestDataFrameMultiLevel(unittest.TestCase):
+class TestMultiLevel(unittest.TestCase):
 
     def setUp(self):
         index = MultiIndex(levels=[['foo', 'bar', 'baz', 'qux'],
@@ -73,6 +70,41 @@ class TestDataFrameMultiLevel(unittest.TestCase):
         self.assertRaises(KeyError, df.__getitem__, ('foo', 'four'))
         self.assertRaises(KeyError, df.__getitem__, 'foobar')
 
+    def test_series_getitem(self):
+        s = self.ymd['A']
+
+        result = s[2000, 3]
+        result2 = s.ix[2000, 3]
+        expected = s[42:65]
+        expected.index = expected.index.droplevel(0).droplevel(0)
+        assert_series_equal(result, expected)
+
+        result = s[2000, 3, 10]
+        expected = s[49]
+        self.assertEquals(result, expected)
+
+        # fancy
+        result = s.ix[[(2000, 3, 10), (2000, 3, 13)]]
+        expected = s[49:51]
+        assert_series_equal(result, expected)
+
+        # key error
+        self.assertRaises(KeyError, s.__getitem__, (2000, 3, 4))
+
+    def test_series_setitem(self):
+        s = self.ymd['A']
+
+        s[2000, 3] = np.nan
+        self.assert_(isnull(s[42:65]).all())
+        self.assert_(notnull(s[:42]).all())
+        self.assert_(notnull(s[65:]).all())
+
+        s[2000, 3, 10] = np.nan
+        self.assert_(isnull(s[49]))
+
+    def test_series_slice_partial(self):
+        pass
+
     def test_xs(self):
         xs = self.frame.xs(('bar', 'two'))
         xs2 = self.frame.ix[('bar', 'two')]
@@ -148,6 +180,11 @@ class TestDataFrameMultiLevel(unittest.TestCase):
 
         # axis=1
 
+        # series
+        a_sorted = self.frame['A'].sortlevel(0)
+        self.assertRaises(Exception,
+                          self.frame.delevel()['A'].sortlevel)
+
     def test_sortlevel_mixed(self):
         sorted_before = self.frame.sortlevel(1)
 
@@ -180,6 +217,11 @@ class TestDataFrameMultiLevel(unittest.TestCase):
         df = tm.makeTimeDataFrame()
         self.assertRaises(Exception, df.count, level=0)
 
+    def test_unstack(self):
+        # just check that it works for now
+        unstacked = self.ymd.unstack()
+        unstacked2 = unstacked.unstack()
+
     def test_alignment(self):
         pass
 
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 9292ae869..a8d748ef7 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -63,6 +63,9 @@ class TestSeries(unittest.TestCase):
         s = Series(objs, index=[0, 1])
         self.assert_(isinstance(s, Series))
 
+    def test_constructor_cast(self):
+        self.assertRaises(ValueError, Series, ['a', 'b', 'c'], dtype=float)
+
     def test_fromDict(self):
         data = {'a' : 0, 'b' : 1, 'c' : 2, 'd' : 3}
 
@@ -385,6 +388,11 @@ class TestSeries(unittest.TestCase):
         self.assert_(np.isnan(allna.std()))
         self.assert_(np.isnan(allna.skew()))
 
+    def test_prod_numpy16_bug(self):
+        s = Series([1., 1., 1.] , index=range(3))
+        result = s.prod()
+        self.assert_(not isinstance(result, Series))
+
     def test_quantile(self):
         from scipy.stats import scoreatpercentile
 
