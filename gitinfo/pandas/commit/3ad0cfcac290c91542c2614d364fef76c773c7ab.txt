commit 3ad0cfcac290c91542c2614d364fef76c773c7ab
Author: Simon Hawkins <simonjayhawkins@gmail.com>
Date:   Wed Jan 2 14:18:29 2019 +0000

    BUG: (row) Index Name with to_html(header=False) is not displayed (#24547)

diff --git a/doc/source/whatsnew/v0.24.0.rst b/doc/source/whatsnew/v0.24.0.rst
index ec3779e8f..e770a9e3c 100644
--- a/doc/source/whatsnew/v0.24.0.rst
+++ b/doc/source/whatsnew/v0.24.0.rst
@@ -1600,6 +1600,7 @@ Notice how we now instead output ``np.nan`` itself instead of a stringified form
 - Bug in :func:`to_html()` with ``index=False`` misses truncation indicators (...) on truncated DataFrame (:issue:`15019`, :issue:`22783`)
 - Bug in :func:`to_html()` with ``index=False`` when both columns and row index are ``MultiIndex`` (:issue:`22579`)
 - Bug in :func:`to_html()` with ``index_names=False`` displaying index name (:issue:`22747`)
+- Bug in :func:`to_html()` with ``header=False`` not displaying row index names (:issue:`23788`)
 - Bug in :func:`DataFrame.to_string()` that broke column alignment when ``index=False`` and width of first column's values is greater than the width of first column's header (:issue:`16839`, :issue:`13032`)
 - Bug in :func:`DataFrame.to_string()` that caused representations of :class:`DataFrame` to not take up the whole window (:issue:`22984`)
 - Bug in :func:`DataFrame.to_csv` where a single level MultiIndex incorrectly wrote a tuple. Now just the value of the index is written (:issue:`19589`).
diff --git a/pandas/io/formats/html.py b/pandas/io/formats/html.py
index eb11dd461..58f5364f2 100644
--- a/pandas/io/formats/html.py
+++ b/pandas/io/formats/html.py
@@ -43,6 +43,12 @@ class HTMLFormatter(TableFormatter):
         self.table_id = table_id
         self.render_links = render_links
 
+    @property
+    def show_row_idx_names(self):
+        return all((self.fmt.has_index_names,
+                    self.fmt.index,
+                    self.fmt.show_index_names))
+
     @property
     def show_col_idx_names(self):
         # see gh-22579
@@ -165,9 +171,7 @@ class HTMLFormatter(TableFormatter):
             element_props.append(('thead tr th',
                                   'text-align',
                                   'left'))
-            if all((self.fmt.has_index_names,
-                    self.fmt.index,
-                    self.fmt.show_index_names)):
+            if self.show_row_idx_names:
                 element_props.append(('thead tr:last-of-type th',
                                       'text-align',
                                       'right'))
@@ -228,17 +232,8 @@ class HTMLFormatter(TableFormatter):
 
         buffer_put_lines(buf, self.elements)
 
-    def _write_header(self, indent):
+    def _write_col_header(self, indent):
         truncate_h = self.fmt.truncate_h
-
-        if not self.fmt.header:
-            # write nothing
-            return indent
-
-        self.write('<thead>', indent)
-
-        indent += self.indent_delta
-
         if isinstance(self.columns, ABCMultiIndex):
             template = 'colspan="{span:d}" halign="left"'
 
@@ -357,12 +352,25 @@ class HTMLFormatter(TableFormatter):
             self.write_tr(row, indent, self.indent_delta, header=True,
                           align=align)
 
-        if all((self.fmt.has_index_names,
-                self.fmt.index,
-                self.fmt.show_index_names)):
-            row = ([x if x is not None else '' for x in self.frame.index.names]
-                   + [''] * (self.ncols + (1 if truncate_h else 0)))
-            self.write_tr(row, indent, self.indent_delta, header=True)
+    def _write_row_header(self, indent):
+        truncate_h = self.fmt.truncate_h
+        row = ([x if x is not None else '' for x in self.frame.index.names]
+               + [''] * (self.ncols + (1 if truncate_h else 0)))
+        self.write_tr(row, indent, self.indent_delta, header=True)
+
+    def _write_header(self, indent):
+        if not (self.fmt.header or self.show_row_idx_names):
+            # write nothing
+            return indent
+
+        self.write('<thead>', indent)
+        indent += self.indent_delta
+
+        if self.fmt.header:
+            self._write_col_header(indent)
+
+        if self.show_row_idx_names:
+            self._write_row_header(indent)
 
         indent -= self.indent_delta
         self.write('</thead>', indent)
diff --git a/pandas/tests/io/formats/data/html/index_named_multi_columns_none.html b/pandas/tests/io/formats/data/html/index_named_multi_columns_none.html
new file mode 100644
index 000000000..8c41d2e29
--- /dev/null
+++ b/pandas/tests/io/formats/data/html/index_named_multi_columns_none.html
@@ -0,0 +1,23 @@
+<table border="1" class="dataframe">
+  <thead>
+    <tr>
+      <th>index.name.0</th>
+      <th>index.name.1</th>
+      <th></th>
+      <th></th>
+    </tr>
+  </thead>
+  <tbody>
+    <tr>
+      <th rowspan="2" valign="top">a</th>
+      <th>b</th>
+      <td>0</td>
+      <td>0</td>
+    </tr>
+    <tr>
+      <th>c</th>
+      <td>0</td>
+      <td>0</td>
+    </tr>
+  </tbody>
+</table>
diff --git a/pandas/tests/io/formats/data/html/index_named_standard_columns_none.html b/pandas/tests/io/formats/data/html/index_named_standard_columns_none.html
new file mode 100644
index 000000000..432d8e06d
--- /dev/null
+++ b/pandas/tests/io/formats/data/html/index_named_standard_columns_none.html
@@ -0,0 +1,21 @@
+<table border="1" class="dataframe">
+  <thead>
+    <tr>
+      <th>index.name</th>
+      <th></th>
+      <th></th>
+    </tr>
+  </thead>
+  <tbody>
+    <tr>
+      <th>0</th>
+      <td>0</td>
+      <td>0</td>
+    </tr>
+    <tr>
+      <th>1</th>
+      <td>0</td>
+      <td>0</td>
+    </tr>
+  </tbody>
+</table>
diff --git a/pandas/tests/io/formats/data/html/index_unnamed_multi_columns_none.html b/pandas/tests/io/formats/data/html/index_unnamed_multi_columns_none.html
new file mode 100644
index 000000000..81da7c361
--- /dev/null
+++ b/pandas/tests/io/formats/data/html/index_unnamed_multi_columns_none.html
@@ -0,0 +1,15 @@
+<table border="1" class="dataframe">
+  <tbody>
+    <tr>
+      <th rowspan="2" valign="top">a</th>
+      <th>b</th>
+      <td>0</td>
+      <td>0</td>
+    </tr>
+    <tr>
+      <th>c</th>
+      <td>0</td>
+      <td>0</td>
+    </tr>
+  </tbody>
+</table>
diff --git a/pandas/tests/io/formats/data/html/index_unnamed_standard_columns_none.html b/pandas/tests/io/formats/data/html/index_unnamed_standard_columns_none.html
new file mode 100644
index 000000000..3d958afe4
--- /dev/null
+++ b/pandas/tests/io/formats/data/html/index_unnamed_standard_columns_none.html
@@ -0,0 +1,14 @@
+<table border="1" class="dataframe">
+  <tbody>
+    <tr>
+      <th>0</th>
+      <td>0</td>
+      <td>0</td>
+    </tr>
+    <tr>
+      <th>1</th>
+      <td>0</td>
+      <td>0</td>
+    </tr>
+  </tbody>
+</table>
diff --git a/pandas/tests/io/formats/data/html/trunc_df_index_named_multi_columns_none.html b/pandas/tests/io/formats/data/html/trunc_df_index_named_multi_columns_none.html
new file mode 100644
index 000000000..0f262495b
--- /dev/null
+++ b/pandas/tests/io/formats/data/html/trunc_df_index_named_multi_columns_none.html
@@ -0,0 +1,62 @@
+<table border="1" class="dataframe">
+  <thead>
+    <tr>
+      <th>foo</th>
+      <th></th>
+      <th>baz</th>
+      <th></th>
+      <th></th>
+      <th></th>
+      <th></th>
+      <th></th>
+    </tr>
+  </thead>
+  <tbody>
+    <tr>
+      <th rowspan="2" valign="top">a</th>
+      <th rowspan="2" valign="top">c</th>
+      <th>e</th>
+      <td>0</td>
+      <td>1</td>
+      <td>...</td>
+      <td>6</td>
+      <td>7</td>
+    </tr>
+    <tr>
+      <th>f</th>
+      <td>8</td>
+      <td>9</td>
+      <td>...</td>
+      <td>14</td>
+      <td>15</td>
+    </tr>
+    <tr>
+      <th>...</th>
+      <th>...</th>
+      <th>...</th>
+      <td>...</td>
+      <td>...</td>
+      <td>...</td>
+      <td>...</td>
+      <td>...</td>
+    </tr>
+    <tr>
+      <th rowspan="2" valign="top">b</th>
+      <th rowspan="2" valign="top">d</th>
+      <th>e</th>
+      <td>48</td>
+      <td>49</td>
+      <td>...</td>
+      <td>54</td>
+      <td>55</td>
+    </tr>
+    <tr>
+      <th>f</th>
+      <td>56</td>
+      <td>57</td>
+      <td>...</td>
+      <td>62</td>
+      <td>63</td>
+    </tr>
+  </tbody>
+</table>
diff --git a/pandas/tests/io/formats/data/html/trunc_df_index_named_standard_columns_none.html b/pandas/tests/io/formats/data/html/trunc_df_index_named_standard_columns_none.html
new file mode 100644
index 000000000..d294a507d
--- /dev/null
+++ b/pandas/tests/io/formats/data/html/trunc_df_index_named_standard_columns_none.html
@@ -0,0 +1,54 @@
+<table border="1" class="dataframe">
+  <thead>
+    <tr>
+      <th>index.name</th>
+      <th></th>
+      <th></th>
+      <th></th>
+      <th></th>
+      <th></th>
+    </tr>
+  </thead>
+  <tbody>
+    <tr>
+      <th>0</th>
+      <td>0</td>
+      <td>1</td>
+      <td>...</td>
+      <td>6</td>
+      <td>7</td>
+    </tr>
+    <tr>
+      <th>1</th>
+      <td>8</td>
+      <td>9</td>
+      <td>...</td>
+      <td>14</td>
+      <td>15</td>
+    </tr>
+    <tr>
+      <th>...</th>
+      <td>...</td>
+      <td>...</td>
+      <td>...</td>
+      <td>...</td>
+      <td>...</td>
+    </tr>
+    <tr>
+      <th>6</th>
+      <td>48</td>
+      <td>49</td>
+      <td>...</td>
+      <td>54</td>
+      <td>55</td>
+    </tr>
+    <tr>
+      <th>7</th>
+      <td>56</td>
+      <td>57</td>
+      <td>...</td>
+      <td>62</td>
+      <td>63</td>
+    </tr>
+  </tbody>
+</table>
diff --git a/pandas/tests/io/formats/test_to_html.py b/pandas/tests/io/formats/test_to_html.py
index 213eb0d5b..d333330c1 100644
--- a/pandas/tests/io/formats/test_to_html.py
+++ b/pandas/tests/io/formats/test_to_html.py
@@ -429,6 +429,7 @@ class TestToHTML(object):
         assert result == expected
 
     @pytest.mark.parametrize('index_names', [True, False])
+    @pytest.mark.parametrize('header', [True, False])
     @pytest.mark.parametrize('index', [True, False])
     @pytest.mark.parametrize('column_index, column_type', [
         (Index([0, 1]), 'unnamed_standard'),
@@ -448,18 +449,21 @@ class TestToHTML(object):
     ])
     def test_to_html_basic_alignment(
             self, datapath, row_index, row_type, column_index, column_type,
-            index, index_names):
+            index, header, index_names):
         # GH 22747, GH 22579
         df = DataFrame(np.zeros((2, 2), dtype=int),
                        index=row_index, columns=column_index)
-        result = df.to_html(index=index, index_names=index_names)
+        result = df.to_html(
+            index=index, header=header, index_names=index_names)
 
         if not index:
             row_type = 'none'
         elif not index_names and row_type.startswith('named'):
             row_type = 'un' + row_type
 
-        if not index_names and column_type.startswith('named'):
+        if not header:
+            column_type = 'none'
+        elif not index_names and column_type.startswith('named'):
             column_type = 'un' + column_type
 
         filename = 'index_' + row_type + '_columns_' + column_type
@@ -467,6 +471,7 @@ class TestToHTML(object):
         assert result == expected
 
     @pytest.mark.parametrize('index_names', [True, False])
+    @pytest.mark.parametrize('header', [True, False])
     @pytest.mark.parametrize('index', [True, False])
     @pytest.mark.parametrize('column_index, column_type', [
         (Index(np.arange(8)), 'unnamed_standard'),
@@ -488,19 +493,22 @@ class TestToHTML(object):
     ])
     def test_to_html_alignment_with_truncation(
             self, datapath, row_index, row_type, column_index, column_type,
-            index, index_names):
+            index, header, index_names):
         # GH 22747, GH 22579
         df = DataFrame(np.arange(64).reshape(8, 8),
                        index=row_index, columns=column_index)
-        result = df.to_html(max_rows=4, max_cols=4,
-                            index=index, index_names=index_names)
+        result = df.to_html(
+            max_rows=4, max_cols=4,
+            index=index, header=header, index_names=index_names)
 
         if not index:
             row_type = 'none'
         elif not index_names and row_type.startswith('named'):
             row_type = 'un' + row_type
 
-        if not index_names and column_type.startswith('named'):
+        if not header:
+            column_type = 'none'
+        elif not index_names and column_type.startswith('named'):
             column_type = 'un' + column_type
 
         filename = 'trunc_df_index_' + row_type + '_columns_' + column_type
