commit 2ed182e41d059c21fab5de832da9bfcbc5bbe1fb
Author: peadarcoyle <peadarcoyle@googlemail.com>
Date:   Mon Oct 27 23:33:26 2014 +0100

    Updating tests file Cleaning up

diff --git a/doc/source/whatsnew/v0.15.2.txt b/doc/source/whatsnew/v0.15.2.txt
index 929471acb..fd73501ee 100644
--- a/doc/source/whatsnew/v0.15.2.txt
+++ b/doc/source/whatsnew/v0.15.2.txt
@@ -90,6 +90,7 @@ Experimental
 
 Bug Fixes
 ~~~~~~~~~
+- Report a ``TypeError`` when invalid/no paramaters are passed in a groupby (:issue:`8015`)
 - Bug in packaging pandas with ``py2app/cx_Freeze`` (:issue:`8602`, :issue:`8831`)
 - Bug in ``groupby`` signatures that didn't include \*args or \*\*kwargs (:issue:`8733`).
 - ``io.data.Options`` now raises ``RemoteDataError`` when no expiry dates are available from Yahoo and when it receives no data from Yahoo (:issue:`8761`), (:issue:`8783`).
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 52f37ee24..059cdff89 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -2875,10 +2875,12 @@ class NDFrame(PandasObject):
         GroupBy object
 
         """
-
         from pandas.core.groupby import groupby
+
+        if level is None and by is None:
+            raise TypeError("You have to supply one of 'by' and 'level'")
         axis = self._get_axis_number(axis)
-        return groupby(self, by, axis=axis, level=level, as_index=as_index,
+        return groupby(self, by=by, axis=axis, level=level, as_index=as_index,
                        sort=sort, group_keys=group_keys, squeeze=squeeze)
 
     def asfreq(self, freq, method=None, how=None, normalize=False):
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index ef3fc03fc..bf24eda60 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -1961,6 +1961,9 @@ class TestGroupBy(tm.TestCase):
         # raise exception for non-MultiIndex
         self.assertRaises(ValueError, self.df.groupby, level=1)
 
+
+
+
     def test_groupby_level_index_names(self):
         ## GH4014 this used to raise ValueError since 'exp'>1 (in py2)
         df = DataFrame({'exp' : ['A']*3 + ['B']*3, 'var1' : lrange(6),}).set_index('exp')
@@ -1999,6 +2002,17 @@ class TestGroupBy(tm.TestCase):
         result = frame['A'].groupby(level=0).count()
         self.assertEqual(result.index.name, 'first')
 
+    def test_groupby_args(self):
+        #PR8618 and issue 8015
+        frame = self.mframe
+        def j():
+             frame.groupby()
+        self.assertRaisesRegexp(TypeError, "You have to supply one of 'by' and 'level'", j)
+
+        def k():
+            frame.groupby(by=None, level=None)
+        self.assertRaisesRegexp(TypeError,  "You have to supply one of 'by' and 'level'", k)
+
     def test_groupby_level_mapper(self):
         frame = self.mframe
         deleveled = frame.reset_index()
@@ -3689,8 +3703,8 @@ class TestGroupBy(tm.TestCase):
         assert_series_equal(expected, sg.cumcount())
 
     def test_cumcount_empty(self):
-        ge = DataFrame().groupby()
-        se = Series().groupby()
+        ge = DataFrame().groupby(level=0)
+        se = Series().groupby(level=0)
 
         e = Series(dtype='int64')  # edge case, as this is usually considered float
 
