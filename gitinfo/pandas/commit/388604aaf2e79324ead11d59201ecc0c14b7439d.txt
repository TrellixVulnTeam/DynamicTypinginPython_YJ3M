commit 388604aaf2e79324ead11d59201ecc0c14b7439d
Author: jreback <jeff@reback.net>
Date:   Thu May 16 07:52:21 2013 -0400

    BUG: fixed platform int issues on 32-bit

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 6bb4b3686..a52c932b3 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -1612,13 +1612,13 @@ def _astype_nansafe(arr, dtype, copy = True):
     if is_datetime64_dtype(arr):
         if dtype == object:
             return tslib.ints_to_pydatetime(arr.view(np.int64))
-        elif issubclass(dtype.type, np.int):
+        elif dtype == np.int64:
             return arr.view(dtype)
         elif dtype != _NS_DTYPE:
             raise TypeError("cannot astype a datetimelike from [%s] to [%s]" % (arr.dtype,dtype))
         return arr.astype(_NS_DTYPE)
     elif is_timedelta64_dtype(arr):
-        if issubclass(dtype.type, np.int):
+        if dtype == np.int64:
             return arr.view(dtype)
         elif dtype == object:
             return arr.astype(object)
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 8b684b621..dd27fa5c3 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -322,6 +322,7 @@ class _NDFrameIndexer(object):
                 keyarr = _asarray_tuplesafe(key)
 
             if _is_integer_dtype(keyarr) and not _is_integer_index(labels):
+                keyarr = com._ensure_platform_int(keyarr)
                 return labels.take(keyarr)
 
             return keyarr
@@ -466,10 +467,11 @@ class _NDFrameIndexer(object):
                 if len(missing):
                     l = np.arange(len(indexer))
 
+                    missing = com._ensure_platform_int(missing)
                     missing_labels = keyarr.take(missing)
-                    missing_labels_indexer = l[~check]
+                    missing_labels_indexer = com._ensure_int64(l[~check])
                     cur_labels = result._get_axis(axis).values
-                    cur_labels_indexer = l[check]
+                    cur_labels_indexer = com._ensure_int64(l[check])
                     new_labels = lib.combine_from_indexers(cur_labels, cur_labels_indexer,
                                                            missing_labels, missing_labels_indexer)
                     result = result.reindex_axis(new_labels,axis=axis)
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 11ede8d75..b988f2985 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -1878,10 +1878,11 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
             self.assertRaises(TypeError, td.astype, 'm8[%s]' % t)
 
         # valid astype
-        td.astype('int')
+        td.astype('int64')
 
         # this is an invalid casting
         self.assertRaises(Exception, Series, [ timedelta(days=i) for i in range(3) ] + [ 'foo' ], dtype='m8[ns]' )
+        self.assertRaises(TypeError, td.astype, 'int32')
 
         # leave as object here
         td = Series([ timedelta(days=i) for i in range(3) ] + [ 'foo' ])
