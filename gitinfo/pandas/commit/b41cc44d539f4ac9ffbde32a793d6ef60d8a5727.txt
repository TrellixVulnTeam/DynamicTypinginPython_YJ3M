commit b41cc44d539f4ac9ffbde32a793d6ef60d8a5727
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Sep 1 14:02:29 2011 -0400

    DOC: release notes reformat

diff --git a/RELEASE.rst b/RELEASE.rst
index 751644a6b..42a3fd0d9 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -100,181 +100,134 @@ Release notes
 
 **Improvements to existing features**
 
-* The 2-dimensional `DataFrame` and `DataMatrix` classes have been extensively
-  redesigned internally into a single class `DataFrame`, preserving where
-  possible their optimal performance characteristics. This should reduce
-  confusion from users about which class to use.
-
-  * Note that under ther hood there is a new essentially "lazy evaluation"
-    scheme within respect to adding columns to DataFrame. During some
-    operations, like-typed blocks will be "consolidated" but not before.
-
-* `DataFrame` accessing columns repeatedly is now significantly faster than
-  `DataMatrix` used to be in 0.3.0 due to an internal Series caching mechanism
-  (which are all views on the underlying data)
-
-* Column ordering for mixed type data is now completely consistent in
-  `DataFrame`. In prior releases, there was inconsistent column ordering in
-  `DataMatrix`
-
-* Improved console / string formatting of DataMatrix with negative numbers
-
-* Improved tabular data parsing functions, `read_table` and `read_csv`:
-
-  * Added `skiprows` and `na_values` arguments to `pandas.io.parsers` functions
-    for more flexible IO
-  * `parseCSV` / `read_csv` functions and others in `pandas.io.parsers` now can
-    take a list of custom NA values, and also a list of rows to skip
-
-* Can slice `DataFrame` and get a view of the data (when homogeneously typed),
-  e.g. frame.xs(idx, copy=False) or frame.ix[idx]
-
-* Many speed optimizations throughout `Series` and `DataFrame`
-
-* Eager evaluation of groups when calling ``groupby`` functions, so if there is
-  an exception with the grouping function it will raised immediately versus
-  sometime later on when the groups are needed
-
-* `datetools.WeekOfMonth` offset can be parameterized with `n` different than 1
-  or -1.
-
-* Statistical methods on DataFrame like `mean`, `std`, `var`, `skew` will now
-  ignore non-numerical data. Before a not very useful error message was
-  generated. A flag `numeric_only` has been added to `DataFrame.sum` and
-  `DataFrame.count` to enable this behavior in those methods if so desired
-  (disabled by default)
-
-* `DataFrame.pivot` generalized to enable pivoting multiple columns into a
-  `WidePanel`
-
-* `DataFrame` constructor can accept structured / record arrays
-
-* `WidePanel` constructor can accept a dict of DataFrame-like objects. Do not
-  need to use `from_dict` anymore (`from_dict` is there to stay, though).
+  * The 2-dimensional `DataFrame` and `DataMatrix` classes have been extensively
+    redesigned internally into a single class `DataFrame`, preserving where
+    possible their optimal performance characteristics. This should reduce
+    confusion from users about which class to use.
+
+    * Note that under ther hood there is a new essentially "lazy evaluation"
+      scheme within respect to adding columns to DataFrame. During some
+      operations, like-typed blocks will be "consolidated" but not before.
+
+  * `DataFrame` accessing columns repeatedly is now significantly faster than
+    `DataMatrix` used to be in 0.3.0 due to an internal Series caching mechanism
+    (which are all views on the underlying data)
+  * Column ordering for mixed type data is now completely consistent in
+    `DataFrame`. In prior releases, there was inconsistent column ordering in
+    `DataMatrix`
+  * Improved console / string formatting of DataMatrix with negative numbers
+  * Improved tabular data parsing functions, `read_table` and `read_csv`:
+
+    * Added `skiprows` and `na_values` arguments to `pandas.io.parsers` functions
+      for more flexible IO
+    * `parseCSV` / `read_csv` functions and others in `pandas.io.parsers` now can
+      take a list of custom NA values, and also a list of rows to skip
+
+  * Can slice `DataFrame` and get a view of the data (when homogeneously typed),
+    e.g. frame.xs(idx, copy=False) or frame.ix[idx]
+  * Many speed optimizations throughout `Series` and `DataFrame`
+  * Eager evaluation of groups when calling ``groupby`` functions, so if there is
+    an exception with the grouping function it will raised immediately versus
+    sometime later on when the groups are needed
+  * `datetools.WeekOfMonth` offset can be parameterized with `n` different than 1
+    or -1.
+  * Statistical methods on DataFrame like `mean`, `std`, `var`, `skew` will now
+    ignore non-numerical data. Before a not very useful error message was
+    generated. A flag `numeric_only` has been added to `DataFrame.sum` and
+    `DataFrame.count` to enable this behavior in those methods if so desired
+    (disabled by default)
+  * `DataFrame.pivot` generalized to enable pivoting multiple columns into a
+    `WidePanel`
+  * `DataFrame` constructor can accept structured / record arrays
+  * `WidePanel` constructor can accept a dict of DataFrame-like objects. Do not
+    need to use `from_dict` anymore (`from_dict` is there to stay, though).
 
 **API Changes**
 
-* The `DataMatrix` variable now refers to `DataFrame`, will be removed within
-  two releases
-
-* Cython is now required to build `pandas` from a development branch. This was
-  done to avoid continuing to check in cythonized C files into source
-  control. Builds from released source distributions will not require Cython
-
-* Cython code has been moved up to a top level `pandas/src` directory. Cython
-  extension modules have been renamed and promoted from the `lib` subpackage to
-  the top level, i.e.
-
-  * `pandas.lib.tseries` -> `pandas._tseries`
-  * `pandas.lib.sparse` -> `pandas._sparse`
-
-* `DataFrame` pickling format has changed. Backwards compatibility for legacy
-  pickles is provided, but it's recommended to consider PyTables-based
-  `HDFStore` for storing data with a longer expected shelf life
-
-* A `copy` argument has been added to the `DataFrame` constructor to avoid
-  unnecessary copying of data. Data is no longer copied by default when passed
-  into the constructor
-
-* Handling of boolean dtype in `DataFrame` has been improved to support storage
-  of boolean data with NA / NaN values. Before it was being converted to float64
-  so this should not (in theory) cause API breakage
-
-* To optimize performance, Index objects now only check that their labels are
-  unique when uniqueness matters (i.e. when someone goes to perform a
-  lookup). This is a potentially dangerous tradeoff, but will lead to much
-  better performance in many places (like groupby).
-
-* Boolean indexing using Series must now have the same indices (labels)
-
-* Backwards compatibility support for begin/end/nPeriods keyword arguments in
-  DateRange class has been removed
-
-* More intuitive / shorter filling aliases `ffill` (for `pad`) and `bfill` (for
-  `backfill`) have been added to the functions that use them: `reindex`,
-  `asfreq`, `fillna`.
-
-* `pandas.core.mixins` code moved to `pandas.core.generic`
-
-* `buffer` keyword arguments (e.g. `DataFrame.toString`) renamed to `buf` to
-  avoid using Python built-in name
-
-* `DataFrame.rows()` removed (use `DataFrame.index`)
-
-* Added deprecation warning to `DataFrame.cols()`, to be removed in next release
-
-* `DataFrame` deprecations and de-camelCasing: `merge`, `asMatrix`,
-  `toDataMatrix`, `_firstTimeWithValue`, `_lastTimeWithValue`, `toRecords`,
-  `fromRecords`, `tgroupby`, `toString`
-
-* `pandas.io.parsers` method deprecations
-
-  * `parseCSV` is now `read_csv` and keyword arguments have been de-camelCased
-  * `parseText` is now `read_table`
-  * `parseExcel` is replaced by the `ExcelFile` class and its `parse` method
-
-* `fillMethod` arguments (deprecated in prior release) removed, should be
-  replaced with `method`
-
-* `Series.fill`, `DataFrame.fill`, and `WidePanel.fill` removed, use `fillna`
-  instead
-
-* `groupby` functions now exclude NA / NaN values from the list of groups. This
-  matches R behavior with NAs in factors e.g. with the `tapply` function
-
-* Removed `parseText`, `parseCSV` and `parseExcel` from pandas namespace
-
-* `Series.combineFunc` renamed to `Series.combine` and made a bit more general
-  with a `fill_value` keyword argument defaulting to NaN
-
-* Removed `pandas.core.pytools` module. Code has been moved to
-  `pandas.core.common`
-
-* Tacked on `groupName` attribute for groups in GroupBy renamed to `name`
-
-* WidePanel/LongPanel `dims` attribute renamed to `shape` to be more conformant
-
-* Slicing a `Series` returns a view now
-
-* More Series deprecations / renaming: `toCSV` to `to_csv`, `asOf` to `asof`,
-  `merge` to `map`, `applymap` to `apply`, `toDict` to `to_dict`,
-  `combineFirst` to `combine_first`. Will print `FutureWarning`.
+  * The `DataMatrix` variable now refers to `DataFrame`, will be removed within
+    two releases
+  * Cython is now required to build `pandas` from a development branch. This was
+    done to avoid continuing to check in cythonized C files into source
+    control. Builds from released source distributions will not require Cython
+  * Cython code has been moved up to a top level `pandas/src` directory. Cython
+    extension modules have been renamed and promoted from the `lib` subpackage to
+    the top level, i.e.
+
+    * `pandas.lib.tseries` -> `pandas._tseries`
+    * `pandas.lib.sparse` -> `pandas._sparse`
+
+  * `DataFrame` pickling format has changed. Backwards compatibility for legacy
+    pickles is provided, but it's recommended to consider PyTables-based
+    `HDFStore` for storing data with a longer expected shelf life
+  * A `copy` argument has been added to the `DataFrame` constructor to avoid
+    unnecessary copying of data. Data is no longer copied by default when passed
+    into the constructor
+  * Handling of boolean dtype in `DataFrame` has been improved to support storage
+    of boolean data with NA / NaN values. Before it was being converted to float64
+    so this should not (in theory) cause API breakage
+  * To optimize performance, Index objects now only check that their labels are
+    unique when uniqueness matters (i.e. when someone goes to perform a
+    lookup). This is a potentially dangerous tradeoff, but will lead to much
+    better performance in many places (like groupby).
+  * Boolean indexing using Series must now have the same indices (labels)
+  * Backwards compatibility support for begin/end/nPeriods keyword arguments in
+    DateRange class has been removed
+  * More intuitive / shorter filling aliases `ffill` (for `pad`) and `bfill` (for
+    `backfill`) have been added to the functions that use them: `reindex`,
+    `asfreq`, `fillna`.
+  * `pandas.core.mixins` code moved to `pandas.core.generic`
+  * `buffer` keyword arguments (e.g. `DataFrame.toString`) renamed to `buf` to
+    avoid using Python built-in name
+  * `DataFrame.rows()` removed (use `DataFrame.index`)
+  * Added deprecation warning to `DataFrame.cols()`, to be removed in next release
+  * `DataFrame` deprecations and de-camelCasing: `merge`, `asMatrix`,
+    `toDataMatrix`, `_firstTimeWithValue`, `_lastTimeWithValue`, `toRecords`,
+    `fromRecords`, `tgroupby`, `toString`
+  * `pandas.io.parsers` method deprecations
+
+    * `parseCSV` is now `read_csv` and keyword arguments have been de-camelCased
+    * `parseText` is now `read_table`
+    * `parseExcel` is replaced by the `ExcelFile` class and its `parse` method
+
+  * `fillMethod` arguments (deprecated in prior release) removed, should be
+    replaced with `method`
+  * `Series.fill`, `DataFrame.fill`, and `WidePanel.fill` removed, use `fillna`
+    instead
+  * `groupby` functions now exclude NA / NaN values from the list of groups. This
+    matches R behavior with NAs in factors e.g. with the `tapply` function
+  * Removed `parseText`, `parseCSV` and `parseExcel` from pandas namespace
+  * `Series.combineFunc` renamed to `Series.combine` and made a bit more general
+    with a `fill_value` keyword argument defaulting to NaN
+  * Removed `pandas.core.pytools` module. Code has been moved to
+    `pandas.core.common`
+  * Tacked on `groupName` attribute for groups in GroupBy renamed to `name`
+  * WidePanel/LongPanel `dims` attribute renamed to `shape` to be more conformant
+  * Slicing a `Series` returns a view now
+  * More Series deprecations / renaming: `toCSV` to `to_csv`, `asOf` to `asof`,
+    `merge` to `map`, `applymap` to `apply`, `toDict` to `to_dict`,
+    `combineFirst` to `combine_first`. Will print `FutureWarning`.
 
 **Bug fixes**
 
-* Column ordering in `pandas.io.parsers.parseCSV` will match CSV in the presence
-  of mixed-type data
-
-* Fixed handling of Excel 2003 dates in `pandas.io.parsers`
-
-* `DateRange` caching was happening with high resolution `DateOffset` objects,
-  e.g. `DateOffset(seconds=1)`. This has been fixed
-
-* Fixed __truediv__ issue in `DataFrame`
-
-* Fixed `DataFrame.toCSV` bug preventing IO round trips in some cases
-
-* Fixed bug in `Series.plot` causing matplotlib to barf in exceptional cases
-
-* Disabled `Index` objects from being hashable, like ndarrays
-
-* Added `__ne__` implementation to `Index` so that operations like ts[ts != idx]
-  will work
-
-* Added `__ne__` implementation to `DataFrame`
-
-* Bug / unintuitive result when calling `fillna` on unordered labels
-
-* Bug calling `sum` on boolean DataFrame
-
-* Bug fix when creating a DataFrame from a dict with scalar values
-
-* Series.{sum, mean, std, ...} now return NA/NaN when the whole Series is NA
-
-* NumPy 1.4 through 1.6 compatibility fixes
-
-* Fixed bug in bias correction in `rolling_cov`, was affecting `rolling_corr`
-  too
+  * Column ordering in `pandas.io.parsers.parseCSV` will match CSV in the presence
+    of mixed-type data
+  * Fixed handling of Excel 2003 dates in `pandas.io.parsers`
+  * `DateRange` caching was happening with high resolution `DateOffset` objects,
+    e.g. `DateOffset(seconds=1)`. This has been fixed
+  * Fixed __truediv__ issue in `DataFrame`
+  * Fixed `DataFrame.toCSV` bug preventing IO round trips in some cases
+  * Fixed bug in `Series.plot` causing matplotlib to barf in exceptional cases
+  * Disabled `Index` objects from being hashable, like ndarrays
+  * Added `__ne__` implementation to `Index` so that operations like ts[ts != idx]
+    will work
+  * Added `__ne__` implementation to `DataFrame`
+  * Bug / unintuitive result when calling `fillna` on unordered labels
+  * Bug calling `sum` on boolean DataFrame
+  * Bug fix when creating a DataFrame from a dict with scalar values
+  * Series.{sum, mean, std, ...} now return NA/NaN when the whole Series is NA
+  * NumPy 1.4 through 1.6 compatibility fixes
+  * Fixed bug in bias correction in `rolling_cov`, was affecting `rolling_corr`
+    too
 
 Thanks
 ------
