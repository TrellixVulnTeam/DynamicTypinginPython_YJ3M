commit 245791cfb6d6faf938bf2c102a692909e0804ccf
Author: Jeff Reback <jeff@reback.net>
Date:   Sun Aug 23 09:16:24 2015 -0400

    DEPR: Remove offset and timeRule keywords from Series.tshift/shift, in favor of freq, #4853, #4864

diff --git a/doc/source/whatsnew/v0.17.0.txt b/doc/source/whatsnew/v0.17.0.txt
index c1ff05b7c..150510376 100644
--- a/doc/source/whatsnew/v0.17.0.txt
+++ b/doc/source/whatsnew/v0.17.0.txt
@@ -711,7 +711,7 @@ Removal of prior version deprecations/changes
 - Remove ``table`` keyword in ``HDFStore.put/append``, in favor of using ``format=`` (:issue:`4645`)
 - Remove ``kind`` in ``read_excel/ExcelFile`` as its unused (:issue:`4712`)
 - Remove ``infer_type`` keyword from ``pd.read_html`` as its unused (:issue:`4770`, :issue:`7032`)
-
+- Remove ``offset`` and ``timeRule`` keywords from ``Series.tshift/shift``, in favor of ``freq`` (:issue:`4853`, :issue:`4864`)
 
 .. _whatsnew_0170.performance:
 
diff --git a/pandas/core/datetools.py b/pandas/core/datetools.py
index 6678baac1..28cd97f43 100644
--- a/pandas/core/datetools.py
+++ b/pandas/core/datetools.py
@@ -41,23 +41,3 @@ thisQuarterEnd = QuarterEnd(0)
 isBusinessDay = BDay().onOffset
 isMonthEnd = MonthEnd().onOffset
 isBMonthEnd = BMonthEnd().onOffset
-
-
-def _resolve_offset(freq, kwds):
-    if 'timeRule' in kwds or 'offset' in kwds:
-        offset = kwds.get('offset', None)
-        offset = kwds.get('timeRule', offset)
-        if isinstance(offset, compat.string_types):
-            offset = getOffset(offset)
-        warn = True
-    else:
-        offset = freq
-        warn = False
-
-    if warn:
-        import warnings
-        warnings.warn("'timeRule' and 'offset' parameters are deprecated,"
-                      " please use 'freq' instead",
-                      FutureWarning)
-
-    return offset
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index a9979b4eb..032108266 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2618,9 +2618,9 @@ class DataFrame(NDFrame):
                                              **kwargs)
 
     @Appender(_shared_docs['shift'] % _shared_doc_kwargs)
-    def shift(self, periods=1, freq=None, axis=0, **kwargs):
+    def shift(self, periods=1, freq=None, axis=0):
         return super(DataFrame, self).shift(periods=periods, freq=freq,
-                                            axis=axis, **kwargs)
+                                            axis=axis)
 
     def set_index(self, keys, drop=True, append=False, inplace=False,
                   verify_integrity=False):
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index bc49e9dd7..b08bf45c6 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -3806,15 +3806,15 @@ class NDFrame(PandasObject):
         shifted : %(klass)s
     """)
     @Appender(_shared_docs['shift'] % _shared_doc_kwargs)
-    def shift(self, periods=1, freq=None, axis=0, **kwargs):
+    def shift(self, periods=1, freq=None, axis=0):
         if periods == 0:
             return self
 
         block_axis = self._get_block_manager_axis(axis)
-        if freq is None and not len(kwargs):
+        if freq is None:
             new_data = self._data.shift(periods=periods, axis=block_axis)
         else:
-            return self.tshift(periods, freq, **kwargs)
+            return self.tshift(periods, freq)
 
         return self._constructor(new_data).__finalize__(self)
 
@@ -3854,7 +3854,7 @@ class NDFrame(PandasObject):
 
         return new_obj.__finalize__(self)
 
-    def tshift(self, periods=1, freq=None, axis=0, **kwargs):
+    def tshift(self, periods=1, freq=None, axis=0):
         """
         Shift the time index, using the index's frequency if available
 
@@ -3877,7 +3877,6 @@ class NDFrame(PandasObject):
         -------
         shifted : NDFrame
         """
-        from pandas.core.datetools import _resolve_offset
 
         index = self._get_axis(axis)
         if freq is None:
@@ -3893,24 +3892,22 @@ class NDFrame(PandasObject):
         if periods == 0:
             return self
 
-        offset = _resolve_offset(freq, kwargs)
-
-        if isinstance(offset, string_types):
-            offset = datetools.to_offset(offset)
+        if isinstance(freq, string_types):
+            freq = datetools.to_offset(freq)
 
         block_axis = self._get_block_manager_axis(axis)
         if isinstance(index, PeriodIndex):
-            orig_offset = datetools.to_offset(index.freq)
-            if offset == orig_offset:
+            orig_freq = datetools.to_offset(index.freq)
+            if freq == orig_freq:
                 new_data = self._data.copy()
                 new_data.axes[block_axis] = index.shift(periods)
             else:
                 msg = ('Given freq %s does not match PeriodIndex freq %s' %
-                       (offset.rule_code, orig_offset.rule_code))
+                       (freq.rule_code, orig_freq.rule_code))
                 raise ValueError(msg)
         else:
             new_data = self._data.copy()
-            new_data.axes[block_axis] = index.shift(periods, offset)
+            new_data.axes[block_axis] = index.shift(periods, freq)
 
         return self._constructor(new_data).__finalize__(self)
 
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index bc342d591..8d0f1a874 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -1210,8 +1210,8 @@ class Panel(NDFrame):
 
         return super(Panel, self).slice_shift(periods, axis=axis)
 
-    def tshift(self, periods=1, freq=None, axis='major', **kwds):
-        return super(Panel, self).tshift(periods, freq, axis, **kwds)
+    def tshift(self, periods=1, freq=None, axis='major'):
+        return super(Panel, self).tshift(periods, freq, axis)
 
     def join(self, other, how='left', lsuffix='', rsuffix=''):
         """
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 0c17104bb..185b6d2b7 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -2182,9 +2182,9 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
                                           **kwargs)
 
     @Appender(generic._shared_docs['shift'] % _shared_doc_kwargs)
-    def shift(self, periods=1, freq=None, axis=0, **kwargs):
+    def shift(self, periods=1, freq=None, axis=0):
         return super(Series, self).shift(periods=periods, freq=freq,
-                                         axis=axis, **kwargs)
+                                         axis=axis)
 
     def reindex_axis(self, labels, axis=0, **kwargs):
         """ for compatibility with higher dims """
diff --git a/pandas/sparse/series.py b/pandas/sparse/series.py
index 62d6a3465..420cf5093 100644
--- a/pandas/sparse/series.py
+++ b/pandas/sparse/series.py
@@ -604,13 +604,10 @@ class SparseSeries(Series):
             dense_valid = dense_valid[dense_valid != self.fill_value]
             return dense_valid.to_sparse(fill_value=self.fill_value)
 
-    def shift(self, periods, freq=None, **kwds):
+    def shift(self, periods, freq=None):
         """
         Analogous to Series.shift
         """
-        from pandas.core.datetools import _resolve_offset
-
-        offset = _resolve_offset(freq, kwds)
 
         # no special handling of fill values yet
         if not isnull(self.fill_value):
@@ -622,10 +619,10 @@ class SparseSeries(Series):
         if periods == 0:
             return self.copy()
 
-        if offset is not None:
+        if freq is not None:
             return self._constructor(self.sp_values,
                                      sparse_index=self.sp_index,
-                                     index=self.index.shift(periods, offset),
+                                     index=self.index.shift(periods, freq),
                                      fill_value=self.fill_value).__finalize__(self)
 
         int_index = self.sp_index.to_int_index()
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 6424a190d..a429059c7 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -5385,10 +5385,10 @@ class TestSeries(tm.TestCase, CheckNameIntegration):
         self.assertRaises(ValueError, ps.shift, freq='D')
 
         # legacy support
-        shifted4 = ps.shift(1, timeRule='B')
+        shifted4 = ps.shift(1, freq='B')
         assert_series_equal(shifted2, shifted4)
 
-        shifted5 = ps.shift(1, offset=datetools.bday)
+        shifted5 = ps.shift(1, freq=datetools.bday)
         assert_series_equal(shifted5, shifted4)
 
         # 32-bit taking
