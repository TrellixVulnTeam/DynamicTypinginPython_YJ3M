commit 145a4148015783a3024aa8454271726e30e0deb3
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Tue Mar 24 12:38:43 2020 -0700

    REF: misplaced DataFrame.where tests (#32948)

diff --git a/pandas/tests/frame/indexing/test_where.py b/pandas/tests/frame/indexing/test_where.py
index bbf8ee597..24eb424bd 100644
--- a/pandas/tests/frame/indexing/test_where.py
+++ b/pandas/tests/frame/indexing/test_where.py
@@ -591,3 +591,40 @@ class TestDataFrameIndexingWhere:
         )
         result = df1.where(mask, df2)
         tm.assert_frame_equal(exp, result)
+
+    def test_df_where_change_dtype(self):
+        # GH#16979
+        df = DataFrame(np.arange(2 * 3).reshape(2, 3), columns=list("ABC"))
+        mask = np.array([[True, False, False], [False, False, True]])
+
+        result = df.where(mask)
+        expected = DataFrame(
+            [[0, np.nan, np.nan], [np.nan, np.nan, 5]], columns=list("ABC")
+        )
+
+        tm.assert_frame_equal(result, expected)
+
+    @pytest.mark.parametrize("kwargs", [dict(), dict(other=None)])
+    def test_df_where_with_category(self, kwargs):
+        # GH#16979
+        df = DataFrame(np.arange(2 * 3).reshape(2, 3), columns=list("ABC"))
+        mask = np.array([[True, False, False], [False, False, True]])
+
+        # change type to category
+        df.A = df.A.astype("category")
+        df.B = df.B.astype("category")
+        df.C = df.C.astype("category")
+
+        result = df.where(mask, **kwargs)
+        A = pd.Categorical([0, np.nan], categories=[0, 3])
+        B = pd.Categorical([np.nan, np.nan], categories=[1, 4])
+        C = pd.Categorical([np.nan, 5], categories=[2, 5])
+        expected = DataFrame({"A": A, "B": B, "C": C})
+
+        tm.assert_frame_equal(result, expected)
+
+        # Check Series.where while we're here
+        result = df.A.where(mask[:, 0], **kwargs)
+        expected = Series(A, name="A")
+
+        tm.assert_series_equal(result, expected)
diff --git a/pandas/tests/frame/test_dtypes.py b/pandas/tests/frame/test_dtypes.py
index 323a13a94..2cda4ba16 100644
--- a/pandas/tests/frame/test_dtypes.py
+++ b/pandas/tests/frame/test_dtypes.py
@@ -453,22 +453,6 @@ class TestDataFrameDataTypes:
         expected = concat([a1.astype(dtype), a2.astype(dtype)], axis=1)
         tm.assert_frame_equal(result, expected)
 
-    @pytest.mark.parametrize("kwargs", [dict(), dict(other=None)])
-    def test_df_where_with_category(self, kwargs):
-        # GH 16979
-        df = DataFrame(np.arange(2 * 3).reshape(2, 3), columns=list("ABC"))
-        mask = np.array([[True, False, True], [False, True, True]])
-
-        # change type to category
-        df.A = df.A.astype("category")
-        df.B = df.B.astype("category")
-        df.C = df.C.astype("category")
-
-        result = df.A.where(mask[:, 0], **kwargs)
-        expected = Series(pd.Categorical([0, np.nan], categories=[0, 3]), name="A")
-
-        tm.assert_series_equal(result, expected)
-
     @pytest.mark.parametrize(
         "dtype", [{100: "float64", 200: "uint64"}, "category", "float64"]
     )
@@ -479,31 +463,6 @@ class TestDataFrameDataTypes:
         df = df.astype(dtype)
         tm.assert_index_equal(df.columns, columns)
 
-    def test_df_where_change_dtype(self):
-        # GH 16979
-        df = DataFrame(np.arange(2 * 3).reshape(2, 3), columns=list("ABC"))
-        mask = np.array([[True, False, False], [False, False, True]])
-
-        result = df.where(mask)
-        expected = DataFrame(
-            [[0, np.nan, np.nan], [np.nan, np.nan, 5]], columns=list("ABC")
-        )
-
-        tm.assert_frame_equal(result, expected)
-
-        # change type to category
-        df.A = df.A.astype("category")
-        df.B = df.B.astype("category")
-        df.C = df.C.astype("category")
-
-        result = df.where(mask)
-        A = pd.Categorical([0, np.nan], categories=[0, 3])
-        B = pd.Categorical([np.nan, np.nan], categories=[1, 4])
-        C = pd.Categorical([np.nan, 5], categories=[2, 5])
-        expected = DataFrame({"A": A, "B": B, "C": C})
-
-        tm.assert_frame_equal(result, expected)
-
     @pytest.mark.parametrize("dtype", ["M8", "m8"])
     @pytest.mark.parametrize("unit", ["ns", "us", "ms", "s", "h", "m", "D"])
     def test_astype_from_datetimelike_to_object(self, dtype, unit):
