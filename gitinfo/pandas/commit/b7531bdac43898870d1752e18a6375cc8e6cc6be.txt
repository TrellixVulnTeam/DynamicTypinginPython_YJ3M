commit b7531bdac43898870d1752e18a6375cc8e6cc6be
Author: Phillip Cloud <cpcloud@gmail.com>
Date:   Sun Jan 26 14:14:25 2014 -0500

    TST: add tests for old version of numexpr

diff --git a/pandas/computation/eval.py b/pandas/computation/eval.py
index 163477b25..4cc68ac47 100644
--- a/pandas/computation/eval.py
+++ b/pandas/computation/eval.py
@@ -3,13 +3,11 @@
 """Top level ``eval`` module.
 """
 
-import numbers
-import numpy as np
 
 from pandas.core import common as com
-from pandas.compat import string_types
 from pandas.computation.expr import Expr, _parsers, _ensure_scope
 from pandas.computation.engines import _engines
+from distutils.version import LooseVersion
 
 
 def _check_engine(engine):
@@ -38,7 +36,13 @@ def _check_engine(engine):
             import numexpr
         except ImportError:
             raise ImportError("'numexpr' not found. Cannot use "
-                              "engine='numexpr' if 'numexpr' is not installed")
+                              "engine='numexpr' for query/eval "
+                              "if 'numexpr' is not installed")
+        else:
+            ne_version = numexpr.__version__
+            if ne_version < LooseVersion('2.0'):
+                raise ImportError("'numexpr' version is %s, "
+                                  "must be >= 2.0" % ne_version)
 
 
 def _check_parser(parser):
diff --git a/pandas/computation/expressions.py b/pandas/computation/expressions.py
index 035878e20..b379da9cd 100644
--- a/pandas/computation/expressions.py
+++ b/pandas/computation/expressions.py
@@ -8,10 +8,11 @@ Offer fast expression evaluation through numexpr
 
 import numpy as np
 from pandas.core.common import _values_from_object
+from distutils.version import LooseVersion
 
 try:
     import numexpr as ne
-    _NUMEXPR_INSTALLED = True
+    _NUMEXPR_INSTALLED = ne.__version__ >= LooseVersion('2.0')
 except ImportError:  # pragma: no cover
     _NUMEXPR_INSTALLED = False
 
diff --git a/pandas/computation/tests/test_eval.py b/pandas/computation/tests/test_eval.py
index 6cfb8ac45..3d99ff929 100644
--- a/pandas/computation/tests/test_eval.py
+++ b/pandas/computation/tests/test_eval.py
@@ -2,6 +2,7 @@
 
 import functools
 from itertools import product
+from distutils.version import LooseVersion
 
 import nose
 from nose.tools import assert_raises, assert_true, assert_false, assert_equal
@@ -20,10 +21,11 @@ from pandas.computation import pytables
 from pandas.computation.expressions import _USE_NUMEXPR
 from pandas.computation.engines import _engines
 from pandas.computation.expr import PythonExprVisitor, PandasExprVisitor
-from pandas.computation.ops import (_binary_ops_dict, _unary_ops_dict,
+from pandas.computation.ops import (_binary_ops_dict,
                                     _special_case_arith_ops_syms,
                                     _arith_ops_syms, _bool_ops_syms)
 from pandas.computation.common import NameResolutionError
+
 import pandas.computation.expr as expr
 import pandas.util.testing as tm
 from pandas.util.testing import (assert_frame_equal, randbool,
@@ -1553,6 +1555,33 @@ def test_name_error_exprs():
         yield check_name_error_exprs, engine, parser
 
 
+def check_invalid_numexpr_version(engine, parser):
+    def testit():
+        a, b = 1, 2
+        res = pd.eval('a + b', engine=engine, parser=parser)
+        tm.assert_equal(res, 3)
+
+    if engine == 'numexpr':
+        try:
+            import numexpr as ne
+        except ImportError:
+            raise nose.SkipTest("no numexpr")
+        else:
+            if ne.__version__ < LooseVersion('2.0'):
+                with tm.assertRaisesRegexp(ImportError, "'numexpr' version is "
+                                           ".+, must be >= 2.0"):
+                    testit()
+            else:
+                testit()
+    else:
+        testit()
+
+
+def test_invalid_numexpr_version():
+    for engine, parser in ENGINES_PARSERS:
+        yield check_invalid_numexpr_version, engine, parser
+
+
 if __name__ == '__main__':
     nose.runmodule(argv=[__file__, '-vvs', '-x', '--pdb', '--pdb-failure'],
                    exit=False)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 0e30b6eda..0f259bf4f 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -11,6 +11,7 @@ import nose
 import functools
 import itertools
 from itertools import product
+from distutils.version import LooseVersion
 
 from pandas.compat import(
     map, zip, range, long, lrange, lmap, lzip,
@@ -12019,8 +12020,12 @@ def skip_if_no_ne(engine='numexpr'):
         try:
             import numexpr as ne
         except ImportError:
-            raise nose.SkipTest("cannot query engine numexpr when numexpr not "
-                                "installed")
+            raise nose.SkipTest("cannot query with engine numexpr when "
+                                "numexpr not installed")
+        else:
+            if ne.__version__ < LooseVersion('2.0'):
+                raise nose.SkipTest("numexpr version too low: "
+                                    "%s" % ne.__version__)
 
 
 def skip_if_no_pandas_parser(parser):
