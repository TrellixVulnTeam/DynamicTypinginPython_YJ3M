commit eb7a751fa3396d1e194f319128be7dd4513512b7
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jun 25 18:32:55 2012 -0400

    BUG: repr of pre-1900 datetime64 values in a DataFrame column close #1518

diff --git a/pandas/core/format.py b/pandas/core/format.py
index 59ab7b473..776a0fd80 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -594,19 +594,7 @@ def _format_datetime64(x, tz=None):
         return 'NaT'
 
     stamp = lib.Timestamp(x, tz=tz)
-    base = stamp.strftime('%Y-%m-%d %H:%M:%S')
-
-    fraction = stamp.microsecond * 1000 + stamp.nanosecond
-    digits = 9
-
-    if fraction == 0:
-        return base
-
-    while (fraction % 10) == 0:
-        fraction /= 10
-        digits -= 1
-
-    return base + ('.%%.%id' % digits) % fraction
+    return stamp._repr_base
 
 
 def _make_fixed_width(strings, justify='right'):
diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index 17f35a735..f7e325c4a 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -102,15 +102,7 @@ class Timestamp(_Timestamp):
         return ts_base
 
     def __repr__(self):
-        result = '%d-%.2d-%.2d %.2d:%.2d:%.2d' % (self.year, self.month,
-                                                  self.day, self.hour,
-                                                  self.minute, self.second)
-
-        if self.nanosecond != 0:
-            nanos = self.nanosecond + 1000 * self.microsecond
-            result += '.%.9d' % nanos
-        elif self.microsecond != 0:
-            result += '.%.6d' % self.microsecond
+        result = self._repr_base
 
         try:
             result += self.strftime('%z')
@@ -124,6 +116,20 @@ class Timestamp(_Timestamp):
 
         return '<Timestamp: %s>' % result
 
+    @property
+    def _repr_base(self):
+        result = '%d-%.2d-%.2d %.2d:%.2d:%.2d' % (self.year, self.month,
+                                                  self.day, self.hour,
+                                                  self.minute, self.second)
+
+        if self.nanosecond != 0:
+            nanos = self.nanosecond + 1000 * self.microsecond
+            result += '.%.9d' % nanos
+        elif self.microsecond != 0:
+            result += '.%.6d' % self.microsecond
+
+        return result
+
     @property
     def tz(self):
         """
diff --git a/pandas/tests/test_reshape.py b/pandas/tests/test_reshape.py
index e37fd13b5..3cb600ff6 100644
--- a/pandas/tests/test_reshape.py
+++ b/pandas/tests/test_reshape.py
@@ -126,4 +126,3 @@ class Test_lreshape(unittest.TestCase):
 if __name__ == '__main__':
     nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
                    exit=False)
-
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index f04f0a5b8..5f6a00a27 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -384,6 +384,12 @@ class TestTimeSeries(unittest.TestCase):
         df['A'] = rng
         self.assert_(np.issubdtype(df['A'].dtype, np.dtype('M8[ns]')))
 
+    def test_frame_datetime64_pre1900_repr(self):
+        df = DataFrame({'year': date_range('1/1/1700', periods=50,
+                                           freq='A-DEC')})
+        # it works!
+        repr(df)
+
     def test_frame_add_datetime64_col_other_units(self):
         n = 100
 
