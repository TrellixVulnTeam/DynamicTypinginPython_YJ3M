commit 010390178cddc675cd0d2a28ca18b201b8190316
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Jan 5 19:01:05 2010 +0000

    fixed DataMatrix.copy to make a copy of the objects matrix as well
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@106 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index a8897bdc4..d3a0a0adc 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1279,7 +1279,7 @@ class DataFrame(Picklable, Groupable):
             elif col in other:
                 result[col] = other[col]
 
-        return DataFrame(result, index = unionIndex)
+        return type(self)(result, index=unionIndex)
 
     def combineFirst(self, other):
         """
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index 27cbebbe1..1e5dd1824 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -39,6 +39,7 @@ class DataMatrix(DataFrame):
     Transposing is much faster in this regime, as is calling getXS, so please
     take note of this.
     """
+    objects = None
     def __init__(self, data=None, index=None, columns=None, dtype=None,
                  objects=None):
 
@@ -471,6 +472,9 @@ class DataMatrix(DataFrame):
 
         self._index = index
 
+        if self.objects is not None:
+            self.objects._index = index
+
     def _get_index(self):
         return self._index
 
@@ -904,12 +908,13 @@ class DataMatrix(DataFrame):
         """
         Make a copy of this DataMatrix
         """
-        if self.values is not None:
-            valsCopy = self.values.copy()
+        if self.objects:
+            objects = self.objects.copy()
         else:
-            valsCopy = None
-        return DataMatrix(valsCopy, index=self.index,
-                          columns=self.columns, objects=self.objects)
+            objects = None
+
+        return DataMatrix(self.values.copy(), index=self.index,
+                          columns=self.columns, objects=objects)
 
     def cumsum(self, axis=0):
         """
@@ -1448,104 +1453,6 @@ class DataMatrix(DataFrame):
         else:
             return super(DataMatrix, self).append(otherFrame)
 
-    def combineFirst(self, otherFrame):
-        """
-        Combine two DataFrame / DataMatrix objects and default to value
-        in frame calling the method.
-
-        Parameters
-        ----------
-        otherFrame : DataFrame / Matrix
-
-        Examples
-        --------
-        a.combineFirst(b)
-            a's values prioritized, use values from b to fill holes
-
-        Returns
-        -------
-        DataMatrix
-        """
-        if not otherFrame:
-            return self
-
-        if not self:
-            return otherFrame
-
-        if self.index is not otherFrame.index:
-            unionIndex = self.index + otherFrame.index
-            frame = self.reindex(unionIndex)
-            otherFrame = otherFrame.reindex(unionIndex)
-        else:
-            unionIndex = self.index
-            frame = self
-
-        result = {}
-        for col, series in frame.iteritems():
-            otherSeries = otherFrame[col] if col in otherFrame else None
-            if otherSeries is not None:
-                result[col] = series.__class__(np.where(isnull(series),
-                                                        otherSeries, series),
-                                               index=unionIndex)
-            else:
-                result[col] = series
-
-        for col, series in otherFrame.iteritems():
-            if col not in self:
-                result[col] = series
-
-        return DataMatrix(result, index = unionIndex)
-
-    def combineAdd(self, otherFrame):
-        """
-        Add two DataFrame / DataMatrix objects and do not propagate NaN values,
-        so if for a (column, time) one frame is missing a value, it will
-        default to the other frame's value (which might be NaN as well)
-
-        Parameters
-        ----------
-        otherFrame : DataFrame / Matrix
-
-        Returns
-        -------
-        DataMatrix
-        """
-        if not otherFrame:
-            return self
-
-        if not self:
-            return otherFrame
-
-        if self.index is not otherFrame.index:
-            unionIndex = self.index + otherFrame.index
-            frame = self.reindex(unionIndex)
-            otherFrame = otherFrame.reindex(unionIndex)
-        else:
-            unionIndex = self.index
-            frame = self
-
-        unionCols = sorted(set(frame.cols() + otherFrame.cols()))
-
-        result = {}
-        for col in unionCols:
-            if col in frame and col in otherFrame:
-                series = frame[col].view(np.ndarray)
-                otherSeries = otherFrame[col].view(np.ndarray)
-                sok = np.isfinite(series)
-                ook = np.isfinite(otherSeries)
-
-                result[col] = np.where(sok & ook, series + otherSeries,
-                                       np.where(sok, series, otherSeries))
-
-            elif col in frame:
-                result[col] = frame[col]
-            elif col in otherFrame:
-                result[col] = otherFrame[col]
-            else:
-                raise Exception('Phantom column, be very afraid')
-
-        return DataMatrix(result, index=unionIndex, columns=unionCols)
-
     # TODO, works though.
     def outerJoin(self, *frames):
         """
diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index 7e40135a5..2b2da7789 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -831,6 +831,13 @@ class TestDataFrame(unittest.TestCase):
         combined = tail.combineFirst(head)
         self.assert_((combined['A'][:10] == 0).all())
 
+        # no overlap
+        f = self.frame[:10]
+        g = self.frame[10:]
+        combined = f.combineFirst(g)
+        assert_series_equal(combined['A'].reindex(f.index), f['A'])
+        assert_series_equal(combined['A'].reindex(g.index), g['A'])
+
         # corner cases
         comb = self.frame.combineFirst(self.empty)
         self.assert_(comb is self.frame)
diff --git a/pandas/core/tests/test_matrix.py b/pandas/core/tests/test_matrix.py
index 749ba5933..bf1309548 100644
--- a/pandas/core/tests/test_matrix.py
+++ b/pandas/core/tests/test_matrix.py
@@ -5,7 +5,7 @@ import unittest
 from numpy.random import randn
 import numpy as np
 
-from pandas.core.api import DataMatrix
+from pandas.core.api import Series, DataMatrix
 import pandas.core.tests.test_frame as test_frame
 import pandas.core.tests.common as common
 
@@ -38,6 +38,22 @@ class TestDataMatrix(test_frame.TestDataFrame):
         # corner, silly
         self.assertRaises(Exception, self.klass, (1, 2, 3))
 
+    def test_copy(self):
+        # copy objects
+        copy = self.mixed_frame.copy()
+        self.assert_(copy.objects is not self.mixed_frame.objects)
+
+    def test_combineFirst_mixed(self):
+        a = Series(['a','b'], index=range(2))
+        b = Series(range(2), index=range(2))
+        f = DataMatrix.fromDict({'A' : a, 'B' : b})
+
+        a = Series(['a','b'], index=range(5, 7))
+        b = Series(range(2), index=range(5, 7))
+        g = DataMatrix.fromDict({'A' : a, 'B' : b})
+
+        combined = f.combineFirst(g)
+
     def test_setitem_corner(self):
         # corner case
         df = self.klass({'B' : [1., 2., 3.],
