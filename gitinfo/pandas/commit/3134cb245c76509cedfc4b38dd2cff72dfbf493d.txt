commit 3134cb245c76509cedfc4b38dd2cff72dfbf493d
Author: jreback <jeff@reback.net>
Date:   Thu Feb 14 15:01:30 2013 -0500

    BUG: fix sparse_frame printing (bug introduced in dtypes)
         MockBlockManager didn't support blocks method

diff --git a/pandas/sparse/frame.py b/pandas/sparse/frame.py
index cfbe5ea2e..036d42467 100644
--- a/pandas/sparse/frame.py
+++ b/pandas/sparse/frame.py
@@ -42,6 +42,11 @@ class _SparseMockBlockManager(object):
     def axes(self):
         return [self.sp_frame.columns, self.sp_frame.index]
 
+    @property
+    def blocks(self):
+        """ return our series in the column order """
+        s = self.sp_frame._series
+        return [ self.iget(i) for i in self.sp_frame.columns ]
 
 class SparseDataFrame(DataFrame):
     """
@@ -235,6 +240,10 @@ class SparseDataFrame(DataFrame):
         data = dict((k, v.to_dense()) for k, v in self.iteritems())
         return DataFrame(data, index=self.index)
 
+    def get_dtype_counts(self):
+        from collections import Counter
+        return Series(Counter([ v.dtype.name for k, v in self.iteritems() ]))
+     
     def astype(self, dtype):
         raise NotImplementedError
 
diff --git a/pandas/sparse/tests/test_sparse.py b/pandas/sparse/tests/test_sparse.py
index 1202649af..fcb3f2a5c 100644
--- a/pandas/sparse/tests/test_sparse.py
+++ b/pandas/sparse/tests/test_sparse.py
@@ -821,6 +821,22 @@ class TestSparseDataFrame(TestCase, test_frame.SafeForSparse):
         sdf = SparseDataFrame(columns=range(4), index=arr)
         self.assertTrue(sdf[0].index is sdf[1].index)
 
+    def test_dtypes(self):
+        df = DataFrame(np.random.randn(10000, 4))
+        df.ix[:9998] = np.nan
+        sdf = df.to_sparse()
+
+        result = sdf.get_dtype_counts()
+        expected = Series({ 'float64' : 4 })
+        assert_series_equal(result, expected)
+
+    def test_str(self):
+        df = DataFrame(np.random.randn(10000, 4))
+        df.ix[:9998] = np.nan
+        sdf = df.to_sparse()
+
+        str(sdf)
+        
     def test_array_interface(self):
         res = np.sqrt(self.frame)
         dres = np.sqrt(self.frame.to_dense())
