commit 25d522c1d426b1005fed5b9ddbde7c4b13d2af70
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Dec 13 21:41:30 2012 -0500

    BUG: fix DataFrame.icol with list of integers when columns are integers with duplicates. close #2259

diff --git a/RELEASE.rst b/RELEASE.rst
index 7e013f09c..93941ebf1 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -233,6 +233,7 @@ pandas 0.10.0
   - DataFrame.to_string formatters can be list, too (GH2520_)
   - DataFrame.combine_first will always result in the union of the index and
     columns, even if one DataFrame is length-zero (GH2525_)
+  - Fix several DataFrame.icol/irow with duplicate indices issues (GH2228_, GH2259_)
 
 .. _GH407: https://github.com/pydata/pandas/issues/407
 .. _GH821: https://github.com/pydata/pandas/issues/821
@@ -348,6 +349,8 @@ pandas 0.10.0
 .. _GH2488: https://github.com/pydata/pandas/issues/2488
 .. _GH2520: https://github.com/pydata/pandas/issues/2520
 .. _GH2525: https://github.com/pydata/pandas/issues/2525
+.. _GH2228: https://github.com/pydata/pandas/issues/2228
+.. _GH2259: https://github.com/pydata/pandas/issues/2259
 
 
 pandas 0.9.1
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index a3b98f63c..3788e10d4 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1875,11 +1875,7 @@ class DataFrame(NDFrame):
         else:
             label = self.columns[i]
             if isinstance(label, Index):
-                if self.columns.inferred_type == 'integer':
-                    # XXX re: #2228
-                    return self.reindex(columns=label)
-                else:
-                    return self.ix[:, i]
+                return self.take(i, axis=1)
 
             values = self._data.iget(i)
             return self._col_klass.from_array(values, index=self.index,
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 72a07ce36..a3be5e517 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1334,6 +1334,12 @@ class CheckIndexing(object):
         xp = df.ix[:, [0]]
         assert_frame_equal(rs, xp)
 
+        # #2259
+        df = DataFrame([[1,2,3],[4,5,6]], columns=[1,1,2])
+        result = df.icol([0])
+        expected = df.take([0], axis=1)
+        assert_frame_equal(result, expected)
+
     def test_icol_sparse_propegate_fill_value(self):
         from pandas.sparse.api import SparseDataFrame
         df=SparseDataFrame({'A' : [999,1]},default_fill_value=999)
