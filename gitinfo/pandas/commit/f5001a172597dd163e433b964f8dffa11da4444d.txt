commit f5001a172597dd163e433b964f8dffa11da4444d
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jun 14 15:36:27 2012 -0400

    ENH: return NA (-1) for out of range values in cut/qcut, close #1463

diff --git a/pandas/tools/tests/test_tile.py b/pandas/tools/tests/test_tile.py
index cdfc731a1..b8ac309ea 100644
--- a/pandas/tools/tests/test_tile.py
+++ b/pandas/tools/tests/test_tile.py
@@ -120,10 +120,12 @@ class TestCut(unittest.TestCase):
         np.random.seed(12345)
 
         arr = np.random.randn(100)
-        self.assertRaises(ValueError, cut, arr, [-1, 0, 1])
 
-        arr = np.where(arr < -1, 0, arr)
-        self.assertRaises(ValueError, cut, arr, [-1, 0, 1])
+        result = cut(arr, [-1, 0, 1])
+
+        mask = result.labels == -1
+        ex_mask = (arr < -1) | (arr > 1)
+        self.assert_(np.array_equal(mask, ex_mask))
 
     def test_cut_pass_labels(self):
         arr = [50, 5, 10, 15, 20, 30, 70]
diff --git a/pandas/tools/tile.py b/pandas/tools/tile.py
index 32b39a1d5..8cb5d06e4 100644
--- a/pandas/tools/tile.py
+++ b/pandas/tools/tile.py
@@ -148,18 +148,8 @@ def _bins_to_cuts(x, bins, right=True, labels=None, retbins=False,
     side = 'left' if right else 'right'
     ids = bins.searchsorted(x, side=side)
 
-    na_mask = com.notnull(x)
-    above = na_mask & (ids == len(bins))
-    below = na_mask & (ids == 0)
-
-    if above.any():
-        raise ValueError('Values fall past last bin: %s' % str(x[above]))
-
-    if below.any():
-        raise ValueError('Values fall before first bin: %s' % str(x[below]))
-
-    mask = com.isnull(x)
-    has_nas = mask.any()
+    na_mask = com.isnull(x) | (ids == len(bins)) | (ids == 0)
+    has_nas = na_mask.any()
 
     if labels is not False:
         if labels is None:
@@ -177,16 +167,13 @@ def _bins_to_cuts(x, bins, right=True, labels=None, retbins=False,
             levels = labels
 
         levels = np.asarray(levels, dtype=object)
-
-        if has_nas:
-            np.putmask(ids, mask, 0)
-
+        np.putmask(ids, na_mask, 0)
         fac = Categorical(ids - 1, levels, name=name)
     else:
         fac = ids - 1
         if has_nas:
             fac = ids.astype(np.float64)
-            np.putmask(fac, mask, np.nan)
+            np.putmask(fac, na_mask, np.nan)
 
     if not retbins:
         return fac
