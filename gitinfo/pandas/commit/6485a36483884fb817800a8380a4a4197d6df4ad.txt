commit 6485a36483884fb817800a8380a4a4197d6df4ad
Author: Tom Augspurger <TomAugspurger@users.noreply.github.com>
Date:   Fri Feb 9 14:53:41 2018 -0600

    API: Default ExtensionArray.astype (#19604)
    
    * API: Default ExtensionArray.astype
    
    (cherry picked from commit 943a915562b72bed147c857de927afa0daf31c1a)
    
    * Py2 compat
    
    * Moved
    
    * Moved dtypes

diff --git a/pandas/core/arrays/base.py b/pandas/core/arrays/base.py
index 1556b6538..553e1e0ac 100644
--- a/pandas/core/arrays/base.py
+++ b/pandas/core/arrays/base.py
@@ -1,4 +1,6 @@
 """An interface for extending pandas with custom arrays."""
+import numpy as np
+
 from pandas.errors import AbstractMethodError
 
 _not_implemented_message = "{} does not implement {}."
@@ -138,6 +140,25 @@ class ExtensionArray(object):
     # ------------------------------------------------------------------------
     # Additional Methods
     # ------------------------------------------------------------------------
+    def astype(self, dtype, copy=True):
+        """Cast to a NumPy array with 'dtype'.
+
+        Parameters
+        ----------
+        dtype : str or dtype
+            Typecode or data-type to which the array is cast.
+        copy : bool, default True
+            Whether to copy the data, even if not necessary. If False,
+            a copy is made only if the old dtype does not match the
+            new dtype.
+
+        Returns
+        -------
+        array : ndarray
+            NumPy ndarray with 'dtype' for its dtype.
+        """
+        return np.array(self, dtype=dtype, copy=copy)
+
     def isna(self):
         # type: () -> np.ndarray
         """Boolean NumPy array indicating if each value is missing.
diff --git a/pandas/tests/dtypes/test_dtypes.py b/pandas/tests/dtypes/test_dtypes.py
index eca4dd4cf..d800a7b92 100644
--- a/pandas/tests/dtypes/test_dtypes.py
+++ b/pandas/tests/dtypes/test_dtypes.py
@@ -10,14 +10,12 @@ from pandas import (
     Series, Categorical, CategoricalIndex, IntervalIndex, date_range)
 
 from pandas.compat import string_types
-from pandas.core.arrays import ExtensionArray
 from pandas.core.dtypes.dtypes import (
     DatetimeTZDtype, PeriodDtype,
-    IntervalDtype, CategoricalDtype, ExtensionDtype)
+    IntervalDtype, CategoricalDtype)
 from pandas.core.dtypes.common import (
     is_categorical_dtype, is_categorical,
     is_datetime64tz_dtype, is_datetimetz,
-    is_extension_array_dtype,
     is_period_dtype, is_period,
     is_dtype_equal, is_datetime64_ns_dtype,
     is_datetime64_dtype, is_interval_dtype,
@@ -744,31 +742,3 @@ class TestCategoricalDtypeParametrized(object):
         tm.assert_index_equal(c1.categories, pd.Index(['a', 'b']))
         c1 = CategoricalDtype(CategoricalIndex(['a', 'b']))
         tm.assert_index_equal(c1.categories, pd.Index(['a', 'b']))
-
-
-class DummyArray(ExtensionArray):
-    pass
-
-
-class DummyDtype(ExtensionDtype):
-    pass
-
-
-class TestExtensionArrayDtype(object):
-
-    @pytest.mark.parametrize('values', [
-        pd.Categorical([]),
-        pd.Categorical([]).dtype,
-        pd.Series(pd.Categorical([])),
-        DummyDtype(),
-        DummyArray(),
-    ])
-    def test_is_extension_array_dtype(self, values):
-        assert is_extension_array_dtype(values)
-
-    @pytest.mark.parametrize('values', [
-        np.array([]),
-        pd.Series(np.array([])),
-    ])
-    def test_is_not_extension_array_dtype(self, values):
-        assert not is_extension_array_dtype(values)
diff --git a/pandas/tests/extension/__init__.py b/pandas/tests/extension/__init__.py
new file mode 100644
index 000000000..e69de29bb
diff --git a/pandas/tests/extension/test_common.py b/pandas/tests/extension/test_common.py
new file mode 100644
index 000000000..1f4582f68
--- /dev/null
+++ b/pandas/tests/extension/test_common.py
@@ -0,0 +1,67 @@
+import numpy as np
+import pytest
+
+import pandas as pd
+import pandas.util.testing as tm
+from pandas.core.arrays import ExtensionArray
+from pandas.core.dtypes.common import is_extension_array_dtype
+from pandas.core.dtypes.dtypes import ExtensionDtype
+
+
+class DummyDtype(ExtensionDtype):
+    pass
+
+
+class DummyArray(ExtensionArray):
+
+    def __init__(self, data):
+        self.data = data
+
+    def __array__(self, dtype):
+        return self.data
+
+    @property
+    def dtype(self):
+        return self.data.dtype
+
+
+class TestExtensionArrayDtype(object):
+
+    @pytest.mark.parametrize('values', [
+        pd.Categorical([]),
+        pd.Categorical([]).dtype,
+        pd.Series(pd.Categorical([])),
+        DummyDtype(),
+        DummyArray(np.array([1, 2])),
+    ])
+    def test_is_extension_array_dtype(self, values):
+        assert is_extension_array_dtype(values)
+
+    @pytest.mark.parametrize('values', [
+        np.array([]),
+        pd.Series(np.array([])),
+    ])
+    def test_is_not_extension_array_dtype(self, values):
+        assert not is_extension_array_dtype(values)
+
+
+def test_astype():
+
+    arr = DummyArray(np.array([1, 2, 3]))
+    expected = np.array([1, 2, 3], dtype=object)
+
+    result = arr.astype(object)
+    tm.assert_numpy_array_equal(result, expected)
+
+    result = arr.astype('object')
+    tm.assert_numpy_array_equal(result, expected)
+
+
+def test_astype_no_copy():
+    arr = DummyArray(np.array([1, 2, 3], dtype=np.int64))
+    result = arr.astype(arr.dtype, copy=False)
+
+    assert arr.data is result
+
+    result = arr.astype(arr.dtype)
+    assert arr.data is not result
