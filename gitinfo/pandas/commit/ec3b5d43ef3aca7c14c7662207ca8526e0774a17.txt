commit ec3b5d43ef3aca7c14c7662207ca8526e0774a17
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Jan 21 17:17:46 2012 -0500

    ENH: handle list of values intelligently as grouping array when possible, GH #659

diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index e83f22342..93e0647fd 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -10,6 +10,7 @@ from pandas.core.internals import BlockManager
 from pandas.core.series import Series
 from pandas.core.panel import Panel
 from pandas.util.decorators import cache_readonly, Appender
+import pandas.core.common as com
 import pandas._tseries as lib
 
 
@@ -676,6 +677,24 @@ def _get_groupings(obj, grouper=None, axis=0, level=None, sort=True):
     else:
         groupers = grouper
 
+    # what are we after, exactly?
+    match_axis_length = len(groupers) == len(group_axis)
+    any_callable = any(callable(g) for g in groupers)
+    any_arraylike = any(isinstance(g, (list, tuple, np.ndarray))
+                        for g in groupers)
+
+    try:
+        if isinstance(obj, DataFrame):
+            all_in_columns = all(g in obj.columns for g in groupers)
+        else:
+            all_in_columns = False
+    except Exception:
+        all_in_columns = False
+
+    if (not any_callable and not all_in_columns
+        and not any_arraylike and match_axis_length):
+        groupers = [com._asarray_tuplesafe(groupers)]
+
     if isinstance(level, (tuple, list)):
         if grouper is None:
             groupers = [None] * len(level)
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 5ff89db4c..537f1f637 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -1271,6 +1271,21 @@ class TestGroupBy(unittest.TestCase):
         self.assert_(result.dtype == np.object_)
         self.assert_(isinstance(result[0], Decimal))
 
+    def test_groupby_list_infer_array_like(self):
+        result = self.df.groupby(list(self.df['A'])).mean()
+        expected = self.df.groupby(self.df['A']).mean()
+        assert_frame_equal(result, expected)
+
+        self.assertRaises(Exception, self.df.groupby, list(self.df['A'][:-1]))
+
+        # pathological case of ambiguity
+        df = DataFrame({'foo' : [0, 1], 'bar' : [3, 4],
+                        'val' : np.random.randn(2)})
+
+        result = df.groupby(['foo', 'bar']).mean()
+        expected = df.groupby([df['foo'], df['bar']]).mean()[['val']]
+
+
 class TestPanelGroupBy(unittest.TestCase):
 
     def setUp(self):
