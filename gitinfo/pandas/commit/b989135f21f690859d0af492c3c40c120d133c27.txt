commit b989135f21f690859d0af492c3c40c120d133c27
Author: Chang She <changshe@gmail.com>
Date:   Tue Nov 6 16:42:56 2012 -0500

    TST: misc coverage and cleanup

diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index be5dfab2d..10a85c559 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -559,7 +559,6 @@ class BlockManager(object):
         return tuple(len(ax) for ax in self.axes)
 
     def _verify_integrity(self):
-        # _union_block_items(self.blocks)
         mgr_shape = self.shape
         for block in self.blocks:
             assert(block.ref_items is self.items)
@@ -1404,34 +1403,6 @@ def _merge_blocks(blocks, items):
     new_block = make_block(new_values, new_items, items)
     return new_block.reindex_items_from(items)
 
-def _union_block_items(blocks):
-    tot_len = 0
-    all_items = []
-    slow = False
-    for b in blocks:
-        tot_len += len(b.items)
-        if type(b.items) != Index:
-            slow = True
-        all_items.append(b.items)
-
-    if slow:
-        the_union = _union_items_slow(all_items)
-    else:
-        the_union = Index(lib.fast_unique_multiple(all_items))
-
-    if tot_len > len(the_union):
-        raise Exception('item names overlap')
-    return the_union
-
-def _union_items_slow(all_items):
-    seen = None
-    for items in all_items:
-        if seen is None:
-            seen = items
-        else:
-            seen = seen.union(items)
-    return seen
-
 def _vstack(to_stack):
     if all(x.dtype == _NS_DTYPE for x in to_stack):
         # work around NumPy 1.6 bug
diff --git a/pandas/core/strings.py b/pandas/core/strings.py
index 66897360b..b3a12fa8b 100644
--- a/pandas/core/strings.py
+++ b/pandas/core/strings.py
@@ -51,16 +51,8 @@ def str_cat(arr, others=None, sep=None, na_rep=None):
 
             notmask = -na_mask
 
-            if sep is None:
-                for x in arrays:
-                    x = x[notmask]
-                    if cats is None:
-                        cats = x
-                    else:
-                        cats = cats + x[notmask]
-            else:
-                tuples = izip(*[x[notmask] for x in arrays])
-                cats = [sep.join(tup) for tup in tuples]
+            tuples = izip(*[x[notmask] for x in arrays])
+            cats = [sep.join(tup) for tup in tuples]
 
             result[notmask] = cats
         else:
diff --git a/pandas/tests/test_graphics.py b/pandas/tests/test_graphics.py
index ba01b5410..4ea1fb027 100644
--- a/pandas/tests/test_graphics.py
+++ b/pandas/tests/test_graphics.py
@@ -466,6 +466,8 @@ class TestDataFramePlots(unittest.TestCase):
     @slow
     def test_line_colors(self):
         import matplotlib.pyplot as plt
+        import sys
+        from StringIO import StringIO
 
         custom_colors = 'rgcby'
 
@@ -480,6 +482,16 @@ class TestDataFramePlots(unittest.TestCase):
             rs = l.get_color()
             self.assert_(xp == rs)
 
+        tmp = sys.stderr
+        sys.stderr = StringIO()
+        try:
+            plt.close('all')
+            ax2 = df.plot(colors=custom_colors)
+            lines2 = ax2.get_lines()
+            for l1, l2 in zip(lines, lines2):
+                self.assert_(l1.get_color(), l2.get_color())
+        finally:
+            sys.stderr = tmp
 
 class TestDataFrameGroupByPlots(unittest.TestCase):
 
@@ -513,6 +525,8 @@ class TestDataFrameGroupByPlots(unittest.TestCase):
         _check_plot_works(grouped.boxplot)
         _check_plot_works(grouped.boxplot, subplots=False)
 
+
+
     @slow
     def test_series_plot_color_kwargs(self):
         # #1890
@@ -533,6 +547,13 @@ class TestDataFrameGroupByPlots(unittest.TestCase):
         line = ax.get_lines()[0]
         self.assert_(line.get_color() == 'green')
 
+    @slow
+    def test_grouped_hist(self):
+        df = DataFrame(np.random.randn(50, 2), columns=['A', 'B'])
+        df['C'] = np.random.randint(0, 3, 50)
+        axes = plotting.grouped_hist(df.A, by=df.C)
+        self.assert_(len(axes.ravel()) == 4)
+
 PNG_PATH = 'tmp.png'
 
 def _check_plot_works(f, *args, **kwargs):
diff --git a/pandas/tests/test_internals.py b/pandas/tests/test_internals.py
index 03f3e14f5..57ccfff23 100644
--- a/pandas/tests/test_internals.py
+++ b/pandas/tests/test_internals.py
@@ -236,16 +236,6 @@ class TestBlockManager(unittest.TestCase):
                     'bool', 'int64', 'complex128']
         self.assert_(np.array_equal(result, expected))
 
-    def test_union_block_items(self):
-        blocks = [get_float_ex(['a', 'b', 'c']),
-                  get_float_ex(['c', 'd', 'e'])]
-        self.assertRaises(Exception, internals._union_block_items, blocks)
-
-        blocks = [get_float_ex(['a', 'b', 'c']),
-                  get_float_ex(['f', 'e', 'd'])]
-        self.assert_(np.array_equal(internals._union_block_items(blocks),
-                                    ['a', 'b', 'c', 'd', 'e', 'f']))
-
     def test_duplicate_item_failure(self):
         items = Index(['a', 'a'])
         blocks = [get_bool_ex(['a']), get_float_ex(['a'])]
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index 096216fe5..00724a2dc 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -487,7 +487,7 @@ def grouped_hist(data, column=None, by=None, ax=None, bins=50, log=False,
                               figsize=figsize, layout=layout, rot=rot)
     fig.subplots_adjust(bottom=0.15, top=0.9, left=0.1, right=0.9,
                         hspace=0.3, wspace=0.2)
-    return fig
+    return axes
 
 class MPLPlot(object):
     """
