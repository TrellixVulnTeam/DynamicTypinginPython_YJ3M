commit 3d0fe493b03d1faf1426cf4b7d56c5f75dc95177
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Sep 9 17:50:00 2011 -0400

    BUG: PanelOLS couldn't cope with object DataFrame input

diff --git a/pandas/stats/plm.py b/pandas/stats/plm.py
index 853f1e20c..8634ed7a5 100644
--- a/pandas/stats/plm.py
+++ b/pandas/stats/plm.py
@@ -204,7 +204,6 @@ class PanelOLS(OLS):
         return x, x_filt, y, weights, weights_filt, cat_mapping
 
     def _convert_x(self, x):
-
         # Converts non-numeric data in x to floats. x_converted is the
         # DataFrame with converted values, and x_conversion is a dict that
         # provides the reverse mapping.  For example, if 'A' was converted to 0
@@ -217,12 +216,15 @@ class PanelOLS(OLS):
             if _is_numeric(df):
                 x_converted[key] = df
             else:
-                values = df.values
-                distinct_values = sorted(set(values.flat))
-                cat_mapping[key] = dict(enumerate(distinct_values))
-                new_values = np.searchsorted(distinct_values, values)
-                x_converted[key] = DataFrame(new_values, index=df.index,
-                                              columns=df.columns)
+                try:
+                    df = df.astype(float)
+                except (TypeError, ValueError):
+                    values = df.values
+                    distinct_values = sorted(set(values.flat))
+                    cat_mapping[key] = dict(enumerate(distinct_values))
+                    new_values = np.searchsorted(distinct_values, values)
+                    x_converted[key] = DataFrame(new_values, index=df.index,
+                                                  columns=df.columns)
 
         if len(cat_mapping) == 0:
             x_converted = x
diff --git a/pandas/stats/tests/common.py b/pandas/stats/tests/common.py
index 589572cc3..74cecf3d6 100644
--- a/pandas/stats/tests/common.py
+++ b/pandas/stats/tests/common.py
@@ -141,8 +141,8 @@ class BaseTest(unittest.TestCase):
         x1 = DataFrame(np.array(x1_data), index=x1_index,
                         columns=x1_cols)
 
-        x2_data = [['3.14', '1.59'],
-                   ['2.65', '3.14']]
+        x2_data = [['foo', 'bar'],
+                   ['baz', 'foo']]
         x2_index = [datetime(2000, 1, 1),
                     datetime(2000, 1, 2)]
         x2_cols = ['A', 'B']
diff --git a/pandas/stats/tests/test_ols.py b/pandas/stats/tests/test_ols.py
index 52275bcea..1a7bfc115 100644
--- a/pandas/stats/tests/test_ols.py
+++ b/pandas/stats/tests/test_ols.py
@@ -470,21 +470,21 @@ class TestPanelOLS(BaseTest):
                  [0, 0, 0, 1, 1]]
         assert_almost_equal(result._x.values, exp_x)
 
-        exp_index = Index(['x1_B', 'x1_C', 'x2_2.65', 'x2_3.14', 'intercept'])
+        exp_index = Index(['x1_B', 'x1_C', 'x2_baz', 'x2_foo', 'intercept'])
         self.assertTrue(exp_index.equals(result._x.items))
 
         # _check_non_raw_results(result)
 
     def testWithXEffectsAndConversionAndDroppedDummies(self):
         result = ols(y=self.panel_y3, x=self.panel_x3, x_effects=['x1', 'x2'],
-                     dropped_dummies={'x2' : '3.14'})
+                     dropped_dummies={'x2' : 'foo'})
 
         assert_almost_equal(result._y.values.flat, [1, 2, 3, 4])
         exp_x = [[0, 0, 0, 0, 1], [1, 0, 1, 0, 1], [0, 1, 0, 1, 1],
                  [0, 0, 0, 0, 1]]
         assert_almost_equal(result._x.values, exp_x)
 
-        exp_index = Index(['x1_B', 'x1_C', 'x2_1.59', 'x2_2.65', 'intercept'])
+        exp_index = Index(['x1_B', 'x1_C', 'x2_bar', 'x2_baz', 'intercept'])
         self.assertTrue(exp_index.equals(result._x.items))
 
         # _check_non_raw_results(result)
