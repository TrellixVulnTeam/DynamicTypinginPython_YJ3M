commit 304a52e38aac69f7fff286fe2e844ba2237a6cf0
Author: Phillip Cloud <cpcloud@gmail.com>
Date:   Sat Apr 5 15:41:11 2014 -0400

    CLN/TST: move ops test from test_frame.py to test_expressions.py

diff --git a/pandas/tests/test_expressions.py b/pandas/tests/test_expressions.py
index 2b539b338..fdea275b7 100644
--- a/pandas/tests/test_expressions.py
+++ b/pandas/tests/test_expressions.py
@@ -2,6 +2,7 @@ from __future__ import print_function
 # pylint: disable-msg=W0612,E1101
 
 import nose
+import re
 
 from numpy.random import randn
 
@@ -339,6 +340,24 @@ class TestExpressions(tm.TestCase):
         expr.set_numexpr_threads()
         testit()
 
+    def test_bool_ops_raise_on_arithmetic(self):
+        df = DataFrame({'a': np.random.rand(10) > 0.5,
+                        'b': np.random.rand(10) > 0.5})
+        names = 'add', 'mul', 'sub', 'div', 'truediv', 'floordiv', 'pow'
+        ops = '+', '*', '-', '/', '/', '//', '**'
+        msg = 'operator %r not implemented for bool dtypes'
+        for op, name in zip(ops, names):
+            if not compat.PY3 or name != 'div':
+                f = getattr(operator, name)
+                err_msg = re.escape(msg % op)
+
+                with tm.assertRaisesRegexp(NotImplementedError, err_msg):
+                    f(df, df)
+
+                with tm.assertRaisesRegexp(NotImplementedError, err_msg):
+                    f(df.a, df.b)
+
+
 if __name__ == '__main__':
     import nose
     nose.runmodule(argv=[__file__, '-vvs', '-x', '--pdb', '--pdb-failure'],
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 5b899dd85..877e3839e 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -4761,29 +4761,13 @@ class TestDataFrame(tm.TestCase, CheckIndexing,
         _check_unary_op(operator.neg)
 
     def test_logical_typeerror(self):
-        if compat.PY3:
-            pass
-        else:
+        if not compat.PY3:
             self.assertRaises(TypeError, self.frame.__eq__, 'foo')
             self.assertRaises(TypeError, self.frame.__lt__, 'foo')
             self.assertRaises(TypeError, self.frame.__gt__, 'foo')
             self.assertRaises(TypeError, self.frame.__ne__, 'foo')
-
-    def test_bool_ops_raise_on_arithmetic(self):
-        df = DataFrame({'a': np.random.rand(10) > 0.5,
-                        'b': np.random.rand(10) > 0.5})
-        df2 = DataFrame({'a': np.random.rand(10) > 0.5,
-                         'b': np.random.rand(10) > 0.5})
-        ops = 'add', 'mul', 'sub', 'div', 'truediv', 'floordiv', 'pow'
-        names = '+', '*', '-', '/', '/', '//', '**'
-        msg = 'operator %r not implemented for bool dtypes'
-        for op, name in zip(ops, names):
-            if not compat.PY3 or op != 'div':
-                with tm.assertRaisesRegexp(NotImplementedError,
-                                           re.escape(msg % name)):
-                    f = getattr(operator, op)
-                    f(df, df2)
-                    f(df.a, df.b)
+        else:
+            raise nose.SkipTest('test_logical_typeerror not tested on PY3')
 
     def test_constructor_lists_to_object_dtype(self):
         # from #1074
