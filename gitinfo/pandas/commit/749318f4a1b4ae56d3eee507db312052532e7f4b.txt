commit 749318f4a1b4ae56d3eee507db312052532e7f4b
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Nov 29 14:31:53 2012 -0500

    ENH: rename index_labels to index_names. #2370

diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index f8328475d..e9f6c69e1 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -468,8 +468,8 @@ class TextFileReader(object):
 
         # might mutate self.engine
         self.options, self.engine = self._clean_options(options, engine)
-        if 'has_index_labels' in kwds:
-            self.options['has_index_labels'] = kwds['has_index_labels']
+        if 'has_index_names' in kwds:
+            self.options['has_index_names'] = kwds['has_index_names']
 
         self._make_engine(self.engine)
 
@@ -994,7 +994,7 @@ def TextParser(*args, **kwds):
         rows will be discarded
     index_col : int or list, default None
         Column or columns to use as the (possibly hierarchical) index
-    has_index_labels: boolean, default False
+    has_index_names: boolean, default False
         True if the cols defined in index_col have an index name and are
         not in the header
     na_values : iterable, default None
@@ -1065,9 +1065,9 @@ class PythonParser(ParserBase):
         self.doublequote = kwds['doublequote']
         self.skipinitialspace = kwds['skipinitialspace']
         self.quoting = kwds['quoting']
-        self.has_index_labels = False
-        if 'has_index_labels' in kwds:
-            self.has_index_labels = kwds['has_index_labels']
+        self.has_index_names = False
+        if 'has_index_names' in kwds:
+            self.has_index_names = kwds['has_index_names']
 
         self.verbose = kwds['verbose']
         self.converters = kwds['converters']
@@ -1175,7 +1175,7 @@ class PythonParser(ParserBase):
         #handle new style for names in index
         count_empty_content_vals = count_empty_vals(content[0])
         indexnamerow = None
-        if self.has_index_labels and count_empty_content_vals == len(columns):
+        if self.has_index_names and count_empty_content_vals == len(columns):
             indexnamerow = content[0]
             content = content[1:]
 
@@ -1739,7 +1739,7 @@ class ExcelFile(object):
         return object.__repr__(self)
 
     def parse(self, sheetname, header=0, skiprows=None, skip_footer=0,
-              index_col=None, has_index_labels=False, parse_cols=None, parse_dates=False,
+              index_col=None, has_index_names=False, parse_cols=None, parse_dates=False,
               date_parser=None, na_values=None, thousands=None, chunksize=None,
               **kwds):
         """
@@ -1758,7 +1758,7 @@ class ExcelFile(object):
         index_col : int, default None
             Column to use as the row labels of the DataFrame. Pass None if
             there is no such column
-        has_index_labels: boolean, default False
+        has_index_names: boolean, default False
             True if the cols defined in index_col have an index name and are
             not in the header
         parse_cols : int or list, default None
@@ -1782,7 +1782,7 @@ class ExcelFile(object):
                   False: self._parse_xls}
         return choose[self.use_xlsx](sheetname, header=header,
                                      skiprows=skiprows, index_col=index_col,
-                                     has_index_labels=has_index_labels,
+                                     has_index_names=has_index_names,
                                      parse_cols=parse_cols,
                                      parse_dates=parse_dates,
                                      date_parser=date_parser,
@@ -1824,7 +1824,7 @@ class ExcelFile(object):
             return i in parse_cols
 
     def _parse_xlsx(self, sheetname, header=0, skiprows=None,
-                    skip_footer=0, index_col=None, has_index_labels=False,
+                    skip_footer=0, index_col=None, has_index_names=False,
                     parse_cols=None, parse_dates=False, date_parser=None,
                     na_values=None, thousands=None, chunksize=None):
         sheet = self.book.get_sheet_by_name(name=sheetname)
@@ -1848,7 +1848,7 @@ class ExcelFile(object):
             data[header] = _trim_excel_header(data[header])
 
         parser = TextParser(data, header=header, index_col=index_col,
-                            has_index_labels=has_index_labels,
+                            has_index_names=has_index_names,
                             na_values=na_values,
                             thousands=thousands,
                             parse_dates=parse_dates,
@@ -1860,7 +1860,7 @@ class ExcelFile(object):
         return parser.read()
 
     def _parse_xls(self, sheetname, header=0, skiprows=None,
-                   skip_footer=0, index_col=None, has_index_labels=None,
+                   skip_footer=0, index_col=None, has_index_names=None,
                    parse_cols=None, parse_dates=False, date_parser=None,
                    na_values=None, thousands=None, chunksize=None):
         from xlrd import xldate_as_tuple, XL_CELL_DATE, XL_CELL_ERROR
@@ -1894,7 +1894,7 @@ class ExcelFile(object):
             data[header] = _trim_excel_header(data[header])
 
         parser = TextParser(data, header=header, index_col=index_col,
-                            has_index_labels=has_index_labels,
+                            has_index_names=has_index_names,
                             na_values=na_values,
                             thousands=thousands,
                             parse_dates=parse_dates,
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 4a9aaa3b2..7fe289d60 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3860,7 +3860,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
             # test roundtrip
             self.frame.to_excel(path,'test1')
             reader = ExcelFile(path)
-            recons = reader.parse('test1', index_col=0, has_index_labels=True)
+            recons = reader.parse('test1', index_col=0, has_index_names=True)
             assert_frame_equal(self.frame, recons)
 
             self.frame.to_excel(path,'test1', index=False)
@@ -3871,17 +3871,17 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
             # self.frame.to_excel(path,'test1')
             # reader = ExcelFile(path)
-            # recons = reader.parse('test1', index_col=0, skiprows=[2], has_index_labels=True)
+            # recons = reader.parse('test1', index_col=0, skiprows=[2], has_index_names=True)
             # assert_frame_equal(self.frame.ix[1:], recons)
 
             self.frame.to_excel(path,'test1',na_rep='NA')
             reader = ExcelFile(path)
-            recons = reader.parse('test1', index_col=0, na_values=['NA'], has_index_labels=True)
+            recons = reader.parse('test1', index_col=0, na_values=['NA'], has_index_names=True)
             assert_frame_equal(self.frame, recons)
 
             self.mixed_frame.to_excel(path,'test1')
             reader = ExcelFile(path)
-            recons = reader.parse('test1', index_col=0, has_index_labels=True)
+            recons = reader.parse('test1', index_col=0, has_index_names=True)
             assert_frame_equal(self.mixed_frame, recons)
 
             self.tsframe.to_excel(path, 'test1')
@@ -3909,7 +3909,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
             self.tsframe.to_excel(writer,'test2')
             writer.save()
             reader = ExcelFile(path)
-            recons = reader.parse('test1',index_col=0, has_index_labels=True)
+            recons = reader.parse('test1',index_col=0, has_index_names=True)
             assert_frame_equal(self.frame, recons)
             recons = reader.parse('test2',index_col=0)
             assert_frame_equal(self.tsframe, recons)
@@ -3921,7 +3921,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
             col_aliases = Index(['AA', 'X', 'Y', 'Z'])
             self.frame2.to_excel(path, 'test1', header=col_aliases)
             reader = ExcelFile(path)
-            rs = reader.parse('test1', index_col=0, has_index_labels=True)
+            rs = reader.parse('test1', index_col=0, has_index_names=True)
             xp = self.frame2.copy()
             xp.columns = col_aliases
             assert_frame_equal(xp, rs)
@@ -3930,21 +3930,21 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
             frame = (DataFrame(np.random.randn(10,2)) >= 0)
             frame.to_excel(path, 'test1', index_label=['test'])
             reader = ExcelFile(path)
-            recons = reader.parse('test1', index_col=0, has_index_labels=True).astype(np.int64)
+            recons = reader.parse('test1', index_col=0, has_index_names=True).astype(np.int64)
             frame.index.names = ['test']
             self.assertEqual(frame.index.names, recons.index.names)
 
             frame = (DataFrame(np.random.randn(10,2)) >= 0)
             frame.to_excel(path, 'test1', index_label=['test', 'dummy', 'dummy2'])
             reader = ExcelFile(path)
-            recons = reader.parse('test1', index_col=0, has_index_labels=True).astype(np.int64)
+            recons = reader.parse('test1', index_col=0, has_index_names=True).astype(np.int64)
             frame.index.names = ['test']
             self.assertEqual(frame.index.names, recons.index.names)
 
             frame = (DataFrame(np.random.randn(10,2)) >= 0)
             frame.to_excel(path, 'test1', index_label='test')
             reader = ExcelFile(path)
-            recons = reader.parse('test1', index_col=0, has_index_labels=True).astype(np.int64)
+            recons = reader.parse('test1', index_col=0, has_index_names=True).astype(np.int64)
             frame.index.names = ['test']
             self.assertEqual(frame.index.names, recons.index.names)
 
@@ -4024,7 +4024,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
             # round trip
             frame.to_excel(path, 'test1')
             reader = ExcelFile(path)
-            df = reader.parse('test1', index_col=[0,1], parse_dates=False, has_index_labels=True)
+            df = reader.parse('test1', index_col=[0,1], parse_dates=False, has_index_names=True)
             assert_frame_equal(frame, df)
             self.assertEqual(frame.index.names, df.index.names)
             self.frame.index = old_index # needed if setUP becomes a classmethod
@@ -4037,7 +4037,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
             tsframe.to_excel(path, 'test1', index_label = ['time','foo'])
             reader = ExcelFile(path)
-            recons = reader.parse('test1', index_col=[0,1], has_index_labels=True)
+            recons = reader.parse('test1', index_col=[0,1], has_index_names=True)
             assert_frame_equal(tsframe, recons)
 
             # infer index
