commit 3583373be45bff12772775f8895dd26c9fa80349
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Feb 4 17:52:59 2012 -0500

    ENH: add abs method to objects, implement array interface on Panel, SparsePanel #740

diff --git a/RELEASE.rst b/RELEASE.rst
index 8b08ceeb4..fbc2dd4d0 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -87,6 +87,7 @@ pandas 0.7.0
     method to ``Series`` as well (GH #699)
   - Add ``isin`` method to Index objects, works just like ``Series.isin`` (GH
     #657)
+  - Implement array interface on Panel so that ufuncs work (re: #740)
 
 **API Changes**
 
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index a836c3c0e..16ac9d78d 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -61,6 +61,17 @@ class PandasObject(Picklable):
         name = self._get_axis_name(axis)
         return getattr(self, name)
 
+    def abs(self):
+        """
+        Return an object with absolute value taken. Only applicable to objects
+        that are all numeric
+
+        Returns
+        -------
+        abs: type of caller
+        """
+        return np.abs(self)
+
     def get(self, key, default=None):
         """
         Get item from object for given key (DataFrame column, Panel slice,
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index a8ac4832e..ee8682b8b 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -342,6 +342,21 @@ class Panel(NDFrame):
         block = make_block(values, items, items)
         return BlockManager([block], fixed_axes)
 
+
+    #----------------------------------------------------------------------
+    # Array interface
+
+    def __array__(self, dtype=None):
+        return self.values
+
+    def __array_wrap__(self, result):
+        return self._constructor(result, items=self.items,
+                                 major_axis=self.major_axis,
+                                 minor_axis=self.minor_axis, copy=False)
+
+    #----------------------------------------------------------------------
+    # Magic methods
+
     def __repr__(self):
         class_name = str(self.__class__)
 
diff --git a/pandas/sparse/panel.py b/pandas/sparse/panel.py
index 51b0a67d9..701c3d904 100644
--- a/pandas/sparse/panel.py
+++ b/pandas/sparse/panel.py
@@ -61,6 +61,16 @@ class SparsePanel(Panel):
 
     def __init__(self, frames, items=None, major_axis=None, minor_axis=None,
                  default_fill_value=np.nan, default_kind='block'):
+        if isinstance(frames, np.ndarray):
+            new_frames = {}
+            for item, vals in zip(items, frames):
+                new_frames[item] = \
+                    SparseDataFrame(vals, index=major_axis,
+                                    columns=minor_axis,
+                                    default_fill_value=default_fill_value,
+                                    default_kind=default_kind)
+            frames = new_frames
+
         assert(isinstance(frames, dict))
 
         self.default_fill_value = fill_value = default_fill_value
@@ -92,6 +102,13 @@ class SparsePanel(Panel):
         # do nothing when DataFrame calls this method
         pass
 
+    def __array_wrap__(self, result):
+        return SparsePanel(result, items=self.items,
+                           major_axis=self.major_axis,
+                           minor_axis=self.minor_axis,
+                           default_kind=self.default_kind,
+                           default_fill_value=self.default_fill_value)
+
     @classmethod
     def from_dict(cls, data):
         """
diff --git a/pandas/sparse/series.py b/pandas/sparse/series.py
index 97e275fd4..7f65eed44 100644
--- a/pandas/sparse/series.py
+++ b/pandas/sparse/series.py
@@ -263,6 +263,20 @@ to sparse
         new_index = Index(self.index.view(ndarray)[key])
         return self._constructor(dataSlice, index=new_index, name=self.name)
 
+    def abs(self):
+        """
+        Return an object with absolute value taken. Only applicable to objects
+        that are all numeric
+
+        Returns
+        -------
+        abs: type of caller
+        """
+        res_sp_values = np.abs(self.sp_values)
+        return SparseSeries(res_sp_values, index=self.index,
+                            sparse_index=self.sp_index,
+                            fill_value=self.fill_value)
+
     def get(self, label, default=None):
         """
         Returns value occupying requested label, default to specified
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 3e07174bd..c8b6c8ada 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -322,6 +322,21 @@ class SafeForSparse(object):
                     expected = self.panel[item][mnr][mjr]
                     assert_almost_equal(result, expected)
 
+    def test_abs(self):
+        result = self.panel.abs()
+        expected = np.abs(self.panel)
+        self.assert_panel_equal(result, expected)
+
+        df = self.panel['ItemA']
+        result = df.abs()
+        expected = np.abs(df)
+        assert_frame_equal(result, expected)
+
+        s = df['A']
+        result = s.abs()
+        expected = np.abs(s)
+        assert_series_equal(result, expected)
+
 class CheckIndexing(object):
 
 
@@ -966,7 +981,7 @@ class TestPanel(unittest.TestCase, PanelTests, CheckIndexing,
         self.assertRaises(Exception, group_agg, values, bounds, f2)
 
     def test_from_frame_level1_unsorted(self):
-        tuples = [('MSFT', 3), ('MSFT', 2), ('AAPL', 2), 
+        tuples = [('MSFT', 3), ('MSFT', 2), ('AAPL', 2),
                   ('AAPL', 1), ('MSFT', 1)]
         midx = MultiIndex.from_tuples(tuples)
         df = DataFrame(np.random.rand(5,4), index=midx)
