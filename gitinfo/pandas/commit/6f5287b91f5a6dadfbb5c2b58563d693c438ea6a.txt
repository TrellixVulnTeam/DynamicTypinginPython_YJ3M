commit 6f5287b91f5a6dadfbb5c2b58563d693c438ea6a
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Sun Mar 8 09:09:09 2020 -0700

    CLN: avoid values_from_object in nanops (#32508)

diff --git a/pandas/core/nanops.py b/pandas/core/nanops.py
index 725d1adc6..78313f5c3 100644
--- a/pandas/core/nanops.py
+++ b/pandas/core/nanops.py
@@ -32,6 +32,8 @@ from pandas.core.dtypes.common import (
 )
 from pandas.core.dtypes.missing import isna, na_value_for_dtype, notna
 
+from pandas.core.construction import extract_array
+
 bn = import_optional_dependency("bottleneck", raise_on_missing=False, on_version="warn")
 _BOTTLENECK_INSTALLED = bn is not None
 _USE_BOTTLENECK = False
@@ -284,14 +286,8 @@ def _get_values(
 
     mask = _maybe_get_mask(values, skipna, mask)
 
-    if is_datetime64tz_dtype(values):
-        # lib.values_from_object returns M8[ns] dtype instead of tz-aware,
-        #  so this case must be handled separately from the rest
-        dtype = values.dtype
-        values = getattr(values, "_values", values)
-    else:
-        values = lib.values_from_object(values)
-        dtype = values.dtype
+    values = extract_array(values, extract_numpy=True)
+    dtype = values.dtype
 
     if is_datetime_or_timedelta_dtype(values) or is_datetime64tz_dtype(values):
         # changing timedelta64/datetime64 to int64 needs to happen after
@@ -758,7 +754,7 @@ def nanvar(values, axis=None, skipna=True, ddof=1, mask=None):
     >>> nanops.nanvar(s)
     1.0
     """
-    values = lib.values_from_object(values)
+    values = extract_array(values, extract_numpy=True)
     dtype = values.dtype
     mask = _maybe_get_mask(values, skipna, mask)
     if is_any_int_dtype(values):
@@ -985,7 +981,7 @@ def nanskew(
     >>> nanops.nanskew(s)
     1.7320508075688787
     """
-    values = lib.values_from_object(values)
+    values = extract_array(values, extract_numpy=True)
     mask = _maybe_get_mask(values, skipna, mask)
     if not is_float_dtype(values.dtype):
         values = values.astype("f8")
@@ -1069,7 +1065,7 @@ def nankurt(
     >>> nanops.nankurt(s)
     -1.2892561983471076
     """
-    values = lib.values_from_object(values)
+    values = extract_array(values, extract_numpy=True)
     mask = _maybe_get_mask(values, skipna, mask)
     if not is_float_dtype(values.dtype):
         values = values.astype("f8")
