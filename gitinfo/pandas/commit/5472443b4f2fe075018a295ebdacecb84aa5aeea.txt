commit 5472443b4f2fe075018a295ebdacecb84aa5aeea
Author: Adam Klein <adamklein@gmail.com>
Date:   Mon Jan 23 11:02:50 2012 -0500

    TST: added tests for cummin, cummax. closes #647

diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 7aa62df83..b181330ff 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3760,6 +3760,53 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         self._check_stat_op('min', np.min)
         self._check_stat_op('min', np.min, frame=self.intframe)
 
+    def test_cummin(self):
+        self.tsframe.ix[5:10, 0] = nan
+        self.tsframe.ix[10:15, 1] = nan
+        self.tsframe.ix[15:, 2] = nan
+
+        # axis = 0
+        cummin = self.tsframe.cummin()
+        expected = self.tsframe.apply(Series.cummin)
+        assert_frame_equal(cummin, expected)
+
+        # axis = 1
+        cummin = self.tsframe.cummin(axis=1)
+        expected = self.tsframe.apply(Series.cummin, axis=1)
+        assert_frame_equal(cummin, expected)
+
+        # works
+        df = DataFrame({'A' : np.arange(20)}, index=np.arange(20))
+        result = df.cummin()
+
+        # fix issue
+        cummin_xs = self.tsframe.cummin(axis=1)
+        self.assertEqual(np.shape(cummin_xs), np.shape(self.tsframe))
+
+    def test_cummax(self):
+        self.tsframe.ix[5:10, 0] = nan
+        self.tsframe.ix[10:15, 1] = nan
+        self.tsframe.ix[15:, 2] = nan
+
+        # axis = 0
+        cummax = self.tsframe.cummax()
+        expected = self.tsframe.apply(Series.cummax)
+        assert_frame_equal(cummax, expected)
+
+        # axis = 1
+        cummax = self.tsframe.cummax(axis=1)
+        expected = self.tsframe.apply(Series.cummax, axis=1)
+        assert_frame_equal(cummax, expected)
+
+        # works
+        df = DataFrame({'A' : np.arange(20)}, index=np.arange(20))
+        result = df.cummax()
+
+        # fix issue
+        cummax_xs = self.tsframe.cummax(axis=1)
+        self.assertEqual(np.shape(cummax_xs), np.shape(self.tsframe))
+
+
     def test_max(self):
         self._check_stat_op('max', np.max)
         self._check_stat_op('max', np.max, frame=self.intframe)
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index bf51b155b..1ddb411e1 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -879,6 +879,26 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
     def test_cumprod(self):
         self._check_accum_op('cumprod')
 
+    def test_cummin(self):
+        self.assert_(np.array_equal(self.ts.cummin(), 
+                                    np.minimum.accumulate(np.array(self.ts))))
+        ts = self.ts.copy()
+        ts[::2]  = np.NaN
+        result   = ts.cummin()[1::2]
+        expected = np.minimum.accumulate(ts.valid())
+
+        self.assert_(np.array_equal(result, expected))
+
+    def test_cummax(self):
+        self.assert_(np.array_equal(self.ts.cummax(), 
+                                    np.maximum.accumulate(np.array(self.ts))))
+        ts = self.ts.copy()
+        ts[::2]  = np.NaN
+        result   = ts.cummax()[1::2]
+        expected = np.maximum.accumulate(ts.valid())
+
+        self.assert_(np.array_equal(result, expected))
+
     def _check_stat_op(self, name, alternate, check_objects=False):
         from pandas import DateRange
         import pandas.core.nanops as nanops
@@ -921,7 +941,6 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         except ImportError:
             pass
 
-
     def _check_accum_op(self, name):
         func = getattr(np, name)
         self.assert_(np.array_equal(func(self.ts), func(np.array(self.ts))))
