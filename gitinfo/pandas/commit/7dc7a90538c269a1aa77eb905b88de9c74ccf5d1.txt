commit 7dc7a90538c269a1aa77eb905b88de9c74ccf5d1
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Jun 21 10:34:05 2011 -0400

    minor doc edits for DataFrame/DataMatrix consolidation, bumped version in version.py

diff --git a/doc/source/dataframe.rst b/doc/source/dataframe.rst
index 0892fc6de..b762cd7a8 100644
--- a/doc/source/dataframe.rst
+++ b/doc/source/dataframe.rst
@@ -2,27 +2,24 @@
 
 .. currentmodule:: pandas
 
-************************
-DataFrame and DataMatrix
-************************
-
-**DataFrame** is a both 2D-matrix- and dict-like object implementing a
-named collection of identically-indexed Series objects. There is
-another important class called **DataMatrix** which has almost
-identical behavior to DataFrame, differing only in the internal
-implementation. Rather than create confusion, we will focus on
-DataFrame for this guide and explain later why to use one over the
-other depending on your application.
-
-For many users, DataFrame will be the most commonly used object in
-pandas, as it can serve as the primary container for a full data set
-of interest. As we will see below, it enables operations involving
-multiple time series or cross sections with ease.
+*********
+DataFrame
+*********
+
+**DataFrame** is a both 2D-matrix- and dict-like object implementing a named
+collection of identically-indexed Series objects. It supports columns having
+different types, so you can use it to store and manipulate floating point,
+integer, boolean, and arbitrary Python object data.
+
+For many users, DataFrame will be the most commonly used object in pandas, as it
+can serve as the primary container for a full data set of interest. As we will
+see below, it enables operations involving multiple time series or cross
+sections with ease.
 
 .. class:: DataFrame
 
    :Parameters:
-       **data** : dict or 2-D ndarray
+       **data** : dict, 2-D ndarray, or DataFrame
            * If the dict contains Series, an index need not be specified.
              The resulting frame will be the union of all the contained
              Series indices.
@@ -36,20 +33,12 @@ multiple time series or cross sections with ease.
        **dtype** : Python type alias or :class:`~numpy.dtype`
            Type to *attempt* to cast data to
 
-:class:`~pandas.DataMatrix` has an identical constructor (barring an
-extra keyword argument necessary for supporting mixed-type data, which
-you can safely ignore). :ref:`Elsewhere in the documentation
-<framevs>` we will explain the difference between the objects (which
-**only** matters in performance sensitive applications and can be
-ignored by most users).
-
 Basics
 ------
 
 .. note::
 
-    Unlike Series, neither DataFrame nor DataMatrix is a subclass of
-    numpy.ndarray.
+    Unlike Series, DataFrame is not a subclass of numpy.ndarray.
 
 The canonical DataFrame containing time series data takes this form,
 which will be used for many examples to follow:
@@ -344,8 +333,8 @@ as with Series objects. The addition is the matching of column names
 between DataFrame objects or Series. We will detail how the
 interactions work in each case.
 
-DataFrame and DataFrame
-~~~~~~~~~~~~~~~~~~~~~~~
+DataFrame {+,-,*,/} DataFrame
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 When combining two DataFrames, both index and column values must match
 for two values to be combined. If there is no match for a particular
@@ -413,8 +402,8 @@ result but are all NaN. An argument could be made to exclude these
 columns, but it is very frequently meaningful to know that there was
 no overlap in a particular portion of the data set.
 
-DataFrame and Series
-~~~~~~~~~~~~~~~~~~~~
+DataFrame {+,-,*,/} Series
+~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 The choice of behavior between DataFrame and Series was somewhat
 arbitrary. Since the **columns** of the DataFrame are viewed as its
@@ -469,7 +458,7 @@ Note that the same result could have been obtained by writing:
 but this is fairly awkward (and relatively high cost due to two
 transpose operations).
 
-DataFrame and scalar value
+DataFrame {+,-,*,/} scalar
 ~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 Scalar operations work just as expected:
@@ -659,9 +648,9 @@ the date where the maximum value for each column occurred:
     B    2009-02-27 00:00:00
     C    2009-06-30 00:00:00
 
-DataFrame and DataMatrix also implement the ndarray *array interface*
-which allows you to call ufuncs (like sqrt, exp, log, etc.) directly
-on the object. So the following two expressions would be equivalent:
+DataFrame also implements the ndarray *array interface* which allows you to call
+ufuncs (like sqrt, exp, log, etc.) directly on the object. So the following two
+expressions would be equivalent:
 
 ::
 
@@ -941,12 +930,3 @@ TODO
    DataFrame.combineMult
    DataFrame.plot
 
-DataFrame vs. DataMatrix
-------------------------
-
-DataFrame and DataMatrix differ only in their internal
-implementation. In a nutshell:
-
-  * DataFrame: dict of Series
-  * DataMatrix: 2D homogeneous ndarray of values
-
diff --git a/doc/source/frame_vs_matrix.rst b/doc/source/frame_vs_matrix.rst
deleted file mode 100644
index e9280e46d..000000000
--- a/doc/source/frame_vs_matrix.rst
+++ /dev/null
@@ -1,5 +0,0 @@
-.. _framevs:
-
-***********************************
-When to use DataFrame or DataMatrix
-***********************************
\ No newline at end of file
diff --git a/doc/source/groupby.rst b/doc/source/groupby.rst
index 2dad9c8ae..444b8241e 100644
--- a/doc/source/groupby.rst
+++ b/doc/source/groupby.rst
@@ -132,9 +132,9 @@ understanding how to group the data, however, is.
 Higher dimensional data structures
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
-The **groupby** methods for :class:`DataFrame`, :class:`DataMatrix`,
-:class:`WidePanel`, and :class:`LongPanel` additionally have an **axis**
-argument which allows you to select the axis to group on:
+The **groupby** methods for :class:`DataFrame`, :class:`WidePanel`, and
+:class:`LongPanel` additionally have an **axis** argument which allows you to
+select the axis to group on:
 
 ::
 
@@ -162,7 +162,7 @@ argument which allows you to select the axis to group on:
 The axis names and numbers for **groupby** are as with **reindex** and other related
 methods:
 
-* **DataFrame, DataMatrix**: *index* (0) and *columns* (1)
+* **DataFrame**: *index* (0) and *columns* (1)
 * **WidePanel**: *index* (0), *major* (1), and *minor* (2)
 * **LongPanel**: **Not yet implemented**
 
diff --git a/doc/source/index.rst b/doc/source/index.rst
index 0dd92bbcc..86bb9eff3 100755
--- a/doc/source/index.rst
+++ b/doc/source/index.rst
@@ -77,7 +77,6 @@ Other topics of interest
     :maxdepth: 2
 
     examples
-    frame_vs_matrix
     r_guide
     missing_data
     related
diff --git a/doc/source/overview.rst b/doc/source/overview.rst
index 8109445c2..2ef594480 100644
--- a/doc/source/overview.rst
+++ b/doc/source/overview.rst
@@ -39,30 +39,27 @@ Data structures at a glance
     1, Series, "Most generic 1D structure"
     1, TimeSeries, "Series indexed by datetimes"
     2, DataFrame, "General 2D indexed tabular structure"
-    2, DataMatrix, "Same API as DataFrame but faster (for most operations)"
     3, WidePanel, "General 3D panel data"
     3, LongPanel, "Stacked (2D) format panel data"
 
 Why more than 1 data structure?
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
-The best way to think about the pandas data structures is as flexible
-containers for lower dimensional data. For example, DataFrame /
-DataMatrix are containers for Series, and WidePanel is a container for
-DataFrame / DataMatrix objects. We would like to be able to insert and
-remove objects from these containers in a dictionary-like fashion.
-
-Also, we would like sensible default behaviors for the common API
-functions which take into account the typical orientation of time
-series and cross-sectional data sets. When using ndarrays to store 2-
-and 3-dimensional data, a burden is placed on the user to consider the
-orientation of the data set when writing functions; axes are
-considered more or less equivalent (except when C- or
-Fortran-contiguousness matters for performance). In pandas, the axes
-are intended to lend more semantic meaning to the data; i.e., for a
-particular data set there is likely to be a "right" way to orient the
-data. The goal, then, is to reduce the amount of thought required to
-code up data transformations in downstream functions.
+The best way to think about the pandas data structures is as flexible containers
+for lower dimensional data. For example, DataFrame is a container for Series,
+and WidePanel is a container for DataFrame objects. We would like to be able to
+insert and remove objects from these containers in a dictionary-like fashion.
+
+Also, we would like sensible default behaviors for the common API functions
+which take into account the typical orientation of time series and
+cross-sectional data sets. When using ndarrays to store 2- and 3-dimensional
+data, a burden is placed on the user to consider the orientation of the data set
+when writing functions; axes are considered more or less equivalent (except when
+C- or Fortran-contiguousness matters for performance). In pandas, the axes are
+intended to lend more semantic meaning to the data; i.e., for a particular data
+set there is likely to be a "right" way to orient the data. The goal, then, is
+to reduce the amount of thought required to code up data transformations in
+downstream functions.
 
 Lest we be too hand-wavy, here are some common use cases to
 illustrate:
diff --git a/doc/source/series.rst b/doc/source/series.rst
index a67f0682b..5c48adf7d 100644
--- a/doc/source/series.rst
+++ b/doc/source/series.rst
@@ -322,14 +322,14 @@ back-filling:
     2009-01-02 00:00:00    1.0
     2009-01-07 00:00:00    4.0
 
-    >>> ts.reindex(dates, fillMethod='pad')
+    >>> ts.reindex(dates, method='pad')
     2009-01-01 00:00:00    nan
     2009-01-02 00:00:00    1.0
     2009-01-05 00:00:00    1.0
     2009-01-06 00:00:00    1.0
     2009-01-07 00:00:00    4.0
 
-    >>> ts.reindex(dates, fillMethod='backfill')
+    >>> ts.reindex(dates, method='backfill')
     2009-01-01 00:00:00    1.0
     2009-01-02 00:00:00    1.0
     2009-01-05 00:00:00    4.0
@@ -702,7 +702,7 @@ conversion**, which has similar options to :func:`Series.reindex`:
     2010-09-30 00:00:00    8.0
     2010-10-29 00:00:00    9.0
 
-    >>> ts.asfreq('WEEKDAY', fillMethod='pad')
+    >>> ts.asfreq('WEEKDAY', method='pad')
     2010-01-29 00:00:00    0.0
     2010-02-01 00:00:00    0.0
     2010-02-02 00:00:00    0.0
diff --git a/doc/source/stats_moments.rst b/doc/source/stats_moments.rst
index c82fcd0f2..85b6507cb 100644
--- a/doc/source/stats_moments.rst
+++ b/doc/source/stats_moments.rst
@@ -76,8 +76,8 @@ methods accepting two Series arguments instead of one):
     2000-02-10 00:00:00    2.48549563273
     2000-02-11 00:00:00    1.81285272663
 
-If passed a DataFrame or DataMatrix argument, the statistics will be
-applied independently to the columns:
+If passing a DataFrame argument, the statistics will be applied independently to
+the columns:
 
 ::
 
diff --git a/pandas/version.py b/pandas/version.py
index 9c24b5802..91dfba500 100644
--- a/pandas/version.py
+++ b/pandas/version.py
@@ -1 +1 @@
-version = '0.3.0'
+version = '0.4.0dev'
