commit 835476f4d0f8566c5beeabf84b75829cdd134e23
Author: Chang She <changshe@gmail.com>
Date:   Sat Jul 14 19:09:58 2012 -0400

    ENH: additional unicode handling

diff --git a/pandas/core/strings.py b/pandas/core/strings.py
index 2d5c261e7..868008a13 100644
--- a/pandas/core/strings.py
+++ b/pandas/core/strings.py
@@ -83,10 +83,10 @@ def mapwrap(f, n_results_default=1, required='all'):
 
     return wrapped
 
-startswith = mapwrap(str.startswith)
-contains = mapwrap(str.__contains__)
-upper = mapwrap(str.upper)
-lower = mapwrap(str.lower)
+startswith = mapwrap(lambda x, p: x.startswith(p))
+contains = mapwrap(lambda x, p: x.__contains__(p))
+upper = mapwrap(lambda x: x.upper())
+lower = mapwrap(lambda x: x.lower())
 
 def _re_get_groups(pattern, n):
     def inner(s, *groups):
@@ -294,7 +294,7 @@ def str_lower(arr):
     -------
     lowercase : array
     """
-    return _na_map(str.lower, arr)
+    return _na_map(lambda x: x.lower(), arr)
 
 
 def str_upper(arr):
@@ -305,7 +305,7 @@ def str_upper(arr):
     -------
     uppercase : array
     """
-    return _na_map(str.upper, arr)
+    return _na_map(lambda x: x.upper(), arr)
 
 
 def str_replace(arr, pat, repl, n=0):
@@ -358,7 +358,7 @@ def str_repeat(arr, repeats):
             except TypeError:
                 return unicode.__mul__(x, r)
         repeats = np.asarray(repeats, dtype=object)
-        result = lib.vec_binop(arr, repeats, str.__mul__)
+        result = lib.vec_binop(arr, repeats, rep)
         return result
 
 def str_match(arr, pat):
@@ -535,7 +535,7 @@ def str_strip(arr):
     -------
     stripped : array
     """
-    return _na_map(str.strip, arr)
+    return _na_map(lambda x: x.strip(), arr)
 
 
 def str_lstrip(arr):
@@ -547,7 +547,7 @@ def str_lstrip(arr):
     -------
     stripped : array
     """
-    return _na_map(str.lstrip, arr)
+    return _na_map(lambda x: x.lstrip(), arr)
 
 
 def str_rstrip(arr):
@@ -559,7 +559,7 @@ def str_rstrip(arr):
     -------
     stripped : array
     """
-    return _na_map(str.rstrip, arr)
+    return _na_map(lambda x: x.rstrip(), arr)
 
 
 def str_wrap(arr, width=80):
diff --git a/pandas/tests/test_strings.py b/pandas/tests/test_strings.py
index 4ae5e6a02..6dac19d51 100644
--- a/pandas/tests/test_strings.py
+++ b/pandas/tests/test_strings.py
@@ -71,6 +71,17 @@ class TestStringMethods(unittest.TestCase):
         self.assert_(isinstance(rs, Series))
         tm.assert_almost_equal(rs, xp)
 
+        #unicode
+        values = [u'foo', u'foofoo', NA, u'foooofooofommmfoo']
+
+        result = strings.str_count(values, 'f[o]+')
+        exp = [1, 2, NA, 4]
+        tm.assert_almost_equal(result, exp)
+
+        result = Series(values).str.count('f[o]+')
+        self.assert_(isinstance(result, Series))
+        tm.assert_almost_equal(result, exp)
+
     def test_contains(self):
         values = ['foo', NA, 'fooommm__foo', 'mmm_']
         pat = 'mmm[_]+'
@@ -95,6 +106,20 @@ class TestStringMethods(unittest.TestCase):
         self.assert_(isinstance(rs, Series))
         tm.assert_almost_equal(rs, xp)
 
+        #unicode
+        values = [u'foo', NA, u'fooommm__foo', u'mmm_']
+        pat = 'mmm[_]+'
+
+        result = strings.str_contains(values, pat)
+        expected = [False, np.nan, True, True]
+        tm.assert_almost_equal(result, expected)
+
+        values = ['foo', 'xyz', 'fooommm__foo', 'mmm_']
+        result = strings.str_contains(values, pat)
+        expected = [False, False, True, True]
+        self.assert_(result.dtype == np.bool_)
+        tm.assert_almost_equal(result, expected)
+
     def test_startswith(self):
         values = Series(['om', NA, 'foo_nom', 'nom', 'bar_foo', NA, 'foo'])
 
@@ -112,6 +137,14 @@ class TestStringMethods(unittest.TestCase):
         self.assert_(isinstance(rs, Series))
         tm.assert_almost_equal(rs, xp)
 
+        #unicode
+        values = Series([u'om', NA, u'foo_nom', u'nom', u'bar_foo', NA,
+                         u'foo'])
+
+        result = values.str.startswith('foo')
+        exp = Series([False, NA, True, False, False, NA, True])
+        tm.assert_series_equal(result, exp)
+
     def test_endswith(self):
         values = Series(['om', NA, 'foo_nom', 'nom', 'bar_foo', NA, 'foo'])
 
@@ -129,6 +162,14 @@ class TestStringMethods(unittest.TestCase):
         self.assert_(isinstance(rs, Series))
         tm.assert_almost_equal(rs, xp)
 
+        #unicode
+        values = Series([u'om', NA, u'foo_nom', u'nom', u'bar_foo', NA,
+                         u'foo'])
+
+        result = values.str.endswith('foo')
+        exp = Series([False, NA, False, False, True, NA, True])
+        tm.assert_series_equal(result, exp)
+
     def test_lower_upper(self):
         values = Series(['om', NA, 'nom', 'nom'])
 
@@ -148,6 +189,16 @@ class TestStringMethods(unittest.TestCase):
         self.assert_(isinstance(rs, Series))
         tm.assert_almost_equal(rs, xp)
 
+        #unicode
+        values = Series([u'om', NA, u'nom', u'nom'])
+
+        result = values.str.upper()
+        exp = Series([u'OM', NA, u'NOM', u'NOM'])
+        tm.assert_series_equal(result, exp)
+
+        result = result.str.lower()
+        tm.assert_series_equal(result, values)
+
     def test_replace(self):
         values = Series(['fooBAD__barBAD', NA])
 
@@ -168,6 +219,17 @@ class TestStringMethods(unittest.TestCase):
         self.assert_(isinstance(rs, Series))
         tm.assert_almost_equal(rs, xp)
 
+        #unicode
+        values = Series([u'fooBAD__barBAD', NA])
+
+        result = values.str.replace('BAD[_]*', '')
+        exp = Series([u'foobar', NA])
+        tm.assert_series_equal(result, exp)
+
+        result = values.str.replace('BAD[_]*', '', n=1)
+        exp = Series([u'foobarBAD', NA])
+        tm.assert_series_equal(result, exp)
+
     def test_repeat(self):
         values = Series(['a', 'b', NA, 'c', NA, 'd'])
 
@@ -188,6 +250,18 @@ class TestStringMethods(unittest.TestCase):
         self.assert_(isinstance(rs, Series))
         tm.assert_almost_equal(rs, xp)
 
+        #unicode
+        values = Series([u'a', u'b', NA, u'c', NA, u'd'])
+
+        result = values.str.repeat(3)
+        exp = Series([u'aaa', u'bbb', NA, u'ccc', NA, u'ddd'])
+        tm.assert_series_equal(result, exp)
+
+        result = values.str.repeat([1, 2, 3, 4, 5, 6])
+        exp = Series([u'a', u'bb', NA, u'cccc', NA, u'dddddd'])
+        tm.assert_series_equal(result, exp)
+
+
     def test_match(self):
         values = Series(['fooBAD__barBAD', NA, 'foo'])
 
@@ -204,6 +278,13 @@ class TestStringMethods(unittest.TestCase):
         self.assert_(isinstance(rs, Series))
         tm.assert_almost_equal(rs, xp)
 
+        #unicode
+        values = Series([u'fooBAD__barBAD', NA, u'foo'])
+
+        result = values.str.match('.*(BAD[_]+).*(BAD)')
+        exp = Series([(u'BAD__', u'BAD'), NA, []])
+        tm.assert_series_equal(result, exp)
+
     def test_join(self):
         values = Series(['a_b_c', 'c_d_e', np.nan, 'f_g_h'])
         result = values.str.split('_').str.join('_')
@@ -219,6 +300,11 @@ class TestStringMethods(unittest.TestCase):
         self.assert_(isinstance(rs, Series))
         tm.assert_almost_equal(rs, xp)
 
+        #unicode
+        values = Series([u'a_b_c', u'c_d_e', np.nan, u'f_g_h'])
+        result = values.str.split('_').str.join('_')
+        tm.assert_series_equal(values, result)
+
     def test_len(self):
         values = Series(['foo', 'fooo', 'fooooo', np.nan, 'fooooooo'])
 
@@ -236,6 +322,13 @@ class TestStringMethods(unittest.TestCase):
         self.assert_(isinstance(rs, Series))
         tm.assert_almost_equal(rs, xp)
 
+        #unicode
+        values = Series([u'foo', u'fooo', u'fooooo', np.nan, u'fooooooo'])
+
+        result = values.str.len()
+        exp = values.map(lambda x: len(x) if com.notnull(x) else NA)
+        tm.assert_series_equal(result, exp)
+
     def test_findall(self):
         values = Series(['fooBAD__barBAD', NA, 'foo', 'BAD'])
 
@@ -253,6 +346,13 @@ class TestStringMethods(unittest.TestCase):
         self.assert_(isinstance(rs, Series))
         tm.assert_almost_equal(rs, xp)
 
+        #unicode
+        values = Series([u'fooBAD__barBAD', NA, u'foo', u'BAD'])
+
+        result = values.str.findall('BAD[_]*')
+        exp = Series([[u'BAD__', u'BAD'], NA, [], [u'BAD']])
+        tm.assert_almost_equal(result, exp)
+
     def test_pad(self):
         values = Series(['a', 'b', NA, 'c', NA, 'eeeeee'])
 
@@ -296,6 +396,21 @@ class TestStringMethods(unittest.TestCase):
         self.assert_(isinstance(rs, Series))
         tm.assert_almost_equal(rs, xp)
 
+        #unicode
+        values = Series([u'a', u'b', NA, u'c', NA, u'eeeeee'])
+
+        result = values.str.pad(5, side='left')
+        exp = Series([u'    a', u'    b', NA, u'    c', NA, u'eeeeee'])
+        tm.assert_almost_equal(result, exp)
+
+        result = values.str.pad(5, side='right')
+        exp = Series([u'a    ', u'b    ', NA, u'c    ', NA, u'eeeeee'])
+        tm.assert_almost_equal(result, exp)
+
+        result = values.str.pad(5, side='both')
+        exp = Series([u'  a  ', u'  b  ', NA, u'  c  ', NA, u'eeeeee'])
+        tm.assert_almost_equal(result, exp)
+
     def test_center(self):
         values = Series(['a', 'b', NA, 'c', NA, 'eeeeee'])
 
@@ -314,6 +429,13 @@ class TestStringMethods(unittest.TestCase):
         self.assert_(isinstance(rs, Series))
         tm.assert_almost_equal(rs, xp)
 
+        #unicode
+        values = Series([u'a', u'b', NA, u'c', NA, u'eeeeee'])
+
+        result = values.str.center(5)
+        exp = Series([u'  a  ', u'  b  ', NA, u'  c  ', NA, u'eeeeee'])
+        tm.assert_almost_equal(result, exp)
+
     def test_split(self):
         values = Series(['a_b_c', 'c_d_e', NA, 'f_g_h'])
 
@@ -332,6 +454,14 @@ class TestStringMethods(unittest.TestCase):
         self.assert_(isinstance(rs, Series))
         tm.assert_almost_equal(rs, xp)
 
+        #unicode
+        values = Series([u'a_b_c', u'c_d_e', NA, u'f_g_h'])
+
+        result = values.str.split('_')
+        exp = Series([[u'a', u'b', u'c'], [u'c', u'd', u'e'], NA,
+                      [u'f', u'g', u'h']])
+        tm.assert_series_equal(result, exp)
+
     def test_slice(self):
         values = Series(['aafootwo','aabartwo', NA, 'aabazqux'])
 
@@ -350,6 +480,13 @@ class TestStringMethods(unittest.TestCase):
         self.assert_(isinstance(rs, Series))
         tm.assert_almost_equal(rs, xp)
 
+        #unicode
+        values = Series([u'aafootwo', u'aabartwo', NA, u'aabazqux'])
+
+        result = values.str.slice(2, 5)
+        exp = Series([u'foo', u'bar', NA, u'baz'])
+        tm.assert_series_equal(result, exp)
+
     def test_slice_replace(self):
         pass
 
@@ -393,6 +530,21 @@ class TestStringMethods(unittest.TestCase):
         self.assert_(isinstance(rs, Series))
         tm.assert_almost_equal(rs, xp)
 
+        #unicode
+        values = Series([u'  aa   ', u' bb \n', NA, u'cc  '])
+
+        result = values.str.strip()
+        exp = Series([u'aa', u'bb', NA, u'cc'])
+        tm.assert_series_equal(result, exp)
+
+        result = values.str.lstrip()
+        exp = Series([u'aa   ', u'bb \n', NA, u'cc  '])
+        tm.assert_series_equal(result, exp)
+
+        result = values.str.rstrip()
+        exp = Series([u'  aa', u' bb', NA, u'cc'])
+        tm.assert_series_equal(result, exp)
+
     def test_wrap(self):
         pass
 
@@ -414,6 +566,13 @@ class TestStringMethods(unittest.TestCase):
         self.assert_(isinstance(rs, Series))
         tm.assert_almost_equal(rs, xp)
 
+        #unicode
+        values = Series([u'a_b_c', u'c_d_e', np.nan, u'f_g_h'])
+
+        result = values.str.split('_').str.get(1)
+        expected = Series([u'b', u'd', np.nan, u'g'])
+        tm.assert_series_equal(result, expected)
+
 if __name__ == '__main__':
     nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
                    exit=False)
