commit 4def8e48d9aaa645b2a20a93ba0ad43417024ca1
Author: Jeff Reback <jeff@reback.net>
Date:   Fri Jul 17 08:58:44 2015 -0400

    TST: fixes stata datetimelike comparisons for #10606

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 4de734dcd..49db94c3b 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -2553,6 +2553,16 @@ def is_datetimelike_v_numeric(a, b):
     return (needs_i8_conversion(a) and f(b)) or (
         needs_i8_conversion(b) and f(a))
 
+def is_datetimelike_v_object(a, b):
+    # return if we have an i8 convertible and object comparision
+    if not hasattr(a,'dtype'):
+        a = np.asarray(a)
+    if not hasattr(b, 'dtype'):
+        b = np.asarray(b)
+    f = lambda x: is_object_dtype(x)
+    return (needs_i8_conversion(a) and f(b)) or (
+        needs_i8_conversion(b) and f(a))
+
 needs_i8_conversion = is_datetime_or_timedelta_dtype
 
 def i8_boxer(arr_or_dtype):
diff --git a/pandas/io/tests/test_stata.py b/pandas/io/tests/test_stata.py
index 3bfb05943..a06c4384d 100644
--- a/pandas/io/tests/test_stata.py
+++ b/pandas/io/tests/test_stata.py
@@ -904,7 +904,6 @@ class TestStata(tm.TestCase):
                      self.dta16_117, self.dta17_117, self.dta18_117,
                      self.dta19_117, self.dta20_117]
 
-        raise nose.SkipTest("buggy test: #10606")
         for fname in files_117:
             for chunksize in 1,2:
                 for convert_categoricals in False, True:
@@ -962,7 +961,6 @@ class TestStata(tm.TestCase):
                      self.dta17_115, self.dta18_115, self.dta19_115,
                      self.dta20_115]
 
-        raise nose.SkipTest("buggy test: #10606")
         for fname in files_115:
             for chunksize in 1,2:
                 for convert_categoricals in False, True:
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 80dc36a36..9f75e42a8 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -24,7 +24,8 @@ import numpy as np
 from numpy.testing import assert_array_equal
 
 import pandas as pd
-from pandas.core.common import is_sequence, array_equivalent, is_list_like, is_number, is_datetimelike_v_numeric
+from pandas.core.common import (is_sequence, array_equivalent, is_list_like, is_number,
+                                is_datetimelike_v_numeric, is_datetimelike_v_object)
 import pandas.compat as compat
 from pandas.compat import(
     filter, map, zip, range, unichr, lrange, lmap, lzip, u, callable, Counter,
@@ -688,10 +689,10 @@ def assert_series_equal(left, right, check_dtype=True,
     elif check_datetimelike_compat:
         # we want to check only if we have compat dtypes
         # e.g. integer and M|m are NOT compat, but we can simply check the values in that case
-        if is_datetimelike_v_numeric(left, right):
-            # datetime.datetime and pandas.tslib.Timestamp may hold
-            # equivalent values but fail assert_frame_equal
-            if not all([x == y for x, y in zip(left, right)]):
+        if is_datetimelike_v_numeric(left, right) or is_datetimelike_v_object(left, right):
+
+            # datetimelike may have different objects (e.g. datetime.datetime vs Timestamp) but will compare equal
+            if not Index(left.values).equals(Index(right.values)):
                 raise AssertionError(
                     '[datetimelike_compat=True] {0} is not equal to {1}.'.format(left.values,
                                                                                  right.values))
