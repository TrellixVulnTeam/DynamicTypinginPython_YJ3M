commit d8a0b4fd0d39dcac4fb7a2297bf25cc442e12729
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jun 28 18:30:42 2012 -0400

    ENH: support file-like objects in ExcelFile, close #1529

diff --git a/RELEASE.rst b/RELEASE.rst
index c5bb354c8..8bda8a292 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -136,6 +136,7 @@ pandas 0.8.0
   - Header argument in DataFrame.to_csv can accept a list of column names to
     use instead of the object's columns (#921)
   - Add ``raise_conflict`` argument to DataFrame.update (#1526)
+  - Support file-like objects in ExcelFile (#1529)
 
 **API Changes**
 
diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index 0cc121437..acfaae7c1 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -1128,22 +1128,48 @@ class ExcelFile(object):
 
     Parameters
     ----------
-    path : string
+    path : string or file-like object
         Path to xls file
+    kind : {'xls', 'xlsx', None}, default None
     """
-    def __init__(self, path):
+    def __init__(self, path_or_buf):
         self.use_xlsx = True
-        if path.endswith('.xls'):
-            self.use_xlsx = False
-            import xlrd
-            self.book = xlrd.open_workbook(path)
+        self.path_or_buf = path_or_buf
+        self.tmpfile = None
+
+        if isinstance(path_or_buf, basestring):
+            if path_or_buf.endswith('.xls'):
+                self.use_xlsx = False
+                import xlrd
+                self.book = xlrd.open_workbook(path_or_buf)
+            else:
+                try:
+                    from openpyxl.reader.excel import load_workbook
+                    self.book = load_workbook(path_or_buf, use_iterators=True)
+                except ImportError:  # pragma: no cover
+                    raise ImportError(_openpyxl_msg)
         else:
+            import tempfile
+            fd  = tempfile.NamedTemporaryFile(delete=False)
+            fd.write(path_or_buf.read())
+            fd.close()
+
             try:
+                import xlrd
+                self.book = xlrd.open_workbook(fd.name)
+                self.use_xlsx = False
+            except Exception:
                 from openpyxl.reader.excel import load_workbook
-                self.book = load_workbook(path, use_iterators=True)
-            except ImportError:  # pragma: no cover
-                raise ImportError(_openpyxl_msg)
-        self.path = path
+                self.book = load_workbook(fd.name, use_iterators=True)
+
+            self.tmpfile = fd.name
+
+    def __name__(self):
+        if self.tmpfile:
+            try:
+                os.remove(self.tmpfile)
+            except Exception:
+                pass
 
     def __repr__(self):
         return object.__repr__(self)
diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index daacb6e3a..ba7d3c905 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -27,6 +27,18 @@ from pandas.io.date_converters import (
     parse_date_time, parse_date_fields, parse_all_fields
 )
 
+def _skip_if_no_xlrd():
+    try:
+        import xlrd
+    except ImportError:
+        raise nose.SkipTest('xlrd not installed, skipping')
+
+def _skip_if_no_openpyxl():
+    try:
+        import openpyxl
+    except ImportError:
+        raise nose.SkipTest('openpyxl not installed, skipping')
+
 
 class TestParsers(unittest.TestCase):
     data1 = """index,A,B,C,D
@@ -678,10 +690,7 @@ baz,7,8,9
         assert_frame_equal(df, df2)
 
     def test_excel_stop_iterator(self):
-        try:
-            import xlrd
-        except ImportError:
-            raise nose.SkipTest('xlrd not installed, skipping')
+        _skip_if_no_xlrd()
 
         excel_data = ExcelFile(os.path.join(self.dirpath, 'test2.xls'))
         parsed = excel_data.parse('Sheet1')
@@ -689,10 +698,7 @@ baz,7,8,9
         assert_frame_equal(parsed, expected)
 
     def test_excel_cell_error_na(self):
-        try:
-            import xlrd
-        except ImportError:
-            raise nose.SkipTest('xlrd not installed, skipping')
+        _skip_if_no_xlrd()
 
         excel_data = ExcelFile(os.path.join(self.dirpath, 'test3.xls'))
         parsed = excel_data.parse('Sheet1')
@@ -700,10 +706,7 @@ baz,7,8,9
         assert_frame_equal(parsed, expected)
 
     def test_excel_table(self):
-        try:
-            import xlrd
-        except ImportError:
-            raise nose.SkipTest('xlrd not installed, skipping')
+        _skip_if_no_xlrd()
 
         pth = os.path.join(self.dirpath, 'test.xls')
         xls = ExcelFile(pth)
@@ -713,11 +716,23 @@ baz,7,8,9
         assert_frame_equal(df, df2)
         assert_frame_equal(df3, df2)
 
+    def test_excel_read_buffer(self):
+        _skip_if_no_xlrd()
+        _skip_if_no_openpyxl()
+
+        pth = os.path.join(self.dirpath, 'test.xls')
+        f = open(pth, 'rb')
+        xls = ExcelFile(f)
+        # it works
+        xls.parse('Sheet1', index_col=0, parse_dates=True)
+
+        pth = os.path.join(self.dirpath, 'test.xlsx')
+        f = open(pth, 'rb')
+        xl = ExcelFile(f)
+        df = xl.parse('Sheet1', index_col=0, parse_dates=True)
+
     def test_xlsx_table(self):
-        try:
-            import openpyxl
-        except ImportError:
-            raise nose.SkipTest('openpyxl not installed, skipping')
+        _skip_if_no_openpyxl()
 
         pth = os.path.join(self.dirpath, 'test.xlsx')
         xlsx = ExcelFile(pth)
