commit 388deaf81e98ccbaf9952cba1b84e6955ff99a9b
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Sep 9 14:25:12 2012 -0400

    TST: unit test for #1808, don't fail console_encode test on platforms that can't encode unicode character

diff --git a/pandas/tests/test_common.py b/pandas/tests/test_common.py
index f7c6420f6..d8834924b 100644
--- a/pandas/tests/test_common.py
+++ b/pandas/tests/test_common.py
@@ -302,11 +302,17 @@ class TestTake(unittest.TestCase):
         tm.assert_almost_equal(result, expected)
 
     def test_console_encode(self):
+        import sys
 
         # stub test
         # need to mock-out sys.stdin.encoding=None for real test
         result = com.console_encode(u"\u05d0")
-        assert not result == '?'
+        expected = u"\u05d0".encode(sys.stdin.encoding,
+                                    errors='replace')
+
+        # lot of console encodings, ISO-8869-1, cp850, etc. won't encode this
+        # character
+        self.assertEqual(result, expected)
 
 
 if __name__ == '__main__':
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index d88e9f3ca..6ce16e284 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3495,6 +3495,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
     def test_to_excel_float_format(self):
         try:
             import xlwt
+            import openpyxl
         except ImportError:
             raise nose.SkipTest
 
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index 7c86f0069..79fb293b2 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -541,6 +541,24 @@ class TestResample(unittest.TestCase):
         exp = df.asfreq('T')
         tm.assert_frame_equal(result, exp)
 
+    def test_how_lambda_functions(self):
+        ts = _simple_ts('1/1/2000', '4/1/2000')
+
+        result = ts.resample('M', how=lambda x: x.mean())
+        exp = ts.resample('M', how='mean')
+        tm.assert_series_equal(result, exp)
+
+        self.assertRaises(Exception, ts.resample, 'M',
+                          how=[lambda x: x.mean(), lambda x: x.std()])
+
+        result = ts.resample('M', how={'foo': lambda x: x.mean(),
+                                       'bar': lambda x: x.std()})
+        foo_exp = ts.resample('M', how='mean')
+        bar_exp = ts.resample('M', how='std')
+
+        tm.assert_series_equal(result['foo'], foo_exp)
+        tm.assert_series_equal(result['bar'], bar_exp)
+
 def _simple_ts(start, end, freq='D'):
     rng = date_range(start, end, freq=freq)
     return Series(np.random.randn(len(rng)), index=rng)
