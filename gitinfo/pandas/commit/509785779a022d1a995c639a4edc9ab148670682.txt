commit 509785779a022d1a995c639a4edc9ab148670682
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Aug 22 22:18:33 2011 -0400

    TST: more ols test coverage

diff --git a/pandas/stats/ols.py b/pandas/stats/ols.py
index ca2e81a33..bfd326f3b 100644
--- a/pandas/stats/ols.py
+++ b/pandas/stats/ols.py
@@ -525,10 +525,7 @@ class MovingOLS(OLS):
         self._window_type = common._get_window_type(window_type)
 
         if self._is_rolling:
-            if window is None:
-                raise Exception('Must pass window when doing rolling '
-                                'regression')
-
+            assert(window is not None)
             if min_periods is None:
                 min_periods = window
         else:
@@ -578,7 +575,7 @@ class MovingOLS(OLS):
         return DataFrame(f_stat_dicts).T
 
     def f_test(self, hypothesis):
-        raise Exception('f_test not supported for rolling/expanding OLS')
+        raise NotImplementedError('must use full sample')
 
     @cache_readonly
     def forecast_mean(self):
diff --git a/pandas/stats/tests/test_ols.py b/pandas/stats/tests/test_ols.py
index aa6f6fe03..d256cd43d 100644
--- a/pandas/stats/tests/test_ols.py
+++ b/pandas/stats/tests/test_ols.py
@@ -194,17 +194,23 @@ class TestOLSMisc(unittest.TestCase):
         y = tm.makeTimeSeries()
         x = tm.makeTimeDataFrame()
 
-        model1 = ols(y=y, x=x)
-
         x_with = x.copy()
         x_with['intercept'] = 1.
 
+        model1 = ols(y=y, x=x)
         model2 = ols(y=y, x=x_with, intercept=False)
         assert_series_equal(model1.beta, model2.beta)
 
         # TODO: can we infer whether the intercept is there...
         self.assert_(model1.r2 != model2.r2)
 
+        # rolling
+
+        model1 = ols(y=y, x=x, window=20)
+        model2 = ols(y=y, x=x_with, window=20, intercept=False)
+        assert_frame_equal(model1.beta, model2.beta)
+        self.assert_((model1.r2 != model2.r2).all())
+
     def test_summary_many_terms(self):
         x = DataFrame(np.random.randn(100, 20))
         y = np.random.randn(100)
@@ -216,6 +222,7 @@ class TestOLSMisc(unittest.TestCase):
         x = tm.makeTimeDataFrame()
         model1 = ols(y=y, x=x)
         assert_series_equal(model1.y_predict, model1.y_fitted)
+        assert_almost_equal(model1._y_predict_raw, model1._y_fitted_raw)
 
     def test_longpanel_series_combo(self):
         wp = tm.makeWidePanel()
@@ -227,6 +234,19 @@ class TestOLSMisc(unittest.TestCase):
         self.assert_(isinstance(model, PanelOLS))
         model.summary
 
+    def test_various_attributes(self):
+        # just make sure everything "works". test correctness elsewhere
+
+        x = DataFrame(np.random.randn(100, 5))
+        y = np.random.randn(100)
+        model = ols(y=y, x=x, window=20)
+
+        series_attrs = ['rank', 'df', 'forecast_mean', 'forecast_vol']
+
+        for attr in series_attrs:
+            value = getattr(model, attr)
+            self.assert_(isinstance(value, Series))
+
 class TestPanelOLS(BaseTest):
 
     FIELDS = ['beta', 'df', 'df_model', 'df_resid', 'f_stat',
