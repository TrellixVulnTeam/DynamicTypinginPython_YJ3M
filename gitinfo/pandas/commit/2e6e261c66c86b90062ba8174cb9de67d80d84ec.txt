commit 2e6e261c66c86b90062ba8174cb9de67d80d84ec
Author: Phillip Cloud <cpcloud@gmail.com>
Date:   Tue Sep 24 14:52:36 2013 -0400

    TST: test nondate vs. date comparisons in query

diff --git a/doc/source/release.rst b/doc/source/release.rst
index e49812b20..a932eda55 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -335,6 +335,9 @@ Experimental Features
 - A :meth:`~pandas.DataFrame.query` method has been added that allows
   you to select elements of a ``DataFrame`` using a natural query syntax nearly
   identical to Python syntax.
+- ``pd.eval`` and friends now evaluate operations involving ``datetime64``
+  objects in Python space because ``numexpr`` cannot handle ``NaT`` values
+  (:issue:`4897`).
 
 .. _release.bug_fixes-0.13.0:
 
diff --git a/pandas/computation/align.py b/pandas/computation/align.py
index da120776d..f420d0dac 100644
--- a/pandas/computation/align.py
+++ b/pandas/computation/align.py
@@ -111,15 +111,19 @@ def _align_core(terms):
     typ = biggest._constructor
     axes = biggest.axes
     naxes = len(axes)
+    gt_than_one_axis = naxes > 1
 
     for value in (terms[i].value for i in term_index):
+        is_series = isinstance(value, pd.Series)
+        is_series_and_gt_one_axis = is_series and gt_than_one_axis
+
         for axis, items in enumerate(value.axes):
-            if isinstance(value, pd.Series) and naxes > 1:
+            if is_series_and_gt_one_axis:
                 ax, itm = naxes - 1, value.index
             else:
                 ax, itm = axis, items
-            # TODO: use is_ method when jtratner's PR is merged
-            if axes[ax] is not itm:
+
+            if not axes[ax].is_(itm):
                 axes[ax] = axes[ax].join(itm, how='outer')
 
     for i, ndim in compat.iteritems(ndims):
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index bed72b69a..43f89f316 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -11498,6 +11498,19 @@ class TestDataFrameQueryNumExprPandas(unittest.TestCase):
         expec = df[(df.index.to_series() < '20130101') & ('20130101' < df.dates3)]
         assert_frame_equal(res, expec)
 
+    def test_date_query_with_non_date(self):
+        engine, parser = self.engine, self.parser
+
+        n = 10
+        df = DataFrame({'dates': date_range('1/1/2012', periods=n),
+             'nondate': np.arange(n)})
+
+        ops = '==', '!=', '<', '>', '<=', '>='
+
+        for op in ops:
+            with tm.assertRaises(TypeError):
+                df.query('dates %s nondate' % op, parser=parser, engine=engine)
+
     def test_query_scope(self):
         engine, parser = self.engine, self.parser
         from pandas.computation.common import NameResolutionError
