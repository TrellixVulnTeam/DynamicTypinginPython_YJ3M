commit 6beadd476ee75f893564d883d9bb84875734f7f4
Author: Chang She <chang@lambdafoundry.com>
Date:   Wed May 9 11:07:57 2012 -0400

    BLD: platform int fixes

diff --git a/pandas/core/algorithms.py b/pandas/core/algorithms.py
index a91e38fda..e7126fd48 100644
--- a/pandas/core/algorithms.py
+++ b/pandas/core/algorithms.py
@@ -97,6 +97,8 @@ def factorize(values, sort=False, order=None, na_sentinel=-1):
     table = hash_klass(len(values))
     labels, counts = table.get_labels(values, uniques, 0, na_sentinel)
 
+    labels = com._ensure_platform_int(labels)
+    
     uniques = com._asarray_tuplesafe(uniques)
     if sort and len(counts) > 0:
         sorter = uniques.argsort()
diff --git a/pandas/core/factor.py b/pandas/core/factor.py
index 9f0d55c5a..650ff033f 100644
--- a/pandas/core/factor.py
+++ b/pandas/core/factor.py
@@ -1,5 +1,5 @@
 import numpy as np
-
+import pandas.core.common as com
 import pandas._tseries as lib
 
 
@@ -57,10 +57,10 @@ def unique_with_labels(values):
     rizer = lib.Factorizer(len(values))
     labels, _ = rizer.factorize(values, sort=False)
     uniques = Index(rizer.uniques)
-
+    labels = com._ensure_platform_int(labels)
     try:
         sorter = uniques.argsort()
-        reverse_indexer = np.empty(len(sorter), dtype=np.int64)
+        reverse_indexer = np.empty(len(sorter), dtype=np.int_)
         reverse_indexer.put(sorter, np.arange(len(sorter)))
         labels = reverse_indexer.take(labels)
         uniques = uniques.take(sorter)
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 80a08ec55..d0b9ef4fb 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1378,9 +1378,10 @@ class MultiIndex(Index):
                 return self.nlevels
             else:
                 return 0
-
+        
+        int64_labels = [com._ensure_int64(lab) for lab in self.labels]
         for k in range(self.nlevels, 0, -1):
-            if lib.is_lexsorted(self.labels[:k]):
+            if lib.is_lexsorted(int64_labels[:k]):
                 return k
 
         return 0
@@ -1690,6 +1691,7 @@ class MultiIndex(Index):
         if not ascending:
             indexer = indexer[::-1]
 
+        indexer = com._ensure_platform_int(indexer)
         new_labels = [lab.take(indexer) for lab in self.labels]
 
         new_index = MultiIndex._from_elements(self.values.take(indexer),
diff --git a/pandas/core/series.py b/pandas/core/series.py
index c233567ae..81e95a46c 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -970,8 +970,9 @@ copy : boolean, default False
 
             # call cython function
             max_bin = len(level_index)
+            labels = com._ensure_int64(self.index.labels[level])
             counts = lib.count_level_1d(mask.view(np.uint8),
-                                        self.index.labels[level], max_bin)
+                                        labels, max_bin)
             return Series(counts, index=level_index)
 
         return notnull(self.values).sum()
diff --git a/pandas/src/join.pyx b/pandas/src/join.pyx
index ea4bf2f98..4dbda905b 100644
--- a/pandas/src/join.pyx
+++ b/pandas/src/join.pyx
@@ -177,6 +177,8 @@ def full_outer_join(ndarray[int64_t] left, ndarray[int64_t] right,
             _get_result_indexer(right_sorter, right_indexer))
 
 def _get_result_indexer(sorter, indexer):
+    if indexer.dtype != np.int_:
+        indexer = indexer.astype(np.int_)
     res = sorter.take(indexer)
     np.putmask(res, indexer == -1, -1)
     return res
diff --git a/pandas/tools/merge.py b/pandas/tools/merge.py
index 7f8409b39..c26c325b2 100644
--- a/pandas/tools/merge.py
+++ b/pandas/tools/merge.py
@@ -434,10 +434,10 @@ def _sort_labels(uniques, left, right):
     reverse_indexer = np.empty(len(sorter), dtype=np.int64)
     reverse_indexer.put(sorter, np.arange(len(sorter)))
 
-    new_left = reverse_indexer.take(left)
+    new_left = reverse_indexer.take(com._ensure_platform_int(left))
     np.putmask(new_left, left == -1, -1)
 
-    new_right = reverse_indexer.take(right)
+    new_right = reverse_indexer.take(com._ensure_platform_int(right))
     np.putmask(new_right, right == -1, -1)
 
     return new_left, new_right
