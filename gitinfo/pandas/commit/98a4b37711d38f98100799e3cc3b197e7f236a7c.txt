commit 98a4b37711d38f98100799e3cc3b197e7f236a7c
Author: jreback <jeff@reback.net>
Date:   Mon Mar 17 09:03:11 2014 -0400

    DOC: update groupby pd.Grouper docs

diff --git a/doc/source/api.rst b/doc/source/api.rst
index 811301a6b..1c80712e8 100644
--- a/doc/source/api.rst
+++ b/doc/source/api.rst
@@ -1193,6 +1193,7 @@ Indexing, iteration
    GroupBy.groups
    GroupBy.indices
    GroupBy.get_group
+   Grouper
 
 Function application
 ~~~~~~~~~~~~~~~~~~~~
diff --git a/doc/source/release.rst b/doc/source/release.rst
index c0415a350..bc4807a29 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -132,7 +132,7 @@ API Changes
   ``FutureWarning`` is raised  to alert that the old ``rows`` and ``cols`` arguments
   will not be supported in a future release (:issue:`5505`)
 
-- Allow specification of a more complex groupby, via ``pd.Groupby`` (:issue:`3794`)
+- Allow specification of a more complex groupby, via ``pd.Grouper`` (:issue:`3794`)
 
 - A tuple passed to ``DataFame.sort_index`` will be interpreted as the levels of
   the index, rather than requiring a list of tuple (:issue:`4370`)
diff --git a/doc/source/v0.14.0.txt b/doc/source/v0.14.0.txt
index 54995fc8d..ea321cbab 100644
--- a/doc/source/v0.14.0.txt
+++ b/doc/source/v0.14.0.txt
@@ -94,7 +94,7 @@ These are out-of-bounds selections
 
      g.nth(0, dropna='any')  # similar to old behaviour
 
-- Allow specification of a more complex groupby via ``pd.Groupby``, such as grouping
+- Allow specification of a more complex groupby via ``pd.Grouper``, such as grouping
   by a Time and a string field simultaneously. See :ref:`the docs <groupby.specify>`. (:issue:`3794`)
 
 - Local variable usage has changed in
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 683c07b70..9deee2d59 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -141,14 +141,26 @@ def _last_compat(x, axis=0):
 
 class Grouper(object):
     """
-    A Grouper allows the user to specify a groupby instruction
+    A Grouper allows the user to specify a groupby instruction for a target object
+
+    This specification will select a column via the key parameter, or if the level and/or
+    axis parameters are given, a level of the index of the target object.
+
+    These are local specifications and will override 'global' settings, that is the parameters
+    axis and level which are passed to the groupby itself.
 
     Parameters
     ----------
-    key : groupby key, default None
-    level : name, int level number, default None
-    freq : string / freqency object, default None
-    sort : boolean, whether to sort the resulting labels, default True
+    key : string, defaults to None
+        groupby key, which selects the grouping column of the target
+    level : name/number, defaults to None
+        the level for the target index
+    freq : string / freqency object, defaults to None
+        This will groupby the specified frequency if the target selection (via key or level) is
+        a datetime-like object
+    axis : number/name of the axis, defaults to None
+    sort : boolean, default to False
+        whether to sort the resulting labels
 
     Returns
     -------
@@ -156,10 +168,10 @@ class Grouper(object):
 
     Examples
     --------
-    df.groupby(Group(key='A')) : syntatic sugar for df.groupby('A')
-    df.groupby(Group(key='date',freq='60s')) : specify a resample on the column 'date'
-    df.groupby(Group(level='date',freq='60s',axis=1)) :
-       specify a resample on the level 'date' on the columns axis with a frequency of 60s
+    >>> df.groupby(Grouper(key='A')) : syntatic sugar for df.groupby('A')
+    >>> df.groupby(Grouper(key='date',freq='60s')) : specify a resample on the column 'date'
+    >>> df.groupby(Grouper(level='date',freq='60s',axis=1)) :
+        specify a resample on the level 'date' on the columns axis with a frequency of 60s
 
     """
 
