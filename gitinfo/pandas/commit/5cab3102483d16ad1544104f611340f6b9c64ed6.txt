commit 5cab3102483d16ad1544104f611340f6b9c64ed6
Author: Dale Jung <dale@dalejung.com>
Date:   Sun Mar 30 06:36:38 2014 -0400

    PRF: .shift() speedup: Only pass in c_contiguous arrays to np.roll/take

diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index fc7883f78..67f869492 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -3238,9 +3238,9 @@ class NDFrame(PandasObject):
         if periods == 0:
             return self
 
-        axis = self._get_axis_number(axis)
+        block_axis = self._get_block_manager_axis(axis)
         if freq is None and not len(kwds):
-            new_data = self._data.shift(periods=periods, axis=axis)
+            new_data = self._data.shift(periods=periods, axis=block_axis)
         else:
             return self.tshift(periods, freq, **kwds)
 
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index d32664559..ed8cfb59b 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -966,7 +966,12 @@ class Block(PandasObject):
         # convert integer to float if necessary. need to do a lot more than
         # that, handle boolean etc also
         new_values, fill_value = com._maybe_upcast(self.values)
-        new_values = np.roll(new_values.T,periods,axis=axis)
+        # make sure array sent to np.roll is c_contiguous
+        f_ordered = new_values.flags.f_contiguous
+        if f_ordered:
+            new_values = new_values.T
+            axis = new_values.ndim - axis - 1
+        new_values = np.roll(new_values, periods, axis=axis)
         axis_indexer = [ slice(None) ] * self.ndim
         if periods > 0:
             axis_indexer[axis] = slice(None,periods)
@@ -974,7 +979,11 @@ class Block(PandasObject):
             axis_indexer[axis] = slice(periods,None)
         new_values[tuple(axis_indexer)] = fill_value
 
-        return [make_block(new_values.T, self.items, self.ref_items,
+        # restore original order
+        if f_ordered:
+            new_values = new_values.T
+
+        return [make_block(new_values, self.items, self.ref_items,
                            ndim=self.ndim, fastpath=True)]
 
     def eval(self, func, other, raise_on_error=True, try_cast=False):
