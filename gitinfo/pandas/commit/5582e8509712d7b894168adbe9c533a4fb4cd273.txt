commit 5582e8509712d7b894168adbe9c533a4fb4cd273
Author: Adam Klein <adamklein@gmail.com>
Date:   Thu Mar 15 17:37:49 2012 -0400

    TST: added testing for intervalindex

diff --git a/pandas/core/datetools.py b/pandas/core/datetools.py
index 7e0196fb4..9d1a5d227 100644
--- a/pandas/core/datetools.py
+++ b/pandas/core/datetools.py
@@ -497,8 +497,9 @@ def parse_time_string(arg):
         stopped = False
         for attr in ["year", "month", "day", "hour",
                      "minute", "second", "microsecond"]:
+            can_be_zero = ['hour', 'minute', 'second', 'microsecond']
             value = getattr(parsed, attr)
-            if value is not None and value != 0:
+            if value is not None and (value != 0 or attr in can_be_zero):
                 repl[attr] = value
                 if not stopped:
                     reso = attr
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 4fb35c936..2fd1ec3c4 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -171,6 +171,14 @@ class Index(np.ndarray):
                 return False
         return True
 
+    def _mplib_repr(self):
+        # how to represent ourselves to matplotlib: return tuple that follows
+        # (representation data, need_to_set_xticklabels)
+        if self.is_numeric() or self.is_datetype():
+            return np.asarray(self), False
+        else:
+            return range(len(self)), True
+
     def get_duplicates(self):
         from collections import defaultdict
         counter = defaultdict(lambda: 0)
@@ -1392,7 +1400,7 @@ class DatetimeIndex(Int64Index):
 
         Returns
         -------
-        shifted : DateRange
+        shifted : DatetimeIndex
         """
         if freq is not None and freq != self.offset:
             return Index.shift(self, n, freq)
@@ -2006,6 +2014,29 @@ class IntervalIndex(Int64Index):
         except:
             return super(DatetimeIndex, self).map(func_to_map)
 
+    def _mplib_repr(self):
+        # how to represent ourselves to matplotlib
+        return datetools._skts_box_array(self, self.freq), False
+
+    def shift(self, n):
+        """
+        Specialized shift which produces an IntervalIndex
+
+        Parameters
+        ----------
+        n : int
+            Periods to shift by
+        freq : freq string
+
+        Returns
+        -------
+        shifted : IntervalIndex
+        """
+        if n == 0:
+            return self
+
+        return IntervalIndex(data=self.values + n, freq=self.freq)
+
     @property
     def inferred_type(self):
         # b/c data is represented as ints make sure we can't have ambiguous
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 3955840d4..0c9e09bcd 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -2096,18 +2096,7 @@ copy : boolean, default False
 
         if kind == 'line':
             if use_index:
-                if self.index.is_numeric() or self.index.is_datetype():
-                    """
-                    Matplotlib supports numeric values or datetime objects as
-                    xaxis values. Taking LBYL approach here, by the time
-                    matplotlib raises exception when using non numeric/datetime
-                    values for xaxis, several actions are already taken by plt.
-                    """
-                    need_to_set_xticklabels = False
-                    x = np.asarray(self.index)
-                else:
-                    need_to_set_xticklabels = True
-                    x = range(len(self))
+                x, need_to_set_xticklabels = self.index._mplib_repr()
             else:
                 need_to_set_xticklabels = False
                 x = range(len(self))
diff --git a/pandas/tests/test_interval.py b/pandas/tests/test_interval.py
index 9fee9ab31..e20fc5227 100644
--- a/pandas/tests/test_interval.py
+++ b/pandas/tests/test_interval.py
@@ -11,6 +11,7 @@ from datetime import datetime
 
 from numpy.ma.testutils import assert_equal
 from pandas.core.datetools import Interval
+from pandas.core.index import IntervalIndex
 
 class TestIntervalProperties(TestCase):
     "Test properties such as year, month, weekday, etc...."
@@ -779,6 +780,124 @@ class TestFreqConversion(TestCase):
 
         assert_equal(ival_S.resample('S'), ival_S)
 
+class TestIntervalIndex(TestCase):
+    def __init__(self, *args, **kwds):
+        TestCase.__init__(self, *args, **kwds)
+
+    def test_constructor(self):
+        ii = IntervalIndex(freq='A', start='1/1/2001', end='12/1/2009')
+        assert_equal(len(ii), 9)
+
+        ii = IntervalIndex(freq='Q', start='1/1/2001', end='12/1/2009')
+        assert_equal(len(ii), 4 * 9)
+
+        ii = IntervalIndex(freq='M', start='1/1/2001', end='12/1/2009')
+        assert_equal(len(ii), 12 * 9)
+
+        ii = IntervalIndex(freq='D', start='1/1/2001', end='12/31/2009')
+        assert_equal(len(ii), 365 * 9 + 2)
+
+        ii = IntervalIndex(freq='B', start='1/1/2001', end='12/31/2009')
+        assert_equal(len(ii), 261 * 9)
+
+        ii = IntervalIndex(freq='H', start='1/1/2001', end='12/31/2001 23:00')
+        assert_equal(len(ii), 365 * 24)
+
+        ii = IntervalIndex(freq='Min', start='1/1/2001', end='1/1/2001 23:59')
+        assert_equal(len(ii), 24 * 60)
+
+        ii = IntervalIndex(freq='S', start='1/1/2001', end='1/1/2001 23:59:59')
+        assert_equal(len(ii), 24 * 60 * 60)
+
+    def test_shift(self):
+        ii1 = IntervalIndex(freq='A', start='1/1/2001', end='12/1/2009')
+        ii2 = IntervalIndex(freq='A', start='1/1/2002', end='12/1/2010')
+        assert_equal(len(ii1), len(ii2))
+        assert_equal(ii1.shift(1).values, ii2.values)
+
+        ii1 = IntervalIndex(freq='A', start='1/1/2001', end='12/1/2009')
+        ii2 = IntervalIndex(freq='A', start='1/1/2000', end='12/1/2008')
+        assert_equal(len(ii1), len(ii2))
+        assert_equal(ii1.shift(-1).values, ii2.values)
+
+        ii1 = IntervalIndex(freq='M', start='1/1/2001', end='12/1/2009')
+        ii2 = IntervalIndex(freq='M', start='2/1/2001', end='1/1/2010')
+        assert_equal(len(ii1), len(ii2))
+        assert_equal(ii1.shift(1).values, ii2.values)
+
+        ii1 = IntervalIndex(freq='M', start='1/1/2001', end='12/1/2009')
+        ii2 = IntervalIndex(freq='M', start='12/1/2000', end='11/1/2009')
+        assert_equal(len(ii1), len(ii2))
+        assert_equal(ii1.shift(-1).values, ii2.values)
+
+        ii1 = IntervalIndex(freq='D', start='1/1/2001', end='12/1/2009')
+        ii2 = IntervalIndex(freq='D', start='1/2/2001', end='12/2/2009')
+        assert_equal(len(ii1), len(ii2))
+        assert_equal(ii1.shift(1).values, ii2.values)
+
+        ii1 = IntervalIndex(freq='D', start='1/1/2001', end='12/1/2009')
+        ii2 = IntervalIndex(freq='D', start='12/31/2000', end='11/30/2009')
+        assert_equal(len(ii1), len(ii2))
+        assert_equal(ii1.shift(-1).values, ii2.values)
+
+    def test_resample(self):
+        ii1 = IntervalIndex(freq='A', start='1/1/2001', end='1/1/2001')
+        ii2 = IntervalIndex(freq='Q', start='1/1/2001', end='1/1/2001')
+        ii3 = IntervalIndex(freq='M', start='1/1/2001', end='1/1/2001')
+        ii4 = IntervalIndex(freq='D', start='1/1/2001', end='1/1/2001')
+        ii5 = IntervalIndex(freq='H', start='1/1/2001', end='1/1/2001 00:00')
+        ii6 = IntervalIndex(freq='Min', start='1/1/2001', end='1/1/2001 00:00')
+        ii7 = IntervalIndex(freq='S', start='1/1/2001', end='1/1/2001 00:00:00')
+
+        self.assertEquals(ii1.resample('Q', 'S'), ii2)
+        self.assertEquals(ii1.resample('Q', 'S'), ii2)
+        self.assertEquals(ii1.resample('M', 'S'), ii3)
+        self.assertEquals(ii1.resample('D', 'S'), ii4)
+        self.assertEquals(ii1.resample('H', 'S'), ii5)
+        self.assertEquals(ii1.resample('Min', 'S'), ii6)
+        self.assertEquals(ii1.resample('S', 'S'), ii7)
+
+        self.assertEquals(ii2.resample('A', 'S'), ii1)
+        self.assertEquals(ii2.resample('M', 'S'), ii3)
+        self.assertEquals(ii2.resample('D', 'S'), ii4)
+        self.assertEquals(ii2.resample('H', 'S'), ii5)
+        self.assertEquals(ii2.resample('Min', 'S'), ii6)
+        self.assertEquals(ii2.resample('S', 'S'), ii7)
+
+        self.assertEquals(ii3.resample('A', 'S'), ii1)
+        self.assertEquals(ii3.resample('Q', 'S'), ii2)
+        self.assertEquals(ii3.resample('D', 'S'), ii4)
+        self.assertEquals(ii3.resample('H', 'S'), ii5)
+        self.assertEquals(ii3.resample('Min', 'S'), ii6)
+        self.assertEquals(ii3.resample('S', 'S'), ii7)
+
+        self.assertEquals(ii4.resample('A', 'S'), ii1)
+        self.assertEquals(ii4.resample('Q', 'S'), ii2)
+        self.assertEquals(ii4.resample('M', 'S'), ii3)
+        self.assertEquals(ii4.resample('H', 'S'), ii5)
+        self.assertEquals(ii4.resample('Min', 'S'), ii6)
+        self.assertEquals(ii4.resample('S', 'S'), ii7)
+
+        self.assertEquals(ii5.resample('A', 'S'), ii1)
+        self.assertEquals(ii5.resample('Q', 'S'), ii2)
+        self.assertEquals(ii5.resample('M', 'S'), ii3)
+        self.assertEquals(ii5.resample('D', 'S'), ii4)
+        self.assertEquals(ii5.resample('Min', 'S'), ii6)
+        self.assertEquals(ii5.resample('S', 'S'), ii7)
+
+        self.assertEquals(ii6.resample('A', 'S'), ii1)
+        self.assertEquals(ii6.resample('Q', 'S'), ii2)
+        self.assertEquals(ii6.resample('M', 'S'), ii3)
+        self.assertEquals(ii6.resample('D', 'S'), ii4)
+        self.assertEquals(ii6.resample('H', 'S'), ii5)
+        self.assertEquals(ii6.resample('S', 'S'), ii7)
+
+        self.assertEquals(ii7.resample('A', 'S'), ii1)
+        self.assertEquals(ii7.resample('Q', 'S'), ii2)
+        self.assertEquals(ii7.resample('M', 'S'), ii3)
+        self.assertEquals(ii7.resample('D', 'S'), ii4)
+        self.assertEquals(ii7.resample('H', 'S'), ii5)
+        self.assertEquals(ii7.resample('Min', 'S'), ii6)
 
 class TestMethods(TestCase):
     "Base test class for MaskedArrays."
