commit 05e734ab171be0fda838c6b12839c38fa588da2c
Author: Maoyuan Liu <m.liu@bom.gov.au>
Date:   Thu Apr 28 15:47:49 2016 +1000

    BUG: .isin(...) now coerces sets to lists
    
    closes #12988
    closes #13014

diff --git a/doc/source/whatsnew/v0.18.1.txt b/doc/source/whatsnew/v0.18.1.txt
index 9cd62ced1..3345cb3d2 100644
--- a/doc/source/whatsnew/v0.18.1.txt
+++ b/doc/source/whatsnew/v0.18.1.txt
@@ -238,6 +238,7 @@ Other Enhancements
 
 - ``pd.crosstab()`` has gained a ``normalize`` argument for normalizing frequency tables (:issue:`12569`). Examples in the updated docs :ref:`here <reshaping.crosstabulations>`.
 - ``.resample(..).interpolate()`` is now supported (:issue:`12925`)
+- ``.isin()`` now accepts passed ``sets`` (:issue:`12988`)
 
 .. _whatsnew_0181.sparse:
 
@@ -584,7 +585,6 @@ Bug Fixes
 
 - Bug in consistency of ``.name`` on ``.groupby(..).apply(..)`` cases (:issue:`12363`)
 
-
 - Bug in ``Timestamp.__repr__`` that caused ``pprint`` to fail in nested structures (:issue:`12622`)
 - Bug in ``Timedelta.min`` and ``Timedelta.max``, the properties now report the true minimum/maximum ``timedeltas`` as recognized by Pandas. See :ref:`documentation <timedeltas.limitations>`. (:issue:`12727`)
 - Bug in ``.quantile()`` with interpolation may coerce to ``float`` unexpectedly (:issue:`12772`)
diff --git a/pandas/core/algorithms.py b/pandas/core/algorithms.py
index 590bf754d..4b40bce79 100644
--- a/pandas/core/algorithms.py
+++ b/pandas/core/algorithms.py
@@ -114,6 +114,8 @@ def isin(comps, values):
         raise TypeError("only list-like objects are allowed to be passed"
                         " to isin(), you passed a "
                         "[{0}]".format(type(values).__name__))
+    if not isinstance(values, np.ndarray):
+        values = list(values)
 
     # GH11232
     # work-around for numpy < 1.8 and comparisions on py3
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 2af3dd26c..d5571e61a 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -2370,11 +2370,15 @@ class Series(base.IndexOpsMixin, strings.StringAccessorMixin,
 
         Parameters
         ----------
-        values : list-like
+        values : set or list-like
             The sequence of values to test. Passing in a single string will
             raise a ``TypeError``. Instead, turn a single string into a
             ``list`` of one element.
 
+            .. versionadded:: 0.18.1
+
+            Support for values as a set
+
         Returns
         -------
         isin : Series (bool dtype)
diff --git a/pandas/formats/format.py b/pandas/formats/format.py
index cdebaf286..c3ffc018d 100644
--- a/pandas/formats/format.py
+++ b/pandas/formats/format.py
@@ -977,7 +977,7 @@ class HTMLFormatter(TableFormatter):
                 import IPython
                 if IPython.__version__ < LooseVersion('3.0.0'):
                     div_style = ' style="max-width:1500px;overflow:auto;"'
-            except ImportError:
+            except (ImportError, AttributeError):
                 pass
 
             self.write('<div{0}>'.format(div_style))
diff --git a/pandas/indexes/base.py b/pandas/indexes/base.py
index 50c86c8bd..dc178c117 100644
--- a/pandas/indexes/base.py
+++ b/pandas/indexes/base.py
@@ -2246,8 +2246,13 @@ class Index(IndexOpsMixin, StringAccessorMixin, PandasObject):
 
         Parameters
         ----------
-        values : set or sequence of values
+        values : set or list-like
             Sought values.
+
+            .. versionadded:: 0.18.1
+
+            Support for values as a set
+
         level : str or int, optional
             Name or position of the index level to use (if the index is a
             MultiIndex).
diff --git a/pandas/tests/indexes/test_base.py b/pandas/tests/indexes/test_base.py
index d1ac4ff00..1591df5f1 100644
--- a/pandas/tests/indexes/test_base.py
+++ b/pandas/tests/indexes/test_base.py
@@ -1191,6 +1191,10 @@ class TestIndex(Base, tm.TestCase):
         expected = np.array([False, False, True, True])
         tm.assert_numpy_array_equal(result, expected)
 
+        # set
+        result = idx.isin(set(values))
+        tm.assert_numpy_array_equal(result, expected)
+
         # empty, return dtype bool
         idx = Index([])
         result = idx.isin(values)
diff --git a/pandas/tests/series/test_analytics.py b/pandas/tests/series/test_analytics.py
index 031385de7..dd109d803 100644
--- a/pandas/tests/series/test_analytics.py
+++ b/pandas/tests/series/test_analytics.py
@@ -1140,6 +1140,9 @@ class TestSeriesAnalytics(TestData, tm.TestCase):
         result = s.isin([np.datetime64(s[1])])
         assert_series_equal(result, expected2)
 
+        result = s.isin(set(s[0:2]))
+        assert_series_equal(result, expected)
+
         # timedelta64[ns]
         s = Series(pd.to_timedelta(lrange(5), unit='d'))
         result = s.isin(s[0:2])
diff --git a/pandas/tests/test_algos.py b/pandas/tests/test_algos.py
index 151ded48d..1c0316a97 100644
--- a/pandas/tests/test_algos.py
+++ b/pandas/tests/test_algos.py
@@ -345,6 +345,10 @@ class TestIsin(tm.TestCase):
         expected = np.array([True, False])
         tm.assert_numpy_array_equal(result, expected)
 
+        result = algos.isin(pd.Series([1, 2]), set([1]))
+        expected = np.array([True, False])
+        tm.assert_numpy_array_equal(result, expected)
+
         result = algos.isin(['a', 'b'], ['a'])
         expected = np.array([True, False])
         tm.assert_numpy_array_equal(result, expected)
@@ -353,6 +357,10 @@ class TestIsin(tm.TestCase):
         expected = np.array([True, False])
         tm.assert_numpy_array_equal(result, expected)
 
+        result = algos.isin(pd.Series(['a', 'b']), set(['a']))
+        expected = np.array([True, False])
+        tm.assert_numpy_array_equal(result, expected)
+
         result = algos.isin(['a', 'b'], [1])
         expected = np.array([False, False])
         tm.assert_numpy_array_equal(result, expected)
@@ -366,11 +374,23 @@ class TestIsin(tm.TestCase):
         expected = np.array([True, True, False])
         tm.assert_numpy_array_equal(result, expected)
 
+        result = algos.isin(arr, set(arr[0:2]))
+        expected = np.array([True, True, False])
+        tm.assert_numpy_array_equal(result, expected)
+
         arr = pd.timedelta_range('1 day', periods=3).values
         result = algos.isin(arr, [arr[0]])
         expected = np.array([True, False, False])
         tm.assert_numpy_array_equal(result, expected)
 
+        result = algos.isin(arr, arr[0:2])
+        expected = np.array([True, True, False])
+        tm.assert_numpy_array_equal(result, expected)
+
+        result = algos.isin(arr, set(arr[0:2]))
+        expected = np.array([True, True, False])
+        tm.assert_numpy_array_equal(result, expected)
+
     def test_large(self):
 
         s = pd.date_range('20000101', periods=2000000, freq='s').values
