commit ffc49d734f2efbeaab1eb92cdfeb5b302df43cbf
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Mar 18 15:59:53 2011 -0400

    tweaked describe and renamed scoreatpercentile to quantile

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 93c99ddd9..0ed648023 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1036,20 +1036,16 @@ class DataFrame(Picklable, Groupable):
         DataFrame
         """
         cols = self._get_numeric_columns()
-
         tmp = self.reindex(columns=cols)
 
-        cols_destat = ['count', 'mean', 'std', 'min', '10%', '50%', '90%', 'max']
-
-        list_destat = [tmp.count(), tmp.mean(), tmp.std(), tmp.min(),
-                  tmp.scoreatpercentile(10), tmp.median(), tmp.scoreatpercentile(90), tmp.max()]
-
-        destats = self._constructor(np.zeros((len(cols), len(cols_destat))), index=cols, columns=cols_destat)
+        cols_destat = ['count', 'mean', 'std', 'min',
+                       '10%', '50%', '90%', 'max']
 
-        for i, k in enumerate(list_destat):
-            destats[cols_destat[i]] = k
+        data = [tmp.count(), tmp.mean(), tmp.std(), tmp.min(),
+                tmp.quantile(.1), tmp.median(),
+                tmp.quantile(.9), tmp.max()]
 
-        return destats
+        return self._constructor(data, index=cols_destat, columns=cols)
 
     def dropEmptyRows(self, specificColumns=None):
         """
@@ -2156,37 +2152,33 @@ class DataFrame(Picklable, Groupable):
 
         return summed / count
 
-    def scoreatpercentile(self, per=50, axis=0):
+    def quantile(self, q=0.5, axis=0):
         """
         Return array or Series of score at the given `per` percentile
         over requested axis.
 
         Parameters
         ----------
-        per : percentile
+        q : quantile
+            0 <= q <= 1
 
         axis : {0, 1}
             0 for row-wise, 1 for column-wise
 
         Returns
         -------
-        Series or TimeSeries
+        quantiles : Series
         """
         from scipy.stats import scoreatpercentile
 
-        def f(arr, per):
+        per = q * 100
+
+        def f(arr):
             if arr.dtype != np.float_:
                 arr = arr.astype(float)
             return scoreatpercentile(arr[notnull(arr)], per)
 
-        if axis == 0:
-            scoreatper = [f(self[col].values, per) for col in self.columns]
-            return Series(scoreatper, index=self.columns)
-        elif axis == 1:
-            scoreatper = [f(self.xs(k).values, per) for k in self.index]
-            return Series(scoreatper, index=self.index)
-        else:
-            raise Exception('Must have 0<= axis <= 1')
+        return self.apply(f, axis=axis)
 
     def median(self, axis=0):
         """
