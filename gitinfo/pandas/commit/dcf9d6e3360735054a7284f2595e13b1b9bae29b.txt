commit dcf9d6e3360735054a7284f2595e13b1b9bae29b
Author: Chang She <changshe@gmail.com>
Date:   Tue Nov 27 15:03:22 2012 -0500

    API: fillna defaults to no method. Also add ffill and bfill as convenience functions #2027

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index d9f280793..7a7a7cd03 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -3170,7 +3170,7 @@ class DataFrame(NDFrame):
     #----------------------------------------------------------------------
     # Filling NA's
 
-    def fillna(self, value=None, method='pad', axis=0, inplace=False,
+    def fillna(self, value=None, method=None, axis=0, inplace=False,
                limit=None):
         """
         Fill NA/NaN values using the specified method
@@ -3207,7 +3207,11 @@ class DataFrame(NDFrame):
         self._consolidate_inplace()
 
         if value is None:
+            if method is None:
+                raise ValueError('must specify a fill method or value')
             if self._is_mixed_type and axis == 1:
+                if inplace:
+                    raise NotImplementedError()
                 return self.T.fillna(method=method, limit=limit).T
 
             new_blocks = []
@@ -3222,6 +3226,8 @@ class DataFrame(NDFrame):
 
             new_data = BlockManager(new_blocks, self._data.axes)
         else:
+            if method is not None:
+                raise ValueError('cannot specify both a fill method and value')
             # Float type values
             if len(self.columns) == 0:
                 return self
@@ -3246,6 +3252,14 @@ class DataFrame(NDFrame):
         else:
             return self._constructor(new_data)
 
+    def ffill(self, axis=0, inplace=False, limit=None):
+        return self.fillna(method='ffill', axis=axis, inplace=inplace,
+                           limit=limit)
+
+    def bfill(self, axis=0, inplace=False, limit=None):
+        return self.fillna(method='bfill', axis=axis, inplace=inplace,
+                           limit=limit)
+
     def replace(self, to_replace, value=None, method='pad', axis=0,
                 inplace=False, limit=None):
         """
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index ae4a5d868..a81cb1510 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -901,7 +901,7 @@ class Panel(NDFrame):
 
         return self._constructor(result_values, items, major, minor)
 
-    def fillna(self, value=None, method='pad'):
+    def fillna(self, value=None, method=None):
         """
         Fill NaN values using the specified method.
 
@@ -927,15 +927,27 @@ class Panel(NDFrame):
         DataFrame.reindex, DataFrame.asfreq
         """
         if value is None:
+            if method is None:
+                raise ValueError('must specify a fill method or value')
             result = {}
             for col, s in self.iterkv():
                 result[col] = s.fillna(method=method, value=value)
 
             return self._constructor.from_dict(result)
         else:
+            if method is not None:
+                raise ValueError('cannot specify both a fill method and value')
             new_data = self._data.fillna(value)
             return self._constructor(new_data)
 
+
+    def ffill(self):
+        return self.fillna(method='ffill')
+
+    def bfill(self):
+        return self.fillna(method='bfill')
+
+
     add = _panel_arith_method(operator.add, 'add')
     subtract = sub = _panel_arith_method(operator.sub, 'subtract')
     multiply = mul = _panel_arith_method(operator.mul, 'multiply')
diff --git a/pandas/core/series.py b/pandas/core/series.py
index f5bddbbb2..bceaca136 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -2420,7 +2420,7 @@ copy : boolean, default False
             np.putmask(result, mask, value)
         else:
             if method is None:  # pragma: no cover
-                raise ValueError('must specify a fill method')
+                raise ValueError('must specify a fill method or value')
 
             fill_f = _get_fill_func(method)
 
@@ -2438,6 +2438,12 @@ copy : boolean, default False
 
         return result
 
+    def ffill(self, inplace=False, limit=None):
+        return self.fillna(method='ffill', inplace=inplace, limit=limit)
+
+    def bfill(self, inplace=False, limit=None):
+        return self.fillna(method='bfill', inplace=inplace, limit=limit)
+
     def replace(self, to_replace, value=None, method='pad', inplace=False,
                 limit=None):
         """
diff --git a/pandas/sparse/frame.py b/pandas/sparse/frame.py
index c143a8ba4..7ea13e9c3 100644
--- a/pandas/sparse/frame.py
+++ b/pandas/sparse/frame.py
@@ -816,7 +816,7 @@ class SparseDataFrame(DataFrame):
         return self.apply(lambda x: map(func, x))
 
     @Appender(DataFrame.fillna.__doc__)
-    def fillna(self, value=None, method='pad', inplace=False, limit=None):
+    def fillna(self, value=None, method=None, inplace=False, limit=None):
         new_series = {}
         for k, v in self.iterkv():
             new_series[k] = v.fillna(value=value, method=method, limit=limit)
diff --git a/pandas/sparse/series.py b/pandas/sparse/series.py
index 1e12d6a27..7b377d430 100644
--- a/pandas/sparse/series.py
+++ b/pandas/sparse/series.py
@@ -451,7 +451,7 @@ to sparse
                             fill_value=self.fill_value)
 
     @Appender(Series.fillna.__doc__)
-    def fillna(self, value=None, method='pad', inplace=False, limit=None):
+    def fillna(self, value=None, method=None, inplace=False, limit=None):
         dense = self.to_dense()
         filled = dense.fillna(value=value, method=method, limit=limit)
         result = filled.to_sparse(kind=self.kind,
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 851857549..675b2c750 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -4901,6 +4901,23 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         result = self.mixed_frame.fillna(value=0)
 
+        self.assertRaises(ValueError, self.tsframe.fillna)
+        self.assertRaises(ValueError, self.tsframe.fillna, 5, method='ffill')
+
+    def test_ffill(self):
+        self.tsframe['A'][:5] = nan
+        self.tsframe['A'][-5:] = nan
+
+        assert_frame_equal(self.tsframe.ffill(),
+                           self.tsframe.fillna(method='ffill'))
+
+    def test_bfill(self):
+        self.tsframe['A'][:5] = nan
+        self.tsframe['A'][-5:] = nan
+
+        assert_frame_equal(self.tsframe.bfill(),
+                           self.tsframe.fillna(method='bfill'))
+
     def test_fillna_skip_certain_blocks(self):
         # don't try to fill boolean, int blocks
 
@@ -4923,10 +4940,10 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         df[1][:4] = np.nan
         df[3][-4:] = np.nan
-        expected = df.fillna()
+        expected = df.fillna(method='ffill')
         self.assert_(expected is not df)
 
-        df2 = df.fillna(inplace=True)
+        df2 = df.fillna(method='ffill', inplace=True)
         self.assert_(df2 is df)
         assert_frame_equal(df2, expected)
 
@@ -4957,13 +4974,13 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         df = DataFrame(np.random.randn(10, 10))
         df.values[:, ::2] = np.nan
 
-        result = df.fillna(axis=1)
+        result = df.fillna(method='ffill', axis=1)
         expected = df.T.fillna(method='pad').T
         assert_frame_equal(result, expected)
 
         df.insert(6, 'foo', 5)
-        result = df.fillna(axis=1)
-        expected = df.astype(float).fillna(axis=1)
+        result = df.fillna(method='ffill', axis=1)
+        expected = df.astype(float).fillna(method='ffill', axis=1)
         assert_frame_equal(result, expected)
 
     def test_fillna_invalid_method(self):
@@ -7654,7 +7671,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         cols = ["COL." + str(i) for i in range(5, 0, -1)]
         data = np.random.rand(20, 5)
         df = DataFrame(index=range(20), columns=cols, data=data)
-        self.assert_(df.columns.tolist() == df.fillna().columns.tolist())
+        filled = df.fillna(method='ffill')
+        self.assert_(df.columns.tolist() == filled.columns.tolist())
 
     def test_take(self):
         # homogeneous
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 82c6ea65d..5cc3d4db5 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -950,6 +950,15 @@ class TestPanel(unittest.TestCase, PanelTests, CheckIndexing,
         filled = empty.fillna(0)
         assert_panel_equal(filled, empty)
 
+        self.assertRaises(ValueError, self.panel.fillna)
+        self.assertRaises(ValueError, self.panel.fillna, 5, method='ffill')
+
+    def test_ffill_bfill(self):
+        assert_panel_equal(self.panel.ffill(),
+                           self.panel.fillna(method='ffill'))
+        assert_panel_equal(self.panel.bfill(),
+                           self.panel.fillna(method='bfill'))
+
     def test_truncate_fillna_bug(self):
         # #1823
         result = self.panel.truncate(before=None, after=None, axis='items')
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index a928c982a..df489e92e 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -2948,6 +2948,9 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
 
         self.assert_(np.array_equal(ts.fillna(value=5), [0., 1., 5., 3., 4.]))
 
+        self.assertRaises(ValueError, ts.fillna)
+        self.assertRaises(ValueError, self.ts.fillna, value=0, method='ffill')
+
     def test_fillna_bug(self):
         x = Series([nan, 1., nan, 3., nan],['z','a','b','c','d'])
         filled = x.fillna(method='ffill')
@@ -2974,8 +2977,15 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         except ValueError, inst:
             self.assert_('ffil' in str(inst))
 
-    def test_fillna_toomany_params(self):
-        self.assertRaises(ValueError, self.ts.fillna, value=0, method='ffill')
+    def test_ffill(self):
+        ts = Series([0., 1., 2., 3., 4.], index=tm.makeDateIndex(5))
+        ts[2] = np.NaN
+        assert_series_equal(ts.ffill(), ts.fillna(method='ffill'))
+
+    def test_bfill(self):
+        ts = Series([0., 1., 2., 3., 4.], index=tm.makeDateIndex(5))
+        ts[2] = np.NaN
+        assert_series_equal(ts.bfill(), ts.fillna(method='bfill'))
 
     def test_replace(self):
         N = 100
