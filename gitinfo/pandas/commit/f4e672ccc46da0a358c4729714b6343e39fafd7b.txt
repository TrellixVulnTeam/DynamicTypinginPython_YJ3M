commit f4e672ccc46da0a358c4729714b6343e39fafd7b
Author: Peter <redbullpeter@users.noreply.github.com>
Date:   Fri Feb 17 13:09:20 2017 +0000

    BUG: to_sql convert index name to string (#15404) (#15423)
    
    * Converted index name to string to fix issue #15404 - BUG: to_sql errors with numeric index name - needs conversion to string
    
    * Additional int to string conversion added. Associated test cases added.
    
    * PEP 8 compliance edits
    
    * Removed extraneous brackets

diff --git a/pandas/io/sql.py b/pandas/io/sql.py
index 55e145b49..bace43e78 100644
--- a/pandas/io/sql.py
+++ b/pandas/io/sql.py
@@ -750,7 +750,8 @@ class SQLTable(PandasObject):
             for i, idx_label in enumerate(self.index):
                 idx_type = dtype_mapper(
                     self.frame.index.get_level_values(i))
-                column_names_and_types.append((idx_label, idx_type, True))
+                column_names_and_types.append((text_type(idx_label),
+                                              idx_type, True))
 
         column_names_and_types += [
             (text_type(self.frame.columns[i]),
@@ -1220,7 +1221,7 @@ _SQL_TYPES = {
 
 def _get_unicode_name(name):
     try:
-        uname = name.encode("utf-8", "strict").decode("utf-8")
+        uname = text_type(name).encode("utf-8", "strict").decode("utf-8")
     except UnicodeError:
         raise ValueError("Cannot convert identifier to UTF-8: '%s'" % name)
     return uname
diff --git a/pandas/tests/io/test_sql.py b/pandas/tests/io/test_sql.py
index 78560611d..890f52e8c 100644
--- a/pandas/tests/io/test_sql.py
+++ b/pandas/tests/io/test_sql.py
@@ -709,6 +709,21 @@ class _TestSQLApi(PandasSQLTest):
         self.assertEqual(frame.columns[0], 'other_label',
                          "Specified index_label not written to database")
 
+        # index name is integer
+        temp_frame.index.name = 0
+        sql.to_sql(temp_frame, 'test_index_label', self.conn,
+                   if_exists='replace')
+        frame = sql.read_sql_query('SELECT * FROM test_index_label', self.conn)
+        self.assertEqual(frame.columns[0], '0',
+                         "Integer index label not written to database")
+
+        temp_frame.index.name = None
+        sql.to_sql(temp_frame, 'test_index_label', self.conn,
+                   if_exists='replace', index_label=0)
+        frame = sql.read_sql_query('SELECT * FROM test_index_label', self.conn)
+        self.assertEqual(frame.columns[0], '0',
+                         "Integer index label not written to database")
+
     def test_to_sql_index_label_multiindex(self):
         temp_frame = DataFrame({'col1': range(4)},
                                index=MultiIndex.from_product(
