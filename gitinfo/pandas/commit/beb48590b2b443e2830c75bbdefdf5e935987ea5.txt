commit beb48590b2b443e2830c75bbdefdf5e935987ea5
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Thu Feb 6 16:01:26 2020 -0800

    REF: organize MultiIndex indexing tests (#31715)

diff --git a/pandas/tests/indexes/common.py b/pandas/tests/indexes/common.py
index 26d120619..da27057a7 100644
--- a/pandas/tests/indexes/common.py
+++ b/pandas/tests/indexes/common.py
@@ -167,6 +167,10 @@ class Base:
     def test_numeric_compat(self):
 
         idx = self.create_index()
+        # Check that this doesn't cover MultiIndex case, if/when it does,
+        #  we can remove multi.test_compat.test_numeric_compat
+        assert not isinstance(idx, MultiIndex)
+
         with pytest.raises(TypeError, match="cannot perform __mul__"):
             idx * 1
         with pytest.raises(TypeError, match="cannot perform __rmul__"):
diff --git a/pandas/tests/indexes/multi/conftest.py b/pandas/tests/indexes/multi/conftest.py
index acaea4ff9..67ebfcddf 100644
--- a/pandas/tests/indexes/multi/conftest.py
+++ b/pandas/tests/indexes/multi/conftest.py
@@ -49,12 +49,6 @@ def index_names():
     return ["first", "second"]
 
 
-@pytest.fixture
-def holder():
-    # the MultiIndex constructor used to base compatibility with pickle
-    return MultiIndex
-
-
 @pytest.fixture
 def compat_props():
     # a MultiIndex must have these properties associated with it
diff --git a/pandas/tests/indexes/multi/test_analytics.py b/pandas/tests/indexes/multi/test_analytics.py
index e64511efd..a9e02934f 100644
--- a/pandas/tests/indexes/multi/test_analytics.py
+++ b/pandas/tests/indexes/multi/test_analytics.py
@@ -146,83 +146,6 @@ def test_append_mixed_dtypes():
     tm.assert_index_equal(res, exp)
 
 
-def test_take(idx):
-    indexer = [4, 3, 0, 2]
-    result = idx.take(indexer)
-    expected = idx[indexer]
-    assert result.equals(expected)
-
-    # TODO: Remove Commented Code
-    # if not isinstance(idx,
-    #                   (DatetimeIndex, PeriodIndex, TimedeltaIndex)):
-    # GH 10791
-    msg = "'MultiIndex' object has no attribute 'freq'"
-    with pytest.raises(AttributeError, match=msg):
-        idx.freq
-
-
-def test_take_invalid_kwargs(idx):
-    idx = idx
-    indices = [1, 2]
-
-    msg = r"take\(\) got an unexpected keyword argument 'foo'"
-    with pytest.raises(TypeError, match=msg):
-        idx.take(indices, foo=2)
-
-    msg = "the 'out' parameter is not supported"
-    with pytest.raises(ValueError, match=msg):
-        idx.take(indices, out=indices)
-
-    msg = "the 'mode' parameter is not supported"
-    with pytest.raises(ValueError, match=msg):
-        idx.take(indices, mode="clip")
-
-
-def test_take_fill_value():
-    # GH 12631
-    vals = [["A", "B"], [pd.Timestamp("2011-01-01"), pd.Timestamp("2011-01-02")]]
-    idx = pd.MultiIndex.from_product(vals, names=["str", "dt"])
-
-    result = idx.take(np.array([1, 0, -1]))
-    exp_vals = [
-        ("A", pd.Timestamp("2011-01-02")),
-        ("A", pd.Timestamp("2011-01-01")),
-        ("B", pd.Timestamp("2011-01-02")),
-    ]
-    expected = pd.MultiIndex.from_tuples(exp_vals, names=["str", "dt"])
-    tm.assert_index_equal(result, expected)
-
-    # fill_value
-    result = idx.take(np.array([1, 0, -1]), fill_value=True)
-    exp_vals = [
-        ("A", pd.Timestamp("2011-01-02")),
-        ("A", pd.Timestamp("2011-01-01")),
-        (np.nan, pd.NaT),
-    ]
-    expected = pd.MultiIndex.from_tuples(exp_vals, names=["str", "dt"])
-    tm.assert_index_equal(result, expected)
-
-    # allow_fill=False
-    result = idx.take(np.array([1, 0, -1]), allow_fill=False, fill_value=True)
-    exp_vals = [
-        ("A", pd.Timestamp("2011-01-02")),
-        ("A", pd.Timestamp("2011-01-01")),
-        ("B", pd.Timestamp("2011-01-02")),
-    ]
-    expected = pd.MultiIndex.from_tuples(exp_vals, names=["str", "dt"])
-    tm.assert_index_equal(result, expected)
-
-    msg = "When allow_fill=True and fill_value is not None, all indices must be >= -1"
-    with pytest.raises(ValueError, match=msg):
-        idx.take(np.array([1, 0, -2]), fill_value=True)
-    with pytest.raises(ValueError, match=msg):
-        idx.take(np.array([1, 0, -5]), fill_value=True)
-
-    msg = "index -5 is out of bounds for( axis 0 with)? size 4"
-    with pytest.raises(IndexError, match=msg):
-        idx.take(np.array([1, -5]))
-
-
 def test_iter(idx):
     result = list(idx)
     expected = [
diff --git a/pandas/tests/indexes/multi/test_compat.py b/pandas/tests/indexes/multi/test_compat.py
index 545a7ddef..9a76f0623 100644
--- a/pandas/tests/indexes/multi/test_compat.py
+++ b/pandas/tests/indexes/multi/test_compat.py
@@ -112,8 +112,8 @@ def test_ndarray_compat_properties(idx, compat_props):
     idx.values.nbytes
 
 
-def test_pickle_compat_construction(holder):
+def test_pickle_compat_construction():
     # this is testing for pickle compat
     # need an object to create with
     with pytest.raises(TypeError, match="Must pass both levels and codes"):
-        holder()
+        MultiIndex()
diff --git a/pandas/tests/indexes/multi/test_sorting.py b/pandas/tests/indexes/multi/test_sorting.py
index 50242c1ca..bb40612b9 100644
--- a/pandas/tests/indexes/multi/test_sorting.py
+++ b/pandas/tests/indexes/multi/test_sorting.py
@@ -1,3 +1,5 @@
+import random
+
 import numpy as np
 import pytest
 
@@ -9,8 +11,6 @@ import pandas._testing as tm
 
 
 def test_sortlevel(idx):
-    import random
-
     tuples = list(idx)
     random.shuffle(tuples)
 
diff --git a/pandas/tests/indexes/multi/test_take.py b/pandas/tests/indexes/multi/test_take.py
new file mode 100644
index 000000000..85043ff88
--- /dev/null
+++ b/pandas/tests/indexes/multi/test_take.py
@@ -0,0 +1,82 @@
+import numpy as np
+import pytest
+
+import pandas as pd
+import pandas._testing as tm
+
+
+def test_take(idx):
+    indexer = [4, 3, 0, 2]
+    result = idx.take(indexer)
+    expected = idx[indexer]
+    assert result.equals(expected)
+
+    # FIXME: Remove Commented Code
+    # if not isinstance(idx,
+    #                   (DatetimeIndex, PeriodIndex, TimedeltaIndex)):
+    # GH 10791
+    msg = "'MultiIndex' object has no attribute 'freq'"
+    with pytest.raises(AttributeError, match=msg):
+        idx.freq
+
+
+def test_take_invalid_kwargs(idx):
+    idx = idx
+    indices = [1, 2]
+
+    msg = r"take\(\) got an unexpected keyword argument 'foo'"
+    with pytest.raises(TypeError, match=msg):
+        idx.take(indices, foo=2)
+
+    msg = "the 'out' parameter is not supported"
+    with pytest.raises(ValueError, match=msg):
+        idx.take(indices, out=indices)
+
+    msg = "the 'mode' parameter is not supported"
+    with pytest.raises(ValueError, match=msg):
+        idx.take(indices, mode="clip")
+
+
+def test_take_fill_value():
+    # GH 12631
+    vals = [["A", "B"], [pd.Timestamp("2011-01-01"), pd.Timestamp("2011-01-02")]]
+    idx = pd.MultiIndex.from_product(vals, names=["str", "dt"])
+
+    result = idx.take(np.array([1, 0, -1]))
+    exp_vals = [
+        ("A", pd.Timestamp("2011-01-02")),
+        ("A", pd.Timestamp("2011-01-01")),
+        ("B", pd.Timestamp("2011-01-02")),
+    ]
+    expected = pd.MultiIndex.from_tuples(exp_vals, names=["str", "dt"])
+    tm.assert_index_equal(result, expected)
+
+    # fill_value
+    result = idx.take(np.array([1, 0, -1]), fill_value=True)
+    exp_vals = [
+        ("A", pd.Timestamp("2011-01-02")),
+        ("A", pd.Timestamp("2011-01-01")),
+        (np.nan, pd.NaT),
+    ]
+    expected = pd.MultiIndex.from_tuples(exp_vals, names=["str", "dt"])
+    tm.assert_index_equal(result, expected)
+
+    # allow_fill=False
+    result = idx.take(np.array([1, 0, -1]), allow_fill=False, fill_value=True)
+    exp_vals = [
+        ("A", pd.Timestamp("2011-01-02")),
+        ("A", pd.Timestamp("2011-01-01")),
+        ("B", pd.Timestamp("2011-01-02")),
+    ]
+    expected = pd.MultiIndex.from_tuples(exp_vals, names=["str", "dt"])
+    tm.assert_index_equal(result, expected)
+
+    msg = "When allow_fill=True and fill_value is not None, all indices must be >= -1"
+    with pytest.raises(ValueError, match=msg):
+        idx.take(np.array([1, 0, -2]), fill_value=True)
+    with pytest.raises(ValueError, match=msg):
+        idx.take(np.array([1, 0, -5]), fill_value=True)
+
+    msg = "index -5 is out of bounds for( axis 0 with)? size 4"
+    with pytest.raises(IndexError, match=msg):
+        idx.take(np.array([1, -5]))
