commit f520e8dc5c78ccfe9f2cf673bf1043b4831c2f1c
Author: jreback <jeff@reback.net>
Date:   Tue Apr 29 13:07:51 2014 -0400

    BUG: fixup Categorical.describe to work with 'fixed' count
    CLN: remove __inv__, __neg__ from series and use generic version
    CLN: remove __wrap_array__ from generic (replace with __array_wrap__)

diff --git a/pandas/core/categorical.py b/pandas/core/categorical.py
index 23fccc371..b255831e5 100644
--- a/pandas/core/categorical.py
+++ b/pandas/core/categorical.py
@@ -226,11 +226,13 @@ class Categorical(PandasObject):
         """
         # Hack?
         from pandas.core.frame import DataFrame
-        grouped = DataFrame(self.labels).groupby(0)
-        counts = grouped.count().values.squeeze()
+        counts = DataFrame({
+            'labels' : self.labels,
+            'values' : self.labels }
+                           ).groupby('labels').count().squeeze().values
         freqs = counts / float(counts.sum())
-        return DataFrame.from_dict({
+        return DataFrame({
             'counts': counts,
             'freqs': freqs,
             'levels': self.levels
-        }).set_index('levels')
+            }).set_index('levels')
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 2c2f133dd..01af7534d 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -611,11 +611,19 @@ class NDFrame(PandasObject):
             arr = operator.inv(values)
         else:
             arr = operator.neg(values)
-        return self._wrap_array(arr, self.axes, copy=False)
+        return self.__array_wrap__(arr)
 
     def __invert__(self):
-        arr = operator.inv(_values_from_object(self))
-        return self._wrap_array(arr, self.axes, copy=False)
+        try:
+            arr = operator.inv(_values_from_object(self))
+            return self.__array_wrap__(arr)
+        except:
+
+            # inv fails with 0 len
+            if not np.prod(self.shape):
+                return self
+
+            raise
 
     def equals(self, other):
         """
@@ -707,15 +715,11 @@ class NDFrame(PandasObject):
     #----------------------------------------------------------------------
     # Array Interface
 
-    def _wrap_array(self, arr, axes, copy=False):
-        d = self._construct_axes_dict_from(self, axes, copy=copy)
-        return self._constructor(arr, **d).__finalize__(self)
-
     def __array__(self, dtype=None):
         return _values_from_object(self)
 
-    def __array_wrap__(self, result):
-        d = self._construct_axes_dict(self._AXIS_ORDERS, copy=False)
+    def __array_wrap__(self, result, copy=False):
+        d = self._construct_axes_dict(self._AXIS_ORDERS, copy=copy)
         return self._constructor(result, **d).__finalize__(self)
 
     # ideally we would define this to avoid the getattr checks, but
diff --git a/pandas/core/series.py b/pandas/core/series.py
index c94d7dc9a..9c6422801 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -370,12 +370,12 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         """ the array interface, return my values """
         return self.values
 
-    def __array_wrap__(self, result):
+    def __array_wrap__(self, result, copy=False):
         """
         Gets called prior to a ufunc (and after)
         """
         return self._constructor(result, index=self.index,
-                                 copy=False).__finalize__(self)
+                                 copy=copy).__finalize__(self)
 
     def __contains__(self, key):
         return key in self.index
@@ -959,19 +959,6 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
     if compat.PY3:  # pragma: no cover
         items = iteritems
 
-    # inversion
-    def __neg__(self):
-        values = self.values
-        if values.dtype == np.bool_:
-            arr = operator.inv(values)
-        else:
-            arr = operator.neg(values)
-        return self._constructor(arr, self.index).__finalize__(self)
-
-    def __invert__(self):
-        arr = operator.inv(self.values)
-        return self._constructor(arr, self.index).__finalize__(self)
-
     #----------------------------------------------------------------------
     # unbox reductions
 
