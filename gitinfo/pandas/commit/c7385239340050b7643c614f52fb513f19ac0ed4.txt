commit c7385239340050b7643c614f52fb513f19ac0ed4
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Mon Nov 12 08:58:52 2018 -0800

    CLN: remove incorrect usages of com.AbstractMethodError (#23625)

diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 34f25c563..2c7f6ae8e 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -11,6 +11,8 @@ import numpy as np
 import pandas as pd
 
 from pandas._libs import properties, Timestamp, iNaT
+from pandas.errors import AbstractMethodError
+
 from pandas.core.dtypes.common import (
     ensure_int64,
     ensure_object,
@@ -200,7 +202,7 @@ class NDFrame(PandasObject, SelectionMixin):
         """Used when a manipulation result has the same dimensions as the
         original.
         """
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     def __unicode__(self):
         # unicode representation based upon iterating over self
@@ -221,7 +223,7 @@ class NDFrame(PandasObject, SelectionMixin):
         """Used when a manipulation result has one lower dimension(s) as the
         original, such as DataFrame single columns slicing.
         """
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     @property
     def _constructor_expanddim(self):
@@ -2884,7 +2886,7 @@ class NDFrame(PandasObject, SelectionMixin):
         return lower
 
     def _box_item_values(self, key, values):
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     def _maybe_cache_changed(self, item, value):
         """The object has called back to us saying maybe it has changed.
diff --git a/pandas/core/groupby/generic.py b/pandas/core/groupby/generic.py
index 451f1199a..b0477c7d3 100644
--- a/pandas/core/groupby/generic.py
+++ b/pandas/core/groupby/generic.py
@@ -18,6 +18,7 @@ from pandas._libs import Timestamp, lib
 import pandas.compat as compat
 from pandas.compat import lzip, map
 from pandas.compat.numpy import _np_version_under1p13
+from pandas.errors import AbstractMethodError
 from pandas.util._decorators import Appender, Substitution
 
 from pandas.core.dtypes.cast import maybe_downcast_to_dtype
@@ -240,7 +241,7 @@ class NDFrameGroupBy(GroupBy):
         return self._wrap_generic_output(result, obj)
 
     def _wrap_aggregated_output(self, output, names=None):
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     def _aggregate_item_by_item(self, func, *args, **kwargs):
         # only for axis==0
@@ -1659,4 +1660,4 @@ class PanelGroupBy(NDFrameGroupBy):
             raise ValueError("axis value must be greater than 0")
 
     def _wrap_aggregated_output(self, output, names=None):
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
diff --git a/pandas/core/groupby/groupby.py b/pandas/core/groupby/groupby.py
index ea7507799..12327e1cf 100644
--- a/pandas/core/groupby/groupby.py
+++ b/pandas/core/groupby/groupby.py
@@ -20,6 +20,7 @@ from pandas._libs import Timestamp, groupby as libgroupby
 import pandas.compat as compat
 from pandas.compat import callable, range, set_function_name, zip
 from pandas.compat.numpy import function as nv
+from pandas.errors import AbstractMethodError
 from pandas.util._decorators import Appender, Substitution, cache_readonly
 from pandas.util._validators import validate_kwargs
 
@@ -706,7 +707,7 @@ b  2""")
         yield self._selection_name, self._selected_obj
 
     def transform(self, func, *args, **kwargs):
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     def _cumcount_array(self, ascending=True):
         """
@@ -861,7 +862,7 @@ b  2""")
         return self._wrap_aggregated_output(output)
 
     def _wrap_applied_output(self, *args, **kwargs):
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     def _concat_objects(self, keys, values, not_indexed_same=False):
         from pandas.core.reshape.concat import concat
diff --git a/pandas/core/groupby/ops.py b/pandas/core/groupby/ops.py
index 390334a89..125bd9a5e 100644
--- a/pandas/core/groupby/ops.py
+++ b/pandas/core/groupby/ops.py
@@ -13,6 +13,7 @@ import numpy as np
 
 from pandas._libs import NaT, groupby as libgroupby, iNaT, lib, reduction
 from pandas.compat import lzip, range, zip
+from pandas.errors import AbstractMethodError
 from pandas.util._decorators import cache_readonly
 
 from pandas.core.dtypes.common import (
@@ -841,7 +842,7 @@ class DataSplitter(object):
         return sdata.iloc[slice_obj]
 
     def apply(self, f):
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
 
 class SeriesSplitter(DataSplitter):
diff --git a/pandas/core/indexes/datetimelike.py b/pandas/core/indexes/datetimelike.py
index 1d9d3b1d3..4547f4731 100644
--- a/pandas/core/indexes/datetimelike.py
+++ b/pandas/core/indexes/datetimelike.py
@@ -10,6 +10,7 @@ from pandas._libs import NaT, iNaT, lib
 from pandas._libs.tslibs.timestamps import RoundTo, round_nsint64
 import pandas.compat as compat
 from pandas.compat.numpy import function as nv
+from pandas.errors import AbstractMethodError
 from pandas.util._decorators import Appender, cache_readonly
 
 from pandas.core.dtypes.common import (
@@ -21,7 +22,7 @@ import pandas.core.dtypes.concat as _concat
 from pandas.core.dtypes.generic import ABCIndex, ABCIndexClass, ABCSeries
 from pandas.core.dtypes.missing import isna
 
-from pandas.core import algorithms, common as com, ops
+from pandas.core import algorithms, ops
 from pandas.core.arrays import PeriodArray
 from pandas.core.arrays.datetimelike import DatetimeLikeArrayMixin
 import pandas.core.indexes.base as ibase
@@ -531,7 +532,7 @@ class DatetimeIndexOpsMixin(DatetimeLikeArrayMixin):
 
     @property
     def _formatter_func(self):
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     def _format_attrs(self):
         """
diff --git a/pandas/io/common.py b/pandas/io/common.py
index 155cf566b..3a67238a6 100644
--- a/pandas/io/common.py
+++ b/pandas/io/common.py
@@ -10,12 +10,11 @@ import zipfile
 import pandas.compat as compat
 from pandas.compat import BytesIO, StringIO, string_types, text_type
 from pandas.errors import (  # noqa
-    DtypeWarning, EmptyDataError, ParserError, ParserWarning)
+    AbstractMethodError, DtypeWarning, EmptyDataError, ParserError,
+    ParserWarning)
 
 from pandas.core.dtypes.common import is_file_like, is_number
 
-import pandas.core.common as com
-
 from pandas.io.formats.printing import pprint_thing
 
 # gh-12665: Alias for now and remove later.
@@ -67,7 +66,7 @@ class BaseIterator(object):
         return self
 
     def __next__(self):
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
 
 if not compat.PY3:
diff --git a/pandas/io/html.py b/pandas/io/html.py
index bcbb07c6d..c967bdd29 100644
--- a/pandas/io/html.py
+++ b/pandas/io/html.py
@@ -12,12 +12,11 @@ import pandas.compat as compat
 from pandas.compat import (
     binary_type, iteritems, lmap, lrange, raise_with_traceback, string_types,
     u)
-from pandas.errors import EmptyDataError
+from pandas.errors import AbstractMethodError, EmptyDataError
 
 from pandas.core.dtypes.common import is_list_like
 
 from pandas import Series
-import pandas.core.common as com
 
 from pandas.io.common import _is_url, _validate_header_arg, urlopen
 from pandas.io.formats.printing import pprint_thing
@@ -256,7 +255,7 @@ class _HtmlFrameParser(object):
         text : str or unicode
             The text from an individual DOM node.
         """
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     def _parse_td(self, obj):
         """Return the td elements from a row element.
@@ -271,7 +270,7 @@ class _HtmlFrameParser(object):
         list of node-like
             These are the elements of each row, i.e., the columns.
         """
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     def _parse_thead_tr(self, table):
         """
@@ -286,7 +285,7 @@ class _HtmlFrameParser(object):
         list of node-like
             These are the <tr> row elements of a table.
         """
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     def _parse_tbody_tr(self, table):
         """
@@ -305,7 +304,7 @@ class _HtmlFrameParser(object):
         list of node-like
             These are the <tr> row elements of a table.
         """
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     def _parse_tfoot_tr(self, table):
         """
@@ -320,7 +319,7 @@ class _HtmlFrameParser(object):
         list of node-like
             These are the <tr> row elements of a table.
         """
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     def _parse_tables(self, doc, match, attrs):
         """
@@ -346,7 +345,7 @@ class _HtmlFrameParser(object):
         list of node-like
             HTML <table> elements to be parsed into raw data.
         """
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     def _equals_tag(self, obj, tag):
         """
@@ -365,7 +364,7 @@ class _HtmlFrameParser(object):
         boolean
             Whether `obj`'s tag name is `tag`
         """
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     def _build_doc(self):
         """
@@ -376,7 +375,7 @@ class _HtmlFrameParser(object):
         node-like
             The DOM from which to parse the table element.
         """
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     def _parse_thead_tbody_tfoot(self, table_html):
         """
diff --git a/pandas/io/json/json.py b/pandas/io/json/json.py
index af7b390de..4453416a9 100644
--- a/pandas/io/json/json.py
+++ b/pandas/io/json/json.py
@@ -7,11 +7,11 @@ import numpy as np
 import pandas._libs.json as json
 from pandas._libs.tslibs import iNaT
 from pandas.compat import StringIO, long, to_str, u
+from pandas.errors import AbstractMethodError
 
 from pandas.core.dtypes.common import is_period_dtype
 
 from pandas import DataFrame, MultiIndex, Series, compat, isna, to_datetime
-import pandas.core.common as com
 from pandas.core.reshape.concat import concat
 
 from pandas.io.common import (
@@ -97,7 +97,7 @@ class Writer(object):
         self._format_axes()
 
     def _format_axes(self):
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     def write(self):
         return self._write(self.obj, self.orient, self.double_precision,
@@ -658,7 +658,7 @@ class Parser(object):
                 setattr(self.obj, axis, new_axis)
 
     def _try_convert_types(self):
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     def _try_convert_data(self, name, data, use_dtypes=True,
                           convert_dates=True):
@@ -771,7 +771,7 @@ class Parser(object):
         return data, False
 
     def _try_convert_dates(self):
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
 
 class SeriesParser(Parser):
diff --git a/pandas/io/parquet.py b/pandas/io/parquet.py
index 3d72b1ec3..aad59f980 100644
--- a/pandas/io/parquet.py
+++ b/pandas/io/parquet.py
@@ -4,9 +4,9 @@ from distutils.version import LooseVersion
 from warnings import catch_warnings
 
 from pandas.compat import string_types
+from pandas.errors import AbstractMethodError
 
 from pandas import DataFrame, get_option
-import pandas.core.common as com
 
 from pandas.io.common import get_filepath_or_buffer, is_s3_url
 
@@ -67,10 +67,10 @@ class BaseImpl(object):
             raise ValueError("Index level names must be strings")
 
     def write(self, df, path, compression, **kwargs):
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     def read(self, path, columns=None, **kwargs):
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
 
 class PyArrowImpl(BaseImpl):
diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index 12914c10e..9fd35effe 100755
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -20,7 +20,8 @@ from pandas._libs.tslibs import parsing
 import pandas.compat as compat
 from pandas.compat import (
     PY3, StringIO, lrange, lzip, map, range, string_types, u, zip)
-from pandas.errors import EmptyDataError, ParserError, ParserWarning
+from pandas.errors import (
+    AbstractMethodError, EmptyDataError, ParserError, ParserWarning)
 from pandas.util._decorators import Appender
 
 from pandas.core.dtypes.cast import astype_nansafe
@@ -33,7 +34,6 @@ from pandas.core.dtypes.missing import isna
 
 from pandas.core import algorithms
 from pandas.core.arrays import Categorical
-import pandas.core.common as com
 from pandas.core.frame import DataFrame
 from pandas.core.index import (
     Index, MultiIndex, RangeIndex, ensure_index_from_sequences)
@@ -1050,7 +1050,7 @@ class TextFileReader(BaseIterator):
             self._engine = klass(self.f, **self.options)
 
     def _failover_to_python(self):
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     def read(self, nrows=None):
         nrows = _validate_integer('nrows', nrows)
diff --git a/pandas/plotting/_core.py b/pandas/plotting/_core.py
index 405c534e8..1c70ece43 100644
--- a/pandas/plotting/_core.py
+++ b/pandas/plotting/_core.py
@@ -12,6 +12,7 @@ import numpy as np
 from pandas.util._decorators import cache_readonly, Appender
 from pandas.compat import range, lrange, map, zip, string_types
 import pandas.compat as compat
+from pandas.errors import AbstractMethodError
 
 import pandas.core.common as com
 from pandas.core.base import PandasObject
@@ -373,7 +374,7 @@ class MPLPlot(object):
         self.data = numeric_data
 
     def _make_plot(self):
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     def _add_table(self):
         if self.table is False:
diff --git a/pandas/tests/io/parser/test_parsers.py b/pandas/tests/io/parser/test_parsers.py
index 50d927176..21286e9b8 100644
--- a/pandas/tests/io/parser/test_parsers.py
+++ b/pandas/tests/io/parser/test_parsers.py
@@ -6,9 +6,9 @@ import pytest
 
 from pandas._libs.tslib import Timestamp
 from pandas.compat import StringIO
+from pandas.errors import AbstractMethodError
 
 from pandas import DataFrame, read_csv, read_table
-import pandas.core.common as com
 import pandas.util.testing as tm
 
 from .c_parser_only import CParserTests
@@ -46,7 +46,7 @@ class BaseParser(CommentTests, CompressionTests,
         raise NotImplementedError
 
     def float_precision_choices(self):
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     @pytest.fixture(autouse=True)
     def setup_method(self, datapath):
diff --git a/pandas/tests/test_resample.py b/pandas/tests/test_resample.py
index 756385f0c..7e0342e8b 100644
--- a/pandas/tests/test_resample.py
+++ b/pandas/tests/test_resample.py
@@ -24,12 +24,11 @@ from pandas import (Series, DataFrame, Panel, Index, isna,
                     notna, Timestamp, Timedelta)
 
 from pandas.compat import range, lrange, zip, OrderedDict
-from pandas.errors import UnsupportedFunctionCall
+from pandas.errors import AbstractMethodError, UnsupportedFunctionCall
 import pandas.tseries.offsets as offsets
 from pandas.tseries.offsets import Minute, BDay
 
 from pandas.core.groupby.groupby import DataError
-import pandas.core.common as com
 
 from pandas.core.indexes.datetimes import date_range
 from pandas.core.indexes.period import period_range, PeriodIndex, Period
@@ -599,7 +598,7 @@ class Base(object):
 
     @pytest.fixture
     def _series_name(self):
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     @pytest.fixture
     def _static_values(self, index):
diff --git a/pandas/tseries/offsets.py b/pandas/tseries/offsets.py
index 25c419e48..067a7d462 100644
--- a/pandas/tseries/offsets.py
+++ b/pandas/tseries/offsets.py
@@ -9,7 +9,6 @@ import numpy as np
 
 from pandas.core.dtypes.generic import ABCPeriod
 from pandas.core.tools.datetimes import to_datetime
-import pandas.core.common as com
 
 # import after tools, dateutil check
 from dateutil.easter import easter
@@ -29,6 +28,7 @@ from pandas._libs.tslibs.offsets import (
     roll_yearday,
     shift_month,
     BaseOffset)
+from pandas.errors import AbstractMethodError
 
 
 __all__ = ['Day', 'BusinessDay', 'BDay', 'CustomBusinessDay', 'CDay',
@@ -1097,7 +1097,7 @@ class SemiMonthOffset(DateOffset):
 
     def _apply(self, n, other):
         """Handle specific apply logic for child classes"""
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     @apply_index_wraps
     def apply_index(self, i):
@@ -1137,11 +1137,11 @@ class SemiMonthOffset(DateOffset):
         The roll array is based on the fact that i gets rolled back to
         the first day of the month.
         """
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
     def _apply_index_days(self, i, roll):
         """Apply the correct day for each date in i"""
-        raise com.AbstractMethodError(self)
+        raise AbstractMethodError(self)
 
 
 class SemiMonthEnd(SemiMonthOffset):
