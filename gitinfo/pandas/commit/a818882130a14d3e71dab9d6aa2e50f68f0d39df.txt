commit a818882130a14d3e71dab9d6aa2e50f68f0d39df
Author: Jeff Reback <jeff@reback.net>
Date:   Wed Apr 15 18:53:33 2015 -0400

    formatting MultiIndex

diff --git a/doc/source/whatsnew/v0.16.1.txt b/doc/source/whatsnew/v0.16.1.txt
index 4ccaf7a47..f37e0a9ea 100755
--- a/doc/source/whatsnew/v0.16.1.txt
+++ b/doc/source/whatsnew/v0.16.1.txt
@@ -268,6 +268,51 @@ API changes
 
 - By default, ``read_csv`` and ``read_table`` will now try to infer the compression type based on the file extension. Set ``compression=None`` to restore the previous behavior (no decompression). (:issue:`9770`)
 
+.. _whatsnew_0161.index_repr:
+
+Index Representation
+~~~~~~~~~~~~~~~~~~~~
+
+The string representation of ``Index`` and its sub-classes have now been unified. These are all uniform in their output
+formats, except for ``MultiIndex``, which has a multi-line repr. The display width responds to the option ``display.max_seq_len``,
+which is now defaulted to 10 (previously was 100). (:issue:`6482`)
+
+Previous Behavior
+
+.. code-block:: python
+
+
+   In [1]: pd.get_option('max_seq_items')
+   Out[1]: 100
+
+   In [2]: pd.Index(range(4),name='foo')
+   Out[2]: Int64Index([0, 1, 2, 3], dtype='int64')
+
+   In [3]: pd.Index(range(104),name='foo')
+   Out[3]: Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...], dtype='int64')
+
+   In [4]: pd.date_range('20130101',periods=4,name='foo',tz='US/Eastern')
+   Out[4]:
+   <class 'pandas.tseries.index.DatetimeIndex'>
+   [2013-01-01 00:00:00-05:00, ..., 2013-01-04 00:00:00-05:00]
+   Length: 4, Freq: D, Timezone: US/Eastern
+
+   In [5]: pd.date_range('20130101',periods=104,name='foo',tz='US/Eastern')
+   Out[5]:
+   <class 'pandas.tseries.index.DatetimeIndex'>
+   [2013-01-01 00:00:00-05:00, ..., 2013-04-14 00:00:00-04:00]
+   Length: 104, Freq: D, Timezone: US/Eastern
+
+New Behavior
+
+.. ipython:: python
+
+   pd.get_option('max_seq_items')
+   pd.Index(range(4),name='foo')
+   pd.Index(range(104),name='foo')
+   pd.date_range('20130101',periods=4,name='foo',tz='US/Eastern')
+   pd.date_range('20130101',periods=104,name='foo',tz='US/Eastern')
+
 .. _whatsnew_0161.deprecations:
 
 Deprecations
diff --git a/pandas/core/config_init.py b/pandas/core/config_init.py
index a56d3b93d..93a3c30cb 100644
--- a/pandas/core/config_init.py
+++ b/pandas/core/config_init.py
@@ -269,7 +269,7 @@ with cf.config_prefix('display'):
     cf.register_option('show_dimensions', 'truncate', pc_show_dimensions_doc,
                        validator=is_one_of_factory([True, False, 'truncate']))
     cf.register_option('chop_threshold', None, pc_chop_threshold_doc)
-    cf.register_option('max_seq_items', 100, pc_max_seq_items)
+    cf.register_option('max_seq_items', 10, pc_max_seq_items)
     cf.register_option('mpl_style', None, pc_mpl_style_doc,
                        validator=is_one_of_factory([None, False, 'default']),
                        cb=mpl_style_cb)
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 6653c9874..e54811372 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -395,21 +395,33 @@ class Index(IndexOpsMixin, PandasObject):
         klass = self.__class__.__name__
         data = self._format_data()
         attrs = self._format_attrs()
-        max_seq_items = get_option('display.max_seq_items')
-        if len(self) > max_seq_items:
-            space = "\n%s" % (' ' * (len(klass) + 1))
-        else:
-            space = " "
+        space = self._format_space()
 
         prepr = (u(",%s") % space).join([u("%s=%s") % (k, v)
                                           for k, v in attrs])
-        res = u("%s(%s,%s%s)") % (klass,
-                                  data,
-                                  space,
-                                  prepr)
+
+        # no data provided, just attributes
+        if data is None:
+            data = ''
+        else:
+            data = "%s,%s" % (data, space)
+
+        res = u("%s(%s%s)") % (klass,
+                               data,
+                               prepr)
 
         return res
 
+    def _format_space(self):
+
+        # using space here controls if the attributes
+        # are line separated or not (the default)
+
+        #max_seq_items = get_option('display.max_seq_items')
+        #if len(self) > max_seq_items:
+        #    space = "\n%s" % (' ' * (len(klass) + 1))
+        return " "
+
     @property
     def _formatter_func(self):
         """
@@ -421,7 +433,6 @@ class Index(IndexOpsMixin, PandasObject):
         """
         Return the formatted data as a unicode string
         """
-
         max_seq_items = get_option('display.max_seq_items')
         formatter = self._formatter_func
         n = len(self)
@@ -450,9 +461,12 @@ class Index(IndexOpsMixin, PandasObject):
         Return a list of tuples of the (attr,formatted_value)
         """
         attrs = []
+        attrs.append(('dtype',"'%s'" % self.dtype))
         if self.name is not None:
             attrs.append(('name',default_pprint(self.name)))
-        attrs.append(('dtype',"'%s'" % self.dtype))
+        max_seq_items = get_option('display.max_seq_items')
+        if len(self) > max_seq_items:
+            attrs.append(('length',len(self)))
         return attrs
 
     def to_series(self, **kwargs):
@@ -3937,40 +3951,24 @@ class MultiIndex(Index):
         names_nbytes = sum(( getsizeof(i) for i in self.names ))
         return level_nbytes + label_nbytes + names_nbytes
 
-    def __repr__(self):
-        encoding = get_option('display.encoding')
+    def _format_attrs(self):
+        """
+        Return a list of tuples of the (attr,formatted_value)
+        """
         attrs = [('levels', default_pprint(self.levels)),
                  ('labels', default_pprint(self.labels))]
         if not all(name is None for name in self.names):
             attrs.append(('names', default_pprint(self.names)))
         if self.sortorder is not None:
             attrs.append(('sortorder', default_pprint(self.sortorder)))
+        return attrs
 
-        space = ' ' * (len(self.__class__.__name__) + 1)
-        prepr = (u(",\n%s") % space).join([u("%s=%s") % (k, v)
-                                          for k, v in attrs])
-        res = u("%s(%s)") % (self.__class__.__name__, prepr)
-
-        if not compat.PY3:
-            # needs to be str in Python 2
-            res = res.encode(encoding)
-        return res
-
-    def __unicode__(self):
-        """
-        Return a string representation for a particular Index
+    def _format_space(self):
+        return "\n%s" % (' ' * (len(self.__class__.__name__) + 1))
 
-        Invoked by unicode(df) in py2 only. Yields a Unicode String in both
-        py2/py3.
-        """
-        rows = self.format(names=True)
-        max_rows = get_option('display.max_rows')
-        if len(rows) > max_rows:
-            spaces = (len(rows[0]) - 3) // 2
-            centered = ' ' * spaces
-            half = max_rows // 2
-            rows = rows[:half] + [centered + '...' + centered] + rows[-half:]
-        return "\n".join(rows)
+    def _format_data(self):
+        # we are formatting thru the attributes
+        return None
 
     def __len__(self):
         return len(self.labels[0])
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index f0afef71b..1005943e9 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -3215,13 +3215,13 @@ class TestDatetimeIndexFormat(tm.TestCase):
 class TestDatetimeIndexUnicode(tm.TestCase):
     def test_dates(self):
         text = str(pd.to_datetime([datetime(2013,1,1), datetime(2014,1,1)]))
-        self.assertTrue("[2013-01-01," in text)
-        self.assertTrue(", 2014-01-01]" in text)
+        self.assertTrue("['2013-01-01'," in text)
+        self.assertTrue(", '2014-01-01']" in text)
 
     def test_mixed(self):
         text = str(pd.to_datetime([datetime(2013,1,1), datetime(2014,1,1,12), datetime(2014,1,1)]))
-        self.assertTrue("[2013-01-01 00:00:00," in text)
-        self.assertTrue(", 2014-01-01 00:00:00]" in text)
+        self.assertTrue("['2013-01-01 00:00:00'," in text)
+        self.assertTrue(", '2014-01-01 00:00:00']" in text)
 
 
 class TestStringRepTimestamp(tm.TestCase):
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index e69ab8909..80cbbfb07 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -2488,16 +2488,13 @@ class TestInt64Index(Numeric, tm.TestCase):
 
 class DatetimeLike(Base):
 
-    def test_repr_roundtrip(self):
-        raise nose.SkipTest("Short reprs are not supported repr for Datetimelike indexes")
-
     def test_str(self):
 
         # test the string repr
         idx = self.create_index()
         idx.name = 'foo'
-        self.assertTrue("length=%s" % len(idx) in str(idx))
-        self.assertTrue("u'foo'" in str(idx))
+        self.assertFalse("length=%s" % len(idx) in str(idx))
+        self.assertTrue("'foo'" in str(idx))
         self.assertTrue(idx.__class__.__name__ in str(idx))
 
         if hasattr(idx,'tz'):
diff --git a/pandas/tseries/base.py b/pandas/tseries/base.py
index 4943d2625..e7a297860 100644
--- a/pandas/tseries/base.py
+++ b/pandas/tseries/base.py
@@ -260,17 +260,13 @@ class DatetimeIndexOpsMixin(object):
 
     @property
     def _formatter_func(self):
-        """
-        Format function to convert value to representation
-        """
-        return str
+        raise AbstractMethodError(self)
 
     def _format_attrs(self):
         """
         Return a list of tuples of the (attr,formatted_value)
         """
         attrs = super(DatetimeIndexOpsMixin, self)._format_attrs()
-        attrs.append(('length',len(self)))
         for attrib in self._attributes:
             if attrib == 'freq':
                 freq = self.freqstr
@@ -504,4 +500,6 @@ class DatetimeIndexOpsMixin(object):
         if self.freq:
             result += '\nFreq: %s' % self.freqstr
 
+        # display as values, not quoted
+        result = result.replace("'","")
         return result
diff --git a/pandas/tseries/period.py b/pandas/tseries/period.py
index 5be97b9a8..d57ca8d3a 100644
--- a/pandas/tseries/period.py
+++ b/pandas/tseries/period.py
@@ -293,6 +293,10 @@ class PeriodIndex(DatetimeIndexOpsMixin, Int64Index):
         """ return an array repr of this object, potentially casting to object """
         return self.asobject.values
 
+    @property
+    def _formatter_func(self):
+        return lambda x: "'%s'" % x
+
     def asof_locs(self, where, mask):
         """
         where : array of timestamps
diff --git a/pandas/tseries/tests/test_base.py b/pandas/tseries/tests/test_base.py
index 1420e73cb..1a132966c 100644
--- a/pandas/tseries/tests/test_base.py
+++ b/pandas/tseries/tests/test_base.py
@@ -119,41 +119,17 @@ class TestDatetimeIndexOps(Ops):
         idx6 = DatetimeIndex(['2011-01-01 09:00', '2011-01-01 10:00', pd.NaT],
                              tz='US/Eastern')
 
-        exp1 = """DatetimeIndex([],
-              dtype='datetime64[ns]',
-              length=0,
-              freq='D',
-              tz=None)"""
-
-        exp2 = """DatetimeIndex([2011-01-01],
-              dtype='datetime64[ns]',
-              length=1,
-              freq='D',
-              tz=None)"""
-
-        exp3 = """DatetimeIndex([2011-01-01, 2011-01-02],
-              dtype='datetime64[ns]',
-              length=2,
-              freq='D',
-              tz=None)"""
-
-        exp4 = """DatetimeIndex([2011-01-01, ..., 2011-01-03],
-              dtype='datetime64[ns]',
-              length=3,
-              freq='D',
-              tz=None)"""
-
-        exp5 = """DatetimeIndex([2011-01-01 09:00:00+09:00, ..., 2011-01-01 11:00:00+09:00],
-              dtype='datetime64[ns]',
-              length=3,
-              freq='H',
-              tz='Asia/Tokyo')"""
-
-        exp6 = """DatetimeIndex([2011-01-01 09:00:00-05:00, ..., NaT],
-              dtype='datetime64[ns]',
-              length=3,
-              freq=None,
-              tz='US/Eastern')"""
+        exp1 = """DatetimeIndex([], dtype='datetime64[ns]', freq='D', tz=None)"""
+
+        exp2 = """DatetimeIndex(['2011-01-01'], dtype='datetime64[ns]', freq='D', tz=None)"""
+
+        exp3 = """DatetimeIndex(['2011-01-01', '2011-01-02'], dtype='datetime64[ns]', freq='D', tz=None)"""
+
+        exp4 = """DatetimeIndex(['2011-01-01', '2011-01-02', '2011-01-03'], dtype='datetime64[ns]', freq='D', tz=None)"""
+
+        exp5 = """DatetimeIndex(['2011-01-01 09:00:00+09:00', '2011-01-01 10:00:00+09:00', '2011-01-01 11:00:00+09:00'], dtype='datetime64[ns]', freq='H', tz='Asia/Tokyo')"""
+
+        exp6 = """DatetimeIndex(['2011-01-01 09:00:00-05:00', '2011-01-01 10:00:00-05:00', 'NaT'], dtype='datetime64[ns]', freq=None, tz='US/Eastern')"""
 
         for idx, expected in zip([idx1, idx2, idx3, idx4, idx5, idx6],
                                  [exp1, exp2, exp3, exp4, exp5, exp6]):
@@ -390,30 +366,15 @@ class TestTimedeltaIndexOps(Ops):
         idx4 = TimedeltaIndex(['1 days', '2 days', '3 days'], freq='D')
         idx5 = TimedeltaIndex(['1 days 00:00:01', '2 days', '3 days'])
 
-        exp1 = """TimedeltaIndex([],
-               dtype='timedelta64[ns]',
-               length=0,
-               freq='D')"""
+        exp1 = """TimedeltaIndex([], dtype='timedelta64[ns]', freq='D')"""
 
-        exp2 = """TimedeltaIndex(['1 days'],
-               dtype='timedelta64[ns]',
-               length=1,
-               freq='D')"""
+        exp2 = """TimedeltaIndex(['1 days'], dtype='timedelta64[ns]', freq='D')"""
 
-        exp3 = """TimedeltaIndex(['1 days', '2 days'],
-               dtype='timedelta64[ns]',
-               length=2,
-               freq='D')"""
+        exp3 = """TimedeltaIndex(['1 days', '2 days'], dtype='timedelta64[ns]', freq='D')"""
 
-        exp4 = """TimedeltaIndex(['1 days', ..., '3 days'],
-               dtype='timedelta64[ns]',
-               length=3,
-               freq='D')"""
+        exp4 = """TimedeltaIndex(['1 days', '2 days', '3 days'], dtype='timedelta64[ns]', freq='D')"""
 
-        exp5 = """TimedeltaIndex(['1 days 00:00:01', ..., '3 days 00:00:00'],
-               dtype='timedelta64[ns]',
-               length=3,
-               freq=None)"""
+        exp5 = """TimedeltaIndex(['1 days 00:00:01', '2 days 00:00:00', '3 days 00:00:00'], dtype='timedelta64[ns]', freq=None)"""
 
         for idx, expected in zip([idx1, idx2, idx3, idx4, idx5],
                                  [exp1, exp2, exp3, exp4, exp5]):
@@ -431,13 +392,13 @@ class TestTimedeltaIndexOps(Ops):
 
         exp1 = """TimedeltaIndex: 0 entries
 Freq: D"""
-        exp2 = """TimedeltaIndex: 1 entries, '1 days' to '1 days'
+        exp2 = """TimedeltaIndex: 1 entries, 1 days to 1 days
 Freq: D"""
-        exp3 = """TimedeltaIndex: 2 entries, '1 days' to '2 days'
+        exp3 = """TimedeltaIndex: 2 entries, 1 days to 2 days
 Freq: D"""
-        exp4 = """TimedeltaIndex: 3 entries, '1 days' to '3 days'
+        exp4 = """TimedeltaIndex: 3 entries, 1 days to 3 days
 Freq: D"""
-        exp5 = """TimedeltaIndex: 3 entries, '1 days 00:00:01' to '3 days 00:00:00'"""
+        exp5 = """TimedeltaIndex: 3 entries, 1 days 00:00:01 to 3 days 00:00:00"""
 
         for idx, expected in zip([idx1, idx2, idx3, idx4, idx5],
                                  [exp1, exp2, exp3, exp4, exp5]):
@@ -869,50 +830,23 @@ class TestPeriodIndexOps(Ops):
         idx8 = pd.period_range('2013Q1', periods=2, freq="Q")
         idx9 = pd.period_range('2013Q1', periods=3, freq="Q")
 
-        exp1 = """PeriodIndex([],
-            dtype='int64',
-            length=0,
-            freq='D')"""
-
-        exp2 = """PeriodIndex([2011-01-01],
-            dtype='int64',
-            length=1,
-            freq='D')"""
-
-        exp3 = """PeriodIndex([2011-01-01, 2011-01-02],
-            dtype='int64',
-            length=2,
-            freq='D')"""
-
-        exp4 = """PeriodIndex([2011-01-01, ..., 2011-01-03],
-            dtype='int64',
-            length=3,
-            freq='D')"""
-
-        exp5 = """PeriodIndex([2011, ..., 2013],
-            dtype='int64',
-            length=3,
-            freq='A-DEC')"""
-
-        exp6 = """PeriodIndex([2011-01-01 09:00, ..., NaT],
-            dtype='int64',
-            length=3,
-            freq='H')"""
-
-        exp7 = """PeriodIndex([2013Q1],
-            dtype='int64',
-            length=1,
-            freq='Q-DEC')"""
-
-        exp8 = """PeriodIndex([2013Q1, 2013Q2],
-            dtype='int64',
-            length=2,
-            freq='Q-DEC')"""
-
-        exp9 = """PeriodIndex([2013Q1, ..., 2013Q3],
-            dtype='int64',
-            length=3,
-            freq='Q-DEC')"""
+        exp1 = """PeriodIndex([], dtype='int64', freq='D')"""
+
+        exp2 = """PeriodIndex(['2011-01-01'], dtype='int64', freq='D')"""
+
+        exp3 = """PeriodIndex(['2011-01-01', '2011-01-02'], dtype='int64', freq='D')"""
+
+        exp4 = """PeriodIndex(['2011-01-01', '2011-01-02', '2011-01-03'], dtype='int64', freq='D')"""
+
+        exp5 = """PeriodIndex(['2011', '2012', '2013'], dtype='int64', freq='A-DEC')"""
+
+        exp6 = """PeriodIndex(['2011-01-01 09:00', '2012-02-01 10:00', 'NaT'], dtype='int64', freq='H')"""
+
+        exp7 = """PeriodIndex(['2013Q1'], dtype='int64', freq='Q-DEC')"""
+
+        exp8 = """PeriodIndex(['2013Q1', '2013Q2'], dtype='int64', freq='Q-DEC')"""
+
+        exp9 = """PeriodIndex(['2013Q1', '2013Q2', '2013Q3'], dtype='int64', freq='Q-DEC')"""
 
         for idx, expected in zip([idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9],
                                  [exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, exp9]):
