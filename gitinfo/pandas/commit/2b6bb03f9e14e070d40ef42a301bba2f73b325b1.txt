commit 2b6bb03f9e14e070d40ef42a301bba2f73b325b1
Author: Wouter Overmeire <lodagro@gmail.com>
Date:   Tue Jun 26 21:22:59 2012 +0200

    ENH: implement DataFrameGroupBy.boxplot(), close #1507

diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index cd3f1743f..c5889692a 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -1816,6 +1816,9 @@ class DataFrameGroupBy(NDFrameGroupBy):
 
         return result
 
+from pandas.tools.plotting import boxplot_frame_groupby
+DataFrameGroupBy.boxplot = boxplot_frame_groupby
+
 class PanelGroupBy(NDFrameGroupBy):
 
     def _iterate_slices(self):
diff --git a/pandas/tests/test_graphics.py b/pandas/tests/test_graphics.py
index ca4638cb7..34ef3c9ae 100644
--- a/pandas/tests/test_graphics.py
+++ b/pandas/tests/test_graphics.py
@@ -333,6 +333,38 @@ class TestDataFramePlots(unittest.TestCase):
     def _check_plot_fails(self, f, *args, **kwargs):
         self.assertRaises(Exception, f, *args, **kwargs)
 
+class TestDataFrameGroupByPlots(unittest.TestCase):
+
+    @classmethod
+    def setUpClass(cls):
+        import sys
+        if 'IPython' in sys.modules:
+            raise nose.SkipTest
+
+        try:
+            import matplotlib as mpl
+            mpl.use('Agg', warn=False)
+        except ImportError:
+            raise nose.SkipTest
+
+    @slow
+    def test_boxplot(self):
+        df = DataFrame(np.random.rand(10,2), columns=['Col1', 'Col2'] )
+        df['X'] = Series(['A','A','A','A','A','B','B','B','B','B'])
+        grouped = df.groupby(by='X')
+        _check_plot_works(grouped.boxplot)
+        _check_plot_works(grouped.boxplot, subplots=False)
+
+        tuples = zip(list(string.ascii_letters[:10]), range(10))
+        df = DataFrame(np.random.rand(10, 3),
+                       index=MultiIndex.from_tuples(tuples))
+        grouped = df.groupby(level=1)
+        _check_plot_works(grouped.boxplot)
+        _check_plot_works(grouped.boxplot, subplots=False)
+        grouped = df.unstack(level=1).groupby(level=0, axis=1)
+        _check_plot_works(grouped.boxplot)
+        _check_plot_works(grouped.boxplot, subplots=False)
+
 PNG_PATH = 'tmp.png'
 
 def _check_plot_works(f, *args, **kwargs):
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index 56273d480..7969f95f4 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -1226,6 +1226,70 @@ def hist_series(self, ax=None, grid=True, xlabelsize=None, xrot=None,
 
     return ax
 
+def boxplot_frame_groupby(grouped, subplots=True, column=None, fontsize=None,
+                          rot=0, grid=True, figsize=None, **kwds):
+    """
+    Make box plots from DataFrameGroupBy data.
+
+    Parameters
+    ----------
+    subplots :
+        * ``False`` - no subplots will be used
+        * ``True`` - create a subplot for each group
+    column : column name or list of names, or vector
+        Can be any valid input to groupby
+    fontsize : int or string
+    rot : label rotation angle
+    kwds : other plotting keyword arguments to be passed to matplotlib boxplot
+           function
+
+    Returns
+    -------
+    dict of key/value = group key/DataFrame.boxplot return value
+    or DataFrame.boxplot return value in case subplots=figures=False
+
+    Examples
+    --------
+    >>> import pandas
+    >>> import numpy as np
+    >>> import itertools
+    >>>
+    >>> tuples = [t for t in itertools.product(range(1000), range(4))]
+    >>> index = pandas.MultiIndex.from_tuples(tuples, names=['lvl0', 'lvl1'])
+    >>> data = np.random.randn(len(index),4)
+    >>> df = pandas.DataFrame(data, columns=list('ABCD'), index=index)
+    >>>
+    >>> grouped = df.groupby(level='lvl1')
+    >>> boxplot_frame_groupby(grouped)
+    >>>
+    >>> grouped = df.unstack(level='lvl1').groupby(level=0, axis=1)
+    >>> boxplot_frame_groupby(grouped, subplots=False)
+    """
+    if subplots is True:
+        nrows, ncols = _get_layout(len(grouped))
+        _, axes = _subplots(nrows=nrows, ncols=ncols, squeeze=False,
+                            sharex=False, sharey=True)
+        axes = axes.reshape(-1) if len(grouped) > 1 else axes
+
+        ret = {}
+        for (key, group), ax in zip(grouped, axes):
+            d = group.boxplot(ax=ax, column=column, fontsize=fontsize,
+                              rot=rot, grid=grid, figsize=figsize, **kwds)
+            ax.set_title(_stringify(key))
+            ret[key] = d
+    else:
+        from pandas.tools.merge import concat
+        keys, frames = zip(*grouped)
+        if grouped.axis == 0:
+            df = concat(frames, keys=keys, axis=1)
+        else:
+            if len(frames) > 1:
+                df = frames[0].join(frames[1::])
+            else:
+                df = frames[0]
+        ret = df.boxplot(column=column, fontsize=fontsize, rot=rot,
+                         grid=grid, figsize=figsize, **kwds)
+    return ret
 
 def _grouped_plot(plotf, data, column=None, by=None, numeric_only=True,
                   figsize=None, sharex=True, sharey=True, layout=None,
