commit d12ae36d6b8fb6049d2e8523229a926d992ed756
Author: Phillip Cloud <cpcloud@gmail.com>
Date:   Wed Sep 25 12:13:46 2013 -0400

    ENH: convert all datetime-like objects to Timestamp

diff --git a/pandas/computation/expr.py b/pandas/computation/expr.py
index e78cba932..ba2dffa9e 100644
--- a/pandas/computation/expr.py
+++ b/pandas/computation/expr.py
@@ -379,8 +379,6 @@ def add_ops(op_classes):
     return f
 
 
-_date_kinds = frozenset(['datetime64', 'timestamp', 'datetime'])
-
 @disallow(_unsupported_nodes)
 @add_ops(_op_classes)
 class BaseExprVisitor(ast.NodeVisitor):
@@ -496,7 +494,7 @@ class BaseExprVisitor(ast.NodeVisitor):
         res = op(lhs, rhs)
 
         if (res.op in _cmp_ops_syms and
-            lhs.kind in _date_kinds or rhs.kind in _date_kinds and
+            lhs.is_datetime or rhs.is_datetime and
             self.engine != 'pytables'):
             # all date ops must be done in python bc numexpr doesn't work well
             # with NaT
diff --git a/pandas/computation/ops.py b/pandas/computation/ops.py
index 0c88d4b08..fd5ee159f 100644
--- a/pandas/computation/ops.py
+++ b/pandas/computation/ops.py
@@ -5,6 +5,7 @@ import re
 import operator as op
 from functools import partial
 from itertools import product, islice, chain
+from datetime import datetime
 
 import numpy as np
 
@@ -161,21 +162,16 @@ class Term(StringMixin):
                                           self.type))
 
     @property
-    def kind(self):
-        t = self.type
+    def is_datetime(self):
         try:
-            res = t.__name__
+            t = self.type.type
         except AttributeError:
-            res = t.type.__name__
-        return res.lower()
+            t = self.type
+
+        return issubclass(t, (datetime, np.datetime64))
 
     @property
     def value(self):
-        kind = self.kind
-        if kind == 'timestamp':
-            return self._value.asm8
-        elif kind == 'datetime':
-            return np.datetime64(self._value)
         return self._value
 
     @value.setter
@@ -246,14 +242,13 @@ class Op(StringMixin):
         return all(operand.isscalar for operand in self.operands)
 
     @property
-    def kind(self):
-        t = self.return_type
-
+    def is_datetime(self):
         try:
-            res = t.__name__
+            t = self.return_type.type
         except AttributeError:
-            res = t.type.__name__
-        return res.lower()
+            t = self.return_type
+
+        return issubclass(t, (datetime, np.datetime64))
 
 
 def _in(x, y):
@@ -431,24 +426,20 @@ class BinOp(Op):
 
         lhs, rhs = self.lhs, self.rhs
 
-        if (is_term(lhs) and lhs.kind.startswith('datetime') and is_term(rhs)
-                and rhs.isscalar):
+        if is_term(lhs) and lhs.is_datetime and is_term(rhs) and rhs.isscalar:
             v = rhs.value
             if isinstance(v, (int, float)):
                 v = stringify(v)
-            v = _ensure_decoded(v)
-            v = pd.Timestamp(v)
+            v = pd.Timestamp(_ensure_decoded(v))
             if v.tz is not None:
                 v = v.tz_convert('UTC')
             self.rhs.update(v)
 
-        if (is_term(rhs) and rhs.kind.startswith('datetime') and
-                is_term(lhs) and lhs.isscalar):
+        if is_term(rhs) and rhs.is_datetime and is_term(lhs) and lhs.isscalar:
             v = lhs.value
             if isinstance(v, (int, float)):
                 v = stringify(v)
-            v = _ensure_decoded(v)
-            v = pd.Timestamp(v)
+            v = pd.Timestamp(_ensure_decoded(v))
             if v.tz is not None:
                 v = v.tz_convert('UTC')
             self.lhs.update(v)
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index b4a845551..0ddbaa770 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1910,8 +1910,10 @@ class DataFrame(NDFrame):
                 key = '{prefix}level_{i}'.format(prefix=prefix, i=i)
                 level = i
 
-            d[key] = Series(axis_index.get_level_values(level).values,
-                            index=axis_index, name=level)
+            level_values = axis_index.get_level_values(level)
+            s = level_values.to_series()
+            s.index = axis_index
+            d[key] = s
 
         # put the index/columns itself in the dict
         if isinstance(axis_index, MultiIndex):
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 7d0078dcd..ec35e7216 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -11432,23 +11432,28 @@ class TestDataFrameQueryWithMultiIndex(object):
         resolvers = df._get_index_resolvers('index')
         resolvers.update(df._get_index_resolvers('columns'))
 
+        def to_series(mi, level):
+            level_values = mi.get_level_values(level)
+            s = level_values.to_series()
+            s.index = mi
+            return s
+
+        col_series = df.columns.to_series()
         expected = {'index': df.index,
-                    'columns': Series(df.columns, index=df.columns,
-                                      name=df.columns.name),
-                    'spam': Series(df.index.get_level_values('spam'),
-                                   name='spam', index=df.index),
-                    'eggs': Series(df.index.get_level_values('eggs'),
-                                   name='eggs', index=df.index),
-                    'C0': Series(df.columns, index=df.columns,
-                                 name=df.columns.name)}
+                    'columns': col_series,
+                    'spam': to_series(df.index, 'spam'),
+                    'eggs': to_series(df.index, 'eggs'),
+                    'C0': col_series}
         for k, v in resolvers.items():
             if isinstance(v, Index):
                 assert v.is_(expected[k])
             elif isinstance(v, Series):
+                print(k)
                 tm.assert_series_equal(v, expected[k])
             else:
                 raise AssertionError("object must be a Series or Index")
 
+
 class TestDataFrameQueryNumExprPandas(unittest.TestCase):
     @classmethod
     def setUpClass(cls):
