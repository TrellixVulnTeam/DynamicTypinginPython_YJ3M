commit 922d041569895c992cd2d773b5e06c1426df4d5c
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Feb 7 13:52:33 2012 -0500

    BUG: also try to cast non-MultiIndex to better dtype when calling reset_index #726 #440

diff --git a/RELEASE.rst b/RELEASE.rst
index 01f9c1a77..dc77cc56b 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -257,6 +257,8 @@ pandas 0.7.0
     non-integer index (GH #707)
   - Use right dropna function for SparseSeries. Return dense Series for NA fill
     value (GH #730)
+  - Fix Index.format bug causing incorrectly string-formatted Series with
+    datetime indexes (# 758)
 
 Thanks
 ------
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 820802718..84fd5cc15 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1896,6 +1896,12 @@ class DataFrame(NDFrame):
         resetted : DataFrame
         """
         new_obj = self.copy()
+
+        def _maybe_cast(values):
+            if values.dtype == np.object_:
+                values = lib.maybe_convert_objects(values)
+            return values
+
         if not drop:
             if isinstance(self.index, MultiIndex):
                 names = self.index.names
@@ -1906,16 +1912,13 @@ class DataFrame(NDFrame):
                         col_name = 'level_%d' % i
 
                     # to ndarray and maybe infer different dtype
-                    level_values = lev.values
-                    if level_values.dtype == np.object_:
-                        level_values = lib.maybe_convert_objects(level_values)
-
+                    level_values = _maybe_cast(lev.values)
                     new_obj.insert(0, col_name, level_values.take(lab))
             else:
                 name = self.index.name
                 if name is None:
                     name = 'index' if 'index' not in self else 'level_0'
-                new_obj.insert(0, name, self.index.values)
+                new_obj.insert(0, name, _maybe_cast(self.index.values))
         new_obj.index = np.arange(len(new_obj))
         return new_obj
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 56a3ff3c5..28a3a29d4 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -4151,6 +4151,19 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         resetted = self.frame.reset_index()
         self.assertEqual(resetted.columns.name, 'columns')
 
+    def test_reset_index_right_dtype(self):
+        time = np.arange(0.0, 10, np.sqrt(2)/2)
+        s1 = Series((9.81 * time ** 2) /2,
+                    index=Index(time, name='time'),
+                    name='speed')
+        df = DataFrame(s1)
+
+        resetted = s1.reset_index()
+        self.assert_(resetted['time'].dtype == np.float64)
+
+        resetted = df.reset_index()
+        self.assert_(resetted['time'].dtype == np.float64)
+
     #----------------------------------------------------------------------
     # Tests to cope with refactored internals
 
