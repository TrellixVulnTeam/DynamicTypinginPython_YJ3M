commit 557351918aadce1200d42fb3df105478b59b314b
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Feb 9 15:20:11 2012 -0500

    BUG: use UnicodeWriter on Python 2.x

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 0b86ce3e9..f5e33db64 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -13,6 +13,8 @@ except ImportError:  # pragma: no cover
     from cStringIO import StringIO as BytesIO
 import itertools
 
+from cStringIO import StringIO
+
 from numpy.lib.format import read_array, write_array
 import numpy as np
 
@@ -628,6 +630,9 @@ if py3compat.PY3:  # pragma: no cover
     def UnicodeReader(f, dialect=csv.excel, encoding="utf-8", **kwds):
         # ignore encoding
         return csv.reader(f, dialect=csv.excel, **kwds)
+
+    def UnicodeWriter(f, dialect=csv.excel, encoding="utf-8", **kwds):
+        return csv.writer(f, dialect=csv.excel, **kwds)
 else:
     class UnicodeReader:
         """
@@ -648,3 +653,33 @@ else:
 
         def __iter__(self):  # pragma: no cover
             return self
+
+    class UnicodeWriter:
+        """
+        A CSV writer which will write rows to CSV file "f",
+        which is encoded in the given encoding.
+        """
+
+        def __init__(self, f, dialect=csv.excel, encoding="utf-8", **kwds):
+            # Redirect output to a queue
+            self.queue = StringIO()
+            self.writer = csv.writer(self.queue, dialect=dialect, **kwds)
+            self.stream = f
+            self.encoder = codecs.getincrementalencoder(encoding)()
+
+        def writerow(self, row):
+            row = [x if isinstance(x, basestring) else str(x) for x in row]
+            self.writer.writerow([s.encode("utf-8") for s in row])
+            # Fetch UTF-8 output from the queue ...
+            data = self.queue.getvalue()
+            data = data.decode("utf-8")
+            # ... and reencode it into the target encoding
+            data = self.encoder.encode(data)
+            # write to the target stream
+            self.stream.write(data)
+            # empty queue
+            self.queue.truncate(0)
+
+        def writerows(self, rows):
+            for row in rows:
+                self.writerow(row)
diff --git a/pandas/core/daterange.py b/pandas/core/daterange.py
index 152510c2a..b90f08c04 100644
--- a/pandas/core/daterange.py
+++ b/pandas/core/daterange.py
@@ -372,13 +372,13 @@ class DateRange(Index):
         else:
             left, right = other, self
 
-        left_end = left[-1]
-        right_start = right[0]
+        end = min(left[-1], right[-1])
+        start = right[0]
 
-        if left_end < right_start:
+        if end < start:
             return Index([])
         else:
-            lslice = slice(*left.slice_locs(right_start, None))
+            lslice = slice(*left.slice_locs(start, end))
             left_chunk = left.values[lslice]
             return self._view_like(left_chunk)
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 1854cec34..e7aba5f74 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -868,23 +868,12 @@ class DataFrame(NDFrame):
                     # given a string for a DF with Index
                     index_label = [index_label]
 
-                if encoding is not None:
-                    encoded_labels = [csv_encode(val, encoding=encoding)
-                                      for val in index_label]
-                    encoded_cols = [csv_encode(val, encoding=encoding)
-                                    for val in cols]
-                else:
-                    encoded_labels = list(index_label)
-                    encoded_cols = list(cols)
+                encoded_labels = list(index_label)
+                encoded_cols = list(cols)
 
                 writer.writerow(encoded_labels + encoded_cols)
             else:
-                if encoding is not None:
-                    encoded_cols = [csv_encode(val, encoding=encoding)
-                                    for val in cols]
-                else:
-                    encoded_cols = list(cols)
-
+                encoded_cols = list(cols)
                 writer.writerow(encoded_cols)
 
         nlevels = getattr(self.index, 'nlevels', 1)
@@ -902,13 +891,7 @@ class DataFrame(NDFrame):
 
                 row_fields.append(val)
 
-            if encoding is not None:
-                encoded_rows = [csv_encode(val, encoding=encoding)
-                                for val in row_fields]
-            else:
-                encoded_rows = list(row_fields)
-
-            writer.writerow(encoded_rows)
+            writer.writerow(row_fields)
 
     def to_csv(self, path_or_buf, sep=",", na_rep='', cols=None,
                header=True, index=True, index_label=None, mode='w',
@@ -953,7 +936,11 @@ class DataFrame(NDFrame):
             close = True
 
         try:
-            csvout = csv.writer(f, lineterminator='\n', delimiter=sep)
+            if encoding is not None:
+                csvout = com.UnicodeWriter(f, lineterminator='\n',
+                                           delimiter=sep)
+            else:
+                csvout = csv.writer(f, lineterminator='\n', delimiter=sep)
             self._helper_csvexcel(csvout, na_rep=na_rep, cols=cols,
                                   header=header, index=index,
                                   index_label=index_label, encoding=encoding)
diff --git a/pandas/tests/test_daterange.py b/pandas/tests/test_daterange.py
index 2bb8b3880..ea7ff9da5 100644
--- a/pandas/tests/test_daterange.py
+++ b/pandas/tests/test_daterange.py
@@ -228,6 +228,13 @@ class TestDateRange(unittest.TestCase):
         expected = Index([])
         self.assert_(the_int.equals(expected))
 
+    def test_intersection_bug(self):
+        # GH #771
+        a = DateRange('11/30/2011','12/31/2011')
+        b = DateRange('12/10/2011','12/20/2011')
+        result = a.intersection(b)
+        self.assert_(result.equals(b))
+
     def test_with_tzinfo(self):
         _skip_if_no_pytz()
         tz = pytz.timezone('US/Central')
