commit 6a0863f9c232df195912ebad02ca19184260261c
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jul 19 20:28:54 2012 -0400

    BUG: len-0 Series min/max/describe #1650

diff --git a/RELEASE.rst b/RELEASE.rst
index 0e885e84b..1da12b2e9 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -94,6 +94,7 @@ pandas 0.8.1
   - Ensure string alias converted (valid in DatetimeIndex.get_loc) in
     DataFrame.xs / __getitem__ (#1644)
   - Fix use of string alias timestamps with tz-aware time series (#1647)
+  - Fix Series.max/min and Series.describe on len-0 series (#1650)
 
 pandas 0.8.0
 ============
diff --git a/pandas/core/nanops.py b/pandas/core/nanops.py
index 5f09c546b..c0f2ba765 100644
--- a/pandas/core/nanops.py
+++ b/pandas/core/nanops.py
@@ -151,7 +151,12 @@ def _nanmin(values, axis=None, skipna=True):
         else:
             result = __builtin__.min(values)
     else:
-        result = values.min(axis)
+        if ((axis is not None and values.shape[axis] == 0)
+             or values.size == 0):
+            result = values.sum(axis)
+            result.fill(np.nan)
+        else:
+            result = values.min(axis)
 
     return _maybe_null_out(result, axis, mask)
 
@@ -172,7 +177,13 @@ def _nanmax(values, axis=None, skipna=True):
         else:
             result = __builtin__.max(values)
     else:
-        result = values.max(axis)
+        if ((axis is not None and values.shape[axis] == 0)
+             or values.size == 0):
+            result = values.sum(axis)
+            result.fill(np.nan)
+        else:
+            result = values.max(axis)
+
     return _maybe_null_out(result, axis, mask)
 
 def nanargmax(values, axis=None, skipna=True):
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 30e91ecf7..77c7f4b66 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1378,12 +1378,11 @@ copy : boolean, default False
 
             names = ['count']
             data = [self.count()]
-            if data[0] > 0:
-                names += ['mean', 'std', 'min', pretty_name(lb), '50%',
-                        pretty_name(ub), 'max']
-                data += [self.mean(), self.std(), self.min(),
-                        self.quantile(lb), self.median(), self.quantile(ub),
-                        self.max()]
+            names += ['mean', 'std', 'min', pretty_name(lb), '50%',
+                    pretty_name(ub), 'max']
+            data += [self.mean(), self.std(), self.min(),
+                    self.quantile(lb), self.median(), self.quantile(ub),
+                    self.max()]
 
         return Series(data, index=names)
 
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 667072d04..0e5d4411c 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -210,12 +210,6 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
 
         self.empty = Series([], index=[])
 
-        self.noneSeries = Series([None])
-        self.noneSeries.name = 'None'
-
-        self.nanSeries = Series([np.nan])
-        self.nanSeries.name = 'NaN'
-
     def test_constructor(self):
         # Recognize TimeSeries
         self.assert_(isinstance(self.ts, TimeSeries))
@@ -1256,17 +1250,23 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         assert_series_equal(rs, xp)
 
     def test_describe_empty(self):
-        assert_series_equal(self.empty.describe(),
-                            Series([0], index=['count']))
+        result = self.empty.describe()
+
+        self.assert_(result['count'] == 0)
+        self.assert_(result.drop('count').isnull().all())
+
+        nanSeries = Series([np.nan])
+        nanSeries.name = 'NaN'
+        result = nanSeries.describe()
+        self.assert_(result['count'] == 0)
+        self.assert_(result.drop('count').isnull().all())
 
     def test_describe_none(self):
-        assert_series_equal(self.noneSeries.describe(),
+        noneSeries = Series([None])
+        noneSeries.name = 'None'
+        assert_series_equal(noneSeries.describe(),
                             Series([0, 0], index=['count', 'unique']))
 
-    def test_describe_nan(self):
-        assert_series_equal(self.nanSeries.describe(), 
-                            Series([0], index=['count']))
-
     def test_append(self):
         appendedSeries = self.series.append(self.objSeries)
         for idx, value in appendedSeries.iteritems():
