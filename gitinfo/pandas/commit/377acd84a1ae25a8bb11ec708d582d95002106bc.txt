commit 377acd84a1ae25a8bb11ec708d582d95002106bc
Author: Stephen Lin <stephenwlin@gmail.com>
Date:   Sun Feb 17 14:40:03 2013 -0500

    BUG: nanops.var produces incorrect results due to int64 overflow

diff --git a/pandas/core/nanops.py b/pandas/core/nanops.py
index 1315fc3ce..000320027 100644
--- a/pandas/core/nanops.py
+++ b/pandas/core/nanops.py
@@ -138,6 +138,9 @@ def _nanmedian(values, axis=None, skipna=True):
 
 
 def _nanvar(values, axis=None, skipna=True, ddof=1):
+    if not isinstance(values.dtype.type, np.floating):
+        values = values.astype('f8')
+
     mask = isnull(values)
 
     if axis is not None:
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 69463d0dc..24e684ac3 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -1401,7 +1401,8 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
 
             # check the result is correct
             nona = self.series.dropna()
-            assert_almost_equal(f(nona), alternate(nona))
+            assert_almost_equal(f(nona), alternate(nona.values))
+            assert_almost_equal(f(self.series), alternate(nona.values))
 
             allna = self.series * nan
             self.assert_(np.isnan(f(allna)))
@@ -1410,6 +1411,12 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
             s = Series([1, 2, 3, None, 5])
             f(s)
 
+            # 2888
+            l = [0]
+            l.extend(list(range(2**40,2**40+1000)))
+            s = Series(l, dtype='int64')
+            assert_almost_equal(float(f(s)), float(alternate(s.values)))
+
             # check date range
             if check_objects:
                 s = Series(bdate_range('1/1/2000', periods=10))
