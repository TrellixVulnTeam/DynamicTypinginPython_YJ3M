commit b68efcf49ac7105a198aed4830b8550ba3f50206
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Jul 22 12:04:20 2011 -0400

    BUG: ndim not handled correctly in BlockManager pickling

diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 489dac408..ca5666517 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -77,6 +77,7 @@ class Block(object):
         self.items = Index(items)
         self.ref_items = Index(ref_items)
         self.values = values
+        self.ndim = values.ndim
 
     @property
     def shape(self):
@@ -242,11 +243,13 @@ class BlockManager(object):
         for block in blocks:
             assert(ndim == block.values.ndim)
 
-        self.ndim = ndim
-
         if not skip_integrity_check:
             self._verify_integrity()
 
+    @property
+    def ndim(self):
+        return len(self.axes)
+
     def is_mixed_dtype(self):
         counts = set()
         for block in self.blocks:
@@ -285,13 +288,15 @@ class BlockManager(object):
         block_values = [b.values for b in self.blocks]
         block_items = [np.asarray(b.items) for b in self.blocks]
         axes_array = [np.asarray(ax) for ax in self.axes]
-        return axes_array, block_values, block_items, self.ndim
+        return axes_array, block_values, block_items
 
     def __setstate__(self, state):
-        ax_arrays, bvalues, bitems, ndim = state
+        if len(state) == 4: # pragma: no cover
+            ax_arrays, bvalues, bitems, _ = state
+        else:
+            ax_arrays, bvalues, bitems = state
 
         self.axes = [_ensure_index(ax) for ax in ax_arrays]
-
         blocks = []
         for values, items in zip(bvalues, bitems):
             blk = make_block(values, items, self.axes[0])
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 370a1761e..f60cd5d5e 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -857,6 +857,9 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         unpickled = pickle.loads(pickle.dumps(self.mixed_frame))
         assert_frame_equal(self.mixed_frame, unpickled)
 
+        # buglet
+        self.mixed_frame._data.ndim
+
     def test_toDict(self):
         test_data = {
                 'A' : {'1' : 1, '2' : 2},
