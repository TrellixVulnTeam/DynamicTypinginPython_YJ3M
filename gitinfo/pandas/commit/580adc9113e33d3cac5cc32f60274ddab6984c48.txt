commit 580adc9113e33d3cac5cc32f60274ddab6984c48
Author: Chang She <chang@lambdafoundry.com>
Date:   Tue May 8 00:54:05 2012 -0400

    TST: test cases for replace method. #929

diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 44cc2ccaa..27b1f8870 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -5441,6 +5441,31 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         df = DataFrame([1, 2, 3])
         self.failUnlessRaises(ValueError, lambda: bool(df))
 
+    def test_replace(self):
+        N = 100
+        df = DataFrame(np.fabs(np.random.randn(len(N), 5)),
+                       index=tm.makeDataIndex(N))
+        df.ix[:5, 0] = np.nan
+        df[6:10, 1] = 'foo'
+        df[20:30, 2] = 'bar'
+
+        rs = df.replace([np.nan, 'foo', 'bar'], -1)
+        self.assert_((rs.ix[:5, 0] == -1).all())
+        self.assert_((rs.ix[6:10, 1] == -1).all())
+        self.assert_((rs.ix[20:30, 2] == -1).all())
+        self.assert_((df >= 0).all())
+
+        rs = df.replace({np.nan : -1, 'foo' : -2, 'bar' : -3})
+        self.assert_((rs.ix[:5, 0] == -1).all())
+        self.assert_((rs.ix[6:10, 1] == -2).all())
+        self.assert_((rs.ix[20:30, 2] == -3).all())
+        self.assert_((df >= 0).all())
+
+        df.replace([np.nan, 'foo', 'bar'], -1, inplace=True)
+        self.assert_((df.ix[:5, 0] == -1).all())
+        self.assert_((df.ix[6:10, 1] == -1).all())
+        self.assert_((df.ix[20:30, 2] == -1).all())
+
 if __name__ == '__main__':
     # unittest.main()
     import nose
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index e1441e9d7..8a2652f75 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -1294,6 +1294,43 @@ class TestLongPanel(unittest.TestCase):
         # corner case, empty
         df = pivot(np.array([]), np.array([]), np.array([]))
 
+    def test_replace(self):
+        N = 100
+        df1 = DataFrame(np.fabs(np.random.randn(len(N), 5)),
+                        index=tm.makeDataIndex(N))
+        df1.ix[:5, 0] = np.nan
+        df1[6:10, 1] = 'foo'
+        df1[20:30, 2] = 'bar'
+
+        df2 = DataFrame(np.fabs(np.random.randn(len(N), 5)),
+                       index=tm.makeDataIndex(N))
+        df2.ix[:5, 0] = 'bar'
+        df2[6:10, 1] = np.nan
+        df2[20:30, 2] = 'foo'
+
+        panel = Panel({'x' : df1, 'y' : df2})
+        rs = panel.replace([np.nan, 'foo', 'bar'], -1)
+        self.assert_((rs.ix[:, :5, 0] == -1).all())
+        self.assert_((rs.ix[:, 6:10, 1] == -1).all())
+        self.assert_((rs.ix[:, 20:30, 2] == -1).all())
+        self.assert_((panel >= 0).all())
+
+        rs = panel.replace({np.nan : -1, 'foo' : -2, 'bar' : -3})
+        self.assert_((rs.ix[0, :5, 0] == -1).all())
+        self.assert_((rs.ix[0, 6:10, 1] == -2).all())
+        self.assert_((rs.ix[0, 20:30, 2] == -3).all())
+
+        self.assert_((rs.ix[1, :5, 0] == -3).all())
+        self.assert_((rs.ix[1, 6:10, 1] == -1).all())
+        self.assert_((rs.ix[1, 20:30, 2] == -2).all())
+
+        self.assert_((panel >= 0).all())
+
+        panel.replace([np.nan, 'foo', 'bar'], -1, inplace=True)
+        self.assert_((panel.ix[:5, 0] == -1).all())
+        self.assert_((panel.ix[6:10, 1] == -1).all())
+        self.assert_((panel.ix[20:30, 2] == -1).all())
+
 def test_monotonic():
     pos = np.array([1, 2, 3, 5])
 
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index d81fb3120..45ea0cacd 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -2647,6 +2647,29 @@ class TestSeriesNonUnique(unittest.TestCase):
         self.assert_(isinstance(ser, TimeSeries))
         self.assert_(isinstance(ser.index, DatetimeIndex))
 
+    def test_replace(self):
+        N = 100
+        ser = Series(np.fabs(np.random.randn(len(N))), tm.makeDataIndex(N))
+        ser[:5] = np.nan
+        ser[6:10] = 'foo'
+        ser[20:30] = 'bar'
+
+        rs = ser.replace([np.nan, 'foo', 'bar'], -1)
+        self.assert_((rs[:5] == -1).all())
+        self.assert_((rs[6:10] == -1).all())
+        self.assert_((rs[20:30] == -1).all())
+        self.assert_((ser >= 0).all())
+
+        rs = ser.replace({np.nan : -1, 'foo' : -2, 'bar' : -3})
+        self.assert_((rs[:5] == -1).all())
+        self.assert_((rs[6:10] == -2).all())
+        self.assert_((rs[20:30] == -3).all())
+        self.assert_((ser >= 0).all())
+
+        ser.replace([np.nan, 'foo', 'bar'], -1, inplace=True)
+        self.assert_((ser[:5] == -1).all())
+        self.assert_((ser[6:10] == -1).all())
+        self.assert_((ser[20:30] == -1).all())
     def test_repeat(self):
         s = Series(np.random.randn(3), index=['a', 'b', 'c'])
 
