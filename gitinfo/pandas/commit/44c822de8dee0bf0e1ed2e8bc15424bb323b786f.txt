commit 44c822de8dee0bf0e1ed2e8bc15424bb323b786f
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Fri Feb 16 10:21:52 2018 -0800

    remove usages of _get_na_value (#19692)

diff --git a/pandas/core/indexes/api.py b/pandas/core/indexes/api.py
index b7af533f9..2e5ec8b55 100644
--- a/pandas/core/indexes/api.py
+++ b/pandas/core/indexes/api.py
@@ -2,7 +2,6 @@ from pandas.core.indexes.base import (Index,
                                       _new_Index,
                                       _ensure_index,
                                       _ensure_index_from_sequences,
-                                      _get_na_value,
                                       InvalidIndexError)  # noqa
 from pandas.core.indexes.category import CategoricalIndex  # noqa
 from pandas.core.indexes.multi import MultiIndex  # noqa
@@ -25,7 +24,7 @@ __all__ = ['Index', 'MultiIndex', 'NumericIndex', 'Float64Index', 'Int64Index',
            'InvalidIndexError', 'TimedeltaIndex',
            'PeriodIndex', 'DatetimeIndex',
            '_new_Index', 'NaT',
-           '_ensure_index', '_ensure_index_from_sequences', '_get_na_value',
+           '_ensure_index', '_ensure_index_from_sequences',
            '_get_combined_index',
            '_get_objs_combined_axis', '_union_indexes',
            '_get_consensus_names',
diff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py
index 81b6b28d3..02dd2dbc2 100644
--- a/pandas/core/indexes/base.py
+++ b/pandas/core/indexes/base.py
@@ -2098,7 +2098,7 @@ class Index(IndexOpsMixin, PandasObject):
         try:
             loc = self.get_loc(label, method='pad')
         except KeyError:
-            return _get_na_value(self.dtype)
+            return self._na_value
         else:
             if isinstance(loc, slice):
                 loc = loc.indices(len(self))[-1]
@@ -4316,12 +4316,6 @@ def _ensure_index(index_like, copy=False):
     return Index(index_like)
 
 
-def _get_na_value(dtype):
-    if is_datetime64_any_dtype(dtype) or is_timedelta64_dtype(dtype):
-        return libts.NaT
-    return np.nan
-
-
 def _ensure_has_len(seq):
     """If seq is an iterator, put its values into a list."""
     try:
diff --git a/pandas/core/indexes/multi.py b/pandas/core/indexes/multi.py
index 94dbd8b88..73f4aee1c 100644
--- a/pandas/core/indexes/multi.py
+++ b/pandas/core/indexes/multi.py
@@ -34,7 +34,7 @@ from pandas.core.config import get_option
 
 from pandas.core.indexes.base import (
     Index, _ensure_index,
-    _get_na_value, InvalidIndexError,
+    InvalidIndexError,
     _index_shared_docs)
 from pandas.core.indexes.frozen import (
     FrozenNDArray, FrozenList, _ensure_frozen)
@@ -804,7 +804,7 @@ class MultiIndex(Index):
             elif box:
                 taken = algos.take_1d(lev._box_values(lev._ndarray_values),
                                       lab,
-                                      fill_value=_get_na_value(lev.dtype.type))
+                                      fill_value=lev._na_value)
             else:
                 taken = algos.take_1d(np.asarray(lev._values), lab)
             values.append(taken)
diff --git a/pandas/core/reshape/reshape.py b/pandas/core/reshape/reshape.py
index c8bca476c..3ef152d09 100644
--- a/pandas/core/reshape/reshape.py
+++ b/pandas/core/reshape/reshape.py
@@ -29,7 +29,7 @@ from pandas.core.sorting import (get_group_index, get_compressed_ids,
 import pandas.core.algorithms as algos
 from pandas._libs import algos as _algos, reshape as _reshape
 
-from pandas.core.index import Index, MultiIndex, _get_na_value
+from pandas.core.index import Index, MultiIndex
 
 
 class _Unstacker(object):
@@ -260,7 +260,7 @@ class _Unstacker(object):
                 return self.removed_level
 
             lev = self.removed_level
-            return lev.insert(0, _get_na_value(lev.dtype.type))
+            return lev.insert(0, lev._na_value)
 
         stride = len(self.removed_level) + self.lift
         width = len(self.value_columns)
@@ -299,7 +299,7 @@ class _Unstacker(object):
         if len(self.new_index_levels) == 1:
             lev, lab = self.new_index_levels[0], result_labels[0]
             if (lab == -1).any():
-                lev = lev.insert(len(lev), _get_na_value(lev.dtype.type))
+                lev = lev.insert(len(lev), lev._na_value)
             return lev.take(lab)
 
         return MultiIndex(levels=self.new_index_levels, labels=result_labels,
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 655eaa537..90dc14836 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1261,8 +1261,6 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         -------
         nobs : int or Series (if level specified)
         """
-        from pandas.core.index import _get_na_value
-
         if level is None:
             return notna(com._values_from_object(self)).sum()
 
@@ -1275,7 +1273,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         mask = lab == -1
         if mask.any():
             lab[mask] = cnt = len(lev)
-            lev = lev.insert(cnt, _get_na_value(lev.dtype.type))
+            lev = lev.insert(cnt, lev._na_value)
 
         obs = lab[notna(self.values)]
         out = np.bincount(obs, minlength=len(lev) or None)
