commit 830eb42aa9fc07e0355365e2286e9637c93db7a0
Author: Fabrizio Pollastri <f.pollastri@inrim.it>
Date:   Thu Jan 19 13:53:08 2012 +0100

    * Added cummax and cummin methods for Series And DataFrame.

diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 8ec6d9bf8..102d6750a 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -435,6 +435,78 @@ class NDFrame(PandasObject):
             result = y.cumprod(axis)
         return self._wrap_array(result, self.axes, copy=False)
 
+    def cummax(self, axis=None, skipna=True):
+        """
+        Return DataFrame of cumulative max over requested axis.
+
+        Parameters
+        ----------
+        axis : {0, 1}
+            0 for row-wise, 1 for column-wise
+        skipna : boolean, default True
+            Exclude NA/null values. If an entire row/column is NA, the result
+            will be NA
+
+        Returns
+        -------
+        y : DataFrame
+        """
+        if axis is None:
+            axis = self._default_stat_axis
+        else:
+            axis = self._get_axis_number(axis)
+
+        y = self.values.copy()
+        if not issubclass(y.dtype.type, np.integer):
+            mask = np.isnan(self.values)
+
+            if skipna:
+                np.putmask(y, mask, -np.inf)
+
+            result = np.maximum.accumulate(y,axis)
+
+            if skipna:
+                np.putmask(result, mask, np.nan)
+        else:
+            result = np.maximum.accumulate(y,axis)
+        return self._wrap_array(result, self.axes, copy=False)
+
+    def cummin(self, axis=None, skipna=True):
+        """
+        Return DataFrame of cumulative min over requested axis.
+
+        Parameters
+        ----------
+        axis : {0, 1}
+            0 for row-wise, 1 for column-wise
+        skipna : boolean, default True
+            Exclude NA/null values. If an entire row/column is NA, the result
+            will be NA
+
+        Returns
+        -------
+        y : DataFrame
+        """
+        if axis is None:
+            axis = self._default_stat_axis
+        else:
+            axis = self._get_axis_number(axis)
+
+        y = self.values.copy()
+        if not issubclass(y.dtype.type, np.integer):
+            mask = np.isnan(self.values)
+
+            if skipna:
+                np.putmask(y, mask, np.inf)
+
+            result = np.minimum.accumulate(y,axis)
+
+            if skipna:
+                np.putmask(result, mask, np.nan)
+        else:
+            result = np.minimum.accumulate(y,axis)
+        return self._wrap_array(result, self.axes, copy=False)
+
     def copy(self, deep=True):
         """
         Make a copy of this object
diff --git a/pandas/core/series.py b/pandas/core/series.py
index cee99a733..0284bbed4 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -989,6 +989,64 @@ copy : boolean, default False
 
         return Series(result, index=self.index)
 
+    def cummax(self, axis=0, dtype=None, out=None, skipna=True):
+        """
+        Cumulative max of values. Preserves locations of NaN values
+
+        Extra parameters are to preserve ndarray interface.
+
+        Parameters
+        ----------
+        skipna : boolean, default True
+            Exclude NA/null values
+
+        Returns
+        -------
+        cummax : Series
+        """
+        arr = self.values.copy()
+
+        do_mask = skipna and not issubclass(self.dtype.type, np.integer)
+        if do_mask:
+            mask = isnull(arr)
+            np.putmask(arr, mask, -np.inf)
+
+        result = np.maximum.accumulate(arr)
+
+        if do_mask:
+            np.putmask(result, mask, np.nan)
+
+        return Series(result, index=self.index)
+
+    def cummin(self, axis=0, dtype=None, out=None, skipna=True):
+        """
+        Cumulative min of values. Preserves locations of NaN values
+
+        Extra parameters are to preserve ndarray interface.
+
+        Parameters
+        ----------
+        skipna : boolean, default True
+            Exclude NA/null values
+
+        Returns
+        -------
+        cummin : Series
+        """
+        arr = self.values.copy()
+
+        do_mask = skipna and not issubclass(self.dtype.type, np.integer)
+        if do_mask:
+            mask = isnull(arr)
+            np.putmask(arr, mask, np.inf)
+
+        result = np.minimum.accumulate(arr)
+
+        if do_mask:
+            np.putmask(result, mask, np.nan)
+
+        return Series(result, index=self.index)
+
     @Appender(np.ndarray.round.__doc__)
     def round(self, decimals=0, out=None):
         """
