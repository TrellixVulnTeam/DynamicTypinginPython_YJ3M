commit d282067e190382f6dc13f4a835a6b2382cab24fe
Author: Joris Van den Bossche <jorisvandenbossche@gmail.com>
Date:   Tue Sep 9 10:35:37 2014 +0200

    CLN: fix whitespace issue in vb_suite/io_sql.py

diff --git a/vb_suite/io_sql.py b/vb_suite/io_sql.py
index 696f66ec3..1a60982c4 100644
--- a/vb_suite/io_sql.py
+++ b/vb_suite/io_sql.py
@@ -19,11 +19,11 @@ sdate = datetime(2014, 6, 1)
 setup = common_setup + """
 index = [rands(10) for _ in xrange(10000)]
 df = DataFrame({'float1' : randn(10000),
-				'float2' : randn(10000),
-				'string1' : ['foo'] * 10000,
-				'bool1' : [True] * 10000,
-				'int1' : np.random.randint(0, 100000, size=10000)},
-			   index=index)
+                'float2' : randn(10000),
+                'string1' : ['foo'] * 10000,
+                'bool1' : [True] * 10000,
+                'int1' : np.random.randint(0, 100000, size=10000)},
+               index=index)
 """
 
 sql_write_sqlalchemy = Benchmark("df.to_sql('test1', engine, if_exists='replace')",
@@ -39,11 +39,11 @@ sql_write_fallback = Benchmark("df.to_sql('test1', con, if_exists='replace')",
 setup = common_setup + """
 index = [rands(10) for _ in xrange(10000)]
 df = DataFrame({'float1' : randn(10000),
-				'float2' : randn(10000),
-				'string1' : ['foo'] * 10000,
-				'bool1' : [True] * 10000,
-				'int1' : np.random.randint(0, 100000, size=10000)},
-			index=index)
+                'float2' : randn(10000),
+                'string1' : ['foo'] * 10000,
+                'bool1' : [True] * 10000,
+                'int1' : np.random.randint(0, 100000, size=10000)},
+            index=index)
 df.to_sql('test2', engine, if_exists='replace')
 df.to_sql('test2', con, if_exists='replace')
 """
@@ -63,9 +63,9 @@ sql_read_table_sqlalchemy = Benchmark("read_sql_table('test2', engine)",
 
 setup = common_setup + """
 df = DataFrame({'float' : randn(10000),
-				'string' : ['foo'] * 10000,
-				'bool' : [True] * 10000,
-				'datetime' : date_range('2000-01-01', periods=10000, freq='s')})
+                'string' : ['foo'] * 10000,
+                'bool' : [True] * 10000,
+                'datetime' : date_range('2000-01-01', periods=10000, freq='s')})
 df.loc[1000:3000, 'float'] = np.nan
 """
 
@@ -74,31 +74,31 @@ sql_float_write_sqlalchemy = \
               setup, start_date=sdate)
 
 sql_float_write_fallback = \
-	Benchmark("df[['float']].to_sql('test_float', con, if_exists='replace')",
+    Benchmark("df[['float']].to_sql('test_float', con, if_exists='replace')",
               setup, start_date=sdate)
 
 sql_string_write_sqlalchemy = \
-	Benchmark("df[['string']].to_sql('test_string', engine, if_exists='replace')",
+    Benchmark("df[['string']].to_sql('test_string', engine, if_exists='replace')",
               setup, start_date=sdate)
 
 sql_string_write_fallback = \
-	Benchmark("df[['string']].to_sql('test_string', con, if_exists='replace')",
-			  setup, start_date=sdate)
+    Benchmark("df[['string']].to_sql('test_string', con, if_exists='replace')",
+              setup, start_date=sdate)
 
 sql_datetime_write_sqlalchemy = \
-	Benchmark("df[['datetime']].to_sql('test_datetime', engine, if_exists='replace')",
-			setup, start_date=sdate)
+    Benchmark("df[['datetime']].to_sql('test_datetime', engine, if_exists='replace')",
+            setup, start_date=sdate)
 
 #sql_datetime_write_fallback = \
-#	Benchmark("df[['datetime']].to_sql('test_datetime', con, if_exists='replace')",
-#			setup3, start_date=sdate)
+#   Benchmark("df[['datetime']].to_sql('test_datetime', con, if_exists='replace')",
+#           setup3, start_date=sdate)
 
 #-------------------------------------------------------------------------------
 # type specific read
 
 setup = common_setup + """
 df = DataFrame({'float' : randn(10000),
-				'datetime' : date_range('2000-01-01', periods=10000, freq='s')})
+                'datetime' : date_range('2000-01-01', periods=10000, freq='s')})
 df['datetime_string'] = df['datetime'].map(str)
 
 df.to_sql('test_type', engine, if_exists='replace')
@@ -106,21 +106,21 @@ df[['float', 'datetime_string']].to_sql('test_type', con, if_exists='replace')
 """
 
 sql_float_read_query_sqlalchemy = \
-	Benchmark("read_sql_query('SELECT float FROM test_type', engine)",
-			setup, start_date=sdate)
+    Benchmark("read_sql_query('SELECT float FROM test_type', engine)",
+            setup, start_date=sdate)
 
 sql_float_read_table_sqlalchemy = \
-	Benchmark("read_sql_table('test_type', engine, columns=['float'])",
-			setup, start_date=sdate)
+    Benchmark("read_sql_table('test_type', engine, columns=['float'])",
+            setup, start_date=sdate)
 
 sql_float_read_query_fallback = \
-	Benchmark("read_sql_query('SELECT float FROM test_type', con)",
-			setup, start_date=sdate)
+    Benchmark("read_sql_query('SELECT float FROM test_type', con)",
+            setup, start_date=sdate)
 
 sql_datetime_read_as_native_sqlalchemy = \
-	Benchmark("read_sql_table('test_type', engine, columns=['datetime'])",
-			setup, start_date=sdate)
+    Benchmark("read_sql_table('test_type', engine, columns=['datetime'])",
+            setup, start_date=sdate)
 
 sql_datetime_read_and_parse_sqlalchemy = \
-	Benchmark("read_sql_table('test_type', engine, columns=['datetime_string'], parse_dates=['datetime_string'])",
-			setup, start_date=sdate)
+    Benchmark("read_sql_table('test_type', engine, columns=['datetime_string'], parse_dates=['datetime_string'])",
+            setup, start_date=sdate)
