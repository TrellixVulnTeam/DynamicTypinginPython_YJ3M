commit e0bb6f17950c42e379b59982f27d13fb3e07360f
Author: Kevin Sheppard <kevin.sheppard@economics.ox.ac.uk>
Date:   Fri Jun 13 14:51:45 2014 -0400

    FIX: Enable fixed width strings to be read from Stata 13 (117) files
    
    Fixes a bug which prevented files containing fixed width string data from being read.  Stata 13 files also allow variable length strings, which are not supported in the current version, and an explicit exception regarding this type is now given.  Added tests which cover these cases, and Stata 13 format files. fixes #7360

diff --git a/doc/source/v0.14.1.txt b/doc/source/v0.14.1.txt
index be0b3bc54..24e7c81cd 100644
--- a/doc/source/v0.14.1.txt
+++ b/doc/source/v0.14.1.txt
@@ -220,6 +220,8 @@ Bug Fixes
 - Bug where ``nanops._has_infs`` doesn't work with many dtypes
   (:issue:`7357`)
 - Bug in ``StataReader.data`` where reading a 0-observation dta failed (:issue:`7369`)
+- Bug in when reading Stata 13 (117) files containing fixed width strings (:issue:`7360`)
+
 
 
 
diff --git a/pandas/io/stata.py b/pandas/io/stata.py
index 7bb466794..fd83ba6a9 100644
--- a/pandas/io/stata.py
+++ b/pandas/io/stata.py
@@ -512,8 +512,10 @@ class StataReader(StataParser):
             try:
                 i = 0
                 for typ in typlist:
-                    if typ <= 2045 or typ == 32768:
-                        self.typlist[i] = None
+                    if typ <= 2045:
+                        self.typlist[i] = typ
+                    elif typ == 32768:
+                        raise ValueError("Long strings are not supported")
                     else:
                         self.typlist[i] = self.TYPE_MAP_XML[typ]
                     i += 1
diff --git a/pandas/io/tests/data/stata5_117.dta b/pandas/io/tests/data/stata5_117.dta
new file mode 100644
index 000000000..afbd3b0e0
Binary files /dev/null and b/pandas/io/tests/data/stata5_117.dta differ
diff --git a/pandas/io/tests/data/stata6_117.dta b/pandas/io/tests/data/stata6_117.dta
new file mode 100644
index 000000000..bf4f3838e
Binary files /dev/null and b/pandas/io/tests/data/stata6_117.dta differ
diff --git a/pandas/io/tests/test_stata.py b/pandas/io/tests/test_stata.py
index 8221eccc3..c1bdf25be 100644
--- a/pandas/io/tests/test_stata.py
+++ b/pandas/io/tests/test_stata.py
@@ -60,11 +60,13 @@ class TestStata(tm.TestCase):
         self.dta14_113 = os.path.join(self.dirpath, 'stata5_113.dta')
         self.dta14_114 = os.path.join(self.dirpath, 'stata5_114.dta')
         self.dta14_115 = os.path.join(self.dirpath, 'stata5_115.dta')
+        self.dta14_117 = os.path.join(self.dirpath, 'stata5_117.dta')
 
         self.csv15 = os.path.join(self.dirpath, 'stata6.csv')
         self.dta15_113 = os.path.join(self.dirpath, 'stata6_113.dta')
         self.dta15_114 = os.path.join(self.dirpath, 'stata6_114.dta')
         self.dta15_115 = os.path.join(self.dirpath, 'stata6_115.dta')
+        self.dta15_117 = os.path.join(self.dirpath, 'stata6_117.dta')
 
     def read_dta(self, file):
         return read_stata(file, convert_dates=True)
@@ -354,9 +356,12 @@ class TestStata(tm.TestCase):
         parsed_114.index.name = 'index'
         parsed_115 = self.read_dta(self.dta14_115)
         parsed_115.index.name = 'index'
+        parsed_117 = self.read_dta(self.dta14_117)
+        parsed_117.index.name = 'index'
 
         tm.assert_frame_equal(parsed_114, parsed_113)
         tm.assert_frame_equal(parsed_114, parsed_115)
+        tm.assert_frame_equal(parsed_114, parsed_117)
 
         with tm.ensure_clean() as path:
             parsed_114.to_stata(path, {'date_td': 'td'})
@@ -375,10 +380,12 @@ class TestStata(tm.TestCase):
         parsed_113 = self.read_dta(self.dta15_113)
         parsed_114 = self.read_dta(self.dta15_114)
         parsed_115 = self.read_dta(self.dta15_115)
+        parsed_117 = self.read_dta(self.dta15_117)
 
         tm.assert_frame_equal(expected, parsed_114)
         tm.assert_frame_equal(parsed_113, parsed_114)
         tm.assert_frame_equal(parsed_114, parsed_115)
+        tm.assert_frame_equal(parsed_114, parsed_117)
 
     def test_timestamp_and_label(self):
         original = DataFrame([(1,)], columns=['var'])
