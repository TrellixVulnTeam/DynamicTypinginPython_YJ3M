commit 9e27f1298d4cd1dcfcf559937125e547c0341f0e
Author: Mak Sze Chun <makszechun@gmail.com>
Date:   Sat Mar 23 10:08:52 2019 +0800

    [BUG] Construction of Interval restricted to numeric/ Timestamp/ Timedelta (#23013) (#25768)

diff --git a/doc/source/whatsnew/v0.25.0.rst b/doc/source/whatsnew/v0.25.0.rst
index b56c03cc8..ccf5c4328 100644
--- a/doc/source/whatsnew/v0.25.0.rst
+++ b/doc/source/whatsnew/v0.25.0.rst
@@ -245,7 +245,7 @@ Strings
 Interval
 ^^^^^^^^
 
--
+- Construction of :class:`Interval` is restricted to numeric, :class:`Timestamp` and :class:`Timedelta` endpoints (:issue:`23013`)
 -
 -
 
diff --git a/pandas/_libs/interval.pyx b/pandas/_libs/interval.pyx
index e86b692e9..74fbd6970 100644
--- a/pandas/_libs/interval.pyx
+++ b/pandas/_libs/interval.pyx
@@ -20,8 +20,10 @@ cnp.import_array()
 cimport pandas._libs.util as util
 
 from pandas._libs.hashtable cimport Int64Vector, Int64VectorData
+from pandas._libs.tslibs.util cimport is_integer_object, is_float_object
 
 from pandas._libs.tslibs import Timestamp
+from pandas._libs.tslibs.timedeltas import Timedelta
 from pandas._libs.tslibs.timezones cimport tz_compare
 
 
@@ -250,6 +252,10 @@ cdef class Interval(IntervalMixin):
     def __init__(self, left, right, str closed='right'):
         # note: it is faster to just do these checks than to use a special
         # constructor (__cinit__/__new__) to avoid them
+
+        self._validate_endpoint(left)
+        self._validate_endpoint(right)
+
         if closed not in _VALID_CLOSED:
             msg = "invalid option for 'closed': {closed}".format(closed=closed)
             raise ValueError(msg)
@@ -266,6 +272,14 @@ cdef class Interval(IntervalMixin):
         self.right = right
         self.closed = closed
 
+    def _validate_endpoint(self, endpoint):
+        # GH 23013
+        if not (is_integer_object(endpoint) or is_float_object(endpoint) or
+                isinstance(endpoint, (Timestamp, Timedelta))):
+            msg = ("Only numeric, Timestamp and Timedelta endpoints "
+                   "are allowed when constructing an Interval.")
+            raise ValueError(msg)
+
     def __hash__(self):
         return hash((self.left, self.right, self.closed))
 
diff --git a/pandas/tests/indexes/interval/test_construction.py b/pandas/tests/indexes/interval/test_construction.py
index 483978b40..a1e31455f 100644
--- a/pandas/tests/indexes/interval/test_construction.py
+++ b/pandas/tests/indexes/interval/test_construction.py
@@ -315,6 +315,12 @@ class TestClassConstructors(Base):
         """
         pass
 
+    def test_constructor_string(self):
+        # GH23013
+        # When forming the interval from breaks,
+        # the interval of strings is already forbidden.
+        pass
+
     def test_constructor_errors(self, constructor):
         # mismatched closed within intervals with no constructor override
         ivs = [Interval(0, 1, closed='right'), Interval(2, 3, closed='left')]
diff --git a/pandas/tests/scalar/interval/test_interval.py b/pandas/tests/scalar/interval/test_interval.py
index 432f44725..56153aa4b 100644
--- a/pandas/tests/scalar/interval/test_interval.py
+++ b/pandas/tests/scalar/interval/test_interval.py
@@ -3,7 +3,7 @@ from __future__ import division
 import numpy as np
 import pytest
 
-from pandas import Interval, Timedelta, Timestamp
+from pandas import Interval, Period, Timedelta, Timestamp
 import pandas.core.common as com
 
 
@@ -100,13 +100,14 @@ class TestInterval(object):
         ('a', 'z'),
         (('a', 'b'), ('c', 'd')),
         (list('AB'), list('ab')),
-        (Interval(0, 1), Interval(1, 2))])
-    def test_length_errors(self, left, right):
-        # GH 18789
-        iv = Interval(left, right)
-        msg = 'cannot compute length between .* and .*'
-        with pytest.raises(TypeError, match=msg):
-            iv.length
+        (Interval(0, 1), Interval(1, 2)),
+        (Period('2018Q1', freq='Q'), Period('2018Q1', freq='Q'))
+    ])
+    def test_construct_errors(self, left, right):
+        # GH 23013
+        msg = "Only numeric, Timestamp and Timedelta endpoints are allowed"
+        with pytest.raises(ValueError, match=msg):
+            Interval(left, right)
 
     def test_math_add(self, closed):
         interval = Interval(0, 1, closed=closed)
