commit d4810f075a07a30a4674c7367ea035667f5cb103
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Nov 26 13:56:42 2012 -0500

    ENH: return DataFrame if Series.apply function returns Series. close #2316

diff --git a/RELEASE.rst b/RELEASE.rst
index 8998faf4a..a34d5f0d4 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -42,6 +42,8 @@ pandas 0.10.0
     this can rename the columns. To fix legacy code, put ``header=None`` when
     passing ``names``
   - DataFrame selection using a boolean frame now preserves input shape
+  - If function passed to Series.apply yields a Series, result will be a
+    DataFrame (#2316)
 
 **Improvements to existing features**
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 67ee0622c..2659d9cee 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -2119,9 +2119,9 @@ copy : boolean, default False
 
     def apply(self, func, convert_dtype=True, args=(), **kwds):
         """
-        Invoke function on values of Series. Can be ufunc, a Python function
-        that applies to the entire Series, or a Python function that only
-        works on single values
+        Invoke function on values of Series. Can be ufunc (a NumPy function
+        that applies to the entire Series) or a Python function that only works
+        on single values
 
         Parameters
         ----------
@@ -2141,22 +2141,21 @@ copy : boolean, default False
 
         Returns
         -------
-        y : Series
+        y : Series or DataFrame if func returns a Series
         """
         if kwds or args and not isinstance(func, np.ufunc):
             f = lambda x: func(x, *args, **kwds)
         else:
             f = func
 
-        try:
-            result = f(self)
-            if isinstance(result, np.ndarray):
-                result = Series(result, index=self.index, name=self.name)
-            else:
-                raise ValueError('Must yield array')
-            return result
-        except Exception:
-            mapped = lib.map_infer(self.values, f, convert=convert_dtype)
+        if isinstance(f, np.ufunc):
+            return f(self)
+
+        mapped = lib.map_infer(self.values, f, convert=convert_dtype)
+        if isinstance(mapped[0], Series):
+            from pandas.core.frame import DataFrame
+            return DataFrame(mapped.tolist(), index=self.index)
+        else:
             return Series(mapped, index=self.index, name=self.name)
 
     def align(self, other, join='outer', level=None, copy=True,
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index f3f24e83b..57609be17 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -2513,9 +2513,11 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         import math
         assert_series_equal(self.ts.apply(math.exp), np.exp(self.ts))
 
-        # does not return Series
-        result = self.ts.apply(lambda x: x.values * 2)
-        assert_series_equal(result, self.ts * 2)
+        # how to handle Series result, #2316
+        result = self.ts.apply(lambda x: Series([x, x ** 2],
+                                                index=['x', 'x^2']))
+        expected = DataFrame({'x': self.ts, 'x^2': self.ts **2})
+        tm.assert_frame_equal(result, expected)
 
     def test_apply_same_length_inference_bug(self):
         s = Series([1, 2])
