commit 43a01025ca7d639de99427827f39b1a80949e761
Author: jreback <jeff@reback.net>
Date:   Wed Feb 13 16:57:20 2013 -0500

    CLN: moved some functionality from series._sanitize to com._dtype_from_scalar

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 51e14b054..0f71735af 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -24,6 +24,7 @@ import csv
 from pandas.util.py3compat import StringIO, BytesIO
 
 from pandas.core.config import get_option
+from pandas.core import array as pa
 
 # XXX: HACK for NumPy 1.5.1 to suppress warnings
 try:
@@ -645,7 +646,21 @@ def take_fast(arr, indexer, mask, needs_masking, axis=0, out=None,
 
 def _dtype_from_scalar(val):
     """ interpret the dtype from a scalar, upcast floats and ints """
-    if isinstance(val, np.datetime64):
+
+    # a 1-element ndarray
+    if isinstance(val, pa.Array):
+        return val.item(), val.dtype
+
+    elif isinstance(val, basestring):
+
+        # If we create an empty array using a string to infer
+        # the dtype, NumPy will only allocate one character per entry
+        # so this is kind of bad. Alternately we could use np.repeat
+        # instead of np.empty (but then you still don't want things
+        # coming out as np.str_!
+        return val, np.object_
+
+    elif isinstance(val, np.datetime64):
         # ugly hacklet
         val = lib.Timestamp(val).value
         return val, np.dtype('M8[ns]')
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 64b90fddf..5405637ff 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -3127,29 +3127,16 @@ def _sanitize_array(data, index, dtype=None, copy=False,
         elif index is not None:
             value = data
 
-            # If we create an empty array using a string to infer
-            # the dtype, NumPy will only allocate one character per entry
-            # so this is kind of bad. Alternately we could use np.repeat
-            # instead of np.empty (but then you still don't want things
-            # coming out as np.str_!
-            if isinstance(value, basestring) and dtype is None:
-                dtype = np.object_
-
+            # figure out the dtype from the value (upcast if necessary)
             if dtype is None:
-
-                # a 1-element ndarray
-                if isinstance(value, pa.Array):
-                    dtype = value.dtype
-                    value = value.item()
-                else:
-                    value, dtype = com._dtype_from_scalar(value)
-
-                subarr = pa.empty(len(index), dtype=dtype)
+                value, dtype = com._dtype_from_scalar(value)
             else:
                 # need to possibly convert the value here
                 value = com._possibly_cast_to_datetime(value, dtype)
-                subarr = pa.empty(len(index), dtype=dtype)
+
+            subarr = pa.empty(len(index), dtype=dtype)
             subarr.fill(value)
+
         else:
             return subarr.item()
 
