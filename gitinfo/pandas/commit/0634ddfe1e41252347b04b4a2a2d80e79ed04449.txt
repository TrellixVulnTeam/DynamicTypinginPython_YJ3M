commit 0634ddfe1e41252347b04b4a2a2d80e79ed04449
Author: Jeff Reback <jeff@reback.net>
Date:   Tue Oct 20 18:54:23 2015 -0400

    TST: remove some warnings in test_nanops

diff --git a/pandas/tests/test_indexing.py b/pandas/tests/test_indexing.py
index 0f7a5261c..a2d789aaf 100644
--- a/pandas/tests/test_indexing.py
+++ b/pandas/tests/test_indexing.py
@@ -1693,7 +1693,7 @@ Region_1,Site_2,3977723089,A,5/20/2015 8:33,5/20/2015 9:09,Yes,No"""
     @slow
     def test_multiindex_get_loc(self):  # GH7724, GH2646
 
-        with warnings.catch_warnings(PerformanceWarning):
+        with warnings.catch_warnings(record=True):
 
             # test indexing into a multi-index before & past the lexsort depth
             from numpy.random import randint, choice, randn
diff --git a/pandas/tests/test_nanops.py b/pandas/tests/test_nanops.py
index 6d6c289a6..b9db95fe0 100644
--- a/pandas/tests/test_nanops.py
+++ b/pandas/tests/test_nanops.py
@@ -3,6 +3,7 @@ from __future__ import division, print_function
 
 from functools import partial
 
+import warnings
 import numpy as np
 from pandas import Series
 from pandas.core.common import isnull, is_integer_dtype
@@ -135,7 +136,7 @@ class TestnanopsDataFrame(tm.TestCase):
             return targ, res
 
         try:
-            if axis != 0 and hasattr(targ, 'shape') and targ.ndim:
+            if axis != 0 and hasattr(targ, 'shape') and targ.ndim and targ.shape != res.shape:
                 res = np.split(res, [targ.shape[0]], axis=0)[0]
         except:
             targ, res = _coerce_tds(targ, res)
@@ -364,10 +365,11 @@ class TestnanopsDataFrame(tm.TestCase):
                                     "return dtype expected from %s is %s, got %s instead" % (method, dtype, result.dtype))
 
     def test_nanmedian(self):
-        self.check_funs(nanops.nanmedian, np.median,
-                        allow_complex=False, allow_str=False, allow_date=False,
-                        allow_tdelta=True,
-                        allow_obj='convert')
+        with warnings.catch_warnings(record=True):
+            self.check_funs(nanops.nanmedian, np.median,
+                            allow_complex=False, allow_str=False, allow_date=False,
+                            allow_tdelta=True,
+                            allow_obj='convert')
 
     def test_nanvar(self):
         self.check_funs_ddof(nanops.nanvar, np.var,
