commit 289cbbcb74c1c8b0b8723ce3d21d05373b8a378c
Author: Adam Klein <adamklein@gmail.com>
Date:   Tue Jan 3 13:24:02 2012 -0500

    continuing 0.7 whats new

diff --git a/doc/source/dsintro.rst b/doc/source/dsintro.rst
index 65c09897d..7b4ca8bd9 100644
--- a/doc/source/dsintro.rst
+++ b/doc/source/dsintro.rst
@@ -226,13 +226,8 @@ based on common sense rules.
 Main constructor
 ~~~~~~~~~~~~~~~~
 
-**From a Series**
-
-The result will be a DataFrame with the same index as the input Series, and
-with one column whose name is the original name of the Series (only if no other
-column name provided).
-
-**From dict of Series or dicts**
+From dict of Series or dicts
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 The result **index** will be the **union** of the indexes of the various
 Series. If there are any nested dicts, these will be first converted to
@@ -262,7 +257,8 @@ The row and column labels can be accessed respectively by accessing the
    df.index
    df.columns
 
-**From dict of ndarrays / lists**
+From dict of ndarrays / lists
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 The ndarrays must all be the same length. If an index is passed, it must
 clearly also be the same length as the arrays. If no index is passed, the
@@ -275,7 +271,8 @@ result will be ``range(n)``, where ``n`` is the array length.
    DataFrame(d)
    DataFrame(d, index=['a', 'b', 'c', 'd'])
 
-**From structured or record array**
+From structured or record array
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 This case is handled identically to a dict of arrays.
 
@@ -293,6 +290,25 @@ This case is handled identically to a dict of arrays.
     DataFrame is not intended to work exactly like a 2-dimensional NumPy
     ndarray.
 
+.. _basics.dataframe.from_list_of_dicts:
+
+From a list of dicts
+~~~~~~~~~~~~~~~~~~~~
+
+.. ipython:: python
+
+   data = [{'a': 1, 'b': 2}, {'a': 5, 'b': 10, 'c': 20}]
+   DataFrame(data)
+   DataFrame(data, index=['first', 'second'])
+   DataFrame(data, columns=['a', 'b'])
+
+From a Series
+~~~~~~~~~~~~~
+
+The result will be a DataFrame with the same index as the input Series, and
+with one column whose name is the original name of the Series (only if no other
+column name provided).
+
 **Missing Data**
 
 Much more will be said on this topic in the :ref:`Missing data <missing_data>`
diff --git a/doc/source/indexing.rst b/doc/source/indexing.rst
index 4fd8d15df..bc958dabe 100644
--- a/doc/source/indexing.rst
+++ b/doc/source/indexing.rst
@@ -260,6 +260,21 @@ should be taken instead.
    df2.drop_duplicates(['a','b'])
    df2.drop_duplicates(['a','b'], take_last=True)
 
+.. _indexing.dictionarylike:
+
+Dictionary-like ``get`` method
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+As of v0.7, each of Series, DataFrame, and Panel have a ``get`` method which
+can return a default value.
+
+.. ipython:: python
+
+   s = Series([1,2,3], index=['a','b','c'])
+   s.get('a')               # equivalent to s['a']
+   s.get('x', default=-1)
+
+
 .. _indexing.advanced:
 
 Advanced indexing with labels
@@ -682,6 +697,19 @@ The ``swaplevel`` function can switch the order of two levels:
    df[:5]
    df[:5].swaplevel(0, 1, axis=0)
 
+.. _indexing.reorderlevels:
+
+Reordering levels with ``reorder_levels``
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+The ``reorder_levels`` function generalizes the ``swaplevel`` function,
+allowing you to permute the hierarchical index levels in one step:
+
+.. ipython:: python
+
+   df[:5].reorder_levels([1,0], axis=0)
+
+
 Some gory internal details
 ~~~~~~~~~~~~~~~~~~~~~~~~~~
 
diff --git a/doc/source/whatsnew/v0.7.0.txt b/doc/source/whatsnew/v0.7.0.txt
index 8407fa499..7b320930a 100644
--- a/doc/source/whatsnew/v0.7.0.txt
+++ b/doc/source/whatsnew/v0.7.0.txt
@@ -9,6 +9,11 @@ New features
 - You can now :ref:`set multiple columns <indexing.columns.multiple>` in a
   DataFrame via ``__getitem__``, useful for transformation (GH342_)
 
+- New ``merge`` :ref:`function <merging.join>` for efficiently performing full
+  gamut of database / relational-algebra operations. Refactored existing join
+  methods to use the new infrastructure, resulting in substantial performance
+  gains (GH220_, GH249_, GH267_)
+
 - Handle differently-indexed output values in ``DataFrame.apply`` (GH498_)
 
 .. ipython:: python
@@ -16,19 +21,13 @@ New features
    df = DataFrame(randn(10, 4))
    df.apply(lambda x: x.describe())
 
-- New ``merge`` function for efficiently performing full gamut of database /
-  relational-algebra operations. Refactored existing join methods to use the
-  new infrastructure, resulting in substantial performance gains (GH220_,
-  GH249_, GH267_)
-
-- Handle differently-indexed output values in ``DataFrame.apply`` (GH498_)
-
-- Can pass list of dicts (e.g., a list of shallow JSON objects) to DataFrame
-  constructor (GH526_)
+- :ref:`Can<basics.dataframe.from_list_of_dicts>` pass list of dicts (e.g., a
+  list of shallow JSON objects) to DataFrame constructor (GH526_)
 
-- Add ``reorder_levels`` method to Series and DataFrame (PR534_)
+- :ref:`Add<indexing.reorderlevels>` ``reorder_levels`` method to Series and
+  DataFrame (PR534_)
 
-- Add dict-like ``get`` function to DataFrame and Panel (PR521_)
+- :ref:`Add<indexing.dictionarylike>` dict-like ``get`` function to DataFrame and Panel (PR521_)
 
 - ``DataFrame.iterrows`` method for efficiently iterating through the rows of
   a DataFrame
