commit 92f0234e660fda9c0d5cec05a91c9bce33f796e3
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jun 11 21:32:33 2012 -0400

    BUG: always raise exception when concat keys aren't found in passed levels, close #1406

diff --git a/pandas/core/factor.py b/pandas/core/factor.py
index 5df3beaee..6d889a8a0 100644
--- a/pandas/core/factor.py
+++ b/pandas/core/factor.py
@@ -1,6 +1,8 @@
 # pylint: disable=E1101,W0232
 
 import numpy as np
+
+from pandas.core.algorithms import factorize
 import pandas.core.common as com
 
 
@@ -51,8 +53,6 @@ class Factor(object):
 
     @classmethod
     def from_array(cls, data):
-        from pandas.core.algorithms import factorize
-
         try:
             labels, levels, _ = factorize(data, sort=True)
         except TypeError:
diff --git a/pandas/tools/merge.py b/pandas/tools/merge.py
index 367866ab6..7ac6d8efc 100644
--- a/pandas/tools/merge.py
+++ b/pandas/tools/merge.py
@@ -1131,7 +1131,11 @@ def _make_concat_multiindex(indexes, keys, levels=None, names=None):
         for hlevel, level in zip(zipped, levels):
             to_concat = []
             for key, index in zip(hlevel, indexes):
-                i = level.get_loc(key)
+                try:
+                    i = level.get_loc(key)
+                except KeyError:
+                    raise ValueError('Key %s not in level %s' % (str(key), str(level)))
+
                 to_concat.append(np.repeat(i, len(index)))
             label_list.append(np.concatenate(to_concat))
 
@@ -1146,8 +1150,11 @@ def _make_concat_multiindex(indexes, keys, levels=None, names=None):
             levels.append(factor.levels)
             label_list.append(factor.labels)
 
-        # also copies
-        names = names + _get_consensus_names(indexes)
+        if len(names) == len(levels):
+            names = list(names)
+        else:
+            # also copies
+            names = names + _get_consensus_names(indexes)
 
         return MultiIndex(levels=levels, labels=label_list, names=names)
 
@@ -1165,7 +1172,14 @@ def _make_concat_multiindex(indexes, keys, levels=None, names=None):
     # do something a bit more speedy
 
     for hlevel, level in zip(zipped, levels):
+        hlevel = _ensure_index(hlevel)
         mapped = level.get_indexer(hlevel)
+
+        mask = mapped == -1
+        if mask.any():
+            raise ValueError('Values not found in passed level: %s'
+                             % str(hlevel[mask]))
+
         new_labels.append(np.repeat(mapped, n))
 
     if isinstance(new_index, MultiIndex):
diff --git a/pandas/tools/tests/test_merge.py b/pandas/tools/tests/test_merge.py
index 8e5b26917..90bb89e51 100644
--- a/pandas/tools/tests/test_merge.py
+++ b/pandas/tools/tests/test_merge.py
@@ -1144,6 +1144,35 @@ class TestConcatenate(unittest.TestCase):
         self.assertEqual(result.index.names, ['first', 'second'] + [None])
         self.assert_(np.array_equal(result.index.levels[0], ['baz', 'foo']))
 
+    def test_concat_keys_levels_no_overlap(self):
+        # GH #1406
+        df = DataFrame(np.random.randn(1, 3), index=['a'])
+        df2 = DataFrame(np.random.randn(1, 4), index=['b'])
+
+        self.assertRaises(ValueError, concat, [df, df],
+                          keys=['one', 'two'], levels=[['foo', 'bar', 'baz']])
+
+        self.assertRaises(ValueError, concat, [df, df2],
+                          keys=['one', 'two'], levels=[['foo', 'bar', 'baz']])
+
+
+    def test_concat_rename_index(self):
+        a = DataFrame(np.random.rand(3,3),
+                      columns=list('ABC'),
+                      index=Index(list('abc'), name='index_a'))
+        b = DataFrame(np.random.rand(3,3),
+                      columns=list('ABC'),
+                      index=Index(list('abc'), name='index_b'))
+
+        result = concat([a, b], keys=['key0', 'key1'],
+                        names=['lvl0', 'lvl1'])
+
+        exp = concat([a, b], keys=['key0', 'key1'], names=['lvl0'])
+        exp.index.names[1] = 'lvl1'
+
+        tm.assert_frame_equal(result, exp)
+        self.assertEqual(result.index.names, exp.index.names)
+
     def test_crossed_dtypes_weird_corner(self):
         columns = ['A', 'B', 'C', 'D']
         df1 = DataFrame({'A' : np.array([1, 2, 3, 4], dtype='f8'),
@@ -1163,6 +1192,11 @@ class TestConcatenate(unittest.TestCase):
                              columns=columns)
         tm.assert_frame_equal(appended, expected)
 
+        df = DataFrame(np.random.randn(1, 3), index=['a'])
+        df2 = DataFrame(np.random.randn(1, 4), index=['b'])
+        result = concat([df, df2], keys=['one', 'two'], names=['first', 'second'])
+        self.assertEqual(result.index.names, ['first', 'second'])
+
     def test_handle_empty_objects(self):
         df = DataFrame(np.random.randn(10, 4), columns=list('abcd'))
 
@@ -1334,23 +1368,6 @@ class TestConcatenate(unittest.TestCase):
         tm.assert_frame_equal(result, df)
         self.assertRaises(Exception, concat, [None, None])
 
-    def test_concat_rename_index(self):
-        a = DataFrame(np.random.rand(3,3),
-                      columns=list('ABC'),
-                      index=Index(list('abc'), name='index_a'))
-        b = DataFrame(np.random.rand(3,3),
-                      columns=list('ABC'),
-                      index=Index(list('abc'), name='index_b'))
-
-        result = concat([a, b], keys=['key0', 'key1'],
-                        names=['lvl0', 'lvl1'])
-
-        exp = concat([a, b], keys=['key0', 'key1'], names=['lvl0'])
-        exp.index.names[1] = 'lvl1'
-
-        tm.assert_frame_equal(result, exp)
-        self.assertEqual(result.index.names, exp.index.names)
-
 class TestOrderedMerge(unittest.TestCase):
 
     def setUp(self):
