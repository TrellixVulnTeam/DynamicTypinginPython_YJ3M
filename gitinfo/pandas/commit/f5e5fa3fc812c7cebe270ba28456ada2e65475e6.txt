commit f5e5fa3fc812c7cebe270ba28456ada2e65475e6
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat May 14 01:02:51 2011 -0400

    working on sparse panel reindexing and other things

diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index c55251484..3730614e4 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -817,31 +817,6 @@ def homogenize(series_dict):
 
     return output
 
-def _convert_frames(frames, index, columns, fill_value=nan, kind='block'):
-    from pandas.core.panel import _get_combined_index, _get_combined_columns
-
-    output = {}
-    for item, df in frames.iteritems():
-        if not isinstance(df, SparseDataFrame):
-            df = SparseDataFrame(df, default_kind=kind,
-                                 default_fill_value=fill_value)
-
-        output[item] = df
-
-    if index is None:
-        index = _get_combined_index(output)
-    if columns is None:
-        columns = _get_combined_columns(output)
-
-    index = _ensure_index(index)
-    columns = _ensure_index(columns)
-
-    for item, df in output.iteritems():
-        if not (df.index.equals(index) and df.columns.equals(columns)):
-            output[item] = df.reindex(index=index, columns=columns)
-
-    return output, index, columns
-
 class SparseWidePanel(WidePanel):
     """
     Sparse version of WidePanel
@@ -877,6 +852,12 @@ class SparseWidePanel(WidePanel):
                                        fill_value=fill_value)
 
         self._frames = clean_frames
+
+        # TODO: !
+        for item in items:
+            if item not in clean_frames:
+                raise Exception('foo')
+
         self.items = items
         self.major_axis = major_axis
         self.minor_axis = minor_axis
@@ -928,43 +909,67 @@ class SparseWidePanel(WidePanel):
         self.items = self.items[indices]
         del self._frames[key]
 
-    #----------------------------------------------------------------------
-    # pickling
-
     def __getstate__(self):
+        # pickling
         return (self._frames, _pickle_array(self.items),
-                _pickle_array(self.major_axis), _pickle_array(self.minor_axis))
+                _pickle_array(self.major_axis), _pickle_array(self.minor_axis),
+                self.default_fill_value, self.default_kind)
 
     def __setstate__(self, state):
-        frames, items, major, minor = state
+        frames, items, major, minor, fv, kind = state
 
+        self.default_fill_value = fv
+        self.default_kind = kind
         self.items = _unpickle_array(items)
         self.major_axis = _unpickle_array(major)
         self.minor_axis = _unpickle_array(minor)
         self._frames = frames
 
     def copy(self):
-        pass
+        """
+
+        """
+        return SparseWidePanel(self._frames.copy(), items=self.items,
+                               major_axis=self.major_axis,
+                               minor_axis=self.minor_axis,
+                               default_fill_value=self.default_fill_value,
+                               default_kind=self.default_kind)
 
     def to_long(self):
         pass
 
-    def reindex(self, major=None, items=None, minor=None, method=None):
-        result = self
-
-        if major is not None:
-            result = result._reindex_axis(major, method, 1)
+    def reindex(self, major=None, items=None, minor=None):
+        """
 
-        if minor is not None:
-            result = result._reindex_axis(minor, method, 2)
+        Parameters
+        ----------
 
-        if items is not None:
-            result = result._reindex_axis(items, method, 0)
+        Returns
+        -------
+        reindexed : SparseWidePanel
+        """
 
-        if result is self:
+        if None == major == items == minor:
             raise ValueError('Must specify at least one axis')
 
-        return result
+        major = self.major_axis if major is None else major
+        minor = self.minor_axis if minor is None else minor
+
+        if items is not None:
+            new_frames = {}
+            for item in items:
+                if item in self._frames:
+                    new_frames[item] = self._frames[item]
+                else:
+                    raise Exception('need to implememt this')
+        else:
+            new_frames = self._frames
+
+        return SparseWidePanel(new_frames, items=items,
+                               major_axis=major,
+                               minor_axis=minor,
+                               default_fill_value=self.default_fill_value,
+                               default_kind=self.default_kind)
 
     def _combine(self, other, func, axis=0):
         if isinstance(other, DataFrame):
@@ -1048,3 +1053,28 @@ class SparseWidePanel(WidePanel):
         mat = np.array(self.values[:, :, loc].T)
         return DataMatrix(mat, index=self.major_axis, columns=self.items)
 
+
+def _convert_frames(frames, index, columns, fill_value=nan, kind='block'):
+    from pandas.core.panel import _get_combined_index, _get_combined_columns
+
+    output = {}
+    for item, df in frames.iteritems():
+        if not isinstance(df, SparseDataFrame):
+            df = SparseDataFrame(df, default_kind=kind,
+                                 default_fill_value=fill_value)
+
+        output[item] = df
+
+    if index is None:
+        index = _get_combined_index(output)
+    if columns is None:
+        columns = _get_combined_columns(output)
+
+    index = _ensure_index(index)
+    columns = _ensure_index(columns)
+
+    for item, df in output.iteritems():
+        if not (df.index.equals(index) and df.columns.equals(columns)):
+            output[item] = df.reindex(index=index, columns=columns)
+
+    return output, index, columns
diff --git a/pandas/core/tests/test_sparse.py b/pandas/core/tests/test_sparse.py
index 5ff751057..7e534c2d9 100644
--- a/pandas/core/tests/test_sparse.py
+++ b/pandas/core/tests/test_sparse.py
@@ -82,6 +82,10 @@ def assert_sp_frame_equal(left, right, exact_indices=True):
         else:
             assert_series_equal(series.to_dense(), right[col].to_dense())
 
+    assert_almost_equal(left.default_fill_value,
+                        right.default_fill_value)
+    assert(left.default_kind == right.default_kind)
+
     for col in right:
         assert(col in left)
 
@@ -91,6 +95,10 @@ def assert_sp_panel_equal(left, right, exact_indices=True):
         # trade-off?
         assert_sp_frame_equal(frame, right[item], exact_indices=exact_indices)
 
+    assert_almost_equal(left.default_fill_value,
+                        right.default_fill_value)
+    assert(left.default_kind == right.default_kind)
+
     for item in right:
         assert(item in left)
 
@@ -863,6 +871,14 @@ class TestSparseWidePanel(TestCase):
         fd = SparseWidePanel.from_dict(self.data_dict)
         assert_sp_panel_equal(fd, self.panel)
 
+    def test_pickle(self):
+        def _test_roundtrip(panel):
+            pickled = pickle.dumps(panel)
+            unpickled = pickle.loads(pickled)
+            assert_sp_panel_equal(panel, unpickled)
+
+        _test_roundtrip(self.panel)
+
     def test_to_dense(self):
         dwp = self.panel.to_dense()
         dwp2 = WidePanel.from_dict(self.data_dict)
@@ -907,10 +923,12 @@ class TestSparseWidePanel(TestCase):
         assert_sp_panel_equal(self.panel, unpickled)
 
     def test_copy(self):
-        pass
+        cop = self.panel.copy()
+        assert_sp_panel_equal(cop, self.panel)
 
     def test_reindex(self):
-        pass
+        def _compare_with_dense(wp, items, major, minor):
+            pass
 
     def test_operators(self):
         pass
