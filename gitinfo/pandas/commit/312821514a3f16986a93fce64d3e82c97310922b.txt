commit 312821514a3f16986a93fce64d3e82c97310922b
Author: Jeff Reback <jeff@reback.net>
Date:   Mon May 4 15:07:50 2015 -0400

    cleanup test for GH10044

diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index e16dd0e4c..d19271eaf 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -966,16 +966,6 @@ class TestGroupBy(tm.TestCase):
         expected = DataFrame({'b' : range(5)})
         tm.assert_frame_equal(result, expected)
 
-    def test_resample_extra_index_point(self):
-        # GH 9756
-        expected_i = pd.DatetimeIndex(start='20150101', end='20150331', freq='BM')
-        expected = pd.DataFrame(index=expected_i, data=len(expected_i)*[0])
-
-        index = pd.DatetimeIndex(start='20150101', end='20150331', freq='B')
-        df = pd.DataFrame(index=index, data=len(index)*[0])
-        result = df.resample('BM', how='last')
-        assert_frame_equal(result, expected)
-
     def test_transform_fast(self):
 
         df = DataFrame( { 'id' : np.arange( 100000 ) / 3,
@@ -5108,10 +5098,10 @@ class TestGroupBy(tm.TestCase):
         tm.assert_frame_equal(res, exp)
 
     def test_groupby_apply_all_none(self):
-        # Tests to make sure no errors if apply function returns all None 
+        # Tests to make sure no errors if apply function returns all None
         # values. Issue 9684.
         test_df = DataFrame({'groups': [0,0,1,1], 'random_vars': [8,7,4,5]})
-        
+
         def test_func(x):
             pass
         result = test_df.groupby('groups').apply(test_func)
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index c1f5854b6..17f4b01fd 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -378,6 +378,16 @@ class TestResample(tm.TestCase):
 
         self.assertEqual(result.index.name, 'index')
 
+    def test_resample_extra_index_point(self):
+        # GH 9756
+        index = DatetimeIndex(start='20150101', end='20150331', freq='BM')
+        expected = DataFrame({'A' : Series([21,41,63], index=index)})
+
+        index = DatetimeIndex(start='20150101', end='20150331', freq='B')
+        df = DataFrame({'A' : Series(range(len(index)),index=index)})
+        result = df.resample('BM', how='last')
+        assert_frame_equal(result, expected)
+
     def test_upsample_with_limit(self):
         rng = date_range('1/1/2000', periods=3, freq='5t')
         ts = Series(np.random.randn(len(rng)), rng)
