commit 8b948da3d227f1b46ee1b23d9e5156d993b402ea
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Dec 24 15:24:10 2011 -0500

    BUG: fix boolean inference logic in DataFrame indexing, elsewhere

diff --git a/RELEASE.rst b/RELEASE.rst
index 893eeb780..2b2893b9d 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -84,6 +84,7 @@ pandas 0.6.2
   - Unbox 0-dim ndarrays from certain operators like all, any in Series
   - Fix handling of missing columns (was combine_first-specific) in
     DataFrame.combine for general case (GH #529)
+  - Fix type inference logic with boolean lists and arrays in DataFrame indexing
 
 Thanks
 ------
diff --git a/pandas/core/common.py b/pandas/core/common.py
index 69a38a00d..de91a2767 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -304,11 +304,12 @@ def _possibly_cast_item(obj, item, dtype):
 
 def _is_bool_indexer(key):
     if isinstance(key, np.ndarray) and key.dtype == np.object_:
-        mask = isnull(key)
-        if mask.any():
-            raise ValueError('cannot index with vector containing '
-                             'NA / NaN values')
-        return set([True, False]).issubset(set(key))
+        if not lib.is_bool_array(key):
+            if isnull(key).any():
+                raise ValueError('cannot index with vector containing '
+                                 'NA / NaN values')
+            return False
+        return True
     elif isinstance(key, np.ndarray) and key.dtype == np.bool_:
         return True
     elif isinstance(key, list):
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index a734f55ca..8674a1135 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -29,7 +29,7 @@ from pandas.core.generic import NDFrame
 from pandas.core.index import Index, MultiIndex, NULL_INDEX, _ensure_index
 from pandas.core.indexing import _NDFrameIndexer, _maybe_droplevels
 from pandas.core.internals import BlockManager, make_block, form_blocks
-from pandas.core.series import Series, _is_bool_indexer
+from pandas.core.series import Series
 from pandas.util import py3compat
 from pandas.util.terminal import get_terminal_size
 from pandas.util.decorators import deprecate
@@ -1054,7 +1054,7 @@ class DataFrame(NDFrame):
                 key = np.array(key, dtype=object)
 
             # also raises Exception if object array with NA values
-            if _is_bool_indexer(key):
+            if com._is_bool_indexer(key):
                 key = np.asarray(key, dtype=bool)
             return self._getitem_array(key)
         elif isinstance(self.columns, MultiIndex):
diff --git a/pandas/src/inference.pyx b/pandas/src/inference.pyx
new file mode 100644
index 000000000..065b7a131
--- /dev/null
+++ b/pandas/src/inference.pyx
@@ -0,0 +1,6 @@
+def is_bool_array(ndarray[object] values):
+    cdef Py_ssize_t i, n = len(values)
+    for i in range(n):
+        if not util.is_bool_object(values[i]):
+            return False
+    return True
diff --git a/pandas/src/khash.h b/pandas/src/khash.h
index fcad76c82..fe22f564b 100644
--- a/pandas/src/khash.h
+++ b/pandas/src/khash.h
@@ -419,7 +419,7 @@ static PANDAS_INLINE khint_t __ac_Wang_hash(khint_t key)
  */
 #define kh_resize(name, h, s) kh_resize_##name(h, s)
 
-/*! @function
+x/*! @function
   @abstract     Insert a key to the hash table.
   @param  name  Name of the hash table [symbol]
   @param  h     Pointer to the hash table [khash_t(name)*]
diff --git a/pandas/src/tseries.pyx b/pandas/src/tseries.pyx
index a8fdbe2db..dd7a1d251 100644
--- a/pandas/src/tseries.pyx
+++ b/pandas/src/tseries.pyx
@@ -498,3 +498,4 @@ include "parsing.pyx"
 include "reduce.pyx"
 include "stats.pyx"
 include "properties.pyx"
+include "inference.pyx"
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 75c57d876..d068c2454 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -93,6 +93,17 @@ class CheckIndexing(object):
         subframe_obj = self.tsframe[indexer_obj]
         assert_frame_equal(subframe_obj, subframe)
 
+    def test_getitem_boolean_list(self):
+        df = DataFrame(np.arange(12).reshape(3,4))
+        def _checkit(lst):
+            result = df[lst]
+            expected = df.ix[df.index[lst]]
+            assert_frame_equal(result, expected)
+
+        _checkit([True, False, True])
+        _checkit([True, True, True])
+        _checkit([False, False, False])
+
     def test_getattr(self):
         tm.assert_series_equal(self.frame.A, self.frame['A'])
         self.assertRaises(AttributeError, getattr, self.frame,
diff --git a/setup.py b/setup.py
index 8004509b8..421d14d22 100755
--- a/setup.py
+++ b/setup.py
@@ -283,7 +283,8 @@ else:
     cmdclass['sdist'] =  CheckSDist
 
 tseries_depends = ['reindex', 'groupby', 'skiplist', 'moments',
-                   'generated', 'parsing', 'reduce', 'stats']
+                   'generated', 'parsing', 'reduce', 'stats',
+                   'inference', 'properties']
 def srcpath(name=None, suffix='.pyx', subdir='src'):
     return pjoin('pandas', subdir, name+suffix)
 
