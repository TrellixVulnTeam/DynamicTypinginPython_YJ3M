commit 83fe3f3157b766eb497bdffd7ed3f57a3706859d
Author: Jeff Reback <jeff@reback.net>
Date:   Fri Jan 29 11:04:38 2016 -0500

    DOC: reformat install.rst testing section
    TST: run.test() now defaults warnings based on release version

diff --git a/doc/source/install.rst b/doc/source/install.rst
index 049fc7518..3df38cdc0 100644
--- a/doc/source/install.rst
+++ b/doc/source/install.rst
@@ -192,32 +192,31 @@ installed), make sure you have `nose
 
 ::
 
-    $ nosetests pandas
-    ..........................................................................
-    .......................S..................................................
-    ..........................................................................
-    ..........................................................................
-    ..........................................................................
-    ..........................................................................
-    ..........................................................................
-    ..........................................................................
-    ..........................................................................
-    ..........................................................................
-    .................S........................................................
-    ....
+    >>> import pandas as pd
+    >>> pd.test()
+    Running unit tests for pandas
+    pandas version 0.18.0
+    numpy version 1.10.2
+    pandas is installed in pandas
+    Python version 2.7.11 |Continuum Analytics, Inc.|
+       (default, Dec  6 2015, 18:57:58) [GCC 4.2.1 (Apple Inc. build 5577)]
+    nose version 1.3.7
+    ..................................................................S......
+    ........S................................................................
+    .........................................................................
+
     ----------------------------------------------------------------------
-    Ran 818 tests in 21.631s
+    Ran 9252 tests in 368.339s
 
-    OK (SKIP=2)
+    OK (SKIP=117)
 
 Dependencies
 ------------
 
 * `setuptools <http://pythonhosted.org/setuptools>`__
 * `NumPy <http://www.numpy.org>`__: 1.7.1 or higher
-* `python-dateutil <http://labix.org/python-dateutil>`__ 1.5 or higher
-* `pytz <http://pytz.sourceforge.net/>`__
-   * Needed for time zone support
+* `python-dateutil <http://labix.org/python-dateutil>`__: 1.5 or higher
+* `pytz <http://pytz.sourceforge.net/>`__: Needed for time zone support
 
 .. _install.recommended_dependencies:
 
@@ -226,7 +225,7 @@ Recommended Dependencies
 
 * `numexpr <https://github.com/pydata/numexpr>`__: for accelerating certain numerical operations.
   ``numexpr`` uses multiple cores as well as smart chunking and caching to achieve large speedups.
-  If installed, must be Version 2.1 or higher.
+  If installed, must be Version 2.1 or higher. Version 2.4.6 or higher on Windows is highly recommended.
 
 * `bottleneck <http://berkeleyanalytics.com/bottleneck>`__: for accelerating certain types of ``nan``
   evaluations. ``bottleneck`` uses specialized cython routines to achieve large speedups.
@@ -246,21 +245,16 @@ Optional Dependencies
   version. Version 0.19.1 or higher.
 * `SciPy <http://www.scipy.org>`__: miscellaneous statistical functions
 * `PyTables <http://www.pytables.org>`__: necessary for HDF5-based storage. Version 3.0.0 or higher required, Version 3.2.1 or higher highly recommended.
-* `SQLAlchemy <http://www.sqlalchemy.org>`__: for SQL database support. Version 0.8.1 or higher recommended.
-  * Besides SQLAlchemy, you also need a database specific driver.
-    Examples of such drivers are `psycopg2 <http://initd.org/psycopg/>`__ for PostgreSQL
-    or `pymysql <https://github.com/PyMySQL/PyMySQL>`__ for MySQL. For
-    `SQLite <https://docs.python.org/3.5/library/sqlite3.html>`__ this is
-    included in Python's standard library by default.
-    You can find an overview of supported drivers for each SQL dialect in the
-    `SQLAlchemy docs <http://docs.sqlalchemy.org/en/latest/dialects/index.html>`__.
+* `SQLAlchemy <http://www.sqlalchemy.org>`__: for SQL database support. Version 0.8.1 or higher recommended. Besides SQLAlchemy, you also need a database specific driver. You can find an overview of supported drivers for each SQL dialect in the `SQLAlchemy docs <http://docs.sqlalchemy.org/en/latest/dialects/index.html>`__. Some common drivers are:
+
+    - `psycopg2 <http://initd.org/psycopg/>`__: for PostgreSQL
+    - `pymysql <https://github.com/PyMySQL/PyMySQL>`__: for MySQL.
+    - `SQLite <https://docs.python.org/3.5/library/sqlite3.html>`__: for SQLite, this is included in Python's standard library by default.
+
 * `matplotlib <http://matplotlib.sourceforge.net/>`__: for plotting
-* `statsmodels <http://statsmodels.sourceforge.net/>`__
-   * Needed for parts of :mod:`pandas.stats`
-* `openpyxl <http://packages.python.org/openpyxl/>`__, `xlrd/xlwt <http://www.python-excel.org/>`__
-   * Needed for Excel I/O
-* `XlsxWriter <https://pypi.python.org/pypi/XlsxWriter>`__
-   * Alternative Excel writer
+* `statsmodels <http://statsmodels.sourceforge.net/>`__: Needed for parts of :mod:`pandas.stats`
+* `openpyxl <http://packages.python.org/openpyxl/>`__, `xlrd/xlwt <http://www.python-excel.org/>`__: Needed for Excel I/O
+* `XlsxWriter <https://pypi.python.org/pypi/XlsxWriter>`__: Alternative Excel writer
 * `Jinja2 <http://jinja.pocoo.org/>`__: Template engine for conditional HTML formatting.
 * `boto <https://pypi.python.org/pypi/boto>`__: necessary for Amazon S3
   access.
@@ -271,16 +265,10 @@ Optional Dependencies
   <http://www.pygtk.org/>`__, `xsel
   <http://www.vergenet.net/~conrad/software/xsel/>`__, or `xclip
   <http://sourceforge.net/projects/xclip/>`__: necessary to use
-  :func:`~pandas.io.clipboard.read_clipboard`. Most package managers on Linux
-  distributions will have xclip and/or xsel immediately available for
-  installation.
+  :func:`~pandas.io.clipboard.read_clipboard`. Most package managers on Linux distributions will have ``xclip`` and/or ``xsel`` immediately available for installation.
 * Google's `python-gflags <http://code.google.com/p/python-gflags/>`__
-  and `google-api-python-client <http://github.com/google/google-api-python-client>`__
-  * Needed for :mod:`~pandas.io.gbq`
-* `setuptools <https://pypi.python.org/pypi/setuptools/>`__
-  * Needed for :mod:`~pandas.io.gbq` (specifically, it utilizes `pkg_resources`)
-* `httplib2 <http://pypi.python.org/pypi/httplib2>`__
-  * Needed for :mod:`~pandas.io.gbq`
+  and `google-api-python-client <http://github.com/google/google-api-python-client>`__: Needed for :mod:`~pandas.io.gbq`
+* `httplib2 <http://pypi.python.org/pypi/httplib2>`__: Needed for :mod:`~pandas.io.gbq`
 * One of the following combinations of libraries is needed to use the
   top-level :func:`~pandas.io.html.read_html` function:
 
@@ -327,5 +315,5 @@ Optional Dependencies
 
    Without the optional dependencies, many useful features will not
    work. Hence, it is highly recommended that you install these. A packaged
-   distribution like `Enthought Canopy
+   distribution like `Anaconda <http://docs.continuum.io/anaconda/>`__, or `Enthought Canopy
    <http://enthought.com/products/canopy>`__ may be worth considering.
diff --git a/pandas/util/nosetester.py b/pandas/util/nosetester.py
index fc42d8ba7..fdee9be20 100644
--- a/pandas/util/nosetester.py
+++ b/pandas/util/nosetester.py
@@ -178,7 +178,15 @@ class NoseTester(nosetester.NoseTester):
         doctest.master = None
 
         if raise_warnings is None:
-            raise_warnings = 'release'
+
+            # default based on if we are released
+            from pandas import __version__
+            from distutils.version import StrictVersion
+            try:
+                StrictVersion(__version__)
+                raise_warnings = 'release'
+            except ValueError:
+                raise_warnings = 'develop'
 
         _warn_opts = dict(develop=(DeprecationWarning, RuntimeWarning),
                           release=())
@@ -186,20 +194,22 @@ class NoseTester(nosetester.NoseTester):
             raise_warnings = _warn_opts[raise_warnings]
 
         with warnings.catch_warnings():
-            # Reset the warning filters to the default state,
-            # so that running the tests is more repeatable.
-            warnings.resetwarnings()
-            # Set all warnings to 'warn', this is because the default 'once'
-            # has the bad property of possibly shadowing later warnings.
-            warnings.filterwarnings('always')
-            # Force the requested warnings to raise
-            for warningtype in raise_warnings:
-                warnings.filterwarnings('error', category=warningtype)
-            # Filter out annoying import messages.
-            warnings.filterwarnings("ignore", category=FutureWarning)
 
-            from numpy.testing.noseclasses import NumpyTestProgram
+            if len(raise_warnings):
 
+                # Reset the warning filters to the default state,
+                # so that running the tests is more repeatable.
+                warnings.resetwarnings()
+                # Set all warnings to 'warn', this is because the default 'once'
+                # has the bad property of possibly shadowing later warnings.
+                warnings.filterwarnings('always')
+                # Force the requested warnings to raise
+                for warningtype in raise_warnings:
+                    warnings.filterwarnings('error', category=warningtype)
+                # Filter out annoying import messages.
+                warnings.filterwarnings("ignore", category=FutureWarning)
+
+            from numpy.testing.noseclasses import NumpyTestProgram
             argv, plugins = self.prepare_test_args(
                 label, verbose, extra_argv, doctests, coverage)
             t = NumpyTestProgram(argv=argv, exit=False, plugins=plugins)
