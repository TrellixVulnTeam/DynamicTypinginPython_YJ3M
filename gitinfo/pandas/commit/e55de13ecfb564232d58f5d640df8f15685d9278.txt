commit e55de13ecfb564232d58f5d640df8f15685d9278
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Sep 10 19:08:44 2011 -0400

    TST: add_prefix/suffix to sparse. test coverage

diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index 1f63ada70..b8e389c3a 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -1056,6 +1056,14 @@ class SparseDataFrame(DataFrame):
         self.columns = new_columns
         self._series = new_series
 
+    def add_prefix(self, prefix):
+        f = (('%s' % prefix) + '%s').__mod__
+        return self.rename(columns=f)
+
+    def add_suffix(self, suffix):
+        f = ('%s' + ('%s' % suffix)).__mod__
+        return self.rename(columns=f)
+
     def _join_on(self, other, on):
         # need to implement?
         raise NotImplementedError
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 5541ec424..0d4b12cff 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -614,7 +614,76 @@ _mixed_frame = _frame.copy()
 _mixed_frame['foo'] = 'bar'
 
 class SafeForSparse(object):
-    pass
+
+    def test_join_index(self):
+        # left / right
+
+        f = self.frame.reindex(columns=['A', 'B'])[:10]
+        f2 = self.frame.reindex(columns=['C', 'D'])
+
+        joined = f.join(f2)
+        self.assert_(f.index.equals(joined.index))
+        self.assertEqual(len(joined.columns), 4)
+
+        joined = f.join(f2, how='left')
+        self.assert_(joined.index.equals(f.index))
+        self.assertEqual(len(joined.columns), 4)
+
+        joined = f.join(f2, how='right')
+        self.assert_(joined.index.equals(f2.index))
+        self.assertEqual(len(joined.columns), 4)
+
+        # corner case
+        self.assertRaises(Exception, self.frame.join, self.frame,
+                          how='left')
+
+        # inner
+
+        f = self.frame.reindex(columns=['A', 'B'])[:10]
+        f2 = self.frame.reindex(columns=['C', 'D'])
+
+        joined = f.join(f2, how='inner')
+        self.assert_(joined.index.equals(f.index.intersection(f2.index)))
+        self.assertEqual(len(joined.columns), 4)
+
+        # corner case
+        self.assertRaises(Exception, self.frame.join, self.frame,
+                          how='inner')
+
+        # outer
+
+        f = self.frame.reindex(columns=['A', 'B'])[:10]
+        f2 = self.frame.reindex(columns=['C', 'D'])
+
+        joined = f.join(f2, how='outer')
+        self.assert_(tm.equalContents(self.frame.index, joined.index))
+        self.assertEqual(len(joined.columns), 4)
+
+        # corner case
+        self.assertRaises(Exception, self.frame.join, self.frame,
+                          how='outer')
+
+        self.assertRaises(Exception, f.join, f2, how='foo')
+
+    def test_join_overlap(self):
+        df1 = self.frame.ix[:, ['A', 'B', 'C']]
+        df2 = self.frame.ix[:, ['B', 'C', 'D']]
+
+        joined = df1.join(df2, lsuffix='_df1', rsuffix='_df2')
+        df1_suf = df1.ix[:, ['B', 'C']].add_suffix('_df1')
+        df2_suf = df2.ix[:, ['B', 'C']].add_suffix('_df2')
+        no_overlap = self.frame.ix[:, ['A', 'D']]
+        expected = df1_suf.join(df2_suf).join(no_overlap)
+        assert_frame_equal(joined, expected)
+
+    def test_add_prefix_suffix(self):
+        with_prefix = self.frame.add_prefix('foo#')
+        expected = ['foo#%s' % c for c in self.frame.columns]
+        self.assert_(np.array_equal(with_prefix.columns, expected))
+
+        with_suffix = self.frame.add_suffix('#foo')
+        expected = ['%s#foo' % c for c in self.frame.columns]
+        self.assert_(np.array_equal(with_suffix.columns, expected))
 
 
 class TestDataFrame(unittest.TestCase, CheckIndexing):
@@ -1917,15 +1986,6 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         renamed = self.frame.T.rename(index={'C' : 'foo', 'D' : 'bar'})
         self.assert_(np.array_equal(renamed.index, ['A', 'B', 'foo', 'bar']))
 
-    def test_add_prefix_suffix(self):
-        with_prefix = self.frame.add_prefix('foo#')
-        expected = ['foo#%s' % c for c in self.frame.columns]
-        self.assert_(np.array_equal(with_prefix.columns, expected))
-
-        with_suffix = self.frame.add_suffix('#foo')
-        expected = ['%s#foo' % c for c in self.frame.columns]
-        self.assert_(np.array_equal(with_suffix.columns, expected))
-
     #----------------------------------------------------------------------
     # Time series related
 
@@ -2229,57 +2289,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         comb = self.empty.combineMult(self.frame)
         assert_frame_equal(comb, self.frame)
 
-    def test_join_index(self):
-        # left / right
-
-        f = self.frame.reindex(columns=['A', 'B'])[:10]
-        f2 = self.frame.reindex(columns=['C', 'D'])
-
-        joined = f.join(f2)
-        self.assert_(f.index.equals(joined.index))
-        self.assertEqual(len(joined.columns), 4)
-
-        joined = f.join(f2, how='left')
-        self.assert_(joined.index.equals(f.index))
-        self.assertEqual(len(joined.columns), 4)
-
-        joined = f.join(f2, how='right')
-        self.assert_(joined.index.equals(f2.index))
-        self.assertEqual(len(joined.columns), 4)
-
-        # corner case
-        self.assertRaises(Exception, self.frame.join, self.frame,
-                          how='left')
-
-        # inner
-
-        f = self.frame.reindex(columns=['A', 'B'])[:10]
-        f2 = self.frame.reindex(columns=['C', 'D'])
-
-        joined = f.join(f2, how='inner')
-        self.assert_(joined.index.equals(f.index.intersection(f2.index)))
-        self.assertEqual(len(joined.columns), 4)
-
-        # corner case
-        self.assertRaises(Exception, self.frame.join, self.frame,
-                          how='inner')
-
-        # outer
-
-        f = self.frame.reindex(columns=['A', 'B'])[:10]
-        f2 = self.frame.reindex(columns=['C', 'D'])
-
-        joined = f.join(f2, how='outer')
-        self.assert_(tm.equalContents(self.frame.index, joined.index))
-        self.assertEqual(len(joined.columns), 4)
-
-        # corner case
-        self.assertRaises(Exception, self.frame.join, self.frame,
-                          how='outer')
-
-        self.assertRaises(Exception, f.join, f2, how='foo')
-
-    def test_join(self):
+    def test_join_on(self):
         index, data = tm.getMixedTypeDict()
         target = DataFrame(data, index=index)
 
@@ -2327,17 +2337,6 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         self.assertRaises(Exception, target.join, source, on='C',
                           how='left')
 
-    def test_join_overlap(self):
-        df1 = self.frame.ix[:, ['A', 'B', 'C']]
-        df2 = self.frame.ix[:, ['B', 'C', 'D']]
-
-        joined = df1.join(df2, lsuffix='_df1', rsuffix='_df2')
-        df1_suf = df1.ix[:, ['B', 'C']].add_suffix('_df1')
-        df2_suf = df2.ix[:, ['B', 'C']].add_suffix('_df2')
-        no_overlap = self.frame.ix[:, ['A', 'D']]
-        expected = df1_suf.join(df2_suf).join(no_overlap)
-        assert_frame_equal(joined, expected)
-
     def test_clip(self):
         median = self.frame.median().median()
 
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index 80a0e6c39..7ccdc5cc5 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -257,6 +257,9 @@ class TestMultiLevel(unittest.TestCase):
         unstacked = self.ymd.unstack()
         unstacked2 = unstacked.unstack()
 
+        # test that ints work
+        unstacked = self.ymd.astype(int).unstack()
+
     def test_stack(self):
         # regular roundtrip
         unstacked = self.ymd.unstack()
diff --git a/pandas/tests/test_sparse.py b/pandas/tests/test_sparse.py
index 338be7aab..ec9487292 100644
--- a/pandas/tests/test_sparse.py
+++ b/pandas/tests/test_sparse.py
@@ -20,14 +20,13 @@ import pandas.core.datetools as datetools
 import pandas.util.testing as testing
 
 import pandas.core.sparse as spm
-reload(spm)
 from pandas.core.sparse import (IntIndex, BlockIndex,
                                 SparseSeries, SparseDataFrame,
                                 SparsePanel)
 
+import test_frame
 import test_panel
 
-
 def _test_data1():
     # nan-based
     arr = np.arange(20, dtype=float)
@@ -589,7 +588,7 @@ class TestSparseSeries(TestCase):
 class TestSparseTimeSeries(TestCase):
     pass
 
-class TestSparseDataFrame(TestCase):
+class TestSparseDataFrame(TestCase, test_frame.SafeForSparse):
     klass = SparseDataFrame
 
     def setUp(self):
@@ -1148,8 +1147,8 @@ def panel_data3():
         }, index=index)
 
 class TestSparsePanel(TestCase,
-                          test_panel.SafeForLongAndSparse,
-                          test_panel.SafeForSparse):
+                      test_panel.SafeForLongAndSparse,
+                      test_panel.SafeForSparse):
 
     @staticmethod
     def assert_panel_equal(x, y):
