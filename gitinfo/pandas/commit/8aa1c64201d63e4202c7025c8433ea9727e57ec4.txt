commit 8aa1c64201d63e4202c7025c8433ea9727e57ec4
Author: y-p <yoval@gmx.com>
Date:   Tue Apr 16 01:39:37 2013 +0300

    Revert "BLD: ci/print_versions.py, LC_ALL/LANG should default None"
    
    This reverts commit b9ca0ed1a5b44cd4c9983fd5ef64977ccb74e685.

diff --git a/ci/print_versions.py b/ci/print_versions.py
index 99aafce48..c55f1e0bb 100755
--- a/ci/print_versions.py
+++ b/ci/print_versions.py
@@ -8,8 +8,8 @@ try:
     import os
     (sysname, nodename, release, version, machine) = os.uname()
     print("OS: %s %s %s %s" % (sysname, release, version,machine))
-    print("LC_ALL: %s" % os.environ.get('LC_ALL',"None"))
-    print("LANG: %s" % os.environ.get('LANG',"None"))
+    print("LC_ALL: %s" % os.environ['LC_ALL'])
+    print("LANG: %s" % os.environ['LANG'])
 except:
     pass
 
diff --git a/scripts/use_build_cache.py b/scripts/use_build_cache.py
index 0b43e897d..60833affd 100755
--- a/scripts/use_build_cache.py
+++ b/scripts/use_build_cache.py
@@ -12,15 +12,39 @@ Artifacts included in the cache:
 - The .c files resulting from cythonizing pyx/d files
 - 2to3 refactoring results (when run under python3)
 
-Tested on all released back to 0.7.0.
+Tested on releases back to 0.7.0.
 
 """
+import argparse
+argparser = argparse.ArgumentParser(description="""
+'Program description.
+""".strip())
+
+argparser.add_argument('-f', '--force-overwrite',
+                    default=False,
+                   help='Setting this will overwrite any existing cache results for the current commit',
+                   action='store_true')
+argparser.add_argument('-d', '--debug',
+                    default=False,
+                   help='Report cache hits/misses',
+                   action='store_true')
+
+args = argparser.parse_args()
+
+#print args.accumulate(args.integers)
+
 shim="""
 import os
 import sys
 import shutil
 import warnings
+import re
+"""
+
+shim += ("BC_FORCE_OVERWRITE = %s\n" % args.force_overwrite)
+shim += ("BC_DEBUG = %s\n" % args.debug)
 
+shim += """
 try:
     if not ("develop" in sys.argv) and not ("install" in sys.argv):
         1/0
@@ -34,6 +58,7 @@ try:
     if os.path.isdir(BUILD_CACHE_DIR):
         print("--------------------------------------------------------")
         print("BUILD CACHE ACTIVATED (V2). be careful, this is experimental.")
+        print("BUILD_CACHE_DIR: " + BUILD_CACHE_DIR )
         print("--------------------------------------------------------")
     else:
         BUILD_CACHE_DIR = None
@@ -65,33 +90,41 @@ try:
                         h = sha1(open(f,"rb").read()).hexdigest()
                     except IOError:
                         to_process[h] = f
-                    if h in orig_hashes:
+                    if h in orig_hashes and not BC_FORCE_OVERWRITE:
                         src = os.path.join(BUILD_CACHE_DIR,orig_hashes[h])
-                        # print("cache hit %s,%s" % (f,h))
+                        if BC_DEBUG:
+                            print("2to3 cache hit %s,%s" % (f,h))
                         shutil.copyfile(src,f)
                     elif h not in post_hashes:
 
                         # we're not in a dev dir with already processed files
-                        #                        print("cache miss %s,%s" % (f,h))
-                        # print("will process " + f)
+                        if BC_DEBUG:
+                            print("2to3 cache miss %s,%s" % (f,h))
+                            print("2to3 will process " + f)
                         to_process[h] = f
 
         avail_fixes = set(refactor.get_fixers_from_package("lib2to3.fixes"))
         avail_fixes.discard('lib2to3.fixes.fix_next')
         t=refactor.RefactoringTool(avail_fixes)
-        t.refactor(to_process.values(),True)
-        print("2to3 done refactoring.")
-        for orig_h in to_process:
-            f = to_process[orig_h]
-            post_h = sha1(open(f,"rb").read()).hexdigest()
-            cached_fname = orig_h + "-" + post_h + "-" + pyver
-            # print("cache put %s,%s in %s" % (f,h,cached_fname))
-            shutil.copyfile(f,os.path.join(BUILD_CACHE_DIR,cached_fname))
+        print("Starting 2to3 refactoring...")
+        for f in to_process.values():
+            if BC_DEBUG:
+                print("2to3 on %s" % f)
+            try:
+                t.refactor([f],True)
+                post_h = sha1(open(f, "rb").read()).hexdigest()
+                cached_fname = f + "-" + post_h + "-" + pyver
+                if BC_DEBUG:
+                    print("cache put %s,%s in %s" % (f, h, cached_fname))
+                shutil.copyfile(f, os.path.join(BUILD_CACHE_DIR, cached_fname))
 
-except:
-        BUILD_CACHE_DIR = None
+            except:
+                pass
+        print("2to3 done refactoring.")
 
-print("BUILD_CACHE_DIR: " + str(BUILD_CACHE_DIR) )
+except Exception as e:
+    print( "Exception: " + str(e))
+    BUILD_CACHE_DIR = None
 
 class CompilationCacheMixin(object):
     def __init__(self, *args, **kwds):
@@ -102,9 +135,10 @@ class CompilationCacheMixin(object):
 
     def _copy_from_cache(self, hash, target):
         src = os.path.join(self.cache_dir, hash)
-        if os.path.exists(src):
-        #            print("Cache HIT: asked to copy file %s in %s"  %
-        #            (src,os.path.abspath(target)))
+        if os.path.exists(src) and not BC_FORCE_OVERWRITE:
+            if BC_DEBUG:
+                print("Cache HIT: asked to copy file %s in %s"  %
+                    (src,os.path.abspath(target)))
             s = "."
             for d in target.split(os.path.sep)[:-1]:
                 s = os.path.join(s, d)
@@ -118,7 +152,8 @@ class CompilationCacheMixin(object):
 
     def _put_to_cache(self, hash, src):
         target = os.path.join(self.cache_dir, hash)
-        #        print( "Cache miss: asked to copy file from %s to %s" % (src,target))
+        if BC_DEBUG:
+            print( "Cache miss: asked to copy file from %s to %s" % (src,target))
         s = "."
         for d in target.split(os.path.sep)[:-1]:
             s = os.path.join(s, d)
@@ -263,7 +298,7 @@ def main():
             SEP="\nsetup("
             before,after = s.split(SEP)
             with open(opj(opd(__file__),"..","setup.py"),"wb") as f:
-                f.write(before + shim + SEP + after)
+                f.write((before + shim + SEP + after).encode('ascii'))
             print("""
     setup.py was rewritten to use a build cache.
     Make sure you've put the following in your .bashrc:
@@ -282,7 +317,6 @@ def main():
 
     """)
 
-
 if __name__ == '__main__':
     import sys
     sys.exit(main())
diff --git a/vb_suite/test_perf.py b/vb_suite/test_perf.py
index 4b7c719bc..d019af337 100755
--- a/vb_suite/test_perf.py
+++ b/vb_suite/test_perf.py
@@ -356,7 +356,7 @@ def print_report(df,h_head=None,h_msg="",h_baseline=None,b_msg=""):
     if not args.quiet:
         prprint(s)
 
-    if args.stats:
+    if args.stats and args.quiet:
         prprint(stats_footer)
 
     prprint("Results were also written to the logfile at '%s'" %
