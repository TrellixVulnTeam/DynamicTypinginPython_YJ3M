commit c6c1331fc0e24820fa0f637c652bb02963e5f6e3
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Apr 27 19:22:30 2012 -0400

    ENH: basic downsampling with PeriodIndex, GH #1109

diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 2dc370822..748dd4300 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -1,4 +1,4 @@
-# pylint: disable=W0231
+# pylint: disable=W0231,E1101
 from datetime import timedelta
 
 import numpy as np
@@ -182,12 +182,11 @@ class PandasObject(Picklable):
         """
         from pandas.tseries.resample import TimeGrouper
 
-        idx = self._get_axis(axis)
-        if not isinstance(idx, DatetimeIndex):
-            raise ValueError("Cannot call resample with non-DatetimeIndex")
+        if axis != 0:
+            raise NotImplementedError
 
         grouper = TimeGrouper(rule, label=label, closed=closed,
-                              axis=self.index, kind=kind)
+                              axis=self._get_axis(axis), kind=kind)
 
         # since binner extends endpoints
         if grouper.downsamples:
diff --git a/pandas/tseries/period.py b/pandas/tseries/period.py
index d7bf6ef4e..fca05f88c 100644
--- a/pandas/tseries/period.py
+++ b/pandas/tseries/period.py
@@ -35,7 +35,7 @@ def _field_accessor(name, alias=None):
     def f(self):
         base, mult = _gfc(self.freq)
         g = getattr(lib, 'get_period_%s_arr' % alias)
-        return g(self.ordinal, base, mult)
+        return g(self.values, base, mult)
     f.__name__ = name
     return property(f)
 
@@ -580,26 +580,25 @@ class PeriodIndex(Int64Index):
         else:
             base2, mult2 = freq
 
-
-        new_data = lib.period_asfreq_arr(self.values,
-                                         base1, mult1,
-                                         base2, mult2, py3compat.str_to_bytes(how))
+        new_data = lib.period_asfreq_arr(self.values, base1, mult1,
+                                         base2, mult2,
+                                         py3compat.str_to_bytes(how))
 
         return PeriodIndex(new_data, freq=freq)
 
-    year = _period_field_accessor('year')
-    month = _period_field_accessor('month')
-    day = _period_field_accessor('day')
-    hour = _period_field_accessor('hour')
-    minute = _period_field_accessor('minute')
-    second = _period_field_accessor('second')
-    weekofyear = _period_field_accessor('week')
+    year = _field_accessor('year')
+    month = _field_accessor('month')
+    day = _field_accessor('day')
+    hour = _field_accessor('hour')
+    minute = _field_accessor('minute')
+    second = _field_accessor('second')
+    weekofyear = _field_accessor('week')
     week = weekofyear
-    dayofweek = _period_field_accessor('dayofweek', 'dow')
+    dayofweek = _field_accessor('dayofweek', 'dow')
     weekday = dayofweek
-    dayofyear = day_of_year = _period_field_accessor('dayofyear', 'doy')
-    quarter = _period_field_accessor('quarter')
-    qyear = _period_field_accessor('qyear')
+    dayofyear = day_of_year = _field_accessor('dayofyear', 'doy')
+    quarter = _field_accessor('quarter')
+    qyear = _field_accessor('qyear')
 
     # Try to run function on index first, and then on elements of index
     # Especially important for group-by functionality
diff --git a/pandas/tseries/resample.py b/pandas/tseries/resample.py
index 5409b2294..6aa5d32f0 100644
--- a/pandas/tseries/resample.py
+++ b/pandas/tseries/resample.py
@@ -4,7 +4,7 @@ from pandas.core.groupby import BinGrouper
 from pandas.tseries.frequencies import to_offset
 from pandas.tseries.index import DatetimeIndex, date_range
 from pandas.tseries.offsets import DateOffset
-from pandas.tseries.period import PeriodIndex
+from pandas.tseries.period import PeriodIndex, period_range
 from pandas.util.decorators import cache_readonly
 import pandas.core.common as com
 
@@ -43,7 +43,7 @@ class TimeGrouper(BinGrouper):
     def __init__(self, offset='Min', closed='left', label='left',
                  begin=None, end=None, nperiods=None, axis=None,
                  kind=None):
-        self.offset = offset
+        self.freq = offset
         self.closed = closed
         self.label = label
         self.begin = begin
@@ -61,6 +61,9 @@ class TimeGrouper(BinGrouper):
         if id(self.axis) == id(axis):
             return
 
+        if not isinstance(axis, (DatetimeIndex, PeriodIndex)):
+            raise ValueError('Only valid with DatetimeIndex or PeriodIndex')
+
         self.axis = axis
 
         if len(self.axis) < 1:
@@ -100,7 +103,7 @@ class TimeGrouper(BinGrouper):
             return binner, bins, labels
         elif self.kind == 'period':
             index = PeriodIndex(start=self.axis[0], end=self.axis[-1],
-                                freq=self.offset)
+                                freq=self.freq)
 
             end_stamps = (index + 1).asfreq('D', 's').to_timestamp()
             bins = self.axis.searchsorted(end_stamps, side='left')
@@ -108,10 +111,24 @@ class TimeGrouper(BinGrouper):
             return index, bins, index
 
     def _group_periods(self):
-        raise NotImplementedError
+        if self.kind is None or self.kind == 'period':
+            # Start vs. end of period
+            memb = self.axis.asfreq(self.freq)
+
+            if len(memb) > 1:
+                rng = np.arange(memb.values[0], memb.values[-1] + 1)
+                bins = memb.searchsorted(rng, side='right')
+            else:
+                bins = np.array([], dtype=np.int32)
+
+            index = period_range(memb[0], memb[-1], freq=self.freq)
+            return index, bins, index
+        else:
+            # Convert to timestamps
+            pass
 
     def _generate_time_binner(self):
-        offset = self.offset
+        offset = self.freq
         if isinstance(offset, basestring):
             offset = to_offset(offset)
 
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index 6470bb793..1234685cf 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -263,10 +263,29 @@ class TestResample(unittest.TestCase):
 
         self.assertRaises(Exception, ts.asfreq, 'B')
 
+
 def _simple_ts(start, end, freq='D'):
     rng = date_range(start, end, freq=freq)
     return Series(np.random.randn(len(rng)), index=rng)
 
+def _simple_pts(start, end, freq='D'):
+    rng = period_range(start, end, freq=freq)
+    return Series(np.random.randn(len(rng)), index=rng)
+
+
+class TestResamplePeriodIndex(unittest.TestCase):
+
+    def test_basic_resample(self):
+        ts = _simple_pts('1/1/1990', '6/30/1995', freq='M')
+
+        result = ts.resample('a-dec')
+        expected = ts.groupby(ts.index.year).mean()
+        expected.index = period_range('1/1/1990', '6/30/1995',
+                                      freq='a-dec')
+        assert_series_equal(result, expected)
+
+    def test_upsample_ffill(self):
+        pass
 
 class TestTimeGrouper(unittest.TestCase):
 
