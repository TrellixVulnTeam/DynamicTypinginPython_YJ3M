commit 92bc2772c87ff25d0bcbcc878bf4c1492027004b
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Jul 24 23:28:54 2011 -0400

    TST: multi-column groupby test passes now

diff --git a/RELEASE.rst b/RELEASE.rst
index 5db9339d3..d4633a7e1 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -35,6 +35,7 @@ Release notes
   will result in significant performance boosts, and smaller memory
   footprint. Added `to_sparse` methods to `Series`, `DataFrame`, and
   `WidePanel`. See online documentation for more on these
+* `Index` objects (labels for axes) are now capable of holding tuples
 * `Series.describe`, `DataFrame.describe`: produces an R-like table of summary
   statistics about each data column
 * `DataFrame.quantile`, `Series.quantile`
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index d02c3c57a..cf27622d8 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -3,6 +3,7 @@ Contains data structures designed for manipulating panel (3-dimensional) data
 """
 # pylint: disable=E1103,W0231,W0212,W0621
 
+from cStringIO import StringIO
 import operator
 import sys
 import warnings
@@ -1002,6 +1003,14 @@ class LongPanel(Panel, Picklable):
     def __len__(self):
         return len(self.index)
 
+    def __repr__(self):
+        if len(self.items) < 7 and len(self.index) < 500:
+            buf = StringIO()
+            self.toString(buf=buf)
+            return buf.getvalue()
+        else:
+            return Panel.__repr__(self)
+
     @classmethod
     def fromRecords(cls, data, major_field, minor_field,
                     factors=None, exclude=None):
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 287abf946..3cdae0c98 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -225,9 +225,17 @@ class TestDataFrameGroupBy(unittest.TestCase):
             for n2, gp2 in gp1.groupby('B'):
                 expected[n1][n2] = gp2.ix[:, ['C', 'D']].sum()
         expected = dict((k, DataFrame(v)) for k, v in expected.iteritems())
-        expected = WidePanel.fromDict(expected)
-        assert_panel_equal(result1, expected)
-        assert_panel_equal(result1['C'], expected['C'])
+        expected = WidePanel.fromDict(expected).swapaxes(0, 1)
+
+        # a little bit crude
+        # TODO: fix when have hierarchical Index
+        for col in ['C', 'D']:
+            exp = expected[col]
+            pivoted = result1.pivot('A', 'B', col)
+            assert_frame_equal(pivoted.reindex_like(exp), exp)
+
+        # assert_panel_equal(result1, expected)
+        # assert_panel_equal(result1['C'], expected['C'])
 
         # result2 = data.groupby('B', 'A').sum()
         # assert_panel_equal(result2, expected2)
