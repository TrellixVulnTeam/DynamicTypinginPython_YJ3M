commit 96375da37cde2072caaf2e46f16174725aa0e492
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Dec 20 22:54:15 2011 -0500

    BUG: return NumPy scalars from Series, same speed as before, GH #510

diff --git a/pandas/src/numpy_helper.h b/pandas/src/numpy_helper.h
index 5315920e9..5023a8b78 100644
--- a/pandas/src/numpy_helper.h
+++ b/pandas/src/numpy_helper.h
@@ -39,3 +39,9 @@ assign_value_1d(PyArrayObject* ap, Py_ssize_t _i, PyObject* v) {
   char *item = (char *) PyArray_DATA(ap) + i * PyArray_STRIDE(ap, 0);
   return PyArray_DESCR(ap)->f->setitem(v, item, ap);
 }
+
+PANDAS_INLINE PyObject*
+get_value_1d(PyArrayObject* ap, Py_ssize_t i) {
+  char *item = (char *) PyArray_DATA(ap) + i * PyArray_STRIDE(ap, 0);
+  return PyArray_Scalar(item, PyArray_DESCR(ap), (PyObject*) ap);
+}
diff --git a/pandas/src/util.pxd b/pandas/src/util.pxd
index 8c207094a..54c3991d3 100644
--- a/pandas/src/util.pxd
+++ b/pandas/src/util.pxd
@@ -6,8 +6,8 @@ cdef extern from "numpy_helper.h":
     inline int is_float_object(object)
     inline int is_bool_object(object)
     inline int is_string_object(object)
-    inline int assign_value_1d (ndarray, Py_ssize_t, object) except -1
-
+    inline int assign_value_1d(ndarray, Py_ssize_t, object) except -1
+    inline object get_value_1d(ndarray, Py_ssize_t)
 
 cdef inline object get_value_at(ndarray arr, object loc):
     cdef:
@@ -24,8 +24,8 @@ cdef inline object get_value_at(ndarray arr, object loc):
         i += sz
     elif i >= sz:
         raise IndexError('index out of bounds')
-    data_ptr = cnp.PyArray_GETPTR1(arr, i)
-    return cnp.PyArray_GETITEM(arr, data_ptr)
+
+    return get_value_1d(arr, i)
 
 cdef inline set_value_at(ndarray arr, object loc, object value):
     cdef:
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index bac6ddd10..4bb5dd4a3 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -359,6 +359,10 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         # don't segfault, GH #495
         self.assertRaises(IndexError, self.ts.__getitem__, len(self.ts))
 
+    def test_getitem_box_float64(self):
+        value = self.ts[5]
+        self.assert_(isinstance(value, np.float64))
+
     def test_slice(self):
         numSlice = self.series[10:20]
         numSliceEnd = self.series[-10:]
