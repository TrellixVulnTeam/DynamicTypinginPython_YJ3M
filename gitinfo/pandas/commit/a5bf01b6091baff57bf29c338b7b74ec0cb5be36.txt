commit a5bf01b6091baff57bf29c338b7b74ec0cb5be36
Author: Chang She <changshe@gmail.com>
Date:   Thu Nov 15 18:28:28 2012 -0500

    BUG: diff breaks for neg periods #2266

diff --git a/RELEASE.rst b/RELEASE.rst
index 45b70c823..551ac2fb3 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -22,6 +22,21 @@ Where to get it
 * Binary installers on PyPI: http://pypi.python.org/pypi/pandas
 * Documentation: http://pandas.pydata.org
 
+pandas 0.9.2
+============
+
+**Release date:** Not yet released
+
+**New features**
+
+**API Changes**
+
+**Improvements to existing features**
+
+**Bug fixes**
+
+  - Fixes bug when negative period passed to Series/DataFrame.diff (#2266)
+
 pandas 0.9.1
 ============
 
diff --git a/pandas/core/common.py b/pandas/core/common.py
index 936f1d635..cd67260d0 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -388,8 +388,10 @@ def diff(arr, n, axis=0):
 
     out_arr = np.empty(arr.shape, dtype=dtype)
 
+    get_slice = lambda x: slice(None, x) if n >= 0 else slice(x, None)
+
     na_indexer = [slice(None)] * arr.ndim
-    na_indexer[axis] = slice(None, n)
+    na_indexer[axis] = slice(None, n) if n >= 0 else slice(n, None)
     out_arr[tuple(na_indexer)] = np.nan
 
     if arr.ndim == 2 and arr.dtype.name in _diff_special:
@@ -397,11 +399,11 @@ def diff(arr, n, axis=0):
         f(arr, out_arr, n, axis)
     else:
         res_indexer = [slice(None)] * arr.ndim
-        res_indexer[axis] = slice(n, None)
+        res_indexer[axis] = slice(n, None) if n >= 0 else slice(None, n)
         res_indexer = tuple(res_indexer)
 
         lag_indexer = [slice(None)] * arr.ndim
-        lag_indexer[axis] = slice(None, -n)
+        lag_indexer[axis] = slice(None, -n) if n >= 0 else slice(-n, None)
         lag_indexer = tuple(lag_indexer)
 
         out_arr[res_indexer] = arr[res_indexer] - arr[lag_indexer]
diff --git a/pandas/core/series.py b/pandas/core/series.py
index a798915cb..140a2f1f2 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1514,8 +1514,8 @@ copy : boolean, default False
         -------
         diffed : Series
         """
-        result = com.diff(self.values[:, np.newaxis], periods)
-        return Series(result.squeeze(), self.index, name=self.name)
+        result = com.diff(self.values, periods)
+        return Series(result, self.index, name=self.name)
 
     def autocorr(self):
         """
diff --git a/pandas/src/stats.pyx b/pandas/src/stats.pyx
index 19bbb844e..84bef827d 100644
--- a/pandas/src/stats.pyx
+++ b/pandas/src/stats.pyx
@@ -566,6 +566,8 @@ def rank_2d_generic(object in_arr, axis=0, ties_method='average',
 #             result[i, j] = values[i, indexer[i, j]]
 #     return result
 
+
+
 @cython.wraparound(False)
 @cython.boundscheck(False)
 def diff_2d_float64(ndarray[float64_t, ndim=2] arr,
@@ -577,21 +579,37 @@ def diff_2d_float64(ndarray[float64_t, ndim=2] arr,
     sx, sy = (<object> arr).shape
     if arr.flags.f_contiguous:
         if axis == 0:
+            if periods >= 0:
+                start, stop = periods, sx
+            else:
+                start, stop = 0, sx + periods
             for j in range(sy):
-                for i in range(periods, sx):
+                for i in range(start, stop):
                     out[i, j] = arr[i, j] - arr[i - periods, j]
         else:
-            for j in range(periods, sy):
+            if periods >= 0:
+                start, stop = periods, sy
+            else:
+                start, stop = 0, sy + periods
+            for j in range(start, stop):
                 for i in range(sx):
                     out[i, j] = arr[i, j] - arr[i, j - periods]
     else:
         if axis == 0:
-            for i in range(periods, sx):
+            if periods >= 0:
+                start, stop = periods, sx
+            else:
+                start, stop = 0, sx + periods
+            for i in range(start, stop):
                 for j in range(sy):
                     out[i, j] = arr[i, j] - arr[i - periods, j]
         else:
+            if periods >= 0:
+                start, stop = periods, sy
+            else:
+                start, stop = 0, sy + periods
             for i in range(sx):
-                for j in range(periods, sy):
+                for j in range(start, stop):
                     out[i, j] = arr[i, j] - arr[i, j - periods]
 
 @cython.wraparound(False)
@@ -605,21 +623,37 @@ def diff_2d_int64(ndarray[int64_t, ndim=2] arr,
     sx, sy = (<object> arr).shape
     if arr.flags.f_contiguous:
         if axis == 0:
+            if periods >= 0:
+                start, stop = periods, sx
+            else:
+                start, stop = 0, sx + periods
             for j in range(sy):
-                for i in range(periods, sx):
+                for i in range(start, stop):
                     out[i, j] = arr[i, j] - arr[i - periods, j]
         else:
-            for j in range(periods, sy):
+            if periods >= 0:
+                start, stop = periods, sy
+            else:
+                start, stop = 0, sy + periods
+            for j in range(start, stop):
                 for i in range(sx):
                     out[i, j] = arr[i, j] - arr[i, j - periods]
     else:
         if axis == 0:
-            for i in range(periods, sx):
+            if periods >= 0:
+                start, stop = periods, sx
+            else:
+                start, stop = 0, sx + periods
+            for i in range(start, stop):
                 for j in range(sy):
                     out[i, j] = arr[i, j] - arr[i - periods, j]
         else:
+            if periods >= 0:
+                start, stop = periods, sy
+            else:
+                start, stop = 0, sy + periods
             for i in range(sx):
-                for j in range(periods, sy):
+                for j in range(start, stop):
                     out[i, j] = arr[i, j] - arr[i, j - periods]
 
 
@@ -634,20 +668,35 @@ def diff_2d_int32(ndarray[int64_t, ndim=2] arr,
     sx, sy = (<object> arr).shape
     if arr.flags.f_contiguous:
         if axis == 0:
+            if periods >= 0:
+                start, stop = periods, sx
+            else:
+                start, stop = 0, sx + periods
             for j in range(sy):
-                for i in range(periods, sx):
+                for i in range(start, stop):
                     out[i, j] = arr[i, j] - arr[i - periods, j]
         else:
-            for j in range(periods, sy):
+            if periods >= 0:
+                start, stop = periods, sy
+            else:
+                start, stop = 0, sy + periods
+            for j in range(start, stop):
                 for i in range(sx):
                     out[i, j] = arr[i, j] - arr[i, j - periods]
     else:
         if axis == 0:
-            for i in range(periods, sx):
+            if periods >= 0:
+                start, stop = periods, sx
+            else:
+                start, stop = 0, sx + periods
+            for i in range(start, stop):
                 for j in range(sy):
                     out[i, j] = arr[i, j] - arr[i - periods, j]
         else:
+            if periods >= 0:
+                start, stop = periods, sy
+            else:
+                start, stop = 0, sy + periods
             for i in range(sx):
-                for j in range(periods, sy):
+                for j in range(start, stop):
                     out[i, j] = arr[i, j] - arr[i, j - periods]
-
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index db61f2ca3..1be120348 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -5443,6 +5443,11 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         result = df.diff()
         self.assert_(result[0].dtype == np.float64)
 
+    def test_diff_neg_n(self):
+        rs = self.tsframe.diff(-1)
+        xp = self.tsframe - self.tsframe.shift(-1)
+        assert_frame_equal(rs, xp)
+
     def test_pct_change(self):
         rs = self.tsframe.pct_change(fill_method=None)
         assert_frame_equal(rs, self.tsframe / self.tsframe.shift(1) - 1)
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 7422c925f..a906489e6 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -3013,6 +3013,11 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         rs = s.diff()
         self.assertEqual(rs[1], 1)
 
+        #neg n
+        rs = self.ts.diff(-1)
+        xp = self.ts - self.ts.shift(-1)
+        assert_series_equal(rs, xp)
+
     def test_pct_change(self):
         rs = self.ts.pct_change(fill_method=None)
         assert_series_equal(rs, self.ts / self.ts.shift(1) - 1)
