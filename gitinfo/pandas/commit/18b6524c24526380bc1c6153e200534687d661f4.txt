commit 18b6524c24526380bc1c6153e200534687d661f4
Author: Adam Klein <adamklein@gmail.com>
Date:   Wed Dec 21 13:45:10 2011 -0500

    more 0.5.0 documentation

diff --git a/doc/source/basics.rst b/doc/source/basics.rst
index 1cbfeb720..b9001a5cb 100644
--- a/doc/source/basics.rst
+++ b/doc/source/basics.rst
@@ -777,3 +777,21 @@ There is also a ``save`` function which takes any object as its first argument:
 
    import os
    os.remove('foo.pickle')
+
+Console Output Formatting
+-------------------------
+
+.. _basics.console_output:
+
+Use the ``set_eng_float_format`` function in the ``pandas.core.common`` module
+to alter the floating-point formatting of pandas objects to produce a particular
+format.
+
+For instance:
+
+.. ipython:: python
+
+  set_eng_float_format(precision=3, use_eng_prefix=True)
+  df[0]/1.e3
+  df[0]/1.e6
+
diff --git a/doc/source/groupby.rst b/doc/source/groupby.rst
index 57aafef86..8d716de89 100644
--- a/doc/source/groupby.rst
+++ b/doc/source/groupby.rst
@@ -149,6 +149,8 @@ the length of the ``groups`` dict, so it is largely just a convenience:
 GroupBy with MultiIndex
 ~~~~~~~~~~~~~~~~~~~~~~~
 
+.. _groupby.multiindex:
+
 With :ref:`hierarchically-indexed data <indexing.hierarchical>`, it's quite
 natural to group by one of the levels of the hierarchy.
 
diff --git a/doc/source/indexing.rst b/doc/source/indexing.rst
index ea9cdaf1e..30fdb6325 100644
--- a/doc/source/indexing.rst
+++ b/doc/source/indexing.rst
@@ -69,29 +69,34 @@ Thus, as per above, we have the most basic indexing using ``[]``:
    s[dates[5]]
    panel['two']
 
-.. _indexing.basics.get_value:
+Additional Column Access
+~~~~~~~~~~~~~~~~~~~~~~~~
 
-Fast scalar value getting and setting
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+.. _indexing.columns.multiple:
+
+.. _indexing.df_cols:
 
-Since indexing with ``[]`` must handle a lot of cases (single-label access,
-slicing, boolean indexing, etc.), it has a bit of overhead in order to figure
-out what you're asking for. If you only want to access a scalar value, the
-fastest way is to use the ``get_value`` method, which is implemented on all of
-the data structures:
+You may access a column on a dataframe directly as an attribute:
 
 .. ipython:: python
 
-   s.get_value(dates[5])
-   df.get_value(dates[5], 'A')
+   df.A
+
+If you are using the IPython environment, you may also use tab-completion to
+see the accessible columns of a DataFrame.
 
-There is an analogous ``set_value`` method which has the additional capability
-of enlarging an object. This method *always* returns a reference to the object
-it modified, which in the fast of enlargement, will be a **new object**:
+You can pass a list of columns to ``[]`` to select columns in that order:
+If a column is not contained in the DataFrame, an exception will be
+raised. Multiple columns can also be set in this manner:
 
 .. ipython:: python
 
-   df.set_value(dates[5], 'E', 7)
+   df
+   df[['B', 'A']] = df[['A', 'B']]
+   df
+
+You may find this useful for applying a transform (in-place) to a subset of the
+columns.
 
 Data slices on other axes
 ~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -164,6 +169,10 @@ one of the columns of the DataFrame) is supported:
 
    df[df['A'] > 0]
 
+As we will see later on, the same operation could be accomplished by
+reindexing. However, the syntax would be more verbose; hence, the inclusion of
+this indexing method.
+
 With the advanced indexing capabilities discussed later, you are able to do
 boolean indexing in any of axes or combine a boolean vector with an indexing
 expression on one of the other axes
@@ -185,6 +194,15 @@ intuitively like so:
 Note that such an operation requires that the boolean DataFrame is indexed
 exactly the same.
 
+
+Take Methods
+~~~~~~~~~~~~
+
+.. _indexing.take:
+
+TODO: Fill Me In
+
+
 Slicing ranges
 ~~~~~~~~~~~~~~
 
@@ -197,45 +215,6 @@ supports slicing:
     df[::-1]
     df[-3:].T
 
-Boolean indexing
-~~~~~~~~~~~~~~~~
-
-As another indexing convenience, it is possible to use boolean
-indexing to select rows of a DataFrame:
-
-.. ipython:: python
-
-    df[df['A'] > 0.5]
-
-As we will see later on, the same operation could be accomplished by
-reindexing. However, the syntax would be more verbose; hence, the inclusion of
-this indexing method.
-
-.. _indexing.columns.multiple:
-
-.. _indexing.df_cols:
-
-You may access a column on a dataframe directly as an attribute:
-
-.. ipython:: python
-
-   df.A
-
-If you are using the IPython environment, you may also use tab-completion to
-see the accessible columns of a DataFrame.
-
-You can pass a list of columns to ``[]`` to select columns in that order:
-If a column is not contained in the DataFrame, an exception will be
-raised. Multiple columns can also be set in this manner:
-
-.. ipython:: python
-
-   df
-   df[['B', 'A']] = df[['A', 'B']]
-   df
-
-You may find this useful for applying a transform (in-place) to a subset of the
-columns.
 
 .. _indexing.advanced:
 
@@ -716,6 +695,8 @@ ways.
 Add an index using DataFrame columns
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
+.. _indexing.set_index:
+
 DataFrame has a ``set_index`` method which takes a column name (for a regular
 ``Index``) or a list of column names (for a ``MultiIndex``), to create a new,
 indexed DataFrame:
diff --git a/doc/source/reshaping.rst b/doc/source/reshaping.rst
index 2247470c9..7f14f6ac0 100644
--- a/doc/source/reshaping.rst
+++ b/doc/source/reshaping.rst
@@ -205,6 +205,8 @@ some very expressive and fast data manipulations.
 Pivot tables and cross-tabulations
 **********************************
 
+.. _reshaping.pivot:
+
 The function ``pandas.pivot_table`` can be used to create spreadsheet-style pivot
 tables. It takes a number of arguments
 
diff --git a/doc/source/whatsnew/v0.5.0.rst b/doc/source/whatsnew/v0.5.0.rst
index 9d28c1e31..2c0299f9c 100644
--- a/doc/source/whatsnew/v0.5.0.rst
+++ b/doc/source/whatsnew/v0.5.0.rst
@@ -11,21 +11,22 @@ New Features
 - :ref:`Added <io.parse_dates>` ``parse_dates`` option to ``read_csv`` and ``read_table`` methods to optionally try to parse dates in the index columns
 - :ref:`Added <io.parse_dates>` ``nrows``, ``chunksize``, and ``iterator`` arguments to ``read_csv`` and ``read_table``. The last two return a new ``TextParser`` class capable of lazily iterating through chunks of a flat file (GH242_)
 - :ref:`Added <merging.multikey_join>` ability to join on multiple columns in ``DataFrame.join`` (GH214_)
-- (Added private ``_get_duplicates`` function to ``Index`` for identifying duplicate values more easily)
+- Added private ``_get_duplicates`` function to ``Index`` for identifying duplicate values more easily (ENH5c_)
 - :ref:`Added <indexing.df_cols>` column attribute access to DataFrame.
 - :ref:`Added <indexing.df_cols>` Python tab completion hook for DataFrame columns. (PR233_, GH230_)
 - :ref:`Implemented <basics.describe>` ``Series.describe`` for Series containing objects (PR241_)
 - :ref:`Added <merging.df_inner_join>` inner join option to ``DataFrame.join`` when joining on key(s) (GH248_)
 - :ref:`Implemented <indexing.df_cols>` selecting DataFrame columns by passing a list to ``__getitem__`` (GH253_)
 - :ref:`Implemented <indexing.set_ops>` & and | to intersect / union Index objects, respectively (GH261_)
-- MORE ON PIVOT TABLES Added ``pivot_table`` convenience function to pandas namespace (GH234_)
+- :ref:`Added<reshaping.pivot>` ``pivot_table`` convenience function to pandas namespace (GH234_)
 - :ref:`Implemented <basics.rename_axis>` ``Panel.rename_axis`` function (GH243_)
-- (DataFrame will show index level names in console output)
-- DOCS ABOUT TAKE METHODS Implemented ``Panel.take``
-- SORT OF WANT? Add ``set_eng_float_format`` for alternate DataFrame floating point string formatting
-- DONE? Add convenience ``set_index`` function for creating a DataFrame index from its existing columns
-- Can pass hierarchical index level name to ``groupby`` instead of the level number if desired (GH223_)
+- DataFrame will show index level names in console output (PR334_)
+- :ref:`Implemented <indexing.take>` ``Panel.take``
+- :ref:`Added<basics.console_output>` ``set_eng_float_format`` for alternate DataFrame floating point string formatting (ENH61_)
+- :ref:`Added <indexing.set_index>` convenience ``set_index`` function for creating a DataFrame index from its existing columns
+- :ref:`Implemented <groupby.multiindex>` ``groupby`` hierarchical index level name  (GH223_)
 - :ref:`Added <io.store_in_csv>` support for different delimiters in ``DataFrame.to_csv`` (PR244_)
+- TODO: DOCS ABOUT TAKE METHODS, MORE ON PIVOT TABLES
 
 Performance Enhancements
 ~~~~~~~~~~~~~~~~~~~~~~~~
@@ -54,3 +55,6 @@ Performance Enhancements
 .. _GH211: https://github.com/wesm/pandas/issues/211
 .. _GH215: https://github.com/wesm/pandas/issues/215
 .. _GH213: https://github.com/wesm/pandas/issues/213
+.. _ENH61: https://github.com/wesm/pandas/commit/6141961
+.. _PR334: https://github.com/wesm/pandas/pull/334
+.. _ENH5c: https://github.com/wesm/pandas/commit/5ca6ff5d822ee4ddef1ec0d87b6d83d8b4bbd3eb
