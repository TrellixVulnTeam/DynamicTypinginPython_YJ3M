commit 955ab84712de5c68eb5d1aa1d7b108e01d694e1f
Author: Chang She <chang@lambdafoundry.com>
Date:   Tue May 15 10:23:15 2012 -0400

    VB: removing cruft; getting config from user folders

diff --git a/vb_suite/make.py b/vb_suite/make.py
index 306ba0861..e90c3525f 100755
--- a/vb_suite/make.py
+++ b/vb_suite/make.py
@@ -30,11 +30,6 @@ def upload():
     os.system('cd build/html; rsync -avz . pandas@pandas.pydata.org'
               ':/usr/share/nginx/pandas/pandas-docs/vbench/ -essh')
 
-def uploadpdf():
-    'push a copy to the sf site'
-    os.system('cd build/latex; scp pandas.pdf wesmckinn,pandas@web.sf.net'
-              ':/home/groups/p/pa/pandas/htdocs/')
-
 def clean():
     if os.path.exists('build'):
         shutil.rmtree('build')
@@ -48,29 +43,10 @@ def html():
                  'source build/html'):
         raise SystemExit("Building HTML failed.")
 
-def latex():
-    check_build()
-    if sys.platform != 'win32':
-        # LaTeX format.
-        if os.system('sphinx-build -b latex -d build/doctrees '
-                     'source build/latex'):
-            raise SystemExit("Building LaTeX failed.")
-        # Produce pdf.
-
-        os.chdir('build/latex')
-
-        # Call the makefile produced by sphinx...
-        if os.system('make'):
-            raise SystemExit("Rendering LaTeX failed.")
-
-        os.chdir('../..')
-    else:
-        print 'latex build has not been tested on windows'
-
 def check_build():
     build_dirs = [
         'build', 'build/doctrees', 'build/html',
-        'build/latex', 'build/plots', 'build/_static',
+        'build/plots', 'build/_static',
         'build/_templates']
     for d in build_dirs:
         try:
@@ -79,6 +55,7 @@ def check_build():
             pass
 
 def all():
+    clean()
     html()
 
 def auto_update():
@@ -86,9 +63,7 @@ def auto_update():
     try:
         clean()
         html()
-        latex()
         upload()
-        uploadpdf()
     except Exception, inst:
         msg += str(inst) + '\n'
 
@@ -121,33 +96,46 @@ def sendmail(err_msg=None):
     server.ehlo()
 
     server.login(login, pwd)
-    server.sendmail(from_name, to_name, msg.as_string())
-    server.close()
+    try:
+        server.sendmail(from_name, to_name, msg.as_string())
+    finally:
+        server.close()
+
+def _get_dir():
+    import getpass
+    USERNAME = getpass.getuser()
+    if sys.platform == 'darwin':
+        HOME = '/Users/%s' % USERNAME
+    else:
+        HOME = '/home/%s' % USERNAME
+
+    tmp_dir = '%s/tmp' % HOME
+    return tmp_dir
 
 def _get_credentials():
-    cred = '~/tmp/credentials'
+    tmp_dir = _get_dir()
+    cred = '%s/credentials' % tmp_dir
     with open(cred, 'r') as fh:
         server, port, un, domain = fh.read().split(',')
     port = int(port)
     login = un + '@' + domain + '.com'
 
     import base64
-    with open('~/tmp/cron_email_pwd', 'r') as fh:
+    with open('%s/cron_email_pwd' % tmp_dir, 'r') as fh:
         pwd = base64.b64decode(fh.read())
 
     return server, port, login, pwd
 
 def _get_config():
-    with open('~/tmp/config', 'r') as fh:
+    tmp_dir = _get_dir()
+    with open('%s/config' % tmp_dir, 'r') as fh:
         from_name, to_name = fh.read().split(',')
     return from_name, to_name
 
 funcd = {
     'html'     : html,
-    'latex'    : latex,
     'clean'    : clean,
     'upload'       : upload,
-    'uploadpdf'    : uploadpdf,
     'auto_update' : auto_update,
     'all'      : all,
     }
