commit 0adcfce5f7be08abe768460e75667b6f846ace28
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Oct 11 14:36:26 2011 -0400

    ENH: first cut at optimizing DataFrame.xs, next step cythonize

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index e8da7c3cb..b6f5154d6 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1002,13 +1002,19 @@ class DataFrame(NDFrame):
             return data
 
         self._consolidate_inplace()
-        new_data = self._data.xs(key, axis=1, copy=copy)
-        if new_data.ndim == 1:
-            return Series(new_data.as_matrix(), index=self.columns, name=key)
+        loc = self.index.get_loc(key)
+        if np.isscalar(loc):
+            new_values = self._data.fast_2d_xs(loc, copy=copy)
+            return Series(new_values, index=self.columns, name=key)
         else:
-            result = DataFrame(new_data)
-            result.index = _maybe_droplevels(result.index, key)
-            return result
+            new_data = self._data.xs(key, axis=1, copy=copy)
+            if new_data.ndim == 1:
+                return Series(new_data.as_matrix(), index=self.columns,
+                              name=key)
+            else:
+                result = DataFrame(new_data)
+                result.index = _maybe_droplevels(result.index, key)
+                return result
 
     #----------------------------------------------------------------------
     # Reindexing and alignment
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 82183c558..672736956 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -83,15 +83,21 @@ class Index(np.ndarray):
         return lib.is_monotonic_object(self)
 
     _indexMap = None
+    _integrity = False
     @property
     def indexMap(self):
         "{label -> location}"
         if self._indexMap is None:
             self._indexMap = lib.map_indices_object(self)
-            self._verify_integrity()
+            self._integrity = len(self._indexMap) == len(self)
 
+        if not self._integrity:
+            raise Exception('Index cannot contain duplicate values!')
         return self._indexMap
 
+    def _verify_integrity(self):
+        return len(self.indexMap) == len(self)
+
     _allDates = None
     def is_all_dates(self):
         """
@@ -102,10 +108,6 @@ class Index(np.ndarray):
 
         return self._allDates
 
-    def _verify_integrity(self):
-        if len(self.indexMap) < len(self):
-            raise Exception('Index cannot contain duplicate values!')
-
     def __iter__(self):
         return iter(self.view(np.ndarray))
 
@@ -361,7 +363,6 @@ class Index(np.ndarray):
         -------
         loc : int
         """
-        self._verify_integrity()
         return self.indexMap[key]
 
     def get_indexer(self, target, method=None):
@@ -635,7 +636,10 @@ class Int64Index(Index):
         "{label -> location}"
         if self._indexMap is None:
             self._indexMap = lib.map_indices_int64(self)
-            self._verify_integrity()
+            self._integrity = len(self._indexMap) == len(self)
+
+        if not self._integrity:
+            raise Exception('Index cannot contain duplicate values!')
 
         return self._indexMap
 
@@ -992,7 +996,10 @@ class MultiIndex(Index):
         if self._indexMap is None:
             zipped = zip(*self.labels)
             self._indexMap = lib.map_indices_list(zipped)
-            self._verify_integrity()
+            self._integrity = len(self._indexMap) == len(self)
+
+        if not self._integrity:
+            raise Exception('Index cannot contain duplicate values!')
 
         return self._indexMap
 
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index ff43280a8..5f1d9c5be 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -471,6 +471,32 @@ class BlockManager(object):
 
         return BlockManager(new_blocks, new_axes)
 
+    def fast_2d_xs(self, loc, copy=False):
+        """
+
+        """
+        if len(self.blocks) == 1:
+            result = self.blocks[0].values[:, loc]
+            if copy:
+                result = result.copy()
+            return result
+
+        if not copy:
+            raise Exception('cannot get view of mixed-type or '
+                            'non-consolidated DataFrame')
+
+        items = self.items
+        dtype = _interleaved_dtype(self.blocks)
+        n = len(items)
+        result = np.empty(n, dtype=dtype)
+        for blk in self.blocks:
+            values = blk.values
+            for j, item in enumerate(blk.items):
+                i = items.get_loc(item)
+                result[i] = values[j, loc]
+
+        return result
+
     def consolidate(self):
         """
         Join together blocks having same dtype
@@ -1141,3 +1167,4 @@ class _JoinOperation(object):
 
         # use any ref_items
         return _consolidate(new_blocks, newb.ref_items)
+
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 80f53372b..ebab919a7 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -990,7 +990,7 @@ copy : boolean, default False
         y : Series
         """
         new_index = self.index.append(other.index)
-        new_index._verify_integrity()
+        assert(new_index._verify_integrity())
 
         new_values = np.concatenate((self.values, other.values))
         name = _maybe_match_name(self, other)
