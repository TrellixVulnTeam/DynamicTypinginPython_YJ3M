commit 4dd734c9c3f38ddc19fa77fea71abfb6c1f3f2ba
Author: Shawn Heide <shawnheide@users.noreply.github.com>
Date:   Mon Jul 25 08:14:31 2016 -0700

    DOC: fix slashes in read_csv line_terminator/sep kwargs descriptions (#13761)

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index fe05b3715..4ffd9c546 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1306,7 +1306,7 @@ class DataFrame(NDFrame):
                quotechar='"', line_terminator='\n', chunksize=None,
                tupleize_cols=False, date_format=None, doublequote=True,
                escapechar=None, decimal='.', **kwds):
-        """Write DataFrame to a comma-separated values (csv) file
+        r"""Write DataFrame to a comma-separated values (csv) file
 
         Parameters
         ----------
@@ -1343,7 +1343,7 @@ class DataFrame(NDFrame):
             a string representing the compression to use in the output file,
             allowed values are 'gzip', 'bz2', 'xz',
             only used when the first argument is a filename
-        line_terminator : string, default '\\n'
+        line_terminator : string, default ``'\n'``
             The newline character or character sequence to use in the output
             file
         quoting : optional constant from csv module
diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index f6a84ea9d..bedf21318 100755
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -277,11 +277,11 @@ _engine_doc = """engine : {'c', 'python'}, optional
     Parser engine to use. The C engine is faster while the python engine is
     currently more feature-complete."""
 
-_sep_doc = """sep : str, default {default}
+_sep_doc = r"""sep : str, default {default}
     Delimiter to use. If sep is None, will try to automatically determine
-    this. Separators longer than 1 character and different from '\s+' will be
-    interpreted as regular expressions, will force use of the python parsing
-    engine and will ignore quotes in the data. Regex example: '\\r\\t'"""
+    this. Separators longer than 1 character and different from ``'\s+'`` will
+    be interpreted as regular expressions, will force use of the python parsing
+    engine and will ignore quotes in the data. Regex example: ``'\r\t'``"""
 
 _read_csv_doc = """
 Read CSV (comma-separated) file into DataFrame
