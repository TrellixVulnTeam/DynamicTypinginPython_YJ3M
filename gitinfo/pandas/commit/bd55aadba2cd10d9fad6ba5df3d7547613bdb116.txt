commit bd55aadba2cd10d9fad6ba5df3d7547613bdb116
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jun 7 11:26:42 2012 -0400

    BUG: fix numpy 1.6 erroneous type-casting bug causing NumPy 1.7 issues, close #1396

diff --git a/pandas/core/index.py b/pandas/core/index.py
index ba117b920..027c322c3 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -36,6 +36,7 @@ def _indexOp(opname):
 class InvalidIndexError(Exception):
     pass
 
+_o_dtype = np.dtype(object)
 
 class Index(np.ndarray):
     """
@@ -73,16 +74,20 @@ class Index(np.ndarray):
 
     def __new__(cls, data, dtype=None, copy=False, name=None):
         if isinstance(data, np.ndarray):
+            if issubclass(data.dtype.type, np.datetime64):
+                from pandas.tseries.index import DatetimeIndex
+                result = DatetimeIndex(data, copy=copy, name=name)
+                if dtype is not None and _o_dtype == dtype:
+                    return Index(result.to_pydatetime(), dtype=_o_dtype)
+                else:
+                    return result
+
             if dtype is not None:
                 try:
                     data = np.array(data, dtype=dtype, copy=copy)
                 except TypeError:
                     pass
 
-            if issubclass(data.dtype.type, np.datetime64):
-                from pandas.tseries.index import DatetimeIndex
-                return DatetimeIndex(data, copy=copy, name=name)
-
             if issubclass(data.dtype.type, np.integer):
                 return Int64Index(data, copy=copy, name=name)
 
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index f120feca4..5ee35ec31 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -115,6 +115,16 @@ class TestTimeSeries(unittest.TestCase):
         # don't carry freq through irregular slicing
         self.assert_(dti2.freq is None)
 
+    def test_pass_datetimeindex_to_index(self):
+        # Bugs in #1396
+
+        rng = date_range('1/1/2000', '3/1/2000')
+        idx = Index(rng, dtype=object)
+
+        expected = Index(rng.to_pydatetime(), dtype=object)
+
+        self.assert_(np.array_equal(idx.values, expected.values))
+
     def test_contiguous_boolean_preserve_freq(self):
         rng = date_range('1/1/2000', '3/1/2000', freq='B')
 
