commit 1c9f23cc540961b78b3c9e6dbef5698a3b626b65
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Sat Jan 18 07:51:05 2020 -0800

    CLN: prune unreachable code (#31106)

diff --git a/pandas/core/base.py b/pandas/core/base.py
index 66d7cd59d..c6800d282 100644
--- a/pandas/core/base.py
+++ b/pandas/core/base.py
@@ -583,12 +583,10 @@ class SelectionMixin:
 class ShallowMixin:
     _attributes: List[str] = []
 
-    def _shallow_copy(self, obj=None, **kwargs):
+    def _shallow_copy(self, obj, **kwargs):
         """
         return a new object with the replacement attributes
         """
-        if obj is None:
-            obj = self._selected_obj.copy()
 
         if isinstance(obj, self._constructor):
             obj = obj.obj
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 6dd3a4152..1a49388d8 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2749,14 +2749,7 @@ class DataFrame(NDFrame):
         else:
             label = self.columns[i]
 
-            # if the values returned are not the same length
-            # as the index (iow a not found value), iget returns
-            # a 0-len ndarray. This is effectively catching
-            # a numpy error (as numpy should really raise)
             values = self._data.iget(i)
-
-            if len(self.index) and not len(values):
-                values = np.array([np.nan] * len(self.index), dtype=object)
             result = self._box_col_values(values, label)
 
             # this is a cached value, mark it so
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 6332ff45c..0c5c11946 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -3173,19 +3173,6 @@ class NDFrame(PandasObject, SelectionMixin, indexing.IndexingMixin):
 
         return None
 
-    # ----------------------------------------------------------------------
-    # Fancy Indexing
-
-    @classmethod
-    def _create_indexer(cls, name: str, indexer) -> None:
-        """Create an indexer like _name in the class.
-
-        Kept for compatibility with geopandas. To be removed in the future. See GH27258
-        """
-        if getattr(cls, name, None) is None:
-            _indexer = functools.partial(indexer, name)
-            setattr(cls, name, property(_indexer, doc=indexer.__doc__))
-
     # ----------------------------------------------------------------------
     # Lookup Caching
 
@@ -3579,14 +3566,12 @@ class NDFrame(PandasObject, SelectionMixin, indexing.IndexingMixin):
         self._data.set(key, value)
         self._clear_item_cache()
 
-    def _set_is_copy(self, ref=None, copy: bool_t = True) -> None:
+    def _set_is_copy(self, ref, copy: bool_t = True) -> None:
         if not copy:
             self._is_copy = None
         else:
-            if ref is not None:
-                self._is_copy = weakref.ref(ref)
-            else:
-                self._is_copy = None
+            assert ref is not None
+            self._is_copy = weakref.ref(ref)
 
     def _check_is_chained_assignment_possible(self) -> bool_t:
         """
diff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py
index e7f306592..08629d9a6 100644
--- a/pandas/core/indexes/base.py
+++ b/pandas/core/indexes/base.py
@@ -3129,7 +3129,7 @@ class Index(IndexOpsMixin, PandasObject):
 
             if kind in ["getitem"] and is_float(key):
                 if not self.is_floating():
-                    return self._invalid_indexer("label", key)
+                    self._invalid_indexer("label", key)
 
             elif kind in ["loc"] and is_float(key):
 
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 04503e5d9..63a867920 100755
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -619,9 +619,8 @@ class _NDFrameIndexer(_NDFrameIndexerBase):
         if isinstance(key, range):
             return list(key)
 
-        axis = self.axis or 0
         try:
-            return self._convert_to_indexer(key, axis=axis)
+            return self._convert_to_indexer(key, axis=0)
         except TypeError as e:
 
             # invalid indexer type vs 'other' indexing errors
@@ -1472,9 +1471,7 @@ class _NDFrameIndexer(_NDFrameIndexerBase):
         else:
             keyarr, indexer, new_indexer = ax._reindex_non_unique(keyarr)
 
-        self._validate_read_indexer(
-            keyarr, indexer, o._get_axis_number(axis), raise_missing=raise_missing
-        )
+        self._validate_read_indexer(keyarr, indexer, axis, raise_missing=raise_missing)
         return keyarr, indexer
 
     def _getitem_iterable(self, key, axis: int):
diff --git a/pandas/core/internals/managers.py b/pandas/core/internals/managers.py
index 39e0aa078..847f543eb 100644
--- a/pandas/core/internals/managers.py
+++ b/pandas/core/internals/managers.py
@@ -766,16 +766,14 @@ class BlockManager(PandasObject):
         res.axes = new_axes
         return res
 
-    def as_array(self, transpose=False, items=None):
-        """Convert the blockmanager data into an numpy array.
+    def as_array(self, transpose: bool = False) -> np.ndarray:
+        """
+        Convert the blockmanager data into an numpy array.
 
         Parameters
         ----------
         transpose : boolean, default False
             If True, transpose the return array
-        items : list of strings or None
-            Names of block items that will be included in the returned
-            array. ``None`` means that all block items will be used
 
         Returns
         -------
@@ -785,10 +783,7 @@ class BlockManager(PandasObject):
             arr = np.empty(self.shape, dtype=float)
             return arr.transpose() if transpose else arr
 
-        if items is not None:
-            mgr = self.reindex_axis(items, axis=0)
-        else:
-            mgr = self
+        mgr = self
 
         if self._is_single_block and mgr.blocks[0].is_datetimetz:
             # TODO(Block.get_values): Make DatetimeTZBlock.get_values
