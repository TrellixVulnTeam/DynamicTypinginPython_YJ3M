commit a0a9520b2f164cd2c77a30b1461b0ee1010a2821
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Oct 10 13:47:51 2011 -0400

    ENH: some more join refactoring and testing

diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index fec3be706..dea6c9d54 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -989,10 +989,10 @@ class _JoinOperation(object):
         rblocks = self.right.blocks
 
         # will short-circuit and not compute lneed_masking
-        if self._may_need_upcasting(lblocks) and self.lneed_masking:
+        if self.lneed_masking:
             lblocks = self._upcast_blocks(lblocks)
 
-        if self._may_need_upcasting(rblocks) and self.rneed_masking:
+        if self.rneed_masking:
             rblocks = self._upcast_blocks(rblocks)
 
         left_blockmap = dict((type(blk), blk) for blk in lblocks)
@@ -1001,7 +1001,12 @@ class _JoinOperation(object):
         return left_blockmap, right_blockmap
 
     def _reindex_block(self, block, side='left', copy=True):
-        indexer = self.lindexer if side == 'left' else self.rindexer
+        if side == 'left':
+            indexer = self.lindexer
+            mask, need_masking = self.lmask_info
+        else:
+            indexer = self.rindexer
+            mask, need_masking = self.rmask_info
 
         # still some inefficiency here for bool/int64 because in the case where
         # no masking is needed, take_fast will recompute the mask
@@ -1009,16 +1014,18 @@ class _JoinOperation(object):
         if indexer is None and copy:
             result = block.copy()
         else:
-            result = block.reindex_axis(indexer, None, False, axis=self.axis)
+            result = block.reindex_axis(indexer, mask, need_masking,
+                                        axis=self.axis)
 
         result.ref_items = self.result_items
         return result
 
     @cache_readonly
     def lmask_info(self):
-        if self.lindexer is None:
+        if (self.lindexer is None or
+            not self._may_need_upcasting(self.left.blocks)):
             lmask = None
-            lneed_masking = None
+            lneed_masking = False
         else:
             lmask = self.lindexer == -1
             lneed_masking = lmask.any()
@@ -1027,9 +1034,10 @@ class _JoinOperation(object):
 
     @cache_readonly
     def rmask_info(self):
-        if self.rindexer is None:
+        if (self.rindexer is None or
+            not self._may_need_upcasting(self.right.blocks)):
             rmask = None
-            rneed_masking = None
+            rneed_masking = False
         else:
             rmask = self.rindexer == -1
             rneed_masking = rmask.any()
@@ -1040,18 +1048,10 @@ class _JoinOperation(object):
     def lneed_masking(self):
         return self.lmask_info[1]
 
-    @property
-    def lmask(self):
-        return self.lmask_info[0]
-
     @property
     def rneed_masking(self):
         return self.rmask_info[1]
 
-    @property
-    def rmask(self):
-        return self.rmask_info[0]
-
     @staticmethod
     def _may_need_upcasting(blocks):
         for block in blocks:
@@ -1097,12 +1097,12 @@ class _JoinOperation(object):
         return make_block(out, new_items, self.result_items)
 
     @staticmethod
-    def _upcast_blocks(blocks, need_masking=True):
+    def _upcast_blocks(blocks):
         """
         Upcast and consolidate if necessary
         """
-        if not need_masking:
-            return blocks
+        # if not need_masking:
+        #     return blocks
 
         new_blocks = []
         for block in blocks:
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 06795d5ca..3f2ebfc6e 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -700,6 +700,23 @@ class SafeForSparse(object):
 
         self.assertRaises(Exception, f.join, f2, how='foo')
 
+    def test_join_index_more(self):
+        af = self.frame.ix[:, ['A', 'B']]
+        bf = self.frame.ix[::2, ['C', 'D']]
+
+        expected = af.copy()
+        expected['C'] = self.frame['C'][::2]
+        expected['D'] = self.frame['D'][::2]
+
+        result = af.join(bf)
+        assert_frame_equal(result, expected)
+
+        result = af.join(bf, how='right')
+        assert_frame_equal(result, expected[::2])
+
+        result = bf.join(af, how='right')
+        assert_frame_equal(result, expected.ix[:, result.columns])
+
     def test_join_index_series(self):
         df = self.frame.copy()
         s = df.pop(self.frame.columns[-1])
@@ -1582,7 +1599,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         lines = open(pth).readlines()
         self.assert_(lines[1].split(',')[2] == '999')
         os.remove(pth)
-    
+
     def test_to_csv_withcommas(self):
         "Commas inside fields should be correctly escaped when saving as CSV."
         path = '__tmp__'
@@ -1590,7 +1607,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         df.to_csv(path)
         df2 = DataFrame.from_csv(path)
         assert_frame_equal(df2, df)
-        
+
         os.remove(path)
 
     def test_info(self):
