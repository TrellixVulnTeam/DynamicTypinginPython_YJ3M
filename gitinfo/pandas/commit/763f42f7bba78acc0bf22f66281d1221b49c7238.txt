commit 763f42f7bba78acc0bf22f66281d1221b49c7238
Author: Jeff Reback <jeff@reback.net>
Date:   Fri Feb 17 09:51:46 2017 -0500

    TST: remove yielding tests from test_msgpacks.py (#15427)

diff --git a/pandas/tests/io/test_packers.py b/pandas/tests/io/test_packers.py
index 911cd8164..097c03937 100644
--- a/pandas/tests/io/test_packers.py
+++ b/pandas/tests/io/test_packers.py
@@ -41,6 +41,22 @@ else:
     _ZLIB_INSTALLED = True
 
 
+@pytest.fixture(scope='module')
+def current_packers_data():
+    # our current version packers data
+    from pandas.tests.io.generate_legacy_storage_files import (
+        create_msgpack_data)
+    return create_msgpack_data()
+
+
+@pytest.fixture(scope='module')
+def all_packers_data():
+    # our all of our current version packers data
+    from pandas.tests.io.generate_legacy_storage_files import (
+        create_data)
+    return create_data()
+
+
 def check_arbitrary(a, b):
 
     if isinstance(a, (list, tuple)) and isinstance(b, (list, tuple)):
@@ -778,7 +794,16 @@ class TestEncoding(TestPackers):
             assert_frame_equal(result, frame)
 
 
-class TestMsgpack():
+def legacy_packers_versions():
+    # yield the packers versions
+    path = tm.get_data_path('legacy_msgpack')
+    for v in os.listdir(path):
+        p = os.path.join(path, v)
+        if os.path.isdir(p):
+            yield v
+
+
+class TestMsgpack(object):
     """
     How to add msgpack tests:
 
@@ -788,48 +813,38 @@ TestPackers
     $ python generate_legacy_storage_files.py <output_dir> msgpack
 
     3. Move the created pickle to "data/legacy_msgpack/<version>" directory.
-
-    NOTE: TestMsgpack can't be a subclass of tm.Testcase to use test generator.
-    http://stackoverflow.com/questions/6689537/nose-test-generators-inside-class
     """
 
-    @classmethod
-    def setup_class(cls):
-        from pandas.tests.io.generate_legacy_storage_files import (
-            create_msgpack_data, create_data)
-        cls.data = create_msgpack_data()
-        cls.all_data = create_data()
-        cls.path = u('__%s__.msgpack' % tm.rands(10))
-        cls.minimum_structure = {'series': ['float', 'int', 'mixed',
-                                            'ts', 'mi', 'dup'],
-                                 'frame': ['float', 'int', 'mixed', 'mi'],
-                                 'panel': ['float'],
-                                 'index': ['int', 'date', 'period'],
-                                 'mi': ['reg2']}
-
-    def check_min_structure(self, data):
+    minimum_structure = {'series': ['float', 'int', 'mixed',
+                                    'ts', 'mi', 'dup'],
+                         'frame': ['float', 'int', 'mixed', 'mi'],
+                         'panel': ['float'],
+                         'index': ['int', 'date', 'period'],
+                         'mi': ['reg2']}
+
+    def check_min_structure(self, data, version):
         for typ, v in self.minimum_structure.items():
             assert typ in data, '"{0}" not found in unpacked data'.format(typ)
             for kind in v:
                 msg = '"{0}" not found in data["{1}"]'.format(kind, typ)
                 assert kind in data[typ], msg
 
-    def compare(self, vf, version):
+    def compare(self, current_data, all_data, vf, version):
         # GH12277 encoding default used to be latin-1, now utf-8
         if LooseVersion(version) < '0.18.0':
             data = read_msgpack(vf, encoding='latin-1')
         else:
             data = read_msgpack(vf)
-        self.check_min_structure(data)
+        self.check_min_structure(data, version)
         for typ, dv in data.items():
-            assert typ in self.all_data, ('unpacked data contains '
-                                          'extra key "{0}"'
-                                          .format(typ))
+            assert typ in all_data, ('unpacked data contains '
+                                     'extra key "{0}"'
+                                     .format(typ))
             for dt, result in dv.items():
-                assert dt in self.all_data[typ], ('data["{0}"] contains extra '
-                                                  'key "{1}"'.format(typ, dt))
+                assert dt in current_data[typ], ('data["{0}"] contains extra '
+                                                 'key "{1}"'.format(typ, dt))
                 try:
-                    expected = self.data[typ][dt]
+                    expected = current_data[typ][dt]
                 except KeyError:
                     continue
 
@@ -862,9 +877,11 @@ TestPackers
         else:
             tm.assert_frame_equal(result, expected)
 
-    def read_msgpacks(self, version):
+    @pytest.mark.parametrize('version', legacy_packers_versions())
+    def test_msgpacks_legacy(self, current_packers_data, all_packers_data,
+                             version):
 
-        pth = tm.get_data_path('legacy_msgpack/{0}'.format(str(version)))
+        pth = tm.get_data_path('legacy_msgpack/{0}'.format(version))
         n = 0
         for f in os.listdir(pth):
             # GH12142 0.17 files packed in P2 can't be read in P3
@@ -873,19 +890,10 @@ TestPackers
                 continue
             vf = os.path.join(pth, f)
             try:
-                self.compare(vf, version)
+                self.compare(current_packers_data, all_packers_data,
+                             vf, version)
             except ImportError:
                 # blosc not installed
                 continue
             n += 1
         assert n > 0, 'Msgpack files are not tested'
-
-    def test_msgpack(self):
-        msgpack_path = tm.get_data_path('legacy_msgpack')
-        n = 0
-        for v in os.listdir(msgpack_path):
-            pth = os.path.join(msgpack_path, v)
-            if os.path.isdir(pth):
-                yield self.read_msgpacks, v
-            n += 1
-        assert n > 0, 'Msgpack files are not tested'
diff --git a/pandas/tests/io/test_pickle.py b/pandas/tests/io/test_pickle.py
index 1e3816c15..c736ec829 100644
--- a/pandas/tests/io/test_pickle.py
+++ b/pandas/tests/io/test_pickle.py
@@ -187,10 +187,10 @@ def compare_sp_frame_float(result, expected, typ, version):
 # ---------------------
 def legacy_pickle_versions():
     # yield the pickle versions
-    pickle_path = tm.get_data_path('legacy_pickle')
-    for v in os.listdir(pickle_path):
-        pth = os.path.join(pickle_path, v)
-        if os.path.isdir(pth):
+    path = tm.get_data_path('legacy_pickle')
+    for v in os.listdir(path):
+        p = os.path.join(path, v)
+        if os.path.isdir(p):
             yield v
 
 
