commit f8a4925189e11a3aefdaefa3e3df7e377e40172f
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Feb 18 14:40:27 2011 -0500

    fillna function and warnings in fill(), misc unit tests and things

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 23dee3d26..5c30083c8 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -5,6 +5,7 @@ from cStringIO import StringIO
 from datetime import datetime
 import operator
 import sys
+import warnings
 
 from numpy import NaN
 import numpy as np
@@ -1051,6 +1052,13 @@ class DataFrame(Picklable, Groupable):
         return self.reindex(self.index[theCount >= minObs])
 
     def fill(self, value=None, method='pad'):
+        warnings.warn("fill is being replaced by fillna, and the fill function "
+                      "behavior will disappear in the next release: please "
+                      "modify your code accordingly",
+                      DeprecationWarning)
+        return self.fillna(value=value, method=method)
+
+    def fillna(self, value=None, method='pad'):
         """
         Fill NaN values using the specified method.
 
@@ -1177,7 +1185,6 @@ class DataFrame(Picklable, Groupable):
         """
         # TODO: remove this on next release
         if fillMethod is not None: # pragma: no cover
-            import warnings
             warnings.warn("'fillMethod' is deprecated. Use 'method' instead",
                           DeprecationWarning)
 
@@ -1755,7 +1762,8 @@ class DataFrame(Picklable, Groupable):
 
         return self._constructor(result_series, index=join_index)
 
-    def plot(self, kind='line', **kwds): # pragma: no cover
+    def plot(self, kind='line', subplots=False, sharex=True, sharey=False,
+             **kwds): # pragma: no cover
         """
         Plot the DataFrame's series with the index on the x-axis using
         matplotlib / pylab.
@@ -1772,10 +1780,24 @@ class DataFrame(Picklable, Groupable):
         This method doesn't make much sense for cross-sections,
         and will error.
         """
-        from pylab import plot
+        import matplotlib.pyplot as plt
 
-        for col in _try_sort(self.columns):
-            plot(self.index, self[col].values, label=col, **kwds)
+        if subplots:
+            _, axes = plt.subplots(nrows=len(self.columns),
+                                   sharex=sharex, sharey=sharey)
+        else:
+            fig = plt.figure()
+            ax = fig.add_subplot(111)
+
+        for i, col in enumerate(_try_sort(self.columns)):
+            if subplots:
+                ax = axes[i]
+                ax.plot(self.index, self[col].values, 'k', label=col,
+                        **kwds)
+                ax.legend(loc='best')
+            else:
+                ax.plot(self.index, self[col].values, label=col,
+                        **kwds)
 
     def _get_agg_axis(self, axis_num):
         if axis_num == 0:
@@ -2034,7 +2056,7 @@ class DataFrame(Picklable, Groupable):
             med = [f(self[col].values) for col in self.columns]
             return Series(med, index=self.columns)
         elif axis == 1:
-            med = [f(self.getXS(k).values) for k in self.index]
+            med = [f(self.xs(k).values) for k in self.index]
             return Series(med, index=self.index)
         else:
             raise Exception('Must have 0<= axis <= 1')
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 702307430..8a1968d29 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -83,7 +83,7 @@ class Index(np.ndarray):
     def __iter__(self):
         return iter(self.view(np.ndarray))
 
-    def __setstate__(self,state):
+    def __setstate__(self, state):
         """Necessary for making this object picklable"""
         np.ndarray.__setstate__(self, state)
         self._cache_indexMap = _tseries.map_indices(self)
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index 5abf1ddb2..a0da52966 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -986,7 +986,7 @@ class DataMatrix(DataFrame):
         np.putmask(values, -np.isfinite(values), -np.inf)
         return Series(values.max(axis), index=self._get_agg_axis(axis))
 
-    def fill(self, value=None, method='pad'):
+    def fillna(self, value=None, method='pad'):
         """
         Fill NaN values using the specified method.
 
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 542087583..36be59e7f 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -1,13 +1,11 @@
 """
 Contains data structures designed for manipulating panel (3-dimensional) data
 """
-# pylint: disable=E1103
-# pylint: disable=W0231
-# pylint: disable=W0212
-# pylint: disable=W0621
+# pylint: disable=E1103,W0231,W0212,W0621
 
 import operator
 import sys
+import warnings
 
 import numpy as np
 
@@ -475,6 +473,13 @@ class WidePanel(Panel):
                          self.minor_axis)
 
     def fill(self, value=None, method='pad'):
+        warnings.warn("fill is being replaced by fillna, and the fill function "
+                      "behavior will disappear in the next release: please "
+                      "modify your code accordingly",
+                      DeprecationWarning)
+        return self.fillna(value=value, method=method)
+
+    def fillna(self, value=None, method='pad'):
         """
         Fill NaN values using the specified method.
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 9c0815287..dcefafd31 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -7,6 +7,7 @@ Data structure for 1-dimensional cross-sectional and time series data
 
 import itertools
 import sys
+import warnings
 
 from numpy import NaN, ndarray
 import numpy as np
@@ -806,7 +807,6 @@ class Series(np.ndarray, Picklable, Groupable):
         -------
         reindexed : Series
         """
-        import warnings
         if fillMethod is not None: # pragma: no cover
             warnings.warn("'fillMethod' is deprecated. Use 'method' instead",
                           DeprecationWarning)
@@ -865,6 +865,13 @@ class Series(np.ndarray, Picklable, Groupable):
         return self.reindex(other.index, method=method)
 
     def fill(self, value=None, method='pad'):
+        warnings.warn("fill is being replaced by fillna, and the fill function "
+                      "behavior will disappear in the next release: please "
+                      "modify your code accordingly",
+                      DeprecationWarning)
+        return self.fillna(value=value, method=method)
+
+    def fillna(self, value=None, method='pad'):
         """
         Fill NaN values using the specified method.
 
diff --git a/pandas/core/tests/test_panel.py b/pandas/core/tests/test_panel.py
index 0df17ce63..fb918de36 100644
--- a/pandas/core/tests/test_panel.py
+++ b/pandas/core/tests/test_panel.py
@@ -1,3 +1,6 @@
+# pylint: disable=W0612
+
+
 import os
 import operator
 import unittest
@@ -16,6 +19,7 @@ import pandas.core.panel as panelm
 import pandas.util.testing as common
 
 class PanelTests(object):
+    panel = None
 
     def test_iter(self):
         common.equalContents(list(self.panel), self.panel.items)
@@ -337,6 +341,11 @@ class TestWidePanel(unittest.TestCase, PanelTests):
 
         # reindex_like
 
+        smaller = self.panel.reindex(items=self.panel.items[:-1],
+                                     major=self.panel.major_axis[:-1],
+                                     minor=self.panel.minor_axis[:-1])
+        smaller_like = self.panel.reindex_like(smaller)
+        assert_panel_equal(smaller, smaller_like)
 
     def test_fill(self):
         filled = self.panel.fill(0)
@@ -384,8 +393,8 @@ class TestWidePanel(unittest.TestCase, PanelTests):
         result = self.panel.add(self.panel)
         assert_panel_equal(result, self.panel * 2)
 
-        long = self.panel.toLong(filter_observations=False)
-        result = self.panel.add(long)
+        lng = self.panel.toLong(filter_observations=False)
+        result = self.panel.add(lng)
         assert_panel_equal(result, self.panel * 2)
 
     def test_operators(self):
