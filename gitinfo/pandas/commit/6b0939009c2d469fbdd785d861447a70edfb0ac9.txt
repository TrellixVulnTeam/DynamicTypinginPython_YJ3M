commit 6b0939009c2d469fbdd785d861447a70edfb0ac9
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Nov 9 13:05:32 2012 -0500

    ENH: add pow/rpow to DataFrame. close #2190

diff --git a/RELEASE.rst b/RELEASE.rst
index bd3af90cf..fb5b1173f 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -33,6 +33,7 @@ pandas 0.9.1
   - New `top` and `bottom` options for handling NAs in rank (#1508, #2159)
   - Add `where` and `mask` functions to DataFrame (#2109, #2151)
   - Add `at_time` and `between_time` functions to DataFrame (#2149)
+  - Add flexible `pow` and `rpow` methods to DataFrame (#2190)
 
 **API Changes**
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 9f36de1fc..31c1a09f4 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -676,11 +676,13 @@ class DataFrame(NDFrame):
     mul = _arith_method(operator.mul, 'multiply')
     sub = _arith_method(operator.sub, 'subtract')
     div = divide = _arith_method(lambda x, y: x / y, 'divide')
+    pow = _arith_method(operator.pow, 'pow')
 
     radd = _arith_method(_radd_compat, 'radd')
     rmul = _arith_method(operator.mul, 'rmultiply')
     rsub = _arith_method(lambda x, y: y - x, 'rsubtract')
     rdiv = _arith_method(lambda x, y: y / x, 'rdivide')
+    rpow = _arith_method(lambda x, y: y ** x, 'rpow')
 
     __add__ = _arith_method(operator.add, '__add__', default_axis=None)
     __sub__ = _arith_method(operator.sub, '__sub__', default_axis=None)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 8af7e991d..0b36e8d39 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1316,7 +1316,7 @@ class CheckIndexing(object):
         df.index=l
 
         try:
-            print df
+            repr(df)
         except Exception,e:
             self.assertNotEqual(type(e),UnboundLocalError)
 
@@ -3074,15 +3074,25 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         self.assert_(index == frame.index[-6])
 
     def test_arith_flex_frame(self):
-        res_add = self.frame.add(self.frame)
-        res_sub = self.frame.sub(self.frame)
-        res_mul = self.frame.mul(self.frame)
-        res_div = self.frame.div(2 * self.frame)
-
-        assert_frame_equal(res_add, self.frame + self.frame)
-        assert_frame_equal(res_sub, self.frame - self.frame)
-        assert_frame_equal(res_mul, self.frame * self.frame)
-        assert_frame_equal(res_div, self.frame / (2 * self.frame))
+        ops = ['add', 'sub', 'mul', 'div', 'pow']
+        aliases = {'div': 'truediv'}
+
+        for op in ops:
+            alias = aliases.get(op, op)
+            f = getattr(operator, alias)
+            result = getattr(self.frame, op)(2 * self.frame)
+            exp = f(self.frame, 2 * self.frame)
+            assert_frame_equal(result, exp)
+
+        # res_add = self.frame.add(self.frame)
+        # res_sub = self.frame.sub(self.frame)
+        # res_mul = self.frame.mul(self.frame)
+        # res_div = self.frame.div(2 * self.frame)
+
+        # assert_frame_equal(res_add, self.frame + self.frame)
+        # assert_frame_equal(res_sub, self.frame - self.frame)
+        # assert_frame_equal(res_mul, self.frame * self.frame)
+        # assert_frame_equal(res_div, self.frame / (2 * self.frame))
 
         const_add = self.frame.add(1)
         assert_frame_equal(const_add, self.frame + 1)
