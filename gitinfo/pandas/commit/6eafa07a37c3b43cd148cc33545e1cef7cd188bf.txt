commit 6eafa07a37c3b43cd148cc33545e1cef7cd188bf
Author: Adam Klein <adamklein@gmail.com>
Date:   Thu Feb 23 14:52:54 2012 -0500

    ENH: add new izip-based row-iterator, update release and docs (close #818)

diff --git a/RELEASE.rst b/RELEASE.rst
index 7179a2e6b..a637ec2af 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -31,6 +31,8 @@ pandas 0.7.1
 
   - Add ``to_clipboard`` function to pandas namespace for writing objects to
     the system clipboard (#774)
+  - Add ``itertuples`` method to Dataframe for iterating through the rows of a
+    dataframe as tuples (#818)
 
 **Bug fixes**
 
@@ -38,6 +40,9 @@ pandas 0.7.1
     DataFrame (#790)
   - Appending length-0 DataFrame with new columns would not result in those new
     columns being part of the resulting concatenated DataFrame (#782)
+  - Fixed groupby corner case when passing dictionary grouper and as_index is
+    False (#819)
+  - Fixed bug whereby bool array sometimes had object dtype (#820)
 
 pandas 0.7.0
 ============
diff --git a/doc/source/basics.rst b/doc/source/basics.rst
index 38b498ef6..180e9b930 100644
--- a/doc/source/basics.rst
+++ b/doc/source/basics.rst
@@ -759,6 +759,19 @@ For instance, a contrived way to transpose the dataframe would be:
    df2_t = DataFrame(dict((idx,values) for idx, values in df2.iterrows()))
    print df2_t
 
+itertuples
+~~~~~~~~~~
+
+This method will return an iterator yielding a tuple for each row in the
+DataFrame. The first element of the tuple will be the row's corresponding index
+value, while the remaining values are the row values proper.
+
+For instance,
+
+.. ipython:: python
+
+   for r in df2.itertuples(): print r
+
 .. _basics.sorting:
 
 Sorting by index and value
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index cb523bedb..ec9bbec43 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -25,7 +25,7 @@ import numpy as np
 import numpy.ma as ma
 
 from pandas.core.common import (isnull, notnull, PandasError, _try_sort,
-                                _default_index, _stringify, csv_encode)
+                                _default_index, _stringify)
 from pandas.core.daterange import DateRange
 from pandas.core.generic import NDFrame
 from pandas.core.index import Index, MultiIndex, NULL_INDEX, _ensure_index
@@ -497,6 +497,15 @@ class DataFrame(NDFrame):
             s.name = k
             yield k, s
 
+    def itertuples(self):
+        """
+        Iterate over rows of DataFrame as tuples, with index value
+        as first element of the tuple
+        """
+        series = [self[col] for col in self.columns]
+        series.insert(0, self.index)
+        return izip(*series)
+
     iterkv = iteritems
     if py3compat.PY3:  # pragma: no cover
         items = iteritems
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 98dba8045..a20318718 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1928,6 +1928,13 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
             exp = self.mixed_frame.xs(self.mixed_frame.index[i])
             assert_series_equal(v, exp)
 
+    def test_itertuples(self):
+        for i, tup in enumerate(self.frame.itertuples()):
+            s = Series(tup[1:])
+            s.name = tup[0]
+            expected = self.frame.ix[i,:].reset_index(drop=True)
+            assert_series_equal(s, expected)
+
     def test_len(self):
         self.assertEqual(len(self.frame), len(self.frame.index))
 
