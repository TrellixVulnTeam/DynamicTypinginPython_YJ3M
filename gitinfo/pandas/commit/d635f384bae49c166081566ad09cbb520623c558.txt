commit d635f384bae49c166081566ad09cbb520623c558
Author: Chang She <changshe@gmail.com>
Date:   Mon Apr 8 12:13:22 2013 -0400

    BUG: suppress error raise by nonnumeric columns when plotting DataFrame #3108

diff --git a/pandas/tests/test_graphics.py b/pandas/tests/test_graphics.py
index f18e862a3..92f836dfe 100644
--- a/pandas/tests/test_graphics.py
+++ b/pandas/tests/test_graphics.py
@@ -234,6 +234,14 @@ class TestDataFramePlots(unittest.TestCase):
                        index=index)
         _check_plot_works(df.plot, title=u'\u03A3')
 
+    @slow
+    def test_nonnumeric_exclude(self):
+        import matplotlib.pyplot as plt
+        plt.close('all')
+
+        ax = DataFrame({'A': ["x", "y", "z"], 'B': [1,2,3]}).plot() # it works
+        self.assert_(len(ax.get_lines()) == 1) #B was plotted
+
     @slow
     def test_label(self):
         import matplotlib.pyplot as plt
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index fc8964925..478b19ef0 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -1170,17 +1170,22 @@ class LinePlot(MPLPlot):
                 else:
                     args = (ax, x, y, style)
 
-                newline = plotf(*args, **kwds)[0]
-                lines.append(newline)
-                leg_label = label
-                if self.mark_right and self.on_right(i):
-                    leg_label += ' (right)'
-                labels.append(leg_label)
-                ax.grid(self.grid)
-
-                if self._is_datetype():
-                    left, right = _get_xlim(lines)
-                    ax.set_xlim(left, right)
+                try:
+                    newline = plotf(*args, **kwds)[0]
+                    lines.append(newline)
+                    leg_label = label
+                    if self.mark_right and self.on_right(i):
+                        leg_label += ' (right)'
+                    labels.append(leg_label)
+                    ax.grid(self.grid)
+
+                    if self._is_datetype():
+                        left, right = _get_xlim(lines)
+                        ax.set_xlim(left, right)
+                except AttributeError as inst: # non-numeric
+                    msg = ('Unable to plot data %s vs index %s,\n'
+                           'error was: %s' % (str(y), str(x), str(inst)))
+                    print msg
 
             self._make_legend(lines, labels)
 
@@ -1198,6 +1203,19 @@ class LinePlot(MPLPlot):
                 return label + ' (right)'
             return label
 
+        def _plot(data, col_num, ax, label, style, **kwds):
+            try:
+                newlines = tsplot(data, plotf, ax=ax, label=label,
+                                  style=style, **kwds)
+                ax.grid(self.grid)
+                lines.append(newlines[0])
+                leg_label = to_leg_label(label, col_num)
+                labels.append(leg_label)
+            except AttributeError as inst: #non-numeric
+                msg = ('Unable to plot %s,\n'
+                       'error was: %s' % (str(data), str(inst)))
+                print msg
+
         if isinstance(data, Series):
             ax = self._get_ax(0)  # self.axes[0]
             style = self.style or ''
@@ -1205,12 +1223,7 @@ class LinePlot(MPLPlot):
             kwds = kwargs.copy()
             self._maybe_add_color(colors, kwds, style, 0)
 
-            newlines = tsplot(data, plotf, ax=ax, label=label,
-                              style=self.style, **kwds)
-            ax.grid(self.grid)
-            lines.append(newlines[0])
-            leg_label = to_leg_label(label, 0)
-            labels.append(leg_label)
+            _plot(data, 0, ax, label, self.style, **kwds)
         else:
             for i, col in enumerate(data.columns):
                 label = com.pprint_thing(col)
@@ -1220,13 +1233,7 @@ class LinePlot(MPLPlot):
 
                 self._maybe_add_color(colors, kwds, style, i)
 
-                newlines = tsplot(data[col], plotf, ax=ax, label=label,
-                                  style=style, **kwds)
-
-                lines.append(newlines[0])
-                leg_label = to_leg_label(label, i)
-                labels.append(leg_label)
-                ax.grid(self.grid)
+                _plot(data[col], i, ax, label, style, **kwds)
 
         self._make_legend(lines, labels)
 
diff --git a/pandas/tseries/tests/test_plotting.py b/pandas/tseries/tests/test_plotting.py
index 968883ca6..9c714f6ee 100644
--- a/pandas/tseries/tests/test_plotting.py
+++ b/pandas/tseries/tests/test_plotting.py
@@ -80,6 +80,20 @@ class TestTSPlot(unittest.TestCase):
         df = DataFrame(np.random.randn(len(idx), 3), index=idx)
         df.plot()
 
+    @slow
+    def test_nonnumeric_exclude(self):
+        import matplotlib.pyplot as plt
+        plt.close('all')
+
+        idx = date_range('1/1/1987', freq='A', periods=3)
+        df = DataFrame({'A': ["x", "y", "z"], 'B': [1,2,3]}, idx)
+        ax = df.plot() # it works
+        self.assert_(len(ax.get_lines()) == 1) #B was plotted
+
+        plt.close('all')
+        ax = df['A'].plot() # it works
+        self.assert_(len(ax.get_lines()) == 0)
+
     @slow
     def test_tsplot(self):
         from pandas.tseries.plotting import tsplot
