commit e2a07cb5082e8f89f4bbc6fce64dab05dce46606
Author: jreback <jeff@reback.net>
Date:   Thu Feb 28 14:33:39 2013 -0500

    BUG: in-place conversion of integer series to float (on putmasking), GH #2746

diff --git a/RELEASE.rst b/RELEASE.rst
index e41731131..47e91ef01 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -120,9 +120,12 @@ pandas 0.11.0
     - Support null checking on timedelta64, representing (and formatting) with NaT
     - Support setitem with np.nan value, converts to NaT
 
+  - Bug on in-place putmasking on an ``integer`` series that needs to be converted to ``float`` (GH2746_)
+
 .. _GH622: https://github.com/pydata/pandas/issues/622
 .. _GH797: https://github.com/pydata/pandas/issues/797
 .. _GH2681: https://github.com/pydata/pandas/issues/2681
+.. _GH2746: https://github.com/pydata/pandas/issues/2746
 .. _GH2747: https://github.com/pydata/pandas/issues/2747
 .. _GH2751: https://github.com/pydata/pandas/issues/2751
 .. _GH2776: https://github.com/pydata/pandas/issues/2776
diff --git a/pandas/core/common.py b/pandas/core/common.py
index 4e6215969..4479dce43 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -722,6 +722,20 @@ def _maybe_promote(dtype, fill_value=np.nan):
     return dtype, fill_value
 
 
+def _maybe_upcast_putmask(result, mask, other):
+    """ a safe version of put mask that (potentially upcasts the result
+        return the result and a changed flag """
+    try:
+        np.putmask(result, mask, other)
+    except:
+        # our type is wrong here, need to upcast
+        if (-mask).any():
+            result, fill_value = _maybe_upcast(result, copy=True)
+            np.putmask(result, mask, other)
+            return result, True
+
+    return result, False
+
 def _maybe_upcast(values, fill_value=np.nan, copy=False):
     """ provide explicty type promotion and coercion
         if copy == True, then a copy is created even if no upcast is required """
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index eb3dbfd01..c0449faf4 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -201,7 +201,7 @@ def _arith_method(op, name, default_axis='columns'):
                 mask = notnull(xrav)
                 result[mask] = op(xrav[mask], y)
 
-            np.putmask(result, -mask, NA)
+            result, changed = com._maybe_upcast_putmask(result,-mask,np.nan)
             result = result.reshape(x.shape)
 
         return result
diff --git a/pandas/core/series.py b/pandas/core/series.py
index f34028482..54e981d1d 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -70,7 +70,8 @@ def _arith_method(op, name):
             else:
                 mask = notnull(x)
                 result[mask] = op(x[mask], y)
-            np.putmask(result, -mask, pa.NA)
+
+            result, changed = com._maybe_upcast_putmask(result,-mask,pa.NA)
 
         return result
 
@@ -680,7 +681,13 @@ class Series(pa.Array, generic.PandasObject):
         if len(other) != len(ser):
             raise ValueError('Length of replacements must equal series length')
 
-        np.putmask(ser, ~cond, other)
+        result, changed = com._maybe_upcast_putmask(ser,~cond,other)
+        if changed:
+
+            # need to actually change ser here
+            if inplace:
+                ser.dtype = result.dtype
+                ser[:] = result
 
         return None if inplace else ser
 
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index fdaede9a2..865239380 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -2943,6 +2943,17 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         result = s.asof(s.index[0])
         self.assertEqual(result, s[0])
 
+    def test_cast_on_putmask(self):
+
+        # GH 2746
+
+        # need to upcast
+        s = Series([1,2],index=[1,2],dtype='int64')
+        s[[True, False]] = Series([0],index=[1],dtype='int64')
+        expected = Series([0,2],index=[1,2],dtype='float64')
+
+        assert_series_equal(s, expected)
+
     def test_astype_cast_nan_int(self):
         df = Series([1.0, 2.0, 3.0, np.nan])
         self.assertRaises(ValueError, df.astype, np.int64)
