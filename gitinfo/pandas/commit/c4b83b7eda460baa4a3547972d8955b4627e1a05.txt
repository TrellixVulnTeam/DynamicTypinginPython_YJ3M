commit c4b83b7eda460baa4a3547972d8955b4627e1a05
Author: Phillip Cloud <cpcloud@gmail.com>
Date:   Sun Oct 6 16:15:12 2013 -0400

    TST/ENH: add locale testing utils

diff --git a/ci/install.sh b/ci/install.sh
index fa3e5a487..f6ad18a95 100755
--- a/ci/install.sh
+++ b/ci/install.sh
@@ -57,6 +57,11 @@ time pip install $PIP_ARGS -r ci/requirements-${TRAVIS_PYTHON_VERSION}${JOB_TAG}
 time sudo apt-get install libatlas-base-dev gfortran
 
 
+# need to enable for locale testing
+time echo 'it_CH.UTF-8 UTF-8' | sudo tee -a /var/lib/locales/supported.d/it
+time sudo locale-gen
+
+
 # install gui for clipboard testing
 if [ -n "$GUI" ]; then
     echo "Using GUI clipboard: $GUI"
diff --git a/doc/source/release.rst b/doc/source/release.rst
index 7776ee1ef..4a25a98f2 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -578,6 +578,9 @@ Bug Fixes
   - Fix a bug with ``NDFrame.replace()`` which made replacement appear as
     though it was (incorrectly) using regular expressions (:issue:`5143`).
   - Fix better error message for to_datetime (:issue:`4928`)
+  - Made sure different locales are tested on travis-ci (:issue:`4918`). Also
+    adds a couple of utilities for getting locales and setting locales with a
+    context manager.
 
 pandas 0.12.0
 -------------
diff --git a/pandas/io/tests/test_data.py b/pandas/io/tests/test_data.py
index f647b217f..02598ba05 100644
--- a/pandas/io/tests/test_data.py
+++ b/pandas/io/tests/test_data.py
@@ -13,6 +13,7 @@ from pandas.io import data as web
 from pandas.io.data import DataReader, SymbolWarning
 from pandas.util.testing import (assert_series_equal, assert_produces_warning,
                                  network, assert_frame_equal)
+import pandas.util.testing as tm
 from numpy.testing import assert_array_equal
 
 
@@ -44,9 +45,9 @@ class TestGoogle(unittest.TestCase):
         start = datetime(2010, 1, 1)
         end = datetime(2013, 1, 27)
 
-        self.assertEquals(
-            web.DataReader("F", 'google', start, end)['Close'][-1],
-            13.68)
+        with tm.set_locale('en_US.UTF-8'):
+            panel = web.DataReader("F", 'google', start, end)
+            self.assertEquals(panel.Close[-1], 13.68)
 
         self.assertRaises(Exception, web.DataReader, "NON EXISTENT TICKER",
                           'google', start, end)
@@ -58,13 +59,15 @@ class TestGoogle(unittest.TestCase):
 
     @network
     def test_get_goog_volume(self):
-        df = web.get_data_google('GOOG')
+        with tm.set_locale('en_US.UTF-8'):
+            df = web.get_data_google('GOOG').sort_index()
         self.assertEqual(df.Volume.ix['OCT-08-2010'], 2863473)
 
     @network
     def test_get_multi1(self):
         sl = ['AAPL', 'AMZN', 'GOOG']
-        pan = web.get_data_google(sl, '2012')
+        with tm.set_locale('en_US.UTF-8'):
+            pan = web.get_data_google(sl, '2012')
 
         def testit():
             ts = pan.Close.GOOG.index[pan.Close.AAPL > pan.Close.GOOG]
@@ -79,8 +82,9 @@ class TestGoogle(unittest.TestCase):
     @network
     def test_get_multi2(self):
         with warnings.catch_warnings(record=True) as w:
-            pan = web.get_data_google(['GE', 'MSFT', 'INTC'], 'JAN-01-12',
-                                      'JAN-31-12')
+            with tm.set_locale('en_US.UTF-8'):
+                pan = web.get_data_google(['GE', 'MSFT', 'INTC'], 'JAN-01-12',
+                                        'JAN-31-12')
             result = pan.Close.ix['01-18-12']
             assert_n_failed_equals_n_null_columns(w, result)
 
diff --git a/pandas/tools/tests/test_util.py b/pandas/tools/tests/test_util.py
index 1888f2ede..99094d7f4 100644
--- a/pandas/tools/tests/test_util.py
+++ b/pandas/tools/tests/test_util.py
@@ -1,11 +1,20 @@
 import os
-import nose
+import locale
+import codecs
 import unittest
 
+import nose
+
 import numpy as np
 from numpy.testing import assert_equal
 
 from pandas.tools.util import cartesian_product
+from pandas.util.testing import get_locales, set_locale
+
+
+CURRENT_LOCALE = locale.getlocale()
+LOCALE_OVERRIDE = os.environ.get('LOCALE_OVERRIDE', None)
+
 
 class TestCartesianProduct(unittest.TestCase):
 
@@ -16,6 +25,36 @@ class TestCartesianProduct(unittest.TestCase):
                     np.array([ 1, 22,  1, 22,  1, 22])]
         assert_equal(result, expected)
 
+
+class TestLocaleUtils(unittest.TestCase):
+    def test_get_locales(self):
+        assert len(get_locales(prefix='en')) > 0
+
+    def test_get_locales_prefix(self):
+        with set_locale('en_US.UTF-8'):
+            assert len(get_locales(prefix='en')) > 0
+
+    def test_set_locale(self):
+        old_locale = CURRENT_LOCALE
+
+        if LOCALE_OVERRIDE is not None:
+            lang, enc = LOCALE_OVERRIDE.split('.')
+        else:
+            lang, enc = 'it_CH', 'UTF-8'
+
+        enc = codecs.lookup(enc).name
+        new_locale = lang, enc
+
+        with set_locale(new_locale) as normalized_locale:
+            new_lang, new_enc = normalized_locale.split('.')
+            new_enc = codecs.lookup(enc).name
+            normalized_locale = new_lang, new_enc
+            self.assertEqual(normalized_locale, new_locale)
+
+        current_locale = locale.getlocale()
+        self.assertEqual(current_locale, old_locale)
+
+
 if __name__ == '__main__':
     nose.runmodule(argv=[__file__, '-vvs', '-x', '--pdb', '--pdb-failure'],
                    exit=False)
diff --git a/pandas/tslib.pyx b/pandas/tslib.pyx
index 50733064f..c6c2b418f 100644
--- a/pandas/tslib.pyx
+++ b/pandas/tslib.pyx
@@ -2601,10 +2601,6 @@ cdef object _period_strftime(int64_t value, int freq, object fmt):
 
             result = result.replace(str_extra_fmts[i], repl)
 
-    # Py3?
-    #if not PyString_Check(result):
-        #result = str(result)
-
     if PY2:
        result = result.decode('utf-8', 'ignore')
 
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 946a4d94b..4787c8228 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -9,6 +9,8 @@ import tempfile
 import warnings
 import inspect
 import os
+import subprocess
+import locale
 
 from datetime import datetime
 from functools import wraps, partial
@@ -20,6 +22,7 @@ import numpy as np
 
 import nose
 
+import pandas as pd
 from pandas.core.common import isnull, _is_sequence
 import pandas.core.index as index
 import pandas.core.series as series
@@ -28,7 +31,7 @@ import pandas.core.panel as panel
 import pandas.core.panel4d as panel4d
 import pandas.compat as compat
 from pandas.compat import(
-    map, zip, range, unichr, lrange, lmap, lzip, u, callable, Counter,
+    filter, map, zip, range, unichr, lrange, lmap, lzip, u, callable, Counter,
     raise_with_traceback, httplib
 )
 
@@ -97,6 +100,172 @@ def mplskip(cls):
     return cls
 
 
+#------------------------------------------------------------------------------
+# locale utilities
+
+def check_output(*popenargs, **kwargs):  # shamelessly taken from Python 2.7 source
+    r"""Run command with arguments and return its output as a byte string.
+
+    If the exit code was non-zero it raises a CalledProcessError.  The
+    CalledProcessError object will have the return code in the returncode
+    attribute and output in the output attribute.
+
+    The arguments are the same as for the Popen constructor.  Example:
+
+    >>> check_output(["ls", "-l", "/dev/null"])
+    'crw-rw-rw- 1 root root 1, 3 Oct 18  2007 /dev/null\n'
+
+    The stdout argument is not allowed as it is used internally.
+    To capture standard error in the result, use stderr=STDOUT.
+
+    >>> check_output(["/bin/sh", "-c",
+    ...               "ls -l non_existent_file ; exit 0"],
+    ...              stderr=STDOUT)
+    'ls: non_existent_file: No such file or directory\n'
+    """
+    if 'stdout' in kwargs:
+        raise ValueError('stdout argument not allowed, it will be overridden.')
+    process = subprocess.Popen(stdout=subprocess.PIPE, *popenargs, **kwargs)
+    output, unused_err = process.communicate()
+    retcode = process.poll()
+    if retcode:
+        cmd = kwargs.get("args")
+        if cmd is None:
+            cmd = popenargs[0]
+        raise subprocess.CalledProcessError(retcode, cmd, output=output)
+    return output
+
+
+def _default_locale_getter():
+    try:
+        raw_locales = check_output(['locale -a'], shell=True)
+    except subprocess.CalledProcessError as e:
+        raise type(e)("%s, the 'locale -a' command cannot be foundon your "
+                      "system" % e)
+    return raw_locales
+
+
+def get_locales(prefix=None, normalize=True,
+                locale_getter=_default_locale_getter):
+    """Get all the locales that are available on the system.
+
+    Parameters
+    ----------
+    prefix : str
+        If not ``None`` then return only those locales with the prefix
+        provided. For example to get all English language locales (those that
+        start with ``"en"``), pass ``prefix="en"``.
+    normalize : bool
+        Call ``locale.normalize`` on the resulting list of available locales.
+        If ``True``, only locales that can be set without throwing an
+        ``Exception`` are returned.
+    locale_getter : callable
+        The function to use to retrieve the current locales. This should return
+        a string with each locale separated by a newline character.
+
+    Returns
+    -------
+    locales : list of strings
+        A list of locale strings that can be set with ``locale.setlocale()``.
+        For example::
+
+            locale.setlocale(locale.LC_ALL, locale_string)
+    """
+    raw_locales = locale_getter()
+
+    try:
+        raw_locales = str(raw_locales, encoding=pd.options.display.encoding)
+    except TypeError:
+        pass
+
+    if prefix is None:
+        return _valid_locales(raw_locales.splitlines(), normalize)
+
+    found = re.compile('%s.*' % prefix).findall(raw_locales)
+    return _valid_locales(found, normalize)
+
+
+@contextmanager
+def set_locale(new_locale, lc_var=locale.LC_ALL):
+    """Context manager for temporarily setting a locale.
+
+    Parameters
+    ----------
+    new_locale : str or tuple
+        A string of the form <language_country>.<encoding>. For example to set
+        the current locale to US English with a UTF8 encoding, you would pass
+        "en_US.UTF-8".
+
+    Notes
+    -----
+    This is useful when you want to run a particular block of code under a
+    particular locale, without globally setting the locale. This probably isn't
+    thread-safe.
+    """
+    current_locale = locale.getlocale()
+
+    try:
+        locale.setlocale(lc_var, new_locale)
+
+        try:
+            normalized_locale = locale.getlocale()
+        except ValueError:
+            yield new_locale
+        else:
+            if all(lc is not None for lc in normalized_locale):
+                yield '.'.join(normalized_locale)
+            else:
+                yield new_locale
+    finally:
+        locale.setlocale(lc_var, current_locale)
+
+
+def _can_set_locale(lc):
+    """Check to see if we can set a locale without throwing an exception.
+
+    Parameters
+    ----------
+    lc : str
+        The locale to attempt to set.
+
+    Returns
+    -------
+    isvalid : bool
+        Whether the passed locale can be set
+    """
+    try:
+        with set_locale(lc):
+            pass
+    except locale.Error:  # horrible name for a Exception subclass
+        return False
+    else:
+        return True
+
+
+def _valid_locales(locales, normalize):
+    """Return a list of normalized locales that do not throw an ``Exception``
+    when set.
+
+    Parameters
+    ----------
+    locales : str
+        A string where each locale is separated by a newline.
+    normalize : bool
+        Whether to call ``locale.normalize`` on each locale.
+
+    Returns
+    -------
+    valid_locales : list
+        A list of valid locales.
+    """
+    if normalize:
+        normalizer = lambda x: locale.normalize(x.strip())
+    else:
+        normalizer = lambda x: x.strip()
+
+    return list(filter(_can_set_locale, map(normalizer, locales)))
+
+
 #------------------------------------------------------------------------------
 # Console debugging tools
 
@@ -169,6 +338,7 @@ def assert_isinstance(obj, class_type_or_tuple):
         "Expected object to be of type %r, found %r instead" % (
             type(obj), class_type_or_tuple))
 
+
 def assert_equal(a, b, msg=""):
     """asserts that a equals b, like nose's assert_equal, but allows custom message to start.
     Passes a and b to format string as well. So you can use '{0}' and '{1}' to display a and b.
@@ -198,11 +368,11 @@ def assert_attr_equal(attr, left, right):
     right_attr = getattr(right, attr)
     assert_equal(left_attr,right_attr,"attr is not equal [{0}]" .format(attr))
 
+
 def isiterable(obj):
     return hasattr(obj, '__iter__')
 
 
-
 def assert_almost_equal(a, b, check_less_precise=False):
     if isinstance(a, dict) or isinstance(b, dict):
         return assert_dict_equal(a, b)
@@ -378,6 +548,7 @@ def assert_contains_all(iterable, dic):
     for k in iterable:
         assert k in dic, "Did not contain item: '%r'" % k
 
+
 def assert_copy(iter1, iter2, **eql_kwargs):
     """
     iter1, iter2: iterables that produce elements comparable with assert_almost_equal
@@ -412,6 +583,7 @@ def makeFloatIndex(k=10):
     values = sorted(np.random.random_sample(k)) - np.random.random_sample(1)
     return Index(values * (10 ** np.random.randint(0, 9)))
 
+
 def makeDateIndex(k=10):
     dt = datetime(2000, 1, 1)
     dr = bdate_range(dt, periods=k)
@@ -446,6 +618,7 @@ def getSeriesData():
     index = makeStringIndex(N)
     return dict((c, Series(randn(N), index=index)) for c in getCols(K))
 
+
 def makeTimeSeries(nper=None):
     if nper is None:
         nper = N
@@ -503,11 +676,13 @@ def makePanel(nper=None):
     data = dict((c, makeTimeDataFrame(nper)) for c in cols)
     return Panel.fromDict(data)
 
+
 def makePeriodPanel(nper=None):
     cols = ['Item' + c for c in string.ascii_uppercase[:K - 1]]
     data = dict((c, makePeriodFrame(nper)) for c in cols)
     return Panel.fromDict(data)
 
+
 def makePanel4D(nper=None):
     return Panel4D(dict(l1=makePanel(nper), l2=makePanel(nper),
                         l3=makePanel(nper)))
