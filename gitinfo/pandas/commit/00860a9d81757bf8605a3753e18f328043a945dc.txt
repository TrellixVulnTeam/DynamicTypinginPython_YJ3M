commit 00860a9d81757bf8605a3753e18f328043a945dc
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Oct 13 15:18:40 2012 -0400

    ENH: improve display of hierarchical columns in to_html

diff --git a/RELEASE.rst b/RELEASE.rst
index bef84c4b0..9dbcd5e13 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -22,6 +22,15 @@ Where to get it
 * Binary installers on PyPI: http://pypi.python.org/pypi/pandas
 * Documentation: http://pandas.pydata.org
 
+pandas 0.9.1
+============
+
+**Release date:** NOT YET RELEASED
+
+**Improvements to existing features**
+
+  - Improve HTML display of DataFrame objects with hierarchical columns
+
 pandas 0.9.0
 ============
 
diff --git a/pandas/core/format.py b/pandas/core/format.py
index 7125feeeb..3bc379220 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -18,10 +18,10 @@ import pandas.lib as lib
 import numpy as np
 
 docstring_to_string = """
-    Parameters
-    ----------
-    frame : DataFrame
-        object to render
+     Parameters
+     ----------
+     frame : DataFrame
+         object to render
     buf : StringIO-like, optional
         buffer to write to
     columns : sequence, optional
@@ -528,16 +528,43 @@ class HTMLFormatter(object):
         self.write('<thead>', indent)
         row = []
 
-        col_row = _column_header()
         indent += self.indent_delta
+
         if isinstance(self.columns, MultiIndex):
-            align = None
+            template = 'colspan="%d" halign="left"'
+
+            levels = self.columns.format(sparsify=True, adjoin=False,
+                                         names=False)
+            col_values = self.columns.values
+            level_lengths = _get_level_lengths(levels)
+
+            for lnum, (records, values) in enumerate(zip(level_lengths, levels)):
+                name = self.columns.names[lnum]
+                row = ['' if name is None else str(name)]
+
+                tags = {}
+                j = 1
+                for i, v in enumerate(values):
+                    if i in records:
+                        if records[i] > 1:
+                            tags[j] = template % records[i]
+                    else:
+                        continue
+                    j += 1
+                    row.append(v)
+
+                self.write_tr(row, indent, self.indent_delta, tags=tags,
+                              header=True)
         else:
+            col_row = _column_header()
             align = self.fmt.justify
-        self.write_tr(col_row, indent, self.indent_delta, header=True,
-                align=align)
+
+            self.write_tr(col_row, indent, self.indent_delta, header=True,
+                    align=align)
+
         if self.fmt.has_index_names:
-            row = self.frame.index.names + [''] * len(self.columns)
+            row = [x if x is not None else ''
+                   for x in self.frame.index.names] + [''] * len(self.columns)
             self.write_tr(row, indent, self.indent_delta, header=True)
 
         indent -= self.indent_delta
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index 4ea62d695..c08eb1437 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -190,7 +190,8 @@ class TestDataFrameFormatting(unittest.TestCase):
         df.to_html()
 
     def test_to_html_multiindex_sparsify(self):
-        index = pd.MultiIndex.from_arrays([[0, 0, 1, 1], [0, 1, 0, 1]])
+        index = pd.MultiIndex.from_arrays([[0, 0, 1, 1], [0, 1, 0, 1]],
+                                          names=['foo', None])
 
         df = DataFrame([[0, 1], [2, 3], [4, 5], [6, 7]], index=index)
 
@@ -203,6 +204,12 @@ class TestDataFrameFormatting(unittest.TestCase):
       <th>0</th>
       <th>1</th>
     </tr>
+    <tr>
+      <th>foo</th>
+      <th></th>
+      <th></th>
+      <th></th>
+    </tr>
   </thead>
   <tbody>
     <tr>
@@ -514,7 +521,7 @@ class TestDataFrameFormatting(unittest.TestCase):
         self.assert_('<th>B</th>' not in result)
 
     def test_to_html_multiindex(self):
-        columns = pandas.MultiIndex.from_tuples(zip(range(4),
+        columns = pandas.MultiIndex.from_tuples(zip(np.arange(2).repeat(2),
                                                     np.mod(range(4), 2)),
                                                 names=['CL0', 'CL1'])
         df = pandas.DataFrame([list('abcd'), list('efgh')], columns=columns)
@@ -522,20 +529,16 @@ class TestDataFrameFormatting(unittest.TestCase):
         expected = ('<table border="1" class="dataframe">\n'
                     '  <thead>\n'
                     '    <tr>\n'
-                    '      <th><table><tbody><tr><td>CL0</td></tr><tr>'
-                    '<td>CL1</td></tr></tbody></table></th>\n'
-                    '      <th><table align="left" style="text-align: left;">'
-                    '<tbody><tr><td>0</td></tr><tr><td>0</td></tr></tbody>'
-                    '</table></th>\n'
-                    '      <th><table align="left" style="text-align: left;">'
-                    '<tbody><tr><td>1</td></tr><tr><td>1</td></tr></tbody>'
-                    '</table></th>\n'
-                    '      <th><table align="left" style="text-align: left;">'
-                    '<tbody><tr><td>2</td></tr><tr><td>0</td></tr></tbody>'
-                    '</table></th>\n'
-                    '      <th><table align="left" style="text-align: left;">'
-                    '<tbody><tr><td>3</td></tr><tr><td>1</td></tr></tbody>'
-                    '</table></th>\n'
+                    '      <th>CL0</th>\n'
+                    '      <th colspan="2" halign="left">0</th>\n'
+                    '      <th colspan="2" halign="left">1</th>\n'
+                    '    </tr>\n'
+                    '    <tr>\n'
+                    '      <th>CL1</th>\n'
+                    '      <th>0</th>\n'
+                    '      <th>1</th>\n'
+                    '      <th>0</th>\n'
+                    '      <th>1</th>\n'
                     '    </tr>\n'
                     '  </thead>\n'
                     '  <tbody>\n'
@@ -567,18 +570,17 @@ class TestDataFrameFormatting(unittest.TestCase):
                     '  <thead>\n'
                     '    <tr>\n'
                     '      <th></th>\n'
-                    '      <th><table align="right" style="text-align:'
-                    ' right;"><tbody><tr><td>0</td></tr><tr><td>0</td></tr>'
-                    '</tbody></table></th>\n'
-                    '      <th><table align="right" style="text-align:'
-                    ' right;"><tbody><tr><td>1</td></tr><tr><td>1</td></tr>'
-                    '</tbody></table></th>\n'
-                    '      <th><table align="right" style="text-align:'
-                    ' right;"><tbody><tr><td>2</td></tr><tr><td>0</td></tr>'
-                    '</tbody></table></th>\n'
-                    '      <th><table align="right" style="text-align:'
-                    ' right;"><tbody><tr><td>3</td></tr><tr><td>1</td></tr>'
-                    '</tbody></table></th>\n'
+                    '      <th>0</th>\n'
+                    '      <th>1</th>\n'
+                    '      <th>2</th>\n'
+                    '      <th>3</th>\n'
+                    '    </tr>\n'
+                    '    <tr>\n'
+                    '      <th></th>\n'
+                    '      <th>0</th>\n'
+                    '      <th>1</th>\n'
+                    '      <th>0</th>\n'
+                    '      <th>1</th>\n'
                     '    </tr>\n'
                     '  </thead>\n'
                     '  <tbody>\n'
