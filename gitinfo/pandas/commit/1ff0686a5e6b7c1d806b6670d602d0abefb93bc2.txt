commit 1ff0686a5e6b7c1d806b6670d602d0abefb93bc2
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Jul 2 23:28:16 2011 -0400

    internals unit tests pass now

diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index e0d93129a..b079d6f23 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -294,6 +294,9 @@ class BlockManager(object):
             blocks.append(blk)
         self.blocks = blocks
 
+    def __len__(self):
+        return len(self.items)
+
     def __repr__(self):
         output = 'BlockManager'
         for i, ax in enumerate(self.axes):
@@ -467,7 +470,8 @@ class BlockManager(object):
         Set new item in-place. Does not consolidate. Adds new Block if not
         contained in the current set of items
         """
-        assert(value.ndim == self.ndim)
+        if value.ndim == self.ndim - 1:
+            value = value.reshape((1,) + value.shape)
         assert(value.shape[1:] == self.shape[1:])
         if item in self.items:
             i, block = self._find_block(item)
diff --git a/pandas/tests/test_internals.py b/pandas/tests/test_internals.py
index 5a42cf159..4eeee6400 100644
--- a/pandas/tests/test_internals.py
+++ b/pandas/tests/test_internals.py
@@ -11,8 +11,8 @@ from pandas.util.testing import (assert_almost_equal, assert_frame_equal, randn)
 def assert_block_equal(left, right):
     assert_almost_equal(left.values, right.values)
     assert(left.dtype == right.dtype)
-    assert(left.columns.equals(right.columns))
-    assert(left.ref_columns.equals(right.ref_columns))
+    assert(left.items.equals(right.items))
+    assert(left.ref_items.equals(right.ref_items))
 
 def get_float_mat(n, k):
     return np.repeat(np.atleast_2d(np.arange(k, dtype=float)), n, axis=0)
@@ -21,22 +21,22 @@ TEST_COLS = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
 N = 10
 
 def get_float_ex(cols=['a', 'c', 'e']):
-    floats = get_float_mat(N, 3)
-    return make_block(floats, cols, TEST_COLS)
+    floats = get_float_mat(N, 3).T
+    return make_block(floats, cols, TEST_COLS, 2)
 
 def get_obj_ex(cols=['b', 'd']):
     mat = np.empty((N, 2), dtype=object)
     mat[:, 0] = 'foo'
     mat[:, 1] = 'bar'
-    return make_block(mat, cols, TEST_COLS)
+    return make_block(mat.T, cols, TEST_COLS, 2)
 
 def get_bool_ex(cols=['f']):
     mat = np.ones((N, 1), dtype=bool)
-    return make_block(mat, cols, TEST_COLS)
+    return make_block(mat.T, cols, TEST_COLS, 2)
 
 def get_int_ex(cols=['g']):
     mat = randn(N, 1).astype(int)
-    return make_block(mat, cols, TEST_COLS)
+    return make_block(mat.T, cols, TEST_COLS, 2)
 
 class TestBlock(unittest.TestCase):
 
@@ -69,18 +69,18 @@ class TestBlock(unittest.TestCase):
         self.assert_(self.fblock.dtype == self.fblock.values.dtype)
 
     def test_merge(self):
-        avals = randn(10, 2)
-        bvals = randn(10, 2)
+        avals = randn(2, 10)
+        bvals = randn(2, 10)
 
         ref_cols = ['e', 'a', 'b', 'd', 'f']
 
-        ablock = make_block(avals, ['e', 'b'], ref_cols)
-        bblock = make_block(bvals, ['a', 'd'], ref_cols)
+        ablock = make_block(avals, ['e', 'b'], ref_cols, 2)
+        bblock = make_block(bvals, ['a', 'd'], ref_cols, 2)
         merged = ablock.merge(bblock)
-        exvals = np.hstack((avals, bvals))
+        exvals = np.vstack((avals, bvals))
         excols = ['e', 'b', 'a', 'd']
-        eblock = make_block(exvals, excols, ref_cols)
-        eblock = eblock.reindex_columns_from(ref_cols)
+        eblock = make_block(exvals, excols, ref_cols, 2)
+        eblock = eblock.reindex_items_from(ref_cols)
         assert_block_equal(merged, eblock)
 
         # TODO: merge with mixed type?
@@ -90,29 +90,29 @@ class TestBlock(unittest.TestCase):
         self.assert_(cop is not self.fblock)
         assert_block_equal(self.fblock, cop)
 
-    def test_columns(self):
-        cols = self.fblock.columns
+    def test_items(self):
+        cols = self.fblock.items
         self.assert_(np.array_equal(cols, ['a', 'c', 'e']))
 
-        cols2 = self.fblock.columns
+        cols2 = self.fblock.items
         self.assert_(cols is cols2)
 
-    def test_assign_ref_columns(self):
+    def test_assign_ref_items(self):
         new_cols = Index(['foo', 'bar', 'baz', 'quux', 'hi'])
-        self.fblock.set_ref_columns(new_cols)
-        self.assert_(np.array_equal(self.fblock.columns,
+        self.fblock.set_ref_items(new_cols)
+        self.assert_(np.array_equal(self.fblock.items,
                                     ['foo', 'baz', 'hi']))
 
     def test_reindex_index(self):
         pass
 
-    def test_reindex_columns_from(self):
+    def test_reindex_items_from(self):
         new_cols = Index(['e', 'b', 'c', 'f'])
-        reindexed = self.fblock.reindex_columns_from(new_cols)
+        reindexed = self.fblock.reindex_items_from(new_cols)
         assert_almost_equal(reindexed.ref_locs, [0, 2])
-        self.assertEquals(reindexed.values.shape[1], 2)
-        self.assert_((reindexed.values[:, 0] == 2).all())
-        self.assert_((reindexed.values[:, 1] == 1).all())
+        self.assertEquals(reindexed.values.shape[0], 2)
+        self.assert_((reindexed.values[0] == 2).all())
+        self.assert_((reindexed.values[1] == 1).all())
 
     def test_reindex_cast(self):
         pass
@@ -123,15 +123,15 @@ class TestBlock(unittest.TestCase):
     def test_delete(self):
         newb = self.fblock.delete('a')
         assert_almost_equal(newb.ref_locs, [2, 4])
-        self.assert_((newb.values[:, 0] == 1).all())
+        self.assert_((newb.values[0] == 1).all())
 
         newb = self.fblock.delete('c')
         assert_almost_equal(newb.ref_locs, [0, 4])
-        self.assert_((newb.values[:, 1] == 2).all())
+        self.assert_((newb.values[1] == 2).all())
 
         newb = self.fblock.delete('e')
         assert_almost_equal(newb.ref_locs, [0, 2])
-        self.assert_((newb.values[:, 1] == 1).all())
+        self.assert_((newb.values[1] == 1).all())
 
         self.assertRaises(Exception, self.fblock.delete, 'b')
 
@@ -172,7 +172,7 @@ class TestBlockManager(unittest.TestCase):
 
     def test_attrs(self):
         self.assertEquals(self.mgr.nblocks, len(self.mgr.blocks))
-        self.assertEquals(len(self.mgr), len(self.mgr.index))
+        self.assertEquals(len(self.mgr), len(self.mgr.items))
 
     def test_is_mixed_dtype(self):
         self.assert_(self.mgr.is_mixed_dtype())
@@ -186,14 +186,14 @@ class TestBlockManager(unittest.TestCase):
         result = self.mgr.block_id_vector
         assert_almost_equal(expected, result)
 
-    def test_union_block_columns(self):
+    def test_union_block_items(self):
         blocks = [get_float_ex(['a', 'b', 'c']),
                   get_float_ex(['c', 'd', 'e'])]
-        self.assertRaises(Exception, internals._union_block_columns, blocks)
+        self.assertRaises(Exception, internals._union_block_items, blocks)
 
         blocks = [get_float_ex(['a', 'b', 'c']),
                   get_float_ex(['f', 'e', 'd'])]
-        self.assert_(np.array_equal(internals._union_block_columns(blocks),
+        self.assert_(np.array_equal(internals._union_block_items(blocks),
                                     ['a', 'b', 'c', 'd', 'e', 'f']))
 
     def test_contains(self):
@@ -209,8 +209,8 @@ class TestBlockManager(unittest.TestCase):
         # same result
         assert_frame_equal(DataFrame(self.mgr), DataFrame(mgr2))
 
-        # share ref_columns
-        self.assert_(mgr2.blocks[0].ref_columns is mgr2.blocks[1].ref_columns)
+        # share ref_items
+        self.assert_(mgr2.blocks[0].ref_items is mgr2.blocks[1].ref_items)
 
     def test_get(self):
         pass
@@ -242,18 +242,19 @@ class TestBlockManager(unittest.TestCase):
 
     def test_as_matrix_int_bool(self):
         blocks = [get_bool_ex(['a']), get_bool_ex(['b'])]
-        mgr = BlockManager.from_blocks(blocks, np.arange(len(blocks[0])))
+        index_sz = blocks[0].values.shape[1]
+        mgr = BlockManager.from_blocks(blocks, np.arange(index_sz))
         self.assert_(mgr.as_matrix().dtype == np.bool_)
 
         blocks = [get_int_ex(['a']), get_int_ex(['b'])]
-        mgr = BlockManager.from_blocks(blocks, np.arange(len(blocks[0])))
+        mgr = BlockManager.from_blocks(blocks, np.arange(index_sz))
         self.assert_(mgr.as_matrix().dtype == np.int_)
 
     def test_xs(self):
         pass
 
     def test_from_blocks(self):
-        self.assert_(np.array_equal(self.mgr.columns, TEST_COLS))
+        self.assert_(np.array_equal(self.mgr.items, TEST_COLS))
 
     def test_interleave(self):
         pass
@@ -269,12 +270,12 @@ class TestBlockManager(unittest.TestCase):
 
         cons = self.mgr.consolidate()
         self.assertEquals(cons.nblocks, 1)
-        self.assert_(cons.blocks[0].columns.equals(cons.columns))
+        self.assert_(cons.blocks[0].items.equals(cons.items))
 
     def test_reindex_index(self):
         pass
 
-    def test_reindex_columns(self):
+    def test_reindex_items(self):
         def _check_cols(before, after, cols):
             for col in cols:
                 assert_almost_equal(after.get(col), before.get(col))
@@ -282,9 +283,9 @@ class TestBlockManager(unittest.TestCase):
         # not consolidated
         vals = randn(N)
         self.mgr.set('g', vals)
-        reindexed = self.mgr.reindex_columns(['g', 'c', 'a', 'd'])
+        reindexed = self.mgr.reindex_items(['g', 'c', 'a', 'd'])
         self.assertEquals(reindexed.nblocks, 2)
-        assert_almost_equal(reindexed.get('g'), vals)
+        assert_almost_equal(reindexed.get('g'), vals.squeeze())
         _check_cols(self.mgr, reindexed, ['c', 'a', 'd'])
 
     def test_xs(self):
