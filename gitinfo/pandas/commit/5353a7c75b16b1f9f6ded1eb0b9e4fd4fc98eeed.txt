commit 5353a7c75b16b1f9f6ded1eb0b9e4fd4fc98eeed
Author: Wouter Overmeire <lodagro@gmail.com>
Date:   Thu Mar 8 22:19:58 2012 +0100

    BUG: close 872, DataFrame.to_string formatters on integers

diff --git a/pandas/core/format.py b/pandas/core/format.py
index 3e45397d4..2579aaef6 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -516,9 +516,14 @@ class FloatArrayFormatter(GenericArrayFormatter):
 
 class IntArrayFormatter(GenericArrayFormatter):
 
-
     def get_result(self):
-        fmt_values = ['% d' % x for x in self.values]
+        if self.formatter:
+            formatter = self.formatter
+        else:
+            formatter = lambda x: '% d' % x
+
+        fmt_values = [formatter(x) for x in self.values]
+
         return _make_fixed_width(fmt_values, self.justify)
 
 
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index c242470bb..4009ad8ad 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -88,6 +88,20 @@ class TestDataFrameFormatting(unittest.TestCase):
         buf = StringIO()
         dm.to_string(buf)
 
+    def test_to_string_with_formatters(self):
+        df = DataFrame({'int': [1, 2, 3],
+                        'float': [1.0, 2.0, 3.0],
+                        'object': [(1,2), True, False]},
+                        columns=['int', 'float', 'object'])
+
+        result = df.to_string(formatters={'int': lambda x: '0x%x' % x,
+                                          'float': lambda x: '[% 4.1f]' % x,
+                                          'object': lambda x: '-%s-' % str(x)})
+        self.assertEqual(result, ('  int  float    object\n'
+                                  '0 0x1 [ 1.0]  -(1, 2)-\n'
+                                  '1 0x2 [ 2.0]    -True-\n'
+                                  '2 0x3 [ 3.0]   -False-'))
+
     def test_to_string_with_formatters_unicode(self):
         df = DataFrame({u'c/\u03c3':[1,2,3]})
         result = df.to_string(formatters={u'c/\u03c3': lambda x: '%s' % x})
