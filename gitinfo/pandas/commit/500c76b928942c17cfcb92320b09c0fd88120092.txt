commit 500c76b928942c17cfcb92320b09c0fd88120092
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Nov 22 11:50:22 2011 -0500

    ENH: use Series name in GroupBy for result index, GH #363

diff --git a/RELEASE.rst b/RELEASE.rst
index d67677da9..7dfc4f306 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -100,6 +100,7 @@ pandas 0.5.1
   - Can pass multiple levels to `stack` and `unstack` (GH #370)
   - Can pass multiple values columns to `pivot_table` (GH #381)
   - Can call `DataFrame.delevel` with standard Index with name set (GH #393)
+  - Use Series name in GroupBy for result index (GH #363)
 
 **Bug fixes**
 
@@ -568,8 +569,8 @@ Thanks
 - Dan Lovell
 - Nick Pentreath
 
-pandas 0.4
-==========
+pandas 0.4.0
+============
 
 Release notes
 -------------
@@ -700,7 +701,7 @@ Release notes
     `DataFrame.count` to enable this behavior in those methods if so desired
     (disabled by default)
   * `DataFrame.pivot` generalized to enable pivoting multiple columns into a
-    `DataFrame` with hierarhical columns
+    `DataFrame` with hierarchical columns
   * `DataFrame` constructor can accept structured / record arrays
   * `Panel` constructor can accept a dict of DataFrame-like objects. Do not
     need to use `from_dict` anymore (`from_dict` is there to stay, though).
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 02747ae69..367a01a14 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -534,6 +534,10 @@ class Grouping(object):
         self.grouper = _convert_grouper(index, grouper)
         self.index = index
 
+        # right place for this?
+        if isinstance(grouper, Series) and name is None:
+            self.name = grouper.name
+
         if level is not None:
             if not isinstance(level, int):
                 assert(level in index.names)
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index cd871e592..6b8c4b043 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -1013,6 +1013,19 @@ class TestGroupBy(unittest.TestCase):
         expected = grouped.mean()
         assert_frame_equal(result, expected)
 
+    def test_groupby_series_with_name(self):
+        result = self.df.groupby(self.df['A']).mean()
+        result2 = self.df.groupby(self.df['A'], as_index=False).mean()
+        self.assertEquals(result.index.name, 'A')
+        self.assert_('A' in result2)
+
+        result = self.df.groupby([self.df['A'], self.df['B']]).mean()
+        result2 = self.df.groupby([self.df['A'], self.df['B']],
+                                 as_index=False).mean()
+        self.assertEquals(result.index.names, ['A', 'B'])
+        self.assert_('A' in result2)
+        self.assert_('B' in result2)
+
 class TestPanelGroupBy(unittest.TestCase):
 
     def setUp(self):
