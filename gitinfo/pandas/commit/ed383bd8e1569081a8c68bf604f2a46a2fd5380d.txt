commit ed383bd8e1569081a8c68bf604f2a46a2fd5380d
Author: Adam Klein <adamklein@gmail.com>
Date:   Tue Feb 28 19:15:53 2012 -0500

    TST: added core coverage

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 24f71215d..19bee70d6 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -630,12 +630,6 @@ def console_encode(value):
     except (AttributeError, TypeError):
         return value.encode('ascii', 'replace')
 
-def csv_encode(value, encoding='UTF-8'):
-    if py3compat.PY3 or not isinstance(value, unicode):
-        return value
-
-    return value.encode(encoding, 'replace')
-
 class UTF8Recoder:
     """
     Iterator that reads an encoded stream and reencodes the input to UTF-8
@@ -709,7 +703,3 @@ else:
             self.stream.write(data)
             # empty queue
             self.queue.truncate(0)
-
-        def writerows(self, rows):
-            for row in rows:
-                self.writerow(row)
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 7958e7fc3..6d578c5fb 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2245,7 +2245,7 @@ class DataFrame(NDFrame):
         -------
         sorted : DataFrame
         """
-        if column is not None:
+        if column is not None: # pragma: no cover
             import warnings
             warnings.warn("column is deprecated, use columns", FutureWarning)
             columns = column
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 4ef644e90..aa42025de 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -229,7 +229,7 @@ def _pad(values):
         _method = lib.pad_2d_inplace_float64
     elif values.dtype == np.object_:
         _method = lib.pad_2d_inplace_object
-    else:
+    else: # pragma: no cover
         raise ValueError('Invalid dtype for padding')
 
     _method(values, com.isnull(values).view(np.uint8))
@@ -239,7 +239,7 @@ def _backfill(values):
         _method = lib.backfill_2d_inplace_float64
     elif values.dtype == np.object_:
         _method = lib.backfill_2d_inplace_object
-    else:
+    else: # pragma: no cover
         raise ValueError('Invalid dtype for padding')
 
     _method(values, com.isnull(values).view(np.uint8))
@@ -608,9 +608,6 @@ class BlockManager(object):
         return BlockManager(new_blocks, self.axes)
 
     def _consolidate_inplace(self):
-        if self.is_consolidated():
-            return
-
         self.blocks = _consolidate(self.blocks, self.items)
 
     def get(self, item):
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 2a738fc09..95155547c 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -108,7 +108,7 @@ def _comp_method(op, name):
             name = _maybe_match_name(self, other)
             return Series(na_op(self.values, other.values),
                           index=self.index, name=name)
-        elif isinstance(other, DataFrame):
+        elif isinstance(other, DataFrame): # pragma: no cover
             return NotImplemented
         else:
             # scalars
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index eebad8e3f..c242470bb 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -187,7 +187,8 @@ class TestDataFrameFormatting(unittest.TestCase):
 
     def test_to_string_float_formatting(self):
         fmt.reset_printoptions()
-        fmt.set_printoptions(precision=6, column_space=12)
+        fmt.set_printoptions(precision=6, column_space=12,
+                             notebook_repr_html=False)
 
         df = DataFrame({'x' : [0, 0.25, 3456.000, 12e+45, 1.64e+6,
                                1.7e+8, 1.253456, np.pi, -1e6]})
@@ -341,6 +342,13 @@ class TestDataFrameFormatting(unittest.TestCase):
     def test_repr_html(self):
         self.frame._repr_html_()
 
+        fmt.set_printoptions(max_rows=1, max_columns=1)
+        self.frame._repr_html_()
+
+        fmt.set_printoptions(notebook_repr_html=False)
+        self.frame._repr_html_()
+
+        fmt.reset_printoptions()
 
 class TestSeriesFormatting(unittest.TestCase):
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 1812635a5..edcc84b1a 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1174,6 +1174,17 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         df = DataFrame(data={})
         self.assert_(len(df.index) == 0)
 
+    def test_list_to_sdict(self):
+        from pandas.core.frame import _list_to_sdict
+
+        d, c = _list_to_sdict([], None)
+        self.assertEquals(d, {})
+        self.assertEquals(c, [])
+
+        d, c = _list_to_sdict([], [])
+        self.assertEquals(d, {})
+        self.assertEquals(c, [])
+
     def test_constructor_mixed(self):
         index, data = tm.getMixedTypeDict()
 
@@ -1536,8 +1547,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         data = [Series(d) for d in data]
 
         result = DataFrame(data)
-        expected = DataFrame.from_dict(dict(zip(range(len(data)), data)),
-                                       orient='index')
+        sdict = dict(zip(range(len(data)), data))
+        expected = DataFrame.from_dict(sdict, orient='index')
         assert_frame_equal(result, expected.reindex(result.index))
 
         result2 = DataFrame(data, index=np.arange(6))
@@ -1547,6 +1558,15 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         expected = DataFrame(index=[0])
         assert_frame_equal(result, expected)
 
+        data = [{'a': 1.5, 'b': 3.0, 'c':4.0},
+                {'a': 1.5, 'b': 3.0, 'c':6.0}]
+        sdict = dict(zip(range(len(data)), data))
+        idx = Index(['a', 'b', 'c'])
+        data2 = [Series([1.5, 3, 4], idx, dtype='O'),
+                 Series([1.5, 3, 6], idx)]
+        result = DataFrame(data2)
+        expected = DataFrame.from_dict(sdict, orient='index')
+        assert_frame_equal(result, expected)
 
     def test_constructor_ragged(self):
         data = {'A' : randn(10),
@@ -1893,6 +1913,10 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         fmt.set_printoptions(max_rows=10, max_columns=2)
         repr(self.frame)
+
+        fmt.set_printoptions(max_rows=1000, max_columns=1000)
+        repr(self.frame)
+
         fmt.reset_printoptions()
 
     def test_head_tail(self):
@@ -3302,6 +3326,21 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         af, bf = self.frame.align(other, join='inner', axis=1)
         self.assert_(bf.columns.equals(other.columns))
 
+        af, bf = self.frame.align(other, join='inner', axis=1, method='pad')
+        self.assert_(bf.columns.equals(other.columns))
+
+        # test other non-float types
+        af, bf = self.intframe.align(other, join='inner', axis=1, method='pad')
+        self.assert_(bf.columns.equals(other.columns))
+
+        af, bf = self.mixed_frame.align(self.mixed_frame,
+                                        join='inner', axis=1, method='pad')
+        self.assert_(bf.columns.equals(self.mixed_frame.columns))
+
+        af, bf = self.frame.align(other.ix[:,0], join='inner', axis=1,
+                                  method=None, fill_value=None)
+        self.assert_(bf.index.equals(Index([])))
+
         # try to align dataframe to series along bad axis
         self.assertRaises(ValueError, self.frame.align, af.ix[0,:3],
                           join='inner', axis=2)
@@ -4614,6 +4653,13 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         self.frame.consolidate(inplace=True)
         self.assert_(len(self.frame._data.blocks) == 1)
 
+    def test_consolidate_inplace(self):
+        frame = self.frame.copy()
+
+        # triggers in-place consolidation
+        for letter in range(ord('A'), ord('Z')):
+            self.frame[chr(letter)] = chr(letter)
+
     def test_as_matrix_consolidate(self):
         self.frame['E'] = 7.
         self.assert_(not self.frame._data.is_consolidated())
diff --git a/pandas/tests/test_graphics.py b/pandas/tests/test_graphics.py
index 3253d7ca1..975c2a296 100644
--- a/pandas/tests/test_graphics.py
+++ b/pandas/tests/test_graphics.py
@@ -14,9 +14,9 @@ class TestSeriesPlots(unittest.TestCase):
 
     @classmethod
     def setUpClass(cls):
-        import sys
-        if 'IPython' in sys.modules:
-            raise nose.SkipTest
+        #import sys
+        #if 'IPython' in sys.modules:
+        #    raise nose.SkipTest
 
         try:
             import matplotlib as mpl
@@ -50,9 +50,9 @@ class TestDataFramePlots(unittest.TestCase):
 
     @classmethod
     def setUpClass(cls):
-        import sys
-        if 'IPython' in sys.modules:
-            raise nose.SkipTest
+        #import sys
+        #if 'IPython' in sys.modules:
+        #    raise nose.SkipTest
 
         try:
             import matplotlib as mpl
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index a1244c3bf..355a8cf94 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -204,6 +204,25 @@ class TestGroupBy(unittest.TestCase):
         assert_frame_equal(grouped.agg(np.sum), DataFrame({}))
         assert_frame_equal(grouped.apply(np.sum), DataFrame({}))
 
+    def test_agg_grouping_is_list_tuple(self):
+        from pandas.core.groupby import Grouping
+
+        df = tm.makeTimeDataFrame()
+
+        grouped = df.groupby(lambda x: x.year)
+        grouper = grouped.grouper.groupings[0].grouper
+        grouped.grouper.groupings[0] = Grouping(self.ts.index, list(grouper))
+
+        result = grouped.agg(np.mean)
+        expected = grouped.mean()
+        tm.assert_frame_equal(result, expected)
+
+        grouped.grouper.groupings[0] = Grouping(self.ts.index, tuple(grouper))
+
+        result = grouped.agg(np.mean)
+        expected = grouped.mean()
+        tm.assert_frame_equal(result, expected)
+
     def test_agg_python_multiindex(self):
         grouped = self.mframe.groupby(['A', 'B'])
 
@@ -475,6 +494,16 @@ class TestGroupBy(unittest.TestCase):
             samething = self.tsframe.index.take(indices[k])
             self.assert_(np.array_equal(v, samething))
 
+    def test_grouping_is_iterable(self):
+        # this code path isn't used anywhere else
+        # not sure it's useful
+        grouped = self.tsframe.groupby([lambda x: x.weekday(),
+                                        lambda x: x.year])
+
+        # test it works
+        for g in grouped.grouper.groupings[0]:
+            pass
+
     def test_frame_groupby_columns(self):
         mapping = {
             'A' : 0, 'B' : 0, 'C' : 1, 'D' : 1
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 7cdfdc80c..d6fd511a9 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -864,6 +864,13 @@ class TestPanel(unittest.TestCase, PanelTests, CheckIndexing,
         assert_frame_equal(filled['ItemA'],
                            self.panel['ItemA'].fillna(method='backfill'))
 
+        panel = self.panel.copy()
+        panel['str'] = 'foo'
+
+        filled = panel.fillna(method='backfill')
+        assert_frame_equal(filled['ItemA'],
+                           panel['ItemA'].fillna(method='backfill'))
+
         empty = self.panel.reindex(items=[])
         filled = empty.fillna(0)
         assert_panel_equal(filled, empty)
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 1734d61f3..5fe7112e7 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -1149,6 +1149,15 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         expected = s[5:16].dropna()
         assert_series_equal(result, expected)
 
+    def test_scalar_na_cmp(self):
+        s = Series([2,3,4,5,6,7,8,9,10])
+        s[::2] = np.nan
+
+        def tester(a, b):
+            return a & b
+
+        self.assertRaises(ValueError, tester, s, datetime(2005,1,1))
+
     def test_idxmin(self):
         # test idxmin
         # _check_stat_op approach can not be used here because of isnull check.
@@ -1258,6 +1267,7 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
 
         tm.assert_almost_equal(self.ts + self.ts, (self.ts + df)['A'])
         tm.assert_almost_equal(self.ts ** self.ts, (self.ts ** df)['A'])
+        tm.assert_almost_equal(self.ts < self.ts, (self.ts < df)['A'])
 
     def test_operators_combine(self):
         def _check_fill(meth, op, a, b, fill_value=0):
