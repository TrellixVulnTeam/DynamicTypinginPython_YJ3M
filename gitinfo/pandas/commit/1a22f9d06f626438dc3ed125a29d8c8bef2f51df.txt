commit 1a22f9d06f626438dc3ed125a29d8c8bef2f51df
Author: Simon Hawkins <simonjayhawkins@gmail.com>
Date:   Thu Jul 25 18:10:22 2019 +0100

    CLN: pandas\io\formats\format.py (#27577)

diff --git a/pandas/core/indexes/timedeltas.py b/pandas/core/indexes/timedeltas.py
index 1c2a8c4f0..1fc168433 100644
--- a/pandas/core/indexes/timedeltas.py
+++ b/pandas/core/indexes/timedeltas.py
@@ -299,9 +299,11 @@ class TimedeltaIndex(
     def _format_native_types(self, na_rep="NaT", date_format=None, **kwargs):
         from pandas.io.formats.format import Timedelta64Formatter
 
-        return Timedelta64Formatter(
-            values=self, nat_rep=na_rep, justify="all"
-        ).get_result()
+        return np.asarray(
+            Timedelta64Formatter(
+                values=self, nat_rep=na_rep, justify="all"
+            ).get_result()
+        )
 
     # -------------------------------------------------------------------
     # Wrapping TimedeltaArray
diff --git a/pandas/io/formats/format.py b/pandas/io/formats/format.py
index b47ab63b6..6e4894bdb 100644
--- a/pandas/io/formats/format.py
+++ b/pandas/io/formats/format.py
@@ -26,7 +26,6 @@ from unicodedata import east_asian_width
 from dateutil.tz.tz import tzutc
 from dateutil.zoneinfo import tzfile
 import numpy as np
-from numpy import float64, int32, ndarray
 
 from pandas._config.config import get_option, set_option
 
@@ -1125,7 +1124,7 @@ class GenericArrayFormatter:
         self.fixed_width = fixed_width
         self.leading_space = leading_space
 
-    def get_result(self) -> Union[ndarray, List[str]]:
+    def get_result(self) -> List[str]:
         fmt_values = self._format_strings()
         return _make_fixed_width(fmt_values, self.justify)
 
@@ -1261,7 +1260,7 @@ class FloatArrayFormatter(GenericArrayFormatter):
 
         return formatter
 
-    def get_result_as_array(self) -> Union[ndarray, List[str]]:
+    def get_result_as_array(self) -> np.ndarray:
         """
         Returns the float values converted into strings using
         the parameters given at initialisation, as a numpy array
@@ -1301,9 +1300,10 @@ class FloatArrayFormatter(GenericArrayFormatter):
 
             if self.fixed_width:
                 if is_complex:
-                    return _trim_zeros_complex(values, na_rep)
+                    result = _trim_zeros_complex(values, na_rep)
                 else:
-                    return _trim_zeros_float(values, na_rep)
+                    result = _trim_zeros_float(values, na_rep)
+                return np.asarray(result, dtype="object")
 
             return values
 
@@ -1368,7 +1368,7 @@ class IntArrayFormatter(GenericArrayFormatter):
 class Datetime64Formatter(GenericArrayFormatter):
     def __init__(
         self,
-        values: Union[ndarray, "Series", DatetimeIndex, DatetimeArray],
+        values: Union[np.ndarray, "Series", DatetimeIndex, DatetimeArray],
         nat_rep: str = "NaT",
         date_format: None = None,
         **kwargs
@@ -1425,7 +1425,7 @@ class ExtensionArrayFormatter(GenericArrayFormatter):
 
 def format_percentiles(
     percentiles: Union[
-        ndarray, List[Union[int, float]], List[float], List[Union[str, float]]
+        np.ndarray, List[Union[int, float]], List[float], List[Union[str, float]]
     ]
 ) -> List[str]:
     """
@@ -1493,7 +1493,9 @@ def format_percentiles(
     return [i + "%" for i in out]
 
 
-def _is_dates_only(values: Union[ndarray, DatetimeArray, Index, DatetimeIndex]) -> bool:
+def _is_dates_only(
+    values: Union[np.ndarray, DatetimeArray, Index, DatetimeIndex]
+) -> bool:
     # return a boolean if we are only dates (and don't have a timezone)
     assert values.ndim == 1
 
@@ -1557,7 +1559,7 @@ def _get_format_datetime64(
 
 
 def _get_format_datetime64_from_values(
-    values: Union[ndarray, DatetimeArray, DatetimeIndex], date_format: Optional[str]
+    values: Union[np.ndarray, DatetimeArray, DatetimeIndex], date_format: Optional[str]
 ) -> Optional[str]:
     """ given values and a date_format, return a string format """
 
@@ -1589,7 +1591,7 @@ class Datetime64TZFormatter(Datetime64Formatter):
 class Timedelta64Formatter(GenericArrayFormatter):
     def __init__(
         self,
-        values: Union[ndarray, TimedeltaIndex],
+        values: Union[np.ndarray, TimedeltaIndex],
         nat_rep: str = "NaT",
         box: bool = False,
         **kwargs
@@ -1598,16 +1600,15 @@ class Timedelta64Formatter(GenericArrayFormatter):
         self.nat_rep = nat_rep
         self.box = box
 
-    def _format_strings(self) -> ndarray:
+    def _format_strings(self) -> List[str]:
         formatter = self.formatter or _get_format_timedelta64(
             self.values, nat_rep=self.nat_rep, box=self.box
         )
-        fmt_values = np.array([formatter(x) for x in self.values])
-        return fmt_values
+        return [formatter(x) for x in self.values]
 
 
 def _get_format_timedelta64(
-    values: Union[ndarray, TimedeltaIndex, TimedeltaArray],
+    values: Union[np.ndarray, TimedeltaIndex, TimedeltaArray],
     nat_rep: str = "NaT",
     box: bool = False,
 ) -> Callable:
@@ -1652,11 +1653,11 @@ def _get_format_timedelta64(
 
 
 def _make_fixed_width(
-    strings: Union[ndarray, List[str]],
+    strings: List[str],
     justify: str = "right",
     minimum: Optional[int] = None,
     adj: Optional[TextAdjustment] = None,
-) -> Union[ndarray, List[str]]:
+) -> List[str]:
 
     if len(strings) == 0 or justify == "all":
         return strings
@@ -1684,7 +1685,7 @@ def _make_fixed_width(
     return result
 
 
-def _trim_zeros_complex(str_complexes: ndarray, na_rep: str = "NaN") -> List[str]:
+def _trim_zeros_complex(str_complexes: np.ndarray, na_rep: str = "NaN") -> List[str]:
     """
     Separates the real and imaginary parts from the complex number, and
     executes the _trim_zeros_float method on each of those.
@@ -1696,7 +1697,7 @@ def _trim_zeros_complex(str_complexes: ndarray, na_rep: str = "NaN") -> List[str
 
 
 def _trim_zeros_float(
-    str_floats: Union[ndarray, List[str]], na_rep: str = "NaN"
+    str_floats: Union[np.ndarray, List[str]], na_rep: str = "NaN"
 ) -> List[str]:
     """
     Trims zeros, leaving just one before the decimal points if need be.
@@ -1760,7 +1761,7 @@ class EngFormatter:
         self.accuracy = accuracy
         self.use_eng_prefix = use_eng_prefix
 
-    def __call__(self, num: Union[float64, int, float]) -> str:
+    def __call__(self, num: Union[int, float]) -> str:
         """ Formats a number in engineering notation, appending a letter
         representing the power of 1000 of the original number. Some examples:
 
@@ -1840,7 +1841,7 @@ def set_eng_float_format(accuracy: int = 3, use_eng_prefix: bool = False) -> Non
     set_option("display.column_space", max(12, accuracy + 9))
 
 
-def _binify(cols: List[int32], line_width: Union[int32, int]) -> List[int]:
+def _binify(cols: List[np.int32], line_width: Union[np.int32, int]) -> List[int]:
     adjoin_width = 1
     bins = []
     curr_width = 0
