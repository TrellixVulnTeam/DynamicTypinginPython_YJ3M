commit ce05bf16f0781f23043eeaebd33f372362516917
Author: y-p <yoval@gmx.com>
Date:   Tue Dec 11 14:32:56 2012 +0200

    ENH: more escaping in com.pprint_thing()

diff --git a/pandas/core/common.py b/pandas/core/common.py
index e08707519..d77d413d3 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -1221,13 +1221,13 @@ def in_qtconsole():
 #    working with straight ascii.
 
 
-def _pprint_seq(seq, _nest_lvl=0):
+def _pprint_seq(seq, _nest_lvl=0, **kwds):
     """
     internal. pprinter for iterables. you should probably use pprint_thing()
     rather then calling this directly.
     """
     fmt = u"[%s]" if hasattr(seq, '__setitem__') else u"(%s)"
-    return fmt % ", ".join(pprint_thing(e, _nest_lvl + 1) for e in seq)
+    return fmt % ", ".join(pprint_thing(e, _nest_lvl + 1, **kwds) for e in seq)
 
 def _pprint_dict(seq, _nest_lvl=0):
     """
@@ -1243,7 +1243,7 @@ def _pprint_dict(seq, _nest_lvl=0):
     return fmt % ", ".join(pairs)
 
 
-def pprint_thing(thing, _nest_lvl=0):
+def pprint_thing(thing, _nest_lvl=0, escape_chars=None):
     """
     This function is the sanctioned way of converting objects
     to a unicode representation.
@@ -1274,7 +1274,7 @@ def pprint_thing(thing, _nest_lvl=0):
         result = _pprint_dict(thing, _nest_lvl)
     elif _is_sequence(thing) and _nest_lvl < \
 		get_option("print.pprint_nest_depth"):
-        result = _pprint_seq(thing, _nest_lvl)
+        result = _pprint_seq(thing, _nest_lvl, escape_chars=escape_chars)
     else:
         # when used internally in the package, everything
         # should be unicode text. However as an aid to transition
@@ -1290,17 +1290,23 @@ def pprint_thing(thing, _nest_lvl=0):
             # either utf-8 or we replace errors
             result = str(thing).decode('utf-8', "replace")
 
-        result=result.replace("\t",r'\t') # escape tabs
+        translate = {'\t': r'\t',
+                     '\n': r'\n',
+                     '\r': r'\r',
+                     }
+        escape_chars = escape_chars or tuple()
+        for c in escape_chars:
+            result=result.replace(c,translate[c])
 
     return unicode(result)  # always unicode
 
 
-def pprint_thing_encoded(object, encoding='utf-8', errors='replace'):
+def pprint_thing_encoded(object, encoding='utf-8', errors='replace', **kwds):
     value = pprint_thing(object)  # get unicode representation of object
-    return value.encode(encoding, errors)
+    return value.encode(encoding, errors,**kwds)
 
 
-def console_encode(object):
+def console_encode(object, **kwds):
     """
     this is the sanctioned way to prepare something for
     sending *to the console*, it delegates to pprint_thing() to get
diff --git a/pandas/core/format.py b/pandas/core/format.py
index 152529716..771ad7aee 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -86,7 +86,8 @@ class SeriesFormatter(object):
             if footer and self.series.name is not None:
                 footer += ', '
 
-            series_name = com.pprint_thing(self.series.name)
+            series_name = com.pprint_thing(self.series.name,
+                                           escape_chars=('\t','\r','\n'))
             footer += ("Name: %s" % series_name) if self.series.name is not None else ""
 
         if self.length:
@@ -1029,7 +1030,8 @@ class GenericArrayFormatter(object):
         else:
             float_format = self.float_format
 
-        formatter = com.pprint_thing if self.formatter is None else self.formatter
+        formatter = (lambda x: com.pprint_thing(x,escape_chars=('\t','\r','\n'))) \
+                    if self.formatter is None else self.formatter
 
         def _format(x):
             if self.na_rep is not None and lib.checknull(x):
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index f8a7f6ed9..79027f304 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -642,7 +642,8 @@ class DataFrame(NDFrame):
         Invoked by bytes(df) in py3 only.
         Yields a bytestring in both py2/py3.
         """
-        return com.console_encode(self.__unicode__())
+        encoding = com.get_option("print.encoding")
+        return self.__unicode__().encode(encoding , 'replace')
 
     def __unicode__(self):
         """
diff --git a/pandas/core/index.py b/pandas/core/index.py
index b6eeccba9..337ce3d12 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -159,7 +159,8 @@ class Index(np.ndarray):
         Invoked by bytes(df) in py3 only.
         Yields a bytestring in both py2/py3.
         """
-        return com.console_encode(self.__unicode__())
+        encoding = com.get_option("print.encoding")
+        return self.__unicode__().encode(encoding , 'replace')
 
     def __unicode__(self):
         """
@@ -172,7 +173,7 @@ class Index(np.ndarray):
         else:
             data = self
 
-        prepr = com.pprint_thing(data)
+        prepr = com.pprint_thing(data, escape_chars=('\t','\r','\n'))
         return '%s(%s, dtype=%s)' % (type(self).__name__, prepr, self.dtype)
 
     def __repr__(self):
@@ -422,7 +423,8 @@ class Index(np.ndarray):
 
         header = []
         if name:
-            header.append(com.pprint_thing(self.name)
+            header.append(com.pprint_thing(self.name,
+                                           escape_chars=('\t','\r','\n'))
                           if self.name is not None else '')
 
         if formatter is not None:
@@ -443,7 +445,8 @@ class Index(np.ndarray):
             values = lib.maybe_convert_objects(values, safe=1)
 
         if values.dtype == np.object_:
-            result = [com.pprint_thing(x) for x in values]
+            result = [com.pprint_thing(x,escape_chars=('\t','\r','\n'))
+                      for x in values]
         else:
             result = _trim_front(format_array(values, None, justify='left'))
         return header + result
@@ -1377,7 +1380,8 @@ class MultiIndex(Index):
         Invoked by bytes(df) in py3 only.
         Yields a bytestring in both py2/py3.
         """
-        return com.console_encode(self.__unicode__())
+        encoding = com.get_option("print.encoding")
+        return self.__unicode__().encode(encoding , 'replace')
 
     def __unicode__(self):
         """
@@ -1396,7 +1400,7 @@ class MultiIndex(Index):
         else:
             values = self.values
 
-        summary = com.pprint_thing(values)
+        summary = com.pprint_thing(values, escape_chars=('\t','\r','\n'))
 
         np.set_printoptions(threshold=options['threshold'])
 
@@ -1566,7 +1570,8 @@ class MultiIndex(Index):
                 formatted = lev.take(lab).format(formatter=formatter)
             else:
                 # weird all NA case
-                formatted = [com.pprint_thing(x) for x in com.take_1d(lev.values, lab)]
+                formatted = [com.pprint_thing(x,escape_chars=('\t','\r','\n'))
+                             for x in com.take_1d(lev.values, lab)]
             stringified_levels.append(formatted)
 
         result_levels = []
@@ -1574,7 +1579,8 @@ class MultiIndex(Index):
             level = []
 
             if names:
-                level.append(com.pprint_thing(name) if name is not None else '')
+                level.append(com.pprint_thing(name,escape_chars=('\t','\r','\n'))
+                             if name is not None else '')
 
             level.extend(np.array(lev, dtype=object))
             result_levels.append(level)
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index fa469242f..2b4af6d9a 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -507,7 +507,8 @@ class Panel(NDFrame):
         Invoked by bytes(df) in py3 only.
         Yields a bytestring in both py2/py3.
         """
-        return com.console_encode(self.__unicode__())
+        encoding = com.get_option("print.encoding")
+        return self.__unicode__().encode(encoding , 'replace')
 
     def __unicode__(self):
         """
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 20c9e3962..18ccf4b48 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -943,7 +943,8 @@ copy : boolean, default False
         Invoked by bytes(df) in py3 only.
         Yields a bytestring in both py2/py3.
         """
-        return com.console_encode(self.__unicode__())
+        encoding = com.get_option("print.encoding")
+        return self.__unicode__().encode(encoding , 'replace')
 
     def __unicode__(self):
         """
diff --git a/pandas/tests/test_common.py b/pandas/tests/test_common.py
index b90c58b41..e8be2a5cc 100644
--- a/pandas/tests/test_common.py
+++ b/pandas/tests/test_common.py
@@ -252,10 +252,8 @@ def test_pprint_thing():
 
     # escape embedded tabs in string
     # GH #2038
-    assert not "\t" in pp_t("a\tb")
+    assert not "\t" in pp_t("a\tb",escape_chars=("\t",))
 
-    assert not "\n" in pp_t("a\nb")
-    assert "\n" in pp_t("a\nb",escape_chars=("\t",))
 
 class TestTake(unittest.TestCase):
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index ef5bc2973..d7f6dbcc7 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2940,6 +2940,11 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         # no columns or index
         self.empty.info(buf=buf)
 
+        df = DataFrame(["a\n\r\tb"],columns=["a\n\r\td"],index=["a\n\r\tf"])
+        self.assertFalse("\t" in repr(df))
+        self.assertFalse("\r" in repr(df))
+        self.assertFalse("a\n" in repr(df))
+
     @slow
     def test_repr_big(self):
         buf = StringIO()
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 8b82d45ce..52f25e5c6 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -1097,6 +1097,11 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         rep_str = repr(ser)
         self.assert_("Name: 0" in rep_str)
 
+        ser = Series(["a\n\r\tb"],name=["a\n\r\td"],index=["a\n\r\tf"])
+        self.assertFalse("\t" in repr(ser))
+        self.assertFalse("\r" in repr(ser))
+        self.assertFalse("a\n" in repr(ser))
+
     def test_tidy_repr(self):
         a=Series([u"\u05d0"]*1000)
         a.name= 'title1'
