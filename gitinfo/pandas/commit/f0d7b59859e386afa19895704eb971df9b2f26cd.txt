commit f0d7b59859e386afa19895704eb971df9b2f26cd
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu May 12 20:14:38 2011 -0400

    working on SparseWidePanel. reduced some code dup in core classes

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index f65f96427..dbdd808c6 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -14,7 +14,7 @@ from pandas.core.common import (_pickle_array, _unpickle_array, isnull, notnull)
 from pandas.core.daterange import DateRange
 from pandas.core.index import Index, NULL_INDEX
 from pandas.core.mixins import Picklable, Groupable
-from pandas.core.series import Series
+from pandas.core.series import Series, _ensure_index
 import pandas.core.common as common
 import pandas.core.datetools as datetools
 import pandas.lib.tseries as tseries
@@ -151,9 +151,7 @@ class DataFrame(Picklable, Groupable):
     def _init_dict(self, data, index, columns, dtype):
         # pre-filter out columns if we passed it
         if columns is not None:
-            if not isinstance(columns, Index):
-                columns = Index(columns)
-
+            columns = _ensure_index(columns)
             data = dict((k, v) for k, v in data.iteritems() if k in columns)
         else:
             columns = Index(try_sort(data.keys()))
@@ -261,11 +259,7 @@ class DataFrame(Picklable, Groupable):
 
     _index = None
     def _set_index(self, index):
-        if isinstance(index, Index):
-            self._index = index
-        else:
-            self._index = Index(index)
-
+        self._index = _ensure_index(index)
         for v in self._series.values():
             v.index = self._index
 
@@ -282,11 +276,7 @@ class DataFrame(Picklable, Groupable):
         if len(cols) != len(self._series):
             raise Exception('Columns length %d did not match data %d!' %
                             (len(cols), len(self._series)))
-
-        if not isinstance(cols, Index):
-            cols = Index(cols)
-
-        self._columns = cols
+        self._columns = _ensure_index(cols)
 
     def _insert_column_index(self, key, loc):
         if loc == len(self.columns):
@@ -429,7 +419,7 @@ class DataFrame(Picklable, Groupable):
         """
         from pandas.core.sparse import SparseDataFrame
         return SparseDataFrame(self._series, index=self.index,
-                               kind=kind, default_fill_value=fill_value)
+                               default_kind=kind, default_fill_value=fill_value)
 
 #-------------------------------------------------------------------------------
 # Magic methods
@@ -1316,13 +1306,11 @@ class DataFrame(Picklable, Groupable):
         frame = self
 
         if index is not None:
-            if not isinstance(index, Index):
-                index = Index(index)
+            index = _ensure_index(index)
             frame = frame._reindex_index(index, method)
 
         if columns is not None:
-            if not isinstance(columns, Index):
-                columns = Index(columns)
+            columns = _ensure_index(columns)
             frame = frame._reindex_columns(columns)
 
         return frame
@@ -2440,10 +2428,7 @@ def extract_index(data, index):
     if len(index) == 0 or index is None:
         index = NULL_INDEX
 
-    if not isinstance(index, Index):
-        index = Index(index)
-
-    return index
+    return _ensure_index(index)
 
 def _default_index(n):
     if n == 0:
@@ -2475,3 +2460,4 @@ def _pfixed(s, space, nanRep=None, float_format=None):
 
 def _put_str(s, space):
     return ('%s' % s)[:space].ljust(space)
+
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index 3e7f8b7fc..c3e229df8 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -11,7 +11,7 @@ from pandas.core.common import (_pickle_array, _unpickle_array)
 from pandas.core.frame import (DataFrame, try_sort, extract_index,
                                _default_index)
 from pandas.core.index import Index, NULL_INDEX
-from pandas.core.series import Series
+from pandas.core.series import Series, _ensure_index
 import pandas.core.common as common
 import pandas.core.datetools as datetools
 import pandas.lib.tseries as tseries
@@ -409,10 +409,7 @@ class DataMatrix(DataFrame):
             raise Exception('Columns length %d did not match values %d!' %
                             (len(cols), self.values.shape[1]))
 
-        if not isinstance(cols, Index):
-            cols = Index(cols)
-
-        self._columns = cols
+        self._columns = _ensure_index(cols)
 
     def _set_index(self, index):
         if len(index) > 0:
@@ -420,13 +417,10 @@ class DataMatrix(DataFrame):
                 raise Exception('Index length %d did not match values %d!' %
                                 (len(index), self.values.shape[0]))
 
-        if not isinstance(index, Index):
-            index = Index(index)
-
-        self._index = index
+        self._index = _ensure_index(index)
 
         if self.objects is not None:
-            self.objects._index = index
+            self.objects._index = self._index
 
 #-------------------------------------------------------------------------------
 # "Magic methods"
@@ -811,9 +805,7 @@ class DataMatrix(DataFrame):
 
             columns = Index(self.cols())
         else:
-            if not isinstance(columns, Index):
-                columns = Index(columns)
-
+            columns = _ensure_index(columns)
             values = self.values
             order = self.columns
 
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 21b4133fd..980599c9a 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -10,7 +10,7 @@ import warnings
 import numpy as np
 
 from pandas.core.index import Index
-from pandas.core.frame import DataFrame, _pfixed
+from pandas.core.frame import DataFrame, _pfixed, _ensure_index
 from pandas.core.matrix import DataMatrix
 from pandas.core.mixins import Picklable, Groupable
 import pandas.core.common as common
@@ -82,9 +82,7 @@ class PanelAxis(object):
         return getattr(obj, self.cache_field, None)
 
     def __set__(self, obj, value):
-        if not isinstance(value, Index):
-            value = Index(value)
-
+        value = _ensure_index(value)
         setattr(obj, self.cache_field, value)
 
 class Panel(Picklable):
@@ -426,9 +424,7 @@ class WidePanel(Panel, Groupable):
         if old_index.equals(new_index):
             return self.copy()
 
-        if not isinstance(new_index, Index):
-            new_index = Index(new_index)
-
+        new_index = _ensure_index(new_index)
         indexer, mask = common.get_indexer(old_index, new_index, fill_method)
 
         new_values = self.values.take(indexer, axis=axis)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index ffab25e50..cc8fbab9d 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -198,10 +198,7 @@ class Series(np.ndarray, Picklable, Groupable):
         if len(self) != len(index):
             raise AssertionError('Lengths of index and values did not match!')
 
-        if not isinstance(index, Index):
-            index = Index(index)
-
-        self._index = index
+        self._index = _ensure_index(index)
 
     index = property(fget=_get_index, fset=_set_index)
 
@@ -871,9 +868,7 @@ class Series(np.ndarray, Picklable, Groupable):
         if self.index.equals(new_index):
             return self.copy()
 
-        if not isinstance(new_index, Index):
-            new_index = Index(new_index)
-
+        new_index = _ensure_index(new_index)
         if len(self.index) == 0:
             return Series(NaN, index=new_index)
 
@@ -1322,3 +1317,9 @@ def _seriesRepr(index, vals, nanRep='NaN'):
                            itertools.izip(string_index, vals))
 
     return '\n'.join(it)
+
+def _ensure_index(index_like):
+    if not isinstance(index_like, Index):
+        index_like = Index(index_like)
+
+    return index_like
diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index 364405fbd..c39b15970 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -9,8 +9,7 @@ import numpy as np
 import operator
 
 from pandas.core.index import Index, NULL_INDEX
-from pandas.core.panel import _get_combined_index, _get_combined_columns
-from pandas.core.series import Series, TimeSeries
+from pandas.core.series import Series, TimeSeries, _ensure_index
 from pandas.core.frame import DataFrame, extract_index, try_sort
 from pandas.core.matrix import DataMatrix
 import pandas.core.common as common
@@ -218,8 +217,7 @@ class SparseSeries(Series):
 
         if index is None:
             index = Index(np.arange(sparse_index.length))
-        elif not isinstance(index, Index):
-            index = Index(index)
+        index = _ensure_index(index)
 
         # Create array, do *not* copy data by default
         subarr = np.array(values, dtype=np.float64, copy=copy)
@@ -422,8 +420,7 @@ class SparseSeries(Series):
         -------
         reindexed : SparseSeries
         """
-        if not isinstance(new_index, Index):
-            new_index = Index(new_index)
+        new_index = _ensure_index(new_index)
 
         if self.index.equals(new_index):
             return self.copy()
@@ -535,12 +532,12 @@ class SparseDataFrame(DataFrame):
     """
     _columns = None
 
-    def __init__(self, data=None, index=None, columns=None, kind='block',
-                 default_fill_value=None):
+    def __init__(self, data=None, index=None, columns=None,
+                 default_kind='block', default_fill_value=None):
         if default_fill_value is None:
             default_fill_value = nan
 
-        self.default_kind = kind
+        self.default_kind = default_kind
         self.default_fill_value = default_fill_value
 
         DataFrame.__init__(self, data, index=index, columns=columns,
@@ -548,7 +545,7 @@ class SparseDataFrame(DataFrame):
 
     def __array_wrap__(self, result):
         return SparseDataFrame(result, index=self.index, columns=self.columns,
-                               kind=self.default_kind,
+                               default_kind=self.default_kind,
                                default_fill_value=self.default_fill_value)
 
     @property
@@ -558,9 +555,7 @@ class SparseDataFrame(DataFrame):
     def _init_dict(self, data, index, columns, dtype):
         # pre-filter out columns if we passed it
         if columns is not None:
-            if not isinstance(columns, Index):
-                columns = Index(columns)
-
+            columns = _ensure_index(columns)
             data = dict((k, v) for k, v in data.iteritems() if k in columns)
         else:
             columns = Index(try_sort(data.keys()))
@@ -629,7 +624,7 @@ class SparseDataFrame(DataFrame):
         return SparseDataFrame(self._series, index=self.index,
                                columns=self.columns,
                                default_fill_value=self.default_fill_value,
-                               kind=self.default_kind)
+                               default_kind=self.default_kind)
 
     @property
     def density(self):
@@ -757,17 +752,27 @@ def homogenize(series_dict):
     Conform a set of SparseSeries (with NaN fill_value) to a common SparseIndex
     corresponding to the locations where they all have data
 
+    Parameters
+    ----------
+    series_dict : dict or DataFrame
+
     Notes
     -----
     Using the dumbest algorithm I could think of. Should put some more thought
     into this
 
+    Returns
+    -------
+    homogenized : dict of SparseSeries
     """
     index = None
 
     need_reindex = False
 
     for _, series in series_dict.iteritems():
+        if not np.isnan(series.fill_value):
+            raise Exception('this method is only valid with NaN fill values')
+
         if index is None:
             index = series.sp_index
         elif not series.sp_index.equals(index):
@@ -777,24 +782,64 @@ def homogenize(series_dict):
     if need_reindex:
         output = {}
         for name, series in series_dict.iteritems():
-            output[name] = series.sparse_reindex(index)
+            if not series.sp_index.equals(index):
+                series = series.sparse_reindex(index)
+
+            output[name] = series
     else:
         output = series_dict
 
     return output
 
+def _convert_frames(frames, index, columns, default_fill=nan,
+                    default_kind='block'):
+    from pandas.core.panel import _get_combined_index, _get_combined_columns
+
+    output = {}
+    for item, df in frames.iteritems():
+        if not isinstance(df, SparseDataFrame):
+            df = SparseDataFrame(output, default_kind=default_kind,
+                                 default_fill_value=default_fill_value)
+
+        output[item] = df
+
+    if index is None:
+        index = _get_combined_index(output)
+    if columns is None:
+        columns = _get_combined_columns(output)
+
+    index = _ensure_index(index)
+    columns = _ensure_index(columns)
+
+    for item, df in output.iteritems():
+        if not (df.index.equals(index) and df.columns.equals(columns)):
+            output[item] = df.reindex(index=index, columns=columns)
+
+    return output, index, columns
+
 class SparseWidePanel(WidePanel):
     """
 
 
 
     """
-    def __init__(self, frames, items=None, major_axis=None, minor_axis=None):
+    def __init__(self, frames, items=None, major_axis=None, minor_axis=None,
+                 default_fill_value=nan, default_kind='block'):
         assert(isinstance(frames, dict))
 
-        self.frames = frames
+        self.default_fill_value = fill_value = default_fill_value
+        self.default_kind = kind = default_kind
+
+        # pre-filter, if necessary
+        if items is None:
+            self.items = Index(sorted(frames.keys()))
+        items = _ensure_index(items)
 
-        self.items = Index(sorted(frames))
+        clean_frames, index, columns = _convert_frames(frames, major_axis,
+                                                       minor_axis, kind=kind,
+                                                       fill_value=fill_value)
+
+        self.frames = frames
         self.major_axis = foo
 
     @classmethod
diff --git a/pandas/core/tests/test_sparse.py b/pandas/core/tests/test_sparse.py
index 40592f2ab..5d34be312 100644
--- a/pandas/core/tests/test_sparse.py
+++ b/pandas/core/tests/test_sparse.py
@@ -182,6 +182,9 @@ class TestSparseSeries(TestCase):
         sp.sp_values[:5] = 100
         self.assert_(values[0] == 97)
 
+    def test_constructor_ndarray(self):
+        pass
+
     def test_constructor_nonnan(self):
         arr = [0, 0, 0, nan, nan]
         sp_series = SparseSeries(arr, fill_value=0)
@@ -483,6 +486,33 @@ class TestSparseSeries(TestCase):
         check_func(self.zbseries)
         check_func(self.ziseries)
 
+    def test_homogenize(self):
+        def _check_matches(indices, expected):
+            data = {}
+            for i, idx in enumerate(indices):
+                data[i] = SparseSeries(idx.to_int_index().indices,
+                                       sparse_index=idx)
+            homogenized = spm.homogenize(data)
+
+            for k, v in homogenized.iteritems():
+                assert(v.sp_index.equals(expected))
+
+        indices1 = [BlockIndex(10, [2], [7]),
+                   BlockIndex(10, [1, 6], [3, 4]),
+                   BlockIndex(10, [0], [10])]
+        expected1 = BlockIndex(10, [2, 6], [2, 3])
+        _check_matches(indices1, expected1)
+
+        indices2 = [BlockIndex(10, [2], [7]),
+                   BlockIndex(10, [2], [7])]
+        expected2 = indices2[0]
+        _check_matches(indices2, expected2)
+
+        # must have NaN fill value
+        data = {'a' : SparseSeries(np.arange(7), sparse_index=expected2,
+                                   fill_value=0)}
+        nose.tools.assert_raises(Exception, spm.homogenize, data)
+
 class TestSparseTimeSeries(TestCase):
     pass
 
@@ -499,7 +529,7 @@ class TestSparseDataFrame(TestCase):
 
         self.frame = SparseDataFrame(self.data, index=self.dates)
         self.iframe = SparseDataFrame(self.data, index=self.dates,
-                                      kind='integer')
+                                      default_kind='integer')
 
         values = self.frame.values.copy()
         values[np.isnan(values)] = 0
@@ -765,8 +795,81 @@ class TestSparseDataFrame(TestCase):
         check_func(self.zframe)
         check_func(self.fill_frame)
 
+def panel_data1():
+    index = DateRange('1/1/2011', periods=8)
+
+    return DataFrame({
+        'a' : [nan, nan, nan, 0, 1, 2, 3, 4],
+        'b' : [0, 1, 2, 3, 4, nan, nan, nan],
+        'c' : [0, 1, 2, nan, nan, nan, 3, 4],
+        'd' : [nan, 0, 1, nan, 2, 3, 4, nan]
+        }, index=index)
+
+
+def panel_data2():
+    index = DateRange('1/1/2011', periods=9)
+
+    return DataFrame({
+        'a' : [nan, nan, nan, 0, 1, 2, 3, 4, 5],
+        'b' : [0, 1, 2, 3, 4, 5, nan, nan, nan],
+        'c' : [0, 1, 2, nan, nan, nan, 3, 4, 5],
+        'd' : [nan, 0, 1, nan, 2, 3, 4, 5, nan]
+        }, index=index)
+
+
+def panel_data3():
+    index = DateRange('1/1/2011', periods=10).shift(-2)
+
+    return DataFrame({
+        'a' : [nan, nan, nan, 0, 1, 2, 3, 4, 5, 6],
+        'b' : [0, 1, 2, 3, 4, 5, 6, nan, nan, nan],
+        'c' : [0, 1, 2, nan, nan, nan, 3, 4, 5, 6],
+        'd' : [nan, 0, 1, nan, 2, 3, 4, 5, 6, nan]
+        }, index=index)
+
 class TestSparseWidePanel(TestCase):
-    pass
+
+    def setUp(self):
+        pass
+
+    def test_from_dict(self):
+        pass
+
+    def test_to_long(self):
+        pass
+
+    def test_long_to_wide_sparse(self):
+        pass
+
+    def test_values(self):
+        pass
+
+    def test_getitem(self):
+        pass
+
+    def test_delitem_pop(self):
+        pass
+
+    def test_pickle(self):
+        pass
+
+    def test_copy(self):
+        pass
+
+    def test_reindex(self):
+        pass
+
+    def test_operators(self):
+        pass
+
+    def test_truncate(self):
+        pass
+
+    def test_major_xs(self):
+        pass
+
+    def test_minor_xs(self):
+        pass
 
 if __name__ == '__main__':
     import nose
diff --git a/pandas/lib/src/sparse.pyx b/pandas/lib/src/sparse.pyx
index 0f7550086..3b02e3c83 100644
--- a/pandas/lib/src/sparse.pyx
+++ b/pandas/lib/src/sparse.pyx
@@ -123,6 +123,9 @@ cdef class IntIndex(SparseIndex):
         # if is one already, returns self
         y = y_.to_int_index()
 
+        if self.length != y.length:
+            raise Exception('Indices must reference same underlying length')
+
         xindices = self.indices
         yindices = y.indices
 
@@ -154,6 +157,9 @@ cdef class IntIndex(SparseIndex):
         # if is one already, returns self
         y = y_.to_int_index()
 
+        if self.length != y.length:
+            raise Exception('Indices must reference same underlying length')
+
         xindices = self.indices
         yindices = y.indices
 
@@ -407,6 +413,9 @@ cdef class BlockIndex(SparseIndex):
 
         y = other.to_block_index()
 
+        if self.length != y.length:
+            raise Exception('Indices must reference same underlying length')
+
         xloc = self.blocs
         xlen = self.blengths
         yloc = y.blocs
@@ -550,6 +559,9 @@ cdef class BlockMerge(object):
         self.x = x
         self.y = y
 
+        if x.length != y.length:
+            raise Exception('Indices must reference same underlying length')
+
         self.xstart = self.x.blocs
         self.ystart = self.y.blocs
 
diff --git a/pandas/lib/tests/test_libsparse.py b/pandas/lib/tests/test_libsparse.py
index 27df5bc86..c796a2e23 100644
--- a/pandas/lib/tests/test_libsparse.py
+++ b/pandas/lib/tests/test_libsparse.py
@@ -180,6 +180,31 @@ def test_lookup():
 
     # corner cases
 
+def test_intersect():
+    def _check_correct(a, b, expected):
+        result = a.intersect(b)
+        assert(result.equals(expected))
+
+    def _check_length_exc(a, longer):
+        nose.tools.assert_raises(Exception, a.intersect, longer)
+
+    def _check_case(xloc, xlen, yloc, ylen, eloc, elen):
+        xindex = BlockIndex(TEST_LENGTH, xloc, xlen)
+        yindex = BlockIndex(TEST_LENGTH, yloc, ylen)
+        expected = BlockIndex(TEST_LENGTH, eloc, elen)
+        longer_index = BlockIndex(TEST_LENGTH + 1, yloc, ylen)
+
+        _check_correct(xindex, yindex, expected)
+        _check_correct(xindex.to_int_index(),
+                       yindex.to_int_index(),
+                       expected.to_int_index())
+
+        _check_length_exc(xindex, longer_index)
+        _check_length_exc(xindex.to_int_index(),
+                          longer_index.to_int_index())
+
+    check_cases(_check_case)
+
 class TestBlockIndex(TestCase):
 
     def test_equals(self):
@@ -204,19 +229,6 @@ class TestBlockIndex(TestCase):
         # block overlap
         self.assertRaises(Exception, BlockIndex, 10, [2, 5], [5, 3])
 
-    def test_intersect(self):
-        def _check_case(xloc, xlen, yloc, ylen, eloc, elen):
-            xindex = BlockIndex(TEST_LENGTH, xloc, xlen)
-            yindex = BlockIndex(TEST_LENGTH, yloc, ylen)
-            result = xindex.intersect(yindex)
-
-            self.assert_(isinstance(result, BlockIndex))
-
-            assert_equal(result.blocs, eloc)
-            assert_equal(result.blengths, elen)
-
-        check_cases(_check_case)
-
     def test_to_int_index(self):
         locs = [0, 10]
         lengths = [4, 6]
@@ -255,24 +267,6 @@ class TestIntIndex(TestCase):
         index = IntIndex(10, [2, 3, 4, 5, 6])
         self.assert_(index.to_int_index() is index)
 
-    def test_intersect(self):
-
-        def _check_case(xloc, xlen, yloc, ylen, eloc, elen):
-            xindex = BlockIndex(TEST_LENGTH, xloc, xlen).to_int_index()
-            yindex = BlockIndex(TEST_LENGTH, yloc, ylen).to_int_index()
-            expected = BlockIndex(TEST_LENGTH, eloc, elen).to_int_index()
-
-            result = xindex.intersect(yindex)
-            self.assert_(isinstance(result, IntIndex))
-
-            assert_equal(result.indices, expected.indices)
-
-        check_cases(_check_case)
-
-    def test_make_union(self):
-        # TODO
-        pass
-
 class TestSparseOperators(TestCase):
 
     def _nan_op_tests(self, sparse_op, python_op):
diff --git a/pandas/stats/plm.py b/pandas/stats/plm.py
index a8dab30d7..0649ccfea 100644
--- a/pandas/stats/plm.py
+++ b/pandas/stats/plm.py
@@ -14,9 +14,9 @@ from pandas.core.panel import WidePanel, LongPanel
 from pandas.core.matrix import DataFrame, DataMatrix
 from pandas.core.series import Series
 from pandas.stats.ols import OLS, MovingOLS
-from pandas.util.decorators import cache_readonly
 import pandas.stats.common as common
 import pandas.stats.math as math
+from pandas.util.decorators import cache_readonly
 
 class PanelOLS(OLS):
     """Implements panel OLS.
