commit 1c7d19466caf36c7cde09ff6cf3b7726025c65c4
Author: Sinhrks <sinhrks@gmail.com>
Date:   Wed Aug 10 21:25:05 2016 +0900

    COMPAT: use mpl area legend if available (#13680)

diff --git a/doc/source/whatsnew/v0.19.0.txt b/doc/source/whatsnew/v0.19.0.txt
index 30a0d918b..b98cbcd35 100644
--- a/doc/source/whatsnew/v0.19.0.txt
+++ b/doc/source/whatsnew/v0.19.0.txt
@@ -853,6 +853,7 @@ Bug Fixes
 - Bug in ``pd.read_csv()``, which caused BOM files to be incorrectly parsed by not ignoring the BOM (:issue:`4793`)
 - Bug in ``io.json.json_normalize()``, where non-ascii keys raised an exception (:issue:`13213`)
 - Bug when passing a not-default-indexed ``Series`` as ``xerr`` or ``yerr`` in ``.plot()`` (:issue:`11858`)
+- Bug in area plot draws legend incorrectly if subplot is enabled or legend is moved after plot (matplotlib 1.5.0 is required to draw area plot legend properly) (issue:`9161`, :issue:`13544`)
 - Bug in matplotlib ``AutoDataFormatter``; this restores the second scaled formatting and re-adds micro-second scaled formatting (:issue:`13131`)
 - Bug in selection from a ``HDFStore`` with a fixed format and ``start`` and/or ``stop`` specified will now return the selected range (:issue:`8287`)
 - Bug in ``Series`` construction from a tuple of integers on windows not returning default dtype (int64) (:issue:`13646`)
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index 4cf3364a0..a61a21d25 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -1839,10 +1839,16 @@ class AreaPlot(LinePlot):
     @classmethod
     def _plot(cls, ax, x, y, style=None, column_num=None,
               stacking_id=None, is_errorbar=False, **kwds):
+
         if column_num == 0:
             cls._initialize_stacker(ax, stacking_id, len(y))
         y_values = cls._get_stacked_values(ax, stacking_id, y, kwds['label'])
-        lines = MPLPlot._plot(ax, x, y_values, style=style, **kwds)
+
+        # need to remove label, because subplots uses mpl legend as it is
+        line_kwds = kwds.copy()
+        if cls.mpl_ge_1_5_0():
+            line_kwds.pop('label')
+        lines = MPLPlot._plot(ax, x, y_values, style=style, **line_kwds)
 
         # get data from the line to get coordinates for fill_between
         xdata, y_values = lines[0].get_data(orig=False)
@@ -1860,18 +1866,21 @@ class AreaPlot(LinePlot):
         if 'color' not in kwds:
             kwds['color'] = lines[0].get_color()
 
-        if cls.mpl_ge_1_5_0():  # mpl 1.5 added real support for poly legends
-            kwds.pop('label')
-        ax.fill_between(xdata, start, y_values, **kwds)
+        rect = ax.fill_between(xdata, start, y_values, **kwds)
         cls._update_stacker(ax, stacking_id, y)
-        return lines
+
+        # LinePlot expects list of artists
+        res = [rect] if cls.mpl_ge_1_5_0() else lines
+        return res
 
     def _add_legend_handle(self, handle, label, index=None):
-        from matplotlib.patches import Rectangle
-        # Because fill_between isn't supported in legend,
-        # specifically add Rectangle handle here
-        alpha = self.kwds.get('alpha', None)
-        handle = Rectangle((0, 0), 1, 1, fc=handle.get_color(), alpha=alpha)
+        if not self.mpl_ge_1_5_0():
+            from matplotlib.patches import Rectangle
+            # Because fill_between isn't supported in legend,
+            # specifically add Rectangle handle here
+            alpha = self.kwds.get('alpha', None)
+            handle = Rectangle((0, 0), 1, 1, fc=handle.get_color(),
+                               alpha=alpha)
         LinePlot._add_legend_handle(self, handle, label, index=index)
 
     def _post_plot_logic(self, ax, data):
