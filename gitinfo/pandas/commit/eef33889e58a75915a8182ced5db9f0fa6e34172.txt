commit eef33889e58a75915a8182ced5db9f0fa6e34172
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue May 17 15:23:25 2011 -0400

    some plm optimizations. sparse wide panel *may* be working in it now

diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index ffc75a115..1eb8162b0 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -18,6 +18,8 @@ import pandas.core.common as common
 from pandas.lib.sparse import BlockIndex, IntIndex
 import pandas.lib.sparse as splib
 
+from pandas.util.testing import set_trace
+
 def make_sparse(arr, kind='block', fill_value=nan):
     """
     Convert ndarray to sparse format
@@ -221,7 +223,10 @@ class SparseSeries(Series):
         index = _ensure_index(index)
 
         # Create array, do *not* copy data by default
-        subarr = np.array(values, dtype=np.float64, copy=copy)
+        if copy:
+            subarr = np.array(values, dtype=np.float64, copy=True)
+        else:
+            subarr = np.asarray(values, dtype=np.float64)
 
         if index.is_all_dates():
             cls = SparseTimeSeries
diff --git a/pandas/lib/bench_sparse.py b/pandas/lib/bench_sparse.py
index fe0a186bd..c22980fb5 100644
--- a/pandas/lib/bench_sparse.py
+++ b/pandas/lib/bench_sparse.py
@@ -36,18 +36,57 @@ else:
 
 dm = DataMatrix.load(pth)
 
-data = {}
-for col, ser in dm.iteritems():
-    data[col] = SparseSeries(ser)
+sdf = dm.to_sparse()
+
+def new_data_like(sdf):
+    new_data = {}
+    for col, series in sdf.iteritems():
+        new_data[col] = SparseSeries(np.random.randn(len(series.sp_values)),
+                                     index=sdf.index,
+                                     sparse_index=series.sp_index,
+                                     fill_value=series.fill_value)
+
+    return SparseDataFrame(new_data)
+
+# data = {}
+# for col, ser in dm.iteritems():
+#     data[col] = SparseSeries(ser)
 
 dwp = WidePanel.fromDict({'foo' : dm})
+# sdf = SparseDataFrame(data)
 
-sdf = SparseDataFrame(data)
 
 lp = stack_sparse_frame(sdf)
 
+
 swp = SparseWidePanel({'A' : sdf})
 swp = SparseWidePanel({'A' : sdf,
                        'B' : sdf,
                        'C' : sdf,
                        'D' : sdf})
+
+y = sdf
+x = SparseWidePanel({'x1' : sdf + new_data_like(sdf) / 10,
+                     'x2' : sdf + new_data_like(sdf) / 10})
+
+dense_y = sdf
+dense_x = x.to_dense()
+
+# import hotshot, hotshot.stats
+# prof = hotshot.Profile('test.prof')
+
+# benchtime, stones = prof.runcall(ols, y=y, x=x)
+
+# prof.close()
+
+# stats = hotshot.stats.load('test.prof')
+
+dense_model = ols(y=dense_y, x=dense_x)
+
+import pandas.stats.plm as plm
+import pandas.stats.interface as face
+reload(plm)
+reload(face)
+
+# model = face.ols(y=y, x=x)
+
diff --git a/pandas/stats/plm.py b/pandas/stats/plm.py
index 2eceb474b..03483e9aa 100644
--- a/pandas/stats/plm.py
+++ b/pandas/stats/plm.py
@@ -13,6 +13,7 @@ import numpy as np
 from pandas.core.panel import WidePanel, LongPanel
 from pandas.core.matrix import DataFrame, DataMatrix
 from pandas.core.series import Series
+from pandas.core.sparse import SparseWidePanel
 from pandas.stats.ols import OLS, MovingOLS
 import pandas.stats.common as common
 import pandas.stats.math as math
@@ -147,16 +148,19 @@ class PanelOLS(OLS):
 
         """
         data = self._x_orig
+        cat_mapping = {}
 
         if isinstance(data, LongPanel):
-            cat_mapping = {}
-            data = data.toWide()
-
+            data = data.to_wide()
         else:
-            data, cat_mapping = self._convert_x(data)
+            if isinstance(data, WidePanel):
+                data = data.copy()
+
+            if not isinstance(data, SparseWidePanel):
+                data, cat_mapping = self._convert_x(data)
 
             if not isinstance(data, WidePanel):
-                data = WidePanel.fromDict(data, intersect=True)
+                data = WidePanel.from_dict(data, intersect=True)
 
         x_names = data.items
 
@@ -164,11 +168,11 @@ class PanelOLS(OLS):
             data['__weights__'] = self._weights
 
         # Filter x's without y (so we can make a prediction)
-        filtered = data.toLong()
+        filtered = data.to_long()
 
-        # Filter all data together using toLong
+        # Filter all data together using to_long
         data['__y__'] = self._y_orig
-        data_long = data.toLong()
+        data_long = data.to_long()
 
         x_filt = filtered.filter(x_names)
 
@@ -194,7 +198,7 @@ class PanelOLS(OLS):
         # provides the reverse mapping.  For example, if 'A' was converted to 0
         # for x named 'variety', then x_conversion['variety'][0] is 'A'.
         x_converted = {}
-        x_conversion = {}
+        cat_mapping = {}
         for key, df in x.iteritems():
             if not isinstance(df, DataFrame):
                 raise TypeError('Input X data set contained an object of '
@@ -205,14 +209,15 @@ class PanelOLS(OLS):
             else:
                 values = df.values
                 distinct_values = sorted(set(values.flat))
-                x_conversion[key] = dict(enumerate(distinct_values))
+                cat_mapping[key] = dict(enumerate(distinct_values))
                 new_values = np.searchsorted(distinct_values, values)
                 x_converted[key] = DataMatrix(new_values, index=df.index,
                                               columns=df.columns)
 
-        data = x_converted.copy()
+        if len(cat_mapping) == 0:
+            x_converted = x
 
-        return data, x_conversion
+        return x_converted, cat_mapping
 
     def _add_dummies(self, panel, mapping):
         """
@@ -488,7 +493,7 @@ class PanelOLS(OLS):
         panel = LongPanel(vec.reshape((len(vec), 1)), ['dummy'],
                           index=index)
 
-        return panel.toWide()['dummy']
+        return panel.to_wide()['dummy']
 
     def _unstack_y(self, vec):
         unstacked = self._unstack_vector(vec)
