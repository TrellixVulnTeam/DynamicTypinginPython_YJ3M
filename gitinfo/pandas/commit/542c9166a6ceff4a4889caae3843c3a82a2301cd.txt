commit 542c9166a6ceff4a4889caae3843c3a82a2301cd
Author: Jeff Reback <jeff@reback.net>
Date:   Tue Feb 7 13:50:37 2017 -0500

    TST/STYLE: remove multiprocess nose flags and slight PEP fixes
    
    xref https://github.com/pandas-dev/pandas/pull/13856#issuecomment-278058522
    
    Author: Jeff Reback <jeff@reback.net>
    
    Closes #15333 from jreback/mcs and squashes the following commits:
    
    2edc842 [Jeff Reback] TST/STYLE: remove multiprocess nose flags and slight PEP fixes

diff --git a/pandas/__init__.py b/pandas/__init__.py
index 2d91c9714..9133e11be 100644
--- a/pandas/__init__.py
+++ b/pandas/__init__.py
@@ -15,7 +15,8 @@ for dependency in hard_dependencies:
         missing_dependencies.append(dependency)
 
 if missing_dependencies:
-    raise ImportError("Missing required dependencies {0}".format(missing_dependencies))
+    raise ImportError(
+        "Missing required dependencies {0}".format(missing_dependencies))
 del hard_dependencies, dependency, missing_dependencies
 
 # numpy compat
@@ -24,7 +25,8 @@ from pandas.compat.numpy import *
 try:
     from pandas import hashtable, tslib, lib
 except ImportError as e:  # pragma: no cover
-    module = str(e).lstrip('cannot import name ')  # hack but overkill to use re
+    # hack but overkill to use re
+    module = str(e).lstrip('cannot import name ')
     raise ImportError("C extension: {0} not built. If you want to import "
                       "pandas from the source directory, you may need to run "
                       "'python setup.py build_ext --inplace --force' to build "
@@ -61,5 +63,5 @@ del NoseTester
 # use the closest tagged version if possible
 from ._version import get_versions
 v = get_versions()
-__version__ = v.get('closest-tag',v['version'])
+__version__ = v.get('closest-tag', v['version'])
 del get_versions, v
diff --git a/pandas/_version.py b/pandas/_version.py
index 77b2fdca5..d764923fd 100644
--- a/pandas/_version.py
+++ b/pandas/_version.py
@@ -157,7 +157,7 @@ def git_versions_from_keywords(keywords, tag_prefix, verbose):
         # "stabilization", as well as "HEAD" and "master".
         tags = set([r for r in refs if re.search(r'\d', r)])
         if verbose:
-            print("discarding '%s', no digits" % ",".join(refs-tags))
+            print("discarding '%s', no digits" % ",".join(refs - tags))
     if verbose:
         print("likely tags: %s" % ",".join(sorted(tags)))
     for ref in sorted(tags):
diff --git a/pandas/api/tests/test_api.py b/pandas/api/tests/test_api.py
index f925fd792..02165d82d 100644
--- a/pandas/api/tests/test_api.py
+++ b/pandas/api/tests/test_api.py
@@ -8,8 +8,6 @@ from pandas import api
 from pandas.api import types
 from pandas.util import testing as tm
 
-_multiprocess_can_split_ = True
-
 
 class Base(object):
 
diff --git a/pandas/compat/__init__.py b/pandas/compat/__init__.py
index 532f96046..7ebdd9735 100644
--- a/pandas/compat/__init__.py
+++ b/pandas/compat/__init__.py
@@ -79,25 +79,25 @@ if PY3:
         args = [
             p.name for p in sig.parameters.values()
             if p.kind == inspect.Parameter.POSITIONAL_OR_KEYWORD
-            ]
+        ]
         varargs = [
             p.name for p in sig.parameters.values()
             if p.kind == inspect.Parameter.VAR_POSITIONAL
-            ]
+        ]
         varargs = varargs[0] if varargs else None
         keywords = [
             p.name for p in sig.parameters.values()
             if p.kind == inspect.Parameter.VAR_KEYWORD
-            ]
+        ]
         keywords = keywords[0] if keywords else None
         defaults = [
             p.default for p in sig.parameters.values()
             if p.kind == inspect.Parameter.POSITIONAL_OR_KEYWORD
             and p.default is not p.empty
-            ] or None
-        argspec = namedtuple('Signature',['args','defaults',
-                                'varargs','keywords'])
-        return argspec(args,defaults,varargs,keywords)
+        ] or None
+        argspec = namedtuple('Signature', ['args', 'defaults',
+                                           'varargs', 'keywords'])
+        return argspec(args, defaults, varargs, keywords)
 
     # have to explicitly put builtins into the namespace
     range = range
@@ -170,7 +170,7 @@ if PY2:
     def itervalues(obj, **kw):
         return obj.itervalues(**kw)
 
-    next = lambda it : it.next()
+    next = lambda it: it.next()
 else:
     def iteritems(obj, **kw):
         return iter(obj.items(**kw))
@@ -183,6 +183,7 @@ else:
 
     next = next
 
+
 def bind_method(cls, name, func):
     """Bind a method to class, python 2 and python 3 compatible.
 
@@ -307,7 +308,8 @@ else:
         f.__name__ = name
         return f
 
-    class ResourceWarning(Warning): pass
+    class ResourceWarning(Warning):
+        pass
 
 string_and_binary_types = string_types + (binary_type,)
 
@@ -398,14 +400,18 @@ def is_platform_little_endian():
     """ am I little endian """
     return sys.byteorder == 'little'
 
+
 def is_platform_windows():
     return sys.platform == 'win32' or sys.platform == 'cygwin'
 
+
 def is_platform_linux():
     return sys.platform == 'linux2'
 
+
 def is_platform_mac():
     return sys.platform == 'darwin'
 
+
 def is_platform_32bit():
     return struct.calcsize("P") * 8 < 64
diff --git a/pandas/compat/chainmap.py b/pandas/compat/chainmap.py
index 9edd2ef05..cf1cad569 100644
--- a/pandas/compat/chainmap.py
+++ b/pandas/compat/chainmap.py
@@ -5,6 +5,7 @@ except ImportError:
 
 
 class DeepChainMap(ChainMap):
+
     def __setitem__(self, key, value):
         for mapping in self.maps:
             if key in mapping:
diff --git a/pandas/compat/numpy/function.py b/pandas/compat/numpy/function.py
index 895a37645..72e89586d 100644
--- a/pandas/compat/numpy/function.py
+++ b/pandas/compat/numpy/function.py
@@ -27,6 +27,7 @@ from pandas.compat import OrderedDict
 
 
 class CompatValidator(object):
+
     def __init__(self, defaults, fname=None, method=None,
                  max_fname_arg_count=None):
         self.fname = fname
diff --git a/pandas/compat/pickle_compat.py b/pandas/compat/pickle_compat.py
index 7ed9e7ff9..1cdf8afd5 100644
--- a/pandas/compat/pickle_compat.py
+++ b/pandas/compat/pickle_compat.py
@@ -9,6 +9,7 @@ import pickle as pkl
 from pandas import compat, Index
 from pandas.compat import u, string_types
 
+
 def load_reduce(self):
     stack = self.stack
     args = stack.pop()
@@ -34,7 +35,7 @@ def load_reduce(self):
                 pass
 
         # try to reencode the arguments
-        if getattr(self,'encoding',None) is not None:
+        if getattr(self, 'encoding', None) is not None:
             args = tuple([arg.encode(self.encoding)
                           if isinstance(arg, string_types)
                           else arg for arg in args])
@@ -44,7 +45,7 @@ def load_reduce(self):
             except:
                 pass
 
-        if getattr(self,'is_verbose',None):
+        if getattr(self, 'is_verbose', None):
             print(sys.exc_info())
             print(func, args)
         raise
@@ -61,6 +62,7 @@ else:
 Unpickler.dispatch = copy.copy(Unpickler.dispatch)
 Unpickler.dispatch[pkl.REDUCE[0]] = load_reduce
 
+
 def load_newobj(self):
     args = self.stack.pop()
     cls = self.stack[-1]
@@ -75,6 +77,8 @@ def load_newobj(self):
 Unpickler.dispatch[pkl.NEWOBJ[0]] = load_newobj
 
 # py3 compat
+
+
 def load_newobj_ex(self):
     kwargs = self.stack.pop()
     args = self.stack.pop()
@@ -91,6 +95,7 @@ try:
 except:
     pass
 
+
 def load(fh, encoding=None, compat=False, is_verbose=False):
     """load a pickle, with a provided encoding
 
diff --git a/pandas/computation/tests/test_eval.py b/pandas/computation/tests/test_eval.py
index dbac72c61..aa05626af 100644
--- a/pandas/computation/tests/test_eval.py
+++ b/pandas/computation/tests/test_eval.py
@@ -201,7 +201,7 @@ class TestEvalNumexprPandas(tm.TestCase):
                                                                 binop=binop,
                                                                 cmp2=cmp2)
         scalar_with_in_notin = (is_scalar(rhs) and (cmp1 in skip_these or
-                                                      cmp2 in skip_these))
+                                                    cmp2 in skip_these))
         if scalar_with_in_notin:
             with tm.assertRaises(TypeError):
                 pd.eval(ex, engine=self.engine, parser=self.parser)
@@ -702,7 +702,6 @@ class TestEvalNumexprPandas(tm.TestCase):
         tm.assert_frame_equal(expected, result)
 
 
-
 class TestEvalNumexprPython(TestEvalNumexprPandas):
 
     @classmethod
@@ -782,6 +781,7 @@ ENGINES_PARSERS = list(product(_engines, expr._parsers))
 # typecasting rules consistency with python
 # issue #12388
 
+
 class TestTypeCasting(object):
 
     def check_binop_typecasting(self, engine, parser, op, dt):
@@ -803,7 +803,8 @@ class TestTypeCasting(object):
         for engine, parser in ENGINES_PARSERS:
             for op in ['+', '-', '*', '**', '/']:
                 # maybe someday... numexpr has too many upcasting rules now
-                #for dt in chain(*(np.sctypes[x] for x in ['uint', 'int', 'float'])):
+                # for dt in chain(*(np.sctypes[x] for x in ['uint', 'int',
+                # 'float'])):
                 for dt in [np.float32, np.float64]:
                     yield self.check_binop_typecasting, engine, parser, op, dt
 
@@ -1969,10 +1970,11 @@ def test_negate_lt_eq_le():
     for engine, parser in product(_engines, expr._parsers):
         yield check_negate_lt_eq_le, engine, parser
 
+
 class TestValidate(tm.TestCase):
 
     def test_validate_bool_args(self):
-        invalid_values = [1, "True", [1,2,3], 5.0]
+        invalid_values = [1, "True", [1, 2, 3], 5.0]
 
         for value in invalid_values:
             with self.assertRaises(ValueError):
diff --git a/pandas/core/base.py b/pandas/core/base.py
index e7a79c329..657da859d 100644
--- a/pandas/core/base.py
+++ b/pandas/core/base.py
@@ -230,6 +230,7 @@ class PandasDelegate(PandasObject):
 class AccessorProperty(object):
     """Descriptor for implementing accessor properties like Series.str
     """
+
     def __init__(self, accessor_cls, construct_accessor):
         self.accessor_cls = accessor_cls
         self.construct_accessor = construct_accessor
@@ -651,6 +652,7 @@ class GroupByMixin(object):
     @staticmethod
     def _dispatch(name, *args, **kwargs):
         """ dispatch to apply """
+
         def outer(self, *args, **kwargs):
             def f(x):
                 x = self._shallow_copy(x, groupby=self._groupby)
diff --git a/pandas/core/config.py b/pandas/core/config.py
index 618de4e02..ed63c865e 100644
--- a/pandas/core/config.py
+++ b/pandas/core/config.py
@@ -215,6 +215,7 @@ class DictWrapper(object):
 
 
 class CallableDynamicDoc(object):
+
     def __init__(self, func, doc_tmpl):
         self.__doc_tmpl__ = doc_tmpl
         self.__func__ = func
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index cc81c6610..79bdad82a 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -5326,9 +5326,10 @@ class DataFrame(NDFrame):
                                 "allowed to be passed to DataFrame.isin(), "
                                 "you passed a "
                                 "{0!r}".format(type(values).__name__))
-            return DataFrame(lib.ismember(self.values.ravel(),
+            return DataFrame(
+                lib.ismember(self.values.ravel(),
                              set(values)).reshape(self.shape), self.index,
-                             self.columns)
+                self.columns)
 
     # ----------------------------------------------------------------------
     # Deprecated stuff
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 40050d6d7..6bb2d1c47 100755
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -42,6 +42,7 @@ _NS = slice(None, None)
 
 # the public IndexSlicerMaker
 class _IndexSlice(object):
+
     def __getitem__(self, arg):
         return arg
 
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 289ce150e..f0b1516d7 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -5122,6 +5122,7 @@ def trim_join_unit(join_unit, length):
 
 
 class JoinUnit(object):
+
     def __init__(self, block, shape, indexers=None):
         # Passing shape explicitly is required for cases when block is None.
         if indexers is None:
diff --git a/pandas/core/nanops.py b/pandas/core/nanops.py
index 1f76bc850..0cc3a2d03 100644
--- a/pandas/core/nanops.py
+++ b/pandas/core/nanops.py
@@ -26,6 +26,7 @@ from pandas.core.common import _values_from_object
 
 
 class disallow(object):
+
     def __init__(self, *dtypes):
         super(disallow, self).__init__()
         self.dtypes = tuple(np.dtype(dtype).type for dtype in dtypes)
@@ -58,6 +59,7 @@ class disallow(object):
 
 
 class bottleneck_switch(object):
+
     def __init__(self, zero_value=None, **kwargs):
         self.zero_value = zero_value
         self.kwargs = kwargs
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index a11ef53de..6da10305e 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -1560,6 +1560,7 @@ Panel._add_numeric_operations()
 
 # legacy
 class WidePanel(Panel):
+
     def __init__(self, *args, **kwargs):
         # deprecation, #10892
         warnings.warn("WidePanel is deprecated. Please use Panel",
@@ -1569,6 +1570,7 @@ class WidePanel(Panel):
 
 
 class LongPanel(DataFrame):
+
     def __init__(self, *args, **kwargs):
         # deprecation, #10892
         warnings.warn("LongPanel is deprecated. Please use DataFrame",
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 9845e1cd4..43f16f690 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -2987,6 +2987,7 @@ def _sanitize_array(data, index, dtype=None, copy=False,
 
 # backwards compatiblity
 class TimeSeries(Series):
+
     def __init__(self, *args, **kwargs):
         # deprecation TimeSeries, #10890
         warnings.warn("TimeSeries is deprecated. Please use Series",
diff --git a/pandas/core/window.py b/pandas/core/window.py
index bda134dd8..50de6b84d 100644
--- a/pandas/core/window.py
+++ b/pandas/core/window.py
@@ -659,6 +659,7 @@ class _GroupByMixin(GroupByMixin):
 
 
 class _Rolling(_Window):
+
     @property
     def _constructor(self):
         return Rolling
@@ -1718,7 +1719,7 @@ def _flex_binary_moment(arg1, arg2, f, pairwise=False):
 
 def _get_center_of_mass(com, span, halflife, alpha):
     valid_count = len([x for x in [com, span, halflife, alpha]
-                      if x is not None])
+                       if x is not None])
     if valid_count > 1:
         raise ValueError("com, span, halflife, and alpha "
                          "are mutually exclusive")
diff --git a/pandas/formats/format.py b/pandas/formats/format.py
index 3bac7d282..439b96d65 100644
--- a/pandas/formats/format.py
+++ b/pandas/formats/format.py
@@ -89,6 +89,7 @@ docstring_to_string = common_docstring + justify_docstring + return_docstring
 
 
 class CategoricalFormatter(object):
+
     def __init__(self, categorical, buf=None, length=True, na_rep='NaN',
                  footer=True):
         self.categorical = categorical
@@ -142,6 +143,7 @@ class CategoricalFormatter(object):
 
 
 class SeriesFormatter(object):
+
     def __init__(self, series, buf=None, length=True, header=True, index=True,
                  na_rep='NaN', name=False, float_format=None, dtype=True,
                  max_rows=None):
@@ -272,6 +274,7 @@ class SeriesFormatter(object):
 
 
 class TextAdjustment(object):
+
     def __init__(self):
         self.encoding = get_option("display.encoding")
 
@@ -287,6 +290,7 @@ class TextAdjustment(object):
 
 
 class EastAsianTextAdjustment(TextAdjustment):
+
     def __init__(self):
         super(EastAsianTextAdjustment, self).__init__()
         if get_option("display.unicode.ambiguous_as_wide"):
@@ -1366,6 +1370,7 @@ def _get_level_lengths(levels, sentinel=''):
 
 
 class CSVFormatter(object):
+
     def __init__(self, obj, path_or_buf=None, sep=",", na_rep='',
                  float_format=None, cols=None, header=True, index=True,
                  index_label=None, mode='w', nanRep=None, encoding=None,
@@ -1950,6 +1955,7 @@ def format_array(values, formatter, float_format=None, na_rep='NaN',
 
 
 class GenericArrayFormatter(object):
+
     def __init__(self, values, digits=7, formatter=None, na_rep='NaN',
                  space=12, float_format=None, justify='right', decimal='.',
                  quoting=None, fixed_width=True):
@@ -2151,6 +2157,7 @@ class FloatArrayFormatter(GenericArrayFormatter):
 
 
 class IntArrayFormatter(GenericArrayFormatter):
+
     def _format_strings(self):
         formatter = self.formatter or (lambda x: '% d' % x)
         fmt_values = [formatter(x) for x in self.values]
@@ -2158,6 +2165,7 @@ class IntArrayFormatter(GenericArrayFormatter):
 
 
 class Datetime64Formatter(GenericArrayFormatter):
+
     def __init__(self, values, nat_rep='NaT', date_format=None, **kwargs):
         super(Datetime64Formatter, self).__init__(values, **kwargs)
         self.nat_rep = nat_rep
@@ -2183,6 +2191,7 @@ class Datetime64Formatter(GenericArrayFormatter):
 
 
 class PeriodArrayFormatter(IntArrayFormatter):
+
     def _format_strings(self):
         from pandas.tseries.period import IncompatibleFrequency
         try:
@@ -2197,6 +2206,7 @@ class PeriodArrayFormatter(IntArrayFormatter):
 
 
 class CategoricalArrayFormatter(GenericArrayFormatter):
+
     def __init__(self, values, *args, **kwargs):
         GenericArrayFormatter.__init__(self, values, *args, **kwargs)
 
@@ -2328,6 +2338,7 @@ def _get_format_datetime64_from_values(values, date_format):
 
 
 class Datetime64TZFormatter(Datetime64Formatter):
+
     def _format_strings(self):
         """ we by definition have a TZ """
 
@@ -2342,6 +2353,7 @@ class Datetime64TZFormatter(Datetime64Formatter):
 
 
 class Timedelta64Formatter(GenericArrayFormatter):
+
     def __init__(self, values, nat_rep='NaT', box=False, **kwargs):
         super(Timedelta64Formatter, self).__init__(values, **kwargs)
         self.nat_rep = nat_rep
diff --git a/pandas/indexes/base.py b/pandas/indexes/base.py
index dcd565ee5..bb2941a12 100644
--- a/pandas/indexes/base.py
+++ b/pandas/indexes/base.py
@@ -168,8 +168,8 @@ class Index(IndexOpsMixin, StringAccessorMixin, PandasObject):
         elif isinstance(data, (np.ndarray, Index, ABCSeries)):
 
             if (is_datetime64_any_dtype(data) or
-               (dtype is not None and is_datetime64_any_dtype(dtype)) or
-               'tz' in kwargs):
+                (dtype is not None and is_datetime64_any_dtype(dtype)) or
+                    'tz' in kwargs):
                 from pandas.tseries.index import DatetimeIndex
                 result = DatetimeIndex(data, copy=copy, name=name,
                                        dtype=dtype, **kwargs)
@@ -3606,7 +3606,7 @@ class Index(IndexOpsMixin, StringAccessorMixin, PandasObject):
                                     typ=type(other))
                                 )
         elif isinstance(other, np.ndarray) and not other.ndim:
-                    other = other.item()
+            other = other.item()
 
         if isinstance(other, (Index, ABCSeries, np.ndarray)):
             if len(self) != len(other):
diff --git a/pandas/indexes/multi.py b/pandas/indexes/multi.py
index 00ead012a..d2469cf1a 100644
--- a/pandas/indexes/multi.py
+++ b/pandas/indexes/multi.py
@@ -1813,7 +1813,7 @@ class MultiIndex(Index):
                                      for k, l in zip(key, self.levels)]
                         can_index_exactly = any(all_dates)
                         if (any([l.is_all_dates
-                                for k, l in zip(key, self.levels)]) and
+                                 for k, l in zip(key, self.levels)]) and
                                 not can_index_exactly):
                             indexer = self.get_loc(key)
 
diff --git a/pandas/io/common.py b/pandas/io/common.py
index 6817c824a..b24acb256 100644
--- a/pandas/io/common.py
+++ b/pandas/io/common.py
@@ -109,6 +109,7 @@ class BaseIterator(object):
     """Subclass this and provide a "__next__()" method to obtain an iterator.
     Useful only when the object being iterated is non-reusable (e.g. OK for a
     parser, not for an in-memory table, yes for its iterator)."""
+
     def __iter__(self):
         return self
 
diff --git a/pandas/io/json/json.py b/pandas/io/json/json.py
index d29f4a371..6fc766081 100644
--- a/pandas/io/json/json.py
+++ b/pandas/io/json/json.py
@@ -23,8 +23,8 @@ def to_json(path_or_buf, obj, orient=None, date_format='epoch',
             default_handler=None, lines=False):
 
     if lines and orient != 'records':
-            raise ValueError(
-                "'lines' keyword only valid when 'orient' is records")
+        raise ValueError(
+            "'lines' keyword only valid when 'orient' is records")
 
     if isinstance(obj, Series):
         s = SeriesWriter(
diff --git a/pandas/io/json/normalize.py b/pandas/io/json/normalize.py
index aa8095423..d684441c5 100644
--- a/pandas/io/json/normalize.py
+++ b/pandas/io/json/normalize.py
@@ -89,7 +89,6 @@ def json_normalize(data, record_path=None, meta=None,
                    meta_prefix=None,
                    record_prefix=None,
                    errors='raise'):
-
     """
     "Normalize" semi-structured JSON data into a flat table
 
diff --git a/pandas/io/sas/sasreader.py b/pandas/io/sas/sasreader.py
index 29e7f131f..3e4d9c902 100644
--- a/pandas/io/sas/sasreader.py
+++ b/pandas/io/sas/sasreader.py
@@ -6,7 +6,6 @@ from pandas import compat
 
 def read_sas(filepath_or_buffer, format=None, index=None, encoding=None,
              chunksize=None, iterator=False):
-
     """
     Read SAS files stored as either XPORT or SAS7BDAT format files.
 
diff --git a/pandas/io/tests/parser/c_parser_only.py b/pandas/io/tests/parser/c_parser_only.py
index 73edda907..11073f3f1 100644
--- a/pandas/io/tests/parser/c_parser_only.py
+++ b/pandas/io/tests/parser/c_parser_only.py
@@ -18,6 +18,7 @@ from pandas.compat import StringIO, range, lrange
 
 
 class CParserTests(object):
+
     def test_buffer_overflow(self):
         # see gh-9205: test certain malformed input files that cause
         # buffer overflows in tokenizer.c
@@ -375,13 +376,13 @@ No,No,No"""
     def test_read_nrows_large(self):
         # gh-7626 - Read only nrows of data in for large inputs (>262144b)
         header_narrow = '\t'.join(['COL_HEADER_' + str(i)
-                                  for i in range(10)]) + '\n'
+                                   for i in range(10)]) + '\n'
         data_narrow = '\t'.join(['somedatasomedatasomedata1'
-                                for i in range(10)]) + '\n'
+                                 for i in range(10)]) + '\n'
         header_wide = '\t'.join(['COL_HEADER_' + str(i)
-                                for i in range(15)]) + '\n'
+                                 for i in range(15)]) + '\n'
         data_wide = '\t'.join(['somedatasomedatasomedata2'
-                              for i in range(15)]) + '\n'
+                               for i in range(15)]) + '\n'
         test_input = (header_narrow + data_narrow * 1050 +
                       header_wide + data_wide * 2)
 
diff --git a/pandas/io/tests/parser/compression.py b/pandas/io/tests/parser/compression.py
index e95617faf..308ca6e8a 100644
--- a/pandas/io/tests/parser/compression.py
+++ b/pandas/io/tests/parser/compression.py
@@ -11,6 +11,7 @@ import pandas.util.testing as tm
 
 
 class CompressionTests(object):
+
     def test_zip(self):
         try:
             import zipfile
diff --git a/pandas/io/tests/parser/converters.py b/pandas/io/tests/parser/converters.py
index 68231d675..2ceaff929 100644
--- a/pandas/io/tests/parser/converters.py
+++ b/pandas/io/tests/parser/converters.py
@@ -19,6 +19,7 @@ from pandas.compat import parse_date, StringIO, lmap
 
 
 class ConverterTests(object):
+
     def test_converters_type_must_be_dict(self):
         data = """index,A,B,C,D
 foo,2,3,4,5
diff --git a/pandas/io/tests/parser/dtypes.py b/pandas/io/tests/parser/dtypes.py
index abcd14e94..fa95c18c4 100644
--- a/pandas/io/tests/parser/dtypes.py
+++ b/pandas/io/tests/parser/dtypes.py
@@ -16,6 +16,7 @@ from pandas.io.common import ParserWarning
 
 
 class DtypeTests(object):
+
     def test_passing_dtype(self):
         # see gh-6607
         df = DataFrame(np.random.rand(5, 2).round(4), columns=list(
diff --git a/pandas/io/tests/parser/parse_dates.py b/pandas/io/tests/parser/parse_dates.py
index e4af1ff70..ad3d5f238 100644
--- a/pandas/io/tests/parser/parse_dates.py
+++ b/pandas/io/tests/parser/parse_dates.py
@@ -25,6 +25,7 @@ from pandas.tseries.index import date_range
 
 
 class ParseDatesTests(object):
+
     def test_separator_date_conflict(self):
         # Regression test for gh-4678: make sure thousands separator and
         # date parsing do not conflict.
diff --git a/pandas/io/tests/parser/python_parser_only.py b/pandas/io/tests/parser/python_parser_only.py
index ad62aaa27..283ff366b 100644
--- a/pandas/io/tests/parser/python_parser_only.py
+++ b/pandas/io/tests/parser/python_parser_only.py
@@ -18,6 +18,7 @@ from pandas.compat import StringIO, BytesIO, u
 
 
 class PythonParserTests(object):
+
     def test_negative_skipfooter_raises(self):
         text = """#foo,a,b,c
 #foo,a,b,c
diff --git a/pandas/io/tests/parser/test_parsers.py b/pandas/io/tests/parser/test_parsers.py
index 93b5fdcff..2ae557a7d 100644
--- a/pandas/io/tests/parser/test_parsers.py
+++ b/pandas/io/tests/parser/test_parsers.py
@@ -32,6 +32,7 @@ class BaseParser(CommentTests, CompressionTests,
                  ParseDatesTests, ParserTests,
                  SkipRowsTests, UsecolsTests,
                  QuotingTests, DtypeTests):
+
     def read_csv(self, *args, **kwargs):
         raise NotImplementedError
 
diff --git a/pandas/io/tests/parser/test_unsupported.py b/pandas/io/tests/parser/test_unsupported.py
index e941c9186..999db47cf 100644
--- a/pandas/io/tests/parser/test_unsupported.py
+++ b/pandas/io/tests/parser/test_unsupported.py
@@ -18,6 +18,7 @@ from pandas.io.parsers import read_csv, read_table
 
 
 class TestUnsupportedFeatures(tm.TestCase):
+
     def test_mangle_dupe_cols_false(self):
         # see gh-12935
         data = 'a b c\n1 2 3'
@@ -111,6 +112,7 @@ x   q   30      3    -0.6662 -0.5243 -0.3580  0.89145  2.5838"""
 
 
 class TestDeprecatedFeatures(tm.TestCase):
+
     def test_deprecated_args(self):
         data = '1,2,3'
 
diff --git a/pandas/io/tests/test_clipboard.py b/pandas/io/tests/test_clipboard.py
index 93d14077a..98a415275 100644
--- a/pandas/io/tests/test_clipboard.py
+++ b/pandas/io/tests/test_clipboard.py
@@ -54,7 +54,7 @@ class TestClipboard(tm.TestCase):
                                              'es': 'en español'.split()})
         # unicode round trip test for GH 13747, GH 12529
         cls.data['utf8'] = pd.DataFrame({'a': ['µasd', 'Ωœ∑´'],
-                                        'b': ['øπ∆˚¬', 'œ∑´®']})
+                                         'b': ['øπ∆˚¬', 'œ∑´®']})
         cls.data_types = list(cls.data.keys())
 
     @classmethod
diff --git a/pandas/io/tests/test_feather.py b/pandas/io/tests/test_feather.py
index dcb057ec3..218175e5e 100644
--- a/pandas/io/tests/test_feather.py
+++ b/pandas/io/tests/test_feather.py
@@ -18,7 +18,6 @@ from pandas.util.testing import assert_frame_equal, ensure_clean
 
 
 class TestFeather(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def setUp(self):
         pass
diff --git a/pandas/io/tests/test_gbq.py b/pandas/io/tests/test_gbq.py
index ac481a44d..0507f0d89 100644
--- a/pandas/io/tests/test_gbq.py
+++ b/pandas/io/tests/test_gbq.py
@@ -294,6 +294,7 @@ class TestGBQConnectorIntegration(tm.TestCase):
 
 
 class TestGBQConnectorServiceAccountKeyPathIntegration(tm.TestCase):
+
     def setUp(self):
         _setup_common()
 
@@ -325,6 +326,7 @@ class TestGBQConnectorServiceAccountKeyPathIntegration(tm.TestCase):
 
 
 class TestGBQConnectorServiceAccountKeyContentsIntegration(tm.TestCase):
+
     def setUp(self):
         _setup_common()
 
@@ -356,6 +358,7 @@ class TestGBQConnectorServiceAccountKeyContentsIntegration(tm.TestCase):
 
 
 class GBQUnitTests(tm.TestCase):
+
     def setUp(self):
         _setup_common()
 
diff --git a/pandas/io/tests/test_packers.py b/pandas/io/tests/test_packers.py
index 6b368bb2b..8a0cfb92b 100644
--- a/pandas/io/tests/test_packers.py
+++ b/pandas/io/tests/test_packers.py
@@ -40,8 +40,6 @@ except ImportError:
 else:
     _ZLIB_INSTALLED = True
 
-_multiprocess_can_split_ = False
-
 
 def check_arbitrary(a, b):
 
@@ -870,7 +868,7 @@ TestPackers
         for f in os.listdir(pth):
             # GH12142 0.17 files packed in P2 can't be read in P3
             if (compat.PY3 and version.startswith('0.17.') and
-               f.split('.')[-4][-1] == '2'):
+                    f.split('.')[-4][-1] == '2'):
                 continue
             vf = os.path.join(pth, f)
             try:
diff --git a/pandas/io/tests/test_pickle.py b/pandas/io/tests/test_pickle.py
index b5c316b32..73a9173e8 100644
--- a/pandas/io/tests/test_pickle.py
+++ b/pandas/io/tests/test_pickle.py
@@ -30,7 +30,6 @@ class TestPickle():
     http://stackoverflow.com/questions/6689537/
     nose-test-generators-inside-class
     """
-    _multiprocess_can_split_ = True
 
     def setUp(self):
         from pandas.io.tests.generate_legacy_storage_files import (
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index f4f03856f..501e744ad 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -50,7 +50,6 @@ from distutils.version import LooseVersion
 _default_compressor = ('blosc' if LooseVersion(tables.__version__) >= '2.2'
                        else 'zlib')
 
-_multiprocess_can_split_ = False
 
 # testing on windows/py3 seems to fault
 # for using compression
diff --git a/pandas/msgpack/exceptions.py b/pandas/msgpack/exceptions.py
index 40f5a8af8..ae0f74a67 100644
--- a/pandas/msgpack/exceptions.py
+++ b/pandas/msgpack/exceptions.py
@@ -15,6 +15,7 @@ class UnpackValueError(UnpackException, ValueError):
 
 
 class ExtraData(ValueError):
+
     def __init__(self, unpacked, extra):
         self.unpacked = unpacked
         self.extra = extra
diff --git a/pandas/sparse/array.py b/pandas/sparse/array.py
index da13726e8..c65e0dd5c 100644
--- a/pandas/sparse/array.py
+++ b/pandas/sparse/array.py
@@ -239,7 +239,7 @@ class SparseArray(PandasObject, np.ndarray):
                 fill_value = na_value_for_dtype(data.dtype)
 
         if (is_integer_dtype(data) and is_float(fill_value) and
-           sp_index.ngaps > 0):
+                sp_index.ngaps > 0):
             # if float fill_value is being included in dense repr,
             # convert values to float
             data = data.astype(float)
@@ -405,7 +405,6 @@ class SparseArray(PandasObject, np.ndarray):
             yield self._get_val_at(i)
 
     def __getitem__(self, key):
-
         """
 
         """
diff --git a/pandas/sparse/series.py b/pandas/sparse/series.py
index d6bc89292..2d3a9effe 100644
--- a/pandas/sparse/series.py
+++ b/pandas/sparse/series.py
@@ -847,6 +847,7 @@ ops.add_special_arithmetic_methods(SparseSeries, _arith_method,
 
 # backwards compatiblity
 class SparseTimeSeries(SparseSeries):
+
     def __init__(self, *args, **kwargs):
         # deprecation TimeSeries, #10890
         warnings.warn("SparseTimeSeries is deprecated. Please use "
diff --git a/pandas/sparse/tests/test_arithmetics.py b/pandas/sparse/tests/test_arithmetics.py
index f24244b38..eb926082a 100644
--- a/pandas/sparse/tests/test_arithmetics.py
+++ b/pandas/sparse/tests/test_arithmetics.py
@@ -5,8 +5,6 @@ import pandas.util.testing as tm
 
 class TestSparseArrayArithmetics(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     _base = np.array
     _klass = pd.SparseArray
 
diff --git a/pandas/sparse/tests/test_array.py b/pandas/sparse/tests/test_array.py
index 55f292a8a..70aaea5b5 100644
--- a/pandas/sparse/tests/test_array.py
+++ b/pandas/sparse/tests/test_array.py
@@ -14,7 +14,6 @@ import pandas.util.testing as tm
 
 
 class TestSparseArray(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def setUp(self):
         self.arr_data = np.array([nan, nan, 1, 2, 3, nan, 4, 5, nan, 6])
@@ -655,6 +654,7 @@ class TestSparseArray(tm.TestCase):
 
 
 class TestSparseArrayAnalytics(tm.TestCase):
+
     def test_sum(self):
         data = np.arange(10).astype(float)
         out = SparseArray(data).sum()
diff --git a/pandas/sparse/tests/test_combine_concat.py b/pandas/sparse/tests/test_combine_concat.py
index 5240d5928..81655daec 100644
--- a/pandas/sparse/tests/test_combine_concat.py
+++ b/pandas/sparse/tests/test_combine_concat.py
@@ -7,8 +7,6 @@ import pandas.util.testing as tm
 
 class TestSparseSeriesConcat(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_concat(self):
         val1 = np.array([1, 2, np.nan, np.nan, 0, np.nan])
         val2 = np.array([3, np.nan, 4, 0, 0])
@@ -126,8 +124,6 @@ class TestSparseSeriesConcat(tm.TestCase):
 
 class TestSparseDataFrameConcat(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def setUp(self):
 
         self.dense1 = pd.DataFrame({'A': [0., 1., 2., np.nan],
diff --git a/pandas/sparse/tests/test_format.py b/pandas/sparse/tests/test_format.py
index 377eaa205..0c0e773d1 100644
--- a/pandas/sparse/tests/test_format.py
+++ b/pandas/sparse/tests/test_format.py
@@ -15,8 +15,6 @@ use_32bit_repr = is_platform_windows() or is_platform_32bit()
 
 class TestSparseSeriesFormatting(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     @property
     def dtype_format_for_platform(self):
         return '' if use_32bit_repr else ', dtype=int32'
diff --git a/pandas/sparse/tests/test_frame.py b/pandas/sparse/tests/test_frame.py
index e26c0ed1a..e3b865492 100644
--- a/pandas/sparse/tests/test_frame.py
+++ b/pandas/sparse/tests/test_frame.py
@@ -22,7 +22,6 @@ from pandas.tests.frame.test_misc_api import SharedWithSparse
 class TestSparseDataFrame(tm.TestCase, SharedWithSparse):
 
     klass = SparseDataFrame
-    _multiprocess_can_split_ = True
 
     def setUp(self):
         self.data = {'A': [nan, nan, nan, 0, 1, 2, 3, 4, 5, 6],
@@ -1150,6 +1149,7 @@ class TestSparseDataFrameArithmetic(tm.TestCase):
 
 
 class TestSparseDataFrameAnalytics(tm.TestCase):
+
     def setUp(self):
         self.data = {'A': [nan, nan, nan, 0, 1, 2, 3, 4, 5, 6],
                      'B': [0, 1, 2, nan, nan, nan, 3, 4, 5, 6],
diff --git a/pandas/sparse/tests/test_groupby.py b/pandas/sparse/tests/test_groupby.py
index 0cb33f4ea..23bea94a2 100644
--- a/pandas/sparse/tests/test_groupby.py
+++ b/pandas/sparse/tests/test_groupby.py
@@ -6,8 +6,6 @@ import pandas.util.testing as tm
 
 class TestSparseGroupBy(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def setUp(self):
         self.dense = pd.DataFrame({'A': ['foo', 'bar', 'foo', 'bar',
                                          'foo', 'bar', 'foo', 'foo'],
diff --git a/pandas/sparse/tests/test_indexing.py b/pandas/sparse/tests/test_indexing.py
index a634c3413..c400b68c8 100644
--- a/pandas/sparse/tests/test_indexing.py
+++ b/pandas/sparse/tests/test_indexing.py
@@ -8,8 +8,6 @@ import pandas.util.testing as tm
 
 class TestSparseSeriesIndexing(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def setUp(self):
         self.orig = pd.Series([1, np.nan, np.nan, 3, np.nan])
         self.sparse = self.orig.to_sparse()
@@ -431,8 +429,6 @@ class TestSparseSeriesIndexing(tm.TestCase):
 
 class TestSparseSeriesMultiIndexing(TestSparseSeriesIndexing):
 
-    _multiprocess_can_split_ = True
-
     def setUp(self):
         # Mi with duplicated values
         idx = pd.MultiIndex.from_tuples([('A', 0), ('A', 1), ('B', 0),
@@ -544,8 +540,6 @@ class TestSparseSeriesMultiIndexing(TestSparseSeriesIndexing):
 
 class TestSparseDataFrameIndexing(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_getitem(self):
         orig = pd.DataFrame([[1, np.nan, np.nan],
                              [2, 3, np.nan],
@@ -908,6 +902,7 @@ class TestSparseDataFrameIndexing(tm.TestCase):
 
 
 class TestMultitype(tm.TestCase):
+
     def setUp(self):
         self.cols = ['string', 'int', 'float', 'object']
 
diff --git a/pandas/sparse/tests/test_libsparse.py b/pandas/sparse/tests/test_libsparse.py
index b3aa3368e..491005db2 100644
--- a/pandas/sparse/tests/test_libsparse.py
+++ b/pandas/sparse/tests/test_libsparse.py
@@ -241,8 +241,6 @@ class TestSparseIndexIntersect(tm.TestCase):
 
 class TestSparseIndexCommon(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_int_internal(self):
         idx = _make_index(4, np.array([2, 3], dtype=np.int32), kind='integer')
         self.assertIsInstance(idx, IntIndex)
@@ -391,8 +389,6 @@ class TestSparseIndexCommon(tm.TestCase):
 
 class TestBlockIndex(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_block_internal(self):
         idx = _make_index(4, np.array([2, 3], dtype=np.int32), kind='block')
         self.assertIsInstance(idx, BlockIndex)
@@ -478,8 +474,6 @@ class TestBlockIndex(tm.TestCase):
 
 class TestIntIndex(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_int_internal(self):
         idx = _make_index(4, np.array([2, 3], dtype=np.int32), kind='integer')
         self.assertIsInstance(idx, IntIndex)
diff --git a/pandas/sparse/tests/test_list.py b/pandas/sparse/tests/test_list.py
index 458681cdc..8511cd599 100644
--- a/pandas/sparse/tests/test_list.py
+++ b/pandas/sparse/tests/test_list.py
@@ -10,8 +10,6 @@ import pandas.util.testing as tm
 
 class TestSparseList(unittest.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def setUp(self):
         self.na_data = np.array([nan, nan, 1, 2, 3, nan, 4, 5, nan, 6])
         self.zero_data = np.array([0, 0, 1, 2, 3, 0, 4, 5, 0, 6])
diff --git a/pandas/sparse/tests/test_pivot.py b/pandas/sparse/tests/test_pivot.py
index 482a99a96..4ff9f2009 100644
--- a/pandas/sparse/tests/test_pivot.py
+++ b/pandas/sparse/tests/test_pivot.py
@@ -5,8 +5,6 @@ import pandas.util.testing as tm
 
 class TestPivotTable(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def setUp(self):
         self.dense = pd.DataFrame({'A': ['foo', 'bar', 'foo', 'bar',
                                          'foo', 'bar', 'foo', 'foo'],
diff --git a/pandas/sparse/tests/test_series.py b/pandas/sparse/tests/test_series.py
index b34f5dd2c..db6ae14b0 100644
--- a/pandas/sparse/tests/test_series.py
+++ b/pandas/sparse/tests/test_series.py
@@ -56,7 +56,6 @@ def _test_data2_zero():
 
 
 class TestSparseSeries(tm.TestCase, SharedWithSparse):
-    _multiprocess_can_split_ = True
 
     def setUp(self):
         arr, index = _test_data1()
@@ -941,6 +940,7 @@ class TestSparseSeries(tm.TestCase, SharedWithSparse):
 
 
 class TestSparseHandlingMultiIndexes(tm.TestCase):
+
     def setUp(self):
         miindex = pd.MultiIndex.from_product(
             [["x", "y"], ["10", "20"]], names=['row-foo', 'row-bar'])
diff --git a/pandas/stats/fama_macbeth.py b/pandas/stats/fama_macbeth.py
index f7d50e8e7..d564f9cb6 100644
--- a/pandas/stats/fama_macbeth.py
+++ b/pandas/stats/fama_macbeth.py
@@ -9,6 +9,7 @@ from pandas.util.decorators import cache_readonly
 
 # flake8: noqa
 
+
 def fama_macbeth(**kwargs):
     """Runs Fama-MacBeth regression.
 
diff --git a/pandas/stats/ols.py b/pandas/stats/ols.py
index b533d255b..96ec70d59 100644
--- a/pandas/stats/ols.py
+++ b/pandas/stats/ols.py
@@ -24,6 +24,7 @@ import pandas.stats.moments as moments
 
 _FP_ERR = 1e-8
 
+
 class OLS(StringMixin):
     """
     Runs a full sample ordinary least squares regression.
diff --git a/pandas/stats/tests/test_ols.py b/pandas/stats/tests/test_ols.py
index 09fa21d58..b90c51366 100644
--- a/pandas/stats/tests/test_ols.py
+++ b/pandas/stats/tests/test_ols.py
@@ -60,8 +60,6 @@ def _compare_moving_ols(model1, model2):
 
 class TestOLS(BaseTest):
 
-    _multiprocess_can_split_ = True
-
     # TODO: Add tests for OLS y predict
     # TODO: Right now we just check for consistency between full-sample and
     # rolling/expanding results of the panel OLS.  We should also cross-check
@@ -262,8 +260,6 @@ class TestOLS(BaseTest):
 
 class TestOLSMisc(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     """
     For test coverage with faux data
     """
@@ -511,8 +507,6 @@ class TestOLSMisc(tm.TestCase):
 
 class TestPanelOLS(BaseTest):
 
-    _multiprocess_can_split_ = True
-
     FIELDS = ['beta', 'df', 'df_model', 'df_resid', 'f_stat',
               'p_value', 'r2', 'r2_adj', 'rmse', 'std_err',
               't_stat', 'var_beta']
@@ -894,8 +888,6 @@ def _period_slice(panelModel, i):
 
 class TestOLSFilter(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def setUp(self):
         date_index = date_range(datetime(2009, 12, 11), periods=3,
                                 freq=offsets.BDay())
diff --git a/pandas/tests/formats/test_format.py b/pandas/tests/formats/test_format.py
index 7a2c5f3b7..a9553d9ea 100644
--- a/pandas/tests/formats/test_format.py
+++ b/pandas/tests/formats/test_format.py
@@ -113,7 +113,6 @@ def has_expanded_repr(df):
 
 
 class TestDataFrameFormatting(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def setUp(self):
         self.warn_filters = warnings.filters
@@ -762,14 +761,15 @@ class TestDataFrameFormatting(tm.TestCase):
 
         # 11594
         import datetime
-        s = Series([datetime.datetime(2012, 1, 1)]*10 + [datetime.datetime(1012,1,2)] + [datetime.datetime(2012, 1, 3)]*10)
+        s = Series([datetime.datetime(2012, 1, 1)] * 10 +
+                   [datetime.datetime(1012, 1, 2)] + [datetime.datetime(2012, 1, 3)] * 10)
 
         with pd.option_context('display.max_rows', 8):
             result = str(s)
             self.assertTrue('object' in result)
 
         # 12045
-        df = DataFrame({'text': ['some words'] + [None]*9})
+        df = DataFrame({'text': ['some words'] + [None] * 9})
 
         with pd.option_context('display.max_rows', 8, 'display.max_columns', 3):
             result = str(df)
@@ -779,7 +779,8 @@ class TestDataFrameFormatting(tm.TestCase):
     def test_datetimelike_frame(self):
 
         # GH 12211
-        df = DataFrame({'date' : [pd.Timestamp('20130101').tz_localize('UTC')] + [pd.NaT]*5})
+        df = DataFrame(
+            {'date': [pd.Timestamp('20130101').tz_localize('UTC')] + [pd.NaT] * 5})
 
         with option_context("display.max_rows", 5):
             result = str(df)
@@ -1219,8 +1220,8 @@ class TestDataFrameFormatting(tm.TestCase):
         mi = MultiIndex.from_product([[100, 200, 300],
                                       [10, 20, 30],
                                       [1, 2, 3, 4, 5, 6, 7]],
-                                     names=['a','b','c'])
-        df = DataFrame({'n' : range(len(mi))}, index = mi)
+                                     names=['a', 'b', 'c'])
+        df = DataFrame({'n': range(len(mi))}, index=mi)
         result = df.to_html(max_rows=60)
         expected = """\
 <table border="1" class="dataframe">
@@ -3451,8 +3452,8 @@ c  10  11  12  13  14\
                         'float': [1.0, 2.0, 3.0],
                         'object': [(1, 2), True, False],
                         'datetime64': [datetime(2016, 1, 1),
-                                   datetime(2016, 2, 5),
-                                   datetime(2016, 3, 3)]})
+                                       datetime(2016, 2, 5),
+                                       datetime(2016, 3, 3)]})
 
         formatters = {'int': lambda x: '0x%x' % x,
                       'float': lambda x: '[% 4.1f]' % x,
@@ -3896,7 +3897,7 @@ $1$,$2$
 
     def test_to_csv_multi_index(self):
         # see gh-6618
-        df = DataFrame([1], columns=pd.MultiIndex.from_arrays([[1],[2]]))
+        df = DataFrame([1], columns=pd.MultiIndex.from_arrays([[1], [2]]))
 
         exp = ",1\n,2\n0,1\n"
         self.assertEqual(df.to_csv(), exp)
@@ -3904,8 +3905,8 @@ $1$,$2$
         exp = "1\n2\n1\n"
         self.assertEqual(df.to_csv(index=False), exp)
 
-        df = DataFrame([1], columns=pd.MultiIndex.from_arrays([[1],[2]]),
-                       index=pd.MultiIndex.from_arrays([[1],[2]]))
+        df = DataFrame([1], columns=pd.MultiIndex.from_arrays([[1], [2]]),
+                       index=pd.MultiIndex.from_arrays([[1], [2]]))
 
         exp = ",,1\n,,2\n1,2,1\n"
         self.assertEqual(df.to_csv(), exp)
@@ -3913,7 +3914,8 @@ $1$,$2$
         exp = "1\n2\n1\n"
         self.assertEqual(df.to_csv(index=False), exp)
 
-        df = DataFrame([1], columns=pd.MultiIndex.from_arrays([['foo'],['bar']]))
+        df = DataFrame(
+            [1], columns=pd.MultiIndex.from_arrays([['foo'], ['bar']]))
 
         exp = ",foo\n,bar\n0,1\n"
         self.assertEqual(df.to_csv(), exp)
@@ -3938,8 +3940,6 @@ $1$,$2$
 
 class TestSeriesFormatting(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def setUp(self):
         self.ts = tm.makeTimeSeries()
 
@@ -4452,7 +4452,6 @@ class TestSeriesFormatting(tm.TestCase):
 
 
 class TestEngFormatter(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_eng_float_formatter(self):
         df = DataFrame({'A': [1.41, 141., 14100, 1410000.]})
@@ -4605,9 +4604,9 @@ class TestEngFormatter(tm.TestCase):
         result = formatter(np.nan)
         self.assertEqual(result, u('NaN'))
 
-        df = pd.DataFrame({'a':[1.5, 10.3, 20.5],
-                           'b':[50.3, 60.67, 70.12],
-                           'c':[100.2, 101.33, 120.33]})
+        df = pd.DataFrame({'a': [1.5, 10.3, 20.5],
+                           'b': [50.3, 60.67, 70.12],
+                           'c': [100.2, 101.33, 120.33]})
         pt = df.pivot_table(values='a', index='b', columns='c')
         fmt.set_eng_float_format(accuracy=1)
         result = pt.to_string()
diff --git a/pandas/tests/formats/test_printing.py b/pandas/tests/formats/test_printing.py
index d1eb1faec..1e6794c1c 100644
--- a/pandas/tests/formats/test_printing.py
+++ b/pandas/tests/formats/test_printing.py
@@ -5,8 +5,6 @@ import pandas.formats.format as fmt
 import pandas.util.testing as tm
 import pandas.core.config as cf
 
-_multiprocess_can_split_ = True
-
 
 def test_adjoin():
     data = [['a', 'b', 'c'], ['dd', 'ee', 'ff'], ['ggg', 'hhh', 'iii']]
diff --git a/pandas/tests/formats/test_style.py b/pandas/tests/formats/test_style.py
index 2fec04b9c..eaa209178 100644
--- a/pandas/tests/formats/test_style.py
+++ b/pandas/tests/formats/test_style.py
@@ -660,7 +660,7 @@ class TestStyler(TestCase):
         with pd.option_context('display.multi_sparse', False):
             df = pd.DataFrame({'A': [1, 2]},
                               index=pd.MultiIndex.from_arrays([['a', 'a'],
-                                                              [0, 1]]))
+                                                               [0, 1]]))
             result = df.style._translate()
         body = result['body']
         for row in body:
diff --git a/pandas/tests/frame/test_alter_axes.py b/pandas/tests/frame/test_alter_axes.py
index cab627dec..e84bb6407 100644
--- a/pandas/tests/frame/test_alter_axes.py
+++ b/pandas/tests/frame/test_alter_axes.py
@@ -22,8 +22,6 @@ from pandas.tests.frame.common import TestData
 
 class TestDataFrameAlterAxes(tm.TestCase, TestData):
 
-    _multiprocess_can_split_ = True
-
     def test_set_index(self):
         idx = Index(np.arange(len(self.mixed_frame)))
 
diff --git a/pandas/tests/frame/test_analytics.py b/pandas/tests/frame/test_analytics.py
index 0dbb78ec8..a55d2cfb2 100644
--- a/pandas/tests/frame/test_analytics.py
+++ b/pandas/tests/frame/test_analytics.py
@@ -25,8 +25,6 @@ from pandas.tests.frame.common import TestData
 
 class TestDataFrameAnalytics(tm.TestCase, TestData):
 
-    _multiprocess_can_split_ = True
-
     # ---------------------------------------------------------------------=
     # Correlation and covariance
 
diff --git a/pandas/tests/frame/test_apply.py b/pandas/tests/frame/test_apply.py
index 19fa98afd..30fde4b5b 100644
--- a/pandas/tests/frame/test_apply.py
+++ b/pandas/tests/frame/test_apply.py
@@ -19,8 +19,6 @@ from pandas.tests.frame.common import TestData
 
 class TestDataFrameApply(tm.TestCase, TestData):
 
-    _multiprocess_can_split_ = True
-
     def test_apply(self):
         with np.errstate(all='ignore'):
             # ufunc
diff --git a/pandas/tests/frame/test_asof.py b/pandas/tests/frame/test_asof.py
index 323960d54..8bb26d3d7 100644
--- a/pandas/tests/frame/test_asof.py
+++ b/pandas/tests/frame/test_asof.py
@@ -11,7 +11,6 @@ from .common import TestData
 
 
 class TestFrameAsof(TestData, tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def setUp(self):
         self.N = N = 50
diff --git a/pandas/tests/frame/test_axis_select_reindex.py b/pandas/tests/frame/test_axis_select_reindex.py
index ff6215531..839ceb536 100644
--- a/pandas/tests/frame/test_axis_select_reindex.py
+++ b/pandas/tests/frame/test_axis_select_reindex.py
@@ -26,8 +26,6 @@ class TestDataFrameSelectReindex(tm.TestCase, TestData):
     # These are specific reindex-based tests; other indexing tests should go in
     # test_indexing
 
-    _multiprocess_can_split_ = True
-
     def test_drop_names(self):
         df = DataFrame([[1, 2, 3], [3, 4, 5], [5, 6, 7]],
                        index=['a', 'b', 'c'],
diff --git a/pandas/tests/frame/test_block_internals.py b/pandas/tests/frame/test_block_internals.py
index 335506707..7b64dea8c 100644
--- a/pandas/tests/frame/test_block_internals.py
+++ b/pandas/tests/frame/test_block_internals.py
@@ -29,8 +29,6 @@ from pandas.tests.frame.common import TestData
 
 class TestDataFrameBlockInternals(tm.TestCase, TestData):
 
-    _multiprocess_can_split_ = True
-
     def test_cast_internals(self):
         casted = DataFrame(self.frame._data, dtype=int)
         expected = DataFrame(self.frame._series, dtype=int)
diff --git a/pandas/tests/frame/test_combine_concat.py b/pandas/tests/frame/test_combine_concat.py
index 1167662b6..eed4d6261 100644
--- a/pandas/tests/frame/test_combine_concat.py
+++ b/pandas/tests/frame/test_combine_concat.py
@@ -22,8 +22,6 @@ from pandas.util.testing import (assertRaisesRegexp,
 
 class TestDataFrameConcatCommon(tm.TestCase, TestData):
 
-    _multiprocess_can_split_ = True
-
     def test_concat_multiple_frames_dtypes(self):
 
         # GH 2759
@@ -427,8 +425,6 @@ class TestDataFrameConcatCommon(tm.TestCase, TestData):
 
 class TestDataFrameCombineFirst(tm.TestCase, TestData):
 
-    _multiprocess_can_split_ = True
-
     def test_combine_first_mixed(self):
         a = Series(['a', 'b'], index=lrange(2))
         b = Series(lrange(2), index=lrange(2))
diff --git a/pandas/tests/frame/test_constructors.py b/pandas/tests/frame/test_constructors.py
index 1676c57a2..66a235e12 100644
--- a/pandas/tests/frame/test_constructors.py
+++ b/pandas/tests/frame/test_constructors.py
@@ -36,8 +36,6 @@ MIXED_INT_DTYPES = ['uint8', 'uint16', 'uint32', 'uint64', 'int8', 'int16',
 
 class TestDataFrameConstructors(tm.TestCase, TestData):
 
-    _multiprocess_can_split_ = True
-
     def test_constructor(self):
         df = DataFrame()
         self.assertEqual(len(df.index), 0)
@@ -1886,8 +1884,6 @@ class TestDataFrameConstructors(tm.TestCase, TestData):
 
 class TestDataFrameConstructorWithDatetimeTZ(tm.TestCase, TestData):
 
-    _multiprocess_can_split_ = True
-
     def test_from_dict(self):
 
         # 8260
diff --git a/pandas/tests/frame/test_convert_to.py b/pandas/tests/frame/test_convert_to.py
index 53083a602..1bc831372 100644
--- a/pandas/tests/frame/test_convert_to.py
+++ b/pandas/tests/frame/test_convert_to.py
@@ -16,8 +16,6 @@ from pandas.tests.frame.common import TestData
 
 class TestDataFrameConvertTo(tm.TestCase, TestData):
 
-    _multiprocess_can_split_ = True
-
     def test_to_dict(self):
         test_data = {
             'A': {'1': 1, '2': 2},
diff --git a/pandas/tests/frame/test_dtypes.py b/pandas/tests/frame/test_dtypes.py
index 798982bcb..f7d2c1a65 100644
--- a/pandas/tests/frame/test_dtypes.py
+++ b/pandas/tests/frame/test_dtypes.py
@@ -18,8 +18,6 @@ import pandas as pd
 
 class TestDataFrameDataTypes(tm.TestCase, TestData):
 
-    _multiprocess_can_split_ = True
-
     def test_concat_empty_dataframe_dtypes(self):
         df = DataFrame(columns=list("abc"))
         df['a'] = df['a'].astype(np.bool_)
@@ -539,8 +537,6 @@ class TestDataFrameDataTypes(tm.TestCase, TestData):
 
 class TestDataFrameDatetimeWithTZ(tm.TestCase, TestData):
 
-    _multiprocess_can_split_ = True
-
     def test_interleave(self):
 
         # interleave with object
diff --git a/pandas/tests/frame/test_indexing.py b/pandas/tests/frame/test_indexing.py
index f0e6ab4c1..c06faa75e 100644
--- a/pandas/tests/frame/test_indexing.py
+++ b/pandas/tests/frame/test_indexing.py
@@ -37,8 +37,6 @@ from pandas.tests.frame.common import TestData
 
 class TestDataFrameIndexing(tm.TestCase, TestData):
 
-    _multiprocess_can_split_ = True
-
     def test_getitem(self):
         # slicing
         sl = self.frame[:20]
@@ -2841,8 +2839,6 @@ class TestDataFrameIndexing(tm.TestCase, TestData):
 
 class TestDataFrameIndexingDatetimeWithTZ(tm.TestCase, TestData):
 
-    _multiprocess_can_split_ = True
-
     def setUp(self):
         self.idx = Index(date_range('20130101', periods=3, tz='US/Eastern'),
                          name='foo')
@@ -2902,8 +2898,6 @@ class TestDataFrameIndexingDatetimeWithTZ(tm.TestCase, TestData):
 
 class TestDataFrameIndexingUInt64(tm.TestCase, TestData):
 
-    _multiprocess_can_split_ = True
-
     def setUp(self):
         self.ir = Index(np.arange(3), dtype=np.uint64)
         self.idx = Index([2**63, 2**63 + 5, 2**63 + 10], name='foo')
diff --git a/pandas/tests/frame/test_misc_api.py b/pandas/tests/frame/test_misc_api.py
index 2fc14d9e4..674202980 100644
--- a/pandas/tests/frame/test_misc_api.py
+++ b/pandas/tests/frame/test_misc_api.py
@@ -27,8 +27,6 @@ from pandas.tests.frame.common import TestData
 
 class SharedWithSparse(object):
 
-    _multiprocess_can_split_ = True
-
     def test_copy_index_name_checking(self):
         # don't want to be able to modify the index stored elsewhere after
         # making a copy
@@ -159,8 +157,6 @@ class TestDataFrameMisc(tm.TestCase, SharedWithSparse, TestData):
 
     klass = DataFrame
 
-    _multiprocess_can_split_ = True
-
     def test_get_axis(self):
         f = self.frame
         self.assertEqual(f._get_axis_number(0), 0)
diff --git a/pandas/tests/frame/test_missing.py b/pandas/tests/frame/test_missing.py
index 8c25f71c0..ef800f0df 100644
--- a/pandas/tests/frame/test_missing.py
+++ b/pandas/tests/frame/test_missing.py
@@ -29,8 +29,6 @@ def _skip_if_no_pchip():
 
 class TestDataFrameMissingData(tm.TestCase, TestData):
 
-    _multiprocess_can_split_ = True
-
     def test_dropEmptyRows(self):
         N = len(self.frame.index)
         mat = random.randn(N)
diff --git a/pandas/tests/frame/test_mutate_columns.py b/pandas/tests/frame/test_mutate_columns.py
index 5beab1565..6b4c56747 100644
--- a/pandas/tests/frame/test_mutate_columns.py
+++ b/pandas/tests/frame/test_mutate_columns.py
@@ -21,8 +21,6 @@ from pandas.tests.frame.common import TestData
 
 class TestDataFrameMutateColumns(tm.TestCase, TestData):
 
-    _multiprocess_can_split_ = True
-
     def test_assign(self):
         df = DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
         original = df.copy()
diff --git a/pandas/tests/frame/test_nonunique_indexes.py b/pandas/tests/frame/test_nonunique_indexes.py
index 835c18ffc..4ad88a12a 100644
--- a/pandas/tests/frame/test_nonunique_indexes.py
+++ b/pandas/tests/frame/test_nonunique_indexes.py
@@ -19,8 +19,6 @@ from pandas.tests.frame.common import TestData
 
 class TestDataFrameNonuniqueIndexes(tm.TestCase, TestData):
 
-    _multiprocess_can_split_ = True
-
     def test_column_dups_operations(self):
 
         def check(result, expected=None):
diff --git a/pandas/tests/frame/test_operators.py b/pandas/tests/frame/test_operators.py
index 15f98abe1..ec7368908 100644
--- a/pandas/tests/frame/test_operators.py
+++ b/pandas/tests/frame/test_operators.py
@@ -31,8 +31,6 @@ from pandas.tests.frame.common import (TestData, _check_mixed_float,
 
 class TestDataFrameOperators(tm.TestCase, TestData):
 
-    _multiprocess_can_split_ = True
-
     def test_operators(self):
         garbage = random.random(4)
         colSeries = Series(garbage, index=np.array(self.frame.columns))
diff --git a/pandas/tests/frame/test_quantile.py b/pandas/tests/frame/test_quantile.py
index 22414a6ba..400ead788 100644
--- a/pandas/tests/frame/test_quantile.py
+++ b/pandas/tests/frame/test_quantile.py
@@ -21,8 +21,6 @@ from pandas.tests.frame.common import TestData
 
 class TestDataFrameQuantile(tm.TestCase, TestData):
 
-    _multiprocess_can_split_ = True
-
     def test_quantile(self):
         from numpy import percentile
 
diff --git a/pandas/tests/frame/test_query_eval.py b/pandas/tests/frame/test_query_eval.py
index a9a90a6f5..aed02b732 100644
--- a/pandas/tests/frame/test_query_eval.py
+++ b/pandas/tests/frame/test_query_eval.py
@@ -90,8 +90,6 @@ class TestCompat(tm.TestCase):
 
 class TestDataFrameEval(tm.TestCase, TestData):
 
-    _multiprocess_can_split_ = True
-
     def test_ops(self):
 
         # tst ops and reversed ops in evaluation
@@ -168,8 +166,6 @@ class TestDataFrameEval(tm.TestCase, TestData):
 
 class TestDataFrameQueryWithMultiIndex(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def check_query_with_named_multiindex(self, parser, engine):
         tm.skip_if_no_ne(engine)
         a = np.random.choice(['red', 'green'], size=10)
diff --git a/pandas/tests/frame/test_replace.py b/pandas/tests/frame/test_replace.py
index f46215105..8b50036cd 100644
--- a/pandas/tests/frame/test_replace.py
+++ b/pandas/tests/frame/test_replace.py
@@ -23,8 +23,6 @@ from pandas.tests.frame.common import TestData
 
 class TestDataFrameReplace(tm.TestCase, TestData):
 
-    _multiprocess_can_split_ = True
-
     def test_replace_inplace(self):
         self.tsframe['A'][:5] = nan
         self.tsframe['A'][-5:] = nan
diff --git a/pandas/tests/frame/test_repr_info.py b/pandas/tests/frame/test_repr_info.py
index 12cd62f8b..2df297d03 100644
--- a/pandas/tests/frame/test_repr_info.py
+++ b/pandas/tests/frame/test_repr_info.py
@@ -25,8 +25,6 @@ from pandas.tests.frame.common import TestData
 
 class TestDataFrameReprInfoEtc(tm.TestCase, TestData):
 
-    _multiprocess_can_split_ = True
-
     def test_repr_empty(self):
         # empty
         foo = repr(self.empty)  # noqa
diff --git a/pandas/tests/frame/test_reshape.py b/pandas/tests/frame/test_reshape.py
index 705270b69..1890b33e3 100644
--- a/pandas/tests/frame/test_reshape.py
+++ b/pandas/tests/frame/test_reshape.py
@@ -25,8 +25,6 @@ from pandas.tests.frame.common import TestData
 
 class TestDataFrameReshape(tm.TestCase, TestData):
 
-    _multiprocess_can_split_ = True
-
     def test_pivot(self):
         data = {
             'index': ['A', 'B', 'C', 'C', 'B', 'A'],
diff --git a/pandas/tests/frame/test_sorting.py b/pandas/tests/frame/test_sorting.py
index bbd8dd9b4..7779afdc4 100644
--- a/pandas/tests/frame/test_sorting.py
+++ b/pandas/tests/frame/test_sorting.py
@@ -19,8 +19,6 @@ from pandas.tests.frame.common import TestData
 
 class TestDataFrameSorting(tm.TestCase, TestData):
 
-    _multiprocess_can_split_ = True
-
     def test_sort_index(self):
         # GH13496
 
diff --git a/pandas/tests/frame/test_subclass.py b/pandas/tests/frame/test_subclass.py
index 8bd6d3ba5..9052a16bf 100644
--- a/pandas/tests/frame/test_subclass.py
+++ b/pandas/tests/frame/test_subclass.py
@@ -13,8 +13,6 @@ from pandas.tests.frame.common import TestData
 
 class TestDataFrameSubclassing(tm.TestCase, TestData):
 
-    _multiprocess_can_split_ = True
-
     def test_frame_subclassing_and_slicing(self):
         # Subclass frame and ensure it returns the right class on slicing it
         # In reference to PR 9632
diff --git a/pandas/tests/frame/test_timeseries.py b/pandas/tests/frame/test_timeseries.py
index 55848847f..862f76b4e 100644
--- a/pandas/tests/frame/test_timeseries.py
+++ b/pandas/tests/frame/test_timeseries.py
@@ -27,8 +27,6 @@ from pandas.tests.frame.common import TestData
 
 class TestDataFrameTimeSeriesMethods(tm.TestCase, TestData):
 
-    _multiprocess_can_split_ = True
-
     def test_diff(self):
         the_diff = self.tsframe.diff(1)
 
@@ -539,13 +537,13 @@ class TestDataFrameTimeSeriesMethods(tm.TestCase, TestData):
         result = pd.Series(data_ns).to_frame()
         result['new'] = data_ns
         expected = pd.DataFrame({0: [1, None],
-                                'new': [1, None]}, dtype='datetime64[ns]')
+                                 'new': [1, None]}, dtype='datetime64[ns]')
         tm.assert_frame_equal(result, expected)
         # OutOfBoundsDatetime error shouldn't occur
         data_s = np.array([1, 'nat'], dtype='datetime64[s]')
         result['new'] = data_s
         expected = pd.DataFrame({0: [1, None],
-                                'new': [1e9, None]}, dtype='datetime64[ns]')
+                                 'new': [1e9, None]}, dtype='datetime64[ns]')
         tm.assert_frame_equal(result, expected)
 
     def test_frame_to_period(self):
diff --git a/pandas/tests/frame/test_to_csv.py b/pandas/tests/frame/test_to_csv.py
index 5c47b0357..471fc536a 100644
--- a/pandas/tests/frame/test_to_csv.py
+++ b/pandas/tests/frame/test_to_csv.py
@@ -31,8 +31,6 @@ MIXED_INT_DTYPES = ['uint8', 'uint16', 'uint32', 'uint64', 'int8', 'int16',
 
 class TestDataFrameToCSV(tm.TestCase, TestData):
 
-    _multiprocess_can_split_ = True
-
     def test_to_csv_from_csv1(self):
 
         with ensure_clean('__tmp_to_csv_from_csv1__') as path:
diff --git a/pandas/tests/groupby/test_aggregate.py b/pandas/tests/groupby/test_aggregate.py
index 5f680a687..00ddd293f 100644
--- a/pandas/tests/groupby/test_aggregate.py
+++ b/pandas/tests/groupby/test_aggregate.py
@@ -27,8 +27,6 @@ import pandas as pd
 
 class TestGroupByAggregate(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def setUp(self):
         self.ts = tm.makeTimeSeries()
 
diff --git a/pandas/tests/groupby/test_categorical.py b/pandas/tests/groupby/test_categorical.py
index 82ec1832b..605b32720 100644
--- a/pandas/tests/groupby/test_categorical.py
+++ b/pandas/tests/groupby/test_categorical.py
@@ -23,8 +23,6 @@ import pandas as pd
 
 class TestGroupByCategorical(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def setUp(self):
         self.ts = tm.makeTimeSeries()
 
diff --git a/pandas/tests/groupby/test_filters.py b/pandas/tests/groupby/test_filters.py
index 663fbd04e..164085880 100644
--- a/pandas/tests/groupby/test_filters.py
+++ b/pandas/tests/groupby/test_filters.py
@@ -24,8 +24,6 @@ import pandas as pd
 
 class TestGroupByFilter(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def setUp(self):
         self.ts = tm.makeTimeSeries()
 
diff --git a/pandas/tests/groupby/test_groupby.py b/pandas/tests/groupby/test_groupby.py
index 01c81bd79..df4707fce 100644
--- a/pandas/tests/groupby/test_groupby.py
+++ b/pandas/tests/groupby/test_groupby.py
@@ -36,8 +36,6 @@ import pandas as pd
 
 class TestGroupBy(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def setUp(self):
         self.ts = tm.makeTimeSeries()
 
@@ -5908,8 +5906,8 @@ class TestGroupBy(tm.TestCase):
         g = df.groupby(["A", "B"])
 
         expected = DataFrame([(i + 12 if i % 3 and i < n_rows - 12
-                              else np.nan)
-                             for i in range(n_rows)], dtype=float,
+                               else np.nan)
+                              for i in range(n_rows)], dtype=float,
                              columns=["Z"], index=None)
         result = g.shift(-1)
 
diff --git a/pandas/tests/indexes/datetimes/test_astype.py b/pandas/tests/indexes/datetimes/test_astype.py
index edb044a3c..c9a695ee8 100644
--- a/pandas/tests/indexes/datetimes/test_astype.py
+++ b/pandas/tests/indexes/datetimes/test_astype.py
@@ -8,7 +8,6 @@ from pandas import (DatetimeIndex, date_range, Series, NaT, Index, Timestamp,
 
 
 class TestDatetimeIndex(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_astype(self):
         # GH 13149, GH 13209
@@ -185,7 +184,6 @@ class TestDatetimeIndex(tm.TestCase):
 
 
 class TestToPeriod(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def setUp(self):
         data = [Timestamp('2007-01-01 10:11:12.123456Z'),
diff --git a/pandas/tests/indexes/datetimes/test_construction.py b/pandas/tests/indexes/datetimes/test_construction.py
index e54ebe3d9..772d76305 100644
--- a/pandas/tests/indexes/datetimes/test_construction.py
+++ b/pandas/tests/indexes/datetimes/test_construction.py
@@ -10,7 +10,6 @@ from pandas import (DatetimeIndex, Index, Timestamp, datetime, date_range,
 
 
 class TestDatetimeIndex(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_construction_with_alt(self):
 
@@ -428,7 +427,6 @@ class TestDatetimeIndex(tm.TestCase):
 
 
 class TestTimeSeries(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_dti_constructor_preserve_dti_freq(self):
         rng = date_range('1/1/2000', '1/2/2000', freq='5min')
diff --git a/pandas/tests/indexes/datetimes/test_date_range.py b/pandas/tests/indexes/datetimes/test_date_range.py
index b2161aa5c..9d5f39732 100644
--- a/pandas/tests/indexes/datetimes/test_date_range.py
+++ b/pandas/tests/indexes/datetimes/test_date_range.py
@@ -9,7 +9,6 @@ from pandas.tests.series.common import TestData
 
 
 class TestTimeSeries(TestData, tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_date_range_gen_error(self):
         rng = date_range('1/1/2000 00:00', '1/1/2000 00:18', freq='5min')
diff --git a/pandas/tests/indexes/datetimes/test_datetime.py b/pandas/tests/indexes/datetimes/test_datetime.py
index 628cb9df9..2c87c48bc 100644
--- a/pandas/tests/indexes/datetimes/test_datetime.py
+++ b/pandas/tests/indexes/datetimes/test_datetime.py
@@ -14,7 +14,6 @@ randn = np.random.randn
 
 
 class TestDatetimeIndex(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_get_loc(self):
         idx = pd.date_range('2000-01-01', periods=3)
diff --git a/pandas/tests/indexes/datetimes/test_datetimelike.py b/pandas/tests/indexes/datetimes/test_datetimelike.py
index eea08febc..2b254bc8b 100644
--- a/pandas/tests/indexes/datetimes/test_datetimelike.py
+++ b/pandas/tests/indexes/datetimes/test_datetimelike.py
@@ -10,7 +10,6 @@ from ..datetimelike import DatetimeLike
 
 class TestDatetimeIndex(DatetimeLike, tm.TestCase):
     _holder = DatetimeIndex
-    _multiprocess_can_split_ = True
 
     def setUp(self):
         self.indices = dict(index=tm.makeDateIndex(10))
diff --git a/pandas/tests/indexes/datetimes/test_indexing.py b/pandas/tests/indexes/datetimes/test_indexing.py
index 5b6bcffe7..23271a8d4 100644
--- a/pandas/tests/indexes/datetimes/test_indexing.py
+++ b/pandas/tests/indexes/datetimes/test_indexing.py
@@ -7,7 +7,6 @@ from pandas import notnull, Index, DatetimeIndex, datetime, date_range
 
 
 class TestDatetimeIndex(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_where_other(self):
 
diff --git a/pandas/tests/indexes/datetimes/test_misc.py b/pandas/tests/indexes/datetimes/test_misc.py
index dda2785d2..6b0191edb 100644
--- a/pandas/tests/indexes/datetimes/test_misc.py
+++ b/pandas/tests/indexes/datetimes/test_misc.py
@@ -53,7 +53,6 @@ class TestDateTimeIndexToJulianDate(tm.TestCase):
 
 
 class TestTimeSeries(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_pass_datetimeindex_to_index(self):
         # Bugs in #1396
diff --git a/pandas/tests/indexes/datetimes/test_missing.py b/pandas/tests/indexes/datetimes/test_missing.py
index 5c408d530..8f3752227 100644
--- a/pandas/tests/indexes/datetimes/test_missing.py
+++ b/pandas/tests/indexes/datetimes/test_missing.py
@@ -3,7 +3,6 @@ import pandas.util.testing as tm
 
 
 class TestDatetimeIndex(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_fillna_datetime64(self):
         # GH 11343
diff --git a/pandas/tests/indexes/datetimes/test_ops.py b/pandas/tests/indexes/datetimes/test_ops.py
index c25cd6a3f..a46980a0f 100644
--- a/pandas/tests/indexes/datetimes/test_ops.py
+++ b/pandas/tests/indexes/datetimes/test_ops.py
@@ -955,7 +955,6 @@ class TestDateTimeIndexToJulianDate(tm.TestCase):
 
 
 class TestDatetimeIndex(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     # GH 10699
     def test_datetime64_with_DateOffset(self):
diff --git a/pandas/tests/indexes/datetimes/test_setops.py b/pandas/tests/indexes/datetimes/test_setops.py
index 229ae803a..7777de869 100644
--- a/pandas/tests/indexes/datetimes/test_setops.py
+++ b/pandas/tests/indexes/datetimes/test_setops.py
@@ -9,7 +9,6 @@ from pandas import (DatetimeIndex, date_range, Series, bdate_range, DataFrame,
 
 
 class TestDatetimeIndex(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_union(self):
         i1 = Int64Index(np.arange(0, 20, 2))
diff --git a/pandas/tests/indexes/datetimes/test_tools.py b/pandas/tests/indexes/datetimes/test_tools.py
index 42d135f63..841d0be60 100644
--- a/pandas/tests/indexes/datetimes/test_tools.py
+++ b/pandas/tests/indexes/datetimes/test_tools.py
@@ -168,7 +168,6 @@ class TimeConversionFormats(tm.TestCase):
 
 
 class TestToDatetime(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_to_datetime_dt64s(self):
         in_bound_dts = [
@@ -989,6 +988,7 @@ class TestToDatetimeInferFormat(tm.TestCase):
 
 class TestDaysInMonth(tm.TestCase):
     # tests for issue #10154
+
     def test_day_not_in_month_coerce(self):
         self.assertTrue(isnull(to_datetime('2015-02-29', errors='coerce')))
         self.assertTrue(isnull(to_datetime('2015-02-29', format="%Y-%m-%d",
diff --git a/pandas/tests/indexes/test_base.py b/pandas/tests/indexes/test_base.py
index c574a4a1f..2f5b98d14 100644
--- a/pandas/tests/indexes/test_base.py
+++ b/pandas/tests/indexes/test_base.py
@@ -31,7 +31,6 @@ from pandas.lib import Timestamp
 
 class TestIndex(Base, tm.TestCase):
     _holder = Index
-    _multiprocess_can_split_ = True
 
     def setUp(self):
         self.indices = dict(unicodeIndex=tm.makeUnicodeIndex(100),
@@ -1795,7 +1794,6 @@ class TestMixedIntIndex(Base, tm.TestCase):
     # (GH 13514)
 
     _holder = Index
-    _multiprocess_can_split_ = True
 
     def setUp(self):
         self.indices = dict(mixedIndex=Index([0, 'a', 1, 'b', 2, 'c']))
@@ -1993,7 +1991,7 @@ class TestMixedIntIndex(Base, tm.TestCase):
         idx = pd.TimedeltaIndex(['1 days', '2 days', '3 days'])
         tm.assert_index_equal(idx.dropna(), idx)
         nanidx = pd.TimedeltaIndex([pd.NaT, '1 days', '2 days',
-                                   '3 days', pd.NaT])
+                                    '3 days', pd.NaT])
         tm.assert_index_equal(nanidx.dropna(), idx)
 
         idx = pd.PeriodIndex(['2012-02', '2012-04', '2012-05'], freq='M')
diff --git a/pandas/tests/indexes/test_category.py b/pandas/tests/indexes/test_category.py
index 708f424d9..6b6885c08 100644
--- a/pandas/tests/indexes/test_category.py
+++ b/pandas/tests/indexes/test_category.py
@@ -225,6 +225,7 @@ class TestCategoricalIndex(Base, tm.TestCase):
         # change categories dtype
         ci = pd.CategoricalIndex(list('ABABC'), categories=list('BAC'),
                                  ordered=False)
+
         def f(x):
             return {'A': 10, 'B': 20, 'C': 30}.get(x)
 
@@ -360,7 +361,8 @@ class TestCategoricalIndex(Base, tm.TestCase):
             expected = oidx.get_indexer_non_unique(finder)[0]
 
             actual = ci.get_indexer(finder)
-            tm.assert_numpy_array_equal(expected.values, actual, check_dtype=False)
+            tm.assert_numpy_array_equal(
+                expected.values, actual, check_dtype=False)
 
     def test_reindex_dtype(self):
         c = CategoricalIndex(['a', 'b', 'c', 'a'])
@@ -519,7 +521,7 @@ class TestCategoricalIndex(Base, tm.TestCase):
         # GH12309
         # Must be tested separately from other indexes because
         # self.value is not an ndarray
-        _base = lambda ar : ar if ar.base is None else ar.base
+        _base = lambda ar: ar if ar.base is None else ar.base
         for index in self.indices.values():
             result = CategoricalIndex(index.values, copy=True)
             tm.assert_index_equal(index, result)
diff --git a/pandas/tests/indexes/test_datetimelike.py b/pandas/tests/indexes/test_datetimelike.py
index e5a4ced4c..b212a7b75 100644
--- a/pandas/tests/indexes/test_datetimelike.py
+++ b/pandas/tests/indexes/test_datetimelike.py
@@ -16,7 +16,6 @@ from .datetimelike import DatetimeLike
 
 class TestPeriodIndex(DatetimeLike, tm.TestCase):
     _holder = PeriodIndex
-    _multiprocess_can_split_ = True
 
     def setUp(self):
         self.indices = dict(index=tm.makePeriodIndex(10))
@@ -240,7 +239,6 @@ class TestPeriodIndex(DatetimeLike, tm.TestCase):
 
 class TestTimedeltaIndex(DatetimeLike, tm.TestCase):
     _holder = TimedeltaIndex
-    _multiprocess_can_split_ = True
 
     def setUp(self):
         self.indices = dict(index=tm.makeTimedeltaIndex(10))
diff --git a/pandas/tests/indexes/test_multi.py b/pandas/tests/indexes/test_multi.py
index 7d9ceb526..365236f72 100644
--- a/pandas/tests/indexes/test_multi.py
+++ b/pandas/tests/indexes/test_multi.py
@@ -30,7 +30,6 @@ from .common import Base
 
 class TestMultiIndex(Base, tm.TestCase):
     _holder = MultiIndex
-    _multiprocess_can_split_ = True
     _compat_props = ['shape', 'ndim', 'size', 'itemsize']
 
     def setUp(self):
@@ -900,11 +899,11 @@ class TestMultiIndex(Base, tm.TestCase):
 
         res = mi.append(mi)
         exp = MultiIndex.from_arrays([[1, 2, 3, 1, 2, 3],
-                                     [1.1, np.nan, 3.3, 1.1, np.nan, 3.3],
-                                     ['a', 'b', 'c', 'a', 'b', 'c'],
-                                     dti.append(dti),
-                                     dti_tz.append(dti_tz),
-                                     pi.append(pi)])
+                                      [1.1, np.nan, 3.3, 1.1, np.nan, 3.3],
+                                      ['a', 'b', 'c', 'a', 'b', 'c'],
+                                      dti.append(dti),
+                                      dti_tz.append(dti_tz),
+                                      pi.append(pi)])
         tm.assert_index_equal(res, exp)
 
         other = MultiIndex.from_arrays([['x', 'y', 'z'], ['x', 'y', 'z'],
@@ -913,11 +912,11 @@ class TestMultiIndex(Base, tm.TestCase):
 
         res = mi.append(other)
         exp = MultiIndex.from_arrays([[1, 2, 3, 'x', 'y', 'z'],
-                                     [1.1, np.nan, 3.3, 'x', 'y', 'z'],
-                                     ['a', 'b', 'c', 'x', 'y', 'z'],
-                                     dti.append(pd.Index(['x', 'y', 'z'])),
-                                     dti_tz.append(pd.Index(['x', 'y', 'z'])),
-                                     pi.append(pd.Index(['x', 'y', 'z']))])
+                                      [1.1, np.nan, 3.3, 'x', 'y', 'z'],
+                                      ['a', 'b', 'c', 'x', 'y', 'z'],
+                                      dti.append(pd.Index(['x', 'y', 'z'])),
+                                      dti_tz.append(pd.Index(['x', 'y', 'z'])),
+                                      pi.append(pd.Index(['x', 'y', 'z']))])
         tm.assert_index_equal(res, exp)
 
     def test_get_level_values(self):
diff --git a/pandas/tests/indexes/test_numeric.py b/pandas/tests/indexes/test_numeric.py
index 4dab7ae76..1bf9a1062 100644
--- a/pandas/tests/indexes/test_numeric.py
+++ b/pandas/tests/indexes/test_numeric.py
@@ -176,7 +176,6 @@ class Numeric(Base):
 
 class TestFloat64Index(Numeric, tm.TestCase):
     _holder = Float64Index
-    _multiprocess_can_split_ = True
 
     def setUp(self):
         self.indices = dict(mixed=Float64Index([1.5, 2, 3, 4, 5]),
@@ -624,7 +623,6 @@ class NumericInt(Numeric):
 class TestInt64Index(NumericInt, tm.TestCase):
     _dtype = 'int64'
     _holder = Int64Index
-    _multiprocess_can_split_ = True
 
     def setUp(self):
         self.indices = dict(index=Int64Index(np.arange(0, 20, 2)))
@@ -895,7 +893,6 @@ class TestUInt64Index(NumericInt, tm.TestCase):
 
     _dtype = 'uint64'
     _holder = UInt64Index
-    _multiprocess_can_split_ = True
 
     def setUp(self):
         self.indices = dict(index=UInt64Index([2**63, 2**63 + 10, 2**63 + 15,
diff --git a/pandas/tests/indexes/test_timedelta.py b/pandas/tests/indexes/test_timedelta.py
index be01ad03a..e6071b8c4 100644
--- a/pandas/tests/indexes/test_timedelta.py
+++ b/pandas/tests/indexes/test_timedelta.py
@@ -34,7 +34,6 @@ class TestSlicing(tm.TestCase):
 
 
 class TestTimeSeries(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_series_box_timedelta(self):
         rng = timedelta_range('1 day 1 s', periods=5, freq='h')
diff --git a/pandas/tests/indexing/test_callable.py b/pandas/tests/indexing/test_callable.py
index bcadc41b1..1d7020507 100644
--- a/pandas/tests/indexing/test_callable.py
+++ b/pandas/tests/indexing/test_callable.py
@@ -8,8 +8,6 @@ import pandas.util.testing as tm
 
 class TestIndexingCallable(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_frame_loc_ix_callable(self):
         # GH 11485
         df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': list('aabb'),
diff --git a/pandas/tests/indexing/test_coercion.py b/pandas/tests/indexing/test_coercion.py
index 0cfa72584..b9a746cd2 100644
--- a/pandas/tests/indexing/test_coercion.py
+++ b/pandas/tests/indexing/test_coercion.py
@@ -15,8 +15,6 @@ import pandas.compat as compat
 
 class CoercionBase(object):
 
-    _multiprocess_can_split_ = True
-
     klasses = ['index', 'series']
     dtypes = ['object', 'int64', 'float64', 'complex128', 'bool',
               'datetime64', 'datetime64tz', 'timedelta64', 'period']
@@ -1187,7 +1185,7 @@ class TestReplaceSeriesCoercion(CoercionBase, tm.TestCase):
              to_key in ('bool')) or
 
             # TODO_GH12747 The result must be int?
-           (from_key == 'bool' and to_key == 'int64')):
+                (from_key == 'bool' and to_key == 'int64')):
 
             # buggy on 32-bit
             if tm.is_platform_32bit():
diff --git a/pandas/tests/indexing/test_indexing.py b/pandas/tests/indexing/test_indexing.py
index a9dfcf267..b06b1067b 100644
--- a/pandas/tests/indexing/test_indexing.py
+++ b/pandas/tests/indexing/test_indexing.py
@@ -99,8 +99,6 @@ def _mklbl(prefix, n):
 
 class TestIndexing(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     _objs = set(['series', 'frame', 'panel'])
     _typs = set(['ints', 'uints', 'labels', 'mixed',
                  'ts', 'floats', 'empty', 'ts_rev'])
diff --git a/pandas/tests/indexing/test_indexing_slow.py b/pandas/tests/indexing/test_indexing_slow.py
index 5d563e200..42b50e37f 100644
--- a/pandas/tests/indexing/test_indexing_slow.py
+++ b/pandas/tests/indexing/test_indexing_slow.py
@@ -10,8 +10,6 @@ import pandas.util.testing as tm
 
 class TestIndexingSlow(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     @tm.slow
     def test_multiindex_get_loc(self):  # GH7724, GH2646
 
diff --git a/pandas/tests/plotting/test_misc.py b/pandas/tests/plotting/test_misc.py
index c92287b2b..11f00386e 100644
--- a/pandas/tests/plotting/test_misc.py
+++ b/pandas/tests/plotting/test_misc.py
@@ -18,6 +18,7 @@ from pandas.tests.plotting.common import (TestPlotBase, _check_plot_works,
 
 @tm.mplskip
 class TestSeriesPlots(TestPlotBase):
+
     def setUp(self):
         TestPlotBase.setUp(self)
         import matplotlib as mpl
@@ -49,6 +50,7 @@ class TestSeriesPlots(TestPlotBase):
 
 @tm.mplskip
 class TestDataFramePlots(TestPlotBase):
+
     @slow
     def test_scatter_plot_legacy(self):
         tm._skip_if_no_scipy()
diff --git a/pandas/tests/scalar/test_timestamp.py b/pandas/tests/scalar/test_timestamp.py
index f686f1aa6..0cef27d2e 100644
--- a/pandas/tests/scalar/test_timestamp.py
+++ b/pandas/tests/scalar/test_timestamp.py
@@ -1149,6 +1149,7 @@ class TestTimestamp(tm.TestCase):
 
 
 class TestTimestampNsOperations(tm.TestCase):
+
     def setUp(self):
         self.timestamp = Timestamp(datetime.utcnow())
 
@@ -1324,6 +1325,7 @@ class TestTimestampNsOperations(tm.TestCase):
 
 
 class TestTimestampOps(tm.TestCase):
+
     def test_timestamp_and_datetime(self):
         self.assertEqual((Timestamp(datetime(
             2013, 10, 13)) - datetime(2013, 10, 12)).days, 1)
@@ -1404,6 +1406,7 @@ class TestTimestampOps(tm.TestCase):
 
 
 class TestTimestampToJulianDate(tm.TestCase):
+
     def test_compare_1700(self):
         r = Timestamp('1700-06-23').to_julian_date()
         self.assertEqual(r, 2342145.5)
@@ -1426,7 +1429,6 @@ class TestTimestampToJulianDate(tm.TestCase):
 
 
 class TestTimeSeries(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_timestamp_to_datetime(self):
         tm._skip_if_no_pytz()
diff --git a/pandas/tests/series/test_alter_axes.py b/pandas/tests/series/test_alter_axes.py
index 2ddfa27ee..6473dbeea 100644
--- a/pandas/tests/series/test_alter_axes.py
+++ b/pandas/tests/series/test_alter_axes.py
@@ -18,8 +18,6 @@ from .common import TestData
 
 class TestSeriesAlterAxes(TestData, tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_setindex(self):
         # wrong type
         series = self.series.copy()
diff --git a/pandas/tests/series/test_analytics.py b/pandas/tests/series/test_analytics.py
index 07e1be609..52b85c89a 100644
--- a/pandas/tests/series/test_analytics.py
+++ b/pandas/tests/series/test_analytics.py
@@ -30,8 +30,6 @@ from .common import TestData
 
 class TestSeriesAnalytics(TestData, tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_sum_zero(self):
         arr = np.array([])
         self.assertEqual(nanops.nansum(arr), 0)
diff --git a/pandas/tests/series/test_apply.py b/pandas/tests/series/test_apply.py
index ec7ffde34..16d1466bb 100644
--- a/pandas/tests/series/test_apply.py
+++ b/pandas/tests/series/test_apply.py
@@ -15,8 +15,6 @@ from .common import TestData
 
 class TestSeriesApply(TestData, tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_apply(self):
         with np.errstate(all='ignore'):
             assert_series_equal(self.ts.apply(np.sqrt), np.sqrt(self.ts))
@@ -141,8 +139,6 @@ class TestSeriesApply(TestData, tm.TestCase):
 
 class TestSeriesMap(TestData, tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_map(self):
         index, data = tm.getMixedTypeDict()
 
diff --git a/pandas/tests/series/test_asof.py b/pandas/tests/series/test_asof.py
index db306d2a7..d2fd8858e 100644
--- a/pandas/tests/series/test_asof.py
+++ b/pandas/tests/series/test_asof.py
@@ -10,7 +10,6 @@ from .common import TestData
 
 
 class TestSeriesAsof(TestData, tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_basic(self):
 
diff --git a/pandas/tests/series/test_combine_concat.py b/pandas/tests/series/test_combine_concat.py
index 7bcd17635..d4e5d36c1 100644
--- a/pandas/tests/series/test_combine_concat.py
+++ b/pandas/tests/series/test_combine_concat.py
@@ -18,8 +18,6 @@ from .common import TestData
 
 class TestSeriesCombine(TestData, tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_append(self):
         appendedSeries = self.series.append(self.objSeries)
         for idx, value in compat.iteritems(appendedSeries):
@@ -222,8 +220,6 @@ class TestSeriesCombine(TestData, tm.TestCase):
 
 class TestTimeseries(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_append_concat(self):
         rng = date_range('5/8/2012 1:45', periods=10, freq='5T')
         ts = Series(np.random.randn(len(rng)), rng)
diff --git a/pandas/tests/series/test_constructors.py b/pandas/tests/series/test_constructors.py
index 777b188b8..aef4c9269 100644
--- a/pandas/tests/series/test_constructors.py
+++ b/pandas/tests/series/test_constructors.py
@@ -26,8 +26,6 @@ from .common import TestData
 
 class TestSeriesConstructors(TestData, tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_scalar_conversion(self):
 
         # Pass in scalar is disabled
diff --git a/pandas/tests/series/test_datetime_values.py b/pandas/tests/series/test_datetime_values.py
index b9f999a6c..4c697c7e5 100644
--- a/pandas/tests/series/test_datetime_values.py
+++ b/pandas/tests/series/test_datetime_values.py
@@ -22,8 +22,6 @@ from .common import TestData
 
 class TestSeriesDatetimeValues(TestData, tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_dt_namespace_accessor(self):
 
         # GH 7207, 11128
@@ -168,9 +166,9 @@ class TestSeriesDatetimeValues(TestData, tm.TestCase):
         cases = [Series(timedelta_range('1 day', periods=5),
                         index=list('abcde'), name='xxx'),
                  Series(timedelta_range('1 day 01:23:45', periods=5,
-                        freq='s'), name='xxx'),
+                                        freq='s'), name='xxx'),
                  Series(timedelta_range('2 days 01:23:45.012345', periods=5,
-                        freq='ms'), name='xxx')]
+                                        freq='ms'), name='xxx')]
         for s in cases:
             for prop in ok_for_td:
                 # we test freq below
diff --git a/pandas/tests/series/test_dtypes.py b/pandas/tests/series/test_dtypes.py
index 127a410f6..13375ab88 100644
--- a/pandas/tests/series/test_dtypes.py
+++ b/pandas/tests/series/test_dtypes.py
@@ -20,8 +20,6 @@ from .common import TestData
 
 class TestSeriesDtypes(TestData, tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_astype(self):
         s = Series(np.random.randn(5), name='foo')
 
diff --git a/pandas/tests/series/test_indexing.py b/pandas/tests/series/test_indexing.py
index e0d83d6ee..a20cb8324 100644
--- a/pandas/tests/series/test_indexing.py
+++ b/pandas/tests/series/test_indexing.py
@@ -31,8 +31,6 @@ JOIN_TYPES = ['inner', 'outer', 'left', 'right']
 
 class TestSeriesIndexing(TestData, tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_get(self):
 
         # GH 6383
@@ -2216,7 +2214,6 @@ class TestSeriesIndexing(TestData, tm.TestCase):
 
 
 class TestTimeSeriesDuplicates(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def setUp(self):
         dates = [datetime(2000, 1, 2), datetime(2000, 1, 2),
@@ -2603,6 +2600,7 @@ class TestDatetimeIndexing(tm.TestCase):
 
 
 class TestNatIndexing(tm.TestCase):
+
     def setUp(self):
         self.series = Series(date_range('1/1/2000', periods=10))
 
diff --git a/pandas/tests/series/test_internals.py b/pandas/tests/series/test_internals.py
index e3a0e056f..a3b13ba9b 100644
--- a/pandas/tests/series/test_internals.py
+++ b/pandas/tests/series/test_internals.py
@@ -16,8 +16,6 @@ import pandas.util.testing as tm
 
 class TestSeriesInternals(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_convert_objects(self):
 
         s = Series([1., 2, 3], index=['a', 'b', 'c'])
diff --git a/pandas/tests/series/test_io.py b/pandas/tests/series/test_io.py
index 48528dc54..d514fbfc1 100644
--- a/pandas/tests/series/test_io.py
+++ b/pandas/tests/series/test_io.py
@@ -18,8 +18,6 @@ from .common import TestData
 
 class TestSeriesToCSV(TestData, tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_from_csv(self):
 
         with ensure_clean() as path:
@@ -112,8 +110,6 @@ class TestSeriesToCSV(TestData, tm.TestCase):
 
 class TestSeriesIO(TestData, tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_to_frame(self):
         self.ts.name = None
         rs = self.ts.to_frame()
@@ -174,8 +170,6 @@ class TestSeriesIO(TestData, tm.TestCase):
 
 class TestSeriesToList(TestData, tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_tolist(self):
         rs = self.ts.tolist()
         xp = self.ts.values.tolist()
diff --git a/pandas/tests/series/test_misc_api.py b/pandas/tests/series/test_misc_api.py
index b1b06cc7b..2facbaf1f 100644
--- a/pandas/tests/series/test_misc_api.py
+++ b/pandas/tests/series/test_misc_api.py
@@ -118,8 +118,6 @@ class SharedWithSparse(object):
 
 class TestSeriesMisc(TestData, SharedWithSparse, tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_tab_completion(self):
         # GH 9910
         s = Series(list('abcd'))
diff --git a/pandas/tests/series/test_missing.py b/pandas/tests/series/test_missing.py
index 6821a8b9f..702fa2acb 100644
--- a/pandas/tests/series/test_missing.py
+++ b/pandas/tests/series/test_missing.py
@@ -41,8 +41,6 @@ def _simple_ts(start, end, freq='D'):
 
 class TestSeriesMissingData(TestData, tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_timedelta_fillna(self):
         # GH 3371
         s = Series([Timestamp('20130101'), Timestamp('20130101'), Timestamp(
diff --git a/pandas/tests/series/test_operators.py b/pandas/tests/series/test_operators.py
index 7b1201b97..3d609dec7 100644
--- a/pandas/tests/series/test_operators.py
+++ b/pandas/tests/series/test_operators.py
@@ -28,8 +28,6 @@ from .common import TestData
 
 class TestSeriesOperators(TestData, tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_series_comparison_scalars(self):
         series = Series(date_range('1/1/2000', periods=10))
 
diff --git a/pandas/tests/series/test_replace.py b/pandas/tests/series/test_replace.py
index aa16f2cca..7fe31bab8 100644
--- a/pandas/tests/series/test_replace.py
+++ b/pandas/tests/series/test_replace.py
@@ -11,8 +11,6 @@ from .common import TestData
 
 class TestSeriesReplace(TestData, tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_replace(self):
         N = 100
         ser = pd.Series(np.random.randn(N))
diff --git a/pandas/tests/series/test_repr.py b/pandas/tests/series/test_repr.py
index af52f6e71..99a406a71 100644
--- a/pandas/tests/series/test_repr.py
+++ b/pandas/tests/series/test_repr.py
@@ -18,8 +18,6 @@ from .common import TestData
 
 class TestSeriesRepr(TestData, tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_multilevel_name_print(self):
         index = MultiIndex(levels=[['foo', 'bar', 'baz', 'qux'], ['one', 'two',
                                                                   'three']],
diff --git a/pandas/tests/series/test_sorting.py b/pandas/tests/series/test_sorting.py
index fb3817eb8..db506f12a 100644
--- a/pandas/tests/series/test_sorting.py
+++ b/pandas/tests/series/test_sorting.py
@@ -13,8 +13,6 @@ from .common import TestData
 
 class TestSeriesSorting(TestData, tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_sort(self):
 
         ts = self.ts.copy()
diff --git a/pandas/tests/series/test_subclass.py b/pandas/tests/series/test_subclass.py
index 5bcf25802..3b1b8aca4 100644
--- a/pandas/tests/series/test_subclass.py
+++ b/pandas/tests/series/test_subclass.py
@@ -8,8 +8,6 @@ import pandas.util.testing as tm
 
 class TestSeriesSubclassing(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_indexing_sliced(self):
         s = tm.SubclassedSeries([1, 2, 3, 4], index=list('abcd'))
         res = s.loc[['a', 'b']]
@@ -37,8 +35,6 @@ class TestSeriesSubclassing(tm.TestCase):
 
 class TestSparseSeriesSubclassing(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_subclass_sparse_slice(self):
         # int64
         s = tm.SubclassedSparseSeries([1, 2, 3, 4, 5])
diff --git a/pandas/tests/series/test_timeseries.py b/pandas/tests/series/test_timeseries.py
index bd346fb9b..e0db813e6 100644
--- a/pandas/tests/series/test_timeseries.py
+++ b/pandas/tests/series/test_timeseries.py
@@ -32,7 +32,6 @@ def assert_range_equal(left, right):
 
 
 class TestTimeSeries(TestData, tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_shift(self):
         shifted = self.ts.shift(1)
diff --git a/pandas/tests/test_algos.py b/pandas/tests/test_algos.py
index 40b277f3f..fab04f7fa 100644
--- a/pandas/tests/test_algos.py
+++ b/pandas/tests/test_algos.py
@@ -20,7 +20,6 @@ from pandas.util.testing import assert_almost_equal
 
 
 class TestMatch(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_ints(self):
         values = np.array([0, 2, 1])
@@ -57,7 +56,6 @@ class TestMatch(tm.TestCase):
 
 
 class TestSafeSort(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_basic_sort(self):
         values = [3, 1, 2, 0, 4]
@@ -144,7 +142,6 @@ class TestSafeSort(tm.TestCase):
 
 
 class TestFactorize(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_basic(self):
 
@@ -306,7 +303,6 @@ class TestFactorize(tm.TestCase):
 
 
 class TestUnique(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_ints(self):
         arr = np.random.randint(0, 100, size=50)
@@ -389,7 +385,6 @@ class TestUnique(tm.TestCase):
 
 
 class TestIsin(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_invalid(self):
 
@@ -472,7 +467,6 @@ class TestIsin(tm.TestCase):
 
 
 class TestValueCounts(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_value_counts(self):
         np.random.seed(1234)
@@ -659,8 +653,6 @@ class TestValueCounts(tm.TestCase):
 
 class TestDuplicated(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_duplicated_with_nas(self):
         keys = np.array([0, 1, np.nan, 0, 2, np.nan], dtype=object)
 
@@ -896,7 +888,6 @@ class GroupVarTestMixin(object):
 
 class TestGroupVarFloat64(tm.TestCase, GroupVarTestMixin):
     __test__ = True
-    _multiprocess_can_split_ = True
 
     algo = algos.algos.group_var_float64
     dtype = np.float64
@@ -920,7 +911,6 @@ class TestGroupVarFloat64(tm.TestCase, GroupVarTestMixin):
 
 class TestGroupVarFloat32(tm.TestCase, GroupVarTestMixin):
     __test__ = True
-    _multiprocess_can_split_ = True
 
     algo = algos.algos.group_var_float32
     dtype = np.float32
@@ -1068,7 +1058,6 @@ def test_arrmap():
 
 
 class TestTseriesUtil(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_combineFunc(self):
         pass
diff --git a/pandas/tests/test_categorical.py b/pandas/tests/test_categorical.py
index be55d6e19..cc99cf0f8 100644
--- a/pandas/tests/test_categorical.py
+++ b/pandas/tests/test_categorical.py
@@ -26,7 +26,6 @@ from pandas.core.config import option_context
 
 
 class TestCategorical(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def setUp(self):
         self.factor = Categorical(['a', 'b', 'b', 'a', 'a', 'c', 'c', 'c'],
@@ -1574,12 +1573,12 @@ Categories (3, object): [ああああ, いいいいい, ううううううう]""
         # https://github.com/pandas-dev/pandas/issues/14522
 
         c1 = pd.Categorical(['cheese', 'milk', 'apple', 'bread', 'bread'],
-                 categories=['cheese', 'milk', 'apple', 'bread'],
-                 ordered=True)
+                            categories=['cheese', 'milk', 'apple', 'bread'],
+                            ordered=True)
         s1 = pd.Series(c1)
         c2 = pd.Categorical(['cheese', 'milk', 'apple', 'bread', 'bread'],
-                 categories=['cheese', 'milk', 'apple', 'bread'],
-                 ordered=False)
+                            categories=['cheese', 'milk', 'apple', 'bread'],
+                            ordered=False)
         s2 = pd.Series(c2)
 
         # Searching for single item argument, side='left' (default)
@@ -1697,8 +1696,8 @@ Categories (3, object): [ああああ, いいいいい, ううううううう]""
         tm.assert_index_equal(result, Index(np.array([1] * 5, dtype=np.int64)))
 
     def test_validate_inplace(self):
-        cat = Categorical(['A','B','B','C','A'])
-        invalid_values = [1, "True", [1,2,3], 5.0]
+        cat = Categorical(['A', 'B', 'B', 'C', 'A'])
+        invalid_values = [1, "True", [1, 2, 3], 5.0]
 
         for value in invalid_values:
             with self.assertRaises(ValueError):
@@ -1711,19 +1710,21 @@ Categories (3, object): [ああああ, いいいいい, ううううううう]""
                 cat.as_unordered(inplace=value)
 
             with self.assertRaises(ValueError):
-                cat.set_categories(['X','Y','Z'], rename=True, inplace=value)
+                cat.set_categories(['X', 'Y', 'Z'], rename=True, inplace=value)
 
             with self.assertRaises(ValueError):
-                cat.rename_categories(['X','Y','Z'], inplace=value)
+                cat.rename_categories(['X', 'Y', 'Z'], inplace=value)
 
             with self.assertRaises(ValueError):
-                cat.reorder_categories(['X','Y','Z'], ordered=True, inplace=value)
+                cat.reorder_categories(
+                    ['X', 'Y', 'Z'], ordered=True, inplace=value)
 
             with self.assertRaises(ValueError):
-                cat.add_categories(new_categories=['D','E','F'], inplace=value)
+                cat.add_categories(
+                    new_categories=['D', 'E', 'F'], inplace=value)
 
             with self.assertRaises(ValueError):
-                cat.remove_categories(removals=['D','E','F'], inplace=value)
+                cat.remove_categories(removals=['D', 'E', 'F'], inplace=value)
 
             with self.assertRaises(ValueError):
                 cat.remove_unused_categories(inplace=value)
@@ -1733,7 +1734,6 @@ Categories (3, object): [ああああ, いいいいい, ううううううう]""
 
 
 class TestCategoricalAsBlock(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def setUp(self):
         self.factor = Categorical(['a', 'b', 'b', 'a', 'a', 'c', 'c', 'c'])
@@ -3045,13 +3045,15 @@ Categories (10, timedelta64[ns]): [0 days 01:00:00 < 1 days 01:00:00 < 2 days 01
             tm.assert_series_equal(res, exp)
 
             # we don't exclude the count of None and sort by counts
-            exp = pd.Series([3, 2, 1], index=pd.CategoricalIndex([np.nan, "a", "b"]))
+            exp = pd.Series(
+                [3, 2, 1], index=pd.CategoricalIndex([np.nan, "a", "b"]))
             res = s.value_counts(dropna=False)
             tm.assert_series_equal(res, exp)
 
             # When we aren't sorting by counts, and np.nan isn't a
             # category, it should be last.
-            exp = pd.Series([2, 1, 3], index=pd.CategoricalIndex(["a", "b", np.nan]))
+            exp = pd.Series(
+                [2, 1, 3], index=pd.CategoricalIndex(["a", "b", np.nan]))
             res = s.value_counts(dropna=False, sort=False)
             tm.assert_series_equal(res, exp)
 
@@ -3703,7 +3705,8 @@ Categories (10, timedelta64[ns]): [0 days 01:00:00 < 1 days 01:00:00 < 2 days 01
         # assign a part of a column with dtype == categorical ->
         # exp_parts_cats_col
         df = orig.copy()
-        df.loc["j":"k", df.columns[0]] = pd.Categorical(["b", "b"], categories=["a", "b"])
+        df.loc["j":"k", df.columns[0]] = pd.Categorical(
+            ["b", "b"], categories=["a", "b"])
         tm.assert_frame_equal(df, exp_parts_cats_col)
 
         with tm.assertRaises(ValueError):
@@ -4013,7 +4016,6 @@ Categories (10, timedelta64[ns]): [0 days 01:00:00 < 1 days 01:00:00 < 2 days 01
         self.assert_index_equal(df['grade'].cat.categories,
                                 dfa['grade'].cat.categories)
 
-
     def test_concat_preserve(self):
 
         # GH 8641  series concat not preserving category dtype
@@ -4042,7 +4044,7 @@ Categories (10, timedelta64[ns]): [0 days 01:00:00 < 1 days 01:00:00 < 2 days 01
         res = pd.concat([df2, df2])
         exp = DataFrame({'A': pd.concat([a, a]),
                          'B': pd.concat([b, b]).astype(
-                                'category', categories=list('cab'))})
+            'category', categories=list('cab'))})
         tm.assert_frame_equal(res, exp)
 
     def test_categorical_index_preserver(self):
@@ -4052,18 +4054,18 @@ Categories (10, timedelta64[ns]): [0 days 01:00:00 < 1 days 01:00:00 < 2 days 01
 
         df2 = DataFrame({'A': a,
                          'B': b.astype('category', categories=list('cab'))
-                        }).set_index('B')
+                         }).set_index('B')
         result = pd.concat([df2, df2])
         expected = DataFrame({'A': pd.concat([a, a]),
                               'B': pd.concat([b, b]).astype(
                                   'category', categories=list('cab'))
-                             }).set_index('B')
+                              }).set_index('B')
         tm.assert_frame_equal(result, expected)
 
         # wrong catgories
         df3 = DataFrame({'A': a,
                          'B': pd.Categorical(b, categories=list('abc'))
-                        }).set_index('B')
+                         }).set_index('B')
         self.assertRaises(TypeError, lambda: pd.concat([df2, df3]))
 
     def test_merge(self):
@@ -4391,8 +4393,8 @@ Categories (10, timedelta64[ns]): [0 days 01:00:00 < 1 days 01:00:00 < 2 days 01
             ('decode', ("UTF-8",), {}),
             ('encode', ("UTF-8",), {}),
             ('endswith', ("a",), {}),
-            ('extract', ("([a-z]*) ",), {"expand":False}),
-            ('extract', ("([a-z]*) ",), {"expand":True}),
+            ('extract', ("([a-z]*) ",), {"expand": False}),
+            ('extract', ("([a-z]*) ",), {"expand": True}),
             ('extractall', ("([a-z]*) ",), {}),
             ('find', ("a",), {}),
             ('findall', ("a",), {}),
@@ -4550,8 +4552,6 @@ Categories (10, timedelta64[ns]): [0 days 01:00:00 < 1 days 01:00:00 < 2 days 01
 
 class TestCategoricalSubclassing(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_constructor(self):
         sc = tm.SubclassedCategorical(['a', 'b', 'c'])
         self.assertIsInstance(sc, tm.SubclassedCategorical)
diff --git a/pandas/tests/test_common.py b/pandas/tests/test_common.py
index 023925012..90b115757 100644
--- a/pandas/tests/test_common.py
+++ b/pandas/tests/test_common.py
@@ -7,8 +7,6 @@ from pandas.compat import range, lmap
 import pandas.core.common as com
 import pandas.util.testing as tm
 
-_multiprocess_can_split_ = True
-
 
 def test_mut_exclusive():
     msg = "mutually exclusive arguments: '[ab]' and '[ab]'"
diff --git a/pandas/tests/test_config.py b/pandas/tests/test_config.py
index ed8c37fd6..c58aada19 100644
--- a/pandas/tests/test_config.py
+++ b/pandas/tests/test_config.py
@@ -5,7 +5,6 @@ import warnings
 
 
 class TestConfig(unittest.TestCase):
-    _multiprocess_can_split_ = True
 
     def __init__(self, *args):
         super(TestConfig, self).__init__(*args)
diff --git a/pandas/tests/test_expressions.py b/pandas/tests/test_expressions.py
index 18b078d0a..eca4a8f3c 100644
--- a/pandas/tests/test_expressions.py
+++ b/pandas/tests/test_expressions.py
@@ -58,8 +58,6 @@ _mixed2_panel = Panel(dict(ItemA=_mixed2, ItemB=(_mixed2 + 3)))
 
 class TestExpressions(tm.TestCase):
 
-    _multiprocess_can_split_ = False
-
     def setUp(self):
 
         self.frame = _frame.copy()
diff --git a/pandas/tests/test_generic.py b/pandas/tests/test_generic.py
index 5bf2eda47..916d7ae0b 100644
--- a/pandas/tests/test_generic.py
+++ b/pandas/tests/test_generic.py
@@ -33,8 +33,6 @@ import pandas.util.testing as tm
 
 class Generic(object):
 
-    _multiprocess_can_split_ = True
-
     def setUp(self):
         pass
 
diff --git a/pandas/tests/test_internals.py b/pandas/tests/test_internals.py
index 2bfe31ad4..1dfea168c 100644
--- a/pandas/tests/test_internals.py
+++ b/pandas/tests/test_internals.py
@@ -182,8 +182,6 @@ def create_mgr(descr, item_shape=None):
 
 class TestBlock(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def setUp(self):
         # self.fblock = get_float_ex()  # a,c,e
         # self.cblock = get_complex_ex() #
@@ -299,7 +297,6 @@ class TestBlock(tm.TestCase):
 
 
 class TestDatetimeBlock(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_try_coerce_arg(self):
         block = create_block('datetime', [0])
@@ -318,7 +315,6 @@ class TestDatetimeBlock(tm.TestCase):
 
 
 class TestBlockManager(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def setUp(self):
         self.mgr = create_mgr(
@@ -1057,7 +1053,6 @@ class TestIndexing(object):
 
 
 class TestBlockPlacement(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_slice_len(self):
         self.assertEqual(len(BlockPlacement(slice(0, 4))), 4)
diff --git a/pandas/tests/test_join.py b/pandas/tests/test_join.py
index 0e7dda05a..2a16d7663 100644
--- a/pandas/tests/test_join.py
+++ b/pandas/tests/test_join.py
@@ -9,7 +9,6 @@ from pandas.util.testing import assert_almost_equal
 
 
 class TestIndexer(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_outer_join_indexer(self):
         typemap = [('int32', _join.outer_join_indexer_int32),
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index d87ad8d90..1fe2d701f 100755
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -25,8 +25,6 @@ import pandas.index as _index
 
 class TestMultiLevel(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def setUp(self):
 
         index = MultiIndex(levels=[['foo', 'bar', 'baz', 'qux'], ['one', 'two',
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 89e8fb78a..4f56419b1 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -52,7 +52,6 @@ class PanelTests(object):
 
 
 class SafeForLongAndSparse(object):
-    _multiprocess_can_split_ = True
 
     def test_repr(self):
         repr(self.panel)
@@ -177,7 +176,6 @@ class SafeForLongAndSparse(object):
 
 
 class SafeForSparse(object):
-    _multiprocess_can_split_ = True
 
     @classmethod
     def assert_panel_equal(cls, x, y):
@@ -422,8 +420,6 @@ class SafeForSparse(object):
 
 class CheckIndexing(object):
 
-    _multiprocess_can_split_ = True
-
     def test_getitem(self):
         self.assertRaises(Exception, self.panel.__getitem__, 'ItemQ')
 
@@ -869,7 +865,6 @@ tm.add_nans(_panel)
 
 class TestPanel(tm.TestCase, PanelTests, CheckIndexing, SafeForLongAndSparse,
                 SafeForSparse):
-    _multiprocess_can_split_ = True
 
     @classmethod
     def assert_panel_equal(cls, x, y):
@@ -2278,7 +2273,6 @@ class TestLongPanel(tm.TestCase):
     """
     LongPanel no longer exists, but...
     """
-    _multiprocess_can_split_ = True
 
     def setUp(self):
         import warnings
diff --git a/pandas/tests/test_panel4d.py b/pandas/tests/test_panel4d.py
index aeca24964..96864c626 100644
--- a/pandas/tests/test_panel4d.py
+++ b/pandas/tests/test_panel4d.py
@@ -29,8 +29,6 @@ def add_nans(panel4d):
 
 class SafeForLongAndSparse(object):
 
-    _multiprocess_can_split_ = True
-
     def test_repr(self):
         repr(self.panel4d)
 
@@ -148,8 +146,6 @@ class SafeForLongAndSparse(object):
 
 class SafeForSparse(object):
 
-    _multiprocess_can_split_ = True
-
     @classmethod
     def assert_panel_equal(cls, x, y):
         assert_panel_equal(x, y)
@@ -305,8 +301,6 @@ class SafeForSparse(object):
 
 class CheckIndexing(object):
 
-    _multiprocess_can_split_ = True
-
     def test_getitem(self):
         self.assertRaises(Exception, self.panel4d.__getitem__, 'ItemQ')
 
@@ -604,8 +598,6 @@ class CheckIndexing(object):
 class TestPanel4d(tm.TestCase, CheckIndexing, SafeForSparse,
                   SafeForLongAndSparse):
 
-    _multiprocess_can_split_ = True
-
     @classmethod
     def assert_panel4d_equal(cls, x, y):
         assert_panel4d_equal(x, y)
diff --git a/pandas/tests/test_reshape.py b/pandas/tests/test_reshape.py
index b5fa945a5..ed5ec970b 100644
--- a/pandas/tests/test_reshape.py
+++ b/pandas/tests/test_reshape.py
@@ -14,8 +14,6 @@ from pandas.core.reshape import (melt, lreshape, get_dummies, wide_to_long)
 import pandas.util.testing as tm
 from pandas.compat import range, u
 
-_multiprocess_can_split_ = True
-
 
 class TestMelt(tm.TestCase):
 
diff --git a/pandas/tests/test_stats.py b/pandas/tests/test_stats.py
index eb8ab02c2..118c4147a 100644
--- a/pandas/tests/test_stats.py
+++ b/pandas/tests/test_stats.py
@@ -13,7 +13,6 @@ import pandas.util.testing as tm
 
 
 class TestRank(tm.TestCase):
-    _multiprocess_can_split_ = True
     s = Series([1, 3, 4, 2, nan, 2, 1, 5, nan, 3])
     df = DataFrame({'A': s, 'B': s})
 
diff --git a/pandas/tests/test_strings.py b/pandas/tests/test_strings.py
index f35894698..ce97b09b7 100644
--- a/pandas/tests/test_strings.py
+++ b/pandas/tests/test_strings.py
@@ -20,8 +20,6 @@ import pandas.core.strings as strings
 
 class TestStringMethods(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def test_api(self):
 
         # GH 6106, GH 9322
diff --git a/pandas/tests/test_take.py b/pandas/tests/test_take.py
index bf8a3ab37..3aed22c14 100644
--- a/pandas/tests/test_take.py
+++ b/pandas/tests/test_take.py
@@ -8,15 +8,11 @@ import pandas.core.algorithms as algos
 import pandas.util.testing as tm
 from pandas.tslib import iNaT
 
-_multiprocess_can_split_ = True
-
 
 class TestTake(tm.TestCase):
     # standard incompatible fill error
     fill_error = re.compile("Incompatible type for fill_value")
 
-    _multiprocess_can_split_ = True
-
     def test_1d_with_out(self):
         def _test_dtype(dtype, can_hold_na, writeable=True):
             data = np.random.randint(0, 2, 4).astype(dtype)
diff --git a/pandas/tests/test_testing.py b/pandas/tests/test_testing.py
index 5e60efd15..466e9ee5a 100644
--- a/pandas/tests/test_testing.py
+++ b/pandas/tests/test_testing.py
@@ -18,7 +18,6 @@ from pandas.compat import is_platform_windows
 
 
 class TestAssertAlmostEqual(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def _assert_almost_equal_both(self, a, b, **kwargs):
         assert_almost_equal(a, b, **kwargs)
@@ -146,7 +145,6 @@ class TestAssertAlmostEqual(tm.TestCase):
 
 
 class TestUtilTesting(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_raise_with_traceback(self):
         with assertRaisesRegexp(LookupError, "error_text"):
@@ -347,7 +345,6 @@ Iterable values are different \\(50\\.0 %\\)
 
 
 class TestAssertIndexEqual(unittest.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_index_equal_message(self):
 
@@ -495,7 +492,6 @@ Attribute "names" are different
 
 
 class TestAssertSeriesEqual(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def _assert_equal(self, x, y, **kwargs):
         assert_series_equal(x, y, **kwargs)
@@ -590,7 +586,6 @@ Series values are different \\(33\\.33333 %\\)
 
 
 class TestAssertFrameEqual(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def _assert_equal(self, x, y, **kwargs):
         assert_frame_equal(x, y, **kwargs)
@@ -701,7 +696,6 @@ class TestIsInstance(tm.TestCase):
 
 
 class TestAssertCategoricalEqual(unittest.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_categorical_equal_message(self):
 
diff --git a/pandas/tests/test_util.py b/pandas/tests/test_util.py
index e2f6a7f6c..1bf9f4da4 100644
--- a/pandas/tests/test_util.py
+++ b/pandas/tests/test_util.py
@@ -314,6 +314,7 @@ class TestValidateKwargsAndArgs(tm.TestCase):
 
 
 class TestMove(tm.TestCase):
+
     def test_cannot_create_instance_of_stolenbuffer(self):
         """Stolen buffers need to be created through the smart constructor
         ``move_into_mutable_buffer`` which has a bunch of checks in it.
diff --git a/pandas/tests/test_window.py b/pandas/tests/test_window.py
index dc2346997..48861fc6a 100644
--- a/pandas/tests/test_window.py
+++ b/pandas/tests/test_window.py
@@ -32,8 +32,6 @@ def assert_equal(left, right):
 
 class Base(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     _nan_locs = np.arange(20, 40)
     _inf_locs = np.array([])
 
diff --git a/pandas/tests/types/test_cast.py b/pandas/tests/types/test_cast.py
index a8579e89a..497130b11 100644
--- a/pandas/tests/types/test_cast.py
+++ b/pandas/tests/types/test_cast.py
@@ -19,8 +19,6 @@ from pandas.types.dtypes import (CategoricalDtype,
                                  DatetimeTZDtype, PeriodDtype)
 from pandas.util import testing as tm
 
-_multiprocess_can_split_ = True
-
 
 class TestPossiblyDowncast(tm.TestCase):
 
diff --git a/pandas/tests/types/test_common.py b/pandas/tests/types/test_common.py
index 7c17c61ae..4667bbd47 100644
--- a/pandas/tests/types/test_common.py
+++ b/pandas/tests/types/test_common.py
@@ -7,8 +7,6 @@ from pandas.types.common import pandas_dtype, is_dtype_equal
 
 import pandas.util.testing as tm
 
-_multiprocess_can_split_ = True
-
 
 class TestPandasDtype(tm.TestCase):
 
diff --git a/pandas/tests/types/test_concat.py b/pandas/tests/types/test_concat.py
index 8acafe0af..f4faab45f 100644
--- a/pandas/tests/types/test_concat.py
+++ b/pandas/tests/types/test_concat.py
@@ -7,8 +7,6 @@ import pandas.util.testing as tm
 
 class TestConcatCompat(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def check_concat(self, to_concat, exp):
         for klass in [pd.Index, pd.Series]:
             to_concat_klass = [klass(c) for c in to_concat]
diff --git a/pandas/tests/types/test_dtypes.py b/pandas/tests/types/test_dtypes.py
index 68105cfd7..8ef2868ae 100644
--- a/pandas/tests/types/test_dtypes.py
+++ b/pandas/tests/types/test_dtypes.py
@@ -15,8 +15,6 @@ from pandas.types.common import (is_categorical_dtype, is_categorical,
                                  _coerce_to_dtype)
 import pandas.util.testing as tm
 
-_multiprocess_can_split_ = True
-
 
 class Base(object):
 
diff --git a/pandas/tests/types/test_generic.py b/pandas/tests/types/test_generic.py
index 2861252be..c7c8b0bec 100644
--- a/pandas/tests/types/test_generic.py
+++ b/pandas/tests/types/test_generic.py
@@ -5,8 +5,6 @@ import pandas as pd
 import pandas.util.testing as tm
 from pandas.types import generic as gt
 
-_multiprocess_can_split_ = True
-
 
 class TestABCClasses(tm.TestCase):
     tuples = [[1, 2, 2], ['red', 'blue', 'red']]
diff --git a/pandas/tests/types/test_inference.py b/pandas/tests/types/test_inference.py
index 15f9545f3..629aa63f4 100644
--- a/pandas/tests/types/test_inference.py
+++ b/pandas/tests/types/test_inference.py
@@ -35,8 +35,6 @@ from pandas.types.common import (is_timedelta64_dtype,
 from pandas.types.missing import isnull
 from pandas.util import testing as tm
 
-_multiprocess_can_split_ = True
-
 
 def test_is_sequence():
     is_seq = inference.is_sequence
@@ -340,7 +338,6 @@ class TestInference(tm.TestCase):
 
 
 class TestTypeInference(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_length_zero(self):
         result = lib.infer_dtype(np.array([], dtype='i4'))
diff --git a/pandas/tests/types/test_missing.py b/pandas/tests/types/test_missing.py
index 2b09cf5ab..cab44f112 100644
--- a/pandas/tests/types/test_missing.py
+++ b/pandas/tests/types/test_missing.py
@@ -14,8 +14,6 @@ from pandas.types.dtypes import DatetimeTZDtype
 from pandas.types.missing import (array_equivalent, isnull, notnull,
                                   na_value_for_dtype)
 
-_multiprocess_can_split_ = True
-
 
 def test_notnull():
     assert notnull(1.)
diff --git a/pandas/tools/tests/test_concat.py b/pandas/tools/tests/test_concat.py
index dae24c48b..87a0dda34 100644
--- a/pandas/tools/tests/test_concat.py
+++ b/pandas/tools/tests/test_concat.py
@@ -17,8 +17,6 @@ from pandas.util.testing import (assert_frame_equal,
 
 class ConcatenateBase(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def setUp(self):
         self.frame = DataFrame(tm.getSeriesData())
         self.mixed_frame = self.frame.copy()
diff --git a/pandas/tools/tests/test_hashing.py b/pandas/tools/tests/test_hashing.py
index fb1f187dd..05a352f25 100644
--- a/pandas/tools/tests/test_hashing.py
+++ b/pandas/tools/tests/test_hashing.py
@@ -8,8 +8,6 @@ import pandas.util.testing as tm
 
 class TestHashing(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def setUp(self):
         self.df = DataFrame(
             {'i32': np.array([1, 2, 3] * 3, dtype='int32'),
diff --git a/pandas/tools/tests/test_join.py b/pandas/tools/tests/test_join.py
index 605a85026..ff0a494bd 100644
--- a/pandas/tools/tests/test_join.py
+++ b/pandas/tools/tests/test_join.py
@@ -20,8 +20,6 @@ a_ = np.array
 
 class TestJoin(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def setUp(self):
         # aggregate multiple columns
         self.df = DataFrame({'key1': get_test_data(),
diff --git a/pandas/tools/tests/test_merge.py b/pandas/tools/tests/test_merge.py
index 88856a012..a348a9014 100644
--- a/pandas/tools/tests/test_merge.py
+++ b/pandas/tools/tests/test_merge.py
@@ -33,8 +33,6 @@ def get_test_data(ngroups=NGROUPS, n=N):
 
 class TestMerge(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def setUp(self):
         # aggregate multiple columns
         self.df = DataFrame({'key1': get_test_data(),
diff --git a/pandas/tools/tests/test_merge_asof.py b/pandas/tools/tests/test_merge_asof.py
index 8e7323f72..76798b3c8 100644
--- a/pandas/tools/tests/test_merge_asof.py
+++ b/pandas/tools/tests/test_merge_asof.py
@@ -11,7 +11,6 @@ from pandas.util.testing import assert_frame_equal
 
 
 class TestAsOfMerge(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def read_data(self, name, dedupe=False):
         path = os.path.join(tm.get_data_path(), name)
@@ -686,7 +685,7 @@ class TestAsOfMerge(tm.TestCase):
         # GH 13709
         df1 = pd.DataFrame({
             'time': pd.to_datetime(['2016-07-15 13:30:00.030',
-                                   '2016-07-15 13:30:00.030']),
+                                    '2016-07-15 13:30:00.030']),
             'username': ['bob', 'charlie']})
         df2 = pd.DataFrame({
             'time': pd.to_datetime(['2016-07-15 13:30:00.000',
diff --git a/pandas/tools/tests/test_pivot.py b/pandas/tools/tests/test_pivot.py
index 398e57d4a..40b46c541 100644
--- a/pandas/tools/tests/test_pivot.py
+++ b/pandas/tools/tests/test_pivot.py
@@ -12,8 +12,6 @@ import pandas.util.testing as tm
 
 class TestPivotTable(tm.TestCase):
 
-    _multiprocess_can_split_ = True
-
     def setUp(self):
         self.data = DataFrame({'A': ['foo', 'foo', 'foo', 'foo',
                                      'bar', 'bar', 'bar', 'bar',
@@ -1152,8 +1150,8 @@ class TestCrosstab(tm.TestCase):
                               pd.crosstab(df.a, df.b, normalize='index'))
 
         row_normal_margins = pd.DataFrame([[1.0, 0],
-                                          [0.25, 0.75],
-                                          [0.4, 0.6]],
+                                           [0.25, 0.75],
+                                           [0.4, 0.6]],
                                           index=pd.Index([1, 2, 'All'],
                                                          name='a',
                                                          dtype='object'),
@@ -1165,8 +1163,8 @@ class TestCrosstab(tm.TestCase):
                                                            name='b'))
 
         all_normal_margins = pd.DataFrame([[0.2, 0, 0.2],
-                                          [0.2, 0.6, 0.8],
-                                          [0.4, 0.6, 1]],
+                                           [0.2, 0.6, 0.8],
+                                           [0.4, 0.6, 1]],
                                           index=pd.Index([1, 2, 'All'],
                                                          name='a',
                                                          dtype='object'),
diff --git a/pandas/tools/tests/test_tile.py b/pandas/tools/tests/test_tile.py
index c5261597c..de44eadc1 100644
--- a/pandas/tools/tests/test_tile.py
+++ b/pandas/tools/tests/test_tile.py
@@ -303,7 +303,7 @@ class TestCut(tm.TestCase):
         data = to_datetime(Series(['2013-01-01', '2013-01-02', '2013-01-03']))
         result, bins = cut(data, 3, retbins=True)
         expected = Series(['(2012-12-31 23:57:07.200000, 2013-01-01 16:00:00]',
-                          '(2013-01-01 16:00:00, 2013-01-02 08:00:00]',
+                           '(2013-01-01 16:00:00, 2013-01-02 08:00:00]',
                            '(2013-01-02 08:00:00, 2013-01-03 00:00:00]'],
                           ).astype("category", ordered=True)
         tm.assert_series_equal(result, expected)
@@ -316,8 +316,8 @@ class TestCut(tm.TestCase):
 
         # testing for time data to be present as ndarray
         data = np.array([np.datetime64('2013-01-01'),
-                        np.datetime64('2013-01-02'),
-                        np.datetime64('2013-01-03')])
+                         np.datetime64('2013-01-02'),
+                         np.datetime64('2013-01-03')])
         result, bins = cut(data, 3, retbins=True)
         tm.assert_series_equal(Series(result), expected)
 
@@ -330,7 +330,7 @@ class TestCut(tm.TestCase):
         data = [np.datetime64('2012-12-13'), np.datetime64('2012-12-15')]
         bin_data = ['2012-12-12', '2012-12-14', '2012-12-16']
         expected = Series(['(2012-12-12 00:00:00, 2012-12-14 00:00:00]',
-                          '(2012-12-14 00:00:00, 2012-12-16 00:00:00]'],
+                           '(2012-12-14 00:00:00, 2012-12-16 00:00:00]'],
                           ).astype("category", ordered=True)
 
         for conv in [Timestamp, Timestamp, np.datetime64]:
diff --git a/pandas/tseries/period.py b/pandas/tseries/period.py
index 8c75195b2..98151d5b6 100644
--- a/pandas/tseries/period.py
+++ b/pandas/tseries/period.py
@@ -393,7 +393,7 @@ class PeriodIndex(DatelikeOps, DatetimeIndexOpsMixin, Int64Index):
                 left = context[1][0]
                 right = context[1][1]
                 if (isinstance(left, PeriodIndex) and
-                   isinstance(right, PeriodIndex)):
+                        isinstance(right, PeriodIndex)):
                     name = left.name if left.name == right.name else None
                     return Index(result, name=name)
                 elif isinstance(left, Period) or isinstance(right, Period):
diff --git a/pandas/tseries/tests/test_base.py b/pandas/tseries/tests/test_base.py
index 2ff06517f..be3b917cb 100644
--- a/pandas/tseries/tests/test_base.py
+++ b/pandas/tseries/tests/test_base.py
@@ -15,6 +15,7 @@ from pandas.tests.test_base import Ops
 
 
 class TestTimedeltaIndexOps(Ops):
+
     def setUp(self):
         super(TestTimedeltaIndexOps, self).setUp()
         mask = lambda x: isinstance(x, TimedeltaIndex)
@@ -490,7 +491,7 @@ Freq: D"""
 
     def test_comp_nat(self):
         left = pd.TimedeltaIndex([pd.Timedelta('1 days'), pd.NaT,
-                                 pd.Timedelta('3 days')])
+                                  pd.Timedelta('3 days')])
         right = pd.TimedeltaIndex([pd.NaT, pd.NaT, pd.Timedelta('3 days')])
 
         for l, r in [(left, right), (left.asobject, right.asobject)]:
@@ -854,6 +855,7 @@ Freq: D"""
 
 
 class TestPeriodIndexOps(Ops):
+
     def setUp(self):
         super(TestPeriodIndexOps, self).setUp()
         mask = lambda x: (isinstance(x, DatetimeIndex) or
diff --git a/pandas/tseries/tests/test_bin_groupby.py b/pandas/tseries/tests/test_bin_groupby.py
index 08c0833be..51a10f414 100644
--- a/pandas/tseries/tests/test_bin_groupby.py
+++ b/pandas/tseries/tests/test_bin_groupby.py
@@ -46,7 +46,6 @@ def test_series_bin_grouper():
 
 
 class TestBinGroupers(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def setUp(self):
         self.obj = np.random.randn(10, 1)
@@ -122,6 +121,7 @@ class TestMoments(tm.TestCase):
 
 
 class TestReducer(tm.TestCase):
+
     def test_int_index(self):
         from pandas.core.series import Series
 
diff --git a/pandas/tseries/tests/test_converter.py b/pandas/tseries/tests/test_converter.py
index 8caed80f5..b934aaed7 100644
--- a/pandas/tseries/tests/test_converter.py
+++ b/pandas/tseries/tests/test_converter.py
@@ -19,6 +19,7 @@ def test_timtetonum_accepts_unicode():
 
 
 class TestDateTimeConverter(tm.TestCase):
+
     def setUp(self):
         self.dtc = converter.DatetimeConverter()
         self.tc = converter.TimeFormatter(None)
@@ -142,6 +143,7 @@ class TestDateTimeConverter(tm.TestCase):
 
 
 class TestPeriodConverter(tm.TestCase):
+
     def setUp(self):
         self.pc = converter.PeriodConverter()
 
diff --git a/pandas/tseries/tests/test_daterange.py b/pandas/tseries/tests/test_daterange.py
index 209e6e40d..a64882380 100644
--- a/pandas/tseries/tests/test_daterange.py
+++ b/pandas/tseries/tests/test_daterange.py
@@ -73,6 +73,7 @@ class TestGenRangeGeneration(tm.TestCase):
 
 
 class TestDateRange(tm.TestCase):
+
     def setUp(self):
         self.rng = bdate_range(START, END)
 
@@ -588,6 +589,7 @@ class TestDateRange(tm.TestCase):
 
 
 class TestCustomDateRange(tm.TestCase):
+
     def setUp(self):
         self.rng = cdate_range(START, END)
 
diff --git a/pandas/tseries/tests/test_frequencies.py b/pandas/tseries/tests/test_frequencies.py
index dfb7b2637..9983bf527 100644
--- a/pandas/tseries/tests/test_frequencies.py
+++ b/pandas/tseries/tests/test_frequencies.py
@@ -477,6 +477,7 @@ _dti = DatetimeIndex
 
 
 class TestFrequencyInference(tm.TestCase):
+
     def test_raise_if_period_index(self):
         index = PeriodIndex(start="1/1/1990", periods=20, freq="M")
         self.assertRaises(TypeError, frequencies.infer_freq, index)
diff --git a/pandas/tseries/tests/test_holiday.py b/pandas/tseries/tests/test_holiday.py
index d4d273347..2adf28a50 100644
--- a/pandas/tseries/tests/test_holiday.py
+++ b/pandas/tseries/tests/test_holiday.py
@@ -18,6 +18,7 @@ from pytz import utc
 
 
 class TestCalendar(tm.TestCase):
+
     def setUp(self):
         self.holiday_list = [
             datetime(2012, 1, 2),
@@ -54,6 +55,7 @@ class TestCalendar(tm.TestCase):
         # Test for issue #9552
 
         class TestCalendar(AbstractHolidayCalendar):
+
             def __init__(self, name=None, rules=None):
                 super(TestCalendar, self).__init__(name=name, rules=rules)
 
@@ -83,6 +85,7 @@ class TestCalendar(tm.TestCase):
 
 
 class TestHoliday(tm.TestCase):
+
     def setUp(self):
         self.start_date = datetime(2011, 1, 1)
         self.end_date = datetime(2020, 12, 31)
@@ -288,6 +291,7 @@ class TestHoliday(tm.TestCase):
 
 
 class TestObservanceRules(tm.TestCase):
+
     def setUp(self):
         self.we = datetime(2014, 4, 9)
         self.th = datetime(2014, 4, 10)
diff --git a/pandas/tseries/tests/test_offsets.py b/pandas/tseries/tests/test_offsets.py
index ac488a3df..7c5a4c3df 100644
--- a/pandas/tseries/tests/test_offsets.py
+++ b/pandas/tseries/tests/test_offsets.py
@@ -38,8 +38,6 @@ from pandas.util.testing import assertRaisesRegexp
 import pandas.util.testing as tm
 from pandas.tseries.holiday import USFederalHolidayCalendar
 
-_multiprocess_can_split_ = True
-
 
 def test_monthrange():
     import calendar
@@ -507,7 +505,6 @@ class TestCommon(Base):
 
 
 class TestDateOffset(Base):
-    _multiprocess_can_split_ = True
 
     def setUp(self):
         self.d = Timestamp(datetime(2008, 1, 2))
@@ -547,7 +544,6 @@ class TestDateOffset(Base):
 
 
 class TestBusinessDay(Base):
-    _multiprocess_can_split_ = True
     _offset = BDay
 
     def setUp(self):
@@ -725,7 +721,6 @@ class TestBusinessDay(Base):
 
 
 class TestBusinessHour(Base):
-    _multiprocess_can_split_ = True
     _offset = BusinessHour
 
     def setUp(self):
@@ -1432,7 +1427,6 @@ class TestBusinessHour(Base):
 
 
 class TestCustomBusinessHour(Base):
-    _multiprocess_can_split_ = True
     _offset = CustomBusinessHour
 
     def setUp(self):
@@ -1693,7 +1687,6 @@ class TestCustomBusinessHour(Base):
 
 
 class TestCustomBusinessDay(Base):
-    _multiprocess_can_split_ = True
     _offset = CDay
 
     def setUp(self):
@@ -1931,7 +1924,6 @@ class TestCustomBusinessDay(Base):
 
 
 class CustomBusinessMonthBase(object):
-    _multiprocess_can_split_ = True
 
     def setUp(self):
         self.d = datetime(2008, 1, 1)
@@ -3257,6 +3249,7 @@ def makeFY5253LastOfMonth(*args, **kwds):
 
 
 class TestFY5253LastOfMonth(Base):
+
     def test_onOffset(self):
 
         offset_lom_sat_aug = makeFY5253LastOfMonth(1, startingMonth=8,
@@ -3342,6 +3335,7 @@ class TestFY5253LastOfMonth(Base):
 
 
 class TestFY5253NearestEndMonth(Base):
+
     def test_get_target_month_end(self):
         self.assertEqual(makeFY5253NearestEndMonth(startingMonth=8,
                                                    weekday=WeekDay.SAT)
@@ -3507,6 +3501,7 @@ class TestFY5253NearestEndMonth(Base):
 
 
 class TestFY5253LastOfMonthQuarter(Base):
+
     def test_isAnchored(self):
         self.assertTrue(
             makeFY5253LastOfMonthQuarter(startingMonth=1, weekday=WeekDay.SAT,
@@ -3729,6 +3724,7 @@ class TestFY5253LastOfMonthQuarter(Base):
 
 
 class TestFY5253NearestEndMonthQuarter(Base):
+
     def test_onOffset(self):
 
         offset_nem_sat_aug_4 = makeFY5253NearestEndMonthQuarter(
@@ -3814,6 +3810,7 @@ class TestFY5253NearestEndMonthQuarter(Base):
 
 
 class TestQuarterBegin(Base):
+
     def test_repr(self):
         self.assertEqual(repr(QuarterBegin()),
                          "<QuarterBegin: startingMonth=3>")
@@ -4168,6 +4165,7 @@ class TestYearBegin(Base):
 
 
 class TestBYearEndLagged(Base):
+
     def test_bad_month_fail(self):
         self.assertRaises(Exception, BYearEnd, month=13)
         self.assertRaises(Exception, BYearEnd, month=0)
@@ -4307,6 +4305,7 @@ class TestYearEnd(Base):
 
 
 class TestYearEndDiffMonth(Base):
+
     def test_offset(self):
         tests = []
 
@@ -4542,6 +4541,7 @@ class TestTicks(tm.TestCase):
 
 
 class TestOffsetNames(tm.TestCase):
+
     def test_get_offset_name(self):
         self.assertEqual(BDay().freqstr, 'B')
         self.assertEqual(BDay(2).freqstr, '2B')
@@ -4600,6 +4600,7 @@ def test_get_offset_legacy():
 
 
 class TestParseTimeString(tm.TestCase):
+
     def test_parse_time_string(self):
         (date, parsed, reso) = parse_time_string('4Q1984')
         (date_lower, parsed_lower, reso_lower) = parse_time_string('4q1984')
@@ -4662,6 +4663,7 @@ def test_quarterly_dont_normalize():
 
 
 class TestOffsetAliases(tm.TestCase):
+
     def setUp(self):
         _offset_map.clear()
 
@@ -4797,6 +4799,7 @@ class TestCaching(tm.TestCase):
 
 
 class TestReprNames(tm.TestCase):
+
     def test_str_for_named_is_name(self):
         # look at all the amazing combinations!
         month_prefixes = ['A', 'AS', 'BA', 'BAS', 'Q', 'BQ', 'BQS', 'QS']
diff --git a/pandas/tseries/tests/test_period.py b/pandas/tseries/tests/test_period.py
index fdc067a82..a39830b6a 100644
--- a/pandas/tseries/tests/test_period.py
+++ b/pandas/tseries/tests/test_period.py
@@ -1652,6 +1652,7 @@ class TestFreqConversion(tm.TestCase):
 
 
 class TestPeriodIndex(tm.TestCase):
+
     def setUp(self):
         pass
 
@@ -4456,6 +4457,7 @@ class TestPeriodRepresentation(tm.TestCase):
 
 
 class TestComparisons(tm.TestCase):
+
     def setUp(self):
         self.january1 = Period('2000-01', 'M')
         self.january2 = Period('2000-01', 'M')
@@ -4961,6 +4963,7 @@ class TestSeriesPeriod(tm.TestCase):
 
 
 class TestPeriodField(tm.TestCase):
+
     def test_get_period_field_raises_on_out_of_range(self):
         self.assertRaises(ValueError, _period.get_period_field, -1, 0, 0)
 
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index 222ffb735..afb44887f 100755
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -49,7 +49,6 @@ def _simple_pts(start, end, freq='D'):
 
 
 class TestResampleAPI(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def setUp(self):
         dti = DatetimeIndex(start=datetime(2005, 1, 1),
@@ -754,8 +753,8 @@ class Base(object):
                 self.assertEqual(result.index.freq, expected.index.freq)
 
                 if (method == 'size' and
-                   isinstance(result.index, PeriodIndex) and
-                   freq in ['M', 'D']):
+                    isinstance(result.index, PeriodIndex) and
+                        freq in ['M', 'D']):
                     # GH12871 - TODO: name should propagate, but currently
                     # doesn't on lower / same frequency with PeriodIndex
                     assert_series_equal(result, expected, check_dtype=False,
@@ -839,7 +838,6 @@ class Base(object):
 
 
 class TestDatetimeIndex(Base, tm.TestCase):
-    _multiprocess_can_split_ = True
     _index_factory = lambda x: date_range
 
     def setUp(self):
@@ -990,6 +988,7 @@ class TestDatetimeIndex(Base, tm.TestCase):
             return str(type(x))
 
         class fn_class:
+
             def __call__(self, x):
                 return str(type(x))
 
@@ -2135,7 +2134,6 @@ class TestDatetimeIndex(Base, tm.TestCase):
 
 
 class TestPeriodIndex(Base, tm.TestCase):
-    _multiprocess_can_split_ = True
     _index_factory = lambda x: period_range
 
     def create_series(self):
@@ -2744,7 +2742,6 @@ class TestPeriodIndex(Base, tm.TestCase):
 
 
 class TestTimedeltaIndex(Base, tm.TestCase):
-    _multiprocess_can_split_ = True
     _index_factory = lambda x: timedelta_range
 
     def create_series(self):
@@ -2766,6 +2763,7 @@ class TestTimedeltaIndex(Base, tm.TestCase):
 
 
 class TestResamplerGrouper(tm.TestCase):
+
     def setUp(self):
         self.frame = DataFrame({'A': [1] * 20 + [2] * 12 + [3] * 8,
                                 'B': np.arange(40)},
@@ -2960,6 +2958,7 @@ class TestResamplerGrouper(tm.TestCase):
 
 
 class TestTimeGrouper(tm.TestCase):
+
     def setUp(self):
         self.ts = Series(np.random.randn(1000),
                          index=date_range('1/1/2000', periods=1000))
diff --git a/pandas/tseries/tests/test_timedeltas.py b/pandas/tseries/tests/test_timedeltas.py
index 13263259e..170d5cdaf 100644
--- a/pandas/tseries/tests/test_timedeltas.py
+++ b/pandas/tseries/tests/test_timedeltas.py
@@ -24,7 +24,6 @@ iNaT = tslib.iNaT
 
 
 class TestTimedeltas(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def setUp(self):
         pass
@@ -1231,7 +1230,6 @@ class TestTimedeltas(tm.TestCase):
 
 
 class TestTimedeltaIndex(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def test_pass_TimedeltaIndex_to_index(self):
 
@@ -1907,6 +1905,7 @@ class TestTimedeltaIndex(tm.TestCase):
 
 
 class TestSlicing(tm.TestCase):
+
     def test_partial_slice(self):
         rng = timedelta_range('1 day 10:11:12', freq='h', periods=500)
         s = Series(np.arange(len(rng)), index=rng)
diff --git a/pandas/tseries/tests/test_timeseries_legacy.py b/pandas/tseries/tests/test_timeseries_legacy.py
index 5395056c9..17cc93ac4 100644
--- a/pandas/tseries/tests/test_timeseries_legacy.py
+++ b/pandas/tseries/tests/test_timeseries_legacy.py
@@ -27,8 +27,6 @@ randn = np.random.randn
 # class TestLegacySupport(unittest.TestCase):
 class LegacySupport(object):
 
-    _multiprocess_can_split_ = True
-
     @classmethod
     def setUpClass(cls):
         if compat.PY3:
diff --git a/pandas/tseries/tests/test_timezones.py b/pandas/tseries/tests/test_timezones.py
index 00b60ba62..38cd8079f 100644
--- a/pandas/tseries/tests/test_timezones.py
+++ b/pandas/tseries/tests/test_timezones.py
@@ -52,7 +52,6 @@ fixed_off_no_name = FixedOffset(-330, None)
 
 
 class TestTimeZoneSupportPytz(tm.TestCase):
-    _multiprocess_can_split_ = True
 
     def setUp(self):
         tm._skip_if_no_pytz()
@@ -899,7 +898,6 @@ class TestTimeZoneSupportPytz(tm.TestCase):
 
 
 class TestTimeZoneSupportDateutil(TestTimeZoneSupportPytz):
-    _multiprocess_can_split_ = True
 
     def setUp(self):
         tm._skip_if_no_dateutil()
@@ -1142,6 +1140,7 @@ class TestTimeZoneSupportDateutil(TestTimeZoneSupportPytz):
 
 
 class TestTimeZoneCacheKey(tm.TestCase):
+
     def test_cache_keys_are_distinct_for_pytz_vs_dateutil(self):
         tzs = pytz.common_timezones
         for tz_name in tzs:
@@ -1158,7 +1157,6 @@ class TestTimeZoneCacheKey(tm.TestCase):
 
 
 class TestTimeZones(tm.TestCase):
-    _multiprocess_can_split_ = True
     timezones = ['UTC', 'Asia/Tokyo', 'US/Eastern', 'dateutil/US/Pacific']
 
     def setUp(self):
diff --git a/pandas/tseries/tests/test_tslib.py b/pandas/tseries/tests/test_tslib.py
index 20e91a6f5..a141d445e 100644
--- a/pandas/tseries/tests/test_tslib.py
+++ b/pandas/tseries/tests/test_tslib.py
@@ -49,6 +49,7 @@ class TestTsUtil(tm.TestCase):
 
 
 class TestDatetimeParsingWrappers(tm.TestCase):
+
     def test_does_not_convert_mixed_integer(self):
         bad_date_strings = ('-50000', '999', '123.1234', 'm', 'T')
 
@@ -408,6 +409,7 @@ class TestDatetimeParsingWrappers(tm.TestCase):
 
 
 class TestArrayToDatetime(tm.TestCase):
+
     def test_parsing_valid_dates(self):
         arr = np.array(['01-01-2013', '01-02-2013'], dtype=object)
         self.assert_numpy_array_equal(
@@ -523,6 +525,7 @@ class TestArrayToDatetime(tm.TestCase):
 
 
 class TestTslib(tm.TestCase):
+
     def test_intraday_conversion_factors(self):
         self.assertEqual(period_asfreq(
             1, get_freq('D'), get_freq('H'), False), 24)
diff --git a/pandas/types/generic.py b/pandas/types/generic.py
index 86d266f45..756fb4759 100644
--- a/pandas/types/generic.py
+++ b/pandas/types/generic.py
@@ -53,6 +53,7 @@ ABCPeriod = create_pandas_abc_type("ABCPeriod", "_typ", ("period", ))
 
 
 class _ABCGeneric(type):
+
     def __instancecheck__(cls, inst):
         return hasattr(inst, "_data")
 
diff --git a/pandas/util/clipboard/__init__.py b/pandas/util/clipboard/__init__.py
index 358c9b5f8..9e2b2faf8 100644
--- a/pandas/util/clipboard/__init__.py
+++ b/pandas/util/clipboard/__init__.py
@@ -107,4 +107,4 @@ __all__ = ["copy", "paste"]
 
 # pandas aliases
 clipboard_get = paste
-clipboard_set = copy
\ No newline at end of file
+clipboard_set = copy
diff --git a/pandas/util/clipboard/clipboards.py b/pandas/util/clipboard/clipboards.py
index 182a685f9..f73f4f191 100644
--- a/pandas/util/clipboard/clipboards.py
+++ b/pandas/util/clipboard/clipboards.py
@@ -123,6 +123,7 @@ def init_klipper_clipboard():
 
 def init_no_clipboard():
     class ClipboardUnavailable(object):
+
         def __call__(self, *args, **kwargs):
             raise PyperclipException(EXCEPT_MSG)
 
diff --git a/pandas/util/clipboard/exceptions.py b/pandas/util/clipboard/exceptions.py
index 615335f3a..f42d263a0 100644
--- a/pandas/util/clipboard/exceptions.py
+++ b/pandas/util/clipboard/exceptions.py
@@ -7,6 +7,7 @@ class PyperclipException(RuntimeError):
 
 
 class PyperclipWindowsException(PyperclipException):
+
     def __init__(self, message):
         message += " (%s)" % ctypes.WinError()
         super(PyperclipWindowsException, self).__init__(message)
diff --git a/pandas/util/clipboard/windows.py b/pandas/util/clipboard/windows.py
index 956d5b9d3..5c9be9dda 100644
--- a/pandas/util/clipboard/windows.py
+++ b/pandas/util/clipboard/windows.py
@@ -10,6 +10,7 @@ from .exceptions import PyperclipWindowsException
 
 
 class CheckedCall(object):
+
     def __init__(self, f):
         super(CheckedCall, self).__setattr__("f", f)
 
@@ -133,7 +134,8 @@ def init_windows_clipboard():
                                              count * sizeof(c_wchar))
                     locked_handle = safeGlobalLock(handle)
 
-                    ctypes.memmove(c_wchar_p(locked_handle), c_wchar_p(text), count * sizeof(c_wchar))
+                    ctypes.memmove(c_wchar_p(locked_handle),
+                                   c_wchar_p(text), count * sizeof(c_wchar))
 
                     safeGlobalUnlock(handle)
                     safeSetClipboardData(CF_UNICODETEXT, handle)
diff --git a/pandas/util/decorators.py b/pandas/util/decorators.py
index e1888a3ff..85d77c2f6 100644
--- a/pandas/util/decorators.py
+++ b/pandas/util/decorators.py
@@ -125,6 +125,7 @@ class Substitution(object):
     def some_function(x):
         "%s %s wrote the Raven"
     """
+
     def __init__(self, *args, **kwargs):
         if (args and kwargs):
             raise AssertionError("Only positional or keyword args are allowed")
@@ -171,6 +172,7 @@ class Appender(object):
         "This docstring will have a copyright below"
         pass
     """
+
     def __init__(self, addendum, join='', indents=0):
         if indents > 0:
             self.addendum = indent(addendum, indents=indents)
diff --git a/pandas/util/depr_module.py b/pandas/util/depr_module.py
index 736d2cdaa..cf8b0f796 100644
--- a/pandas/util/depr_module.py
+++ b/pandas/util/depr_module.py
@@ -16,6 +16,7 @@ class _DeprecatedModule(object):
     removals : objects or methods in module that will no longer be
                accessible once module is removed.
     """
+
     def __init__(self, deprmod, removals=None):
         self.deprmod = deprmod
         self.removals = removals
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 6ea915436..6b2e920a2 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -165,7 +165,7 @@ def assert_almost_equal(left, right, check_exact=False,
                 pass
             else:
                 if (isinstance(left, np.ndarray) or
-                   isinstance(right, np.ndarray)):
+                        isinstance(right, np.ndarray)):
                     obj = 'numpy array'
                 else:
                     obj = 'Input'
@@ -1103,7 +1103,6 @@ def assert_series_equal(left, right, check_dtype=True,
                         check_datetimelike_compat=False,
                         check_categorical=True,
                         obj='Series'):
-
     """Check that left and right Series are equal.
 
     Parameters
@@ -1211,7 +1210,6 @@ def assert_frame_equal(left, right, check_dtype=True,
                        check_categorical=True,
                        check_like=False,
                        obj='DataFrame'):
-
     """Check that left and right DataFrame are equal.
 
     Parameters
@@ -2446,6 +2444,7 @@ class _AssertRaisesContextmanager(object):
     Handles the behind the scenes work
     for assertRaises and assertRaisesRegexp
     """
+
     def __init__(self, exception, regexp=None, *args, **kwargs):
         self.exception = exception
         if regexp is not None and not hasattr(regexp, "search"):
