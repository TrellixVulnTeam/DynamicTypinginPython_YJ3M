commit 8cfdeb2554af0e11bb05f3f81f58d203377e1913
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Jun 26 23:05:59 2011 -0400

    fancy indexing test coverage

diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 03e0d6168..aed38bd87 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -109,7 +109,7 @@ class _DataFrameIndexer(object):
             raise Exception('setting on mixed-type frames not yet supported')
 
         if isinstance(key, tuple):
-            if len(key) != 2: # pragma: no cover
+            if len(key) != 2:
                 raise Exception('only length 2 tuple supported')
 
             x, y = key
@@ -230,8 +230,6 @@ class _DataFrameIndexer(object):
             return self.frame.reindex(**{axis_name : key})
 
     def _get_slice_axis(self, slice_obj, axis=0):
-        _check_step(slice_obj)
-
         frame = self.frame
 
         axis_name = frame._get_axis_name(axis)
@@ -274,7 +272,7 @@ def _is_integer_dtype(arr):
 
 def _is_integer_index(index):
     # make an educated and not too intelligent guess
-    if len(index) == 0:
+    if len(index) == 0: # pragma: no cover
         return False
     else:
         return _is_int_like(index[0])
@@ -300,8 +298,9 @@ def _is_label_slice(labels, obj):
 def _need_slice(obj):
     return obj.start is not None or obj.stop is not None
 
-def _check_step(obj):
-    if obj.step is not None and obj.step != 1:
-        raise Exception('steps other than 1 are not supported')
+# I don't think this is necessary
+# def _check_step(obj):
+#     if obj.step is not None and obj.step != 1:
+#         raise Exception('steps other than 1 are not supported')
 
 _isboolarr = lambda x: np.asarray(x).dtype == np.bool_
diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index 093078f52..e5aafccad 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -294,21 +294,6 @@ class CheckIndexing(object):
         frame.ix[:, 'B':'C'] = 4.
         assert_frame_equal(frame, expected)
 
-        # case 8: set with booleans
-        frame = self.frame.copy()
-        expected = self.frame.copy()
-
-        mask = frame['A'] > 0
-        frame.ix[mask] = 0.
-        expected.values[mask] = 0.
-        assert_frame_equal(frame, expected)
-
-        frame = self.frame.copy()
-        expected = self.frame.copy()
-        frame.ix[mask, ['A', 'B']] = 0.
-        expected.values[mask, :2] = 0.
-        assert_frame_equal(frame, expected)
-
     def test_fancy_index_corner(self):
         from pandas.core.indexing import AmbiguousIndexError
 
@@ -322,6 +307,8 @@ class CheckIndexing(object):
                           df.ix.__setitem__, [0, 1, 2], 5)
         self.assertRaises(AmbiguousIndexError,
                           df.ix.__setitem__, 0, 5)
+        self.assertRaises(AmbiguousIndexError,
+                          df.ix.__setitem__, (slice(None, None), 0), 5)
 
         self.assertRaises(AmbiguousIndexError,
                           df.ix.__getitem__, ([0, 1, 2], [4, 5, 6]))
@@ -329,6 +316,8 @@ class CheckIndexing(object):
                           df.ix.__getitem__, [0, 1, 2])
         self.assertRaises(AmbiguousIndexError,
                           df.ix.__getitem__, 0)
+        self.assertRaises(AmbiguousIndexError,
+                          df.ix.__getitem__, (slice(None, None), 0))
 
         # try to set indices not contained in frame
         self.assertRaises(KeyError,
@@ -484,20 +473,40 @@ class CheckIndexing(object):
         assert_frame_equal(result, expected)
 
     def test_setitem_fancy_boolean(self):
-        pass
+        # from 2d, set with booleans
+        frame = self.frame.copy()
+        expected = self.frame.copy()
+
+        mask = frame['A'] > 0
+        frame.ix[mask] = 0.
+        expected.values[mask] = 0.
+        assert_frame_equal(frame, expected)
 
-    def test_getitem_fancy_exceptions(self):
+        frame = self.frame.copy()
+        expected = self.frame.copy()
+        frame.ix[mask, ['A', 'B']] = 0.
+        expected.values[mask, :2] = 0.
+        assert_frame_equal(frame, expected)
+
+    def test_getitem_setitem_fancy_exceptions(self):
         ix = self.frame.ix
         self.assertRaises(Exception, ix.__getitem__,
                           (slice(None, None, None),
                            slice(None, None, None),
                            slice(None, None, None)))
+        self.assertRaises(Exception, ix.__setitem__,
+                          (slice(None, None, None),
+                           slice(None, None, None),
+                           slice(None, None, None)), 1)
 
-        self.assertRaises(Exception, ix.__getitem__, slice(None, None, 2))
+        # Anything wrong with this?
+        # self.assertRaises(Exception, ix.__getitem__, slice(None, None, 2))
+        # self.assertRaises(Exception, ix.__setitem__, slice(None, None, 2), 1.)
 
         # boolean index misaligned labels
         mask = self.frame['A'][::-1] > 1
         self.assertRaises(Exception, ix.__getitem__, mask)
+        self.assertRaises(Exception, ix.__setitem__, mask, 1.)
 
     def test_setitem_fancy_exceptions(self):
         pass
