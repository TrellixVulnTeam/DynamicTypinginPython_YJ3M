commit 7567fffa8d646434f56d59b6dd41287675110c09
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri May 25 17:42:23 2012 -0400

    TST: add unit tests to verify close #1316

diff --git a/RELEASE.rst b/RELEASE.rst
index afd6250a1..e10c51ab1 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -55,6 +55,7 @@ pandas 0.8.0
     DataFrame (#929, #1241)
   - Add 'kde' plot kind for Series/DataFrame.plot (#1059)
   - More flexible multiple function aggregation with GroupBy
+  - Add pct_chagne function
 
 **Improvements to existing features**
 
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index ed818bb0d..fb138b5a2 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -679,6 +679,20 @@ class TestInt64Index(unittest.TestCase):
         right2 = other.join(self.index, how='right')
         self.assert_(right2.equals(self.index))
 
+    def test_join_non_unique(self):
+        left = Index([4, 4, 3, 3])
+
+        joined, lidx, ridx = left.join(left, return_indexers=True)
+
+        exp_joined = Index([3, 3, 3, 3, 4, 4, 4, 4])
+        self.assert_(joined.equals(exp_joined))
+
+        exp_lidx = np.array([2, 2, 3, 3, 0, 0, 1, 1], dtype=np.int64)
+        self.assert_(np.array_equal(lidx, exp_lidx))
+
+        exp_ridx = np.array([2, 3, 2, 3, 0, 1, 0, 1], dtype=np.int64)
+        self.assert_(np.array_equal(ridx, exp_ridx))
+
     def test_intersection(self):
         other = Index([1, 2, 3, 4, 5])
         result = self.index.intersection(other)
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 81b6a206f..d515a0baa 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -2673,9 +2673,9 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         filled = self.ts.fillna(method='bfill', limit=1)
         assert_series_equal(rs, filled / filled.shift(1) - 1)
 
-        # rs = self.ts.pct_change(freq='M')
-        # filled = self.ts.fillna(method='pad')
-        # assert_series_equal(rs, filled / filled.shift(freq='M') - 1)
+        rs = self.ts.pct_change(freq='5D')
+        filled = self.ts.fillna(method='pad')
+        assert_series_equal(rs, filled / filled.shift(freq='5D') - 1)
 
     def test_pct_change_shift_over_nas(self):
         s = Series([1., 1.5, np.nan, 2.5, 3.])
