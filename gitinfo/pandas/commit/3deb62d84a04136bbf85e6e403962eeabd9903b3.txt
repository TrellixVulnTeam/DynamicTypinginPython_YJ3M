commit 3deb62d84a04136bbf85e6e403962eeabd9903b3
Author: jreback <jeff@reback.net>
Date:   Wed Dec 12 11:18:51 2012 -0500

    ENH: added meta data attribute saving

diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index fba11e4f2..35b907d48 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -503,6 +503,7 @@ class HDFStore(object):
         wrapper(value)
         group._v_attrs.pandas_type = kind
         group._v_attrs.pandas_version = _version
+        group._v_attrs.meta = getattr(value,'meta',None)
 
     def _write_series(self, group, series):
         self._write_index(group, 'index', series.index)
@@ -842,7 +843,12 @@ class HDFStore(object):
         kind = group._v_attrs.pandas_type
         kind = _LEGACY_MAP.get(kind, kind)
         handler = self._get_handler(op='read', kind=kind)
-        return handler(group, where)
+        v = handler(group, where)
+        if v is not None:
+            meta = getattr(group._v_attrs,'meta',None)
+            if meta is not None:
+                v.meta = meta
+        return v
 
     def _read_series(self, group, where=None):
         index = self._read_index(group, 'index')
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index 1fa454f0a..4c2567016 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -97,6 +97,30 @@ class TestHDFStore(unittest.TestCase):
         self.assert_(self.store.root.b._v_attrs.pandas_version == '0.10')
         self.assert_(self.store.root.df1._v_attrs.pandas_version == '0.10')
 
+    def test_meta(self):
+        meta = { 'foo' : [ 'I love pandas ' ] }
+        s = tm.makeTimeSeries()
+        s.meta = meta
+        self.store['a'] = s
+        self.assert_(self.store['a'].meta == meta)
+
+        df = tm.makeDataFrame()
+        df.meta = meta
+        self.store['b'] = df
+        self.assert_(self.store['b'].meta == meta)
+
+        # this should work, but because slicing doesn't propgate meta it doesn
+        self.store.remove('df1')
+        self.store.append('df1', df[:10])
+        self.store.append('df1', df[10:])
+        results = self.store['df1']
+        #self.assert_(getattr(results,'meta',None) == meta)
+
+        # no meta
+        df = tm.makeDataFrame()
+        self.store['b'] = df
+        self.assert_(hasattr(self.store['b'],'meta') == False)
+
     def test_reopen_handle(self):
         self.store['a'] = tm.makeTimeSeries()
         self.store.open('w', warn=False)
