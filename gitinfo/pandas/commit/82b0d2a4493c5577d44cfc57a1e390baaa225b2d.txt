commit 82b0d2a4493c5577d44cfc57a1e390baaa225b2d
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Sep 12 22:12:19 2012 -0400

    BUG: override min/max in DatetimeIndex to function as expected close #1895

diff --git a/RELEASE.rst b/RELEASE.rst
index 1669b244b..e8beb099b 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -158,6 +158,8 @@ pandas 0.9.0
     array. Check other malformed inputs (#1899, #1897)
   - Rolling variance / standard deviation with only a single observation in
     window (#1884)
+  - Fix unicode sheet name failure in to_excel (#1828)
+  - Override DatetimeIndex.min/max to return Timestamp objects (#1895)
 
 pandas 0.8.1
 ============
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index f0b936bcc..679a27365 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -1370,6 +1370,27 @@ class DatetimeIndex(Int64Index):
 
         return mask.nonzero()[0]
 
+    def min(self, axis=None):
+        """
+        Overridden ndarray.min to return a Timestamp
+        """
+        if self.is_monotonic:
+            return self[0]
+        else:
+            min_stamp = self.asi8.min()
+            return Timestamp(min_stamp, tz=self.tz)
+
+    def max(self, axis=None):
+        """
+        Overridden ndarray.max to return a Timestamp
+        """
+        if self.is_monotonic:
+            return self[-1]
+        else:
+            max_stamp = self.asi8.max()
+            return Timestamp(max_stamp, tz=self.tz)
+
+
 def _generate_regular_range(start, end, periods, offset):
     if isinstance(offset, Tick):
         stride = offset.nanos
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 6d0a58693..d67122a7e 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -1678,6 +1678,20 @@ class TestLegacySupport(unittest.TestCase):
         result = rng[:50].intersection(nofreq)
         self.assert_(result.freq == rng.freq)
 
+    def test_min_max(self):
+        rng = date_range('1/1/2000', '12/31/2000')
+        rng2 = rng.take(np.random.permutation(len(rng)))
+
+        the_min = rng2.min()
+        the_max = rng2.max()
+        self.assert_(isinstance(the_min, Timestamp))
+        self.assert_(isinstance(the_max, Timestamp))
+        self.assertEqual(the_min, rng[0])
+        self.assertEqual(the_max, rng[-1])
+
+        self.assertEqual(rng.min(), rng[0])
+        self.assertEqual(rng.max(), rng[-1])
+
 
 class TestLegacyCompat(unittest.TestCase):
 
