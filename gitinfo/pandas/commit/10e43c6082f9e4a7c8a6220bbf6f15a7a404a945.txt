commit 10e43c6082f9e4a7c8a6220bbf6f15a7a404a945
Author: Chang She <chang@lambdafoundry.com>
Date:   Tue May 22 16:09:09 2012 -0400

    BUG: ts plotting fix after nanoseconds change #1265

diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index ce2612da4..80ab72843 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -43,6 +43,19 @@ try:
 except NameError: # py3
     basestring = str
 
+def ints_to_pydatetime(ndarray[int64_t] arr):
+    cdef:
+        Py_ssize_t i, n = len(arr)
+        pandas_datetimestruct dts
+        ndarray[object] result = np.empty(n, dtype=object)
+
+    for i in range(n):
+        pandas_datetime_to_datetimestruct(arr[i], PANDAS_FR_ns, &dts)
+        result[i] = datetime(dts.year, dts.month, dts.day,
+                             dts.hour, dts.min, dts.sec, dts.us)
+
+    return result
+
 
 # Python front end to C extension type _Timestamp
 # This serves as the box for datetime64
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 49e35995c..d49664108 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -408,7 +408,7 @@ class DatetimeIndex(Int64Index):
 
     def _mpl_repr(self):
         # how to represent ourselves to matplotlib
-        return self.values.astype('O')
+        return lib.ints_to_pydatetime(self.asi8)
 
     def __repr__(self):
         if self.offset is not None:
diff --git a/pandas/tseries/plotting.py b/pandas/tseries/plotting.py
index 55c4a38ba..cb915ba2c 100644
--- a/pandas/tseries/plotting.py
+++ b/pandas/tseries/plotting.py
@@ -71,6 +71,7 @@ def tsplot(series, plotf, *args, **kwargs):
     freq = getattr(series.index, 'freq', None)
     if freq is None and hasattr(series.index, 'inferred_freq'):
         freq = series.index.inferred_freq
+
     if isinstance(freq, DateOffset):
         freq = freq.rule_code
 
@@ -80,7 +81,7 @@ def tsplot(series, plotf, *args, **kwargs):
         idx = series.index.to_period(freq=freq)
         series = Series(series.values, idx, name=series.name)
 
-    if not isinstance(series.index, PeriodIndex):
+    if not isinstance(series.index, PeriodIndex): # business freq
         raise TypeError('series argument to tsplot must have DatetimeIndex or '
                         'PeriodIndex')
 
@@ -231,6 +232,16 @@ def _handle_period_index(curr, remaining, series, xdata, freq):
         if series is None:
             raise ValueError(noinfo_msg)
 
+def infer_min_freq(series):
+    """
+    To be used for irregular DatetimeIndex
+    figure out minimum time span between points and map to some offset alias
+
+    Returns
+    -------
+    offset alias: str
+    """
+
 
 ##### -------------------------------------------------------------------------
 #---- --- Locators ---
diff --git a/pandas/tseries/tests/test_plotting.py b/pandas/tseries/tests/test_plotting.py
index 8aa9674a9..46e0a3815 100644
--- a/pandas/tseries/tests/test_plotting.py
+++ b/pandas/tseries/tests/test_plotting.py
@@ -10,10 +10,11 @@ from numpy.testing.decorators import slow
 from pandas import Index, Series, DataFrame, isnull, notnull
 
 from pandas.tseries.index import date_range
-from pandas.tseries.offsets import Minute, bday
+from pandas.tseries.offsets import Minute, bday, DateOffset
 from pandas.tseries.period import period_range
 from pandas.tseries.resample import DatetimeIndex, TimeGrouper
 import pandas.tseries.offsets as offsets
+import pandas.tseries.frequencies as frequencies
 
 from pandas.util.testing import assert_series_equal, assert_almost_equal
 import pandas.util.testing as tm
@@ -91,7 +92,7 @@ class TestTSPlot(unittest.TestCase):
             _check_plot_works(ser.plot)
 
     @slow
-    def test_aplot_offset_freq(self):
+    def test_plot_offset_freq(self):
         ser = tm.makeTimeSeries()
         _check_plot_works(ser.plot)
 
@@ -99,6 +100,20 @@ class TestTSPlot(unittest.TestCase):
         ser = Series(np.random.randn(len(dr)), dr)
         _check_plot_works(ser.plot)
 
+    @slow
+    def test_irregular_datetime64_repr_bug(self):
+        ser = tm.makeTimeSeries()
+        ser = ser[[0,1,2,7]]
+        import matplotlib.pyplot as plt
+
+        fig = plt.gcf()
+        plt.clf()
+        ax = fig.add_subplot(211)
+        ret = ser.plot()
+        assert(ret is not None)
+
+        for rs, xp in zip(ax.get_lines()[0].get_xdata(), ser.index):
+            assert(rs == xp)
 
 PNG_PATH = 'tmp.png'
 def _check_plot_works(f, freq=None, series=None, *args, **kwargs):
@@ -111,8 +126,12 @@ def _check_plot_works(f, freq=None, series=None, *args, **kwargs):
     assert(ret is not None)  # do something more intelligent
 
     orig_ax = kwargs.pop('ax', plt.gca())
-    if series is not None:
-        assert(orig_ax.freq == series.index.freq)
+    if series is not None: # non-business
+        dfreq = series.index.freq
+        if isinstance(dfreq, DateOffset):
+            dfreq = dfreq.rule_code
+        #dfreq = frequencies.offset_to_period_alias(dfreq)
+        assert(orig_ax.freq == dfreq)
 
     if freq is not None:
         assert(orig_ax.freq == freq)
