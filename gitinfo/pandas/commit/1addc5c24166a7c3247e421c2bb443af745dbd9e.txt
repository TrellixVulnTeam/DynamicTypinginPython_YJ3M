commit 1addc5c24166a7c3247e421c2bb443af745dbd9e
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jun 13 19:39:18 2011 -0400

    removed pandas/core/matrix.py

diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index b87278195..acbd374af 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -3,7 +3,6 @@ import numpy as np
 from cStringIO import StringIO
 
 from pandas.core.frame import DataFrame
-from pandas.core.matrix import DataMatrix
 from pandas.core.series import Series
 from pandas.core.panel import WidePanel
 import pandas.core.common as common
@@ -34,7 +33,7 @@ def groupby(obj, grouper, **kwds):
     if isinstance(obj, Series):
         klass = SeriesGroupBy
     elif isinstance(obj, DataFrame):
-        klass = DataMatrixGroupBy
+        klass = DataFrameGroupBy
     else: # pragma: no cover
         raise TypeError('invalid type: %s' % type(obj))
 
@@ -44,7 +43,7 @@ class GroupBy(object):
     """
     Class for grouping and aggregating relational data.
 
-    Supported classes: Series, DataFrame, DataMatrix
+    Supported classes: Series, DataFrame
     """
     _groups = None
     _group_indices = None
@@ -246,7 +245,6 @@ class SeriesGroupBy(GroupBy):
         return result
 
 class DataFrameGroupBy(GroupBy):
-    _klass = DataFrame
 
     def __init__(self, obj, grouper, axis=0):
         if isinstance(grouper, basestring):
@@ -291,7 +289,7 @@ class DataFrameGroupBy(GroupBy):
         result_d = self._aggregate_generic(getter, applyfunc,
                                            axis=self.axis)
 
-        result = DataMatrix(result_d)
+        result = DataFrame(result_d)
 
         if self.axis == 0:
             result = result.T
@@ -333,7 +331,7 @@ class DataFrameGroupBy(GroupBy):
         >>> grouped = df.groupby(lambda x: mapping[x])
         >>> grouped.transform(lambda x: (x - x.mean()) / x.std())
         """
-        # DataMatrix objects?
+        # DataFrame objects?
         result_values = np.empty_like(self.obj.values)
 
         if self.axis == 0:
@@ -369,9 +367,6 @@ class DataFrameGroupBy(GroupBy):
         return DataFrame(result_values, index=self.obj.index,
                          columns=self.obj.columns)
 
-class DataMatrixGroupBy(DataFrameGroupBy):
-    _klass = DataMatrix
-
 
 class WidePanelGroupBy(GroupBy):
 
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
deleted file mode 100644
index 071a0710a..000000000
--- a/pandas/core/matrix.py
+++ /dev/null
@@ -1,4 +0,0 @@
-# pylint: disable=W0611
-
-from pandas.core.frame import DataFrame as DataMatrix
-
diff --git a/pandas/core/tests/test_groupby.py b/pandas/core/tests/test_groupby.py
index 066ef06f5..484664bef 100644
--- a/pandas/core/tests/test_groupby.py
+++ b/pandas/core/tests/test_groupby.py
@@ -5,7 +5,6 @@ from pandas.core.index import Index
 from pandas.core.groupby import GroupBy
 from pandas.core.pytools import rands, groupby
 from pandas.core.frame import DataFrame
-from pandas.core.matrix import DataMatrix
 from pandas.core.series import Series
 import pandas.core.datetools as dt
 import pandas.lib.tseries as tseries
@@ -13,52 +12,52 @@ import numpy as np
 
 # unittest.TestCase
 
-def commonSetUp(self):    
+def commonSetUp(self):
     self.dateRange = DateRange('1/1/2005', periods=250, offset=dt.bday)
     self.stringIndex = Index([rands(8).upper() for x in xrange(250)])
 
     self.groupId = Series([x[0] for x in self.stringIndex],
                               index=self.stringIndex)
     self.groupDict = dict((k, v) for k, v in self.groupId.iteritems())
-    
+
     self.columnIndex = Index(['A', 'B', 'C', 'D', 'E'])
-    
+
     randMat = np.random.randn(250, 5)
-    self.stringMatrix = DataMatrix(randMat, columns=self.columnIndex,
+    self.stringMatrix = DataFrame(randMat, columns=self.columnIndex,
                                   index=self.stringIndex)
-    
-    self.timeMatrix = DataMatrix(randMat, columns=self.columnIndex,
-                                 index=self.dateRange)
+
+    self.timeMatrix = DataFrame(randMat, columns=self.columnIndex,
+                                index=self.dateRange)
 
 
 class GroupByTestCase(unittest.TestCase):
     setUp = commonSetUp
-    
+
     def testPythonGrouper(self):
         groupFunc = self.groupDict.get
 
         groups = groupby(self.stringIndex, groupFunc)
-        
+
         setDict = dict((k, set(v)) for k, v in groups.iteritems())
         for idx in self.stringIndex:
             key = groupFunc(idx)
-            groupSet = setDict[key]        
+            groupSet = setDict[key]
             self.assert_(idx in groupSet)
-        
+
     def testCythonGrouper(self):
         pass
-        
+
     def testNaNGrouping(self):
         pass
-    
+
     def testMembership(self):
         pass
-        
+
     def testByColumnName(self):
         pass
-        
+
 class TestAggregate(unittest.TestCase):
     setUp = commonSetUp
-    
+
 class TestTransform(unittest.TestCase):
     setUp = commonSetUp
