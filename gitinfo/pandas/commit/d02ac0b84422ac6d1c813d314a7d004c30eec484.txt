commit d02ac0b84422ac6d1c813d314a7d004c30eec484
Author: Jeff Reback <jeff@reback.net>
Date:   Sun Mar 8 20:02:00 2015 -0400

    DOC: more v0.16.0 changes

diff --git a/doc/source/whatsnew/v0.16.0.txt b/doc/source/whatsnew/v0.16.0.txt
index bc5151989..19bda851e 100644
--- a/doc/source/whatsnew/v0.16.0.txt
+++ b/doc/source/whatsnew/v0.16.0.txt
@@ -164,8 +164,6 @@ from a ``scipy.sparse.coo_matrix``:
    ss = SparseSeries.from_coo(A)
    ss
 
-.. _whatsnew_0160.api:
-
 .. _whatsnew_0160.api_breaking:
 
 Backwards incompatible API changes
@@ -173,53 +171,113 @@ Backwards incompatible API changes
 
 .. _whatsnew_0160.api_breaking.timedelta:
 
-- In v0.15.0 a new scalar type ``Timedelta`` was introduced, that is a
-  sub-class of ``datetime.timedelta``.
-  Mentioned :ref:`here <whatsnew_0150.timedeltaindex>` was a notice of an API
-  change w.r.t. the ``.seconds`` accessor. The intent was to provide a
-  user-friendly set of accessors that give the 'natural' value for that unit,
-  e.g. if you had a ``Timedelta('1 day, 10:11:12')``, then ``.seconds`` would
-  return 12. However, this is at odds with the definition of
-  ``datetime.timedelta``, which defines ``.seconds`` as
-  ``10 * 3600 + 11 * 60 + 12 == 36672``.
-
-  So in v0.16.0, we are restoring the API to match that of
-  ``datetime.timedelta``. Further, the component values are still available
-  through the ``.components`` accessor. This affects the ``.seconds`` and
-  ``.microseconds`` accessors, and removes the ``.hours``, ``.minutes``,
-  ``.milliseconds`` accessors. These changes affect ``TimedeltaIndex``
-  and the Series ``.dt`` accessor as well. (:issue:`9185`, :issue:`9139`)
+In v0.15.0 a new scalar type ``Timedelta`` was introduced, that is a
+sub-class of ``datetime.timedelta``. Mentioned :ref:`here <whatsnew_0150.timedeltaindex>` was a notice of an API change w.r.t. the ``.seconds`` accessor. The intent was to provide a user-friendly set of accessors that give the 'natural' value for that unit, e.g. if you had a ``Timedelta('1 day, 10:11:12')``, then ``.seconds`` would return 12. However, this is at odds with the definition of ``datetime.timedelta``, which defines ``.seconds`` as ``10 * 3600 + 11 * 60 + 12 == 36672``.
+
+ So in v0.16.0, we are restoring the API to match that of ``datetime.timedelta``. Further, the component values are still available through the ``.components`` accessor. This affects the ``.seconds`` and ``.microseconds`` accessors, and removes the ``.hours``, ``.minutes``, ``.milliseconds`` accessors. These changes affect ``TimedeltaIndex`` and the Series ``.dt`` accessor as well. (:issue:`9185`, :issue:`9139`)
+
+Previous Behavior
+
+.. code-block:: python
+
+   In [2]: t = pd.Timedelta('1 day, 10:11:12.100123')
+
+   In [3]: t.days
+   Out[3]: 1
+
+   In [4]: t.seconds
+   Out[4]: 12
+
+   In [5]: t.microseconds
+   Out[5]: 123
+
+New Behavior
+
+.. ipython:: python
+
+   t = pd.Timedelta('1 day, 10:11:12.100123')
+   t.days
+   t.seconds
+   t.microseconds
+
+Using ``.components`` allows the full component access
+
+.. ipython:: python
+
+   t.components
+   t.components.seconds
+
+Indexing Changes
+~~~~~~~~~~~~~~~~
+
+.. _whatsnew_0160.api_breaking.indexing:
+
+The behavior of a small sub-set of edge cases for using ``.loc`` have changed (:issue:`8613`). Furthermore we have improved the content of the error messages that are raised:
+
+- slicing with ``.loc`` where the start and/or stop bound is not found in the index is now allowed; this previously would raise a ``KeyError``. This makes the behavior the same as ``.ix`` in this case. This change is only for slicing, not when indexing with a single label.
+
+  .. ipython:: python
+
+     df = DataFrame(np.random.randn(5,4),
+                    columns=list('ABCD'),
+                    index=date_range('20130101',periods=5))
+     df
+     s = Series(range(5),[-2,-1,1,2,3])
+     s
 
   Previous Behavior
 
   .. code-block:: python
 
-     In [2]: t = pd.Timedelta('1 day, 10:11:12.100123')
+     In [4]: df.loc['2013-01-02':'2013-01-10']
+     KeyError: 'stop bound [2013-01-10] is not in the [index]'
+
+     In [6]: s.loc[-10:3]
+     KeyError: 'start bound [-10] is not the [index]'
+
+  New Behavior
+
+  .. ipython:: python
+
+     df.loc['2013-01-02':'2013-01-10']
+     s.loc[-10:3]
 
-     In [3]: t.days
-     Out[3]: 1
+- allow slicing with float-like values on an integer index for ``.ix``. Previously this was only enabled for ``.loc``:
 
-     In [4]: t.seconds
-     Out[4]: 12
+  Previous Behavior
 
-     In [5]: t.microseconds
-     Out[5]: 123
+  .. code-block:: python
+
+     In [8]: s.ix[-1.0:2]
+     TypeError: the slice start value [-1.0] is not a proper indexer for this index type (Int64Index)
 
   New Behavior
 
   .. ipython:: python
 
-     t = pd.Timedelta('1 day, 10:11:12.100123')
-     t.days
-     t.seconds
-     t.microseconds
+     s.ix[-1.0:2]
 
-  Using ``.components`` allows the full component access
+- provide a useful exception for indexing with an invalid type for that index when using ``.loc``. For example trying to use ``.loc`` on an index of type ``DatetimeIndex`` or ``PeriodIndex`` or ``TimedeltaIndex``, with an integer (or a float).
 
-  .. ipython:: python
+  Previous Behavior
+
+  .. code-block:: python
 
-     t.components
-     t.components.seconds
+     In [4]: df.loc[2:3]
+     KeyError: 'start bound [2] is not the [index]'
+
+  New Behavior
+
+  .. code-block:: python
+
+     In [4]: df.loc[2:3]
+     TypeError: Cannot do slice indexing on <class 'pandas.tseries.index.DatetimeIndex'> with <type 'int'> keys
+
+
+API Changes
+~~~~~~~~~~~
+
+.. _whatsnew_0160.api:
 
 - ``Index.duplicated`` now returns ``np.array(dtype=bool)`` rather than ``Index(dtype=object)`` containing ``bool`` values. (:issue:`8875`)
 - ``DataFrame.to_json`` now returns accurate type serialisation for each column for frames of mixed dtype (:issue:`9037`)
@@ -242,7 +300,6 @@ Backwards incompatible API changes
 - ``DatetimeIndex``, ``PeriodIndex`` and ``TimedeltaIndex.summary`` now output the same format. (:issue:`9116`)
 - ``TimedeltaIndex.freqstr`` now output the same string format as ``DatetimeIndex``. (:issue:`9116`)
 
-
 - Bar and horizontal bar plots no longer add a dashed line along the info axis. The prior style can be achieved with matplotlib's ``axhline`` or ``axvline`` methods (:issue:`9088`).
 
 
@@ -307,73 +364,6 @@ Backwards incompatible API changes
 - ``Series.describe`` for categorical data will now give counts and frequencies of 0, not ``NaN``, for unused categories (:issue:`9443`)
 
 
-Indexing Changes
-~~~~~~~~~~~~~~~~
-
-.. _whatsnew_0160.api_breaking.indexing:
-
-The behavior of a small sub-set of edge cases for using ``.loc`` have changed (:issue:`8613`). Furthermore we have improved the content of the error messages that are raised:
-
-- slicing with ``.loc`` where the start and/or stop bound is not found in the index is now allowed; this previously would raise a ``KeyError``. This makes the behavior the same as ``.ix`` in this case. This change is only for slicing, not when indexing with a single label.
-
-.. ipython:: python
-
-     df = DataFrame(np.random.randn(5,4),
-                    columns=list('ABCD'),
-                    index=date_range('20130101',periods=5))
-     df
-     s = Series(range(5),[-2,-1,1,2,3])
-     s
-
-  Previous Behavior
-
-  .. code-block:: python
-
-     In [4]: df.loc['2013-01-02':'2013-01-10']
-     KeyError: 'stop bound [2013-01-10] is not in the [index]'
-
-     In [6]: s.loc[-10:3]
-     KeyError: 'start bound [-10] is not the [index]'
-
-  New Behavior
-
-  .. ipython:: python
-
-     df.loc['2013-01-02':'2013-01-10']
-     s.loc[-10:3]
-
-- allow slicing with float-like values on an integer index for ``.ix``. Previously this was only enabled for ``.loc``:
-
-  Previous Behavior
-
-  .. code-block:: python
-
-     In [8]: s.ix[-1.0:2]
-     TypeError: the slice start value [-1.0] is not a proper indexer for this index type (Int64Index)
-
-  New Behavior
-
-  .. ipython:: python
-
-     s.ix[-1.0:2]
-
-- provide a useful exception for indexing with an invalid type for that index when using ``.loc``. For example trying to use ``.loc`` on an index of type ``DatetimeIndex`` or ``PeriodIndex`` or ``TimedeltaIndex``, with an integer (or a float).
-
-  Previous Behavior
-
-  .. code-block:: python
-
-     In [4]: df.loc[2:3]
-     KeyError: 'start bound [2] is not the [index]'
-
-  New Behavior
-
-  .. code-block:: python
-
-     In [4]: df.loc[2:3]
-     TypeError: Cannot do slice indexing on <class 'pandas.tseries.index.DatetimeIndex'> with <type 'int'> keys
-
-
 .. _whatsnew_0160.deprecations:
 
 Deprecations
