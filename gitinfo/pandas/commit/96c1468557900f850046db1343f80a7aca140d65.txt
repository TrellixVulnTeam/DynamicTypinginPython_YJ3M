commit 96c1468557900f850046db1343f80a7aca140d65
Author: Chang She <changshe@gmail.com>
Date:   Tue Nov 6 15:35:18 2012 -0500

    Additional test coverage for v0.9.1

diff --git a/pandas/tests/test_graphics.py b/pandas/tests/test_graphics.py
index fe301acc5..ba01b5410 100644
--- a/pandas/tests/test_graphics.py
+++ b/pandas/tests/test_graphics.py
@@ -156,9 +156,9 @@ class TestDataFramePlots(unittest.TestCase):
 
     @classmethod
     def setUpClass(cls):
-        import sys
-        if 'IPython' in sys.modules:
-            raise nose.SkipTest
+        #import sys
+        #if 'IPython' in sys.modules:
+        #    raise nose.SkipTest
 
         try:
             import matplotlib as mpl
@@ -485,9 +485,9 @@ class TestDataFrameGroupByPlots(unittest.TestCase):
 
     @classmethod
     def setUpClass(cls):
-        import sys
-        if 'IPython' in sys.modules:
-            raise nose.SkipTest
+        #import sys
+        #if 'IPython' in sys.modules:
+        #    raise nose.SkipTest
 
         try:
             import matplotlib as mpl
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index 9ba8783af..096216fe5 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -1293,8 +1293,8 @@ def plot_frame(frame=None, x=None, y=None, subplots=False, sharex=True,
 
 def plot_series(series, label=None, kind='line', use_index=True, rot=None,
                 xticks=None, yticks=None, xlim=None, ylim=None,
-                ax=None, style=None, grid=None, logy=False, secondary_y=False,
-                **kwds):
+                ax=None, style=None, grid=None, legend=False, logy=False,
+                secondary_y=False, **kwds):
     """
     Plot the input series with the index on the x-axis using matplotlib
 
@@ -1358,7 +1358,7 @@ def plot_series(series, label=None, kind='line', use_index=True, rot=None,
     plot_obj = klass(series, kind=kind, rot=rot, logy=logy,
                      ax=ax, use_index=use_index, style=style,
                      xticks=xticks, yticks=yticks, xlim=xlim, ylim=ylim,
-                     legend=False, grid=grid, label=label,
+                     legend=legend, grid=grid, label=label,
                      secondary_y=secondary_y, **kwds)
 
     plot_obj.generate()
diff --git a/pandas/tseries/converter.py b/pandas/tseries/converter.py
index f10cfeb95..bd68a1fce 100644
--- a/pandas/tseries/converter.py
+++ b/pandas/tseries/converter.py
@@ -326,7 +326,7 @@ class MilliSecondLocator(dates.DateLocator):
             if len(all_dates) > 0:
                 locs = self.raise_if_exceeds(dates.date2num(all_dates))
                 return locs
-        except Exception, e:
+        except Exception, e: #pragma: no cover
             pass
 
         lims = dates.date2num([dmin, dmax])
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index e5305e997..2bf9ff860 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -1566,11 +1566,3 @@ def _time_to_micros(time):
     return 1000000 * seconds + time.microsecond
 
 
-def _utc_naive(dt):
-    if dt is None:
-        return dt
-
-    if dt.tz is not None:
-        dt = dt.tz_convert('utc').replace(tzinfo=None)
-
-    return dt
diff --git a/pandas/tseries/plotting.py b/pandas/tseries/plotting.py
index 20f0393be..4d25e6bad 100644
--- a/pandas/tseries/plotting.py
+++ b/pandas/tseries/plotting.py
@@ -99,7 +99,7 @@ def _maybe_resample(series, ax, freq, plotf, kwargs):
         elif frequencies.is_subperiod(freq, ax_freq) or _is_sub(freq, ax_freq):
             _upsample_others(ax, freq, plotf, kwargs)
             ax_freq = freq
-        else:
+        else: #pragma: no cover
             raise ValueError('Incompatible frequency conversion')
     return freq, ax_freq, series
 
@@ -146,7 +146,6 @@ def _upsample_others(ax, freq, plotf, kwargs):
             title = None
         ax.legend(lines, labels, loc='best', title=title)
 
-
 def _replot_ax(ax, freq, plotf, kwargs):
     data = getattr(ax, '_plot_data', None)
     ax._plot_data = []
@@ -187,7 +186,7 @@ def _maybe_mask(series):
         masked_array = np.ma.masked_where(mask, masked_array)
         args = [series.index, masked_array]
     else:
-        args = [series.index, series]
+        args = [series.index, series.values]
     return args
 
 
@@ -222,19 +221,6 @@ def _get_xlim(lines):
         right = max(x[-1].ordinal, right)
     return left, right
 
-
-def get_datevalue(date, freq):
-    if isinstance(date, Period):
-        return date.asfreq(freq).ordinal
-    elif isinstance(date, (str, datetime, pydt.date, pydt.time)):
-        return Period(date, freq).ordinal
-    elif (com.is_integer(date) or com.is_float(date) or
-          (isinstance(date, np.ndarray) and (date.size == 1))):
-        return date
-    elif date is None:
-        return None
-    raise ValueError("Unrecognizable date '%s'" % date)
-
 # Patch methods for subplot. Only format_dateaxis is currently used.
 # Do we need the rest for convenience?
 
diff --git a/pandas/tseries/tests/test_period.py b/pandas/tseries/tests/test_period.py
index bc9e73726..093808006 100644
--- a/pandas/tseries/tests/test_period.py
+++ b/pandas/tseries/tests/test_period.py
@@ -427,6 +427,7 @@ class TestPeriodProperties(TestCase):
                           freq='2M')
 
         self.assertRaises(ValueError, Period, datetime.now())
+        self.assertRaises(ValueError, Period, datetime.now().date())
         self.assertRaises(ValueError, Period, 1.6, freq='D')
         self.assertRaises(ValueError, Period, ordinal=1.6, freq='D')
         self.assertRaises(ValueError, Period, ordinal=2, value=1, freq='D')
@@ -1191,6 +1192,19 @@ class TestPeriodIndex(TestCase):
         result = ts['2008Q1':'2009Q4']
         self.assertEquals(len(result), 24)
 
+        result = ts[:'2009']
+        self.assertEquals(len(result), 36)
+
+        result = ts['2009':]
+        self.assertEquals(len(result), 50 - 24)
+
+        exp = result
+        result = ts[24:]
+        assert_series_equal(exp, result)
+
+        ts = ts[10:].append(ts[10:])
+        self.assertRaises(ValueError, ts.__getitem__, slice('2008', '2009'))
+
     def test_getitem_datetime(self):
         rng = period_range(start='2012-01-01', periods=10, freq='W-MON')
         ts = Series(range(len(rng)), index=rng)
diff --git a/pandas/tseries/tests/test_plotting.py b/pandas/tseries/tests/test_plotting.py
index 75a9446f9..435d202c8 100644
--- a/pandas/tseries/tests/test_plotting.py
+++ b/pandas/tseries/tests/test_plotting.py
@@ -8,16 +8,14 @@ import numpy as np
 from numpy.testing.decorators import slow
 from numpy.testing import assert_array_equal
 
-from pandas import Index, Series, DataFrame, isnull, notnull
+from pandas import Index, Series, DataFrame
 
 from pandas.tseries.index import date_range, bdate_range
-from pandas.tseries.offsets import Minute, DateOffset
-from pandas.tseries.period import period_range, Period
-from pandas.tseries.resample import DatetimeIndex, TimeGrouper
-import pandas.tseries.offsets as offsets
-import pandas.tseries.frequencies as frequencies
+from pandas.tseries.offsets import DateOffset
+from pandas.tseries.period import period_range, Period, PeriodIndex
+from pandas.tseries.resample import DatetimeIndex
 
-from pandas.util.testing import assert_series_equal, assert_almost_equal
+from pandas.util.testing import assert_series_equal
 import pandas.util.testing as tm
 
 class TestTSPlot(unittest.TestCase):
@@ -100,7 +98,7 @@ class TestTSPlot(unittest.TestCase):
             _check_plot_works(ser.plot)
 
     def test_get_datevalue(self):
-        from pandas.tseries.plotting import get_datevalue
+        from pandas.tseries.converter import get_datevalue
         self.assert_(get_datevalue(None, 'D') is None)
         self.assert_(get_datevalue(1987, 'A') == 1987)
         self.assert_(get_datevalue(Period(1987, 'A'), 'M') ==
@@ -238,7 +236,7 @@ class TestTSPlot(unittest.TestCase):
         self.assert_(ax.get_lines()[0].get_xydata()[0, 0],
                      bts.index[0].ordinal)
         idx = ax.get_lines()[0].get_xdata()
-        self.assert_(idx.freqstr == 'B')
+        self.assert_(PeriodIndex(data=idx).freqstr == 'B')
 
     @slow
     def test_business_freq_convert(self):
@@ -252,7 +250,7 @@ class TestTSPlot(unittest.TestCase):
         ax = bts.plot()
         self.assert_(ax.get_lines()[0].get_xydata()[0, 0], ts.index[0].ordinal)
         idx = ax.get_lines()[0].get_xdata()
-        self.assert_(idx.freqstr == 'M')
+        self.assert_(PeriodIndex(data=idx).freqstr == 'M')
 
     @slow
     def test_dataframe(self):
@@ -606,7 +604,7 @@ class TestTSPlot(unittest.TestCase):
         high.plot()
         ax = low.plot()
         for l in ax.get_lines():
-            self.assert_(l.get_xdata().freq == 'D')
+            self.assert_(PeriodIndex(data=l.get_xdata()).freq == 'D')
 
     @slow
     def test_mixed_freq_lf_first(self):
@@ -616,10 +614,12 @@ class TestTSPlot(unittest.TestCase):
         idxl = date_range('1/1/1999', periods=12, freq='M')
         high = Series(np.random.randn(len(idxh)), idxh)
         low = Series(np.random.randn(len(idxl)), idxl)
-        low.plot()
-        ax = high.plot()
+        low.plot(legend=True)
+        ax = high.plot(legend=True)
         for l in ax.get_lines():
-            self.assert_(l.get_xdata().freq == 'D')
+            self.assert_(PeriodIndex(data=l.get_xdata()).freq == 'D')
+        leg = ax.get_legend()
+        self.assert_(len(leg.texts) == 2)
 
         plt.close('all')
         idxh = date_range('1/1/1999', periods=240, freq='T')
@@ -629,7 +629,7 @@ class TestTSPlot(unittest.TestCase):
         low.plot()
         ax = high.plot()
         for l in ax.get_lines():
-            self.assert_(l.get_xdata().freq == 'T')
+            self.assert_(PeriodIndex(data=l.get_xdata()).freq == 'T')
 
     @slow
     def test_mixed_freq_irreg_period(self):
@@ -651,7 +651,7 @@ class TestTSPlot(unittest.TestCase):
         high.plot()
         ax = low.plot()
         for l in ax.get_lines():
-            self.assert_(l.get_xdata().freq.startswith('W'))
+            self.assert_(PeriodIndex(data=l.get_xdata()).freq.startswith('W'))
 
     @slow
     def test_from_weekly_resampling(self):
@@ -664,11 +664,10 @@ class TestTSPlot(unittest.TestCase):
         low.plot()
         ax = high.plot()
         for l in ax.get_lines():
-            self.assert_(l.get_xdata().freq.startswith('W'))
+            self.assert_(PeriodIndex(data=l.get_xdata()).freq.startswith('W'))
 
     @slow
     def test_irreg_dtypes(self):
-        import matplotlib.pyplot as plt
         #date
         idx = [date(2000, 1, 1), date(2000, 1, 5), date(2000, 1, 20)]
         df = DataFrame(np.random.randn(len(idx), 3), Index(idx, dtype=object))
