commit e42684436412d7ce2be7a191da0bf41bc4b96c07
Author: jreback <jeff@reback.net>
Date:   Mon Dec 16 10:04:12 2013 -0500

    CLN: clean up block validation for empty blocks

diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index f1919f1bc..6ec08fe50 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -3191,13 +3191,6 @@ class BlockManager(PandasObject):
         new_axes = [new_items] + self.axes[1:]
 
         # could have so me pathological (MultiIndex) issues here
-        def _valid_blocks(newb):
-            if newb is None:
-                return []
-            if not isinstance(newb, list):
-                newb = [ newb ]
-            return [ b for b in newb if len(b.items) > 0 ]
-
         new_blocks = []
         if indexer is None:
             for blk in self.blocks:
@@ -3423,7 +3416,11 @@ class SingleBlockManager(BlockManager):
         if fastpath:
             self.axes = [axis]
             if isinstance(block, list):
-                if len(block) != 1:
+
+                # empty block
+                if len(block) == 0:
+                    block = [np.array([])]
+                elif len(block) != 1:
                     raise ValueError('Cannot create SingleBlockManager with '
                                      'more than 1 block')
                 block = block[0]
@@ -3887,6 +3884,13 @@ def _consolidate(blocks, items):
     return new_blocks
 
 
+def _valid_blocks(newb):
+    if newb is None:
+        return []
+    if not isinstance(newb, list):
+        newb = [ newb ]
+    return [ b for b in newb if len(b.items) > 0 ]
+
 def _merge_blocks(blocks, items, dtype=None, _can_consolidate=True):
     if len(blocks) == 1:
         return blocks[0]
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 9c0f0ff36..188d61f39 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -2783,6 +2783,12 @@ class TestSeries(tm.TestCase, CheckNameIntegration):
         result = s1.fillna(Series({ 0 : 1, 1 : 1},index=[4,5]))
         assert_series_equal(result,s1)
 
+        s1 = Series([0, 1, 2], list('abc'))
+        s2 = Series([0, np.nan, 2], list('bac'))
+        result = s2.fillna(s1)
+        expected = Series([0,0,2.], list('bac'))
+        assert_series_equal(result,expected)
+
     def test_fillna_bug(self):
         x = Series([nan, 1., nan, 3., nan], ['z', 'a', 'b', 'c', 'd'])
         filled = x.fillna(method='ffill')
