commit 872ba0d357f660db9bee10706671869328ee1c47
Author: jreback <jeff@reback.net>
Date:   Wed Feb 26 08:32:04 2014 -0500

    BUG: fix non-caching of some frequency offsets for date generation
    
    DOC: release notes

diff --git a/doc/source/release.rst b/doc/source/release.rst
index 51833dd4d..d9b416136 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -123,6 +123,8 @@ Improvements to existing features
 - ``Series.rank()`` now has a percentage rank option (:issue:`5971`)
 - ``quotechar``, ``doublequote``, and ``escapechar`` can now be specified when
   using ``DataFrame.to_csv`` (:issue:`5414`, :issue:`4528`)
+- perf improvements in DataFrame construction with certain offsets, by removing faulty caching
+  (e.g. MonthEnd,BusinessMonthEnd), (:issue:`6479`)
 
 .. _release.bug_fixes-0.14.0:
 
diff --git a/doc/source/v0.14.0.txt b/doc/source/v0.14.0.txt
index e914b2a46..13c0b6605 100644
--- a/doc/source/v0.14.0.txt
+++ b/doc/source/v0.14.0.txt
@@ -235,6 +235,9 @@ Enhancements
 Performance
 ~~~~~~~~~~~
 
+- perf improvements in DataFrame construction with certain offsets, by removing faulty caching
+  (e.g. MonthEnd,BusinessMonthEnd), (:issue:`6479`)
+
 Experimental
 ~~~~~~~~~~~~
 
diff --git a/pandas/tseries/offsets.py b/pandas/tseries/offsets.py
index ab9f49ddd..299d532c2 100644
--- a/pandas/tseries/offsets.py
+++ b/pandas/tseries/offsets.py
@@ -291,7 +291,7 @@ class SingleConstructorOffset(DateOffset):
         return cls()
 
 
-class BusinessDay(CacheableOffset, SingleConstructorOffset):
+class BusinessDay(SingleConstructorOffset):
     """
     DateOffset subclass representing possibly n business days
     """
@@ -399,7 +399,7 @@ class BusinessDay(CacheableOffset, SingleConstructorOffset):
                 n -= 5 * k
                 if n == 0 and result.weekday() > 4:
                     n -= 1
-            
+
             while n != 0:
                 k = n // abs(n)
                 result = result + timedelta(k)
@@ -548,7 +548,7 @@ class MonthOffset(SingleConstructorOffset):
             return "%s-%s" % (self.rule_code, _int_to_month[self.n])
 
 
-class MonthEnd(CacheableOffset, MonthOffset):
+class MonthEnd(MonthOffset):
     """DateOffset of one month end"""
 
     def apply(self, other):
@@ -572,7 +572,7 @@ class MonthEnd(CacheableOffset, MonthOffset):
     _prefix = 'M'
 
 
-class MonthBegin(CacheableOffset, MonthOffset):
+class MonthBegin(MonthOffset):
     """DateOffset of one month at beginning"""
 
     def apply(self, other):
@@ -591,7 +591,7 @@ class MonthBegin(CacheableOffset, MonthOffset):
     _prefix = 'MS'
 
 
-class BusinessMonthEnd(CacheableOffset, MonthOffset):
+class BusinessMonthEnd(MonthOffset):
     """DateOffset increments between business EOM dates"""
 
     def isAnchored(self):
@@ -619,7 +619,7 @@ class BusinessMonthEnd(CacheableOffset, MonthOffset):
     _prefix = 'BM'
 
 
-class BusinessMonthBegin(CacheableOffset, MonthOffset):
+class BusinessMonthBegin(MonthOffset):
     """DateOffset of one business month at beginning"""
 
     def apply(self, other):
@@ -654,7 +654,7 @@ class BusinessMonthBegin(CacheableOffset, MonthOffset):
     _prefix = 'BMS'
 
 
-class Week(CacheableOffset, DateOffset):
+class Week(DateOffset):
     """
     Weekly offset
 
@@ -744,7 +744,7 @@ _int_to_weekday = {
 _weekday_to_int = dict((v, k) for k, v in _int_to_weekday.items())
 
 
-class WeekOfMonth(CacheableOffset, DateOffset):
+class WeekOfMonth(DateOffset):
     """
     Describes monthly dates like "the Tuesday of the 2nd week of each month"
 
@@ -830,7 +830,7 @@ class WeekOfMonth(CacheableOffset, DateOffset):
         weekday = _weekday_to_int[suffix[1:]]
         return cls(week=week, weekday=weekday)
 
-class LastWeekOfMonth(CacheableOffset, DateOffset):
+class LastWeekOfMonth(DateOffset):
     """
     Describes monthly dates in last week of month like "the last Tuesday of each month"
 
@@ -940,7 +940,7 @@ class QuarterOffset(DateOffset):
         return '%s-%s' % (self._prefix, _int_to_month[self.startingMonth])
 
 
-class BQuarterEnd(CacheableOffset, QuarterOffset):
+class BQuarterEnd(QuarterOffset):
     """DateOffset increments between business Quarter dates
     startingMonth = 1 corresponds to dates like 1/31/2007, 4/30/2007, ...
     startingMonth = 2 corresponds to dates like 2/28/2007, 5/31/2007, ...
@@ -999,7 +999,7 @@ _month_to_int = dict((v, k) for k, v in _int_to_month.items())
 
 
 # TODO: This is basically the same as BQuarterEnd
-class BQuarterBegin(CacheableOffset, QuarterOffset):
+class BQuarterBegin(QuarterOffset):
     _outputName = "BusinessQuarterBegin"
     # I suspect this is wrong for *all* of them.
     _default_startingMonth = 3
@@ -1036,7 +1036,7 @@ class BQuarterBegin(CacheableOffset, QuarterOffset):
         return as_timestamp(result)
 
 
-class QuarterEnd(CacheableOffset, QuarterOffset):
+class QuarterEnd(QuarterOffset):
     """DateOffset increments between business Quarter dates
     startingMonth = 1 corresponds to dates like 1/31/2007, 4/30/2007, ...
     startingMonth = 2 corresponds to dates like 2/28/2007, 5/31/2007, ...
@@ -1077,7 +1077,7 @@ class QuarterEnd(CacheableOffset, QuarterOffset):
         return MonthEnd().onOffset(dt) and modMonth == 0
 
 
-class QuarterBegin(CacheableOffset, QuarterOffset):
+class QuarterBegin(QuarterOffset):
     _outputName = 'QuarterBegin'
     _default_startingMonth = 3
     _from_name_startingMonth = 1
@@ -1129,7 +1129,7 @@ class YearOffset(DateOffset):
         return '%s-%s' % (self._prefix, _int_to_month[self.month])
 
 
-class BYearEnd(CacheableOffset, YearOffset):
+class BYearEnd(YearOffset):
     """DateOffset increments between business EOM dates"""
     _outputName = 'BusinessYearEnd'
     _default_month = 12
@@ -1166,7 +1166,7 @@ class BYearEnd(CacheableOffset, YearOffset):
         return result
 
 
-class BYearBegin(CacheableOffset, YearOffset):
+class BYearBegin(YearOffset):
     """DateOffset increments between business year begin dates"""
     _outputName = 'BusinessYearBegin'
     _default_month = 1
@@ -1198,7 +1198,7 @@ class BYearBegin(CacheableOffset, YearOffset):
         return as_timestamp(datetime(other.year, self.month, first))
 
 
-class YearEnd(CacheableOffset, YearOffset):
+class YearEnd(YearOffset):
     """DateOffset increments between calendar year ends"""
     _default_month = 12
     _prefix = 'A'
@@ -1254,7 +1254,7 @@ class YearEnd(CacheableOffset, YearOffset):
         return self.month == dt.month and dt.day == days_in_month
 
 
-class YearBegin(CacheableOffset, YearOffset):
+class YearBegin(YearOffset):
     """DateOffset increments between calendar year begin dates"""
     _default_month = 1
     _prefix = 'AS'
@@ -1300,7 +1300,7 @@ class YearBegin(CacheableOffset, YearOffset):
         return dt.month == self.month and dt.day == 1
 
 
-class FY5253(CacheableOffset, DateOffset):
+class FY5253(DateOffset):
     """
     Describes 52-53 week fiscal year. This is also known as a 4-4-5 calendar.
 
@@ -1501,7 +1501,7 @@ class FY5253(CacheableOffset, DateOffset):
         return cls(**cls._parse_suffix(*args))
 
 
-class FY5253Quarter(CacheableOffset, DateOffset):
+class FY5253Quarter(DateOffset):
     """
     DateOffset increments between business quarter dates
     for 52-53 week fiscal year (also known as a 4-4-5 calendar).
@@ -1772,7 +1772,7 @@ def _delta_to_nanoseconds(delta):
             + delta.microseconds) * 1000
 
 
-class Day(CacheableOffset, Tick):
+class Day(Tick):
     _inc = timedelta(1)
     _prefix = 'D'
 
diff --git a/pandas/tseries/tests/test_offsets.py b/pandas/tseries/tests/test_offsets.py
index d30a646b1..50a955835 100644
--- a/pandas/tseries/tests/test_offsets.py
+++ b/pandas/tseries/tests/test_offsets.py
@@ -316,7 +316,7 @@ class TestBusinessDay(TestBase):
         rs = st + off
         xp = datetime(2011, 12, 26)
         self.assertEqual(rs, xp)
-        
+
         off = BDay() * 10
         rs = datetime(2014, 1, 5) + off # see #5890
         xp = datetime(2014, 1, 17)
@@ -2427,25 +2427,9 @@ def get_all_subclasses(cls):
     return ret
 
 class TestCaching(tm.TestCase):
-    no_simple_ctr = [WeekOfMonth, FY5253,
-                     FY5253Quarter,
-                     LastWeekOfMonth]
-
-    def test_should_cache_month_end(self):
-        self.assertTrue(MonthEnd()._should_cache())
-
-    def test_should_cache_bmonth_end(self):
-        self.assertTrue(BusinessMonthEnd()._should_cache())
-
-    def test_should_cache_week_month(self):
-        self.assertTrue(WeekOfMonth(weekday=1, week=2)._should_cache())
 
-    def test_all_cacheableoffsets(self):
-        for subclass in get_all_subclasses(CacheableOffset):
-            if subclass.__name__[0] == "_" \
-                or subclass in TestCaching.no_simple_ctr:
-                continue
-            self.run_X_index_creation(subclass)
+    # as of GH 6479 (in 0.14.0), offset caching is turned off
+    # as of v0.12.0 only BusinessMonth/Quarter were actually caching
 
     def setUp(self):
         _daterange_cache.clear()
@@ -2462,20 +2446,35 @@ class TestCaching(tm.TestCase):
         DatetimeIndex(start=datetime(2013,1,31), end=datetime(2013,3,31), freq=inst1, normalize=True)
         self.assertTrue(cls() in _daterange_cache, cls)
 
+    def test_should_cache_month_end(self):
+        self.assertFalse(MonthEnd()._should_cache())
+
+    def test_should_cache_bmonth_end(self):
+        self.assertFalse(BusinessMonthEnd()._should_cache())
+
+    def test_should_cache_week_month(self):
+        self.assertFalse(WeekOfMonth(weekday=1, week=2)._should_cache())
+
+    def test_all_cacheableoffsets(self):
+        for subclass in get_all_subclasses(CacheableOffset):
+            if subclass.__name__[0] == "_" \
+                or subclass in TestCaching.no_simple_ctr:
+                continue
+            self.run_X_index_creation(subclass)
+
     def test_month_end_index_creation(self):
         DatetimeIndex(start=datetime(2013,1,31), end=datetime(2013,3,31), freq=MonthEnd(), normalize=True)
-        self.assertTrue(MonthEnd() in _daterange_cache)
+        self.assertFalse(MonthEnd() in _daterange_cache)
 
     def test_bmonth_end_index_creation(self):
         DatetimeIndex(start=datetime(2013,1,31), end=datetime(2013,3,29), freq=BusinessMonthEnd(), normalize=True)
-        self.assertTrue(BusinessMonthEnd() in _daterange_cache)
+        self.assertFalse(BusinessMonthEnd() in _daterange_cache)
 
     def test_week_of_month_index_creation(self):
         inst1 = WeekOfMonth(weekday=1, week=2)
         DatetimeIndex(start=datetime(2013,1,31), end=datetime(2013,3,29), freq=inst1, normalize=True)
         inst2 = WeekOfMonth(weekday=1, week=2)
-        self.assertTrue(inst2 in _daterange_cache)
-
+        self.assertFalse(inst2 in _daterange_cache)
 
 class TestReprNames(tm.TestCase):
     def test_str_for_named_is_name(self):
