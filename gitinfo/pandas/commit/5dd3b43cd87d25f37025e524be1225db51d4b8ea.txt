commit 5dd3b43cd87d25f37025e524be1225db51d4b8ea
Author: Jeff Reback <jeff@reback.net>
Date:   Thu May 4 19:26:08 2017 -0400

    TST: xfail some bottleneck on windows (#16240)
    
    * CI: add bottleneck for 3.6 on windows
    
    * TST: xfail some bottleneck tests on windows
    
    xref https://github.com/pandas-dev/pandas/issues/16049#issuecomment-299298192

diff --git a/ci/requirements-3.6_WIN.run b/ci/requirements-3.6_WIN.run
index 840d2867e..899bfbc6b 100644
--- a/ci/requirements-3.6_WIN.run
+++ b/ci/requirements-3.6_WIN.run
@@ -1,6 +1,7 @@
 python-dateutil
 pytz
 numpy=1.12*
+bottleneck
 openpyxl
 xlsxwriter
 xlrd
diff --git a/pandas/tests/series/test_analytics.py b/pandas/tests/series/test_analytics.py
index 257f992f5..ec6a118ec 100644
--- a/pandas/tests/series/test_analytics.py
+++ b/pandas/tests/series/test_analytics.py
@@ -19,7 +19,7 @@ import pandas.core.config as cf
 
 import pandas.core.nanops as nanops
 
-from pandas.compat import lrange, range
+from pandas.compat import lrange, range, is_platform_windows
 from pandas import compat
 from pandas.util.testing import (assert_series_equal, assert_almost_equal,
                                  assert_frame_equal, assert_index_equal)
@@ -28,6 +28,10 @@ import pandas.util.testing as tm
 from .common import TestData
 
 
+skip_if_bottleneck_on_windows = (is_platform_windows() and
+                                 nanops._USE_BOTTLENECK)
+
+
 class TestSeriesAnalytics(TestData):
 
     def test_sum_zero(self):
@@ -64,14 +68,6 @@ class TestSeriesAnalytics(TestData):
             result = s.max(skipna=False)
             assert int(result) == v[-1]
 
-            # use bottleneck if available
-            result = s.sum()
-            assert int(result) == v.sum(dtype='int64')
-            result = s.min()
-            assert int(result) == 0
-            result = s.max()
-            assert int(result) == v[-1]
-
         for dtype in ['float32', 'float64']:
             v = np.arange(5000000, dtype=dtype)
             s = Series(v)
@@ -84,6 +80,28 @@ class TestSeriesAnalytics(TestData):
             result = s.max(skipna=False)
             assert np.allclose(float(result), v[-1])
 
+    @pytest.mark.xfail(
+        skip_if_bottleneck_on_windows,
+        reason="buggy bottleneck with sum overflow on windows")
+    def test_overflow_with_bottleneck(self):
+        # GH 6915
+        # overflowing on the smaller int dtypes
+        for dtype in ['int32', 'int64']:
+            v = np.arange(5000000, dtype=dtype)
+            s = Series(v)
+
+            # use bottleneck if available
+            result = s.sum()
+            assert int(result) == v.sum(dtype='int64')
+            result = s.min()
+            assert int(result) == 0
+            result = s.max()
+            assert int(result) == v[-1]
+
+        for dtype in ['float32', 'float64']:
+            v = np.arange(5000000, dtype=dtype)
+            s = Series(v)
+
             # use bottleneck if available
             result = s.sum()
             assert result == v.sum(dtype=dtype)
@@ -92,6 +110,9 @@ class TestSeriesAnalytics(TestData):
             result = s.max()
             assert np.allclose(float(result), v[-1])
 
+    @pytest.mark.xfail(
+        skip_if_bottleneck_on_windows,
+        reason="buggy bottleneck with sum overflow on windows")
     def test_sum(self):
         self._check_stat_op('sum', np.sum, check_allna=True)
 
