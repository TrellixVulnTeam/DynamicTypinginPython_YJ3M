commit 8f4926571b2d63908ef7a14498ccf3227ce3874c
Author: Martin Winkel <martin.winkel.pps@gmail.com>
Date:   Sat Feb 15 02:12:48 2020 +0100

    started to fixturize pandas/tests/base (#31701)

diff --git a/pandas/conftest.py b/pandas/conftest.py
index 41f77506b..7851cba9c 100644
--- a/pandas/conftest.py
+++ b/pandas/conftest.py
@@ -17,6 +17,7 @@ import pandas as pd
 from pandas import DataFrame
 import pandas._testing as tm
 from pandas.core import ops
+from pandas.core.indexes.api import Index, MultiIndex
 
 hypothesis.settings.register_profile(
     "ci",
@@ -953,3 +954,69 @@ def non_mapping_dict_subclass():
             return self._data.__len__()
 
     return TestNonDictMapping
+
+
+indices_dict = {
+    "unicode": tm.makeUnicodeIndex(100),
+    "string": tm.makeStringIndex(100),
+    "datetime": tm.makeDateIndex(100),
+    "datetime-tz": tm.makeDateIndex(100, tz="US/Pacific"),
+    "period": tm.makePeriodIndex(100),
+    "timedelta": tm.makeTimedeltaIndex(100),
+    "int": tm.makeIntIndex(100),
+    "uint": tm.makeUIntIndex(100),
+    "range": tm.makeRangeIndex(100),
+    "float": tm.makeFloatIndex(100),
+    "bool": tm.makeBoolIndex(2),
+    "categorical": tm.makeCategoricalIndex(100),
+    "interval": tm.makeIntervalIndex(100),
+    "empty": Index([]),
+    "tuples": MultiIndex.from_tuples(zip(["foo", "bar", "baz"], [1, 2, 3])),
+    "repeats": Index([0, 0, 1, 1, 2, 2]),
+}
+
+
+@pytest.fixture(params=indices_dict.keys())
+def indices(request):
+    # copy to avoid mutation, e.g. setting .name
+    return indices_dict[request.param].copy()
+
+
+def _create_series(index):
+    """ Helper for the _series dict """
+    size = len(index)
+    data = np.random.randn(size)
+    return pd.Series(data, index=index, name="a")
+
+
+_series = {
+    f"series-with-{index_id}-index": _create_series(index)
+    for index_id, index in indices_dict.items()
+}
+
+
+_narrow_dtypes = [
+    np.float16,
+    np.float32,
+    np.int8,
+    np.int16,
+    np.int32,
+    np.uint8,
+    np.uint16,
+    np.uint32,
+]
+_narrow_series = {
+    f"{dtype.__name__}-series": tm.makeFloatSeries(name="a").astype(dtype)
+    for dtype in _narrow_dtypes
+}
+
+_index_or_series_objs = {**indices_dict, **_series, **_narrow_series}
+
+
+@pytest.fixture(params=_index_or_series_objs.keys())
+def index_or_series_obj(request):
+    """
+    Fixture for tests on indexes, series and series with a narrow dtype
+    copy to avoid mutation, e.g. setting .name
+    """
+    return _index_or_series_objs[request.param].copy(deep=True)
diff --git a/pandas/tests/base/test_ops.py b/pandas/tests/base/test_ops.py
index e522c7f74..9deb56f07 100644
--- a/pandas/tests/base/test_ops.py
+++ b/pandas/tests/base/test_ops.py
@@ -109,26 +109,26 @@ def test_binary_ops(klass, op_name, op):
     assert expected_str in getattr(klass, "r" + op_name).__doc__
 
 
-class TestTranspose(Ops):
+class TestTranspose:
     errmsg = "the 'axes' parameter is not supported"
 
-    def test_transpose(self):
-        for obj in self.objs:
-            tm.assert_equal(obj.transpose(), obj)
+    def test_transpose(self, index_or_series_obj):
+        obj = index_or_series_obj
+        tm.assert_equal(obj.transpose(), obj)
 
-    def test_transpose_non_default_axes(self):
-        for obj in self.objs:
-            with pytest.raises(ValueError, match=self.errmsg):
-                obj.transpose(1)
-            with pytest.raises(ValueError, match=self.errmsg):
-                obj.transpose(axes=1)
+    def test_transpose_non_default_axes(self, index_or_series_obj):
+        obj = index_or_series_obj
+        with pytest.raises(ValueError, match=self.errmsg):
+            obj.transpose(1)
+        with pytest.raises(ValueError, match=self.errmsg):
+            obj.transpose(axes=1)
 
-    def test_numpy_transpose(self):
-        for obj in self.objs:
-            tm.assert_equal(np.transpose(obj), obj)
+    def test_numpy_transpose(self, index_or_series_obj):
+        obj = index_or_series_obj
+        tm.assert_equal(np.transpose(obj), obj)
 
-            with pytest.raises(ValueError, match=self.errmsg):
-                np.transpose(obj, axes=1)
+        with pytest.raises(ValueError, match=self.errmsg):
+            np.transpose(obj, axes=1)
 
 
 class TestIndexOps(Ops):
diff --git a/pandas/tests/indexes/conftest.py b/pandas/tests/indexes/conftest.py
deleted file mode 100644
index 57174f206..000000000
--- a/pandas/tests/indexes/conftest.py
+++ /dev/null
@@ -1,29 +0,0 @@
-import pytest
-
-import pandas._testing as tm
-from pandas.core.indexes.api import Index, MultiIndex
-
-indices_dict = {
-    "unicode": tm.makeUnicodeIndex(100),
-    "string": tm.makeStringIndex(100),
-    "datetime": tm.makeDateIndex(100),
-    "datetime-tz": tm.makeDateIndex(100, tz="US/Pacific"),
-    "period": tm.makePeriodIndex(100),
-    "timedelta": tm.makeTimedeltaIndex(100),
-    "int": tm.makeIntIndex(100),
-    "uint": tm.makeUIntIndex(100),
-    "range": tm.makeRangeIndex(100),
-    "float": tm.makeFloatIndex(100),
-    "bool": tm.makeBoolIndex(2),
-    "categorical": tm.makeCategoricalIndex(100),
-    "interval": tm.makeIntervalIndex(100),
-    "empty": Index([]),
-    "tuples": MultiIndex.from_tuples(zip(["foo", "bar", "baz"], [1, 2, 3])),
-    "repeats": Index([0, 0, 1, 1, 2, 2]),
-}
-
-
-@pytest.fixture(params=indices_dict.keys())
-def indices(request):
-    # copy to avoid mutation, e.g. setting .name
-    return indices_dict[request.param].copy()
diff --git a/pandas/tests/indexes/test_base.py b/pandas/tests/indexes/test_base.py
index 04af9b09b..c64a70af6 100644
--- a/pandas/tests/indexes/test_base.py
+++ b/pandas/tests/indexes/test_base.py
@@ -34,6 +34,7 @@ from pandas import (
     period_range,
 )
 import pandas._testing as tm
+from pandas.conftest import indices_dict
 from pandas.core.indexes.api import (
     Index,
     MultiIndex,
@@ -42,7 +43,6 @@ from pandas.core.indexes.api import (
     ensure_index_from_sequences,
 )
 from pandas.tests.indexes.common import Base
-from pandas.tests.indexes.conftest import indices_dict
 
 
 class TestIndex(Base):
diff --git a/pandas/tests/indexes/test_setops.py b/pandas/tests/indexes/test_setops.py
index abfa413d5..d0cbb2ab7 100644
--- a/pandas/tests/indexes/test_setops.py
+++ b/pandas/tests/indexes/test_setops.py
@@ -13,7 +13,7 @@ import pandas as pd
 from pandas import Float64Index, Int64Index, RangeIndex, UInt64Index
 import pandas._testing as tm
 from pandas.api.types import pandas_dtype
-from pandas.tests.indexes.conftest import indices_dict
+from pandas.conftest import indices_dict
 
 COMPATIBLE_INCONSISTENT_PAIRS = {
     (Int64Index, RangeIndex): (tm.makeIntIndex, tm.makeRangeIndex),
