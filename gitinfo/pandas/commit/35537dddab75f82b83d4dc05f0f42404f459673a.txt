commit 35537dddab75f82b83d4dc05f0f42404f459673a
Author: Daniel Saxton <2658661+dsaxton@users.noreply.github.com>
Date:   Wed Feb 26 06:39:55 2020 -0600

    BUG: Cast pd.NA to pd.NaT in to_datetime (#32214)

diff --git a/doc/source/whatsnew/v1.0.2.rst b/doc/source/whatsnew/v1.0.2.rst
index e91bab092..1b6098e6b 100644
--- a/doc/source/whatsnew/v1.0.2.rst
+++ b/doc/source/whatsnew/v1.0.2.rst
@@ -63,6 +63,7 @@ Bug fixes
 **Datetimelike**
 
 - Bug in :meth:`DataFrame.reindex` and :meth:`Series.reindex` when reindexing with a tz-aware index (:issue:`26683`)
+- Bug where :func:`to_datetime` would raise when passed ``pd.NA`` (:issue:`32213`)
 
 **Categorical**
 
diff --git a/pandas/_libs/tslibs/nattype.pyx b/pandas/_libs/tslibs/nattype.pyx
index 9f6f401a1..68a25d0cc 100644
--- a/pandas/_libs/tslibs/nattype.pyx
+++ b/pandas/_libs/tslibs/nattype.pyx
@@ -22,6 +22,8 @@ from pandas._libs.tslibs.util cimport (
     get_nat, is_integer_object, is_float_object, is_datetime64_object,
     is_timedelta64_object)
 
+from pandas._libs.missing cimport C_NA
+
 
 # ----------------------------------------------------------------------
 # Constants
@@ -763,7 +765,7 @@ NaT = c_NaT        # Python-visible
 
 cdef inline bint checknull_with_nat(object val):
     """ utility to check if a value is a nat or not """
-    return val is None or util.is_nan(val) or val is c_NaT
+    return val is None or util.is_nan(val) or val is c_NaT or val is C_NA
 
 
 cpdef bint is_null_datetimelike(object val, bint inat_is_null=True):
diff --git a/pandas/tests/indexes/datetimes/test_tools.py b/pandas/tests/indexes/datetimes/test_tools.py
index 13723f645..e1f04d3d4 100644
--- a/pandas/tests/indexes/datetimes/test_tools.py
+++ b/pandas/tests/indexes/datetimes/test_tools.py
@@ -2315,3 +2315,10 @@ def test_nullable_integer_to_datetime():
     tm.assert_series_equal(res, expected)
     # Check that ser isn't mutated
     tm.assert_series_equal(ser, ser_copy)
+
+
+@pytest.mark.parametrize("klass", [np.array, list])
+def test_na_to_datetime(nulls_fixture, klass):
+    result = pd.to_datetime(klass([nulls_fixture]))
+
+    assert result[0] is pd.NaT
