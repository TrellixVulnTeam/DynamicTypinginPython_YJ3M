commit 221ab06f54ff39137e5a3881962f5b09a54c1815
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jul 12 11:12:07 2012 -0400

    ENH: improve DatetimeIndex repr for len-1 and len-2 cases close #1611

diff --git a/RELEASE.rst b/RELEASE.rst
index 081f42a43..f1c46e460 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -42,6 +42,7 @@ pandas 0.8.1
     drop single levels with ``reset_index`` (#1569, #1577)
   - Always apply passed functions in ``resample``, even if upsampling (#1596)
   - Avoid unnecessary copies in DataFrame constructor with explicit dtype (#1572)
+  - Cleaner DatetimeIndex string representation with 1 or 2 elements (#1611)
 
 **Bug fixes**
 
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 086a73fb6..390280bb8 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -374,10 +374,18 @@ class DatetimeIndex(Int64Index):
             freq = self.offset.freqstr
 
         summary = str(self.__class__)
-        if len(self) > 0:
+        if len(self) == 1:
+            first = _format_datetime64(values[0], tz=self.tz)
+            summary += '\n[%s]' % first
+        elif len(self) == 2:
+            first = _format_datetime64(values[0], tz=self.tz)
+            last = _format_datetime64(values[-1], tz=self.tz)
+            summary += '\n[%s, %s]' % (first, last)
+        elif len(self) > 2:
             first = _format_datetime64(values[0], tz=self.tz)
             last = _format_datetime64(values[-1], tz=self.tz)
             summary += '\n[%s, ..., %s]' % (first, last)
+
         tagline = '\nLength: %d, Freq: %s, Timezone: %s'
         summary += tagline % (len(self), freq, self.tz)
 
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 079eb0f61..7fdb05222 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -997,6 +997,16 @@ class TestTimeSeries(unittest.TestCase):
 
         assert_series_equal(result, expected)
 
+    def test_datetimeindex_repr_short(self):
+        dr = date_range(start='1/1/2012', periods=1)
+        repr(dr)
+
+        dr = date_range(start='1/1/2012', periods=2)
+        repr(dr)
+
+        dr = date_range(start='1/1/2012', periods=3)
+        repr(dr)
+
 
 def _simple_ts(start, end, freq='D'):
     rng = date_range(start, end, freq=freq)
