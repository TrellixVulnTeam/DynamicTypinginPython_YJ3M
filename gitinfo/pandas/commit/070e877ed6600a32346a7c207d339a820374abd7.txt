commit 070e877ed6600a32346a7c207d339a820374abd7
Author: Elliot Marsden <elliot.marsden@gmail.com>
Date:   Thu May 19 10:50:46 2016 -0400

    BUG: Fix argument order in call to super
    
    Author: Elliot Marsden <elliot.marsden@gmail.com>
    
    Closes #12924 from eddiejessup/master and squashes the following commits:
    
    b495e32 [Elliot Marsden] BUG: Fix argument order in call to super

diff --git a/doc/source/whatsnew/v0.18.2.txt b/doc/source/whatsnew/v0.18.2.txt
index 59ab33fff..61461be87 100644
--- a/doc/source/whatsnew/v0.18.2.txt
+++ b/doc/source/whatsnew/v0.18.2.txt
@@ -124,6 +124,7 @@ Bug Fixes
 - Bug in ``.groupby(..).resample(..)`` when the same object is called multiple times (:issue:`13174`)
 - Bug in ``.to_records()`` when index name is a unicode string (:issue: `13172`)
 
+- Bug in calling ``.memory_usage()`` on object which doesn't implement (:issue:`12924`)
 
 - Regression in ``Series.quantile`` with nans (also shows up in ``.median()`` and ``.describe()``); furthermore now names the ``Series`` with the quantile (:issue:`13098`, :issue:`13146`)
 
diff --git a/pandas/core/base.py b/pandas/core/base.py
index 1a812ba2e..36f1f24fe 100644
--- a/pandas/core/base.py
+++ b/pandas/core/base.py
@@ -127,7 +127,7 @@ class PandasObject(StringMixin):
 
         # no memory_usage attribute, so fall back to
         # object's 'sizeof'
-        return super(self, PandasObject).__sizeof__()
+        return super(PandasObject, self).__sizeof__()
 
 
 class NoNewAttributesMixin(object):
diff --git a/pandas/tests/test_base.py b/pandas/tests/test_base.py
index 2fec7c591..2b28e3b6e 100644
--- a/pandas/tests/test_base.py
+++ b/pandas/tests/test_base.py
@@ -147,42 +147,46 @@ class TestFrozenNDArray(CheckImmutable, CheckStringMixin, tm.TestCase):
 
 class TestPandasDelegate(tm.TestCase):
 
-    def setUp(self):
-        pass
+    class Delegator(object):
+        _properties = ['foo']
+        _methods = ['bar']
 
-    def test_invalida_delgation(self):
-        # these show that in order for the delegation to work
-        # the _delegate_* methods need to be overriden to not raise a TypeError
+        def _set_foo(self, value):
+            self.foo = value
 
-        class Delegator(object):
-            _properties = ['foo']
-            _methods = ['bar']
+        def _get_foo(self):
+            return self.foo
 
-            def _set_foo(self, value):
-                self.foo = value
+        foo = property(_get_foo, _set_foo, doc="foo property")
 
-            def _get_foo(self):
-                return self.foo
+        def bar(self, *args, **kwargs):
+            """ a test bar method """
+            pass
 
-            foo = property(_get_foo, _set_foo, doc="foo property")
+    class Delegate(PandasDelegate):
 
-            def bar(self, *args, **kwargs):
-                """ a test bar method """
-                pass
+        def __init__(self, obj):
+            self.obj = obj
 
-        class Delegate(PandasDelegate):
+    def setUp(self):
+        pass
 
-            def __init__(self, obj):
-                self.obj = obj
+    def test_invalida_delgation(self):
+        # these show that in order for the delegation to work
+        # the _delegate_* methods need to be overriden to not raise a TypeError
 
-        Delegate._add_delegate_accessors(delegate=Delegator,
-                                         accessors=Delegator._properties,
-                                         typ='property')
-        Delegate._add_delegate_accessors(delegate=Delegator,
-                                         accessors=Delegator._methods,
-                                         typ='method')
+        self.Delegate._add_delegate_accessors(
+            delegate=self.Delegator,
+            accessors=self.Delegator._properties,
+            typ='property'
+        )
+        self.Delegate._add_delegate_accessors(
+            delegate=self.Delegator,
+            accessors=self.Delegator._methods,
+            typ='method'
+        )
 
-        delegate = Delegate(Delegator())
+        delegate = self.Delegate(self.Delegator())
 
         def f():
             delegate.foo
@@ -199,6 +203,13 @@ class TestPandasDelegate(tm.TestCase):
 
         self.assertRaises(TypeError, f)
 
+    def test_memory_usage(self):
+        # Delegate does not implement memory_usage.
+        # Check that we fall back to in-built `__sizeof__`
+        # GH 12924
+        delegate = self.Delegate(self.Delegator())
+        sys.getsizeof(delegate)
+
 
 class Ops(tm.TestCase):
 
