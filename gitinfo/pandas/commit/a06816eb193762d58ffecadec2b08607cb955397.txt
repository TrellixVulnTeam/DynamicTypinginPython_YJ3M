commit a06816eb193762d58ffecadec2b08607cb955397
Author: Guillaume Poulin <poulin.guillaume@gmail.com>
Date:   Sun Mar 1 18:05:41 2015 -0500

    BUG: segfault on to_json serializing a 0d-ndarray, #9576

diff --git a/doc/source/whatsnew/v0.17.0.txt b/doc/source/whatsnew/v0.17.0.txt
index f6c06e5e0..b3d0ce25e 100644
--- a/doc/source/whatsnew/v0.17.0.txt
+++ b/doc/source/whatsnew/v0.17.0.txt
@@ -823,3 +823,4 @@ Bug Fixes
 - Bug in ``TimedeltaIndex`` formatter causing error while trying to save ``DataFrame`` with ``TimedeltaIndex`` using ``to_csv`` (:issue:`10833`)
 - Bug in ``DataFrame.where`` when handling Series slicing (:issue:`10218`, :issue:`9558`)
 - Bug where ``pd.read_gbq`` throws ``ValueError`` when Bigquery returns zero rows (:issue:`10273`)
+- Bug in ``to_json`` which was causing segmentation fault when serializing 0-rank ndarray (:issue:`9576`)
diff --git a/pandas/io/tests/test_json/test_ujson.py b/pandas/io/tests/test_json/test_ujson.py
index bc6e942b2..8e8a798b2 100644
--- a/pandas/io/tests/test_json/test_ujson.py
+++ b/pandas/io/tests/test_json/test_ujson.py
@@ -1035,6 +1035,12 @@ class NumpyJSONTests(TestCase):
         outp = ujson.decode(ujson.encode(arr), numpy=True, dtype=np.float32)
         assert_array_almost_equal_nulp(arr, outp)
 
+    def testOdArray(self):
+        def will_raise():
+            ujson.encode(np.array(1))
+
+        self.assertRaises(TypeError, will_raise)
+
     def testArrayNumpyExcept(self):
 
         input = ujson.dumps([42, {}, 'a'])
diff --git a/pandas/src/ujson/python/objToJSON.c b/pandas/src/ujson/python/objToJSON.c
index e31d8ab74..dcb509be6 100644
--- a/pandas/src/ujson/python/objToJSON.c
+++ b/pandas/src/ujson/python/objToJSON.c
@@ -1863,7 +1863,7 @@ void Object_beginTypeContext (JSOBJ _obj, JSONTypeContext *tc)
   }
   tc->prv = pc;
 
-  if (PyIter_Check(obj) || PyArray_Check(obj))
+  if (PyIter_Check(obj) || (PyArray_Check(obj) && !PyArray_CheckScalar(obj) ))
   {
     PRINTMARK();
     goto ISITERABLE;
@@ -2065,6 +2065,23 @@ void Object_beginTypeContext (JSOBJ _obj, JSONTypeContext *tc)
     pc->PyTypeToJSON = NpyFloatToDOUBLE; tc->type = JT_DOUBLE;
     return;
   }
+  else
+  if (PyArray_Check(obj) && PyArray_CheckScalar(obj)) {
+    #if PY_MAJOR_VERSION >= 3
+      PyErr_Format(
+        PyExc_TypeError,
+        "%R (0d array) is not JSON serializable at the moment",
+        obj
+      );
+    #else
+      PyErr_Format(
+        PyExc_TypeError,
+        "%s (0d array) is not JSON serializable at the moment",
+        PyString_AsString(PyObject_Repr(obj))
+      );
+    #endif
+    return;
+  }
 
 ISITERABLE:
 
