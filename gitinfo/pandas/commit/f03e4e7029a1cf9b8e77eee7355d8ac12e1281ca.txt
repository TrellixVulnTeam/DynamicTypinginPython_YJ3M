commit f03e4e7029a1cf9b8e77eee7355d8ac12e1281ca
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Aug 24 17:35:13 2011 -0400

    ENH: Factor refactoring (heh) and docs

diff --git a/pandas/core/index.py b/pandas/core/index.py
index 3476ce1d5..1fc102c79 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -307,6 +307,9 @@ class Index(np.ndarray):
 
         Examples
         --------
+        >>> indexer, mask = index.get_indexer(new_index)
+        >>> new_values = cur_values.take(indexer)
+        >>> new_values[-mask] = np.nan
 
         Returns
         -------
@@ -342,16 +345,18 @@ class Index(np.ndarray):
 
     def slice_locs(self, start=None, end=None):
         """
+        For an ordered Index, compute the slice locations for input labels
 
         Parameters
         ----------
-        start : label
+        start : label, default None
+            If None, defaults to the beginning
         end : label
-
+            If None, defaults to the end
 
         Returns
         -------
-        (begin, end) : tuple
+        (begin, end) : (int, int)
 
         Notes
         -----
@@ -374,11 +379,24 @@ class Index(np.ndarray):
         return beg_slice, end_slice
 
     def delete(self, loc):
+        """
+        Make new Index with passed location deleted
+
+        Returns
+        -------
+        new_index : Index
+        """
         arr = np.delete(np.asarray(self), loc)
         return Index(arr)
 
     def insert(self, loc, item):
         """
+        Make new Index inserting new item at location
+
+        Parameters
+        ----------
+        loc : int
+        item : object
 
         Returns
         -------
@@ -391,6 +409,17 @@ class Index(np.ndarray):
         return Index(new_index)
 
     def drop(self, labels):
+        """
+        Make new Index with passed list of labels deleted
+
+        Parameters
+        ----------
+        labels : array-like
+
+        Returns
+        -------
+        dropped : Index
+        """
         labels = np.asarray(list(labels), dtype=object)
         indexer, mask = self.get_indexer(labels)
         if not mask.all():
@@ -407,20 +436,35 @@ class DateIndex(Index):
     pass
 
 
-class Factor(object):
+class Factor(np.ndarray):
     """
     Represents a categorical variable in classic R / S-plus fashion
+
+    Parameters
+    ----------
+    data : array-like
+
+    Returns
+    -------
+    **Attributes**
+      * labels : ndarray
+      * levels : ndarray
     """
-    def __init__(self, labels, levels):
-        self.labels = labels
-        self.levels = levels
+    def __new__(cls, data):
+        data = np.asarray(data, dtype=object)
+        levels, factor = unique_with_labels(data)
+        factor = factor.view(Factor)
+        factor.levels = levels
+        return factor
 
-    @classmethod
-    def fromarray(cls, values):
-        values = np.asarray(values, dtype=object)
-        levels = Index(sorted(set(values)))
-        labels, _ = _tseries.getMergeVec(values, levels.indexMap)
-        return Factor(labels, levels=levels)
+    levels = None
+
+    def __array_finalize__(self, obj):
+        self.levels = getattr(obj, 'levels', None)
+
+    @property
+    def labels(self):
+        return self.view(np.ndarray)
 
     def asarray(self):
         return np.asarray(self.levels).take(self.labels)
@@ -438,9 +482,12 @@ class Factor(object):
             i = self.labels[key]
             return self.levels[i]
         else:
-            new_labels = self.labels[key]
-            return Factor(new_labels, self.levels)
+            return np.ndarray.__getitem__(self, key)
 
+def unique_with_labels(values):
+    uniques = Index(_tseries.fast_unique(values))
+    labels = _tseries.get_unique_labels(values, uniques.indexMap)
+    return uniques, labels
 
 class MultiIndex(Index):
     """
@@ -526,7 +573,7 @@ class MultiIndex(Index):
         levels = []
         labels = []
         for arr in arrays:
-            factor = Factor.fromarray(arr)
+            factor = Factor(arr)
             levels.append(factor.levels)
             labels.append(factor.labels)
 
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index e8656ce77..cc907ad46 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -1034,8 +1034,8 @@ class LongPanel(Panel, DataFrame):
         for col in exclude:
             del data[col]
 
-        major = Factor.fromarray(data.pop(major_field))
-        minor = Factor.fromarray(data.pop(minor_field))
+        major = Factor(data.pop(major_field))
+        minor = Factor(data.pop(minor_field))
         index = MultiIndex(levels=[major.levels, minor.levels],
                            labels=[major.labels, minor.labels])
         return LongPanel(data, index=index)
@@ -1490,20 +1490,16 @@ def make_mask(index):
     return mask
 
 def _make_long_index(major_values, minor_values):
+    from pandas.core.index import unique_with_labels
     major_values = np.asarray(major_values, dtype=object)
     minor_values = np.asarray(minor_values, dtype=object)
-    major_axis, major_labels = _better_unique(major_values)
-    minor_axis, minor_labels = _better_unique(minor_values)
+    major_axis, major_labels = unique_with_labels(major_values)
+    minor_axis, minor_labels = unique_with_labels(minor_values)
 
     long_index = MultiIndex(levels=[major_axis, minor_axis],
                                  labels=[major_labels, minor_labels])
     return long_index
 
-def _better_unique(values):
-    uniques = Index(_tseries.fast_unique(values))
-    labels = _tseries.get_unique_labels(values, uniques.indexMap)
-    return uniques, labels
-
 def _slow_pivot(index, columns, values):
     """
     Produce 'pivot' table based on 3 columns of this DataFrame.
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 3026d4fdb..3176a0d60 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -652,8 +652,7 @@ class TestMultiIndex(unittest.TestCase):
 class TestFactor(unittest.TestCase):
 
     def setUp(self):
-        self.factor = Factor.fromarray(['a', 'b', 'b', 'a',
-                                        'a', 'c', 'c', 'c'])
+        self.factor = Factor(['a', 'b', 'b', 'a', 'a', 'c', 'c', 'c'])
 
     def test_getitem(self):
         self.assertEqual(self.factor[0], 'a')
