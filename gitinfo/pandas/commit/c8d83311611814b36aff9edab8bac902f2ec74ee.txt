commit c8d83311611814b36aff9edab8bac902f2ec74ee
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Sat Feb 17 12:47:18 2018 -0800

    TST: Parametrize PeriodIndex tests (#19659)
    
    * fixup formatting
    
    * parametrize PeriodIndex tests
    
    * fixup typo
    
    * put lists of params at module level
    
    * make fixtures
    
    * docstrings for fixtures
    
    * requested docstring

diff --git a/pandas/tests/indexes/period/test_arithmetic.py b/pandas/tests/indexes/period/test_arithmetic.py
index 81171920f..5f8f9533e 100644
--- a/pandas/tests/indexes/period/test_arithmetic.py
+++ b/pandas/tests/indexes/period/test_arithmetic.py
@@ -11,7 +11,81 @@ from pandas import (Timedelta,
 import pandas.core.indexes.period as period
 
 
+_common_mismatch = [pd.offsets.YearBegin(2),
+                    pd.offsets.MonthBegin(1),
+                    pd.offsets.Minute()]
+
+
+@pytest.fixture(params=[timedelta(minutes=30),
+                        np.timedelta64(30, 's'),
+                        Timedelta(seconds=30)] + _common_mismatch)
+def not_hourly(request):
+    """
+    Several timedelta-like and DateOffset instances that are _not_
+    compatible with Hourly frequencies.
+    """
+    return request.param
+
+
+@pytest.fixture(params=[np.timedelta64(4, 'h'),
+                        timedelta(hours=23),
+                        Timedelta('23:00:00')] + _common_mismatch)
+def not_daily(request):
+    """
+    Several timedelta-like and DateOffset instances that are _not_
+    compatible with Daily frequencies.
+    """
+    return request.param
+
+
+@pytest.fixture(params=[np.timedelta64(365, 'D'),
+                        timedelta(365),
+                        Timedelta(days=365)] + _common_mismatch)
+def mismatched(request):
+    """
+    Several timedelta-like and DateOffset instances that are _not_
+    compatible with Monthly or Annual frequencies.
+    """
+    return request.param
+
+
+@pytest.fixture(params=[pd.offsets.Day(3),
+                        timedelta(days=3),
+                        np.timedelta64(3, 'D'),
+                        pd.offsets.Hour(72),
+                        timedelta(minutes=60 * 24 * 3),
+                        np.timedelta64(72, 'h'),
+                        Timedelta('72:00:00')])
+def three_days(request):
+    """
+    Several timedelta-like and DateOffset objects that each represent
+    a 3-day timedelta
+    """
+    return request.param
+
+
+@pytest.fixture(params=[pd.offsets.Hour(2),
+                        timedelta(hours=2),
+                        np.timedelta64(2, 'h'),
+                        pd.offsets.Minute(120),
+                        timedelta(minutes=120),
+                        np.timedelta64(120, 'm')])
+def two_hours(request):
+    """
+    Several timedelta-like and DateOffset objects that each represent
+    a 2-hour timedelta
+    """
+    return request.param
+
+
 class TestPeriodIndexComparisons(object):
+    def test_pi_cmp_period(self):
+        idx = period_range('2007-01', periods=20, freq='M')
+
+        result = idx < idx[10]
+        exp = idx.values < idx.values[10]
+        tm.assert_numpy_array_equal(result, exp)
+
     @pytest.mark.parametrize('freq', ['M', '2M', '3M'])
     def test_pi_cmp_pi(self, freq):
         base = PeriodIndex(['2011-01', '2011-02', '2011-03', '2011-04'],
@@ -148,32 +222,35 @@ class TestPeriodIndexComparisons(object):
             idx1 == diff
 
     # TODO: De-duplicate with test_pi_cmp_nat
-    def test_comp_nat(self):
+    @pytest.mark.parametrize('dtype', [object, None])
+    def test_comp_nat(self, dtype):
         left = pd.PeriodIndex([pd.Period('2011-01-01'), pd.NaT,
                                pd.Period('2011-01-03')])
         right = pd.PeriodIndex([pd.NaT, pd.NaT, pd.Period('2011-01-03')])
 
-        for lhs, rhs in [(left, right),
-                         (left.astype(object), right.astype(object))]:
-            result = lhs == rhs
-            expected = np.array([False, False, True])
-            tm.assert_numpy_array_equal(result, expected)
+        if dtype is not None:
+            left = left.astype(dtype)
+            right = right.astype(dtype)
 
-            result = lhs != rhs
-            expected = np.array([True, True, False])
-            tm.assert_numpy_array_equal(result, expected)
+        result = left == right
+        expected = np.array([False, False, True])
+        tm.assert_numpy_array_equal(result, expected)
+
+        result = left != right
+        expected = np.array([True, True, False])
+        tm.assert_numpy_array_equal(result, expected)
 
-            expected = np.array([False, False, False])
-            tm.assert_numpy_array_equal(lhs == pd.NaT, expected)
-            tm.assert_numpy_array_equal(pd.NaT == rhs, expected)
+        expected = np.array([False, False, False])
+        tm.assert_numpy_array_equal(left == pd.NaT, expected)
+        tm.assert_numpy_array_equal(pd.NaT == right, expected)
 
-            expected = np.array([True, True, True])
-            tm.assert_numpy_array_equal(lhs != pd.NaT, expected)
-            tm.assert_numpy_array_equal(pd.NaT != lhs, expected)
+        expected = np.array([True, True, True])
+        tm.assert_numpy_array_equal(left != pd.NaT, expected)
+        tm.assert_numpy_array_equal(pd.NaT != left, expected)
 
-            expected = np.array([False, False, False])
-            tm.assert_numpy_array_equal(lhs < pd.NaT, expected)
-            tm.assert_numpy_array_equal(pd.NaT > lhs, expected)
+        expected = np.array([False, False, False])
+        tm.assert_numpy_array_equal(left < pd.NaT, expected)
+        tm.assert_numpy_array_equal(pd.NaT > left, expected)
 
 
 class TestPeriodIndexArithmetic(object):
@@ -203,7 +280,7 @@ class TestPeriodIndexArithmetic(object):
         expected = pd.PeriodIndex([pd.Period('2015Q2'), pd.Period('2015Q4')])
         tm.assert_index_equal(res, expected)
 
-    def test_add_iadd(self):
+    def test_pi_add_iadd_pi_raises(self):
         rng = pd.period_range('1/1/2000', freq='D', periods=5)
         other = pd.period_range('1/6/2000', freq='D', periods=5)
 
@@ -214,89 +291,7 @@ class TestPeriodIndexArithmetic(object):
         with pytest.raises(TypeError):
             rng += other
 
-        # offset
-        # DateOffset
-        rng = pd.period_range('2014', '2024', freq='A')
-        result = rng + pd.offsets.YearEnd(5)
-        expected = pd.period_range('2019', '2029', freq='A')
-        tm.assert_index_equal(result, expected)
-        rng += pd.offsets.YearEnd(5)
-        tm.assert_index_equal(rng, expected)
-
-        for o in [pd.offsets.YearBegin(2), pd.offsets.MonthBegin(1),
-                  pd.offsets.Minute(), np.timedelta64(365, 'D'),
-                  timedelta(365), Timedelta(days=365)]:
-            msg = ('Input has different freq(=.+)? '
-                   'from PeriodIndex\\(freq=A-DEC\\)')
-            with tm.assert_raises_regex(
-                    period.IncompatibleFrequency, msg):
-                rng + o
-
-        rng = pd.period_range('2014-01', '2016-12', freq='M')
-        result = rng + pd.offsets.MonthEnd(5)
-        expected = pd.period_range('2014-06', '2017-05', freq='M')
-        tm.assert_index_equal(result, expected)
-        rng += pd.offsets.MonthEnd(5)
-        tm.assert_index_equal(rng, expected)
-
-        for o in [pd.offsets.YearBegin(2), pd.offsets.MonthBegin(1),
-                  pd.offsets.Minute(), np.timedelta64(365, 'D'),
-                  timedelta(365), Timedelta(days=365)]:
-            rng = pd.period_range('2014-01', '2016-12', freq='M')
-            msg = 'Input has different freq(=.+)? from PeriodIndex\\(freq=M\\)'
-            with tm.assert_raises_regex(
-                    period.IncompatibleFrequency, msg):
-                rng + o
-
-        # Tick
-        offsets = [pd.offsets.Day(3), timedelta(days=3),
-                   np.timedelta64(3, 'D'), pd.offsets.Hour(72),
-                   timedelta(minutes=60 * 24 * 3), np.timedelta64(72, 'h'),
-                   Timedelta('72:00:00')]
-        for delta in offsets:
-            rng = pd.period_range('2014-05-01', '2014-05-15', freq='D')
-            result = rng + delta
-            expected = pd.period_range('2014-05-04', '2014-05-18', freq='D')
-            tm.assert_index_equal(result, expected)
-            rng += delta
-            tm.assert_index_equal(rng, expected)
-
-        for o in [pd.offsets.YearBegin(2), pd.offsets.MonthBegin(1),
-                  pd.offsets.Minute(), np.timedelta64(4, 'h'),
-                  timedelta(hours=23), Timedelta('23:00:00')]:
-            rng = pd.period_range('2014-05-01', '2014-05-15', freq='D')
-            msg = 'Input has different freq(=.+)? from PeriodIndex\\(freq=D\\)'
-            with tm.assert_raises_regex(
-                    period.IncompatibleFrequency, msg):
-                rng + o
-
-        offsets = [pd.offsets.Hour(2), timedelta(hours=2),
-                   np.timedelta64(2, 'h'), pd.offsets.Minute(120),
-                   timedelta(minutes=120), np.timedelta64(120, 'm'),
-                   Timedelta(minutes=120)]
-        for delta in offsets:
-            rng = pd.period_range('2014-01-01 10:00', '2014-01-05 10:00',
-                                  freq='H')
-            result = rng + delta
-            expected = pd.period_range('2014-01-01 12:00', '2014-01-05 12:00',
-                                       freq='H')
-            tm.assert_index_equal(result, expected)
-            rng += delta
-            tm.assert_index_equal(rng, expected)
-
-        for delta in [pd.offsets.YearBegin(2), timedelta(minutes=30),
-                      np.timedelta64(30, 's'), Timedelta(seconds=30)]:
-            rng = pd.period_range('2014-01-01 10:00', '2014-01-05 10:00',
-                                  freq='H')
-            msg = 'Input has different freq(=.+)? from PeriodIndex\\(freq=H\\)'
-            with tm.assert_raises_regex(
-                    period.IncompatibleFrequency, msg):
-                rng + delta
-            with tm.assert_raises_regex(
-                    period.IncompatibleFrequency, msg):
-                rng += delta
-
-    def test_pi_add_int(self, one):
+    def test_pi_add_iadd_int(self, one):
         # Variants of `one` for #19012
         rng = pd.period_range('2000-01-01 09:00', freq='H', periods=10)
         result = rng + one
@@ -305,16 +300,27 @@ class TestPeriodIndexArithmetic(object):
         rng += one
         tm.assert_index_equal(rng, expected)
 
+    def test_pi_sub_isub_int(self, one):
+        """
+        PeriodIndex.__sub__ and __isub__ with several representations of
+        the integer 1, e.g. int, long, np.int64, np.uint8, ...
+        """
+        rng = pd.period_range('2000-01-01 09:00', freq='H', periods=10)
+        result = rng - one
+        expected = pd.period_range('2000-01-01 08:00', freq='H', periods=10)
+        tm.assert_index_equal(result, expected)
+        rng -= one
+        tm.assert_index_equal(rng, expected)
+
     @pytest.mark.parametrize('five', [5, np.array(5, dtype=np.int64)])
-    def test_sub(self, five):
+    def test_pi_sub_intlike(self, five):
         rng = period_range('2007-01', periods=50)
 
         result = rng - five
         exp = rng + (-five)
         tm.assert_index_equal(result, exp)
 
-    def test_sub_isub(self):
-
+    def test_pi_sub_isub_pi_raises(self):
         # previously performed setop, now raises TypeError (GH14164)
         # TODO needs to wait on #13077 for decision on result type
         rng = pd.period_range('1/1/2000', freq='D', periods=5)
@@ -326,6 +332,7 @@ class TestPeriodIndexArithmetic(object):
         with pytest.raises(TypeError):
             rng -= other
 
+    def test_pi_sub_isub_offset(self):
         # offset
         # DateOffset
         rng = pd.period_range('2014', '2024', freq='A')
@@ -335,102 +342,165 @@ class TestPeriodIndexArithmetic(object):
         rng -= pd.offsets.YearEnd(5)
         tm.assert_index_equal(rng, expected)
 
-        for o in [pd.offsets.YearBegin(2), pd.offsets.MonthBegin(1),
-                  pd.offsets.Minute(), np.timedelta64(365, 'D'),
-                  timedelta(365)]:
-            rng = pd.period_range('2014', '2024', freq='A')
-            msg = ('Input has different freq(=.+)? '
-                   'from PeriodIndex\\(freq=A-DEC\\)')
-            with tm.assert_raises_regex(
-                    period.IncompatibleFrequency, msg):
-                rng - o
-
         rng = pd.period_range('2014-01', '2016-12', freq='M')
         result = rng - pd.offsets.MonthEnd(5)
         expected = pd.period_range('2013-08', '2016-07', freq='M')
         tm.assert_index_equal(result, expected)
+
         rng -= pd.offsets.MonthEnd(5)
         tm.assert_index_equal(rng, expected)
 
-        for o in [pd.offsets.YearBegin(2), pd.offsets.MonthBegin(1),
-                  pd.offsets.Minute(), np.timedelta64(365, 'D'),
-                  timedelta(365)]:
-            rng = pd.period_range('2014-01', '2016-12', freq='M')
-            msg = 'Input has different freq(=.+)? from PeriodIndex\\(freq=M\\)'
-            with tm.assert_raises_regex(
-                    period.IncompatibleFrequency, msg):
-                rng - o
+    # ---------------------------------------------------------------
+    # Timedelta-like (timedelta, timedelta64, Timedelta, Tick)
+    # TODO: Some of these are misnomers because of non-Tick DateOffsets
 
+    def test_pi_add_iadd_timedeltalike_daily(self, three_days):
         # Tick
-        offsets = [pd.offsets.Day(3), timedelta(days=3),
-                   np.timedelta64(3, 'D'), pd.offsets.Hour(72),
-                   timedelta(minutes=60 * 24 * 3), np.timedelta64(72, 'h')]
-        for delta in offsets:
-            rng = pd.period_range('2014-05-01', '2014-05-15', freq='D')
-            result = rng - delta
-            expected = pd.period_range('2014-04-28', '2014-05-12', freq='D')
-            tm.assert_index_equal(result, expected)
-            rng -= delta
-            tm.assert_index_equal(rng, expected)
-
-        for o in [pd.offsets.YearBegin(2), pd.offsets.MonthBegin(1),
-                  pd.offsets.Minute(), np.timedelta64(4, 'h'),
-                  timedelta(hours=23)]:
-            rng = pd.period_range('2014-05-01', '2014-05-15', freq='D')
-            msg = 'Input has different freq(=.+)? from PeriodIndex\\(freq=D\\)'
-            with tm.assert_raises_regex(
-                    period.IncompatibleFrequency, msg):
-                rng - o
-
-        offsets = [pd.offsets.Hour(2), timedelta(hours=2),
-                   np.timedelta64(2, 'h'), pd.offsets.Minute(120),
-                   timedelta(minutes=120), np.timedelta64(120, 'm')]
-        for delta in offsets:
-            rng = pd.period_range('2014-01-01 10:00', '2014-01-05 10:00',
-                                  freq='H')
-            result = rng - delta
-            expected = pd.period_range('2014-01-01 08:00', '2014-01-05 08:00',
-                                       freq='H')
-            tm.assert_index_equal(result, expected)
-            rng -= delta
-            tm.assert_index_equal(rng, expected)
-
-        for delta in [pd.offsets.YearBegin(2), timedelta(minutes=30),
-                      np.timedelta64(30, 's')]:
-            rng = pd.period_range('2014-01-01 10:00', '2014-01-05 10:00',
-                                  freq='H')
-            msg = 'Input has different freq(=.+)? from PeriodIndex\\(freq=H\\)'
-            with tm.assert_raises_regex(
-                    period.IncompatibleFrequency, msg):
-                rng + delta
-            with tm.assert_raises_regex(
-                    period.IncompatibleFrequency, msg):
-                rng += delta
-
-        # int
-        rng = pd.period_range('2000-01-01 09:00', freq='H', periods=10)
-        result = rng - 1
-        expected = pd.period_range('2000-01-01 08:00', freq='H', periods=10)
+        other = three_days
+        rng = pd.period_range('2014-05-01', '2014-05-15', freq='D')
+        expected = pd.period_range('2014-05-04', '2014-05-18', freq='D')
+
+        result = rng + other
+        tm.assert_index_equal(result, expected)
+
+        rng += other
+        tm.assert_index_equal(rng, expected)
+
+    def test_pi_sub_isub_timedeltalike_daily(self, three_days):
+        # Tick-like 3 Days
+        other = three_days
+        rng = pd.period_range('2014-05-01', '2014-05-15', freq='D')
+        expected = pd.period_range('2014-04-28', '2014-05-12', freq='D')
+
+        result = rng - other
+        tm.assert_index_equal(result, expected)
+
+        rng -= other
+        tm.assert_index_equal(rng, expected)
+
+    def test_pi_add_iadd_timedeltalike_freq_mismatch_daily(self, not_daily):
+        other = not_daily
+        rng = pd.period_range('2014-05-01', '2014-05-15', freq='D')
+        msg = 'Input has different freq(=.+)? from PeriodIndex\\(freq=D\\)'
+        with tm.assert_raises_regex(period.IncompatibleFrequency, msg):
+            rng + other
+        with tm.assert_raises_regex(period.IncompatibleFrequency, msg):
+            rng += other
+
+    def test_pi_sub_timedeltalike_freq_mismatch_daily(self, not_daily):
+        other = not_daily
+        rng = pd.period_range('2014-05-01', '2014-05-15', freq='D')
+        msg = 'Input has different freq(=.+)? from PeriodIndex\\(freq=D\\)'
+        with tm.assert_raises_regex(period.IncompatibleFrequency, msg):
+            rng - other
+
+    def test_pi_add_iadd_timedeltalike_hourly(self, two_hours):
+        other = two_hours
+        rng = pd.period_range('2014-01-01 10:00', '2014-01-05 10:00', freq='H')
+        expected = pd.period_range('2014-01-01 12:00', '2014-01-05 12:00',
+                                   freq='H')
+
+        result = rng + other
+        tm.assert_index_equal(result, expected)
+
+        rng += other
+        tm.assert_index_equal(rng, expected)
+
+    def test_pi_add_timedeltalike_mismatched_freq_hourly(self, not_hourly):
+        other = not_hourly
+        rng = pd.period_range('2014-01-01 10:00', '2014-01-05 10:00', freq='H')
+        msg = 'Input has different freq(=.+)? from PeriodIndex\\(freq=H\\)'
+
+        with tm.assert_raises_regex(period.IncompatibleFrequency, msg):
+            rng + other
+
+        with tm.assert_raises_regex(period.IncompatibleFrequency, msg):
+            rng += other
+
+    def test_pi_sub_isub_timedeltalike_hourly(self, two_hours):
+        other = two_hours
+        rng = pd.period_range('2014-01-01 10:00', '2014-01-05 10:00', freq='H')
+        expected = pd.period_range('2014-01-01 08:00', '2014-01-05 08:00',
+                                   freq='H')
+
+        result = rng - other
+        tm.assert_index_equal(result, expected)
+
+        rng -= other
+        tm.assert_index_equal(rng, expected)
+
+    def test_add_iadd_timedeltalike_annual(self):
+        # offset
+        # DateOffset
+        rng = pd.period_range('2014', '2024', freq='A')
+        result = rng + pd.offsets.YearEnd(5)
+        expected = pd.period_range('2019', '2029', freq='A')
+        tm.assert_index_equal(result, expected)
+        rng += pd.offsets.YearEnd(5)
+        tm.assert_index_equal(rng, expected)
+
+    def test_pi_add_iadd_timedeltalike_freq_mismatch_annual(self, mismatched):
+        other = mismatched
+        rng = pd.period_range('2014', '2024', freq='A')
+        msg = ('Input has different freq(=.+)? '
+               'from PeriodIndex\\(freq=A-DEC\\)')
+        with tm.assert_raises_regex(period.IncompatibleFrequency, msg):
+            rng + other
+        with tm.assert_raises_regex(period.IncompatibleFrequency, msg):
+            rng += other
+
+    def test_pi_sub_isub_timedeltalike_freq_mismatch_annual(self, mismatched):
+        other = mismatched
+        rng = pd.period_range('2014', '2024', freq='A')
+        msg = ('Input has different freq(=.+)? '
+               'from PeriodIndex\\(freq=A-DEC\\)')
+        with tm.assert_raises_regex(period.IncompatibleFrequency, msg):
+            rng - other
+        with tm.assert_raises_regex(period.IncompatibleFrequency, msg):
+            rng -= other
+
+    def test_pi_add_iadd_timedeltalike_M(self):
+        rng = pd.period_range('2014-01', '2016-12', freq='M')
+        expected = pd.period_range('2014-06', '2017-05', freq='M')
+
+        result = rng + pd.offsets.MonthEnd(5)
         tm.assert_index_equal(result, expected)
-        rng -= 1
+
+        rng += pd.offsets.MonthEnd(5)
         tm.assert_index_equal(rng, expected)
 
+    def test_pi_add_iadd_timedeltalike_freq_mismatch_monthly(self, mismatched):
+        other = mismatched
+        rng = pd.period_range('2014-01', '2016-12', freq='M')
+        msg = 'Input has different freq(=.+)? from PeriodIndex\\(freq=M\\)'
+        with tm.assert_raises_regex(period.IncompatibleFrequency, msg):
+            rng + other
+        with tm.assert_raises_regex(period.IncompatibleFrequency, msg):
+            rng += other
+
+    def test_pi_sub_isub_timedeltalike_freq_mismatch_monthly(self, mismatched):
+        other = mismatched
+        rng = pd.period_range('2014-01', '2016-12', freq='M')
+        msg = 'Input has different freq(=.+)? from PeriodIndex\\(freq=M\\)'
+        with tm.assert_raises_regex(period.IncompatibleFrequency, msg):
+            rng - other
+        with tm.assert_raises_regex(period.IncompatibleFrequency, msg):
+            rng -= other
+
     # ---------------------------------------------------------------
     # PeriodIndex.shift is used by __add__ and __sub__
 
     def test_pi_shift_ndarray(self):
-        idx = PeriodIndex(['2011-01', '2011-02', 'NaT',
-                           '2011-04'], freq='M', name='idx')
+        idx = PeriodIndex(['2011-01', '2011-02', 'NaT', '2011-04'],
+                          freq='M', name='idx')
         result = idx.shift(np.array([1, 2, 3, 4]))
-        expected = PeriodIndex(['2011-02', '2011-04', 'NaT',
-                                '2011-08'], freq='M', name='idx')
+        expected = PeriodIndex(['2011-02', '2011-04', 'NaT', '2011-08'],
+                               freq='M', name='idx')
         tm.assert_index_equal(result, expected)
 
-        idx = PeriodIndex(['2011-01', '2011-02', 'NaT',
-                           '2011-04'], freq='M', name='idx')
         result = idx.shift(np.array([1, -2, 3, -4]))
-        expected = PeriodIndex(['2011-02', '2010-12', 'NaT',
-                                '2010-12'], freq='M', name='idx')
+        expected = PeriodIndex(['2011-02', '2010-12', 'NaT', '2010-12'],
+                               freq='M', name='idx')
         tm.assert_index_equal(result, expected)
 
     def test_shift(self):
@@ -489,11 +559,11 @@ class TestPeriodIndexArithmetic(object):
         tm.assert_index_equal(idx.shift(-3), exp)
 
     def test_shift_nat(self):
-        idx = PeriodIndex(['2011-01', '2011-02', 'NaT',
-                           '2011-04'], freq='M', name='idx')
+        idx = PeriodIndex(['2011-01', '2011-02', 'NaT', '2011-04'],
+                          freq='M', name='idx')
         result = idx.shift(1)
-        expected = PeriodIndex(['2011-02', '2011-03', 'NaT',
-                                '2011-05'], freq='M', name='idx')
+        expected = PeriodIndex(['2011-02', '2011-03', 'NaT', '2011-05'],
+                               freq='M', name='idx')
         tm.assert_index_equal(result, expected)
         assert result.name == expected.name
 
@@ -519,18 +589,18 @@ class TestPeriodIndexSeriesMethods(object):
             # comp op results in bool
             tm.assert_numpy_array_equal(result, expected)
 
-        s = pd.Series(values)
-        result = func(s)
+        ser = pd.Series(values)
+        result = func(ser)
 
         exp = pd.Series(expected, name=values.name)
         tm.assert_series_equal(result, exp)
 
     def test_pi_ops(self):
-        idx = PeriodIndex(['2011-01', '2011-02', '2011-03',
-                           '2011-04'], freq='M', name='idx')
+        idx = PeriodIndex(['2011-01', '2011-02', '2011-03', '2011-04'],
+                          freq='M', name='idx')
 
-        expected = PeriodIndex(['2011-03', '2011-04',
-                                '2011-05', '2011-06'], freq='M', name='idx')
+        expected = PeriodIndex(['2011-03', '2011-04', '2011-05', '2011-06'],
+                               freq='M', name='idx')
         self._check(idx, lambda x: x + 2, expected)
         self._check(idx, lambda x: 2 + x, expected)
 
@@ -544,13 +614,13 @@ class TestPeriodIndexSeriesMethods(object):
         tm.assert_index_equal(result, exp)
 
     def test_pi_ops_errors(self):
-        idx = PeriodIndex(['2011-01', '2011-02', '2011-03',
-                           '2011-04'], freq='M', name='idx')
-        s = pd.Series(idx)
+        idx = PeriodIndex(['2011-01', '2011-02', '2011-03', '2011-04'],
+                          freq='M', name='idx')
+        ser = pd.Series(idx)
 
         msg = r"unsupported operand type\(s\)"
 
-        for obj in [idx, s]:
+        for obj in [idx, ser]:
             for ng in ["str", 1.5]:
                 with tm.assert_raises_regex(TypeError, msg):
                     obj + ng
@@ -581,10 +651,10 @@ class TestPeriodIndexSeriesMethods(object):
                         np.subtract(ng, obj)
 
     def test_pi_ops_nat(self):
-        idx = PeriodIndex(['2011-01', '2011-02', 'NaT',
-                           '2011-04'], freq='M', name='idx')
-        expected = PeriodIndex(['2011-03', '2011-04',
-                                'NaT', '2011-06'], freq='M', name='idx')
+        idx = PeriodIndex(['2011-01', '2011-02', 'NaT', '2011-04'],
+                          freq='M', name='idx')
+        expected = PeriodIndex(['2011-03', '2011-04', 'NaT', '2011-06'],
+                               freq='M', name='idx')
         self._check(idx, lambda x: x + 2, expected)
         self._check(idx, lambda x: 2 + x, expected)
         self._check(idx, lambda x: np.add(x, 2), expected)
@@ -593,10 +663,10 @@ class TestPeriodIndexSeriesMethods(object):
         self._check(idx + 2, lambda x: np.subtract(x, 2), idx)
 
         # freq with mult
-        idx = PeriodIndex(['2011-01', '2011-02', 'NaT',
-                           '2011-04'], freq='2M', name='idx')
-        expected = PeriodIndex(['2011-07', '2011-08',
-                                'NaT', '2011-10'], freq='2M', name='idx')
+        idx = PeriodIndex(['2011-01', '2011-02', 'NaT', '2011-04'],
+                          freq='2M', name='idx')
+        expected = PeriodIndex(['2011-07', '2011-08', 'NaT', '2011-10'],
+                               freq='2M', name='idx')
         self._check(idx, lambda x: x + 3, expected)
         self._check(idx, lambda x: 3 + x, expected)
         self._check(idx, lambda x: np.add(x, 3), expected)
@@ -605,26 +675,26 @@ class TestPeriodIndexSeriesMethods(object):
         self._check(idx + 3, lambda x: np.subtract(x, 3), idx)
 
     def test_pi_ops_array_int(self):
-        idx = PeriodIndex(['2011-01', '2011-02', 'NaT',
-                           '2011-04'], freq='M', name='idx')
+        idx = PeriodIndex(['2011-01', '2011-02', 'NaT', '2011-04'],
+                          freq='M', name='idx')
         f = lambda x: x + np.array([1, 2, 3, 4])
-        exp = PeriodIndex(['2011-02', '2011-04', 'NaT',
-                           '2011-08'], freq='M', name='idx')
+        exp = PeriodIndex(['2011-02', '2011-04', 'NaT', '2011-08'],
+                          freq='M', name='idx')
         self._check(idx, f, exp)
 
         f = lambda x: np.add(x, np.array([4, -1, 1, 2]))
-        exp = PeriodIndex(['2011-05', '2011-01', 'NaT',
-                           '2011-06'], freq='M', name='idx')
+        exp = PeriodIndex(['2011-05', '2011-01', 'NaT', '2011-06'],
+                          freq='M', name='idx')
         self._check(idx, f, exp)
 
         f = lambda x: x - np.array([1, 2, 3, 4])
-        exp = PeriodIndex(['2010-12', '2010-12', 'NaT',
-                           '2010-12'], freq='M', name='idx')
+        exp = PeriodIndex(['2010-12', '2010-12', 'NaT', '2010-12'],
+                          freq='M', name='idx')
         self._check(idx, f, exp)
 
         f = lambda x: np.subtract(x, np.array([3, 2, 3, -2]))
-        exp = PeriodIndex(['2010-10', '2010-12', 'NaT',
-                           '2011-06'], freq='M', name='idx')
+        exp = PeriodIndex(['2010-10', '2010-12', 'NaT', '2011-06'],
+                          freq='M', name='idx')
         self._check(idx, f, exp)
 
     def test_pi_ops_offset(self):
@@ -648,29 +718,26 @@ class TestPeriodIndexSeriesMethods(object):
     def test_pi_offset_errors(self):
         idx = PeriodIndex(['2011-01-01', '2011-02-01', '2011-03-01',
                            '2011-04-01'], freq='D', name='idx')
-        s = pd.Series(idx)
+        ser = pd.Series(idx)
 
         # Series op is applied per Period instance, thus error is raised
         # from Period
         msg_idx = r"Input has different freq from PeriodIndex\(freq=D\)"
         msg_s = r"Input cannot be converted to Period\(freq=D\)"
-        for obj, msg in [(idx, msg_idx), (s, msg_s)]:
-            with tm.assert_raises_regex(
-                    period.IncompatibleFrequency, msg):
+        for obj, msg in [(idx, msg_idx), (ser, msg_s)]:
+            with tm.assert_raises_regex(period.IncompatibleFrequency, msg):
                 obj + pd.offsets.Hour(2)
 
-            with tm.assert_raises_regex(
-                    period.IncompatibleFrequency, msg):
+            with tm.assert_raises_regex(period.IncompatibleFrequency, msg):
                 pd.offsets.Hour(2) + obj
 
-            with tm.assert_raises_regex(
-                    period.IncompatibleFrequency, msg):
+            with tm.assert_raises_regex(period.IncompatibleFrequency, msg):
                 obj - pd.offsets.Hour(2)
 
     def test_pi_sub_period(self):
         # GH 13071
-        idx = PeriodIndex(['2011-01', '2011-02', '2011-03',
-                           '2011-04'], freq='M', name='idx')
+        idx = PeriodIndex(['2011-01', '2011-02', '2011-03', '2011-04'],
+                          freq='M', name='idx')
 
         result = idx - pd.Period('2012-01', freq='M')
         exp = pd.Index([-12, -11, -10, -9], name='idx')
@@ -695,16 +762,16 @@ class TestPeriodIndexSeriesMethods(object):
 
     def test_pi_sub_pdnat(self):
         # GH 13071
-        idx = PeriodIndex(['2011-01', '2011-02', 'NaT',
-                           '2011-04'], freq='M', name='idx')
+        idx = PeriodIndex(['2011-01', '2011-02', 'NaT', '2011-04'],
+                          freq='M', name='idx')
         exp = pd.TimedeltaIndex([pd.NaT] * 4, name='idx')
         tm.assert_index_equal(pd.NaT - idx, exp)
         tm.assert_index_equal(idx - pd.NaT, exp)
 
     def test_pi_sub_period_nat(self):
         # GH 13071
-        idx = PeriodIndex(['2011-01', 'NaT', '2011-03',
-                           '2011-04'], freq='M', name='idx')
+        idx = PeriodIndex(['2011-01', 'NaT', '2011-03', '2011-04'],
+                          freq='M', name='idx')
 
         result = idx - pd.Period('2012-01', freq='M')
         exp = pd.Index([-12, np.nan, -10, -9], name='idx')
diff --git a/pandas/tests/indexes/period/test_astype.py b/pandas/tests/indexes/period/test_astype.py
new file mode 100644
index 000000000..f21264874
--- /dev/null
+++ b/pandas/tests/indexes/period/test_astype.py
@@ -0,0 +1,99 @@
+# -*- coding: utf-8 -*-
+
+import numpy as np
+import pytest
+
+import pandas as pd
+import pandas.util.testing as tm
+from pandas import NaT, Period, PeriodIndex, Int64Index, Index, period_range
+
+
+class TestPeriodIndexAsType(object):
+    @pytest.mark.parametrize('dtype', [
+        float, 'timedelta64', 'timedelta64[ns]'])
+    def test_astype_raises(self, dtype):
+        # GH#13149, GH#13209
+        idx = PeriodIndex(['2016-05-16', 'NaT', NaT, np.NaN], freq='D')
+        msg = 'Cannot cast PeriodIndex to dtype'
+        with tm.assert_raises_regex(TypeError, msg):
+            idx.astype(dtype)
+
+    def test_astype_conversion(self):
+        # GH#13149, GH#13209
+        idx = PeriodIndex(['2016-05-16', 'NaT', NaT, np.NaN], freq='D')
+
+        result = idx.astype(object)
+        expected = Index([Period('2016-05-16', freq='D')] +
+                         [Period(NaT, freq='D')] * 3, dtype='object')
+        tm.assert_index_equal(result, expected)
+
+        result = idx.astype(int)
+        expected = Int64Index([16937] + [-9223372036854775808] * 3,
+                              dtype=np.int64)
+        tm.assert_index_equal(result, expected)
+
+        result = idx.astype(str)
+        expected = Index(str(x) for x in idx)
+        tm.assert_index_equal(result, expected)
+
+        idx = period_range('1990', '2009', freq='A')
+        result = idx.astype('i8')
+        tm.assert_index_equal(result, Index(idx.asi8))
+        tm.assert_numpy_array_equal(result.values, idx.asi8)
+
+    def test_astype_object(self):
+        idx = pd.PeriodIndex([], freq='M')
+
+        exp = np.array([], dtype=object)
+        tm.assert_numpy_array_equal(idx.astype(object).values, exp)
+        tm.assert_numpy_array_equal(idx._mpl_repr(), exp)
+
+        idx = pd.PeriodIndex(['2011-01', pd.NaT], freq='M')
+
+        exp = np.array([pd.Period('2011-01', freq='M'), pd.NaT], dtype=object)
+        tm.assert_numpy_array_equal(idx.astype(object).values, exp)
+        tm.assert_numpy_array_equal(idx._mpl_repr(), exp)
+
+        exp = np.array([pd.Period('2011-01-01', freq='D'), pd.NaT],
+                       dtype=object)
+        idx = pd.PeriodIndex(['2011-01-01', pd.NaT], freq='D')
+        tm.assert_numpy_array_equal(idx.astype(object).values, exp)
+        tm.assert_numpy_array_equal(idx._mpl_repr(), exp)
+
+    # TODO: de-duplicate this version (from test_ops) with the one above
+    # (from test_period)
+    def test_astype_object2(self):
+        idx = pd.period_range(start='2013-01-01', periods=4, freq='M',
+                              name='idx')
+        expected_list = [pd.Period('2013-01-31', freq='M'),
+                         pd.Period('2013-02-28', freq='M'),
+                         pd.Period('2013-03-31', freq='M'),
+                         pd.Period('2013-04-30', freq='M')]
+        expected = pd.Index(expected_list, dtype=object, name='idx')
+        result = idx.astype(object)
+        assert isinstance(result, Index)
+        assert result.dtype == object
+        tm.assert_index_equal(result, expected)
+        assert result.name == expected.name
+        assert idx.tolist() == expected_list
+
+        idx = PeriodIndex(['2013-01-01', '2013-01-02', 'NaT',
+                           '2013-01-04'], freq='D', name='idx')
+        expected_list = [pd.Period('2013-01-01', freq='D'),
+                         pd.Period('2013-01-02', freq='D'),
+                         pd.Period('NaT', freq='D'),
+                         pd.Period('2013-01-04', freq='D')]
+        expected = pd.Index(expected_list, dtype=object, name='idx')
+        result = idx.astype(object)
+        assert isinstance(result, Index)
+        assert result.dtype == object
+        tm.assert_index_equal(result, expected)
+        for i in [0, 1, 3]:
+            assert result[i] == expected[i]
+        assert result[2] is pd.NaT
+        assert result.name == expected.name
+
+        result_list = idx.tolist()
+        for i in [0, 1, 3]:
+            assert result_list[i] == expected_list[i]
+        assert result_list[2] is pd.NaT
diff --git a/pandas/tests/indexes/period/test_ops.py b/pandas/tests/indexes/period/test_ops.py
index 8745de0c2..6c272864e 100644
--- a/pandas/tests/indexes/period/test_ops.py
+++ b/pandas/tests/indexes/period/test_ops.py
@@ -25,42 +25,6 @@ class TestPeriodIndexOps(Ops):
         self.check_ops_properties(PeriodIndex._object_ops, f)
         self.check_ops_properties(PeriodIndex._bool_ops, f)
 
-    def test_astype_object(self):
-        idx = pd.period_range(start='2013-01-01', periods=4, freq='M',
-                              name='idx')
-        expected_list = [pd.Period('2013-01-31', freq='M'),
-                         pd.Period('2013-02-28', freq='M'),
-                         pd.Period('2013-03-31', freq='M'),
-                         pd.Period('2013-04-30', freq='M')]
-        expected = pd.Index(expected_list, dtype=object, name='idx')
-        result = idx.astype(object)
-        assert isinstance(result, Index)
-        assert result.dtype == object
-        tm.assert_index_equal(result, expected)
-        assert result.name == expected.name
-        assert idx.tolist() == expected_list
-
-        idx = PeriodIndex(['2013-01-01', '2013-01-02', 'NaT',
-                           '2013-01-04'], freq='D', name='idx')
-        expected_list = [pd.Period('2013-01-01', freq='D'),
-                         pd.Period('2013-01-02', freq='D'),
-                         pd.Period('NaT', freq='D'),
-                         pd.Period('2013-01-04', freq='D')]
-        expected = pd.Index(expected_list, dtype=object, name='idx')
-        result = idx.astype(object)
-        assert isinstance(result, Index)
-        assert result.dtype == object
-        tm.assert_index_equal(result, expected)
-        for i in [0, 1, 3]:
-            assert result[i] == expected[i]
-        assert result[2] is pd.NaT
-        assert result.name == expected.name
-
-        result_list = idx.tolist()
-        for i in [0, 1, 3]:
-            assert result_list[i] == expected_list[i]
-        assert result_list[2] is pd.NaT
-
     def test_minmax(self):
 
         # monotonic
diff --git a/pandas/tests/indexes/period/test_period.py b/pandas/tests/indexes/period/test_period.py
index b3f059018..4c0c86592 100644
--- a/pandas/tests/indexes/period/test_period.py
+++ b/pandas/tests/indexes/period/test_period.py
@@ -6,7 +6,7 @@ import pandas as pd
 import pandas.util._test_decorators as td
 from pandas.util import testing as tm
 from pandas import (PeriodIndex, period_range, notna, DatetimeIndex, NaT,
-                    Index, Period, Int64Index, Series, DataFrame, date_range,
+                    Index, Period, Series, DataFrame, date_range,
                     offsets)
 
 from ..datetimelike import DatetimeLike
@@ -24,38 +24,6 @@ class TestPeriodIndex(DatetimeLike):
     def create_index(self):
         return period_range('20130101', periods=5, freq='D')
 
-    def test_astype_conversion(self):
-        # GH 13149, GH 13209
-        idx = PeriodIndex(['2016-05-16', 'NaT', NaT, np.NaN], freq='D')
-
-        result = idx.astype(object)
-        expected = Index([Period('2016-05-16', freq='D')] +
-                         [Period(NaT, freq='D')] * 3, dtype='object')
-        tm.assert_index_equal(result, expected)
-
-        result = idx.astype(int)
-        expected = Int64Index([16937] + [-9223372036854775808] * 3,
-                              dtype=np.int64)
-        tm.assert_index_equal(result, expected)
-
-        result = idx.astype(str)
-        expected = Index(str(x) for x in idx)
-        tm.assert_index_equal(result, expected)
-
-        idx = period_range('1990', '2009', freq='A')
-        result = idx.astype('i8')
-        tm.assert_index_equal(result, Index(idx.asi8))
-        tm.assert_numpy_array_equal(result.values, idx.asi8)
-
-    @pytest.mark.parametrize('dtype', [
-        float, 'timedelta64', 'timedelta64[ns]'])
-    def test_astype_raises(self, dtype):
-        # GH 13149, GH 13209
-        idx = PeriodIndex(['2016-05-16', 'NaT', NaT, np.NaN], freq='D')
-        msg = 'Cannot cast PeriodIndex to dtype'
-        with tm.assert_raises_regex(TypeError, msg):
-            idx.astype(dtype)
-
     def test_pickle_compat_construction(self):
         pass
 
@@ -384,25 +352,6 @@ class TestPeriodIndex(DatetimeLike):
         tm.assert_numpy_array_equal(arr, exp_arr)
         tm.assert_index_equal(idx, exp_idx)
 
-    def test_astype_object(self):
-        idx = pd.PeriodIndex([], freq='M')
-
-        exp = np.array([], dtype=object)
-        tm.assert_numpy_array_equal(idx.astype(object).values, exp)
-        tm.assert_numpy_array_equal(idx._mpl_repr(), exp)
-
-        idx = pd.PeriodIndex(['2011-01', pd.NaT], freq='M')
-
-        exp = np.array([pd.Period('2011-01', freq='M'), pd.NaT], dtype=object)
-        tm.assert_numpy_array_equal(idx.astype(object).values, exp)
-        tm.assert_numpy_array_equal(idx._mpl_repr(), exp)
-
-        exp = np.array([pd.Period('2011-01-01', freq='D'), pd.NaT],
-                       dtype=object)
-        idx = pd.PeriodIndex(['2011-01-01', pd.NaT], freq='D')
-        tm.assert_numpy_array_equal(idx.astype(object).values, exp)
-        tm.assert_numpy_array_equal(idx._mpl_repr(), exp)
-
     def test_is_(self):
         create_index = lambda: PeriodIndex(freq='A', start='1/1/2001',
                                            end='12/1/2009')
@@ -421,13 +370,6 @@ class TestPeriodIndex(DatetimeLike):
         assert not index.is_(index - 2)
         assert not index.is_(index - 0)
 
-    def test_comp_period(self):
-        idx = period_range('2007-01', periods=20, freq='M')
-
-        result = idx < idx[10]
-        exp = idx.values < idx.values[10]
-        tm.assert_numpy_array_equal(result, exp)
-
     def test_contains(self):
         rng = period_range('2007-01', freq='M', periods=10)
 
