commit 6c27568f5d5b3ac2d547518a17781bcf61e6345d
Author: Ka Wo Chen <kawoc@tepper.cmu.edu>
Date:   Thu Jun 11 21:34:11 2015 -0400

    BUG: GH10332 where Panel.apply does not handle result with ndim=0 correctly

diff --git a/doc/source/whatsnew/v0.16.2.txt b/doc/source/whatsnew/v0.16.2.txt
index b4a1bc72e..8fea72089 100644
--- a/doc/source/whatsnew/v0.16.2.txt
+++ b/doc/source/whatsnew/v0.16.2.txt
@@ -169,3 +169,5 @@ Bug Fixes
 - Bug where MySQL interface could not handle numeric table/column names (:issue:`10255`)
 
 - Bug in ``read_csv`` with a ``date_parser`` that returned a ``datetime64`` array of other time resolution than ``[ns]`` (:issue:`10245`)
+
+- Bug in ``Panel.apply`` when the result has ndim = 0 (:issue:`10332`)
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 580510829..bc342d591 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -1093,14 +1093,10 @@ class Panel(NDFrame):
         # need to assume they are the same
         if ndim is None:
             if isinstance(result,dict):
-                ndim = getattr(list(compat.itervalues(result))[0],'ndim',None)
-
-                # a saclar result
-                if ndim is None:
-                    ndim = 0
+                ndim = getattr(list(compat.itervalues(result))[0],'ndim',0)
 
                 # have a dict, so top-level is +1 dim
-                else:
+                if ndim != 0:
                     ndim += 1
 
         # scalar
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index e86551c6b..529d3ed68 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -1233,6 +1233,25 @@ class TestPanel(tm.TestCase, PanelTests, CheckIndexing,
         expected = p.sum(0)
         assert_frame_equal(result,expected)
 
+    def test_apply_no_or_zero_ndim(self):
+        # GH10332
+        self.panel = Panel(np.random.rand(5, 5, 5))
+
+        result_int = self.panel.apply(lambda df: 0, axis=[1, 2])
+        result_float = self.panel.apply(lambda df: 0.0, axis=[1, 2])
+        result_int64 = self.panel.apply(lambda df: np.int64(0), axis=[1, 2])
+        result_float64 = self.panel.apply(lambda df: np.float64(0.0),
+                                          axis=[1, 2])
+
+        expected_int = expected_int64 = Series([0] * 5)
+        expected_float = expected_float64 = Series([0.0] * 5)
+
+        assert_series_equal(result_int, expected_int)
+        assert_series_equal(result_int64, expected_int64)
+        assert_series_equal(result_float, expected_float)
+        assert_series_equal(result_float64, expected_float64)
+
+
     def test_reindex(self):
         ref = self.panel['ItemB']
 
