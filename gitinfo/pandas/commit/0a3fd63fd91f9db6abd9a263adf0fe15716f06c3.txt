commit 0a3fd63fd91f9db6abd9a263adf0fe15716f06c3
Author: Chang She <changshe@gmail.com>
Date:   Mon Dec 3 12:46:34 2012 -0500

    ENH: args for strip/lstrip/rstrip #2411

diff --git a/.gitignore b/.gitignore
index eb26b3ced..fbf28ba50 100644
--- a/.gitignore
+++ b/.gitignore
@@ -25,4 +25,5 @@ pandas.egg-info
 *\#*\#
 .tox
 pandas/io/*.dat
-pandas/io/*.json
\ No newline at end of file
+pandas/io/*.json
+*.log
\ No newline at end of file
diff --git a/RELEASE.rst b/RELEASE.rst
index 0001c282b..e21020187 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -99,6 +99,7 @@ pandas 0.10.0
   - Implement ``value_vars`` in ``melt`` and add ``melt`` to pandas namespace
     (#2412)
   - Added boolean comparison operators to Panel
+  - Enable ``Series.str.strip/lstrip/rstrip`` methods to take an argument (#2411)
 
 **Bug fixes**
 
diff --git a/doc/source/v0.10.0.txt b/doc/source/v0.10.0.txt
index bbad64ba9..2c909a1b2 100644
--- a/doc/source/v0.10.0.txt
+++ b/doc/source/v0.10.0.txt
@@ -130,6 +130,8 @@ Adding experimental support for Panel4D and factory functions to create n-dimens
 
 
 
+- Enable ``Series.str.strip/lstrip/rstrip`` methods to take an argument (GH2411_)
+
 API changes
 ~~~~~~~~~~~
 
@@ -177,3 +179,4 @@ on GitHub for a complete list.
 .. _GH2224: https://github.com/pydata/pandas/issues/2224
 .. _GH2431: https://github.com/pydata/pandas/issues/2431
 .. _GH2412: https://github.com/pydata/pandas/issues/2412
+.. _GH2411: https://github.com/pydata/pandas/issues/2411
diff --git a/pandas/core/strings.py b/pandas/core/strings.py
index 4d9e4788c..6d96dba73 100644
--- a/pandas/core/strings.py
+++ b/pandas/core/strings.py
@@ -450,39 +450,51 @@ def str_slice_replace(arr, start=None, stop=None, repl=None):
     raise NotImplementedError
 
 
-def str_strip(arr):
+def str_strip(arr, to_strip=None):
     """
     Strip whitespace (including newlines) from each string in the array
 
+    Parameters
+    ----------
+    to_strip : str or unicode
+
     Returns
     -------
     stripped : array
     """
-    return _na_map(lambda x: x.strip(), arr)
+    return _na_map(lambda x: x.strip(to_strip), arr)
 
 
-def str_lstrip(arr):
+def str_lstrip(arr, to_strip=None):
     """
     Strip whitespace (including newlines) from left side of each string in the
     array
 
+    Parameters
+    ----------
+    to_strip : str or unicode
+
     Returns
     -------
     stripped : array
     """
-    return _na_map(lambda x: x.lstrip(), arr)
+    return _na_map(lambda x: x.lstrip(to_strip), arr)
 
 
-def str_rstrip(arr):
+def str_rstrip(arr, to_strip=None):
     """
     Strip whitespace (including newlines) from right side of each string in the
     array
 
+    Parameters
+    ----------
+    to_strip : str or unicode
+
     Returns
     -------
     stripped : array
     """
-    return _na_map(lambda x: x.rstrip(), arr)
+    return _na_map(lambda x: x.rstrip(to_strip), arr)
 
 
 def str_wrap(arr, width=80):
@@ -685,6 +697,21 @@ class StringMethods(object):
         result = str_encode(self.series, encoding, errors)
         return self._wrap_result(result)
 
+    @copy(str_strip)
+    def strip(self, to_strip=None):
+        result = str_strip(self.series, to_strip)
+        return self._wrap_result(result)
+
+    @copy(str_lstrip)
+    def lstrip(self, to_strip=None):
+        result = str_lstrip(self.series, to_strip)
+        return self._wrap_result(result)
+
+    @copy(str_rstrip)
+    def rstrip(self, to_strip=None):
+        result = str_rstrip(self.series, to_strip)
+        return self._wrap_result(result)
+
     count = _pat_wrapper(str_count, flags=True)
     startswith = _pat_wrapper(str_startswith, na=True)
     endswith = _pat_wrapper(str_endswith, na=True)
@@ -692,8 +719,5 @@ class StringMethods(object):
     match = _pat_wrapper(str_match, flags=True)
 
     len = _noarg_wrapper(str_len)
-    strip = _noarg_wrapper(str_strip)
-    rstrip = _noarg_wrapper(str_rstrip)
-    lstrip = _noarg_wrapper(str_lstrip)
     lower = _noarg_wrapper(str_lower)
     upper = _noarg_wrapper(str_upper)
diff --git a/pandas/tests/test_strings.py b/pandas/tests/test_strings.py
index beebb22c1..a9b5b908d 100644
--- a/pandas/tests/test_strings.py
+++ b/pandas/tests/test_strings.py
@@ -539,6 +539,7 @@ class TestStringMethods(unittest.TestCase):
         exp = Series(['  aa', ' bb', NA, 'cc'])
         tm.assert_series_equal(result, exp)
 
+    def test_strip_lstrip_rstrip_mixed(self):
         #mixed
         mixed = Series(['  aa  ', NA, ' bb \t\n', True, datetime.today(),
                         None, 1, 2.])
@@ -564,6 +565,7 @@ class TestStringMethods(unittest.TestCase):
         self.assert_(isinstance(rs, Series))
         tm.assert_almost_equal(rs, xp)
 
+    def test_strip_lstrip_rstrip_unicode(self):
         #unicode
         values = Series([u'  aa   ', u' bb \n', NA, u'cc  '])
 
@@ -579,6 +581,36 @@ class TestStringMethods(unittest.TestCase):
         exp = Series([u'  aa', u' bb', NA, u'cc'])
         tm.assert_series_equal(result, exp)
 
+    def test_strip_lstrip_rstrip_args(self):
+        values = Series(['xxABCxx', 'xx BNSD', 'LDFJH xx'])
+
+        rs = values.str.strip('x')
+        xp = Series(['ABC', ' BNSD', 'LDFJH '])
+        assert_series_equal(rs, xp)
+
+        rs = values.str.lstrip('x')
+        xp = Series(['ABCxx', ' BNSD', 'LDFJH xx'])
+        assert_series_equal(rs, xp)
+
+        rs = values.str.rstrip('x')
+        xp = Series(['xxABC', 'xx BNSD', 'LDFJH '])
+        assert_series_equal(rs, xp)
+
+    def test_strip_lstrip_rstrip_args_unicode(self):
+        values = Series([u'xxABCxx', u'xx BNSD', u'LDFJH xx'])
+
+        rs = values.str.strip(u'x')
+        xp = Series(['ABC', ' BNSD', 'LDFJH '])
+        assert_series_equal(rs, xp)
+
+        rs = values.str.lstrip(u'x')
+        xp = Series(['ABCxx', ' BNSD', 'LDFJH xx'])
+        assert_series_equal(rs, xp)
+
+        rs = values.str.rstrip(u'x')
+        xp = Series(['xxABC', 'xx BNSD', 'LDFJH '])
+        assert_series_equal(rs, xp)
+
     def test_wrap(self):
         pass
 
