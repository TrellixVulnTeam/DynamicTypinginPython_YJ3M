commit 05f339dbb036730c112d23d5da265447c8fd176a
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Oct 7 16:41:03 2011 -0400

    ENH: proper handling of name in stack, to_csv bugfixes with name/names

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 5386eefca..76d576f71 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -495,7 +495,17 @@ class DataFrame(NDFrame):
             if index:
                 # should write something for index label
                 if index_label is None:
-                    index_label = getattr(self.index, 'names', ['index'])
+                    if isinstance(self.index, MultiIndex):
+                        index_label = []
+                        for i, name in enumerate(self.index.names):
+                            if name is None:
+                                name = 'level_%d' % i
+                            index_label.append(name)
+                    else:
+                        if self.index.name is None:
+                            index_label = self.index.name
+                            if index_label is None:
+                                index_label = ['index']
                 elif not isinstance(index_label, (list, tuple, np.ndarray)):
                     # given a string for a DF with Index
                     index_label = [index_label]
@@ -1782,7 +1792,10 @@ class DataFrame(NDFrame):
 
         zipped = zip(self.index.levels, self.index.labels)
         for i, (lev, lab) in reversed(list(enumerate(zipped))):
-            new_obj.insert(0, names[i], np.asarray(lev).take(lab))
+            col_name = names[i]
+            if col_name is None:
+                col_name = 'level_%d' % i
+            new_obj.insert(0, col_name, np.asarray(lev).take(lab))
 
         new_obj.index = np.arange(len(new_obj))
 
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 77473e7ab..141ac1f72 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -815,11 +815,15 @@ class MultiIndex(Index):
         self.labels = [np.asarray(labs, dtype=np.int32) for labs in labels]
 
         if names is None:
-            self.names = ['level_%d' % i for i in range(self.nlevels)]
+            self.names = [None] * self.nlevels
         else:
             assert(len(names) == self.nlevels)
             self.names = list(names)
 
+        # # set the name
+        # for i, name in enumerate(self.names):
+        #     self.levels[i].name == name
+
         if sortorder is not None:
             self.sortorder = int(sortorder)
         else:
diff --git a/pandas/core/reshape.py b/pandas/core/reshape.py
index ba7fcef01..bee82f8cb 100644
--- a/pandas/core/reshape.py
+++ b/pandas/core/reshape.py
@@ -59,6 +59,9 @@ class _Unstacker(object):
         self.level = self.index._get_level_number(level)
 
         self.new_index_levels = list(index.levels)
+        self.new_index_names = list(index.names)
+
+        self.removed_name = self.new_index_names.pop(level)
         self.removed_level = self.new_index_levels.pop(level)
 
         v = self.level
@@ -158,17 +161,22 @@ class _Unstacker(object):
         propagator = np.repeat(np.arange(width), stride)
         if isinstance(self.value_columns, MultiIndex):
             new_levels = self.value_columns.levels + [self.removed_level]
+            new_names = self.value_columns.names + [self.removed_name]
+
             new_labels = [lab.take(propagator)
                           for lab in self.value_columns.labels]
             new_labels.append(np.tile(np.arange(stride), width))
         else:
             new_levels = [self.value_columns, self.removed_level]
+            new_names = [self.value_columns.name, self.removed_name]
+
             new_labels = []
 
             new_labels.append(propagator)
             new_labels.append(np.tile(np.arange(stride), width))
 
-        return MultiIndex(levels=new_levels, labels=new_labels)
+        return MultiIndex(levels=new_levels, labels=new_labels,
+                          names=new_names)
 
     def get_new_index(self):
         result_labels = []
@@ -178,9 +186,11 @@ class _Unstacker(object):
         # construct the new index
         if len(self.new_index_levels) == 1:
             new_index = self.new_index_levels[0].take(self.unique_groups)
+            new_index.name = self.new_index_names[0]
         else:
             new_index = MultiIndex(levels=self.new_index_levels,
-                                   labels=result_labels)
+                                   labels=result_labels,
+                                   names=self.new_index_names)
 
         return new_index
 
@@ -279,7 +289,6 @@ def stack(frame, level=-1, dropna=True):
     if isinstance(frame.columns, MultiIndex):
         return _stack_multi_columns(frame, level=level, dropna=True)
     elif isinstance(frame.index, MultiIndex):
-
         new_levels = list(frame.index.levels)
         new_levels.append(frame.columns)
 
@@ -287,14 +296,15 @@ def stack(frame, level=-1, dropna=True):
         new_labels.append(np.tile(np.arange(K), N).ravel())
 
         new_names = list(frame.index.names)
-        new_names.append('columns')
+        new_names.append(frame.columns.name)
         new_index = MultiIndex(levels=new_levels, labels=new_labels,
                                names=new_names)
     else:
         ilabels = np.arange(N).repeat(K)
         clabels = np.tile(np.arange(K), N).ravel()
         new_index = MultiIndex(levels=[frame.index, frame.columns],
-                               labels=[ilabels, clabels])
+                               labels=[ilabels, clabels],
+                               names=[frame.index.name, frame.columns.name])
 
     new_values = frame.values.ravel()
     if dropna:
@@ -359,7 +369,7 @@ def _stack_multi_columns(frame, level=-1, dropna=True):
     else:
         new_levels = [this.index]
         new_labels = [np.arange(N).repeat(levsize)]
-        new_names = ['index'] # something better?
+        new_names = [this.index.name] # something better?
 
     new_levels.append(frame.columns.levels[level])
     new_labels.append(np.tile(np.arange(levsize), N))
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index afe2fc29a..1d2fdaeb3 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -373,6 +373,14 @@ class TestMultiLevel(unittest.TestCase):
         assert_series_equal(restacked,
                             result.reindex(restacked.index).astype(float))
 
+    def test_stack_unstack_preserve_names(self):
+        unstacked = self.frame.unstack()
+        self.assertEquals(unstacked.index.name, 'first')
+        self.assertEquals(unstacked.columns.names, [None, 'second'])
+
+        restacked = unstacked.stack()
+        self.assertEquals(restacked.index.names, self.frame.index.names)
+
     def test_groupby_transform(self):
         s = self.frame['A']
         grouper = s.index.get_level_values(0)
