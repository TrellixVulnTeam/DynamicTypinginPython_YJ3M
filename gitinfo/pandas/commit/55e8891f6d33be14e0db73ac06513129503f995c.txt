commit 55e8891f6d33be14e0db73ac06513129503f995c
Author: rhshadrach <45562402+rhshadrach@users.noreply.github.com>
Date:   Mon May 25 18:07:50 2020 -0400

    BUG: Multiindexed series .at fix (#32520)

diff --git a/doc/source/whatsnew/v1.1.0.rst b/doc/source/whatsnew/v1.1.0.rst
index e427116f8..898d18af5 100644
--- a/doc/source/whatsnew/v1.1.0.rst
+++ b/doc/source/whatsnew/v1.1.0.rst
@@ -741,6 +741,7 @@ Indexing
 - Bug in :meth:`Series.__getitem__` allowing missing labels with ``np.ndarray``, :class:`Index`, :class:`Series` indexers but not ``list``, these now all raise ``KeyError`` (:issue:`33646`)
 - Bug in :meth:`DataFrame.truncate` and :meth:`Series.truncate` where index was assumed to be monotone increasing (:issue:`33756`)
 - Indexing with a list of strings representing datetimes failed on :class:`DatetimeIndex` or :class:`PeriodIndex`(:issue:`11278`)
+- Bug in :meth:`Series.at` when used with a :class:`MultiIndex` would raise an exception on valid inputs (:issue:`26989`)
 
 Missing
 ^^^^^^^
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index b857a5919..3a146bb04 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -2016,10 +2016,10 @@ class _ScalarAccessIndexer(_NDFrameIndexerBase):
 
         if not isinstance(key, tuple):
             key = _tuplify(self.ndim, key)
+        key = list(self._convert_key(key, is_setter=True))
         if len(key) != self.ndim:
             raise ValueError("Not enough indexers for scalar access (setting)!")
 
-        key = list(self._convert_key(key, is_setter=True))
         self.obj._set_value(*key, value=value, takeable=self._takeable)
 
 
@@ -2032,6 +2032,12 @@ class _AtIndexer(_ScalarAccessIndexer):
         Require they keys to be the same type as the index. (so we don't
         fallback)
         """
+        # GH 26989
+        # For series, unpacking key needs to result in the label.
+        # This is already the case for len(key) == 1; e.g. (1,)
+        if self.ndim == 1 and len(key) > 1:
+            key = (key,)
+
         # allow arbitrary setting
         if is_setter:
             return list(key)
diff --git a/pandas/tests/indexing/test_scalar.py b/pandas/tests/indexing/test_scalar.py
index 216d554e2..4337f01ea 100644
--- a/pandas/tests/indexing/test_scalar.py
+++ b/pandas/tests/indexing/test_scalar.py
@@ -351,3 +351,65 @@ def test_iat_series_with_period_index():
     expected = ser[index[0]]
     result = ser.iat[0]
     assert expected == result
+
+
+def test_at_with_tuple_index_get():
+    # GH 26989
+    # DataFrame.at getter works with Index of tuples
+    df = DataFrame({"a": [1, 2]}, index=[(1, 2), (3, 4)])
+    assert df.index.nlevels == 1
+    assert df.at[(1, 2), "a"] == 1
+
+    # Series.at getter works with Index of tuples
+    series = df["a"]
+    assert series.index.nlevels == 1
+    assert series.at[(1, 2)] == 1
+
+
+def test_at_with_tuple_index_set():
+    # GH 26989
+    # DataFrame.at setter works with Index of tuples
+    df = DataFrame({"a": [1, 2]}, index=[(1, 2), (3, 4)])
+    assert df.index.nlevels == 1
+    df.at[(1, 2), "a"] = 2
+    assert df.at[(1, 2), "a"] == 2
+
+    # Series.at setter works with Index of tuples
+    series = df["a"]
+    assert series.index.nlevels == 1
+    series.at[1, 2] = 3
+    assert series.at[1, 2] == 3
+
+
+def test_multiindex_at_get():
+    # GH 26989
+    # DataFrame.at and DataFrame.loc getter works with MultiIndex
+    df = DataFrame({"a": [1, 2]}, index=[[1, 2], [3, 4]])
+    assert df.index.nlevels == 2
+    assert df.at[(1, 3), "a"] == 1
+    assert df.loc[(1, 3), "a"] == 1
+
+    # Series.at and Series.loc getter works with MultiIndex
+    series = df["a"]
+    assert series.index.nlevels == 2
+    assert series.at[1, 3] == 1
+    assert series.loc[1, 3] == 1
+
+
+def test_multiindex_at_set():
+    # GH 26989
+    # DataFrame.at and DataFrame.loc setter works with MultiIndex
+    df = DataFrame({"a": [1, 2]}, index=[[1, 2], [3, 4]])
+    assert df.index.nlevels == 2
+    df.at[(1, 3), "a"] = 3
+    assert df.at[(1, 3), "a"] == 3
+    df.loc[(1, 3), "a"] = 4
+    assert df.loc[(1, 3), "a"] == 4
+
+    # Series.at and Series.loc setter works with MultiIndex
+    series = df["a"]
+    assert series.index.nlevels == 2
+    series.at[1, 3] = 5
+    assert series.at[1, 3] == 5
+    series.loc[1, 3] = 6
+    assert series.loc[1, 3] == 6
