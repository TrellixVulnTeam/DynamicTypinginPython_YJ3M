commit 1068a448574a7315a0deb8c36311d216bd7c568b
Author: jreback <jeff@reback.net>
Date:   Sat Feb 8 19:26:21 2014 -0500

    BUG: Raise a TypeError when trying to assign with a rhs of a multi-index of differeing levels (GH3738)

diff --git a/doc/source/indexing.rst b/doc/source/indexing.rst
index dff2fb517..2b1b238a0 100644
--- a/doc/source/indexing.rst
+++ b/doc/source/indexing.rst
@@ -1742,13 +1742,13 @@ As usual, **both sides** of the slicers are included as this is label indexing.
 
    .. code-block:: python
 
-      df.loc[(slice('A1','A3'),.....,:]
+      df.loc[(slice('A1','A3'),.....),:]
 
    rather than this:
 
    .. code-block:: python
 
-      df.loc[(slice('A1','A3'),.....]
+      df.loc[(slice('A1','A3'),.....)]
 
 .. warning::
 
diff --git a/doc/source/release.rst b/doc/source/release.rst
index 1e4b7756a..829a21f80 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -95,6 +95,7 @@ Bug Fixes
 - Issue with groupby ``agg`` with a single function and a a mixed-type frame (:issue:`6337`)
 - Bug in ``DataFrame.replace()`` when passing a non- ``bool``
   ``to_replace`` argument (:issue:`6332`)
+- Raise when trying to align on different levels of a multi-index assignment (:issue:`3738`)
 
 pandas 0.13.1
 -------------
diff --git a/doc/source/v0.14.0.txt b/doc/source/v0.14.0.txt
index 2dbfff694..5aa21710b 100644
--- a/doc/source/v0.14.0.txt
+++ b/doc/source/v0.14.0.txt
@@ -56,13 +56,13 @@ See also issues (:issue:`6134`, :issue:`4036`, :issue:`3057`, :issue:`2598`, :is
 
    .. code-block:: python
 
-      df.loc[(slice('A1','A3'),.....,:]
+      df.loc[(slice('A1','A3'),.....),:]
 
    rather than this:
 
    .. code-block:: python
 
-      df.loc[(slice('A1','A3'),.....]
+      df.loc[(slice('A1','A3'),.....)]
 
 .. warning::
 
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 38c857e24..45ec528e6 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -591,7 +591,14 @@ class _NDFrameIndexer(object):
             if df.index.equals(ax):
                 val = df.copy().values
             else:
-                val = df.reindex(ax).values
+
+                # we have a multi-index and are trying to align
+                # with a particular, level GH3738
+                if isinstance(ax, MultiIndex) and isinstance(
+                    df.index, MultiIndex) and ax.nlevels != df.index.nlevels:
+                    raise TypeError("cannot align on a multi-index with out specifying the join levels")
+
+                val = df.reindex(index=ax).values
             return val
 
         elif np.isscalar(indexer) and not is_frame:
diff --git a/pandas/tests/test_indexing.py b/pandas/tests/test_indexing.py
index 2a8723292..f5d2adbb0 100644
--- a/pandas/tests/test_indexing.py
+++ b/pandas/tests/test_indexing.py
@@ -1285,6 +1285,28 @@ class TestIndexing(tm.TestCase):
         expected.iloc[[0,3],[1,3]] *= expected.iloc[[0,3],[1,3]]
         assert_frame_equal(df, expected)
 
+    def test_multiindex_setitem(self):
+
+        # GH 3738
+        # setting with a multi-index right hand side
+        arrays = [np.array(['bar', 'bar', 'baz', 'qux', 'qux', 'bar']),
+                  np.array(['one', 'two', 'one', 'one', 'two', 'one']),
+                  np.arange(0, 6, 1)]
+
+        df_orig = pd.DataFrame(np.random.randn(6, 3),
+                               index=arrays,
+                               columns=['A', 'B', 'C']).sort_index()
+
+        expected = df_orig.loc[['bar']]*2
+        df = df_orig.copy()
+        df.loc[['bar']] *= 2
+        assert_frame_equal(df.loc[['bar']],expected)
+
+        # raise because these have differing levels
+        def f():
+            df.loc['bar'] *= 2
+        self.assertRaises(TypeError, f)
+
     def test_getitem_multiindex(self):
 
         # GH 5725
