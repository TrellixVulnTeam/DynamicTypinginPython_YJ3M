commit ce79c80578708c32a161b9e109c8804ebbf5cea5
Author: thatneat <thatneat@users.noreply.github.com>
Date:   Tue Oct 7 09:40:48 2014 -0700

    API: Raise more specific exception on concat([None])

diff --git a/doc/source/v0.15.0.txt b/doc/source/v0.15.0.txt
index af47ee878..fced1cd1d 100644
--- a/doc/source/v0.15.0.txt
+++ b/doc/source/v0.15.0.txt
@@ -320,7 +320,8 @@ API changes
 - add ``copy=True`` argument to ``pd.concat`` to enable pass thru of complete blocks (:issue:`8252`)
 
 - Added support for numpy 1.8+ data types (``bool_``, ``int_``, ``float_``, ``string_``) for conversion to R dataframe  (:issue:`8400`)
-
+- Concatenating no objects will now raise a ``ValueError`` rather than a bare ``Exception``.
+- Concatenation errors will now be sub-classes of ``ValueError`` rather than raw ``Exception`` (:issue:`8501`)
 - ``DataFrame.plot`` and ``Series.plot`` keywords are now have consistent orders (:issue:`8037`)
 
 .. _whatsnew_0150.memory:
diff --git a/pandas/tools/merge.py b/pandas/tools/merge.py
index c9935bf39..8fddfdda7 100644
--- a/pandas/tools/merge.py
+++ b/pandas/tools/merge.py
@@ -41,7 +41,7 @@ if __debug__:
     merge.__doc__ = _merge_doc % '\nleft : DataFrame'
 
 
-class MergeError(Exception):
+class MergeError(ValueError):
     pass
 
 
@@ -679,7 +679,7 @@ def concat(objs, axis=0, join='outer', join_axes=None, ignore_index=False,
         If a dict is passed, the sorted keys will be used as the `keys`
         argument, unless it is passed, in which case the values will be
         selected (see below). Any None objects will be dropped silently unless
-        they are all None in which case an Exception will be raised
+        they are all None in which case a ValueError will be raised
     axis : {0, 1, ...}, default 0
         The axis to concatenate along
     join : {'inner', 'outer'}, default 'outer'
@@ -764,7 +764,7 @@ class _Concatenator(object):
             keys = clean_keys
 
         if len(objs) == 0:
-            raise Exception('All objects passed were None')
+            raise ValueError('All objects passed were None')
 
         # consolidate data & figure out what our result ndim is going to be
         ndims = set()
diff --git a/pandas/tools/tests/test_merge.py b/pandas/tools/tests/test_merge.py
index 89ff07bb7..d1c6af574 100644
--- a/pandas/tools/tests/test_merge.py
+++ b/pandas/tools/tests/test_merge.py
@@ -224,12 +224,12 @@ class TestMerge(tm.TestCase):
         self.assertTrue(np.isnan(joined['three']['c']))
 
         # merge column not p resent
-        self.assertRaises(Exception, target.join, source, on='E')
+        self.assertRaises(KeyError, target.join, source, on='E')
 
         # overlap
         source_copy = source.copy()
         source_copy['A'] = 0
-        self.assertRaises(Exception, target.join, source_copy, on='A')
+        self.assertRaises(ValueError, target.join, source_copy, on='A')
 
     def test_join_on_fails_with_different_right_index(self):
         with tm.assertRaises(ValueError):
@@ -551,15 +551,15 @@ class TestMerge(tm.TestCase):
         assert_frame_equal(result, expected.ix[:, result.columns])
 
     def test_merge_misspecified(self):
-        self.assertRaises(Exception, merge, self.left, self.right,
+        self.assertRaises(ValueError, merge, self.left, self.right,
                           left_index=True)
-        self.assertRaises(Exception, merge, self.left, self.right,
+        self.assertRaises(ValueError, merge, self.left, self.right,
                           right_index=True)
 
-        self.assertRaises(Exception, merge, self.left, self.left,
+        self.assertRaises(ValueError, merge, self.left, self.left,
                           left_on='key', on='key')
 
-        self.assertRaises(Exception, merge, self.df, self.df2,
+        self.assertRaises(ValueError, merge, self.df, self.df2,
                           left_on=['key1'], right_on=['key1', 'key2'])
 
     def test_merge_overlap(self):
@@ -854,7 +854,7 @@ class TestMerge(tm.TestCase):
         df.columns = ['key', 'foo', 'foo']
         df2.columns = ['key', 'bar', 'bar']
 
-        self.assertRaises(Exception, merge, df, df2)
+        self.assertRaises(ValueError, merge, df, df2)
 
 def _check_merge(x, y):
     for how in ['inner', 'left', 'outer']:
@@ -2122,7 +2122,7 @@ class TestConcatenate(tm.TestCase):
         pieces = [df[:5], None, None, df[5:]]
         result = concat(pieces)
         tm.assert_frame_equal(result, df)
-        self.assertRaises(Exception, concat, [None, None])
+        self.assertRaises(ValueError, concat, [None, None])
 
     def test_concat_datetime64_block(self):
         from pandas.tseries.index import date_range
