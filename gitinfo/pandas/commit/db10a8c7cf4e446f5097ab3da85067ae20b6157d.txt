commit db10a8c7cf4e446f5097ab3da85067ae20b6157d
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed May 26 19:03:25 2010 +0000

    reindex _backfill bugfix (switched to buffer interface), min / max performance enhancements
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@174 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/doc/source/groupby.rst b/doc/source/groupby.rst
index 9259ea041..e747bb9f9 100644
--- a/doc/source/groupby.rst
+++ b/doc/source/groupby.rst
@@ -1,7 +1,7 @@
 .. _groupby:
 
 *******************
-Group-by operations
+GroupBy operations
 *******************
 
 .. currentmodule:: pandas
diff --git a/doc/source/series.rst b/doc/source/series.rst
index c8394764c..e52b502ad 100644
--- a/doc/source/series.rst
+++ b/doc/source/series.rst
@@ -430,6 +430,29 @@ naive way or in a time-spaced way
    Series.fill
    Series.interpolate
 
+Relabeling (renaming) Series index
+----------------------------------
+
+One might want to relabel the index based on a mapping or
+function. For this the :func:`Series.rename` method is provided. It
+can accept either a dict or a function:
+
+::
+
+    >>> s
+	a    -0.544970223484
+	b    -0.946388873158
+	c    0.0360854957476
+	d    -0.795018577574
+	e    0.195977583894
+
+	>>> s.rename(str.upper)
+	A    -0.544970223484
+	B    -0.946388873158
+	C    0.0360854957476
+	D    -0.795018577574
+	E    0.195977583894
+
 Iterating
 ---------
 
@@ -471,7 +494,7 @@ Basic statistical functions
 
 There are many built-in ndarray methods providing basic descriptive
 statistics. Since these do not handle missing observations (which are
-represented in our case as NaN), we've overrided these methods to do
+represented in our case as NaN), we've overridden these methods to do
 the appropriate handling.
 
 For example:
@@ -643,6 +666,7 @@ is the new sorting behavior in NumPy >= 1.4.0:
    Series.sort
    Series.order
 
+
 TimeSeries-oriented methods
 ---------------------------
 
@@ -745,7 +769,8 @@ A convenience method for selecting weekdays, similar to
 GroupBy functionality
 ---------------------
 
-TODO
+.. seealso::
+    :ref:`GroupBy operations <groupby>`
 
 Plotting
 --------
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 2006306b6..feee23cd3 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1209,10 +1209,10 @@ class DataFrame(Picklable, Groupable):
         DataFrame
         """
         if not other:
-            return self
+            return self.copy()
 
         if not self:
-            return other
+            return other.copy()
 
         if self.index is not other.index:
             unionIndex = self.index + other.index
@@ -1656,14 +1656,7 @@ class DataFrame(Picklable, Groupable):
         -------
         Series or TimeSeries
         """
-        if axis == 0:
-            med = [np.min(self[col].valid()) for col in self.columns]
-            return Series(med, index=self.columns)
-        elif axis == 1:
-            med = [np.min(self.getXS(k).valid()) for k in self.index]
-            return Series(med, index=self.index)
-        else:
-            raise Exception('Must have 0<= axis <= 1')
+        return self.apply(Series.min, axis=axis)
 
     def max(self, axis=0):
         """
@@ -1678,14 +1671,7 @@ class DataFrame(Picklable, Groupable):
         -------
         Series or TimeSeries
         """
-        if axis == 0:
-            med = [np.max(self[col].valid()) for col in self.columns]
-            return Series(med, index=self.columns)
-        elif axis == 1:
-            med = [np.max(self.getXS(k).valid()) for k in self.index]
-            return Series(med, index=self.index)
-        else:
-            raise Exception('Must have 0<= axis <= 1')
+        return self.apply(Series.max, axis=axis)
 
     def mad(self, axis=0):
         """
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index 1d6cb8f40..789264642 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -135,9 +135,6 @@ class DataMatrix(DataFrame):
                 except Exception:
                     v = Series(v, index=index)
 
-                # copy data
-                v = v.copy()
-
             if issubclass(v.dtype.type, (np.bool_, float, int)):
                 valueDict[k] = v
             else:
@@ -619,9 +616,6 @@ class DataMatrix(DataFrame):
         Series/TimeSeries will be conformed to the DataMatrix's index to
         ensure homogeneity.
         """
-        import bisect
-
-        isObject = False
         if hasattr(value, '__iter__'):
             if isinstance(value, Series):
                 value = np.asarray(value.reindex(self.index))
@@ -636,67 +630,73 @@ class DataMatrix(DataFrame):
         else:
             value = np.repeat(value, len(self.index))
 
-        if value.dtype not in self._dataTypes:
-            isObject = True
-
         if self.values.dtype == np.object_:
-            if key in self.columns:
-                loc = self.columns.indexMap[key]
-                self.values[:, loc] = value
-            elif len(self.columns) == 0:
-                self.values = value.reshape((len(value), 1)).copy()
-                self.columns = Index([key])
+            self._insert_object_dtype(key, value)
+        else:
+            self._insert_float_dtype(key, value)
+
+    def _insert_float_dtype(self, key, value):
+        isObject = value.dtype not in self._dataTypes
+
+        if key in self.columns:
+            loc = self.columns.indexMap[key]
+            self.values[:, loc] = value
+        elif isObject:
+            if self.objects is None:
+                self.objects = DataMatrix({key : value},
+                                          index=self.index)
             else:
-                try:
-                    loc = bisect.bisect_right(self.columns, key)
-                except TypeError:
-                    loc = len(self.columns)
-
-                if loc == self.values.shape[1]:
-                    newValues = np.c_[self.values, value]
-                    newColumns = Index(np.concatenate((self.columns, [key])))
-                elif loc == 0:
-                    newValues = np.c_[value, self.values]
-                    newColumns = Index(np.concatenate(([key], self.columns)))
-                else:
-                    newValues = np.c_[self.values[:, :loc], value,
-                                      self.values[:, loc:]]
-                    toConcat = (self.columns[:loc], [key], self.columns[loc:])
-                    newColumns = Index(np.concatenate(toConcat))
-                self.values = newValues
-                self.columns = newColumns
+                self.objects[key] = value
+        elif len(self.columns) == 0:
+            self.values = value.reshape((len(value), 1)).astype(np.float)
+            self.columns = Index([key])
         else:
-            if key in self.columns:
-                loc = self.columns.indexMap[key]
-                self.values[:, loc] = value
-            elif isObject:
-                if self.objects is None:
-                    self.objects = DataMatrix({key : value},
-                                              index=self.index)
-                else:
-                    self.objects[key] = value
-            elif len(self.columns) == 0:
-                self.values = value.reshape((len(value), 1)).astype(np.float)
-                self.columns = Index([key])
+            try:
+                loc = self.columns.searchsorted(key)
+            except TypeError:
+                loc = len(self.columns)
+
+            if loc == self.values.shape[1]:
+                newValues = np.c_[self.values, value]
+                newColumns = Index(np.concatenate((self.columns, [key])))
+            elif loc == 0:
+                newValues = np.c_[value, self.values]
+                newColumns = Index(np.concatenate(([key], self.columns)))
             else:
-                try:
-                    loc = bisect.bisect_right(self.columns, key)
-                except TypeError:
-                    loc = len(self.columns)
-
-                if loc == self.values.shape[1]:
-                    newValues = np.c_[self.values, value]
-                    newColumns = Index(np.concatenate((self.columns, [key])))
-                elif loc == 0:
-                    newValues = np.c_[value, self.values]
-                    newColumns = Index(np.concatenate(([key], self.columns)))
-                else:
-                    newValues = np.c_[self.values[:, :loc], value,
-                                      self.values[:, loc:]]
-                    toConcat = (self.columns[:loc], [key], self.columns[loc:])
-                    newColumns = Index(np.concatenate(toConcat))
-                self.values = newValues
-                self.columns = newColumns
+                newValues = np.c_[self.values[:, :loc], value,
+                                  self.values[:, loc:]]
+                toConcat = (self.columns[:loc], [key], self.columns[loc:])
+                newColumns = Index(np.concatenate(toConcat))
+            self.values = newValues
+            self.columns = newColumns
+
+    def _insert_object_dtype(self, key, value):
+        if key in self.columns:
+            loc = self.columns.indexMap[key]
+            self.values[:, loc] = value
+        elif len(self.columns) == 0:
+            self.values = value.reshape((len(value), 1)).copy()
+            self.columns = Index([key])
+        else:
+            try:
+                loc = self.columns.searchsorted(key)
+            except TypeError:
+                loc = len(self.columns)
+
+            if loc == self.values.shape[1]:
+                newValues = np.c_[self.values, value]
+                newColumns = Index(np.concatenate((self.columns, [key])))
+            elif loc == 0:
+                newValues = np.c_[value, self.values]
+                newColumns = Index(np.concatenate(([key], self.columns)))
+            else:
+                newValues = np.c_[self.values[:, :loc], value,
+                                  self.values[:, loc:]]
+                toConcat = (self.columns[:loc], [key], self.columns[loc:])
+                newColumns = Index(np.concatenate(toConcat))
+            self.values = newValues
+            self.columns = newColumns
+
 
     def __delitem__(self, key):
         """
@@ -1263,6 +1263,40 @@ class DataMatrix(DataFrame):
                           index=self.index, columns=self.columns,
                           objects=self.objects)
 
+    def min(self, axis=0):
+        """
+        Return array or Series of minimums over requested axis.
+
+        Parameters
+        ----------
+        axis : {0, 1}
+            0 for row-wise, 1 for column-wise
+
+        Returns
+        -------
+        Series or TimeSeries
+        """
+        values = self.values.copy()
+        np.putmask(values, -np.isfinite(values), np.inf)
+        return Series(values.min(axis), index=self._get_agg_axis(axis))
+
+    def max(self, axis=0):
+        """
+        Return array or Series of maximums over requested axis.
+
+        Parameters
+        ----------
+        axis : {0, 1}
+            0 for row-wise, 1 for column-wise
+
+        Returns
+        -------
+        Series or TimeSeries
+        """
+        values = self.values.copy()
+        np.putmask(values, -np.isfinite(values), -np.inf)
+        return Series(values.max(axis), index=self._get_agg_axis(axis))
+
 def _reorder_columns(mat, current, desired):
     fillVec, mask = tseries.getFillVec(current, desired, current.indexMap,
                                        desired.indexMap, None)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 9314a14b2..07d6422de 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -37,10 +37,9 @@ def _seriesOpWrap(opname):
         from pandas.core.frame import DataFrame
 
         func = getattr(self.values(), opname)
-        cls = self.__class__
         if isinstance(other, Series):
             if self.index.equals(other.index):
-                return cls(func(other.values()), index=self.index)
+                return Series(func(other.values()), index=self.index)
 
             newIndex = self.index + other.index
 
@@ -51,7 +50,7 @@ def _seriesOpWrap(opname):
             except Exception:
                 arr = Series.combineFunc(self, other,
                                          getattr(type(self[0]), opname))
-            result = cls(arr, index=newIndex)
+            result = Series(arr, index=newIndex)
             return result
 
         elif isinstance(other, DataFrame):
@@ -62,7 +61,7 @@ def _seriesOpWrap(opname):
 
             return getattr(other, reverse_op)(self)
         else:
-            return cls(func(other), index=self.index)
+            return Series(func(other), index=self.index)
     return wrapper
 
 #-------------------------------------------------------------------------------
@@ -70,7 +69,7 @@ def _seriesOpWrap(opname):
 
 class Series(np.ndarray, Picklable, Groupable):
     """
-    Generic indexed series (time series or cross-section)
+    Generic indexed (labeled) vector (time series or cross-section)
 
     Contains values in a numpy-ndarray with an optional bound index
     (also an array of dates, strings, or whatever you want the 'row
@@ -79,11 +78,8 @@ class Series(np.ndarray, Picklable, Groupable):
     Rows can be retrieved by index value (date, string, etc.) or
     relative position in the underlying array.
 
-    Operations between Series (+, -, /, *, **) objects are
-    *index-safe*, meaning that values will be combined by their
-    respective index positions rather than relative positions in the
-    underlying ndarray. In other words, there is no 'matching' or
-    'aligning' to do, it's all taken care of for you.
+    Operations between Series (+, -, /, *, **) align values based on
+    their associated index values-- they need not be the same length.
 
     Parameters
     ----------
@@ -257,7 +253,7 @@ class Series(np.ndarray, Picklable, Groupable):
 
         dataSlice = values[key]
         indices = Index(self.index.view(ndarray)[key])
-        return self.__class__(dataSlice, index=indices)
+        return Series(dataSlice, index=indices)
 
     def get(self, key, default=None):
         """
@@ -293,7 +289,7 @@ class Series(np.ndarray, Picklable, Groupable):
         newArr = self.values()[i:j].copy()
         newIndex = self.index[i:j]
 
-        return self.__class__(newArr, index=newIndex)
+        return Series(newArr, index=newIndex)
 
     def __setitem__(self, key, value):
         """
@@ -389,13 +385,17 @@ class Series(np.ndarray, Picklable, Groupable):
         """
         Compute minimum of non-null values
         """
-        return self._ndarray_statistic('min')
+        arr = self.values().copy()
+        arr[isnull(arr)] = np.inf
+        return arr.min()
 
     def max(self, axis=None, out=None):
         """
         Compute maximum of non-null values
         """
-        return self._ndarray_statistic('max')
+        arr = self.values().copy()
+        arr[isnull(arr)] = -np.inf
+        return arr.max()
 
     def std(self, axis=None, dtype=None, out=None, ddof=1):
         """
@@ -481,7 +481,7 @@ class Series(np.ndarray, Picklable, Groupable):
             raise
 
         newValues = np.concatenate((self, other))
-        return self.__class__(newValues, index=newIndex)
+        return Series(newValues, index=newIndex)
 
     def combineFunc(self, other, func):
         """
@@ -510,7 +510,7 @@ class Series(np.ndarray, Picklable, Groupable):
             newIndex = self.index
             newArr = func(self.values(), other)
 
-        return self.__class__(newArr, index=newIndex)
+        return Series(newArr, index=newIndex)
 
     def combineFirst(self, other):
         """
@@ -565,7 +565,7 @@ class Series(np.ndarray, Picklable, Groupable):
         return tseries.median(self.valid())
 
     def copy(self):
-        return self.__class__(self.values().copy(), index=self.index)
+        return Series(self.values().copy(), index=self.index)
 
     def corr(self, other):
         """
@@ -740,7 +740,7 @@ class Series(np.ndarray, Picklable, Groupable):
         return np.where(self > threshold, threshold, self)
 
     def floor(self, threshold):
-        """Return copy of series with values BELOW given value truncated"""
+        """Return copy of series with values below given value truncated"""
         return np.where(self < threshold, threshold, self)
 
     def valid(self):
@@ -806,12 +806,12 @@ class Series(np.ndarray, Picklable, Groupable):
                 newValues[:periods] = self.values()[-periods:]
                 newValues[periods:] = np.NaN
 
-            return self.__class__(newValues, index=self.index)
+            return Series(newValues, index=self.index)
         else:
             offset = periods * offset
             newIndex = Index([idx + offset for idx in self.index])
 
-            return self.__class__(self, index=newIndex)
+            return Series(self, index=newIndex)
 
     def truncate(self, before=None, after=None):
         """Function truncate a sorted TimeSeries before and/or after
@@ -1039,7 +1039,7 @@ class Series(np.ndarray, Picklable, Groupable):
             newIndex = Index(newIndex)
 
         if len(self.index) == 0:
-            return self.__class__.fromValue(NaN, index=newIndex)
+            return Series.fromValue(NaN, index=newIndex)
 
         if fillMethod is not None:
             fillMethod = fillMethod.upper()
@@ -1061,7 +1061,7 @@ class Series(np.ndarray, Picklable, Groupable):
 
             np.putmask(newValues, notmask, NaN)
 
-        return self.__class__(newValues, index=newIndex)
+        return Series(newValues, index=newIndex)
 
     def rename(self, mapper):
         """
@@ -1090,8 +1090,8 @@ class Series(np.ndarray, Picklable, Groupable):
 
     @property
     def weekday(self):
-        return self.__class__([d.weekday() for d in self.index],
-                              index = self.index)
+        return Series([d.weekday() for d in self.index],
+                      index=self.index)
 
     def diff(self):
         """
@@ -1105,7 +1105,7 @@ class Series(np.ndarray, Picklable, Groupable):
 
     def autocorr(self):
         """
-        1st period autocorrelation coefficient
+        Lag-1 autocorrelation
 
         Returns
         -------
diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index e4f7c265f..e040ab6ab 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -1074,10 +1074,10 @@ class TestDataFrame(unittest.TestCase):
 
         # corner cases
         comb = self.frame.combineFirst(self.empty)
-        self.assert_(comb is self.frame)
+        assert_frame_equal(comb, self.frame)
 
         comb = self.empty.combineFirst(self.frame)
-        self.assert_(comb is self.frame)
+        assert_frame_equal(comb, self.frame)
 
     def test_combineAdd(self):
         # trivial
@@ -1087,10 +1087,10 @@ class TestDataFrame(unittest.TestCase):
 
         # corner cases
         comb = self.frame.combineAdd(self.empty)
-        self.assert_(comb is self.frame)
+        assert_frame_equal(comb, self.frame)
 
         comb = self.empty.combineAdd(self.frame)
-        self.assert_(comb is self.frame)
+        assert_frame_equal(comb, self.frame)
 
     def test_combineMult(self):
         # trivial
@@ -1100,10 +1100,10 @@ class TestDataFrame(unittest.TestCase):
 
         # corner cases
         comb = self.frame.combineMult(self.empty)
-        self.assert_(comb is self.frame)
+        assert_frame_equal(comb, self.frame)
 
         comb = self.empty.combineMult(self.frame)
-        self.assert_(comb is self.frame)
+        assert_frame_equal(comb, self.frame)
 
     def test_join_index(self):
         # left / right
diff --git a/pandas/lib/src/reindex.pyx b/pandas/lib/src/reindex.pyx
index 87c52623a..5d548f96a 100644
--- a/pandas/lib/src/reindex.pyx
+++ b/pandas/lib/src/reindex.pyx
@@ -1,5 +1,21 @@
+def getFillVec(ndarray oldIndex, ndarray newIndex, dict oldMap, dict newMap,
+               object kind):
 
-cdef tuple _backfill(ndarray oldIndex, ndarray newIndex, dict oldMap, dict newMap):
+    if kind is None:
+        fillVec, maskVec = getMergeVec(newIndex, oldMap)
+    elif kind == 'PAD':
+        fillVec, maskVec = _pad(oldIndex, newIndex, oldMap, newMap)
+    elif kind == 'BACKFILL':
+        fillVec, maskVec = _backfill(oldIndex, newIndex, oldMap, newMap)
+    else:
+        raise Exception("Don't recognize fillMethod: %s" % kind)
+
+    return fillVec, maskVec.astype(np.bool)
+
+@cython.wraparound(False)
+def _backfill(ndarray[object, ndim=1] oldIndex,
+              ndarray[object, ndim=1] newIndex,
+              dict oldMap, dict newMap):
     '''
     Backfilling logic for generating fill vector
 
@@ -26,95 +42,71 @@ cdef tuple _backfill(ndarray oldIndex, ndarray newIndex, dict oldMap, dict newMa
     '''
     cdef int i, j, oldLength, newLength, curLoc
     # Make empty vectors
-    cdef ndarray fillVec
-    cdef ndarray maskVec
-    fillVec = <ndarray> np.empty(len(newIndex), dtype = np.int32)
-    maskVec = <ndarray> np.zeros(len(newIndex), dtype = np.int8)
-
-    # Get references
-    cdef int *fillLocs
-    cdef char *mask
-    fillLocs = <int *> fillVec.data
-    mask = <char *> maskVec.data
-
-    # Create the iterators
-    cdef flatiter iterold, iternew
-    iterold = <flatiter> PyArray_IterNew(oldIndex)
-    iternew = <flatiter> PyArray_IterNew(newIndex)
+    cdef ndarray[int32_t, ndim=1] fillVec
+    cdef ndarray[int8_t, ndim=1] mask
+    cdef int newPos, oldPos
+    cdef object prevOld, curOld
 
     # Get the size
-    oldLength = PyArray_SIZE(oldIndex)
-    newLength = PyArray_SIZE(newIndex)
+    oldLength = len(oldIndex)
+    newLength = len(newIndex)
+
+    fillVec = np.empty(len(newIndex), dtype = np.int32)
+    fillVec.fill(-1)
+
+    mask = np.zeros(len(newIndex), dtype = np.int8)
 
     # Current positions
-    cdef int newPos, oldPos
     oldPos = oldLength - 1
     newPos = newLength - 1
 
-    # References holding indices
-    cdef object prevOld, curOld
+    # corner case, no filling possible
+    if newIndex[0] > oldIndex[oldLength - 1]:
+        return fillVec, mask
 
     while newPos >= 0:
-        # Move to the current position
-        PyArray_ITER_GOTO1D(iternew, newPos)
-        PyArray_ITER_GOTO1D(iterold, oldPos)
-
-        # Get the current index
-        curOld = PyArray_GETITEM(oldIndex, PyArray_ITER_DATA(iterold))
+        curOld = oldIndex[oldPos]
 
         # Until we reach a point where we are before the curOld point
-        while PyArray_GETITEM(newIndex, PyArray_ITER_DATA(iternew)) > curOld:
+        while newIndex[newPos] > curOld:
             newPos -= 1
             if newPos < 0:
                 break
-            PyArray_ITER_GOTO1D(iternew, newPos)
 
         # Get the location in the old index
         curLoc = oldMap[curOld]
 
         # At the beginning of the old index
         if oldPos == 0:
-
             # Make sure we are before the curOld index
-            if PyArray_GETITEM(newIndex, PyArray_ITER_DATA(iternew)) <= curOld:
+            if newIndex[newPos] <= curOld:
                 fillVec[:newPos + 1] = curLoc
-                maskVec[:newPos + 1] = 1
-
+                mask[:newPos + 1] = 1
             # Exit the main loop
             break
-
         else:
-            # Move one position back
-            PyArray_ITER_GOTO1D(iterold, oldPos - 1)
-
             # Get the index there
-            prevOld = PyArray_GETITEM(oldIndex, PyArray_ITER_DATA(iterold))
+            prevOld = oldIndex[oldPos - 1]
 
             # Until we reach the previous index
-            while PyArray_GETITEM(newIndex, PyArray_ITER_DATA(iternew)) > prevOld:
-
+            while newIndex[newPos] > prevOld:
                 # Set the current fill location
-                fillLocs[newPos] = curLoc
+                fillVec[newPos] = curLoc
                 mask[newPos] = 1
 
                 newPos -= 1
                 if newPos < 0:
                     break
 
-                # Move the iterator back
-                PyArray_ITER_GOTO1D(iternew, newPos)
-
         # Move one period back
         oldPos -= 1
 
-    for i from 0 <= i < newLength:
-        if mask[i] == 0:
-            # Fill from some generic location
-            fillLocs[i] = -1
-
-    return (fillVec, maskVec)
+    return (fillVec, mask)
 
-cdef tuple _pad(ndarray oldIndex, ndarray newIndex, dict oldMap, dict newMap):
+@cython.wraparound(False)
+def _pad(ndarray[object, ndim=1] oldIndex,
+         ndarray[object, ndim=1] newIndex,
+         dict oldMap, dict newMap):
     '''
     Padding logic for generating fill vector
 
@@ -136,69 +128,60 @@ cdef tuple _pad(ndarray oldIndex, ndarray newIndex, dict oldMap, dict newMap):
              .        1               1
     C        C        2               1
     '''
+    cdef int i, j, oldLength, newLength, curLoc
+    # Make empty vectors
+    cdef ndarray[int32_t, ndim=1] fillVec
+    cdef ndarray[int8_t, ndim=1] mask
+    cdef int newPos, oldPos
+    cdef object prevOld, curOld
 
-    # Declare variables
-    cdef ndarray fillVec
-    cdef ndarray maskVec
-    cdef int *fillLocs
-    cdef char *mask
-    cdef int i, j, oldLength, newLength, curLoc, newPos, oldPos
-    cdef flatiter iterold, iternew
-    cdef object nextOld, curOld
-    cdef char done
-
-    # Make empty fill vector and mask vector, cast to ndarray
-    fillVec = <ndarray> np.empty(len(newIndex), dtype = np.int32)
-    maskVec = <ndarray> np.zeros(len(newIndex), dtype = np.int8)
-
-    # Get reference to the arrays inside
-    fillLocs = <int *> fillVec.data
-    mask = <char *> maskVec.data
+    # Get the size
+    oldLength = len(oldIndex)
+    newLength = len(newIndex)
 
-    # Create simple ndarray iterators using C API
-    iterold = <flatiter> PyArray_IterNew(oldIndex)
-    iternew = <flatiter> PyArray_IterNew(newIndex)
+    fillVec = np.empty(len(newIndex), dtype = np.int32)
+    fillVec.fill(-1)
 
-    # Length of each index
-    oldLength = PyArray_SIZE(oldIndex)
-    newLength = PyArray_SIZE(newIndex)
+    mask = np.zeros(len(newIndex), dtype = np.int8)
 
     oldPos = 0
     newPos = 0
+
+    # corner case, no filling possible
+    if newIndex[newLength - 1] < oldIndex[0]:
+        return fillVec, mask
+
     while newPos < newLength:
-        curOld = PyArray_GETITEM(oldIndex, PyArray_ITER_DATA(iterold))
+        curOld = oldIndex[oldPos]
 
         # At beginning, keep going until we go exceed the
         # first OLD index in the NEW index
-        while PyArray_GETITEM(newIndex, PyArray_ITER_DATA(iternew)) < curOld:
+        while newIndex[newPos] < curOld:
             newPos += 1
             if newPos > newLength - 1:
                 break
-            PyArray_ITER_NEXT(iternew)
 
         # We got there, get the current location in the old index
         curLoc = oldMap[curOld]
 
         # We're at the end of the road, need to propagate this value to the end
         if oldPos == oldLength - 1:
-            if PyArray_GETITEM(newIndex, PyArray_ITER_DATA(iternew)) >= curOld:
+            if newIndex[newPos] >= curOld:
                 fillVec[newPos:] = curLoc
-                maskVec[newPos:] = 1
+                mask[newPos:] = 1
             break
         else:
             # Not at the end, need to go about filling
 
             # Get the next index so we know when to stop propagating this value
-            PyArray_ITER_NEXT(iterold)
-            nextOld = PyArray_GETITEM(oldIndex, PyArray_ITER_DATA(iterold))
+            nextOld = oldIndex[oldPos + 1]
 
             done = 0
 
             # Until we reach the next OLD value in the NEW index
-            while PyArray_GETITEM(newIndex, PyArray_ITER_DATA(iternew)) < nextOld:
-
+            while newIndex[newPos] < nextOld:
                 # Use this location to fill
-                fillLocs[newPos] = curLoc
+                fillVec[newPos] = curLoc
 
                 # Set mask to be 1 so will not be NaN'd
                 mask[newPos] = 1
@@ -209,9 +192,6 @@ cdef tuple _pad(ndarray oldIndex, ndarray newIndex, dict oldMap, dict newMap):
                     done = 1
                     break
 
-                # Advance the pointer
-                PyArray_ITER_NEXT(iternew)
-
             # We got to the end of the new index
             if done:
                 break
@@ -220,27 +200,7 @@ cdef tuple _pad(ndarray oldIndex, ndarray newIndex, dict oldMap, dict newMap):
         # inc the count
         oldPos += 1
 
-    # Places where the mask is 0, fill with an arbitrary value
-    # (will be NA'd out)
-    for i from 0 <= i < newLength:
-        if mask[i] == 0:
-            fillLocs[i] = -1
-
-    return fillVec, maskVec
-
-def getFillVec(ndarray oldIndex, ndarray newIndex, dict oldMap, dict newMap,
-               object kind):
-
-    if kind is None:
-        fillVec, maskVec = getMergeVec(newIndex, oldMap)
-    elif kind == 'PAD':
-        fillVec, maskVec = _pad(oldIndex, newIndex, oldMap, newMap)
-    elif kind == 'BACKFILL':
-        fillVec, maskVec = _backfill(oldIndex, newIndex, oldMap, newMap)
-    else:
-        raise Exception("Don't recognize fillMethod: %s" % kind)
-
-    return fillVec, maskVec.astype(np.bool)
+    return fillVec, mask
 
 @cython.boundscheck(False)
 def getMergeVec(ndarray values, dict oldMap):
@@ -248,11 +208,11 @@ def getMergeVec(ndarray values, dict oldMap):
 
     cdef flatiter iternew
     cdef object idx
-    cdef ndarray[int32_t, ndim=1] fillLocs
+    cdef ndarray[int32_t, ndim=1] fillVec
     cdef ndarray[int8_t, ndim=1] mask
 
     newLength = len(values)
-    fillLocs = np.empty(newLength, dtype=np.int32)
+    fillVec = np.empty(newLength, dtype=np.int32)
     mask = np.zeros(newLength, dtype=np.int8)
 
     iternew = <flatiter> PyArray_IterNew(values)
@@ -261,14 +221,14 @@ def getMergeVec(ndarray values, dict oldMap):
         idx = PyArray_GETITEM(values, PyArray_ITER_DATA(iternew))
 
         if idx in oldMap:
-            fillLocs[i] = oldMap[idx]
+            fillVec[i] = oldMap[idx]
             mask[i] = 1
 
         PyArray_ITER_NEXT(iternew)
 
     for i from 0 <= i < newLength:
         if mask[i] == 0:
-            fillLocs[i] = -1
+            fillVec[i] = -1
 
-    return fillLocs, mask.astype(bool)
+    return fillVec, mask.astype(bool)
 
diff --git a/pandas/lib/src/tseries.c b/pandas/lib/src/tseries.c
index 15dd97bce..d0c819341 100644
--- a/pandas/lib/src/tseries.c
+++ b/pandas/lib/src/tseries.c
@@ -1,4 +1,4 @@
-/* Generated by Cython 0.12.1 on Mon May 10 16:11:33 2010 */
+/* Generated by Cython 0.12.1 on Wed May 26 13:58:22 2010 */
 
 #define PY_SSIZE_T_CLEAN
 #include "Python.h"
@@ -824,8 +824,6 @@ static double __pyx_f_7tseries_Log2(double); /*proto*/
 static CYTHON_INLINE PyObject *__pyx_f_7tseries__checknull(PyObject *); /*proto*/
 static PyArrayObject *__pyx_f_7tseries__isnullobj(PyObject *); /*proto*/
 static CYTHON_INLINE PyObject *__pyx_f_7tseries__isnan(PyObject *); /*proto*/
-static PyObject *__pyx_f_7tseries__backfill(PyArrayObject *, PyArrayObject *, PyObject *, PyObject *); /*proto*/
-static PyObject *__pyx_f_7tseries__pad(PyArrayObject *, PyArrayObject *, PyObject *, PyObject *); /*proto*/
 static double __pyx_f_7tseries___add(double, double); /*proto*/
 static double __pyx_f_7tseries___sub(double, double); /*proto*/
 static double __pyx_f_7tseries___div(double, double); /*proto*/
@@ -896,11 +894,13 @@ static char __pyx_k__max[] = "max";
 static char __pyx_k__min[] = "min";
 static char __pyx_k__obj[] = "obj";
 static char __pyx_k__win[] = "win";
+static char __pyx_k___pad[] = "_pad";
 static char __pyx_k__aMap[] = "aMap";
 static char __pyx_k__bMap[] = "bMap";
 static char __pyx_k__base[] = "base";
 static char __pyx_k__bool[] = "bool";
 static char __pyx_k__data[] = "data";
+static char __pyx_k__fill[] = "fill";
 static char __pyx_k__func[] = "func";
 static char __pyx_k__head[] = "head";
 static char __pyx_k__int8[] = "int8";
@@ -967,6 +967,7 @@ static char __pyx_k__oldIndex[] = "oldIndex";
 static char __pyx_k__readonly[] = "readonly";
 static char __pyx_k__type_num[] = "type_num";
 static char __pyx_k__Exception[] = "Exception";
+static char __pyx_k___backfill[] = "_backfill";
 static char __pyx_k___roll_sum[] = "_roll_sum";
 static char __pyx_k___roll_var[] = "_roll_var";
 static char __pyx_k__byteorder[] = "byteorder";
@@ -1014,7 +1015,9 @@ static PyObject *__pyx_n_s____mul__;
 static PyObject *__pyx_n_s____ne__;
 static PyObject *__pyx_n_s____pow__;
 static PyObject *__pyx_n_s____sub__;
+static PyObject *__pyx_n_s___backfill;
 static PyObject *__pyx_n_s___ewma;
+static PyObject *__pyx_n_s___pad;
 static PyObject *__pyx_n_s___roll_kurt;
 static PyObject *__pyx_n_s___roll_mean;
 static PyObject *__pyx_n_s___roll_median;
@@ -1042,6 +1045,7 @@ static PyObject *__pyx_n_s__dtype;
 static PyObject *__pyx_n_s__empty;
 static PyObject *__pyx_n_s__expected_size;
 static PyObject *__pyx_n_s__fields;
+static PyObject *__pyx_n_s__fill;
 static PyObject *__pyx_n_s__float64;
 static PyObject *__pyx_n_s__format;
 static PyObject *__pyx_n_s__func;
@@ -11736,1163 +11740,1129 @@ static PyObject *__pyx_pf_7tseries_ewma(PyObject *__pyx_self, PyObject *__pyx_ar
   return __pyx_r;
 }
 
-/* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":2
+/* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":1
+ * def getFillVec(ndarray oldIndex, ndarray newIndex, dict oldMap, dict newMap,             # <<<<<<<<<<<<<<
+ *                object kind):
  * 
- * cdef tuple _backfill(ndarray oldIndex, ndarray newIndex, dict oldMap, dict newMap):             # <<<<<<<<<<<<<<
- *     '''
- *     Backfilling logic for generating fill vector
  */
 
-static  PyObject *__pyx_f_7tseries__backfill(PyArrayObject *__pyx_v_oldIndex, PyArrayObject *__pyx_v_newIndex, PyObject *__pyx_v_oldMap, PyObject *__pyx_v_newMap) {
-  int __pyx_v_i;
-  int __pyx_v_oldLength;
-  int __pyx_v_newLength;
-  int __pyx_v_curLoc;
-  PyArrayObject *__pyx_v_fillVec;
-  PyArrayObject *__pyx_v_maskVec;
-  int *__pyx_v_fillLocs;
-  char *__pyx_v_mask;
-  PyArrayIterObject *__pyx_v_iterold;
-  PyArrayIterObject *__pyx_v_iternew;
-  int __pyx_v_newPos;
-  int __pyx_v_oldPos;
-  PyObject *__pyx_v_prevOld;
-  PyObject *__pyx_v_curOld;
+static PyObject *__pyx_pf_7tseries_getFillVec(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
+static PyObject *__pyx_pf_7tseries_getFillVec(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
+  PyArrayObject *__pyx_v_oldIndex = 0;
+  PyArrayObject *__pyx_v_newIndex = 0;
+  PyObject *__pyx_v_oldMap = 0;
+  PyObject *__pyx_v_newMap = 0;
+  PyObject *__pyx_v_kind = 0;
+  PyObject *__pyx_v_fillVec;
+  PyObject *__pyx_v_maskVec;
   PyObject *__pyx_r = NULL;
-  PyObject *__pyx_t_1 = NULL;
+  int __pyx_t_1;
   PyObject *__pyx_t_2 = NULL;
-  Py_ssize_t __pyx_t_3;
+  PyObject *__pyx_t_3 = NULL;
   PyObject *__pyx_t_4 = NULL;
   PyObject *__pyx_t_5 = NULL;
-  PyObject *__pyx_t_6 = NULL;
-  int __pyx_t_7;
-  int __pyx_t_8;
-  __Pyx_RefNannySetupContext("_backfill");
+  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__oldIndex,&__pyx_n_s__newIndex,&__pyx_n_s__oldMap,&__pyx_n_s__newMap,&__pyx_n_s__kind,0};
+  __Pyx_RefNannySetupContext("getFillVec");
+  __pyx_self = __pyx_self;
+  if (unlikely(__pyx_kwds)) {
+    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
+    PyObject* values[5] = {0,0,0,0,0};
+    switch (PyTuple_GET_SIZE(__pyx_args)) {
+      case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
+      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
+      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+      case  0: break;
+      default: goto __pyx_L5_argtuple_error;
+    }
+    switch (PyTuple_GET_SIZE(__pyx_args)) {
+      case  0:
+      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__oldIndex);
+      if (likely(values[0])) kw_args--;
+      else goto __pyx_L5_argtuple_error;
+      case  1:
+      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__newIndex);
+      if (likely(values[1])) kw_args--;
+      else {
+        __Pyx_RaiseArgtupleInvalid("getFillVec", 1, 5, 5, 1); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      }
+      case  2:
+      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__oldMap);
+      if (likely(values[2])) kw_args--;
+      else {
+        __Pyx_RaiseArgtupleInvalid("getFillVec", 1, 5, 5, 2); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      }
+      case  3:
+      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__newMap);
+      if (likely(values[3])) kw_args--;
+      else {
+        __Pyx_RaiseArgtupleInvalid("getFillVec", 1, 5, 5, 3); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      }
+      case  4:
+      values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__kind);
+      if (likely(values[4])) kw_args--;
+      else {
+        __Pyx_RaiseArgtupleInvalid("getFillVec", 1, 5, 5, 4); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      }
+    }
+    if (unlikely(kw_args > 0)) {
+      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getFillVec") < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+    }
+    __pyx_v_oldIndex = ((PyArrayObject *)values[0]);
+    __pyx_v_newIndex = ((PyArrayObject *)values[1]);
+    __pyx_v_oldMap = ((PyObject *)values[2]);
+    __pyx_v_newMap = ((PyObject *)values[3]);
+    __pyx_v_kind = values[4];
+  } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
+    goto __pyx_L5_argtuple_error;
+  } else {
+    __pyx_v_oldIndex = ((PyArrayObject *)PyTuple_GET_ITEM(__pyx_args, 0));
+    __pyx_v_newIndex = ((PyArrayObject *)PyTuple_GET_ITEM(__pyx_args, 1));
+    __pyx_v_oldMap = ((PyObject *)PyTuple_GET_ITEM(__pyx_args, 2));
+    __pyx_v_newMap = ((PyObject *)PyTuple_GET_ITEM(__pyx_args, 3));
+    __pyx_v_kind = PyTuple_GET_ITEM(__pyx_args, 4);
+  }
+  goto __pyx_L4_argument_unpacking_done;
+  __pyx_L5_argtuple_error:;
+  __Pyx_RaiseArgtupleInvalid("getFillVec", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+  __pyx_L3_error:;
+  __Pyx_AddTraceback("tseries.getFillVec");
+  return NULL;
+  __pyx_L4_argument_unpacking_done:;
   __Pyx_INCREF((PyObject *)__pyx_v_oldIndex);
   __Pyx_INCREF((PyObject *)__pyx_v_newIndex);
   __Pyx_INCREF(__pyx_v_oldMap);
   __Pyx_INCREF(__pyx_v_newMap);
-  __pyx_v_fillVec = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None);
-  __pyx_v_maskVec = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None);
-  __pyx_v_iterold = ((PyArrayIterObject *)Py_None); __Pyx_INCREF(Py_None);
-  __pyx_v_iternew = ((PyArrayIterObject *)Py_None); __Pyx_INCREF(Py_None);
-  __pyx_v_prevOld = Py_None; __Pyx_INCREF(Py_None);
-  __pyx_v_curOld = Py_None; __Pyx_INCREF(Py_None);
+  __Pyx_INCREF(__pyx_v_kind);
+  __pyx_v_fillVec = Py_None; __Pyx_INCREF(Py_None);
+  __pyx_v_maskVec = Py_None; __Pyx_INCREF(Py_None);
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_oldIndex), __pyx_ptype_5numpy_ndarray, 1, "oldIndex", 0))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_newIndex), __pyx_ptype_5numpy_ndarray, 1, "newIndex", 0))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_oldMap), &PyDict_Type, 1, "oldMap", 1))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_newMap), &PyDict_Type, 1, "newMap", 1))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
 
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":31
- *     cdef ndarray fillVec
- *     cdef ndarray maskVec
- *     fillVec = <ndarray> np.empty(len(newIndex), dtype = np.int32)             # <<<<<<<<<<<<<<
- *     maskVec = <ndarray> np.zeros(len(newIndex), dtype = np.int8)
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":4
+ *                object kind):
  * 
+ *     if kind is None:             # <<<<<<<<<<<<<<
+ *         fillVec, maskVec = getMergeVec(newIndex, oldMap)
+ *     elif kind == 'PAD':
  */
-  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__empty); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_newIndex)); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_4);
-  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
-  __Pyx_GIVEREF(__pyx_t_1);
-  __pyx_t_1 = 0;
-  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
-  __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_6 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__int32); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_6);
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__dtype), __pyx_t_6) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-  __pyx_t_6 = PyEval_CallObjectWithKeywords(__pyx_t_2, __pyx_t_4, ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_6);
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
-  __Pyx_INCREF(((PyObject *)((PyArrayObject *)__pyx_t_6)));
-  __Pyx_DECREF(((PyObject *)__pyx_v_fillVec));
-  __pyx_v_fillVec = ((PyArrayObject *)__pyx_t_6);
-  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+  __pyx_t_1 = (__pyx_v_kind == Py_None);
+  if (__pyx_t_1) {
 
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":32
- *     cdef ndarray maskVec
- *     fillVec = <ndarray> np.empty(len(newIndex), dtype = np.int32)
- *     maskVec = <ndarray> np.zeros(len(newIndex), dtype = np.int8)             # <<<<<<<<<<<<<<
+    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":5
  * 
- *     # Get references
+ *     if kind is None:
+ *         fillVec, maskVec = getMergeVec(newIndex, oldMap)             # <<<<<<<<<<<<<<
+ *     elif kind == 'PAD':
+ *         fillVec, maskVec = _pad(oldIndex, newIndex, oldMap, newMap)
  */
-  __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_6);
-  __pyx_t_1 = PyObject_GetAttr(__pyx_t_6, __pyx_n_s__zeros); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_1);
-  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-  __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_newIndex)); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_6);
-  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_4);
-  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
-  __Pyx_GIVEREF(__pyx_t_6);
-  __pyx_t_6 = 0;
-  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(((PyObject *)__pyx_t_6));
-  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_5 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__int8); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_5);
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  if (PyDict_SetItem(__pyx_t_6, ((PyObject *)__pyx_n_s__dtype), __pyx_t_5) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __pyx_t_5 = PyEval_CallObjectWithKeywords(__pyx_t_1, __pyx_t_4, ((PyObject *)__pyx_t_6)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_5);
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
-  __Pyx_INCREF(((PyObject *)((PyArrayObject *)__pyx_t_5)));
-  __Pyx_DECREF(((PyObject *)__pyx_v_maskVec));
-  __pyx_v_maskVec = ((PyArrayObject *)__pyx_t_5);
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__getMergeVec); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_2);
+    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_3);
+    __Pyx_INCREF(((PyObject *)__pyx_v_newIndex));
+    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_newIndex));
+    __Pyx_GIVEREF(((PyObject *)__pyx_v_newIndex));
+    __Pyx_INCREF(((PyObject *)__pyx_v_oldMap));
+    PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_oldMap));
+    __Pyx_GIVEREF(((PyObject *)__pyx_v_oldMap));
+    __pyx_t_4 = PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_4);
+    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+    if (PyTuple_CheckExact(__pyx_t_4) && likely(PyTuple_GET_SIZE(__pyx_t_4) == 2)) {
+      PyObject* tuple = __pyx_t_4;
+      __pyx_t_3 = PyTuple_GET_ITEM(tuple, 0); __Pyx_INCREF(__pyx_t_3);
+      __pyx_t_2 = PyTuple_GET_ITEM(tuple, 1); __Pyx_INCREF(__pyx_t_2);
+      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+      __Pyx_DECREF(__pyx_v_fillVec);
+      __pyx_v_fillVec = __pyx_t_3;
+      __pyx_t_3 = 0;
+      __Pyx_DECREF(__pyx_v_maskVec);
+      __pyx_v_maskVec = __pyx_t_2;
+      __pyx_t_2 = 0;
+    } else {
+      __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_5);
+      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+      __pyx_t_3 = __Pyx_UnpackItem(__pyx_t_5, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_3);
+      __pyx_t_2 = __Pyx_UnpackItem(__pyx_t_5, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_2);
+      if (__Pyx_EndUnpack(__pyx_t_5) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+      __Pyx_DECREF(__pyx_v_fillVec);
+      __pyx_v_fillVec = __pyx_t_3;
+      __pyx_t_3 = 0;
+      __Pyx_DECREF(__pyx_v_maskVec);
+      __pyx_v_maskVec = __pyx_t_2;
+      __pyx_t_2 = 0;
+    }
+    goto __pyx_L6;
+  }
 
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":37
- *     cdef int *fillLocs
- *     cdef char *mask
- *     fillLocs = <int *> fillVec.data             # <<<<<<<<<<<<<<
- *     mask = <char *> maskVec.data
- * 
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":6
+ *     if kind is None:
+ *         fillVec, maskVec = getMergeVec(newIndex, oldMap)
+ *     elif kind == 'PAD':             # <<<<<<<<<<<<<<
+ *         fillVec, maskVec = _pad(oldIndex, newIndex, oldMap, newMap)
+ *     elif kind == 'BACKFILL':
  */
-  __pyx_v_fillLocs = ((int *)__pyx_v_fillVec->data);
+  __pyx_t_4 = PyObject_RichCompare(__pyx_v_kind, ((PyObject *)__pyx_n_s__PAD), Py_EQ); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_4);
+  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  if (__pyx_t_1) {
 
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":38
- *     cdef char *mask
- *     fillLocs = <int *> fillVec.data
- *     mask = <char *> maskVec.data             # <<<<<<<<<<<<<<
- * 
- *     # Create the iterators
+    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":7
+ *         fillVec, maskVec = getMergeVec(newIndex, oldMap)
+ *     elif kind == 'PAD':
+ *         fillVec, maskVec = _pad(oldIndex, newIndex, oldMap, newMap)             # <<<<<<<<<<<<<<
+ *     elif kind == 'BACKFILL':
+ *         fillVec, maskVec = _backfill(oldIndex, newIndex, oldMap, newMap)
  */
-  __pyx_v_mask = ((char *)__pyx_v_maskVec->data);
+    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s___pad); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_4);
+    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_2);
+    __Pyx_INCREF(((PyObject *)__pyx_v_oldIndex));
+    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_oldIndex));
+    __Pyx_GIVEREF(((PyObject *)__pyx_v_oldIndex));
+    __Pyx_INCREF(((PyObject *)__pyx_v_newIndex));
+    PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_newIndex));
+    __Pyx_GIVEREF(((PyObject *)__pyx_v_newIndex));
+    __Pyx_INCREF(((PyObject *)__pyx_v_oldMap));
+    PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_oldMap));
+    __Pyx_GIVEREF(((PyObject *)__pyx_v_oldMap));
+    __Pyx_INCREF(((PyObject *)__pyx_v_newMap));
+    PyTuple_SET_ITEM(__pyx_t_2, 3, ((PyObject *)__pyx_v_newMap));
+    __Pyx_GIVEREF(((PyObject *)__pyx_v_newMap));
+    __pyx_t_3 = PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_3);
+    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+    if (PyTuple_CheckExact(__pyx_t_3) && likely(PyTuple_GET_SIZE(__pyx_t_3) == 2)) {
+      PyObject* tuple = __pyx_t_3;
+      __pyx_t_2 = PyTuple_GET_ITEM(tuple, 0); __Pyx_INCREF(__pyx_t_2);
+      __pyx_t_4 = PyTuple_GET_ITEM(tuple, 1); __Pyx_INCREF(__pyx_t_4);
+      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+      __Pyx_DECREF(__pyx_v_fillVec);
+      __pyx_v_fillVec = __pyx_t_2;
+      __pyx_t_2 = 0;
+      __Pyx_DECREF(__pyx_v_maskVec);
+      __pyx_v_maskVec = __pyx_t_4;
+      __pyx_t_4 = 0;
+    } else {
+      __pyx_t_5 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_5);
+      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+      __pyx_t_2 = __Pyx_UnpackItem(__pyx_t_5, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_2);
+      __pyx_t_4 = __Pyx_UnpackItem(__pyx_t_5, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_4);
+      if (__Pyx_EndUnpack(__pyx_t_5) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+      __Pyx_DECREF(__pyx_v_fillVec);
+      __pyx_v_fillVec = __pyx_t_2;
+      __pyx_t_2 = 0;
+      __Pyx_DECREF(__pyx_v_maskVec);
+      __pyx_v_maskVec = __pyx_t_4;
+      __pyx_t_4 = 0;
+    }
+    goto __pyx_L6;
+  }
 
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":42
- *     # Create the iterators
- *     cdef flatiter iterold, iternew
- *     iterold = <flatiter> PyArray_IterNew(oldIndex)             # <<<<<<<<<<<<<<
- *     iternew = <flatiter> PyArray_IterNew(newIndex)
- * 
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":8
+ *     elif kind == 'PAD':
+ *         fillVec, maskVec = _pad(oldIndex, newIndex, oldMap, newMap)
+ *     elif kind == 'BACKFILL':             # <<<<<<<<<<<<<<
+ *         fillVec, maskVec = _backfill(oldIndex, newIndex, oldMap, newMap)
+ *     else:
  */
-  __pyx_t_5 = PyArray_IterNew(((PyObject *)__pyx_v_oldIndex)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_5);
-  __Pyx_INCREF(((PyObject *)((PyArrayIterObject *)__pyx_t_5)));
-  __Pyx_DECREF(((PyObject *)__pyx_v_iterold));
-  __pyx_v_iterold = ((PyArrayIterObject *)__pyx_t_5);
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  __pyx_t_3 = PyObject_RichCompare(__pyx_v_kind, ((PyObject *)__pyx_n_s__BACKFILL), Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  if (__pyx_t_1) {
 
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":43
- *     cdef flatiter iterold, iternew
- *     iterold = <flatiter> PyArray_IterNew(oldIndex)
- *     iternew = <flatiter> PyArray_IterNew(newIndex)             # <<<<<<<<<<<<<<
- * 
- *     # Get the size
+    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":9
+ *         fillVec, maskVec = _pad(oldIndex, newIndex, oldMap, newMap)
+ *     elif kind == 'BACKFILL':
+ *         fillVec, maskVec = _backfill(oldIndex, newIndex, oldMap, newMap)             # <<<<<<<<<<<<<<
+ *     else:
+ *         raise Exception("Don't recognize fillMethod: %s" % kind)
  */
-  __pyx_t_5 = PyArray_IterNew(((PyObject *)__pyx_v_newIndex)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_5);
-  __Pyx_INCREF(((PyObject *)((PyArrayIterObject *)__pyx_t_5)));
-  __Pyx_DECREF(((PyObject *)__pyx_v_iternew));
-  __pyx_v_iternew = ((PyArrayIterObject *)__pyx_t_5);
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":46
- * 
- *     # Get the size
- *     oldLength = PyArray_SIZE(oldIndex)             # <<<<<<<<<<<<<<
- *     newLength = PyArray_SIZE(newIndex)
- * 
- */
-  __pyx_v_oldLength = PyArray_SIZE(__pyx_v_oldIndex);
-
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":47
- *     # Get the size
- *     oldLength = PyArray_SIZE(oldIndex)
- *     newLength = PyArray_SIZE(newIndex)             # <<<<<<<<<<<<<<
- * 
- *     # Current positions
- */
-  __pyx_v_newLength = PyArray_SIZE(__pyx_v_newIndex);
-
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":51
- *     # Current positions
- *     cdef int newPos, oldPos
- *     oldPos = oldLength - 1             # <<<<<<<<<<<<<<
- *     newPos = newLength - 1
- * 
- */
-  __pyx_v_oldPos = (__pyx_v_oldLength - 1);
-
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":52
- *     cdef int newPos, oldPos
- *     oldPos = oldLength - 1
- *     newPos = newLength - 1             # <<<<<<<<<<<<<<
- * 
- *     # References holding indices
- */
-  __pyx_v_newPos = (__pyx_v_newLength - 1);
-
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":57
- *     cdef object prevOld, curOld
- * 
- *     while newPos >= 0:             # <<<<<<<<<<<<<<
- *         # Move to the current position
- *         PyArray_ITER_GOTO1D(iternew, newPos)
- */
-  while (1) {
-    __pyx_t_7 = (__pyx_v_newPos >= 0);
-    if (!__pyx_t_7) break;
-
-    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":59
- *     while newPos >= 0:
- *         # Move to the current position
- *         PyArray_ITER_GOTO1D(iternew, newPos)             # <<<<<<<<<<<<<<
- *         PyArray_ITER_GOTO1D(iterold, oldPos)
- * 
- */
-    PyArray_ITER_GOTO1D(__pyx_v_iternew, __pyx_v_newPos);
-
-    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":60
- *         # Move to the current position
- *         PyArray_ITER_GOTO1D(iternew, newPos)
- *         PyArray_ITER_GOTO1D(iterold, oldPos)             # <<<<<<<<<<<<<<
- * 
- *         # Get the current index
- */
-    PyArray_ITER_GOTO1D(__pyx_v_iterold, __pyx_v_oldPos);
-
-    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":63
- * 
- *         # Get the current index
- *         curOld = PyArray_GETITEM(oldIndex, PyArray_ITER_DATA(iterold))             # <<<<<<<<<<<<<<
- * 
- *         # Until we reach a point where we are before the curOld point
- */
-    __pyx_t_5 = PyArray_GETITEM(__pyx_v_oldIndex, PyArray_ITER_DATA(__pyx_v_iterold)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_5);
-    __Pyx_DECREF(__pyx_v_curOld);
-    __pyx_v_curOld = __pyx_t_5;
-    __pyx_t_5 = 0;
-
-    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":66
- * 
- *         # Until we reach a point where we are before the curOld point
- *         while PyArray_GETITEM(newIndex, PyArray_ITER_DATA(iternew)) > curOld:             # <<<<<<<<<<<<<<
- *             newPos -= 1
- *             if newPos < 0:
- */
-    while (1) {
-      __pyx_t_5 = PyArray_GETITEM(__pyx_v_newIndex, PyArray_ITER_DATA(__pyx_v_iternew)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s___backfill); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_3);
+    __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_4);
+    __Pyx_INCREF(((PyObject *)__pyx_v_oldIndex));
+    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_oldIndex));
+    __Pyx_GIVEREF(((PyObject *)__pyx_v_oldIndex));
+    __Pyx_INCREF(((PyObject *)__pyx_v_newIndex));
+    PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_v_newIndex));
+    __Pyx_GIVEREF(((PyObject *)__pyx_v_newIndex));
+    __Pyx_INCREF(((PyObject *)__pyx_v_oldMap));
+    PyTuple_SET_ITEM(__pyx_t_4, 2, ((PyObject *)__pyx_v_oldMap));
+    __Pyx_GIVEREF(((PyObject *)__pyx_v_oldMap));
+    __Pyx_INCREF(((PyObject *)__pyx_v_newMap));
+    PyTuple_SET_ITEM(__pyx_t_4, 3, ((PyObject *)__pyx_v_newMap));
+    __Pyx_GIVEREF(((PyObject *)__pyx_v_newMap));
+    __pyx_t_2 = PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_2);
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+    if (PyTuple_CheckExact(__pyx_t_2) && likely(PyTuple_GET_SIZE(__pyx_t_2) == 2)) {
+      PyObject* tuple = __pyx_t_2;
+      __pyx_t_4 = PyTuple_GET_ITEM(tuple, 0); __Pyx_INCREF(__pyx_t_4);
+      __pyx_t_3 = PyTuple_GET_ITEM(tuple, 1); __Pyx_INCREF(__pyx_t_3);
+      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+      __Pyx_DECREF(__pyx_v_fillVec);
+      __pyx_v_fillVec = __pyx_t_4;
+      __pyx_t_4 = 0;
+      __Pyx_DECREF(__pyx_v_maskVec);
+      __pyx_v_maskVec = __pyx_t_3;
+      __pyx_t_3 = 0;
+    } else {
+      __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
       __Pyx_GOTREF(__pyx_t_5);
-      __pyx_t_6 = PyObject_RichCompare(__pyx_t_5, __pyx_v_curOld, Py_GT); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_6);
+      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+      __pyx_t_4 = __Pyx_UnpackItem(__pyx_t_5, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_4);
+      __pyx_t_3 = __Pyx_UnpackItem(__pyx_t_5, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_3);
+      if (__Pyx_EndUnpack(__pyx_t_5) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
       __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-      if (!__pyx_t_7) break;
-
-      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":67
- *         # Until we reach a point where we are before the curOld point
- *         while PyArray_GETITEM(newIndex, PyArray_ITER_DATA(iternew)) > curOld:
- *             newPos -= 1             # <<<<<<<<<<<<<<
- *             if newPos < 0:
- *                 break
- */
-      __pyx_v_newPos -= 1;
-
-      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":68
- *         while PyArray_GETITEM(newIndex, PyArray_ITER_DATA(iternew)) > curOld:
- *             newPos -= 1
- *             if newPos < 0:             # <<<<<<<<<<<<<<
- *                 break
- *             PyArray_ITER_GOTO1D(iternew, newPos)
- */
-      __pyx_t_7 = (__pyx_v_newPos < 0);
-      if (__pyx_t_7) {
-
-        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":69
- *             newPos -= 1
- *             if newPos < 0:
- *                 break             # <<<<<<<<<<<<<<
- *             PyArray_ITER_GOTO1D(iternew, newPos)
- * 
- */
-        goto __pyx_L6_break;
-        goto __pyx_L7;
-      }
-      __pyx_L7:;
-
-      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":70
- *             if newPos < 0:
- *                 break
- *             PyArray_ITER_GOTO1D(iternew, newPos)             # <<<<<<<<<<<<<<
- * 
- *         # Get the location in the old index
- */
-      PyArray_ITER_GOTO1D(__pyx_v_iternew, __pyx_v_newPos);
+      __Pyx_DECREF(__pyx_v_fillVec);
+      __pyx_v_fillVec = __pyx_t_4;
+      __pyx_t_4 = 0;
+      __Pyx_DECREF(__pyx_v_maskVec);
+      __pyx_v_maskVec = __pyx_t_3;
+      __pyx_t_3 = 0;
     }
-    __pyx_L6_break:;
+    goto __pyx_L6;
+  }
+  /*else*/ {
 
-    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":73
- * 
- *         # Get the location in the old index
- *         curLoc = oldMap[curOld]             # <<<<<<<<<<<<<<
+    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":11
+ *         fillVec, maskVec = _backfill(oldIndex, newIndex, oldMap, newMap)
+ *     else:
+ *         raise Exception("Don't recognize fillMethod: %s" % kind)             # <<<<<<<<<<<<<<
  * 
- *         # At the beginning of the old index
+ *     return fillVec, maskVec.astype(np.bool)
  */
-    __pyx_t_6 = PyObject_GetItem(((PyObject *)__pyx_v_oldMap), __pyx_v_curOld); if (!__pyx_t_6) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_6);
-    __pyx_t_8 = __Pyx_PyInt_AsInt(__pyx_t_6); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-    __pyx_v_curLoc = __pyx_t_8;
+    __pyx_t_2 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_4), __pyx_v_kind); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_2);
+    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_3);
+    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
+    __Pyx_GIVEREF(__pyx_t_2);
+    __pyx_t_2 = 0;
+    __pyx_t_2 = PyObject_Call(__pyx_builtin_Exception, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_2);
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+    __Pyx_Raise(__pyx_t_2, 0, 0);
+    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+    {__pyx_filename = __pyx_f[5]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  }
+  __pyx_L6:;
 
-    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":76
- * 
- *         # At the beginning of the old index
- *         if oldPos == 0:             # <<<<<<<<<<<<<<
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":13
+ *         raise Exception("Don't recognize fillMethod: %s" % kind)
  * 
- *             # Make sure we are before the curOld index
- */
-    __pyx_t_7 = (__pyx_v_oldPos == 0);
-    if (__pyx_t_7) {
-
-      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":79
+ *     return fillVec, maskVec.astype(np.bool)             # <<<<<<<<<<<<<<
  * 
- *             # Make sure we are before the curOld index
- *             if PyArray_GETITEM(newIndex, PyArray_ITER_DATA(iternew)) <= curOld:             # <<<<<<<<<<<<<<
- *                 fillVec[:newPos + 1] = curLoc
- *                 maskVec[:newPos + 1] = 1
+ * @cython.wraparound(False)
  */
-      __pyx_t_6 = PyArray_GETITEM(__pyx_v_newIndex, PyArray_ITER_DATA(__pyx_v_iternew)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_6);
-      __pyx_t_5 = PyObject_RichCompare(__pyx_t_6, __pyx_v_curOld, Py_LE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_5);
-      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-      if (__pyx_t_7) {
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_t_2 = PyObject_GetAttr(__pyx_v_maskVec, __pyx_n_s__astype); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_t_4 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__bool); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_4);
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
+  __Pyx_GIVEREF(__pyx_t_4);
+  __pyx_t_4 = 0;
+  __pyx_t_4 = PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_4);
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __Pyx_INCREF(__pyx_v_fillVec);
+  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_fillVec);
+  __Pyx_GIVEREF(__pyx_v_fillVec);
+  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
+  __Pyx_GIVEREF(__pyx_t_4);
+  __pyx_t_4 = 0;
+  __pyx_r = __pyx_t_3;
+  __pyx_t_3 = 0;
+  goto __pyx_L0;
 
-        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":80
- *             # Make sure we are before the curOld index
- *             if PyArray_GETITEM(newIndex, PyArray_ITER_DATA(iternew)) <= curOld:
- *                 fillVec[:newPos + 1] = curLoc             # <<<<<<<<<<<<<<
- *                 maskVec[:newPos + 1] = 1
- * 
- */
-        __pyx_t_5 = PyInt_FromLong(__pyx_v_curLoc); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-        __Pyx_GOTREF(__pyx_t_5);
-        if (PySequence_SetSlice(((PyObject *)__pyx_v_fillVec), 0, (__pyx_v_newPos + 1), __pyx_t_5) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_XDECREF(__pyx_t_3);
+  __Pyx_XDECREF(__pyx_t_4);
+  __Pyx_XDECREF(__pyx_t_5);
+  __Pyx_AddTraceback("tseries.getFillVec");
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_DECREF(__pyx_v_fillVec);
+  __Pyx_DECREF(__pyx_v_maskVec);
+  __Pyx_DECREF((PyObject *)__pyx_v_oldIndex);
+  __Pyx_DECREF((PyObject *)__pyx_v_newIndex);
+  __Pyx_DECREF(__pyx_v_oldMap);
+  __Pyx_DECREF(__pyx_v_newMap);
+  __Pyx_DECREF(__pyx_v_kind);
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
 
-        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":81
- *             if PyArray_GETITEM(newIndex, PyArray_ITER_DATA(iternew)) <= curOld:
- *                 fillVec[:newPos + 1] = curLoc
- *                 maskVec[:newPos + 1] = 1             # <<<<<<<<<<<<<<
+/* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":16
  * 
- *             # Exit the main loop
+ * @cython.wraparound(False)
+ * def _backfill(ndarray[object, ndim=1] oldIndex,             # <<<<<<<<<<<<<<
+ *               ndarray[object, ndim=1] newIndex,
+ *               dict oldMap, dict newMap):
  */
-        if (PySequence_SetSlice(((PyObject *)__pyx_v_maskVec), 0, (__pyx_v_newPos + 1), __pyx_int_1) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-        goto __pyx_L9;
-      }
-      __pyx_L9:;
 
-      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":84
- * 
- *             # Exit the main loop
- *             break             # <<<<<<<<<<<<<<
- * 
- *         else:
- */
-      goto __pyx_L4_break;
-      goto __pyx_L8;
+static PyObject *__pyx_pf_7tseries__backfill(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
+static char __pyx_doc_7tseries__backfill[] = "\n    Backfilling logic for generating fill vector\n\n    Diagram of what's going on\n\n    Old      New    Fill vector    Mask\n             .        0               1\n             .        0               1\n             .        0               1\n    A        A        0               1\n             .        1               1\n             .        1               1\n             .        1               1\n             .        1               1\n             .        1               1\n    B        B        1               1\n             .        2               1\n             .        2               1\n             .        2               1\n    C        C        2               1\n             .                        0\n             .                        0\n    D\n    ";
+static PyObject *__pyx_pf_7tseries__backfill(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
+  PyArrayObject *__pyx_v_oldIndex = 0;
+  PyArrayObject *__pyx_v_newIndex = 0;
+  PyObject *__pyx_v_oldMap = 0;
+  PyObject *__pyx_v_newMap = 0;
+  int __pyx_v_oldLength;
+  int __pyx_v_newLength;
+  int __pyx_v_curLoc;
+  PyArrayObject *__pyx_v_fillVec;
+  PyArrayObject *__pyx_v_mask;
+  int __pyx_v_newPos;
+  int __pyx_v_oldPos;
+  PyObject *__pyx_v_prevOld;
+  PyObject *__pyx_v_curOld;
+  Py_buffer __pyx_bstruct_oldIndex;
+  Py_ssize_t __pyx_bstride_0_oldIndex = 0;
+  Py_ssize_t __pyx_bshape_0_oldIndex = 0;
+  Py_buffer __pyx_bstruct_mask;
+  Py_ssize_t __pyx_bstride_0_mask = 0;
+  Py_ssize_t __pyx_bshape_0_mask = 0;
+  Py_buffer __pyx_bstruct_fillVec;
+  Py_ssize_t __pyx_bstride_0_fillVec = 0;
+  Py_ssize_t __pyx_bshape_0_fillVec = 0;
+  Py_buffer __pyx_bstruct_newIndex;
+  Py_ssize_t __pyx_bstride_0_newIndex = 0;
+  Py_ssize_t __pyx_bshape_0_newIndex = 0;
+  PyObject *__pyx_r = NULL;
+  Py_ssize_t __pyx_t_1;
+  PyObject *__pyx_t_2 = NULL;
+  PyObject *__pyx_t_3 = NULL;
+  PyObject *__pyx_t_4 = NULL;
+  PyObject *__pyx_t_5 = NULL;
+  PyObject *__pyx_t_6 = NULL;
+  PyArrayObject *__pyx_t_7 = NULL;
+  int __pyx_t_8;
+  PyObject *__pyx_t_9 = NULL;
+  PyObject *__pyx_t_10 = NULL;
+  PyObject *__pyx_t_11 = NULL;
+  PyArrayObject *__pyx_t_12 = NULL;
+  long __pyx_t_13;
+  long __pyx_t_14;
+  int __pyx_t_15;
+  int __pyx_t_16;
+  int __pyx_t_17;
+  int __pyx_t_18;
+  long __pyx_t_19;
+  int __pyx_t_20;
+  int __pyx_t_21;
+  int __pyx_t_22;
+  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__oldIndex,&__pyx_n_s__newIndex,&__pyx_n_s__oldMap,&__pyx_n_s__newMap,0};
+  __Pyx_RefNannySetupContext("_backfill");
+  __pyx_self = __pyx_self;
+  if (unlikely(__pyx_kwds)) {
+    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
+    PyObject* values[4] = {0,0,0,0};
+    switch (PyTuple_GET_SIZE(__pyx_args)) {
+      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
+      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
+      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
+      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
+      case  0: break;
+      default: goto __pyx_L5_argtuple_error;
     }
-    /*else*/ {
-
-      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":88
- *         else:
- *             # Move one position back
- *             PyArray_ITER_GOTO1D(iterold, oldPos - 1)             # <<<<<<<<<<<<<<
- * 
- *             # Get the index there
- */
-      PyArray_ITER_GOTO1D(__pyx_v_iterold, (__pyx_v_oldPos - 1));
-
-      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":91
- * 
- *             # Get the index there
- *             prevOld = PyArray_GETITEM(oldIndex, PyArray_ITER_DATA(iterold))             # <<<<<<<<<<<<<<
- * 
- *             # Until we reach the previous index
- */
-      __pyx_t_5 = PyArray_GETITEM(__pyx_v_oldIndex, PyArray_ITER_DATA(__pyx_v_iterold)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_5);
-      __Pyx_DECREF(__pyx_v_prevOld);
-      __pyx_v_prevOld = __pyx_t_5;
-      __pyx_t_5 = 0;
-
-      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":94
- * 
- *             # Until we reach the previous index
- *             while PyArray_GETITEM(newIndex, PyArray_ITER_DATA(iternew)) > prevOld:             # <<<<<<<<<<<<<<
- * 
- *                 # Set the current fill location
- */
-      while (1) {
-        __pyx_t_5 = PyArray_GETITEM(__pyx_v_newIndex, PyArray_ITER_DATA(__pyx_v_iternew)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-        __Pyx_GOTREF(__pyx_t_5);
-        __pyx_t_6 = PyObject_RichCompare(__pyx_t_5, __pyx_v_prevOld, Py_GT); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-        __Pyx_GOTREF(__pyx_t_6);
-        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-        __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-        if (!__pyx_t_7) break;
-
-        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":97
- * 
- *                 # Set the current fill location
- *                 fillLocs[newPos] = curLoc             # <<<<<<<<<<<<<<
- *                 mask[newPos] = 1
- * 
- */
-        (__pyx_v_fillLocs[__pyx_v_newPos]) = __pyx_v_curLoc;
-
-        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":98
- *                 # Set the current fill location
- *                 fillLocs[newPos] = curLoc
- *                 mask[newPos] = 1             # <<<<<<<<<<<<<<
- * 
- *                 newPos -= 1
- */
-        (__pyx_v_mask[__pyx_v_newPos]) = 1;
-
-        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":100
- *                 mask[newPos] = 1
- * 
- *                 newPos -= 1             # <<<<<<<<<<<<<<
- *                 if newPos < 0:
- *                     break
- */
-        __pyx_v_newPos -= 1;
-
-        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":101
- * 
- *                 newPos -= 1
- *                 if newPos < 0:             # <<<<<<<<<<<<<<
- *                     break
- * 
- */
-        __pyx_t_7 = (__pyx_v_newPos < 0);
-        if (__pyx_t_7) {
-
-          /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":102
- *                 newPos -= 1
- *                 if newPos < 0:
- *                     break             # <<<<<<<<<<<<<<
- * 
- *                 # Move the iterator back
- */
-          goto __pyx_L11_break;
-          goto __pyx_L12;
-        }
-        __pyx_L12:;
-
-        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":105
- * 
- *                 # Move the iterator back
- *                 PyArray_ITER_GOTO1D(iternew, newPos)             # <<<<<<<<<<<<<<
- * 
- *         # Move one period back
- */
-        PyArray_ITER_GOTO1D(__pyx_v_iternew, __pyx_v_newPos);
+    switch (PyTuple_GET_SIZE(__pyx_args)) {
+      case  0:
+      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__oldIndex);
+      if (likely(values[0])) kw_args--;
+      else goto __pyx_L5_argtuple_error;
+      case  1:
+      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__newIndex);
+      if (likely(values[1])) kw_args--;
+      else {
+        __Pyx_RaiseArgtupleInvalid("_backfill", 1, 4, 4, 1); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      }
+      case  2:
+      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__oldMap);
+      if (likely(values[2])) kw_args--;
+      else {
+        __Pyx_RaiseArgtupleInvalid("_backfill", 1, 4, 4, 2); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      }
+      case  3:
+      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__newMap);
+      if (likely(values[3])) kw_args--;
+      else {
+        __Pyx_RaiseArgtupleInvalid("_backfill", 1, 4, 4, 3); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
       }
-      __pyx_L11_break:;
     }
-    __pyx_L8:;
-
-    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":108
- * 
- *         # Move one period back
- *         oldPos -= 1             # <<<<<<<<<<<<<<
- * 
- *     for i from 0 <= i < newLength:
- */
-    __pyx_v_oldPos -= 1;
-  }
-  __pyx_L4_break:;
-
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":110
- *         oldPos -= 1
- * 
- *     for i from 0 <= i < newLength:             # <<<<<<<<<<<<<<
- *         if mask[i] == 0:
- *             # Fill from some generic location
- */
-  __pyx_t_8 = __pyx_v_newLength;
-  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {
-
-    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":111
- * 
- *     for i from 0 <= i < newLength:
- *         if mask[i] == 0:             # <<<<<<<<<<<<<<
- *             # Fill from some generic location
- *             fillLocs[i] = -1
- */
-    __pyx_t_7 = ((__pyx_v_mask[__pyx_v_i]) == 0);
-    if (__pyx_t_7) {
-
-      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":113
- *         if mask[i] == 0:
- *             # Fill from some generic location
- *             fillLocs[i] = -1             # <<<<<<<<<<<<<<
- * 
- *     return (fillVec, maskVec)
- */
-      (__pyx_v_fillLocs[__pyx_v_i]) = -1;
-      goto __pyx_L15;
+    if (unlikely(kw_args > 0)) {
+      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "_backfill") < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
     }
-    __pyx_L15:;
+    __pyx_v_oldIndex = ((PyArrayObject *)values[0]);
+    __pyx_v_newIndex = ((PyArrayObject *)values[1]);
+    __pyx_v_oldMap = ((PyObject *)values[2]);
+    __pyx_v_newMap = ((PyObject *)values[3]);
+  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
+    goto __pyx_L5_argtuple_error;
+  } else {
+    __pyx_v_oldIndex = ((PyArrayObject *)PyTuple_GET_ITEM(__pyx_args, 0));
+    __pyx_v_newIndex = ((PyArrayObject *)PyTuple_GET_ITEM(__pyx_args, 1));
+    __pyx_v_oldMap = ((PyObject *)PyTuple_GET_ITEM(__pyx_args, 2));
+    __pyx_v_newMap = ((PyObject *)PyTuple_GET_ITEM(__pyx_args, 3));
+  }
+  goto __pyx_L4_argument_unpacking_done;
+  __pyx_L5_argtuple_error:;
+  __Pyx_RaiseArgtupleInvalid("_backfill", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+  __pyx_L3_error:;
+  __Pyx_AddTraceback("tseries._backfill");
+  return NULL;
+  __pyx_L4_argument_unpacking_done:;
+  __Pyx_INCREF((PyObject *)__pyx_v_oldIndex);
+  __Pyx_INCREF((PyObject *)__pyx_v_newIndex);
+  __Pyx_INCREF(__pyx_v_oldMap);
+  __Pyx_INCREF(__pyx_v_newMap);
+  __pyx_v_fillVec = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None);
+  __pyx_v_mask = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None);
+  __pyx_v_prevOld = Py_None; __Pyx_INCREF(Py_None);
+  __pyx_v_curOld = Py_None; __Pyx_INCREF(Py_None);
+  __pyx_bstruct_fillVec.buf = NULL;
+  __pyx_bstruct_mask.buf = NULL;
+  __pyx_bstruct_oldIndex.buf = NULL;
+  __pyx_bstruct_newIndex.buf = NULL;
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_oldIndex), __pyx_ptype_5numpy_ndarray, 1, "oldIndex", 0))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_newIndex), __pyx_ptype_5numpy_ndarray, 1, "newIndex", 0))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_oldMap), &PyDict_Type, 1, "oldMap", 1))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_newMap), &PyDict_Type, 1, "newMap", 1))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  {
+    __Pyx_BufFmt_StackElem __pyx_stack[1];
+    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_oldIndex, (PyObject*)__pyx_v_oldIndex, &__Pyx_TypeInfo_object, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   }
+  __pyx_bstride_0_oldIndex = __pyx_bstruct_oldIndex.strides[0];
+  __pyx_bshape_0_oldIndex = __pyx_bstruct_oldIndex.shape[0];
+  {
+    __Pyx_BufFmt_StackElem __pyx_stack[1];
+    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_newIndex, (PyObject*)__pyx_v_newIndex, &__Pyx_TypeInfo_object, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  }
+  __pyx_bstride_0_newIndex = __pyx_bstruct_newIndex.strides[0];
+  __pyx_bshape_0_newIndex = __pyx_bstruct_newIndex.shape[0];
 
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":115
- *             fillLocs[i] = -1
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":51
  * 
- *     return (fillVec, maskVec)             # <<<<<<<<<<<<<<
+ *     # Get the size
+ *     oldLength = len(oldIndex)             # <<<<<<<<<<<<<<
+ *     newLength = len(newIndex)
  * 
- * cdef tuple _pad(ndarray oldIndex, ndarray newIndex, dict oldMap, dict newMap):
  */
-  __Pyx_XDECREF(((PyObject *)__pyx_r));
-  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_6);
-  __Pyx_INCREF(((PyObject *)__pyx_v_fillVec));
-  PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_v_fillVec));
-  __Pyx_GIVEREF(((PyObject *)__pyx_v_fillVec));
-  __Pyx_INCREF(((PyObject *)__pyx_v_maskVec));
-  PyTuple_SET_ITEM(__pyx_t_6, 1, ((PyObject *)__pyx_v_maskVec));
-  __Pyx_GIVEREF(((PyObject *)__pyx_v_maskVec));
-  if (!(likely(PyTuple_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected tuple, got %.200s", Py_TYPE(__pyx_t_6)->tp_name), 0))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __pyx_r = ((PyObject *)__pyx_t_6);
-  __pyx_t_6 = 0;
-  goto __pyx_L0;
-
-  __pyx_r = ((PyObject *)Py_None); __Pyx_INCREF(Py_None);
-  goto __pyx_L0;
-  __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
-  __Pyx_XDECREF(__pyx_t_2);
-  __Pyx_XDECREF(__pyx_t_4);
-  __Pyx_XDECREF(__pyx_t_5);
-  __Pyx_XDECREF(__pyx_t_6);
-  __Pyx_AddTraceback("tseries._backfill");
-  __pyx_r = 0;
-  __pyx_L0:;
-  __Pyx_DECREF((PyObject *)__pyx_v_fillVec);
-  __Pyx_DECREF((PyObject *)__pyx_v_maskVec);
-  __Pyx_DECREF((PyObject *)__pyx_v_iterold);
-  __Pyx_DECREF((PyObject *)__pyx_v_iternew);
-  __Pyx_DECREF(__pyx_v_prevOld);
-  __Pyx_DECREF(__pyx_v_curOld);
-  __Pyx_DECREF((PyObject *)__pyx_v_oldIndex);
-  __Pyx_DECREF((PyObject *)__pyx_v_newIndex);
-  __Pyx_DECREF(__pyx_v_oldMap);
-  __Pyx_DECREF(__pyx_v_newMap);
-  __Pyx_XGIVEREF(__pyx_r);
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
+  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_oldIndex)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_v_oldLength = __pyx_t_1;
 
-/* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":117
- *     return (fillVec, maskVec)
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":52
+ *     # Get the size
+ *     oldLength = len(oldIndex)
+ *     newLength = len(newIndex)             # <<<<<<<<<<<<<<
  * 
- * cdef tuple _pad(ndarray oldIndex, ndarray newIndex, dict oldMap, dict newMap):             # <<<<<<<<<<<<<<
- *     '''
- *     Padding logic for generating fill vector
+ *     fillVec = np.empty(len(newIndex), dtype = np.int32)
  */
+  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_newIndex)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_v_newLength = __pyx_t_1;
 
-static  PyObject *__pyx_f_7tseries__pad(PyArrayObject *__pyx_v_oldIndex, PyArrayObject *__pyx_v_newIndex, PyObject *__pyx_v_oldMap, PyObject *__pyx_v_newMap) {
-  PyArrayObject *__pyx_v_fillVec;
-  PyArrayObject *__pyx_v_maskVec;
-  int *__pyx_v_fillLocs;
-  char *__pyx_v_mask;
-  int __pyx_v_i;
-  int __pyx_v_oldLength;
-  int __pyx_v_newLength;
-  int __pyx_v_curLoc;
-  int __pyx_v_newPos;
-  int __pyx_v_oldPos;
-  PyArrayIterObject *__pyx_v_iterold;
-  PyArrayIterObject *__pyx_v_iternew;
-  PyObject *__pyx_v_nextOld;
-  PyObject *__pyx_v_curOld;
-  char __pyx_v_done;
-  PyObject *__pyx_r = NULL;
-  PyObject *__pyx_t_1 = NULL;
-  PyObject *__pyx_t_2 = NULL;
-  Py_ssize_t __pyx_t_3;
-  PyObject *__pyx_t_4 = NULL;
-  PyObject *__pyx_t_5 = NULL;
-  PyObject *__pyx_t_6 = NULL;
-  int __pyx_t_7;
-  int __pyx_t_8;
-  char __pyx_t_9;
-  __Pyx_RefNannySetupContext("_pad");
-  __Pyx_INCREF((PyObject *)__pyx_v_oldIndex);
-  __Pyx_INCREF((PyObject *)__pyx_v_newIndex);
-  __Pyx_INCREF(__pyx_v_oldMap);
-  __Pyx_INCREF(__pyx_v_newMap);
-  __pyx_v_fillVec = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None);
-  __pyx_v_maskVec = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None);
-  __pyx_v_iterold = ((PyArrayIterObject *)Py_None); __Pyx_INCREF(Py_None);
-  __pyx_v_iternew = ((PyArrayIterObject *)Py_None); __Pyx_INCREF(Py_None);
-  __pyx_v_nextOld = Py_None; __Pyx_INCREF(Py_None);
-  __pyx_v_curOld = Py_None; __Pyx_INCREF(Py_None);
-
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":151
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":54
+ *     newLength = len(newIndex)
  * 
- *     # Make empty fill vector and mask vector, cast to ndarray
- *     fillVec = <ndarray> np.empty(len(newIndex), dtype = np.int32)             # <<<<<<<<<<<<<<
- *     maskVec = <ndarray> np.zeros(len(newIndex), dtype = np.int8)
+ *     fillVec = np.empty(len(newIndex), dtype = np.int32)             # <<<<<<<<<<<<<<
+ *     fillVec.fill(-1)
  * 
  */
-  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__empty); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_newIndex)); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_newIndex)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_4);
-  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
-  __Pyx_GIVEREF(__pyx_t_1);
-  __pyx_t_1 = 0;
-  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
-  __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
+  __Pyx_GIVEREF(__pyx_t_2);
+  __pyx_t_2 = 0;
+  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
+  __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_6 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__int32); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_6 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__int32); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_6);
   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__dtype), __pyx_t_6) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (PyDict_SetItem(__pyx_t_2, ((PyObject *)__pyx_n_s__dtype), __pyx_t_6) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-  __pyx_t_6 = PyEval_CallObjectWithKeywords(__pyx_t_2, __pyx_t_4, ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_6 = PyEval_CallObjectWithKeywords(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_t_2)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_6);
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
-  __Pyx_INCREF(((PyObject *)((PyArrayObject *)__pyx_t_6)));
+  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
+  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
+  {
+    __Pyx_BufFmt_StackElem __pyx_stack[1];
+    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_fillVec);
+    __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_bstruct_fillVec, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
+    if (unlikely(__pyx_t_8 < 0)) {
+      PyErr_Fetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
+      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_fillVec, (PyObject*)__pyx_v_fillVec, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
+        Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11);
+        __Pyx_RaiseBufferFallbackError();
+      } else {
+        PyErr_Restore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
+      }
+    }
+    __pyx_bstride_0_fillVec = __pyx_bstruct_fillVec.strides[0];
+    __pyx_bshape_0_fillVec = __pyx_bstruct_fillVec.shape[0];
+    if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  }
+  __pyx_t_7 = 0;
   __Pyx_DECREF(((PyObject *)__pyx_v_fillVec));
   __pyx_v_fillVec = ((PyArrayObject *)__pyx_t_6);
-  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+  __pyx_t_6 = 0;
 
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":152
- *     # Make empty fill vector and mask vector, cast to ndarray
- *     fillVec = <ndarray> np.empty(len(newIndex), dtype = np.int32)
- *     maskVec = <ndarray> np.zeros(len(newIndex), dtype = np.int8)             # <<<<<<<<<<<<<<
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":55
  * 
- *     # Get reference to the arrays inside
+ *     fillVec = np.empty(len(newIndex), dtype = np.int32)
+ *     fillVec.fill(-1)             # <<<<<<<<<<<<<<
+ * 
+ *     mask = np.zeros(len(newIndex), dtype = np.int8)
  */
-  __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_6);
-  __pyx_t_1 = PyObject_GetAttr(__pyx_t_6, __pyx_n_s__zeros); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_1);
-  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-  __pyx_t_3 = PyObject_Length(((PyObject *)__pyx_v_newIndex)); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_6 = PyObject_GetAttr(((PyObject *)__pyx_v_fillVec), __pyx_n_s__fill); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_6);
-  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_4);
-  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
-  __Pyx_GIVEREF(__pyx_t_6);
-  __pyx_t_6 = 0;
-  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(((PyObject *)__pyx_t_6));
-  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_5 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__int8); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_5);
+  __Pyx_INCREF(__pyx_int_neg_1);
+  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_int_neg_1);
+  __Pyx_GIVEREF(__pyx_int_neg_1);
+  __pyx_t_4 = PyObject_Call(__pyx_t_6, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_4);
+  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  if (PyDict_SetItem(__pyx_t_6, ((PyObject *)__pyx_n_s__dtype), __pyx_t_5) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __pyx_t_5 = PyEval_CallObjectWithKeywords(__pyx_t_1, __pyx_t_4, ((PyObject *)__pyx_t_6)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_5);
-  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
-  __Pyx_INCREF(((PyObject *)((PyArrayObject *)__pyx_t_5)));
-  __Pyx_DECREF(((PyObject *)__pyx_v_maskVec));
-  __pyx_v_maskVec = ((PyArrayObject *)__pyx_t_5);
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
 
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":155
- * 
- *     # Get reference to the arrays inside
- *     fillLocs = <int *> fillVec.data             # <<<<<<<<<<<<<<
- *     mask = <char *> maskVec.data
- * 
- */
-  __pyx_v_fillLocs = ((int *)__pyx_v_fillVec->data);
-
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":156
- *     # Get reference to the arrays inside
- *     fillLocs = <int *> fillVec.data
- *     mask = <char *> maskVec.data             # <<<<<<<<<<<<<<
- * 
- *     # Create simple ndarray iterators using C API
- */
-  __pyx_v_mask = ((char *)__pyx_v_maskVec->data);
-
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":159
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":57
+ *     fillVec.fill(-1)
  * 
- *     # Create simple ndarray iterators using C API
- *     iterold = <flatiter> PyArray_IterNew(oldIndex)             # <<<<<<<<<<<<<<
- *     iternew = <flatiter> PyArray_IterNew(newIndex)
+ *     mask = np.zeros(len(newIndex), dtype = np.int8)             # <<<<<<<<<<<<<<
  * 
+ *     # Current positions
  */
-  __pyx_t_5 = PyArray_IterNew(((PyObject *)__pyx_v_oldIndex)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_4);
+  __pyx_t_2 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__zeros); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_newIndex)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_4);
+  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_6);
+  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
+  __Pyx_GIVEREF(__pyx_t_4);
+  __pyx_t_4 = 0;
+  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
+  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_t_5 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__int8); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_5);
-  __Pyx_INCREF(((PyObject *)((PyArrayIterObject *)__pyx_t_5)));
-  __Pyx_DECREF(((PyObject *)__pyx_v_iterold));
-  __pyx_v_iterold = ((PyArrayIterObject *)__pyx_t_5);
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  if (PyDict_SetItem(__pyx_t_4, ((PyObject *)__pyx_n_s__dtype), __pyx_t_5) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":160
- *     # Create simple ndarray iterators using C API
- *     iterold = <flatiter> PyArray_IterNew(oldIndex)
- *     iternew = <flatiter> PyArray_IterNew(newIndex)             # <<<<<<<<<<<<<<
- * 
- *     # Length of each index
- */
-  __pyx_t_5 = PyArray_IterNew(((PyObject *)__pyx_v_newIndex)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_5 = PyEval_CallObjectWithKeywords(__pyx_t_2, __pyx_t_6, ((PyObject *)__pyx_t_4)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_5);
-  __Pyx_INCREF(((PyObject *)((PyArrayIterObject *)__pyx_t_5)));
-  __Pyx_DECREF(((PyObject *)__pyx_v_iternew));
-  __pyx_v_iternew = ((PyArrayIterObject *)__pyx_t_5);
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
+  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_12 = ((PyArrayObject *)__pyx_t_5);
+  {
+    __Pyx_BufFmt_StackElem __pyx_stack[1];
+    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_mask);
+    __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_bstruct_mask, (PyObject*)__pyx_t_12, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int8_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
+    if (unlikely(__pyx_t_8 < 0)) {
+      PyErr_Fetch(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9);
+      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_mask, (PyObject*)__pyx_v_mask, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int8_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
+        Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9);
+        __Pyx_RaiseBufferFallbackError();
+      } else {
+        PyErr_Restore(__pyx_t_11, __pyx_t_10, __pyx_t_9);
+      }
+    }
+    __pyx_bstride_0_mask = __pyx_bstruct_mask.strides[0];
+    __pyx_bshape_0_mask = __pyx_bstruct_mask.shape[0];
+    if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  }
+  __pyx_t_12 = 0;
+  __Pyx_DECREF(((PyObject *)__pyx_v_mask));
+  __pyx_v_mask = ((PyArrayObject *)__pyx_t_5);
+  __pyx_t_5 = 0;
 
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":163
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":60
  * 
- *     # Length of each index
- *     oldLength = PyArray_SIZE(oldIndex)             # <<<<<<<<<<<<<<
- *     newLength = PyArray_SIZE(newIndex)
+ *     # Current positions
+ *     oldPos = oldLength - 1             # <<<<<<<<<<<<<<
+ *     newPos = newLength - 1
  * 
  */
-  __pyx_v_oldLength = PyArray_SIZE(__pyx_v_oldIndex);
+  __pyx_v_oldPos = (__pyx_v_oldLength - 1);
 
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":164
- *     # Length of each index
- *     oldLength = PyArray_SIZE(oldIndex)
- *     newLength = PyArray_SIZE(newIndex)             # <<<<<<<<<<<<<<
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":61
+ *     # Current positions
+ *     oldPos = oldLength - 1
+ *     newPos = newLength - 1             # <<<<<<<<<<<<<<
  * 
- *     oldPos = 0
+ *     # corner case, no filling possible
  */
-  __pyx_v_newLength = PyArray_SIZE(__pyx_v_newIndex);
+  __pyx_v_newPos = (__pyx_v_newLength - 1);
 
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":166
- *     newLength = PyArray_SIZE(newIndex)
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":64
+ * 
+ *     # corner case, no filling possible
+ *     if newIndex[0] > oldIndex[oldLength - 1]:             # <<<<<<<<<<<<<<
+ *         return fillVec, mask
  * 
- *     oldPos = 0             # <<<<<<<<<<<<<<
- *     newPos = 0
- *     while newPos < newLength:
  */
-  __pyx_v_oldPos = 0;
+  __pyx_t_13 = 0;
+  __pyx_t_8 = -1;
+  if (__pyx_t_13 < 0) {
+    __pyx_t_8 = 0;
+  } else if (unlikely(__pyx_t_13 >= __pyx_bshape_0_newIndex)) __pyx_t_8 = 0;
+  if (unlikely(__pyx_t_8 != -1)) {
+    __Pyx_RaiseBufferIndexError(__pyx_t_8);
+    {__pyx_filename = __pyx_f[5]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  }
+  __pyx_t_5 = *__Pyx_BufPtrStrided1d(PyObject **, __pyx_bstruct_newIndex.buf, __pyx_t_13, __pyx_bstride_0_newIndex);
+  __Pyx_INCREF((PyObject*)__pyx_t_5);
+  __pyx_t_14 = (__pyx_v_oldLength - 1);
+  __pyx_t_8 = -1;
+  if (__pyx_t_14 < 0) {
+    __pyx_t_8 = 0;
+  } else if (unlikely(__pyx_t_14 >= __pyx_bshape_0_oldIndex)) __pyx_t_8 = 0;
+  if (unlikely(__pyx_t_8 != -1)) {
+    __Pyx_RaiseBufferIndexError(__pyx_t_8);
+    {__pyx_filename = __pyx_f[5]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  }
+  __pyx_t_4 = *__Pyx_BufPtrStrided1d(PyObject **, __pyx_bstruct_oldIndex.buf, __pyx_t_14, __pyx_bstride_0_oldIndex);
+  __Pyx_INCREF((PyObject*)__pyx_t_4);
+  __pyx_t_6 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_GT); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_6);
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_15 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+  if (__pyx_t_15) {
 
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":167
+    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":65
+ *     # corner case, no filling possible
+ *     if newIndex[0] > oldIndex[oldLength - 1]:
+ *         return fillVec, mask             # <<<<<<<<<<<<<<
  * 
- *     oldPos = 0
- *     newPos = 0             # <<<<<<<<<<<<<<
- *     while newPos < newLength:
- *         curOld = PyArray_GETITEM(oldIndex, PyArray_ITER_DATA(iterold))
+ *     while newPos >= 0:
  */
-  __pyx_v_newPos = 0;
+    __Pyx_XDECREF(__pyx_r);
+    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_6);
+    __Pyx_INCREF(((PyObject *)__pyx_v_fillVec));
+    PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_v_fillVec));
+    __Pyx_GIVEREF(((PyObject *)__pyx_v_fillVec));
+    __Pyx_INCREF(((PyObject *)__pyx_v_mask));
+    PyTuple_SET_ITEM(__pyx_t_6, 1, ((PyObject *)__pyx_v_mask));
+    __Pyx_GIVEREF(((PyObject *)__pyx_v_mask));
+    __pyx_r = __pyx_t_6;
+    __pyx_t_6 = 0;
+    goto __pyx_L0;
+    goto __pyx_L6;
+  }
+  __pyx_L6:;
 
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":168
- *     oldPos = 0
- *     newPos = 0
- *     while newPos < newLength:             # <<<<<<<<<<<<<<
- *         curOld = PyArray_GETITEM(oldIndex, PyArray_ITER_DATA(iterold))
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":67
+ *         return fillVec, mask
+ * 
+ *     while newPos >= 0:             # <<<<<<<<<<<<<<
+ *         curOld = oldIndex[oldPos]
  * 
  */
   while (1) {
-    __pyx_t_7 = (__pyx_v_newPos < __pyx_v_newLength);
-    if (!__pyx_t_7) break;
+    __pyx_t_15 = (__pyx_v_newPos >= 0);
+    if (!__pyx_t_15) break;
 
-    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":169
- *     newPos = 0
- *     while newPos < newLength:
- *         curOld = PyArray_GETITEM(oldIndex, PyArray_ITER_DATA(iterold))             # <<<<<<<<<<<<<<
+    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":68
  * 
- *         # At beginning, keep going until we go exceed the
+ *     while newPos >= 0:
+ *         curOld = oldIndex[oldPos]             # <<<<<<<<<<<<<<
+ * 
+ *         # Until we reach a point where we are before the curOld point
  */
-    __pyx_t_5 = PyArray_GETITEM(__pyx_v_oldIndex, PyArray_ITER_DATA(__pyx_v_iterold)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_5);
+    __pyx_t_8 = __pyx_v_oldPos;
+    __pyx_t_16 = -1;
+    if (__pyx_t_8 < 0) {
+      __pyx_t_16 = 0;
+    } else if (unlikely(__pyx_t_8 >= __pyx_bshape_0_oldIndex)) __pyx_t_16 = 0;
+    if (unlikely(__pyx_t_16 != -1)) {
+      __Pyx_RaiseBufferIndexError(__pyx_t_16);
+      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    }
+    __pyx_t_6 = *__Pyx_BufPtrStrided1d(PyObject **, __pyx_bstruct_oldIndex.buf, __pyx_t_8, __pyx_bstride_0_oldIndex);
+    __Pyx_INCREF((PyObject*)__pyx_t_6);
     __Pyx_DECREF(__pyx_v_curOld);
-    __pyx_v_curOld = __pyx_t_5;
-    __pyx_t_5 = 0;
+    __pyx_v_curOld = __pyx_t_6;
+    __pyx_t_6 = 0;
 
-    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":173
- *         # At beginning, keep going until we go exceed the
- *         # first OLD index in the NEW index
- *         while PyArray_GETITEM(newIndex, PyArray_ITER_DATA(iternew)) < curOld:             # <<<<<<<<<<<<<<
- *             newPos += 1
- *             if newPos > newLength - 1:
+    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":71
+ * 
+ *         # Until we reach a point where we are before the curOld point
+ *         while newIndex[newPos] > curOld:             # <<<<<<<<<<<<<<
+ *             newPos -= 1
+ *             if newPos < 0:
  */
     while (1) {
-      __pyx_t_5 = PyArray_GETITEM(__pyx_v_newIndex, PyArray_ITER_DATA(__pyx_v_iternew)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_5);
-      __pyx_t_6 = PyObject_RichCompare(__pyx_t_5, __pyx_v_curOld, Py_LT); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_6);
-      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __pyx_t_16 = __pyx_v_newPos;
+      __pyx_t_17 = -1;
+      if (__pyx_t_16 < 0) {
+        __pyx_t_17 = 0;
+      } else if (unlikely(__pyx_t_16 >= __pyx_bshape_0_newIndex)) __pyx_t_17 = 0;
+      if (unlikely(__pyx_t_17 != -1)) {
+        __Pyx_RaiseBufferIndexError(__pyx_t_17);
+        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      }
+      __pyx_t_6 = *__Pyx_BufPtrStrided1d(PyObject **, __pyx_bstruct_newIndex.buf, __pyx_t_16, __pyx_bstride_0_newIndex);
+      __Pyx_INCREF((PyObject*)__pyx_t_6);
+      __pyx_t_4 = PyObject_RichCompare(__pyx_t_6, __pyx_v_curOld, Py_GT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_4);
       __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-      if (!__pyx_t_7) break;
+      __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_15 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+      if (!__pyx_t_15) break;
 
-      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":174
- *         # first OLD index in the NEW index
- *         while PyArray_GETITEM(newIndex, PyArray_ITER_DATA(iternew)) < curOld:
- *             newPos += 1             # <<<<<<<<<<<<<<
- *             if newPos > newLength - 1:
+      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":72
+ *         # Until we reach a point where we are before the curOld point
+ *         while newIndex[newPos] > curOld:
+ *             newPos -= 1             # <<<<<<<<<<<<<<
+ *             if newPos < 0:
  *                 break
  */
-      __pyx_v_newPos += 1;
+      __pyx_v_newPos -= 1;
 
-      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":175
- *         while PyArray_GETITEM(newIndex, PyArray_ITER_DATA(iternew)) < curOld:
- *             newPos += 1
- *             if newPos > newLength - 1:             # <<<<<<<<<<<<<<
+      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":73
+ *         while newIndex[newPos] > curOld:
+ *             newPos -= 1
+ *             if newPos < 0:             # <<<<<<<<<<<<<<
  *                 break
- *             PyArray_ITER_NEXT(iternew)
+ * 
  */
-      __pyx_t_7 = (__pyx_v_newPos > (__pyx_v_newLength - 1));
-      if (__pyx_t_7) {
+      __pyx_t_15 = (__pyx_v_newPos < 0);
+      if (__pyx_t_15) {
 
-        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":176
- *             newPos += 1
- *             if newPos > newLength - 1:
+        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":74
+ *             newPos -= 1
+ *             if newPos < 0:
  *                 break             # <<<<<<<<<<<<<<
- *             PyArray_ITER_NEXT(iternew)
  * 
+ *         # Get the location in the old index
  */
-        goto __pyx_L6_break;
-        goto __pyx_L7;
+        goto __pyx_L10_break;
+        goto __pyx_L11;
       }
-      __pyx_L7:;
-
-      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":177
- *             if newPos > newLength - 1:
- *                 break
- *             PyArray_ITER_NEXT(iternew)             # <<<<<<<<<<<<<<
- * 
- *         # We got there, get the current location in the old index
- */
-      PyArray_ITER_NEXT(__pyx_v_iternew);
+      __pyx_L11:;
     }
-    __pyx_L6_break:;
+    __pyx_L10_break:;
 
-    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":180
+    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":77
  * 
- *         # We got there, get the current location in the old index
+ *         # Get the location in the old index
  *         curLoc = oldMap[curOld]             # <<<<<<<<<<<<<<
  * 
- *         # We're at the end of the road, need to propagate this value to the end
+ *         # At the beginning of the old index
  */
-    __pyx_t_6 = PyObject_GetItem(((PyObject *)__pyx_v_oldMap), __pyx_v_curOld); if (!__pyx_t_6) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_6);
-    __pyx_t_8 = __Pyx_PyInt_AsInt(__pyx_t_6); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-    __pyx_v_curLoc = __pyx_t_8;
+    __pyx_t_4 = PyObject_GetItem(((PyObject *)__pyx_v_oldMap), __pyx_v_curOld); if (!__pyx_t_4) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_4);
+    __pyx_t_17 = __Pyx_PyInt_AsInt(__pyx_t_4); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+    __pyx_v_curLoc = __pyx_t_17;
 
-    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":183
+    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":80
  * 
- *         # We're at the end of the road, need to propagate this value to the end
- *         if oldPos == oldLength - 1:             # <<<<<<<<<<<<<<
- *             if PyArray_GETITEM(newIndex, PyArray_ITER_DATA(iternew)) >= curOld:
- *                 fillVec[newPos:] = curLoc
+ *         # At the beginning of the old index
+ *         if oldPos == 0:             # <<<<<<<<<<<<<<
+ *             # Make sure we are before the curOld index
+ *             if newIndex[newPos] <= curOld:
  */
-    __pyx_t_7 = (__pyx_v_oldPos == (__pyx_v_oldLength - 1));
-    if (__pyx_t_7) {
+    __pyx_t_15 = (__pyx_v_oldPos == 0);
+    if (__pyx_t_15) {
 
-      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":184
- *         # We're at the end of the road, need to propagate this value to the end
- *         if oldPos == oldLength - 1:
- *             if PyArray_GETITEM(newIndex, PyArray_ITER_DATA(iternew)) >= curOld:             # <<<<<<<<<<<<<<
- *                 fillVec[newPos:] = curLoc
- *                 maskVec[newPos:] = 1
+      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":82
+ *         if oldPos == 0:
+ *             # Make sure we are before the curOld index
+ *             if newIndex[newPos] <= curOld:             # <<<<<<<<<<<<<<
+ *                 fillVec[:newPos + 1] = curLoc
+ *                 mask[:newPos + 1] = 1
  */
-      __pyx_t_6 = PyArray_GETITEM(__pyx_v_newIndex, PyArray_ITER_DATA(__pyx_v_iternew)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __pyx_t_17 = __pyx_v_newPos;
+      __pyx_t_18 = -1;
+      if (__pyx_t_17 < 0) {
+        __pyx_t_18 = 0;
+      } else if (unlikely(__pyx_t_17 >= __pyx_bshape_0_newIndex)) __pyx_t_18 = 0;
+      if (unlikely(__pyx_t_18 != -1)) {
+        __Pyx_RaiseBufferIndexError(__pyx_t_18);
+        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      }
+      __pyx_t_4 = *__Pyx_BufPtrStrided1d(PyObject **, __pyx_bstruct_newIndex.buf, __pyx_t_17, __pyx_bstride_0_newIndex);
+      __Pyx_INCREF((PyObject*)__pyx_t_4);
+      __pyx_t_6 = PyObject_RichCompare(__pyx_t_4, __pyx_v_curOld, Py_LE); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
       __Pyx_GOTREF(__pyx_t_6);
-      __pyx_t_5 = PyObject_RichCompare(__pyx_t_6, __pyx_v_curOld, Py_GE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_5);
+      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+      __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_15 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
       __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-      if (__pyx_t_7) {
+      if (__pyx_t_15) {
 
-        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":185
- *         if oldPos == oldLength - 1:
- *             if PyArray_GETITEM(newIndex, PyArray_ITER_DATA(iternew)) >= curOld:
- *                 fillVec[newPos:] = curLoc             # <<<<<<<<<<<<<<
- *                 maskVec[newPos:] = 1
- *             break
+        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":83
+ *             # Make sure we are before the curOld index
+ *             if newIndex[newPos] <= curOld:
+ *                 fillVec[:newPos + 1] = curLoc             # <<<<<<<<<<<<<<
+ *                 mask[:newPos + 1] = 1
+ *             # Exit the main loop
  */
-        __pyx_t_5 = PyInt_FromLong(__pyx_v_curLoc); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-        __Pyx_GOTREF(__pyx_t_5);
-        if (PySequence_SetSlice(((PyObject *)__pyx_v_fillVec), __pyx_v_newPos, PY_SSIZE_T_MAX, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+        __pyx_t_6 = PyInt_FromLong(__pyx_v_curLoc); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_6);
+        if (PySequence_SetSlice(((PyObject *)__pyx_v_fillVec), 0, (__pyx_v_newPos + 1), __pyx_t_6) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
 
-        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":186
- *             if PyArray_GETITEM(newIndex, PyArray_ITER_DATA(iternew)) >= curOld:
- *                 fillVec[newPos:] = curLoc
- *                 maskVec[newPos:] = 1             # <<<<<<<<<<<<<<
+        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":84
+ *             if newIndex[newPos] <= curOld:
+ *                 fillVec[:newPos + 1] = curLoc
+ *                 mask[:newPos + 1] = 1             # <<<<<<<<<<<<<<
+ *             # Exit the main loop
  *             break
- *         else:
  */
-        if (PySequence_SetSlice(((PyObject *)__pyx_v_maskVec), __pyx_v_newPos, PY_SSIZE_T_MAX, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-        goto __pyx_L9;
+        if (PySequence_SetSlice(((PyObject *)__pyx_v_mask), 0, (__pyx_v_newPos + 1), __pyx_int_1) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        goto __pyx_L13;
       }
-      __pyx_L9:;
+      __pyx_L13:;
 
-      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":187
- *                 fillVec[newPos:] = curLoc
- *                 maskVec[newPos:] = 1
+      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":86
+ *                 mask[:newPos + 1] = 1
+ *             # Exit the main loop
  *             break             # <<<<<<<<<<<<<<
  *         else:
- *             # Not at the end, need to go about filling
+ *             # Get the index there
  */
-      goto __pyx_L4_break;
-      goto __pyx_L8;
+      goto __pyx_L8_break;
+      goto __pyx_L12;
     }
     /*else*/ {
 
-      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":192
- * 
- *             # Get the next index so we know when to stop propagating this value
- *             PyArray_ITER_NEXT(iterold)             # <<<<<<<<<<<<<<
- *             nextOld = PyArray_GETITEM(oldIndex, PyArray_ITER_DATA(iterold))
- * 
- */
-      PyArray_ITER_NEXT(__pyx_v_iterold);
-
-      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":193
- *             # Get the next index so we know when to stop propagating this value
- *             PyArray_ITER_NEXT(iterold)
- *             nextOld = PyArray_GETITEM(oldIndex, PyArray_ITER_DATA(iterold))             # <<<<<<<<<<<<<<
- * 
- *             done = 0
- */
-      __pyx_t_5 = PyArray_GETITEM(__pyx_v_oldIndex, PyArray_ITER_DATA(__pyx_v_iterold)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_5);
-      __Pyx_DECREF(__pyx_v_nextOld);
-      __pyx_v_nextOld = __pyx_t_5;
-      __pyx_t_5 = 0;
-
-      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":195
- *             nextOld = PyArray_GETITEM(oldIndex, PyArray_ITER_DATA(iterold))
- * 
- *             done = 0             # <<<<<<<<<<<<<<
+      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":89
+ *         else:
+ *             # Get the index there
+ *             prevOld = oldIndex[oldPos - 1]             # <<<<<<<<<<<<<<
  * 
- *             # Until we reach the next OLD value in the NEW index
+ *             # Until we reach the previous index
  */
-      __pyx_v_done = 0;
+      __pyx_t_19 = (__pyx_v_oldPos - 1);
+      __pyx_t_18 = -1;
+      if (__pyx_t_19 < 0) {
+        __pyx_t_18 = 0;
+      } else if (unlikely(__pyx_t_19 >= __pyx_bshape_0_oldIndex)) __pyx_t_18 = 0;
+      if (unlikely(__pyx_t_18 != -1)) {
+        __Pyx_RaiseBufferIndexError(__pyx_t_18);
+        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      }
+      __pyx_t_6 = *__Pyx_BufPtrStrided1d(PyObject **, __pyx_bstruct_oldIndex.buf, __pyx_t_19, __pyx_bstride_0_oldIndex);
+      __Pyx_INCREF((PyObject*)__pyx_t_6);
+      __Pyx_DECREF(__pyx_v_prevOld);
+      __pyx_v_prevOld = __pyx_t_6;
+      __pyx_t_6 = 0;
 
-      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":198
+      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":92
  * 
- *             # Until we reach the next OLD value in the NEW index
- *             while PyArray_GETITEM(newIndex, PyArray_ITER_DATA(iternew)) < nextOld:             # <<<<<<<<<<<<<<
- * 
- *                 # Use this location to fill
+ *             # Until we reach the previous index
+ *             while newIndex[newPos] > prevOld:             # <<<<<<<<<<<<<<
+ *                 # Set the current fill location
+ *                 fillVec[newPos] = curLoc
  */
       while (1) {
-        __pyx_t_5 = PyArray_GETITEM(__pyx_v_newIndex, PyArray_ITER_DATA(__pyx_v_iternew)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-        __Pyx_GOTREF(__pyx_t_5);
-        __pyx_t_6 = PyObject_RichCompare(__pyx_t_5, __pyx_v_nextOld, Py_LT); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-        __Pyx_GOTREF(__pyx_t_6);
-        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-        __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __pyx_t_18 = __pyx_v_newPos;
+        __pyx_t_20 = -1;
+        if (__pyx_t_18 < 0) {
+          __pyx_t_20 = 0;
+        } else if (unlikely(__pyx_t_18 >= __pyx_bshape_0_newIndex)) __pyx_t_20 = 0;
+        if (unlikely(__pyx_t_20 != -1)) {
+          __Pyx_RaiseBufferIndexError(__pyx_t_20);
+          {__pyx_filename = __pyx_f[5]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        }
+        __pyx_t_6 = *__Pyx_BufPtrStrided1d(PyObject **, __pyx_bstruct_newIndex.buf, __pyx_t_18, __pyx_bstride_0_newIndex);
+        __Pyx_INCREF((PyObject*)__pyx_t_6);
+        __pyx_t_4 = PyObject_RichCompare(__pyx_t_6, __pyx_v_prevOld, Py_GT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_4);
         __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-        if (!__pyx_t_7) break;
+        __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_15 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+        if (!__pyx_t_15) break;
 
-        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":201
- * 
- *                 # Use this location to fill
- *                 fillLocs[newPos] = curLoc             # <<<<<<<<<<<<<<
+        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":94
+ *             while newIndex[newPos] > prevOld:
+ *                 # Set the current fill location
+ *                 fillVec[newPos] = curLoc             # <<<<<<<<<<<<<<
+ *                 mask[newPos] = 1
  * 
- *                 # Set mask to be 1 so will not be NaN'd
  */
-        (__pyx_v_fillLocs[__pyx_v_newPos]) = __pyx_v_curLoc;
+        __pyx_t_20 = __pyx_v_newPos;
+        __pyx_t_21 = -1;
+        if (__pyx_t_20 < 0) {
+          __pyx_t_21 = 0;
+        } else if (unlikely(__pyx_t_20 >= __pyx_bshape_0_fillVec)) __pyx_t_21 = 0;
+        if (unlikely(__pyx_t_21 != -1)) {
+          __Pyx_RaiseBufferIndexError(__pyx_t_21);
+          {__pyx_filename = __pyx_f[5]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        }
+        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int32_t *, __pyx_bstruct_fillVec.buf, __pyx_t_20, __pyx_bstride_0_fillVec) = __pyx_v_curLoc;
 
-        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":204
- * 
- *                 # Set mask to be 1 so will not be NaN'd
+        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":95
+ *                 # Set the current fill location
+ *                 fillVec[newPos] = curLoc
  *                 mask[newPos] = 1             # <<<<<<<<<<<<<<
- *                 newPos += 1
  * 
+ *                 newPos -= 1
  */
-        (__pyx_v_mask[__pyx_v_newPos]) = 1;
+        __pyx_t_21 = __pyx_v_newPos;
+        __pyx_t_22 = -1;
+        if (__pyx_t_21 < 0) {
+          __pyx_t_22 = 0;
+        } else if (unlikely(__pyx_t_21 >= __pyx_bshape_0_mask)) __pyx_t_22 = 0;
+        if (unlikely(__pyx_t_22 != -1)) {
+          __Pyx_RaiseBufferIndexError(__pyx_t_22);
+          {__pyx_filename = __pyx_f[5]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        }
+        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int8_t *, __pyx_bstruct_mask.buf, __pyx_t_21, __pyx_bstride_0_mask) = 1;
 
-        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":205
- *                 # Set mask to be 1 so will not be NaN'd
+        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":97
  *                 mask[newPos] = 1
- *                 newPos += 1             # <<<<<<<<<<<<<<
- * 
- *                 # We got to the end of the new index
- */
-        __pyx_v_newPos += 1;
-
-        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":208
  * 
- *                 # We got to the end of the new index
- *                 if newPos > newLength - 1:             # <<<<<<<<<<<<<<
- *                     done = 1
+ *                 newPos -= 1             # <<<<<<<<<<<<<<
+ *                 if newPos < 0:
  *                     break
  */
-        __pyx_t_7 = (__pyx_v_newPos > (__pyx_v_newLength - 1));
-        if (__pyx_t_7) {
+        __pyx_v_newPos -= 1;
 
-          /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":209
- *                 # We got to the end of the new index
- *                 if newPos > newLength - 1:
- *                     done = 1             # <<<<<<<<<<<<<<
+        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":98
+ * 
+ *                 newPos -= 1
+ *                 if newPos < 0:             # <<<<<<<<<<<<<<
  *                     break
  * 
  */
-          __pyx_v_done = 1;
+        __pyx_t_15 = (__pyx_v_newPos < 0);
+        if (__pyx_t_15) {
 
-          /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":210
- *                 if newPos > newLength - 1:
- *                     done = 1
+          /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":99
+ *                 newPos -= 1
+ *                 if newPos < 0:
  *                     break             # <<<<<<<<<<<<<<
  * 
- *                 # Advance the pointer
+ *         # Move one period back
  */
-          goto __pyx_L11_break;
-          goto __pyx_L12;
+          goto __pyx_L15_break;
+          goto __pyx_L16;
         }
-        __pyx_L12:;
-
-        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":213
- * 
- *                 # Advance the pointer
- *                 PyArray_ITER_NEXT(iternew)             # <<<<<<<<<<<<<<
- * 
- *             # We got to the end of the new index
- */
-        PyArray_ITER_NEXT(__pyx_v_iternew);
-      }
-      __pyx_L11_break:;
-
-      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":216
- * 
- *             # We got to the end of the new index
- *             if done:             # <<<<<<<<<<<<<<
- *                 break
- * 
- */
-      __pyx_t_9 = __pyx_v_done;
-      if (__pyx_t_9) {
-
-        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":217
- *             # We got to the end of the new index
- *             if done:
- *                 break             # <<<<<<<<<<<<<<
- * 
- *         # We already advanced the iterold pointer to the next value,
- */
-        goto __pyx_L4_break;
-        goto __pyx_L13;
+        __pyx_L16:;
       }
-      __pyx_L13:;
+      __pyx_L15_break:;
     }
-    __pyx_L8:;
-
-    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":221
- *         # We already advanced the iterold pointer to the next value,
- *         # inc the count
- *         oldPos += 1             # <<<<<<<<<<<<<<
- * 
- *     # Places where the mask is 0, fill with an arbitrary value
- */
-    __pyx_v_oldPos += 1;
-  }
-  __pyx_L4_break:;
-
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":225
- *     # Places where the mask is 0, fill with an arbitrary value
- *     # (will be NA'd out)
- *     for i from 0 <= i < newLength:             # <<<<<<<<<<<<<<
- *         if mask[i] == 0:
- *             fillLocs[i] = -1
- */
-  __pyx_t_8 = __pyx_v_newLength;
-  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {
+    __pyx_L12:;
 
-    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":226
- *     # (will be NA'd out)
- *     for i from 0 <= i < newLength:
- *         if mask[i] == 0:             # <<<<<<<<<<<<<<
- *             fillLocs[i] = -1
+    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":102
  * 
- */
-    __pyx_t_7 = ((__pyx_v_mask[__pyx_v_i]) == 0);
-    if (__pyx_t_7) {
-
-      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":227
- *     for i from 0 <= i < newLength:
- *         if mask[i] == 0:
- *             fillLocs[i] = -1             # <<<<<<<<<<<<<<
+ *         # Move one period back
+ *         oldPos -= 1             # <<<<<<<<<<<<<<
  * 
- *     return fillVec, maskVec
+ *     return (fillVec, mask)
  */
-      (__pyx_v_fillLocs[__pyx_v_i]) = -1;
-      goto __pyx_L16;
-    }
-    __pyx_L16:;
+    __pyx_v_oldPos -= 1;
   }
+  __pyx_L8_break:;
 
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":229
- *             fillLocs[i] = -1
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":104
+ *         oldPos -= 1
  * 
- *     return fillVec, maskVec             # <<<<<<<<<<<<<<
+ *     return (fillVec, mask)             # <<<<<<<<<<<<<<
  * 
- * def getFillVec(ndarray oldIndex, ndarray newIndex, dict oldMap, dict newMap,
+ * @cython.wraparound(False)
  */
-  __Pyx_XDECREF(((PyObject *)__pyx_r));
-  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_6);
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_4);
   __Pyx_INCREF(((PyObject *)__pyx_v_fillVec));
-  PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_v_fillVec));
+  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_fillVec));
   __Pyx_GIVEREF(((PyObject *)__pyx_v_fillVec));
-  __Pyx_INCREF(((PyObject *)__pyx_v_maskVec));
-  PyTuple_SET_ITEM(__pyx_t_6, 1, ((PyObject *)__pyx_v_maskVec));
-  __Pyx_GIVEREF(((PyObject *)__pyx_v_maskVec));
-  if (!(likely(PyTuple_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected tuple, got %.200s", Py_TYPE(__pyx_t_6)->tp_name), 0))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __pyx_r = ((PyObject *)__pyx_t_6);
-  __pyx_t_6 = 0;
+  __Pyx_INCREF(((PyObject *)__pyx_v_mask));
+  PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_v_mask));
+  __Pyx_GIVEREF(((PyObject *)__pyx_v_mask));
+  __pyx_r = __pyx_t_4;
+  __pyx_t_4 = 0;
   goto __pyx_L0;
 
-  __pyx_r = ((PyObject *)Py_None); __Pyx_INCREF(Py_None);
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
   goto __pyx_L0;
   __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_1);
   __Pyx_XDECREF(__pyx_t_2);
+  __Pyx_XDECREF(__pyx_t_3);
   __Pyx_XDECREF(__pyx_t_4);
   __Pyx_XDECREF(__pyx_t_5);
   __Pyx_XDECREF(__pyx_t_6);
-  __Pyx_AddTraceback("tseries._pad");
-  __pyx_r = 0;
+  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
+    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
+    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_oldIndex);
+    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_mask);
+    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_fillVec);
+    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_newIndex);
+  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
+  __Pyx_AddTraceback("tseries._backfill");
+  __pyx_r = NULL;
+  goto __pyx_L2;
   __pyx_L0:;
+  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_oldIndex);
+  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_mask);
+  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_fillVec);
+  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_newIndex);
+  __pyx_L2:;
   __Pyx_DECREF((PyObject *)__pyx_v_fillVec);
-  __Pyx_DECREF((PyObject *)__pyx_v_maskVec);
-  __Pyx_DECREF((PyObject *)__pyx_v_iterold);
-  __Pyx_DECREF((PyObject *)__pyx_v_iternew);
-  __Pyx_DECREF(__pyx_v_nextOld);
+  __Pyx_DECREF((PyObject *)__pyx_v_mask);
+  __Pyx_DECREF(__pyx_v_prevOld);
   __Pyx_DECREF(__pyx_v_curOld);
   __Pyx_DECREF((PyObject *)__pyx_v_oldIndex);
   __Pyx_DECREF((PyObject *)__pyx_v_newIndex);
@@ -12903,37 +12873,73 @@ static  PyObject *__pyx_f_7tseries__pad(PyArrayObject *__pyx_v_oldIndex, PyArray
   return __pyx_r;
 }
 
-/* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":231
- *     return fillVec, maskVec
- * 
- * def getFillVec(ndarray oldIndex, ndarray newIndex, dict oldMap, dict newMap,             # <<<<<<<<<<<<<<
- *                object kind):
+/* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":107
  * 
+ * @cython.wraparound(False)
+ * def _pad(ndarray[object, ndim=1] oldIndex,             # <<<<<<<<<<<<<<
+ *          ndarray[object, ndim=1] newIndex,
+ *          dict oldMap, dict newMap):
  */
 
-static PyObject *__pyx_pf_7tseries_getFillVec(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
-static PyObject *__pyx_pf_7tseries_getFillVec(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
+static PyObject *__pyx_pf_7tseries__pad(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
+static char __pyx_doc_7tseries__pad[] = "\n    Padding logic for generating fill vector\n\n    Diagram of what's going on\n\n    Old      New    Fill vector    Mask\n             .                        0\n             .                        0\n             .                        0\n    A        A        0               1\n             .        0               1\n             .        0               1\n             .        0               1\n             .        0               1\n             .        0               1\n    B        B        1               1\n             .        1               1\n             .        1               1\n             .        1               1\n    C        C        2               1\n    ";
+static PyObject *__pyx_pf_7tseries__pad(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
   PyArrayObject *__pyx_v_oldIndex = 0;
   PyArrayObject *__pyx_v_newIndex = 0;
   PyObject *__pyx_v_oldMap = 0;
   PyObject *__pyx_v_newMap = 0;
-  PyObject *__pyx_v_kind = 0;
-  PyObject *__pyx_v_fillVec;
-  PyObject *__pyx_v_maskVec;
+  int __pyx_v_oldLength;
+  int __pyx_v_newLength;
+  int __pyx_v_curLoc;
+  PyArrayObject *__pyx_v_fillVec;
+  PyArrayObject *__pyx_v_mask;
+  int __pyx_v_newPos;
+  int __pyx_v_oldPos;
+  PyObject *__pyx_v_curOld;
+  PyObject *__pyx_v_nextOld;
+  PyObject *__pyx_v_done;
+  Py_buffer __pyx_bstruct_oldIndex;
+  Py_ssize_t __pyx_bstride_0_oldIndex = 0;
+  Py_ssize_t __pyx_bshape_0_oldIndex = 0;
+  Py_buffer __pyx_bstruct_mask;
+  Py_ssize_t __pyx_bstride_0_mask = 0;
+  Py_ssize_t __pyx_bshape_0_mask = 0;
+  Py_buffer __pyx_bstruct_fillVec;
+  Py_ssize_t __pyx_bstride_0_fillVec = 0;
+  Py_ssize_t __pyx_bshape_0_fillVec = 0;
+  Py_buffer __pyx_bstruct_newIndex;
+  Py_ssize_t __pyx_bstride_0_newIndex = 0;
+  Py_ssize_t __pyx_bshape_0_newIndex = 0;
   PyObject *__pyx_r = NULL;
-  int __pyx_t_1;
+  Py_ssize_t __pyx_t_1;
   PyObject *__pyx_t_2 = NULL;
   PyObject *__pyx_t_3 = NULL;
   PyObject *__pyx_t_4 = NULL;
   PyObject *__pyx_t_5 = NULL;
-  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__oldIndex,&__pyx_n_s__newIndex,&__pyx_n_s__oldMap,&__pyx_n_s__newMap,&__pyx_n_s__kind,0};
-  __Pyx_RefNannySetupContext("getFillVec");
+  PyObject *__pyx_t_6 = NULL;
+  PyArrayObject *__pyx_t_7 = NULL;
+  int __pyx_t_8;
+  PyObject *__pyx_t_9 = NULL;
+  PyObject *__pyx_t_10 = NULL;
+  PyObject *__pyx_t_11 = NULL;
+  PyArrayObject *__pyx_t_12 = NULL;
+  long __pyx_t_13;
+  long __pyx_t_14;
+  int __pyx_t_15;
+  int __pyx_t_16;
+  int __pyx_t_17;
+  int __pyx_t_18;
+  long __pyx_t_19;
+  int __pyx_t_20;
+  int __pyx_t_21;
+  int __pyx_t_22;
+  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__oldIndex,&__pyx_n_s__newIndex,&__pyx_n_s__oldMap,&__pyx_n_s__newMap,0};
+  __Pyx_RefNannySetupContext("_pad");
   __pyx_self = __pyx_self;
   if (unlikely(__pyx_kwds)) {
     Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
-    PyObject* values[5] = {0,0,0,0,0};
+    PyObject* values[4] = {0,0,0,0};
     switch (PyTuple_GET_SIZE(__pyx_args)) {
-      case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
       case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
       case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
       case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
@@ -12950,263 +12956,675 @@ static PyObject *__pyx_pf_7tseries_getFillVec(PyObject *__pyx_self, PyObject *__
       values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__newIndex);
       if (likely(values[1])) kw_args--;
       else {
-        __Pyx_RaiseArgtupleInvalid("getFillVec", 1, 5, 5, 1); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+        __Pyx_RaiseArgtupleInvalid("_pad", 1, 4, 4, 1); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
       }
       case  2:
       values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__oldMap);
       if (likely(values[2])) kw_args--;
       else {
-        __Pyx_RaiseArgtupleInvalid("getFillVec", 1, 5, 5, 2); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+        __Pyx_RaiseArgtupleInvalid("_pad", 1, 4, 4, 2); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
       }
       case  3:
       values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__newMap);
       if (likely(values[3])) kw_args--;
       else {
-        __Pyx_RaiseArgtupleInvalid("getFillVec", 1, 5, 5, 3); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
-      }
-      case  4:
-      values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__kind);
-      if (likely(values[4])) kw_args--;
-      else {
-        __Pyx_RaiseArgtupleInvalid("getFillVec", 1, 5, 5, 4); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+        __Pyx_RaiseArgtupleInvalid("_pad", 1, 4, 4, 3); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
       }
     }
     if (unlikely(kw_args > 0)) {
-      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getFillVec") < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "_pad") < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
     }
     __pyx_v_oldIndex = ((PyArrayObject *)values[0]);
     __pyx_v_newIndex = ((PyArrayObject *)values[1]);
     __pyx_v_oldMap = ((PyObject *)values[2]);
     __pyx_v_newMap = ((PyObject *)values[3]);
-    __pyx_v_kind = values[4];
-  } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
+  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
     goto __pyx_L5_argtuple_error;
   } else {
     __pyx_v_oldIndex = ((PyArrayObject *)PyTuple_GET_ITEM(__pyx_args, 0));
     __pyx_v_newIndex = ((PyArrayObject *)PyTuple_GET_ITEM(__pyx_args, 1));
     __pyx_v_oldMap = ((PyObject *)PyTuple_GET_ITEM(__pyx_args, 2));
     __pyx_v_newMap = ((PyObject *)PyTuple_GET_ITEM(__pyx_args, 3));
-    __pyx_v_kind = PyTuple_GET_ITEM(__pyx_args, 4);
   }
   goto __pyx_L4_argument_unpacking_done;
   __pyx_L5_argtuple_error:;
-  __Pyx_RaiseArgtupleInvalid("getFillVec", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+  __Pyx_RaiseArgtupleInvalid("_pad", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
   __pyx_L3_error:;
-  __Pyx_AddTraceback("tseries.getFillVec");
+  __Pyx_AddTraceback("tseries._pad");
   return NULL;
   __pyx_L4_argument_unpacking_done:;
   __Pyx_INCREF((PyObject *)__pyx_v_oldIndex);
   __Pyx_INCREF((PyObject *)__pyx_v_newIndex);
   __Pyx_INCREF(__pyx_v_oldMap);
   __Pyx_INCREF(__pyx_v_newMap);
-  __Pyx_INCREF(__pyx_v_kind);
-  __pyx_v_fillVec = Py_None; __Pyx_INCREF(Py_None);
-  __pyx_v_maskVec = Py_None; __Pyx_INCREF(Py_None);
-  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_oldIndex), __pyx_ptype_5numpy_ndarray, 1, "oldIndex", 0))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_newIndex), __pyx_ptype_5numpy_ndarray, 1, "newIndex", 0))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_oldMap), &PyDict_Type, 1, "oldMap", 1))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_newMap), &PyDict_Type, 1, "newMap", 1))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_v_fillVec = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None);
+  __pyx_v_mask = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None);
+  __pyx_v_curOld = Py_None; __Pyx_INCREF(Py_None);
+  __pyx_v_nextOld = Py_None; __Pyx_INCREF(Py_None);
+  __pyx_v_done = Py_None; __Pyx_INCREF(Py_None);
+  __pyx_bstruct_fillVec.buf = NULL;
+  __pyx_bstruct_mask.buf = NULL;
+  __pyx_bstruct_oldIndex.buf = NULL;
+  __pyx_bstruct_newIndex.buf = NULL;
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_oldIndex), __pyx_ptype_5numpy_ndarray, 1, "oldIndex", 0))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_newIndex), __pyx_ptype_5numpy_ndarray, 1, "newIndex", 0))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_oldMap), &PyDict_Type, 1, "oldMap", 1))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_newMap), &PyDict_Type, 1, "newMap", 1))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  {
+    __Pyx_BufFmt_StackElem __pyx_stack[1];
+    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_oldIndex, (PyObject*)__pyx_v_oldIndex, &__Pyx_TypeInfo_object, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  }
+  __pyx_bstride_0_oldIndex = __pyx_bstruct_oldIndex.strides[0];
+  __pyx_bshape_0_oldIndex = __pyx_bstruct_oldIndex.shape[0];
+  {
+    __Pyx_BufFmt_StackElem __pyx_stack[1];
+    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_newIndex, (PyObject*)__pyx_v_newIndex, &__Pyx_TypeInfo_object, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  }
+  __pyx_bstride_0_newIndex = __pyx_bstruct_newIndex.strides[0];
+  __pyx_bshape_0_newIndex = __pyx_bstruct_newIndex.shape[0];
+
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":139
+ * 
+ *     # Get the size
+ *     oldLength = len(oldIndex)             # <<<<<<<<<<<<<<
+ *     newLength = len(newIndex)
+ * 
+ */
+  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_oldIndex)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_v_oldLength = __pyx_t_1;
+
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":140
+ *     # Get the size
+ *     oldLength = len(oldIndex)
+ *     newLength = len(newIndex)             # <<<<<<<<<<<<<<
+ * 
+ *     fillVec = np.empty(len(newIndex), dtype = np.int32)
+ */
+  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_newIndex)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_v_newLength = __pyx_t_1;
+
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":142
+ *     newLength = len(newIndex)
+ * 
+ *     fillVec = np.empty(len(newIndex), dtype = np.int32)             # <<<<<<<<<<<<<<
+ *     fillVec.fill(-1)
+ * 
+ */
+  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_newIndex)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_2);
+  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_4);
+  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
+  __Pyx_GIVEREF(__pyx_t_2);
+  __pyx_t_2 = 0;
+  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
+  __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_5);
+  __pyx_t_6 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__int32); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_6);
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  if (PyDict_SetItem(__pyx_t_2, ((PyObject *)__pyx_n_s__dtype), __pyx_t_6) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+  __pyx_t_6 = PyEval_CallObjectWithKeywords(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_t_2)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_6);
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
+  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
+  {
+    __Pyx_BufFmt_StackElem __pyx_stack[1];
+    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_fillVec);
+    __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_bstruct_fillVec, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
+    if (unlikely(__pyx_t_8 < 0)) {
+      PyErr_Fetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
+      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_fillVec, (PyObject*)__pyx_v_fillVec, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
+        Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11);
+        __Pyx_RaiseBufferFallbackError();
+      } else {
+        PyErr_Restore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
+      }
+    }
+    __pyx_bstride_0_fillVec = __pyx_bstruct_fillVec.strides[0];
+    __pyx_bshape_0_fillVec = __pyx_bstruct_fillVec.shape[0];
+    if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  }
+  __pyx_t_7 = 0;
+  __Pyx_DECREF(((PyObject *)__pyx_v_fillVec));
+  __pyx_v_fillVec = ((PyArrayObject *)__pyx_t_6);
+  __pyx_t_6 = 0;
+
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":143
+ * 
+ *     fillVec = np.empty(len(newIndex), dtype = np.int32)
+ *     fillVec.fill(-1)             # <<<<<<<<<<<<<<
+ * 
+ *     mask = np.zeros(len(newIndex), dtype = np.int8)
+ */
+  __pyx_t_6 = PyObject_GetAttr(((PyObject *)__pyx_v_fillVec), __pyx_n_s__fill); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_6);
+  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_INCREF(__pyx_int_neg_1);
+  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_int_neg_1);
+  __Pyx_GIVEREF(__pyx_int_neg_1);
+  __pyx_t_4 = PyObject_Call(__pyx_t_6, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_4);
+  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":145
+ *     fillVec.fill(-1)
+ * 
+ *     mask = np.zeros(len(newIndex), dtype = np.int8)             # <<<<<<<<<<<<<<
+ * 
+ *     oldPos = 0
+ */
+  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_4);
+  __pyx_t_2 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__zeros); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_newIndex)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_4);
+  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_6);
+  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
+  __Pyx_GIVEREF(__pyx_t_4);
+  __pyx_t_4 = 0;
+  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
+  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_t_5 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__int8); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_5);
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  if (PyDict_SetItem(__pyx_t_4, ((PyObject *)__pyx_n_s__dtype), __pyx_t_5) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  __pyx_t_5 = PyEval_CallObjectWithKeywords(__pyx_t_2, __pyx_t_6, ((PyObject *)__pyx_t_4)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_5);
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
+  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_12 = ((PyArrayObject *)__pyx_t_5);
+  {
+    __Pyx_BufFmt_StackElem __pyx_stack[1];
+    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_mask);
+    __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_bstruct_mask, (PyObject*)__pyx_t_12, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int8_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
+    if (unlikely(__pyx_t_8 < 0)) {
+      PyErr_Fetch(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9);
+      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_mask, (PyObject*)__pyx_v_mask, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int8_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
+        Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9);
+        __Pyx_RaiseBufferFallbackError();
+      } else {
+        PyErr_Restore(__pyx_t_11, __pyx_t_10, __pyx_t_9);
+      }
+    }
+    __pyx_bstride_0_mask = __pyx_bstruct_mask.strides[0];
+    __pyx_bshape_0_mask = __pyx_bstruct_mask.shape[0];
+    if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  }
+  __pyx_t_12 = 0;
+  __Pyx_DECREF(((PyObject *)__pyx_v_mask));
+  __pyx_v_mask = ((PyArrayObject *)__pyx_t_5);
+  __pyx_t_5 = 0;
+
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":147
+ *     mask = np.zeros(len(newIndex), dtype = np.int8)
+ * 
+ *     oldPos = 0             # <<<<<<<<<<<<<<
+ *     newPos = 0
+ * 
+ */
+  __pyx_v_oldPos = 0;
+
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":148
+ * 
+ *     oldPos = 0
+ *     newPos = 0             # <<<<<<<<<<<<<<
+ * 
+ *     # corner case, no filling possible
+ */
+  __pyx_v_newPos = 0;
+
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":151
+ * 
+ *     # corner case, no filling possible
+ *     if newIndex[newLength - 1] < oldIndex[0]:             # <<<<<<<<<<<<<<
+ *         return fillVec, mask
+ * 
+ */
+  __pyx_t_13 = (__pyx_v_newLength - 1);
+  __pyx_t_8 = -1;
+  if (__pyx_t_13 < 0) {
+    __pyx_t_8 = 0;
+  } else if (unlikely(__pyx_t_13 >= __pyx_bshape_0_newIndex)) __pyx_t_8 = 0;
+  if (unlikely(__pyx_t_8 != -1)) {
+    __Pyx_RaiseBufferIndexError(__pyx_t_8);
+    {__pyx_filename = __pyx_f[5]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  }
+  __pyx_t_5 = *__Pyx_BufPtrStrided1d(PyObject **, __pyx_bstruct_newIndex.buf, __pyx_t_13, __pyx_bstride_0_newIndex);
+  __Pyx_INCREF((PyObject*)__pyx_t_5);
+  __pyx_t_14 = 0;
+  __pyx_t_8 = -1;
+  if (__pyx_t_14 < 0) {
+    __pyx_t_8 = 0;
+  } else if (unlikely(__pyx_t_14 >= __pyx_bshape_0_oldIndex)) __pyx_t_8 = 0;
+  if (unlikely(__pyx_t_8 != -1)) {
+    __Pyx_RaiseBufferIndexError(__pyx_t_8);
+    {__pyx_filename = __pyx_f[5]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  }
+  __pyx_t_4 = *__Pyx_BufPtrStrided1d(PyObject **, __pyx_bstruct_oldIndex.buf, __pyx_t_14, __pyx_bstride_0_oldIndex);
+  __Pyx_INCREF((PyObject*)__pyx_t_4);
+  __pyx_t_6 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_LT); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_6);
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_15 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+  if (__pyx_t_15) {
+
+    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":152
+ *     # corner case, no filling possible
+ *     if newIndex[newLength - 1] < oldIndex[0]:
+ *         return fillVec, mask             # <<<<<<<<<<<<<<
+ * 
+ *     while newPos < newLength:
+ */
+    __Pyx_XDECREF(__pyx_r);
+    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_6);
+    __Pyx_INCREF(((PyObject *)__pyx_v_fillVec));
+    PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_v_fillVec));
+    __Pyx_GIVEREF(((PyObject *)__pyx_v_fillVec));
+    __Pyx_INCREF(((PyObject *)__pyx_v_mask));
+    PyTuple_SET_ITEM(__pyx_t_6, 1, ((PyObject *)__pyx_v_mask));
+    __Pyx_GIVEREF(((PyObject *)__pyx_v_mask));
+    __pyx_r = __pyx_t_6;
+    __pyx_t_6 = 0;
+    goto __pyx_L0;
+    goto __pyx_L6;
+  }
+  __pyx_L6:;
+
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":154
+ *         return fillVec, mask
+ * 
+ *     while newPos < newLength:             # <<<<<<<<<<<<<<
+ *         curOld = oldIndex[oldPos]
+ * 
+ */
+  while (1) {
+    __pyx_t_15 = (__pyx_v_newPos < __pyx_v_newLength);
+    if (!__pyx_t_15) break;
+
+    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":155
+ * 
+ *     while newPos < newLength:
+ *         curOld = oldIndex[oldPos]             # <<<<<<<<<<<<<<
+ * 
+ *         # At beginning, keep going until we go exceed the
+ */
+    __pyx_t_8 = __pyx_v_oldPos;
+    __pyx_t_16 = -1;
+    if (__pyx_t_8 < 0) {
+      __pyx_t_16 = 0;
+    } else if (unlikely(__pyx_t_8 >= __pyx_bshape_0_oldIndex)) __pyx_t_16 = 0;
+    if (unlikely(__pyx_t_16 != -1)) {
+      __Pyx_RaiseBufferIndexError(__pyx_t_16);
+      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    }
+    __pyx_t_6 = *__Pyx_BufPtrStrided1d(PyObject **, __pyx_bstruct_oldIndex.buf, __pyx_t_8, __pyx_bstride_0_oldIndex);
+    __Pyx_INCREF((PyObject*)__pyx_t_6);
+    __Pyx_DECREF(__pyx_v_curOld);
+    __pyx_v_curOld = __pyx_t_6;
+    __pyx_t_6 = 0;
+
+    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":159
+ *         # At beginning, keep going until we go exceed the
+ *         # first OLD index in the NEW index
+ *         while newIndex[newPos] < curOld:             # <<<<<<<<<<<<<<
+ *             newPos += 1
+ *             if newPos > newLength - 1:
+ */
+    while (1) {
+      __pyx_t_16 = __pyx_v_newPos;
+      __pyx_t_17 = -1;
+      if (__pyx_t_16 < 0) {
+        __pyx_t_17 = 0;
+      } else if (unlikely(__pyx_t_16 >= __pyx_bshape_0_newIndex)) __pyx_t_17 = 0;
+      if (unlikely(__pyx_t_17 != -1)) {
+        __Pyx_RaiseBufferIndexError(__pyx_t_17);
+        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      }
+      __pyx_t_6 = *__Pyx_BufPtrStrided1d(PyObject **, __pyx_bstruct_newIndex.buf, __pyx_t_16, __pyx_bstride_0_newIndex);
+      __Pyx_INCREF((PyObject*)__pyx_t_6);
+      __pyx_t_4 = PyObject_RichCompare(__pyx_t_6, __pyx_v_curOld, Py_LT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_4);
+      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+      __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_15 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+      if (!__pyx_t_15) break;
+
+      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":160
+ *         # first OLD index in the NEW index
+ *         while newIndex[newPos] < curOld:
+ *             newPos += 1             # <<<<<<<<<<<<<<
+ *             if newPos > newLength - 1:
+ *                 break
+ */
+      __pyx_v_newPos += 1;
+
+      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":161
+ *         while newIndex[newPos] < curOld:
+ *             newPos += 1
+ *             if newPos > newLength - 1:             # <<<<<<<<<<<<<<
+ *                 break
+ * 
+ */
+      __pyx_t_15 = (__pyx_v_newPos > (__pyx_v_newLength - 1));
+      if (__pyx_t_15) {
+
+        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":162
+ *             newPos += 1
+ *             if newPos > newLength - 1:
+ *                 break             # <<<<<<<<<<<<<<
+ * 
+ *         # We got there, get the current location in the old index
+ */
+        goto __pyx_L10_break;
+        goto __pyx_L11;
+      }
+      __pyx_L11:;
+    }
+    __pyx_L10_break:;
+
+    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":165
+ * 
+ *         # We got there, get the current location in the old index
+ *         curLoc = oldMap[curOld]             # <<<<<<<<<<<<<<
+ * 
+ *         # We're at the end of the road, need to propagate this value to the end
+ */
+    __pyx_t_4 = PyObject_GetItem(((PyObject *)__pyx_v_oldMap), __pyx_v_curOld); if (!__pyx_t_4) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_4);
+    __pyx_t_17 = __Pyx_PyInt_AsInt(__pyx_t_4); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+    __pyx_v_curLoc = __pyx_t_17;
+
+    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":168
+ * 
+ *         # We're at the end of the road, need to propagate this value to the end
+ *         if oldPos == oldLength - 1:             # <<<<<<<<<<<<<<
+ *             if newIndex[newPos] >= curOld:
+ *                 fillVec[newPos:] = curLoc
+ */
+    __pyx_t_15 = (__pyx_v_oldPos == (__pyx_v_oldLength - 1));
+    if (__pyx_t_15) {
+
+      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":169
+ *         # We're at the end of the road, need to propagate this value to the end
+ *         if oldPos == oldLength - 1:
+ *             if newIndex[newPos] >= curOld:             # <<<<<<<<<<<<<<
+ *                 fillVec[newPos:] = curLoc
+ *                 mask[newPos:] = 1
+ */
+      __pyx_t_17 = __pyx_v_newPos;
+      __pyx_t_18 = -1;
+      if (__pyx_t_17 < 0) {
+        __pyx_t_18 = 0;
+      } else if (unlikely(__pyx_t_17 >= __pyx_bshape_0_newIndex)) __pyx_t_18 = 0;
+      if (unlikely(__pyx_t_18 != -1)) {
+        __Pyx_RaiseBufferIndexError(__pyx_t_18);
+        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      }
+      __pyx_t_4 = *__Pyx_BufPtrStrided1d(PyObject **, __pyx_bstruct_newIndex.buf, __pyx_t_17, __pyx_bstride_0_newIndex);
+      __Pyx_INCREF((PyObject*)__pyx_t_4);
+      __pyx_t_6 = PyObject_RichCompare(__pyx_t_4, __pyx_v_curOld, Py_GE); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_6);
+      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+      __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_15 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+      if (__pyx_t_15) {
+
+        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":170
+ *         if oldPos == oldLength - 1:
+ *             if newIndex[newPos] >= curOld:
+ *                 fillVec[newPos:] = curLoc             # <<<<<<<<<<<<<<
+ *                 mask[newPos:] = 1
+ *             break
+ */
+        __pyx_t_6 = PyInt_FromLong(__pyx_v_curLoc); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_6);
+        if (PySequence_SetSlice(((PyObject *)__pyx_v_fillVec), __pyx_v_newPos, PY_SSIZE_T_MAX, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+
+        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":171
+ *             if newIndex[newPos] >= curOld:
+ *                 fillVec[newPos:] = curLoc
+ *                 mask[newPos:] = 1             # <<<<<<<<<<<<<<
+ *             break
+ *         else:
+ */
+        if (PySequence_SetSlice(((PyObject *)__pyx_v_mask), __pyx_v_newPos, PY_SSIZE_T_MAX, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        goto __pyx_L13;
+      }
+      __pyx_L13:;
 
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":234
- *                object kind):
+      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":172
+ *                 fillVec[newPos:] = curLoc
+ *                 mask[newPos:] = 1
+ *             break             # <<<<<<<<<<<<<<
+ *         else:
+ *             # Not at the end, need to go about filling
+ */
+      goto __pyx_L8_break;
+      goto __pyx_L12;
+    }
+    /*else*/ {
+
+      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":177
  * 
- *     if kind is None:             # <<<<<<<<<<<<<<
- *         fillVec, maskVec = getMergeVec(newIndex, oldMap)
- *     elif kind == 'PAD':
+ *             # Get the next index so we know when to stop propagating this value
+ *             nextOld = oldIndex[oldPos + 1]             # <<<<<<<<<<<<<<
+ * 
+ *             done = 0
  */
-  __pyx_t_1 = (__pyx_v_kind == Py_None);
-  if (__pyx_t_1) {
+      __pyx_t_19 = (__pyx_v_oldPos + 1);
+      __pyx_t_18 = -1;
+      if (__pyx_t_19 < 0) {
+        __pyx_t_18 = 0;
+      } else if (unlikely(__pyx_t_19 >= __pyx_bshape_0_oldIndex)) __pyx_t_18 = 0;
+      if (unlikely(__pyx_t_18 != -1)) {
+        __Pyx_RaiseBufferIndexError(__pyx_t_18);
+        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      }
+      __pyx_t_6 = *__Pyx_BufPtrStrided1d(PyObject **, __pyx_bstruct_oldIndex.buf, __pyx_t_19, __pyx_bstride_0_oldIndex);
+      __Pyx_INCREF((PyObject*)__pyx_t_6);
+      __Pyx_DECREF(__pyx_v_nextOld);
+      __pyx_v_nextOld = __pyx_t_6;
+      __pyx_t_6 = 0;
 
-    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":235
+      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":179
+ *             nextOld = oldIndex[oldPos + 1]
  * 
- *     if kind is None:
- *         fillVec, maskVec = getMergeVec(newIndex, oldMap)             # <<<<<<<<<<<<<<
- *     elif kind == 'PAD':
- *         fillVec, maskVec = _pad(oldIndex, newIndex, oldMap, newMap)
+ *             done = 0             # <<<<<<<<<<<<<<
+ * 
+ *             # Until we reach the next OLD value in the NEW index
  */
-    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__getMergeVec); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_2);
-    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_3);
-    __Pyx_INCREF(((PyObject *)__pyx_v_newIndex));
-    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_newIndex));
-    __Pyx_GIVEREF(((PyObject *)__pyx_v_newIndex));
-    __Pyx_INCREF(((PyObject *)__pyx_v_oldMap));
-    PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_oldMap));
-    __Pyx_GIVEREF(((PyObject *)__pyx_v_oldMap));
-    __pyx_t_4 = PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_4);
-    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-    if (PyTuple_CheckExact(__pyx_t_4) && likely(PyTuple_GET_SIZE(__pyx_t_4) == 2)) {
-      PyObject* tuple = __pyx_t_4;
-      __pyx_t_3 = PyTuple_GET_ITEM(tuple, 0); __Pyx_INCREF(__pyx_t_3);
-      __pyx_t_2 = PyTuple_GET_ITEM(tuple, 1); __Pyx_INCREF(__pyx_t_2);
-      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __Pyx_DECREF(__pyx_v_fillVec);
-      __pyx_v_fillVec = __pyx_t_3;
-      __pyx_t_3 = 0;
-      __Pyx_DECREF(__pyx_v_maskVec);
-      __pyx_v_maskVec = __pyx_t_2;
-      __pyx_t_2 = 0;
-    } else {
-      __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_5);
-      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __pyx_t_3 = __Pyx_UnpackItem(__pyx_t_5, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_2 = __Pyx_UnpackItem(__pyx_t_5, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_2);
-      if (__Pyx_EndUnpack(__pyx_t_5) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-      __Pyx_DECREF(__pyx_v_fillVec);
-      __pyx_v_fillVec = __pyx_t_3;
-      __pyx_t_3 = 0;
-      __Pyx_DECREF(__pyx_v_maskVec);
-      __pyx_v_maskVec = __pyx_t_2;
-      __pyx_t_2 = 0;
-    }
-    goto __pyx_L6;
-  }
+      __Pyx_INCREF(__pyx_int_0);
+      __Pyx_DECREF(__pyx_v_done);
+      __pyx_v_done = __pyx_int_0;
 
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":236
- *     if kind is None:
- *         fillVec, maskVec = getMergeVec(newIndex, oldMap)
- *     elif kind == 'PAD':             # <<<<<<<<<<<<<<
- *         fillVec, maskVec = _pad(oldIndex, newIndex, oldMap, newMap)
- *     elif kind == 'BACKFILL':
+      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":182
+ * 
+ *             # Until we reach the next OLD value in the NEW index
+ *             while newIndex[newPos] < nextOld:             # <<<<<<<<<<<<<<
+ *                 # Use this location to fill
+ *                 fillVec[newPos] = curLoc
  */
-  __pyx_t_4 = PyObject_RichCompare(__pyx_v_kind, ((PyObject *)__pyx_n_s__PAD), Py_EQ); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  if (__pyx_t_1) {
+      while (1) {
+        __pyx_t_18 = __pyx_v_newPos;
+        __pyx_t_20 = -1;
+        if (__pyx_t_18 < 0) {
+          __pyx_t_20 = 0;
+        } else if (unlikely(__pyx_t_18 >= __pyx_bshape_0_newIndex)) __pyx_t_20 = 0;
+        if (unlikely(__pyx_t_20 != -1)) {
+          __Pyx_RaiseBufferIndexError(__pyx_t_20);
+          {__pyx_filename = __pyx_f[5]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        }
+        __pyx_t_6 = *__Pyx_BufPtrStrided1d(PyObject **, __pyx_bstruct_newIndex.buf, __pyx_t_18, __pyx_bstride_0_newIndex);
+        __Pyx_INCREF((PyObject*)__pyx_t_6);
+        __pyx_t_4 = PyObject_RichCompare(__pyx_t_6, __pyx_v_nextOld, Py_LT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_GOTREF(__pyx_t_4);
+        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
+        __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_15 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+        if (!__pyx_t_15) break;
 
-    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":237
- *         fillVec, maskVec = getMergeVec(newIndex, oldMap)
- *     elif kind == 'PAD':
- *         fillVec, maskVec = _pad(oldIndex, newIndex, oldMap, newMap)             # <<<<<<<<<<<<<<
- *     elif kind == 'BACKFILL':
- *         fillVec, maskVec = _backfill(oldIndex, newIndex, oldMap, newMap)
+        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":184
+ *             while newIndex[newPos] < nextOld:
+ *                 # Use this location to fill
+ *                 fillVec[newPos] = curLoc             # <<<<<<<<<<<<<<
+ * 
+ *                 # Set mask to be 1 so will not be NaN'd
  */
-    __pyx_t_4 = ((PyObject *)__pyx_f_7tseries__pad(__pyx_v_oldIndex, __pyx_v_newIndex, __pyx_v_oldMap, __pyx_v_newMap)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_4);
-    if (likely(__pyx_t_4 != Py_None) && likely(PyTuple_GET_SIZE(__pyx_t_4) == 2)) {
-      PyObject* tuple = __pyx_t_4;
-      __pyx_t_2 = PyTuple_GET_ITEM(tuple, 0); __Pyx_INCREF(__pyx_t_2);
-      __pyx_t_3 = PyTuple_GET_ITEM(tuple, 1); __Pyx_INCREF(__pyx_t_3);
-      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __Pyx_DECREF(__pyx_v_fillVec);
-      __pyx_v_fillVec = __pyx_t_2;
-      __pyx_t_2 = 0;
-      __Pyx_DECREF(__pyx_v_maskVec);
-      __pyx_v_maskVec = __pyx_t_3;
-      __pyx_t_3 = 0;
-    } else {
-      __Pyx_UnpackTupleError(__pyx_t_4, 2);
-      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    }
-    goto __pyx_L6;
-  }
+        __pyx_t_20 = __pyx_v_newPos;
+        __pyx_t_21 = -1;
+        if (__pyx_t_20 < 0) {
+          __pyx_t_21 = 0;
+        } else if (unlikely(__pyx_t_20 >= __pyx_bshape_0_fillVec)) __pyx_t_21 = 0;
+        if (unlikely(__pyx_t_21 != -1)) {
+          __Pyx_RaiseBufferIndexError(__pyx_t_21);
+          {__pyx_filename = __pyx_f[5]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        }
+        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int32_t *, __pyx_bstruct_fillVec.buf, __pyx_t_20, __pyx_bstride_0_fillVec) = __pyx_v_curLoc;
 
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":238
- *     elif kind == 'PAD':
- *         fillVec, maskVec = _pad(oldIndex, newIndex, oldMap, newMap)
- *     elif kind == 'BACKFILL':             # <<<<<<<<<<<<<<
- *         fillVec, maskVec = _backfill(oldIndex, newIndex, oldMap, newMap)
- *     else:
+        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":187
+ * 
+ *                 # Set mask to be 1 so will not be NaN'd
+ *                 mask[newPos] = 1             # <<<<<<<<<<<<<<
+ *                 newPos += 1
+ * 
  */
-  __pyx_t_4 = PyObject_RichCompare(__pyx_v_kind, ((PyObject *)__pyx_n_s__BACKFILL), Py_EQ); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  if (__pyx_t_1) {
+        __pyx_t_21 = __pyx_v_newPos;
+        __pyx_t_22 = -1;
+        if (__pyx_t_21 < 0) {
+          __pyx_t_22 = 0;
+        } else if (unlikely(__pyx_t_21 >= __pyx_bshape_0_mask)) __pyx_t_22 = 0;
+        if (unlikely(__pyx_t_22 != -1)) {
+          __Pyx_RaiseBufferIndexError(__pyx_t_22);
+          {__pyx_filename = __pyx_f[5]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        }
+        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int8_t *, __pyx_bstruct_mask.buf, __pyx_t_21, __pyx_bstride_0_mask) = 1;
 
-    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":239
- *         fillVec, maskVec = _pad(oldIndex, newIndex, oldMap, newMap)
- *     elif kind == 'BACKFILL':
- *         fillVec, maskVec = _backfill(oldIndex, newIndex, oldMap, newMap)             # <<<<<<<<<<<<<<
- *     else:
- *         raise Exception("Don't recognize fillMethod: %s" % kind)
+        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":188
+ *                 # Set mask to be 1 so will not be NaN'd
+ *                 mask[newPos] = 1
+ *                 newPos += 1             # <<<<<<<<<<<<<<
+ * 
+ *                 # We got to the end of the new index
  */
-    __pyx_t_4 = ((PyObject *)__pyx_f_7tseries__backfill(__pyx_v_oldIndex, __pyx_v_newIndex, __pyx_v_oldMap, __pyx_v_newMap)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_4);
-    if (likely(__pyx_t_4 != Py_None) && likely(PyTuple_GET_SIZE(__pyx_t_4) == 2)) {
-      PyObject* tuple = __pyx_t_4;
-      __pyx_t_3 = PyTuple_GET_ITEM(tuple, 0); __Pyx_INCREF(__pyx_t_3);
-      __pyx_t_2 = PyTuple_GET_ITEM(tuple, 1); __Pyx_INCREF(__pyx_t_2);
-      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-      __Pyx_DECREF(__pyx_v_fillVec);
-      __pyx_v_fillVec = __pyx_t_3;
-      __pyx_t_3 = 0;
-      __Pyx_DECREF(__pyx_v_maskVec);
-      __pyx_v_maskVec = __pyx_t_2;
-      __pyx_t_2 = 0;
-    } else {
-      __Pyx_UnpackTupleError(__pyx_t_4, 2);
-      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        __pyx_v_newPos += 1;
+
+        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":191
+ * 
+ *                 # We got to the end of the new index
+ *                 if newPos > newLength - 1:             # <<<<<<<<<<<<<<
+ *                     done = 1
+ *                     break
+ */
+        __pyx_t_15 = (__pyx_v_newPos > (__pyx_v_newLength - 1));
+        if (__pyx_t_15) {
+
+          /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":192
+ *                 # We got to the end of the new index
+ *                 if newPos > newLength - 1:
+ *                     done = 1             # <<<<<<<<<<<<<<
+ *                     break
+ * 
+ */
+          __Pyx_INCREF(__pyx_int_1);
+          __Pyx_DECREF(__pyx_v_done);
+          __pyx_v_done = __pyx_int_1;
+
+          /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":193
+ *                 if newPos > newLength - 1:
+ *                     done = 1
+ *                     break             # <<<<<<<<<<<<<<
+ * 
+ *             # We got to the end of the new index
+ */
+          goto __pyx_L15_break;
+          goto __pyx_L16;
+        }
+        __pyx_L16:;
+      }
+      __pyx_L15_break:;
+
+      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":196
+ * 
+ *             # We got to the end of the new index
+ *             if done:             # <<<<<<<<<<<<<<
+ *                 break
+ * 
+ */
+      __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_v_done); if (unlikely(__pyx_t_15 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      if (__pyx_t_15) {
+
+        /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":197
+ *             # We got to the end of the new index
+ *             if done:
+ *                 break             # <<<<<<<<<<<<<<
+ * 
+ *         # We already advanced the iterold pointer to the next value,
+ */
+        goto __pyx_L8_break;
+        goto __pyx_L17;
+      }
+      __pyx_L17:;
     }
-    goto __pyx_L6;
-  }
-  /*else*/ {
+    __pyx_L12:;
 
-    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":241
- *         fillVec, maskVec = _backfill(oldIndex, newIndex, oldMap, newMap)
- *     else:
- *         raise Exception("Don't recognize fillMethod: %s" % kind)             # <<<<<<<<<<<<<<
+    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":201
+ *         # We already advanced the iterold pointer to the next value,
+ *         # inc the count
+ *         oldPos += 1             # <<<<<<<<<<<<<<
  * 
- *     return fillVec, maskVec.astype(np.bool)
+ *     return fillVec, mask
  */
-    __pyx_t_4 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_4), __pyx_v_kind); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_4);
-    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_2);
-    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
-    __Pyx_GIVEREF(__pyx_t_4);
-    __pyx_t_4 = 0;
-    __pyx_t_4 = PyObject_Call(__pyx_builtin_Exception, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_4);
-    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-    __Pyx_Raise(__pyx_t_4, 0, 0);
-    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-    {__pyx_filename = __pyx_f[5]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_v_oldPos += 1;
   }
-  __pyx_L6:;
+  __pyx_L8_break:;
 
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":243
- *         raise Exception("Don't recognize fillMethod: %s" % kind)
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":203
+ *         oldPos += 1
  * 
- *     return fillVec, maskVec.astype(np.bool)             # <<<<<<<<<<<<<<
+ *     return fillVec, mask             # <<<<<<<<<<<<<<
  * 
  * @cython.boundscheck(False)
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_4 = PyObject_GetAttr(__pyx_v_maskVec, __pyx_n_s__astype); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__bool); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_3);
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_2);
-  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
-  __Pyx_GIVEREF(__pyx_t_3);
-  __pyx_t_3 = 0;
-  __pyx_t_3 = PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_3);
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_INCREF(__pyx_v_fillVec);
-  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_fillVec);
-  __Pyx_GIVEREF(__pyx_v_fillVec);
-  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
-  __Pyx_GIVEREF(__pyx_t_3);
-  __pyx_t_3 = 0;
-  __pyx_r = __pyx_t_2;
-  __pyx_t_2 = 0;
+  __Pyx_INCREF(((PyObject *)__pyx_v_fillVec));
+  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_fillVec));
+  __Pyx_GIVEREF(((PyObject *)__pyx_v_fillVec));
+  __Pyx_INCREF(((PyObject *)__pyx_v_mask));
+  PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_v_mask));
+  __Pyx_GIVEREF(((PyObject *)__pyx_v_mask));
+  __pyx_r = __pyx_t_4;
+  __pyx_t_4 = 0;
   goto __pyx_L0;
 
   __pyx_r = Py_None; __Pyx_INCREF(Py_None);
@@ -13216,22 +13634,38 @@ static PyObject *__pyx_pf_7tseries_getFillVec(PyObject *__pyx_self, PyObject *__
   __Pyx_XDECREF(__pyx_t_3);
   __Pyx_XDECREF(__pyx_t_4);
   __Pyx_XDECREF(__pyx_t_5);
-  __Pyx_AddTraceback("tseries.getFillVec");
+  __Pyx_XDECREF(__pyx_t_6);
+  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
+    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
+    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_oldIndex);
+    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_mask);
+    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_fillVec);
+    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_newIndex);
+  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
+  __Pyx_AddTraceback("tseries._pad");
   __pyx_r = NULL;
+  goto __pyx_L2;
   __pyx_L0:;
-  __Pyx_DECREF(__pyx_v_fillVec);
-  __Pyx_DECREF(__pyx_v_maskVec);
+  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_oldIndex);
+  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_mask);
+  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_fillVec);
+  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_newIndex);
+  __pyx_L2:;
+  __Pyx_DECREF((PyObject *)__pyx_v_fillVec);
+  __Pyx_DECREF((PyObject *)__pyx_v_mask);
+  __Pyx_DECREF(__pyx_v_curOld);
+  __Pyx_DECREF(__pyx_v_nextOld);
+  __Pyx_DECREF(__pyx_v_done);
   __Pyx_DECREF((PyObject *)__pyx_v_oldIndex);
   __Pyx_DECREF((PyObject *)__pyx_v_newIndex);
   __Pyx_DECREF(__pyx_v_oldMap);
   __Pyx_DECREF(__pyx_v_newMap);
-  __Pyx_DECREF(__pyx_v_kind);
   __Pyx_XGIVEREF(__pyx_r);
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
 }
 
-/* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":246
+/* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":206
  * 
  * @cython.boundscheck(False)
  * def getMergeVec(ndarray values, dict oldMap):             # <<<<<<<<<<<<<<
@@ -13247,14 +13681,14 @@ static PyObject *__pyx_pf_7tseries_getMergeVec(PyObject *__pyx_self, PyObject *_
   int __pyx_v_newLength;
   PyArrayIterObject *__pyx_v_iternew;
   PyObject *__pyx_v_idx;
-  PyArrayObject *__pyx_v_fillLocs;
+  PyArrayObject *__pyx_v_fillVec;
   PyArrayObject *__pyx_v_mask;
   Py_buffer __pyx_bstruct_mask;
   Py_ssize_t __pyx_bstride_0_mask = 0;
   Py_ssize_t __pyx_bshape_0_mask = 0;
-  Py_buffer __pyx_bstruct_fillLocs;
-  Py_ssize_t __pyx_bstride_0_fillLocs = 0;
-  Py_ssize_t __pyx_bshape_0_fillLocs = 0;
+  Py_buffer __pyx_bstruct_fillVec;
+  Py_ssize_t __pyx_bstride_0_fillVec = 0;
+  Py_ssize_t __pyx_bshape_0_fillVec = 0;
   PyObject *__pyx_r = NULL;
   Py_ssize_t __pyx_t_1;
   PyObject *__pyx_t_2 = NULL;
@@ -13295,11 +13729,11 @@ static PyObject *__pyx_pf_7tseries_getMergeVec(PyObject *__pyx_self, PyObject *_
       values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__oldMap);
       if (likely(values[1])) kw_args--;
       else {
-        __Pyx_RaiseArgtupleInvalid("getMergeVec", 1, 2, 2, 1); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+        __Pyx_RaiseArgtupleInvalid("getMergeVec", 1, 2, 2, 1); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
       }
     }
     if (unlikely(kw_args > 0)) {
-      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getMergeVec") < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getMergeVec") < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
     }
     __pyx_v_values = ((PyArrayObject *)values[0]);
     __pyx_v_oldMap = ((PyObject *)values[1]);
@@ -13311,7 +13745,7 @@ static PyObject *__pyx_pf_7tseries_getMergeVec(PyObject *__pyx_self, PyObject *_
   }
   goto __pyx_L4_argument_unpacking_done;
   __pyx_L5_argtuple_error:;
-  __Pyx_RaiseArgtupleInvalid("getMergeVec", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
+  __Pyx_RaiseArgtupleInvalid("getMergeVec", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
   __pyx_L3_error:;
   __Pyx_AddTraceback("tseries.getMergeVec");
   return NULL;
@@ -13320,114 +13754,114 @@ static PyObject *__pyx_pf_7tseries_getMergeVec(PyObject *__pyx_self, PyObject *_
   __Pyx_INCREF(__pyx_v_oldMap);
   __pyx_v_iternew = ((PyArrayIterObject *)Py_None); __Pyx_INCREF(Py_None);
   __pyx_v_idx = Py_None; __Pyx_INCREF(Py_None);
-  __pyx_v_fillLocs = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None);
+  __pyx_v_fillVec = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None);
   __pyx_v_mask = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None);
-  __pyx_bstruct_fillLocs.buf = NULL;
+  __pyx_bstruct_fillVec.buf = NULL;
   __pyx_bstruct_mask.buf = NULL;
-  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_values), __pyx_ptype_5numpy_ndarray, 1, "values", 0))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_oldMap), &PyDict_Type, 1, "oldMap", 1))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_values), __pyx_ptype_5numpy_ndarray, 1, "values", 0))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_oldMap), &PyDict_Type, 1, "oldMap", 1))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
 
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":254
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":214
  *     cdef ndarray[int8_t, ndim=1] mask
  * 
  *     newLength = len(values)             # <<<<<<<<<<<<<<
- *     fillLocs = np.empty(newLength, dtype=np.int32)
+ *     fillVec = np.empty(newLength, dtype=np.int32)
  *     mask = np.zeros(newLength, dtype=np.int8)
  */
-  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_values)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_values)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __pyx_v_newLength = __pyx_t_1;
 
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":255
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":215
  * 
  *     newLength = len(values)
- *     fillLocs = np.empty(newLength, dtype=np.int32)             # <<<<<<<<<<<<<<
+ *     fillVec = np.empty(newLength, dtype=np.int32)             # <<<<<<<<<<<<<<
  *     mask = np.zeros(newLength, dtype=np.int8)
  * 
  */
-  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_3);
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_2 = PyInt_FromLong(__pyx_v_newLength); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_2 = PyInt_FromLong(__pyx_v_newLength); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_2);
-  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_4);
   PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
   __Pyx_GIVEREF(__pyx_t_2);
   __pyx_t_2 = 0;
-  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(((PyObject *)__pyx_t_2));
-  __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_6 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__int32); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_6 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__int32); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_6);
   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  if (PyDict_SetItem(__pyx_t_2, ((PyObject *)__pyx_n_s__dtype), __pyx_t_6) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (PyDict_SetItem(__pyx_t_2, ((PyObject *)__pyx_n_s__dtype), __pyx_t_6) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-  __pyx_t_6 = PyEval_CallObjectWithKeywords(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_t_2)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_6 = PyEval_CallObjectWithKeywords(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_t_2)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_6);
   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
   __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
-  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
   {
     __Pyx_BufFmt_StackElem __pyx_stack[1];
-    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_fillLocs);
-    __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_bstruct_fillLocs, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
+    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_fillVec);
+    __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_bstruct_fillVec, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
     if (unlikely(__pyx_t_8 < 0)) {
       PyErr_Fetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
-      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_fillLocs, (PyObject*)__pyx_v_fillLocs, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
+      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_fillVec, (PyObject*)__pyx_v_fillVec, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
         Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11);
         __Pyx_RaiseBufferFallbackError();
       } else {
         PyErr_Restore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
       }
     }
-    __pyx_bstride_0_fillLocs = __pyx_bstruct_fillLocs.strides[0];
-    __pyx_bshape_0_fillLocs = __pyx_bstruct_fillLocs.shape[0];
-    if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_bstride_0_fillVec = __pyx_bstruct_fillVec.strides[0];
+    __pyx_bshape_0_fillVec = __pyx_bstruct_fillVec.shape[0];
+    if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   }
   __pyx_t_7 = 0;
-  __Pyx_DECREF(((PyObject *)__pyx_v_fillLocs));
-  __pyx_v_fillLocs = ((PyArrayObject *)__pyx_t_6);
+  __Pyx_DECREF(((PyObject *)__pyx_v_fillVec));
+  __pyx_v_fillVec = ((PyArrayObject *)__pyx_t_6);
   __pyx_t_6 = 0;
 
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":256
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":216
  *     newLength = len(values)
- *     fillLocs = np.empty(newLength, dtype=np.int32)
+ *     fillVec = np.empty(newLength, dtype=np.int32)
  *     mask = np.zeros(newLength, dtype=np.int8)             # <<<<<<<<<<<<<<
  * 
  *     iternew = <flatiter> PyArray_IterNew(values)
  */
-  __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_6);
-  __pyx_t_2 = PyObject_GetAttr(__pyx_t_6, __pyx_n_s__zeros); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_2 = PyObject_GetAttr(__pyx_t_6, __pyx_n_s__zeros); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_2);
   __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-  __pyx_t_6 = PyInt_FromLong(__pyx_v_newLength); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_6 = PyInt_FromLong(__pyx_v_newLength); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_6);
-  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_4);
   PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
   __Pyx_GIVEREF(__pyx_t_6);
   __pyx_t_6 = 0;
-  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(((PyObject *)__pyx_t_6));
-  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_3);
-  __pyx_t_5 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__int8); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_5 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__int8); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_5);
   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-  if (PyDict_SetItem(__pyx_t_6, ((PyObject *)__pyx_n_s__dtype), __pyx_t_5) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (PyDict_SetItem(__pyx_t_6, ((PyObject *)__pyx_n_s__dtype), __pyx_t_5) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __pyx_t_5 = PyEval_CallObjectWithKeywords(__pyx_t_2, __pyx_t_4, ((PyObject *)__pyx_t_6)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_5 = PyEval_CallObjectWithKeywords(__pyx_t_2, __pyx_t_4, ((PyObject *)__pyx_t_6)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_5);
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
   __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
-  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __pyx_t_12 = ((PyArrayObject *)__pyx_t_5);
   {
     __Pyx_BufFmt_StackElem __pyx_stack[1];
@@ -13444,28 +13878,28 @@ static PyObject *__pyx_pf_7tseries_getMergeVec(PyObject *__pyx_self, PyObject *_
     }
     __pyx_bstride_0_mask = __pyx_bstruct_mask.strides[0];
     __pyx_bshape_0_mask = __pyx_bstruct_mask.shape[0];
-    if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   }
   __pyx_t_12 = 0;
   __Pyx_DECREF(((PyObject *)__pyx_v_mask));
   __pyx_v_mask = ((PyArrayObject *)__pyx_t_5);
   __pyx_t_5 = 0;
 
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":258
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":218
  *     mask = np.zeros(newLength, dtype=np.int8)
  * 
  *     iternew = <flatiter> PyArray_IterNew(values)             # <<<<<<<<<<<<<<
  * 
  *     for i from 0 <= i < newLength:
  */
-  __pyx_t_5 = PyArray_IterNew(((PyObject *)__pyx_v_values)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_5 = PyArray_IterNew(((PyObject *)__pyx_v_values)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_5);
   __Pyx_INCREF(((PyObject *)((PyArrayIterObject *)__pyx_t_5)));
   __Pyx_DECREF(((PyObject *)__pyx_v_iternew));
   __pyx_v_iternew = ((PyArrayIterObject *)__pyx_t_5);
   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
 
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":260
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":220
  *     iternew = <flatiter> PyArray_IterNew(values)
  * 
  *     for i from 0 <= i < newLength:             # <<<<<<<<<<<<<<
@@ -13475,51 +13909,51 @@ static PyObject *__pyx_pf_7tseries_getMergeVec(PyObject *__pyx_self, PyObject *_
   __pyx_t_8 = __pyx_v_newLength;
   for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {
 
-    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":261
+    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":221
  * 
  *     for i from 0 <= i < newLength:
  *         idx = PyArray_GETITEM(values, PyArray_ITER_DATA(iternew))             # <<<<<<<<<<<<<<
  * 
  *         if idx in oldMap:
  */
-    __pyx_t_5 = PyArray_GETITEM(__pyx_v_values, PyArray_ITER_DATA(__pyx_v_iternew)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_t_5 = PyArray_GETITEM(__pyx_v_values, PyArray_ITER_DATA(__pyx_v_iternew)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_GOTREF(__pyx_t_5);
     __Pyx_DECREF(__pyx_v_idx);
     __pyx_v_idx = __pyx_t_5;
     __pyx_t_5 = 0;
 
-    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":263
+    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":223
  *         idx = PyArray_GETITEM(values, PyArray_ITER_DATA(iternew))
  * 
  *         if idx in oldMap:             # <<<<<<<<<<<<<<
- *             fillLocs[i] = oldMap[idx]
+ *             fillVec[i] = oldMap[idx]
  *             mask[i] = 1
  */
     if (unlikely(((PyObject *)__pyx_v_oldMap) == Py_None)) {
-      __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     } else {
-      __pyx_t_13 = ((PyDict_Contains(((PyObject *)__pyx_v_oldMap), __pyx_v_idx))); if (unlikely(__pyx_t_13 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __pyx_t_13 = ((PyDict_Contains(((PyObject *)__pyx_v_oldMap), __pyx_v_idx))); if (unlikely(__pyx_t_13 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     }
     if (__pyx_t_13) {
 
-      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":264
+      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":224
  * 
  *         if idx in oldMap:
- *             fillLocs[i] = oldMap[idx]             # <<<<<<<<<<<<<<
+ *             fillVec[i] = oldMap[idx]             # <<<<<<<<<<<<<<
  *             mask[i] = 1
  * 
  */
-      __pyx_t_5 = PyObject_GetItem(((PyObject *)__pyx_v_oldMap), __pyx_v_idx); if (!__pyx_t_5) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __pyx_t_5 = PyObject_GetItem(((PyObject *)__pyx_v_oldMap), __pyx_v_idx); if (!__pyx_t_5) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
       __Pyx_GOTREF(__pyx_t_5);
-      __pyx_t_14 = __Pyx_PyInt_from_py_npy_int32(__pyx_t_5); if (unlikely((__pyx_t_14 == (npy_int32)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __pyx_t_14 = __Pyx_PyInt_from_py_npy_int32(__pyx_t_5); if (unlikely((__pyx_t_14 == (npy_int32)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
       __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
       __pyx_t_15 = __pyx_v_i;
-      if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_bshape_0_fillLocs;
-      *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int32_t *, __pyx_bstruct_fillLocs.buf, __pyx_t_15, __pyx_bstride_0_fillLocs) = __pyx_t_14;
+      if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_bshape_0_fillVec;
+      *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int32_t *, __pyx_bstruct_fillVec.buf, __pyx_t_15, __pyx_bstride_0_fillVec) = __pyx_t_14;
 
-      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":265
+      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":225
  *         if idx in oldMap:
- *             fillLocs[i] = oldMap[idx]
+ *             fillVec[i] = oldMap[idx]
  *             mask[i] = 1             # <<<<<<<<<<<<<<
  * 
  *         PyArray_ITER_NEXT(iternew)
@@ -13531,7 +13965,7 @@ static PyObject *__pyx_pf_7tseries_getMergeVec(PyObject *__pyx_self, PyObject *_
     }
     __pyx_L8:;
 
-    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":267
+    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":227
  *             mask[i] = 1
  * 
  *         PyArray_ITER_NEXT(iternew)             # <<<<<<<<<<<<<<
@@ -13541,21 +13975,21 @@ static PyObject *__pyx_pf_7tseries_getMergeVec(PyObject *__pyx_self, PyObject *_
     PyArray_ITER_NEXT(__pyx_v_iternew);
   }
 
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":269
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":229
  *         PyArray_ITER_NEXT(iternew)
  * 
  *     for i from 0 <= i < newLength:             # <<<<<<<<<<<<<<
  *         if mask[i] == 0:
- *             fillLocs[i] = -1
+ *             fillVec[i] = -1
  */
   __pyx_t_8 = __pyx_v_newLength;
   for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {
 
-    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":270
+    /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":230
  * 
  *     for i from 0 <= i < newLength:
  *         if mask[i] == 0:             # <<<<<<<<<<<<<<
- *             fillLocs[i] = -1
+ *             fillVec[i] = -1
  * 
  */
     __pyx_t_17 = __pyx_v_i;
@@ -13563,44 +13997,44 @@ static PyObject *__pyx_pf_7tseries_getMergeVec(PyObject *__pyx_self, PyObject *_
     __pyx_t_13 = ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int8_t *, __pyx_bstruct_mask.buf, __pyx_t_17, __pyx_bstride_0_mask)) == 0);
     if (__pyx_t_13) {
 
-      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":271
+      /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":231
  *     for i from 0 <= i < newLength:
  *         if mask[i] == 0:
- *             fillLocs[i] = -1             # <<<<<<<<<<<<<<
+ *             fillVec[i] = -1             # <<<<<<<<<<<<<<
  * 
- *     return fillLocs, mask.astype(bool)
+ *     return fillVec, mask.astype(bool)
  */
       __pyx_t_18 = __pyx_v_i;
-      if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_bshape_0_fillLocs;
-      *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int32_t *, __pyx_bstruct_fillLocs.buf, __pyx_t_18, __pyx_bstride_0_fillLocs) = -1;
+      if (__pyx_t_18 < 0) __pyx_t_18 += __pyx_bshape_0_fillVec;
+      *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int32_t *, __pyx_bstruct_fillVec.buf, __pyx_t_18, __pyx_bstride_0_fillVec) = -1;
       goto __pyx_L11;
     }
     __pyx_L11:;
   }
 
-  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":273
- *             fillLocs[i] = -1
+  /* "H:\workspace\pandas\pandas\lib\src\reindex.pyx":233
+ *             fillVec[i] = -1
  * 
- *     return fillLocs, mask.astype(bool)             # <<<<<<<<<<<<<<
+ *     return fillVec, mask.astype(bool)             # <<<<<<<<<<<<<<
  * 
  */
   __Pyx_XDECREF(__pyx_r);
-  __pyx_t_5 = PyObject_GetAttr(((PyObject *)__pyx_v_mask), __pyx_n_s__astype); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_5 = PyObject_GetAttr(((PyObject *)__pyx_v_mask), __pyx_n_s__astype); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_5);
-  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_6);
   __Pyx_INCREF(((PyObject *)((PyObject*)&PyBool_Type)));
   PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)((PyObject*)&PyBool_Type)));
   __Pyx_GIVEREF(((PyObject *)((PyObject*)&PyBool_Type)));
-  __pyx_t_4 = PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_4 = PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_4);
   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
   __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
-  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_6);
-  __Pyx_INCREF(((PyObject *)__pyx_v_fillLocs));
-  PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_v_fillLocs));
-  __Pyx_GIVEREF(((PyObject *)__pyx_v_fillLocs));
+  __Pyx_INCREF(((PyObject *)__pyx_v_fillVec));
+  PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_v_fillVec));
+  __Pyx_GIVEREF(((PyObject *)__pyx_v_fillVec));
   PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
   __Pyx_GIVEREF(__pyx_t_4);
   __pyx_t_4 = 0;
@@ -13619,18 +14053,18 @@ static PyObject *__pyx_pf_7tseries_getMergeVec(PyObject *__pyx_self, PyObject *_
   { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
     __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
     __Pyx_SafeReleaseBuffer(&__pyx_bstruct_mask);
-    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_fillLocs);
+    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_fillVec);
   __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
   __Pyx_AddTraceback("tseries.getMergeVec");
   __pyx_r = NULL;
   goto __pyx_L2;
   __pyx_L0:;
   __Pyx_SafeReleaseBuffer(&__pyx_bstruct_mask);
-  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_fillLocs);
+  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_fillVec);
   __pyx_L2:;
   __Pyx_DECREF((PyObject *)__pyx_v_iternew);
   __Pyx_DECREF(__pyx_v_idx);
-  __Pyx_DECREF((PyObject *)__pyx_v_fillLocs);
+  __Pyx_DECREF((PyObject *)__pyx_v_fillVec);
   __Pyx_DECREF((PyObject *)__pyx_v_mask);
   __Pyx_DECREF((PyObject *)__pyx_v_values);
   __Pyx_DECREF(__pyx_v_oldMap);
@@ -17017,6 +17451,8 @@ static struct PyMethodDef __pyx_methods[] = {
   {__Pyx_NAMESTR("rolling_kurt"), (PyCFunction)__pyx_pf_7tseries_rolling_kurt, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
   {__Pyx_NAMESTR("ewma"), (PyCFunction)__pyx_pf_7tseries_ewma, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
   {__Pyx_NAMESTR("getFillVec"), (PyCFunction)__pyx_pf_7tseries_getFillVec, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
+  {__Pyx_NAMESTR("_backfill"), (PyCFunction)__pyx_pf_7tseries__backfill, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7tseries__backfill)},
+  {__Pyx_NAMESTR("_pad"), (PyCFunction)__pyx_pf_7tseries__pad, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7tseries__pad)},
   {__Pyx_NAMESTR("getMergeVec"), (PyCFunction)__pyx_pf_7tseries_getMergeVec, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
   {__Pyx_NAMESTR("combineFunc"), (PyCFunction)__pyx_pf_7tseries_combineFunc, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7tseries_combineFunc)},
   {0, 0, 0, 0}
@@ -17070,7 +17506,9 @@ static __Pyx_StringTabEntry __pyx_string_tab[] = {
   {&__pyx_n_s____ne__, __pyx_k____ne__, sizeof(__pyx_k____ne__), 0, 0, 1, 1},
   {&__pyx_n_s____pow__, __pyx_k____pow__, sizeof(__pyx_k____pow__), 0, 0, 1, 1},
   {&__pyx_n_s____sub__, __pyx_k____sub__, sizeof(__pyx_k____sub__), 0, 0, 1, 1},
+  {&__pyx_n_s___backfill, __pyx_k___backfill, sizeof(__pyx_k___backfill), 0, 0, 1, 1},
   {&__pyx_n_s___ewma, __pyx_k___ewma, sizeof(__pyx_k___ewma), 0, 0, 1, 1},
+  {&__pyx_n_s___pad, __pyx_k___pad, sizeof(__pyx_k___pad), 0, 0, 1, 1},
   {&__pyx_n_s___roll_kurt, __pyx_k___roll_kurt, sizeof(__pyx_k___roll_kurt), 0, 0, 1, 1},
   {&__pyx_n_s___roll_mean, __pyx_k___roll_mean, sizeof(__pyx_k___roll_mean), 0, 0, 1, 1},
   {&__pyx_n_s___roll_median, __pyx_k___roll_median, sizeof(__pyx_k___roll_median), 0, 0, 1, 1},
@@ -17098,6 +17536,7 @@ static __Pyx_StringTabEntry __pyx_string_tab[] = {
   {&__pyx_n_s__empty, __pyx_k__empty, sizeof(__pyx_k__empty), 0, 0, 1, 1},
   {&__pyx_n_s__expected_size, __pyx_k__expected_size, sizeof(__pyx_k__expected_size), 0, 0, 1, 1},
   {&__pyx_n_s__fields, __pyx_k__fields, sizeof(__pyx_k__fields), 0, 0, 1, 1},
+  {&__pyx_n_s__fill, __pyx_k__fill, sizeof(__pyx_k__fill), 0, 0, 1, 1},
   {&__pyx_n_s__float64, __pyx_k__float64, sizeof(__pyx_k__float64), 0, 0, 1, 1},
   {&__pyx_n_s__format, __pyx_k__format, sizeof(__pyx_k__format), 0, 0, 1, 1},
   {&__pyx_n_s__func, __pyx_k__func, sizeof(__pyx_k__func), 0, 0, 1, 1},
diff --git a/pandas/lib/tests/test_tseries.py b/pandas/lib/tests/test_tseries.py
index 9af73ed45..da53eb26b 100644
--- a/pandas/lib/tests/test_tseries.py
+++ b/pandas/lib/tests/test_tseries.py
@@ -1,6 +1,9 @@
 import unittest
 
 import numpy as np
+from pandas import Index
+import pandas.util.testing as common
+import pandas.lib.tseries as tseries
 
 class TestTseriesUtil(unittest.TestCase):
 
@@ -20,10 +23,79 @@ class TestTseriesUtil(unittest.TestCase):
         pass
 
     def test_getMergeVec(self):
-        pass
+        old = Index([1, 5, 10])
+        new = Index(range(12))
 
-    def test_getFillVec(self):
-        pass
+        filler, mask = tseries.getFillVec(old, new, old.indexMap,
+                                          new.indexMap, None)
+
+        expect_filler = [-1, 0, -1, -1, -1, 1, -1, -1, -1, -1, 2, -1]
+        expect_mask = np.zeros(12, dtype=bool)
+        expect_mask[[1, 5, 10]] = True
+
+        self.assert_(np.array_equal(filler, expect_filler))
+        self.assert_(np.array_equal(mask, expect_mask))
+
+        # corner case
+        old = Index([1, 4])
+        new = Index(range(5, 10))
+        filler, mask = tseries.getFillVec(old, new, old.indexMap,
+                                          new.indexMap, None)
+
+        expect_filler = [-1, -1, -1, -1, -1]
+        expect_mask = np.zeros(5, dtype=bool)
+        self.assert_(np.array_equal(filler, expect_filler))
+        self.assert_(np.array_equal(mask, expect_mask))
+
+    def test_backfill(self):
+        old = Index([1, 5, 10])
+        new = Index(range(12))
+
+        filler, mask = tseries.getFillVec(old, new, old.indexMap,
+                                          new.indexMap, 'BACKFILL')
+
+        expect_filler = [0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, -1]
+        expect_mask = np.ones(12, dtype=bool)
+        expect_mask[-1] = False
+
+        self.assert_(np.array_equal(filler, expect_filler))
+        self.assert_(np.array_equal(mask, expect_mask))
+
+        # corner case
+        old = Index([1, 4])
+        new = Index(range(5, 10))
+        filler, mask = tseries.getFillVec(old, new, old.indexMap,
+                                          new.indexMap, 'BACKFILL')
+
+        expect_filler = [-1, -1, -1, -1, -1]
+        expect_mask = np.zeros(5, dtype=bool)
+        self.assert_(np.array_equal(filler, expect_filler))
+        self.assert_(np.array_equal(mask, expect_mask))
+
+    def test_pad(self):
+        old = Index([1, 5, 10])
+        new = Index(range(12))
+
+        filler, mask = tseries.getFillVec(old, new, old.indexMap,
+                                          new.indexMap, 'PAD')
+
+        expect_filler = [-1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2]
+        expect_mask = np.ones(12, dtype=bool)
+        expect_mask[0] = False
+
+        self.assert_(np.array_equal(filler, expect_filler))
+        self.assert_(np.array_equal(mask, expect_mask))
+
+        # corner case
+        old = Index([5, 10])
+        new = Index(range(5))
+        filler, mask = tseries.getFillVec(old, new, old.indexMap,
+                                          new.indexMap, 'PAD')
+
+        expect_filler = [-1, -1, -1, -1, -1]
+        expect_mask = np.zeros(5, dtype=bool)
+        self.assert_(np.array_equal(filler, expect_filler))
+        self.assert_(np.array_equal(mask, expect_mask))
 
 class TestMoments(unittest.TestCase):
     pass
