commit 4231061abfb5251ab49df9c6c6319e7707188509
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue May 8 20:22:21 2012 -0400

    TST: fix 32-bit/python < 2.7 test failures

diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index 04d7a6801..44dff4c48 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -234,7 +234,7 @@ class TestHDFStore(unittest.TestCase):
 
     def test_sparse_panel(self):
         items = ['x', 'y', 'z']
-        p = Panel({i : tm.makeDataFrame() for i in items})
+        p = Panel(dict((i, tm.makeDataFrame()) for i in items))
         sp = p.to_sparse()
 
         self._check_roundtrip(sp, tm.assert_panel_equal,
diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index e4fdaab93..9e19c1596 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -213,7 +213,8 @@ cdef class _Timestamp(datetime):
             return datetime.__sub__(self, other)
 
     def _get_field(self, field):
-        out = fast_field_accessor(np.array([self.value]), field)
+        out = fast_field_accessor(np.array([self.value], dtype=np.int64),
+                                  field)
         return out[0]
 
 # lightweight C object to hold datetime & int64 pair
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index fb477c61f..3b35921ed 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -320,18 +320,18 @@ class TestResample(unittest.TestCase):
 
         result = panel.resample('M', axis=1)
 
-        def apply(panel, f):
+        def p_apply(panel, f):
             result = {}
             for item in panel.items:
                 result[item] = f(panel[item])
             return Panel(result, items=panel.items)
 
-        expected = apply(panel, lambda x: x.resample('M'))
+        expected = p_apply(panel, lambda x: x.resample('M'))
         tm.assert_panel_equal(result, expected)
 
         panel2 = panel.swapaxes(1, 2)
         result = panel2.resample('M', axis=2)
-        expected = apply(panel2, lambda x: x.resample('M', axis=1))
+        expected = p_apply(panel2, lambda x: x.resample('M', axis=1))
         tm.assert_panel_equal(result, expected)
 
     def test_resample_panel_numpy(self):
