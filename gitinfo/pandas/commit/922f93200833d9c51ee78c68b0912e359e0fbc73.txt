commit 922f93200833d9c51ee78c68b0912e359e0fbc73
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Thu Feb 27 04:52:36 2020 -0800

    PERF: pass through to numpy validation for iloc setitem (#32257)

diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 5adc65b48..69283bc58 100755
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -8,7 +8,6 @@ from pandas.errors import AbstractMethodError
 from pandas.util._decorators import Appender
 
 from pandas.core.dtypes.common import (
-    is_float,
     is_integer,
     is_iterator,
     is_list_like,
@@ -1500,18 +1499,10 @@ class _iLocIndexer(_LocationIndexer):
         """
         Much simpler as we only have to deal with our valid types.
         """
-        labels = self.obj._get_axis(axis)
-
-        # make need to convert a float key
-        if isinstance(key, slice):
-            labels._validate_positional_slice(key)
-            return key
-
-        elif is_float(key):
-            # _validate_indexer call will always raise
-            labels._validate_indexer("positional", key, "iloc")
+        return key
 
-        self._validate_key(key, axis)
+    def _get_setitem_indexer(self, key):
+        # GH#32257 Fall through to let numnpy do validation
         return key
 
     # -------------------------------------------------------------------
diff --git a/pandas/tests/frame/indexing/test_indexing.py b/pandas/tests/frame/indexing/test_indexing.py
index 636cca0df..997414ece 100644
--- a/pandas/tests/frame/indexing/test_indexing.py
+++ b/pandas/tests/frame/indexing/test_indexing.py
@@ -27,6 +27,9 @@ from pandas.core.indexing import IndexingError
 
 from pandas.tseries.offsets import BDay
 
+# We pass through a TypeError raised by numpy
+_slice_msg = "slice indices must be integers or None or have an __index__ method"
+
 
 class TestGet:
     def test_get(self, float_frame):
@@ -994,7 +997,8 @@ class TestDataFrameIndexing:
         with pytest.raises(IndexingError, match="Too many indexers"):
             ix[:, :, :]
 
-        with pytest.raises(IndexingError, match="Too many indexers"):
+        with pytest.raises(IndexError, match="too many indices for array"):
+            # GH#32257 we let numpy do validation, get their exception
             ix[:, :, :] = 1
 
     def test_getitem_setitem_boolean_misaligned(self, float_frame):
@@ -1073,7 +1077,7 @@ class TestDataFrameIndexing:
 
         cp = df.copy()
 
-        with pytest.raises(TypeError, match=msg):
+        with pytest.raises(TypeError, match=_slice_msg):
             cp.iloc[1.0:5] = 0
 
         with pytest.raises(TypeError, match=msg):
diff --git a/pandas/tests/indexing/test_floats.py b/pandas/tests/indexing/test_floats.py
index 87520f5ab..a84e88cef 100644
--- a/pandas/tests/indexing/test_floats.py
+++ b/pandas/tests/indexing/test_floats.py
@@ -1,9 +1,17 @@
+import re
+
 import numpy as np
 import pytest
 
 from pandas import DataFrame, Float64Index, Index, Int64Index, RangeIndex, Series
 import pandas._testing as tm
 
+# We pass through the error message from numpy
+_slice_iloc_msg = re.escape(
+    "only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) "
+    "and integer or boolean arrays are valid indices"
+)
+
 
 def gen_obj(klass, index):
     if klass is Series:
@@ -62,11 +70,7 @@ class TestFloatIndexers:
         with pytest.raises(TypeError, match=msg):
             s.iloc[3.0]
 
-        msg = (
-            f"cannot do positional indexing on {type(i).__name__} with these "
-            r"indexers \[3\.0\] of type float"
-        )
-        with pytest.raises(TypeError, match=msg):
+        with pytest.raises(IndexError, match=_slice_iloc_msg):
             s.iloc[3.0] = 0
 
     @pytest.mark.parametrize(
@@ -133,12 +137,7 @@ class TestFloatIndexers:
         assert 3.0 not in s
 
         # setting with a float fails with iloc
-        msg = (
-            r"cannot do (label|positional) indexing "
-            fr"on {type(i).__name__} with these indexers \[3\.0\] of "
-            "type float"
-        )
-        with pytest.raises(TypeError, match=msg):
+        with pytest.raises(IndexError, match=_slice_iloc_msg):
             s.iloc[3.0] = 0
 
         # setting with an indexer
@@ -327,12 +326,7 @@ class TestFloatIndexers:
         with pytest.raises(TypeError, match=msg):
             s.iloc[3.0]
 
-        msg = (
-            "cannot do positional indexing "
-            fr"on {Float64Index.__name__} with these indexers \[3\.0\] of "
-            "type float"
-        )
-        with pytest.raises(TypeError, match=msg):
+        with pytest.raises(IndexError, match=_slice_iloc_msg):
             s2.iloc[3.0] = 0
 
     @pytest.mark.parametrize(
@@ -376,11 +370,7 @@ class TestFloatIndexers:
                 idxr(s)[l]
 
         # setitem
-        msg = (
-            "cannot do positional indexing "
-            fr"on {type(index).__name__} with these indexers \[(3|4)\.0\] of "
-            "type float"
-        )
+        msg = "slice indices must be integers or None or have an __index__ method"
         with pytest.raises(TypeError, match=msg):
             s.iloc[l] = 0
 
@@ -390,7 +380,7 @@ class TestFloatIndexers:
             r"\[(3|4)(\.0)?\] "
             r"of type (float|int)"
         )
-        for idxr in [lambda x: x.loc, lambda x: x.iloc, lambda x: x]:
+        for idxr in [lambda x: x.loc, lambda x: x]:
             with pytest.raises(TypeError, match=msg):
                 idxr(s)[l] = 0
 
