commit 5f76b277bdb9807929517d35acdc07587a234bf8
Author: Jeff Reback <jeff@reback.net>
Date:   Fri Oct 31 12:41:40 2014 -0400

    BUG: incorrect serialization of a CustomBusinessDay in HDF5 (GH8591)

diff --git a/doc/source/whatsnew/v0.15.1.txt b/doc/source/whatsnew/v0.15.1.txt
index 25909f385..84b93b662 100644
--- a/doc/source/whatsnew/v0.15.1.txt
+++ b/doc/source/whatsnew/v0.15.1.txt
@@ -178,7 +178,7 @@ Experimental
 Bug Fixes
 ~~~~~~~~~
 
-
+- Bug in unpickling  of a ``CustomBusinessDay`` object (:issue:`8591`)
 - Bug in coercing ``Categorical`` to a records array, e.g. ``df.to_records()`` (:issue:`8626`)
 - Bug in ``Categorical`` not created properly with ``Series.to_frame()`` (:issue:`8626`)
 - Bug in coercing in astype of a ``Categorical`` of a passed ``pd.Categorical`` (this now raises ``TypeError`` correctly), (:issue:`8626`)
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index 7fe7c8398..8cbad9ab2 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -2047,6 +2047,28 @@ class TestHDFStore(tm.TestCase):
             result = store.select('df')
             assert_frame_equal(result,df)
 
+    def test_calendar_roundtrip_issue(self):
+
+        # 8591
+        # doc example from tseries holiday section
+        weekmask_egypt = 'Sun Mon Tue Wed Thu'
+        holidays = ['2012-05-01', datetime.datetime(2013, 5, 1), np.datetime64('2014-05-01')]
+        bday_egypt = pandas.offsets.CustomBusinessDay(holidays=holidays, weekmask=weekmask_egypt)
+        dt = datetime.datetime(2013, 4, 30)
+        dts = date_range(dt, periods=5, freq=bday_egypt)
+
+        s = (Series(dts.weekday, dts).map(Series('Mon Tue Wed Thu Fri Sat Sun'.split())))
+
+        with ensure_clean_store(self.path) as store:
+
+            store.put('fixed',s)
+            result = store.select('fixed')
+            assert_series_equal(result, s)
+
+            store.append('table',s)
+            result = store.select('table')
+            assert_series_equal(result, s)
+
     def test_append_with_timezones_dateutil(self):
 
         from datetime import timedelta
diff --git a/pandas/tseries/offsets.py b/pandas/tseries/offsets.py
index 55aad38c1..81daa2b45 100644
--- a/pandas/tseries/offsets.py
+++ b/pandas/tseries/offsets.py
@@ -614,6 +614,14 @@ class CustomBusinessDay(BusinessDay):
         """Return a pickleable state"""
         state = self.__dict__.copy()
         del state['calendar']
+
+        # we don't want to actually pickle the calendar object
+        # as its a np.busyday; we recreate on deserilization
+        try:
+            state['kwds'].pop('calendar')
+        except:
+            pass
+
         return state
 
     def __setstate__(self, state):
diff --git a/pandas/tseries/tests/test_offsets.py b/pandas/tseries/tests/test_offsets.py
index 3b2e8f203..ef4288b28 100644
--- a/pandas/tseries/tests/test_offsets.py
+++ b/pandas/tseries/tests/test_offsets.py
@@ -12,12 +12,13 @@ import numpy as np
 from pandas.core.datetools import (
     bday, BDay, CDay, BQuarterEnd, BMonthEnd,
     CBMonthEnd, CBMonthBegin,
-    BYearEnd, MonthEnd, MonthBegin, BYearBegin,
+    BYearEnd, MonthEnd, MonthBegin, BYearBegin, CustomBusinessDay,
     QuarterBegin, BQuarterBegin, BMonthBegin, DateOffset, Week,
     YearBegin, YearEnd, Hour, Minute, Second, Day, Micro, Milli, Nano, Easter,
     WeekOfMonth, format, ole2datetime, QuarterEnd, to_datetime, normalize_date,
     get_offset, get_offset_name, get_standard_freq)
 
+from pandas import Series
 from pandas.tseries.frequencies import _offset_map
 from pandas.tseries.index import _to_m8, DatetimeIndex, _daterange_cache, date_range
 from pandas.tseries.tools import parse_time_string
@@ -867,7 +868,6 @@ class TestCustomBusinessDay(Base):
         cday = CDay(holidays=hdays)
         self.assertEqual(cday, cday0_14_1)
 
-
 class CustomBusinessMonthBase(object):
     _multiprocess_can_split_ = True
 
