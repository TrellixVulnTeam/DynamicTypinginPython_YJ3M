commit 0bc7fec8f1547ac345c0148eba14e694fb923f2e
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat May 19 16:08:47 2012 -0400

    DOC: handle pure python code blocks more correctly in ipython_directive, close #560

diff --git a/doc/source/io.rst b/doc/source/io.rst
index caa2a8a80..5567858d9 100644
--- a/doc/source/io.rst
+++ b/doc/source/io.rst
@@ -97,10 +97,11 @@ data into a DataFrame object. They can take a number of arguments:
     non-ascii
   - ``verbose`` : show number of NA values inserted in non-numeric columns
 
+
 .. ipython:: python
    :suppress:
 
-   f = open('foo.csv', 'w')
+   f = open('foo.csv','w')
    f.write('date,A,B,C\n20090101,a,1,2\n20090102,b,3,4\n20090103,c,4,5')
    f.close()
 
@@ -198,7 +199,7 @@ so it's ok to have extra separation between the columns in the file.
 .. ipython:: python
    :suppress:
 
-   os.remove('bar.csv')
+   # os.remove('bar.csv')
 
 Files with an "implicit" index column
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -270,8 +271,9 @@ module.
 .. ipython:: python
    :suppress:
 
-   df[:7].to_csv('tmp.sv', sep='|')
-   df[:7].to_csv('tmp2.sv', sep=':')
+   df = DataFrame(np.random.randn(10, 4))
+   df.to_csv('tmp.sv', sep='|')
+   df.to_csv('tmp2.sv', sep=':')
 
 .. ipython:: python
 
@@ -299,15 +301,14 @@ rather than reading the entire file into memory, such as the following:
 By specifiying a ``chunksize`` to ``read_csv`` or ``read_table``, the return
 value will be an iterable object of type ``TextParser``:
 
-.. ipython::
+.. ipython:: python
 
-   In [1]: reader = read_table('tmp.sv', sep='|', chunksize=4)
+   reader = read_table('tmp.sv', sep='|', chunksize=4)
+   reader
 
-   In [1]: reader
+   for chunk in reader:
+       print chunk
 
-   In [2]: for chunk in reader:
-      ...:     print chunk
-      ...:
 
 Specifying ``iterator=True`` will also return the ``TextParser`` object:
 
diff --git a/doc/source/merging.rst b/doc/source/merging.rst
index a8152643d..3efb05b57 100644
--- a/doc/source/merging.rst
+++ b/doc/source/merging.rst
@@ -553,7 +553,7 @@ them together on their indexes. The same is true for ``Panel.join``.
    df1
    df1.join([df2, df3])
 
-.. _merging.multiple_join:
+.. _merging.combine_first:
 
 Merging together values within Series or DataFrame columns
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
diff --git a/doc/sphinxext/ipython_directive.py b/doc/sphinxext/ipython_directive.py
index bbc8578c2..9b09ff95f 100644
--- a/doc/sphinxext/ipython_directive.py
+++ b/doc/sphinxext/ipython_directive.py
@@ -548,6 +548,9 @@ class EmbeddedSphinxShell(object):
 
         ct = 0
 
+        # nuke empty lines
+        content = [line for line in content if len(line.strip()) > 0]
+
         for lineno, line in enumerate(content):
 
             line_stripped = line.strip()
@@ -581,9 +584,17 @@ class EmbeddedSphinxShell(object):
             else:
                 modified = u'%s %s' % (continuation, line)
                 output.append(modified)
+
                 try:
                     ast.parse('\n'.join(content[multiline_start:lineno+1]))
-                    output.append(u'')
+
+                    if (lineno < len(content) - 1 and
+                        _count_indent(content[multiline_start]) <
+                        _count_indent(content[lineno + 1])):
+
+                        continue
+
+                    output.extend([continuation, u''])
                     multiline = False
                 except Exception:
                     pass
@@ -592,6 +603,13 @@ class EmbeddedSphinxShell(object):
 
         return output
 
+def _count_indent(x):
+    import re
+    m = re.match('(\s+)(.*)', x)
+    if not m:
+        return 0
+    return len(m.group(1))
+
 class IpythonDirective(Directive):
 
     has_content = True
