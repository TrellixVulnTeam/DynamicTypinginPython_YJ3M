commit ab74e7748b84f9fe011950918aa0fffdcaeb2c22
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Jul 19 23:47:02 2011 -0400

    ENH: made things more generic, reduced code dup

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 1585af5df..9af5e02dc 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -25,7 +25,7 @@ from pandas.core.common import (isnull, notnull, PandasError, _ensure_index,
                                 _try_sort, _pfixed, _default_index,
                                 _infer_dtype)
 from pandas.core.daterange import DateRange
-from pandas.core.generic import AxisProperty, PandasGeneric
+from pandas.core.generic import AxisProperty, NDFrame
 from pandas.core.index import Index, NULL_INDEX
 from pandas.core.internals import BlockManager, make_block
 from pandas.core.series import Series, _is_bool_indexer
@@ -94,7 +94,7 @@ def comp_method(func, name):
 #-------------------------------------------------------------------------------
 # DataFrame class
 
-class DataFrame(PandasGeneric):
+class DataFrame(NDFrame):
     """
     Homogenously indexed table with named columns, with intelligent arithmetic
     operations, slicing, reindexing, aggregation, etc. Can function
@@ -219,6 +219,14 @@ class DataFrame(PandasGeneric):
         """
         return type(self)(self._data, dtype=dtype)
 
+    def _wrap_array(self, arr, axes, copy=False):
+        index, columns = axes
+        return type(self)(arr, index=index, columns=columns, copy=copy)
+
+    @property
+    def axes(self):
+        return [self.index, self.columns]
+
     @property
     def _constructor(self):
         return type(self)
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index ba7641bf6..7f9365399 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -37,11 +37,18 @@ class AxisProperty(object):
         data = getattr(obj, '_data')
         data.set_axis(self.axis, value)
 
-class NDFrame(object):
-    """
-    N-dimensional labeled array data structure with potentially heterogenous
-    dtypes along one axis
-    """
+class NDFrame(Picklable):
+
+    _AXIS_NUMBERS = {
+        'index' : 0,
+        'columns' : 1
+    }
+
+    _AXIS_ALIASES = {}
+    _AXIS_NAMES = dict((v, k) for k, v in _AXIS_NUMBERS.iteritems())
+
+    _default_stat_axis = 0
+
     def __init__(self, data, axes=None, copy=False):
         self._data = data
         self.axes = axes
@@ -50,21 +57,14 @@ class NDFrame(object):
         # TODO
         return 'NDFrame'
 
+    @property
+    def values(self):
+        return self._data.as_matrix()
+
     @property
     def ndim(self):
         return self._data.ndim
 
-class PandasGeneric(Picklable):
-
-    _AXIS_NUMBERS = {
-        'index' : 0,
-        'columns' : 1
-    }
-
-    _AXIS_ALIASES = {}
-
-    _AXIS_NAMES = dict((v, k) for k, v in _AXIS_NUMBERS.iteritems())
-
     #----------------------------------------------------------------------
     # Consolidation of internals
 
@@ -121,6 +121,10 @@ class PandasGeneric(Picklable):
         name = self._get_axis_name(axis)
         return getattr(self, name)
 
+    @property
+    def axes(self):
+        return self._data.axes
+
     def groupby(self, mapper):
         """
         Goup series using mapper (dict or key function, apply given
@@ -167,7 +171,7 @@ class PandasGeneric(Picklable):
                                                method=fill_method)
         return type(self)(new_data)
 
-    def cumsum(self, axis=0):
+    def cumsum(self, axis=None):
         """
         Return DataFrame of cumulative sums over requested axis.
 
@@ -180,6 +184,11 @@ class PandasGeneric(Picklable):
         -------
         y : DataFrame
         """
+        if axis is None:
+            axis = self._default_stat_axis
+        else:
+            axis = self._get_axis_number(axis)
+
         y = self.values.copy()
         if not issubclass(y.dtype.type, np.int_):
             mask = np.isnan(self.values)
@@ -188,10 +197,12 @@ class PandasGeneric(Picklable):
             np.putmask(result, mask, np.nan)
         else:
             result = y.cumsum(axis)
-        return type(self)(result, index=self.index, columns=self.columns,
-                          copy=False)
+        return self._wrap_array(result, self.axes, copy=False)
+
+    def _wrap_array(self, array, axes, copy=False):
+        raise NotImplementedError
 
-    def cumprod(self, axis=0):
+    def cumprod(self, axis=None):
         """
         Return cumulative product over requested axis as DataFrame
 
@@ -204,6 +215,11 @@ class PandasGeneric(Picklable):
         -------
         y : DataFrame
         """
+        if axis is None:
+            axis = self._default_stat_axis
+        else:
+            axis = self._get_axis_number(axis)
+
         y = self.values.copy()
         if not issubclass(y.dtype.type, np.int_):
             mask = np.isnan(self.values)
@@ -212,6 +228,38 @@ class PandasGeneric(Picklable):
             np.putmask(result, mask, np.nan)
         else:
             result = y.cumprod(axis)
-        return type(self)(result, index=self.index, columns=self.columns,
-                          copy=False)
+        return self._wrap_array(result, self.axes, copy=False)
+
+    def _values_aggregate(self, func, axis, fill_value):
+        axis = self._get_axis_number(axis)
+
+        values = self.values
+        mask = np.isfinite(values)
+
+        if fill_value is not None:
+            values = values.copy()
+            values[-mask] = fill_value
+
+        result = func(values, axis=axis)
+        count = mask.sum(axis=axis)
+
+        result[count == 0] = np.NaN
+
+        return result
+
+    def _values_accum(self, func, axis, fill_value):
+        axis = self._get_axis_number(axis)
+
+        values = self.values
+        mask = np.isfinite(values)
+
+        if fill_value is not None:
+            values = values.copy()
+            values[-mask] = fill_value
+
+        result = func(values, axis=axis)
+
+        if fill_value is not None:
+            result[-mask] = np.NaN
 
+        return result
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index e803ea10c..2be341c85 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -14,7 +14,7 @@ from pandas.core.common import (PandasError, _mut_exclusive, _ensure_index,
 from pandas.core.index import Index
 from pandas.core.internals import BlockManager, make_block
 from pandas.core.frame import DataFrame
-from pandas.core.generic import AxisProperty, PandasGeneric, Picklable
+from pandas.core.generic import AxisProperty, NDFrame, Picklable
 import pandas.core.common as common
 import pandas._tseries as _tseries
 
@@ -153,7 +153,7 @@ class Panel(object):
                       FutureWarning)
         return self.shape
 
-class WidePanel(Panel, PandasGeneric):
+class WidePanel(Panel, NDFrame):
     """
     Represents wide format panel data, stored as 3-dimensional array
 
@@ -181,6 +181,9 @@ class WidePanel(Panel, PandasGeneric):
         2 : 'minor_axis'
     }
 
+    # major
+    _default_stat_axis = 1
+
     items = AxisProperty(0)
     major_axis = AxisProperty(1)
     minor_axis = AxisProperty(2)
@@ -243,6 +246,11 @@ class WidePanel(Panel, PandasGeneric):
 
         return index, columns
 
+    def _wrap_array(self, arr, axes, copy=False):
+        items, major, minor = axes
+        return type(self)(arr, items=items, major_axis=major,
+                          minor_axis=minor, copy=copy)
+
     def copy(self):
         """
         Return a copy of WidePanel (only values ndarray copied)
@@ -581,20 +589,6 @@ class WidePanel(Panel, PandasGeneric):
         new_data = self._data.xs(key, axis=2, copy=copy)
         return DataFrame(new_data)
 
-    def getMinorXS(self, key): # pragma: no cover
-        warnings.warn("getMinorXS has been replaced by the minor_xs function "
-                      "please modify your code accordingly",
-                      FutureWarning)
-
-        return self.minor_xs(key)
-
-    def getMajorXS(self, key): # pragma: no cover
-        warnings.warn("getMajorXS has been replaced by the major_xs function "
-                      "please modify your code accordingly",
-                      FutureWarning)
-
-        return self.major_xs(key)
-
     def groupby(self, function, axis='major'):
         """
         Group data on given axis, returning GroupBy object
@@ -721,40 +715,6 @@ class WidePanel(Panel, PandasGeneric):
         result = np.apply_along_axis(func, i, self.values)
         return self._wrap_result(result, axis=axis)
 
-    def _values_aggregate(self, func, axis, fill_value):
-        axis = self._get_axis_number(axis)
-
-        values = self.values
-        mask = np.isfinite(values)
-
-        if fill_value is not None:
-            values = values.copy()
-            values[-mask] = fill_value
-
-        result = func(values, axis=axis)
-        count = mask.sum(axis=axis)
-
-        result[count == 0] = np.NaN
-
-        return result
-
-    def _values_accum(self, func, axis, fill_value):
-        axis = self._get_axis_number(axis)
-
-        values = self.values
-        mask = np.isfinite(values)
-
-        if fill_value is not None:
-            values = values.copy()
-            values[-mask] = fill_value
-
-        result = func(values, axis=axis)
-
-        if fill_value is not None:
-            result[-mask] = np.NaN
-
-        return result
-
     def _array_method(self, func, axis='major', fill_value=None):
         """
         Parameters
@@ -811,16 +771,6 @@ class WidePanel(Panel, PandasGeneric):
         """
         return self._array_method(np.sum, axis=axis, fill_value=0)
 
-    def cumsum(self, axis='major'):
-        """
-
-        Returns
-        -------
-        y : WidePanel
-        """
-        result = self._values_accum(np.cumsum, axis=axis, fill_value=0)
-        return self._wrap_result(result, axis)
-
     def mean(self, axis='major'):
         """
 
@@ -1001,6 +951,23 @@ class WidePanel(Panel, PandasGeneric):
         """
         return self._select_generic(crit, axis=axis)
 
+    #----------------------------------------------------------------------
+    # Deprecated stuff
+
+    def getMinorXS(self, key): # pragma: no cover
+        warnings.warn("getMinorXS has been replaced by the minor_xs function "
+                      "please modify your code accordingly",
+                      FutureWarning)
+
+        return self.minor_xs(key)
+
+    def getMajorXS(self, key): # pragma: no cover
+        warnings.warn("getMajorXS has been replaced by the major_xs function "
+                      "please modify your code accordingly",
+                      FutureWarning)
+
+        return self.major_xs(key)
+
 #-------------------------------------------------------------------------------
 # LongPanel and friends
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 9c38d7777..b25eaded1 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -15,7 +15,7 @@ import numpy as np
 
 from pandas.core.common import isnull, notnull, _ensure_index
 from pandas.core.daterange import DateRange
-from pandas.core.generic import PandasGeneric
+from pandas.core.generic import NDFrame
 from pandas.core.index import Index
 import pandas.core.datetools as datetools
 import pandas._tseries as _tseries
@@ -92,7 +92,7 @@ def _flex_method(op, name):
 #-------------------------------------------------------------------------------
 # Series class
 
-class Series(np.ndarray, PandasGeneric):
+class Series(np.ndarray, NDFrame):
     """
     Generic indexed (labeled) vector (time series or cross-section)
 
@@ -194,6 +194,9 @@ class Series(np.ndarray, PandasGeneric):
 
         return subarr
 
+    def __init__(self, *args, **kwargs):
+        pass
+
     def __hash__(self):
         raise TypeError('unhashable type')
 
