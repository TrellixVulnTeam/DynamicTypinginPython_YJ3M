commit b9a9b9f5dd20e4308215d89a81df69bbfcfd4842
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Mon Aug 5 04:55:35 2019 -0700

    TST: troubleshoot inconsistent xfails (#27715)

diff --git a/pandas/compat/__init__.py b/pandas/compat/__init__.py
index c9597505f..5ecd641fc 100644
--- a/pandas/compat/__init__.py
+++ b/pandas/compat/__init__.py
@@ -11,6 +11,7 @@ import platform
 import struct
 import sys
 
+PY35 = sys.version_info[:2] == (3, 5)
 PY36 = sys.version_info >= (3, 6)
 PY37 = sys.version_info >= (3, 7)
 PYPY = platform.python_implementation() == "PyPy"
diff --git a/pandas/tests/arithmetic/test_datetime64.py b/pandas/tests/arithmetic/test_datetime64.py
index 0e01216af..3920cfcc0 100644
--- a/pandas/tests/arithmetic/test_datetime64.py
+++ b/pandas/tests/arithmetic/test_datetime64.py
@@ -666,6 +666,7 @@ class TestDatetimeIndexComparisons:
     # Raising in __eq__ will fallback to NumPy, which warns, fails,
     # then re-raises the original exception. So we just need to ignore.
     @pytest.mark.filterwarnings("ignore:elementwise comp:DeprecationWarning")
+    @pytest.mark.filterwarnings("ignore:Converting timezone-aware:FutureWarning")
     def test_scalar_comparison_tzawareness(
         self, op, other, tz_aware_fixture, box_with_array
     ):
diff --git a/pandas/tests/computation/test_eval.py b/pandas/tests/computation/test_eval.py
index 8c0930c04..c500760fa 100644
--- a/pandas/tests/computation/test_eval.py
+++ b/pandas/tests/computation/test_eval.py
@@ -1789,9 +1789,10 @@ class TestMathPythonPython:
         self.check_result_type(np.float32, np.float32)
         self.check_result_type(np.float64, np.float64)
 
-    def test_result_types2(self):
+    @td.skip_if_windows
+    def test_result_complex128(self):
         # xref https://github.com/pandas-dev/pandas/issues/12293
-        pytest.skip("unreliable tests on complex128")
+        #  this fails on Windows, apparently a floating point precision issue
 
         # Did not test complex64 because DataFrame is converting it to
         # complex128. Due to https://github.com/pandas-dev/pandas/issues/10952
diff --git a/pandas/tests/extension/test_datetime.py b/pandas/tests/extension/test_datetime.py
index 9a7a43cff..a60607d58 100644
--- a/pandas/tests/extension/test_datetime.py
+++ b/pandas/tests/extension/test_datetime.py
@@ -142,16 +142,6 @@ class TestArithmeticOps(BaseDatetimeTests, base.BaseArithmeticOpsTests):
         # skipping because it is not implemented
         pass
 
-    @pytest.mark.xfail(reason="different implementation", strict=False)
-    def test_direct_arith_with_series_returns_not_implemented(self, data):
-        # Right now, we have trouble with this. Returning NotImplemented
-        # fails other tests like
-        # tests/arithmetic/test_datetime64::TestTimestampSeriesArithmetic::
-        # test_dt64_seris_add_intlike
-        return super(
-            TestArithmeticOps, self
-        ).test_direct_arith_with_series_returns_not_implemented(data)
-
 
 class TestCasting(BaseDatetimeTests, base.BaseCastingTests):
     pass
@@ -163,12 +153,6 @@ class TestComparisonOps(BaseDatetimeTests, base.BaseComparisonOpsTests):
         # with (some) integers, depending on the value.
         pass
 
-    @pytest.mark.xfail(reason="different implementation", strict=False)
-    def test_direct_arith_with_series_returns_not_implemented(self, data):
-        return super(
-            TestComparisonOps, self
-        ).test_direct_arith_with_series_returns_not_implemented(data)
-
 
 class TestMissing(BaseDatetimeTests, base.BaseMissingTests):
     pass
diff --git a/pandas/tests/frame/test_analytics.py b/pandas/tests/frame/test_analytics.py
index d5c66f0c1..e99208ac7 100644
--- a/pandas/tests/frame/test_analytics.py
+++ b/pandas/tests/frame/test_analytics.py
@@ -1819,10 +1819,17 @@ class TestDataFrameAnalytics:
             (np.any, {"A": pd.Series([0, 1], dtype="category")}, True),
             (np.all, {"A": pd.Series([1, 2], dtype="category")}, True),
             (np.any, {"A": pd.Series([1, 2], dtype="category")}, True),
-            # # Mix
-            # GH 21484
-            # (np.all, {'A': pd.Series([10, 20], dtype='M8[ns]'),
-            #           'B': pd.Series([10, 20], dtype='m8[ns]')}, True),
+            # Mix GH#21484
+            pytest.param(
+                np.all,
+                {
+                    "A": pd.Series([10, 20], dtype="M8[ns]"),
+                    "B": pd.Series([10, 20], dtype="m8[ns]"),
+                },
+                True,
+                # In 1.13.3 and 1.14 np.all(df) returns a Timedelta here
+                marks=[td.skip_if_np_lt("1.15")],
+            ),
         ],
     )
     def test_any_all_np_func(self, func, data, expected):
diff --git a/pandas/tests/groupby/test_categorical.py b/pandas/tests/groupby/test_categorical.py
index 486b3b28b..9b8c8e6d8 100644
--- a/pandas/tests/groupby/test_categorical.py
+++ b/pandas/tests/groupby/test_categorical.py
@@ -4,8 +4,6 @@ from datetime import datetime
 import numpy as np
 import pytest
 
-from pandas.compat import PY37
-
 import pandas as pd
 from pandas import (
     Categorical,
@@ -209,7 +207,7 @@ def test_level_get_group(observed):
     assert_frame_equal(result, expected)
 
 
-@pytest.mark.xfail(PY37, reason="flaky on 3.7, xref gh-21636", strict=False)
+# GH#21636 previously flaky on py37
 @pytest.mark.parametrize("ordered", [True, False])
 def test_apply(ordered):
     # GH 10138
diff --git a/pandas/tests/indexes/datetimes/test_construction.py b/pandas/tests/indexes/datetimes/test_construction.py
index 66a22ae7e..88bc11c58 100644
--- a/pandas/tests/indexes/datetimes/test_construction.py
+++ b/pandas/tests/indexes/datetimes/test_construction.py
@@ -759,6 +759,8 @@ class TestDatetimeIndex:
         assert result == expected
 
     # This is the desired future behavior
+    # Note: this xfail is not strict because the test passes with
+    #  None or any of the UTC variants for tz_naive_fixture
     @pytest.mark.xfail(reason="Future behavior", strict=False)
     @pytest.mark.filterwarnings("ignore:\\n    Passing:FutureWarning")
     def test_construction_int_rountrip(self, tz_naive_fixture):
@@ -766,7 +768,7 @@ class TestDatetimeIndex:
         # TODO(GH-24559): Remove xfail
         tz = tz_naive_fixture
         result = 1293858000000000000
-        expected = DatetimeIndex([1293858000000000000], tz=tz).asi8[0]
+        expected = DatetimeIndex([result], tz=tz).asi8[0]
         assert result == expected
 
     def test_construction_from_replaced_timestamps_with_dst(self):
diff --git a/pandas/tests/indexes/datetimes/test_tools.py b/pandas/tests/indexes/datetimes/test_tools.py
index 10d422e8a..8db15709d 100644
--- a/pandas/tests/indexes/datetimes/test_tools.py
+++ b/pandas/tests/indexes/datetimes/test_tools.py
@@ -741,10 +741,7 @@ class TestToDatetime:
         )
         tm.assert_index_equal(result, expected)
 
-    @pytest.mark.parametrize(
-        "cache",
-        [pytest.param(True, marks=pytest.mark.skipif(True, reason="GH 18111")), False],
-    )
+    @pytest.mark.parametrize("cache", [True, False])
     def test_datetime_bool(self, cache):
         # GH13176
         with pytest.raises(TypeError):
diff --git a/pandas/tests/io/formats/test_to_csv.py b/pandas/tests/io/formats/test_to_csv.py
index c6485ff21..ee236a825 100644
--- a/pandas/tests/io/formats/test_to_csv.py
+++ b/pandas/tests/io/formats/test_to_csv.py
@@ -340,7 +340,6 @@ $1$,$2$
             with open(path, "r") as f:
                 assert f.read() == expected_ascii
 
-    @pytest.mark.xfail(strict=False)
     def test_to_csv_string_array_utf8(self):
         # GH 10813
         str_array = [{"names": ["foo", "bar"]}, {"names": ["baz", "qux"]}]
diff --git a/pandas/tests/io/test_parquet.py b/pandas/tests/io/test_parquet.py
index a04fb9fd5..d634859e7 100644
--- a/pandas/tests/io/test_parquet.py
+++ b/pandas/tests/io/test_parquet.py
@@ -33,6 +33,10 @@ try:
 except ImportError:
     _HAVE_FASTPARQUET = False
 
+pytestmark = pytest.mark.filterwarnings(
+    "ignore:RangeIndex.* is deprecated:DeprecationWarning"
+)
+
 
 # setup engines & skips
 @pytest.fixture(
@@ -408,8 +412,6 @@ class TestParquetPyArrow(Base):
 
         check_round_trip(df, pa)
 
-    # TODO: This doesn't fail on all systems; track down which
-    @pytest.mark.xfail(reason="pyarrow fails on this (ARROW-1883)", strict=False)
     def test_basic_subset_columns(self, pa, df_full):
         # GH18628
 
diff --git a/pandas/tests/plotting/test_datetimelike.py b/pandas/tests/plotting/test_datetimelike.py
index e3bc3d452..69070ea11 100644
--- a/pandas/tests/plotting/test_datetimelike.py
+++ b/pandas/tests/plotting/test_datetimelike.py
@@ -1098,7 +1098,6 @@ class TestTSPlot(TestPlotBase):
                 assert xp == rs
 
     @pytest.mark.slow
-    @pytest.mark.xfail(strict=False, reason="Unreliable test")
     def test_time_change_xlim(self):
         t = datetime(1, 1, 1, 3, 30, 0)
         deltas = np.random.randint(1, 20, 3).cumsum()
diff --git a/pandas/tests/scalar/period/test_period.py b/pandas/tests/scalar/period/test_period.py
index 4404b93e8..b57b81746 100644
--- a/pandas/tests/scalar/period/test_period.py
+++ b/pandas/tests/scalar/period/test_period.py
@@ -10,6 +10,7 @@ from pandas._libs.tslibs.frequencies import INVALID_FREQ_ERR_MSG
 from pandas._libs.tslibs.parsing import DateParseError
 from pandas._libs.tslibs.period import IncompatibleFrequency
 from pandas._libs.tslibs.timezones import dateutil_gettz, maybe_get_tz
+from pandas.compat import PY35
 from pandas.compat.numpy import np_datetime64_compat
 
 import pandas as pd
@@ -1579,8 +1580,9 @@ def test_period_immutable():
         per.freq = 2 * freq
 
 
-# TODO: This doesn't fail on all systems; track down which
-@pytest.mark.xfail(reason="Parses as Jan 1, 0007 on some systems", strict=False)
+@pytest.mark.xfail(
+    PY35, reason="Parsing as Period('0007-01-01', 'D') for reasons unknown", strict=True
+)
 def test_small_year_parsing():
     per1 = Period("0001-01-07", "D")
     assert per1.year == 1
diff --git a/pandas/tests/series/test_analytics.py b/pandas/tests/series/test_analytics.py
index 32d32a5d1..3a5a387b9 100644
--- a/pandas/tests/series/test_analytics.py
+++ b/pandas/tests/series/test_analytics.py
@@ -1489,7 +1489,7 @@ class TestCategoricalSeriesAnalytics:
             "unicode_",
             "timedelta64[h]",
             pytest.param(
-                "datetime64[D]", marks=pytest.mark.xfail(reason="GH#7996", strict=False)
+                "datetime64[D]", marks=pytest.mark.xfail(reason="GH#7996", strict=True)
             ),
         ],
     )
diff --git a/pandas/tests/sparse/test_combine_concat.py b/pandas/tests/sparse/test_combine_concat.py
index d7295c4bf..c553cd3fd 100644
--- a/pandas/tests/sparse/test_combine_concat.py
+++ b/pandas/tests/sparse/test_combine_concat.py
@@ -440,7 +440,7 @@ class TestSparseDataFrameConcat:
         "fill_value,sparse_idx,dense_idx",
         itertools.product([None, 0, 1, np.nan], [0, 1], [1, 0]),
     )
-    @pytest.mark.xfail(reason="The iloc fails and I can't make expected", strict=False)
+    @pytest.mark.xfail(reason="The iloc fails and I can't make expected", strict=True)
     def test_concat_sparse_dense_cols(self, fill_value, sparse_idx, dense_idx):
         # See GH16874, GH18914 and #18686 for why this should be a DataFrame
         from pandas.core.dtypes.common import is_sparse
diff --git a/pandas/tests/sparse/test_pivot.py b/pandas/tests/sparse/test_pivot.py
index 85b899dfe..880c1c55f 100644
--- a/pandas/tests/sparse/test_pivot.py
+++ b/pandas/tests/sparse/test_pivot.py
@@ -2,7 +2,6 @@ import numpy as np
 import pytest
 
 import pandas as pd
-from pandas import _np_version_under1p17
 import pandas.util.testing as tm
 
 
@@ -49,11 +48,6 @@ class TestPivotTable:
         )
         tm.assert_frame_equal(res_sparse, res_dense)
 
-    @pytest.mark.xfail(
-        not _np_version_under1p17,
-        reason="failing occasionally on numpy > 1.17",
-        strict=False,
-    )
     def test_pivot_table_multi(self):
         res_sparse = pd.pivot_table(
             self.sparse, index="A", columns="B", values=["D", "E"]
