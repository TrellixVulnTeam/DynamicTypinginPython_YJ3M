commit ee82f898b9b750af59a07f22f705d3c2b215fea1
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Oct 19 11:45:59 2011 -0400

    ENH: SQL-type converter type inference

diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index 4a84d2129..c98289246 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -11,6 +11,7 @@ import numpy as np
 from pandas import DataFrame, Index
 from pandas.io.parsers import read_csv, read_table, ExcelFile
 from pandas.util.testing import assert_almost_equal, assert_frame_equal
+import pandas._tseries as lib
 
 class TestParsers(unittest.TestCase):
 
@@ -194,6 +195,59 @@ baz,7,8,9
         data = read_csv(StringIO(data))
         self.assert_(data.index.equals(Index(['foo', 'bar', 'baz'])))
 
+
+def test_convert_sql_column_floats():
+    arr = np.array([1.5, None, 3, 4.2], dtype=object)
+    result = lib.convert_sql_column(arr)
+    expected = np.array([1.5, np.nan, 3, 4.2], dtype='f8')
+    assert_same_values_and_dtype(result, expected)
+
+def test_convert_sql_column_strings():
+    arr = np.array(['1.5', None, '3', '4.2'], dtype=object)
+    result = lib.convert_sql_column(arr)
+    expected = np.array(['1.5', np.nan, '3', '4.2'], dtype=object)
+    assert_same_values_and_dtype(result, expected)
+
+def test_convert_sql_column_unicode():
+    arr = np.array([u'1.5', None, u'3', u'4.2'], dtype=object)
+    result = lib.convert_sql_column(arr)
+    expected = np.array([u'1.5', np.nan, u'3', u'4.2'], dtype=object)
+    assert_same_values_and_dtype(result, expected)
+
+def test_convert_sql_column_ints():
+    arr = np.array([1, 2, 3, 4], dtype='O')
+    arr2 = np.array([1, 2, 3, 4], dtype='i4').astype('O')
+    result = lib.convert_sql_column(arr)
+    result2 = lib.convert_sql_column(arr2)
+    expected = np.array([1, 2, 3, 4], dtype='i8')
+    assert_same_values_and_dtype(result, expected)
+    assert_same_values_and_dtype(result2, expected)
+
+def test_convert_sql_column_bools():
+    arr = np.array([True, False, True, False], dtype='O')
+    result = lib.convert_sql_column(arr)
+    expected = np.array([True, False, True, False], dtype=bool)
+    assert_same_values_and_dtype(result, expected)
+
+    arr = np.array([True, False, None, False], dtype='O')
+    result = lib.convert_sql_column(arr)
+    expected = np.array([True, False, np.nan, False], dtype=object)
+    assert_same_values_and_dtype(result, expected)
+
+def test_convert_sql_column_decimals():
+    from decimal import Decimal
+    arr = np.array([Decimal('1.5'), None, Decimal('3'), Decimal('4.2')])
+    result = lib.convert_sql_column(arr)
+    expected = np.array([1.5, np.nan, 3, 4.2], dtype='f8')
+    assert_same_values_and_dtype(result, expected)
+
+def test_convert_sql_column_other():
+    arr = np.array([1.5, None, 3, 4.2])
+
+def assert_same_values_and_dtype(res, exp):
+    assert(res.dtype == exp.dtype)
+    assert_almost_equal(res, exp)
+
 def curpath():
     pth, _ = os.path.split(os.path.abspath(__file__))
     return pth
diff --git a/pandas/src/parsing.pyx b/pandas/src/parsing.pyx
index bf6f3be7f..7a186b2ed 100644
--- a/pandas/src/parsing.pyx
+++ b/pandas/src/parsing.pyx
@@ -94,6 +94,71 @@ def maybe_convert_numeric(ndarray[object] values, set na_values):
     else:
         return ints
 
+def convert_sql_column(ndarray[object] objects):
+    cdef:
+        Py_ssize_t i, n
+        ndarray[float64_t] floats
+        ndarray[int64_t] ints
+        ndarray[uint8_t, cast=True] bools
+        bint seen_float = 0
+        bint seen_int = 0
+        bint seen_object = 0
+        bint seen_bool = 0
+        bint seen_null = 0
+        object val, onan
+        float64_t fval, fnan
+
+    n = len(objects)
+
+    floats = np.empty(n, dtype='f8')
+    ints = np.empty(n, dtype='i8')
+    bools = np.empty(n, dtype=bool)
+
+    onan = np.nan
+    fnan = np.nan
+
+    for i from 0 <= i < n:
+        val = objects[i]
+
+        if val is None:
+            seen_null = 1
+            objects[i] = onan
+            floats[i] = fnan
+        elif cpython.PyBool_Check(val):
+            seen_bool = 1
+            bools[i] = val
+        elif cpython.PyInt_Check(val):
+            seen_int = 1
+            floats[i] = <float64_t> val
+            if not seen_null:
+                ints[i] = val
+        elif cpython.PyFloat_Check(val):
+            floats[i] = val
+            seen_float = 1
+        elif cpython.PyString_Check(val) or cpython.PyUnicode_Check(val):
+            seen_object = 1
+        else:
+            try:
+                floats[i] = float(val)
+                seen_float = 1
+            except Exception:
+                pass
+
+    if seen_null:
+        if seen_float:
+            return floats
+        else:
+            return objects
+    else:
+        if seen_int:
+            return ints
+        elif seen_float:
+            return floats
+        elif seen_bool:
+            return bools
+        elif seen_object:
+            return objects
+
 def try_parse_dates(ndarray[object] values, parser=None):
     cdef:
         Py_ssize_t i, n
