commit 7f8faf878b18dc323735b8f47402a66c006f7a0d
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Dec 14 18:21:32 2012 -0500

    BUG: raise exception if passing start, end, AND periods to date_range. close #2538

diff --git a/RELEASE.rst b/RELEASE.rst
index 72961f4d3..6dbd4385b 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -237,6 +237,7 @@ pandas 0.10.0
     columns, even if one DataFrame is length-zero (GH2525_)
   - Fix several DataFrame.icol/irow with duplicate indices issues (GH2228_, GH2259_)
   - Use Series names for column names when using concat with axis=1 (GH2489_)
+  - Raise Exception if start, end, periods all passed to date_range (GH2538_)
 
 .. _GH407: https://github.com/pydata/pandas/issues/407
 .. _GH821: https://github.com/pydata/pandas/issues/821
@@ -356,6 +357,7 @@ pandas 0.10.0
 .. _GH2228: https://github.com/pydata/pandas/issues/2228
 .. _GH2259: https://github.com/pydata/pandas/issues/2259
 .. _GH2489: https://github.com/pydata/pandas/issues/2489
+.. _GH2538: https://github.com/pydata/pandas/issues/2538
 
 
 pandas 0.9.1
diff --git a/doc/source/io.rst b/doc/source/io.rst
index 2c5dac393..6d3d29964 100644
--- a/doc/source/io.rst
+++ b/doc/source/io.rst
@@ -180,6 +180,15 @@ All of the dialect options can be specified separately by keyword arguments:
     data = 'a,b,c~1,2,3~4,5,6'
     pd.read_csv(StringIO(data), lineterminator='~')
 
+Another common dialect option is ``skipinitialspace``, to skip any whitespace
+after a delimiter:
+
+.. ipython:: python
+
+   data = 'a, b, c\n1, 2, 3\n4, 5, 6'
+   print data
+   pd.read_csv(StringIO(data), skipinitialspace=True)
+
 The parsers make every attempt to "do the right thing" and not be very
 fragile. Type inference is a pretty big deal. So if a column can be coerced to
 integer dtype without altering the contents, it will do so. Any non-numeric
diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index 246b70b3b..816698ba8 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -37,6 +37,13 @@ filepath_or_buffer : string or file handle / StringIO. The string could be
     is expected. For instance, a local file could be
     file ://localhost/path/to/table.csv
 %s
+lineterminator : string (length 1), default None
+    Character to break file into lines. Only valid with C parser
+quotechar : string
+quoting : string
+skipinitialspace : boolean, default False
+    Skip spaces after delimiter
+escapechar : string
 compression : {'gzip', 'bz2', None}, default None
     For on-the-fly decompression of on-disk data
 dialect : string or csv.Dialect instance, default None
@@ -108,16 +115,6 @@ encoding : string, default None
 squeeze : boolean, default False
     If the parsed data only contains one column then return a Series
 
-**Dialect options**
-
-lineterminator : string (length 1), default None
-    Character to break file into lines. Only valid with C parser
-quotechar : string
-quoting : string
-skipinitialspace : boolean, default False
-    Skip spaces after delimiter
-escapechar : string
-
 Returns
 -------
 result : DataFrame or TextParser
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 1d03e4df5..07dadc66c 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -285,7 +285,7 @@ class DatetimeIndex(Int64Index):
     @classmethod
     def _generate(cls, start, end, periods, name, offset,
                   tz=None, normalize=False):
-        if com._count_not_none(start, end, periods) < 2:
+        if com._count_not_none(start, end, periods) != 2:
             raise ValueError('Must specify two of start, end, or periods')
 
         _normalized = True
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 68736631f..855bbd024 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -226,6 +226,14 @@ class TestTimeSeries(unittest.TestCase):
 
         self.assert_(isinstance(s.iget_value(5), Timestamp))
 
+    def test_date_range_ambiguous_arguments(self):
+        # #2538
+        start = datetime(2011, 1, 1, 5, 3, 40)
+        end = datetime(2011, 1, 1, 8, 9, 40)
+
+        self.assertRaises(ValueError, date_range, start, end,
+                          freq='s', periods=10)
+
     def test_timestamp_to_datetime(self):
         _skip_if_no_pytz()
         rng = date_range('20090415', '20090519',
