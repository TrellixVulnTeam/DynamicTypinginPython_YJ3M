commit 02ef2c549901adad8d93f3da9154e63a79561e43
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Jan 25 17:24:00 2012 -0500

    BUG: fix SparseSeries.combine_first work when passed dense Series, make SparseDataFrame.combine_first work also, GH #687

diff --git a/pandas/sparse/frame.py b/pandas/sparse/frame.py
index 4ec717ab9..aa09fd215 100644
--- a/pandas/sparse/frame.py
+++ b/pandas/sparse/frame.py
@@ -14,6 +14,7 @@ from pandas.core.series import Series
 from pandas.core.frame import (DataFrame, extract_index, _prep_ndarray,
                                _default_index)
 from pandas.util.decorators import cache_readonly
+import pandas.core.common as com
 import pandas.core.datetools as datetools
 
 from pandas.sparse.series import SparseSeries
@@ -526,6 +527,19 @@ class SparseDataFrame(DataFrame):
         return SparseDataFrame(sdict, index=self.index, columns=columns,
                                default_fill_value=self.default_fill_value)
 
+    def _reindex_with_indexers(self, index, row_indexer, columns, col_indexer,
+                               copy):
+        if columns is None:
+            columns = self.columns
+
+        new_arrays = {}
+        for col in columns:
+            if col not in self:
+                continue
+            new_arrays[col] = com.take_1d(self[col].values, row_indexer)
+
+        return self._constructor(new_arrays, index=index, columns=columns)
+
     def _rename_index_inplace(self, mapper):
         self.index = [mapper(x) for x in self.index]
 
diff --git a/pandas/sparse/series.py b/pandas/sparse/series.py
index 13f49cd09..97e275fd4 100644
--- a/pandas/sparse/series.py
+++ b/pandas/sparse/series.py
@@ -501,7 +501,10 @@ to sparse
         -------
         y : Series
         """
-        dense_combined = self.to_dense().combine_first(other.to_dense())
+        if isinstance(other, SparseSeries):
+            other = other.to_dense()
+
+        dense_combined = self.to_dense().combine_first(other)
         return dense_combined.to_sparse(fill_value=self.fill_value)
 
 class SparseTimeSeries(SparseSeries, TimeSeries):
diff --git a/pandas/sparse/tests/test_sparse.py b/pandas/sparse/tests/test_sparse.py
index 49c96b51e..d7d5d2548 100644
--- a/pandas/sparse/tests/test_sparse.py
+++ b/pandas/sparse/tests/test_sparse.py
@@ -643,6 +643,18 @@ class TestSparseSeries(TestCase,
         self.assert_(isinstance(result, Series))
         assert_series_equal(result, expected)
 
+    def test_combine_first(self):
+        s = self.bseries
+
+        result = s[::2].combine_first(s)
+        result2 = s[::2].combine_first(s.to_dense())
+
+        expected = s[::2].to_dense().combine_first(s.to_dense())
+        expected = expected.to_sparse(fill_value=s.fill_value)
+
+        assert_sp_series_equal(result, result2)
+        assert_sp_series_equal(result, expected)
+
 class TestSparseTimeSeries(TestCase):
     pass
 
@@ -1194,6 +1206,18 @@ class TestSparseDataFrame(TestCase, test_frame.SafeForSparse):
         check_func(self.zframe)
         check_func(self.fill_frame)
 
+    def test_combine_first(self):
+        df = self.frame
+
+        result = df[::2].combine_first(df)
+        result2 = df[::2].combine_first(df.to_dense())
+
+        expected = df[::2].to_dense().combine_first(df.to_dense())
+        expected = expected.to_sparse(fill_value=df.default_fill_value)
+
+        assert_sp_frame_equal(result, result2)
+        assert_sp_frame_equal(result, expected)
+
 def _dense_series_compare(s, f):
     result = f(s)
     assert(isinstance(result, SparseSeries))
