commit abd1f677f2148734650c49cb6de72b607d6bd0ee
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu May 24 18:09:54 2012 -0400

    TST: unit test for #1307

diff --git a/pandas/tools/merge.py b/pandas/tools/merge.py
index 5c6ddcc70..2cfacf695 100644
--- a/pandas/tools/merge.py
+++ b/pandas/tools/merge.py
@@ -33,6 +33,10 @@ def merge(left, right, how='inner', on=None, left_on=None, right_on=None,
 if __debug__: merge.__doc__ = _merge_doc % '\nleft : DataFrame'
 
 
+class MergeError(Exception):
+    pass
+
+
 def ordered_merge(left, right, on=None, left_by=None, right_by=None,
                   left_on=None, right_on=None,
                   fill_method=None, suffixes=('_x', '_y')):
@@ -359,19 +363,19 @@ class _MergeOperation(object):
                 self.left_on, self.right_on = (), ()
             elif self.left_index:
                 if self.right_on is None:
-                    raise Exception('Must pass right_on or right_index=True')
+                    raise MergeError('Must pass right_on or right_index=True')
             elif self.right_index:
                 if self.left_on is None:
-                    raise Exception('Must pass left_on or left_index=True')
+                    raise MergeError('Must pass left_on or left_index=True')
             else:
                 # use the common columns
                 common_cols = self.left.columns.intersection(self.right.columns)
                 if len(common_cols) == 0:
-                    raise Exception('No common columns to perform merge on')
+                    raise MergeError('No common columns to perform merge on')
                 self.left_on = self.right_on = common_cols
         elif self.on is not None:
             if self.left_on is not None or self.right_on is not None:
-                raise Exception('Can only pass on OR left_on and '
+                raise MergeError('Can only pass on OR left_on and '
                                 'right_on')
             self.left_on = self.right_on = self.on
         elif self.left_on is not None:
@@ -420,7 +424,7 @@ class _MergeOperation(object):
             max_groups *= long(x)
 
         if max_groups > 2**63:  # pragma: no cover
-            raise Exception('Combinatorial explosion! (boom)')
+            raise MergeError('Combinatorial explosion! (boom)')
 
         left_group_key, right_group_key, max_groups = \
             _factorize_keys(left_group_key, right_group_key,
@@ -591,7 +595,7 @@ class _BlockJoinOperation(object):
     """
     def __init__(self, data_list, join_index, indexers, axis=1, copy=True):
         if axis <= 0:  # pragma: no cover
-            raise Exception('Only axis >= 1 supported for this operation')
+            raise MergeError('Only axis >= 1 supported for this operation')
 
         assert(len(data_list) == len(indexers))
 
diff --git a/pandas/tools/tests/test_merge.py b/pandas/tools/tests/test_merge.py
index 8253ad4e1..abdbd5e96 100644
--- a/pandas/tools/tests/test_merge.py
+++ b/pandas/tools/tests/test_merge.py
@@ -3,6 +3,7 @@
 import nose
 import unittest
 
+from datetime import datetime
 from numpy.random import randn
 from numpy import nan
 import numpy as np
@@ -10,7 +11,7 @@ import random
 
 from pandas import *
 from pandas.tseries.index import DatetimeIndex
-from pandas.tools.merge import merge, concat, ordered_merge
+from pandas.tools.merge import merge, concat, ordered_merge, MergeError
 from pandas.util.testing import (assert_frame_equal, assert_series_equal,
                                  assert_almost_equal, rands)
 import pandas._tseries as lib
@@ -656,6 +657,27 @@ class TestMergeMulti(unittest.TestCase):
         expected = left.join(rdf)
         tm.assert_frame_equal(merged, expected)
 
+    def test_mixed_type_join_with_suffix(self):
+        # GH #916
+        df = DataFrame(np.random.randn(20, 6),
+                       columns=['a', 'b', 'c', 'd', 'e', 'f'])
+        df.insert(0, 'id', 0)
+        df.insert(5, 'dt', 'foo')
+
+        grouped = df.groupby('id')
+        mn = grouped.mean()
+        cn = grouped.count()
+
+        # it works!
+        mn.join(cn, rsuffix='_right')
+
+    def test_no_overlap_more_informative_error(self):
+        dt = datetime.now()
+        df1 = DataFrame({'x': ['a']}, index=[dt])
+
+        df2 = DataFrame({'y': ['b', 'c']}, index=[dt, dt])
+        self.assertRaises(MergeError, merge, df1, df2)
+
 def _check_join(left, right, result, join_col, how='left',
                 lsuffix='_x', rsuffix='_y'):
 
@@ -1235,20 +1257,6 @@ class TestConcatenate(unittest.TestCase):
         tm.assert_frame_equal(result, df)
         self.assertRaises(Exception, concat, [None, None])
 
-    def test_mixed_type_join_with_suffix(self):
-        # GH #916
-        df = DataFrame(np.random.randn(20, 6),
-                       columns=['a', 'b', 'c', 'd', 'e', 'f'])
-        df.insert(0, 'id', 0)
-        df.insert(5, 'dt', 'foo')
-
-        grouped = df.groupby('id')
-        mn = grouped.mean()
-        cn = grouped.count()
-
-        # it works!
-        mn.join(cn, rsuffix='_right')
-
 
 class TestOrderedMerge(unittest.TestCase):
 
