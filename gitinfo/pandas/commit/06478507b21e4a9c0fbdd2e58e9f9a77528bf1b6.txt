commit 06478507b21e4a9c0fbdd2e58e9f9a77528bf1b6
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Mon Apr 6 14:22:21 2020 -0700

    REF: BlockManager.delete -> idelete (#33332)

diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index fac4ca676..3363d2268 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -3713,7 +3713,8 @@ class NDFrame(PandasObject, SelectionMixin, indexing.IndexingMixin):
             # If the above loop ran and didn't delete anything because
             # there was no match, this call should raise the appropriate
             # exception:
-            self._mgr.delete(key)
+            loc = self.axes[-1].get_loc(key)
+            self._mgr.idelete(loc)
 
         # delete from the caches
         try:
diff --git a/pandas/core/internals/managers.py b/pandas/core/internals/managers.py
index c6efd6a2a..b2c43be21 100644
--- a/pandas/core/internals/managers.py
+++ b/pandas/core/internals/managers.py
@@ -1007,12 +1007,10 @@ class BlockManager(PandasObject):
             self.axes[1],
         )
 
-    def delete(self, item):
+    def idelete(self, indexer):
         """
-        Delete selected item (items if non-unique) in-place.
+        Delete selected locations in-place (new block and array, same BlockManager)
         """
-        indexer = self.items.get_loc(item)
-
         is_deleted = np.zeros(self.shape[0], dtype=np.bool_)
         is_deleted[indexer] = True
         ref_loc_offset = -is_deleted.cumsum()
@@ -1606,15 +1604,14 @@ class SingleBlockManager(BlockManager):
     def _consolidate_inplace(self):
         pass
 
-    def delete(self, item):
+    def idelete(self, indexer):
         """
-        Delete single item from SingleBlockManager.
+        Delete single location from SingleBlockManager.
 
         Ensures that self.blocks doesn't become empty.
         """
-        loc = self.items.get_loc(item)
-        self._block.delete(loc)
-        self.axes[0] = self.axes[0].delete(loc)
+        self._block.delete(indexer)
+        self.axes[0] = self.axes[0].delete(indexer)
 
     def fast_xs(self, loc):
         """
