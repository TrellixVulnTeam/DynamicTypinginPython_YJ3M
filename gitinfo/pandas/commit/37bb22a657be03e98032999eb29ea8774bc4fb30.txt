commit 37bb22a657be03e98032999eb29ea8774bc4fb30
Author: jreback <jeff@reback.net>
Date:   Tue Feb 12 22:48:15 2013 -0500

    DOC: RELEASE and whatsnew updated for DataFrame from lists change

diff --git a/RELEASE.rst b/RELEASE.rst
index e98849123..11b047e4f 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -53,6 +53,9 @@ pandas 0.11.0
 
   - Do not automatically upcast numeric specified dtypes to ``int64`` or
     ``float64`` (GH622_ and GH797_)
+  - DataFrame construction of lists will no longer be platform dependent when
+    dtype is NOT specified, e.g. DataFrame([1,2]) will be ``int64``
+    like DataFrame({'a' : [1,2]})
   - Guarantee that ``convert_objects()`` for Series/DataFrame always returns a
     copy
   - groupby operations will respect dtypes for numeric float operations
diff --git a/doc/source/v0.11.0.txt b/doc/source/v0.11.0.txt
index d2648cbdb..a03cfcbad 100644
--- a/doc/source/v0.11.0.txt
+++ b/doc/source/v0.11.0.txt
@@ -3,7 +3,7 @@
 v0.11.0 (March ??, 2013)
 ------------------------
 
-This is a minor release from 0.10.1 and includes many new features and
+This is a major release from 0.10.1 and includes many new features and
 enhancements along with a large number of bug fixes. There are also a number of
 important API changes that long-time pandas users should pay close attention
 to.
@@ -54,6 +54,18 @@ Numeric dtypes will propagate and can coexist in DataFrames. If a dtype is passe
                Timestamp('20010104'), '20010105'],dtype='O')
    s.convert_objects(convert_dates='coerce')
 
+
+**Platform Gotchas**
+
+In versions prior to 0.11.0, DataFrame construction with lists was platform dependent (meaning 32-bit vs 64-bit). 
+``DataFrame([1,2],columns=['a'])`` would have a dtype of ``int32``, 
+while ``DataFrame({'a' : [1,2] })`` would be ``int64``. 
+Now construction dtype defaults will be handled in a platform independent manor, 
+resulting in defaults for integers of ``int64`` and floats of ``float64`` dtypes.
+
+Keep in mind that ``DataFrame(np.array([1,2]))`` **WILL** result in ``int32`` on 32-bit platforms!
+
+
 **Upcasting Gotchas**
 
 Performing indexing operations on integer type data can easily upcast the data.
@@ -82,21 +94,11 @@ While float dtypes are unchanged.
    casted
    casted.dtypes
 
-New features
-~~~~~~~~~~~~
-
-**Enhancements**
-
-  - In ``HDFStore``, provide dotted attribute access to ``get`` from stores (e.g. store.df == store['df'])
-
-**Bug Fixes**
-
-See the `full release notes
-<https://github.com/pydata/pandas/blob/master/RELEASE.rst>`__ or issue tracker
-on GitHub for a complete list.
-
+**Datetimes conversion**
 
-Datetime64[ns] columns in a DataFrame (or a Series) allow the use of ``np.nan`` to indicate a nan value, in addition to the traditional ``NaT``, or not-a-time. This allows convenient nan setting in a generic way. Furthermore datetime64 columns are created by default, when passed datetimelike objects (*this change was introduced in 0.10.1*)
+Datetime64[ns] columns in a DataFrame (or a Series) allow the use of ``np.nan`` to indicate a nan value, 
+in addition to the traditional ``NaT``, or not-a-time. This allows convenient nan setting in a generic way.
+Furthermore ``datetime64[ns]`` columns are created by default, when passed datetimelike objects (*this change was introduced in 0.10.1*)
 
 .. ipython:: python
 
@@ -111,8 +113,7 @@ Datetime64[ns] columns in a DataFrame (or a Series) allow the use of ``np.nan``
    df.ix[2:4,['A','timestamp']] = np.nan
    df
 
-Astype conversion on datetime64[ns] to object, implicity converts ``NaT`` to ``np.nan``
-
+Astype conversion on ``datetime64[ns]`` to ``object``, implicity converts ``NaT`` to ``np.nan``
 
 .. ipython:: python
 
@@ -127,6 +128,13 @@ Astype conversion on datetime64[ns] to object, implicity converts ``NaT`` to ``n
    s.dtype
 
 
+New features
+~~~~~~~~~~~~
+
+**Enhancements**
+
+  - In ``HDFStore``, provide dotted attribute access to ``get`` from stores (e.g. store.df == store['df'])
+
 ``Squeeze`` to possibly remove length 1 dimensions from an object.
 
 .. ipython:: python
@@ -137,3 +145,11 @@ Astype conversion on datetime64[ns] to object, implicity converts ``NaT`` to ``n
    p
    p.reindex(items=['ItemA']).squeeze()
    p.reindex(items=['ItemA'],minor=['B']).squeeze()
+
+**Bug Fixes**
+
+See the `full release notes
+<https://github.com/pydata/pandas/blob/master/RELEASE.rst>`__ or issue tracker
+on GitHub for a complete list.
+
+
