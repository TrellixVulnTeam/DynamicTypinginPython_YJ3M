commit 1112cb74264d40a91ce2a80f6bbbf24298a72f40
Author: jreback <jeff@reback.net>
Date:   Mon Jan 27 10:19:10 2014 -0500

    DOC: v0.13.1 doc updates

diff --git a/doc/source/tutorials.rst b/doc/source/tutorials.rst
index caa6f0bb5..5d5a3edab 100644
--- a/doc/source/tutorials.rst
+++ b/doc/source/tutorials.rst
@@ -25,16 +25,16 @@ Here are links to the v0.1 release. For an up-to-date table of contents, see the
 repository <http://github.com/jvns/pandas-cookbook>`_.
 
 *  | `A quick tour of the IPython
-     Notebook <http://nbviewer.ipython.org/github/jvns/pandas-c|%2055ookbook/blob/v0.1/cookbook/A%20quick%20tour%20of%20IPython%20Notebook.ipynb>`_
-   |  Shows off IPython's awesome tab completion and magic functions.
+     Notebook: <http://nbviewer.ipython.org/github/jvns/pandas-c|%2055ookbook/blob/v0.1/cookbook/A%20quick%20tour%20of%20IPython%20Notebook.ipynb>`_
+     Shows off IPython's awesome tab completion and magic functions.
 *  | `Chapter 1: <http://nbviewer.ipython.org/github/jvns/pandas-cookbook/blob/v0.1/cookbook/Chapter%201%20-%20Reading%20from%20a%20CSV.ipynb>`_
-      Reading your data into pandas is pretty much the easiest thing. Even
+     Reading your data into pandas is pretty much the easiest thing. Even
      when the encoding is wrong!
 *  | `Chapter 2: <http://nbviewer.ipython.org/github/jvns/pandas-cookbook/blob/v0.1/cookbook/Chapter%202%20-%20Selecting%20data%20&%20finding%20the%20most%20common%20complaint%20type.ipynb>`_
      It's not totally obvious how to select data from a pandas dataframe.
      Here we explain the basics (how to take slices and get columns)
 *  | `Chapter 3: <http://nbviewer.ipython.org/github/jvns/pandas-cookbook/blob/v0.1/cookbook/Chapter%203%20-%20Which%20borough%20has%20the%20most%20noise%20complaints%3F%20%28or%2C%20more%20selecting%20data%29.ipynb>`_
-    Here we get into serious slicing and dicing and learn how to filter
+     Here we get into serious slicing and dicing and learn how to filter
      dataframes in complicated ways, really fast.
 *  | `Chapter 4: <http://nbviewer.ipython.org/github/jvns/pandas-cookbook/blob/v0.1/cookbook/Chapter%204%20-%20Find%20out%20on%20which%20weekday%20people%20bike%20the%20most%20with%20groupby%20and%20aggregate.ipynb>`_
       Groupby/aggregate is seriously my favorite thing about pandas
@@ -43,14 +43,14 @@ repository <http://github.com/jvns/pandas-cookbook>`_.
      Here you get to find out if it's cold in Montreal in the winter
      (spoiler: yes). Web scraping with pandas is fun! Here we combine dataframes.
 *  | `Chapter 6:  <http://nbviewer.ipython.org/github/jvns/pandas-cookbook/blob/v0.1/cookbook/Chapter%206%20-%20String%20operations%21%20Which%20month%20was%20the%20snowiest%3F.ipynb>`_
-      Strings with pandas are great. It has all these vectorized string
+     Strings with pandas are great. It has all these vectorized string
      operations and they're the best. We will turn a bunch of strings
      containing "Snow" into vectors of numbers in a trice.
 *  | `Chapter 7: <http://nbviewer.ipython.org/github/jvns/pandas-cookbook/blob/v0.1/cookbook/Chapter%207%20-%20Cleaning%20up%20messy%20data.ipynb>`_
-      Cleaning up messy data is never a joy, but with pandas it's easier.
+     Cleaning up messy data is never a joy, but with pandas it's easier.
 *  | `Chapter 8:  <http://nbviewer.ipython.org/github/jvns/pandas-cookbook/blob/v0.1/cookbook/Chapter%208%20-%20How%20to%20deal%20with%20timestamps.ipynb>`_
-      Parsing Unix timestamps is confusing at first but it turns out
-      to be really easy.
+     Parsing Unix timestamps is confusing at first but it turns out
+     to be really easy.
 
 
 
@@ -60,54 +60,43 @@ Lessons for New Pandas Users
 For more resources, please visit the main `repository <https://bitbucket.org/hrojas/learn-pandas>`_.
 
 *  | `01 - Lesson: <http://nbviewer.ipython.org/urls/bitbucket.org/hrojas/learn-pandas/raw/master/lessons/01%20-%20Lesson.ipynb>`_
-
-    * Importing libraries
-    * Creating data sets
-    * Creating data frames
-    * Reading from CSV
-    * Exporting to CSV
-    * Finding maximums
-    * Plotting data
+  * Importing libraries
+  * Creating data sets
+  * Creating data frames
+  * Reading from CSV
+  * Exporting to CSV
+  * Finding maximums
+  * Plotting data
 *  | `02 - Lesson: <http://nbviewer.ipython.org/urls/bitbucket.org/hrojas/learn-pandas/raw/master/lessons/02%20-%20Lesson.ipynb>`_
-
-    * Reading from TXT
-    * Exporting to TXT
-    * Selecting top/bottom records
-    * Descriptive statistics
-    * Grouping/sorting data
+  * Reading from TXT
+  * Exporting to TXT
+  * Selecting top/bottom records
+  * Descriptive statistics
+  * Grouping/sorting data
 *  | `03 - Lesson: <http://nbviewer.ipython.org/urls/bitbucket.org/hrojas/learn-pandas/raw/master/lessons/03%20-%20Lesson.ipynb>`_
-
-    * Creating functions
-    * Reading from EXCEL
-    * Exporting to EXCEL
-    * Outliers
-    * Lambda functions
-    * Slice and dice data
+  * Creating functions
+  * Reading from EXCEL
+  * Exporting to EXCEL
+  * Outliers
+  * Lambda functions
+  * Slice and dice data
 *  | `04 - Lesson: <http://nbviewer.ipython.org/urls/bitbucket.org/hrojas/learn-pandas/raw/master/lessons/04%20-%20Lesson.ipynb>`_
-
-    * Adding/deleting columns
-    * Index operations
+  * Adding/deleting columns
+  * Index operations
 *  | `05 - Lesson: <http://nbviewer.ipython.org/urls/bitbucket.org/hrojas/learn-pandas/raw/master/lessons/05%20-%20Lesson.ipynb>`_
-
-    * Stack/Unstack/Transpose functions
+  * Stack/Unstack/Transpose functions
 *  | `06 - Lesson: <http://nbviewer.ipython.org/urls/bitbucket.org/hrojas/learn-pandas/raw/master/lessons/06%20-%20Lesson.ipynb>`_
-
-    * GroupBy function
+  * GroupBy function
 *  | `07 - Lesson: <http://nbviewer.ipython.org/urls/bitbucket.org/hrojas/learn-pandas/raw/master/lessons/07%20-%20Lesson.ipynb>`_
-
-    * Ways to calculate outliers
+  * Ways to calculate outliers
 *  | `08 - Lesson: <http://nbviewer.ipython.org/urls/bitbucket.org/hrojas/learn-pandas/raw/master/lessons/08%20-%20Lesson.ipynb>`_
-
-    * Read from Microsoft SQL databases
+  * Read from Microsoft SQL databases
 *  | `09 - Lesson: <http://nbviewer.ipython.org/urls/bitbucket.org/hrojas/learn-pandas/raw/master/lessons/09%20-%20Lesson.ipynb>`_
-
-    * Export to CSV/EXCEL/TXT
+  * Export to CSV/EXCEL/TXT
 *  | `10 - Lesson: <http://nbviewer.ipython.org/urls/bitbucket.org/hrojas/learn-pandas/raw/master/lessons/10%20-%20Lesson.ipynb>`_
-
-    * Converting between different kinds of formats
+  * Converting between different kinds of formats
 *  | `11 - Lesson: <http://nbviewer.ipython.org/urls/bitbucket.org/hrojas/learn-pandas/raw/master/lessons/11%20-%20Lesson.ipynb>`_
-
-    * Combining data from various sources
+  * Combining data from various sources
 
 
 Excel charts with pandas, vincent and xlsxwriter
diff --git a/doc/source/v0.13.1.txt b/doc/source/v0.13.1.txt
index e3e06357c..8a6a89fab 100644
--- a/doc/source/v0.13.1.txt
+++ b/doc/source/v0.13.1.txt
@@ -3,15 +3,15 @@
 v0.13.1 (February ???)
 ----------------------
 
-This is a minor release from 0.13.0 and includes a number of API changes, several new features and
-enhancements along with a large number of bug fixes.
+This is a minor release from 0.13.0 and includes a small number of API changes, several new features,
+enhancements, and performance improvements along with a large number of bug fixes. We recommend that all
+users upgrade to this version.
 
 Highlights include:
 
-Several experimental features are added, including:
-
-There are several new or updated docs sections including:
-
+- ``infer_datetime_format`` keyword to ``read_csv/to_datetime`` to allow speedups for homogeneously formatted datetimes
+- intelligently limited display precision for datetime/timedelta formats
+- enhanced Panel :meth:`~pandas.Panel.apply` method
 - :ref:`Tutorials<tutorials>`, a guide to community developed pandas tutorials.
 - :ref:`Pandas Ecosystem<ecosystem>`, a guide to complementary projects built on top of pandas.
 
@@ -96,6 +96,8 @@ These were announced changes in 0.13 or prior that are taking effect as of 0.13.
 Deprecations
 ~~~~~~~~~~~~
 
+There are no deprecations of prior behavior in 0.13.1
+
 Enhancements
 ~~~~~~~~~~~~
 
@@ -103,6 +105,17 @@ Enhancements
   improves parsing perf in many cases. Thanks to @lexual for suggesting and @danbirken
   for rapidly implementing. (:issue:`5490`, :issue:`6021`)
 
+  If ``parse_dates`` is enabled and this flag is set, pandas will attempt to
+  infer the format of the datetime strings in the columns, and if it can
+  be inferred, switch to a faster method of parsing them.  In some cases
+  this can increase the parsing speed by ~5-10x.
+
+  .. code-block:: python
+
+      # Try to infer the format for the index column
+      df = pd.read_csv('foo.csv', index_col=0, parse_dates=True,
+                       infer_datetime_format=True)
+
 - ``date_format`` and ``datetime_format`` keywords can now be specified when writing to ``excel``
   files (:issue:`4133`)
 
@@ -147,7 +160,7 @@ Enhancements
 
       pd.set_option('show_dimensions', True)
 
-- ``Panel.apply`` will work on non-ufuncs. See :ref:`the docs<basics.apply_panel>`.
+- Panel :meth:`~pandas.Panel.apply` will work on non-ufuncs. See :ref:`the docs<basics.apply_panel>`.
 
   .. ipython:: python
 
@@ -183,7 +196,7 @@ Enhancements
      result
      result['ItemA']
 
-- ``Panel.apply`` operating on cross-sectional slabs. (:issue:`1148`)
+- Panel :meth:`~pandas.Panel.apply` operating on cross-sectional slabs. (:issue:`1148`)
 
   .. ipython:: python
 
@@ -201,23 +214,24 @@ Enhancements
      result
      result.loc[:,:,'ItemA']
 
-- Added optional ``infer_datetime_format`` to ``read_csv``, ``Series.from_csv``
-  and ``DataFrame.read_csv`` (:issue:`5490`)
-
-  If ``parse_dates`` is enabled and this flag is set, pandas will attempt to
-  infer the format of the datetime strings in the columns, and if it can
-  be inferred, switch to a faster method of parsing them.  In some cases
-  this can increase the parsing speed by ~5-10x.
+Performance
+~~~~~~~~~~~
 
-  .. code-block:: python
+Performance improvements for 0.13.1
 
-      # Try to infer the format for the index column
-      df = pd.read_csv('foo.csv', index_col=0, parse_dates=True,
-                       infer_datetime_format=True)
+- Series datetime/timedelta binary operations (:issue:`5801`)
+- DataFrame ``count/dropna`` for ``axis=1``
+- Series.str.contains now has a `regex=False` keyword which can be faster for plain (non-regex) string patterns. (:issue:`5879`)
+- Series.str.extract (:issue:`5944`)
+- ``dtypes/ftypes`` methods (:issue:`5968`)
+- indexing with object dtypes (:issue:`5968`)
+- ``DataFrame.apply`` (:issue:`6013`)
 
 Experimental
 ~~~~~~~~~~~~
 
+There are no experimental changes in 0.13.1
+
 Bug Fixes
 ~~~~~~~~~
 
