commit fa0934f2e2e642c0b65ac7ff1cb7ba524804281f
Author: Ken Van Haren <kenvanharen@gmail.com>
Date:   Wed Nov 21 02:48:53 2012 -0800

    Make sparse frame and series construction more efficient.

diff --git a/pandas/sparse/frame.py b/pandas/sparse/frame.py
index c38936b55..58d3a90e9 100644
--- a/pandas/sparse/frame.py
+++ b/pandas/sparse/frame.py
@@ -92,7 +92,9 @@ class SparseDataFrame(DataFrame):
                 columns = Index([])
             else:
                 for c in columns:
-                    sdict[c] = Series(np.nan, index=index)
+                    sdict[c] = SparseSeries(np.nan, index=index,
+                                            kind=self.default_kind,
+                                            fill_value=self.default_fill_value)
 
         self._series = sdict
         self.columns = columns
diff --git a/pandas/sparse/series.py b/pandas/sparse/series.py
index 8be9e2b5c..ae9bda78d 100644
--- a/pandas/sparse/series.py
+++ b/pandas/sparse/series.py
@@ -108,13 +108,23 @@ class SparseSeries(SparseArray, Series):
             if index is None:
                 raise Exception('must pass index!')
 
-            values = np.empty(len(index))
-            values.fill(data)
-
-            # TODO: more efficient
-
-            values, sparse_index = make_sparse(values, kind=kind,
-                                               fill_value=fill_value)
+            length = len(index)
+
+            if data == fill_value or (np.isnan(data)
+                    and np.isnan(fill_value)):
+                if kind == 'block':
+                    sparse_index = BlockIndex(length, [], [])
+                else:
+                    sparse_index = IntIndex(length, [])
+                values = np.array([])
+            else:
+                if kind == 'block':
+                    locs, lens = ([0], [length]) if length else ([], [])
+                    sparse_index = BlockIndex(length, locs, lens)
+                else:
+                    sparse_index = IntIndex(length, index)
+                values = np.empty(length)
+                values.fill(data)
 
         else:
             # array-like
diff --git a/pandas/sparse/tests/test_sparse.py b/pandas/sparse/tests/test_sparse.py
index 1b0c0dad5..3cc0b8baa 100644
--- a/pandas/sparse/tests/test_sparse.py
+++ b/pandas/sparse/tests/test_sparse.py
@@ -731,6 +731,12 @@ class TestSparseDataFrame(TestCase, test_frame.SafeForSparse):
         assert_almost_equal([0, 0, 0, 0, 1, 2, 3, 4, 5, 6],
                             self.zframe['A'].values)
 
+        # construct no data
+        sdf = SparseDataFrame(columns=np.arange(10), index=np.arange(10))
+        for col, series in sdf.iteritems():
+            self.assert_(isinstance(series, SparseSeries))
+        
+
         # construct from nested dict
         data = {}
         for c, s in self.frame.iteritems():
