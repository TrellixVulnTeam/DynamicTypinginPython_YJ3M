commit 3be3254c06a97ffe4b73b9a55df30422ceeca36d
Author: Tom Augspurger <TomAugspurger@users.noreply.github.com>
Date:   Fri Jul 6 11:48:37 2018 -0500

    DOC: Fixup docstring (#21663)

diff --git a/doc/source/merging.rst b/doc/source/merging.rst
index 2eb5962ea..eb71722dd 100644
--- a/doc/source/merging.rst
+++ b/doc/source/merging.rst
@@ -494,7 +494,7 @@ You can also pass a list of dicts or Series:
 
    dicts = [{'A': 1, 'B': 2, 'C': 3, 'X': 4},
             {'A': 5, 'B': 6, 'C': 7, 'Y': 8}]
-   result = df1.append(dicts, ignore_index=True)
+   result = df1.append(dicts, ignore_index=True, sort=False)
 
 .. ipython:: python
    :suppress:
diff --git a/doc/source/text.rst b/doc/source/text.rst
index 34bb1a07d..dde82e3c1 100644
--- a/doc/source/text.rst
+++ b/doc/source/text.rst
@@ -270,12 +270,13 @@ For concatenation with a ``Series`` or ``DataFrame``, it is possible to align th
 the ``join``-keyword.
 
 .. ipython:: python
+   :okwarning:
 
-    u = pd.Series(['b', 'd', 'a', 'c'], index=[1, 3, 0, 2])
-    s
-    u
-    s.str.cat(u)
-    s.str.cat(u, join='left')
+   u = pd.Series(['b', 'd', 'a', 'c'], index=[1, 3, 0, 2])
+   s
+   u
+   s.str.cat(u)
+   s.str.cat(u, join='left')
 
 .. warning::
 
@@ -296,7 +297,7 @@ In particular, alignment also means that the different lengths do not need to co
 The same alignment can be used when ``others`` is a ``DataFrame``:
 
 .. ipython:: python
-    
+
     f = d.loc[[3, 2, 1, 0], :]
     s
     f
@@ -311,7 +312,7 @@ All one-dimensional list-likes can be arbitrarily combined in a list-like contai
 
     s
     u
-    s.str.cat([u, pd.Index(u.values), ['A', 'B', 'C', 'D'], map(str, u.index)], na_rep='-')
+    s.str.cat([u, u.values, ['A', 'B', 'C', 'D'], map(str, u.index)], na_rep='-')
 
 All elements must match in length to the calling ``Series`` (or ``Index``), except those having an index if ``join`` is not None:
 
diff --git a/doc/source/whatsnew/v0.10.0.txt b/doc/source/whatsnew/v0.10.0.txt
index ec4ac17c8..298088a4f 100644
--- a/doc/source/whatsnew/v0.10.0.txt
+++ b/doc/source/whatsnew/v0.10.0.txt
@@ -281,17 +281,12 @@ The old behavior of printing out summary information can be achieved via the
 
 The width of each line can be changed via 'line_width' (80 by default):
 
-.. ipython:: python
+.. code-block:: python
 
    pd.set_option('line_width', 40)
 
    wide_frame
 
-.. ipython:: python
-   :suppress:
-
-   pd.reset_option('line_width')
-
 
 Updated PyTables Support
 ~~~~~~~~~~~~~~~~~~~~~~~~
diff --git a/doc/source/whatsnew/v0.13.1.txt b/doc/source/whatsnew/v0.13.1.txt
index 51ca6116d..a4807a6d6 100644
--- a/doc/source/whatsnew/v0.13.1.txt
+++ b/doc/source/whatsnew/v0.13.1.txt
@@ -119,8 +119,7 @@ API changes
   equal. NaNs in identical locations are treated as
   equal. (:issue:`5283`) See also :ref:`the docs<basics.equals>` for a motivating example.
 
-  .. ipython:: python
-      :okwarning:
+  .. code-block:: python
 
       df = DataFrame({'col':['foo', 0, np.nan]})
       df2 = DataFrame({'col':[np.nan, 0, 'foo']}, index=[2,1,0])
diff --git a/doc/source/whatsnew/v0.14.1.txt b/doc/source/whatsnew/v0.14.1.txt
index 5183dd24e..d019cf540 100644
--- a/doc/source/whatsnew/v0.14.1.txt
+++ b/doc/source/whatsnew/v0.14.1.txt
@@ -92,15 +92,15 @@ Enhancements
   ``offsets.apply``, ``rollforward`` and ``rollback`` resets the time (hour,
   minute, etc) or not (default ``False``, preserves time) (:issue:`7156`):
 
-  .. ipython:: python
+  .. code-block:: python
 
-   import pandas.tseries.offsets as offsets
+     import pandas.tseries.offsets as offsets
 
-   day = offsets.Day()
-   day.apply(Timestamp('2014-01-01 09:00'))
+     day = offsets.Day()
+     day.apply(Timestamp('2014-01-01 09:00'))
 
-   day = offsets.Day(normalize=True)
-   day.apply(Timestamp('2014-01-01 09:00'))
+     day = offsets.Day(normalize=True)
+     day.apply(Timestamp('2014-01-01 09:00'))
 
 - ``PeriodIndex`` is represented as the same format as ``DatetimeIndex`` (:issue:`7601`)
 - ``StringMethods`` now work on empty Series (:issue:`7242`)
diff --git a/doc/source/whatsnew/v0.15.0.txt b/doc/source/whatsnew/v0.15.0.txt
index 79003296a..4be697595 100644
--- a/doc/source/whatsnew/v0.15.0.txt
+++ b/doc/source/whatsnew/v0.15.0.txt
@@ -1008,7 +1008,7 @@ Other:
     business_dates = date_range(start='4/1/2014', end='6/30/2014', freq='B')
     df = DataFrame(1, index=business_dates, columns=['a', 'b'])
     # get the first, 4th, and last date index for each month
-    df.groupby((df.index.year, df.index.month)).nth([0, 3, -1])
+    df.groupby([df.index.year, df.index.month]).nth([0, 3, -1])
 
 - ``Period`` and ``PeriodIndex`` supports addition/subtraction with ``timedelta``-likes (:issue:`7966`)
 
diff --git a/doc/source/whatsnew/v0.17.1.txt b/doc/source/whatsnew/v0.17.1.txt
index c5ae0d147..328a8193c 100644
--- a/doc/source/whatsnew/v0.17.1.txt
+++ b/doc/source/whatsnew/v0.17.1.txt
@@ -58,7 +58,7 @@ We can render the HTML to get the following table.
    :file: whatsnew_0171_html_table.html
 
 :class:`~pandas.core.style.Styler` interacts nicely with the Jupyter Notebook.
-See the :doc:`documentation <style>` for more.
+See the :ref:`documentation </style.ipynb>` for more.
 
 .. _whatsnew_0171.enhancements:
 
diff --git a/doc/source/whatsnew/v0.24.0.txt b/doc/source/whatsnew/v0.24.0.txt
index 0f91f1e09..ce6953cac 100644
--- a/doc/source/whatsnew/v0.24.0.txt
+++ b/doc/source/whatsnew/v0.24.0.txt
@@ -308,7 +308,7 @@ Timezones
 ^^^^^^^^^
 
 - Bug in :meth:`DatetimeIndex.shift` where an ``AssertionError`` would raise when shifting across DST (:issue:`8616`)
-- Bug in :class:`Timestamp` constructor where passing an invalid timezone offset designator (``Z``) would not raise a ``ValueError``(:issue:`8910`)
+- Bug in :class:`Timestamp` constructor where passing an invalid timezone offset designator (``Z``) would not raise a ``ValueError`` (:issue:`8910`)
 - Bug in :meth:`Timestamp.replace` where replacing at a DST boundary would retain an incorrect offset (:issue:`7825`)
 - Bug in :meth:`Series.replace` with ``datetime64[ns, tz]`` data when replacing ``NaT`` (:issue:`11792`)
 - Bug in :class:`Timestamp` when passing different string date formats with a timezone offset would produce different timezone offsets (:issue:`12064`)
diff --git a/doc/source/whatsnew/v0.8.0.txt b/doc/source/whatsnew/v0.8.0.txt
index 29d6fe563..28c043e77 100644
--- a/doc/source/whatsnew/v0.8.0.txt
+++ b/doc/source/whatsnew/v0.8.0.txt
@@ -178,7 +178,7 @@ types. For example, ``'kde'`` is a new option:
    s = Series(np.concatenate((np.random.randn(1000),
                               np.random.randn(1000) * 0.5 + 3)))
    plt.figure()
-   s.hist(normed=True, alpha=0.2)
+   s.hist(density=True, alpha=0.2)
    s.plot(kind='kde')
 
 See :ref:`the plotting page <visualization.other>` for much more.
diff --git a/pandas/core/series.py b/pandas/core/series.py
index a711f6902..e4c69d5cd 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1441,7 +1441,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         Always returns Series even if only one value is returned.
 
         Parameters
-        -------
+        ----------
         dropna : boolean, default True
             Don't consider counts of NaN/NaT.
 
