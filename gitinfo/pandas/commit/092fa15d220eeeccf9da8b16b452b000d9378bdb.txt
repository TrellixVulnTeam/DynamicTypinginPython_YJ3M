commit 092fa15d220eeeccf9da8b16b452b000d9378bdb
Author: Chang She <chang@lambdafoundry.com>
Date:   Mon Jun 4 15:18:44 2012 -0400

    ENH: passing kwds to rolling func

diff --git a/pandas/src/moments.pyx b/pandas/src/moments.pyx
index 8fad3017e..00855f7f7 100644
--- a/pandas/src/moments.pyx
+++ b/pandas/src/moments.pyx
@@ -315,7 +315,7 @@ def _check_minp(minp, N):
         raise ValueError('min_periods must be >= 0')
     return minp
 
-def roll_var(ndarray[double_t] input, int win, int minp):
+def roll_var(ndarray[double_t] input, int win, int minp, int ddof=1):
     cdef double val, prev, sum_x = 0, sum_xx = 0, nobs = 0
     cdef Py_ssize_t i
     cdef Py_ssize_t N = len(input)
@@ -351,7 +351,7 @@ def roll_var(ndarray[double_t] input, int win, int minp):
             sum_xx += val * val
 
         if nobs >= minp:
-            output[i] = (nobs * sum_xx - sum_x * sum_x) / (nobs * nobs - nobs)
+            output[i] = (nobs * sum_xx - sum_x * sum_x) / (nobs * (nobs - ddof))
         else:
             output[i] = NaN
 
diff --git a/pandas/stats/moments.py b/pandas/stats/moments.py
index a4036bfaf..a638fe017 100644
--- a/pandas/stats/moments.py
+++ b/pandas/stats/moments.py
@@ -198,7 +198,7 @@ def rolling_corr_pairwise(df, window, min_periods=None):
     return Panel.from_dict(all_results).swapaxes('items', 'major')
 
 def _rolling_moment(arg, window, func, minp, axis=0, freq=None,
-                    time_rule=None):
+                    time_rule=None, **kwargs):
     """
     Rolling statistical measure using supplied function. Designed to be
     used with passed-in Cython array-based functions.
@@ -219,7 +219,7 @@ def _rolling_moment(arg, window, func, minp, axis=0, freq=None,
     y : type of input
     """
     arg = _conv_timerule(arg, freq, time_rule)
-    calc = lambda x: func(x, window, minp=minp)
+    calc = lambda x: func(x, window, minp=minp, **kwargs)
     return_hook, values = _process_data_structure(arg)
     # actually calculate the moment. Faster way to do this?
     result = np.apply_along_axis(calc, axis, values)
@@ -386,12 +386,12 @@ def _rolling_func(func, desc, check_minp=_use_window):
     @Substitution(desc, _unary_arg, _type_of_input)
     @Appender(_doc_template)
     @wraps(func)
-    def f(arg, window, min_periods=None, freq=None, time_rule=None):
-        def call_cython(arg, window, minp):
+    def f(arg, window, min_periods=None, freq=None, time_rule=None, **kwargs):
+        def call_cython(arg, window, minp, **kwds):
             minp = check_minp(minp, window)
-            return func(arg, window, minp)
+            return func(arg, window, minp, **kwds)
         return _rolling_moment(arg, window, call_cython, min_periods,
-                               freq=freq, time_rule=time_rule)
+                               freq=freq, time_rule=time_rule, **kwargs)
 
     return f
 
diff --git a/pandas/stats/tests/test_moments.py b/pandas/stats/tests/test_moments.py
index 5696ee2c6..9c44047e7 100644
--- a/pandas/stats/tests/test_moments.py
+++ b/pandas/stats/tests/test_moments.py
@@ -1,6 +1,7 @@
 import unittest
 import nose
 import sys
+import functools
 
 from datetime import datetime
 from numpy.random import randn
@@ -82,10 +83,14 @@ class TestMoments(unittest.TestCase):
     def test_rolling_std(self):
         self._check_moment_func(mom.rolling_std,
                                 lambda x: np.std(x, ddof=1))
+        self._check_moment_func(functools.partial(mom.rolling_std, ddof=0),
+                                lambda x: np.std(x, ddof=0))
 
     def test_rolling_var(self):
         self._check_moment_func(mom.rolling_var,
                                 lambda x: np.var(x, ddof=1))
+        self._check_moment_func(functools.partial(mom.rolling_var, ddof=0),
+                                lambda x: np.var(x, ddof=0))
 
     def test_rolling_skew(self):
         try:
