commit a2a5cec32ab63fe18b5840eb8a7712e9bf99c319
Author: Jonas Abernot <jonas.abernot@free.fr>
Date:   Tue Mar 17 14:38:06 2015 +0100

    BUG: bug in proper serialization of TimedeltaIndex in fixed HDFStores (GH9635)

diff --git a/doc/source/whatsnew/v0.16.1.txt b/doc/source/whatsnew/v0.16.1.txt
index ef65a6283..5e75d9ed0 100644
--- a/doc/source/whatsnew/v0.16.1.txt
+++ b/doc/source/whatsnew/v0.16.1.txt
@@ -73,7 +73,7 @@ Bug Fixes
 
 
 - Bug in ``DataFrame`` slicing may not retain metadata (:issue:`9776`)
-
+- Bug where ``TimdeltaIndex`` were not properly serialized in fixed ``HDFStore`` (:issue:`9635`)
 
 
 
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 4dc777b71..458a245da 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -18,6 +18,7 @@ from pandas import (Series, TimeSeries, DataFrame, Panel, Panel4D, Index,
 from pandas.sparse.api import SparseSeries, SparseDataFrame, SparsePanel
 from pandas.sparse.array import BlockIndex, IntIndex
 from pandas.tseries.api import PeriodIndex, DatetimeIndex
+from pandas.tseries.tdi import TimedeltaIndex
 from pandas.core.base import StringMixin
 from pandas.core.common import adjoin, pprint_thing
 from pandas.core.algorithms import match, unique
@@ -4234,6 +4235,11 @@ def _convert_index(index, encoding=None, format_type=None):
                         freq=getattr(index, 'freq', None),
                         tz=getattr(index, 'tz', None),
                         index_name=index_name)
+    elif isinstance(index, TimedeltaIndex):
+        converted = index.asi8
+        return IndexCol(converted, 'timedelta64', _tables().Int64Col(),
+                        freq=getattr(index, 'freq', None),
+                        index_name=index_name)
     elif isinstance(index, (Int64Index, PeriodIndex)):
         atom = _tables().Int64Col()
         return IndexCol(
@@ -4253,6 +4259,11 @@ def _convert_index(index, encoding=None, format_type=None):
                         freq=getattr(index, 'freq', None),
                         tz=getattr(index, 'tz', None),
                         index_name=index_name)
+    elif inferred_type == 'timedelta64':
+        converted = values.view('i8')
+        return IndexCol(converted, 'timedelta64', _tables().Int64Col(),
+                        freq=getattr(index, 'freq', None),
+                        index_name=index_name)
     elif inferred_type == 'datetime':
         converted = np.asarray([(time.mktime(v.timetuple()) +
                                  v.microsecond / 1E6) for v in values],
@@ -4303,6 +4314,8 @@ def _unconvert_index(data, kind, encoding=None):
     kind = _ensure_decoded(kind)
     if kind == u('datetime64'):
         index = DatetimeIndex(data)
+    elif kind == u('timedelta64'):
+        index = TimedeltaIndex(data)
     elif kind == u('datetime'):
         index = np.asarray([datetime.fromtimestamp(v) for v in data],
                            dtype=object)
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index a15149e34..acdc991c9 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -11,7 +11,7 @@ import numpy as np
 import pandas
 import pandas as pd
 from pandas import (Series, DataFrame, Panel, MultiIndex, Categorical, bdate_range,
-                    date_range, Index, DatetimeIndex, isnull)
+                    date_range, timedelta_range, Index, DatetimeIndex, TimedeltaIndex, isnull)
 
 from pandas.io.pytables import _tables
 try:
@@ -4588,6 +4588,18 @@ class TestHDFStore(tm.TestCase):
             other = read_hdf(path, 'df')
             tm.assert_frame_equal(df, other)
 
+    def test_preserve_timedeltaindex_type(self):
+        # GH9635 
+        # Storing TimedeltaIndexed DataFrames in fixed stores did not preserve
+        # the type of the index.
+        df = DataFrame(np.random.normal(size=(10,5)))
+        df.index = timedelta_range(start='0s',periods=10,freq='1s',name='example')
+
+        with ensure_clean_store(self.path) as store:
+            
+            store['df'] = df
+            assert_frame_equal(store['df'], df)
+
 
 def _test_sort(obj):
     if isinstance(obj, DataFrame):
