commit f61ad438172f9399a0c1ce2be90c04b60731ff2b
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon May 31 01:01:13 2010 +0000

    DataMatrix._resultFrame optimization (removed fancy indexing)
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@184 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 986eb0c8b..f0ea1160c 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1200,6 +1200,9 @@ class DataFrame(Picklable, Groupable):
             newIndex = self.index[idx.astype(int)]
             return self.reindex(newIndex)
 
+    def sort(self, column=None, ascending=True):
+        pass
+
     def combine(self, other, func, fill_value=None):
         """
         Add two DataFrame / DataMatrix objects and do not propagate NaN values,
@@ -1324,21 +1327,16 @@ class DataFrame(Picklable, Groupable):
         on : string, default None
             Column name to use, otherwise join on index
         how : {'left', 'right', 'outer', 'inner'}
-            default: 'left' for joining on index, None otherwise
-            How to handle indexes of the two objects.
-              * left: use calling frame's index
-              * right: use input frame's index
-              * outer: form union of indexes
-              * inner: use intersection of indexes
+            How to handle indexes of the two objects. Default: 'left'
+            for joining on index, None otherwise
+            * left: use calling frame's index
+            * right: use input frame's index
+            * outer: form union of indexes
+            * inner: use intersection of indexes
 
-        Examples
-        --------
-        This frame         Other frame
-            c1                 q1
-        a   1              0   v1
-        b   0              1   v2
-        c   1
-        d   0
+        Returns
+        -------
+        joined : DataFrame
         """
         if on is not None:
             if how is not None:
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index 7649fbc55..e846e09b2 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -351,14 +351,13 @@ class DataMatrix(DataFrame):
 
         Could probably deal with some Cython action in here at some point
         """
+        need_reindex = False
+
         if self.index.equals(other.index):
             newIndex = self.index
-            myReindex = self
-            hisReindex = other
         else:
             newIndex = self.index.union(other.index)
-            myReindex = self.reindex(newIndex)
-            hisReindex = other.reindex(newIndex)
+            need_reindex = True
 
         if not self and not other:
             return DataMatrix(index=newIndex)
@@ -367,37 +366,26 @@ class DataMatrix(DataFrame):
         elif not other:
             return self * NaN
 
-        myValues = myReindex.values
-        safe = self.columns.equals(other.columns)
-
-        if safe:
-            newCols = self.columns
-            commonCols = self.columns
+        if self.columns.equals(other.columns):
+            newColumns = self.columns
         else:
-            newCols = self.columns.union(other.columns)
-            commonCols = self.columns.intersection(other.columns)
-
-        hisValues = hisReindex.values
-        hisCols = hisReindex.columns
-
-        if safe:
-            resultMatrix = func(myValues, hisValues)
+            newColumns = self.columns.union(other.columns)
+            need_reindex = True or need_reindex
+
+        if need_reindex:
+            myReindex = self.reindex(index=newIndex,
+                                     columns=newColumns)
+            hisReindex = other.reindex(index=newIndex,
+                                       columns=newColumns)
         else:
-            T, N = len(newIndex), len(newCols)
-            resultMatrix = np.empty((T, N), dtype=self.values.dtype)
-            resultMatrix.fill(NaN)
-
-            myIndexer = [self.columns.indexMap[idx] for idx in commonCols]
-            hisIndexer =  [hisCols.indexMap[idx] for idx in commonCols]
-            resultIndexer = [newCols.indexMap[idx] for idx in commonCols]
-
-            left = myValues.take(myIndexer, axis=1)
-            right = hisValues.take(hisIndexer, axis=1)
+            myReindex = self
+            hisReindex = other
 
-            resultMatrix[:, resultIndexer] = func(left, right)
+        myValues = myReindex.values
+        hisValues = hisReindex.values
 
-        # TODO: deal with objects
-        return DataMatrix(resultMatrix, index=newIndex, columns=newCols)
+        return DataMatrix(func(myValues, hisValues),
+                          index=newIndex, columns=newColumns)
 
     def _combineSeries(self, other, func):
         newIndex = self.index
