commit bce5434a4b437488ed88f3209e2147395897d2d9
Author: Adam Klein <adamklein@gmail.com>
Date:   Wed Feb 29 17:10:27 2012 -0500

    ENH: attach offset to converted timeseries, fix camel case issues

diff --git a/pandas/core/datetools.py b/pandas/core/datetools.py
index bb668131c..9766b5ed2 100644
--- a/pandas/core/datetools.py
+++ b/pandas/core/datetools.py
@@ -1153,13 +1153,13 @@ def inferTimeRule(index, _deprecated=True):
 
 opattern = re.compile(r'(\d*)\s*(\S+)')
 
-def toOffset(name):
+def to_offset(name):
     """
     Return DateOffset object from string representation
 
     Example
     -------
-    getOffset('5Min') -> Minute(5)
+    to_offset('5Min') -> Minute(5)
     """
     groups = opattern.match(name)
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 8813aee62..baf36f5cd 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2870,7 +2870,11 @@ class DataFrame(NDFrame):
 
         offset = kwds.get('timeRule', offset)
         if isinstance(offset, basestring):
-            offset = datetools.getOffset(offset)
+            # deprecated code path
+            if isinstance(self.index, DateRange):
+                offset = datetools.getOffset(offset)
+            else:
+                offset = datetools.to_offset(offset)
 
         def _shift_block(blk, indexer):
             new_values = blk.values.take(indexer, axis=1)
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 95200452d..86bf86ea7 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -145,10 +145,10 @@ class PandasObject(Picklable):
         axis : int, optional, default 0
         as_index : see synonymous argument of groupby
         """
-        from pandas.core.groupby import Tinterval, translateGrouping
+        from pandas.core.groupby import Tinterval, translate_grouping
 
         if isinstance(rule, basestring):
-            rule = datetools.toOffset(rule)
+            rule = datetools.to_offset(rule)
 
         idx = self._get_axis(axis)
         if not isinstance(idx, DatetimeIndex):
@@ -170,7 +170,7 @@ class PandasObject(Picklable):
             grouped  = self.groupby(interval, axis=axis, as_index=as_index)
 
             if isinstance(how, basestring):
-                how = translateGrouping(how)
+                how = translate_grouping(how)
 
             result = grouped.agg(how)
         else:
@@ -178,6 +178,7 @@ class PandasObject(Picklable):
             result = self.reindex(interval.binner[1:-1].view('M8[us]'),
                                   method=method)
 
+        result.index.offset = rule
         return result
 
 
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index feeded769..ab38284d4 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -742,7 +742,7 @@ class Tinterval(Grouper, CustomGrouper):
 
     Notes
     -----
-    Use begin, end, nperiods to generate intervals that cannot be derived 
+    Use begin, end, nperiods to generate intervals that cannot be derived
     directly from the associated object
     """
 
@@ -1773,7 +1773,7 @@ def numpy_groupby(data, labels, axis=0):
 #-----------------------------------------------------------------------
 # Helper functions
 
-def translateGrouping(how):
+def translate_grouping(how):
     if set(how) == set('ohlc'):
         return {'open'  : lambda arr: arr[0],
                 'low'   : lambda arr: arr.min(),
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 9f849a6f2..331f9f30b 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -2257,7 +2257,11 @@ copy : boolean, default False
 
         offset = kwds.get('timeRule', offset)
         if isinstance(offset, basestring):
-            offset = datetools.getOffset(offset)
+            # deprecated code path
+            if isinstance(self.index, DateRange):
+                offset = datetools.getOffset(offset)
+            else:
+                offset = datetools.to_offset(offset)
 
         if offset is None:
             new_values = np.empty(len(self), dtype=self.dtype)
diff --git a/pandas/tests/test_datetime64.py b/pandas/tests/test_datetime64.py
index 55119e763..4204bc629 100644
--- a/pandas/tests/test_datetime64.py
+++ b/pandas/tests/test_datetime64.py
@@ -433,6 +433,14 @@ class TestDatetime64(unittest.TestCase):
         self.assertEquals(xs['low'], s[1:6].min())
         self.assertEquals(xs['close'], s[5])
 
+    def test_convert_reconvert(self):
+        dti = DatetimeIndex(start=datetime(2005,1,1), 
+                            end=datetime(2005,1,10), offset='D')
+        s = Series(rand(len(dti)), dti)
+        s = s.convert('B').convert('8H')
+        self.assertEquals(len(s), 22)
+
+
 if __name__ == '__main__':
     import nose
     nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
