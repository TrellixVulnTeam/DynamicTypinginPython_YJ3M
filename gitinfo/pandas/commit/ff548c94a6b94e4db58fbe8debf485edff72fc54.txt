commit ff548c94a6b94e4db58fbe8debf485edff72fc54
Author: Roy Hyunjin Han <rhh@crosscompute.com>
Date:   Wed Apr 1 22:57:25 2015 -0400

    Add missing keys and tests

diff --git a/pandas/io/packers.py b/pandas/io/packers.py
index 04321296d..75ca44fd1 100644
--- a/pandas/io/packers.py
+++ b/pandas/io/packers.py
@@ -234,6 +234,8 @@ def unconvert(values, dtype, compress=None):
     if dtype == np.object_:
         return np.array(values, dtype=object)
 
+    values = values.encode('latin1')
+
     if compress == 'zlib':
         import zlib
         values = zlib.decompress(values)
@@ -245,7 +247,7 @@ def unconvert(values, dtype, compress=None):
         return np.frombuffer(values, dtype=dtype)
 
     # from a string
-    return np.fromstring(values.encode('latin1'), dtype=dtype)
+    return np.fromstring(values, dtype=dtype)
 
 
 def encode(obj):
@@ -261,7 +263,8 @@ def encode(obj):
                     'name': getattr(obj, 'name', None),
                     'freq': getattr(obj, 'freqstr', None),
                     'dtype': obj.dtype.num,
-                    'data': convert(obj.asi8)}
+                    'data': convert(obj.asi8),
+                    'compress': compressor}
         elif isinstance(obj, DatetimeIndex):
             tz = getattr(obj, 'tz', None)
 
@@ -275,19 +278,22 @@ def encode(obj):
                     'dtype': obj.dtype.num,
                     'data': convert(obj.asi8),
                     'freq': getattr(obj, 'freqstr', None),
-                    'tz': tz}
+                    'tz': tz,
+                    'compress': compressor}
         elif isinstance(obj, MultiIndex):
             return {'typ': 'multi_index',
                     'klass': obj.__class__.__name__,
                     'names': getattr(obj, 'names', None),
                     'dtype': obj.dtype.num,
-                    'data': convert(obj.values)}
+                    'data': convert(obj.values),
+                    'compress': compressor}
         else:
             return {'typ': 'index',
                     'klass': obj.__class__.__name__,
                     'name': getattr(obj, 'name', None),
                     'dtype': obj.dtype.num,
-                    'data': convert(obj.values)}
+                    'data': convert(obj.values),
+                    'compress': compressor}
     elif isinstance(obj, Series):
         if isinstance(obj, SparseSeries):
             raise NotImplementedError(
diff --git a/pandas/io/tests/test_packers.py b/pandas/io/tests/test_packers.py
index 9633f567a..992de2b67 100644
--- a/pandas/io/tests/test_packers.py
+++ b/pandas/io/tests/test_packers.py
@@ -446,6 +446,37 @@ class TestSparse(TestPackers):
                               check_panel_type=True)
 
 
+class TestCompression(TestPackers):
+
+    def setUp(self):
+        super(TestCompression, self).setUp()
+        data = {
+            'A': np.arange(1000, dtype=float),
+            'B': range(1000),
+            'C': list(100 * 'abcdefghij'),
+        }
+        self.frame = {
+            'float': DataFrame(dict([(k, data[k]) for k in ['A', 'A']])),
+            'int': DataFrame(dict([(k, data[k]) for k in ['B', 'B']])),
+            'mixed': DataFrame(dict([(k, data[k]) for k in ['A', 'B', 'C']])),
+        }
+
+    def test_plain(self):
+        i_rec = self.encode_decode(self.frame, compress='zlib')
+        for k in self.frame.keys():
+            assert_frame_equal(self.frame[k], i_rec[k])
+
+    def test_compression_zlib(self):
+        i_rec = self.encode_decode(self.frame, compress='zlib')
+        for k in self.frame.keys():
+            assert_frame_equal(self.frame[k], i_rec[k])
+
+    def test_compression_blosc(self):
+        i_rec = self.encode_decode(self.frame, compress='blosc')
+        for k in self.frame.keys():
+            assert_frame_equal(self.frame[k], i_rec[k])
+
+
 if __name__ == '__main__':
     import nose
     nose.runmodule(argv=[__file__, '-vvs', '-x', '--pdb', '--pdb-failure'],
