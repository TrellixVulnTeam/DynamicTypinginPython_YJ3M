commit 736761f8fd7fef641fdd0aa4a6e8d9163126e929
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Thu Feb 27 08:10:59 2020 -0800

    TST: misplaced arithmetic tests (#32275)

diff --git a/pandas/tests/frame/test_arithmetic.py b/pandas/tests/frame/test_arithmetic.py
index 44ad55517..e4be8a979 100644
--- a/pandas/tests/frame/test_arithmetic.py
+++ b/pandas/tests/frame/test_arithmetic.py
@@ -4,6 +4,7 @@ import operator
 
 import numpy as np
 import pytest
+import pytz
 
 import pandas as pd
 import pandas._testing as tm
@@ -771,3 +772,35 @@ def test_frame_single_columns_object_sum_axis_1():
     result = df.sum(axis=1)
     expected = pd.Series(["A", 1.2, 0])
     tm.assert_series_equal(result, expected)
+
+
+# -------------------------------------------------------------------
+# Unsorted
+#  These arithmetic tests were previously in other files, eventually
+#  should be parametrized and put into tests.arithmetic
+
+
+class TestFrameArithmeticUnsorted:
+    def test_frame_add_tz_mismatch_converts_to_utc(self):
+        rng = pd.date_range("1/1/2011", periods=10, freq="H", tz="US/Eastern")
+        df = pd.DataFrame(np.random.randn(len(rng)), index=rng, columns=["a"])
+
+        df_moscow = df.tz_convert("Europe/Moscow")
+        result = df + df_moscow
+        assert result.index.tz is pytz.utc
+
+        result = df_moscow + df
+        assert result.index.tz is pytz.utc
+
+    def test_align_frame(self):
+        rng = pd.period_range("1/1/2000", "1/1/2010", freq="A")
+        ts = pd.DataFrame(np.random.randn(len(rng), 3), index=rng)
+
+        result = ts + ts[::2]
+        expected = ts + ts
+        expected.values[1::2] = np.nan
+        tm.assert_frame_equal(result, expected)
+
+        half = ts[::2]
+        result = ts + half.take(np.random.permutation(len(half)))
+        tm.assert_frame_equal(result, expected)
diff --git a/pandas/tests/frame/test_period.py b/pandas/tests/frame/test_period.py
index 1ce13fd31..c378194b9 100644
--- a/pandas/tests/frame/test_period.py
+++ b/pandas/tests/frame/test_period.py
@@ -4,10 +4,6 @@ from pandas import DataFrame, Index, PeriodIndex, period_range
 import pandas._testing as tm
 
 
-def _permute(obj):
-    return obj.take(np.random.permutation(len(obj)))
-
-
 class TestPeriodIndex:
     def test_as_frame_columns(self):
         rng = period_range("1/1/2000", periods=5)
@@ -42,15 +38,3 @@ class TestPeriodIndex:
 
         # it works!
         frame.to_string()
-
-    def test_align_frame(self):
-        rng = period_range("1/1/2000", "1/1/2010", freq="A")
-        ts = DataFrame(np.random.randn(len(rng), 3), index=rng)
-
-        result = ts + ts[::2]
-        expected = ts + ts
-        expected.values[1::2] = np.nan
-        tm.assert_frame_equal(result, expected)
-
-        result = ts + _permute(ts[::2])
-        tm.assert_frame_equal(result, expected)
diff --git a/pandas/tests/frame/test_timezones.py b/pandas/tests/frame/test_timezones.py
index 62e8a4b47..00a253d4e 100644
--- a/pandas/tests/frame/test_timezones.py
+++ b/pandas/tests/frame/test_timezones.py
@@ -80,17 +80,6 @@ class TestDataFrameTimezones:
         tm.assert_index_equal(result.index, ex_index)
         assert result.index.tz.zone == "US/Central"
 
-    def test_frame_add_tz_mismatch_converts_to_utc(self):
-        rng = date_range("1/1/2011", periods=10, freq="H", tz="US/Eastern")
-        df = DataFrame(np.random.randn(len(rng)), index=rng, columns=["a"])
-
-        df_moscow = df.tz_convert("Europe/Moscow")
-        result = df + df_moscow
-        assert result.index.tz is pytz.utc
-
-        result = df_moscow + df
-        assert result.index.tz is pytz.utc
-
     def test_frame_align_aware(self):
         idx1 = date_range("2001", periods=5, freq="H", tz="US/Eastern")
         idx2 = date_range("2001", periods=5, freq="2H", tz="US/Eastern")
diff --git a/pandas/tests/series/test_arithmetic.py b/pandas/tests/series/test_arithmetic.py
index f3ffdc373..10197766c 100644
--- a/pandas/tests/series/test_arithmetic.py
+++ b/pandas/tests/series/test_arithmetic.py
@@ -2,11 +2,12 @@ import operator
 
 import numpy as np
 import pytest
+import pytz
 
 from pandas._libs.tslibs import IncompatibleFrequency
 
 import pandas as pd
-from pandas import Series
+from pandas import Series, date_range
 import pandas._testing as tm
 
 
@@ -203,3 +204,67 @@ class TestSeriesComparison:
             ser = Series(cidx).rename(names[1])
             result = op(ser, cidx)
             assert result.name == names[2]
+
+
+# ------------------------------------------------------------------
+# Unsorted
+#  These arithmetic tests were previously in other files, eventually
+#  should be parametrized and put into tests.arithmetic
+
+
+class TestTimeSeriesArithmetic:
+    # TODO: De-duplicate with test below
+    def test_series_add_tz_mismatch_converts_to_utc_duplicate(self):
+        rng = date_range("1/1/2011", periods=10, freq="H", tz="US/Eastern")
+        ser = Series(np.random.randn(len(rng)), index=rng)
+
+        ts_moscow = ser.tz_convert("Europe/Moscow")
+
+        result = ser + ts_moscow
+        assert result.index.tz is pytz.utc
+
+        result = ts_moscow + ser
+        assert result.index.tz is pytz.utc
+
+    def test_series_add_tz_mismatch_converts_to_utc(self):
+        rng = date_range("1/1/2011", periods=100, freq="H", tz="utc")
+
+        perm = np.random.permutation(100)[:90]
+        ser1 = Series(
+            np.random.randn(90), index=rng.take(perm).tz_convert("US/Eastern")
+        )
+
+        perm = np.random.permutation(100)[:90]
+        ser2 = Series(
+            np.random.randn(90), index=rng.take(perm).tz_convert("Europe/Berlin")
+        )
+
+        result = ser1 + ser2
+
+        uts1 = ser1.tz_convert("utc")
+        uts2 = ser2.tz_convert("utc")
+        expected = uts1 + uts2
+
+        assert result.index.tz == pytz.UTC
+        tm.assert_series_equal(result, expected)
+
+    def test_series_add_aware_naive_raises(self):
+        rng = date_range("1/1/2011", periods=10, freq="H")
+        ser = Series(np.random.randn(len(rng)), index=rng)
+
+        ser_utc = ser.tz_localize("utc")
+
+        with pytest.raises(Exception):
+            ser + ser_utc
+
+        with pytest.raises(Exception):
+            ser_utc + ser
+
+    def test_datetime_understood(self):
+        # Ensures it doesn't fail to create the right series
+        # reported in issue#16726
+        series = pd.Series(pd.date_range("2012-01-01", periods=3))
+        offset = pd.offsets.DateOffset(days=6)
+        result = series - offset
+        expected = pd.Series(pd.to_datetime(["2011-12-26", "2011-12-27", "2011-12-28"]))
+        tm.assert_series_equal(result, expected)
diff --git a/pandas/tests/series/test_datetime_values.py b/pandas/tests/series/test_datetime_values.py
index 59ae0cd63..d22dc72ea 100644
--- a/pandas/tests/series/test_datetime_values.py
+++ b/pandas/tests/series/test_datetime_values.py
@@ -632,15 +632,6 @@ class TestSeriesDatetimeValues:
         tm.assert_series_equal(s.dt.date, expected)
         tm.assert_series_equal(s.apply(lambda x: x.date()), expected)
 
-    def test_datetime_understood(self):
-        # Ensures it doesn't fail to create the right series
-        # reported in issue#16726
-        series = pd.Series(pd.date_range("2012-01-01", periods=3))
-        offset = pd.offsets.DateOffset(days=6)
-        result = series - offset
-        expected = pd.Series(pd.to_datetime(["2011-12-26", "2011-12-27", "2011-12-28"]))
-        tm.assert_series_equal(result, expected)
-
     def test_dt_timetz_accessor(self, tz_naive_fixture):
         # GH21358
         tz = maybe_get_tz(tz_naive_fixture)
diff --git a/pandas/tests/series/test_timezones.py b/pandas/tests/series/test_timezones.py
index e729ff912..a45c0bf8c 100644
--- a/pandas/tests/series/test_timezones.py
+++ b/pandas/tests/series/test_timezones.py
@@ -38,53 +38,6 @@ class TestSeriesTimezones:
         result = ser["1/3/2000"]
         tm.assert_almost_equal(result, ser[2])
 
-    # TODO: De-duplicate with test below
-    def test_series_add_tz_mismatch_converts_to_utc_duplicate(self):
-        rng = date_range("1/1/2011", periods=10, freq="H", tz="US/Eastern")
-        ser = Series(np.random.randn(len(rng)), index=rng)
-
-        ts_moscow = ser.tz_convert("Europe/Moscow")
-
-        result = ser + ts_moscow
-        assert result.index.tz is pytz.utc
-
-        result = ts_moscow + ser
-        assert result.index.tz is pytz.utc
-
-    def test_series_add_tz_mismatch_converts_to_utc(self):
-        rng = date_range("1/1/2011", periods=100, freq="H", tz="utc")
-
-        perm = np.random.permutation(100)[:90]
-        ser1 = Series(
-            np.random.randn(90), index=rng.take(perm).tz_convert("US/Eastern")
-        )
-
-        perm = np.random.permutation(100)[:90]
-        ser2 = Series(
-            np.random.randn(90), index=rng.take(perm).tz_convert("Europe/Berlin")
-        )
-
-        result = ser1 + ser2
-
-        uts1 = ser1.tz_convert("utc")
-        uts2 = ser2.tz_convert("utc")
-        expected = uts1 + uts2
-
-        assert result.index.tz == pytz.UTC
-        tm.assert_series_equal(result, expected)
-
-    def test_series_add_aware_naive_raises(self):
-        rng = date_range("1/1/2011", periods=10, freq="H")
-        ser = Series(np.random.randn(len(rng)), index=rng)
-
-        ser_utc = ser.tz_localize("utc")
-
-        with pytest.raises(Exception):
-            ser + ser_utc
-
-        with pytest.raises(Exception):
-            ser_utc + ser
-
     def test_series_align_aware(self):
         idx1 = date_range("2001", periods=5, freq="H", tz="US/Eastern")
         ser = Series(np.random.randn(len(idx1)), index=idx1)
