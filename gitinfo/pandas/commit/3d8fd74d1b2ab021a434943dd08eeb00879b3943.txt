commit 3d8fd74d1b2ab021a434943dd08eeb00879b3943
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Jul 8 17:23:08 2011 -0400

    test coverage

diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 112e51fb6..eccd76f52 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -16,6 +16,8 @@ class Block(object):
 
     Index-ignorant; let the container take care of that
     """
+    __slots__ = ['items', 'ref_items', '_ref_locs', 'values', 'ndim']
+
     def __init__(self, values, items, ref_items, ndim=2):
         if issubclass(values.dtype.type, basestring):
             values = np.array(values, dtype=object)
@@ -216,6 +218,8 @@ class BlockManager(object):
     -----
     This is *not* a public API class
     """
+    __slots__ = ['axes', 'blocks', 'ndim']
+
     def __init__(self, blocks, axes, skip_integrity_check=False):
         self.axes = [_ensure_index(ax) for ax in axes]
         self.blocks = blocks
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 0b598e100..675566d8b 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -731,9 +731,7 @@ class WidePanel(Panel, PandasGeneric):
         result : DataFrame or WidePanel
         """
         i = self._get_axis_number(axis)
-
         result = np.apply_along_axis(func, i, self.values)
-
         return self._wrap_result(result, axis=axis)
 
     def _values_aggregate(self, func, axis, fill_value):
@@ -1040,9 +1038,7 @@ class LongPanel(Panel, Picklable):
     def __init__(self, values, items, index, factors=None):
         self.items = items
         self.index = index
-
         self.values = values
-
         self.factors = factors or {}
 
     def __len__(self):
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 2d40a82f4..3ba0c3aae 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -357,6 +357,10 @@ class TestWidePanel(unittest.TestCase, PanelTests,
         assert_almost_equal(casted.values, exp_values)
         assert_almost_equal(casted2.values, exp_values)
 
+        # can't cast
+        data = [['foo', 'bar', 'baz']]
+        self.assertRaises(ValueError, DataFrame, data, dtype=float)
+
     def test_consolidate(self):
         self.assert_(self.panel._data.is_consolidated())
 
