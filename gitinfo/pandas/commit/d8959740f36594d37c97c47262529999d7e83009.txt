commit d8959740f36594d37c97c47262529999d7e83009
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Sep 28 17:13:51 2011 -0400

    ENH: shizam! int64 axes with super fast join performance

diff --git a/pandas/core/index.py b/pandas/core/index.py
index 586ce02a6..03a26f1e5 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -604,9 +604,57 @@ class Int64Index(Index):
         return indexer
     get_indexer.__doc__ = Index.get_indexer.__doc__
 
+    def join(self, other, how='left', return_indexers=False):
+        if not isinstance(other, Int64Index):
+            return Index.join(self, other, how=how,
+                              return_indexers=return_indexers)
+
+
+        if self.is_monotonic and other.is_monotonic:
+            return self._join_monotonic(other, how=how,
+                                        return_indexers=return_indexers)
+        else:
+            return Index.join(self, other, how=how,
+                              return_indexers=return_indexers)
+
+        # if return_indexers:
+        #     return join_index, lidx, ridx
+        # else:
+        #     return join_index
+
+    def _join_monotonic(self, other, how='left', return_indexers=False):
+        if how == 'left':
+            join_index = self
+            lidx = np.arange(len(self), dtype=np.int32)
+            ridx = lib.left_join_indexer(self, other)
+        elif how == 'right':
+            join_index = other
+            ridx = np.arange(len(other), dtype=np.int32)
+            lidx = lib.left_join_indexer(other, self)
+        elif how == 'inner':
+            join_index, lidx, ridx = lib.inner_join_indexer(self, other)
+            join_index = Int64Index(join_index)
+        elif how == 'outer':
+            join_index, lidx, ridx = lib.outer_join_indexer(self, other)
+            join_index = Int64Index(join_index)
+        else:
+            raise Exception('do not recognize join method %s' % how)
+
+        if return_indexers:
+            return join_index, lidx, ridx
+        else:
+            return join_index
+
     def groupby(self, to_groupby):
         return lib.groupby(self.values.astype(object), to_groupby)
 
+    def take(self, *args, **kwargs):
+        """
+        Analogous to ndarray.take
+        """
+        taken = self.values.take(*args, **kwargs)
+        return Int64Index(taken)
+
 class DateIndex(Index):
     pass
 
diff --git a/pandas/src/reindex.pyx b/pandas/src/reindex.pyx
index e1d7f550c..270b194a8 100644
--- a/pandas/src/reindex.pyx
+++ b/pandas/src/reindex.pyx
@@ -117,38 +117,6 @@ def ordered_left_join(ndarray[object] left, ndarray[object] right):
 
     return indexer, mask
 
-@cython.wraparound(False)
-@cython.boundscheck(False)
-def ordered_left_join_int64(ndarray[int64_t] left, ndarray[int64_t] right):
-    cdef:
-        Py_ssize_t i, j, k, n
-        ndarray[int32_t] indexer
-        ndarray[uint8_t, cast=True] mask
-        int64_t val
-
-    i = 0
-    j = 0
-    n = len(left)
-    k = len(right)
-
-    indexer = np.zeros(n, dtype=np.int32)
-    mask = np.ones(n, dtype=np.bool)
-
-    for i from 0 <= i < n:
-        val = left[i]
-
-        while j < k and right[j] < val:
-            j += 1
-
-        if j == k:
-            break
-
-        if val == right[j]:
-            indexer[i] = j
-            mask[i] = 0
-
-    return indexer, mask
-
 @cython.wraparound(False)
 @cython.boundscheck(False)
 def left_join_2d(ndarray[int64_t] left, ndarray[int64_t] right,
@@ -215,6 +183,36 @@ def left_join_1d(ndarray[int64_t] left, ndarray[int64_t] right,
         else:
             out[i, 1] = NaN
 
+
+@cython.wraparound(False)
+@cython.boundscheck(False)
+def left_join_indexer(ndarray[int64_t] left, ndarray[int64_t] right):
+    cdef:
+        Py_ssize_t i, j, k, n
+        ndarray[int32_t] indexer
+        int64_t val
+
+    i = 0
+    j = 0
+    n = len(left)
+    k = len(right)
+
+    indexer = np.zeros(n, dtype=np.int32)
+    for i from 0 <= i < n:
+        val = left[i]
+
+        while j < k and right[j] < val:
+            j += 1
+
+        if j == k:
+            break
+
+        if val == right[j]:
+            indexer[i] = j
+
+    return indexer
+
+
 @cython.wraparound(False)
 @cython.boundscheck(False)
 def inner_join_indexer(ndarray[int64_t] left, ndarray[int64_t] right):
@@ -288,8 +286,6 @@ def inner_join_indexer(ndarray[int64_t] left, ndarray[int64_t] right):
 
     return result, lindexer, rindexer
 
-def _inner_join_count(ndarray[int64_t] left, ndarray[int64_t] right):
-    pass
 
 @cython.wraparound(False)
 @cython.boundscheck(False)
