commit 9d65e8e77b675ce4774b6f394acd8f74bd40af78
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jan 9 21:13:57 2012 -0500

    ENH: improve performance of DataFrame/Series contructors from nested dict, GH #540

diff --git a/RELEASE.rst b/RELEASE.rst
index ba1b7d0ba..1af03216f 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -109,7 +109,9 @@ pandas 0.7.0
   - Prettier printing of floats, and column spacing fix (GH #395, GH #571)
   - Add ``bold_rows`` option to DataFrame.to_html (GH #586)
   - Improve the performance of ``DataFrame.sort_index`` by up to 5x or more
-    when sorting by multiple columns (GH #555)
+    when sorting by multiple columns
+  - Substantially improve performance of DataFrame and Series constructors when
+    passed a nested dict or dict, respectively (GH #540)
 
 **Bug fixes**
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 4cebb5ff0..cbcaa647d 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -3817,7 +3817,7 @@ def _homogenize(data, index, columns, dtype=None):
                 v = v.reindex(index, copy=False)
         else:
             if isinstance(v, dict):
-                v = [v.get(i, nan) for i in index]
+                v = lib.fast_multiget(v, index, default=np.nan)
 
             v = _sanitize_array(v, index, dtype=dtype, copy=False,
                                 raise_cast_failure=False)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index c8a370f0b..d119d8888 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -150,8 +150,13 @@ class Series(np.ndarray, generic.PandasObject):
                 index = data.index
         elif isinstance(data, dict):
             if index is None:
-                index = Index(sorted(data.keys()))
-            data = [data.get(idx, np.nan) for idx in index]
+                index = Index(sorted(data))
+            else:
+                index = _ensure_index(index)
+            try:
+                data = lib.fast_multiget(data, index, default=np.nan)
+            except TypeError:
+                data = [data.get(i, nan) for i in index]
 
         subarr = _sanitize_array(data, index, dtype, copy,
                                  raise_cast_failure=True)
diff --git a/pandas/src/inference.pyx b/pandas/src/inference.pyx
index ea58115b8..d9fa4c2b6 100644
--- a/pandas/src/inference.pyx
+++ b/pandas/src/inference.pyx
@@ -455,3 +455,23 @@ def to_object_array_tuples(list rows):
 
     return result
 
+
+def fast_multiget(dict mapping, ndarray keys, default=np.nan):
+    cdef:
+        Py_ssize_t i, n = len(keys)
+        object val
+        ndarray[object] output = np.empty(n, dtype='O')
+
+    if n == 0:
+        # kludge, for Series
+        return np.empty(0, dtype='f8')
+
+    for i in range(n):
+        val = util.get_value_1d(keys, i)
+        if val in mapping:
+            output[i] = mapping[val]
+        else:
+            output[i] = default
+
+    return maybe_convert_objects(output)
+
diff --git a/pandas/src/sandbox.pyx b/pandas/src/sandbox.pyx
index 49e537f07..76251e15a 100644
--- a/pandas/src/sandbox.pyx
+++ b/pandas/src/sandbox.pyx
@@ -145,10 +145,12 @@ def get_indexer(ndarray values, dict mapping):
             resbuf[i] = -1
     return fill_vec
 
-# cimport util
 
 # def foo2(o):
 #     return util.is_integer_object(o)
 
 # def foo3(o):
 #     return util.get_base_ndarray(o)
+
+
+cimport util
diff --git a/vb_suite/frame_ctor.py b/vb_suite/frame_ctor.py
index a524c64de..309ee3afe 100644
--- a/vb_suite/frame_ctor.py
+++ b/vb_suite/frame_ctor.py
@@ -13,6 +13,7 @@ index = [rands(10) for _ in xrange(N)]
 columns = [rands(10) for _ in xrange(K)]
 frame = DataFrame(np.random.randn(N, K), index=index, columns=columns)
 data = frame.to_dict()
+some_dict = data.values()[0]
 dict_list = [dict(zip(columns, row)) for row in frame.values]
 """
 
@@ -24,3 +25,6 @@ frame_ctor_nested_dict = \
 frame_ctor_list_of_dict = \
     Benchmark("DataFrame(dict_list)", setup, name='frame_ctor_list_of_dict',
               start_date=datetime(2011, 12, 20))
+
+series_ctor_from_dict = \
+    Benchmark("Series(some_dict)", setup, name='series_ctor_from_dict')
