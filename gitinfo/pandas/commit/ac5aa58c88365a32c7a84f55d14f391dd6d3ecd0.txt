commit ac5aa58c88365a32c7a84f55d14f391dd6d3ecd0
Author: Jeff Reback <jeff@reback.net>
Date:   Sat May 9 14:21:42 2015 -0400

    more fixups

diff --git a/doc/source/whatsnew/v0.16.1.txt b/doc/source/whatsnew/v0.16.1.txt
index 50e266aaa..a1e893f71 100755
--- a/doc/source/whatsnew/v0.16.1.txt
+++ b/doc/source/whatsnew/v0.16.1.txt
@@ -282,9 +282,6 @@ Previous Behavior
 
 .. code-block:: python
 
-   In [1]: pd.get_option('max_seq_items')
-   Out[1]: 100
-
    In [2]: pd.Index(range(4),name='foo')
    Out[2]: Int64Index([0, 1, 2, 3], dtype='int64')
 
@@ -307,15 +304,15 @@ New Behavior
 
 .. ipython:: python
 
-   pd.get_option('max_seq_items')
+   pd.set_option('display.width',100)
    pd.Index(range(4),name='foo')
    pd.Index(range(25),name='foo')
    pd.Index(range(104),name='foo')
+   pd.Index(['datetime', 'sA', 'sB', 'sC', 'flow', 'error', 'temp', 'ref', 'a_bit_a_longer_one']*2)
    pd.CategoricalIndex(['a','bb','ccc','dddd'],ordered=True,name='foobar')
    pd.CategoricalIndex(['a','bb','ccc','dddd']*10,ordered=True,name='foobar')
    pd.CategoricalIndex(['a','bb','ccc','dddd']*100,ordered=True,name='foobar')
    pd.CategoricalIndex(np.arange(1000),ordered=True,name='foobar')
-   pd.Index(['a','bb','ccc','dddd']*100)
    pd.date_range('20130101',periods=4,name='foo',tz='US/Eastern')
    pd.date_range('20130101',periods=25,name='foo',tz='US/Eastern')
    pd.date_range('20130101',periods=104,name='foo',tz='US/Eastern')
diff --git a/pandas/core/index.py b/pandas/core/index.py
index a0884ec5d..21f1fed2c 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -437,17 +437,24 @@ class Index(IndexOpsMixin, PandasObject):
         from pandas.core.format import get_console_size
         display_width, _ = get_console_size()
         if display_width is None:
-            display_width = get_option('display.width')
+            display_width = get_option('display.width') or 80
 
         space1 = "\n%s" % (' ' * (len(self.__class__.__name__) + 1))
         space2 = "\n%s" % (' ' * (len(self.__class__.__name__) + 2))
 
+        n = len(self)
         sep = ','
         max_seq_items = get_option('display.max_seq_items')
         formatter = self._formatter_func
-        needs_justify = self.inferred_type in ['string','categorical']
+
+        # do we want to justify (only do so for non-objects)
+        is_justify = not (self.inferred_type == 'string' or self.inferred_type == 'categorical' and is_object_dtype(self.categories))
+
+        # are we a truncated display
+        is_truncated = n > max_seq_items
 
         def _extend_line(s, line, value, display_width, next_line_prefix):
+
             if len(line.rstrip()) + len(value.rstrip()) >= display_width:
                 s += line.rstrip()
                 line = next_line_prefix
@@ -460,7 +467,6 @@ class Index(IndexOpsMixin, PandasObject):
             else:
                 return 0
 
-        n = len(self)
         if n == 0:
             summary = '[], '
         elif n == 1:
@@ -471,26 +477,23 @@ class Index(IndexOpsMixin, PandasObject):
             last = formatter(self[-1])
             summary = '[%s, %s], ' % (first, last)
         else:
+
             if n > max_seq_items:
                 n = min(max_seq_items//2,10)
                 head = [ formatter(x) for x in self[:n] ]
                 tail = [ formatter(x) for x in self[-n:] ]
-                summary_insert = True
             else:
                 head = []
                 tail = [ formatter(x) for x in self ]
-                summary_insert = False
-
-            if needs_justify:
-                justify = False
-            else:
-                justify = True
 
             # adjust all values to max length if needed
-            if justify:
-                max_len = max(best_len(head), best_len(tail))
-                head = [x.rjust(max_len) for x in head]
-                tail = [x.rjust(max_len) for x in tail]
+            if is_justify:
+
+                # however, if we are not truncated and we are only a single line, then don't justify
+                if is_truncated or not (len(', '.join(head)) < display_width and len(', '.join(tail)) < display_width):
+                    max_len = max(best_len(head), best_len(tail))
+                    head = [x.rjust(max_len) for x in head]
+                    tail = [x.rjust(max_len) for x in tail]
 
             summary = ""
             line = space2
@@ -499,7 +502,7 @@ class Index(IndexOpsMixin, PandasObject):
                 word = head[i] + sep + ' '
                 summary, line = _extend_line(summary, line, word,
                                              display_width, space2)
-            if summary_insert:
+            if is_truncated:
                 summary += line + space2 + '...'
                 line = space2
 
