commit 07aff49e2c89b9071a478dc6085b23291e43d721
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Jun 2 18:47:19 2012 -0400

    BUG: infer unicode separate from string for index serialization in HDFStore re: #1361

diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 93c805b6a..31e6ec358 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -933,13 +933,12 @@ def _convert_index(index):
                             dtype=np.int32)
         return converted, 'date', _tables().Time32Col()
     elif inferred_type =='string':
-        try:
-            converted = np.array(list(values), dtype=np.str_)
-            itemsize = converted.dtype.itemsize
-            return converted, 'string', _tables().StringCol(itemsize)
-        except UnicodeError: # Write an all unicode index as object array
-            atom = _tables().ObjectAtom()
-            return np.asarray(values, dtype='O'), 'object', atom
+        converted = np.array(list(values), dtype=np.str_)
+        itemsize = converted.dtype.itemsize
+        return converted, 'string', _tables().StringCol(itemsize)
+    elif inferred_type == 'unicode':
+        atom = _tables().ObjectAtom()
+        return np.asarray(values, dtype='O'), 'object', atom
     elif inferred_type == 'integer':
         # take a guess for now, hope the values fit
         atom = _tables().Int64Col()
diff --git a/pandas/src/inference.pyx b/pandas/src/inference.pyx
index 7cfae8053..9f357fd8b 100644
--- a/pandas/src/inference.pyx
+++ b/pandas/src/inference.pyx
@@ -76,10 +76,14 @@ def infer_dtype(object _values):
         if is_bool_array(values):
             return 'boolean'
 
-    elif util.is_string_object(val):
+    elif PyString_Check(val):
         if is_string_array(values):
             return 'string'
 
+    elif PyUnicode_Check(val):
+        if is_unicode_array(values):
+            return 'unicode'
+
     for i in range(n):
         val = util.get_value_1d(values, i)
         if util.is_integer_object(val):
@@ -180,12 +184,34 @@ def is_string_array(ndarray values):
             return False
 
         for i in range(n):
-            if not util.is_string_object(objbuf[i]):
+            if not PyString_Check(objbuf[i]):
+                return False
+        return True
+    else:
+        return False
+
+def is_unicode_array(ndarray values):
+    cdef:
+        Py_ssize_t i, n = len(values)
+        ndarray[object] objbuf
+        object obj
+
+    if issubclass(values.dtype.type, np.unicode_):
+        return True
+    elif values.dtype == np.object_:
+        objbuf = values
+
+        if n == 0:
+            return False
+
+        for i in range(n):
+            if not PyUnicode_Check(objbuf[i]):
                 return False
         return True
     else:
         return False
 
+
 def is_datetime_array(ndarray[object] values):
     cdef int i, n = len(values)
     if n == 0:
diff --git a/pandas/tests/test_graphics.py b/pandas/tests/test_graphics.py
index b6c7cf647..e4975c37d 100644
--- a/pandas/tests/test_graphics.py
+++ b/pandas/tests/test_graphics.py
@@ -244,7 +244,8 @@ class TestDataFramePlots(unittest.TestCase):
     def test_andrews_curves(self):
         from pandas import read_csv
         from pandas.tools.plotting import andrews_curves
-        df = read_csv('data/iris.csv')
+        path = os.path.join(curpath(), 'data/iris.csv')
+        df = read_csv(path)
         _check_plot_works(andrews_curves, df, 'Name')
 
     @slow
@@ -287,6 +288,10 @@ def _check_plot_works(f, *args, **kwargs):
     plt.savefig(PNG_PATH)
     os.remove(PNG_PATH)
 
+def curpath():
+    pth, _ = os.path.split(os.path.abspath(__file__))
+    return pth
+
 if __name__ == '__main__':
     nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
                    exit=False)
