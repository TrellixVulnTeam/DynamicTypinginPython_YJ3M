commit 35d61ae5b20cf9eac02f61a52ebceb9a8ac65957
Author: Joris Van den Bossche <jorisvandenbossche@gmail.com>
Date:   Sun Feb 9 23:44:52 2014 +0100

    TEST: add basic postgresql tests
    
    TEST: add postgresql to travis

diff --git a/.travis.yml b/.travis.yml
index 48199c57d..3e930d306 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -73,6 +73,7 @@ install:
 
 before_script:
   - mysql -e 'create database pandas_nosetest;'
+  - psql -c 'create database pandas_nosetest;' -U postgres
 
 script:
   - echo "script"
diff --git a/ci/requirements-2.7.txt b/ci/requirements-2.7.txt
index 477ba83dd..721204f5c 100644
--- a/ci/requirements-2.7.txt
+++ b/ci/requirements-2.7.txt
@@ -19,3 +19,4 @@ beautifulsoup4==4.2.1
 statsmodels==0.5.0
 bigquery==2.0.17
 sqlalchemy==0.8.1
+psycopg2==2.5.2
diff --git a/ci/requirements-3.3.txt b/ci/requirements-3.3.txt
index 73009b572..8fca72f4b 100644
--- a/ci/requirements-3.3.txt
+++ b/ci/requirements-3.3.txt
@@ -15,3 +15,4 @@ scipy==0.12.0
 beautifulsoup4==4.2.1
 statsmodels==0.4.3
 sqlalchemy==0.9.1
+psycopg2==2.5.2
diff --git a/pandas/io/tests/test_sql.py b/pandas/io/tests/test_sql.py
index 4785c4aa8..c45202f80 100644
--- a/pandas/io/tests/test_sql.py
+++ b/pandas/io/tests/test_sql.py
@@ -36,11 +36,19 @@ SQL_STRINGS = {
                 `PetalLength` DOUBLE,
                 `PetalWidth` DOUBLE,
                 `Name` VARCHAR(200)
+            )""",
+        'postgresql': """CREATE TABLE iris (
+                "SepalLength" DOUBLE PRECISION,
+                "SepalWidth" DOUBLE PRECISION,
+                "PetalLength" DOUBLE PRECISION,
+                "PetalWidth" DOUBLE PRECISION,
+                "Name" VARCHAR(200)
             )"""
     },
     'insert_iris': {
         'sqlite': """INSERT INTO iris VALUES(?, ?, ?, ?, ?)""",
-        'mysql': """INSERT INTO iris VALUES(%s, %s, %s, %s, "%s");"""
+        'mysql': """INSERT INTO iris VALUES(%s, %s, %s, %s, "%s");""",
+        'postgresql': """INSERT INTO iris VALUES(%s, %s, %s, %s, %s);"""
     },
     'create_test_types': {
         'sqlite': """CREATE TABLE types_test_data (
@@ -62,6 +70,16 @@ SQL_STRINGS = {
                     `BoolCol` BOOLEAN,
                     `IntColWithNull` INTEGER,
                     `BoolColWithNull` BOOLEAN
+                )""",
+        'postgresql': """CREATE TABLE types_test_data (
+                    "TextCol" TEXT,
+                    "DateCol" TIMESTAMP,
+                    "IntDateCol" INTEGER,
+                    "FloatCol" DOUBLE PRECISION,
+                    "IntCol" INTEGER,
+                    "BoolCol" BOOLEAN,
+                    "IntColWithNull" INTEGER,
+                    "BoolColWithNull" BOOLEAN
                 )"""
     },
     'insert_test_types': {
@@ -72,6 +90,10 @@ SQL_STRINGS = {
         'mysql': """
                 INSERT INTO types_test_data
                 VALUES("%s", %s, %s, %s, %s, %s, %s, %s)
+                """,
+        'postgresql': """
+                INSERT INTO types_test_data
+                VALUES(%s, %s, %s, %s, %s, %s, %s, %s)
                 """
     }
 }
@@ -504,8 +526,8 @@ class TestSQLAlchemy(PandasSQLTest):
         self.assertTrue(issubclass(df.IntColWithNull.dtype.type, np.floating),
                         "IntColWithNull loaded with incorrect type")
         # Non-native Bool column with NA values stays as float
-        self.assertTrue(
-            issubclass(df.BoolColWithNull.dtype.type, np.floating), "BoolCol loaded with incorrect type")
+        self.assertTrue(issubclass(df.BoolColWithNull.dtype.type, np.floating), 
+                        "BoolColWithNull loaded with incorrect type")
 
     def test_default_date_load(self):
         df = sql.read_table("types_test_data", self.conn)
@@ -699,6 +721,48 @@ class TestMySQLAlchemy(TestSQLAlchemy):
             self.assertTrue(
                 issubclass(df.DateCol.dtype.type, np.datetime64), "DateCol loaded with incorrect type")
 
+
+class TestPostgreSQLAlchemy(TestSQLAlchemy):
+    flavor = 'postgresql'
+    
+    def connect(self):
+        return sqlalchemy.create_engine(
+            'postgresql+{driver}://postgres@localhost/pandas_nosetest'.format(driver=self.driver))
+    
+    def setUp(self):
+        if not SQLALCHEMY_INSTALLED:
+            raise nose.SkipTest('SQLAlchemy not installed')
+    
+        try:
+            import psycopg2
+            self.driver = 'psycopg2'
+    
+        except ImportError:
+            raise nose.SkipTest
+    
+        self.conn = self.connect()
+        self.pandasSQL = sql.PandasSQLAlchemy(self.conn)
+    
+        self._load_iris_data()
+        self._load_raw_sql()
+    
+        self._load_test1_data()
+    
+    def tearDown(self):
+        c = self.conn.execute(
+            "SELECT table_name FROM information_schema.tables"
+            " WHERE table_schema = 'public'")
+        for table in c.fetchall():
+            self.conn.execute("DROP TABLE %s" % table[0])
+    
+    def test_default_date_load(self):
+        df = sql.read_table("types_test_data", self.conn)
+    
+        # IMPORTANT - sqlite has no native date type, so shouldn't parse,
+        # but PostgreSQL SHOULD be converted.
+        self.assertTrue(issubclass(df.DateCol.dtype.type, np.datetime64),
+                        "DateCol loaded with incorrect type")
+
 if __name__ == '__main__':
     nose.runmodule(argv=[__file__, '-vvs', '-x', '--pdb', '--pdb-failure'],
                    exit=False)
