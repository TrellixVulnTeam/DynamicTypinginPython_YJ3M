commit 3098c2baa62557d027822790e1ab158f361bcd35
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Jan 10 17:10:12 2012 -0500

    BUG: fix mixed-type block merge bug

diff --git a/pandas/tools/merge.py b/pandas/tools/merge.py
index f62a22fd2..7c9a783e4 100644
--- a/pandas/tools/merge.py
+++ b/pandas/tools/merge.py
@@ -711,7 +711,8 @@ class _Concatenator(object):
 
             new_blocks = []
             for kind in kinds:
-                klass_blocks = [mapping.get(kind) for mapping in blockmaps]
+                klass_blocks = [mapping.get(kind) for mapping in blockmaps
+                                if kind in mapping]
                 stacked_block = self._concat_blocks(klass_blocks)
                 new_blocks.append(stacked_block)
             new_data = BlockManager(new_blocks, self.new_axes)
diff --git a/pandas/tools/tests/test_merge.py b/pandas/tools/tests/test_merge.py
index 1d0214bdf..0983dd6f6 100644
--- a/pandas/tools/tests/test_merge.py
+++ b/pandas/tools/tests/test_merge.py
@@ -734,6 +734,16 @@ class TestConcatenate(unittest.TestCase):
 
         self.assertRaises(ValueError, df_list[0].join, df_list[1:], on='a')
 
+    def test_join_many_mixed(self):
+        df = DataFrame(np.random.randn(8, 4), columns=['A','B','C','D'])
+        df['key'] = ['foo', 'bar'] * 4
+        df1 = df.ix[:, ['A', 'B']]
+        df2 = df.ix[:, ['C', 'D']]
+        df3 = df.ix[:, ['key']]
+
+        result = df1.join([df2, df3])
+        assert_frame_equal(result, df)
+
     def test_append_missing_column_proper_upcast(self):
         df1 = DataFrame({'A' : np.array([1,2, 3, 4], dtype='i8')})
         df2 = DataFrame({'B' : np.array([True,False, True, False],
diff --git a/vb_suite/ctors.py b/vb_suite/ctors.py
new file mode 100644
index 000000000..365af021d
--- /dev/null
+++ b/vb_suite/ctors.py
@@ -0,0 +1,17 @@
+from vbench.benchmark import Benchmark
+from datetime import datetime
+
+common_setup = """from pandas_vb_common import *
+"""
+
+#----------------------------------------------------------------------
+# Series constructors
+
+setup = common_setup + """
+data = np.random.randn(100)
+index = Index(np.arange(100))
+"""
+
+series_constructor_ndarray = \
+    Benchmark("Series(data, index=index)", setup=setup,
+              name='series_constructor_ndarray')
