commit 86f1cee93066b6e76f34e07c66a25bae71991efd
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Thu May 28 15:19:36 2020 -0700

    CLN: clearer lookups for period accessors (#34442)

diff --git a/pandas/_libs/tslibs/period.pyx b/pandas/_libs/tslibs/period.pyx
index 9757c4d36..9d191ba8e 100644
--- a/pandas/_libs/tslibs/period.pyx
+++ b/pandas/_libs/tslibs/period.pyx
@@ -1334,15 +1334,15 @@ cdef int pdays_in_month(int64_t ordinal, int freq):
 
 @cython.wraparound(False)
 @cython.boundscheck(False)
-def get_period_field_arr(int code, const int64_t[:] arr, int freq):
+def get_period_field_arr(str field, const int64_t[:] arr, int freq):
     cdef:
         Py_ssize_t i, sz
         int64_t[:] out
         accessor f
 
-    func = _get_accessor_func(code)
+    func = _get_accessor_func(field)
     if func is NULL:
-        raise ValueError(f"Unrecognized period code: {code}")
+        raise ValueError(f"Unrecognized field name: {field}")
 
     sz = len(arr)
     out = np.empty(sz, dtype=np.int64)
@@ -1356,30 +1356,30 @@ def get_period_field_arr(int code, const int64_t[:] arr, int freq):
     return out.base  # .base to access underlying np.ndarray
 
 
-cdef accessor _get_accessor_func(int code):
-    if code == 0:
+cdef accessor _get_accessor_func(str field):
+    if field == "year":
         return <accessor>pyear
-    elif code == 1:
+    elif field == "qyear":
         return <accessor>pqyear
-    elif code == 2:
+    elif field == "quarter":
         return <accessor>pquarter
-    elif code == 3:
+    elif field == "month":
         return <accessor>pmonth
-    elif code == 4:
+    elif field == "day":
         return <accessor>pday
-    elif code == 5:
+    elif field == "hour":
         return <accessor>phour
-    elif code == 6:
+    elif field == "minute":
         return <accessor>pminute
-    elif code == 7:
+    elif field == "second":
         return <accessor>psecond
-    elif code == 8:
+    elif field == "week":
         return <accessor>pweek
-    elif code == 9:
+    elif field == "day_of_year":
         return <accessor>pday_of_year
-    elif code == 10:
+    elif field == "weekday":
         return <accessor>pweekday
-    elif code == 11:
+    elif field == "days_in_month":
         return <accessor>pdays_in_month
     return NULL
 
@@ -1432,12 +1432,8 @@ def extract_freq(ndarray[object] values):
     for i in range(n):
         value = values[i]
 
-        try:
-            # now Timestamp / NaT has freq attr
-            if is_period_object(value):
-                return value.freq
-        except AttributeError:
-            pass
+        if is_period_object(value):
+            return value.freq
 
     raise ValueError('freq not specified and cannot be inferred')
 
diff --git a/pandas/core/arrays/period.py b/pandas/core/arrays/period.py
index 8b2925b2c..4601e7fa5 100644
--- a/pandas/core/arrays/period.py
+++ b/pandas/core/arrays/period.py
@@ -49,10 +49,10 @@ from pandas.tseries import frequencies
 from pandas.tseries.offsets import DateOffset
 
 
-def _field_accessor(name: str, alias: int, docstring=None):
+def _field_accessor(name: str, docstring=None):
     def f(self):
-        base, mult = libfrequencies.get_freq_code(self.freq)
-        result = get_period_field_arr(alias, self.asi8, base)
+        base, _ = libfrequencies.get_freq_code(self.freq)
+        result = get_period_field_arr(name, self.asi8, base)
         return result
 
     f.__name__ = name
@@ -324,80 +324,69 @@ class PeriodArray(dtl.DatetimeLikeArrayMixin, dtl.DatelikeOps):
 
     year = _field_accessor(
         "year",
-        0,
         """
         The year of the period.
         """,
     )
     month = _field_accessor(
         "month",
-        3,
         """
         The month as January=1, December=12.
         """,
     )
     day = _field_accessor(
         "day",
-        4,
         """
         The days of the period.
         """,
     )
     hour = _field_accessor(
         "hour",
-        5,
         """
         The hour of the period.
         """,
     )
     minute = _field_accessor(
         "minute",
-        6,
         """
         The minute of the period.
         """,
     )
     second = _field_accessor(
         "second",
-        7,
         """
         The second of the period.
         """,
     )
     weekofyear = _field_accessor(
         "week",
-        8,
         """
         The week ordinal of the year.
         """,
     )
     week = weekofyear
     dayofweek = _field_accessor(
-        "dayofweek",
-        10,
+        "weekday",
         """
         The day of the week with Monday=0, Sunday=6.
         """,
     )
     weekday = dayofweek
     dayofyear = day_of_year = _field_accessor(
-        "dayofyear",
-        9,
+        "day_of_year",
         """
         The ordinal day of the year.
         """,
     )
     quarter = _field_accessor(
         "quarter",
-        2,
         """
         The quarter of the date.
         """,
     )
-    qyear = _field_accessor("qyear", 1)
+    qyear = _field_accessor("qyear")
     days_in_month = _field_accessor(
         "days_in_month",
-        11,
         """
         The number of days in the month.
         """,
