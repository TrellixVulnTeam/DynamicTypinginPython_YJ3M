commit 7bc6455a47f0f6865fb839e5d6fa0c45bb6b8a62
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Jun 19 16:54:40 2012 -0400

    BUG: fillna called with Series should be analogous to with dict close #1486

diff --git a/RELEASE.rst b/RELEASE.rst
index 3c54d7c90..7fe8b017c 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -189,6 +189,7 @@ pandas 0.8.0
   - Reset index mapping when grouping Series in Cython (#1423)
   - Fix outer/inner DataFrame.join with non-unique indexes (#1421)
   - Fix MultiIndex groupby bugs with empty lower levels (#1401)
+  - Calling fillna with a Series will have same behavior as with dict (#1486)
 
 pandas 0.7.3
 ============
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 150b8856b..3cf4b1584 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2749,7 +2749,7 @@ class DataFrame(NDFrame):
             # Float type values
             if len(self.columns) == 0:
                 return self
-            if isinstance(value, dict):
+            if isinstance(value, (dict, Series)):
                 result = self if inplace else self.copy()
                 for k, v in value.iteritems():
                     if k not in result:
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 669ce4e91..7716f5181 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3848,7 +3848,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         self.assert_(df2 is df)
         assert_frame_equal(df2, expected)
 
-    def test_fillna_dict(self):
+    def test_fillna_dict_series(self):
         df = DataFrame({'a': [nan, 1, 2, nan, nan],
                         'b': [1, 2, 3, nan, nan],
                         'c': [nan, 1, 2, 3, 4]})
@@ -3863,6 +3863,11 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         # it works
         result = df.fillna({'a': 0, 'b': 5, 'd' : 7})
 
+        # Series treated same as dict
+        result = df.fillna(df.max())
+        expected = df.fillna(df.max().to_dict())
+        assert_frame_equal(result, expected)
+
     def test_fillna_columns(self):
         df = DataFrame(np.random.randn(10, 10))
         df.values[:, ::2] = np.nan
