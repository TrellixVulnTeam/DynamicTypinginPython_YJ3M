commit 8c8d06bb85b44ba876e6905449edbbc5b6d7f74b
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Apr 10 23:21:46 2012 -0400

    ENH: partial multiple setting on first level via .ix on DataFrame, close #409

diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index d768a1bc4..66052c7ef 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -197,7 +197,6 @@ class _NDFrameIndexer(object):
 
     def _getitem_iterable(self, key, axis=0):
         labels = self.obj._get_axis(axis)
-        # axis_name = self.obj._get_axis_name(axis)
 
         def _reindex(keys, level=None):
             try:
@@ -305,8 +304,18 @@ class _NDFrameIndexer(object):
                 if _is_integer_dtype(objarr) and not is_int_index:
                     return objarr
 
-                indexer = labels.get_indexer(objarr)
-                mask = indexer == -1
+                # this is not the most robust, but...
+                if (isinstance(labels, MultiIndex) and
+                    not isinstance(objarr[0], tuple)):
+                    level = 0
+                    _, indexer = labels.reindex(objarr, level=level)
+
+                    check = labels.levels[0].get_indexer(objarr)
+                else:
+                    level = None
+                    indexer = check = labels.get_indexer(objarr)
+
+                mask = check == -1
                 if mask.any():
                     raise KeyError('%s not in index' % objarr[mask])
 
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index c611b3705..678fb49a1 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -1233,6 +1233,35 @@ x   q   30      3    -0.6662 -0.5243 -0.3580  0.89145  2.5838"""
         result = self.frame.T.ix[:, ['foo', 'qux']]
         assert_frame_equal(result, expected.T)
 
+    def test_setitem_multiple_partial(self):
+        expected = self.frame.copy()
+        result = self.frame.copy()
+        result.ix[['foo', 'bar']] = 0
+        expected.ix['foo'] = 0
+        expected.ix['bar'] = 0
+        assert_frame_equal(result, expected)
+
+        expected = self.frame.copy()
+        result = self.frame.copy()
+        result.ix['foo':'bar'] = 0
+        expected.ix['foo'] = 0
+        expected.ix['bar'] = 0
+        assert_frame_equal(result, expected)
+
+        expected = self.frame['A'].copy()
+        result = self.frame['A'].copy()
+        result.ix[['foo', 'bar']] = 0
+        expected.ix['foo'] = 0
+        expected.ix['bar'] = 0
+        assert_series_equal(result, expected)
+
+        expected = self.frame['A'].copy()
+        result = self.frame['A'].copy()
+        result.ix['foo':'bar'] = 0
+        expected.ix['foo'] = 0
+        expected.ix['bar'] = 0
+        assert_series_equal(result, expected)
+
     def test_drop_level(self):
         result = self.frame.drop(['bar', 'qux'], level='first')
         expected = self.frame.ix[[0, 1, 2, 5, 6]]
