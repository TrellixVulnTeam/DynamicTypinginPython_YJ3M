commit 58e2f364bdd1b675d5e63eed172c0d88182b8d92
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Nov 9 23:05:47 2011 -0500

    ENH: add DataFrame.dot for matrix multiplication, GH #65

diff --git a/RELEASE.rst b/RELEASE.rst
index 5d8e2313d..7e1dce9cb 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -46,6 +46,7 @@ pandas 0.5.1
   - Implement logical (boolean) operators &, |, ^ on DataFrame (GH #347)
   - Add `Series.mad`, mean absolute deviation, matching DataFrame
   - Add `QuarterEnd` DateOffset (PR #321)
+  - Add matrix multiplication function `dot` to DataFrame (GH #65)
 
 **Improvements to existing features**
 
@@ -106,6 +107,7 @@ Thanks
 - Marius Cobzarenco
 - Jev Kuznetsov
 - Dieter Vandenbussche
+- rsamson
 
 pandas 0.5.0
 ============
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 46d57006d..390e3ef22 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -377,6 +377,23 @@ class DataFrame(NDFrame):
     __le__ = comp_method(operator.le, '__le__')
     __ge__ = comp_method(operator.ge, '__ge__')
 
+    def dot(self, other):
+        """
+        Matrix multiplication with DataFrame objects. Does no data alignment
+
+        Parameters
+        ----------
+        other : DataFrame
+
+        Returns
+        -------
+        dot_product : DataFrame
+        """
+        lvals = self.values
+        rvals = other.values
+        result = np.dot(lvals, rvals)
+        return DataFrame(result, index=self.index, columns=other.columns)
+
     #----------------------------------------------------------------------
     # IO methods (to / from other formats)
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 0a4641e13..cda246868 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3338,6 +3338,19 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         for k, v in series.iteritems():
             self.assertEqual(v.name, k)
 
+    def test_dot(self):
+        a = DataFrame(np.random.randn(3, 4), index=['a', 'b', 'c'],
+                      columns=['p', 'q', 'r', 's'])
+        b = DataFrame(np.random.randn(4, 2), index=['p', 'q', 'r', 's'],
+                      columns=['one', 'two'])
+
+        result = a.dot(b)
+        expected = DataFrame(np.dot(a.values, b.values),
+                             index=['a', 'b', 'c'],
+                             columns=['one', 'two'])
+        assert_frame_equal(result, expected)
+        foo
+
 class TestDataFrameJoin(unittest.TestCase):
 
     def setUp(self):
