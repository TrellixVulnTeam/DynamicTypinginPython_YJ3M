commit 147e89c2fa37f9ff244492932dcbf36b8971645f
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Jun 10 12:32:29 2011 -0400

    WidePanel.to_sparse, bugfix, unit tests

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 024d8f0f0..2361a4eac 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -128,12 +128,8 @@ class DataFrame(PandasGeneric):
             sdict, columns, index = self._init_matrix(data, index, columns,
                                                       dtype)
         elif isinstance(data, DataFrame):
-            sdict = data._series.copy()
-
-            if dtype is not None:
-                sdict = dict((k, v.astype(dtype)) for k, v in data.iteritems())
-            index = data.index
-            columns = data.columns
+            sdict, columns, index = self._init_dict(data, data.index,
+                                                    data.columns, dtype)
         elif data is None:
             sdict = {}
 
@@ -164,6 +160,8 @@ class DataFrame(PandasGeneric):
         for k, v in data.iteritems():
             if isinstance(v, Series):
                 # Forces alignment and copies data
+                if dtype is not None:
+                    v = v.astype(dtype)
                 sdict[k] = v.reindex(index)
             else:
                 if isinstance(v, dict):
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index d1a16403f..d6364ab6a 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -241,6 +241,28 @@ class WidePanel(Panel, PandasGeneric):
 
     fromDict = from_dict
 
+    def to_sparse(self, fill_value=None, kind='block'):
+        """
+        Convert to SparseWidePanel
+
+        Parameters
+        ----------
+        fill_value : float, default NaN
+        kind : {'block', 'integer'}
+
+        Returns
+        -------
+        y : SparseDataFrame
+        """
+        from pandas.core.sparse import SparseWidePanel
+        frames = dict(self.iteritems())
+        return SparseWidePanel(frames, items=self.items,
+                               major_axis=self.major_axis,
+                               minor_axis=self.minor_axis,
+                               default_kind=kind,
+                               default_fill_value=fill_value)
+
+
     def keys(self):
         return list(self.items)
 
diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index 74c28afac..d760d09dd 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -750,6 +750,16 @@ class SparseDataFrame(DataFrame):
         return SparseDataFrame(sdict, index=self.index, columns=columns,
                                default_fill_value=self.default_fill_value)
 
+    def transpose(self):
+        """
+        Returns a DataFrame with the rows/columns switched.
+        """
+        return SparseDataFrame(self.values.T, index=self.columns,
+                               columns=self.index,
+                               default_fill_value=self.default_fill_value,
+                               default_kind=self.default_kind)
+    T = property(transpose)
+
 def stack_sparse_frame(frame):
     """
     Only makes sense when fill_value is NaN
diff --git a/pandas/core/tests/test_sparse.py b/pandas/core/tests/test_sparse.py
index 8fa4126cf..943272e26 100644
--- a/pandas/core/tests/test_sparse.py
+++ b/pandas/core/tests/test_sparse.py
@@ -616,6 +616,11 @@ class TestSparseDataFrame(TestCase):
         reindexed = self.frame.reindex(idx)
         assert_sp_frame_equal(cons, reindexed)
 
+    def test_constructor_dataframe(self):
+        dense = self.frame.to_dense()
+        sp = SparseDataFrame(dense)
+        assert_sp_frame_equal(sp, self.frame)
+
     def test_array_interface(self):
         res = np.sqrt(self.frame)
         dres = np.sqrt(self.frame.to_dense())
@@ -840,12 +845,20 @@ class TestSparseDataFrame(TestCase):
         self.assertRaises(Exception, _check, self.zframe)
         self.assertRaises(Exception, _check, self.fill_frame)
 
+    def test_transpose(self):
+        def _check(frame):
+            transposed = frame.T
+            untransposed = transposed.T
+            assert_sp_frame_equal(frame, untransposed)
+        self._check_all(_check)
+
     def _check_all(self, check_func):
         check_func(self.frame)
         check_func(self.iframe)
         check_func(self.zframe)
         check_func(self.fill_frame)
 
+
 def panel_data1():
     index = DateRange('1/1/2011', periods=8)
 
@@ -907,6 +920,11 @@ class TestSparseWidePanel(TestCase, test_panel.SafeForSparseTests):
 
         _test_roundtrip(self.panel)
 
+    def test_dense_to_sparse(self):
+        wp = WidePanel.from_dict(self.data_dict)
+        dwp = wp.to_sparse()
+        self.assert_(isinstance(dwp['ItemA']['a'], SparseSeries))
+
     def test_to_dense(self):
         dwp = self.panel.to_dense()
         dwp2 = WidePanel.from_dict(self.data_dict)
