commit bf709b09ac165ec7a13a2f785e3b2e75330bc01f
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Feb 7 00:04:40 2012 -0500

    TST: test coverage

diff --git a/pandas/core/format.py b/pandas/core/format.py
index 3165b1c17..cce4eb774 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -403,8 +403,6 @@ class DataFrameFormatter(object):
 def format_array(values, formatter, float_format=None, na_rep='NaN',
                  digits=None, space=None):
     if com.is_float_dtype(values.dtype):
-        if formatter is None:
-            formatter = float_format
         fmt_klass = FloatArrayFormatter
     elif com.is_integer_dtype(values.dtype):
         fmt_klass = IntArrayFormatter
@@ -418,6 +416,7 @@ def format_array(values, formatter, float_format=None, na_rep='NaN',
         digits = print_config.precision
 
     fmt_obj = fmt_klass(values, digits, na_rep=na_rep,
+                        float_format=float_format,
                         formatter=formatter, space=space)
 
     return fmt_obj.get_result()
@@ -563,14 +562,14 @@ def _has_names(index):
 #-------------------------------------------------------------------------------
 # Global formatting options
 
-def set_printoptions(precision=None, digits=None, column_space=None,
-                     max_rows=None, max_columns=None,
-                     colheader_justify='right'):
+def set_printoptions(precision=None, column_space=None, max_rows=None,
+                     max_columns=None, colheader_justify='right'):
     """
     Alter default behavior of DataFrame.toString
 
     precision : int
-        Floating point output precision (number of significant digits)
+        Floating point output precision (number of significant digits). This is
+        only a suggestion
     column_space : int
         Default space for DataFrame columns, defaults to 12
     max_rows : int
@@ -581,8 +580,6 @@ def set_printoptions(precision=None, digits=None, column_space=None,
         out how big the terminal is and will not display more rows or/and
         columns that can fit on it.
     """
-    if digits is not None:
-        print_config.digits = digits
     if precision is not None:
         print_config.precision = precision
     if column_space is not None:
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index a8ecf6c5d..4ec0e6040 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -226,11 +226,11 @@ class TestDataFrameFormatting(unittest.TestCase):
                         '1  2.512000e-01')
         assert(df_s == expected)
 
-    def test_to_string_right_justify_cols(self):
+    def test_to_string_left_justify_cols(self):
         fmt.reset_printoptions()
         df = DataFrame({'x' : [3234, 0.253]})
-        df_s = df.to_string(justify='right')
-        expected = ('          x\n'
+        df_s = df.to_string(justify='left')
+        expected = ('   x       \n'
                     '0  3234.000\n'
                     '1     0.253')
         assert(df_s == expected)
@@ -524,6 +524,10 @@ class TestEngFormatter(unittest.TestCase):
                    (555555, ' 556k')]
          self.compare_all(formatter, in_out)
 
+         formatter = fmt.EngFormatter(accuracy=3, use_eng_prefix=True)
+         result = formatter(0)
+         self.assertEqual(result, u' 0.000')
+
 
 # class TestFloatArrayFormatter(unittest.TestCase):
 
diff --git a/pandas/tests/test_internals.py b/pandas/tests/test_internals.py
index 8f4085e69..84a058944 100644
--- a/pandas/tests/test_internals.py
+++ b/pandas/tests/test_internals.py
@@ -4,7 +4,7 @@ import unittest
 
 import numpy as np
 
-from pandas import Index, DataFrame
+from pandas import Index, MultiIndex, DataFrame
 from pandas.core.internals import *
 import pandas.core.internals as internals
 
@@ -320,8 +320,18 @@ class TestBlockManager(unittest.TestCase):
         _check_cols(self.mgr, reindexed, ['c', 'a', 'd'])
 
     def test_xs(self):
-        pass
+        index = MultiIndex(levels=[['foo', 'bar', 'baz', 'qux'],
+                                   ['one', 'two', 'three']],
+                           labels=[[0, 0, 0, 1, 1, 2, 2, 3, 3, 3],
+                                   [0, 1, 2, 0, 1, 1, 2, 0, 1, 2]],
+                           names=['first', 'second'])
+
+        self.mgr.set_axis(1, index)
+
+        result = self.mgr.xs('bar', axis=1)
+        expected = self.mgr.get_slice(slice(3, 5), axis=1)
 
+        assert_frame_equal(DataFrame(result), DataFrame(expected))
 
 if __name__ == '__main__':
     # unittest.main()
