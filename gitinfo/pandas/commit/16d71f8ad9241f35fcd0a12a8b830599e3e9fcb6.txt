commit 16d71f8ad9241f35fcd0a12a8b830599e3e9fcb6
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Sep 6 21:10:53 2011 -0400

    REF: renamed WidePanel -> Panel. legacy pickle support remains and a reference to WidePanel in the pandas namespace

diff --git a/RELEASE.rst b/RELEASE.rst
index 550b8237d..08d5ad6b0 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -27,10 +27,10 @@ Release notes
 **New features / modules**
 
   - `pandas.core.sparse` module: "Sparse" (mostly-NA, or some other fill value)
-    versions of `Series`, `DataFrame`, and `WidePanel`. For low-density data, this
+    versions of `Series`, `DataFrame`, and `Panel`. For low-density data, this
     will result in significant performance boosts, and smaller memory
     footprint. Added `to_sparse` methods to `Series`, `DataFrame`, and
-    `WidePanel`. See online documentation for more on these
+    `Panel`. See online documentation for more on these
   - Fancy indexing operator on Series / DataFrame, e.g. via .ix operator. Both
     getting and setting of values is supported; however, setting values will only
     currently work on homogeneously-typed DataFrame objects. Things like:
@@ -90,8 +90,8 @@ Release notes
     than the default __setitem__ behavior (which puts it at the end)
   - `HDFStore` class in `pandas.io.pytables` has been largely rewritten using
     patches from Jeff Reback from others. It now supports mixed-type `DataFrame`
-    and `Series` data and can store `WidePanel` objects. It also has the option to
-    query `DataFrame` and `WidePanel` data. Loading data from legacy `HDFStore`
+    and `Series` data and can store `Panel` objects. It also has the option to
+    query `DataFrame` and `Panel` data. Loading data from legacy `HDFStore`
     files is supported explicitly in the code
   - Added `set_printoptions` method to modify appearance of DataFrame tabular
     output
@@ -102,9 +102,9 @@ Release notes
     labels from an axis, producing a new object
   - `reindex` methods now sport a `copy` option so that data is not forced to be
     copied then the resulting object is indexed the same
-  - Added `sort_index` methods to Series and WidePanel. Renamed `DataFrame.sort`
+  - Added `sort_index` methods to Series and Panel. Renamed `DataFrame.sort`
     to `sort_index`. Leaving `DataFrame.sort` for now.
-v
+<v
 **Improvements to existing features**
 
   * The 2-dimensional `DataFrame` and `DataMatrix` classes have been extensively
@@ -146,13 +146,20 @@ v
   * `DataFrame.pivot` generalized to enable pivoting multiple columns into a
     `DataFrame` with hierarhical columns
   * `DataFrame` constructor can accept structured / record arrays
-  * `WidePanel` constructor can accept a dict of DataFrame-like objects. Do not
+  * `Panel` constructor can accept a dict of DataFrame-like objects. Do not
     need to use `from_dict` anymore (`from_dict` is there to stay, though).
 
 **API Changes**
 
   * The `DataMatrix` variable now refers to `DataFrame`, will be removed within
     two releases
+  * `WidePanel` is now known as `Panel`. The `WidePanel` variable in the pandas
+    namespace now refers to the renamed `Panel` class
+  * `LongPanel` and `Panel` / `WidePanel` now no longer have a common
+    subclass. `LongPanel` is now a subclass of `DataFrame` having a number of
+    additional methods and a hierarchical index instead of the old
+    `LongPanelIndex` object, which has been removed. Legacy `LongPanel` pickles
+    may not load properly
   * Cython is now required to build `pandas` from a development branch. This was
     done to avoid continuing to check in cythonized C files into source
     control. Builds from released source distributions will not require Cython
@@ -198,7 +205,7 @@ v
 
   * `fillMethod` arguments (deprecated in prior release) removed, should be
     replaced with `method`
-  * `Series.fill`, `DataFrame.fill`, and `WidePanel.fill` removed, use `fillna`
+  * `Series.fill`, `DataFrame.fill`, and `Panel.fill` removed, use `fillna`
     instead
   * `groupby` functions now exclude NA / NaN values from the list of groups. This
     matches R behavior with NAs in factors e.g. with the `tapply` function
@@ -208,7 +215,7 @@ v
   * Removed `pandas.core.pytools` module. Code has been moved to
     `pandas.core.common`
   * Tacked on `groupName` attribute for groups in GroupBy renamed to `name`
-  * WidePanel/LongPanel `dims` attribute renamed to `shape` to be more conformant
+  * Panel/LongPanel `dims` attribute renamed to `shape` to be more conformant
   * Slicing a `Series` returns a view now
   * More Series deprecations / renaming: `toCSV` to `to_csv`, `asOf` to `asof`,
     `merge` to `map`, `applymap` to `apply`, `toDict` to `to_dict`,
diff --git a/bench/bench_sparse.py b/bench/bench_sparse.py
index ed4603d17..400341526 100644
--- a/bench/bench_sparse.py
+++ b/bench/bench_sparse.py
@@ -52,22 +52,22 @@ def new_data_like(sdf):
 # for col, ser in dm.iteritems():
 #     data[col] = SparseSeries(ser)
 
-dwp = WidePanel.fromDict({'foo' : dm})
+dwp = Panel.fromDict({'foo' : dm})
 # sdf = SparseDataFrame(data)
 
 
 lp = stack_sparse_frame(sdf)
 
 
-swp = SparseWidePanel({'A' : sdf})
-swp = SparseWidePanel({'A' : sdf,
+swp = SparsePanel({'A' : sdf})
+swp = SparsePanel({'A' : sdf,
                        'B' : sdf,
                        'C' : sdf,
                        'D' : sdf})
 
 y = sdf
-x = SparseWidePanel({'x1' : sdf + new_data_like(sdf) / 10,
-                     'x2' : sdf + new_data_like(sdf) / 10})
+x = SparsePanel({'x1' : sdf + new_data_like(sdf) / 10,
+                 'x2' : sdf + new_data_like(sdf) / 10})
 
 dense_y = sdf
 dense_x = x.to_dense()
diff --git a/doc/source/basics.rst b/doc/source/basics.rst
index fb0cd81a9..5efd514c0 100644
--- a/doc/source/basics.rst
+++ b/doc/source/basics.rst
@@ -226,6 +226,11 @@ keys.
 The row and column labels can be accessed respectively by accessing the
 **index** and **columns** attributes:
 
+.. note::
+
+   When a particular set of columns is passed along with a dict of data, the
+   passed columns override the keys in the dict.
+
 .. ipython:: python
 
    df.index
@@ -443,39 +448,32 @@ it won't always fit the console width:
 
 .. _basics.panel:
 
-WidePanel
----------
+Panel
+-----
 
-WidePanel is a somewhat less-used, but still important container for
-3-dimensional data. The term `panel data
-<http://en.wikipedia.org/wiki/Panel_data>`__ is derived from econometrics and
-is partially responsible for the name pandas: pan(el)-da(ta)-s. The names for
-the 3 axes are intended to give some semantic meaning to describing operations
-involving panel data and, in particular, econometric analysis of panel
-data. However, for the strict purposes of slicing and dicing a collection of
-DataFrame objects, you may find the axis names slightly arbitrary:
+Panel is a somewhat less-used, but still important container for 3-dimensional
+data. The term `panel data <http://en.wikipedia.org/wiki/Panel_data>`__ is
+derived from econometrics and is partially responsible for the name pandas:
+pan(el)-da(ta)-s. The names for the 3 axes are intended to give some semantic
+meaning to describing operations involving panel data and, in particular,
+econometric analysis of panel data. However, for the strict purposes of slicing
+and dicing a collection of DataFrame objects, you may find the axis names
+slightly arbitrary:
 
   - **items**: axis 0, each item corresponds to a DataFrame contained inside
   - **major_axis**: axis 1, it is the **index** (rows) of each of the
     DataFrames
   - **minor_axis**: axis 2, it is the **columns** of each of the DataFrames
 
-.. note::
-
-    The "wide" in **WidePanel** name comes from the notion of "long" and "wide"
-    formats of grouped data. The R `reshape function
-    <http://stat.ethz.ch/R-manual/R-patched/library/stats/html/reshape.html>`__
-    has some more to say about these.
-
-Construction of WidePanels works about like you would expect:
+Construction of Panels works about like you would expect:
 
 **3D ndarray with optional axis labels**
 
 .. ipython:: python
 
-   wp = WidePanel(randn(2, 5, 4), items=['Item1', 'Item2'],
-                  major_axis=DateRange('1/1/2000', periods=5),
-                  minor_axis=['A', 'B', 'C', 'D'])
+   wp = Panel(randn(2, 5, 4), items=['Item1', 'Item2'],
+              major_axis=DateRange('1/1/2000', periods=5),
+              minor_axis=['A', 'B', 'C', 'D'])
    wp
 
 
@@ -485,7 +483,7 @@ Construction of WidePanels works about like you would expect:
 
    data = {'Item1' : DataFrame(randn(4, 3)),
            'Item2' : DataFrame(randn(4, 2))}
-   WidePanel(data)
+   Panel(data)
 
 Note that the values in the dict need only be **convertible to
 DataFrame**. Thus, they can be any of the other valid inputs to DataFrame as
@@ -493,16 +491,16 @@ per above.
 
 .. note::
 
-   Unfortunately WidePanel, being less commonly used than Series and DataFrame,
+   Unfortunately Panel, being less commonly used than Series and DataFrame,
    has been slightly neglected feature-wise. A number of methods and options
-   available in DataFrame are not available in WidePanel. This will get worked
+   available in DataFrame are not available in Panel. This will get worked
    on, of course, in future releases. And faster if you join me in working on
    the codebase.
 
 Item selection / addition / deletion
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
-Similar to DataFrame functioning as a dict of Series, WidePanel is like a dict
+Similar to DataFrame functioning as a dict of Series, Panel is like a dict
 of DataFrames:
 
 .. ipython:: python
@@ -515,9 +513,9 @@ The API for insertion and deletion is the same as for DataFrame.
 Indexing / Selection
 ~~~~~~~~~~~~~~~~~~~~
 
-As of this writing, indexing with WidePanel is a bit more restrictive than in
+As of this writing, indexing with Panel is a bit more restrictive than in
 DataFrame. Notably, :ref:`advanced indexing <indexing>` via the **ix** property
-has not yet been integrated in WidePanel. This will be done, however, in a
+has not yet been integrated in Panel. This will be done, however, in a
 future release.
 
 .. csv-table::
@@ -549,7 +547,7 @@ pandas objects have a number of attributes enabling you to access the metadata
 
     * **Series**: *index* (only axis)
     * **DataFrame**: *index* (rows) and *columns*
-    * **WidePanel**: *items*, *major_axis*, and *minor_axis*
+    * **Panel**: *items*, *major_axis*, and *minor_axis*
 
 Note, **these attributes can be safely assigned to**!
 
@@ -568,7 +566,7 @@ To get the actual data inside a data structure, one need only access the
     df.values
     wp.values
 
-If a DataFrame or WidePanel contains homogeneously-typed data, the ndarray can
+If a DataFrame or Panel contains homogeneously-typed data, the ndarray can
 actually be modified in-place, and the changes will be reflected in the data
 structure. For heterogeneous data (e.g. some of the DataFrame's columns are not
 all the same dtype), this will not be the case. The values attribute itself,
@@ -625,7 +623,7 @@ either match on the *index* or *columns* via the **axis** keyword:
    df.sub(column, axis='index')
    df.sub(column, axis=0)
 
-With WidePanel, describing the matching behavior is a bit more difficult, so
+With Panel, describing the matching behavior is a bit more difficult, so
 the arithmetic methods instead (and perhaps confusingly?) give you the option
 to specify the *broadcast axis*. For example, suppose we wished to demean the
 data over a particular axis. This can be accomplished by taking the mean over
@@ -642,13 +640,13 @@ And similarly for axis="items" and axis="minor".
 .. note::
 
    I could be convinced to make the **axis** argument in the DataFrame methods
-   match the broadcasting behavior of WidePanel. Though it would require a
+   match the broadcasting behavior of Panel. Though it would require a
    transition period so users can change their code...
 
 Missing data / operations with fill values
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
-In Series and DataFrame (though not yet in WidePanel), the arithmetic functions
+In Series and DataFrame (though not yet in Panel), the arithmetic functions
 have the option of inputting a *fill_value*, namely a value to substitute when
 at most one of the values at a location are missing. For example, when adding
 two DataFrame objects, you may wish to treat NaN as 0 unless both DataFrames
@@ -675,7 +673,7 @@ Descriptive statistics
 
 A large number of methods for computing descriptive statistics and other related
 operations on :ref:`Series <api.series.stats>`, :ref:`DataFrame
-<api.dataframe.stats>`, and :ref:`WidePanel <api.panel.stats>`. Most of these
+<api.dataframe.stats>`, and :ref:`Panel <api.panel.stats>`. Most of these
 are aggregations (hence producing a lower-dimensional result) like **sum**,
 **mean**, and **quantile**, but some of them, like **cumsum** and **cumprod**,
 produce an object of the same size. Generally speaking, these methods take an
@@ -684,7 +682,7 @@ specified by name or integer:
 
   - **Series**: no axis argument needed
   - **DataFrame**: "index" (axis=0, default), "columns" (axis=1)
-  - **WidePanel**: "items" (axis=0), "major" (axis=1, default), "minor"
+  - **Panel**: "items" (axis=0), "major" (axis=1, default), "minor"
     (axis=2)
 
 For example:
@@ -793,7 +791,7 @@ objects.
 Function application
 --------------------
 
-Arbitrary functions can be applied along the axes of a DataFrame or WidePanel
+Arbitrary functions can be applied along the axes of a DataFrame or Panel
 using the ``apply`` method, which, like the descriptive statistics methods,
 take an optional ``axis`` argument:
 
@@ -1051,7 +1049,7 @@ produces the "keys" of the objects, namely:
 
   * **Series**: the index label
   * **DataFrame**: the column labels
-  * **WidePanel**: the item labels
+  * **Panel**: the item labels
 
 Thus, for example:
 
@@ -1069,7 +1067,7 @@ key-value pairs:
 
   * **Series**: (index, scalar value) pairs
   * **DataFrame**: (column, Series) pairs
-  * **WidePanel**: (item, DataFrame) pairs
+  * **Panel**: (item, DataFrame) pairs
 
 For example:
 
diff --git a/doc/source/indexing.rst b/doc/source/indexing.rst
index 9f3b3c6b7..c324f5bfc 100644
--- a/doc/source/indexing.rst
+++ b/doc/source/indexing.rst
@@ -26,8 +26,8 @@ In this section / chapter, we will focus on the latter set of functionality,
 namely how to slice, dice, and generally get and set subsets of pandas
 objects. The primary focus will be on Series and DataFrame as they have
 received more development attention in this area. More work will be invested in
-WidePanel and future higher-dimensional data structures in the future,
-especially in label-based advanced indexing.
+Panel and future higher-dimensional data structures in the future, especially
+in label-based advanced indexing.
 
 .. _indexing.basics:
 
@@ -42,7 +42,7 @@ lower-dimensional slices. Thus,
   - **Series**: ``series[label]`` returns a scalar value
   - **DataFrame**: ``frame[colname]`` returns a Series corresponding to the
     passed column name
-  - **WidePanel**: ``panel[itemname]`` returns a DataFrame corresponding to the
+  - **Panel**: ``panel[itemname]`` returns a DataFrame corresponding to the
     passed item name
 
 Here we construct a simple time series data set to use for illustrating the
@@ -53,7 +53,7 @@ indexing functionality:
    dates = np.asarray(DateRange('1/1/2000', periods=8))
    df = DataFrame(randn(8, 4), index=dates, columns=['A', 'B', 'C', 'D'])
    df
-   panel = WidePanel({'one' : df, 'two' : df - df.mean()})
+   panel = Panel({'one' : df, 'two' : df - df.mean()})
    panel
 
 .. note::
@@ -73,11 +73,11 @@ Data slices on other axes
 ~~~~~~~~~~~~~~~~~~~~~~~~~
 
 It's certainly possible to retrieve data slices along the other axes of a
-DataFrame or WidePanel. We tend to refer to these slices as
+DataFrame or Panel. We tend to refer to these slices as
 *cross-sections*. DataFrame has the ``xs`` function for retrieving rows as
-Series and WidePanel has the analogous ``major_xs`` and ``minor_xs`` functions
-for retrieving slices as DataFrames for a given ``major_axis`` or
-``minor_axis`` label, respectively.
+Series and Panel has the analogous ``major_xs`` and ``minor_xs`` functions for
+retrieving slices as DataFrames for a given ``major_axis`` or ``minor_axis``
+label, respectively.
 
 .. ipython:: python
 
diff --git a/doc/source/missing_data.rst b/doc/source/missing_data.rst
index 89c095dc4..184350a49 100644
--- a/doc/source/missing_data.rst
+++ b/doc/source/missing_data.rst
@@ -185,9 +185,9 @@ data. To do this, use the **dropna** method:
    df['one'].dropna()
 
 **dropna** is presently only implemented for Series and DataFrame, but will be
-eventually added to WidePanel. Series.dropna is a simpler method as it only has
-one axis to consider. DataFrame.dropna has considerably more options, which can
-be examined :ref:`in the API <api.dataframe.missing>`.
+eventually added to Panel. Series.dropna is a simpler method as it only has one
+axis to consider. DataFrame.dropna has considerably more options, which can be
+examined :ref:`in the API <api.dataframe.missing>`.
 
 Interpolation
 ~~~~~~~~~~~~~
diff --git a/doc/source/overview.rst b/doc/source/overview.rst
index 8390e5bbe..8ef6bb8e6 100644
--- a/doc/source/overview.rst
+++ b/doc/source/overview.rst
@@ -40,15 +40,16 @@ Data structures at a glance
     1, TimeSeries, "Series with index containing datetimes"
     2, DataFrame, "General 2D labeled, size-mutable tabular structure with
     potentially heterogeneously-typed columns"
-    3, WidePanel, "General 3D labeled, also size-mutable array"
+    3, Panel, "General 3D labeled, also size-mutable array"
 
 Why more than 1 data structure?
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
-The best way to think about the pandas data structures is as flexible containers
-for lower dimensional data. For example, DataFrame is a container for Series,
-and WidePanel is a container for DataFrame objects. We would like to be able to
-insert and remove objects from these containers in a dictionary-like fashion.
+The best way to think about the pandas data structures is as flexible
+containers for lower dimensional data. For example, DataFrame is a container
+for Series, and Panel is a container for DataFrame objects. We would like to be
+able to insert and remove objects from these containers in a dictionary-like
+fashion.
 
 Also, we would like sensible default behaviors for the common API functions
 which take into account the typical orientation of time series and
diff --git a/pandas/core/api.py b/pandas/core/api.py
index e0fa3ba10..8f0223250 100644
--- a/pandas/core/api.py
+++ b/pandas/core/api.py
@@ -10,8 +10,9 @@ from pandas.core.index import Index, Factor, MultiIndex
 from pandas.core.daterange import DateRange
 from pandas.core.series import Series, TimeSeries
 from pandas.core.frame import DataFrame
-from pandas.core.panel import WidePanel, LongPanel
+from pandas.core.panel import Panel, LongPanel
 from pandas.core.groupby import groupby
 from pandas.core.reshape import pivot_simple as pivot
 
 DataMatrix = DataFrame
+WidePanel = Panel
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index aeff04f6d..04ab47ebe 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1624,8 +1624,8 @@ class DataFrame(NDFrame):
         """
         Reshape data (produce a "pivot" table) based on column values. Uses
         unique values from index / columns to form axes and return either
-        DataFrame or WidePanel, depending on whether you request a single value
-        column (DataFrame) or all columns (WidePanel)
+        DataFrame or Panel, depending on whether you request a single value
+        column (DataFrame) or all columns (Panel)
 
         Parameters
         ----------
@@ -1664,8 +1664,9 @@ class DataFrame(NDFrame):
 
         Returns
         -------
-        pivoted : DataFrame (value column specified) or WidePanel (no value
-        column specified)
+        pivoted : DataFrame
+            If no values column specified, will have hierarchically indexed
+            columns
         """
         from pandas.core.reshape import pivot
         return pivot(self, index=index, columns=columns, values=values)
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index aa4a45421..b68fc9912 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -8,7 +8,7 @@ from pandas.core.generic import NDFrame, PandasObject
 from pandas.core.index import Index, MultiIndex
 from pandas.core.internals import BlockManager
 from pandas.core.series import Series
-from pandas.core.panel import WidePanel
+from pandas.core.panel import Panel
 from pandas.util.decorators import cache_readonly
 import pandas._tseries as _tseries
 
@@ -1079,7 +1079,7 @@ def _all_indexes_same(indexes):
             return False
     return True
 
-class WidePanelGroupBy(GroupBy):
+class PanelGroupBy(GroupBy):
 
     def aggregate(self, func):
         """
@@ -1089,12 +1089,12 @@ class WidePanelGroupBy(GroupBy):
         ----------
         arg : function or dict
             Function to use for aggregating groups. If a function, must either
-            work when passed a WidePanel or when passed to WidePanel.apply. If
+            work when passed a Panel or when passed to Panel.apply. If
             pass a dict, the keys must be DataFrame column names
 
         Returns
         -------
-        aggregated : WidePanel
+        aggregated : Panel
         """
         return self._aggregate_generic(func, axis=self.axis)
 
@@ -1110,7 +1110,7 @@ class WidePanelGroupBy(GroupBy):
             except Exception:
                 result[name] = data.apply(agger, axis=axis)
 
-        result = WidePanel.fromDict(result, intersect=False)
+        result = Panel.fromDict(result, intersect=False)
 
         if axis > 0:
             result = result.swapaxes(0, axis)
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 454dea559..5bf89f652 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -838,7 +838,7 @@ def _union_block_items(blocks):
     if slow:
         the_union = _union_items_slow(all_items)
     else:
-        the_union = _tseries.fast_unique_multiple(all_items)
+        the_union = Index(_tseries.fast_unique_multiple(all_items))
 
     if tot_len > len(the_union):
         raise Exception('item names overlap')
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 70d5f4ae6..c855caa24 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -29,7 +29,7 @@ def _arith_method(func, name):
 
     def f(self, other):
         if not np.isscalar(other):
-            raise ValueError('Simple arithmetic with WidePanel can only be '
+            raise ValueError('Simple arithmetic with Panel can only be '
                             'done with scalar values')
 
         return self._combine(other, func)
@@ -85,14 +85,7 @@ def _add_docs(method, desc, outname, na_info=None):
     doc = _agg_doc % locals()
     method.__doc__ = doc
 
-
-class Panel(object):
-    """
-    Abstract superclass for LongPanel and WidePanel data structures
-    """
-    pass
-
-class WidePanel(Panel, NDFrame):
+class Panel(NDFrame):
     _AXIS_NUMBERS = {
         'items' : 0,
         'major_axis' : 1,
@@ -211,7 +204,7 @@ class WidePanel(Panel, NDFrame):
     @classmethod
     def from_dict(cls, data, intersect=False, dtype=float):
         """
-        Construct WidePanel from dict of DataFrame objects
+        Construct Panel from dict of DataFrame objects
 
         Parameters
         ----------
@@ -221,12 +214,12 @@ class WidePanel(Panel, NDFrame):
 
         Returns
         -------
-        WidePanel
+        Panel
         """
         data, index, columns = _homogenize_dict(data, intersect=intersect,
                                                 dtype=dtype)
         items = Index(sorted(data.keys()))
-        return WidePanel(data, items, index, columns)
+        return Panel(data, items, index, columns)
 
     def _init_matrix(self, data, axes, dtype=None, copy=False):
         values = _prep_ndarray(data, copy=copy)
@@ -299,7 +292,7 @@ class WidePanel(Panel, NDFrame):
 
     @property
     def _constructor(self):
-        return WidePanel
+        return Panel
 
     def _wrap_array(self, arr, axes, copy=False):
         items, major, minor = axes
@@ -310,7 +303,7 @@ class WidePanel(Panel, NDFrame):
 
     def to_sparse(self, fill_value=None, kind='block'):
         """
-        Convert to SparseWidePanel
+        Convert to SparsePanel
 
         Parameters
         ----------
@@ -321,13 +314,13 @@ class WidePanel(Panel, NDFrame):
         -------
         y : SparseDataFrame
         """
-        from pandas.core.sparse import SparseWidePanel
+        from pandas.core.sparse import SparsePanel
         frames = dict(self.iteritems())
-        return SparseWidePanel(frames, items=self.items,
-                               major_axis=self.major_axis,
-                               minor_axis=self.minor_axis,
-                               default_kind=kind,
-                               default_fill_value=fill_value)
+        return SparsePanel(frames, items=self.items,
+                           major_axis=self.major_axis,
+                           minor_axis=self.minor_axis,
+                           default_kind=kind,
+                           default_fill_value=fill_value)
 
     # TODO: needed?
     def keys(self):
@@ -391,7 +384,7 @@ class WidePanel(Panel, NDFrame):
         return self._data
 
     def __setstate__(self, state):
-        # old WidePanel pickle
+        # old Panel pickle
         if isinstance(state, BlockManager):
             self._data = state
         elif len(state) == 4: # pragma: no cover
@@ -408,7 +401,7 @@ class WidePanel(Panel, NDFrame):
         major = _unpickle(major)
         minor = _unpickle(minor)
         values = _unpickle(vals)
-        wp = WidePanel(values, items, major, minor)
+        wp = Panel(values, items, major, minor)
         self._data = wp._data
 
     def conform(self, frame, axis='items'):
@@ -453,7 +446,7 @@ class WidePanel(Panel, NDFrame):
 
         Returns
         -------
-        WidePanel (new object)
+        Panel (new object)
         """
         result = self
 
@@ -476,16 +469,16 @@ class WidePanel(Panel, NDFrame):
 
     def reindex_like(self, other, method=None):
         """
-        Reindex WidePanel to match indices of another WidePanel
+        Reindex Panel to match indices of another Panel
 
         Parameters
         ----------
-        other : WidePanel
+        other : Panel
         method : string or None
 
         Returns
         -------
-        reindexed : WidePanel
+        reindexed : Panel
         """
         # todo: object columns
         return self.reindex(major=other.major_axis, items=other.items,
@@ -499,7 +492,7 @@ class WidePanel(Panel, NDFrame):
         elif np.isscalar(other):
             new_values = func(self.values, other)
 
-            return WidePanel(new_values, self.items, self.major_axis,
+            return Panel(new_values, self.items, self.major_axis,
                              self.minor_axis)
 
     def __neg__(self):
@@ -520,8 +513,8 @@ class WidePanel(Panel, NDFrame):
             new_values = func(self.values.swapaxes(0, 2), other.values)
             new_values = new_values.swapaxes(0, 2)
 
-        return WidePanel(new_values, self.items, self.major_axis,
-                         self.minor_axis)
+        return Panel(new_values, self.items, self.major_axis,
+                     self.minor_axis)
 
     def _combine_panel(self, other, func):
         if isinstance(other, LongPanel):
@@ -538,7 +531,7 @@ class WidePanel(Panel, NDFrame):
 
         result_values = func(this.values, other.values)
 
-        return WidePanel(result_values, items, major, minor)
+        return Panel(result_values, items, major, minor)
 
     def fillna(self, value=None, method='pad'):
         """
@@ -570,10 +563,10 @@ class WidePanel(Panel, NDFrame):
             for col, s in self.iteritems():
                 result[col] = s.fillna(method=method, value=value)
 
-            return WidePanel.from_dict(result)
+            return Panel.from_dict(result)
         else:
             new_data = self._data.fillna(value)
-            return WidePanel(new_data)
+            return Panel(new_data)
 
     add = _panel_arith_method(operator.add, 'add')
     subtract = sub = _panel_arith_method(operator.sub, 'subtract')
@@ -628,11 +621,11 @@ class WidePanel(Panel, NDFrame):
 
         Returns
         -------
-        grouped : WidePanelGroupBy
+        grouped : PanelGroupBy
         """
-        from pandas.core.groupby import WidePanelGroupBy
+        from pandas.core.groupby import PanelGroupBy
         axis = self._get_axis_number(axis)
-        return WidePanelGroupBy(self, function, axis=axis)
+        return PanelGroupBy(self, function, axis=axis)
 
     def swapaxes(self, axis1='major', axis2='minor'):
         """
@@ -640,7 +633,7 @@ class WidePanel(Panel, NDFrame):
 
         Returns
         -------
-        y : WidePanel (new object)
+        y : Panel (new object)
         """
         i = self._get_axis_number(axis1)
         j = self._get_axis_number(axis2)
@@ -654,7 +647,7 @@ class WidePanel(Panel, NDFrame):
                     for k in range(3))
         new_values = self.values.swapaxes(i, j).copy()
 
-        return WidePanel(new_values, *new_axes)
+        return Panel(new_values, *new_axes)
 
     def to_long(self, filter_observations=True):
         """
@@ -708,7 +701,7 @@ class WidePanel(Panel, NDFrame):
 
         Returns
         -------
-        y : WidePanel
+        y : Panel
         """
         intersection = self.items.intersection(items)
         return self.reindex(items=intersection)
@@ -727,7 +720,7 @@ class WidePanel(Panel, NDFrame):
 
         Returns
         -------
-        result : DataFrame or WidePanel
+        result : DataFrame or Panel
         """
         i = self._get_axis_number(axis)
         result = np.apply_along_axis(func, i, self.values)
@@ -921,7 +914,7 @@ class WidePanel(Panel, NDFrame):
 
         Returns
         -------
-        shifted : WidePanel
+        shifted : Panel
         """
         values = self.values
         items = self.items
@@ -937,7 +930,7 @@ class WidePanel(Panel, NDFrame):
         else:
             raise ValueError('Invalid axis')
 
-        return WidePanel(values, items=items, major_axis=major_axis,
+        return Panel(values, items=items, major_axis=major_axis,
                          minor_axis=minor_axis)
 
     def truncate(self, before=None, after=None, axis='major'):
@@ -954,7 +947,7 @@ class WidePanel(Panel, NDFrame):
 
         Returns
         -------
-        WidePanel
+        Panel
         """
         axis = self._get_axis_name(axis)
         index = self._get_axis(axis)
@@ -970,6 +963,8 @@ class WidePanel(Panel, NDFrame):
     getMinorXS = deprecate('getMinorXS', minor_xs)
     getMajorXS = deprecate('getMajorXS', major_xs)
 
+WidePanel = Panel
+
 #-------------------------------------------------------------------------------
 # LongPanel and friends
 
@@ -1113,7 +1108,7 @@ class LongPanel(DataFrame):
 
         Returns
         -------
-        WidePanel
+        Panel
         """
         mask = make_mask(self.index)
         if self._data.is_mixed_dtype():
@@ -1130,7 +1125,7 @@ class LongPanel(DataFrame):
         for i in xrange(len(self.items)):
             values[i].flat[mask] = self.values[:, i]
 
-        return WidePanel(values, self.items, self.major_axis, self.minor_axis)
+        return Panel(values, self.items, self.major_axis, self.minor_axis)
 
     def _to_wide_mixed(self, mask):
         _, N, K = self.wide_shape
@@ -1145,7 +1140,7 @@ class LongPanel(DataFrame):
             values.ravel()[mask] = item_vals
             data[item] = DataFrame(values, index=self.major_axis,
                                    columns=self.minor_axis)
-        return WidePanel.from_dict(data)
+        return Panel.from_dict(data)
 
     toWide = deprecate('toWide', to_wide)
 
diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index 681924b22..86c628000 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -16,7 +16,7 @@ from pandas.core.index import Index, MultiIndex, NULL_INDEX
 from pandas.core.series import Series, TimeSeries
 from pandas.core.frame import (DataFrame, extract_index, _prep_ndarray,
                                _default_index)
-from pandas.core.panel import Panel, WidePanel, LongPanel
+from pandas.core.panel import Panel, LongPanel
 import pandas.core.datetools as datetools
 
 from pandas._sparse import BlockIndex, IntIndex
@@ -1278,9 +1278,9 @@ class PanelAxis(object):
 
         setattr(obj, self.cache_field, value)
 
-class SparseWidePanel(WidePanel):
+class SparsePanel(Panel):
     """
-    Sparse version of WidePanel
+    Sparse version of Panel
 
     Parameters
     ----------
@@ -1338,20 +1338,20 @@ class SparseWidePanel(WidePanel):
     @classmethod
     def from_dict(cls, data):
         """
-        Analogous to WidePanel.from_dict
+        Analogous to Panel.from_dict
         """
-        return SparseWidePanel(data)
+        return SparsePanel(data)
 
     def to_dense(self):
         """
-        Convert SparseWidePanel to (dense) WidePanel
+        Convert SparsePanel to (dense) Panel
 
         Returns
         -------
-        dense : WidePanel
+        dense : Panel
         """
-        return WidePanel(self.values, self.items, self.major_axis,
-                         self.minor_axis)
+        return Panel(self.values, self.items, self.major_axis,
+                     self.minor_axis)
 
     @property
     def values(self):
@@ -1407,17 +1407,17 @@ class SparseWidePanel(WidePanel):
 
         Returns
         -------
-        copy : SparseWidePanel
+        copy : SparsePanel
         """
-        return SparseWidePanel(self._frames.copy(), items=self.items,
-                               major_axis=self.major_axis,
-                               minor_axis=self.minor_axis,
-                               default_fill_value=self.default_fill_value,
-                               default_kind=self.default_kind)
+        return SparsePanel(self._frames.copy(), items=self.items,
+                           major_axis=self.major_axis,
+                           minor_axis=self.minor_axis,
+                           default_fill_value=self.default_fill_value,
+                           default_kind=self.default_kind)
 
     def to_long(self, filter_observations=True):
         """
-        Convert SparseWidePanel to (dense) LongPanel
+        Convert SparsePanel to (dense) LongPanel
 
         Returns
         -------
@@ -1425,7 +1425,7 @@ class SparseWidePanel(WidePanel):
         """
         if not filter_observations:
             raise Exception('filter_observations=False not supported for '
-                            'SparseWidePanel.to_long')
+                            'SparsePanel.to_long')
 
         I, N, K = self.shape
         counts = np.zeros(N * K, dtype=int)
@@ -1480,7 +1480,7 @@ class SparseWidePanel(WidePanel):
 
         Returns
         -------
-        reindexed : SparseWidePanel
+        reindexed : SparsePanel
         """
         major = _mut_exclusive(major, major_axis)
         minor = _mut_exclusive(minor, minor_axis)
@@ -1505,11 +1505,11 @@ class SparseWidePanel(WidePanel):
         if copy:
             new_frames = dict((k, v.copy()) for k, v in new_frames.iteritems())
 
-        return SparseWidePanel(new_frames, items=items,
-                               major_axis=major,
-                               minor_axis=minor,
-                               default_fill_value=self.default_fill_value,
-                               default_kind=self.default_kind)
+        return SparsePanel(new_frames, items=items,
+                           major_axis=major,
+                           minor_axis=minor,
+                           default_fill_value=self.default_fill_value,
+                           default_kind=self.default_kind)
 
     def _combine(self, other, func, axis=0):
         if isinstance(other, DataFrame):
@@ -1551,10 +1551,10 @@ class SparseWidePanel(WidePanel):
         return self._new_like(new_frames)
 
     def _new_like(self, new_frames):
-        return SparseWidePanel(new_frames, self.items, self.major_axis,
-                               self.minor_axis,
-                               default_fill_value=self.default_fill_value,
-                               default_kind=self.default_kind)
+        return SparsePanel(new_frames, self.items, self.major_axis,
+                           self.minor_axis,
+                           default_fill_value=self.default_fill_value,
+                           default_kind=self.default_kind)
 
     def _combinePanel(self, other, func):
         # if isinstance(other, LongPanel):
@@ -1576,9 +1576,9 @@ class SparseWidePanel(WidePanel):
         new_default_fill = func(self.default_fill_value,
                                 other.default_fill_value)
 
-        return SparseWidePanel(new_frames, items, major, minor,
-                               default_fill_value=new_default_fill,
-                               default_kind=self.default_kind)
+        return SparsePanel(new_frames, items, major, minor,
+                           default_fill_value=new_default_fill,
+                           default_kind=self.default_kind)
 
     def major_xs(self, key):
         """
@@ -1617,6 +1617,8 @@ class SparseWidePanel(WidePanel):
                                default_fill_value=self.default_fill_value,
                                default_kind=self.default_kind)
 
+SparseWidePanel = SparsePanel
+
 def _convert_frames(frames, index, columns, fill_value=nan, kind='block'):
     from pandas.core.panel import _get_combined_index, _get_combined_columns
     output = {}
diff --git a/pandas/info.py b/pandas/info.py
index 92a5f95b5..736839678 100644
--- a/pandas/info.py
+++ b/pandas/info.py
@@ -7,7 +7,7 @@ docstrings of the various objects in the pandas namespace:
 
 Series
 DataFrame
-WidePanel
+Panel
 Index
 DateRange
 HDFStore
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 7d0b021c0..fd001df86 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -9,7 +9,7 @@ from datetime import datetime
 import time
 
 import numpy as np
-from pandas import (Series, TimeSeries, DataFrame, WidePanel, LongPanel,
+from pandas import (Series, TimeSeries, DataFrame, Panel, LongPanel,
                     MultiIndex)
 from pandas.core.common import adjoin
 import pandas._tseries as _tseries
@@ -19,7 +19,7 @@ _TYPE_MAP = {
     Series     : 'series',
     TimeSeries : 'series',
     DataFrame  : 'frame',
-    WidePanel  : 'wide',
+    Panel  : 'wide',
     LongPanel  : 'long'
 }
 
@@ -28,8 +28,8 @@ _NAME_MAP = {
     'time_series' : 'TimeSeries',
     'frame' : 'DataFrame',
     'frame_table' : 'DataFrame (Table)',
-    'wide' : 'WidePanel',
-    'wide_table' : 'WidePanel (Table)',
+    'wide' : 'Panel',
+    'wide_table' : 'Panel (Table)',
     'long' : 'LongPanel',
 
     # legacy h5 files
@@ -61,7 +61,7 @@ class HDFStore(object):
     dict-like IO interface for storing pandas objects in PyTables
     format.
 
-    DataFrame and WidePanel can be stored in Table format, which is slower to
+    DataFrame and Panel can be stored in Table format, which is slower to
     read and write but can be searched and manipulated more like an SQL
     table. See HDFStore.put for more information
 
@@ -241,7 +241,7 @@ class HDFStore(object):
         Parameters
         ----------
         key : object
-        value : {Series, DataFrame, WidePanel, LongPanel}
+        value : {Series, DataFrame, Panel, LongPanel}
         table : boolean, default False
             Write as a PyTables Table structure which may perform worse but
             allow more flexible operations like searching / selecting subsets of
@@ -290,7 +290,7 @@ class HDFStore(object):
         Parameters
         ----------
         key : object
-        value : {Series, DataFrame, WidePanel, LongPanel}
+        value : {Series, DataFrame, Panel, LongPanel}
 
         Notes
         -----
@@ -389,7 +389,7 @@ class HDFStore(object):
         self._write_block_manager(group, panel._data)
 
     def _read_wide(self, group, where=None):
-        return WidePanel(self._read_block_manager(group))
+        return Panel(self._read_block_manager(group))
 
     def _write_wide_table(self, group, panel, append=False, comp=None):
         self._write_table(group, items=panel.items, index=panel.major_axis,
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index a4ac40446..b1fee1762 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -5,7 +5,7 @@ import sys
 
 import numpy as np
 
-from pandas import (Series, DataFrame, WidePanel, LongPanel, DateRange)
+from pandas import (Series, DataFrame, Panel, LongPanel, DateRange)
 from pandas.io.pytables import HDFStore
 import pandas.util.testing as tm
 
@@ -29,7 +29,7 @@ class TesttHDFStore(unittest.TestCase):
         self.store['a'] = tm.makeTimeSeries()
         self.store['b'] = tm.makeStringSeries()
         self.store['c'] = tm.makeDataFrame()
-        self.store['d'] = tm.makeWidePanel()
+        self.store['d'] = tm.makePanel()
         self.assertEquals(len(self.store), 4)
 
     def test_repr(self):
@@ -37,7 +37,7 @@ class TesttHDFStore(unittest.TestCase):
         self.store['a'] = tm.makeTimeSeries()
         self.store['b'] = tm.makeStringSeries()
         self.store['c'] = tm.makeDataFrame()
-        self.store['d'] = tm.makeWidePanel()
+        self.store['d'] = tm.makePanel()
         repr(self.store)
 
     def test_reopen_handle(self):
@@ -115,7 +115,7 @@ class TesttHDFStore(unittest.TestCase):
         self.assertEquals(len(self.store), 0)
 
     def test_remove_crit(self):
-        wp = tm.makeWidePanel()
+        wp = tm.makePanel()
         self.store.put('wp', wp, table=True)
         date = wp.major_axis[len(wp.major_axis) // 2]
 
@@ -217,11 +217,11 @@ class TesttHDFStore(unittest.TestCase):
                               compression=True)
 
     def test_wide(self):
-        wp = tm.makeWidePanel()
+        wp = tm.makePanel()
         self._check_roundtrip(wp, tm.assert_panel_equal)
 
     def test_wide_table(self):
-        wp = tm.makeWidePanel()
+        wp = tm.makePanel()
         self._check_roundtrip_table(wp, tm.assert_panel_equal)
 
     def test_long(self):
@@ -229,7 +229,7 @@ class TesttHDFStore(unittest.TestCase):
             tm.assert_panel_equal(left.to_wide(),
                                   right.to_wide())
 
-        wp = tm.makeWidePanel()
+        wp = tm.makePanel()
         self._check_roundtrip(wp.to_long(), _check)
 
     def test_longpanel(self):
@@ -243,7 +243,7 @@ class TesttHDFStore(unittest.TestCase):
         tm.assert_series_equal(self.store['a'], ts)
 
     def test_panel_select(self):
-        wp = tm.makeWidePanel()
+        wp = tm.makePanel()
         self.store.put('wp', wp, table=True)
         date = wp.major_axis[len(wp.major_axis) // 2]
 
@@ -351,7 +351,7 @@ def curpath():
 def _test_sort(obj):
     if isinstance(obj, DataFrame):
         return obj.reindex(sorted(obj.index))
-    elif isinstance(obj, WidePanel):
+    elif isinstance(obj, Panel):
         return obj.reindex(major=sorted(obj.major_axis))
     else:
         raise ValueError('type not supported here')
diff --git a/pandas/rpy/common.py b/pandas/rpy/common.py
index 2e2bd3213..534d8f58c 100644
--- a/pandas/rpy/common.py
+++ b/pandas/rpy/common.py
@@ -63,9 +63,9 @@ def _convert_array(obj):
         if len(dim) == 2:
             return pn.DataFrame(arr, index=name_list[0], columns=name_list[1])
         elif len(dim) == 3:
-            return pn.WidePanel(arr, items=name_list[2],
-                                major_axis=name_list[0],
-                                minor_axis=name_list[1])
+            return pn.Panel(arr, items=name_list[2],
+                            major_axis=name_list[0],
+                            minor_axis=name_list[1])
         else:
             print 'Cannot handle dim=%d' % len(dim)
     else:
diff --git a/pandas/stats/interface.py b/pandas/stats/interface.py
index 796d8b967..b3cc9eb41 100644
--- a/pandas/stats/interface.py
+++ b/pandas/stats/interface.py
@@ -1,4 +1,4 @@
-from pandas.core.api import (Series, DataFrame, WidePanel, LongPanel,
+from pandas.core.api import (Series, DataFrame, Panel, LongPanel,
                              MultiIndex)
 
 from pandas.stats.ols import OLS, MovingOLS
@@ -15,14 +15,14 @@ def ols(**kwargs):
     y : Series, x : DataFrame -> OLS
     y : Series, x : dict of DataFrame -> OLS
     y : DataFrame, x : DataFrame -> PanelOLS
-    y : DataFrame, x : dict of DataFrame/WidePanel/LongPanel -> PanelOLS
-    y : Series with MultiIndex, x : WidePanel/LongPanel -> PanelOLS
+    y : DataFrame, x : dict of DataFrame/Panel/LongPanel -> PanelOLS
+    y : Series with MultiIndex, x : Panel/LongPanel -> PanelOLS
 
     Parameters
     ----------
     y: Series or DataFrame
         See above for types
-    x: Series, DataFrame, dict of Series, dict of DataFrame, WidePanel, or
+    x: Series, DataFrame, dict of Series, dict of DataFrame, Panel, or
         LongPanel
     intercept: bool
         True if you want an intercept.  Defaults to True.
@@ -109,7 +109,7 @@ def ols(**kwargs):
     if isinstance(y, DataFrame) or (isinstance(y, Series) and
                                     isinstance(y.index, MultiIndex)):
         panel = True
-    if isinstance(x, (WidePanel, LongPanel)):
+    if isinstance(x, (Panel, LongPanel)):
         panel = True
 
     if window_type == common.FULL_SAMPLE:
diff --git a/pandas/stats/ols.py b/pandas/stats/ols.py
index ff231689f..0237f7e4a 100644
--- a/pandas/stats/ols.py
+++ b/pandas/stats/ols.py
@@ -11,7 +11,7 @@ import numpy as np
 
 from pandas.core.api import DataFrame, Series
 from pandas.core.index import MultiIndex
-from pandas.core.panel import WidePanel, LongPanel
+from pandas.core.panel import Panel, LongPanel
 from pandas.util.decorators import cache_readonly
 import pandas.stats.common as common
 import pandas.stats.math as math
@@ -638,7 +638,7 @@ class MovingOLS(OLS):
                            index=self.beta.columns)
             result[result_index[i]] = dm
 
-        return WidePanel.fromDict(result, intersect=False)
+        return Panel.from_dict(result, intersect=False)
 
     @cache_readonly
     def y_fitted(self):
diff --git a/pandas/stats/plm.py b/pandas/stats/plm.py
index b4132051e..7549f7ea3 100644
--- a/pandas/stats/plm.py
+++ b/pandas/stats/plm.py
@@ -10,10 +10,10 @@ import warnings
 
 import numpy as np
 
-from pandas.core.panel import WidePanel, LongPanel
+from pandas.core.panel import Panel, LongPanel
 from pandas.core.frame import DataFrame
 from pandas.core.series import Series
-from pandas.core.sparse import SparseWidePanel
+from pandas.core.sparse import SparsePanel
 from pandas.stats.ols import OLS, MovingOLS
 import pandas.stats.common as common
 import pandas.stats.math as math
@@ -25,7 +25,7 @@ class PanelOLS(OLS):
     Parameters
     ----------
     y : DataFrame
-    x : Dict of DataFrame or WidePanel
+    x : Dict of DataFrame or Panel
     intercept : bool
         True if you want an intercept.  True by default.
     nw_lags : None or int
@@ -159,14 +159,14 @@ class PanelOLS(OLS):
         if isinstance(data, LongPanel):
             data = data.to_wide()
         else:
-            if isinstance(data, WidePanel):
+            if isinstance(data, Panel):
                 data = data.copy()
 
-            if not isinstance(data, SparseWidePanel):
+            if not isinstance(data, SparsePanel):
                 data, cat_mapping = self._convert_x(data)
 
-            if not isinstance(data, WidePanel):
-                data = WidePanel.from_dict(data, intersect=True)
+            if not isinstance(data, Panel):
+                data = Panel.from_dict(data, intersect=True)
 
         x_names = data.items
 
diff --git a/pandas/stats/tests/test_ols.py b/pandas/stats/tests/test_ols.py
index 062bfe75a..52275bcea 100644
--- a/pandas/stats/tests/test_ols.py
+++ b/pandas/stats/tests/test_ols.py
@@ -10,7 +10,7 @@ from datetime import datetime
 import unittest
 import numpy as np
 
-from pandas.core.panel import LongPanel, WidePanel
+from pandas.core.panel import LongPanel, Panel
 from pandas.core.api import DataFrame, Index, Series, notnull
 from pandas.stats.api import ols
 from pandas.stats.plm import NonPooledPanelOLS, PanelOLS
@@ -222,7 +222,7 @@ class TestOLSMisc(unittest.TestCase):
         assert_almost_equal(model1._y_predict_raw, model1._y_fitted_raw)
 
     def test_longpanel_series_combo(self):
-        wp = tm.makeWidePanel()
+        wp = tm.makePanel()
         lp = wp.to_long()
 
         y = lp.pop('ItemA')
@@ -270,7 +270,7 @@ class TestOLSMisc(unittest.TestCase):
         model = ols(y=y, x=x, intercept=False)
         model.summary
 
-        model = ols(y=y, x=WidePanel(x))
+        model = ols(y=y, x=Panel(x))
         model.summary
 
     def test_plm_attrs(self):
diff --git a/pandas/stats/var.py b/pandas/stats/var.py
index 918a26ce3..cc3b70862 100644
--- a/pandas/stats/var.py
+++ b/pandas/stats/var.py
@@ -4,7 +4,7 @@ import numpy as np
 
 from pandas.util.decorators import cache_readonly
 from pandas.core.frame import DataFrame
-from pandas.core.panel import WidePanel
+from pandas.core.panel import Panel
 from pandas.core.series import Series
 import pandas.stats.common as common
 from pandas.stats.math import chain_dot, inv
@@ -499,7 +499,7 @@ class PanelVAR(VAR):
 
     Parameters
     ----------
-    data: WidePanel or dict of DataFrame
+    data: Panel or dict of DataFrame
     lags: int
     """
     def __init__(self, data, lags, intercept=True):
@@ -526,8 +526,8 @@ class PanelVAR(VAR):
         """
         forecast = self._forecast_raw(h).T.swapaxes(1, 2)
         index = xrange(1, 1 + h)
-        w = WidePanel(
-            forecast, self._data.items, index, self._data.minor_axis)
+        w = Panel(forecast, items=self._data.items, major_axis=index,
+                  minor_axis=self._data.minor_axis)
         return w
 
     @cache_readonly
@@ -543,7 +543,7 @@ class PanelVAR(VAR):
         """
         d = dict([(key, value.resid)
                   for (key, value) in self.ols_results.iteritems()])
-        return WidePanel.fromDict(d)
+        return Panel.fromDict(d)
 
     def _data_xs(self, i):
         return self._data.values[:, i, :].T
@@ -558,11 +558,11 @@ class PanelVAR(VAR):
 
 
 def _prep_panel_data(data):
-    """Converts the given data into a WidePanel."""
-    if isinstance(data, WidePanel):
+    """Converts the given data into a Panel."""
+    if isinstance(data, Panel):
         return data
 
-    return WidePanel.fromDict(data)
+    return Panel.fromDict(data)
 
 def _drop_incomplete_rows(array):
     mask = np.isfinite(array).all(1)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index b75a2f26c..5e8075985 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1718,7 +1718,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         assert_frame_equal(pivoted, expected)
 
         # pivot multiple columns
-        wp = tm.makeWidePanel()
+        wp = tm.makePanel()
         lp = wp.to_long()
         df = DataFrame.from_records(lp.toRecords())
         assert_frame_equal(df.pivot('major', 'minor'), lp.unstack())
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 7aa40dbc8..293869e97 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -11,7 +11,7 @@ from pandas.core.frame import DataFrame
 from pandas.core.series import Series
 from pandas.util.testing import (assert_panel_equal, assert_frame_equal,
                                  assert_series_equal, assert_almost_equal)
-from pandas.core.panel import WidePanel
+from pandas.core.panel import Panel
 from collections import defaultdict
 import pandas.core.datetools as dt
 import numpy as np
@@ -110,7 +110,7 @@ class TestGroupBy(unittest.TestCase):
         assert_frame_equal(result, expected)
 
     def test_get_group(self):
-        wp = tm.makeWidePanel()
+        wp = tm.makePanel()
         grouped = wp.groupby(lambda x: x.month, axis='major')
 
         gp = grouped.get_group(1)
@@ -445,7 +445,7 @@ class TestGroupBy(unittest.TestCase):
         self.assertEquals(len(groups), 2)
 
     def test_multi_iter_panel(self):
-        wp = tm.makeWidePanel()
+        wp = tm.makePanel()
         grouped = wp.groupby([lambda x: x.month, lambda x: x.weekday()],
                              axis=1)
 
@@ -488,7 +488,7 @@ class TestGroupBy(unittest.TestCase):
                 for n2, gp2 in gp1.groupby('B'):
                     expected[n1][n2] = op(gp2.ix[:, ['C', 'D']])
             expected = dict((k, DataFrame(v)) for k, v in expected.iteritems())
-            expected = WidePanel.fromDict(expected).swapaxes(0, 1)
+            expected = Panel.fromDict(expected).swapaxes(0, 1)
 
             # a little bit crude
             for col in ['C', 'D']:
@@ -742,7 +742,7 @@ class TestGroupBy(unittest.TestCase):
 class TestPanelGroupBy(unittest.TestCase):
 
     def setUp(self):
-        self.panel = tm.makeWidePanel()
+        self.panel = tm.makePanel()
         tm.add_nans(self.panel)
 
     def test_groupby(self):
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index e90f3e431..3b6156f0f 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -11,7 +11,7 @@ import numpy as np
 from pandas.core.api import DataFrame, Index, notnull, pivot
 from pandas.core.datetools import bday
 from pandas.core.frame import group_agg
-from pandas.core.panel import WidePanel, LongPanel
+from pandas.core.panel import Panel, LongPanel
 import pandas.core.panel as panelmod
 
 from pandas.util.testing import (assert_panel_equal,
@@ -312,7 +312,7 @@ class SafeForSparse(object):
         result = p.select(lambda x: x in ('foo',), axis='items')
         self.assert_panel_equal(result, p.reindex(items=[]))
 
-class TestWidePanel(unittest.TestCase, PanelTests,
+class TestPanel(unittest.TestCase, PanelTests,
                     SafeForLongAndSparse,
                     SafeForSparse):
 
@@ -321,36 +321,36 @@ class TestWidePanel(unittest.TestCase, PanelTests,
         assert_panel_equal(x, y)
 
     def setUp(self):
-        self.panel = common.makeWidePanel()
+        self.panel = common.makePanel()
         common.add_nans(self.panel)
 
     def test_constructor(self):
         # with BlockManager
-        wp = WidePanel(self.panel._data)
+        wp = Panel(self.panel._data)
         self.assert_(wp._data is self.panel._data)
 
-        wp = WidePanel(self.panel._data, copy=True)
+        wp = Panel(self.panel._data, copy=True)
         self.assert_(wp._data is not self.panel._data)
         assert_panel_equal(wp, self.panel)
 
         # strings handled prop
-        wp = WidePanel([[['foo', 'foo', 'foo',],
+        wp = Panel([[['foo', 'foo', 'foo',],
                          ['foo', 'foo', 'foo']]])
         self.assert_(wp.values.dtype == np.object_)
 
         vals = self.panel.values
 
         # no copy
-        wp = WidePanel(vals)
+        wp = Panel(vals)
         self.assert_(wp.values is vals)
 
         # copy
-        wp = WidePanel(vals, copy=True)
+        wp = Panel(vals, copy=True)
         self.assert_(wp.values is not vals)
 
     def test_constructor_cast(self):
-        casted = WidePanel(self.panel._data, dtype=int)
-        casted2 = WidePanel(self.panel.values, dtype=int)
+        casted = Panel(self.panel._data, dtype=int)
+        casted2 = Panel(self.panel.values, dtype=int)
 
         exp_values = self.panel.values.astype(int)
         assert_almost_equal(casted.values, exp_values)
@@ -358,7 +358,7 @@ class TestWidePanel(unittest.TestCase, PanelTests,
 
         # can't cast
         data = [[['foo', 'bar', 'baz']]]
-        self.assertRaises(ValueError, WidePanel, data, dtype=float)
+        self.assertRaises(ValueError, Panel, data, dtype=float)
 
     def test_consolidate(self):
         self.assert_(self.panel._data.is_consolidated())
@@ -378,30 +378,30 @@ class TestWidePanel(unittest.TestCase, PanelTests,
         d3 = {'A' : DataFrame(itema._series),
               'B' : DataFrame(itemb[5:]._series)}
 
-        wp = WidePanel.from_dict(d)
-        wp2 = WidePanel.from_dict(d2) # nested Dict
-        wp3 = WidePanel.from_dict(d3)
+        wp = Panel.from_dict(d)
+        wp2 = Panel.from_dict(d2) # nested Dict
+        wp3 = Panel.from_dict(d3)
         self.assert_(wp.major_axis.equals(self.panel.major_axis))
         assert_panel_equal(wp, wp2)
 
         # intersect
-        wp = WidePanel.from_dict(d, intersect=True)
+        wp = Panel.from_dict(d, intersect=True)
         self.assert_(wp.major_axis.equals(itemb.index[5:]))
 
         # use constructor
-        assert_panel_equal(WidePanel(d), WidePanel.from_dict(d))
-        assert_panel_equal(WidePanel(d2), WidePanel.from_dict(d2))
-        assert_panel_equal(WidePanel(d3), WidePanel.from_dict(d3))
+        assert_panel_equal(Panel(d), Panel.from_dict(d))
+        assert_panel_equal(Panel(d2), Panel.from_dict(d2))
+        assert_panel_equal(Panel(d3), Panel.from_dict(d3))
 
         # cast
-        result = WidePanel(d, dtype=int)
-        expected = WidePanel(dict((k, v.astype(int)) for k, v in d.iteritems()))
+        result = Panel(d, dtype=int)
+        expected = Panel(dict((k, v.astype(int)) for k, v in d.iteritems()))
 
     def test_from_dict_mixed(self):
         pass
 
     def test_values(self):
-        self.assertRaises(Exception, WidePanel, np.random.randn(5, 5, 5),
+        self.assertRaises(Exception, Panel, np.random.randn(5, 5, 5),
                           range(5), range(5), range(4))
 
     def test_getitem(self):
@@ -422,7 +422,7 @@ class TestWidePanel(unittest.TestCase, PanelTests,
         values[1] = 1
         values[2] = 2
 
-        panel = WidePanel(values, range(3), range(3), range(3))
+        panel = Panel(values, range(3), range(3), range(3))
 
         # did we delete the right row?
 
@@ -686,7 +686,7 @@ class TestWidePanel(unittest.TestCase, PanelTests,
 class TestLongPanel(unittest.TestCase):
 
     def setUp(self):
-        panel = common.makeWidePanel()
+        panel = common.makePanel()
         common.add_nans(panel)
 
         self.panel = panel.to_long()
@@ -921,7 +921,7 @@ class TestLongPanel(unittest.TestCase):
     def test_mean(self):
         means = self.panel.mean('major')
 
-        # test versus WidePanel version
+        # test versus Panel version
         wide_means = self.panel.to_wide().mean('major')
         assert_frame_equal(means, wide_means)
 
@@ -933,7 +933,7 @@ class TestLongPanel(unittest.TestCase):
     def test_sum(self):
         sums = self.panel.sum('major')
 
-        # test versus WidePanel version
+        # test versus Panel version
         wide_sums = self.panel.to_wide().sum('major')
         assert_frame_equal(sums, wide_sums)
 
diff --git a/pandas/tests/test_sparse.py b/pandas/tests/test_sparse.py
index fc26002fe..338be7aab 100644
--- a/pandas/tests/test_sparse.py
+++ b/pandas/tests/test_sparse.py
@@ -14,9 +14,8 @@ from pandas.util.testing import (assert_almost_equal, assert_series_equal,
                                  assert_frame_equal, assert_panel_equal)
 from numpy.testing import assert_equal
 
-from pandas import Series, DataFrame, DateRange, WidePanel
+from pandas import Series, DataFrame, DateRange, Panel
 from pandas.core.datetools import BDay
-from pandas.core.series import remove_na
 import pandas.core.datetools as datetools
 import pandas.util.testing as testing
 
@@ -24,16 +23,11 @@ import pandas.core.sparse as spm
 reload(spm)
 from pandas.core.sparse import (IntIndex, BlockIndex,
                                 SparseSeries, SparseDataFrame,
-                                SparseWidePanel)
+                                SparsePanel)
 
 import test_panel
 
 
-"""
-Testing TODO
-
-
-"""
 def _test_data1():
     # nan-based
     arr = np.arange(20, dtype=float)
@@ -520,12 +514,6 @@ class TestSparseSeries(TestCase):
         self.assert_(sp_valid.index.equals(sp.to_dense().valid().index))
         self.assertEquals(len(sp_valid.sp_values), 2)
 
-    def _check_all(self, check_func):
-        check_func(self.bseries)
-        check_func(self.iseries)
-        check_func(self.zbseries)
-        check_func(self.ziseries)
-
     def test_homogenize(self):
         def _check_matches(indices, expected):
             data = {}
@@ -1032,9 +1020,6 @@ class TestSparseDataFrame(TestCase):
         reindexed['G'] = reindexed['A']
         self.assert_('G' not in self.frame)
 
-    def test_fillna(self):
-        pass
-
     def test_density(self):
         df = SparseDataFrame({'A' : [nan, nan, nan, 0, 1, 2, 3, 4, 5, 6],
                               'B' : [0, 1, 2, nan, nan, nan, 3, 4, 5, 6],
@@ -1054,7 +1039,7 @@ class TestSparseDataFrame(TestCase):
         def _check(frame):
             dense_frame = frame.to_dense()
 
-            wp = WidePanel.from_dict({'foo' : frame})
+            wp = Panel.from_dict({'foo' : frame})
             from_dense_lp = wp.to_long()
 
             from_sparse_lp = spm.stack_sparse_frame(frame)
@@ -1162,7 +1147,7 @@ def panel_data3():
         'D' : [nan, 0, 1, nan, 2, 3, 4, 5, 6, nan]
         }, index=index)
 
-class TestSparseWidePanel(TestCase,
+class TestSparsePanel(TestCase,
                           test_panel.SafeForLongAndSparse,
                           test_panel.SafeForSparse):
 
@@ -1177,7 +1162,7 @@ class TestSparseWidePanel(TestCase,
             'ItemC' : panel_data3(),
             'ItemD' : panel_data1(),
         }
-        self.panel = SparseWidePanel(self.data_dict)
+        self.panel = SparsePanel(self.data_dict)
 
     @staticmethod
     def _test_op(panel, op):
@@ -1186,11 +1171,11 @@ class TestSparseWidePanel(TestCase,
         assert_sp_frame_equal(result['ItemA'], op(panel['ItemA'], 1))
 
     def test_constructor(self):
-        self.assertRaises(Exception, SparseWidePanel, self.data_dict,
+        self.assertRaises(Exception, SparsePanel, self.data_dict,
                           items=['Item0', 'ItemA', 'ItemB'])
 
     def test_from_dict(self):
-        fd = SparseWidePanel.from_dict(self.data_dict)
+        fd = SparsePanel.from_dict(self.data_dict)
         assert_sp_panel_equal(fd, self.panel)
 
     def test_pickle(self):
@@ -1202,13 +1187,13 @@ class TestSparseWidePanel(TestCase,
         _test_roundtrip(self.panel)
 
     def test_dense_to_sparse(self):
-        wp = WidePanel.from_dict(self.data_dict)
+        wp = Panel.from_dict(self.data_dict)
         dwp = wp.to_sparse()
         self.assert_(isinstance(dwp['ItemA']['A'], SparseSeries))
 
     def test_to_dense(self):
         dwp = self.panel.to_dense()
-        dwp2 = WidePanel.from_dict(self.data_dict)
+        dwp2 = Panel.from_dict(self.data_dict)
         assert_panel_equal(dwp, dwp2)
 
     def test_to_long(self):
@@ -1225,7 +1210,7 @@ class TestSparseWidePanel(TestCase,
         _compare_with_dense(self.panel)
         _compare_with_dense(self.panel.reindex(items=['ItemA']))
 
-        zero_panel = SparseWidePanel(self.data_dict, default_fill_value=0)
+        zero_panel = SparsePanel(self.data_dict, default_fill_value=0)
         self.assertRaises(Exception, zero_panel.to_long)
 
         self.assertRaises(Exception, self.panel.to_long,
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index b34504849..f5efce0a5 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -23,7 +23,7 @@ DateRange = daterange.DateRange
 Index = index.Index
 Series = series.Series
 DataFrame = frame.DataFrame
-WidePanel = panel.WidePanel
+Panel = panel.Panel
 
 N = 30
 K = 4
@@ -197,10 +197,10 @@ def makeTimeDataFrame():
     data = getTimeSeriesData()
     return DataFrame(data)
 
-def makeWidePanel():
+def makePanel():
     cols = ['Item' + c for c in string.ascii_uppercase[:K - 1]]
     data = dict((c, makeTimeDataFrame()) for c in cols)
-    return WidePanel.fromDict(data)
+    return Panel.fromDict(data)
 
 def add_nans(panel):
     I, J, N = panel.shape
@@ -210,8 +210,8 @@ def add_nans(panel):
             dm[col][:i + j] = np.NaN
 
 def makeLongPanel():
-    wp = makeWidePanel()
+    wp = makePanel()
     add_nans(wp)
 
-    return wp.toLong()
+    return wp.to_long()
 
