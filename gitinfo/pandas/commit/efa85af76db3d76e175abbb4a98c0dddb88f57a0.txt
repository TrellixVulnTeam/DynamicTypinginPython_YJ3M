commit efa85af76db3d76e175abbb4a98c0dddb88f57a0
Author: Joris Van den Bossche <jorisvandenbossche@gmail.com>
Date:   Fri Apr 10 19:35:08 2020 +0200

    PERF: improve IntegerArray fast constructor (#33359)

diff --git a/asv_bench/benchmarks/array.py b/asv_bench/benchmarks/array.py
index 8cbf8c859..103df0fd9 100644
--- a/asv_bench/benchmarks/array.py
+++ b/asv_bench/benchmarks/array.py
@@ -9,6 +9,11 @@ class BooleanArray:
         self.values_float = np.array([1.0, 0.0, 1.0, 0.0])
         self.values_integer = np.array([1, 0, 1, 0])
         self.values_integer_like = [1, 0, 1, 0]
+        self.data = np.array([True, False, True, False])
+        self.mask = np.array([False, False, True, False])
+
+    def time_constructor(self):
+        pd.arrays.BooleanArray(self.data, self.mask)
 
     def time_from_bool_array(self):
         pd.array(self.values_bool, dtype="boolean")
@@ -21,3 +26,16 @@ class BooleanArray:
 
     def time_from_float_array(self):
         pd.array(self.values_float, dtype="boolean")
+
+
+class IntegerArray:
+    def setup(self):
+        self.values_integer = np.array([1, 0, 1, 0])
+        self.data = np.array([1, 2, 3, 4], dtype="int64")
+        self.mask = np.array([False, False, True, False])
+
+    def time_constructor(self):
+        pd.arrays.IntegerArray(self.data, self.mask)
+
+    def time_from_integer_array(self):
+        pd.array(self.values_integer, dtype="Int64")
diff --git a/pandas/core/arrays/boolean.py b/pandas/core/arrays/boolean.py
index 7ffbd0d59..40c838cbb 100644
--- a/pandas/core/arrays/boolean.py
+++ b/pandas/core/arrays/boolean.py
@@ -271,18 +271,8 @@ class BooleanArray(BaseMaskedArray):
         if not (isinstance(values, np.ndarray) and values.dtype == np.bool_):
             raise TypeError(
                 "values should be boolean numpy array. Use "
-                "the 'array' function instead"
+                "the 'pd.array' function instead"
             )
-        if not (isinstance(mask, np.ndarray) and mask.dtype == np.bool_):
-            raise TypeError(
-                "mask should be boolean numpy array. Use "
-                "the 'array' function instead"
-            )
-        if not values.ndim == 1:
-            raise ValueError("values must be a 1D array")
-        if not mask.ndim == 1:
-            raise ValueError("mask must be a 1D array")
-
         self._dtype = BooleanDtype()
         super().__init__(values, mask, copy=copy)
 
diff --git a/pandas/core/arrays/integer.py b/pandas/core/arrays/integer.py
index d47a396bb..5d6f49852 100644
--- a/pandas/core/arrays/integer.py
+++ b/pandas/core/arrays/integer.py
@@ -343,15 +343,10 @@ class IntegerArray(BaseMaskedArray):
         return _dtypes[str(self._data.dtype)]
 
     def __init__(self, values: np.ndarray, mask: np.ndarray, copy: bool = False):
-        if not (isinstance(values, np.ndarray) and is_integer_dtype(values.dtype)):
+        if not (isinstance(values, np.ndarray) and values.dtype.kind in ["i", "u"]):
             raise TypeError(
                 "values should be integer numpy array. Use "
-                "the 'integer_array' function instead"
-            )
-        if not (isinstance(mask, np.ndarray) and is_bool_dtype(mask.dtype)):
-            raise TypeError(
-                "mask should be boolean numpy array. Use "
-                "the 'integer_array' function instead"
+                "the 'pd.array' function instead"
             )
         super().__init__(values, mask, copy=copy)
 
diff --git a/pandas/core/arrays/masked.py b/pandas/core/arrays/masked.py
index d23d26d87..fc5b307bd 100644
--- a/pandas/core/arrays/masked.py
+++ b/pandas/core/arrays/masked.py
@@ -30,6 +30,17 @@ class BaseMaskedArray(ExtensionArray, ExtensionOpsMixin):
     _internal_fill_value: Scalar
 
     def __init__(self, values: np.ndarray, mask: np.ndarray, copy: bool = False):
+        # values is supposed to already be validated in the subclass
+        if not (isinstance(mask, np.ndarray) and mask.dtype == np.bool_):
+            raise TypeError(
+                "mask should be boolean numpy array. Use "
+                "the 'pd.array' function instead"
+            )
+        if not values.ndim == 1:
+            raise ValueError("values must be a 1D array")
+        if not mask.ndim == 1:
+            raise ValueError("mask must be a 1D array")
+
         if copy:
             values = values.copy()
             mask = mask.copy()
diff --git a/pandas/tests/arrays/integer/test_construction.py b/pandas/tests/arrays/integer/test_construction.py
index 4a62a35e2..43936d8b9 100644
--- a/pandas/tests/arrays/integer/test_construction.py
+++ b/pandas/tests/arrays/integer/test_construction.py
@@ -70,7 +70,7 @@ def test_integer_array_constructor():
     expected = integer_array([1, 2, 3, np.nan], dtype="int64")
     tm.assert_extension_array_equal(result, expected)
 
-    msg = r".* should be .* numpy array. Use the 'integer_array' function instead"
+    msg = r".* should be .* numpy array. Use the 'pd.array' function instead"
     with pytest.raises(TypeError, match=msg):
         IntegerArray(values.tolist(), mask)
 
