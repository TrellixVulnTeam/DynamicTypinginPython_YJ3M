commit 3d47ea6bdc2aa31b6716a9bee31f9bdf0ec22bba
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Aug 11 15:03:06 2011 -0400

    ENH: implemented DataFrame._count_level to replace LongPanel.count

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 937e2ea2f..b09cb80e0 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1085,18 +1085,20 @@ class DataFrame(NDFrame):
 
         new_axis, indexer = the_axis.sortlevel(level, ascending=ascending)
 
-        # new_values = self.values.take(indexer, axis=axis)
+        if self._data.is_mixed_dtype():
+            if axis == 0:
+                return self.reindex(index=new_axis)
+            else:
+                return self.reindex(columns=new_axis)
 
         if axis == 0:
-            return self.reindex(index=new_axis)
-            # index = new_axis
-            # columns = self.columns
+            index = new_axis
+            columns = self.columns
         else:
-            return self.reindex(columns=new_axis)
-            # index = self.index
-            # columns = new_axis
-
-        # return self._constructor(new_values, index=index, columns=columns)
+            index = self.index
+            columns = new_axis
+        new_values = self.values.take(indexer, axis=axis)
+        return self._constructor(new_values, index=index, columns=columns)
 
     #----------------------------------------------------------------------
     # Filling NA's
@@ -2047,7 +2049,7 @@ class DataFrame(NDFrame):
     #----------------------------------------------------------------------
     # ndarray-like stats methods
 
-    def count(self, axis=0, numeric_only=False):
+    def count(self, axis=0, level=None, numeric_only=False):
         """
         Return array or Series of # observations over requested axis.
 
@@ -2066,15 +2068,62 @@ class DataFrame(NDFrame):
         -------
         Series or TimeSeries
         """
+        if level is not None:
+            return self._count_level(level, axis=axis,
+                                     numeric_only=numeric_only)
+
         try:
             y, axis_labels = self._get_agg_data(axis, numeric_only=numeric_only)
-            mask = np.empty(y.shape, dtype=bool)
-            mask.flat = notnull(y.ravel())
+            mask = notnull(y)
             return Series(mask.sum(axis), index=axis_labels)
         except Exception:
             f = lambda s: notnull(s).sum()
             return self.apply(f, axis=axis)
 
+    def _count_level(self, level, axis=0, numeric_only=False):
+        # TODO: deal with sortedness??
+        obj = self.sortlevel(level, axis=axis)
+
+        axis_index = obj._get_axis(axis)
+        if not isinstance(axis_index, MultiIndex):
+            raise TypeError('can only pass level with multi-level index')
+
+        y, _ = self._get_agg_data(axis, numeric_only=numeric_only)
+        mask = notnull(y)
+
+        level_index = axis_index.levels[level]
+
+        n = len(level_index)
+        locs = axis_index.labels[level].searchsorted(np.arange(n))
+
+        start = locs.searchsorted(0, side='right') - 1
+        end = locs.searchsorted(len(mask), side='left')
+
+        # WORKAROUND: reduceat fusses about the endpoints. should file ticket?
+        # WORKAROUND: to see why, try this
+        # arr = np.ones((10, 4), dtype=bool)
+        # np.add.reduceat(arr, [0, 3, 3, 7, 9], axis=0)
+
+        # this stinks
+        workaround_mask = locs[:-1] == locs[1:]
+
+        if axis == 0:
+            index = level_index
+            columns = self.columns
+            result = np.zeros((n, len(self.columns)), dtype=int)
+            out = result[start:end]
+            np.add.reduceat(mask, locs[start:end], axis=axis, out=out)
+            result[:-1][workaround_mask] = 0
+        else:
+            index = self.index
+            columns = level_index
+            result = np.zeros((len(self.index), n), dtype=int)
+            out = result[:, start:end]
+            np.add.reduceat(mask, locs[start:end], axis=axis, out=out)
+            result[:, :-1][:, workaround_mask] = 0
+
+        return DataFrame(result, index=index, columns=columns)
+
     def sum(self, axis=0, numeric_only=False):
         """
         Return array or Series of sums over requested axis.
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 246f3c291..0f0c662d3 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -1354,33 +1354,6 @@ class LongPanel(Panel, DataFrame):
             return LongPanel(new_values, columns=self.items,
                              index=self.index)
 
-    def count(self, axis='major'):
-        """
-        Compute observation counts within each group
-
-        Parameters
-        ----------
-        axis : {'major', 'minor'}
-            major: compute minor_axis obs for each major axis value
-            minor: same but for each minor axis value
-
-        Returns
-        -------
-        counts : ndarray (1d)
-            Length will be length of input axis
-        """
-        if axis == 'major':
-            lp = self
-        elif axis == 'minor':
-            lp = self.swapaxes()
-        else: # pragma: no cover
-            raise ValueError('invalid axis')
-
-        N = len(lp.values)
-        bounds = lp.index._bounds
-
-        return np.concatenate((np.diff(bounds), [N - bounds[-1]]))
-
     def addPrefix(self, prefix=None):
         """
         Concatenate prefix string with panel items names.
diff --git a/pandas/stats/plm.py b/pandas/stats/plm.py
index 02a66978f..e7099c3d4 100644
--- a/pandas/stats/plm.py
+++ b/pandas/stats/plm.py
@@ -501,7 +501,7 @@ class PanelOLS(OLS):
 
     @cache_readonly
     def _time_obs_count(self):
-        return self._y_trans.count()
+        return self._y_trans.count(level=0)['__y__'].values
 
     @cache_readonly
     def _time_has_obs(self):
@@ -907,7 +907,7 @@ def _xx_time_effects(x, y):
     xx = np.dot(x.values.T, x.values)
     xt = x.sum('minor').values
 
-    count = y.count()
+    count = y.count(level=0)['__y__'].values
     selector = count > 0
 
     # X'X - (T'T)^-1 (T'X)
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 1b9607a8f..3c4ba0512 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -897,12 +897,12 @@ class TestLongPanel(unittest.TestCase):
     def test_count(self):
         index = self.panel.index
 
-        major_count = self.panel.count('major')
+        major_count = self.panel.count(level=0)['ItemA']
         labels = index.labels[0]
         for i, idx in enumerate(index.levels[0]):
             self.assertEqual(major_count[i], (labels == i).sum())
 
-        minor_count = self.panel.count('minor')
+        minor_count = self.panel.count(level=1)['ItemA']
         labels = index.labels[1]
         for i, idx in enumerate(index.levels[1]):
             self.assertEqual(minor_count[i], (labels == i).sum())
@@ -939,7 +939,9 @@ class TestLongPanel(unittest.TestCase):
         self.assertEqual(df['e'][5], 4)
 
         # weird overlap, TODO: test?
-        df = pivot(np.array([1, 2, 3, 4, 4]), np.array(['a', 'a', 'a', 'a', 'a']), np.array([1, 2, 3, 5, 4]))
+        df = pivot(np.array([1, 2, 3, 4, 4]),
+                   np.array(['a', 'a', 'a', 'a', 'a']),
+                   np.array([1, 2, 3, 5, 4]))
 
         # corner case, empty
         df = pivot(np.array([]), np.array([]), np.array([]))
