commit 5278cc6dc674c225c204532aeedca9df342f67c7
Author: Daniel Saxton <dsaxton@protonmail.com>
Date:   Wed Feb 6 22:56:54 2019 -0600

    DOC/CLN: Fix errors in Series docstrings (#24945)

diff --git a/pandas/core/series.py b/pandas/core/series.py
index ae6da1d5f..0b90146d3 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -130,7 +130,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         sequence are used, the index will override the keys found in the
         dict.
     dtype : str, numpy.dtype, or ExtensionDtype, optional
-        dtype for the output Series. If not specified, this will be
+        Data type for the output Series. If not specified, this will be
         inferred from `data`.
         See the :ref:`user guide <basics.dtypes>` for more usages.
     copy : bool, default False
@@ -445,7 +445,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         Returns
         -------
-        arr : numpy.ndarray or ndarray-like
+        numpy.ndarray or ndarray-like
 
         See Also
         --------
@@ -514,6 +514,11 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         """
         Return the flattened underlying data as an ndarray.
 
+        Returns
+        -------
+        numpy.ndarray or ndarray-like
+            Flattened data of the Series.
+
         See Also
         --------
         numpy.ndarray.ravel
@@ -831,7 +836,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         Returns
         -------
-        value : scalar (int) or Series (slice, sequence)
+        scalar (int) or Series (slice, sequence)
         """
         try:
 
@@ -1174,7 +1179,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         Returns
         -------
-        value : scalar value
+        scalar value
         """
         warnings.warn("get_value is deprecated and will be removed "
                       "in a future release. Please use "
@@ -1208,7 +1213,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         Returns
         -------
-        series : Series
+        Series
             If label is contained, will be reference to calling Series,
             otherwise a new object
         """
@@ -1395,29 +1400,30 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         Parameters
         ----------
         buf : StringIO-like, optional
-            buffer to write to
-        na_rep : string, optional
-            string representation of NAN to use, default 'NaN'
+            Buffer to write to.
+        na_rep : str, optional
+            String representation of NaN to use, default 'NaN'.
         float_format : one-parameter function, optional
-            formatter function to apply to columns' elements if they are floats
-            default None
-        header : boolean, default True
-            Add the Series header (index name)
+            Formatter function to apply to columns' elements if they are
+            floats, default None.
+        header : bool, default True
+            Add the Series header (index name).
         index : bool, optional
-            Add index (row) labels, default True
-        length : boolean, default False
-            Add the Series length
-        dtype : boolean, default False
-            Add the Series dtype
-        name : boolean, default False
-            Add the Series name if not None
+            Add index (row) labels, default True.
+        length : bool, default False
+            Add the Series length.
+        dtype : bool, default False
+            Add the Series dtype.
+        name : bool, default False
+            Add the Series name if not None.
         max_rows : int, optional
             Maximum number of rows to show before truncating. If None, show
             all.
 
         Returns
         -------
-        formatted : string (if not buffer passed)
+        str or None
+            String representation of Series if ``buf=None``, otherwise None.
         """
 
         formatter = fmt.SeriesFormatter(self, name=name, length=length,
@@ -1477,7 +1483,8 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         Returns
         -------
-        value_dict : collections.Mapping
+        collections.Mapping
+            Key-value representation of Series.
 
         Examples
         --------
@@ -1489,7 +1496,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         OrderedDict([(0, 1), (1, 2), (2, 3), (3, 4)])
         >>> dd = defaultdict(list)
         >>> s.to_dict(dd)
-        defaultdict(<type 'list'>, {0: 1, 1: 2, 2: 3, 3: 4})
+        defaultdict(<class 'list'>, {0: 1, 1: 2, 2: 3, 3: 4})
         """
         # GH16122
         into_c = com.standardize_mapping(into)
@@ -1507,7 +1514,18 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         Returns
         -------
-        data_frame : DataFrame
+        DataFrame
+            DataFrame representation of Series.
+
+        Examples
+        --------
+        >>> s = pd.Series(["a", "b", "c"],
+        ...               name="vals")
+        >>> s.to_frame()
+          vals
+        0    a
+        1    b
+        2    c
         """
         if name is None:
             df = self._constructor_expanddim(self)
@@ -1522,12 +1540,14 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         Parameters
         ----------
-        kind : {'block', 'integer'}
+        kind : {'block', 'integer'}, default 'block'
         fill_value : float, defaults to NaN (missing)
+            Value to use for filling NaN values.
 
         Returns
         -------
-        sp : SparseSeries
+        SparseSeries
+            Sparse representation of the Series.
         """
         # TODO: deprecate
         from pandas.core.sparse.series import SparseSeries
@@ -1565,11 +1585,18 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         ----------
         level : int or level name, default None
             If the axis is a MultiIndex (hierarchical), count along a
-            particular level, collapsing into a smaller Series
+            particular level, collapsing into a smaller Series.
 
         Returns
         -------
-        nobs : int or Series (if level specified)
+        int or Series (if level specified)
+            Number of non-null values in the Series.
+
+        Examples
+        --------
+        >>> s = pd.Series([0.0, 1.0, np.nan])
+        >>> s.count()
+        2
         """
         if level is None:
             return notna(com.values_from_object(self)).sum()
@@ -1598,14 +1625,15 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         Parameters
         ----------
-        dropna : boolean, default True
+        dropna : bool, default True
             Don't consider counts of NaN/NaT.
 
             .. versionadded:: 0.24.0
 
         Returns
         -------
-        modes : Series (sorted)
+        Series
+            Modes of the Series in sorted order.
         """
         # TODO: Add option for bins like value_counts()
         return algorithms.mode(self, dropna=dropna)
@@ -1678,12 +1706,13 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
             - 'first' : Drop duplicates except for the first occurrence.
             - 'last' : Drop duplicates except for the last occurrence.
             - ``False`` : Drop all duplicates.
-        inplace : boolean, default ``False``
+        inplace : bool, default ``False``
             If ``True``, performs operation inplace and returns None.
 
         Returns
         -------
-        deduplicated : Series
+        Series
+            Series with duplicates dropped.
 
         See Also
         --------
@@ -1760,7 +1789,9 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         Returns
         -------
-        pandas.core.series.Series
+        Series
+            Series indicating whether each value has occurred in the
+            preceding values.
 
         See Also
         --------
@@ -1824,7 +1855,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         Parameters
         ----------
-        skipna : boolean, default True
+        skipna : bool, default True
             Exclude NA/null values. If the entire Series is NA, the result
             will be NA.
         axis : int, default 0
@@ -1836,7 +1867,8 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         Returns
         -------
-        idxmin : Index of minimum of values.
+        Index
+            Label of the minimum value.
 
         Raises
         ------
@@ -1861,7 +1893,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         Examples
         --------
         >>> s = pd.Series(data=[1, None, 4, 1],
-        ...               index=['A' ,'B' ,'C' ,'D'])
+        ...               index=['A', 'B', 'C', 'D'])
         >>> s
         A    1.0
         B    NaN
@@ -1893,7 +1925,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         Parameters
         ----------
-        skipna : boolean, default True
+        skipna : bool, default True
             Exclude NA/null values. If the entire Series is NA, the result
             will be NA.
         axis : int, default 0
@@ -1905,7 +1937,8 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         Returns
         -------
-        idxmax : Index of maximum of values.
+        Index
+            Label of the maximum value.
 
         Raises
         ------
@@ -1989,12 +2022,22 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         Returns
         -------
-        Series object
+        Series
+            Rounded values of the Series.
 
         See Also
         --------
-        numpy.around
-        DataFrame.round
+        numpy.around : Round values of an np.array.
+        DataFrame.round : Round values of a DataFrame.
+
+        Examples
+        --------
+        >>> s = pd.Series([0.1, 1.3, 2.7])
+        >>> s.round()
+        0    0.0
+        1    1.0
+        2    3.0
+        dtype: float64
         """
         nv.validate_round(args, kwargs)
         result = com.values_from_object(self).round(decimals)
@@ -2009,7 +2052,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         Parameters
         ----------
         q : float or array-like, default 0.5 (50% quantile)
-            0 <= q <= 1, the quantile(s) to compute
+            0 <= q <= 1, the quantile(s) to compute.
         interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}
             .. versionadded:: 0.18.0
 
@@ -2025,9 +2068,10 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         Returns
         -------
-        quantile : float or Series
+        float or Series
             If ``q`` is an array, a Series will be returned where the
-            index is ``q`` and the values are the quantiles.
+            index is ``q`` and the values are the quantiles, otherwise
+            a float will be returned.
 
         See Also
         --------
@@ -2073,6 +2117,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         Parameters
         ----------
         other : Series
+            Series with which to compute the correlation.
         method : {'pearson', 'kendall', 'spearman'} or callable
             * pearson : standard correlation coefficient
             * kendall : Kendall Tau correlation coefficient
@@ -2082,16 +2127,18 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
                 .. versionadded:: 0.24.0
 
         min_periods : int, optional
-            Minimum number of observations needed to have a valid result
+            Minimum number of observations needed to have a valid result.
 
         Returns
         -------
-        correlation : float
+        float
+            Correlation with other.
 
         Examples
         --------
-        >>> histogram_intersection = lambda a, b: np.minimum(a, b
-        ... ).sum().round(decimals=1)
+        >>> def histogram_intersection(a, b):
+        ...     v = np.minimum(a, b).sum().round(decimals=1)
+        ...     return v
         >>> s1 = pd.Series([.2, .0, .6, .2])
         >>> s2 = pd.Series([.3, .6, .0, .1])
         >>> s1.corr(s2, method=histogram_intersection)
@@ -2116,14 +2163,22 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         Parameters
         ----------
         other : Series
+            Series with which to compute the covariance.
         min_periods : int, optional
-            Minimum number of observations needed to have a valid result
+            Minimum number of observations needed to have a valid result.
 
         Returns
         -------
-        covariance : float
+        float
+            Covariance between Series and other normalized by N-1
+            (unbiased estimator).
 
-        Normalized by N-1 (unbiased estimator).
+        Examples
+        --------
+        >>> s1 = pd.Series([0.90010907, 0.13484424, 0.62036035])
+        >>> s2 = pd.Series([0.12528585, 0.26962463, 0.51111198])
+        >>> s1.cov(s2)
+        -0.01685762652715874
         """
         this, other = self.align(other, join='inner', copy=False)
         if len(this) == 0:
@@ -2146,7 +2201,8 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         Returns
         -------
-        diffed : Series
+        Series
+            First differences of the Series.
 
         See Also
         --------
@@ -2280,7 +2336,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         8
         >>> s @ other
         8
-        >>> df = pd.DataFrame([[0 ,1], [-2, 3], [4, -5], [6, 7]])
+        >>> df = pd.DataFrame([[0, 1], [-2, 3], [4, -5], [6, 7]])
         >>> s.dot(df)
         0    24
         1    14
@@ -2349,17 +2405,19 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         Parameters
         ----------
         to_append : Series or list/tuple of Series
-        ignore_index : boolean, default False
+            Series to append with self.
+        ignore_index : bool, default False
             If True, do not use the index labels.
 
             .. versionadded:: 0.19.0
 
-        verify_integrity : boolean, default False
-            If True, raise Exception on creating index with duplicates
+        verify_integrity : bool, default False
+            If True, raise Exception on creating index with duplicates.
 
         Returns
         -------
-        appended : Series
+        Series
+            Concatenated Series.
 
         See Also
         --------
@@ -2377,7 +2435,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         --------
         >>> s1 = pd.Series([1, 2, 3])
         >>> s2 = pd.Series([4, 5, 6])
-        >>> s3 = pd.Series([4, 5, 6], index=[3,4,5])
+        >>> s3 = pd.Series([4, 5, 6], index=[3, 4, 5])
         >>> s1.append(s2)
         0    1
         1    2
@@ -2440,7 +2498,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         Returns
         -------
-        combined : Series
+        Series
         """
         if not isinstance(other, Series):
             raise AssertionError('Other operand must be Series')
@@ -2863,7 +2921,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         Returns
         -------
-        pandas.Series
+        Series
             The original Series sorted by the labels.
 
         See Also
@@ -3003,7 +3061,9 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         Returns
         -------
-        argsorted : Series, with -1 indicated where nan values are present
+        Series
+            Positions of values within the sort order with -1 indicating
+            nan values.
 
         See Also
         --------
@@ -3221,12 +3281,13 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         Parameters
         ----------
-        i, j : int, string (can be mixed)
+        i, j : int, str (can be mixed)
             Level of index to be swapped. Can pass level name as string.
 
         Returns
         -------
-        swapped : Series
+        Series
+            Series with levels swapped in MultiIndex.
 
         .. versionchanged:: 0.18.1
 
@@ -3266,21 +3327,23 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         Parameters
         ----------
-        level : int, string, or list of these, default last level
-            Level(s) to unstack, can pass level name
-        fill_value : replace NaN with this value if the unstack produces
-            missing values
+        level : int, str, or list of these, default last level
+            Level(s) to unstack, can pass level name.
+        fill_value : scalar value, default None
+            Value to use when replacing NaN values.
 
             .. versionadded:: 0.18.0
 
         Returns
         -------
-        unstacked : DataFrame
+        DataFrame
+            Unstacked Series.
 
         Examples
         --------
         >>> s = pd.Series([1, 2, 3, 4],
-        ...     index=pd.MultiIndex.from_product([['one', 'two'], ['a', 'b']]))
+        ...               index=pd.MultiIndex.from_product([['one', 'two'],
+        ...                                                 ['a', 'b']]))
         >>> s
         one  a    1
              b    2
@@ -3680,7 +3743,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
             Scalar or hashable sequence-like will alter the ``Series.name``
             attribute.
         copy : bool, default True
-            Also copy underlying data
+            Whether to copy underlying data.
         inplace : bool, default False
             Whether to return a new Series. If True then value of copy is
             ignored.
@@ -3690,11 +3753,12 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         Returns
         -------
-        renamed : Series (new object)
+        Series
+            Series with index labels or name altered.
 
         See Also
         --------
-        Series.rename_axis
+        Series.rename_axis : Set the name of the axis.
 
         Examples
         --------
@@ -3704,7 +3768,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         1    2
         2    3
         dtype: int64
-        >>> s.rename("my_name") # scalar, changes Series.name
+        >>> s.rename("my_name")  # scalar, changes Series.name
         0    1
         1    2
         2    3
@@ -3763,7 +3827,8 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         Returns
         -------
-        dropped : pandas.Series
+        Series
+            Series with specified index labels removed.
 
         Raises
         ------
@@ -3779,7 +3844,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         Examples
         --------
-        >>> s = pd.Series(data=np.arange(3), index=['A','B','C'])
+        >>> s = pd.Series(data=np.arange(3), index=['A', 'B', 'C'])
         >>> s
         A  0
         B  1
@@ -3788,7 +3853,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         Drop labels B en C
 
-        >>> s.drop(labels=['B','C'])
+        >>> s.drop(labels=['B', 'C'])
         A  0
         dtype: int64
 
@@ -3961,7 +4026,8 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         Returns
         -------
-        isin : Series (bool dtype)
+        Series
+            Series of booleans indicating if each element is in values.
 
         Raises
         ------
@@ -4020,7 +4086,8 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         Returns
         -------
         Series
-            Each element will be a boolean.
+            Series representing whether each element is between left and
+            right (inclusive).
 
         See Also
         --------
@@ -4102,27 +4169,27 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         Parameters
         ----------
-        path : string file path or file handle / StringIO
-        sep : string, default ','
-            Field delimiter
-        parse_dates : boolean, default True
-            Parse dates. Different default from read_table
+        path : str, file path, or file handle / StringIO
+        sep : str, default ','
+            Field delimiter.
+        parse_dates : bool, default True
+            Parse dates. Different default from read_table.
         header : int, default None
-            Row to use as header (skip prior rows)
+            Row to use as header (skip prior rows).
         index_col : int or sequence, default 0
             Column to use for index. If a sequence is given, a MultiIndex
-            is used. Different default from read_table
-        encoding : string, optional
-            a string representing the encoding to use if the contents are
-            non-ascii, for python versions prior to 3
-        infer_datetime_format : boolean, default False
+            is used. Different default from read_table.
+        encoding : str, optional
+            A string representing the encoding to use if the contents are
+            non-ascii, for python versions prior to 3.
+        infer_datetime_format : bool, default False
             If True and `parse_dates` is True for a column, try to infer the
             datetime format based on the first datetime string. If the format
             can be inferred, there often will be a large parsing speed-up.
 
         Returns
         -------
-        y : Series
+        Series
 
         See Also
         --------
@@ -4323,19 +4390,21 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
     def to_timestamp(self, freq=None, how='start', copy=True):
         """
-        Cast to datetimeindex of timestamps, at *beginning* of period.
+        Cast to DatetimeIndex of Timestamps, at *beginning* of period.
 
         Parameters
         ----------
-        freq : string, default frequency of PeriodIndex
-            Desired frequency
+        freq : str, default frequency of PeriodIndex
+            Desired frequency.
         how : {'s', 'e', 'start', 'end'}
             Convention for converting period to timestamp; start of period
-            vs. end
+            vs. end.
+        copy : bool, default True
+            Whether or not to return a copy.
 
         Returns
         -------
-        ts : Series with DatetimeIndex
+        Series with DatetimeIndex
         """
         new_values = self._values
         if copy:
@@ -4352,11 +4421,15 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
         Parameters
         ----------
-        freq : string, default
+        freq : str, default None
+            Frequency associated with the PeriodIndex.
+        copy : bool, default True
+            Whether or not to return a copy.
 
         Returns
         -------
-        ts : Series with PeriodIndex
+        Series
+            Series with index converted to PeriodIndex.
         """
         new_values = self._values
         if copy:
