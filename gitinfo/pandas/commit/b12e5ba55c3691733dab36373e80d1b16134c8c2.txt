commit b12e5ba55c3691733dab36373e80d1b16134c8c2
Author: Tom Augspurger <TomAugspurger@users.noreply.github.com>
Date:   Thu Oct 4 06:30:29 2018 -0500

    Safer is dtype (#22975)

diff --git a/.travis.yml b/.travis.yml
index 40baee2c0..c9bdb9128 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -53,11 +53,7 @@ matrix:
     - dist: trusty
       env:
         - JOB="3.6, coverage" ENV_FILE="ci/travis-36.yaml" TEST_ARGS="--skip-slow --skip-network" PANDAS_TESTING_MODE="deprecate" COVERAGE=true DOCTEST=true
-    # In allow_failures
-    - dist: trusty
-      env:
-        - JOB="3.6, slow" ENV_FILE="ci/travis-36-slow.yaml" SLOW=true
-    # In allow_failures
+
     - dist: trusty
       env:
         - JOB="3.7, NumPy dev" ENV_FILE="ci/travis-37-numpydev.yaml" TEST_ARGS="--skip-slow --skip-network -W error" PANDAS_TESTING_MODE="deprecate"
@@ -65,6 +61,12 @@ matrix:
         apt:
           packages:
           - xsel
+
+    # In allow_failures
+    - dist: trusty
+      env:
+        - JOB="3.6, slow" ENV_FILE="ci/travis-36-slow.yaml" SLOW=true
+
     # In allow_failures
     - dist: trusty
       env:
@@ -73,13 +75,6 @@ matrix:
       - dist: trusty
         env:
           - JOB="3.6, slow" ENV_FILE="ci/travis-36-slow.yaml" SLOW=true
-      - dist: trusty
-        env:
-          - JOB="3.7, NumPy dev" ENV_FILE="ci/travis-37-numpydev.yaml" TEST_ARGS="--skip-slow --skip-network -W error" PANDAS_TESTING_MODE="deprecate"
-        addons:
-          apt:
-            packages:
-            - xsel
       - dist: trusty
         env:
           - JOB="3.6, doc" ENV_FILE="ci/travis-36-doc.yaml" DOC=true
diff --git a/pandas/core/dtypes/base.py b/pandas/core/dtypes/base.py
index a552251eb..db0a917ae 100644
--- a/pandas/core/dtypes/base.py
+++ b/pandas/core/dtypes/base.py
@@ -2,6 +2,7 @@
 import numpy as np
 
 from pandas import compat
+from pandas.core.dtypes.generic import ABCSeries, ABCIndexClass, ABCDataFrame
 from pandas.errors import AbstractMethodError
 
 
@@ -83,7 +84,12 @@ class _DtypeOpsMixin(object):
         """
         dtype = getattr(dtype, 'dtype', dtype)
 
-        if isinstance(dtype, np.dtype):
+        if isinstance(dtype, (ABCSeries, ABCIndexClass,
+                              ABCDataFrame, np.dtype)):
+            # https://github.com/pandas-dev/pandas/issues/22960
+            # avoid passing data to `construct_from_string`. This could
+            # cause a FutureWarning from numpy about failing elementwise
+            # comparison from, e.g., comparing DataFrame == 'category'.
             return False
         elif dtype is None:
             return False
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index ff7590f6d..f4b7ccb0f 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -4908,7 +4908,8 @@ class DataFrame(NDFrame):
             return ops.dispatch_to_series(left, right, func)
         else:
             # fastpath --> operate directly on values
-            new_data = func(left.values.T, right.values).T
+            with np.errstate(all="ignore"):
+                new_data = func(left.values.T, right.values).T
             return self._constructor(new_data,
                                      index=left.index, columns=self.columns,
                                      copy=False)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 2e22e4e6e..a613b22ea 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -4228,7 +4228,7 @@ def _sanitize_array(data, index, dtype=None, copy=False,
         try:
             # gh-15832: Check if we are requesting a numeric dype and
             # that we can convert the data to the requested dtype.
-            if is_float_dtype(dtype) or is_integer_dtype(dtype):
+            if is_integer_dtype(dtype):
                 subarr = maybe_cast_to_integer_array(arr, dtype)
 
             subarr = maybe_cast_to_datetime(arr, dtype)
diff --git a/pandas/tests/dtypes/test_dtypes.py b/pandas/tests/dtypes/test_dtypes.py
index e3d14497a..7e95b076a 100644
--- a/pandas/tests/dtypes/test_dtypes.py
+++ b/pandas/tests/dtypes/test_dtypes.py
@@ -815,3 +815,23 @@ def test_registry_find(dtype, expected):
      ('datetime64[ns, US/Eastern]', DatetimeTZDtype('ns', 'US/Eastern'))])
 def test_pandas_registry_find(dtype, expected):
     assert _pandas_registry.find(dtype) == expected
+
+
+@pytest.mark.parametrize("check", [
+    is_categorical_dtype,
+    is_datetime64tz_dtype,
+    is_period_dtype,
+    is_datetime64_ns_dtype,
+    is_datetime64_dtype,
+    is_interval_dtype,
+    is_datetime64_any_dtype,
+    is_string_dtype,
+    is_bool_dtype,
+])
+def test_is_dtype_no_warning(check):
+    data = pd.DataFrame({"A": [1, 2]})
+    with tm.assert_produces_warning(None):
+        check(data)
+
+    with tm.assert_produces_warning(None):
+        check(data["A"])
diff --git a/pandas/tests/frame/test_operators.py b/pandas/tests/frame/test_operators.py
index 97c94e113..6ed289614 100644
--- a/pandas/tests/frame/test_operators.py
+++ b/pandas/tests/frame/test_operators.py
@@ -1030,3 +1030,9 @@ class TestDataFrameOperators(TestData):
             align(df, val, 'index')
         with pytest.raises(ValueError):
             align(df, val, 'columns')
+
+    def test_no_warning(self, all_arithmetic_operators):
+        df = pd.DataFrame({"A": [0., 0.], "B": [0., None]})
+        b = df['B']
+        with tm.assert_produces_warning(None):
+            getattr(df, all_arithmetic_operators)(b, 0)
