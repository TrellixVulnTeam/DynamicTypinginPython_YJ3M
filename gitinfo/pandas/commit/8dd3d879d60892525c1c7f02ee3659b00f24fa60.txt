commit 8dd3d879d60892525c1c7f02ee3659b00f24fa60
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Mon Apr 6 16:19:10 2020 -0700

    REF: dispatch TDBlock.to_native_types to TDA._format_native_types (#33270)

diff --git a/pandas/core/arrays/timedeltas.py b/pandas/core/arrays/timedeltas.py
index a9c897799..8c93dca78 100644
--- a/pandas/core/arrays/timedeltas.py
+++ b/pandas/core/arrays/timedeltas.py
@@ -389,7 +389,7 @@ class TimedeltaArray(dtl.DatetimeLikeArrayMixin, dtl.TimelikeOps):
         from pandas.io.formats.format import _get_format_timedelta64
 
         formatter = _get_format_timedelta64(self._data, na_rep)
-        return np.array([formatter(x) for x in self._data])
+        return np.array([formatter(x) for x in self._data.ravel()]).reshape(self.shape)
 
     # ----------------------------------------------------------------
     # Arithmetic Methods
diff --git a/pandas/core/construction.py b/pandas/core/construction.py
index c9754ff58..2d60ad9ba 100644
--- a/pandas/core/construction.py
+++ b/pandas/core/construction.py
@@ -187,7 +187,7 @@ def array(
 
     >>> pd.array(["1H", "2H"], dtype='timedelta64[ns]')
     <TimedeltaArray>
-    ['01:00:00', '02:00:00']
+    ['0 days 01:00:00', '0 days 02:00:00']
     Length: 2, dtype: timedelta64[ns]
 
     Examples
diff --git a/pandas/core/indexes/accessors.py b/pandas/core/indexes/accessors.py
index 2908d468b..d2cee5d94 100644
--- a/pandas/core/indexes/accessors.py
+++ b/pandas/core/indexes/accessors.py
@@ -241,9 +241,9 @@ class TimedeltaProperties(Properties):
     ...     pd.timedelta_range(start="1 second", periods=3, freq="S")
     ... )
     >>> seconds_series
-    0   00:00:01
-    1   00:00:02
-    2   00:00:03
+    0   0 days 00:00:01
+    1   0 days 00:00:02
+    2   0 days 00:00:03
     dtype: timedelta64[ns]
     >>> seconds_series.dt.seconds
     0    1
@@ -301,11 +301,11 @@ class TimedeltaProperties(Properties):
         --------
         >>> s = pd.Series(pd.to_timedelta(np.arange(5), unit='s'))
         >>> s
-        0   00:00:00
-        1   00:00:01
-        2   00:00:02
-        3   00:00:03
-        4   00:00:04
+        0   0 days 00:00:00
+        1   0 days 00:00:01
+        2   0 days 00:00:02
+        3   0 days 00:00:03
+        4   0 days 00:00:04
         dtype: timedelta64[ns]
         >>> s.dt.components
            days  hours  minutes  seconds  milliseconds  microseconds  nanoseconds
diff --git a/pandas/core/internals/blocks.py b/pandas/core/internals/blocks.py
index c23f78d84..ba2fd0379 100644
--- a/pandas/core/internals/blocks.py
+++ b/pandas/core/internals/blocks.py
@@ -2357,26 +2357,10 @@ class TimeDeltaBlock(DatetimeLikeBlockMixin, IntBlock):
             )
         return super().fillna(value, **kwargs)
 
-    def to_native_types(self, na_rep=None, quoting=None, **kwargs):
+    def to_native_types(self, na_rep="NaT", **kwargs):
         """ convert to our native types format """
-        values = self.values
-        mask = isna(values)
-
-        rvalues = np.empty(values.shape, dtype=object)
-        if na_rep is None:
-            na_rep = "NaT"
-        rvalues[mask] = na_rep
-        imask = (~mask).ravel()
-
-        # FIXME:
-        # should use the formats.format.Timedelta64Formatter here
-        # to figure what format to pass to the Timedelta
-        # e.g. to not show the decimals say
-        rvalues.flat[imask] = np.array(
-            [Timedelta(val)._repr_base(format="all") for val in values.ravel()[imask]],
-            dtype=object,
-        )
-        return rvalues
+        tda = self.array_values()
+        return tda._format_native_types(na_rep, **kwargs)
 
 
 class BoolBlock(NumericBlock):
diff --git a/pandas/core/tools/timedeltas.py b/pandas/core/tools/timedeltas.py
index 960a82caa..48f30acf2 100644
--- a/pandas/core/tools/timedeltas.py
+++ b/pandas/core/tools/timedeltas.py
@@ -69,8 +69,8 @@ def to_timedelta(arg, unit="ns", errors="raise"):
     Converting numbers by specifying the `unit` keyword argument:
 
     >>> pd.to_timedelta(np.arange(5), unit='s')
-    TimedeltaIndex(['00:00:00', '00:00:01', '00:00:02',
-                    '00:00:03', '00:00:04'],
+    TimedeltaIndex(['0 days 00:00:00', '0 days 00:00:01', '0 days 00:00:02',
+                    '0 days 00:00:03', '0 days 00:00:04'],
                    dtype='timedelta64[ns]', freq=None)
     >>> pd.to_timedelta(np.arange(5), unit='d')
     TimedeltaIndex(['0 days', '1 days', '2 days', '3 days', '4 days'],
diff --git a/pandas/io/formats/format.py b/pandas/io/formats/format.py
index a9e668312..59542a8da 100644
--- a/pandas/io/formats/format.py
+++ b/pandas/io/formats/format.py
@@ -1672,14 +1672,9 @@ def _get_format_timedelta64(
     even_days = (
         np.logical_and(consider_values, values_int % one_day_nanos != 0).sum() == 0
     )
-    all_sub_day = (
-        np.logical_and(consider_values, np.abs(values_int) >= one_day_nanos).sum() == 0
-    )
 
     if even_days:
         format = None
-    elif all_sub_day:
-        format = "sub_day"
     else:
         format = "long"
 
diff --git a/pandas/tests/frame/test_dtypes.py b/pandas/tests/frame/test_dtypes.py
index 2cda4ba16..27ebee4aa 100644
--- a/pandas/tests/frame/test_dtypes.py
+++ b/pandas/tests/frame/test_dtypes.py
@@ -248,12 +248,7 @@ class TestDataFrameDataTypes:
             {
                 "a": list(map(str, map(lambda x: Timestamp(x)._date_repr, a._values))),
                 "b": list(map(str, map(Timestamp, b._values))),
-                "c": list(
-                    map(
-                        str,
-                        map(lambda x: Timedelta(x)._repr_base(format="all"), c._values),
-                    )
-                ),
+                "c": list(map(lambda x: Timedelta(x)._repr_base(), c._values)),
                 "d": list(map(str, d._values)),
                 "e": list(map(str, e._values)),
             }
diff --git a/pandas/tests/io/formats/test_format.py b/pandas/tests/io/formats/test_format.py
index 1a5d122d7..f3c334499 100644
--- a/pandas/tests/io/formats/test_format.py
+++ b/pandas/tests/io/formats/test_format.py
@@ -3003,13 +3003,13 @@ class TestTimedelta64Formatter:
     def test_subdays(self):
         y = pd.to_timedelta(list(range(5)) + [pd.NaT], unit="s")
         result = fmt.Timedelta64Formatter(y, box=True).get_result()
-        assert result[0].strip() == "'00:00:00'"
-        assert result[1].strip() == "'00:00:01'"
+        assert result[0].strip() == "'0 days 00:00:00'"
+        assert result[1].strip() == "'0 days 00:00:01'"
 
     def test_subdays_neg(self):
         y = pd.to_timedelta(list(range(5)) + [pd.NaT], unit="s")
         result = fmt.Timedelta64Formatter(-y, box=True).get_result()
-        assert result[0].strip() == "'00:00:00'"
+        assert result[0].strip() == "'0 days 00:00:00'"
         assert result[1].strip() == "'-1 days +23:59:59'"
 
     def test_zero(self):
diff --git a/pandas/tests/series/test_dtypes.py b/pandas/tests/series/test_dtypes.py
index 2f2a663d5..05e708e57 100644
--- a/pandas/tests/series/test_dtypes.py
+++ b/pandas/tests/series/test_dtypes.py
@@ -132,7 +132,7 @@ class TestSeriesDtypes:
         expected = series.map(str)
         tm.assert_series_equal(result, expected)
 
-    def test_astype_str_cast(self):
+    def test_astype_str_cast_dt64(self):
         # see gh-9757
         ts = Series([Timestamp("2010-01-04 00:00:00")])
         s = ts.astype(str)
@@ -146,11 +146,14 @@ class TestSeriesDtypes:
         expected = Series([str("2010-01-04 00:00:00-05:00")])
         tm.assert_series_equal(s, expected)
 
+    def test_astype_str_cast_td64(self):
+        # see gh-9757
+
         td = Series([Timedelta(1, unit="d")])
-        s = td.astype(str)
+        ser = td.astype(str)
 
-        expected = Series([str("1 days 00:00:00.000000000")])
-        tm.assert_series_equal(s, expected)
+        expected = Series([str("1 days")])
+        tm.assert_series_equal(ser, expected)
 
     def test_astype_unicode(self):
         # see gh-7758: A bit of magic is required to set
