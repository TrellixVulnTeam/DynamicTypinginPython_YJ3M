commit e356f98571ae9d2984aa435669484fa77fe1f3a6
Author: y-p <yoval@gmx.com>
Date:   Wed Jan 23 21:09:44 2013 +0200

    ENH: add option chop_threshold to control display of small numerical values as zero GH2735
    
    Doesn't cover complex numbers for now.

diff --git a/pandas/core/config_init.py b/pandas/core/config_init.py
index 11b5afcf3..65531c870 100644
--- a/pandas/core/config_init.py
+++ b/pandas/core/config_init.py
@@ -120,6 +120,12 @@ pc_line_width_doc = """
     Default 80
     When printing wide DataFrames, this is the width of each line.
 """
+pc_chop_threshold_doc = """
+: float or None
+    Default None
+    if set to a float value, all float values smaller then the given threshold
+    will be displayed as exactly 0 by repr and friends.
+"""
 
 with cf.config_prefix('display'):
     cf.register_option('precision', 7, pc_precision_doc, validator=is_int)
@@ -146,6 +152,7 @@ with cf.config_prefix('display'):
                        validator=is_text)
     cf.register_option('expand_frame_repr', True, pc_expand_repr_doc)
     cf.register_option('line_width', 80, pc_line_width_doc)
+    cf.register_option('chop_threshold', None, pc_chop_threshold_doc)
 
 tc_sim_interactive_doc = """
 : boolean
diff --git a/pandas/core/format.py b/pandas/core/format.py
index 88b729349..a14393374 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -1098,8 +1098,21 @@ class FloatArrayFormatter(GenericArrayFormatter):
             self.formatter = self.float_format
 
     def _format_with(self, fmt_str):
-        fmt_values = [fmt_str % x if notnull(x) else self.na_rep
-                      for x in self.values]
+        def _val(x, threshold):
+            if notnull(x):
+                if threshold is None or  abs(x) >  get_option("display.chop_threshold"):
+                    return  fmt_str % x
+                else:
+                    if fmt_str.endswith("e"): # engineering format
+                        return  "0"
+                    else:
+                        return  fmt_str % 0
+            else:
+
+                return self.na_rep
+
+        threshold = get_option("display.chop_threshold")
+        fmt_values = [ _val(x, threshold) for x in self.values]
         return _trim_zeros(fmt_values, self.na_rep)
 
     def get_result(self):
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index 0e3134d94..eecf30872 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -100,6 +100,21 @@ class TestDataFrameFormatting(unittest.TestCase):
         with option_context("display.max_colwidth", max_len + 2):
             self.assert_('...' not in repr(df))
 
+    def test_repr_chop_threshold(self):
+        df = DataFrame([[0.1, 0.5],[0.5, -0.1]])
+        pd.reset_option("display.chop_threshold") # default None
+        self.assertEqual(repr(df), '     0    1\n0  0.1  0.5\n1  0.5 -0.1')
+
+        with option_context("display.chop_threshold", 0.2 ):
+            self.assertEqual(repr(df), '     0    1\n0  0.0  0.5\n1  0.5  0.0')
+
+        with option_context("display.chop_threshold", 0.6 ):
+            self.assertEqual(repr(df), '   0  1\n0  0  0\n1  0  0')
+
+        with option_context("display.chop_threshold", None ):
+            self.assertEqual(repr(df),  '     0    1\n0  0.1  0.5\n1  0.5 -0.1')
+
+
     def test_repr_should_return_str(self):
         """
         http://docs.python.org/py3k/reference/datamodel.html#object.__repr__
