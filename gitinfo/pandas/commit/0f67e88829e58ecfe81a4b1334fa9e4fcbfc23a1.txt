commit 0f67e88829e58ecfe81a4b1334fa9e4fcbfc23a1
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Jun 14 11:05:26 2011 -0400

    hasty in removing matrix.py, need for legacy pickles

diff --git a/RELEASE.rst b/RELEASE.rst
index 4895f3e0a..a5843160a 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -31,7 +31,9 @@ Release notes
 * `Series.describe`, `DataFrame.describe`: produces an R-like table of summary
   statistics about each data column
 * `DataFrame.quantile`, `Series.quantile`
-* Fancy indexing
+* Fancy indexing operator on Series / DataFrame, e.g.:
+  * frame.ix[5:10, ['C', 'B', 'A']]
+  * frame.ix[date1:date2]
 * Boolean indexing with DataFrame objects: df[df > 1] = 1
 * `pytz` / tzinfo support in `DateRange`
   * `tz_localize`, `tz_normalize`, and `tz_validate` methods added
@@ -48,14 +50,20 @@ Release notes
 
 **API Changes**
 
+* The `DataMatrix` variable now refers to `DataFrame`, will be removed in next
+  release
 * Handling of boolean dtype in `DataFrame` has been improved to support storage
-  of boolean data with NA / NaN values. As a sacrifice, the boolean data needs
-  to be stored in an object array. Before it was being converted to float64 so
-  this should not (in theory) cause API breakage
+  of boolean data with NA / NaN values. Before it was being converted to float64
+  so this should not (in theory) cause API breakage
 * Backwards compatibility support for begin/end/nPeriods keyword arguments in
   DateRange class has been removed
+* `pandas.core.mixins` code moved to `pandas.core.generic`
+* `buffer` keyword arguments (e.g. `DataFrame.toString`) renamed to `buf` to
+  avoid using Python built-in name
 * `DataFrame.rows()` removed (use `DataFrame.index`)
 * Added deprecation warning to `DataFrame.cols()`, to be removed in next release
+* `DataFrame` deprecations: `merge`, `asMatrix`, `toDataMatrix`,
+  `_firstTimeWithValue`, `_lastTimeWithValue`
 * `fillMethod` arguments (deprecated in prior release) removed, should be
   replaced with `method`
 * `Series.fill`, `DataFrame.fill`, and `WidePanel.fill` removed, use `fillna`
@@ -63,6 +71,8 @@ Release notes
 
 **Bug fixes**
 
+* Column ordering in pandas.io.parsers.
+
 ************************
 pandas 0.3 Release Notes
 ************************
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
new file mode 100644
index 000000000..3d42fd93d
--- /dev/null
+++ b/pandas/core/matrix.py
@@ -0,0 +1 @@
+from pandas.core.frame import DataFrame as DataMatrix
diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index 1a532619a..8fa587ab7 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -12,13 +12,29 @@ import numpy as np
 from pandas.core.index import Index
 from pandas.core.frame import DataFrame
 
-def parseCSV(filepath, header=0, skiprows=None, indexCol=0,
+def read_csv(filepath, header=0, skiprows=None, index_col=0,
              na_values=None):
     """
-    Parse CSV file into a DataFrame object. Try to parse dates if possible.
+    Read CSV file into DataFrame
+
+    Parameters
+    ----------
+    filepath : string
+
+    header : int, default 0
+        Row to use for the column labels of the parsed DataFrame
+    skiprows : list-like
+        Row numbers to skip (0-indexed)
+    index_col : int, default 0
+        Column to use as the row labels of the DataFrame. Pass None if there is
+        no such column
     """
     import csv
-    f = open(filepath,'U')
+    try:
+        f = open(filepath, 'U')
+    except Exception:
+        f = open(filepath, 'r')
+
     reader = csv.reader(f, dialect='excel')
 
     if skiprows is not None:
@@ -27,9 +43,17 @@ def parseCSV(filepath, header=0, skiprows=None, indexCol=0,
     else:
         lines = [l for l in reader]
     f.close()
-    return simpleParser(lines, header=header, indexCol=indexCol,
+    return simpleParser(lines, header=header, indexCol=index_col,
                         na_values=na_values)
 
+def parseCSV(filepath, header=0, skiprows=None, indexCol=0,
+             na_values=None):
+    """
+    Parse CSV file into a DataFrame object. Try to parse dates if possible.
+    """
+    return read_csv(filepath, header=header, skiprows=skiprows,
+                    index_col=indexCol, na_values=na_values)
+
 def read_table(path, header=0, index_col=0, delimiter=','):
     data = np.genfromtxt(path, delimiter=delimiter,
                          names=header is not None,
