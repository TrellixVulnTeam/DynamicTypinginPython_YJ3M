commit 044feb537ec7e127822a62a7cb90e97d61ff5a56
Author: Hugues Valois <huvalo@microsoft.com>
Date:   Tue May 23 18:24:41 2017 -0700

    BUG: Don't ignore figsize in df.boxplot (#16445)
    
    * Propagate the figsize via the rcParams, since matplotlib doesn't allow passing it as a parameter to gca().
    
    * Update what's new for v0.21.0 and use rc_context() to temporarily change rcParams.
    
    * Move bug fix from 0.21.0 whatsnew to 0.20.2.
    
    * Allow passing in an rc to _gca() instead of just figsize, and added a test for boxplot figsize.
    
    * Fix style violations.

diff --git a/doc/source/whatsnew/v0.20.2.txt b/doc/source/whatsnew/v0.20.2.txt
index e24b0c229..6d6a148ed 100644
--- a/doc/source/whatsnew/v0.20.2.txt
+++ b/doc/source/whatsnew/v0.20.2.txt
@@ -62,6 +62,7 @@ Plotting
 
 - Bug in ``DataFrame.plot`` with a single column and a list-like ``color`` (:issue:`3486`)
 - Bug in ``plot`` where ``NaT`` in ``DatetimeIndex`` results in ``Timestamp.min`` (:issue: `12405`)
+- Bug in ``DataFrame.boxplot`` where ``figsize`` keyword was not respected for non-grouped boxplots (:issue:`11959`)
 
 
 
diff --git a/pandas/plotting/_core.py b/pandas/plotting/_core.py
index 49076ffb4..9169eb868 100644
--- a/pandas/plotting/_core.py
+++ b/pandas/plotting/_core.py
@@ -49,9 +49,10 @@ def _get_standard_kind(kind):
     return {'density': 'kde'}.get(kind, kind)
 
 
-def _gca():
+def _gca(rc=None):
     import matplotlib.pyplot as plt
-    return plt.gca()
+    with plt.rc_context(rc):
+        return plt.gca()
 
 
 def _gcf():
@@ -1871,12 +1872,6 @@ def plot_series(data, kind='line', ax=None,                    # Series unique
                 **kwds):
 
     import matplotlib.pyplot as plt
-    """
-    If no axes is specified, check whether there are existing figures
-    If there is no existing figures, _gca() will
-    create a figure with the default figsize, causing the figsize=parameter to
-    be ignored.
-    """
     if ax is None and len(plt.get_fignums()) > 0:
         ax = _gca()
         ax = MPLPlot._get_ax_layer(ax)
@@ -2006,7 +2001,8 @@ def boxplot(data, column=None, by=None, ax=None, fontsize=None,
                              "'by' is None")
 
         if ax is None:
-            ax = _gca()
+            rc = {'figure.figsize': figsize} if figsize is not None else {}
+            ax = _gca(rc)
         data = data._get_numeric_data()
         if columns is None:
             columns = data.columns
diff --git a/pandas/tests/plotting/test_boxplot_method.py b/pandas/tests/plotting/test_boxplot_method.py
index a4c70f794..ce8fb7a57 100644
--- a/pandas/tests/plotting/test_boxplot_method.py
+++ b/pandas/tests/plotting/test_boxplot_method.py
@@ -160,6 +160,14 @@ class TestDataFramePlots(TestPlotBase):
         df.loc[:, 0] = np.nan
         _check_plot_works(df.boxplot, return_type='axes')
 
+    @slow
+    def test_figsize(self):
+        df = DataFrame(np.random.rand(10, 5),
+                       columns=['A', 'B', 'C', 'D', 'E'])
+        result = df.boxplot(return_type='axes', figsize=(12, 8))
+        assert result.figure.bbox_inches.width == 12
+        assert result.figure.bbox_inches.height == 8
+
     def test_fontsize(self):
         df = DataFrame({"a": [1, 2, 3, 4, 5, 6]})
         self._check_ticks_props(df.boxplot("a", fontsize=16),
