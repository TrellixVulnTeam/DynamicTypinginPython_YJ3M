commit b28aab9977a0e51f07c78b181df273719cd94b76
Author: Chang She <chang@lambdafoundry.com>
Date:   Sun Apr 14 11:27:20 2013 -0700

    BUG: pivot_table bug when rows is unspecified #3361

diff --git a/pandas/tools/pivot.py b/pandas/tools/pivot.py
index d920df1ca..ef605abb8 100644
--- a/pandas/tools/pivot.py
+++ b/pandas/tools/pivot.py
@@ -99,10 +99,11 @@ def pivot_table(data, values=None, rows=None, cols=None, aggfunc='mean',
     grouped = data.groupby(keys)
     agged = grouped.agg(aggfunc)
 
-    to_unstack = [agged.index.names[i]
-                  for i in range(len(rows), len(keys))]
-
-    table = agged.unstack(to_unstack)
+    table = agged
+    if table.index.nlevels > 1:
+        to_unstack = [agged.index.names[i]
+                      for i in range(len(rows), len(keys))]
+        table = agged.unstack(to_unstack)
 
     if isinstance(table, DataFrame):
         if isinstance(table.columns, MultiIndex):
@@ -121,6 +122,9 @@ def pivot_table(data, values=None, rows=None, cols=None, aggfunc='mean',
     if values_passed and not values_multi:
         table = table[values[0]]
 
+    if len(rows) == 0 and len(cols) > 0:
+        table = table.T
+
     return table
 
 
diff --git a/pandas/tools/tests/test_pivot.py b/pandas/tools/tests/test_pivot.py
index e9383e26f..c0e0de1a2 100644
--- a/pandas/tools/tests/test_pivot.py
+++ b/pandas/tools/tests/test_pivot.py
@@ -50,6 +50,19 @@ class TestPivotTable(unittest.TestCase):
         expected = self.data.groupby(rows + [cols])['D'].agg(np.mean).unstack()
         tm.assert_frame_equal(table, expected)
 
+    def test_pivot_table_nocols(self):
+        df = DataFrame({'rows': ['a', 'b', 'c'],
+                        'cols': ['x', 'y', 'z'],
+                        'values': [1,2,3]})
+        rs = df.pivot_table(cols='cols', aggfunc=np.sum)
+        xp = df.pivot_table(rows='cols', aggfunc=np.sum).T
+        tm.assert_frame_equal(rs, xp)
+
+        rs = df.pivot_table(cols='cols', aggfunc={'values': 'mean'})
+        xp = df.pivot_table(rows='cols', aggfunc={'values': 'mean'}).T
+        tm.assert_frame_equal(rs, xp)
+
+
     def test_pass_array(self):
         result = self.data.pivot_table('D', rows=self.data.A, cols=self.data.C)
         expected = self.data.pivot_table('D', rows='A', cols='C')
