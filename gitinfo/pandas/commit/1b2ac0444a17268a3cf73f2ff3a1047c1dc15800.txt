commit 1b2ac0444a17268a3cf73f2ff3a1047c1dc15800
Author: Vytautas Jancauskas <unaudio@gmail.com>
Date:   Fri Aug 10 23:11:17 2012 +0300

    Added test_make_aes2 method, fixed a bug with make_aes

diff --git a/pandas/tests/test_rplot.py b/pandas/tests/test_rplot.py
index fee8bcb3c..df3e9d588 100644
--- a/pandas/tests/test_rplot.py
+++ b/pandas/tests/test_rplot.py
@@ -37,6 +37,17 @@ class TestUtilityFunctions(unittest.TestCase):
 		self.assertTrue(aes['colour'] is None)
 		self.assertTrue(aes['shape'] is None)
 		self.assertTrue(aes['alpha'] is None)
+		self.assertTrue(type(aes) is dict)
+
+	def test_make_aes2(self):
+		with self.assertRaises(ValueError):
+			rplot.make_aes(size=rplot.ScaleShape('test'))
+		with self.assertRaises(ValueError):
+			rplot.make_aes(colour=rplot.ScaleShape('test'))
+		with self.assertRaises(ValueError):
+			rplot.make_aes(shape=rplot.ScaleSize('test'))
+		with self.assertRaises(ValueError):
+			rplot.make_aes(alpha=rplot.ScaleShape('test'))
 
 class TestScaleGradient(unittest.TestCase):
 	def setUp(self):
diff --git a/pandas/tools/rplot.py b/pandas/tools/rplot.py
index a20892b1b..27da4cf6f 100644
--- a/pandas/tools/rplot.py
+++ b/pandas/tools/rplot.py
@@ -278,19 +278,19 @@ def make_aes(x=None, y=None, size=None, colour=None, shape=None, alpha=None):
 		shape = ScaleConstant(shape)
 	if not hasattr(alpha, '__call__') and alpha is not None:
 		alpha = ScaleConstant(alpha)
-	if any([isinstance(size, scale) for scale in [ScaleConstant, ScaleSize]]):
+	if any([isinstance(size, scale) for scale in [ScaleConstant, ScaleSize]]) or size is None:
 		pass
 	else:
 		raise ValueError('size mapping should be done through ScaleConstant or ScaleSize')
-	if any([isinstance(colour, scale) for scale in [ScaleConstant, ScaleGradient, ScaleGradient2]]):
+	if any([isinstance(colour, scale) for scale in [ScaleConstant, ScaleGradient, ScaleGradient2]]) or colour is None:
 		pass
 	else:
 		raise ValueError('colour mapping should be done through ScaleConstant, ScaleGradient or ScaleGradient2')
-	if any([isinstance(shape, scale) for scale in [ScaleConstant, ScaleShape]]):
+	if any([isinstance(shape, scale) for scale in [ScaleConstant, ScaleShape]]) or shape is None:
 		pass
 	else:
 		raise ValueError('shape mapping should be done through ScaleConstant or ScaleShape')
-	if any([isinstance(alpha, scale) for scale in [ScaleConstant]]):
+	if any([isinstance(alpha, scale) for scale in [ScaleConstant]]) or alpha is None:
 		pass
 	else:
 		raise ValueError('alpha mapping should be done through ScaleConstant')
