commit 2f7548282338ace3cfbc99e130b7e382e65b75d8
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Jul 8 23:17:35 2011 -0400

    enable boolean indexing with object-dtyped array

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 052f1afaf..a073197f3 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -27,7 +27,7 @@ from pandas.core.daterange import DateRange
 from pandas.core.generic import PandasGeneric
 from pandas.core.index import Index, NULL_INDEX
 from pandas.core.internals import BlockManager, make_block
-from pandas.core.series import Series
+from pandas.core.series import Series, _is_bool_indexer
 import pandas.core.common as common
 import pandas.core.datetools as datetools
 import pandas._tseries as _tseries
@@ -739,6 +739,11 @@ class DataFrame(PandasGeneric):
             if len(item) != len(self.index):
                 raise ValueError('Item wrong length %d instead of %d!' %
                                  (len(item), len(self.index)))
+
+            # also raises Exception if object array with NA values
+            if _is_bool_indexer(item):
+                item = np.asarray(item, dtype=bool)
+
             new_index = self.index[item]
             return self.reindex(new_index)
         else:
diff --git a/pandas/core/series.py b/pandas/core/series.py
index f2051852a..bd07c4c35 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -296,15 +296,9 @@ class Series(np.ndarray, PandasGeneric):
         # special handling of boolean data with NAs stored in object
         # arrays. Sort of an elaborate hack since we can't represent boolean
         # NA. Hmm
-        if isinstance(key, np.ndarray) and key.dtype == np.object_:
-            mask = isnull(key)
-            if mask.any():
-                raise ValueError('cannot index with vector containing '
-                                 'NA / NaN values')
-
-            if set([True, False]).issubset(set(key)):
-                key = np.asarray(key, dtype=bool)
-                return _index_with(key)
+        if _is_bool_indexer(key):
+            key = np.asarray(key, dtype=bool)
+            return _index_with(key)
 
         try:
             return _index_with(key)
@@ -1448,6 +1442,16 @@ class TimeSeries(Series):
 #-------------------------------------------------------------------------------
 # Supplementary functions
 
+def _is_bool_indexer(key):
+    if isinstance(key, np.ndarray) and key.dtype == np.object_:
+        mask = isnull(key)
+        if mask.any():
+            raise ValueError('cannot index with vector containing '
+                             'NA / NaN values')
+
+        return set([True, False]).issubset(set(key))
+    return False
+
 _ndgi = ndarray.__getitem__
 
 def remove_na(arr):
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 3b016e676..fbddbec7f 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -44,9 +44,11 @@ class CheckIndexing(object):
         self.assert_('random' not in self.frame)
         self.assertRaises(Exception, self.frame.__getitem__, 'random')
 
+    def test_getitem_boolean(self):
         # boolean indexing
         d = self.tsframe.index[10]
         indexer = self.tsframe.index > d
+        indexer_obj = indexer.astype(object)
 
         subindex = self.tsframe.index[indexer]
         subframe = self.tsframe[indexer]
@@ -54,6 +56,9 @@ class CheckIndexing(object):
         self.assert_(np.array_equal(subindex, subframe.index))
         self.assertRaises(Exception, self.tsframe.__getitem__, indexer[:-1])
 
+        subframe_obj = self.tsframe[indexer_obj]
+        assert_frame_equal(subframe_obj, subframe)
+
     def test_setitem(self):
         # not sure what else to do here
         series = self.frame['A'][::2]
