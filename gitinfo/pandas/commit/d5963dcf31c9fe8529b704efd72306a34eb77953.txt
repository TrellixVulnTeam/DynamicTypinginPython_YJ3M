commit d5963dcf31c9fe8529b704efd72306a34eb77953
Author: Jake VanderPlas <jakevdp@gmail.com>
Date:   Thu Dec 4 14:20:24 2014 -0800

    API: update NDFrame __setattr__ to match behavior of __getattr__ (GH8994)

diff --git a/doc/source/whatsnew/v0.15.2.txt b/doc/source/whatsnew/v0.15.2.txt
index 100e2c1b4..6e0d22032 100644
--- a/doc/source/whatsnew/v0.15.2.txt
+++ b/doc/source/whatsnew/v0.15.2.txt
@@ -62,6 +62,35 @@ API changes
 
 - Allow equality comparisons of Series with a categorical dtype and object dtype; previously these would raise ``TypeError`` (:issue:`8938`)
 
+- Bug in ``NDFrame``: conflicting attribute/column names now behave consistently between getting and setting. Previously, when both a column and attribute named ``y`` existed, ``data.y`` would return the attribute, while ``data.y = z`` would update the column (:issue:`8994`)
+
+  .. ipython:: python
+
+     data = pd.DataFrame({'x':[1, 2, 3]})
+     data.y = 2
+     data['y'] = [2, 4, 6]
+     data
+
+     # this assignment was inconsistent
+     data.y = 5
+
+  Old behavior:
+
+  .. code-block:: python
+
+     In [6]: data.y
+     Out[6]: 2
+
+     In [7]: data['y'].values
+     Out[7]: array([5, 5, 5])
+
+  New behavior:
+
+  .. ipython:: python
+
+     data.y
+     data['y'].values
+
 .. _whatsnew_0152.enhancements:
 
 Enhancements
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index edea0b33e..d63643c53 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -1929,11 +1929,12 @@ class NDFrame(PandasObject):
         return self
 
     def __getattr__(self, name):
-        """After regular attribute access, try looking up the name of a the
-        info.
-
+        """After regular attribute access, try looking up the name
         This allows simpler access to columns for interactive use.
         """
+        # Note: obj.x will always call obj.__getattribute__('x') prior to
+        # calling obj.__getattr__('x').
+
         if name in self._internal_names_set:
             return object.__getattribute__(self, name)
         elif name in self._metadata:
@@ -1945,12 +1946,24 @@ class NDFrame(PandasObject):
                                  (type(self).__name__, name))
 
     def __setattr__(self, name, value):
-        """After regular attribute access, try looking up the name of the info
+        """After regular attribute access, try setting the name
         This allows simpler access to columns for interactive use."""
+        # first try regular attribute access via __getattribute__, so that
+        # e.g. ``obj.x`` and ``obj.x = 4`` will always reference/modify
+        # the same attribute.
+
+        try:
+            object.__getattribute__(self, name)
+            return object.__setattr__(self, name, value)
+        except AttributeError:
+            pass
+
+        # if this fails, go on to more involved attribute setting
+        # (note that this matches __getattr__, above).
         if name in self._internal_names_set:
             object.__setattr__(self, name, value)
         elif name in self._metadata:
-            return object.__setattr__(self, name, value)
+            object.__setattr__(self, name, value)
         else:
             try:
                 existing = getattr(self, name)
diff --git a/pandas/tests/test_generic.py b/pandas/tests/test_generic.py
index 5e78e8dc4..40d6d2151 100644
--- a/pandas/tests/test_generic.py
+++ b/pandas/tests/test_generic.py
@@ -19,6 +19,7 @@ from pandas.util.testing import (assert_series_equal,
                                  assert_frame_equal,
                                  assert_panel_equal,
                                  assert_almost_equal,
+                                 assert_equal,
                                  ensure_clean)
 import pandas.util.testing as tm
 
@@ -1316,6 +1317,18 @@ class TestDataFrame(tm.TestCase, Generic):
                 df = DataFrame(index=l0)
                 df = getattr(df, fn)('US/Pacific', level=1)
 
+    def test_set_attribute(self):
+        # Test for consistent setattr behavior when an attribute and a column
+        # have the same name (Issue #8994)
+        df = DataFrame({'x':[1, 2, 3]})
+
+        df.y = 2
+        df['y'] = [2, 4, 6]
+        df.y = 5
+
+        assert_equal(df.y, 5)
+        assert_series_equal(df['y'], Series([2, 4, 6]))
+
 
 class TestPanel(tm.TestCase, Generic):
     _typ = Panel
