commit 44a15a67eb1c36b371b9a9b37828fbdec2e529a9
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Oct 23 17:43:25 2011 -0400

    DOC: more docs holes on joining, etc.

diff --git a/TODO.rst b/TODO.rst
index 015c41edb..5a9723b85 100644
--- a/TODO.rst
+++ b/TODO.rst
@@ -35,9 +35,9 @@ TODO docs
 - DONE Index / MultiIndex names
 - DONE Unstack / stack by level name
 - DONE name attribute on Series
+- DONE Multi-key joining
+- DONE Inner join on key
 
-- Inner join on key
-- Multi-key joining
 - align functions
 - df[col_list]
 - Panel.rename_axis
diff --git a/doc/source/merging.rst b/doc/source/merging.rst
index 21ff4dfd3..a5b639f3d 100644
--- a/doc/source/merging.rst
+++ b/doc/source/merging.rst
@@ -89,8 +89,9 @@ Joining on a key
 ~~~~~~~~~~~~~~~~
 
 ``join`` takes an optional ``on`` argument which should be a column name in the
-calling DataFrame which will be used to "align" the passed DataFrame. This is
-best illustrated by example:
+calling DataFrame which will be used to "align" the passed DataFrame. The
+joining currently aligns the calling DataFrame's column (or columns) on the
+passed DataFrame's index. This is best illustrated by example:
 
 .. ipython:: python
 
@@ -101,6 +102,44 @@ best illustrated by example:
    to_join
    df.join(to_join, on='key')
 
+To join on multiple keys, the passed DataFrame must have a ``MultiIndex``:
+
+.. ipython:: python
+
+   index = MultiIndex(levels=[['foo', 'bar', 'baz', 'qux'],
+                              ['one', 'two', 'three']],
+                      labels=[[0, 0, 0, 1, 1, 2, 2, 3, 3, 3],
+                              [0, 1, 2, 0, 1, 1, 2, 0, 1, 2]],
+                      names=['first', 'second'])
+   to_join = DataFrame(np.random.randn(10, 3), index=index,
+                       columns=['j_one', 'j_two', 'j_three'])
+
+   # a little relevant example with NAs
+   key1 = ['bar', 'bar', 'bar', 'foo', 'foo', 'baz', 'baz', 'qux',
+           'qux', 'snap']
+   key2 = ['two', 'one', 'three', 'one', 'two', 'one', 'two', 'two',
+           'three', 'one']
+
+   data = np.random.randn(len(key1))
+   data = DataFrame({'key1' : key1, 'key2' : key2,
+                     'data' : data})
+   data
+   to_join
+
+
+.. ipython:: python
+
+   data.join(to_join, on=['key1', 'key2'])
+
+This is by default a "many-to-one" or "VLOOKUP"-style left join operation. An
+inner join is also supported:
+
+.. ipython:: python
+
+   data.join(to_join, on=['key1', 'key2'], how='inner')
+
+This drops any rows where there was no match.
+
 Merging ordered records
 ~~~~~~~~~~~~~~~~~~~~~~~
 
