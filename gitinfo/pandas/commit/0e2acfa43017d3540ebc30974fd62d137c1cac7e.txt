commit 0e2acfa43017d3540ebc30974fd62d137c1cac7e
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Dec 6 09:37:37 2011 -0500

    ENH: set_value impl for Panel. no sparse yet, GH #438

diff --git a/bench/bench_get_put_value.py b/bench/bench_get_put_value.py
index 8f33b5b33..5aa984d39 100644
--- a/bench/bench_get_put_value.py
+++ b/bench/bench_get_put_value.py
@@ -30,6 +30,19 @@ def put2():
         for row in df.index:
             df.set_value(row, col, 0)
 
-for col in df.columns:
-    for row in df.index:
-        value = df.get_value(row, col)
+def resize1():
+    buf = DataFrame()
+    for col in df.columns:
+        for row in df.index:
+            buf = buf.set_value(row, col, 5.)
+    return buf
+
+def resize2():
+    from collections import defaultdict
+
+    buf = defaultdict(dict)
+    for col in df.columns:
+        for row in df.index:
+            buf[col][row] = 5.
+
+    return DataFrame(buf)
diff --git a/pandas/core/common.py b/pandas/core/common.py
index 5f50cd0db..e50d8cf88 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -688,3 +688,5 @@ def load(path):
         return cPickle.load(f)
     finally:
         f.close()
+
+
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 7b2fbb405..fe0ef354f 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -906,7 +906,7 @@ class DataFrame(NDFrame):
 
         Returns
         -------
-        element : scalar value
+        value : scalar value
         """
         series = self._get_item_cache(col)
         engine = self.index._engine
@@ -921,6 +921,12 @@ class DataFrame(NDFrame):
         index : row label
         col : column label
         value : scalar value
+
+        Returns
+        -------
+        frame : DataFrame
+            If label pair is contained, will be reference to calling DataFrame,
+            otherwise a new object
         """
         try:
             series = self._get_item_cache(col)
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 87e9db4a5..5e745d034 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -1,3 +1,5 @@
+# pylint: disable=W0231
+
 import numpy as np
 import cPickle
 
@@ -223,6 +225,12 @@ class NDFrame(PandasObject):
     def __init__(self, data, axes=None, copy=False, dtype=None):
         if dtype is not None:
             data = data.astype(dtype)
+        elif copy:
+            data = data.copy()
+
+        if axes is not None:
+            for i, ax in enumerate(axes):
+                data = data.reindex_axis(ax, axis=i)
 
         self._data = data
         self._item_cache = {}
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 6168c2f08..79102916c 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -209,21 +209,24 @@ class Panel(NDFrame):
             data = {}
 
         passed_axes = [items, major_axis, minor_axis]
+        axes = None
         if isinstance(data, BlockManager):
+            if any(x is not None for x in passed_axes):
+                axes = [x if x is not None else y
+                        for x, y in zip(passed_axes, data.axes)]
             mgr = data
-            if copy and dtype is None:
-                mgr = mgr.copy()
-            elif dtype is not None:
-                # no choice but to copy
-                mgr = mgr.astype(dtype)
         elif isinstance(data, dict):
             mgr = self._init_dict(data, passed_axes, dtype=dtype)
+            copy = False
+            dtype = None
         elif isinstance(data, (np.ndarray, list)):
             mgr = self._init_matrix(data, passed_axes, dtype=dtype, copy=copy)
+            copy = False
+            dtype = None
         else: # pragma: no cover
             raise PandasError('Panel constructor not properly called!')
 
-        NDFrame.__init__(self, mgr)
+        NDFrame.__init__(self, mgr, axes=axes, copy=copy, dtype=dtype)
 
     def _init_dict(self, data, axes, dtype=None):
         items, major, minor = axes
@@ -462,7 +465,7 @@ class Panel(NDFrame):
 
         Returns
         -------
-        element : scalar value
+        value : scalar value
         """
         # hm, two layers to the onion
         frame = self._get_item_cache(item)
@@ -474,9 +477,16 @@ class Panel(NDFrame):
 
         Parameters
         ----------
-        index : row label
-        col : column label
-        value : scalar value
+        item : item label (panel item)
+        major : major axis label (panel item row)
+        minor : minor axis label (panel item column)
+        value : scalar
+
+        Returns
+        -------
+        panel : Panel
+            If label combo is contained, will be reference to calling Panel,
+            otherwise a new object
         """
         frame = self._get_item_cache(item)
         return frame.set_value(major, minor, value)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index a003249c9..a51fcb447 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -325,12 +325,18 @@ copy : boolean, default False
 
     def set_value(self, label, value):
         """
-        Quickly set single value at passed label
+        Quickly set single value at passed label. If label is not contained, a
 
         Parameters
         ----------
         label : object
             Partial indexing with MultiIndex not allowed
+
+        Returns
+        -------
+        series : Series
+            If label is contained, will be reference to calling Series,
+            otherwise a new object
         """
         try:
             self.index._engine.set_value(self, label, value)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 87a5a363b..1019f8d7c 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1,3 +1,4 @@
+
 # pylint: disable-msg=W0612,E1101
 from copy import deepcopy
 from datetime import datetime, timedelta
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 196c7deac..154e0eb09 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -648,6 +648,29 @@ class TestPanel(unittest.TestCase, PanelTests, CheckIndexing,
         result = Panel(d, dtype=int)
         expected = Panel(dict((k, v.astype(int)) for k, v in d.iteritems()))
 
+    def test_constructor_resize(self):
+        data = self.panel._data
+        items = self.panel.items[:-1]
+        major = self.panel.major_axis[:-1]
+        minor = self.panel.minor_axis[:-1]
+
+        result = Panel(data, items=items, major_axis=major,
+                       minor_axis=minor)
+        expected = self.panel.reindex(items=items, major=major, minor=minor)
+        assert_panel_equal(result, expected)
+
+        result = Panel(data, items=items, major_axis=major)
+        expected = self.panel.reindex(items=items, major=major)
+        assert_panel_equal(result, expected)
+
+        result = Panel(data, items=items)
+        expected = self.panel.reindex(items=items)
+        assert_panel_equal(result, expected)
+
+        result = Panel(data, minor_axis=minor)
+        expected = self.panel.reindex(minor=minor)
+        assert_panel_equal(result, expected)
+
     def test_from_dict_mixed_orient(self):
         df = tm.makeDataFrame()
         df['foo'] = 'bar'
