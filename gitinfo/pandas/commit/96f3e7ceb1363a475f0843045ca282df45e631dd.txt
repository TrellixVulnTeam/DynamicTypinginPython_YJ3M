commit 96f3e7ceb1363a475f0843045ca282df45e631dd
Author: Andrew äº® <AndrewRyoArcher@gmail.com>
Date:   Wed May 24 19:09:25 2017 -0700

    BUG: Silence numpy warnings when broadcasting comparison ops (GH16378, GH16306) (#16433)
    
    TST: test for fix of GH16378, GH16306

diff --git a/doc/source/whatsnew/v0.20.2.txt b/doc/source/whatsnew/v0.20.2.txt
index cce30b60d..86e781276 100644
--- a/doc/source/whatsnew/v0.20.2.txt
+++ b/doc/source/whatsnew/v0.20.2.txt
@@ -43,6 +43,7 @@ Conversion
 ^^^^^^^^^^
 
 - Bug in ``pd.to_numeric()`` in which empty data inputs were causing Python to crash (:issue:`16302`)
+- Silence numpy warnings when broadcasting DataFrame to Series with comparison ops (:issue:`16378`, :issue:`16306`)
 
 
 Indexing
diff --git a/pandas/core/ops.py b/pandas/core/ops.py
index e7cfbdb0f..55473ec8d 100644
--- a/pandas/core/ops.py
+++ b/pandas/core/ops.py
@@ -1250,7 +1250,8 @@ def _flex_comp_method_FRAME(op, name, str_rep=None, default_axis='columns',
                             masker=False):
     def na_op(x, y):
         try:
-            result = op(x, y)
+            with np.errstate(invalid='ignore'):
+                result = op(x, y)
         except TypeError:
             xrav = x.ravel()
             result = np.empty(x.size, dtype=bool)
diff --git a/pandas/tests/frame/test_analytics.py b/pandas/tests/frame/test_analytics.py
index da96fce36..73c6c0e72 100644
--- a/pandas/tests/frame/test_analytics.py
+++ b/pandas/tests/frame/test_analytics.py
@@ -2081,3 +2081,16 @@ class TestNLargestNSmallest(object):
         result = df.nlargest(n, order)
         expected = df.sort_values(order, ascending=False).head(n)
         tm.assert_frame_equal(result, expected)
+
+    def test_series_broadcasting(self):
+        # smoke test for numpy warnings
+        # GH 16378, GH 16306
+        df = DataFrame([1.0, 1.0, 1.0])
+        df_nan = DataFrame({'A': [np.nan, 2.0, np.nan]})
+        s = Series([1, 1, 1])
+        s_nan = Series([np.nan, np.nan, 1])
+
+        with tm.assert_produces_warning(None):
+            df_nan.clip_lower(s, axis=0)
+            for op in ['lt', 'le', 'gt', 'ge', 'eq', 'ne']:
+                getattr(df, op)(s_nan, axis=0)
