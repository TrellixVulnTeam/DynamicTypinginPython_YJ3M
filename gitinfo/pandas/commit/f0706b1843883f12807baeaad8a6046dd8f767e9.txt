commit f0706b1843883f12807baeaad8a6046dd8f767e9
Author: Chris <cbartak@gmail.com>
Date:   Mon Aug 17 20:46:55 2015 -0500

    PERF: value_counts_float64 #10821

diff --git a/doc/source/whatsnew/v0.17.0.txt b/doc/source/whatsnew/v0.17.0.txt
index 7e69a8044..8ae2aa165 100644
--- a/doc/source/whatsnew/v0.17.0.txt
+++ b/doc/source/whatsnew/v0.17.0.txt
@@ -585,7 +585,7 @@ Performance Improvements
 - Improved performance of ``Series.isin`` for datetimelike/integer Series (:issue:`10287`)
 - 20x improvement in ``concat`` of Categoricals when categories are identical (:issue:`10587`)
 - Improved performance of ``to_datetime`` when specified format string is ISO8601 (:issue:`10178`)
-
+- 2x improvement of ``Series.value_counts`` for float dtype (:issue:`10821`)
 
 .. _whatsnew_0170.bug_fixes:
 
diff --git a/pandas/core/algorithms.py b/pandas/core/algorithms.py
index b0c7ff43b..21ace4bb1 100644
--- a/pandas/core/algorithms.py
+++ b/pandas/core/algorithms.py
@@ -245,6 +245,9 @@ def value_counts(values, sort=True, ascending=False, normalize=False,
         elif com.is_integer_dtype(dtype):
             values = com._ensure_int64(values)
             keys, counts = htable.value_count_int64(values)
+        elif com.is_float_dtype(dtype):
+            values = com._ensure_float64(values)
+            keys, counts = htable.value_count_float64(values, dropna)
 
         else:
             values = com._ensure_object(values)
diff --git a/pandas/hashtable.pyx b/pandas/hashtable.pyx
index 7dbd1b45c..fa3e2f6c4 100644
--- a/pandas/hashtable.pyx
+++ b/pandas/hashtable.pyx
@@ -866,7 +866,52 @@ cdef class Int64Factorizer:
         self.count = len(self.uniques)
         return labels
 
+@cython.boundscheck(False)
+cdef build_count_table_float64(float64_t[:] values, kh_float64_t *table, bint dropna):
+    cdef:
+        khiter_t k
+        Py_ssize_t i, n = len(values)
+        float64_t val
+        int ret = 0
+
+    with nogil:
+        kh_resize_float64(table, n)
+
+        for i in range(n):
+            val = values[i]
+            if val == val or not dropna:
+                k = kh_get_float64(table, val)
+                if k != table.n_buckets:
+                    table.vals[k] += 1
+                else:
+                    k = kh_put_float64(table, val, &ret)
+                    table.vals[k] = 1
+
+@cython.boundscheck(False)
+cpdef value_count_float64(float64_t[:] values, bint dropna):
+    cdef:
+        Py_ssize_t i
+        kh_float64_t * table
+        float64_t[:] result_keys
+        int64_t[:] result_counts
+        int k
+
+    table = kh_init_float64()
+    build_count_table_float64(values, table, dropna)
+
+    i = 0
+    result_keys = np.empty(table.n_occupied, dtype=np.float64)
+    result_counts = np.zeros(table.n_occupied, dtype=np.int64)
 
+    with nogil:
+        for k in range(table.n_buckets):
+            if kh_exist_float64(table, k):
+                result_keys[i] = table.keys[k]
+                result_counts[i] = table.vals[k]
+                i += 1
+    kh_destroy_float64(table)
+
+    return np.asarray(result_keys), np.asarray(result_counts)
 
 @cython.boundscheck(False)
 cdef build_count_table_int64(int64_t[:] values, kh_int64_t *table):
diff --git a/vb_suite/groupby.py b/vb_suite/groupby.py
index 73f5f19d6..bceb78c26 100644
--- a/vb_suite/groupby.py
+++ b/vb_suite/groupby.py
@@ -194,6 +194,15 @@ s = Series(np.tile(uniques, N // K))
 series_value_counts_strings = Benchmark('s.value_counts()', setup,
                                         start_date=datetime(2011, 10, 21))
 
+#value_counts on float dtype
+
+setup = common_setup + """
+s = Series(np.random.randint(0, 1000, size=100000)).astype(float)
+"""
+
+series_value_counts_float64 = Benchmark('s.value_counts()', setup,
+                                      start_date=datetime(2015, 8, 17))
+
 #----------------------------------------------------------------------
 # pivot_table
 
