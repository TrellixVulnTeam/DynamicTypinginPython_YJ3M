commit c0850ea7f4c04a725142408208a49072dbe04b63
Author: gfyoung <gfyoung17@gmail.com>
Date:   Tue May 31 09:12:12 2016 -0400

    ENH: add support for na_filter in Python engine
    
    Title is self-explanatory.
    
    Author: gfyoung <gfyoung17@gmail.com>
    
    Closes #13321 from gfyoung/python-engine-na-filter and squashes the following commits:
    
    186fd34 [gfyoung] ENH: add support for na_filter in Python engine

diff --git a/doc/source/whatsnew/v0.18.2.txt b/doc/source/whatsnew/v0.18.2.txt
index 2b67aca1d..be38adb96 100644
--- a/doc/source/whatsnew/v0.18.2.txt
+++ b/doc/source/whatsnew/v0.18.2.txt
@@ -75,6 +75,7 @@ Other enhancements
     pd.Timestamp(year=2012, month=1, day=1, hour=8, minute=30)
 
 - The ``pd.read_csv()`` with ``engine='python'`` has gained support for the ``decimal`` option (:issue:`12933`)
+- The ``pd.read_csv()`` with ``engine='python'`` has gained support for the ``na_filter`` option (:issue:`13321`)
 
 - ``Index.astype()`` now accepts an optional boolean argument ``copy``, which allows optional copying if the requirements on dtype are satisfied (:issue:`13209`)
 - ``Index`` now supports the ``.where()`` function for same shape indexing (:issue:`13170`)
diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index bf4083f61..394fe1a98 100755
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -425,7 +425,6 @@ _fwf_defaults = {
 _c_unsupported = set(['skip_footer'])
 _python_unsupported = set([
     'as_recarray',
-    'na_filter',
     'compact_ints',
     'use_unsigned',
     'low_memory',
@@ -1188,8 +1187,13 @@ class ParserBase(object):
         result = {}
         for c, values in compat.iteritems(dct):
             conv_f = None if converters is None else converters.get(c, None)
-            col_na_values, col_na_fvalues = _get_na_values(c, na_values,
-                                                           na_fvalues)
+
+            if self.na_filter:
+                col_na_values, col_na_fvalues = _get_na_values(
+                    c, na_values, na_fvalues)
+            else:
+                col_na_values, col_na_fvalues = set(), set()
+
             coerce_type = True
             if conv_f is not None:
                 try:
@@ -1634,6 +1638,8 @@ class PythonParser(ParserBase):
 
         self.names_passed = kwds['names'] or None
 
+        self.na_filter = kwds['na_filter']
+
         self.has_index_names = False
         if 'has_index_names' in kwds:
             self.has_index_names = kwds['has_index_names']
diff --git a/pandas/io/tests/parser/c_parser_only.py b/pandas/io/tests/parser/c_parser_only.py
index 9dde669c9..00c4e0a1c 100644
--- a/pandas/io/tests/parser/c_parser_only.py
+++ b/pandas/io/tests/parser/c_parser_only.py
@@ -61,12 +61,6 @@ class CParserTests(object):
                              columns=['a', 'b', 'c'])
         tm.assert_frame_equal(df, expected)
 
-    def test_parse_dates_empty_string(self):
-        # see gh-2263
-        s = StringIO("Date, test\n2012-01-01, 1\n,2")
-        result = self.read_csv(s, parse_dates=["Date"], na_filter=False)
-        self.assertTrue(result['Date'].isnull()[1])
-
     def test_dtype_and_names_error(self):
         # see gh-8833: passing both dtype and names
         # resulting in an error reporting issue
diff --git a/pandas/io/tests/parser/common.py b/pandas/io/tests/parser/common.py
index 2e3c10294..44892dc17 100644
--- a/pandas/io/tests/parser/common.py
+++ b/pandas/io/tests/parser/common.py
@@ -1319,10 +1319,8 @@ j,-inF"""
         df = self.read_csv(StringIO(data), index_col=0)
         tm.assert_almost_equal(df['A'].values, expected.values)
 
-        if self.engine == 'c':
-            # TODO: remove condition when 'na_filter' is supported for Python
-            df = self.read_csv(StringIO(data), index_col=0, na_filter=False)
-            tm.assert_almost_equal(df['A'].values, expected.values)
+        df = self.read_csv(StringIO(data), index_col=0, na_filter=False)
+        tm.assert_almost_equal(df['A'].values, expected.values)
 
     def test_raise_on_no_columns(self):
         # single newline
diff --git a/pandas/io/tests/parser/na_values.py b/pandas/io/tests/parser/na_values.py
index 4705fd08a..d826ae536 100644
--- a/pandas/io/tests/parser/na_values.py
+++ b/pandas/io/tests/parser/na_values.py
@@ -223,3 +223,21 @@ g,7,seven
                         'Three': ['None', 'two', 'None', 'nan', 'five', '',
                                   'seven']})
         tm.assert_frame_equal(xp.reindex(columns=df.columns), df)
+
+    def test_na_values_na_filter_override(self):
+        data = """\
+A,B
+1,A
+nan,B
+3,C
+"""
+
+        expected = DataFrame([[1, 'A'], [np.nan, np.nan], [3, 'C']],
+                             columns=['A', 'B'])
+        out = self.read_csv(StringIO(data), na_values=['B'], na_filter=True)
+        tm.assert_frame_equal(out, expected)
+
+        expected = DataFrame([['1', 'A'], ['nan', 'B'], ['3', 'C']],
+                             columns=['A', 'B'])
+        out = self.read_csv(StringIO(data), na_values=['B'], na_filter=False)
+        tm.assert_frame_equal(out, expected)
diff --git a/pandas/io/tests/parser/parse_dates.py b/pandas/io/tests/parser/parse_dates.py
index ec368bb35..01816bde6 100644
--- a/pandas/io/tests/parser/parse_dates.py
+++ b/pandas/io/tests/parser/parse_dates.py
@@ -467,3 +467,10 @@ KORD6,19990127, 23:00:00, 22:56:00, -0.5900, 1.7100, 4.6000, 0.0000, 280.0000
                               StringIO(data), parse_dates=np.array([4, 5]))
         tm.assertRaisesRegexp(TypeError, errmsg, self.read_csv,
                               StringIO(data), parse_dates=set([1, 3, 3]))
+
+    def test_parse_dates_empty_string(self):
+        # see gh-2263
+        data = "Date, test\n2012-01-01, 1\n,2"
+        result = self.read_csv(StringIO(data), parse_dates=["Date"],
+                               na_filter=False)
+        self.assertTrue(result['Date'].isnull()[1])
