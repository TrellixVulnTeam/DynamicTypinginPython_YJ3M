commit db35ff455227d1b705509966740d3d6607faa3d9
Author: sinhrks <sinhrks@gmail.com>
Date:   Sat Apr 30 10:27:04 2016 -0400

    TST/BUG: DataFrame truncated repr with DatetimeTz and NaT column
    
    closes #12211
    
    Author: sinhrks <sinhrks@gmail.com>
    
    Closes #13039 from sinhrks/format_tz and squashes the following commits:
    
    44d2e2b [sinhrks] TST/BUG: DataFrame truncated repr with DatetimeTz and NaT column

diff --git a/doc/source/whatsnew/v0.18.1.txt b/doc/source/whatsnew/v0.18.1.txt
index 0bea8430b..64fb5a3c7 100644
--- a/doc/source/whatsnew/v0.18.1.txt
+++ b/doc/source/whatsnew/v0.18.1.txt
@@ -494,13 +494,13 @@ Bug Fixes
 - Bug in printing data which contains ``Period`` with different ``freq`` raises ``ValueError`` (:issue:`12615`)
 - Bug in numpy compatibility of ``np.round()`` on a ``Series`` (:issue:`12600`)
 - Bug in ``Series`` construction with ``Categorical`` and ``dtype='category'`` is specified (:issue:`12574`)
-- Bugs in concatenation with a coercable dtype was too aggressive. (:issue:`12411`, :issue:`12045`, :issue:`11594`, :issue:`10571`)
+- Bugs in concatenation with a coercable dtype was too aggressive. (:issue:`12411`, :issue:`12045`, :issue:`11594`, :issue:`10571`, :issue:`12211`)
 - Bug in ``float_format`` option with option not being validated as a callable. (:issue:`12706`)
 - Bug in ``GroupBy.filter`` when ``dropna=False`` and no groups fulfilled the criteria (:issue:`12768`)
 - Bug in ``__name__`` of ``.cum*`` functions (:issue:`12021`)
 - Bug in ``.astype()`` of a ``Float64Inde/Int64Index`` to an ``Int64Index`` (:issue:`12881`)
 - Bug in roundtripping an integer based index in ``.to_json()/.read_json()`` when ``orient='index'`` (the default) (:issue:`12866`)
-
+- Bug in plotting ``Categorical`` dtypes cause error when attempting stacked bar plot (:issue:`13019`)
 - Compat with >= numpy 1.11 for NaT comparions (:issue:`12969`)
 - Bug in ``.drop()`` with a non-unique ``MultiIndex``. (:issue:`12701`)
 - Bug in ``.concat`` of datetime tz-aware and naive DataFrames (:issue:`12467`)
diff --git a/pandas/tests/formats/test_format.py b/pandas/tests/formats/test_format.py
index 47e114784..fafc4d04d 100644
--- a/pandas/tests/formats/test_format.py
+++ b/pandas/tests/formats/test_format.py
@@ -732,19 +732,9 @@ class TestDataFrameFormatting(tm.TestCase):
 
     def test_truncate_with_different_dtypes(self):
 
-        # 11594, 12045, 12211
+        # 11594, 12045
         # when truncated the dtypes of the splits can differ
 
-        # 12211
-        df = DataFrame({'date' : [pd.Timestamp('20130101').tz_localize('UTC')] + [pd.NaT]*5})
-
-        with option_context("display.max_rows", 5):
-            result = str(df)
-            self.assertTrue('2013-01-01 00:00:00+00:00' in result)
-            self.assertTrue('NaT' in result)
-            self.assertTrue('...' in result)
-            self.assertTrue('[6 rows x 1 columns]' in result)
-
         # 11594
         import datetime
         s = Series([datetime.datetime(2012, 1, 1)]*10 + [datetime.datetime(1012,1,2)] + [datetime.datetime(2012, 1, 3)]*10)
@@ -761,6 +751,58 @@ class TestDataFrameFormatting(tm.TestCase):
             self.assertTrue('None' in result)
             self.assertFalse('NaN' in result)
 
+    def test_datetimelike_frame(self):
+
+        # GH 12211
+        df = DataFrame({'date' : [pd.Timestamp('20130101').tz_localize('UTC')] + [pd.NaT]*5})
+
+        with option_context("display.max_rows", 5):
+            result = str(df)
+            self.assertTrue('2013-01-01 00:00:00+00:00' in result)
+            self.assertTrue('NaT' in result)
+            self.assertTrue('...' in result)
+            self.assertTrue('[6 rows x 1 columns]' in result)
+
+        dts = [pd.Timestamp('2011-01-01', tz='US/Eastern')] * 5 + [pd.NaT] * 5
+        df = pd.DataFrame({"dt": dts,
+                           "x": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})
+        with option_context('display.max_rows', 5):
+            expected = ('                          dt   x\n'
+                        '0  2011-01-01 00:00:00-05:00   1\n'
+                        '1  2011-01-01 00:00:00-05:00   2\n'
+                        '..                       ...  ..\n'
+                        '8                        NaT   9\n'
+                        '9                        NaT  10\n\n'
+                        '[10 rows x 2 columns]')
+            self.assertEqual(repr(df), expected)
+
+        dts = [pd.NaT] * 5 + [pd.Timestamp('2011-01-01', tz='US/Eastern')] * 5
+        df = pd.DataFrame({"dt": dts,
+                           "x": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})
+        with option_context('display.max_rows', 5):
+            expected = ('                          dt   x\n'
+                        '0                        NaT   1\n'
+                        '1                        NaT   2\n'
+                        '..                       ...  ..\n'
+                        '8  2011-01-01 00:00:00-05:00   9\n'
+                        '9  2011-01-01 00:00:00-05:00  10\n\n'
+                        '[10 rows x 2 columns]')
+            self.assertEqual(repr(df), expected)
+
+        dts = ([pd.Timestamp('2011-01-01', tz='Asia/Tokyo')] * 5 +
+               [pd.Timestamp('2011-01-01', tz='US/Eastern')] * 5)
+        df = pd.DataFrame({"dt": dts,
+                           "x": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]})
+        with option_context('display.max_rows', 5):
+            expected = ('                           dt   x\n'
+                        '0   2011-01-01 00:00:00+09:00   1\n'
+                        '1   2011-01-01 00:00:00+09:00   2\n'
+                        '..                        ...  ..\n'
+                        '8   2011-01-01 00:00:00-05:00   9\n'
+                        '9   2011-01-01 00:00:00-05:00  10\n\n'
+                        '[10 rows x 2 columns]')
+            self.assertEqual(repr(df), expected)
+
     def test_to_html_with_col_space(self):
         def check_with_width(df, col_space):
             import re
