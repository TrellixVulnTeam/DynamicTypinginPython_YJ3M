commit 6b156d62422b2b51f88d41bb080030c950470025
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Jan 5 15:25:15 2011 -0500

    cast to float in Series.map when have missing values in int array

diff --git a/pandas/core/series.py b/pandas/core/series.py
index 40c4ab140..73084583f 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -752,9 +752,15 @@ class Series(np.ndarray, Picklable, Groupable):
                 arg = Series(arg)
 
             indexer, mask = tseries.getMergeVec(self, arg.index.indexMap)
+            notmask = -mask
 
             newValues = arg.view(np.ndarray).take(indexer)
-            np.putmask(newValues, -mask, np.nan)
+
+            if notmask.any():
+                if issubclass(newValues.dtype.type, np.integer):
+                    newValues = newValues.astype(float)
+
+                np.putmask(newValues, -mask, np.nan)
 
             newSer = Series(newValues, index=self.index)
             return newSer
diff --git a/pandas/core/tests/test_series.py b/pandas/core/tests/test_series.py
index 222d8a6ad..d3f372c33 100644
--- a/pandas/core/tests/test_series.py
+++ b/pandas/core/tests/test_series.py
@@ -595,6 +595,18 @@ class TestSeries(unittest.TestCase):
         for k, v in merged.iteritems():
             self.assertEqual(v, source[target[k]])
 
+    def test_merge_int(self):
+        left = Series({'a' : 1., 'b' : 2., 'c' : 3., 'd' : 4})
+        right = Series({1 : 11, 2 : 22, 3 : 33})
+
+        self.assert_(left.dtype == np.float_)
+        self.assert_(issubclass(right.dtype.type, np.integer))
+
+        merged = left.merge(right)
+        self.assert_(merged.dtype == np.float_)
+        self.assert_(isnull(merged['d']))
+        self.assert_(not isnull(merged['c']))
+
     def test_reindex(self):
         identity = self.series.reindex(self.series.index)
         self.assertEqual(id(self.series.index), id(identity.index))
