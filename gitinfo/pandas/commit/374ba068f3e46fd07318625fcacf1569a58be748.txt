commit 374ba068f3e46fd07318625fcacf1569a58be748
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Apr 9 11:31:41 2012 -0400

    ENH: can do non-integer label slicing in DataFrame.__getitem__, close #946

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 383c981dc..988a8594f 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1416,7 +1416,13 @@ class DataFrame(NDFrame):
     def __getitem__(self, key):
         # slice rows
         if isinstance(key, slice):
-            new_data = self._data.get_slice(key, axis=1)
+            from pandas.core.indexing import _is_index_slice
+            if self.index.inferred_type == 'integer' or _is_index_slice(key):
+                indexer = key
+            else:
+                indexer = self.ix._convert_to_indexer(key, axis=0)
+
+            new_data = self._data.get_slice(indexer, axis=1)
             return self._constructor(new_data)
         # either boolean or fancy integer index
         elif isinstance(key, (np.ndarray, list)):
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 760f4d123..c1893ddef 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -840,6 +840,27 @@ class CheckIndexing(object):
         expected = [nan, 'qux', nan, 'qux', nan]
         assert_almost_equal(df['str'].values, expected)
 
+    def test_getitem_setitem_non_ix_labels(self):
+        df = tm.makeTimeDataFrame()
+
+        start, end = df.index[[5, 10]]
+
+        result = df.ix[start:end]
+        result2 = df[start:end]
+        expected = df[5:11]
+        assert_frame_equal(result, expected)
+        assert_frame_equal(result2, expected)
+
+        # not implementing this yet
+
+        # exp = df.copy()
+        # exp[5:10] = exp[-5:].values
+
+        # # setting
+
+        # df[start:end] = df[-5:].values
+        # assert_frame_equal(df, exp)
+
     def test_setitem_fancy_exceptions(self):
         pass
 
