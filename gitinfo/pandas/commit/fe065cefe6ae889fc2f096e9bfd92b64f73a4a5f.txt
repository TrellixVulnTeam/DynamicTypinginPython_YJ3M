commit fe065cefe6ae889fc2f096e9bfd92b64f73a4a5f
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Mar 13 16:40:55 2012 -0400

    ENH: add level keyword to drop method, GH #159

diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 797562f8a..7ab43b662 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -156,7 +156,7 @@ class PandasObject(Picklable):
 
         return self.reindex(**{axis_name : new_axis})
 
-    def drop(self, labels, axis=0):
+    def drop(self, labels, axis=0, level=None):
         """
         Return new object with labels in requested axis removed
 
@@ -164,6 +164,8 @@ class PandasObject(Picklable):
         ----------
         labels : array-like
         axis : int
+        level : int or name, default None
+            For MultiIndex
 
         Returns
         -------
@@ -171,7 +173,13 @@ class PandasObject(Picklable):
         """
         axis_name = self._get_axis_name(axis)
         axis = self._get_axis(axis)
-        new_axis = axis.drop(labels)
+
+        if level is not None:
+            assert(isinstance(axis, MultiIndex))
+            new_axis = axis.drop(labels, level=level)
+        else:
+            new_axis = axis.drop(labels)
+
         return self.reindex(**{axis_name : new_axis})
 
     def sort_index(self, axis=0, ascending=True):
@@ -316,7 +324,7 @@ class NDFrame(PandasObject):
         Delete item
         """
         deleted = False
-        if (hasattr(self,'columns') and 
+        if (hasattr(self,'columns') and
                 isinstance(self.columns, MultiIndex)
                 and key not in self.columns):
             # Allow shorthand to delete all columns whose first len(key)
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 89ddd46f3..21c8062e7 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1446,7 +1446,7 @@ class MultiIndex(Index):
     def argsort(self, *args, **kwargs):
         return self.values.argsort()
 
-    def drop(self, labels):
+    def drop(self, labels, level=None):
         """
         Make new MultiIndex with passed list of labels deleted
 
@@ -1454,11 +1454,15 @@ class MultiIndex(Index):
         ----------
         labels : array-like
             Must be a list of tuples
+        level : int or name, default None
 
         Returns
         -------
         dropped : MultiIndex
         """
+        if level is not None:
+            return self._drop_from_level(labels, level)
+
         try:
             if not isinstance(labels, np.ndarray):
                 labels = com._asarray_tuplesafe(labels)
@@ -1481,6 +1485,15 @@ class MultiIndex(Index):
 
         return self.delete(inds)
 
+    def _drop_from_level(self, labels, level):
+        i = self._get_level_number(level)
+        index = self.levels[i]
+        values = index.get_indexer(labels)
+
+        mask = -lib.ismember(self.labels[i], set(values))
+
+        return self[mask]
+
     def droplevel(self, level=0):
         """
         Return Index with requested level removed. If MultiIndex has only 2
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index 07eec5c24..f0beba08e 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -1118,18 +1118,18 @@ x   q   30      3    -0.6662 -0.5243 -0.3580  0.89145  2.5838"""
         tuples.sort()
         index = MultiIndex.from_tuples(tuples)
         df = DataFrame(randn(4,6),columns = index)
-            
+
         result = df['a']
         expected = df['a','','']
         assert_series_equal(result, expected)
         self.assertEquals(result.name, 'a')
-        
+
         result = df['routine1','result1']
         expected = df['routine1','result1','']
         assert_series_equal(result, expected)
         self.assertEquals(result.name, ('routine1', 'result1'))
 
-    def test_mixed_depth_insert(self):  
+    def test_mixed_depth_insert(self):
         arrays = [[  'a', 'top', 'top', 'routine1', 'routine1', 'routine2'],
                   [   '',  'OD',  'OD', 'result1',   'result2',  'result1'],
                   [   '',  'wx',  'wy',        '',          '',         '']]
@@ -1137,15 +1137,15 @@ x   q   30      3    -0.6662 -0.5243 -0.3580  0.89145  2.5838"""
         tuples = zip(*arrays)
         tuples.sort()
         index = MultiIndex.from_tuples(tuples)
-        df = DataFrame(randn(4,6),columns = index)     
+        df = DataFrame(randn(4,6),columns = index)
 
         result = df.copy()
         expected = df.copy()
         result['b'] = [1,2,3,4]
         expected['b','',''] = [1,2,3,4]
         assert_frame_equal(result, expected)
- 
-    def test_mixed_depth_drop(self):  
+
+    def test_mixed_depth_drop(self):
         arrays = [[  'a', 'top', 'top', 'routine1', 'routine1', 'routine2'],
                   [   '',  'OD',  'OD', 'result1',   'result2',  'result1'],
                   [   '',  'wx',  'wy',        '',          '',         '']]
@@ -1153,18 +1153,18 @@ x   q   30      3    -0.6662 -0.5243 -0.3580  0.89145  2.5838"""
         tuples = zip(*arrays)
         tuples.sort()
         index = MultiIndex.from_tuples(tuples)
-        df = DataFrame(randn(4,6),columns = index)     
+        df = DataFrame(randn(4,6),columns = index)
 
         result = df.drop('a',axis=1)
         expected = df.drop([('a','','')],axis=1)
         assert_frame_equal(expected, result)
-        
+
         result = df.drop(['top'],axis=1)
         expected = df.drop([('top','OD','wx')], axis=1)
         expected = expected.drop([('top','OD','wy')], axis=1)
         assert_frame_equal(expected, result)
-               
-    def test_mixed_depth_pop(self):  
+
+    def test_mixed_depth_pop(self):
         arrays = [[  'a', 'top', 'top', 'routine1', 'routine1', 'routine2'],
                   [   '',  'OD',  'OD', 'result1',   'result2',  'result1'],
                   [   '',  'wx',  'wy',        '',          '',         '']]
@@ -1172,7 +1172,7 @@ x   q   30      3    -0.6662 -0.5243 -0.3580  0.89145  2.5838"""
         tuples = zip(*arrays)
         tuples.sort()
         index = MultiIndex.from_tuples(tuples)
-        df = DataFrame(randn(4,6),columns = index)     
+        df = DataFrame(randn(4,6),columns = index)
 
         df1 = df.copy()
         df2 = df.copy()
@@ -1181,14 +1181,30 @@ x   q   30      3    -0.6662 -0.5243 -0.3580  0.89145  2.5838"""
         assert_series_equal(expected, result)
         assert_frame_equal(df1, df2)
         self.assertEquals(result.name,'a')
-        
+
         expected = df1['top']
         df1 = df1.drop(['top'],axis=1)
         result = df2.pop('top')
         assert_frame_equal(expected, result)
         assert_frame_equal(df1, df2)
-            
-        
+
+    def test_drop_level(self):
+        result = self.frame.drop(['bar', 'qux'], level='first')
+        expected = self.frame.ix[[0, 1, 2, 5, 6]]
+        assert_frame_equal(result, expected)
+
+        result = self.frame.drop(['two'], level='second')
+        expected = self.frame.ix[[0, 2, 3, 6, 7, 9]]
+        assert_frame_equal(result, expected)
+
+        result = self.frame.T.drop(['bar', 'qux'], axis=1, level='first')
+        expected = self.frame.ix[[0, 1, 2, 5, 6]].T
+        assert_frame_equal(result, expected)
+
+        result = self.frame.T.drop(['two'], axis=1, level='second')
+        expected = self.frame.ix[[0, 2, 3, 6, 7, 9]].T
+        assert_frame_equal(result, expected)
+
 if __name__ == '__main__':
 
     # unittest.main()
