commit b4900b731a03d717610aff5ad28e43534f90212b
Author: Adam Klein <adamklein@gmail.com>
Date:   Thu Feb 16 22:33:20 2012 -0500

    fixed shift conflict with old code

diff --git a/pandas/core/index.py b/pandas/core/index.py
index 65d033fca..a43b8bc19 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1198,17 +1198,20 @@ class DatetimeIndex(Int64Index):
                                   % (np.datetime64(failure), freq))
             return DatetimeIndex._quickbuilder(self.name, freq, self.values,
                                                self.first, regular)
-    #def shift(self, n=1):
-    #    if self.freq is None:
-    #        raise ValueError("Cannot shift, frequency of index is empty")
-
-    #    if self.regular:
-    #        return self._construct_from_cache(self.name, self.freq, self.cache,
-    #                                          self.first+n, self.last+n)
-    #    else:
-    #        data = lib.fast_shift(self.asi8, self.freq, n)
-    #        return DatetimeIndex._quickbuilder(self.name, self.freq, data,
-    #                                           self.first)
+    def fshift(self, n=1):
+        """
+        Frequency shift, use frequency of the DatetimeIndex to shift
+        """
+        if self.freq is None:
+            raise ValueError("Cannot shift, frequency of index is empty")
+
+        if self.regular:
+            return self._construct_from_cache(self.name, self.freq, self.cache,
+                                              self.first+n, self.last+n)
+        else:
+            data = lib.fast_shift(self.asi8, self.freq, n)
+            return DatetimeIndex._quickbuilder(self.name, self.freq, data,
+                                               self.first)
 
     def __getitem__(self, key):
         """Override numpy.ndarray's __getitem__ method to work as desired"""
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 031a1a317..de5b27d34 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -18,7 +18,7 @@ from pandas.core.common import (isnull, notnull, _is_bool_indexer,
                                 _asarray_tuplesafe)
 from pandas.core.daterange import DateRange
 from pandas.core.index import (Index, MultiIndex, InvalidIndexError,
-                               _ensure_index)
+                               _ensure_index, DatetimeIndex)
 from pandas.core.indexing import _SeriesIndexer
 from pandas.util import py3compat
 from pandas.util.terminal import get_terminal_size
@@ -187,6 +187,9 @@ class Series(np.ndarray, generic.PandasObject):
             else:
                 index = _ensure_index(index)
             try:
+                if isinstance(index, DatetimeIndex):
+                    # coerce back to datetime objects for lookup
+                    index = index.astype('O')
                 data = lib.fast_multiget(data, index, default=np.nan)
             except TypeError:
                 data = [data.get(i, nan) for i in index]
diff --git a/pandas/tests/test_datetime64.py b/pandas/tests/test_datetime64.py
index f48b591dc..912b46cdb 100644
--- a/pandas/tests/test_datetime64.py
+++ b/pandas/tests/test_datetime64.py
@@ -205,13 +205,13 @@ class TestDatetime64(unittest.TestCase):
         dti = DatetimeIndex(freq='W@TUE', start=datetime(2005,1,4), n=100)
 
         # fast shift
-        self.assert_(dti.shift(1)[0] == datetime(2005,1,11))
-        self.assert_(dti.shift(-1)[0] == datetime(2004,12,28))
+        self.assert_(dti.fshift(1)[0] == datetime(2005,1,11))
+        self.assert_(dti.fshift(-1)[0] == datetime(2004,12,28))
 
         # slow shift
         dti.contiguous = False
-        self.assert_(dti.shift(1)[0] == datetime(2005,1,11))
-        self.assert_(dti.shift(-1)[0] == datetime(2004,12,28))
+        self.assert_(dti.fshift(1)[0] == datetime(2005,1,11))
+        self.assert_(dti.fshift(-1)[0] == datetime(2004,12,28))
 
     def test_datetimecache(self):
         lib.flush_tcache('W@TUE')
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 40902483b..600fd26de 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -103,7 +103,7 @@ class TestIndex(unittest.TestCase):
         self.assert_(np.isnan(self.dateIndex.asof(d - timedelta(1))))
 
         d = self.dateIndex[-1]
-        self.assert_(self.dateIndex.asof(d + timedelta(1)) is d)
+        self.assert_(self.dateIndex.asof(d + timedelta(1)) == d)
 
     def test_argsort(self):
         result = self.strIndex.argsort()
