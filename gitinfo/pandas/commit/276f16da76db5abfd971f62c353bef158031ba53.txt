commit 276f16da76db5abfd971f62c353bef158031ba53
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Sat Nov 2 12:48:22 2019 -0700

    CLN: requested follow-ups (#29360)
    
    * follow-up to #29314
    
    * followup to #28289

diff --git a/pandas/_libs/algos.pyx b/pandas/_libs/algos.pyx
index e3c7fef6f..a08ae6686 100644
--- a/pandas/_libs/algos.pyx
+++ b/pandas/_libs/algos.pyx
@@ -380,6 +380,18 @@ ctypedef fused algos_t:
 
 
 def _validate_limit(nobs: int, limit=None) -> int:
+    """
+    Check that the `limit` argument is a positive integer.
+
+    Parameters
+    ----------
+    nobs : int
+    limit : object
+
+    Returns
+    -------
+    int
+    """
     if limit is None:
         lim = nobs
     else:
diff --git a/pandas/core/internals/blocks.py b/pandas/core/internals/blocks.py
index 51108d9a5..448d2faf8 100644
--- a/pandas/core/internals/blocks.py
+++ b/pandas/core/internals/blocks.py
@@ -7,7 +7,7 @@ import warnings
 
 import numpy as np
 
-from pandas._libs import NaT, lib, tslib, writers
+from pandas._libs import NaT, algos as libalgos, lib, tslib, writers
 from pandas._libs.index import convert_scalar
 import pandas._libs.internals as libinternals
 from pandas._libs.tslibs import Timedelta, conversion
@@ -393,10 +393,7 @@ class Block(PandasObject):
 
         mask = isna(self.values)
         if limit is not None:
-            if not is_integer(limit):
-                raise ValueError("Limit must be an integer")
-            if limit < 1:
-                raise ValueError("Limit must be greater than 0")
+            limit = libalgos._validate_limit(None, limit=limit)
             mask[mask.cumsum(self.ndim - 1) > limit] = False
 
         if not self._can_hold_na:
diff --git a/pandas/core/missing.py b/pandas/core/missing.py
index f2655c126..5a1bf6d37 100644
--- a/pandas/core/missing.py
+++ b/pandas/core/missing.py
@@ -11,7 +11,6 @@ from pandas.core.dtypes.common import (
     ensure_float64,
     is_datetime64_dtype,
     is_datetime64tz_dtype,
-    is_integer,
     is_integer_dtype,
     is_numeric_v_string_like,
     is_scalar,
@@ -191,13 +190,7 @@ def interpolate_1d(
             )
 
     # default limit is unlimited GH #16282
-    if limit is None:
-        # limit = len(xvalues)
-        pass
-    elif not is_integer(limit):
-        raise ValueError("Limit must be an integer")
-    elif limit < 1:
-        raise ValueError("Limit must be greater than 0")
+    limit = algos._validate_limit(nobs=None, limit=limit)
 
     from pandas import Series
 
diff --git a/pandas/tests/reductions/test_reductions.py b/pandas/tests/reductions/test_reductions.py
index a04f8f0df..4dfe56183 100644
--- a/pandas/tests/reductions/test_reductions.py
+++ b/pandas/tests/reductions/test_reductions.py
@@ -299,15 +299,6 @@ class TestIndexReductions:
         result = td.to_frame().std()
         assert result[0] == expected
 
-        # invalid ops
-        for op in ["skew", "kurt", "sem", "prod", "var"]:
-            msg = "reduction operation '{}' not allowed for this dtype"
-            with pytest.raises(TypeError, match=msg.format(op)):
-                getattr(td, op)()
-
-            with pytest.raises(TypeError, match=msg.format(op)):
-                getattr(td.to_frame(), op)(numeric_only=False)
-
         # GH#10040
         # make sure NaT is properly handled by median()
         s = Series([Timestamp("2015-02-03"), Timestamp("2015-02-07")])
@@ -318,6 +309,22 @@ class TestIndexReductions:
         )
         assert s.diff().median() == timedelta(days=6)
 
+    @pytest.mark.parametrize("opname", ["skew", "kurt", "sem", "prod", "var"])
+    def test_invalid_td64_reductions(self, opname):
+        s = Series(
+            [Timestamp("20130101") + timedelta(seconds=i * i) for i in range(10)]
+        )
+        td = s.diff()
+
+        msg = "reduction operation '{op}' not allowed for this dtype"
+        msg = msg.format(op=opname)
+
+        with pytest.raises(TypeError, match=msg):
+            getattr(td, opname)()
+
+        with pytest.raises(TypeError, match=msg):
+            getattr(td.to_frame(), opname)(numeric_only=False)
+
     def test_minmax_tz(self, tz_naive_fixture):
         tz = tz_naive_fixture
         # monotonic
