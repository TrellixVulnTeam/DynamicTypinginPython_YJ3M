commit 6c537e4b7ccaa401feaf31c4da611efd3d464c60
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Jun 6 00:27:23 2010 +0000

    docstring fixed, setup.py versioning help
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@189 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/doc/source/conf.py b/doc/source/conf.py
index 389a1b36d..30ea6b65c 100644
--- a/doc/source/conf.py
+++ b/doc/source/conf.py
@@ -64,7 +64,30 @@ copyright = u'2008-2010, AQR Capital Management, LLC'
 #
 # The short X.Y version.
 import pandas
-version = pandas.__version__
+
+def svn_version():
+    import os, subprocess, re, warnings
+    env = os.environ.copy()
+    env['LC_ALL'] = 'C'
+    try:
+        out = subprocess.Popen(['svn', 'info'], stdout=subprocess.PIPE,
+                env=env).communicate()[0]
+    except OSError:
+        warnings.warn(" --- Could not run svn info --- ")
+        return ""
+
+    r = re.compile('Revision: ([0-9]+)')
+    svnver = None
+    for line in out.split('\n'):
+        m = r.match(line)
+        if m:
+            svnver = m.group(1)
+
+    if not svnver:
+        raise ValueError("Error while parsing svn version ?")
+    return svnver
+
+version = '%s r%s' % (pandas.__version__, svn_version())
 
 # The full version, including alpha/beta/rc tags.
 release = version
diff --git a/doc/source/dataframe.rst b/doc/source/dataframe.rst
index 5a60d686d..ce416ba03 100644
--- a/doc/source/dataframe.rst
+++ b/doc/source/dataframe.rst
@@ -112,13 +112,15 @@ attribute and **cols** method, respectively:
    DataFrame.cols
    DataFrame.info
 
+.. _dataframe.cons:
+
 Construction
 ------------
 
 There are many ways to create a DataFrame:
 
    * From a dict of ndarrays or Series
-   * From a 2D ndarray plus corresponding row and column labels
+   * From a 2D ndarray, optionally providing row and column labels
    * From a NumPy structured (record) array
    * From a nested dictionary
 
@@ -138,7 +140,6 @@ Indexing
     Series". However, it is always desirable to keep the interface
     simple and intuitive.
 
-
 DataFrame's basic indexing accesses the **columns** by name, producing
 Series:
 
diff --git a/doc/source/datetools.rst b/doc/source/datetools.rst
index 8d99951d2..75197dc7c 100644
--- a/doc/source/datetools.rst
+++ b/doc/source/datetools.rst
@@ -1,8 +1,17 @@
+.. currentmodule:: pandas
+
 .. _datetools:
 
-***************************************
-DateRange, date offsets, and time rules
-***************************************
+************************
+Date and frequency tools
+************************
+
+
+
+.. _datetools.offsets:
+
+DateOffset and subclasses
+-------------------------
 
 It is often necessary to do non-standard date logic, adding business
 days, rolling to the next month or quarter end, rolling to the next
@@ -22,7 +31,7 @@ dateutil.relativedelta, which works like:
 
     In [319]: d = datetime(2008, 8, 18)
 
-    In [321]: d + relativedelta(months = 4, days = 5)
+    In [321]: d + relativedelta(months=4, days=5)
     Out[321]: datetime.datetime(2008, 12, 23, 0, 0)
 
 
@@ -33,7 +42,7 @@ name):
 
 ::
 
-	In [323]: d + daterange.DateOffset(months = 4, days = 5)
+	In [323]: d + daterange.DateOffset(months=4, days=5)
 	Out[323]: datetime.datetime(2008, 12, 23, 0, 0)
 
 
@@ -93,23 +102,6 @@ where you might otherwise create a lambda, for example:
     map(daterange.bday, dateList) versus
     map(lambda x: x + daterange.bday, dateList)
 
-The DateRange class utilizes these offsets (and any ones that we might
-add) to generate lists of dates for general purposes:
-
-::
-
-    In [327]: DateRange(fromDate = d, nPeriods = 10, offset = daterange.bmonthEnd)
-    Out[327]:
-    [datetime.datetime(2008, 8, 29, 0, 0),
-     datetime.datetime(2008, 9, 30, 0, 0),
-     datetime.datetime(2008, 10, 31, 0, 0),
-     datetime.datetime(2008, 11, 28, 0, 0),
-     datetime.datetime(2008, 12, 31, 0, 0),
-     datetime.datetime(2009, 1, 30, 0, 0),
-     datetime.datetime(2009, 2, 27, 0, 0),
-     datetime.datetime(2009, 3, 31, 0, 0),
-     datetime.datetime(2009, 4, 30, 0, 0),
-     datetime.datetime(2009, 5, 29, 0, 0)]
 
 
 One can also specify a 'toDate', the endpoints are included if and
@@ -142,7 +134,7 @@ by some amount:
     2008-05-30 00:00:00     0.031957
     2008-06-30 00:00:00     -0.058455
 
-    In [335]: ts.shift(5, offset = daterange.bday)
+    In [335]: ts.shift(5, offset=daterange.bday)
     Out[335]:
     2007-10-05 00:00:00     0.01025
     2007-11-07 00:00:00     0.0059684
@@ -155,7 +147,80 @@ by some amount:
     2008-06-06 00:00:00     0.031957
     2008-07-07 00:00:00     -0.058455
 
+.. csv-table::
+    :header: "Class name", "Description"
+    :widths: 15, 65
+
+    DateOffset, ""
+    BDay, ""
+    Week, ""
+    MonthEnd, ""
+    BMonthEnd, ""
+    YearEnd, ""
+    YearBegin, ""
+    BYearEnd, ""
+    Hour, ""
+    Minute, ""
+    Second, ""
+
+.. _daterange:
+
+Creating date ranges (DateRange)
+--------------------------------
+
+The DateRange class utilizes these offsets (and any ones that we might
+add) to generate lists of dates for general purposes:
+
+::
+
+    In [327]: DateRange(fromDate=d, nPeriods=10, offset=daterange.bmonthEnd)
+    Out[327]:
+    [datetime.datetime(2008, 8, 29, 0, 0),
+     datetime.datetime(2008, 9, 30, 0, 0),
+     datetime.datetime(2008, 10, 31, 0, 0),
+     datetime.datetime(2008, 11, 28, 0, 0),
+     datetime.datetime(2008, 12, 31, 0, 0),
+     datetime.datetime(2009, 1, 30, 0, 0),
+     datetime.datetime(2009, 2, 27, 0, 0),
+     datetime.datetime(2009, 3, 31, 0, 0),
+     datetime.datetime(2009, 4, 30, 0, 0),
+     datetime.datetime(2009, 5, 29, 0, 0)]
+
+Defining custom frequencies
+---------------------------
+
 .. _datetools.timerules:
 
 Time rules
-----------
\ No newline at end of file
+----------
+
+A number of string aliases are given to useful common time series
+frequencies. We will refer to these aliases as *time rules*.
+
+.. csv-table::
+    :header: "Rule name", "Description"
+    :widths: 15, 65
+
+    "WEEKDAY", "business day frequency"
+    "EOM", "business month end frequency"
+    "W\@MON", "weekly frequency (mondays)"
+    "W\@TUE", "weekly frequency (tuesdays)"
+    "W\@WED", "weekly frequency (wednesdays)"
+    "W\@THU", "weekly frequency (thursdays)"
+    "W\@FRI", "weekly frequency (fridays)"
+    "Q\@JAN", "quarterly frequency, starting January"
+    "Q\@FEB", "quarterly frequency, starting February"
+    "Q\@MAR", "quarterly frequency, starting March"
+    "A\@DEC", "annual frequency, year end (December)"
+    "A\@JAN", "annual frequency, anchored end of January"
+    "A\@FEB", "annual frequency, anchored end of February"
+    "A\@MAR", "annual frequency, anchored end of March"
+    "A\@APR", "annual frequency, anchored end of April"
+    "A\@MAY", "annual frequency, anchored end of May"
+    "A\@JUN", "annual frequency, anchored end of June"
+    "A\@JUL", "annual frequency, anchored end of July"
+    "A\@AUG", "annual frequency, anchored end of August"
+    "A\@SEP", "annual frequency, anchored end of September"
+    "A\@OCT", "annual frequency, anchored end of October"
+    "A\@NOV", "annual frequency, anchored end of November"
+
diff --git a/doc/source/groupby.rst b/doc/source/groupby.rst
index 30e71ff97..90373de3d 100644
--- a/doc/source/groupby.rst
+++ b/doc/source/groupby.rst
@@ -1,8 +1,12 @@
+.. currentmodule:: pandas
 .. _groupby:
 
 *******************
 GroupBy operations
 *******************
 
-.. currentmodule:: pandas
+Aggregation
+-----------
 
+Transformation
+--------------
\ No newline at end of file
diff --git a/doc/source/index.rst b/doc/source/index.rst
index 8ffd11716..543bd93ee 100755
--- a/doc/source/index.rst
+++ b/doc/source/index.rst
@@ -54,6 +54,9 @@ User manual
 
 **Code Repository:** http://pandas.googlecode.com
 
+Library documentation
+~~~~~~~~~~~~~~~~~~~~~
+
 .. toctree::
     :maxdepth: 2
 
@@ -64,7 +67,15 @@ User manual
     stats
     r_interface
     io
+
+Other topics of interest
+~~~~~~~~~~~~~~~~~~~~~~~~
+
+.. toctree::
+    :maxdepth: 2
+
     examples
+    r_guide
     missing_data
     related
 
diff --git a/doc/source/indexobj.rst b/doc/source/indexobj.rst
index 8e6e0dd92..726232c37 100644
--- a/doc/source/indexobj.rst
+++ b/doc/source/indexobj.rst
@@ -1,5 +1,4 @@
-.. _indexobj.rst
-
+.. _indexobj:
 
 *****
 Index
diff --git a/doc/source/other.rst b/doc/source/other.rst
deleted file mode 100755
index f1e36b255..000000000
--- a/doc/source/other.rst
+++ /dev/null
@@ -1,7 +0,0 @@
-.. currentmodule:: pandas
-
-.. _other:
-
-Other
-=====
-
diff --git a/doc/source/overview.rst b/doc/source/overview.rst
index 9392dadb5..f59d1ad37 100644
--- a/doc/source/overview.rst
+++ b/doc/source/overview.rst
@@ -124,7 +124,7 @@ Optional dependencies
 ~~~~~~~~~~~~~~~~~~~~~
 
   * `SciPy <http://www.scipy.org>`__: miscellaneous statistical functions
-  * `PyTables <<http://www.pytables.org>>`__: necessary for HDF5-based storage
+  * `PyTables <http://www.pytables.org>`__: necessary for HDF5-based storage
   * `matplotlib <http://matplotlib.sourceforge.net/>`__: for plotting
   * `scikits.statsmodels <http://statsmodels.sourceforge.net/>`__
      * Needed for parts of :mod:`pandas.stats`
diff --git a/doc/source/r_interface.rst b/doc/source/r_interface.rst
index 16c5e5514..454ea3be8 100644
--- a/doc/source/r_interface.rst
+++ b/doc/source/r_interface.rst
@@ -14,8 +14,11 @@ general rule, I would recommend using the latest revision of rpy2 from
 bitbucket:
 
 ::
-    hg clone ... # if installing for the first time
 
+    # if installing for the first time
+    hg clone http://bitbucket.org/lgautier/rpy2
+
+    cd rpy2
     hg pull
     hg update
     sudo python setup.py install
diff --git a/doc/source/stats.ols.rst b/doc/source/stats.ols.rst
deleted file mode 100644
index 132f9bd2f..000000000
--- a/doc/source/stats.ols.rst
+++ /dev/null
@@ -1,3 +0,0 @@
-Ordinary least squares
-----------------------
-
diff --git a/doc/source/stats.plm.rst b/doc/source/stats.plm.rst
deleted file mode 100644
index 9b1da6f8e..000000000
--- a/doc/source/stats.plm.rst
+++ /dev/null
@@ -1,2 +0,0 @@
-OLS Panel regression
---------------------
diff --git a/pandas/core/daterange.py b/pandas/core/daterange.py
index 455d12b11..911ee38cf 100644
--- a/pandas/core/daterange.py
+++ b/pandas/core/daterange.py
@@ -16,8 +16,8 @@ class XDateRange(object):
     XDateRange generates a sequence of dates corresponding to the
     specified time offset
 
-    Note
-    ----
+    Notes
+    -----
     If both fromDate and toDate are specified, the returned dates will
     satisfy:
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index f323b3503..0d09efe5a 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1407,8 +1407,8 @@ class DataFrame(Picklable, Groupable):
 
         kwds : other plotting keyword arguments
 
-        Note
-        ----
+        Notes
+        -----
         This method doesn't make much sense for cross-sections,
         and will error.
         """
@@ -1490,17 +1490,16 @@ class DataFrame(Picklable, Groupable):
 
         Examples
         --------
-        self:
+        >>> df
             c1  c2
         a   1   0
         b   0   2
         c   3   0
         d   0   4
 
-        >>>self.sum(axis=0)
-        Series:
-        c1: 4
-        c2: 6
+        >>> df.sum(axis=0)
+        c1    4
+        c2    6
         """
         try:
             y = self.values.copy()
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index 893e448bc..1a4aff159 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -580,8 +580,8 @@ class DataMatrix(DataFrame):
 
         dmSelect = dm[dm.count(axis=1) > 10]
 
-        Note
-        ----
+        Notes
+        -----
         This is a magic method. Do NOT call explicity.
         """
         if isinstance(item, slice):
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 11bbaff9b..35b007a2a 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -826,23 +826,17 @@ class Series(np.ndarray, Picklable, Groupable):
         Parameters
         ----------
         label : label argument to provide to plot
-
         kind : {'line', 'bar', 'hist'}
             Default: line for TimeSeries, hist for Series
-
         kwds : other plotting keyword arguments
 
-        Default plot-types:
-            TimeSeries: line chart
-            Series: histogram
-                Also support for bar charts
+        Notes
+        -----
+        See matplotlib documentation online for more on this subject
 
-        Type show() (make sure to do 'from pylab import *') to see graph if you
-        do not.
+        Default plot-types: TimeSeries (line), Series (bar)
 
-        Note
-        ----
-        See matplotlib documentation online for more on this subject
+        Intended to be used in ipython -pylab mode
         """
         import matplotlib.pyplot as plt
 
@@ -963,8 +957,8 @@ class Series(np.ndarray, Picklable, Groupable):
         after : date
             Truncate after date
 
-        Note
-        ----
+        Notes
+        -----
         If TimeSeries is contained in a DataFrame, consider using the version
         of the function there.
 
@@ -1006,8 +1000,8 @@ class Series(np.ndarray, Picklable, Groupable):
         ----------
         date : datetime or similar value
 
-        Note
-        ----
+        Notes
+        -----
         Dates are assumed to be sorted
 
         Returns
diff --git a/setup.py b/setup.py
index 2aeb562e2..fedfa4db4 100644
--- a/setup.py
+++ b/setup.py
@@ -1,5 +1,10 @@
 #/usr/bin/env python
 
+import os
+import re
+import subprocess
+import warnings
+
 from numpy.distutils.misc_util import Configuration
 from numpy.distutils.core import setup
 
@@ -13,11 +18,14 @@ accomplish the following:
   heterogeneous data sets commonly found in statistics, finance, and
   econometrics.
 
+* Provide tools for working with dates, fixed-frequency custom date
+  ranges, and other necessary time series functionality
+
 * Provide IO utilities for getting data in and out of pandas
 
-* Implement common statistical models with a convenient interface,
-  handling missing data and other common problems associated with
-  messy statistical data sets
+* Implement common statistical and time series functionality with a
+  convenient interface, handling missing data and other common
+  problems associated with messy statistical data sets
 
 Note
 ----
@@ -41,15 +49,72 @@ CLASSIFIERS = [
 ]
 
 MAJOR = 0
-MINOR = 2
+MINOR = 3
+MICRO = 0
+ISRELEASED = False
+VERSION = '%d.%d.%d' % (MAJOR, MINOR, MICRO)
+
+# klau'd from SciPy's setup.py
+
+def svn_version():
+    env = os.environ.copy()
+    env['LC_ALL'] = 'C'
+    try:
+        out = subprocess.Popen(['svn', 'info'], stdout=subprocess.PIPE,
+                env=env).communicate()[0]
+    except OSError:
+        warnings.warn(" --- Could not run svn info --- ")
+        return ""
+
+    r = re.compile('Revision: ([0-9]+)')
+    svnver = None
+    for line in out.split('\n'):
+        m = r.match(line)
+        if m:
+            svnver = m.group(1)
 
-def get_version():
-    return '%s.%s' % (MAJOR, MINOR)
+    if not svnver:
+        raise ValueError("Error while parsing svn version ?")
+    return svnver
 
+FULLVERSION = VERSION
+if not ISRELEASED:
+    FULLVERSION += '.dev'
+    # If in git or something, bypass the svn rev
+    if os.path.exists('.svn'):
+        FULLVERSION += svn_version()
+
+def write_version_py(filename='pandas/version.py'):
+    cnt = """\
+# THIS FILE IS GENERATED FROM PANDAS setup.py
+short_version='%(version)s'
+version='%(version)s'
+release=%(isrelease)s
+
+if not release:
+    version += '.dev'
+    import os
+    svn_version_file = os.path.join(os.path.dirname(__file__),
+                                    '__svn_version__.py')
+    if os.path.isfile(svn_version_file):
+        import imp
+        svn = imp.load_module('pandas.__svn_version__',
+                              open(svn_version_file),
+                              svn_version_file,
+                              ('.py','U',1))
+        version += svn.version
+"""
+    a = open(filename, 'w')
+    try:
+        a.write(cnt % {'version': VERSION, 'isrelease': str(ISRELEASED)})
+    finally:
+        a.close()
 
 def configuration(parent_package='', top_path=None):
+    write_version_py()
+
     config = Configuration(None, parent_package, top_path,
-                           version=get_version())
+                           version=FULLVERSION)
     config.set_options(ignore_setup_xxx_py=True,
                        assume_default_configuration=True,
                        delegate_options_to_subpackages=True,
