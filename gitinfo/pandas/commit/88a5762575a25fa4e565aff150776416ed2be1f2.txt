commit 88a5762575a25fa4e565aff150776416ed2be1f2
Author: Daniel Waeber <daniel.waeber@gameduell.de>
Date:   Wed Jan 29 08:46:25 2014 +0100

    BUG: Fix unconverting of long strings from HDF (GH6166)

diff --git a/doc/source/release.rst b/doc/source/release.rst
index 6545d21a4..8e0bdcc6a 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -318,6 +318,7 @@ Bug Fixes
   (:issue:`6762`).
 - Bug in Makefile where it didn't remove Cython generated C files with ``make
   clean`` (:issue:`6768`)
+- Bug with numpy < 1.7.2 when reading long strings from ``HDFStore`` (:issue:`6166`)
 
 pandas 0.13.1
 -------------
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 76f630082..c4a839b48 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -40,6 +40,7 @@ import pandas.algos as algos
 import pandas.tslib as tslib
 
 from contextlib import contextmanager
+from distutils.version import LooseVersion
 
 # versioning attribute
 _version = '0.10.1'
@@ -47,7 +48,6 @@ _version = '0.10.1'
 # PY3 encoding if we don't specify
 _default_encoding = 'UTF-8'
 
-
 def _ensure_decoded(s):
     """ if we have bytes, decode them to unicde """
     if isinstance(s, np.bytes_):
@@ -225,7 +225,6 @@ def _tables():
     global _table_file_open_policy_is_strict
     if _table_mod is None:
         import tables
-        from distutils.version import LooseVersion
         _table_mod = tables
 
         # version requirements
@@ -4171,7 +4170,6 @@ def _convert_string_array(data, encoding, itemsize=None):
     data = np.array(data, dtype="S%d" % itemsize)
     return data
 
-
 def _unconvert_string_array(data, nan_rep=None, encoding=None):
     """ deserialize a string array, possibly decoding """
     shape = data.shape
@@ -4181,9 +4179,15 @@ def _unconvert_string_array(data, nan_rep=None, encoding=None):
     # where the passed encoding is actually None)
     encoding = _ensure_encoding(encoding)
     if encoding is not None and len(data):
+
         try:
-            data = data.astype(string_types).astype(object)
-        except:
+            itemsize = lib.max_len_string_array(com._ensure_object(data.ravel()))
+            if compat.PY3:
+                dtype = "U{0}".format(itemsize)
+            else:
+                dtype = "S{0}".format(itemsize)
+            data = data.astype(dtype).astype(object)
+        except (Exception) as e:
             f = np.vectorize(lambda x: x.decode(encoding), otypes=[np.object])
             data = f(data)
 
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index c579e8502..9c9d20e51 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -179,6 +179,21 @@ class TestHDFStore(tm.TestCase):
         finally:
             safe_remove(self.path)
 
+    def test_long_strings(self):
+
+        # GH6166
+        # unconversion of long strings was being chopped in earlier
+        # versions of numpy < 1.7.2
+        df = DataFrame({'a': [tm.rands(100) for _ in range(10)]},
+                       index=[tm.rands(100) for _ in range(10)])
+
+        with ensure_clean_store(self.path) as store:
+            store.append('df', df, data_columns=['a'])
+
+            result = store.select('df')
+            assert_frame_equal(df, result)
+
+
     def test_api(self):
 
         # GH4584
