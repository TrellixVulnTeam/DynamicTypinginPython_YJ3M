commit 8c0e20680db5813d051c50ee5f24f3525ba83ee2
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Sep 23 13:37:05 2012 -0400

    BUG: fix Cython tz_convert bug with time zones that haven't had a UTC transition in a long time. close #1946

diff --git a/RELEASE.rst b/RELEASE.rst
index e7bfcb032..7ba7900b7 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -203,6 +203,8 @@ pandas 0.9.0
     partial-indexing a hierarchically-indexed DataFrame (#1796)
   - Support multiple column selection in DataFrame.__getitem__ with duplicate
     columns (#1943)
+  - Fix time zone localization bug causing improper fields (e.g. hours) in time
+    zones that have not had a UTC transition in a long time (#1946)
 
 pandas 0.8.1
 ============
diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index 40c1e950b..0baf4ca9c 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -948,7 +948,7 @@ def tz_convert(ndarray[int64_t] vals, object tz1, object tz2):
     if pos == 0:
         raise ValueError('First time before start of DST info')
     elif pos == len(trans):
-        return result + deltas[-1]
+        return utc_dates + deltas[-1]
 
     # TODO: this assumed sortedness :/
     pos -= 1
@@ -1017,6 +1017,11 @@ def _get_transitions(tz):
         if hasattr(tz, '_utc_transition_times'):
             arr = np.array(tz._utc_transition_times, dtype='M8[ns]')
             arr = arr.view('i8')
+            try:
+                if tz._utc_transition_times[0].year == 1:
+                    arr[0] = NPY_NAT + 1
+            except Exception:
+                pass
         else:
             arr = np.array([NPY_NAT + 1], dtype=np.int64)
         trans_cache[tz] = arr
diff --git a/pandas/tseries/tests/test_timezones.py b/pandas/tseries/tests/test_timezones.py
index 646176954..971023af1 100644
--- a/pandas/tseries/tests/test_timezones.py
+++ b/pandas/tseries/tests/test_timezones.py
@@ -240,6 +240,13 @@ class TestTimeZoneSupport(unittest.TestCase):
         rng = DatetimeIndex(strdates, tz='US/Eastern')
         self.assert_((rng.hour == 0).all())
 
+        # a more unusual time zone, #1946
+        dr = date_range('2011-10-02 00:00', freq='h', periods=10,
+                        tz='America/Atikokan')
+
+        expected = np.arange(10)
+        self.assert_(np.array_equal(dr.hour, expected))
+
     def test_with_tz(self):
         tz = pytz.timezone('US/Central')
 
