commit 1eabeaf531d5e48be7271f54c3f608bebc33fc8f
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Jun 8 19:43:57 2010 +0000

    renamed parameters in DateRange, promoted isnull and notnull out of Cython code
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@192 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/doc/source/datetools.rst b/doc/source/datetools.rst
index 875a62ac3..f98f4124e 100644
--- a/doc/source/datetools.rst
+++ b/doc/source/datetools.rst
@@ -111,7 +111,7 @@ add) to generate lists of dates for general purposes:
 
 ::
 
-    In [327]: DateRange(fromDate=d, nPeriods=10, offset=daterange.bmonthEnd)
+    In [327]: DateRange(start=d, nPeriods=10, offset=daterange.bmonthEnd)
     Out[327]:
     [datetime.datetime(2008, 8, 29, 0, 0),
      datetime.datetime(2008, 9, 30, 0, 0),
diff --git a/doc/source/groupby.rst b/doc/source/groupby.rst
index 90373de3d..5d4ea4ad7 100644
--- a/doc/source/groupby.rst
+++ b/doc/source/groupby.rst
@@ -5,8 +5,11 @@
 GroupBy operations
 *******************
 
+.. automodule:: pandas.core.groupby
+   :members:
+
 Aggregation
 -----------
 
 Transformation
---------------
\ No newline at end of file
+--------------
diff --git a/doc/source/io.rst b/doc/source/io.rst
index 903e4061c..530b989e5 100644
--- a/doc/source/io.rst
+++ b/doc/source/io.rst
@@ -1,5 +1,7 @@
 .. _io:
 
+.. currentmodule:: pandas
+
 ********************
 Input / Output Tools
 ********************
@@ -7,8 +9,11 @@ Input / Output Tools
 HDF5 (PyTables)
 ---------------
 
+.. automodule:: pandas.io.pytables
+   :members:
+
 Text files
 ----------
 
-.. currentmodule:: pandas
-
+.. automodule:: pandas.io.parsers
+   :members:
diff --git a/doc/source/ols.rst b/doc/source/ols.rst
index 37c61cfd3..4c490cb4b 100644
--- a/doc/source/ols.rst
+++ b/doc/source/ols.rst
@@ -3,4 +3,7 @@
 .. _ols:
 
 Linear and panel regression
----------------------------
\ No newline at end of file
+---------------------------
+
+.. automodule:: pandas.stats.interface
+   :members:
diff --git a/doc/source/overview.rst b/doc/source/overview.rst
index f59d1ad37..63b670914 100644
--- a/doc/source/overview.rst
+++ b/doc/source/overview.rst
@@ -11,7 +11,7 @@ convenient and powerful data structures for working with labeled
 statistical (financial, economic, econometric) data sets. We will
 refer to this data as *time series* and *cross-sectional* (or
 *longitudinal*) which are common terms in statistics and
-econometrics. pdnas has multiple target audiences:
+econometrics. pandas has multiple target audiences:
 
  * Users of R or MATLAB who wish to switch to Python for interactive
    data analysis and implementation of statistical models
@@ -75,7 +75,7 @@ illustrate:
  (B) :ref:`DataFrame <dataframe>` containing multiple cross-sections
 
   * **columns**: "data type" associated with each cross-section
-  * **index**:  individual / entity common to cross-sections
+  * **index**:  individual / entity labels common to cross-sections
 
  (C) :ref:`WidePanel <panel>` containing panel data
 
@@ -91,10 +91,11 @@ code).
 A quick note on mutation
 ~~~~~~~~~~~~~~~~~~~~~~~~
 
-You will find that very few methods are capable of mutating a pandas
-data structure like DataFrame. In general, the result of method calls
-will return a new object (protecting the underlying data in the
-calling object). So we like to "favor immutability" where sensible.
+Most instance methods on the pandas data structures return a new
+object, rather than updating the original object in-place. However,
+when working with the contents (e.g. a column in a DataFrame),
+mutations **will** be reflected in the original structure. In general,
+though, we like to "favor immutability" where sensible.
 
 What else is in the package?
 ----------------------------
diff --git a/doc/source/panel.rst b/doc/source/panel.rst
index b27db6233..fef4dc880 100644
--- a/doc/source/panel.rst
+++ b/doc/source/panel.rst
@@ -4,3 +4,6 @@
 *********************
 WidePanel / LongPanel
 *********************
+
+.. automodule:: pandas.core.panel
+   :members:
diff --git a/pandas/core/api.py b/pandas/core/api.py
index 0ea51b803..4443dbf3c 100644
--- a/pandas/core/api.py
+++ b/pandas/core/api.py
@@ -5,6 +5,7 @@ import numpy as np
 from pandas.core.datetools import DateOffset
 import pandas.core.datetools as datetools
 
+from pandas.core.common import isnull, notnull
 from pandas.core.index import Index
 from pandas.core.daterange import DateRange
 from pandas.core.series import Series, TimeSeries
@@ -12,4 +13,3 @@ from pandas.core.frame import DataFrame
 from pandas.core.matrix import DataMatrix
 from pandas.core.panel import WidePanel, LongPanel, pivot
 
-from pandas.lib.tseries import isnull, notnull
diff --git a/pandas/core/common.py b/pandas/core/common.py
index 0b6a5e9a0..70ff9ccd8 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -3,7 +3,46 @@ from cStringIO import StringIO
 from numpy.lib.format import read_array, write_array
 import numpy as np
 
-from pandas.lib.tseries import isnull
+from pandas.lib.tseries import isnullobj, checknull
+
+def isnull(input):
+    '''
+    Replacement for numpy.isnan / -numpy.isfinite which is suitable
+    for use on object arrays.
+
+    Parameters
+    ----------
+    arr: ndarray or object value
+
+    Returns
+    -------
+    boolean ndarray or boolean
+    '''
+    if isinstance(input, np.ndarray):
+        if input.dtype.kind in ('O', 'S'):
+            return isnullobj(input).astype(bool)
+        else:
+            return -np.isfinite(input)
+    else:
+        return checknull(input)
+
+def notnull(input):
+    '''
+    Replacement for numpy.isfinite / -numpy.isnan which is suitable
+    for use on object arrays.
+
+    Parameters
+    ----------
+    arr: ndarray or object value
+
+    Returns
+    -------
+    boolean ndarray or boolean
+    '''
+    if isinstance(input, np.ndarray):
+        return -isnull(input)
+    else:
+        return not checknull(input)
 
 def _pickle_array(arr):
     arr = arr.view(np.ndarray)
diff --git a/pandas/core/daterange.py b/pandas/core/daterange.py
index 911ee38cf..edd0fdff0 100644
--- a/pandas/core/daterange.py
+++ b/pandas/core/daterange.py
@@ -18,10 +18,10 @@ class XDateRange(object):
 
     Notes
     -----
-    If both fromDate and toDate are specified, the returned dates will
+    If both start and end are specified, the returned dates will
     satisfy:
 
-    fromDate <= date <= toDate
+    start <= date <= end
 
     In other words, dates are constrained to lie in the specifed range
     as you would expect, though no dates which do NOT lie on the
@@ -40,7 +40,7 @@ class XDateRange(object):
     _cache = {}
     _cacheStart = {}
     _cacheEnd = {}
-    def __init__(self, fromDate=None, toDate=None, nPeriods=None,
+    def __init__(self, start=None, end=None, nPeriods=None,
                  offset=datetools.BDay(), timeRule=None):
 
         if timeRule is not None:
@@ -50,35 +50,35 @@ class XDateRange(object):
             if offset in datetools._offsetNames:
                 timeRule = datetools._offsetNames[offset]
 
-        fromDate = datetools.to_datetime(fromDate)
-        toDate = datetools.to_datetime(toDate)
+        start = datetools.to_datetime(start)
+        end = datetools.to_datetime(end)
 
-        if fromDate and not offset.onOffset(fromDate):
-            fromDate = fromDate + offset.__class__(n=1, **offset.kwds)
-        if toDate and not offset.onOffset(toDate):
-            toDate = toDate - offset.__class__(n=1, **offset.kwds)
-            if nPeriods == None and toDate < fromDate:
-                toDate = None
+        if start and not offset.onOffset(start):
+            start = start + offset.__class__(n=1, **offset.kwds)
+        if end and not offset.onOffset(end):
+            end = end - offset.__class__(n=1, **offset.kwds)
+            if nPeriods == None and end < start:
+                end = None
                 nPeriods = 0
 
-        if toDate is None:
-            toDate = fromDate + (nPeriods - 1) * offset
+        if end is None:
+            end = start + (nPeriods - 1) * offset
 
-        if fromDate is None:
-            fromDate = toDate - (nPeriods - 1) * offset
+        if start is None:
+            start = end - (nPeriods - 1) * offset
 
         self.offset = offset
         self.timeRule = timeRule
-        self.fromDate = fromDate
-        self.toDate = toDate
+        self.start = start
+        self.end = end
         self.nPeriods = nPeriods
 
     def __iter__(self):
         offset = self.offset
-        cur = self.fromDate
+        cur = self.start
         if offset._normalizeFirst:
             cur = datetools.normalize_date(cur)
-        while cur <= self.toDate:
+        while cur <= self.end:
             yield cur
             cur = cur + offset
 
@@ -106,9 +106,9 @@ class DateRange(Index):
 
     Parameters
     ----------
-    fromDate : {datetime, None}
+    start : {datetime, None}
         left boundary for range
-    toDate : {datetime, None}
+    end : {datetime, None}
         right boundary for range
     periods : int
         Number of periods to generate.
@@ -118,7 +118,7 @@ class DateRange(Index):
     """
     _cache = {}
     _parent = None
-    def __new__(cls, fromDate=None, toDate=None, periods=None,
+    def __new__(cls, start=None, end=None, periods=None,
                 offset=datetools.bday, timeRule=None, **kwds):
 
         # Allow us to circumvent hitting the cache
@@ -132,30 +132,30 @@ class DateRange(Index):
                     timeRule = datetools._offsetNames[offset]
 
             # Cachable
-            if not fromDate:
-                fromDate = kwds.get('begin')
-            if not toDate:
-                toDate = kwds.get('end')
+            if not start:
+                start = kwds.get('begin')
+            if not end:
+                end = kwds.get('end')
             if not periods:
                 periods = kwds.get('nPeriods')
 
-            fromDate = datetools.to_datetime(fromDate)
-            toDate = datetools.to_datetime(toDate)
+            start = datetools.to_datetime(start)
+            end = datetools.to_datetime(end)
 
             # inside cache range
-            fromInside = fromDate is not None and fromDate > CACHE_START
-            toInside = toDate is not None and toDate < CACHE_END
+            fromInside = start is not None and start > CACHE_START
+            toInside = end is not None and end < CACHE_END
 
             useCache = fromInside and toInside
 
             if (useCache and offset.isAnchored() and
                 not isinstance(offset, datetools.Tick)):
 
-                index = cls.getCachedRange(fromDate, toDate, periods=periods,
+                index = cls.getCachedRange(start, end, periods=periods,
                                            offset=offset, timeRule=timeRule)
 
             else:
-                xdr = XDateRange(fromDate=fromDate, toDate=toDate,
+                xdr = XDateRange(start=start, end=end,
                                  nPeriods=periods, offset=offset,
                                  timeRule=timeRule)
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index d983ad08c..ab079f48e 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -8,12 +8,12 @@ import sys
 from numpy import NaN
 import numpy as np
 
-from pandas.core.common import _pickle_array, _unpickle_array, _pfixed
+from pandas.core.common import (_pickle_array, _unpickle_array, _pfixed,
+                                isnull, notnull)
 from pandas.core.daterange import DateRange
 from pandas.core.index import Index, NULL_INDEX
 from pandas.core.mixins import Picklable, Groupable
 from pandas.core.series import Series
-from pandas.lib.tseries import isnull, notnull
 import pandas.core.datetools as datetools
 import pandas.lib.tseries as tseries
 
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index fe6878e9e..af79335a1 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -7,11 +7,11 @@ import sys
 from numpy import NaN
 import numpy as np
 
-from pandas.core.common import _pfixed, _pickle_array, _unpickle_array
+from pandas.core.common import (_pfixed, _pickle_array, _unpickle_array,
+                                isnull)
 from pandas.core.frame import DataFrame, _try_sort, _extract_index
 from pandas.core.index import Index, NULL_INDEX
 from pandas.core.series import Series
-from pandas.lib.tseries import isnull
 import pandas.core.datetools as datetools
 import pandas.lib.tseries as tseries
 
@@ -1050,36 +1050,20 @@ class DataMatrix(DataFrame):
 
             return DataMatrix(result, index=self.index, objects=self.objects)
         else:
-            if (isinstance(value, (int, float))
-                and self.values.dtype == np.float64):
-                # Float type values
-                if len(self.columns) == 0:
-                    return self
-
-                vals = self.values.copy()
-                vals.flat[isnull(vals.ravel())] = value
-
-                objects = None
-
-                if self.objects is not None:
-                    objects = self.objects.copy()
-
-                return DataMatrix(vals, index=self.index, columns=self.columns,
-                                  objects=objects)
+            # Float type values
+            if len(self.columns) == 0:
+                return self
 
-            else:
-                # Object type values
-                if len(self.columns) == 0:
-                    return self
+            vals = self.values.copy()
+            vals.flat[isnull(vals.ravel())] = value
 
-                # XXX
+            objects = None
 
-                myCopy = self.copy()
-                vals = myCopy.values
-                vals = self.values.copy()
-                vals.flat[isnull(vals.ravel())] = value
+            if self.objects is not None:
+                objects = self.objects.copy()
 
-                return myCopy
+            return DataMatrix(vals, index=self.index, columns=self.columns,
+                              objects=objects)
 
     def xs(self, key):
         """
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 6dca08524..01398b6a5 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -12,13 +12,12 @@ import sys
 import numpy as np
 
 from pandas.core.common import (_pickle_array, _unpickle_array,
-                                _pfixed)
+                                _pfixed, notnull, isnull)
 from pandas.core.groupby import GroupBy
 from pandas.core.index import Index
 from pandas.core.frame import DataFrame
 from pandas.core.matrix import DataMatrix
 from pandas.core.mixins import Picklable
-from pandas.lib.tseries import notnull
 import pandas.lib.tseries as tseries
 
 class PanelError(Exception):
@@ -455,6 +454,44 @@ class WidePanel(Panel):
         return WidePanel(newValues, self.items, self.major_axis,
                          self.minor_axis)
 
+    def fill(self, value=None, method='pad'):
+        """
+        Fill NaN values using the specified method.
+
+        Member Series / TimeSeries are filled separately.
+
+        Parameters
+        ----------
+        value : any kind (should be same type as array)
+            Value to use to fill holes (e.g. 0)
+
+        method : {'backfill', 'pad', None}
+            Method to use for filling holes in new inde
+
+        Returns
+        -------
+        y : DataMatrix
+
+        See also
+        --------
+        DataMatrix.reindex, DataMatrix.asfreq
+        """
+        if value is None:
+            result = {}
+            for col, s in self.iteritems():
+                result[col] = s.fill(method=method, value=value)
+
+            return WidePanel.fromDict(result)
+        else:
+            # Float type values
+            if len(self.items) == 0:
+                return self
+            vals = self.values.copy()
+            vals.flat[isnull(vals.ravel())] = value
+
+            return WidePanel(vals, self.items, self.major_axis,
+                             self.minor_axis)
+
     def _combinePanel(self, other, func):
         if isinstance(other, LongPanel):
             other = other.toWide()
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 35b007a2a..d998a2c27 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -11,12 +11,11 @@ import sys
 from numpy import NaN, ndarray
 import numpy as np
 
+from pandas.core.common import isnull, notnull
 from pandas.core.daterange import DateRange
 from pandas.core.index import Index, NULL_INDEX
 from pandas.core.mixins import Picklable, Groupable
 import pandas.core.datetools as datetools
-
-from pandas.lib.tseries import isnull, notnull
 import pandas.lib.tseries as tseries
 
 #-------------------------------------------------------------------------------
diff --git a/pandas/core/tests/test_daterange.py b/pandas/core/tests/test_daterange.py
index ce73a26da..ea0e34b88 100644
--- a/pandas/core/tests/test_daterange.py
+++ b/pandas/core/tests/test_daterange.py
@@ -15,20 +15,20 @@ def eqXDateRange(kwargs, expected):
     assert(np.array_equal(list(XDateRange(**kwargs)), expected))
 
 def testXDateRange1():
-    eqXDateRange(dict(fromDate = datetime(2009, 3, 25),
+    eqXDateRange(dict(start = datetime(2009, 3, 25),
                       nPeriods = 2),
                  [datetime(2009, 3, 25), datetime(2009, 3, 26)])
 
 def testXDateRange2():
-    eqXDateRange(dict(fromDate = datetime(2008, 1, 1),
-                      toDate = datetime(2008, 1, 3)),
+    eqXDateRange(dict(start = datetime(2008, 1, 1),
+                      end = datetime(2008, 1, 3)),
                  [datetime(2008, 1, 1),
                   datetime(2008, 1, 2),
                   datetime(2008, 1, 3)])
 
 def testXDateRange3():
-    eqXDateRange(dict(fromDate = datetime(2008, 1, 5),
-                      toDate = datetime(2008, 1, 6)),
+    eqXDateRange(dict(start = datetime(2008, 1, 5),
+                      end = datetime(2008, 1, 6)),
                  [])
 
 START, END = datetime(2009, 1, 1), datetime(2010, 1, 1)
@@ -50,7 +50,7 @@ class TestDateRange(unittest.TestCase):
 
         rng = DateRange(START, periods=20, offset=datetools.bday)
 
-        rng = DateRange(toDate=START, periods=20, offset=datetools.bday)
+        rng = DateRange(end=START, periods=20, offset=datetools.bday)
 
     def test_getCachedRange(self):
         rng = DateRange.getCachedRange(START, END, offset=datetools.bday)
@@ -103,11 +103,11 @@ class TestDateRange(unittest.TestCase):
 # DateRange test
 
 def testDateRange1():
-    toDate = datetime(2009, 5, 13)
-    dr = DateRange(toDate=toDate, periods=20)
-    firstDate = toDate - 19 * datetools.bday
+    end = datetime(2009, 5, 13)
+    dr = DateRange(end=end, periods=20)
+    firstDate = end - 19 * datetools.bday
 
     assert len(dr) == 20
     assert dr[0] == firstDate
-    assert dr[-1] == toDate
+    assert dr[-1] == end
 
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 50d66cb85..dd8c1892e 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -53,14 +53,24 @@ class HDFStore(object):
 
     def get(self, key):
         """
+        Retrieve pandas object stored in file
 
+        Parameters
+        ----------
+        key : object
         """
 
         return self[key]
 
     def put(self, key, value):
         """
+        Store object in file
 
+        Parameters
+        ----------
+        key : object
+        value : {Series, DataFrame, WidePanel, LongPanel}
+            pandas data structure
         """
         self[key] = value
 
diff --git a/pandas/lib/src/groupby.pyx b/pandas/lib/src/groupby.pyx
index 6a7536438..e7a61c8d3 100644
--- a/pandas/lib/src/groupby.pyx
+++ b/pandas/lib/src/groupby.pyx
@@ -36,7 +36,7 @@ def groupby(object index, object mapper, output=None):
 
     index_buf = np.asarray(index)
     mapped_index = arrmap(index_buf, mapper)
-    mask = _isnullobj(mapped_index)
+    mask = isnullobj(mapped_index)
     nullkeys = index_buf[mask.astype(bool)]
     if len(nullkeys) > 0:
         result[np.NaN] = nullkeys
@@ -70,7 +70,7 @@ def groupby_indices(object index, object mapper):
     index = np.asarray(index)
     mapped_index = arrmap(index, mapper)
 
-    mask = _isnullobj(mapped_index)
+    mask = isnullobj(mapped_index)
 
     if mask.astype(bool).any():
         null_list = []
diff --git a/pandas/lib/src/isnull.pyx b/pandas/lib/src/isnull.pyx
index d8b3f91c9..f099b63ae 100644
--- a/pandas/lib/src/isnull.pyx
+++ b/pandas/lib/src/isnull.pyx
@@ -8,7 +8,10 @@ cdef inline _checknull(object val):
     else:
         return val is None
 
-cdef ndarray _isnullobj(input):
+cpdef checknull(object val):
+    return _checknull(val)
+
+def isnullobj(ndarray input):
     cdef int i, length
     cdef object val
     cdef ndarray[npy_int8, ndim=1] result
@@ -29,47 +32,3 @@ cdef ndarray _isnullobj(input):
         PyArray_ITER_NEXT(iter)
 
     return result
-
-def isnull(input):
-    '''
-    Replacement for numpy.isnan / -numpy.isfinite which is suitable
-    for use on object arrays.
-
-    Parameters
-    ----------
-    arr: ndarray or object value
-
-    Returns
-    -------
-    boolean ndarray or boolean
-    '''
-    cdef ndarray[npy_int8, ndim=1] result
-
-    if isinstance(input, np.ndarray):
-        if input.dtype.kind in ('O', 'S'):
-            result = _isnullobj(input)
-
-            return result.astype(np.bool)
-        else:
-            return -np.isfinite(input)
-    else:
-        return _checknull(input)
-
-def notnull(input):
-    '''
-    Replacement for numpy.isfinite / -numpy.isnan which is suitable
-    for use on object arrays.
-
-    Parameters
-    ----------
-    arr: ndarray or object value
-
-    Returns
-    -------
-    boolean ndarray or boolean
-    '''
-    if isinstance(input, np.ndarray):
-        return -isnull(input)
-    else:
-        return not bool(_checknull(input))
-
diff --git a/pandas/lib/src/tseries.c b/pandas/lib/src/tseries.c
index 259b0f725..244c06022 100644
--- a/pandas/lib/src/tseries.c
+++ b/pandas/lib/src/tseries.c
@@ -1,4 +1,4 @@
-/* Generated by Cython 0.12.1 on Thu May 27 12:00:42 2010 */
+/* Generated by Cython 0.12.1 on Tue Jun 08 14:52:22 2010 */
 
 #define PY_SSIZE_T_CLEAN
 #include "Python.h"
@@ -826,7 +826,7 @@ static __pyx_t_5numpy_double_t *__pyx_f_7tseries_get_double_ptr(PyArrayObject *)
 static PyObject *__pyx_f_7tseries_map_indices(PyArrayObject *, int __pyx_skip_dispatch); /*proto*/
 static double __pyx_f_7tseries_Log2(double); /*proto*/
 static CYTHON_INLINE PyObject *__pyx_f_7tseries__checknull(PyObject *); /*proto*/
-static PyArrayObject *__pyx_f_7tseries__isnullobj(PyObject *); /*proto*/
+static PyObject *__pyx_f_7tseries_checknull(PyObject *, int __pyx_skip_dispatch); /*proto*/
 static CYTHON_INLINE PyObject *__pyx_f_7tseries__isnan(PyObject *); /*proto*/
 static double __pyx_f_7tseries___add(double, double); /*proto*/
 static double __pyx_f_7tseries___sub(double, double); /*proto*/
@@ -876,7 +876,6 @@ static char __pyx_k__I[] = "I";
 static char __pyx_k__L[] = "L";
 static char __pyx_k__O[] = "O";
 static char __pyx_k__Q[] = "Q";
-static char __pyx_k__S[] = "S";
 static char __pyx_k__a[] = "a";
 static char __pyx_k__b[] = "b";
 static char __pyx_k__d[] = "d";
@@ -952,7 +951,6 @@ static char __pyx_k__astype[] = "astype";
 static char __pyx_k__fields[] = "fields";
 static char __pyx_k__format[] = "format";
 static char __pyx_k__insert[] = "insert";
-static char __pyx_k__isnull[] = "isnull";
 static char __pyx_k__mapper[] = "mapper";
 static char __pyx_k__newMap[] = "newMap";
 static char __pyx_k__object[] = "object";
@@ -975,7 +973,6 @@ static char __pyx_k__BACKFILL[] = "BACKFILL";
 static char __pyx_k__KeyError[] = "KeyError";
 static char __pyx_k____main__[] = "__main__";
 static char __pyx_k__datetime[] = "datetime";
-static char __pyx_k__isfinite[] = "isfinite";
 static char __pyx_k__itemsize[] = "itemsize";
 static char __pyx_k__newIndex[] = "newIndex";
 static char __pyx_k__oldIndex[] = "oldIndex";
@@ -986,6 +983,7 @@ static char __pyx_k___backfill[] = "_backfill";
 static char __pyx_k___roll_sum[] = "_roll_sum";
 static char __pyx_k___roll_var[] = "_roll_var";
 static char __pyx_k__byteorder[] = "byteorder";
+static char __pyx_k__isnullobj[] = "isnullobj";
 static char __pyx_k__maxlevels[] = "maxlevels";
 static char __pyx_k__toordinal[] = "toordinal";
 static char __pyx_k__width_arr[] = "width_arr";
@@ -1018,10 +1016,8 @@ static PyObject *__pyx_n_s__Exception;
 static PyObject *__pyx_n_s__KeyError;
 static PyObject *__pyx_n_s__NIL;
 static PyObject *__pyx_n_s__NaN;
-static PyObject *__pyx_n_s__O;
 static PyObject *__pyx_n_s__PAD;
 static PyObject *__pyx_n_s__RuntimeError;
-static PyObject *__pyx_n_s__S;
 static PyObject *__pyx_n_s__ValueError;
 static PyObject *__pyx_n_s____add__;
 static PyObject *__pyx_n_s____div__;
@@ -1079,9 +1075,8 @@ static PyObject *__pyx_n_s__insert;
 static PyObject *__pyx_n_s__int32;
 static PyObject *__pyx_n_s__int64;
 static PyObject *__pyx_n_s__int8;
-static PyObject *__pyx_n_s__isfinite;
 static PyObject *__pyx_n_s__isnan;
-static PyObject *__pyx_n_s__isnull;
+static PyObject *__pyx_n_s__isnullobj;
 static PyObject *__pyx_n_s__itemsize;
 static PyObject *__pyx_n_s__k;
 static PyObject *__pyx_n_s__kind;
@@ -3699,7 +3694,7 @@ static CYTHON_INLINE PyObject *__pyx_f_7tseries__checknull(PyObject *__pyx_v_val
  *     else:
  *         return val is None             # <<<<<<<<<<<<<<
  * 
- * cdef ndarray _isnullobj(input):
+ * cpdef checknull(object val):
  */
     __Pyx_XDECREF(__pyx_r);
     __pyx_t_1 = (__pyx_v_val == Py_None);
@@ -3730,12 +3725,86 @@ static CYTHON_INLINE PyObject *__pyx_f_7tseries__checknull(PyObject *__pyx_v_val
 /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":11
  *         return val is None
  * 
- * cdef ndarray _isnullobj(input):             # <<<<<<<<<<<<<<
+ * cpdef checknull(object val):             # <<<<<<<<<<<<<<
+ *     return _checknull(val)
+ * 
+ */
+
+static PyObject *__pyx_pf_7tseries_checknull(PyObject *__pyx_self, PyObject *__pyx_v_val); /*proto*/
+static  PyObject *__pyx_f_7tseries_checknull(PyObject *__pyx_v_val, int __pyx_skip_dispatch) {
+  PyObject *__pyx_r = NULL;
+  PyObject *__pyx_t_1 = NULL;
+  __Pyx_RefNannySetupContext("checknull");
+
+  /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":12
+ * 
+ * cpdef checknull(object val):
+ *     return _checknull(val)             # <<<<<<<<<<<<<<
+ * 
+ * def isnullobj(ndarray input):
+ */
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_t_1 = __pyx_f_7tseries__checknull(__pyx_v_val); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_r = __pyx_t_1;
+  __pyx_t_1 = 0;
+  goto __pyx_L0;
+
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_AddTraceback("tseries.checknull");
+  __pyx_r = 0;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":11
+ *         return val is None
+ * 
+ * cpdef checknull(object val):             # <<<<<<<<<<<<<<
+ *     return _checknull(val)
+ * 
+ */
+
+static PyObject *__pyx_pf_7tseries_checknull(PyObject *__pyx_self, PyObject *__pyx_v_val); /*proto*/
+static PyObject *__pyx_pf_7tseries_checknull(PyObject *__pyx_self, PyObject *__pyx_v_val) {
+  PyObject *__pyx_r = NULL;
+  PyObject *__pyx_t_1 = NULL;
+  __Pyx_RefNannySetupContext("checknull");
+  __pyx_self = __pyx_self;
+  __Pyx_XDECREF(__pyx_r);
+  __pyx_t_1 = __pyx_f_7tseries_checknull(__pyx_v_val, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_1);
+  __pyx_r = __pyx_t_1;
+  __pyx_t_1 = 0;
+  goto __pyx_L0;
+
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
+  goto __pyx_L0;
+  __pyx_L1_error:;
+  __Pyx_XDECREF(__pyx_t_1);
+  __Pyx_AddTraceback("tseries.checknull");
+  __pyx_r = NULL;
+  __pyx_L0:;
+  __Pyx_XGIVEREF(__pyx_r);
+  __Pyx_RefNannyFinishContext();
+  return __pyx_r;
+}
+
+/* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":14
+ *     return _checknull(val)
+ * 
+ * def isnullobj(ndarray input):             # <<<<<<<<<<<<<<
  *     cdef int i, length
  *     cdef object val
  */
 
-static  PyArrayObject *__pyx_f_7tseries__isnullobj(PyObject *__pyx_v_input) {
+static PyObject *__pyx_pf_7tseries_isnullobj(PyObject *__pyx_self, PyObject *__pyx_v_input); /*proto*/
+static PyObject *__pyx_pf_7tseries_isnullobj(PyObject *__pyx_self, PyObject *__pyx_v_input) {
   int __pyx_v_i;
   int __pyx_v_length;
   PyObject *__pyx_v_val;
@@ -3744,7 +3813,7 @@ static  PyArrayObject *__pyx_f_7tseries__isnullobj(PyObject *__pyx_v_input) {
   Py_buffer __pyx_bstruct_result;
   Py_ssize_t __pyx_bstride_0_result = 0;
   Py_ssize_t __pyx_bshape_0_result = 0;
-  PyArrayObject *__pyx_r = NULL;
+  PyObject *__pyx_r = NULL;
   PyObject *__pyx_t_1 = NULL;
   PyObject *__pyx_t_2 = NULL;
   PyObject *__pyx_t_3 = NULL;
@@ -3758,52 +3827,53 @@ static  PyArrayObject *__pyx_f_7tseries__isnullobj(PyObject *__pyx_v_input) {
   int __pyx_t_11;
   int __pyx_t_12;
   int __pyx_t_13;
-  __Pyx_RefNannySetupContext("_isnullobj");
-  __Pyx_INCREF(__pyx_v_input);
+  __Pyx_RefNannySetupContext("isnullobj");
+  __pyx_self = __pyx_self;
+  __Pyx_INCREF((PyObject *)__pyx_v_input);
   __pyx_v_val = Py_None; __Pyx_INCREF(Py_None);
   __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None);
   __pyx_v_iter = ((PyArrayIterObject *)Py_None); __Pyx_INCREF(Py_None);
   __pyx_bstruct_result.buf = NULL;
+  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_input), __pyx_ptype_5numpy_ndarray, 1, "input", 0))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
 
-  /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":17
+  /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":20
  *     cdef flatiter iter
  * 
  *     length = PyArray_SIZE(input)             # <<<<<<<<<<<<<<
  * 
  *     result = <ndarray> np.zeros(length, dtype=np.int8)
  */
-  if (!(likely(((__pyx_v_input) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_input, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __pyx_v_length = PyArray_SIZE(((PyArrayObject *)__pyx_v_input));
 
-  /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":19
+  /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":22
  *     length = PyArray_SIZE(input)
  * 
  *     result = <ndarray> np.zeros(length, dtype=np.int8)             # <<<<<<<<<<<<<<
  * 
  *     iter= PyArray_IterNew(input)
  */
-  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__zeros); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__zeros); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_2);
   __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
-  __pyx_t_1 = PyInt_FromLong(__pyx_v_length); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_1 = PyInt_FromLong(__pyx_v_length); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_1);
-  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_3);
   PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
   __Pyx_GIVEREF(__pyx_t_1);
   __pyx_t_1 = 0;
-  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(((PyObject *)__pyx_t_1));
-  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_4);
-  __pyx_t_5 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__int8); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_5 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__int8); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_5);
   __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__dtype), __pyx_t_5) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__dtype), __pyx_t_5) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
-  __pyx_t_5 = PyEval_CallObjectWithKeywords(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_5 = PyEval_CallObjectWithKeywords(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_5);
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
@@ -3824,7 +3894,7 @@ static  PyArrayObject *__pyx_f_7tseries__isnullobj(PyObject *__pyx_v_input) {
     }
     __pyx_bstride_0_result = __pyx_bstruct_result.strides[0];
     __pyx_bshape_0_result = __pyx_bstruct_result.shape[0];
-    if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   }
   __pyx_t_6 = 0;
   __Pyx_INCREF(((PyObject *)((PyArrayObject *)__pyx_t_5)));
@@ -3832,21 +3902,21 @@ static  PyArrayObject *__pyx_f_7tseries__isnullobj(PyObject *__pyx_v_input) {
   __pyx_v_result = ((PyArrayObject *)__pyx_t_5);
   __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
 
-  /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":21
+  /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":24
  *     result = <ndarray> np.zeros(length, dtype=np.int8)
  * 
  *     iter= PyArray_IterNew(input)             # <<<<<<<<<<<<<<
  * 
  *     for i from 0 <= i < length:
  */
-  __pyx_t_5 = PyArray_IterNew(__pyx_v_input); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_5 = PyArray_IterNew(__pyx_v_input); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_5);
-  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_flatiter))))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_flatiter))))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_DECREF(((PyObject *)__pyx_v_iter));
   __pyx_v_iter = ((PyArrayIterObject *)__pyx_t_5);
   __pyx_t_5 = 0;
 
-  /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":23
+  /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":26
  *     iter= PyArray_IterNew(input)
  * 
  *     for i from 0 <= i < length:             # <<<<<<<<<<<<<<
@@ -3856,34 +3926,33 @@ static  PyArrayObject *__pyx_f_7tseries__isnullobj(PyObject *__pyx_v_input) {
   __pyx_t_7 = __pyx_v_length;
   for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_7; __pyx_v_i++) {
 
-    /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":24
+    /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":27
  * 
  *     for i from 0 <= i < length:
  *         val = PyArray_GETITEM(input, PyArray_ITER_DATA(iter))             # <<<<<<<<<<<<<<
  * 
  *         if _checknull(val):
  */
-    if (!(likely(((__pyx_v_input) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_input, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __pyx_t_5 = PyArray_GETITEM(((PyArrayObject *)__pyx_v_input), PyArray_ITER_DATA(__pyx_v_iter)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_t_5 = PyArray_GETITEM(((PyArrayObject *)__pyx_v_input), PyArray_ITER_DATA(__pyx_v_iter)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_GOTREF(__pyx_t_5);
     __Pyx_DECREF(__pyx_v_val);
     __pyx_v_val = __pyx_t_5;
     __pyx_t_5 = 0;
 
-    /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":26
+    /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":29
  *         val = PyArray_GETITEM(input, PyArray_ITER_DATA(iter))
  * 
  *         if _checknull(val):             # <<<<<<<<<<<<<<
  *             result[i] = 1
  * 
  */
-    __pyx_t_5 = __pyx_f_7tseries__checknull(__pyx_v_val); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_t_5 = __pyx_f_7tseries__checknull(__pyx_v_val); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_GOTREF(__pyx_t_5);
-    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_11 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_11 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
     if (__pyx_t_11) {
 
-      /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":27
+      /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":30
  * 
  *         if _checknull(val):
  *             result[i] = 1             # <<<<<<<<<<<<<<
@@ -3898,14 +3967,14 @@ static  PyArrayObject *__pyx_f_7tseries__isnullobj(PyObject *__pyx_v_input) {
       } else if (unlikely(__pyx_t_12 >= __pyx_bshape_0_result)) __pyx_t_13 = 0;
       if (unlikely(__pyx_t_13 != -1)) {
         __Pyx_RaiseBufferIndexError(__pyx_t_13);
-        {__pyx_filename = __pyx_f[4]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+        {__pyx_filename = __pyx_f[4]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
       }
       *__Pyx_BufPtrStrided1d(npy_int8 *, __pyx_bstruct_result.buf, __pyx_t_12, __pyx_bstride_0_result) = 1;
-      goto __pyx_L5;
+      goto __pyx_L7;
     }
-    __pyx_L5:;
+    __pyx_L7:;
 
-    /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":29
+    /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":32
  *             result[i] = 1
  * 
  *         PyArray_ITER_NEXT(iter)             # <<<<<<<<<<<<<<
@@ -3915,19 +3984,17 @@ static  PyArrayObject *__pyx_f_7tseries__isnullobj(PyObject *__pyx_v_input) {
     PyArray_ITER_NEXT(__pyx_v_iter);
   }
 
-  /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":31
+  /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":34
  *         PyArray_ITER_NEXT(iter)
  * 
  *     return result             # <<<<<<<<<<<<<<
- * 
- * def isnull(input):
  */
-  __Pyx_XDECREF(((PyObject *)__pyx_r));
+  __Pyx_XDECREF(__pyx_r);
   __Pyx_INCREF(((PyObject *)__pyx_v_result));
-  __pyx_r = ((PyArrayObject *)__pyx_v_result);
+  __pyx_r = ((PyObject *)__pyx_v_result);
   goto __pyx_L0;
 
-  __pyx_r = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None);
+  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
   goto __pyx_L0;
   __pyx_L1_error:;
   __Pyx_XDECREF(__pyx_t_1);
@@ -3939,8 +4006,8 @@ static  PyArrayObject *__pyx_f_7tseries__isnullobj(PyObject *__pyx_v_input) {
     __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
     __Pyx_SafeReleaseBuffer(&__pyx_bstruct_result);
   __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
-  __Pyx_AddTraceback("tseries._isnullobj");
-  __pyx_r = 0;
+  __Pyx_AddTraceback("tseries.isnullobj");
+  __pyx_r = NULL;
   goto __pyx_L2;
   __pyx_L0:;
   __Pyx_SafeReleaseBuffer(&__pyx_bstruct_result);
@@ -3948,315 +4015,7 @@ static  PyArrayObject *__pyx_f_7tseries__isnullobj(PyObject *__pyx_v_input) {
   __Pyx_DECREF(__pyx_v_val);
   __Pyx_DECREF((PyObject *)__pyx_v_result);
   __Pyx_DECREF((PyObject *)__pyx_v_iter);
-  __Pyx_DECREF(__pyx_v_input);
-  __Pyx_XGIVEREF((PyObject *)__pyx_r);
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-/* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":33
- *     return result
- * 
- * def isnull(input):             # <<<<<<<<<<<<<<
- *     '''
- *     Replacement for numpy.isnan / -numpy.isfinite which is suitable
- */
-
-static PyObject *__pyx_pf_7tseries_isnull(PyObject *__pyx_self, PyObject *__pyx_v_input); /*proto*/
-static char __pyx_doc_7tseries_isnull[] = "\n    Replacement for numpy.isnan / -numpy.isfinite which is suitable\n    for use on object arrays.\n\n    Parameters\n    ----------\n    arr: ndarray or object value\n\n    Returns\n    -------\n    boolean ndarray or boolean\n    ";
-static PyObject *__pyx_pf_7tseries_isnull(PyObject *__pyx_self, PyObject *__pyx_v_input) {
-  PyArrayObject *__pyx_v_result;
-  Py_buffer __pyx_bstruct_result;
-  Py_ssize_t __pyx_bstride_0_result = 0;
-  Py_ssize_t __pyx_bshape_0_result = 0;
-  PyObject *__pyx_r = NULL;
-  int __pyx_t_1;
-  PyObject *__pyx_t_2 = NULL;
-  PyObject *__pyx_t_3 = NULL;
-  int __pyx_t_4;
-  int __pyx_t_5;
-  int __pyx_t_6;
-  PyObject *__pyx_t_7 = NULL;
-  PyObject *__pyx_t_8 = NULL;
-  PyObject *__pyx_t_9 = NULL;
-  PyObject *__pyx_t_10 = NULL;
-  __Pyx_RefNannySetupContext("isnull");
-  __pyx_self = __pyx_self;
-  __Pyx_INCREF(__pyx_v_input);
-  __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None);
-  __pyx_bstruct_result.buf = NULL;
-
-  /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":48
- *     cdef ndarray[npy_int8, ndim=1] result
- * 
- *     if isinstance(input, np.ndarray):             # <<<<<<<<<<<<<<
- *         if input.dtype.kind in ('O', 'S'):
- *             result = _isnullobj(input)
- */
-  __pyx_t_1 = PyObject_TypeCheck(__pyx_v_input, ((PyTypeObject *)((PyObject*)__pyx_ptype_5numpy_ndarray))); 
-  if (__pyx_t_1) {
-
-    /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":49
- * 
- *     if isinstance(input, np.ndarray):
- *         if input.dtype.kind in ('O', 'S'):             # <<<<<<<<<<<<<<
- *             result = _isnullobj(input)
- * 
- */
-    __pyx_t_2 = PyObject_GetAttr(__pyx_v_input, __pyx_n_s__dtype); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_2);
-    __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__kind); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_3);
-    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-    __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, ((PyObject *)__pyx_n_s__O), Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_2);
-    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 == (int)-1))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-    __pyx_t_4 = ((int)__pyx_t_1);
-    if (!__pyx_t_4) {
-      __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, ((PyObject *)__pyx_n_s__S), Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_2);
-      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 == (int)-1))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-      __pyx_t_5 = ((int)__pyx_t_1);
-      __pyx_t_1 = __pyx_t_5;
-    } else {
-      __pyx_t_1 = __pyx_t_4;
-    }
-    __pyx_t_4 = __pyx_t_1;
-    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-    if (__pyx_t_4) {
-
-      /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":50
- *     if isinstance(input, np.ndarray):
- *         if input.dtype.kind in ('O', 'S'):
- *             result = _isnullobj(input)             # <<<<<<<<<<<<<<
- * 
- *             return result.astype(np.bool)
- */
-      __pyx_t_3 = ((PyObject *)__pyx_f_7tseries__isnullobj(__pyx_v_input)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_3);
-      {
-        __Pyx_BufFmt_StackElem __pyx_stack[1];
-        __Pyx_SafeReleaseBuffer(&__pyx_bstruct_result);
-        __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_bstruct_result, (PyObject*)((PyArrayObject *)__pyx_t_3), &__Pyx_TypeInfo_nn_npy_int8, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
-        if (unlikely(__pyx_t_6 < 0)) {
-          PyErr_Fetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
-          if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_result, (PyObject*)__pyx_v_result, &__Pyx_TypeInfo_nn_npy_int8, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
-            Py_XDECREF(__pyx_t_7); Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9);
-            __Pyx_RaiseBufferFallbackError();
-          } else {
-            PyErr_Restore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
-          }
-        }
-        __pyx_bstride_0_result = __pyx_bstruct_result.strides[0];
-        __pyx_bshape_0_result = __pyx_bstruct_result.shape[0];
-        if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      }
-      __Pyx_DECREF(((PyObject *)__pyx_v_result));
-      __pyx_v_result = ((PyArrayObject *)__pyx_t_3);
-      __pyx_t_3 = 0;
-
-      /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":52
- *             result = _isnullobj(input)
- * 
- *             return result.astype(np.bool)             # <<<<<<<<<<<<<<
- *         else:
- *             return -np.isfinite(input)
- */
-      __Pyx_XDECREF(__pyx_r);
-      __pyx_t_3 = PyObject_GetAttr(((PyObject *)__pyx_v_result), __pyx_n_s__astype); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_3);
-      __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_2);
-      __pyx_t_10 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__bool); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_10);
-      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_2);
-      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_10);
-      __Pyx_GIVEREF(__pyx_t_10);
-      __pyx_t_10 = 0;
-      __pyx_t_10 = PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_10);
-      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-      __pyx_r = __pyx_t_10;
-      __pyx_t_10 = 0;
-      goto __pyx_L0;
-      goto __pyx_L6;
-    }
-    /*else*/ {
-
-      /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":54
- *             return result.astype(np.bool)
- *         else:
- *             return -np.isfinite(input)             # <<<<<<<<<<<<<<
- *     else:
- *         return _checknull(input)
- */
-      __Pyx_XDECREF(__pyx_r);
-      __pyx_t_10 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_10);
-      __pyx_t_2 = PyObject_GetAttr(__pyx_t_10, __pyx_n_s__isfinite); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_2);
-      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
-      __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_10);
-      __Pyx_INCREF(__pyx_v_input);
-      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_input);
-      __Pyx_GIVEREF(__pyx_v_input);
-      __pyx_t_3 = PyObject_Call(__pyx_t_2, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_3);
-      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
-      __pyx_t_10 = PyNumber_Negative(__pyx_t_3); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_10);
-      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-      __pyx_r = __pyx_t_10;
-      __pyx_t_10 = 0;
-      goto __pyx_L0;
-    }
-    __pyx_L6:;
-    goto __pyx_L5;
-  }
-  /*else*/ {
-
-    /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":56
- *             return -np.isfinite(input)
- *     else:
- *         return _checknull(input)             # <<<<<<<<<<<<<<
- * 
- * def notnull(input):
- */
-    __Pyx_XDECREF(__pyx_r);
-    __pyx_t_10 = __pyx_f_7tseries__checknull(__pyx_v_input); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_10);
-    __pyx_r = __pyx_t_10;
-    __pyx_t_10 = 0;
-    goto __pyx_L0;
-  }
-  __pyx_L5:;
-
-  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
-  goto __pyx_L0;
-  __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_2);
-  __Pyx_XDECREF(__pyx_t_3);
-  __Pyx_XDECREF(__pyx_t_10);
-  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
-    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
-    __Pyx_SafeReleaseBuffer(&__pyx_bstruct_result);
-  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
-  __Pyx_AddTraceback("tseries.isnull");
-  __pyx_r = NULL;
-  goto __pyx_L2;
-  __pyx_L0:;
-  __Pyx_SafeReleaseBuffer(&__pyx_bstruct_result);
-  __pyx_L2:;
-  __Pyx_DECREF((PyObject *)__pyx_v_result);
-  __Pyx_DECREF(__pyx_v_input);
-  __Pyx_XGIVEREF(__pyx_r);
-  __Pyx_RefNannyFinishContext();
-  return __pyx_r;
-}
-
-/* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":58
- *         return _checknull(input)
- * 
- * def notnull(input):             # <<<<<<<<<<<<<<
- *     '''
- *     Replacement for numpy.isfinite / -numpy.isnan which is suitable
- */
-
-static PyObject *__pyx_pf_7tseries_notnull(PyObject *__pyx_self, PyObject *__pyx_v_input); /*proto*/
-static char __pyx_doc_7tseries_notnull[] = "\n    Replacement for numpy.isfinite / -numpy.isnan which is suitable\n    for use on object arrays.\n\n    Parameters\n    ----------\n    arr: ndarray or object value\n\n    Returns\n    -------\n    boolean ndarray or boolean\n    ";
-static PyObject *__pyx_pf_7tseries_notnull(PyObject *__pyx_self, PyObject *__pyx_v_input) {
-  PyObject *__pyx_r = NULL;
-  int __pyx_t_1;
-  PyObject *__pyx_t_2 = NULL;
-  PyObject *__pyx_t_3 = NULL;
-  PyObject *__pyx_t_4 = NULL;
-  __Pyx_RefNannySetupContext("notnull");
-  __pyx_self = __pyx_self;
-  __Pyx_INCREF(__pyx_v_input);
-
-  /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":71
- *     boolean ndarray or boolean
- *     '''
- *     if isinstance(input, np.ndarray):             # <<<<<<<<<<<<<<
- *         return -isnull(input)
- *     else:
- */
-  __pyx_t_1 = PyObject_TypeCheck(__pyx_v_input, ((PyTypeObject *)((PyObject*)__pyx_ptype_5numpy_ndarray))); 
-  if (__pyx_t_1) {
-
-    /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":72
- *     '''
- *     if isinstance(input, np.ndarray):
- *         return -isnull(input)             # <<<<<<<<<<<<<<
- *     else:
- *         return not bool(_checknull(input))
- */
-    __Pyx_XDECREF(__pyx_r);
-    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__isnull); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_2);
-    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_3);
-    __Pyx_INCREF(__pyx_v_input);
-    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_input);
-    __Pyx_GIVEREF(__pyx_v_input);
-    __pyx_t_4 = PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_4);
-    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-    __pyx_t_3 = PyNumber_Negative(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_3);
-    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-    __pyx_r = __pyx_t_3;
-    __pyx_t_3 = 0;
-    goto __pyx_L0;
-    goto __pyx_L5;
-  }
-  /*else*/ {
-
-    /* "H:\workspace\pandas\pandas\lib\src\isnull.pyx":74
- *         return -isnull(input)
- *     else:
- *         return not bool(_checknull(input))             # <<<<<<<<<<<<<<
- * 
- */
-    __Pyx_XDECREF(__pyx_r);
-    __pyx_t_3 = __pyx_f_7tseries__checknull(__pyx_v_input); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_3);
-    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_4);
-    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
-    __Pyx_GIVEREF(__pyx_t_3);
-    __pyx_t_3 = 0;
-    __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)&PyBool_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_3);
-    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-    __pyx_t_3 = __Pyx_PyBool_FromLong((!__pyx_t_1)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_3);
-    __pyx_r = __pyx_t_3;
-    __pyx_t_3 = 0;
-    goto __pyx_L0;
-  }
-  __pyx_L5:;
-
-  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
-  goto __pyx_L0;
-  __pyx_L1_error:;
-  __Pyx_XDECREF(__pyx_t_2);
-  __Pyx_XDECREF(__pyx_t_3);
-  __Pyx_XDECREF(__pyx_t_4);
-  __Pyx_AddTraceback("tseries.notnull");
-  __pyx_r = NULL;
-  __pyx_L0:;
-  __Pyx_DECREF(__pyx_v_input);
+  __Pyx_DECREF((PyObject *)__pyx_v_input);
   __Pyx_XGIVEREF(__pyx_r);
   __Pyx_RefNannyFinishContext();
   return __pyx_r;
@@ -4571,11 +4330,12 @@ static PyObject *__pyx_pf_7tseries_groupby(PyObject *__pyx_self, PyObject *__pyx
   PyObject *__pyx_t_9 = NULL;
   PyObject *__pyx_t_10 = NULL;
   PyArrayObject *__pyx_t_11 = NULL;
-  int __pyx_t_12;
-  __pyx_t_5numpy_int8_t __pyx_t_13;
-  int __pyx_t_14;
+  PyArrayObject *__pyx_t_12 = NULL;
+  int __pyx_t_13;
+  __pyx_t_5numpy_int8_t __pyx_t_14;
   int __pyx_t_15;
   int __pyx_t_16;
+  int __pyx_t_17;
   static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__index,&__pyx_n_s__mapper,&__pyx_n_s__output,0};
   __Pyx_RefNannySetupContext("groupby");
   __pyx_self = __pyx_self;
@@ -4701,7 +4461,7 @@ static PyObject *__pyx_pf_7tseries_groupby(PyObject *__pyx_self, PyObject *__pyx
  * 
  *     index_buf = np.asarray(index)             # <<<<<<<<<<<<<<
  *     mapped_index = arrmap(index_buf, mapper)
- *     mask = _isnullobj(mapped_index)
+ *     mask = isnullobj(mapped_index)
  */
   __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_3);
@@ -4745,7 +4505,7 @@ static PyObject *__pyx_pf_7tseries_groupby(PyObject *__pyx_self, PyObject *__pyx
  * 
  *     index_buf = np.asarray(index)
  *     mapped_index = arrmap(index_buf, mapper)             # <<<<<<<<<<<<<<
- *     mask = _isnullobj(mapped_index)
+ *     mask = isnullobj(mapped_index)
  *     nullkeys = index_buf[mask.astype(bool)]
  */
   __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__arrmap); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
@@ -4789,16 +4549,27 @@ static PyObject *__pyx_pf_7tseries_groupby(PyObject *__pyx_self, PyObject *__pyx
   /* "H:\workspace\pandas\pandas\lib\src\groupby.pyx":39
  *     index_buf = np.asarray(index)
  *     mapped_index = arrmap(index_buf, mapper)
- *     mask = _isnullobj(mapped_index)             # <<<<<<<<<<<<<<
+ *     mask = isnullobj(mapped_index)             # <<<<<<<<<<<<<<
  *     nullkeys = index_buf[mask.astype(bool)]
  *     if len(nullkeys) > 0:
  */
-  __pyx_t_4 = ((PyObject *)__pyx_f_7tseries__isnullobj(((PyObject *)__pyx_v_mapped_index))); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__isnullobj); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_4);
+  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __Pyx_INCREF(((PyObject *)__pyx_v_mapped_index));
+  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_mapped_index));
+  __Pyx_GIVEREF(((PyObject *)__pyx_v_mapped_index));
+  __pyx_t_5 = PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_5);
+  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_12 = ((PyArrayObject *)__pyx_t_5);
   {
     __Pyx_BufFmt_StackElem __pyx_stack[1];
     __Pyx_SafeReleaseBuffer(&__pyx_bstruct_mask);
-    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_bstruct_mask, (PyObject*)((PyArrayObject *)__pyx_t_4), &__Pyx_TypeInfo_nn___pyx_t_5numpy_int8_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
+    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_bstruct_mask, (PyObject*)__pyx_t_12, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int8_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
     if (unlikely(__pyx_t_7 < 0)) {
       PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
       if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_mask, (PyObject*)__pyx_v_mask, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int8_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
@@ -4812,37 +4583,38 @@ static PyObject *__pyx_pf_7tseries_groupby(PyObject *__pyx_self, PyObject *__pyx
     __pyx_bshape_0_mask = __pyx_bstruct_mask.shape[0];
     if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   }
+  __pyx_t_12 = 0;
   __Pyx_DECREF(((PyObject *)__pyx_v_mask));
-  __pyx_v_mask = ((PyArrayObject *)__pyx_t_4);
-  __pyx_t_4 = 0;
+  __pyx_v_mask = ((PyArrayObject *)__pyx_t_5);
+  __pyx_t_5 = 0;
 
   /* "H:\workspace\pandas\pandas\lib\src\groupby.pyx":40
  *     mapped_index = arrmap(index_buf, mapper)
- *     mask = _isnullobj(mapped_index)
+ *     mask = isnullobj(mapped_index)
  *     nullkeys = index_buf[mask.astype(bool)]             # <<<<<<<<<<<<<<
  *     if len(nullkeys) > 0:
  *         result[np.NaN] = nullkeys
  */
-  __pyx_t_4 = PyObject_GetAttr(((PyObject *)__pyx_v_mask), __pyx_n_s__astype); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_4);
+  __pyx_t_5 = PyObject_GetAttr(((PyObject *)__pyx_v_mask), __pyx_n_s__astype); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_5);
   __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_3);
   __Pyx_INCREF(((PyObject *)((PyObject*)&PyBool_Type)));
   PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)((PyObject*)&PyBool_Type)));
   __Pyx_GIVEREF(((PyObject *)((PyObject*)&PyBool_Type)));
-  __pyx_t_5 = PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_5);
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+  __pyx_t_4 = PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_4);
+  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
   __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-  __pyx_t_3 = PyObject_GetItem(((PyObject *)__pyx_v_index_buf), __pyx_t_5); if (!__pyx_t_3) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_3 = PyObject_GetItem(((PyObject *)__pyx_v_index_buf), __pyx_t_4); if (!__pyx_t_3) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_3);
-  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
   __Pyx_DECREF(__pyx_v_nullkeys);
   __pyx_v_nullkeys = __pyx_t_3;
   __pyx_t_3 = 0;
 
   /* "H:\workspace\pandas\pandas\lib\src\groupby.pyx":41
- *     mask = _isnullobj(mapped_index)
+ *     mask = isnullobj(mapped_index)
  *     nullkeys = index_buf[mask.astype(bool)]
  *     if len(nullkeys) > 0:             # <<<<<<<<<<<<<<
  *         result[np.NaN] = nullkeys
@@ -4861,11 +4633,11 @@ static PyObject *__pyx_pf_7tseries_groupby(PyObject *__pyx_self, PyObject *__pyx
  */
     __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_GOTREF(__pyx_t_3);
-    __pyx_t_5 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__NaN); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_5);
+    __pyx_t_4 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__NaN); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_4);
     __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
-    if (PyDict_SetItem(((PyObject *)__pyx_v_result), __pyx_t_5, __pyx_v_nullkeys) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
+    if (PyDict_SetItem(((PyObject *)__pyx_v_result), __pyx_t_4, __pyx_v_nullkeys) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
     goto __pyx_L7;
   }
   __pyx_L7:;
@@ -4887,10 +4659,10 @@ static PyObject *__pyx_pf_7tseries_groupby(PyObject *__pyx_self, PyObject *__pyx
  *             continue
  * 
  */
-    __pyx_t_12 = __pyx_v_i;
-    if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_bshape_0_mask;
-    __pyx_t_13 = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int8_t *, __pyx_bstruct_mask.buf, __pyx_t_12, __pyx_bstride_0_mask));
-    if (__pyx_t_13) {
+    __pyx_t_13 = __pyx_v_i;
+    if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_bshape_0_mask;
+    __pyx_t_14 = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int8_t *, __pyx_bstruct_mask.buf, __pyx_t_13, __pyx_bstride_0_mask));
+    if (__pyx_t_14) {
 
       /* "H:\workspace\pandas\pandas\lib\src\groupby.pyx":46
  *     for i from 0 <= i < length:
@@ -4911,13 +4683,13 @@ static PyObject *__pyx_pf_7tseries_groupby(PyObject *__pyx_self, PyObject *__pyx
  *         idx = index_buf[i]
  *         if key in result:
  */
-    __pyx_t_14 = __pyx_v_i;
-    if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_bshape_0_mapped_index;
-    __pyx_t_5 = *__Pyx_BufPtrStrided1d(PyObject **, __pyx_bstruct_mapped_index.buf, __pyx_t_14, __pyx_bstride_0_mapped_index);
-    __Pyx_INCREF((PyObject*)__pyx_t_5);
+    __pyx_t_15 = __pyx_v_i;
+    if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_bshape_0_mapped_index;
+    __pyx_t_4 = *__Pyx_BufPtrStrided1d(PyObject **, __pyx_bstruct_mapped_index.buf, __pyx_t_15, __pyx_bstride_0_mapped_index);
+    __Pyx_INCREF((PyObject*)__pyx_t_4);
     __Pyx_DECREF(__pyx_v_key);
-    __pyx_v_key = __pyx_t_5;
-    __pyx_t_5 = 0;
+    __pyx_v_key = __pyx_t_4;
+    __pyx_t_4 = 0;
 
     /* "H:\workspace\pandas\pandas\lib\src\groupby.pyx":49
  * 
@@ -4926,13 +4698,13 @@ static PyObject *__pyx_pf_7tseries_groupby(PyObject *__pyx_self, PyObject *__pyx
  *         if key in result:
  *             members = result[key]
  */
-    __pyx_t_15 = __pyx_v_i;
-    if (__pyx_t_15 < 0) __pyx_t_15 += __pyx_bshape_0_index_buf;
-    __pyx_t_5 = *__Pyx_BufPtrStrided1d(PyObject **, __pyx_bstruct_index_buf.buf, __pyx_t_15, __pyx_bstride_0_index_buf);
-    __Pyx_INCREF((PyObject*)__pyx_t_5);
+    __pyx_t_16 = __pyx_v_i;
+    if (__pyx_t_16 < 0) __pyx_t_16 += __pyx_bshape_0_index_buf;
+    __pyx_t_4 = *__Pyx_BufPtrStrided1d(PyObject **, __pyx_bstruct_index_buf.buf, __pyx_t_16, __pyx_bstride_0_index_buf);
+    __Pyx_INCREF((PyObject*)__pyx_t_4);
     __Pyx_DECREF(__pyx_v_idx);
-    __pyx_v_idx = __pyx_t_5;
-    __pyx_t_5 = 0;
+    __pyx_v_idx = __pyx_t_4;
+    __pyx_t_4 = 0;
 
     /* "H:\workspace\pandas\pandas\lib\src\groupby.pyx":50
  *         key = mapped_index[i]
@@ -4955,12 +4727,12 @@ static PyObject *__pyx_pf_7tseries_groupby(PyObject *__pyx_self, PyObject *__pyx
  *             members.append(idx)
  *         else:
  */
-      __pyx_t_5 = PyObject_GetItem(((PyObject *)__pyx_v_result), __pyx_v_key); if (!__pyx_t_5) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_5);
-      if (!(likely(PyList_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected list, got %.200s", Py_TYPE(__pyx_t_5)->tp_name), 0))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __pyx_t_4 = PyObject_GetItem(((PyObject *)__pyx_v_result), __pyx_v_key); if (!__pyx_t_4) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_4);
+      if (!(likely(PyList_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected list, got %.200s", Py_TYPE(__pyx_t_4)->tp_name), 0))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
       __Pyx_DECREF(((PyObject *)__pyx_v_members));
-      __pyx_v_members = ((PyObject *)__pyx_t_5);
-      __pyx_t_5 = 0;
+      __pyx_v_members = ((PyObject *)__pyx_t_4);
+      __pyx_t_4 = 0;
 
       /* "H:\workspace\pandas\pandas\lib\src\groupby.pyx":52
  *         if key in result:
@@ -4972,7 +4744,7 @@ static PyObject *__pyx_pf_7tseries_groupby(PyObject *__pyx_self, PyObject *__pyx
       if (unlikely(__pyx_v_members == Py_None)) {
         PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
       }
-      __pyx_t_16 = PyList_Append(((PyObject *)__pyx_v_members), __pyx_v_idx); if (unlikely(__pyx_t_16 == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __pyx_t_17 = PyList_Append(((PyObject *)__pyx_v_members), __pyx_v_idx); if (unlikely(__pyx_t_17 == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
       goto __pyx_L11;
     }
     /*else*/ {
@@ -4984,13 +4756,13 @@ static PyObject *__pyx_pf_7tseries_groupby(PyObject *__pyx_self, PyObject *__pyx
  * 
  *     return result
  */
-      __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(((PyObject *)__pyx_t_5));
+      __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
       __Pyx_INCREF(__pyx_v_idx);
-      PyList_SET_ITEM(__pyx_t_5, 0, __pyx_v_idx);
+      PyList_SET_ITEM(__pyx_t_4, 0, __pyx_v_idx);
       __Pyx_GIVEREF(__pyx_v_idx);
-      if (PyDict_SetItem(((PyObject *)__pyx_v_result), __pyx_v_key, ((PyObject *)__pyx_t_5)) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
+      if (PyDict_SetItem(((PyObject *)__pyx_v_result), __pyx_v_key, ((PyObject *)__pyx_t_4)) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
     }
     __pyx_L11:;
     __pyx_L8_continue:;
@@ -5079,11 +4851,12 @@ static PyObject *__pyx_pf_7tseries_groupby_indices(PyObject *__pyx_self, PyObjec
   PyObject *__pyx_t_7 = NULL;
   PyObject *__pyx_t_8 = NULL;
   PyObject *__pyx_t_9 = NULL;
-  int __pyx_t_10;
+  PyArrayObject *__pyx_t_10 = NULL;
   int __pyx_t_11;
-  __pyx_t_5numpy_int8_t __pyx_t_12;
-  int __pyx_t_13;
+  int __pyx_t_12;
+  __pyx_t_5numpy_int8_t __pyx_t_13;
   int __pyx_t_14;
+  int __pyx_t_15;
   static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__index,&__pyx_n_s__mapper,0};
   __Pyx_RefNannySetupContext("groupby_indices");
   __pyx_self = __pyx_self;
@@ -5189,7 +4962,7 @@ static PyObject *__pyx_pf_7tseries_groupby_indices(PyObject *__pyx_self, PyObjec
  *     index = np.asarray(index)
  *     mapped_index = arrmap(index, mapper)             # <<<<<<<<<<<<<<
  * 
- *     mask = _isnullobj(mapped_index)
+ *     mask = isnullobj(mapped_index)
  */
   __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__arrmap); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_4);
@@ -5232,16 +5005,27 @@ static PyObject *__pyx_pf_7tseries_groupby_indices(PyObject *__pyx_self, PyObjec
   /* "H:\workspace\pandas\pandas\lib\src\groupby.pyx":73
  *     mapped_index = arrmap(index, mapper)
  * 
- *     mask = _isnullobj(mapped_index)             # <<<<<<<<<<<<<<
+ *     mask = isnullobj(mapped_index)             # <<<<<<<<<<<<<<
  * 
  *     if mask.astype(bool).any():
  */
-  __pyx_t_3 = ((PyObject *)__pyx_f_7tseries__isnullobj(((PyObject *)__pyx_v_mapped_index))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__isnullobj); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_3);
+  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_2);
+  __Pyx_INCREF(((PyObject *)__pyx_v_mapped_index));
+  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_mapped_index));
+  __Pyx_GIVEREF(((PyObject *)__pyx_v_mapped_index));
+  __pyx_t_4 = PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_4);
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
+  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_10 = ((PyArrayObject *)__pyx_t_4);
   {
     __Pyx_BufFmt_StackElem __pyx_stack[1];
     __Pyx_SafeReleaseBuffer(&__pyx_bstruct_mask);
-    __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_bstruct_mask, (PyObject*)((PyArrayObject *)__pyx_t_3), &__Pyx_TypeInfo_nn___pyx_t_5numpy_int8_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
+    __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_bstruct_mask, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int8_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
     if (unlikely(__pyx_t_6 < 0)) {
       PyErr_Fetch(&__pyx_t_9, &__pyx_t_8, &__pyx_t_7);
       if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_bstruct_mask, (PyObject*)__pyx_v_mask, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int8_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
@@ -5255,37 +5039,38 @@ static PyObject *__pyx_pf_7tseries_groupby_indices(PyObject *__pyx_self, PyObjec
     __pyx_bshape_0_mask = __pyx_bstruct_mask.shape[0];
     if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   }
+  __pyx_t_10 = 0;
   __Pyx_DECREF(((PyObject *)__pyx_v_mask));
-  __pyx_v_mask = ((PyArrayObject *)__pyx_t_3);
-  __pyx_t_3 = 0;
+  __pyx_v_mask = ((PyArrayObject *)__pyx_t_4);
+  __pyx_t_4 = 0;
 
   /* "H:\workspace\pandas\pandas\lib\src\groupby.pyx":75
- *     mask = _isnullobj(mapped_index)
+ *     mask = isnullobj(mapped_index)
  * 
  *     if mask.astype(bool).any():             # <<<<<<<<<<<<<<
  *         null_list = []
  *         result[np.NaN] = null_list
  */
-  __pyx_t_3 = PyObject_GetAttr(((PyObject *)__pyx_v_mask), __pyx_n_s__astype); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_3);
+  __pyx_t_4 = PyObject_GetAttr(((PyObject *)__pyx_v_mask), __pyx_n_s__astype); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_4);
   __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_2);
   __Pyx_INCREF(((PyObject *)((PyObject*)&PyBool_Type)));
   PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)((PyObject*)&PyBool_Type)));
   __Pyx_GIVEREF(((PyObject *)((PyObject*)&PyBool_Type)));
-  __pyx_t_4 = PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_4);
-  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  __pyx_t_3 = PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
+  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_2 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__any); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__any); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
   __Pyx_GOTREF(__pyx_t_2);
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_GOTREF(__pyx_t_4);
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_GOTREF(__pyx_t_3);
   __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
-  if (__pyx_t_10) {
+  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_11 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
+  if (__pyx_t_11) {
 
     /* "H:\workspace\pandas\pandas\lib\src\groupby.pyx":76
  * 
@@ -5294,11 +5079,11 @@ static PyObject *__pyx_pf_7tseries_groupby_indices(PyObject *__pyx_self, PyObjec
  *         result[np.NaN] = null_list
  * 
  */
-    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
+    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
     __Pyx_DECREF(((PyObject *)__pyx_v_null_list));
-    __pyx_v_null_list = __pyx_t_4;
-    __pyx_t_4 = 0;
+    __pyx_v_null_list = __pyx_t_3;
+    __pyx_t_3 = 0;
 
     /* "H:\workspace\pandas\pandas\lib\src\groupby.pyx":77
  *     if mask.astype(bool).any():
@@ -5307,11 +5092,11 @@ static PyObject *__pyx_pf_7tseries_groupby_indices(PyObject *__pyx_self, PyObjec
  * 
  *     for i from 0 <= i < length:
  */
-    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-    __Pyx_GOTREF(__pyx_t_4);
-    __pyx_t_2 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__NaN); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+    __Pyx_GOTREF(__pyx_t_3);
+    __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__NaN); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_GOTREF(__pyx_t_2);
-    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
     if (PyDict_SetItem(((PyObject *)__pyx_v_result), __pyx_t_2, ((PyObject *)__pyx_v_null_list)) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
     goto __pyx_L6;
@@ -5335,10 +5120,10 @@ static PyObject *__pyx_pf_7tseries_groupby_indices(PyObject *__pyx_self, PyObjec
  *             null_list.append(i)
  *         key = mapped_index[i]
  */
-    __pyx_t_11 = __pyx_v_i;
-    if (__pyx_t_11 < 0) __pyx_t_11 += __pyx_bshape_0_mask;
-    __pyx_t_12 = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int8_t *, __pyx_bstruct_mask.buf, __pyx_t_11, __pyx_bstride_0_mask));
-    if (__pyx_t_12) {
+    __pyx_t_12 = __pyx_v_i;
+    if (__pyx_t_12 < 0) __pyx_t_12 += __pyx_bshape_0_mask;
+    __pyx_t_13 = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int8_t *, __pyx_bstruct_mask.buf, __pyx_t_12, __pyx_bstride_0_mask));
+    if (__pyx_t_13) {
 
       /* "H:\workspace\pandas\pandas\lib\src\groupby.pyx":81
  *     for i from 0 <= i < length:
@@ -5352,7 +5137,7 @@ static PyObject *__pyx_pf_7tseries_groupby_indices(PyObject *__pyx_self, PyObjec
       }
       __pyx_t_2 = PyInt_FromLong(__pyx_v_i); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
       __Pyx_GOTREF(__pyx_t_2);
-      __pyx_t_13 = PyList_Append(((PyObject *)__pyx_v_null_list), __pyx_t_2); if (unlikely(__pyx_t_13 == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __pyx_t_14 = PyList_Append(((PyObject *)__pyx_v_null_list), __pyx_t_2); if (unlikely(__pyx_t_14 == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
       __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
       goto __pyx_L9;
     }
@@ -5365,9 +5150,9 @@ static PyObject *__pyx_pf_7tseries_groupby_indices(PyObject *__pyx_self, PyObjec
  *         if key in result:
  *             (<list> result[key]).append(i)
  */
-    __pyx_t_13 = __pyx_v_i;
-    if (__pyx_t_13 < 0) __pyx_t_13 += __pyx_bshape_0_mapped_index;
-    __pyx_t_2 = *__Pyx_BufPtrStrided1d(PyObject **, __pyx_bstruct_mapped_index.buf, __pyx_t_13, __pyx_bstride_0_mapped_index);
+    __pyx_t_14 = __pyx_v_i;
+    if (__pyx_t_14 < 0) __pyx_t_14 += __pyx_bshape_0_mapped_index;
+    __pyx_t_2 = *__Pyx_BufPtrStrided1d(PyObject **, __pyx_bstruct_mapped_index.buf, __pyx_t_14, __pyx_bstride_0_mapped_index);
     __Pyx_INCREF((PyObject*)__pyx_t_2);
     __Pyx_DECREF(__pyx_v_key);
     __pyx_v_key = __pyx_t_2;
@@ -5383,9 +5168,9 @@ static PyObject *__pyx_pf_7tseries_groupby_indices(PyObject *__pyx_self, PyObjec
     if (unlikely(((PyObject *)__pyx_v_result) == Py_None)) {
       __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     } else {
-      __pyx_t_10 = ((PyDict_Contains(((PyObject *)__pyx_v_result), __pyx_v_key))); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __pyx_t_11 = ((PyDict_Contains(((PyObject *)__pyx_v_result), __pyx_v_key))); if (unlikely(__pyx_t_11 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
     }
-    if (__pyx_t_10) {
+    if (__pyx_t_11) {
 
       /* "H:\workspace\pandas\pandas\lib\src\groupby.pyx":84
  *         key = mapped_index[i]
@@ -5399,11 +5184,11 @@ static PyObject *__pyx_pf_7tseries_groupby_indices(PyObject *__pyx_self, PyObjec
       if (unlikely(((PyObject *)__pyx_t_2) == Py_None)) {
         PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
       }
-      __pyx_t_4 = PyInt_FromLong(__pyx_v_i); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_4);
-      __pyx_t_14 = PyList_Append(((PyObject *)((PyObject *)__pyx_t_2)), __pyx_t_4); if (unlikely(__pyx_t_14 == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __pyx_t_3 = PyInt_FromLong(__pyx_v_i); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_3);
+      __pyx_t_15 = PyList_Append(((PyObject *)((PyObject *)__pyx_t_2)), __pyx_t_3); if (unlikely(__pyx_t_15 == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
       __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
-      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
+      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
       goto __pyx_L10;
     }
     /*else*/ {
@@ -5415,13 +5200,13 @@ static PyObject *__pyx_pf_7tseries_groupby_indices(PyObject *__pyx_self, PyObjec
  * 
  *     return result
  */
-      __pyx_t_4 = PyInt_FromLong(__pyx_v_i); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
-      __Pyx_GOTREF(__pyx_t_4);
+      __pyx_t_3 = PyInt_FromLong(__pyx_v_i); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
+      __Pyx_GOTREF(__pyx_t_3);
       __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
       __Pyx_GOTREF(((PyObject *)__pyx_t_2));
-      PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
-      __Pyx_GIVEREF(__pyx_t_4);
-      __pyx_t_4 = 0;
+      PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
+      __Pyx_GIVEREF(__pyx_t_3);
+      __pyx_t_3 = 0;
       if (PyDict_SetItem(((PyObject *)__pyx_v_result), __pyx_v_key, ((PyObject *)__pyx_t_2)) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
       __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
     }
@@ -18705,8 +18490,8 @@ static struct PyMethodDef __pyx_methods[] = {
   {__Pyx_NAMESTR("map_indices"), (PyCFunction)__pyx_pf_7tseries_map_indices, METH_O, __Pyx_DOCSTR(__pyx_doc_7tseries_map_indices)},
   {__Pyx_NAMESTR("isAllDates"), (PyCFunction)__pyx_pf_7tseries_isAllDates, METH_O, __Pyx_DOCSTR(0)},
   {__Pyx_NAMESTR("isAllDates2"), (PyCFunction)__pyx_pf_7tseries_isAllDates2, METH_O, __Pyx_DOCSTR(__pyx_doc_7tseries_isAllDates2)},
-  {__Pyx_NAMESTR("isnull"), (PyCFunction)__pyx_pf_7tseries_isnull, METH_O, __Pyx_DOCSTR(__pyx_doc_7tseries_isnull)},
-  {__Pyx_NAMESTR("notnull"), (PyCFunction)__pyx_pf_7tseries_notnull, METH_O, __Pyx_DOCSTR(__pyx_doc_7tseries_notnull)},
+  {__Pyx_NAMESTR("checknull"), (PyCFunction)__pyx_pf_7tseries_checknull, METH_O, __Pyx_DOCSTR(0)},
+  {__Pyx_NAMESTR("isnullobj"), (PyCFunction)__pyx_pf_7tseries_isnullobj, METH_O, __Pyx_DOCSTR(0)},
   {__Pyx_NAMESTR("arrmap"), (PyCFunction)__pyx_pf_7tseries_arrmap, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
   {__Pyx_NAMESTR("groupby"), (PyCFunction)__pyx_pf_7tseries_groupby, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
   {__Pyx_NAMESTR("groupby_indices"), (PyCFunction)__pyx_pf_7tseries_groupby_indices, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
@@ -18774,10 +18559,8 @@ static __Pyx_StringTabEntry __pyx_string_tab[] = {
   {&__pyx_n_s__KeyError, __pyx_k__KeyError, sizeof(__pyx_k__KeyError), 0, 0, 1, 1},
   {&__pyx_n_s__NIL, __pyx_k__NIL, sizeof(__pyx_k__NIL), 0, 0, 1, 1},
   {&__pyx_n_s__NaN, __pyx_k__NaN, sizeof(__pyx_k__NaN), 0, 0, 1, 1},
-  {&__pyx_n_s__O, __pyx_k__O, sizeof(__pyx_k__O), 0, 0, 1, 1},
   {&__pyx_n_s__PAD, __pyx_k__PAD, sizeof(__pyx_k__PAD), 0, 0, 1, 1},
   {&__pyx_n_s__RuntimeError, __pyx_k__RuntimeError, sizeof(__pyx_k__RuntimeError), 0, 0, 1, 1},
-  {&__pyx_n_s__S, __pyx_k__S, sizeof(__pyx_k__S), 0, 0, 1, 1},
   {&__pyx_n_s__ValueError, __pyx_k__ValueError, sizeof(__pyx_k__ValueError), 0, 0, 1, 1},
   {&__pyx_n_s____add__, __pyx_k____add__, sizeof(__pyx_k____add__), 0, 0, 1, 1},
   {&__pyx_n_s____div__, __pyx_k____div__, sizeof(__pyx_k____div__), 0, 0, 1, 1},
@@ -18835,9 +18618,8 @@ static __Pyx_StringTabEntry __pyx_string_tab[] = {
   {&__pyx_n_s__int32, __pyx_k__int32, sizeof(__pyx_k__int32), 0, 0, 1, 1},
   {&__pyx_n_s__int64, __pyx_k__int64, sizeof(__pyx_k__int64), 0, 0, 1, 1},
   {&__pyx_n_s__int8, __pyx_k__int8, sizeof(__pyx_k__int8), 0, 0, 1, 1},
-  {&__pyx_n_s__isfinite, __pyx_k__isfinite, sizeof(__pyx_k__isfinite), 0, 0, 1, 1},
   {&__pyx_n_s__isnan, __pyx_k__isnan, sizeof(__pyx_k__isnan), 0, 0, 1, 1},
-  {&__pyx_n_s__isnull, __pyx_k__isnull, sizeof(__pyx_k__isnull), 0, 0, 1, 1},
+  {&__pyx_n_s__isnullobj, __pyx_k__isnullobj, sizeof(__pyx_k__isnullobj), 0, 0, 1, 1},
   {&__pyx_n_s__itemsize, __pyx_k__itemsize, sizeof(__pyx_k__itemsize), 0, 0, 1, 1},
   {&__pyx_n_s__k, __pyx_k__k, sizeof(__pyx_k__k), 0, 0, 1, 1},
   {&__pyx_n_s__kind, __pyx_k__kind, sizeof(__pyx_k__kind), 0, 0, 1, 1},
