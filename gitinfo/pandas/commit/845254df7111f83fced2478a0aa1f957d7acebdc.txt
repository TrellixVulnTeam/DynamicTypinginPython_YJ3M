commit 845254df7111f83fced2478a0aa1f957d7acebdc
Author: Chang She <changshe@gmail.com>
Date:   Tue Jul 17 11:24:33 2012 -0400

    ENH: naming for other axes; index name for date_range/period_range. TST: testing name pass through

diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 921a35df5..e0045027c 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -1273,7 +1273,7 @@ def _generate_regular_range(start, end, periods, offset):
 
 
 def date_range(start=None, end=None, periods=None, freq='D', tz=None,
-               normalize=False):
+               normalize=False, name=None):
     """
     Return a fixed frequency datetime index, with day (calendar) as the default
     frequency
@@ -1293,6 +1293,8 @@ def date_range(start=None, end=None, periods=None, freq='D', tz=None,
         Asia/Beijing
     normalize : bool, default False
         Normalize start/end dates to midnight before generating date range
+    name : str, default None
+        Name of the resulting index
 
     Notes
     -----
@@ -1303,11 +1305,11 @@ def date_range(start=None, end=None, periods=None, freq='D', tz=None,
     rng : DatetimeIndex
     """
     return DatetimeIndex(start=start, end=end, periods=periods,
-                         freq=freq, tz=tz, normalize=normalize)
+                         freq=freq, tz=tz, normalize=normalize, name=name)
 
 
 def bdate_range(start=None, end=None, periods=None, freq='B', tz=None,
-                normalize=True):
+                normalize=True, name=None):
     """
     Return a fixed frequency datetime index, with business day as the default
     frequency
@@ -1327,6 +1329,8 @@ def bdate_range(start=None, end=None, periods=None, freq='B', tz=None,
         Asia/Beijing
     normalize : bool, default False
         Normalize start/end dates to midnight before generating date range
+    name : str, default None
+        Name for the resulting index
 
     Notes
     -----
@@ -1338,7 +1342,7 @@ def bdate_range(start=None, end=None, periods=None, freq='B', tz=None,
     """
 
     return DatetimeIndex(start=start, end=end, periods=periods,
-                         freq=freq, tz=tz, normalize=normalize)
+                         freq=freq, tz=tz, normalize=normalize, name=name)
 
 
 def _to_m8(key):
@@ -1381,5 +1385,3 @@ def _in_range(start, end, rng_start, rng_end):
 def _time_to_micros(time):
     seconds = time.hour * 60 * 60 + 60 * time.minute + time.second
     return 1000000 * seconds + time.microsecond
-
-
diff --git a/pandas/tseries/period.py b/pandas/tseries/period.py
index c141bfa87..c82642277 100644
--- a/pandas/tseries/period.py
+++ b/pandas/tseries/period.py
@@ -1090,7 +1090,7 @@ def _validate_end_alias(how):
 def pnow(freq=None):
     return Period(datetime.now(), freq=freq)
 
-def period_range(start=None, end=None, periods=None, freq='D'):
+def period_range(start=None, end=None, periods=None, freq='D', name=None):
     """
     Return a fixed frequency datetime index, with day (calendar) as the default
     frequency
@@ -1100,15 +1100,19 @@ def period_range(start=None, end=None, periods=None, freq='D'):
     ----------
     start :
     end :
-    normalize : bool, default False
-        Normalize start/end dates to midnight before generating date range
+    periods : int, default None
+        Number of periods in the index
+    freq : str/DateOffset, default 'D'
+        Frequency alias
+    name : str, default None
+        Name for the resulting PeriodIndex
 
     Returns
     -------
-
+    prng : PeriodIndex
     """
     return PeriodIndex(start=start, end=end, periods=periods,
-                       freq=freq)
+                       freq=freq, name=name)
 
 def _period_rule_to_timestamp_rule(freq, how='end'):
     how = how.lower()
diff --git a/pandas/tseries/resample.py b/pandas/tseries/resample.py
index 522049b88..d0b0a6dee 100644
--- a/pandas/tseries/resample.py
+++ b/pandas/tseries/resample.py
@@ -78,7 +78,8 @@ class TimeGrouper(CustomGrouper):
         else:  # pragma: no cover
             raise TypeError('Only valid with DatetimeIndex or PeriodIndex')
 
-        rs.index.name = obj.index.name
+        rs_axis = rs._get_axis(self.axis)
+        rs_axis.name = axis.name
         return rs
 
     def get_grouper(self, obj):
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index 1b20ec534..bb2b7096e 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -82,12 +82,14 @@ class TestResample(unittest.TestCase):
         self.assertEquals(len(r.index), 2593)
 
     def test_resample_basic(self):
-        rng = date_range('1/1/2000 00:00:00', '1/1/2000 00:13:00', freq='min')
+        rng = date_range('1/1/2000 00:00:00', '1/1/2000 00:13:00', freq='min',
+                         name='index')
         s = Series(np.random.randn(14), index=rng)
         result = s.resample('5min', how='mean', closed='right', label='right')
         expected = Series([s[0], s[1:6].mean(), s[6:11].mean(), s[11:].mean()],
                           index=date_range('1/1/2000', periods=4, freq='5min'))
         assert_series_equal(result, expected)
+        self.assert_(result.index.name == 'index')
 
         result = s.resample('5min', how='mean', closed='left', label='right')
         expected = Series([s[:5].mean(), s[5:10].mean(), s[10:].mean()],
@@ -103,7 +105,7 @@ class TestResample(unittest.TestCase):
 
         # from daily
         dti = DatetimeIndex(start=datetime(2005,1,1), end=datetime(2005,1,10),
-                            freq='D')
+                            freq='D', name='index')
 
         s = Series(np.random.rand(len(dti)), dti)
 
@@ -153,6 +155,7 @@ class TestResample(unittest.TestCase):
         self.assertEquals(result.irow(0), s['1/3/2005'])
         self.assertEquals(result.irow(1), s['1/4/2005'])
         self.assertEquals(result.irow(5), s['1/10/2005'])
+        self.assert_(result.index.name == 'index')
 
     def test_resample_frame_basic(self):
         df = tm.makeTimeDataFrame()
@@ -208,7 +211,7 @@ class TestResample(unittest.TestCase):
     def test_resample_upsample(self):
         # from daily
         dti = DatetimeIndex(start=datetime(2005,1,1), end=datetime(2005,1,10),
-                            freq='D')
+                            freq='D', name='index')
 
         s = Series(np.random.rand(len(dti)), dti)
 
@@ -218,6 +221,8 @@ class TestResample(unittest.TestCase):
         self.assertEquals(result[0], s[0])
         self.assertEquals(result[-1], s[-1])
 
+        self.assert_(result.index.name == 'index')
+
     def test_upsample_with_limit(self):
         rng = date_range('1/1/2000', periods=3, freq='5t')
         ts = Series(np.random.randn(len(rng)), rng)
@@ -825,4 +830,3 @@ class TestTimeGrouper(unittest.TestCase):
 if __name__ == '__main__':
     nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
                    exit=False)
-
