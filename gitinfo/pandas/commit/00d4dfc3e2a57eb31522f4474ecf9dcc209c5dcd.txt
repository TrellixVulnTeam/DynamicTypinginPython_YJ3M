commit 00d4dfc3e2a57eb31522f4474ecf9dcc209c5dcd
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Sun Nov 3 06:54:46 2019 -0800

    CLN: Remove unused _isfinite, make_axis_dummies (#29380)

diff --git a/pandas/core/nanops.py b/pandas/core/nanops.py
index 070891c4a..7e5034896 100644
--- a/pandas/core/nanops.py
+++ b/pandas/core/nanops.py
@@ -16,7 +16,6 @@ from pandas.core.dtypes.common import (
     is_any_int_dtype,
     is_bool_dtype,
     is_complex,
-    is_complex_dtype,
     is_datetime64_dtype,
     is_datetime64tz_dtype,
     is_datetime_or_timedelta_dtype,
@@ -325,19 +324,6 @@ def _get_values(
     return values, mask, dtype, dtype_max, fill_value
 
 
-def _isfinite(values):
-    if is_datetime_or_timedelta_dtype(values):
-        return isna(values)
-    if (
-        is_complex_dtype(values)
-        or is_float_dtype(values)
-        or is_integer_dtype(values)
-        or is_bool_dtype(values)
-    ):
-        return ~np.isfinite(values)
-    return ~np.isfinite(values.astype("float64"))
-
-
 def _na_ok_dtype(dtype):
     # TODO: what about datetime64tz?  PeriodDtype?
     return not issubclass(dtype.type, (np.integer, np.timedelta64, np.datetime64))
diff --git a/pandas/core/reshape/reshape.py b/pandas/core/reshape/reshape.py
index ad7081fb1..949d8f1bf 100644
--- a/pandas/core/reshape/reshape.py
+++ b/pandas/core/reshape/reshape.py
@@ -1046,43 +1046,7 @@ def _get_dummies_1d(
         return DataFrame(dummy_mat, index=index, columns=dummy_cols)
 
 
-def make_axis_dummies(frame, axis="minor", transform=None):
-    """
-    Construct 1-0 dummy variables corresponding to designated axis
-    labels
-
-    Parameters
-    ----------
-    frame : DataFrame
-    axis : {'major', 'minor'}, default 'minor'
-    transform : function, default None
-        Function to apply to axis labels first. For example, to
-        get "day of week" dummies in a time series regression
-        you might call::
-
-            make_axis_dummies(panel, axis='major',
-                              transform=lambda d: d.weekday())
-    Returns
-    -------
-    dummies : DataFrame
-        Column names taken from chosen axis
-    """
-    numbers = {"major": 0, "minor": 1}
-    num = numbers.get(axis, axis)
-
-    items = frame.index.levels[num]
-    codes = frame.index.codes[num]
-    if transform is not None:
-        mapped_items = items.map(transform)
-        codes, items = _factorize_from_iterable(mapped_items.take(codes))
-
-    values = np.eye(len(items), dtype=float)
-    values = values.take(codes, axis=0)
-
-    return DataFrame(values, columns=items, index=frame.index)
-
-
-def _reorder_for_extension_array_stack(arr, n_rows, n_columns):
+def _reorder_for_extension_array_stack(arr, n_rows: int, n_columns: int):
     """
     Re-orders the values when stacking multiple extension-arrays.
 
diff --git a/pandas/tests/reshape/test_reshape.py b/pandas/tests/reshape/test_reshape.py
index 2e94eeba1..b695b05c7 100644
--- a/pandas/tests/reshape/test_reshape.py
+++ b/pandas/tests/reshape/test_reshape.py
@@ -645,24 +645,3 @@ class TestCategoricalReshape:
             index=dti.rename("major"),
         )
         tm.assert_frame_equal(result, expected)
-
-
-class TestMakeAxisDummies:
-    def test_preserve_categorical_dtype(self):
-        # GH13854
-        for ordered in [False, True]:
-            cidx = pd.CategoricalIndex(list("xyz"), ordered=ordered)
-            midx = pd.MultiIndex(levels=[["a"], cidx], codes=[[0, 0], [0, 1]])
-            df = DataFrame([[10, 11]], index=midx)
-
-            expected = DataFrame(
-                [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0]], index=midx, columns=cidx
-            )
-
-            from pandas.core.reshape.reshape import make_axis_dummies
-
-            result = make_axis_dummies(df)
-            tm.assert_frame_equal(result, expected)
-
-            result = make_axis_dummies(df, transform=lambda x: x)
-            tm.assert_frame_equal(result, expected)
diff --git a/pandas/tests/test_nanops.py b/pandas/tests/test_nanops.py
index 49d1777df..52ad56967 100644
--- a/pandas/tests/test_nanops.py
+++ b/pandas/tests/test_nanops.py
@@ -704,46 +704,6 @@ class TestnanopsDataFrame:
             self.check_bool(nanops._has_infs, val.astype("f4"), correct)
             self.check_bool(nanops._has_infs, val.astype("f2"), correct)
 
-    def test__isfinite(self):
-        pairs = [
-            ("arr_complex", False),
-            ("arr_int", False),
-            ("arr_bool", False),
-            ("arr_str", False),
-            ("arr_utf", False),
-            ("arr_complex", False),
-            ("arr_complex_nan", True),
-            ("arr_nan_nanj", True),
-            ("arr_nan_infj", True),
-            ("arr_complex_nan_infj", True),
-        ]
-        pairs_float = [
-            ("arr_float", False),
-            ("arr_nan", True),
-            ("arr_float_nan", True),
-            ("arr_nan_nan", True),
-            ("arr_float_inf", True),
-            ("arr_inf", True),
-            ("arr_nan_inf", True),
-            ("arr_float_nan_inf", True),
-            ("arr_nan_nan_inf", True),
-        ]
-
-        func1 = lambda x: np.any(nanops._isfinite(x).ravel())
-
-        # TODO: unused?
-        # func2 = lambda x: np.any(nanops._isfinite(x).values.ravel())
-
-        for arr, correct in pairs:
-            val = getattr(self, arr)
-            self.check_bool(func1, val, correct)
-
-        for arr, correct in pairs_float:
-            val = getattr(self, arr)
-            self.check_bool(func1, val, correct)
-            self.check_bool(func1, val.astype("f4"), correct)
-            self.check_bool(func1, val.astype("f2"), correct)
-
     def test__bn_ok_dtype(self):
         assert nanops._bn_ok_dtype(self.arr_float.dtype, "test")
         assert nanops._bn_ok_dtype(self.arr_complex.dtype, "test")
