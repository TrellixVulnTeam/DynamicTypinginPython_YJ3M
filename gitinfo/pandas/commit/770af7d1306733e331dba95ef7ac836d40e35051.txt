commit 770af7d1306733e331dba95ef7ac836d40e35051
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Aug 11 17:47:34 2012 -0400

    BUG: reindex when passing Series to Series constructor, close #1671

diff --git a/RELEASE.rst b/RELEASE.rst
index 32cf719d3..218461841 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -58,6 +58,7 @@ pandas 0.8.2
     first date in the array (#1673)
   - Fix field access with  UTC->local conversion on unsorted arrays (#1756)
   - Fix isnull handling of array-like (list) inputs (#1755)
+  - Fix regression in handling of Series in Series constructor (#1671)
 
 pandas 0.8.1
 ============
diff --git a/pandas/core/reshape.py b/pandas/core/reshape.py
index 621d1d689..5c6f04aa1 100644
--- a/pandas/core/reshape.py
+++ b/pandas/core/reshape.py
@@ -289,7 +289,7 @@ def pivot(self, index=None, columns=None, values=None):
         indexed = self.set_index([index, columns])
         return indexed.unstack(columns)
     else:
-        indexed = Series(self[values],
+        indexed = Series(self[values].values,
                          index=[self[index], self[columns]])
         return indexed.unstack(columns)
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index dacbfefb3..259092063 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -302,10 +302,13 @@ class Series(np.ndarray, generic.PandasObject):
             index = _ensure_index(index)
 
         if isinstance(data, Series):
-            if index is None:
-                index = data.index
             if name is None:
                 name = data.name
+
+            if index is None:
+                index = data.index
+            else:
+                data = data.reindex(index).values
         elif isinstance(data, dict):
             if index is None:
                 index = Index(sorted(data))
@@ -771,7 +774,8 @@ copy : boolean, default False
         resetted : DataFrame, or Series if drop == True
         """
         if drop:
-            return Series(self, index=np.arange(len(self)), name=self.name)
+            return Series(self.values.copy(),
+                          index=np.arange(len(self)), name=self.name)
         else:
             from pandas.core.frame import DataFrame
             if name is None:
@@ -2414,7 +2418,7 @@ copy : boolean, default False
     #----------------------------------------------------------------------
     # Time series-oriented methods
 
-    def shift(self, periods=1, freq=None, **kwds):
+    def shift(self, periods=1, freq=None, copy=True, **kwds):
         """
         Shift the index of the Series by desired number of periods with an
         optional time offset
@@ -2438,6 +2442,12 @@ copy : boolean, default False
         if isinstance(offset, basestring):
             offset = datetools.to_offset(offset)
 
+        def _get_values():
+            values = self.values
+            if copy:
+                values = values.copy()
+            return values
+
         if offset is None:
             new_values = np.empty(len(self), dtype=self.dtype)
             new_values = _maybe_upcast(new_values)
@@ -2453,12 +2463,14 @@ copy : boolean, default False
         elif isinstance(self.index, PeriodIndex):
             orig_offset = datetools.to_offset(self.index.freq)
             if orig_offset == offset:
-                return Series(self, self.index.shift(periods), name=self.name)
+                return Series(_get_values(), self.index.shift(periods),
+                              name=self.name)
             msg = ('Given freq %s does not match PeriodIndex freq %s' %
                    (offset.rule_code, orig_offset.rule_code))
             raise ValueError(msg)
         else:
-            return Series(self, index=self.index.shift(periods, offset),
+            return Series(_get_values(),
+                          index=self.index.shift(periods, offset),
                           name=self.name)
 
     def asof(self, where):
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 2499738f6..f04f881b8 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -262,6 +262,14 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         empty2 = Series(np.nan, index=range(10))
         assert_series_equal(empty, empty2)
 
+    def test_constructor_series(self):
+        index1 = ['d', 'b', 'a', 'c']
+        index2 = sorted(index1)
+        s1 = Series([4, 7, -5, 3], index=index1)
+        s2 = Series(s1, index=index2)
+
+        assert_series_equal(s2, s1.sort_index())
+
     def test_constructor_maskedarray(self):
         data = ma.masked_all((3,), dtype=float)
         result = Series(data)
