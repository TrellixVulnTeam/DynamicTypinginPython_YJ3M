commit cf673a485df55a929e57cdb6ae6a2bd4ff19f7bc
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Aug 12 14:13:49 2012 -0400

    ENH: add na_action='ignore' option to Series.map close #1661

diff --git a/RELEASE.rst b/RELEASE.rst
index 2b10d17c9..c7b0a6603 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -36,6 +36,7 @@ pandas 0.8.2
   - Add ``flags`` option for ``re.compile`` in some Series.str methods (#1659)
   - Parsing of UTC date strings in read_* functions (#1693)
   - Handle generator input to Series (#1679)
+  - Add `na_action='ignore'` to Series.map to quietly propagate NAs (#1661)
 
 **API Changes**
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index ed37405fd..db70dab11 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1900,7 +1900,7 @@ copy : boolean, default False
     #----------------------------------------------------------------------
     # function application
 
-    def map(self, arg):
+    def map(self, arg, na_action=None):
         """
         Map values of Series using input correspondence (which can be
         a dict, Series, or function)
@@ -1908,6 +1908,8 @@ copy : boolean, default False
         Parameters
         ----------
         arg : function, dict, or Series
+        na_action : {None, 'ignore'}
+            If 'ignore', propagate NA values
 
         Examples
         --------
@@ -1931,15 +1933,24 @@ copy : boolean, default False
         y : Series
             same index as caller
         """
+        values = self.values
+
+        if na_action == 'ignore':
+            mask = isnull(values)
+            def map_f(values, f):
+                return lib.map_infer_mask(values, f, mask.view(np.uint8))
+        else:
+            map_f = lib.map_infer
+
         if isinstance(arg, (dict, Series)):
             if isinstance(arg, dict):
                 arg = Series(arg)
 
-            indexer = arg.index.get_indexer(self.values)
+            indexer = arg.index.get_indexer(values)
             new_values = com.take_1d(arg.values, indexer)
             return Series(new_values, index=self.index, name=self.name)
         else:
-            mapped = lib.map_infer(self.values, arg)
+            mapped = map_f(values, arg)
             return Series(mapped, index=self.index, name=self.name)
 
     def apply(self, func, convert_dtype=True):
diff --git a/pandas/src/inference.pyx b/pandas/src/inference.pyx
index b1c366270..3134dcdc8 100644
--- a/pandas/src/inference.pyx
+++ b/pandas/src/inference.pyx
@@ -664,6 +664,45 @@ def maybe_convert_bool(ndarray[object] arr):
     return result.view(np.bool_)
 
 
+def map_infer_mask(ndarray arr, object f, ndarray[uint8_t] mask,
+                   bint convert=1):
+    '''
+    Substitute for np.vectorize with pandas-friendly dtype inference
+
+    Parameters
+    ----------
+    arr : ndarray
+    f : function
+
+    Returns
+    -------
+    mapped : ndarray
+    '''
+    cdef:
+        Py_ssize_t i, n
+        ndarray[object] result
+        object val
+
+    n = len(arr)
+    result = np.empty(n, dtype=object)
+    for i in range(n):
+        if mask[i]:
+            val = util.get_value_at(arr, i)
+        else:
+            val = f(util.get_value_at(arr, i))
+
+            # unbox 0-dim arrays, GH #690
+            if is_array(val) and PyArray_NDIM(val) == 0:
+                # is there a faster way to unbox?
+                val = val.item()
+
+        result[i] = val
+
+    if convert:
+        return maybe_convert_objects(result, try_float=0,
+                                     convert_datetime=0)
+
+    return result
 def map_infer(ndarray arr, object f, bint convert=1):
     '''
     Substitute for np.vectorize with pandas-friendly dtype inference
@@ -700,6 +739,7 @@ def map_infer(ndarray arr, object f, bint convert=1):
 
     return result
 
+
 def to_object_array(list rows):
     cdef:
         Py_ssize_t i, j, n, k, tmp
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index eb3b074da..daefbd745 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -2295,6 +2295,13 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         self.assert_(result.dtype == np.object_)
         self.assert_(isinstance(result[0], Decimal))
 
+    def test_map_na_exclusion(self):
+        s = Series([1.5, np.nan, 3, np.nan, 5])
+
+        result = s.map(lambda x: x * 2, na_action='ignore')
+        exp = s * 2
+        assert_series_equal(result, exp)
+
     def test_apply(self):
         assert_series_equal(self.ts.apply(np.sqrt), np.sqrt(self.ts))
 
