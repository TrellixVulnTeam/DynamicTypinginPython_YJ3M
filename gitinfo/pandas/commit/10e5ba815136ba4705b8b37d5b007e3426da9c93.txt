commit 10e5ba815136ba4705b8b37d5b007e3426da9c93
Author: Ã…smund Hjulstad <asmund.hjulstad@gmail.com>
Date:   Mon Dec 8 07:48:42 2014 +0100

    Return from to_timedelta is forced to dtype timedelta64[ns]. (Fixes pydata/pandas #9011)

diff --git a/doc/source/whatsnew/v0.15.2.txt b/doc/source/whatsnew/v0.15.2.txt
index f034e0e22..a2728c2d8 100644
--- a/doc/source/whatsnew/v0.15.2.txt
+++ b/doc/source/whatsnew/v0.15.2.txt
@@ -268,3 +268,5 @@ Bug Fixes
 - Fixed ValueError raised by cummin/cummax when datetime64 Series contains NaT. (:issue:`8965`)
 - Bug in Datareader returns object dtype if there are missing values (:issue:`8980`)
 - Bug in plotting if sharex was enabled and index was a timeseries, would show labels on multiple axes (:issue:`3964`).
+
+- Bug where passing a unit to the TimedeltaIndex constructor applied the to nano-second conversion twice. (:issue:`9011`).
diff --git a/pandas/tseries/tests/test_timedeltas.py b/pandas/tseries/tests/test_timedeltas.py
index 494a9cc95..de23ddcc3 100644
--- a/pandas/tseries/tests/test_timedeltas.py
+++ b/pandas/tseries/tests/test_timedeltas.py
@@ -525,6 +525,22 @@ class TestTimedeltas(tm.TestCase):
         expected = TimedeltaIndex([ np.timedelta64(1,'D') ]*5)
         tm.assert_index_equal(result, expected)
 
+        # Test with lists as input when box=false
+        expected = np.array(np.arange(3)*1000000000, dtype='timedelta64[ns]')
+        result = to_timedelta(range(3), unit='s', box=False)
+        tm.assert_numpy_array_equal(expected, result)
+
+        result = to_timedelta(np.arange(3), unit='s', box=False)
+        tm.assert_numpy_array_equal(expected, result)
+
+        result = to_timedelta([0, 1, 2], unit='s', box=False)
+        tm.assert_numpy_array_equal(expected, result)
+
+        # Tests with fractional seconds as input:
+        expected = np.array([0, 500000000, 800000000, 1200000000], dtype='timedelta64[ns]')
+        result = to_timedelta([0., 0.5, 0.8, 1.2], unit='s', box=False)
+        tm.assert_numpy_array_equal(expected, result)
+       
         def testit(unit, transform):
 
             # array
@@ -852,6 +868,13 @@ class TestTimedeltaIndex(tm.TestCase):
                                  pd.offsets.Second(3)])
         tm.assert_index_equal(result,expected)
 
+        expected = TimedeltaIndex(['0 days 00:00:00', '0 days 00:00:01', '0 days 00:00:02'])
+        tm.assert_index_equal(TimedeltaIndex(range(3), unit='s'), expected)
+        expected = TimedeltaIndex(['0 days 00:00:00', '0 days 00:00:05', '0 days 00:00:09'])
+        tm.assert_index_equal(TimedeltaIndex([0, 5, 9], unit='s'), expected)
+        expected = TimedeltaIndex(['0 days 00:00:00.400', '0 days 00:00:00.450', '0 days 00:00:01.200'])
+        tm.assert_index_equal(TimedeltaIndex([400, 450, 1200], unit='ms'), expected)
+
     def test_constructor_coverage(self):
         rng = timedelta_range('1 days', periods=10.5)
         exp = timedelta_range('1 days', periods=10)
diff --git a/pandas/tseries/timedeltas.py b/pandas/tseries/timedeltas.py
index dc60f5024..91e75da1b 100644
--- a/pandas/tseries/timedeltas.py
+++ b/pandas/tseries/timedeltas.py
@@ -52,6 +52,7 @@ def to_timedelta(arg, unit='ns', box=True, coerce=False):
                     value = np.array([ _get_string_converter(r, unit=unit)() for r in arg ],dtype='m8[ns]')
                 except:
                     value = np.array([ _coerce_scalar_to_timedelta_type(r, unit=unit, coerce=coerce) for r in arg ])
+            value = value.astype('timedelta64[ns]', copy=False)
 
         if box:
             from pandas import TimedeltaIndex
