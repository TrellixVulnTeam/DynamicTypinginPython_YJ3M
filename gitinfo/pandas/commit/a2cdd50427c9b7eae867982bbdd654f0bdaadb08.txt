commit a2cdd50427c9b7eae867982bbdd654f0bdaadb08
Author: Joris Van den Bossche <jorisvandenbossche@gmail.com>
Date:   Fri Apr 10 19:37:21 2020 +0200

    INT: provide helpers for accessing the values of DataFrame columns (#33252)

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index f80dc8f54..932ce427b 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -23,6 +23,7 @@ from typing import (
     FrozenSet,
     Hashable,
     Iterable,
+    Iterator,
     List,
     Optional,
     Sequence,
@@ -40,7 +41,16 @@ import numpy.ma as ma
 from pandas._config import get_option
 
 from pandas._libs import algos as libalgos, lib, properties
-from pandas._typing import Axes, Axis, Dtype, FilePathOrBuffer, Label, Level, Renamer
+from pandas._typing import (
+    ArrayLike,
+    Axes,
+    Axis,
+    Dtype,
+    FilePathOrBuffer,
+    Label,
+    Level,
+    Renamer,
+)
 from pandas.compat import PY37
 from pandas.compat._optional import import_optional_dependency
 from pandas.compat.numpy import function as nv
@@ -2583,6 +2593,21 @@ class DataFrame(NDFrame):
 
             return result
 
+    def _get_column_array(self, i: int) -> ArrayLike:
+        """
+        Get the values of the i'th column (ndarray or ExtensionArray, as stored
+        in the Block)
+        """
+        return self._data.iget_values(i)
+
+    def _iter_column_arrays(self) -> Iterator[ArrayLike]:
+        """
+        Iterate over the arrays of all columns in order.
+        This returns the values as stored in the Block (ndarray or ExtensionArray).
+        """
+        for i in range(len(self.columns)):
+            yield self._get_column_array(i)
+
     def __getitem__(self, key):
         key = lib.item_from_zerodim(key)
         key = com.apply_if_callable(key, self)
@@ -8046,8 +8071,12 @@ Wild         185.0
 
         assert filter_type is None or filter_type == "bool", filter_type
 
-        dtype_is_dt = self.dtypes.apply(
-            lambda x: is_datetime64_any_dtype(x) or is_period_dtype(x)
+        dtype_is_dt = np.array(
+            [
+                is_datetime64_any_dtype(values.dtype) or is_period_dtype(values.dtype)
+                for values in self._iter_column_arrays()
+            ],
+            dtype=bool,
         )
         if numeric_only is None and name in ["mean", "median"] and dtype_is_dt.any():
             warnings.warn(
diff --git a/pandas/core/internals/managers.py b/pandas/core/internals/managers.py
index 9f26cb8b8..be5803677 100644
--- a/pandas/core/internals/managers.py
+++ b/pandas/core/internals/managers.py
@@ -985,6 +985,14 @@ class BlockManager(PandasObject):
             self.axes[1],
         )
 
+    def iget_values(self, i: int) -> ArrayLike:
+        """
+        Return the data for column i as the values (ndarray or ExtensionArray).
+        """
+        block = self.blocks[self.blknos[i]]
+        values = block.iget(self.blklocs[i])
+        return values
+
     def idelete(self, indexer):
         """
         Delete selected locations in-place (new block and array, same BlockManager)
