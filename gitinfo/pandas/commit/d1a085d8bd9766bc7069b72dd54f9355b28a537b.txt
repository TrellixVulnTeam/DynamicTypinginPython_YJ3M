commit d1a085d8bd9766bc7069b72dd54f9355b28a537b
Author: Chang She <chang@lambdafoundry.com>
Date:   Fri May 25 19:00:54 2012 -0400

    BUG: replace bug with non-float and non-object dtype blocks. Also bug in replace caused by np.isscalar(datetime) => False

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 17615a791..5417ddde4 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -102,7 +102,7 @@ def mask_missing(arr, values_to_mask):
     Return a masking array of same size/shape as arr
     with entries equaling any member of values_to_mask set to True
     """
-    if np.isscalar(values_to_mask):
+    if not isinstance(values_to_mask, (list, np.ndarray)):
         values_to_mask = [values_to_mask]
 
     try:
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index e8216349b..98e8cb385 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2848,36 +2848,18 @@ class DataFrame(NDFrame):
         if value is None:
             return self._interpolate(to_replace, method, axis, inplace, limit)
         else:
-            # Float type values
             if len(self.columns) == 0:
                 return self
 
-            if np.isscalar(to_replace):
-
-                if np.isscalar(value): # np.nan -> 0
-                    new_data = self._data.replace(to_replace, value,
-                                                  inplace=inplace)
-                    if inplace:
-                        self._data = new_data
-                        return self
-                    else:
-                        return self._constructor(new_data)
-
-                elif isinstance(value, dict): # np.nan -> {'A' : 0, 'B' : -1}
-                    return self._replace_dest_dict(to_replace, value, inplace)
-
-
-            elif isinstance(to_replace, dict):
+            if isinstance(to_replace, dict):
+                if isinstance(value, dict): # {'A' : np.nan} -> {'A' : 0}
+                    return self._replace_both_dict(to_replace, value, inplace)
 
-                if np.isscalar(value): # {'A' : np.nan, 'B' : ''} -> 0
+                elif not isinstance(value, (list, np.ndarray)):
                     return self._replace_src_dict(to_replace, value, inplace)
 
-                elif isinstance(value, dict): # {'A' : np.nan} -> {'A' : 0}
-                    return self._replace_both_dict(to_replace, value, inplace)
-
                 raise ValueError('Fill value must be scalar or dict')
 
-
             elif isinstance(to_replace, (list, np.ndarray)):
                 # [np.nan, ''] -> [0, 'missing']
                 if isinstance(value, (list, np.ndarray)):
@@ -2899,6 +2881,17 @@ class DataFrame(NDFrame):
                     return self
                 else:
                     return self._constructor(new_data)
+            else:
+                if isinstance(value, dict): # np.nan -> {'A' : 0, 'B' : -1}
+                    return self._replace_dest_dict(to_replace, value, inplace)
+                elif not isinstance(value, (list, np.ndarray)): # np.nan -> 0
+                    new_data = self._data.replace(to_replace, value,
+                                                  inplace=inplace)
+                    if inplace:
+                        self._data = new_data
+                        return self
+                    else:
+                        return self._constructor(new_data)
 
             raise ValueError('Invalid to_replace type: %s' %
                              type(to_replace)) # pragma: no cover
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 9f8659a54..68e61d0dc 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -1,4 +1,5 @@
 import itertools
+from datetime import datetime
 
 from numpy import nan
 import numpy as np
@@ -229,7 +230,7 @@ class Block(object):
         if self._can_hold_element(value):
             value = self._try_cast(value)
 
-        if np.isscalar(to_replace):
+        if not isinstance(to_replace, (list, np.ndarray)):
             if self._can_hold_element(to_replace):
                 to_replace = self._try_cast(to_replace)
                 np.putmask(new_values, com.mask_missing(new_values, to_replace),
@@ -281,7 +282,7 @@ class Block(object):
         return make_block(new_values, self.items, self.ref_items)
 
 def _mask_missing(array, missing_values):
-    if np.isscalar(missing_values):
+    if not isinstance(missing_values, (list, np.ndarray)):
         missing_values = [missing_values]
 
     mask = None
@@ -380,7 +381,7 @@ class DatetimeBlock(Block):
     _can_hold_na = True
 
     def _can_hold_element(self, element):
-        return com.is_integer(element)
+        return com.is_integer(element) or isinstance(element, datetime)
 
     def _try_cast(self, element):
         try:
@@ -1075,7 +1076,6 @@ class BlockManager(object):
 
     def replace(self, to_replace, value, inplace=False):
         new_blocks = [b.replace(to_replace, value, inplace=inplace)
-                      if b._can_hold_na else b
                       for b in self.blocks]
         if inplace:
             return self
