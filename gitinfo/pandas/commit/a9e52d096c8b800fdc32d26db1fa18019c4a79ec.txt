commit a9e52d096c8b800fdc32d26db1fa18019c4a79ec
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Jun 28 22:07:32 2011 -0400

    parsers won't NA out inf values by default. unit tests

diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index cc7194359..c75b8a1a0 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -56,8 +56,9 @@ def read_csv(filepath_or_buffer, header=0, skiprows=None, index_col=0,
     return _simple_parser(lines, header=header, indexCol=index_col,
                           na_values=na_values, date_parser=date_parser)
 
-def read_table(filepath_or_buffer, sep='\t', header=0, skiprows=None, index_col=0,
-               na_values=None, names=None, date_parser=None):
+def read_table(filepath_or_buffer, sep='\t', header=0, skiprows=None,
+               index_col=0, na_values=None, names=None,
+               date_parser=None):
     """
     Read delimited file into DataFrame
 
@@ -116,22 +117,24 @@ def _simple_parser(lines, colNames=None, header=0, indexCol=0,
 
         content = lines[header+1:]
 
-        colCounts = dict(((col, 0) for col in columns))
+        counts = {}
         for i, col in enumerate(columns):
-            if columns.count(col) > 1:
-                columns[i] = col + str(colCounts[col])
-                colCounts[col] += 1
+            cur_count = counts.get(col, 0)
+            if cur_count > 0:
+                columns[i] = '%s.%d' % (col, cur_count)
+            counts[col] = cur_count + 1
     else:
+        ncols = len(lines[0])
         if not colNames:
-            # columns = list(string.ascii_uppercase[:len(lines[0])])
-            columns = ['X.%d' % (i + 1) for i in range(len(lines[0]))]
+            columns = ['X.%d' % (i + 1) for i in range(ncols)]
         else:
+            assert(len(colNames) == ncols)
             columns = colNames
         content = lines
 
     zipped_content = zip(*content)
 
-    if len(content) == 0:
+    if len(content) == 0: # pragma: no cover
         raise Exception('No content to parse')
 
     # no index column specified, so infer that's what is wanted
@@ -155,10 +158,15 @@ def _simple_parser(lines, colNames=None, header=0, indexCol=0,
     return DataFrame(data=data, columns=columns, index=Index(index))
 
 def _floatify(data_dict, na_values=None):
+    """
+
+    """
     # common NA values
-    NA_VALUES = set(['-1.#IND', '1.#QNAN', '1.#IND',
-                     '-1.#QNAN','1.#INF','-1.#INF', '1.#INF000000',
-                     'NA', '#NA', 'NULL', 'NaN', 'nan', ''])
+    # no longer excluding inf representations
+    # '1.#INF','-1.#INF', '1.#INF000000',
+    NA_VALUES = set(['-1.#IND', '1.#QNAN', '1.#IND', '-1.#QNAN',
+                     '#N/A N/A', 'NA', '#NA', 'NULL', 'NaN',
+                     'nan', ''])
     if na_values is None:
         na_values = NA_VALUES
     else:
@@ -169,10 +177,7 @@ def _floatify(data_dict, na_values=None):
             return np.nan
         else:
             try:
-                parsed = np.float64(val)
-                if np.isinf(parsed):
-                    return val
-                return parsed
+                return np.float64(val)
             except Exception:
                 return val
 
diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index 10a52cb3f..a695798cc 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -52,6 +52,34 @@ ignore,this,row
                                     ['A', 'B', 'C', 'Unnamed: 3',
                                      'Unnamed: 4']))
 
+    def test_duplicate_columns(self):
+        data = """A,A,B,B,B
+1,2,3,4,5
+6,7,8,9,10
+11,12,13,14,15
+"""
+        df = read_table(StringIO(data), sep=',', index_col=None)
+        self.assert_(np.array_equal(df.columns,
+                                    ['A', 'A.1', 'B', 'B.1', 'B.2']))
+
+    def test_no_header(self):
+        data = """1,2,3,4,5
+6,7,8,9,10
+11,12,13,14,15
+"""
+        df = read_table(StringIO(data), sep=',', index_col=None,
+                        header=None)
+        names = ['foo', 'bar', 'baz', 'quux', 'panda']
+        df2 = read_table(StringIO(data), sep=',', index_col=None,
+                        header=None, names=names)
+        expected = [[1,2,3,4,5.],
+                    [6,7,8,9,10],
+                    [11,12,13,14,15]]
+        assert_almost_equal(df.values, expected)
+        self.assert_(np.array_equal(df.columns,
+                                    ['X.1', 'X.2', 'X.3', 'X.4', 'X.5']))
+        self.assert_(np.array_equal(df2.columns, names))
+
     def test_read_csv_dataframe(self):
         pth = os.path.join(self.dirpath, 'test1.csv')
         df = read_csv(pth)
diff --git a/test.sh b/test.sh
index b92e3fd54..66e3d2014 100755
--- a/test.sh
+++ b/test.sh
@@ -1,7 +1,7 @@
 #!/bin/sh
 coverage erase
-nosetests -w pandas --with-coverage --cover-package=pandas --pdb-failure --pdb
-# nosetests -w pandas/io --with-coverage --cover-package=pandas.io --pdb-failure --pdb
+# nosetests -w pandas --with-coverage --cover-package=pandas --pdb-failure --pdb
+nosetests -w pandas/io --with-coverage --cover-package=pandas.io --pdb-failure --pdb
 # nosetests -w pandas/core --with-coverage --cover-package=pandas.core --pdb-failure --pdb
 # nosetests -w pandas/stats --with-coverage --cover-package=pandas.stats
 # coverage run runtests.py
\ No newline at end of file
