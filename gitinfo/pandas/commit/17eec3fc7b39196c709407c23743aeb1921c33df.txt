commit 17eec3fc7b39196c709407c23743aeb1921c33df
Author: Josh <josh@josh-HP-Pavilion-dv6-Notebook-PC.(none)>
Date:   Thu Mar 8 22:48:46 2012 -0700

    Revert "Fixed an issue where it was not possible to subclass Panel because"
    
    This reverts commit 5c8347bc3326089a348b67965c76843c286c1e8b.

diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 2a3573136..fa0159588 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -11,7 +11,7 @@ from pandas.core.common import (PandasError, _mut_exclusive,
                                 _try_sort, _default_index, _infer_dtype)
 from pandas.core.index import (Factor, Index, MultiIndex, _ensure_index,
                                _get_combined_index, NULL_INDEX)
-from pandas.core.indexing import _NDFrameIndexer
+from pandas.core.indexing import _NDFrameIndexer, _maybe_droplevels
 from pandas.core.internals import BlockManager, make_block, form_blocks
 from pandas.core.frame import DataFrame
 from pandas.core.generic import NDFrame
@@ -320,7 +320,30 @@ class Panel(NDFrame):
         data, index, columns = _homogenize_dict(data, intersect=intersect,
                                                 dtype=dtype)
         items = Index(sorted(data.keys()))
-        return __class__(data, items, index, columns)
+        return Panel(data, items, index, columns)
+
+    def __getitem__(self, key):
+        if isinstance(self.items, MultiIndex):
+            return self._getitem_multilevel(key)
+        return super(Panel, self).__getitem__(key)
+
+    def _getitem_multilevel(self, key):
+        loc = self.items.get_loc(key)
+        if isinstance(loc, (slice, np.ndarray)):
+            new_index = self.items[loc]
+            result_index = _maybe_droplevels(new_index, key)
+            if self._is_mixed_type:
+                result = self.reindex(items=new_index)
+                result.index = result_index
+            else:
+                new_values = self.values[loc, :, :]
+                result = Panel(new_values, 
+                               items=self.items[loc],
+                               major_axis=self.major_axis,
+                               minor_axis=self.minor_axis)
+            return result
+        else:
+            return self._get_item_cache(key)
 
     def __getitem__(self, key):
         if isinstance(self.items, MultiIndex):
@@ -438,14 +461,14 @@ class Panel(NDFrame):
             columns = self.minor_axis
 
         return index, columns
-    
+
     @property
     def _constructor(self):
-        return self.__class__
+        return Panel
 
     # Fancy indexing
     _ix = None
-    
+
     @property
     def ix(self):
         if self._ix is None:
@@ -754,7 +777,7 @@ class Panel(NDFrame):
             return self._combine_frame(other, func, axis=axis)
         elif np.isscalar(other):
             new_values = func(self.values, other)
-            return self._constructor(new_values, self.items, self.major_axis,
+            return Panel(new_values, self.items, self.major_axis,
                              self.minor_axis)
 
     def __neg__(self):
@@ -775,7 +798,7 @@ class Panel(NDFrame):
             new_values = func(self.values.swapaxes(0, 2), other.values)
             new_values = new_values.swapaxes(0, 2)
 
-        return self._constructor(new_values, self.items, self.major_axis,
+        return Panel(new_values, self.items, self.major_axis,
                      self.minor_axis)
 
     def _combine_panel(self, other, func):
@@ -789,7 +812,7 @@ class Panel(NDFrame):
 
         result_values = func(this.values, other.values)
 
-        return self._constructor(result_values, items, major, minor)
+        return Panel(result_values, items, major, minor)
 
     def fillna(self, value=None, method='pad'):
         """
@@ -821,10 +844,10 @@ class Panel(NDFrame):
             for col, s in self.iterkv():
                 result[col] = s.fillna(method=method, value=value)
 
-            return self._constructor.from_dict(result)
+            return Panel.from_dict(result)
         else:
             new_data = self._data.fillna(value)
-            return self._constructor(new_data)
+            return Panel(new_data)
 
     add = _panel_arith_method(operator.add, 'add')
     subtract = sub = _panel_arith_method(operator.sub, 'subtract')
@@ -913,7 +936,7 @@ class Panel(NDFrame):
         """
         from pandas.core.groupby import PanelGroupBy
         axis = self._get_axis_number(axis)
-        return self._constructorGroupBy(self, function, axis=axis)
+        return PanelGroupBy(self, function, axis=axis)
 
     def swapaxes(self, axis1='major', axis2='minor'):
         """
@@ -935,7 +958,7 @@ class Panel(NDFrame):
                     for k in range(3))
         new_values = self.values.swapaxes(i, j).copy()
 
-        return self._constructor(new_values, *new_axes)
+        return Panel(new_values, *new_axes)
 
     def to_frame(self, filter_observations=True):
         """
@@ -1136,7 +1159,7 @@ class Panel(NDFrame):
         else:
             raise ValueError('Invalid axis')
 
-        return self._constructor(values, items=items, major_axis=major_axis,
+        return Panel(values, items=items, major_axis=major_axis,
                          minor_axis=minor_axis)
 
     def truncate(self, before=None, after=None, axis='major'):
