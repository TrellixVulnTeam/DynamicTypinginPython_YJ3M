commit 96bee9d029d6e99c5925bfc5c23b4555cd3ef776
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Wed May 6 14:20:55 2020 -0700

    CLN: address TODOs and FIXMEs (#34033)

diff --git a/pandas/core/arrays/categorical.py b/pandas/core/arrays/categorical.py
index 9cdb5dfc4..efb53e5a8 100644
--- a/pandas/core/arrays/categorical.py
+++ b/pandas/core/arrays/categorical.py
@@ -7,7 +7,7 @@ import numpy as np
 
 from pandas._config import get_option
 
-from pandas._libs import algos as libalgos, hashtable as htable
+from pandas._libs import NaT, algos as libalgos, hashtable as htable
 from pandas._typing import ArrayLike, Dtype, Ordered, Scalar
 from pandas.util._decorators import cache_readonly, deprecate_kwarg, doc
 from pandas.util._validators import validate_bool_kwarg, validate_fillna_kwargs
@@ -344,7 +344,7 @@ class Categorical(NDArrayBackedExtensionArray, PandasObject):
                     ) from err
             except ValueError as err:
 
-                # FIXME
+                # TODO(EA2D)
                 raise NotImplementedError(
                     "> 1 ndim Categorical are not supported at this time"
                 ) from err
@@ -1425,7 +1425,7 @@ class Categorical(NDArrayBackedExtensionArray, PandasObject):
         """
         # if we are a datetime and period index, return Index to keep metadata
         if needs_i8_conversion(self.categories.dtype):
-            return self.categories.take(self._codes, fill_value=np.nan)
+            return self.categories.take(self._codes, fill_value=NaT)
         elif is_integer_dtype(self.categories) and -1 in self._codes:
             return self.categories.astype("object").take(self._codes, fill_value=np.nan)
         return np.array(self)
diff --git a/pandas/core/config_init.py b/pandas/core/config_init.py
index b0410e31c..4d5b9c692 100644
--- a/pandas/core/config_init.py
+++ b/pandas/core/config_init.py
@@ -356,8 +356,7 @@ with cf.config_prefix("display"):
             )
 
     cf.register_option(
-        # FIXME: change `validator=is_nonnegative_int`
-        # in version 1.2
+        # TODO(2.0): change `validator=is_nonnegative_int` see GH#31569
         "max_colwidth",
         50,
         max_colwidth_doc,
diff --git a/pandas/core/dtypes/common.py b/pandas/core/dtypes/common.py
index abfbe8d78..5b20b8e1b 100644
--- a/pandas/core/dtypes/common.py
+++ b/pandas/core/dtypes/common.py
@@ -484,7 +484,6 @@ def is_period_dtype(arr_or_dtype) -> bool:
         # GH#33400 fastpath for dtype object
         return arr_or_dtype.type is Period
 
-    # TODO: Consider making Period an instance of PeriodDtype
     if arr_or_dtype is None:
         return False
     return PeriodDtype.is_dtype(arr_or_dtype)
@@ -523,7 +522,6 @@ def is_interval_dtype(arr_or_dtype) -> bool:
         # GH#33400 fastpath for dtype object
         return arr_or_dtype.type is Interval
 
-    # TODO: Consider making Interval an instance of IntervalDtype
     if arr_or_dtype is None:
         return False
     return IntervalDtype.is_dtype(arr_or_dtype)
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 2e56398db..4e86b3710 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -8338,9 +8338,7 @@ Wild         185.0
                 assert len(res) == max(list(res.keys())) + 1, res.keys()
             out = df._constructor_sliced(res, index=range(len(res)), dtype=out_dtype)
             out.index = df.columns
-            if axis == 0 and df.dtypes.apply(needs_i8_conversion).any():
-                # FIXME: needs_i8_conversion check is kludge, not sure
-                #  why it is necessary in this case and this case alone
+            if axis == 0 and is_object_dtype(out.dtype):
                 out[:] = coerce_to_dtypes(out.values, df.dtypes)
             return out
 
diff --git a/pandas/core/internals/managers.py b/pandas/core/internals/managers.py
index 6368a2498..5ab792563 100644
--- a/pandas/core/internals/managers.py
+++ b/pandas/core/internals/managers.py
@@ -1284,9 +1284,6 @@ class BlockManager(PandasObject):
 
         # When filling blknos, make sure blknos is updated before appending to
         # blocks list, that way new blkno is exactly len(blocks).
-        #
-        # FIXME: mgr_groupby_blknos must return mgr_locs in ascending order,
-        # pytables serialization will break otherwise.
         blocks = []
         for blkno, mgr_locs in libinternals.get_blkno_placements(blknos, group=True):
             if blkno == -1:
diff --git a/pandas/tests/extension/test_boolean.py b/pandas/tests/extension/test_boolean.py
index 04dedac3e..0b0bbd3a6 100644
--- a/pandas/tests/extension/test_boolean.py
+++ b/pandas/tests/extension/test_boolean.py
@@ -148,13 +148,13 @@ class TestArithmeticOps(base.BaseArithmeticOpsTests):
         # other specific errors tested in the boolean array specific tests
         pass
 
-    def test_arith_frame_with_scalar(self, data, all_arithmetic_operators):
+    def test_arith_frame_with_scalar(self, data, all_arithmetic_operators, request):
         # frame & scalar
         op_name = all_arithmetic_operators
-        if op_name in self.implements:
-            super().test_arith_frame_with_scalar(data, all_arithmetic_operators)
-        else:
-            pytest.xfail("_reduce needs implementation")
+        if op_name not in self.implements:
+            mark = pytest.mark.xfail(reason="_reduce needs implementation")
+            request.node.add_marker(mark)
+        super().test_arith_frame_with_scalar(data, all_arithmetic_operators)
 
 
 class TestComparisonOps(base.BaseComparisonOpsTests):
diff --git a/pandas/tests/extension/test_numpy.py b/pandas/tests/extension/test_numpy.py
index bb3595f4a..e48065b47 100644
--- a/pandas/tests/extension/test_numpy.py
+++ b/pandas/tests/extension/test_numpy.py
@@ -175,20 +175,30 @@ class TestGetitem(BaseNumPyTests, base.BaseGetitemTests):
         # ValueError: PandasArray must be 1-dimensional.
         super().test_take_series(data)
 
-    def test_loc_iloc_frame_single_dtype(self, data):
+    def test_loc_iloc_frame_single_dtype(self, data, request):
         npdtype = data.dtype.numpy_dtype
         if npdtype == object or npdtype == np.float64:
             # GH#33125
-            pytest.xfail(reason="GH#33125 astype doesn't recognize data.dtype")
+            mark = pytest.mark.xfail(
+                reason="GH#33125 astype doesn't recognize data.dtype"
+            )
+            request.node.add_marker(mark)
         super().test_loc_iloc_frame_single_dtype(data)
 
 
 class TestGroupby(BaseNumPyTests, base.BaseGroupbyTests):
     @skip_nested
-    def test_groupby_extension_apply(self, data_for_grouping, groupby_apply_op):
+    def test_groupby_extension_apply(
+        self, data_for_grouping, groupby_apply_op, request
+    ):
         # ValueError: Names should be list-like for a MultiIndex
-        if data_for_grouping.dtype.numpy_dtype == np.float64:
-            pytest.xfail(reason="GH#33125 astype doesn't recognize data.dtype")
+        a = "a"
+        is_identity = groupby_apply_op(a) is a
+        if data_for_grouping.dtype.numpy_dtype == np.float64 and is_identity:
+            mark = pytest.mark.xfail(
+                reason="GH#33125 astype doesn't recognize data.dtype"
+            )
+            request.node.add_marker(mark)
         super().test_groupby_extension_apply(data_for_grouping, groupby_apply_op)
 
 
diff --git a/pandas/tests/groupby/test_categorical.py b/pandas/tests/groupby/test_categorical.py
index 781625f1f..4560c7385 100644
--- a/pandas/tests/groupby/test_categorical.py
+++ b/pandas/tests/groupby/test_categorical.py
@@ -1260,7 +1260,7 @@ def test_get_nonexistent_category():
 
 
 def test_series_groupby_on_2_categoricals_unobserved(
-    reduction_func: str, observed: bool
+    reduction_func: str, observed: bool, request
 ):
     # GH 17605
 
@@ -1268,7 +1268,8 @@ def test_series_groupby_on_2_categoricals_unobserved(
         pytest.skip("ngroup is not truly a reduction")
 
     if reduction_func == "corrwith":  # GH 32293
-        pytest.xfail("TODO: implemented SeriesGroupBy.corrwith")
+        mark = pytest.mark.xfail(reason="TODO: implemented SeriesGroupBy.corrwith")
+        request.node.add_marker(mark)
 
     df = pd.DataFrame(
         {
diff --git a/pandas/tests/test_downstream.py b/pandas/tests/test_downstream.py
index b671564eb..e718a6b75 100644
--- a/pandas/tests/test_downstream.py
+++ b/pandas/tests/test_downstream.py
@@ -113,7 +113,7 @@ def test_pandas_gbq(df):
     pandas_gbq = import_module("pandas_gbq")  # noqa
 
 
-@pytest.mark.xfail(reason="0.7.0 pending")
+@pytest.mark.xfail(reason="0.8.1 tries to import urlencode from pd.io.common")
 @tm.network
 def test_pandas_datareader():
 
