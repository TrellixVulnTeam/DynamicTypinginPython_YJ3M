commit 049b71db5d9d8b7e77e132946a31b4f57307cfb9
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Nov 2 01:47:13 2011 -0400

    ENH: add Series.isin, address GH #289

diff --git a/RELEASE.rst b/RELEASE.rst
index ca1ea318e..ac3fa1861 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -34,6 +34,8 @@ pandas 0.5.1
     descriptive statistics (PR #313)
   - Add `head` and `tail` methods to Series, analogous to to DataFrame (PR
     #296)
+  - Add `Series.isin` function which checks if each value is contained in a
+    passed sequence (GH #289)
 
 **Improvements to existing features**
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 7326f7a55..a2d662a7e 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1221,6 +1221,11 @@ copy : boolean, default False
         ndarray. No return value
         """
         sortedSeries = self.order(na_last=True)
+
+        # if not self.flags.owndata:
+        #     raise Exception('This Series is a view of some other array, to '
+        #                     'sort in-place you must create a copy')
+
         self[:] = sortedSeries
         self.index = sortedSeries.index
 
@@ -1609,6 +1614,22 @@ copy : boolean, default False
             new_values = self.values.take(indexer)
             return Series(new_values, index=self.index, name=self.name)
 
+    def isin(self, values):
+        """
+        Return boolean vector showing whether each element in the Series is
+        exactly contained in the passed sequence of values
+
+        Parameters
+        ----------
+        values : sequence
+
+        Returns
+        -------
+        isin : Series (boolean dtype)
+        """
+        value_set = set(values)
+        return self.map(value_set.__contains__)
+
 #-------------------------------------------------------------------------------
 # Miscellaneous
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index dc5bca73e..229a06f76 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2510,7 +2510,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         expected = self.frame.reindex(columns=['B', 'D'])
         assert_frame_equal(result, expected)
 
-    def test_sort(self):
+    def test_sort_index(self):
         frame = DataFrame(np.random.randn(4, 4), index=[1, 2, 3, 4],
                           columns=['A', 'B', 'C', 'D'])
 
@@ -2554,6 +2554,12 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         expected = frame.sort_index(by='A', ascending=False)
         assert_frame_equal(sorted_df, expected)
 
+    # punting on trying to fix this for now
+    # def test_frame_column_inplace_sort_exception(self):
+    #     s = self.frame['A']
+    #     self.assert_(not s.flags.owndata)
+    #     self.assertRaises(Exception, s.sort)
+
     def test_combine_first(self):
         # disjoint
         head, tail = self.frame[:5], self.frame[5:]
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 9bb9de738..3305b7659 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -1248,6 +1248,13 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         assert_series_equal(self.series.head(), self.series[:5])
         assert_series_equal(self.series.tail(), self.series[-5:])
 
+    def test_isin(self):
+        s = Series(['A', 'B', 'C', 'a', 'B', 'B', 'A', 'C'])
+
+        result = s.isin(['A', 'C'])
+        expected = Series([True, False, True, False, False, False, True, True])
+        assert_series_equal(result, expected)
+
 #-------------------------------------------------------------------------------
 # TimeSeries-specific
 
