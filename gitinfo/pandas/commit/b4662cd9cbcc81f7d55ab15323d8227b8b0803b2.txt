commit b4662cd9cbcc81f7d55ab15323d8227b8b0803b2
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Wed Jan 24 03:10:05 2018 -0800

    remove unused convert_sql_column (#19363)

diff --git a/pandas/_libs/src/inference.pyx b/pandas/_libs/src/inference.pyx
index 52ae32023..68058fbf0 100644
--- a/pandas/_libs/src/inference.pyx
+++ b/pandas/_libs/src/inference.pyx
@@ -1389,10 +1389,6 @@ def maybe_convert_objects(ndarray[object] objects, bint try_float=0,
     return objects
 
 
-def convert_sql_column(x):
-    return maybe_convert_objects(x, try_float=1)
-
-
 def sanitize_objects(ndarray[object] values, set na_values,
                      convert_empty=True):
     cdef:
diff --git a/pandas/tests/dtypes/test_io.py b/pandas/tests/dtypes/test_io.py
deleted file mode 100644
index 06b61371c..000000000
--- a/pandas/tests/dtypes/test_io.py
+++ /dev/null
@@ -1,73 +0,0 @@
-# -*- coding: utf-8 -*-
-
-import numpy as np
-import pandas._libs.lib as lib
-import pandas.util.testing as tm
-
-from pandas.compat import long, u
-
-
-class TestParseSQL(object):
-
-    def test_convert_sql_column_floats(self):
-        arr = np.array([1.5, None, 3, 4.2], dtype=object)
-        result = lib.convert_sql_column(arr)
-        expected = np.array([1.5, np.nan, 3, 4.2], dtype='f8')
-        tm.assert_numpy_array_equal(result, expected)
-
-    def test_convert_sql_column_strings(self):
-        arr = np.array(['1.5', None, '3', '4.2'], dtype=object)
-        result = lib.convert_sql_column(arr)
-        expected = np.array(['1.5', np.nan, '3', '4.2'], dtype=object)
-        tm.assert_numpy_array_equal(result, expected)
-
-    def test_convert_sql_column_unicode(self):
-        arr = np.array([u('1.5'), None, u('3'), u('4.2')],
-                       dtype=object)
-        result = lib.convert_sql_column(arr)
-        expected = np.array([u('1.5'), np.nan, u('3'), u('4.2')],
-                            dtype=object)
-        tm.assert_numpy_array_equal(result, expected)
-
-    def test_convert_sql_column_ints(self):
-        arr = np.array([1, 2, 3, 4], dtype='O')
-        arr2 = np.array([1, 2, 3, 4], dtype='i4').astype('O')
-        result = lib.convert_sql_column(arr)
-        result2 = lib.convert_sql_column(arr2)
-        expected = np.array([1, 2, 3, 4], dtype='i8')
-        tm.assert_numpy_array_equal(result, expected)
-        tm.assert_numpy_array_equal(result2, expected)
-
-        arr = np.array([1, 2, 3, None, 4], dtype='O')
-        result = lib.convert_sql_column(arr)
-        expected = np.array([1, 2, 3, np.nan, 4], dtype='f8')
-        tm.assert_numpy_array_equal(result, expected)
-
-    def test_convert_sql_column_longs(self):
-        arr = np.array([long(1), long(2), long(3), long(4)], dtype='O')
-        result = lib.convert_sql_column(arr)
-        expected = np.array([1, 2, 3, 4], dtype='i8')
-        tm.assert_numpy_array_equal(result, expected)
-
-        arr = np.array([long(1), long(2), long(3), None, long(4)], dtype='O')
-        result = lib.convert_sql_column(arr)
-        expected = np.array([1, 2, 3, np.nan, 4], dtype='f8')
-        tm.assert_numpy_array_equal(result, expected)
-
-    def test_convert_sql_column_bools(self):
-        arr = np.array([True, False, True, False], dtype='O')
-        result = lib.convert_sql_column(arr)
-        expected = np.array([True, False, True, False], dtype=bool)
-        tm.assert_numpy_array_equal(result, expected)
-
-        arr = np.array([True, False, None, False], dtype='O')
-        result = lib.convert_sql_column(arr)
-        expected = np.array([True, False, np.nan, False], dtype=object)
-        tm.assert_numpy_array_equal(result, expected)
-
-    def test_convert_sql_column_decimals(self):
-        from decimal import Decimal
-        arr = np.array([Decimal('1.5'), None, Decimal('3'), Decimal('4.2')])
-        result = lib.convert_sql_column(arr)
-        expected = np.array([1.5, np.nan, 3, 4.2], dtype='f8')
-        tm.assert_numpy_array_equal(result, expected)
