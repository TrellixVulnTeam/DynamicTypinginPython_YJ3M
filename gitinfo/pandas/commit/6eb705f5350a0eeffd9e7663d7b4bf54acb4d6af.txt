commit 6eb705f5350a0eeffd9e7663d7b4bf54acb4d6af
Author: Ben Kandel <ben.kandel@gmail.com>
Date:   Tue Jan 3 18:55:06 2017 -0500

    BUG: Indexing MultiIndex with Series failed.
    
    Previously, accessing elements of a MultiIndex-indexed DataFrame with
    a Series  failed. This changes that behavior so that it is possible to
    use a Series to  access elements from a MultiIndex-indexed DataFrame,
    just as one would use  a list.
    
    closes #14730
    
    Author: Ben Kandel <ben.kandel@gmail.com>
    
    Closes #15041 from bkandel/gh-14730-multiindex-series and squashes the following commits:
    
    3698087 [Ben Kandel] appveyor
    51b8ccf [Ben Kandel] appveyor
    6c03932 [Ben Kandel] Address comments.
    bfba946 [Ben Kandel] BUG: Indexing MultiIndex with Series failed.

diff --git a/doc/source/whatsnew/v0.20.0.txt b/doc/source/whatsnew/v0.20.0.txt
index 11f11ad5f..2db03724e 100644
--- a/doc/source/whatsnew/v0.20.0.txt
+++ b/doc/source/whatsnew/v0.20.0.txt
@@ -299,7 +299,7 @@ Bug Fixes
 - Bug in ``pd.to_numeric()`` in which float and unsigned integer elements were being improperly casted (:issue:`14941`, :issue:`15005`)
 - Bug in ``pd.read_csv()`` in which the ``dialect`` parameter was not being verified before processing (:issue:`14898`)
 
-
+- Bug in ``DataFrame.loc`` with indexing a ``MultiIndex`` with a ``Series`` indexer (:issue:`14730`)
 
 - Bug in ``pd.read_msgpack()`` in which ``Series`` categoricals were being improperly processed (:issue:`14901`)
 - Bug in ``Series.ffill()`` with mixed dtypes containing tz-aware datetimes. (:issue:`14956`)
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index dad5bf5bc..9fa5b6708 100755
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -1461,6 +1461,9 @@ class _LocIndexer(_LocationIndexer):
             if isinstance(labels, MultiIndex):
                 if (not isinstance(key, tuple) and len(key) > 1 and
                         not isinstance(key[0], tuple)):
+                    if isinstance(key, ABCSeries):
+                        # GH 14730
+                        key = list(key)
                     key = tuple([key])
 
             # an iterable multi-selection
diff --git a/pandas/tests/indexes/test_multi.py b/pandas/tests/indexes/test_multi.py
index ccbe65e58..7da3cb377 100644
--- a/pandas/tests/indexes/test_multi.py
+++ b/pandas/tests/indexes/test_multi.py
@@ -1,26 +1,29 @@
 # -*- coding: utf-8 -*-
 
-from datetime import timedelta
-from itertools import product
-import nose
 import re
 import warnings
 
-from pandas import (DataFrame, date_range, period_range, MultiIndex, Index,
-                    CategoricalIndex, compat)
-from pandas.core.common import PerformanceWarning, UnsortedIndexError
-from pandas.indexes.base import InvalidIndexError
-from pandas.compat import range, lrange, u, PY3, long, lzip
+from datetime import timedelta
+from itertools import product
+
+import nose
 
 import numpy as np
 
-from pandas.util.testing import (assert_almost_equal, assertRaises,
-                                 assertRaisesRegexp, assert_copy)
+import pandas as pd
+
+from pandas import (CategoricalIndex, DataFrame, Index, MultiIndex,
+                    compat, date_range, period_range)
+from pandas.compat import PY3, long, lrange, lzip, range, u
+from pandas.core.common import PerformanceWarning, UnsortedIndexError
+from pandas.indexes.base import InvalidIndexError
+from pandas.lib import Timestamp
 
 import pandas.util.testing as tm
 
-import pandas as pd
-from pandas.lib import Timestamp
+from pandas.util.testing import (assertRaises, assertRaisesRegexp,
+                                 assert_almost_equal, assert_copy)
+
 
 from .common import Base
 
diff --git a/pandas/tests/indexing/test_indexing.py b/pandas/tests/indexing/test_indexing.py
index bc95ff329..4e5558309 100644
--- a/pandas/tests/indexing/test_indexing.py
+++ b/pandas/tests/indexing/test_indexing.py
@@ -1210,6 +1210,28 @@ class TestIndexing(tm.TestCase):
         self.check_result('array like', 'loc', Series(index=[4, 8, 12]).index,
                           'ix', [4, 8, 12], typs=['ints'], axes=2)
 
+    def test_loc_getitem_series(self):
+        # GH14730
+        # passing a series as a key with a MultiIndex
+        index = MultiIndex.from_product([[1, 2, 3], ['A', 'B', 'C']])
+        x = Series(index=index, data=range(9), dtype=np.float64)
+        y = Series([1, 3])
+        expected = Series(
+            data=[0, 1, 2, 6, 7, 8],
+            index=MultiIndex.from_product([[1, 3], ['A', 'B', 'C']]),
+            dtype=np.float64)
+        result = x.loc[y]
+        tm.assert_series_equal(result, expected)
+
+        result = x.loc[[1, 3]]
+        tm.assert_series_equal(result, expected)
+
+        empty = Series(data=[], dtype=np.float64)
+        expected = Series([], index=MultiIndex(
+            levels=index.levels, labels=[[], []], dtype=np.float64))
+        result = x.loc[empty]
+        tm.assert_series_equal(result, expected)
+
     def test_loc_getitem_bool(self):
         # boolean indexers
         b = [True, False, True, False]
