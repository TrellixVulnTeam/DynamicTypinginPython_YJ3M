commit ad230e8f458c288afd769553d67bd39534d4a1ea
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Sun Feb 18 08:22:16 2018 -0800

    finish off tests.tseries.test_timezones (#19739)

diff --git a/pandas/tests/scalar/timestamp/test_unary_ops.py b/pandas/tests/scalar/timestamp/test_unary_ops.py
index 8a6989c90..994ff86e6 100644
--- a/pandas/tests/scalar/timestamp/test_unary_ops.py
+++ b/pandas/tests/scalar/timestamp/test_unary_ops.py
@@ -4,11 +4,13 @@ from datetime import datetime
 import pytest
 import pytz
 from pytz import utc
+from dateutil.tz import gettz
 
 import pandas.util.testing as tm
 import pandas.util._test_decorators as td
 
 from pandas.compat import PY3
+from pandas._libs import tslib
 from pandas._libs.tslibs.frequencies import _INVALID_FREQ_ERROR
 from pandas import Timestamp, NaT
 
@@ -215,6 +217,28 @@ class TestTimestampUnaryOps(object):
         assert result_dt == result_pd
         assert result_dt == result_pd.to_pydatetime()
 
+    @pytest.mark.parametrize('tz, normalize', [
+        (pytz.timezone('US/Eastern'), lambda x: x.tzinfo.normalize(x)),
+        (gettz('US/Eastern'), lambda x: x)])
+    def test_replace_across_dst(self, tz, normalize):
+        # GH#18319 check that 1) timezone is correctly normalized and
+        # 2) that hour is not incorrectly changed by this normalization
+        ts_naive = Timestamp('2017-12-03 16:03:30')
+        ts_aware = tslib._localize_pydatetime(ts_naive, tz)
+
+        # Preliminary sanity-check
+        assert ts_aware == normalize(ts_aware)
+
+        # Replace across DST boundary
+        ts2 = ts_aware.replace(month=6)
+
+        # Check that `replace` preserves hour literal
+        assert (ts2.hour, ts2.minute) == (ts_aware.hour, ts_aware.minute)
+
+        # Check that post-replace object is appropriately normalized
+        ts2b = normalize(ts2)
+        assert ts2 == ts2b
+
     # --------------------------------------------------------------
 
     @td.skip_if_windows
diff --git a/pandas/tests/tseries/test_timezones.py b/pandas/tests/tseries/test_timezones.py
deleted file mode 100644
index 97326dc04..000000000
--- a/pandas/tests/tseries/test_timezones.py
+++ /dev/null
@@ -1,108 +0,0 @@
-# pylint: disable-msg=E1101,W0612
-import pytest
-
-import pytz
-
-from datetime import datetime
-
-from pandas._libs.tslibs import timezones
-from pandas import Timestamp
-
-
-class TestTimeZoneSupportPytz(object):
-
-    def tz(self, tz):
-        # Construct a timezone object from a string. Overridden in subclass to
-        # parameterize tests.
-        return pytz.timezone(tz)
-
-    def tzstr(self, tz):
-        # Construct a timezone string from a string. Overridden in subclass to
-        # parameterize tests.
-        return tz
-
-    def localize(self, tz, x):
-        return tz.localize(x)
-
-    def normalize(self, ts):
-        tzinfo = ts.tzinfo
-        return tzinfo.normalize(ts)
-
-    def cmptz(self, tz1, tz2):
-        # Compare two timezones. Overridden in subclass to parameterize
-        # tests.
-        return tz1.zone == tz2.zone
-
-    # test utility methods
-    def test_infer_tz(self):
-        eastern = self.tz('US/Eastern')
-        utc = pytz.utc
-
-        _start = datetime(2001, 1, 1)
-        _end = datetime(2009, 1, 1)
-
-        start = self.localize(eastern, _start)
-        end = self.localize(eastern, _end)
-        assert (timezones.infer_tzinfo(start, end) is
-                self.localize(eastern, _start).tzinfo)
-        assert (timezones.infer_tzinfo(start, None) is
-                self.localize(eastern, _start).tzinfo)
-        assert (timezones.infer_tzinfo(None, end) is
-                self.localize(eastern, _end).tzinfo)
-
-        start = utc.localize(_start)
-        end = utc.localize(_end)
-        assert (timezones.infer_tzinfo(start, end) is utc)
-
-        end = self.localize(eastern, _end)
-        pytest.raises(Exception, timezones.infer_tzinfo, start, end)
-        pytest.raises(Exception, timezones.infer_tzinfo, end, start)
-
-    def test_replace_across_dst(self):
-        # GH#18319 check that 1) timezone is correctly normalized and
-        # 2) that hour is not incorrectly changed by this normalization
-        tz = self.tz('US/Eastern')
-
-        ts_naive = Timestamp('2017-12-03 16:03:30')
-        ts_aware = self.localize(tz, ts_naive)
-
-        # Preliminary sanity-check
-        assert ts_aware == self.normalize(ts_aware)
-
-        # Replace across DST boundary
-        ts2 = ts_aware.replace(month=6)
-
-        # Check that `replace` preserves hour literal
-        assert (ts2.hour, ts2.minute) == (ts_aware.hour, ts_aware.minute)
-
-        # Check that post-replace object is appropriately normalized
-        ts2b = self.normalize(ts2)
-        assert ts2 == ts2b
-
-
-class TestTimeZoneSupportDateutil(TestTimeZoneSupportPytz):
-
-    def tz(self, tz):
-        """
-        Construct a dateutil timezone.
-        Use tslib.maybe_get_tz so that we get the filename on the tz right
-        on windows. See #7337.
-        """
-        return timezones.maybe_get_tz('dateutil/' + tz)
-
-    def tzstr(self, tz):
-        """ Construct a timezone string from a string. Overridden in subclass
-        to parameterize tests. """
-        return 'dateutil/' + tz
-
-    def cmptz(self, tz1, tz2):
-        """ Compare two timezones. Overridden in subclass to parameterize
-        tests. """
-        return tz1 == tz2
-
-    def localize(self, tz, x):
-        return x.replace(tzinfo=tz)
-
-    def normalize(self, ts):
-        # no-op for dateutil
-        return ts
diff --git a/pandas/tests/tslibs/test_timezones.py b/pandas/tests/tslibs/test_timezones.py
index 603c5e3fe..1bb355f26 100644
--- a/pandas/tests/tslibs/test_timezones.py
+++ b/pandas/tests/tslibs/test_timezones.py
@@ -5,6 +5,7 @@ import pytest
 import pytz
 import dateutil.tz
 
+from pandas._libs import tslib
 from pandas._libs.tslibs import timezones
 from pandas import Timestamp
 
@@ -35,3 +36,33 @@ def test_tzlocal():
     offset = dateutil.tz.tzlocal().utcoffset(datetime(2011, 1, 1))
     offset = offset.total_seconds() * 1000000000
     assert ts.value + offset == Timestamp('2011-01-01').value
+
+
+@pytest.mark.parametrize('eastern, localize', [
+    (pytz.timezone('US/Eastern'), lambda tz, x: tz.localize(x)),
+    (dateutil.tz.gettz('US/Eastern'), lambda tz, x: x.replace(tzinfo=tz))])
+def test_infer_tz(eastern, localize):
+    utc = pytz.utc
+
+    start_naive = datetime(2001, 1, 1)
+    end_naive = datetime(2009, 1, 1)
+
+    start = localize(eastern, start_naive)
+    end = localize(eastern, end_naive)
+
+    assert (timezones.infer_tzinfo(start, end) is
+            tslib._localize_pydatetime(start_naive, eastern).tzinfo)
+    assert (timezones.infer_tzinfo(start, None) is
+            tslib._localize_pydatetime(start_naive, eastern).tzinfo)
+    assert (timezones.infer_tzinfo(None, end) is
+            tslib._localize_pydatetime(end_naive, eastern).tzinfo)
+
+    start = utc.localize(start_naive)
+    end = utc.localize(end_naive)
+    assert timezones.infer_tzinfo(start, end) is utc
+
+    end = tslib._localize_pydatetime(end_naive, eastern)
+    with pytest.raises(Exception):
+        timezones.infer_tzinfo(start, end)
+    with pytest.raises(Exception):
+        timezones.infer_tzinfo(end, start)
