commit bbb59d3c798fd71b40792485cb62727e8cde6a60
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed May 26 22:19:10 2010 +0000

    unit tests
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@178 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index feee23cd3..178a42864 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -892,13 +892,20 @@ class DataFrame(Picklable, Groupable):
             np.bool_ : False
         }
 
+        notmask = -mask
+        need_cast = notmask.any()
+
         newSeries = {}
         for col, series in self.iteritems():
             series = series.view(np.ndarray)
             for klass, dest in typeHierarchy:
                 if issubclass(series.dtype.type, klass):
-                    new = series.take(fillVec).astype(dest)
-                    new[-mask] = missingValue[dest]
+                    new = series.take(fillVec)
+
+                    if need_cast:
+                        new = new.astype(dest)
+                        new[notmask] = missingValue[dest]
+
                     newSeries[col] = new
                     break
 
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index 789264642..ef13c712a 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -152,7 +152,13 @@ class DataMatrix(DataFrame):
             valueDict = objectDict
             columns = objectColumns
         else:
-            dtype = np.float_
+            dtypes = set(v.dtype for v in valueDict.values())
+
+            if len(dtypes) > 1:
+                dtype = np.float_
+            else:
+                dtype = list(dtypes)[0]
+
             if len(objectDict) > 0:
                 new_objects = DataMatrix(objectDict,
                                          dtype=np.object_,
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 07d6422de..50f608207 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -386,7 +386,8 @@ class Series(np.ndarray, Picklable, Groupable):
         Compute minimum of non-null values
         """
         arr = self.values().copy()
-        arr[isnull(arr)] = np.inf
+        if not self._int_type:
+            arr[isnull(arr)] = np.inf
         return arr.min()
 
     def max(self, axis=None, out=None):
@@ -394,9 +395,14 @@ class Series(np.ndarray, Picklable, Groupable):
         Compute maximum of non-null values
         """
         arr = self.values().copy()
-        arr[isnull(arr)] = -np.inf
+        if not self._int_type:
+            arr[isnull(arr)] = -np.inf
         return arr.max()
 
+    @property
+    def _int_type(self):
+        return issubclass(self.dtype.type, np.int_)
+
     def std(self, axis=None, dtype=None, out=None, ddof=1):
         """
         Compute unbiased standard deviation of non-null values
@@ -562,7 +568,9 @@ class Series(np.ndarray, Picklable, Groupable):
         """
         Compute median value of non-null values
         """
-        return tseries.median(self.valid())
+        arr = self.values()
+        arr = arr[notnull(arr)]
+        return tseries.median(arr)
 
     def copy(self):
         return Series(self.values().copy(), index=self.index)
diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index e040ab6ab..8d741896e 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -30,6 +30,9 @@ class TestDataFrame(unittest.TestCase):
         self.tsd = common.getTimeSeriesData()
 
         self.frame = self.klass(self.seriesd)
+        self.intframe = self.klass(dict((k, v.astype(int))
+                                        for k, v in self.seriesd.iteritems()))
+
         self.tsframe = self.klass(self.tsd)
 
         self.mixed_frame = self.frame.copy()
@@ -801,6 +804,17 @@ class TestDataFrame(unittest.TestCase):
         newFrame = self.frame.reindex(list(self.ts1.index))
         self.assert_(newFrame.index.equals(self.ts1.index))
 
+    def test_reindex_int(self):
+        smaller = self.intframe.reindex(self.intframe.index[::2])
+
+        self.assert_(smaller['A'].dtype == np.int_)
+
+        bigger = smaller.reindex(self.intframe.index)
+        self.assert_(bigger['A'].dtype == np.float_)
+
+        smaller = self.intframe.reindex(columns=['A', 'B'])
+        self.assert_(smaller['A'].dtype == np.int_)
+
     def test_rename(self):
         mapping = {
             'A' : 'a',
diff --git a/pandas/core/tests/test_matrix.py b/pandas/core/tests/test_matrix.py
index b41432751..5088c261e 100644
--- a/pandas/core/tests/test_matrix.py
+++ b/pandas/core/tests/test_matrix.py
@@ -48,6 +48,14 @@ class TestDataMatrix(test_frame.TestDataFrame):
         dm = self.klass(DataFrame(self.frame._series))
         common.assert_frame_equal(dm, self.frame)
 
+        # int cast
+        dm = DataMatrix({'A' : np.ones(10, dtype=int),
+                         'B' : np.ones(10, dtype=float)},
+                        index=np.arange(10))
+
+        self.assertEqual(len(dm.columns), 2)
+        self.assert_(dm.values.dtype == np.float_)
+
     def test_constructor_with_objects(self):
         index = self.mixed_frame.index[:5]
 
@@ -193,6 +201,11 @@ class TestDataMatrix(test_frame.TestDataFrame):
         reindexed = dm.reindex(columns=index)
         self.assert_(reindexed.columns.equals(index))
 
+        # ints are weird
+
+        smaller = self.intframe.reindex(columns=['A', 'B', 'E'])
+        self.assert_(smaller['E'].dtype == np.float_)
+
     def test_fill_corner(self):
         self.mixed_frame['foo'][5:20] = np.NaN
         self.mixed_frame['A'][-10:] = np.NaN
