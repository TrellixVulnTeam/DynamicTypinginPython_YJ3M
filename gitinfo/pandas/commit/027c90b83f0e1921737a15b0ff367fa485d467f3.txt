commit 027c90b83f0e1921737a15b0ff367fa485d467f3
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jul 14 16:03:18 2011 -0400

    ENH: read_table can infer integers. changed DataFrame.fromcsv to use it

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 749196d6f..2a6f1f49a 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -394,20 +394,9 @@ class DataFrame(PandasGeneric):
         -------
         y : DataFrame or DataFrame
         """
-        data = np.genfromtxt(path, delimiter=delimiter, dtype=None,
-                             skip_header=header, names=True)
-
-        if index_col is not None:
-            field = data.dtype.names[index_col]
-            df = cls.from_records(data, indexField=field)
-
-            # have dates?
-            test_val = datetools.to_datetime(df.index[0])
-            if isinstance(test_val, datetime):
-                df = df.rename(index=datetools.to_datetime)
-        else:
-            df = cls.from_records(data, indexField=None)
-
+        from pandas.io.parsers import read_table
+        df = read_table(path, header=header, sep=delimiter,
+                        index_col=index_col)
         return df
 
     def to_sparse(self, fill_value=None, kind='block'):
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index d2ff18a83..1b91cadcd 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -667,12 +667,15 @@ def form_blocks(data, index, items):
 
     # put "leftover" items in float bucket, where else?
     # generalize?
-    num_dict = {}
+    float_dict = {}
+    int_dict = {}
     bool_dict = {}
     object_dict = {}
     for k, v in data.iteritems():
-        if issubclass(v.dtype.type, (np.floating, np.integer)):
-            num_dict[k] = v
+        if issubclass(v.dtype.type, np.floating):
+            float_dict[k] = v
+        elif issubclass(v.dtype.type, np.integer):
+            int_dict[k] = v
         elif v.dtype == np.bool_:
             bool_dict[k] = v
         else:
@@ -680,17 +683,23 @@ def form_blocks(data, index, items):
 
     blocks = []
 
-    if len(num_dict) > 0:
-        num_dtypes = set(v.dtype for v in num_dict.values())
-        if len(num_dtypes) > 1:
-            num_dtype = np.float_
-        else:
-            num_dtype = list(num_dtypes)[0]
+    # if len(float_dict) > 0:
+    #     num_dtypes = set(v.dtype for v in num_dict.values())
+    #     if len(num_dtypes) > 1:
+    #         num_dtype = np.float_
+    #     else:
+    #         num_dtype = list(num_dtypes)[0]
+
+    #     # TODO: find corner cases
+    #     # TODO: check type inference
+
+    if len(float_dict):
+        float_block = _simple_blockify(float_dict, items, np.float64)
+        blocks.append(float_block)
 
-        # TODO: find corner cases
-        # TODO: check type inference
-        num_block = _simple_blockify(num_dict, items, num_dtype)
-        blocks.append(num_block)
+    if len(int_dict):
+        int_block = _simple_blockify(int_dict, items, np.int64)
+        blocks.append(int_block)
 
     if len(bool_dict):
         bool_block = _simple_blockify(bool_dict, items, np.bool_)
diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index fa01224e3..59402023e 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -149,6 +149,7 @@ def _simple_parser(lines, colNames=None, header=0, indexCol=0,
         if parse_dates:
             index = _try_parse_dates(index, parser=date_parser)
 
+        index = _maybe_convert_int(np.array(index, dtype=object))
     else:
         index = np.arange(len(content))
 
@@ -187,13 +188,33 @@ def _floatify(data_dict, na_values=None):
 
     return result
 
+def _maybe_convert_int(arr):
+    if len(arr) == 0:
+        return arr
+
+    try:
+        if arr.dtype == np.object_:
+            return arr.astype(int)
+
+        if abs(arr[0] - int(arr[0])) < 1e-10:
+            casted = arr.astype(int)
+            if (np.abs(casted - arr) < 1e-10).all():
+                return casted
+    except TypeError, ValueError:
+        pass
+
+    return arr
+
 def _convert_to_ndarrays(dct):
     result = {}
     for c, values in dct.iteritems():
         try:
-            result[c] = np.array(values, dtype=float)
+            values = np.array(values, dtype=float)
+            values = _maybe_convert_int(values)
         except Exception:
-            result[c] = np.array(values, dtype=object)
+            values = np.array(values, dtype=object)
+
+        result[c] = values
 
     return result
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 3aa987b50..85b5d73bf 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1211,6 +1211,13 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         recons = self.klass.fromcsv(path, index_col=None)
         assert_almost_equal(self.tsframe.values, recons.values)
 
+        # corner case
+        dm = DataFrame({'s1' : Series(range(3),range(3)),
+                        's2' : Series(range(2),range(2))})
+        dm.toCSV(path)
+        recons = self.klass.fromcsv(path)
+        assert_frame_equal(dm, recons)
+
         os.remove(path)
 
     def test_info(self):
