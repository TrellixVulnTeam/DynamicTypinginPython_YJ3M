commit 5c7e849b8b56e1a7a4bc1efe4c62940ed0576101
Author: jreback <jeff@reback.net>
Date:   Tue Dec 18 20:00:10 2012 -0500

    BUG: support multiple data columns that are in the same block (e.g. the same type)
         e.g. self.store.select('df', [ Term('string', '=', 'foo'), Term('string2=foo'), Term('A>0'), Term('B<0') ])

diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 27adfbdd6..1ee8805bb 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -1568,19 +1568,19 @@ class Table(object):
 
         # get out blocks 
         block_obj = self.get_object(obj)
+        blocks    = None
 
-        data_obj = None
         if columns is not None and len(self.non_index_axes):
             axis        = self.non_index_axes[0][0]
             axis_labels = self.non_index_axes[0][1]
             columns = [ c for c in columns if c in axis_labels ]
             if len(columns):
-                data_obj  = block_obj.reindex_axis(Index(columns), axis = axis, copy = False)
-                block_obj = block_obj.reindex_axis(Index(axis_labels)-Index(columns), axis = axis, copy = False)
+                blocks    = block_obj.reindex_axis(Index(axis_labels)-Index(columns), axis = axis, copy = False)._data.blocks
+                for c in columns:
+                    blocks.extend(block_obj.reindex_axis([ c ], axis = axis, copy = False)._data.blocks)
 
-        blocks    = list(block_obj._data.blocks)
-        if data_obj is not None:
-            blocks.extend(data_obj._data.blocks)
+        if blocks is None:
+            blocks = block_obj._data.blocks
 
         # add my values
         self.values_axes = []
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index eec6b5c5e..0d25f759f 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -460,6 +460,25 @@ class TestHDFStore(unittest.TestCase):
         expected = df_new[df_new.string == 'foo']
         tm.assert_frame_equal(result, expected)
 
+        # multiple data columns
+        df_new = df.copy()
+        df_new['string'] = 'foo'
+        df_new['string'][1:4] = np.nan
+        df_new['string'][5:6] = 'bar'
+        df_new['string2'] = 'foo'
+        df_new['string2'][2:5] = np.nan
+        df_new['string2'][7:8] = 'bar'
+        self.store.remove('df')
+        self.store.append('df', df_new, columns = ['A','B','string','string2'])
+        result = self.store.select('df', [ Term('string', '=', 'foo'), Term('string2=foo'), Term('A>0'), Term('B<0') ])
+        expected = df_new[(df_new.string == 'foo') & (df_new.string2 == 'foo') & (df_new.A > 0) & (df_new.B < 0)]
+        tm.assert_frame_equal(result, expected)
+
+        # yield an empty frame
+        result = self.store.select('df', [ Term('string', '=', 'foo'), Term('string2=bar'), Term('A>0'), Term('B<0') ])
+        expected = df_new[(df_new.string == 'foo') & (df_new.string2 == 'bar') & (df_new.A > 0) & (df_new.B < 0)]
+        tm.assert_frame_equal(result, expected)
+
     def test_create_table_index(self):
         wp = tm.makePanel()
         self.store.append('p5', wp)
