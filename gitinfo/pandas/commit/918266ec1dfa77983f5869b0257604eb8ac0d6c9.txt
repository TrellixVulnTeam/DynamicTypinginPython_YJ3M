commit 918266ec1dfa77983f5869b0257604eb8ac0d6c9
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Apr 23 14:04:00 2012 -0400

    BUG: raise exception when trying to reindex non-unique index, test asfreq on non-unique timestamps close #1077

diff --git a/pandas/core/index.py b/pandas/core/index.py
index 5b5d2dbb1..25567fa01 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -661,11 +661,15 @@ class Index(np.ndarray):
             target = Index(target, dtype=object)
             return this.get_indexer(target, method=method, limit=limit)
 
+        if not self.is_unique:
+            raise Exception('Reindexing only valid with uniquely valued Index '
+                            'objects')
+
         if method == 'pad':
-            assert(self.is_unique and self.is_monotonic)
+            assert(self.is_monotonic)
             indexer = self._engine.get_pad_indexer(target, limit)
         elif method == 'backfill':
-            assert(self.is_unique and self.is_monotonic)
+            assert(self.is_monotonic)
             indexer = self._engine.get_backfill_indexer(target, limit)
         elif method is None:
             indexer = self._engine.get_indexer(target)
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index 83494db7d..c00cf242e 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -221,11 +221,11 @@ class TestResample(unittest.TestCase):
         exp = _ohlc(ts['1/1/2000 5:55:01':])
         self.assert_((resampled.ix['1/1/2000 6:00:00'] == exp).all())
 
-    def test_resample_non_unique(self):
+    def test_downsample_non_unique(self):
         rng = date_range('1/1/2000', '2/29/2000')
         rng2 = rng.repeat(5).values
-
         ts = Series(np.random.randn(len(rng2)), index=rng2)
+
         result = ts.resample('M', how='mean')
 
         expected = ts.groupby(lambda x: x.month).mean()
@@ -233,6 +233,14 @@ class TestResample(unittest.TestCase):
         assert_almost_equal(result[0], expected[1])
         assert_almost_equal(result[1], expected[2])
 
+    def test_asfreq_non_unique(self):
+        # GH #1077
+        rng = date_range('1/1/2000', '2/29/2000')
+        rng2 = rng.repeat(2).values
+        ts = Series(np.random.randn(len(rng2)), index=rng2)
+
+        self.assertRaises(Exception, ts.asfreq, 'B')
+
 def _simple_ts(start, end, freq='D'):
     rng = date_range(start, end, freq=freq)
     return Series(np.random.randn(len(rng)), index=rng)
