commit 3c2e71d84fde3aff3d670fd61a81171e6ba46d76
Author: Jeffrey Tratner <jeffrey.tratner@gmail.com>
Date:   Sun Sep 1 02:24:43 2013 -0400

    ENH:Add raise_with_traceback & use in assertRaises
    
    * Adds `raise_with_traceback` to `pandas.compat`, which handles the
      Python 2/3 syntax differences for raising with traceback.
    * Uses `raise_with_traceback` in `assertRaises` and `assertRaisesRegexp`
      so they provide better feedback.
    
    ENH: raise_with_traceback method.

diff --git a/pandas/compat/__init__.py b/pandas/compat/__init__.py
index 7a444ab01..494cc5fe9 100644
--- a/pandas/compat/__init__.py
+++ b/pandas/compat/__init__.py
@@ -665,6 +665,25 @@ if sys.version_info[:2] < (2, 7):
 else:
     from collections import OrderedDict, Counter
 
+if PY3:
+    def raise_with_traceback(exc, traceback=Ellipsis):
+        if traceback == Ellipsis:
+            _, _, traceback = sys.exc_info()
+        raise exc.with_traceback(traceback)
+else:
+    # this version of raise is a syntax error in Python 3
+    exec("""
+def raise_with_traceback(exc, traceback=Ellipsis):
+    if traceback == Ellipsis:
+        _, _, traceback = sys.exc_info()
+    raise exc, None, traceback
+""")
+
+raise_with_traceback.__doc__ = (
+"""Raise exception with existing traceback.
+If traceback is not passed, uses sys.exc_info() to get traceback."""
+)
+
 # http://stackoverflow.com/questions/4126348
 # Thanks to @martineau at SO
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index d18412018..177569ce0 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -12,8 +12,6 @@ labeling information
 # pylint: disable=E1101,E1103
 # pylint: disable=W0212,W0231,W0703,W0622
 
-from pandas.compat import range, zip, lrange, lmap, lzip, StringIO, u, OrderedDict
-from pandas import compat
 import operator
 import sys
 import collections
@@ -38,6 +36,8 @@ from pandas.core.series import Series, _radd_compat
 import pandas.core.expressions as expressions
 from pandas.sparse.array import SparseArray
 from pandas.compat.scipy import scoreatpercentile as _quantile
+from pandas.compat import(range, zip, lrange, lmap, lzip, StringIO, u,
+                          OrderedDict, raise_with_traceback)
 from pandas import compat
 from pandas.util.terminal import get_terminal_size
 from pandas.util.decorators import deprecate, Appender, Substitution
@@ -351,7 +351,7 @@ class DataFrame(NDFrame):
         Index to use for resulting frame. Will default to np.arange(n) if
         no indexing information part of input data and no index provided
     columns : Index or array-like
-        Column labels to use for resulting frame. Will default to 
+        Column labels to use for resulting frame. Will default to
         np.arange(n) if no column labels are provided
     dtype : dtype, default None
         Data type to force, otherwise infer
@@ -438,9 +438,10 @@ class DataFrame(NDFrame):
         else:
             try:
                 arr = np.array(data, dtype=dtype, copy=copy)
-            except (ValueError, TypeError):
-                raise PandasError('DataFrame constructor called with '
-                                  'incompatible data and dtype')
+            except (ValueError, TypeError) as e:
+                exc = TypeError('DataFrame constructor called with '
+                                'incompatible data and dtype: %s' % e)
+                raise_with_traceback(exc)
 
             if arr.ndim == 0 and index is not None and columns is not None:
                 if isinstance(data, compat.string_types) and dtype is None:
@@ -528,7 +529,8 @@ class DataFrame(NDFrame):
                 try:
                     values = values.astype(dtype)
                 except Exception:
-                    raise ValueError('failed to cast to %s' % dtype)
+                    e = ValueError('failed to cast to %s' % dtype)
+                    raise_with_traceback(e)
 
         N, K = values.shape
 
@@ -4282,13 +4284,16 @@ class DataFrame(NDFrame):
             try:
                 values = self.values
                 result = f(values)
-            except Exception:
+            except Exception as e:
                 if filter_type is None or filter_type == 'numeric':
                     data = self._get_numeric_data()
                 elif filter_type == 'bool':
                     data = self._get_bool_data()
-                else:
-                    raise NotImplementedError
+                else:  # pragma: no cover
+                    e = NotImplementedError("Handling exception with filter_"
+                                            "type %s not implemented."
+                                            % filter_type)
+                    raise_with_traceback(e)
                 result = f(data.values)
                 labels = data._get_agg_axis(axis)
         else:
@@ -4297,8 +4302,10 @@ class DataFrame(NDFrame):
                     data = self._get_numeric_data()
                 elif filter_type == 'bool':
                     data = self._get_bool_data()
-                else:
-                    raise NotImplementedError
+                else: # pragma: no cover
+                    msg = ("Generating numeric_only data with filter_type %s"
+                           "not supported." % filter_type)
+                    raise NotImplementedError(msg)
                 values = data.values
                 labels = data._get_agg_axis(axis)
             else:
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 118672a85..ce93f930a 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -4329,6 +4329,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         result = self.frame[:0].add(self.frame)
         assert_frame_equal(result, self.frame * np.nan)
+        with assertRaisesRegexp(NotImplementedError, 'fill_value'):
+            self.frame.add(self.frame.irow(0), fill_value=3)
 
     def test_arith_mixed(self):
 
@@ -8157,7 +8159,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         assert_frame_equal(shifted2, shifted3)
         assert_frame_equal(ps, shifted2.shift(-1, 'B'))
 
-        self.assertRaises(ValueError, ps.shift, freq='D')
+        assertRaisesRegexp(ValueError, 'does not match PeriodIndex freq',
+                           ps.shift, freq='D')
 
     def test_shift_bool(self):
         df = DataFrame({'high': [True, False],
@@ -10588,7 +10591,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         df = DataFrame(randn(3, 4), index=[1, 2, 3], columns=lrange(4))
         df2 = DataFrame(randn(5, 3), index=lrange(5), columns=[1, 2, 3])
 
-        self.assertRaises(ValueError, df.dot, df2)
+        assertRaisesRegexp(ValueError, 'aligned', df.dot, df2)
 
     def test_idxmin(self):
         frame = self.frame
diff --git a/pandas/tests/test_tests.py b/pandas/tests/test_tests.py
index b52ab61f7..1890c2607 100644
--- a/pandas/tests/test_tests.py
+++ b/pandas/tests/test_tests.py
@@ -4,23 +4,32 @@ import pandas as pd
 import unittest
 import warnings
 import nose
+import sys
 
-from pandas.util.testing import assert_almost_equal
+from pandas.util.testing import (
+    assert_almost_equal, assertRaisesRegexp, raise_with_traceback
+)
 
 # let's get meta.
 
 class TestUtilTesting(unittest.TestCase):
     _multiprocess_can_split_ = True
 
-    def __init__(self, *args):
-        super(TestUtilTesting, self).__init__(*args)
-
-    def setUp(self):
-        pass
-
-    def tearDown(self):
-        pass
-
     def test_assert_almost_equal(self):
         # don't die because values are not ndarrays
         assert_almost_equal(1.1,1.1,check_less_precise=True)
+
+    def test_raise_with_traceback(self):
+        with assertRaisesRegexp(LookupError, "error_text"):
+            try:
+                raise ValueError("THIS IS AN ERROR")
+            except ValueError as e:
+                e = LookupError("error_text")
+                raise_with_traceback(e)
+        with assertRaisesRegexp(LookupError, "error_text"):
+            try:
+                raise ValueError("This is another error")
+            except ValueError:
+                e = LookupError("error_text")
+                _, _, traceback = sys.exc_info()
+                raise_with_traceback(e, traceback)
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 8af88895a..1142181a6 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -26,7 +26,8 @@ import pandas.core.panel as panel
 import pandas.core.panel4d as panel4d
 import pandas.compat as compat
 from pandas.compat import(
-    map, zip, range, unichr, lrange, lmap, lzip, u, callable, Counter
+    map, zip, range, unichr, lrange, lmap, lzip, u, callable, Counter,
+    raise_with_traceback
 )
 
 from pandas import bdate_range
@@ -1111,8 +1112,9 @@ class _AssertRaisesContextmanager(object):
         if self.regexp is not None:
             val = str(exc_value)
             if not self.regexp.search(val):
-                raise AssertionError('"%s" does not match "%s"' %
-                                    (self.regexp.pattern, str(val)))
+                e = AssertionError('"%s" does not match "%s"' %
+                                   (self.regexp.pattern, str(val)))
+                raise_with_traceback(e, traceback)
         return True
 
 
