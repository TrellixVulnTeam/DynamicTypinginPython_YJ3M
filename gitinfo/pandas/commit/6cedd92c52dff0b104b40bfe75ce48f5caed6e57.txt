commit 6cedd92c52dff0b104b40bfe75ce48f5caed6e57
Author: Gábor Lipták <gliptak@gmail.com>
Date:   Sun Jun 16 08:04:39 2013 -0400

    Split tests into multiple

diff --git a/pandas/io/tests/test_google.py b/pandas/io/tests/test_google.py
index be55db207..8c16c60ac 100644
--- a/pandas/io/tests/test_google.py
+++ b/pandas/io/tests/test_google.py
@@ -6,6 +6,7 @@ import pandas as pd
 import pandas.io.data as web
 from pandas.util.testing import (network, assert_series_equal)
 from numpy.testing.decorators import slow
+import numpy as np
 
 import urllib2
 
@@ -24,7 +25,23 @@ class TestGoogle(unittest.TestCase):
             self.assertEquals(
                 web.DataReader("F", 'google', start, end)['Close'][-1],
                 13.68)
+        except urllib2.URLError:
+            try:
+                urllib2.urlopen('http://www.google.com')
+            except urllib2.URLError:
+                raise nose.SkipTest
+            else:
+                raise
 
+    @network
+    def test_google_non_existent(self):
+        # asserts that google is minimally working and that it throws
+        # an excecption when DataReader can't get a 200 response from
+        # google
+        start = datetime(2010, 1, 1)
+        end = datetime(2013, 01, 27)
+
+        try:
             self.assertRaises(
                 Exception,
                 lambda: web.DataReader("NON EXISTENT TICKER", 'google',
@@ -44,18 +61,36 @@ class TestGoogle(unittest.TestCase):
                 lambda: web.get_quote_google(pd.Series(['GOOG', 'AAPL', 'GOOG'])))
 
     @network
-    def test_get_data(self):
+    def test_get_goog_volume(self):
         try:
-            import numpy as np
             df = web.get_data_google('GOOG')
-            print(df.Volume.ix['OCT-08-2010'])
             assert df.Volume.ix['OCT-08-2010'] == 2863473
+        except IOError:
+            try:
+                urllib2.urlopen('http://www.google.com')
+            except IOError:
+                raise nose.SkipTest
+            else:
+                raise
 
+    @network
+    def test_get_multi1(self):
+        try:
             sl = ['AAPL', 'AMZN', 'GOOG']
             pan = web.get_data_google(sl, '2012')
             ts = pan.Close.GOOG.index[pan.Close.AAPL > pan.Close.GOOG]
             assert ts[0].dayofyear == 96
+        except IOError:
+            try:
+                urllib2.urlopen('http://www.google.com')
+            except IOError:
+                raise nose.SkipTest
+            else:
+                raise
 
+    @network
+    def test_get_multi2(self):
+        try:
             pan = web.get_data_google(['GE', 'MSFT', 'INTC'], 'JAN-01-12', 'JAN-31-12')
             expected = [19.02, 28.23, 25.39]
             result = pan.Close.ix['01-18-12'][['GE', 'MSFT', 'INTC']].tolist()
