commit 432b061dd100d779278fd9829ce917108ce3837a
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Feb 8 16:12:35 2012 -0500

    TST: more merge test coverage, refactoring

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 938fd14f7..948e717f7 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2943,8 +2943,12 @@ class DataFrame(NDFrame):
                 for k, v in series_gen:
                     results[k] = func(v)
             except Exception, e:
-                if hasattr(e, 'args'):
-                    e.args = e.args + ('occurred at index %s' % str(k),)
+                try:
+                    if hasattr(e, 'args'):
+                        e.args = e.args + ('occurred at index %s' % str(k),)
+                except UnboundLocalError:
+                    raise e
+                else:
                     raise
 
         if len(results) > 0 and _is_sequence(results.values()[0]):
diff --git a/pandas/tools/merge.py b/pandas/tools/merge.py
index 9c154845e..5cddcc514 100644
--- a/pandas/tools/merge.py
+++ b/pandas/tools/merge.py
@@ -114,6 +114,9 @@ class _MergeOperation(object):
                     key_col.put(na_indexer, com.take_1d(self.left_join_keys[i],
                                                         left_na_indexer))
             elif left_indexer is not None:
+                if name is None:
+                    name = 'key_%d' % i
+
                 # a faster way?
                 key_col = com.take_1d(self.left_join_keys[i], left_indexer)
                 na_indexer = (left_indexer == -1).nonzero()[0]
@@ -179,41 +182,7 @@ class _MergeOperation(object):
         -------
         left_keys, right_keys
         """
-        # Hm, any way to make this logic less complicated??
-        if (self.on is None and self.left_on is None
-            and self.right_on is None):
-
-            if self.left_index and self.right_index:
-                self.left_on, self.right_on = (), ()
-            elif self.left_index:
-                if self.right_on is None:
-                    raise Exception('Must pass right_on or right_index=True')
-                self.left_on = [None] * self.left.index.nlevels
-            elif self.right_index:
-                if self.left_on is None:
-                    raise Exception('Must pass left_on or left_index=True')
-                self.right_on = [None] * self.right.index.nlevels
-            else:
-                # use the common columns
-                common_cols = self.left.columns.intersection(self.right.columns)
-                self.left_on = self.right_on = common_cols
-        elif self.on is not None:
-            if self.left_on is not None or self.right_on is not None:
-                raise Exception('Can only pass on OR left_on and '
-                                'right_on')
-            self.left_on = self.right_on = self.on
-        elif self.left_on is not None:
-            n = len(self.left_on)
-            if self.right_index:
-                self.right_on = [None] * n
-            else:
-                assert(len(self.right_on) == n)
-        elif self.right_on is not None:
-            n = len(self.right_on)
-            if self.left_index:
-                self.left_on = [None] * n
-            else:
-                assert(len(self.left_on) == n)
+        self._validate_specification()
 
         left_keys = []
         right_keys = []
@@ -266,6 +235,46 @@ class _MergeOperation(object):
 
         return left_keys, right_keys, join_names
 
+    def _validate_specification(self):
+        # Hm, any way to make this logic less complicated??
+        if (self.on is None and self.left_on is None
+            and self.right_on is None):
+
+            if self.left_index and self.right_index:
+                self.left_on, self.right_on = (), ()
+            elif self.left_index:
+                if self.right_on is None:
+                    raise Exception('Must pass right_on or right_index=True')
+            elif self.right_index:
+                if self.left_on is None:
+                    raise Exception('Must pass left_on or left_index=True')
+                assert(len(self.left_on) == self.right.index.nlevels)
+            else:
+                # use the common columns
+                common_cols = self.left.columns.intersection(self.right.columns)
+                self.left_on = self.right_on = common_cols
+        elif self.on is not None:
+            if self.left_on is not None or self.right_on is not None:
+                raise Exception('Can only pass on OR left_on and '
+                                'right_on')
+            self.left_on = self.right_on = self.on
+        elif self.left_on is not None:
+            n = len(self.left_on)
+            if self.right_index:
+                self.right_on = [None] * n
+            else:
+                assert(len(self.right_on) == n)
+        elif self.right_on is not None:
+            n = len(self.right_on)
+            if self.left_index:
+                self.left_on = [None] * n
+            else:
+                assert(len(self.left_on) == n)
+        elif self.left_index:
+            assert(len(self.right_on) == self.left.index.nlevels)
+        elif self.right_index:
+            assert(len(self.left_on) == self.right.index.nlevels)
+
     def _get_group_keys(self):
         """
 
diff --git a/pandas/tools/tests/test_merge.py b/pandas/tools/tests/test_merge.py
index 60ba616bc..62a1f5533 100644
--- a/pandas/tools/tests/test_merge.py
+++ b/pandas/tools/tests/test_merge.py
@@ -543,11 +543,14 @@ class TestMerge(unittest.TestCase):
         self.assert_(merged['key'].notnull().all())
         self.assert_(merged2['key'].notnull().all())
 
-        left = DataFrame({'value' : range(5)}, columns=['value', 'key'])
+        left = DataFrame({'value' : range(5)}, columns=['value'])
         right = DataFrame({'rvalue' : range(6)})
         lkey = np.array([1, 1, 2, 2, 3])
         rkey = np.array([1, 1, 2, 3, 4, 5])
 
+        merged = merge(left, right, left_on=lkey, right_on=rkey, how='outer')
+        self.assert_(np.array_equal(merged['key_0'],
+                                    np.array([1, 1, 1, 1, 2, 2, 3, 4, 5])))
 
 class TestMergeMulti(unittest.TestCase):
 
