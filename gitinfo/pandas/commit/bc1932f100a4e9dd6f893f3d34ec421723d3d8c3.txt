commit bc1932f100a4e9dd6f893f3d34ec421723d3d8c3
Author: Adam Klein <adamklein@gmail.com>
Date:   Wed Feb 15 10:39:58 2012 -0500

    BUG: fix additional float-based slicing issue, with test

diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 149071723..53fa3070c 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -292,15 +292,27 @@ class _NDFrameIndexer(object):
 
         int_slice = _is_index_slice(slice_obj)
 
+        start = slice_obj.start
+        stop = slice_obj.stop
+
+        # in case of providing all floats, use label-based indexing
+        float_slice = (labels.inferred_type == 'floating'
+                       and (type(start) == float or start is None)
+                       and (type(stop) == float or stop is None))
+
         null_slice = slice_obj.start is None and slice_obj.stop is None
-        # could have integers in the first level of the MultiIndex
+
+        # could have integers in the first level of the MultiIndex, in which
+        # case we wouldn't want to do position-based slicing
         position_slice = (int_slice and not labels.inferred_type == 'integer'
-                          and not isinstance(labels, MultiIndex))
+                          and not isinstance(labels, MultiIndex)
+                          and not float_slice)
+
         if null_slice or position_slice:
             slicer = slice_obj
         else:
             try:
-                i, j = labels.slice_locs(slice_obj.start, slice_obj.stop)
+                i, j = labels.slice_locs(start, stop)
                 slicer = slice(i, j, slice_obj.step)
             except Exception:
                 if _is_index_slice(slice_obj):
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 8ba2ab50c..18d9627a0 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -526,6 +526,18 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         self.assertRaises(TypeError, self.ts.__getitem__, slice(4.5, 10.0))
         self.assertRaises(TypeError, self.ts.__setitem__, slice(4.5, 10.0), 0)
 
+    def test_slice_floats2(self):
+        s = Series(np.random.rand(10), index=np.arange(10,20,dtype=float))
+
+        self.assert_(len(s.ix[12.0:] == 8))
+        self.assert_(len(s.ix[12.5:] == 7))
+
+        i = np.arange(10,20,dtype=float)
+        i[2] = 12.2
+        s.index = i
+        self.assert_(len(s.ix[12.0:] == 8))
+        self.assert_(len(s.ix[12.5:] == 7))
+
     def test_setitem(self):
         self.ts[self.ts.index[5]] = np.NaN
         self.ts[[1,2,17]] = np.NaN
