commit e3f1cf1c8b2e4a640951c0fc0a854c7a84a7193d
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Wed Mar 25 16:58:23 2020 -0700

    REF: collect DataFrame.drop, Series.drop tests (#32994)

diff --git a/pandas/tests/frame/methods/test_drop.py b/pandas/tests/frame/methods/test_drop.py
index e6d002369..0bc234dcb 100644
--- a/pandas/tests/frame/methods/test_drop.py
+++ b/pandas/tests/frame/methods/test_drop.py
@@ -1,7 +1,12 @@
+import re
+
 import numpy as np
 import pytest
 
+from pandas.errors import PerformanceWarning
+
 import pandas as pd
+from pandas import DataFrame, Index, MultiIndex
 import pandas._testing as tm
 
 
@@ -52,3 +57,204 @@ def test_drop_with_non_unique_datetime_index_and_invalid_keys():
 
     with pytest.raises(KeyError, match="not found in axis"):
         df.drop(["a", "b"])  # Dropping with labels not exist in the index
+
+
+class TestDataFrameDrop:
+    def test_drop_names(self):
+        df = DataFrame(
+            [[1, 2, 3], [3, 4, 5], [5, 6, 7]],
+            index=["a", "b", "c"],
+            columns=["d", "e", "f"],
+        )
+        df.index.name, df.columns.name = "first", "second"
+        df_dropped_b = df.drop("b")
+        df_dropped_e = df.drop("e", axis=1)
+        df_inplace_b, df_inplace_e = df.copy(), df.copy()
+        df_inplace_b.drop("b", inplace=True)
+        df_inplace_e.drop("e", axis=1, inplace=True)
+        for obj in (df_dropped_b, df_dropped_e, df_inplace_b, df_inplace_e):
+            assert obj.index.name == "first"
+            assert obj.columns.name == "second"
+        assert list(df.columns) == ["d", "e", "f"]
+
+        msg = r"\['g'\] not found in axis"
+        with pytest.raises(KeyError, match=msg):
+            df.drop(["g"])
+        with pytest.raises(KeyError, match=msg):
+            df.drop(["g"], 1)
+
+        # errors = 'ignore'
+        dropped = df.drop(["g"], errors="ignore")
+        expected = Index(["a", "b", "c"], name="first")
+        tm.assert_index_equal(dropped.index, expected)
+
+        dropped = df.drop(["b", "g"], errors="ignore")
+        expected = Index(["a", "c"], name="first")
+        tm.assert_index_equal(dropped.index, expected)
+
+        dropped = df.drop(["g"], axis=1, errors="ignore")
+        expected = Index(["d", "e", "f"], name="second")
+        tm.assert_index_equal(dropped.columns, expected)
+
+        dropped = df.drop(["d", "g"], axis=1, errors="ignore")
+        expected = Index(["e", "f"], name="second")
+        tm.assert_index_equal(dropped.columns, expected)
+
+        # GH 16398
+        dropped = df.drop([], errors="ignore")
+        expected = Index(["a", "b", "c"], name="first")
+        tm.assert_index_equal(dropped.index, expected)
+
+    def test_drop(self):
+        simple = DataFrame({"A": [1, 2, 3, 4], "B": [0, 1, 2, 3]})
+        tm.assert_frame_equal(simple.drop("A", axis=1), simple[["B"]])
+        tm.assert_frame_equal(simple.drop(["A", "B"], axis="columns"), simple[[]])
+        tm.assert_frame_equal(simple.drop([0, 1, 3], axis=0), simple.loc[[2], :])
+        tm.assert_frame_equal(simple.drop([0, 3], axis="index"), simple.loc[[1, 2], :])
+
+        with pytest.raises(KeyError, match=r"\[5\] not found in axis"):
+            simple.drop(5)
+        with pytest.raises(KeyError, match=r"\['C'\] not found in axis"):
+            simple.drop("C", 1)
+        with pytest.raises(KeyError, match=r"\[5\] not found in axis"):
+            simple.drop([1, 5])
+        with pytest.raises(KeyError, match=r"\['C'\] not found in axis"):
+            simple.drop(["A", "C"], 1)
+
+        # errors = 'ignore'
+        tm.assert_frame_equal(simple.drop(5, errors="ignore"), simple)
+        tm.assert_frame_equal(
+            simple.drop([0, 5], errors="ignore"), simple.loc[[1, 2, 3], :]
+        )
+        tm.assert_frame_equal(simple.drop("C", axis=1, errors="ignore"), simple)
+        tm.assert_frame_equal(
+            simple.drop(["A", "C"], axis=1, errors="ignore"), simple[["B"]]
+        )
+
+        # non-unique - wheee!
+        nu_df = DataFrame(
+            list(zip(range(3), range(-3, 1), list("abc"))), columns=["a", "a", "b"]
+        )
+        tm.assert_frame_equal(nu_df.drop("a", axis=1), nu_df[["b"]])
+        tm.assert_frame_equal(nu_df.drop("b", axis="columns"), nu_df["a"])
+        tm.assert_frame_equal(nu_df.drop([]), nu_df)  # GH 16398
+
+        nu_df = nu_df.set_index(pd.Index(["X", "Y", "X"]))
+        nu_df.columns = list("abc")
+        tm.assert_frame_equal(nu_df.drop("X", axis="rows"), nu_df.loc[["Y"], :])
+        tm.assert_frame_equal(nu_df.drop(["X", "Y"], axis=0), nu_df.loc[[], :])
+
+        # inplace cache issue
+        # GH#5628
+        df = pd.DataFrame(np.random.randn(10, 3), columns=list("abc"))
+        expected = df[~(df.b > 0)]
+        df.drop(labels=df[df.b > 0].index, inplace=True)
+        tm.assert_frame_equal(df, expected)
+
+    def test_drop_multiindex_not_lexsorted(self):
+        # GH#11640
+
+        # define the lexsorted version
+        lexsorted_mi = MultiIndex.from_tuples(
+            [("a", ""), ("b1", "c1"), ("b2", "c2")], names=["b", "c"]
+        )
+        lexsorted_df = DataFrame([[1, 3, 4]], columns=lexsorted_mi)
+        assert lexsorted_df.columns.is_lexsorted()
+
+        # define the non-lexsorted version
+        not_lexsorted_df = DataFrame(
+            columns=["a", "b", "c", "d"], data=[[1, "b1", "c1", 3], [1, "b2", "c2", 4]]
+        )
+        not_lexsorted_df = not_lexsorted_df.pivot_table(
+            index="a", columns=["b", "c"], values="d"
+        )
+        not_lexsorted_df = not_lexsorted_df.reset_index()
+        assert not not_lexsorted_df.columns.is_lexsorted()
+
+        # compare the results
+        tm.assert_frame_equal(lexsorted_df, not_lexsorted_df)
+
+        expected = lexsorted_df.drop("a", axis=1)
+        with tm.assert_produces_warning(PerformanceWarning):
+            result = not_lexsorted_df.drop("a", axis=1)
+
+        tm.assert_frame_equal(result, expected)
+
+    def test_drop_api_equivalence(self):
+        # equivalence of the labels/axis and index/columns API's (GH#12392)
+        df = DataFrame(
+            [[1, 2, 3], [3, 4, 5], [5, 6, 7]],
+            index=["a", "b", "c"],
+            columns=["d", "e", "f"],
+        )
+
+        res1 = df.drop("a")
+        res2 = df.drop(index="a")
+        tm.assert_frame_equal(res1, res2)
+
+        res1 = df.drop("d", 1)
+        res2 = df.drop(columns="d")
+        tm.assert_frame_equal(res1, res2)
+
+        res1 = df.drop(labels="e", axis=1)
+        res2 = df.drop(columns="e")
+        tm.assert_frame_equal(res1, res2)
+
+        res1 = df.drop(["a"], axis=0)
+        res2 = df.drop(index=["a"])
+        tm.assert_frame_equal(res1, res2)
+
+        res1 = df.drop(["a"], axis=0).drop(["d"], axis=1)
+        res2 = df.drop(index=["a"], columns=["d"])
+        tm.assert_frame_equal(res1, res2)
+
+        msg = "Cannot specify both 'labels' and 'index'/'columns'"
+        with pytest.raises(ValueError, match=msg):
+            df.drop(labels="a", index="b")
+
+        with pytest.raises(ValueError, match=msg):
+            df.drop(labels="a", columns="b")
+
+        msg = "Need to specify at least one of 'labels', 'index' or 'columns'"
+        with pytest.raises(ValueError, match=msg):
+            df.drop(axis=1)
+
+    data = [[1, 2, 3], [1, 2, 3]]
+
+    @pytest.mark.parametrize(
+        "actual",
+        [
+            DataFrame(data=data, index=["a", "a"]),
+            DataFrame(data=data, index=["a", "b"]),
+            DataFrame(data=data, index=["a", "b"]).set_index([0, 1]),
+            DataFrame(data=data, index=["a", "a"]).set_index([0, 1]),
+        ],
+    )
+    def test_raise_on_drop_duplicate_index(self, actual):
+
+        # GH#19186
+        level = 0 if isinstance(actual.index, MultiIndex) else None
+        msg = re.escape("\"['c'] not found in axis\"")
+        with pytest.raises(KeyError, match=msg):
+            actual.drop("c", level=level, axis=0)
+        with pytest.raises(KeyError, match=msg):
+            actual.T.drop("c", level=level, axis=1)
+        expected_no_err = actual.drop("c", axis=0, level=level, errors="ignore")
+        tm.assert_frame_equal(expected_no_err, actual)
+        expected_no_err = actual.T.drop("c", axis=1, level=level, errors="ignore")
+        tm.assert_frame_equal(expected_no_err.T, actual)
+
+    @pytest.mark.parametrize("index", [[1, 2, 3], [1, 1, 2]])
+    @pytest.mark.parametrize("drop_labels", [[], [1], [2]])
+    def test_drop_empty_list(self, index, drop_labels):
+        # GH#21494
+        expected_index = [i for i in index if i not in drop_labels]
+        frame = pd.DataFrame(index=index).drop(drop_labels)
+        tm.assert_frame_equal(frame, pd.DataFrame(index=expected_index))
+
+    @pytest.mark.parametrize("index", [[1, 2, 3], [1, 2, 2]])
+    @pytest.mark.parametrize("drop_labels", [[1, 4], [4, 5]])
+    def test_drop_non_empty_list(self, index, drop_labels):
+        # GH# 21494
+        with pytest.raises(KeyError, match="not found in axis"):
+            pd.DataFrame(index=index).drop(drop_labels)
diff --git a/pandas/tests/frame/test_axis_select_reindex.py b/pandas/tests/frame/test_axis_select_reindex.py
index 4c33421a7..958eb5935 100644
--- a/pandas/tests/frame/test_axis_select_reindex.py
+++ b/pandas/tests/frame/test_axis_select_reindex.py
@@ -1,11 +1,8 @@
 from datetime import datetime
-import re
 
 import numpy as np
 import pytest
 
-from pandas.errors import PerformanceWarning
-
 import pandas as pd
 from pandas import Categorical, DataFrame, Index, MultiIndex, Series, date_range, isna
 import pandas._testing as tm
@@ -15,52 +12,7 @@ class TestDataFrameSelectReindex:
     # These are specific reindex-based tests; other indexing tests should go in
     # test_indexing
 
-    def test_drop_names(self):
-        df = DataFrame(
-            [[1, 2, 3], [3, 4, 5], [5, 6, 7]],
-            index=["a", "b", "c"],
-            columns=["d", "e", "f"],
-        )
-        df.index.name, df.columns.name = "first", "second"
-        df_dropped_b = df.drop("b")
-        df_dropped_e = df.drop("e", axis=1)
-        df_inplace_b, df_inplace_e = df.copy(), df.copy()
-        df_inplace_b.drop("b", inplace=True)
-        df_inplace_e.drop("e", axis=1, inplace=True)
-        for obj in (df_dropped_b, df_dropped_e, df_inplace_b, df_inplace_e):
-            assert obj.index.name == "first"
-            assert obj.columns.name == "second"
-        assert list(df.columns) == ["d", "e", "f"]
-
-        msg = r"\['g'\] not found in axis"
-        with pytest.raises(KeyError, match=msg):
-            df.drop(["g"])
-        with pytest.raises(KeyError, match=msg):
-            df.drop(["g"], 1)
-
-        # errors = 'ignore'
-        dropped = df.drop(["g"], errors="ignore")
-        expected = Index(["a", "b", "c"], name="first")
-        tm.assert_index_equal(dropped.index, expected)
-
-        dropped = df.drop(["b", "g"], errors="ignore")
-        expected = Index(["a", "c"], name="first")
-        tm.assert_index_equal(dropped.index, expected)
-
-        dropped = df.drop(["g"], axis=1, errors="ignore")
-        expected = Index(["d", "e", "f"], name="second")
-        tm.assert_index_equal(dropped.columns, expected)
-
-        dropped = df.drop(["d", "g"], axis=1, errors="ignore")
-        expected = Index(["e", "f"], name="second")
-        tm.assert_index_equal(dropped.columns, expected)
-
-        # GH 16398
-        dropped = df.drop([], errors="ignore")
-        expected = Index(["a", "b", "c"], name="first")
-        tm.assert_index_equal(dropped.index, expected)
-
-    def test_drop_col_still_multiindex(self):
+    def test_delitem_col_still_multiindex(self):
         arrays = [["a", "b", "c", "top"], ["", "", "", "OD"], ["", "", "", "wx"]]
 
         tuples = sorted(zip(*arrays))
@@ -70,120 +22,6 @@ class TestDataFrameSelectReindex:
         del df[("a", "", "")]
         assert isinstance(df.columns, MultiIndex)
 
-    def test_drop(self):
-        simple = DataFrame({"A": [1, 2, 3, 4], "B": [0, 1, 2, 3]})
-        tm.assert_frame_equal(simple.drop("A", axis=1), simple[["B"]])
-        tm.assert_frame_equal(simple.drop(["A", "B"], axis="columns"), simple[[]])
-        tm.assert_frame_equal(simple.drop([0, 1, 3], axis=0), simple.loc[[2], :])
-        tm.assert_frame_equal(simple.drop([0, 3], axis="index"), simple.loc[[1, 2], :])
-
-        with pytest.raises(KeyError, match=r"\[5\] not found in axis"):
-            simple.drop(5)
-        with pytest.raises(KeyError, match=r"\['C'\] not found in axis"):
-            simple.drop("C", 1)
-        with pytest.raises(KeyError, match=r"\[5\] not found in axis"):
-            simple.drop([1, 5])
-        with pytest.raises(KeyError, match=r"\['C'\] not found in axis"):
-            simple.drop(["A", "C"], 1)
-
-        # errors = 'ignore'
-        tm.assert_frame_equal(simple.drop(5, errors="ignore"), simple)
-        tm.assert_frame_equal(
-            simple.drop([0, 5], errors="ignore"), simple.loc[[1, 2, 3], :]
-        )
-        tm.assert_frame_equal(simple.drop("C", axis=1, errors="ignore"), simple)
-        tm.assert_frame_equal(
-            simple.drop(["A", "C"], axis=1, errors="ignore"), simple[["B"]]
-        )
-
-        # non-unique - wheee!
-        nu_df = DataFrame(
-            list(zip(range(3), range(-3, 1), list("abc"))), columns=["a", "a", "b"]
-        )
-        tm.assert_frame_equal(nu_df.drop("a", axis=1), nu_df[["b"]])
-        tm.assert_frame_equal(nu_df.drop("b", axis="columns"), nu_df["a"])
-        tm.assert_frame_equal(nu_df.drop([]), nu_df)  # GH 16398
-
-        nu_df = nu_df.set_index(pd.Index(["X", "Y", "X"]))
-        nu_df.columns = list("abc")
-        tm.assert_frame_equal(nu_df.drop("X", axis="rows"), nu_df.loc[["Y"], :])
-        tm.assert_frame_equal(nu_df.drop(["X", "Y"], axis=0), nu_df.loc[[], :])
-
-        # inplace cache issue
-        # GH 5628
-        df = pd.DataFrame(np.random.randn(10, 3), columns=list("abc"))
-        expected = df[~(df.b > 0)]
-        df.drop(labels=df[df.b > 0].index, inplace=True)
-        tm.assert_frame_equal(df, expected)
-
-    def test_drop_multiindex_not_lexsorted(self):
-        # GH 11640
-
-        # define the lexsorted version
-        lexsorted_mi = MultiIndex.from_tuples(
-            [("a", ""), ("b1", "c1"), ("b2", "c2")], names=["b", "c"]
-        )
-        lexsorted_df = DataFrame([[1, 3, 4]], columns=lexsorted_mi)
-        assert lexsorted_df.columns.is_lexsorted()
-
-        # define the non-lexsorted version
-        not_lexsorted_df = DataFrame(
-            columns=["a", "b", "c", "d"], data=[[1, "b1", "c1", 3], [1, "b2", "c2", 4]]
-        )
-        not_lexsorted_df = not_lexsorted_df.pivot_table(
-            index="a", columns=["b", "c"], values="d"
-        )
-        not_lexsorted_df = not_lexsorted_df.reset_index()
-        assert not not_lexsorted_df.columns.is_lexsorted()
-
-        # compare the results
-        tm.assert_frame_equal(lexsorted_df, not_lexsorted_df)
-
-        expected = lexsorted_df.drop("a", axis=1)
-        with tm.assert_produces_warning(PerformanceWarning):
-            result = not_lexsorted_df.drop("a", axis=1)
-
-        tm.assert_frame_equal(result, expected)
-
-    def test_drop_api_equivalence(self):
-        # equivalence of the labels/axis and index/columns API's (GH12392)
-        df = DataFrame(
-            [[1, 2, 3], [3, 4, 5], [5, 6, 7]],
-            index=["a", "b", "c"],
-            columns=["d", "e", "f"],
-        )
-
-        res1 = df.drop("a")
-        res2 = df.drop(index="a")
-        tm.assert_frame_equal(res1, res2)
-
-        res1 = df.drop("d", 1)
-        res2 = df.drop(columns="d")
-        tm.assert_frame_equal(res1, res2)
-
-        res1 = df.drop(labels="e", axis=1)
-        res2 = df.drop(columns="e")
-        tm.assert_frame_equal(res1, res2)
-
-        res1 = df.drop(["a"], axis=0)
-        res2 = df.drop(index=["a"])
-        tm.assert_frame_equal(res1, res2)
-
-        res1 = df.drop(["a"], axis=0).drop(["d"], axis=1)
-        res2 = df.drop(index=["a"], columns=["d"])
-        tm.assert_frame_equal(res1, res2)
-
-        msg = "Cannot specify both 'labels' and 'index'/'columns'"
-        with pytest.raises(ValueError, match=msg):
-            df.drop(labels="a", index="b")
-
-        with pytest.raises(ValueError, match=msg):
-            df.drop(labels="a", columns="b")
-
-        msg = "Need to specify at least one of 'labels', 'index' or 'columns'"
-        with pytest.raises(ValueError, match=msg):
-            df.drop(axis=1)
-
     def test_merge_join_different_levels(self):
         # GH 9455
 
@@ -878,43 +716,3 @@ class TestDataFrameSelectReindex:
         result = df2.reindex(midx)
         expected = pd.DataFrame({"a": [0, 1, 2, 3, 4, 5, 6, np.nan, 8]}, index=midx)
         tm.assert_frame_equal(result, expected)
-
-    data = [[1, 2, 3], [1, 2, 3]]
-
-    @pytest.mark.parametrize(
-        "actual",
-        [
-            DataFrame(data=data, index=["a", "a"]),
-            DataFrame(data=data, index=["a", "b"]),
-            DataFrame(data=data, index=["a", "b"]).set_index([0, 1]),
-            DataFrame(data=data, index=["a", "a"]).set_index([0, 1]),
-        ],
-    )
-    def test_raise_on_drop_duplicate_index(self, actual):
-
-        # issue 19186
-        level = 0 if isinstance(actual.index, MultiIndex) else None
-        msg = re.escape("\"['c'] not found in axis\"")
-        with pytest.raises(KeyError, match=msg):
-            actual.drop("c", level=level, axis=0)
-        with pytest.raises(KeyError, match=msg):
-            actual.T.drop("c", level=level, axis=1)
-        expected_no_err = actual.drop("c", axis=0, level=level, errors="ignore")
-        tm.assert_frame_equal(expected_no_err, actual)
-        expected_no_err = actual.T.drop("c", axis=1, level=level, errors="ignore")
-        tm.assert_frame_equal(expected_no_err.T, actual)
-
-    @pytest.mark.parametrize("index", [[1, 2, 3], [1, 1, 2]])
-    @pytest.mark.parametrize("drop_labels", [[], [1], [2]])
-    def test_drop_empty_list(self, index, drop_labels):
-        # GH 21494
-        expected_index = [i for i in index if i not in drop_labels]
-        frame = pd.DataFrame(index=index).drop(drop_labels)
-        tm.assert_frame_equal(frame, pd.DataFrame(index=expected_index))
-
-    @pytest.mark.parametrize("index", [[1, 2, 3], [1, 2, 2]])
-    @pytest.mark.parametrize("drop_labels", [[1, 4], [4, 5]])
-    def test_drop_non_empty_list(self, index, drop_labels):
-        # GH 21494
-        with pytest.raises(KeyError, match="not found in axis"):
-            pd.DataFrame(index=index).drop(drop_labels)
diff --git a/pandas/tests/frame/test_repr_info.py b/pandas/tests/frame/test_repr_info.py
index bfeacdd62..6d786d958 100644
--- a/pandas/tests/frame/test_repr_info.py
+++ b/pandas/tests/frame/test_repr_info.py
@@ -17,9 +17,6 @@ import pandas._testing as tm
 
 import pandas.io.formats.format as fmt
 
-# Segregated collection of methods that require the BlockManager internal data
-# structure
-
 
 class TestDataFrameReprInfoEtc:
     def test_repr_empty(self):
diff --git a/pandas/tests/series/indexing/test_alter_index.py b/pandas/tests/series/indexing/test_alter_index.py
index c6052896c..b45f831ff 100644
--- a/pandas/tests/series/indexing/test_alter_index.py
+++ b/pandas/tests/series/indexing/test_alter_index.py
@@ -321,85 +321,3 @@ def test_reindex_empty_series_tz_dtype():
     result = Series(dtype="datetime64[ns, UTC]").reindex([0, 1])
     expected = Series([pd.NaT] * 2, dtype="datetime64[ns, UTC]")
     tm.assert_equal(result, expected)
-
-
-@pytest.mark.parametrize(
-    "data, index, drop_labels, axis, expected_data, expected_index",
-    [
-        # Unique Index
-        ([1, 2], ["one", "two"], ["two"], 0, [1], ["one"]),
-        ([1, 2], ["one", "two"], ["two"], "rows", [1], ["one"]),
-        ([1, 1, 2], ["one", "two", "one"], ["two"], 0, [1, 2], ["one", "one"]),
-        # GH 5248 Non-Unique Index
-        ([1, 1, 2], ["one", "two", "one"], "two", 0, [1, 2], ["one", "one"]),
-        ([1, 1, 2], ["one", "two", "one"], ["one"], 0, [1], ["two"]),
-        ([1, 1, 2], ["one", "two", "one"], "one", 0, [1], ["two"]),
-    ],
-)
-def test_drop_unique_and_non_unique_index(
-    data, index, axis, drop_labels, expected_data, expected_index
-):
-
-    s = Series(data=data, index=index)
-    result = s.drop(drop_labels, axis=axis)
-    expected = Series(data=expected_data, index=expected_index)
-    tm.assert_series_equal(result, expected)
-
-
-@pytest.mark.parametrize(
-    "data, index, drop_labels, axis, error_type, error_desc",
-    [
-        # single string/tuple-like
-        (range(3), list("abc"), "bc", 0, KeyError, "not found in axis"),
-        # bad axis
-        (range(3), list("abc"), ("a",), 0, KeyError, "not found in axis"),
-        (range(3), list("abc"), "one", "columns", ValueError, "No axis named columns"),
-    ],
-)
-def test_drop_exception_raised(data, index, drop_labels, axis, error_type, error_desc):
-    ser = Series(data, index=index)
-    with pytest.raises(error_type, match=error_desc):
-        ser.drop(drop_labels, axis=axis)
-
-
-def test_drop_with_ignore_errors():
-    # errors='ignore'
-    s = Series(range(3), index=list("abc"))
-    result = s.drop("bc", errors="ignore")
-    tm.assert_series_equal(result, s)
-    result = s.drop(["a", "d"], errors="ignore")
-    expected = s.iloc[1:]
-    tm.assert_series_equal(result, expected)
-
-    # GH 8522
-    s = Series([2, 3], index=[True, False])
-    assert s.index.is_object()
-    result = s.drop(True)
-    expected = Series([3], index=[False])
-    tm.assert_series_equal(result, expected)
-
-
-@pytest.mark.parametrize("index", [[1, 2, 3], [1, 1, 3]])
-@pytest.mark.parametrize("drop_labels", [[], [1], [3]])
-def test_drop_empty_list(index, drop_labels):
-    # GH 21494
-    expected_index = [i for i in index if i not in drop_labels]
-    series = pd.Series(index=index, dtype=object).drop(drop_labels)
-    expected = pd.Series(index=expected_index, dtype=object)
-    tm.assert_series_equal(series, expected)
-
-
-@pytest.mark.parametrize(
-    "data, index, drop_labels",
-    [
-        (None, [1, 2, 3], [1, 4]),
-        (None, [1, 2, 2], [1, 4]),
-        ([2, 3], [0, 1], [False, True]),
-    ],
-)
-def test_drop_non_empty_list(data, index, drop_labels):
-    # GH 21494 and GH 16877
-    dtype = object if data is None else None
-    ser = pd.Series(data=data, index=index, dtype=dtype)
-    with pytest.raises(KeyError, match="not found in axis"):
-        ser.drop(drop_labels)
diff --git a/pandas/tests/series/methods/test_drop.py b/pandas/tests/series/methods/test_drop.py
new file mode 100644
index 000000000..197fe9ff6
--- /dev/null
+++ b/pandas/tests/series/methods/test_drop.py
@@ -0,0 +1,87 @@
+import pytest
+
+import pandas as pd
+from pandas import Series
+import pandas._testing as tm
+
+
+@pytest.mark.parametrize(
+    "data, index, drop_labels, axis, expected_data, expected_index",
+    [
+        # Unique Index
+        ([1, 2], ["one", "two"], ["two"], 0, [1], ["one"]),
+        ([1, 2], ["one", "two"], ["two"], "rows", [1], ["one"]),
+        ([1, 1, 2], ["one", "two", "one"], ["two"], 0, [1, 2], ["one", "one"]),
+        # GH 5248 Non-Unique Index
+        ([1, 1, 2], ["one", "two", "one"], "two", 0, [1, 2], ["one", "one"]),
+        ([1, 1, 2], ["one", "two", "one"], ["one"], 0, [1], ["two"]),
+        ([1, 1, 2], ["one", "two", "one"], "one", 0, [1], ["two"]),
+    ],
+)
+def test_drop_unique_and_non_unique_index(
+    data, index, axis, drop_labels, expected_data, expected_index
+):
+
+    s = Series(data=data, index=index)
+    result = s.drop(drop_labels, axis=axis)
+    expected = Series(data=expected_data, index=expected_index)
+    tm.assert_series_equal(result, expected)
+
+
+@pytest.mark.parametrize(
+    "data, index, drop_labels, axis, error_type, error_desc",
+    [
+        # single string/tuple-like
+        (range(3), list("abc"), "bc", 0, KeyError, "not found in axis"),
+        # bad axis
+        (range(3), list("abc"), ("a",), 0, KeyError, "not found in axis"),
+        (range(3), list("abc"), "one", "columns", ValueError, "No axis named columns"),
+    ],
+)
+def test_drop_exception_raised(data, index, drop_labels, axis, error_type, error_desc):
+    ser = Series(data, index=index)
+    with pytest.raises(error_type, match=error_desc):
+        ser.drop(drop_labels, axis=axis)
+
+
+def test_drop_with_ignore_errors():
+    # errors='ignore'
+    s = Series(range(3), index=list("abc"))
+    result = s.drop("bc", errors="ignore")
+    tm.assert_series_equal(result, s)
+    result = s.drop(["a", "d"], errors="ignore")
+    expected = s.iloc[1:]
+    tm.assert_series_equal(result, expected)
+
+    # GH 8522
+    s = Series([2, 3], index=[True, False])
+    assert s.index.is_object()
+    result = s.drop(True)
+    expected = Series([3], index=[False])
+    tm.assert_series_equal(result, expected)
+
+
+@pytest.mark.parametrize("index", [[1, 2, 3], [1, 1, 3]])
+@pytest.mark.parametrize("drop_labels", [[], [1], [3]])
+def test_drop_empty_list(index, drop_labels):
+    # GH 21494
+    expected_index = [i for i in index if i not in drop_labels]
+    series = pd.Series(index=index, dtype=object).drop(drop_labels)
+    expected = pd.Series(index=expected_index, dtype=object)
+    tm.assert_series_equal(series, expected)
+
+
+@pytest.mark.parametrize(
+    "data, index, drop_labels",
+    [
+        (None, [1, 2, 3], [1, 4]),
+        (None, [1, 2, 2], [1, 4]),
+        ([2, 3], [0, 1], [False, True]),
+    ],
+)
+def test_drop_non_empty_list(data, index, drop_labels):
+    # GH 21494 and GH 16877
+    dtype = object if data is None else None
+    ser = pd.Series(data=data, index=index, dtype=dtype)
+    with pytest.raises(KeyError, match="not found in axis"):
+        ser.drop(drop_labels)
