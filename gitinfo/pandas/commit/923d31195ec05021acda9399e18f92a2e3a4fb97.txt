commit 923d31195ec05021acda9399e18f92a2e3a4fb97
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Jan 19 21:24:51 2013 -0500

    ENH: attempt iso8601 date parsing in read_csv and friends. close #2698

diff --git a/RELEASE.rst b/RELEASE.rst
index d38f3bd30..c5c5bbf0c 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -59,6 +59,8 @@ pandas 0.10.1
     64-bit integer (GH2690_)
   - Raise exception in C file parser if integer dtype specified and have NA
     values. (GH2631_)
+  - Attempt to parse ISO8601 format dates when parse_dates=True in read_csv for
+    major performance boost in such cases (GH2698_)
 
 **Bug fixes**
 
@@ -114,6 +116,7 @@ pandas 0.10.1
 .. _GH2668: https://github.com/pydata/pandas/issues/2668
 .. _GH2690: https://github.com/pydata/pandas/issues/2690
 .. _GH2692: https://github.com/pydata/pandas/issues/2692
+.. _GH2698: https://github.com/pydata/pandas/issues/2698
 .. _GH2699: https://github.com/pydata/pandas/issues/2699
 .. _GH2700: https://github.com/pydata/pandas/issues/2700
 
diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index c6a904b93..0447c05cb 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -19,6 +19,7 @@ from pandas.io.date_converters import generic_parser
 from pandas.util.decorators import Appender
 
 import pandas.lib as lib
+import pandas.tslib as tslib
 import pandas._parser as _parser
 from pandas.tseries.period import Period
 import json
@@ -1531,8 +1532,12 @@ class PythonParser(ParserBase):
 def _make_date_converter(date_parser=None, dayfirst=False):
     def converter(*date_cols):
         if date_parser is None:
-            return lib.try_parse_dates(_concat_date_cols(date_cols),
-                                       dayfirst=dayfirst)
+            strs = _concat_date_cols(date_cols)
+            try:
+                return tslib.array_to_datetime(com._ensure_object(strs),
+                                               utc=None, dayfirst=dayfirst)
+            except:
+                return lib.try_parse_dates(strs, dayfirst=dayfirst)
         else:
             try:
                 return date_parser(*date_cols)
@@ -1720,7 +1725,11 @@ def _get_col_names(colspec, columns):
 
 def _concat_date_cols(date_cols):
     if len(date_cols) == 1:
-        return np.array([unicode(x) for x in date_cols[0]], dtype=object)
+        if py3compat.PY3:
+            return np.array([unicode(x) for x in date_cols[0]], dtype=object)
+        else:
+            return np.array([str(x) if not isinstance(x, basestring) else x
+                             for x in date_cols[0]], dtype=object)
 
     # stripped = [map(str.strip, x) for x in date_cols]
     rs = np.array([' '.join([unicode(y) for y in x])
diff --git a/vb_suite/io_bench.py b/vb_suite/io_bench.py
index d421466dd..0fe0dd511 100644
--- a/vb_suite/io_bench.py
+++ b/vb_suite/io_bench.py
@@ -44,3 +44,16 @@ df = DataFrame(np.random.randn(3000, 30))
 """
 frame_to_csv = Benchmark("df.to_csv('__test__.csv')", setup,
                          start_date=datetime(2011, 1, 1))
+
+#----------------------------------------------------------------------
+# parse dates, ISO8601 format
+
+setup = common_setup + """
+rng = date_range('1/1/2000', periods=1000)
+data = '\\n'.join(rng.map(lambda x: x.strftime("%Y-%m-%d %H:%M:%S")))
+"""
+
+stmt = ("read_csv(StringIO(data), header=None, names=['foo'], "
+        "         parse_dates=['foo'])")
+read_parse_dates_iso8601 = Benchmark(stmt, setup,
+                                     start_date=datetime(2012, 3, 1))
