commit ec1eebcd6991afc20975cb4fcd9ad1d6b71d5982
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Dec 2 16:01:54 2011 -0500

    BUG: don't accidentally upcast int->float in .ix scalar indexing, GH #431

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 55aee355b..1cc70411c 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -921,7 +921,9 @@ class DataFrame(NDFrame):
         """
         iloc = self.index.get_loc(index)
         vals = self._getitem_single(col).values
-        return vals[iloc]
+        result = vals[iloc]
+        assert(not lib.is_array(result)) # a little faster than isinstance
+        return result
 
     def put_value(self, index, col, value):
         """
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 532e51e10..ea90e6353 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -25,6 +25,11 @@ class _NDFrameIndexer(object):
 
     def __getitem__(self, key):
         if isinstance(key, tuple):
+            try:
+                return self.obj.get_value(*key)
+            except Exception:
+                pass
+
             return self._getitem_tuple(key)
         else:
             return self._getitem_axis(key, axis=0)
diff --git a/pandas/src/tseries.pyx b/pandas/src/tseries.pyx
index 57ce1f553..e48c9bc1f 100644
--- a/pandas/src/tseries.pyx
+++ b/pandas/src/tseries.pyx
@@ -469,6 +469,8 @@ cdef class cache_readonly(object):
             PyDict_SetItem(cache, self.name, val)
             return val
 
+cpdef is_array(object o):
+    return np.PyArray_Check(o)
 
 include "skiplist.pyx"
 include "groupby.pyx"
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 5db43b25b..5c5ad0359 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -674,6 +674,13 @@ class CheckIndexing(object):
                 self.frame.put_value(idx, col, 1)
                 self.assertEqual(self.frame[col][idx], 1)
 
+    def test_single_element_ix_dont_upcast(self):
+        self.frame['E'] = 1
+        self.assert_(issubclass(self.frame['E'].dtype.type, np.integer))
+
+        result = self.frame.ix[self.frame.index[5], 'E']
+        self.assert_(isinstance(result, np.integer))
+
 _seriesd = tm.getSeriesData()
 _tsd = tm.getTimeSeriesData()
 
@@ -2805,7 +2812,6 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         expected = self.frame.mean(1)
         assert_series_equal(result, expected)
 
-
     def test_applymap(self):
         applied = self.frame.applymap(lambda x: x * 2)
         assert_frame_equal(applied, self.frame * 2)
