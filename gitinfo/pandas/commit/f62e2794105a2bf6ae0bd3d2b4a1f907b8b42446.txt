commit f62e2794105a2bf6ae0bd3d2b4a1f907b8b42446
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Sep 30 01:04:33 2011 -0400

    ENH: Series.sort_index perf enhancement

diff --git a/bench/zoo_bench.R b/bench/zoo_bench.R
index 5599bce6d..179d063e6 100644
--- a/bench/zoo_bench.R
+++ b/bench/zoo_bench.R
@@ -1,4 +1,5 @@
 library(zoo)
+library(xts)
 
 indices = rep(NA, 100000)
 for (i in 1:100000)
@@ -6,8 +7,15 @@ for (i in 1:100000)
 
 timings <- numeric()
 
-x <- zoo(rnorm(100000), indices)
-y <- zoo(rnorm(90000), indices[sample(1:100000, 90000)])
+## x <- zoo(rnorm(100000), indices)
+## y <- zoo(rnorm(90000), indices[sample(1:100000, 90000)])
+
+## indices <- as.POSIXct(1:100000)
+
+indices <- as.POSIXct(Sys.Date()) + 1:100000
+
+x <- xts(rnorm(100000), indices)
+y <- xts(rnorm(90000), indices[sample(1:100000, 90000)])
 
 for (i in 1:10) {
   gc()
diff --git a/pandas/core/index.py b/pandas/core/index.py
index a370f68d3..a227243a2 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -257,15 +257,14 @@ class Index(np.ndarray):
             if len(indexer) > 0:
                 other_diff = other.values.take(indexer)
                 result = list(self) + list(other_diff)
+                # timsort wins
+                try:
+                    result.sort()
+                except Exception:
+                    pass
             else:
                 # contained in
-                result = list(self)
-
-            # timsort wins
-            try:
-                result.sort()
-            except Exception:
-                pass
+                result = sorted(self)
 
         # for subclasses
         return self._wrap_union_result(other, result)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 4aff6931f..b272fabf6 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1057,7 +1057,8 @@ copy : boolean, default False
         if not ascending:
             sort_index = sort_index[::-1]
         new_labels = labels.take(sort_index)
-        return self.reindex(new_labels)
+        new_values = self.values.take(sort_index)
+        return Series(new_values, new_labels)
 
     def argsort(self, axis=0, kind='quicksort', order=None):
         """
