commit aa5d9b52eb76f438ea7e26bb9a600b532802094f
Author: Chang She <changshe@gmail.com>
Date:   Fri Nov 9 16:42:21 2012 -0500

    ENH: add pd.plot_params.use as contextmanager to temporarily set a plot parameter #2205

diff --git a/pandas/tests/test_graphics.py b/pandas/tests/test_graphics.py
index 5d536dcbb..6a41d0770 100644
--- a/pandas/tests/test_graphics.py
+++ b/pandas/tests/test_graphics.py
@@ -255,6 +255,18 @@ class TestDataFramePlots(unittest.TestCase):
         lines = ax.get_lines()
         self.assert_(isinstance(lines[0].get_xdata(), PeriodIndex))
 
+        plt.close('all')
+        #useful if you're plotting a bunch together
+        with pd.plot_params.use('x_compat', True):
+            ax = df.plot()
+            lines = ax.get_lines()
+            self.assert_(not isinstance(lines[0].get_xdata(), PeriodIndex))
+
+        plt.close('all')
+        ax = df.plot()
+        lines = ax.get_lines()
+        self.assert_(isinstance(lines[0].get_xdata(), PeriodIndex))
+
     def _check_data(self, xp, rs):
         xp_lines = xp.get_lines()
         rs_lines = rs.get_lines()
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index 4cfd32d58..f12e2fcdf 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -4,6 +4,7 @@ from itertools import izip
 import datetime
 import warnings
 import re
+from contextlib import contextmanager
 
 import numpy as np
 
@@ -27,6 +28,12 @@ def _get_standard_kind(kind):
 
 
 class _Options(dict):
+    """
+    Stores pandas plotting options.
+    Allows for parameter aliasing so you can just use parameter names that are
+    the same as the plot function parameters, but is stored in a canonical
+    format that makes it easy to breakdown into groups later
+    """
 
     #alias so the names are same as plotting method parameter names
     _ALIASES = {'x_compat' : 'xaxis.compat'}
@@ -56,11 +63,32 @@ class _Options(dict):
         return super(_Options, self).__contains__(key)
 
     def reset(self):
+        """
+        Reset the option store to its initial state
+
+        Returns
+        -------
+        None
+        """
         self.__init__()
 
     def _get_canonical_key(self, key):
         return self._ALIASES.get(key, key)
 
+    @contextmanager
+    def use(self, key, value):
+        """
+        Temporarily set a parameter value using the with statement.
+        Aliasing allowed.
+        """
+        old_value = self[key]
+        try:
+            self[key] = value
+            yield self
+        finally:
+            self[key] = old_value
+
+
 plot_params = _Options()
 
 def scatter_matrix(frame, alpha=0.5, figsize=None, ax=None, grid=False,
