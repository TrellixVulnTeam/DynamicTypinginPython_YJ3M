commit 223d0a5af80807b9fd6bc514b7735feeab32c9c1
Author: jreback <jeff@reback.net>
Date:   Fri Aug 23 12:30:58 2013 -0400

    DOC: indexing.rst edits

diff --git a/doc/source/dsintro.rst b/doc/source/dsintro.rst
index 397a3ab79..182578861 100644
--- a/doc/source/dsintro.rst
+++ b/doc/source/dsintro.rst
@@ -156,6 +156,8 @@ Using the ``get`` method, a missing label will return None or specified default:
 
    s.get('f', np.nan)
 
+See also the :ref:`section on attribute access<indexing.attribute_access>`.
+
 Vectorized operations and label alignment with Series
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
diff --git a/doc/source/indexing.rst b/doc/source/indexing.rst
index 63ad0d438..902a51ab0 100644
--- a/doc/source/indexing.rst
+++ b/doc/source/indexing.rst
@@ -174,6 +174,8 @@ Attribute Access
 
 .. _indexing.df_cols:
 
+.. _indexing.attribute_access:
+
 You may access an index on a ``Series``, column on a ``DataFrame``, and a item on a ``Panel`` directly
 as an attribute:
 
@@ -199,7 +201,13 @@ Setting is allowed as well
 
 .. warning::
 
-   You can use this convience access only if the index element is a valid python string, e.g. ``s.1`` is not allowed.
+   - You can use this access only if the index element is a valid python identifier, e.g. ``s.1`` is not allowed.
+     see `here for an explanation of valid identifiers
+     <http://docs.python.org/2.7/reference/lexical_analysis.html#identifiers>`__.
+
+   - The attribute will not be available if it conflicts with an existing method name, e.g. ``s.min`` is not allowed.
+
+   - The ``Series/Panel`` accesses are available starting in 0.13.0.
 
 If you are using the IPython environment, you may also use tab-completion to
 see these accessable attributes.
diff --git a/doc/source/io.rst b/doc/source/io.rst
index ba68943f1..6faca7508 100644
--- a/doc/source/io.rst
+++ b/doc/source/io.rst
@@ -1123,7 +1123,7 @@ is ``None``. To explicity force ``Series`` parsing, pass ``typ=series``
 - ``numpy`` : direct decoding to numpy arrays. default is False;
   Note that the JSON ordering **MUST** be the same for each term if ``numpy=True``
 - ``precise_float`` : boolean, default ``False``. Set to enable usage of higher precision (strtod) function when decoding string to double values. Default (``False``) is to use fast but less precise builtin functionality
-- ``date_unit`` : string, the timestamp unit to detect if converting dates. Default 
+- ``date_unit`` : string, the timestamp unit to detect if converting dates. Default
   None. By default the timestamp precision will be detected, if this is not desired
   then pass one of 's', 'ms', 'us' or 'ns' to force timestamp precision to
   seconds, milliseconds, microseconds or nanoseconds respectively.
@@ -1201,11 +1201,11 @@ nanoseconds
    dfju
 
    # Let Pandas detect the correct precision
-   dfju = pd.read_json(json)  
+   dfju = pd.read_json(json)
    dfju
 
    # Or specify that all timestamps are in nanoseconds
-   dfju = pd.read_json(json, date_unit='ns')  
+   dfju = pd.read_json(json, date_unit='ns')
    dfju
 
 .. ipython:: python
