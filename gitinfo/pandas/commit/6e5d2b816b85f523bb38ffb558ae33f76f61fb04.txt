commit 6e5d2b816b85f523bb38ffb558ae33f76f61fb04
Author: Chang She <changshe@gmail.com>
Date:   Tue Jul 24 17:50:38 2012 -0400

    BUG: verify inferred B freq #1668 #1669

diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index 8c5f718ec..47c2d414c 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -828,8 +828,13 @@ class LinePlot(MPLPlot):
     def _index_freq(self):
         from pandas.core.frame import DataFrame
         if isinstance(self.data, (Series, DataFrame)):
-            freq = (getattr(self.data.index, 'freq', None)
-                    or getattr(self.data.index, 'inferred_freq', None))
+            freq = getattr(self.data.index, 'freq', None)
+            if freq is None:
+                freq = getattr(self.data.index, 'inferred_freq', None)
+                if freq == 'B':
+                    weekdays = np.unique(self.data.index.dayofweek)
+                    if (5 in weekdays) or (6 in weekdays):
+                        freq = None
             return freq
 
     def _is_dynamic_freq(self, freq):
diff --git a/pandas/tseries/tests/test_plotting.py b/pandas/tseries/tests/test_plotting.py
index 9db99c8f2..de836fb36 100644
--- a/pandas/tseries/tests/test_plotting.py
+++ b/pandas/tseries/tests/test_plotting.py
@@ -136,6 +136,18 @@ class TestTSPlot(unittest.TestCase):
             ser = ser[[0, 3, 5, 6]]
             _check_plot_works(ser.plot)
 
+    @slow
+    def test_fake_inferred_business(self):
+        import matplotlib.pyplot as plt
+        fig = plt.gcf()
+        plt.clf()
+        fig.add_subplot(111)
+        rng = date_range('2001-1-1', '2001-1-10')
+        ts = Series(range(len(rng)), rng)
+        ts = ts[:3].append(ts[5:])
+        ax = ts.plot()
+        self.assert_(not hasattr(ax, 'freq'))
+
     @slow
     def test_plot_offset_freq(self):
         ser = tm.makeTimeSeries()
diff --git a/vb_suite/timeseries.py b/vb_suite/timeseries.py
index 331db88a8..0d4ab5552 100644
--- a/vb_suite/timeseries.py
+++ b/vb_suite/timeseries.py
@@ -144,3 +144,15 @@ strings = [x.strftime('%Y-%m-%d %H:%M:%S') for x in rng]
 timeseries_to_datetime_iso8601 = \
     Benchmark('to_datetime(strings)', setup,
               start_date=datetime(2012, 7, 11))
+
+# ---- infer_freq
+# infer_freq
+
+setup = common_setup + """
+from pandas.tseries.frequencies import infer_freq
+rng = date_range('1/1/1700', freq='D', periods=100000)
+a = rng[:50000].append(rng[50002:])
+"""
+
+timeseries_infer_freq = \
+    Benchmark('infer_freq(a)', setup, start_date=datetime(2012, 7, 1))
