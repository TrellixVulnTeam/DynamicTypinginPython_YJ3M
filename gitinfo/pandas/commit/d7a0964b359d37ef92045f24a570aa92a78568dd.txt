commit d7a0964b359d37ef92045f24a570aa92a78568dd
Author: Gioia Ballin <gioia.ballin@gmail.com>
Date:   Sat Feb 9 16:54:09 2019 +0000

    BUG: Fix regression in DataFrame.apply causing RecursionError (#25230)
    
    * BUG: Fix regression in DataFrame.apply causing RecursionError
    
    * Add feedback from PR
    
    * Add feedback after further code review
    
    * Add feedback after further code review 2

diff --git a/doc/source/whatsnew/v0.24.2.rst b/doc/source/whatsnew/v0.24.2.rst
index 30338f6fb..c95ed818c 100644
--- a/doc/source/whatsnew/v0.24.2.rst
+++ b/doc/source/whatsnew/v0.24.2.rst
@@ -21,8 +21,8 @@ Fixed Regressions
 ^^^^^^^^^^^^^^^^^
 
 - Fixed regression in :meth:`DataFrame.all` and :meth:`DataFrame.any` where ``bool_only=True`` was ignored (:issue:`25101`)
-
 - Fixed issue in ``DataFrame`` construction with passing a mixed list of mixed types could segfault. (:issue:`25075`)
+- Fixed regression in :meth:`DataFrame.apply` causing ``RecursionError`` when ``dict``-like classes were passed as argument. (:issue:`25196`)
 
 .. _whatsnew_0242.enhancements:
 
diff --git a/pandas/core/dtypes/inference.py b/pandas/core/dtypes/inference.py
index 92972c83c..1a02623fa 100644
--- a/pandas/core/dtypes/inference.py
+++ b/pandas/core/dtypes/inference.py
@@ -397,12 +397,15 @@ def is_dict_like(obj):
     True
     >>> is_dict_like([1, 2, 3])
     False
+    >>> is_dict_like(dict)
+    False
+    >>> is_dict_like(dict())
+    True
     """
-    for attr in ("__getitem__", "keys", "__contains__"):
-        if not hasattr(obj, attr):
-            return False
-
-    return True
+    dict_like_attrs = ("__getitem__", "keys", "__contains__")
+    return (all(hasattr(obj, attr) for attr in dict_like_attrs)
+            # [GH 25196] exclude classes
+            and not isinstance(obj, type))
 
 
 def is_named_tuple(obj):
diff --git a/pandas/tests/dtypes/test_inference.py b/pandas/tests/dtypes/test_inference.py
index 89662b70a..49a66efaf 100644
--- a/pandas/tests/dtypes/test_inference.py
+++ b/pandas/tests/dtypes/test_inference.py
@@ -159,13 +159,15 @@ def test_is_nested_list_like_fails(obj):
 
 
 @pytest.mark.parametrize(
-    "ll", [{}, {'A': 1}, Series([1])])
+    "ll", [{}, {'A': 1}, Series([1]), collections.defaultdict()])
 def test_is_dict_like_passes(ll):
     assert inference.is_dict_like(ll)
 
 
-@pytest.mark.parametrize(
-    "ll", ['1', 1, [1, 2], (1, 2), range(2), Index([1])])
+@pytest.mark.parametrize("ll", [
+    '1', 1, [1, 2], (1, 2), range(2), Index([1]),
+    dict, collections.defaultdict, Series
+])
 def test_is_dict_like_fails(ll):
     assert not inference.is_dict_like(ll)
 
diff --git a/pandas/tests/frame/test_apply.py b/pandas/tests/frame/test_apply.py
index ade527a16..a4cd1aa3b 100644
--- a/pandas/tests/frame/test_apply.py
+++ b/pandas/tests/frame/test_apply.py
@@ -318,6 +318,13 @@ class TestDataFrameApply():
         result = float_frame.apply(np.mean, axis=1)
         assert_series_equal(result, expected)
 
+    def test_apply_reduce_rows_to_dict(self):
+        # GH 25196
+        data = pd.DataFrame([[1, 2], [3, 4]])
+        expected = pd.Series([{0: 1, 1: 3}, {0: 2, 1: 4}])
+        result = data.apply(dict)
+        assert_series_equal(result, expected)
+
     def test_apply_differently_indexed(self):
         df = DataFrame(np.random.randn(20, 10))
 
