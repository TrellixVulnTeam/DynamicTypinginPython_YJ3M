commit 106fe994cb0eb2701db1164c79270fb87c140df0
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Feb 6 20:57:03 2012 -0500

    ENH: rewrite/refactor of string formatting esp float formatting re: #726

diff --git a/pandas/core/format.py b/pandas/core/format.py
index 393a46c4d..3165b1c17 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -56,16 +56,12 @@ class SeriesFormatter(object):
         self.buf = buf if buf is not None else StringIO()
         self.name = name
         self.na_rep = na_rep
-        self.float_format = float_format
         self.length = length
         self.header = header
 
-        def formatter(x, col_width=None):
-            return _format(x, self.series.dtype,
-                           na_rep=self.na_rep,
-                           float_format=self.float_format,
-                           col_width=col_width)
-        self.formatter = formatter
+        if float_format is None:
+            float_format = print_config.float_format
+        self.float_format = float_format
 
     def _get_footer(self):
         footer = ''
@@ -91,31 +87,9 @@ class SeriesFormatter(object):
         return fmt_index, have_header
 
     def _get_formatted_values(self):
-        series = self.series
-        vals = series.values
-
-        if self.float_format is None:
-            float_format = print_config.float_format
-            if float_format is None:
-                float_format = _float_format_default
-
-        # floating point handling
-        if series.dtype == 'O':
-            is_float = (series.map(com.is_float) & series.notnull()).values
-            leading_space = is_float.any()
-
-            fmt_values = []
-            for i, v in enumerate(vals):
-                if not is_float[i] and leading_space:
-                    fmt_values.append(' %s' % self.formatter(v))
-                elif is_float[i]:
-                    fmt_values.append(float_format(v))
-                else:
-                    fmt_values.append(' %s' % self.formatter(v))
-        else:
-            fmt_values = _format_fixed_width(self.series.values,
-                                             self.formatter)
-        return fmt_values
+        return format_array(self.series.values, None,
+                            float_format=self.float_format,
+                            na_rep=self.na_rep)
 
     def to_string(self):
         series = self.series
@@ -141,25 +115,6 @@ class SeriesFormatter(object):
         return '\n'.join(result)
 
 
-def format_array(values, formatter, float_format):
-    # floating point handling
-    if values.dtype == 'O':
-        is_float = (lib.map_infer(values, com.is_float) & notnull(values))
-        leading_space = is_float.any()
-
-        fmt_values = []
-        for i, v in enumerate(values):
-            if not is_float[i] and leading_space:
-                fmt_values.append(' %s' % formatter(v))
-            elif is_float[i]:
-                fmt_values.append(float_format(v))
-            else:
-                fmt_values.append(' %s' % formatter(v))
-    else:
-        fmt_values = _format_fixed_width(values, formatter)
-    return fmt_values
-
-
 class DataFrameFormatter(object):
     """
     Render a DataFrame
@@ -180,7 +135,7 @@ class DataFrameFormatter(object):
         self.show_index_names = index_names
         self.sparsify = sparsify
         self.float_format = float_format
-        self.formatters = formatters
+        self.formatters = formatters if formatters is not None else {}
         self.na_rep = na_rep
         self.col_space = col_space
         self.header = header
@@ -228,9 +183,13 @@ class DataFrameFormatter(object):
                         cheader = [x.ljust(max_len) for x in cheader]
                     else:
                         cheader = [x.rjust(max_len) for x in cheader]
-                    stringified.append(cheader + fmt_values)
+                    fmt_values = cheader + fmt_values
+                    stringified.append(_make_fixed_width(fmt_values,
+                                                         self.justify))
                 else:
-                    stringified = [self._format_col(c) for c in self.columns]
+                    stringified = [_make_fixed_width(self._format_col(c),
+                                                     self.justify)
+                                   for c in self.columns]
 
             if self.index:
                 to_write.append(adjoin(1, str_index, *stringified))
@@ -252,34 +211,12 @@ class DataFrameFormatter(object):
 
         self.buf.writelines(to_write)
 
-    def _get_col_formatter(self, dtype):
-        def formatter(x, col_width=None):
-            return _format(x, dtype, space=self.col_space,
-                           na_rep=self.na_rep,
-                           float_format=self.float_format,
-                           col_width=col_width)
-        return formatter
-
-    def _format_col(self, col, i=None):
-        if self.formatters is None:
-            self.formatters = {}
-
-        if col in self.formatters:
-            formatter = self.formatters[col]
-
-            if i is None:
-                return [formatter(x) for x in self.frame[col]]
-            else:
-                return formatter(self.frame[col][i])
-        else:
-            dtype = self.frame[col].dtype
-            formatter = self._get_col_formatter(dtype)
-
-            if i is not None:
-                return formatter(self.frame[col][i])
-            else:
-                return _format_fixed_width(self.frame[col],
-                                           formatter)
+    def _format_col(self, col):
+        formatter = self.formatters.get(col)
+        return format_array(self.frame[col].values, formatter,
+                            float_format=self.float_format,
+                            na_rep=self.na_rep,
+                            space=self.col_space)
 
     def to_html(self):
         """
@@ -361,6 +298,10 @@ class DataFrameFormatter(object):
                 else:
                     return x
 
+            fmt_values = {}
+            for col in frame.columns:
+                fmt_values[col] = self._format_col(col)
+
             # write values
             for i in range(len(frame)):
                 row = []
@@ -368,8 +309,8 @@ class DataFrameFormatter(object):
                     row.extend(_maybe_bold_row(frame.index[i]))
                 else:
                     row.append(_maybe_bold_row(frame.index[i]))
-                for column in frame.columns:
-                    row.append(self._format_col(column, i))
+                for col in frame.columns:
+                    row.append(fmt_values[col][i])
                 write_tr(buf, row, indent, indent_delta)
             indent -= indent_delta
             write(buf, '</tbody>', indent)
@@ -380,10 +321,6 @@ class DataFrameFormatter(object):
     def _get_formatted_column_labels(self):
         from pandas.core.index import _sparsify
 
-        formatters = self.formatters
-        if formatters is None:
-            formatters = {}
-
         def is_numeric_dtype(dtype):
             return issubclass(dtype.type, np.number)
 
@@ -393,7 +330,7 @@ class DataFrameFormatter(object):
             dtypes = self.frame.dtypes.values
             need_leadsp = dict(zip(fmt_columns, map(is_numeric_dtype, dtypes)))
             str_columns = zip(*[[u' %s' % y
-                                if y not in formatters and need_leadsp[x]
+                                if y not in self.formatters and need_leadsp[x]
                                 else y for y in x]
                                for x in fmt_columns])
             if self.sparsify:
@@ -405,7 +342,7 @@ class DataFrameFormatter(object):
             dtypes = self.frame.dtypes
             need_leadsp = dict(zip(fmt_columns, map(is_numeric_dtype, dtypes)))
             str_columns = [[u' %s' % x
-                            if col not in formatters and need_leadsp[x]
+                            if col not in self.formatters and need_leadsp[x]
                             else x]
                            for col, x in zip(self.columns, fmt_columns)]
 
@@ -459,11 +396,147 @@ class DataFrameFormatter(object):
             names.append('' if columns.name is None else columns.name)
         return names
 
+#----------------------------------------------------------------------
+# Array formatters
+
+
+def format_array(values, formatter, float_format=None, na_rep='NaN',
+                 digits=None, space=None):
+    if com.is_float_dtype(values.dtype):
+        if formatter is None:
+            formatter = float_format
+        fmt_klass = FloatArrayFormatter
+    elif com.is_integer_dtype(values.dtype):
+        fmt_klass = IntArrayFormatter
+    else:
+        fmt_klass = GenericArrayFormatter
+
+    if space is None:
+        space = print_config.column_space
+
+    if digits is None:
+        digits = print_config.precision
+
+    fmt_obj = fmt_klass(values, digits, na_rep=na_rep,
+                        formatter=formatter, space=space)
+
+    return fmt_obj.get_result()
+
+
+class GenericArrayFormatter(object):
+
+    def __init__(self, values, digits=7, formatter=None, na_rep='NaN',
+                 space=12, float_format=None, justify='right'):
+        self.values = values
+        self.digits = digits
+        self.na_rep = na_rep
+        self.space = space
+        self.formatter = formatter
+        self.float_format = float_format
+        self.justify = justify
+
+    def get_result(self):
+        if self.float_format is None:
+            float_format = print_config.float_format
+            if float_format is None:
+                fmt_str = '%% .%dg' % print_config.precision
+                float_format = lambda x: fmt_str % x
+
+        formatter = _stringify if self.formatter is None else self.formatter
+
+        def _format(x):
+            if self.na_rep is not None and lib.checknull(x):
+                if x is None:
+                    return 'None'
+                return self.na_rep
+            else:
+                # object dtype
+                return '%s' % formatter(x)
+
+        vals = self.values
+
+        is_float = lib.map_infer(vals, com.is_float) & notnull(vals)
+        leading_space = is_float.any()
+
+        fmt_values = []
+        for i, v in enumerate(vals):
+            if not is_float[i] and leading_space:
+                fmt_values.append(' %s' % _format(v))
+            elif is_float[i]:
+                fmt_values.append(float_format(v))
+            else:
+                fmt_values.append(' %s' % _format(v))
+
+        return _make_fixed_width(fmt_values, self.justify)
+
+class FloatArrayFormatter(GenericArrayFormatter):
+    """
+
+    """
+
+    def __init__(self, *args, **kwargs):
+        GenericArrayFormatter.__init__(self, *args, **kwargs)
+
+        if self.float_format is not None and self.formatter is None:
+            self.formatter = self.float_format
+
+    def _format_with(self, fmt_str):
+        fmt_values = [fmt_str % x if notnull(x) else self.na_rep
+                      for x in self.values]
+        return _trim_zeros(fmt_values)
+
+    def get_result(self):
+        if self.formatter is not None:
+            fmt_values = [self.formatter(x) for x in self.values]
+        else:
+            fmt_str = '%% .%df' % (self.digits - 1)
+            fmt_values = self._format_with(fmt_str)
+
+            maxlen = max(len(x) for x in fmt_values)
+            too_long = maxlen > self.digits + 5
+
+            # this is pretty arbitrary for now
+            has_large_values = (np.abs(self.values) > 1e8).any()
+
+            if too_long and has_large_values:
+                fmt_str = '%% .%de' % (self.digits - 1)
+                fmt_values = self._format_with(fmt_str)
+
+        return _make_fixed_width(fmt_values)
+
+
+class IntArrayFormatter(GenericArrayFormatter):
+
+
+    def get_result(self):
+        fmt_values = ['% d' % x for x in self.values]
+        return _make_fixed_width(fmt_values, self.justify)
+
+
+def _make_fixed_width(strings, justify='right'):
+    max_len = max(len(x) for x in strings)
+    if justify == 'left':
+        justfunc = lambda self, x: self.ljust(x)
+    else:
+        justfunc = lambda self, x: self.rjust(x)
+
+    def just(x):
+        return justfunc(x[:max_len], max_len)
+
+    return [just(x) for x in strings]
+
+def _trim_zeros(str_floats):
+    """
+    Trims zeros and decimal points
+    """
+    # TODO: what if exponential?
+    trimmed = str_floats
+    while all([x[-1] == '0' for x in trimmed]):
+        trimmed = [x[:-1] for x in trimmed]
+
+    # trim decimal points
+    return [x[:-1] if x[-1] == '.' else x for x in trimmed]
 
-def _format_fixed_width(values, formatter):
-    formatted = [formatter(x) for x in values]
-    max_len = max(len(x) for x in formatted)
-    return [formatter(x, col_width=max_len) for x in values]
 
 def single_column_table(column):
     table = '<table><tbody>'
@@ -490,8 +563,9 @@ def _has_names(index):
 #-------------------------------------------------------------------------------
 # Global formatting options
 
-def set_printoptions(precision=None, column_space=None, max_rows=None,
-                     max_columns=None, colheader_justify='right'):
+def set_printoptions(precision=None, digits=None, column_space=None,
+                     max_rows=None, max_columns=None,
+                     colheader_justify='right'):
     """
     Alter default behavior of DataFrame.toString
 
@@ -507,6 +581,8 @@ def set_printoptions(precision=None, column_space=None, max_rows=None,
         out how big the terminal is and will not display more rows or/and
         columns that can fit on it.
     """
+    if digits is not None:
+        print_config.digits = digits
     if precision is not None:
         print_config.precision = precision
     if column_space is not None:
@@ -629,100 +705,14 @@ def set_eng_float_format(precision=None, accuracy=3, use_eng_prefix=False):
     print_config.float_format = EngFormatter(accuracy, use_eng_prefix)
     print_config.column_space = max(12, accuracy + 9)
 
-def _float_format_default(v, width=None):
+
+class _GlobalPrintConfig(object):
     """
-    Take a float and its formatted representation and if it needs extra space
-    to fit the width, reformat it to that width.
+    Holds the console formatting settings for DataFrame and friends
     """
 
-    fmt_str   = '%% .%dg' % print_config.precision
-    formatted = fmt_str % v
-
-    if width is None:
-        return formatted
-
-    extra_spc = width - len(formatted)
-
-    if extra_spc <= 0:
-        return formatted
-
-    if 'e' in formatted:
-        # we have something like 1e13 or 1.23e13
-        base, exp = formatted.split('e')
-
-        if '.' in base:
-            # expand fraction by extra space
-            whole, frac = base.split('.')
-            fmt_str = '%%.%df' % (len(frac) + extra_spc)
-            frac = fmt_str % float("0.%s" % frac)
-            base = whole + frac[1:]
-        else:
-            if extra_spc > 1:
-                # enough room for fraction
-                fmt_str = '%% .%df' % (extra_spc - 1)
-                base = fmt_str % float(base)
-            else:
-                # enough room for decimal point only
-                base += '.'
-
-        return base + 'e' + exp
-    else:
-        # we have something like 123 or 123.456
-        if '.' in formatted:
-            # expand fraction by extra space
-            wholel, fracl = map(len, formatted.split("."))
-            fmt_str = '%% .%df' % (fracl + extra_spc)
-        else:
-            if extra_spc > 1:
-                # enough room for fraction
-                fmt_str = '%% .%df' % (extra_spc - 1)
-            else:
-                # enough room for decimal point only
-                fmt_str = '% d.'
-
-        return fmt_str % v
-
-def _format(s, dtype, space=None, na_rep=None, float_format=None,
-            col_width=None):
-    def _just_help(x):
-        if space is None:
-            return x
-        return x[:space].ljust(space)
-
-    def _make_float_format(x):
-        if na_rep is not None and isnull(x):
-            if np.isnan(x):
-                x = ' ' + na_rep
-            return _just_help('%s' % x)
-
-        if float_format:
-            formatted = float_format(x)
-        elif print_config.float_format:
-            formatted = print_config.float_format(x)
-        else:
-            formatted = _float_format_default(x, col_width)
-
-        return _just_help(formatted)
-
-    def _make_int_format(x):
-        return _just_help('% d' % x)
-
-    if com.is_float_dtype(dtype):
-        return _make_float_format(s)
-    elif com.is_integer_dtype(dtype):
-        return _make_int_format(s)
-    else:
-        if na_rep is not None and lib.checknull(s):
-            if s is None:
-                return 'None'
-            return na_rep
-        else:
-            # object dtype
-            return _just_help('%s' % _stringify(s))
-
-class _GlobalPrintConfig(object):
     def __init__(self):
-        self.precision = 4
+        self.precision = self.digits = 7
         self.float_format = None
         self.column_space = 12
         self.max_rows = 200
@@ -733,3 +723,18 @@ class _GlobalPrintConfig(object):
         self.__init__()
 
 print_config = _GlobalPrintConfig()
+
+
+if __name__ == '__main__':
+    arr = np.array([746.03, 0.00, 5620.00, 1592.36])
+    # arr = np.array([11111111.1, 1.55])
+    # arr = [314200.0034, 1.4125678]
+    arr = np.array([  327763.3119,   345040.9076,   364460.9915,   398226.8688,
+                      383800.5172,   433442.9262,   539415.0568,   568590.4108,
+                      599502.4276,   620921.8593,   620898.5294,   552427.1093,
+                      555221.2193,   519639.7059,   388175.7   ,   379199.5854,
+                      614898.25  ,   504833.3333,   560600.    ,   941214.2857,
+                      1134250.    ,  1219550.    ,   855736.85  ,  1042615.4286,
+                      722621.3043,   698167.1818,   803750.    ])
+    fmt = FloatArrayFormatter(arr, digits=7)
+    print fmt.get_result()
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 59d348315..820802718 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -949,7 +949,7 @@ class DataFrame(NDFrame):
     def to_string(self, buf=None, columns=None, col_space=None, colSpace=None,
                   header=True, index=True, na_rep='NaN', formatters=None,
                   float_format=None, sparsify=True, nanRep=None,
-                  index_names=True, justify='left', force_unicode=False):
+                  index_names=True, justify=None, force_unicode=False):
         """
         Render a DataFrame to a console-friendly tabular output.
         """
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index 7c6c3c6b2..a8ecf6c5d 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -86,7 +86,10 @@ class TestDataFrameFormatting(unittest.TestCase):
     def test_to_string_with_formatters_unicode(self):
         df = DataFrame({u'c/\u03c3':[1,2,3]})
         result = df.to_string(formatters={u'c/\u03c3': lambda x: '%s' % x})
-        self.assertEqual(result, u'  c/\u03c3\n0 1  \n1 2  \n2 3  ')
+        self.assertEqual(result, (u'  c/\u03c3\n'
+                                   '0   1\n'
+                                   '1   2\n'
+                                   '2   3'))
 
     def test_to_string_buffer_all_unicode(self):
         buf = StringIO()
@@ -189,39 +192,47 @@ class TestDataFrameFormatting(unittest.TestCase):
         # Python 2.5 just wants me to be sad. And debian 32-bit
         #sys.version_info[0] == 2 and sys.version_info[1] < 6:
         if '%.4g' % 1.7e8 == '1.7e+008':
-            expected = ('   x        \n0  0.0000000\n1  0.2500000\n'
-                        '2  3456.0000\n3  1.20e+046\n4  1.64e+006\n'
-                        '5  1.70e+008\n6  1.2534560\n7  3.1415927\n'
-                        '8 -1.00e+006')
+            expected = ('              x\n0  0.00000e+000\n1  2.50000e-001\n'
+                        '2  3.45600e+003\n3  1.20000e+046\n4  1.64000e+006\n'
+                        '5  1.70000e+008\n6  1.25346e+000\n7  3.14159e+000\n'
+                        '8 -1.00000e+006')
         else:
-            expected = ('   x       \n0  0.000000\n1  0.250000\n'
-                        '2  3456.000\n3  1.20e+46\n4  1.64e+06\n'
-                        '5  1.70e+08\n6  1.253456\n7  3.141593\n'
-                        '8 -1.00e+06')
+            expected = ('             x\n0  0.00000e+00\n1  2.50000e-01\n'
+                        '2  3.45600e+03\n3  1.20000e+46\n4  1.64000e+06\n'
+                        '5  1.70000e+08\n6  1.25346e+00\n7  3.14159e+00\n'
+                        '8 -1.00000e+06')
         assert(df_s == expected)
 
         df = DataFrame({'x' : [3234, 0.253]})
         df_s = df.to_string()
 
-        expected = '   x    \n0  3234.\n1  0.253'
+        expected = ('          x\n'
+                    '0  3234.000\n'
+                    '1     0.253')
         assert(df_s == expected)
 
         fmt.reset_printoptions()
-        self.assertEqual(fmt.print_config.precision, 4)
+        self.assertEqual(fmt.print_config.precision, 7)
 
         df = DataFrame({'x': [1e9, 0.2512]})
         df_s = df.to_string()
         if sys.version_info[0] == 2 and sys.version_info[1] < 6:
-            expected = '   x     \n0  1e+009\n1  0.2512'
+            expected = ('               x\n'
+                        '0  1.000000e+009\n'
+                        '1  2.512000e-001')
         else:
-            expected = '   x     \n0  1.e+09\n1  0.2512'
+            expected = ('              x\n'
+                        '0  1.000000e+09\n'
+                        '1  2.512000e-01')
         assert(df_s == expected)
 
     def test_to_string_right_justify_cols(self):
         fmt.reset_printoptions()
         df = DataFrame({'x' : [3234, 0.253]})
         df_s = df.to_string(justify='right')
-        expected = '       x\n0  3234.\n1  0.253'
+        expected = ('          x\n'
+                    '0  3234.000\n'
+                    '1     0.253')
         assert(df_s == expected)
 
     def test_to_string_format_na(self):
@@ -230,12 +241,12 @@ class TestDataFrameFormatting(unittest.TestCase):
                         'B' : [np.nan, 'foo', 'foooo', 'fooooo', 'bar']})
         result = df.to_string()
 
-        expected = ('   A     B     \n'
-                    '0  NaN   NaN   \n'
-                    '1 -1.000 foo   \n'
-                    '2 -2.123 foooo \n'
-                    '3  3.000 fooooo\n'
-                    '4  4.000 bar   ')
+        expected = ('          A       B\n'
+                    '0       NaN     NaN\n'
+                    '1 -1.000000     foo\n'
+                    '2 -2.123400   foooo\n'
+                    '3  3.000000  fooooo\n'
+                    '4  4.000000     bar')
         self.assertEqual(result, expected)
 
     def test_to_html(self):
@@ -272,6 +283,84 @@ class TestDataFrameFormatting(unittest.TestCase):
         assert('<strong>' not in ashtml)
 
 
+class TestSeriesFormatting(unittest.TestCase):
+
+    def setUp(self):
+        self.ts = tm.makeTimeSeries()
+
+    def test_repr_unicode(self):
+        s = Series([u'\u03c3'] * 10)
+        repr(s)
+
+    def test_to_string(self):
+        from cStringIO import StringIO
+        buf = StringIO()
+
+        s = self.ts.to_string()
+
+        retval = self.ts.to_string(buf=buf)
+        self.assert_(retval is None)
+        self.assertEqual(buf.getvalue().strip(), s)
+
+        # pass float_format
+        format = '%.4f'.__mod__
+        result = self.ts.to_string(float_format=format)
+        result = [x.split()[1] for x in result.split('\n')]
+        expected = [format(x) for x in self.ts]
+        self.assertEqual(result, expected)
+
+        # empty string
+        result = self.ts[:0].to_string()
+        self.assertEqual(result, '')
+
+        result = self.ts[:0].to_string(length=0)
+        self.assertEqual(result, '')
+
+        # name and length
+        cp = self.ts.copy()
+        cp.name = 'foo'
+        result = cp.to_string(length=True, name=True)
+        last_line = result.split('\n')[-1].strip()
+        self.assertEqual(last_line, "Name: foo, Length: %d" % len(cp))
+
+    def test_to_string_mixed(self):
+        s = Series(['foo', np.nan, -1.23, 4.56])
+        result = s.to_string()
+        expected = ('0     foo\n'
+                    '1     NaN\n'
+                    '2   -1.23\n'
+                    '3    4.56')
+        self.assertEqual(result, expected)
+
+        # but don't count NAs as floats
+        s = Series(['foo', np.nan, 'bar', 'baz'])
+        result = s.to_string()
+        expected = ('0    foo\n'
+                    '1    NaN\n'
+                    '2    bar\n'
+                    '3    baz')
+        self.assertEqual(result, expected)
+
+        s = Series(['foo', 5, 'bar', 'baz'])
+        result = s.to_string()
+        expected = ('0    foo\n'
+                    '1      5\n'
+                    '2    bar\n'
+                    '3    baz')
+        self.assertEqual(result, expected)
+
+    def test_to_string_float_na_spacing(self):
+        s = Series([0., 1.5678, 2., -3., 4.])
+        s[::2] = np.nan
+
+        result = s.to_string()
+        expected = ('0         NaN\n'
+                    '1    1.567800\n'
+                    '2         NaN\n'
+                    '3   -3.000000\n'
+                    '4         NaN')
+        self.assertEqual(result, expected)
+
 class TestEngFormatter(unittest.TestCase):
 
      def compare(self, formatter, input, output):
@@ -436,6 +525,16 @@ class TestEngFormatter(unittest.TestCase):
          self.compare_all(formatter, in_out)
 
 
+# class TestFloatArrayFormatter(unittest.TestCase):
+
+#     def test_trim_zeros(self):
+#         values = np.array([1.5, 2.5, 3.5])
+#         fmt = FloatArrayFormatter(values)
+
+#         result = fmt.get_result()
+#         pass
+
+
 if __name__ == '__main__':
     import nose
     nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index b623ad878..ef2081bc2 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -777,79 +777,6 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
                         name=('foo', 'bar', 'baz'))
         repr(biggie)
 
-    def test_repr_unicode(self):
-        s = Series([u'\u03c3'] * 10)
-        repr(s)
-
-    def test_to_string(self):
-        from cStringIO import StringIO
-        buf = StringIO()
-
-        s = self.ts.to_string()
-
-        retval = self.ts.to_string(buf=buf)
-        self.assert_(retval is None)
-        self.assertEqual(buf.getvalue().strip(), s)
-
-        # pass float_format
-        format = '%.4f'.__mod__
-        result = self.ts.to_string(float_format=format)
-        result = [x.split()[1] for x in result.split('\n')]
-        expected = [format(x) for x in self.ts]
-        self.assertEqual(result, expected)
-
-        # empty string
-        result = self.ts[:0].to_string()
-        self.assertEqual(result, '')
-
-        result = self.ts[:0].to_string(length=0)
-        self.assertEqual(result, '')
-
-        # name and length
-        cp = self.ts.copy()
-        cp.name = 'foo'
-        result = cp.to_string(length=True, name=True)
-        last_line = result.split('\n')[-1].strip()
-        self.assertEqual(last_line, "Name: foo, Length: %d" % len(cp))
-
-    def test_to_string_mixed(self):
-        s = Series(['foo', np.nan, -1.23, 4.56])
-        result = s.to_string()
-        expected = ('0    foo\n'
-                    '1    NaN\n'
-                    '2   -1.23\n'
-                    '3    4.56')
-        self.assertEqual(result, expected)
-
-        # but don't count NAs as floats
-        s = Series(['foo', np.nan, 'bar', 'baz'])
-        result = s.to_string()
-        expected = ('0    foo\n'
-                    '1    NaN\n'
-                    '2    bar\n'
-                    '3    baz')
-        self.assertEqual(result, expected)
-
-        s = Series(['foo', 5, 'bar', 'baz'])
-        result = s.to_string()
-        expected = ('0    foo\n'
-                    '1    5\n'
-                    '2    bar\n'
-                    '3    baz')
-        self.assertEqual(result, expected)
-
-    def test_to_string_float_na_spacing(self):
-        s = Series([0., 1.5678, 2., -3., 4.])
-        s[::2] = np.nan
-
-        result = s.to_string()
-        expected = ('0    NaN\n'
-                    '1    1.568\n'
-                    '2    NaN\n'
-                    '3   -3.000\n'
-                    '4    NaN')
-        self.assertEqual(result, expected)
-
     def test_iter(self):
         for i, val in enumerate(self.series):
             self.assertEqual(val, self.series[i])
