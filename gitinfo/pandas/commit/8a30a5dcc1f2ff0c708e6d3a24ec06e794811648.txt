commit 8a30a5dcc1f2ff0c708e6d3a24ec06e794811648
Author: jreback <jeff@reback.net>
Date:   Mon Dec 3 12:58:01 2012 -0500

    add tests for align in comparison ops (we don't have align yet, so raise!)

diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index cf88a1be0..310ffdf1d 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -13,6 +13,7 @@ from pandas.core.index import (Index, MultiIndex, _ensure_index,
                                _get_combined_index)
 from pandas.core.indexing import _NDFrameIndexer, _maybe_droplevels
 from pandas.core.internals import BlockManager, make_block, form_blocks
+from pandas.core.series import Series
 from pandas.core.frame import DataFrame
 from pandas.core.generic import NDFrame
 from pandas.util import py3compat
@@ -152,6 +153,8 @@ def _comp_method(func, name):
     def f(self, other):
         if isinstance(other, self._constructor):
             return self._compare_constructor(other, func)
+        elif isinstance(other, (self._constructor_sliced, DataFrame, Series)):
+            raise Exception("input needs alignment for this object [%s]" % self._constructor)
         else:
             return self._combine_const(other, na_op)
 
@@ -443,6 +446,10 @@ class Panel(NDFrame):
         return all([ getattr(self,a).equals(getattr(other,a)) for a in self._AXIS_ORDERS ])
   
     def _compare_constructor(self, other, func):
+        if not self._indexed_same(other):
+            raise Exception('Can only compare identically-labeled '
+                            'same type objects')
+
         new_data = {}
         for col in getattr(self,self._info_axis):
             new_data[col] = func(self[col], other[col])
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 653d9599b..cb4cc9eef 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -664,11 +664,23 @@ class CheckIndexing(object):
         p1 = tm.makePanel()
         p2 = tm.makePanel()
 
+        tp = p1.reindex(items = p1.items + ['foo'])
+        df = p1[p1.items[0]]
+
         def test_comp(func):
+
+            # versus same index
             result = func(p1, p2)
             self.assert_(np.array_equal(result.values,
                                         func(p1.values, p2.values)))
 
+            # versus non-indexed same objs
+            self.assertRaises(Exception, func, p1, tp)
+
+            # versus different objs
+            self.assertRaises(Exception, func, p1, df)
+
+            # versus scalar
             result3 = func(self.panel, 0)
             self.assert_(np.array_equal(result3.values,
                                         func(self.panel.values, 0)))
