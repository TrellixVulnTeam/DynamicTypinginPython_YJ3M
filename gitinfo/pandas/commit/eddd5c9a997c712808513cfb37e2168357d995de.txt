commit eddd5c9a997c712808513cfb37e2168357d995de
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Oct 23 22:41:54 2011 -0400

    TST: frame.py test coverage

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 01d8073c8..b321b827c 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -4,7 +4,8 @@ Misc tools for implementing data structures
 import cPickle
 try:
     from io import BytesIO
-except ImportError:   # Python < 2.6
+except ImportError:  # pragma: no cover
+    # Python < 2.6
     from cStringIO import StringIO as BytesIO
 import itertools
 
@@ -486,7 +487,8 @@ class groupby(dict):
             self.setdefault(k, []).append(value)
     try:
         __iter__ = dict.iteritems
-    except AttributeError:  # Python 3
+    except AttributeError:  # pragma: no cover
+        # Python 3
         def __iter__(self):
             return iter(dict.items(self))
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 5532d2a91..7f1beca73 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -279,7 +279,7 @@ class DataFrame(NDFrame):
         return ((k, self[k]) for k in self.columns)
 
     iterkv = iteritems
-    if py3compat.PY3:
+    if py3compat.PY3:  # pragma: no cover
         items = iteritems
 
     def __len__(self):
@@ -726,25 +726,6 @@ class DataFrame(NDFrame):
 
         self._data = dm._data
 
-    #----------------------------------------------------------------------
-    # Private helper methods
-
-    def _intersect_index(self, other):
-        common_index = self.index
-
-        if not common_index.equals(other.index):
-            common_index = common_index.intersection(other.index)
-
-        return common_index
-
-    def _intersect_columns(self, other):
-        common_cols = self.columns
-
-        if not common_cols.equals(other.columns):
-            common_cols = common_cols.intersection(other.columns)
-
-        return common_cols
-
     #----------------------------------------------------------------------
     # Array interface
 
@@ -981,13 +962,9 @@ class DataFrame(NDFrame):
             return Series(new_values, index=self.columns, name=key)
         else:
             new_data = self._data.xs(key, axis=1, copy=copy)
-            if new_data.ndim == 1:
-                return Series(new_data.as_matrix(), index=self.columns,
-                              name=key)
-            else:
-                result = DataFrame(new_data)
-                result.index = _maybe_droplevels(result.index, key)
-                return result
+            result = DataFrame(new_data)
+            result.index = _maybe_droplevels(result.index, key)
+            return result
 
     #----------------------------------------------------------------------
     # Reindexing and alignment
@@ -1465,15 +1442,6 @@ class DataFrame(NDFrame):
         this, other = self.align(other, join='outer', copy=False)
         new_index, new_columns = this.index, this.columns
 
-        # some shortcuts
-        if fill_value is None:
-            if not self and not other:
-                return self._constructor(index=new_index)
-            elif not self:
-                return other * nan
-            elif not other:
-                return self * nan
-
         this_vals = this.values
         other_vals = other.values
 
@@ -2174,7 +2142,7 @@ class DataFrame(NDFrame):
             return self._join_index(other, how, lsuffix, rsuffix)
 
     def _join_on(self, other, on, how, lsuffix, rsuffix):
-        if how not in ['left', 'inner']:
+        if how not in ('left', 'inner'):  # pragma: no cover
             raise Exception('Only inner / left joins currently supported')
 
         if isinstance(other, Series):
@@ -3295,7 +3263,7 @@ def _homogenize(data, index, columns, dtype=None):
 def _put_str(s, space):
     return ('%s' % s)[:space].ljust(space)
 
-def install_ipython_completers():
+def install_ipython_completers():  # pragma: no cover
     """Register the DataFrame type with IPython's tab completion machinery, so
     that it knows about accessing column names as attributes."""
     from IPython.utils.generics import complete_object
@@ -3307,7 +3275,7 @@ def install_ipython_completers():
 
 # Importing IPython brings in about 200 modules, so we want to avoid it unless
 # we're in IPython (when those modules are loaded anyway).
-if "IPython" in sys.modules:
+if "IPython" in sys.modules:  # pragma: no cover
     try:
         install_ipython_completers()
     except Exception:
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index bb99e55a7..a763dc8ca 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1095,6 +1095,14 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         df = DataFrame(self.frame['A'], index=self.frame.index, columns=['A'])
         df.copy()
 
+    def test_constructor_mixed_dict_and_Series(self):
+        data = {}
+        data['A'] = {'foo' : 1, 'bar' : 2, 'baz' : 3}
+        data['B'] = Series([4, 3, 2, 1], index=['bar', 'qux', 'baz', 'foo'])
+
+        result = DataFrame(data)
+        self.assert_(result.index.is_monotonic)
+
     def test_astype(self):
         casted = self.frame.astype(int)
         expected = DataFrame(self.frame.values.astype(int),
@@ -1398,6 +1406,13 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         const_add = self.frame.add(1)
         assert_frame_equal(const_add, self.frame + 1)
 
+        # corner cases
+        result = self.frame.add(self.frame[:0])
+        assert_frame_equal(result, self.frame * np.nan)
+
+        result = self.frame[:0].add(self.frame)
+        assert_frame_equal(result, self.frame * np.nan)
+
     def test_arith_flex_series(self):
         df = self.simple
 
@@ -2160,8 +2175,13 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         newFrame = self.frame.reindex(columns=[])
         self.assert_(not newFrame)
 
-    def test_reindex_mixed(self):
-        pass
+    def test_align(self):
+
+        af, bf = self.frame.align(self.frame)
+        self.assert_(af._data is not self.frame._data)
+
+        af, bf = self.frame.align(self.frame, copy=False)
+        self.assert_(af._data is self.frame._data)
 
     #----------------------------------------------------------------------
     # Transposing
@@ -3195,6 +3215,11 @@ class TestDataFrameJoin(unittest.TestCase):
         # TODO: columns aren't in the same order yet
         assert_frame_equal(joined, expected.ix[:, joined.columns])
 
+    def test_join_on_series(self):
+        result = self.target.join(self.source['MergedA'], on='C')
+        expected = self.target.join(self.source[['MergedA']], on='C')
+        assert_frame_equal(result, expected)
+
     def test_join_index_mixed(self):
 
         df1 = DataFrame({'A' : 1., 'B' : 2, 'C' : 'foo', 'D' : True},
@@ -3234,9 +3259,6 @@ class TestDataFrameJoin(unittest.TestCase):
             expected = _join_by_hand(df2, df1, how=kind)
             assert_frame_equal(joined, expected)
 
-    def test_join_on_series(self):
-        pass
-
     def test_join_empty_bug(self):
         # generated an exception in 0.4.3
         x = DataFrame()
