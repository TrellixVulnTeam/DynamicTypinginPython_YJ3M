commit 325a73aa67d1c44333fe7c188096e50abce64c6a
Author: Chang She <changshe@gmail.com>
Date:   Wed Dec 5 04:20:56 2012 -0500

    TST/ENH: tweaks for wide frame repr

diff --git a/pandas/core/common.py b/pandas/core/common.py
index d63029b44..87308b203 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -1173,7 +1173,7 @@ def in_interactive_session():
     returns True if running under python/ipython interactive shell
     """
     import __main__ as main
-    return not hasattr(main, '__file__')
+    return not hasattr(main, '__file__') or get_option('test.interactive')
 
 def in_qtconsole():
     """
diff --git a/pandas/core/config_init.py b/pandas/core/config_init.py
index c812d456f..e38d75a6e 100644
--- a/pandas/core/config_init.py
+++ b/pandas/core/config_init.py
@@ -85,6 +85,12 @@ pc_expand_repr_doc="""
     If False, the summary representation is shown.
 """
 
+pc_line_width_doc="""
+: int
+    Default 80
+    When printing wide DataFrames, this is the width of each line.
+"""
+
 with cf.config_prefix('print'):
     cf.register_option('precision', 7, pc_precision_doc, validator=is_int)
     cf.register_option('digits', 7, validator=is_int)
@@ -108,3 +114,12 @@ with cf.config_prefix('print'):
     cf.register_option('encoding', detect_console_encoding(), pc_encoding_doc,
                     validator=is_text)
     cf.register_option('expand_frame_repr', False, pc_expand_repr_doc)
+    cf.register_option('line_width', 80, pc_line_width_doc)
+
+tc_interactive_doc="""
+: boolean
+    Default False
+    Whether to simulate interactive mode for purposes of testing
+"""
+with cf.config_prefix('test'):
+    cf.register_option('interactive', False, tc_interactive_doc)
diff --git a/pandas/core/format.py b/pandas/core/format.py
index b42742c88..97aa23191 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -295,21 +295,23 @@ class DataFrameFormatter(object):
         strcols = list(strcols)
         if self.index:
             idx = strcols.pop(0)
-            lwidth -= len(idx[0])
+            lwidth -= np.array([len(x) for x in idx]).max()
 
-        col_widths = [len(col[0]) if len(col) > 0 else 0
+        col_widths = [np.array([len(x) for x in col]).max()
+                      if len(col) > 0 else 0
                       for col in strcols]
         col_bins = _binify(col_widths, lwidth)
+
         str_lst = []
         st = 0
         for ed in col_bins:
             row = strcols[st:ed]
             row.insert(0, idx)
-            if ed < len(strcols):
+            if ed <= len(strcols):
                 row.append([' \\'] + ['  '] * (len(self.frame) - 1))
             str_lst.append(adjoin(1, *row))
             st = ed
-        return '\n'.join(str_lst)
+        return '\n\n'.join(str_lst)
 
     def to_latex(self, force_unicode=None, column_format=None):
         """
@@ -1406,10 +1408,10 @@ def _binify(cols, width):
     curr_width = 0
     for i, w in enumerate(cols):
         curr_width += w
-        if curr_width >= width:
-            bins.append(i + 1)
-            curr_width = 0
-        if i + 1== len(cols):
+        if curr_width + 2 > width:
+            bins.append(i)
+            curr_width = w
+        elif i + 1== len(cols):
             bins.append(i + 1)
     return bins
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 37b1e57ca..c61c721bf 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -618,9 +618,6 @@ class DataFrame(NDFrame):
                 else:
                     return False
 
-    def _repr_width(self):
-        pass
-
     def __str__(self):
         """
         Return a string representation for a particular DataFrame
@@ -652,13 +649,45 @@ class DataFrame(NDFrame):
         if self._need_info_repr_():
             self.info(buf=buf, verbose=self._verbose_info)
         else:
-            self.to_string(buf=buf)
+            is_wide = self._need_wide_repr()
+            line_width = None
+            if is_wide:
+                line_width = get_option('print.line_width')
+            self.to_string(buf=buf, line_width=line_width)
 
         value = buf.getvalue()
         assert type(value) == unicode
 
         return value
 
+    def _need_wide_repr(self):
+        if com.in_qtconsole():
+            terminal_width, terminal_height = 100, 100
+        else:
+            terminal_width, terminal_height = get_terminal_size()
+        max_columns = get_option("print.max_columns")
+        expand_repr = get_option("print.expand_frame_repr")
+
+        if max_columns > 0:
+            if len(self.columns) > max_columns and expand_repr:
+                return True
+        else:
+            # save us
+            if (com.in_interactive_session() and
+                len(self.columns) > terminal_width // 2 and
+                expand_repr):
+                return True
+            else:
+                buf = StringIO()
+                self.to_string(buf=buf)
+                value = buf.getvalue()
+                if (max([len(l) for l in value.split('\n')]) > terminal_width
+                    and com.in_interactive_session()
+                    and expand_repr):
+                    return True
+
+        return False
+
     def __repr__(self):
         """
         Return a string representation for a particular DataFrame
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index 54ad50573..fc74c2a18 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -400,6 +400,22 @@ class TestDataFrameFormatting(unittest.TestCase):
         repr(df.T)
         fmt.set_printoptions(max_rows=200)
 
+    def test_wide_repr(self):
+        set_option('test.interactive', True)
+        col = lambda l, k: [tm.rands(k) for _ in xrange(l)]
+        df = DataFrame([col(20, 25) for _ in range(10)])
+        rep_str = repr(df)
+        set_option('print.expand_frame_repr', True)
+        wide_repr = repr(df)
+        self.assert_(rep_str != wide_repr)
+
+        set_option('print.line_width', 120)
+        wider_repr = repr(df)
+        self.assert_(len(wider_repr) < len(wide_repr))
+
+        set_option('print.expand_frame_repr', False)
+        set_option('test.interactive', False)
+
     def test_to_string(self):
         from pandas import read_table
         import re
