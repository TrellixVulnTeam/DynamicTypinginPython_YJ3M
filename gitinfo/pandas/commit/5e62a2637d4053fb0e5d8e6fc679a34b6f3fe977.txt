commit 5e62a2637d4053fb0e5d8e6fc679a34b6f3fe977
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Dec 11 23:45:54 2011 -0500

    ENH: DataFrame.convert_objects for inferring better dtypes, GH #302

diff --git a/RELEASE.rst b/RELEASE.rst
index b94e556dd..1827dd432 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -50,6 +50,8 @@ pandas 0.6.1
   - Implement Series.rank and DataFrame.rank, fast versions of
     scipy.stats.rankdata (GH #428)
   - Implement DataFrame.from_items alternate constructor (GH #444)
+  - DataFrame.convert_objects method for inferring better dtypes for object
+    columns (GH #302)
 
 **Improvements to existing features**
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index d52ffcaa6..2bfd7dc77 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -861,6 +861,25 @@ class DataFrame(NDFrame):
     def dtypes(self):
         return self.apply(lambda x: x.dtype)
 
+    def convert_objects(self):
+        """
+        Attempt to infer better dtype for object columns
+
+        Returns
+        -------
+        converted : DataFrame
+        """
+        new_data = {}
+
+        # TODO: could be more efficient taking advantage of the block
+        for col, s in self.iteritems():
+            if s.dtype == np.object_:
+                new_data[col] = lib.maybe_convert_objects(s)
+            else:
+                new_data[col] = s
+
+        return DataFrame(new_data, index=self.index, columns=self.columns)
+
     def get_dtype_counts(self):
         counts = {}
         for _, series in self.iterkv():
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index b273b205e..4f87326e8 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2004,6 +2004,12 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
                           index=result.index)
         assert_series_equal(result, expected)
 
+    def test_convert_objects(self):
+        oops = self.mixed_frame.T.T
+        converted = oops.convert_objects()
+        assert_frame_equal(converted, self.mixed_frame)
+        self.assert_(converted['A'].dtype == np.float64)
+
     def test_append(self):
         begin_index = self.frame.index[:5]
         end_index = self.frame.index[5:]
