commit 2bf5ce76ded6e05aba88f27adc6459d32c5f6144
Author: Aivengoe <aivengoe2@gmail.com>
Date:   Thu Nov 14 21:06:08 2019 +0300

    Replace _has_complex_internals #29227 (#29237)

diff --git a/pandas/core/apply.py b/pandas/core/apply.py
index 6302499b6..94b7c59b9 100644
--- a/pandas/core/apply.py
+++ b/pandas/core/apply.py
@@ -13,7 +13,7 @@ from pandas.core.dtypes.common import (
     is_list_like,
     is_sequence,
 )
-from pandas.core.dtypes.generic import ABCSeries
+from pandas.core.dtypes.generic import ABCMultiIndex, ABCSeries
 
 if TYPE_CHECKING:
     from pandas import DataFrame, Series, Index
@@ -281,7 +281,7 @@ class FrameApply(metaclass=abc.ABCMeta):
             and not self.dtypes.apply(is_extension_array_dtype).any()
             # Disallow complex_internals since libreduction shortcut
             #  cannot handle MultiIndex
-            and not self.agg_axis._has_complex_internals
+            and not isinstance(self.agg_axis, ABCMultiIndex)
         ):
 
             values = self.values
diff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py
index 20ca176f4..5ac361a83 100644
--- a/pandas/core/indexes/base.py
+++ b/pandas/core/indexes/base.py
@@ -4086,11 +4086,6 @@ class Index(IndexOpsMixin, PandasObject):
             msg = "'value' must be a scalar, passed: {0}"
             raise TypeError(msg.format(type(value).__name__))
 
-    @property
-    def _has_complex_internals(self):
-        # to disable groupby tricks in MultiIndex
-        return False
-
     def _is_memory_usage_qualified(self):
         """
         Return a boolean if we need a qualified .info display.
diff --git a/pandas/core/indexes/multi.py b/pandas/core/indexes/multi.py
index a83fd6bf5..e768a5b6d 100644
--- a/pandas/core/indexes/multi.py
+++ b/pandas/core/indexes/multi.py
@@ -1396,11 +1396,6 @@ class MultiIndex(Index):
         self._tuples = lib.fast_zip(values)
         return self._tuples
 
-    @property
-    def _has_complex_internals(self):
-        # to disable groupby tricks
-        return True
-
     @cache_readonly
     def is_monotonic_increasing(self):
         """
