commit bc5a7451a5cfb049e3cc6c9cfc56d2c01656e327
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Nov 13 21:04:37 2011 -0500

    BUG: broke circular reference in Index engine, sped up MultiIndex.from_tuples, GH #219

diff --git a/RELEASE.rst b/RELEASE.rst
index d9c39ae43..15b7900b4 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -58,6 +58,7 @@ pandas 0.5.1
   - Add fast `get_value` and `put_value` methods to DataFrame and
     micro-performance tweaks (GH #360)
   - Add `cov` instance methods to Series and DataFrame (GH #194, PR #362)
+  - Add bar plot option to `DataFrame.plot` (PR #348)
 
 **Improvements to existing features**
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index b8bf2b22b..f3984ba54 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2445,8 +2445,6 @@ class DataFrame(NDFrame):
                 join_key = self[on[0]].values
             else:
                 join_key = lib.fast_zip([self[k] for k in on])
-                join_key = common._asarray_tuplesafe(join_key,
-                                                     dtype=np.object_)
         elif isinstance(on, np.ndarray) and len(on) == len(self):
             join_key = on
         else:
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 041f523bc..eddd4c986 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -101,8 +101,10 @@ class Index(np.ndarray):
 
     @cache_readonly
     def _engine(self):
+        import weakref
         # property, for now, slow to look up
-        return _engines.DictIndexEngine(self.values, self._map_indices)
+        return _engines.DictIndexEngine(weakref.ref(self),
+                                        self._map_indices)
 
     def _get_level_number(self, level):
         if not isinstance(level, int):
@@ -1009,7 +1011,14 @@ class MultiIndex(Index):
         """
         if len(tuples) == 0:
             raise Exception('Cannot infer number of levels from empty list')
-        arrays = zip(*tuples)
+
+        if isinstance(tuples, np.ndarray):
+            arrays = list(lib.tuples_to_object_array(tuples).T)
+        elif isinstance(tuples, list):
+            arrays = list(lib.to_object_array_tuples(tuples).T)
+        else:
+            arrays = zip(*tuples)
+
         return MultiIndex.from_arrays(arrays, sortorder=sortorder,
                                       names=names)
 
diff --git a/pandas/src/engines.pyx b/pandas/src/engines.pyx
index 211f1681f..d9790afc6 100644
--- a/pandas/src/engines.pyx
+++ b/pandas/src/engines.pyx
@@ -10,15 +10,15 @@ cdef class DictIndexEngine(IndexEngine):
     '''
 
     cdef readonly:
-        ndarray values
+        object index_weakref
         dict mapping
         object mapfun
 
     cdef:
         bint initialized, integrity
 
-    def __init__(self, ndarray values, object mapfun):
-        self.values = values
+    def __init__(self, index_weakref, object mapfun):
+        self.index_weakref = index_weakref
         self.initialized = 0
         self.integrity = 0
         self.mapfun = mapfun
@@ -51,8 +51,9 @@ cdef class DictIndexEngine(IndexEngine):
             return self.integrity == 1
 
     cdef initialize(self):
-        self.mapping = self.mapfun(self.values)
-        if len(self.mapping) == len(self.values):
+        values = self.index_weakref().values
+        self.mapping = self.mapfun(values)
+        if len(self.mapping) == len(values):
             self.integrity = 1
         self.initialized = 1
 
diff --git a/pandas/src/parsing.pyx b/pandas/src/parsing.pyx
index 8a0c8e8c2..874fa8d19 100644
--- a/pandas/src/parsing.pyx
+++ b/pandas/src/parsing.pyx
@@ -27,6 +27,22 @@ def to_object_array(list rows):
 
     return result
 
+def tuples_to_object_array(ndarray[object] tuples):
+    cdef:
+        Py_ssize_t i, j, n, k, tmp
+        ndarray[object, ndim=2] result
+        tuple tup
+
+    n = len(tuples)
+    k = len(tuples[0])
+    result = np.empty((n, k), dtype=object)
+    for i in range(n):
+        tup = tuples[i]
+        for j in range(k):
+            result[i, j] = tup[j]
+
+    return result
+
 def to_object_array_tuples(list rows):
     cdef:
         Py_ssize_t i, j, n, k, tmp
diff --git a/pandas/src/sandbox.pyx b/pandas/src/sandbox.pyx
index 98ab8f1ed..fddc30bde 100644
--- a/pandas/src/sandbox.pyx
+++ b/pandas/src/sandbox.pyx
@@ -14,3 +14,4 @@ cdef class SeriesIterator:
 def foo(object o):
     cdef int64_t bar = o
     return bar
+
