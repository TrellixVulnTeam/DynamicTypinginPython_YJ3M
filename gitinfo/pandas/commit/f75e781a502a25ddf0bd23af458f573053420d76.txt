commit f75e781a502a25ddf0bd23af458f573053420d76
Author: jreback <jeff@reback.net>
Date:   Mon Apr 28 07:54:24 2014 -0400

    TST: fix checking for less_precise in floats

diff --git a/pandas/src/testing.pyx b/pandas/src/testing.pyx
index 290226e1d..bff070421 100644
--- a/pandas/src/testing.pyx
+++ b/pandas/src/testing.pyx
@@ -118,10 +118,7 @@ cpdef assert_almost_equal(a, b, bint check_less_precise=False):
 
         # deal with differing dtypes
         if check_less_precise:
-            dtype_a = np.dtype(type(a))
-            dtype_b = np.dtype(type(b))
-            if dtype_a.kind == 'f' and dtype_b == 'f':
-                decimal = 3
+            decimal = 3
 
         if np.isinf(a):
             assert np.isinf(b), "First object is inf, second isn't"
@@ -132,11 +129,11 @@ cpdef assert_almost_equal(a, b, bint check_less_precise=False):
             if abs(fa) < 1e-5:
                 if not decimal_almost_equal(fa, fb, decimal):
                     assert False, (
-                        '(very low values) expected %.5f but got %.5f' % (b, a)
+                        '(very low values) expected %.5f but got %.5f, with decimal %d' % (fb, fa, decimal)
                     )
             else:
                 if not decimal_almost_equal(1, fb / fa, decimal):
-                    assert False, 'expected %.5f but got %.5f' % (b, a)
+                    assert False, 'expected %.5f but got %.5f, with decimal %d' % (fb, fa, decimal)
 
     else:
         assert a == b, "%r != %r" % (a, b)
diff --git a/pandas/tests/test_testing.py b/pandas/tests/test_testing.py
index 986e44ced..298fa73c6 100644
--- a/pandas/tests/test_testing.py
+++ b/pandas/tests/test_testing.py
@@ -154,6 +154,25 @@ class TestAssertSeriesEqual(unittest.TestCase):
         # ATM meta data is not checked in assert_series_equal
         # self._assert_not_equal(Series(range(3)),Series(range(3),name='foo'),check_names=True)
 
+    def test_less_precise(self):
+        s1 =  Series([0.12345],dtype='float64')
+        s2 =  Series([0.12346],dtype='float64')
+
+        self.assertRaises(AssertionError, assert_series_equal, s1, s2)
+        self._assert_equal(s1,s2,check_less_precise=True)
+
+        s1 =  Series([0.12345],dtype='float32')
+        s2 =  Series([0.12346],dtype='float32')
+
+        self.assertRaises(AssertionError, assert_series_equal, s1, s2)
+        self._assert_equal(s1,s2,check_less_precise=True)
+
+        # even less than less precise
+        s1 =  Series([0.1235],dtype='float32')
+        s2 =  Series([0.1236],dtype='float32')
+
+        self.assertRaises(AssertionError, assert_series_equal, s1, s2)
+        self.assertRaises(AssertionError, assert_series_equal, s1, s2, True)
 
 class TestRNGContext(unittest.TestCase):
 
