commit c78d5c52eba3d35ef14266ea16847e323bd2f6a8
Author: Chang She <changshe@gmail.com>
Date:   Mon Sep 24 01:34:33 2012 -0400

    BUG: DataFrame.reset_index failure if both drop and level are present #1957

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 3f5963134..87d016913 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2489,17 +2489,18 @@ class DataFrame(NDFrame):
             return values
 
         new_index = np.arange(len(new_obj))
-        if not drop:
-            if isinstance(self.index, MultiIndex):
+        if isinstance(self.index, MultiIndex):
+            if level is not None:
+                if not isinstance(level, (tuple, list)):
+                    level = [level]
+                level = [self.index._get_level_number(lev) for lev in level]
+                if len(level) < len(self.index.levels):
+                    new_index = self.index.droplevel(level)
+
+            if not drop:
                 names = self.index.names
                 zipped = zip(self.index.levels, self.index.labels)
 
-                if level is not None:
-                    if not isinstance(level, (tuple, list)):
-                        level = [level]
-
-                    level = [self.index._get_level_number(lev) for lev in level]
-
                 for i, (lev, lab) in reversed(list(enumerate(zipped))):
                     col_name = names[i]
                     if col_name is None:
@@ -2510,13 +2511,12 @@ class DataFrame(NDFrame):
                     if level is None or i in level:
                         new_obj.insert(0, col_name, level_values.take(lab))
 
-                if level is not None and len(level) < len(self.index.levels):
-                    new_index = self.index.droplevel(level)
-            else:
-                name = self.index.name
-                if name is None or name == 'index':
-                    name = 'index' if 'index' not in self else 'level_0'
-                new_obj.insert(0, name, _maybe_cast(self.index.values))
+        elif not drop:
+            name = self.index.name
+            if name is None or name == 'index':
+                name = 'index' if 'index' not in self else 'level_0'
+            new_obj.insert(0, name, _maybe_cast(self.index.values))
+
         new_obj.index = new_index
         return new_obj
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 281f1ba55..561be9cd9 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -788,7 +788,7 @@ copy : boolean, default False
             new_values = np.concatenate([self.values, [value]])
             return Series(new_values, index=new_index, name=self.name)
 
-    def reset_index(self, drop=False, name=None, inplace=False):
+    def reset_index(self, level=None, drop=False, name=None, inplace=False):
         """
         Analogous to the DataFrame.reset_index function, see docstring there.
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 493d2a5bd..81dd24a6c 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -6605,6 +6605,13 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         df.reset_index(inplace=True)
         assert_frame_equal(df, resetted)
 
+        frame = self.frame.reset_index().set_index(['index', 'A', 'B'])
+        rs = frame.reset_index('A', drop=True)
+        xp = self.frame.copy()
+        del xp['A']
+        xp = xp.set_index(['B'], append=True)
+        assert_frame_equal(rs, xp)
+
     def test_reset_index_right_dtype(self):
         time = np.arange(0.0, 10, np.sqrt(2)/2)
         s1 = Series((9.81 * time ** 2) /2,
