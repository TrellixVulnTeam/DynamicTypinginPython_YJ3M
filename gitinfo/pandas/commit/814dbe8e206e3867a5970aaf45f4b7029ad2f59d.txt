commit 814dbe8e206e3867a5970aaf45f4b7029ad2f59d
Author: Daniel Julius Lasiman <dj.lasiman@gmail.com>
Date:   Wed Jun 3 15:07:02 2015 +0700

    Fix undesired UX behavior of DataFrame output in IPython Notebook #10231

diff --git a/doc/source/whatsnew/v0.16.2.txt b/doc/source/whatsnew/v0.16.2.txt
index ae6680852..b4a1bc72e 100644
--- a/doc/source/whatsnew/v0.16.2.txt
+++ b/doc/source/whatsnew/v0.16.2.txt
@@ -83,17 +83,12 @@ See the :ref:`documentation <basics.pipe>` for more. (:issue:`10129`)
 
 .. _whatsnew_0162.enhancements.other:
 
-Other enhancements
+Other Enhancements
 ^^^^^^^^^^^^^^^^^^
 
-.. _whatsnew_0162.api:
-
-Backwards incompatible API changes
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+- Removed the duplicate scroll bars in the ``DataFrame`` HTML representation when displaying in an ``IPython notebook`` v3.0 or greater. Note that the notebook has a ``toggle output scrolling`` feature to automate the display of very large frames. (:issue:`10231`)
 
-.. _whatsnew_0162.api_breaking:
-
-.. _whatsnew_0162.api_breaking.other:
+.. _whatsnew_0162.api:
 
 Other API Changes
 ^^^^^^^^^^^^^^^^^
@@ -108,7 +103,7 @@ Other API Changes
 Performance Improvements
 ~~~~~~~~~~~~~~~~~~~~~~~~
 
-- Improved ``Series.resample`` performance with dtype=datetime64[ns] (:issue:`7754`)
+- Improved ``Series.resample`` performance with ``dtype=datetime64[ns]`` (:issue:`7754`)
 - Increase performance of ``str.split`` when ``expand=True`` (:issue:`10081`)
 
 .. _whatsnew_0162.bug_fixes:
@@ -173,4 +168,4 @@ Bug Fixes
 
 - Bug where MySQL interface could not handle numeric table/column names (:issue:`10255`)
 
-- Bug in ``read_csv`` with a ``date_parser`` that returned a ``datetime64`` array of other time resolution than ``[ns]`` (:issue:`10245`).
+- Bug in ``read_csv`` with a ``date_parser`` that returned a ``datetime64`` array of other time resolution than ``[ns]`` (:issue:`10245`)
diff --git a/pandas/core/format.py b/pandas/core/format.py
index 429051b58..4f0e57130 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 from __future__ import print_function
+from distutils.version import LooseVersion
 # pylint: disable=W0141
 
 import sys
@@ -692,13 +693,20 @@ class DataFrameFormatter(TableFormatter):
             space=self.col_space
         )
 
-    def to_html(self, classes=None):
+    def to_html(self, classes=None, notebook=False):
         """
         Render a DataFrame to a html table.
+
+        Parameters
+        ----------
+        notebook : {True, False}, optional, default False
+            Whether the generated HTML is for IPython Notebook.
+
         """
         html_renderer = HTMLFormatter(self, classes=classes,
                                       max_rows=self.max_rows,
-                                      max_cols=self.max_cols)
+                                      max_cols=self.max_cols,
+                                      notebook=notebook)
         if hasattr(self.buf, 'write'):
             html_renderer.write_result(self.buf)
         elif isinstance(self.buf, compat.string_types):
@@ -808,7 +816,8 @@ class HTMLFormatter(TableFormatter):
 
     indent_delta = 2
 
-    def __init__(self, formatter, classes=None, max_rows=None, max_cols=None):
+    def __init__(self, formatter, classes=None, max_rows=None, max_cols=None,
+                 notebook=False):
         self.fmt = formatter
         self.classes = classes
 
@@ -823,6 +832,7 @@ class HTMLFormatter(TableFormatter):
         self.show_dimensions = self.fmt.show_dimensions
         self.is_truncated = (self.max_rows < len(self.fmt.frame) or
                              self.max_cols < len(self.fmt.columns))
+        self.notebook = notebook
 
     def write(self, s, indent=0):
         rs = com.pprint_thing(s)
@@ -890,6 +900,17 @@ class HTMLFormatter(TableFormatter):
                                       'not %s') % type(self.classes))
             _classes.extend(self.classes)
 
+        if self.notebook:
+            div_style = ''
+            try:
+                import IPython
+                if IPython.__version__ < LooseVersion('3.0.0'):
+                    div_style = ' style="max-width:1500px;overflow:auto;"'
+            except ImportError:
+                pass
+
+            self.write('<div{0}>'.format(div_style))
+
         self.write('<table border="1" class="%s">' % ' '.join(_classes),
                    indent)
 
@@ -902,6 +923,10 @@ class HTMLFormatter(TableFormatter):
             by = chr(215) if compat.PY3 else unichr(215)  # ×
             self.write(u('<p>%d rows %s %d columns</p>') %
                        (len(frame), by, len(frame.columns)))
+
+        if self.notebook:
+            self.write('</div>')
+
         _put_lines(buf, self.elements)
 
     def _write_header(self, indent):
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 346b51842..c2a705ea1 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -538,10 +538,9 @@ class DataFrame(NDFrame):
             max_cols = get_option("display.max_columns")
             show_dimensions = get_option("display.show_dimensions")
 
-            return ('<div style="max-height:1000px;'
-                    'max-width:1500px;overflow:auto;">\n' +
-                    self.to_html(max_rows=max_rows, max_cols=max_cols,
-                                 show_dimensions=show_dimensions) + '\n</div>')
+            return self.to_html(max_rows=max_rows, max_cols=max_cols,
+                                show_dimensions=show_dimensions,
+                                notebook=True)
         else:
             return None
 
@@ -1349,7 +1348,8 @@ class DataFrame(NDFrame):
                 header=True, index=True, na_rep='NaN', formatters=None,
                 float_format=None, sparsify=None, index_names=True,
                 justify=None, bold_rows=True, classes=None, escape=True,
-                max_rows=None, max_cols=None, show_dimensions=False):
+                max_rows=None, max_cols=None, show_dimensions=False,
+                notebook=False):
         """
         Render a DataFrame as an HTML table.
 
@@ -1388,7 +1388,7 @@ class DataFrame(NDFrame):
                                            max_rows=max_rows,
                                            max_cols=max_cols,
                                            show_dimensions=show_dimensions)
-        formatter.to_html(classes=classes)
+        formatter.to_html(classes=classes, notebook=notebook)
 
         if buf is None:
             return formatter.buf.getvalue()
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index 4d21190e7..1bb1cd5ec 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 from __future__ import print_function
+from distutils.version import LooseVersion
 import re
 
 from pandas.compat import range, zip, lrange, StringIO, PY3, lzip, u
@@ -14,6 +15,14 @@ from numpy import nan
 from numpy.random import randn
 import numpy as np
 
+div_style = ''
+try:
+    import IPython
+    if IPython.__version__ < LooseVersion('3.0.0'):
+        div_style = ' style="max-width:1500px;overflow:auto;"'
+except ImportError:
+    pass
+
 from pandas import DataFrame, Series, Index, Timestamp, MultiIndex, date_range, NaT
 
 import pandas.core.format as fmt
@@ -892,7 +901,7 @@ class TestDataFrameFormatting(tm.TestCase):
         fmt.set_option('display.max_columns',4)
         result = df._repr_html_()
         expected = '''\
-<div style="max-height:1000px;max-width:1500px;overflow:auto;">
+<div{0}>
 <table border="1" class="dataframe">
   <thead>
     <tr style="text-align: right;">
@@ -980,7 +989,7 @@ class TestDataFrameFormatting(tm.TestCase):
   </tbody>
 </table>
 <p>20 rows × 20 columns</p>
-</div>'''
+</div>'''.format(div_style)
         if sys.version_info[0] < 3:
             expected = expected.decode('utf-8')
         self.assertEqual(result, expected)
@@ -993,7 +1002,7 @@ class TestDataFrameFormatting(tm.TestCase):
         fmt.set_option('display.max_columns',7)
         result = df._repr_html_()
         expected = '''\
-<div style="max-height:1000px;max-width:1500px;overflow:auto;">
+<div{0}>
 <table border="1" class="dataframe">
   <thead>
     <tr>
@@ -1096,7 +1105,7 @@ class TestDataFrameFormatting(tm.TestCase):
   </tbody>
 </table>
 <p>8 rows × 8 columns</p>
-</div>'''
+</div>'''.format(div_style)
         if sys.version_info[0] < 3:
             expected = expected.decode('utf-8')
         self.assertEqual(result, expected)
@@ -1110,7 +1119,7 @@ class TestDataFrameFormatting(tm.TestCase):
         fmt.set_option('display.multi_sparse',False)
         result = df._repr_html_()
         expected = '''\
-<div style="max-height:1000px;max-width:1500px;overflow:auto;">
+<div{0}>
 <table border="1" class="dataframe">
   <thead>
     <tr>
@@ -1206,7 +1215,7 @@ class TestDataFrameFormatting(tm.TestCase):
   </tbody>
 </table>
 <p>8 rows × 8 columns</p>
-</div>'''
+</div>'''.format(div_style)
         if sys.version_info[0] < 3:
             expected = expected.decode('utf-8')
         self.assertEqual(result, expected)
