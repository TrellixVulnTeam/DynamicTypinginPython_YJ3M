commit a4d1ea343ed52ff26d3da6f71096faa7debacd7c
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Sep 22 11:59:44 2011 -0400

    ENH: corrwith excludes object data by default, address GH #144

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index e04dbcf1d..edc43ec9e 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2214,20 +2214,23 @@ class DataFrame(NDFrame):
         -------
         correls : Series
         """
-        com_index = self._intersect_index(other)
-        com_cols = self._intersect_columns(other)
+        this = self._get_numeric_data()
+        other = other._get_numeric_data()
+
+        com_index = this._intersect_index(other)
+        com_cols = this._intersect_columns(other)
 
         # feels hackish
         if axis == 0:
             result_index = com_index
             if not drop:
-                result_index = self.columns.union(other.columns)
+                result_index = this.columns.union(other.columns)
         else:
             result_index = com_cols
             if not drop:
-                result_index = self.index.union(other.index)
+                result_index = this.index.union(other.index)
 
-        left = self.reindex(index=com_index, columns=com_cols)
+        left = this.reindex(index=com_index, columns=com_cols)
         right = other.reindex(index=com_index, columns=com_cols)
 
         # mask missing values
@@ -2692,6 +2695,15 @@ class DataFrame(NDFrame):
 
         return cols
 
+    def _get_numeric_data(self):
+        if self._is_mixed_type:
+            return self.ix[:, self._get_numeric_columns()]
+        else:
+            if self.values.dtype != np.object_:
+                return self
+            else:
+                return self.ix[:, []]
+
     def clip(self, upper=None, lower=None):
         """
         Trim values at input threshold(s)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 4ada58a28..7167c7137 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1704,6 +1704,22 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         for row in index[:4]:
             assert_almost_equal(correls[row], df1.ix[row].corr(df2.ix[row]))
 
+    def test_corrwith_with_objects(self):
+        df1 = tm.makeTimeDataFrame()
+        df2 = tm.makeTimeDataFrame()
+        cols = ['A', 'B', 'C', 'D']
+
+        df1['obj'] = 'foo'
+        df2['obj'] = 'bar'
+
+        result = df1.corrwith(df2)
+        expected = df1.ix[:, cols].corrwith(df2.ix[:, cols])
+        assert_series_equal(result, expected)
+
+        result = df1.corrwith(df2, axis=1)
+        expected = df1.ix[:, cols].corrwith(df2.ix[:, cols], axis=1)
+        assert_series_equal(result, expected)
+
     def test_dropEmptyRows(self):
         N = len(self.frame.index)
         mat = randn(N)
