commit 0de04598a0b6cd2bae447b8d0c920c5588c77baf
Author: jreback <jeff@reback.net>
Date:   Fri Sep 27 11:43:58 2013 -0400

    ENH: Series lhs, scalar rhs bool comparison support

diff --git a/pandas/core/ops.py b/pandas/core/ops.py
index 4ce2143fd..c1c6e6e2f 100644
--- a/pandas/core/ops.py
+++ b/pandas/core/ops.py
@@ -564,21 +564,31 @@ def _bool_method_SERIES(op, name, str_rep=None):
                     y = com._ensure_object(y)
                     result = lib.vec_binop(x, y, op)
             else:
-                result = lib.scalar_binop(x, y, op)
+                try:
+
+                    # let null fall thru
+                    if not isnull(y):
+                        y = bool(y)
+                    result = lib.scalar_binop(x, y, op)
+                except:
+                    raise TypeError("cannot compare a dtyped [{0}] array with "
+                                    "a scalar of type [{1}]".format(x.dtype,type(y).__name__))
 
         return result
 
     def wrapper(self, other):
         if isinstance(other, pd.Series):
             name = _maybe_match_name(self, other)
+
+            other = other.reindex_like(self).fillna(False).astype(bool)
             return self._constructor(na_op(self.values, other.values),
-                                     index=self.index, name=name)
+                                     index=self.index, name=name).fillna(False).astype(bool)
         elif isinstance(other, pd.DataFrame):
             return NotImplemented
         else:
             # scalars
             return self._constructor(na_op(self.values, other),
-                                     index=self.index, name=self.name)
+                                     index=self.index, name=self.name).fillna(False).astype(bool)
     return wrapper
 
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 1bc35008c..79faad93f 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -21,7 +21,8 @@ from pandas.core.common import (isnull, notnull, _is_bool_indexer,
                                 _values_from_object,
                                 _possibly_cast_to_datetime, _possibly_castable,
                                 _possibly_convert_platform,
-                                ABCSparseArray, _maybe_match_name)
+                                ABCSparseArray, _maybe_match_name, _ensure_object)
+
 from pandas.core.index import (Index, MultiIndex, InvalidIndexError,
                                _ensure_index, _handle_legacy_indexes)
 from pandas.core.indexing import (
@@ -1170,7 +1171,7 @@ class Series(generic.NDFrame):
         -------
         duplicated : Series
         """
-        keys = com._ensure_object(self.values)
+        keys = _ensure_object(self.values)
         duplicated = lib.duplicated(keys, take_last=take_last)
         return self._constructor(duplicated, index=self.index, name=self.name)
 
diff --git a/pandas/lib.pyx b/pandas/lib.pyx
index f5205ae0c..56ef9a4fc 100644
--- a/pandas/lib.pyx
+++ b/pandas/lib.pyx
@@ -672,6 +672,9 @@ def scalar_binop(ndarray[object] values, object val, object op):
         object x
 
     result = np.empty(n, dtype=object)
+    if util._checknull(val):
+        result.fill(val)
+        return result
 
     for i in range(n):
         x = values[i]
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index f05e52013..e8d9f3a7f 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -4526,7 +4526,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         # GH4947
         # bool comparisons should return bool
         result = d['a'] | d['b']
-        expected = Series([True, True])
+        expected = Series([False, True])
         assert_series_equal(result, expected)
 
         # GH4604, automatic casting here
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index a2be232cb..7f3ea1302 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -2797,7 +2797,7 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         assert_series_equal(result,expected)
 
         result = a | Series([])
-        expected = Series([True, True, True], list('bca'))
+        expected = Series([True, False, True], list('bca'))
         assert_series_equal(result,expected)
 
         # vs non-matching
@@ -2806,14 +2806,43 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         assert_series_equal(result,expected)
 
         result = a | Series([1],['z'])
-        expected = Series([True, True, True], list('bca'))
+        expected = Series([True, False, True], list('bca'))
         assert_series_equal(result,expected)
 
         # identity
         # we would like s[s|e] == s to hold for any e, whether empty or not
         for e in [Series([]),Series([1],['z']),Series(['z']),Series(np.nan,b.index),Series(np.nan,a.index)]:
             result = a[a | e]
-            assert_series_equal(result,a)
+            assert_series_equal(result,a[a])
+
+        # vs scalars
+        index = list('bca')
+        t = Series([True,False,True])
+
+        for v in [True,1,2]:
+            result = Series([True,False,True],index=index) | v
+            expected = Series([True,True,True],index=index)
+            assert_series_equal(result,expected)
+
+        for v in [np.nan,'foo']:
+            self.assertRaises(TypeError, lambda : t | v)
+
+        for v in [False,0]:
+            result = Series([True,False,True],index=index) | v
+            expected = Series([True,False,True],index=index)
+            assert_series_equal(result,expected)
+
+        for v in [True,1]:
+            result = Series([True,False,True],index=index) & v
+            expected = Series([True,False,True],index=index)
+            assert_series_equal(result,expected)
+
+        for v in [False,0]:
+            result = Series([True,False,True],index=index) & v
+            expected = Series([False,False,False],index=index)
+            assert_series_equal(result,expected)
+        for v in [np.nan]:
+            self.assertRaises(TypeError, lambda : t & v)
 
     def test_between(self):
         s = Series(bdate_range('1/1/2000', periods=20).asobject)
@@ -2851,12 +2880,14 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         def tester(a, b):
             return a & b
 
-        self.assertRaises(ValueError, tester, s, datetime(2005, 1, 1))
+        self.assertRaises(TypeError, tester, s, datetime(2005, 1, 1))
 
         s = Series([2, 3, 4, 5, 6, 7, 8, 9, datetime(2005, 1, 1)])
         s[::2] = np.nan
 
-        assert_series_equal(tester(s, list(s)), s)
+        expected = Series(True,index=s.index)
+        expected[::2] = False
+        assert_series_equal(tester(s, list(s)), expected)
 
         d = DataFrame({'A': s})
         # TODO: Fix this exception - needs to be fixed! (see GH5035)
