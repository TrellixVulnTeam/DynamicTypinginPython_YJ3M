commit dd5205f6c8833f017c8698546eda9991ecbcc0ed
Author: Chang She <chang@lambdafoundry.com>
Date:   Wed Apr 11 14:08:43 2012 -0400

    ENH: added OLS.predict method; pass through call to statsmodels ols predict method

diff --git a/pandas/stats/ols.py b/pandas/stats/ols.py
index 0eff6e710..869653f62 100644
--- a/pandas/stats/ols.py
+++ b/pandas/stats/ols.py
@@ -381,6 +381,43 @@ class OLS(object):
         For in-sample, this is same as y_fitted."""
         return self.y_fitted
 
+    def predict(self, new_y_values, fill_value=None, fill_method=None,
+                axis=0):
+        """
+        Parameters
+        ----------
+        new_y_values : Series or DataFrame
+        fill_value : scalar or dict, default None
+        fill_method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None
+        axis : {0, 1}, default 0
+            See DataFrame.fillna for more details
+
+        Notes
+        -----
+        1. If both fill_value and fill_method are None then NaNs are dropped
+        (this is the default behavior)
+        2. An intercept will be automatically added to the new_y_values if
+           the model was fitted using an intercept
+
+        Returns
+        -------
+        Series of predicted values
+        """
+        orig_y = new_y_values
+        if fill_value is None and fill_method is None:
+            new_y_values = new_y_values.dropna(how='any')
+        else:
+            new_y_values = new_y_values.fillna(value=fill_value,
+                                               method=fill_method, axis=axis)
+        if isinstance(new_y_values, Series):
+            new_y_values = DataFrame({'x' : new_y_values})
+        if self._intercept:
+            new_y_values['intercept'] = 1.
+
+        new_y_values = new_y_values.reindex(columns=self._x.columns)
+        rs = self.sm_ols.model.predict(new_y_values.values)
+        return Series(rs, new_y_values.index).reindex(orig_y.index)
+
     RESULT_FIELDS = ['r2', 'r2_adj', 'df', 'df_model', 'df_resid', 'rmse',
                      'f_stat', 'beta', 'std_err', 't_stat', 'p_value', 'nobs']
 
diff --git a/pandas/stats/tests/test_ols.py b/pandas/stats/tests/test_ols.py
index a92d28397..252f3624e 100644
--- a/pandas/stats/tests/test_ols.py
+++ b/pandas/stats/tests/test_ols.py
@@ -287,6 +287,21 @@ class TestOLSMisc(unittest.TestCase):
         assert_series_equal(model1.y_predict, model1.y_fitted)
         assert_almost_equal(model1._y_predict_raw, model1._y_fitted_raw)
 
+    def test_predict(self):
+        y = tm.makeTimeSeries()
+        x = tm.makeTimeDataFrame()
+        model1 = ols(y=y, x=x)
+        assert_series_equal(model1.predict(x), model1.y_predict)
+        x2 = x.reindex(columns=x.columns[::-1])
+        assert_series_equal(model1.predict(x2), model1.y_predict)
+
+        x3 = x2 + 10
+        pred3 = model1.predict(x3)
+        x3['intercept'] = 1.
+        x3 = x3.reindex(columns = model1.beta.index)
+        expected = Series(x3.values.dot(model1.beta.values), x3.index)
+        assert_series_equal(expected, pred3)
+
     def test_longpanel_series_combo(self):
         wp = tm.makePanel()
         lp = wp.to_frame()
