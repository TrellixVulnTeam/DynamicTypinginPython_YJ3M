commit 5a917be201c9852ba798eb6a2ff3a1fe7b8cbd3b
Author: Kieran O'Mahony <kieranom@gmail.com>
Date:   Fri Jun 1 10:17:47 2012 +0100

    BLD: ujson remove dependence on npymath lib

diff --git a/pandas/src/ujson/python/objToJSON.c b/pandas/src/ujson/python/objToJSON.c
index fa4de44bb..5b7973874 100644
--- a/pandas/src/ujson/python/objToJSON.c
+++ b/pandas/src/ujson/python/objToJSON.c
@@ -2,8 +2,8 @@
 
 #include "py_defines.h"
 #include <numpy/arrayobject.h>
+#include <numpy/npy_math.h>
 #include <np_datetime.h>
-#include <numpy/halffloat.h>
 #include <stdio.h>
 #include <datetime.h>
 #include <ultrajson.h>
@@ -138,15 +138,6 @@ static void *PyLongToINT64(JSOBJ _obj, JSONTypeContext *tc, void *outValue, size
     return NULL;
 }
 
-static void *NpyHalfToDOUBLE(JSOBJ _obj, JSONTypeContext *tc, void *outValue, size_t *_outLen)
-{
-    PyObject *obj = (PyObject *) _obj;
-    unsigned long ctype;
-    PyArray_ScalarAsCtype(obj, &ctype);
-    *((double *) outValue) = npy_half_to_double (ctype);
-    return NULL;
-}
-
 static void *NpyFloatToDOUBLE(JSOBJ _obj, JSONTypeContext *tc, void *outValue, size_t *_outLen)
 {
     PyObject *obj = (PyObject *) _obj;
@@ -1145,13 +1136,6 @@ void Object_beginTypeContext (JSOBJ _obj, JSONTypeContext *tc)
         return;
     }
     else
-    if (PyArray_IsScalar(obj, Half))
-    {
-        PRINTMARK();
-        pc->PyTypeToJSON = NpyHalfToDOUBLE; tc->type = JT_DOUBLE;
-        return;
-    }
-    else
     if (PyArray_IsScalar(obj, Datetime))
     {
         PRINTMARK();
diff --git a/pandas/tests/test_ujson.py b/pandas/tests/test_ujson.py
index 806125797..96ae67803 100644
--- a/pandas/tests/test_ujson.py
+++ b/pandas/tests/test_ujson.py
@@ -802,9 +802,6 @@ class NumpyJSONTests(TestCase):
         num = np.float(256.2013)
         self.assertEqual(np.float(ujson.decode(ujson.encode(num))), num)
 
-        num = np.float16(256.2013)
-        self.assertEqual(np.float16(ujson.decode(ujson.encode(num))), num)
-
         num = np.float32(256.2013)
         self.assertEqual(np.float32(ujson.decode(ujson.encode(num))), num)
 
@@ -820,17 +817,10 @@ class NumpyJSONTests(TestCase):
             outp = np.array(ujson.decode(ujson.encode(inpt, double_precision=15)), dtype=dtype)
             assert_array_almost_equal_nulp(inpt, outp)
 
-        inpt = np.arange(1.5, 21.5, 0.2, dtype=np.float16)
-        outp = np.array(ujson.decode(ujson.encode(inpt)), dtype=np.float16)
-        assert_array_almost_equal_nulp(inpt, outp)
-
     def testFloatMax(self):
         num = np.float(np.finfo(np.float).max/10)
         assert_approx_equal(np.float(ujson.decode(ujson.encode(num))), num, 15)
 
-        num = np.float16(np.finfo(np.float16).max/10)
-        assert_approx_equal(np.float16(ujson.decode(ujson.encode(num))), num, 15)
-
         num = np.float32(np.finfo(np.float32).max/10)
         assert_approx_equal(np.float32(ujson.decode(ujson.encode(num))), num, 15)
 
diff --git a/setup.py b/setup.py
index a625fc48c..6a0b2b8d1 100755
--- a/setup.py
+++ b/setup.py
@@ -74,8 +74,6 @@ if np.__version__ < '1.6.1':
     msg = "pandas requires NumPy >= 1.6 due to datetime64 dependency"
     sys.exit(msg)
 
-from numpy.distutils.misc_util import get_pkg_info, get_info
-
 from distutils.extension import Extension
 from distutils.command.build import build
 from distutils.command.build_ext import build_ext
@@ -378,11 +376,6 @@ sparse_ext = Extension('pandas._sparse',
                        sources=[srcpath('sparse', suffix=suffix)],
                        include_dirs=[np.get_include()])
 
-npymath_info = get_info('npymath')
-
-npymath_libdir = npymath_info['library_dirs'][0]
-npymath_libdir = npymath_libdir.replace('\\\\', '\\')
-
 ujson_ext = Extension('pandas._ujson',
                       sources=['pandas/src/ujson/python/ujson.c',
                                'pandas/src/ujson/python/objToJSON.c',
@@ -395,10 +388,6 @@ ujson_ext = Extension('pandas._ujson',
                                     'pandas/src/ujson/lib',
                                     'pandas/src/datetime',
                                     np.get_include()],
-                      libraries=['npymath'],
-                      library_dirs=[npymath_libdir],
-                      # extra_link_args=[get_pkg_info('npymath').libs()]
-                      #extra_info=get_info('npymath')
                       )
 
 sandbox_ext = Extension('pandas._sandbox',
