commit b90ede0f731c58389221abb3ebb7dad8e653973c
Author: Chang She <changshe@gmail.com>
Date:   Sun Jan 20 11:32:10 2013 -0500

    BUG: fixed incorrect prefix in query construction for segment in Google Analytics integration #2713

diff --git a/pandas/io/ga.py b/pandas/io/ga.py
index 2de3cabfa..7d6277e2d 100644
--- a/pandas/io/ga.py
+++ b/pandas/io/ga.py
@@ -352,10 +352,17 @@ def format_query(ids, metrics, start_date, end_date=None, dimensions=None,
                end_date=end_date)
     qry.update(kwargs)
 
-    names = ['dimensions', 'segment', 'filters', 'sort']
-    lst = [dimensions, segment, filters, sort]
+    names = ['dimensions', 'filters', 'sort']
+    lst = [dimensions, filters, sort]
     [_maybe_add_arg(qry, n, d) for n, d in zip(names, lst)]
 
+    if isinstance(segment, basestring):
+        _maybe_add_arg(qry, 'segment', segment, 'dynamic::ga')
+    elif isinstance(segment, int):
+        _maybe_add_arg(qry, 'segment', segment, 'gaid:')
+    elif segment:
+        raise ValueError("segment must be string for dynamic and int ID")
+
     if start_index is not None:
         qry['start_index'] = str(start_index)
 
@@ -365,14 +372,13 @@ def format_query(ids, metrics, start_date, end_date=None, dimensions=None,
     return qry
 
 
-def _maybe_add_arg(query, field, data):
+def _maybe_add_arg(query, field, data, prefix='ga'):
     if data is not None:
-        if isinstance(data, basestring):
+        if isinstance(data, (basestring, int)):
             data = [data]
-        data = ','.join(['ga:%s' % x for x in data])
+        data = ','.join(['%s:%s' % (prefix, x) for x in data])
         query[field] = data
 
-
 def _get_match(obj_store, name, id, **kwargs):
     key, val = None, None
     if len(kwargs) > 0:
diff --git a/pandas/io/tests/test_ga.py b/pandas/io/tests/test_ga.py
index e115c4232..5fa212009 100644
--- a/pandas/io/tests/test_ga.py
+++ b/pandas/io/tests/test_ga.py
@@ -126,6 +126,75 @@ class TestGoogle(unittest.TestCase):
             except httplib2.ServerNotFoundError:
                 raise nose.SkipTest
 
+    @slow
+    @network
+    def test_segment(self):
+        try:
+            import httplib2
+            from pandas.io.ga import GAnalytics, read_ga
+            from pandas.io.auth import AuthenticationConfigError
+        except ImportError:
+            raise nose.SkipTest
+
+        try:
+            end_date = datetime.now()
+            start_date = end_date - pd.offsets.Day() * 5
+            end_date = end_date.strftime('%Y-%m-%d')
+            start_date = start_date.strftime('%Y-%m-%d')
+
+            reader = GAnalytics()
+            df = reader.get_data(
+                metrics=['avgTimeOnSite', 'visitors', 'newVisits',
+                         'pageviewsPerVisit'],
+                start_date=start_date,
+                end_date=end_date,
+                segment=-2,
+                dimensions=['date', 'hour'],
+                parse_dates={'ts': ['date', 'hour']})
+
+            assert isinstance(df, DataFrame)
+            assert isinstance(df.index, pd.DatetimeIndex)
+            assert len(df) > 1
+            assert 'date' not in df
+            assert 'hour' not in df
+            assert df.index.name == 'ts'
+            assert 'avgTimeOnSite' in df
+            assert 'visitors' in df
+            assert 'newVisits' in df
+            assert 'pageviewsPerVisit' in df
+
+            #dynamic
+            df = read_ga(
+                metrics=['avgTimeOnSite', 'visitors', 'newVisits',
+                         'pageviewsPerVisit'],
+                start_date=start_date,
+                end_date=end_date,
+                segment="source=~twitter",
+                dimensions=['date', 'hour'],
+                parse_dates={'ts': ['date', 'hour']})
+
+            assert isinstance(df, DataFrame)
+            assert isinstance(df.index, pd.DatetimeIndex)
+            assert len(df) > 1
+            assert 'date' not in df
+            assert 'hour' not in df
+            assert df.index.name == 'ts'
+            assert 'avgTimeOnSite' in df
+            assert 'visitors' in df
+            assert 'newVisits' in df
+            assert 'pageviewsPerVisit' in df
+
+        except AuthenticationConfigError:
+            raise nose.SkipTest
+        except httplib2.ServerNotFoundError:
+            try:
+                h = httplib2.Http()
+                response, content = h.request("http://www.google.com")
+                raise
+            except httplib2.ServerNotFoundError:
+                raise nose.SkipTest
+
+
 if __name__ == '__main__':
     import nose
     nose.runmodule(argv=[__file__, '-vvs', '-x', '--pdb', '--pdb-failure'],
