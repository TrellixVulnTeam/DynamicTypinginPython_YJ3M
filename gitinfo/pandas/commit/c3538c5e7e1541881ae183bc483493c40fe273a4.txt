commit c3538c5e7e1541881ae183bc483493c40fe273a4
Author: Chang She <changshe@gmail.com>
Date:   Mon Dec 17 11:12:44 2012 -0500

    DOC: rolling window examples #2477

diff --git a/doc/source/computation.rst b/doc/source/computation.rst
index a5df30333..80ed4e9a9 100644
--- a/doc/source/computation.rst
+++ b/doc/source/computation.rst
@@ -212,6 +212,7 @@ otherwise they can be found in :mod:`pandas.stats.moments`.
     ``rolling_cov``, Unbiased covariance (binary)
     ``rolling_corr``, Correlation (binary)
     ``rolling_corr_pairwise``, Pairwise correlation of DataFrame columns
+    ``rolling_window``, Moving window function
 
 Generally these methods all have the same interface. The binary operators
 (e.g. ``rolling_corr``) take two Series or DataFrames. Otherwise, they all
@@ -265,6 +266,58 @@ compute the mean absolute deviation on a rolling basis:
    @savefig rolling_apply_ex.png width=4.5in
    rolling_apply(ts, 60, mad).plot(style='k')
 
+The ``rolling_window`` function performs a generic rolling window computation
+on the input data. The weights used in the window are specified by the ``win_type``
+keyword. The list of recognized types are:
+
+    - ``boxcar``
+    - ``triang``
+    - ``blackman``
+    - ``hamming``
+    - ``bartlett``
+    - ``parzen``
+    - ``bohman``
+    - ``blackmanharris``
+    - ``nuttall``
+    - ``barthann``
+    - ``kaiser`` (needs beta)
+    - ``gaussian`` (needs std)
+    - ``general_gaussian`` (needs power, width)
+    - ``slepian`` (needs width).
+
+.. ipython:: python
+
+   ser = Series(randn(10), index=date_range('1/1/2000', periods=10))
+
+   rolling_window(ser, 5, 'triang')
+
+Note that the ``boxcar`` window is equivalent to ``rolling_mean``:
+
+.. ipython:: python
+
+   rolling_window(ser, 5, 'boxcar')
+
+   rolling_mean(ser, 5)
+
+For some windowing functions, additional parameters must be specified:
+
+.. ipython:: python
+
+   rolling_window(ser, 5, 'gaussian', std=0.1)
+
+By default the labels are set to the right edge of the window, but a
+``center`` keyword is available so the labels can be set at the center.
+This keyword is available in other rolling functions as well.
+
+.. ipython:: python
+
+   rolling_window(ser, 5, 'boxcar')
+
+   rolling_window(ser, 5, 'boxcar', center=True)
+
+   rolling_mean(ser, 5, center=True)
+
+
 .. _stats.moments.binary:
 
 Binary rolling moments
@@ -634,4 +687,3 @@ Result fields and tests
 
 We'll leave it to the user to explore the docstrings and source, especially as
 we'll be moving this code into statsmodels in the near future.
-
diff --git a/pandas/stats/moments.py b/pandas/stats/moments.py
index ef229ec99..b4e367ac1 100644
--- a/pandas/stats/moments.py
+++ b/pandas/stats/moments.py
@@ -580,14 +580,14 @@ def rolling_window(arg, window=None, win_type=None, min_periods=None,
                    freq=None, center=False, mean=True, time_rule=None,
                    axis=0, **kwargs):
     """
-    Applies a centered moving window of type ``window_type`` and size ``window``
+    Applies a moving window of type ``window_type`` and size ``window``
     on the data.
 
     Parameters
     ----------
     arg : Series, DataFrame
     window : int or ndarray
-        Filtering window specification. If the window is an integer, then it is
+        Weighting window specification. If the window is an integer, then it is
         treated as the window length and win_type is required
     win_type : str, default None
         Window type (see Notes)
