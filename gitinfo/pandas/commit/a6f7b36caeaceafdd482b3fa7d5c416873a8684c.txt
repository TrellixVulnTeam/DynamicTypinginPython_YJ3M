commit a6f7b36caeaceafdd482b3fa7d5c416873a8684c
Author: Adam Klein <adamklein@gmail.com>
Date:   Sun Jan 22 18:08:20 2012 -0500

    make datetime64 array/asarray calls compatible with numpy 1.7

diff --git a/bench/bench_dense_to_sparse.py b/bench/bench_dense_to_sparse.py
index 68fc200c7..349d3b31e 100644
--- a/bench/bench_dense_to_sparse.py
+++ b/bench/bench_dense_to_sparse.py
@@ -4,7 +4,7 @@ K = 100
 N = 100000
 rng = DateRange('1/1/2000', periods=N, offset=datetools.Minute())
 
-rng2 = np.asarray(rng).astype('M8').astype('i8')
+rng2 = np.asarray(rng).astype('M8[us]').astype('i8')
 
 series = {}
 for i in range(1, K + 1):
diff --git a/pandas/core/daterange.py b/pandas/core/daterange.py
index af3ec2a7b..bdc8acec0 100644
--- a/pandas/core/daterange.py
+++ b/pandas/core/daterange.py
@@ -97,7 +97,7 @@ class DateRange(DatetimeIndex):
         if tzinfo is not None:
             index = [d.replace(tzinfo=tzinfo) for d in index]
 
-        index = np.array(index, dtype=np.datetime64, copy=False)
+        index = np.array(index, dtype='M8[us]', copy=False)
         index = index.view(cls)
         index.name = name
         index.offset = offset
@@ -152,7 +152,7 @@ class DateRange(DatetimeIndex):
 
         if offset not in _daterange_cache:
             xdr = generate_range(_CACHE_START, _CACHE_END, offset=offset)
-            arr = np.array(list(xdr), dtype=np.datetime64, copy=False)
+            arr = np.array(list(xdr), dtype='M8[us]', copy=False)
 
             cachedRange = arr.view(DateRange)
             cachedRange.offset = offset
diff --git a/pandas/core/index.py b/pandas/core/index.py
index b1c4b4d60..677321fbc 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -79,7 +79,7 @@ class Index(np.ndarray):
         if (dtype is None
             and (lib.is_datetime_array(subarr)
                  or lib.is_datetime64_array(subarr))):
-            return DatetimeIndex(subarr.astype('M8'), name=name)
+            return DatetimeIndex(subarr.astype('M8[us]'), name=name)
 
         if lib.is_integer_array(subarr) and dtype is None:
             return Int64Index(subarr.astype('i8'), name=name)
@@ -1062,17 +1062,17 @@ class DatetimeIndex(Int64Index):
                 data = list(data)
 
             # try to make it datetime64
-            data = np.asarray(data, dtype=np.datetime64)
+            data = np.asarray(data, dtype='M8[us]')
 
         if issubclass(data.dtype.type, basestring):
             raise TypeError('String dtype not supported, you may need '
                             'to explicitly cast to datetime64')
         elif issubclass(data.dtype.type, np.integer):
-            subarr = np.array(data, dtype=np.datetime64, copy=copy)
+            subarr = np.array(data, dtype='M8[us]', copy=copy)
         elif issubclass(data.dtype.type, np.datetime64):
-            subarr = np.array(data, dtype=np.datetime64, copy=copy)
+            subarr = np.array(data, dtype='M8[us]', copy=copy)
         else:
-            subarr = np.array(data, dtype=np.datetime64, copy=copy)
+            subarr = np.array(data, dtype='M8[us]', copy=copy)
             if len(data) > 0:
                 test = (subarr != data)
                 if (type(test) == bool and test == True) or test.any():
@@ -1112,7 +1112,7 @@ class DatetimeIndex(Int64Index):
         if isinstance(key, datetime):
             key = _dt_unbox(key)
         elif isinstance(key, np.ndarray):
-            key = np.array(key, dtype=np.datetime64, copy=False)
+            key = np.array(key, dtype='M8[us]', copy=False)
         elif not isinstance(key, np.datetime64):
             raise TypeError("Key %s is unrecognized type" % key)
         return self.values.searchsorted(key, side=side)
@@ -1159,7 +1159,7 @@ class DatetimeIndex(Int64Index):
             other = other.view('i8', type=np.ndarray)
         elif other.inferred_type == 'datetime':
             # TODO: faster conversion from datetime object to datetime64?
-            other = np.array(other, dtype='M8', copy=False)
+            other = np.array(other, dtype='M8[us]', copy=False)
             other = other.view('i8', type=np.ndarray)
         elif len(other) == 0 and len(self) == 0 and other.dtype == object:
             # fun corner case
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 1954591cc..504d01081 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -742,7 +742,7 @@ def _read_array(group, key):
 
 def _unconvert_index(data, kind):
     if kind == 'datetime64':
-        index = np.array(data, dtype=np.datetime64)
+        index = np.array(data, dtype='M8[us]')
     elif kind == 'datetime':
         index = np.array([datetime.fromtimestamp(v) for v in data],
                          dtype=object)
diff --git a/pandas/tests/test_tseries.py b/pandas/tests/test_tseries.py
index 87f5c08c4..ab77ffaf7 100644
--- a/pandas/tests/test_tseries.py
+++ b/pandas/tests/test_tseries.py
@@ -321,7 +321,7 @@ class TestTypeInference(unittest.TestCase):
         pass
 
     def test_datetime(self):
-        arr1 = np.array([1,2,3], dtype='M8')
+        arr1 = np.array([1,2,3], dtype='M8[us]')
         result = lib.infer_dtype(arr1)
         self.assertEqual(result, 'datetime64')
 
diff --git a/pandas/tools/tests/test_merge.py b/pandas/tools/tests/test_merge.py
index d92a0003b..db05055f7 100644
--- a/pandas/tools/tests/test_merge.py
+++ b/pandas/tools/tests/test_merge.py
@@ -1073,7 +1073,7 @@ class TestConcatenate(unittest.TestCase):
         expected = ts.copy()
 
         ts.index = DatetimeIndex(np.array(ts.index.values, 
-                                          dtype=np.datetime64))
+                                          dtype='M8[us]'))
 
         exp_labels = [np.repeat([0, 1, 2], [len(x) for x in pieces]),
                       np.arange(len(ts))]
diff --git a/vb_suite/sparse.py b/vb_suite/sparse.py
index 658fdc190..3c068e743 100644
--- a/vb_suite/sparse.py
+++ b/vb_suite/sparse.py
@@ -14,7 +14,7 @@ N = 50000
 rng = np.asarray(DateRange('1/1/2000', periods=N,
                            offset=datetools.Minute()))
 
-# rng2 = np.asarray(rng).astype('M8').astype('i8')
+# rng2 = np.asarray(rng).astype('M8[us]').astype('i8')
 
 series = {}
 for i in range(1, K + 1):
