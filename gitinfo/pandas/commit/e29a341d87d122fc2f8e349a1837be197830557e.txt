commit e29a341d87d122fc2f8e349a1837be197830557e
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Thu Nov 21 05:07:57 2019 -0800

    REF: dont _try_cast for user-defined functions (#29698)

diff --git a/doc/source/whatsnew/v1.0.0.rst b/doc/source/whatsnew/v1.0.0.rst
index 3b87150f5..db24be628 100644
--- a/doc/source/whatsnew/v1.0.0.rst
+++ b/doc/source/whatsnew/v1.0.0.rst
@@ -511,6 +511,7 @@ Groupby/resample/rolling
 - Bug in :meth:`DataFrame.groupby` losing column name information when grouping by a categorical column (:issue:`28787`)
 - Bug in :meth:`DataFrameGroupBy.rolling().quantile()` ignoring ``interpolation`` keyword argument (:issue:`28779`)
 - Bug in :meth:`DataFrame.groupby` where ``any``, ``all``, ``nunique`` and transform functions would incorrectly handle duplicate column labels (:issue:`21668`)
+-
 
 Reshaping
 ^^^^^^^^^
diff --git a/pandas/core/apply.py b/pandas/core/apply.py
index 071cd116e..34a8ed1fa 100644
--- a/pandas/core/apply.py
+++ b/pandas/core/apply.py
@@ -226,6 +226,8 @@ class FrameApply(metaclass=abc.ABCMeta):
             if "Function does not reduce" not in str(err):
                 # catch only ValueError raised intentionally in libreduction
                 raise
+            # We expect np.apply_along_axis to give a two-dimensional result, or
+            #  also raise.
             result = np.apply_along_axis(self.f, self.axis, self.values)
 
         # TODO: mixed type case
diff --git a/pandas/core/groupby/generic.py b/pandas/core/groupby/generic.py
index b62f28889..900e11ded 100644
--- a/pandas/core/groupby/generic.py
+++ b/pandas/core/groupby/generic.py
@@ -1109,12 +1109,12 @@ class DataFrameGroupBy(GroupBy):
         if axis != obj._info_axis_number:
             for name, data in self:
                 fres = func(data, *args, **kwargs)
-                result[name] = self._try_cast(fres, data)
+                result[name] = fres
         else:
             for name in self.indices:
                 data = self.get_group(name, obj=obj)
                 fres = func(data, *args, **kwargs)
-                result[name] = self._try_cast(fres, data)
+                result[name] = fres
 
         return self._wrap_frame_output(result, obj)
 
@@ -1424,6 +1424,8 @@ class DataFrameGroupBy(GroupBy):
         output = []
         for i, _ in enumerate(result.columns):
             res = algorithms.take_1d(result.iloc[:, i].values, ids)
+            # TODO: we have no test cases that get here with EA dtypes;
+            #  try_cast may not be needed if EAs never get here
             if cast:
                 res = self._try_cast(res, obj.iloc[:, i])
             output.append(res)
