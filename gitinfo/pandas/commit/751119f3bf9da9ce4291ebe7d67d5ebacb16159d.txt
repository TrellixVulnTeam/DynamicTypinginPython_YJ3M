commit 751119f3bf9da9ce4291ebe7d67d5ebacb16159d
Author: gfyoung <gfyoung17@gmail.com>
Date:   Sat Apr 8 09:25:24 2017 -0400

    MAINT: Refactor Python engine empty line funcs (#15946)
    
    The Python engine's _empty and _check_empty
    methods were uninformative and undocumented.
    
    This commit renames them to _is_line_empty
    and _remove_empty_lines respectively and
    provides appropriate documentation.

diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index a968a2b96..efbf6d644 100755
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -2472,7 +2472,19 @@ class PythonParser(ParserBase):
             # return an empty string.
             return [""]
 
-    def _empty(self, line):
+    def _is_line_empty(self, line):
+        """
+        Check if a line is empty or not.
+
+        Parameters
+        ----------
+        line : str, array-like
+            The line of data to check.
+
+        Returns
+        -------
+        boolean : Whether or not the line is empty.
+        """
         return not line or all(not x for x in line)
 
     def _next_line(self):
@@ -2485,11 +2497,12 @@ class PythonParser(ParserBase):
                     line = self._check_comments([self.data[self.pos]])[0]
                     self.pos += 1
                     # either uncommented or blank to begin with
-                    if not self.skip_blank_lines and (self._empty(self.data[
-                            self.pos - 1]) or line):
+                    if (not self.skip_blank_lines and
+                            (self._is_line_empty(
+                                self.data[self.pos - 1]) or line)):
                         break
                     elif self.skip_blank_lines:
-                        ret = self._check_empty([line])
+                        ret = self._remove_empty_lines([line])
                         if ret:
                             line = ret[0]
                             break
@@ -2508,12 +2521,12 @@ class PythonParser(ParserBase):
                     line = self._check_comments([orig_line])[0]
 
                     if self.skip_blank_lines:
-                        ret = self._check_empty([line])
+                        ret = self._remove_empty_lines([line])
 
                         if ret:
                             line = ret[0]
                             break
-                    elif self._empty(orig_line) or line:
+                    elif self._is_line_empty(orig_line) or line:
                         break
 
         # This was the first line of the file,
@@ -2604,7 +2617,22 @@ class PythonParser(ParserBase):
             ret.append(rl)
         return ret
 
-    def _check_empty(self, lines):
+    def _remove_empty_lines(self, lines):
+        """
+        Iterate through the lines and remove any that are
+        either empty or contain only one whitespace value
+
+        Parameters
+        ----------
+        lines : array-like
+            The array of lines that we are to filter.
+
+        Returns
+        -------
+        filtered_lines : array-like
+            The same array of lines with the "empty" ones removed.
+        """
+
         ret = []
         for l in lines:
             # Remove empty lines and lines with only one whitespace value
@@ -2844,7 +2872,7 @@ class PythonParser(ParserBase):
 
         lines = self._check_comments(lines)
         if self.skip_blank_lines:
-            lines = self._check_empty(lines)
+            lines = self._remove_empty_lines(lines)
         lines = self._check_thousands(lines)
         return self._check_decimal(lines)
 
