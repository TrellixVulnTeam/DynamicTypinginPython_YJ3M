commit 8c3ae2ad00750653eef8bb3d06f4a9a52b7a279c
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Jun 22 21:43:19 2011 -0400

    more unit tests, handle all types of Series

diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index 9844e298a..443602ce6 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -377,6 +377,10 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
 
         self.assertEqual(self.mixed_frame['foo'].dtype, np.object_)
 
+    def test_is_mixed_type(self):
+        self.assert_(not self.frame._is_mixed_type)
+        self.assert_(self.mixed_frame._is_mixed_type)
+
     def test_constructor_dict(self):
         frame = self.klass({'col1' : self.ts1,
                             'col2' : self.ts2})
@@ -1831,7 +1835,13 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
             return x[notnull(x)].sum()
 
         self._check_statistic(self.frame, 'sum', f)
-        self._check_statistic(self.empty, 'sum', f)
+
+        axis0 = self.empty.sum(0)
+        axis1 = self.empty.sum(1)
+        self.assert_(isinstance(axis0, Series))
+        self.assert_(isinstance(axis1, Series))
+        self.assertEquals(len(axis0), 0)
+        self.assertEquals(len(axis1), 0)
 
     def test_sum_object(self):
         values = self.frame.values.astype(int)
diff --git a/pandas/core/tests/test_sparse.py b/pandas/core/tests/test_sparse.py
index 4c6a5ea97..e87955f60 100644
--- a/pandas/core/tests/test_sparse.py
+++ b/pandas/core/tests/test_sparse.py
@@ -710,7 +710,7 @@ class TestSparseDataFrame(TestCase):
         self.assert_(isinstance(sdf['A'].sp_index, IntIndex))
 
         df = DataFrame({'A' : [0, 0, 0, 1, 2],
-                        'B' : [1, 2, 0, 0, 0]})
+                        'B' : [1, 2, 0, 0, 0]}, dtype=float)
         sdf = df.to_sparse(fill_value=0)
         self.assertEquals(sdf.default_fill_value, 0)
         testing.assert_frame_equal(sdf.to_dense(), df)
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index e9d346de3..b2703adaf 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -318,15 +318,8 @@ class HDFStore(object):
         group._v_attrs.nblocks = nblocks
         for i in range(nblocks):
             blk = df._data.blocks[i]
-            typ = type(blk).__name__
-            setattr(group._v_attrs, 'block%d_dtype' % i, typ)
             self._write_index(group, 'block%d_columns' % i, blk.columns)
-
-            vkey = 'block%d_values' % i
-            if typ == 'ObjectBlock':
-                self._write_object_array(group, vkey, blk.values)
-            else:
-                self._write_array(group, vkey, blk.values)
+            self._write_array(group, 'block%d_values' % i, blk.values)
 
     def _read_frame(self, group, where=None):
         from pandas.core.internals import BlockManager, make_block
@@ -337,16 +330,7 @@ class HDFStore(object):
         blocks = []
         for i in range(group._v_attrs.nblocks):
             blk_columns = _read_index(group, 'block%d_columns' % i)
-
-            vkey = 'block%d_values' % i
-            values = getattr(group, vkey)[:]
-
-            # Objects stored in a VLArray...
-            typ = getattr(group._v_attrs, 'block%d_dtype' % i)
-            if typ == 'ObjectBlock':
-                # kludge
-                values = values[0]
-
+            values = _read_array(group, 'block%d_values' % i)
             blk = make_block(values, blk_columns, frame_columns)
             blocks.append(blk)
 
@@ -380,7 +364,7 @@ class HDFStore(object):
         items = _read_index(group, 'items')
         major_axis = _read_index(group, 'major_axis')
         minor_axis = _read_index(group, 'minor_axis')
-        values = group.values[:]
+        values = _read_array(group, 'values')
         return WidePanel(values, items, major_axis, minor_axis)
 
     def _read_wide_table(self, group, where=None):
@@ -400,9 +384,9 @@ class HDFStore(object):
         items = _read_index(group, 'items')
         major_axis = _read_index(group, 'major_axis')
         minor_axis = _read_index(group, 'minor_axis')
-        major_labels = group.major_labels[:]
-        minor_labels = group.minor_labels[:]
-        values = group.values[:]
+        major_labels = _read_array(group, 'major_labels')
+        minor_labels = _read_array(group, 'minor_labels')
+        values = _read_array(group, 'values')
 
         index = LongPanelIndex(major_axis, minor_axis,
                                major_labels, minor_labels)
@@ -419,14 +403,12 @@ class HDFStore(object):
         if key in group:
             self.handle.removeNode(group, key)
 
-        self.handle.createArray(group, key, value)
-
-    def _write_object_array(self, group, key, value):
-        if key in group:
-            self.handle.removeNode(group, key)
-
-        vlarr = self.handle.createVLArray(group, key, _tables().ObjectAtom())
-        vlarr.append(value)
+        if value.dtype == np.object_:
+            vlarr = self.handle.createVLArray(group, key,
+                                              _tables().ObjectAtom())
+            vlarr.append(value)
+        else:
+            self.handle.createArray(group, key, value)
 
     def _write_table(self, group, items=None, index=None, columns=None,
                      values=None, append=False, compression=None):
@@ -498,18 +480,18 @@ class HDFStore(object):
 
     def _read_series(self, group, where=None):
         index = _read_index(group, 'index')
-        values = group.values[:]
+        values = _read_array(group, 'values')
         return Series(values, index=index)
 
     def _read_legacy_series(self, group, where=None):
         index = _read_index_legacy(group, 'index')
-        values = group.values[:]
+        values = _read_array(group, 'values')
         return Series(values, index=index)
 
     def _read_legacy_frame(self, group, where=None):
         index = _read_index_legacy(group, 'index')
         columns = _read_index_legacy(group, 'columns')
-        values = group.values[:]
+        values = _read_array(group, 'values')
         return DataFrame(values, index=index, columns=columns)
 
     def _read_frame_table(self, group, where=None):
@@ -575,6 +557,16 @@ def _convert_index(index):
         raise ValueError('unrecognized index type %s' % type(values[0]))
 
 
+def _read_array(group, key):
+    import tables
+    node = getattr(group, key)
+    data = node[:]
+
+    if isinstance(node, tables.VLArray):
+        return data[0]
+    else:
+        return data
+
 def _read_index(group, key):
     node = getattr(group, key)
     data = node[:]
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index d7edfc6b8..52390dc96 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -102,7 +102,7 @@ class TesttHDFStore(unittest.TestCase):
         tm.assert_frame_equal(self.store['c'], df)
 
     def test_remove(self):
-        ts =tm.makeTimeSeries()
+        ts = tm.makeTimeSeries()
         df = tm.makeDataFrame()
         self.store['a'] = ts
         self.store['b'] = df
@@ -158,7 +158,7 @@ class TesttHDFStore(unittest.TestCase):
         tdf = tm.makeTimeDataFrame()
         self._check_roundtrip(tdf, tm.assert_frame_equal)
 
-    def test_frame_mixed(self):
+    def test_store_mixed(self):
         def _make_one():
             df = tm.makeDataFrame()
             df['obj1'] = 'foo'
@@ -184,6 +184,11 @@ class TesttHDFStore(unittest.TestCase):
         self.assertRaises(Exception, self.store.put, 'foo',
                           df1, table=True)
 
+        # check that can store Series of all of these types
+        self._check_roundtrip(df1['obj1'], tm.assert_series_equal)
+        self._check_roundtrip(df1['bool1'], tm.assert_series_equal)
+        self._check_roundtrip(df1['int1'], tm.assert_series_equal)
+
     def test_wide(self):
         wp = tm.makeWidePanel()
         self._check_roundtrip(wp, tm.assert_panel_equal)
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 0a7662c37..262c1a851 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -100,6 +100,7 @@ def assert_dict_equal(a, b, compare_keys=True):
         assert_almost_equal(a[k], b[k])
 
 def assert_series_equal(left, right):
+    assert(left.dtype == right.dtype)
     assert_almost_equal(left, right)
     assert(left.index.equals(right.index))
 
@@ -107,10 +108,8 @@ def assert_frame_equal(left, right):
     for col, series in left.iteritems():
         assert(col in right)
         assert_series_equal(series, right[col])
-
     for col in right:
         assert(col in left)
-
     assert(left.columns.equals(right.columns))
 
 def assert_panel_equal(left, right):
