commit 49ad2153fa4bd870b1a1bdf4eb401ecc1d483ac1
Author: Chang She <chang@chang-XPS-8300.(none)>
Date:   Mon Feb 20 22:01:27 2012 -0500

    Added fill_value argument to Series/DataFrame.align

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 567296623..e860632dd 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1669,7 +1669,8 @@ class DataFrame(NDFrame):
     #----------------------------------------------------------------------
     # Reindexing and alignment
 
-    def align(self, other, join='outer', axis=None, level=None, copy=True):
+    def align(self, other, join='outer', axis=None, level=None, copy=True,
+              fill_value=None):
         """
         Align two DataFrame object on their index and columns with the
         specified join method for each axis Index
@@ -1683,6 +1684,11 @@ class DataFrame(NDFrame):
         level : int or name
             Broadcast across a level, matching Index values on the
             passed MultiIndex level
+        copy : boolean, default True
+            Always returns new objects. If copy=False and no reindexing is
+            required then original objects are returned.
+        fill_value : object, default None
+            Fills na's if not None
 
         Returns
         -------
@@ -1699,7 +1705,7 @@ class DataFrame(NDFrame):
             raise TypeError('unsupported type: %s' % type(other))
 
     def _align_frame(self, other, join='outer', axis=None, level=None,
-                     copy=True):
+                     copy=True, fill_value=None):
         # defaults
         join_index, join_columns = None, None
         ilidx, iridx = None, None
@@ -1721,10 +1727,10 @@ class DataFrame(NDFrame):
                                            join_columns, clidx, copy)
         right = other._reindex_with_indexers(join_index, iridx,
                                              join_columns, cridx, copy)
-        return left, right
+        return left.fillna(fill_value), right.fillna(fill_value)
 
     def _align_series(self, other, join='outer', axis=None, level=None,
-                      copy=True):
+                      copy=True, fill_value=None):
         fdata = self._data
         if axis == 0:
             join_index = self.index
@@ -1753,7 +1759,7 @@ class DataFrame(NDFrame):
 
         left_result = DataFrame(fdata)
         right_result = other if ridx is None else other.reindex(join_index)
-        return left_result, right_result
+        return left_result.fillna(fill_value), right_result.fillna(fill_value)
 
     def reindex(self, index=None, columns=None, method=None, level=None,
                 copy=True):
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 374b7b917..f46949850 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1786,7 +1786,8 @@ copy : boolean, default False
             mapped = lib.map_infer(self.values, func)
             return Series(mapped, index=self.index, name=self.name)
 
-    def align(self, other, join='outer', level=None, copy=True):
+    def align(self, other, join='outer', level=None, copy=True,
+              fill_value=None):
         """
         Align two Series object with the specified join method
 
@@ -1800,6 +1801,8 @@ copy : boolean, default False
         copy : boolean, default True
             Always return new objects. If copy=False and no reindexing is
             required, the same object will be returned (for better performance)
+        fill_value : object, default None
+            Fills na's if not None
 
         Returns
         -------
@@ -1812,7 +1815,7 @@ copy : boolean, default False
 
         left = self._reindex_indexer(join_index, lidx, copy)
         right = other._reindex_indexer(join_index, ridx, copy)
-        return left, right
+        return left.fillna(fill_value), right.fillna(fill_value)
 
     def _reindex_indexer(self, new_index, indexer, copy):
         if indexer is not None:
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 5fd54466d..6f460dfaa 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3180,8 +3180,15 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         # axis = 0
         other = self.frame.ix[:-5, :3]
-        af, bf = self.frame.align(other, axis=0)
-        self.assert_(bf.columns.equals(other.columns))
+        af, bf = self.frame.align(other, axis=0, fill_value=-1)
+        self.assert_(bf.columns.equals(other.columns))        
+        #test fill value
+        join_idx = self.frame.index.join(other.index)
+        diff_a = self.frame.index.diff(join_idx)
+        diff_b = other.index.diff(join_idx)
+        diff_a_vals = af.reindex(diff_a).values
+        diff_b_vals = bf.reindex(diff_b).values
+        self.assert_((diff_a_vals == -1).all())
 
         af, bf = self.frame.align(other, join='right', axis=0)
         self.assert_(bf.columns.equals(other.columns))
@@ -3194,6 +3201,14 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         self.assert_(bf.columns.equals(self.frame.columns))
         self.assert_(bf.index.equals(other.index))
 
+        #test fill value
+        join_idx = self.frame.index.join(other.index)
+        diff_a = self.frame.index.diff(join_idx)
+        diff_b = other.index.diff(join_idx)
+        diff_a_vals = af.reindex(diff_a).values
+        diff_b_vals = bf.reindex(diff_b).values
+        self.assert_((diff_a_vals == -1).all())
+
         af, bf = self.frame.align(other, join='inner', axis=1)
         self.assert_(bf.columns.equals(other.columns))
 
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 425b5a8fa..e6e5c655b 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -1783,10 +1783,16 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         assert_series_equal(result, self.ts * 2)
 
     def test_align(self):
-        def _check_align(a, b, how='left'):
-            aa, ab = a.align(b, join=how)
-
+        def _check_align(a, b, how='left', fill=None):
+            aa, ab = a.align(b, join=how, fill_value=fill)
+                        
             join_index = a.index.join(b.index, how=how)
+            if fill is not None:
+                diff_a = a.index.diff(join_index)
+                self.asset_((aa.reindex(diff_a) == fill).all())
+                diff_b = b.index.diff(join_index)
+                self.assert_((ab.reindex(diff_b) == fill).all())
+
             ea = a.reindex(join_index)
             eb = b.reindex(join_index)
 
@@ -1794,16 +1800,17 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
             assert_series_equal(ab, eb)
 
         for kind in JOIN_TYPES:
-            _check_align(self.ts[2:], self.ts[:-5])
+            _check_align(self.ts[2:], self.ts[:-5], kind)
+            _check_align(self.ts[2:], self.ts[:-5], kind, -1)
 
             # empty left
-            _check_align(self.ts[:0], self.ts[:-5])
+            _check_align(self.ts[:0], self.ts[:-5], kind)
 
             # empty right
-            _check_align(self.ts[:-5], self.ts[:0])
+            _check_align(self.ts[:-5], self.ts[:0], kind)
 
             # both empty
-            _check_align(self.ts[:0], self.ts[:0])
+            _check_align(self.ts[:0], self.ts[:0], kind)
 
     def test_align_nocopy(self):
         b = self.ts[:5].copy()
