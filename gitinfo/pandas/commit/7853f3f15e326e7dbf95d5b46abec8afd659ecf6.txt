commit 7853f3f15e326e7dbf95d5b46abec8afd659ecf6
Author: Chang She <chang@lambdafoundry.com>
Date:   Sun May 6 19:09:32 2012 -0400

    DOC: more filtering examples. #746

diff --git a/doc/source/indexing.rst b/doc/source/indexing.rst
index 233b884ff..f8c10c2e1 100644
--- a/doc/source/indexing.rst
+++ b/doc/source/indexing.rst
@@ -181,6 +181,8 @@ Boolean indexing
 
 .. _indexing.boolean:
 
+Another common operation is the use of boolean vectors to filter the data.
+
 Using a boolean vector to index a Series works exactly as in a numpy ndarray:
 
 .. ipython:: python
@@ -207,6 +209,23 @@ select out rows where one or more columns have values you want:
                     'c' : randn(7)})
    df2[df2['a'].isin(['one', 'two'])]
 
+List comprehensions and ``map`` method of Series can also be used to produce
+more complex criteria:
+
+.. ipython:: python
+
+   # only want 'two' or 'three'
+   criterion = df2['a'].map(lambda x: x.startswith('t')
+
+   df2[criterion]
+
+   # equivalent but slower
+   df2[[x.startswith('t') for x in df2['a']]]
+
+   # Multiple criteria
+   df2[criterion & (df2['b'] == 'x')]
+
+
 Note, with the :ref:`advanced indexing <indexing.advanced>` ``ix`` method, you
 may select along more than one axis using boolean vectors combined with other
 indexing expressions.
@@ -336,7 +355,6 @@ default value.
    s.get('a')               # equivalent to s['a']
    s.get('x', default=-1)
 
-
 .. _indexing.advanced:
 
 Advanced indexing with labels
