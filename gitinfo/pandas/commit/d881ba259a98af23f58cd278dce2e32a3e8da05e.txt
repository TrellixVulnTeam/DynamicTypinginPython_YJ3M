commit d881ba259a98af23f58cd278dce2e32a3e8da05e
Author: Jeff Reback <jeff@reback.net>
Date:   Sun Nov 16 08:39:00 2014 -0500

    BLD: fix odd usage of cython imports, xref (GH8602)

diff --git a/doc/source/whatsnew/v0.15.2.txt b/doc/source/whatsnew/v0.15.2.txt
index 036efa97c..1cdbc60ac 100644
--- a/doc/source/whatsnew/v0.15.2.txt
+++ b/doc/source/whatsnew/v0.15.2.txt
@@ -58,6 +58,7 @@ Experimental
 
 Bug Fixes
 ~~~~~~~~~
+- Bug in packaging pandas with ``py2app/cx_Freeze`` (:issue:`8602`, :issue:`8831`)
 - Bug in ``groupby`` signatures that didn't include \*args or \*\*kwargs (:issue:`8733`).
 - ``io.data.Options`` now raises ``RemoteDataError`` when no expiry dates are available from Yahoo and when it receives no data from Yahoo (:issue:`8761`), (:issue:`8783`).
 - Bug in slicing a multi-index with an empty list and at least one boolean indexer (:issue:`8781`)
diff --git a/pandas/tslib.pyx b/pandas/tslib.pyx
index 30c18e2d5..3834e4e6b 100644
--- a/pandas/tslib.pyx
+++ b/pandas/tslib.pyx
@@ -1633,16 +1633,16 @@ class Timedelta(_Timedelta):
         if value is None:
             if not len(kwargs):
                 raise ValueError("cannot construct a TimeDelta without a value/unit or descriptive keywords (days,seconds....)")
-            
+
             def _to_py_int_float(v):
                 if is_integer_object(v):
                     return int(v)
                 elif is_float_object(v):
                     return float(v)
                 raise TypeError("Invalid type {0}. Must be int or float.".format(type(v)))
-                    
+
             kwargs = dict([ (k, _to_py_int_float(v)) for k, v in iteritems(kwargs) ])
-            
+
             try:
                 value = timedelta(**kwargs)
             except TypeError as e:
@@ -2753,8 +2753,7 @@ def tz_localize_to_utc(ndarray[int64_t] vals, object tz, object ambiguous=None):
     result_b.fill(NPY_NAT)
 
     # left side
-    idx_shifted = ensure_int64(
-        np.maximum(0, trans.searchsorted(vals - DAY_NS, side='right') - 1))
+    idx_shifted = (np.maximum(0, trans.searchsorted(vals - DAY_NS, side='right') - 1)).astype(np.int64)
 
     for i in range(n):
         v = vals[i] - deltas[idx_shifted[i]]
@@ -2765,8 +2764,7 @@ def tz_localize_to_utc(ndarray[int64_t] vals, object tz, object ambiguous=None):
             result_a[i] = v
 
     # right side
-    idx_shifted = ensure_int64(
-        np.maximum(0, trans.searchsorted(vals + DAY_NS, side='right') - 1))
+    idx_shifted = (np.maximum(0, trans.searchsorted(vals + DAY_NS, side='right') - 1)).astype(np.int64)
 
     for i in range(n):
         v = vals[i] - deltas[idx_shifted[i]]
@@ -2850,10 +2848,6 @@ def tz_localize_to_utc(ndarray[int64_t] vals, object tz, object ambiguous=None):
 
     return result
 
-import pandas.algos as algos
-ensure_int64 = algos.ensure_int64
-
-
 cdef inline bisect_right_i8(int64_t *data, int64_t val, Py_ssize_t n):
     cdef Py_ssize_t pivot, left = 0, right = n
 
