commit c63d3697e30ae7ddd4288b4c804876ce3c9df7bb
Author: jreback <jeff@reback.net>
Date:   Sun Dec 2 19:57:34 2012 -0500

    added docs for Panel4D/panelnd
    updated whatsnew/RELEASE
    removed old variable in panel creation (was for a previous version)
    
    all tests pass

diff --git a/RELEASE.rst b/RELEASE.rst
index 2ba229606..53272bdf4 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -43,6 +43,11 @@ pandas 0.10.0
     `describe_option`, and `reset_option`. Deprecate `set_printoptions` and
     `reset_printoptions` (#2393)
 
+**Experimental Features**
+  - Add support for Panel4D, a named 4 Dimensional stucture
+  - Add support for ndpanel factory functions, to create custom, domain-specific
+     N Dimensional containers
+
 **API Changes**
 
   - inf/-inf are no longer considered as NA by isnull/notnull. To be clear, this
diff --git a/doc/source/dsintro.rst b/doc/source/dsintro.rst
index 3c3c67092..32401604f 100644
--- a/doc/source/dsintro.rst
+++ b/doc/source/dsintro.rst
@@ -798,3 +798,119 @@ method:
                  major_axis=date_range('1/1/2000', periods=5),
                  minor_axis=['a', 'b', 'c', 'd'])
    panel.to_frame()
+
+Panel4D (Experimental)
+----------------------
+
+``Panel4D`` is a 4-Dimensional named container very much like a ``Panel``, but
+having 4 named dimensions. It is intended as a test bed for more N-Dimensional named
+containers.
+
+  - **labels**: axis 0, each item corresponds to a Panel contained inside
+  - **items**: axis 1, each item corresponds to a DataFrame contained inside
+  - **major_axis**: axis 2, it is the **index** (rows) of each of the
+    DataFrames
+  - **minor_axis**: axis 3, it is the **columns** of each of the DataFrames
+
+
+``Panel4D`` is a sub-class of ``Panel``, so most methods that work on Panels are
+applicable to Panel4D.
+
+Construction of Panel4D works in a very similar manner to a ``Panel``
+
+From 4D ndarray with optional axis labels
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+.. ipython:: python
+
+   p4d = Panel4D(randn(2, 2, 5, 4), 
+              labels=['Label1','Label2'], 
+              items=['Item1', 'Item2'],
+              major_axis=date_range('1/1/2000', periods=5),
+              minor_axis=['A', 'B', 'C', 'D'])
+   p4d
+
+
+From dict of Panel objects
+~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+.. ipython:: python
+
+   data = { 'Label1' : Panel({ 'Item1' : DataFrame(randn(4, 3)) }),
+            'Label2' : Panel({ 'Item2' : DataFrame(randn(4, 2)) }) }
+   Panel4D(data)
+
+Note that the values in the dict need only be **convertible to Panels**. 
+Thus, they can be any of the other valid inputs to Panel as per above.
+
+Slicing
+~~~~~~~
+
+Slicing works in a similar manner to a Panel. ``[]`` slices the first dimension.
+``.ix`` allows you to slice abitrarily and get back lower dimensional objects
+
+.. ipython:: python
+
+   p4d['Label1']
+
+4D -> Panel
+
+.. ipython:: python
+
+   p4d.ix[:,:,:,'A']
+
+4D -> DataFrame
+
+.. ipython:: python
+
+   p4d.ix[:,:,0,'A']
+
+4D -> Series
+
+.. ipython:: python
+
+   p4d.ix[:,0,0,'A']
+
+Transposing
+~~~~~~~~~~~
+
+A Panel4D can be rearranged using its ``transpose`` method (which does not make a
+copy by default unless the data are heterogeneous):
+
+.. ipython:: python
+
+   p4d.transpose(3, 2, 1, 0)
+
+PanelND (Experimental)
+----------------------
+
+PanelND is a module with a set of factory functions to enable a user to construct N-dimensional named
+containers like Panel4D, with a custom set of axis labels. Thus a domain-specific container can easily be
+created.
+
+The following creates a Panel5D. A new panel type object must be sliceable into a lower dimensional object.
+Here we slice to a Panel4D.
+
+.. ipython:: python
+
+    from pandas.core import panelnd
+    Panel5D = panelnd.create_nd_panel_factory(
+        klass_name   = 'Panel5D', 
+        axis_orders  = [ 'cool', 'labels','items','major_axis','minor_axis'], 
+        axis_slices  = { 'labels' : 'labels', 'items' : 'items', 'major_axis' : 'major_axis', 'minor_axis' : 'minor_axis' },
+        slicer       = Panel4D,
+        axis_aliases = { 'major' : 'major_axis', 'minor' : 'minor_axis' },
+        stat_axis    = 2)
+    
+    p5d = Panel5D(dict(C1 = p4d))
+    p5d
+
+    # print a slice of our 5D
+    p5d.ix['C1',:,:,0:3,:]
+
+    # transpose it
+    p5d.transpose(1,2,3,4,0)
+
+    # look at the values & dim
+    p5d.values.shape
+    p5d.values.ndim
diff --git a/doc/source/v0.10.0.txt b/doc/source/v0.10.0.txt
index 86741304e..820bc4702 100644
--- a/doc/source/v0.10.0.txt
+++ b/doc/source/v0.10.0.txt
@@ -110,6 +110,23 @@ Updated PyTables Support
        import os
        os.remove('store.h5')
 
+NDim Panels (Experimental)
+~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Adding experimental support for Panel4D and factory functions to create n-dimensional named panels.
+:ref:`Docs <dsintro-panel4d>` for NDim. Here is a taste of what to expect.
+
+     .. ipython:: python
+
+        p4d = Panel4D(randn(2, 2, 5, 4), 
+              labels=['Label1','Label2'], 
+              items=['Item1', 'Item2'],
+              major_axis=date_range('1/1/2000', periods=5),
+              minor_axis=['A', 'B', 'C', 'D'])
+        p4d
+
+
+
 API changes
 ~~~~~~~~~~~
 
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 41aaaa2d1..67fcb237b 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -280,7 +280,6 @@ class Panel(NDFrame):
 
         # shallow copy
         arrays = []
-        reshaped_data = data.copy()
         haxis_shape = [ len(a) for a in raxes ]
         for h in haxis:
             v = values = data.get(h)
