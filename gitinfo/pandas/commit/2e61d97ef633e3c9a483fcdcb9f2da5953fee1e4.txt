commit 2e61d97ef633e3c9a483fcdcb9f2da5953fee1e4
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jan 23 16:28:52 2012 -0500

    BUG: make groupby play nice with sparse objects, modify SparseSeries.take to return SparseSeries, dictification tests, GH #666

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 0c043da96..08474ac3a 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -800,7 +800,7 @@ def load(path):
 
     Parameters
     ----------
-p    path : string
+    path : string
         File path
 
     Returns
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 93e0647fd..dbe484928 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -161,6 +161,9 @@ class GroupBy(object):
         raise AttributeError("'%s' object has no attribute '%s'" %
                              (type(self).__name__, attr))
 
+    def __getitem__(self, key):
+        raise NotImplementedError
+
     def _make_wrapper(self, name):
         f = getattr(self.obj, name)
         if not isinstance(f, types.MethodType):
@@ -294,7 +297,13 @@ class GroupBy(object):
 
         For multiple groupings, the result index will be a MultiIndex
         """
-        return self._cython_agg_general('mean')
+        try:
+            return self._cython_agg_general('mean')
+        except GroupByError:
+            raise
+        except Exception:
+            f = lambda x: x.mean(axis=self.axis)
+            return self._python_agg_general(f)
 
     def std(self):
         """
@@ -1256,7 +1265,6 @@ class PanelGroupBy(GroupBy):
 
         return result
 
-
 class NDArrayGroupBy(GroupBy):
     pass
 
diff --git a/pandas/sparse/array.py b/pandas/sparse/array.py
index 214197035..8b8fcf616 100644
--- a/pandas/sparse/array.py
+++ b/pandas/sparse/array.py
@@ -263,7 +263,7 @@ to sparse
         else:
             return _gin.get_value_at(self, sp_loc)
 
-    def take(self, indices):
+    def take(self, indices, axis=0):
         """
         Sparse-compatible version of ndarray.take
 
@@ -271,6 +271,7 @@ to sparse
         -------
         taken : ndarray
         """
+        assert(axis == 0)
         indices = np.asarray(indices, dtype=int)
 
         n = len(self)
diff --git a/pandas/sparse/frame.py b/pandas/sparse/frame.py
index d69f9a1c0..4ec717ab9 100644
--- a/pandas/sparse/frame.py
+++ b/pandas/sparse/frame.py
@@ -543,6 +543,30 @@ class SparseDataFrame(DataFrame):
         self.columns = new_columns
         self._series = new_series
 
+    def take(self, indices, axis=0):
+        """
+        Analogous to ndarray.take, return SparseDataFrame corresponding to
+        requested indices along an axis
+
+        Parameters
+        ----------
+        indices : list / array of ints
+        axis : {0, 1}
+
+        Returns
+        -------
+        taken : SparseDataFrame
+        """
+        new_values = self.values.take(indices, axis=axis)
+        if axis == 0:
+            new_columns = self.columns
+            new_index = self.index.take(indices)
+        else:
+            new_columns = self.columns.take(indices)
+            new_index = self.index
+        return self._constructor(new_values, index=new_index,
+                                 columns=new_columns)
+
     def add_prefix(self, prefix):
         f = (('%s' % prefix) + '%s').__mod__
         return self.rename(columns=f)
diff --git a/pandas/sparse/series.py b/pandas/sparse/series.py
index 4001ef7b0..13f49cd09 100644
--- a/pandas/sparse/series.py
+++ b/pandas/sparse/series.py
@@ -409,6 +409,18 @@ to sparse
                             sparse_index=new_index,
                             fill_value=self.fill_value)
 
+    def take(self, indices, axis=0):
+        """
+        Sparse-compatible version of ndarray.take
+
+        Returns
+        -------
+        taken : ndarray
+        """
+        new_values = SparseArray.take(self, indices)
+        new_index = self.index.take(indices)
+        return self._constructor(new_values, index=new_index)
+
     def cumsum(self, axis=0, dtype=None, out=None):
         """
         Cumulative sum of values. Preserves locations of NaN values
diff --git a/pandas/sparse/tests/test_sparse.py b/pandas/sparse/tests/test_sparse.py
index 4cf07bc60..49c96b51e 100644
--- a/pandas/sparse/tests/test_sparse.py
+++ b/pandas/sparse/tests/test_sparse.py
@@ -352,7 +352,8 @@ class TestSparseSeries(TestCase,
             def _compare(idx):
                 dense_result = dense.take(idx).values
                 sparse_result = sp.take(idx)
-                assert_almost_equal(dense_result, sparse_result)
+                self.assert_(isinstance(sparse_result, SparseSeries))
+                assert_almost_equal(dense_result, sparse_result.values)
 
             _compare([1., 2., 3., 4., 5., 0.])
             _compare([7, 2, 9, 0, 4])
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 537f1f637..f4370ea9b 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -1285,14 +1285,35 @@ class TestGroupBy(unittest.TestCase):
         result = df.groupby(['foo', 'bar']).mean()
         expected = df.groupby([df['foo'], df['bar']]).mean()[['val']]
 
-
-class TestPanelGroupBy(unittest.TestCase):
-
-    def setUp(self):
+    def test_dictify(self):
+        dict(iter(self.df.groupby('A')))
+        dict(iter(self.df.groupby(['A', 'B'])))
+        dict(iter(self.df['C'].groupby(self.df['A'])))
+        dict(iter(self.df['C'].groupby([self.df['A'], self.df['B']])))
+        dict(iter(self.df.groupby('A')['C']))
+        dict(iter(self.df.groupby(['A', 'B'])['C']))
+
+    def test_sparse_friendly(self):
+        sdf = self.df[['C', 'D']].to_sparse()
+        panel = tm.makePanel()
+        tm.add_nans(panel)
+
+        def _check_work(gp):
+            gp.mean()
+            gp.agg(np.mean)
+            dict(iter(gp))
+
+        # it works!
+        _check_work(sdf.groupby(lambda x: x // 2))
+        _check_work(sdf['C'].groupby(lambda x: x // 2))
+        _check_work(sdf.groupby(self.df['A']))
+
+        # do this someday
+        # _check_work(panel.groupby(lambda x: x.month, axis=1))
+
+    def test_panel_groupby(self):
         self.panel = tm.makePanel()
         tm.add_nans(self.panel)
-
-    def test_groupby(self):
         grouped = self.panel.groupby({'ItemA' : 0, 'ItemB' : 0, 'ItemC' : 1},
                                      axis='items')
         agged = grouped.agg(np.mean)
