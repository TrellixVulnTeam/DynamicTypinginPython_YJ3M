commit 36f60c7321f2a35e42698408af5eafbac95b8e08
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Jan 17 13:31:08 2012 -0500

    TST: hack more cleverly around NumPy 1.5.1 bug

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 0a5ee1d94..531113e5f 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -29,7 +29,7 @@ from pandas.core.generic import NDFrame
 from pandas.core.index import Index, MultiIndex, NULL_INDEX, _ensure_index
 from pandas.core.indexing import _NDFrameIndexer, _maybe_droplevels
 from pandas.core.internals import BlockManager, make_block, form_blocks
-from pandas.core.series import Series
+from pandas.core.series import Series, _radd_compat
 from pandas.util import py3compat
 from pandas.util.terminal import get_terminal_size
 from pandas.util.decorators import deprecate, Appender, Substitution
@@ -486,7 +486,7 @@ class DataFrame(NDFrame):
     sub = _arith_method(operator.sub, 'subtract')
     div = _arith_method(lambda x, y: x / y, 'divide')
 
-    radd = _arith_method(lambda x, y: y + x, 'radd')
+    radd = _arith_method(_radd_compat, 'radd')
     rmul = _arith_method(operator.mul, 'rmultiply')
     rsub = _arith_method(lambda x, y: y - x, 'rsubtract')
     rdiv = _arith_method(lambda x, y: y / x, 'rdivide')
@@ -500,7 +500,7 @@ class DataFrame(NDFrame):
                                default_axis=None)
     __pow__ = _arith_method(operator.pow, '__pow__', default_axis=None)
 
-    __radd__ = _arith_method(lambda x, y: y + x, '__radd__', default_axis=None)
+    __radd__ = _arith_method(_radd_compat, '__radd__', default_axis=None)
     __rmul__ = _arith_method(operator.mul, '__rmul__', default_axis=None)
     __rsub__ = _arith_method(lambda x, y: y - x, '__rsub__', default_axis=None)
     __rtruediv__ = _arith_method(lambda x, y: y / x, '__rtruediv__',
diff --git a/pandas/core/series.py b/pandas/core/series.py
index f7660dff5..22632ce51 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -61,20 +61,27 @@ def _arith_method(op, name):
         elif isinstance(other, DataFrame):
             return NotImplemented
         else:
-            # GH #353, NumPy 1.5.1 workaround
-            try:
-                result_values = op(self.values, other)
-            except TypeError:
-                if _np_version.startswith('1.5'): # pragma: no cover
-                    result_values = [op(x, other) for x in self.values]
-                else:
-                    raise
-
             # scalars
-            return Series(result_values, index=self.index,
+            return Series(op(self.values, other), index=self.index,
                           name=self.name)
     return wrapper
 
+def _radd_compat(left, right):
+    radd = lambda x, y: y + x
+    # GH #353, NumPy 1.5.1 workaround
+    try:
+        output = radd(left, right)
+    except TypeError:
+        cond = (_np_version.startswith('1.5') and
+                left.dtype == np.object_)
+        if cond: # pragma: no cover
+            output = np.empty_like(left)
+            output.flat[:] = [radd(x, right) for x in left]
+        else:
+            raise
+
+    return output
+
 def _maybe_match_name(a, b):
     name = None
     if a.name == b.name:
@@ -581,7 +588,7 @@ copy : boolean, default False
     __floordiv__ = _arith_method(operator.floordiv, '__floordiv__')
     __pow__ = _arith_method(operator.pow, '__pow__')
 
-    __radd__ = _arith_method(lambda x, y: y + x, '__add__')
+    __radd__ = _arith_method(_radd_compat, '__add__')
     __rmul__ = _arith_method(operator.mul, '__mul__')
     __rsub__ = _arith_method(lambda x, y: y - x, '__sub__')
     __rtruediv__ = _arith_method(lambda x, y: y / x, '__truediv__')
