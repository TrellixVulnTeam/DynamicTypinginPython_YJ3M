commit 176450a331ab0dbe03b0d28d03799aafb420226b
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Sep 5 22:16:29 2011 -0400

    ENH: stack/unstack seem to be working. unit tests pass

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 63ff17fb9..678d3d088 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -507,7 +507,7 @@ class DataFrame(NDFrame):
         from pandas.core.common import _format, adjoin
         import sys
 
-        if buf is None:
+        if buf is None:  # pragma: no cover
             buf = sys.stdout
 
         if colSpace is None:
@@ -585,7 +585,7 @@ class DataFrame(NDFrame):
         buf : writable buffer, defaults to sys.stdout
         """
         import sys
-        if buf is None:
+        if buf is None:  # pragma: no cover
             buf = sys.stdout
 
         print >> buf, str(type(self))
@@ -1668,7 +1668,7 @@ class DataFrame(NDFrame):
             unstacked.columns = unstacked.columns.droplevel(0)
         return unstacked
 
-    def stack(self, level=-1):
+    def stack(self, level=-1, dropna=True):
         """
         Convert DataFrame to Series with multi-level Index. Columns become the
         second level of the resulting hierarchical index
@@ -1679,7 +1679,7 @@ class DataFrame(NDFrame):
         """
         N, K = self.shape
         if isinstance(self.columns, MultiIndex):
-            return self._stack_multi_columns(level=level)
+            return self._stack_multi_columns(level=level, dropna=True)
         elif isinstance(self.index, MultiIndex):
 
             new_levels = list(self.index.levels)
@@ -1698,9 +1698,14 @@ class DataFrame(NDFrame):
             new_index = MultiIndex(levels=[self.index, self.columns],
                                    labels=[ilabels, clabels])
 
-        return Series(self.values.ravel(), index=new_index)
+        new_values = self.values.ravel()
+        if dropna:
+            mask = notnull(new_values)
+            new_values = new_values[mask]
+            new_index = new_index[mask]
+        return Series(new_values, index=new_index)
 
-    def _stack_multi_columns(self, level=-1):
+    def _stack_multi_columns(self, level=-1, dropna=True):
         import itertools
         this = self.copy()
         if level < 0:
@@ -1741,7 +1746,7 @@ class DataFrame(NDFrame):
             if loc.stop - loc.start != levsize:
                 chunk = this.ix[:, this.columns[loc]]
                 chunk.columns = level_vals.take(chunk.columns.labels[-1])
-                value_slice = chunk.reindex(columns=level_vals).value
+                value_slice = chunk.reindex(columns=level_vals).values
             else:
                 if self._is_mixed_type:
                     value_slice = this.ix[:, this.columns[loc]].values
@@ -1769,8 +1774,12 @@ class DataFrame(NDFrame):
                                names=new_names)
 
         result = DataFrame(new_data, index=new_index, columns=new_columns)
-        # more efficient way to go about this?
-        result = result.dropna(axis=0, how='all')
+
+        # more efficient way to go about this? can do the whole masking biz but
+        # will only save a small amount of time...
+        if dropna:
+            result = result.dropna(axis=0, how='all')
+
         return result
 
     def unstack(self, level=-1):
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index af0222089..040b72938 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -1,5 +1,5 @@
 from pandas.core.common import _asarray_tuplesafe
-from pandas.core.index import MultiIndex
+from pandas.core.index import Index, MultiIndex
 
 import numpy as np
 
@@ -232,7 +232,11 @@ class _DataFrameIndexer(object):
         axis_name = self.frame._get_axis_name(axis)
 
         # asarray can be unsafe, NumPy strings are weird
-        keyarr = _asarray_tuplesafe(key)
+        if isinstance(key, Index):
+            # want Index objects to pass through untouched
+            keyarr = key
+        else:
+            keyarr = _asarray_tuplesafe(key)
 
         if keyarr.dtype == np.bool_:
             if isinstance(key, Series):
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 58c80c719..c4d53eff0 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1361,9 +1361,9 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
 
         assert_frame_equal(self.tsframe, recons)
 
-        # not sure if this ever should have worked
-        # recons = DataFrame.from_csv(path, index_col=None)
-        # assert(len(recons.columns) == len(self.tsframe.columns) + 1)
+        self.tsframe.to_csv(path, index_label='index')
+        recons = DataFrame.from_csv(path, index_col=None)
+        assert(len(recons.columns) == len(self.tsframe.columns) + 1)
 
         # no index
         self.tsframe.to_csv(path, index=False)
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 7997d38f6..656f413e5 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -579,7 +579,7 @@ class TestGroupBy(unittest.TestCase):
             expd = {}
             for (cat1, cat2), group in grouped:
                 expd.setdefault(cat1, {})[cat2] = op(group['C'])
-            exp = DataFrame(expd).T.stack()
+            exp = DataFrame(expd).T.stack(dropna=False)
             result = op(grouped)['C']
             assert_series_equal(result, exp)
 
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index 89605f754..4ec8b6c40 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -50,6 +50,21 @@ class TestMultiLevel(unittest.TestCase):
         expected = self.frame.ix[[0, 3]]
         assert_frame_equal(reindexed, expected)
 
+    def test_reindex_preserve_levels(self):
+        new_index = self.ymd.index[::10]
+        chunk = self.ymd.reindex(new_index)
+        self.assert_(chunk.index is new_index)
+
+        chunk = self.ymd.ix[new_index]
+        self.assert_(chunk.index is new_index)
+
+        ymdT = self.ymd.T
+        chunk = ymdT.reindex(columns=new_index)
+        self.assert_(chunk.columns is new_index)
+
+        chunk = ymdT.ix[:, new_index]
+        self.assert_(chunk.columns is new_index)
+
     def test_repr_to_string(self):
         repr(self.frame)
         repr(self.ymd)
@@ -277,6 +292,12 @@ class TestMultiLevel(unittest.TestCase):
         expected = self.ymd.stack().unstack(1).unstack(1)
         assert_frame_equal(result, expected)
 
+        # not all levels present in each echelon
+        unstacked = self.ymd.unstack(2).ix[:, ::3]
+        stacked = unstacked.stack().stack()
+        ymd_stacked = self.ymd.stack()
+        assert_series_equal(stacked, ymd_stacked.reindex(stacked.index))
+
     def test_insert_index(self):
         df = self.ymd[:5].T
         df[2000, 1, 10] = df[2000, 1, 7]
