commit 90cddeecef813e591dfb15abea7691aca3f997e2
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Dec 13 23:27:04 2012 -0500

    BUG: use Series name attributes for colnames in concat with axis=1. close #2489

diff --git a/RELEASE.rst b/RELEASE.rst
index 0d4d6670c..7e4eb0e69 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -235,6 +235,7 @@ pandas 0.10.0
   - DataFrame.combine_first will always result in the union of the index and
     columns, even if one DataFrame is length-zero (GH2525_)
   - Fix several DataFrame.icol/irow with duplicate indices issues (GH2228_, GH2259_)
+  - Use Series names for column names when using concat with axis=1 (GH2489_)
 
 .. _GH407: https://github.com/pydata/pandas/issues/407
 .. _GH821: https://github.com/pydata/pandas/issues/821
@@ -353,6 +354,7 @@ pandas 0.10.0
 .. _GH2525: https://github.com/pydata/pandas/issues/2525
 .. _GH2228: https://github.com/pydata/pandas/issues/2228
 .. _GH2259: https://github.com/pydata/pandas/issues/2259
+.. _GH2489: https://github.com/pydata/pandas/issues/2489
 
 
 pandas 0.9.1
diff --git a/pandas/tools/merge.py b/pandas/tools/merge.py
index 0a6d38ea8..e2086fc84 100644
--- a/pandas/tools/merge.py
+++ b/pandas/tools/merge.py
@@ -1140,7 +1140,13 @@ class _Concatenator(object):
             if self.axis == 0:
                 indexes = [x.index for x in self.objs]
             elif self.keys is None:
-                return Index(np.arange(len(self.objs)))
+                names = []
+                for x in self.objs:
+                    if x.name is not None:
+                        names.append(x.name)
+                    else:
+                        return Index(np.arange(len(self.objs)))
+                return Index(names)
             else:
                 return _ensure_index(self.keys)
         else:
diff --git a/pandas/tools/tests/test_merge.py b/pandas/tools/tests/test_merge.py
index 5df54537c..b41ceb3e0 100644
--- a/pandas/tools/tests/test_merge.py
+++ b/pandas/tools/tests/test_merge.py
@@ -1497,6 +1497,18 @@ class TestConcatenate(unittest.TestCase):
         expected = DataFrame(pieces, index=['A', 'B', 'C']).T
         assert_frame_equal(result, expected)
 
+        # preserve series names, #2489
+        s = Series(randn(5), name='A')
+        s2 = Series(randn(5), name='B')
+
+        result = concat([s, s2], axis=1)
+        expected = DataFrame({'A': s, 'B': s2})
+        assert_frame_equal(result, expected)
+
+        s2.name = None
+        result = concat([s, s2], axis=1)
+        self.assertTrue(np.array_equal(result.columns, range(2)))
+
     def test_concat_single_with_key(self):
         df = DataFrame(np.random.randn(10, 4))
 
