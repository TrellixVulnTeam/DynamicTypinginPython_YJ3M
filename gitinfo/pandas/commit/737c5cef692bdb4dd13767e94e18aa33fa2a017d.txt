commit 737c5cef692bdb4dd13767e94e18aa33fa2a017d
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri May 25 17:53:23 2012 -0400

    BUG: handle list of integers in DatetimeIndex constructor, close #1303

diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index b1f748a28..942cee17f 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -962,7 +962,7 @@ def _read_array(group, key):
 
 def _unconvert_index(data, kind):
     if kind == 'datetime64':
-        index = np.array(data, dtype='M8[ns]')
+        index = np.asarray(data, dtype='M8[ns]')
     elif kind == 'datetime':
         index = np.array([datetime.fromtimestamp(v) for v in data],
                          dtype=object)
@@ -978,7 +978,7 @@ def _unconvert_index(data, kind):
 
 def _unconvert_index_legacy(data, kind, legacy=False):
     if kind == 'datetime':
-        index = lib.array_to_datetime(data)
+        index = lib.time64_to_datetime(data)
     elif kind in ('string', 'integer'):
         index = np.array(data, dtype=object)
     else: # pragma: no cover
diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index c0fdb4a00..2953a1731 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -801,9 +801,9 @@ cdef class DayOffset(_Offset):
 #        offset.next()
 #    return i
 
-def string_to_datetime(ndarray[object] strings, raise_=False, dayfirst=False):
+def array_to_datetime(ndarray[object] values, raise_=False, dayfirst=False):
     cdef:
-        Py_ssize_t i, n = len(strings)
+        Py_ssize_t i, n = len(values)
         object val
         ndarray[int64_t] iresult
         ndarray[object] oresult
@@ -815,7 +815,7 @@ def string_to_datetime(ndarray[object] strings, raise_=False, dayfirst=False):
         result = np.empty(n, dtype='M8[ns]')
         iresult = result.view('i8')
         for i in range(n):
-            val = strings[i]
+            val = values[i]
             if util._checknull(val):
                 iresult[i] = NaT
             elif PyDateTime_Check(val):
@@ -824,6 +824,8 @@ def string_to_datetime(ndarray[object] strings, raise_=False, dayfirst=False):
                 iresult[i] = _date_to_datetime64(val, &dts)
             elif util.is_datetime64_object(val):
                 iresult[i] = _get_datetime64_nanos(val)
+            elif util.is_integer_object(val):
+                iresult[i] = val
             else:
                 if len(val) == 0:
                     iresult[i] = NaT
@@ -837,7 +839,7 @@ def string_to_datetime(ndarray[object] strings, raise_=False, dayfirst=False):
         oresult = np.empty(n, dtype=object)
 
         for i in range(n):
-            val = strings[i]
+            val = values[i]
             if util._checknull(val):
                 oresult[i] = val
             else:
@@ -849,7 +851,7 @@ def string_to_datetime(ndarray[object] strings, raise_=False, dayfirst=False):
                 except Exception:
                     if raise_:
                         raise
-                    return strings
+                    return values
                     # oresult[i] = val
 
         return oresult
diff --git a/pandas/src/tseries.pyx b/pandas/src/tseries.pyx
index 8db04bc63..35d2b6591 100644
--- a/pandas/src/tseries.pyx
+++ b/pandas/src/tseries.pyx
@@ -162,7 +162,7 @@ def array_to_timestamp(ndarray[object, ndim=1] arr):
 
     return result
 
-def array_to_datetime(ndarray[int64_t, ndim=1] arr):
+def time64_to_datetime(ndarray[int64_t, ndim=1] arr):
     cdef int i, n
     cdef ndarray[object, ndim=1] result
 
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 77f1badf0..2bd140ac6 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -396,7 +396,7 @@ class TestTimeSeries(unittest.TestCase):
             else:
                 expected[i] = parse(val)
 
-        result = lib.string_to_datetime(strings)
+        result = lib.array_to_datetime(strings)
         assert_almost_equal(result, expected)
 
         result2 = to_datetime(strings)
@@ -452,6 +452,16 @@ class TestTimeSeries(unittest.TestCase):
         value = Timestamp(scalar)
         self.assertEquals(value, as_obj)
 
+    def test_to_datetime_list_of_integers(self):
+        rng = date_range('1/1/2000', periods=20)
+        rng = DatetimeIndex(rng.values)
+
+        ints = list(rng.asi8)
+
+        result = DatetimeIndex(ints)
+
+        self.assert_(rng.equals(result))
+
     def test_index_to_datetime(self):
         idx = Index(['1/1/2000', '1/2/2000', '1/3/2000'])
 
diff --git a/pandas/tseries/tools.py b/pandas/tseries/tools.py
index f770fee21..f2060ad84 100644
--- a/pandas/tseries/tools.py
+++ b/pandas/tseries/tools.py
@@ -84,16 +84,16 @@ def to_datetime(arg, errors='ignore', dayfirst=False):
     elif isinstance(arg, datetime):
         return arg
     elif isinstance(arg, Series):
-        values = lib.string_to_datetime(com._ensure_object(arg.values),
-                                        raise_=errors == 'raise',
-                                        dayfirst=dayfirst)
+        values = lib.array_to_datetime(com._ensure_object(arg.values),
+                                       raise_=errors == 'raise',
+                                       dayfirst=dayfirst)
         return Series(values, index=arg.index, name=arg.name)
     elif isinstance(arg, (np.ndarray, list)):
         if isinstance(arg, list):
             arg = np.array(arg, dtype='O')
-        result = lib.string_to_datetime(com._ensure_object(arg),
-                                        raise_=errors == 'raise',
-                                        dayfirst=dayfirst)
+        result = lib.array_to_datetime(com._ensure_object(arg),
+                                       raise_=errors == 'raise',
+                                       dayfirst=dayfirst)
         if com.is_datetime64_dtype(result):
             result = DatetimeIndex(result)
         return result
