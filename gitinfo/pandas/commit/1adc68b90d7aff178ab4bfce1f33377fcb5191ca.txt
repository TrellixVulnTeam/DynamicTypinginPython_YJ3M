commit 1adc68b90d7aff178ab4bfce1f33377fcb5191ca
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jun 14 15:08:35 2012 -0400

    BUG: fix intraday resampling to daily superperiod bugs raised in #1458 and #1471

diff --git a/pandas/tseries/frequencies.py b/pandas/tseries/frequencies.py
index 53d6bb6c8..ea108ee76 100644
--- a/pandas/tseries/frequencies.py
+++ b/pandas/tseries/frequencies.py
@@ -902,6 +902,12 @@ def is_subperiod(source, target):
     -------
     is_subperiod : boolean
     """
+    if isinstance(source, offsets.DateOffset):
+        source = source.rule_code
+
+    if isinstance(target, offsets.DateOffset):
+        target = target.rule_code
+
     target = target.upper()
     source = source.upper()
     if _is_annual(target):
@@ -933,6 +939,12 @@ def is_superperiod(source, target):
     -------
     is_superperiod : boolean
     """
+    if isinstance(source, offsets.DateOffset):
+        source = source.rule_code
+
+    if isinstance(target, offsets.DateOffset):
+        target = target.rule_code
+
     target = target.upper()
     source = source.upper()
     if _is_annual(source):
@@ -974,11 +986,13 @@ def _quarter_months_conform(source, target):
     return snum % 3 == tnum % 3
 
 def _is_quarterly(rule):
-    return rule.upper().startswith('Q-')
+    rule = rule.upper()
+    return rule == 'Q' or rule.startswith('Q-')
 
 
 def _is_weekly(rule):
-    return rule.upper().startswith('W-')
+    rule = rule.upper()
+    return rule == 'W' or rule.startswith('W-')
 
 
 DAYS = ['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN']
diff --git a/pandas/tseries/resample.py b/pandas/tseries/resample.py
index 9c86d5a1d..507270b1f 100644
--- a/pandas/tseries/resample.py
+++ b/pandas/tseries/resample.py
@@ -5,7 +5,7 @@ import numpy as np
 from pandas.core.groupby import BinGrouper, CustomGrouper
 from pandas.tseries.frequencies import to_offset, is_subperiod, is_superperiod
 from pandas.tseries.index import DatetimeIndex, date_range
-from pandas.tseries.offsets import DateOffset
+from pandas.tseries.offsets import DateOffset, Tick, _delta_to_nanoseconds
 from pandas.tseries.period import Period, PeriodIndex, period_range
 from pandas.util.decorators import cache_readonly
 import pandas.core.common as com
@@ -105,8 +105,24 @@ class TimeGrouper(CustomGrouper):
             binner = binner[:-1]
             trimmed = True
 
+        ax_values = axis.asi8
+        bin_edges = binner.asi8
+
+        # Some hacks for > daily data, see #1471, #1458
+        if self.freq != 'D' and is_superperiod(self.freq, 'D'):
+            day_nanos = _delta_to_nanoseconds(timedelta(1))
+            if self.closed == 'right':
+                bin_edges = bin_edges + day_nanos - 1
+            else:
+                bin_edges = bin_edges + day_nanos
+
+            # intraday values on last day
+            if bin_edges[-2] > ax_values[-1]:
+                bin_edges = bin_edges[:-1]
+                binner = binner[:-1]
+
         # general version, knowing nothing about relative frequencies
-        bins = lib.generate_bins_dt64(axis.asi8, binner.asi8, self.closed)
+        bins = lib.generate_bins_dt64(ax_values, bin_edges, self.closed)
 
         if self.closed == 'right':
             labels = binner
@@ -236,7 +252,6 @@ def _take_new_index(obj, indexer, new_index, axis=0):
 
 def _get_range_edges(axis, begin, end, offset, closed='left',
                      base=0):
-    from pandas.tseries.offsets import Tick, _delta_to_nanoseconds
     if isinstance(offset, basestring):
         offset = to_offset(offset)
 
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index 0516c2770..c2a331796 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -9,6 +9,7 @@ from pandas.tseries.offsets import Minute, BDay
 from pandas.tseries.period import period_range, PeriodIndex
 from pandas.tseries.resample import DatetimeIndex, TimeGrouper
 import pandas.tseries.offsets as offsets
+import pandas as pd
 
 import unittest
 import nose
@@ -429,6 +430,41 @@ class TestResample(unittest.TestCase):
         expected = ts.resample('W-SUN')
         assert_series_equal(resampled, expected)
 
+    def test_monthly_resample_error(self):
+        # #1451
+        dates = date_range('4/16/2012 20:00', periods=5000, freq='h')
+        ts = Series(np.random.randn(len(dates)), index=dates)
+        # it works!
+        result = ts.resample('M')
+
+    def test_resample_anchored_intraday(self):
+        # #1471, #1458
+
+        rng = pd.date_range('1/1/2012', '4/1/2012', freq='10min')
+        df = DataFrame(rng.month, index=rng)
+
+        result = df.resample('M')
+        expected = df.resample('M', kind='period').to_timestamp()
+        tm.assert_frame_equal(result, expected)
+
+        result = df.resample('M', closed='left')
+        expected = df.resample('M', kind='period', closed='left').to_timestamp()
+        tm.assert_frame_equal(result, expected)
+
+        rng = pd.date_range('1/1/2012', '4/1/2013', freq='10min')
+        df = DataFrame(rng.month, index=rng)
+
+        result = df.resample('Q')
+        expected = df.resample('Q', kind='period').to_timestamp()
+        tm.assert_frame_equal(result, expected)
+
+        result = df.resample('Q', closed='left')
+        expected = df.resample('Q', kind='period', closed='left').to_timestamp()
+        tm.assert_frame_equal(result, expected)
+
+
+rng = pd.date_range('1/1/2012', '4/1/2015', freq='10min')
+df = DataFrame(rng.month, index=rng)
 
 def _simple_ts(start, end, freq='D'):
     rng = date_range(start, end, freq=freq)
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index ab779e0cd..cd4a0169f 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -927,12 +927,6 @@ class TestTimeSeries(unittest.TestCase):
 
         assert_series_equal(result, expected)
 
-    def test_monthly_resample_error(self):
-        # #1451
-        dates = date_range('4/16/2012 20:00', periods=5000, freq='h')
-        ts = Series(randn(len(dates)), index=dates)
-        # it works!
-        result = ts.resample('M')
 
 def _simple_ts(start, end, freq='D'):
     rng = date_range(start, end, freq=freq)
