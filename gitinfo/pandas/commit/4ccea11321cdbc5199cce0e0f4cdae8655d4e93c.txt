commit 4ccea11321cdbc5199cce0e0f4cdae8655d4e93c
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Fri Oct 25 10:10:32 2019 -0700

    CLN: AttributeError in _wrap_applied_output (#29195)

diff --git a/pandas/core/base.py b/pandas/core/base.py
index 5ae392695..9586d49c5 100644
--- a/pandas/core/base.py
+++ b/pandas/core/base.py
@@ -571,8 +571,6 @@ class SelectionMixin:
 
                 except (TypeError, DataError):
                     pass
-                except SpecificationError:
-                    raise
                 else:
                     results.append(new_res)
 
@@ -591,8 +589,6 @@ class SelectionMixin:
                 except ValueError:
                     # cannot aggregate
                     continue
-                except SpecificationError:
-                    raise
                 else:
                     results.append(new_res)
                     keys.append(col)
diff --git a/pandas/core/groupby/generic.py b/pandas/core/groupby/generic.py
index 695823e29..647eb5a2d 100644
--- a/pandas/core/groupby/generic.py
+++ b/pandas/core/groupby/generic.py
@@ -480,7 +480,7 @@ class SeriesGroupBy(GroupBy):
             out = self._try_cast(out, self.obj)
         return Series(out, index=self.obj.index, name=self.obj.name)
 
-    def filter(self, func, dropna=True, *args, **kwargs):  # noqa
+    def filter(self, func, dropna=True, *args, **kwargs):
         """
         Return a copy of a Series excluding elements from groups that
         do not satisfy the boolean criterion specified by func.
@@ -1228,7 +1228,7 @@ class DataFrameGroupBy(GroupBy):
                         return self._concat_objects(keys, values, not_indexed_same=True)
 
                 try:
-                    if self.axis == 0:
+                    if self.axis == 0 and isinstance(v, ABCSeries):
                         # GH6124 if the list of Series have a consistent name,
                         # then propagate that name to the result.
                         index = v.index.copy()
@@ -1264,15 +1264,24 @@ class DataFrameGroupBy(GroupBy):
                                 axis=self.axis,
                             ).unstack()
                             result.columns = index
-                    else:
+                    elif isinstance(v, ABCSeries):
                         stacked_values = np.vstack([np.asarray(v) for v in values])
                         result = DataFrame(
                             stacked_values.T, index=v.index, columns=key_index
                         )
+                    else:
+                        # GH#1738: values is list of arrays of unequal lengths
+                        #  fall through to the outer else clause
+                        # TODO: sure this is right?  we used to do this
+                        #  after raising AttributeError above
+                        return Series(
+                            values, index=key_index, name=self._selection_name
+                        )
 
-                except (ValueError, AttributeError):
+                except ValueError:
+                    # TODO: not reached in tests; is this still needed?
                     # GH1738: values is list of arrays of unequal lengths fall
-                    # through to the outer else caluse
+                    # through to the outer else clause
                     return Series(values, index=key_index, name=self._selection_name)
 
                 # if we have date/time like in the original, then coerce dates
diff --git a/pandas/core/groupby/ops.py b/pandas/core/groupby/ops.py
index fbe159876..79b51ef57 100644
--- a/pandas/core/groupby/ops.py
+++ b/pandas/core/groupby/ops.py
@@ -199,6 +199,9 @@ class BaseGrouper:
             f_name not in base.plotting_methods
             and hasattr(splitter, "fast_apply")
             and axis == 0
+            # with MultiIndex, apply_frame_axis0 would raise InvalidApply
+            # TODO: can we make this check prettier?
+            and not splitter._get_sorted_data().index._has_complex_internals
         ):
             try:
                 result_values, mutated = splitter.fast_apply(f, group_keys)
@@ -208,11 +211,14 @@ class BaseGrouper:
                 if len(result_values) == len(group_keys):
                     return group_keys, result_values, mutated
 
-            except libreduction.InvalidApply:
+            except libreduction.InvalidApply as err:
                 # Cannot fast apply on MultiIndex (_has_complex_internals).
                 # This Exception is also raised if `f` triggers an exception
                 # but it is preferable to raise the exception in Python.
-                pass
+                if "Let this error raise above us" not in str(err):
+                    # TODO: can we infer anything about whether this is
+                    #  worth-retrying in pure-python?
+                    raise
             except TypeError as err:
                 if "Cannot convert" in str(err):
                     # via apply_frame_axis0 if we pass a non-ndarray
