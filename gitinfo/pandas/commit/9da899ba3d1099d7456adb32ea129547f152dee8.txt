commit 9da899ba3d1099d7456adb32ea129547f152dee8
Author: Phillip Cloud <cpcloud@gmail.com>
Date:   Fri Aug 2 00:30:25 2013 -0400

    BUG: allow cummethods to work with bool dtypes

diff --git a/doc/source/release.rst b/doc/source/release.rst
index 92822e303..9af04a8d7 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -127,6 +127,8 @@ pandas 0.13
     (:issue:`3440`)
   - Fixed an issue where duplicate indexes were raising when plotting
     (:issue:`4486`)
+  - Fixed an issue where cumsum and cumprod didn't work with bool dtypes
+    (:issue:`4170`, :issue:`4440`)
 
 pandas 0.12
 ===========
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 4899c53ad..69a4cadcc 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1654,7 +1654,8 @@ class Series(generic.PandasContainer, pa.Array):
         """
         arr = self.values.copy()
 
-        do_mask = skipna and not issubclass(self.dtype.type, np.integer)
+        do_mask = skipna and not issubclass(self.dtype.type,
+                                            (np.integer, np.bool_))
         if do_mask:
             mask = isnull(arr)
             np.putmask(arr, mask, 0.)
@@ -1683,7 +1684,8 @@ class Series(generic.PandasContainer, pa.Array):
         """
         arr = self.values.copy()
 
-        do_mask = skipna and not issubclass(self.dtype.type, np.integer)
+        do_mask = skipna and not issubclass(self.dtype.type,
+                                            (np.integer, np.bool_))
         if do_mask:
             mask = isnull(arr)
             np.putmask(arr, mask, 1.)
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 43fe96dbd..ef90ec62f 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -3963,6 +3963,39 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         ts[2] = np.NaN
         assert_series_equal(ts.bfill(), ts.fillna(method='bfill'))
 
+    def test_cummethods_bool(self):
+        def cummin(x):
+            return np.minimum.accumulate(x)
+
+        def cummax(x):
+            return np.maximum.accumulate(x)
+
+        from itertools import product
+        a = pd.Series([False, False, False, True, True, False, False])
+        b = ~a
+        c = pd.Series([False] * len(b))
+        d = ~c
+        methods = {'cumsum': np.cumsum, 'cumprod': np.cumprod,
+                   'cummin': cummin, 'cummax': cummax}
+        args = product((a, b, c, d), methods)
+        for s, method in args:
+            expected = Series(methods[method](s.values))
+            result = getattr(s, method)()
+            assert_series_equal(result, expected)
+
+        e = pd.Series([False, True, nan, False])
+        cse = pd.Series([0, 1, nan, 1], dtype=object)
+        cpe = pd.Series([False, 0, nan, 0])
+        cmin = pd.Series([False, False, nan, False])
+        cmax = pd.Series([False, True, nan, True])
+        expecteds = {'cumsum': cse, 'cumprod': cpe, 'cummin': cmin,
+                     'cummax': cmax}
+
+        for method in methods:
+            res = getattr(e, method)()
+            assert_series_equal(res, expecteds[method])
+
+
     def test_replace(self):
         N = 100
         ser = Series(np.random.randn(N))
