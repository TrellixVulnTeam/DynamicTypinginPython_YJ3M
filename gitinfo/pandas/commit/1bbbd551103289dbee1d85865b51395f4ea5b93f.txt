commit 1bbbd551103289dbee1d85865b51395f4ea5b93f
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Aug 25 19:22:50 2011 -0400

    DOC: small amount of cleanup in ipython_directive

diff --git a/doc/source/dataframe.rst b/doc/source/dataframe.rst
index 0e8edd74a..6e60fcd8e 100644
--- a/doc/source/dataframe.rst
+++ b/doc/source/dataframe.rst
@@ -90,7 +90,10 @@ There are many ways to create a DataFrame:
 Indexing basics
 ---------------
 
-.. seealso:: :ref:`Indexing (main documentation) <indexing>`
+.. seealso::
+
+    :ref:`Indexing (main documentation) <indexing>` for a more complete
+	 catalogue of the indexing facilities of DataFrame
 
 Column access
 ~~~~~~~~~~~~~
@@ -178,10 +181,6 @@ supports slicing:
     df[::-1]
     df[-3:].T
 
-I do not recommend making heavy use of this functionality but rather using it
-as a convenience for interactive programming (useful for seeing the "head" or
-"tail" of a large DataFrame as in the last example).
-
 Boolean indexing
 ~~~~~~~~~~~~~~~~
 
@@ -247,21 +246,9 @@ keys, and the **index** values of a Series are viewed as *its* keys,
 the default behavior is to match the frame columns on the series
 index.
 
-::
+.. ipython:: python
 
-    >>> df - df.xs(df.index[5])
-               A              B              C
-    2009-01-30 00:00:00    -1.1677        -0.179934      2.90215
-    2009-02-27 00:00:00    -2.69939       -1.1941        0.902293
-    2009-03-31 00:00:00    -0.476266      0.587414       1.0695
-    2009-04-30 00:00:00    0.144924       1.12688        1.31556
-    2009-05-29 00:00:00    -1.25747       -1.40433       0.831226
-    2009-06-30 00:00:00    0              0              0
-    2009-07-31 00:00:00    0.518423       -0.988895      1.2905
-    2009-08-31 00:00:00    -0.670413      -0.643335      -1.52705
-    2009-09-30 00:00:00    -1.03922       0.554203       1.03304
-    2009-10-30 00:00:00    -0.725236      -0.0574399     0.116421
-    2009-11-30 00:00:00    -0.522503      0.105118       0.16428
+    df - df.xs(df.index[5])
 
 However, the user very frequently will want to subtract (or add,
 divide, multiply, ...) a TimeSeries from a DataFrame representing a
diff --git a/doc/sphinxext/ipython_directive.py b/doc/sphinxext/ipython_directive.py
index fb64e4c93..843138518 100644
--- a/doc/sphinxext/ipython_directive.py
+++ b/doc/sphinxext/ipython_directive.py
@@ -558,6 +558,18 @@ class EmbeddedSphinxShell(object):
                 modified_content.append(line)
                 continue
 
+            # handle decorators
+            if line_stripped.startswith('@'):
+                output.extend([line])
+                if 'savefig' in line:
+                    savefig = True # and need to clear figure
+                continue
+
+            # handle comments
+            if line_stripped.startswith('#'):
+                output.extend([line])
+                continue
+
             continuation  = u'   %s:'% ''.join(['.']*(len(str(ct))+2))
             if not multiline:
                 modified = u"%s %s" % (fmtin % ct, line_stripped)
@@ -581,66 +593,6 @@ class EmbeddedSphinxShell(object):
 
             continue
 
-            if not len(line):
-                output.append(line) # preserve empty lines in output
-                continue
-
-            # handle decorators
-            if line_stripped.startswith('@'):
-                output.extend([line])
-                if 'savefig' in line:
-                    savefig = True # and need to clear figure
-                continue
-
-            # handle comments
-            if line_stripped.startswith('#'):
-                output.extend([line])
-                continue
-
-            # deal with multilines
-            if not multiline: # not currently on a multiline
-
-                if line_stripped.endswith('\\'): # now we are
-                    multiline = True
-                    cont_len = len(str(lineno)) + 2
-                    line_to_process = line.strip('\\')
-                    output.extend([u"%s %s" % (fmtin%lineno,line)])
-                    continue
-                else: # no we're still not
-                    line_to_process = line.strip('\\')
-            else: # we are currently on a multiline
-                line_to_process += line.strip('\\')
-                if line_stripped.endswith('\\'): # and we still are
-                    continuation = '.' * cont_len
-                    output.extend([(u'   %s: '+line_stripped) % continuation])
-                    continue
-                # else go ahead and run this multiline then carry on
-
-            # get output of line
-            self.process_input_line(unicode(line_to_process.strip()),
-                                    store_history=False)
-            out_line = self.cout.getvalue()
-            self.clear_cout()
-
-            # clear current figure if plotted
-            if savefig:
-                self.ensure_pyplot()
-                self.process_input_line('plt.clf()', store_history=False)
-                self.clear_cout()
-                savefig = False
-
-            # line numbers don't actually matter, they're replaced later
-            if not multiline:
-                in_line = u"%s %s" % (fmtin%lineno,line)
-
-                output.extend([in_line])
-            else:
-                output.extend([(u'   %s: '+line_stripped) % continuation])
-                multiline = False
-            if len(out_line):
-                output.extend([out_line])
-            output.extend([u''])
-
         return modified_content
 
 class IpythonDirective(Directive):
