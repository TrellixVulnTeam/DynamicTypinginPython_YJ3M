commit 1ae727b401ad6d721cf654a5228d2fd3c43a84b3
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Jun 8 14:03:04 2011 -0400

    DataFrame unit tests pass. lots of work to do to deal with the type hierarchy

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index c084a7b70..dc3b1789e 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2497,11 +2497,11 @@ def _homogenize_series(data, index, dtype=None, force_copy=True):
             if force_copy:
                 v = v.copy()
 
-        # OK, I will relent for now.
-        if not issubclass(v.dtype.type, (float, int)):
-        #     v = v.astype(np.float64)
-        # else:
-            v = v.astype(object)
+        # # OK, I will relent for now.
+        # if not issubclass(v.dtype.type, (float, int)):
+        # #     v = v.astype(np.float64)
+        # # else:
+        #     v = v.astype(object)
 
         homogenized[k] = v
 
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index e9c7f40dc..72ee9c7c0 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -18,6 +18,7 @@ class Block(object):
         values = _convert_if_1d(values)
         self.values = values
         self.columns = _ensure_index(columns)
+        assert(len(self.columns) == values.shape[1])
 
     def __repr__(self):
         x, y = self.shape
@@ -256,27 +257,22 @@ class BlockManager(object):
         return block.get(col)
 
     def delete(self, col):
+        i, block = self._find_block(col)
         loc = self.columns.get_loc(col)
         self.columns = Index(np.delete(np.asarray(self.columns), loc))
-
-        i, block = self._find_block(col)
-        if len(block.columns) == 1:
-            self.blocks.pop(i)
-        else:
-            new_block = block.delete(col)
-            self.blocks[i] = new_block
+        self._delete_from_block(i, col)
 
     def set(self, col, value):
         """
         Set new column in-place. Does not consolidate. Adds new Block if not
         contained in the current set of columns
         """
-        assert(len(value) == self.block_length)
+        assert(len(value) == len(self))
         if col in self.columns:
             i, block = self._find_block(col)
             if _needs_other_dtype(block, value):
                 # delete from block, create and append new block
-                self.blocks[i] = block.delete(col)
+                self._delete_from_block(i, col)
                 self._add_new_block(col, value)
         else:
             # new block
@@ -286,6 +282,18 @@ class BlockManager(object):
             self.columns = _insert_into_columns(self.columns, col,
                                                 len(self.columns))
 
+    def _delete_from_block(self, i, col):
+        """
+        Delete and maybe remove the whole block
+        """
+        block = self.blocks[i]
+        assert(col in block.columns)
+        if len(block.columns) == 1:
+            self.blocks.pop(i)
+        else:
+            new_block = block.delete(col)
+            self.blocks[i] = new_block
+
     def _add_new_block(self, col, value):
         # Do we care about dtype at the moment?
         new_block = Block(value, [col])
@@ -347,8 +355,12 @@ def _slice_blocks(blocks, slice_obj):
 
 # TODO!
 def _needs_other_dtype(block, to_insert):
-    if to_insert.dtype != block.dtype:
-        pass
+    if block.dtype == np.float64:
+        return not issubclass(mat.dtype.type, (np.integer, np.floating))
+    elif block.dtype == np.object_:
+        return issubclass(mat.dtype.type, (np.integer, np.floating))
+    else:
+        raise Exception('have not handled this case yet')
 
 def _blocks_to_series_dict(blocks, index=None):
     series_dict = {}
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index 68163bb53..aae5978de 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -44,7 +44,6 @@ class DataMatrix(DataFrame):
     unless you are doing a lot of column insertion / deletion (which causes the
     underlying ndarray to have to be reallocated!).
     """
-    objects = None
     def __init__(self, data=None, index=None, columns=None):
         if data is None:
             data = {}
@@ -355,26 +354,6 @@ class DataMatrix(DataFrame):
 
         self._data.set(key, value)
 
-    _dataTypes = [np.float_, np.int_]
-    def _insert_float_dtype(self, key, value):
-        isObject = value.dtype not in self._dataTypes
-
-        # sanity check
-        if len(value) != len(self.index): # pragma: no cover
-            raise Exception('Column is wrong length')
-
-        self._data.set(key, value)
-
-        # if key in self.columns:
-        #     loc = self.columns.indexMap[key]
-        #     try:
-        #         # attempt coercion
-        #         self.values[:, loc] = value
-        #     except ValueError:
-        #         self._delete_column(loc)
-        #         self._delete_column_index(loc)
-        #         _put_object(value)
-
     def __delitem__(self, key):
         """
         Delete column from DataMatrix
@@ -509,13 +488,6 @@ class DataMatrix(DataFrame):
         # now put in the right order
         return _reorder_columns(values, order, columns)
 
-    def cols(self):
-        """Return sorted list of frame's columns"""
-        if self.objects is not None and len(self.objects.columns) > 0:
-            return list(self.columns.union(self.objects.columns))
-        else:
-            return list(self.columns)
-
     def copy(self):
         """
         Make a copy of this DataMatrix
@@ -661,17 +633,8 @@ class DataMatrix(DataFrame):
         """
         Returns a DataMatrix with the rows/columns switched.
         """
-        if self.objects is not None:
-            objectsT = self.objects.values.T
-            valuesT = self.values.T
-            new_values = np.concatenate((valuesT, objectsT), axis=0)
-            new_index = Index(np.concatenate((self.columns,
-                                              self.objects.columns)))
-
-            return DataMatrix(new_values, index=new_index, columns=self.index)
-        else:
-            return DataMatrix(data=self.values.T, index=self.columns,
-                              columns=self.index)
+        return DataMatrix(data=self.values.T, index=self.columns,
+                          columns=self.index)
 
     def shift(self, periods, offset=None, timeRule=None):
         """
@@ -852,7 +815,11 @@ def _init_matrix(values, index, columns):
     if columns is None:
         columns = _default_index(K)
 
-    return index, columns, values
+    columns = _ensure_index(columns)
+    block = Block(values, columns)
+    mgr = BlockManager([block], index, columns)
+
+    return index, columns, mgr
 
 def _reorder_columns(mat, current, desired):
     indexer, mask = common.get_indexer(current, desired, None)
diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index a702e93c7..3f27eec20 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -1845,7 +1845,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
 if __name__ == '__main__':
     # unittest.main()
     import nose
-    nose.runmodule(argv=[__file__,'-vvs','-x', '--pdb-failure'],
-                   exit=False)
-    # nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
+    # nose.runmodule(argv=[__file__,'-vvs','-x', '--pdb-failure'],
     #                exit=False)
+    nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
+                   exit=False)
