commit 7818500797e1b3b20b8f8d161168845ab837a3f1
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri May 6 15:15:16 2011 -0400

    SparseSeries getitem working correctly now

diff --git a/Makefile b/Makefile
new file mode 100644
index 000000000..25e253e2c
--- /dev/null
+++ b/Makefile
@@ -0,0 +1,6 @@
+
+sparse: pandas/lib/src/sparse.pyx
+	-python build_cython.py build_ext --inplace
+
+test: sparse
+	-python pandas/lib/tests/test_libsparse.py
\ No newline at end of file
diff --git a/pandas/lib/build.py b/build_cython.py
similarity index 74%
rename from pandas/lib/build.py
rename to build_cython.py
index bbae8fa90..365196129 100755
--- a/pandas/lib/build.py
+++ b/build_cython.py
@@ -5,10 +5,10 @@ from numpy.distutils.core import setup
 import numpy
 from Cython.Distutils import build_ext
 
-pyx_ext = Extension('tseries', ['src/tseries.pyx'],
+pyx_ext = Extension('pandas.lib.tseries', ['pandas/lib/src/tseries.pyx'],
                     include_dirs=[numpy.get_include()])
 
-sparse_ext = Extension('pandas.lib.sparse', ['src/sparse.pyx'],
+sparse_ext = Extension('pandas.lib.sparse', ['pandas/lib/src/sparse.pyx'],
                        include_dirs=[numpy.get_include()])
 
 setup(name='pandas.lib.tseries', description='Nothing',
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 8e5a64870..cba4c789e 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -131,6 +131,7 @@ class GroupBy(object):
         """
         Compute sum of values, excluding missing values
         """
+        # TODO: make NaN-friendly
         return self.aggregate(np.sum)
 
     def __getitem__(self, key):
diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index ab51a3eb7..150541b80 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -238,11 +238,11 @@ class SparseSeries(Series):
         self.sp_index = getattr(obj, 'sp_index', None)
         self.fill_value = getattr(obj, 'fill_value', None)
 
-    # TODO
     def __reduce__(self):
         """Necessary for making this object picklable"""
         object_state = list(ndarray.__reduce__(self))
-        subclass_state = (self.index, )
+
+        subclass_state = (self.index, self.fill_value, self.sp_index)
         object_state[2] = (object_state[2], subclass_state)
         return tuple(object_state)
 
@@ -250,7 +250,11 @@ class SparseSeries(Series):
         """Necessary for making this object picklable"""
         nd_state, own_state = state
         ndarray.__setstate__(self, nd_state)
-        index, = own_state
+
+        index, fill_value, sp_index = own_state
+
+        self.sp_index = sp_index
+        self.fill_value = fill_value
         self.index = index
 
     def __len__(self):
@@ -301,6 +305,13 @@ class SparseSeries(Series):
         return self._constructor(dataSlice, index=new_index)
 
     def _get_val_at(self, loc):
+        n = len(self)
+        if loc < 0:
+            loc += n
+
+        if loc >= len(self) or loc < 0:
+            raise Exception('Out of bounds access')
+
         sp_loc = self.sp_index.lookup(loc)
         if sp_loc == -1:
             return self.fill_value
diff --git a/pandas/core/tests/test_sparse.py b/pandas/core/tests/test_sparse.py
index b30d3e672..8218e5454 100644
--- a/pandas/core/tests/test_sparse.py
+++ b/pandas/core/tests/test_sparse.py
@@ -11,6 +11,7 @@ from pandas.util.testing import (assert_almost_equal, assert_series_equal,
 from numpy.testing import assert_equal
 
 from pandas import DataFrame, DateRange
+from pandas.core.datetools import BDay
 from pandas.core.series import remove_na
 from pandas.core.sparse import (IntIndex, BlockIndex,
                                 SparseSeries, SparseDataFrame)
@@ -81,7 +82,12 @@ class TestSparseSeries(TestCase):
 
     def setUp(self):
         arr, index = _test_data1()
+
+        date_index = DateRange('1/1/2011', periods=len(index))
+
         self.bseries = SparseSeries(arr, index=index, kind='block')
+        self.btseries = SparseSeries(arr, index=date_index, kind='block')
+
         self.iseries = SparseSeries(arr, index=index, kind='integer')
 
         arr, index = _test_data2()
@@ -100,10 +106,6 @@ class TestSparseSeries(TestCase):
         self.ziseries2 = SparseSeries(arr, index=index, kind='integer',
                                       fill_value=0)
 
-    def test_kind(self):
-        self.assertEquals(self.bseries.kind, 'block')
-        self.assertEquals(self.iseries.kind, 'integer')
-
     def test_sparse_to_dense(self):
         arr, index = _test_data1()
         series = self.bseries.to_dense()
@@ -198,6 +200,23 @@ class TestSparseSeries(TestCase):
         self.assert_(cop.sp_values[0] == 97)
         self.assert_(self.bseries.sp_values[0] != 97)
 
+    def test_kind(self):
+        self.assertEquals(self.bseries.kind, 'block')
+        self.assertEquals(self.iseries.kind, 'integer')
+
+    def test_pickle(self):
+        import pickle
+
+        def _test_roundtrip(series):
+            pickled = pickle.dumps(series)
+            unpickled = pickle.loads(pickled)
+            assert_sp_series_equal(series, unpickled)
+
+        _test_roundtrip(self.bseries)
+        _test_roundtrip(self.iseries)
+        _test_roundtrip(self.zbseries)
+        _test_roundtrip(self.ziseries)
+
     def test_getitem(self):
         def _check_indexing(sp, dense):
             for idx, val in dense.iteritems():
@@ -207,10 +226,20 @@ class TestSparseSeries(TestCase):
                 assert_almost_equal(sp[i], dense[i])
 
         _check_indexing(self.bseries, self.bseries.to_dense())
+        _check_indexing(self.btseries, self.btseries.to_dense())
+
         _check_indexing(self.zbseries, self.zbseries.to_dense())
         _check_indexing(self.iseries, self.iseries.to_dense())
         _check_indexing(self.ziseries, self.ziseries.to_dense())
 
+        # exception handling
+        self.assertRaises(Exception, self.bseries.__getitem__,
+                          len(self.bseries) + 1)
+
+        # index not contained
+        self.assertRaises(Exception, self.btseries.__getitem__,
+                          self.btseries.index[-1] + BDay())
+
     def test_getitem_fancy_index(self):
         idx = self.bseries.index
         res = self.bseries[::2]
diff --git a/pandas/lib/Makefile b/pandas/lib/Makefile
deleted file mode 100644
index d3d58c8ab..000000000
--- a/pandas/lib/Makefile
+++ /dev/null
@@ -1,6 +0,0 @@
-
-sparse: src/sparse.pyx
-	-python build.py build_ext --inplace
-
-test: sparse
-	-python tests/test_sparse.py
\ No newline at end of file
diff --git a/pandas/lib/src/sparse.pyx b/pandas/lib/src/sparse.pyx
index 428bba761..bbf52090a 100644
--- a/pandas/lib/src/sparse.pyx
+++ b/pandas/lib/src/sparse.pyx
@@ -78,8 +78,12 @@ cdef class IntIndex(SparseIndex):
         self.indices = np.ascontiguousarray(indices, dtype=np.int32)
         self.npoints = len(self.indices)
 
+    def __reduce__(self):
+        args = (self.length, self.indices)
+        return (IntIndex, args)
+
     def __repr__(self):
-        output = 'sparse.IntIndex\n'
+        output = 'IntIndex\n'
         output += 'Indices: %s\n' % repr(self.indices)
         return output
 
@@ -275,7 +279,7 @@ cdef class BlockIndex(SparseIndex):
         return (BlockIndex, args)
 
     def __repr__(self):
-        output = 'sparse.BlockIndex\n'
+        output = 'BlockIndex\n'
         output += 'Block locations: %s\n' % repr(self.blocs)
         output += 'Block lengths: %s' % repr(self.blengths)
 
