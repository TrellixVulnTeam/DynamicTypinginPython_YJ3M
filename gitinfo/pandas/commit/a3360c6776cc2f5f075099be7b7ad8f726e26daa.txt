commit a3360c6776cc2f5f075099be7b7ad8f726e26daa
Author: Adam Klein <adamklein@gmail.com>
Date:   Mon Mar 5 14:50:17 2012 -0500

    BUG: fixed failed tests from merge

diff --git a/pandas/core/index.py b/pandas/core/index.py
index 67ea06cf9..aa4dbd346 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1,6 +1,6 @@
 # pylint: disable=E1101,E1103,W0232
 
-from datetime import time, datetime
+from datetime import time, datetime, timedelta
 from itertools import izip
 
 import numpy as np
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 3f8909de1..815f4ca3a 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -11,9 +11,10 @@ import time
 import numpy as np
 from pandas import Series, TimeSeries, DataFrame, Panel, Index, MultiIndex
 from pandas.core.common import adjoin
-import pandas.core.common as com
 import pandas._tseries as lib
 
+import pandas.core.common as com
+
 # reading and writing the full object in one go
 _TYPE_MAP = {
     Series     : 'series',
@@ -287,7 +288,7 @@ class HDFStore(object):
         if where is None:
             self.handle.removeNode(self.handle.root, key, recursive=True)
         else:
-            group = getattr(self.handle.root, key,None)
+            group = getattr(self.handle.root, key, None)
             if group is not None:
                 self._delete_from_table(group, where)
 
@@ -639,7 +640,7 @@ class HDFStore(object):
         fields = table._v_attrs.fields
 
         # create the selection
-        sel = Selection(table, where)
+        sel = Selection(table, where, table._v_attrs.index_kind)
         sel.select()
         fields = table._v_attrs.fields
 
@@ -702,7 +703,7 @@ class HDFStore(object):
         table = getattr(group, 'table')
 
         # create the selection
-        s = Selection(table,where)
+        s = Selection(table, where, table._v_attrs.index_kind)
         s.select_coords()
 
         # delete the rows in reverse order
@@ -722,34 +723,29 @@ def _convert_index(index):
     if inferred_type == 'datetime64':
         converted = values.view('i8')
         return converted, 'datetime64', _tables().Int64Col()
-    elif inferred_type == 'datetime':
-        # backward compatibility handling with < 0.7.0
-        if isinstance(values[0], datetime):
-            kind = 'datetime'
-        else:
-            kind = 'date'
+    elif isinstance(values[0], datetime):
+        converted = np.array([(time.mktime(v.timetuple()) +
+                            v.microsecond / 1E6) for v in values],
+                            dtype=np.float64)
+        return converted, 'datetime', _tables().Time64Col()
+    elif isinstance(values[0], date):
         converted = np.array([time.mktime(v.timetuple()) for v in values],
-                             dtype=np.int64)
-        return converted, kind, _tables().Time64Col()
-    elif inferred_type == 'integer':
+                            dtype=np.int32)
+        return converted, 'date', _tables().Time32Col()
+    elif isinstance(values[0], basestring):
+        converted = np.array(list(values), dtype=np.str_)
+        itemsize = converted.dtype.itemsize
+        return converted, 'string', _tables().StringCol(itemsize)
+    elif com.is_integer(values[0]):
+        # take a guess for now, hope the values fit
         atom = _tables().Int64Col()
         return np.asarray(values, dtype=np.int64), 'integer', atom
-    elif inferred_type == 'floating':
+    elif com.is_float(values[0]):
         atom = _tables().Float64Col()
         return np.asarray(values, dtype=np.float64), 'float', atom
-        pass
-    elif inferred_type == 'boolean':
-        atom = _tables().Int64Col()
-        return np.asarray(values, dtype=np.int64), 'integer', atom
-    elif inferred_type == 'string':
-        converted = np.array(list(values), dtype=np.str_)
-        itemsize = converted.dtype.itemsize
-        return converted, 'string', _tables().StringCol(itemsize)
-    elif inferred_type == 'mixed':
+    else: # pragma: no cover
         atom = _tables().ObjectAtom()
-        return np.asarray(values, dtype='O'), 'object', atom
-    else:
-        raise TypeError("Unrecognized inferred type '%s'" % inferred_type)
+        return np.asarray(values, dtype='O'), 'object', atom 
 
 def _read_array(group, key):
     import tables
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index d6fd511a9..1275ca840 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -1,8 +1,6 @@
 # pylint: disable=W0612,E1101
 
-
 from datetime import datetime
-import os
 import operator
 import unittest
 import nose
@@ -15,9 +13,7 @@ from pandas.core.frame import group_agg
 from pandas.core.panel import Panel
 from pandas.core.series import remove_na
 import pandas.core.common as com
-import pandas.core.panel as panelmod
 from pandas.util import py3compat
-from pandas.io.parsers import (ExcelFile, ExcelWriter)
 
 from pandas.util.testing import (assert_panel_equal,
                                  assert_frame_equal,
@@ -1002,6 +998,7 @@ class TestPanel(unittest.TestCase, PanelTests, CheckIndexing,
             import xlwt
             import xlrd
             import openpyxl
+            from pandas.io.parsers import ExcelFile
         except ImportError:
             raise nose.SkipTest
 
