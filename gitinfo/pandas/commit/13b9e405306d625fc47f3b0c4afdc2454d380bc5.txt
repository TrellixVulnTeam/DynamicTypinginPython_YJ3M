commit 13b9e405306d625fc47f3b0c4afdc2454d380bc5
Author: MomIsBestFriend <50263213+MomIsBestFriend@users.noreply.github.com>
Date:   Sat Mar 28 00:08:03 2020 +0300

    DOC: Fixed examples in pandas/tseries (#32935)

diff --git a/ci/code_checks.sh b/ci/code_checks.sh
index 15b412842..ded965e60 100755
--- a/ci/code_checks.sh
+++ b/ci/code_checks.sh
@@ -325,6 +325,10 @@ if [[ -z "$CHECK" || "$CHECK" == "doctests" ]]; then
     MSG='Doctests generic.py' ; echo $MSG
     pytest -q --doctest-modules pandas/core/generic.py
     RET=$(($RET + $?)) ; echo $MSG "DONE"
+
+    MSG='Doctests tseries' ; echo $MSG
+    pytest -q --doctest-modules pandas/tseries/
+    RET=$(($RET + $?)) ; echo $MSG "DONE"
 fi
 
 ### DOCSTRINGS ###
diff --git a/pandas/tseries/frequencies.py b/pandas/tseries/frequencies.py
index 077c5046a..22c0f455f 100644
--- a/pandas/tseries/frequencies.py
+++ b/pandas/tseries/frequencies.py
@@ -95,19 +95,19 @@ def to_offset(freq) -> Optional[DateOffset]:
 
     Examples
     --------
-    >>> to_offset('5min')
+    >>> to_offset("5min")
     <5 * Minutes>
 
-    >>> to_offset('1D1H')
+    >>> to_offset("1D1H")
     <25 * Hours>
 
-    >>> to_offset(('W', 2))
+    >>> to_offset(("W", 2))
     <2 * Weeks: weekday=6>
 
-    >>> to_offset((2, 'B'))
+    >>> to_offset((2, "B"))
     <2 * BusinessDays>
 
-    >>> to_offset(datetime.timedelta(days=1))
+    >>> to_offset(pd.Timedelta(days=1))
     <Day>
 
     >>> to_offset(Hour())
diff --git a/pandas/tseries/holiday.py b/pandas/tseries/holiday.py
index fe30130e8..8ab37f787 100644
--- a/pandas/tseries/holiday.py
+++ b/pandas/tseries/holiday.py
@@ -157,15 +157,34 @@ class Holiday:
         --------
         >>> from pandas.tseries.holiday import Holiday, nearest_workday
         >>> from dateutil.relativedelta import MO
-        >>> USMemorialDay = Holiday('Memorial Day', month=5, day=31,
-                                    offset=pd.DateOffset(weekday=MO(-1)))
-        >>> USLaborDay = Holiday('Labor Day', month=9, day=1,
-                                offset=pd.DateOffset(weekday=MO(1)))
-        >>> July3rd = Holiday('July 3rd', month=7, day=3,)
-        >>> NewYears = Holiday('New Years Day', month=1,  day=1,
-                               observance=nearest_workday),
-        >>> July3rd = Holiday('July 3rd', month=7, day=3,
-                              days_of_week=(0, 1, 2, 3))
+
+        >>> USMemorialDay = Holiday(
+        ...     "Memorial Day", month=5, day=31, offset=pd.DateOffset(weekday=MO(-1))
+        ... )
+        >>> USMemorialDay
+        Holiday: Memorial Day (month=5, day=31, offset=<DateOffset: weekday=MO(-1)>)
+
+        >>> USLaborDay = Holiday(
+        ...     "Labor Day", month=9, day=1, offset=pd.DateOffset(weekday=MO(1))
+        ... )
+        >>> USLaborDay
+        Holiday: Labor Day (month=9, day=1, offset=<DateOffset: weekday=MO(+1)>)
+
+        >>> July3rd = Holiday("July 3rd", month=7, day=3)
+        >>> July3rd
+        Holiday: July 3rd (month=7, day=3, )
+
+        >>> NewYears = Holiday(
+        ...     "New Years Day", month=1,  day=1, observance=nearest_workday
+        ... )
+        >>> NewYears  # doctest: +SKIP
+        Holiday: New Years Day (
+            month=1, day=1, observance=<function nearest_workday at 0x66545e9bc440>
+        )
+
+        >>> July3rd = Holiday("July 3rd", month=7, day=3, days_of_week=(0, 1, 2, 3))
+        >>> July3rd
+        Holiday: July 3rd (month=7, day=3, )
         """
         if offset is not None and observance is not None:
             raise NotImplementedError("Cannot use both offset and observance.")
