commit 531b8029ba8d112899d422aef58641fbcb476393
Author: jreback <jeff@reback.net>
Date:   Tue Dec 25 00:13:24 2012 -0500

    TST: fixed up a failing test

diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 6f191caa8..c096df915 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -4,6 +4,7 @@ from pandas.core.common import _asarray_tuplesafe
 from pandas.core.index import Index, MultiIndex
 import pandas.core.common as com
 import pandas.lib as lib
+import pandas.tslib as tslib
 
 import numpy as np
 
@@ -117,15 +118,12 @@ class _NDFrameIndexer(object):
                 # convert nan to iNaT if possible
                 if data.dtype == 'M8[ns]':
                     mask = com._isnull(value)
-                    if np.isscalar(value) and mask:
-                        from pandas import tslib
+                    if np.isscalar(value) and com.isnull(value):
                         value = tslib.iNaT
                         values[plane_indexer] = value
-                    elif isinstance(value, np.array) and mask.any():
-                        from pandas import tslib
-                        value = value.copy()
-                        value.putmask(iNat,mask)
-                        values[plane_indexer] = value
+                    else:
+                        raise ValueError("Cannot set indexer value of datetime64[ns] with [%s]" % value)
+
                 else:
                     for item, v in zip(item_labels[het_idx], value):
                         data = self.obj[item]
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 623ee9bca..b6c38ab98 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1087,9 +1087,14 @@ class CheckIndexing(object):
         # set an allowable datetime64 type
         from pandas import tslib
         df.ix['b','timestamp'] = tslib.iNaT
+        self.assert_(com.isnull(df.ix['b','timestamp']))
 
-        # this fails because nan is a float type
-        df.ix['b','timestamp'] = nan
+        # allow this syntax
+        df.ix['c','timestamp'] = nan
+        self.assert_(com.isnull(df.ix['c','timestamp']))
+
+        # try to set with a list like item
+        self.assertRaises(Exception,  df.ix.__setitem__, ('d','timestamp'), [nan])
 
         # prior to 0.10.1 this failed
         #self.assertRaises(TypeError, df.ix.__setitem__, ('c','timestamp'), nan)
