commit ec7fc6016b4fa0bad4a96af0a0b47ab26e41ab31
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Aug 30 11:04:57 2011 -0400

    DOC: readme edits to be more like the docs, mostly finished missing data section

diff --git a/README.rst b/README.rst
index c2a369929..1af1a43cd 100644
--- a/README.rst
+++ b/README.rst
@@ -20,56 +20,53 @@ Release Notes
 What it is
 ==========
 
-``pandas`` is a library for pan-el da-ta analysis, i.e. multidimensional
-time series and cross-sectional data sets commonly found in
-statistics, econometrics, or finance. It provides convenient and
-easy-to-understand `NumPy`_-based data structures for generic labeled
-data, with focus on automatically aligning data based on its label(s)
-and handling missing observations. One major goal of the library is to
-simplify the implementation of statistical models on unreliable data.
+**pandas** is a Python package providing fast, flexible, and expressive data
+structures designed to make working with "relational" or "labeled" data both
+easy and intuitive. It aims to be the fundamental high-level building block for
+doing practical, **real world** data analysis in Python. Additionally, it has
+the broader goal of becoming **the most powerful and flexible open source data
+analysis / manipulation tool available in any language**. It is already well on
+its way toward this goal.
 
 
 Main Features
 =============
 
-* Data structures: for 1, 2, and 3 dimensional labeled data
-  sets. Some of their main features include:
-
-  * Automatically aligning data
-  * Handling missing observations in calculations
-  * Convenient slicing and reshaping ("reindexing") functions
-  * Provide 'group by' aggregation or transformation functionality
-  * Tools for merging / joining together data sets
-  * Simple matplotlib integration for plotting
-
-* Date tools: objects for expressing date offsets or generating date
-  ranges; some functionality similar to ``scikits.timeseries``.
-
-* Statistical models: convenient ordinary least squares and panel OLS
-  implementations for in-sample or rolling time series /
-  cross-sectional regressions. These will hopefully be the starting
-  point for implementing other models
-
-``pandas`` is not necessarily intended as a standalone library but rather
-as something which can be used in tandem with other `NumPy`_-based
-packages like ``scikits.statsmodels``. Where possible wheel-reinvention
-has largely been avoided. Also, its time series manipulation
-capability is not as extensive as ``scikits.timeseries``; ``pandas`` does have
-its own time series object which fits into the unified data model.
-
-Some other useful tools for time series data (moving average, standard
-deviation, etc.) are available in the codebase but do not yet have a
-convenient interface. These will be highlighted in a future release.
-
-
+Here are just a few of the things that pandas does well:
+
+  - Easy handling of **missing data** (represented as NaN) in floating point as
+    well as non-floating point data
+  - Size mutability: columns can be **inserted and deleted** from DataFrame and
+    higher dimensional objects
+  - Automatic and explicit **data alignment**: objects can be explicitly
+    aligned to a set of labels, or the user can simply ignore the labels and
+    let `Series`, `DataFrame`, etc. automatically align the data for you in
+    computations
+  - Powerful, flexible **group by** functionality to perform
+    split-apply-combine operations on data sets, for both aggregating and
+    transforming data
+  - Make it **easy to convert** ragged, differently-indexed data in other
+    Python and NumPy data structures into DataFrame objects
+  - Intelligent label-based **slicing**, **fancy indexing**, and **subsetting**
+    of large data sets
+  - Intuitive **merging** and **joining** data sets
+  - Flexible **reshaping** and pivoting of data sets
+  - **Hierarchical** labeling of axes (possible to have multiple labels per
+    tick)
+  - Robust IO tools for loading data from **flat files** (CSV and delimited),
+    Excel files, databases, and saving / loading data from the ultrafast **HDF5
+    format**
+  - **Time series**-specific functionality: date range generation and frequency
+    conversion, moving window statistics, moving window linear regressions,
+    date shifting and lagging, etc.
 
 Where to get it
 ===============
 
 The source code is currently hosted on GitHub at: http://github.com/wesm/pandas
 
-Binary installers for the latest released version can be `downloaded there`_. 
-Alternately the installers are available at the Python package index::
+Binary installers for the latest released version are available at the Python
+package index::
 
     http://pypi.python.org/pypi/pandas/
 
@@ -89,9 +86,8 @@ Documentation
 
 The official documentation is hosted on SourceForge: http://pandas.sourceforge.net/
 
-The Sphinx documentation is still in an incomplete state, but it
-should provide a good starting point for learning how to use the
-library. Expect the docs to continue to expand as time goes on.
+The Sphinx documentation should provide a good starting point for learning how
+to use the library. Expect the docs to continue to expand as time goes on.
 
 Background
 ==========
@@ -111,4 +107,4 @@ the pystatsmodels mailing list / Google group, where
 http://groups.google.com/group/pystatsmodels
 
   .. _NumPy: http://numpy.scipy.org/
-  .. _downloaded there: https://github.com/wesm/pandas/archives/master
\ No newline at end of file
+  .. _downloaded there: https://github.com/wesm/pandas/archives/master
diff --git a/doc/source/indexing.rst b/doc/source/indexing.rst
index 0634d65c3..6c7570985 100644
--- a/doc/source/indexing.rst
+++ b/doc/source/indexing.rst
@@ -11,6 +11,9 @@ Indexing and selecting data
 Basics
 ------
 
+Indexing with boolean arrays
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
 .. _indexing.fancy:
 
 Fancy ndarray-like indexing with labels
diff --git a/doc/source/missing_data.rst b/doc/source/missing_data.rst
index b131ed17e..36d772e8c 100644
--- a/doc/source/missing_data.rst
+++ b/doc/source/missing_data.rst
@@ -216,5 +216,49 @@ for interpolation methods outside of the filling methods described above.
    In [0]: axes[1].set_title('Interpolated')
 
 
-Missing data casting and indexing rules
+Missing data casting rules and indexing
 ---------------------------------------
+
+While pandas supports storing arrays of integer and boolean type, these types
+are not capable of storing missing data. Until we can switch to using a native
+NA type in NumPy, we've established some "casting rules" when reindexing will
+cause missing data to be introduced into, say, a Series or DataFrame. Here they
+are:
+
+.. csv-table::
+    :header: "data type", "Cast to"
+    :widths: 40, 40
+
+	integer, float
+    boolean, object
+    float, no cast
+    object, no cast
+
+For example:
+
+.. ipython:: python
+
+   s = Series(randn(5), index=[0, 2, 4, 6, 7])
+   s > 0
+   (s > 0).dtype
+   crit = (s > 0).reindex(range(8))
+   crit
+   crit.dtype
+
+Ordinarily NumPy will complain if you try to use an object array (even if it
+contains boolean values) instead of a boolean array to get or set values from
+an ndarray (e.g. selecting values based on some criteria). If a boolean vector
+contains NAs, an exception will be generated:
+
+.. ipython:: python
+
+   reindexed = s.reindex(range(8)).fillna(0)
+   reindexed[crit]
+
+However, these can be filled in using **fillna** and it will work fine:
+
+.. ipython:: python
+
+   reindexed[crit.fillna(False)]
+   reindexed[crit.fillna(True)]
+
diff --git a/doc/source/panel.rst b/doc/source/panel.rst
deleted file mode 100644
index 3443be532..000000000
--- a/doc/source/panel.rst
+++ /dev/null
@@ -1,10 +0,0 @@
-.. currentmodule:: pandas
-
-.. _panel:
-
-*********************
-WidePanel / LongPanel
-*********************
-
-# .. automodule:: pandas.core.panel
-#   :members:
