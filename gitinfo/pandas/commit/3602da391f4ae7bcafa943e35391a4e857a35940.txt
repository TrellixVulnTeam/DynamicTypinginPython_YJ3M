commit 3602da391f4ae7bcafa943e35391a4e857a35940
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Apr 21 22:54:36 2012 -0400

    TST: test reindexing timeseries with datetime.datetime sequence, close #1099

diff --git a/pandas/tests/test_tools.py b/pandas/tools/tests/test_tools.py
similarity index 100%
rename from pandas/tests/test_tools.py
rename to pandas/tools/tests/test_tools.py
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 64dc8a1a3..5b058bcc2 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -963,17 +963,18 @@ def _generate_regular_range(start, end, periods, offset):
         raise ValueError('Must specify two of start, end, or periods')
 
     if isinstance(offset, datetools.Tick):
+        stride = offset.us_stride()
         if periods is None:
             b = Timestamp(start).value
-            e = Timestamp(end).value + 1
+            e = Timestamp(end).value + stride
         elif start is not None:
             b = Timestamp(start).value
-            e = b + periods * offset.us_stride()
+            e = b + periods * stride
         else:
-            e = Timestamp(start).value
-            b = e - periods * offset.us_stride()
+            e = Timestamp(end).value + stride
+            b = e - periods * stride
 
-        data = np.arange(b, e, offset.us_stride(), dtype=np.int64)
+        data = np.arange(b, e, stride, dtype=np.int64)
         data = data.view('M8[us]')
     else:
         xdr = datetools.generate_range(start=start, end=end,
diff --git a/pandas/tseries/offsets.py b/pandas/tseries/offsets.py
index fe99616e1..096c91dda 100644
--- a/pandas/tseries/offsets.py
+++ b/pandas/tseries/offsets.py
@@ -852,12 +852,20 @@ class Tick(DateOffset):
     _inc = timedelta(microseconds=1000)
 
     def __eq__(self, other):
+        if isinstance(other, basestring):
+            from pandas.tseries.frequencies import to_offset
+            other = to_offset(other)
+
         if isinstance(other, Tick):
-            return self._inc == other._inc
+            return self.delta == other.delta
         else:
             return DateOffset.__eq__(self, other)
 
     def __ne__(self, other):
+        if isinstance(other, basestring):
+            from pandas.tseries.frequencies import to_offset
+            other = to_offset(other)
+
         if isinstance(other, Tick):
             return self.delta != other.delta
         else:
diff --git a/pandas/tests/test_daterange.py b/pandas/tseries/tests/test_daterange.py
similarity index 100%
rename from pandas/tests/test_daterange.py
rename to pandas/tseries/tests/test_daterange.py
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index a06508517..8b17e9b67 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -400,6 +400,17 @@ class TestTimeSeries(unittest.TestCase):
         except KeyError, e:
             self.assert_('2000' in str(e))
 
+    def test_reindex_with_datetimes(self):
+        rng = date_range('1/1/2000', periods=20)
+        ts = Series(np.random.randn(20), index=rng)
+
+        result = ts.reindex(list(ts.index[5:10]))
+        expected = ts[5:10]
+        tm.assert_series_equal(result, expected)
+
+        result = ts[list(ts.index[5:10])]
+        tm.assert_series_equal(result, expected)
+
 def _skip_if_no_pytz():
     try:
         import pytz
