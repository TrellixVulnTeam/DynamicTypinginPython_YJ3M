commit 13201564339c182624e3439ac5aaa71b49f6cf2b
Author: Chang She <changshe@gmail.com>
Date:   Sun Nov 18 20:43:49 2012 -0500

    ENH: Enable DataFrame to accept scalar constructor values like Series #1856

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 3e24366bd..14b435e0a 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -31,7 +31,7 @@ from pandas.core.index import Index, MultiIndex, _ensure_index
 from pandas.core.indexing import _NDFrameIndexer, _maybe_droplevels
 from pandas.core.internals import (BlockManager, make_block, form_blocks,
                                    IntBlock)
-from pandas.core.series import Series, _radd_compat
+from pandas.core.series import Series, _radd_compat, _dtype_from_scalar
 from pandas.compat.scipy import scoreatpercentile as _quantile
 from pandas.util import py3compat
 from pandas.util.terminal import get_terminal_size
@@ -417,7 +417,24 @@ class DataFrame(NDFrame):
                 mgr = self._init_ndarray(data, index, columns, dtype=dtype,
                                          copy=copy)
         else:
-            raise PandasError('DataFrame constructor not properly called!')
+            try:
+                arr = np.array(data, dtype=dtype, copy=copy)
+            except (ValueError, TypeError):
+                raise PandasError('DataFrame constructor called with '
+                                  'incompatible data and dtype')
+
+            if arr.ndim == 0 and index is not None and columns is not None:
+                if isinstance(data, basestring) and dtype is None:
+                    dtype = np.object_
+                if dtype is None:
+                    data, dtype = _dtype_from_scalar(data)
+
+                values = np.empty((len(index), len(columns)), dtype=dtype)
+                values.fill(data)
+                mgr = self._init_ndarray(values, index, columns, dtype=dtype,
+                                         copy=False)
+            else:
+                raise PandasError('DataFrame constructor not properly called!')
 
         NDFrame.__init__(self, mgr)
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 1be120348..042c744ef 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2383,6 +2383,22 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
                           [('a',[8]),('a',[5]), ('b', [6])],
                           columns=['b', 'a','a'])
 
+    def test_constructor_single_value(self):
+        df = DataFrame(0., index=[1,2,3], columns=['a','b','c'])
+        assert_frame_equal(df, DataFrame(np.zeros(df.shape), df.index,
+                                         df.columns))
+
+        df = DataFrame('a', index=[1,2], columns=['a', 'c'])
+        assert_frame_equal(df, DataFrame(np.array([['a', 'a'],
+                                                   ['a', 'a']],
+                                                  dtype=object),
+                                         index=[1,2],
+                                         columns=['a', 'c']))
+
+        self.assertRaises(com.PandasError, DataFrame, 'a', [1,2])
+        self.assertRaises(com.PandasError, DataFrame, 'a', columns=['a' ,'c'])
+        self.assertRaises(com.PandasError, DataFrame, 'a', [1,2], ['a', 'c'], float)
+
     def test_new_empty_index(self):
         df1 = DataFrame(randn(0, 3))
         df2 = DataFrame(randn(0, 3))
