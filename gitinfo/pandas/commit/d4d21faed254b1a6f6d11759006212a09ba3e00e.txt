commit d4d21faed254b1a6f6d11759006212a09ba3e00e
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Tue May 12 06:14:38 2020 -0700

    ENH: make Tick comparisons match Timedelta behavior (#34088)

diff --git a/doc/source/whatsnew/v1.1.0.rst b/doc/source/whatsnew/v1.1.0.rst
index e56014ed8..1008faf29 100644
--- a/doc/source/whatsnew/v1.1.0.rst
+++ b/doc/source/whatsnew/v1.1.0.rst
@@ -866,6 +866,7 @@ Other
 - Bug in :meth:`DataFrame.__dir__` caused a segfault when using unicode surrogates in a column name (:issue:`25509`)
 - Bug in :meth:`DataFrame.plot.scatter` caused an error when plotting variable marker sizes (:issue:`32904`)
 - :class:`IntegerArray` now implements the ``sum`` operation (:issue:`33172`)
+- Bug in :class:`Tick` comparisons raising ``TypeError`` when comparing against timedelta-like objects (:issue:`34088`)
 
 .. ---------------------------------------------------------------------------
 
diff --git a/pandas/tests/tseries/offsets/test_ticks.py b/pandas/tests/tseries/offsets/test_ticks.py
index 89f5f362e..a37dbbc89 100644
--- a/pandas/tests/tseries/offsets/test_ticks.py
+++ b/pandas/tests/tseries/offsets/test_ticks.py
@@ -320,3 +320,22 @@ def test_compare_ticks_to_strs(cls):
             left > right
         with pytest.raises(TypeError):
             left >= right
+
+
+@pytest.mark.parametrize("cls", tick_classes)
+def test_compare_ticks_to_timedeltalike(cls):
+    off = cls(19)
+
+    td = off.delta
+
+    others = [td, td.to_timedelta64()]
+    if cls is not Nano:
+        others.append(td.to_pytimedelta())
+
+    for other in others:
+        assert off == other
+        assert not off != other
+        assert not off < other
+        assert not off > other
+        assert off <= other
+        assert off >= other
diff --git a/pandas/tseries/offsets.py b/pandas/tseries/offsets.py
index 0d377a148..ab426cb17 100644
--- a/pandas/tseries/offsets.py
+++ b/pandas/tseries/offsets.py
@@ -2284,17 +2284,12 @@ class Easter(DateOffset):
 
 
 def _tick_comp(op):
-    assert op not in [operator.eq, operator.ne]
+    """
+    Tick comparisons should behave identically to Timedelta comparisons.
+    """
 
     def f(self, other):
-        try:
-            return op(self.delta, other.delta)
-        except AttributeError as err:
-            # comparing with a non-Tick object
-            raise TypeError(
-                f"Invalid comparison between {type(self).__name__} "
-                f"and {type(other).__name__}"
-            ) from err
+        return op(self.delta, other)
 
     f.__name__ = f"__{op.__name__}__"
     return f
@@ -2346,10 +2341,7 @@ class Tick(liboffsets._Tick, SingleConstructorOffset):
                 # e.g. "infer"
                 return False
 
-        if isinstance(other, Tick):
-            return self.delta == other.delta
-        else:
-            return False
+        return _tick_comp(operator.eq)(self, other)
 
     # This is identical to DateOffset.__hash__, but has to be redefined here
     # for Python 3, because we've redefined __eq__.
@@ -2368,10 +2360,7 @@ class Tick(liboffsets._Tick, SingleConstructorOffset):
                 # e.g. "infer"
                 return True
 
-        if isinstance(other, Tick):
-            return self.delta != other.delta
-        else:
-            return True
+        return _tick_comp(operator.ne)(self, other)
 
     @property
     def delta(self) -> Timedelta:
