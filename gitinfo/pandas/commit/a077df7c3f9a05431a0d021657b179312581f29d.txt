commit a077df7c3f9a05431a0d021657b179312581f29d
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Jul 24 13:51:07 2011 -0400

    DOC: release notes

diff --git a/RELEASE.rst b/RELEASE.rst
index b03493798..a30b68881 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -71,6 +71,8 @@ Release notes
 * `rolling_quantile` functions; a moving version of `Series.quantile` /
   `DataFrame.quantile`
 * Generic `rolling_apply` moving window function
+* New `drop` method added to `Series`, `DataFrame`, etc. which can drop a set of
+  labels from an axis, producing a new object
 
 **Improvements to existing features**
 
@@ -126,6 +128,10 @@ Release notes
 * Handling of boolean dtype in `DataFrame` has been improved to support storage
   of boolean data with NA / NaN values. Before it was being converted to float64
   so this should not (in theory) cause API breakage
+* To optimize performance, Index objects now only check that their labels are
+  unique when uniqueness matters (i.e. when someone goes to perform a
+  lookup). This is a potentially dangerous tradeoff, but will lead to much
+  better performance in many places (like groupby).
 * Boolean indexing using Series must now have the same indices (labels)
 * Backwards compatibility support for begin/end/nPeriods keyword arguments in
   DateRange class has been removed
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 705a8b9da..3ba67baa8 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1345,39 +1345,6 @@ class DataFrame(NDFrame):
         combiner = lambda x, y: np.where(isnull(x), y, x)
         return self.combine(other, combiner)
 
-    def combineAdd(self, other):
-        """
-        Add two DataFrame objects and do not propagate
-        NaN values, so if for a (column, time) one frame is missing a
-        value, it will default to the other frame's value (which might
-        be NaN as well)
-
-        Parameters
-        ----------
-        other : DataFrame
-
-        Returns
-        -------
-        DataFrame
-        """
-        return self.add(other, fill_value=0.)
-
-    def combineMult(self, other):
-        """
-        Multiply two DataFrame objects and do not propagate NaN values, so if
-        for a (column, time) one frame is missing a value, it will default to
-        the other frame's value (which might be NaN as well)
-
-        Parameters
-        ----------
-        other : DataFrame
-
-        Returns
-        -------
-        DataFrame
-        """
-        return self.mul(other, fill_value=1.)
-
     #----------------------------------------------------------------------
     # Misc methods
 
@@ -2354,6 +2321,39 @@ class DataFrame(NDFrame):
     #----------------------------------------------------------------------
     # Deprecated stuff
 
+    def combineAdd(self, other):
+        """
+        Add two DataFrame objects and do not propagate
+        NaN values, so if for a (column, time) one frame is missing a
+        value, it will default to the other frame's value (which might
+        be NaN as well)
+
+        Parameters
+        ----------
+        other : DataFrame
+
+        Returns
+        -------
+        DataFrame
+        """
+        return self.add(other, fill_value=0.)
+
+    def combineMult(self, other):
+        """
+        Multiply two DataFrame objects and do not propagate NaN values, so if
+        for a (column, time) one frame is missing a value, it will default to
+        the other frame's value (which might be NaN as well)
+
+        Parameters
+        ----------
+        other : DataFrame
+
+        Returns
+        -------
+        DataFrame
+        """
+        return self.mul(other, fill_value=1.)
+
     def toDataMatrix(self): # pragma: no cover
         warnings.warn("toDataMatrix will disappear in next release "
                       "as there is no longer a DataMatrix class", FutureWarning)
