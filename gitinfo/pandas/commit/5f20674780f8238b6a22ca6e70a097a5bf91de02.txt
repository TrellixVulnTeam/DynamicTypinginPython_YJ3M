commit 5f20674780f8238b6a22ca6e70a097a5bf91de02
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Sun Jun 14 17:57:16 2020 -0700

    CLN: disallow tuple in to_offset (#34703)

diff --git a/doc/source/whatsnew/v1.1.0.rst b/doc/source/whatsnew/v1.1.0.rst
index 8db3d7aff..5f8668f85 100644
--- a/doc/source/whatsnew/v1.1.0.rst
+++ b/doc/source/whatsnew/v1.1.0.rst
@@ -820,6 +820,7 @@ Datetimelike
 - Bug in :meth:`DatetimeIndex.intersection` and :meth:`TimedeltaIndex.intersection` with results not having the correct ``name`` attribute (:issue:`33904`)
 - Bug in :meth:`DatetimeArray.__setitem__`, :meth:`TimedeltaArray.__setitem__`, :meth:`PeriodArray.__setitem__` incorrectly allowing values with ``int64`` dtype to be silently cast (:issue:`33717`)
 - Bug in subtracting :class:`TimedeltaIndex` from :class:`Period` incorrectly raising ``TypeError`` in some cases where it should succeed and ``IncompatibleFrequency`` in some cases where it should raise ``TypeError`` (:issue:`33883`)
+- The ``freq`` keyword in :class:`Period`, :func:`date_range`, :func:`period_range`, :func:`pd.tseries.frequencies.to_offset` no longer allows tuples, pass as string instead (:issue:`34703`)
 
 Timedelta
 ^^^^^^^^^
diff --git a/pandas/_libs/tslibs/offsets.pyx b/pandas/_libs/tslibs/offsets.pyx
index 37be1e7ae..1dae34e1a 100644
--- a/pandas/_libs/tslibs/offsets.pyx
+++ b/pandas/_libs/tslibs/offsets.pyx
@@ -3482,36 +3482,6 @@ INVALID_FREQ_ERR_MSG = "Invalid frequency: {0}"
 _offset_map = {}
 
 
-cdef _base_and_stride(str freqstr):
-    """
-    Return base freq and stride info from string representation
-
-    Returns
-    -------
-    base : str
-    stride : int
-
-    Examples
-    --------
-    _base_and_stride('5Min') -> 'Min', 5
-    """
-    groups = opattern.match(freqstr)
-
-    if not groups:
-        raise ValueError(f"Could not evaluate {freqstr}")
-
-    stride = groups.group(1)
-
-    if len(stride):
-        stride = int(stride)
-    else:
-        stride = 1
-
-    base = groups.group(2)
-
-    return base, stride
-
-
 # TODO: better name?
 def _get_offset(name: str) -> BaseOffset:
     """
@@ -3574,10 +3544,10 @@ cpdef to_offset(freq):
     >>> to_offset("1D1H")
     <25 * Hours>
 
-    >>> to_offset(("W", 2))
+    >>> to_offset("2W")
     <2 * Weeks: weekday=6>
 
-    >>> to_offset((2, "B"))
+    >>> to_offset("2B")
     <2 * BusinessDays>
 
     >>> to_offset(pd.Timedelta(days=1))
@@ -3593,12 +3563,9 @@ cpdef to_offset(freq):
         return freq
 
     if isinstance(freq, tuple):
-        name = freq[0]
-        stride = freq[1]
-        if isinstance(stride, str):
-            name, stride = stride, name
-        name, _ = _base_and_stride(name)
-        delta = _get_offset(name) * stride
+        raise TypeError(
+            f"to_offset does not support tuples {freq}, pass as a string instead"
+        )
 
     elif isinstance(freq, timedelta):
         return delta_to_tick(freq)
diff --git a/pandas/tests/indexes/datetimes/test_constructors.py b/pandas/tests/indexes/datetimes/test_constructors.py
index b15549839..c150e7901 100644
--- a/pandas/tests/indexes/datetimes/test_constructors.py
+++ b/pandas/tests/indexes/datetimes/test_constructors.py
@@ -946,11 +946,6 @@ class TestTimeSeries:
         assert idx[0] == sdate + 0 * offsets.BDay()
         assert idx.freq == "B"
 
-        idx = date_range(end=edate, freq=("D", 5), periods=20)
-        assert len(idx) == 20
-        assert idx[-1] == edate
-        assert idx.freq == "5D"
-
         idx1 = date_range(start=sdate, end=edate, freq="W-SUN")
         idx2 = date_range(start=sdate, end=edate, freq=offsets.Week(weekday=6))
         assert len(idx1) == len(idx2)
@@ -979,6 +974,12 @@ class TestTimeSeries:
 
         tm.assert_numpy_array_equal(idx.values, expected.values)
 
+    def test_date_range_tuple_freq_raises(self):
+        # GH#34703
+        edate = datetime(2000, 1, 1)
+        with pytest.raises(TypeError, match="pass as a string instead"):
+            date_range(end=edate, freq=("D", 5), periods=20)
+
 
 def test_timestamp_constructor_invalid_fold_raise():
     # Test for #25057
diff --git a/pandas/tests/indexes/period/test_constructors.py b/pandas/tests/indexes/period/test_constructors.py
index 4ec7ef64e..f85f37e41 100644
--- a/pandas/tests/indexes/period/test_constructors.py
+++ b/pandas/tests/indexes/period/test_constructors.py
@@ -463,12 +463,6 @@ class TestPeriodIndex:
         assert (i1 == i2).all()
         assert i1.freq == i2.freq
 
-        end_intv = Period("2006-12-31", ("w", 1))
-        i2 = period_range(end=end_intv, periods=10)
-        assert len(i1) == len(i2)
-        assert (i1 == i2).all()
-        assert i1.freq == i2.freq
-
         end_intv = Period("2005-05-01", "B")
         i1 = period_range(start=start, end=end_intv)
 
@@ -490,6 +484,10 @@ class TestPeriodIndex:
         with pytest.raises(IncompatibleFrequency, match=msg):
             PeriodIndex(vals)
 
+        # tuple freq disallowed GH#34703
+        with pytest.raises(TypeError, match="pass as a string instead"):
+            Period("2006-12-31", ("w", 1))
+
     @pytest.mark.parametrize(
         "freq", ["M", "Q", "A", "D", "B", "T", "S", "L", "U", "N", "H"]
     )
diff --git a/pandas/tests/indexes/period/test_period.py b/pandas/tests/indexes/period/test_period.py
index d247d6571..47617802b 100644
--- a/pandas/tests/indexes/period/test_period.py
+++ b/pandas/tests/indexes/period/test_period.py
@@ -172,12 +172,6 @@ class TestPeriodIndex(DatetimeLike):
         assert (i1 == i2).all()
         assert i1.freq == i2.freq
 
-        end_intv = Period("2006-12-31", ("w", 1))
-        i2 = period_range(end=end_intv, periods=10)
-        assert len(i1) == len(i2)
-        assert (i1 == i2).all()
-        assert i1.freq == i2.freq
-
         msg = "start and end must have same freq"
         with pytest.raises(ValueError, match=msg):
             period_range(start=start, end=end_intv)
diff --git a/pandas/tests/scalar/period/test_period.py b/pandas/tests/scalar/period/test_period.py
index 702899f16..dcef06151 100644
--- a/pandas/tests/scalar/period/test_period.py
+++ b/pandas/tests/scalar/period/test_period.py
@@ -48,8 +48,6 @@ class TestPeriodConstruction:
         i1 = Period("1982", freq="min")
         i2 = Period("1982", freq="MIN")
         assert i1 == i2
-        i2 = Period("1982", freq=("Min", 1))
-        assert i1 == i2
 
         i1 = Period(year=2005, month=3, day=1, freq="D")
         i2 = Period("3/1/2005", freq="D")
@@ -80,6 +78,10 @@ class TestPeriodConstruction:
         with pytest.raises(ValueError, match=msg):
             Period("2007-1-1", freq="X")
 
+        # GH#34703 tuple freq disallowed
+        with pytest.raises(TypeError, match="pass as a string instead"):
+            Period("1982", freq=("Min", 1))
+
     def test_construction_bday(self):
 
         # Biz day construction, roll forward if non-weekday
diff --git a/pandas/tests/tslibs/test_to_offset.py b/pandas/tests/tslibs/test_to_offset.py
index 04be0e445..93e5e2c80 100644
--- a/pandas/tests/tslibs/test_to_offset.py
+++ b/pandas/tests/tslibs/test_to_offset.py
@@ -10,7 +10,6 @@ from pandas._libs.tslibs import Timedelta, offsets, to_offset
     [
         (to_offset("10us"), offsets.Micro(10)),
         (offsets.Hour(), offsets.Hour()),
-        ((5, "T"), offsets.Minute(5)),
         ("2h30min", offsets.Minute(150)),
         ("2h 30min", offsets.Minute(150)),
         ("2h30min15s", offsets.Second(150 * 60 + 15)),
@@ -89,10 +88,16 @@ def test_to_offset_invalid(freqstr):
 
 
 def test_to_offset_no_evaluate():
-    with pytest.raises(ValueError, match="Could not evaluate"):
+    msg = str(("", ""))
+    with pytest.raises(TypeError, match=msg):
         to_offset(("", ""))
 
 
+def test_to_offset_tuple_unsupported():
+    with pytest.raises(TypeError, match="pass as a string instead"):
+        to_offset((5, "T"))
+
+
 @pytest.mark.parametrize(
     "freqstr,expected",
     [
