commit f44ac0634efa9948dbafeb5fb68e60c5e4e44f76
Author: Shantanu Gontia <gontia.shantanu@gmail.com>
Date:   Sun May 19 23:41:27 2019 +0530

    BUG: bugfix 26390 assigning PandasArray to DataFrame error (#26417)

diff --git a/doc/source/whatsnew/v0.25.0.rst b/doc/source/whatsnew/v0.25.0.rst
index a829b72c5..09e246c6e 100644
--- a/doc/source/whatsnew/v0.25.0.rst
+++ b/doc/source/whatsnew/v0.25.0.rst
@@ -379,6 +379,7 @@ Indexing
 - Bug in :meth:`DataFrame.loc` and :meth:`Series.loc` where ``KeyError`` was not raised for a ``MultiIndex`` when the key was less than or equal to the number of levels in the :class:`MultiIndex` (:issue:`14885`).
 - Bug in which :meth:`DataFrame.append` produced an erroneous warning indicating that a ``KeyError`` will be thrown in the future when the data to be appended contains new columns (:issue:`22252`).
 - Bug in which :meth:`DataFrame.to_csv` caused a segfault for a reindexed data frame, when the indices were single-level :class:`MultiIndex` (:issue:`26303`).
+- Fixed bug where assigning a :class:`arrays.PandasArray` to a :class:`pandas.core.frame.DataFrame` would raise error (:issue:`26390`)
 
 
 Missing
@@ -481,7 +482,6 @@ Other
 - Bug in :func:`factorize` when passing an ``ExtensionArray`` with a custom ``na_sentinel`` (:issue:`25696`).
 - Allow :class:`Index` and :class:`RangeIndex` to be passed to numpy ``min`` and ``max`` functions.
 
-
 .. _whatsnew_0.250.contributors:
 
 Contributors
diff --git a/pandas/core/internals/blocks.py b/pandas/core/internals/blocks.py
index ae55a5b74..0ac87c653 100644
--- a/pandas/core/internals/blocks.py
+++ b/pandas/core/internals/blocks.py
@@ -3039,6 +3039,9 @@ def make_block(values, placement, klass=None, ndim=None, dtype=None,
     # For now, blocks should be backed by ndarrays when possible.
     if isinstance(values, ABCPandasArray):
         values = values.to_numpy()
+        if ndim and ndim > 1:
+            values = np.atleast_2d(values)
+
     if isinstance(dtype, PandasDtype):
         dtype = dtype.numpy_dtype
 
diff --git a/pandas/tests/frame/test_block_internals.py b/pandas/tests/frame/test_block_internals.py
index a506e9ccf..6fbc88482 100644
--- a/pandas/tests/frame/test_block_internals.py
+++ b/pandas/tests/frame/test_block_internals.py
@@ -10,6 +10,7 @@ from pandas import (
     Categorical, DataFrame, Series, Timestamp, compat, date_range,
     option_context)
 from pandas.core.arrays import IntervalArray, integer_array
+from pandas.core.internals import ObjectBlock
 from pandas.core.internals.blocks import IntBlock
 import pandas.util.testing as tm
 from pandas.util.testing import (
@@ -584,3 +585,13 @@ starting,ending,measure
         expected = pd.DataFrame({"A": [1, 2, 3]})
         tm.assert_frame_equal(result, expected)
         assert isinstance(result._data.blocks[0], IntBlock)
+
+    def test_add_column_with_pandas_array(self):
+        # GH 26390
+        df = pd.DataFrame({'a': [1, 2, 3, 4], 'b': ['a', 'b', 'c', 'd']})
+        df['c'] = pd.array([1, 2, None, 3])
+        df2 = pd.DataFrame({'a': [1, 2, 3, 4], 'b': ['a', 'b', 'c', 'd'],
+                            'c': pd.array([1, 2, None, 3])})
+        assert type(df['c']._data.blocks[0]) == ObjectBlock
+        assert type(df2['c']._data.blocks[0]) == ObjectBlock
+        assert_frame_equal(df, df2)
