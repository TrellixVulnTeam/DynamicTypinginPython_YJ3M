commit 5e5a8cf41b0ee15c99ea9e7db688f5ee7949e652
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Oct 6 17:21:54 2011 -0400

    BUG: fixed a series of bugs resulting from incorrect appending of MultiIndex
    objects. Expanded Index.append to take multiple objects. Address GH #201

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index efb5deeca..5386eefca 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2059,7 +2059,8 @@ class DataFrame(NDFrame):
         if ignore_index:
             new_index = None
         else:
-            new_index = np.concatenate((self.index, other.index))
+            new_index = self.index.append(other.index)
+            new_index._verify_integrity()
 
         if self.columns.equals(other.columns):
             return self._append_same_columns(other, new_index)
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 25d5028ce..02b572f97 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -725,8 +725,9 @@ class SeriesGroupBy(GroupBy):
                 return result
             else:
                 cat_values = np.concatenate([x.values for x in values])
-                cat_index = np.concatenate([np.asarray(x.index)
-                                            for x in values])
+                cat_index = values[0].index
+                if len(values) > 1:
+                    cat_index = cat_index.append([x.index for x in values[1:]])
                 return Series(cat_values, index=cat_index)
         elif isinstance(values[0], DataFrame):
             # possible that Series -> DataFrame by applied function
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 1e064579c..c490332bd 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -137,7 +137,22 @@ class Index(np.ndarray):
             return Index(arr_idx[key])
 
     def append(self, other):
-        return Index(np.concatenate((self.values, other.values)))
+        """
+        Append a collection of Index options together
+
+        Parameters
+        ----------
+        other : Index or list/tuple of indices
+
+        Returns
+        -------
+        appended : Index
+        """
+        if isinstance(other, (list, tuple)):
+            to_concat = (self.values,) + tuple(other)
+        else:
+            to_concat = self.values, other.values
+        return Index(np.concatenate(to_concat))
 
     def take(self, *args, **kwargs):
         """
@@ -996,14 +1011,32 @@ class MultiIndex(Index):
 
         Parameters
         ----------
-        other : MultiIndex
+        other : MultiIndex or list/tuple of MultiIndex objects
 
         Returns
         -------
         appended : MultiIndex
         """
-        assert(isinstance(other, MultiIndex))
-        new_tuples = np.concatenate((self.values, other.values))
+    def append(self, other):
+        """
+        Append a collection of Index options together
+
+        Parameters
+        ----------
+        other : Index or list/tuple of indices
+
+        Returns
+        -------
+        appended : Index
+        """
+        if isinstance(other, (list, tuple)):
+            for k in other:
+                assert(isinstance(k, MultiIndex))
+
+            to_concat = (self.values,) + tuple(k.values for k in other)
+        else:
+            to_concat = self.values, other.values
+        new_tuples = np.concatenate(to_concat)
         return MultiIndex.from_tuples(new_tuples, names=self.names)
 
     def argsort(self, *args, **kwargs):
diff --git a/pandas/core/series.py b/pandas/core/series.py
index b272fabf6..99124fd99 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -925,8 +925,7 @@ copy : boolean, default False
         -------
         y : Series
         """
-        new_index = np.concatenate((self.index, other.index))
-        new_index = Index(new_index)
+        new_index = self.index.append(other.index)
         new_index._verify_integrity()
 
         new_values = np.concatenate((self, other))
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 64f86aeb8..a2507e29f 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1611,6 +1611,9 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         assert_frame_equal(self.frame, appended)
         self.assert_(appended is not self.frame)
 
+        # overlap
+        self.assertRaises(Exception, self.frame.append, self.frame)
+
     def test_append_records(self):
         arr1 = np.zeros((2,),dtype=('i4,f4,a10'))
         arr1[:] = [(1,2.,'Hello'),(2,3.,"World")]
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index 9bc33cf75..7331b4e72 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -34,6 +34,15 @@ class TestMultiLevel(unittest.TestCase):
         self.ymd = self.tdf.groupby([lambda x: x.year, lambda x: x.month,
                                      lambda x: x.day]).sum()
 
+    def test_append(self):
+        a, b = self.frame[:5], self.frame[5:]
+
+        result = a.append(b)
+        tm.assert_frame_equal(result, self.frame)
+
+        result = a['A'].append(b['A'])
+        tm.assert_series_equal(result, self.frame['A'])
+
     def test_pickle(self):
         import cPickle
         def _test_roundtrip(frame):
@@ -354,6 +363,28 @@ class TestMultiLevel(unittest.TestCase):
         assert_series_equal(restacked,
                             result.reindex(restacked.index).astype(float))
 
+    def test_groupby_transform(self):
+        s = self.frame['A']
+        grouper = s.index.get_level_values(0)
+
+        grouped = s.groupby(grouper)
+
+        applied = grouped.apply(lambda x: x * 2)
+        expected = grouped.transform(lambda x: x * 2)
+        assert_series_equal(applied.reindex(expected.index), expected)
+
+    def test_join(self):
+        a = self.frame.ix[:5, ['A']]
+        b = self.frame.ix[2:, ['B', 'C']]
+
+        joined = a.join(b, how='outer').reindex(self.frame.index)
+        expected = self.frame.copy()
+        expected.values[np.isnan(joined.values)] = np.nan
+
+        self.assert_(not np.isnan(joined.values).all())
+
+        assert_frame_equal(joined, expected)
+
     def test_swaplevel(self):
         swapped = self.frame['A'].swaplevel(0, 1)
         self.assert_(not swapped.index.equals(self.frame.index))
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 1fae8fed7..eb5bf40f1 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -113,8 +113,8 @@ def assert_dict_equal(a, b, compare_keys=True):
 
 def assert_series_equal(left, right):
     assert(left.dtype == right.dtype)
-    assert_almost_equal(left, right)
     assert(left.index.equals(right.index))
+    assert_almost_equal(left, right)
 
 def assert_frame_equal(left, right):
     assert(isinstance(left, DataFrame))
