commit 1572477f67c0ec8fed7bdc1b84b6e19bf7130a66
Author: jreback <jeff@reback.net>
Date:   Fri Dec 14 16:48:15 2012 -0500

    BUG: row removal was really slow if there were non-cosecutive groups,
         implemented a group of consecutive row removals - quite fast now

diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index a165f4091..a0ae14c9b 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -1738,22 +1738,35 @@ class AppendableTable(LegacyTable):
         self.selection.select_coords()
 
         # delete the rows in reverse order
-        l  = list(self.selection.values)
+        l  = Series(self.selection.values).order()
         ln = len(l)
 
         if ln:
 
-            # if we can do a consecutive removal - do it!
-            if l[0]+ln-1 == l[-1]:
-                table.removeRows(start = l[0], stop = l[-1]+1)
+            # construct groups of consecutive rows
+            diff   = l.diff()
+            groups = list(diff[diff>1].index)
 
-            # one by one
-            else:
-                l.reverse()
-                for c in l:
-                    table.removeRows(c)
+            # 1 group
+            if not len(groups):
+                groups = [0]
 
-                    self.handle.flush()
+            # final element
+            if groups[-1] != ln:
+                groups.append(ln)
+            
+            # initial element
+            if groups[0] != 0:
+                groups.insert(0,0)
+
+            # we must remove in reverse order!
+            pg = groups.pop()
+            for g in reversed(groups):
+                rows = l.take(range(g,pg))
+                table.removeRows(start = rows[rows.index[0]], stop = rows[rows.index[-1]]+1)
+                pg = g
+
+            self.handle.flush()
 
         # return the number of rows removed
         return ln
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index a9b97bdaa..dee25c327 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -605,6 +605,18 @@ class TestHDFStore(unittest.TestCase):
 
     def test_remove_crit(self):
         wp = tm.makePanel()
+
+        # group row removal
+        date4 = wp.major_axis.take([ 0,1,2,4,5,6,8,9,10 ])
+        crit4 = Term('major_axis',date4)
+        self.store.put('wp3', wp, table=True)
+        n = self.store.remove('wp3', where=[crit4])
+        assert(n == 36)
+        result = self.store.select('wp3')
+        expected = wp.reindex(major_axis = wp.major_axis-date4)
+        tm.assert_panel_equal(result, expected)
+
+        # upper half
         self.store.put('wp', wp, table=True)
         date = wp.major_axis[len(wp.major_axis) // 2]
 
@@ -612,7 +624,6 @@ class TestHDFStore(unittest.TestCase):
         crit2 = Term('minor_axis',['A', 'D'])
         n = self.store.remove('wp', where=[crit1])
 
-        # deleted number
         assert(n == 56)
 
         n = self.store.remove('wp', where=[crit2])
@@ -622,32 +633,36 @@ class TestHDFStore(unittest.TestCase):
         expected = wp.truncate(after=date).reindex(minor=['B', 'C'])
         tm.assert_panel_equal(result, expected)
 
-        # test non-consecutive row removal
-        wp = tm.makePanel()
+        # individual row elements
         self.store.put('wp2', wp, table=True)
 
         date1 = wp.major_axis[1:3]
-        date2 = wp.major_axis[5]
-        date3 = [wp.major_axis[7],wp.major_axis[9]]
-
         crit1 = Term('major_axis',date1)
-        crit2 = Term('major_axis',date2)
-        crit3 = Term('major_axis',date3)
-
         self.store.remove('wp2', where=[crit1])
+        result = self.store.select('wp2')
+        expected = wp.reindex(major_axis=wp.major_axis-date1)
+        tm.assert_panel_equal(result, expected)
+
+        date2 = wp.major_axis[5]
+        crit2 = Term('major_axis',date2)
         self.store.remove('wp2', where=[crit2])
-        self.store.remove('wp2', where=[crit3])
         result = self.store['wp2']
+        expected = wp.reindex(major_axis=wp.major_axis-date1-Index([date2]))
+        tm.assert_panel_equal(result, expected)
 
-        ma = list(wp.major_axis)
-        for d in date1:
-            ma.remove(d)
-        ma.remove(date2)
-        for d in date3:
-            ma.remove(d)
-        expected = wp.reindex(major = ma)
+        date3 = [wp.major_axis[7],wp.major_axis[9]]
+        crit3 = Term('major_axis',date3)
+        self.store.remove('wp2', where=[crit3])
+        result = self.store['wp2']
+        expected = wp.reindex(major_axis=wp.major_axis-date1-Index([date2])-Index(date3))
         tm.assert_panel_equal(result, expected)
 
+        # corners
+        self.store.put('wp4', wp, table=True)
+        n = self.store.remove('wp4', where=[Term('major_axis','>',wp.major_axis[-1])])
+        result = self.store.select('wp4')
+        tm.assert_panel_equal(result, wp)
+        
     def test_terms(self):
 
         wp = tm.makePanel()
