commit 010425865d1c07166ad1bdc4202f5eb40aa8adf2
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Aug 17 16:32:22 2011 -0400

    ENH: string names of functions can be passed to groupby

diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index c723c7df6..b683189d8 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -426,6 +426,9 @@ class SeriesGroupBy(GroupBy):
         if hasattr(arg,'__iter__'):
             ret = self._aggregate_multiple_funcs(arg)
         else:
+            if isinstance(arg, basestring):
+                return getattr(self, arg)()
+
             try:
                 result = self._aggregate_simple(arg)
             except Exception:
@@ -461,7 +464,10 @@ class SeriesGroupBy(GroupBy):
         results = {}
 
         for name, func in arg.iteritems():
-            result = self.aggregate(func)
+            try:
+                result = func(self)
+            except Exception:
+                result = self.aggregate(func)
             results[name] = result
 
         return DataFrame(results)
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 706ea2157..6e70d6b13 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -4,7 +4,7 @@ import unittest
 from numpy import nan
 
 from pandas.core.daterange import DateRange
-from pandas.core.index import Index
+from pandas.core.index import Index, MultiIndex
 from pandas.core.common import rands, groupby
 from pandas.core.frame import DataFrame
 from pandas.core.series import Series
@@ -416,6 +416,52 @@ class TestGroupBy(unittest.TestCase):
         _testit(lambda x: x.sum())
         _testit(lambda x: x.mean())
 
+    def test_groupby_level(self):
+        index = MultiIndex(levels=[['foo', 'bar', 'baz', 'qux'],
+                                   ['one', 'two', 'three']],
+                           labels=[[0, 0, 0, 1, 1, 2, 2, 3, 3, 3],
+                                   [0, 1, 2, 0, 1, 1, 2, 0, 1, 2]])
+        frame = DataFrame(np.random.randn(10, 3), index=index,
+                          columns=['A', 'B', 'C'])
+        deleveled = frame.delevel()
+
+        result0 = frame.groupby(level=0).sum()
+        result1 = frame.groupby(level=1).sum()
+
+        expected0 = frame.groupby(deleveled['label_0']).sum()
+        expected1 = frame.groupby(deleveled['label_1']).sum()
+
+        assert_frame_equal(result0, expected0)
+        assert_frame_equal(result1, expected1)
+
+        result0 = frame.T.groupby(level=0, axis=1).sum()
+        result1 = frame.T.groupby(level=1, axis=1).sum()
+        assert_frame_equal(result0, expected0.T)
+        assert_frame_equal(result1, expected1.T)
+
+    def test_groupby_level_mapper(self):
+        index = MultiIndex(levels=[['foo', 'bar', 'baz', 'qux'],
+                                   ['one', 'two', 'three']],
+                           labels=[[0, 0, 0, 1, 1, 2, 2, 3, 3, 3],
+                                   [0, 1, 2, 0, 1, 1, 2, 0, 1, 2]])
+        frame = DataFrame(np.random.randn(10, 3), index=index,
+                          columns=['A', 'B', 'C'])
+        deleveled = frame.delevel()
+
+        result0 = frame.groupby(level=0).sum()
+        result1 = frame.groupby(level=1).sum()
+
+        expected0 = frame.groupby(deleveled['label_0']).sum()
+        expected1 = frame.groupby(deleveled['label_1']).sum()
+
+        assert_frame_equal(result0, expected0)
+        assert_frame_equal(result1, expected1)
+
+        result0 = frame.T.groupby(level=0, axis=1).sum()
+        result1 = frame.T.groupby(level=1, axis=1).sum()
+        assert_frame_equal(result0, expected0.T)
+        assert_frame_equal(result1, expected1.T)
+
 class TestPanelGroupBy(unittest.TestCase):
 
     def setUp(self):
