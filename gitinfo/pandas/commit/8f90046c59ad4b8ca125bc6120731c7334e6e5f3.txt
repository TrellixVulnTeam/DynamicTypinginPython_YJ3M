commit 8f90046c59ad4b8ca125bc6120731c7334e6e5f3
Author: Jered Dominguez-Trujillo <jereddt@gmail.com>
Date:   Sun Mar 22 14:34:43 2020 -0600

    ERR: Better error message for missing columns in aggregate (#32836)

diff --git a/doc/source/whatsnew/v1.1.0.rst b/doc/source/whatsnew/v1.1.0.rst
index 9b2247389..692df075f 100644
--- a/doc/source/whatsnew/v1.1.0.rst
+++ b/doc/source/whatsnew/v1.1.0.rst
@@ -385,7 +385,7 @@ Reshaping
 - :meth:`DataFrame.replace` and :meth:`Series.replace` will raise a ``TypeError`` if ``to_replace`` is not an expected type. Previously the ``replace`` would fail silently (:issue:`18634`)
 - Bug in :meth:`DataFrame.apply` where callback was called with :class:`Series` parameter even though ``raw=True`` requested. (:issue:`32423`)
 - Bug in :meth:`DataFrame.pivot_table` losing timezone information when creating a :class:`MultiIndex` level from a column with timezone-aware dtype (:issue:`32558`)
-
+- :meth:`DataFrame.agg` now provides more descriptive ``SpecificationError`` message when attempting to aggregating non-existant column (:issue:`32755`)
 
 Sparse
 ^^^^^^
diff --git a/pandas/core/base.py b/pandas/core/base.py
index caf8069a2..148be3f50 100644
--- a/pandas/core/base.py
+++ b/pandas/core/base.py
@@ -356,7 +356,8 @@ class SelectionMixin:
                 if isinstance(obj, ABCDataFrame) and len(
                     obj.columns.intersection(keys)
                 ) != len(keys):
-                    raise SpecificationError("nested renamer is not supported")
+                    cols = sorted(set(keys) - set(obj.columns.intersection(keys)))
+                    raise SpecificationError(f"Column(s) {cols} do not exist")
 
             from pandas.core.reshape.concat import concat
 
diff --git a/pandas/tests/groupby/aggregate/test_other.py b/pandas/tests/groupby/aggregate/test_other.py
index 52ee3e652..264cf40dc 100644
--- a/pandas/tests/groupby/aggregate/test_other.py
+++ b/pandas/tests/groupby/aggregate/test_other.py
@@ -209,7 +209,7 @@ def test_aggregate_api_consistency():
     expected = pd.concat([c_mean, c_sum, d_mean, d_sum], axis=1)
     expected.columns = MultiIndex.from_product([["C", "D"], ["mean", "sum"]])
 
-    msg = r"nested renamer is not supported"
+    msg = r"Column\(s\) \['r', 'r2'\] do not exist"
     with pytest.raises(SpecificationError, match=msg):
         grouped[["D", "C"]].agg({"r": np.sum, "r2": np.mean})
 
@@ -224,9 +224,11 @@ def test_agg_dict_renaming_deprecation():
             {"B": {"foo": ["sum", "max"]}, "C": {"bar": ["count", "min"]}}
         )
 
+    msg = r"Column\(s\) \['ma'\] do not exist"
     with pytest.raises(SpecificationError, match=msg):
         df.groupby("A")[["B", "C"]].agg({"ma": "max"})
 
+    msg = r"nested renamer is not supported"
     with pytest.raises(SpecificationError, match=msg):
         df.groupby("A").B.agg({"foo": "count"})
 
diff --git a/pandas/tests/resample/test_resample_api.py b/pandas/tests/resample/test_resample_api.py
index 6389c88c9..5044a18e3 100644
--- a/pandas/tests/resample/test_resample_api.py
+++ b/pandas/tests/resample/test_resample_api.py
@@ -287,7 +287,7 @@ def test_agg_consistency():
 
     r = df.resample("3T")
 
-    msg = "nested renamer is not supported"
+    msg = r"Column\(s\) \['r1', 'r2'\] do not exist"
     with pytest.raises(pd.core.base.SpecificationError, match=msg):
         r.agg({"r1": "mean", "r2": "sum"})
 
@@ -419,7 +419,7 @@ def test_agg_misc():
         [("result1", "A"), ("result1", "B"), ("result2", "A"), ("result2", "B")]
     )
 
-    msg = "nested renamer is not supported"
+    msg = r"Column\(s\) \['result1', 'result2'\] do not exist"
     for t in cases:
         with pytest.raises(pd.core.base.SpecificationError, match=msg):
             t[["A", "B"]].agg(OrderedDict([("result1", np.sum), ("result2", np.mean)]))
@@ -440,6 +440,8 @@ def test_agg_misc():
         result = t[["A", "B"]].agg({"A": ["sum", "std"], "B": ["mean", "std"]})
         tm.assert_frame_equal(result, expected, check_like=True)
 
+    msg = "nested renamer is not supported"
+
     # series like aggs
     for t in cases:
         with pytest.raises(pd.core.base.SpecificationError, match=msg):
