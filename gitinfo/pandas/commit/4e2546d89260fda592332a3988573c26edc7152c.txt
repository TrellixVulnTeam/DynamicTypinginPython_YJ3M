commit 4e2546d89260fda592332a3988573c26edc7152c
Author: MomIsBestFriend <50263213+MomIsBestFriend@users.noreply.github.com>
Date:   Sun Jan 12 19:04:18 2020 +0200

    STY: wrong placed space in strings (#30940)

diff --git a/pandas/tests/frame/test_missing.py b/pandas/tests/frame/test_missing.py
index 2e6759cb1..ae0516dd2 100644
--- a/pandas/tests/frame/test_missing.py
+++ b/pandas/tests/frame/test_missing.py
@@ -670,8 +670,8 @@ class TestDataFrameMissingData:
             float_frame.fillna((1, 2))
         # frame with series
         msg = (
-            '"value" parameter must be a scalar, dict or Series, but you'
-            ' passed a "DataFrame"'
+            '"value" parameter must be a scalar, dict or Series, but you '
+            'passed a "DataFrame"'
         )
         with pytest.raises(TypeError, match=msg):
             float_frame.iloc[:, 0].fillna(float_frame)
diff --git a/pandas/tests/frame/test_repr_info.py b/pandas/tests/frame/test_repr_info.py
index 05bdec4a3..49e6fe494 100644
--- a/pandas/tests/frame/test_repr_info.py
+++ b/pandas/tests/frame/test_repr_info.py
@@ -164,13 +164,13 @@ class TestDataFrameReprInfoEtc:
                 "Id": [7117434],
                 "StringCol": (
                     "Is it possible to modify drop plot code"
-                    " so that the output graph is displayed "
+                    "so that the output graph is displayed "
                     "in iphone simulator, Is it possible to "
                     "modify drop plot code so that the "
                     "output graph is \xe2\x80\xa8displayed "
                     "in iphone simulator.Now we are adding "
-                    "the CSV file externally. I want to Call"
-                    " the File through the code.."
+                    "the CSV file externally. I want to Call "
+                    "the File through the code.."
                 ),
             }
         )
diff --git a/pandas/tests/frame/test_reshape.py b/pandas/tests/frame/test_reshape.py
index 56a0c8cf4..60b7611c8 100644
--- a/pandas/tests/frame/test_reshape.py
+++ b/pandas/tests/frame/test_reshape.py
@@ -424,8 +424,8 @@ class TestDataFrameReshape:
         # When mixed types are passed and the ints are not level
         # names, raise
         msg = (
-            "level should contain all level names or all level numbers, not"
-            " a mixture of the two"
+            "level should contain all level names or all level numbers, not "
+            "a mixture of the two"
         )
         with pytest.raises(ValueError, match=msg):
             df2.stack(level=["animal", 0])
diff --git a/pandas/tests/groupby/test_grouping.py b/pandas/tests/groupby/test_grouping.py
index 70ba21d89..e42491380 100644
--- a/pandas/tests/groupby/test_grouping.py
+++ b/pandas/tests/groupby/test_grouping.py
@@ -725,10 +725,7 @@ class TestGetGroup:
             g.get_group("foo")
         with pytest.raises(ValueError, match=msg):
             g.get_group(("foo"))
-        msg = (
-            "must supply a same-length tuple to get_group with multiple"
-            " grouping keys"
-        )
+        msg = "must supply a same-length tuple to get_group with multiple grouping keys"
         with pytest.raises(ValueError, match=msg):
             g.get_group(("foo", "bar", "baz"))
 
diff --git a/pandas/tests/plotting/test_datetimelike.py b/pandas/tests/plotting/test_datetimelike.py
index 8f855fd0c..fb86b600d 100644
--- a/pandas/tests/plotting/test_datetimelike.py
+++ b/pandas/tests/plotting/test_datetimelike.py
@@ -121,8 +121,8 @@ class TestTSPlot(TestPlotBase):
         ts = tm.makeTimeSeries()
         msg = (
             "Cannot pass 'style' string with a color symbol and 'color' "
-            "keyword argument. Please use one or the other or pass 'style'"
-            " without a color symbol"
+            "keyword argument. Please use one or the other or pass 'style' "
+            "without a color symbol"
         )
         with pytest.raises(ValueError, match=msg):
             ts.plot(style="b-", color="#000099")
diff --git a/pandas/tests/plotting/test_misc.py b/pandas/tests/plotting/test_misc.py
index c8aa1f23c..228c84528 100644
--- a/pandas/tests/plotting/test_misc.py
+++ b/pandas/tests/plotting/test_misc.py
@@ -319,8 +319,8 @@ class TestDataFramePlots(TestPlotBase):
 
         # Case len(title) > len(df)
         msg = (
-            "The length of `title` must equal the number of columns if"
-            " using `title` of type `list` and `subplots=True`"
+            "The length of `title` must equal the number of columns if "
+            "using `title` of type `list` and `subplots=True`"
         )
         with pytest.raises(ValueError, match=msg):
             df.plot(subplots=True, title=title + ["kittens > puppies"])
@@ -331,8 +331,8 @@ class TestDataFramePlots(TestPlotBase):
 
         # Case subplots=False and title is of type list
         msg = (
-            "Using `title` of type `list` is not supported unless"
-            " `subplots=True` is passed"
+            "Using `title` of type `list` is not supported unless "
+            "`subplots=True` is passed"
         )
         with pytest.raises(ValueError, match=msg):
             df.plot(subplots=False, title=title)
diff --git a/pandas/tests/reshape/merge/test_join.py b/pandas/tests/reshape/merge/test_join.py
index a660acb14..7020d373c 100644
--- a/pandas/tests/reshape/merge/test_join.py
+++ b/pandas/tests/reshape/merge/test_join.py
@@ -212,8 +212,8 @@ class TestJoin:
         source_copy = source.copy()
         source_copy["A"] = 0
         msg = (
-            "You are trying to merge on float64 and object columns. If"
-            " you wish to proceed you should use pd.concat"
+            "You are trying to merge on float64 and object columns. If "
+            "you wish to proceed you should use pd.concat"
         )
         with pytest.raises(ValueError, match=msg):
             target.join(source_copy, on="A")
diff --git a/pandas/tests/reshape/merge/test_merge.py b/pandas/tests/reshape/merge/test_merge.py
index 8e0c47660..30c440035 100644
--- a/pandas/tests/reshape/merge/test_merge.py
+++ b/pandas/tests/reshape/merge/test_merge.py
@@ -201,8 +201,8 @@ class TestMerge:
             merge(self.left, self.right, right_index=True)
 
         msg = (
-            'Can only pass argument "on" OR "left_on" and "right_on", not'
-            " a combination of both"
+            'Can only pass argument "on" OR "left_on" and "right_on", not '
+            "a combination of both"
         )
         with pytest.raises(pd.errors.MergeError, match=msg):
             merge(self.left, self.left, left_on="key", on="key")
@@ -1013,10 +1013,9 @@ class TestMerge:
             df_badcolumn = DataFrame({"col1": [1, 2], i: [2, 2]})
 
             msg = (
-                "Cannot use `indicator=True` option when data contains a"
-                " column named {}|"
-                "Cannot use name of an existing column for indicator"
-                " column"
+                "Cannot use `indicator=True` option when data contains a "
+                "column named {}|"
+                "Cannot use name of an existing column for indicator column"
             ).format(i)
             with pytest.raises(ValueError, match=msg):
                 merge(df1, df_badcolumn, on="col1", how="outer", indicator=True)
@@ -1235,8 +1234,8 @@ class TestMerge:
         )
 
         msg = (
-            "Merge keys are not unique in either left or right dataset;"
-            " not a one-to-one merge"
+            "Merge keys are not unique in either left or right dataset; "
+            "not a one-to-one merge"
         )
         with pytest.raises(MergeError, match=msg):
             merge(left, right, on="a", validate="1:1")
diff --git a/pandas/tests/reshape/test_concat.py b/pandas/tests/reshape/test_concat.py
index 990669f1a..b3b2c5a05 100644
--- a/pandas/tests/reshape/test_concat.py
+++ b/pandas/tests/reshape/test_concat.py
@@ -198,8 +198,8 @@ class TestConcatAppendCommon:
 
             # cannot append non-index
             msg = (
-                r"cannot concatenate object of type '.+';"
-                " only Series and DataFrame objs are valid"
+                r"cannot concatenate object of type '.+'; "
+                "only Series and DataFrame objs are valid"
             )
             with pytest.raises(TypeError, match=msg):
                 pd.Series(vals1).append(vals2)
@@ -1866,8 +1866,8 @@ class TestConcatenate:
         # trying to concat a ndframe with a non-ndframe
         df1 = tm.makeCustomDataframe(10, 2)
         msg = (
-            "cannot concatenate object of type '{}';"
-            " only Series and DataFrame objs are valid"
+            "cannot concatenate object of type '{}'; "
+            "only Series and DataFrame objs are valid"
         )
         for obj in [1, dict(), [1, 2], (1, 2)]:
             with pytest.raises(TypeError, match=msg.format(type(obj))):
diff --git a/pandas/tests/test_strings.py b/pandas/tests/test_strings.py
index 7f3375070..a92f91782 100644
--- a/pandas/tests/test_strings.py
+++ b/pandas/tests/test_strings.py
@@ -3392,8 +3392,8 @@ class TestStringMethods:
         encodeBase = Series(["a", "b", "a\x9d"])
 
         msg = (
-            r"'charmap' codec can't encode character '\\x9d' in position 1:"
-            " character maps to <undefined>"
+            r"'charmap' codec can't encode character '\\x9d' in position 1: "
+            "character maps to <undefined>"
         )
         with pytest.raises(UnicodeEncodeError, match=msg):
             encodeBase.str.encode("cp1252")
@@ -3406,8 +3406,8 @@ class TestStringMethods:
         decodeBase = Series([b"a", b"b", b"a\x9d"])
 
         msg = (
-            "'charmap' codec can't decode byte 0x9d in position 1:"
-            " character maps to <undefined>"
+            "'charmap' codec can't decode byte 0x9d in position 1: "
+            "character maps to <undefined>"
         )
         with pytest.raises(UnicodeDecodeError, match=msg):
             decodeBase.str.decode("cp1252")
diff --git a/pandas/util/_validators.py b/pandas/util/_validators.py
index b69c97466..a715094e6 100644
--- a/pandas/util/_validators.py
+++ b/pandas/util/_validators.py
@@ -297,7 +297,7 @@ def validate_axis_style_args(data, args, kwargs, arg_name, method_name):
             "\n\t'.{method_name}(index=a, columns=b)'.\nUse named "
             "arguments to remove any ambiguity. In the future, using "
             "positional arguments for 'index' or 'columns' will raise "
-            " a 'TypeError'."
+            "a 'TypeError'."
         )
         warnings.warn(msg.format(method_name=method_name), FutureWarning, stacklevel=4)
         out[data._AXIS_NAMES[0]] = args[0]
