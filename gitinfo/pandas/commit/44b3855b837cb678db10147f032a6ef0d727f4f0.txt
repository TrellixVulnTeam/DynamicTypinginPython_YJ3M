commit 44b3855b837cb678db10147f032a6ef0d727f4f0
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Fri Mar 13 20:30:12 2020 -0700

    CLN: remove Block.array_dtype, SingleBlockManager.array_dtype (#32612)

diff --git a/pandas/core/internals/blocks.py b/pandas/core/internals/blocks.py
index ea1f394aa..f07fa99fe 100644
--- a/pandas/core/internals/blocks.py
+++ b/pandas/core/internals/blocks.py
@@ -11,7 +11,6 @@ from pandas._libs import NaT, Timestamp, algos as libalgos, lib, tslib, writers
 import pandas._libs.internals as libinternals
 from pandas._libs.tslibs import Timedelta, conversion
 from pandas._libs.tslibs.timezones import tz_compare
-from pandas._typing import DtypeObj
 from pandas.util._validators import validate_bool_kwarg
 
 from pandas.core.dtypes.cast import (
@@ -256,14 +255,6 @@ class Block(PandasObject):
 
         self._mgr_locs = new_mgr_locs
 
-    @property
-    def array_dtype(self) -> DtypeObj:
-        """
-        the dtype to return if I want to construct this block as an
-        array
-        """
-        return self.dtype
-
     def make_block(self, values, placement=None) -> "Block":
         """
         Create a new block, with type inference propagate any values that are
@@ -2921,14 +2912,6 @@ class CategoricalBlock(ExtensionBlock):
     def _holder(self):
         return Categorical
 
-    @property
-    def array_dtype(self):
-        """
-        the dtype to return if I want to construct this block as an
-        array
-        """
-        return np.object_
-
     def to_dense(self):
         # Categorical.get_values returns a DatetimeIndex for datetime
         # categories, so we can't simply use `np.asarray(self.values)` like
diff --git a/pandas/core/internals/managers.py b/pandas/core/internals/managers.py
index 2a239746d..b434f8dbd 100644
--- a/pandas/core/internals/managers.py
+++ b/pandas/core/internals/managers.py
@@ -193,8 +193,10 @@ class BlockManager(PandasObject):
         # preserve dtype if possible
         if self.ndim == 1:
             assert isinstance(self, SingleBlockManager)  # for mypy
-            arr = np.array([], dtype=self.array_dtype)
-            blocks = [make_block(arr, placement=slice(0, 0), ndim=1)]
+            blk = self.blocks[0]
+            arr = blk.values[:0]
+            nb = blk.make_block_same_class(arr, placement=slice(0, 0), ndim=1)
+            blocks = [nb]
         else:
             blocks = []
         return type(self).from_blocks(blocks, axes)
@@ -1585,10 +1587,6 @@ class SingleBlockManager(BlockManager):
     def dtype(self) -> DtypeObj:
         return self._block.dtype
 
-    @property
-    def array_dtype(self) -> DtypeObj:
-        return self._block.array_dtype
-
     def get_dtype_counts(self):
         return {self.dtype.name: 1}
 
