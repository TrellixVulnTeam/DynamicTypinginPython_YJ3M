commit d5d68348748dc345275c65fa6b6dbe61deaa984d
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Thu Feb 27 10:45:18 2020 -0800

    REF/TST: misplaced tests in test_timeseries, test_timezones (#32300)

diff --git a/pandas/tests/frame/test_constructors.py b/pandas/tests/frame/test_constructors.py
index 72fc0010c..a42cfc6a2 100644
--- a/pandas/tests/frame/test_constructors.py
+++ b/pandas/tests/frame/test_constructors.py
@@ -7,6 +7,7 @@ import numpy as np
 import numpy.ma as ma
 import numpy.ma.mrecords as mrecords
 import pytest
+import pytz
 
 from pandas.compat import is_platform_little_endian
 from pandas.compat.numpy import _is_numpy_dev
@@ -2389,6 +2390,12 @@ class TestDataFrameConstructors:
         result = DataFrame.from_records(data)
         tm.assert_frame_equal(result, expected)
 
+    def test_frame_from_records_utc(self):
+        rec = {"datum": 1.5, "begin_time": datetime(2006, 4, 27, tzinfo=pytz.utc)}
+
+        # it works
+        DataFrame.from_records([rec], index="begin_time")
+
     def test_to_frame_with_falsey_names(self):
         # GH 16114
         result = Series(name=0, dtype=object).to_frame().dtypes
@@ -2460,6 +2467,18 @@ class TestDataFrameConstructors:
         )
         tm.assert_frame_equal(result, expected)
 
+    def test_from_M8_structured(self):
+        dates = [(datetime(2012, 9, 9, 0, 0), datetime(2012, 9, 8, 15, 10))]
+        arr = np.array(dates, dtype=[("Date", "M8[us]"), ("Forecasting", "M8[us]")])
+        df = DataFrame(arr)
+
+        assert df["Date"][0] == dates[0][0]
+        assert df["Forecasting"][0] == dates[0][1]
+
+        s = Series(arr["Date"])
+        assert isinstance(s[0], Timestamp)
+        assert s[0] == dates[0][0]
+
 
 class TestDataFrameConstructorWithDatetimeTZ:
     def test_from_dict(self):
diff --git a/pandas/tests/frame/test_timezones.py b/pandas/tests/frame/test_timezones.py
index 00a253d4e..dfd4fb185 100644
--- a/pandas/tests/frame/test_timezones.py
+++ b/pandas/tests/frame/test_timezones.py
@@ -1,8 +1,6 @@
 """
 Tests for DataFrame timezone-related methods
 """
-from datetime import datetime
-
 import numpy as np
 import pytest
 import pytz
@@ -53,12 +51,6 @@ class TestDataFrameTimezones:
         result = df.values
         tm.assert_numpy_array_equal(result, expected)
 
-    def test_frame_from_records_utc(self):
-        rec = {"datum": 1.5, "begin_time": datetime(2006, 4, 27, tzinfo=pytz.utc)}
-
-        # it works
-        DataFrame.from_records([rec], index="begin_time")
-
     def test_frame_join_tzaware(self):
         test1 = DataFrame(
             np.zeros((6, 3)),
diff --git a/pandas/tests/indexes/datetimes/test_datetime.py b/pandas/tests/indexes/datetimes/test_datetime.py
index 1a72ef2bd..6217f225d 100644
--- a/pandas/tests/indexes/datetimes/test_datetime.py
+++ b/pandas/tests/indexes/datetimes/test_datetime.py
@@ -5,7 +5,7 @@ import numpy as np
 import pytest
 
 import pandas as pd
-from pandas import DataFrame, DatetimeIndex, Index, Timestamp, date_range, offsets
+from pandas import DataFrame, DatetimeIndex, Index, NaT, Timestamp, date_range, offsets
 import pandas._testing as tm
 
 randn = np.random.randn
@@ -20,6 +20,24 @@ class TestDatetimeIndex:
         unpickled = tm.round_trip_pickle(index)
         tm.assert_index_equal(index, unpickled)
 
+    def test_pickle(self):
+
+        # GH#4606
+        p = tm.round_trip_pickle(NaT)
+        assert p is NaT
+
+        idx = pd.to_datetime(["2013-01-01", NaT, "2014-01-06"])
+        idx_p = tm.round_trip_pickle(idx)
+        assert idx_p[0] == idx[0]
+        assert idx_p[1] is NaT
+        assert idx_p[2] == idx[2]
+
+        # GH#11002
+        # don't infer freq
+        idx = date_range("1750-1-1", "2050-1-1", freq="7D")
+        idx_p = tm.round_trip_pickle(idx)
+        tm.assert_index_equal(idx, idx_p)
+
     def test_reindex_preserves_tz_if_target_is_empty_list_or_array(self):
         # GH7774
         index = date_range("20130101", periods=3, tz="US/Eastern")
diff --git a/pandas/tests/indexes/datetimes/test_setops.py b/pandas/tests/indexes/datetimes/test_setops.py
index d58ecbad4..ba069f524 100644
--- a/pandas/tests/indexes/datetimes/test_setops.py
+++ b/pandas/tests/indexes/datetimes/test_setops.py
@@ -347,6 +347,41 @@ class TestDatetimeIndexSetOps:
         dti2 = date_range(freq="Q-JAN", start=datetime(1997, 12, 31), periods=98)
         assert len(dti1.difference(dti2, sort)) == 2
 
+    @pytest.mark.parametrize("tz", [None, "Asia/Tokyo", "US/Eastern"])
+    def test_setops_preserve_freq(self, tz):
+        rng = date_range("1/1/2000", "1/1/2002", name="idx", tz=tz)
+
+        result = rng[:50].union(rng[50:100])
+        assert result.name == rng.name
+        assert result.freq == rng.freq
+        assert result.tz == rng.tz
+
+        result = rng[:50].union(rng[30:100])
+        assert result.name == rng.name
+        assert result.freq == rng.freq
+        assert result.tz == rng.tz
+
+        result = rng[:50].union(rng[60:100])
+        assert result.name == rng.name
+        assert result.freq is None
+        assert result.tz == rng.tz
+
+        result = rng[:50].intersection(rng[25:75])
+        assert result.name == rng.name
+        assert result.freqstr == "D"
+        assert result.tz == rng.tz
+
+        nofreq = DatetimeIndex(list(rng[25:75]), name="other")
+        result = rng[:50].union(nofreq)
+        assert result.name is None
+        assert result.freq == rng.freq
+        assert result.tz == rng.tz
+
+        result = rng[:50].intersection(nofreq)
+        assert result.name is None
+        assert result.freq == rng.freq
+        assert result.tz == rng.tz
+
 
 class TestBusinessDatetimeIndex:
     def setup_method(self, method):
diff --git a/pandas/tests/indexes/multi/test_get_level_values.py b/pandas/tests/indexes/multi/test_get_level_values.py
new file mode 100644
index 000000000..6f0b23c1e
--- /dev/null
+++ b/pandas/tests/indexes/multi/test_get_level_values.py
@@ -0,0 +1,13 @@
+from pandas import MultiIndex, Timestamp, date_range
+
+
+class TestGetLevelValues:
+    def test_get_level_values_box_datetime64(self):
+
+        dates = date_range("1/1/2000", periods=4)
+        levels = [dates, [0, 1]]
+        codes = [[0, 0, 1, 1, 2, 2, 3, 3], [0, 1, 0, 1, 0, 1, 0, 1]]
+
+        index = MultiIndex(levels=levels, codes=codes)
+
+        assert isinstance(index.get_level_values(0)[0], Timestamp)
diff --git a/pandas/tests/series/test_constructors.py b/pandas/tests/series/test_constructors.py
index b0d06793d..1a794f865 100644
--- a/pandas/tests/series/test_constructors.py
+++ b/pandas/tests/series/test_constructors.py
@@ -1421,3 +1421,10 @@ class TestSeriesConstructors:
         result = Series(dt_list)
         expected = Series(dt_list, dtype=object)
         tm.assert_series_equal(result, expected)
+
+    def test_constructor_data_aware_dtype_naive(self, tz_aware_fixture):
+        # GH#25843
+        tz = tz_aware_fixture
+        result = Series([Timestamp("2019", tz=tz)], dtype="datetime64[ns]")
+        expected = Series([Timestamp("2019")])
+        tm.assert_series_equal(result, expected)
diff --git a/pandas/tests/series/test_timeseries.py b/pandas/tests/series/test_timeseries.py
index efaf5f806..c4b2e2edd 100644
--- a/pandas/tests/series/test_timeseries.py
+++ b/pandas/tests/series/test_timeseries.py
@@ -1,21 +1,11 @@
-from datetime import datetime
 from io import StringIO
 
 import numpy as np
-import pytest
 
 from pandas._libs.tslib import iNaT
 
 import pandas as pd
-from pandas import (
-    DataFrame,
-    DatetimeIndex,
-    NaT,
-    Series,
-    Timestamp,
-    date_range,
-    timedelta_range,
-)
+from pandas import DataFrame, DatetimeIndex, Series, date_range, timedelta_range
 import pandas._testing as tm
 
 
@@ -225,82 +215,6 @@ class TestTimeSeries:
         # does .resample() set .freq correctly?
         assert df.resample("D").asfreq().index.freq == "D"
 
-    def test_pickle(self):
-
-        # GH4606
-        p = tm.round_trip_pickle(NaT)
-        assert p is NaT
-
-        idx = pd.to_datetime(["2013-01-01", NaT, "2014-01-06"])
-        idx_p = tm.round_trip_pickle(idx)
-        assert idx_p[0] == idx[0]
-        assert idx_p[1] is NaT
-        assert idx_p[2] == idx[2]
-
-        # GH11002
-        # don't infer freq
-        idx = date_range("1750-1-1", "2050-1-1", freq="7D")
-        idx_p = tm.round_trip_pickle(idx)
-        tm.assert_index_equal(idx, idx_p)
-
-    @pytest.mark.parametrize("tz", [None, "Asia/Tokyo", "US/Eastern"])
-    def test_setops_preserve_freq(self, tz):
-        rng = date_range("1/1/2000", "1/1/2002", name="idx", tz=tz)
-
-        result = rng[:50].union(rng[50:100])
-        assert result.name == rng.name
-        assert result.freq == rng.freq
-        assert result.tz == rng.tz
-
-        result = rng[:50].union(rng[30:100])
-        assert result.name == rng.name
-        assert result.freq == rng.freq
-        assert result.tz == rng.tz
-
-        result = rng[:50].union(rng[60:100])
-        assert result.name == rng.name
-        assert result.freq is None
-        assert result.tz == rng.tz
-
-        result = rng[:50].intersection(rng[25:75])
-        assert result.name == rng.name
-        assert result.freqstr == "D"
-        assert result.tz == rng.tz
-
-        nofreq = DatetimeIndex(list(rng[25:75]), name="other")
-        result = rng[:50].union(nofreq)
-        assert result.name is None
-        assert result.freq == rng.freq
-        assert result.tz == rng.tz
-
-        result = rng[:50].intersection(nofreq)
-        assert result.name is None
-        assert result.freq == rng.freq
-        assert result.tz == rng.tz
-
-    def test_from_M8_structured(self):
-        dates = [(datetime(2012, 9, 9, 0, 0), datetime(2012, 9, 8, 15, 10))]
-        arr = np.array(dates, dtype=[("Date", "M8[us]"), ("Forecasting", "M8[us]")])
-        df = DataFrame(arr)
-
-        assert df["Date"][0] == dates[0][0]
-        assert df["Forecasting"][0] == dates[0][1]
-
-        s = Series(arr["Date"])
-        assert isinstance(s[0], Timestamp)
-        assert s[0] == dates[0][0]
-
-    def test_get_level_values_box(self):
-        from pandas import MultiIndex
-
-        dates = date_range("1/1/2000", periods=4)
-        levels = [dates, [0, 1]]
-        codes = [[0, 0, 1, 1, 2, 2, 3, 3], [0, 1, 0, 1, 0, 1, 0, 1]]
-
-        index = MultiIndex(levels=levels, codes=codes)
-
-        assert isinstance(index.get_level_values(0)[0], Timestamp)
-
     def test_view_tz(self):
         # GH#24024
         ser = pd.Series(pd.date_range("2000", periods=4, tz="US/Central"))
diff --git a/pandas/tests/series/test_timezones.py b/pandas/tests/series/test_timezones.py
index a45c0bf8c..ae4fd12ab 100644
--- a/pandas/tests/series/test_timezones.py
+++ b/pandas/tests/series/test_timezones.py
@@ -76,10 +76,3 @@ class TestSeriesTimezones:
             np.arange(0, 5), index=date_range("20131027", periods=5, freq="1H", tz=tz)
         )
         tm.assert_series_equal(result, expected)
-
-    def test_constructor_data_aware_dtype_naive(self, tz_aware_fixture):
-        # GH 25843
-        tz = tz_aware_fixture
-        result = Series([Timestamp("2019", tz=tz)], dtype="datetime64[ns]")
-        expected = Series([Timestamp("2019")])
-        tm.assert_series_equal(result, expected)
