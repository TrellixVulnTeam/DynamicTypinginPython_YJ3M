commit defa04059e280d1a98707e4f43a82ed8732c4db6
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Oct 15 15:12:06 2011 -0400

    BUG: can now store datetime.date objects in PyTables, address GH #231

diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 436e61d70..e0e3c3d5f 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -5,7 +5,7 @@ to disk
 
 # pylint: disable-msg=E1101,W0613,W0603
 
-from datetime import datetime
+from datetime import datetime, date
 import time
 
 import numpy as np
@@ -706,11 +706,14 @@ def _convert_index(index):
     # Let's assume the index is homogeneous
     values = np.asarray(index)
 
-    import time
-    if isinstance(values[0], datetime):
-        converted = np.array([time.mktime(v.timetuple())
-                              for v in values], dtype=np.int64)
-        return converted, 'datetime', _tables().Time64Col()
+    if isinstance(values[0], (datetime, date)):
+        if isinstance(values[0], datetime):
+            kind = 'datetime'
+        else:
+            kind = 'date'
+        converted = np.array([time.mktime(v.timetuple()) for v in values],
+                             dtype=np.int64)
+        return converted, kind, _tables().Time64Col()
     elif isinstance(values[0], basestring):
         converted = np.array(list(values), dtype=np.str_)
         itemsize = converted.dtype.itemsize
@@ -722,7 +725,6 @@ def _convert_index(index):
     else: # pragma: no cover
         raise ValueError('unrecognized index type %s' % type(values[0]))
 
-
 def _read_array(group, key):
     import tables
     node = getattr(group, key)
@@ -737,6 +739,10 @@ def _unconvert_index(data, kind):
     if kind == 'datetime':
         index = np.array([datetime.fromtimestamp(v) for v in data],
                          dtype=object)
+    elif kind == 'date':
+        index = np.array([date.fromtimestamp(v) for v in data],
+                         dtype=object)
+
     elif kind in ('string', 'integer'):
         index = np.array(data, dtype=object)
     else: # pragma: no cover
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index ee470d593..3c76ae606 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -214,6 +214,11 @@ class TesttHDFStore(unittest.TestCase):
         self.assertRaises(ValueError, self._check_roundtrip, df[:0],
                           tm.assert_frame_equal)
 
+    def test_can_serialize_dates(self):
+        rng = [x.date() for x in DateRange('1/1/2000', '1/30/2000')]
+        frame = DataFrame(np.random.randn(len(rng), 4), index=rng)
+        self._check_roundtrip(frame, tm.assert_frame_equal)
+
     def test_store_hierarchical(self):
         index = MultiIndex(levels=[['foo', 'bar', 'baz', 'qux'],
                                    ['one', 'two', 'three']],
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 2250be415..70d1bc05e 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3165,6 +3165,15 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         expected = self.mixed_frame.ix[:, ['foo', 'B', 'C', 'A', 'D']]
         assert_frame_equal(result, expected)
 
+    def test_iterkv_names(self):
+        for k, v in self.mixed_frame.iterkv():
+            self.assertEqual(v.name, k)
+
+    def test_series_put_names(self):
+        series = self.mixed_frame._series
+        for k, v in series.iteritems():
+            self.assertEqual(v.name, k)
+
 def _join_by_hand(a, b, how='left'):
     join_index = a.index.join(b.index, how=how)
 
