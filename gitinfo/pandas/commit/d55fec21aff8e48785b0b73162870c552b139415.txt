commit d55fec21aff8e48785b0b73162870c552b139415
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Dec 26 15:54:32 2009 +0000

    release 0.1
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@97 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/LICENSE b/LICENSE.txt
similarity index 100%
rename from LICENSE
rename to LICENSE.txt
diff --git a/MANIFEST.in b/MANIFEST.in
index d45ecf8c9..e9d50ec37 100644
--- a/MANIFEST.in
+++ b/MANIFEST.in
@@ -1,4 +1,4 @@
-include TODO LICENSE README
+include TODO.txt LICENSE.txt README.txt
 include setup.py setupegg.py
 include examples/data/*
 recursive-include examples *
\ No newline at end of file
diff --git a/README.txt b/README.txt
new file mode 100644
index 000000000..57a96f201
--- /dev/null
+++ b/README.txt
@@ -0,0 +1,108 @@
+Installation from sources
+=========================
+
+In the pandas directory (same one where you found this file), execute:
+
+python setup.py install
+
+On Windows, you will need to install MinGW and execute
+
+python setup.py install --compiler=mingw32
+
+See
+
+http://pandas.sourceforge.net/
+
+For more information.
+
+=============
+Release Notes
+=============
+
+What it is
+==========
+
+pandas is a library for pan-el da-ta analysis, i.e. multidimensional
+time series and cross-sectional data sets commonly found in
+statistics, econometrics, or finance. It provides convenient and
+easy-to-understand NumPy-based data structures for generic labeled
+data, with focus on automatically aligning data based on its label(s)
+and handling missing observations. One major goal of the library is to
+simplify the implementation of statistical models on unreliable data.
+
+Main Features
+=============
+
+* Data structures: for 1, 2, and 3 dimensional labeled data
+  sets. Some of their main features include:
+
+    * Automatically aligning data
+    * Handling missing observations in calculations
+    * Convenient slicing and reshaping ("reindexing") functions
+    * Provide 'group by' aggregation or transformation functionality
+    * Tools for merging / joining together data sets
+    * Simple matplotlib integration for plotting
+
+* Date tools: objects for expressing date offsets or generating date
+  ranges; some functionality similar to scikits.timeseries
+
+* Statistical models: convenient ordinary least squares and panel OLS
+  implementations for in-sample or rolling time series /
+  cross-sectional regressions. These will hopefully be the starting
+  point for implementing other models
+
+pandas is not necessarily intended as a standalone library but rather
+as something which can be used in tandem with other NumPy-based
+packages like scikits.statsmodels. Where possible wheel-reinvention
+has largely been avoided. Also, its time series manipulation
+capability is not as extensive as scikits.timeseries; pandas does have
+its own time series object which fits into the unified data model.
+
+Some other useful tools for time series data (moving average, standard
+deviation, etc.) are available in the codebase but do not yet have a
+convenient interface. These will be highlighted in a future release.
+
+Where to get it
+===============
+
+The source code is currently hosted on googlecode at:
+
+http://pandas.googlecode.com
+
+Binary releases can be downloaded there, or alternately via the Python
+package index or easy_install
+
+PyPi: http://pypi.python.org/pypi/pandas/
+
+License
+=======
+
+BSD
+
+Documentation
+=============
+
+The official documentation is hosted on SourceForge.
+
+http://pandas.sourceforge.net/
+
+The sphinx documentation is still in an incomplete state, but it
+should provide a good starting point for learning how to use the
+library. Expect the docs to continue to expand as time goes on.
+
+Background
+==========
+
+Work on pandas started at AQR (a quantitative hedge fund) in 2008 and
+has been under active development since then.
+
+Discussion and Development
+==========================
+
+Since pandas development is related to a number of other scientific
+Python projects, questions are welcome on the scipy-user mailing
+list. Specialized discussions or design issues should take place on
+the pystatsmodels mailing list / google group, where
+scikits.statsmodels and other libraries will also be discussed:
+
+http://groups.google.com/group/pystatsmodels
diff --git a/TODO b/TODO
deleted file mode 100644
index e69de29bb..000000000
diff --git a/README b/TODO.txt
similarity index 100%
rename from README
rename to TODO.txt
diff --git a/doc/make.py b/doc/make.py
index 7a50c1b00..5492a8b2a 100755
--- a/doc/make.py
+++ b/doc/make.py
@@ -1,11 +1,5 @@
 """
-Python script for building documentation. This script was designed for
-building the docs on windows, but may work on other platforms as well.
-It has been tested on Ubuntu Jaunty and works there as well.  If it does not
-work for you and returns an error about finding sphinx-build then you need
-to edit the first lines that define `sphinx_build` to point to where
-sphinx-build is installed.  On linux you can find out by typing
-`which sphinx-build` at the command line.
+Python script for building documentation.
 
 To build the docs you must have all optional dependencies for statsmodels
 installed. See the installation instructions for a list of these.
@@ -15,57 +9,26 @@ supported in the latex generation.
 
 Usage
 -----
-
 python make.py clean
 python make.py html
 """
 
 import os
-import glob
 import shutil
 import sys
 
-# checks for sphinx-build binary these will find it if it is installed
-# in sys.prefix+'/local/bin/' or
-# in sys.predix+'/Scripts/'
-if os.path.isfile(os.path.join(sys.prefix, 'Scripts', 'sphinx-build.exe')):
-    sphinx_build = os.path.join(sys.prefix, 'Scripts', 'sphinx-build.exe')
-else:
-    sphinx_build = 'sphinx-build'
-
-def check_build():
-    build_dirs = [
-        'build', 'build/doctrees', 'build/html', 'build/latex', 'build/plots']
-    for d in build_dirs:
-        try:
-            os.mkdir(d)
-        except OSError:
-            pass
-
-    rst_files = glob.glob("source/*.rst")
+def sf():
+    'push a copy to the sf site'
+    os.system('cd build/html; rsync -avz . wesmckinn,pandas@web.sf.net:/home/groups/p/pa/pandas/htdocs/ -essh --cvs-exclude')
 
-    as_gen = "python sphinxext/autosummary_generate.py "
-
-    for rf in rst_files:
-        if os.system(as_gen + rf + " -p dump.xml -o source/generated"):
-            raise SystemExit("Failed to auto generate summary from %s" % rf)
+def clean():
+    os.system('make clean')
 
 def html():
-
-    check_build()
-    os.chdir('source')
-    if os.system(sphinx_build + ' -a -b html -d ../build/doctrees . ../build/html'):
-        raise SystemExit("Building HTML failed.")
-    os.chdir('..')
+    os.system('make html')
 
 def latex():
-
     check_build()
-    os.chdir('source')
-    # LaTeX format.
-    if os.system(sphinx_build + ' -a -b latex -d ../build/doctrees . ../build/latex'):
-        raise SystemExit("Building LaTeX failed.")
-
     # Produce pdf.
     os.chdir('../build/latex')
 
@@ -81,30 +44,34 @@ def latex():
 
     os.chdir('../..')
 
-def clean():
-    if os.path.exists('build'):
-        shutil.rmtree('build')
-
-    if os.path.exists('source/generated'):
-        shutil.rmtree('source/generated')
-
 def all():
     clean()
     html()
-    latex()
+#    latex()
+
+funcd = {
+    'html'     : html,
+    'latex'    : latex,
+    'clean'    : clean,
+    'sf'       : sf,
+    'all'      : all,
+    }
+
+
+small_docs = False
 
-funcd = {'html':html,
-         'latex':latex,
-         'clean':clean,
-         'all':all,
-         }
+# Change directory to the one containing this file
+current_dir = os.getcwd()
+os.chdir(os.path.dirname(os.path.join(current_dir, __file__)))
 
 if len(sys.argv)>1:
     for arg in sys.argv[1:]:
         func = funcd.get(arg)
         if func is None:
-            raise SystemExit('Do not know how to handle %s; valid args are'%(
+            raise SystemExit('Do not know how to handle %s; valid args are %s'%(
                     arg, funcd.keys()))
         func()
 else:
+    small_docs = False
     all()
+os.chdir(current_dir)
diff --git a/doc/source/stats.ols.rst b/doc/source/stats.ols.rst
new file mode 100644
index 000000000..4caa97a50
--- /dev/null
+++ b/doc/source/stats.ols.rst
@@ -0,0 +1,7 @@
+Ordinary least squares
+----------------------
+
+.. automodule:: pandas.stats.ols
+   :members:
+   :undoc-members:
+   :show-inheritance:
diff --git a/doc/source/stats.plm.rst b/doc/source/stats.plm.rst
new file mode 100644
index 000000000..3b3b72130
--- /dev/null
+++ b/doc/source/stats.plm.rst
@@ -0,0 +1,7 @@
+OLS Panel regression
+--------------------
+
+.. automodule:: pandas.stats.plm
+   :members:
+   :undoc-members:
+   :show-inheritance:
diff --git a/doc/source/stats.rst b/doc/source/stats.rst
index dc4d3f67d..01d144b37 100755
--- a/doc/source/stats.rst
+++ b/doc/source/stats.rst
@@ -6,5 +6,30 @@
 Statistical tools
 *****************
 
+Least-squares entry-point
+-------------------------
 
+.. autosummary::
+   :toctree: generated/
+
+   ols
+
+Class reference
+---------------
+
+.. currentmodule:: pandas.stats.ols
+
+.. autosummary::
+   :toctree: generated/
+
+   OLS
+   MovingOLS
+
+.. currentmodule:: pandas.stats.plm
+
+.. autosummary::
+   :toctree: generated/
+
+   PanelOLS
+   MovingPanelOLS
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index b5a04ce6d..aa5d6defa 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -58,8 +58,8 @@ class DataFrame(Picklable, Groupable):
     --------
     DataMatrix: more efficient version of DataFrame for most operations
 
-    Example
-    -------
+    Examples
+    --------
         >>> d = {'col1' : ts1, 'col2' : ts2}
         >>> df = DataFrame(data=d, index=someIndex)
     """
@@ -125,8 +125,8 @@ class DataFrame(Picklable, Groupable):
         -------
         DataFrame
 
-        Example
-        -------
+        Examples
+        --------
         df1 = DataFrame.fromDict(myDict)
         df2 = DataFrame.fromDict(A=seriesA, B=seriesB)
         """
@@ -462,8 +462,8 @@ class DataFrame(Picklable, Groupable):
         other : constant, array, or DataFrame/Matrix
         func : function taking two arguments
 
-        Example
-        -------
+        Examples
+        --------
         frame._combineFunc(otherFrame, lambda x, y: x + y)
         """
         newColumns = {}
@@ -1042,8 +1042,8 @@ class DataFrame(Picklable, Groupable):
             Function to apply to each column
         axis : {0, 1}
 
-        Example
-        -------
+        Examples
+        --------
             >>> df.apply(numpy.sqrt) --> DataFrame
             >>> df.apply(numpy.sum) --> Series
 
@@ -1167,8 +1167,8 @@ class DataFrame(Picklable, Groupable):
         ----------
         otherFrame : DataFrame / Matrix
 
-        Example
-        -------
+        Examples
+        --------
         a.combineFirst(b)
             a's values prioritized, use values from b to fill holes
 
@@ -1311,8 +1311,8 @@ class DataFrame(Picklable, Groupable):
         on : string
             Column name to use
 
-        Example
-        -------
+        Examples
+        --------
         This frame         Other frame
             c1                 q1
         a   1              0   v1
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index cdae16b4c..5626f8405 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -23,8 +23,8 @@ class DataMatrix(DataFrame):
     numerical computation, and other operations that do not require the
     frame to change size.
 
-    Constructor params
-    ------------------
+    Parameters
+    ----------
     data : numpy ndarray or dict of Series
         Constructor can understand various kinds of inputs
     index : Index or array-like
@@ -224,8 +224,8 @@ class DataMatrix(DataFrame):
             Keys become column names of returned frame
         kwds : optionally provide arguments as keywords
 
-        Example
-        -------
+        Examples
+        --------
         df1 = DataMatrix.fromDict(myDict)
         df2 = DataMatrix.fromDict(A=seriesA, B=seriesB)
         """
@@ -1169,8 +1169,8 @@ class DataMatrix(DataFrame):
         on : string
             Column name to use
 
-        Example
-        -------
+        Examples
+        --------
         This frame         Other frame
             c1                 q1
         a   1              0   v1
@@ -1349,8 +1349,8 @@ class DataMatrix(DataFrame):
         func : function
             Function to apply to each column
 
-        Example
-        -------
+        Examples
+        --------
 
             >>> df.apply(numpy.sqrt) --> DataMatrix
             >>> df.apply(numpy.sum) --> Series
@@ -1477,8 +1477,8 @@ class DataMatrix(DataFrame):
         ----------
         otherFrame : DataFrame / Matrix
 
-        Example
-        -------
+        Examples
+        --------
         a.combineFirst(b)
             a's values prioritized, use values from b to fill holes
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 15383f124..d107c5cfc 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -98,8 +98,8 @@ class Series(np.ndarray, Picklable, Groupable):
     be present or the value for that index position will be nan. The
     new index is the sorted union of the two Series indices.
 
-    Example
-    -------
+    Examples
+    --------
         >>> s = Series(arr, index=Index(dates))
         >>> t = Series(otherArr, index=Index(otherDates))
         >>> s / t # --> new Series resulting from by-index division of elements
diff --git a/pandas/core/tests/test_index.py b/pandas/core/tests/test_index.py
index adf61005f..b3d9f294d 100644
--- a/pandas/core/tests/test_index.py
+++ b/pandas/core/tests/test_index.py
@@ -163,15 +163,15 @@ class TestIndex(unittest.TestCase):
 
     def test_pickle(self):
         def testit(index):
-            f = open('tmp', 'wb')
+            f = open('__tmp__', 'wb')
             pickle.dump(index, f)
             f.close()
 
-            f = open('tmp', 'rb')
+            f = open('__tmp__', 'rb')
             unPickled = pickle.load(f)
             f.close()
 
-            os.remove('tmp')
+            os.remove('__tmp__')
 
             self.assert_(isinstance(unPickled, Index))
             self.assert_(np.array_equal(unPickled, index))
diff --git a/setup.py b/setup.py
index 5d2f72b96..e9f98fa2f 100644
--- a/setup.py
+++ b/setup.py
@@ -9,15 +9,26 @@ import numpy
 
 DESCRIPTION = "Cross-section and time series data analysis toolkit"
 LONG_DESCRIPTION = """
-Pandas provides data structures and statistical tools for common
-time-series and cross-sectional data sets.
+pandas provides NumPy-based data structures and statistical tools for
+common time series and cross-sectional data sets. It is intended to
+accomplish the following:
+
+* Simplify working with possibly labeled 1, 2, and 3 dimensional
+  heterogeneous data sets commonly found in statistics, finance, and
+  econometrics.
+
+* Provide IO utilities for getting data in and out of pandas
+
+* Implement common statistical models with a convenient interface,
+  handling missing data and other common problems associated with
+  messy statistical data sets
 """
 
 DISTNAME = 'pandas'
 LICENSE = 'BSD'
 MAINTAINER = "AQR Capital Management, LLC"
 MAINTAINER_EMAIL = "wesmckinn@gmail.com"
-URL = "pandas.googlecode.com"
+URL = "http://pandas.sourceforge.net"
 DOWNLOAD_URL = ''
 CLASSIFIERS = [
     'Development Status :: 4 - Beta',
@@ -54,7 +65,7 @@ def configuration(parent_package='', top_path=None, package_name=DISTNAME):
     config = Configuration(None, parent_package, top_path,
                            name=DISTNAME,
                            version=get_version(),
-                           maintainer =MAINTAINER,
+                           maintainer=MAINTAINER,
                            maintainer_email=MAINTAINER_EMAIL,
                            description=DESCRIPTION,
                            license=LICENSE,
@@ -83,7 +94,7 @@ if __name__ == '__main__':
     setup(configuration=configuration,
           packages=setuptools.find_packages(),
           classifiers=CLASSIFIERS,
-          requires=['numpy', 'scipy', 'scikits.statsmodels', 'dateutil'],
+          requires=['numpy'],
           platforms='any',
           test_suite='nose.collector',
           zip_safe=False)
