commit 2ef8fd1b819c04cb1217fcd5ed79f9a2b6b6bb85
Author: Quang Nguyá»…n <30631476+quangngd@users.noreply.github.com>
Date:   Wed Mar 25 00:04:28 2020 +0700

    TST: bare pytest raises in tests/scalar (#32929)

diff --git a/pandas/tests/scalar/interval/test_interval.py b/pandas/tests/scalar/interval/test_interval.py
index b51429d03..b21e98827 100644
--- a/pandas/tests/scalar/interval/test_interval.py
+++ b/pandas/tests/scalar/interval/test_interval.py
@@ -49,7 +49,8 @@ class TestInterval:
         assert Interval(0, 1) != 0
 
     def test_comparison(self):
-        with pytest.raises(TypeError, match="unorderable types"):
+        msg = "unorderable types"
+        with pytest.raises(TypeError, match=msg):
             Interval(0, 1) < 2
 
         assert Interval(0, 1) < Interval(1, 2)
@@ -254,6 +255,12 @@ class TestInterval:
         # GH 18538
         left = Timestamp("2017-01-01", tz=tz_left)
         right = Timestamp("2017-01-02", tz=tz_right)
-        error = TypeError if com.any_none(tz_left, tz_right) else ValueError
-        with pytest.raises(error):
+
+        if com.any_none(tz_left, tz_right):
+            error = TypeError
+            msg = "Cannot compare tz-naive and tz-aware timestamps"
+        else:
+            error = ValueError
+            msg = "left and right must have the same time zone"
+        with pytest.raises(error, match=msg):
             Interval(left, right)
diff --git a/pandas/tests/scalar/period/test_asfreq.py b/pandas/tests/scalar/period/test_asfreq.py
index 436810042..b9f637c17 100644
--- a/pandas/tests/scalar/period/test_asfreq.py
+++ b/pandas/tests/scalar/period/test_asfreq.py
@@ -33,7 +33,8 @@ class TestFreqConversion:
     def test_to_timestamp_out_of_bounds(self):
         # GH#19643, used to incorrectly give Timestamp in 1754
         per = Period("0001-01-01", freq="B")
-        with pytest.raises(OutOfBoundsDatetime):
+        msg = "Out of bounds nanosecond timestamp"
+        with pytest.raises(OutOfBoundsDatetime, match=msg):
             per.to_timestamp()
 
     def test_asfreq_corner(self):
@@ -668,9 +669,10 @@ class TestFreqConversion:
         assert start.value == per.ordinal * 1000
 
         per2 = Period("2300-01-01", "us")
-        with pytest.raises(OutOfBoundsDatetime, match="2300-01-01"):
+        msg = "2300-01-01"
+        with pytest.raises(OutOfBoundsDatetime, match=msg):
             per2.start_time
-        with pytest.raises(OutOfBoundsDatetime, match="2300-01-01"):
+        with pytest.raises(OutOfBoundsDatetime, match=msg):
             per2.end_time
 
     def test_asfreq_mult(self):
diff --git a/pandas/tests/scalar/period/test_period.py b/pandas/tests/scalar/period/test_period.py
index 1fee40c2a..304033f82 100644
--- a/pandas/tests/scalar/period/test_period.py
+++ b/pandas/tests/scalar/period/test_period.py
@@ -79,7 +79,8 @@ class TestPeriodConstruction:
         with pytest.raises(ValueError, match=msg):
             Period(ordinal=200701)
 
-        with pytest.raises(ValueError, match="Invalid frequency: X"):
+        msg = "Invalid frequency: X"
+        with pytest.raises(ValueError, match=msg):
             Period("2007-1-1", freq="X")
 
     def test_construction_bday(self):
@@ -235,26 +236,34 @@ class TestPeriodConstruction:
         assert i1 == expected
 
     def test_invalid_arguments(self):
-        with pytest.raises(ValueError):
+        msg = "Must supply freq for datetime value"
+        with pytest.raises(ValueError, match=msg):
             Period(datetime.now())
-        with pytest.raises(ValueError):
+        with pytest.raises(ValueError, match=msg):
             Period(datetime.now().date())
 
-        with pytest.raises(ValueError):
+        msg = "Value must be Period, string, integer, or datetime"
+        with pytest.raises(ValueError, match=msg):
             Period(1.6, freq="D")
-        with pytest.raises(ValueError):
+        msg = "Ordinal must be an integer"
+        with pytest.raises(ValueError, match=msg):
             Period(ordinal=1.6, freq="D")
-        with pytest.raises(ValueError):
+        msg = "Only value or ordinal but not both should be given but not both"
+        with pytest.raises(ValueError, match=msg):
             Period(ordinal=2, value=1, freq="D")
 
-        with pytest.raises(ValueError):
+        msg = "If value is None, freq cannot be None"
+        with pytest.raises(ValueError, match=msg):
             Period(month=1)
 
-        with pytest.raises(ValueError):
+        msg = "Given date string not likely a datetime"
+        with pytest.raises(ValueError, match=msg):
             Period("-2000", "A")
-        with pytest.raises(DateParseError):
+        msg = "day is out of range for month"
+        with pytest.raises(DateParseError, match=msg):
             Period("0", "A")
-        with pytest.raises(DateParseError):
+        msg = "Unknown datetime string format, unable to parse"
+        with pytest.raises(DateParseError, match=msg):
             Period("1/1/-2000", "A")
 
     def test_constructor_corner(self):
@@ -1030,7 +1039,8 @@ class TestArithmetic:
         result = left - right
         assert result == 4 * right.freq
 
-        with pytest.raises(IncompatibleFrequency):
+        msg = r"Input has different freq=M from Period\(freq=A-DEC\)"
+        with pytest.raises(IncompatibleFrequency, match=msg):
             left - Period("2007-01", freq="M")
 
     def test_add_integer(self):
@@ -1072,10 +1082,14 @@ class TestArithmetic:
 
         # We may get a different message depending on which class raises
         # the error.
-        msg = (
-            r"cannot add|unsupported operand|"
-            r"can only operate on a|incompatible type|"
-            r"ufunc add cannot use operands"
+        msg = "|".join(
+            [
+                "cannot add",
+                "unsupported operand",
+                "can only operate on a",
+                "incompatible type",
+                "ufunc add cannot use operands",
+            ]
         )
         with pytest.raises(TypeError, match=msg):
             lbox(ts) + rbox(per)
@@ -1148,14 +1162,22 @@ class TestArithmetic:
                 np.timedelta64(365, "D"),
                 timedelta(365),
             ]:
-                with pytest.raises(IncompatibleFrequency):
+                msg = "Input has different freq|Input cannot be converted to Period"
+                with pytest.raises(IncompatibleFrequency, match=msg):
                     p + o
 
                 if isinstance(o, np.timedelta64):
-                    with pytest.raises(TypeError):
+                    msg = "cannot use operands with types"
+                    with pytest.raises(TypeError, match=msg):
                         o + p
                 else:
-                    with pytest.raises(IncompatibleFrequency):
+                    msg = "|".join(
+                        [
+                            "Input has different freq",
+                            "Input cannot be converted to Period",
+                        ]
+                    )
+                    with pytest.raises(IncompatibleFrequency, match=msg):
                         o + p
 
         for freq in ["M", "2M", "3M"]:
@@ -1175,14 +1197,22 @@ class TestArithmetic:
                 np.timedelta64(365, "D"),
                 timedelta(365),
             ]:
-                with pytest.raises(IncompatibleFrequency):
+                msg = "Input has different freq|Input cannot be converted to Period"
+                with pytest.raises(IncompatibleFrequency, match=msg):
                     p + o
 
                 if isinstance(o, np.timedelta64):
-                    with pytest.raises(TypeError):
+                    msg = "cannot use operands with types"
+                    with pytest.raises(TypeError, match=msg):
                         o + p
                 else:
-                    with pytest.raises(IncompatibleFrequency):
+                    msg = "|".join(
+                        [
+                            "Input has different freq",
+                            "Input cannot be converted to Period",
+                        ]
+                    )
+                    with pytest.raises(IncompatibleFrequency, match=msg):
                         o + p
 
         # freq is Tick
@@ -1199,12 +1229,13 @@ class TestArithmetic:
 
             exp = Period("2011-04-03", freq=freq)
             assert p + np.timedelta64(2, "D") == exp
-            with pytest.raises(TypeError):
+            msg = "cannot use operands with types"
+            with pytest.raises(TypeError, match=msg):
                 np.timedelta64(2, "D") + p
 
             exp = Period("2011-04-02", freq=freq)
             assert p + np.timedelta64(3600 * 24, "s") == exp
-            with pytest.raises(TypeError):
+            with pytest.raises(TypeError, match=msg):
                 np.timedelta64(3600 * 24, "s") + p
 
             exp = Period("2011-03-30", freq=freq)
@@ -1222,14 +1253,22 @@ class TestArithmetic:
                 np.timedelta64(4, "h"),
                 timedelta(hours=23),
             ]:
-                with pytest.raises(IncompatibleFrequency):
+                msg = "Input has different freq|Input cannot be converted to Period"
+                with pytest.raises(IncompatibleFrequency, match=msg):
                     p + o
 
                 if isinstance(o, np.timedelta64):
-                    with pytest.raises(TypeError):
+                    msg = "cannot use operands with types"
+                    with pytest.raises(TypeError, match=msg):
                         o + p
                 else:
-                    with pytest.raises(IncompatibleFrequency):
+                    msg = "|".join(
+                        [
+                            "Input has different freq",
+                            "Input cannot be converted to Period",
+                        ]
+                    )
+                    with pytest.raises(IncompatibleFrequency, match=msg):
                         o + p
 
         for freq in ["H", "2H", "3H"]:
@@ -1243,14 +1282,15 @@ class TestArithmetic:
             assert p + offsets.Hour(3) == exp
             assert offsets.Hour(3) + p == exp
 
+            msg = "cannot use operands with types"
             exp = Period("2011-04-01 12:00", freq=freq)
             assert p + np.timedelta64(3, "h") == exp
-            with pytest.raises(TypeError):
+            with pytest.raises(TypeError, match=msg):
                 np.timedelta64(3, "h") + p
 
             exp = Period("2011-04-01 10:00", freq=freq)
             assert p + np.timedelta64(3600, "s") == exp
-            with pytest.raises(TypeError):
+            with pytest.raises(TypeError, match=msg):
                 np.timedelta64(3600, "s") + p
 
             exp = Period("2011-04-01 11:00", freq=freq)
@@ -1268,18 +1308,27 @@ class TestArithmetic:
                 np.timedelta64(3200, "s"),
                 timedelta(hours=23, minutes=30),
             ]:
-                with pytest.raises(IncompatibleFrequency):
+                msg = "Input has different freq|Input cannot be converted to Period"
+                with pytest.raises(IncompatibleFrequency, match=msg):
                     p + o
 
                 if isinstance(o, np.timedelta64):
-                    with pytest.raises(TypeError):
+                    msg = "cannot use operands with types"
+                    with pytest.raises(TypeError, match=msg):
                         o + p
                 else:
-                    with pytest.raises(IncompatibleFrequency):
+                    msg = "|".join(
+                        [
+                            "Input has different freq",
+                            "Input cannot be converted to Period",
+                        ]
+                    )
+                    with pytest.raises(IncompatibleFrequency, match=msg):
                         o + p
 
     def test_sub_offset(self):
         # freq is DateOffset
+        msg = "Input has different freq|Input cannot be converted to Period"
         for freq in ["A", "2A", "3A"]:
             p = Period("2011", freq=freq)
             assert p - offsets.YearEnd(2) == Period("2009", freq=freq)
@@ -1291,7 +1340,7 @@ class TestArithmetic:
                 np.timedelta64(365, "D"),
                 timedelta(365),
             ]:
-                with pytest.raises(IncompatibleFrequency):
+                with pytest.raises(IncompatibleFrequency, match=msg):
                     p - o
 
         for freq in ["M", "2M", "3M"]:
@@ -1306,7 +1355,7 @@ class TestArithmetic:
                 np.timedelta64(365, "D"),
                 timedelta(365),
             ]:
-                with pytest.raises(IncompatibleFrequency):
+                with pytest.raises(IncompatibleFrequency, match=msg):
                     p - o
 
         # freq is Tick
@@ -1326,7 +1375,7 @@ class TestArithmetic:
                 np.timedelta64(4, "h"),
                 timedelta(hours=23),
             ]:
-                with pytest.raises(IncompatibleFrequency):
+                with pytest.raises(IncompatibleFrequency, match=msg):
                     p - o
 
         for freq in ["H", "2H", "3H"]:
@@ -1349,7 +1398,7 @@ class TestArithmetic:
                 np.timedelta64(3200, "s"),
                 timedelta(hours=23, minutes=30),
             ]:
-                with pytest.raises(IncompatibleFrequency):
+                with pytest.raises(IncompatibleFrequency, match=msg):
                     p - o
 
     @pytest.mark.parametrize("freq", ["M", "2M", "3M"])
@@ -1377,12 +1426,14 @@ class TestArithmetic:
 
 def test_period_immutable():
     # see gh-17116
+    msg = "not writable"
+
     per = Period("2014Q1")
-    with pytest.raises(AttributeError):
+    with pytest.raises(AttributeError, match=msg):
         per.ordinal = 14
 
     freq = per.freq
-    with pytest.raises(AttributeError):
+    with pytest.raises(AttributeError, match=msg):
         per.freq = 2 * freq
 
 
diff --git a/pandas/tests/scalar/test_na_scalar.py b/pandas/tests/scalar/test_na_scalar.py
index 07656de2e..a0e3f8984 100644
--- a/pandas/tests/scalar/test_na_scalar.py
+++ b/pandas/tests/scalar/test_na_scalar.py
@@ -23,10 +23,12 @@ def test_repr():
 
 
 def test_truthiness():
-    with pytest.raises(TypeError):
+    msg = "boolean value of NA is ambiguous"
+
+    with pytest.raises(TypeError, match=msg):
         bool(NA)
 
-    with pytest.raises(TypeError):
+    with pytest.raises(TypeError, match=msg):
         not NA
 
 
@@ -145,7 +147,8 @@ def test_logical_and():
     assert False & NA is False
     assert NA & NA is NA
 
-    with pytest.raises(TypeError):
+    msg = "unsupported operand type"
+    with pytest.raises(TypeError, match=msg):
         NA & 5
 
 
@@ -157,7 +160,8 @@ def test_logical_or():
     assert False | NA is NA
     assert NA | NA is NA
 
-    with pytest.raises(TypeError):
+    msg = "unsupported operand type"
+    with pytest.raises(TypeError, match=msg):
         NA | 5
 
 
@@ -169,7 +173,8 @@ def test_logical_xor():
     assert False ^ NA is NA
     assert NA ^ NA is NA
 
-    with pytest.raises(TypeError):
+    msg = "unsupported operand type"
+    with pytest.raises(TypeError, match=msg):
         NA ^ 5
 
 
@@ -216,7 +221,8 @@ def test_ufunc():
 
 
 def test_ufunc_raises():
-    with pytest.raises(ValueError, match="ufunc method 'at'"):
+    msg = "ufunc method 'at'"
+    with pytest.raises(ValueError, match=msg):
         np.log.at(pd.NA, 0)
 
 
diff --git a/pandas/tests/scalar/test_nat.py b/pandas/tests/scalar/test_nat.py
index f94b96b47..0e5414a8b 100644
--- a/pandas/tests/scalar/test_nat.py
+++ b/pandas/tests/scalar/test_nat.py
@@ -393,12 +393,14 @@ def test_nat_arithmetic_scalar(op_name, value, val_type):
         elif val_type == "str":
             # un-specific check here because the message comes from str
             #  and varies by method
-            msg = (
-                "can only concatenate str|"
-                "unsupported operand type|"
-                "can't multiply sequence|"
-                "Can't convert 'NaTType'|"
-                "must be str, not NaTType"
+            msg = "|".join(
+                [
+                    "can only concatenate str",
+                    "unsupported operand type",
+                    "can't multiply sequence",
+                    "Can't convert 'NaTType'",
+                    "must be str, not NaTType",
+                ]
             )
         else:
             msg = "unsupported operand type"
diff --git a/pandas/tests/scalar/timedelta/test_arithmetic.py b/pandas/tests/scalar/timedelta/test_arithmetic.py
index 3cb868dd8..12572648f 100644
--- a/pandas/tests/scalar/timedelta/test_arithmetic.py
+++ b/pandas/tests/scalar/timedelta/test_arithmetic.py
@@ -89,10 +89,11 @@ class TestTimedeltaAdditionSubtraction:
         assert result is NaT
 
     def test_td_add_timestamp_overflow(self):
-        with pytest.raises(OverflowError):
+        msg = "int too (large|big) to convert"
+        with pytest.raises(OverflowError, match=msg):
             Timestamp("1700-01-01") + Timedelta(13 * 19999, unit="D")
 
-        with pytest.raises(OverflowError):
+        with pytest.raises(OverflowError, match=msg):
             Timestamp("1700-01-01") + timedelta(days=13 * 19999)
 
     @pytest.mark.parametrize("op", [operator.add, ops.radd])
@@ -180,14 +181,15 @@ class TestTimedeltaAdditionSubtraction:
 
     def test_td_add_sub_numeric_raises(self):
         td = Timedelta(10, unit="d")
+        msg = "unsupported operand type"
         for other in [2, 2.0, np.int64(2), np.float64(2)]:
-            with pytest.raises(TypeError):
+            with pytest.raises(TypeError, match=msg):
                 td + other
-            with pytest.raises(TypeError):
+            with pytest.raises(TypeError, match=msg):
                 other + td
-            with pytest.raises(TypeError):
+            with pytest.raises(TypeError, match=msg):
                 td - other
-            with pytest.raises(TypeError):
+            with pytest.raises(TypeError, match=msg):
                 other - td
 
     def test_td_rsub_nat(self):
@@ -228,7 +230,8 @@ class TestTimedeltaAdditionSubtraction:
         # GH#21980
         now = Timestamp.now()
         arr = np.array([now, Timedelta("1D"), np.timedelta64(2, "h")])
-        with pytest.raises(TypeError):
+        msg = r"unsupported operand type\(s\) for \-: 'Timedelta' and 'Timestamp'"
+        with pytest.raises(TypeError, match=msg):
             Timedelta("1D") - arr
 
     @pytest.mark.parametrize("op", [operator.add, ops.radd])
@@ -322,7 +325,8 @@ class TestTimedeltaMultiplicationDivision:
     def test_td_mul_nat(self, op, td_nat):
         # GH#19819
         td = Timedelta(10, unit="d")
-        with pytest.raises(TypeError):
+        msg = "cannot use operands with types|Cannot multiply Timedelta with NaT"
+        with pytest.raises(TypeError, match=msg):
             op(td, td_nat)
 
     @pytest.mark.parametrize("nan", [np.nan, np.float64("NaN"), float("nan")])
@@ -349,11 +353,12 @@ class TestTimedeltaMultiplicationDivision:
         assert op(-1, td).value == -1 * td.value
         assert op(-1.0, td).value == -1.0 * td.value
 
-        with pytest.raises(TypeError):
+        msg = "unsupported operand type"
+        with pytest.raises(TypeError, match=msg):
             # timedelta * datetime is gibberish
             op(td, Timestamp(2016, 1, 2))
 
-        with pytest.raises(TypeError):
+        with pytest.raises(TypeError, match=msg):
             # invalid multiply with another timedelta
             op(td, td)
 
@@ -452,10 +457,12 @@ class TestTimedeltaMultiplicationDivision:
         result = np.timedelta64("NaT") / td
         assert np.isnan(result)
 
-        with pytest.raises(TypeError, match="cannot use operands with types dtype"):
+        msg = "cannot use operands with types dtype"
+        with pytest.raises(TypeError, match=msg):
             np.datetime64("NaT") / td
 
-        with pytest.raises(TypeError, match="Cannot divide float by Timedelta"):
+        msg = "Cannot divide float by Timedelta"
+        with pytest.raises(TypeError, match=msg):
             np.nan / td
 
     def test_td_rdiv_ndarray(self):
@@ -472,11 +479,13 @@ class TestTimedeltaMultiplicationDivision:
         tm.assert_numpy_array_equal(result, expected)
 
         arr = np.array([np.nan], dtype=object)
-        with pytest.raises(TypeError, match="Cannot divide float by Timedelta"):
+        msg = "Cannot divide float by Timedelta"
+        with pytest.raises(TypeError, match=msg):
             arr / td
 
         arr = np.array([np.nan], dtype=np.float64)
-        with pytest.raises(TypeError, match="cannot use operands with types dtype"):
+        msg = "cannot use operands with types dtype"
+        with pytest.raises(TypeError, match=msg):
             arr / td
 
     # ---------------------------------------------------------------
@@ -509,7 +518,13 @@ class TestTimedeltaMultiplicationDivision:
         # GH#18846
         td = Timedelta(hours=3, minutes=4)
 
-        with pytest.raises(TypeError):
+        msg = "|".join(
+            [
+                r"Invalid dtype datetime64\[D\] for __floordiv__",
+                "'dtype' is an invalid keyword argument for this function",
+            ]
+        )
+        with pytest.raises(TypeError, match=msg):
             td // np.datetime64("2016-01-01", dtype="datetime64[us]")
 
     def test_td_floordiv_numeric_scalar(self):
@@ -580,7 +595,8 @@ class TestTimedeltaMultiplicationDivision:
         td = Timedelta(hours=3, minutes=3)
 
         dt64 = np.datetime64("2016-01-01", "us")
-        with pytest.raises(TypeError):
+        msg = r"Invalid dtype datetime64\[us\] for __floordiv__"
+        with pytest.raises(TypeError, match=msg):
             td.__rfloordiv__(dt64)
 
     def test_td_rfloordiv_numeric_scalar(self):
@@ -591,11 +607,12 @@ class TestTimedeltaMultiplicationDivision:
         assert td.__rfloordiv__(3.5) is NotImplemented
         assert td.__rfloordiv__(2) is NotImplemented
 
-        with pytest.raises(TypeError):
+        msg = "Invalid dtype"
+        with pytest.raises(TypeError, match=msg):
             td.__rfloordiv__(np.float64(2.0))
-        with pytest.raises(TypeError):
+        with pytest.raises(TypeError, match=msg):
             td.__rfloordiv__(np.uint8(9))
-        with pytest.raises(TypeError, match="Invalid dtype"):
+        with pytest.raises(TypeError, match=msg):
             # deprecated GH#19761, enforced GH#29797
             td.__rfloordiv__(np.int32(2.0))
 
@@ -620,7 +637,8 @@ class TestTimedeltaMultiplicationDivision:
         # deprecated GH#19761, enforced GH#29797
         ints = np.array([1349654400, 1349740800, 1349827200, 1349913600]) * 10 ** 9
 
-        with pytest.raises(TypeError, match="Invalid dtype"):
+        msg = "Invalid dtype"
+        with pytest.raises(TypeError, match=msg):
             ints // Timedelta(1, unit="s")
 
     def test_td_rfloordiv_numeric_series(self):
@@ -630,7 +648,8 @@ class TestTimedeltaMultiplicationDivision:
         res = td.__rfloordiv__(ser)
         assert res is NotImplemented
 
-        with pytest.raises(TypeError, match="Invalid dtype"):
+        msg = "Invalid dtype"
+        with pytest.raises(TypeError, match=msg):
             # Deprecated GH#19761, enforced GH#29797
             # TODO: GH-19761. Change to TypeError.
             ser // td
@@ -697,11 +716,11 @@ class TestTimedeltaMultiplicationDivision:
     def test_mod_invalid(self):
         # GH#19365
         td = Timedelta(hours=37)
-
-        with pytest.raises(TypeError):
+        msg = "unsupported operand type"
+        with pytest.raises(TypeError, match=msg):
             td % Timestamp("2018-01-22")
 
-        with pytest.raises(TypeError):
+        with pytest.raises(TypeError, match=msg):
             td % []
 
     def test_rmod_pytimedelta(self):
@@ -723,16 +742,18 @@ class TestTimedeltaMultiplicationDivision:
         # GH#19365
         td = Timedelta(minutes=3)
 
-        with pytest.raises(TypeError):
+        msg = "unsupported operand"
+        with pytest.raises(TypeError, match=msg):
             Timestamp("2018-01-22") % td
 
-        with pytest.raises(TypeError):
+        with pytest.raises(TypeError, match=msg):
             15 % td
 
-        with pytest.raises(TypeError):
+        with pytest.raises(TypeError, match=msg):
             16.0 % td
 
-        with pytest.raises(TypeError):
+        msg = "Invalid dtype int"
+        with pytest.raises(TypeError, match=msg):
             np.array([22, 24]) % td
 
     # ----------------------------------------------------------------
@@ -783,7 +804,8 @@ class TestTimedeltaMultiplicationDivision:
         # GH#19365
         td = Timedelta(days=2, hours=6)
 
-        with pytest.raises(TypeError):
+        msg = r"unsupported operand type\(s\) for //: 'Timedelta' and 'Timestamp'"
+        with pytest.raises(TypeError, match=msg):
             divmod(td, Timestamp("2018-01-22"))
 
     def test_rdivmod_pytimedelta(self):
@@ -802,17 +824,19 @@ class TestTimedeltaMultiplicationDivision:
     def test_rdivmod_invalid(self):
         # GH#19365
         td = Timedelta(minutes=3)
+        msg = "unsupported operand type"
 
-        with pytest.raises(TypeError):
+        with pytest.raises(TypeError, match=msg):
             divmod(Timestamp("2018-01-22"), td)
 
-        with pytest.raises(TypeError):
+        with pytest.raises(TypeError, match=msg):
             divmod(15, td)
 
-        with pytest.raises(TypeError):
+        with pytest.raises(TypeError, match=msg):
             divmod(16.0, td)
 
-        with pytest.raises(TypeError):
+        msg = "Invalid dtype int"
+        with pytest.raises(TypeError, match=msg):
             divmod(np.array([22, 24]), td)
 
     # ----------------------------------------------------------------
@@ -828,7 +852,8 @@ class TestTimedeltaMultiplicationDivision:
         ],
     )
     def test_td_op_timedelta_timedeltalike_array(self, op, arr):
-        with pytest.raises(TypeError):
+        msg = "unsupported operand type|cannot use operands with types"
+        with pytest.raises(TypeError, match=msg):
             op(arr, Timedelta("1D"))
 
 
@@ -918,13 +943,14 @@ class TestTimedeltaComparison:
     def test_compare_unknown_type(self, val):
         # GH#20829
         t = Timedelta("1s")
-        with pytest.raises(TypeError):
+        msg = "Cannot compare type Timedelta with type (int|str)"
+        with pytest.raises(TypeError, match=msg):
             t >= val
-        with pytest.raises(TypeError):
+        with pytest.raises(TypeError, match=msg):
             t > val
-        with pytest.raises(TypeError):
+        with pytest.raises(TypeError, match=msg):
             t <= val
-        with pytest.raises(TypeError):
+        with pytest.raises(TypeError, match=msg):
             t < val
 
 
@@ -948,10 +974,18 @@ def test_ops_error_str():
 
     for left, right in [(td, "a"), ("a", td)]:
 
-        with pytest.raises(TypeError):
+        msg = "|".join(
+            [
+                "unsupported operand type",
+                r'can only concatenate str \(not "Timedelta"\) to str',
+                "must be str, not Timedelta",
+            ]
+        )
+        with pytest.raises(TypeError, match=msg):
             left + right
 
-        with pytest.raises(TypeError):
+        msg = "Cannot compare type"
+        with pytest.raises(TypeError, match=msg):
             left > right
 
         assert not left == right
diff --git a/pandas/tests/scalar/timedelta/test_constructors.py b/pandas/tests/scalar/timedelta/test_constructors.py
index d32d1994c..5523d72b1 100644
--- a/pandas/tests/scalar/timedelta/test_constructors.py
+++ b/pandas/tests/scalar/timedelta/test_constructors.py
@@ -79,22 +79,26 @@ def test_construction():
 
     # Currently invalid as it has a - on the hh:mm:dd part
     # (only allowed on the days)
-    with pytest.raises(ValueError):
+    msg = "only leading negative signs are allowed"
+    with pytest.raises(ValueError, match=msg):
         Timedelta("-10 days -1 h 1.5m 1s 3us")
 
     # only leading neg signs are allowed
-    with pytest.raises(ValueError):
+    with pytest.raises(ValueError, match=msg):
         Timedelta("10 days -1 h 1.5m 1s 3us")
 
     # no units specified
-    with pytest.raises(ValueError):
+    msg = "no units specified"
+    with pytest.raises(ValueError, match=msg):
         Timedelta("3.1415")
 
     # invalid construction
-    with pytest.raises(ValueError, match="cannot construct a Timedelta"):
+    msg = "cannot construct a Timedelta"
+    with pytest.raises(ValueError, match=msg):
         Timedelta()
 
-    with pytest.raises(ValueError, match="unit abbreviation w/o a number"):
+    msg = "unit abbreviation w/o a number"
+    with pytest.raises(ValueError, match=msg):
         Timedelta("foo")
 
     msg = (
@@ -121,7 +125,8 @@ def test_construction():
     assert result == expected
     assert to_timedelta(offsets.Hour(2)) == Timedelta("0 days, 02:00:00")
 
-    with pytest.raises(ValueError):
+    msg = "unit abbreviation w/o a number"
+    with pytest.raises(ValueError, match=msg):
         Timedelta("foo bar")
 
 
@@ -177,16 +182,18 @@ def test_td_from_repr_roundtrip(val):
 
 
 def test_overflow_on_construction():
+    msg = "int too (large|big) to convert"
+
     # GH#3374
     value = Timedelta("1day").value * 20169940
-    with pytest.raises(OverflowError):
+    with pytest.raises(OverflowError, match=msg):
         Timedelta(value)
 
     # xref GH#17637
-    with pytest.raises(OverflowError):
+    with pytest.raises(OverflowError, match=msg):
         Timedelta(7 * 19999, unit="D")
 
-    with pytest.raises(OverflowError):
+    with pytest.raises(OverflowError, match=msg):
         Timedelta(timedelta(days=13 * 19999))
 
 
@@ -272,7 +279,8 @@ def test_td_constructor_on_nanoseconds(constructed_td, conversion):
 
 
 def test_td_constructor_value_error():
-    with pytest.raises(TypeError):
+    msg = "Invalid type <class 'str'>. Must be int or float."
+    with pytest.raises(TypeError, match=msg):
         Timedelta(nanoseconds="abc")
 
 
diff --git a/pandas/tests/scalar/timedelta/test_timedelta.py b/pandas/tests/scalar/timedelta/test_timedelta.py
index 0f2486be3..38e773214 100644
--- a/pandas/tests/scalar/timedelta/test_timedelta.py
+++ b/pandas/tests/scalar/timedelta/test_timedelta.py
@@ -408,9 +408,11 @@ class TestTimedeltas:
         assert Timedelta(" - 10000D ") == -conv(np.timedelta64(10000, "D"))
 
         # invalid
-        with pytest.raises(ValueError):
+        msg = "invalid unit abbreviation"
+        with pytest.raises(ValueError, match=msg):
             Timedelta("1foo")
-        with pytest.raises(ValueError):
+        msg = "unit abbreviation w/o a number"
+        with pytest.raises(ValueError, match=msg):
             Timedelta("foo")
 
     def test_full_format_converters(self):
@@ -439,7 +441,8 @@ class TestTimedeltas:
         )
 
         # invalid
-        with pytest.raises(ValueError):
+        msg = "have leftover units"
+        with pytest.raises(ValueError, match=msg):
             Timedelta("- 1days, 00")
 
     def test_pickle(self):
@@ -476,20 +479,21 @@ class TestTimedeltas:
         # Beyond lower limit, a NAT before the Overflow
         assert (min_td - Timedelta(1, "ns")) is NaT
 
-        with pytest.raises(OverflowError):
+        msg = "int too (large|big) to convert"
+        with pytest.raises(OverflowError, match=msg):
             min_td - Timedelta(2, "ns")
 
-        with pytest.raises(OverflowError):
+        with pytest.raises(OverflowError, match=msg):
             max_td + Timedelta(1, "ns")
 
         # Same tests using the internal nanosecond values
         td = Timedelta(min_td.value - 1, "ns")
         assert td is NaT
 
-        with pytest.raises(OverflowError):
+        with pytest.raises(OverflowError, match=msg):
             Timedelta(min_td.value - 2, "ns")
 
-        with pytest.raises(OverflowError):
+        with pytest.raises(OverflowError, match=msg):
             Timedelta(max_td.value + 1, "ns")
 
     def test_total_seconds_precision(self):
diff --git a/pandas/tests/scalar/timestamp/test_arithmetic.py b/pandas/tests/scalar/timestamp/test_arithmetic.py
index ccd7bf721..ee70d1d04 100644
--- a/pandas/tests/scalar/timestamp/test_arithmetic.py
+++ b/pandas/tests/scalar/timestamp/test_arithmetic.py
@@ -90,7 +90,8 @@ class TestTimestampArithmetic:
         if tz_naive_fixture is None:
             assert other.to_datetime64() - ts == td
         else:
-            with pytest.raises(TypeError, match="subtraction must have"):
+            msg = "subtraction must have"
+            with pytest.raises(TypeError, match=msg):
                 other.to_datetime64() - ts
 
     def test_timestamp_sub_datetime(self):
@@ -195,7 +196,8 @@ class TestTimestampArithmetic:
 
         with pytest.raises(TypeError, match=msg):
             ts - other
-        with pytest.raises(TypeError):
+        msg = "unsupported operand type"
+        with pytest.raises(TypeError, match=msg):
             other - ts
 
     @pytest.mark.parametrize(
@@ -215,14 +217,15 @@ class TestTimestampArithmetic:
         ],
     )
     def test_add_int_with_freq(self, ts, other):
-
-        with pytest.raises(TypeError):
+        msg = "Addition/subtraction of integers and integer-arrays"
+        with pytest.raises(TypeError, match=msg):
             ts + other
-        with pytest.raises(TypeError):
+        with pytest.raises(TypeError, match=msg):
             other + ts
 
-        with pytest.raises(TypeError):
+        with pytest.raises(TypeError, match=msg):
             ts - other
 
-        with pytest.raises(TypeError):
+        msg = "unsupported operand type"
+        with pytest.raises(TypeError, match=msg):
             other - ts
diff --git a/pandas/tests/scalar/timestamp/test_comparisons.py b/pandas/tests/scalar/timestamp/test_comparisons.py
index fce4fa6eb..4581e736b 100644
--- a/pandas/tests/scalar/timestamp/test_comparisons.py
+++ b/pandas/tests/scalar/timestamp/test_comparisons.py
@@ -28,7 +28,8 @@ class TestTimestampComparison:
 
         # tzaware mismatch
         arr = np.array([naive], dtype=object)
-        with pytest.raises(TypeError):
+        msg = "Cannot compare tz-naive and tz-aware timestamps"
+        with pytest.raises(TypeError, match=msg):
             arr < ts
 
     def test_comparison(self):
@@ -85,30 +86,31 @@ class TestTimestampComparison:
         a = Timestamp("3/12/2012")
         b = Timestamp("3/12/2012", tz=utc_fixture)
 
-        with pytest.raises(TypeError):
+        msg = "Cannot compare tz-naive and tz-aware timestamps"
+        with pytest.raises(TypeError, match=msg):
             a == b
-        with pytest.raises(TypeError):
+        with pytest.raises(TypeError, match=msg):
             a != b
-        with pytest.raises(TypeError):
+        with pytest.raises(TypeError, match=msg):
             a < b
-        with pytest.raises(TypeError):
+        with pytest.raises(TypeError, match=msg):
             a <= b
-        with pytest.raises(TypeError):
+        with pytest.raises(TypeError, match=msg):
             a > b
-        with pytest.raises(TypeError):
+        with pytest.raises(TypeError, match=msg):
             a >= b
 
-        with pytest.raises(TypeError):
+        with pytest.raises(TypeError, match=msg):
             b == a
-        with pytest.raises(TypeError):
+        with pytest.raises(TypeError, match=msg):
             b != a
-        with pytest.raises(TypeError):
+        with pytest.raises(TypeError, match=msg):
             b < a
-        with pytest.raises(TypeError):
+        with pytest.raises(TypeError, match=msg):
             b <= a
-        with pytest.raises(TypeError):
+        with pytest.raises(TypeError, match=msg):
             b > a
-        with pytest.raises(TypeError):
+        with pytest.raises(TypeError, match=msg):
             b >= a
 
         assert not a == b.to_pydatetime()
diff --git a/pandas/tests/scalar/timestamp/test_constructors.py b/pandas/tests/scalar/timestamp/test_constructors.py
index 4c75d1ebc..770753f42 100644
--- a/pandas/tests/scalar/timestamp/test_constructors.py
+++ b/pandas/tests/scalar/timestamp/test_constructors.py
@@ -165,20 +165,25 @@ class TestTimestampConstructors:
         assert result == eval(repr(result))
 
     def test_constructor_invalid(self):
-        with pytest.raises(TypeError, match="Cannot convert input"):
+        msg = "Cannot convert input"
+        with pytest.raises(TypeError, match=msg):
             Timestamp(slice(2))
-        with pytest.raises(ValueError, match="Cannot convert Period"):
+        msg = "Cannot convert Period"
+        with pytest.raises(ValueError, match=msg):
             Timestamp(Period("1000-01-01"))
 
     def test_constructor_invalid_tz(self):
         # GH#17690
-        with pytest.raises(TypeError, match="must be a datetime.tzinfo"):
+        msg = "must be a datetime.tzinfo"
+        with pytest.raises(TypeError, match=msg):
             Timestamp("2017-10-22", tzinfo="US/Eastern")
 
-        with pytest.raises(ValueError, match="at most one of"):
+        msg = "at most one of"
+        with pytest.raises(ValueError, match=msg):
             Timestamp("2017-10-22", tzinfo=pytz.utc, tz="UTC")
 
-        with pytest.raises(ValueError, match="Invalid frequency:"):
+        msg = "Invalid frequency:"
+        with pytest.raises(ValueError, match=msg):
             # GH#5168
             # case where user tries to pass tz as an arg, not kwarg, gets
             # interpreted as a `freq`
@@ -189,7 +194,8 @@ class TestTimestampConstructors:
         # Test support for Timestamp.strptime
         fmt = "%Y%m%d-%H%M%S-%f%z"
         ts = "20190129-235348-000001+0000"
-        with pytest.raises(NotImplementedError):
+        msg = r"Timestamp.strptime\(\) is not implemented"
+        with pytest.raises(NotImplementedError, match=msg):
             Timestamp.strptime(ts, fmt)
 
     def test_constructor_tz_or_tzinfo(self):
@@ -206,15 +212,20 @@ class TestTimestampConstructors:
 
     def test_constructor_positional(self):
         # see gh-10758
-        with pytest.raises(TypeError):
+        msg = "an integer is required"
+        with pytest.raises(TypeError, match=msg):
             Timestamp(2000, 1)
-        with pytest.raises(ValueError):
+
+        msg = "month must be in 1..12"
+        with pytest.raises(ValueError, match=msg):
             Timestamp(2000, 0, 1)
-        with pytest.raises(ValueError):
+        with pytest.raises(ValueError, match=msg):
             Timestamp(2000, 13, 1)
-        with pytest.raises(ValueError):
+
+        msg = "day is out of range for month"
+        with pytest.raises(ValueError, match=msg):
             Timestamp(2000, 1, 0)
-        with pytest.raises(ValueError):
+        with pytest.raises(ValueError, match=msg):
             Timestamp(2000, 1, 32)
 
         # see gh-11630
@@ -225,15 +236,20 @@ class TestTimestampConstructors:
 
     def test_constructor_keyword(self):
         # GH 10758
-        with pytest.raises(TypeError):
+        msg = "function missing required argument 'day'|Required argument 'day'"
+        with pytest.raises(TypeError, match=msg):
             Timestamp(year=2000, month=1)
-        with pytest.raises(ValueError):
+
+        msg = "month must be in 1..12"
+        with pytest.raises(ValueError, match=msg):
             Timestamp(year=2000, month=0, day=1)
-        with pytest.raises(ValueError):
+        with pytest.raises(ValueError, match=msg):
             Timestamp(year=2000, month=13, day=1)
-        with pytest.raises(ValueError):
+
+        msg = "day is out of range for month"
+        with pytest.raises(ValueError, match=msg):
             Timestamp(year=2000, month=1, day=0)
-        with pytest.raises(ValueError):
+        with pytest.raises(ValueError, match=msg):
             Timestamp(year=2000, month=1, day=32)
 
         assert repr(Timestamp(year=2015, month=11, day=12)) == repr(
@@ -313,7 +329,8 @@ class TestTimestampConstructors:
     @pytest.mark.parametrize("z", ["Z0", "Z00"])
     def test_constructor_invalid_Z0_isostring(self, z):
         # GH 8910
-        with pytest.raises(ValueError):
+        msg = "could not convert string to Timestamp"
+        with pytest.raises(ValueError, match=msg):
             Timestamp(f"2014-11-02 01:00{z}")
 
     @pytest.mark.parametrize(
@@ -331,14 +348,17 @@ class TestTimestampConstructors:
     )
     def test_invalid_date_kwarg_with_string_input(self, arg):
         kwarg = {arg: 1}
-        with pytest.raises(ValueError):
+        msg = "Cannot pass a date attribute keyword argument"
+        with pytest.raises(ValueError, match=msg):
             Timestamp("2010-10-10 12:59:59.999999999", **kwarg)
 
     def test_out_of_bounds_integer_value(self):
         # GH#26651 check that we raise OutOfBoundsDatetime, not OverflowError
-        with pytest.raises(OutOfBoundsDatetime):
+        msg = str(Timestamp.max.value * 2)
+        with pytest.raises(OutOfBoundsDatetime, match=msg):
             Timestamp(Timestamp.max.value * 2)
-        with pytest.raises(OutOfBoundsDatetime):
+        msg = str(Timestamp.min.value * 2)
+        with pytest.raises(OutOfBoundsDatetime, match=msg):
             Timestamp(Timestamp.min.value * 2)
 
     def test_out_of_bounds_value(self):
@@ -353,25 +373,28 @@ class TestTimestampConstructors:
         Timestamp(min_ts_us)
         Timestamp(max_ts_us)
 
+        msg = "Out of bounds"
         # One us less than the minimum is an error
-        with pytest.raises(ValueError):
+        with pytest.raises(ValueError, match=msg):
             Timestamp(min_ts_us - one_us)
 
         # One us more than the maximum is an error
-        with pytest.raises(ValueError):
+        with pytest.raises(ValueError, match=msg):
             Timestamp(max_ts_us + one_us)
 
     def test_out_of_bounds_string(self):
-        with pytest.raises(ValueError):
+        msg = "Out of bounds"
+        with pytest.raises(ValueError, match=msg):
             Timestamp("1676-01-01")
-        with pytest.raises(ValueError):
+        with pytest.raises(ValueError, match=msg):
             Timestamp("2263-01-01")
 
     def test_barely_out_of_bounds(self):
         # GH#19529
         # GH#19382 close enough to bounds that dropping nanos would result
         # in an in-bounds datetime
-        with pytest.raises(OutOfBoundsDatetime):
+        msg = "Out of bounds nanosecond timestamp: 2262-04-11 23:47:16"
+        with pytest.raises(OutOfBoundsDatetime, match=msg):
             Timestamp("2262-04-11 23:47:16.854775808")
 
     def test_bounds_with_different_units(self):
@@ -382,7 +405,8 @@ class TestTimestampConstructors:
         for date_string in out_of_bounds_dates:
             for unit in time_units:
                 dt64 = np.datetime64(date_string, unit)
-                with pytest.raises(ValueError):
+                msg = "Out of bounds"
+                with pytest.raises(OutOfBoundsDatetime, match=msg):
                     Timestamp(dt64)
 
         in_bounds_dates = ("1677-09-23", "2262-04-11")
@@ -449,7 +473,8 @@ class TestTimestampConstructors:
     def test_disallow_setting_tz(self, tz):
         # GH 3746
         ts = Timestamp("2010")
-        with pytest.raises(AttributeError):
+        msg = "Cannot directly set timezone"
+        with pytest.raises(AttributeError, match=msg):
             ts.tz = tz
 
     @pytest.mark.parametrize("offset", ["+0300", "+0200"])
@@ -476,16 +501,19 @@ class TestTimestampConstructors:
 
     def test_constructor_invalid_frequency(self):
         # GH 22311
-        with pytest.raises(ValueError, match="Invalid frequency:"):
+        msg = "Invalid frequency:"
+        with pytest.raises(ValueError, match=msg):
             Timestamp("2012-01-01", freq=[])
 
     @pytest.mark.parametrize("box", [datetime, Timestamp])
     def test_raise_tz_and_tzinfo_in_datetime_input(self, box):
         # GH 23579
         kwargs = {"year": 2018, "month": 1, "day": 1, "tzinfo": pytz.utc}
-        with pytest.raises(ValueError, match="Cannot pass a datetime or Timestamp"):
+        msg = "Cannot pass a datetime or Timestamp"
+        with pytest.raises(ValueError, match=msg):
             Timestamp(box(**kwargs), tz="US/Pacific")
-        with pytest.raises(ValueError, match="Cannot pass a datetime or Timestamp"):
+        msg = "Cannot pass a datetime or Timestamp"
+        with pytest.raises(ValueError, match=msg):
             Timestamp(box(**kwargs), tzinfo=pytz.timezone("US/Pacific"))
 
     def test_dont_convert_dateutil_utc_to_pytz_utc(self):
diff --git a/pandas/tests/scalar/timestamp/test_timezones.py b/pandas/tests/scalar/timestamp/test_timezones.py
index cfa7da810..9611c827b 100644
--- a/pandas/tests/scalar/timestamp/test_timezones.py
+++ b/pandas/tests/scalar/timestamp/test_timezones.py
@@ -21,19 +21,20 @@ class TestTimestampTZOperations:
     # Timestamp.tz_localize
 
     def test_tz_localize_pushes_out_of_bounds(self):
+        msg = "^$"
         # GH#12677
         # tz_localize that pushes away from the boundary is OK
         pac = Timestamp.min.tz_localize("US/Pacific")
         assert pac.value > Timestamp.min.value
         pac.tz_convert("Asia/Tokyo")  # tz_convert doesn't change value
-        with pytest.raises(OutOfBoundsDatetime):
+        with pytest.raises(OutOfBoundsDatetime, match=msg):
             Timestamp.min.tz_localize("Asia/Tokyo")
 
         # tz_localize that pushes away from the boundary is OK
         tokyo = Timestamp.max.tz_localize("Asia/Tokyo")
         assert tokyo.value < Timestamp.max.value
         tokyo.tz_convert("US/Pacific")  # tz_convert doesn't change value
-        with pytest.raises(OutOfBoundsDatetime):
+        with pytest.raises(OutOfBoundsDatetime, match=msg):
             Timestamp.max.tz_localize("US/Pacific")
 
     def test_tz_localize_ambiguous_bool(self):
@@ -43,7 +44,8 @@ class TestTimestampTZOperations:
         expected0 = Timestamp("2015-11-01 01:00:03-0500", tz="US/Central")
         expected1 = Timestamp("2015-11-01 01:00:03-0600", tz="US/Central")
 
-        with pytest.raises(pytz.AmbiguousTimeError):
+        msg = "Cannot infer dst time from 2015-11-01 01:00:03"
+        with pytest.raises(pytz.AmbiguousTimeError, match=msg):
             ts.tz_localize("US/Central")
 
         result = ts.tz_localize("US/Central", ambiguous=True)
@@ -58,7 +60,8 @@ class TestTimestampTZOperations:
         ts_no_dst = ts.tz_localize("US/Eastern", ambiguous=False)
 
         assert (ts_no_dst.value - ts_dst.value) / 1e9 == 3600
-        with pytest.raises(ValueError):
+        msg = "Cannot infer offset with only one time"
+        with pytest.raises(ValueError, match=msg):
             ts.tz_localize("US/Eastern", ambiguous="infer")
 
         # GH#8025
@@ -82,24 +85,29 @@ class TestTimestampTZOperations:
     def test_tz_localize_nonexistent(self, stamp, tz):
         # GH#13057
         ts = Timestamp(stamp)
-        with pytest.raises(NonExistentTimeError):
+        with pytest.raises(NonExistentTimeError, match=stamp):
             ts.tz_localize(tz)
         # GH 22644
-        with pytest.raises(NonExistentTimeError):
+        with pytest.raises(NonExistentTimeError, match=stamp):
             ts.tz_localize(tz, nonexistent="raise")
         assert ts.tz_localize(tz, nonexistent="NaT") is NaT
 
     def test_tz_localize_ambiguous_raise(self):
         # GH#13057
         ts = Timestamp("2015-11-1 01:00")
-        with pytest.raises(AmbiguousTimeError):
+        msg = "Cannot infer dst time from 2015-11-01 01:00:00,"
+        with pytest.raises(AmbiguousTimeError, match=msg):
             ts.tz_localize("US/Pacific", ambiguous="raise")
 
     def test_tz_localize_nonexistent_invalid_arg(self):
         # GH 22644
         tz = "Europe/Warsaw"
         ts = Timestamp("2015-03-29 02:00:00")
-        with pytest.raises(ValueError):
+        msg = (
+            "The nonexistent argument must be one of 'raise', 'NaT', "
+            "'shift_forward', 'shift_backward' or a timedelta object"
+        )
+        with pytest.raises(ValueError, match=msg):
             ts.tz_localize(tz, nonexistent="foo")
 
     @pytest.mark.parametrize(
@@ -117,7 +125,8 @@ class TestTimestampTZOperations:
         localized = ts.tz_localize(tz)
         assert localized == Timestamp(stamp, tz=tz)
 
-        with pytest.raises(TypeError):
+        msg = "Cannot localize tz-aware Timestamp"
+        with pytest.raises(TypeError, match=msg):
             localized.tz_localize(tz)
 
         reset = localized.tz_localize(None)
@@ -249,9 +258,14 @@ class TestTimestampTZOperations:
     def test_timestamp_tz_localize_nonexistent_raise(self, tz):
         # GH 8917
         ts = Timestamp("2015-03-29 02:20:00")
-        with pytest.raises(pytz.NonExistentTimeError):
+        msg = "2015-03-29 02:20:00"
+        with pytest.raises(pytz.NonExistentTimeError, match=msg):
             ts.tz_localize(tz, nonexistent="raise")
-        with pytest.raises(ValueError):
+        msg = (
+            "The nonexistent argument must be one of 'raise', 'NaT', "
+            "'shift_forward', 'shift_backward' or a timedelta object"
+        )
+        with pytest.raises(ValueError, match=msg):
             ts.tz_localize(tz, nonexistent="foo")
 
     # ------------------------------------------------------------------
@@ -327,14 +341,16 @@ class TestTimestampTZOperations:
             expected = Timestamp("2015-10-25 01:00").tz_localize(tz)
             assert result == expected
 
-            with pytest.raises(pytz.AmbiguousTimeError):
+            msg = "Cannot infer dst time from 2015-10-25 02:00:00"
+            with pytest.raises(pytz.AmbiguousTimeError, match=msg):
                 Timestamp("2015-10-25 02:00", tz=tz)
 
         result = Timestamp("2017-03-26 01:00", tz="Europe/Paris")
         expected = Timestamp("2017-03-26 01:00").tz_localize("Europe/Paris")
         assert result == expected
 
-        with pytest.raises(pytz.NonExistentTimeError):
+        msg = "2017-03-26 02:00"
+        with pytest.raises(pytz.NonExistentTimeError, match=msg):
             Timestamp("2017-03-26 02:00", tz="Europe/Paris")
 
         # GH#11708
@@ -352,7 +368,8 @@ class TestTimestampTZOperations:
         expected = Timestamp("2017-03-26 01:00:00+0100", tz="Europe/Paris")
         assert result == expected
 
-        with pytest.raises(pytz.NonExistentTimeError):
+        msg = "2017-03-26 02:00"
+        with pytest.raises(pytz.NonExistentTimeError, match=msg):
             Timestamp("2017-03-26 02:00", tz="Europe/Paris")
 
         result = Timestamp("2017-03-26 02:00:00+0100", tz="Europe/Paris")
diff --git a/pandas/tests/scalar/timestamp/test_unary_ops.py b/pandas/tests/scalar/timestamp/test_unary_ops.py
index 78e795e71..e657559b5 100644
--- a/pandas/tests/scalar/timestamp/test_unary_ops.py
+++ b/pandas/tests/scalar/timestamp/test_unary_ops.py
@@ -166,7 +166,8 @@ class TestTimestampUnaryOps:
         result = getattr(ts, method)("H", ambiguous="NaT")
         assert result is NaT
 
-        with pytest.raises(pytz.AmbiguousTimeError):
+        msg = "Cannot infer dst time"
+        with pytest.raises(pytz.AmbiguousTimeError, match=msg):
             getattr(ts, method)("H", ambiguous="raise")
 
     @pytest.mark.parametrize(
@@ -187,7 +188,8 @@ class TestTimestampUnaryOps:
         result = getattr(ts, method)(freq, nonexistent="NaT")
         assert result is NaT
 
-        with pytest.raises(pytz.NonExistentTimeError, match="2018-03-11 02:00:00"):
+        msg = "2018-03-11 02:00:00"
+        with pytest.raises(pytz.NonExistentTimeError, match=msg):
             getattr(ts, method)(freq, nonexistent="raise")
 
     @pytest.mark.parametrize(
@@ -298,14 +300,16 @@ class TestTimestampUnaryOps:
         tz = tz_aware_fixture
         # GH#14621, GH#7825
         ts = Timestamp("2016-01-01 09:00:00.000000123", tz=tz)
-        with pytest.raises(TypeError):
+        msg = r"replace\(\) got an unexpected keyword argument"
+        with pytest.raises(TypeError, match=msg):
             ts.replace(foo=5)
 
     def test_replace_integer_args(self, tz_aware_fixture):
         tz = tz_aware_fixture
         # GH#14621, GH#7825
         ts = Timestamp("2016-01-01 09:00:00.000000123", tz=tz)
-        with pytest.raises(ValueError):
+        msg = "value must be an integer, received <class 'float'> for hour"
+        with pytest.raises(ValueError, match=msg):
             ts.replace(hour=0.1)
 
     def test_replace_tzinfo_equiv_tz_localize_none(self):
