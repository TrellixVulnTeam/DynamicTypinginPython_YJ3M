commit 755886c9a4406e8f5bcfff9d6bbaf40009f3cad4
Author: Jeff Reback <jeff@reback.net>
Date:   Wed Sep 21 18:49:33 2016 -0400

    DOC: minor change in whatsnew

diff --git a/doc/source/whatsnew/v0.19.0.txt b/doc/source/whatsnew/v0.19.0.txt
index ffc6757b6..149c9616e 100644
--- a/doc/source/whatsnew/v0.19.0.txt
+++ b/doc/source/whatsnew/v0.19.0.txt
@@ -291,27 +291,27 @@ Categorical Concatenation
 
 .. ipython:: python
 
-    from pandas.types.concat import union_categoricals
-    a = pd.Categorical(["b", "c"])
-    b = pd.Categorical(["a", "b"])
-    union_categoricals([a, b])
+   from pandas.types.concat import union_categoricals
+   a = pd.Categorical(["b", "c"])
+   b = pd.Categorical(["a", "b"])
+   union_categoricals([a, b])
 
 - ``concat`` and ``append`` now can concat ``category`` dtypes with different ``categories`` as ``object`` dtype (:issue:`13524`)
 
 **Previous behavior**:
 
-  .. code-block:: ipython
+.. code-block:: ipython
 
-    In [1]: s1 = pd.Series(['a', 'b'], dtype='category')
-    In [2]: s2 = pd.Series(['b', 'c'], dtype='category')
-    In [3]: pd.concat([s1, s2])
-    ValueError: incompatible categories in categorical concat
+   In [1]: s1 = pd.Series(['a', 'b'], dtype='category')
+   In [2]: s2 = pd.Series(['b', 'c'], dtype='category')
+   In [3]: pd.concat([s1, s2])
+   ValueError: incompatible categories in categorical concat
 
 **New behavior**:
 
-  .. ipython:: python
+.. ipython:: python
 
-    pd.concat([s1, s2])
+   pd.concat([s1, s2])
 
 .. _whatsnew_0190.enhancements.semi_month_offsets:
 
@@ -326,7 +326,7 @@ These provide date offsets anchored (by default) to the 15th and end of month, a
 
     from pandas.tseries.offsets import SemiMonthEnd, SemiMonthBegin
 
-SemiMonthEnd:
+**SemiMonthEnd**:
 
 .. ipython:: python
 
@@ -334,7 +334,7 @@ SemiMonthEnd:
 
     pd.date_range('2015-01-01', freq='SM', periods=4)
 
-SemiMonthBegin:
+**SemiMonthBegin**:
 
 .. ipython:: python
 
@@ -441,11 +441,11 @@ Downcast values to smallest possible dtype in ``to_numeric``
 
 ``pd.to_numeric()`` now accepts a ``downcast`` parameter, which will downcast the data if possible to smallest specified numerical dtype (:issue:`13352`)
 
-  .. ipython:: python
+.. ipython:: python
 
-     s = ['1', 2, 3]
-     pd.to_numeric(s, downcast='unsigned')
-     pd.to_numeric(s, downcast='integer')
+   s = ['1', 2, 3]
+   pd.to_numeric(s, downcast='unsigned')
+   pd.to_numeric(s, downcast='integer')
 
 
 .. _whatsnew_0190.enhancements.other:
@@ -583,7 +583,7 @@ Comparison operators
 
 Comparison operators raise ``ValueError`` when ``.index`` are different.
 
-Previous Behavior (``Series``):
+**Previous Behavior** (``Series``):
 
 ``Series`` compared values ignoring the ``.index`` as long as both had the same length:
 
@@ -618,7 +618,7 @@ Previous Behavior (``Series``):
 
       s1.eq(s2)
 
-Current Behavior (``DataFrame``, no change):
+**Current Behavior** (``DataFrame``, no change):
 
 .. code-block:: ipython
 
@@ -631,7 +631,7 @@ Logical operators
 
 Logical operators align both ``.index`` of left and right hand side.
 
-Previous behavior (``Series``), only left hand side ``index`` was kept:
+**Previous behavior** (``Series``), only left hand side ``index`` was kept:
 
 .. code-block:: ipython
 
@@ -662,7 +662,7 @@ Previous behavior (``Series``), only left hand side ``index`` was kept:
 
       s1 & s2.reindex_like(s1)
 
-Current Behavior (``DataFrame``, no change):
+**Current Behavior** (``DataFrame``, no change):
 
 .. ipython:: python
 
@@ -729,6 +729,8 @@ Previously if ``.to_datetime()`` encountered mixed integers/floats and strings,
    In [2]: pd.to_datetime([1, 'foo'], errors='coerce')
    Out[2]: DatetimeIndex(['NaT', 'NaT'], dtype='datetime64[ns]', freq=None)
 
+**Current behavior**:
+
 This will now convert integers/floats with the default unit of ``ns``.
 
 .. ipython:: python
@@ -972,18 +974,17 @@ Previous behavior:
     pd.Index(['a', 'b']) + pd.Index(['a', 'c'])
 
 Note that numeric Index objects already performed element-wise operations.
-For example, the behavior of adding two integer Indexes:
+For example, the behavior of adding two integer Indexes is unchanged.
+ The base ``Index`` is now made consistent with this behavior.
 
 .. ipython:: python
 
     pd.Index([1, 2, 3]) + pd.Index([2, 3, 4])
 
-is unchanged. The base ``Index`` is now made consistent with this behavior.
-
 Further, because of this change, it is now possible to subtract two
 DatetimeIndex objects resulting in a TimedeltaIndex:
 
-Previous behavior:
+**Previous behavior**:
 
 .. code-block:: ipython
 
