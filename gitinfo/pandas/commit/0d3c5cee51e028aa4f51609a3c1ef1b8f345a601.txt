commit 0d3c5cee51e028aa4f51609a3c1ef1b8f345a601
Author: cleconte987 <leconte.clement@orange.fr>
Date:   Wed May 6 21:14:49 2020 +0000

    DOC: Fix heading capitalization in doc/source/whatsnew - part5 (#32550) (#33568)

diff --git a/doc/source/whatsnew/v0.18.0.rst b/doc/source/whatsnew/v0.18.0.rst
index e371f1d9f..fbe24675d 100644
--- a/doc/source/whatsnew/v0.18.0.rst
+++ b/doc/source/whatsnew/v0.18.0.rst
@@ -1,7 +1,7 @@
 .. _whatsnew_0180:
 
-v0.18.0 (March 13, 2016)
-------------------------
+Version 0.18.0 (March 13, 2016)
+-------------------------------
 
 {{ header }}
 
@@ -145,7 +145,7 @@ This continues to work as before for function or dict-like values.
 
 .. _whatsnew_0180.enhancements.rangeindex:
 
-Range index
+Range Index
 ^^^^^^^^^^^
 
 A ``RangeIndex`` has been added to the ``Int64Index`` sub-classes to support a memory saving alternative for common use cases. This has a similar implementation to the python ``range`` object (``xrange`` in python 2), in that it only stores the start, stop, and step values for the index. It will transparently interact with the user API, converting to ``Int64Index`` if needed.
@@ -456,8 +456,8 @@ New behavior:
 
 .. _whatsnew_0180.enhancements.xarray:
 
-to_xarray
-^^^^^^^^^
+Method to_xarray
+^^^^^^^^^^^^^^^^
 
 In a future version of pandas, we will be deprecating ``Panel`` and other > 2 ndim objects. In order to provide for continuity,
 all ``NDFrame`` objects have gained the ``.to_xarray()`` method in order to convert to ``xarray`` objects, which has
diff --git a/doc/source/whatsnew/v0.18.1.rst b/doc/source/whatsnew/v0.18.1.rst
index 2c6e8f0e2..13ed6bc38 100644
--- a/doc/source/whatsnew/v0.18.1.rst
+++ b/doc/source/whatsnew/v0.18.1.rst
@@ -1,7 +1,7 @@
 .. _whatsnew_0181:
 
-v0.18.1 (May 3, 2016)
----------------------
+Version 0.18.1 (May 3, 2016)
+----------------------------
 
 {{ header }}
 
@@ -61,8 +61,8 @@ Tuesday after MLK Day (Monday is skipped because it's a holiday)
 
 .. _whatsnew_0181.deferred_ops:
 
-``.groupby(..)`` syntax with window and resample operations
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Method ``.groupby(..)`` syntax with window and resample operations
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 ``.groupby(...)`` has been enhanced to provide convenient syntax when working with ``.rolling(..)``, ``.expanding(..)`` and ``.resample(..)`` per group, see (:issue:`12486`, :issue:`12738`).
 
@@ -111,7 +111,7 @@ Now you can do:
 .. _whatsnew_0181.enhancements.method_chain:
 
 Method chaining improvements
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 The following methods / indexers now accept a ``callable``. It is intended to make
 these more useful in method chains, see the :ref:`documentation <indexing.callable>`.
@@ -121,8 +121,8 @@ these more useful in method chains, see the :ref:`documentation <indexing.callab
 - ``.loc[]``, ``iloc[]`` and ``.ix[]``
 - ``[]`` indexing
 
-``.where()`` and ``.mask()``
-""""""""""""""""""""""""""""
+Methods ``.where()`` and ``.mask()``
+""""""""""""""""""""""""""""""""""""
 
 These can accept a callable for the condition and ``other``
 arguments.
@@ -134,8 +134,8 @@ arguments.
                       'C': [7, 8, 9]})
    df.where(lambda x: x > 4, lambda x: x + 10)
 
-``.loc[]``, ``.iloc[]``, ``.ix[]``
-""""""""""""""""""""""""""""""""""
+Methods ``.loc[]``, ``.iloc[]``, ``.ix[]``
+""""""""""""""""""""""""""""""""""""""""""
 
 These can accept a callable, and a tuple of callable as a slicer. The callable
 can return a valid boolean indexer or anything which is valid for these indexer's input.
@@ -148,8 +148,8 @@ can return a valid boolean indexer or anything which is valid for these indexer'
    # callable returns list of labels
    df.loc[lambda x: [1, 2], lambda x: ['A', 'B']]
 
-``[]`` indexing
-"""""""""""""""
+Indexing with``[]``
+"""""""""""""""""""
 
 Finally, you can use a callable in ``[]`` indexing of Series, DataFrame and Panel.
 The callable must return a valid input for ``[]`` indexing depending on its
@@ -171,7 +171,7 @@ without using temporary variable.
 
 .. _whatsnew_0181.partial_string_indexing:
 
-Partial string indexing on ``DateTimeIndex`` when part of a ``MultiIndex``
+Partial string indexing on ``DatetimeIndex`` when part of a ``MultiIndex``
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 Partial string indexing now matches on ``DateTimeIndex`` when part of a ``MultiIndex`` (:issue:`10331`)
@@ -306,8 +306,8 @@ API changes
 
 .. _whatsnew_0181.api.groubynth:
 
-``.groupby(..).nth()`` changes
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Method ``.groupby(..).nth()`` changes
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 The index in ``.groupby(..).nth()`` output is now more consistent when the ``as_index`` argument is passed (:issue:`11039`):
 
@@ -414,7 +414,7 @@ New behaviour:
 
 .. _whatsnew_0181.apply_resample:
 
-Using ``.apply`` on groupby resampling
+Using ``.apply`` on GroupBy resampling
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 Using ``apply`` on resampling groupby operations (using a ``pd.TimeGrouper``) now has the same output types as similar ``apply`` calls on other groupby operations. (:issue:`11742`).
@@ -513,8 +513,8 @@ In addition to this error change, several others have been made as well:
 
 .. _whatsnew_0181.api.to_datetime:
 
-``to_datetime`` error changes
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Method ``to_datetime`` error changes
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 Bugs in ``pd.to_datetime()`` when passing a ``unit`` with convertible entries and ``errors='coerce'`` or non-convertible with ``errors='ignore'``. Furthermore, an ``OutOfBoundsDateime`` exception will be raised when an out-of-range value is encountered for that unit when ``errors='raise'``. (:issue:`11758`, :issue:`13052`, :issue:`13059`)
 
diff --git a/doc/source/whatsnew/v0.19.0.rst b/doc/source/whatsnew/v0.19.0.rst
index 7390b8021..2d3bb7056 100644
--- a/doc/source/whatsnew/v0.19.0.rst
+++ b/doc/source/whatsnew/v0.19.0.rst
@@ -1,7 +1,7 @@
 .. _whatsnew_0190:
 
-v0.19.0 (October 2, 2016)
--------------------------
+Version 0.19.0 (October 2, 2016)
+--------------------------------
 
 {{ header }}
 
@@ -37,8 +37,8 @@ New features
 
 .. _whatsnew_0190.enhancements.asof_merge:
 
-``merge_asof`` for asof-style time-series joining
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Function ``merge_asof`` for asof-style time-series joining
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 A long-time requested feature has been added through the :func:`merge_asof` function, to
 support asof style joining of time-series (:issue:`1870`, :issue:`13695`, :issue:`13709`, :issue:`13902`). Full documentation is
@@ -127,8 +127,8 @@ passed DataFrame (``trades`` in this case), with the fields of the ``quotes`` me
 
 .. _whatsnew_0190.enhancements.rolling_ts:
 
-``.rolling()`` is now time-series aware
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Method ``.rolling()`` is now time-series aware
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 ``.rolling()`` objects are now time-series aware and can accept a time-series offset (or convertible) for the ``window`` argument (:issue:`13327`, :issue:`12995`).
 See the full documentation :ref:`here <stats.moments.ts>`.
@@ -186,8 +186,8 @@ default of the index) in a DataFrame.
 
 .. _whatsnew_0190.enhancements.read_csv_dupe_col_names_support:
 
-``read_csv`` has improved support for duplicate column names
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Method ``read_csv`` has improved support for duplicate column names
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 .. ipython:: python
    :suppress:
@@ -225,8 +225,8 @@ contained the values ``[0, 3]``.
 
 .. _whatsnew_0190.enhancements.read_csv_categorical:
 
-``read_csv`` supports parsing ``Categorical`` directly
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Method ``read_csv`` supports parsing ``Categorical`` directly
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 The :func:`read_csv` function now supports parsing a ``Categorical`` column when
 specified as a dtype (:issue:`10153`).  Depending on the structure of the data,
@@ -394,8 +394,8 @@ After upgrading pandas, you may see *new* ``RuntimeWarnings`` being issued from
 
 .. _whatsnew_0190.get_dummies_dtypes:
 
-``get_dummies`` now returns integer dtypes
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Method ``get_dummies`` now returns integer dtypes
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 The ``pd.get_dummies`` function now returns dummy-encoded columns as small integers, rather than floats (:issue:`8725`). This should provide an improved memory footprint.
 
@@ -731,8 +731,8 @@ A ``Series`` will now correctly promote its dtype for assignment with incompat v
 
 .. _whatsnew_0190.api.to_datetime_coerce:
 
-``.to_datetime()`` changes
-^^^^^^^^^^^^^^^^^^^^^^^^^^
+Function ``.to_datetime()`` changes
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 Previously if ``.to_datetime()`` encountered mixed integers/floats and strings, but no datetimes with ``errors='coerce'`` it would convert all to ``NaT``.
 
@@ -809,8 +809,8 @@ resulting dtype will be upcast, which is unchanged from previous.
 
 .. _whatsnew_0190.api.describe:
 
-``.describe()`` changes
-^^^^^^^^^^^^^^^^^^^^^^^
+Method ``.describe()`` changes
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 Percentile identifiers in the index of a ``.describe()`` output will now be rounded to the least precision that keeps them distinct (:issue:`13104`)
 
@@ -863,8 +863,8 @@ Furthermore:
 ``Period`` changes
 ^^^^^^^^^^^^^^^^^^
 
-``PeriodIndex`` now has ``period`` dtype
-""""""""""""""""""""""""""""""""""""""""
+The ``PeriodIndex`` now has ``period`` dtype
+""""""""""""""""""""""""""""""""""""""""""""
 
 ``PeriodIndex`` now has its own ``period`` dtype. The ``period`` dtype is a
 pandas extension dtype like ``category`` or the :ref:`timezone aware dtype <timeseries.timezone_series>` (``datetime64[ns, tz]``) (:issue:`13941`).
@@ -1151,8 +1151,8 @@ As a consequence, ``groupby`` and ``set_index`` also preserve categorical dtypes
 
 .. _whatsnew_0190.api.autogenerated_chunksize_index:
 
-``read_csv`` will progressively enumerate chunks
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Function ``read_csv`` will progressively enumerate chunks
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 When :func:`read_csv` is called with ``chunksize=n`` and without specifying an index,
 each chunk used to have an independently generated index from ``0`` to ``n-1``.
@@ -1190,8 +1190,8 @@ Sparse changes
 
 These changes allow pandas to handle sparse data with more dtypes, and for work to make a smoother experience with data handling.
 
-``int64`` and ``bool`` support enhancements
-"""""""""""""""""""""""""""""""""""""""""""
+Types ``int64`` and ``bool`` support enhancements
+"""""""""""""""""""""""""""""""""""""""""""""""""
 
 Sparse data structures now gained enhanced support of ``int64`` and ``bool`` ``dtype`` (:issue:`667`, :issue:`13849`).
 
diff --git a/doc/source/whatsnew/v0.19.1.rst b/doc/source/whatsnew/v0.19.1.rst
index a89d14610..9e6b884e0 100644
--- a/doc/source/whatsnew/v0.19.1.rst
+++ b/doc/source/whatsnew/v0.19.1.rst
@@ -1,7 +1,7 @@
 .. _whatsnew_0191:
 
-v0.19.1 (November 3, 2016)
---------------------------
+Version 0.19.1 (November 3, 2016)
+---------------------------------
 
 {{ header }}
 
diff --git a/doc/source/whatsnew/v0.19.2.rst b/doc/source/whatsnew/v0.19.2.rst
index 023bc7808..924c95f21 100644
--- a/doc/source/whatsnew/v0.19.2.rst
+++ b/doc/source/whatsnew/v0.19.2.rst
@@ -1,7 +1,7 @@
 .. _whatsnew_0192:
 
-v0.19.2 (December 24, 2016)
----------------------------
+Version 0.19.2 (December 24, 2016)
+----------------------------------
 
 {{ header }}
 
diff --git a/doc/source/whatsnew/v0.20.0.rst b/doc/source/whatsnew/v0.20.0.rst
index 06bbd9679..09980b52b 100644
--- a/doc/source/whatsnew/v0.20.0.rst
+++ b/doc/source/whatsnew/v0.20.0.rst
@@ -1,7 +1,7 @@
 .. _whatsnew_0200:
 
-v0.20.1 (May 5, 2017)
----------------------
+Version 0.20.1 (May 5, 2017)
+----------------------------
 
 {{ header }}
 
@@ -47,8 +47,8 @@ New features
 
 .. _whatsnew_0200.enhancements.agg:
 
-``agg`` API for DataFrame/Series
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Method ``agg`` API for DataFrame/Series
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 Series & DataFrame have been enhanced to support the aggregation API. This is a familiar API
 from groupby, window operations, and resampling. This allows aggregation operations in a concise way
@@ -110,8 +110,8 @@ aggregations. This is similar to how groupby ``.agg()`` works. (:issue:`15015`)
 
 .. _whatsnew_0200.enhancements.dataio_dtype:
 
-``dtype`` keyword for data IO
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Keyword argument ``dtype`` for data IO
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 The ``'python'`` engine for :func:`read_csv`, as well as the :func:`read_fwf` function for parsing
 fixed-width text files and :func:`read_excel` for parsing Excel files, now accept the ``dtype`` keyword argument for specifying the types of specific columns (:issue:`14295`). See the :ref:`io docs <io.dtypes>` for more information.
@@ -129,8 +129,8 @@ fixed-width text files and :func:`read_excel` for parsing Excel files, now accep
 
 .. _whatsnew_0120.enhancements.datetime_origin:
 
-``.to_datetime()`` has gained an ``origin`` parameter
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Method ``.to_datetime()`` has gained an ``origin`` parameter
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 :func:`to_datetime` has gained a new parameter, ``origin``, to define a reference date
 from where to compute the resulting timestamps when parsing numerical values with a specific ``unit`` specified. (:issue:`11276`, :issue:`11745`)
@@ -151,7 +151,7 @@ commonly called 'unix epoch' or POSIX time. This was the previous default, so th
 
 .. _whatsnew_0200.enhancements.groupby_access:
 
-Groupby enhancements
+GroupBy enhancements
 ^^^^^^^^^^^^^^^^^^^^
 
 Strings passed to ``DataFrame.groupby()`` as the ``by`` parameter may now reference either column names or index level names. Previously, only column names could be referenced. This allows to easily group by a column and index level at the same time. (:issue:`5677`)
@@ -197,8 +197,8 @@ support for bz2 compression in the python 2 C-engine improved (:issue:`14874`).
 
 .. _whatsnew_0200.enhancements.pickle_compression:
 
-Pickle file I/O now supports compression
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Pickle file IO now supports compression
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 :func:`read_pickle`, :meth:`DataFrame.to_pickle` and :meth:`Series.to_pickle`
 can now read from and write to compressed pickle files. Compression methods
@@ -356,7 +356,7 @@ To convert a ``SparseDataFrame`` back to sparse SciPy matrix in COO format, you
 
 .. _whatsnew_0200.enhancements.style_excel:
 
-Excel output for styled dataframes
+Excel output for styled DataFrames
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 Experimental support has been added to export ``DataFrame.style`` formats to Excel using the ``openpyxl`` engine. (:issue:`15530`)
@@ -928,7 +928,7 @@ New behavior:
 
 .. _whatsnew_0200.api_breaking.groupby_describe:
 
-Groupby describe formatting
+GroupBy describe formatting
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 The output formatting of ``groupby.describe()`` now labels the ``describe()`` metrics in the columns instead of the index.
@@ -1670,8 +1670,8 @@ Indexing
 - Bug in in ``pd.concat()`` when combining objects with a ``CategoricalIndex`` (:issue:`16111`)
 - Bug in indexing with a scalar and a ``CategoricalIndex`` (:issue:`16123`)
 
-I/O
-^^^
+IO
+^^
 
 - Bug in ``pd.to_numeric()`` in which float and unsigned integer elements were being improperly casted (:issue:`14941`, :issue:`15005`)
 - Bug in ``pd.read_fwf()`` where the skiprows parameter was not being respected during column width inference (:issue:`11256`)
@@ -1712,7 +1712,7 @@ Plotting
 - Bug in the date and time converters pandas registers with matplotlib not handling multiple dimensions (:issue:`16026`)
 - Bug in ``pd.scatter_matrix()`` could accept either ``color`` or ``c``, but not both (:issue:`14855`)
 
-Groupby/resample/rolling
+GroupBy/resample/rolling
 ^^^^^^^^^^^^^^^^^^^^^^^^
 
 - Bug in ``.groupby(..).resample()`` when passed the ``on=`` kwarg. (:issue:`15021`)
diff --git a/doc/source/whatsnew/v0.20.2.rst b/doc/source/whatsnew/v0.20.2.rst
index 232d1d283..7f84c6b3f 100644
--- a/doc/source/whatsnew/v0.20.2.rst
+++ b/doc/source/whatsnew/v0.20.2.rst
@@ -1,7 +1,7 @@
 .. _whatsnew_0202:
 
-v0.20.2 (June 4, 2017)
-----------------------
+Version 0.20.2 (June 4, 2017)
+-----------------------------
 
 {{ header }}
 
@@ -74,8 +74,8 @@ Indexing
 - Bug in partial string indexing with a monotonic, but not strictly-monotonic, index incorrectly reversing the slice bounds (:issue:`16515`)
 - Bug in ``MultiIndex.remove_unused_levels()`` that would not return a ``MultiIndex`` equal to the original. (:issue:`16556`)
 
-I/O
-^^^
+IO
+^^
 
 - Bug in :func:`read_csv` when ``comment`` is passed in a space delimited text file (:issue:`16472`)
 - Bug in :func:`read_csv` not raising an exception with nonexistent columns in ``usecols`` when it had the correct length (:issue:`14671`)
@@ -97,7 +97,7 @@ Plotting
 
 
 
-Groupby/resample/rolling
+GroupBy/resample/rolling
 ^^^^^^^^^^^^^^^^^^^^^^^^
 
 - Bug in creating a time-based rolling window on an empty ``DataFrame`` (:issue:`15819`)
diff --git a/doc/source/whatsnew/v0.20.3.rst b/doc/source/whatsnew/v0.20.3.rst
index 72faabd95..888d0048c 100644
--- a/doc/source/whatsnew/v0.20.3.rst
+++ b/doc/source/whatsnew/v0.20.3.rst
@@ -1,7 +1,7 @@
 .. _whatsnew_0203:
 
-v0.20.3 (July 7, 2017)
------------------------
+Version 0.20.3 (July 7, 2017)
+-----------------------------
 
 {{ header }}
 
@@ -40,8 +40,8 @@ Indexing
 - Bug in ``MultiIndex.isin`` causing an error when passing an empty iterable (:issue:`16777`)
 - Fixed a bug in a slicing DataFrame/Series that have a  ``TimedeltaIndex`` (:issue:`16637`)
 
-I/O
-^^^
+IO
+^^
 
 - Bug in :func:`read_csv` in which files weren't opened as binary files by the C engine on Windows, causing EOF characters mid-field, which would fail (:issue:`16039`, :issue:`16559`, :issue:`16675`)
 - Bug in :func:`read_hdf` in which reading a ``Series`` saved to an HDF file in 'fixed' format fails when an explicit ``mode='r'`` argument is supplied (:issue:`16583`)
diff --git a/doc/source/whatsnew/v0.21.0.rst b/doc/source/whatsnew/v0.21.0.rst
index 71969c4de..926bcaa21 100644
--- a/doc/source/whatsnew/v0.21.0.rst
+++ b/doc/source/whatsnew/v0.21.0.rst
@@ -1,7 +1,7 @@
 .. _whatsnew_0210:
 
-v0.21.0 (October 27, 2017)
---------------------------
+Version 0.21.0 (October 27, 2017)
+---------------------------------
 
 {{ header }}
 
@@ -55,8 +55,8 @@ For more details, see see :ref:`the IO docs on Parquet <io.parquet>`.
 
 .. _whatsnew_0210.enhancements.infer_objects:
 
-``infer_objects`` type conversion
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Method ``infer_objects`` type conversion
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 The :meth:`DataFrame.infer_objects` and :meth:`Series.infer_objects`
 methods have been added to perform dtype inference on object columns, replacing
@@ -115,8 +115,8 @@ Setting a list-like data structure into a new attribute now raises a ``UserWarni
 
 .. _whatsnew_0210.enhancements.drop_api:
 
-``drop`` now also accepts index/columns keywords
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Method ``drop`` now also accepts index/columns keywords
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 The :meth:`~DataFrame.drop` method has gained ``index``/``columns`` keywords as an
 alternative to specifying the ``axis``. This is similar to the behavior of ``reindex``
@@ -135,8 +135,8 @@ For example:
 
 .. _whatsnew_0210.enhancements.rename_reindex_axis:
 
-``rename``, ``reindex`` now also accept axis keyword
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+Methods ``rename``, ``reindex`` now also accept axis keyword
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 The :meth:`DataFrame.rename` and :meth:`DataFrame.reindex` methods have gained
 the ``axis`` keyword to specify the axis to target with the operation
@@ -380,7 +380,7 @@ Additionally, support has been dropped for Python 3.4 (:issue:`15251`).
 
 .. _whatsnew_0210.api_breaking.bottleneck:
 
-Sum/Prod of all-NaN or empty Series/DataFrames is now consistently NaN
+Sum/prod of all-NaN or empty Series/DataFrames is now consistently NaN
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 .. note::
@@ -814,7 +814,7 @@ length 2+ levels, so a :class:`MultiIndex` is always returned from all of the
 
 .. _whatsnew_0210.api.utc_localization_with_series:
 
-UTC Localization with Series
+UTC localization with Series
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
 Previously, :func:`to_datetime` did not localize datetime ``Series`` data when ``utc=True`` was passed. Now, :func:`to_datetime` will correctly localize ``Series`` with a ``datetime64[ns, UTC]`` dtype to be consistent with how list-like and ``Index`` data are handled. (:issue:`6415`).
@@ -1085,8 +1085,8 @@ Indexing
 - Bug in :func:`Series.rename` when called with a callable, incorrectly alters the name of the ``Series``, rather than the name of the ``Index``. (:issue:`17407`)
 - Bug in :func:`String.str_get` raises ``IndexError`` instead of inserting NaNs when using a negative index. (:issue:`17704`)
 
-I/O
-^^^
+IO
+^^
 
 - Bug in :func:`read_hdf` when reading a timezone aware index from ``fixed`` format HDFStore (:issue:`17618`)
 - Bug in :func:`read_csv` in which columns were not being thoroughly de-duplicated (:issue:`17060`)
@@ -1115,7 +1115,7 @@ Plotting
 - Bug causing ``plotting.parallel_coordinates`` to reset the random seed when using random colors (:issue:`17525`)
 
 
-Groupby/resample/rolling
+GroupBy/resample/rolling
 ^^^^^^^^^^^^^^^^^^^^^^^^
 
 - Bug in ``DataFrame.resample(...).size()`` where an empty ``DataFrame`` did not return a ``Series`` (:issue:`14962`)
diff --git a/doc/source/whatsnew/v0.21.1.rst b/doc/source/whatsnew/v0.21.1.rst
index 64f333983..f930dfac8 100644
--- a/doc/source/whatsnew/v0.21.1.rst
+++ b/doc/source/whatsnew/v0.21.1.rst
@@ -1,7 +1,7 @@
 .. _whatsnew_0211:
 
-v0.21.1 (December 12, 2017)
----------------------------
+Version 0.21.1 (December 12, 2017)
+----------------------------------
 
 {{ header }}
 
@@ -122,8 +122,8 @@ Indexing
 - Bug in ``Index.putmask`` when an invalid mask passed (:issue:`18368`)
 - Bug in masked assignment of a ``timedelta64[ns]`` dtype ``Series``, incorrectly coerced to float (:issue:`18493`)
 
-I/O
-^^^
+IO
+^^
 
 - Bug in class:`~pandas.io.stata.StataReader` not converting date/time columns with display formatting addressed (:issue:`17990`). Previously columns with display formatting were normally left as ordinal numbers and not converted to datetime objects.
 - Bug in :func:`read_csv` when reading a compressed UTF-16 encoded file (:issue:`18071`)
@@ -143,7 +143,7 @@ Plotting
 
 - Bug in ``DataFrame.plot()`` and ``Series.plot()`` with :class:`DatetimeIndex` where a figure generated by them is not pickleable in Python 3 (:issue:`18439`)
 
-Groupby/resample/rolling
+GroupBy/resample/rolling
 ^^^^^^^^^^^^^^^^^^^^^^^^
 
 - Bug in ``DataFrame.resample(...).apply(...)`` when there is a callable that returns different columns (:issue:`15169`)
diff --git a/scripts/validate_rst_title_capitalization.py b/scripts/validate_rst_title_capitalization.py
index 9cf4922fa..5de2a0738 100755
--- a/scripts/validate_rst_title_capitalization.py
+++ b/scripts/validate_rst_title_capitalization.py
@@ -18,6 +18,7 @@ from typing import Iterable, List, Tuple
 
 CAPITALIZATION_EXCEPTIONS = {
     "pandas",
+    "pd",
     "Python",
     "IPython",
     "PyTables",
@@ -34,6 +35,7 @@ CAPITALIZATION_EXCEPTIONS = {
     "Series",
     "Index",
     "DataFrame",
+    "DataFrames",
     "C",
     "Git",
     "GitHub",
@@ -48,15 +50,19 @@ CAPITALIZATION_EXCEPTIONS = {
     "PeriodIndex",
     "NA",
     "NaN",
+    "NaT",
     "ValueError",
+    "Boolean",
     "BooleanArray",
     "KeyError",
     "API",
     "FAQ",
     "IO",
+    "Timedelta",
     "TimedeltaIndex",
     "DatetimeIndex",
     "IntervalIndex",
+    "Categorical",
     "CategoricalIndex",
     "Categorical",
     "GroupBy",
@@ -113,6 +119,7 @@ CAPITALIZATION_EXCEPTIONS = {
     "November",
     "December",
     "Float64Index",
+    "FloatIndex",
     "TZ",
     "GIL",
     "strftime",
@@ -121,6 +128,16 @@ CAPITALIZATION_EXCEPTIONS = {
     "East",
     "Asian",
     "None",
+    "URLs",
+    "UInt64",
+    "SciPy",
+    "Matplotlib",
+    "PyPy",
+    "SparseDataFrame",
+    "Google",
+    "CategoricalDtype",
+    "UTC",
+    "Panel",
 }
 
 CAP_EXCEPTIONS_DICT = {word.lower(): word for word in CAPITALIZATION_EXCEPTIONS}
