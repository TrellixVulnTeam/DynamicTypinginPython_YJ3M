commit 9557ebfe72ca1cf11e13e76b27df2ae8b7a0633c
Author: Jeffrey Tratner <jeffrey.tratner@gmail.com>
Date:   Fri Sep 13 22:57:24 2013 -0400

    ENH: Better read_json error when handling bad keys
    
    (in json data with orient=split)

diff --git a/doc/source/release.rst b/doc/source/release.rst
index f7755afe8..e4143e3f7 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -120,6 +120,8 @@ Improvements to existing features
     thanks @jnothman
   - ``__getitem__`` with ``tuple`` key (e.g., ``[:, 2]``) on ``Series``
     without ``MultiIndex`` raises ``ValueError`` (:issue:`4759`, :issue:`4837`)
+  - ``read_json`` now raises a (more informative) ``ValueError`` when the dict
+    contains a bad key and ``orient='split'`` (:issue:`4730`, :issue:`4838`)
 
 API Changes
 ~~~~~~~~~~~
diff --git a/pandas/io/json.py b/pandas/io/json.py
index 737ec1941..e3c85fae0 100644
--- a/pandas/io/json.py
+++ b/pandas/io/json.py
@@ -5,15 +5,14 @@ import numpy as np
 
 import pandas.json as _json
 from pandas.tslib import iNaT
-from pandas.compat import long
+from pandas.compat import long, u
 from pandas import compat, isnull
 from pandas import Series, DataFrame, to_datetime
 from pandas.io.common import get_filepath_or_buffer
+import pandas.core.common as com
 
 loads = _json.loads
 dumps = _json.dumps
-
-
 ### interface to/from ###
 
 
@@ -230,6 +229,14 @@ class Parser(object):
         self.keep_default_dates = keep_default_dates
         self.obj = None
 
+    def check_keys_split(self, decoded):
+        "checks that dict has only the appropriate keys for orient='split'"
+        bad_keys = set(decoded.keys()).difference(set(self._split_keys))
+        if bad_keys:
+            bad_keys = ", ".join(bad_keys)
+            raise ValueError(u("JSON data had unexpected key(s): %s") %
+                             com.pprint_thing(bad_keys))
+
     def parse(self):
 
         # try numpy
@@ -375,6 +382,8 @@ class Parser(object):
 
 class SeriesParser(Parser):
     _default_orient = 'index'
+    _split_keys = ('name', 'index', 'data')
+
 
     def _parse_no_numpy(self):
 
@@ -385,6 +394,7 @@ class SeriesParser(Parser):
                            for k, v in compat.iteritems(loads(
                                json,
                                precise_float=self.precise_float)))
+            self.check_keys_split(decoded)
             self.obj = Series(dtype=None, **decoded)
         else:
             self.obj = Series(
@@ -398,6 +408,7 @@ class SeriesParser(Parser):
             decoded = loads(json, dtype=None, numpy=True,
                             precise_float=self.precise_float)
             decoded = dict((str(k), v) for k, v in compat.iteritems(decoded))
+            self.check_keys_split(decoded)
             self.obj = Series(**decoded)
         elif orient == "columns" or orient == "index":
             self.obj = Series(*loads(json, dtype=None, numpy=True,
@@ -418,6 +429,7 @@ class SeriesParser(Parser):
 
 class FrameParser(Parser):
     _default_orient = 'columns'
+    _split_keys = ('columns', 'index', 'data')
 
     def _parse_numpy(self):
 
@@ -434,6 +446,7 @@ class FrameParser(Parser):
             decoded = loads(json, dtype=None, numpy=True,
                             precise_float=self.precise_float)
             decoded = dict((str(k), v) for k, v in compat.iteritems(decoded))
+            self.check_keys_split(decoded)
             self.obj = DataFrame(**decoded)
         elif orient == "values":
             self.obj = DataFrame(loads(json, dtype=None, numpy=True,
@@ -456,6 +469,7 @@ class FrameParser(Parser):
                            for k, v in compat.iteritems(loads(
                                json,
                                precise_float=self.precise_float)))
+            self.check_keys_split(decoded)
             self.obj = DataFrame(dtype=None, **decoded)
         elif orient == "index":
             self.obj = DataFrame(
diff --git a/pandas/io/tests/test_json/test_pandas.py b/pandas/io/tests/test_json/test_pandas.py
index 108e77912..c32fc08da 100644
--- a/pandas/io/tests/test_json/test_pandas.py
+++ b/pandas/io/tests/test_json/test_pandas.py
@@ -252,8 +252,8 @@ class TestPandasContainer(unittest.TestCase):
         json = StringIO('{"badkey":["A","B"],'
                         '"index":["2","3"],'
                         '"data":[[1.0,"1"],[2.0,"2"],[null,"3"]]}')
-        self.assertRaises(TypeError, read_json, json,
-                          orient="split")
+        with tm.assertRaisesRegexp(ValueError, r"unexpected key\(s\): badkey"):
+            read_json(json, orient="split")
 
     def test_frame_from_json_nones(self):
         df = DataFrame([[1, 2], [4, 5, 6]])
