commit 0a7cd9783e2b38d3895274b6d401ffc30bc00fe8
Author: Jeff Reback <jeff@reback.net>
Date:   Wed Dec 21 06:07:41 2016 -0500

    DOC: whatsnew 0.20 and timeseries doc fixes

diff --git a/doc/source/timeseries.rst b/doc/source/timeseries.rst
index 7add24903..6de6abed9 100644
--- a/doc/source/timeseries.rst
+++ b/doc/source/timeseries.rst
@@ -527,11 +527,11 @@ If the timestamp string is treated as a slice, it can be used to index ``DataFra
     dft_minute['2011-12-31 23']
 
 
-:: warning::
+.. warning::
 
-   However if the string is treated as an exact match the selection in ``DataFrame``'s ``[]`` will be column-wise and not row-wise, see :ref:`Indexing Basics <indexing.basics>`. For example ``dft_minute['2011-12-31 23:59']`` will raise ``KeyError`` as ``'2012-12-31 23:59'`` has the same resolution as index and there is no column with such name:
+   However if the string is treated as an exact match, the selection in ``DataFrame``'s ``[]`` will be column-wise and not row-wise, see :ref:`Indexing Basics <indexing.basics>`. For example ``dft_minute['2011-12-31 23:59']`` will raise ``KeyError`` as ``'2012-12-31 23:59'`` has the same resolution as index and there is no column with such name:
 
-   To select a single row, use ``.loc``.
+   To *always* have unambiguous selection, whether the row is treated as a slice or a single selection, use ``.loc``.
 
    .. ipython:: python
 
diff --git a/doc/source/whatsnew/v0.20.0.txt b/doc/source/whatsnew/v0.20.0.txt
index 46d275df0..b27737bf7 100644
--- a/doc/source/whatsnew/v0.20.0.txt
+++ b/doc/source/whatsnew/v0.20.0.txt
@@ -23,6 +23,8 @@ New features
 ~~~~~~~~~~~~
 
 
+.. _whatsnew_0200.enhancements.dataio_dtype:
+
 ``dtype`` keyword for data IO
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
@@ -106,7 +108,7 @@ Other enhancements
 - ``pd.Series.interpolate`` now supports timedelta as an index type with ``method='time'`` (:issue:`6424`)
 - ``pandas.io.json.json_normalize()`` gained the option ``errors='ignore'|'raise'``; the default is ``errors='raise'`` which is backward compatible. (:issue:`14583`)
 
-- ``.select_dtypes()`` now allows `datetimetz` to generically select datetimes with tz (:issue:`14910`)
+- ``.select_dtypes()`` now allows the string 'datetimetz' to generically select datetimes with tz (:issue:`14910`)
 
 
 .. _whatsnew_0200.api_breaking:
@@ -157,7 +159,7 @@ Map on Index types now return other Index types
       mi.map(lambda x: x[0])
 
 
--  ``map`` on a Series with datetime64 values may return int64 dtypes rather than int32
+-  ``map`` on a ``Series`` with ``datetime64`` values may return ``int64`` dtypes rather than ``int32``
 
   .. ipython:: python
 
@@ -182,53 +184,59 @@ Map on Index types now return other Index types
 
     s.map(lambda x: x.hour)
 
-.. _whatsnew_0200.s3:
+.. _whatsnew_0200.api_breaking.s3:
 
 S3 File Handling
 ^^^^^^^^^^^^^^^^
 
 pandas now uses `s3fs <http://s3fs.readthedocs.io/>`_ for handling S3 connections. This shouldn't break
-any code. However, since s3fs is not a required dependency, you will need to install it separately (like boto
-in prior versions of pandas) (:issue:`11915`).
+any code. However, since s3fs is not a required dependency, you will need to install it separately, like ``boto``
+in prior versions of pandas. (:issue:`11915`).
 
-.. _whatsnew_0200.api:
+.. _whatsnew_0200.api_breaking.partial_string_indexing:
 
-Other API Changes
-^^^^^^^^^^^^^^^^^
+Partial String Indexing Changes
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-- ``CParserError`` has been renamed to ``ParserError`` in ``pd.read_csv`` and will be removed in the future (:issue:`12665`)
-- ``SparseArray.cumsum()`` and ``SparseSeries.cumsum()`` will now always return ``SparseArray`` and ``SparseSeries`` respectively (:issue:`12855`)
-- :ref:`DatetimeIndex Partial String Indexing <timeseries.partialindexing>` now works as exact match provided that string resolution coincides with index resolution, including a case when both are seconds (:issue:`14826`). See :ref:`Slice vs. Exact Match <timeseries.slice_vs_exact_match>` for details.
+:ref:`DatetimeIndex Partial String Indexing <timeseries.partialindexing>` now works as exact match, provided that string resolution coincides with index resolution, including a case when both are seconds (:issue:`14826`). See :ref:`Slice vs. Exact Match <timeseries.slice_vs_exact_match>` for details.
 
-  .. ipython:: python
+.. ipython:: python
 
-    df = DataFrame({'a': [1, 2, 3]}, DatetimeIndex(['2011-12-31 23:59:59',
-                                                    '2012-01-01 00:00:00',
-                                                    '2012-01-01 00:00:01']))
-  Previous Behavior:
+  df = DataFrame({'a': [1, 2, 3]}, DatetimeIndex(['2011-12-31 23:59:59',
+                                                  '2012-01-01 00:00:00',
+                                                  '2012-01-01 00:00:01']))
+Previous Behavior:
 
-  .. code-block:: ipython
+.. code-block:: ipython
 
-    In [4]: df['2011-12-31 23:59:59']
-    Out[4]:
+  In [4]: df['2011-12-31 23:59:59']
+  Out[4]:
                          a
-    2011-12-31 23:59:59  1
+  2011-12-31 23:59:59  1
 
-    In [5]: df['a']['2011-12-31 23:59:59']
-    Out[5]:
-    2011-12-31 23:59:59    1
-    Name: a, dtype: int64
+  In [5]: df['a']['2011-12-31 23:59:59']
+  Out[5]:
+  2011-12-31 23:59:59    1
+  Name: a, dtype: int64
 
 
-  New Behavior:
+New Behavior:
 
-  .. code-block:: ipython
+.. code-block:: ipython
+
+  In [4]: df['2011-12-31 23:59:59']
+  KeyError: '2011-12-31 23:59:59'
+
+  In [5]: df['a']['2011-12-31 23:59:59']
+  Out[5]: 1
+
+.. _whatsnew_0200.api:
 
-    In [4]: df['2011-12-31 23:59:59']
-    KeyError: '2011-12-31 23:59:59'
+Other API Changes
+^^^^^^^^^^^^^^^^^
 
-    In [5]: df['a']['2011-12-31 23:59:59']
-    Out[5]: 1
+- ``CParserError`` has been renamed to ``ParserError`` in ``pd.read_csv`` and will be removed in the future (:issue:`12665`)
+- ``SparseArray.cumsum()`` and ``SparseSeries.cumsum()`` will now always return ``SparseArray`` and ``SparseSeries`` respectively (:issue:`12855`)
 
 .. _whatsnew_0200.deprecations:
 
