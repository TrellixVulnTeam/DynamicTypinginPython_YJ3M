commit 3fae25e5afb65444b3e3692501fa212933f4de7e
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Jan 18 21:59:45 2012 -0500

    ENH: add integer indexing functions iget/irow/icol, GH #628

diff --git a/RELEASE.rst b/RELEASE.rst
index cdcac5ec7..5465ddab5 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -76,6 +76,8 @@ pandas 0.7.0
   - New ``crosstab`` function for easily computing frequency tables (GH #170)
   - Can pass a list of functions to aggregate with groupby on a DataFrame,
     yielding an aggregated result with hierarchical columns (GH #166)
+  - Add integer-indexing functions ``iget`` in Series and ``irow`` / ``iget``
+    in DataFrame (GH #628)
 
 **API Changes**
 
@@ -219,6 +221,7 @@ Thanks
 - Craig Austin
 - Marius Cobzarenco
 - Mario Gamboa-Cavazos
+- Hans-Martin Gaudecker
 - Arthur Gerigk
 - Yaroslav Halchenko
 - Jeff Hammerbacher
@@ -235,6 +238,7 @@ Thanks
 - Jan Schulz
 - Ted Square
 - Graham Taylor
+- Aman Thakral
 - Chris Uga
 - Dieter Vandenbussche
 - Texas P.
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 531113e5f..16fe681c0 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1218,6 +1218,45 @@ class DataFrame(NDFrame):
 
             return result.set_value(index, col, value)
 
+    def irow(self, i):
+        """
+        Retrieve the i-th row of the DataFrame by location as a Series. Can
+        also pass a slice object
+
+        Parameters
+        ----------
+        i : int or slice
+
+        Returns
+        -------
+        row : Series
+        """
+        if isinstance(i, slice):
+            return self[i]
+        else:
+            label = self.index[i]
+            return self.xs(label)
+
+    def icol(self, i):
+        """
+        Retrieve the i-th column of the DataFrame by location as a Series. Can
+        also pass a slice object
+
+        Parameters
+        ----------
+        i : int or slice
+
+        Returns
+        -------
+        column : Series
+        """
+        label = self.columns[i]
+        if isinstance(i, slice):
+            lab_slice = slice(label[0], label[-1])
+            return self.ix[:, lab_slice]
+        else:
+            return self[label]
+
     def __getitem__(self, key):
         # slice rows
         if isinstance(key, slice):
diff --git a/pandas/core/series.py b/pandas/core/series.py
index e27be44cc..e6498424a 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -477,6 +477,24 @@ copy : boolean, default False
         except KeyError:
             return default
 
+    def iget(self, i):
+        """
+        Return the i-th value in the Series by location
+
+        Parameters
+        ----------
+        i : int or slice
+
+        Returns
+        -------
+        value : scalar
+        """
+        if isinstance(i, slice):
+            return self[i]
+        else:
+            label = self.index[i]
+            return self[label]
+
     def get_value(self, label):
         """
         Quickly retrieve single value at passed index label
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index f4ca27978..b250bc932 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -810,6 +810,38 @@ class CheckIndexing(object):
         result = self.frame.ix[self.frame.index[5], 'E']
         self.assert_(com.is_integer(result))
 
+    def test_irow(self):
+        df = DataFrame(np.random.randn(10, 4), index=range(0, 20, 2))
+
+        result = df.irow(1)
+        exp = df.ix[2]
+        assert_series_equal(result, exp)
+
+        result = df.irow(2)
+        exp = df.ix[4]
+        assert_series_equal(result, exp)
+
+        # slice
+        result = df.irow(slice(4, 8))
+        expected = df.ix[8:14]
+        assert_frame_equal(result, expected)
+
+    def test_icol(self):
+        df = DataFrame(np.random.randn(4, 10), columns=range(0, 20, 2))
+
+        result = df.icol(1)
+        exp = df.ix[:, 2]
+        assert_series_equal(result, exp)
+
+        result = df.icol(2)
+        exp = df.ix[:, 4]
+        assert_series_equal(result, exp)
+
+        # slice
+        result = df.icol(slice(4, 8))
+        expected = df.ix[:, 8:14]
+        assert_frame_equal(result, expected)
+
 _seriesd = tm.getSeriesData()
 _tsd = tm.getTimeSeriesData()
 
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index bc37f362c..ddbe739e7 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -323,6 +323,18 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         d = self.ts.index[0] - datetools.bday
         self.assertRaises(KeyError, self.ts.__getitem__, d)
 
+    def test_iget(self):
+        s = Series(np.random.randn(10), index=range(0, 20, 2))
+        for i in range(len(s)):
+            result = s.iget(i)
+            exp = s[s.index[i]]
+            assert_almost_equal(result, exp)
+
+        # pass a slice
+        result = s.iget(slice(1, 3))
+        expected = s.ix[2:4]
+        assert_series_equal(result, expected)
+
     def test_getitem_regression(self):
         s = Series(range(5), index=range(5))
         result = s[range(5)]
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index 4d18cc0e1..cc3824a73 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -1,13 +1,18 @@
-import matplotlib.pyplot as plt
-
 def scatter_matrix(data):
     pass
 
+def _gca():
+    import matplotlib.pyplot as plt
+    return plt.gca()
+
+def _gcf():
+    import matplotlib.pyplot as plt
+    return plt.gcf()
+
 def hist(data, column, by=None, ax=None, fontsize=None):
     keys, values = zip(*data.groupby(by)[column])
-
     if ax is None:
-        ax = plt.gca()
+        ax = _gca()
     ax.boxplot(values)
     ax.set_xticklabels(keys, rotation=0, fontsize=fontsize)
     return ax
@@ -23,7 +28,7 @@ def grouped_hist(data, column, by=None, ax=None, bins=50, log=False):
         ax.hist(group[column].dropna(), bins=bins)
     fig = _grouped_plot(plot_group, data, by=by, sharex=False,
                         sharey=False)
-    plt.subplots_adjust(bottom=0.15, top=0.9, left=0.1, right=0.9,
+    fig.subplots_adjust(bottom=0.15, top=0.9, left=0.1, right=0.9,
                         hspace=0.3, wspace=0.2)
     return fig
 
@@ -70,8 +75,8 @@ def boxplot(data, column=None, by=None, ax=None, fontsize=None,
         ax = axes
     else:
         if ax is None:
-            ax = plt.gca()
-
+            ax = _gca()
+        fig = ax.get_figure()
         data = data._get_numeric_data()
         if columns:
             cols = columns
@@ -82,7 +87,7 @@ def boxplot(data, column=None, by=None, ax=None, fontsize=None,
         ax.set_xticklabels(keys, rotation=rot, fontsize=fontsize)
         ax.grid(grid)
 
-    plt.subplots_adjust(bottom=0.15, top=0.9, left=0.1, right=0.9, wspace=0.2)
+    fig.subplots_adjust(bottom=0.15, top=0.9, left=0.1, right=0.9, wspace=0.2)
     return ax
 
 def _stringify(x):
@@ -98,6 +103,8 @@ def scatter_plot(data, x, y, by=None, ax=None):
     -------
     fig : matplotlib.Figure
     """
+    import matplotlib.pyplot as plt
+
     def plot_group(group, ax):
         xvals = group[x].values
         yvals = group[y].values
@@ -116,6 +123,8 @@ def scatter_plot(data, x, y, by=None, ax=None):
 
 def _grouped_plot(plotf, data, by=None, numeric_only=True, figsize=(10, 5),
                   sharex=True, sharey=True):
+    import matplotlib.pyplot as plt
+
     grouped = data.groupby(by)
     ngroups = len(grouped)
 
@@ -138,6 +147,8 @@ def _grouped_plot(plotf, data, by=None, numeric_only=True, figsize=(10, 5),
 
 def _grouped_plot_by_column(plotf, data, columns=None, by=None,
                             numeric_only=True, grid=False):
+    import matplotlib.pyplot as plt
+
     grouped = data.groupby(by)
     if columns is None:
         columns = data._get_numeric_data().columns - by
@@ -195,4 +206,4 @@ if __name__ == '__main__':
 
     fig = scatter_plot(sales2, 'squarefeet', 'price', by='zip')
 
-    plt.show()
+    # plt.show()
