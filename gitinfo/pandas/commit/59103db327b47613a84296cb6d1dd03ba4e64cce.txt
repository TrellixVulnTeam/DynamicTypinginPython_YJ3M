commit 59103db327b47613a84296cb6d1dd03ba4e64cce
Author: Jeff Reback <jeff@reback.net>
Date:   Sun Oct 18 13:50:44 2015 -0400

    WARN: more uncomparables of numeric array vs object

diff --git a/pandas/core/common.py b/pandas/core/common.py
index bdffd4aed..c2c50bce0 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -446,7 +446,7 @@ def mask_missing(arr, values_to_mask):
         if mask is None:
 
             # numpy elementwise comparison warning
-            if is_numeric_dtype(arr) and is_string_like(x):
+            if is_numeric_v_string_like(arr, x):
                 mask = False
             else:
                 mask = arr == x
@@ -458,7 +458,7 @@ def mask_missing(arr, values_to_mask):
         else:
 
             # numpy elementwise comparison warning
-            if is_numeric_dtype(arr) and is_string_like(x):
+            if is_numeric_v_string_like(arr, x):
                 mask |= False
             else:
                 mask |= arr == x
@@ -2538,6 +2538,27 @@ def is_datetime_or_timedelta_dtype(arr_or_dtype):
     return issubclass(tipo, (np.datetime64, np.timedelta64))
 
 
+def is_numeric_v_string_like(a, b):
+    """
+    numpy doesn't like to compare numeric arrays vs scalar string-likes
+
+    return a boolean result if this is the case for a,b or b,a
+
+    """
+    is_a_array = isinstance(a, np.ndarray)
+    is_b_array = isinstance(b, np.ndarray)
+
+    is_a_numeric_array = is_a_array and is_numeric_dtype(a)
+    is_b_numeric_array = is_b_array and is_numeric_dtype(b)
+
+    is_a_scalar_string_like = not is_a_array and is_string_like(a)
+    is_b_scalar_string_like = not is_b_array and is_string_like(b)
+
+    return (
+        is_a_numeric_array and is_b_scalar_string_like) or (
+        is_b_numeric_array and is_a_scalar_string_like
+        )
+
 def is_datetimelike_v_numeric(a, b):
     # return if we have an i8 convertible and numeric comparision
     if not hasattr(a,'dtype'):
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 436735233..d98121520 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -17,7 +17,7 @@ from pandas.core.common import (_possibly_downcast_to_dtype, isnull,
                                 is_datetime64tz_dtype, is_datetimetz, is_sparse,
                                 array_equivalent, _maybe_convert_string_to_object,
                                 is_categorical, needs_i8_conversion, is_datetimelike_v_numeric,
-                                is_string_like, is_internal_type)
+                                is_numeric_v_string_like, is_internal_type)
 from pandas.core.dtypes import DatetimeTZDtype
 
 from pandas.core.index import Index, MultiIndex, _ensure_index
@@ -1087,7 +1087,7 @@ class Block(PandasObject):
                 result = not func.__name__ == 'eq'
 
             # avoid numpy warning of elementwise comparisons to object
-            elif self.is_numeric and is_string_like(other):
+            elif is_numeric_v_string_like(values, other):
                 result = False
 
             else:
@@ -4259,11 +4259,16 @@ def _possibly_compare(a, b, op):
 
     # numpy deprecation warning to have i8 vs integer comparisions
     if is_datetimelike_v_numeric(a, b):
-        res = False
+        result = False
+
+    # numpy deprecation warning if comparing numeric vs string-like
+    elif is_numeric_v_string_like(a, b):
+        result = False
+
     else:
-        res = op(a, b)
+        result = op(a, b)
 
-    if np.isscalar(res) and (is_a_array or is_b_array):
+    if lib.isscalar(result) and (is_a_array or is_b_array):
         type_names = [type(a).__name__, type(b).__name__]
 
         if is_a_array:
@@ -4273,7 +4278,7 @@ def _possibly_compare(a, b, op):
             type_names[1] = 'ndarray(dtype=%s)' % b.dtype
 
         raise TypeError("Cannot compare types %r and %r" % tuple(type_names))
-    return res
+    return result
 
 
 def _concat_indexes(indexes):
