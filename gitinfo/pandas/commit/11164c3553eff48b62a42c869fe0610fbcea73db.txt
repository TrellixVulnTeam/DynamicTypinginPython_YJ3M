commit 11164c3553eff48b62a42c869fe0610fbcea73db
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Thu Feb 20 04:44:52 2020 -0800

    REF: misplaced Series.combine_first tests (#32111)

diff --git a/pandas/tests/series/methods/test_combine_first.py b/pandas/tests/series/methods/test_combine_first.py
index aed6425e5..1ee55fbe3 100644
--- a/pandas/tests/series/methods/test_combine_first.py
+++ b/pandas/tests/series/methods/test_combine_first.py
@@ -1,6 +1,9 @@
+from datetime import datetime
+
 import numpy as np
 
-from pandas import Period, Series, date_range, period_range
+import pandas as pd
+from pandas import Period, Series, date_range, period_range, to_datetime
 import pandas._testing as tm
 
 
@@ -17,3 +20,75 @@ class TestCombineFirst:
             result = a.combine_first(b)
             expected = Series([1, 9, 9, 4, 5, 9, 7], index=idx, dtype=np.float64)
             tm.assert_series_equal(result, expected)
+
+    def test_combine_first_name(self, datetime_series):
+        result = datetime_series.combine_first(datetime_series[:5])
+        assert result.name == datetime_series.name
+
+    def test_combine_first(self):
+        values = tm.makeIntIndex(20).values.astype(float)
+        series = Series(values, index=tm.makeIntIndex(20))
+
+        series_copy = series * 2
+        series_copy[::2] = np.NaN
+
+        # nothing used from the input
+        combined = series.combine_first(series_copy)
+
+        tm.assert_series_equal(combined, series)
+
+        # Holes filled from input
+        combined = series_copy.combine_first(series)
+        assert np.isfinite(combined).all()
+
+        tm.assert_series_equal(combined[::2], series[::2])
+        tm.assert_series_equal(combined[1::2], series_copy[1::2])
+
+        # mixed types
+        index = tm.makeStringIndex(20)
+        floats = Series(tm.randn(20), index=index)
+        strings = Series(tm.makeStringIndex(10), index=index[::2])
+
+        combined = strings.combine_first(floats)
+
+        tm.assert_series_equal(strings, combined.loc[index[::2]])
+        tm.assert_series_equal(floats[1::2].astype(object), combined.loc[index[1::2]])
+
+        # corner case
+        ser = Series([1.0, 2, 3], index=[0, 1, 2])
+        empty = Series([], index=[], dtype=object)
+        result = ser.combine_first(empty)
+        ser.index = ser.index.astype("O")
+        tm.assert_series_equal(ser, result)
+
+    def test_combine_first_dt64(self):
+
+        s0 = to_datetime(Series(["2010", np.NaN]))
+        s1 = to_datetime(Series([np.NaN, "2011"]))
+        rs = s0.combine_first(s1)
+        xp = to_datetime(Series(["2010", "2011"]))
+        tm.assert_series_equal(rs, xp)
+
+        s0 = to_datetime(Series(["2010", np.NaN]))
+        s1 = Series([np.NaN, "2011"])
+        rs = s0.combine_first(s1)
+        xp = Series([datetime(2010, 1, 1), "2011"])
+        tm.assert_series_equal(rs, xp)
+
+    def test_combine_first_dt_tz_values(self, tz_naive_fixture):
+        ser1 = pd.Series(
+            pd.DatetimeIndex(["20150101", "20150102", "20150103"], tz=tz_naive_fixture),
+            name="ser1",
+        )
+        ser2 = pd.Series(
+            pd.DatetimeIndex(["20160514", "20160515", "20160516"], tz=tz_naive_fixture),
+            index=[2, 3, 4],
+            name="ser2",
+        )
+        result = ser1.combine_first(ser2)
+        exp_vals = pd.DatetimeIndex(
+            ["20150101", "20150102", "20150103", "20160515", "20160516"],
+            tz=tz_naive_fixture,
+        )
+        exp = pd.Series(exp_vals, name="ser1")
+        tm.assert_series_equal(exp, result)
diff --git a/pandas/tests/series/test_api.py b/pandas/tests/series/test_api.py
index 33706c00c..3e877cf2f 100644
--- a/pandas/tests/series/test_api.py
+++ b/pandas/tests/series/test_api.py
@@ -85,10 +85,6 @@ class TestSeriesMisc:
             result = getattr(s, op)(cp)
             assert result.name is None
 
-    def test_combine_first_name(self, datetime_series):
-        result = datetime_series.combine_first(datetime_series[:5])
-        assert result.name == datetime_series.name
-
     def test_getitem_preserve_name(self, datetime_series):
         result = datetime_series[datetime_series > 0]
         assert result.name == datetime_series.name
diff --git a/pandas/tests/series/test_combine_concat.py b/pandas/tests/series/test_combine_concat.py
index 4cb471597..4afa083e9 100644
--- a/pandas/tests/series/test_combine_concat.py
+++ b/pandas/tests/series/test_combine_concat.py
@@ -1,10 +1,8 @@
-from datetime import datetime
-
 import numpy as np
 import pytest
 
 import pandas as pd
-from pandas import DataFrame, Series, to_datetime
+from pandas import DataFrame, Series
 import pandas._testing as tm
 
 
@@ -22,42 +20,6 @@ class TestSeriesCombine:
         expected = pd.Series([min(i * 10, 22) for i in range(5)])
         tm.assert_series_equal(result, expected)
 
-    def test_combine_first(self):
-        values = tm.makeIntIndex(20).values.astype(float)
-        series = Series(values, index=tm.makeIntIndex(20))
-
-        series_copy = series * 2
-        series_copy[::2] = np.NaN
-
-        # nothing used from the input
-        combined = series.combine_first(series_copy)
-
-        tm.assert_series_equal(combined, series)
-
-        # Holes filled from input
-        combined = series_copy.combine_first(series)
-        assert np.isfinite(combined).all()
-
-        tm.assert_series_equal(combined[::2], series[::2])
-        tm.assert_series_equal(combined[1::2], series_copy[1::2])
-
-        # mixed types
-        index = tm.makeStringIndex(20)
-        floats = Series(tm.randn(20), index=index)
-        strings = Series(tm.makeStringIndex(10), index=index[::2])
-
-        combined = strings.combine_first(floats)
-
-        tm.assert_series_equal(strings, combined.loc[index[::2]])
-        tm.assert_series_equal(floats[1::2].astype(object), combined.loc[index[1::2]])
-
-        # corner case
-        s = Series([1.0, 2, 3], index=[0, 1, 2])
-        empty = Series([], index=[], dtype=object)
-        result = s.combine_first(empty)
-        s.index = s.index.astype("O")
-        tm.assert_series_equal(s, result)
-
     def test_update(self):
         s = Series([1.5, np.nan, 3.0, 4.0, np.nan])
         s2 = Series([np.nan, 3.5, np.nan, 5.0])
@@ -156,24 +118,6 @@ class TestSeriesCombine:
                 result = pd.concat([Series(dtype=dtype), Series(dtype=dtype2)]).dtype
                 assert result.kind == expected
 
-    def test_combine_first_dt_tz_values(self, tz_naive_fixture):
-        ser1 = pd.Series(
-            pd.DatetimeIndex(["20150101", "20150102", "20150103"], tz=tz_naive_fixture),
-            name="ser1",
-        )
-        ser2 = pd.Series(
-            pd.DatetimeIndex(["20160514", "20160515", "20160516"], tz=tz_naive_fixture),
-            index=[2, 3, 4],
-            name="ser2",
-        )
-        result = ser1.combine_first(ser2)
-        exp_vals = pd.DatetimeIndex(
-            ["20150101", "20150102", "20150103", "20160515", "20160516"],
-            tz=tz_naive_fixture,
-        )
-        exp = pd.Series(exp_vals, name="ser1")
-        tm.assert_series_equal(exp, result)
-
     def test_concat_empty_series_dtypes(self):
 
         # booleans
@@ -250,17 +194,3 @@ class TestSeriesCombine:
         # TODO: release-note: concat sparse dtype
         expected = pd.SparseDtype("object")
         assert result.dtype == expected
-
-    def test_combine_first_dt64(self):
-
-        s0 = to_datetime(Series(["2010", np.NaN]))
-        s1 = to_datetime(Series([np.NaN, "2011"]))
-        rs = s0.combine_first(s1)
-        xp = to_datetime(Series(["2010", "2011"]))
-        tm.assert_series_equal(rs, xp)
-
-        s0 = to_datetime(Series(["2010", np.NaN]))
-        s1 = Series([np.NaN, "2011"])
-        rs = s0.combine_first(s1)
-        xp = Series([datetime(2010, 1, 1), "2011"])
-        tm.assert_series_equal(rs, xp)
