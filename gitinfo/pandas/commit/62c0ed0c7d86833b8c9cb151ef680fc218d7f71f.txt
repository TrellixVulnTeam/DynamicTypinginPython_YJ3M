commit 62c0ed0c7d86833b8c9cb151ef680fc218d7f71f
Author: topper-123 <contribute@tensortable.com>
Date:   Fri May 17 12:56:39 2019 +0000

    CLN: remove __unicode__ (#26432)

diff --git a/pandas/core/arrays/categorical.py b/pandas/core/arrays/categorical.py
index 6eff6d9ae..d25ccd1b1 100644
--- a/pandas/core/arrays/categorical.py
+++ b/pandas/core/arrays/categorical.py
@@ -2022,9 +2022,9 @@ class Categorical(ExtensionArray, PandasObject):
         result = formatter.to_string()
         return str(result)
 
-    def __unicode__(self):
+    def __str__(self):
         """
-        Unicode representation.
+        String representation.
         """
         _maxlen = 10
         if len(self._codes) > _maxlen:
diff --git a/pandas/core/arrays/sparse.py b/pandas/core/arrays/sparse.py
index 66ccd6848..2aaa00ff0 100644
--- a/pandas/core/arrays/sparse.py
+++ b/pandas/core/arrays/sparse.py
@@ -1823,7 +1823,7 @@ class SparseArray(PandasObject, ExtensionArray, ExtensionOpsMixin):
     # ----------
     # Formatting
     # -----------
-    def __unicode__(self):
+    def __str__(self):
         return '{self}\nFill: {fill}\n{index}'.format(
             self=printing.pprint_thing(self),
             fill=printing.pprint_thing(self.fill_value),
diff --git a/pandas/core/base.py b/pandas/core/base.py
index 5bccaeef6..1d0e7fc41 100644
--- a/pandas/core/base.py
+++ b/pandas/core/base.py
@@ -34,7 +34,7 @@ _indexops_doc_kwargs = dict(klass='IndexOpsMixin', inplace='',
 
 class StringMixin:
     """
-    Implements string methods so long as object defines a `__unicode__` method.
+    Implements string methods so long as object defines a `__str__` method.
     """
     # side note - this could be made into a metaclass if more than one
     #             object needs
@@ -42,23 +42,20 @@ class StringMixin:
     # ----------------------------------------------------------------------
     # Formatting
 
-    def __unicode__(self):
-        raise AbstractMethodError(self)
-
     def __str__(self):
         """
         Return a string representation for a particular Object
         """
-        return self.__unicode__()
+        raise AbstractMethodError(self)
 
     def __bytes__(self):
         """
-        Return a string representation for a particular object.
+        Return a bytes representation for a particular object.
         """
         from pandas._config import get_option
 
         encoding = get_option("display.encoding")
-        return self.__unicode__().encode(encoding, 'replace')
+        return str(self).encode(encoding, 'replace')
 
     def __repr__(self):
         """
@@ -76,7 +73,7 @@ class PandasObject(StringMixin, DirNamesMixin):
         """class constructor (for this class it's just `__class__`"""
         return self.__class__
 
-    def __unicode__(self):
+    def __str__(self):
         """
         Return a string representation for a particular object.
         """
diff --git a/pandas/core/computation/expr.py b/pandas/core/computation/expr.py
index cb9d537e6..628a2244d 100644
--- a/pandas/core/computation/expr.py
+++ b/pandas/core/computation/expr.py
@@ -734,7 +734,7 @@ class Expr(StringMixin):
     def __call__(self):
         return self.terms(self.env)
 
-    def __unicode__(self):
+    def __str__(self):
         return printing.pprint_thing(self.terms)
 
     def __len__(self):
diff --git a/pandas/core/computation/ops.py b/pandas/core/computation/ops.py
index a79b1d1e5..fd96739f4 100644
--- a/pandas/core/computation/ops.py
+++ b/pandas/core/computation/ops.py
@@ -67,7 +67,7 @@ class Term(StringMixin):
     def local_name(self):
         return self.name.replace(_LOCAL_TAG, '')
 
-    def __unicode__(self):
+    def __str__(self):
         return pprint_thing(self.name)
 
     def __call__(self, *args, **kwargs):
@@ -166,7 +166,7 @@ class Constant(Term):
     def name(self):
         return self.value
 
-    def __unicode__(self):
+    def __str__(self):
         # in python 2 str() of float
         # can truncate shorter than repr()
         return repr(self.name)
@@ -188,7 +188,7 @@ class Op(StringMixin):
     def __iter__(self):
         return iter(self.operands)
 
-    def __unicode__(self):
+    def __str__(self):
         """Print a generic n-ary operator and its operands using infix
         notation"""
         # recurse over the operands
@@ -506,7 +506,7 @@ class UnaryOp(Op):
         operand = self.operand(env)
         return self.func(operand)
 
-    def __unicode__(self):
+    def __str__(self):
         return pprint_thing('{0}({1})'.format(self.op, self.operand))
 
     @property
@@ -531,7 +531,7 @@ class MathCall(Op):
         with np.errstate(all='ignore'):
             return self.func.func(*operands)
 
-    def __unicode__(self):
+    def __str__(self):
         operands = map(str, self.operands)
         return pprint_thing('{0}({1})'.format(self.op, ','.join(operands)))
 
diff --git a/pandas/core/computation/pytables.py b/pandas/core/computation/pytables.py
index 7365eea26..2a762b5ee 100644
--- a/pandas/core/computation/pytables.py
+++ b/pandas/core/computation/pytables.py
@@ -230,7 +230,7 @@ class BinOp(ops.BinOp):
 
 class FilterBinOp(BinOp):
 
-    def __unicode__(self):
+    def __str__(self):
         return pprint_thing("[Filter : [{lhs}] -> [{op}]"
                             .format(lhs=self.filter[0], op=self.filter[1]))
 
@@ -302,7 +302,7 @@ class JointFilterBinOp(FilterBinOp):
 
 class ConditionBinOp(BinOp):
 
-    def __unicode__(self):
+    def __str__(self):
         return pprint_thing("[Condition : [{cond}]]"
                             .format(cond=self.condition))
 
@@ -549,7 +549,7 @@ class Expr(expr.Expr):
                                         encoding=encoding)
             self.terms = self.parse()
 
-    def __unicode__(self):
+    def __str__(self):
         if self.terms is not None:
             return pprint_thing(self.terms)
         return pprint_thing(self.expr)
diff --git a/pandas/core/computation/scope.py b/pandas/core/computation/scope.py
index 185b5dd36..729acdc52 100644
--- a/pandas/core/computation/scope.py
+++ b/pandas/core/computation/scope.py
@@ -135,7 +135,7 @@ class Scope(StringMixin):
         self.resolvers = DeepChainMap(*resolvers)
         self.temps = {}
 
-    def __unicode__(self):
+    def __str__(self):
         scope_keys = _get_pretty_string(list(self.scope.keys()))
         res_keys = _get_pretty_string(list(self.resolvers.keys()))
         unicode_str = '{name}(scope={scope_keys}, resolvers={res_keys})'
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 6ec36c62f..76fd39334 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -610,9 +610,9 @@ class DataFrame(NDFrame):
         return info_repr_option and not (self._repr_fits_horizontal_() and
                                          self._repr_fits_vertical_())
 
-    def __unicode__(self):
+    def __str__(self):
         """
-        Return a unicode string representation for a particular DataFrame.
+        Return a string representation for a particular DataFrame.
         """
         buf = StringIO("")
         if self._info_repr():
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 499915320..f105e7f51 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -2022,8 +2022,8 @@ class NDFrame(PandasObject, SelectionMixin):
     # ----------------------------------------------------------------------
     # Rendering Methods
 
-    def __unicode__(self):
-        # unicode representation based upon iterating over self
+    def __str__(self):
+        # string representation based upon iterating over self
         # (since, by definition, `PandasContainers` are iterable)
         prepr = '[%s]' % ','.join(map(pprint_thing, self))
         return '%s(%s)' % (self.__class__.__name__, prepr)
diff --git a/pandas/core/groupby/groupby.py b/pandas/core/groupby/groupby.py
index ae28c23b8..4e9e3b496 100644
--- a/pandas/core/groupby/groupby.py
+++ b/pandas/core/groupby/groupby.py
@@ -373,8 +373,8 @@ class _GroupBy(PandasObject, SelectionMixin):
     def __len__(self):
         return len(self.groups)
 
-    def __unicode__(self):
-        # TODO: Better unicode/repr for GroupBy object
+    def __str__(self):
+        # TODO: Better str/repr for GroupBy object
         return object.__repr__(self)
 
     def _assure_grouper(self):
diff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py
index bb12c2bc4..dd3717813 100644
--- a/pandas/core/indexes/base.py
+++ b/pandas/core/indexes/base.py
@@ -933,9 +933,9 @@ class Index(IndexOpsMixin, PandasObject):
     # --------------------------------------------------------------------
     # Rendering Methods
 
-    def __unicode__(self):
+    def __str__(self):
         """
-        Return a unicode string representation for this object.
+        Return a string representation for this object.
         """
         klass = self.__class__.__name__
         data = self._format_data()
diff --git a/pandas/core/indexes/frozen.py b/pandas/core/indexes/frozen.py
index 213214713..60e4253e3 100644
--- a/pandas/core/indexes/frozen.py
+++ b/pandas/core/indexes/frozen.py
@@ -108,7 +108,7 @@ class FrozenList(PandasObject, list):
         raise TypeError("'%s' does not support mutable operations." %
                         self.__class__.__name__)
 
-    def __unicode__(self):
+    def __str__(self):
         return pprint_thing(self, quote_strings=True,
                             escape_chars=('\t', '\r', '\n'))
 
@@ -149,9 +149,9 @@ class FrozenNDArray(PandasObject, np.ndarray):
         arr = self.view(np.ndarray).copy()
         return arr
 
-    def __unicode__(self):
+    def __str__(self):
         """
-        Return a unicode string representation for this object.
+        Return a string representation for this object.
         """
         prepr = pprint_thing(self, escape_chars=('\t', '\r', '\n'),
                              quote_strings=True)
diff --git a/pandas/core/internals/blocks.py b/pandas/core/internals/blocks.py
index 0c49ebb55..7e8881f50 100644
--- a/pandas/core/internals/blocks.py
+++ b/pandas/core/internals/blocks.py
@@ -232,7 +232,7 @@ class Block(PandasObject):
         return make_block(values, placement=placement, ndim=ndim,
                           klass=self.__class__, dtype=dtype)
 
-    def __unicode__(self):
+    def __str__(self):
 
         # don't want to print out all of the items here
         name = pprint_thing(self.__class__.__name__)
diff --git a/pandas/core/internals/managers.py b/pandas/core/internals/managers.py
index 7077b1556..e5abac5d7 100644
--- a/pandas/core/internals/managers.py
+++ b/pandas/core/internals/managers.py
@@ -291,7 +291,7 @@ class BlockManager(PandasObject):
     def __len__(self):
         return len(self.items)
 
-    def __unicode__(self):
+    def __str__(self):
         output = pprint_thing(self.__class__.__name__)
         for i, ax in enumerate(self.axes):
             if i == 0:
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 95a979c36..b6b957c54 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -340,9 +340,9 @@ class Panel(NDFrame):
     # ----------------------------------------------------------------------
     # Magic methods
 
-    def __unicode__(self):
+    def __str__(self):
         """
-        Return a unicode string representation for a particular Panel.
+        Return a string representation for a particular Panel.
         """
 
         class_name = str(self.__class__)
diff --git a/pandas/core/resample.py b/pandas/core/resample.py
index 7bf0c56c4..874973846 100644
--- a/pandas/core/resample.py
+++ b/pandas/core/resample.py
@@ -79,7 +79,7 @@ class Resampler(_GroupBy):
         if self.groupby is not None:
             self.groupby._set_grouper(self._convert_obj(obj), sort=True)
 
-    def __unicode__(self):
+    def __str__(self):
         """
         Provide a nice str repr of our rolling object.
         """
diff --git a/pandas/core/series.py b/pandas/core/series.py
index f0b674596..03745eb33 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1387,9 +1387,9 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
     # ----------------------------------------------------------------------
     # Rendering Methods
 
-    def __unicode__(self):
+    def __str__(self):
         """
-        Return a unicode string representation for a particular DataFrame.
+        Return a string representation for a particular Series.
         """
         buf = StringIO("")
         width, height = get_terminal_size()
diff --git a/pandas/core/sparse/series.py b/pandas/core/sparse/series.py
index fc14b20f0..ae1c94e13 100644
--- a/pandas/core/sparse/series.py
+++ b/pandas/core/sparse/series.py
@@ -217,9 +217,9 @@ class SparseSeries(Series):
         return SparseArray(self.values, sparse_index=self.sp_index,
                            fill_value=fill_value, kind=kind, copy=copy)
 
-    def __unicode__(self):
+    def __str__(self):
         # currently, unicode is same as repr...fixes infinite loop
-        series_rep = Series.__unicode__(self)
+        series_rep = Series.__str__(self)
         rep = '{series}\n{index!r}'.format(series=series_rep,
                                            index=self.sp_index)
         return rep
diff --git a/pandas/core/window.py b/pandas/core/window.py
index 2d7fdbeff..cc74a8fa2 100644
--- a/pandas/core/window.py
+++ b/pandas/core/window.py
@@ -156,7 +156,7 @@ class _Window(PandasObject, SelectionMixin):
     def _window_type(self):
         return self.__class__.__name__
 
-    def __unicode__(self):
+    def __str__(self):
         """
         Provide a nice str repr of our rolling object.
         """
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index b0a00f25c..189c783bb 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -519,7 +519,7 @@ class HDFStore(StringMixin):
     def __len__(self):
         return len(self.groups())
 
-    def __unicode__(self):
+    def __str__(self):
         return '{type}\nFile path: {path}\n'.format(
             type=type(self), path=pprint_thing(self._path))
 
@@ -1586,7 +1586,7 @@ class IndexCol(StringMixin):
         self.table = table
         return self
 
-    def __unicode__(self):
+    def __str__(self):
         temp = tuple(
             map(pprint_thing,
                     (self.name,
@@ -1880,7 +1880,7 @@ class DataCol(IndexCol):
         self.set_data(data)
         self.set_metadata(metadata)
 
-    def __unicode__(self):
+    def __str__(self):
         temp = tuple(
             map(pprint_thing,
                     (self.name,
@@ -2335,7 +2335,7 @@ class Fixed(StringMixin):
     def format_type(self):
         return 'fixed'
 
-    def __unicode__(self):
+    def __str__(self):
         """ return a pretty representation of myself """
         self.infer_axes()
         s = self.shape
@@ -3076,7 +3076,7 @@ class Table(Fixed):
     def format_type(self):
         return 'table'
 
-    def __unicode__(self):
+    def __str__(self):
         """ return a pretty representatgion of myself """
         self.infer_axes()
         dc = ",dc->[{columns}]".format(columns=(','.join(
diff --git a/pandas/io/stata.py b/pandas/io/stata.py
index c59e21678..27ddc4ef6 100644
--- a/pandas/io/stata.py
+++ b/pandas/io/stata.py
@@ -804,7 +804,7 @@ class StataMissingValue(StringMixin):
     value = property(lambda self: self._value,
                      doc='The binary representation of the missing value.')
 
-    def __unicode__(self):
+    def __str__(self):
         return self.string
 
     def __repr__(self):
diff --git a/pandas/tests/extension/decimal/test_decimal.py b/pandas/tests/extension/decimal/test_decimal.py
index 87f67b984..97fae41bc 100644
--- a/pandas/tests/extension/decimal/test_decimal.py
+++ b/pandas/tests/extension/decimal/test_decimal.py
@@ -387,5 +387,6 @@ def test_formatting_values_deprecated():
 
     ser = pd.Series(DecimalArray2([decimal.Decimal('1.0')]))
 
-    with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=True):
+    with tm.assert_produces_warning(DeprecationWarning,
+                                    check_stacklevel=False):
         repr(ser)
diff --git a/pandas/tests/indexes/datetimes/test_formats.py b/pandas/tests/indexes/datetimes/test_formats.py
index ddc79a5aa..37bd68176 100644
--- a/pandas/tests/indexes/datetimes/test_formats.py
+++ b/pandas/tests/indexes/datetimes/test_formats.py
@@ -62,7 +62,7 @@ class TestDatetimeIndexRendering:
         dr = pd.date_range(start='1/1/2012', periods=3)
         repr(dr)
 
-    @pytest.mark.parametrize('method', ['__repr__', '__unicode__', '__str__'])
+    @pytest.mark.parametrize('method', ['__repr__', '__str__'])
     def test_dti_representation(self, method):
         idxs = []
         idxs.append(DatetimeIndex([], freq='D'))
diff --git a/pandas/tests/indexes/period/test_formats.py b/pandas/tests/indexes/period/test_formats.py
index fbfafd8b4..e1d1dd307 100644
--- a/pandas/tests/indexes/period/test_formats.py
+++ b/pandas/tests/indexes/period/test_formats.py
@@ -61,7 +61,7 @@ class TestPeriodIndexRendering:
             '2000-01-03  3')
         assert result == expected
 
-    @pytest.mark.parametrize('method', ['__repr__', '__unicode__', '__str__'])
+    @pytest.mark.parametrize('method', ['__repr__', '__str__'])
     def test_representation(self, method):
         # GH#7601
         idx1 = PeriodIndex([], freq='D')
diff --git a/pandas/tests/indexes/timedeltas/test_formats.py b/pandas/tests/indexes/timedeltas/test_formats.py
index bc0368534..992e55704 100644
--- a/pandas/tests/indexes/timedeltas/test_formats.py
+++ b/pandas/tests/indexes/timedeltas/test_formats.py
@@ -5,7 +5,7 @@ from pandas import TimedeltaIndex
 
 
 class TestTimedeltaIndexRendering:
-    @pytest.mark.parametrize('method', ['__repr__', '__unicode__', '__str__'])
+    @pytest.mark.parametrize('method', ['__repr__', '__str__'])
     def test_representation(self, method):
         idx1 = TimedeltaIndex([], freq='D')
         idx2 = TimedeltaIndex(['1 days'], freq='D')
diff --git a/pandas/tests/series/test_repr.py b/pandas/tests/series/test_repr.py
index 5c41ce360..032c730fe 100644
--- a/pandas/tests/series/test_repr.py
+++ b/pandas/tests/series/test_repr.py
@@ -204,7 +204,7 @@ class TestCategoricalRepr:
             name = 'San Sebastián'
             state = 'PR'
 
-            def __unicode__(self):
+            def __str__(self):
                 return self.name + ', ' + self.state
 
         cat = pd.Categorical([County() for _ in range(61)])
@@ -219,7 +219,7 @@ class TestCategoricalRepr:
         exp = ("0    1\n1    2\n2    3\n3    4\n" +
                "dtype: category\nCategories (4, int64): [1, 2, 3, 4]")
 
-        assert exp == a.__unicode__()
+        assert exp == a.__str__()
 
         a = Series(Categorical(["a", "b"] * 25))
         exp = ("0     a\n1     b\n" + "     ..\n" + "48    a\n49    b\n" +
@@ -231,7 +231,7 @@ class TestCategoricalRepr:
         a = Series(Categorical(["a", "b"], categories=levs, ordered=True))
         exp = ("0    a\n1    b\n" + "dtype: category\n"
                "Categories (26, object): [a < b < c < d ... w < x < y < z]")
-        assert exp == a.__unicode__()
+        assert exp == a.__str__()
 
     def test_categorical_series_repr(self):
         s = Series(Categorical([1, 2, 3]))
