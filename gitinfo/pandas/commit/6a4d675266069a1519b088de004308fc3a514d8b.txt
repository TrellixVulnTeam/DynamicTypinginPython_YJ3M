commit 6a4d675266069a1519b088de004308fc3a514d8b
Author: Skipper Seabold <jsseabold@gmail.com>
Date:   Tue May 14 17:54:33 2013 -0400

    REF: Factor -> Categorical.

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 5b2dc6dd9..619020843 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1659,8 +1659,8 @@ class DataFrame(NDFrame):
         -------
         converted : DataFrame
         """
-        return self._constructor(self._data.convert(convert_dates=convert_dates, 
-                                                    convert_numeric=convert_numeric, 
+        return self._constructor(self._data.convert(convert_dates=convert_dates,
+                                                    convert_numeric=convert_numeric,
                                                     copy=copy))
 
     #----------------------------------------------------------------------
@@ -3330,7 +3330,7 @@ class DataFrame(NDFrame):
             a reference to the filled object, which is self if inplace=True
         limit : int, default None
             Maximum size gap to forward or backward fill
-        downcast : dict, default is None, a dict of item->dtype of what to 
+        downcast : dict, default is None, a dict of item->dtype of what to
             downcast if possible
 
         See also
@@ -3380,7 +3380,7 @@ class DataFrame(NDFrame):
                     result[k].fillna(v, inplace=True)
                 return result
             else:
-                new_data = self._data.fillna(value, inplace=inplace, 
+                new_data = self._data.fillna(value, inplace=inplace,
                                              downcast=downcast)
 
         if inplace:
@@ -3791,8 +3791,8 @@ class DataFrame(NDFrame):
             result[col] = arr
 
         # convert_objects just in case
-        return self._constructor(result, 
-                                 index=new_index, 
+        return self._constructor(result,
+                                 index=new_index,
                                  columns=new_columns).convert_objects(
             convert_dates=True,
             copy=False)
@@ -3825,7 +3825,7 @@ class DataFrame(NDFrame):
                 y_values = y_values.view('i8')
             else:
                 mask = isnull(x_values)
-            
+
             return expressions.where(mask, y_values, x_values, raise_on_error=True)
 
         return self.combine(other, combiner, overwrite=False)
@@ -5406,11 +5406,11 @@ def group_agg(values, bounds, f):
 
 def factor_agg(factor, vec, func):
     """
-    Aggregate array based on Factor
+    Aggregate array based on Categorical
 
     Parameters
     ----------
-    factor : Factor
+    factor : Categorical
         length n
     vec : sequence
         length n
@@ -5419,7 +5419,11 @@ def factor_agg(factor, vec, func):
 
     Returns
     -------
-    ndarray corresponding to Factor levels
+    ndarray corresponding to factor levels
+
+    See Also
+    --------
+    pandas.Categorical
     """
     indexer = np.argsort(factor.labels)
     unique_labels = np.arange(len(factor.levels))
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 44b62991c..a19011d09 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -10,7 +10,7 @@ from pandas.core.common import (PandasError, _mut_exclusive,
                                 _try_sort, _default_index,
                                 _infer_dtype_from_scalar,
                                 notnull)
-from pandas.core.categorical import Factor
+from pandas.core.categorical import Categorical
 from pandas.core.index import (Index, MultiIndex, _ensure_index,
                                _get_combined_index)
 from pandas.core.indexing import _maybe_droplevels, _is_list_like
@@ -82,8 +82,8 @@ def panel_index(time, panels, names=['time', 'panel']):
                 (1962, 'C')], dtype=object)
     """
     time, panels = _ensure_like_indices(time, panels)
-    time_factor = Factor.from_array(time)
-    panel_factor = Factor.from_array(panels)
+    time_factor = Categorical.from_array(time)
+    panel_factor = Categorical.from_array(panels)
 
     labels = [time_factor.labels, panel_factor.labels]
     levels = [time_factor.levels, panel_factor.levels]
diff --git a/pandas/core/reshape.py b/pandas/core/reshape.py
index 8595e2a91..9f67094cf 100644
--- a/pandas/core/reshape.py
+++ b/pandas/core/reshape.py
@@ -749,9 +749,9 @@ def make_axis_dummies(frame, axis='minor', transform=None):
     axis : {'major', 'minor'}, default 'minor'
     transform : function, default None
         Function to apply to axis labels first. For example, to
-        get "day of week" dummies in a time series regression 
+        get "day of week" dummies in a time series regression
         you might call::
-            
+
             make_axis_dummies(panel, axis='major',
                               transform=lambda d: d.weekday())
     Returns
@@ -810,6 +810,6 @@ def block2d_to_blocknd(values, items, shape, labels, ref_items=None):
 
 
 def factor_indexer(shape, labels):
-    """ given a tuple of shape and a list of Factor lables, return the expanded label indexer """
+    """ given a tuple of shape and a list of Categorical labels, return the expanded label indexer """
     mult = np.array(shape)[::-1].cumprod()[::-1]
     return com._ensure_platform_int(np.sum(np.array(labels).T * np.append(mult, [1]), axis=1).T)
diff --git a/pandas/tools/merge.py b/pandas/tools/merge.py
index 7f05a045e..a9428d472 100644
--- a/pandas/tools/merge.py
+++ b/pandas/tools/merge.py
@@ -5,7 +5,7 @@ SQL-style merge routines
 import itertools
 import numpy as np
 
-from pandas.core.categorical import Factor
+from pandas.core.categorical import Categorical
 from pandas.core.frame import DataFrame, _merge_doc
 from pandas.core.generic import NDFrame
 from pandas.core.groupby import get_group_index
@@ -1190,7 +1190,7 @@ def _make_concat_multiindex(indexes, keys, levels=None, names=None):
             names = [None] * len(zipped)
 
         if levels is None:
-            levels = [Factor.from_array(zp).levels for zp in zipped]
+            levels = [Categorical.from_array(zp).levels for zp in zipped]
         else:
             levels = [_ensure_index(x) for x in levels]
     else:
@@ -1228,7 +1228,7 @@ def _make_concat_multiindex(indexes, keys, levels=None, names=None):
             levels.extend(concat_index.levels)
             label_list.extend(concat_index.labels)
         else:
-            factor = Factor.from_array(concat_index)
+            factor = Categorical.from_array(concat_index)
             levels.append(factor.levels)
             label_list.append(factor.labels)
 
