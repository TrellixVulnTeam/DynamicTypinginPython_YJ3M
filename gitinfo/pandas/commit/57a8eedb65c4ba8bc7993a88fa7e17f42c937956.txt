commit 57a8eedb65c4ba8bc7993a88fa7e17f42c937956
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Apr 29 03:18:48 2010 +0000

    unit tests
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@164 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index cf7e56130..fcddcb5e3 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -46,6 +46,18 @@ class Panel(Picklable):
     _values = None
     factors = None
 
+    __add__ = _arith_method(operator.add, '__add__')
+    __sub__ = _arith_method(operator.sub, '__sub__')
+    __mul__ = _arith_method(operator.mul, '__mul__')
+    __div__ = _arith_method(operator.div, '__div__')
+    __pow__ = _arith_method(operator.pow, '__pow__')
+
+    __radd__ = _arith_method(operator.add, '__radd__')
+    __rmul__ = _arith_method(operator.mul, '__rmul__')
+    __rsub__ = _arith_method(lambda x, y: y - x, '__rsub__')
+    __rdiv__ = _arith_method(lambda x, y: y / x, '__rdiv__')
+    __rpow__ = _arith_method(lambda x, y: y ** x, '__rpow__')
+
     def __repr__(self):
         class_name = str(self.__class__)
 
@@ -421,18 +433,6 @@ class WidePanel(Panel):
             return WidePanel(newValues, self.items, self.major_axis,
                              self.minor_axis)
 
-    __add__ = _arith_method(operator.add, '__add__')
-    __sub__ = _arith_method(operator.sub, '__sub__')
-    __mul__ = _arith_method(operator.mul, '__mul__')
-    __div__ = _arith_method(operator.div, '__div__')
-    __pow__ = _arith_method(operator.pow, '__pow__')
-
-    __radd__ = _arith_method(operator.add, '__radd__')
-    __rmul__ = _arith_method(operator.mul, '__rmul__')
-    __rsub__ = _arith_method(lambda x, y: y - x, '__rsub__')
-    __rdiv__ = _arith_method(lambda x, y: y / x, '__rdiv__')
-    __rpow__ = _arith_method(lambda x, y: y ** x, '__rpow__')
-
     def __neg__(self):
         return WidePanel(-self.values, self.items, self.major_axis,
                           self.minor_axis)
@@ -942,7 +942,7 @@ class WidePanel(Panel):
 
 
 def _long_arith_method(op, name):
-    def f(self, other, axis='major'):
+    def f(self, other, axis='items'):
         """
         Wrapper method for %s
 
@@ -1157,19 +1157,31 @@ class LongPanel(Panel):
         self.index = index
         self.values = _unpickle_array(vals)
 
-    def _combine(self, other, func, axis=0):
+    def _combine(self, other, func, axis='items'):
         if isinstance(other, DataFrame):
             return self._combineFrame(other, func, axis=axis)
         elif isinstance(other, Panel):
             return self._combinePanel(other, func)
         elif np.isscalar(other):
-            pass
+            return LongPanel(func(self.values, other), self.items,
+                             self.index, factors=self.factors)
 
-    def _combineFrame(self, other, func, axis=0):
-        wide = self.toWide()
+    def _combineFrame(self, other, func, axis='items'):
+        """
+        Arithmetic op
 
-        result = wide._combineFrame(other, func, axis=axis)
+        Parameters
+        ----------
+        other : DataFrame
+        func : function
+        axis : int / string
 
+        Returns
+        -------
+        y : LongPanel
+        """
+        wide = self.toWide()
+        result = wide._combineFrame(other, func, axis=axis)
         return result.toLong()
 
     def _combinePanel(self, other, func):
diff --git a/pandas/core/tests/test_panel.py b/pandas/core/tests/test_panel.py
index 75892a02c..d044cbd0b 100644
--- a/pandas/core/tests/test_panel.py
+++ b/pandas/core/tests/test_panel.py
@@ -642,17 +642,24 @@ class TestLongPanel(unittest.TestCase):
 
         # check exceptions raised
         lp = self.panel.filter(['ItemA', 'ItemB'])
-        lp2 = self.panel.filter(['ItemC', 'ItemD'])
-        self.assertRaises(Exception, lp.__setitem__, lp2)
+        lp2 = self.panel.filter(['ItemC', 'ItemE'])
+        self.assertRaises(Exception, lp.__setitem__, 'foo', lp2)
 
     def test_combineFrame(self):
-        pass
+        wp = self.panel.toWide()
+        result = self.panel.add(wp['ItemA'])
+        assert_frame_equal(result.toWide()['ItemA'], wp['ItemA'] * 2)
 
     def test_combinePanel(self):
-        pass
+        wp = self.panel.toWide()
+        result = self.panel.add(self.panel)
+        wide_result = result.toWide()
+        assert_frame_equal(wp['ItemA'] * 2, wide_result['ItemA'])
 
     def test_operators(self):
-        pass
+        wp = self.panel.toWide()
+        result = (self.panel + 1).toWide()
+        assert_frame_equal(wp['ItemA'] + 1, result['ItemA'])
 
     def test_sort(self):
         def is_sorted(arr):
