commit 4f72f7bb95c8356c5437a1d4e99235f4f72352d2
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Jul 30 23:50:10 2011 -0400

    ENH: stack/unstack working. need to fix to_long_mixed test still

diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index c2e27a906..8d48de6cc 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -1,4 +1,4 @@
-"""
+sfromDict"""
 Contains data structures designed for manipulating panel (3-dimensional) data
 """
 # pylint: disable=E1103,W0231,W0212,W0621
@@ -646,7 +646,7 @@ class WidePanel(Panel, NDFrame):
         I, N, K = self.shape
 
         if filter_observations:
-            mask = np.isfinite(self.values).all(axis=0)
+            mask = common.notnull(self.values).all(axis=0)
             # size = mask.sum()
             selector = mask.ravel()
         else:
@@ -1106,19 +1106,33 @@ class LongPanel(Panel, DataFrame):
         -------
         WidePanel
         """
-        I, N, K = self.shape
-
-        values = np.empty((I, N, K), dtype=self.values.dtype)
-
         mask = make_mask(self.index)
-        notmask = -mask
+        if self._data.is_mixed_dtype():
+            return self._to_wide_mixed(mask)
+        else:
+            return self._to_wide_homogeneous(mask)
 
+    def _to_wide_homogeneous(self, mask):
+        values = np.empty(self.shape, dtype=self.values.dtype)
+        values.fill(np.nan)
         for i in xrange(len(self.items)):
             values[i].flat[mask] = self.values[:, i]
-            values[i].flat[notmask] = np.NaN
 
         return WidePanel(values, self.items, self.major_axis, self.minor_axis)
 
+    def _to_wide_mixed(self, mask):
+        _, N, K = self.shape
+
+        # TODO: make much more efficient
+
+        data = {}
+        for i, item in enumerate(self.items):
+            values = np.empty((N, K), dtype=self.values.dtype)
+            values.ravel()[mask] = self.values[:, i]
+            data[item] = DataFrame(values, index=self.major_axis,
+                                   columns=self.minor_axis)
+        return WidePanel.from_dict(data)
+
     toWide = to_wide
 
     def toCSV(self, path):
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 4b3cc7552..b22bebe29 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1540,24 +1540,26 @@ def unstack(values, index, level=-1):
     to_sort = labs[:v] + labs[v+1:] + [labs[v]]
     indexer = np.lexsort(to_sort[::-1])
 
-    sorted_labels = [l.take(indexer) for l in to_sort[:-1]]
+    sorted_labels = [l.take(indexer) for l in to_sort]
     new_levels = list(index.levels)
     columns = new_levels.pop(v)
 
+    sorted_values = values.take(indexer)
+
     lshape = index.levshape
     full_shape = np.prod(lshape[:v] + lshape[v+1:]), lshape[v]
 
     # make the mask
     group_index = sorted_labels[0]
     prev_levsize = len(new_levels[0])
-    for ilev, ilab in zip(new_levels[1:], sorted_labels[1:]):
+    for ilev, ilab in zip(new_levels[1:], sorted_labels[1:-1]):
         group_index = prev_levsize * ilab
         prev_levsize = len(ilev)
 
     group_mask = np.zeros(full_shape[0], dtype=bool)
     group_mask.put(group_index, True)
 
-    selector = labs[v] + lshape[v] * group_index
+    selector = sorted_labels[-1] + lshape[v] * group_index
     mask = np.zeros(np.prod(full_shape), dtype=bool)
     mask.put(selector, True)
 
@@ -1566,7 +1568,7 @@ def unstack(values, index, level=-1):
     compressor = group_index.searchsorted(unique_groups)
 
     result_labels = []
-    for cur in sorted_labels:
+    for cur in sorted_labels[:-1]:
         # bit of a kludgy way to get at the label
         # labels = np.empty(full_shape, dtype=np.int32)
         # labels.fill(-1)
@@ -1578,7 +1580,7 @@ def unstack(values, index, level=-1):
     # place the values
     new_values = np.empty(full_shape, dtype=values.dtype)
     new_values.fill(np.nan)
-    new_values.ravel()[mask] = values
+    new_values.ravel()[mask] = sorted_values
     new_values = new_values.take(unique_groups, axis=0)
 
     # construct the new index
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 17c2ed852..345d85f18 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -305,12 +305,11 @@ class TestGroupBy(unittest.TestCase):
             expected = WidePanel.fromDict(expected).swapaxes(0, 1)
 
             # a little bit crude
-            # TODO: fix when have hierarchical Index
             for col in ['C', 'D']:
                 result_col = op(grouped[col])
                 exp = expected[col]
-                pivoted = result1.pivot('A', 'B', col)
-                pivoted2 = result_col.pivot('A', 'B', col)
+                pivoted = result1[col].unstack()
+                pivoted2 = result_col[col].unstack()
                 assert_frame_equal(pivoted.reindex_like(exp), exp)
                 assert_frame_equal(pivoted2.reindex_like(exp), exp)
 
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index ff71b7baa..8fc24f644 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -238,11 +238,10 @@ class TestMultiIndex(unittest.TestCase):
         # inconsistent
         major_labels = np.array([0, 0, 1, 1, 1, 2, 2, 3, 3])
         minor_labels = np.array([0, 1, 0, 1, 1, 0, 1, 0, 1])
+        index = MultiIndex(levels=[major_axis, minor_axis],
+                           labels=[major_labels, minor_labels])
 
-        self.assertRaises(Exception, MultiIndex,
-                          levels=[major_axis, minor_axis],
-                          labels=[major_labels, minor_labels])
-
+        self.assertRaises(Exception, getattr, index, 'indexMap')
 
     def test_truncate(self):
         result = self.index.truncate(before=1)
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 423e9be9e..ff2bab623 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -601,11 +601,14 @@ class TestWidePanel(unittest.TestCase, PanelTests,
         assert_panel_equal(unfiltered.to_wide(), self.panel)
 
     def test_to_long_mixed(self):
-        self.panel['str'] = 'foo'
-        self.panel['bool'] = self.panel['ItemA'] > 0
+        panel = self.panel.fillna(0)
+        panel['str'] = 'foo'
+        panel['bool'] = panel['ItemA'] > 0
 
-        lp = self.panel.to_long()
-        self.assert_(np.array_equal(lp['bool'], self.panel['bool']))
+        lp = panel.to_long()
+        wp = lp.to_wide()
+        self.assertEqual(wp['bool'].values.dtype, np.bool_)
+        assert_frame_equal(wp['bool'], panel['bool'])
 
     def test_filter(self):
         pass
@@ -724,7 +727,7 @@ class TestLongPanel(unittest.TestCase):
 
     def test_setitem(self):
         self.panel['ItemE'] = self.panel['ItemA']
-        self.panel['ItemF'] = 1
+        self.panel['ItemF'] = 1.
 
         wp = self.panel.to_wide()
         assert_frame_equal(wp['ItemA'], wp['ItemE'])
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 136649596..dc8cab886 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -9,6 +9,7 @@ from numpy import nan
 import numpy as np
 
 from pandas import Index, Series, TimeSeries, DataFrame, isnull
+from pandas.core.index import MultiIndex
 import pandas.core.datetools as datetools
 from pandas.util.testing import assert_series_equal, assert_almost_equal
 import pandas.util.testing as common
@@ -945,6 +946,25 @@ class TestSeries(unittest.TestCase):
         assert_series_equal(x[1:], expected[1:])
         self.assert_(np.isnan(x[0]), np.isnan(expected[0]))
 
+    def test_unstack(self):
+        from numpy import nan
+        from pandas.util.testing import assert_frame_equal
+
+        index = MultiIndex(levels=[['bar', 'foo'], ['one', 'three', 'two']],
+                           labels=[[1, 1, 0, 0], [0, 1, 0, 2]])
+
+        s = Series(np.arange(4.), index=index)
+        unstacked = s.unstack()
+
+        expected = DataFrame([[2., nan, 3.], [0., 1., nan]],
+                             index=['bar', 'foo'],
+                             columns=['one', 'three', 'two'])
+
+        assert_frame_equal(unstacked, expected)
+
+        unstacked = s.unstack(level=0)
+        assert_frame_equal(unstacked, expected.T)
+
 #-------------------------------------------------------------------------------
 # TimeSeries-specific
 
