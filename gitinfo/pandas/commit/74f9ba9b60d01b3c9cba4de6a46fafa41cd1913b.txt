commit 74f9ba9b60d01b3c9cba4de6a46fafa41cd1913b
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Dec 9 03:08:38 2009 +0000

    a little more Series test coverage
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@83 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/series.py b/pandas/core/series.py
index 245b3acc0..e6a1cb99e 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -656,7 +656,7 @@ class Series(np.ndarray, Picklable, Groupable):
         """
         return Series([func(x) for x in self], index=self.index)
 
-    def plot(self, label=None, kind='line', **kwds):
+    def plot(self, label=None, kind='line', **kwds): # pragma: no cover
         """
         Plot the input series with the index on the x-axis using
         matplotlib / pylab.
@@ -971,8 +971,10 @@ class Series(np.ndarray, Picklable, Groupable):
         """
         if isinstance(other, dict):
             other = Series.fromDict(other)
+
         if not isinstance(other, Series):
             raise Exception('Argument must be a Series!')
+
         fillVec, mask = tseries.getMergeVec(self, other.index.indexMap)
 
         newValues = other.view(np.ndarray).take(fillVec)
@@ -1017,7 +1019,7 @@ class Series(np.ndarray, Picklable, Groupable):
                 if self.dtype.type == np.object_:
                     vals = tseries.reindexObj(newIndex, self, idxMap)
                 else:
-                    thisVals = self.view(np.ndarray).astype(object)
+                    thisVals = self.values().astype(object)
                     vals = tseries.reindexObj(newIndex, thisVals, idxMap)
 
                     if not isnull(vals).any():
diff --git a/pandas/core/tests/test_series.py b/pandas/core/tests/test_series.py
index 8e4486476..3efc3be2b 100644
--- a/pandas/core/tests/test_series.py
+++ b/pandas/core/tests/test_series.py
@@ -10,7 +10,7 @@ import unittest
 
 import numpy as np
 
-from pandas.core.api import Index, Series, TimeSeries, DataFrame
+from pandas.core.api import (Index, Series, TimeSeries, DataFrame, isnull)
 import pandas.core.datetools as datetools
 import pandas.core.tests.common as common
 
@@ -183,7 +183,7 @@ class TestSeries(unittest.TestCase):
         str(self.objSeries)
 
         str(Series(common.randn(1000), index=np.arange(1000)))
-        
+
     def test_iter(self):
         for i, val in enumerate(self.series):
             self.assertEqual(val, self.series[i])
@@ -230,7 +230,7 @@ class TestSeries(unittest.TestCase):
         self.assert_(np.isnan(Series([1.], index=[1]).std()))
         self.assert_(np.isnan(Series([1.], index=[1]).var()))
         self.assert_(np.isnan(Series([1.], index=[1]).skew()))
-        
+
     def test_append(self):
         appendedSeries = self.series.append(self.ts)
         for idx, value in appendedSeries.iteritems():
@@ -516,7 +516,7 @@ class TestSeries(unittest.TestCase):
 
         # in there
         self.assertEqual(self.ts.asOf(self.ts.index[3]), self.ts[3])
-        
+
     def test_merge(self):
         index, data = common.getMixedTypeDict()
 
@@ -528,6 +528,12 @@ class TestSeries(unittest.TestCase):
         for k, v in merged.iteritems():
             self.assertEqual(v, source[target[k]])
 
+        # input could be a dict
+        merged = target.merge(source.toDict())
+
+        for k, v in merged.iteritems():
+            self.assertEqual(v, source[target[k]])
+
     def test_reindex(self):
         identity = self.series.reindex(self.series.index)
         self.assertEqual(id(self.series.index), id(identity.index))
@@ -548,6 +554,34 @@ class TestSeries(unittest.TestCase):
         for idx, val in subNonContig.iteritems():
             self.assertEqual(val, self.ts[idx])
 
+        # bad fill method
+        ts = self.ts[::2]
+        self.assertRaises(Exception, ts.reindex, self.ts.index, fillMethod='foo')
+
+    def test_reindex_bool(self):
+
+        # A series other than float, int, string, or object
+        ts = self.ts[::2]
+        bool_ts = Series(np.zeros(len(ts), dtype=bool), index=ts.index)
+
+        # this should work fine
+        reindexed_bool = bool_ts.reindex(self.ts.index)
+
+        # if NaNs introduced
+        self.assert_(reindexed_bool.dtype == np.object_)
+
+        # NO NaNs introduced
+        reindexed_bool = bool_ts.reindex(bool_ts.index[::2])
+        self.assert_(reindexed_bool.dtype == np.bool_)
+
+    @np.testing.decorators.knownfailureif(True)
+    def test_reindex_bool_pad(self):
+        # fail
+        ts = self.ts[5:]
+        bool_ts = Series(np.zeros(len(ts), dtype=bool), index=ts.index)
+        filled_bool = bool_ts.reindex(self.ts.index, fillMethod='pad')
+        self.assert_(filled_bool.dtype == np.object_)
+
     def test_preserveRefs(self):
         sl = self.ts[5:10]
         seq = self.ts[[5,10,15]]
@@ -563,16 +597,30 @@ class TestSeries(unittest.TestCase):
         ts = Series([0., 1., 2., 3., 4.], index=common.makeDateIndex(5))
 
         self.assert_(np.array_equal(ts, ts.fill()))
-        
+
         ts[2] = np.NaN
 
         self.assert_(np.array_equal(ts.fill(), [0., 1., 1., 3., 4.]))
         self.assert_(np.array_equal(ts.fill(method='backfill'), [0., 1., 3., 3., 4.]))
 
         self.assert_(np.array_equal(ts.fill(value=5), [0., 1., 5., 3., 4.]))
-        
+
     def test_asfreq(self):
-        pass
+        ts = Series([0., 1., 2.], index=[datetime(2009, 10, 30),
+                                         datetime(2009, 11, 30),
+                                         datetime(2009, 12, 31)])
+
+        daily_ts = ts.asfreq('WEEKDAY')
+        monthly_ts = daily_ts.asfreq('EOM')
+        self.assert_(np.array_equal(monthly_ts, ts))
+
+        daily_ts = ts.asfreq('WEEKDAY', fillMethod='pad')
+        monthly_ts = daily_ts.asfreq('EOM')
+        self.assert_(np.array_equal(monthly_ts, ts))
+
+        daily_ts = ts.asfreq(datetools.bday)
+        monthly_ts = daily_ts.asfreq(datetools.bmonthEnd)
+        self.assert_(np.array_equal(monthly_ts, ts))
 
     def test_interpolate(self):
         ts = Series(np.arange(len(self.ts), dtype=float), self.ts.index)
@@ -593,13 +641,16 @@ class TestSeries(unittest.TestCase):
         self.assert_(np.array_equal(time_interp, ord_ts))
 
     def test_weekday(self):
-        pass
+        # Just run the function
+        weekdays = self.ts.weekday
 
     def test_diff(self):
-        pass
+        # Just run the function
+        self.ts.diff()
 
     def test_autocorr(self):
-        pass
+        # Just run the function
+        self.ts.autocorr()
 
     def test_firstValid(self):
         ts = self.ts.copy()
@@ -607,15 +658,15 @@ class TestSeries(unittest.TestCase):
 
         index = ts._firstTimeWithValue()
         self.assertEqual(index, ts.index[5])
-        
+
         ts[-5:] = np.NaN
-        index = ts._lastTimeWithValue()        
+        index = ts._lastTimeWithValue()
         self.assertEqual(index, ts.index[-6])
 
         ser = Series([], index=[])
         self.assert_(ser._lastTimeWithValue() is None)
         self.assert_(ser._firstTimeWithValue() is None)
-        
+
     def test_lastValid(self):
         pass
 
