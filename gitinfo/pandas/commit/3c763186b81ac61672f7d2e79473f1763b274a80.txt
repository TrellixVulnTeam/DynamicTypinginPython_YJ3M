commit 3c763186b81ac61672f7d2e79473f1763b274a80
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Mon Jan 27 18:22:13 2020 -0800

    CLN: require extracting .values before expressions calls (#31373)

diff --git a/pandas/core/computation/expressions.py b/pandas/core/computation/expressions.py
index ada983e9e..fdc299ccd 100644
--- a/pandas/core/computation/expressions.py
+++ b/pandas/core/computation/expressions.py
@@ -12,8 +12,6 @@ import numpy as np
 
 from pandas._config import get_option
 
-from pandas._libs.lib import values_from_object
-
 from pandas.core.dtypes.generic import ABCDataFrame
 
 from pandas.core.computation.check import _NUMEXPR_INSTALLED
@@ -123,26 +121,19 @@ def _evaluate_numexpr(op, op_str, a, b):
 
 
 def _where_standard(cond, a, b):
-    return np.where(
-        values_from_object(cond), values_from_object(a), values_from_object(b)
-    )
+    # Caller is responsible for calling values_from_object if necessary
+    return np.where(cond, a, b)
 
 
 def _where_numexpr(cond, a, b):
+    # Caller is responsible for calling values_from_object if necessary
     result = None
 
     if _can_use_numexpr(None, "where", a, b, "where"):
-        cond_value = getattr(cond, "values", cond)
-        a_value = getattr(a, "values", a)
-        b_value = getattr(b, "values", b)
 
         result = ne.evaluate(
             "where(cond_value, a_value, b_value)",
-            local_dict={
-                "cond_value": cond_value,
-                "a_value": a_value,
-                "b_value": b_value,
-            },
+            local_dict={"cond_value": cond, "a_value": a, "b_value": b},
             casting="safe",
         )
 
diff --git a/pandas/core/internals/blocks.py b/pandas/core/internals/blocks.py
index 43edc246d..d29954c67 100644
--- a/pandas/core/internals/blocks.py
+++ b/pandas/core/internals/blocks.py
@@ -1390,8 +1390,7 @@ class Block(PandasObject):
         if not hasattr(cond, "shape"):
             raise ValueError("where must have a condition that is ndarray like")
 
-        # our where function
-        def func(cond, values, other):
+        def where_func(cond, values, other):
 
             if not (
                 (self.is_integer or self.is_bool)
@@ -1402,8 +1401,11 @@ class Block(PandasObject):
                 if not self._can_hold_element(other):
                     raise TypeError
                 if lib.is_scalar(other) and isinstance(values, np.ndarray):
+                    # convert datetime to datetime64, timedelta to timedelta64
                     other = convert_scalar(values, other)
 
+            # By the time we get here, we should have all Series/Index
+            #  args extracted to  ndarray
             fastres = expressions.where(cond, values, other)
             return fastres
 
@@ -1413,7 +1415,7 @@ class Block(PandasObject):
             # see if we can operate on the entire block, or need item-by-item
             # or if we are a single block (ndim == 1)
             try:
-                result = func(cond, values, other)
+                result = where_func(cond, values, other)
             except TypeError:
 
                 # we cannot coerce, return a compat dtype
