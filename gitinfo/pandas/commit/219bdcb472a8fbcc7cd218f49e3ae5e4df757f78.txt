commit 219bdcb472a8fbcc7cd218f49e3ae5e4df757f78
Author: Wouter Overmeire <lodagro@gmail.com>
Date:   Mon Apr 16 21:32:49 2012 +0200

    BUG: fix to_html with colums MultiIndex without level names, close #1053

diff --git a/pandas/core/format.py b/pandas/core/format.py
index d35aa7071..1f130110c 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -262,6 +262,8 @@ class DataFrameFormatter(object):
             if isinstance(self.columns, MultiIndex):
                 if self.has_column_names:
                     row.append(single_column_table(self.columns.names))
+                else:
+                    row.append('')
                 row.extend([single_column_table(c) for c in self.columns])
             else:
                 row.append(self.columns.name or '')
@@ -290,9 +292,11 @@ class DataFrameFormatter(object):
                     row = frame.index.names + [''] * len(self.columns)
                     write_tr(row, indent, indent_delta, header=True)
 
+                indent -= indent_delta
                 write('</thead>', indent)
 
             write('<tbody>', indent)
+            indent += indent_delta
 
             _bold_row = self.kwds.get('bold_rows', False)
             def _maybe_bold_row(x):
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index 00759465e..6cb550b7d 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -386,6 +386,83 @@ class TestDataFrameFormatting(unittest.TestCase):
         result = self.frame.to_html(columns=['A'])
         self.assert_('<th>B</th>' not in result)
 
+    def test_to_html_multiindex(self):
+        columns = pandas.MultiIndex.from_tuples(zip(range(4),
+                                                    np.mod(range(4), 2)),
+                                                names=['CL0', 'CL1'])
+        df = pandas.DataFrame([list('abcd'), list('efgh')], columns=columns)
+        result = df.to_html()
+        expected = ('<table border="1">\n'
+                    '  <thead>\n'
+                    '    <tr>\n'
+                    '      <th><table><tbody><tr><td>CL0</td></tr><tr>'
+                    '<td>CL1</td></tr></tbody></table></th>\n'
+                    '      <th><table><tbody><tr><td>0</td></tr><tr>'
+                    '<td>0</td></tr></tbody></table></th>\n'
+                    '      <th><table><tbody><tr><td>1</td></tr><tr>'
+                    '<td>1</td></tr></tbody></table></th>\n'
+                    '      <th><table><tbody><tr><td>2</td></tr><tr>'
+                    '<td>0</td></tr></tbody></table></th>\n'
+                    '      <th><table><tbody><tr><td>3</td></tr><tr>'
+                    '<td>1</td></tr></tbody></table></th>\n'
+                    '    </tr>\n'
+                    '  </thead>\n'
+                    '  <tbody>\n'
+                    '    <tr>\n'
+                    '      <td><strong>0</strong></td>\n'
+                    '      <td> a</td>\n'
+                    '      <td> b</td>\n'
+                    '      <td> c</td>\n'
+                    '      <td> d</td>\n'
+                    '    </tr>\n'
+                    '    <tr>\n'
+                    '      <td><strong>1</strong></td>\n'
+                    '      <td> e</td>\n'
+                    '      <td> f</td>\n'
+                    '      <td> g</td>\n'
+                    '      <td> h</td>\n'
+                    '    </tr>\n'
+                    '  </tbody>\n'
+                    '</table>')
+        self.assertEqual(result, expected)
+
+        columns = pandas.MultiIndex.from_tuples(zip(range(4),
+                                                    np.mod(range(4), 2)))
+        df = pandas.DataFrame([list('abcd'), list('efgh')], columns=columns)
+        result = df.to_html()
+        expected = ('<table border="1">\n'
+                    '  <thead>\n'
+                    '    <tr>\n'
+                    '      <th></th>\n'
+                    '      <th><table><tbody><tr><td>0</td></tr>'
+                    '<tr><td>0</td></tr></tbody></table></th>\n'
+                    '      <th><table><tbody><tr><td>1</td></tr>'
+                    '<tr><td>1</td></tr></tbody></table></th>\n'
+                    '      <th><table><tbody><tr><td>2</td></tr>'
+                    '<tr><td>0</td></tr></tbody></table></th>\n'
+                    '      <th><table><tbody><tr><td>3</td></tr>'
+                    '<tr><td>1</td></tr></tbody></table></th>\n'
+                    '    </tr>\n'
+                    '  </thead>\n'
+                    '  <tbody>\n'
+                    '    <tr>\n'
+                    '      <td><strong>0</strong></td>\n'
+                    '      <td> a</td>\n'
+                    '      <td> b</td>\n'
+                    '      <td> c</td>\n'
+                    '      <td> d</td>\n'
+                    '    </tr>\n'
+                    '    <tr>\n'
+                    '      <td><strong>1</strong></td>\n'
+                    '      <td> e</td>\n'
+                    '      <td> f</td>\n'
+                    '      <td> g</td>\n'
+                    '      <td> h</td>\n'
+                    '    </tr>\n'
+                    '  </tbody>\n'
+                    '</table>')
+        self.assertEqual(result, expected)
+
     def test_repr_html(self):
         self.frame._repr_html_()
 
