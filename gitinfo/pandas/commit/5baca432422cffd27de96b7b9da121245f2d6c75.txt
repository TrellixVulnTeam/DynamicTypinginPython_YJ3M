commit 5baca432422cffd27de96b7b9da121245f2d6c75
Author: Alex Rothberg <agrothberg@gmail.com>
Date:   Thu Oct 31 23:47:30 2013 -0400

    Fix Issues with FY5253 and variation=nearest w/ year end in Dec

diff --git a/pandas/tseries/offsets.py b/pandas/tseries/offsets.py
index 8830d66b2..04e87e43a 100644
--- a/pandas/tseries/offsets.py
+++ b/pandas/tseries/offsets.py
@@ -977,6 +977,7 @@ class BQuarterEnd(CacheableOffset, QuarterOffset):
         modMonth = (dt.month - self.startingMonth) % 3
         return BMonthEnd().onOffset(dt) and modMonth == 0
 
+
 class FY5253(CacheableOffset, DateOffset):
     """
     Describes 52-53 week fiscal year. This is also known as a 4-4-5 calendar.
@@ -1035,8 +1036,9 @@ class FY5253(CacheableOffset, DateOffset):
             raise ValueError('%s is not a valid variation' % self.variation)
 
         if self.variation == "nearest":
-            self._rd_forward = relativedelta(weekday=weekday(self.weekday))
-            self._rd_backward = relativedelta(weekday=weekday(self.weekday)(-1))
+            weekday_offset = weekday(self.weekday)
+            self._rd_forward = relativedelta(weekday=weekday_offset)
+            self._rd_backward = relativedelta(weekday=weekday_offset(-1))
         else:
             self._offset_lwom = LastWeekOfMonth(n=1, weekday=self.weekday)
 
@@ -1047,31 +1049,64 @@ class FY5253(CacheableOffset, DateOffset):
 
     def onOffset(self, dt):
         year_end = self.get_year_end(dt)
-        return year_end == dt
+
+        if self.variation == "nearest":
+            # We have to check the year end of "this" cal year AND the previous
+            return year_end == dt or \
+                self.get_year_end(dt - relativedelta(months=1)) == dt
+        else:
+            return year_end == dt
 
     def apply(self, other):
         n = self.n
+        prev_year = self.get_year_end(
+                        datetime(other.year - 1, self.startingMonth, 1))
+        cur_year = self.get_year_end(
+                        datetime(other.year, self.startingMonth, 1))
+        next_year = self.get_year_end(
+                        datetime(other.year + 1, self.startingMonth, 1))
+
         if n > 0:
-            year_end = self.get_year_end(other)
-            if other < year_end:
-                other = year_end
+            if other == prev_year:
+                year = other.year - 1
+            elif other == cur_year:
+                year = other.year
+            elif other == next_year:
+                year = other.year + 1
+            elif other < prev_year:
+                year = other.year - 1
+                n -= 1
+            elif other < cur_year:
+                year = other.year
                 n -= 1
-            elif other > year_end:
-                other = self.get_year_end(as_datetime(other) + relativedelta(years=1))
+            elif other < next_year:
+                year = other.year + 1
                 n -= 1
+            else:
+                assert False
 
-            return self.get_year_end(as_datetime(other) + relativedelta(years=n))
+            return self.get_year_end(datetime(year + n, self.startingMonth, 1))
         else:
             n = -n
-            year_end = self.get_year_end(other)
-            if other > year_end:
-                other = year_end
+            if other == prev_year:
+                year = other.year - 1
+            elif other == cur_year:
+                year = other.year
+            elif other == next_year:
+                year = other.year + 1
+            elif other > next_year:
+                year = other.year + 1
+                n -= 1
+            elif other > cur_year:
+                year = other.year
                 n -= 1
-            elif other < year_end:
-                other = self.get_year_end(as_datetime(other) + relativedelta(years=-1))
+            elif other > prev_year:
+                year = other.year - 1
                 n -= 1
+            else:
+                assert False
 
-            return self.get_year_end(as_datetime(other) + relativedelta(years=-n))
+            return self.get_year_end(datetime(year - n, self.startingMonth, 1))
 
     def get_year_end(self, dt):
         if self.variation == "nearest":
@@ -1127,21 +1162,23 @@ class FY5253(CacheableOffset, DateOffset):
         elif varion_code == "L":
             variation = "last"
         else:
-            raise ValueError("Unable to parse varion_code: %s" % (varion_code,))
+            raise ValueError(
+                "Unable to parse varion_code: %s" % (varion_code,))
 
         startingMonth = _month_to_int[startingMonth_code]
         weekday = _weekday_to_int[weekday_code]
 
         return {
-                "weekday":weekday,
-                "startingMonth":startingMonth,
-                "variation":variation,
+                "weekday": weekday,
+                "startingMonth": startingMonth,
+                "variation": variation,
                 }
 
     @classmethod
     def _from_name(cls, *args):
         return cls(**cls._parse_suffix(*args))
 
+
 class FY5253Quarter(CacheableOffset, DateOffset):
     """
     DateOffset increments between business quarter dates
@@ -1251,7 +1288,7 @@ class FY5253Quarter(CacheableOffset, DateOffset):
         year_has_extra_week = self.year_has_extra_week(dt)
 
         if year_has_extra_week:
-            ret[self.qtr_with_extra_week-1] = 14
+            ret[self.qtr_with_extra_week - 1] = 14
 
         return ret
 
@@ -1263,7 +1300,7 @@ class FY5253Quarter(CacheableOffset, DateOffset):
             next_year_end = dt + self._offset
             prev_year_end = dt - self._offset
 
-        week_in_year = (next_year_end - prev_year_end).days/7
+        week_in_year = (next_year_end - prev_year_end).days / 7
 
         return week_in_year == 53
 
@@ -1285,11 +1322,14 @@ class FY5253Quarter(CacheableOffset, DateOffset):
     @property
     def rule_code(self):
         suffix = self._offset.get_rule_code_suffix()
-        return "%s-%s" %(self._prefix, "%s-%d" % (suffix, self.qtr_with_extra_week))
+        return "%s-%s" % (self._prefix,
+                          "%s-%d" % (suffix, self.qtr_with_extra_week))
 
     @classmethod
     def _from_name(cls, *args):
-        return cls(**dict(FY5253._parse_suffix(*args[:-1]), qtr_with_extra_week=int(args[-1])))
+        return cls(**dict(FY5253._parse_suffix(*args[:-1]),
+                          qtr_with_extra_week=int(args[-1])))
+
 
 _int_to_month = {
     1: 'JAN',
diff --git a/pandas/tseries/tests/test_offsets.py b/pandas/tseries/tests/test_offsets.py
index f66f57cc4..008bda0a6 100644
--- a/pandas/tseries/tests/test_offsets.py
+++ b/pandas/tseries/tests/test_offsets.py
@@ -1304,10 +1304,25 @@ class TestFY5253NearestEndMonth(TestBase):
         self.assertEqual(makeFY5253NearestEndMonth(startingMonth=8, weekday=WeekDay.SUN).get_year_end(datetime(2013,1,1)), datetime(2013,9,1))
         self.assertEqual(makeFY5253NearestEndMonth(startingMonth=8, weekday=WeekDay.FRI).get_year_end(datetime(2013,1,1)), datetime(2013,8,30))
 
+        offset_n = FY5253(weekday=WeekDay.TUE, startingMonth=12, 
+                      variation="nearest")
+        self.assertEqual(offset_n.get_year_end(datetime(2012,1,1)), datetime(2013,1,1))
+        self.assertEqual(offset_n.get_year_end(datetime(2012,1,10)), datetime(2013,1,1))
+        
+        self.assertEqual(offset_n.get_year_end(datetime(2013,1,1)), datetime(2013,12,31))        
+        self.assertEqual(offset_n.get_year_end(datetime(2013,1,2)), datetime(2013,12,31))        
+        self.assertEqual(offset_n.get_year_end(datetime(2013,1,3)), datetime(2013,12,31))        
+        self.assertEqual(offset_n.get_year_end(datetime(2013,1,10)), datetime(2013,12,31))
+        
+        JNJ = FY5253(n=1, startingMonth=12, weekday=6, variation="nearest")
+        self.assertEqual(JNJ.get_year_end(datetime(2006, 1, 1)), datetime(2006, 12, 31))
+        
     def test_onOffset(self):
         offset_lom_aug_sat = makeFY5253NearestEndMonth(1, startingMonth=8, weekday=WeekDay.SAT)
         offset_lom_aug_thu = makeFY5253NearestEndMonth(1, startingMonth=8, weekday=WeekDay.THU)
-
+        offset_n = FY5253(weekday=WeekDay.TUE, startingMonth=12, 
+                      variation="nearest")
+                
         tests = [
 #             From Wikipedia (see: http://en.wikipedia.org/wiki/4%E2%80%934%E2%80%935_calendar#Saturday_nearest_the_end_of_month)
 #             2006-09-02   2006 September 2
@@ -1354,21 +1369,39 @@ class TestFY5253NearestEndMonth(TestBase):
             #From Micron, see: http://google.brand.edgar-online.com/?sym=MU&formtypeID=7
             (offset_lom_aug_thu, datetime(2012, 8, 30), True),
             (offset_lom_aug_thu, datetime(2011, 9, 1), True),
-
+            
+            (offset_n, datetime(2012, 12, 31), False),
+            (offset_n, datetime(2013, 1, 1), True),
+            (offset_n, datetime(2013, 1, 2), False),
         ]
 
         for offset, date, expected in tests:
             assertOnOffset(offset, date, expected)
 
     def test_apply(self):
-        date_seq_nem_8_sat = [datetime(2006, 9, 2), datetime(2007, 9, 1), datetime(2008, 8, 30), datetime(2009, 8, 29), datetime(2010, 8, 28), datetime(2011, 9, 3)]
+        date_seq_nem_8_sat = [datetime(2006, 9, 2), datetime(2007, 9, 1), 
+                              datetime(2008, 8, 30), datetime(2009, 8, 29), 
+                              datetime(2010, 8, 28), datetime(2011, 9, 3)]
+        
+        JNJ = [datetime(2005, 1, 2), datetime(2006, 1, 1), 
+               datetime(2006, 12, 31), datetime(2007, 12, 30), 
+               datetime(2008, 12, 28), datetime(2010, 1, 3), 
+               datetime(2011, 1, 2), datetime(2012, 1, 1), 
+               datetime(2012, 12, 30)]
+        
+        DEC_SAT = FY5253(n=-1, startingMonth=12, weekday=5, variation="nearest")
 
         tests = [
-                 (makeFY5253NearestEndMonth(startingMonth=8, weekday=WeekDay.SAT), date_seq_nem_8_sat),
-                 (makeFY5253NearestEndMonth(n=1, startingMonth=8, weekday=WeekDay.SAT), date_seq_nem_8_sat),
-                 (makeFY5253NearestEndMonth(startingMonth=8, weekday=WeekDay.SAT), [datetime(2006, 9, 1)] + date_seq_nem_8_sat),
-                 (makeFY5253NearestEndMonth(n=1, startingMonth=8, weekday=WeekDay.SAT), [datetime(2006, 9, 3)] + date_seq_nem_8_sat[1:]),
-                 (makeFY5253NearestEndMonth(n=-1, startingMonth=8, weekday=WeekDay.SAT), list(reversed(date_seq_nem_8_sat))),
+                (makeFY5253NearestEndMonth(startingMonth=8, weekday=WeekDay.SAT), date_seq_nem_8_sat),
+                (makeFY5253NearestEndMonth(n=1, startingMonth=8, weekday=WeekDay.SAT), date_seq_nem_8_sat),
+                (makeFY5253NearestEndMonth(startingMonth=8, weekday=WeekDay.SAT), [datetime(2006, 9, 1)] + date_seq_nem_8_sat),
+                (makeFY5253NearestEndMonth(n=1, startingMonth=8, weekday=WeekDay.SAT), [datetime(2006, 9, 3)] + date_seq_nem_8_sat[1:]),
+                (makeFY5253NearestEndMonth(n=-1, startingMonth=8, weekday=WeekDay.SAT), list(reversed(date_seq_nem_8_sat))),
+                (makeFY5253NearestEndMonth(n=1, startingMonth=12, weekday=WeekDay.SUN), JNJ),
+                (makeFY5253NearestEndMonth(n=-1, startingMonth=12, weekday=WeekDay.SUN), list(reversed(JNJ))),
+                (makeFY5253NearestEndMonth(n=1, startingMonth=12, weekday=WeekDay.SUN), [datetime(2005,1,2), datetime(2006, 1, 1)]),
+                (makeFY5253NearestEndMonth(n=1, startingMonth=12, weekday=WeekDay.SUN), [datetime(2006,1,2), datetime(2006, 12, 31)]),
+                (DEC_SAT, [datetime(2013,1,15), datetime(2012,12,29)])
                 ]
         for test in tests:
             offset, data = test
@@ -1512,9 +1545,12 @@ class TestFY5253LastOfMonthQuarter(TestBase):
         self.assertTrue(makeFY5253LastOfMonthQuarter(1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1).year_has_extra_week(datetime(1994, 4, 2)))
 
     def test_get_weeks(self):
-        self.assertEqual(makeFY5253LastOfMonthQuarter(1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1).get_weeks(datetime(2011, 4, 2)), [14, 13, 13, 13])
-        self.assertEqual(makeFY5253LastOfMonthQuarter(1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=4).get_weeks(datetime(2011, 4, 2)), [13, 13, 13, 14])
-        self.assertEqual(makeFY5253LastOfMonthQuarter(1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1).get_weeks(datetime(2010, 12, 25)), [13, 13, 13, 13])
+        sat_dec_1 = makeFY5253LastOfMonthQuarter(1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1)
+        sat_dec_4 = makeFY5253LastOfMonthQuarter(1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=4)
+        
+        self.assertEqual(sat_dec_1.get_weeks(datetime(2011, 4, 2)), [14, 13, 13, 13])
+        self.assertEqual(sat_dec_4.get_weeks(datetime(2011, 4, 2)), [13, 13, 13, 14])
+        self.assertEqual(sat_dec_1.get_weeks(datetime(2010, 12, 25)), [13, 13, 13, 13])
 
 class TestFY5253NearestEndMonthQuarter(TestBase):
 
@@ -1522,6 +1558,9 @@ class TestFY5253NearestEndMonthQuarter(TestBase):
 
         offset_nem_sat_aug_4 = makeFY5253NearestEndMonthQuarter(1, startingMonth=8, weekday=WeekDay.SAT, qtr_with_extra_week=4)
         offset_nem_thu_aug_4 = makeFY5253NearestEndMonthQuarter(1, startingMonth=8, weekday=WeekDay.THU, qtr_with_extra_week=4)
+        offset_n = FY5253(weekday=WeekDay.TUE, startingMonth=12, 
+                      variation="nearest", qtr_with_extra_week=4)
+                
         tests = [
             #From Wikipedia
             (offset_nem_sat_aug_4, datetime(2006, 9, 2), True),
@@ -1563,6 +1602,9 @@ class TestFY5253NearestEndMonthQuarter(TestBase):
             (offset_nem_thu_aug_4, datetime(2007, 3, 1), True),
             (offset_nem_thu_aug_4, datetime(1994, 3, 3), True),
 
+            (offset_n, datetime(2012, 12, 31), False),
+            (offset_n, datetime(2013, 1, 1), True),
+            (offset_n, datetime(2013, 1, 2), False)
         ]
 
         for offset, date, expected in tests:
@@ -1580,7 +1622,12 @@ class TestFY5253NearestEndMonthQuarter(TestBase):
 
         assertEq(offset, datetime(2012, 5, 31), datetime(2012, 8, 30))
         assertEq(offset, datetime(2012, 5, 30), datetime(2012, 5, 31))
-
+        
+        offset2 = FY5253Quarter(weekday=5, startingMonth=12, 
+                     variation="last", qtr_with_extra_week=4)
+        
+        assertEq(offset2, datetime(2013,1,15), datetime(2013, 3, 30))
+        
 class TestQuarterBegin(TestBase):
 
     def test_repr(self):
