commit 2655daef1b7346feabd00d4d40910a80386d0812
Author: Anthonios Partheniou <apartheniou@electricalengineer.ca>
Date:   Thu Jul 7 03:26:12 2016 -0400

    In gbq, use googleapiclient instead of apiclient #13454 (#13458)
    
    closes #13454

diff --git a/doc/source/whatsnew/v0.18.2.txt b/doc/source/whatsnew/v0.18.2.txt
index b9afa7fcb..64644bd9a 100644
--- a/doc/source/whatsnew/v0.18.2.txt
+++ b/doc/source/whatsnew/v0.18.2.txt
@@ -528,3 +528,5 @@ Bug Fixes
 
 - Bug in ``Categorical.remove_unused_categories()`` changes ``.codes`` dtype to platform int (:issue:`13261`)
 - Bug in ``groupby`` with ``as_index=False`` returns all NaN's when grouping on multiple columns including a categorical one (:issue:`13204`)
+
+- Bug where ``pd.read_gbq()`` could throw ``ImportError: No module named discovery`` as a result of a naming conflict with another python package called apiclient  (:issue:`13454`)
diff --git a/pandas/io/gbq.py b/pandas/io/gbq.py
index e706434f2..140f5cc6b 100644
--- a/pandas/io/gbq.py
+++ b/pandas/io/gbq.py
@@ -46,8 +46,12 @@ def _test_google_api_imports():
 
     try:
         import httplib2  # noqa
-        from apiclient.discovery import build  # noqa
-        from apiclient.errors import HttpError  # noqa
+        try:
+            from googleapiclient.discovery import build  # noqa
+            from googleapiclient.errors import HttpError  # noqa
+        except:
+            from apiclient.discovery import build  # noqa
+            from apiclient.errors import HttpError  # noqa
         from oauth2client.client import AccessTokenRefreshError  # noqa
         from oauth2client.client import OAuth2WebServerFlow  # noqa
         from oauth2client.file import Storage  # noqa
@@ -266,7 +270,10 @@ class GbqConnector(object):
 
     def get_service(self):
         import httplib2
-        from apiclient.discovery import build
+        try:
+            from googleapiclient.discovery import build
+        except:
+            from apiclient.discovery import build
 
         http = httplib2.Http()
         http = self.credentials.authorize(http)
@@ -315,7 +322,10 @@ class GbqConnector(object):
         raise StreamingInsertError
 
     def run_query(self, query):
-        from apiclient.errors import HttpError
+        try:
+            from googleapiclient.errors import HttpError
+        except:
+            from apiclient.errors import HttpError
         from oauth2client.client import AccessTokenRefreshError
 
         _check_google_client_version()
@@ -420,7 +430,10 @@ class GbqConnector(object):
         return schema, result_pages
 
     def load_data(self, dataframe, dataset_id, table_id, chunksize):
-        from apiclient.errors import HttpError
+        try:
+            from googleapiclient.errors import HttpError
+        except:
+            from apiclient.errors import HttpError
 
         job_id = uuid.uuid4().hex
         rows = []
@@ -474,7 +487,10 @@ class GbqConnector(object):
         self._print("\n")
 
     def verify_schema(self, dataset_id, table_id, schema):
-        from apiclient.errors import HttpError
+        try:
+            from googleapiclient.errors import HttpError
+        except:
+            from apiclient.errors import HttpError
 
         try:
             return (self.service.tables().get(
@@ -765,7 +781,10 @@ class _Table(GbqConnector):
 
     def __init__(self, project_id, dataset_id, reauth=False, verbose=False,
                  private_key=None):
-        from apiclient.errors import HttpError
+        try:
+            from googleapiclient.errors import HttpError
+        except:
+            from apiclient.errors import HttpError
         self.http_error = HttpError
         self.dataset_id = dataset_id
         super(_Table, self).__init__(project_id, reauth, verbose, private_key)
@@ -865,7 +884,10 @@ class _Dataset(GbqConnector):
 
     def __init__(self, project_id, reauth=False, verbose=False,
                  private_key=None):
-        from apiclient.errors import HttpError
+        try:
+            from googleapiclient.errors import HttpError
+        except:
+            from apiclient.errors import HttpError
         self.http_error = HttpError
         super(_Dataset, self).__init__(project_id, reauth, verbose,
                                        private_key)
diff --git a/pandas/io/tests/test_gbq.py b/pandas/io/tests/test_gbq.py
index 5cb681f4d..278c5d721 100644
--- a/pandas/io/tests/test_gbq.py
+++ b/pandas/io/tests/test_gbq.py
@@ -73,8 +73,12 @@ def _test_imports():
 
     if _SETUPTOOLS_INSTALLED:
         try:
-            from apiclient.discovery import build  # noqa
-            from apiclient.errors import HttpError  # noqa
+            try:
+                from googleapiclient.discovery import build  # noqa
+                from googleapiclient.errors import HttpError  # noqa
+            except:
+                from apiclient.discovery import build  # noqa
+                from apiclient.errors import HttpError  # noqa
 
             from oauth2client.client import OAuth2WebServerFlow  # noqa
             from oauth2client.client import AccessTokenRefreshError  # noqa
@@ -280,6 +284,17 @@ class GBQUnitTests(tm.TestCase):
     def setUp(self):
         test_requirements()
 
+    def test_import_google_api_python_client(self):
+        if compat.PY2:
+            with tm.assertRaises(ImportError):
+                from googleapiclient.discovery import build  # noqa
+                from googleapiclient.errors import HttpError  # noqa
+            from apiclient.discovery import build  # noqa
+            from apiclient.errors import HttpError  # noqa
+        else:
+            from googleapiclient.discovery import build  # noqa
+            from googleapiclient.errors import HttpError  # noqa
+
     def test_should_return_bigquery_integers_as_python_floats(self):
         result = gbq._parse_entry(1, 'INTEGER')
         tm.assert_equal(result, float(1))
