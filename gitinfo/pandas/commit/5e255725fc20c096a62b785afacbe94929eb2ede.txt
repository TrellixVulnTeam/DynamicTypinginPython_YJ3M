commit 5e255725fc20c096a62b785afacbe94929eb2ede
Author: Adam Klein <adamklein@gmail.com>
Date:   Fri Nov 4 15:41:02 2011 -0400

    ENH: Print hierarchical index names in Series.__repr__

diff --git a/pandas/core/series.py b/pandas/core/series.py
index 0e466e29a..61d011bda 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -371,7 +371,13 @@ copy : boolean, default False
         vals = self.values
         index = self.index
 
-        string_index = index.format()
+        is_multi = isinstance(index, MultiIndex)
+        if is_multi:
+            string_index = index.format(names=True)
+            header, string_index = string_index[0], string_index[1:]
+        else:
+            string_index = index.format()
+
         maxlen = max(len(x) for x in string_index)
         padSpace = min(maxlen, 60)
 
@@ -393,6 +399,8 @@ copy : boolean, default False
         it = itertools.starmap(_format,
                                itertools.izip(string_index, vals))
         it = list(it)
+        if is_multi:
+            it.insert(0, header)
         if name:
             namestr = ("Name: %s, " % self.name) if self.name else ""
             it.append('%sLength: %d' % (namestr, len(self)))
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 83046a1b2..d49af0042 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -64,6 +64,28 @@ class CheckNameIntegration(object):
         result = self.ts[5:10]
         self.assertEquals(result.name, self.ts.name)
 
+    def test_multilevel_name_print(self):
+        index = MultiIndex(levels=[['foo', 'bar', 'baz', 'qux'],
+                                   ['one', 'two', 'three']],
+                           labels=[[0, 0, 0, 1, 1, 2, 2, 3, 3, 3],
+                                   [0, 1, 2, 0, 1, 1, 2, 0, 1, 2]],
+                           names=['first', 'second'])
+        s = Series(range(0,len(index)), index=index, name='sth')
+        expected = ["first  second",
+                    "foo    one       0",
+                    "       two       1",
+                    "       three     2",
+                    "bar    one       3",
+                    "       two       4",
+                    "baz    two       5",
+                    "       three     6",
+                    "qux    one       7",
+                    "       two       8",
+                    "       three     9",
+                    "Name: sth, Length: 10"]
+        expected = "\n".join(expected)
+        self.assertEquals(s.__repr__(), expected)
+
     def test_multilevel_preserve_name(self):
         index = MultiIndex(levels=[['foo', 'bar', 'baz', 'qux'],
                                    ['one', 'two', 'three']],
