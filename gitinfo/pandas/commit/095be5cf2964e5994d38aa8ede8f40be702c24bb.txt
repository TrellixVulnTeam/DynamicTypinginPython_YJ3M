commit 095be5cf2964e5994d38aa8ede8f40be702c24bb
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Jun 10 15:09:43 2011 -0400

    a few stats unit tests

diff --git a/pandas/stats/ols.py b/pandas/stats/ols.py
index 27609d70e..3e4e38e9e 100644
--- a/pandas/stats/ols.py
+++ b/pandas/stats/ols.py
@@ -34,7 +34,7 @@ class OLS(object):
     def __init__(self, y, x, intercept=True, nw_lags=None, nw_overlap=False):
         try:
             import scikits.statsmodels.api as sm
-        except ImportError:
+        except ImportError: # pragma: no cover
             import scikits.statsmodels as sm
 
         self._x_orig = x
@@ -199,7 +199,7 @@ class OLS(object):
             eqs = hypothesis.split(',')
         elif isinstance(hypothesis, list):
             eqs = hypothesis
-        else:
+        else: # pragma: no cover
             raise Exception('hypothesis must be either string or list')
         for equation in eqs:
             row = np.zeros(len(x_names))
@@ -208,6 +208,9 @@ class OLS(object):
                 ss = s.split('*')
                 coeff = float(ss[0])
                 x_name = ss[1]
+
+                if x_name not in x_names:
+                    raise Exception('no coefficient named %s' % x_name)
                 idx = x_names.indexMap[x_name]
                 row[idx] = coeff
             rhs = float(rhs)
diff --git a/pandas/stats/tests/test_ols.py b/pandas/stats/tests/test_ols.py
index 2aa744c90..6729b76fa 100644
--- a/pandas/stats/tests/test_ols.py
+++ b/pandas/stats/tests/test_ols.py
@@ -14,13 +14,29 @@ from pandas.core.panel import LongPanel
 from pandas.core.api import DataMatrix, Index, Series
 from pandas.stats.api import ols
 from pandas.stats.plm import NonPooledPanelOLS
-from pandas.util.testing import (assert_almost_equal, assert_frame_equal)
+from pandas.util.testing import (assert_almost_equal, assert_series_equal,
+                                 assert_frame_equal)
 import pandas.util.testing as testing
 
 from common import BaseTest
 
 def _check_repr(obj):
-    '%s' % obj
+    repr(obj)
+    str(obj)
+
+def _compare_ols_results(model1, model2):
+    assert(type(model1) == type(model2))
+
+    if hasattr(model1, '_window_type'):
+        _compare_moving_ols(model1, model2)
+    else:
+        _compare_fullsample_ols(model1, model2)
+
+def _compare_fullsample_ols(model1, model2):
+    assert_series_equal(model1.beta, model2.beta)
+
+def _compare_moving_ols(model1, model2):
+    assert_frame_equal(model1.beta, model2.beta)
 
 class TestOLS(BaseTest):
 
@@ -70,9 +86,12 @@ class TestOLS(BaseTest):
             import scikits.statsmodels as sm
 
         reference = sm.OLS(endog, sm.add_constant(exog)).fit()
-
         result = ols(y=y, x=x)
 
+        # check that sparse version is the same
+        sparse_result = ols(y=y.to_sparse(), x=x.to_sparse())
+        _compare_ols_results(result, sparse_result)
+
         assert_almost_equal(reference.params, result._beta_raw)
         assert_almost_equal(reference.df_model, result._df_model_raw)
         assert_almost_equal(reference.df_resid, result._df_resid_raw)
@@ -99,6 +118,12 @@ class TestOLS(BaseTest):
         moving = ols(y=y, x=x, window_type=window_type,
                      window=window, **kwds)
 
+        # check that sparse version is the same
+        sparse_moving = ols(y=y.to_sparse(), x=x.to_sparse(),
+                            window_type=window_type,
+                            window=window, **kwds)
+        _compare_ols_results(moving, sparse_moving)
+
         if isinstance(moving.y, Series):
             index = moving.y.index
         elif isinstance(moving.y, LongPanel):
@@ -152,6 +177,23 @@ class TestOLS(BaseTest):
 
             assert_almost_equal(ref, res)
 
+    def test_f_test(self):
+        x = testing.makeTimeDataFrame()
+        y = x.pop('A')
+
+        model = ols(y=y, x=x)
+
+        hyp = '1*B+1*C+1*D=0'
+        result = model.f_test(hyp)
+
+        hyp = ['1*B=0',
+               '1*C=0',
+               '1*D=0']
+        result = model.f_test(hyp)
+        assert_almost_equal(result['f-stat'], model.f_stat['f-stat'])
+
+        self.assertRaises(Exception, model.f_test, '1*A=0')
+
 class TestPanelOLS(BaseTest):
 
 
