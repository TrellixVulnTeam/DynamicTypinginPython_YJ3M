commit 7f854809fc7aab0c3e8fb66113365d9dde3bd1b0
Author: jreback <jeff@reback.net>
Date:   Thu Mar 28 07:51:26 2013 -0400

    BUG/TST: format multi-index nan correctly

diff --git a/pandas/core/index.py b/pandas/core/index.py
index 591f81e06..38a97af57 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1654,13 +1654,13 @@ class MultiIndex(Index):
                 # we have some NA
                 mask = lab==-1
                 if mask.any():
-                    formatted = np.array(formatted)
+                    formatted = np.array(formatted,dtype=object)
                     formatted[mask] = na_rep
                     formatted = formatted.tolist()
 
             else:
                 # weird all NA case
-                formatted = [com.pprint_thing(x, escape_chars=('\t', '\r', '\n'))
+                formatted = [com.pprint_thing(na_rep if isnull(x) else x, escape_chars=('\t', '\r', '\n'))
                              for x in com.take_1d(lev.values, lab)]
             stringified_levels.append(formatted)
 
@@ -1672,6 +1672,7 @@ class MultiIndex(Index):
                 level.append(com.pprint_thing(name, escape_chars=('\t', '\r', '\n'))
                              if name is not None else '')
 
+
             level.extend(np.array(lev, dtype=object))
             result_levels.append(level)
 
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index 3473e5fff..0ae8934c8 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -666,6 +666,22 @@ class TestDataFrameFormatting(unittest.TestCase):
         expected = u'     id1  id3  value\nid2                 \nNaN  1a3  78d    123\nNaN  9h4  79d     64'
         self.assert_(result == expected)
         
+        # partial nan in mi
+        df2 = df.copy()
+        df2.ix[:,'id2'] = np.nan
+        y = df2.set_index(['id2','id3'])
+        result = y.to_string()
+        expected = u'         id1  value\nid2 id3            \nNaN 78d  1a3    123\n    79d  9h4     64'
+        self.assert_(result == expected)
+
+        df = DataFrame({'id1': {0: np.nan, 1: '9h4'}, 'id2': {0: np.nan, 1: 'd67'},
+                        'id3': {0: np.nan, 1: '79d'}, 'value': {0: 123, 1: 64}})
+
+        y = df.set_index(['id1','id2','id3'])
+        result = y.to_string()
+        expected = u'             value\nid1 id2 id3       \nNaN NaN NaN    123\n9h4 d67 79d     64'
+        self.assert_(result == expected)
+
     def test_to_string(self):
         from pandas import read_table
         import re
