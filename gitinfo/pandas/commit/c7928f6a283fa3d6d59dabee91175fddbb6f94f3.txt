commit c7928f6a283fa3d6d59dabee91175fddbb6f94f3
Author: Joris Van den Bossche <jorisvandenbossche@gmail.com>
Date:   Sat Mar 29 00:58:36 2014 +0100

    SQL: fix + test handling columns argument in read_table

diff --git a/pandas/io/sql.py b/pandas/io/sql.py
index efb8ce07a..ea23544ed 100644
--- a/pandas/io/sql.py
+++ b/pandas/io/sql.py
@@ -340,7 +340,8 @@ def read_table(table_name, con, meta=None, index_col=None, coerce_float=True,
     table = pandas_sql.read_table(table_name,
                                   index_col=index_col,
                                   coerce_float=coerce_float,
-                                  parse_dates=parse_dates)
+                                  parse_dates=parse_dates,
+                                  columns=columns)
 
     if table is not None:
         return table
diff --git a/pandas/io/tests/test_sql.py b/pandas/io/tests/test_sql.py
index 57918e831..ac7e4e562 100644
--- a/pandas/io/tests/test_sql.py
+++ b/pandas/io/tests/test_sql.py
@@ -460,7 +460,9 @@ class _TestSQLApi(PandasSQLTest):
             issubclass(df.IntDateCol.dtype.type, np.datetime64),
             "IntDateCol loaded with incorrect type")
 
+
 class TestSQLApi(_TestSQLApi):
+
     """Test the public API as it would be used directly
     """
     flavor = 'sqlite'
@@ -501,8 +503,18 @@ class TestSQLApi(_TestSQLApi):
         self.assertEqual(frame.columns[0], 'other_label',
                          "Specified index_label not written to database")
 
+    def test_read_table_columns(self):
+        # test columns argument in read_table
+        sql.to_sql(self.test_frame1, 'test_frame', self.conn)
+
+        cols = ['A', 'B']
+        result = sql.read_table('test_frame', self.conn, columns=cols)
+        self.assertEqual(result.columns.tolist(), cols,
+                         "Columns not correctly selected")
+
 
 class TestSQLLegacyApi(_TestSQLApi):
+
     """Test the public legacy API
     """
     flavor = 'sqlite'
