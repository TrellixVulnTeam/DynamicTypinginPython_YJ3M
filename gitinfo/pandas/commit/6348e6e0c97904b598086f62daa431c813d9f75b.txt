commit 6348e6e0c97904b598086f62daa431c813d9f75b
Author: Kieran O'Mahony <kieranom@gmail.com>
Date:   Sun Oct 6 14:25:42 2013 +1100

    ENH: Json support for datetime.time

diff --git a/doc/source/release.rst b/doc/source/release.rst
index 3e072da16..e6453e7d7 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -97,6 +97,7 @@ Improvements to existing features
     overlapping color and style arguments (:issue:`4402`)
   - Significant table writing performance improvements in ``HDFStore``
   - JSON date serialisation now performed in low-level C code.
+  - JSON support for encoding datetime.time
   - Add ``drop_level`` argument to xs (:issue:`4180`)
   - Can now resample a DataFrame with ohlc (:issue:`2320`)
   - ``Index.copy()`` and ``MultiIndex.copy()`` now accept keyword arguments to
diff --git a/pandas/io/tests/test_json/test_ujson.py b/pandas/io/tests/test_json/test_ujson.py
index 13ccf0bbd..632a712af 100644
--- a/pandas/io/tests/test_json/test_ujson.py
+++ b/pandas/io/tests/test_json/test_ujson.py
@@ -22,6 +22,7 @@ import numpy as np
 from numpy.testing import (assert_array_equal,
                            assert_array_almost_equal_nulp,
                            assert_approx_equal)
+import pytz
 from pandas import DataFrame, Series, Index, NaT, DatetimeIndex
 import pandas.util.testing as tm
 
@@ -356,6 +357,17 @@ class UltraJSONTests(TestCase):
         self.assertEquals(int(expected), json.loads(output))
         self.assertEquals(int(expected), ujson.decode(output))
 
+    def test_encodeTimeConversion(self):
+        tests = [
+            datetime.time(),
+            datetime.time(1, 2, 3),
+            datetime.time(10, 12, 15, 343243),
+            datetime.time(10, 12, 15, 343243, pytz.utc)]
+        for test in tests:
+            output = ujson.encode(test)
+            expected = '"%s"' % test.isoformat()
+            self.assertEquals(expected, output)
+
     def test_nat(self):
         input = NaT
         assert ujson.encode(input) == 'null', "Expected null"
diff --git a/pandas/src/ujson/python/objToJSON.c b/pandas/src/ujson/python/objToJSON.c
index aefddd7e4..18e4950a8 100644
--- a/pandas/src/ujson/python/objToJSON.c
+++ b/pandas/src/ujson/python/objToJSON.c
@@ -309,6 +309,30 @@ static void *NpyDatetime64ToJSON(JSOBJ _obj, JSONTypeContext *tc, void *outValue
   return PandasDateTimeStructToJSON(&dts, tc, outValue, _outLen);
 }
 
+static void *PyTimeToJSON(JSOBJ _obj, JSONTypeContext *tc, void *outValue, size_t *outLen)
+{
+  PyObject *obj = (PyObject *) _obj;
+  PyObject *str;
+  PyObject *tmp;
+
+  str = PyObject_CallMethod(obj, "isoformat", NULL);
+  if (str == NULL) {
+    PRINTMARK();
+    PyErr_SetString(PyExc_ValueError, "Failed to convert time");
+    return NULL;
+  }
+  if (PyUnicode_Check(str)) 
+  {
+    tmp = str;
+    str = PyUnicode_AsUTF8String(str);
+    Py_DECREF(tmp);
+  }
+  outValue = (void *) PyString_AS_STRING (str);
+  *outLen = strlen ((char *) outValue);
+  Py_DECREF(str);
+  return outValue;
+}
+
 //=============================================================================
 // Numpy array iteration functions
 //=============================================================================
@@ -1361,6 +1385,13 @@ void Object_beginTypeContext (JSOBJ _obj, JSONTypeContext *tc)
     return;
   }
   else
+  if (PyTime_Check(obj))
+  {
+    PRINTMARK();
+    pc->PyTypeToJSON = PyTimeToJSON; tc->type = JT_UTF8;
+    return;
+  }
+  else
   if (obj == Py_None)
   {
     PRINTMARK();
