commit 2e2093e1985b6ae36e2b00edf1bb14197134bc62
Author: Chris Mazzullo <chris.mazzullo@gmail.com>
Date:   Tue Oct 3 04:07:06 2017 -0400

    BUG: GH17525 Function _get_standard_colors resets global random seed (#17730)

diff --git a/doc/source/whatsnew/v0.21.0.txt b/doc/source/whatsnew/v0.21.0.txt
index 74620accd..f4ec8a5f2 100644
--- a/doc/source/whatsnew/v0.21.0.txt
+++ b/doc/source/whatsnew/v0.21.0.txt
@@ -728,6 +728,7 @@ Plotting
 - Line plots no longer assume monotonic x data when calculating xlims, they show the entire lines now even for unsorted x data. (:issue:`11310`, :issue:`11471`)
 - With matplotlib 2.0.0 and above, calculation of x limits for line plots is left to matplotlib, so that its new default settings are applied. (:issue:`15495`)
 - Bug in ``Series.plot.bar`` or ``DataFramee.plot.bar`` with ``y`` not respecting user-passed ``color`` (:issue:`16822`)
+- Bug causing ``plotting.parallel_coordinates`` to reset the random seed when using random colors (:issue:`17525`)
 
 
 Groupby/Resample/Rolling
diff --git a/pandas/plotting/_style.py b/pandas/plotting/_style.py
index f1d53da5f..4c31ff017 100644
--- a/pandas/plotting/_style.py
+++ b/pandas/plotting/_style.py
@@ -9,7 +9,7 @@ import re
 import numpy as np
 
 from pandas.core.dtypes.common import is_list_like
-from pandas.compat import range, lrange, lmap
+from pandas.compat import lrange, lmap
 import pandas.compat as compat
 from pandas.plotting._compat import _mpl_ge_2_0_0
 
@@ -44,11 +44,13 @@ def _get_standard_colors(num_colors=None, colormap=None, color_type='default',
             if isinstance(colors, compat.string_types):
                 colors = list(colors)
         elif color_type == 'random':
-            import random
+            from pandas.core.common import _random_state
 
             def random_color(column):
-                random.seed(column)
-                return [random.random() for _ in range(3)]
+                """ Returns a random color represented as a list of length 3"""
+                # GH17525 use common._random_state to avoid resetting the seed
+                rs = _random_state(column)
+                return rs.rand(3).tolist()
 
             colors = lmap(random_color, lrange(num_colors))
         else:
diff --git a/pandas/tests/plotting/test_misc.py b/pandas/tests/plotting/test_misc.py
index c4795ea1e..957369a20 100644
--- a/pandas/tests/plotting/test_misc.py
+++ b/pandas/tests/plotting/test_misc.py
@@ -284,3 +284,20 @@ class TestDataFramePlots(TestPlotBase):
                                                   title=title[:-1])
         title_list = [ax.get_title() for sublist in plot for ax in sublist]
         assert title_list == title[:3] + ['']
+
+    def test_get_standard_colors_random_seed(self):
+        # GH17525
+        df = DataFrame(np.zeros((10, 10)))
+
+        # Make sure that the random seed isn't reset by _get_standard_colors
+        plotting.parallel_coordinates(df, 0)
+        rand1 = random.random()
+        plotting.parallel_coordinates(df, 0)
+        rand2 = random.random()
+        assert rand1 != rand2
+
+        # Make sure it produces the same colors every time it's called
+        from pandas.plotting._style import _get_standard_colors
+        color1 = _get_standard_colors(1, color_type='random')
+        color2 = _get_standard_colors(1, color_type='random')
+        assert color1 == color2
