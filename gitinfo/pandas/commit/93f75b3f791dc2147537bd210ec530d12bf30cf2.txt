commit 93f75b3f791dc2147537bd210ec530d12bf30cf2
Author: jreback <jeff@reback.net>
Date:   Thu Dec 13 13:15:49 2012 -0500

    ENH: allow index recreation by calling create_table_index with new parameters

diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 9361ad4df..91bd27ff5 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -1325,8 +1325,27 @@ class Table(object):
         table = self.table
         for c in columns:
             v = getattr(table.cols,c,None)
-            if v is not None and not v.is_indexed:
-                v.createIndex(**kw)
+            if v is not None:
+
+                # remove the index if the kind/optlevel have changed
+                if v.is_indexed:
+                    index = v.index
+                    cur_optlevel = index.optlevel
+                    cur_kind     = index.kind
+
+                    if kind is not None and cur_kind != kind:
+                        v.removeIndex()
+                    else:
+                        kw['kind'] = cur_kind
+
+                    if optlevel is not None and cur_optlevel != optlevel:
+                        v.removeIndex()
+                    else:
+                        kw['optlevel'] = cur_optlevel
+
+                # create the index
+                if not v.is_indexed:
+                    v.createIndex(**kw)
 
     def read_axes(self, where):
         """ create and return the axes sniffed from the table: return boolean for success """
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index 9cbc7d33d..a047109e5 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -381,14 +381,29 @@ class TestHDFStore(unittest.TestCase):
         assert(self.store.handle.root.p5.table.cols.major_axis.is_indexed == True)
         assert(self.store.handle.root.p5.table.cols.minor_axis.is_indexed == False)
 
+        # default optlevels
+        assert(self.store.handle.root.p5.table.cols.major_axis.index.optlevel == 6)
+        assert(self.store.handle.root.p5.table.cols.major_axis.index.kind == 'medium')
+
+        # let's change the indexing scheme
+        self.store.create_table_index('p5')
+        assert(self.store.handle.root.p5.table.cols.major_axis.index.optlevel == 6)
+        assert(self.store.handle.root.p5.table.cols.major_axis.index.kind == 'medium')
+        self.store.create_table_index('p5', optlevel=9)
+        assert(self.store.handle.root.p5.table.cols.major_axis.index.optlevel == 9)
+        assert(self.store.handle.root.p5.table.cols.major_axis.index.kind == 'medium')
+        self.store.create_table_index('p5', kind='full')
+        assert(self.store.handle.root.p5.table.cols.major_axis.index.optlevel == 9)
+        assert(self.store.handle.root.p5.table.cols.major_axis.index.kind == 'full')
+        self.store.create_table_index('p5', optlevel=1, kind='light')
+        assert(self.store.handle.root.p5.table.cols.major_axis.index.optlevel == 1)
+        assert(self.store.handle.root.p5.table.cols.major_axis.index.kind == 'light')
+
         df = tm.makeTimeDataFrame()
         self.store.append('f', df[:10])
         self.store.append('f', df[10:])
         self.store.create_table_index('f')
 
-        # create twice
-        self.store.create_table_index('f')
-
         # try to index a non-table
         self.store.put('f2', df)
         self.assertRaises(Exception, self.store.create_table_index, 'f2')
