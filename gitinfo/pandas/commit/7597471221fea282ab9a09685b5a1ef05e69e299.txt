commit 7597471221fea282ab9a09685b5a1ef05e69e299
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Oct 8 14:05:42 2011 -0400

    ENH: droplevel name/names fix, pivot correctly sets names now (nice)

diff --git a/RELEASE.rst b/RELEASE.rst
index c02683908..6319dbbb6 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -10,6 +10,13 @@ pandas 0.4.3
 
 **Release date:** not yet released
 
+**New features / modules**
+
+  - Add `name` attribute to standard Index so that stacking / unstacking does
+    not discard names and so that indexed DataFrame objects can be reliably
+    round-tripped to flat files, pickle, HDF5, etc.
+  - Add `name` attribute to `Series` and added relevant logic and tests
+
 **Improvements to existing features**
 
   - Skip xlrd-related unit tests if not installed
@@ -22,7 +29,7 @@ pandas 0.4.3
     intersection. Implement `Int64Index.intersection`
   - `MultiIndex.sortlevel` discarded the level names (GH #202)
   - Fix bugs in groupby, join, and append due to improper concatenation of
-    `MultiIndex` objets (GH #201)
+    `MultiIndex` objects (GH #201)
   - Fix regression from 0.4.1, `isnull` and `notnull` ceased to work on other
     kinds of Python scalar objects like `datetime.datetime`
   - Raise more helpful exception when attempting to write empty DataFrame or
diff --git a/TODO.rst b/TODO.rst
index 20c758e1b..68240da35 100644
--- a/TODO.rst
+++ b/TODO.rst
@@ -1,2 +1,6 @@
 - SparseSeries name integration + tests
 - Refactor Series.repr
+- .name pickling / unpicking / HDFStore handling
+- Is there a way to write hierarchical columns to csv?
+- Possible to blow away existing name when creating MultiIndex?
+- prettytable output with index names
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 141ac1f72..daa9592c6 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -5,10 +5,9 @@ from itertools import izip
 
 import numpy as np
 
-from pandas.core.common import (_format, adjoin as _adjoin, _stringify,
+from pandas.core.common import (adjoin as _adjoin, _stringify,
                                 _is_bool_indexer, _asarray_tuplesafe)
 from pandas.util.decorators import deprecate, cache_readonly
-import pandas.core.common as common
 import pandas._tseries as lib
 
 __all__ = ['Index']
@@ -820,9 +819,9 @@ class MultiIndex(Index):
             assert(len(names) == self.nlevels)
             self.names = list(names)
 
-        # # set the name
-        # for i, name in enumerate(self.names):
-        #     self.levels[i].name == name
+        # set the name
+        for i, name in enumerate(self.names):
+            self.levels[i].name = name
 
         if sortorder is not None:
             self.sortorder = int(sortorder)
@@ -1028,18 +1027,6 @@ class MultiIndex(Index):
         new_labels = [lab.take(*args, **kwargs) for lab in self.labels]
         return MultiIndex(levels=self.levels, labels=new_labels)
 
-    def append(self, other):
-        """
-        Append two MultiIndex objects
-
-        Parameters
-        ----------
-        other : MultiIndex or list/tuple of MultiIndex objects
-
-        Returns
-        -------
-        appended : MultiIndex
-        """
     def append(self, other):
         """
         Append a collection of Index options together
diff --git a/pandas/core/reshape.py b/pandas/core/reshape.py
index bee82f8cb..3fe653819 100644
--- a/pandas/core/reshape.py
+++ b/pandas/core/reshape.py
@@ -200,7 +200,8 @@ def pivot(self, index=None, columns=None, values=None):
     """
     index_vals = self[index]
     column_vals = self[columns]
-    mindex = MultiIndex.from_arrays([index_vals, column_vals])
+    mindex = MultiIndex.from_arrays([index_vals, column_vals],
+                                    names=[index, columns])
 
     if values is None:
         items = self.columns - [index, columns]
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 0a7e35dbb..a292fc7bc 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1524,18 +1524,18 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         frame = self.frame
         old_index = frame.index
-        new_index = MultiIndex.from_arrays(np.arange(len(old_index)*2).reshape(2,-1))
+        arrays = np.arange(len(old_index)*2).reshape(2,-1)
+        new_index = MultiIndex.from_arrays(arrays, names=['first', 'second'])
         frame.index = new_index
         frame.to_csv(path, header=False)
         frame.to_csv(path, cols=['A', 'B'])
 
-
         # round trip
         frame.to_csv(path)
-
         df = DataFrame.from_csv(path, index_col=[0,1])
 
         assert_frame_equal(frame, df)
+        self.assertEqual(frame.index.names, df.index.names)
         self.frame.index = old_index # needed if setUP becomes a classmethod
 
         # try multiindex with dates
@@ -1965,6 +1965,15 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         assert_frame_equal(pivoted, expected)
 
+        # name tracking
+        self.assertEqual(pivoted.index.name, 'index')
+        self.assertEqual(pivoted.columns.name, 'columns')
+
+        # don't specify values
+        pivoted = frame.pivot(index='index', columns='columns')
+        self.assertEqual(pivoted.index.name, 'index')
+        self.assertEqual(pivoted.columns.names, [None, 'columns'])
+
         # pivot multiple columns
         wp = tm.makePanel()
         lp = wp.to_long()
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 98b6040a5..70f1946b0 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -566,7 +566,8 @@ class TestMultiIndex(unittest.TestCase):
         minor_labels = np.array([0, 1, 0, 1, 0, 1])
 
         self.index = MultiIndex(levels=[major_axis, minor_axis],
-                                labels=[major_labels, minor_labels])
+                                labels=[major_labels, minor_labels],
+                                names=['first', 'second'])
 
     def test_constructor_single_level(self):
         single_level = MultiIndex(levels=[['foo', 'bar', 'baz', 'qux']],
@@ -603,7 +604,6 @@ class TestMultiIndex(unittest.TestCase):
         self.assert_(result == expected)
 
     def test_pickle(self):
-        import pickle
         pickled = pickle.dumps(self.index)
         unpickled = pickle.loads(pickled)
         self.assert_(self.index.equals(unpickled))
@@ -945,6 +945,11 @@ class TestMultiIndex(unittest.TestCase):
         expected = self.index[[2, 3, 5]]
         self.assert_(dropped.equals(expected))
 
+    def test_droplevel_with_names(self):
+        index = self.index[self.index.get_loc('foo')]
+        dropped = index.droplevel(0)
+        self.assertEqual(dropped.name, 'second')
+
     def test_insert(self):
         # key contained in all levels
         new_index = self.index.insert(0, ('bar', 'two'))
