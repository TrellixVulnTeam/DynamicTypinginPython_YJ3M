commit eb80a1cc5ed2fc0dcacce6c5693826a60b8fa0f2
Author: Chang She <chang@lambdafoundry.com>
Date:   Fri May 11 16:15:42 2012 -0400

    ENH: inplace keyword to DataFrame.rename #207

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index e0fc9d294..4bc765fe5 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2777,7 +2777,7 @@ class DataFrame(NDFrame):
     #----------------------------------------------------------------------
     # Rename
 
-    def rename(self, index=None, columns=None, copy=True):
+    def rename(self, index=None, columns=None, copy=True, inplace=False):
         """
         Alter index and / or columns using input function or
         functions. Function / dict values must be unique (1-to-1). Labels not
@@ -2791,6 +2791,9 @@ class DataFrame(NDFrame):
             Transformation to apply to column values
         copy : boolean, default True
             Also copy underlying data
+        inplace : boolean, default False
+            Whether to return a new DataFrame. If True then value of copy is
+            ignored.
 
         See also
         --------
@@ -2810,7 +2813,7 @@ class DataFrame(NDFrame):
 
         self._consolidate_inplace()
 
-        result = self.copy(deep=copy)
+        result = self if inplace else self.copy(deep=copy)
 
         if index is not None:
             result._rename_index_inplace(index_f)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 2551eda53..7919aa8ff 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -4094,6 +4094,15 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         renamed['foo'] = 1.
         self.assert_((self.frame['C'] == 1.).all())
 
+    def test_rename_inplace(self):
+        self.frame.rename(columns={'C' : 'foo'})
+        self.assert_('C' in self.frame)
+        self.assert_('foo' not in self.frame)
+
+        self.frame.rename(columns={'C' : 'foo'}, inplace=True)
+        self.assert_('C' not in self.frame)
+        self.assert_('foo' in self.frame)
+
     #----------------------------------------------------------------------
     # Time series related
 
