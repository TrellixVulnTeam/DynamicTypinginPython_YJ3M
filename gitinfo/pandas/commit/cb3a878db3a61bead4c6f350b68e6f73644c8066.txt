commit cb3a878db3a61bead4c6f350b68e6f73644c8066
Author: Adam Klein <adamklein@gmail.com>
Date:   Wed Feb 1 13:12:14 2012 -0500

    BLD: #728, make tseries build cleanly

diff --git a/pandas/src/hashtable.pyx b/pandas/src/hashtable.pyx
index e46fc381d..3ef4bd244 100644
--- a/pandas/src/hashtable.pyx
+++ b/pandas/src/hashtable.pyx
@@ -3,7 +3,7 @@ from khash cimport *
 def test(ndarray arr, Py_ssize_t size_hint):
     cdef:
         kh_pymap_t *table
-        int ret
+        int ret=0
         khiter_t k
         PyObject **data
         Py_ssize_t i, n
@@ -38,7 +38,7 @@ def test_str(ndarray arr, Py_ssize_t size_hint):
     cdef:
         kh_str_t *table
         kh_cstr_t val
-        int ret
+        int ret=0
         khiter_t k
         PyObject **data
         Py_ssize_t i, n
@@ -93,7 +93,7 @@ def obj_unique(ndarray[object] arr):
         # PyObject *obj
         object obj
         PyObject **data
-        int ret
+        int ret=0
         khiter_t k
         Py_ssize_t i, n
         list uniques
@@ -127,7 +127,7 @@ def int64_unique(ndarray[int64_t] arr):
         # PyObject *obj
         int64_t obj
         PyObject **data
-        int ret
+        int ret=0
         khiter_t k
         Py_ssize_t i, j, n
         ndarray[int64_t] uniques
@@ -190,7 +190,7 @@ cdef class StringHashTable:
     cpdef set_item(self, object key, Py_ssize_t val):
         cdef:
             khiter_t k
-            int ret
+            int ret=0
             char* buf
 
         buf = util.get_c_string(key)
@@ -224,7 +224,7 @@ cdef class StringHashTable:
         cdef:
             Py_ssize_t i, n = len(values)
             Py_ssize_t idx, count = 0
-            int ret
+            int ret=0
             object val
             char *buf
             khiter_t k
@@ -252,7 +252,7 @@ cdef class StringHashTable:
             ndarray[int32_t] counts = np.empty(n, dtype=np.int32)
             dict reverse = {}
             Py_ssize_t idx, count = 0
-            int ret
+            int ret=0
             object val
             char *buf
             khiter_t k
@@ -307,7 +307,7 @@ cdef class Int32HashTable:
             raise KeyError(val)
 
     def get_iter_test(self, int32_t key, Py_ssize_t iterations):
-        cdef Py_ssize_t i, val
+        cdef Py_ssize_t i, val=0
         for i in range(iterations):
             k = kh_get_int32(self.table, val)
             if k != self.table.n_buckets:
@@ -316,7 +316,7 @@ cdef class Int32HashTable:
     cpdef set_item(self, int32_t key, Py_ssize_t val):
         cdef:
             khiter_t k
-            int ret
+            int ret=0
 
         k = kh_put_int32(self.table, key, &ret)
         self.table.keys[k] = key
@@ -328,7 +328,7 @@ cdef class Int32HashTable:
     def map_locations(self, ndarray[int32_t] values):
         cdef:
             Py_ssize_t i, n = len(values)
-            int ret
+            int ret=0
             int32_t val
             khiter_t k
 
@@ -341,7 +341,7 @@ cdef class Int32HashTable:
     def lookup_locations(self, ndarray[int32_t] values):
         cdef:
             Py_ssize_t i, n = len(values)
-            int ret
+            int ret=0
             int32_t val
             khiter_t k
             ndarray[int32_t] locs = np.empty(n, dtype='i4')
@@ -363,7 +363,7 @@ cdef class Int32HashTable:
             ndarray[int32_t] counts = np.empty(n, dtype=np.int32)
             dict reverse = {}
             Py_ssize_t idx, count = 0
-            int ret
+            int ret=0
             int32_t val
             khiter_t k
 
@@ -411,7 +411,7 @@ cdef class Int64HashTable:
             raise KeyError(val)
 
     def get_iter_test(self, int64_t key, Py_ssize_t iterations):
-        cdef Py_ssize_t i, val
+        cdef Py_ssize_t i, val=0
         for i in range(iterations):
             k = kh_get_int64(self.table, val)
             if k != self.table.n_buckets:
@@ -420,7 +420,7 @@ cdef class Int64HashTable:
     cpdef set_item(self, int64_t key, Py_ssize_t val):
         cdef:
             khiter_t k
-            int ret
+            int ret=0
 
         k = kh_put_int64(self.table, key, &ret)
         self.table.keys[k] = key
@@ -432,7 +432,7 @@ cdef class Int64HashTable:
     def map(self, ndarray[int64_t] keys, ndarray[int64_t] values):
         cdef:
             Py_ssize_t i, n = len(values)
-            int ret
+            int ret=0
             int64_t key
             khiter_t k
 
@@ -444,7 +444,7 @@ cdef class Int64HashTable:
     def map_locations(self, ndarray[int64_t] values):
         cdef:
             Py_ssize_t i, n = len(values)
-            int ret
+            int ret=0
             int64_t val
             khiter_t k
 
@@ -457,7 +457,7 @@ cdef class Int64HashTable:
     def lookup(self, ndarray[int64_t] values):
         cdef:
             Py_ssize_t i, n = len(values)
-            int ret
+            int ret=0
             int64_t val
             khiter_t k
             ndarray[int64_t] locs = np.empty(n, dtype='i8')
@@ -475,7 +475,7 @@ cdef class Int64HashTable:
     def lookup_i4(self, ndarray[int64_t] values):
         cdef:
             Py_ssize_t i, n = len(values)
-            int ret
+            int ret=0
             int64_t val
             khiter_t k
             ndarray[int32_t] locs = np.empty(n, dtype='i4')
@@ -502,7 +502,7 @@ cdef class Int64HashTable:
             ndarray[int32_t] labels
             ndarray[int32_t] counts
             Py_ssize_t idx, count = count_prior
-            int ret
+            int ret=0
             int64_t val
             khiter_t k
 
@@ -531,7 +531,7 @@ cdef class Int64HashTable:
             Py_ssize_t i, n = len(values)
             ndarray[int32_t] labels
             Py_ssize_t idx, count = 0
-            int ret
+            int ret=0
             int64_t val
             khiter_t k
 
@@ -562,7 +562,7 @@ cdef class Int64HashTable:
         cdef:
             Py_ssize_t i, n = len(values)
             Py_ssize_t idx, count = 0
-            int ret
+            int ret=0
             int64_t val
             khiter_t k
             list uniques = []
@@ -605,7 +605,7 @@ cdef class Float64HashTable:
         cdef:
             Py_ssize_t i, n = len(values)
             Py_ssize_t idx, count = 0
-            int ret
+            int ret=0
             float64_t val
             khiter_t k
             list uniques = []
@@ -663,7 +663,7 @@ cdef class PyObjectHashTable:
     cpdef set_item(self, object key, Py_ssize_t val):
         cdef:
             khiter_t k
-            int ret
+            int ret=0
             char* buf
 
         k = kh_put_pymap(self.table, <PyObject*>key, &ret)
@@ -676,7 +676,7 @@ cdef class PyObjectHashTable:
     def map_locations(self, ndarray[object] values):
         cdef:
             Py_ssize_t i, n = len(values)
-            int ret
+            int ret=0
             object val
             khiter_t k
 
@@ -689,7 +689,7 @@ cdef class PyObjectHashTable:
     def lookup_locations(self, ndarray[object] values):
         cdef:
             Py_ssize_t i, n = len(values)
-            int ret
+            int ret=0
             object val
             khiter_t k
             ndarray[int32_t] locs = np.empty(n, dtype='i4')
@@ -707,7 +707,7 @@ cdef class PyObjectHashTable:
     def lookup_locations2(self, ndarray[object] values):
         cdef:
             Py_ssize_t i, n = len(values)
-            int ret
+            int ret=0
             object val
             khiter_t k
             long hval
@@ -724,7 +724,7 @@ cdef class PyObjectHashTable:
         cdef:
             Py_ssize_t i, n = len(values)
             Py_ssize_t idx, count = 0
-            int ret
+            int ret=0
             object val
             khiter_t k
             list uniques = []
@@ -745,7 +745,7 @@ cdef class PyObjectHashTable:
             ndarray[int32_t] labels
             ndarray[int32_t] counts
             Py_ssize_t idx, count = count_prior
-            int ret
+            int ret=0
             object val
             khiter_t k
 
@@ -885,7 +885,7 @@ cdef class DictFactorizer:
             ndarray[int32_t] labels
             ndarray[int32_t] counts
             Py_ssize_t idx, count = self.count
-            int ret
+            int ret=0
             object val
 
         labels = np.empty(n, dtype=np.int32)
@@ -954,7 +954,7 @@ cdef class DictFactorizer:
 def lookup_locations2(ndarray[object] values):
     cdef:
         Py_ssize_t i, n = len(values)
-        int ret
+        int ret=0
         object val
         khiter_t k
         long hval
diff --git a/pandas/src/khash.h b/pandas/src/khash.h
index d973d0619..242f66f1a 100644
--- a/pandas/src/khash.h
+++ b/pandas/src/khash.h
@@ -191,7 +191,7 @@ static const double __ac_HASH_UPPER = 0.77;
 		khkey_t *keys;													\
 		khval_t *vals;													\
 	} kh_##name##_t;													\
-	SCOPE kh_##name##_t *kh_init_##name() {								\
+	SCOPE kh_##name##_t *kh_init_##name(void) {								\
 		return (kh_##name##_t*)calloc(1, sizeof(kh_##name##_t));		\
 	}																	\
 	SCOPE void kh_destroy_##name(kh_##name##_t *h)						\
@@ -404,7 +404,7 @@ static PANDAS_INLINE khint_t __ac_Wang_hash(khint_t key)
   @param  name  Name of the hash table [symbol]
   @return       Pointer to the hash table [khash_t(name)*]
  */
-#define kh_init(name) kh_init_##name()
+#define kh_init(name) kh_init_##name(void)
 
 /*! @function
   @abstract     Destroy a hash table.
diff --git a/pandas/src/moments.pyx b/pandas/src/moments.pyx
index 0cbe0ebb5..6bf644cf9 100644
--- a/pandas/src/moments.pyx
+++ b/pandas/src/moments.pyx
@@ -444,7 +444,7 @@ from skiplist cimport *
 def roll_median_c(ndarray[float64_t] arg, int win, int minp):
     cdef double val, res, prev
     cdef:
-        int ret
+        int ret=0
         skiplist_t *sl
         Py_ssize_t midpoint, nobs = 0, i
 
diff --git a/pandas/src/skiplist.h b/pandas/src/skiplist.h
index bb0fec94a..57b320050 100644
--- a/pandas/src/skiplist.h
+++ b/pandas/src/skiplist.h
@@ -58,7 +58,7 @@ typedef struct {
   int *tmp_steps;
 } skiplist_t;
 
-static PANDAS_INLINE double urand() {
+static PANDAS_INLINE double urand(void) {
   return rand() / ((double) RAND_MAX + 1);
 }
 
@@ -186,7 +186,7 @@ static PANDAS_INLINE double skiplist_get(skiplist_t *skp, int i, int *ret) {
 }
 
 static PANDAS_INLINE int skiplist_insert(skiplist_t *skp, double value) {
-  node_t *node, *prevnode, *newnode, *next_at_level, *tmp;
+  node_t *node, *prevnode, *newnode, *next_at_level;
   int *steps_at_level;
   int size, steps, level;
   node_t **chain;
diff --git a/pandas/src/tseries.pyx b/pandas/src/tseries.pyx
index cc43640a3..8160ce73c 100644
--- a/pandas/src/tseries.pyx
+++ b/pandas/src/tseries.pyx
@@ -57,7 +57,7 @@ PyDateTime_IMPORT
 
 # initialize numpy
 import_array()
-
+import_ufunc()
 
 cpdef map_indices_list(list index):
     '''
diff --git a/vb_suite/benchmarks.py b/vb_suite/benchmarks.py
deleted file mode 100644
index e69de29bb..000000000
diff --git a/vb_suite/test.py b/vb_suite/test.py
index 25c6dfe16..b565ea37f 100644
--- a/vb_suite/test.py
+++ b/vb_suite/test.py
@@ -9,7 +9,7 @@ from vbench.git import GitRepo
 REPO_PATH = '/home/adam/code/pandas'
 repo = GitRepo(REPO_PATH)
 
-con = sqlite3.connect('gb_suite/benchmarks.db')
+con = sqlite3.connect('vb_suite/benchmarks.db')
 
 bmk = '36900a889961162138c140ce4ae3c205'
 # bmk = '9d7b8c04b532df6c2d55ef497039b0ce'
