commit 0a7ba6f3e85f7fc0b3be7ae993ca8d5ede138fdf
Author: Chang She <changshe@gmail.com>
Date:   Thu Dec 13 23:21:20 2012 -0500

    ENH: add max_cols as keyword in DataFrame.info #2524

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index d376cabdc..0f770937d 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1566,7 +1566,7 @@ class DataFrame(NDFrame):
         if buf is None:
             return formatter.buf.getvalue()
 
-    def info(self, verbose=True, buf=None):
+    def info(self, verbose=True, buf=None, max_cols=None):
         """
         Concise summary of a DataFrame, used in __repr__ when very large.
 
@@ -1575,6 +1575,8 @@ class DataFrame(NDFrame):
         verbose : boolean, default True
             If False, don't print column count summary
         buf : writable buffer, defaults to sys.stdout
+        max_cols : int, default None
+            Determines whether full summary or short summary is printed
         """
         from pandas.core.format import _put_lines
 
@@ -1594,7 +1596,10 @@ class DataFrame(NDFrame):
         cols = self.columns
 
         # hack
-        if verbose and len(self.columns) < get_option('print.max_info_columns'):
+        if max_cols is None:
+            max_cols = get_option('print.max_info_columns')
+
+        if verbose and len(self.columns) <= max_cols:
             lines.append('Data columns:')
             space = max([len(com.pprint_thing(k)) for k in self.columns]) + 4
             counts = self.count()
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 17d629b03..e2006672a 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3978,16 +3978,24 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
     def test_info_wide(self):
         from pandas import set_option, reset_option
         io = StringIO()
-        df = DataFrame(np.random.randn(5, 100))
+        df = DataFrame(np.random.randn(5, 101))
         df.info(buf=io)
-        self.assert_(len(io.getvalue().splitlines()) == 4)
+        rs = io.getvalue()
+        self.assert_(len(rs.splitlines()) == 4)
+
+        io = StringIO()
+        df.info(buf=io, max_cols=101)
+        rs = io.getvalue()
+        self.assert_(len(rs.splitlines()) > 100)
+        xp = rs
 
         set_option('print.max_info_columns', 101)
         io = StringIO()
         df.info(buf=io)
-        self.assert_(len(io.getvalue().splitlines()) > 100)
+        self.assert_(rs == xp)
         reset_option('print.max_info_columns')
 
+
     def test_info_duplicate_columns(self):
         io = StringIO()
 
