commit 721739339597d6ddd236bc056b50a86bde3d6040
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Sat Mar 7 02:33:23 2020 -0800

    CLN: remove is_period_arraylike, is_datetime_arraylike (#32406)

diff --git a/pandas/core/dtypes/common.py b/pandas/core/dtypes/common.py
index df5bac107..1afe7edf2 100644
--- a/pandas/core/dtypes/common.py
+++ b/pandas/core/dtypes/common.py
@@ -7,7 +7,7 @@ import warnings
 
 import numpy as np
 
-from pandas._libs import algos, lib
+from pandas._libs import algos
 from pandas._libs.tslibs import conversion
 from pandas._typing import ArrayLike, DtypeObj
 
@@ -19,14 +19,7 @@ from pandas.core.dtypes.dtypes import (
     PeriodDtype,
     registry,
 )
-from pandas.core.dtypes.generic import (
-    ABCCategorical,
-    ABCDatetimeIndex,
-    ABCIndexClass,
-    ABCPeriodArray,
-    ABCPeriodIndex,
-    ABCSeries,
-)
+from pandas.core.dtypes.generic import ABCCategorical, ABCIndexClass
 from pandas.core.dtypes.inference import (  # noqa:F401
     is_array_like,
     is_bool,
@@ -606,71 +599,6 @@ def is_string_dtype(arr_or_dtype) -> bool:
     return _is_dtype(arr_or_dtype, condition)
 
 
-def is_period_arraylike(arr) -> bool:
-    """
-    Check whether an array-like is a periodical array-like or PeriodIndex.
-
-    Parameters
-    ----------
-    arr : array-like
-        The array-like to check.
-
-    Returns
-    -------
-    boolean
-        Whether or not the array-like is a periodical array-like or
-        PeriodIndex instance.
-
-    Examples
-    --------
-    >>> is_period_arraylike([1, 2, 3])
-    False
-    >>> is_period_arraylike(pd.Index([1, 2, 3]))
-    False
-    >>> is_period_arraylike(pd.PeriodIndex(["2017-01-01"], freq="D"))
-    True
-    """
-    if isinstance(arr, (ABCPeriodIndex, ABCPeriodArray)):
-        return True
-    elif isinstance(arr, (np.ndarray, ABCSeries)):
-        return is_period_dtype(arr.dtype)
-    return getattr(arr, "inferred_type", None) == "period"
-
-
-def is_datetime_arraylike(arr) -> bool:
-    """
-    Check whether an array-like is a datetime array-like or DatetimeIndex.
-
-    Parameters
-    ----------
-    arr : array-like
-        The array-like to check.
-
-    Returns
-    -------
-    boolean
-        Whether or not the array-like is a datetime array-like or
-        DatetimeIndex.
-
-    Examples
-    --------
-    >>> is_datetime_arraylike([1, 2, 3])
-    False
-    >>> is_datetime_arraylike(pd.Index([1, 2, 3]))
-    False
-    >>> is_datetime_arraylike(pd.DatetimeIndex([1, 2, 3]))
-    True
-    """
-    if isinstance(arr, ABCDatetimeIndex):
-        return True
-    elif isinstance(arr, (np.ndarray, ABCSeries)):
-        return (
-            is_object_dtype(arr.dtype)
-            and lib.infer_dtype(arr, skipna=False) == "datetime"
-        )
-    return getattr(arr, "inferred_type", None) == "datetime"
-
-
 def is_dtype_equal(source, target) -> bool:
     """
     Check if two dtypes are equal.
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 866b58c1f..f71960731 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -72,7 +72,6 @@ from pandas.core.dtypes.common import (
     is_number,
     is_numeric_dtype,
     is_object_dtype,
-    is_period_arraylike,
     is_re_compilable,
     is_scalar,
     is_timedelta64_dtype,
@@ -1342,7 +1341,7 @@ class NDFrame(PandasObject, SelectionMixin, indexing.IndexingMixin):
 
     def __pos__(self):
         values = self._values
-        if is_bool_dtype(values) or is_period_arraylike(values):
+        if is_bool_dtype(values):
             arr = values
         elif (
             is_numeric_dtype(values)
diff --git a/pandas/core/indexes/accessors.py b/pandas/core/indexes/accessors.py
index 71ae92df1..8cfe1f4ac 100644
--- a/pandas/core/indexes/accessors.py
+++ b/pandas/core/indexes/accessors.py
@@ -9,10 +9,9 @@ from pandas.core.dtypes.common import (
     is_categorical_dtype,
     is_datetime64_dtype,
     is_datetime64tz_dtype,
-    is_datetime_arraylike,
     is_integer_dtype,
     is_list_like,
-    is_period_arraylike,
+    is_period_dtype,
     is_timedelta64_dtype,
 )
 from pandas.core.dtypes.generic import ABCSeries
@@ -50,12 +49,8 @@ class Properties(PandasDelegate, PandasObject, NoNewAttributesMixin):
         elif is_timedelta64_dtype(data.dtype):
             return TimedeltaIndex(data, copy=False, name=self.name)
 
-        else:
-            if is_period_arraylike(data):
-                # TODO: use to_period_array
-                return PeriodArray(data, copy=False)
-            if is_datetime_arraylike(data):
-                return DatetimeIndex(data, copy=False, name=self.name)
+        elif is_period_dtype(data):
+            return PeriodArray(data, copy=False)
 
         raise TypeError(
             f"cannot convert an object of type {type(data)} to a datetimelike index"
@@ -335,9 +330,7 @@ class CombinedDatetimelikeProperties(
             return DatetimeProperties(data, orig)
         elif is_timedelta64_dtype(data.dtype):
             return TimedeltaProperties(data, orig)
-        elif is_period_arraylike(data):
+        elif is_period_dtype(data):
             return PeriodProperties(data, orig)
-        elif is_datetime_arraylike(data):
-            return DatetimeProperties(data, orig)
 
         raise AttributeError("Can only use .dt accessor with datetimelike values")
diff --git a/pandas/tests/dtypes/test_common.py b/pandas/tests/dtypes/test_common.py
index 8da279783..66bf696cb 100644
--- a/pandas/tests/dtypes/test_common.py
+++ b/pandas/tests/dtypes/test_common.py
@@ -281,18 +281,6 @@ def test_is_string_dtype():
     assert com.is_string_dtype(pd.array(["a", "b"], dtype="string"))
 
 
-def test_is_period_arraylike():
-    assert not com.is_period_arraylike([1, 2, 3])
-    assert not com.is_period_arraylike(pd.Index([1, 2, 3]))
-    assert com.is_period_arraylike(pd.PeriodIndex(["2017-01-01"], freq="D"))
-
-
-def test_is_datetime_arraylike():
-    assert not com.is_datetime_arraylike([1, 2, 3])
-    assert not com.is_datetime_arraylike(pd.Index([1, 2, 3]))
-    assert com.is_datetime_arraylike(pd.DatetimeIndex([1, 2, 3]))
-
-
 integer_dtypes: List = []
 
 
diff --git a/pandas/tseries/frequencies.py b/pandas/tseries/frequencies.py
index 042635131..4af516af8 100644
--- a/pandas/tseries/frequencies.py
+++ b/pandas/tseries/frequencies.py
@@ -19,7 +19,7 @@ from pandas.util._decorators import cache_readonly
 
 from pandas.core.dtypes.common import (
     is_datetime64_dtype,
-    is_period_arraylike,
+    is_period_dtype,
     is_timedelta64_dtype,
 )
 from pandas.core.dtypes.generic import ABCSeries
@@ -269,7 +269,7 @@ def infer_freq(index, warn: bool = True) -> Optional[str]:
         index = values
 
     inferer: _FrequencyInferer
-    if is_period_arraylike(index):
+    if is_period_dtype(index):
         raise TypeError(
             "PeriodIndex given. Check the `freq` attribute "
             "instead of using infer_freq."
