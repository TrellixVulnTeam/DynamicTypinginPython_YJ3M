commit cca710b42455664b44022e49f760ef790e9a3320
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Mon May 11 11:54:32 2020 -0700

    CLN: make sure we do no-copy ravel() (#34108)

diff --git a/pandas/_libs/tslibs/conversion.pyx b/pandas/_libs/tslibs/conversion.pyx
index 0721f4cdb..c18425f7b 100644
--- a/pandas/_libs/tslibs/conversion.pyx
+++ b/pandas/_libs/tslibs/conversion.pyx
@@ -105,10 +105,10 @@ def ensure_datetime64ns(arr: ndarray, copy: bool=True):
         dtype = arr.dtype
         arr = arr.astype(dtype.newbyteorder("<"))
 
-    ivalues = arr.view(np.int64).ravel()
+    ivalues = arr.view(np.int64).ravel("K")
 
     result = np.empty(shape, dtype=DT64NS_DTYPE)
-    iresult = result.ravel().view(np.int64)
+    iresult = result.ravel("K").view(np.int64)
 
     if len(iresult) == 0:
         result = arr.view(DT64NS_DTYPE)
diff --git a/pandas/core/dtypes/cast.py b/pandas/core/dtypes/cast.py
index 3cb52338b..0855d9335 100644
--- a/pandas/core/dtypes/cast.py
+++ b/pandas/core/dtypes/cast.py
@@ -126,7 +126,7 @@ def maybe_downcast_to_dtype(result, dtype):
 
     if isinstance(dtype, str):
         if dtype == "infer":
-            inferred_type = lib.infer_dtype(ensure_object(result.ravel()), skipna=False)
+            inferred_type = lib.infer_dtype(ensure_object(result), skipna=False)
             if inferred_type == "boolean":
                 dtype = "bool"
             elif inferred_type == "integer":
diff --git a/pandas/core/internals/blocks.py b/pandas/core/internals/blocks.py
index 4666b0c5b..3e2b5bdcc 100644
--- a/pandas/core/internals/blocks.py
+++ b/pandas/core/internals/blocks.py
@@ -1325,7 +1325,7 @@ class Block(PandasObject):
             fastres = expressions.where(cond, values, other)
             return fastres
 
-        if cond.ravel().all():
+        if cond.ravel("K").all():
             result = values
         else:
             # see if we can operate on the entire block, or need item-by-item
@@ -2382,7 +2382,7 @@ class ObjectBlock(Block):
         we can be a bool if we have only bool values but are of type
         object
         """
-        return lib.is_bool_array(self.values.ravel())
+        return lib.is_bool_array(self.values.ravel("K"))
 
     def convert(
         self,
diff --git a/pandas/core/nanops.py b/pandas/core/nanops.py
index 01035b97c..0a9d6f217 100644
--- a/pandas/core/nanops.py
+++ b/pandas/core/nanops.py
@@ -155,9 +155,9 @@ def _bn_ok_dtype(dtype: DtypeObj, name: str) -> bool:
 def _has_infs(result) -> bool:
     if isinstance(result, np.ndarray):
         if result.dtype == "f8":
-            return lib.has_infs_f8(result.ravel())
+            return lib.has_infs_f8(result.ravel("K"))
         elif result.dtype == "f4":
-            return lib.has_infs_f4(result.ravel())
+            return lib.has_infs_f4(result.ravel("K"))
     try:
         return np.isinf(result).any()
     except (TypeError, NotImplementedError):
@@ -612,7 +612,7 @@ def nanmedian(values, axis=None, skipna=True, mask=None):
             values[mask] = np.nan
 
     if axis is None:
-        values = values.ravel()
+        values = values.ravel("K")
 
     notempty = values.size
 
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 9b3a29026..345402e61 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -2925,7 +2925,7 @@ class GenericFixed(Fixed):
 
             # infer the type, warn if we have a non-string type here (for
             # performance)
-            inferred_type = lib.infer_dtype(value.ravel(), skipna=False)
+            inferred_type = lib.infer_dtype(value, skipna=False)
             if empty_array:
                 pass
             elif inferred_type == "string":
@@ -4769,7 +4769,7 @@ def _maybe_convert_for_string_atom(
     data = block.values
 
     # see if we have a valid string type
-    inferred_type = lib.infer_dtype(data.ravel(), skipna=False)
+    inferred_type = lib.infer_dtype(data, skipna=False)
     if inferred_type != "string":
 
         # we cannot serialize this data, so report an exception on a column
@@ -4777,7 +4777,7 @@ def _maybe_convert_for_string_atom(
         for i in range(len(block.shape[0])):
 
             col = block.iget(i)
-            inferred_type = lib.infer_dtype(col.ravel(), skipna=False)
+            inferred_type = lib.infer_dtype(col, skipna=False)
             if inferred_type != "string":
                 iloc = block.mgr_locs.indexer[i]
                 raise TypeError(
diff --git a/pandas/tests/window/conftest.py b/pandas/tests/window/conftest.py
index 856c8f388..4f462a09a 100644
--- a/pandas/tests/window/conftest.py
+++ b/pandas/tests/window/conftest.py
@@ -226,7 +226,7 @@ def _create_consistency_data():
         ] + [DataFrame(s) for s in create_series()]
 
     def is_constant(x):
-        values = x.values.ravel()
+        values = x.values.ravel("K")
         return len(set(values[notna(values)])) == 1
 
     def no_nans(x):
