commit 0f821f9aa276c5a85f84cceeaad1849993e1f32a
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Jul 24 14:14:15 2011 -0400

    BUG: explicit dtype in otherwise all-NA DataFrame

diff --git a/RELEASE.rst b/RELEASE.rst
index 3891b8c08..780890c42 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -175,6 +175,7 @@ Release notes
 * Disabled `Index` objects from being hashable, like ndarrays
 * Added `__ne__` implementation to `Index` so that operations like ts[ts != idx]
   will work
+* Added `__ne__` implementation to `DataFrame`
 * Bug / unintuitive result when calling `fillna` on unordered labels
 * Bug calling `sum` on boolean DataFrame
 * Bug fix when creating a DataFrame from a dict with scalar values
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 3ba67baa8..0de4b7b04 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -177,13 +177,15 @@ class DataFrame(NDFrame):
         if columns is not None:
             columns = _ensure_index(columns)
             data = dict((k, v) for k, v in data.iteritems() if k in columns)
+        else:
+            columns = Index(_try_sort(data.keys()))
 
         # figure out the index, if necessary
         if index is None:
             index = extract_index(data)
 
         # don't force copy because getting jammed in an ndarray anyway
-        homogenized = _homogenize_series(data, index, dtype)
+        homogenized = _homogenize(data, index, columns, dtype)
 
         # segregates dtypes and forms blocks matching to columns
         blocks, columns = form_blocks(homogenized, index, columns)
@@ -2505,10 +2507,16 @@ def _rec_to_dict(arr):
     sdict = dict((k, arr[k]) for k in columns)
     return columns, sdict
 
-def _homogenize_series(data, index, dtype=None):
+def _homogenize(data, index, columns, dtype=None):
     homogenized = {}
 
-    for k, v in data.iteritems():
+    for k in columns:
+        if k not in data:
+            v = np.empty(len(index), dtype=dtype)
+            v.fill(nan)
+        else:
+            v = data[k]
+
         if isinstance(v, Series):
             if dtype is not None:
                 v = v.astype(dtype)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index f8567804c..0260ad8f4 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3,6 +3,7 @@ from copy import deepcopy
 from datetime import datetime, timedelta
 from cStringIO import StringIO
 import cPickle as pickle
+import operator
 import os
 import unittest
 
@@ -784,6 +785,10 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         df = DataFrame(index=[])
         self.assertEqual(df.values.shape, (0, 0))
 
+        # empty but with specified dtype
+        df = DataFrame(index=range(10), columns=['a','b'], dtype=object)
+        self.assert_(df.values.dtype == np.object_)
+
     def test_constructor_scalar_inference(self):
         data = {'int' : 1, 'bool' : True,
                 'float' : 3., 'object' : 'foo'}
@@ -1210,8 +1215,6 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         self.assertEqual(len(result.columns), 0)
 
     def test_comparisons(self):
-        import operator
-
         df1 = tm.makeTimeDataFrame()
         df2 = tm.makeTimeDataFrame()
 
@@ -1935,11 +1938,15 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
                       columns=np.arange(6))
         expected = DataFrame([[3., 3., nan, 4., 6., nan]],
                              columns=np.arange(6))
+
         result = a.combineAdd(b)
         assert_frame_equal(result, expected)
         result2 = a.T.combineAdd(b.T)
         assert_frame_equal(result2, expected.T)
 
+        expected2 = a.combine(b, operator.add, fill_value=0.)
+        assert_frame_equal(expected, expected2)
+
         # corner cases
         comb = self.frame.combineAdd(self.empty)
         assert_frame_equal(comb, self.frame)
