commit 324379ce75269aa6bced90ecf3edb692539a2742
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Sun Feb 11 06:56:28 2018 -0800

    Organize PeriodIndex tests (#19641)

diff --git a/pandas/tests/indexes/period/test_arithmetic.py b/pandas/tests/indexes/period/test_arithmetic.py
index 356ea5fc6..81171920f 100644
--- a/pandas/tests/indexes/period/test_arithmetic.py
+++ b/pandas/tests/indexes/period/test_arithmetic.py
@@ -11,6 +11,171 @@ from pandas import (Timedelta,
 import pandas.core.indexes.period as period
 
 
+class TestPeriodIndexComparisons(object):
+    @pytest.mark.parametrize('freq', ['M', '2M', '3M'])
+    def test_pi_cmp_pi(self, freq):
+        base = PeriodIndex(['2011-01', '2011-02', '2011-03', '2011-04'],
+                           freq=freq)
+        per = Period('2011-02', freq=freq)
+
+        exp = np.array([False, True, False, False])
+        tm.assert_numpy_array_equal(base == per, exp)
+        tm.assert_numpy_array_equal(per == base, exp)
+
+        exp = np.array([True, False, True, True])
+        tm.assert_numpy_array_equal(base != per, exp)
+        tm.assert_numpy_array_equal(per != base, exp)
+
+        exp = np.array([False, False, True, True])
+        tm.assert_numpy_array_equal(base > per, exp)
+        tm.assert_numpy_array_equal(per < base, exp)
+
+        exp = np.array([True, False, False, False])
+        tm.assert_numpy_array_equal(base < per, exp)
+        tm.assert_numpy_array_equal(per > base, exp)
+
+        exp = np.array([False, True, True, True])
+        tm.assert_numpy_array_equal(base >= per, exp)
+        tm.assert_numpy_array_equal(per <= base, exp)
+
+        exp = np.array([True, True, False, False])
+        tm.assert_numpy_array_equal(base <= per, exp)
+        tm.assert_numpy_array_equal(per >= base, exp)
+
+        idx = PeriodIndex(['2011-02', '2011-01', '2011-03', '2011-05'],
+                          freq=freq)
+
+        exp = np.array([False, False, True, False])
+        tm.assert_numpy_array_equal(base == idx, exp)
+
+        exp = np.array([True, True, False, True])
+        tm.assert_numpy_array_equal(base != idx, exp)
+
+        exp = np.array([False, True, False, False])
+        tm.assert_numpy_array_equal(base > idx, exp)
+
+        exp = np.array([True, False, False, True])
+        tm.assert_numpy_array_equal(base < idx, exp)
+
+        exp = np.array([False, True, True, False])
+        tm.assert_numpy_array_equal(base >= idx, exp)
+
+        exp = np.array([True, False, True, True])
+        tm.assert_numpy_array_equal(base <= idx, exp)
+
+    @pytest.mark.parametrize('freq', ['M', '2M', '3M'])
+    def test_pi_cmp_pi_mismatched_freq_raises(self, freq):
+        # different base freq
+        base = PeriodIndex(['2011-01', '2011-02', '2011-03', '2011-04'],
+                           freq=freq)
+
+        msg = "Input has different freq=A-DEC from PeriodIndex"
+        with tm.assert_raises_regex(period.IncompatibleFrequency, msg):
+            base <= Period('2011', freq='A')
+
+        with tm.assert_raises_regex(period.IncompatibleFrequency, msg):
+            Period('2011', freq='A') >= base
+
+        idx = PeriodIndex(['2011', '2012', '2013', '2014'], freq='A')
+        with tm.assert_raises_regex(period.IncompatibleFrequency, msg):
+            base <= idx
+
+        # Different frequency
+        msg = "Input has different freq=4M from PeriodIndex"
+        with tm.assert_raises_regex(period.IncompatibleFrequency, msg):
+            base <= Period('2011', freq='4M')
+
+        with tm.assert_raises_regex(period.IncompatibleFrequency, msg):
+            Period('2011', freq='4M') >= base
+
+        idx = PeriodIndex(['2011', '2012', '2013', '2014'], freq='4M')
+        with tm.assert_raises_regex(period.IncompatibleFrequency, msg):
+            base <= idx
+
+    @pytest.mark.parametrize('freq', ['M', '2M', '3M'])
+    def test_pi_cmp_nat(self, freq):
+        idx1 = PeriodIndex(['2011-01', '2011-02', 'NaT', '2011-05'], freq=freq)
+
+        result = idx1 > Period('2011-02', freq=freq)
+        exp = np.array([False, False, False, True])
+        tm.assert_numpy_array_equal(result, exp)
+        result = Period('2011-02', freq=freq) < idx1
+        tm.assert_numpy_array_equal(result, exp)
+
+        result = idx1 == Period('NaT', freq=freq)
+        exp = np.array([False, False, False, False])
+        tm.assert_numpy_array_equal(result, exp)
+        result = Period('NaT', freq=freq) == idx1
+        tm.assert_numpy_array_equal(result, exp)
+
+        result = idx1 != Period('NaT', freq=freq)
+        exp = np.array([True, True, True, True])
+        tm.assert_numpy_array_equal(result, exp)
+        result = Period('NaT', freq=freq) != idx1
+        tm.assert_numpy_array_equal(result, exp)
+
+        idx2 = PeriodIndex(['2011-02', '2011-01', '2011-04', 'NaT'], freq=freq)
+        result = idx1 < idx2
+        exp = np.array([True, False, False, False])
+        tm.assert_numpy_array_equal(result, exp)
+
+        result = idx1 == idx2
+        exp = np.array([False, False, False, False])
+        tm.assert_numpy_array_equal(result, exp)
+
+        result = idx1 != idx2
+        exp = np.array([True, True, True, True])
+        tm.assert_numpy_array_equal(result, exp)
+
+        result = idx1 == idx1
+        exp = np.array([True, True, False, True])
+        tm.assert_numpy_array_equal(result, exp)
+
+        result = idx1 != idx1
+        exp = np.array([False, False, True, False])
+        tm.assert_numpy_array_equal(result, exp)
+
+    @pytest.mark.parametrize('freq', ['M', '2M', '3M'])
+    def test_pi_cmp_nat_mismatched_freq_raises(self, freq):
+        idx1 = PeriodIndex(['2011-01', '2011-02', 'NaT', '2011-05'], freq=freq)
+
+        diff = PeriodIndex(['2011-02', '2011-01', '2011-04', 'NaT'], freq='4M')
+        msg = "Input has different freq=4M from PeriodIndex"
+        with tm.assert_raises_regex(period.IncompatibleFrequency, msg):
+            idx1 > diff
+
+        with tm.assert_raises_regex(period.IncompatibleFrequency, msg):
+            idx1 == diff
+
+    # TODO: De-duplicate with test_pi_cmp_nat
+    def test_comp_nat(self):
+        left = pd.PeriodIndex([pd.Period('2011-01-01'), pd.NaT,
+                               pd.Period('2011-01-03')])
+        right = pd.PeriodIndex([pd.NaT, pd.NaT, pd.Period('2011-01-03')])
+
+        for lhs, rhs in [(left, right),
+                         (left.astype(object), right.astype(object))]:
+            result = lhs == rhs
+            expected = np.array([False, False, True])
+            tm.assert_numpy_array_equal(result, expected)
+
+            result = lhs != rhs
+            expected = np.array([True, True, False])
+            tm.assert_numpy_array_equal(result, expected)
+
+            expected = np.array([False, False, False])
+            tm.assert_numpy_array_equal(lhs == pd.NaT, expected)
+            tm.assert_numpy_array_equal(pd.NaT == rhs, expected)
+
+            expected = np.array([True, True, True])
+            tm.assert_numpy_array_equal(lhs != pd.NaT, expected)
+            tm.assert_numpy_array_equal(pd.NaT != lhs, expected)
+
+            expected = np.array([False, False, False])
+            tm.assert_numpy_array_equal(lhs < pd.NaT, expected)
+            tm.assert_numpy_array_equal(pd.NaT > lhs, expected)
+
+
 class TestPeriodIndexArithmetic(object):
     def test_pi_add_offset_array(self):
         # GH#18849
@@ -250,6 +415,97 @@ class TestPeriodIndexArithmetic(object):
         rng -= 1
         tm.assert_index_equal(rng, expected)
 
+    # ---------------------------------------------------------------
+    # PeriodIndex.shift is used by __add__ and __sub__
+
+    def test_pi_shift_ndarray(self):
+        idx = PeriodIndex(['2011-01', '2011-02', 'NaT',
+                           '2011-04'], freq='M', name='idx')
+        result = idx.shift(np.array([1, 2, 3, 4]))
+        expected = PeriodIndex(['2011-02', '2011-04', 'NaT',
+                                '2011-08'], freq='M', name='idx')
+        tm.assert_index_equal(result, expected)
+
+        idx = PeriodIndex(['2011-01', '2011-02', 'NaT',
+                           '2011-04'], freq='M', name='idx')
+        result = idx.shift(np.array([1, -2, 3, -4]))
+        expected = PeriodIndex(['2011-02', '2010-12', 'NaT',
+                                '2010-12'], freq='M', name='idx')
+        tm.assert_index_equal(result, expected)
+
+    def test_shift(self):
+        pi1 = PeriodIndex(freq='A', start='1/1/2001', end='12/1/2009')
+        pi2 = PeriodIndex(freq='A', start='1/1/2002', end='12/1/2010')
+
+        tm.assert_index_equal(pi1.shift(0), pi1)
+
+        assert len(pi1) == len(pi2)
+        tm.assert_index_equal(pi1.shift(1), pi2)
+
+        pi1 = PeriodIndex(freq='A', start='1/1/2001', end='12/1/2009')
+        pi2 = PeriodIndex(freq='A', start='1/1/2000', end='12/1/2008')
+        assert len(pi1) == len(pi2)
+        tm.assert_index_equal(pi1.shift(-1), pi2)
+
+        pi1 = PeriodIndex(freq='M', start='1/1/2001', end='12/1/2009')
+        pi2 = PeriodIndex(freq='M', start='2/1/2001', end='1/1/2010')
+        assert len(pi1) == len(pi2)
+        tm.assert_index_equal(pi1.shift(1), pi2)
+
+        pi1 = PeriodIndex(freq='M', start='1/1/2001', end='12/1/2009')
+        pi2 = PeriodIndex(freq='M', start='12/1/2000', end='11/1/2009')
+        assert len(pi1) == len(pi2)
+        tm.assert_index_equal(pi1.shift(-1), pi2)
+
+        pi1 = PeriodIndex(freq='D', start='1/1/2001', end='12/1/2009')
+        pi2 = PeriodIndex(freq='D', start='1/2/2001', end='12/2/2009')
+        assert len(pi1) == len(pi2)
+        tm.assert_index_equal(pi1.shift(1), pi2)
+
+        pi1 = PeriodIndex(freq='D', start='1/1/2001', end='12/1/2009')
+        pi2 = PeriodIndex(freq='D', start='12/31/2000', end='11/30/2009')
+        assert len(pi1) == len(pi2)
+        tm.assert_index_equal(pi1.shift(-1), pi2)
+
+    def test_shift_corner_cases(self):
+        # GH#9903
+        idx = pd.PeriodIndex([], name='xxx', freq='H')
+
+        with pytest.raises(TypeError):
+            # period shift doesn't accept freq
+            idx.shift(1, freq='H')
+
+        tm.assert_index_equal(idx.shift(0), idx)
+        tm.assert_index_equal(idx.shift(3), idx)
+
+        idx = pd.PeriodIndex(['2011-01-01 10:00', '2011-01-01 11:00'
+                              '2011-01-01 12:00'], name='xxx', freq='H')
+        tm.assert_index_equal(idx.shift(0), idx)
+        exp = pd.PeriodIndex(['2011-01-01 13:00', '2011-01-01 14:00'
+                              '2011-01-01 15:00'], name='xxx', freq='H')
+        tm.assert_index_equal(idx.shift(3), exp)
+        exp = pd.PeriodIndex(['2011-01-01 07:00', '2011-01-01 08:00'
+                              '2011-01-01 09:00'], name='xxx', freq='H')
+        tm.assert_index_equal(idx.shift(-3), exp)
+
+    def test_shift_nat(self):
+        idx = PeriodIndex(['2011-01', '2011-02', 'NaT',
+                           '2011-04'], freq='M', name='idx')
+        result = idx.shift(1)
+        expected = PeriodIndex(['2011-02', '2011-03', 'NaT',
+                                '2011-05'], freq='M', name='idx')
+        tm.assert_index_equal(result, expected)
+        assert result.name == expected.name
+
+    def test_shift_gh8083(self):
+        # test shift for PeriodIndex
+        # GH#8083
+        drange = pd.period_range('20130101', periods=5, freq='D')
+        result = drange.shift(1)
+        expected = PeriodIndex(['2013-01-02', '2013-01-03', '2013-01-04',
+                                '2013-01-05', '2013-01-06'], freq='D')
+        tm.assert_index_equal(result, expected)
+
 
 class TestPeriodIndexSeriesMethods(object):
     """ Test PeriodIndex and Period Series Ops consistency """
diff --git a/pandas/tests/indexes/period/test_ops.py b/pandas/tests/indexes/period/test_ops.py
index 21a9ffdde..8745de0c2 100644
--- a/pandas/tests/indexes/period/test_ops.py
+++ b/pandas/tests/indexes/period/test_ops.py
@@ -1,11 +1,9 @@
-import pytest
 
 import numpy as np
 
 import pandas as pd
 import pandas._libs.tslib as tslib
 import pandas.util.testing as tm
-import pandas.core.indexes.period as period
 from pandas import (DatetimeIndex, PeriodIndex, Series, Period,
                     _np_version_under1p10, Index)
 
@@ -521,25 +519,8 @@ Freq: Q-DEC"""
         tm.assert_numpy_array_equal(result, exp)
 
     def test_shift(self):
-        # GH 9903
-        idx = pd.PeriodIndex([], name='xxx', freq='H')
-
-        with pytest.raises(TypeError):
-            # period shift doesn't accept freq
-            idx.shift(1, freq='H')
-
-        tm.assert_index_equal(idx.shift(0), idx)
-        tm.assert_index_equal(idx.shift(3), idx)
-
-        idx = pd.PeriodIndex(['2011-01-01 10:00', '2011-01-01 11:00'
-                              '2011-01-01 12:00'], name='xxx', freq='H')
-        tm.assert_index_equal(idx.shift(0), idx)
-        exp = pd.PeriodIndex(['2011-01-01 13:00', '2011-01-01 14:00'
-                              '2011-01-01 15:00'], name='xxx', freq='H')
-        tm.assert_index_equal(idx.shift(3), exp)
-        exp = pd.PeriodIndex(['2011-01-01 07:00', '2011-01-01 08:00'
-                              '2011-01-01 09:00'], name='xxx', freq='H')
-        tm.assert_index_equal(idx.shift(-3), exp)
+        # This is tested in test_arithmetic
+        pass
 
     def test_repeat(self):
         index = pd.period_range('2001-01-01', periods=2, freq='D')
@@ -703,172 +684,3 @@ class TestPeriodIndexSeriesMethods(object):
         f = lambda x: tslib.NaT >= x
         exp = np.array([False, False, False, False], dtype=np.bool)
         self._check(idx, f, exp)
-
-
-class TestPeriodIndexComparisons(object):
-
-    def test_pi_pi_comp(self):
-
-        for freq in ['M', '2M', '3M']:
-            base = PeriodIndex(['2011-01', '2011-02',
-                                '2011-03', '2011-04'], freq=freq)
-            p = Period('2011-02', freq=freq)
-
-            exp = np.array([False, True, False, False])
-            tm.assert_numpy_array_equal(base == p, exp)
-            tm.assert_numpy_array_equal(p == base, exp)
-
-            exp = np.array([True, False, True, True])
-            tm.assert_numpy_array_equal(base != p, exp)
-            tm.assert_numpy_array_equal(p != base, exp)
-
-            exp = np.array([False, False, True, True])
-            tm.assert_numpy_array_equal(base > p, exp)
-            tm.assert_numpy_array_equal(p < base, exp)
-
-            exp = np.array([True, False, False, False])
-            tm.assert_numpy_array_equal(base < p, exp)
-            tm.assert_numpy_array_equal(p > base, exp)
-
-            exp = np.array([False, True, True, True])
-            tm.assert_numpy_array_equal(base >= p, exp)
-            tm.assert_numpy_array_equal(p <= base, exp)
-
-            exp = np.array([True, True, False, False])
-            tm.assert_numpy_array_equal(base <= p, exp)
-            tm.assert_numpy_array_equal(p >= base, exp)
-
-            idx = PeriodIndex(['2011-02', '2011-01', '2011-03',
-                               '2011-05'], freq=freq)
-
-            exp = np.array([False, False, True, False])
-            tm.assert_numpy_array_equal(base == idx, exp)
-
-            exp = np.array([True, True, False, True])
-            tm.assert_numpy_array_equal(base != idx, exp)
-
-            exp = np.array([False, True, False, False])
-            tm.assert_numpy_array_equal(base > idx, exp)
-
-            exp = np.array([True, False, False, True])
-            tm.assert_numpy_array_equal(base < idx, exp)
-
-            exp = np.array([False, True, True, False])
-            tm.assert_numpy_array_equal(base >= idx, exp)
-
-            exp = np.array([True, False, True, True])
-            tm.assert_numpy_array_equal(base <= idx, exp)
-
-            # different base freq
-            msg = "Input has different freq=A-DEC from PeriodIndex"
-            with tm.assert_raises_regex(
-                    period.IncompatibleFrequency, msg):
-                base <= Period('2011', freq='A')
-
-            with tm.assert_raises_regex(
-                    period.IncompatibleFrequency, msg):
-                Period('2011', freq='A') >= base
-
-            with tm.assert_raises_regex(
-                    period.IncompatibleFrequency, msg):
-                idx = PeriodIndex(['2011', '2012', '2013', '2014'], freq='A')
-                base <= idx
-
-            # Different frequency
-            msg = "Input has different freq=4M from PeriodIndex"
-            with tm.assert_raises_regex(
-                    period.IncompatibleFrequency, msg):
-                base <= Period('2011', freq='4M')
-
-            with tm.assert_raises_regex(
-                    period.IncompatibleFrequency, msg):
-                Period('2011', freq='4M') >= base
-
-            with tm.assert_raises_regex(
-                    period.IncompatibleFrequency, msg):
-                idx = PeriodIndex(['2011', '2012', '2013', '2014'], freq='4M')
-                base <= idx
-
-    def test_pi_nat_comp(self):
-        for freq in ['M', '2M', '3M']:
-            idx1 = PeriodIndex(
-                ['2011-01', '2011-02', 'NaT', '2011-05'], freq=freq)
-
-            result = idx1 > Period('2011-02', freq=freq)
-            exp = np.array([False, False, False, True])
-            tm.assert_numpy_array_equal(result, exp)
-            result = Period('2011-02', freq=freq) < idx1
-            tm.assert_numpy_array_equal(result, exp)
-
-            result = idx1 == Period('NaT', freq=freq)
-            exp = np.array([False, False, False, False])
-            tm.assert_numpy_array_equal(result, exp)
-            result = Period('NaT', freq=freq) == idx1
-            tm.assert_numpy_array_equal(result, exp)
-
-            result = idx1 != Period('NaT', freq=freq)
-            exp = np.array([True, True, True, True])
-            tm.assert_numpy_array_equal(result, exp)
-            result = Period('NaT', freq=freq) != idx1
-            tm.assert_numpy_array_equal(result, exp)
-
-            idx2 = PeriodIndex(['2011-02', '2011-01', '2011-04',
-                                'NaT'], freq=freq)
-            result = idx1 < idx2
-            exp = np.array([True, False, False, False])
-            tm.assert_numpy_array_equal(result, exp)
-
-            result = idx1 == idx2
-            exp = np.array([False, False, False, False])
-            tm.assert_numpy_array_equal(result, exp)
-
-            result = idx1 != idx2
-            exp = np.array([True, True, True, True])
-            tm.assert_numpy_array_equal(result, exp)
-
-            result = idx1 == idx1
-            exp = np.array([True, True, False, True])
-            tm.assert_numpy_array_equal(result, exp)
-
-            result = idx1 != idx1
-            exp = np.array([False, False, True, False])
-            tm.assert_numpy_array_equal(result, exp)
-
-            diff = PeriodIndex(['2011-02', '2011-01', '2011-04',
-                                'NaT'], freq='4M')
-            msg = "Input has different freq=4M from PeriodIndex"
-            with tm.assert_raises_regex(
-                    period.IncompatibleFrequency, msg):
-                idx1 > diff
-
-            with tm.assert_raises_regex(
-                    period.IncompatibleFrequency, msg):
-                idx1 == diff
-
-    # TODO: De-duplicate with test_pi_nat_comp
-    def test_comp_nat(self):
-        left = pd.PeriodIndex([pd.Period('2011-01-01'), pd.NaT,
-                               pd.Period('2011-01-03')])
-        right = pd.PeriodIndex([pd.NaT, pd.NaT, pd.Period('2011-01-03')])
-
-        for lhs, rhs in [(left, right),
-                         (left.astype(object), right.astype(object))]:
-            result = lhs == rhs
-            expected = np.array([False, False, True])
-            tm.assert_numpy_array_equal(result, expected)
-
-            result = lhs != rhs
-            expected = np.array([True, True, False])
-            tm.assert_numpy_array_equal(result, expected)
-
-            expected = np.array([False, False, False])
-            tm.assert_numpy_array_equal(lhs == pd.NaT, expected)
-            tm.assert_numpy_array_equal(pd.NaT == rhs, expected)
-
-            expected = np.array([True, True, True])
-            tm.assert_numpy_array_equal(lhs != pd.NaT, expected)
-            tm.assert_numpy_array_equal(pd.NaT != lhs, expected)
-
-            expected = np.array([False, False, False])
-            tm.assert_numpy_array_equal(lhs < pd.NaT, expected)
-            tm.assert_numpy_array_equal(pd.NaT > lhs, expected)
diff --git a/pandas/tests/indexes/period/test_period.py b/pandas/tests/indexes/period/test_period.py
index 6fc7fa548..f3469b829 100644
--- a/pandas/tests/indexes/period/test_period.py
+++ b/pandas/tests/indexes/period/test_period.py
@@ -453,16 +453,6 @@ class TestPeriodIndex(DatetimeLike):
         with pytest.raises(ValueError):
             period_range('2011-1-1', '2012-1-1', 'B')
 
-    def test_start_time(self):
-        index = PeriodIndex(freq='M', start='2016-01-01', end='2016-05-31')
-        expected_index = date_range('2016-01-01', end='2016-05-31', freq='MS')
-        tm.assert_index_equal(index.start_time, expected_index)
-
-    def test_end_time(self):
-        index = PeriodIndex(freq='M', start='2016-01-01', end='2016-05-31')
-        expected_index = date_range('2016-01-01', end='2016-05-31', freq='M')
-        tm.assert_index_equal(index.end_time, expected_index)
-
     def test_index_duplicate_periods(self):
         # monotonic
         idx = PeriodIndex([2000, 2007, 2007, 2009, 2009], freq='A-JUN')
@@ -495,78 +485,14 @@ class TestPeriodIndex(DatetimeLike):
         tm.assert_index_equal(idx.unique(), expected)
         assert idx.nunique() == 3
 
-    def test_shift_gh8083(self):
-
-        # test shift for PeriodIndex
-        # GH8083
-        drange = self.create_index()
-        result = drange.shift(1)
-        expected = PeriodIndex(['2013-01-02', '2013-01-03', '2013-01-04',
-                                '2013-01-05', '2013-01-06'], freq='D')
-        tm.assert_index_equal(result, expected)
-
     def test_shift(self):
-        pi1 = PeriodIndex(freq='A', start='1/1/2001', end='12/1/2009')
-        pi2 = PeriodIndex(freq='A', start='1/1/2002', end='12/1/2010')
-
-        tm.assert_index_equal(pi1.shift(0), pi1)
-
-        assert len(pi1) == len(pi2)
-        tm.assert_index_equal(pi1.shift(1), pi2)
-
-        pi1 = PeriodIndex(freq='A', start='1/1/2001', end='12/1/2009')
-        pi2 = PeriodIndex(freq='A', start='1/1/2000', end='12/1/2008')
-        assert len(pi1) == len(pi2)
-        tm.assert_index_equal(pi1.shift(-1), pi2)
-
-        pi1 = PeriodIndex(freq='M', start='1/1/2001', end='12/1/2009')
-        pi2 = PeriodIndex(freq='M', start='2/1/2001', end='1/1/2010')
-        assert len(pi1) == len(pi2)
-        tm.assert_index_equal(pi1.shift(1), pi2)
-
-        pi1 = PeriodIndex(freq='M', start='1/1/2001', end='12/1/2009')
-        pi2 = PeriodIndex(freq='M', start='12/1/2000', end='11/1/2009')
-        assert len(pi1) == len(pi2)
-        tm.assert_index_equal(pi1.shift(-1), pi2)
-
-        pi1 = PeriodIndex(freq='D', start='1/1/2001', end='12/1/2009')
-        pi2 = PeriodIndex(freq='D', start='1/2/2001', end='12/2/2009')
-        assert len(pi1) == len(pi2)
-        tm.assert_index_equal(pi1.shift(1), pi2)
-
-        pi1 = PeriodIndex(freq='D', start='1/1/2001', end='12/1/2009')
-        pi2 = PeriodIndex(freq='D', start='12/31/2000', end='11/30/2009')
-        assert len(pi1) == len(pi2)
-        tm.assert_index_equal(pi1.shift(-1), pi2)
-
-    def test_shift_nat(self):
-        idx = PeriodIndex(['2011-01', '2011-02', 'NaT',
-                           '2011-04'], freq='M', name='idx')
-        result = idx.shift(1)
-        expected = PeriodIndex(['2011-02', '2011-03', 'NaT',
-                                '2011-05'], freq='M', name='idx')
-        tm.assert_index_equal(result, expected)
-        assert result.name == expected.name
+        # This is tested in test_arithmetic
+        pass
 
     @td.skip_if_32bit
     def test_ndarray_compat_properties(self):
         super(TestPeriodIndex, self).test_ndarray_compat_properties()
 
-    def test_shift_ndarray(self):
-        idx = PeriodIndex(['2011-01', '2011-02', 'NaT',
-                           '2011-04'], freq='M', name='idx')
-        result = idx.shift(np.array([1, 2, 3, 4]))
-        expected = PeriodIndex(['2011-02', '2011-04', 'NaT',
-                                '2011-08'], freq='M', name='idx')
-        tm.assert_index_equal(result, expected)
-
-        idx = PeriodIndex(['2011-01', '2011-02', 'NaT',
-                           '2011-04'], freq='M', name='idx')
-        result = idx.shift(np.array([1, -2, 3, -4]))
-        expected = PeriodIndex(['2011-02', '2010-12', 'NaT',
-                                '2010-12'], freq='M', name='idx')
-        tm.assert_index_equal(result, expected)
-
     def test_negative_ordinals(self):
         Period(ordinal=-1000, freq='A')
         Period(ordinal=0, freq='A')
diff --git a/pandas/tests/indexes/period/test_scalar_compat.py b/pandas/tests/indexes/period/test_scalar_compat.py
new file mode 100644
index 000000000..56bd2adf5
--- /dev/null
+++ b/pandas/tests/indexes/period/test_scalar_compat.py
@@ -0,0 +1,17 @@
+# -*- coding: utf-8 -*-
+"""Tests for PeriodIndex behaving like a vectorized Period scalar"""
+
+from pandas import PeriodIndex, date_range
+import pandas.util.testing as tm
+
+
+class TestPeriodIndexOps(object):
+    def test_start_time(self):
+        index = PeriodIndex(freq='M', start='2016-01-01', end='2016-05-31')
+        expected_index = date_range('2016-01-01', end='2016-05-31', freq='MS')
+        tm.assert_index_equal(index.start_time, expected_index)
+
+    def test_end_time(self):
+        index = PeriodIndex(freq='M', start='2016-01-01', end='2016-05-31')
+        expected_index = date_range('2016-01-01', end='2016-05-31', freq='M')
+        tm.assert_index_equal(index.end_time, expected_index)
diff --git a/pandas/tests/indexes/period/test_tools.py b/pandas/tests/indexes/period/test_tools.py
index 0e72cadb5..f5e7c8269 100644
--- a/pandas/tests/indexes/period/test_tools.py
+++ b/pandas/tests/indexes/period/test_tools.py
@@ -6,8 +6,6 @@ import pandas.util.testing as tm
 import pandas.core.indexes.period as period
 from pandas.compat import lrange
 
-from pandas._libs.tslibs.frequencies import get_freq
-from pandas._libs.tslibs.period import period_ordinal, period_asfreq
 from pandas._libs.tslibs.ccalendar import MONTHS
 
 from pandas import (PeriodIndex, Period, DatetimeIndex, Timestamp, Series,
@@ -76,83 +74,6 @@ class TestPeriodRepresentation(object):
         repr(period)
 
 
-class TestTslib(object):
-    def test_intraday_conversion_factors(self):
-        assert period_asfreq(1, get_freq('D'), get_freq('H'), False) == 24
-        assert period_asfreq(1, get_freq('D'), get_freq('T'), False) == 1440
-        assert period_asfreq(1, get_freq('D'), get_freq('S'), False) == 86400
-        assert period_asfreq(1, get_freq('D'),
-                             get_freq('L'), False) == 86400000
-        assert period_asfreq(1, get_freq('D'),
-                             get_freq('U'), False) == 86400000000
-        assert period_asfreq(1, get_freq('D'),
-                             get_freq('N'), False) == 86400000000000
-
-        assert period_asfreq(1, get_freq('H'), get_freq('T'), False) == 60
-        assert period_asfreq(1, get_freq('H'), get_freq('S'), False) == 3600
-        assert period_asfreq(1, get_freq('H'),
-                             get_freq('L'), False) == 3600000
-        assert period_asfreq(1, get_freq('H'),
-                             get_freq('U'), False) == 3600000000
-        assert period_asfreq(1, get_freq('H'),
-                             get_freq('N'), False) == 3600000000000
-
-        assert period_asfreq(1, get_freq('T'), get_freq('S'), False) == 60
-        assert period_asfreq(1, get_freq('T'), get_freq('L'), False) == 60000
-        assert period_asfreq(1, get_freq('T'),
-                             get_freq('U'), False) == 60000000
-        assert period_asfreq(1, get_freq('T'),
-                             get_freq('N'), False) == 60000000000
-
-        assert period_asfreq(1, get_freq('S'), get_freq('L'), False) == 1000
-        assert period_asfreq(1, get_freq('S'),
-                             get_freq('U'), False) == 1000000
-        assert period_asfreq(1, get_freq('S'),
-                             get_freq('N'), False) == 1000000000
-
-        assert period_asfreq(1, get_freq('L'), get_freq('U'), False) == 1000
-        assert period_asfreq(1, get_freq('L'),
-                             get_freq('N'), False) == 1000000
-
-        assert period_asfreq(1, get_freq('U'), get_freq('N'), False) == 1000
-
-    def test_period_ordinal_start_values(self):
-        # information for 1.1.1970
-        assert period_ordinal(1970, 1, 1, 0, 0, 0, 0, 0, get_freq('A')) == 0
-        assert period_ordinal(1970, 1, 1, 0, 0, 0, 0, 0, get_freq('M')) == 0
-        assert period_ordinal(1970, 1, 1, 0, 0, 0, 0, 0, get_freq('W')) == 1
-        assert period_ordinal(1970, 1, 1, 0, 0, 0, 0, 0, get_freq('D')) == 0
-        assert period_ordinal(1970, 1, 1, 0, 0, 0, 0, 0, get_freq('B')) == 0
-
-    def test_period_ordinal_week(self):
-        assert period_ordinal(1970, 1, 4, 0, 0, 0, 0, 0, get_freq('W')) == 1
-        assert period_ordinal(1970, 1, 5, 0, 0, 0, 0, 0, get_freq('W')) == 2
-        assert period_ordinal(2013, 10, 6, 0,
-                              0, 0, 0, 0, get_freq('W')) == 2284
-        assert period_ordinal(2013, 10, 7, 0,
-                              0, 0, 0, 0, get_freq('W')) == 2285
-
-    def test_period_ordinal_business_day(self):
-        # Thursday
-        assert period_ordinal(2013, 10, 3, 0,
-                              0, 0, 0, 0, get_freq('B')) == 11415
-        # Friday
-        assert period_ordinal(2013, 10, 4, 0,
-                              0, 0, 0, 0, get_freq('B')) == 11416
-        # Saturday
-        assert period_ordinal(2013, 10, 5, 0,
-                              0, 0, 0, 0, get_freq('B')) == 11417
-        # Sunday
-        assert period_ordinal(2013, 10, 6, 0,
-                              0, 0, 0, 0, get_freq('B')) == 11417
-        # Monday
-        assert period_ordinal(2013, 10, 7, 0,
-                              0, 0, 0, 0, get_freq('B')) == 11417
-        # Tuesday
-        assert period_ordinal(2013, 10, 8, 0,
-                              0, 0, 0, 0, get_freq('B')) == 11418
-
-
 class TestPeriodIndex(object):
 
     def setup_method(self, method):
diff --git a/pandas/tests/tslibs/test_period_asfreq.py b/pandas/tests/tslibs/test_period_asfreq.py
new file mode 100644
index 000000000..98959adf6
--- /dev/null
+++ b/pandas/tests/tslibs/test_period_asfreq.py
@@ -0,0 +1,81 @@
+# -*- coding: utf-8 -*-
+
+from pandas._libs.tslibs.frequencies import get_freq
+from pandas._libs.tslibs.period import period_ordinal, period_asfreq
+
+
+class TestPeriodFreqConversion(object):
+    def test_intraday_conversion_factors(self):
+        assert period_asfreq(1, get_freq('D'), get_freq('H'), False) == 24
+        assert period_asfreq(1, get_freq('D'), get_freq('T'), False) == 1440
+        assert period_asfreq(1, get_freq('D'), get_freq('S'), False) == 86400
+        assert period_asfreq(1, get_freq('D'),
+                             get_freq('L'), False) == 86400000
+        assert period_asfreq(1, get_freq('D'),
+                             get_freq('U'), False) == 86400000000
+        assert period_asfreq(1, get_freq('D'),
+                             get_freq('N'), False) == 86400000000000
+
+        assert period_asfreq(1, get_freq('H'), get_freq('T'), False) == 60
+        assert period_asfreq(1, get_freq('H'), get_freq('S'), False) == 3600
+        assert period_asfreq(1, get_freq('H'),
+                             get_freq('L'), False) == 3600000
+        assert period_asfreq(1, get_freq('H'),
+                             get_freq('U'), False) == 3600000000
+        assert period_asfreq(1, get_freq('H'),
+                             get_freq('N'), False) == 3600000000000
+
+        assert period_asfreq(1, get_freq('T'), get_freq('S'), False) == 60
+        assert period_asfreq(1, get_freq('T'), get_freq('L'), False) == 60000
+        assert period_asfreq(1, get_freq('T'),
+                             get_freq('U'), False) == 60000000
+        assert period_asfreq(1, get_freq('T'),
+                             get_freq('N'), False) == 60000000000
+
+        assert period_asfreq(1, get_freq('S'), get_freq('L'), False) == 1000
+        assert period_asfreq(1, get_freq('S'),
+                             get_freq('U'), False) == 1000000
+        assert period_asfreq(1, get_freq('S'),
+                             get_freq('N'), False) == 1000000000
+
+        assert period_asfreq(1, get_freq('L'), get_freq('U'), False) == 1000
+        assert period_asfreq(1, get_freq('L'),
+                             get_freq('N'), False) == 1000000
+
+        assert period_asfreq(1, get_freq('U'), get_freq('N'), False) == 1000
+
+    def test_period_ordinal_start_values(self):
+        # information for 1.1.1970
+        assert period_ordinal(1970, 1, 1, 0, 0, 0, 0, 0, get_freq('A')) == 0
+        assert period_ordinal(1970, 1, 1, 0, 0, 0, 0, 0, get_freq('M')) == 0
+        assert period_ordinal(1970, 1, 1, 0, 0, 0, 0, 0, get_freq('W')) == 1
+        assert period_ordinal(1970, 1, 1, 0, 0, 0, 0, 0, get_freq('D')) == 0
+        assert period_ordinal(1970, 1, 1, 0, 0, 0, 0, 0, get_freq('B')) == 0
+
+    def test_period_ordinal_week(self):
+        assert period_ordinal(1970, 1, 4, 0, 0, 0, 0, 0, get_freq('W')) == 1
+        assert period_ordinal(1970, 1, 5, 0, 0, 0, 0, 0, get_freq('W')) == 2
+        assert period_ordinal(2013, 10, 6, 0,
+                              0, 0, 0, 0, get_freq('W')) == 2284
+        assert period_ordinal(2013, 10, 7, 0,
+                              0, 0, 0, 0, get_freq('W')) == 2285
+
+    def test_period_ordinal_business_day(self):
+        # Thursday
+        assert period_ordinal(2013, 10, 3, 0,
+                              0, 0, 0, 0, get_freq('B')) == 11415
+        # Friday
+        assert period_ordinal(2013, 10, 4, 0,
+                              0, 0, 0, 0, get_freq('B')) == 11416
+        # Saturday
+        assert period_ordinal(2013, 10, 5, 0,
+                              0, 0, 0, 0, get_freq('B')) == 11417
+        # Sunday
+        assert period_ordinal(2013, 10, 6, 0,
+                              0, 0, 0, 0, get_freq('B')) == 11417
+        # Monday
+        assert period_ordinal(2013, 10, 7, 0,
+                              0, 0, 0, 0, get_freq('B')) == 11417
+        # Tuesday
+        assert period_ordinal(2013, 10, 8, 0,
+                              0, 0, 0, 0, get_freq('B')) == 11418
