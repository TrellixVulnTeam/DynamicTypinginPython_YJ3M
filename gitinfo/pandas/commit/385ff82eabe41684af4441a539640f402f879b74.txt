commit 385ff82eabe41684af4441a539640f402f879b74
Author: jreback <jeff@reback.net>
Date:   Fri Mar 8 16:23:33 2013 -0500

    ENH: added ability to use single or multi-threads in numexp testing
    
    TST: updating test_expressions to test with 1 and num_cores
    
    ENH: added module level function in core/expressions to change use of numexpr
    
    BUG: using set_use_numexpr now changes the evaluation functionsx

diff --git a/pandas/core/expressions.py b/pandas/core/expressions.py
index 3612026b2..4199c6f7f 100644
--- a/pandas/core/expressions.py
+++ b/pandas/core/expressions.py
@@ -9,9 +9,12 @@ import numpy as np
 
 try:
     import numexpr as ne
-    _USE_NUMEXPR = True
+    _NUMEXPR_INSTALLED = True
 except ImportError:  # pragma: no cover
-    _USE_NUMEXPR = False
+    _NUMEXPR_INSTALLED = False
+
+_USE_NUMEXPR = _NUMEXPR_INSTALLED
+_evaluate    = None
 
 # the set of dtypes that we will allow pass to numexpr
 _ALLOWED_DTYPES = set(['int64','int32','float64','float32','bool'])
@@ -19,6 +22,34 @@ _ALLOWED_DTYPES = set(['int64','int32','float64','float32','bool'])
 # the minimum prod shape that we will use numexpr
 _MIN_ELEMENTS   = 10000
 
+def set_use_numexpr(v = True):
+    # set/unset to use numexpr
+    global _USE_NUMEXPR
+    if _NUMEXPR_INSTALLED:
+        #print "setting use_numexpr : was->%s, now->%s" % (_USE_NUMEXPR,v)
+        _USE_NUMEXPR = v
+
+    # choose what we are going to do
+    global _evaluate
+    if not _USE_NUMEXPR:
+        _evaluate = _evaluate_standard
+    else:
+        _evaluate = _evaluate_numexpr
+
+    #print "evaluate -> %s" % _evaluate
+
+def set_numexpr_threads(n = None):
+    # if we are using numexpr, set the threads to n
+    # otherwise reset
+    try:
+        if _NUMEXPR_INSTALLED and _USE_NUMEXPR:
+            if n is None:
+                n = ne.detect_number_of_cores()
+            ne.set_num_threads(n)
+    except:
+        pass
+
+
 def _evaluate_standard(op, op_str, a, b, raise_on_error=True):
     """ standard evaluation """
     return op(a,b)
@@ -73,11 +104,8 @@ def _evaluate_numexpr(op, op_str, a, b, raise_on_error = False):
 
     return result
 
-# choose what we are going to do
-if not _USE_NUMEXPR:
-    _evaluate = _evaluate_standard
-else:
-    _evaluate = _evaluate_numexpr
+# turn myself on
+set_use_numexpr(True)
 
 def evaluate(op, op_str, a, b, raise_on_error=False, use_numexpr=True):
     """ evaluate and return the expression of the op on a and b
diff --git a/pandas/tests/test_expressions.py b/pandas/tests/test_expressions.py
index cb852fc03..a0321d2db 100644
--- a/pandas/tests/test_expressions.py
+++ b/pandas/tests/test_expressions.py
@@ -11,7 +11,7 @@ from numpy.testing import assert_array_equal
 
 import pandas as pan
 from pandas.core.api import DataFrame, Series, notnull, isnull
-from pandas.core import expressions
+from pandas.core import expressions as expr
 
 from pandas.util.testing import (assert_almost_equal,
                                  assert_series_equal,
@@ -23,7 +23,7 @@ import pandas.lib as lib
 
 from numpy.testing.decorators import slow
 
-if not expressions._USE_NUMEXPR:
+if not expr._USE_NUMEXPR:
     raise nose.SkipTest
 
 _frame  = DataFrame(np.random.randn(10000, 4), columns = list('ABCD'), dtype='float64')
@@ -46,61 +46,82 @@ class TestExpressions(unittest.TestCase):
     def test_invalid(self):
 
         # no op
-        result   = expressions._can_use_numexpr(operator.add, None, self.frame, self.frame)
+        result   = expr._can_use_numexpr(operator.add, None, self.frame, self.frame)
         self.assert_(result == False)
 
         # mixed
-        result   = expressions._can_use_numexpr(operator.add, '+', self.mixed, self.frame)
+        result   = expr._can_use_numexpr(operator.add, '+', self.mixed, self.frame)
         self.assert_(result == False)
 
         # min elements
-        result   = expressions._can_use_numexpr(operator.add, '+', self.frame2, self.frame2)
+        result   = expr._can_use_numexpr(operator.add, '+', self.frame2, self.frame2)
         self.assert_(result == False)
 
         # ok, we only check on first part of expression
-        result   = expressions._can_use_numexpr(operator.add, '+', self.frame, self.frame2)
+        result   = expr._can_use_numexpr(operator.add, '+', self.frame, self.frame2)
         self.assert_(result == True)
 
     def test_binary_ops(self):
 
-        for f, f2 in [ (self.frame, self.frame2), (self.mixed, self.mixed2) ]:
+        def testit():
 
-            for op, op_str in [('add','+'),('sub','-'),('mul','*'),('div','/'),('pow','**')]:
+            for f, f2 in [ (self.frame, self.frame2), (self.mixed, self.mixed2) ]:
 
-                op = getattr(operator,op)
-                result   = expressions._can_use_numexpr(op, op_str, f, f)
-                self.assert_(result == (not f._is_mixed_type))
+                for op, op_str in [('add','+'),('sub','-'),('mul','*'),('div','/'),('pow','**')]:
 
-                result   = expressions.evaluate(op, op_str, f, f, use_numexpr=True)
-                expected = expressions.evaluate(op, op_str, f, f, use_numexpr=False)
-                assert_array_equal(result,expected.values)
+                    op = getattr(operator,op)
+                    result   = expr._can_use_numexpr(op, op_str, f, f)
+                    self.assert_(result == (not f._is_mixed_type))
+
+                    result   = expr.evaluate(op, op_str, f, f, use_numexpr=True)
+                    expected = expr.evaluate(op, op_str, f, f, use_numexpr=False)
+                    assert_array_equal(result,expected.values)
                 
-                result   = expressions._can_use_numexpr(op, op_str, f2, f2)
-                self.assert_(result == False)
+                    result   = expr._can_use_numexpr(op, op_str, f2, f2)
+                    self.assert_(result == False)
+
+        
+        expr.set_use_numexpr(False)
+        testit()
+        expr.set_use_numexpr(True)
+        expr.set_numexpr_threads(1)
+        testit()
+        expr.set_numexpr_threads()
+        testit()
 
     def test_boolean_ops(self):
 
-        for f, f2 in [ (self.frame, self.frame2), (self.mixed, self.mixed2) ]:
-
-            f11 = f
-            f12 = f + 1
-            
-            f21 = f2
-            f22 = f2 + 1
-
-            for op, op_str in [('gt','>'),('lt','<'),('ge','>='),('le','<='),('eq','=='),('ne','!=')]:
 
-                op = getattr(operator,op)
+        def testit():
+            for f, f2 in [ (self.frame, self.frame2), (self.mixed, self.mixed2) ]:
 
-                result   = expressions._can_use_numexpr(op, op_str, f11, f12)
-                self.assert_(result == (not f11._is_mixed_type))
-
-                result   = expressions.evaluate(op, op_str, f11, f12, use_numexpr=True)
-                expected = expressions.evaluate(op, op_str, f11, f12, use_numexpr=False)
-                assert_array_equal(result,expected.values)
-                
-                result   = expressions._can_use_numexpr(op, op_str, f21, f22)
-                self.assert_(result == False)
+                f11 = f
+                f12 = f + 1
+            
+                f21 = f2
+                f22 = f2 + 1
+
+                for op, op_str in [('gt','>'),('lt','<'),('ge','>='),('le','<='),('eq','=='),('ne','!=')]:
+
+                    op = getattr(operator,op)
+
+                    result   = expr._can_use_numexpr(op, op_str, f11, f12)
+                    self.assert_(result == (not f11._is_mixed_type))
+
+                    result   = expr.evaluate(op, op_str, f11, f12, use_numexpr=True)
+                    expected = expr.evaluate(op, op_str, f11, f12, use_numexpr=False)
+                    assert_array_equal(result,expected.values)
+                    
+                    result   = expr._can_use_numexpr(op, op_str, f21, f22)
+                    self.assert_(result == False)
+
+        expr.set_use_numexpr(False)
+        testit()
+        expr.set_use_numexpr(True)
+        expr.set_numexpr_threads(1)
+        testit()
+        expr.set_numexpr_threads()
+        testit()
 
 if __name__ == '__main__':
     # unittest.main()
diff --git a/vb_suite/binary_ops.py b/vb_suite/binary_ops.py
index 1bbcac4ca..7a2b03643 100644
--- a/vb_suite/binary_ops.py
+++ b/vb_suite/binary_ops.py
@@ -9,6 +9,9 @@ SECTION = 'Binary ops'
 #----------------------------------------------------------------------
 # binary ops
 
+#----------------------------------------------------------------------
+# add
+
 setup = common_setup + """
 df  = DataFrame(np.random.randn(100000, 100))
 df2 = DataFrame(np.random.randn(100000, 100))
@@ -17,6 +20,30 @@ frame_add = \
     Benchmark("df + df2", setup, name='frame_add',
               start_date=datetime(2012, 1, 1))
 
+setup = common_setup + """
+import pandas.core.expressions as expr
+df  = DataFrame(np.random.randn(100000, 100))
+df2 = DataFrame(np.random.randn(100000, 100))
+expr.set_numexpr_threads(1)
+"""
+
+frame_add_st = \
+    Benchmark("df + df2", setup, name='frame_add_st',cleanup="expr.set_numexpr_threads()",
+              start_date=datetime(2012, 1, 1))
+
+setup = common_setup + """
+import pandas.core.expressions as expr
+df  = DataFrame(np.random.randn(100000, 100))
+df2 = DataFrame(np.random.randn(100000, 100))
+expr.set_use_numexpr(False)
+"""
+frame_add_no_ne = \
+    Benchmark("df + df2", setup, name='frame_add_no_ne',cleanup="expr.set_use_numexpr(True)",
+              start_date=datetime(2012, 1, 1))
+
+#----------------------------------------------------------------------
+# mult
+
 setup = common_setup + """
 df  = DataFrame(np.random.randn(100000, 100))
 df2 = DataFrame(np.random.randn(100000, 100))
@@ -25,6 +52,29 @@ frame_mult = \
     Benchmark("df * df2", setup, name='frame_mult',
               start_date=datetime(2012, 1, 1))
 
+setup = common_setup + """
+import pandas.core.expressions as expr
+df  = DataFrame(np.random.randn(100000, 100))
+df2 = DataFrame(np.random.randn(100000, 100))
+expr.set_numexpr_threads(1)
+"""
+frame_mult_st = \
+    Benchmark("df * df2", setup, name='frame_mult_st',cleanup="expr.set_numexpr_threads()",
+              start_date=datetime(2012, 1, 1))
+
+setup = common_setup + """
+import pandas.core.expressions as expr
+df  = DataFrame(np.random.randn(100000, 100))
+df2 = DataFrame(np.random.randn(100000, 100))
+expr.set_use_numexpr(False)
+"""
+frame_mult_no_ne = \
+    Benchmark("df * df2", setup, name='frame_mult_no_ne',cleanup="expr.set_use_numexpr(True)",
+              start_date=datetime(2012, 1, 1))
+
+#----------------------------------------------------------------------
+# multi and
+
 setup = common_setup + """
 df  = DataFrame(np.random.randn(100000, 100))
 df2 = DataFrame(np.random.randn(100000, 100))
@@ -33,3 +83,23 @@ frame_multi_and = \
     Benchmark("df[(df>0) & (df2>0)]", setup, name='frame_multi_and',
               start_date=datetime(2012, 1, 1))
 
+setup = common_setup + """
+import pandas.core.expressions as expr
+df  = DataFrame(np.random.randn(100000, 100))
+df2 = DataFrame(np.random.randn(100000, 100))
+expr.set_numexpr_threads(1)
+"""
+frame_multi_and_st = \
+    Benchmark("df[(df>0) & (df2>0)]", setup, name='frame_multi_and_st',cleanup="expr.set_numexpr_threads()",
+              start_date=datetime(2012, 1, 1))
+
+setup = common_setup + """
+import pandas.core.expressions as expr
+df  = DataFrame(np.random.randn(100000, 100))
+df2 = DataFrame(np.random.randn(100000, 100))
+expr.set_use_numexpr(False)
+"""
+frame_multi_and_no_ne = \
+    Benchmark("df[(df>0) & (df2>0)]", setup, name='frame_multi_and_no_ne',cleanup="expr.set_use_numexpr(True)",
+              start_date=datetime(2012, 1, 1))
+
diff --git a/vb_suite/indexing.py b/vb_suite/indexing.py
index 09fb94688..ceda346fd 100644
--- a/vb_suite/indexing.py
+++ b/vb_suite/indexing.py
@@ -102,6 +102,28 @@ indexing_dataframe_boolean = \
     Benchmark("df > df2", setup, name='indexing_dataframe_boolean',
               start_date=datetime(2012, 1, 1))
 
+setup = common_setup + """
+import pandas.core.expressions as expr
+df  = DataFrame(np.random.randn(100000, 100))
+df2 = DataFrame(np.random.randn(100000, 100))
+expr.set_numexpr_threads(1)
+"""
+
+indexing_dataframe_boolean_st = \
+    Benchmark("df > df2", setup, name='indexing_dataframe_boolean_st',cleanup="expr.set_numexpr_threads()",
+              start_date=datetime(2012, 1, 1))
+
+setup = common_setup + """
+import pandas.core.expressions as expr
+df  = DataFrame(np.random.randn(100000, 100))
+df2 = DataFrame(np.random.randn(100000, 100))
+expr.set_use_numexpr(False)
+"""
+
+indexing_dataframe_boolean_no_ne = \
+    Benchmark("df > df2", setup, name='indexing_dataframe_boolean_no_ne',cleanup="expr.set_use_numexpr(True)",
+              start_date=datetime(2012, 1, 1))
+
 #----------------------------------------------------------------------
 # MultiIndex sortlevel
 
