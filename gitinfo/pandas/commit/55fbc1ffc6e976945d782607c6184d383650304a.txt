commit 55fbc1ffc6e976945d782607c6184d383650304a
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Aug 22 13:53:20 2011 -0400

    ENH: WidePanel constructor can handle dict

diff --git a/RELEASE.rst b/RELEASE.rst
index 3a231675d..e27b0e5a1 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -127,6 +127,8 @@ Release notes
 * `DataFrame.pivot` generalized to enable pivoting multiple columns into a
   `WidePanel`
 * `DataFrame` constructor can accept structured / record arrays
+* `WidePanel` constructor can accept a dict of DataFrame-like objects. Do not
+  need to use `from_dict` anymore (`from_dict` is there to stay, though).
 
 **API Changes**
 
@@ -183,6 +185,7 @@ Release notes
 * Removed `pandas.core.pytools` module. Code has been moved to
   `pandas.core.common`
 * Tacked on `groupName` attribute for groups in GroupBy renamed to `name`
+* WidePanel/LongPanel `dims` attribute renamed to `shape` to be more conformant
 
 **Bug fixes**
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 70a4bb991..2f601073a 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -218,20 +218,6 @@ class DataFrame(NDFrame):
         block = make_block(values.T, columns, columns)
         return BlockManager([block], [columns, index])
 
-    def astype(self, dtype):
-        """
-        Cast DataFrame to input numpy.dtype
-
-        Parameters
-        ----------
-        dtype : numpy.dtype or Python type
-
-        Returns
-        -------
-        casted : DataFrame
-        """
-        return self._constructor(self._data, dtype=dtype)
-
     def _wrap_array(self, arr, axes, copy=False):
         index, columns = axes
         return self._constructor(arr, index=index, columns=columns, copy=copy)
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index b535ded0a..c12c15065 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -173,9 +173,23 @@ class NDFrame(PandasObject):
     # kludge
     _default_stat_axis = 0
 
-    def __init__(self, data, axes=None, copy=False):
+    def __init__(self, data, axes=None, copy=False, dtype=None):
         self._data = data
 
+    def astype(self, dtype):
+        """
+        Cast object to input numpy.dtype
+
+        Parameters
+        ----------
+        dtype : numpy.dtype or Python type
+
+        Returns
+        -------
+        casted : type of caller
+        """
+        return self._constructor(self._data, dtype=dtype)
+
     @property
     def _constructor(self):
         return NDFrame
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 94329e7cd..b6bb35889 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -14,7 +14,7 @@ from pandas.core.common import (PandasError, _mut_exclusive, _ensure_index,
                                 _try_sort, _default_index, _infer_dtype)
 from pandas.core.index import Factor, Index, MultiIndex
 from pandas.core.internals import BlockManager, make_block, form_blocks
-from pandas.core.frame import DataFrame
+from pandas.core.frame import DataFrame, _union_indexes
 from pandas.core.generic import AxisProperty, NDFrame
 import pandas.core.common as common
 import pandas._tseries as _tseries
@@ -76,18 +76,6 @@ def _wide_arith_method(op, name):
 
     return f
 
-class PanelAxis(object):
-
-    def __init__(self, cache_field):
-        self.cache_field = cache_field
-
-    def __get__(self, obj, type=None):
-        return getattr(obj, self.cache_field, None)
-
-    def __set__(self, obj, value):
-        value = _ensure_index(value)
-        setattr(obj, self.cache_field, value)
-
 class Panel(object):
     """
     Abstract superclass for LongPanel and WidePanel data structures
@@ -106,50 +94,10 @@ class Panel(object):
     __rdiv__ = _arith_method(lambda x, y: y / x, '__rdiv__')
     __rpow__ = _arith_method(lambda x, y: y ** x, '__rpow__')
 
-    items = PanelAxis('_items')
-    major_axis = PanelAxis('_major_axis')
-    minor_axis = PanelAxis('_minor_axis')
-
-    def __repr__(self):
-        class_name = str(self.__class__)
-
-        I, N, K = len(self.items), len(self.major_axis), len(self.minor_axis)
-
-        dims = 'Dimensions: %d (items) x %d (major) x %d (minor)' % (I, N, K)
-
-        major = 'Major axis: %s to %s' % (self.major_axis[0],
-                                          self.major_axis[-1])
-
-        minor = 'Minor axis: %s to %s' % (self.minor_axis[0],
-                                          self.minor_axis[-1])
-
-        if len(self.items) > 0:
-            items = 'Items: %s to %s' % (self.items[0], self.items[-1])
-        else:
-            items = 'Items: None'
-
-        output = '%s\n%s\n%s\n%s\n%s' % (class_name, dims, items, major, minor)
-
-        return output
-
-    def __iter__(self):
-        return iter(self.items)
-
-    def iteritems(self):
-        for item in self.items:
-            yield item, self[item]
-
     @property
     def shape(self):
         return len(self.items), len(self.major_axis), len(self.minor_axis)
 
-    @property
-    def dims(self): # pragma: no cover
-        warnings.warn("Please change panel.dims to panel.shape, will be removed"
-                      " in future release",
-                      FutureWarning)
-        return self.shape
-
 class WidePanel(Panel, NDFrame):
     """
     Represents wide format panel data, stored as 3-dimensional array
@@ -214,21 +162,34 @@ class WidePanel(Panel, NDFrame):
         else:
             items = Index(_try_sort(data.keys()))
 
-        # figure out the index, if necessary
-        if index is None:
-            index = extract_index(data)
+        for k, v in data.iteritems():
+            if not isinstance(v, DataFrame):
+                data[k] = DataFrame(v)
 
-        # don't force copy because getting jammed in an ndarray anyway
-        # homogenized = _homogenize(data, index, columns, dtype)
+        if major is None:
+            indexes = [v.index for v in data.values()]
+            major = _union_indexes(indexes)
 
-        data, index, columns = _homogenize(data, intersect=intersect)
+        if minor is None:
+            indexes = [v.columns for v in data.values()]
+            minor = _union_indexes(indexes)
 
-        # segregates dtypes and forms blocks matching to columns
-        blocks = form_blocks(homogenized, index, columns)
+        axes = [items, major, minor]
 
-        # consolidate for now
-        mgr = BlockManager(blocks, [columns, index])
-        return mgr.consolidate()
+        reshaped_data = data.copy() # shallow
+        # homogenize
+        for k, v in data.iteritems():
+            v = v.reindex(index=major, columns=minor, copy=False)
+            if dtype is not None:
+                v = v.astype(dtype)
+            values = v.values
+            shape = values.shape
+            reshaped_data[k] = values.reshape((1,) + shape)
+
+        # segregates dtypes and forms blocks matching to columns
+        blocks = form_blocks(reshaped_data, axes)
+        mgr = BlockManager(blocks, axes).consolidate()
+        return mgr
 
     @classmethod
     def from_dict(cls, data, intersect=False, dtype=float):
@@ -249,17 +210,7 @@ class WidePanel(Panel, NDFrame):
                                                 dtype=dtype)
         items = Index(sorted(data.keys()))
         axes = [items, index, columns]
-
-        reshaped_data = {}
-        for k, v in data.iteritems():
-            values = v.values
-            shape = values.shape
-            reshaped_data[k] = values.reshape((1,) + shape)
-
-        blocks = form_blocks(reshaped_data, axes)
-
-        mgr = BlockManager(blocks, axes).consolidate()
-        return WidePanel(mgr, items, index, columns)
+        return WidePanel(data, items, index, columns)
 
     def _init_matrix(self, data, axes, dtype=None, copy=False):
         values = _prep_ndarray(data, copy=copy)
@@ -283,6 +234,35 @@ class WidePanel(Panel, NDFrame):
         block = make_block(values, items, items)
         return BlockManager([block], fixed_axes)
 
+    def __repr__(self):
+        class_name = str(self.__class__)
+
+        I, N, K = len(self.items), len(self.major_axis), len(self.minor_axis)
+
+        dims = 'Dimensions: %d (items) x %d (major) x %d (minor)' % (I, N, K)
+
+        major = 'Major axis: %s to %s' % (self.major_axis[0],
+                                          self.major_axis[-1])
+
+        minor = 'Minor axis: %s to %s' % (self.minor_axis[0],
+                                          self.minor_axis[-1])
+
+        if len(self.items) > 0:
+            items = 'Items: %s to %s' % (self.items[0], self.items[-1])
+        else:
+            items = 'Items: None'
+
+        output = '%s\n%s\n%s\n%s\n%s' % (class_name, dims, items, major, minor)
+
+        return output
+
+    def __iter__(self):
+        return iter(self.items)
+
+    def iteritems(self):
+        for item in self.items:
+            yield item, self[item]
+
     def _get_plane_axes(self, axis):
         """
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index c50669758..8c4ccc9ad 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -476,6 +476,12 @@ class Series(np.ndarray, PandasObject):
         """
         return self._ndarray_statistic('mean')
 
+    def prod(self, axis=None, dtype=None, out=None):
+        """
+        Mean of non-null values
+        """
+        return self._ndarray_statistic('prod')
+
     def _ndarray_statistic(self, funcname):
         arr = self.values
         retVal = getattr(arr, funcname)()
diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index 9d35de555..7c6833fe7 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -10,14 +10,13 @@ import numpy as np
 
 import operator
 
-from pandas.core.common import (isnull, notnull, _pickle_array, _unpickle_array,
+from pandas.core.common import (isnull, _pickle_array, _unpickle_array,
                                 _mut_exclusive, _ensure_index, _try_sort)
 from pandas.core.index import Index, MultiIndex, NULL_INDEX
 from pandas.core.series import Series, TimeSeries
 from pandas.core.frame import (DataFrame, extract_index, _prep_ndarray,
                                _default_index)
-from pandas.core.panel import Panel, WidePanel, LongPanel, PanelAxis
-import pandas.core.common as common
+from pandas.core.panel import Panel, WidePanel, LongPanel
 import pandas.core.datetools as datetools
 
 from pandas._sparse import BlockIndex, IntIndex
@@ -1265,6 +1264,22 @@ def homogenize(series_dict):
 
     return output
 
+class PanelAxis(object):
+
+    def __init__(self, cache_field):
+        self.cache_field = cache_field
+
+    def __get__(self, obj, type=None):
+        return getattr(obj, self.cache_field, None)
+
+    def __set__(self, obj, value):
+        value = _ensure_index(value)
+
+        if isinstance(value, MultiIndex):
+            raise NotImplementedError
+
+        setattr(obj, self.cache_field, value)
+
 class SparseWidePanel(WidePanel):
     """
     Sparse version of WidePanel
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 3c4ba0512..d0c7770a1 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -370,7 +370,7 @@ class TestWidePanel(unittest.TestCase, PanelTests,
         panel = self.panel.consolidate()
         self.assert_(panel._data.is_consolidated())
 
-    def test_from_dict(self):
+    def test_ctor_dict(self):
         itema = self.panel['ItemA']
         itemb = self.panel['ItemB']
 
@@ -389,6 +389,15 @@ class TestWidePanel(unittest.TestCase, PanelTests,
         wp = WidePanel.from_dict(d, intersect=True)
         self.assert_(wp.major_axis.equals(itemb.index[5:]))
 
+        # use constructor
+        assert_panel_equal(WidePanel(d), WidePanel.from_dict(d))
+        assert_panel_equal(WidePanel(d2), WidePanel.from_dict(d2))
+        assert_panel_equal(WidePanel(d3), WidePanel.from_dict(d3))
+
+        # cast
+        result = WidePanel(d, dtype=int)
+        expected = WidePanel(dict((k, v.astype(int)) for k, v in d.iteritems()))
+
     def test_from_dict_mixed(self):
         pass
 
