commit 514c292e93fdedb72584881cc0d1c36316429b75
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Aug 17 14:53:38 2011 -0400

    ENH: multi-grouping with axis > 0

diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 7711a21fc..c723c7df6 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -145,7 +145,7 @@ class GroupBy(object):
         shape = self._result_shape
         return zip(grouping_names, _ravel_names(axes, shape))
 
-    def _iterate_columns(self):
+    def _iterate_slices(self):
         name = self.name
         if name is None:
             name = 'result'
@@ -182,7 +182,7 @@ class GroupBy(object):
 
         output = {}
         cannot_agg = []
-        for name, obj in self._iterate_columns():
+        for name, obj in self._iterate_slices():
             try:
                 obj = np.asarray(obj, dtype=float)
             except ValueError:
@@ -224,7 +224,7 @@ class GroupBy(object):
         output = {}
 
         # iterate through "columns" ex exclusions to populate output dict
-        for name, obj in self._iterate_columns():
+        for name, obj in self._iterate_slices():
             _doit(result, counts, gen_factory(obj))
             # TODO: same mask for every column...
             mask = counts.ravel() > 0
@@ -237,16 +237,21 @@ class GroupBy(object):
         if len(self.groupings) > 1:
             masked = [raveled[mask] for _, raveled in name_list]
             index = MultiIndex.from_arrays(masked)
-            return DataFrame(output, index=index)
+            result = DataFrame(output, index=index)
         else:
-            return DataFrame(output, index=name_list[0][1])
+            result = DataFrame(output, index=name_list[0][1])
+
+        if self.axis == 1:
+            result = result.T
+
+        return result
 
     @property
     def _generator_factory(self):
         labels = [ping.labels for ping in self.groupings]
         shape = self._result_shape
 
-        # XXX: hack?
+        # XXX: HACK! need to do something about all this...
         if isinstance(self.obj, NDFrame):
             factory = self.obj._constructor
         else:
@@ -254,7 +259,6 @@ class GroupBy(object):
 
         axis = self.axis
 
-        # XXX: HACK! need to do something about this...
         if isinstance(self.obj, DataFrame):
             if axis == 0:
                 axis = 1
@@ -347,9 +351,6 @@ def _get_groupings(obj, grouper=None, axis=0, level=None):
     groupings = []
     exclusions = []
     if isinstance(grouper, (tuple, list)):
-        if axis != 0:
-            raise ValueError('multi-grouping only valid with axis=0 for now')
-
         for i, arg in enumerate(grouper):
             name = 'key_%d' % i
             if isinstance(arg, basestring):
@@ -547,12 +548,19 @@ class DataFrameGroupBy(GroupBy):
         return SeriesGroupBy(self.obj[key], groupings=self.groupings,
                              exclusions=self.exclusions, name=key)
 
+    def _iterate_slices(self):
+        if self.axis == 0:
+            slice_axis = self.obj.columns
+            slicer = lambda x: self.obj[x]
+        else:
+            slice_axis = self.obj.index
+            slicer = self.obj.xs
 
-    def _iterate_columns(self):
-        for col in self.obj:
-            if col in self.exclusions:
+        for val in slice_axis:
+            if val in self.exclusions:
                 continue
-            yield col, self.obj[col]
+
+            yield val, slicer(val)
 
     def _get_obj_with_exclusions(self):
         return self.obj.drop(self.exclusions, axis=1)
@@ -593,10 +601,15 @@ class DataFrameGroupBy(GroupBy):
 
         if len(self.groupings) > 1:
             index = self._get_multi_index(mask)
-            return DataFrame(output, index=index)
+            result = DataFrame(output, index=index)
         else:
             name_list = self._get_names()
-            return DataFrame(output, index=name_list[0][1])
+            result = DataFrame(output, index=name_list[0][1])
+
+        if self.axis == 1:
+            result = result.T
+
+        return result
 
     def _aggregate_generic(self, agger, axis=0):
         result = {}
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 6756a355b..61fc561f4 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -341,8 +341,11 @@ class BlockManager(object):
         return len(dtypes) == len(set(dtypes))
 
     def get_slice(self, slice_obj, axis=0):
+        if axis == 0:
+            new_items = self.items[slice_obj]
+            return self.reindex_items(new_items)
+
         new_blocks = self._slice_blocks(slice_obj, axis)
-        assert(axis > 0)
         new_axes = list(self.axes)
         new_axes[axis] = new_axes[axis][slice_obj]
         return BlockManager(new_blocks, new_axes)
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 4f4889779..706ea2157 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -356,9 +356,16 @@ class TestGroupBy(unittest.TestCase):
         grouped = df.groupby([lambda x: x.year,
                               lambda x: x.month,
                               lambda x: x.day])
-        agged = grouped.sum().sortlevel(0)
+        agged = grouped.sum()
         assert_almost_equal(df.values, agged.values)
 
+        grouped = df.T.groupby([lambda x: x.year,
+                                lambda x: x.month,
+                                lambda x: x.day], axis=1)
+
+        agged = grouped.agg(np.sum)
+        assert_almost_equal(df.T.values, agged.values)
+
     def test_groupby_multi_corner(self):
         # test that having an all-NA column doesn't mess you up
         df = self.df.copy()
