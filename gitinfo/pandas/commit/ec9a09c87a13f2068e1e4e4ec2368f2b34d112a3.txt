commit ec9a09c87a13f2068e1e4e4ec2368f2b34d112a3
Author: Todd Jennings <toddrjen@gmail.com>
Date:   Fri May 16 17:57:57 2014 +0200

    simplify groupby's std method

diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 1b07e2fb0..31bdeaadd 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -695,12 +695,7 @@ class GroupBy(PandasObject):
         For multiple groupings, the result index will be a MultiIndex
         """
         # todo, implement at cython level?
-        if ddof == 1:
-            return self._cython_agg_general('std')
-        else:
-            self._set_selection_from_grouper()
-            f = lambda x: x.std(ddof=ddof)
-            return self._python_agg_general(f)
+        return np.sqrt(self.var(ddof=ddof))
 
     def var(self, ddof=1):
         """
@@ -1332,7 +1327,6 @@ class BaseGrouper(object):
             'name': 'group_median'
         },
         'var': 'group_var',
-        'std': 'group_var',
         'first': {
             'name': 'group_nth',
             'f': lambda func, a, b, c, d: func(a, b, c, d, 1)
@@ -1341,10 +1335,6 @@ class BaseGrouper(object):
         'count': 'group_count',
     }
 
-    _cython_transforms = {
-        'std': np.sqrt,
-    }
-
     _cython_arity = {
         'ohlc': 4,  # OHLC
     }
@@ -1455,7 +1445,6 @@ class BaseGrouper(object):
 
     def _aggregate(self, result, counts, values, how, is_numeric):
         agg_func, dtype = self._get_aggregate_function(how, values)
-        trans_func = self._cython_transforms.get(how, lambda x: x)
 
         comp_ids, _, ngroups = self.group_info
         if values.ndim > 3:
@@ -1469,7 +1458,7 @@ class BaseGrouper(object):
         else:
             agg_func(result, counts, values, comp_ids)
 
-        return trans_func(result)
+        return result
 
     def agg_series(self, obj, func):
         try:
@@ -1669,7 +1658,6 @@ class BinGrouper(BaseGrouper):
         'min': 'group_min_bin',
         'max': 'group_max_bin',
         'var': 'group_var_bin',
-        'std': 'group_var_bin',
         'ohlc': 'group_ohlc',
         'first': {
             'name': 'group_nth_bin',
@@ -1688,7 +1676,6 @@ class BinGrouper(BaseGrouper):
     def _aggregate(self, result, counts, values, how, is_numeric=True):
 
         agg_func, dtype = self._get_aggregate_function(how, values)
-        trans_func = self._cython_transforms.get(how, lambda x: x)
 
         if values.ndim > 3:
             # punting for now
@@ -1699,7 +1686,7 @@ class BinGrouper(BaseGrouper):
         else:
             agg_func(result, counts, values, self.bins)
 
-        return trans_func(result)
+        return result
 
     def agg_series(self, obj, func):
         dummy = obj[:0]
