commit eac3fd814697ba1b1897f942225c14ad38daabaf
Author: Christopher Whelan <topherwhelan@gmail.com>
Date:   Thu Aug 20 19:36:01 2015 -0700

    PERF: Add new vbench tests to asv

diff --git a/asv_bench/asv.conf.json b/asv_bench/asv.conf.json
index 282365125..239f9aa19 100644
--- a/asv_bench/asv.conf.json
+++ b/asv_bench/asv.conf.json
@@ -42,9 +42,9 @@
         "scipy": [],
         "numexpr": [],
         "tables": [],
-	"openpyxl": [],
-	"xlrd": [],
-	"xlwt": []
+        "openpyxl": [],
+        "xlrd": [],
+        "xlwt": []
     },
 
     // The directory (relative to the current directory) that benchmarks are
diff --git a/asv_bench/benchmarks/groupby.py b/asv_bench/benchmarks/groupby.py
index 86f384659..a84a53736 100644
--- a/asv_bench/benchmarks/groupby.py
+++ b/asv_bench/benchmarks/groupby.py
@@ -1660,6 +1660,16 @@ class groupby_transform_ufunc(object):
         self.data.groupby(level='date').transform(np.max)
 
 
+class series_value_counts_float64(object):
+    goal_time = 0.2
+
+    def setup(self):
+        self.s = Series(np.random.randint(0, 1000, size=100000)).astype(float)
+
+    def time_series_value_counts_float64(self):
+        self.s.value_counts()
+
+
 class series_value_counts_int64(object):
     goal_time = 0.2
 
diff --git a/asv_bench/benchmarks/indexing.py b/asv_bench/benchmarks/indexing.py
index f3fa05d73..32d80a791 100644
--- a/asv_bench/benchmarks/indexing.py
+++ b/asv_bench/benchmarks/indexing.py
@@ -428,6 +428,30 @@ class series_loc_slice(object):
         self.s.loc[:800000]
 
 
+class series_take_dtindex(object):
+    goal_time = 0.2
+
+    def setup(self):
+        self.s = Series(np.random.rand(100000))
+        self.ts = Series(np.random.rand(100000), index=date_range('2011-01-01', freq='S', periods=100000))
+        self.indexer = ([True, False, True, True, False] * 20000)
+
+    def time_series_take_dtindex(self):
+        self.ts.take(self.indexer)
+
+
+class series_take_intindex(object):
+    goal_time = 0.2
+
+    def setup(self):
+        self.s = Series(np.random.rand(100000))
+        self.ts = Series(np.random.rand(100000), index=date_range('2011-01-01', freq='S', periods=100000))
+        self.indexer = ([True, False, True, True, False] * 20000)
+
+    def time_series_take_intindex(self):
+        self.s.take(self.indexer)
+
+
 class series_xs_mi_ix(object):
     goal_time = 0.2
 
@@ -462,4 +486,4 @@ class sort_level_zero(object):
         self.midx = self.midx.take(np.random.permutation(np.arange(100000)))
 
     def time_sort_level_zero(self):
-        self.midx.sortlevel(0)
+        self.midx.sortlevel(0)
\ No newline at end of file
