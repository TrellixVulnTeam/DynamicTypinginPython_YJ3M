commit 354880a51b3ed1d7106dc598741606ecd770f7a5
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Sep 10 18:20:47 2011 -0400

    TST: DataFrame test coverage

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 8a17ec1ce..964ab68d1 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -391,8 +391,6 @@ class DataFrame(NDFrame):
                         columns.remove(field)
                     result_index = MultiIndex.from_arrays(arrays)
                 except Exception:
-                    if len(index) != len(data):
-                        raise
                     result_index = index
         else:
             result_index = np.arange(len(data))
@@ -2308,17 +2306,10 @@ class DataFrame(NDFrame):
             return self._count_level(level, axis=axis,
                                      numeric_only=numeric_only)
 
-        if numeric_only:
-            try:
-                y, axis_labels = self._get_agg_data(axis, numeric_only=True)
-                mask = notnull(y)
-                return Series(mask.sum(axis), index=axis_labels)
-            except Exception:
-                f = lambda s: notnull(s).sum()
-                return self.apply(f, axis=axis)
-        else:
-            result = notnull(self.values).sum(axis)
-            return Series(result, index=self._get_agg_axis(axis))
+        y, axis_labels = self._get_agg_data(axis, numeric_only=numeric_only,
+                                            copy=False)
+        mask = notnull(y)
+        return Series(mask.sum(axis), index=axis_labels)
 
     def _count_level(self, level, axis=0, numeric_only=False):
         # TODO: deal with sortedness??
@@ -2476,19 +2467,13 @@ class DataFrame(NDFrame):
         product : Series
         """
         y = np.array(self.values, subok=True)
-        try:
-            if skipna:
-                if not issubclass(y.dtype.type, np.int_):
-                    y[np.isnan(y)] = 1
-            theProd = y.prod(axis)
-            theCount = self.count(axis)
-            theProd[theCount == 0] = nan
-        except Exception:
-            def wrapper(x):
-                return x.prod(skipna=skipna)
-            theProd = self.apply(wrapper, axis=axis)
-
-        return Series(theProd, index=self._get_agg_axis(axis))
+        if skipna:
+            if not issubclass(y.dtype.type, np.int_):
+                y[np.isnan(y)] = 1
+        result = y.prod(axis)
+        count = self.count(axis)
+        result[count == 0] = nan
+        return Series(result, index=self._get_agg_axis(axis))
 
     product = prod
 
@@ -2678,7 +2663,7 @@ class DataFrame(NDFrame):
 
         return Series(result, index=axis_labels)
 
-    def _get_agg_data(self, axis, numeric_only=True):
+    def _get_agg_data(self, axis, numeric_only=True, copy=True):
         num_cols = self._get_numeric_columns()
 
         if len(num_cols) < len(self.columns) and numeric_only:
@@ -2688,7 +2673,9 @@ class DataFrame(NDFrame):
             else:
                 axis_labels = self.index
         else:
-            y = self.values.copy()
+            y = self.values
+            if copy:
+                y = y.copy()
             axis_labels = self._get_agg_axis(axis)
 
         return y, axis_labels
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 6c17c2b7e..5541ec424 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -134,6 +134,12 @@ class CheckIndexing(object):
         expected.values[mask.values] = nan
         assert_frame_equal(df, expected)
 
+        # set from DataFrame
+        expected = df.copy()
+        df[df > np.abs(df)] = df * 2
+        np.putmask(expected.values, mask.values, df.values * 2)
+        assert_frame_equal(df, expected)
+
     def test_setitem_boolean_column(self):
         expected = self.frame.copy()
         mask = self.frame['A'] > 0
@@ -981,6 +987,10 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         indexed_frame = DataFrame.from_records(arr, index=index)
         self.assert_(np.array_equal(indexed_frame.index, index))
 
+        # wrong length
+        self.assertRaises(Exception, DataFrame.from_records, arr,
+                          index=index[:-1])
+
         indexed_frame = DataFrame.from_records(arr, index='f1')
         self.assertRaises(Exception, DataFrame.from_records, np.zeros((2, 3)))
 
@@ -1686,6 +1696,20 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         self.assertRaises(Exception, self.tsframe.xs,
                           self.tsframe.index[0] - datetools.bday)
 
+        # xs get column
+        series = self.frame.xs('A', axis=1)
+        expected = self.frame['A']
+        assert_series_equal(series, expected)
+
+        # no view by default
+        series[:] = 5
+        self.assert_((expected != 5).all())
+
+        # view
+        series = self.frame.xs('A', axis=1, copy=False)
+        series[:] = 5
+        self.assert_((expected == 5).all())
+
     def test_xs_corner(self):
         # pathological mixed-type reordering case
         df = DataFrame(index=[0])
@@ -2304,13 +2328,14 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
                           how='left')
 
     def test_join_overlap(self):
-        df1 = self.frame.copy()
-        df2 = self.frame.copy()
+        df1 = self.frame.ix[:, ['A', 'B', 'C']]
+        df2 = self.frame.ix[:, ['B', 'C', 'D']]
 
         joined = df1.join(df2, lsuffix='_df1', rsuffix='_df2')
-        df1_suf = df1.add_suffix('_df1')
-        df2_suf = df2.add_suffix('_df2')
-        expected = df1_suf.join(df2_suf)
+        df1_suf = df1.ix[:, ['B', 'C']].add_suffix('_df1')
+        df2_suf = df2.ix[:, ['B', 'C']].add_suffix('_df2')
+        no_overlap = self.frame.ix[:, ['A', 'D']]
+        expected = df1_suf.join(df2_suf).join(no_overlap)
         assert_frame_equal(joined, expected)
 
     def test_clip(self):
