commit 0178df90917b962ce7f36b78871b9d8ffa7e527f
Author: Joris Van den Bossche <jorisvandenbossche@gmail.com>
Date:   Thu Jul 11 18:17:06 2013 +0200

    DOC: remove savefig width parameter (#4203)

diff --git a/doc/source/10min.rst b/doc/source/10min.rst
index af84efb93..e3cfcc765 100644
--- a/doc/source/10min.rst
+++ b/doc/source/10min.rst
@@ -626,7 +626,7 @@ Plotting
    ts = pd.Series(randn(1000), index=pd.date_range('1/1/2000', periods=1000))
    ts = ts.cumsum()
 
-   @savefig series_plot_basic.png width=6in
+   @savefig series_plot_basic.png
    ts.plot()
 
 On DataFrame, ``plot`` is a convenience to plot all of the columns with labels:
@@ -637,7 +637,7 @@ On DataFrame, ``plot`` is a convenience to plot all of the columns with labels:
                      columns=['A', 'B', 'C', 'D'])
    df = df.cumsum()
 
-   @savefig frame_plot_basic.png width=6in
+   @savefig frame_plot_basic.png
    plt.figure(); df.plot(); plt.legend(loc='best')
 
 Getting Data In/Out
diff --git a/doc/source/computation.rst b/doc/source/computation.rst
index 9b10c0dc2..eca5bf902 100644
--- a/doc/source/computation.rst
+++ b/doc/source/computation.rst
@@ -232,7 +232,7 @@ These functions can be applied to ndarrays or Series objects:
 
    ts.plot(style='k--')
 
-   @savefig rolling_mean_ex.png width=6in
+   @savefig rolling_mean_ex.png
    rolling_mean(ts, 60).plot(style='k')
 
 They can also be applied to DataFrame objects. This is really just syntactic
@@ -249,7 +249,7 @@ sugar for applying the moving window operator to all of the DataFrame's columns:
                   columns=['A', 'B', 'C', 'D'])
    df = df.cumsum()
 
-   @savefig rolling_mean_frame.png width=6in
+   @savefig rolling_mean_frame.png
    rolling_sum(df, 60).plot(subplots=True)
 
 The ``rolling_apply`` function takes an extra ``func`` argument and performs
@@ -260,7 +260,7 @@ compute the mean absolute deviation on a rolling basis:
 .. ipython:: python
 
    mad = lambda x: np.fabs(x - x.mean()).mean()
-   @savefig rolling_apply_ex.png width=6in
+   @savefig rolling_apply_ex.png
    rolling_apply(ts, 60, mad).plot(style='k')
 
 The ``rolling_window`` function performs a generic rolling window computation
@@ -363,7 +363,7 @@ columns using ``ix`` indexing:
 
 .. ipython:: python
 
-   @savefig rolling_corr_pairwise_ex.png width=6in
+   @savefig rolling_corr_pairwise_ex.png
    correls.ix[:, 'A', 'C'].plot()
 
 Expanding window moment functions
@@ -436,7 +436,7 @@ relative impact of an individual data point. As an example, here is the
 
    ts.plot(style='k--')
 
-   @savefig expanding_mean_frame.png width=6in
+   @savefig expanding_mean_frame.png
    expanding_mean(ts).plot(style='k')
 
 Exponentially weighted moment functions
@@ -487,7 +487,7 @@ Here are an example for a univariate time series:
    plt.close('all')
    ts.plot(style='k--')
 
-   @savefig ewma_ex.png width=6in
+   @savefig ewma_ex.png
    ewma(ts, span=20).plot(style='k')
 
 .. note::
diff --git a/doc/source/faq.rst b/doc/source/faq.rst
index 044922101..68387ba9f 100644
--- a/doc/source/faq.rst
+++ b/doc/source/faq.rst
@@ -205,7 +205,7 @@ adopted to pandas's data structures. For example:
    rng = period_range('1987Q2', periods=10, freq='Q-DEC')
    data = Series(np.random.randn(10), index=rng)
 
-   @savefig skts_ts_plot.png width=6in
+   @savefig skts_ts_plot.png
    plt.figure(); data.plot()
 
 Converting to and from period format
diff --git a/doc/source/groupby.rst b/doc/source/groupby.rst
index 88d7519c3..90722bcf4 100644
--- a/doc/source/groupby.rst
+++ b/doc/source/groupby.rst
@@ -450,7 +450,7 @@ We can also visually compare the original and transformed data sets.
 
    compare = DataFrame({'Original': ts, 'Transformed': transformed})
 
-   @savefig groupby_transform_plot.png width=4in
+   @savefig groupby_transform_plot.png
    compare.plot()
 
 Another common data transform is to replace missing data with the group mean.
diff --git a/doc/source/missing_data.rst b/doc/source/missing_data.rst
index 5ff436f6d..2d8ac5d95 100644
--- a/doc/source/missing_data.rst
+++ b/doc/source/missing_data.rst
@@ -258,7 +258,7 @@ interpolation assumes equally spaced points.
 
    ts.interpolate().head()
 
-   @savefig series_interpolate.png width=6in
+   @savefig series_interpolate.png
    ts.interpolate().plot()
 
 Index aware interpolation is available via the ``method`` keyword:
diff --git a/doc/source/rplot.rst b/doc/source/rplot.rst
index e9bae8502..f268bafc2 100644
--- a/doc/source/rplot.rst
+++ b/doc/source/rplot.rst
@@ -54,7 +54,7 @@ RPlot is a flexible API for producing Trellis plots. These plots allow you to ar
    plot.add(rplot.TrellisGrid(['sex', 'smoker']))
    plot.add(rplot.GeomHistogram())
 
-   @savefig rplot1_tips.png width=8in
+   @savefig rplot1_tips.png
    plot.render(plt.gcf())
 
 In the example above, data from the tips data set is arranged by the attributes 'sex' and 'smoker'. Since both of those attributes can take on one of two values, the resulting grid has two columns and two rows. A histogram is displayed for each cell of the grid.
@@ -67,7 +67,7 @@ In the example above, data from the tips data set is arranged by the attributes
    plot.add(rplot.TrellisGrid(['sex', 'smoker']))
    plot.add(rplot.GeomDensity())
 
-   @savefig rplot2_tips.png width=8in
+   @savefig rplot2_tips.png
    plot.render(plt.gcf())
 
 Example above is the same as previous except the plot is set to kernel density estimation. This shows how easy it is to have different plots for the same Trellis structure.
@@ -81,7 +81,7 @@ Example above is the same as previous except the plot is set to kernel density e
    plot.add(rplot.GeomScatter())
    plot.add(rplot.GeomPolyFit(degree=2))
 
-   @savefig rplot3_tips.png width=8in
+   @savefig rplot3_tips.png
    plot.render(plt.gcf())
 
 The plot above shows that it is possible to have two or more plots for the same data displayed on the same Trellis grid cell.
@@ -95,7 +95,7 @@ The plot above shows that it is possible to have two or more plots for the same
    plot.add(rplot.GeomScatter())
    plot.add(rplot.GeomDensity2D())
 
-   @savefig rplot4_tips.png width=8in
+   @savefig rplot4_tips.png
    plot.render(plt.gcf())
 
 Above is a similar plot but with 2D kernel desnity estimation plot superimposed.
@@ -108,7 +108,7 @@ Above is a similar plot but with 2D kernel desnity estimation plot superimposed.
    plot.add(rplot.TrellisGrid(['sex', '.']))
    plot.add(rplot.GeomHistogram())
 
-   @savefig rplot5_tips.png width=8in
+   @savefig rplot5_tips.png
    plot.render(plt.gcf())
 
 It is possible to only use one attribute for grouping data. The example above only uses 'sex' attribute. If the second grouping attribute is not specified, the plots will be arranged in a column.
@@ -121,7 +121,7 @@ It is possible to only use one attribute for grouping data. The example above on
    plot.add(rplot.TrellisGrid(['.', 'smoker']))
    plot.add(rplot.GeomHistogram())
 
-   @savefig rplot6_tips.png width=8in
+   @savefig rplot6_tips.png
    plot.render(plt.gcf())
 
 If the first grouping attribute is not specified the plots will be arranged in a row.
@@ -138,7 +138,7 @@ If the first grouping attribute is not specified the plots will be arranged in a
    plot.add(rplot.TrellisGrid(['sex', 'smoker']))
    plot.add(rplot.GeomPoint(size=80.0, colour=rplot.ScaleRandomColour('day'), shape=rplot.ScaleShape('size'), alpha=1.0))
 
-   @savefig rplot7_tips.png width=8in
+   @savefig rplot7_tips.png
    plot.render(plt.gcf())
 
 As shown above, scatter plots are also possible. Scatter plots allow you to map various data attributes to graphical properties of the plot. In the example above the colour and shape of the scatter plot graphical objects is mapped to 'day' and 'size' attributes respectively. You use scale objects to specify these mappings. The list of scale classes is given below with initialization arguments for quick reference.
diff --git a/doc/source/v0.8.0.txt b/doc/source/v0.8.0.txt
index 243b7466d..3b11582ac 100644
--- a/doc/source/v0.8.0.txt
+++ b/doc/source/v0.8.0.txt
@@ -168,7 +168,7 @@ New plotting methods
 
    fx['FR'].plot(style='g')
 
-   @savefig whatsnew_secondary_y.png width=6in
+   @savefig whatsnew_secondary_y.png
    fx['IT'].plot(style='k--', secondary_y=True)
 
 Vytautas Jancauskas, the 2012 GSOC participant, has added many new plot
@@ -180,7 +180,7 @@ types. For example, ``'kde'`` is a new option:
                               np.random.randn(1000) * 0.5 + 3)))
    plt.figure()
    s.hist(normed=True, alpha=0.2)
-   @savefig whatsnew_kde.png width=6in
+   @savefig whatsnew_kde.png
    s.plot(kind='kde')
 
 See :ref:`the plotting page <visualization.other>` for much more.
diff --git a/doc/source/visualization.rst b/doc/source/visualization.rst
index f1a988004..a3a02e1a9 100644
--- a/doc/source/visualization.rst
+++ b/doc/source/visualization.rst
@@ -44,7 +44,7 @@ The ``plot`` method on Series and DataFrame is just a simple wrapper around
    ts = Series(randn(1000), index=date_range('1/1/2000', periods=1000))
    ts = ts.cumsum()
 
-   @savefig series_plot_basic.png width=6in
+   @savefig series_plot_basic.png
    ts.plot()
 
 If the index consists of dates, it calls ``gcf().autofmt_xdate()`` to try to
@@ -53,7 +53,7 @@ for controlling the look of the plot:
 
 .. ipython:: python
 
-   @savefig series_plot_basic2.png width=6in
+   @savefig series_plot_basic2.png
    plt.figure(); ts.plot(style='k--', label='Series'); plt.legend()
 
 On DataFrame, ``plot`` is a convenience to plot all of the columns with labels:
@@ -63,7 +63,7 @@ On DataFrame, ``plot`` is a convenience to plot all of the columns with labels:
    df = DataFrame(randn(1000, 4), index=ts.index, columns=list('ABCD'))
    df = df.cumsum()
 
-   @savefig frame_plot_basic.png width=6in
+   @savefig frame_plot_basic.png
    plt.figure(); df.plot(); plt.legend(loc='best')
 
 You may set the ``legend`` argument to ``False`` to hide the legend, which is
@@ -71,14 +71,14 @@ shown by default.
 
 .. ipython:: python
 
-   @savefig frame_plot_basic_noleg.png width=6in
+   @savefig frame_plot_basic_noleg.png
    df.plot(legend=False)
 
 Some other options are available, like plotting each Series on a different axis:
 
 .. ipython:: python
 
-   @savefig frame_plot_subplots.png width=6in
+   @savefig frame_plot_subplots.png
    df.plot(subplots=True, figsize=(6, 6)); plt.legend(loc='best')
 
 You may pass ``logy`` to get a log-scale Y axis.
@@ -90,7 +90,7 @@ You may pass ``logy`` to get a log-scale Y axis.
    ts = Series(randn(1000), index=date_range('1/1/2000', periods=1000))
    ts = np.exp(ts.cumsum())
 
-   @savefig series_plot_logy.png width=6in
+   @savefig series_plot_logy.png
    ts.plot(logy=True)
 
 You can plot one column versus another using the `x` and `y` keywords in
@@ -103,7 +103,7 @@ You can plot one column versus another using the `x` and `y` keywords in
    df3 = DataFrame(randn(1000, 2), columns=['B', 'C']).cumsum()
    df3['A'] = Series(range(len(df)))
 
-   @savefig df_plot_xy.png width=6in
+   @savefig df_plot_xy.png
    df3.plot(x='A', y='B')
 
 
@@ -118,7 +118,7 @@ To plot data on a secondary y-axis, use the ``secondary_y`` keyword:
 
    df.A.plot()
 
-   @savefig series_plot_secondary_y.png width=6in
+   @savefig series_plot_secondary_y.png
    df.B.plot(secondary_y=True, style='g')
 
 
@@ -133,7 +133,7 @@ keyword:
    plt.figure()
    ax = df.plot(secondary_y=['A', 'B'])
    ax.set_ylabel('CD scale')
-   @savefig frame_plot_secondary_y.png width=6in
+   @savefig frame_plot_secondary_y.png
    ax.right_ax.set_ylabel('AB scale')
 
 
@@ -146,7 +146,7 @@ with "(right)" in the legend. To turn off the automatic marking, use the
 
    plt.figure()
 
-   @savefig frame_plot_secondary_y_no_right.png width=6in
+   @savefig frame_plot_secondary_y_no_right.png
    df.plot(secondary_y=['A', 'B'], mark_right=False)
 
 
@@ -164,7 +164,7 @@ Here is the default behavior, notice how the x-axis tick labelling is performed:
 
    plt.figure()
 
-   @savefig ser_plot_suppress.png width=6in
+   @savefig ser_plot_suppress.png
    df.A.plot()
 
 
@@ -174,7 +174,7 @@ Using the ``x_compat`` parameter, you can suppress this behavior:
 
    plt.figure()
 
-   @savefig ser_plot_suppress_parm.png width=6in
+   @savefig ser_plot_suppress_parm.png
    df.A.plot(x_compat=True)
 
 
@@ -187,7 +187,7 @@ in ``pandas.plot_params`` can be used in a `with statement`:
 
    plt.figure()
 
-   @savefig ser_plot_suppress_context.png width=6in
+   @savefig ser_plot_suppress_context.png
    with pd.plot_params.use('x_compat', True):
        df.A.plot(color='r')
        df.B.plot(color='g')
@@ -215,7 +215,7 @@ You can pass an ``ax`` argument to ``Series.plot`` to plot on a particular axis:
    df['B'].plot(ax=axes[0,1]); axes[0,1].set_title('B')
    df['C'].plot(ax=axes[1,0]); axes[1,0].set_title('C')
 
-   @savefig series_plot_multi.png width=6in
+   @savefig series_plot_multi.png
    df['D'].plot(ax=axes[1,1]); axes[1,1].set_title('D')
 
 
@@ -235,7 +235,7 @@ For labeled, non-time series data, you may wish to produce a bar plot:
 
    plt.figure();
 
-   @savefig bar_plot_ex.png width=6in
+   @savefig bar_plot_ex.png
    df.ix[5].plot(kind='bar'); plt.axhline(0, color='k')
 
 Calling a DataFrame's ``plot`` method with ``kind='bar'`` produces a multiple
@@ -250,7 +250,7 @@ bar plot:
 
    df2 = DataFrame(rand(10, 4), columns=['a', 'b', 'c', 'd'])
 
-   @savefig bar_plot_multi_ex.png width=5in
+   @savefig bar_plot_multi_ex.png
    df2.plot(kind='bar');
 
 To produce a stacked bar plot, pass ``stacked=True``:
@@ -262,7 +262,7 @@ To produce a stacked bar plot, pass ``stacked=True``:
 
 .. ipython:: python
 
-   @savefig bar_plot_stacked_ex.png width=5in
+   @savefig bar_plot_stacked_ex.png
    df2.plot(kind='bar', stacked=True);
 
 To get horizontal bar plots, pass ``kind='barh'``:
@@ -274,7 +274,7 @@ To get horizontal bar plots, pass ``kind='barh'``:
 
 .. ipython:: python
 
-   @savefig barh_plot_stacked_ex.png width=5in
+   @savefig barh_plot_stacked_ex.png
    df2.plot(kind='barh', stacked=True);
 
 Histograms
@@ -283,7 +283,7 @@ Histograms
 
    plt.figure();
 
-   @savefig hist_plot_ex.png width=6in
+   @savefig hist_plot_ex.png
    df['A'].diff().hist()
 
 
@@ -294,7 +294,7 @@ subplots:
 
    plt.figure()
 
-   @savefig frame_hist_ex.png width=6in
+   @savefig frame_hist_ex.png
    df.diff().hist(color='k', alpha=0.5, bins=50)
 
 
@@ -309,8 +309,8 @@ New since 0.10.0, the ``by`` keyword can be specified to plot grouped histograms
 
    data = Series(randn(1000))
 
-   @savefig grouped_hist.png width=6in
-   data.hist(by=randint(0, 4, 1000))
+   @savefig grouped_hist.png
+   data.hist(by=randint(0, 4, 1000), figsize=(6, 4))
 
 
 .. _visualization.box:
@@ -329,7 +329,7 @@ a uniform random variable on [0,1).
    df = DataFrame(rand(10,5))
    plt.figure();
 
-   @savefig box_plot_ex.png width=6in
+   @savefig box_plot_ex.png
    bp = df.boxplot()
 
 You can create a stratified boxplot using the ``by`` keyword argument to create
@@ -342,7 +342,7 @@ groupings.  For instance,
 
    plt.figure();
 
-   @savefig box_plot_ex2.png width=6in
+   @savefig box_plot_ex2.png
    bp = df.boxplot(by='X')
 
 You can also pass a subset of columns to plot, as well as group by multiple
@@ -356,7 +356,7 @@ columns:
 
    plt.figure();
 
-   @savefig box_plot_ex3.png width=6in
+   @savefig box_plot_ex3.png
    bp = df.boxplot(column=['Col1','Col2'], by=['X','Y'])
 
 .. _visualization.scatter_matrix:
@@ -372,7 +372,7 @@ Scatter plot matrix
    from pandas.tools.plotting import scatter_matrix
    df = DataFrame(randn(1000, 4), columns=['a', 'b', 'c', 'd'])
 
-   @savefig scatter_matrix_kde.png width=6in
+   @savefig scatter_matrix_kde.png
    scatter_matrix(df, alpha=0.2, figsize=(6, 6), diagonal='kde')
 
 .. _visualization.kde:
@@ -389,7 +389,7 @@ setting `kind='kde'`:
 
    ser = Series(randn(1000))
 
-   @savefig kde_plot.png width=6in
+   @savefig kde_plot.png
    ser.plot(kind='kde')
 
 .. _visualization.andrews_curves:
@@ -414,7 +414,7 @@ of the same class will usually be closer together and form larger structures.
 
    plt.figure()
 
-   @savefig andrews_curves.png width=6in
+   @savefig andrews_curves.png
    andrews_curves(data, 'Name')
 
 .. _visualization.parallel_coordinates:
@@ -437,7 +437,7 @@ represents one data point. Points that tend to cluster will appear closer togeth
 
    plt.figure()
 
-   @savefig parallel_coordinates.png width=6in
+   @savefig parallel_coordinates.png
    parallel_coordinates(data, 'Name')
 
 Lag Plot
@@ -456,7 +456,7 @@ implies that the underlying data are not random.
    data = Series(0.1 * rand(1000) +
       0.9 * np.sin(np.linspace(-99 * np.pi, 99 * np.pi, num=1000)))
 
-   @savefig lag_plot.png width=6in
+   @savefig lag_plot.png
    lag_plot(data)
 
 Autocorrelation Plot
@@ -479,7 +479,7 @@ confidence band.
    data = Series(0.7 * rand(1000) +
       0.3 * np.sin(np.linspace(-9 * np.pi, 9 * np.pi, num=1000)))
 
-   @savefig autocorrelation_plot.png width=6in
+   @savefig autocorrelation_plot.png
    autocorrelation_plot(data)
 
 .. _visualization.bootstrap:
@@ -499,7 +499,7 @@ are what constitutes the bootstrap plot.
 
    data = Series(rand(1000))
 
-   @savefig bootstrap_plot.png width=6in
+   @savefig bootstrap_plot.png
    bootstrap_plot(data, size=50, samples=500, color='grey')
 
 .. _visualization.radviz:
@@ -529,7 +529,7 @@ be colored differently.
 
    plt.figure()
 
-   @savefig radviz.png width=6in
+   @savefig radviz.png
    radviz(data, 'Name')
 
 .. _visualization.colormaps:
@@ -550,7 +550,7 @@ To use the jet colormap, we can simply pass ``'jet'`` to ``colormap=``
 
    plt.figure()
 
-   @savefig jet.png width=6in
+   @savefig jet.png
    df.plot(colormap='jet')
 
 or we can pass the colormap itself
@@ -561,7 +561,7 @@ or we can pass the colormap itself
 
    plt.figure()
 
-   @savefig jet_cm.png width=6in
+   @savefig jet_cm.png
    df.plot(colormap=cm.jet)
 
 Colormaps can also be used other plot types, like bar charts:
@@ -573,7 +573,7 @@ Colormaps can also be used other plot types, like bar charts:
 
    plt.figure()
 
-   @savefig greens.png width=6in
+   @savefig greens.png
    dd.plot(kind='bar', colormap='Greens')
 
 Parallel coordinates charts:
@@ -582,7 +582,7 @@ Parallel coordinates charts:
 
    plt.figure()
 
-   @savefig parallel_gist_rainbow.png width=6in
+   @savefig parallel_gist_rainbow.png
    parallel_coordinates(data, 'Name', colormap='gist_rainbow')
 
 Andrews curves charts:
@@ -591,5 +591,5 @@ Andrews curves charts:
 
    plt.figure()
 
-   @savefig andrews_curve_winter.png width=6in
+   @savefig andrews_curve_winter.png
    andrews_curves(data, 'Name', colormap='winter')
