commit f074abef5b3b59d072cc4568949673a39bf58dd1
Author: Srinivas Reddy Thatiparthy (శ్రీనివాస్  రెడ్డి తాటిపర్తి) <thatiparthysreenivas@gmail.com>
Date:   Sun Jan 6 00:57:00 2019 +0530

    Add _expand_user to _stringify_path as we need to allow tilde - ~, to expand to full path (#23769)

diff --git a/doc/source/whatsnew/v0.24.0.rst b/doc/source/whatsnew/v0.24.0.rst
index 8bcb97ec0..4ff1f9677 100644
--- a/doc/source/whatsnew/v0.24.0.rst
+++ b/doc/source/whatsnew/v0.24.0.rst
@@ -416,6 +416,7 @@ Other Enhancements
 - :class:`IntervalIndex` has gained the :attr:`~IntervalIndex.is_overlapping` attribute to indicate if the ``IntervalIndex`` contains any overlapping intervals (:issue:`23309`)
 - :func:`pandas.DataFrame.to_sql` has gained the ``method`` argument to control SQL insertion clause. See the :ref:`insertion method <io.sql.method>` section in the documentation. (:issue:`8953`)
 - :meth:`DataFrame.corrwith` now supports Spearman's rank correlation, Kendall's tau as well as callable correlation methods. (:issue:`21925`)
+- :meth:`DataFrame.to_json`, :meth:`DataFrame.to_csv`, :meth:`DataFrame.to_pickle`, and :meth:`DataFrame.to_XXX` etc. now support tilde(~) in path argument. (:issue:`23473`)
 
 .. _whatsnew_0240.api_breaking:
 
diff --git a/pandas/io/common.py b/pandas/io/common.py
index 3a67238a6..ad054d77b 100644
--- a/pandas/io/common.py
+++ b/pandas/io/common.py
@@ -157,7 +157,7 @@ def _stringify_path(filepath_or_buffer):
         return text_type(filepath_or_buffer)
     if _PY_PATH_INSTALLED and isinstance(filepath_or_buffer, LocalPath):
         return filepath_or_buffer.strpath
-    return filepath_or_buffer
+    return _expand_user(filepath_or_buffer)
 
 
 def is_s3_url(url):
diff --git a/pandas/tests/io/test_common.py b/pandas/tests/io/test_common.py
index a4c76285c..13a8b1a0e 100644
--- a/pandas/tests/io/test_common.py
+++ b/pandas/tests/io/test_common.py
@@ -3,6 +3,7 @@ Tests for the pandas.io.common functionalities
 """
 import mmap
 import os
+import re
 
 import pytest
 
@@ -148,6 +149,31 @@ bar2,12,13,14,15
         with pytest.raises(error_class):
             reader(path)
 
+    @pytest.mark.parametrize('reader, module, error_class, fn_ext', [
+        (pd.read_csv, 'os', FileNotFoundError, 'csv'),
+        (pd.read_fwf, 'os', FileNotFoundError, 'txt'),
+        (pd.read_excel, 'xlrd', FileNotFoundError, 'xlsx'),
+        (pd.read_feather, 'feather', Exception, 'feather'),
+        (pd.read_hdf, 'tables', FileNotFoundError, 'h5'),
+        (pd.read_stata, 'os', FileNotFoundError, 'dta'),
+        (pd.read_sas, 'os', FileNotFoundError, 'sas7bdat'),
+        (pd.read_json, 'os', ValueError, 'json'),
+        (pd.read_msgpack, 'os', ValueError, 'mp'),
+        (pd.read_pickle, 'os', FileNotFoundError, 'pickle'),
+    ])
+    def test_read_expands_user_home_dir(self, reader, module,
+                                        error_class, fn_ext, monkeypatch):
+        pytest.importorskip(module)
+
+        path = os.path.join('~', 'does_not_exist.' + fn_ext)
+        monkeypatch.setattr(icom, '_expand_user',
+                            lambda x: os.path.join('foo', x))
+
+        message = "".join(["foo", os.path.sep, "does_not_exist.", fn_ext])
+
+        with pytest.raises(error_class, message=re.escape(message)):
+            reader(path)
+
     def test_read_non_existant_read_table(self):
         path = os.path.join(HERE, 'data', 'does_not_exist.' + 'csv')
         with pytest.raises(FileNotFoundError):
