commit ab1b17e54bbe8e6de62632b3c0a222eb89c43c46
Author: Andy Hayden <andyhayden1@gmail.com>
Date:   Tue Jul 16 01:13:05 2013 +0100

    ENH tweak DataFrame isin method

diff --git a/doc/source/indexing.rst b/doc/source/indexing.rst
index 4f8fc5e78..d3d6fe367 100644
--- a/doc/source/indexing.rst
+++ b/doc/source/indexing.rst
@@ -456,11 +456,9 @@ and :ref:`Advanced Indexing <indexing.advanced>` you may select along more than
 
    df2.loc[criterion & (df2['b'] == 'x'),'b':'c']
 
-*New in 0.12.0*
-
 DataFrame also has an ``isin`` method.  When calling ``isin``, pass a set of
-values as either an array or dict.  If values is just an array, ``isin`` returns
-a DataFrame of booleans that is the same shape as the original DataFrame, with Trues
+values as either an array or dict.  If values is an array, ``isin`` returns
+a DataFrame of booleans that is the same shape as the original DataFrame, with True
 wherever the element is in the sequence of values.
 
 .. ipython:: python
@@ -472,10 +470,9 @@ wherever the element is in the sequence of values.
 
    df.isin(values)
 
-Oftentimes you'll want to match certain values with certain columns or rows.
-Just make values a ``dict`` where the key is the row or column, and the value is
-a list of items you want to check for.  Make sure to set axis equal to 0 for
-row-wise or 1 for column-wise matching.
+Oftentimes you'll want to match certain values with certain columns.
+Just make values a ``dict`` where the key is the column, and the value is
+a list of items you want to check for.
 
 .. ipython:: python
 
@@ -484,7 +481,7 @@ row-wise or 1 for column-wise matching.
 
    values = {'ids': ['a', 'b'], 'vals': [1, 3]}
 
-   df.isin(values, axis=1)
+   df.isin(values)
 
 Where and Masking
 ~~~~~~~~~~~~~~~~~
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 702baa955..331deccaf 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -5481,37 +5481,33 @@ class DataFrame(NDFrame):
 
         return self._constructor(new_data)
 
-    def isin(self, values, axis=None):
+
+    def isin(self, values):
         """
-        Return boolean vector showing whether elements in the DataFrame are
-        exactly contained in the passed sequence of values.
+        Return boolean DataFrame showing whether each elements in the DataFrame is
+        contained in items.
 
         Parameters
         ----------
-        values : sequence (array-like) or dict of {label: sequence}.
-        axis : {None, 0, 1}
-            Compute isin row-wise (axis=0) or column-wise (axis=1)
-            Mandatory if values is a dict, ignored otherwise.
+        values : iterable or dictionary of columns to values
 
         Returns
         -------
 
-        bools : Series of booleans
+        DataFrame of booleans
         """
-        if not isinstance(values, dict):
-            return self.applymap(values.__contains__)
+        if isinstance(values, dict):
+            from collections import defaultdict
+            from pandas.tools.merge import concat
+            values = defaultdict(list, values)
+            return concat((self.iloc[:, [i]].isin(values[ind] or values[i])
+                             for i, ind in enumerate(self.columns)), axis=1)
 
         else:
-            from pandas.tools.merge import concat
-            if axis == 1:
-                return concat((self[col].isin(vals) for col, vals in
-                               values.iteritems()), axis=1)
-            elif axis == 0:
-                return concat((self.loc[row].isin(vals) for row, vals in
-                               values.iteritems()), axis=1).T
-            else:
-                raise TypeError('Axis must be "0" or "1" when values is a dict '
-                                'Got "%s" instead.' % str(axis))
+            return DataFrame(lib.ismember(self.values.ravel(),
+                                          set(values)).reshape(self.shape),
+                             self.index,
+                             self.columns)
 
     #----------------------------------------------------------------------
     # Deprecated stuff
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 07aa4fd13..916a38ae8 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -10639,50 +10639,34 @@ starting,ending,measure
                         'ids2': ['a', 'n', 'c', 'n']},
                         index=['foo', 'bar', 'baz', 'qux'])
         other = ['a', 'b', 'c']
-        result_none = df[['ids', 'ids2']].isin(other)
-        expected_none = DataFrame({'ids':  [True, True, False, False],
-                                  'ids2': [True, False, True, False]},
-                                  index=['foo', 'bar', 'baz', 'qux'])
 
-        assert_frame_equal(result_none, expected_none)
-
-        # axis = None
-        result_none_full = df.isin(other)
-        expected_none_full = DataFrame({'ids': [True, True, False, False],
-                                        'ids2': [True, False, True, False],
-                                        'vals': [False, False, False, False]},
-                                        index=['foo', 'bar', 'baz', 'qux'])
+        result = df.isin(other)
+        expected = DataFrame([df.loc[s].isin(other) for s in df.index])
+        assert_frame_equal(result, expected)
 
-        assert_frame_equal(result_none_full, expected_none_full)
+    def test_isin_empty(self):
+        df = DataFrame({'A': ['a', 'b', 'c'], 'B': ['a', 'e', 'f']})
+        result = df.isin([])
+        expected = pd.DataFrame(False, df.index, df.columns)
+        assert_frame_equal(result, expected)
 
     def test_isin_dict(self):
-        df = DataFrame({'A': ['a', 'b', 'c', 'd'], 'B': [1, 2, 3, 4],
-                        'C': [1, 5, 7, 8]},
-                        index=['foo', 'bar', 'baz', 'qux'])
-        other = {'A': ('a', 'b'), 'B': (1, 3)}
-        result = df.isin(other, axis=1)
-        expected = DataFrame({'A': [True, True, False, False],
-                              'B': [True, False, True, False]},
-                              index=['foo', 'bar', 'baz', 'qux'])
-        assert_frame_equal(result, expected)
+        df = DataFrame({'A': ['a', 'b', 'c'], 'B': ['a', 'e', 'f']})
+        d = {'A': ['a']}
 
-    def test_isin_row(self):
-        df = DataFrame({'A': ['a', 'b', 'c', 'd'], 'B': [1, 2, 3, 4],
-                        'C': [1, 5, 7, 8]},
-                        index=['foo', 'bar', 'baz', 'qux'])
-        ind_other = {'foo': ['a', 1, 1],
-                     'bar': ['d', 2, 1],
-                     'baz': ['nn', 'nn', 'nn']}
+        expected = DataFrame(False, df.index, df.columns)
+        expected.loc[0, 'A'] = True
 
-        result_ind = df.isin(ind_other, axis=0)
-        expected_ind = DataFrame({'A': [True, False, False],
-                                  'B': [True, True, False],
-                                  'C': [True, False, False]},
-                            index=['foo', 'bar', 'baz']).reindex_like(result_ind)
+        result = df.isin(d)
+        assert_frame_equal(result, expected)
 
-        assert_frame_equal(result_ind, expected_ind)
+        # non unique columns
+        df.columns = ['A', 'A']
+        expected = DataFrame(False, df.index, df.columns)
+        expected.loc[0, 'A'] = True
+        result = df.isin(d)
+        assert_frame_equal(result, expected)
 
-        self.assertRaises(TypeError, df.isin, ind_other)
 
 if __name__ == '__main__':
     # unittest.main()
