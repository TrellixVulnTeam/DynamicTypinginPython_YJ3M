commit 2ee1b3182fef45113246dc2f0fbcc6f8612d2038
Author: Phillip Cloud <cpcloud@gmail.com>
Date:   Fri Jun 28 10:52:03 2013 -0400

    BUG: fix 1xN mask on 1xN frame

diff --git a/doc/source/release.rst b/doc/source/release.rst
index 1edb44502..ae76324c0 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -293,6 +293,8 @@ pandas 0.12
     :issue:`4028`, :issue:`4054`)
   - ``Series.hist`` will now take the figure from the current environment if
     one is not passed
+  - Fixed bug where a 1xN DataFrame would barf on a 1xN mask (:issue:`4071`)
+
 
 pandas 0.11.0
 =============
diff --git a/doc/source/v0.12.0.txt b/doc/source/v0.12.0.txt
index 0d2251bf2..2a5847af4 100644
--- a/doc/source/v0.12.0.txt
+++ b/doc/source/v0.12.0.txt
@@ -436,6 +436,7 @@ Bug Fixes
     :issue:`4028`, :issue:`4054`)
   - ``Series.hist`` will now take the figure from the current environment if
     one is not passed
+  - Fixed bug where a 1xN DataFrame would barf on a 1xN mask (:issue:`4071`)
 
 See the :ref:`full release notes
 <release>` or issue tracker
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index c2af6e395..607461976 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -575,9 +575,10 @@ class Block(object):
             return make_block(result, self.items, self.ref_items)
 
         # might need to separate out blocks
-        axis = cond.ndim-1
-        cond = cond.swapaxes(axis,0)
-        mask = np.array([ cond[i].all() for i in enumerate(range(cond.shape[0]))],dtype=bool)
+        axis = cond.ndim - 1
+        cond = cond.swapaxes(axis, 0)
+        mask = np.array([cond[i].all() for i in xrange(cond.shape[0])],
+                        dtype=bool)
 
         result_blocks = []
         for m in [mask, ~mask]:
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 7dacacd8a..3a5eb7c01 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -7675,6 +7675,13 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         assert_frame_equal(rs, df.mask(df <= 0))
         assert_frame_equal(rs, df.mask(~cond))
 
+    def test_mask_edge_case_1xN_frame(self):
+        # GH4071
+        df = DataFrame([[1, 2]])
+        res = df.mask(np.array([[True, False]]))
+        expec = DataFrame([[nan, 2]])
+        assert_frame_equal(res, expec)
+
     #----------------------------------------------------------------------
     # Transposing
     def test_transpose(self):
