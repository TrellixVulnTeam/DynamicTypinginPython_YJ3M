commit 8791ce04ada4c8b9cfe9aee2d3d8c5e0dfa96fd5
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Aug 22 18:36:03 2011 -0400

    TST: sparse test coverage

diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index 7c6833fe7..d83d18a4b 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -80,8 +80,8 @@ def _sparse_op_wrap(op, name):
                                 index=self.index,
                                 sparse_index=self.sp_index,
                                 fill_value=new_fill_value)
-        else:
-            raise Exception('operation with %s not supported' % type(other))
+        else: # pragma: no cover
+            raise TypeError('operation with %s not supported' % type(other))
 
     wrapper.__name__ = name
     return wrapper
@@ -1329,7 +1329,7 @@ class SparseWidePanel(WidePanel):
         self.major_axis = major_axis
         self.minor_axis = minor_axis
 
-    def _consolidate_inplace(self):
+    def _consolidate_inplace(self): # pragma: no cover
         # do nothing when DataFrame calls this method
         pass
 
diff --git a/pandas/tests/test_sparse.py b/pandas/tests/test_sparse.py
index 8bcfcb3b0..9a5093e15 100644
--- a/pandas/tests/test_sparse.py
+++ b/pandas/tests/test_sparse.py
@@ -420,6 +420,15 @@ class TestSparseSeries(TestCase):
         sp_zero = SparseSeries([], index=[], fill_value=0)
         _compare_with_series(sp, np.arange(10))
 
+        # with copy=False
+        reindexed = self.bseries.reindex(self.bseries.index, copy=True)
+        reindexed.sp_values[:] = 1.
+        self.assert_((self.bseries.sp_values != 1.).all())
+
+        reindexed = self.bseries.reindex(self.bseries.index, copy=False)
+        reindexed.sp_values[:] = 1.
+        self.assert_((self.bseries.sp_values == 1.).all())
+
     def test_sparse_reindex(self):
         length = 10
 
@@ -581,6 +590,11 @@ class TestSparseSeries(TestCase):
         self.assert_(isinstance(result, SparseSeries))
         assert_series_equal(result.to_dense(), expected)
 
+        result = self.zbseries.cumsum()
+        expected = self.zbseries.to_dense().cumsum()
+        self.assert_(isinstance(result, Series))
+        assert_series_equal(result, expected)
+
 class TestSparseTimeSeries(TestCase):
     pass
 
@@ -632,8 +646,6 @@ class TestSparseDataFrame(TestCase):
         assert_sp_frame_equal(cp, self.frame)
         self.assert_(cp.index is self.frame.index)
 
-        # TODO: Test that DATA is copied!
-
     def test_constructor(self):
         for col, series in self.frame.iteritems():
             self.assert_(isinstance(series, SparseSeries))
@@ -795,6 +807,17 @@ class TestSparseDataFrame(TestCase):
     def test_getitem(self):
         pass
 
+    def test_fancy_index_misc(self):
+        # axis = 0
+        sliced = self.frame.ix[-2:, :]
+        expected = self.frame.reindex(index=self.frame.index[-2:])
+        assert_sp_frame_equal(sliced, expected)
+
+        # axis = 1
+        sliced = self.frame.ix[:, -2:]
+        expected = self.frame.reindex(columns=self.frame.columns[-2:])
+        assert_sp_frame_equal(sliced, expected)
+
     def test_getitem_overload(self):
         # slicing
         sl = self.frame[:20]
@@ -997,6 +1020,15 @@ class TestSparseDataFrame(TestCase):
         _check_frame(self.zframe)
         _check_frame(self.fill_frame)
 
+        # with copy=False
+        reindexed = self.frame.reindex(self.frame.index, copy=False)
+        reindexed['F'] = reindexed['A']
+        self.assert_('F' in self.frame)
+
+        reindexed = self.frame.reindex(self.frame.index)
+        reindexed['G'] = reindexed['A']
+        self.assert_('G' not in self.frame)
+
     def test_fillna(self):
         pass
 
@@ -1248,6 +1280,11 @@ class TestSparseWidePanel(TestCase,
         self.assertRaises(Exception, self.panel.reindex,
                           items=['item0', 'ItemA', 'ItemB'])
 
+        # test copying
+        cp = self.panel.reindex(self.panel.major_axis, copy=True)
+        cp['ItemA']['E'] = cp['ItemA']['A']
+        self.assert_('E' not in self.panel['ItemA'])
+
     def test_operators(self):
         def _check_ops(panel):
             def _dense_comp(op):
