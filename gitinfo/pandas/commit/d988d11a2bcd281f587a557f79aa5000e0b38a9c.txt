commit d988d11a2bcd281f587a557f79aa5000e0b38a9c
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Apr 14 16:42:08 2012 -0400

    ENH: partial date slicing with DatetimeIndex, close #1044

diff --git a/pandas/core/index.py b/pandas/core/index.py
index 19702fca9..b7b3c5401 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1510,10 +1510,8 @@ class DatetimeIndex(Int64Index):
                     s = t1
             snapped[i] = np.datetime64(s)
 
-        dti = DatetimeIndex(snapped) # we know it conforms; this skips check
-        dti.offset = freq
-
-        return dti
+        # we know it conforms; skip check
+        return DatetimeIndex(snapped, freq=freq, verify_integrity=False)
 
     def shift(self, n, freq=None):
         """
@@ -1739,16 +1737,39 @@ class DatetimeIndex(Int64Index):
             return self._engine.get_loc(key)
         except KeyError:
             try:
-                asdt, parsed, reso = datetools.parse_time_string(key)
-                key = asdt
-                loc = self._partial_date_slice(reso, parsed)
-                return loc
-            except TypeError:
+                return self._get_string_slice(key)
+            except (TypeError, KeyError):
                 pass
+
+            return self._engine.get_loc(to_timestamp(key))
+
+    def _get_string_slice(self, key):
+        asdt, parsed, reso = datetools.parse_time_string(key)
+        key = asdt
+        loc = self._partial_date_slice(reso, parsed)
+        return loc
+
+    def slice_locs(self, start=None, end=None):
+        """
+        Index.slice_locs, customized to handle partial ISO-8601 string slicing
+        """
+        if isinstance(start, basestring) or isinstance(end, basestring):
+            try:
+                if start:
+                    start_loc = self._get_string_slice(start).start
+                else:
+                    start_loc = 0
+
+                if end:
+                    end_loc = self._get_string_slice(end).stop
+                else:
+                    end_loc = len(self)
+
+                return start_loc, end_loc
             except KeyError:
                 pass
 
-            return self._engine.get_loc(to_timestamp(key))
+        return Index.slice_locs(self, start, end)
 
     def __getitem__(self, key):
         """Override numpy.ndarray's __getitem__ method to work as desired"""
diff --git a/pandas/tests/test_timeseries.py b/pandas/tests/test_timeseries.py
index ac0479614..3c1edce3e 100644
--- a/pandas/tests/test_timeseries.py
+++ b/pandas/tests/test_timeseries.py
@@ -829,13 +829,28 @@ class TestDatetime64(unittest.TestCase):
 
     def test_slice_month(self):
         dti = DatetimeIndex(freq='D', start=datetime(2005,1,1), periods=500)
-
         s = Series(np.arange(len(dti)), index=dti)
         self.assertEquals(len(s['2005-11']), 30)
 
         df = DataFrame(np.random.rand(len(dti), 5), index=dti)
         self.assertEquals(len(df.ix['2005-11']), 30)
 
+    def test_partial_slice(self):
+        rng = DatetimeIndex(freq='D', start=datetime(2005,1,1), periods=500)
+        s = Series(np.arange(len(rng)), index=rng)
+
+        result = s['2005-05':'2006-02']
+        expected = s['20050501':'20060228']
+        assert_series_equal(result, expected)
+
+        result = s['2005-05':]
+        expected = s['20050501':]
+        assert_series_equal(result, expected)
+
+        result = s[:'2006-02']
+        expected = s[:'20060228']
+        assert_series_equal(result, expected)
+
     def test_datetimeindex_constructor(self):
         arr = ['1/1/2005', '1/2/2005', 'Jn 3, 2005', '2005-01-04']
         self.assertRaises(Exception, DatetimeIndex, arr)
