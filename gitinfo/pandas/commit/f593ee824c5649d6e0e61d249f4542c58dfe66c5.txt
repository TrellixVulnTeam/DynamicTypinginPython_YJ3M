commit f593ee824c5649d6e0e61d249f4542c58dfe66c5
Author: TrigonaMinima <shivamrana95@yahoo.in>
Date:   Fri Feb 10 00:33:21 2017 +0530

    TST: Remaining tseries tests reorg
    
    closes #14854
    closes #15359

diff --git a/doc/source/whatsnew/v0.20.0.txt b/doc/source/whatsnew/v0.20.0.txt
index 2279d0464..17ce45170 100644
--- a/doc/source/whatsnew/v0.20.0.txt
+++ b/doc/source/whatsnew/v0.20.0.txt
@@ -371,6 +371,7 @@ Other API Changes
 - ``pandas.api.types.is_datetime64_ns_dtype`` will now report ``True`` on a tz-aware dtype, similar to ``pandas.api.types.is_datetime64_any_dtype``
 - ``DataFrame.asof()`` will return a null filled ``Series`` instead the scalar ``NaN`` if a match is not found (:issue:`15118`)
 - The :func:`pd.read_gbq` method now stores ``INTEGER`` columns as ``dtype=object`` if they contain ``NULL`` values. Otherwise they are stored as ``int64``. This prevents precision lost for integers greather than 2**53. Furthermore ``FLOAT`` columns with values above 10**4 are no more casted to ``int64`` which also caused precision lost (:issue: `14064`, :issue:`14305`).
+- Reorganization of timeseries development tests (:issue:`14854`)
 
 .. _whatsnew_0200.deprecations:
 
diff --git a/pandas/tests/indexes/datetimes/test_ops.py b/pandas/tests/indexes/datetimes/test_ops.py
index 63bf07ec0..7a5ce3a44 100644
--- a/pandas/tests/indexes/datetimes/test_ops.py
+++ b/pandas/tests/indexes/datetimes/test_ops.py
@@ -7,10 +7,12 @@ import pandas.tslib as tslib
 import pandas.util.testing as tm
 from pandas.core.common import PerformanceWarning
 from pandas.tseries.index import cdate_range
+from pandas.tseries.frequencies import get_offset, to_offset
 from pandas import (DatetimeIndex, PeriodIndex, Series, Timestamp, Timedelta,
                     date_range, TimedeltaIndex, _np_version_under1p10, Index,
                     datetime, Float64Index, offsets, bdate_range)
-from pandas.tseries.offsets import BMonthEnd, CDay, BDay
+from pandas.tseries.offsets import (BMonthEnd, CDay, BDay, Milli, MonthBegin,
+                                    Micro)
 from pandas.tests.test_base import Ops
 
 
@@ -911,6 +913,16 @@ Freq: D"""
             self.assertFalse(idx.equals(list(idx3)))
             self.assertFalse(idx.equals(pd.Series(idx3)))
 
+    def test_ms_vs_MS(self):
+        left = get_offset('ms')
+        right = get_offset('MS')
+        self.assertEqual(left, Milli())
+        self.assertEqual(right, MonthBegin())
+
+    def test_rule_aliases(self):
+        rule = to_offset('10us')
+        self.assertEqual(rule, Micro(10))
+
 
 class TestDateTimeIndexToJulianDate(tm.TestCase):
 
diff --git a/pandas/tests/indexes/datetimes/test_setops.py b/pandas/tests/indexes/datetimes/test_setops.py
index 7da660a95..8d05a4016 100644
--- a/pandas/tests/indexes/datetimes/test_setops.py
+++ b/pandas/tests/indexes/datetimes/test_setops.py
@@ -6,7 +6,7 @@ import pandas as pd
 import pandas.util.testing as tm
 from pandas.tseries.index import cdate_range
 from pandas import (DatetimeIndex, date_range, Series, bdate_range, DataFrame,
-                    Int64Index, Index)
+                    Int64Index, Index, to_datetime)
 from pandas.tseries.offsets import Minute, BMonthEnd, MonthEnd
 
 START, END = datetime(2009, 1, 1), datetime(2010, 1, 1)
@@ -190,6 +190,14 @@ class TestDatetimeIndex(tm.TestCase):
         result = dti.join(empty)
         tm.assertIsInstance(result, DatetimeIndex)
 
+    def test_join_nonunique(self):
+        idx1 = to_datetime(['2012-11-06 16:00:11.477563',
+                            '2012-11-06 16:00:11.477563'])
+        idx2 = to_datetime(['2012-11-06 15:11:09.006507',
+                            '2012-11-06 15:11:09.006507'])
+        rs = idx1.join(idx2, how='outer')
+        self.assertTrue(rs.is_monotonic)
+
 
 class TestBusinessDatetimeIndex(tm.TestCase):
 
diff --git a/pandas/tseries/tests/__init__.py b/pandas/tests/tseries/__init__.py
similarity index 100%
rename from pandas/tseries/tests/__init__.py
rename to pandas/tests/tseries/__init__.py
diff --git a/pandas/tseries/tests/data/cday-0.14.1.pickle b/pandas/tests/tseries/data/cday-0.14.1.pickle
similarity index 100%
rename from pandas/tseries/tests/data/cday-0.14.1.pickle
rename to pandas/tests/tseries/data/cday-0.14.1.pickle
diff --git a/pandas/tseries/tests/data/dateoffset_0_15_2.pickle b/pandas/tests/tseries/data/dateoffset_0_15_2.pickle
similarity index 100%
rename from pandas/tseries/tests/data/dateoffset_0_15_2.pickle
rename to pandas/tests/tseries/data/dateoffset_0_15_2.pickle
diff --git a/pandas/tseries/tests/test_bin_groupby.py b/pandas/tests/tseries/test_bin_groupby.py
similarity index 100%
rename from pandas/tseries/tests/test_bin_groupby.py
rename to pandas/tests/tseries/test_bin_groupby.py
diff --git a/pandas/tseries/tests/test_converter.py b/pandas/tests/tseries/test_converter.py
similarity index 100%
rename from pandas/tseries/tests/test_converter.py
rename to pandas/tests/tseries/test_converter.py
diff --git a/pandas/tseries/tests/test_frequencies.py b/pandas/tests/tseries/test_frequencies.py
similarity index 100%
rename from pandas/tseries/tests/test_frequencies.py
rename to pandas/tests/tseries/test_frequencies.py
diff --git a/pandas/tseries/tests/test_holiday.py b/pandas/tests/tseries/test_holiday.py
similarity index 100%
rename from pandas/tseries/tests/test_holiday.py
rename to pandas/tests/tseries/test_holiday.py
diff --git a/pandas/tseries/tests/test_offsets.py b/pandas/tests/tseries/test_offsets.py
similarity index 100%
rename from pandas/tseries/tests/test_offsets.py
rename to pandas/tests/tseries/test_offsets.py
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tests/tseries/test_resample.py
similarity index 100%
rename from pandas/tseries/tests/test_resample.py
rename to pandas/tests/tseries/test_resample.py
diff --git a/pandas/tseries/tests/test_timezones.py b/pandas/tests/tseries/test_timezones.py
similarity index 100%
rename from pandas/tseries/tests/test_timezones.py
rename to pandas/tests/tseries/test_timezones.py
diff --git a/pandas/tseries/tests/data/daterange_073.pickle b/pandas/tseries/tests/data/daterange_073.pickle
deleted file mode 100644
index 0214a023e..000000000
Binary files a/pandas/tseries/tests/data/daterange_073.pickle and /dev/null differ
diff --git a/pandas/tseries/tests/data/frame.pickle b/pandas/tseries/tests/data/frame.pickle
deleted file mode 100644
index b3b100fb4..000000000
Binary files a/pandas/tseries/tests/data/frame.pickle and /dev/null differ
diff --git a/pandas/tseries/tests/data/series.pickle b/pandas/tseries/tests/data/series.pickle
deleted file mode 100644
index 307a4ac26..000000000
Binary files a/pandas/tseries/tests/data/series.pickle and /dev/null differ
diff --git a/pandas/tseries/tests/data/series_daterange0.pickle b/pandas/tseries/tests/data/series_daterange0.pickle
deleted file mode 100644
index 07e214403..000000000
Binary files a/pandas/tseries/tests/data/series_daterange0.pickle and /dev/null differ
diff --git a/pandas/tseries/tests/test_timeseries_legacy.py b/pandas/tseries/tests/test_timeseries_legacy.py
deleted file mode 100644
index 17cc93ac4..000000000
--- a/pandas/tseries/tests/test_timeseries_legacy.py
+++ /dev/null
@@ -1,219 +0,0 @@
-# pylint: disable-msg=E1101,W0612
-from datetime import datetime
-import sys
-import os
-import nose
-import numpy as np
-
-from pandas import (Index, Series, date_range, Timestamp,
-                    DatetimeIndex, Int64Index, to_datetime)
-
-from pandas.tseries.frequencies import get_offset, to_offset
-from pandas.tseries.offsets import BDay, Micro, Milli, MonthBegin
-import pandas as pd
-
-from pandas.util.testing import assert_series_equal, assert_almost_equal
-import pandas.util.testing as tm
-
-from pandas.compat import StringIO, cPickle as pickle
-from pandas import read_pickle
-from numpy.random import rand
-import pandas.compat as compat
-
-randn = np.random.randn
-
-
-# Unfortunately, too much has changed to handle these legacy pickles
-# class TestLegacySupport(unittest.TestCase):
-class LegacySupport(object):
-
-    @classmethod
-    def setUpClass(cls):
-        if compat.PY3:
-            raise nose.SkipTest("not compatible with Python >= 3")
-
-        pth, _ = os.path.split(os.path.abspath(__file__))
-        filepath = os.path.join(pth, 'data', 'frame.pickle')
-
-        with open(filepath, 'rb') as f:
-            cls.frame = pickle.load(f)
-
-        filepath = os.path.join(pth, 'data', 'series.pickle')
-        with open(filepath, 'rb') as f:
-            cls.series = pickle.load(f)
-
-    def test_pass_offset_warn(self):
-        buf = StringIO()
-
-        sys.stderr = buf
-        DatetimeIndex(start='1/1/2000', periods=10, offset='H')
-        sys.stderr = sys.__stderr__
-
-    def test_unpickle_legacy_frame(self):
-        dtindex = DatetimeIndex(start='1/3/2005', end='1/14/2005',
-                                freq=BDay(1))
-
-        unpickled = self.frame
-
-        self.assertEqual(type(unpickled.index), DatetimeIndex)
-        self.assertEqual(len(unpickled), 10)
-        self.assertTrue((unpickled.columns == Int64Index(np.arange(5))).all())
-        self.assertTrue((unpickled.index == dtindex).all())
-        self.assertEqual(unpickled.index.offset, BDay(1, normalize=True))
-
-    def test_unpickle_legacy_series(self):
-        unpickled = self.series
-
-        dtindex = DatetimeIndex(start='1/3/2005', end='1/14/2005',
-                                freq=BDay(1))
-
-        self.assertEqual(type(unpickled.index), DatetimeIndex)
-        self.assertEqual(len(unpickled), 10)
-        self.assertTrue((unpickled.index == dtindex).all())
-        self.assertEqual(unpickled.index.offset, BDay(1, normalize=True))
-
-    def test_unpickle_legacy_len0_daterange(self):
-        pth, _ = os.path.split(os.path.abspath(__file__))
-        filepath = os.path.join(pth, 'data', 'series_daterange0.pickle')
-
-        result = pd.read_pickle(filepath)
-
-        ex_index = DatetimeIndex([], freq='B')
-
-        self.assert_index_equal(result.index, ex_index)
-        tm.assertIsInstance(result.index.freq, BDay)
-        self.assertEqual(len(result), 0)
-
-    def test_arithmetic_interaction(self):
-        index = self.frame.index
-        obj_index = index.asobject
-
-        dseries = Series(rand(len(index)), index=index)
-        oseries = Series(dseries.values, index=obj_index)
-
-        result = dseries + oseries
-        expected = dseries * 2
-        tm.assertIsInstance(result.index, DatetimeIndex)
-        assert_series_equal(result, expected)
-
-        result = dseries + oseries[:5]
-        expected = dseries + dseries[:5]
-        tm.assertIsInstance(result.index, DatetimeIndex)
-        assert_series_equal(result, expected)
-
-    def test_join_interaction(self):
-        index = self.frame.index
-        obj_index = index.asobject
-
-        def _check_join(left, right, how='inner'):
-            ra, rb, rc = left.join(right, how=how, return_indexers=True)
-            ea, eb, ec = left.join(DatetimeIndex(right), how=how,
-                                   return_indexers=True)
-
-            tm.assertIsInstance(ra, DatetimeIndex)
-            self.assert_index_equal(ra, ea)
-
-            assert_almost_equal(rb, eb)
-            assert_almost_equal(rc, ec)
-
-        _check_join(index[:15], obj_index[5:], how='inner')
-        _check_join(index[:15], obj_index[5:], how='outer')
-        _check_join(index[:15], obj_index[5:], how='right')
-        _check_join(index[:15], obj_index[5:], how='left')
-
-    def test_join_nonunique(self):
-        idx1 = to_datetime(['2012-11-06 16:00:11.477563',
-                            '2012-11-06 16:00:11.477563'])
-        idx2 = to_datetime(['2012-11-06 15:11:09.006507',
-                            '2012-11-06 15:11:09.006507'])
-        rs = idx1.join(idx2, how='outer')
-        self.assertTrue(rs.is_monotonic)
-
-    def test_unpickle_daterange(self):
-        pth, _ = os.path.split(os.path.abspath(__file__))
-        filepath = os.path.join(pth, 'data', 'daterange_073.pickle')
-
-        rng = read_pickle(filepath)
-        tm.assertIsInstance(rng[0], datetime)
-        tm.assertIsInstance(rng.offset, BDay)
-        self.assertEqual(rng.values.dtype, object)
-
-    def test_setops(self):
-        index = self.frame.index
-        obj_index = index.asobject
-
-        result = index[:5].union(obj_index[5:])
-        expected = index
-        tm.assertIsInstance(result, DatetimeIndex)
-        self.assert_index_equal(result, expected)
-
-        result = index[:10].intersection(obj_index[5:])
-        expected = index[5:10]
-        tm.assertIsInstance(result, DatetimeIndex)
-        self.assert_index_equal(result, expected)
-
-        result = index[:10] - obj_index[5:]
-        expected = index[:5]
-        tm.assertIsInstance(result, DatetimeIndex)
-        self.assert_index_equal(result, expected)
-
-    def test_index_conversion(self):
-        index = self.frame.index
-        obj_index = index.asobject
-
-        conv = DatetimeIndex(obj_index)
-        self.assert_index_equal(conv, index)
-
-        self.assertRaises(ValueError, DatetimeIndex, ['a', 'b', 'c', 'd'])
-
-    def test_tolist(self):
-        rng = date_range('1/1/2000', periods=10)
-
-        result = rng.tolist()
-        tm.assertIsInstance(result[0], Timestamp)
-
-    def test_object_convert_fail(self):
-        idx = DatetimeIndex([np.NaT])
-        self.assertRaises(ValueError, idx.astype, 'O')
-
-    def test_setops_conversion_fail(self):
-        index = self.frame.index
-
-        right = Index(['a', 'b', 'c', 'd'])
-
-        result = index.union(right)
-        expected = Index(np.concatenate([index.asobject, right]))
-        self.assert_index_equal(result, expected)
-
-        result = index.intersection(right)
-        expected = Index([])
-        self.assert_index_equal(result, expected)
-
-    def test_legacy_time_rules(self):
-        rules = [('WEEKDAY', 'B'), ('EOM', 'BM'), ('W@MON', 'W-MON'),
-                 ('W@TUE', 'W-TUE'), ('W@WED', 'W-WED'), ('W@THU', 'W-THU'),
-                 ('W@FRI', 'W-FRI'), ('Q@JAN', 'BQ-JAN'), ('Q@FEB', 'BQ-FEB'),
-                 ('Q@MAR', 'BQ-MAR'), ('A@JAN', 'BA-JAN'), ('A@FEB', 'BA-FEB'),
-                 ('A@MAR', 'BA-MAR'), ('A@APR', 'BA-APR'), ('A@MAY', 'BA-MAY'),
-                 ('A@JUN', 'BA-JUN'), ('A@JUL', 'BA-JUL'), ('A@AUG', 'BA-AUG'),
-                 ('A@SEP', 'BA-SEP'), ('A@OCT', 'BA-OCT'), ('A@NOV', 'BA-NOV'),
-                 ('A@DEC', 'BA-DEC'), ('WOM@1FRI', 'WOM-1FRI'),
-                 ('WOM@2FRI', 'WOM-2FRI'), ('WOM@3FRI', 'WOM-3FRI'),
-                 ('WOM@4FRI', 'WOM-4FRI')]
-
-        start, end = '1/1/2000', '1/1/2010'
-
-        for old_freq, new_freq in rules:
-            old_rng = date_range(start, end, freq=old_freq)
-            new_rng = date_range(start, end, freq=new_freq)
-            self.assert_index_equal(old_rng, new_rng)
-
-    def test_ms_vs_MS(self):
-        left = get_offset('ms')
-        right = get_offset('MS')
-        self.assertEqual(left, Milli())
-        self.assertEqual(right, MonthBegin())
-
-    def test_rule_aliases(self):
-        rule = to_offset('10us')
-        self.assertEqual(rule, Micro(10))
diff --git a/setup.py b/setup.py
index c3cb56f2d..edec53e9c 100755
--- a/setup.py
+++ b/setup.py
@@ -648,13 +648,13 @@ setup(name=DISTNAME,
                 'pandas.tests.series',
                 'pandas.tests.formats',
                 'pandas.tests.scalar',
+                'pandas.tests.tseries',
                 'pandas.tests.types',
                 'pandas.tests.test_msgpack',
                 'pandas.tests.plotting',
                 'pandas.tools',
                 'pandas.tools.tests',
                 'pandas.tseries',
-                'pandas.tseries.tests',
                 'pandas.types',
                 'pandas.io.tests',
                 'pandas.io.tests.json',
@@ -688,8 +688,7 @@ setup(name=DISTNAME,
                     'pandas.tests': ['data/*.csv'],
                     'pandas.tests.formats': ['data/*.csv'],
                     'pandas.tests.indexes': ['data/*.pickle'],
-                    'pandas.tseries.tests': ['data/*.pickle',
-                                             'data/*.csv']
+                    'pandas.tests.tseries': ['data/*.pickle']
                     },
       ext_modules=extensions,
       maintainer_email=EMAIL,
