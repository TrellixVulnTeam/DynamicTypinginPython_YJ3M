commit 09553ccc4400946e856771adf1140637f9b6f19a
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Dec 15 15:13:20 2011 -0500

    BUG: can print Series/DataFrame with ndarray cell elements, GH #490

diff --git a/pandas/core/series.py b/pandas/core/series.py
index 2bfbba75d..aaf526dae 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -21,7 +21,7 @@ from pandas.core.index import Index, MultiIndex, _ensure_index
 from pandas.core.indexing import _SeriesIndexer, _maybe_droplevels
 from pandas.util import py3compat
 from pandas.util.terminal import get_terminal_size
-import pandas.core.common as common
+import pandas.core.common as com
 import pandas.core.datetools as datetools
 import pandas.core.nanops as nanops
 import pandas._tseries as lib
@@ -430,7 +430,7 @@ copy : boolean, default False
     def __repr__(self):
         """Clean string representation of a Series"""
         width, height = get_terminal_size()
-        max_rows = height if common._max_rows == 0 else common._max_rows
+        max_rows = height if com._max_rows == 0 else com._max_rows
         if len(self.index) > max_rows:
             result = self._tidy_repr(min(30, max_rows - 4))
         elif len(self.index) > 0:
@@ -491,14 +491,16 @@ copy : boolean, default False
         padSpace = min(maxlen, 60)
 
         if float_format is None:
-            float_format = common._float_format
+            float_format = com._float_format
 
         def _format(k, v):
-            if isnull(v):
+            # GH #490
+            if not isinstance(v, np.ndarray) and isnull(v):
                 v = na_rep
-            if isinstance(v, (float, np.floating)):
+            if com.is_float(v):
                 v = float_format(v)
-            return '%s    %s' % (str(k).ljust(padSpace), v)
+            return '%s    %s' % (str(k).ljust(padSpace),
+                                 str(v).replace('\n', ' '))
 
         it = [_format(idx, v) for idx, v in izip(string_index, vals)]
 
@@ -1398,7 +1400,7 @@ copy : boolean, default False
             indexer = lib.merge_indexer_object(self.values.astype(object),
                                                arg.index.indexMap)
 
-            new_values = common.take_1d(np.asarray(arg), indexer)
+            new_values = com.take_1d(np.asarray(arg), indexer)
             return Series(new_values, index=self.index, name=self.name)
         else:
             mapped = lib.map_infer(self.values, arg)
@@ -1452,7 +1454,7 @@ copy : boolean, default False
 
         def _align_series(series, indexer):
             if indexer is not None:
-                new_values = common.take_1d(series.values, indexer)
+                new_values = com.take_1d(series.values, indexer)
             else:
                 if copy:
                     new_values = series.values.copy()
@@ -1499,7 +1501,7 @@ copy : boolean, default False
             return Series(nan, index=index, name=self.name)
 
         new_index, fill_vec = self.index.reindex(index, method=method)
-        new_values = common.take_1d(self.values, fill_vec)
+        new_values = com.take_1d(self.values, fill_vec)
         return Series(new_values, index=new_index, name=self.name)
 
     def reindex_like(self, other, method=None):
diff --git a/pandas/src/sandbox.pyx b/pandas/src/sandbox.pyx
index ab6dc16dd..e0ccc587b 100644
--- a/pandas/src/sandbox.pyx
+++ b/pandas/src/sandbox.pyx
@@ -1,7 +1,10 @@
-from numpy cimport *
+from numpy cimport ndarray, int64_t
+cimport numpy as cnp
 import numpy as np
 
-import_array()
+cimport cpython
+
+cnp.import_array()
 
 cdef class SeriesIterator:
 
@@ -25,3 +28,26 @@ def bench_dict():
 
     for i in range(1000000):
         d[i] = i
+
+from cpython cimport PyObject
+
+cdef extern from "numpy/arrayobject.h":
+    bint PyArray_Check(PyObject*)
+
+cimport cython
+
+@cython.boundscheck(False)
+@cython.wraparound(False)
+def bench_typecheck1(ndarray[object] arr):
+    cdef Py_ssize_t i, n
+    n = cnp.PyArray_SIZE(arr)
+    for i in range(n):
+        cpython.PyFloat_Check(arr[i])
+
+def bench_typecheck2(ndarray[object] arr):
+    cdef Py_ssize_t i, n
+    cdef PyObject** buf = <PyObject**> arr.data
+    n = cnp.PyArray_SIZE(arr)
+    for i in range(n):
+        PyArray_Check(buf[i])
+
diff --git a/pandas/src/tseries.pyx b/pandas/src/tseries.pyx
index 845c30e6c..7b9581945 100644
--- a/pandas/src/tseries.pyx
+++ b/pandas/src/tseries.pyx
@@ -261,11 +261,13 @@ cdef double INF = <double> np.inf
 cdef double NEGINF = -INF
 
 cdef inline _checknull(object val):
-    return val is None or val != val
+    return not np.PyArray_Check(val) and (val is None or val != val)
 
 cpdef checknull(object val):
-    if isinstance(val, (float, np.floating)):
+    if util.is_float_object(val):
         return val != val or val == INF or val == NEGINF
+    elif is_array(val):
+        return False
     else:
         return _checknull(val)
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 7a90b4fe7..a1558d766 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1499,6 +1499,16 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         com.set_printoptions(precision=3, column_space=10)
         repr(self.frame)
 
+    def test_repr_embedded_ndarray(self):
+        arr = np.empty(10, dtype=[('err', object)])
+        for i in range(len(arr)):
+            arr['err'][i] = np.random.randn(i)
+
+        df = DataFrame(arr)
+        repr(df['err'])
+        repr(df)
+        df.to_string()
+
     def test_eng_float_formatter(self):
         self.frame.ix[5] = 0
 
diff --git a/setup.py b/setup.py
index 66b4f51bd..ce9f0fec5 100755
--- a/setup.py
+++ b/setup.py
@@ -290,10 +290,12 @@ def srcpath(name=None, suffix='.pyx', subdir='src'):
 if suffix == '.pyx':
     tseries_depends = [srcpath(f, suffix='.pyx')
                        for f in tseries_depends]
-    tseries_depends.append('util.pxd')
+    tseries_depends.append('pandas/src/util.pxd')
 else:
     tseries_depends = []
 
+print tseries_depends
+
 tseries_ext = Extension('pandas._tseries',
                         depends=tseries_depends + ['pandas/src/numpy_helper.h'],
                         sources=[srcpath('tseries', suffix=suffix)],
