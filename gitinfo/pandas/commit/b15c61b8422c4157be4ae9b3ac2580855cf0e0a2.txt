commit b15c61b8422c4157be4ae9b3ac2580855cf0e0a2
Author: y-p <yoval@gmx.com>
Date:   Wed Dec 12 13:01:57 2012 +0200

    ENH: Support callback functions to be called on config.option set/reset

diff --git a/pandas/core/config.py b/pandas/core/config.py
index 9bd62c38f..5a2e6ef09 100644
--- a/pandas/core/config.py
+++ b/pandas/core/config.py
@@ -25,7 +25,9 @@ This module supports the following requirements:
 - all options in a certain sub - namespace can be reset at once.
 - the user can set / get / reset or ask for the description of an option.
 - a developer can register and mark an option as deprecated.
-
+- you can register a callback to be invoked when the the option value
+  is set or reset. Changing the stored value is considered misuse, but
+  is not verboten.
 
 Implementation
 ==============
@@ -54,7 +56,7 @@ from collections import namedtuple
 import warnings
 
 DeprecatedOption = namedtuple('DeprecatedOption', 'key msg rkey removal_ver')
-RegisteredOption = namedtuple('RegisteredOption', 'key defval doc validator')
+RegisteredOption = namedtuple('RegisteredOption', 'key defval doc validator cb')
 
 _deprecated_options = {}  # holds deprecated option metdata
 _registered_options = {}  # holds registered option metdata
@@ -105,6 +107,9 @@ def _set_option(pat, value):
     root, k = _get_root(key)
     root[k] = value
 
+    if o and o.cb:
+        o.cb(key)
+
 
 def _describe_option(pat='', _print_desc=True):
 
@@ -270,7 +275,7 @@ describe_option = CallableDyanmicDoc(_describe_option, _describe_option_tmpl)
 ######################################################
 # Functions for use by pandas developers, in addition to User - api
 
-def register_option(key, defval, doc='', validator=None):
+def register_option(key, defval, doc='', validator=None, cb=None):
     """Register an option in the package-wide pandas config object
 
     Parameters
@@ -280,6 +285,9 @@ def register_option(key, defval, doc='', validator=None):
     doc       - a string description of the option
     validator - a function of a single argument, should raise `ValueError` if
                 called with a value which is not a legal value for the option.
+    cb        - a function of a single argument "key", which is called
+                immediately after an option value is set/reset. key is
+                the full name of the option.
 
     Returns
     -------
@@ -321,7 +329,7 @@ def register_option(key, defval, doc='', validator=None):
 
     # save the option metadata
     _registered_options[key] = RegisteredOption(key=key, defval=defval,
-            doc=doc, validator=validator)
+            doc=doc, validator=validator,cb=cb)
 
 
 def deprecate_option(key, msg=None, rkey=None, removal_ver=None):
diff --git a/pandas/tests/test_config.py b/pandas/tests/test_config.py
index 814281dfc..828bc85df 100644
--- a/pandas/tests/test_config.py
+++ b/pandas/tests/test_config.py
@@ -282,6 +282,31 @@ class TestConfig(unittest.TestCase):
             self.assertEqual(self.cf.get_option('a'), 1)
             self.assertEqual(self.cf.get_option('b'), 2)
 
+    def test_callback(self):
+        k=[None]
+        v=[None]
+        def callback(key):
+            k.append(key)
+            v.append(self.cf.get_option(key))
+
+        self.cf.register_option('d.a', 'foo',cb=callback)
+        self.cf.register_option('d.b', 'foo',cb=callback)
+
+        del k[-1],v[-1]
+        self.cf.set_option("d.a","fooz")
+        self.assertEqual(k[-1],"d.a")
+        self.assertEqual(v[-1],"fooz")
+
+        del k[-1],v[-1]
+        self.cf.set_option("d.b","boo")
+        self.assertEqual(k[-1],"d.b")
+        self.assertEqual(v[-1],"boo")
+
+        del k[-1],v[-1]
+        self.cf.reset_option("d.b")
+        self.assertEqual(k[-1],"d.b")
+
+
 
 # fmt.reset_printoptions and fmt.set_printoptions were altered
 # to use core.config, test_format exercises those paths.
