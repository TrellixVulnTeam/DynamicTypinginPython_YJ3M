commit fb42766b3eb55155d67548d364672d254be7ffb6
Author: Guillaume Gay <guillaume@damcb.com>
Date:   Sun Aug 30 16:45:59 2015 +0200

    BUG: column_format argument not passing from DataFrame.to_latex to formatter, #9402
    
    removed now irrelevant TODO comment
    
    release notes + some refs

diff --git a/doc/source/whatsnew/v0.17.0.txt b/doc/source/whatsnew/v0.17.0.txt
index 3e81a923a..f6c06e5e0 100644
--- a/doc/source/whatsnew/v0.17.0.txt
+++ b/doc/source/whatsnew/v0.17.0.txt
@@ -727,6 +727,7 @@ Bug Fixes
 
 - Bug in incorrection computation of ``.mean()`` on ``timedelta64[ns]`` because of overflow (:issue:`9442`)
 - Bug in ``DataFrame.to_html(index=False)`` renders unnecessary ``name`` row (:issue:`10344`)
+- Bug in ``DataFrame.to_latex()`` the ``column_format`` argument could not be passed (:issue:`9402`)
 - Bug in ``DataFrame.apply`` when function returns categorical series. (:issue:`9573`)
 - Bug in ``to_datetime`` with invalid dates and formats supplied (:issue:`10154`)
 - Bug in ``Index.drop_duplicates`` dropping name(s) (:issue:`10115`)
diff --git a/pandas/core/format.py b/pandas/core/format.py
index 5c74b5a56..d463c02dd 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -584,7 +584,6 @@ class DataFrameFormatter(TableFormatter):
         """
         self.escape = self.kwds.get('escape', True)
 
-        # TODO: column_format is not settable in df.to_latex
         def get_col_type(dtype):
             if issubclass(dtype.type, np.number):
                 return 'r'
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 607ac43e6..97087255d 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1477,7 +1477,8 @@ class DataFrame(NDFrame):
     def to_latex(self, buf=None, columns=None, col_space=None, colSpace=None,
                  header=True, index=True, na_rep='NaN', formatters=None,
                  float_format=None, sparsify=None, index_names=True,
-                 bold_rows=True, longtable=False, escape=True):
+                 bold_rows=True, column_format=None,
+                 longtable=False, escape=True):
         """
         Render a DataFrame to a tabular environment table. You can splice
         this into a LaTeX document. Requires \\usepackage{booktabs}.
@@ -1486,6 +1487,9 @@ class DataFrame(NDFrame):
 
         bold_rows : boolean, default True
             Make the row labels bold in the output
+        column_format : str, default None
+            The columns format as specified in LaTeX (e.g 'rcl' for a 3 columns
+            table), see https://en.wikibooks.org/wiki/LaTeX/Tables
         longtable : boolean, default False
             Use a longtable environment instead of tabular. Requires adding
             a \\usepackage{longtable} to your LaTeX preamble.
@@ -1509,7 +1513,7 @@ class DataFrame(NDFrame):
                                            sparsify=sparsify,
                                            index_names=index_names,
                                            escape=escape)
-        formatter.to_latex(longtable=longtable)
+        formatter.to_latex(column_format=column_format, longtable=longtable)
 
         if buf is None:
             return formatter.buf.getvalue()
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index 388df526e..de6d17240 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -2380,6 +2380,24 @@ c  10  11  12  13  14\
 """
         self.assertEqual(withoutindex_result, withoutindex_expected)
 
+    def test_to_latex_format(self):
+        # GH Bug #9402
+        self.frame.to_latex(column_format='ccc')
+
+        df = DataFrame({'a': [1, 2],
+                        'b': ['b1', 'b2']})
+        withindex_result = df.to_latex(column_format='ccc')
+        withindex_expected = r"""\begin{tabular}{ccc}
+\toprule
+{} &  a &   b \\
+\midrule
+0 &  1 &  b1 \\
+1 &  2 &  b2 \\
+\bottomrule
+\end{tabular}
+"""
+        self.assertEqual(withindex_result, withindex_expected)
+
     def test_to_latex_multiindex(self):
         df = DataFrame({('x', 'y'): ['a']})
         result = df.to_latex()
