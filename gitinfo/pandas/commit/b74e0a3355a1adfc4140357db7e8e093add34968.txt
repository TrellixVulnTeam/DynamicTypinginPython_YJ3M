commit b74e0a3355a1adfc4140357db7e8e093add34968
Author: Jan Schulz <jasc@gmx.net>
Date:   Mon Sep 1 15:45:31 2014 +0200

    API: Implement Series.cat.codes and rename the proxy class
    
    * Series should also expose Series.cat.codes as a Series of codes.
      See discussion in
      https://github.com/pydata/pandas/issues/8074#issuecomment-53992337
    
    * Rename CategoricalProperties CategoricalAccessor. It has more
      than properties, so "accessor" is more appropiate.

diff --git a/pandas/core/categorical.py b/pandas/core/categorical.py
index f6431f294..565d886a2 100644
--- a/pandas/core/categorical.py
+++ b/pandas/core/categorical.py
@@ -1121,7 +1121,7 @@ class Categorical(PandasObject):
 
 ##### The Series.cat accessor #####
 
-class CategoricalProperties(PandasDelegate):
+class CategoricalAccessor(PandasDelegate):
     """
     Accessor object for categorical properties of the Series values.
 
@@ -1144,6 +1144,11 @@ class CategoricalProperties(PandasDelegate):
     def _delegate_property_set(self, name, new_values):
         return setattr(self.categorical, name, new_values)
 
+    @property
+    def codes(self):
+        from pandas import Series
+        return Series(self.categorical.codes, index=self.index)
+
     def _delegate_method(self, name, *args, **kwargs):
         from pandas import Series
         method = getattr(self.categorical, name)
@@ -1151,10 +1156,10 @@ class CategoricalProperties(PandasDelegate):
         if not res is None:
             return Series(res, index=self.index)
 
-CategoricalProperties._add_delegate_accessors(delegate=Categorical,
+CategoricalAccessor._add_delegate_accessors(delegate=Categorical,
                                               accessors=["levels", "ordered"],
                                               typ='property')
-CategoricalProperties._add_delegate_accessors(delegate=Categorical,
+CategoricalAccessor._add_delegate_accessors(delegate=Categorical,
                                               accessors=["reorder_levels", "remove_unused_levels"],
                                               typ='method')
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 078bf0def..9a55ed789 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -2442,10 +2442,10 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
 
     @cache_readonly
     def cat(self):
-        from pandas.core.categorical import CategoricalProperties
+        from pandas.core.categorical import CategoricalAccessor
         if not com.is_categorical_dtype(self.dtype):
             raise TypeError("Can only use .cat accessor with a 'category' dtype")
-        return CategoricalProperties(self.values, self.index)
+        return CategoricalAccessor(self.values, self.index)
 
 Series._setup_axes(['index'], info_axis=0, stat_axis=0,
                    aliases={'rows': 0})
diff --git a/pandas/tests/test_categorical.py b/pandas/tests/test_categorical.py
index fab8bba16..eb1acdeb7 100644
--- a/pandas/tests/test_categorical.py
+++ b/pandas/tests/test_categorical.py
@@ -1051,14 +1051,18 @@ class TestCategoricalAsBlock(tm.TestCase):
         self.assertRaises(TypeError, lambda : Series(np.arange(5.)).cat)
         self.assertRaises(TypeError, lambda : Series([Timestamp('20130101')]).cat)
 
-        # Series should delegate calls to '.level', '.ordered' and '.reorder()' to the categorical
+        # Series should delegate calls to '.level', '.codes', '.ordered' and the
+        # methods '.reorder_levels()' 'drop_unused_levels()' to the categorical
         s = Series(Categorical(["a","b","c","a"], ordered=True))
         exp_levels = np.array(["a","b","c"])
         self.assert_numpy_array_equal(s.cat.levels, exp_levels)
-
         s.cat.levels = [1,2,3]
         exp_levels = np.array([1,2,3])
         self.assert_numpy_array_equal(s.cat.levels, exp_levels)
+
+        exp_codes = Series(com._ensure_platform_int([0,1,2,0]))
+        tm.assert_series_equal(s.cat.codes, exp_codes)
+
         self.assertEqual(s.cat.ordered, True)
         s.cat.ordered = False
         self.assertEqual(s.cat.ordered, False)
@@ -2087,7 +2091,7 @@ class TestCategoricalAsBlock(tm.TestCase):
 
     def test_cat_tab_completition(self):
          # test the tab completion display
-        ok_for_cat = ['levels','ordered','reorder_levels','remove_unused_levels']
+        ok_for_cat = ['levels','codes','ordered','reorder_levels','remove_unused_levels']
         def get_dir(s):
             results = [ r for r in s.cat.__dir__() if not r.startswith('_') ]
             return list(sorted(set(results)))
