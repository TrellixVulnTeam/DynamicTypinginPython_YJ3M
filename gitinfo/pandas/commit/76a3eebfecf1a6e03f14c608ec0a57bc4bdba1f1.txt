commit 76a3eebfecf1a6e03f14c608ec0a57bc4bdba1f1
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Sep 28 16:50:23 2011 -0400

    ENH: join refactoring to enable subclasses (e.g. Int64) to implement faster join operations

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index e5e3ee2e9..6495be762 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2149,31 +2149,15 @@ class DataFrame(NDFrame):
         return self._constructor(new_data)
 
     def _join_index(self, other, how, lsuffix, rsuffix):
-        from pandas.core.internals import merge_managers
-
-        join_index = self._get_join_index(other, how)
+        from pandas.core.internals import join_managers
 
         thisdata, otherdata = self._data._maybe_rename_join(
             other._data, lsuffix, rsuffix, copydata=False)
 
         # this will always ensure copied data
-        merged_data = merge_managers(thisdata, otherdata, join_index, axis=1)
+        merged_data = join_managers(thisdata, otherdata, axis=1, how=how)
         return self._constructor(merged_data)
 
-    def _get_join_index(self, other, how):
-        if how == 'left':
-            join_index = self.index
-        elif how == 'right':
-            join_index = other.index
-        elif how == 'inner':
-            join_index = self.index.intersection(other.index)
-        elif how == 'outer':
-            join_index = self.index.union(other.index)
-        else:
-            raise Exception('do not recognize join method %s' % how)
-
-        return join_index
-
     #----------------------------------------------------------------------
     # Statistical methods, etc.
 
diff --git a/pandas/core/index.py b/pandas/core/index.py
index c3de4a4a5..586ce02a6 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -408,6 +408,31 @@ class Index(np.ndarray):
         indexer = self.get_indexer(target, method=method)
         return target, indexer
 
+    def join(self, other, how='left', return_indexers=False):
+        if how == 'left':
+            join_index = self
+        elif how == 'right':
+            join_index = other
+        elif how == 'inner':
+            join_index = self.intersection(other)
+        elif how == 'outer':
+            join_index = self.union(other)
+        else:
+            raise Exception('do not recognize join method %s' % how)
+
+        if return_indexers:
+            if join_index is self:
+                lindexer = np.arange(len(join_index), dtype=np.int32)
+            else:
+                lindexer = self.get_indexer(join_index)
+            if join_index is other:
+                rindexer = np.arange(len(join_index), dtype=np.int32)
+            else:
+                rindexer = other.get_indexer(join_index)
+            return join_index, lindexer, rindexer
+        else:
+            return join_index
+
     def slice_locs(self, start=None, end=None):
         """
         For an ordered Index, compute the slice locations for input labels
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index a1eff3066..f7a3fb09c 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -880,7 +880,7 @@ def _union_items_slow(all_items):
     return seen
 
 
-def merge_managers(left, right, index, axis=1):
+def join_managers(left, right, axis=1, how='left'):
     """
     Parameters
     ----------
@@ -897,23 +897,25 @@ def merge_managers(left, right, index, axis=1):
     assert(left.is_consolidated())
     assert(right.is_consolidated())
 
-    N = len(index)
+    laxis = left.axes[axis]
+    raxis = right.axes[axis]
 
-    if left.axes[axis].equals(index):
-        lindexer = np.arange(N, dtype=np.int32)
+    join_index, lindexer, rindexer = laxis.join(raxis, how=how,
+                                                return_indexers=True)
+
+    N = len(join_index)
+
+    if join_index is laxis:
         lmask = np.zeros(N, dtype=np.bool)
         lneed_masking = False
     else:
-        lindexer = left.axes[axis].get_indexer(index)
         lmask = lindexer == -1
         lneed_masking = lmask.any()
 
-    if right.axes[axis].equals(index):
-        rindexer = np.arange(N, dtype=np.int32)
+    if join_index is raxis:
         rmask = np.zeros(N, dtype=np.bool)
         rneed_masking = False
     else:
-        rindexer = right.axes[axis].get_indexer(index)
         rmask = rindexer == -1
         rneed_masking = rmask.any()
 
@@ -928,7 +930,7 @@ def merge_managers(left, right, index, axis=1):
 
     result_axes = list(left.axes)
     result_axes[0] = result_items
-    result_axes[axis] = index
+    result_axes[axis] = join_index
 
     result_blocks = []
 
diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index 02ef007dd..24dc5ab85 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -1070,7 +1070,7 @@ class SparseDataFrame(DataFrame):
         raise NotImplementedError
 
     def _join_index(self, other, how, lsuffix, rsuffix):
-        join_index = self._get_join_index(other, how)
+        join_index = self.index.join(other.index, how=how)
 
         this = self.reindex(join_index)
         other = other.reindex(join_index)
