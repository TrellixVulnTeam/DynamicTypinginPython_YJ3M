commit c1e99d99979c41f0caa8719750b3f8864ef22bb5
Author: Dieter Vandenbussche <dvandenbussche@axioma.com>
Date:   Fri Feb 3 16:35:41 2012 -0500

    Add support for reading/writing .xlsx using openpyxl

diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index d8953e958..96099bac0 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -569,9 +569,15 @@ class ExcelFile(object):
         Path to xls file
     """
     def __init__(self, path):
-        import xlrd
+        self.use_xlsx = True
+        if path.endswith('.xls'):
+            self.use_xlsx = False
+            import xlrd
+            self.book = xlrd.open_workbook(path)
+        else:
+            from openpyxl import load_workbook
+            self.book = load_workbook(path, use_iterators=True)
         self.path = path
-        self.book = xlrd.open_workbook(path)
 
     def __repr__(self):
         return object.__repr__(self)
@@ -600,6 +606,34 @@ class ExcelFile(object):
         -------
         parsed : DataFrame
         """
+        if self.use_xlsx:
+            return self._parse_xlsx(sheetname, header=header, skiprows=skiprows, index_col=index_col,
+              parse_dates=parse_dates, date_parser=date_parser, na_values=na_values,
+              chunksize=chunksize)
+        else:
+            return self._parse_xls(sheetname, header=header, skiprows=skiprows, index_col=index_col,
+              parse_dates=parse_dates, date_parser=date_parser, na_values=na_values,
+              chunksize=chunksize)
+
+    def _parse_xlsx(self, sheetname, header=0, skiprows=None, index_col=None,
+              parse_dates=False, date_parser=None, na_values=None,
+              chunksize=None):
+        sheet = self.book.get_sheet_by_name(name=sheetname)
+        data = []
+        for row in sheet.iter_rows(): # it brings a new method: iter_rows()
+            data.append([cell.internal_value for cell in row])
+        parser = TextParser(data, header=header, index_col=index_col,
+                            na_values=na_values,
+                            parse_dates=parse_dates,
+                            date_parser=date_parser,
+                            skiprows=skiprows,
+                            chunksize=chunksize)
+
+        return parser.get_chunk()
+        
+    def _parse_xls(self, sheetname, header=0, skiprows=None, index_col=None,
+              parse_dates=False, date_parser=None, na_values=None,
+              chunksize=None):
         from datetime import MINYEAR, time, datetime
         from xlrd import xldate_as_tuple, XL_CELL_DATE
 
@@ -640,13 +674,19 @@ class ExcelWriter(object):
         Path to xls file
     """
     def __init__(self, path):
-        import xlwt
+        self.use_xlsx = True
+        if path.endswith('.xls'):
+            self.use_xlsx = False
+            import xlwt
+            self.book = xlwt.Workbook()
+            self.fm_datetime = xlwt.easyxf(num_format_str='YYYY-MM-DD HH:MM:SS')
+            self.fm_date = xlwt.easyxf(num_format_str='YYYY-MM-DD')
+        else:
+            from openpyxl import Workbook
+            self.book = Workbook(optimized_write = True)
         self.path = path
-        self.book = xlwt.Workbook()
         self.sheets = {}
         self.cur_sheet = None
-        self.fm_datetime = xlwt.easyxf(num_format_str='YYYY-MM-DD HH:MM:SS')
-        self.fm_date = xlwt.easyxf(num_format_str='YYYY-MM-DD')
 
     def save(self):
         """
@@ -654,7 +694,6 @@ class ExcelWriter(object):
         """
         self.book.save(self.path)
 
-
     def writerow(self, row, sheet_name=None):
         """
         Write the given row into Excel an excel sheet
@@ -670,6 +709,12 @@ class ExcelWriter(object):
             sheet_name = self.cur_sheet
         if sheet_name is None:
             raise Exception('Must pass explicit sheet_name or set cur_sheet property')
+        if self.use_xlsx:
+            self._writerow_xlsx(row, sheet_name)
+        else:
+            self._writerow_xls(row, sheet_name)
+
+    def _writerow_xls(self, row, sheet_name):
         if sheet_name in self.sheets:
             sheet, row_idx = self.sheets[sheet_name]
         else:
@@ -691,3 +736,14 @@ class ExcelWriter(object):
             sheet.flush_row_data()
         self.sheets[sheet_name] = (sheet, row_idx)
 
+    def _writerow_xlsx(self, row, sheet_name):
+        if sheet_name in self.sheets:
+            sheet, row_idx = self.sheets[sheet_name]
+        else:
+            sheet = self.book.create_sheet()
+            sheet.title = sheet_name
+            row_idx = 0
+
+        sheet.append([int(val) if isinstance(val, np.int64) else val for val in row])
+        row_idx += 1
+        self.sheets[sheet_name] = (sheet, row_idx)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index b91fbe849..040102461 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2308,6 +2308,47 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         os.remove(path)
 
+    def test_to_excel2007_from_excel2007(self):
+        path = '__tmp__.xlsx'
+
+        self.frame['A'][:5] = nan
+
+        self.frame.to_excel(path,'test1')
+        self.frame.to_excel(path,'test1', cols=['A', 'B'])
+        self.frame.to_excel(path,'test1', header=False)
+        self.frame.to_excel(path,'test1', index=False)
+
+        # test roundtrip
+        self.frame.to_excel(path,'test1')
+        reader = ExcelFile(path)
+        recons = reader.parse('test1',index_col=0)
+        assert_frame_equal(self.frame, recons)
+
+        self.tsframe.to_excel(path,'test1')
+        reader = ExcelFile(path)
+        recons = reader.parse('test1',index_col=0)
+        assert_frame_equal(self.tsframe, recons)
+
+        #Test np.int64
+        frame = DataFrame(np.random.randn(10,2))
+        frame.to_excel(path,'test1')
+        reader = ExcelFile(path)
+        recons = reader.parse('test1',index_col=0)
+        assert_frame_equal(frame, recons)
+
+        # Test writing to separate sheets
+        writer = ExcelWriter(path)
+        self.frame.to_excel(writer,'test1')
+        self.tsframe.to_excel(writer,'test2')
+        writer.save()
+        reader = ExcelFile(path)
+        recons = reader.parse('test1',index_col=0)
+        assert_frame_equal(self.frame, recons)
+        recons = reader.parse('test2',index_col=0)
+        assert_frame_equal(self.tsframe, recons)
+
+        os.remove(path)
+
     def test_info(self):
         io = StringIO()
         self.frame.info(buf=io)
