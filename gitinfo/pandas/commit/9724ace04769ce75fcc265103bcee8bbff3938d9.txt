commit 9724ace04769ce75fcc265103bcee8bbff3938d9
Author: Christopher Whelan <topherwhelan@gmail.com>
Date:   Wed Aug 7 06:27:03 2019 -0700

    [BLD] Add script that fails build if git tags do not exist (#27770)

diff --git a/.travis.yml b/.travis.yml
index 9be4291d1..79fecc41b 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -21,7 +21,7 @@ env:
 
 git:
     # for cloning
-    depth: 2000
+    depth: false
 
 matrix:
     fast_finish: true
@@ -63,7 +63,7 @@ before_install:
   - pwd
   - uname -a
   - git --version
-  - git tag
+  - ./ci/check_git_tags.sh
   # Because travis runs on Google Cloud and has a /etc/boto.cfg,
   # it breaks moto import, see:
   # https://github.com/spulec/moto/issues/1771
diff --git a/ci/check_git_tags.sh b/ci/check_git_tags.sh
new file mode 100755
index 000000000..9dbcd4f98
--- /dev/null
+++ b/ci/check_git_tags.sh
@@ -0,0 +1,28 @@
+set -e
+
+if [[ ! $(git tag) ]]; then
+    echo "No git tags in clone, please sync your git tags with upstream using:"
+    echo "    git fetch --tags upstream"
+    echo "    git push --tags origin"
+    echo ""
+    echo "If the issue persists, the clone depth needs to be increased in .travis.yml"
+    exit 1
+fi
+
+# This will error if there are no tags and we omit --always
+DESCRIPTION=$(git describe --long --tags)
+echo "$DESCRIPTION"
+
+if [[ "$DESCRIPTION" == *"untagged"* ]]; then
+    echo "Unable to determine most recent tag, aborting build"
+    exit 1
+else
+    if [[ "$DESCRIPTION" != *"g"* ]]; then
+	# A good description will have the hash prefixed by g, a bad one will be
+	# just the hash
+	echo "Unable to determine most recent tag, aborting build"
+	exit 1
+    else
+	echo "$(git tag)"
+    fi
+fi
diff --git a/pandas/tests/test_common.py b/pandas/tests/test_common.py
index 479e55c86..65b2dab1b 100644
--- a/pandas/tests/test_common.py
+++ b/pandas/tests/test_common.py
@@ -1,4 +1,5 @@
 import collections
+from distutils.version import LooseVersion
 from functools import partial
 import string
 
@@ -117,3 +118,13 @@ def test_git_version():
     git_version = pd.__git_version__
     assert len(git_version) == 40
     assert all(c in string.hexdigits for c in git_version)
+
+
+def test_version_tag():
+    version = pd.__version__
+    try:
+        version > LooseVersion("0.0.1")
+    except TypeError:
+        raise ValueError(
+            "No git tags exist, please sync tags between upstream and your repo"
+        )
