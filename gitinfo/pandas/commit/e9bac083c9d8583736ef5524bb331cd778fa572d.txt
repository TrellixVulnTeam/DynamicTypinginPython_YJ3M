commit e9bac083c9d8583736ef5524bb331cd778fa572d
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Dec 31 16:40:08 2011 -0500

    TST: test coverage and perf enhancements for merge, always compress group labels

diff --git a/pandas/core/series.py b/pandas/core/series.py
index 40c458513..709d525d8 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1543,22 +1543,19 @@ copy : boolean, default False
         -------
         reindexed : Series
         """
+        index = _ensure_index(index)
         if self.index.equals(index):
             if copy:
                 return self.copy()
             else:
                 return self
 
-        index = _ensure_index(index)
         if len(self.index) == 0:
             return Series(nan, index=index, name=self.name)
 
         new_index, fill_vec = self.index.reindex(index, method=method,
                                                  level=level)
-        if fill_vec is None:
-            new_values = self.values.copy() if copy else self.values
-        else:
-            new_values = com.take_1d(self.values, fill_vec)
+        new_values = com.take_1d(self.values, fill_vec)
         return Series(new_values, index=new_index, name=self.name)
 
     def reindex_like(self, other, method=None):
diff --git a/pandas/tools/merge.py b/pandas/tools/merge.py
index 52ce29b4d..2fa0b7826 100644
--- a/pandas/tools/merge.py
+++ b/pandas/tools/merge.py
@@ -228,8 +228,14 @@ def _get_keys(frame, on, drop=False):
             keys.append(frame[k].values)
             names.append(k)
 
+
     if drop:
-        frame = frame.drop(to_drop, axis=1)
+        frame = frame.copy()
+        for k in to_drop:
+            del frame[k]
+
+        # this is a bit too expensive...
+        # frame = frame.drop(to_drop, axis=1)
 
     return frame, keys, names
 
@@ -258,14 +264,17 @@ def _get_group_keys(left_keys, right_keys, sort=True):
 
     left_group_key = get_group_index(left_labels, group_sizes)
     right_group_key = get_group_index(right_labels, group_sizes)
-    max_groups = np.prod(group_sizes)
 
-    if max_groups > 1000000:
-        # compress
-        left_group_key, right_group_key, max_groups = \
-            _factorize_int64(left_group_key, right_group_key,
-                             sort=sort)
+    max_groups = 1L
+    for x in group_sizes:
+        max_groups *= long(x)
+
+    if max_groups > 2**63:  # pragma: no cover
+        raise Exception('Combinatorial explosion! (boom)')
 
+    left_group_key, right_group_key, max_groups = \
+        _factorize_int64(left_group_key, right_group_key,
+                         sort=sort)
     return left_group_key, right_group_key, max_groups
 
 
diff --git a/pandas/tools/tests/test_merge.py b/pandas/tools/tests/test_merge.py
index 8f06954f7..0b16247c2 100644
--- a/pandas/tools/tests/test_merge.py
+++ b/pandas/tools/tests/test_merge.py
@@ -8,7 +8,7 @@ import random
 from pandas import *
 from pandas.tools.merge import merge
 from pandas.util.testing import (assert_frame_equal, assert_series_equal,
-                                 assert_almost_equal)
+                                 assert_almost_equal, rands)
 import pandas._tseries as lib
 import pandas.util.testing as tm
 
@@ -387,10 +387,13 @@ class TestMerge(unittest.TestCase):
         assert_frame_equal(result, expected.ix[:, result.columns])
 
     def test_merge_misspecified(self):
-        self.assertRaises(Exception, merge, self.left,
-                          self.right, left_index=True)
-        self.assertRaises(Exception, merge, self.left,
-                          self.right, right_index=True)
+        self.assertRaises(Exception, merge, self.left, self.right,
+                          left_index=True)
+        self.assertRaises(Exception, merge, self.left, self.right,
+                          right_index=True)
+
+        self.assertRaises(Exception, merge, self.left, self.left,
+                          left_on='key', on='key')
 
     def test_merge_overlap(self):
         merged = merge(self.left, self.left, on='key')
@@ -458,6 +461,22 @@ class TestMergeMulti(unittest.TestCase):
         merged2 = merged2.ix[:, merged1.columns]
         assert_frame_equal(merged1, merged2)
 
+    def test_compress_group_combinations(self):
+
+        # ~ 40000000 possible unique groups
+        key1 = np.array([rands(10) for _ in xrange(10000)], dtype='O')
+        key1 = np.tile(key1, 2)
+        key2 = key1[::-1]
+
+        df = DataFrame({'key1' : key1, 'key2' : key2,
+                        'value1' : np.random.randn(20000)})
+
+        df2 = DataFrame({'key1' : key1[::2], 'key2' : key2[::2],
+                         'value2' : np.random.randn(10000)})
+
+        # just to hit the label compression code path
+        merged = merge(df, df2, how='outer')
+
 def _check_join(left, right, result, join_col, how='left',
                 lsuffix='.x', rsuffix='.y'):
 
