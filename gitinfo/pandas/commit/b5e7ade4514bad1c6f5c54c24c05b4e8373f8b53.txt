commit b5e7ade4514bad1c6f5c54c24c05b4e8373f8b53
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Nov 9 21:01:35 2011 -0500

    BUG: Series.__radd__ needs to be order-specific with string series, GH #353

diff --git a/RELEASE.rst b/RELEASE.rst
index 431f95998..da7f5c8e2 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -90,6 +90,7 @@ pandas 0.5.1
     not in ascending order (GH #349)
   - Fix failure passing Int64Index to Index.union when both are monotonic
   - Fix error when passing SparseSeries to (dense) DataFrame constructor
+  - Added missing bang at top of setup.py (GH #352)
 
 Thanks
 ------
diff --git a/pandas/core/series.py b/pandas/core/series.py
index cba24a13a..e97789d52 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -470,7 +470,7 @@ copy : boolean, default False
     __floordiv__ = _arith_method(operator.floordiv, '__floordiv__')
     __pow__ = _arith_method(operator.pow, '__pow__')
 
-    __radd__ = _arith_method(operator.add, '__add__')
+    __radd__ = _arith_method(lambda x, y: y + x, '__add__')
     __rmul__ = _arith_method(operator.mul, '__mul__')
     __rsub__ = _arith_method(lambda x, y: y - x, '__sub__')
     __rtruediv__ = _arith_method(lambda x, y: y / x, '__truediv__')
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 5a0bfd6ec..9beb9c214 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -706,6 +706,8 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         self.assert_(np.array_equal(added[:-5], expected))
 
     def test_operators_reverse_object(self):
+        from pandas.util.testing import rands
+
         # GH 56
         arr = Series(np.random.randn(10), index=np.arange(10),
                      dtype=object)
@@ -721,6 +723,12 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         _check_op(arr, operator.truediv)
         _check_op(arr, operator.floordiv)
 
+        # GH 353
+        vals = Series([rands(5) for _ in xrange(10)])
+        result = 'foo_' + vals
+        expected = vals.map(lambda x: 'foo_' + x)
+        assert_series_equal(result, expected)
+
     def test_operators_frame(self):
         # rpow does not work with DataFrame
         df = DataFrame({'A' : self.ts})
