commit 085af07ea0c5c7b1135043cf49c1c8f295bccec5
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Thu May 14 09:32:02 2020 -0700

    DEPR: DateOffset.__call__ (#34171)

diff --git a/doc/source/whatsnew/v1.1.0.rst b/doc/source/whatsnew/v1.1.0.rst
index 1437006ee..57dad5a08 100644
--- a/doc/source/whatsnew/v1.1.0.rst
+++ b/doc/source/whatsnew/v1.1.0.rst
@@ -585,6 +585,7 @@ Deprecations
 
 - :func:`pandas.api.types.is_categorical` is deprecated and will be removed in a future version; use `:func:pandas.api.types.is_categorical_dtype` instead (:issue:`33385`)
 - :meth:`Index.get_value` is deprecated and will be removed in a future version (:issue:`19728`)
+- :meth:`DateOffset.__call__` is deprecated and will be removed in a future version, use ``offset + other`` instead (:issue:`34171`)
 
 .. ---------------------------------------------------------------------------
 
diff --git a/pandas/_libs/tslibs/offsets.pyx b/pandas/_libs/tslibs/offsets.pyx
index 5efb9b353..3a9639a70 100644
--- a/pandas/_libs/tslibs/offsets.pyx
+++ b/pandas/_libs/tslibs/offsets.pyx
@@ -486,6 +486,12 @@ class _BaseOffset:
             return NotImplemented
 
     def __call__(self, other):
+        warnings.warn(
+            "DateOffset.__call__ is deprecated and will be removed in a future "
+            "version.  Use `offset + other` instead.",
+            FutureWarning,
+            stacklevel=1,
+        )
         return self.apply(other)
 
     def __mul__(self, other):
diff --git a/pandas/tests/tseries/offsets/test_offsets.py b/pandas/tests/tseries/offsets/test_offsets.py
index 0a7eaa7b7..f0dcef4db 100644
--- a/pandas/tests/tseries/offsets/test_offsets.py
+++ b/pandas/tests/tseries/offsets/test_offsets.py
@@ -756,7 +756,9 @@ class TestBusinessDay(Base):
         assert hash(self.offset2) == hash(self.offset2)
 
     def test_call(self):
-        assert self.offset2(self.d) == datetime(2008, 1, 3)
+        with tm.assert_produces_warning(FutureWarning):
+            # GH#34171 DateOffset.__call__ is deprecated
+            assert self.offset2(self.d) == datetime(2008, 1, 3)
 
     def testRollback1(self):
         assert BDay(10).rollback(self.d) == self.d
@@ -1040,13 +1042,15 @@ class TestBusinessHour(Base):
         assert offset == offset
 
     def test_call(self):
-        assert self.offset1(self.d) == datetime(2014, 7, 1, 11)
-        assert self.offset2(self.d) == datetime(2014, 7, 1, 13)
-        assert self.offset3(self.d) == datetime(2014, 6, 30, 17)
-        assert self.offset4(self.d) == datetime(2014, 6, 30, 14)
-        assert self.offset8(self.d) == datetime(2014, 7, 1, 11)
-        assert self.offset9(self.d) == datetime(2014, 7, 1, 22)
-        assert self.offset10(self.d) == datetime(2014, 7, 1, 1)
+        with tm.assert_produces_warning(FutureWarning):
+            # GH#34171 DateOffset.__call__ is deprecated
+            assert self.offset1(self.d) == datetime(2014, 7, 1, 11)
+            assert self.offset2(self.d) == datetime(2014, 7, 1, 13)
+            assert self.offset3(self.d) == datetime(2014, 6, 30, 17)
+            assert self.offset4(self.d) == datetime(2014, 6, 30, 14)
+            assert self.offset8(self.d) == datetime(2014, 7, 1, 11)
+            assert self.offset9(self.d) == datetime(2014, 7, 1, 22)
+            assert self.offset10(self.d) == datetime(2014, 7, 1, 1)
 
     def test_sub(self):
         # we have to override test_sub here because self.offset2 is not
@@ -2377,8 +2381,10 @@ class TestCustomBusinessHour(Base):
         assert hash(self.offset2) == hash(self.offset2)
 
     def test_call(self):
-        assert self.offset1(self.d) == datetime(2014, 7, 1, 11)
-        assert self.offset2(self.d) == datetime(2014, 7, 1, 11)
+        with tm.assert_produces_warning(FutureWarning):
+            # GH#34171 DateOffset.__call__ is deprecated
+            assert self.offset1(self.d) == datetime(2014, 7, 1, 11)
+            assert self.offset2(self.d) == datetime(2014, 7, 1, 11)
 
     def testRollback1(self):
         assert self.offset1.rollback(self.d) == self.d
@@ -2642,8 +2648,10 @@ class TestCustomBusinessDay(Base):
         assert hash(self.offset2) == hash(self.offset2)
 
     def test_call(self):
-        assert self.offset2(self.d) == datetime(2008, 1, 3)
-        assert self.offset2(self.nd) == datetime(2008, 1, 3)
+        with tm.assert_produces_warning(FutureWarning):
+            # GH#34171 DateOffset.__call__ is deprecated
+            assert self.offset2(self.d) == datetime(2008, 1, 3)
+            assert self.offset2(self.nd) == datetime(2008, 1, 3)
 
     def testRollback1(self):
         assert CDay(10).rollback(self.d) == self.d
@@ -2892,8 +2900,10 @@ class TestCustomBusinessMonthEnd(CustomBusinessMonthBase, Base):
         assert repr(self.offset) == "<CustomBusinessMonthEnd>"
         assert repr(self.offset2) == "<2 * CustomBusinessMonthEnds>"
 
-    def testCall(self):
-        assert self.offset2(self.d) == datetime(2008, 2, 29)
+    def test_call(self):
+        with tm.assert_produces_warning(FutureWarning):
+            # GH#34171 DateOffset.__call__ is deprecated
+            assert self.offset2(self.d) == datetime(2008, 2, 29)
 
     def testRollback1(self):
         assert CDay(10).rollback(datetime(2007, 12, 31)) == datetime(2007, 12, 31)
@@ -3041,8 +3051,10 @@ class TestCustomBusinessMonthBegin(CustomBusinessMonthBase, Base):
         assert repr(self.offset) == "<CustomBusinessMonthBegin>"
         assert repr(self.offset2) == "<2 * CustomBusinessMonthBegins>"
 
-    def testCall(self):
-        assert self.offset2(self.d) == datetime(2008, 3, 3)
+    def test_call(self):
+        with tm.assert_produces_warning(FutureWarning):
+            # GH#34171 DateOffset.__call__ is deprecated
+            assert self.offset2(self.d) == datetime(2008, 3, 3)
 
     def testRollback1(self):
         assert CDay(10).rollback(datetime(2007, 12, 31)) == datetime(2007, 12, 31)
