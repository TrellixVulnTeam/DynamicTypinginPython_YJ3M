commit be90d492836fa604b4b914ab6c7387752a6ba9e6
Author: Jeremy Schendel <jschendel@users.noreply.github.com>
Date:   Tue May 22 22:22:14 2018 -0600

    BUG: Fix invalid truncation in interval_range (#21162)

diff --git a/doc/source/whatsnew/v0.23.1.txt b/doc/source/whatsnew/v0.23.1.txt
index 44f7280d5..a071d7f3f 100644
--- a/doc/source/whatsnew/v0.23.1.txt
+++ b/doc/source/whatsnew/v0.23.1.txt
@@ -77,6 +77,7 @@ Indexing
 ^^^^^^^^
 
 - Bug in :meth:`Series.reset_index` where appropriate error was not raised with an invalid level name (:issue:`20925`)
+- Bug in :func:`interval_range` when ``start``/``periods`` or ``end``/``periods`` are specified with float ``start`` or ``end`` (:issue:`21161`)
 -
 
 I/O
diff --git a/pandas/core/indexes/interval.py b/pandas/core/indexes/interval.py
index 408a8cc43..8f8d87605 100644
--- a/pandas/core/indexes/interval.py
+++ b/pandas/core/indexes/interval.py
@@ -1572,6 +1572,10 @@ def interval_range(start=None, end=None, periods=None, freq=None,
         periods += 1
 
     if is_number(endpoint):
+        # force consistency between start/end/freq (lower end if freq skips it)
+        if com._all_not_none(start, end, freq):
+            end -= (end - start) % freq
+
         # compute the period/start/end if unspecified (at most one)
         if periods is None:
             periods = int((end - start) // freq) + 1
@@ -1580,10 +1584,6 @@ def interval_range(start=None, end=None, periods=None, freq=None,
         elif end is None:
             end = start + (periods - 1) * freq
 
-        # force end to be consistent with freq (lower if freq skips end)
-        if freq is not None:
-            end -= end % freq
-
         breaks = np.linspace(start, end, periods)
         if all(is_integer(x) for x in com._not_none(start, end, freq)):
             # np.linspace always produces float output
diff --git a/pandas/tests/indexes/interval/test_interval_range.py b/pandas/tests/indexes/interval/test_interval_range.py
index 0fadfcf0c..29fe2b018 100644
--- a/pandas/tests/indexes/interval/test_interval_range.py
+++ b/pandas/tests/indexes/interval/test_interval_range.py
@@ -110,6 +110,8 @@ class TestIntervalRange(object):
 
     @pytest.mark.parametrize('start, end, freq, expected_endpoint', [
         (0, 10, 3, 9),
+        (0, 10, 1.5, 9),
+        (0.5, 10, 3, 9.5),
         (Timedelta('0D'), Timedelta('10D'), '2D4H', Timedelta('8D16H')),
         (Timestamp('2018-01-01'),
          Timestamp('2018-02-09'),
@@ -125,6 +127,22 @@ class TestIntervalRange(object):
         result_endpoint = result.right[-1]
         assert result_endpoint == expected_endpoint
 
+    @pytest.mark.parametrize('start, end, freq', [
+        (0.5, None, None),
+        (None, 4.5, None),
+        (0.5, None, 1.5),
+        (None, 6.5, 1.5)])
+    def test_no_invalid_float_truncation(self, start, end, freq):
+        # GH 21161
+        if freq is None:
+            breaks = [0.5, 1.5, 2.5, 3.5, 4.5]
+        else:
+            breaks = [0.5, 2.0, 3.5, 5.0, 6.5]
+        expected = IntervalIndex.from_breaks(breaks)
+
+        result = interval_range(start=start, end=end, periods=4, freq=freq)
+        tm.assert_index_equal(result, expected)
+
     @pytest.mark.parametrize('start, mid, end', [
         (Timestamp('2018-03-10', tz='US/Eastern'),
          Timestamp('2018-03-10 23:30:00', tz='US/Eastern'),
