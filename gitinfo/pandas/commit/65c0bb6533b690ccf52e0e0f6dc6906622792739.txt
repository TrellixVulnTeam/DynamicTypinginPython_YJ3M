commit 65c0bb6533b690ccf52e0e0f6dc6906622792739
Author: jreback <jeff@reback.net>
Date:   Wed Jul 2 12:44:28 2014 -0400

    PERF: allow dst transition computations to be handled much faster
          if the end-points are ok (GH7633)

diff --git a/pandas/tseries/frequencies.py b/pandas/tseries/frequencies.py
index 09ff65781..441a5e8a9 100644
--- a/pandas/tseries/frequencies.py
+++ b/pandas/tseries/frequencies.py
@@ -599,7 +599,7 @@ _period_alias_dict = _period_alias_dictionary()
 def _period_str_to_code(freqstr):
     # hack
     freqstr = _rule_aliases.get(freqstr, freqstr)
-    
+
     if freqstr not in _dont_uppercase:
         freqstr = _rule_aliases.get(freqstr.lower(), freqstr)
 
@@ -659,6 +659,25 @@ _ONE_MINUTE = 60 * _ONE_SECOND
 _ONE_HOUR = 60 * _ONE_MINUTE
 _ONE_DAY = 24 * _ONE_HOUR
 
+def _tz_convert_with_transitions(values, to_tz, from_tz):
+    """
+    convert i8 values from the specificed timezone to the to_tz zone, taking
+    into account DST transitions
+    """
+
+    # vectorization is slow, so tests if we can do this via the faster tz_convert
+    f = lambda x: tslib.tz_convert_single(x, to_tz, from_tz)
+
+    if len(values) > 2:
+        first_slow, last_slow = f(values[0]),f(values[-1])
+
+        first_fast, last_fast = tslib.tz_convert(np.array([values[0],values[-1]],dtype='i8'),to_tz,from_tz)
+
+        # don't cross a DST, so ok
+        if first_fast == first_slow and last_fast == last_slow:
+            return tslib.tz_convert(values,to_tz,from_tz)
+
+    return np.vectorize(f)(values)
 
 class _FrequencyInferer(object):
     """
@@ -670,10 +689,7 @@ class _FrequencyInferer(object):
         self.values = np.asarray(index).view('i8')
 
         if index.tz is not None:
-            f = lambda x: tslib.tz_convert_single(x, 'UTC', index.tz)
-            self.values = np.vectorize(f)(self.values)
-            # This cant work, because of DST
-            # self.values = tslib.tz_convert(self.values, 'UTC', index.tz)
+            self.values = _tz_convert_with_transitions(self.values,'UTC',index.tz)
 
         self.warn = warn
 
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 9473b1087..a6b7dc01c 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -14,7 +14,7 @@ import pandas.compat as compat
 from pandas.compat import u
 from pandas.tseries.frequencies import (
     infer_freq, to_offset, get_period_alias,
-    Resolution, get_reso_string)
+    Resolution, get_reso_string, _tz_convert_with_transitions)
 from pandas.core.base import DatetimeIndexOpsMixin
 from pandas.tseries.offsets import DateOffset, generate_range, Tick, CDay
 from pandas.tseries.tools import parse_time_string, normalize_date
@@ -1588,9 +1588,7 @@ class DatetimeIndex(DatetimeIndexOpsMixin, Int64Index):
             new_dates = np.concatenate((self[:loc].asi8, [item.view(np.int64)],
                                         self[loc:].asi8))
             if self.tz is not None:
-                f = lambda x: tslib.tz_convert_single(x, 'UTC', self.tz)
-                new_dates = np.vectorize(f)(new_dates)
-                # new_dates = tslib.tz_convert(new_dates, 'UTC', self.tz)
+                new_dates = _tz_convert_with_transitions(new_dates,'UTC',self.tz)
             return DatetimeIndex(new_dates, name=self.name, freq=freq, tz=self.tz)
 
         except (AttributeError, TypeError):
