commit eb4bbe22e8bf56afae931d6a1e1a56cec6d446fa
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Wed Jul 1 10:07:39 2020 -0700

    CLN: stronger typing in libtimezones (#35082)

diff --git a/pandas/_libs/tslibs/timestamps.pyx b/pandas/_libs/tslibs/timestamps.pyx
index ba6cee3d7..1328bc8a5 100644
--- a/pandas/_libs/tslibs/timestamps.pyx
+++ b/pandas/_libs/tslibs/timestamps.pyx
@@ -991,7 +991,7 @@ class Timestamp(_Timestamp):
                     "Timestamp from components."
                 )
 
-            if tz is not None and treat_tz_as_pytz(tz):
+            if tz is not None and PyTZInfo_Check(tz) and treat_tz_as_pytz(tz):
                 raise ValueError(
                     "pytz timezones do not support fold. Please use dateutil "
                     "timezones."
diff --git a/pandas/_libs/tslibs/timezones.pxd b/pandas/_libs/tslibs/timezones.pxd
index 2428993c4..78483bd6f 100644
--- a/pandas/_libs/tslibs/timezones.pxd
+++ b/pandas/_libs/tslibs/timezones.pxd
@@ -2,10 +2,10 @@ from cpython.datetime cimport tzinfo
 
 cdef tzinfo utc_pytz
 
-cpdef bint is_utc(object tz)
-cdef bint is_tzlocal(object tz)
+cpdef bint is_utc(tzinfo tz)
+cdef bint is_tzlocal(tzinfo tz)
 
-cdef bint treat_tz_as_pytz(object tz)
+cdef bint treat_tz_as_pytz(tzinfo tz)
 
 cpdef bint tz_compare(object start, object end)
 cpdef object get_timezone(object tz)
diff --git a/pandas/_libs/tslibs/timezones.pyx b/pandas/_libs/tslibs/timezones.pyx
index 4b8244c26..7d8aabcc4 100644
--- a/pandas/_libs/tslibs/timezones.pyx
+++ b/pandas/_libs/tslibs/timezones.pyx
@@ -1,5 +1,6 @@
-from cpython.datetime cimport tzinfo
 from datetime import timezone
+from cpython.datetime cimport tzinfo, PyTZInfo_Check, PyDateTime_IMPORT
+PyDateTime_IMPORT
 
 # dateutil compat
 from dateutil.tz import (
@@ -29,20 +30,20 @@ cdef tzinfo utc_pytz = UTC
 
 # ----------------------------------------------------------------------
 
-cpdef inline bint is_utc(object tz):
+cpdef inline bint is_utc(tzinfo tz):
     return tz is utc_pytz or tz is utc_stdlib or isinstance(tz, _dateutil_tzutc)
 
 
-cdef inline bint is_tzlocal(object tz):
+cdef inline bint is_tzlocal(tzinfo tz):
     return isinstance(tz, _dateutil_tzlocal)
 
 
-cdef inline bint treat_tz_as_pytz(object tz):
+cdef inline bint treat_tz_as_pytz(tzinfo tz):
     return (hasattr(tz, '_utc_transition_times') and
             hasattr(tz, '_transition_info'))
 
 
-cdef inline bint treat_tz_as_dateutil(object tz):
+cdef inline bint treat_tz_as_dateutil(tzinfo tz):
     return hasattr(tz, '_trans_list') and hasattr(tz, '_trans_idx')
 
 
@@ -59,7 +60,9 @@ cpdef inline object get_timezone(object tz):
     the tz name. It needs to be a string so that we can serialize it with
     UJSON/pytables. maybe_get_tz (below) is the inverse of this process.
     """
-    if is_utc(tz):
+    if not PyTZInfo_Check(tz):
+        return tz
+    elif is_utc(tz):
         return tz
     else:
         if treat_tz_as_dateutil(tz):
@@ -327,7 +330,7 @@ cpdef bint tz_compare(object start, object end):
     return get_timezone(start) == get_timezone(end)
 
 
-def tz_standardize(tz: object):
+def tz_standardize(tz: tzinfo):
     """
     If the passed tz is a pytz timezone object, "normalize" it to the a
     consistent version
