commit ec290748b1a453605f32e3f690a674be4619cca6
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Apr 20 21:20:36 2012 -0400

    BUG: incorrect comparison of Tick objects, close #1063

diff --git a/pandas/core/datetools.py b/pandas/core/datetools.py
index 8ac4473ac..eeff2d583 100644
--- a/pandas/core/datetools.py
+++ b/pandas/core/datetools.py
@@ -1762,7 +1762,7 @@ class Tick(DateOffset):
 
     def __ne__(self, other):
         if isinstance(other, Tick):
-            return self._inc != other._inc
+            return self.delta != other.delta
         else:
             return DateOffset.__ne__(self, other)
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 280f2fbf2..a9f656399 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2965,7 +2965,7 @@ class DataFrame(NDFrame):
         """
         return self - self.shift(periods)
 
-    def shift(self, periods, freq=None, **kwds):
+    def shift(self, periods=1, freq=None, **kwds):
         """
         Shift the index of the DataFrame by desired number of periods with an
         optional time freq
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index cfdf2d5ee..0599268f4 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -136,7 +136,7 @@ class PandasObject(Picklable):
                        sort=sort, group_keys=group_keys)
 
     def convert(self, rule, method='pad', how='last', axis=0, as_index=True,
-                closed='right', label='right'):
+                closed='right', label='right', as_period=False):
         """
         Convenience method for frequency conversion and resampling of regular
         time-series data.
@@ -166,7 +166,7 @@ class PandasObject(Picklable):
             raise ValueError("Rule not a recognized offset")
 
         interval = TimeGrouper(rule, label=label,
-                               closed=closed, _obj=self)
+                               closed=closed, obj=self)
 
         currfreq = len(idx)
         targfreq = len(interval.binner) - 2 # since binner extends endpoints
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index b84df0ac5..8b1d07ff1 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -941,7 +941,7 @@ class TimeGrouper(BinGrouper):
     binner = None
 
     def __init__(self, interval='Min', closed='left', label='left',
-                 begin=None, end=None, nperiods=None, _obj=None):
+                 begin=None, end=None, nperiods=None, obj=None):
         self.offset = interval
         self.closed = closed
         self.label = label
@@ -949,8 +949,8 @@ class TimeGrouper(BinGrouper):
         self.end = end
         self.nperiods = None
 
-        if _obj is not None:
-            self.set_obj(_obj)
+        if obj is not None:
+            self.set_obj(obj)
 
     def set_obj(self, obj):
         """
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 7a39ceb12..49a392a7b 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1,6 +1,6 @@
 # pylint: disable=E1101,E1103,W0232
 
-from datetime import time, datetime, date
+from datetime import time, datetime
 from datetime import timedelta
 from itertools import izip
 import weakref
@@ -12,7 +12,6 @@ import pandas.core.common as com
 import pandas._tseries as lib
 import pandas._engines as _gin
 
-from datetime import datetime
 from pandas._tseries import Timestamp
 
 import pandas.core.datetools as datetools
@@ -385,7 +384,7 @@ class Index(np.ndarray):
     def sort(self, *args, **kwargs):
         raise Exception('Cannot sort an Index object')
 
-    def shift(self, periods, freq):
+    def shift(self, periods=1, freq=None):
         """
         Shift Index containing datetime objects by input number of periods and
         DateOffset
@@ -1480,6 +1479,15 @@ class DatetimeIndex(Int64Index):
         else:  # pragma: no cover
             np.ndarray.__setstate__(self, state)
 
+    def __add__(self, other):
+        if isinstance(other, Index):
+            return self.union(other)
+        elif isinstance(other, (datetools.DateOffset, timedelta)):
+            new_values = self.astype('O') + other
+            return DatetimeIndex(new_values, tz=self.tz)
+        else:
+            return Index(self.view(np.ndarray) + other)
+
     @property
     def asi8(self):
         # do not cache or you'll create a memory leak
diff --git a/pandas/core/series.py b/pandas/core/series.py
index af87394d0..a784e5a19 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -5,7 +5,6 @@ Data structure for 1-dimensional cross-sectional and time series data
 # pylint: disable=E1101,E1103
 # pylint: disable=W0703,W0622,W0613,W0201
 
-from collections import defaultdict
 from itertools import izip
 import operator
 from distutils.version import LooseVersion
@@ -2216,7 +2215,7 @@ copy : boolean, default False
     #----------------------------------------------------------------------
     # Time series-oriented methods
 
-    def shift(self, periods, freq=None, **kwds):
+    def shift(self, periods=1, freq=None, **kwds):
         """
         Shift the index of the Series by desired number of periods with an
         optional time offset
diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index 297743d93..0fd19ca44 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -40,6 +40,7 @@ ctypedef enum time_res:
 # Python front end to C extension type _Timestamp
 # This serves as the box for datetime64
 class Timestamp(_Timestamp):
+
     def __new__(cls, object ts_input, object offset=None, tz=None):
         if isinstance(ts_input, float):
             # to do, do we want to support this, ie with fractional seconds?
@@ -102,6 +103,15 @@ class Timestamp(_Timestamp):
 
         return Interval(self, freq=freq)
 
+def apply_offset(ndarray[object] values, object offset):
+    cdef:
+        Py_ssize_t i, n = len(values)
+        ndarray[int64_t] new_values
+        object boxed
+
+    result = np.empty(n, dtype='M8[us]')
+    new_values = result.view('i8')
+    pass
 
 # This is PITA. Because we inherit from datetime, which has very specific
 # construction requirements, we need to do object instantiation in python
diff --git a/pandas/tests/test_datetools.py b/pandas/tests/test_datetools.py
index 3d3663dd3..97437dc94 100644
--- a/pandas/tests/test_datetools.py
+++ b/pandas/tests/test_datetools.py
@@ -1225,6 +1225,8 @@ def test_Hour():
     assert (Hour(3) + Hour(2)) == Hour(5)
     assert (Hour(3) - Hour(2)) == Hour()
 
+    assert(Hour(4) != Hour(1))
+
 def test_Minute():
     assertEq(Minute(), datetime(2010, 1, 1), datetime(2010, 1, 1, 0, 1))
     assertEq(Minute(-1), datetime(2010, 1, 1, 0, 1), datetime(2010, 1, 1))
@@ -1233,6 +1235,7 @@ def test_Minute():
 
     assert (Minute(3) + Minute(2)) == Minute(5)
     assert (Minute(3) - Minute(2)) == Minute()
+    assert(Minute(5) != Minute())
 
 def test_Second():
     assertEq(Second(), datetime(2010, 1, 1), datetime(2010, 1, 1, 0, 0, 1))
diff --git a/pandas/tests/test_timeseries.py b/pandas/tests/test_timeseries.py
index 619ce2ba4..7ffd6de25 100644
--- a/pandas/tests/test_timeseries.py
+++ b/pandas/tests/test_timeseries.py
@@ -12,7 +12,7 @@ import numpy as np
 from pandas import (Index, Series, TimeSeries, DataFrame, isnull,
                     date_range, Timestamp)
 
-from pandas import DatetimeIndex, to_datetime
+from pandas import DatetimeIndex, Int64Index, to_datetime
 
 from pandas.core.daterange import DateRange
 import pandas.core.datetools as datetools
@@ -20,31 +20,15 @@ import pandas.core.datetools as datetools
 from pandas.util.testing import assert_series_equal, assert_almost_equal
 import pandas.util.testing as tm
 
-
 import pandas._tseries as lib
-from datetime import datetime
-
 import cPickle as pickle
-
 import pandas.core.datetools as dt
-from pandas.core.index import Index, DatetimeIndex, Int64Index
-from pandas.core.frame import DataFrame
-
-import unittest
-import numpy as np
-
-from pandas import Series
-
 from numpy.random import rand
-
-from pandas.util.testing import assert_series_equal, assert_frame_equal
-
+from pandas.util.testing import assert_frame_equal
 from pandas.core.groupby import TimeGrouper
-from pandas.core.datetools import Minute, BDay, Timestamp
-
+from pandas.core.datetools import Minute, BDay
 import pandas.core.common as com
 
-import pandas._tseries as lib
 NaT = lib.NaT
 
 
