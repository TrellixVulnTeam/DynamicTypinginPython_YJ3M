commit ecc72f44a189c94faa39ff8ce2a3523049adfdbe
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Thu Feb 6 15:43:03 2020 -0800

    CLN: inline indexing 1-liners (#31625)

diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 62a4878f1..313d40b57 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -3498,7 +3498,9 @@ class NDFrame(PandasObject, SelectionMixin, indexing.IndexingMixin):
     def _box_item_values(self, key, values):
         raise AbstractMethodError(self)
 
-    def _slice(self: FrameOrSeries, slobj: slice, axis=0, kind=None) -> FrameOrSeries:
+    def _slice(
+        self: FrameOrSeries, slobj: slice, axis=0, kind: str = "getitem"
+    ) -> FrameOrSeries:
         """
         Construct a slice of this container.
 
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 63e4679a8..3e468fb56 100755
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -591,12 +591,6 @@ class _LocationIndexer(_NDFrameIndexerBase):
 
         return self.obj._xs(label, axis=axis)
 
-    def _get_loc(self, key: int, axis: int):
-        return self.obj._ixs(key, axis=axis)
-
-    def _slice(self, obj, axis: int, kind=None):
-        return self.obj._slice(obj, axis=axis, kind=kind)
-
     def _get_setitem_indexer(self, key):
         if self.axis is not None:
             return self._convert_tuple(key, is_setter=True)
@@ -702,17 +696,6 @@ class _LocationIndexer(_NDFrameIndexerBase):
                 keyidx.append(idx)
         return tuple(keyidx)
 
-    def _convert_scalar_indexer(self, key, axis: int):
-        # if we are accessing via lowered dim, use the last dim
-        ax = self.obj._get_axis(min(axis, self.ndim - 1))
-        # a scalar
-        return ax._convert_scalar_indexer(key, kind=self.name)
-
-    def _convert_slice_indexer(self, key: slice, axis: int):
-        # if we are accessing via lowered dim, use the last dim
-        ax = self.obj._get_axis(min(axis, self.ndim - 1))
-        return ax._convert_slice_indexer(key, kind=self.name)
-
     def _has_valid_setitem_indexer(self, indexer) -> bool:
         return True
 
@@ -1627,7 +1610,8 @@ class _LocIndexer(_LocationIndexer):
             return
 
         if not is_list_like_indexer(key):
-            self._convert_scalar_indexer(key, axis)
+            labels = self.obj._get_axis(axis)
+            labels._convert_scalar_indexer(key, kind="loc")
 
     def _is_scalar_access(self, key: Tuple) -> bool:
         """
@@ -1772,7 +1756,7 @@ class _LocIndexer(_LocationIndexer):
         )
 
         if isinstance(indexer, slice):
-            return self._slice(indexer, axis=axis, kind="iloc")
+            return self.obj._slice(indexer, axis=axis, kind="iloc")
         else:
             # DatetimeIndex overrides Index.slice_indexer and may
             #  return a DatetimeIndex instead of a slice object.
@@ -1796,12 +1780,12 @@ class _LocIndexer(_LocationIndexer):
         labels = self.obj._get_axis(axis)
 
         if isinstance(key, slice):
-            return self._convert_slice_indexer(key, axis)
+            return labels._convert_slice_indexer(key, kind="loc")
 
         if is_scalar(key):
             # try to find out correct indexer, if not type correct raise
             try:
-                key = self._convert_scalar_indexer(key, axis)
+                key = labels._convert_scalar_indexer(key, kind="loc")
             except TypeError:
                 # but we will allow setting
                 if not is_setter:
@@ -2025,7 +2009,7 @@ class _iLocIndexer(_LocationIndexer):
             # validate the location
             self._validate_integer(key, axis)
 
-            return self._get_loc(key, axis=axis)
+            return self.obj._ixs(key, axis=axis)
 
     def _get_slice_axis(self, slice_obj: slice, axis: int):
         # caller is responsible for ensuring non-None axis
@@ -2034,19 +2018,22 @@ class _iLocIndexer(_LocationIndexer):
         if not need_slice(slice_obj):
             return obj.copy(deep=False)
 
-        indexer = self._convert_slice_indexer(slice_obj, axis)
-        return self._slice(indexer, axis=axis, kind="iloc")
+        labels = obj._get_axis(axis)
+        indexer = labels._convert_slice_indexer(slice_obj, kind="iloc")
+        return self.obj._slice(indexer, axis=axis, kind="iloc")
 
     def _convert_to_indexer(self, key, axis: int, is_setter: bool = False):
         """
         Much simpler as we only have to deal with our valid types.
         """
+        labels = self.obj._get_axis(axis)
+
         # make need to convert a float key
         if isinstance(key, slice):
-            return self._convert_slice_indexer(key, axis)
+            return labels._convert_slice_indexer(key, kind="iloc")
 
         elif is_float(key):
-            return self._convert_scalar_indexer(key, axis)
+            return labels._convert_scalar_indexer(key, kind="iloc")
 
         self._validate_key(key, axis)
         return key
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 2a627aa87..0786674da 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -840,8 +840,9 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         """
         return self._values[i]
 
-    def _slice(self, slobj: slice, axis: int = 0, kind=None) -> "Series":
-        slobj = self.index._convert_slice_indexer(slobj, kind=kind or "getitem")
+    def _slice(self, slobj: slice, axis: int = 0, kind: str = "getitem") -> "Series":
+        assert kind in ["getitem", "iloc"]
+        slobj = self.index._convert_slice_indexer(slobj, kind=kind)
         return self._get_values(slobj)
 
     def __getitem__(self, key):
