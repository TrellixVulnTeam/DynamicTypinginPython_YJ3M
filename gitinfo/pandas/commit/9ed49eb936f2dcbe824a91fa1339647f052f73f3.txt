commit 9ed49eb936f2dcbe824a91fa1339647f052f73f3
Author: Jeremy Schendel <jschendel@users.noreply.github.com>
Date:   Wed Dec 26 17:06:15 2018 -0700

    API: Simplify repeat signature (#24447)

diff --git a/pandas/core/arrays/base.py b/pandas/core/arrays/base.py
index ef80c42c5..739c8174c 100644
--- a/pandas/core/arrays/base.py
+++ b/pandas/core/arrays/base.py
@@ -605,12 +605,9 @@ class ExtensionArray(object):
             The number of repetitions for each element. This should be a
             non-negative integer. Repeating 0 times will return an empty
             %(klass)s.
-        *args
-            Additional arguments have no effect but might be accepted for
-            compatibility with numpy.
-        **kwargs
-            Additional keywords have no effect but might be accepted for
-            compatibility with numpy.
+        axis : None
+            Must be ``None``. Has no effect but is accepted for compatibility
+            with numpy.
 
         Returns
         -------
@@ -640,8 +637,8 @@ class ExtensionArray(object):
 
     @Substitution(klass='ExtensionArray')
     @Appender(_extension_array_shared_docs['repeat'])
-    def repeat(self, repeats, *args, **kwargs):
-        nv.validate_repeat(args, kwargs)
+    def repeat(self, repeats, axis=None):
+        nv.validate_repeat(tuple(), dict(axis=axis))
         ind = np.arange(len(self)).repeat(repeats)
         return self.take(ind)
 
diff --git a/pandas/core/arrays/categorical.py b/pandas/core/arrays/categorical.py
index 86900c7d6..4c5883f9a 100644
--- a/pandas/core/arrays/categorical.py
+++ b/pandas/core/arrays/categorical.py
@@ -2402,8 +2402,8 @@ class Categorical(ExtensionArray, PandasObject):
 
     @Substitution(klass='Categorical')
     @Appender(_extension_array_shared_docs['repeat'])
-    def repeat(self, repeats, *args, **kwargs):
-        nv.validate_repeat(args, kwargs)
+    def repeat(self, repeats, axis=None):
+        nv.validate_repeat(tuple(), dict(axis=axis))
         codes = self._codes.repeat(repeats)
         return self._constructor(values=codes, dtype=self.dtype, fastpath=True)
 
diff --git a/pandas/core/arrays/interval.py b/pandas/core/arrays/interval.py
index d67645c8b..1f74a2cb1 100644
--- a/pandas/core/arrays/interval.py
+++ b/pandas/core/arrays/interval.py
@@ -1002,8 +1002,8 @@ class IntervalArray(IntervalMixin, ExtensionArray):
         return tuples
 
     @Appender(_extension_array_shared_docs['repeat'] % _shared_docs_kwargs)
-    def repeat(self, repeats, *args, **kwargs):
-        nv.validate_repeat(args, kwargs)
+    def repeat(self, repeats, axis=None):
+        nv.validate_repeat(tuple(), dict(axis=axis))
         left_repeat = self.left.repeat(repeats)
         right_repeat = self.right.repeat(repeats)
         return self._shallow_copy(left=left_repeat, right=right_repeat)
diff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py
index fd0c904ba..2f29561af 100644
--- a/pandas/core/indexes/base.py
+++ b/pandas/core/indexes/base.py
@@ -846,12 +846,9 @@ class Index(IndexOpsMixin, PandasObject):
             The number of repetitions for each element. This should be a
             non-negative integer. Repeating 0 times will return an empty
             %(klass)s.
-        *args
-            Additional arguments have no effect but might be accepted for
-            compatibility with numpy.
-        **kwargs
-            Additional keywords have no effect but might be accepted for
-            compatibility with numpy.
+        axis : None
+            Must be ``None``. Has no effect but is accepted for compatibility
+            with numpy.
 
         Returns
         -------
@@ -875,8 +872,8 @@ class Index(IndexOpsMixin, PandasObject):
         """
 
     @Appender(_index_shared_docs['repeat'] % _index_doc_kwargs)
-    def repeat(self, repeats, *args, **kwargs):
-        nv.validate_repeat(args, kwargs)
+    def repeat(self, repeats, axis=None):
+        nv.validate_repeat(tuple(), dict(axis=axis))
         return self._shallow_copy(self._values.repeat(repeats))
 
     # --------------------------------------------------------------------
diff --git a/pandas/core/indexes/datetimelike.py b/pandas/core/indexes/datetimelike.py
index 8a319a653..e3d24bfbe 100644
--- a/pandas/core/indexes/datetimelike.py
+++ b/pandas/core/indexes/datetimelike.py
@@ -451,8 +451,8 @@ class DatetimeIndexOpsMixin(DatetimeLikeArrayMixin):
         return algorithms.isin(self.asi8, values.asi8)
 
     @Appender(_index_shared_docs['repeat'] % _index_doc_kwargs)
-    def repeat(self, repeats, *args, **kwargs):
-        nv.validate_repeat(args, kwargs)
+    def repeat(self, repeats, axis=None):
+        nv.validate_repeat(tuple(), dict(axis=axis))
         freq = self.freq if is_period_dtype(self) else None
         return self._shallow_copy(self.asi8.repeat(repeats), freq=freq)
 
diff --git a/pandas/core/indexes/multi.py b/pandas/core/indexes/multi.py
index ef4a85e96..60059d5a4 100644
--- a/pandas/core/indexes/multi.py
+++ b/pandas/core/indexes/multi.py
@@ -1858,8 +1858,8 @@ class MultiIndex(Index):
         return self.values.argsort(*args, **kwargs)
 
     @Appender(_index_shared_docs['repeat'] % _index_doc_kwargs)
-    def repeat(self, repeats, *args, **kwargs):
-        nv.validate_repeat(args, kwargs)
+    def repeat(self, repeats, axis=None):
+        nv.validate_repeat(tuple(), dict(axis=axis))
         return MultiIndex(levels=self.levels,
                           codes=[level_codes.view(np.ndarray).repeat(repeats)
                                  for level_codes in self.codes],
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 4a8759c88..84b81e29c 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1037,7 +1037,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         self._data = self._data.setitem(indexer=key, value=value)
         self._maybe_update_cacher()
 
-    def repeat(self, repeats, *args, **kwargs):
+    def repeat(self, repeats, axis=None):
         """
         Repeat elements of a Series.
 
@@ -1050,12 +1050,9 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
             The number of repetitions for each element. This should be a
             non-negative integer. Repeating 0 times will return an empty
             Series.
-        *args
-            Additional arguments have no effect but might be accepted for
-            compatibility with numpy.
-        **kwargs
-            Additional keywords have no effect but might be accepted for
-            compatibility with numpy.
+        axis : None
+            Must be ``None``. Has no effect but is accepted for compatibility
+            with numpy.
 
         Returns
         -------
@@ -1092,7 +1089,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         2    c
         dtype: object
         """
-        nv.validate_repeat(args, kwargs)
+        nv.validate_repeat(tuple(), dict(axis=axis))
         new_index = self.index.repeat(repeats)
         new_values = self._values.repeat(repeats)
         return self._constructor(new_values,
