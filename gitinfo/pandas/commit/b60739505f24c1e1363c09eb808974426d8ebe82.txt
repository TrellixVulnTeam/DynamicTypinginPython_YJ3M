commit b60739505f24c1e1363c09eb808974426d8ebe82
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Sep 25 18:17:08 2011 -0400

    TST: test coverage and minor bugfix in NDFrame.swaplevel

diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 54f032917..be61619b7 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -423,6 +423,7 @@ class NDFrame(PandasObject):
         -------
         swapped : type of caller (new object)
         """
+        axis = self._get_axis_number(axis)
         result = self.copy()
         labels = result._data.axes[axis]
         result._data.set_axis(axis, labels.swaplevel(i, j))
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 7167c7137..06a9975a1 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2492,6 +2492,19 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         self.assertEquals(df._get_numeric_columns(), ['a', 'e'])
         # self.assertEquals(df._get_object_columns(), ['c', 'd'])
 
+    def test_get_numeric_data(self):
+        df = DataFrame({'a' : 1., 'b' : 2, 'c' : 'foo'},
+                       index=np.arange(10))
+
+        result = df._get_numeric_data()
+        expected = df.ix[:, ['a', 'b']]
+        assert_frame_equal(result, expected)
+
+        only_obj = df.ix[:, ['c']]
+        result = only_obj._get_numeric_data()
+        expected = df.ix[:, []]
+        assert_frame_equal(result, expected)
+
     def test_statistics(self):
         # unnecessary?
         sumFrame = self.frame.apply(np.sum)
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index 720ae8a40..c1ecd405d 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -9,7 +9,7 @@ import numpy as np
 
 import pandas.core.datetools as datetools
 from pandas.core.index import MultiIndex, NULL_INDEX
-from pandas.core.api import (DataFrame, Index, Series, notnull, isnull)
+from pandas import Panel, DataFrame, Index, Series, notnull, isnull
 
 from pandas.util.testing import (assert_almost_equal,
                                  assert_series_equal,
@@ -220,6 +220,12 @@ class TestMultiLevel(unittest.TestCase):
         self.assertRaises(Exception,
                           self.frame.delevel()['A'].sortlevel)
 
+    def test_sortlevel_by_name(self):
+        self.frame.index.names = ['first', 'second']
+        result = self.frame.sortlevel(level='second')
+        expected = self.frame.sortlevel(level=1)
+        assert_frame_equal(result, expected)
+
     def test_sortlevel_mixed(self):
         sorted_before = self.frame.sortlevel(1)
 
@@ -337,6 +343,14 @@ class TestMultiLevel(unittest.TestCase):
         back = swapped.swaplevel(0, 1)
         self.assert_(back.index.equals(self.frame.index))
 
+    def test_swaplevel_panel(self):
+        panel = Panel({'ItemA' : self.frame,
+                       'ItemB' : self.frame * 2})
+
+        result = panel.swaplevel(0, 1, axis='major')
+        expected = panel.copy()
+        expected.major_axis = expected.major_axis.swaplevel(0, 1)
+
     def test_insert_index(self):
         df = self.ymd[:5].T
         df[2000, 1, 10] = df[2000, 1, 7]
