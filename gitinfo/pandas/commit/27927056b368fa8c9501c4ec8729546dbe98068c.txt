commit 27927056b368fa8c9501c4ec8729546dbe98068c
Author: Gregory Rome <gwrome@gmail.com>
Date:   Sat Mar 30 14:08:51 2019 -0500

    Update type hints to python3 style (non-array files) (#25802)

diff --git a/pandas/core/base.py b/pandas/core/base.py
index 27b7694f2..684371ba8 100644
--- a/pandas/core/base.py
+++ b/pandas/core/base.py
@@ -786,8 +786,7 @@ class IndexOpsMixin(object):
         return self.values.base
 
     @property
-    def array(self):
-        # type: () -> ExtensionArray
+    def array(self) -> ExtensionArray:
         """
         The ExtensionArray of the data backing this Series or Index.
 
@@ -962,8 +961,7 @@ class IndexOpsMixin(object):
         return result
 
     @property
-    def _ndarray_values(self):
-        # type: () -> np.ndarray
+    def _ndarray_values(self) -> np.ndarray:
         """
         The data as an ndarray, possibly losing information.
 
diff --git a/pandas/core/common.py b/pandas/core/common.py
index 6a55c39b5..c3cef3ff4 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -93,8 +93,7 @@ def maybe_box_datetimelike(value):
 values_from_object = lib.values_from_object
 
 
-def is_bool_indexer(key):
-    # type: (Any) -> bool
+def is_bool_indexer(key: Any) -> bool:
     """
     Check whether `key` is a valid boolean indexer.
 
diff --git a/pandas/core/dtypes/base.py b/pandas/core/dtypes/base.py
index 9c66d6235..9e7d771ab 100644
--- a/pandas/core/dtypes/base.py
+++ b/pandas/core/dtypes/base.py
@@ -63,8 +63,7 @@ class _DtypeOpsMixin(object):
         return not self.__eq__(other)
 
     @property
-    def names(self):
-        # type: () -> Optional[List[str]]
+    def names(self) -> Optional[List[str]]:
         """Ordered list of field names, or None if there are no fields.
 
         This is for compatibility with NumPy arrays, and may be removed in the
@@ -114,8 +113,7 @@ class _DtypeOpsMixin(object):
             return False
 
     @property
-    def _is_numeric(self):
-        # type: () -> bool
+    def _is_numeric(self) -> bool:
         """
         Whether columns with this dtype should be considered numeric.
 
@@ -126,8 +124,7 @@ class _DtypeOpsMixin(object):
         return False
 
     @property
-    def _is_boolean(self):
-        # type: () -> bool
+    def _is_boolean(self) -> bool:
         """
         Whether this dtype should be considered boolean.
 
@@ -210,8 +207,7 @@ class ExtensionDtype(_DtypeOpsMixin):
         return self.name
 
     @property
-    def type(self):
-        # type: () -> Type
+    def type(self) -> Type:
         """
         The scalar type for the array, e.g. ``int``
 
@@ -240,8 +236,7 @@ class ExtensionDtype(_DtypeOpsMixin):
         return 'O'
 
     @property
-    def name(self):
-        # type: () -> str
+    def name(self) -> str:
         """
         A string identifying the data type.
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 5a3956b28..6ca42130e 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -17,7 +17,7 @@ import itertools
 import sys
 import warnings
 from textwrap import dedent
-from typing import List, Union
+from typing import List, Optional, Union
 
 import numpy as np
 import numpy.ma as ma
@@ -71,7 +71,8 @@ from pandas.core.dtypes.common import (
     is_iterator,
     is_sequence,
     is_named_tuple)
-from pandas.core.dtypes.generic import ABCSeries, ABCIndexClass, ABCMultiIndex
+from pandas.core.dtypes.generic import (
+    ABCSeries, ABCDataFrame, ABCIndexClass, ABCMultiIndex)
 from pandas.core.dtypes.missing import isna, notna
 
 from pandas.core import algorithms
@@ -282,6 +283,7 @@ ValueError: columns overlap but no suffix specified:
     Index(['value'], dtype='object')
 """
 
+
 # -----------------------------------------------------------------------
 # DataFrame class
 
@@ -6239,11 +6241,10 @@ class DataFrame(NDFrame):
     # Function application
 
     def _gotitem(self,
-                 key,           # type: Union[str, List[str]]
-                 ndim,          # type: int
-                 subset=None    # type: Union[Series, DataFrame, None]
-                 ):
-        # type: (...) -> Union[Series, DataFrame]
+                 key: Union[str, List[str]],
+                 ndim: int,
+                 subset: Optional[Union[Series, ABCDataFrame]] = None,
+                 ) -> Union[Series, ABCDataFrame]:
         """
         Sub-classes to define. Return a sliced object.
 
diff --git a/pandas/core/groupby/groupby.py b/pandas/core/groupby/groupby.py
index 3d9431596..2494cf55d 100644
--- a/pandas/core/groupby/groupby.py
+++ b/pandas/core/groupby/groupby.py
@@ -12,7 +12,7 @@ from contextlib import contextmanager
 import datetime
 from functools import partial, wraps
 import types
-from typing import Optional, Type
+from typing import Optional, Tuple, Type
 import warnings
 
 import numpy as np
@@ -1041,8 +1041,7 @@ class GroupBy(_GroupBy):
         Shared func to call any / all Cython GroupBy implementations.
         """
 
-        def objs_to_bool(vals):
-            # type: (np.ndarray) -> (np.ndarray, Type)
+        def objs_to_bool(vals: np.ndarray) -> Tuple[np.ndarray, Type]:
             if is_object_dtype(vals):
                 vals = np.array([bool(x) for x in vals])
             else:
@@ -1050,8 +1049,7 @@ class GroupBy(_GroupBy):
 
             return vals.view(np.uint8), np.bool
 
-        def result_to_bool(result, inference):
-            # type: (np.ndarray, Type) -> np.ndarray
+        def result_to_bool(result: np.ndarray, inference: Type) -> np.ndarray:
             return result.astype(inference, copy=False)
 
         return self._get_cythonized_result('group_any_all', self.grouper,
@@ -1739,8 +1737,9 @@ class GroupBy(_GroupBy):
         b    3.0
         """
 
-        def pre_processor(vals):
-            # type: (np.ndarray) -> (np.ndarray, Optional[Type])
+        def pre_processor(
+                vals: np.ndarray
+        ) -> Tuple[np.ndarray, Optional[Type]]:
             if is_object_dtype(vals):
                 raise TypeError("'quantile' cannot be performed against "
                                 "'object' dtypes!")
@@ -1754,8 +1753,10 @@ class GroupBy(_GroupBy):
 
             return vals, inference
 
-        def post_processor(vals, inference):
-            # type: (np.ndarray, Optional[Type]) -> np.ndarray
+        def post_processor(
+                vals: np.ndarray,
+                inference: Optional[Type]
+        ) -> np.ndarray:
             if inference:
                 # Check for edge case
                 if not (is_integer_dtype(inference) and
diff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py
index e977f652c..1875976a8 100644
--- a/pandas/core/indexes/base.py
+++ b/pandas/core/indexes/base.py
@@ -3630,8 +3630,7 @@ class Index(IndexOpsMixin, PandasObject):
         return self._data.view(np.ndarray)
 
     @property
-    def _values(self):
-        # type: () -> Union[ExtensionArray, Index, np.ndarray]
+    def _values(self) -> Union[ExtensionArray, ABCIndexClass, np.ndarray]:
         # TODO(EA): remove index types as they become extension arrays
         """
         The best array representation.
diff --git a/pandas/core/indexes/datetimelike.py b/pandas/core/indexes/datetimelike.py
index da4e70400..197fbc2c2 100644
--- a/pandas/core/indexes/datetimelike.py
+++ b/pandas/core/indexes/datetimelike.py
@@ -130,8 +130,7 @@ class DatetimeIndexOpsMixin(ExtensionOpsMixin):
     # Abstract data attributes
 
     @property
-    def values(self):
-        # type: () -> np.ndarray
+    def values(self) -> np.ndarray:
         # Note: PeriodArray overrides this to return an ndarray of objects.
         return self._data._data
 
diff --git a/pandas/core/internals/managers.py b/pandas/core/internals/managers.py
index be2b56881..49fcb572e 100644
--- a/pandas/core/internals/managers.py
+++ b/pandas/core/internals/managers.py
@@ -1862,8 +1862,9 @@ def _stack_arrays(tuples, dtype):
     return stacked, placement
 
 
-def _interleaved_dtype(blocks):
-    # type: (List[Block]) -> Optional[Union[np.dtype, ExtensionDtype]]
+def _interleaved_dtype(
+        blocks: List[Block]
+) -> Optional[Union[np.dtype, ExtensionDtype]]:
     """Find the common dtype for `blocks`.
 
     Parameters
