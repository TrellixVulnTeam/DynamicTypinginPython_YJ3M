commit 54c62c61b3a328ad6ce24080ed3d1403c3317707
Author: Chang She <changshe@gmail.com>
Date:   Tue Jul 17 14:33:14 2012 -0400

    TST: legends and secondary resampling

diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index 1ea907385..935bd0f3f 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -2,6 +2,7 @@
 # pylint: disable=E1101
 from itertools import izip
 import datetime
+import re
 
 import numpy as np
 
@@ -623,12 +624,11 @@ class MPLPlot(object):
                 fig = self.plt.figure(figsize=self.figsize)
                 ax = fig.add_subplot(111)
                 ax = self._maybe_right_yaxis(ax)
-                self.ax = ax
             else:
                 fig = self.ax.get_figure()
-                self.ax = self._maybe_right_yaxis(self.ax)
+                ax = self._maybe_right_yaxis(self.ax)
 
-            axes = [self.ax]
+            axes = [ax]
 
         self.fig = fig
         self.axes = axes
@@ -646,10 +646,7 @@ class MPLPlot(object):
         pass
 
     def _adorn_subplots(self):
-        if self.subplots:
-            to_adorn = self.axes
-        else:
-            to_adorn = [self.ax]
+        to_adorn = self.axes
 
         # todo: sharex, sharey handling?
 
@@ -668,14 +665,11 @@ class MPLPlot(object):
 
             ax.grid(self.grid)
 
-        if self.legend and not self.subplots:
-            self.ax.legend(loc='best', title=self.legend_title)
-
         if self.title:
             if self.subplots:
                 self.fig.suptitle(self.title)
             else:
-                self.ax.set_title(self.title)
+                self.axes[0].set_title(self.title)
 
         if self._need_to_set_index:
             labels = [_stringify(key) for key in self.data.index]
@@ -762,7 +756,7 @@ class MPLPlot(object):
         if self.subplots:
             ax = self.axes[i]
         else:
-            ax = self.ax
+            ax = self.axes[0]
             if self.on_right(i):
                 if hasattr(ax, 'right_ax'):
                     ax = ax.right_ax
@@ -861,10 +855,12 @@ class LinePlot(MPLPlot):
         # this is slightly deceptive
         if self.use_index and self._use_dynamic_x():
             data = self._maybe_convert_index(self.data)
-            self._make_ts_plot(data)
+            self._make_ts_plot(data, **self.kwds)
         else:
             import matplotlib.pyplot as plt
-            colors = kwargs.pop('colors', str(plt.rcParams['axes.color_cycle']))
+            cycle = ''.join(plt.rcParams.get('axes.color_cycle',
+                                             list('bgrcmyk')))
+            colors = self.kwds.pop('colors', cycle)
             lines = []
             labels = []
             x = self._get_xticks(convert_period=True)
@@ -873,8 +869,9 @@ class LinePlot(MPLPlot):
 
             for i, (label, y) in enumerate(self._iter_data()):
                 ax, style = self._get_ax_and_style(i, label)
-                kwds = kwargs.copy()
-                kwds['color'] = colors[i % len(colors)]
+                kwds = self.kwds.copy()
+                if re.match('[a-z]+', style) is None:
+                    kwds['color'] = colors[i % len(colors)]
 
                 label = com._stringify(label)
 
@@ -883,47 +880,19 @@ class LinePlot(MPLPlot):
                     y = np.ma.array(y)
                     y = np.ma.masked_where(mask, y)
 
-                newline = plotf(ax, x, y, style, label=label, **self.kwds)[0]
+                newline = plotf(ax, x, y, style, label=label, **kwds)[0]
                 lines.append(newline)
                 labels.append(label)
                 ax.grid(self.grid)
 
-            if self.legend and not self.subplots:
-                ax = self._get_ax(0)
-                ax.legend(lines, labels, loc='best', title=self.legend_title)
-
-    def _maybe_convert_index(self, data):
-        # tsplot converts automatically, but don't want to convert index
-        # over and over for DataFrames
-        from pandas.core.frame import DataFrame
-        if (isinstance(data.index, DatetimeIndex) and
-            isinstance(data, DataFrame)):
-            freq = getattr(data.index, 'freq', None)
-
-            if freq is None:
-                freq = getattr(data.index, 'inferred_freq', None)
-
-            if isinstance(freq, DateOffset):
-                freq = freq.rule_code
-
-            freq = get_period_alias(freq)
-
-            if freq is None:
-                ax = self._get_ax(0)
-                freq = getattr(ax, 'freq', None)
-
-            if freq is None:
-                raise ValueError('Could not get frequency alias for plotting')
-
-            data = DataFrame(data.values,
-                             index=data.index.to_period(freq=freq),
-                             columns=data.columns)
-        return data
+            self._make_legend(lines, labels)
 
     def _make_ts_plot(self, data, **kwargs):
         from pandas.tseries.plotting import tsplot
         import matplotlib.pyplot as plt
-        colors = kwargs.pop('colors', ''.join(plt.rcParams['axes.color_cycle']))
+        kwargs = kwargs.copy()
+        cycle = ''.join(plt.rcParams.get('axes.color_cycle', list('bgrcmyk')))
+        colors = kwargs.pop('colors', ''.join(cycle))
 
         plotf = self._get_plot_function()
         lines = []
@@ -933,6 +902,8 @@ class LinePlot(MPLPlot):
             ax = self._get_ax(0) #self.axes[0]
             style = self.style or ''
             label = com._stringify(self.label)
+            if re.match('[a-z]+', style) is None:
+                kwargs['color'] = colors[0]
             newline = tsplot(data, plotf, ax=ax, label=label, style=self.style,
                              **kwargs)[0]
             ax.grid(self.grid)
@@ -942,7 +913,8 @@ class LinePlot(MPLPlot):
             for i, col in enumerate(data.columns):
                 ax, style = self._get_ax_and_style(i, col)
                 kwds = kwargs.copy()
-                kwds['color'] = colors[i % len(colors)]
+                if re.match('[a-z]+', style) is None:
+                    kwds['color'] = colors[i % len(colors)]
 
                 label = com._stringify(col)
                 newline = tsplot(data[col], plotf, ax=ax, label=label,
@@ -951,22 +923,63 @@ class LinePlot(MPLPlot):
                 labels.append(label)
                 ax.grid(self.grid)
 
-        if self.legend and not self.subplots:
-            ax.legend(lines, labels, loc='best', title=self.legend_title)
+        self._make_legend(lines, labels)
 
-        # self.fig.subplots_adjust(wspace=0, hspace=0)
+    def _make_legend(self, lines, labels):
+        ax, leg = self._get_ax_legend(self.axes[0])
+        if (self.legend or leg is not None) and not self.subplots:
+            if leg is not None:
+                ext_lines = leg.get_lines()
+                ext_labels = [x.get_text() for x in leg.get_texts()]
+                ext_lines.extend(lines)
+                ext_labels.extend(labels)
+            else:
+                ext_lines = lines
+                ext_labels = labels
+            ax.legend(ext_lines, ext_labels, loc='best',
+                      title=self.legend_title)
+
+    def _get_ax_legend(self, ax):
+        leg = ax.get_legend()
+        other_ax = (getattr(ax, 'right_ax', None) or
+                    getattr(ax, 'left_ax', None))
+        other_leg = None
+        if other_ax is not None:
+            other_leg = other_ax.get_legend()
+        if leg is None and other_leg is not None:
+            leg = other_leg
+            ax = other_ax
+        return ax, leg
+
+    def _maybe_convert_index(self, data):
+        # tsplot converts automatically, but don't want to convert index
+        # over and over for DataFrames
+        from pandas.core.frame import DataFrame
+        if (isinstance(data.index, DatetimeIndex) and
+            isinstance(data, DataFrame)):
+            freq = getattr(data.index, 'freq', None)
 
+            if freq is None:
+                freq = getattr(data.index, 'inferred_freq', None)
+            if isinstance(freq, DateOffset):
+                freq = freq.rule_code
+            freq = get_period_alias(freq)
+
+            if freq is None:
+                ax = self._get_ax(0)
+                freq = getattr(ax, 'freq', None)
+
+            if freq is None:
+                raise ValueError('Could not get frequency alias for plotting')
+
+            data = DataFrame(data.values,
+                             index=data.index.to_period(freq=freq),
+                             columns=data.columns)
+        return data
 
     def _post_plot_logic(self):
         df = self.data
 
-        if self.legend:
-            if self.subplots:
-                for ax in self.axes:
-                    ax.legend(loc='best')
-            else:
-                self.axes[0].legend(loc='best')
-
         condition = (not self._use_dynamic_x
                      and df.index.is_all_dates
                      and not self.subplots
@@ -1051,17 +1064,9 @@ class BarPlot(MPLPlot):
             labels.append(label)
 
         if self.legend and not self.subplots:
-            patches =[r[0] for r in rects]
-
-            # Legend to the right of the plot
-            # ax.legend(patches, labels, bbox_to_anchor=(1.05, 1),
-            #           loc=2, borderaxespad=0.)
-            # self.fig.subplots_adjust(right=0.80)
-
-            ax.legend(patches, labels, loc='best',
-                      title=self.legend_title)
-
-        # self.fig.subplots_adjust(top=0.8, wspace=0, hspace=0)
+                patches =[r[0] for r in rects]
+                self.axes[0].legend(patches, labels, loc='best',
+                               title=self.legend_title)
 
     def _post_plot_logic(self):
         for ax in self.axes:
diff --git a/pandas/tseries/plotting.py b/pandas/tseries/plotting.py
index 86f116fd1..187fe2b4d 100644
--- a/pandas/tseries/plotting.py
+++ b/pandas/tseries/plotting.py
@@ -77,7 +77,6 @@ def tsplot(series, plotf, **kwargs):
 
     lines = plotf(ax, *args,  **kwargs)
     label = kwargs.get('label', None)
-    _reset_legend(ax, lines[0], label, kwargs)
 
     # set date formatter, locators and rescale limits
     format_dateaxis(ax, ax.freq)
@@ -86,38 +85,11 @@ def tsplot(series, plotf, **kwargs):
 
     return lines
 
-def _reset_legend(ax, line, label, kwargs):
-    ax, leg = _get_ax_legend(ax)
-    if leg and (kwargs.get('legend', True)):
-        ext_lines = leg.get_lines()
-        ext_labels = [x.get_text() for x in leg.get_texts()]
-        title = leg.get_title().get_text()
-        if title == 'None':
-            title = None
-
-        ext_lines.append(line)
-        ext_labels.append(label)
-        ax.legend(ext_lines, ext_labels, loc='best', title=title)
-
-def _get_ax_legend(ax):
-    leg = ax.get_legend()
-
-    other_ax = getattr(ax, 'right_ax', None) or getattr(ax, 'left_ax', None)
-    other_leg = None
-    if other_ax is not None:
-        other_leg = other_ax.get_legend()
-
-    if leg is None:
-        leg = other_leg
-        ax = other_ax
-
-    return ax, leg
-
 def _maybe_resample(series, ax, freq, plotf, kwargs):
-    ax_freq = getattr(ax, 'freq', None)
-    if (ax_freq is not None) and (freq != ax_freq):
+    ax_freq = _get_ax_freq(ax)
+    if ax_freq is not None and freq != ax_freq:
         if frequencies.is_subperiod(freq, ax_freq): # upsample existing
-            _upsample_others(ax, freq, ax_freq, plotf, kwargs)
+            _upsample_others(ax, freq, plotf, kwargs)
             ax_freq = freq
         elif frequencies.is_superperiod(freq, ax_freq): # upsample input
             series = series.asfreq(ax_freq).dropna()
@@ -128,12 +100,21 @@ def _maybe_resample(series, ax, freq, plotf, kwargs):
             series = series.resample(ax_freq, how=how).dropna()
             freq = ax_freq
         elif _is_sub(freq, ax_freq):
-            _upsample_others(ax, freq, ax_freq, plotf, kwargs, True)
+            _upsample_others(ax, freq, plotf, kwargs, True)
             ax_freq = freq
         else:
             raise ValueError('Incompatible frequency conversion')
     return freq, ax_freq, series
 
+def _get_ax_freq(ax):
+    ax_freq = getattr(ax, 'freq', None)
+    if ax_freq is None:
+        if hasattr(ax, 'left_ax'):
+            ax_freq = getattr(ax.left_ax, 'freq', None)
+        if hasattr(ax, 'right_ax'):
+            ax_freq = getattr(ax.right_ax, 'freq', None)
+    return ax_freq
+
 def _is_sub(f1, f2):
     return ((f1.startswith('W') and frequencies.is_subperiod('D', f2)) or
             (f2.startswith('W') and frequencies.is_subperiod(f1, 'D')))
@@ -142,10 +123,10 @@ def _is_sup(f1, f2):
     return ((f1.startswith('W') and frequencies.is_superperiod('D', f2)) or
             (f2.startswith('W') and frequencies.is_superperiod(f1, 'D')))
 
-def _upsample_others(ax, freq, ax_freq, plotf, kwargs,
+def _upsample_others(ax, freq, plotf, kwargs,
                      via_daily=False):
     legend = ax.get_legend()
-    lines, labels = _replot_ax(ax, freq, ax_freq, plotf, kwargs, via_daily)
+    lines, labels = _replot_ax(ax, freq, plotf, kwargs, via_daily)
 
     other_ax = None
     if hasattr(ax, 'left_ax'):
@@ -154,8 +135,7 @@ def _upsample_others(ax, freq, ax_freq, plotf, kwargs,
         other_ax = ax.right_ax
 
     if other_ax is not None:
-        other_leg = other_ax.get_legend()
-        rlines, rlabels = _replot_ax(other_ax, freq, ax_freq, plotf, kwargs,
+        rlines, rlabels = _replot_ax(other_ax, freq, plotf, kwargs,
                                      via_daily)
         lines.extend(rlines)
         labels.extend(rlabels)
@@ -167,19 +147,21 @@ def _upsample_others(ax, freq, ax_freq, plotf, kwargs,
             title = None
         ax.legend(lines, labels, loc='best', title=title)
 
-def _replot_ax(ax, freq, ax_freq, plotf, kwargs, via_daily):
-    data = ax._plot_data
+def _replot_ax(ax, freq, plotf, kwargs, via_daily):
     ax._plot_data = []
     ax.clear()
     _decorate_axes(ax, freq, kwargs)
+
+    data = getattr(ax, '_plot_data', None)
     lines = []
     labels = []
-    for series, kwds in data:
-        series = _upsample(series, freq, via_daily)
-        ax._plot_data.append(series)
-        args = _maybe_mask(series)
-        lines.append(plotf(ax, *args, **kwds)[0])
-        labels.append(com._stringify(series.name))
+    if data is not None:
+        for series, kwds in data:
+            series = _upsample(series, freq, via_daily)
+            ax._plot_data.append(series)
+            args = _maybe_mask(series)
+            lines.append(plotf(ax, *args, **kwds)[0])
+            labels.append(com._stringify(series.name))
 
     return lines, labels
 
diff --git a/pandas/tseries/tests/test_plotting.py b/pandas/tseries/tests/test_plotting.py
index 14ff96f49..fdcee4186 100644
--- a/pandas/tseries/tests/test_plotting.py
+++ b/pandas/tseries/tests/test_plotting.py
@@ -450,7 +450,7 @@ class TestTSPlot(unittest.TestCase):
         plt.close('all')
         ser = Series(np.random.randn(10))
         ser2 = Series(np.random.randn(10))
-        ax = ser.plot(secondary_y=True)
+        ax = ser.plot(secondary_y=True).right_ax
         fig = ax.get_figure()
         axes = fig.get_axes()
         l = ax.get_lines()[0]
@@ -464,7 +464,7 @@ class TestTSPlot(unittest.TestCase):
 
         plt.close('all')
         ax = ser2.plot()
-        ax2 = ser.plot(secondary_y=True)
+        ax2 = ser.plot(secondary_y=True).right_ax
         self.assert_(ax.get_yaxis().get_visible())
 
         plt.close('all')
@@ -476,7 +476,7 @@ class TestTSPlot(unittest.TestCase):
         idx = date_range('1/1/2000', periods=10)
         ser = Series(np.random.randn(10), idx)
         ser2 = Series(np.random.randn(10), idx)
-        ax = ser.plot(secondary_y=True)
+        ax = ser.plot(secondary_y=True).right_ax
         fig = ax.get_figure()
         axes = fig.get_axes()
         l = ax.get_lines()[0]
@@ -498,7 +498,7 @@ class TestTSPlot(unittest.TestCase):
         import matplotlib.pyplot as plt
         plt.close('all')
         ser = Series(np.random.randn(10))
-        ax = ser.plot(secondary_y=True, kind='density')
+        ax = ser.plot(secondary_y=True, kind='density').right_ax
         fig = ax.get_figure()
         axes = fig.get_axes()
         self.assert_(axes[1].get_yaxis().get_ticks_position() == 'right')
@@ -697,6 +697,74 @@ class TestTSPlot(unittest.TestCase):
                 rs = time(h, m, s).strftime('%H:%M:%S.%f')
                 self.assert_(xp, rs)
 
+    @slow
+    def test_secondary_upsample(self):
+        import matplotlib.pyplot as plt
+        plt.close('all')
+        idxh = date_range('1/1/1999', periods=365, freq='D')
+        idxl = date_range('1/1/1999', periods=12, freq='M')
+        high = Series(np.random.randn(len(idxh)), idxh)
+        low = Series(np.random.randn(len(idxl)), idxl)
+        low.plot()
+        ax = high.plot(secondary_y=True)
+        for l in ax.get_lines():
+            self.assert_(l.get_xdata().freq == 'D')
+        for l in ax.right_ax.get_lines():
+            self.assert_(l.get_xdata().freq == 'D')
+
+    @slow
+    def test_legend(self):
+        # TS plots
+        # secondary
+        # plot series after left, right
+
+        # Irreg TS plot
+        # secondary
+        # plot series after left, right
+
+        # Non TS
+        # secondary
+        # plot series after left, right
+        pass
+
+    @slow
+    def test_secondary_color(self):
+        import matplotlib.pyplot as plt
+        fig = plt.gcf()
+        plt.clf()
+        ax = fig.add_subplot(211)
+
+        #ts
+        df = tm.makeTimeDataFrame()
+        ax = df.plot(secondary_y=['A', 'B'])
+        leg = ax.get_legend()
+        self.assert_(len(leg.get_lines()) == 4)
+        self.assert_(ax.right_ax.get_legend() is None)
+
+        plt.clf()
+        ax = fig.add_subplot(211)
+        df = tm.makeTimeDataFrame()
+        ax = df.plot(secondary_y=['C', 'D'])
+        leg = ax.get_legend()
+        self.assert_(len(leg.get_lines()) == 4)
+        self.assert_(ax.right_ax.get_legend() is None)
+
+        #non-ts
+        df = tm.makeDataFrame()
+        plt.clf()
+        ax = fig.add_subplot(211)
+        ax = df.plot(secondary_y=['A', 'B'])
+        leg = ax.get_legend()
+        self.assert_(len(leg.get_lines()) == 4)
+        self.assert_(ax.right_ax.get_legend() is None)
+
+        plt.clf()
+        ax = fig.add_subplot(211)
+        ax = df.plot(secondary_y=['C', 'D'])
+        leg = ax.get_legend()
+        self.assert_(len(leg.get_lines()) == 4)
+        self.assert_(ax.right_ax.get_legend() is None)
+
 PNG_PATH = 'tmp.png'
 def _check_plot_works(f, freq=None, series=None, *args, **kwargs):
     import matplotlib.pyplot as plt
