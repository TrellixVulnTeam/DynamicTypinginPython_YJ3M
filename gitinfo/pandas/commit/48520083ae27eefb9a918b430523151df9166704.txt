commit 48520083ae27eefb9a918b430523151df9166704
Author: Jon M. Mease <jon.mease@jhuapl.edu>
Date:   Tue Oct 25 06:49:24 2016 -0400

    Bug: Error when key-only Grouper is passed to groupby in a list (GH14334)
    
    closes #14334
    
    Author: Jon M. Mease <jon.mease@jhuapl.edu>
    
    Closes #14342 from jmmease/bug_14334 and squashes the following commits:
    
    5e96797 [Jon M. Mease] Add tests for grouping on two columns
    cee5ce6 [Jon M. Mease] Added bug description to new test case
    f9ef05b [Jon M. Mease] Moved whatsnew to 0.19.1 and clarified description
    14a4ae6 [Jon M. Mease] Added whatsnew for GH 14334
    9805c30 [Jon M. Mease] Fix for GH 14334
    dfd3e09 [Jon M. Mease] Added test case for GH 14334

diff --git a/doc/source/whatsnew/v0.19.1.txt b/doc/source/whatsnew/v0.19.1.txt
index d1bb0ed4a..d79332f19 100644
--- a/doc/source/whatsnew/v0.19.1.txt
+++ b/doc/source/whatsnew/v0.19.1.txt
@@ -64,6 +64,7 @@ Bug Fixes
 - Bug in ``MultiIndex.set_levels`` where illegal level values were still set after raising an error (:issue:`13754`)
 - Bug in ``DataFrame.to_json`` where ``lines=True`` and a value contained a ``}`` character (:issue:`14391`)
 - Bug in ``df.groupby`` causing an ``AttributeError`` when grouping a single index frame by a column and the index level (:issue`14327`)
+- Bug in ``df.groupby`` where ``TypeError`` raised when ``pd.Grouper(key=...)`` is passed in a list (:issue:`14334`)
 
 
 
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 5223c0ac2..5e08f6c33 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -2208,7 +2208,10 @@ class Grouping(object):
                 index._get_grouper_for_level(self.grouper, level)
 
         else:
-            if isinstance(self.grouper, (list, tuple)):
+            if self.grouper is None and self.name is not None:
+                self.grouper = self.obj[self.name]
+
+            elif isinstance(self.grouper, (list, tuple)):
                 self.grouper = com._asarray_tuplesafe(self.grouper)
 
             # a passed Categorical
@@ -2448,7 +2451,10 @@ def _get_grouper(obj, key=None, axis=0, level=None, sort=True,
         elif is_in_axis(gpr):  # df.groupby('name')
             in_axis, name, gpr = True, gpr, obj[gpr]
             exclusions.append(name)
-
+        elif isinstance(gpr, Grouper) and gpr.key is not None:
+            # Add key to exclusions
+            exclusions.append(gpr.key)
+            in_axis, name = False, None
         else:
             in_axis, name = False, None
 
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index f3791ee1d..89aaafe9b 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -442,6 +442,36 @@ class TestGroupBy(tm.TestCase):
         result = g.sum()
         assert_frame_equal(result, expected)
 
+        # GH14334
+        # pd.Grouper(key=...) may be passed in a list
+        df = DataFrame({'A': [0, 0, 0, 1, 1, 1],
+                        'B': [1, 1, 2, 2, 3, 3],
+                        'C': [1, 2, 3, 4, 5, 6]})
+        # Group by single column
+        expected = df.groupby('A').sum()
+        g = df.groupby([pd.Grouper(key='A')])
+        result = g.sum()
+        assert_frame_equal(result, expected)
+
+        # Group by two columns
+        # using a combination of strings and Grouper objects
+        expected = df.groupby(['A', 'B']).sum()
+
+        # Group with two Grouper objects
+        g = df.groupby([pd.Grouper(key='A'), pd.Grouper(key='B')])
+        result = g.sum()
+        assert_frame_equal(result, expected)
+
+        # Group with a string and a Grouper object
+        g = df.groupby(['A', pd.Grouper(key='B')])
+        result = g.sum()
+        assert_frame_equal(result, expected)
+
+        # Group with a Grouper object and a string
+        g = df.groupby([pd.Grouper(key='A'), 'B'])
+        result = g.sum()
+        assert_frame_equal(result, expected)
+
         # GH8866
         s = Series(np.arange(8, dtype='int64'),
                    index=pd.MultiIndex.from_product(
