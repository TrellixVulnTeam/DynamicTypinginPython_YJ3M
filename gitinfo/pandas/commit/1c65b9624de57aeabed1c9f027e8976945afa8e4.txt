commit 1c65b9624de57aeabed1c9f027e8976945afa8e4
Author: agijsberts <arjan.gijsberts@gmail.com>
Date:   Sat Mar 15 21:47:04 2014 +0100

    Speed up DatetimeConverter by using Matplotlib's epoch2num when possible.

diff --git a/pandas/tseries/converter.py b/pandas/tseries/converter.py
index d059d229e..ad0bac3be 100644
--- a/pandas/tseries/converter.py
+++ b/pandas/tseries/converter.py
@@ -144,7 +144,10 @@ def _dt_to_float_ordinal(dt):
     preserving hours, minutes, seconds and microseconds.  Return value
     is a :func:`float`.
     """
-    base = dates.date2num(dt)
+    if isinstance(dt, np.ndarray) and com.is_datetime64_ns_dtype(dt):
+        base = dates.epoch2num(dt.astype(np.int64) / 1.0E9)
+    else:
+        base = dates.date2num(dt)
     return base
 
 
diff --git a/pandas/tseries/tests/test_converter.py b/pandas/tseries/tests/test_converter.py
index 29137f9cb..902b9cb54 100644
--- a/pandas/tseries/tests/test_converter.py
+++ b/pandas/tseries/tests/test_converter.py
@@ -5,8 +5,11 @@ import os
 import nose
 
 import numpy as np
+from numpy.testing import assert_almost_equal as np_assert_almost_equal
+from pandas import Timestamp
 from pandas.compat import u
 import pandas.util.testing as tm
+from pandas.tseries.offsets import Second, Milli, Micro
 
 try:
     import pandas.tseries.converter as converter
@@ -46,9 +49,48 @@ class TestDateTimeConverter(tm.TestCase):
         rs = self.dtc.convert('2012-1-1', None, None)
         self.assertEqual(rs, xp)
 
+        rs = self.dtc.convert(Timestamp('2012-1-1'), None, None)
+        self.assertEqual(rs, xp)
+
+    def test_conversion_float(self):
+        decimals = 9
+
+        rs = self.dtc.convert(Timestamp('2012-1-1 01:02:03', tz='UTC'), None, None)
+        xp = converter.dates.date2num(Timestamp('2012-1-1 01:02:03', tz='UTC'))
+        np_assert_almost_equal(rs, xp, decimals)
+
+        rs = self.dtc.convert(Timestamp('2012-1-1 09:02:03', tz='Asia/Hong_Kong'), None, None)
+        np_assert_almost_equal(rs, xp, decimals)
+
+        rs = self.dtc.convert(datetime(2012, 1, 1, 1, 2, 3), None, None)
+        np_assert_almost_equal(rs, xp, decimals)
+
     def test_time_formatter(self):
         self.tc(90000)
 
+    def test_dateindex_conversion(self):
+        decimals = 9
+
+        for freq in ('B', 'L', 'S'):
+            dateindex = tm.makeDateIndex(k = 10, freq = freq)
+            rs = self.dtc.convert(dateindex, None, None)
+            xp = converter.dates.date2num(dateindex)
+            np_assert_almost_equal(rs, xp, decimals)
+
+    def test_resolution(self):
+        def _assert_less(ts1, ts2):
+            val1 = self.dtc.convert(ts1, None, None)
+            val2 = self.dtc.convert(ts2, None, None)
+            if not val1 < val2:
+                raise AssertionError('{0} is not less than {1}.'.format(val1, val2))
+
+        # Matplotlib's time representation using floats cannot distinguish intervals smaller 
+        # than ~10 microsecond in the common range of years. 
+        ts = Timestamp('2012-1-1')
+        _assert_less(ts, ts + Second())
+        _assert_less(ts, ts + Milli())
+        _assert_less(ts, ts + Micro(50))
+
 
 if __name__ == '__main__':
     import nose
