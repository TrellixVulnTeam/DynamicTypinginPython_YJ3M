commit 2e3a3c6e42b54004885ba8d56678ba4fd68a3ca2
Author: jreback <jeff@reback.net>
Date:   Wed Dec 26 14:38:14 2012 -0500

    BUG: performance issue with reconsituting string arrays
         changed to use simpler cython routine to avoid copying

diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 2a2b19dc2..c736c677e 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -21,7 +21,6 @@ from pandas.sparse.array import BlockIndex, IntIndex
 from pandas.tseries.api import PeriodIndex, DatetimeIndex
 from pandas.core.common import adjoin
 from pandas.core.algorithms import match, unique, factorize
-from pandas.core.strings import str_len, _na_map
 from pandas.core.categorical import Categorical
 from pandas.core.common import _asarray_tuplesafe, _try_sort
 from pandas.core.internals import BlockManager, make_block, form_blocks
@@ -1303,7 +1302,7 @@ class DataCol(IndexCol):
         data = block.fillna(nan_rep).values
                     
         # itemsize is the maximum length of a string (along any dimension)
-        itemsize = lib.max_len_string_array(data)
+        itemsize = lib.max_len_string_array(data.flatten())
                     
         # specified min_itemsize?
         if isinstance(min_itemsize, dict):
@@ -1388,7 +1387,7 @@ class DataCol(IndexCol):
 
         # convert nans
         if self.kind == 'string':
-            self.data = _na_map(lambda x: np.nan if x == nan_rep else x, self.data.flatten()).reshape(self.data.shape)
+            self.data = lib.array_replace_from_nan_rep(self.data.flatten(), nan_rep).reshape(self.data.shape)
    
     def get_attr(self):
         """ get the data for this colummn """
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index 395583033..aed81bc43 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -397,7 +397,7 @@ class TestHDFStore(unittest.TestCase):
         expected = concat([ wp, wp2], axis = 2)
         expected = expected.reindex(minor_axis = sorted(expected.minor_axis))
         tm.assert_panel_equal(self.store['s2'], expected)
-        check_col('s1','minor_axis',20)
+        check_col('s2','minor_axis',20)
 
         # apply the wrong field (similar to #1)
         self.store.append('s3', wp, min_itemsize = { 'major_axis' : 20 })
@@ -431,6 +431,19 @@ class TestHDFStore(unittest.TestCase):
         df_new  = DataFrame([[124,'abcdefqhij'], [346, 'abcdefghijklmnopqrtsuvwxyz']])
         self.assertRaises(Exception, self.store.append, 'df_new',df_new)
 
+        # with nans
+        self.store.remove('df')
+        df = tm.makeTimeDataFrame()
+        df['string'] = 'foo'
+        df.ix[1:4,'string'] = np.nan
+        df['string2'] = 'bar'
+        df.ix[4:8,'string2'] = np.nan
+        df['string3'] = 'bah'
+        df.ix[1:,'string3'] = np.nan
+        self.store.append('df',df)
+        result = self.store.select('df')
+        tm.assert_frame_equal(result,df)
+
 
     def test_append_with_data_columns(self):
 
diff --git a/pandas/lib.pyx b/pandas/lib.pyx
index 014d69706..94936db47 100644
--- a/pandas/lib.pyx
+++ b/pandas/lib.pyx
@@ -749,23 +749,37 @@ from cpython cimport (PyDict_New, PyDict_GetItem, PyDict_SetItem,
 
 @cython.boundscheck(False)
 @cython.wraparound(False)
-def max_len_string_array(ndarray arr):
-    """ return the maximum size of elements in a strnig array """
+def max_len_string_array(ndarray[object, ndim=1] arr):
+    """ return the maximum size of elements in a 1-dim string array """
     cdef:
-        int i, n_i, n_j, m, l
+        int i, m, l
+        length = arr.shape[0]
 
-    n_i = arr.shape[0]
     m = 0
-    for i from 0 <= i < n_i:
-        n_j = len(arr[i])
-
-        for j from 0 <= j < n_j:
-        
-            l = len(arr[i,j])
-            if l > m:
-                m = l
+    for i from 0 <= i < length:
+        l = len(arr[i])
+
+        if l > m:
+            m = l
+
     return m
 
+@cython.boundscheck(False)
+@cython.wraparound(False)
+def array_replace_from_nan_rep(ndarray[object, ndim=1] arr, object nan_rep, object replace = None):
+    """ replace the values in the array with replacement if they are nan_rep; return the same array """
+
+    cdef int length = arr.shape[0]
+    cdef int i = 0
+    if replace is None:
+        replace = np.nan
+
+    for i from 0 <= i < length:
+        if arr[i] == nan_rep:
+            arr[i] = replace
+
+    return arr
+
 @cython.boundscheck(False)
 @cython.wraparound(False)
 def create_hdf_rows_2d(ndarray indexer0, 
