commit 5fbffe4d1cd8b422119eb2b86c8a3f58e940f18c
Author: Chang She <chang@lambdafoundry.com>
Date:   Thu Jun 21 12:36:35 2012 -0400

    BUG: sub-second plotting was not working

diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index adf5abdeb..fa351207f 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -10,7 +10,7 @@ from pandas.core.index import Index, MultiIndex
 from pandas.core.series import Series
 from pandas.tseries.index import DatetimeIndex
 from pandas.tseries.period import PeriodIndex
-from pandas.tseries.frequencies import get_period_alias
+from pandas.tseries.frequencies import get_period_alias, get_base_alias
 from pandas.tseries.offsets import DateOffset
 import pandas.tseries.tools as datetools
 
@@ -590,14 +590,19 @@ class LinePlot(MPLPlot):
     def has_ts_index(self):
         from pandas.core.frame import DataFrame
         if isinstance(self.data, (Series, DataFrame)):
-            if isinstance(self.data.index, (DatetimeIndex, PeriodIndex)):
-                has_freq = (hasattr(self.data.index, 'freq') and
-                            self.data.index.freq is not None)
-                has_inferred = (hasattr(self.data.index, 'inferred_freq') and
-                                self.data.index.inferred_freq is not None)
-                return has_freq or has_inferred
+            freq = (getattr(self.data.index, 'freq', None)
+                    or getattr(self.data.index, 'inferred_freq', None))
+            return (freq is not None) and  self._has_dynamic_index_freq(freq)
         return False
 
+    def _has_dynamic_index_freq(self, freq):
+        if isinstance(freq, DateOffset):
+            freq = freq.rule_code
+        else:
+            freq = get_base_alias(freq)
+        freq = get_period_alias(freq)
+        return freq is not None
+
     def _make_plot(self):
         # this is slightly deceptive
         if self.use_index and self.has_ts_index:
diff --git a/pandas/tseries/frequencies.py b/pandas/tseries/frequencies.py
index 8b87f8ccb..433e88e2d 100644
--- a/pandas/tseries/frequencies.py
+++ b/pandas/tseries/frequencies.py
@@ -246,7 +246,16 @@ _offset_to_period_map = {
     'BA' : 'A',
     'AS' : 'A',
     'BAS' : 'A',
-    'MS' : 'M'
+    'MS' : 'M',
+    'D' : 'D',
+    'B' : 'B',
+    'T' : 'T',
+    'S' : 'S',
+    'H' : 'H',
+    'Q' : 'Q',
+    'A' : 'A',
+    'W' : 'W',
+    'M' : 'M'
 }
 
 need_suffix = ['QS', 'BQ', 'BQS', 'AS', 'BA', 'BAS']
@@ -257,9 +266,20 @@ for prefix in need_suffix:
         _offset_to_period_map['%s-%s' % (prefix, m)] = \
             _offset_to_period_map[prefix]
 
+months = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP',
+          'OCT', 'NOV', 'DEC']
+for prefix in ['A', 'Q']:
+    for m in months:
+        alias = '%s-%s' % (prefix, m)
+        _offset_to_period_map[alias] = alias
+
+_days = ['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN']
+for d in _days:
+    _offset_to_period_map['W-%s' % d] = 'W-%s' % d
+
 def get_period_alias(offset_str):
     """ alias to closest period strings BQ->Q etc"""
-    return _offset_to_period_map.get(offset_str, offset_str)
+    return _offset_to_period_map.get(offset_str, None)
 
 _rule_aliases = {
     # Legacy rules that will continue to map to their original values
diff --git a/pandas/tseries/plotting.py b/pandas/tseries/plotting.py
index 8ee78f4df..79823e8c1 100644
--- a/pandas/tseries/plotting.py
+++ b/pandas/tseries/plotting.py
@@ -136,7 +136,6 @@ def _get_default_annual_spacing(nyears):
         (min_spacing, maj_spacing) = (factor * 20, factor * 100)
     return (min_spacing, maj_spacing)
 
-
 def period_break(dates, period):
     """
     Returns the indices where the given period changes.
diff --git a/pandas/tseries/tests/test_plotting.py b/pandas/tseries/tests/test_plotting.py
index 84dadf03b..81f972deb 100644
--- a/pandas/tseries/tests/test_plotting.py
+++ b/pandas/tseries/tests/test_plotting.py
@@ -68,6 +68,14 @@ class TestTSPlot(unittest.TestCase):
         ax = ts.plot(style='k')
         self.assert_((0., 0., 0.) == ax.get_lines()[0].get_color())
 
+    @slow
+    def test_high_freq(self):
+        freaks = ['ms', 'us']
+        for freq in freaks:
+            rng = date_range('1/1/2012', periods=100000, freq=freq)
+            ser = Series(np.random.randn(len(rng)), rng)
+            _check_plot_works(ser.plot)
+
     def test_get_datevalue(self):
         from pandas.tseries.plotting import get_datevalue
         self.assert_(get_datevalue(None, 'D') is None)
@@ -268,6 +276,7 @@ class TestTSPlot(unittest.TestCase):
     @slow
     def test_finder_annual(self):
         import matplotlib.pyplot as plt
+        plt.close('all')
         xp = [1987, 1988, 1990, 1990, 1995, 2020, 2070, 2170]
         for i, nyears in enumerate([5, 10, 19, 49, 99, 199, 599, 1001]):
             rng = period_range('1987', periods=nyears, freq='A')
