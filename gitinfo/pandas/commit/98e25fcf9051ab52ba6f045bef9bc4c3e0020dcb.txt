commit 98e25fcf9051ab52ba6f045bef9bc4c3e0020dcb
Author: Jeffrey Tratner <jeffrey.tratner@gmail.com>
Date:   Sun Jul 28 19:46:21 2013 -0400

    CLN: Add unicode compatibility wrapper for dateutil.
    
    Dateutil < 2.0 doesn't always handle unicode well. This wraps
    `dateutil.parser.parse` and converts unicode to bytes.
    
    +wrap get_filepath_or_buffer in `str`

diff --git a/pandas/compat/__init__.py b/pandas/compat/__init__.py
index 27f5671ca..eaf2928e4 100644
--- a/pandas/compat/__init__.py
+++ b/pandas/compat/__init__.py
@@ -28,6 +28,7 @@ Other items:
 # pylint disable=W0611
 import functools
 import itertools
+from distutils.version import LooseVersion
 from itertools import product
 import sys
 import types
@@ -663,6 +664,15 @@ else:
 # http://stackoverflow.com/questions/4126348
 # Thanks to @martineau at SO
 
+from dateutil import parser as _date_parser
+import dateutil
+if LooseVersion(dateutil.__version__) < '2.0':
+    @functools.wraps(_date_parser.parse)
+    def parse_date(timestr, *args, **kwargs):
+        timestr = bytes(timestr)
+        return _date_parser.parse(timestr, *args, **kwargs)
+else:
+    parse_date = _date_parser.parse
 
 class OrderedDefaultdict(OrderedDict):
 
diff --git a/pandas/core/datetools.py b/pandas/core/datetools.py
index d6da94856..228dc7574 100644
--- a/pandas/core/datetools.py
+++ b/pandas/core/datetools.py
@@ -3,7 +3,6 @@
 from pandas.tseries.tools import *
 from pandas.tseries.offsets import *
 from pandas.tseries.frequencies import *
-from dateutil import parser
 
 day = DateOffset()
 bday = BDay()
diff --git a/pandas/io/common.py b/pandas/io/common.py
index e96c54a9a..a2cf057c8 100644
--- a/pandas/io/common.py
+++ b/pandas/io/common.py
@@ -82,7 +82,7 @@ def get_filepath_or_buffer(filepath_or_buffer, encoding=None):
     """
 
     if _is_url(filepath_or_buffer):
-        req = _urlopen(filepath_or_buffer)
+        req = _urlopen(str(filepath_or_buffer))
         if compat.PY3:  # pragma: no cover
             if encoding:
                 errors = 'strict'
diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index 163171c56..a46a3de60 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -27,6 +27,7 @@ from pandas.util.testing import (assert_almost_equal,
 import pandas.util.testing as tm
 import pandas as pd
 
+from pandas.compat import parse_date
 import pandas.lib as lib
 from pandas import compat
 from pandas.lib import Timestamp
@@ -1254,13 +1255,13 @@ a,1,2,01/01/2009
 b,3,4,01/02/2009
 c,4,5,01/03/2009
 """
-        from dateutil import parser
+        from pandas.compat import parse_date
 
-        result = self.read_csv(StringIO(data), converters={'D': parser.parse})
-        result2 = self.read_csv(StringIO(data), converters={3: parser.parse})
+        result = self.read_csv(StringIO(data), converters={'D': parse_date})
+        result2 = self.read_csv(StringIO(data), converters={3: parse_date})
 
         expected = self.read_csv(StringIO(data))
-        expected['D'] = expected['D'].map(parser.parse)
+        expected['D'] = expected['D'].map(parse_date)
 
         tm.assert_isinstance(result['D'][0], (datetime, Timestamp))
         tm.assert_frame_equal(result, expected)
@@ -1327,13 +1328,12 @@ bar"""
         tm.assert_frame_equal(df, expected)
 
     def test_parse_dates_custom_euroformat(self):
-        from dateutil.parser import parse
         text = """foo,bar,baz
 31/01/2010,1,2
 01/02/2010,1,NA
 02/02/2010,1,2
 """
-        parser = lambda d: parse(d, dayfirst=True)
+        parser = lambda d: parse_date(d, dayfirst=True)
         df = self.read_csv(StringIO(text),
                            names=['time', 'Q', 'NTU'], header=0,
                            index_col=0, parse_dates=True,
@@ -1345,7 +1345,7 @@ bar"""
                              index=exp_index, columns=['Q', 'NTU'])
         tm.assert_frame_equal(df, expected)
 
-        parser = lambda d: parse(d, day_first=True)
+        parser = lambda d: parse_date(d, day_first=True)
         self.assertRaises(Exception, self.read_csv,
                           StringIO(text), skiprows=[0],
                           names=['time', 'Q', 'NTU'], index_col=0,
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index efee73792..0fcdcf344 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -732,7 +732,7 @@ class TestTimeSeries(unittest.TestCase):
     def test_string_na_nat_conversion(self):
         # GH #999, #858
 
-        from dateutil.parser import parse
+        from pandas.compat import parse_date
 
         strings = np.array(['1/1/2000', '1/2/2000', np.nan,
                             '1/4/2000, 12:34:56'], dtype=object)
@@ -742,7 +742,7 @@ class TestTimeSeries(unittest.TestCase):
             if com.isnull(val):
                 expected[i] = iNaT
             else:
-                expected[i] = parse(val)
+                expected[i] = parse_date(val)
 
         result = tslib.array_to_datetime(strings)
         assert_almost_equal(result, expected)
diff --git a/pandas/tseries/tools.py b/pandas/tseries/tools.py
index 9373d3076..3087d5439 100644
--- a/pandas/tseries/tools.py
+++ b/pandas/tseries/tools.py
@@ -238,6 +238,7 @@ def parse_time_string(arg, freq=None, dayfirst=None, yearfirst=None):
         parsed, reso = dateutil_parse(arg, default, dayfirst=dayfirst,
                                       yearfirst=yearfirst)
     except Exception as e:
+        # TODO: allow raise of errors within instead
         raise DateParseError(e)
 
     if parsed is None:
@@ -252,19 +253,25 @@ def dateutil_parse(timestr, default,
     """ lifted from dateutil to get resolution"""
     from dateutil import tz
     import time
+    fobj = StringIO(str(timestr))
 
-    res = DEFAULTPARSER._parse(StringIO(timestr), **kwargs)
+    res = DEFAULTPARSER._parse(fobj, **kwargs)
 
     if res is None:
         raise ValueError("unknown string format")
 
     repl = {}
+    reso = None
     for attr in ["year", "month", "day", "hour",
                  "minute", "second", "microsecond"]:
         value = getattr(res, attr)
         if value is not None:
             repl[attr] = value
             reso = attr
+
+    if reso is None:
+        raise ValueError("Cannot parse date.")
+
     if reso == 'microsecond' and repl['microsecond'] == 0:
         reso = 'second'
 
diff --git a/pandas/tslib.pyx b/pandas/tslib.pyx
index 3439e6bb3..1c12b627f 100644
--- a/pandas/tslib.pyx
+++ b/pandas/tslib.pyx
@@ -28,7 +28,7 @@ cimport cython
 
 from datetime import timedelta, datetime
 from datetime import time as datetime_time
-from dateutil.parser import parse as parse_date
+from pandas.compat import parse_date
 
 cdef extern from "Python.h":
     int PySlice_Check(object)
@@ -852,8 +852,6 @@ def array_to_datetime(ndarray[object] values, raise_=False, dayfirst=False,
         _TSObject _ts
         int64_t m = cast_from_unit(unit,None)
 
-    from dateutil.parser import parse
-
     try:
         result = np.empty(n, dtype='M8[ns]')
         iresult = result.view('i8')
@@ -917,7 +915,7 @@ def array_to_datetime(ndarray[object] values, raise_=False, dayfirst=False,
                         elif raise_:
                             raise
                     try:
-                        result[i] = parse(val, dayfirst=dayfirst)
+                        result[i] = parse_date(val, dayfirst=dayfirst)
                     except Exception:
                         if coerce:
                            iresult[i] = iNaT
@@ -946,7 +944,7 @@ def array_to_datetime(ndarray[object] values, raise_=False, dayfirst=False,
                     oresult[i] = 'NaT'
                     continue
                 try:
-                    oresult[i] = parse(val, dayfirst=dayfirst)
+                    oresult[i] = parse_date(val, dayfirst=dayfirst)
                 except Exception:
                     if raise_:
                         raise
diff --git a/scripts/find_commits_touching_func.py b/scripts/find_commits_touching_func.py
index 0d4ecced9..e4c24b8c3 100755
--- a/scripts/find_commits_touching_func.py
+++ b/scripts/find_commits_touching_func.py
@@ -16,7 +16,7 @@ import logging
 import re
 import os
 from collections import namedtuple
-from dateutil import parser
+from pandas.compat import parse_date
 
 try:
     import sh
@@ -98,7 +98,7 @@ def get_commit_info(c,fmt,sep='\t'):
 
 def get_commit_vitals(c,hlen=HASH_LEN):
     h,s,d= get_commit_info(c,'%H\t%s\t%ci',"\t")
-    return h[:hlen],s,parser.parse(d)
+    return h[:hlen],s,parse_date(d)
 
 def file_filter(state,dirname,fnames):
     if args.dir_masks and not any([re.search(x,dirname) for x in args.dir_masks]):
diff --git a/scripts/git_code_churn.py b/scripts/git_code_churn.py
index 3e999aec1..18c9b244a 100644
--- a/scripts/git_code_churn.py
+++ b/scripts/git_code_churn.py
@@ -1,4 +1,3 @@
-from dateutil import parser
 import subprocess
 import os
 import re
diff --git a/vb_suite/test_perf.py b/vb_suite/test_perf.py
index 92e27ba0f..9eca76a5f 100755
--- a/vb_suite/test_perf.py
+++ b/vb_suite/test_perf.py
@@ -466,7 +466,7 @@ def main():
 def _parse_commit_log(this,repo_path,base_commit=None):
     from vbench.git import _convert_timezones
     from pandas import Series
-    from dateutil import parser as dparser
+    from pandas.compat import parse_date
 
     git_cmd = 'git --git-dir=%s/.git --work-tree=%s ' % (repo_path, repo_path)
     githist = git_cmd + ('log --graph --pretty=format:'+
@@ -488,7 +488,7 @@ def _parse_commit_log(this,repo_path,base_commit=None):
         _, sha, stamp, message, author = line.split('::', 4)
 
         # parse timestamp into datetime object
-        stamp = dparser.parse(stamp)
+        stamp = parse_date(stamp)
 
         shas.append(sha)
         timestamps.append(stamp)
