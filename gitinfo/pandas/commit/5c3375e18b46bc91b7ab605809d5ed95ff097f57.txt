commit 5c3375e18b46bc91b7ab605809d5ed95ff097f57
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Apr 10 00:09:57 2012 -0400

    ENH: factor PR #935 into an external method

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index a1ea2c2be..988a8594f 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -3851,69 +3851,6 @@ class DataFrame(NDFrame):
         return DataFrame(ranks, index=data.index, columns=data.columns)
 
     #----------------------------------------------------------------------
-    # Plotting
-
-
-    def scatter_matrix(self, **kwds):
-        """
-        Draw a matrix of scatter plots.
-
-        Parameters
-        ----------
-        kwds : other plotting keyword arguments
-            To be passed to scatter function
-
-        Examples
-        --------
-        >>> df = DataFrame(np.random.randn(1000, 4), columns=['A','B','C','D'])
-        >>> df.scatter_matrix(alpha=0.2)
-        """
-        import pandas.tools.plotting as gfx
-
-        df = self._get_numeric_data()
-        n = df.columns.size
-        fig, axes = gfx.subplots(nrows=n, ncols=n)
-
-        # no gaps between subplots
-        fig.subplots_adjust(wspace=0, hspace=0)
-
-        for i, a in zip(range(n), df.columns):
-            for j, b in zip(range(n), df.columns):
-                axes[i, j].scatter(df[b], df[a], **kwds)
-                axes[i, j].yaxis.set_visible(False)
-                axes[i, j].xaxis.set_visible(False)
-
-                # setup labels
-                if i == 0 and j % 2 == 1:
-                    axes[i, j].set_xlabel(b, visible=True)
-                    axes[i, j].xaxis.set_visible(True)
-                    axes[i, j].xaxis.set_ticks_position('top')
-                    axes[i, j].xaxis.set_label_position('top')
-                if i == n - 1 and j % 2 == 0:
-                    axes[i, j].set_xlabel(b, visible=True)
-                    axes[i, j].xaxis.set_visible(True)
-                    axes[i, j].xaxis.set_ticks_position('bottom')
-                    axes[i, j].xaxis.set_label_position('bottom')
-                if j == 0 and i % 2 == 0:
-                    axes[i, j].set_ylabel(a, visible=True)
-                    axes[i, j].yaxis.set_visible(True)
-                    axes[i, j].yaxis.set_ticks_position('left')
-                    axes[i, j].yaxis.set_label_position('left')
-                if j == n - 1 and i % 2 == 1:
-                    axes[i, j].set_ylabel(a, visible=True)
-                    axes[i, j].yaxis.set_visible(True)
-                    axes[i, j].yaxis.set_ticks_position('right')
-                    axes[i, j].yaxis.set_label_position('right')
-
-        # ensure {x,y}lim off diagonal are the same as diagonal
-        for i in range(n):
-            for j in range(n):
-                if i != j:
-                    axes[i, j].set_xlim(axes[j, j].get_xlim())
-                    axes[i, j].set_ylim(axes[i, i].get_ylim())
-
-        return axes
-    #----------------------------------------------------------------------
     # Deprecated stuff
 
     def combineAdd(self, other):
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index 702c8b507..24c26d100 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -6,8 +6,64 @@ import pandas.core.common as com
 
 import numpy as np
 
-def scatter_matrix(data):
-    pass
+
+def scatter_matrix(frame, **kwds):
+    """
+    Draw a matrix of scatter plots.
+
+    Parameters
+    ----------
+    kwds : other plotting keyword arguments
+        To be passed to scatter function
+
+    Examples
+    --------
+    >>> df = DataFrame(np.random.randn(1000, 4), columns=['A','B','C','D'])
+    >>> df.scatter_matrix(alpha=0.2)
+    """
+    df = frame._get_numeric_data()
+    n = df.columns.size
+    fig, axes = _subplots(nrows=n, ncols=n)
+
+    # no gaps between subplots
+    fig.subplots_adjust(wspace=0, hspace=0)
+
+    for i, a in zip(range(n), df.columns):
+        for j, b in zip(range(n), df.columns):
+            axes[i, j].scatter(df[b], df[a], **kwds)
+            axes[i, j].yaxis.set_visible(False)
+            axes[i, j].xaxis.set_visible(False)
+
+            # setup labels
+            if i == 0 and j % 2 == 1:
+                axes[i, j].set_xlabel(b, visible=True)
+                axes[i, j].xaxis.set_visible(True)
+                axes[i, j].xaxis.set_ticks_position('top')
+                axes[i, j].xaxis.set_label_position('top')
+            if i == n - 1 and j % 2 == 0:
+                axes[i, j].set_xlabel(b, visible=True)
+                axes[i, j].xaxis.set_visible(True)
+                axes[i, j].xaxis.set_ticks_position('bottom')
+                axes[i, j].xaxis.set_label_position('bottom')
+            if j == 0 and i % 2 == 0:
+                axes[i, j].set_ylabel(a, visible=True)
+                axes[i, j].yaxis.set_visible(True)
+                axes[i, j].yaxis.set_ticks_position('left')
+                axes[i, j].yaxis.set_label_position('left')
+            if j == n - 1 and i % 2 == 1:
+                axes[i, j].set_ylabel(a, visible=True)
+                axes[i, j].yaxis.set_visible(True)
+                axes[i, j].yaxis.set_ticks_position('right')
+                axes[i, j].yaxis.set_label_position('right')
+
+    # ensure {x,y}lim off diagonal are the same as diagonal
+    for i in range(n):
+        for j in range(n):
+            if i != j:
+                axes[i, j].set_xlim(axes[j, j].get_xlim())
+                axes[i, j].set_ylim(axes[i, i].get_ylim())
+
+    return axes
 
 def _gca():
     import matplotlib.pyplot as plt
