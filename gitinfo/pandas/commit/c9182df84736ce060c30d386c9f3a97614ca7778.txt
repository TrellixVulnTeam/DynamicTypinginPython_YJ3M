commit c9182df84736ce060c30d386c9f3a97614ca7778
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Tue Jun 25 09:13:19 2019 -0700

    CLN: Remove never-True Block.is_sparse (#27037)

diff --git a/pandas/core/dtypes/concat.py b/pandas/core/dtypes/concat.py
index a01ba7fc9..242885c7a 100644
--- a/pandas/core/dtypes/concat.py
+++ b/pandas/core/dtypes/concat.py
@@ -73,10 +73,7 @@ def _get_series_result_type(result, objs=None):
             return DataFrame
 
     # otherwise it is a SingleBlockManager (axis = 0)
-    if result._block.is_sparse:
-        return SparseSeries
-    else:
-        return objs[0]._constructor
+    return objs[0]._constructor
 
 
 def _get_frame_result_type(result, objs):
diff --git a/pandas/core/internals/blocks.py b/pandas/core/internals/blocks.py
index 4cc6c8641..92ea93694 100644
--- a/pandas/core/internals/blocks.py
+++ b/pandas/core/internals/blocks.py
@@ -62,9 +62,7 @@ class Block(PandasObject):
     is_bool = False
     is_object = False
     is_categorical = False
-    is_sparse = False
     is_extension = False
-    _box_to_block_values = True
     _can_hold_na = False
     _can_consolidate = True
     _verify_integrity = True
@@ -182,10 +180,6 @@ class Block(PandasObject):
     def to_dense(self):
         return self.values.view()
 
-    @property
-    def _na_value(self):
-        return np.nan
-
     @property
     def fill_value(self):
         return np.nan
@@ -1189,8 +1183,6 @@ class Block(PandasObject):
         # sparse is treated like an ndarray, but needs .get_values() shaping
 
         values = self.values
-        if self.is_sparse:
-            values = self.get_values()
 
         if fill_tuple is None:
             fill_value = self.fill_value
@@ -1411,6 +1403,9 @@ class Block(PandasObject):
         -------
         Block
         """
+        # We should always have ndim == 2 becase Series dispatches to DataFrame
+        assert self.ndim == 2
+
         if self.is_datetimetz:
             # TODO: cleanup this special case.
             # We need to operate on i8 values for datetimetz
@@ -1420,8 +1415,7 @@ class Block(PandasObject):
 
             # TODO: NonConsolidatableMixin shape
             # Usual shape inconsistencies for ExtensionBlocks
-            if self.ndim > 1:
-                values = values[None, :]
+            values = values[None, :]
         else:
             values = self.get_values()
             values, _ = self._try_coerce_args(values, values)
@@ -1433,14 +1427,11 @@ class Block(PandasObject):
             qs = [qs]
 
         if is_empty:
-            if self.ndim == 1:
-                result = self._na_value
-            else:
-                # create the array of na_values
-                # 2d len(values) * len(qs)
-                result = np.repeat(np.array([self.fill_value] * len(qs)),
-                                   len(values)).reshape(len(values),
-                                                        len(qs))
+            # create the array of na_values
+            # 2d len(values) * len(qs)
+            result = np.repeat(np.array([self.fill_value] * len(qs)),
+                               len(values)).reshape(len(values),
+                                                    len(qs))
         else:
             # asarray needed for Sparse, see GH#24600
             # TODO: Why self.values and not values?
@@ -1451,8 +1442,7 @@ class Block(PandasObject):
                                    interpolation=interpolation)
 
             result = np.array(result, copy=False)
-            if self.ndim > 1:
-                result = result.T
+            result = result.T
 
         if orig_scalar and not lib.is_scalar(result):
             # result could be scalar in case with is_empty and self.ndim == 1
@@ -2024,10 +2014,6 @@ class DatetimeLikeBlockMixin:
     def _holder(self):
         return DatetimeArray
 
-    @property
-    def _na_value(self):
-        return tslibs.NaT
-
     @property
     def fill_value(self):
         return tslibs.iNaT
diff --git a/pandas/core/internals/concat.py b/pandas/core/internals/concat.py
index d92c15e1d..8f699ae24 100644
--- a/pandas/core/internals/concat.py
+++ b/pandas/core/internals/concat.py
@@ -187,8 +187,6 @@ class JoinUnit:
                     pass
                 elif getattr(self.block, 'is_categorical', False):
                     pass
-                elif getattr(self.block, 'is_sparse', False):
-                    pass
                 elif getattr(self.block, 'is_extension', False):
                     pass
                 else:
diff --git a/pandas/core/internals/managers.py b/pandas/core/internals/managers.py
index 592c385dd..26b6920c1 100644
--- a/pandas/core/internals/managers.py
+++ b/pandas/core/internals/managers.py
@@ -102,16 +102,11 @@ class BlockManager(PandasObject):
         self.blocks = tuple(blocks)  # type: Tuple[Block, ...]
 
         for block in blocks:
-            if block.is_sparse:
-                if len(block.mgr_locs) != 1:
-                    raise AssertionError("Sparse block refers to multiple "
-                                         "items")
-            else:
-                if self.ndim != block.ndim:
-                    raise AssertionError(
-                        'Number of Block dimensions ({block}) must equal '
-                        'number of axes ({self})'.format(block=block.ndim,
-                                                         self=self.ndim))
+            if self.ndim != block.ndim:
+                raise AssertionError(
+                    'Number of Block dimensions ({block}) must equal '
+                    'number of axes ({self})'.format(block=block.ndim,
+                                                     self=self.ndim))
 
         if do_integrity_check:
             self._verify_integrity()
@@ -966,7 +961,7 @@ class BlockManager(PandasObject):
         """
         block = self.blocks[self._blknos[i]]
         values = block.iget(self._blklocs[i])
-        if not fastpath or not block._box_to_block_values or values.ndim != 1:
+        if not fastpath or values.ndim != 1:
             return values
 
         # fastpath shortcut for select a single-dim from a 2-dim BM
@@ -1820,8 +1815,7 @@ def _stack_arrays(tuples, dtype):
 
 
 def _interleaved_dtype(
-        blocks: List[Block]
-) -> Optional[Union[np.dtype, ExtensionDtype]]:
+        blocks: List[Block]) -> Optional[Union[np.dtype, ExtensionDtype]]:
     """Find the common dtype for `blocks`.
 
     Parameters
