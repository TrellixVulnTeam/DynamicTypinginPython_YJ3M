commit f451a2386148b1d7f89bc1aabad78cc776c42900
Author: William Ayd <will_ayd@innobi.io>
Date:   Wed Jul 1 08:22:48 2020 -0700

    Assorted ujson Cleanups (#35064)

diff --git a/pandas/_libs/src/ujson/python/objToJSON.c b/pandas/_libs/src/ujson/python/objToJSON.c
index 1de964276..e841f0048 100644
--- a/pandas/_libs/src/ujson/python/objToJSON.c
+++ b/pandas/_libs/src/ujson/python/objToJSON.c
@@ -324,19 +324,6 @@ static npy_float64 total_seconds(PyObject *td) {
     return double_val;
 }
 
-static PyObject *get_item(PyObject *obj, Py_ssize_t i) {
-    PyObject *tmp = PyLong_FromSsize_t(i);
-    PyObject *ret;
-
-    if (tmp == 0) {
-        return 0;
-    }
-    ret = PyObject_GetItem(obj, tmp);
-    Py_DECREF(tmp);
-
-    return ret;
-}
-
 static char *PyBytesToUTF8(JSOBJ _obj, JSONTypeContext *Py_UNUSED(tc),
                            size_t *_outLen) {
     PyObject *obj = (PyObject *)_obj;
@@ -704,7 +691,6 @@ void PdBlock_iterBegin(JSOBJ _obj, JSONTypeContext *tc) {
     PdBlockContext *blkCtxt;
     NpyArrContext *npyarr;
     Py_ssize_t i;
-    PyArray_Descr *dtype;
     NpyIter *iter;
     NpyIter_IterNextFunc *iternext;
     npy_int64 **dataptr;
@@ -712,10 +698,6 @@ void PdBlock_iterBegin(JSOBJ _obj, JSONTypeContext *tc) {
     npy_intp idx;
 
     PRINTMARK();
-
-    i = 0;
-    blocks = NULL;
-    dtype = PyArray_DescrFromType(NPY_INT64);
     obj = (PyObject *)_obj;
 
     GET_TC(tc)->iterGetName = GET_TC(tc)->transpose
@@ -726,7 +708,7 @@ void PdBlock_iterBegin(JSOBJ _obj, JSONTypeContext *tc) {
     if (!blkCtxt) {
         PyErr_NoMemory();
         GET_TC(tc)->iterNext = NpyArr_iterNextNone;
-        goto BLKRET;
+        return;
     }
     GET_TC(tc)->pdblock = blkCtxt;
 
@@ -739,7 +721,7 @@ void PdBlock_iterBegin(JSOBJ _obj, JSONTypeContext *tc) {
         blkCtxt->cindices = NULL;
 
         GET_TC(tc)->iterNext = NpyArr_iterNextNone;
-        goto BLKRET;
+        return;
     }
 
     blkCtxt->npyCtxts =
@@ -747,30 +729,30 @@ void PdBlock_iterBegin(JSOBJ _obj, JSONTypeContext *tc) {
     if (!blkCtxt->npyCtxts) {
         PyErr_NoMemory();
         GET_TC(tc)->iterNext = NpyArr_iterNextNone;
-        goto BLKRET;
-    }
-    for (i = 0; i < blkCtxt->ncols; i++) {
-        blkCtxt->npyCtxts[i] = NULL;
+        return;
     }
 
     blkCtxt->cindices = PyObject_Malloc(sizeof(int) * blkCtxt->ncols);
     if (!blkCtxt->cindices) {
         PyErr_NoMemory();
         GET_TC(tc)->iterNext = NpyArr_iterNextNone;
-        goto BLKRET;
+        return;
     }
 
     blocks = get_sub_attr(obj, "_mgr", "blocks");
     if (!blocks) {
         GET_TC(tc)->iterNext = NpyArr_iterNextNone;
-        goto BLKRET;
+        return;
+    } else if (!PyTuple_Check(blocks)) {
+      PyErr_SetString(PyExc_TypeError, "blocks must be a tuple!");
+      goto BLKRET;
     }
 
     // force transpose so each NpyArrContext strides down its column
     GET_TC(tc)->transpose = 1;
 
     for (i = 0; i < PyObject_Length(blocks); i++) {
-        block = get_item(blocks, i);
+        block = PyTuple_GET_ITEM(blocks, i);
         if (!block) {
             GET_TC(tc)->iterNext = NpyArr_iterNextNone;
             goto BLKRET;
@@ -779,7 +761,6 @@ void PdBlock_iterBegin(JSOBJ _obj, JSONTypeContext *tc) {
         tmp = PyObject_CallMethod(block, "get_block_values_for_json", NULL);
         if (!tmp) {
             ((JSONObjectEncoder *)tc->encoder)->errorMsg = "";
-            Py_DECREF(block);
             GET_TC(tc)->iterNext = NpyArr_iterNextNone;
             goto BLKRET;
         }
@@ -787,23 +768,20 @@ void PdBlock_iterBegin(JSOBJ _obj, JSONTypeContext *tc) {
         values = PyArray_Transpose((PyArrayObject *)tmp, NULL);
         Py_DECREF(tmp);
         if (!values) {
-            Py_DECREF(block);
             GET_TC(tc)->iterNext = NpyArr_iterNextNone;
             goto BLKRET;
         }
 
         locs = (PyArrayObject *)get_sub_attr(block, "mgr_locs", "as_array");
         if (!locs) {
-            Py_DECREF(block);
             Py_DECREF(values);
             GET_TC(tc)->iterNext = NpyArr_iterNextNone;
             goto BLKRET;
         }
 
         iter = NpyIter_New(locs, NPY_ITER_READONLY, NPY_KEEPORDER,
-                           NPY_NO_CASTING, dtype);
+                           NPY_NO_CASTING, NULL);
         if (!iter) {
-            Py_DECREF(block);
             Py_DECREF(values);
             Py_DECREF(locs);
             GET_TC(tc)->iterNext = NpyArr_iterNextNone;
@@ -812,7 +790,6 @@ void PdBlock_iterBegin(JSOBJ _obj, JSONTypeContext *tc) {
         iternext = NpyIter_GetIterNext(iter, NULL);
         if (!iternext) {
             NpyIter_Deallocate(iter);
-            Py_DECREF(block);
             Py_DECREF(values);
             Py_DECREF(locs);
             GET_TC(tc)->iterNext = NpyArr_iterNextNone;
@@ -846,15 +823,13 @@ void PdBlock_iterBegin(JSOBJ _obj, JSONTypeContext *tc) {
         } while (iternext(iter));
 
         NpyIter_Deallocate(iter);
-        Py_DECREF(block);
         Py_DECREF(values);
         Py_DECREF(locs);
     }
     GET_TC(tc)->npyarr = blkCtxt->npyCtxts[0];
 
 BLKRET:
-    Py_XDECREF(dtype);
-    Py_XDECREF(blocks);
+    Py_DECREF(blocks);
 }
 
 void PdBlock_iterEnd(JSOBJ obj, JSONTypeContext *tc) {
