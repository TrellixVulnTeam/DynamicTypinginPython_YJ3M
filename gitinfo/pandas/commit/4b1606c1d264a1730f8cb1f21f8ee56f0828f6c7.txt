commit 4b1606c1d264a1730f8cb1f21f8ee56f0828f6c7
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Apr 27 19:43:51 2012 -0400

    ENH: start on is_subperiod function, still more for #1109

diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 748dd4300..e35110d0e 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -160,8 +160,8 @@ class PandasObject(Picklable):
         return asfreq(self, freq, method=method, how=how)
 
     def resample(self, rule, how='mean', axis=0, as_index=True,
-                 fill_method=None, closed='right', label='right', kind=None,
-                 loffset=None):
+                 fill_method=None, closed='right', label='right',
+                 convention=None, kind=None, loffset=None):
         """
         Convenience method for frequency conversion and resampling of regular
         time-series data.
@@ -176,6 +176,8 @@ class PandasObject(Picklable):
             Which side of bin interval is closed
         label : {'right', 'left'}, default 'right'
             Which bin edge label to label bucket with
+        convention : {'start', 'end', 's', 'e'}
+
         as_index : see synonymous argument of groupby
         loffset : timedelta
             Adjust the resampled time labels
diff --git a/pandas/tseries/frequencies.py b/pandas/tseries/frequencies.py
index 89fdc344d..894abd884 100644
--- a/pandas/tseries/frequencies.py
+++ b/pandas/tseries/frequencies.py
@@ -819,6 +819,55 @@ def _maybe_add_count(base, count):
     else:
         return base
 
+def _is_subperiod(source, target):
+    """
+    Returns True if conversion/resampling is possible between source and target
+    frequencies
+
+    Parameters
+    ----------
+    source : string
+        Frequency converting from
+    target : string
+        Frequency converting to
+
+    Returns
+    -------
+    is_subperiod : boolean
+    """
+    target = target.upper()
+    source = source.upper()
+    if _is_annual(target):
+        if _is_weekly(source):
+            raise ValueError('Weekly rules do not properly segment '
+                             'a yearly span')
+        if _is_annual(source) and source != target:
+            raise ValueError('Can only be same year end')
+        return source in ['D', 'B', 'M', 'H', 'T', 'S']
+    elif _is_quarterly(target):
+        pass
+        return source in ['D', 'B', 'M', 'H', 'T', 'S']
+    elif target == 'M':
+        pass
+        return source in ['D', 'B', 'H', 'T', 'S']
+    elif _is_weekly(target):
+        return source in ['D', 'B', 'H', 'T', 'S']
+    elif target == 'B':
+        return source in ['B', 'H', 'T', 'S']
+    elif target == 'D':
+        return source in ['D', 'H', 'T', 'S']
+
+
+def _is_annual(rule):
+    return rule.upper().startswith('A-')
+
+
+def _is_quarterly(rule):
+    return rule.upper().startswith('Q-')
+
+
+def _is_weekly(rule):
+    return rule.upper().startswith('W-')
 
 
 _weekday_rule_aliases = {
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index 1234685cf..58c5fd3b2 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -277,7 +277,6 @@ class TestResamplePeriodIndex(unittest.TestCase):
 
     def test_basic_resample(self):
         ts = _simple_pts('1/1/1990', '6/30/1995', freq='M')
-
         result = ts.resample('a-dec')
         expected = ts.groupby(ts.index.year).mean()
         expected.index = period_range('1/1/1990', '6/30/1995',
@@ -285,7 +284,14 @@ class TestResamplePeriodIndex(unittest.TestCase):
         assert_series_equal(result, expected)
 
     def test_upsample_ffill(self):
-        pass
+        ts = _simple_pts('1/1/1990', '6/30/1995', freq='M')
+        result = ts.resample('a-dec')
+
+        resampled = result.resample('D', fill_method='ffill',
+                                    convention='end')
+
+        # expected = result.
+
 
 class TestTimeGrouper(unittest.TestCase):
 
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 476a22072..16a430826 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -524,10 +524,12 @@ class TestTimeSeries(unittest.TestCase):
         pts = ts.to_period('M')
         self.assert_(pts.index.equals(exp.index.asfreq('M')))
 
+
 def _simple_ts(start, end, freq='D'):
     rng = date_range(start, end, freq=freq)
     return Series(np.random.randn(len(rng)), index=rng)
 
+
 def _skip_if_no_pytz():
     try:
         import pytz
@@ -535,6 +537,7 @@ def _skip_if_no_pytz():
         import nose
         raise nose.SkipTest
 
+
 class TestLegacySupport(unittest.TestCase):
 
     @classmethod
