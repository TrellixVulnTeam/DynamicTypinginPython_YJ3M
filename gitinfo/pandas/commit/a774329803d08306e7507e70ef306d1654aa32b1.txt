commit a774329803d08306e7507e70ef306d1654aa32b1
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Aug 16 11:11:05 2011 -0400

    TST: test coverage in DataFrame and _count_level

diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index b161cc490..bbde18deb 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2517,6 +2517,36 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
                         index=range(4), columns=range(5))
         result = dm.cumsum()
 
+    #----------------------------------------------------------------------
+    # Stacking / unstacking
+
+    def test_stack_unstack(self):
+        stacked = self.frame.stack()
+        stacked_df = DataFrame({'foo' : stacked, 'bar' : stacked})
+
+        unstacked = stacked.unstack()
+        unstacked_df = stacked_df.unstack()
+
+        assert_frame_equal(unstacked, self.frame)
+        assert_frame_equal(unstacked_df['bar'], self.frame)
+
+        unstacked_cols = stacked.unstack(0)
+        unstacked_cols_df = stacked_df.unstack(0)
+        assert_frame_equal(unstacked_cols.T, self.frame)
+        assert_frame_equal(unstacked_cols_df['bar'].T, self.frame)
+
+    def test_delevel(self):
+        stacked = self.frame.stack()[::2]
+        stacked = DataFrame({'foo' : stacked, 'bar' : stacked})
+        deleveled = stacked.delevel()
+
+        for i, (lev, lab) in enumerate(zip(stacked.index.levels,
+                                           stacked.index.labels)):
+            values = lev.take(lab)
+            assert_almost_equal(values, deleveled['label_%d' % i])
+
+        self.assertRaises(Exception, self.frame.delevel)
+
     #----------------------------------------------------------------------
     # Tests to cope with refactored internals
 
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index de9868238..d08745c5b 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -164,6 +164,16 @@ class TestDataFrameMultiLevel(unittest.TestCase):
         assert_frame_equal(sorted_before.drop([('foo', 'three')], axis=1),
                            sorted_after.drop([('foo', 'three')], axis=1))
 
+    def test_count_level(self):
+        def _check_counts(frame, axis=0):
+            index = frame._get_axis(axis)
+            for i in range(index.nlevels):
+                result = frame.count(axis=axis, level=i)
+                expected = frame.groupby(axis=axis, level=i).count(axis=axis)
+
+        _check_counts(self.frame)
+        _check_counts(self.ymd)
+
     def test_alignment(self):
         pass
 
