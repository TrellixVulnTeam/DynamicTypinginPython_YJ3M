commit 527f64a8a5cd9511f907732a8d9910aae71f8450
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Sep 28 19:54:40 2011 -0400

    ENH: speed optimization / tweaks in merging

diff --git a/pandas/core/index.py b/pandas/core/index.py
index e41ca6bc7..4fe8c89d8 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -425,11 +425,11 @@ class Index(np.ndarray):
 
         if return_indexers:
             if join_index is self:
-                lindexer = np.arange(len(join_index), dtype=np.int32)
+                lindexer = None
             else:
                 lindexer = self.get_indexer(join_index)
             if join_index is other:
-                rindexer = np.arange(len(join_index), dtype=np.int32)
+                rindexer = None
             else:
                 rindexer = other.get_indexer(join_index)
             return join_index, lindexer, rindexer
@@ -620,20 +620,15 @@ class Int64Index(Index):
             return Index.join(self, other, how=how,
                               return_indexers=return_indexers)
 
-        # if return_indexers:
-        #     return join_index, lidx, ridx
-        # else:
-        #     return join_index
-
     def _join_monotonic(self, other, how='left', return_indexers=False):
         if how == 'left':
             join_index = self
-            lidx = np.arange(len(self), dtype=np.int32)
+            lidx = None
             ridx = lib.left_join_indexer(self, other)
         elif how == 'right':
             join_index = other
-            ridx = np.arange(len(other), dtype=np.int32)
             lidx = lib.left_join_indexer(other, self)
+            ridx = None
         elif how == 'inner':
             join_index, lidx, ridx = lib.inner_join_indexer(self, other)
             join_index = Int64Index(join_index)
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index f7a3fb09c..103ba5f85 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -905,16 +905,16 @@ def join_managers(left, right, axis=1, how='left'):
 
     N = len(join_index)
 
-    if join_index is laxis:
-        lmask = np.zeros(N, dtype=np.bool)
-        lneed_masking = False
+    if lindexer is None:
+        lmask = None
+        lneed_masking = None
     else:
         lmask = lindexer == -1
         lneed_masking = lmask.any()
 
-    if join_index is raxis:
-        rmask = np.zeros(N, dtype=np.bool)
-        rneed_masking = False
+    if rindexer is None:
+        rmask = None
+        rneed_masking = None
     else:
         rmask = rindexer == -1
         rneed_masking = rmask.any()
@@ -951,14 +951,20 @@ def join_managers(left, right, axis=1, how='left'):
         elif klass in left_blockmap:
             # only take necessary
             blk = left_blockmap[klass]
-            res_blk = blk.reindex_axis(lindexer, lmask, lneed_masking,
-                                       axis=axis)
+            if lindexer is None:
+                res_blk = blk.copy()
+            else:
+                res_blk = blk.reindex_axis(lindexer, lmask, lneed_masking,
+                                           axis=axis)
             res_blk.ref_items = result_items
         elif klass in right_blockmap:
             # only take necessary
             blk = right_blockmap[klass]
-            res_blk = blk.reindex_axis(lindexer, lmask, lneed_masking,
-                                       axis=axis)
+            if rindexer is None:
+                res_blk = blk.copy()
+            else:
+                res_blk = blk.reindex_axis(lindexer, lmask, lneed_masking,
+                                           axis=axis)
             res_blk.ref_items = result_items
         else:
             # not found in either
@@ -991,7 +997,8 @@ def _maybe_upcast_blocks(blocks, needs_masking):
 
 def _merge_blocks_fast(left, right, lindexer, lmask, lneed_masking,
                        rindexer, rmask, rneed_masking, axis=1):
-    n = len(lindexer)
+
+    n = left.values.shape[axis] if lindexer is None else len(lindexer)
     lk = len(left.items)
     rk = len(right.items)
 
@@ -1000,9 +1007,18 @@ def _merge_blocks_fast(left, right, lindexer, lmask, lneed_masking,
     out_shape[axis] = n
 
     out = np.empty(out_shape, dtype=left.values.dtype)
-    common.take_fast(left.values, lindexer, lmask, lneed_masking,
-                     axis=axis, out=out[:lk])
-    common.take_fast(right.values, rindexer, rmask, rneed_masking,
-                     axis=axis, out=out[lk:])
 
+    if lindexer is None:
+        common.take_fast(left.values, np.arange(n, dtype=np.int32),
+                         None, False, axis=axis, out=out[:lk])
+    else:
+        common.take_fast(left.values, lindexer, lmask, lneed_masking,
+                         axis=axis, out=out[:lk])
+
+    if rindexer is None:
+        common.take_fast(right.values, np.arange(n, dtype=np.int32),
+                         None, False, axis=axis, out=out[lk:])
+    else:
+        common.take_fast(right.values, rindexer, rmask, rneed_masking,
+                         axis=axis, out=out[lk:])
     return out
diff --git a/scripts/bench_join.py b/scripts/bench_join.py
index c214d0901..1a82f8a17 100644
--- a/scripts/bench_join.py
+++ b/scripts/bench_join.py
@@ -5,7 +5,7 @@ from copy import deepcopy
 import time
 
 n = 1000000
-K = 5
+K = 1
 pct_overlap = 0.2
 
 a = np.arange(n, dtype=np.int64)
@@ -133,11 +133,10 @@ def join(a, b, av, bv, how="left"):
     f = func_dict[how]
     return f(a, b, av, bv)
 
-def bench_python(n=100000, pct_overlap=0.20):
+def bench_python(n=100000, pct_overlap=0.20, K=1):
     import gc
     ns = [2, 3, 4, 5, 6]
     iterations = 50
-    K = 1
     pct_overlap = 0.2
     kinds = ['outer', 'left', 'inner']
 
