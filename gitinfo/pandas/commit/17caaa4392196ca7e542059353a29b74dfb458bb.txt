commit 17caaa4392196ca7e542059353a29b74dfb458bb
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Mar 5 22:40:41 2012 -0500

    BUG: fix bug causing improper nan -> int cast in #846

diff --git a/pandas/core/series.py b/pandas/core/series.py
index 40d22e10d..f5b1ee8c8 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -266,6 +266,9 @@ class Series(np.ndarray, generic.PandasObject):
             except TypeError:
                 data = [data.get(i, nan) for i in index]
 
+        if dtype is not None:
+            dtype = np.dtype(dtype)
+
         subarr = _sanitize_array(data, index, dtype, copy,
                                  raise_cast_failure=True)
 
@@ -2463,13 +2466,35 @@ def _sanitize_array(data, index, dtype=None, copy=False,
         data = ma.copy(data)
         data[mask] = np.nan
 
-    try:
-        subarr = np.array(data, dtype=dtype, copy=copy)
-    except (ValueError, TypeError):
-        if dtype and raise_cast_failure:
-            raise
-        else:  # pragma: no cover
-            subarr = np.array(data, dtype=object)
+    def _try_cast(arr):
+        try:
+            subarr = np.array(data, dtype=dtype, copy=copy)
+        except (ValueError, TypeError):
+            if dtype is not None and raise_cast_failure:
+                raise
+            else:  # pragma: no cover
+                subarr = np.array(data, dtype=object, copy=copy)
+        return subarr
+
+    # GH #846
+    if isinstance(data, np.ndarray):
+        if dtype is not None:
+            # possibility of nan -> garbage
+            if com.is_float_dtype(data.dtype) and com.is_integer_dtype(dtype):
+                if not isnull(data).any():
+                    subarr = _try_cast(data)
+                elif copy:
+                    subarr = data.copy()
+                else:
+                    subarr = data
+            else:
+                subarr = _try_cast(data)
+        elif copy:
+            subarr = data.copy()
+        else:
+            subarr = data
+    else:
+        subarr = _try_cast(data)
 
     if subarr.ndim == 0:
         if isinstance(data, list):  # pragma: no cover
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index edcc84b1a..1d1c0a09d 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1691,6 +1691,11 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
                           {'A' : self.frame['A'],
                            'B' : list(self.frame['B'])[:-2]})
 
+    def test_constructor_miscast_na_int_dtype(self):
+        df = DataFrame([[np.nan, 1], [1, 0]], dtype=np.int64)
+        expected = DataFrame([[np.nan, 1], [1, 0]])
+        assert_frame_equal(df, expected)
+
     def test_astype(self):
         casted = self.frame.astype(int)
         expected = DataFrame(self.frame.values.astype(int),
