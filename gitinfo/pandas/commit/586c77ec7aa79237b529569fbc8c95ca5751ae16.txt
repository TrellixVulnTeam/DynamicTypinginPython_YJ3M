commit 586c77ec7aa79237b529569fbc8c95ca5751ae16
Author: Guillaume Gay <guillaume@damcb.com>
Date:   Sun Aug 30 14:47:22 2015 +0200

    shut down warnings in the whats new files

diff --git a/doc/source/api.rst b/doc/source/api.rst
index 5fc2790d1..2f4fd860f 100644
--- a/doc/source/api.rst
+++ b/doc/source/api.rst
@@ -437,6 +437,7 @@ Reshaping, sorting
    Series.reorder_levels
    Series.sort_values
    Series.sort_index
+   Series.sortlevel
    Series.swaplevel
    Series.unstack
    Series.searchsorted
diff --git a/doc/source/categorical.rst b/doc/source/categorical.rst
index 0c6375920..3c9b538ca 100644
--- a/doc/source/categorical.rst
+++ b/doc/source/categorical.rst
@@ -280,9 +280,9 @@ meaning and certain operations are possible. If the categorical is unordered, ``
 .. ipython:: python
 
     s = pd.Series(pd.Categorical(["a","b","c","a"], ordered=False))
-    s.sort()
+    s.sort_values(inplace=True)
     s = pd.Series(["a","b","c","a"]).astype('category', ordered=True)
-    s.sort()
+    s.sort_values(inplace=True)
     s
     s.min(), s.max()
 
@@ -302,7 +302,7 @@ This is even true for strings and numeric data:
     s = pd.Series([1,2,3,1], dtype="category")
     s = s.cat.set_categories([2,3,1], ordered=True)
     s
-    s.sort()
+    s.sort_values(inplace=True)
     s
     s.min(), s.max()
 
@@ -320,7 +320,7 @@ necessarily make the sort order the same as the categories order.
     s = pd.Series([1,2,3,1], dtype="category")
     s = s.cat.reorder_categories([2,3,1], ordered=True)
     s
-    s.sort()
+    s.sort_values(inplace=True)
     s
     s.min(), s.max()
 
@@ -349,14 +349,14 @@ The ordering of the categorical is determined by the ``categories`` of that colu
 
    dfs = pd.DataFrame({'A' : pd.Categorical(list('bbeebbaa'), categories=['e','a','b'], ordered=True),
                        'B' : [1,2,1,2,2,1,2,1] })
-   dfs.sort(['A', 'B'])
+   dfs.sort_values(by=['A', 'B'])
 
 Reordering the ``categories`` changes a future sort.
 
 .. ipython:: python
 
    dfs['A'] = dfs['A'].cat.reorder_categories(['a','b','e'])
-   dfs.sort(['A','B'])
+   dfs.sort_values(by=['A','B'])
 
 Comparisons
 -----------
diff --git a/doc/source/whatsnew/v0.13.1.txt b/doc/source/whatsnew/v0.13.1.txt
index 64ca1612f..349acf508 100644
--- a/doc/source/whatsnew/v0.13.1.txt
+++ b/doc/source/whatsnew/v0.13.1.txt
@@ -120,7 +120,8 @@ API changes
   equal. (:issue:`5283`) See also :ref:`the docs<basics.equals>` for a motivating example.
 
   .. ipython:: python
-
+      :okwarning:
+      
       df = DataFrame({'col':['foo', 0, np.nan]})
       df2 = DataFrame({'col':[np.nan, 0, 'foo']}, index=[2,1,0])
       df.equals(df2)
diff --git a/doc/source/whatsnew/v0.15.0.txt b/doc/source/whatsnew/v0.15.0.txt
index 01dc8bb08..a33e0f199 100644
--- a/doc/source/whatsnew/v0.15.0.txt
+++ b/doc/source/whatsnew/v0.15.0.txt
@@ -67,7 +67,8 @@ For full docs, see the :ref:`categorical introduction <categorical>` and the
 :ref:`API documentation <api.categorical>`.
 
 .. ipython:: python
-
+    :okwarning:
+    
     df = DataFrame({"id":[1,2,3,4,5,6], "raw_grade":['a', 'b', 'b', 'a', 'a', 'e']})
 
     df["grade"] = df["raw_grade"].astype("category")
diff --git a/doc/source/whatsnew/v0.7.3.txt b/doc/source/whatsnew/v0.7.3.txt
index afb4b8faa..21aa16e5f 100644
--- a/doc/source/whatsnew/v0.7.3.txt
+++ b/doc/source/whatsnew/v0.7.3.txt
@@ -83,6 +83,7 @@ When calling ``apply`` on a grouped Series, the return value will also be a
 Series, to be more consistent with the ``groupby`` behavior with DataFrame:
 
 .. ipython:: python
+    :okwarning:
 
     df = DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',
                         'foo', 'bar', 'foo', 'foo'],
@@ -93,4 +94,3 @@ Series, to be more consistent with the ``groupby`` behavior with DataFrame:
     grouped = df.groupby('A')['C']
     grouped.describe()
     grouped.apply(lambda x: x.order()[-2:]) # top 2 values
-
diff --git a/doc/source/whatsnew/v0.9.1.txt b/doc/source/whatsnew/v0.9.1.txt
index 6718a049a..ce7439b8e 100644
--- a/doc/source/whatsnew/v0.9.1.txt
+++ b/doc/source/whatsnew/v0.9.1.txt
@@ -21,6 +21,7 @@ New features
     specified in a per-column manner to support multiple sort orders (:issue:`928`)
 
     .. ipython:: python
+        :okwarning:
 
         df = DataFrame(np.random.randint(0, 2, (6, 3)), columns=['A', 'B', 'C'])
 
@@ -66,7 +67,7 @@ New features
 	.. ipython:: python
 
 	   df[df>0]
-	
+
 	   df.where(df>0)
 
 	   df.where(df>0,-df)
