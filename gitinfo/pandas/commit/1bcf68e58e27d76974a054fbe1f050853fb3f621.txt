commit 1bcf68e58e27d76974a054fbe1f050853fb3f621
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Oct 21 22:21:30 2011 -0400

    BUG: small API change in Series.clip arg order, enable np.clip to be used also, GH #272

diff --git a/RELEASE.rst b/RELEASE.rst
index 24d4768fb..8ffdaa447 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -55,6 +55,9 @@ feedback on the library.
   - Deprecated `nanRep` argument in various `to_string` and `to_csv` functions
     in favor of `na_rep`. Will be removed in 0.6 (GH #275)
   - Renamed `delimiter` to `sep` in `DataFrame.from_csv` for consistency
+  - Changed order of `Series.clip` arguments to match those of `numpy.clip` and
+    added (unimplemented) `out` argument so `numpy.clip` can be called on a
+    Series (GH #272)
   - Series functions renamed (and thus deprecated) in 0.4 series have been
     removed:
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 840e03e32..511fd7925 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -967,7 +967,7 @@ copy : boolean, default False
         """
         return self.corr(self.shift(1))
 
-    def clip(self, upper=None, lower=None):
+    def clip(self, lower=None, upper=None, out=None):
         """
         Trim values at input threshold(s)
 
@@ -980,6 +980,9 @@ copy : boolean, default False
         -------
         clipped : Series
         """
+        if out is not None:  # pragma: no cover
+            raise Exception('out argument is not supported yet')
+
         result = self
         if lower is not None:
             result = result.clip_lower(lower)
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 08c6826f8..c14d04d06 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -843,6 +843,11 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         self.assertEqual(self.ts.clip(lower=val).min(), val)
         self.assertEqual(self.ts.clip(upper=val).max(), val)
 
+        result = self.ts.clip(-0.5, 0.5)
+        expected = np.clip(self.ts, -0.5, 0.5)
+        assert_series_equal(result, expected)
+        self.assert_(isinstance(expected, Series))
+
     def test_valid(self):
         ts = self.ts.copy()
         ts[::2] = np.NaN
