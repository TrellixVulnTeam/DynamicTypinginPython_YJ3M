commit 8ff488ac1078c49a0db23562db41dae9e41b053b
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Wed Jun 12 06:13:52 2019 -0500

    REF: remove unreachable code in core.internals (#26800)

diff --git a/pandas/core/internals/blocks.py b/pandas/core/internals/blocks.py
index f86ef40a9..f9178959d 100644
--- a/pandas/core/internals/blocks.py
+++ b/pandas/core/internals/blocks.py
@@ -417,17 +417,14 @@ class Block(PandasObject):
         new_values = self.values
 
         def make_a_block(nv, ref_loc):
-            if isinstance(nv, Block):
-                block = nv
-            elif isinstance(nv, list):
+            if isinstance(nv, list):
+                assert len(nv) == 1, nv
+                assert isinstance(nv[0], Block)
                 block = nv[0]
             else:
                 # Put back the dimension that was taken from it and make
                 # a block out of the result.
-                try:
-                    nv = _block_shape(nv, ndim=self.ndim)
-                except (AttributeError, NotImplementedError):
-                    pass
+                nv = _block_shape(nv, ndim=self.ndim)
                 block = self.make_block(values=nv,
                                         placement=ref_loc)
             return block
@@ -2629,10 +2626,10 @@ class ObjectBlock(Block):
             values = fn(v.ravel(), **fn_kwargs)
             try:
                 values = values.reshape(shape)
-                values = _block_shape(values, ndim=self.ndim)
             except (AttributeError, NotImplementedError):
                 pass
 
+            values = _block_shape(values, ndim=self.ndim)
             return values
 
         if by_item and not self._is_single_block:
@@ -3168,8 +3165,6 @@ def _putmask_smart(v, m, n):
     # n should be the length of the mask or a scalar here
     if not is_list_like(n):
         n = np.repeat(n, len(m))
-    elif isinstance(n, np.ndarray) and n.ndim == 0:  # numpy scalar
-        n = np.repeat(np.array(n, ndmin=1), len(m))
 
     # see if we are only masking values that if putted
     # will work in the current dtype
diff --git a/pandas/core/internals/managers.py b/pandas/core/internals/managers.py
index 0b63588c9..6f0e8a909 100644
--- a/pandas/core/internals/managers.py
+++ b/pandas/core/internals/managers.py
@@ -433,11 +433,11 @@ class BlockManager(PandasObject):
             self._consolidate_inplace()
 
         def get_axe(block, qs, axes):
+            # Because Series dispatches to DataFrame, we will always have
+            #  block.ndim == 2
             from pandas import Float64Index
             if is_list_like(qs):
                 ax = Float64Index(qs)
-            elif block.ndim == 1:
-                ax = Float64Index([qs])
             else:
                 ax = axes[0]
             return ax
@@ -1345,27 +1345,6 @@ class BlockManager(PandasObject):
         return self.reindex_indexer(new_axis=new_labels, indexer=indexer,
                                     axis=axis, allow_dups=True)
 
-    def merge(self, other, lsuffix='', rsuffix=''):
-        # We assume at this point that the axes of self and other match.
-        # This is only called from Panel.join, which reindexes prior
-        # to calling to ensure this assumption holds.
-        l, r = items_overlap_with_suffix(left=self.items, lsuffix=lsuffix,
-                                         right=other.items, rsuffix=rsuffix)
-        new_items = _concat_indexes([l, r])
-
-        new_blocks = [blk.copy(deep=False) for blk in self.blocks]
-
-        offset = self.shape[0]
-        for blk in other.blocks:
-            blk = blk.copy(deep=False)
-            blk.mgr_locs = blk.mgr_locs.add(offset)
-            new_blocks.append(blk)
-
-        new_axes = list(self.axes)
-        new_axes[0] = new_items
-
-        return self.__class__(_consolidate(new_blocks), new_axes)
-
     def equals(self, other):
         self_axes, other_axes = self.axes, other.axes
         if len(self_axes) != len(other_axes):
@@ -1553,14 +1532,6 @@ class SingleBlockManager(BlockManager):
         """ return a dense type view """
         return np.array(self._block.to_dense(), copy=False)
 
-    @property
-    def asobject(self):
-        """
-        return a object dtype array. datetime/timedelta like values are boxed
-        to Timestamp/Timedelta instances.
-        """
-        return self._block.get_values(dtype=object)
-
     @property
     def _can_hold_na(self):
         return self._block._can_hold_na
@@ -1949,10 +1920,7 @@ def _compare_or_regex_search(a, b, regex=False):
     return result
 
 
-def _concat_indexes(indexes):
-    return indexes[0].append(indexes[1:])
-
-
+# TODO: this is no longer used in this module, could be moved to concat
 def items_overlap_with_suffix(left, lsuffix, right, rsuffix):
     """
     If two indices overlap, add suffixes to overlapping entries.
