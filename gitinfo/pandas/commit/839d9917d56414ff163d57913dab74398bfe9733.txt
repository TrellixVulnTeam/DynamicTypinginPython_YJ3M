commit 839d9917d56414ff163d57913dab74398bfe9733
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Apr 27 18:24:12 2012 -0400

    ENH: add DatetimeIndex.normalize and is_normalized property, close #1132

diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index c49ab9f42..7d2efcf1a 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -899,23 +899,38 @@ def build_field_sarray(ndarray[int64_t] dtindex):
         Py_ssize_t i, count = 0
         int isleap
         npy_datetimestruct dts
+        ndarray[int32_t] years, months, days, hours, minutes, seconds, mus
 
     count = len(dtindex)
 
-    sa_dtype = [('Y', '>i4'), # year
-                ('M', '>i4'), # month
-                ('D', '>i4'), # day
-                ('h', '>i4'), # hour
-                ('m', '>i4'), # min
-                ('s', '>i4'), # second
-                ('u', '>i4')] # microsecond
+    sa_dtype = [('Y', 'i4'), # year
+                ('M', 'i4'), # month
+                ('D', 'i4'), # day
+                ('h', 'i4'), # hour
+                ('m', 'i4'), # min
+                ('s', 'i4'), # second
+                ('u', 'i4')] # microsecond
 
     out = np.empty(count, dtype=sa_dtype)
 
+    years = out['Y']
+    months = out['M']
+    days = out['D']
+    hours = out['h']
+    minutes = out['m']
+    seconds = out['s']
+    mus = out['u']
+
     for i in range(count):
         PyArray_DatetimeToDatetimeStruct(dtindex[i], NPY_FR_us, &dts)
-        out[i] = (dts.year, dts.month, dts.day, dts.hour, dts.min, dts.sec,
-                  dts.us)
+        years[i] = dts.year
+        months[i] = dts.month
+        days[i] = dts.day
+        hours[i] = dts.hour
+        minutes[i] = dts.min
+        seconds[i] = dts.sec
+        mus[i] = dts.us
+
     return out
 
 @cython.wraparound(False)
@@ -1060,6 +1075,35 @@ def values_at_time(ndarray[int64_t] stamps, int64_t time):
 
     return indexer
 
+
+def date_normalize(ndarray[int64_t] stamps):
+    cdef:
+        Py_ssize_t i, n = len(stamps)
+        ndarray[int64_t] result = np.empty(n, dtype=np.int64)
+        npy_datetimestruct dts
+
+    for i in range(n):
+        PyArray_DatetimeToDatetimeStruct(stamps[i], NPY_FR_us, &dts)
+        dts.hour = 0
+        dts.min = 0
+        dts.sec = 0
+        dts.us = 0
+        result[i] = PyArray_DatetimeStructToDatetime(NPY_FR_us, &dts)
+
+    return result
+
+def dates_normalized(ndarray[int64_t] stamps):
+    cdef:
+        Py_ssize_t i, n = len(stamps)
+        npy_datetimestruct dts
+
+    for i in range(n):
+        PyArray_DatetimeToDatetimeStruct(stamps[i], NPY_FR_us, &dts)
+        if (dts.hour + dts.min + dts.sec + dts.us) > 0:
+            return False
+
+    return True
+
 # Some general helper functions
 #----------------------------------------------------------------------
 
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 87fb5f71f..efbacd572 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -928,6 +928,17 @@ class DatetimeIndex(Int64Index):
     dayofyear = _field_accessor('dayofyear', 'doy')
     quarter = _field_accessor('quarter', 'q')
 
+    def normalize(self):
+        """
+        Return DatetimeIndex with times to midnight. Length is unaltered
+
+        Returns
+        -------
+        normalized : DatetimeIndex
+        """
+        new_values = lib.date_normalize(self.asi8)
+        return DatetimeIndex(new_values, freq='infer', name=self.name)
+
     def __iter__(self):
         return iter(self.asobject)
 
@@ -964,6 +975,13 @@ class DatetimeIndex(Int64Index):
     def is_all_dates(self):
         return True
 
+    @cache_readonly
+    def is_normalized(self):
+        """
+        Returns True if all of the dates are at midnight ("no time")
+        """
+        return lib.dates_normalized(self.asi8)
+
     def equals(self, other):
         """
         Determines if two Index objects contain the same elements.
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 41c5a74aa..55f103f2f 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -501,6 +501,16 @@ class TestTimeSeries(unittest.TestCase):
         rng2 = DatetimeIndex(rng)
         self.assert_(rng.freq == rng2.freq)
 
+    def test_normalize(self):
+        rng = date_range('1/1/2000 9:30', periods=10, freq='D')
+
+        result = rng.normalize()
+        expected = date_range('1/1/2000', periods=10, freq='D')
+        self.assert_(result.equals(expected))
+
+        self.assert_(result.is_normalized)
+        self.assert_(not rng.is_normalized)
+
 def _simple_ts(start, end, freq='D'):
     rng = date_range(start, end, freq=freq)
     return Series(np.random.randn(len(rng)), index=rng)
