commit 5f9e9991715aa79d74856accbaadb2ab3d353c3f
Author: Chang She <chang@lambdafoundry.com>
Date:   Wed Jul 11 17:31:07 2012 -0400

    BUG: microsecond time plotting

diff --git a/pandas/tseries/converter.py b/pandas/tseries/converter.py
index 974607890..db15b04fd 100644
--- a/pandas/tseries/converter.py
+++ b/pandas/tseries/converter.py
@@ -24,7 +24,8 @@ def register():
     units.registry[Period] = PeriodConverter()
 
 def _to_ordinalf(tm):
-    tot_sec = tm.hour * 3600 + tm.minute * 60 + tm.second + tm.microsecond
+    tot_sec = (tm.hour * 3600 + tm.minute * 60 + tm.second +
+               float(tm.microsecond / 1e6))
     return tot_sec
 
 def time2num(d):
@@ -76,6 +77,8 @@ class TimeFormatter(Formatter):
         us = int((x - s) * 1e6)
         m, s = divmod(s, 60)
         h, m = divmod(m, 60)
+        if us != 0:
+            fmt += '.%f'
         return pydt.time(h, m, s, us).strftime(fmt)
 
 ### Period Conversion
diff --git a/pandas/tseries/tests/test_plotting.py b/pandas/tseries/tests/test_plotting.py
index fdf0ac36a..b2f49beeb 100644
--- a/pandas/tseries/tests/test_plotting.py
+++ b/pandas/tseries/tests/test_plotting.py
@@ -650,6 +650,32 @@ class TestTSPlot(unittest.TestCase):
                 rs = time(h, m, s).strftime('%H:%M:%S')
                 self.assert_(xp, rs)
 
+    @slow
+    def test_time_musec(self):
+        import matplotlib.pyplot as plt
+        plt.close('all')
+
+        t = datetime(1, 1, 1, 3, 30, 0)
+        deltas = np.random.randint(1, 20, 3).cumsum()
+        ts = np.array([(t + timedelta(microseconds=int(x))).time()
+                       for x in deltas])
+        df = DataFrame({'a' : np.random.randn(len(ts)),
+                        'b' : np.random.randn(len(ts))},
+                       index=ts)
+        ax = df.plot()
+
+        # verify tick labels
+        ticks = ax.get_xticks()
+        labels = ax.get_xticklabels()
+        for t, l in zip(ticks, labels):
+            m, s = divmod(int(t), 60)
+            us = int((t - int(t)) * 1e6)
+            h, m = divmod(m, 60)
+            xp = l.get_text()
+            if len(xp) > 0:
+                rs = time(h, m, s).strftime('%H:%M:%S.%f')
+                self.assert_(xp, rs)
+
 PNG_PATH = 'tmp.png'
 def _check_plot_works(f, freq=None, series=None, *args, **kwargs):
     import matplotlib.pyplot as plt
