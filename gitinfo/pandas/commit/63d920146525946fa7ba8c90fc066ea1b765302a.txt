commit 63d920146525946fa7ba8c90fc066ea1b765302a
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Jun 16 23:51:20 2012 -0400

    ENH: get_dummies function, for book

diff --git a/pandas/core/api.py b/pandas/core/api.py
index 6350c47c0..df164575e 100644
--- a/pandas/core/api.py
+++ b/pandas/core/api.py
@@ -15,7 +15,7 @@ from pandas.core.series import Series, TimeSeries
 from pandas.core.frame import DataFrame
 from pandas.core.panel import Panel
 from pandas.core.groupby import groupby
-from pandas.core.reshape import pivot_simple as pivot
+from pandas.core.reshape import pivot_simple as pivot, get_dummies
 
 WidePanel = Panel
 
diff --git a/pandas/core/reshape.py b/pandas/core/reshape.py
index a4ce1aa89..08d45ddf6 100644
--- a/pandas/core/reshape.py
+++ b/pandas/core/reshape.py
@@ -8,6 +8,7 @@ import numpy as np
 from pandas.core.series import Series
 from pandas.core.frame import DataFrame
 
+from pandas.core.categorical import Categorical
 from pandas.core.common import notnull, _ensure_platform_int
 from pandas.core.groupby import (get_group_index, _compress_group_index,
                                  decons_group_index)
@@ -578,23 +579,44 @@ def convert_dummies(data, cat_variables, prefix_sep='_'):
     """
     result = data.drop(cat_variables, axis=1)
     for variable in cat_variables:
-        dummies = make_column_dummies(data, variable, prefix=True,
-                                      prefix_sep=prefix_sep)
+        dummies = get_dummies(data[variable], prefix=variable,
+                              prefix_sep=prefix_sep)
         result = result.join(dummies)
     return result
 
-def make_column_dummies(data, column, prefix=False, prefix_sep='_'):
-    from pandas import Factor
-    factor = Factor.from_array(data[column].values)
-    dummy_mat = np.eye(len(factor.levels)).take(factor.labels, axis=0)
 
-    if prefix:
-        dummy_cols = ['%s%s%s' % (column, prefix_sep, str(v))
-                      for v in factor.levels]
+def get_dummies(data, prefix=None, prefix_sep='_'):
+    """
+    Convert categorical variable into dummy/indicator variables
+
+    Parameters
+    ----------
+    data : array-like or Series
+    prefix : string, default None
+        String to append DataFrame column names
+    prefix_sep : string, default '_'
+        If appending prefix, separator/delimiter to use
+
+    Returns
+    -------
+    dummies : DataFrame
+    """
+    cat = Categorical.from_array(np.asarray(data))
+    dummy_mat = np.eye(len(cat.levels)).take(cat.labels, axis=0)
+
+    if prefix is not None:
+        dummy_cols = ['%s%s%s' % (prefix, prefix_sep, str(v))
+                      for v in cat.levels]
+    else:
+        dummy_cols = cat.levels
+
+    if isinstance(data, Series):
+        index = data.index
     else:
-        dummy_cols = factor.levels
-    dummies = DataFrame(dummy_mat, index=data.index, columns=dummy_cols)
-    return dummies
+        index = None
+
+    return DataFrame(dummy_mat, index=index, columns=dummy_cols)
+
 
 def make_axis_dummies(frame, axis='minor', transform=None):
     """
@@ -615,8 +637,6 @@ def make_axis_dummies(frame, axis='minor', transform=None):
     dummies : DataFrame
         Column names taken from chosen axis
     """
-    from pandas import Factor
-
     numbers = {
         'major' : 0,
         'minor' : 1
@@ -627,9 +647,9 @@ def make_axis_dummies(frame, axis='minor', transform=None):
     labels = frame.index.labels[num]
     if transform is not None:
         mapped_items = items.map(transform)
-        factor = Factor.from_array(mapped_items.take(labels))
-        labels = factor.labels
-        items = factor.levels
+        cat = Categorical.from_array(mapped_items.take(labels))
+        labels = cat.labels
+        items = cat.levels
 
     values = np.eye(len(items), dtype=float)
     values = values.take(labels, axis=0)
diff --git a/pandas/stats/plm.py b/pandas/stats/plm.py
index cee6ee5a7..7b6f85b12 100644
--- a/pandas/stats/plm.py
+++ b/pandas/stats/plm.py
@@ -12,6 +12,7 @@ import numpy as np
 
 from pandas.core.panel import Panel
 from pandas.core.frame import DataFrame
+from pandas.core.reshape import get_dummies
 from pandas.core.series import Series
 from pandas.core.sparse import SparsePanel
 from pandas.stats.ols import OLS, MovingOLS
@@ -244,8 +245,6 @@ class PanelOLS(OLS):
         -------
         DataFrame
         """
-        from pandas.core.reshape import make_column_dummies
-
         if not self._x_effects:
             return panel
 
@@ -254,7 +253,7 @@ class PanelOLS(OLS):
         for effect in self._x_effects:
             self.log('-- Adding fixed effect dummies for %s' % effect)
 
-            dummies = make_column_dummies(panel, effect, prefix=False)
+            dummies = get_dummies(panel[effect])
 
             val_map = cat_mappings.get(effect)
             if val_map:
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 34c37b2c4..70c817fc4 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -1226,11 +1226,11 @@ class TestLongPanel(unittest.TestCase):
         # TODO: test correctness
 
     def test_get_dummies(self):
-        from pandas.core.reshape import make_column_dummies, make_axis_dummies
+        from pandas.core.reshape import get_dummies, make_axis_dummies
 
         self.panel['Label'] = self.panel.index.labels[1]
         minor_dummies = make_axis_dummies(self.panel, 'minor')
-        dummies = make_column_dummies(self.panel, 'Label')
+        dummies = get_dummies(self.panel['Label'])
         self.assert_(np.array_equal(dummies.values, minor_dummies.values))
 
     def test_apply(self):
