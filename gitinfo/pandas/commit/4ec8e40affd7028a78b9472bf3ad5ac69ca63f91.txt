commit 4ec8e40affd7028a78b9472bf3ad5ac69ca63f91
Author: Adam Klein <adamklein@gmail.com>
Date:   Sun Feb 26 20:10:32 2012 -0500

    TST: added dt64 accessor tests, sketched additional accessors

diff --git a/pandas/core/index.py b/pandas/core/index.py
index b9291a679..0fa6800f4 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1543,6 +1543,22 @@ class DatetimeIndex(Int64Index):
     def microsecond(self):
         return lib.fast_field_accessor(self.asi8, 'us')
 
+    @property
+    def weekofyear(self):
+        return lib.fast_field_accessor(self.asi8, 'woy')
+
+    @property
+    def dayofweek(self):
+        return lib.fast_field_accessor(self.asi8, 'dow')
+
+    @property
+    def dayofyear(self):
+        return lib.fast_field_accessor(self.asi8, 'doy')
+
+    @property
+    def quarter(self):
+        return lib.fast_field_accessor(self.asi8, 'q')
+
     def __iter__(self):
         if hasattr(self, 'offset') and self.offset is not None:
             return iter(_dt_box_array(self.asi8, self.offset))
diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index aa14c11c0..a37efd8b4 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -1609,7 +1609,7 @@ def fast_field_accessor(ndarray[int64_t] dtindex, object field):
     field and return an array of these values.
     '''
     cdef:
-        npy_datetimestruct dts
+        _TSObject ts
         Py_ssize_t i, count = 0
         ndarray[int32_t] out
 
@@ -1618,48 +1618,59 @@ def fast_field_accessor(ndarray[int64_t] dtindex, object field):
 
     if field == 'Y':
         for i in range(count):
-            PyArray_DatetimeToDatetimeStruct(dtindex[i], NPY_FR_us, &dts)
-            out[i] = dts.year
+            ts = convert_to_tsobject(dtindex[i])
+            out[i] = ts.dtval.year
         return out
 
     elif field == 'M':
         for i in range(count):
-            PyArray_DatetimeToDatetimeStruct(dtindex[i], NPY_FR_us, &dts)
-            out[i] = dts.month
+            ts = convert_to_tsobject(dtindex[i])
+            out[i] = ts.dtval.month
         return out
 
     elif field == 'D':
         for i in range(count):
-            PyArray_DatetimeToDatetimeStruct(dtindex[i], NPY_FR_us, &dts)
-            out[i] = dts.day
+            ts = convert_to_tsobject(dtindex[i])
+            out[i] = ts.dtval.day
         return out
 
     elif field == 'h':
         for i in range(count):
-            PyArray_DatetimeToDatetimeStruct(dtindex[i], NPY_FR_us, &dts)
-            out[i] = dts.hour
+            ts = convert_to_tsobject(dtindex[i])
+            out[i] = ts.dtval.hour
         return out
 
     elif field == 'm':
         for i in range(count):
-            PyArray_DatetimeToDatetimeStruct(dtindex[i], NPY_FR_us, &dts)
-            out[i] = dts.min
+            ts = convert_to_tsobject(dtindex[i])
+            out[i] = ts.dtval.minute
         return out
 
     elif field == 's':
         for i in range(count):
-            PyArray_DatetimeToDatetimeStruct(dtindex[i], NPY_FR_us, &dts)
-            out[i] = dts.sec
+            ts = convert_to_tsobject(dtindex[i])
+            out[i] = ts.dtval.second
         return out
 
     elif field == 'us':
         for i in range(count):
-            PyArray_DatetimeToDatetimeStruct(dtindex[i], NPY_FR_us, &dts)
-            out[i] = dts.us
+            ts = convert_to_tsobject(dtindex[i])
+            out[i] = ts.dtval.microsecond
         return out
 
-    else:
-        raise ValueError("Field %s not supported; not in (Y,M,D,h,m,s,us)" % field)
+    elif field == 'doy':
+        pass
+
+    elif field == 'dow':
+        pass
+
+    elif field == 'woy':
+        pass
+
+    elif field == 'q':
+        pass
+
+    raise ValueError("Field %s not supported; not in (Y,M,D,h,m,s,us)" % field)
 
 
 # Some general helper functions
diff --git a/pandas/tests/test_datetime64.py b/pandas/tests/test_datetime64.py
index f106a4ec0..3259a74b9 100644
--- a/pandas/tests/test_datetime64.py
+++ b/pandas/tests/test_datetime64.py
@@ -203,6 +203,26 @@ class TestDatetime64(unittest.TestCase):
                     self.assert_(t == stack.pop())
                     self.assert_(t.weekday() == day)
 
+    def test_datetimeindex_accessors(self):
+        dti = DatetimeIndex(offset='Q@JAN', start=datetime(1997,12,31),
+                            periods=100)
+
+        dti.year[0] == 1997
+        dti.month[0] == 12
+        dti.day[0] == 31
+        dti.hour[0] = 0
+        dti.minute[0] = 0
+        dti.second[0] = 0
+        dti.microsecond[0] = 0
+
+        self.assertEquals(len(dti.year), 100)
+        self.assertEquals(len(dti.month), 100)
+        self.assertEquals(len(dti.day), 100)
+        self.assertEquals(len(dti.hour), 100)
+        self.assertEquals(len(dti.minute), 100)
+        self.assertEquals(len(dti.second), 100)
+        self.assertEquals(len(dti.microsecond), 100)
+
     def test_datetimeindex_diff(self):
         dti1 = DatetimeIndex(offset='Q@JAN', start=datetime(1997,12,31),
                              periods=100)
