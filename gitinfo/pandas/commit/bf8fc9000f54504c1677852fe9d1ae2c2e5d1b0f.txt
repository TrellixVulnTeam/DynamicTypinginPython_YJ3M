commit bf8fc9000f54504c1677852fe9d1ae2c2e5d1b0f
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Dec 21 11:37:31 2011 -0500

    ENH: do some extra type-checking in engines.pyx to avoid unnecessary dict creation

diff --git a/RELEASE.rst b/RELEASE.rst
index 989fdbed5..12dcd7e6a 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -47,6 +47,8 @@ pandas 0.6.2
   - Improve column reindexing performance by using specialized Cython take
     function
   - Further performance tweaking of Series.__getitem__ for standard use cases
+  - Avoid Index dict creation in some cases (i.e. when getting slices, etc.),
+    regression from prior versions
 
 **Bug fixes**
 
diff --git a/pandas/src/engines.pyx b/pandas/src/engines.pyx
index 06d8cfff3..e08585939 100644
--- a/pandas/src/engines.pyx
+++ b/pandas/src/engines.pyx
@@ -6,6 +6,9 @@ cnp.import_array()
 
 cimport util
 
+cdef extern from "Python.h":
+    int PySlice_Check(object)
+
 def get_value_at(ndarray arr, object loc):
     return util.get_value_at(arr, loc)
 
@@ -71,7 +74,7 @@ cdef class DictIndexEngine(IndexEngine):
         self.initialized = 0
         self.integrity = 0
 
-    cdef _ensure_initialized(self):
+    cdef inline _ensure_initialized(self):
         if not self.initialized:
             self.initialize()
 
@@ -95,9 +98,14 @@ cdef class DictIndexEngine(IndexEngine):
         self.initialized = 1
 
     cpdef get_loc(self, object val):
+        if is_definitely_invalid_key(val):
+            raise TypeError
+
         self._ensure_initialized()
         if not self.integrity:
             raise Exception('Index values are not unique')
         return self.mapping[val]
 
 
+cdef inline is_definitely_invalid_key(object val):
+    return PySlice_Check(val) or cnp.PyArray_Check(val)
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 4bb5dd4a3..3598a50f4 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -385,6 +385,10 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         sl[:] = 0
         self.assert_((self.series[10:20] == 0).all())
 
+    def test_slice_can_reorder_not_uniquely_indexed(self):
+        s = Series(1, index=['a', 'a', 'b', 'b', 'c'])
+        result = s[::-1] # it works!
+
     def test_setitem(self):
         self.ts[self.ts.index[5]] = np.NaN
         self.ts[[1,2,17]] = np.NaN
