commit ded5b1b9277faa17176769426b0c4ac9640bf20f
Author: Phillip Cloud <cpcloud@gmail.com>
Date:   Tue Feb 26 20:41:46 2013 +0200

    ENH: add display.max_info_rows option

diff --git a/pandas/core/config_init.py b/pandas/core/config_init.py
index e4eeea53e..ce7f0d888 100644
--- a/pandas/core/config_init.py
+++ b/pandas/core/config_init.py
@@ -117,11 +117,13 @@ pc_line_width_doc = """
 : int
     When printing wide DataFrames, this is the width of each line.
 """
+
 pc_chop_threshold_doc = """
 : float or None
     if set to a float value, all float values smaller then the given threshold
     will be displayed as exactly 0 by repr and friends.
 """
+
 pc_max_seq_items = """
 : int or None
 
@@ -131,10 +133,26 @@ pc_max_seq_items = """
 
     If set to None, the number of items to be printed is unlimited.
 """
+
+
+pc_max_info_rows_doc = """
+: int or None
+    max_info_rows is the maximum number of rows for which a frame will
+    perform a null check on its columns when repr'ing To a console.
+    The default is 1,000,000 rows. So, if a DataFrame has more
+    1,000,000 rows there will be no null check performed on the
+    columns and thus the representation will take much less time to
+    display in an interactive session. A value of None means always
+    perform a null check when repr'ing.
+"""
+
+
 with cf.config_prefix('display'):
     cf.register_option('precision', 7, pc_precision_doc, validator=is_int)
     cf.register_option('float_format', None, float_format_doc)
     cf.register_option('column_space', 12, validator=is_int)
+    cf.register_option('max_info_rows', 1000000, pc_max_info_rows_doc,
+                       validator=lambda x: is_int(x) or x is None)
     cf.register_option('max_rows', 100, pc_max_rows_doc, validator=is_int)
     cf.register_option('max_colwidth', 50, max_colwidth_doc, validator=is_int)
     cf.register_option('max_columns', 20, pc_max_cols_doc, validator=is_int)
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 8e7dbed74..ee586a210 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -53,7 +53,7 @@ import pandas.lib as lib
 import pandas.tslib as tslib
 import pandas.algos as _algos
 
-from pandas.core.config import get_option
+from pandas.core.config import get_option, set_option
 
 #----------------------------------------------------------------------
 # Docstring templates
@@ -332,7 +332,6 @@ def _comp_method(func, name, str_rep):
 
 class DataFrame(NDFrame):
     _auto_consolidate = True
-    _verbose_info = True
     _het_axis = 1
     _info_axis = 'columns'
     _col_klass = Series
@@ -561,6 +560,22 @@ class DataFrame(NDFrame):
         index, columns = axes
         return self._constructor(arr, index=index, columns=columns, copy=copy)
 
+    @property
+    def _verbose_info(self):
+        import warnings
+        warnings.warn('The _verbose_info property will be removed in version '
+                      '0.12', FutureWarning)
+        return get_option('display.max_info_rows') is None
+
+    @_verbose_info.setter
+    def _verbose_info(self, value):
+        import warnings
+        warnings.warn('The _verbose_info property will be removed in version '
+                      '0.12', FutureWarning)
+
+        value = None if value else 1000000
+        set_option('display.max_info_rows', value)
+
     @property
     def axes(self):
         return [self.index, self.columns]
@@ -653,7 +668,9 @@ class DataFrame(NDFrame):
         """
         buf = StringIO(u"")
         if self._need_info_repr_():
-            self.info(buf=buf, verbose=self._verbose_info)
+            max_info_rows = get_option('display.max_info_rows')
+            verbose = max_info_rows is None or self.shape[0] <= max_info_rows
+            self.info(buf=buf, verbose=verbose)
         else:
             is_wide = self._need_wide_repr()
             line_width = None
diff --git a/pandas/sparse/frame.py b/pandas/sparse/frame.py
index f142b3653..6e003d5a0 100644
--- a/pandas/sparse/frame.py
+++ b/pandas/sparse/frame.py
@@ -66,7 +66,6 @@ class SparseDataFrame(DataFrame):
         Default fill_value for converting Series to SparseSeries. Will not
         override SparseSeries passed in
     """
-    _verbose_info = False
     _columns = None
     _series = None
     _is_mixed_type = False
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index d32a50a37..3df8f4ddf 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -479,6 +479,30 @@ class TestDataFrameFormatting(unittest.TestCase):
         repr(df.T)
         fmt.set_printoptions(max_rows=200)
 
+    def test_large_frame_repr(self):
+        old_max_rows = pd.get_option('display.max_rows')
+        old_max_info_rows = pd.get_option('display.max_info_rows')
+
+        nrows, ncols = 3, 2
+
+        # need to set max rows so that we get an info-style repr
+        pd.set_option('display.max_rows', nrows - 1)
+        pd.set_option('display.max_info_rows', nrows)
+
+        smallx = DataFrame(np.random.rand(nrows, ncols))
+        repr_small = repr(smallx)
+
+        bigx = DataFrame(np.random.rand(nrows + 1, ncols))
+        repr_big = repr(bigx)
+
+        diff = len(repr_small.splitlines()) - len(repr_big.splitlines())
+
+        # the difference in line count is the number of columns
+        self.assertEqual(diff, ncols)
+
+        pd.set_option('display.max_rows', old_max_rows)
+        pd.set_option('display.max_info_rows', old_max_info_rows)
+
     def test_wide_repr(self):
         with option_context('mode.sim_interactive', True):
             col = lambda l, k: [tm.rands(k) for _ in xrange(l)]
