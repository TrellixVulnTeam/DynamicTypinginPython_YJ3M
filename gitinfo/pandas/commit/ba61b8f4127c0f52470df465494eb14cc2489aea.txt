commit ba61b8f4127c0f52470df465494eb14cc2489aea
Author: Thomas Kluyver <takowl@gmail.com>
Date:   Sat Nov 23 13:59:47 2013 -0800

    Use to_string() to format DataFrames for clipboard.
    
    Using str() has some unhelpful properties, especially when DataFrames
    are large enough that the default repr does not show them in their
    entirety. The defaults for to_string() are more helpful for the
    clipboard.
    
    Closes gh-5346

diff --git a/pandas/io/clipboard.py b/pandas/io/clipboard.py
index 51142c9f5..13135d255 100644
--- a/pandas/io/clipboard.py
+++ b/pandas/io/clipboard.py
@@ -1,5 +1,5 @@
 """ io on the clipboard """
-from pandas import compat, get_option
+from pandas import compat, get_option, DataFrame
 from pandas.compat import StringIO
 
 def read_clipboard(**kwargs):  # pragma: no cover
@@ -64,5 +64,10 @@ def to_clipboard(obj, excel=None, sep=None, **kwargs):  # pragma: no cover
         except:
             pass
 
-    clipboard_set(str(obj))
+    if isinstance(obj, DataFrame):
+        # str(df) has various unhelpful defaults, like truncation
+        objstr = obj.to_string()
+    else:
+        objstr = str(obj)
+    clipboard_set(objstr)
 
diff --git a/pandas/io/tests/test_clipboard.py b/pandas/io/tests/test_clipboard.py
index 45b479ebb..6ee0afa1c 100644
--- a/pandas/io/tests/test_clipboard.py
+++ b/pandas/io/tests/test_clipboard.py
@@ -7,6 +7,7 @@ import nose
 
 from pandas import DataFrame
 from pandas import read_clipboard
+from pandas import get_option
 from pandas.util import testing as tm
 from pandas.util.testing import makeCustomDataframe as mkdf
 
@@ -33,6 +34,11 @@ class TestClipboard(unittest.TestCase):
         cls.data['mixed'] = DataFrame({'a': np.arange(1.0, 6.0) + 0.01,
                                        'b': np.arange(1, 6),
                                        'c': list('abcde')})
+        # Test GH-5346
+        max_rows = get_option('display.max_rows')
+        cls.data['longdf'] = mkdf(max_rows+1, 3, data_gen_f=lambda *args: randint(2),
+                                  c_idx_type='s', r_idx_type='i',
+                                  c_idx_names=[None], r_idx_names=[None])  
         cls.data_types = list(cls.data.keys())
 
     @classmethod
