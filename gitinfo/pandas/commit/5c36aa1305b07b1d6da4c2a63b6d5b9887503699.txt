commit 5c36aa1305b07b1d6da4c2a63b6d5b9887503699
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Mon Nov 11 15:08:29 2019 -0800

    TYPES: __len__, is_all_dates, inferred_type (#29475)

diff --git a/pandas/_libs/hashtable_class_helper.pxi.in b/pandas/_libs/hashtable_class_helper.pxi.in
index c39d6d60d..b207fcb66 100644
--- a/pandas/_libs/hashtable_class_helper.pxi.in
+++ b/pandas/_libs/hashtable_class_helper.pxi.in
@@ -100,7 +100,7 @@ cdef class {{name}}Vector:
             PyMem_Free(self.data)
             self.data = NULL
 
-    def __len__(self):
+    def __len__(self) -> int:
         return self.data.n
 
     cpdef to_array(self):
@@ -168,7 +168,7 @@ cdef class StringVector:
             PyMem_Free(self.data)
             self.data = NULL
 
-    def __len__(self):
+    def __len__(self) -> int:
         return self.data.n
 
     def to_array(self):
@@ -212,7 +212,7 @@ cdef class ObjectVector:
         self.ao = np.empty(_INIT_VEC_CAP, dtype=object)
         self.data = <PyObject**>self.ao.data
 
-    def __len__(self):
+    def __len__(self) -> int:
         return self.n
 
     cdef inline append(self, object obj):
@@ -270,7 +270,7 @@ cdef class {{name}}HashTable(HashTable):
             size_hint = min(size_hint, _SIZE_HINT_LIMIT)
             kh_resize_{{dtype}}(self.table, size_hint)
 
-    def __len__(self):
+    def __len__(self) -> int:
         return self.table.size
 
     def __dealloc__(self):
@@ -897,7 +897,7 @@ cdef class PyObjectHashTable(HashTable):
             kh_destroy_pymap(self.table)
             self.table = NULL
 
-    def __len__(self):
+    def __len__(self) -> int:
         return self.table.size
 
     def __contains__(self, object key):
diff --git a/pandas/_libs/internals.pyx b/pandas/_libs/internals.pyx
index ecd090de5..08decb44a 100644
--- a/pandas/_libs/internals.pyx
+++ b/pandas/_libs/internals.pyx
@@ -66,7 +66,7 @@ cdef class BlockPlacement:
     def __repr__(self) -> str:
         return str(self)
 
-    def __len__(self):
+    def __len__(self) -> int:
         cdef:
             slice s = self._ensure_has_slice()
         if s is not None:
diff --git a/pandas/core/arrays/categorical.py b/pandas/core/arrays/categorical.py
index 39470c742..73d1db9bd 100644
--- a/pandas/core/arrays/categorical.py
+++ b/pandas/core/arrays/categorical.py
@@ -1940,7 +1940,7 @@ class Categorical(ExtensionArray, PandasObject):
 
     take = take_nd
 
-    def __len__(self):
+    def __len__(self) -> int:
         """
         The length of this Categorical.
         """
diff --git a/pandas/core/arrays/datetimelike.py b/pandas/core/arrays/datetimelike.py
index 4b83dd0cf..f93db4695 100644
--- a/pandas/core/arrays/datetimelike.py
+++ b/pandas/core/arrays/datetimelike.py
@@ -396,7 +396,7 @@ class DatetimeLikeArrayMixin(ExtensionOpsMixin, AttributesMixin, ExtensionArray)
         """The number of elements in this array."""
         return np.prod(self.shape)
 
-    def __len__(self):
+    def __len__(self) -> int:
         return len(self._data)
 
     def __getitem__(self, key):
diff --git a/pandas/core/arrays/integer.py b/pandas/core/arrays/integer.py
index 08b53e54b..41d8bffd8 100644
--- a/pandas/core/arrays/integer.py
+++ b/pandas/core/arrays/integer.py
@@ -469,7 +469,7 @@ class IntegerArray(ExtensionArray, ExtensionOpsMixin):
         self._data[key] = value
         self._mask[key] = mask
 
-    def __len__(self):
+    def __len__(self) -> int:
         return len(self._data)
 
     @property
diff --git a/pandas/core/arrays/interval.py b/pandas/core/arrays/interval.py
index cc41797e7..cb482665b 100644
--- a/pandas/core/arrays/interval.py
+++ b/pandas/core/arrays/interval.py
@@ -489,7 +489,7 @@ class IntervalArray(IntervalMixin, ExtensionArray):
     def __iter__(self):
         return iter(np.asarray(self))
 
-    def __len__(self):
+    def __len__(self) -> int:
         return len(self.left)
 
     def __getitem__(self, value):
diff --git a/pandas/core/computation/expr.py b/pandas/core/computation/expr.py
index 39653c3d6..929c9e69d 100644
--- a/pandas/core/computation/expr.py
+++ b/pandas/core/computation/expr.py
@@ -837,7 +837,7 @@ class Expr:
     def __repr__(self) -> str:
         return printing.pprint_thing(self.terms)
 
-    def __len__(self):
+    def __len__(self) -> int:
         return len(self.expr)
 
     def parse(self):
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 7e3c2200d..ebee8b108 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1023,7 +1023,7 @@ class DataFrame(NDFrame):
         # fallback to regular tuples
         return zip(*arrays)
 
-    def __len__(self):
+    def __len__(self) -> int:
         """
         Returns length of info axis, but here we use the index.
         """
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 49df37467..2468c4333 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -1952,7 +1952,7 @@ class NDFrame(PandasObject, SelectionMixin):
     def iteritems(self):
         return self.items()
 
-    def __len__(self):
+    def __len__(self) -> int:
         """Returns length of info axis"""
         return len(self._info_axis)
 
diff --git a/pandas/core/groupby/groupby.py b/pandas/core/groupby/groupby.py
index e73be29d5..fd45d60b0 100644
--- a/pandas/core/groupby/groupby.py
+++ b/pandas/core/groupby/groupby.py
@@ -399,7 +399,7 @@ class _GroupBy(PandasObject, SelectionMixin):
         # we accept no other args
         validate_kwargs("group", kwargs, {})
 
-    def __len__(self):
+    def __len__(self) -> int:
         return len(self.groups)
 
     def __repr__(self) -> str:
diff --git a/pandas/core/indexes/base.py b/pandas/core/indexes/base.py
index c9697c530..ee124ba38 100644
--- a/pandas/core/indexes/base.py
+++ b/pandas/core/indexes/base.py
@@ -649,10 +649,12 @@ class Index(IndexOpsMixin, PandasObject):
     # Array-Like Methods
 
     # ndarray compat
-    def __len__(self):
+    def __len__(self) -> int:
         """
         Return the length of the Index.
         """
+        # Assertion needed for mypy, see GH#29475
+        assert self._data is not None
         return len(self._data)
 
     def __array__(self, dtype=None):
@@ -1807,7 +1809,7 @@ class Index(IndexOpsMixin, PandasObject):
         return lib.infer_dtype(self, skipna=False)
 
     @cache_readonly
-    def is_all_dates(self):
+    def is_all_dates(self) -> bool:
         return is_datetime_array(ensure_object(self.values))
 
     # --------------------------------------------------------------------
diff --git a/pandas/core/indexes/category.py b/pandas/core/indexes/category.py
index e5a8edb56..0187b47ab 100644
--- a/pandas/core/indexes/category.py
+++ b/pandas/core/indexes/category.py
@@ -366,7 +366,7 @@ class CategoricalIndex(Index, accessor.PandasDelegate):
     # --------------------------------------------------------------------
 
     @property
-    def inferred_type(self):
+    def inferred_type(self) -> str:
         return "categorical"
 
     @property
diff --git a/pandas/core/indexes/datetimes.py b/pandas/core/indexes/datetimes.py
index 2d0ecf1b9..4a3ee5708 100644
--- a/pandas/core/indexes/datetimes.py
+++ b/pandas/core/indexes/datetimes.py
@@ -1235,13 +1235,13 @@ class DatetimeIndex(DatetimeIndexOpsMixin, Int64Index, DatetimeDelegateMixin):
         return typ == self.inferred_type or typ == "datetime"
 
     @property
-    def inferred_type(self):
+    def inferred_type(self) -> str:
         # b/c datetime is represented as microseconds since the epoch, make
         # sure we can't have ambiguous indexing
         return "datetime64"
 
     @property
-    def is_all_dates(self):
+    def is_all_dates(self) -> bool:
         return True
 
     def insert(self, loc, item):
diff --git a/pandas/core/indexes/interval.py b/pandas/core/indexes/interval.py
index bc3c0be08..cf5295460 100644
--- a/pandas/core/indexes/interval.py
+++ b/pandas/core/indexes/interval.py
@@ -468,7 +468,7 @@ class IntervalIndex(IntervalMixin, Index):
             warnings.simplefilter("ignore")
             return self.left.itemsize + self.right.itemsize
 
-    def __len__(self):
+    def __len__(self) -> int:
         return len(self.left)
 
     @cache_readonly
@@ -524,7 +524,7 @@ class IntervalIndex(IntervalMixin, Index):
         return self._data.dtype
 
     @property
-    def inferred_type(self):
+    def inferred_type(self) -> str:
         """Return a string of the type inferred from the values"""
         return "interval"
 
@@ -1357,7 +1357,7 @@ class IntervalIndex(IntervalMixin, Index):
         return func
 
     @property
-    def is_all_dates(self):
+    def is_all_dates(self) -> bool:
         """
         This is False even when left/right contain datetime-like objects,
         as the check is done on the Interval itself
diff --git a/pandas/core/indexes/multi.py b/pandas/core/indexes/multi.py
index 19769d5b0..a6a6de6c1 100644
--- a/pandas/core/indexes/multi.py
+++ b/pandas/core/indexes/multi.py
@@ -1217,7 +1217,7 @@ class MultiIndex(Index):
 
     # --------------------------------------------------------------------
 
-    def __len__(self):
+    def __len__(self) -> int:
         return len(self.codes[0])
 
     def _get_names(self):
@@ -1322,7 +1322,7 @@ class MultiIndex(Index):
         return MultiIndex.from_tuples
 
     @cache_readonly
-    def inferred_type(self):
+    def inferred_type(self) -> str:
         return "mixed"
 
     def _get_level_number(self, level):
@@ -1791,7 +1791,7 @@ class MultiIndex(Index):
         return Index(self.values, tupleize_cols=False)
 
     @property
-    def is_all_dates(self):
+    def is_all_dates(self) -> bool:
         return False
 
     def is_lexsorted(self):
diff --git a/pandas/core/indexes/numeric.py b/pandas/core/indexes/numeric.py
index 12a9201b0..3e2b41f62 100644
--- a/pandas/core/indexes/numeric.py
+++ b/pandas/core/indexes/numeric.py
@@ -134,7 +134,7 @@ class NumericIndex(Index):
         return result.rename(name)
 
     @property
-    def is_all_dates(self):
+    def is_all_dates(self) -> bool:
         """
         Checks that all the labels are datetime objects.
         """
@@ -228,7 +228,7 @@ class Int64Index(IntegerIndex):
     _default_dtype = np.int64
 
     @property
-    def inferred_type(self):
+    def inferred_type(self) -> str:
         """Always 'integer' for ``Int64Index``"""
         return "integer"
 
@@ -283,7 +283,7 @@ class UInt64Index(IntegerIndex):
     _default_dtype = np.uint64
 
     @property
-    def inferred_type(self):
+    def inferred_type(self) -> str:
         """Always 'integer' for ``UInt64Index``"""
         return "integer"
 
@@ -356,7 +356,7 @@ class Float64Index(NumericIndex):
     _default_dtype = np.float64
 
     @property
-    def inferred_type(self):
+    def inferred_type(self) -> str:
         """Always 'floating' for ``Float64Index``"""
         return "floating"
 
diff --git a/pandas/core/indexes/period.py b/pandas/core/indexes/period.py
index ca7be9ba5..3bcb9ba34 100644
--- a/pandas/core/indexes/period.py
+++ b/pandas/core/indexes/period.py
@@ -574,7 +574,7 @@ class PeriodIndex(DatetimeIndexOpsMixin, Int64Index, PeriodDelegateMixin):
         return self._ndarray_values.searchsorted(value, side=side, sorter=sorter)
 
     @property
-    def is_all_dates(self):
+    def is_all_dates(self) -> bool:
         return True
 
     @property
@@ -591,7 +591,7 @@ class PeriodIndex(DatetimeIndexOpsMixin, Int64Index, PeriodDelegateMixin):
         return ((values[1:] - values[:-1]) < 2).all()
 
     @property
-    def inferred_type(self):
+    def inferred_type(self) -> str:
         # b/c data is represented as ints make sure we can't have ambiguous
         # indexing
         return "period"
diff --git a/pandas/core/indexes/range.py b/pandas/core/indexes/range.py
index 5fa3431fc..67791417f 100644
--- a/pandas/core/indexes/range.py
+++ b/pandas/core/indexes/range.py
@@ -698,7 +698,7 @@ class RangeIndex(Int64Index):
         # In this case return an empty range index.
         return RangeIndex(0, 0).rename(name)
 
-    def __len__(self):
+    def __len__(self) -> int:
         """
         return the length of the RangeIndex
         """
diff --git a/pandas/core/indexes/timedeltas.py b/pandas/core/indexes/timedeltas.py
index 2324b8cf7..8114b4a77 100644
--- a/pandas/core/indexes/timedeltas.py
+++ b/pandas/core/indexes/timedeltas.py
@@ -602,11 +602,11 @@ class TimedeltaIndex(
         return typ == self.inferred_type or typ == "timedelta"
 
     @property
-    def inferred_type(self):
+    def inferred_type(self) -> str:
         return "timedelta64"
 
     @property
-    def is_all_dates(self):
+    def is_all_dates(self) -> bool:
         return True
 
     def insert(self, loc, item):
diff --git a/pandas/core/internals/blocks.py b/pandas/core/internals/blocks.py
index 9402a3ef9..5508cf3ca 100644
--- a/pandas/core/internals/blocks.py
+++ b/pandas/core/internals/blocks.py
@@ -288,7 +288,7 @@ class Block(PandasObject):
 
         return result
 
-    def __len__(self):
+    def __len__(self) -> int:
         return len(self.values)
 
     def __getstate__(self):
diff --git a/pandas/core/internals/managers.py b/pandas/core/internals/managers.py
index 0e97e55ac..fbe1db1c2 100644
--- a/pandas/core/internals/managers.py
+++ b/pandas/core/internals/managers.py
@@ -319,7 +319,7 @@ class BlockManager(PandasObject):
         self._known_consolidated = False
         self._rebuild_blknos_and_blklocs()
 
-    def __len__(self):
+    def __len__(self) -> int:
         return len(self.items)
 
     def __repr__(self) -> str:
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 15f405e24..7327c2d54 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -712,7 +712,7 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         )
         self._values.put(*args, **kwargs)
 
-    def __len__(self):
+    def __len__(self) -> int:
         """
         Return the length of the Series.
         """
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index e98802888..ee08e2abb 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -540,7 +540,7 @@ class HDFStore:
                 return True
         return False
 
-    def __len__(self):
+    def __len__(self) -> int:
         return len(self.groups())
 
     def __repr__(self) -> str:
diff --git a/pandas/tests/reshape/test_concat.py b/pandas/tests/reshape/test_concat.py
index 5c930e01c..b537200dd 100644
--- a/pandas/tests/reshape/test_concat.py
+++ b/pandas/tests/reshape/test_concat.py
@@ -1879,7 +1879,7 @@ class TestConcatenate:
         tm.assert_frame_equal(concat(deque((df1, df2)), ignore_index=True), expected)
 
         class CustomIterator1:
-            def __len__(self):
+            def __len__(self) -> int:
                 return 2
 
             def __getitem__(self, index):
diff --git a/scripts/validate_docstrings.py b/scripts/validate_docstrings.py
index 1d0f4b583..7c6f2fea9 100755
--- a/scripts/validate_docstrings.py
+++ b/scripts/validate_docstrings.py
@@ -250,7 +250,7 @@ class Docstring:
         self.clean_doc = pydoc.getdoc(obj)
         self.doc = NumpyDocString(self.clean_doc)
 
-    def __len__(self):
+    def __len__(self) -> int:
         return len(self.raw_doc)
 
     @staticmethod
