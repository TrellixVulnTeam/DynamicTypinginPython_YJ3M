commit 016e7326220e3e72305213f486977a2dc52d7a5e
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Feb 19 19:50:42 2011 -0500

    fixed up Series.fromValue deprecation changes

diff --git a/pandas/core/common.py b/pandas/core/common.py
index a8b88e16e..ec3f2eb9d 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -1,3 +1,7 @@
+"""
+Misc tools for implementing data structures
+"""
+
 from cStringIO import StringIO
 
 from numpy.lib.format import read_array, write_array
@@ -100,3 +104,10 @@ def null_out_axis(arr, mask, axis):
         indexer[axis] = mask
 
         arr[tuple(indexer)] = np.NaN
+
+
+def ensure_float(arr):
+    if issubclass(arr.dtype.type, np.integer):
+        arr = arr.astype(float)
+
+    return arr
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 3b31d933d..3de33b2d6 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -143,7 +143,7 @@ class DataFrame(Picklable, Groupable):
                 columns = NULL_INDEX
             else:
                 for c in columns:
-                    sdict[c] = Series.fromValue(np.NaN, index=index)
+                    sdict[c] = Series(np.NaN, index=index)
 
         self._series = sdict
         self.columns = columns
@@ -180,7 +180,7 @@ class DataFrame(Picklable, Groupable):
         # add in any other columns we want to have (completeness)
         for c in columns:
             if c not in sdict:
-                sdict[c] = Series.fromValue(np.NaN, index=index)
+                sdict[c] = Series(np.NaN, index=index)
 
         return sdict, columns, index
 
@@ -505,7 +505,7 @@ class DataFrame(Picklable, Groupable):
             self._series[key] = cleanSeries
         # Scalar
         else:
-            self._series[key] = Series.fromValue(value, index=self.index)
+            self._series[key] = Series(value, index=self.index)
 
         if key not in self.columns:
             loc = self._get_insert_loc(key)
@@ -1425,11 +1425,13 @@ class DataFrame(Picklable, Groupable):
             if periods > 0:
                 def do_shift(series):
                     values = np.asarray(series).take(indexer)
+                    values = common.ensure_float(values)
                     values[:periods] = NaN
                     return values
             else:
                 def do_shift(series):
                     values = np.asarray(series).take(indexer)
+                    values = common.ensure_float(values)
                     values[periods:] = NaN
                     return values
 
@@ -1635,8 +1637,7 @@ class DataFrame(Picklable, Groupable):
                 arr = func(series, otherSeries)
 
                 if do_fill:
-                    if issubclass(arr.dtype.type, np.integer):
-                        arr = arr.astype(float)
+                    arr = common.ensure_float(arr)
                     arr[this_mask & other_mask] = np.NaN
 
                 result[col] = arr
@@ -1763,8 +1764,7 @@ class DataFrame(Picklable, Groupable):
             arr = series.view(np.ndarray).take(indexer)
 
             if need_mask:
-                if issubclass(arr.dtype.type, np.integer):
-                    arr = arr.astype(float)
+                arr = common.ensure_float(arr)
                 arr[notmask] = NaN
 
             new_data[col] = arr
@@ -2273,7 +2273,6 @@ def _extract_index(data, index):
 
     return index
 
-
 def _default_index(n):
     if n == 0:
         return NULL_INDEX
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index 066174061..5077d041a 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -1109,26 +1109,29 @@ class DataMatrix(DataFrame):
 
         if offset is None:
             indexer = self._shift_indexer(periods)
-            newValues = self.values.take(indexer, axis=0)
-            newIndex = self.index
+            new_values = self.values.take(indexer, axis=0)
+            new_index = self.index
+
+            new_values = common.ensure_float(new_values)
+
             if periods > 0:
-                newValues[:periods] = NaN
+                new_values[:periods] = NaN
             else:
-                newValues[periods:] = NaN
+                new_values[periods:] = NaN
         else:
-            newIndex = self.index.shift(periods, offset)
-            newValues = self.values.copy()
+            new_index = self.index.shift(periods, offset)
+            new_values = self.values.copy()
 
         if self.objects is not None:
             shifted_objects = self.objects.shift(periods, offset=offset,
                                                  timeRule=timeRule)
 
-            shifted_objects.index = newIndex
+            shifted_objects.index = new_index
         else:
             shifted_objects = None
 
-        return DataMatrix(data=newValues, index=newIndex, columns=self.columns,
-                          objects=shifted_objects)
+        return DataMatrix(data=new_values, index=new_index,
+                          columns=self.columns, objects=shifted_objects)
 
 def _reorder_columns(mat, current, desired):
     indexer, mask = common.get_indexer(current, desired, None)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 915dc0fe3..16304eaa8 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -818,7 +818,7 @@ class Series(np.ndarray, Picklable, Groupable):
             new_index = Index(new_index)
 
         if len(self.index) == 0:
-            return Series.fromValue(NaN, index=new_index)
+            return Series(NaN, index=new_index)
 
         if method is not None:
             method = method.upper()
diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index d96a7f9c7..e9bb693f3 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -1149,6 +1149,9 @@ class TestDataFrame(unittest.TestCase):
         assert_series_equal(self.tsframe.xs(d),
                             shiftedFrame.xs(shifted_d))
 
+        # shift int frame
+        int_shifted = self.intframe.shift(1)
+
     def test_apply(self):
         # ufunc
         applied = self.frame.apply(np.sqrt)
diff --git a/pandas/core/tests/test_series.py b/pandas/core/tests/test_series.py
index 7f6f24d02..6431ba9bc 100644
--- a/pandas/core/tests/test_series.py
+++ b/pandas/core/tests/test_series.py
@@ -95,15 +95,18 @@ class TestSeries(unittest.TestCase):
         pass
 
     def test_fromValue(self):
-        nans = Series.fromValue(np.NaN, index=self.ts.index)
+        nans = Series(np.NaN, index=self.ts.index)
         self.assert_(nans.dtype == np.float_)
+        self.assertEqual(len(nans), len(self.ts))
 
-        strings = Series.fromValue('foo', index=self.ts.index)
+        strings = Series('foo', index=self.ts.index)
         self.assert_(strings.dtype == np.object_)
+        self.assertEqual(len(strings), len(self.ts))
 
         d = datetime.now()
-        dates = Series.fromValue(d, index=self.ts.index)
+        dates = Series(d, index=self.ts.index)
         self.assert_(dates.dtype == np.object_)
+        self.assertEqual(len(dates), len(self.ts))
 
     def test_contains(self):
         common.assert_contains_all(self.ts.index, self.ts)
