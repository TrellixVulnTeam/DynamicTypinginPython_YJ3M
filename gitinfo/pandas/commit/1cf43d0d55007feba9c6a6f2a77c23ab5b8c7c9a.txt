commit 1cf43d0d55007feba9c6a6f2a77c23ab5b8c7c9a
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri May 25 15:45:57 2012 -0400

    ENH: create datetime arrays in type inference, more testing needed

diff --git a/pandas/core/series.py b/pandas/core/series.py
index 9576a55f0..c01077b62 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -2623,21 +2623,27 @@ def _sanitize_array(data, index, dtype=None, copy=False,
 
     # GH #846
     if isinstance(data, np.ndarray):
+        subarr = data
         if dtype is not None:
+
             # possibility of nan -> garbage
             if com.is_float_dtype(data.dtype) and com.is_integer_dtype(dtype):
                 if not isnull(data).any():
                     subarr = _try_cast(data)
                 elif copy:
                     subarr = data.copy()
-                else:
-                    subarr = data
             else:
-                subarr = _try_cast(data)
+                if (com.is_datetime64_dtype(data.dtype) and
+                    not com.is_datetime64_dtype(dtype)):
+                    if dtype == object:
+                        ints = np.asarray(data).view('i8')
+                        subarr = lib.ints_to_pydatetime(ints)
+                    elif raise_cast_failure:
+                        raise TypeError('Cannot cast datetime64 to %s' % dtype)
+                else:
+                    subarr = _try_cast(data)
         elif copy:
             subarr = data.copy()
-        else:
-            subarr = data
     elif isinstance(data, list) and len(data) > 0:
         if dtype is not None:
             try:
diff --git a/pandas/src/inference.pyx b/pandas/src/inference.pyx
index 712a482ba..28e8f4394 100644
--- a/pandas/src/inference.pyx
+++ b/pandas/src/inference.pyx
@@ -271,7 +271,7 @@ def maybe_convert_numeric(ndarray[object] values, set na_values):
         return ints
 
 def maybe_convert_objects(ndarray[object] objects, bint try_float=0,
-                          bint safe=0):
+                          bint safe=0, bint convert_datetime=1):
     '''
     Type inference function-- convert object array to proper dtype
     '''
@@ -281,8 +281,10 @@ def maybe_convert_objects(ndarray[object] objects, bint try_float=0,
         ndarray[complex128_t] complexes
         ndarray[int64_t] ints
         ndarray[uint8_t] bools
+        ndarray[int64_t] idatetimes
         bint seen_float = 0
         bint seen_complex = 0
+        bint seen_datetime = 0
         bint seen_int = 0
         bint seen_bool = 0
         bint seen_object = 0
@@ -296,6 +298,8 @@ def maybe_convert_objects(ndarray[object] objects, bint try_float=0,
     complexes = np.empty(n, dtype='c16')
     ints = np.empty(n, dtype='i8')
     bools = np.empty(n, dtype=np.uint8)
+    datetimes = np.empty(n, dtype='M8[ns]')
+    idatetimes = datetimes.view(np.int64)
 
     onan = np.nan
     fnan = np.nan
@@ -309,10 +313,6 @@ def maybe_convert_objects(ndarray[object] objects, bint try_float=0,
         elif util.is_bool_object(val):
             seen_bool = 1
             bools[i] = val
-        elif util.is_datetime64_object(val):
-            # convert to datetime.datetime for now
-            seen_object = 1
-            objects[i] = val.astype('O')
         elif util.is_integer_object(val):
             seen_int = 1
             floats[i] = <float64_t> val
@@ -325,6 +325,19 @@ def maybe_convert_objects(ndarray[object] objects, bint try_float=0,
         elif util.is_complex_object(val):
             complexes[i] = val
             seen_complex = 1
+        elif util.is_datetime64_object(val):
+            if convert_datetime:
+                idatetimes[i] = convert_to_tsobject(val).value
+                seen_datetime = 1
+            else:
+                seen_object = 1
+                # objects[i] = val.astype('O')
+        elif PyDateTime_Check(val):
+            if convert_datetime:
+                seen_datetime = 1
+                idatetimes[i] = convert_to_tsobject(val).value
+            else:
+                seen_object = 1
         elif try_float and not util.is_string_object(val):
             # this will convert Decimal objects
             try:
@@ -349,12 +362,18 @@ def maybe_convert_objects(ndarray[object] objects, bint try_float=0,
             if seen_object:
                 return objects
             elif not seen_bool:
-                if seen_complex:
-                    return complexes
-                elif seen_float:
-                    return floats
-                elif seen_int:
-                    return ints
+                if seen_datetime:
+                    if seen_complex or seen_float or seen_int:
+                        return objects
+                    else:
+                        return datetimes
+                else:
+                    if seen_complex:
+                        return complexes
+                    elif seen_float:
+                        return floats
+                    elif seen_int:
+                        return ints
             else:
                 if not seen_float and not seen_int:
                     return bools.view(np.bool_)
@@ -374,14 +393,20 @@ def maybe_convert_objects(ndarray[object] objects, bint try_float=0,
             if seen_object:
                 return objects
             elif not seen_bool:
-                if seen_int and seen_float:
-                    return objects
-                elif seen_complex:
-                    return complexes
-                elif seen_float:
-                    return floats
-                elif seen_int:
-                    return ints
+                if seen_datetime:
+                    if seen_complex or seen_float or seen_int:
+                        return objects
+                    else:
+                        return datetimes
+                else:
+                    if seen_int and seen_float:
+                        return objects
+                    elif seen_complex:
+                        return complexes
+                    elif seen_float:
+                        return floats
+                    elif seen_int:
+                        return ints
             else:
                 if not seen_float and not seen_int:
                     return bools.view(np.bool_)
@@ -596,7 +621,8 @@ def map_infer(ndarray arr, object f):
 
         result[i] = val
 
-    return maybe_convert_objects(result, try_float=0)
+    return maybe_convert_objects(result, try_float=0,
+                                 convert_datetime=0)
 
 def to_object_array(list rows):
     cdef:
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 6aff85918..d43bb58c4 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1524,7 +1524,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         # can't cast to float
         test_data = {
-                'A' : dict(zip(range(20), tm.makeDateIndex(20))),
+                'A' : dict(zip(range(20), tm.makeStringIndex(20))),
                 'B' : dict(zip(range(15), randn(15)))
         }
         frame = DataFrame(test_data, dtype=float)
