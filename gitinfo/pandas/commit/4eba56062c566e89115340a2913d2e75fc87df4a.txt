commit 4eba56062c566e89115340a2913d2e75fc87df4a
Author: jreback <jeff@reback.net>
Date:   Mon Jan 27 07:40:45 2014 -0500

    BUG: Bug in assignment with duplicate columns in a frame where the locations
         are a slice (e.g. next to each other) (GH6120)

diff --git a/doc/source/release.rst b/doc/source/release.rst
index 6593ba78a..2a6cdc636 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -157,6 +157,8 @@ Bug Fixes
   - Bug with insert of strings into DatetimeIndex (:issue:`5818`)
   - Fixed unicode bug in to_html/HTML repr (:issue:`6098`)
   - Fixed missing arg validation in get_options_data (:issue:`6105`)
+  - Bug in assignment with duplicate columns in a frame where the locations
+    are a slice (e.g. next to each other) (:issue:`6120`)
 
 pandas 0.13.0
 -------------
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 75c0a24b1..3a31f99cd 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -2969,7 +2969,7 @@ class BlockManager(PandasObject):
                 # we are inserting one by one, so the index can go from unique
                 # to non-unique during the loop, need to have _ref_locs defined
                 # at all times
-                if np.isscalar(item) and com.is_list_like(loc):
+                if np.isscalar(item) and (com.is_list_like(loc) or isinstance(loc, slice)):
 
                     # first delete from all blocks
                     self.delete(item)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 2233f2749..21ea6505b 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3229,6 +3229,21 @@ class TestDataFrame(tm.TestCase, CheckIndexing,
             result = getattr(df,op)(df)
             check(result,expected)
 
+        # multiple assignments that change dtypes
+        # the location indexer is a slice
+        # GH 6120
+        df = DataFrame(np.random.randn(5,2), columns=['that', 'that'])
+        expected = DataFrame(1.0, index=range(5), columns=['that', 'that'])
+
+        df['that'] = 1.0
+        check(df, expected)
+
+        df = DataFrame(np.random.rand(5,2), columns=['that', 'that'])
+        expected = DataFrame(1, index=range(5), columns=['that', 'that'])
+
+        df['that'] = 1
+        check(df, expected)
+
     def test_column_dups_indexing(self):
 
         def check(result, expected=None):
