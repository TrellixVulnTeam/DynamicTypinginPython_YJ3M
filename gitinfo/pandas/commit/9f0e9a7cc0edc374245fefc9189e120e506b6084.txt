commit 9f0e9a7cc0edc374245fefc9189e120e506b6084
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Apr 23 21:42:23 2010 +0000

    cap, floor, and unit tests
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@161 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 4f6ac4ed6..da0740337 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -824,17 +824,13 @@ class DataFrame(Picklable, Groupable):
 
         if before is None:
             beg_slice = 0
-        elif before not in self.index:
-            beg_slice = self.index.searchsorted(before, side='left')
         else:
-            beg_slice = self.index.indexMap[before]
+            beg_slice = self.index.searchsorted(before, side='left')
 
         if after is None:
             end_slice = len(self.index)
-        elif after not in self.index:
-            end_slice = self.index.searchsorted(after, side='right')
         else:
-            end_slice = self.index.indexMap[after] + 1
+            end_slice = self.index.searchsorted(after, side='right')
 
         return beg_slice, end_slice
 
@@ -1450,6 +1446,26 @@ class DataFrame(Picklable, Groupable):
         else:
             raise Exception('Must have 0<= axis <= 1')
 
+    def cap(self, threshold):
+        """
+        Trim values at threshold
+
+        Returns
+        -------
+        DataFrame
+        """
+        return self.apply(lambda x: x.cap(threshold))
+
+    def floor(self, threshold):
+        """
+        Trim values below threshold
+
+        Returns
+        -------
+        DataFrame
+        """
+        return self.apply(lambda x: x.floor(threshold))
+
     # ndarray-like stats methods
     def count(self, axis=0):
         """
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index cfd23196c..fc8f57531 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -1212,6 +1212,32 @@ class DataMatrix(DataFrame):
         return DataMatrix(data=newValues, index=newIndex, columns=self.columns,
                           objects=shifted_objects)
 
+    def cap(self, threshold):
+        """
+        Trim values at threshold
+
+        Returns
+        -------
+        DataMatrix
+        """
+        return DataMatrix(np.where(self.values > threshold,
+                                   threshold, self.values),
+                          index=self.index, columns=self.columns,
+                          objects=self.objects)
+
+    def floor(self, threshold):
+        """
+        Trim values below threshold
+
+        Returns
+        -------
+        DataMatrix
+        """
+        return DataMatrix(np.where(self.values < threshold,
+                                   threshold, self.values),
+                          index=self.index, columns=self.columns,
+                          objects=self.objects)
+
 def _reorder_columns(mat, current, desired):
     fillVec, mask = tseries.getFillVec(current, desired, current.indexMap,
                                        desired.indexMap, None)
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 992258b43..6ab70ec69 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -926,27 +926,17 @@ class WidePanel(Panel):
         index = self._get_axis(axis)
 
         if before is None:
-            before = index[0]
-        elif before not in index:
-            loc = index.searchsorted(before, side='left')
-            before = index[loc]
+            beg_slice = 0
+        else:
+            beg_slice = index.searchsorted(before, side='left')
 
         if after is None:
-            after = index[-1]
-        elif after not in index:
-            loc = index.searchsorted(after, side='right') - 1
-
-            if loc >= len(index):
-                loc = -1
-
-            after = index[loc]
-
-        beg_slice = index.indexMap[before]
-        end_slice = index.indexMap[after] + 1
+            end_slice = len(index)
+        else:
+            end_slice = index.searchsorted(after, side='right')
 
         return beg_slice, end_slice
 
-
 #-------------------------------------------------------------------------------
 # LongPanel and friends
 
@@ -1035,6 +1025,9 @@ class LongPanel(Panel):
         major_labels, _ = getMergeVec(major_vec, major_axis.indexMap)
         minor_labels, _ = getMergeVec(minor_vec, minor_axis.indexMap)
 
+        for col in exclude:
+            del data[col]
+
         factor_dict = {}
         for col in data.keys():
             series = data[col]
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 29a60caf5..e3f359d61 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -735,17 +735,13 @@ class Series(np.ndarray, Picklable, Groupable):
 
         f.close()
 
-    def cap(self, value):
+    def cap(self, threshold):
         """Return copy of series with values above given value truncated"""
-        myCopy = self.copy()
-        myCopy[notnull(myCopy) & (myCopy > value)] = value
-        return myCopy
+        return np.where(self > threshold, threshold, self)
 
-    def floor(self, value):
+    def floor(self, threshold):
         """Return copy of series with values BELOW given value truncated"""
-        myCopy = self.copy()
-        myCopy[notnull(myCopy) & (myCopy < value)] = value
-        return myCopy
+        return np.where(self < threshold, threshold, self)
 
     def valid(self):
         """
diff --git a/pandas/core/tests/test_panel.py b/pandas/core/tests/test_panel.py
index 2562327f8..3c58ab2e8 100644
--- a/pandas/core/tests/test_panel.py
+++ b/pandas/core/tests/test_panel.py
@@ -457,6 +457,27 @@ class TestWidePanel(unittest.TestCase, PanelTests):
 
         self.assertRaises(Exception, self.panel.shift, 1, axis='items')
 
+    def test_truncate(self):
+        dates = self.panel.major_axis
+        start, end = dates[1], dates[5]
+
+        trunced = self.panel.truncate(start, end, axis='major')
+        expected = self.panel['ItemA'].truncate(start, end)
+
+        assert_frame_equal(trunced['ItemA'], expected)
+
+        trunced = self.panel.truncate(before=start, axis='major')
+        expected = self.panel['ItemA'].truncate(before=start)
+
+        assert_frame_equal(trunced['ItemA'], expected)
+
+        trunced = self.panel.truncate(after=end, axis='major')
+        expected = self.panel['ItemA'].truncate(after=end)
+
+        assert_frame_equal(trunced['ItemA'], expected)
+
+        # XXX test other axes
+
 class TestLongPanelIndex(unittest.TestCase):
 
     def setUp(self):
