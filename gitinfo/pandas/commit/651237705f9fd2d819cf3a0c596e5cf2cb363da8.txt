commit 651237705f9fd2d819cf3a0c596e5cf2cb363da8
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Apr 4 20:23:09 2012 -0400

    ENH: can group by level 0, enables grouping non-unique indexes, close #643

diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 927a9c413..342ec6c89 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -678,7 +678,7 @@ def generate_bins_generic(values, binner, closed, label):
 
     Returns
     -------
-    bins : array of offsets (into 'values' argument) of bins. 
+    bins : array of offsets (into 'values' argument) of bins.
         Zero and last edge are excluded in result, so for instance the first
         bin is values[0:bin[0]] and the last is values[bin[-1]:]
     labels : array of labels of bins
@@ -978,8 +978,13 @@ class Grouping(object):
 def _get_grouper(obj, key=None, axis=0, level=None, sort=True):
     group_axis = obj._get_axis(axis)
 
-    if level is not None and not isinstance(group_axis, MultiIndex):
-        raise ValueError('can only specify level with multi-level index')
+    if level is not None:
+        if not isinstance(group_axis, MultiIndex):
+            if level > 0:
+                raise ValueError('level > 0 only valid with MultiIndex')
+            else:
+                level = None
+                key = group_axis
 
     if isinstance(key, CustomGrouper):
         key.set_obj(obj)
diff --git a/pandas/tests/test_datetime64.py b/pandas/tests/test_datetime64.py
index 3c2b9c9fa..bcb682283 100644
--- a/pandas/tests/test_datetime64.py
+++ b/pandas/tests/test_datetime64.py
@@ -568,7 +568,6 @@ class TestDatetime64(unittest.TestCase):
         self.assertEquals(len(idx1), len(idx2))
         self.assertEquals(idx1.offset, idx2.offset)
 
-
     def test_dti_snap(self):
         dti = DatetimeIndex(['1/1/2002', '1/2/2002', '1/3/2002', '1/4/2002',
                              '1/5/2002', '1/6/2002', '1/7/2002'], freq='D')
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index e7d9140b0..50c280284 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -1038,7 +1038,7 @@ class TestGroupBy(unittest.TestCase):
         assert_frame_equal(result1, expected1.T)
 
         # raise exception for non-MultiIndex
-        self.assertRaises(ValueError, self.df.groupby, level=0)
+        self.assertRaises(ValueError, self.df.groupby, level=1)
 
     def test_groupby_level_apply(self):
         frame = self.mframe
diff --git a/pandas/tests/test_timeseries.py b/pandas/tests/test_timeseries.py
index 898a9d4d6..d2d3461b3 100644
--- a/pandas/tests/test_timeseries.py
+++ b/pandas/tests/test_timeseries.py
@@ -48,7 +48,6 @@ class TestTimeSeriesDuplicates(unittest.TestCase):
         uniques = self.dups.index.unique()
         self.assert_(uniques.dtype == 'M8') # sanity
 
-
     def test_duplicate_dates_indexing(self):
         ts = self.dups
 
@@ -73,6 +72,11 @@ class TestTimeSeriesDuplicates(unittest.TestCase):
         self.assertRaises(KeyError, ts.__getitem__, datetime(2000, 1, 6))
         self.assertRaises(KeyError, ts.__setitem__, datetime(2000, 1, 6), 0)
 
+    def test_groupby_average_dup_values(self):
+        result = self.dups.groupby(level=0).mean()
+        expected = self.dups.groupby(self.dups.index).mean()
+        assert_series_equal(result, expected)
+
 
 def assert_range_equal(left, right):
     assert(left.equals(right))
