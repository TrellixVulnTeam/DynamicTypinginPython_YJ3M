commit 138b3ef6caa3a27da268cf32d06f181dcc140f8e
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Jan 5 17:48:32 2010 +0000

    * Cleaned up and sped up DataMatrix and DataFrame pickling
    * Fixed Series.combineFirst corner case failure
    * Fixed Series.__repr__ when empty
    * Moved utility functions to common.py in pandas.core
    
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@105 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/common.py b/pandas/core/common.py
new file mode 100644
index 000000000..3e7577a4a
--- /dev/null
+++ b/pandas/core/common.py
@@ -0,0 +1,30 @@
+from cStringIO import StringIO
+
+from numpy.lib.format import read_array, write_array
+import numpy as np
+
+from pandas.lib.tseries import isnull
+
+def _pickle_array(arr):
+    arr = arr.view(np.ndarray)
+
+    buf = StringIO()
+    write_array(buf, arr)
+
+    return buf.getvalue()
+
+def _unpickle_array(bytes):
+    arr = read_array(StringIO(bytes))
+    return arr
+
+def _pfixed(s, space, nanRep=None, float_format=None):
+    if isinstance(s, float):
+        if nanRep is not None and isnull(s):
+            return nanRep.ljust(space)
+
+        formatted = float_format(s) if float_format else '%.4g' % s
+
+        return formatted.ljust(space)
+    else:
+        return str(s)[:space-4].ljust(space)
+
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index f26c1f729..a8897bdc4 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1,6 +1,6 @@
 # pylint: disable-msg=E1101
 # pylint: disable-msg=E1103
-# pylint: disable-msg=W0212,W0703,W0622
+# pylint: disable-msg=W0212,W0231,W0703,W0622
 
 from cStringIO import StringIO
 import operator
@@ -9,6 +9,7 @@ import sys
 from numpy import NaN
 import numpy as np
 
+from pandas.core.common import _pickle_array, _unpickle_array, _pfixed
 from pandas.core.daterange import DateRange
 from pandas.core.index import Index, NULL_INDEX
 from pandas.core.mixins import Picklable, Groupable
@@ -88,6 +89,20 @@ class DataFrame(Picklable, Groupable):
         else:
             self.index = NULL_INDEX
 
+    def __getstate__(self):
+        series = dict((k, v.values()) for k, v in self.iteritems())
+        index = _pickle_array(self.index)
+
+        return series, index
+
+    def __setstate__(self, state):
+        series, idx = state
+
+        self.index = index = _unpickle_array(idx)
+        self._series = dict((k, Series(v, index=index))
+                            for k, v in series.iteritems())
+
+    _index = None
     def _set_index(self, index):
         if isinstance(index, Index):
             self._index = index
@@ -1093,7 +1108,7 @@ class DataFrame(Picklable, Groupable):
         results = dict([(k, func(target[k])) for k in target.columns])
 
         if hasattr(results.values()[0], '__iter__'):
-            return DataFrame(data=results, index=self.index)
+            return DataFrame(data=results, index=target.index)
         else:
             return Series.fromDict(results)
 
@@ -1140,7 +1155,7 @@ class DataFrame(Picklable, Groupable):
         """
         import re
 
-        if items:
+        if items is not None:
             data = dict([(r, self[r]) for r in items if r in self])
             return DataFrame(data=data, index=self.index)
         elif like:
@@ -1725,16 +1740,3 @@ class DataFrame(Picklable, Groupable):
 
         return Series(theSkew, index=self._get_axis(axis))
 
-def _pfixed(s, space, nanRep=None, float_format=None):
-    if isinstance(s, float):
-        if nanRep is not None and isnull(s):
-            return nanRep.ljust(space)
-
-        if float_format:
-            return float_format(s)
-        else:
-            fstring = '%.4g'
-            return (fstring % s).ljust(space)
-    else:
-        return str(s)[:space-4].ljust(space)
-
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index 0ce119450..27cbebbe1 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -4,11 +4,11 @@
 from cStringIO import StringIO
 import sys
 
-from numpy.lib.format import read_array, write_array
 from numpy import NaN
 import numpy as np
 
-from pandas.core.frame import DataFrame, _pfixed
+from pandas.core.common import _pfixed, _pickle_array, _unpickle_array
+from pandas.core.frame import DataFrame
 from pandas.core.index import Index, NULL_INDEX
 from pandas.core.series import Series
 from pandas.lib.tseries import isnull, notnull
@@ -166,37 +166,33 @@ class DataMatrix(DataFrame):
         self.objects = objects
 
     def __getstate__(self):
-        valsIO = StringIO()
-        colsIO = StringIO()
-        idxIO = StringIO()
-
-        write_array(valsIO, self.values)
-        write_array(colsIO, self.columns)
-        write_array(idxIO, self.index)
-
         if self.objects is not None:
-            objects = self.objects.__getstate__()
+            objects = self.objects._matrix_state(pickle_index=False)
         else:
             objects = None
 
-        return (valsIO.getvalue(), colsIO.getvalue(),
-                idxIO.getvalue(), objects)
+        state = self._matrix_state()
 
-    def __setstate__(self, state):
-        vals, cols, idx, objects = state
+        return (state, objects)
 
-        def interpret(s):
-            arr = read_array(StringIO(s))
-            return arr
+    def _matrix_state(self, pickle_index=True):
+        columns = _pickle_array(self.columns)
+        index = _pickle_array(self.index) if pickle_index else None
 
-        self.values = interpret(vals)
-        self.index = interpret(idx)
-        self.columns = interpret(cols)
+        return self.values, index, columns
 
-        if objects is not None:
-            ovals, ocols, oidx, _ = objects
-            self.objects = DataMatrix(interpret(ovals), index=self.index,
-                                      columns=interpret(ocols))
+    def __setstate__(self, state):
+        (vals, idx, cols), object_state = state
+
+        self.values = vals
+        self.index = _unpickle_array(idx)
+        self.columns = _unpickle_array(cols)
+
+        if object_state:
+            ovals, _, ocols = object_state
+            self.objects = DataMatrix(_unpickle_array(ovals),
+                                      index=self.index,
+                                      columns=_unpickle_array(ocols))
         else:
             self.objects = None
 
@@ -457,7 +453,6 @@ class DataMatrix(DataFrame):
 
     columns = property(fget=_get_columns, fset=_set_columns)
 
-    _index = None
     def _set_index(self, index):
         if index is None:
             if self.values is not None and self.values.shape[0] > 0:
@@ -1614,7 +1609,6 @@ class DataMatrix(DataFrame):
 
         return DataMatrix(seriesDict, index=self.index)
 
-
 def _reorder_columns(mat, current, desired):
     fillVec, mask = tseries.getFillVec(current, desired, current.indexMap,
                                        desired.indexMap, '')
diff --git a/pandas/core/mixins.py b/pandas/core/mixins.py
index 32b845088..e3e978afc 100644
--- a/pandas/core/mixins.py
+++ b/pandas/core/mixins.py
@@ -8,7 +8,7 @@ import cPickle
 class Picklable(object):
     def save(self, fileName):
         with open(fileName, 'wb') as f:
-            cPickle.dump(self, f)
+            cPickle.dump(self, f, protocol=cPickle.HIGHEST_PROTOCOL)
 
     @classmethod
     def load(cls, fileName):
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 1c071693f..b9679ac46 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -337,11 +337,13 @@ class Series(np.ndarray, Picklable, Groupable):
             head = _seriesRepr(index[:50], vals[:50])
             tail = _seriesRepr(index[-50:], vals[-50:])
             return head + '\n...\n' + tail + '\nlength: %d' % len(vals)
-        else:
+        elif len(index) > 0:
             return _seriesRepr(index, vals)
+        else:
+            return '%s' % ndarray.__repr__(self)
 
     def __str__(self):
-        return self.__repr__()
+        return repr(self)
 
     def __iter__(self):
         return iter(self.values())
@@ -535,11 +537,12 @@ class Series(np.ndarray, Picklable, Groupable):
         y : Series
             formed as union of two Series
         """
-        newIndex = self.index + other.index
-
-        this = self
-        if newIndex is not self.index:
+        if self.index.equals(other.index):
+            newIndex = self.index
             # save ourselves the copying in this case
+            this = self
+        else:
+            newIndex = self.index + other.index
 
             this = self.reindex(newIndex)
             other = other.reindex(newIndex)
diff --git a/pandas/core/tests/test_series.py b/pandas/core/tests/test_series.py
index f7db9a2d1..a3f5bbcfd 100644
--- a/pandas/core/tests/test_series.py
+++ b/pandas/core/tests/test_series.py
@@ -337,6 +337,11 @@ class TestSeries(unittest.TestCase):
         common.assert_dict_equal(strings, combined, compare_keys=False)
         common.assert_dict_equal(floats[1::2], combined, compare_keys=False)
 
+        # corner case
+        s = Series([1., 2, 3], index=[0, 1, 2])
+        result = s.combineFirst(Series([], index=[]))
+        common.assert_series_equal(s, result)
+
     def test_overloads(self):
         methods = ['argsort', 'cumsum', 'cumprod']
 
