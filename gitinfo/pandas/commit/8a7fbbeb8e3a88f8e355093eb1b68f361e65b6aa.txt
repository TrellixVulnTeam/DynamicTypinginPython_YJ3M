commit 8a7fbbeb8e3a88f8e355093eb1b68f361e65b6aa
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Wed Feb 12 13:47:26 2020 -0800

    TST: parametrize generic/internals tests (#31900)

diff --git a/pandas/tests/generic/test_frame.py b/pandas/tests/generic/test_frame.py
index d8f425756..dca65152e 100644
--- a/pandas/tests/generic/test_frame.py
+++ b/pandas/tests/generic/test_frame.py
@@ -32,19 +32,20 @@ class TestDataFrame(Generic):
         )
         df.rename(str.lower)
 
-    def test_set_axis_name(self):
+    @pytest.mark.parametrize("func", ["_set_axis_name", "rename_axis"])
+    def test_set_axis_name(self, func):
         df = pd.DataFrame([[1, 2], [3, 4]])
-        funcs = ["_set_axis_name", "rename_axis"]
-        for func in funcs:
-            result = methodcaller(func, "foo")(df)
-            assert df.index.name is None
-            assert result.index.name == "foo"
 
-            result = methodcaller(func, "cols", axis=1)(df)
-            assert df.columns.name is None
-            assert result.columns.name == "cols"
+        result = methodcaller(func, "foo")(df)
+        assert df.index.name is None
+        assert result.index.name == "foo"
 
-    def test_set_axis_name_mi(self):
+        result = methodcaller(func, "cols", axis=1)(df)
+        assert df.columns.name is None
+        assert result.columns.name == "cols"
+
+    @pytest.mark.parametrize("func", ["_set_axis_name", "rename_axis"])
+    def test_set_axis_name_mi(self, func):
         df = DataFrame(
             np.empty((3, 3)),
             index=MultiIndex.from_tuples([("A", x) for x in list("aBc")]),
@@ -52,15 +53,14 @@ class TestDataFrame(Generic):
         )
 
         level_names = ["L1", "L2"]
-        funcs = ["_set_axis_name", "rename_axis"]
-        for func in funcs:
-            result = methodcaller(func, level_names)(df)
-            assert result.index.names == level_names
-            assert result.columns.names == [None, None]
 
-            result = methodcaller(func, level_names, axis=1)(df)
-            assert result.columns.names == ["L1", "L2"]
-            assert result.index.names == [None, None]
+        result = methodcaller(func, level_names)(df)
+        assert result.index.names == level_names
+        assert result.columns.names == [None, None]
+
+        result = methodcaller(func, level_names, axis=1)(df)
+        assert result.columns.names == ["L1", "L2"]
+        assert result.index.names == [None, None]
 
     def test_nonzero_single_element(self):
 
@@ -185,36 +185,35 @@ class TestDataFrame(Generic):
 
 # formerly in Generic but only test DataFrame
 class TestDataFrame2:
-    def test_validate_bool_args(self):
+    @pytest.mark.parametrize("value", [1, "True", [1, 2, 3], 5.0])
+    def test_validate_bool_args(self, value):
         df = DataFrame({"a": [1, 2, 3], "b": [4, 5, 6]})
-        invalid_values = [1, "True", [1, 2, 3], 5.0]
 
-        for value in invalid_values:
-            with pytest.raises(ValueError):
-                super(DataFrame, df).rename_axis(
-                    mapper={"a": "x", "b": "y"}, axis=1, inplace=value
-                )
+        with pytest.raises(ValueError):
+            super(DataFrame, df).rename_axis(
+                mapper={"a": "x", "b": "y"}, axis=1, inplace=value
+            )
 
-            with pytest.raises(ValueError):
-                super(DataFrame, df).drop("a", axis=1, inplace=value)
+        with pytest.raises(ValueError):
+            super(DataFrame, df).drop("a", axis=1, inplace=value)
 
-            with pytest.raises(ValueError):
-                super(DataFrame, df)._consolidate(inplace=value)
+        with pytest.raises(ValueError):
+            super(DataFrame, df)._consolidate(inplace=value)
 
-            with pytest.raises(ValueError):
-                super(DataFrame, df).fillna(value=0, inplace=value)
+        with pytest.raises(ValueError):
+            super(DataFrame, df).fillna(value=0, inplace=value)
 
-            with pytest.raises(ValueError):
-                super(DataFrame, df).replace(to_replace=1, value=7, inplace=value)
+        with pytest.raises(ValueError):
+            super(DataFrame, df).replace(to_replace=1, value=7, inplace=value)
 
-            with pytest.raises(ValueError):
-                super(DataFrame, df).interpolate(inplace=value)
+        with pytest.raises(ValueError):
+            super(DataFrame, df).interpolate(inplace=value)
 
-            with pytest.raises(ValueError):
-                super(DataFrame, df)._where(cond=df.a > 2, inplace=value)
+        with pytest.raises(ValueError):
+            super(DataFrame, df)._where(cond=df.a > 2, inplace=value)
 
-            with pytest.raises(ValueError):
-                super(DataFrame, df).mask(cond=df.a > 2, inplace=value)
+        with pytest.raises(ValueError):
+            super(DataFrame, df).mask(cond=df.a > 2, inplace=value)
 
     def test_unexpected_keyword(self):
         # GH8597
@@ -243,23 +242,10 @@ class TestToXArray:
         and LooseVersion(xarray.__version__) < LooseVersion("0.10.0"),
         reason="xarray >= 0.10.0 required",
     )
-    @pytest.mark.parametrize(
-        "index",
-        [
-            "FloatIndex",
-            "IntIndex",
-            "StringIndex",
-            "UnicodeIndex",
-            "DateIndex",
-            "PeriodIndex",
-            "CategoricalIndex",
-            "TimedeltaIndex",
-        ],
-    )
+    @pytest.mark.parametrize("index", tm.all_index_generator(3))
     def test_to_xarray_index_types(self, index):
         from xarray import Dataset
 
-        index = getattr(tm, f"make{index}")
         df = DataFrame(
             {
                 "a": list("abc"),
@@ -273,7 +259,7 @@ class TestToXArray:
             }
         )
 
-        df.index = index(3)
+        df.index = index
         df.index.name = "foo"
         df.columns.name = "bar"
         result = df.to_xarray()
diff --git a/pandas/tests/generic/test_generic.py b/pandas/tests/generic/test_generic.py
index 02d803795..8e54de771 100644
--- a/pandas/tests/generic/test_generic.py
+++ b/pandas/tests/generic/test_generic.py
@@ -257,39 +257,31 @@ class Generic:
             self.check_metadata(v1 & v2)
             self.check_metadata(v1 | v2)
 
-    def test_head_tail(self):
+    @pytest.mark.parametrize("index", tm.all_index_generator(10))
+    def test_head_tail(self, index):
         # GH5370
 
         o = self._construct(shape=10)
 
-        # check all index types
-        for index in [
-            tm.makeFloatIndex,
-            tm.makeIntIndex,
-            tm.makeStringIndex,
-            tm.makeUnicodeIndex,
-            tm.makeDateIndex,
-            tm.makePeriodIndex,
-        ]:
-            axis = o._get_axis_name(0)
-            setattr(o, axis, index(len(getattr(o, axis))))
+        axis = o._get_axis_name(0)
+        setattr(o, axis, index)
 
-            o.head()
+        o.head()
 
-            self._compare(o.head(), o.iloc[:5])
-            self._compare(o.tail(), o.iloc[-5:])
+        self._compare(o.head(), o.iloc[:5])
+        self._compare(o.tail(), o.iloc[-5:])
 
-            # 0-len
-            self._compare(o.head(0), o.iloc[0:0])
-            self._compare(o.tail(0), o.iloc[0:0])
+        # 0-len
+        self._compare(o.head(0), o.iloc[0:0])
+        self._compare(o.tail(0), o.iloc[0:0])
 
-            # bounded
-            self._compare(o.head(len(o) + 1), o)
-            self._compare(o.tail(len(o) + 1), o)
+        # bounded
+        self._compare(o.head(len(o) + 1), o)
+        self._compare(o.tail(len(o) + 1), o)
 
-            # neg index
-            self._compare(o.head(-3), o.head(7))
-            self._compare(o.tail(-3), o.tail(7))
+        # neg index
+        self._compare(o.head(-3), o.head(7))
+        self._compare(o.tail(-3), o.tail(7))
 
     def test_sample(self):
         # Fixes issue: 2419
@@ -468,16 +460,16 @@ class Generic:
         with pytest.raises(TypeError, match=errmsg):
             obj.any(epic=starwars)  # logical_function
 
-    def test_api_compat(self):
+    @pytest.mark.parametrize("func", ["sum", "cumsum", "any", "var"])
+    def test_api_compat(self, func):
 
         # GH 12021
         # compat for __name__, __qualname__
 
         obj = self._construct(5)
-        for func in ["sum", "cumsum", "any", "var"]:
-            f = getattr(obj, func)
-            assert f.__name__ == func
-            assert f.__qualname__.endswith(func)
+        f = getattr(obj, func)
+        assert f.__name__ == func
+        assert f.__qualname__.endswith(func)
 
     def test_stat_non_defaults_args(self):
         obj = self._construct(5)
@@ -510,19 +502,17 @@ class Generic:
         self._compare(big.truncate(before=0, after=3e6), big)
         self._compare(big.truncate(before=-1, after=2e6), big)
 
-    def test_copy_and_deepcopy(self):
+    @pytest.mark.parametrize(
+        "func",
+        [copy, deepcopy, lambda x: x.copy(deep=False), lambda x: x.copy(deep=True)],
+    )
+    @pytest.mark.parametrize("shape", [0, 1, 2])
+    def test_copy_and_deepcopy(self, shape, func):
         # GH 15444
-        for shape in [0, 1, 2]:
-            obj = self._construct(shape)
-            for func in [
-                copy,
-                deepcopy,
-                lambda x: x.copy(deep=False),
-                lambda x: x.copy(deep=True),
-            ]:
-                obj_copy = func(obj)
-                assert obj_copy is not obj
-                self._compare(obj_copy, obj)
+        obj = self._construct(shape)
+        obj_copy = func(obj)
+        assert obj_copy is not obj
+        self._compare(obj_copy, obj)
 
     @pytest.mark.parametrize(
         "periods,fill_method,limit,exp",
diff --git a/pandas/tests/generic/test_series.py b/pandas/tests/generic/test_series.py
index ce0daf852..5aafd83da 100644
--- a/pandas/tests/generic/test_series.py
+++ b/pandas/tests/generic/test_series.py
@@ -38,29 +38,29 @@ class TestSeries(Generic):
         )
         s.rename(str.lower)
 
-    def test_set_axis_name(self):
+    @pytest.mark.parametrize("func", ["rename_axis", "_set_axis_name"])
+    def test_set_axis_name(self, func):
         s = Series([1, 2, 3], index=["a", "b", "c"])
-        funcs = ["rename_axis", "_set_axis_name"]
         name = "foo"
-        for func in funcs:
-            result = methodcaller(func, name)(s)
-            assert s.index.name is None
-            assert result.index.name == name
 
-    def test_set_axis_name_mi(self):
+        result = methodcaller(func, name)(s)
+        assert s.index.name is None
+        assert result.index.name == name
+
+    @pytest.mark.parametrize("func", ["rename_axis", "_set_axis_name"])
+    def test_set_axis_name_mi(self, func):
         s = Series(
             [11, 21, 31],
             index=MultiIndex.from_tuples(
                 [("A", x) for x in ["a", "B", "c"]], names=["l1", "l2"]
             ),
         )
-        funcs = ["rename_axis", "_set_axis_name"]
-        for func in funcs:
-            result = methodcaller(func, ["L1", "L2"])(s)
-            assert s.index.name is None
-            assert s.index.names == ["l1", "l2"]
-            assert result.index.name is None
-            assert result.index.names, ["L1", "L2"]
+
+        result = methodcaller(func, ["L1", "L2"])(s)
+        assert s.index.name is None
+        assert s.index.names == ["l1", "l2"]
+        assert result.index.name is None
+        assert result.index.names, ["L1", "L2"]
 
     def test_set_axis_name_raises(self):
         s = pd.Series([1])
@@ -230,24 +230,11 @@ class TestToXArray:
         and LooseVersion(xarray.__version__) < LooseVersion("0.10.0"),
         reason="xarray >= 0.10.0 required",
     )
-    @pytest.mark.parametrize(
-        "index",
-        [
-            "FloatIndex",
-            "IntIndex",
-            "StringIndex",
-            "UnicodeIndex",
-            "DateIndex",
-            "PeriodIndex",
-            "TimedeltaIndex",
-            "CategoricalIndex",
-        ],
-    )
+    @pytest.mark.parametrize("index", tm.all_index_generator(6))
     def test_to_xarray_index_types(self, index):
         from xarray import DataArray
 
-        index = getattr(tm, f"make{index}")
-        s = Series(range(6), index=index(6))
+        s = Series(range(6), index=index)
         s.index.name = "foo"
         result = s.to_xarray()
         repr(result)
diff --git a/pandas/tests/internals/test_internals.py b/pandas/tests/internals/test_internals.py
index aa966caa6..fe161a0da 100644
--- a/pandas/tests/internals/test_internals.py
+++ b/pandas/tests/internals/test_internals.py
@@ -376,9 +376,6 @@ class TestBlockManager:
         mgr2 = tm.round_trip_pickle(mgr)
         tm.assert_frame_equal(DataFrame(mgr), DataFrame(mgr2))
 
-        # share ref_items
-        # assert mgr2.blocks[0].ref_items is mgr2.blocks[1].ref_items
-
         # GH2431
         assert hasattr(mgr2, "_is_consolidated")
         assert hasattr(mgr2, "_known_consolidated")
@@ -789,40 +786,39 @@ class TestBlockManager:
         bm2 = BlockManager(bm1.blocks[::-1], bm1.axes)
         assert bm1.equals(bm2)
 
-    def test_equals_block_order_different_dtypes(self):
-        # GH 9330
-
-        mgr_strings = [
+    @pytest.mark.parametrize(
+        "mgr_string",
+        [
             "a:i8;b:f8",  # basic case
             "a:i8;b:f8;c:c8;d:b",  # many types
             "a:i8;e:dt;f:td;g:string",  # more types
             "a:i8;b:category;c:category2;d:category2",  # categories
             "c:sparse;d:sparse_na;b:f8",  # sparse
-        ]
-
-        for mgr_string in mgr_strings:
-            bm = create_mgr(mgr_string)
-            block_perms = itertools.permutations(bm.blocks)
-            for bm_perm in block_perms:
-                bm_this = BlockManager(bm_perm, bm.axes)
-                assert bm.equals(bm_this)
-                assert bm_this.equals(bm)
+        ],
+    )
+    def test_equals_block_order_different_dtypes(self, mgr_string):
+        # GH 9330
+        bm = create_mgr(mgr_string)
+        block_perms = itertools.permutations(bm.blocks)
+        for bm_perm in block_perms:
+            bm_this = BlockManager(bm_perm, bm.axes)
+            assert bm.equals(bm_this)
+            assert bm_this.equals(bm)
 
     def test_single_mgr_ctor(self):
         mgr = create_single_mgr("f8", num_rows=5)
         assert mgr.as_array().tolist() == [0.0, 1.0, 2.0, 3.0, 4.0]
 
-    def test_validate_bool_args(self):
-        invalid_values = [1, "True", [1, 2, 3], 5.0]
+    @pytest.mark.parametrize("value", [1, "True", [1, 2, 3], 5.0])
+    def test_validate_bool_args(self, value):
         bm1 = create_mgr("a,b,c: i8-1; d,e,f: i8-2")
 
-        for value in invalid_values:
-            msg = (
-                'For argument "inplace" expected type bool, '
-                f"received type {type(value).__name__}."
-            )
-            with pytest.raises(ValueError, match=msg):
-                bm1.replace_list([1], [2], inplace=value)
+        msg = (
+            'For argument "inplace" expected type bool, '
+            f"received type {type(value).__name__}."
+        )
+        with pytest.raises(ValueError, match=msg):
+            bm1.replace_list([1], [2], inplace=value)
 
 
 class TestIndexing:
@@ -851,7 +847,8 @@ class TestIndexing:
 
     # MANAGERS = [MANAGERS[6]]
 
-    def test_get_slice(self):
+    @pytest.mark.parametrize("mgr", MANAGERS)
+    def test_get_slice(self, mgr):
         def assert_slice_ok(mgr, axis, slobj):
             mat = mgr.as_array()
 
@@ -870,35 +867,33 @@ class TestIndexing:
             )
             tm.assert_index_equal(mgr.axes[axis][slobj], sliced.axes[axis])
 
-        for mgr in self.MANAGERS:
-            for ax in range(mgr.ndim):
-                # slice
-                assert_slice_ok(mgr, ax, slice(None))
-                assert_slice_ok(mgr, ax, slice(3))
-                assert_slice_ok(mgr, ax, slice(100))
-                assert_slice_ok(mgr, ax, slice(1, 4))
-                assert_slice_ok(mgr, ax, slice(3, 0, -2))
-
-                # boolean mask
-                assert_slice_ok(mgr, ax, np.array([], dtype=np.bool_))
-                assert_slice_ok(mgr, ax, np.ones(mgr.shape[ax], dtype=np.bool_))
-                assert_slice_ok(mgr, ax, np.zeros(mgr.shape[ax], dtype=np.bool_))
-
-                if mgr.shape[ax] >= 3:
-                    assert_slice_ok(mgr, ax, np.arange(mgr.shape[ax]) % 3 == 0)
-                    assert_slice_ok(
-                        mgr, ax, np.array([True, True, False], dtype=np.bool_)
-                    )
-
-                # fancy indexer
-                assert_slice_ok(mgr, ax, [])
-                assert_slice_ok(mgr, ax, list(range(mgr.shape[ax])))
-
-                if mgr.shape[ax] >= 3:
-                    assert_slice_ok(mgr, ax, [0, 1, 2])
-                    assert_slice_ok(mgr, ax, [-1, -2, -3])
-
-    def test_take(self):
+        for ax in range(mgr.ndim):
+            # slice
+            assert_slice_ok(mgr, ax, slice(None))
+            assert_slice_ok(mgr, ax, slice(3))
+            assert_slice_ok(mgr, ax, slice(100))
+            assert_slice_ok(mgr, ax, slice(1, 4))
+            assert_slice_ok(mgr, ax, slice(3, 0, -2))
+
+            # boolean mask
+            assert_slice_ok(mgr, ax, np.array([], dtype=np.bool_))
+            assert_slice_ok(mgr, ax, np.ones(mgr.shape[ax], dtype=np.bool_))
+            assert_slice_ok(mgr, ax, np.zeros(mgr.shape[ax], dtype=np.bool_))
+
+            if mgr.shape[ax] >= 3:
+                assert_slice_ok(mgr, ax, np.arange(mgr.shape[ax]) % 3 == 0)
+                assert_slice_ok(mgr, ax, np.array([True, True, False], dtype=np.bool_))
+
+            # fancy indexer
+            assert_slice_ok(mgr, ax, [])
+            assert_slice_ok(mgr, ax, list(range(mgr.shape[ax])))
+
+            if mgr.shape[ax] >= 3:
+                assert_slice_ok(mgr, ax, [0, 1, 2])
+                assert_slice_ok(mgr, ax, [-1, -2, -3])
+
+    @pytest.mark.parametrize("mgr", MANAGERS)
+    def test_take(self, mgr):
         def assert_take_ok(mgr, axis, indexer):
             mat = mgr.as_array()
             taken = mgr.take(indexer, axis)
@@ -907,18 +902,19 @@ class TestIndexing:
             )
             tm.assert_index_equal(mgr.axes[axis].take(indexer), taken.axes[axis])
 
-        for mgr in self.MANAGERS:
-            for ax in range(mgr.ndim):
-                # take/fancy indexer
-                assert_take_ok(mgr, ax, indexer=[])
-                assert_take_ok(mgr, ax, indexer=[0, 0, 0])
-                assert_take_ok(mgr, ax, indexer=list(range(mgr.shape[ax])))
+        for ax in range(mgr.ndim):
+            # take/fancy indexer
+            assert_take_ok(mgr, ax, indexer=[])
+            assert_take_ok(mgr, ax, indexer=[0, 0, 0])
+            assert_take_ok(mgr, ax, indexer=list(range(mgr.shape[ax])))
 
-                if mgr.shape[ax] >= 3:
-                    assert_take_ok(mgr, ax, indexer=[0, 1, 2])
-                    assert_take_ok(mgr, ax, indexer=[-1, -2, -3])
+            if mgr.shape[ax] >= 3:
+                assert_take_ok(mgr, ax, indexer=[0, 1, 2])
+                assert_take_ok(mgr, ax, indexer=[-1, -2, -3])
 
-    def test_reindex_axis(self):
+    @pytest.mark.parametrize("mgr", MANAGERS)
+    @pytest.mark.parametrize("fill_value", [None, np.nan, 100.0])
+    def test_reindex_axis(self, fill_value, mgr):
         def assert_reindex_axis_is_ok(mgr, axis, new_labels, fill_value):
             mat = mgr.as_array()
             indexer = mgr.axes[axis].get_indexer_for(new_labels)
@@ -931,33 +927,27 @@ class TestIndexing:
             )
             tm.assert_index_equal(reindexed.axes[axis], new_labels)
 
-        for mgr in self.MANAGERS:
-            for ax in range(mgr.ndim):
-                for fill_value in (None, np.nan, 100.0):
-                    assert_reindex_axis_is_ok(mgr, ax, pd.Index([]), fill_value)
-                    assert_reindex_axis_is_ok(mgr, ax, mgr.axes[ax], fill_value)
-                    assert_reindex_axis_is_ok(
-                        mgr, ax, mgr.axes[ax][[0, 0, 0]], fill_value
-                    )
-                    assert_reindex_axis_is_ok(
-                        mgr, ax, pd.Index(["foo", "bar", "baz"]), fill_value
-                    )
-                    assert_reindex_axis_is_ok(
-                        mgr, ax, pd.Index(["foo", mgr.axes[ax][0], "baz"]), fill_value
-                    )
+        for ax in range(mgr.ndim):
+            assert_reindex_axis_is_ok(mgr, ax, pd.Index([]), fill_value)
+            assert_reindex_axis_is_ok(mgr, ax, mgr.axes[ax], fill_value)
+            assert_reindex_axis_is_ok(mgr, ax, mgr.axes[ax][[0, 0, 0]], fill_value)
+            assert_reindex_axis_is_ok(
+                mgr, ax, pd.Index(["foo", "bar", "baz"]), fill_value
+            )
+            assert_reindex_axis_is_ok(
+                mgr, ax, pd.Index(["foo", mgr.axes[ax][0], "baz"]), fill_value
+            )
+
+            if mgr.shape[ax] >= 3:
+                assert_reindex_axis_is_ok(mgr, ax, mgr.axes[ax][:-3], fill_value)
+                assert_reindex_axis_is_ok(mgr, ax, mgr.axes[ax][-3::-1], fill_value)
+                assert_reindex_axis_is_ok(
+                    mgr, ax, mgr.axes[ax][[0, 1, 2, 0, 1, 2]], fill_value
+                )
 
-                    if mgr.shape[ax] >= 3:
-                        assert_reindex_axis_is_ok(
-                            mgr, ax, mgr.axes[ax][:-3], fill_value
-                        )
-                        assert_reindex_axis_is_ok(
-                            mgr, ax, mgr.axes[ax][-3::-1], fill_value
-                        )
-                        assert_reindex_axis_is_ok(
-                            mgr, ax, mgr.axes[ax][[0, 1, 2, 0, 1, 2]], fill_value
-                        )
-
-    def test_reindex_indexer(self):
+    @pytest.mark.parametrize("mgr", MANAGERS)
+    @pytest.mark.parametrize("fill_value", [None, np.nan, 100.0])
+    def test_reindex_indexer(self, fill_value, mgr):
         def assert_reindex_indexer_is_ok(mgr, axis, new_labels, indexer, fill_value):
             mat = mgr.as_array()
             reindexed_mat = algos.take_nd(mat, indexer, axis, fill_value=fill_value)
@@ -969,60 +959,42 @@ class TestIndexing:
             )
             tm.assert_index_equal(reindexed.axes[axis], new_labels)
 
-        for mgr in self.MANAGERS:
-            for ax in range(mgr.ndim):
-                for fill_value in (None, np.nan, 100.0):
-                    assert_reindex_indexer_is_ok(mgr, ax, pd.Index([]), [], fill_value)
-                    assert_reindex_indexer_is_ok(
-                        mgr, ax, mgr.axes[ax], np.arange(mgr.shape[ax]), fill_value
-                    )
-                    assert_reindex_indexer_is_ok(
-                        mgr,
-                        ax,
-                        pd.Index(["foo"] * mgr.shape[ax]),
-                        np.arange(mgr.shape[ax]),
-                        fill_value,
-                    )
-                    assert_reindex_indexer_is_ok(
-                        mgr,
-                        ax,
-                        mgr.axes[ax][::-1],
-                        np.arange(mgr.shape[ax]),
-                        fill_value,
-                    )
-                    assert_reindex_indexer_is_ok(
-                        mgr,
-                        ax,
-                        mgr.axes[ax],
-                        np.arange(mgr.shape[ax])[::-1],
-                        fill_value,
-                    )
-                    assert_reindex_indexer_is_ok(
-                        mgr, ax, pd.Index(["foo", "bar", "baz"]), [0, 0, 0], fill_value
-                    )
-                    assert_reindex_indexer_is_ok(
-                        mgr,
-                        ax,
-                        pd.Index(["foo", "bar", "baz"]),
-                        [-1, 0, -1],
-                        fill_value,
-                    )
-                    assert_reindex_indexer_is_ok(
-                        mgr,
-                        ax,
-                        pd.Index(["foo", mgr.axes[ax][0], "baz"]),
-                        [-1, -1, -1],
-                        fill_value,
-                    )
+        for ax in range(mgr.ndim):
+            assert_reindex_indexer_is_ok(mgr, ax, pd.Index([]), [], fill_value)
+            assert_reindex_indexer_is_ok(
+                mgr, ax, mgr.axes[ax], np.arange(mgr.shape[ax]), fill_value
+            )
+            assert_reindex_indexer_is_ok(
+                mgr,
+                ax,
+                pd.Index(["foo"] * mgr.shape[ax]),
+                np.arange(mgr.shape[ax]),
+                fill_value,
+            )
+            assert_reindex_indexer_is_ok(
+                mgr, ax, mgr.axes[ax][::-1], np.arange(mgr.shape[ax]), fill_value,
+            )
+            assert_reindex_indexer_is_ok(
+                mgr, ax, mgr.axes[ax], np.arange(mgr.shape[ax])[::-1], fill_value,
+            )
+            assert_reindex_indexer_is_ok(
+                mgr, ax, pd.Index(["foo", "bar", "baz"]), [0, 0, 0], fill_value
+            )
+            assert_reindex_indexer_is_ok(
+                mgr, ax, pd.Index(["foo", "bar", "baz"]), [-1, 0, -1], fill_value,
+            )
+            assert_reindex_indexer_is_ok(
+                mgr,
+                ax,
+                pd.Index(["foo", mgr.axes[ax][0], "baz"]),
+                [-1, -1, -1],
+                fill_value,
+            )
 
-                    if mgr.shape[ax] >= 3:
-                        assert_reindex_indexer_is_ok(
-                            mgr,
-                            ax,
-                            pd.Index(["foo", "bar", "baz"]),
-                            [0, 1, 2],
-                            fill_value,
-                        )
+            if mgr.shape[ax] >= 3:
+                assert_reindex_indexer_is_ok(
+                    mgr, ax, pd.Index(["foo", "bar", "baz"]), [0, 1, 2], fill_value,
+                )
 
     # test_get_slice(slice_like, axis)
     # take(indexer, axis)
