commit e2541f6031fe4db0afb0638be31c33ee705581ec
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Jan 5 17:22:52 2011 -0500

    fixed NaN casting issue in int arrays for _join_on

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index c97002af8..541229b34 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1605,12 +1605,18 @@ class DataFrame(Picklable, Groupable):
             return result
 
         indexer, mask = tseries.getMergeVec(self[on], other.index.indexMap)
+        notmask = -mask
+        need_mask = notmask.any()
 
         new_data = {}
 
         for col, series in other.iteritems():
             arr = series.view(np.ndarray).take(indexer)
-            arr[-mask] = NaN
+
+            if need_mask:
+                if issubclass(arr.dtype.type, np.integer):
+                    arr = arr.astype(float)
+                arr[notmask] = NaN
 
             new_data[col] = arr
 
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index bccb250a0..00b6d9122 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -242,9 +242,10 @@ class DataMatrix(DataFrame):
 
         fillVec, mask = tseries.getMergeVec(self[on],
                                             other.index.indexMap)
+        notmask = -mask
 
         tmpMatrix = other.values.take(fillVec, axis=0)
-        tmpMatrix[-mask] = NaN
+        tmpMatrix[notmask] = NaN
 
         seriesDict = dict((col, tmpMatrix[:, j])
                            for j, col in enumerate(other.columns))
@@ -253,7 +254,7 @@ class DataMatrix(DataFrame):
             objects = other.objects
 
             tmpMat = objects.values.take(fillVec, axis=0)
-            tmpMat[-mask] = NaN
+            tmpMat[notmask] = NaN
             objDict = dict((col, tmpMat[:, j])
                            for j, col in enumerate(objects.columns))
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 73084583f..5e36f0813 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -760,7 +760,7 @@ class Series(np.ndarray, Picklable, Groupable):
                 if issubclass(newValues.dtype.type, np.integer):
                     newValues = newValues.astype(float)
 
-                np.putmask(newValues, -mask, np.nan)
+                np.putmask(newValues, notmask, np.nan)
 
             newSer = Series(newValues, index=self.index)
             return newSer
