commit ca83d5ec90402af14ddd82754efe6e6c1abbc3d8
Author: y-p <yoval@gmx.com>
Date:   Fri Mar 15 04:33:25 2013 +0200

    ENH: improve performance of df.to_csv GH3054

diff --git a/pandas/core/common.py b/pandas/core/common.py
index a3e8c0983..54b6564ba 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -1594,6 +1594,26 @@ else:
             # empty queue
             self.queue.truncate(0)
 
+        def writerows(self, rows):
+            def _check_as_is(x):
+                return (self.quoting == csv.QUOTE_NONNUMERIC and
+                        is_number(x)) or isinstance(x, str)
+
+            for i, row in enumerate(rows):
+                rows[i] = [x if _check_as_is(x)
+                           else pprint_thing(x).encode('utf-8') for x in row]
+
+            self.writer.writerows([[s for s in row] for row in rows])
+            # Fetch UTF-8 output from the queue ...
+            data = self.queue.getvalue()
+            data = data.decode("utf-8")
+            # ... and reencode it into the target encoding
+            data = self.encoder.encode(data)
+            # write to the target stream
+            self.stream.write(data)
+            # empty queue
+            self.queue.truncate(0)
+
 
 _NS_DTYPE = np.dtype('M8[ns]')
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index ee586a210..976b0c7a0 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1345,15 +1345,33 @@ class DataFrame(NDFrame):
             data_index = self.index.to_timestamp()
 
         nlevels = getattr(data_index, 'nlevels', 1)
+
+        spaces = [None] *  len(cols)
+        if index:
+            if nlevels == 1:
+                row_fields_f = lambda x: [x] + spaces
+            else:  # handle MultiIndex
+                row_fields_f = lambda x: list(x) + spaces
+        else:
+            nlevels = 0
+            row_fields_f = lambda x: [None] *  len(cols)
+
+        # In crude testing, N>100 yields little marginal improvement
+        N=100
+        rows = [None]*N
+
+        all_cols = False
+        if len(cols) < 10000:
+            all_cols = list(enumerate(cols))
+
+        j = None
         for j, idx in enumerate(data_index):
-            row_fields = []
-            if index:
-                if nlevels == 1:
-                    row_fields = [idx]
-                else:  # handle MultiIndex
-                    row_fields = list(idx)
-            for i, col in enumerate(cols):
+            row_fields = row_fields_f(idx)
+
+            for i, col in (all_cols or enumerate(cols)):
                 val = series[col][j]
+
+
                 if lib.checknull(val):
                     val = na_rep
 
@@ -1362,9 +1380,17 @@ class DataFrame(NDFrame):
                 elif isinstance(val, np.datetime64):
                     val = lib.Timestamp(val)._repr_base
 
-                row_fields.append(val)
+                row_fields[i+nlevels] = val
+
+            rows[ j % N ] = map(lambda val: np.asscalar(val) if isinstance(val,np.number) else val
+                                ,row_fields)
+
+            if j >= N-1 and j % N == N-1:
+                writer.writerows(rows)
+
+        if  j is not None and (j < N-1 or (j % N) != N-1 ):
+            writer.writerows(rows[:((j+1) % N)])
 
-            writer.writerow(row_fields)
 
     def to_csv(self, path_or_buf, sep=",", na_rep='', float_format=None,
                cols=None, header=True, index=True, index_label=None,
