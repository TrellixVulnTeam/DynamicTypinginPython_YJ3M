commit 19624de83852754302169782b211f4bdd3a597f8
Author: Derek McCammond <Vlek@users.noreply.github.com>
Date:   Wed Mar 18 05:12:00 2020 -0400

    Avoid bare pytest.raises in dtypes/test_dtypes.py (#32672)

diff --git a/pandas/core/dtypes/dtypes.py b/pandas/core/dtypes/dtypes.py
index 181f0c890..d29102cbd 100644
--- a/pandas/core/dtypes/dtypes.py
+++ b/pandas/core/dtypes/dtypes.py
@@ -558,7 +558,7 @@ class CategoricalDtype(PandasExtensionDtype, ExtensionDtype):
         if not fastpath:
 
             if categories.hasnans:
-                raise ValueError("Categorial categories cannot be null")
+                raise ValueError("Categorical categories cannot be null")
 
             if not categories.is_unique:
                 raise ValueError("Categorical categories must be unique")
diff --git a/pandas/tests/arrays/categorical/test_constructors.py b/pandas/tests/arrays/categorical/test_constructors.py
index c6b4c4904..3e31c1acb 100644
--- a/pandas/tests/arrays/categorical/test_constructors.py
+++ b/pandas/tests/arrays/categorical/test_constructors.py
@@ -252,7 +252,7 @@ class TestCategoricalConstructors:
     def test_constructor_with_null(self):
 
         # Cannot have NaN in categories
-        msg = "Categorial categories cannot be null"
+        msg = "Categorical categories cannot be null"
         with pytest.raises(ValueError, match=msg):
             Categorical([np.nan, "a", "b", "c"], categories=[np.nan, "a", "b", "c"])
 
@@ -500,7 +500,7 @@ class TestCategoricalConstructors:
             Categorical.from_codes([0, 1, 2], categories=["a", "a", "b"])
 
     def test_from_codes_nan_cat_included(self):
-        with pytest.raises(ValueError, match="Categorial categories cannot be null"):
+        with pytest.raises(ValueError, match="Categorical categories cannot be null"):
             Categorical.from_codes([0, 1, 2], categories=["a", "b", np.nan])
 
     def test_from_codes_too_negative(self):
diff --git a/pandas/tests/dtypes/test_dtypes.py b/pandas/tests/dtypes/test_dtypes.py
index 55b1ac819..16ee7c277 100644
--- a/pandas/tests/dtypes/test_dtypes.py
+++ b/pandas/tests/dtypes/test_dtypes.py
@@ -361,7 +361,7 @@ class TestPeriodDtype(Base):
         assert hash(dtype) == hash(dtype3)
 
     def test_construction(self):
-        with pytest.raises(ValueError):
+        with pytest.raises(ValueError, match="Invalid frequency: xx"):
             PeriodDtype("xx")
 
         for s in ["period[D]", "Period[D]", "D"]:
@@ -414,21 +414,25 @@ class TestPeriodDtype(Base):
         assert is_dtype_equal(dtype, result)
         result = PeriodDtype.construct_from_string("period[D]")
         assert is_dtype_equal(dtype, result)
-        with pytest.raises(TypeError):
-            PeriodDtype.construct_from_string("foo")
-        with pytest.raises(TypeError):
-            PeriodDtype.construct_from_string("period[foo]")
-        with pytest.raises(TypeError):
-            PeriodDtype.construct_from_string("foo[D]")
-
-        with pytest.raises(TypeError):
-            PeriodDtype.construct_from_string("datetime64[ns]")
-        with pytest.raises(TypeError):
-            PeriodDtype.construct_from_string("datetime64[ns, US/Eastern]")
 
         with pytest.raises(TypeError, match="list"):
             PeriodDtype.construct_from_string([1, 2, 3])
 
+    @pytest.mark.parametrize(
+        "string",
+        [
+            "foo",
+            "period[foo]",
+            "foo[D]",
+            "datetime64[ns]",
+            "datetime64[ns, US/Eastern]",
+        ],
+    )
+    def test_construct_dtype_from_string_invalid_raises(self, string):
+        msg = f"Cannot construct a 'PeriodDtype' from '{string}'"
+        with pytest.raises(TypeError, match=re.escape(msg)):
+            PeriodDtype.construct_from_string(string)
+
     def test_is_dtype(self, dtype):
         assert PeriodDtype.is_dtype(dtype)
         assert PeriodDtype.is_dtype("period[D]")
@@ -475,7 +479,9 @@ class TestPeriodDtype(Base):
 
     def test_empty(self):
         dt = PeriodDtype()
-        with pytest.raises(AttributeError):
+        # https://github.com/pandas-dev/pandas/issues/27388
+        msg = "object has no attribute 'freqstr'"
+        with pytest.raises(AttributeError, match=msg):
             str(dt)
 
     def test_not_string(self):
@@ -764,11 +770,13 @@ class TestCategoricalDtypeParametrized:
         assert c1 is not c3
 
     def test_nan_invalid(self):
-        with pytest.raises(ValueError):
+        msg = "Categorical categories cannot be null"
+        with pytest.raises(ValueError, match=msg):
             CategoricalDtype([1, 2, np.nan])
 
     def test_non_unique_invalid(self):
-        with pytest.raises(ValueError):
+        msg = "Categorical categories must be unique"
+        with pytest.raises(ValueError, match=msg):
             CategoricalDtype([1, 2, 1])
 
     def test_same_categories_different_order(self):
