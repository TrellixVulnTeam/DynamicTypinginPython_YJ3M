commit f789bb7c8f7825ca287e0927fa11c6b1513fff3e
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Oct 21 13:12:01 2011 -0400

    BUG: passing list of tuples to Series constructor failed, GH #270

diff --git a/RELEASE.rst b/RELEASE.rst
index 9ddc1beda..4accf2ade 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -146,6 +146,16 @@ feedback on the library.
 
 **Bug fixes**
 
+  - `read_csv` / `read_table` fixes
+    - Be less aggressive about converting float->int in cases of floating point
+      representations of integers like 1.0, 2.0, etc.
+    - "True"/"False" will not get correctly converted to boolean
+    - Index name attribute will get set when specifying an index column
+    - Passing column names should force `header=None` (GH #257)
+    - Don't modify passed column names when `index_col` is not
+      None (GH #258)
+    - Can sniff CSV separator in zip file (since seek is not supported, was
+      failing before)
   - Worked around matplotlib "bug" in which series[:, np.newaxis] fails. Should
     be reported upstream to matplotlib (GH #224)
   - DataFrame.iteritems was not returning Series with the name attribute
@@ -166,16 +176,7 @@ feedback on the library.
   - Implemented `MultiIndex.diff` (GH #260)
   - `Int64Index.take` and `MultiIndex.take` lost name field, fix downstream
     issue GH #262
-  - `read_csv` / `read_table` fixes
-    - Be less aggressive about converting float->int in cases of floating point
-      representations of integers like 1.0, 2.0, etc.
-    - "True"/"False" will not get correctly converted to boolean
-    - Index name attribute will get set when specifying an index column
-    - Passing column names should force `header=None` (GH #257)
-    - Don't modify passed column names when `index_col` is not
-      None (GH #258)
-    - Can sniff CSV separator in zip file (since seek is not supported, was
-      failing before)
+  - Can pass list of tuples to `Series` (GH #270)
 
 Thanks
 ------
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index f662d8ea0..216669c1d 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -760,7 +760,10 @@ class SeriesGroupBy(GroupBy):
         values = self.obj.values
         result = {}
         for k, v in self.primary.indices.iteritems():
-            result[k] = func(values.take(v), *args, **kwargs)
+            agged = func(values.take(v), *args, **kwargs)
+            if isinstance(output, np.ndarray):
+                raise Exception('Must produce aggregated value')
+            result[k] = agged
 
         return result
 
@@ -771,6 +774,8 @@ class SeriesGroupBy(GroupBy):
             grp = self.get_group(name)
             grp.name = name
             output = func(grp, *args, **kwargs)
+            if isinstance(output, np.ndarray):
+                raise Exception('Must produce aggregated value')
             result[name] = output
 
         return result
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 0701512c5..f3c32ece0 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -19,7 +19,8 @@ from numpy import nan, ndarray
 import numpy as np
 
 from pandas.core.common import (isnull, notnull, _is_bool_indexer,
-                                _default_index, _maybe_upcast)
+                                _default_index, _maybe_upcast,
+                                _asarray_tuplesafe)
 from pandas.core.daterange import DateRange
 from pandas.core.generic import PandasObject
 from pandas.core.index import Index, MultiIndex, _ensure_index
@@ -109,7 +110,6 @@ class Series(np.ndarray, PandasObject):
                 index = Index(sorted(data.keys()))
             data = [data.get(idx, np.nan) for idx in index]
 
-        # Create array, do *not* copy data by default, infer type
         try:
             subarr = np.array(data, dtype=dtype, copy=copy)
         except ValueError:
@@ -139,9 +139,11 @@ class Series(np.ndarray, PandasObject):
                 subarr.fill(value)
             else:
                 return subarr.item()
-
         elif subarr.ndim > 1:
-            raise Exception('Data must be 1-dimensional')
+            if isinstance(data, np.ndarray):
+                raise Exception('Data must be 1-dimensional')
+            else:
+                subarr = _asarray_tuplesafe(data, dtype=dtype)
 
         if index is None:
             index = _default_index(len(subarr))
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index d7c8b679a..13204044d 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -298,7 +298,7 @@ class TestGroupBy(unittest.TestCase):
     def test_series_describe_single(self):
         ts = tm.makeTimeSeries()
         grouped = ts.groupby(lambda x: x.month)
-        result = grouped.agg(lambda x: x.describe())
+        result = grouped.apply(lambda x: x.describe())
         expected = grouped.describe()
         assert_frame_equal(result, expected)
 
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 08d32b54c..08c6826f8 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -157,6 +157,11 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         expected = Series([1, 2, nan, 0], index=['b', 'c', 'd', 'a'])
         assert_series_equal(result, expected)
 
+    def test_constructor_tuples(self):
+        data = [(1, 1), (2, 2), (2, 3)]
+        s = Series(data)
+        self.assertEqual(list(s), data)
+
     def test_fromDict(self):
         data = {'a' : 0, 'b' : 1, 'c' : 2, 'd' : 3}
 
