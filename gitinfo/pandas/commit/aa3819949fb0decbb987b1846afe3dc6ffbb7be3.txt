commit aa3819949fb0decbb987b1846afe3dc6ffbb7be3
Author: jreback <jeff@reback.net>
Date:   Thu Oct 17 07:26:24 2013 -0400

    BUG: fixed issue with drop on a non-unique index with Series (GH5248)

diff --git a/doc/source/release.rst b/doc/source/release.rst
index cc9aa4bbc..886a0a62b 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -621,6 +621,7 @@ Bug Fixes
     non-business date. (:issue:`5203`)
   - Fixed bug in Excel writers where frames with duplicate column names weren't
     written correctly. (:issue:`5235`)
+  - Fixed issue with ``drop`` and a non-unique index on Series (:issue:`5248`)
 
 pandas 0.12.0
 -------------
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 266253e05..fcbceecf9 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -1103,6 +1103,8 @@ class NDFrame(PandasObject):
         """
         axis_name = self._get_axis_name(axis)
         axis, axis_ = self._get_axis(axis), axis
+        if not is_list_like(labels):
+            labels = [ labels ]
 
         if axis.is_unique:
             if level is not None:
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index d32bf166d..0bc0afaf2 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -581,9 +581,11 @@ class _NDFrameIndexer(object):
             return False
 
         # just too complicated
-        for ax in self.obj._data.axes:
+        for indexer, ax in zip(tup,self.obj._data.axes):
             if isinstance(ax, MultiIndex):
                 return False
+            elif com._is_bool_indexer(indexer):
+                return False
 
         return True
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index d74ea8a5d..3f5eef8c0 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3175,9 +3175,11 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         # drop
         df = DataFrame([[1,5,7.],[1,5,7.],[1,5,7.]],columns=['bar','a','a'])
-        df = df.drop(['a'],axis=1)
+        result = df.drop(['a'],axis=1)
         expected = DataFrame([[1],[1],[1]],columns=['bar'])
-        check(df,expected)
+        check(result,expected)
+        result = df.drop('a',axis=1)
+        check(result,expected)
 
         # describe
         df = DataFrame([[1,1,1],[2,2,2],[3,3,3]],columns=['bar','a','a'],dtype='float64')
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 645533d56..eb8969db9 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -1415,6 +1415,31 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         rs = s.where(cond, np.nan)
         assert_series_equal(rs, s.mask(~cond))
 
+    def test_drop(self):
+
+        # unique
+        s = Series([1,2],index=['one','two'])
+        expected = Series([1],index=['one'])
+        result = s.drop(['two'])
+        assert_series_equal(result,expected)
+        result = s.drop('two')
+        assert_series_equal(result,expected)
+
+        # non-unique
+        # GH 5248
+        s = Series([1,1,2],index=['one','two','one'])
+        expected = Series([1,2],index=['one','one'])
+        result = s.drop(['two'])
+        assert_series_equal(result,expected)
+        result = s.drop('two')
+        assert_series_equal(result,expected)
+
+        expected = Series([1],index=['two'])
+        result = s.drop(['one'])
+        assert_series_equal(result,expected)
+        result = s.drop('one')
+        assert_series_equal(result,expected)
+
     def test_ix_setitem(self):
         inds = self.series.index[[3, 4, 7]]
 
