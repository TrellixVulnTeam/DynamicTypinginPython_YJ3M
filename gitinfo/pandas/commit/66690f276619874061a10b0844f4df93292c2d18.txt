commit 66690f276619874061a10b0844f4df93292c2d18
Author: Chang She <chang@lambdafoundry.com>
Date:   Sun Jun 24 00:02:03 2012 -0400

    BUG/TST: plot irregular and reg freq on same subplot

diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index 97bea5cb7..8cf584155 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -596,10 +596,13 @@ class LinePlot(MPLPlot):
 
     @property
     def has_ts_index(self):
+        # TODO refactor this whole regular/irregular kludge
         from pandas.core.frame import DataFrame
         if isinstance(self.data, (Series, DataFrame)):
+            ax, _ = self._get_ax_and_style(0)
             freq = (getattr(self.data.index, 'freq', None)
-                    or getattr(self.data.index, 'inferred_freq', None))
+                    or getattr(self.data.index, 'inferred_freq', None)
+                    or getattr(ax, 'freq', None))
             return (freq is not None) and  self._has_dynamic_index_freq(freq)
         return False
 
@@ -649,8 +652,12 @@ class LinePlot(MPLPlot):
 
             freq = get_period_alias(freq)
 
-            if freq is None and hasattr(data.index, 'inferred_freq'):
-                freq = data.index.inferred_freq
+            if freq is None:
+                freq = getattr(data.index, 'inferred_freq', None)
+
+            if freq is None:
+                ax, _ = self._get_ax_and_style(0)
+                freq = getattr(ax, 'freq', None)
 
             if isinstance(freq, DateOffset):
                 freq = freq.rule_code
diff --git a/pandas/tseries/plotting.py b/pandas/tseries/plotting.py
index 79823e8c1..7f4b4e513 100644
--- a/pandas/tseries/plotting.py
+++ b/pandas/tseries/plotting.py
@@ -44,8 +44,17 @@ def tsplot(series, plotf, **kwargs):
     """
     # Used inferred freq is possible, need a test case for inferred
     freq = getattr(series.index, 'freq', None)
-    if freq is None and hasattr(series.index, 'inferred_freq'):
-        freq = series.index.inferred_freq
+    if freq is None:
+        freq = getattr(series.index, 'inferred_freq', None)
+
+    if 'ax' in kwargs:
+        ax = kwargs.pop('ax')
+    else:
+        import matplotlib.pyplot as plt
+        ax = plt.gca()
+
+    if freq is None:
+        freq = getattr(ax, 'freq', None)
 
     if isinstance(freq, DateOffset):
         freq = freq.rule_code
@@ -62,12 +71,6 @@ def tsplot(series, plotf, **kwargs):
 
     style = kwargs.pop('style', None)
 
-    if 'ax' in kwargs:
-        ax = kwargs.pop('ax')
-    else:
-        import matplotlib.pyplot as plt
-        ax = plt.gca()
-
     # Specialized ts plotting attributes for Axes
     ax.freq = freq
     xaxis = ax.get_xaxis()
@@ -93,12 +96,19 @@ def tsplot(series, plotf, **kwargs):
 
     format_dateaxis(ax, ax.freq)
 
-    left = series.index[0] #get_datevalue(series.index[0], freq)
-    right = series.index[-1] #get_datevalue(series.index[-1], freq)
+    left, right = _get_xlim(ax.get_lines())
     ax.set_xlim(left, right)
 
     return ax
 
+def _get_xlim(lines):
+    left, right = np.inf, -np.inf
+    for l in lines:
+        x = l.get_xdata()
+        left = min(x[0].ordinal, left)
+        right = max(x[-1].ordinal, right)
+    return left, right
+
 def get_datevalue(date, freq):
     if isinstance(date, Period):
         return date.asfreq(freq).ordinal
diff --git a/pandas/tseries/tests/test_plotting.py b/pandas/tseries/tests/test_plotting.py
index 81f972deb..9331d79ef 100644
--- a/pandas/tseries/tests/test_plotting.py
+++ b/pandas/tseries/tests/test_plotting.py
@@ -234,8 +234,10 @@ class TestTSPlot(unittest.TestCase):
 
     @slow
     def test_finder_quarterly(self):
+        import matplotlib.pyplot as plt
         xp = Period('1988Q1').ordinal
         yrs = [3.5, 11]
+        plt.close('all')
         for n in yrs:
             rng = period_range('1987Q2', periods=int(n * 4), freq='Q')
             ser = Series(np.random.randn(len(rng)), rng)
@@ -250,8 +252,10 @@ class TestTSPlot(unittest.TestCase):
 
     @slow
     def test_finder_monthly(self):
+        import matplotlib.pyplot as plt
         xp = Period('1988-1').ordinal
         yrs = [1.15, 2.5, 4, 11]
+        plt.close('all')
         for n in yrs:
             rng = period_range('1987Q2', periods=int(n * 12), freq='M')
             ser = Series(np.random.randn(len(rng)), rng)
@@ -263,8 +267,12 @@ class TestTSPlot(unittest.TestCase):
             ax.set_xlim(vmin + 0.9, vmax)
             rs = xaxis.get_majorticklocs()[0]
             self.assertEqual(xp, rs)
+            plt.close('all')
 
-
+    @slow
+    def test_finder_monthly_long(self):
+        import matplotlib.pyplot as plt
+        plt.close('all')
         rng = period_range('1988Q1', periods=24*12, freq='M')
         ser = Series(np.random.randn(len(rng)), rng)
         ax = ser.plot()
@@ -433,6 +441,24 @@ class TestTSPlot(unittest.TestCase):
         self.assert_(axes[1].get_yaxis().get_ticks_position() == 'default')
         self.assert_(axes[2].get_yaxis().get_ticks_position() == 'right')
 
+    @slow
+    def test_mixed_freq(self):
+        import matplotlib.pyplot as plt
+        plt.close('all')
+        s1 = tm.makeTimeSeries()
+        s2 = s1[[0, 5, 10, 11, 12, 13, 14, 15]]
+        s1.plot()
+        ax2 = s2.plot(style='g')
+        lines = ax2.get_lines()
+        idx1 = lines[0].get_xdata()
+        idx2 = lines[1].get_xdata()
+        self.assert_(idx1.equals(s1.index.to_period('B')))
+        self.assert_(idx2.equals(s2.index.to_period('B')))
+        left, right = ax2.get_xlim()
+        pidx = s1.index.to_period()
+        self.assert_(left == pidx[0].ordinal)
+        self.assert_(right == pidx[-1].ordinal)
+
 PNG_PATH = 'tmp.png'
 def _check_plot_works(f, freq=None, series=None, *args, **kwargs):
     import matplotlib.pyplot as plt
