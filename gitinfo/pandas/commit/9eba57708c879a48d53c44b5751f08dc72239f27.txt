commit 9eba57708c879a48d53c44b5751f08dc72239f27
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jun 30 09:33:31 2011 -0400

    removed usages of indexMap, misc panel stuff

diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 54b5dfeca..7ad16935c 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -197,19 +197,21 @@ class WidePanel(Panel, PandasGeneric):
     minor_axis = AxisProperty(2)
 
     def __init__(self, data, items=None, major_axis=None, minor_axis=None,
-                 copy=False):
-        self.items = items
-        self.major_axis = major_axis
-        self.minor_axis = minor_axis
-
-        if isinstance(data, np.ndarray):
+                 copy=False, dtype=None):
+        if isinstance(data, BlockManager):
+            if copy and dtype is None:
+                mgr = mgr.copy()
+            elif dtype is not None:
+                # no choice but to copy
+                mgr = mgr.cast(dtype)
+        elif isinstance(data, np.ndarray):
             mgr = self._init_matrix(data, [items, major_axis, minor_axis],
-                                    copy=copy)
+                                    dtype=dtype, copy=copy)
 
         self.factors = {}
         self.values = values
 
-    def _init_matrix(self, data, axes, copy=False):
+    def _init_matrix(self, data, axes, dtype=None, copy=False):
         from pandas.core.internals import make_block
         values = _prep_ndarray(values, copy=copy)
 
@@ -229,7 +231,7 @@ class WidePanel(Panel, PandasGeneric):
             fixed_axes.append(ax)
 
         items = fixed_axes[0]
-        block = make_block(values, items, items)
+        block = make_block(values, items, items, ndim=3)
         return NDBlockManager([block], axes)
 
     def _get_plane_axes(self, axis):
@@ -258,8 +260,7 @@ class WidePanel(Panel, PandasGeneric):
         -------
         y : WidePanel
         """
-        return WidePanel(self.values.copy(), self.items, self.major_axis,
-                         self.minor_axis)
+        return WidePanel(self._data.copy())
 
     @classmethod
     def from_dict(cls, data, intersect=False, dtype=float):
@@ -278,9 +279,7 @@ class WidePanel(Panel, PandasGeneric):
         """
         data, index, columns = _homogenize(data, intersect=intersect)
         items = Index(sorted(data.keys()))
-
         values = np.array([data[k].values for k in items], dtype=dtype)
-
         return cls(values, items, index, columns)
 
     fromDict = from_dict
@@ -306,7 +305,7 @@ class WidePanel(Panel, PandasGeneric):
                                default_kind=kind,
                                default_fill_value=fill_value)
 
-
+    # TODO: needed?
     def keys(self):
         return list(self.items)
 
@@ -316,16 +315,6 @@ class WidePanel(Panel, PandasGeneric):
 
     values = property(fget=_get_values)
 
-    # def _set_values(self, values):
-    #     if not values.flags.contiguous:
-    #         values = values.copy()
-
-    #     if self.shape != values.shape:
-    #         raise PanelError('Values shape %s did not match axes / items %s' %
-    #                          (values.shape, self.shape))
-
-    #     self._values = values
-
     def __getitem__(self, key):
         mat = self._data.get(key)
         return DataFrame(mat, index=self.major_axis, columns=self.minor_axis)
@@ -374,12 +363,17 @@ class WidePanel(Panel, PandasGeneric):
 
     def __getstate__(self):
         "Returned pickled representation of the panel"
-        _pickle = common._pickle_array
-
-        return (_pickle(self.values), _pickle(self.items),
-                _pickle(self.major_axis), _pickle(self.minor_axis))
+        return self._data
 
     def __setstate__(self, state):
+        # old WidePanel pickle
+        if len(state) == 4: # pragma: no cover
+            self._unpickle_panel_compat(state)
+        else:
+            assert(isinstance(state, BlockManager))
+            self._data = state
+
+    def _unpickle_panel_compat(self, state): # pragma: no cover
         "Unpickle the panel"
         _unpickle = common._unpickle_array
         vals, items, major, minor = state
@@ -407,7 +401,6 @@ class WidePanel(Panel, PandasGeneric):
         DataFrame
         """
         index, columns = self._get_plane_axes(axis)
-
         return frame.reindex(index=index, columns=columns)
 
     def reindex(self, major=None, items=None, minor=None, method=None,
@@ -468,6 +461,12 @@ class WidePanel(Panel, PandasGeneric):
         return self.reindex(major=other.major_axis, items=other.items,
                             minor=other.minor_axis, method=method)
 
+    def _reindex_axis(self, new_index, fill_method, axis):
+        new_data = self._data.reindex_axis(new_index, axis=axis,
+                                           method=method)
+        return WidePanel(new_data)
+
+    '''
     def _reindex_axis(self, new_index, fill_method, axis):
         old_index = self._get_axis(axis)
 
@@ -485,6 +484,7 @@ class WidePanel(Panel, PandasGeneric):
         new_axes[axis] = new_index
 
         return WidePanel(new_values, *new_axes)
+    '''
 
     def _combine(self, other, func, axis=0):
         if isinstance(other, DataFrame):
@@ -568,11 +568,11 @@ class WidePanel(Panel, PandasGeneric):
             return WidePanel.from_dict(result)
         else:
             # Float type values
-            vals = self.values.copy()
-            vals.flat[common.isnull(vals.ravel())] = value
+            if len(self.columns) == 0:
+                return self
 
-            return WidePanel(vals, self.items, self.major_axis,
-                             self.minor_axis)
+            new_data = self._data.fillna(value)
+            return WidePanel(new_data)
 
     add = _wide_arith_method(operator.add, 'add')
     subtract = _wide_arith_method(operator.sub, 'subtract')
@@ -733,11 +733,7 @@ class WidePanel(Panel, PandasGeneric):
         y : WidePanel
         """
         intersection = self.items.intersection(items)
-        indexer = [self.items.get_loc(col) for col in intersection]
-
-        new_values = self.values.take(indexer, axis=0)
-        return WidePanel(new_values, intersection, self.major_axis,
-                         self.minor_axis)
+        return self.reindex(items=intersection)
 
     def apply(self, func, axis='major'):
         """
diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index ea8d58f16..127401878 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -341,7 +341,7 @@ class SparseSeries(Series):
 
         """
         try:
-            return self._get_val_at(self.index.indexMap[key])
+            return self._get_val_at(self.index.get_loc(key))
 
         except KeyError:
             if isinstance(key, (int, np.integer)):
@@ -800,7 +800,7 @@ class SparseDataFrame(DataFrame):
         """
         Delete column from DataFrame
         """
-        loc = self.columns.indexMap[key]
+        loc = self.columns.get_loc(key)
         del self._series[key]
         self._delete_column_index(loc)
 
@@ -879,7 +879,7 @@ class SparseDataFrame(DataFrame):
         -------
         Series
         """
-        i = self.index.indexMap[key]
+        i = self.index.get_loc(key)
         series = self._series
         values = [series[k][i] for k in self.columns]
         return Series(values, index=self.columns)
@@ -1299,7 +1299,7 @@ class SparseWidePanel(WidePanel):
             self.items = Index(list(self.items) + [key])
 
     def __delitem__(self, key):
-        loc = self.items.indexMap[key]
+        loc = self.items.get_loc(key)
         indices = range(loc) + range(loc + 1, len(self.items))
         self.items = self.items[indices]
         del self._frames[key]
diff --git a/pandas/stats/ols.py b/pandas/stats/ols.py
index 8e8c1436c..1b75b2a6f 100644
--- a/pandas/stats/ols.py
+++ b/pandas/stats/ols.py
@@ -154,11 +154,13 @@ class OLS(object):
         R = np.eye(k)
         r = np.zeros((k, 1))
 
-        intercept = cols.indexMap.get('intercept')
-
-        if intercept is not None:
+        try:
+            intercept = cols.get_loc('intercept')
             R = np.concatenate((R[0 : intercept], R[intercept + 1:]))
             r = np.concatenate((r[0 : intercept], r[intercept + 1:]))
+        except KeyError:
+            # no intercept
+            pass
 
         return math.calc_F(R, r, self._beta_raw, self._var_beta_raw,
                            self._nobs, self.df)
@@ -207,7 +209,7 @@ class OLS(object):
 
                 if x_name not in x_names:
                     raise Exception('no coefficient named %s' % x_name)
-                idx = x_names.indexMap[x_name]
+                idx = x_names.get_loc(x_name)
                 row[idx] = coeff
             rhs = float(rhs)
 
@@ -739,9 +741,9 @@ class MovingOLS(OLS):
         cum_xx = []
 
         if isinstance(x, DataFrame):
-            _indexMap = x.index.indexMap
+            _get_index = x.index.get_loc
             def slicer(df, dt):
-                i = _indexMap[dt]
+                i = _get_index(dt)
                 return df.values[i:i+1, :]
         else:
             slicer = lambda df, dt: df.truncate(dt, dt).values
@@ -764,7 +766,7 @@ class MovingOLS(OLS):
         cum_xy = []
 
         if isinstance(x, DataFrame):
-            _x_indexMap = x.index.indexMap
+            _x_indexMap = x.index.get_loc
             def x_slicer(df, dt):
                 i = _x_indexMap[dt]
                 return df.values[i:i+1, :]
@@ -773,10 +775,10 @@ class MovingOLS(OLS):
 
 
         if isinstance(y, Series):
-            _y_indexMap = y.index.indexMap
+            _y_get_index = y.index.get_loc
             _values = y.values
             def y_slicer(df, dt):
-                i = _y_indexMap[dt]
+                i = _y_get_index(dt)
                 return _values[i:i+1]
         else:
             y_slicer = lambda s, dt: _y_converter(s.truncate(dt, dt))
@@ -845,11 +847,13 @@ class MovingOLS(OLS):
         R = np.eye(K)
         r = np.zeros((K, 1))
 
-        intercept = items.indexMap.get('intercept')
-
-        if intercept is not None:
+        try:
+            intercept = items.get_loc('intercept')
             R = np.concatenate((R[0 : intercept], R[intercept + 1:]))
             r = np.concatenate((r[0 : intercept], r[intercept + 1:]))
+        except KeyError:
+            # no intercept
+            pass
 
         def get_result(beta, vcov, n, d):
             return math.calc_F(R, r, beta, vcov, n, d)
diff --git a/pandas/stats/plm.py b/pandas/stats/plm.py
index 8392c0940..711f76348 100644
--- a/pandas/stats/plm.py
+++ b/pandas/stats/plm.py
@@ -471,7 +471,7 @@ class PanelOLS(OLS):
                 ss = s.split('*')
                 coeff = float(ss[0])
                 x_name = ss[1]
-                idx = x_names.indexMap[x_name]
+                idx = x_names.get_loc(x_name)
                 row[idx] = coeff
             rhs = float(rhs)
 
