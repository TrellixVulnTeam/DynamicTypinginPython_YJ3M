commit b5840b3d5cb533e1b6a0f32e6f316de44040da7e
Author: y-p <yoval@gmx.com>
Date:   Fri Apr 5 03:22:08 2013 +0300

    BLD: test_perf, set cpu affinity and do a gc collect between vbs, in --head mode

diff --git a/vb_suite/test_perf.py b/vb_suite/test_perf.py
index 0e73cd1b0..0b1372c08 100755
--- a/vb_suite/test_perf.py
+++ b/vb_suite/test_perf.py
@@ -101,6 +101,14 @@ parser.add_argument('-N', '--hrepeats',
                     help='implies -H, number of times to run the vbench suite on the head\n'
                     'each iteration will yield another column in the output'
     )
+parser.add_argument('-a', '--affinity',
+                    metavar="b",
+                    dest='affinity',
+                    default=1,
+                    type=int,
+                    help='set processor affinity of processm by default bind to cpu/core #1 only'
+                             'requires the "affinity" python module , will raise Warning otherwise'  )
+
 
 
 def get_results_df(db, rev):
@@ -119,6 +127,18 @@ def get_results_df(db, rev):
 def prprint(s):
     print("*** %s" % s)
 
+def clear():
+    import gc
+    gc.collect()
+
+    try:
+        from ctypes import cdll, CDLL
+        cdll.LoadLibrary("libc.so.6")
+        libc = CDLL("libc.so.6")
+        libc.malloc_trim(0)
+    except:
+        pass
+
 def profile_comparative(benchmarks):
 
     from vbench.api import BenchmarkRunner
@@ -205,6 +225,7 @@ def profile_head_single(benchmarks):
 
     print( "Running %d benchmarks" % len(benchmarks))
     for b in benchmarks:
+        clear()
         d=dict()
         sys.stdout.write('.')
         sys.stdout.flush()
@@ -314,6 +335,15 @@ def main():
     random.seed(args.seed)
     np.random.seed(args.seed)
 
+    try:
+        import affinity
+        affinity.set_process_affinity_mask(0,args.affinity)
+        assert affinity.get_process_affinity_mask(0) == args.affinity
+        print("CPU affinity set to %d" % args.affinity)
+    except ImportError:
+        import warnings
+        warnings.warn("The 'affinity' module is not available, results may be unreliable")
+
     print("\n")
     prprint("LOG_FILE = %s" % args.log_file)
     if args.outdf:
