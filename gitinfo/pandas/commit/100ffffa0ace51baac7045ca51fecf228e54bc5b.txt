commit 100ffffa0ace51baac7045ca51fecf228e54bc5b
Author: Simon Hawkins <simonjayhawkins@gmail.com>
Date:   Sun Dec 30 22:48:05 2018 +0000

    REF/TST: replace capture_stdout with pytest capsys fixture (#24501)

diff --git a/pandas/tests/frame/test_repr_info.py b/pandas/tests/frame/test_repr_info.py
index 07cbb8cdc..714b9b54c 100644
--- a/pandas/tests/frame/test_repr_info.py
+++ b/pandas/tests/frame/test_repr_info.py
@@ -193,7 +193,6 @@ class TestDataFrameReprInfoEtc(TestData):
         # GH 12182
         assert df._repr_latex_() is None
 
-    @tm.capture_stdout
     def test_info(self):
         io = StringIO()
         self.frame.info(buf=io)
diff --git a/pandas/tests/io/formats/test_to_csv.py b/pandas/tests/io/formats/test_to_csv.py
index 69fdb7329..786c8fab0 100644
--- a/pandas/tests/io/formats/test_to_csv.py
+++ b/pandas/tests/io/formats/test_to_csv.py
@@ -459,8 +459,7 @@ $1$,$2$
             with open(path, 'rb') as f:
                 assert f.read() == expected_crlf
 
-    @tm.capture_stdout
-    def test_to_csv_stdout_file(self):
+    def test_to_csv_stdout_file(self, capsys):
         # GH 21561
         df = pd.DataFrame([['foo', 'bar'], ['baz', 'qux']],
                           columns=['name_1', 'name_2'])
@@ -470,9 +469,9 @@ $1$,$2$
         expected_ascii = tm.convert_rows_list_to_csv_str(expected_rows)
 
         df.to_csv(sys.stdout, encoding='ascii')
-        output = sys.stdout.getvalue()
+        captured = capsys.readouterr()
 
-        assert output == expected_ascii
+        assert captured.out == expected_ascii
         assert not sys.stdout.closed
 
     @pytest.mark.xfail(
diff --git a/pandas/tests/io/formats/test_to_html.py b/pandas/tests/io/formats/test_to_html.py
index 9662b3d51..6c2d12076 100644
--- a/pandas/tests/io/formats/test_to_html.py
+++ b/pandas/tests/io/formats/test_to_html.py
@@ -246,7 +246,6 @@ class TestToHTML(object):
         result = df.to_html(border=0)
         assert 'border="0"' in result
 
-    @tm.capture_stdout
     def test_display_option_warning(self):
         with tm.assert_produces_warning(FutureWarning,
                                         check_stacklevel=False):
diff --git a/pandas/tests/io/parser/test_common.py b/pandas/tests/io/parser/test_common.py
index 9471a3a91..2dc4c5781 100644
--- a/pandas/tests/io/parser/test_common.py
+++ b/pandas/tests/io/parser/test_common.py
@@ -11,7 +11,6 @@ import csv
 from datetime import datetime
 import os
 import platform
-import sys
 from tempfile import TemporaryFile
 
 import numpy as np
@@ -1509,8 +1508,7 @@ def test_whitespace_regex_separator(all_parsers, data, expected):
     tm.assert_frame_equal(result, expected)
 
 
-@tm.capture_stdout
-def test_verbose_read(all_parsers):
+def test_verbose_read(all_parsers, capsys):
     parser = all_parsers
     data = """a,b,c,d
 one,1,2,3
@@ -1524,17 +1522,16 @@ two,1,2,3"""
 
     # Engines are verbose in different ways.
     parser.read_csv(StringIO(data), verbose=True)
-    output = sys.stdout.getvalue()
+    captured = capsys.readouterr()
 
     if parser.engine == "c":
-        assert "Tokenization took:" in output
-        assert "Parser memory cleanup took:" in output
+        assert "Tokenization took:" in captured.out
+        assert "Parser memory cleanup took:" in captured.out
     else:  # Python engine
-        assert output == "Filled 3 NA values in column a\n"
+        assert captured.out == "Filled 3 NA values in column a\n"
 
 
-@tm.capture_stdout
-def test_verbose_read2(all_parsers):
+def test_verbose_read2(all_parsers, capsys):
     parser = all_parsers
     data = """a,b,c,d
 one,1,2,3
@@ -1547,14 +1544,14 @@ seven,1,2,3
 eight,1,2,3"""
 
     parser.read_csv(StringIO(data), verbose=True, index_col=0)
-    output = sys.stdout.getvalue()
+    captured = capsys.readouterr()
 
     # Engines are verbose in different ways.
     if parser.engine == "c":
-        assert "Tokenization took:" in output
-        assert "Parser memory cleanup took:" in output
+        assert "Tokenization took:" in captured.out
+        assert "Parser memory cleanup took:" in captured.out
     else:  # Python engine
-        assert output == "Filled 1 NA values in column a\n"
+        assert captured.out == "Filled 1 NA values in column a\n"
 
 
 def test_iteration_open_handle(all_parsers):
diff --git a/pandas/tests/io/test_sql.py b/pandas/tests/io/test_sql.py
index c202fae8c..24bd6d9ac 100644
--- a/pandas/tests/io/test_sql.py
+++ b/pandas/tests/io/test_sql.py
@@ -2310,7 +2310,6 @@ class TestXSQLite(SQLiteMixIn):
         cur = self.conn.cursor()
         cur.execute(create_sql)
 
-    @tm.capture_stdout
     def test_execute_fail(self):
         create_sql = """
         CREATE TABLE test
@@ -2567,7 +2566,6 @@ class TestXMySQL(MySQLMixIn):
         cur.execute(drop_sql)
         cur.execute(create_sql)
 
-    @tm.capture_stdout
     def test_execute_fail(self):
         drop_sql = "DROP TABLE IF EXISTS test"
         create_sql = """
diff --git a/pandas/tests/plotting/test_frame.py b/pandas/tests/plotting/test_frame.py
index 350d1bb15..cc52130a1 100644
--- a/pandas/tests/plotting/test_frame.py
+++ b/pandas/tests/plotting/test_frame.py
@@ -1819,7 +1819,6 @@ class TestDataFramePlots(TestPlotBase):
         assert ax.get_legend().get_texts()[0].get_text() == 'None'
 
     @pytest.mark.slow
-    @tm.capture_stdout
     def test_line_colors(self):
         from matplotlib import cm
 
diff --git a/pandas/tests/series/test_missing.py b/pandas/tests/series/test_missing.py
index dc58b46f9..ffd21fb44 100644
--- a/pandas/tests/series/test_missing.py
+++ b/pandas/tests/series/test_missing.py
@@ -475,7 +475,6 @@ class TestSeriesMissingData():
         tm.assert_series_equal(r, e)
         tm.assert_series_equal(dr, de)
 
-    @tm.capture_stdout
     def test_isnull_for_inf_deprecated(self):
         # gh-17115
         s = Series(['a', np.inf, np.nan, 1.0])
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 91e3c6d64..9870a2e51 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -20,8 +20,8 @@ from numpy.random import rand, randn
 from pandas._libs import testing as _testing
 import pandas.compat as compat
 from pandas.compat import (
-    PY2, PY3, Counter, StringIO, callable, filter, httplib, lmap, lrange, lzip,
-    map, raise_with_traceback, range, string_types, u, unichr, zip)
+    PY2, PY3, Counter, callable, filter, httplib, lmap, lrange, lzip, map,
+    raise_with_traceback, range, string_types, u, unichr, zip)
 
 from pandas.core.dtypes.common import (
     is_bool, is_categorical_dtype, is_datetime64_dtype, is_datetime64tz_dtype,
@@ -637,53 +637,6 @@ def set_defaultencoding(encoding):
         sys.setdefaultencoding(orig)
 
 
-def capture_stdout(f):
-    r"""
-    Decorator to capture stdout in a buffer so that it can be checked
-    (or suppressed) during testing.
-
-    Parameters
-    ----------
-    f : callable
-        The test that is capturing stdout.
-
-    Returns
-    -------
-    f : callable
-        The decorated test ``f``, which captures stdout.
-
-    Examples
-    --------
-
-    >>> from pandas.util.testing import capture_stdout
-    >>> import sys
-    >>>
-    >>> @capture_stdout
-    ... def test_print_pass():
-    ...     print("foo")
-    ...     out = sys.stdout.getvalue()
-    ...     assert out == "foo\n"
-    >>>
-    >>> @capture_stdout
-    ... def test_print_fail():
-    ...     print("foo")
-    ...     out = sys.stdout.getvalue()
-    ...     assert out == "bar\n"
-    ...
-    AssertionError: assert 'foo\n' == 'bar\n'
-    """
-
-    @compat.wraps(f)
-    def wrapper(*args, **kwargs):
-        try:
-            sys.stdout = StringIO()
-            f(*args, **kwargs)
-        finally:
-            sys.stdout = sys.__stdout__
-
-    return wrapper
-
-
 # -----------------------------------------------------------------------------
 # Console debugging tools
 
