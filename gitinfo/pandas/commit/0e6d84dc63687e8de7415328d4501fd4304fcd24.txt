commit 0e6d84dc63687e8de7415328d4501fd4304fcd24
Author: Chang She <chang@lambdafoundry.com>
Date:   Wed May 2 09:55:29 2012 -0400

    ENH: shifting with PeriodIndex GH #1157

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 40492cb09..2ec745bb0 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -33,6 +33,7 @@ from pandas.core.internals import BlockManager, make_block, form_blocks
 from pandas.core.series import Series, _radd_compat
 from pandas.compat.scipy import scoreatpercentile as _quantile
 from pandas.tseries.index import DatetimeIndex
+from pandas.tseries.period import PeriodIndex
 from pandas.util import py3compat
 from pandas.util.terminal import get_terminal_size
 from pandas.util.decorators import deprecate, Appender, Substitution
@@ -2987,6 +2988,15 @@ class DataFrame(NDFrame):
             indexer = self._shift_indexer(periods)
             new_blocks = [_shift_block(b, indexer) for b in self._data.blocks]
             new_data = BlockManager(new_blocks, [self.columns, self.index])
+        elif isinstance(self.index, PeriodIndex):
+            orig_offset = datetools.to_offset(self.index.freq)
+            if offset == orig_offset:
+                new_data = self._data.copy()
+                new_data.axes[1] = self.index.shift(periods)
+            else:
+                msg = ('Given freq %s does not match PeriodIndex freq %s' %
+                       (offset.rule_code, orig_offset.rule_code))
+                raise ValueError(msg)
         else:
             new_data = self._data.copy()
             new_data.axes[1] = self.index.shift(periods, offset)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 5ac68e3a0..ea321e0ab 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -2262,6 +2262,13 @@ copy : boolean, default False
                 new_values[periods:] = nan
 
             return Series(new_values, index=self.index, name=self.name)
+        elif isinstance(self.index, PeriodIndex):
+            orig_offset = datetools.to_offset(self.index.freq)
+            if orig_offset == offset:
+                return Series(self, self.index.shift(periods), name=self.name)
+            msg = ('Given freq %s does not match PeriodIndex freq %s' %
+                   (offset.rule_code, orig_offset.rule_code))
+            raise ValueError(msg)
         else:
             return Series(self, index=self.index.shift(periods, offset),
                           name=self.name)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index fd1aa27dd..f4038dcbb 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3725,6 +3725,23 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         # shift int frame
         int_shifted = self.intframe.shift(1)
 
+        # Shifting with PeriodIndex
+        ps = tm.makePeriodFrame()
+        shifted = ps.shift(1)
+        unshifted = shifted.shift(-1)
+        self.assert_(shifted.index.equals(ps.index))
+
+        tm.assert_dict_equal(unshifted.ix[:, 0].valid(), ps.ix[:, 0],
+                             compare_keys=False)
+
+        shifted2 = ps.shift(1, 'B')
+        shifted3 = ps.shift(1, datetools.bday)
+        assert_frame_equal(shifted2, shifted3)
+        assert_frame_equal(ps, shifted2.shift(-1, 'B'))
+
+        self.assertRaises(ValueError, ps.shift, freq='D')
+
+
     def test_apply(self):
         # ufunc
         applied = self.frame.apply(np.sqrt)
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 962a9dddc..ffc6dacfe 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -1819,6 +1819,19 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         unshifted = self.ts.shift(0)
         assert_series_equal(unshifted, self.ts)
 
+        # Shifting with PeriodIndex
+        ps = tm.makePeriodSeries()
+        shifted = ps.shift(1)
+        unshifted = shifted.shift(-1)
+        tm.assert_dict_equal(unshifted.valid(), ps, compare_keys=False)
+
+        shifted2 = ps.shift(1, 'B')
+        shifted3 = ps.shift(1, datetools.bday)
+        assert_series_equal(shifted2, shifted3)
+        assert_series_equal(ps, shifted2.shift(-1, 'B'))
+
+        self.assertRaises(ValueError, ps.shift, freq='D')
+
     def test_shift_int(self):
         ts = self.ts.astype(int)
         shifted = ts.shift(1)
