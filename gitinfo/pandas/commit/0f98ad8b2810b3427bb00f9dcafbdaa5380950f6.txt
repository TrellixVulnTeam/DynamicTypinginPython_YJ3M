commit 0f98ad8b2810b3427bb00f9dcafbdaa5380950f6
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Feb 23 15:04:38 2012 -0500

    BUG: fix issues resulting from unclean merge in PR #807

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index e4679da08..cb523bedb 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -659,7 +659,7 @@ class DataFrame(NDFrame):
         if isinstance(data, (np.ndarray, DataFrame, dict)):
             columns, sdict = _rec_to_dict(data)
         else:
-            sdict, columns = _list_to_sdict(data, columns)
+            sdict, columns = _to_sdict(data, columns)
 
         if exclude is None:
             exclude = set()
@@ -1697,12 +1697,12 @@ class DataFrame(NDFrame):
         """
         if isinstance(other, DataFrame):
             return self._align_frame(other, join=join, axis=axis, level=level,
-                                     copy=copy, 
+                                     copy=copy,
                                      fill_value=fill_value,
                                      fill_method=fill_method)
         elif isinstance(other, Series):
             return self._align_series(other, join=join, axis=axis, level=level,
-                                      copy=copy, 
+                                      copy=copy,
                                       fill_value=fill_value,
                                       fill_method=fill_method)
         else:  # pragma: no cover
@@ -4092,6 +4092,8 @@ def _rec_to_dict(arr):
 
 
 def _to_sdict(data, columns):
+    if len(data) == 0:
+        return {}, columns
     if isinstance(data[0], (list, tuple)):
         return _list_to_sdict(data, columns)
     elif isinstance(data[0], dict):
@@ -4101,6 +4103,18 @@ def _to_sdict(data, columns):
     else:  # pragma: no cover
         raise TypeError('No logic to handle %s type' % type(data[0]))
 
+def _list_to_sdict(data, columns):
+    if len(data) > 0 and isinstance(data[0], tuple):
+        content = list(lib.to_object_array_tuples(data).T)
+    elif len(data) > 0:
+        # list of lists
+        content = list(lib.to_object_array(data).T)
+    else:
+        if columns is None:
+            columns = []
+        return {}, columns
+    return _convert_object_array(content, columns)
+
 def _list_of_series_to_sdict(data, columns):
     from pandas.core.index import _get_combined_index
 
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index c36b8c9b2..6c25aa2d0 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -1785,10 +1785,10 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
     def test_align(self):
         def _check_align(a, b, how='left', fill=None):
             aa, ab = a.align(b, join=how, fill_value=fill)
-                        
+
             join_index = a.index.join(b.index, how=how)
             if fill is not None:
-                diff_a = aa.index.diff(join_index)                
+                diff_a = aa.index.diff(join_index)
                 diff_b = ab.index.diff(join_index)
                 if len(diff_a) > 0:
                     self.assert_((aa.reindex(diff_a) == fill).all())
@@ -1798,12 +1798,16 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
             ea = a.reindex(join_index)
             eb = b.reindex(join_index)
 
+            if fill is not None:
+                ea = ea.fillna(fill)
+                eb = eb.fillna(fill)
+
             assert_series_equal(aa, ea)
             assert_series_equal(ab, eb)
 
         for kind in JOIN_TYPES:
             _check_align(self.ts[2:], self.ts[:-5])
-            _check_align(self.ts[2:], self.ts[:-5], -1)
+            _check_align(self.ts[2:], self.ts[:-5], fill=-1)
 
             # empty left
             _check_align(self.ts[:0], self.ts[:-5])
