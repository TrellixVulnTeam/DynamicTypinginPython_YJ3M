commit b6400e0ae5ea300520d394144c0b2675cb6cc666
Author: Thomas Kluyver <takowl@gmail.com>
Date:   Fri Nov 22 18:33:32 2013 -0800

    Add repr footer showing total number of rows and columns

diff --git a/pandas/core/format.py b/pandas/core/format.py
index 49f64088b..1ca68b8d4 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -1,3 +1,4 @@
+#coding: utf-8
 from __future__ import print_function
 # pylint: disable=W0141
 
@@ -264,7 +265,7 @@ class DataFrameFormatter(TableFormatter):
                  header=True, index=True, na_rep='NaN', formatters=None,
                  justify=None, float_format=None, sparsify=None,
                  index_names=True, line_width=None, max_rows=None, max_cols=None,
-                 **kwds):
+                 show_dimensions=False, **kwds):
         self.frame = frame
         self.buf = buf if buf is not None else StringIO()
         self.show_index_names = index_names
@@ -283,6 +284,7 @@ class DataFrameFormatter(TableFormatter):
         self.line_width = line_width
         self.max_rows = max_rows
         self.max_cols = max_cols
+        self.show_dimensions = show_dimensions
 
         if justify is None:
             self.justify = get_option("display.colheader_justify")
@@ -311,6 +313,7 @@ class DataFrameFormatter(TableFormatter):
         cols_to_show = self.columns[:self.max_cols]
         truncate_h = self.max_cols and (len(self.columns) > self.max_cols)
         truncate_v = self.max_rows and (len(self.frame) > self.max_rows)
+        self.truncated_v = truncate_v
         if truncate_h:
             cols_to_show = self.columns[:self.max_cols]
         else:
@@ -377,6 +380,10 @@ class DataFrameFormatter(TableFormatter):
 
         self.buf.writelines(text)
 
+        if self.show_dimensions:
+            self.buf.write("\n\n[%d rows x %d columns]" \
+                            % (len(frame), len(frame.columns)) )
+
     def _join_multiline(self, *strcols):
         lwidth = self.line_width
         adjoin_width = 1
@@ -671,6 +678,8 @@ class HTMLFormatter(TableFormatter):
                                       'not %s') % type(self.classes))
             _classes.extend(self.classes)
 
+
+
         self.write('<table border="1" class="%s">' % ' '.join(_classes),
                    indent)
 
@@ -687,6 +696,10 @@ class HTMLFormatter(TableFormatter):
             indent = self._write_body(indent)
 
         self.write('</table>', indent)
+        if self.fmt.show_dimensions:
+            by = chr(215) if compat.PY3 else unichr(215) # Ã—
+            self.write(u('<p>%d rows %s %d columns</p>') %
+                         (len(frame), by, len(frame.columns)) )
         _put_lines(buf, self.elements)
 
     def _write_header(self, indent):
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index dca6c2250..88cf898d3 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -454,7 +454,7 @@ class DataFrame(NDFrame):
         else:
             width = None
         self.to_string(buf=buf, max_rows=max_rows, max_cols=max_cols,
-                       line_width=width)
+                       line_width=width, show_dimensions=True)
 
         return buf.getvalue()
 
@@ -485,7 +485,8 @@ class DataFrame(NDFrame):
 
             return ('<div style="max-height:1000px;'
                     'max-width:1500px;overflow:auto;">\n' +
-                    self.to_html(max_rows=max_rows, max_cols=max_cols) \
+                    self.to_html(max_rows=max_rows, max_cols=max_cols,
+                                 show_dimensions=True) \
                     + '\n</div>')
         else:
             return None
@@ -1254,7 +1255,8 @@ class DataFrame(NDFrame):
                   header=True, index=True, na_rep='NaN', formatters=None,
                   float_format=None, sparsify=None, nanRep=None,
                   index_names=True, justify=None, force_unicode=None,
-                  line_width=None, max_rows=None, max_cols=None):
+                  line_width=None, max_rows=None, max_cols=None,
+                  show_dimensions=False):
         """
         Render a DataFrame to a console-friendly tabular output.
         """
@@ -1281,7 +1283,8 @@ class DataFrame(NDFrame):
                                            index_names=index_names,
                                            header=header, index=index,
                                            line_width=line_width,
-                                           max_rows=max_rows, max_cols=max_cols)
+                                           max_rows=max_rows, max_cols=max_cols,
+                                           show_dimensions=show_dimensions)
         formatter.to_string()
 
         if buf is None:
@@ -1293,7 +1296,8 @@ class DataFrame(NDFrame):
                 header=True, index=True, na_rep='NaN', formatters=None,
                 float_format=None, sparsify=None, index_names=True,
                 justify=None, force_unicode=None, bold_rows=True,
-                classes=None, escape=True, max_rows=None, max_cols=None):
+                classes=None, escape=True, max_rows=None, max_cols=None,
+                show_dimensions=False):
         """
         Render a DataFrame as an HTML table.
 
@@ -1332,7 +1336,8 @@ class DataFrame(NDFrame):
                                            header=header, index=index,
                                            bold_rows=bold_rows,
                                            escape=escape,
-                                           max_rows=max_rows, max_cols=max_cols)
+                                           max_rows=max_rows, max_cols=max_cols,
+                                           show_dimensions=show_dimensions)
         formatter.to_html(classes=classes)
 
         if buf is None:
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index e5cd8af31..8e23176e9 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -41,7 +41,7 @@ def has_horizontally_truncated_repr(df):
 
 def has_vertically_truncated_repr(df):
     r = repr(df)
-    return '..' in r.splitlines()[-1]
+    return '..' in r.splitlines()[-3]
 
 def has_truncated_repr(df):
     return has_horizontally_truncated_repr(df) or has_vertically_truncated_repr(df)
@@ -128,16 +128,16 @@ class TestDataFrameFormatting(unittest.TestCase):
     def test_repr_chop_threshold(self):
         df = DataFrame([[0.1, 0.5],[0.5, -0.1]])
         pd.reset_option("display.chop_threshold") # default None
-        self.assertEqual(repr(df), '     0    1\n0  0.1  0.5\n1  0.5 -0.1')
+        self.assertEqual(repr(df), '     0    1\n0  0.1  0.5\n1  0.5 -0.1\n\n[2 rows x 2 columns]')
 
         with option_context("display.chop_threshold", 0.2 ):
-            self.assertEqual(repr(df), '     0    1\n0  0.0  0.5\n1  0.5  0.0')
+            self.assertEqual(repr(df), '     0    1\n0  0.0  0.5\n1  0.5  0.0\n\n[2 rows x 2 columns]')
 
         with option_context("display.chop_threshold", 0.6 ):
-            self.assertEqual(repr(df), '   0  1\n0  0  0\n1  0  0')
+            self.assertEqual(repr(df), '   0  1\n0  0  0\n1  0  0\n\n[2 rows x 2 columns]')
 
         with option_context("display.chop_threshold", None ):
-            self.assertEqual(repr(df),  '     0    1\n0  0.1  0.5\n1  0.5 -0.1')
+            self.assertEqual(repr(df),  '     0    1\n0  0.1  0.5\n1  0.5 -0.1\n\n[2 rows x 2 columns]')
 
     def test_repr_obeys_max_seq_limit(self):
         import pandas.core.common as com
@@ -775,6 +775,8 @@ class TestDataFrameFormatting(unittest.TestCase):
             df = DataFrame([col(max_cols-1, 25) for _ in range(10)])
             set_option('display.expand_frame_repr', False)
             rep_str = repr(df)
+            print(rep_str)
+            assert "10 rows x %d columns" % (max_cols-1) in rep_str
             set_option('display.expand_frame_repr', True)
             wide_repr = repr(df)
             self.assert_(rep_str != wide_repr)
@@ -790,7 +792,7 @@ class TestDataFrameFormatting(unittest.TestCase):
             df = DataFrame(randn(5, 3), columns=['a' * 90, 'b' * 90, 'c' * 90])
             rep_str = repr(df)
 
-            self.assert_(len(rep_str.splitlines()) == 20)
+            self.assertEqual(len(rep_str.splitlines()), 22)
 
     def test_wide_repr_named(self):
         with option_context('mode.sim_interactive', True):
@@ -1450,6 +1452,8 @@ c  10  11  12  13  14\
         long_repr = df._repr_html_()
         assert '...' in long_repr
         assert str(40 + h) not in long_repr
+        assert u('%d rows ') % h in long_repr
+        assert u('2 columns') in long_repr
 
     def test_repr_html_long_multiindex(self):
         max_rows = get_option('display.max_rows')
@@ -1565,7 +1569,7 @@ c  10  11  12  13  14\
         vals = [2.08430917305e+10, 3.52205017305e+10, 2.30674817305e+10,
                 2.03954217305e+10, 5.59897817305e+10]
         skip = True
-        for line in repr(DataFrame({'A': vals})).split('\n'):
+        for line in repr(DataFrame({'A': vals})).split('\n')[:-2]:
             if line.startswith('dtype:'):
                 continue
             if _three_digit_exp():
