commit 64977f185747016e6939307b4f1a8258edcd7f89
Author: jonaslb <drixi.b@gmail.com>
Date:   Sat Apr 2 17:08:26 2016 +0200

    BUG: Filtering a groupby object with dropnan=False and no groups fulfilling req.
    
    closes #12768
    closes #12776

diff --git a/doc/source/whatsnew/v0.18.1.txt b/doc/source/whatsnew/v0.18.1.txt
index 4927180f3..8a09d7622 100644
--- a/doc/source/whatsnew/v0.18.1.txt
+++ b/doc/source/whatsnew/v0.18.1.txt
@@ -185,6 +185,7 @@ Bug Fixes
 - Bug in ``Series`` construction with ``Categorical`` and ``dtype='category'`` is specified (:issue:`12574`)
 - Bugs in concatenation with a coercable dtype was too aggressive. (:issue:`12411`, :issue:`12045`, :issue:`11594`, :issue:`10571`)
 - Bug in ``float_format`` option with option not being validated as a callable. (:issue:`12706`)
+- Bug in ``GroupBy.filter`` when ``dropna=False`` and no groups fulfilled the criteria (:issue:`12768`)
 
 
 
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 066afc55e..f01340818 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -820,7 +820,7 @@ class _GroupBy(PandasObject, SelectionMixin):
 
     def _apply_filter(self, indices, dropna):
         if len(indices) == 0:
-            indices = []
+            indices = np.array([], dtype='int64')
         else:
             indices = np.sort(np.concatenate(indices))
         if dropna:
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 28038e02b..04ef07244 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -4990,6 +4990,20 @@ class TestGroupBy(tm.TestCase):
         filtered = grouped.filter(lambda x: x['A'].mean() > 0)
         assert_frame_equal(filtered, df)
 
+    def test_filter_out_all_groups_in_df(self):
+        # GH12768
+        df = pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 0]})
+        res = df.groupby('a')
+        res = res.filter(lambda x: x['b'].sum() > 5, dropna=False)
+        expected = pd.DataFrame({'a': [nan] * 3, 'b': [nan] * 3})
+        assert_frame_equal(expected, res)
+
+        df = pd.DataFrame({'a': [1, 1, 2], 'b': [1, 2, 0]})
+        res = df.groupby('a')
+        res = res.filter(lambda x: x['b'].sum() > 5, dropna=True)
+        expected = pd.DataFrame({'a': [], 'b': []}, dtype="int64")
+        assert_frame_equal(expected, res)
+
     def test_filter_condition_raises(self):
         def raise_if_sum_is_zero(x):
             if x.sum() == 0:
