commit fb54f40b99ae413c4acee30f1063518672c3e152
Author: William Ayd <william.ayd@icloud.com>
Date:   Sun Feb 25 08:06:59 2018 -0800

    Fixed pct_change with 'fill_method' returning NaN instead of 0 (#19875)

diff --git a/doc/source/whatsnew/v0.23.0.txt b/doc/source/whatsnew/v0.23.0.txt
index fcaf46b1c..ba24c9312 100644
--- a/doc/source/whatsnew/v0.23.0.txt
+++ b/doc/source/whatsnew/v0.23.0.txt
@@ -808,6 +808,7 @@ Numeric
 - Bug in :class:`Index` constructor with ``dtype='uint64'`` where int-like floats were not coerced to :class:`UInt64Index` (:issue:`18400`)
 - Bug in :class:`DataFrame` flex arithmetic (e.g. ``df.add(other, fill_value=foo)``) with a ``fill_value`` other than ``None`` failed to raise ``NotImplementedError`` in corner cases where either the frame or ``other`` has length zero (:issue:`19522`)
 - Multiplication and division of numeric-dtyped :class:`Index` objects with timedelta-like scalars returns ``TimedeltaIndex`` instead of raising ``TypeError`` (:issue:`19333`)
+- Bug where ``NaN`` was returned instead of 0 by :func:`Series.pct_change` and :func:`DataFrame.pct_change` when ``fill_method`` is not ``None`` (provided) (:issue:`19873`)
 
 
 Indexing
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 85e2ce475..e1ed6ae9c 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -7488,7 +7488,7 @@ class NDFrame(PandasObject, SelectionMixin):
                                   **kwargs)) - 1)
         rs = rs.reindex_like(data)
         if freq is None:
-            mask = isna(com._values_from_object(self))
+            mask = isna(com._values_from_object(data))
             np.putmask(rs.values, mask, np.nan)
         return rs
 
diff --git a/pandas/tests/frame/test_analytics.py b/pandas/tests/frame/test_analytics.py
index f2b838707..de4a132e0 100644
--- a/pandas/tests/frame/test_analytics.py
+++ b/pandas/tests/frame/test_analytics.py
@@ -1941,12 +1941,9 @@ class TestDataFrameAnalytics(TestData):
         pnl.iat[1, 1] = np.nan
         pnl.iat[2, 3] = 60
 
-        mask = pnl.isnull()
-
         for axis in range(2):
             expected = pnl.ffill(axis=axis) / pnl.ffill(axis=axis).shift(
                 axis=axis) - 1
-            expected[mask] = np.nan
             result = pnl.pct_change(axis=axis, fill_method='pad')
 
             tm.assert_frame_equal(result, expected)
diff --git a/pandas/tests/frame/test_timeseries.py b/pandas/tests/frame/test_timeseries.py
index 25dd285e8..9f94439a7 100644
--- a/pandas/tests/frame/test_timeseries.py
+++ b/pandas/tests/frame/test_timeseries.py
@@ -118,7 +118,7 @@ class TestDataFrameTimeSeriesMethods(TestData):
         df = DataFrame({'a': s, 'b': s})
 
         chg = df.pct_change()
-        expected = Series([np.nan, 0.5, np.nan, 2.5 / 1.5 - 1, .2])
+        expected = Series([np.nan, 0.5, 0., 2.5 / 1.5 - 1, .2])
         edf = DataFrame({'a': expected, 'b': expected})
         assert_frame_equal(chg, edf)
 
diff --git a/pandas/tests/generic/test_generic.py b/pandas/tests/generic/test_generic.py
index 3868bdf7d..311c71f73 100644
--- a/pandas/tests/generic/test_generic.py
+++ b/pandas/tests/generic/test_generic.py
@@ -592,6 +592,26 @@ class Generic(object):
                 assert obj_copy is not obj
                 self._compare(obj_copy, obj)
 
+    @pytest.mark.parametrize("periods,fill_method,limit,exp", [
+        (1, "ffill", None, [np.nan, np.nan, np.nan, 1, 1, 1.5, 0, 0]),
+        (1, "ffill", 1, [np.nan, np.nan, np.nan, 1, 1, 1.5, 0, np.nan]),
+        (1, "bfill", None, [np.nan, 0, 0, 1, 1, 1.5, np.nan, np.nan]),
+        (1, "bfill", 1, [np.nan, np.nan, 0, 1, 1, 1.5, np.nan, np.nan]),
+        (-1, "ffill", None, [np.nan, np.nan, -.5, -.5, -.6, 0, 0, np.nan]),
+        (-1, "ffill", 1, [np.nan, np.nan, -.5, -.5, -.6, 0, np.nan, np.nan]),
+        (-1, "bfill", None, [0, 0, -.5, -.5, -.6, np.nan, np.nan, np.nan]),
+        (-1, "bfill", 1, [np.nan, 0, -.5, -.5, -.6, np.nan, np.nan, np.nan])
+    ])
+    def test_pct_change(self, periods, fill_method, limit, exp):
+        vals = [np.nan, np.nan, 1, 2, 4, 10, np.nan, np.nan]
+        obj = self._typ(vals)
+        func = getattr(obj, 'pct_change')
+        res = func(periods=periods, fill_method=fill_method, limit=limit)
+        if type(obj) is DataFrame:
+            tm.assert_frame_equal(res, DataFrame(exp))
+        else:
+            tm.assert_series_equal(res, Series(exp))
+
 
 class TestNDFrame(object):
     # tests that don't fit elsewhere
diff --git a/pandas/tests/generic/test_panel.py b/pandas/tests/generic/test_panel.py
index 4cbd5cb2a..49cb773a1 100644
--- a/pandas/tests/generic/test_panel.py
+++ b/pandas/tests/generic/test_panel.py
@@ -45,7 +45,7 @@ for t in ['test_rename', 'test_get_numeric_data',
           'test_stat_non_defaults_args',
           'test_truncate_out_of_bounds',
           'test_metadata_propagation', 'test_copy_and_deepcopy',
-          'test_sample']:
+          'test_pct_change', 'test_sample']:
 
     def f():
         def tester(self):
diff --git a/pandas/tests/series/test_timeseries.py b/pandas/tests/series/test_timeseries.py
index 7a1aff1cc..63a05ef7d 100644
--- a/pandas/tests/series/test_timeseries.py
+++ b/pandas/tests/series/test_timeseries.py
@@ -352,7 +352,7 @@ class TestTimeSeries(TestData):
         s = Series([1., 1.5, np.nan, 2.5, 3.])
 
         chg = s.pct_change()
-        expected = Series([np.nan, 0.5, np.nan, 2.5 / 1.5 - 1, .2])
+        expected = Series([np.nan, 0.5, 0., 2.5 / 1.5 - 1, .2])
         assert_series_equal(chg, expected)
 
     def test_pct_change_periods_freq(self):
