commit 89d79c59bea4b8689294910d181d81d34a6b6e0b
Author: Antonio Gutierrez <chibby0ne@gmail.com>
Date:   Wed Jul 17 13:50:46 2019 +0200

    arrays/period: allow parsing of PeriodDtype columns from read_csv (#27380)

diff --git a/doc/source/whatsnew/v0.25.0.rst b/doc/source/whatsnew/v0.25.0.rst
index c18068439..58b5ca87b 100644
--- a/doc/source/whatsnew/v0.25.0.rst
+++ b/doc/source/whatsnew/v0.25.0.rst
@@ -1147,6 +1147,7 @@ I/O
 - Bug in :meth:`read_hdf` where reading a timezone aware :class:`DatetimeIndex` would raise a ``TypeError`` (:issue:`11926`)
 - Bug in :meth:`to_msgpack` and :meth:`read_msgpack` which would raise a ``ValueError`` rather than a ``FileNotFoundError`` for an invalid path (:issue:`27160`)
 - Fixed bug in :meth:`DataFrame.to_parquet` which would raise a ``ValueError`` when the dataframe had no columns (:issue:`27339`)
+- Allow parsing of :class:`PeriodDtype` columns when using :func:`read_csv` (:issue:`26934`)
 
 Plotting
 ^^^^^^^^
diff --git a/pandas/core/arrays/period.py b/pandas/core/arrays/period.py
index 8291cb70a..b0336c46d 100644
--- a/pandas/core/arrays/period.py
+++ b/pandas/core/arrays/period.py
@@ -253,6 +253,10 @@ class PeriodArray(dtl.DatetimeLikeArrayMixin, dtl.DatelikeOps):
         ordinals = libperiod.extract_ordinals(periods, freq)
         return cls(ordinals, freq=freq)
 
+    @classmethod
+    def _from_sequence_of_strings(cls, strings, dtype=None, copy=False):
+        return cls._from_sequence(strings, dtype, copy)
+
     @classmethod
     def _from_datetime64(cls, data, freq, tz=None):
         """
diff --git a/pandas/tests/extension/test_period.py b/pandas/tests/extension/test_period.py
index 8a500e1be..c439b8b5e 100644
--- a/pandas/tests/extension/test_period.py
+++ b/pandas/tests/extension/test_period.py
@@ -158,6 +158,4 @@ class TestPrinting(BasePeriodTests, base.BasePrintingTests):
 class TestParsing(BasePeriodTests, base.BaseParsingTests):
     @pytest.mark.parametrize("engine", ["c", "python"])
     def test_EA_types(self, engine, data):
-        expected_msg = r".*must implement _from_sequence_of_strings.*"
-        with pytest.raises(NotImplementedError, match=expected_msg):
-            super().test_EA_types(engine, data)
+        super().test_EA_types(engine, data)
