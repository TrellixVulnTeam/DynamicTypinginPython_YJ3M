commit 7ecd163a99c351da5bead1ebae2bf850f5b58423
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Oct 14 00:31:39 2011 -0400

    ENH: remove panel weights option that was not doing anything principled

diff --git a/pandas/stats/fama_macbeth.py b/pandas/stats/fama_macbeth.py
index 1e1839e24..e632b9b00 100644
--- a/pandas/stats/fama_macbeth.py
+++ b/pandas/stats/fama_macbeth.py
@@ -25,7 +25,7 @@ def fama_macbeth(**kwargs):
     return klass(**kwargs)
 
 class FamaMacBeth(object):
-    def __init__(self, y, x, weights=None, intercept=True, nw_lags=None,
+    def __init__(self, y, x, intercept=True, nw_lags=None,
                  nw_lags_beta=None,
                  entity_effects=False, time_effects=False, x_effects=None,
                  cluster=None, dropped_dummies={}, verbose=False):
@@ -33,7 +33,7 @@ class FamaMacBeth(object):
 
         from pandas.stats.plm import MovingPanelOLS
         self._ols_result = MovingPanelOLS(
-            y=y, x=x, weights=weights, window_type='rolling', window=1,
+            y=y, x=x, window_type='rolling', window=1,
             intercept=intercept,
             nw_lags=nw_lags, entity_effects=entity_effects,
             time_effects=time_effects, x_effects=x_effects, cluster=cluster,
@@ -141,7 +141,7 @@ Formula: Y ~ %(formulaRHS)s
         return template % params
 
 class MovingFamaMacBeth(FamaMacBeth):
-    def __init__(self, y, x, weights=None, window_type='rolling', window=10,
+    def __init__(self, y, x, window_type='rolling', window=10,
                  intercept=True, nw_lags=None, nw_lags_beta=None,
                  entity_effects=False, time_effects=False, x_effects=None,
                  cluster=None, dropped_dummies={}, verbose=False):
@@ -149,7 +149,7 @@ class MovingFamaMacBeth(FamaMacBeth):
         self._window = window
 
         FamaMacBeth.__init__(
-            self, y=y, x=x, weights=weights, intercept=intercept,
+            self, y=y, x=x, intercept=intercept,
             nw_lags=nw_lags, nw_lags_beta=nw_lags_beta,
             entity_effects=entity_effects, time_effects=time_effects,
             x_effects=x_effects, cluster=cluster,
diff --git a/pandas/stats/interface.py b/pandas/stats/interface.py
index b3cc9eb41..89da36c98 100644
--- a/pandas/stats/interface.py
+++ b/pandas/stats/interface.py
@@ -39,9 +39,6 @@ def ols(**kwargs):
     Panel OLS options:
         pool: bool
             Whether to run pooled panel regression.  Defaults to true.
-        weights: DataFrame
-            Weight for each observation.  The weights are not normalized;
-            they're multiplied directly by each observation.
         entity_effects: bool
             Whether to account for entity fixed effects.  Defaults to false.
         time_effects: bool
diff --git a/pandas/stats/plm.py b/pandas/stats/plm.py
index 43d6322f8..f477d8aeb 100644
--- a/pandas/stats/plm.py
+++ b/pandas/stats/plm.py
@@ -36,9 +36,6 @@ class PanelOLS(OLS):
         FULL_SAMPLE, ROLLING, EXPANDING.  FULL_SAMPLE by default.
     window : int
         size of window (for rolling/expanding OLS)
-    weights : DataFrame
-        Weight for each observation.  The weights are not normalized;
-        they're multiplied directly by each observation.
     pool : bool, default True
         Whether to run pooled panel regression
     entity_effects : bool, deafult False
@@ -65,14 +62,12 @@ class PanelOLS(OLS):
         2. There is autocorrelation - use 'entity'
 
     """
-    def __init__(self, y, x, weights=None,
-                 intercept=True, nw_lags=None, entity_effects=False,
+    def __init__(self, y, x, intercept=True, nw_lags=None, entity_effects=False,
                  time_effects=False, x_effects=None, cluster=None,
                  dropped_dummies=None, verbose=False, nw_overlap=False):
         self._x_orig = x
         self._y_orig = y
 
-        self._weights = weights
         self._intercept = intercept
         self._nw_lags = nw_lags
         self._nw_overlap = nw_overlap
@@ -110,8 +105,7 @@ class PanelOLS(OLS):
 
         The categorical variables will get dropped from x.
         """
-        (x, x_filtered, y, weights,
-         weights_filt, cat_mapping) = self._filter_data()
+        (x, x_filtered, y, cat_mapping) = self._filter_data()
 
         self.log('Adding dummies to X variables')
         x = self._add_dummies(x, cat_mapping)
@@ -141,12 +135,6 @@ class PanelOLS(OLS):
             x_regressor = x
             y_regressor = y
 
-        if weights is not None:
-            assert(y_regressor.index is weights.index)
-            assert(x_regressor.index is weights.index)
-            y_regressor = y_regressor * weights
-            x_regressor = x_regressor.mul(weights, axis=0)
-
         return x, x_regressor, x_filtered, y, y_regressor
 
     def _filter_data(self):
@@ -170,9 +158,6 @@ class PanelOLS(OLS):
 
         x_names = data.items
 
-        if self._weights is not None:
-            data['__weights__'] = self._weights
-
         # Filter x's without y (so we can make a prediction)
         filtered = data.to_long()
 
@@ -187,21 +172,10 @@ class PanelOLS(OLS):
         data_long = data.to_long()
 
         x_filt = filtered.filter(x_names)
-
-        if self._weights:
-            weights_filt = filtered['__weights__']
-        else:
-            weights_filt = None
-
         x = data_long.filter(x_names)
         y = data_long['__y__']
 
-        if self._weights:
-            weights = data_long['__weights__']
-        else:
-            weights = None
-
-        return x, x_filt, y, weights, weights_filt, cat_mapping
+        return x, x_filt, y, cat_mapping
 
     def _convert_x(self, x):
         # Converts non-numeric data in x to floats. x_converted is the
@@ -527,9 +501,6 @@ class MovingPanelOLS(MovingOLS, PanelOLS):
         Minimum number of total observations to require. Default is
         rank(X matrix) + 1. In some cases we might want to be able to
         relax this number.
-    weights : DataFrame
-        Weight for each observation.  The weights are not normalized;
-        they're multiplied directly by each observation.
     pool : bool
         Whether to run pooled panel regression.  Defaults to true.
     entity_effects : bool
@@ -554,7 +525,7 @@ class MovingPanelOLS(MovingOLS, PanelOLS):
         1. Countries are correlated - use 'time'
         2. There is autocorrelation - use 'entity'
     """
-    def __init__(self, y, x, weights=None,
+    def __init__(self, y, x,
                  window_type='expanding', window=None,
                  min_periods=None,
                  min_obs=None,
@@ -567,8 +538,7 @@ class MovingPanelOLS(MovingOLS, PanelOLS):
                  dropped_dummies=None,
                  verbose=False):
 
-        self._args = dict(weights=weights,
-                          intercept=intercept,
+        self._args = dict(intercept=intercept,
                           nw_lags=nw_lags,
                           nw_overlap=nw_overlap,
                           entity_effects=entity_effects,
diff --git a/pandas/stats/tests/test_ols.py b/pandas/stats/tests/test_ols.py
index dd53183e3..79286c66f 100644
--- a/pandas/stats/tests/test_ols.py
+++ b/pandas/stats/tests/test_ols.py
@@ -381,41 +381,6 @@ class TestPanelOLS(BaseTest):
         self.assertTrue(result._x_filtered.major_axis.equals(
             result.y_fitted.index))
 
-    def testWithWeights(self):
-        data = np.arange(10).reshape((5, 2))
-        index = [datetime(2000, 1, 1),
-                 datetime(2000, 1, 2),
-                 datetime(2000, 1, 3),
-                 datetime(2000, 1, 4),
-                 datetime(2000, 1, 5)]
-        cols = ['A', 'B']
-        weights = DataFrame(data, index=index, columns=cols)
-
-        result = ols(y=self.panel_y2, x=self.panel_x2, weights=weights)
-
-        assert_almost_equal(result._y_trans.values.flat, [0, 16, 25])
-
-        exp_x = [[0, 0, 0],
-                 [36, 68, 4],
-                 [150, 240, 5]]
-        assert_almost_equal(result._x_trans.values, exp_x)
-
-
-        exp_x_filtered = [[6, 14, 1],
-                          [9, 17, 1],
-                          [30, 48, 1],
-                          [11, 20, 1],
-                          [12, 21, 1]]
-#         exp_x_filtered = [[0, 0, 0],
-#                           [36, 68, 4],
-#                           [150, 240, 5],
-#                           [66, 120, 6],
-#                           [84, 147, 7]]
-
-        assert_almost_equal(result._x_filtered.values, exp_x_filtered)
-
-        # _check_non_raw_results(result)
-
     def testWithTimeEffects(self):
         result = ols(y=self.panel_y2, x=self.panel_x2, time_effects=True)
 
@@ -513,15 +478,6 @@ class TestPanelOLS(BaseTest):
                             self.series_x, self.series_y, nw_lags=1,
                             nw_overlap=True)
 
-    def testRollingWithWeights(self):
-        idx = self.panel_y.index
-        cols = self.panel_y.columns
-
-
-        weights = DataFrame(np.random.standard_normal((len(idx), len(cols))),
-                            index=idx, columns=cols)
-        self.checkMovingOLS(self.panel_x,
-                            self.panel_y, weights=weights)
 
     def testRolling(self):
         self.checkMovingOLS(self.panel_x, self.panel_y)
