commit 55eccd9f3ac04c33b1720c858d2a9e426476d4b5
Author: jojomdt <zhangshengnan@metrodata.cn>
Date:   Mon Feb 27 14:26:07 2017 -0500

    BUG: reindex_like after shape comparison
    
    in assert_frame_equal, if check_like, the former code reindex_like
    before shape comparison.  for example:  if left.shape=(2,2),
    right.shpae=(2.0), after reindex_like,
    left.shape=(2,0),right.shape=(2,0),then the shape comparison will not
    find out that the two dataframes are different. For that, the
    assert_frame_equal will not raise assertion errors. But in fact it
    should raise.
    
    Author: jojomdt <zhangshengnan@metrodata.cn>
    
    Closes #15496 from jojomdt/master and squashes the following commits:
    
    7b3437b [jojomdt] fix test_frame_equal_message error
    0340b5c [jojomdt] change check_like description
    c03e0af [jojomdt] add test for TestAssertFrameEqual
    470dbaa [jojomdt] combine row and column shape comparison
    ce7bd74 [jojomdt] reindex_like after shape comparison

diff --git a/pandas/tests/test_testing.py b/pandas/tests/test_testing.py
index 07bfdc8fc..2fb58ef70 100644
--- a/pandas/tests/test_testing.py
+++ b/pandas/tests/test_testing.py
@@ -13,8 +13,6 @@ from pandas.util.testing import (assert_almost_equal, assertRaisesRegexp,
                                  RNGContext)
 from pandas.compat import is_platform_windows
 
-# let's get meta.
-
 
 class TestAssertAlmostEqual(tm.TestCase):
 
@@ -594,6 +592,20 @@ class TestAssertFrameEqual(tm.TestCase):
         self.assertRaises(AssertionError, assert_frame_equal, a, b, **kwargs)
         self.assertRaises(AssertionError, assert_frame_equal, b, a, **kwargs)
 
+    def test_equal_with_different_row_order(self):
+        # check_like=True ignores row-column orderings
+        df1 = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]},
+                           index=['a', 'b', 'c'])
+        df2 = pd.DataFrame({'A': [3, 2, 1], 'B': [6, 5, 4]},
+                           index=['c', 'b', 'a'])
+
+        self._assert_equal(df1, df2, check_like=True)
+        self._assert_not_equal(df1, df2)
+
+    def test_not_equal_with_different_shape(self):
+        self._assert_not_equal(pd.DataFrame({'A': [1, 2, 3]}),
+                               pd.DataFrame({'A': [1, 2, 3, 4]}))
+
     def test_index_dtype(self):
         df1 = DataFrame.from_records(
             {'a': [1, 2], 'c': ['l1', 'l2']}, index=['a'])
@@ -621,19 +633,9 @@ class TestAssertFrameEqual(tm.TestCase):
 
         expected = """DataFrame are different
 
-DataFrame shape \\(number of rows\\) are different
-\\[left\\]:  3, RangeIndex\\(start=0, stop=3, step=1\\)
-\\[right\\]: 4, RangeIndex\\(start=0, stop=4, step=1\\)"""
-
-        with assertRaisesRegexp(AssertionError, expected):
-            assert_frame_equal(pd.DataFrame({'A': [1, 2, 3]}),
-                               pd.DataFrame({'A': [1, 2, 3, 4]}))
-
-        expected = """DataFrame are different
-
-DataFrame shape \\(number of columns\\) are different
-\\[left\\]:  2, Index\\(\\[u?'A', u?'B'\\], dtype='object'\\)
-\\[right\\]: 1, Index\\(\\[u?'A'\\], dtype='object'\\)"""
+DataFrame shape mismatch
+\\[left\\]:  \\(3, 2\\)
+\\[right\\]: \\(3, 1\\)"""
 
         with assertRaisesRegexp(AssertionError, expected):
             assert_frame_equal(pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]}),
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 1bd539469..e4b10488c 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -1254,7 +1254,7 @@ def assert_frame_equal(left, right, check_dtype=True,
     check_categorical : bool, default True
         Whether to compare internal Categorical exactly.
     check_like : bool, default False
-        If true, then reindex_like operands
+        If true, ignore the order of rows & columns
     obj : str, default 'DataFrame'
         Specify object name being compared, internally used to show appropriate
         assertion message
@@ -1270,25 +1270,16 @@ def assert_frame_equal(left, right, check_dtype=True,
         assertIsInstance(left, type(right))
         # assert_class_equal(left, right, obj=obj)
 
+    # shape comparison
+    if left.shape != right.shape:
+        raise_assert_detail(obj,
+                            'DataFrame shape mismatch',
+                            '({0}, {1})'.format(*left.shape),
+                            '({0}, {1})'.format(*right.shape))
+
     if check_like:
         left, right = left.reindex_like(right), right
 
-    # shape comparison (row)
-    if left.shape[0] != right.shape[0]:
-        raise_assert_detail(obj,
-                            'DataFrame shape (number of rows) are different',
-                            '{0}, {1}'.format(left.shape[0], left.index),
-                            '{0}, {1}'.format(right.shape[0], right.index))
-    # shape comparison (columns)
-    if left.shape[1] != right.shape[1]:
-        raise_assert_detail(obj,
-                            'DataFrame shape (number of columns) '
-                            'are different',
-                            '{0}, {1}'.format(left.shape[1],
-                                              left.columns),
-                            '{0}, {1}'.format(right.shape[1],
-                                              right.columns))
-
     # index comparison
     assert_index_equal(left.index, right.index, exact=check_index_type,
                        check_names=check_names,
