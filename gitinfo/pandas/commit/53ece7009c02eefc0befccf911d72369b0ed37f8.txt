commit 53ece7009c02eefc0befccf911d72369b0ed37f8
Author: Simon Hawkins <simonjayhawkins@gmail.com>
Date:   Sat Feb 15 18:34:58 2020 +0000

    CI: silence numpy-dev failures (#32025)

diff --git a/pandas/__init__.py b/pandas/__init__.py
index d526531b1..2d3d3f7d9 100644
--- a/pandas/__init__.py
+++ b/pandas/__init__.py
@@ -25,6 +25,7 @@ from pandas.compat.numpy import (
     _np_version_under1p16,
     _np_version_under1p17,
     _np_version_under1p18,
+    _is_numpy_dev,
 )
 
 try:
diff --git a/pandas/tests/api/test_api.py b/pandas/tests/api/test_api.py
index 406d5f055..5aab5b814 100644
--- a/pandas/tests/api/test_api.py
+++ b/pandas/tests/api/test_api.py
@@ -198,6 +198,7 @@ class TestPDApi(Base):
         "_np_version_under1p16",
         "_np_version_under1p17",
         "_np_version_under1p18",
+        "_is_numpy_dev",
         "_testing",
         "_tslib",
         "_typing",
diff --git a/pandas/tests/frame/test_cumulative.py b/pandas/tests/frame/test_cumulative.py
index b545d6aa8..2466547e2 100644
--- a/pandas/tests/frame/test_cumulative.py
+++ b/pandas/tests/frame/test_cumulative.py
@@ -7,8 +7,9 @@ tests.series.test_cumulative
 """
 
 import numpy as np
+import pytest
 
-from pandas import DataFrame, Series
+from pandas import DataFrame, Series, _is_numpy_dev
 import pandas._testing as tm
 
 
@@ -73,6 +74,9 @@ class TestDataFrameCumulativeOps:
         df.cumprod(0)
         df.cumprod(1)
 
+    @pytest.mark.xfail(
+        _is_numpy_dev, reason="https://github.com/pandas-dev/pandas/issues/31992"
+    )
     def test_cummin(self, datetime_frame):
         datetime_frame.loc[5:10, 0] = np.nan
         datetime_frame.loc[10:15, 1] = np.nan
@@ -96,6 +100,9 @@ class TestDataFrameCumulativeOps:
         cummin_xs = datetime_frame.cummin(axis=1)
         assert np.shape(cummin_xs) == np.shape(datetime_frame)
 
+    @pytest.mark.xfail(
+        _is_numpy_dev, reason="https://github.com/pandas-dev/pandas/issues/31992"
+    )
     def test_cummax(self, datetime_frame):
         datetime_frame.loc[5:10, 0] = np.nan
         datetime_frame.loc[10:15, 1] = np.nan
diff --git a/pandas/tests/groupby/test_function.py b/pandas/tests/groupby/test_function.py
index 73e36cb5e..8830b84a5 100644
--- a/pandas/tests/groupby/test_function.py
+++ b/pandas/tests/groupby/test_function.py
@@ -17,6 +17,7 @@ from pandas import (
     NaT,
     Series,
     Timestamp,
+    _is_numpy_dev,
     date_range,
     isna,
 )
@@ -685,6 +686,9 @@ def test_numpy_compat(func):
         getattr(g, func)(foo=1)
 
 
+@pytest.mark.xfail(
+    _is_numpy_dev, reason="https://github.com/pandas-dev/pandas/issues/31992"
+)
 def test_cummin_cummax():
     # GH 15048
     num_types = [np.int32, np.int64, np.float32, np.float64]
diff --git a/pandas/tests/groupby/test_transform.py b/pandas/tests/groupby/test_transform.py
index 0ad829dd4..740103eec 100644
--- a/pandas/tests/groupby/test_transform.py
+++ b/pandas/tests/groupby/test_transform.py
@@ -15,6 +15,7 @@ from pandas import (
     MultiIndex,
     Series,
     Timestamp,
+    _is_numpy_dev,
     concat,
     date_range,
 )
@@ -329,6 +330,8 @@ def test_transform_transformation_func(transformation_func):
     if transformation_func in ["pad", "backfill", "tshift", "corrwith", "cumcount"]:
         # These transformation functions are not yet covered in this test
         pytest.xfail("See GH 31269 and GH 31270")
+    elif _is_numpy_dev and transformation_func in ["cummin"]:
+        pytest.xfail("https://github.com/pandas-dev/pandas/issues/31992")
     elif transformation_func == "fillna":
         test_op = lambda x: x.transform("fillna", value=0)
         mock_op = lambda x: x.fillna(value=0)
diff --git a/pandas/tests/scalar/timedelta/test_arithmetic.py b/pandas/tests/scalar/timedelta/test_arithmetic.py
index 60e278f47..f0ad5fa70 100644
--- a/pandas/tests/scalar/timedelta/test_arithmetic.py
+++ b/pandas/tests/scalar/timedelta/test_arithmetic.py
@@ -8,7 +8,7 @@ import numpy as np
 import pytest
 
 import pandas as pd
-from pandas import NaT, Timedelta, Timestamp, offsets
+from pandas import NaT, Timedelta, Timestamp, _is_numpy_dev, offsets
 import pandas._testing as tm
 from pandas.core import ops
 
@@ -377,18 +377,28 @@ class TestTimedeltaMultiplicationDivision:
         assert isinstance(result, Timedelta)
         assert result == Timedelta(days=2)
 
-    @pytest.mark.parametrize("nan", [np.nan, np.float64("NaN"), float("nan")])
+    @pytest.mark.parametrize(
+        "nan",
+        [
+            np.nan,
+            pytest.param(
+                np.float64("NaN"),
+                marks=pytest.mark.xfail(
+                    _is_numpy_dev,
+                    reason="https://github.com/pandas-dev/pandas/issues/31992",
+                ),
+            ),
+            float("nan"),
+        ],
+    )
     def test_td_div_nan(self, nan):
         # np.float64('NaN') has a 'dtype' attr, avoid treating as array
         td = Timedelta(10, unit="d")
         result = td / nan
         assert result is NaT
 
-        # TODO: Don't leave commented, this is just a temporary fix for
-        # https://github.com/pandas-dev/pandas/issues/31992
-
-        # result = td // nan
-        # assert result is NaT
+        result = td // nan
+        assert result is NaT
 
     # ---------------------------------------------------------------
     # Timedelta.__rdiv__
diff --git a/pandas/tests/series/test_cumulative.py b/pandas/tests/series/test_cumulative.py
index 885b5bf04..b0065992b 100644
--- a/pandas/tests/series/test_cumulative.py
+++ b/pandas/tests/series/test_cumulative.py
@@ -11,6 +11,7 @@ import numpy as np
 import pytest
 
 import pandas as pd
+from pandas import _is_numpy_dev
 import pandas._testing as tm
 
 
@@ -37,6 +38,9 @@ class TestSeriesCumulativeOps:
     def test_cumprod(self, datetime_series):
         _check_accum_op("cumprod", datetime_series)
 
+    @pytest.mark.xfail(
+        _is_numpy_dev, reason="https://github.com/pandas-dev/pandas/issues/31992"
+    )
     def test_cummin(self, datetime_series):
         tm.assert_numpy_array_equal(
             datetime_series.cummin().values,
@@ -49,6 +53,9 @@ class TestSeriesCumulativeOps:
 
         tm.assert_series_equal(result, expected)
 
+    @pytest.mark.xfail(
+        _is_numpy_dev, reason="https://github.com/pandas-dev/pandas/issues/31992"
+    )
     def test_cummax(self, datetime_series):
         tm.assert_numpy_array_equal(
             datetime_series.cummax().values,
