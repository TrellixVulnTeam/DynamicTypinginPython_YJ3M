commit e3fb2f68f44594a79815a4cfceb9d6a17bacb664
Author: jreback <jeff@reback.net>
Date:   Thu Jan 9 08:03:20 2014 -0500

    BUG: Bug in internal caching, related to (GH5727)

diff --git a/doc/source/release.rst b/doc/source/release.rst
index 66fe5a353..d8e06c1ce 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -82,6 +82,7 @@ Bug Fixes
   - Bug in ``to_datetime`` when passed a ``np.nan`` or integer datelike and a format string (:issue:`5863`)
   - Bug in groupby dtype conversion with datetimelike (:issue:`5869`)
   - Regresssion in handling of empty Series as indexers to Series  (:issue:`5877`)
+  - Bug in internal caching, related to (:issue:`5727`)
 
 pandas 0.13.0
 -------------
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 92539e7de..e5c5f362d 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -77,8 +77,8 @@ class NDFrame(PandasObject):
     axes : list
     copy : boolean, default False
     """
-    _internal_names = ['_data', 'name', '_cacher', 'is_copy', '_subtyp',
-                       '_index', '_default_kind', '_default_fill_value']
+    _internal_names = ['_data', '_cacher', '_item_cache', '_cache',
+                       'is_copy', '_subtyp', '_index', '_default_kind', '_default_fill_value']
     _internal_names_set = set(_internal_names)
     _metadata = []
     is_copy = None
@@ -721,13 +721,14 @@ class NDFrame(PandasObject):
                 # to avoid definitional recursion
                 # e.g. say fill_value needing _data to be
                 # defined
-                for k in self._internal_names_set:
+                meta = set(self._internal_names + self._metadata)
+                for k in list(meta):
                     if k in state:
                         v = state[k]
                         object.__setattr__(self, k, v)
 
                 for k, v in state.items():
-                    if k not in self._internal_names_set:
+                    if k not in meta:
                         object.__setattr__(self, k, v)
 
             else:
@@ -1607,16 +1608,23 @@ class NDFrame(PandasObject):
 
         This allows simpler access to columns for interactive use.
         """
-        if name in self._info_axis:
-            return self[name]
-        raise AttributeError("'%s' object has no attribute '%s'" %
-                             (type(self).__name__, name))
+        if name in self._internal_names_set:
+            return object.__getattribute__(self, name)
+        elif name in self._metadata:
+            return object.__getattribute__(self, name)
+        else:
+            if name in self._info_axis:
+                return self[name]
+            raise AttributeError("'%s' object has no attribute '%s'" %
+                                 (type(self).__name__, name))
 
     def __setattr__(self, name, value):
         """After regular attribute access, try looking up the name of the info
         This allows simpler access to columns for interactive use."""
         if name in self._internal_names_set:
             object.__setattr__(self, name, value)
+        elif name in self._metadata:
+            return object.__setattr__(self, name, value)
         else:
             try:
                 existing = getattr(self, name)
diff --git a/pandas/tests/test_indexing.py b/pandas/tests/test_indexing.py
index a5270fbbe..d68ead4a6 100644
--- a/pandas/tests/test_indexing.py
+++ b/pandas/tests/test_indexing.py
@@ -258,6 +258,12 @@ class TestIndexing(tm.TestCase):
         s = Series(np.zeros(n), index=index)
         str(s)
 
+        # setitem
+        expected = Series(np.ones(n), index=index)
+        s = Series(np.zeros(n), index=index)
+        s[s==0] = 1
+        assert_series_equal(s,expected)
+
     def test_at_and_iat_get(self):
 
         def _check(f, func, values = False):
