commit f0deaa67699db4fb03cf2164404f946e18aaaf26
Author: y-p <yoval@gmx.com>
Date:   Thu Nov 22 20:40:47 2012 +0200

    TST: str(x)/unicode(x),bytes(x)/str(x) should always work for Index,MultiIndex

diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index b94840d0d..4a86db9d6 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -851,6 +851,21 @@ class TestInt64Index(unittest.TestCase):
         df=pd.DataFrame({u"\u05d0":[1,2,3],"\u05d1":[4,5,6],"c":[7,8,9]})
         print(df.columns) # should not raise UnicodeDecodeError
 
+    def test_unicode_string_with_unicode(self):
+        idx = Index(range(1000))
+
+        if py3compat.PY3:
+            str(idx)
+        else:
+            unicode(idx)
+
+    def test_bytestring_with_unicode(self):
+        idx = Index(range(1000))
+        if py3compat.PY3:
+            bytes(idx)
+        else:
+            str(idx)
+
 class TestMultiIndex(unittest.TestCase):
 
     def setUp(self):
@@ -1680,6 +1695,24 @@ class TestMultiIndex(unittest.TestCase):
         index=pd.DataFrame(d).set_index(["a","b"]).index
         self.assertFalse("\\u" in repr(index)) # we don't want unicode-escaped
 
+    def test_unicode_string_with_unicode(self):
+        d={"a":[u"\u05d0",2,3],"b":[4,5,6],"c":[7,8,9]}
+        idx=pd.DataFrame(d).set_index(["a","b"]).index
+
+        if py3compat.PY3:
+            str(idx)
+        else:
+            unicode(idx)
+
+    def test_bytestring_with_unicode(self):
+        d={"a":[u"\u05d0",2,3],"b":[4,5,6],"c":[7,8,9]}
+        idx=pd.DataFrame(d).set_index(["a","b"]).index
+
+        if py3compat.PY3:
+            bytes(idx)
+        else:
+            str(idx)
+
 def test_get_combined_index():
     from pandas.core.index import _get_combined_index
     result = _get_combined_index([])
