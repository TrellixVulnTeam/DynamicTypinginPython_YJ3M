commit 36d8597b2ad1677ad25c2c70eaccdc842cf6df11
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Mar 23 18:55:20 2010 +0000

    renamed dayOfWeek parameter
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@144 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/datetools.py b/pandas/core/datetools.py
index 3520a023e..2206a18fe 100644
--- a/pandas/core/datetools.py
+++ b/pandas/core/datetools.py
@@ -308,7 +308,7 @@ class BMonthEnd(DateOffset):
 
 class Week(DateOffset):
     """
-    dayOfWeek
+    weekday
     0: Mondays
     1: Tuedays
     2: Wednesdays
@@ -320,41 +320,42 @@ class Week(DateOffset):
     _normalizeFirst = True
     def __init__(self, n=1, **kwds):
         self.n = n
-        self.dayOfWeek = kwds.get('dayOfWeek', None)
+        self.weekday = kwds.get('weekday', None)
 
-        if self.dayOfWeek is not None:
-            if self.dayOfWeek < 0 or self.dayOfWeek > 6:
-                raise Exception('Day must be 0<=day<=6, got %d' % self.dayOfWeek)
+        if self.weekday is not None:
+            if self.weekday < 0 or self.weekday > 6:
+                raise Exception('Day must be 0<=day<=6, got %d' %
+                                self.weekday)
 
         self.inc = timedelta(weeks=1)
         self.kwds = kwds
 
     def isAnchored(self):
-        return (self.n == 1 and self.dayOfWeek is not None)
+        return (self.n == 1 and self.weekday is not None)
 
     def apply(self, other):
-        if self.dayOfWeek is None:
+        if self.weekday is None:
             return other + self.n * self.inc
 
         if self.n > 0:
             k = self.n
             otherDay = other.weekday()
-            if otherDay != self.dayOfWeek:
-                other = other + timedelta((self.dayOfWeek - otherDay) % 7)
+            if otherDay != self.weekday:
+                other = other + timedelta((self.weekday - otherDay) % 7)
                 k = k - 1
             for i in xrange(k):
                 other = other + self.inc
         else:
             k = self.n
             otherDay = other.weekday()
-            if otherDay != self.dayOfWeek:
-                other = other + timedelta((self.dayOfWeek - otherDay) % 7)
+            if otherDay != self.weekday:
+                other = other + timedelta((self.weekday - otherDay) % 7)
             for i in xrange(-k):
                 other = other - self.inc
         return other
 
     def onOffset(self, someDate):
-        return someDate.weekday() == self.dayOfWeek
+        return someDate.weekday() == self.weekday
 
 
 class BQuarterEnd(DateOffset):
@@ -546,11 +547,11 @@ isBMonthEnd = BMonthEnd.onOffset
 _offsetMap = {
     "WEEKDAY"  : BDay(1),
     "EOM"      : BMonthEnd(1),
-    "W@MON"    : Week(dayOfWeek=0),
-    "W@TUE"    : Week(dayOfWeek=1),
-    "W@WED"    : Week(dayOfWeek=2),
-    "W@THU"    : Week(dayOfWeek=3),
-    "W@FRI"    : Week(dayOfWeek=4),
+    "W@MON"    : Week(weekday=0),
+    "W@TUE"    : Week(weekday=1),
+    "W@WED"    : Week(weekday=2),
+    "W@THU"    : Week(weekday=3),
+    "W@FRI"    : Week(weekday=4),
     "Q@JAN"    : BQuarterEnd(startingMonth=1),
     "Q@FEB"    : BQuarterEnd(startingMonth=2),
     "Q@MAR"    : BQuarterEnd(startingMonth=3),
@@ -600,3 +601,17 @@ def getOffsetName(offset):
         return name
     else:
         raise Exception('Bad offset name requested: %s!' % offset)
+
+# OK aqr/gaa/backtest/docs.py
+# OK aqr/gaa/tests/test_timerule.py
+# OK aqr/gaa/timerule.py
+# OK pandas/core/datetools.py
+# OK pandas/core/tests/test_datetools.py
+# OK prod/gaa/pmtools/utils/dateUtils.py
+# OK research/credit/timing.py
+# OK research/eq/eqe_com_factor/com_factor_test.py
+# research/eq/ExporterImporter/analysis.py
+# research/eq/ExporterImporter/factors.py
+# research/fx/Returns/IMM_Forward_Points.py
+# users/mst/mispricing.py
+# users/sargent/XSReturnVol.py
diff --git a/pandas/core/tests/test_datetools.py b/pandas/core/tests/test_datetools.py
index 71151224b..25fcb7616 100644
--- a/pandas/core/tests/test_datetools.py
+++ b/pandas/core/tests/test_datetools.py
@@ -207,14 +207,14 @@ class TestWeek(unittest.TestCase):
                        datetime(2008, 1, 6): datetime(2008, 1, 13),
                        datetime(2008, 1, 7): datetime(2008, 1, 14)}))
 
-        tests.append((Week(dayOfWeek=0), # Mon
+        tests.append((Week(weekday=0), # Mon
                       {datetime(2007, 12, 31): datetime(2008, 1, 7),
                        datetime(2008, 1, 4): datetime(2008, 1, 7),
                        datetime(2008, 1, 5): datetime(2008, 1, 7),
                        datetime(2008, 1, 6): datetime(2008, 1, 7),
                        datetime(2008, 1, 7): datetime(2008, 1, 14)}))
 
-        tests.append((Week(0, dayOfWeek=0), # n=0 -> roll forward. Mon
+        tests.append((Week(0, weekday=0), # n=0 -> roll forward. Mon
                       {datetime(2007, 12, 31): datetime(2007, 12, 31),
                        datetime(2008, 1, 4): datetime(2008, 1, 7),
                        datetime(2008, 1, 5): datetime(2008, 1, 7),
@@ -227,61 +227,61 @@ class TestWeek(unittest.TestCase):
 
     def test_onOffset(self):
 
-        tests = [(Week(dayOfWeek=0), datetime(2008, 1, 1), False),
-                 (Week(dayOfWeek=0), datetime(2008, 1, 2), False),
-                 (Week(dayOfWeek=0), datetime(2008, 1, 3), False),
-                 (Week(dayOfWeek=0), datetime(2008, 1, 4), False),
-                 (Week(dayOfWeek=0), datetime(2008, 1, 5), False),
-                 (Week(dayOfWeek=0), datetime(2008, 1, 6), False),
-                 (Week(dayOfWeek=0), datetime(2008, 1, 7), True),
-
-                 (Week(dayOfWeek=1), datetime(2008, 1, 1), True),
-                 (Week(dayOfWeek=1), datetime(2008, 1, 2), False),
-                 (Week(dayOfWeek=1), datetime(2008, 1, 3), False),
-                 (Week(dayOfWeek=1), datetime(2008, 1, 4), False),
-                 (Week(dayOfWeek=1), datetime(2008, 1, 5), False),
-                 (Week(dayOfWeek=1), datetime(2008, 1, 6), False),
-                 (Week(dayOfWeek=1), datetime(2008, 1, 7), False),
-
-                 (Week(dayOfWeek=2), datetime(2008, 1, 1), False),
-                 (Week(dayOfWeek=2), datetime(2008, 1, 2), True),
-                 (Week(dayOfWeek=2), datetime(2008, 1, 3), False),
-                 (Week(dayOfWeek=2), datetime(2008, 1, 4), False),
-                 (Week(dayOfWeek=2), datetime(2008, 1, 5), False),
-                 (Week(dayOfWeek=2), datetime(2008, 1, 6), False),
-                 (Week(dayOfWeek=2), datetime(2008, 1, 7), False),
-
-                 (Week(dayOfWeek=3), datetime(2008, 1, 1), False),
-                 (Week(dayOfWeek=3), datetime(2008, 1, 2), False),
-                 (Week(dayOfWeek=3), datetime(2008, 1, 3), True),
-                 (Week(dayOfWeek=3), datetime(2008, 1, 4), False),
-                 (Week(dayOfWeek=3), datetime(2008, 1, 5), False),
-                 (Week(dayOfWeek=3), datetime(2008, 1, 6), False),
-                 (Week(dayOfWeek=3), datetime(2008, 1, 7), False),
-
-                 (Week(dayOfWeek=4), datetime(2008, 1, 1), False),
-                 (Week(dayOfWeek=4), datetime(2008, 1, 2), False),
-                 (Week(dayOfWeek=4), datetime(2008, 1, 3), False),
-                 (Week(dayOfWeek=4), datetime(2008, 1, 4), True),
-                 (Week(dayOfWeek=4), datetime(2008, 1, 5), False),
-                 (Week(dayOfWeek=4), datetime(2008, 1, 6), False),
-                 (Week(dayOfWeek=4), datetime(2008, 1, 7), False),
-
-                 (Week(dayOfWeek=5), datetime(2008, 1, 1), False),
-                 (Week(dayOfWeek=5), datetime(2008, 1, 2), False),
-                 (Week(dayOfWeek=5), datetime(2008, 1, 3), False),
-                 (Week(dayOfWeek=5), datetime(2008, 1, 4), False),
-                 (Week(dayOfWeek=5), datetime(2008, 1, 5), True),
-                 (Week(dayOfWeek=5), datetime(2008, 1, 6), False),
-                 (Week(dayOfWeek=5), datetime(2008, 1, 7), False),
-
-                 (Week(dayOfWeek=6), datetime(2008, 1, 1), False),
-                 (Week(dayOfWeek=6), datetime(2008, 1, 2), False),
-                 (Week(dayOfWeek=6), datetime(2008, 1, 3), False),
-                 (Week(dayOfWeek=6), datetime(2008, 1, 4), False),
-                 (Week(dayOfWeek=6), datetime(2008, 1, 5), False),
-                 (Week(dayOfWeek=6), datetime(2008, 1, 6), True),
-                 (Week(dayOfWeek=6), datetime(2008, 1, 7), False),
+        tests = [(Week(weekday=0), datetime(2008, 1, 1), False),
+                 (Week(weekday=0), datetime(2008, 1, 2), False),
+                 (Week(weekday=0), datetime(2008, 1, 3), False),
+                 (Week(weekday=0), datetime(2008, 1, 4), False),
+                 (Week(weekday=0), datetime(2008, 1, 5), False),
+                 (Week(weekday=0), datetime(2008, 1, 6), False),
+                 (Week(weekday=0), datetime(2008, 1, 7), True),
+
+                 (Week(weekday=1), datetime(2008, 1, 1), True),
+                 (Week(weekday=1), datetime(2008, 1, 2), False),
+                 (Week(weekday=1), datetime(2008, 1, 3), False),
+                 (Week(weekday=1), datetime(2008, 1, 4), False),
+                 (Week(weekday=1), datetime(2008, 1, 5), False),
+                 (Week(weekday=1), datetime(2008, 1, 6), False),
+                 (Week(weekday=1), datetime(2008, 1, 7), False),
+
+                 (Week(weekday=2), datetime(2008, 1, 1), False),
+                 (Week(weekday=2), datetime(2008, 1, 2), True),
+                 (Week(weekday=2), datetime(2008, 1, 3), False),
+                 (Week(weekday=2), datetime(2008, 1, 4), False),
+                 (Week(weekday=2), datetime(2008, 1, 5), False),
+                 (Week(weekday=2), datetime(2008, 1, 6), False),
+                 (Week(weekday=2), datetime(2008, 1, 7), False),
+
+                 (Week(weekday=3), datetime(2008, 1, 1), False),
+                 (Week(weekday=3), datetime(2008, 1, 2), False),
+                 (Week(weekday=3), datetime(2008, 1, 3), True),
+                 (Week(weekday=3), datetime(2008, 1, 4), False),
+                 (Week(weekday=3), datetime(2008, 1, 5), False),
+                 (Week(weekday=3), datetime(2008, 1, 6), False),
+                 (Week(weekday=3), datetime(2008, 1, 7), False),
+
+                 (Week(weekday=4), datetime(2008, 1, 1), False),
+                 (Week(weekday=4), datetime(2008, 1, 2), False),
+                 (Week(weekday=4), datetime(2008, 1, 3), False),
+                 (Week(weekday=4), datetime(2008, 1, 4), True),
+                 (Week(weekday=4), datetime(2008, 1, 5), False),
+                 (Week(weekday=4), datetime(2008, 1, 6), False),
+                 (Week(weekday=4), datetime(2008, 1, 7), False),
+
+                 (Week(weekday=5), datetime(2008, 1, 1), False),
+                 (Week(weekday=5), datetime(2008, 1, 2), False),
+                 (Week(weekday=5), datetime(2008, 1, 3), False),
+                 (Week(weekday=5), datetime(2008, 1, 4), False),
+                 (Week(weekday=5), datetime(2008, 1, 5), True),
+                 (Week(weekday=5), datetime(2008, 1, 6), False),
+                 (Week(weekday=5), datetime(2008, 1, 7), False),
+
+                 (Week(weekday=6), datetime(2008, 1, 1), False),
+                 (Week(weekday=6), datetime(2008, 1, 2), False),
+                 (Week(weekday=6), datetime(2008, 1, 3), False),
+                 (Week(weekday=6), datetime(2008, 1, 4), False),
+                 (Week(weekday=6), datetime(2008, 1, 5), False),
+                 (Week(weekday=6), datetime(2008, 1, 6), True),
+                 (Week(weekday=6), datetime(2008, 1, 7), False),
              ]
 
         for offset, date, expected in tests:
@@ -706,11 +706,11 @@ def test_getOffsetName():
 
     assert datetools.getOffsetName(BDay()) == 'WEEKDAY'
     assert datetools.getOffsetName(BMonthEnd()) == 'EOM'
-    assert datetools.getOffsetName(Week(dayOfWeek=0)) == 'W@MON'
-    assert datetools.getOffsetName(Week(dayOfWeek=1)) == 'W@TUE'
-    assert datetools.getOffsetName(Week(dayOfWeek=2)) == 'W@WED'
-    assert datetools.getOffsetName(Week(dayOfWeek=3)) == 'W@THU'
-    assert datetools.getOffsetName(Week(dayOfWeek=4)) == 'W@FRI'
+    assert datetools.getOffsetName(Week(weekday=0)) == 'W@MON'
+    assert datetools.getOffsetName(Week(weekday=1)) == 'W@TUE'
+    assert datetools.getOffsetName(Week(weekday=2)) == 'W@WED'
+    assert datetools.getOffsetName(Week(weekday=3)) == 'W@THU'
+    assert datetools.getOffsetName(Week(weekday=4)) == 'W@FRI'
 
 
 def test_getOffset():
@@ -718,11 +718,11 @@ def test_getOffset():
 
     assert datetools.getOffset('WEEKDAY') == BDay()
     assert datetools.getOffset('EOM') == BMonthEnd()
-    assert datetools.getOffset('W@MON') == Week(dayOfWeek=0)
-    assert datetools.getOffset('W@TUE') == Week(dayOfWeek=1)
-    assert datetools.getOffset('W@WED') == Week(dayOfWeek=2)
-    assert datetools.getOffset('W@THU') == Week(dayOfWeek=3)
-    assert datetools.getOffset('W@FRI') == Week(dayOfWeek=4)
+    assert datetools.getOffset('W@MON') == Week(weekday=0)
+    assert datetools.getOffset('W@TUE') == Week(weekday=1)
+    assert datetools.getOffset('W@WED') == Week(weekday=2)
+    assert datetools.getOffset('W@THU') == Week(weekday=3)
+    assert datetools.getOffset('W@FRI') == Week(weekday=4)
 
 ####
 ## XDateRange Tests
