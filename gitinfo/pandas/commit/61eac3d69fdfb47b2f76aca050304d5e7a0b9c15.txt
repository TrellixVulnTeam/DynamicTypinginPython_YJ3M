commit 61eac3d69fdfb47b2f76aca050304d5e7a0b9c15
Author: jreback <jeff@reback.net>
Date:   Thu Apr 3 16:16:35 2014 -0400

    BUG: Bug in setting a tz-aware index directly via .index (GH6785)

diff --git a/doc/source/release.rst b/doc/source/release.rst
index 80a833848..31cd37e4b 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -301,6 +301,7 @@ Bug Fixes
 - Bug in downcasting inference with empty arrays (:issue:`6733`)
 - Bug in ``obj.blocks`` on sparse containers dropping all but the last items of same for dtype (:issue:`6748`)
 - Bug in unpickling ``NaT (NaTType)`` (:issue:`4606`)
+- Bug in setting a tz-aware index directly via ``.index`` (:issue:`6785`)
 
 pandas 0.13.1
 -------------
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 3213f288b..bae4a2c45 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -154,7 +154,7 @@ class Index(IndexOpsMixin, FrozenNDArray):
                 if (inferred.startswith('datetime') or
                         tslib.is_timestamp_array(subarr)):
                     from pandas.tseries.index import DatetimeIndex
-                    return DatetimeIndex(data, copy=copy, name=name, **kwargs)
+                    return DatetimeIndex(subarr, copy=copy, name=name, **kwargs)
                 elif inferred == 'period':
                     return PeriodIndex(subarr, name=name, **kwargs)
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 1bbcba0e4..4e422b452 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2125,6 +2125,15 @@ class TestDataFrame(tm.TestCase, CheckIndexing,
         result = df['D']
         assert_series_equal(result, expected)
 
+        # GH 6785
+        # set the index manually
+        import pytz
+        df = DataFrame([{'ts':datetime(2014, 4, 1, tzinfo=pytz.utc), 'foo':1}])
+        expected = df.set_index('ts')
+        df.index = df['ts']
+        df.pop('ts')
+        assert_frame_equal(df, expected)
+
     def test_set_index_multiindexcolumns(self):
         columns = MultiIndex.from_tuples([('foo', 1), ('foo', 2), ('bar', 1)])
         df = DataFrame(np.random.randn(3, 3), columns=columns)
