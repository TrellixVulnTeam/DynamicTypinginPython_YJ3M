commit 01344c14110d06de35226960d71b1d9f658430cb
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Dec 2 17:39:10 2011 -0500

    ENH: DataFrame.delevel will attempt to infer a better dtype for the level values, GH #440

diff --git a/pandas/core/common.py b/pandas/core/common.py
index b603028b6..5f50cd0db 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -646,6 +646,11 @@ def _asarray_tuplesafe(values, dtype=None):
 
     return result
 
+def is_integer_dtype(arr):
+    return issubclass(arr.dtype.type, np.integer)
+
+def is_float_dtype(arr):
+    return issubclass(arr.dtype.type, np.floating)
 
 def save(obj, path):
     """
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index b2cf08f74..aed8f6161 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2055,9 +2055,8 @@ class DataFrame(NDFrame):
 
     def delevel(self):
         """
-        For DataFrame with multi-level index, return new DataFrame with
-        labeling information in the columns under names 'level_0', 'level_1',
-        etc.
+        For DataFrame with multi-level index, return new DataFrame with labeling
+        information in the columns under names 'level_0', 'level_1', etc.
 
         Notes
         -----
@@ -2075,7 +2074,11 @@ class DataFrame(NDFrame):
                 col_name = names[i]
                 if col_name is None:
                     col_name = 'level_%d' % i
-                new_obj.insert(0, col_name, np.asarray(lev).take(lab))
+
+                # to ndarray and maybe infer different dtype
+                level_values = lev.values
+                level_values = lib.maybe_convert_objects(level_values)
+                new_obj.insert(0, col_name, level_values.take(lab))
         else:
             if self.index.name is None:
                 raise Exception('Must have name set')
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index 969e2775e..f936a2c77 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -11,7 +11,7 @@ from pandas import Panel, DataFrame, Series, notnull, isnull
 from pandas.util.testing import (assert_almost_equal,
                                  assert_series_equal,
                                  assert_frame_equal)
-
+import pandas.core.common as com
 import pandas.util.testing as tm
 
 try:
@@ -266,6 +266,18 @@ class TestMultiLevel(unittest.TestCase):
         # preserve names
         self.assertEquals(a_sorted.index.names, self.frame.index.names)
 
+    def test_delevel_infer_dtype(self):
+        import itertools
+        tuples = [tuple for tuple in itertools.product(['foo', 'bar'],
+                                                       [10, 20], [1.0, 1.1])]
+        index = MultiIndex.from_tuples(tuples,
+                                       names=['prm0', 'prm1', 'prm2'])
+        df = DataFrame(np.random.randn(8,3), columns=['A', 'B', 'C'],
+                       index=index)
+        deleveled = df.delevel()
+        self.assert_(com.is_integer_dtype(deleveled['prm1']))
+        self.assert_(com.is_float_dtype(deleveled['prm2']))
+
     def test_sortlevel_by_name(self):
         self.frame.index.names = ['first', 'second']
         result = self.frame.sortlevel(level='second')
