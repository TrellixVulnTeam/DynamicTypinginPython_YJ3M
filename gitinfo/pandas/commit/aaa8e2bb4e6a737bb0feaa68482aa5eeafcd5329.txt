commit aaa8e2bb4e6a737bb0feaa68482aa5eeafcd5329
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Oct 2 19:04:30 2011 -0400

    TST: finish index.py test coverage

diff --git a/bench/zoo_bench.py b/bench/zoo_bench.py
index 3d58672f8..8d415606f 100644
--- a/bench/zoo_bench.py
+++ b/bench/zoo_bench.py
@@ -29,3 +29,12 @@ idx2 = np.sort(sample(stamps, 1000000))
 
 ts1 = Series(np.random.randn(1000000), idx1)
 ts2 = Series(np.random.randn(1000000), idx2)
+
+# Benchmark 1: Two 1-million length time series (int64-based index) with
+# randomly chosen timestamps
+
+# Benchmark 2: Join two 5-variate time series DataFrames (outer and inner join)
+
+df1 = DataFrame(np.random.randn(1000000, 5), idx1, columns=range(5))
+df2 = DataFrame(np.random.randn(1000000, 5), idx2, columns=range(5, 10))
+
diff --git a/pandas/core/api.py b/pandas/core/api.py
index b2c453e6e..c6552e2df 100644
--- a/pandas/core/api.py
+++ b/pandas/core/api.py
@@ -6,7 +6,7 @@ from pandas.core.datetools import DateOffset
 import pandas.core.datetools as datetools
 
 from pandas.core.common import isnull, notnull, set_printoptions
-from pandas.core.index import Index, Factor, MultiIndex
+from pandas.core.index import Index, Int64Index, Factor, MultiIndex
 from pandas.core.daterange import DateRange
 from pandas.core.series import Series, TimeSeries
 from pandas.core.frame import DataFrame
diff --git a/pandas/core/index.py b/pandas/core/index.py
index dea96477c..1d43634d3 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -631,8 +631,7 @@ class Int64Index(Index):
 
     def join(self, other, how='left', return_indexers=False):
         if not isinstance(other, Int64Index):
-            self_as_index = Index(self, dtype=object)
-            return Index.join(self_as_index, other, how=how,
+            return Index.join(self.astype(object), other, how=how,
                               return_indexers=return_indexers)
 
         if self.is_monotonic and other.is_monotonic:
@@ -657,7 +656,7 @@ class Int64Index(Index):
         elif how == 'outer':
             join_index, lidx, ridx = lib.outer_join_indexer_int64(self, other)
             join_index = Int64Index(join_index)
-        else:
+        else:  # pragma: no cover
             raise Exception('do not recognize join method %s' % how)
 
         if return_indexers:
@@ -667,7 +666,7 @@ class Int64Index(Index):
 
     def union(self, other):
         if not isinstance(other, Int64Index):
-            return Index.union(self, other)
+            return Index.union(self.astype(object), other)
 
         if self.is_monotonic and other.is_monotonic:
             result = lib.outer_join_indexer_int64(self, other)[0]
@@ -976,6 +975,18 @@ class MultiIndex(Index):
         return MultiIndex(levels=self.levels, labels=new_labels)
 
     def append(self, other):
+        """
+        Append two MultiIndex objects
+
+        Parameters
+        ----------
+        other : MultiIndex
+
+        Returns
+        -------
+        appended : MultiIndex
+        """
+        assert(isinstance(other, MultiIndex))
         new_tuples = np.concatenate((self.values, other.values))
         return MultiIndex.from_tuples(new_tuples, names=self.names)
 
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 678d12a3c..c54beed33 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -387,6 +387,9 @@ class TestInt64Index(unittest.TestCase):
         # guarantee of sortedness
         res, lidx, ridx = self.index.join(other, how='outer',
                                           return_indexers=True)
+        noidx_res = self.index.join(other, how='outer')
+        self.assert_(res.equals(noidx_res))
+
         eres = Int64Index([0, 1, 2, 4, 5, 6, 7, 8, 10, 12, 14, 16, 18, 25])
         elidx = np.array([0, -1, 1, 2, -1, 3, -1, 4, 5, 6, 7, 8, 9, -1],
                          dtype='i4')
@@ -401,6 +404,9 @@ class TestInt64Index(unittest.TestCase):
         # monotonic
         res, lidx, ridx = self.index.join(other_mono, how='outer',
                                           return_indexers=True)
+        noidx_res = self.index.join(other_mono, how='outer')
+        self.assert_(res.equals(noidx_res))
+
         eridx = np.array([-1, 0, 1, -1, 2, -1, 3, -1, -1, 4, -1, -1, -1, 5],
                          dtype='i4')
         self.assert_(isinstance(res, Int64Index))
@@ -482,8 +488,16 @@ class TestInt64Index(unittest.TestCase):
         self.assert_(np.array_equal(lidx, elidx))
         self.assert_(ridx is None)
 
-    def test_join_corner(self):
-        pass
+        # monotonic
+        res, lidx, ridx = self.index.join(other_mono, how='right',
+                                          return_indexers=True)
+        eres = other_mono
+        elidx = np.array([-1, 1, -1, -1, 6, -1],
+                         dtype='i4')
+        self.assert_(isinstance(other, Int64Index))
+        self.assert_(res.equals(eres))
+        self.assert_(np.array_equal(lidx, elidx))
+        self.assert_(ridx is None)
 
     def test_join_non_int_index(self):
         other = Index([3, 6, 7, 8, 10], dtype=object)
@@ -503,6 +517,14 @@ class TestInt64Index(unittest.TestCase):
         right = self.index.join(other, how='right')
         self.assert_(right.equals(other))
 
+    def test_union(self):
+
+        # corner case, non-Int64Index
+        other = Index([1, 2, 3, 4, 5])
+        result = self.index.union(other)
+        expected = np.unique(np.concatenate((self.index, other)))
+        self.assert_(np.array_equal(result, expected))
+
     def test_cant_or_shouldnt_cast(self):
         # can't
         data = ['foo', 'bar', 'baz']
@@ -539,6 +561,10 @@ class TestMultiIndex(unittest.TestCase):
         result = MultiIndex.from_arrays(arrays)
         self.assertEquals(list(result), list(self.index))
 
+    def test_append(self):
+        result = self.index[:3].append(self.index[3:])
+        self.assert_(result.equals(self.index))
+
     def test_get_level_values(self):
         result = self.index.get_level_values(0)
         expected = ['foo', 'foo', 'bar', 'baz', 'qux', 'qux']
@@ -892,6 +918,11 @@ class TestMultiIndex(unittest.TestCase):
         self.assertRaises(Exception, self.index.drop, [('bar', 'two')])
         self.assertRaises(Exception, self.index.drop, index)
 
+        # mixed partial / full drop
+        dropped = self.index.drop(['foo', ('qux', 'one')])
+        expected = self.index[[2, 3, 5]]
+        self.assert_(dropped.equals(expected))
+
     def test_insert(self):
         # key contained in all levels
         new_index = self.index.insert(0, ('bar', 'two'))
