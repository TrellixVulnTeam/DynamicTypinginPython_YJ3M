commit c6ba046a1c9052a39960a097e347239dc4387b96
Author: Simon Hawkins <simonjayhawkins@gmail.com>
Date:   Sun Dec 29 16:02:54 2019 +0000

    pandas\core\indexing.py:2227: error: Implicit generic "Any". Use "typing.Tuple" and specify generic parameters

diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index b86293e78..ebecb02e2 100755
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -1,4 +1,4 @@
-from typing import Tuple
+from typing import Hashable, List, Tuple, Union
 
 import numpy as np
 
@@ -2224,7 +2224,7 @@ class _iAtIndexer(_ScalarAccessIndexer):
         return key
 
 
-def _tuplify(ndim: int, loc) -> tuple:
+def _tuplify(ndim: int, loc: Hashable) -> Tuple[Union[Hashable, slice], ...]:
     """
     Given an indexer for the first dimension, create an equivalent tuple
     for indexing over all dimensions.
@@ -2238,9 +2238,10 @@ def _tuplify(ndim: int, loc) -> tuple:
     -------
     tuple
     """
-    tup = [slice(None, None) for _ in range(ndim)]
-    tup[0] = loc
-    return tuple(tup)
+    _tup: List[Union[Hashable, slice]]
+    _tup = [slice(None, None) for _ in range(ndim)]
+    _tup[0] = loc
+    return tuple(_tup)
 
 
 def convert_to_index_sliceable(obj, key):
