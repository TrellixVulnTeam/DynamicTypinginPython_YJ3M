commit ea9a5a8555a455150ffc84018cbf992a07171dc6
Author: sinhrks <sinhrks@gmail.com>
Date:   Sun Apr 10 10:02:55 2016 -0400

    BUG: GroupBy with TimeGrouper sorts unstably
    
    closes #7453
    
    Author: sinhrks <sinhrks@gmail.com>
    
    Closes #12840 from sinhrks/tgrouper_first and squashes the following commits:
    
    567e823 [sinhrks] BUG: GroupBy with TimeGrouper sorts unstably

diff --git a/doc/source/whatsnew/v0.18.1.txt b/doc/source/whatsnew/v0.18.1.txt
index 7d79367ce..c152e94fa 100644
--- a/doc/source/whatsnew/v0.18.1.txt
+++ b/doc/source/whatsnew/v0.18.1.txt
@@ -207,6 +207,7 @@ Bug Fixes
 
 
 - Bug in equality testing with a ``Categorical`` in a ``DataFrame`` (:issue:`12564`)
+- Bug in ``GroupBy.first()``, ``.last()`` returns incorrect row when ``TimeGrouper`` is used (:issue:`7453`)
 
 
 
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index a0a358717..6996254f5 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -273,7 +273,8 @@ class Grouper(object):
 
         # possibly sort
         if (self.sort or sort) and not ax.is_monotonic:
-            indexer = self.indexer = ax.argsort(kind='quicksort')
+            # use stable sort to support first, last, nth
+            indexer = self.indexer = ax.argsort(kind='mergesort')
             ax = ax.take(indexer)
             obj = obj.take(indexer, axis=self.axis,
                            convert=False, is_copy=False)
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index 118b06a63..a9348eb11 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -2365,6 +2365,28 @@ class TestTimeGrouper(tm.TestCase):
                                    "got an instance of 'PeriodIndex'"):
             df.groupby(TimeGrouper('D'))
 
+    def test_aaa_group_order(self):
+        # GH 12840
+        # check TimeGrouper perform stable sorts
+        n = 20
+        data = np.random.randn(n, 4)
+        df = DataFrame(data, columns=['A', 'B', 'C', 'D'])
+        df['key'] = [datetime(2013, 1, 1), datetime(2013, 1, 2),
+                     datetime(2013, 1, 3), datetime(2013, 1, 4),
+                     datetime(2013, 1, 5)] * 4
+        grouped = df.groupby(TimeGrouper(key='key', freq='D'))
+
+        tm.assert_frame_equal(grouped.get_group(datetime(2013, 1, 1)),
+                              df[::5])
+        tm.assert_frame_equal(grouped.get_group(datetime(2013, 1, 2)),
+                              df[1::5])
+        tm.assert_frame_equal(grouped.get_group(datetime(2013, 1, 3)),
+                              df[2::5])
+        tm.assert_frame_equal(grouped.get_group(datetime(2013, 1, 4)),
+                              df[3::5])
+        tm.assert_frame_equal(grouped.get_group(datetime(2013, 1, 5)),
+                              df[4::5])
+
     def test_aggregate_normal(self):
         # check TimeGrouper's aggregation is identical as normal groupby
 
@@ -2402,7 +2424,8 @@ class TestTimeGrouper(tm.TestCase):
                                         periods=5, name='key')
             dt_result = getattr(dt_grouped, func)()
             assert_series_equal(expected, dt_result)
-        """
+
+        # GH 7453
         for func in ['first', 'last']:
             expected = getattr(normal_grouped, func)()
             expected.index = date_range(start='2013-01-01', freq='D',
@@ -2410,6 +2433,9 @@ class TestTimeGrouper(tm.TestCase):
             dt_result = getattr(dt_grouped, func)()
             assert_frame_equal(expected, dt_result)
 
+        # if TimeGrouper is used included, 'nth' doesn't work yet
+
+        """
         for func in ['nth']:
             expected = getattr(normal_grouped, func)(3)
             expected.index = date_range(start='2013-01-01',
@@ -2417,8 +2443,6 @@ class TestTimeGrouper(tm.TestCase):
             dt_result = getattr(dt_grouped, func)(3)
             assert_frame_equal(expected, dt_result)
         """
-        # if TimeGrouper is used included, 'first','last' and 'nth' doesn't
-        # work yet
 
     def test_aggregate_with_nat(self):
         # check TimeGrouper's aggregation is identical as normal groupby
