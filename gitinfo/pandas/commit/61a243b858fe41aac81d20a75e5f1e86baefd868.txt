commit 61a243b858fe41aac81d20a75e5f1e86baefd868
Author: Jeff Reback <jeff@reback.net>
Date:   Sat Feb 11 18:56:19 2017 -0500

    TST: remove nose
    
    TST: raise nose.SkipTest -> pytest.skip  TST: remove KnownFailure
    (unused), should be replaced by pytest.xfail anyhow    xref #15341
    
    Author: Jeff Reback <jeff@reback.net>
    
    Closes #15368 from jreback/skip and squashes the following commits:
    
    afdb5f9 [Jeff Reback] TST: raise nose.SkipTest -> pytest.skip

diff --git a/.travis.yml b/.travis.yml
index b38c99e3a..2ff5d508d 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -331,5 +331,5 @@ after_script:
   - echo "after_script start"
   - ci/install_test.sh
   - source activate pandas && python -c "import pandas; pandas.show_versions();"
-  - ci/print_skipped.py /tmp/nosetests.xml
+  - ci/print_skipped.py /tmp/pytest.xml
   - echo "after_script done"
diff --git a/ci/install_test.sh b/ci/install_test.sh
index cbb84d8fa..9ace633d7 100755
--- a/ci/install_test.sh
+++ b/ci/install_test.sh
@@ -8,7 +8,6 @@ if [ "$INSTALL_TEST" ]; then
     conda uninstall cython || exit 1
     python "$TRAVIS_BUILD_DIR"/setup.py sdist --formats=zip,gztar || exit 1
     pip install "$TRAVIS_BUILD_DIR"/dist/*tar.gz || exit 1
-    # nosetests --exe -A "$TEST_ARGS" pandas/tests/test_series.py --with-xunit --xunit-file=/tmp/nosetests_install.xml
     pytest pandas/tests/test_series.py --junitxml=/tmp/pytest_install.xml
 else
     echo "Skipping installation test."
diff --git a/ci/install_travis.sh b/ci/install_travis.sh
index f65176fb1..ad804b96a 100755
--- a/ci/install_travis.sh
+++ b/ci/install_travis.sh
@@ -92,12 +92,7 @@ if [ -e ${INSTALL} ]; then
     time bash $INSTALL || exit 1
 else
     # create new env
-    time conda create -n pandas python=$PYTHON_VERSION nose pytest || exit 1
-
-    if [ "$LINT" ]; then
-        conda install flake8
-        pip install cpplint
-    fi
+    time conda create -n pandas python=$PYTHON_VERSION pytest || exit 1
 fi
 
 # build deps
@@ -116,6 +111,12 @@ fi
 
 source activate pandas
 
+pip install pytest-xdist
+if [ "$LINT" ]; then
+   conda install flake8
+   pip install cpplint
+fi
+
 if [ "$COVERAGE" ]; then
     pip install coverage pytest-cov
 fi
diff --git a/ci/lint.sh b/ci/lint.sh
index 2cbfdadf4..2ffc68e5e 100755
--- a/ci/lint.sh
+++ b/ci/lint.sh
@@ -55,7 +55,7 @@ if [ "$LINT" ]; then
     echo "Linting *.c and *.h DONE"
 
     echo "Check for invalid testing"
-    grep -r -E --include '*.py' --exclude nosetester.py --exclude testing.py '(numpy|np)\.testing' pandas
+    grep -r -E --include '*.py' --exclude testing.py '(numpy|np)\.testing' pandas
     if [ $? = "0" ]; then
         RET=1
     fi
diff --git a/ci/requirements_all.txt b/ci/requirements_all.txt
index b64143fcd..4ff80a478 100644
--- a/ci/requirements_all.txt
+++ b/ci/requirements_all.txt
@@ -1,6 +1,6 @@
-nose
 pytest
 pytest-cov
+pytest-xdist
 flake8
 sphinx
 ipython
diff --git a/ci/requirements_dev.txt b/ci/requirements_dev.txt
index b8af9d035..b0a8adc8d 100644
--- a/ci/requirements_dev.txt
+++ b/ci/requirements_dev.txt
@@ -2,7 +2,7 @@ python-dateutil
 pytz
 numpy
 cython
-nose
 pytest
 pytest-cov
+pytest-xdist
 flake8
diff --git a/ci/script.sh b/ci/script.sh
index 3eac3002d..c52fa0fdb 100755
--- a/ci/script.sh
+++ b/ci/script.sh
@@ -18,10 +18,10 @@ if [ -n "$LOCALE_OVERRIDE" ]; then
 fi
 
 if [ "$BUILD_TEST" ]; then
-    echo "We are not running nosetests as this is simply a build test."
+    echo "We are not running pytest as this is simply a build test."
 elif [ "$COVERAGE" ]; then
-    echo pytest -s --cov=pandas --cov-report xml:/tmp/nosetests.xml $TEST_ARGS pandas
-    pytest -s --cov=pandas --cov-report xml:/tmp/nosetests.xml $TEST_ARGS pandas
+    echo pytest -s --cov=pandas --cov-report xml:/tmp/pytest.xml $TEST_ARGS pandas
+    pytest -s --cov=pandas --cov-report xml:/tmp/pytest.xml $TEST_ARGS pandas
 else
     echo pytest $TEST_ARGS pandas
     pytest $TEST_ARGS pandas # TODO: doctest
diff --git a/doc/source/contributing.rst b/doc/source/contributing.rst
index 3ef9ed896..5c2bb9b73 100644
--- a/doc/source/contributing.rst
+++ b/doc/source/contributing.rst
@@ -734,7 +734,7 @@ gbq integration tests on a forked repository:
    the status by visiting your Travis branches page which exists at the
    following location: https://travis-ci.org/your-user-name/pandas/branches .
    Click on a build job for your branch. Expand the following line in the
-   build log: ``ci/print_skipped.py /tmp/nosetests.xml`` . Search for the
+   build log: ``ci/print_skipped.py /tmp/pytest.xml`` . Search for the
    term ``test_gbq`` and confirm that gbq integration tests are not skipped.
 
 Running the vbench performance test suite (phasing out)
diff --git a/pandas/computation/tests/test_compat.py b/pandas/computation/tests/test_compat.py
index 900dd2c28..599d0c103 100644
--- a/pandas/computation/tests/test_compat.py
+++ b/pandas/computation/tests/test_compat.py
@@ -1,7 +1,7 @@
 
 # flake8: noqa
 
-import nose
+import pytest
 from itertools import product
 from distutils.version import LooseVersion
 
@@ -31,7 +31,7 @@ def test_compat():
             assert _NUMEXPR_INSTALLED
 
     except ImportError:
-        raise nose.SkipTest("not testing numexpr version compat")
+        pytest.skip("not testing numexpr version compat")
 
 
 def test_invalid_numexpr_version():
@@ -49,14 +49,14 @@ def check_invalid_numexpr_version(engine, parser):
         try:
             import numexpr as ne
         except ImportError:
-            raise nose.SkipTest("no numexpr")
+            pytest.skip("no numexpr")
         else:
             if ne.__version__ < LooseVersion('2.1'):
                 with tm.assertRaisesRegexp(ImportError, "'numexpr' version is "
                                            ".+, must be >= 2.1"):
                     testit()
             elif ne.__version__ == LooseVersion('2.4.4'):
-                raise nose.SkipTest("numexpr version==2.4.4")
+                pytest.skip("numexpr version==2.4.4")
             else:
                 testit()
     else:
diff --git a/pandas/computation/tests/test_eval.py b/pandas/computation/tests/test_eval.py
index a4bb81ce7..ada714c8a 100644
--- a/pandas/computation/tests/test_eval.py
+++ b/pandas/computation/tests/test_eval.py
@@ -6,8 +6,7 @@ import operator
 from itertools import product
 from distutils.version import LooseVersion
 
-import nose
-from nose.tools import assert_raises
+import pytest
 
 from numpy.random import randn, rand, randint
 import numpy as np
@@ -319,7 +318,7 @@ class TestEvalNumexprPandas(tm.TestCase):
         except ValueError as e:
             if str(e).startswith('negative number cannot be raised to a fractional power'):
                 if self.engine == 'python':
-                    raise nose.SkipTest(str(e))
+                    pytest.skip(str(e))
                 else:
                     expected = np.nan
             else:
@@ -1174,13 +1173,15 @@ class TestOperationsNumExprPandas(tm.TestCase):
     def test_panel_fails(self):
         x = Panel(randn(3, 4, 5))
         y = Series(randn(10))
-        assert_raises(NotImplementedError, self.eval, 'x + y',
+        with pytest.raises(NotImplementedError):
+            self.eval('x + y',
                       local_dict={'x': x, 'y': y})
 
     def test_4d_ndarray_fails(self):
         x = randn(3, 4, 5, 6)
         y = Series(randn(10))
-        assert_raises(NotImplementedError, self.eval, 'x + y',
+        with pytest.raises(NotImplementedError):
+            self.eval('x + y',
                       local_dict={'x': x, 'y': y})
 
     def test_constant(self):
@@ -1705,7 +1706,7 @@ class TestMathPythonPython(tm.TestCase):
 
     def test_result_types2(self):
         # xref https://github.com/pandas-dev/pandas/issues/12293
-        raise nose.SkipTest("unreliable tests on complex128")
+        pytest.skip("unreliable tests on complex128")
 
         # Did not test complex64 because DataFrame is converting it to
         # complex128. Due to https://github.com/pandas-dev/pandas/issues/10952
@@ -1822,7 +1823,8 @@ def check_disallowed_nodes(engine, parser):
     inst = VisitorClass('x + 1', engine, parser)
 
     for ops in uns_ops:
-        assert_raises(NotImplementedError, getattr(inst, ops))
+        with pytest.raises(NotImplementedError):
+            getattr(inst, ops)()
 
 
 def test_disallowed_nodes():
@@ -1833,7 +1835,8 @@ def test_disallowed_nodes():
 def check_syntax_error_exprs(engine, parser):
     tm.skip_if_no_ne(engine)
     e = 's +'
-    assert_raises(SyntaxError, pd.eval, e, engine=engine, parser=parser)
+    with pytest.raises(SyntaxError):
+        pd.eval(e, engine=engine, parser=parser)
 
 
 def test_syntax_error_exprs():
diff --git a/pandas/io/tests/json/test_pandas.py b/pandas/io/tests/json/test_pandas.py
index 440f5c13d..c298b3841 100644
--- a/pandas/io/tests/json/test_pandas.py
+++ b/pandas/io/tests/json/test_pandas.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
 # pylint: disable-msg=W0612,E1101
-import nose
+import pytest
 from pandas.compat import range, lrange, StringIO, OrderedDict
 import os
 
@@ -1009,8 +1009,8 @@ DataFrame\\.index values are different \\(100\\.0 %\\)
             return
 
         # GH 13774
-        raise nose.SkipTest("encoding not implemented in .to_json(), "
-                            "xref #13774")
+        pytest.skip("encoding not implemented in .to_json(), "
+                    "xref #13774")
 
         values = [[b'E\xc9, 17', b'', b'a', b'b', b'c'],
                   [b'E\xc9, 17', b'a', b'b', b'c'],
diff --git a/pandas/io/tests/json/test_ujson.py b/pandas/io/tests/json/test_ujson.py
index 3da61b769..6a986710a 100644
--- a/pandas/io/tests/json/test_ujson.py
+++ b/pandas/io/tests/json/test_ujson.py
@@ -7,7 +7,7 @@ try:
 except ImportError:
     import simplejson as json
 import math
-import nose
+import pytest
 import platform
 import sys
 import time
@@ -28,7 +28,7 @@ import pandas.util.testing as tm
 def _skip_if_python_ver(skip_major, skip_minor=None):
     major, minor = sys.version_info[:2]
     if major == skip_major and (skip_minor is None or minor == skip_minor):
-        raise nose.SkipTest("skipping Python version %d.%d" % (major, minor))
+        pytest.skip("skipping Python version %d.%d" % (major, minor))
 
 
 json_unicode = (json.dumps if compat.PY3
@@ -95,7 +95,7 @@ class UltraJSONTests(TestCase):
             try:
                 locale.setlocale(locale.LC_NUMERIC, 'Italian_Italy')
             except:
-                raise nose.SkipTest('Could not set locale for testing')
+                pytest.skip('Could not set locale for testing')
         self.assertEqual(ujson.loads(ujson.dumps(4.78e60)), 4.78e60)
         self.assertEqual(ujson.loads('4.78', precise_float=True), 4.78)
         locale.setlocale(locale.LC_NUMERIC, savedlocale)
@@ -113,7 +113,7 @@ class UltraJSONTests(TestCase):
 
     def test_encodeDoubleTinyExponential(self):
         if compat.is_platform_windows() and not compat.PY3:
-            raise nose.SkipTest("buggy on win-64 for py2")
+            pytest.skip("buggy on win-64 for py2")
 
         num = 1e-40
         self.assertEqual(num, ujson.decode(ujson.encode(num)))
@@ -393,8 +393,8 @@ class UltraJSONTests(TestCase):
     def test_npy_nat(self):
         from distutils.version import LooseVersion
         if LooseVersion(np.__version__) < '1.7.0':
-            raise nose.SkipTest("numpy version < 1.7.0, is "
-                                "{0}".format(np.__version__))
+            pytest.skip("numpy version < 1.7.0, is "
+                        "{0}".format(np.__version__))
 
         input = np.datetime64('NaT')
         assert ujson.encode(input) == 'null', "Expected null"
diff --git a/pandas/io/tests/parser/c_parser_only.py b/pandas/io/tests/parser/c_parser_only.py
index 11073f3f1..ffbd90484 100644
--- a/pandas/io/tests/parser/c_parser_only.py
+++ b/pandas/io/tests/parser/c_parser_only.py
@@ -7,7 +7,7 @@ these tests out of this module as soon as the Python parser can accept
 further arguments when parsing.
 """
 
-import nose
+import pytest
 import numpy as np
 
 import pandas as pd
@@ -159,7 +159,7 @@ nan 2
 
     def test_pass_dtype_as_recarray(self):
         if compat.is_platform_windows() and self.low_memory:
-            raise nose.SkipTest(
+            pytest.skip(
                 "segfaults on win-64, only when all tests are run")
 
         data = """\
diff --git a/pandas/io/tests/parser/common.py b/pandas/io/tests/parser/common.py
index 9655c481b..0671901fc 100644
--- a/pandas/io/tests/parser/common.py
+++ b/pandas/io/tests/parser/common.py
@@ -9,7 +9,7 @@ import re
 import sys
 from datetime import datetime
 
-import nose
+import pytest
 import numpy as np
 from pandas.lib import Timestamp
 
@@ -635,8 +635,8 @@ bar"""
             url_table = self.read_table('file://localhost/' + localtable)
         except URLError:
             # fails on some systems
-            raise nose.SkipTest("failing on %s" %
-                                ' '.join(platform.uname()).strip())
+            pytest.skip("failing on %s" %
+                        ' '.join(platform.uname()).strip())
 
         tm.assert_frame_equal(url_table, local_table)
 
@@ -1262,7 +1262,7 @@ eight,1,2,3"""
 
     def test_iteration_open_handle(self):
         if PY3:
-            raise nose.SkipTest(
+            pytest.skip(
                 "won't work in Python 3 {0}".format(sys.version_info))
 
         with tm.ensure_clean() as path:
diff --git a/pandas/io/tests/parser/compression.py b/pandas/io/tests/parser/compression.py
index 308ca6e8a..bdcd10fc6 100644
--- a/pandas/io/tests/parser/compression.py
+++ b/pandas/io/tests/parser/compression.py
@@ -5,7 +5,7 @@ Tests compressed data parsing functionality for all
 of the parsers defined in parsers.py
 """
 
-import nose
+import pytest
 
 import pandas.util.testing as tm
 
@@ -16,7 +16,7 @@ class CompressionTests(object):
         try:
             import zipfile
         except ImportError:
-            raise nose.SkipTest('need zipfile to run')
+            pytest.skip('need zipfile to run')
 
         with open(self.csv1, 'rb') as data_file:
             data = data_file.read()
@@ -67,7 +67,7 @@ class CompressionTests(object):
         try:
             import gzip
         except ImportError:
-            raise nose.SkipTest('need gzip to run')
+            pytest.skip('need gzip to run')
 
         with open(self.csv1, 'rb') as data_file:
             data = data_file.read()
@@ -96,7 +96,7 @@ class CompressionTests(object):
         try:
             import bz2
         except ImportError:
-            raise nose.SkipTest('need bz2 to run')
+            pytest.skip('need bz2 to run')
 
         with open(self.csv1, 'rb') as data_file:
             data = data_file.read()
diff --git a/pandas/io/tests/parser/converters.py b/pandas/io/tests/parser/converters.py
index 2ceaff929..859d2e19b 100644
--- a/pandas/io/tests/parser/converters.py
+++ b/pandas/io/tests/parser/converters.py
@@ -7,7 +7,7 @@ for all of the parsers defined in parsers.py
 
 from datetime import datetime
 
-import nose
+import pytest
 
 import numpy as np
 import pandas as pd
@@ -84,8 +84,8 @@ c,4,5,01/03/2009
     def test_converters_corner_with_nas(self):
         # skip aberration observed on Win64 Python 3.2.2
         if hash(np.int64(-1)) != -2:
-            raise nose.SkipTest("skipping because of windows hash on Python"
-                                " 3.2.2")
+            pytest.skip("skipping because of windows hash on Python"
+                        " 3.2.2")
 
         data = """id,score,days
 1,2,12
diff --git a/pandas/io/tests/parser/parse_dates.py b/pandas/io/tests/parser/parse_dates.py
index ad3d5f238..6197d07d4 100644
--- a/pandas/io/tests/parser/parse_dates.py
+++ b/pandas/io/tests/parser/parse_dates.py
@@ -8,7 +8,7 @@ parsers defined in parsers.py
 from distutils.version import LooseVersion
 from datetime import datetime
 
-import nose
+import pytest
 import numpy as np
 import pandas.lib as lib
 from pandas.lib import Timestamp
@@ -268,9 +268,9 @@ KORD6,19990127, 23:00:00, 22:56:00, -0.5900, 1.7100, 4.6000, 0.0000, 280.0000"""
         # See gh-217
         import dateutil
         if dateutil.__version__ >= LooseVersion('2.5.0'):
-            raise nose.SkipTest("testing yearfirst=True not-support"
-                                "on datetutil < 2.5.0 this works but"
-                                "is wrong")
+            pytest.skip("testing yearfirst=True not-support"
+                        "on datetutil < 2.5.0 this works but"
+                        "is wrong")
 
         rs = self.read_csv(StringIO(data), index_col=0,
                            parse_dates=[['date', 'time']])
diff --git a/pandas/io/tests/parser/python_parser_only.py b/pandas/io/tests/parser/python_parser_only.py
index 283ff366b..bd7607093 100644
--- a/pandas/io/tests/parser/python_parser_only.py
+++ b/pandas/io/tests/parser/python_parser_only.py
@@ -9,7 +9,7 @@ arguments when parsing.
 
 import csv
 import sys
-import nose
+import pytest
 
 import pandas.util.testing as tm
 from pandas import DataFrame, Index
@@ -79,7 +79,7 @@ baz|7|8|9
 
     def test_BytesIO_input(self):
         if not compat.PY3:
-            raise nose.SkipTest(
+            pytest.skip(
                 "Bytes-related test - only needs to work on Python 3")
 
         data = BytesIO("שלום::1234\n562::123".encode('cp1255'))
@@ -130,7 +130,7 @@ also also skip this
             import gzip
             import bz2
         except ImportError:
-            raise nose.SkipTest('need gzip and bz2 to run')
+            pytest.skip('need gzip and bz2 to run')
 
         with open(self.csv1, 'rb') as f:
             data = f.read()
diff --git a/pandas/io/tests/parser/test_network.py b/pandas/io/tests/parser/test_network.py
index 533b7733b..4d75b59b0 100644
--- a/pandas/io/tests/parser/test_network.py
+++ b/pandas/io/tests/parser/test_network.py
@@ -6,7 +6,7 @@ and hence require a network connection to be read.
 """
 
 import os
-import nose
+import pytest
 import functools
 from itertools import product
 
@@ -59,7 +59,7 @@ class TestS3(tm.TestCase):
         try:
             import s3fs  # noqa
         except ImportError:
-            raise nose.SkipTest("s3fs not installed")
+            pytest.skip("s3fs not installed")
 
     @tm.network
     def test_parse_public_s3_bucket(self):
diff --git a/pandas/io/tests/parser/test_read_fwf.py b/pandas/io/tests/parser/test_read_fwf.py
index a42335508..dccae06af 100644
--- a/pandas/io/tests/parser/test_read_fwf.py
+++ b/pandas/io/tests/parser/test_read_fwf.py
@@ -8,7 +8,7 @@ engine is set to 'python-fwf' internally.
 
 from datetime import datetime
 
-import nose
+import pytest
 import numpy as np
 import pandas as pd
 import pandas.util.testing as tm
@@ -75,7 +75,7 @@ class TestFwfParsing(tm.TestCase):
 
     def test_BytesIO_input(self):
         if not compat.PY3:
-            raise nose.SkipTest(
+            pytest.skip(
                 "Bytes-related test - only needs to work on Python 3")
 
         result = read_fwf(BytesIO("שלום\nשלום".encode('utf8')), widths=[
@@ -192,7 +192,7 @@ bar2,12,13,14,15
             import gzip
             import bz2
         except ImportError:
-            raise nose.SkipTest("Need gzip and bz2 to run this test")
+            pytest.skip("Need gzip and bz2 to run this test")
 
         data = """1111111111
         2222222222
@@ -333,7 +333,7 @@ col1~~~~~col2  col3++++++++++++++++++col4
 
     def test_variable_width_unicode(self):
         if not compat.PY3:
-            raise nose.SkipTest(
+            pytest.skip(
                 'Bytes-related test - only needs to work on Python 3')
         test = """
 שלום שלום
diff --git a/pandas/io/tests/parser/usecols.py b/pandas/io/tests/parser/usecols.py
index 487528206..95df077da 100644
--- a/pandas/io/tests/parser/usecols.py
+++ b/pandas/io/tests/parser/usecols.py
@@ -5,7 +5,7 @@ Tests the usecols functionality during parsing
 for all of the parsers defined in parsers.py
 """
 
-import nose
+import pytest
 
 import numpy as np
 import pandas.util.testing as tm
@@ -377,7 +377,7 @@ a,b,c
         tm.assert_frame_equal(df, expected)
 
     def test_usecols_with_multibyte_unicode_characters(self):
-        raise nose.SkipTest('TODO: see gh-13253')
+        pytest.skip('TODO: see gh-13253')
 
         s = '''あああ,いい,ううう,ええええ
         0.056674973,8,True,a
diff --git a/pandas/io/tests/test_clipboard.py b/pandas/io/tests/test_clipboard.py
index 98a415275..3abd10933 100644
--- a/pandas/io/tests/test_clipboard.py
+++ b/pandas/io/tests/test_clipboard.py
@@ -2,7 +2,7 @@
 import numpy as np
 from numpy.random import randint
 
-import nose
+import pytest
 import pandas as pd
 
 from pandas import DataFrame
@@ -15,10 +15,13 @@ from pandas.util.clipboard.exceptions import PyperclipException
 
 try:
     DataFrame({'A': [1, 2]}).to_clipboard()
+    _DEPS_INSTALLED = 1
 except PyperclipException:
-    raise nose.SkipTest("clipboard primitives not installed")
+    _DEPS_INSTALLED = 0
 
 
+@pytest.mark.skipif(not _DEPS_INSTALLED,
+                    reason="clipboard primitives not installed")
 class TestClipboard(tm.TestCase):
 
     @classmethod
diff --git a/pandas/io/tests/test_excel.py b/pandas/io/tests/test_excel.py
index 2791e397d..a22c89184 100644
--- a/pandas/io/tests/test_excel.py
+++ b/pandas/io/tests/test_excel.py
@@ -9,7 +9,7 @@ from distutils.version import LooseVersion
 import warnings
 import operator
 import functools
-import nose
+import pytest
 
 from numpy import nan
 import numpy as np
@@ -32,30 +32,30 @@ def _skip_if_no_xlrd():
         import xlrd
         ver = tuple(map(int, xlrd.__VERSION__.split(".")[:2]))
         if ver < (0, 9):
-            raise nose.SkipTest('xlrd < 0.9, skipping')
+            pytest.skip('xlrd < 0.9, skipping')
     except ImportError:
-        raise nose.SkipTest('xlrd not installed, skipping')
+        pytest.skip('xlrd not installed, skipping')
 
 
 def _skip_if_no_xlwt():
     try:
         import xlwt  # NOQA
     except ImportError:
-        raise nose.SkipTest('xlwt not installed, skipping')
+        pytest.skip('xlwt not installed, skipping')
 
 
 def _skip_if_no_openpyxl():
     try:
         import openpyxl  # NOQA
     except ImportError:
-        raise nose.SkipTest('openpyxl not installed, skipping')
+        pytest.skip('openpyxl not installed, skipping')
 
 
 def _skip_if_no_xlsxwriter():
     try:
         import xlsxwriter  # NOQA
     except ImportError:
-        raise nose.SkipTest('xlsxwriter not installed, skipping')
+        pytest.skip('xlsxwriter not installed, skipping')
 
 
 def _skip_if_no_excelsuite():
@@ -68,7 +68,7 @@ def _skip_if_no_s3fs():
     try:
         import s3fs  # noqa
     except ImportError:
-        raise nose.SkipTest('s3fs not installed, skipping')
+        pytest.skip('s3fs not installed, skipping')
 
 
 _seriesd = tm.getSeriesData()
@@ -600,7 +600,7 @@ class XlrdTests(ReadingTestsBase):
 
         # FILE
         if sys.version_info[:2] < (2, 6):
-            raise nose.SkipTest("file:// not supported with Python < 2.6")
+            pytest.skip("file:// not supported with Python < 2.6")
 
         localtable = os.path.join(self.dirpath, 'test1' + self.ext)
         local_table = read_excel(localtable)
@@ -610,8 +610,8 @@ class XlrdTests(ReadingTestsBase):
         except URLError:
             # fails on some systems
             import platform
-            raise nose.SkipTest("failing on %s" %
-                                ' '.join(platform.uname()).strip())
+            pytest.skip("failing on %s" %
+                        ' '.join(platform.uname()).strip())
 
         tm.assert_frame_equal(url_table, local_table)
 
@@ -1513,7 +1513,7 @@ class ExcelWriterBase(SharedItems):
             try:
                 f = open(filename, 'wb')
             except UnicodeEncodeError:
-                raise nose.SkipTest('no unicode file names on this system')
+                pytest.skip('no unicode file names on this system')
             else:
                 f.close()
 
@@ -1555,7 +1555,7 @@ class ExcelWriterBase(SharedItems):
     #         import xlwt
     #         import xlrd
     #     except ImportError:
-    #         raise nose.SkipTest
+    #         pytest.skip
 
     #     filename = '__tmp_to_excel_header_styling_xls__.xls'
     #     pdf.to_excel(filename, 'test1')
@@ -1601,9 +1601,9 @@ class ExcelWriterBase(SharedItems):
     #         import openpyxl
     #         from openpyxl.cell import get_column_letter
     #     except ImportError:
-    #         raise nose.SkipTest
+    #         pytest.skip
     #     if openpyxl.__version__ < '1.6.1':
-    #         raise nose.SkipTest
+    #         pytest.skip
     #     # test xlsx_styling
     #     filename = '__tmp_to_excel_header_styling_xlsx__.xlsx'
     #     pdf.to_excel(filename, 'test1')
@@ -1635,7 +1635,7 @@ class ExcelWriterBase(SharedItems):
         _skip_if_no_xlrd()
 
         if self.merge_cells:
-            raise nose.SkipTest('Skip tests for merged MI format.')
+            pytest.skip('Skip tests for merged MI format.')
 
         from pandas.util.testing import makeCustomDataframe as mkdf
         # ensure limited functionality in 0.10
@@ -1690,7 +1690,7 @@ class ExcelWriterBase(SharedItems):
         _skip_if_no_xlrd()
 
         if self.merge_cells:
-            raise nose.SkipTest('Skip tests for merged MI format.')
+            pytest.skip('Skip tests for merged MI format.')
 
         from pandas.util.testing import makeCustomDataframe as mkdf
         # ensure limited functionality in 0.10
@@ -1873,7 +1873,7 @@ class OpenpyxlTests(ExcelWriterBase, tm.TestCase):
     def test_to_excel_styleconverter(self):
         _skip_if_no_openpyxl()
         if not openpyxl_compat.is_compat(major_ver=1):
-            raise nose.SkipTest('incompatiable openpyxl version')
+            pytest.skip('incompatiable openpyxl version')
 
         import openpyxl
 
@@ -1910,7 +1910,7 @@ def skip_openpyxl_gt21(cls):
         ver = openpyxl.__version__
         if (not (LooseVersion(ver) >= LooseVersion('2.0.0') and
                  LooseVersion(ver) < LooseVersion('2.2.0'))):
-            raise nose.SkipTest("openpyxl %s >= 2.2" % str(ver))
+            pytest.skip("openpyxl %s >= 2.2" % str(ver))
 
     cls.setUpClass = setUpClass
     return cls
@@ -2026,7 +2026,7 @@ def skip_openpyxl_lt22(cls):
         import openpyxl
         ver = openpyxl.__version__
         if LooseVersion(ver) < LooseVersion('2.2.0'):
-            raise nose.SkipTest("openpyxl %s < 2.2" % str(ver))
+            pytest.skip("openpyxl %s < 2.2" % str(ver))
 
     cls.setUpClass = setUpClass
     return cls
@@ -2095,7 +2095,7 @@ class Openpyxl22Tests(ExcelWriterBase, tm.TestCase):
 
     def test_write_cells_merge_styled(self):
         if not openpyxl_compat.is_compat(major_ver=2):
-            raise nose.SkipTest('incompatiable openpyxl version')
+            pytest.skip('incompatiable openpyxl version')
 
         from pandas.formats.format import ExcelCell
 
@@ -2278,7 +2278,7 @@ class ExcelWriterEngineTests(tm.TestCase):
         except ImportError:
             _skip_if_no_openpyxl()
             if not openpyxl_compat.is_compat(major_ver=1):
-                raise nose.SkipTest('incompatible openpyxl version')
+                pytest.skip('incompatible openpyxl version')
             writer_klass = _Openpyxl1Writer
 
         with ensure_clean('.xlsx') as path:
diff --git a/pandas/io/tests/test_feather.py b/pandas/io/tests/test_feather.py
index 218175e5e..6e2c28a0f 100644
--- a/pandas/io/tests/test_feather.py
+++ b/pandas/io/tests/test_feather.py
@@ -1,17 +1,12 @@
 """ test feather-format compat """
 
-import nose
+import pytest
+feather = pytest.importorskip('feather')
 
 import numpy as np
 import pandas as pd
-
 from pandas.io.feather_format import to_feather, read_feather
 
-try:
-    import feather  # noqa
-except ImportError:
-    raise nose.SkipTest('no feather-format installed')
-
 from feather import FeatherError
 import pandas.util.testing as tm
 from pandas.util.testing import assert_frame_equal, ensure_clean
diff --git a/pandas/io/tests/test_gbq.py b/pandas/io/tests/test_gbq.py
index 1157482d7..0868edd21 100644
--- a/pandas/io/tests/test_gbq.py
+++ b/pandas/io/tests/test_gbq.py
@@ -1,6 +1,6 @@
 import re
 from datetime import datetime
-import nose
+import pytest
 import pytz
 import platform
 from time import sleep
@@ -42,25 +42,25 @@ _SETUPTOOLS_INSTALLED = False
 
 def _skip_if_no_project_id():
     if not _get_project_id():
-        raise nose.SkipTest(
+        pytest.skip(
             "Cannot run integration tests without a project id")
 
 
 def _skip_local_auth_if_in_travis_env():
     if _in_travis_environment():
-        raise nose.SkipTest("Cannot run local auth in travis environment")
+        pytest.skip("Cannot run local auth in travis environment")
 
 
 def _skip_if_no_private_key_path():
     if not _get_private_key_path():
-        raise nose.SkipTest("Cannot run integration tests without a "
-                            "private key json file path")
+        pytest.skip("Cannot run integration tests without a "
+                    "private key json file path")
 
 
 def _skip_if_no_private_key_contents():
     if not _get_private_key_contents():
-        raise nose.SkipTest("Cannot run integration tests without a "
-                            "private key json contents")
+        pytest.skip("Cannot run integration tests without a "
+                    "private key json contents")
 
 
 def _in_travis_environment():
@@ -184,7 +184,7 @@ def _setup_common():
     try:
         _test_imports()
     except (ImportError, NotImplementedError) as import_exception:
-        raise nose.SkipTest(import_exception)
+        pytest.skip(import_exception)
 
     if _in_travis_environment():
         logging.getLogger('oauth2client').setLevel(logging.ERROR)
@@ -284,15 +284,15 @@ class TestGBQConnectorIntegrationWithLocalUserAccountAuth(tm.TestCase):
 
     def test_get_application_default_credentials_does_not_throw_error(self):
         if _check_if_can_get_correct_default_credentials():
-            raise nose.SkipTest("Can get default_credentials "
-                                "from the environment!")
+            pytest.skip("Can get default_credentials "
+                        "from the environment!")
         credentials = self.sut.get_application_default_credentials()
         self.assertIsNone(credentials)
 
     def test_get_application_default_credentials_returns_credentials(self):
         if not _check_if_can_get_correct_default_credentials():
-            raise nose.SkipTest("Cannot get default_credentials "
-                                "from the environment!")
+            pytest.skip("Cannot get default_credentials "
+                        "from the environment!")
         from oauth2client.client import GoogleCredentials
         credentials = self.sut.get_application_default_credentials()
         self.assertTrue(isinstance(credentials, GoogleCredentials))
@@ -1015,7 +1015,7 @@ class TestToGBQIntegrationWithServiceAccountKeyPath(tm.TestCase):
 
     def test_upload_data_if_table_exists_replace(self):
 
-        raise nose.SkipTest("buggy test")
+        pytest.skip("buggy test")
 
         destination_table = DESTINATION_TABLE + "4"
 
diff --git a/pandas/io/tests/test_html.py b/pandas/io/tests/test_html.py
index 356adb928..232e68a87 100644
--- a/pandas/io/tests/test_html.py
+++ b/pandas/io/tests/test_html.py
@@ -12,7 +12,7 @@ except ImportError:
 
 from distutils.version import LooseVersion
 
-import nose
+import pytest
 
 import numpy as np
 from numpy.random import rand
@@ -39,7 +39,7 @@ def _have_module(module_name):
 
 def _skip_if_no(module_name):
     if not _have_module(module_name):
-        raise nose.SkipTest("{0!r} not found".format(module_name))
+        pytest.skip("{0!r} not found".format(module_name))
 
 
 def _skip_if_none_of(module_names):
@@ -48,16 +48,16 @@ def _skip_if_none_of(module_names):
         if module_names == 'bs4':
             import bs4
             if bs4.__version__ == LooseVersion('4.2.0'):
-                raise nose.SkipTest("Bad version of bs4: 4.2.0")
+                pytest.skip("Bad version of bs4: 4.2.0")
     else:
         not_found = [module_name for module_name in module_names if not
                      _have_module(module_name)]
         if set(not_found) & set(module_names):
-            raise nose.SkipTest("{0!r} not found".format(not_found))
+            pytest.skip("{0!r} not found".format(not_found))
         if 'bs4' in module_names:
             import bs4
             if bs4.__version__ == LooseVersion('4.2.0'):
-                raise nose.SkipTest("Bad version of bs4: 4.2.0")
+                pytest.skip("Bad version of bs4: 4.2.0")
 
 
 DATA_PATH = tm.get_data_path()
@@ -685,7 +685,7 @@ class TestReadHtml(tm.TestCase, ReadHtmlMixin):
         </html>''')
         expected = DataFrame(data={'Header': 1100.101}, index=[0])
         result = self.read_html(data, decimal='#')[0]
-        nose.tools.assert_equal(result['Header'].dtype, np.dtype('float64'))
+        assert result['Header'].dtype == np.dtype('float64')
         tm.assert_frame_equal(result, expected)
 
     def test_bool_header_arg(self):
diff --git a/pandas/io/tests/test_packers.py b/pandas/io/tests/test_packers.py
index 2ee36d85f..4bb6f4a69 100644
--- a/pandas/io/tests/test_packers.py
+++ b/pandas/io/tests/test_packers.py
@@ -1,4 +1,4 @@
-import nose
+import pytest
 
 import os
 import datetime
@@ -168,7 +168,7 @@ class TestNumpy(TestPackers):
 
     def test_list_numpy_float_complex(self):
         if not hasattr(np, 'complex128'):
-            raise nose.SkipTest('numpy cant handle complex128')
+            pytest.skip('numpy cant handle complex128')
 
         x = [np.float32(np.random.rand()) for i in range(5)] + \
             [np.complex128(np.random.rand() + 1j * np.random.rand())
@@ -261,7 +261,7 @@ class TestBasic(TestPackers):
         # fails under 2.6/win32 (np.datetime64 seems broken)
 
         if LooseVersion(sys.version) < '2.7':
-            raise nose.SkipTest('2.6 with np.datetime64 is broken')
+            pytest.skip('2.6 with np.datetime64 is broken')
 
         for i in [datetime.datetime(2013, 1, 1),
                   datetime.datetime(2013, 1, 1, 5, 1),
@@ -589,12 +589,12 @@ class TestCompression(TestPackers):
 
     def test_compression_zlib(self):
         if not _ZLIB_INSTALLED:
-            raise nose.SkipTest('no zlib')
+            pytest.skip('no zlib')
         self._test_compression('zlib')
 
     def test_compression_blosc(self):
         if not _BLOSC_INSTALLED:
-            raise nose.SkipTest('no blosc')
+            pytest.skip('no blosc')
         self._test_compression('blosc')
 
     def _test_compression_warns_when_decompress_caches(self, compress):
@@ -653,12 +653,12 @@ class TestCompression(TestPackers):
 
     def test_compression_warns_when_decompress_caches_zlib(self):
         if not _ZLIB_INSTALLED:
-            raise nose.SkipTest('no zlib')
+            pytest.skip('no zlib')
         self._test_compression_warns_when_decompress_caches('zlib')
 
     def test_compression_warns_when_decompress_caches_blosc(self):
         if not _BLOSC_INSTALLED:
-            raise nose.SkipTest('no blosc')
+            pytest.skip('no blosc')
         self._test_compression_warns_when_decompress_caches('blosc')
 
     def _test_small_strings_no_warn(self, compress):
@@ -690,18 +690,18 @@ class TestCompression(TestPackers):
 
     def test_small_strings_no_warn_zlib(self):
         if not _ZLIB_INSTALLED:
-            raise nose.SkipTest('no zlib')
+            pytest.skip('no zlib')
         self._test_small_strings_no_warn('zlib')
 
     def test_small_strings_no_warn_blosc(self):
         if not _BLOSC_INSTALLED:
-            raise nose.SkipTest('no blosc')
+            pytest.skip('no blosc')
         self._test_small_strings_no_warn('blosc')
 
     def test_readonly_axis_blosc(self):
         # GH11880
         if not _BLOSC_INSTALLED:
-            raise nose.SkipTest('no blosc')
+            pytest.skip('no blosc')
         df1 = DataFrame({'A': list('abcd')})
         df2 = DataFrame(df1, index=[1., 2., 3., 4.])
         self.assertTrue(1 in self.encode_decode(df1['A'], compress='blosc'))
@@ -717,9 +717,9 @@ class TestCompression(TestPackers):
     def test_readonly_axis_blosc_to_sql(self):
         # GH11880
         if not _BLOSC_INSTALLED:
-            raise nose.SkipTest('no blosc')
+            pytest.skip('no blosc')
         if not self._SQLALCHEMY_INSTALLED:
-            raise nose.SkipTest('no sqlalchemy')
+            pytest.skip('no sqlalchemy')
         expected = DataFrame({'A': list('abcd')})
         df = self.encode_decode(expected, compress='blosc')
         eng = self._create_sql_engine("sqlite:///:memory:")
@@ -731,9 +731,9 @@ class TestCompression(TestPackers):
     def test_readonly_axis_zlib_to_sql(self):
         # GH11880
         if not _ZLIB_INSTALLED:
-            raise nose.SkipTest('no zlib')
+            pytest.skip('no zlib')
         if not self._SQLALCHEMY_INSTALLED:
-            raise nose.SkipTest('no sqlalchemy')
+            pytest.skip('no sqlalchemy')
         expected = DataFrame({'A': list('abcd')})
         df = self.encode_decode(expected, compress='zlib')
         eng = self._create_sql_engine("sqlite:///:memory:")
diff --git a/pandas/io/tests/test_pickle.py b/pandas/io/tests/test_pickle.py
index 89827817a..588b2d5f0 100644
--- a/pandas/io/tests/test_pickle.py
+++ b/pandas/io/tests/test_pickle.py
@@ -2,7 +2,7 @@
 
 """ manage legacy pickle tests """
 
-import nose
+import pytest
 import os
 
 from distutils.version import LooseVersion
@@ -172,7 +172,7 @@ class TestPickle():
 
     def read_pickles(self, version):
         if not is_platform_little_endian():
-            raise nose.SkipTest("known failure on non-little endian")
+            pytest.skip("known failure on non-little endian")
 
         pth = tm.get_data_path('legacy_pickle/{0}'.format(str(version)))
         n = 0
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index 501e744ad..3fa0eb2ef 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -1,4 +1,4 @@
-import nose
+import pytest
 import sys
 import os
 import warnings
@@ -17,17 +17,14 @@ from pandas import (Series, DataFrame, Panel, MultiIndex, Int64Index,
 
 from pandas.compat import is_platform_windows, PY3, PY35
 from pandas.formats.printing import pprint_thing
-from pandas.io.pytables import _tables, TableIterator
-try:
-    _tables()
-except ImportError as e:
-    raise nose.SkipTest(e)
-
 
+tables = pytest.importorskip('tables')
+from pandas.io.pytables import TableIterator
 from pandas.io.pytables import (HDFStore, get_store, Term, read_hdf,
                                 IncompatibilityWarning, PerformanceWarning,
                                 AttributeConflictWarning, DuplicateWarning,
                                 PossibleDataLossError, ClosedFileError)
+
 from pandas.io import pytables as pytables
 import pandas.util.testing as tm
 from pandas.util.testing import (assert_panel4d_equal,
@@ -43,7 +40,7 @@ from pandas.compat import range, lrange, u
 try:
     import tables
 except ImportError:
-    raise nose.SkipTest('no pytables')
+    pytest.skip('no pytables')
 
 from distutils.version import LooseVersion
 
@@ -738,7 +735,7 @@ class TestHDFStore(Base, tm.TestCase):
     def test_put_compression_blosc(self):
         tm.skip_if_no_package('tables', '2.2', app='blosc support')
         if skip_compression:
-            raise nose.SkipTest("skipping on windows/PY3")
+            pytest.skip("skipping on windows/PY3")
 
         df = tm.makeTimeDataFrame()
 
@@ -968,7 +965,7 @@ class TestHDFStore(Base, tm.TestCase):
     def test_encoding(self):
 
         if sys.byteorder != 'little':
-            raise nose.SkipTest('system byteorder is not little')
+            pytest.skip('system byteorder is not little')
 
         with ensure_clean_store(self.path) as store:
             df = DataFrame(dict(A='foo', B='bar'), index=range(5))
@@ -2830,14 +2827,14 @@ class TestHDFStore(Base, tm.TestCase):
     def test_timeseries_preepoch(self):
 
         if sys.version_info[0] == 2 and sys.version_info[1] < 7:
-            raise nose.SkipTest("won't work on Python < 2.7")
+            pytest.skip("won't work on Python < 2.7")
 
         dr = bdate_range('1/1/1940', '1/1/1960')
         ts = Series(np.random.randn(len(dr)), index=dr)
         try:
             self._check_roundtrip(ts, tm.assert_series_equal)
         except OverflowError:
-            raise nose.SkipTest('known failer on some windows platforms')
+            pytest.skip('known failer on some windows platforms')
 
     def test_frame(self):
 
@@ -4202,8 +4199,8 @@ class TestHDFStore(Base, tm.TestCase):
 
         # GH 4858; nan selection bug, only works for pytables >= 3.1
         if LooseVersion(tables.__version__) < '3.1.0':
-            raise nose.SkipTest('tables version does not support fix for nan '
-                                'selection bug: GH 4858')
+            pytest.skip('tables version does not support fix for nan '
+                        'selection bug: GH 4858')
 
         with ensure_clean_store(self.path) as store:
 
@@ -4453,7 +4450,7 @@ class TestHDFStore(Base, tm.TestCase):
     def test_pytables_native2_read(self):
         # fails on win/3.5 oddly
         if PY35 and is_platform_windows():
-            raise nose.SkipTest("native2 read fails oddly on windows / 3.5")
+            pytest.skip("native2 read fails oddly on windows / 3.5")
 
         with ensure_clean_store(
                 tm.get_data_path('legacy_hdf/pytables_native2.h5'),
@@ -4585,7 +4582,7 @@ class TestHDFStore(Base, tm.TestCase):
                 safe_remove(path)
 
     def test_legacy_table_write(self):
-        raise nose.SkipTest("cannot write legacy tables")
+        pytest.skip("cannot write legacy tables")
 
         store = HDFStore(tm.get_data_path(
             'legacy_hdf/legacy_table_%s.h5' % pandas.__version__), 'a')
diff --git a/pandas/io/tests/test_sql.py b/pandas/io/tests/test_sql.py
index ddda65c5b..a6f4d9600 100644
--- a/pandas/io/tests/test_sql.py
+++ b/pandas/io/tests/test_sql.py
@@ -24,7 +24,7 @@ import csv
 import os
 import sys
 
-import nose
+import pytest
 import warnings
 import numpy as np
 import pandas as pd
@@ -854,7 +854,7 @@ class TestSQLApi(SQLAlchemyMixIn, _TestSQLApi, unittest.TestCase):
         if SQLALCHEMY_INSTALLED:
             return sqlalchemy.create_engine('sqlite:///:memory:')
         else:
-            raise nose.SkipTest('SQLAlchemy not installed')
+            pytest.skip('SQLAlchemy not installed')
 
     def test_read_table_columns(self):
         # test columns argument in read_table
@@ -1063,7 +1063,7 @@ class TestSQLiteFallbackApi(SQLiteMixIn, _TestSQLApi, unittest.TestCase):
             self.assertRaises(ImportError, sql.read_sql, "SELECT * FROM iris",
                               conn)
         else:
-            raise nose.SkipTest('SQLAlchemy is installed')
+            pytest.skip('SQLAlchemy is installed')
 
     def test_read_sql_delegate(self):
         iris_frame1 = sql.read_sql_query("SELECT * FROM iris", self.conn)
@@ -1128,7 +1128,7 @@ class _TestSQLAlchemy(SQLAlchemyMixIn, PandasSQLTest):
             conn.connect()
         except sqlalchemy.exc.OperationalError:
             msg = "{0} - can't connect to {1} server".format(cls, cls.flavor)
-            raise nose.SkipTest(msg)
+            pytest.skip(msg)
 
     def setUp(self):
         self.setup_connect()
@@ -1141,7 +1141,7 @@ class _TestSQLAlchemy(SQLAlchemyMixIn, PandasSQLTest):
     def setup_import(cls):
         # Skip this test if SQLAlchemy not available
         if not SQLALCHEMY_INSTALLED:
-            raise nose.SkipTest('SQLAlchemy not installed')
+            pytest.skip('SQLAlchemy not installed')
 
     @classmethod
     def setup_driver(cls):
@@ -1158,7 +1158,7 @@ class _TestSQLAlchemy(SQLAlchemyMixIn, PandasSQLTest):
             # to test if connection can be made:
             self.conn.connect()
         except sqlalchemy.exc.OperationalError:
-            raise nose.SkipTest(
+            pytest.skip(
                 "Can't connect to {0} server".format(self.flavor))
 
     def test_aread_sql(self):
@@ -1304,7 +1304,7 @@ class _TestSQLAlchemy(SQLAlchemyMixIn, PandasSQLTest):
         # GH11216
         df = pd.read_sql_query("select * from types_test_data", self.conn)
         if not hasattr(df, 'DateColWithTz'):
-            raise nose.SkipTest("no column with datetime with time zone")
+            pytest.skip("no column with datetime with time zone")
 
         # this is parsed on Travis (linux), but not on macosx for some reason
         # even with the same versions of psycopg2 & sqlalchemy, possibly a
@@ -1319,7 +1319,7 @@ class _TestSQLAlchemy(SQLAlchemyMixIn, PandasSQLTest):
         df = pd.read_sql_query("select * from types_test_data",
                                self.conn, parse_dates=['DateColWithTz'])
         if not hasattr(df, 'DateColWithTz'):
-            raise nose.SkipTest("no column with datetime with time zone")
+            pytest.skip("no column with datetime with time zone")
         check(df.DateColWithTz)
 
         df = pd.concat(list(pd.read_sql_query("select * from types_test_data",
@@ -1665,7 +1665,7 @@ class _TestSQLAlchemy(SQLAlchemyMixIn, PandasSQLTest):
 class _TestSQLAlchemyConn(_EngineToConnMixin, _TestSQLAlchemy):
 
     def test_transactions(self):
-        raise nose.SkipTest(
+        pytest.skip(
             "Nested transactions rollbacks don't work with Pandas")
 
 
@@ -1739,7 +1739,7 @@ class _TestMySQLAlchemy(object):
             import pymysql  # noqa
             cls.driver = 'pymysql'
         except ImportError:
-            raise nose.SkipTest('pymysql not installed')
+            pytest.skip('pymysql not installed')
 
     def test_default_type_conversion(self):
         df = sql.read_sql_table("types_test_data", self.conn)
@@ -1808,7 +1808,7 @@ class _TestPostgreSQLAlchemy(object):
             import psycopg2  # noqa
             cls.driver = 'psycopg2'
         except ImportError:
-            raise nose.SkipTest('psycopg2 not installed')
+            pytest.skip('psycopg2 not installed')
 
     def test_schema_support(self):
         # only test this for postgresql (schema's not supported in
@@ -2007,7 +2007,7 @@ class TestSQLiteFallback(SQLiteMixIn, PandasSQLTest, unittest.TestCase):
 
     def test_transactions(self):
         if PY36:
-            raise nose.SkipTest("not working on python > 3.5")
+            pytest.skip("not working on python > 3.5")
         self._transaction_test()
 
     def _get_sqlite_column_type(self, table, column):
@@ -2019,7 +2019,7 @@ class TestSQLiteFallback(SQLiteMixIn, PandasSQLTest, unittest.TestCase):
 
     def test_dtype(self):
         if self.flavor == 'mysql':
-            raise nose.SkipTest('Not applicable to MySQL legacy')
+            pytest.skip('Not applicable to MySQL legacy')
         cols = ['A', 'B']
         data = [(0.8, True),
                 (0.9, None)]
@@ -2045,7 +2045,7 @@ class TestSQLiteFallback(SQLiteMixIn, PandasSQLTest, unittest.TestCase):
 
     def test_notnull_dtype(self):
         if self.flavor == 'mysql':
-            raise nose.SkipTest('Not applicable to MySQL legacy')
+            pytest.skip('Not applicable to MySQL legacy')
 
         cols = {'Bool': Series([True, None]),
                 'Date': Series([datetime(2012, 5, 1), None]),
@@ -2130,7 +2130,7 @@ def _skip_if_no_pymysql():
     try:
         import pymysql  # noqa
     except ImportError:
-        raise nose.SkipTest('pymysql not installed, skipping')
+        pytest.skip('pymysql not installed, skipping')
 
 
 class TestXSQLite(SQLiteMixIn, tm.TestCase):
@@ -2389,12 +2389,12 @@ class TestXMySQL(MySQLMixIn, tm.TestCase):
         try:
             pymysql.connect(read_default_group='pandas')
         except pymysql.ProgrammingError:
-            raise nose.SkipTest(
+            pytest.skip(
                 "Create a group of connection parameters under the heading "
                 "[pandas] in your system's mysql default file, "
                 "typically located at ~/.my.cnf or /etc/.my.cnf. ")
         except pymysql.Error:
-            raise nose.SkipTest(
+            pytest.skip(
                 "Cannot connect to database. "
                 "Create a group of connection parameters under the heading "
                 "[pandas] in your system's mysql default file, "
@@ -2415,12 +2415,12 @@ class TestXMySQL(MySQLMixIn, tm.TestCase):
         try:
             self.conn = pymysql.connect(read_default_group='pandas')
         except pymysql.ProgrammingError:
-            raise nose.SkipTest(
+            pytest.skip(
                 "Create a group of connection parameters under the heading "
                 "[pandas] in your system's mysql default file, "
                 "typically located at ~/.my.cnf or /etc/.my.cnf. ")
         except pymysql.Error:
-            raise nose.SkipTest(
+            pytest.skip(
                 "Cannot connect to database. "
                 "Create a group of connection parameters under the heading "
                 "[pandas] in your system's mysql default file, "
diff --git a/pandas/io/tests/test_stata.py b/pandas/io/tests/test_stata.py
index fcb935925..ae09e671d 100644
--- a/pandas/io/tests/test_stata.py
+++ b/pandas/io/tests/test_stata.py
@@ -9,7 +9,7 @@ import warnings
 from datetime import datetime
 from distutils.version import LooseVersion
 
-import nose
+import pytest
 import numpy as np
 import pandas as pd
 import pandas.util.testing as tm
@@ -128,7 +128,7 @@ class TestStata(tm.TestCase):
 
     def test_read_dta2(self):
         if LooseVersion(sys.version) < '2.7':
-            raise nose.SkipTest('datetime interp under 2.6 is faulty')
+            pytest.skip('datetime interp under 2.6 is faulty')
 
         expected = DataFrame.from_records(
             [
diff --git a/pandas/sparse/tests/test_indexing.py b/pandas/sparse/tests/test_indexing.py
index c400b68c8..357a7103f 100644
--- a/pandas/sparse/tests/test_indexing.py
+++ b/pandas/sparse/tests/test_indexing.py
@@ -1,6 +1,6 @@
 # pylint: disable-msg=E1101,W0612
 
-import nose  # noqa
+import pytest  # noqa
 import numpy as np
 import pandas as pd
 import pandas.util.testing as tm
diff --git a/pandas/sparse/tests/test_libsparse.py b/pandas/sparse/tests/test_libsparse.py
index 491005db2..4d5a93d77 100644
--- a/pandas/sparse/tests/test_libsparse.py
+++ b/pandas/sparse/tests/test_libsparse.py
@@ -1,6 +1,6 @@
 from pandas import Series
 
-import nose
+import pytest
 import numpy as np
 import operator
 import pandas.util.testing as tm
@@ -213,7 +213,7 @@ class TestSparseIndexIntersect(tm.TestCase):
                               longer_index.to_int_index())
 
         if compat.is_platform_windows():
-            raise nose.SkipTest("segfaults on win-64 when all tests are run")
+            pytest.skip("segfaults on win-64 when all tests are run")
         check_cases(_check_case)
 
     def test_intersect_empty(self):
diff --git a/pandas/sparse/tests/test_series.py b/pandas/sparse/tests/test_series.py
index db6ae14b0..d4543b97a 100644
--- a/pandas/sparse/tests/test_series.py
+++ b/pandas/sparse/tests/test_series.py
@@ -577,8 +577,8 @@ class TestSparseSeries(tm.TestCase, SharedWithSparse):
     def test_binary_operators(self):
 
         # skipping for now #####
-        import nose
-        raise nose.SkipTest("skipping sparse binary operators test")
+        import pytest
+        pytest.skip("skipping sparse binary operators test")
 
         def _check_inplace_op(iop, op):
             tmp = self.bseries.copy()
diff --git a/pandas/tests/formats/test_format.py b/pandas/tests/formats/test_format.py
index 9a24ae332..476c6a636 100644
--- a/pandas/tests/formats/test_format.py
+++ b/pandas/tests/formats/test_format.py
@@ -44,7 +44,7 @@ from pandas.core.config import (set_option, get_option, option_context,
                                 reset_option)
 from datetime import datetime
 
-import nose
+import pytest
 
 use_32bit_repr = is_platform_windows() or is_platform_32bit()
 
@@ -287,7 +287,7 @@ class TestDataFrameFormatting(tm.TestCase):
     def test_repr_max_columns_max_rows(self):
         term_width, term_height = get_terminal_size()
         if term_width < 10 or term_height < 10:
-            raise nose.SkipTest("terminal size too small, "
+            pytest.skip("terminal size too small, "
                                 "{0} x {1}".format(term_width, term_height))
 
         def mkframe(n):
@@ -1871,7 +1871,7 @@ class TestDataFrameFormatting(tm.TestCase):
         df.pivot_table(index=[u('clé1')], columns=[u('clé2')])._repr_html_()
 
     def test_to_html_truncate(self):
-        raise nose.SkipTest("unreliable on travis")
+        pytest.skip("unreliable on travis")
         index = pd.DatetimeIndex(start='20010101', freq='D', periods=20)
         df = DataFrame(index=index, columns=range(20))
         fmt.set_option('display.max_rows', 8)
@@ -1972,7 +1972,7 @@ class TestDataFrameFormatting(tm.TestCase):
         self.assertEqual(result, expected)
 
     def test_to_html_truncate_multi_index(self):
-        raise nose.SkipTest("unreliable on travis")
+        pytest.skip("unreliable on travis")
         arrays = [['bar', 'bar', 'baz', 'baz', 'foo', 'foo', 'qux', 'qux'],
                   ['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two']]
         df = DataFrame(index=arrays, columns=arrays)
@@ -2089,7 +2089,7 @@ class TestDataFrameFormatting(tm.TestCase):
         self.assertEqual(result, expected)
 
     def test_to_html_truncate_multi_index_sparse_off(self):
-        raise nose.SkipTest("unreliable on travis")
+        pytest.skip("unreliable on travis")
         arrays = [['bar', 'bar', 'baz', 'baz', 'foo', 'foo', 'qux', 'qux'],
                   ['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two']]
         df = DataFrame(index=arrays, columns=arrays)
@@ -2250,7 +2250,7 @@ class TestDataFrameFormatting(tm.TestCase):
         from pandas.formats.printing import pprint_thing as pp_t
 
         if PY3:
-            raise nose.SkipTest("doesn't work on Python 3")
+            pytest.skip("doesn't work on Python 3")
 
         self.assertEqual(pp_t('a'), u('a'))
         self.assertEqual(pp_t(u('a')), u('a'))
diff --git a/pandas/tests/formats/test_printing.py b/pandas/tests/formats/test_printing.py
index 1e6794c1c..52f3e06c6 100644
--- a/pandas/tests/formats/test_printing.py
+++ b/pandas/tests/formats/test_printing.py
@@ -126,7 +126,7 @@ c        ff         いいい"""
 #     common.console_encode should encode things as utf-8.
 #     """
 #     if compat.PY3:
-#         raise nose.SkipTest
+#         pytest.skip
 
 #     with tm.stdin_encoding(encoding=None):
 #         result = printing.console_encode(u"\u05d0")
diff --git a/pandas/tests/formats/test_style.py b/pandas/tests/formats/test_style.py
index eaa209178..53bb3f901 100644
--- a/pandas/tests/formats/test_style.py
+++ b/pandas/tests/formats/test_style.py
@@ -1,5 +1,4 @@
-import os
-from nose import SkipTest
+import pytest
 
 import copy
 import numpy as np
@@ -8,20 +7,7 @@ from pandas import DataFrame
 from pandas.util.testing import TestCase
 import pandas.util.testing as tm
 
-# Getting failures on a python 2.7 build with
-# whenever we try to import jinja, whether it's installed or not.
-# so we're explicitly skipping that one *before* we try to import
-# jinja. We still need to export the imports as globals,
-# since importing Styler tries to import jinja2.
-job_name = os.environ.get('JOB_NAME', None)
-if job_name == '27_slow_nnet_LOCALE':
-    raise SkipTest("No jinja")
-try:
-    # Do try except on just jinja, so the only reason
-    # We skip is if jinja can't import, not something else
-    import jinja2  # noqa
-except ImportError:
-    raise SkipTest("No Jinja2")
+jinja2 = pytest.importorskip('jinja2')
 from pandas.formats.style import Styler, _get_level_lengths  # noqa
 
 
diff --git a/pandas/tests/frame/test_analytics.py b/pandas/tests/frame/test_analytics.py
index a55d2cfb2..1f0d16e95 100644
--- a/pandas/tests/frame/test_analytics.py
+++ b/pandas/tests/frame/test_analytics.py
@@ -5,7 +5,7 @@ from __future__ import print_function
 from datetime import timedelta, datetime
 from distutils.version import LooseVersion
 import sys
-import nose
+import pytest
 
 from numpy import nan
 from numpy.random import randn
@@ -2066,8 +2066,8 @@ class TestDataFrameAnalytics(tm.TestCase, TestData):
 
     def test_built_in_round(self):
         if not compat.PY3:
-            raise nose.SkipTest("build in round cannot be overriden "
-                                "prior to Python 3")
+            pytest.skip("build in round cannot be overriden "
+                        "prior to Python 3")
 
         # GH11763
         # Here's the test frame we'll be working with
diff --git a/pandas/tests/frame/test_constructors.py b/pandas/tests/frame/test_constructors.py
index 66a235e12..76eb61bd8 100644
--- a/pandas/tests/frame/test_constructors.py
+++ b/pandas/tests/frame/test_constructors.py
@@ -6,7 +6,7 @@ from datetime import datetime, timedelta
 import functools
 import itertools
 
-import nose
+import pytest
 from numpy.random import randn
 
 import numpy as np
@@ -1702,7 +1702,7 @@ class TestDataFrameConstructors(tm.TestCase, TestData):
         # this may fail on certain platforms because of a numpy issue
         # related GH6140
         if not is_platform_little_endian():
-            raise nose.SkipTest("known failure of test on non-little endian")
+            pytest.skip("known failure of test on non-little endian")
 
         # construction with a null in a recarray
         # GH 6140
@@ -1714,7 +1714,7 @@ class TestDataFrameConstructors(tm.TestCase, TestData):
         try:
             recarray = np.core.records.fromarrays(arrdata, dtype=dtypes)
         except (ValueError):
-            raise nose.SkipTest("known failure of numpy rec array creation")
+            pytest.skip("known failure of numpy rec array creation")
 
         result = DataFrame.from_records(recarray)
         tm.assert_frame_equal(result, expected)
diff --git a/pandas/tests/frame/test_missing.py b/pandas/tests/frame/test_missing.py
index ef800f0df..80ea01d3a 100644
--- a/pandas/tests/frame/test_missing.py
+++ b/pandas/tests/frame/test_missing.py
@@ -23,8 +23,8 @@ def _skip_if_no_pchip():
     try:
         from scipy.interpolate import pchip_interpolate  # noqa
     except ImportError:
-        import nose
-        raise nose.SkipTest('scipy.interpolate.pchip missing')
+        import pytest
+        pytest.skip('scipy.interpolate.pchip missing')
 
 
 class TestDataFrameMissingData(tm.TestCase, TestData):
diff --git a/pandas/tests/frame/test_operators.py b/pandas/tests/frame/test_operators.py
index ec7368908..d6a359244 100644
--- a/pandas/tests/frame/test_operators.py
+++ b/pandas/tests/frame/test_operators.py
@@ -5,7 +5,7 @@ from __future__ import print_function
 from datetime import datetime
 import operator
 
-import nose
+import pytest
 
 from numpy import nan, random
 import numpy as np
@@ -323,7 +323,7 @@ class TestDataFrameOperators(tm.TestCase, TestData):
             self.assertRaises(TypeError, self.frame.__gt__, 'foo')
             self.assertRaises(TypeError, self.frame.__ne__, 'foo')
         else:
-            raise nose.SkipTest('test_logical_typeerror not tested on PY3')
+            pytest.skip('test_logical_typeerror not tested on PY3')
 
     def test_logical_with_nas(self):
         d = DataFrame({'a': [np.nan, False], 'b': [True, True]})
diff --git a/pandas/tests/frame/test_quantile.py b/pandas/tests/frame/test_quantile.py
index 400ead788..909a1a6a4 100644
--- a/pandas/tests/frame/test_quantile.py
+++ b/pandas/tests/frame/test_quantile.py
@@ -3,7 +3,7 @@
 from __future__ import print_function
 
 
-import nose
+import pytest
 import numpy as np
 
 from pandas import (DataFrame, Series, Timestamp, _np_version_under1p11)
@@ -106,7 +106,7 @@ class TestDataFrameQuantile(tm.TestCase, TestData):
     def test_quantile_interpolation(self):
         # GH #10174
         if _np_version_under1p9:
-            raise nose.SkipTest("Numpy version under 1.9")
+            pytest.skip("Numpy version under 1.9")
 
         from numpy import percentile
 
@@ -171,7 +171,7 @@ class TestDataFrameQuantile(tm.TestCase, TestData):
     def test_quantile_interpolation_np_lt_1p9(self):
         # GH #10174
         if not _np_version_under1p9:
-            raise nose.SkipTest("Numpy version is greater than 1.9")
+            pytest.skip("Numpy version is greater than 1.9")
 
         from numpy import percentile
 
diff --git a/pandas/tests/frame/test_query_eval.py b/pandas/tests/frame/test_query_eval.py
index aed02b732..647af92b4 100644
--- a/pandas/tests/frame/test_query_eval.py
+++ b/pandas/tests/frame/test_query_eval.py
@@ -3,7 +3,7 @@
 from __future__ import print_function
 
 import operator
-import nose
+import pytest
 from itertools import product
 
 from pandas.compat import (zip, range, lrange, StringIO)
@@ -30,14 +30,14 @@ ENGINES = 'python', 'numexpr'
 
 def skip_if_no_pandas_parser(parser):
     if parser != 'pandas':
-        raise nose.SkipTest("cannot evaluate with parser {0!r}".format(parser))
+        pytest.skip("cannot evaluate with parser {0!r}".format(parser))
 
 
 def skip_if_no_ne(engine='numexpr'):
     if engine == 'numexpr':
         if not _NUMEXPR_INSTALLED:
-            raise nose.SkipTest("cannot query engine numexpr when numexpr not "
-                                "installed")
+            pytest.skip("cannot query engine numexpr when numexpr not "
+                        "installed")
 
 
 class TestCompat(tm.TestCase):
diff --git a/pandas/tests/groupby/test_misc.py b/pandas/tests/groupby/test_misc.py
index c9d8ad423..939530438 100644
--- a/pandas/tests/groupby/test_misc.py
+++ b/pandas/tests/groupby/test_misc.py
@@ -1,6 +1,6 @@
 """ misc non-groupby routines, as they are defined in core/groupby.py """
 
-import nose
+import pytest
 import numpy as np
 from numpy import nan
 from pandas.util import testing as tm
@@ -42,7 +42,7 @@ class TestSorting(tm.TestCase):
             np.argsort(np.array([[1, 2], [1, 3], [1, 2]], dtype='i'))
             np.argsort(items2, kind='mergesort')
         except TypeError:
-            raise nose.SkipTest('requested sort not available for type')
+            pytest.skip('requested sort not available for type')
 
         # mergesort is the most difficult to get right because we want it to be
         # stable.
diff --git a/pandas/tests/indexes/datetimes/test_tools.py b/pandas/tests/indexes/datetimes/test_tools.py
index af7499631..1b67ffce6 100644
--- a/pandas/tests/indexes/datetimes/test_tools.py
+++ b/pandas/tests/indexes/datetimes/test_tools.py
@@ -1,7 +1,7 @@
 """ test to_datetime """
 
 import sys
-import nose
+import pytest
 import locale
 import calendar
 import numpy as np
@@ -139,7 +139,7 @@ class TimeConversionFormats(tm.TestCase):
         # 8904
         # exact kw
         if sys.version_info < (2, 7):
-            raise nose.SkipTest('on python version < 2.7')
+            pytest.skip('on python version < 2.7')
 
         s = Series(['19MAY11', 'foobar19MAY11', '19MAY11:00:00:00',
                     '19MAY11 00:00:00Z'])
@@ -277,7 +277,7 @@ class TestToDatetime(tm.TestCase):
         try:
             import psycopg2
         except ImportError:
-            raise nose.SkipTest("no psycopg2 installed")
+            pytest.skip("no psycopg2 installed")
 
         # misc cases
         tz1 = psycopg2.tz.FixedOffsetTimezone(offset=-300, name=None)
diff --git a/pandas/tests/indexes/test_multi.py b/pandas/tests/indexes/test_multi.py
index 365236f72..702c4758d 100644
--- a/pandas/tests/indexes/test_multi.py
+++ b/pandas/tests/indexes/test_multi.py
@@ -6,7 +6,7 @@ import warnings
 from datetime import timedelta
 from itertools import product
 
-import nose
+import pytest
 
 import numpy as np
 
@@ -988,8 +988,8 @@ class TestMultiIndex(Base, tm.TestCase):
 
     def test_legacy_pickle(self):
         if PY3:
-            raise nose.SkipTest("testing for legacy pickles not "
-                                "support on py3")
+            pytest.skip("testing for legacy pickles not "
+                        "support on py3")
 
         path = tm.get_data_path('multiindex_v1.pickle')
         obj = pd.read_pickle(path)
diff --git a/pandas/tests/indexing/test_coercion.py b/pandas/tests/indexing/test_coercion.py
index b9a746cd2..38f8bb535 100644
--- a/pandas/tests/indexing/test_coercion.py
+++ b/pandas/tests/indexing/test_coercion.py
@@ -1,6 +1,6 @@
 # -*- coding: utf-8 -*-
 
-import nose
+import pytest
 import numpy as np
 
 import pandas as pd
@@ -1172,8 +1172,8 @@ class TestReplaceSeriesCoercion(CoercionBase, tm.TestCase):
         if (from_key == 'bool' and
                 to_key == 'int64' and
                 tm.is_platform_windows()):
-            raise nose.SkipTest("windows platform buggy: {0} -> {1}".format
-                                (from_key, to_key))
+            pytest.skip("windows platform buggy: {0} -> {1}".format
+                        (from_key, to_key))
 
         if ((from_key == 'float64' and
              to_key in ('bool', 'int64')) or
@@ -1189,8 +1189,8 @@ class TestReplaceSeriesCoercion(CoercionBase, tm.TestCase):
 
             # buggy on 32-bit
             if tm.is_platform_32bit():
-                raise nose.SkipTest("32-bit platform buggy: {0} -> {1}".format
-                                    (from_key, to_key))
+                pytest.skip("32-bit platform buggy: {0} -> {1}".format
+                            (from_key, to_key))
 
             # Expected: do not downcast by replacement
             exp = pd.Series(self.rep[to_key], index=index,
@@ -1243,7 +1243,7 @@ class TestReplaceSeriesCoercion(CoercionBase, tm.TestCase):
 
             if compat.PY3:
                 # doesn't work in PY3, though ...dict_from_bool works fine
-                raise nose.SkipTest("doesn't work as in PY3")
+                pytest.skip("doesn't work as in PY3")
 
             self._assert_replace_conversion(from_key, to_key, how='series')
 
diff --git a/pandas/tests/plotting/common.py b/pandas/tests/plotting/common.py
index 9fe1d7cac..92e2dc7b5 100644
--- a/pandas/tests/plotting/common.py
+++ b/pandas/tests/plotting/common.py
@@ -1,7 +1,7 @@
 #!/usr/bin/env python
 # coding: utf-8
 
-import nose
+import pytest
 import os
 import warnings
 
@@ -28,7 +28,7 @@ def _skip_if_no_scipy_gaussian_kde():
     try:
         from scipy.stats import gaussian_kde  # noqa
     except ImportError:
-        raise nose.SkipTest("scipy version doesn't support gaussian_kde")
+        pytest.skip("scipy version doesn't support gaussian_kde")
 
 
 def _ok_for_gaussian_kde(kind):
diff --git a/pandas/tests/plotting/test_boxplot_method.py b/pandas/tests/plotting/test_boxplot_method.py
index f7fd6a851..31c150bc1 100644
--- a/pandas/tests/plotting/test_boxplot_method.py
+++ b/pandas/tests/plotting/test_boxplot_method.py
@@ -1,6 +1,6 @@
 # coding: utf-8
 
-import nose
+import pytest
 import itertools
 import string
 from distutils.version import LooseVersion
@@ -28,7 +28,7 @@ def _skip_if_mpl_14_or_dev_boxplot():
     # Don't need try / except since that's done at class level
     import matplotlib
     if str(matplotlib.__version__) >= LooseVersion('1.4'):
-        raise nose.SkipTest("Matplotlib Regression in 1.4 and current dev.")
+        pytest.skip("Matplotlib Regression in 1.4 and current dev.")
 
 
 @tm.mplskip
diff --git a/pandas/tests/plotting/test_datetimelike.py b/pandas/tests/plotting/test_datetimelike.py
index bcc9c7cee..25568f7eb 100644
--- a/pandas/tests/plotting/test_datetimelike.py
+++ b/pandas/tests/plotting/test_datetimelike.py
@@ -2,7 +2,7 @@
 
 from datetime import datetime, timedelta, date, time
 
-import nose
+import pytest
 from pandas.compat import lrange, zip
 
 import numpy as np
@@ -161,8 +161,8 @@ class TestTSPlot(TestPlotBase):
                 self.assertEqual(expected_string,
                                  ax.format_coord(first_x, first_y))
             except (ValueError):
-                raise nose.SkipTest("skipping test because issue forming "
-                                    "test comparison GH7664")
+                pytest.skip("skipping test because issue forming "
+                            "test comparison GH7664")
 
         annual = Series(1, index=date_range('2014-01-01', periods=3,
                                             freq='A-DEC'))
diff --git a/pandas/tests/plotting/test_frame.py b/pandas/tests/plotting/test_frame.py
index 81a54bd38..48af366f2 100644
--- a/pandas/tests/plotting/test_frame.py
+++ b/pandas/tests/plotting/test_frame.py
@@ -2,7 +2,7 @@
 
 """ Test cases for DataFrame.plot """
 
-import nose
+import pytest
 import string
 import warnings
 
@@ -1275,7 +1275,7 @@ class TestDataFramePlots(TestPlotBase):
     def test_hist_df(self):
         from matplotlib.patches import Rectangle
         if self.mpl_le_1_2_1:
-            raise nose.SkipTest("not supported in matplotlib <= 1.2.x")
+            pytest.skip("not supported in matplotlib <= 1.2.x")
 
         df = DataFrame(randn(100, 4))
         series = df[0]
diff --git a/pandas/tests/series/test_analytics.py b/pandas/tests/series/test_analytics.py
index 52b85c89a..222165e9d 100644
--- a/pandas/tests/series/test_analytics.py
+++ b/pandas/tests/series/test_analytics.py
@@ -4,7 +4,7 @@
 from itertools import product
 from distutils.version import LooseVersion
 
-import nose
+import pytest
 
 from numpy import nan
 import numpy as np
@@ -476,8 +476,8 @@ class TestSeriesAnalytics(TestData, tm.TestCase):
         self.assert_series_equal(expected, result)
 
     def test_npdiff(self):
-        raise nose.SkipTest("skipping due to Series no longer being an "
-                            "ndarray")
+        pytest.skip("skipping due to Series no longer being an "
+                    "ndarray")
 
         # no longer works as the return type of np.diff is now nd.array
         s = Series(np.arange(5))
@@ -622,7 +622,7 @@ class TestSeriesAnalytics(TestData, tm.TestCase):
 
     def test_built_in_round(self):
         if not compat.PY3:
-            raise nose.SkipTest(
+            pytest.skip(
                 'build in round cannot be overriden prior to Python 3')
 
         s = Series([1.123, 2.123, 3.123], index=lrange(3))
@@ -785,8 +785,8 @@ class TestSeriesAnalytics(TestData, tm.TestCase):
 
         # these methods got rewritten in 0.8
         if scipy.__version__ < LooseVersion('0.9'):
-            raise nose.SkipTest("skipping corr rank because of scipy version "
-                                "{0}".format(scipy.__version__))
+            pytest.skip("skipping corr rank because of scipy version "
+                        "{0}".format(scipy.__version__))
 
         # results from R
         A = Series(
@@ -1063,8 +1063,8 @@ class TestSeriesAnalytics(TestData, tm.TestCase):
         self.assertRaises(ValueError, s.rank, 'average')
 
     def test_rank_inf(self):
-        raise nose.SkipTest('DataFrame.rank does not currently rank '
-                            'np.inf and -np.inf properly')
+        pytest.skip('DataFrame.rank does not currently rank '
+                    'np.inf and -np.inf properly')
 
         values = np.array(
             [-np.inf, -50, -1, -1e-20, -1e-25, -1e-50, 0, 1e-40, 1e-20, 1e-10,
diff --git a/pandas/tests/series/test_missing.py b/pandas/tests/series/test_missing.py
index 702fa2acb..405d6c98a 100644
--- a/pandas/tests/series/test_missing.py
+++ b/pandas/tests/series/test_missing.py
@@ -22,16 +22,16 @@ def _skip_if_no_pchip():
     try:
         from scipy.interpolate import pchip_interpolate  # noqa
     except ImportError:
-        import nose
-        raise nose.SkipTest('scipy.interpolate.pchip missing')
+        import pytest
+        pytest.skip('scipy.interpolate.pchip missing')
 
 
 def _skip_if_no_akima():
     try:
         from scipy.interpolate import Akima1DInterpolator  # noqa
     except ImportError:
-        import nose
-        raise nose.SkipTest('scipy.interpolate.Akima1DInterpolator missing')
+        import pytest
+        pytest.skip('scipy.interpolate.Akima1DInterpolator missing')
 
 
 def _simple_ts(start, end, freq='D'):
diff --git a/pandas/tests/series/test_quantile.py b/pandas/tests/series/test_quantile.py
index 76db6c90a..b8d1b9208 100644
--- a/pandas/tests/series/test_quantile.py
+++ b/pandas/tests/series/test_quantile.py
@@ -1,7 +1,7 @@
 # coding=utf-8
 # pylint: disable-msg=E1101,W0612
 
-import nose
+import pytest
 import numpy as np
 import pandas as pd
 
@@ -73,7 +73,7 @@ class TestSeriesQuantile(TestData, tm.TestCase):
     def test_quantile_interpolation(self):
         # GH #10174
         if _np_version_under1p9:
-            raise nose.SkipTest("Numpy version is under 1.9")
+            pytest.skip("Numpy version is under 1.9")
 
         from numpy import percentile
 
@@ -89,7 +89,7 @@ class TestSeriesQuantile(TestData, tm.TestCase):
     def test_quantile_interpolation_dtype(self):
         # GH #10174
         if _np_version_under1p9:
-            raise nose.SkipTest("Numpy version is under 1.9")
+            pytest.skip("Numpy version is under 1.9")
 
         from numpy import percentile
 
@@ -105,7 +105,7 @@ class TestSeriesQuantile(TestData, tm.TestCase):
     def test_quantile_interpolation_np_lt_1p9(self):
         # GH #10174
         if not _np_version_under1p9:
-            raise nose.SkipTest("Numpy version is greater than 1.9")
+            pytest.skip("Numpy version is greater than 1.9")
 
         from numpy import percentile
 
diff --git a/pandas/tests/test_base.py b/pandas/tests/test_base.py
index 1d1ef1a08..473f1d81c 100644
--- a/pandas/tests/test_base.py
+++ b/pandas/tests/test_base.py
@@ -4,7 +4,7 @@ from __future__ import print_function
 import re
 import sys
 from datetime import datetime, timedelta
-import nose
+import pytest
 import numpy as np
 
 import pandas as pd
@@ -32,7 +32,7 @@ class CheckStringMixin(object):
 
     def test_tricky_container(self):
         if not hasattr(self, 'unicode_container'):
-            raise nose.SkipTest('Need unicode_container to test with this')
+            pytest.skip('Need unicode_container to test with this')
         repr(self.unicode_container)
         str(self.unicode_container)
         bytes(self.unicode_container)
diff --git a/pandas/tests/test_expressions.py b/pandas/tests/test_expressions.py
index 136786ecf..0318757f7 100644
--- a/pandas/tests/test_expressions.py
+++ b/pandas/tests/test_expressions.py
@@ -4,7 +4,7 @@ from __future__ import print_function
 
 import re
 import operator
-import nose
+import pytest
 
 from numpy.random import randn
 
@@ -21,13 +21,7 @@ import pandas.util.testing as tm
 
 
 if not expr._USE_NUMEXPR:
-    try:
-        import numexpr  # noqa
-    except ImportError:
-        msg = "don't have"
-    else:
-        msg = "not using"
-    raise nose.SkipTest("{0} numexpr".format(msg))
+    numexpr = pytest.importorskip('numexpr')
 
 _frame = DataFrame(randn(10000, 4), columns=list('ABCD'), dtype='float64')
 _frame2 = DataFrame(randn(100, 4), columns=list('ABCD'), dtype='float64')
@@ -70,9 +64,8 @@ class TestExpressions(tm.TestCase):
     def tearDown(self):
         expr._MIN_ELEMENTS = self._MIN_ELEMENTS
 
-    @nose.tools.nottest
-    def run_arithmetic_test(self, df, other, assert_func, check_dtype=False,
-                            test_flex=True):
+    def run_arithmetic(self, df, other, assert_func, check_dtype=False,
+                       test_flex=True):
         expr._MIN_ELEMENTS = 0
         operations = ['add', 'sub', 'mul', 'mod', 'truediv', 'floordiv', 'pow']
         if not compat.PY3:
@@ -109,15 +102,14 @@ class TestExpressions(tm.TestCase):
                 raise
 
     def test_integer_arithmetic(self):
-        self.run_arithmetic_test(self.integer, self.integer,
-                                 assert_frame_equal)
-        self.run_arithmetic_test(self.integer.iloc[:, 0],
-                                 self.integer.iloc[:, 0], assert_series_equal,
-                                 check_dtype=True)
-
-    @nose.tools.nottest
-    def run_binary_test(self, df, other, assert_func, test_flex=False,
-                        numexpr_ops=set(['gt', 'lt', 'ge', 'le', 'eq', 'ne'])):
+        self.run_arithmetic(self.integer, self.integer,
+                            assert_frame_equal)
+        self.run_arithmetic(self.integer.iloc[:, 0],
+                            self.integer.iloc[:, 0], assert_series_equal,
+                            check_dtype=True)
+
+    def run_binary(self, df, other, assert_func, test_flex=False,
+                   numexpr_ops=set(['gt', 'lt', 'ge', 'le', 'eq', 'ne'])):
         """
         tests solely that the result is the same whether or not numexpr is
         enabled.  Need to test whether the function does the correct thing
@@ -151,46 +143,46 @@ class TestExpressions(tm.TestCase):
 
     def run_frame(self, df, other, binary_comp=None, run_binary=True,
                   **kwargs):
-        self.run_arithmetic_test(df, other, assert_frame_equal,
-                                 test_flex=False, **kwargs)
-        self.run_arithmetic_test(df, other, assert_frame_equal, test_flex=True,
-                                 **kwargs)
+        self.run_arithmetic(df, other, assert_frame_equal,
+                            test_flex=False, **kwargs)
+        self.run_arithmetic(df, other, assert_frame_equal, test_flex=True,
+                            **kwargs)
         if run_binary:
             if binary_comp is None:
                 expr.set_use_numexpr(False)
                 binary_comp = other + 1
                 expr.set_use_numexpr(True)
-            self.run_binary_test(df, binary_comp, assert_frame_equal,
-                                 test_flex=False, **kwargs)
-            self.run_binary_test(df, binary_comp, assert_frame_equal,
-                                 test_flex=True, **kwargs)
+            self.run_binary(df, binary_comp, assert_frame_equal,
+                            test_flex=False, **kwargs)
+            self.run_binary(df, binary_comp, assert_frame_equal,
+                            test_flex=True, **kwargs)
 
     def run_series(self, ser, other, binary_comp=None, **kwargs):
-        self.run_arithmetic_test(ser, other, assert_series_equal,
-                                 test_flex=False, **kwargs)
-        self.run_arithmetic_test(ser, other, assert_almost_equal,
-                                 test_flex=True, **kwargs)
+        self.run_arithmetic(ser, other, assert_series_equal,
+                            test_flex=False, **kwargs)
+        self.run_arithmetic(ser, other, assert_almost_equal,
+                            test_flex=True, **kwargs)
         # series doesn't uses vec_compare instead of numexpr...
         # if binary_comp is None:
         #     binary_comp = other + 1
-        # self.run_binary_test(ser, binary_comp, assert_frame_equal,
+        # self.run_binary(ser, binary_comp, assert_frame_equal,
         # test_flex=False, **kwargs)
-        # self.run_binary_test(ser, binary_comp, assert_frame_equal,
+        # self.run_binary(ser, binary_comp, assert_frame_equal,
         # test_flex=True, **kwargs)
 
     def run_panel(self, panel, other, binary_comp=None, run_binary=True,
                   assert_func=assert_panel_equal, **kwargs):
-        self.run_arithmetic_test(panel, other, assert_func, test_flex=False,
-                                 **kwargs)
-        self.run_arithmetic_test(panel, other, assert_func, test_flex=True,
-                                 **kwargs)
+        self.run_arithmetic(panel, other, assert_func, test_flex=False,
+                            **kwargs)
+        self.run_arithmetic(panel, other, assert_func, test_flex=True,
+                            **kwargs)
         if run_binary:
             if binary_comp is None:
                 binary_comp = other + 1
-            self.run_binary_test(panel, binary_comp, assert_func,
-                                 test_flex=False, **kwargs)
-            self.run_binary_test(panel, binary_comp, assert_func,
-                                 test_flex=True, **kwargs)
+            self.run_binary(panel, binary_comp, assert_func,
+                            test_flex=False, **kwargs)
+            self.run_binary(panel, binary_comp, assert_func,
+                            test_flex=True, **kwargs)
 
     def test_integer_arithmetic_frame(self):
         self.run_frame(self.integer, self.integer)
@@ -234,22 +226,22 @@ class TestExpressions(tm.TestCase):
                        binary_comp=-2)
 
     def test_float_arithemtic(self):
-        self.run_arithmetic_test(self.frame, self.frame, assert_frame_equal)
-        self.run_arithmetic_test(self.frame.iloc[:, 0], self.frame.iloc[:, 0],
-                                 assert_series_equal, check_dtype=True)
+        self.run_arithmetic(self.frame, self.frame, assert_frame_equal)
+        self.run_arithmetic(self.frame.iloc[:, 0], self.frame.iloc[:, 0],
+                            assert_series_equal, check_dtype=True)
 
     def test_mixed_arithmetic(self):
-        self.run_arithmetic_test(self.mixed, self.mixed, assert_frame_equal)
+        self.run_arithmetic(self.mixed, self.mixed, assert_frame_equal)
         for col in self.mixed.columns:
-            self.run_arithmetic_test(self.mixed[col], self.mixed[col],
-                                     assert_series_equal)
+            self.run_arithmetic(self.mixed[col], self.mixed[col],
+                                assert_series_equal)
 
     def test_integer_with_zeros(self):
         self.integer *= np.random.randint(0, 2, size=np.shape(self.integer))
-        self.run_arithmetic_test(self.integer, self.integer,
-                                 assert_frame_equal)
-        self.run_arithmetic_test(self.integer.iloc[:, 0],
-                                 self.integer.iloc[:, 0], assert_series_equal)
+        self.run_arithmetic(self.integer, self.integer,
+                            assert_frame_equal)
+        self.run_arithmetic(self.integer.iloc[:, 0],
+                            self.integer.iloc[:, 0], assert_series_equal)
 
     def test_invalid(self):
 
diff --git a/pandas/tests/test_generic.py b/pandas/tests/test_generic.py
index e84e2d680..28f1dc615 100644
--- a/pandas/tests/test_generic.py
+++ b/pandas/tests/test_generic.py
@@ -2,7 +2,7 @@
 # pylint: disable-msg=E1101,W0612
 
 from operator import methodcaller
-import nose
+import pytest
 import numpy as np
 from numpy import nan
 import pandas as pd
@@ -367,7 +367,7 @@ class Generic(object):
             try:
                 o.head()
             except (NotImplementedError):
-                raise nose.SkipTest('not implemented on {0}'.format(
+                pytest.skip('not implemented on {0}'.format(
                     o.__class__.__name__))
 
             self._compare(o.head(), o.iloc[:5])
@@ -1567,7 +1567,7 @@ class TestPanel4D(tm.TestCase, Generic):
     _comparator = lambda self, x, y: assert_panel4d_equal(x, y, by_blocks=True)
 
     def test_sample(self):
-        raise nose.SkipTest("sample on Panel4D")
+        pytest.skip("sample on Panel4D")
 
     def test_to_xarray(self):
 
diff --git a/pandas/tests/test_internals.py b/pandas/tests/test_internals.py
index 1dfea168c..f086935df 100644
--- a/pandas/tests/test_internals.py
+++ b/pandas/tests/test_internals.py
@@ -3,7 +3,7 @@
 
 from datetime import datetime, date
 
-import nose
+import pytest
 import numpy as np
 
 import re
@@ -276,7 +276,7 @@ class TestBlock(tm.TestCase):
 
         # with dup column support this method was taken out
         # GH3679
-        raise nose.SkipTest("skipping for now")
+        pytest.skip("skipping for now")
 
         bs = list(self.fblock.split_block_at('a'))
         self.assertEqual(len(bs), 1)
diff --git a/pandas/tests/test_msgpack/test_unpack.py b/pandas/tests/test_msgpack/test_unpack.py
index a182c676a..ae8227ab2 100644
--- a/pandas/tests/test_msgpack/test_unpack.py
+++ b/pandas/tests/test_msgpack/test_unpack.py
@@ -2,7 +2,7 @@ from io import BytesIO
 import sys
 from pandas.msgpack import Unpacker, packb, OutOfData, ExtType
 import pandas.util.testing as tm
-import nose
+import pytest
 
 
 class TestUnpack(tm.TestCase):
@@ -19,7 +19,7 @@ class TestUnpack(tm.TestCase):
 
     def test_unpacker_hook_refcnt(self):
         if not hasattr(sys, 'getrefcount'):
-            raise nose.SkipTest('no sys.getrefcount()')
+            pytest.skip('no sys.getrefcount()')
         result = []
 
         def hook(x):
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index 1fe2d701f..8e0628eef 100755
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -3,7 +3,7 @@
 from warnings import catch_warnings
 import datetime
 import itertools
-import nose
+import pytest
 
 from numpy.random import randn
 import numpy as np
@@ -1733,7 +1733,7 @@ Thur,Lunch,Yes,51.51,17"""
     # AMBIGUOUS CASES!
 
     def test_partial_ix_missing(self):
-        raise nose.SkipTest("skipping for now")
+        pytest.skip("skipping for now")
 
         result = self.ymd.loc[2000, 0]
         expected = self.ymd.loc[2000]['A']
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 4f56419b1..2f329f241 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -4,7 +4,7 @@
 from datetime import datetime
 
 import operator
-import nose
+import pytest
 
 import numpy as np
 import pandas as pd
@@ -97,7 +97,7 @@ class SafeForLongAndSparse(object):
         try:
             from scipy.stats import skew
         except ImportError:
-            raise nose.SkipTest("no scipy.stats.skew")
+            pytest.skip("no scipy.stats.skew")
 
         def this_skew(x):
             if len(x) < 3:
@@ -2059,7 +2059,7 @@ class TestPanel(tm.TestCase, PanelTests, CheckIndexing, SafeForLongAndSparse,
             import openpyxl  # noqa
             from pandas.io.excel import ExcelFile
         except ImportError:
-            raise nose.SkipTest("need xlwt xlrd openpyxl")
+            pytest.skip("need xlwt xlrd openpyxl")
 
         for ext in ['xls', 'xlsx']:
             with ensure_clean('__tmp__.' + ext) as path:
@@ -2067,7 +2067,7 @@ class TestPanel(tm.TestCase, PanelTests, CheckIndexing, SafeForLongAndSparse,
                 try:
                     reader = ExcelFile(path)
                 except ImportError:
-                    raise nose.SkipTest("need xlwt xlrd openpyxl")
+                    pytest.skip("need xlwt xlrd openpyxl")
 
                 for item, df in self.panel.iteritems():
                     recdf = reader.parse(str(item), index_col=0)
@@ -2079,14 +2079,14 @@ class TestPanel(tm.TestCase, PanelTests, CheckIndexing, SafeForLongAndSparse,
             import xlsxwriter  # noqa
             from pandas.io.excel import ExcelFile
         except ImportError:
-            raise nose.SkipTest("Requires xlrd and xlsxwriter. Skipping test.")
+            pytest.skip("Requires xlrd and xlsxwriter. Skipping test.")
 
         with ensure_clean('__tmp__.xlsx') as path:
             self.panel.to_excel(path, engine='xlsxwriter')
             try:
                 reader = ExcelFile(path)
             except ImportError as e:
-                raise nose.SkipTest("cannot write excel file: %s" % e)
+                pytest.skip("cannot write excel file: %s" % e)
 
             for item, df in self.panel.iteritems():
                 recdf = reader.parse(str(item), index_col=0)
diff --git a/pandas/tests/test_panel4d.py b/pandas/tests/test_panel4d.py
index 96864c626..902b42e7d 100644
--- a/pandas/tests/test_panel4d.py
+++ b/pandas/tests/test_panel4d.py
@@ -2,7 +2,7 @@
 from datetime import datetime
 from pandas.compat import range, lrange
 import operator
-import nose
+import pytest
 
 import numpy as np
 
@@ -66,7 +66,7 @@ class SafeForLongAndSparse(object):
         try:
             from scipy.stats import skew
         except ImportError:
-            raise nose.SkipTest("no scipy.stats.skew")
+            pytest.skip("no scipy.stats.skew")
 
         def this_skew(x):
             if len(x) < 3:
diff --git a/pandas/tests/test_testing.py b/pandas/tests/test_testing.py
index 466e9ee5a..07bfdc8fc 100644
--- a/pandas/tests/test_testing.py
+++ b/pandas/tests/test_testing.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 import pandas as pd
 import unittest
-import nose
+import pytest
 import numpy as np
 import sys
 from pandas import Series, DataFrame
@@ -10,8 +10,7 @@ from pandas.util.testing import (assert_almost_equal, assertRaisesRegexp,
                                  raise_with_traceback, assert_index_equal,
                                  assert_series_equal, assert_frame_equal,
                                  assert_numpy_array_equal,
-                                 RNGContext, assertRaises,
-                                 skip_if_no_package_deco)
+                                 RNGContext)
 from pandas.compat import is_platform_windows
 
 # let's get meta.
@@ -167,8 +166,8 @@ class TestAssertNumpyArrayEqual(tm.TestCase):
     def test_numpy_array_equal_message(self):
 
         if is_platform_windows():
-            raise nose.SkipTest("windows has incomparable line-endings "
-                                "and uses L on the shape")
+            pytest.skip("windows has incomparable line-endings "
+                        "and uses L on the shape")
 
         expected = """numpy array are different
 
@@ -295,8 +294,8 @@ Index shapes are different
     def test_numpy_array_equal_object_message(self):
 
         if is_platform_windows():
-            raise nose.SkipTest("windows has incomparable line-endings "
-                                "and uses L on the shape")
+            pytest.skip("windows has incomparable line-endings "
+                        "and uses L on the shape")
 
         a = np.array([pd.Timestamp('2011-01-01'), pd.Timestamp('2011-01-01')])
         b = np.array([pd.Timestamp('2011-01-01'), pd.Timestamp('2011-01-02')])
@@ -772,27 +771,9 @@ class TestLocale(tm.TestCase):
 
     def test_locale(self):
         if sys.platform == 'win32':
-            raise nose.SkipTest(
+            pytest.skip(
                 "skipping on win platforms as locale not available")
 
         # GH9744
         locales = tm.get_locales()
         self.assertTrue(len(locales) >= 1)
-
-
-def test_skiptest_deco():
-    from nose import SkipTest
-
-    @skip_if_no_package_deco("fakepackagename")
-    def f():
-        pass
-    with assertRaises(SkipTest):
-        f()
-
-    @skip_if_no_package_deco("numpy")
-    def f():
-        pass
-    # hack to ensure that SkipTest is *not* raised
-    with assertRaises(ValueError):
-        f()
-        raise ValueError
diff --git a/pandas/tests/test_window.py b/pandas/tests/test_window.py
index 48861fc6a..3add568c1 100644
--- a/pandas/tests/test_window.py
+++ b/pandas/tests/test_window.py
@@ -1,9 +1,8 @@
 from itertools import product
-import nose
+import pytest
 import sys
 import warnings
 
-from nose.tools import assert_raises
 from datetime import datetime
 from numpy.random import randn
 import numpy as np
@@ -726,7 +725,8 @@ class DatetimeLike(Dtype):
         else:
 
             # other methods not Implemented ATM
-            assert_raises(NotImplementedError, f, roll)
+            with pytest.raises(NotImplementedError):
+                f(roll)
 
 
 class TestDtype_timedelta(DatetimeLike):
@@ -741,8 +741,8 @@ class TestDtype_datetime64UTC(DatetimeLike):
     dtype = 'datetime64[ns, UTC]'
 
     def _create_data(self):
-        raise nose.SkipTest("direct creation of extension dtype "
-                            "datetime64[ns, UTC] is not supported ATM")
+        pytest.skip("direct creation of extension dtype "
+                    "datetime64[ns, UTC] is not supported ATM")
 
 
 class TestMoments(Base):
@@ -1160,7 +1160,7 @@ class TestMoments(Base):
         try:
             from scipy.stats import skew
         except ImportError:
-            raise nose.SkipTest('no scipy')
+            pytest.skip('no scipy')
         self._check_moment_func(mom.rolling_skew,
                                 lambda x: skew(x, bias=False), name='skew')
 
@@ -1168,14 +1168,14 @@ class TestMoments(Base):
         try:
             from scipy.stats import kurtosis
         except ImportError:
-            raise nose.SkipTest('no scipy')
+            pytest.skip('no scipy')
         self._check_moment_func(mom.rolling_kurt,
                                 lambda x: kurtosis(x, bias=False), name='kurt')
 
     def test_fperr_robustness(self):
         # TODO: remove this once python 2.5 out of picture
         if PY3:
-            raise nose.SkipTest("doesn't work on python 3")
+            pytest.skip("doesn't work on python 3")
 
         # #2114
         data = '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1a@\xaa\xaa\xaa\xaa\xaa\xaa\x02@8\x8e\xe38\x8e\xe3\xe8?z\t\xed%\xb4\x97\xd0?\xa2\x0c<\xdd\x9a\x1f\xb6?\x82\xbb\xfa&y\x7f\x9d?\xac\'\xa7\xc4P\xaa\x83?\x90\xdf\xde\xb0k8j?`\xea\xe9u\xf2zQ?*\xe37\x9d\x98N7?\xe2.\xf5&v\x13\x1f?\xec\xc9\xf8\x19\xa4\xb7\x04?\x90b\xf6w\x85\x9f\xeb>\xb5A\xa4\xfaXj\xd2>F\x02\xdb\xf8\xcb\x8d\xb8>.\xac<\xfb\x87^\xa0>\xe8:\xa6\xf9_\xd3\x85>\xfb?\xe2cUU\xfd?\xfc\x7fA\xed8\x8e\xe3?\xa5\xaa\xac\x91\xf6\x12\xca?n\x1cs\xb6\xf9a\xb1?\xe8%D\xf3L-\x97?5\xddZD\x11\xe7~?#>\xe7\x82\x0b\x9ad?\xd9R4Y\x0fxK?;7x;\nP2?N\xf4JO\xb8j\x18?4\xf81\x8a%G\x00?\x9a\xf5\x97\r2\xb4\xe5>\xcd\x9c\xca\xbcB\xf0\xcc>3\x13\x87(\xd7J\xb3>\x99\x19\xb4\xe0\x1e\xb9\x99>ff\xcd\x95\x14&\x81>\x88\x88\xbc\xc7p\xddf>`\x0b\xa6_\x96|N>@\xb2n\xea\x0eS4>U\x98\x938i\x19\x1b>\x8eeb\xd0\xf0\x10\x02>\xbd\xdc-k\x96\x16\xe8=(\x93\x1e\xf2\x0e\x0f\xd0=\xe0n\xd3Bii\xb5=*\xe9\x19Y\x8c\x8c\x9c=\xc6\xf0\xbb\x90]\x08\x83=]\x96\xfa\xc0|`i=>d\xfc\xd5\xfd\xeaP=R0\xfb\xc7\xa7\x8e6=\xc2\x95\xf9_\x8a\x13\x1e=\xd6c\xa6\xea\x06\r\x04=r\xda\xdd8\t\xbc\xea<\xf6\xe6\x93\xd0\xb0\xd2\xd1<\x9d\xdeok\x96\xc3\xb7<&~\xea9s\xaf\x9f<UUUUUU\x13@q\x1c\xc7q\x1c\xc7\xf9?\xf6\x12\xdaKh/\xe1?\xf2\xc3"e\xe0\xe9\xc6?\xed\xaf\x831+\x8d\xae?\xf3\x1f\xad\xcb\x1c^\x94?\x15\x1e\xdd\xbd>\xb8\x02@\xc6\xd2&\xfd\xa8\xf5\xe8?\xd9\xe1\x19\xfe\xc5\xa3\xd0?v\x82"\xa8\xb2/\xb6?\x9dX\x835\xee\x94\x9d?h\x90W\xce\x9e\xb8\x83?\x8a\xc0th~Kj?\\\x80\xf8\x9a\xa9\x87Q?%\xab\xa0\xce\x8c_7?1\xe4\x80\x13\x11*\x1f? \x98\x00\r\xb6\xc6\x04?\x80u\xabf\x9d\xb3\xeb>UNrD\xbew\xd2>\x1c\x13C[\xa8\x9f\xb8>\x12b\xd7<pj\xa0>m-\x1fQ@\xe3\x85>\xe6\x91)l\x00/m>Da\xc6\xf2\xaatS>\x05\xd7]\xee\xe3\xf09>'  # noqa
diff --git a/pandas/tests/tseries/test_converter.py b/pandas/tests/tseries/test_converter.py
index b934aaed7..5351e26f0 100644
--- a/pandas/tests/tseries/test_converter.py
+++ b/pandas/tests/tseries/test_converter.py
@@ -1,3 +1,4 @@
+import pytest
 from datetime import datetime, date
 
 import numpy as np
@@ -7,11 +8,7 @@ import pandas.util.testing as tm
 from pandas.tseries.offsets import Second, Milli, Micro, Day
 from pandas.compat.numpy import np_datetime64_compat
 
-try:
-    import pandas.tseries.converter as converter
-except ImportError:
-    import nose
-    raise nose.SkipTest("no pandas.tseries.converter, skipping")
+converter = pytest.importorskip('pandas.tseries.converter')
 
 
 def test_timtetonum_accepts_unicode():
diff --git a/pandas/tests/tseries/test_offsets.py b/pandas/tests/tseries/test_offsets.py
index 7c5a4c3df..dfa1e94e4 100644
--- a/pandas/tests/tseries/test_offsets.py
+++ b/pandas/tests/tseries/test_offsets.py
@@ -3,8 +3,7 @@ from distutils.version import LooseVersion
 from datetime import date, datetime, timedelta
 from dateutil.relativedelta import relativedelta
 
-import nose
-from nose.tools import assert_raises
+import pytest
 from pandas.compat import range, iteritems
 from pandas import compat
 
@@ -59,7 +58,8 @@ def test_ole2datetime():
     actual = ole2datetime(60000)
     assert actual == datetime(2064, 4, 8)
 
-    assert_raises(ValueError, ole2datetime, 60)
+    with pytest.raises(ValueError):
+        ole2datetime(60)
 
 
 def test_to_datetime1():
@@ -159,7 +159,7 @@ class Base(tm.TestCase):
         except (tslib.OutOfBoundsDatetime):
             raise
         except (ValueError, KeyError) as e:
-            raise nose.SkipTest(
+            pytest.skip(
                 "cannot create out_of_range offset: {0} {1}".format(
                     str(self).split('.')[-1], e))
 
diff --git a/pandas/tools/tests/test_util.py b/pandas/tools/tests/test_util.py
index 0716a13fa..2672db13a 100644
--- a/pandas/tools/tests/test_util.py
+++ b/pandas/tools/tests/test_util.py
@@ -1,7 +1,7 @@
 import os
 import locale
 import codecs
-import nose
+import pytest
 import decimal
 
 import numpy as np
@@ -68,7 +68,7 @@ class TestLocaleUtils(tm.TestCase):
         cls.locales = tm.get_locales()
 
         if not cls.locales:
-            raise nose.SkipTest("No locales found")
+            pytest.skip("No locales found")
 
         tm._skip_if_windows()
 
@@ -83,20 +83,20 @@ class TestLocaleUtils(tm.TestCase):
 
     def test_get_locales_prefix(self):
         if len(self.locales) == 1:
-            raise nose.SkipTest("Only a single locale found, no point in "
-                                "trying to test filtering locale prefixes")
+            pytest.skip("Only a single locale found, no point in "
+                        "trying to test filtering locale prefixes")
         first_locale = self.locales[0]
         assert len(tm.get_locales(prefix=first_locale[:2])) > 0
 
     def test_set_locale(self):
         if len(self.locales) == 1:
-            raise nose.SkipTest("Only a single locale found, no point in "
-                                "trying to test setting another locale")
+            pytest.skip("Only a single locale found, no point in "
+                        "trying to test setting another locale")
 
         if all(x is None for x in CURRENT_LOCALE):
             # Not sure why, but on some travis runs with pytest,
             # getlocale() returned (None, None).
-            raise nose.SkipTest("CURRENT_LOCALE is not set.")
+            pytest.skip("CURRENT_LOCALE is not set.")
 
         if LOCALE_OVERRIDE is None:
             lang, enc = 'it_CH', 'UTF-8'
@@ -456,7 +456,7 @@ class TestToNumeric(tm.TestCase):
         # Test the limits of each downcast. Bug: #14401.
         # Check to make sure numpy is new enough to run this test.
         if _np_version_under1p9:
-            raise nose.SkipTest("Numpy version is under 1.9")
+            pytest.skip("Numpy version is under 1.9")
 
         i = 'integer'
         u = 'unsigned'
diff --git a/pandas/util/decorators.py b/pandas/util/decorators.py
index 85d77c2f6..1b501eb1d 100644
--- a/pandas/util/decorators.py
+++ b/pandas/util/decorators.py
@@ -206,65 +206,6 @@ def suppress_stdout(f):
     return wrapped
 
 
-class KnownFailureTest(Exception):
-    """Raise this exception to mark a test as a known failing test."""
-    pass
-
-
-def knownfailureif(fail_condition, msg=None):
-    """
-    Make function raise KnownFailureTest exception if given condition is true.
-
-    If the condition is a callable, it is used at runtime to dynamically
-    make the decision. This is useful for tests that may require costly
-    imports, to delay the cost until the test suite is actually executed.
-
-    Parameters
-    ----------
-    fail_condition : bool or callable
-        Flag to determine whether to mark the decorated test as a known
-        failure (if True) or not (if False).
-    msg : str, optional
-        Message to give on raising a KnownFailureTest exception.
-        Default is None.
-
-    Returns
-    -------
-    decorator : function
-        Decorator, which, when applied to a function, causes SkipTest
-        to be raised when `skip_condition` is True, and the function
-        to be called normally otherwise.
-
-    Notes
-    -----
-    The decorator itself is decorated with the ``nose.tools.make_decorator``
-    function in order to transmit function name, and various other metadata.
-
-    """
-    if msg is None:
-        msg = 'Test skipped due to known failure'
-
-    # Allow for both boolean or callable known failure conditions.
-    if callable(fail_condition):
-        fail_val = fail_condition
-    else:
-        fail_val = lambda: fail_condition
-
-    def knownfail_decorator(f):
-        # Local import to avoid a hard nose dependency and only incur the
-        # import time overhead at actual test-time.
-        import nose
-
-        def knownfailer(*args, **kwargs):
-            if fail_val():
-                raise KnownFailureTest(msg)
-            else:
-                return f(*args, **kwargs)
-        return nose.tools.make_decorator(f)(knownfailer)
-
-    return knownfail_decorator
-
-
 def make_signature(func):
     """
     Returns a string repr of the arg list of a func call, with any defaults
diff --git a/pandas/util/print_versions.py b/pandas/util/print_versions.py
index c3962ad9c..7c5148caf 100644
--- a/pandas/util/print_versions.py
+++ b/pandas/util/print_versions.py
@@ -63,7 +63,7 @@ def show_versions(as_json=False):
     deps = [
         # (MODULE_NAME, f(mod) -> mod version)
         ("pandas", lambda mod: mod.__version__),
-        ("nose", lambda mod: mod.__version__),
+        ("pytest", lambda mod: mod.__version__),
         ("pip", lambda mod: mod.__version__),
         ("setuptools", lambda mod: mod.__version__),
         ("Cython", lambda mod: mod.__version__),
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index c3633c945..566ceec02 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -248,9 +248,9 @@ def close(fignum=None):
 
 
 def _skip_if_32bit():
-    import nose
+    import pytest
     if is_platform_32bit():
-        raise nose.SkipTest("skipping for 32 bit")
+        pytest.skip("skipping for 32 bit")
 
 
 def mplskip(cls):
@@ -262,8 +262,8 @@ def mplskip(cls):
             import matplotlib as mpl
             mpl.use("Agg", warn=False)
         except ImportError:
-            import nose
-            raise nose.SkipTest("matplotlib not installed")
+            import pytest
+            pytest.skip("matplotlib not installed")
 
     cls.setUpClass = setUpClass
     return cls
@@ -273,102 +273,102 @@ def _skip_if_no_mpl():
     try:
         import matplotlib  # noqa
     except ImportError:
-        import nose
-        raise nose.SkipTest("matplotlib not installed")
+        import pytest
+        pytest.skip("matplotlib not installed")
 
 
 def _skip_if_mpl_1_5():
     import matplotlib
     v = matplotlib.__version__
     if v > LooseVersion('1.4.3') or v[0] == '0':
-        import nose
-        raise nose.SkipTest("matplotlib 1.5")
+        import pytest
+        pytest.skip("matplotlib 1.5")
 
 
 def _skip_if_no_scipy():
     try:
         import scipy.stats  # noqa
     except ImportError:
-        import nose
-        raise nose.SkipTest("no scipy.stats module")
+        import pytest
+        pytest.skip("no scipy.stats module")
     try:
         import scipy.interpolate  # noqa
     except ImportError:
-        import nose
-        raise nose.SkipTest('scipy.interpolate missing')
+        import pytest
+        pytest.skip('scipy.interpolate missing')
 
 
 def _skip_if_scipy_0_17():
     import scipy
     v = scipy.__version__
     if v >= LooseVersion("0.17.0"):
-        import nose
-        raise nose.SkipTest("scipy 0.17")
+        import pytest
+        pytest.skip("scipy 0.17")
 
 
 def _skip_if_no_lzma():
     try:
         return compat.import_lzma()
     except ImportError:
-        import nose
-        raise nose.SkipTest('need backports.lzma to run')
+        import pytest
+        pytest.skip('need backports.lzma to run')
 
 
 def _skip_if_no_xarray():
     try:
         import xarray
     except ImportError:
-        import nose
-        raise nose.SkipTest("xarray not installed")
+        import pytest
+        pytest.skip("xarray not installed")
 
     v = xarray.__version__
     if v < LooseVersion('0.7.0'):
-        import nose
-        raise nose.SkipTest("xarray not version is too low: {0}".format(v))
+        import pytest
+        pytest.skip("xarray not version is too low: {0}".format(v))
 
 
 def _skip_if_no_pytz():
     try:
         import pytz  # noqa
     except ImportError:
-        import nose
-        raise nose.SkipTest("pytz not installed")
+        import pytest
+        pytest.skip("pytz not installed")
 
 
 def _skip_if_no_dateutil():
     try:
         import dateutil  # noqa
     except ImportError:
-        import nose
-        raise nose.SkipTest("dateutil not installed")
+        import pytest
+        pytest.skip("dateutil not installed")
 
 
 def _skip_if_windows_python_3():
     if PY3 and is_platform_windows():
-        import nose
-        raise nose.SkipTest("not used on python 3/win32")
+        import pytest
+        pytest.skip("not used on python 3/win32")
 
 
 def _skip_if_windows():
     if is_platform_windows():
-        import nose
-        raise nose.SkipTest("Running on Windows")
+        import pytest
+        pytest.skip("Running on Windows")
 
 
 def _skip_if_no_pathlib():
     try:
         from pathlib import Path  # noqa
     except ImportError:
-        import nose
-        raise nose.SkipTest("pathlib not available")
+        import pytest
+        pytest.skip("pathlib not available")
 
 
 def _skip_if_no_localpath():
     try:
         from py.path import local as LocalPath  # noqa
     except ImportError:
-        import nose
-        raise nose.SkipTest("py.path not installed")
+        import pytest
+        pytest.skip("py.path not installed")
 
 
 def _incompat_bottleneck_version(method):
@@ -392,27 +392,27 @@ def skip_if_no_ne(engine='numexpr'):
 
     if engine == 'numexpr':
         if not _USE_NUMEXPR:
-            import nose
-            raise nose.SkipTest("numexpr enabled->{enabled}, "
-                                "installed->{installed}".format(
-                                    enabled=_USE_NUMEXPR,
-                                    installed=_NUMEXPR_INSTALLED))
+            import pytest
+            pytest.skip("numexpr enabled->{enabled}, "
+                        "installed->{installed}".format(
+                            enabled=_USE_NUMEXPR,
+                            installed=_NUMEXPR_INSTALLED))
 
 
 def _skip_if_has_locale():
     import locale
     lang, _ = locale.getlocale()
     if lang is not None:
-        import nose
-        raise nose.SkipTest("Specific locale is set {0}".format(lang))
+        import pytest
+        pytest.skip("Specific locale is set {0}".format(lang))
 
 
 def _skip_if_not_us_locale():
     import locale
     lang, _ = locale.getlocale()
     if lang != 'en_US':
-        import nose
-        raise nose.SkipTest("Specific locale is set {0}".format(lang))
+        import pytest
+        pytest.skip("Specific locale is set {0}".format(lang))
 
 # -----------------------------------------------------------------------------
 # locale utilities
@@ -662,8 +662,8 @@ def ensure_clean(filename=None, return_filelike=False):
         try:
             fd, filename = tempfile.mkstemp(suffix=filename)
         except UnicodeEncodeError:
-            import nose
-            raise nose.SkipTest('no unicode file names on this system')
+            import pytest
+            pytest.skip('no unicode file names on this system')
 
         try:
             yield filename
@@ -1997,9 +1997,7 @@ class TestSubDict(dict):
 
 # Dependency checks.  Copied this from Nipy/Nipype (Copyright of
 # respective developers, license: BSD-3)
-def package_check(pkg_name, version=None, app='pandas', checker=LooseVersion,
-                  exc_failed_import=ImportError,
-                  exc_failed_check=RuntimeError):
+def package_check(pkg_name, version=None, app='pandas', checker=LooseVersion):
     """Check that the minimal version of the required package is installed.
 
     Parameters
@@ -2015,10 +2013,6 @@ def package_check(pkg_name, version=None, app='pandas', checker=LooseVersion,
     checker : object, optional
         The class that will perform the version checking.  Default is
         distutils.version.LooseVersion.
-    exc_failed_import : Exception, optional
-        Class of the exception to be thrown if import failed.
-    exc_failed_check : Exception, optional
-        Class of the exception to be thrown if version check failed.
 
     Examples
     --------
@@ -2027,6 +2021,7 @@ def package_check(pkg_name, version=None, app='pandas', checker=LooseVersion,
 
     """
 
+    import pytest
     if app:
         msg = '%s requires %s' % (app, pkg_name)
     else:
@@ -2036,46 +2031,24 @@ def package_check(pkg_name, version=None, app='pandas', checker=LooseVersion,
     try:
         mod = __import__(pkg_name)
     except ImportError:
-        raise exc_failed_import(msg)
-    if not version:
-        return
+        mod = None
     try:
         have_version = mod.__version__
     except AttributeError:
-        raise exc_failed_check('Cannot find version for %s' % pkg_name)
-    if checker(have_version) < checker(version):
-        raise exc_failed_check(msg)
+        pytest.skip('Cannot find version for %s' % pkg_name)
+    if version and checker(have_version) < checker(version):
+        pytest.skip(msg)
 
 
 def skip_if_no_package(*args, **kwargs):
-    """Raise SkipTest if package_check fails
+    """pytest.skip() if package_check fails
 
     Parameters
     ----------
     *args Positional parameters passed to `package_check`
     *kwargs Keyword parameters passed to `package_check`
     """
-    from nose import SkipTest
-    package_check(exc_failed_import=SkipTest,
-                  exc_failed_check=SkipTest,
-                  *args, **kwargs)
-
-
-def skip_if_no_package_deco(pkg_name, version=None, app='pandas'):
-    from nose import SkipTest
-
-    def deco(func):
-        @wraps(func)
-        def wrapper(*args, **kwargs):
-            package_check(pkg_name, version=version, app=app,
-                          exc_failed_import=SkipTest,
-                          exc_failed_check=SkipTest)
-            return func(*args, **kwargs)
-        return wrapper
-    return deco
-#
-# Additional tags decorators for nose
-#
+    package_check(*args, **kwargs)
 
 
 def optional_args(decorator):
@@ -2255,18 +2228,17 @@ def network(t, url="http://www.google.com",
         >>> test_something()
         Traceback (most recent call last):
             ...
-        SkipTest
 
     Errors not related to networking will always be raised.
     """
-    from nose import SkipTest
+    from pytest import skip
     t.network = True
 
     @wraps(t)
     def wrapper(*args, **kwargs):
         if check_before_test and not raise_on_error:
             if not can_connect(url, error_classes):
-                raise SkipTest
+                skip()
         try:
             return t(*args, **kwargs)
         except Exception as e:
@@ -2275,8 +2247,8 @@ def network(t, url="http://www.google.com",
                 errno = getattr(e.reason, 'errno', None)
 
             if errno in skip_errnos:
-                raise SkipTest("Skipping test due to known errno"
-                               " and error %s" % e)
+                skip("Skipping test due to known errno"
+                     " and error %s" % e)
 
             try:
                 e_str = traceback.format_exc(e)
@@ -2284,8 +2256,8 @@ def network(t, url="http://www.google.com",
                 e_str = str(e)
 
             if any([m.lower() in e_str.lower() for m in _skip_on_messages]):
-                raise SkipTest("Skipping test because exception "
-                               "message is known and error %s" % e)
+                skip("Skipping test because exception "
+                     "message is known and error %s" % e)
 
             if not isinstance(e, error_classes):
                 raise
@@ -2293,8 +2265,8 @@ def network(t, url="http://www.google.com",
             if raise_on_error or can_connect(url, error_classes):
                 raise
             else:
-                raise SkipTest("Skipping test due to lack of connectivity"
-                               " and error %s" % e)
+                skip("Skipping test due to lack of connectivity"
+                     " and error %s" % e)
 
     return wrapper
 
@@ -2775,8 +2747,8 @@ def set_timezone(tz):
     'EDT'
     """
     if is_platform_windows():
-        import nose
-        raise nose.SkipTest("timezone setting not supported on windows")
+        import pytest
+        pytest.skip("timezone setting not supported on windows")
 
     import os
     import time
diff --git a/setup.cfg b/setup.cfg
index 143470f7e..45d98dd73 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -12,7 +12,7 @@ tag_prefix = v
 parentdir_prefix = pandas-
 
 [flake8]
-ignore = E731
+ignore = E731,E402
 
 [yapf]
 based_on_style = pep8
