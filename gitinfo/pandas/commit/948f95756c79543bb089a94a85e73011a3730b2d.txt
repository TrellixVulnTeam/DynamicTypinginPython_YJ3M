commit 948f95756c79543bb089a94a85e73011a3730b2d
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Thu Jan 30 19:03:02 2020 -0800

    BUG: ser.at match ser.loc with Float64Index (#31329)

diff --git a/doc/source/whatsnew/v1.1.0.rst b/doc/source/whatsnew/v1.1.0.rst
index 920919755..0aba9de7d 100644
--- a/doc/source/whatsnew/v1.1.0.rst
+++ b/doc/source/whatsnew/v1.1.0.rst
@@ -148,7 +148,7 @@ Indexing
 ^^^^^^^^
 - Bug in slicing on a :class:`DatetimeIndex` with a partial-timestamp dropping high-resolution indices near the end of a year, quarter, or month (:issue:`31064`)
 - Bug in :meth:`PeriodIndex.get_loc` treating higher-resolution strings differently from :meth:`PeriodIndex.get_value` (:issue:`31172`)
--
+- Bug in :meth:`Series.at` and :meth:`DataFrame.at` not matching ``.loc`` behavior when looking up an integer in a :class:`Float64Index` (:issue:`31329`)
 
 Missing
 ^^^^^^^
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 6a6797082..7e56148b7 100755
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -2124,7 +2124,7 @@ class _AtIndexer(_ScalarAccessIndexer):
                         "can only have integer indexers"
                     )
             else:
-                if is_integer(i) and not ax.holds_integer():
+                if is_integer(i) and not (ax.holds_integer() or ax.is_floating()):
                     raise ValueError(
                         "At based indexing on an non-integer "
                         "index can only have non-integer "
diff --git a/pandas/tests/indexes/test_numeric.py b/pandas/tests/indexes/test_numeric.py
index b83ceb1ce..992a91ad8 100644
--- a/pandas/tests/indexes/test_numeric.py
+++ b/pandas/tests/indexes/test_numeric.py
@@ -402,7 +402,7 @@ class TestFloat64Index(Numeric):
     )
     def test_lookups_datetimelike_values(self, vals):
         # If we have datetime64 or timedelta64 values, make sure they are
-        #  wrappped correctly
+        #  wrappped correctly  GH#31163
         ser = pd.Series(vals, index=range(3, 6))
         ser.index = ser.index.astype("float64")
 
@@ -425,7 +425,9 @@ class TestFloat64Index(Numeric):
 
         result = ser.at[4.0]
         assert isinstance(result, type(expected)) and result == expected
-        # Note: ser.at[4] raises ValueError; TODO: should we make this match loc?
+        # GH#31329 .at[4] should cast to 4.0, matching .loc behavior
+        result = ser.at[4]
+        assert isinstance(result, type(expected)) and result == expected
 
         result = ser.iloc[1]
         assert isinstance(result, type(expected)) and result == expected
