commit 90db25605116d967d2675451d32a32257624cf2d
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Aug 16 19:00:49 2011 -0400

    TST: unit test for Cython group mean and added similar NA fix

diff --git a/pandas/src/groupby.pyx b/pandas/src/groupby.pyx
index b791b1f11..f7a58d1c9 100644
--- a/pandas/src/groupby.pyx
+++ b/pandas/src/groupby.pyx
@@ -331,6 +331,13 @@ cdef double_t _group_mean(double_t *out, int32_t *counts, double_t *values,
         double_t val, cum = 0
 
     while it < end:
+        i = labels[it]
+
+        # mapping was NaN
+        if i == -1:
+            it += 1
+            continue
+
         val = values[it]
         tot += 1
 
@@ -339,7 +346,6 @@ cdef double_t _group_mean(double_t *out, int32_t *counts, double_t *values,
             count += 1
             cum += val
 
-        i = labels[it]
         if it == end - 1 or labels[it + 1] > i:
             if count == 0:
                 out[offset + i] = nan
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 16ef85405..e370f4635 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -370,23 +370,27 @@ class TestGroupBy(unittest.TestCase):
         df = DataFrame([0])
         self.assertRaises(Exception, df.groupby, lambda x: x + 'foo')
 
-    def test_sum(self):
+    def test_cythonized_aggers(self):
         data = {'A' : [0, 0, 0, 0, 1, 1, 1, 1, 1, 1., nan, nan],
                 'B' : ['A', 'B'] * 6,
                 'C' : np.random.randn(12)}
         df = DataFrame(data)
         df['C'][2:10:2] = nan
 
-        # single column
-        grouped = df.drop(['B'], axis=1).groupby('A')
-        exp = {}
-        for cat, group in grouped:
-            exp[cat] = group['C'].sum()
-        exp = DataFrame({'C' : exp})
-        result = grouped.sum()
-        assert_frame_equal(result, exp)
+        def _testit(op):
+            # single column
+            grouped = df.drop(['B'], axis=1).groupby('A')
+            exp = {}
+            for cat, group in grouped:
+                exp[cat] = op(group['C'])
+            exp = DataFrame({'C' : exp})
+            result = op(grouped)
+            assert_frame_equal(result, exp)
 
-        # multiple columns
+            # multiple columns
+
+        _testit(lambda x: x.sum())
+        _testit(lambda x: x.mean())
 
 class TestPanelGroupBy(unittest.TestCase):
 
