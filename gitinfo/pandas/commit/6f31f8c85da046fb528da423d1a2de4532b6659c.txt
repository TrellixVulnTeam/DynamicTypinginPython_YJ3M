commit 6f31f8c85da046fb528da423d1a2de4532b6659c
Author: Abraham Flaxman <abie@alum.mit.edu>
Date:   Sat Oct 6 16:38:09 2012 -0700

    ENH: allow to_csv to save nans and infs

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 40e959e9d..8d21847e6 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1105,7 +1105,9 @@ class DataFrame(NDFrame):
             for i, col in enumerate(cols):
                 val = series[col][j]
                 if lib.checknull(val):
-                    val = na_rep
+                    # HACK: special-case option for including nan, inf, -inf in csv
+                    if na_rep != 'nans_and_infs':
+                        val = na_rep
 
                 if float_format is not None and com.is_float(val):
                     val = float_format % val
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 920bc8945..60ac6b3ad 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3382,16 +3382,29 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         os.remove(path)
 
-    def test_to_csv_from_csv_w_infs(self):
+    def test_to_csv_from_csv_w_some_infs(self):
         path = '__tmp__'
 
         # test roundtrip with inf, -inf, nan, as full columns and mix
-        self.frame['E'] = np.inf
-        self.frame['F'] = -np.inf
         self.frame['G'] = np.nan
         self.frame['H'] = self.frame.index.map(lambda x: [np.inf, np.nan][np.random.rand() < .5])
 
-        self.frame.to_csv(path)
+        self.frame.to_csv(path, na_rep='nans_and_infs')
+        recons = DataFrame.from_csv(path)
+
+        assert_frame_equal(self.frame, recons)
+        assert_frame_equal(np.isinf(self.frame), np.isinf(recons))
+
+        os.remove(path)
+
+    def test_to_csv_from_csv_w_all_infs(self):
+        path = '__tmp__'
+
+        # test roundtrip with inf, -inf, nan, as full columns and mix
+        self.frame['E'] = np.inf
+        self.frame['F'] = -np.inf
+
+        self.frame.to_csv(path, na_rep='nans_and_infs')
         recons = DataFrame.from_csv(path)
 
         assert_frame_equal(self.frame, recons)
