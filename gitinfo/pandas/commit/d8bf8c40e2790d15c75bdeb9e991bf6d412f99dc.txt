commit d8bf8c40e2790d15c75bdeb9e991bf6d412f99dc
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jul 28 19:05:35 2011 -0400

    TST: unit test suite passes with refactored LongPanel

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index fb6b0db98..69bb008d7 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1399,7 +1399,7 @@ class DataFrame(NDFrame):
             items = [values]
             mat = np.atleast_2d(self[values].values).T
 
-        lp = LongPanel(mat, items, long_index)
+        lp = LongPanel(mat, index=long_index, columns=items)
         lp = lp.sort()
 
         wp = lp.to_wide()
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index c8a50b8a8..aec930bc9 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -981,6 +981,10 @@ class LongPanel(Panel, DataFrame):
     def items(self):
         return self.columns
 
+    @property
+    def _constructor(self):
+        return LongPanel
+
     def __len__(self):
         return len(self.index)
 
@@ -1759,8 +1763,8 @@ def _make_long_index(major_values, minor_values):
     major_labels, _ = _tseries.getMergeVec(major_values, major_axis.indexMap)
     minor_labels, _ = _tseries.getMergeVec(minor_values, minor_axis.indexMap)
 
-    long_index = LongPanelIndex([major_axis, minor_axis],
-                                [major_labels, minor_labels])
+    long_index = LongPanelIndex(levels=[major_axis, minor_axis],
+                                labels=[major_labels, minor_labels])
     return long_index
 
 def _slow_pivot(index, columns, values):
diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index 30d237d6c..2ce86128f 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -1174,10 +1174,11 @@ def stack_sparse_frame(frame):
 
     major_labels = np.concatenate(inds_to_concat)
     stacked_values = np.concatenate(vals_to_concat)
-    index = LongPanelIndex(frame.index, frame.columns,
-                           major_labels, minor_labels)
+    index = LongPanelIndex(levels=[frame.index, frame.columns],
+                           labels=[major_labels, minor_labels])
 
-    lp = LongPanel(stacked_values.reshape((nobs, 1)), ['foo'], index)
+    lp = LongPanel(stacked_values.reshape((nobs, 1)), index=index,
+                   columns=['foo'])
     return lp.sort('major')
 
 def _stack_sparse_info(frame):
@@ -1423,10 +1424,10 @@ class SparseWidePanel(WidePanel):
         major_labels = inds % N
         minor_labels = inds // N
 
-        index = LongPanelIndex(self.major_axis, self.minor_axis,
-                               major_labels, minor_labels)
+        index = LongPanelIndex(levels=[self.major_axis, self.minor_axis],
+                               labels=[major_labels, minor_labels])
 
-        lp = LongPanel(values, self.items, index)
+        lp = LongPanel(values, index=index, columns=self.items)
         return lp.sort('major')
 
     def reindex(self, major=None, items=None, minor=None, major_axis=None,
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 1df66714a..b77e30939 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -418,9 +418,9 @@ class HDFStore(object):
         minor_labels = _read_array(group, 'minor_labels')
         values = _read_array(group, 'values')
 
-        index = LongPanelIndex(major_axis, minor_axis,
-                               major_labels, minor_labels)
-        return LongPanel(values, items, index)
+        index = LongPanelIndex(levels=[major_axis, minor_axis],
+                               labels=[major_labels, minor_labels])
+        return LongPanel(values, index=index, columns=items)
 
     def _write_index(self, group, key, value):
         # don't care about type here
@@ -565,7 +565,8 @@ class HDFStore(object):
         # reconstruct
         long_index = _make_long_index(np.asarray(index),
                                       np.asarray(columns))
-        lp = LongPanel(sel.values['values'], fields, long_index)
+        lp = LongPanel(sel.values['values'], index=long_index,
+                       columns=fields)
         lp = lp.sort()
         wp = lp.to_wide()
 
diff --git a/pandas/stats/ols.py b/pandas/stats/ols.py
index d7d1c2ec9..9f0882e26 100644
--- a/pandas/stats/ols.py
+++ b/pandas/stats/ols.py
@@ -10,7 +10,7 @@ from StringIO import StringIO
 import numpy as np
 
 from pandas.core.api import DataFrame, Series
-from pandas.core.panel import WidePanel
+from pandas.core.panel import WidePanel, LongPanel
 from pandas.util.decorators import cache_readonly
 import pandas.stats.common as common
 import pandas.stats.math as math
@@ -740,13 +740,12 @@ class MovingOLS(OLS):
         valid = self._time_has_obs
         cum_xx = []
 
-        if isinstance(x, DataFrame):
+        slicer = lambda df, dt: df.truncate(dt, dt).values
+        if isinstance(x, DataFrame) and not isinstance(x, LongPanel):
             _get_index = x.index.get_loc
             def slicer(df, dt):
                 i = _get_index(dt)
                 return df.values[i:i+1, :]
-        else:
-            slicer = lambda df, dt: df.truncate(dt, dt).values
 
         last = np.zeros((K, K))
         for i, date in enumerate(dates):
@@ -765,14 +764,12 @@ class MovingOLS(OLS):
         valid = self._time_has_obs
         cum_xy = []
 
-        if isinstance(x, DataFrame):
+        x_slicer = lambda df, dt: df.truncate(dt, dt).values
+        if isinstance(x, DataFrame) and not isinstance(x, LongPanel):
             _get_index = x.index.get_loc
             def x_slicer(df, dt):
                 i = _get_index(dt)
                 return df.values[i:i+1]
-        else:
-            x_slicer = lambda df, dt: df.truncate(dt, dt).values
-
 
         if isinstance(y, Series):
             _y_get_index = y.index.get_loc
diff --git a/pandas/stats/plm.py b/pandas/stats/plm.py
index 711f76348..a5f693eb9 100644
--- a/pandas/stats/plm.py
+++ b/pandas/stats/plm.py
@@ -177,15 +177,15 @@ class PanelOLS(OLS):
         x_filt = filtered.filter(x_names)
 
         if self._weights:
-            weights_filt = filtered['__weights__']
+            weights_filt = filtered.ix[:, ['__weights__']]
         else:
             weights_filt = None
 
         x = data_long.filter(x_names)
-        y = data_long['__y__']
+        y = data_long.ix[:, ['__y__']]
 
         if self._weights:
-            weights = data_long['__weights__']
+            weights = data_long.ix[:, ['__weights__']]
         else:
             weights = None
 
@@ -490,8 +490,8 @@ class PanelOLS(OLS):
     def _unstack_vector(self, vec, index=None):
         if index is None:
             index = self._y_trans.index
-        panel = LongPanel(vec.reshape((len(vec), 1)), ['dummy'],
-                          index=index)
+        panel = LongPanel(vec.reshape((len(vec), 1)), index=index,
+                          columns=['dummy'])
 
         return panel.to_wide()['dummy']
 
@@ -526,7 +526,8 @@ def _convertDummies(dummies, mapping):
             # renames the dummies if a conversion dict is provided
             new_items.append(mapping[int(item)])
 
-    dummies = LongPanel(dummies.values, new_items, dummies.index)
+    dummies = LongPanel(dummies.values, index=dummies.index,
+                        columns=new_items)
 
     return dummies
 
@@ -878,7 +879,8 @@ def _var_beta_panel(y, x, beta, xx, rmse, cluster_axis,
             return np.dot(xx_inv, np.dot(xeps, xx_inv))
     else:
         Xb = np.dot(x.values, beta).reshape((len(x.values), 1))
-        resid = LongPanel(y.values - Xb, ['resid'], y.index)
+        resid = LongPanel(y.values - Xb, index=y.index,
+                          columns=['resid'])
 
         if cluster_axis == 1:
             x = x.swapaxes()
