commit c261f697c19f6a71816f1cc9809eeddfffa6f4dc
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Apr 28 16:36:43 2012 -0400

    BUG: use own period frequency when converting to timestamp

diff --git a/pandas/core/series.py b/pandas/core/series.py
index b0474f7b2..90095919e 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -2575,13 +2575,13 @@ class TimeSeries(Series):
 
         return Series(new_values, index=new_index, name=self.name)
 
-    def to_timestamp(self, freq='D', how='start', copy=True):
+    def to_timestamp(self, freq=None, how='start', copy=True):
         """
         Cast to datetimeindex of timestamps, at *beginning* of period
 
         Parameters
         ----------
-        freq : string, default 'D'
+        freq : string, default frequency of PeriodIndex
             Desired frequency
         how : {'s', 'e', 'start', 'end'}
             Convention for converting period to timestamp; start of period
diff --git a/pandas/src/groupby.pyx b/pandas/src/groupby.pyx
index 73648e976..becd4e77e 100644
--- a/pandas/src/groupby.pyx
+++ b/pandas/src/groupby.pyx
@@ -562,8 +562,8 @@ def group_var(ndarray[float64_t, ndim=2] out,
 # 1-min data, binner has 5-min data, then  bins are just strides in index. This
 # is a general, O(max(len(values), len(binner))) method.
 
-# @cython.boundscheck(False)
-# @cython.wraparound(False)
+@cython.boundscheck(False)
+@cython.wraparound(False)
 
 def generate_bins_dt64(ndarray[int64_t] values, ndarray[int64_t] binner,
                        object closed='left'):
@@ -614,8 +614,8 @@ def generate_bins_dt64(ndarray[int64_t] values, ndarray[int64_t] binner,
 
 # add passing bin edges, instead of labels
 
-# @cython.boundscheck(False)
-# @cython.wraparound(False)
+@cython.boundscheck(False)
+@cython.wraparound(False)
 def group_add_bin(ndarray[float64_t, ndim=2] out,
                   ndarray[int32_t] counts,
                   ndarray[float64_t, ndim=2] values,
@@ -671,8 +671,8 @@ def group_add_bin(ndarray[float64_t, ndim=2] out,
             else:
                 out[i, j] = sumx[i, j]
 
-# @cython.boundscheck(False)
-# @cython.wraparound(False)
+@cython.boundscheck(False)
+@cython.wraparound(False)
 def group_prod_bin(ndarray[float64_t, ndim=2] out,
                   ndarray[int32_t] counts,
                   ndarray[float64_t, ndim=2] values,
@@ -728,8 +728,8 @@ def group_prod_bin(ndarray[float64_t, ndim=2] out,
             else:
                 out[i, j] = prodx[i, j]
 
-# @cython.boundscheck(False)
-# @cython.wraparound(False)
+@cython.boundscheck(False)
+@cython.wraparound(False)
 def group_min_bin(ndarray[float64_t, ndim=2] out,
                    ndarray[int32_t] counts,
                    ndarray[float64_t, ndim=2] values,
@@ -790,8 +790,8 @@ def group_min_bin(ndarray[float64_t, ndim=2] out,
             else:
                 out[i, j] = minx[i, j]
 
-# @cython.boundscheck(False)
-# @cython.wraparound(False)
+@cython.boundscheck(False)
+@cython.wraparound(False)
 def group_max_bin(ndarray[float64_t, ndim=2] out,
                   ndarray[int32_t] counts,
                   ndarray[float64_t, ndim=2] values,
@@ -852,8 +852,8 @@ def group_max_bin(ndarray[float64_t, ndim=2] out,
                 out[i, j] = maxx[i, j]
 
 
-# @cython.boundscheck(False)
-# @cython.wraparound(False)
+@cython.boundscheck(False)
+@cython.wraparound(False)
 def group_ohlc(ndarray[float64_t, ndim=2] out,
                   ndarray[int32_t] counts,
                   ndarray[float64_t, ndim=2] values,
@@ -927,8 +927,8 @@ def group_ohlc(ndarray[float64_t, ndim=2] out,
             out[b, 3] = vclose
 
 
-# @cython.boundscheck(False)
-# @cython.wraparound(False)
+@cython.boundscheck(False)
+@cython.wraparound(False)
 def group_mean_bin(ndarray[float64_t, ndim=2] out,
                    ndarray[int32_t] counts,
                    ndarray[float64_t, ndim=2] values,
@@ -982,8 +982,8 @@ def group_mean_bin(ndarray[float64_t, ndim=2] out,
             else:
                 out[i, j] = sumx[i, j] / count
 
-# @cython.boundscheck(False)
-# @cython.wraparound(False)
+@cython.boundscheck(False)
+@cython.wraparound(False)
 def group_var_bin(ndarray[float64_t, ndim=2] out,
                   ndarray[int32_t] counts,
                   ndarray[float64_t, ndim=2] values,
diff --git a/pandas/tseries/period.py b/pandas/tseries/period.py
index fca05f88c..c1032c6fe 100644
--- a/pandas/tseries/period.py
+++ b/pandas/tseries/period.py
@@ -199,13 +199,13 @@ class Period(object):
     def end_time(self):
         return self.to_timestamp(how='E')
 
-    def to_timestamp(self, freq='D', how='S'):
+    def to_timestamp(self, freq=None, how='S'):
         """
         Return the Timestamp at the start/end of the period
 
         Parameters
         ----------
-        freq : string or DateOffset, default 'D'
+        freq : string or DateOffset, default frequency of PeriodIndex
             Target frequency
         how: str, default 'S' (start)
             'S', 'E'. Can be aliased as case insensitive
@@ -216,12 +216,15 @@ class Period(object):
         Timestamp
         """
         # how = _validate_end_alias(how)
-
-        base, mult = _gfc(freq)
-        new_val = self.asfreq(freq, how)
-        new_val = lib.period_ordinal_to_dt64(new_val.ordinal, base, mult)
-        ts_freq = _period_rule_to_timestamp_rule(self.freq, how=how)
-        return Timestamp(new_val, offset=to_offset(ts_freq))
+        if freq is None:
+            base, mult = _gfc(self.freq)
+            new_val = self
+        else:
+            base, mult = _gfc(freq)
+            new_val = self.asfreq(freq, how)
+        dt64 = lib.period_ordinal_to_dt64(new_val.ordinal, base, mult)
+        ts_freq = _period_rule_to_timestamp_rule(new_val.freq, how=how)
+        return Timestamp(dt64, offset=to_offset(ts_freq))
 
     year = _period_field_accessor('year')
     month = _period_field_accessor('month')
@@ -612,7 +615,7 @@ class PeriodIndex(Int64Index):
         # how to represent ourselves to matplotlib
         return _period_box_array(self, self.freq)
 
-    def to_timestamp(self, freq='D', how='start'):
+    def to_timestamp(self, freq=None, how='start'):
         """
         Cast to DatetimeIndex
 
@@ -626,8 +629,14 @@ class PeriodIndex(Int64Index):
         -------
         DatetimeIndex
         """
-        base, mult = _gfc(freq)
-        new_data = self.asfreq(freq, how)
+        if freq is None:
+            base, mult = _gfc(self.freq)
+            new_data = self
+            # freq = self.freq
+        else:
+            base, mult = _gfc(freq)
+            new_data = self.asfreq(freq, how)
+            # freq = 'infer'
         new_data = lib.periodarr_to_dt64arr(new_data.values, base, mult)
         return DatetimeIndex(new_data, freq='infer')
 
diff --git a/pandas/tseries/tests/test_period.py b/pandas/tseries/tests/test_period.py
index 95a0f14b8..2ef7e68a8 100644
--- a/pandas/tseries/tests/test_period.py
+++ b/pandas/tseries/tests/test_period.py
@@ -1143,7 +1143,7 @@ class TestPeriodIndex(TestCase):
         self.assert_(ii.to_timestamp().equals(dti))
 
         dti = date_range('1/1/2000', '1/7/2002', freq='B')
-        ii = dti.to_period(freq='3H')
+        ii = dti.to_period(freq='H')
         self.assert_(ii.to_timestamp().equals(dti))
 
     def test_iindex_multiples(self):
