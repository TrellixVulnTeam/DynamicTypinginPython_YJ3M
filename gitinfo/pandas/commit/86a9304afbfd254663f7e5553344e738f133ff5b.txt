commit 86a9304afbfd254663f7e5553344e738f133ff5b
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Dec 20 18:36:19 2011 -0500

    BUG: handle empty list passed to DataFrame.from_records

diff --git a/RELEASE.rst b/RELEASE.rst
index e66f1f053..57ef8408f 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -65,6 +65,7 @@ pandas 0.6.2
     array (GH #490)
   - Return empty string from Series.to_string when called on empty Series (GH
     #488)
+  - Fix exception passing empty list to DataFrame.from_records
 
 Thanks
 ------
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 195515d37..f0e8de7d4 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -3559,11 +3559,15 @@ def _rec_to_dict(arr):
     return columns, sdict
 
 def _list_to_sdict(data, columns):
-    if isinstance(data[0], tuple):
+    if len(data) > 0 and isinstance(data[0], tuple):
         content = list(lib.to_object_array_tuples(data).T)
-    else:
+    elif len(data) > 0:
         # list of lists
         content = list(lib.to_object_array(data).T)
+    else:
+        if columns is None:
+            columns = []
+        return {}, columns
 
     if columns is None:
         columns = range(len(content))
diff --git a/pandas/src/tseries.pyx b/pandas/src/tseries.pyx
index 7b9581945..10a7b7480 100644
--- a/pandas/src/tseries.pyx
+++ b/pandas/src/tseries.pyx
@@ -9,6 +9,7 @@ from cpython cimport (PyDict_New, PyDict_GetItem, PyDict_SetItem,
                       PyTuple_SetItem,
                       PyTuple_New)
 from cpython cimport PyFloat_Check
+cimport cpython
 
 import numpy as np
 isnan = np.isnan
@@ -448,6 +449,23 @@ cpdef is_array(object o):
     return np.PyArray_Check(o)
 
 
+# cdef class TypeConverter:
+#     cdef:
+#         cpython.PyTypeObject* klass_type
+
+#     cdef readonly:
+#         object factory
+#         object klass
+
+#     def __init__(self, object klass, factory):
+#         self.klass_type = (<PyObject*> klass).ob_type
+#         self.factory = factory
+
+#     def convert(self, object obj):
+#         if cpython.PyObject_TypeCheck(obj, self.klass_type):
+#             return obj
+#         return self.factory(obj)
+
 include "skiplist.pyx"
 include "groupby.pyx"
 include "moments.pyx"
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 1951a4347..34f06990d 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1428,6 +1428,15 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         result = DataFrame.from_records(tuples)
         self.assert_(np.array_equal(result.columns, range(4)))
 
+        # empty case
+        result = DataFrame.from_records([], columns=['foo', 'bar', 'baz'])
+        self.assertEqual(len(result), 0)
+        self.assert_(np.array_equal(result.columns, ['foo', 'bar', 'baz']))
+
+        result = DataFrame.from_records([])
+        self.assertEqual(len(result), 0)
+        self.assertEqual(len(result.columns), 0)
+
     def test_get_agg_axis(self):
         cols = self.frame._get_agg_axis(0)
         self.assert_(cols is self.frame.columns)
diff --git a/vb_suite/reindex.py b/vb_suite/reindex.py
index c8f794406..f73536cb8 100644
--- a/vb_suite/reindex.py
+++ b/vb_suite/reindex.py
@@ -13,8 +13,8 @@ df = DataFrame(index=range(10000), data=np.random.rand(10000,30),
 """
 statement = "df.reindex(columns=df.columns[1:5])"
 
-bm_reindex1 = Benchmark(statement, setup,
-                        name='dataframe_reindex_columns')
+reindex_frame_columns = Benchmark(statement, setup,
+                                  name='dataframe_reindex_columns')
 
 #----------------------------------------------------------------------
 
@@ -26,5 +26,24 @@ df['foo'] = 'bar'
 rng2 = Index(rng[::2])
 """
 statement = "df.reindex(rng2)"
-bm_reindex2 = Benchmark(statement, setup,
-                        name='dataframe_reindex_daterange')
+reindex_frame_daterange = Benchmark(statement, setup,
+                                    name='dataframe_reindex_daterange')
+
+#----------------------------------------------------------------------
+# multiindex reindexing
+
+setup = common_setup + """
+N = 1000
+K = 20
+
+level1 = np.array([tm.rands(10) for _ in xrange(N)], dtype='O').repeat(K)
+level2 = np.tile(np.array([tm.rands(10) for _ in xrange(K)], dtype='O'),
+                 N)
+index = MultiIndex.from_arrays([level1, level2])
+
+s1 = Series(np.random.randn(N * K), index=index)
+s2 = s1[::2]
+"""
+statement = "s1.reindex(s2.index)"
+reindex_multi = Benchmark(statement, setup,
+                          name='reindex_multiindex')
diff --git a/vb_suite/run_suite.py b/vb_suite/run_suite.py
index 211c052d8..1cab9065e 100644
--- a/vb_suite/run_suite.py
+++ b/vb_suite/run_suite.py
@@ -2,7 +2,7 @@ from vbench.api import Benchmark, GitRepo, BenchmarkRunner
 from datetime import datetime
 
 modules = ['groupby', 'indexing', 'reindex', 'binary_ops',
-           'sparse']
+           'sparse', 'index_object']
 
 all_benchmarks = []
 for modname in modules:
diff --git a/vb_suite/sparse.py b/vb_suite/sparse.py
index 3acd48e4f..658fdc190 100644
--- a/vb_suite/sparse.py
+++ b/vb_suite/sparse.py
@@ -25,5 +25,5 @@ for i in range(1, K + 1):
 """
 stmt = "SparseDataFrame(series)"
 
-bm_sparse1 = Benchmark(stmt, setup, name="SparseSeries to SparseDataFrame",
+bm_sparse1 = Benchmark(stmt, setup, name="sparse_series_to_frame",
                       start_date=datetime(2011, 6, 1))
