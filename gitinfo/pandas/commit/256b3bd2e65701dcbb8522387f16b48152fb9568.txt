commit 256b3bd2e65701dcbb8522387f16b48152fb9568
Author: jreback <jeff@reback.net>
Date:   Thu Aug 7 19:48:47 2014 -0400

    TST: windows fixes relatd to Index not-subclass-ndarray

diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 416241355..d0045c228 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -1633,9 +1633,7 @@ class TestDatetimeIndex(Base, tm.TestCase):
         if not (_np_version_under1p7 or compat.PY3_2):
             for f in [lambda : np.timedelta64(1, 'D').astype('m8[ns]') * pd.date_range('2000-01-01', periods=3),
                       lambda : pd.date_range('2000-01-01', periods=3) * np.timedelta64(1, 'D').astype('m8[ns]') ]:
-                tm.assertRaisesRegexp(TypeError,
-                                      "cannot perform multiplication with this index type",
-                                      f)
+                self.assertRaises(TypeError, f)
 
 class TestPeriodIndex(Base, tm.TestCase):
     _holder = PeriodIndex
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 01e9e1558..3e5fe1f39 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -5236,9 +5236,12 @@ class TestSeries(tm.TestCase, CheckNameIntegration):
 
         identity = self.series.reindex(self.series.index)
 
-        # the older numpies / 3.2 call __array_inteface__ which we don't define
-        if not _np_version_under1p7 and not PY3_2:
+        # __array_interface__ is not defined for older numpies
+        # and on some pythons
+        try:
             self.assertTrue(np.may_share_memory(self.series.index, identity.index))
+        except (AttributeError):
+            pass
 
         self.assertTrue(identity.index.is_(self.series.index))
         self.assertTrue(identity.index.identical(self.series.index))
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index ce5a2a319..3b8cebcb5 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -88,7 +88,7 @@ def _dt_index_cmp(opname, nat_result=False):
                 other = DatetimeIndex(other)
             elif not isinstance(other, (np.ndarray, Index, ABCSeries)):
                 other = _ensure_datetime64(other)
-            result = func(other)
+            result = func(np.asarray(other))
             result = _values_from_object(result)
 
             if isinstance(other, Index):
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 9487949ad..e651370be 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -34,7 +34,7 @@ from pandas.util.testing import assert_frame_equal
 import pandas.compat as compat
 import pandas.core.common as com
 from pandas import concat
-from pandas import _np_version_under1p7
+from pandas import _np_version_under1p7, _np_version_under1p8
 
 from numpy.testing.decorators import slow
 
@@ -705,7 +705,7 @@ class TestTimeSeries(tm.TestCase):
             df = DataFrame({'ints': np.arange(n)}, index=np.arange(n))
             df[unit] = vals
 
-            ex_vals = to_datetime(vals.astype('O'))
+            ex_vals = to_datetime(vals.astype('O')).values
 
             self.assertEqual(df[unit].dtype, ns_dtype)
             self.assertTrue((df[unit].values == ex_vals).all())
@@ -721,7 +721,7 @@ class TestTimeSeries(tm.TestCase):
             tmp = df.copy()
 
             tmp['dates'] = vals
-            ex_vals = to_datetime(vals.astype('O'))
+            ex_vals = to_datetime(vals.astype('O')).values
 
             self.assertTrue((tmp['dates'].values == ex_vals).all())
 
@@ -2225,7 +2225,7 @@ class TestDatetimeIndex(tm.TestCase):
                          np.datetime64('2014-06-01 00:00Z'),
                          np.datetime64('2014-07-01 00:00Z')])
 
-        if _np_version_under1p7:
+        if _np_version_under1p8:
             # cannot test array because np.datetime('nat') returns today's date
             cases = [(fidx1, fidx2), (didx1, didx2)]
         else:
