commit 35b5aeda394b01203c57e8491197d112bf5feb31
Author: Phillip Cloud <cpcloud@gmail.com>
Date:   Fri May 9 15:08:13 2014 -0400

    BUG: use size attribute (not method call)

diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 2c7f6c5e1..094324d92 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -142,6 +142,11 @@ def _last_compat(x, axis=0):
     else:
         return _last(x)
 
+
+def _count_compat(x, axis=0):
+    return x.size
+
+
 class Grouper(object):
     """
     A Grouper allows the user to specify a groupby instruction for a target object
@@ -721,8 +726,7 @@ class GroupBy(PandasObject):
                               numeric_only=False, _convert=True)
     last = _groupby_function('last', 'last', _last_compat, numeric_only=False,
                              _convert=True)
-
-    _count = _groupby_function('_count', 'count', lambda x, axis=0: x.size(),
+    _count = _groupby_function('_count', 'count', _count_compat,
                                numeric_only=False)
 
     def count(self, axis=0):
@@ -1395,8 +1399,7 @@ class BaseGrouper(object):
                 values = values.astype(object)
 
         # will be filled in Cython function
-        result = np.empty(out_shape,
-                          dtype=np.dtype('f%d' % values.dtype.itemsize))
+        result = np.empty(out_shape, dtype='f%d' % values.dtype.itemsize)
         result.fill(np.nan)
         counts = np.zeros(self.ngroups, dtype=np.int64)
 
@@ -1441,7 +1444,6 @@ class BaseGrouper(object):
                 chunk = chunk.squeeze()
                 agg_func(result[:, :, i], counts, chunk, comp_ids)
         else:
-            #import ipdb; ipdb.set_trace()  # XXX BREAKPOINT
             agg_func(result, counts, values, comp_ids)
 
         return trans_func(result)
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 107bc46da..8b957484f 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -4214,6 +4214,26 @@ class TestGroupBy(tm.TestCase):
                                                            name='grp'))
         tm.assert_frame_equal(result, expected)
 
+    def test_count_uses_size_on_exception(self):
+        class RaisingObjectException(Exception):
+            pass
+
+        class RaisingObject(object):
+            def __init__(self, msg='I will raise inside Cython'):
+                super(RaisingObject, self).__init__()
+                self.msg = msg
+
+            def __eq__(self, other):
+                # gets called in Cython to check that raising calls the method
+                raise RaisingObjectException(self.msg)
+
+        df = DataFrame({'a': [RaisingObject() for _ in range(4)],
+                        'grp': list('ab' * 2)})
+        result = df.groupby('grp').count()
+        expected = DataFrame({'a': [2, 2]}, index=pd.Index(list('ab'),
+                                                           name='grp'))
+        tm.assert_frame_equal(result, expected)
+
 
 def assert_fp_equal(a, b):
     assert (np.abs(a - b) < 1e-12).all()
