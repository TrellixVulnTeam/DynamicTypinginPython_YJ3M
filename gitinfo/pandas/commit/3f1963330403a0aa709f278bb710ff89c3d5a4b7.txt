commit 3f1963330403a0aa709f278bb710ff89c3d5a4b7
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Nov 21 22:23:33 2009 +0000

    set to ignore pyc files
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@43 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/.svnignore b/.svnignore
new file mode 100644
index 000000000..6add511ef
--- /dev/null
+++ b/.svnignore
@@ -0,0 +1,2 @@
+*.pyc
+*~
\ No newline at end of file
diff --git a/examples/regressions.py b/examples/regressions.py
index 129623818..a01df5774 100644
--- a/examples/regressions.py
+++ b/examples/regressions.py
@@ -3,8 +3,8 @@ import string
 
 import numpy as np
 
-from pandas.core.api import DataMatrix, DateRange
-from pandas.stats.linmodel import LinearModel, XSLinearModel
+from pandas.core.api import Series, DataMatrix, DateRange
+from pandas.stats.api import ols
 
 N = 100
 
@@ -18,21 +18,18 @@ def makeDataMatrix():
 
     return data
 
+def makeSeries():
+    return Series(np.random.randn(N), index=dateRange)
+
 #-------------------------------------------------------------------------------
 # Standard rolling linear regression
 
-data = makeDataMatrix()
-model = LinearModel(data, window=100, minPeriods=80)
-model.parseFormula('A ~ B + C + D + E + F + G + I')
-model.fit()
-
-# Extremely basic summary
+X = makeDataMatrix()
+Y =  makeSeries()
 
-model.summary(dateRange[-1])
+model = ols(y=Y, x=X)
 
-print model.beta()
-print model.rsquare()
-print model.tstat()
+print model
 
 #-------------------------------------------------------------------------------
 # Panel regression
@@ -43,8 +40,8 @@ data = {
     'C' : makeDataMatrix()
 }
 
-panelModel = XSLinearModel(data, window=50, minPeriods=20)
-panelModel.parseFormula('A ~ B + C + I')
-panelModel.fit()
+Y = makeDataMatrix()
+
+panelModel = ols(y=Y, x=data, window=50)
 
-# Same diagnostic statistics as per above
+print panelModel
diff --git a/pandas/core/daterange.py b/pandas/core/daterange.py
index e224f4c80..38d5febaf 100644
--- a/pandas/core/daterange.py
+++ b/pandas/core/daterange.py
@@ -1,7 +1,8 @@
-from datetime import datetime
+# pylint: disable-msg=E1101
+# pylint: disable-msg=E1103
 
+from datetime import datetime
 import numpy as np
-
 from pandas.core.index import Index
 from pandas.lib.tseries import map_indices
 import pandas.core.datetools as datetools
@@ -11,22 +12,22 @@ import pandas.core.datetools as datetools
 
 class XDateRange(object):
     """
-    XDateRange/DateRange generate a sequence of dates corresponding to the 
+    XDateRange/DateRange generate a sequence of dates corresponding to the
     specified time interval.
-    
+
     Inputs:
          - toDate and/or fromDate and/or nPeriods (but not all 3)
          - offset: a DateOffset object used to determine the dates returned
-         
+
     Note that if both fromDate and toDate are specified, the returned dates
     will satisfy:
-    
+
     fromDate <= date <= toDate
-            
+
     In other words, dates are constrained to lie in the specifed range as you
-    would expect, though no dates which do NOT lie on the offset will be 
+    would expect, though no dates which do NOT lie on the offset will be
     returned.
-    
+
     NOTE: XDateRange is a generator, use if you do not intend to reuse the date
     range, or if you are doing lazy iteration, or if the number of dates you
     are generating is very large. If you intend to reuse the range,
@@ -35,7 +36,7 @@ class XDateRange(object):
     _cache = {}
     _cacheStart = {}
     _cacheEnd = {}
-    def __init__(self, fromDate=None, toDate=None, nPeriods=None, 
+    def __init__(self, fromDate=None, toDate=None, nPeriods=None,
                  offset=datetools.BDay()):
 
         fromDate = datetools.to_datetime(fromDate)
@@ -51,15 +52,15 @@ class XDateRange(object):
 
         if toDate is None:
             toDate = fromDate + (nPeriods - 1) * offset
-        
+
         if fromDate is None:
             fromDate = toDate - (nPeriods - 1) * offset
-        
+
         self.offset = offset
         self.fromDate = fromDate
         self.toDate = toDate
         self.nPeriods = nPeriods
-        
+
     def __iter__(self):
         offset = self.offset
         cur = self.fromDate
@@ -68,45 +69,45 @@ class XDateRange(object):
         while cur <= self.toDate:
             yield cur
             cur = cur + offset
-            
+
 #-------------------------------------------------------------------------------
-# DateRange cache    
-    
+# DateRange cache
+
 CACHE_START = datetime(1950, 1, 1)
 CACHE_END   = datetime(2030, 1, 1)
-    
+
 def _getIndexLoc(index, date):
     if date in index.indexMap:
         return index.indexMap[date]
     else:
         asOf = index.asOfDate(date)
         return index.indexMap[asOf] + 1
-        
+
 #-------------------------------------------------------------------------------
 # DateRange class
-    
+
 class DateRange(Index):
     """
     Fixed frequency date range according to input parameters.
-    
+
     Input dates satisfy:
         begin <= d <= end, where d lies on the given offset
-    
+
     Parameters
     ----------
     fromDate: {datetime, None}
         left boundary for range
     toDate: {datetime, None}
         right boundary for range
-    periods: int   
+    periods: int
         Number of periods to generate.
     offset: DateOffset, default is 1 BusinessDay
         Used to determine the dates returned
     """
     _cache = {}
-    def __new__(cls, fromDate=None, toDate=None, periods=None, 
+    def __new__(cls, fromDate=None, toDate=None, periods=None,
                 offset=datetools.bday, **kwds):
-        
+
         # Allow us to circumvent hitting the cache
         index = kwds.get('index')
         if index is None:
@@ -122,16 +123,16 @@ class DateRange(Index):
                 index = cls.getCachedRange(fromDate, toDate, periods=periods,
                                            offset=offset)
             else:
-                xdr = XDateRange(fromDate=fromDate, toDate=toDate, 
+                xdr = XDateRange(fromDate=fromDate, toDate=toDate,
                                  nPeriods=periods, offset=offset)
-                
+
                 index = np.array(list(xdr), dtype=object, copy=False)
-                
+
                 index = index.view(cls)
                 index.offset = offset
         else:
             index = index.view(cls)
-        
+
         return index
 
     @classmethod
@@ -141,55 +142,55 @@ class DateRange(Index):
 
         start = datetools.to_datetime(start)
         end = datetools.to_datetime(end)
-        
+
         if start is not None and not isinstance(start, datetime):
             raise Exception('%s is not a valid date!' % start)
-        
+
         if end is not None and not isinstance(end, datetime):
             raise Exception('%s is not a valid date!' % end)
-        
+
         if offset not in cls._cache:
             xdr = XDateRange(CACHE_START, CACHE_END, offset=offset)
             arr = np.array(list(xdr), dtype=object, copy=False)
-            
+
             cachedRange = DateRange.fromIndex(arr)
             cachedRange.offset = offset
-                        
+
             cls._cache[offset] = cachedRange
         else:
             cachedRange = cls._cache[offset]
-        
+
         if start is None:
             if end is None:
                 raise Exception('Must provide start or end date!')
             if periods is None:
                 raise Exception('Must provide number of periods!')
-            
+
             if end not in cachedRange:
                 endLoc = _getIndexLoc(cachedRange, end)
             else:
                 endLoc = cachedRange.indexMap[end] + 1
 
-            startLoc = endLoc - periods            
+            startLoc = endLoc - periods
         elif end is None:
             startLoc = _getIndexLoc(cachedRange, start)
             if periods is None:
                 raise Exception('Must provide number of periods!')
-            
+
             endLoc = startLoc + periods
         else:
             startLoc = _getIndexLoc(cachedRange, start)
-            
+
             if end not in cachedRange:
                 endLoc = _getIndexLoc(cachedRange, end)
             else:
                 endLoc = cachedRange.indexMap[end] + 1
-            
+
         indexSlice = cachedRange[startLoc:endLoc]
         indexSlice._parent = cachedRange
-        
+
         return indexSlice
-    
+
     @classmethod
     def fromIndex(cls, index):
         index = cls(index=index)
@@ -198,16 +199,16 @@ class DateRange(Index):
     def __array_finalize__(self, obj):
         if self.ndim == 0:
             return self.item()
-        
+
         if len(self) > 0:
             self.indexMap = map_indices(self)
         else:
-            self.indexMap = {}        
-        
+            self.indexMap = {}
+
         self.offset = getattr(obj, 'offset', None)
         self._parent = getattr(obj, '_parent',  None)
         self._allDates = True
-        
+
     def __lt__(self, other):
         return self.view(np.ndarray) < other
 
@@ -222,7 +223,7 @@ class DateRange(Index):
 
     def __eq__(self, other):
         return self.view(np.ndarray) == other
-    
+
     def __getitem__(self, key):
         """Override numpy.ndarray's __getitem__ method to work as desired"""
         if isinstance(key, (int, np.int32)):
@@ -230,7 +231,7 @@ class DateRange(Index):
         elif isinstance(key, slice):
             if self.offset is None:
                 return Index.__getitem__(self, key)
-            
+
             if key.step is not None:
                 newOffset = key.step * self.offset
                 newRule = None
@@ -241,17 +242,17 @@ class DateRange(Index):
             return newIndex
         else:
             return Index(self.view(np.ndarray)[key])
-        
+
     def __repr__(self):
         output = str(self.__class__) + '\n'
         output += 'offset: %s\n' % self.offset
-        output += '[%s, ..., %s]\n' % (self[0], self[-1]) 
+        output += '[%s, ..., %s]\n' % (self[0], self[-1])
         output += 'length: %d' % len(self)
         return output
-    
+
     def __str__(self):
         return self.__repr__()
-    
+
     def shift(self, n):
         if n > 0:
             start = self[-1] + self.offset
@@ -262,7 +263,7 @@ class DateRange(Index):
         elif n < 0:
             end = self[0] - self.offset
             head = DateRange(toDate=end, periods=-n)
-            
+
             newArr = np.concatenate((head, self[:n])).view(DateRange)
             newArr.offset = self.offset
             return newArr
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 72903da25..398d2e880 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -931,7 +931,7 @@ class DataFrame(Picklable, Groupable):
 
         return _slow_pivot(self[index], self[columns], self[values])
 
-    def reindex(self, newIndex, fillMethod = None):
+    def reindex(self, newIndex, fillMethod=None):
         """
         Reindex data inside, optionally filling according to some rule.
 
@@ -1739,6 +1739,7 @@ class DataFrame(Picklable, Groupable):
                 newFrame[col] = NaN
 
         return newFrame
+
 def _pfixed(s, space, nanRep=None):
     if isinstance(s, float):
         fstring = '%-' + str(space-4) + 'g'
diff --git a/pandas/core/index.py b/pandas/core/index.py
index ccb71b5ae..47f9385b1 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1,6 +1,10 @@
+# pylint: disable-msg=E1101
+# pylint: disable-msg=E1103
+
 import numpy as np
 from pandas.lib.tdates import isAllDates
 from pandas.lib.tseries import map_indices
+
 def _indexOp(opname):
     """
     Wrapper function for Series arithmetic operations, to avoid
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index aee9aa9fc..26bc3efe0 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -1280,7 +1280,7 @@ class DataMatrix(DataFrame):
 
         return self.leftJoin(filledFrame)
 
-    def reindex(self, newIndex, fillMethod = None):
+    def reindex(self, newIndex, fillMethod=None):
         """
         Reindex data inside, optionally filling according to some rule.
 
diff --git a/setup.py b/setup.py
index 75a8ad0a3..965d87328 100644
--- a/setup.py
+++ b/setup.py
@@ -3,13 +3,34 @@
 from distutils.core import Extension
 from numpy.distutils.misc_util import Configuration
 from numpy.distutils.system_info import get_info
+from numpy.distutils.core import setup
 import numpy
 import os
 import sys
 
 config = Configuration('pandas', parent_package=None, top_path=None)
 
-cython_ext = Extension('pandas.lib.tseries', ['pandas/lib/src/tseries.c'],
+def get_cython_ext():
+    from Cython.Distutils import build_ext
+    from distutils.extension import Extension
+
+    pyx_ext = Extension('tseries', ['pandas/lib/src/tseries.pyx',
+                                    'pandas/lib/src/wirth.c'],
+                        include_dirs=[numpy.get_include(),
+                                      'pandas/lib/include/'])
+
+
+    setup(name='pandas.lib.tseries', description='Nothing',
+          ext_modules=[pyx_ext],
+          cmdclass = {
+              'build_ext' : build_ext
+          })
+
+# get_cython_ext()
+# sys.exit()
+
+cython_ext = Extension('pandas.lib.tseries', ['pandas/lib/src/tseries.c',
+                                              'pandas/lib/src/wirth.c'],
                        include_dirs=[numpy.get_include(),
                                      'pandas/lib/include/'])
 
@@ -22,7 +43,6 @@ except:
     pass
 
 if __name__ == '__main__':
-    from numpy.distutils.core import setup
     setup(version="0.1",
           description="Panel and time series data analysis toolkit",
           author="AQR Capital Management, LLC",
