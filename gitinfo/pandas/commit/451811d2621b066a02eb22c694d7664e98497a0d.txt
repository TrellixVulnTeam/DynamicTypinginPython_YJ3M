commit 451811d2621b066a02eb22c694d7664e98497a0d
Author: tmnhat2001 <tmnhat2001@gmail.com>
Date:   Sun Dec 10 11:22:44 2017 -0500

    Improve DatetimeIndex.time performance (#18461)

diff --git a/asv_bench/benchmarks/timeseries.py b/asv_bench/benchmarks/timeseries.py
index b3996739e..fe282df25 100644
--- a/asv_bench/benchmarks/timeseries.py
+++ b/asv_bench/benchmarks/timeseries.py
@@ -85,7 +85,7 @@ class DatetimeIndex(object):
         self.dti_tz.factorize()
 
     def time_dti_time(self):
-        self.rng.time
+        self.dst_rng.time
 
     def time_timestamp_tzinfo_cons(self):
         self.rng5[0]
diff --git a/doc/source/whatsnew/v0.22.0.txt b/doc/source/whatsnew/v0.22.0.txt
index 02cb5aa87..841eec69d 100644
--- a/doc/source/whatsnew/v0.22.0.txt
+++ b/doc/source/whatsnew/v0.22.0.txt
@@ -233,6 +233,7 @@ Performance Improvements
 - Improved performance of :func:`Series.dt.date` and :func:`DatetimeIndex.date` (:issue:`18058`)
 - Improved performance of :func:`IntervalIndex.symmetric_difference()` (:issue:`18475`)
 - Improved performance of ``DatetimeIndex`` and ``Series`` arithmetic operations with Business-Month and Business-Quarter frequencies (:issue:`18489`)
+- Improved performance of :func:`Series.dt.time` and :func:`DatetimeIndex.time`
 
 .. _whatsnew_0220.docs:
 
diff --git a/pandas/_libs/tslib.pyx b/pandas/_libs/tslib.pyx
index 293e10d19..7b0504388 100644
--- a/pandas/_libs/tslib.pyx
+++ b/pandas/_libs/tslib.pyx
@@ -15,7 +15,7 @@ from util cimport (is_integer_object, is_float_object, is_string_object,
 from cpython.datetime cimport (PyDateTime_Check, PyDate_Check,
                                PyDateTime_CheckExact,
                                PyDateTime_IMPORT,
-                               timedelta, datetime, date)
+                               timedelta, datetime, date, time)
 # import datetime C API
 PyDateTime_IMPORT
 
@@ -70,11 +70,17 @@ cdef inline object create_date_from_ts(
     """ convenience routine to construct a datetime.date from its parts """
     return date(dts.year, dts.month, dts.day)
 
+cdef inline object create_time_from_ts(
+        int64_t value, pandas_datetimestruct dts,
+        object tz, object freq):
+    """ convenience routine to construct a datetime.time from its parts """
+    return time(dts.hour, dts.min, dts.sec, dts.us, tz)
+
 
 def ints_to_pydatetime(ndarray[int64_t] arr, tz=None, freq=None,
                        box="datetime"):
     """
-    Convert an i8 repr to an ndarray of datetimes, date or Timestamp
+    Convert an i8 repr to an ndarray of datetimes, date, time or Timestamp
 
     Parameters
     ----------
@@ -83,9 +89,10 @@ def ints_to_pydatetime(ndarray[int64_t] arr, tz=None, freq=None,
          convert to this timezone
     freq : str/Offset, default None
          freq to convert
-    box  : {'datetime', 'timestamp', 'date'}, default 'datetime'
+    box  : {'datetime', 'timestamp', 'date', 'time'}, default 'datetime'
          If datetime, convert to datetime.datetime
          If date, convert to datetime.date
+         If time, convert to datetime.time
          If Timestamp, convert to pandas.Timestamp
 
     Returns
@@ -93,9 +100,6 @@ def ints_to_pydatetime(ndarray[int64_t] arr, tz=None, freq=None,
     result : array of dtype specified by box
     """
 
-    assert ((box == "datetime") or (box == "date") or (box == "timestamp")), \
-        "box must be one of 'datetime', 'date' or 'timestamp'"
-
     cdef:
         Py_ssize_t i, n = len(arr)
         ndarray[int64_t] trans, deltas
@@ -115,8 +119,13 @@ def ints_to_pydatetime(ndarray[int64_t] arr, tz=None, freq=None,
         if is_string_object(freq):
             from pandas.tseries.frequencies import to_offset
             freq = to_offset(freq)
+    elif box == "time":
+        func_create = create_time_from_ts
     elif box == "datetime":
         func_create = create_datetime_from_ts
+    else:
+        raise ValueError("box must be one of 'datetime', 'date', 'time' or" +
+                         " 'timestamp'")
 
     if tz is not None:
         if is_utc(tz):
diff --git a/pandas/core/indexes/datetimes.py b/pandas/core/indexes/datetimes.py
index 17b3a88cb..290c77dd7 100644
--- a/pandas/core/indexes/datetimes.py
+++ b/pandas/core/indexes/datetimes.py
@@ -53,8 +53,7 @@ import pandas.tseries.offsets as offsets
 import pandas.core.tools.datetimes as tools
 
 from pandas._libs import (lib, index as libindex, tslib as libts,
-                          algos as libalgos, join as libjoin,
-                          Timestamp)
+                          join as libjoin, Timestamp)
 from pandas._libs.tslibs import (timezones, conversion, fields, parsing,
                                  period as libperiod)
 
@@ -1677,9 +1676,7 @@ class DatetimeIndex(DatelikeOps, TimelikeOps, DatetimeIndexOpsMixin,
         """
         Returns numpy array of datetime.time. The time part of the Timestamps.
         """
-        return self._maybe_mask_results(libalgos.arrmap_object(
-            self.astype(object).values,
-            lambda x: np.nan if x is libts.NaT else x.time()))
+        return libts.ints_to_pydatetime(self.asi8, self.tz, box="time")
 
     @property
     def date(self):
