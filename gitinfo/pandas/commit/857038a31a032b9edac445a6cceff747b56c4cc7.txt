commit 857038a31a032b9edac445a6cceff747b56c4cc7
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Oct 14 18:30:32 2011 -0400

    ENH: speed enhancement in multi-key joining

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 4c17016fe..2001c7b0a 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2225,8 +2225,6 @@ class DataFrame(NDFrame):
 
         if isinstance(on, (list, tuple)):
             join_key = zip(*[self[k] for k in on])
-            join_key = common._asarray_tuplesafe(join_key,
-                                                 dtype=np.object_)
         else:
             join_key = np.asarray(self[on])
 
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 418b0940a..9894c2a8c 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -403,21 +403,24 @@ class Index(np.ndarray):
         -------
         (indexer, mask) : (ndarray, ndarray)
         """
-        target = _ensure_index(target)
-
         method = self._get_method(method)
 
         if self.dtype != target.dtype:
             target = Index(target, dtype=object)
 
         if method == 'pad':
+            target = _ensure_index(target)
             indexer = lib.pad_object(self, target, self.indexMap,
                                      target.indexMap)
         elif method == 'backfill':
+            target = _ensure_index(target)
             indexer = lib.backfill_object(self, target, self.indexMap,
                                           target.indexMap)
         elif method is None:
-            indexer = lib.merge_indexer_object(target, self.indexMap)
+            if isinstance(target, list):
+                indexer = lib.merge_indexer_list(target, self.indexMap)
+            else:
+                indexer = lib.merge_indexer_object(target, self.indexMap)
         else:
             raise ValueError('unrecognized method: %s' % method)
         return indexer
@@ -1256,8 +1259,13 @@ class MultiIndex(Index):
             indexer = lib.backfill_object(self_index, target_index,
                                           self_index.indexMap, target.indexMap)
         else:
-            indexer = lib.merge_indexer_object(target_index,
-                                               self_index.indexMap)
+            if isinstance(target_index, list):
+                indexer = lib.merge_indexer_list(target_index,
+                                                 self_index.indexMap)
+            else:
+                indexer = lib.merge_indexer_object(target_index,
+                                                   self_index.indexMap)
+
         return indexer
 
     def reindex(self, target, method=None):
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 6d29ae56d..55f316ae1 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -498,37 +498,6 @@ class BlockManager(object):
 
         return result
 
-    # def fast_2d_xs2(self, loc, copy=False):
-    #     """
-
-    #     """
-    #     if len(self.blocks) == 1:
-    #         result = self.blocks[0].values[:, loc]
-    #         if copy:
-    #             result = result.copy()
-    #         return result
-
-    #     if not copy:
-    #         raise Exception('cannot get view of mixed-type or '
-    #                         'non-consolidated DataFrame')
-
-    #     def _get_put_function(source_dtype, out_dtype):
-    #         src = source_dtype.name
-    #         dst = out_dtype.name
-    #         return getattr(lib, 'put2d_%s_%s' % (src, dst))
-
-    #     out_dtype = np.dtype(_interleaved_dtype(self.blocks))
-
-    #     items = self.items
-    #     n = len(items)
-    #     out = np.empty(n, dtype=out_dtype)
-    #     for blk in self.blocks:
-    #         values = blk.values
-    #         indexer = lib.merge_indexer_object(blk.items, items.indexMap)
-    #         putf = _get_put_function(values.dtype, out_dtype)
-    #         putf(values, indexer, loc, out)
-    #     return out
-
     def consolidate(self):
         """
         Join together blocks having same dtype
diff --git a/pandas/src/reindex.pyx b/pandas/src/reindex.pyx
index 97e20f391..447e04d05 100644
--- a/pandas/src/reindex.pyx
+++ b/pandas/src/reindex.pyx
@@ -225,3 +225,20 @@ def take_join_contiguous(ndarray[float64_t, ndim=2] lvalues,
                 outbuf[0] = rvalues[ridx, j]
                 outbuf = outbuf + 1
 
+@cython.wraparound(False)
+@cython.boundscheck(False)
+def merge_indexer_list(list values, dict oldMap):
+    cdef int i, j, length, newLength
+    cdef object idx
+    cdef ndarray[int32_t] fill_vec
+
+    newLength = len(values)
+    fill_vec = np.empty(newLength, dtype=np.int32)
+    for i from 0 <= i < newLength:
+        idx = values[i]
+        if idx in oldMap:
+            fill_vec[i] = oldMap[idx]
+        else:
+            fill_vec[i] = -1
+
+    return fill_vec
