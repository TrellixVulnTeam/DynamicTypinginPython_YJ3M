commit 9ef7ebb5aa8ca18f4a65266a9e5bb44c106c1f7c
Author: Jeff Reback <jeff@reback.net>
Date:   Mon Aug 31 08:30:15 2015 -0400

    DOC: avoid warnings on http links

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index e2d1de4de..997dfeb72 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -801,7 +801,7 @@ class DataFrame(NDFrame):
         into a default chunk size of 10,000. Failures return the complete error
         response which can be quite long depending on the size of the insert.
         There are several important limitations of the Google streaming API
-        which are `here <https://developers.google.com/bigquery/streaming-data-into-bigquery>`_
+        which are `here <https://developers.google.com/bigquery/streaming-data-into-bigquery>`__
 
         Parameters
         ----------
@@ -1488,7 +1488,7 @@ class DataFrame(NDFrame):
             Make the row labels bold in the output
         column_format : str, default None
             The columns format as specified in `LaTeX table format
-            <https://en.wikibooks.org/wiki/LaTeX/Tables>`_ e.g 'rcl' for 3 columns
+            <https://en.wikibooks.org/wiki/LaTeX/Tables>`__ e.g 'rcl' for 3 columns
         longtable : boolean, default False
             Use a longtable environment instead of tabular. Requires adding
             a \\usepackage{longtable} to your LaTeX preamble.
@@ -2113,7 +2113,7 @@ class DataFrame(NDFrame):
         * To select strings you must use the ``object`` dtype, but note that
           this will return *all* object dtype columns
         * See the `numpy dtype hierarchy
-          <http://docs.scipy.org/doc/numpy/reference/arrays.scalars.html>`_
+          <http://docs.scipy.org/doc/numpy/reference/arrays.scalars.html>`__
         * To select Pandas categorical dtypes, use 'category'
 
         Examples
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 012543172..cb62d732d 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -2993,8 +2993,8 @@ class NDFrame(PandasObject):
               wrappers around the scipy interpolation methods of similar
               names. These use the actual numerical values of the index. See
               the scipy documentation for more on their behavior
-              `here <http://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation>`_
-              `and here <http://docs.scipy.org/doc/scipy/reference/tutorial/interpolate.html>`_
+              `here <http://docs.scipy.org/doc/scipy/reference/interpolate.html#univariate-interpolation>`__
+              `and here <http://docs.scipy.org/doc/scipy/reference/tutorial/interpolate.html>`__
 
         axis : {0, 1}, default 0
             * 0: fill column-by-column
