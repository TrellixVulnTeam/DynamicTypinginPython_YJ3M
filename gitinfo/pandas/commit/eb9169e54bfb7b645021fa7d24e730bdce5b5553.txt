commit eb9169e54bfb7b645021fa7d24e730bdce5b5553
Author: Paul Ivanov <pivanov314@gmail.com>
Date:   Tue Aug 7 14:45:15 2012 -0700

    ENH: inplace keyword arg for Series.reset_index

diff --git a/pandas/core/series.py b/pandas/core/series.py
index 1dbc240e7..b0cb0a1f4 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -750,7 +750,7 @@ copy : boolean, default False
             new_values = np.concatenate([self.values, [value]])
             return Series(new_values, index=new_index, name=self.name)
 
-    def reset_index(self, drop=False, name=None):
+    def reset_index(self, drop=False, name=None, inplace=False):
         """
         Analagous to the DataFrame.reset_index function, see docstring there.
 
@@ -760,13 +760,21 @@ copy : boolean, default False
             Do not try to insert index into dataframe columns
         name : object, default None
             The name of the column corresponding to the Series values
+        inplace : boolean, default False
+            Modify the Series in place (do not create a new object)
 
         Returns
         ----------
         resetted : DataFrame, or Series if drop == True
         """
         if drop:
-            return Series(self, index=np.arange(len(self)), name=self.name)
+            if inplace:
+                self.index = np.arange(len(self))
+                # set name if it was passed, otherwise, keep the previous name
+                self.name = name or self.name
+                return self
+            else:
+                return Series(self, index=np.arange(len(self)), name=self.name)
         else:
             from pandas.core.frame import DataFrame
             if name is None:
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 0e5d4411c..364072a6a 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -2964,6 +2964,12 @@ class TestSeriesNonUnique(unittest.TestCase):
         df = ser.reset_index(name='value2')
         self.assert_('value2' in df)
 
+        #check inplace
+        s = ser.reset_index(drop=True)
+        s2 = ser
+        s2.reset_index(drop=True, inplace=True)
+        assert_series_equal(s, s2)
+
     def test_timeseries_coercion(self):
         idx = tm.makeDateIndex(10000)
         ser = Series(np.random.randn(len(idx)), idx.astype(object))
