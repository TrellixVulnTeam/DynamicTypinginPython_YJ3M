commit 5c1937befc371b5310f8af15f9838054550f2961
Author: Chang She <chang@lambdafoundry.com>
Date:   Wed May 16 16:52:05 2012 -0400

    ENH: inplace option to DataFrame.drop_duplicates #805 with vbench

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index ccc5ebe37..e0fc9d294 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2344,7 +2344,7 @@ class DataFrame(NDFrame):
         new_labels = labels[mask]
         return self.reindex(**{axis_name: new_labels})
 
-    def drop_duplicates(self, cols=None, take_last=False):
+    def drop_duplicates(self, cols=None, take_last=False, inplace=False):
         """
         Return DataFrame with duplicate rows removed, optionally only
         considering certain columns
@@ -2358,13 +2358,23 @@ class DataFrame(NDFrame):
             Take the last observed row in a row. Defaults to the first row
         skipna : boolean, default True
             If True then keep NaN
+        inplace : boolean, default False
+            Whether to drop duplicates in place or to return a copy
 
         Returns
         -------
         deduplicated : DataFrame
         """
+
         duplicated = self.duplicated(cols, take_last=take_last)
-        return self[-duplicated]
+
+        if inplace:
+            inds, = (-duplicated).nonzero()
+            self._data = self._data.take(inds)
+            self._clear_item_cache()
+            return self
+        else:
+            return self[-duplicated]
 
     def duplicated(self, cols=None, take_last=False):
         """
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 23230c790..f113e4533 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3340,6 +3340,56 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         expected = df.ix[[1, 3, 6, 7]]
         assert_frame_equal(result, expected)
 
+    def test_drop_duplicates_inplace(self):
+        orig = DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',
+                                 'foo', 'bar', 'bar', 'foo'],
+                          'B' : ['one', 'one', 'two', 'two',
+                                 'two', 'two', 'one', 'two'],
+                          'C' : [1, 1, 2, 2, 2, 2, 1, 2],
+                          'D' : range(8)})
+
+        # single column
+        df = orig.copy()
+        df.drop_duplicates('A', inplace=True)
+        expected = orig[:2]
+        result = df
+        assert_frame_equal(result, expected)
+
+        df = orig.copy()
+        df.drop_duplicates('A', take_last=True, inplace=True)
+        expected = orig.ix[[6, 7]]
+        result = df
+        assert_frame_equal(result, expected)
+
+        # multi column
+        df = orig.copy()
+        df.drop_duplicates(['A', 'B'], inplace=True)
+        expected = orig.ix[[0, 1, 2, 3]]
+        result = df
+        assert_frame_equal(result, expected)
+
+        df = orig.copy()
+        df.drop_duplicates(['A', 'B'], take_last=True, inplace=True)
+        expected = orig.ix[[0, 5, 6, 7]]
+        result = df
+        assert_frame_equal(result, expected)
+
+        # consider everything
+        orig2 = orig.ix[:, ['A', 'B', 'C']].copy()
+
+        df2 = orig2.copy()
+        df2.drop_duplicates(inplace=True)
+        # in this case only
+        expected = orig2.drop_duplicates(['A', 'B'])
+        result = df2
+        assert_frame_equal(result, expected)
+
+        df2 = orig2.copy()
+        df2.drop_duplicates(take_last=True, inplace=True)
+        expected = orig2.drop_duplicates(['A', 'B'], take_last=True)
+        result = df2
+        assert_frame_equal(result, expected)
+
     def test_drop_col_still_multiindex(self):
         arrays = [[  'a',   'b',   'c',    'top'],
                   [  '',    '',    '',     'OD' ],
diff --git a/vb_suite/reindex.py b/vb_suite/reindex.py
index 24109e055..62b26724e 100644
--- a/vb_suite/reindex.py
+++ b/vb_suite/reindex.py
@@ -136,6 +136,11 @@ frame_drop_duplicates = Benchmark(statement, setup,
                                   name='frame_drop_duplicates',
                                   start_date=datetime(2011, 11, 15))
 
+statement = "df.drop_duplicates(['key1', 'key2'], inplace=True)"
+frame_drop_dup_inplace = Benchmark(statement, setup,
+                                  name='frame_drop_dup_inplace',
+                                  start_date=datetime(2012, 5, 16))
+
 lib_fast_zip = Benchmark('lib.fast_zip(df.values.T)', setup,
                          name='lib_fast_zip',
                          start_date=datetime(2012, 1, 1))
@@ -152,6 +157,11 @@ lib_fast_zip_fillna = Benchmark('lib.fast_zip_fillna(df.values.T)', setup,
                                 name='lib_fast_zip_fillna',
                                 start_date=datetime(2012, 5, 15))
 
+statement2 = "df.drop_duplicates(['key1', 'key2'], inplace=True)"
+frame_drop_dup_na_inplace = Benchmark(statement2, setup,
+                                  name='frame_drop_dup_na_inplace',
+                                  start_date=datetime(2012, 5, 16))
+
 #----------------------------------------------------------------------
 # fillna, many columns
 
