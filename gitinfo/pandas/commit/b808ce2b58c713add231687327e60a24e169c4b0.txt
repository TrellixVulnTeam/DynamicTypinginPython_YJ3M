commit b808ce2b58c713add231687327e60a24e169c4b0
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jun 6 13:35:19 2011 +0200

    DateRange unit test coverage, tz_validate impl

diff --git a/RELEASE.rst b/RELEASE.rst
index 60a2171f0..6741d22dc 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -38,6 +38,9 @@ Release notes
 
 **API Changes**
 
+* Backwards compatibility support for begin/end/nPeriods keyword arguments in
+  DateRange class has been removed
+
 **Bug fixes**
 
 ************************
diff --git a/pandas/core/common.py b/pandas/core/common.py
index 51af61c86..8f4c1681a 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -130,3 +130,15 @@ def _ensure_index(index_like):
         index_like = Index(index_like)
 
     return index_like
+
+def _any_none(*args):
+    for arg in args:
+        if arg is None:
+            return True
+    return False
+
+def _all_not_none(*args):
+    for arg in args:
+        if arg is None:
+            return False
+    return True
diff --git a/pandas/core/daterange.py b/pandas/core/daterange.py
index 3cbef2fd3..dd74b0f94 100644
--- a/pandas/core/daterange.py
+++ b/pandas/core/daterange.py
@@ -55,8 +55,6 @@ class DateRange(Index):
         # Cachable
         if not start:
             start = kwds.get('begin')
-        if not end:
-            end = kwds.get('end')
         if not periods:
             periods = kwds.get('nPeriods')
 
@@ -298,8 +296,26 @@ class DateRange(Index):
     def tz_validate(self):
         """
         For a localized time zone, verify that there are no DST ambiguities
+
+        Returns
+        -------
+        result : boolean
+            True if there are no DST ambiguities
         """
-        pass
+        import pytz
+
+        tz = self.tzinfo
+        if tz is None or tz is pytz.utc:
+            return True
+
+        # See if there are any DST resolution problems
+        for date in self:
+            try:
+                tz.utcoffset(date.replace(tzinfo=None))
+            except pytz.InvalidTimeError:
+                return False
+
+        return True
 
 def generate_range(start=None, end=None, periods=None,
                    offset=datetools.BDay(), timeRule=None):
@@ -366,6 +382,8 @@ def generate_range(start=None, end=None, periods=None,
         # faster than cur + offset
         cur = offset.apply(cur)
 
+# Do I want to cache UTC dates? Can't decide...
+
 # def _utc_in_cache_range(start, end):
 #     import pytz
 #     if start is None or end is None:
@@ -390,6 +408,13 @@ def generate_range(start=None, end=None, periods=None,
 # def _hastz(dt):
 #     return dt is not None and dt.tzinfo is not None
 
+# def _have_pytz():
+#     try:
+#         import pytz
+#         return True
+#     except ImportError:
+#         return False
+
 def _in_range(start, end, rng_start, rng_end):
     return start > rng_start and end
 
@@ -414,40 +439,18 @@ def _figure_out_timezone(start, end, tzinfo):
     return start, end, tz
 
 def _infer_tzinfo(start, end):
+    def _infer(a, b):
+        tz = a.tzinfo
+        if b and b.tzinfo:
+            assert(tz == b.tzinfo)
+        return tz
     tz = None
     if start is not None:
-        tz = start.tzinfo
-        if end and end.tzinfo:
-            assert(tz == end.tzinfo)
+        tz = _infer(start, end)
     elif end is not None:
-        tz = end.tzinfo
-        if start and start.tzinfo:
-            assert(tz == start.tzinfo)
+        tz = _infer(end, start)
     return tz
 
-def _any_none(*args):
-    for arg in args:
-        if arg is None:
-            return True
-    return False
-
-def test_any_none():
-    assert(_any_none(1, 2, 3, None))
-    assert(not _any_none(1, 2, 3, 4))
-
-def _all_not_none(*args):
-    for arg in args:
-        if arg is None:
-            return False
-    return True
-
-def _have_pytz():
-    try:
-        import pytz
-        return True
-    except ImportError:
-        return False
-
 if __name__ == '__main__':
     import pytz
     # just want it to work
diff --git a/pandas/core/tests/test_common.py b/pandas/core/tests/test_common.py
index 536375fe5..381857b00 100644
--- a/pandas/core/tests/test_common.py
+++ b/pandas/core/tests/test_common.py
@@ -17,3 +17,17 @@ def test_isnull():
     assert isnull(np.inf)
     assert isnull(-np.inf)
 
+def test_any_none():
+    assert(common._any_none(1, 2, 3, None))
+    assert(not common._any_none(1, 2, 3, 4))
+
+def test_all_not_none():
+    assert(common._all_not_none(1, 2, 3, 4))
+    assert(not common._all_not_none(1, 2, 3, None))
+    assert(not common._all_not_none(None, None, None, None))
+
+if __name__ == '__main__':
+    import nose
+    nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
+                   exit=False)
+
diff --git a/pandas/core/tests/test_daterange.py b/pandas/core/tests/test_daterange.py
index 0ea85d17c..98d6691ec 100644
--- a/pandas/core/tests/test_daterange.py
+++ b/pandas/core/tests/test_daterange.py
@@ -7,6 +7,12 @@ import numpy as np
 import pandas.core.datetools as datetools
 from pandas.core.index import Index
 from pandas.core.daterange import DateRange, generate_range
+import pandas.core.daterange as daterange
+
+try:
+    import pytz
+except ImportError:
+    pass
 
 def eqXDateRange(kwargs, expected):
     rng = generate_range(**kwargs)
@@ -14,7 +20,7 @@ def eqXDateRange(kwargs, expected):
 
 START, END = datetime(2009, 1, 1), datetime(2010, 1, 1)
 
-class TestGeneration(unittest.TestCase):
+class TestDateRangeGeneration(unittest.TestCase):
     def test_generate(self):
         rng1 = list(generate_range(START, END, offset=datetools.bday))
         rng2 = list(generate_range(START, END, timeRule='WEEKDAY'))
@@ -152,11 +158,7 @@ class TestDateRange(unittest.TestCase):
         self.assert_(not isinstance(the_union, DateRange))
 
     def test_with_tzinfo(self):
-        try:
-            import pytz
-        except ImportError:
-            raise nose.SkipTest
-
+        _skip_if_no_pytz()
         tz = pytz.timezone('US/Central')
 
         # just want it to work
@@ -183,27 +185,77 @@ class TestDateRange(unittest.TestCase):
                           '1/1/2009', tzinfo=tz)
 
     def test_with_tzinfo_ambiguous_times(self):
-        pass
+        _skip_if_no_pytz()
+        tz = pytz.timezone('US/Eastern')
+
+        # regular no problem
+        self.assert_(self.rng.tz_validate())
+
+        # March 13, 2011, spring forward, skip from 2 AM to 3 AM
+        dr = DateRange(datetime(2011, 3, 13, 1, 30), periods=3,
+                       offset=datetools.Hour(), tzinfo=tz)
+        self.assert_(not dr.tz_validate())
+
+        # after dst transition
+        dr = DateRange(datetime(2011, 3, 13, 3, 30), periods=3,
+                       offset=datetools.Hour(), tzinfo=tz)
+        self.assert_(dr.tz_validate())
+
+        # November 6, 2011, fall back, repeat 2 AM hour
+        dr = DateRange(datetime(2011, 11, 6, 1, 30), periods=3,
+                       offset=datetools.Hour(), tzinfo=tz)
+        self.assert_(not dr.tz_validate())
+
+        # UTC is OK
+        dr = DateRange(datetime(2011, 3, 13), periods=48,
+                       offset=datetools.Minute(30), tzinfo=pytz.utc)
+        self.assert_(dr.tz_validate())
 
     def test_summary(self):
         self.rng.summary()
         self.rng[2:2].summary()
         try:
-            import pytz
             DateRange('1/1/2005', '1/1/2009', tzinfo=pytz.utc).summary()
-        except ImportError:
+        except Exception:
             pass
 
-# DateRange test
-
-def testDateRange1():
-    end = datetime(2009, 5, 13)
-    dr = DateRange(end=end, periods=20)
-    firstDate = end - 19 * datetools.bday
-
-    assert len(dr) == 20
-    assert dr[0] == firstDate
-    assert dr[-1] == end
+    def test_misc(self):
+        end = datetime(2009, 5, 13)
+        dr = DateRange(end=end, periods=20)
+        firstDate = end - 19 * datetools.bday
+
+        assert len(dr) == 20
+        assert dr[0] == firstDate
+        assert dr[-1] == end
+
+    # test utility methods
+    def test_infer_tzinfo(self):
+        _skip_if_no_pytz()
+        eastern = pytz.timezone('US/Eastern')
+        utc = pytz.utc
+
+        _start = datetime(2001, 1, 1)
+        _end = datetime(2009, 1, 1)
+
+        start = eastern.localize(_start)
+        end = eastern.localize(_end)
+        assert(daterange._infer_tzinfo(start, end) is eastern)
+        assert(daterange._infer_tzinfo(start, None) is eastern)
+        assert(daterange._infer_tzinfo(None, end) is eastern)
+
+        start = utc.localize(_start)
+        end = utc.localize(_end)
+        assert(daterange._infer_tzinfo(start, end) is utc)
+
+        end = eastern.localize(_end)
+        self.assertRaises(Exception, daterange._infer_tzinfo, start, end)
+        self.assertRaises(Exception, daterange._infer_tzinfo, end, start)
+
+def _skip_if_no_pytz():
+    try:
+        import pytz
+    except ImportError:
+        raise nose.SkipTest
 
 if __name__ == '__main__':
     import nose
