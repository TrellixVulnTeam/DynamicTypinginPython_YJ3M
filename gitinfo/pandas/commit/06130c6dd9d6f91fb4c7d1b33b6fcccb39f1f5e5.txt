commit 06130c6dd9d6f91fb4c7d1b33b6fcccb39f1f5e5
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Oct 20 18:43:59 2011 -0400

    ENH: rename histogram->value_counts and sort descending, GH #265

diff --git a/pandas/core/series.py b/pandas/core/series.py
index 4e04fca30..0701512c5 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -592,20 +592,21 @@ copy : boolean, default False
 
         return Series(result, index=level_index)
 
-    def histogram(self):
+    def value_counts(self):
         """
-        Returns Series containing counts of unique values. The result Series's
-        index will be the sorted unique values
+        Returns Series containing counts of unique values. The resulting Series
+        will be in descending order so that the first element is the most
+        frequently-occurring element
 
         Returns
         -------
-        histogram : Series
+        counts : Series
         """
         from collections import defaultdict
         counter = defaultdict(lambda: 0)
         for value in self.values:
             counter[value] += 1
-        return Series(counter)
+        return Series(counter).order(ascending=False)
 
     def sum(self, axis=0, dtype=None, out=None, skipna=True):
         """
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index b6214fc94..08d32b54c 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -759,14 +759,14 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
 
         self.assertEqual(self.ts.count(), np.isfinite(self.ts).sum())
 
-    def test_histogram(self):
-        s = Series(['a', 'b', 'b', 'b', 'a', 'c', 'd', 'd', 'a'])
-        hist = s.histogram()
-        expected = Series([3, 3, 1, 2], index=['a', 'b', 'c', 'd'])
+    def test_value_counts(self):
+        s = Series(['a', 'b', 'b', 'b', 'b', 'a', 'c', 'd', 'd', 'a'])
+        hist = s.value_counts()
+        expected = Series([4, 3, 2, 1], index=['b', 'a', 'd', 'c'])
         assert_series_equal(hist, expected)
 
         s = Series({})
-        hist = s.histogram()
+        hist = s.value_counts()
         expected = Series([])
         assert_series_equal(hist, expected)
 
