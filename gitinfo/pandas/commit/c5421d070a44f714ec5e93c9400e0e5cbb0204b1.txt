commit c5421d070a44f714ec5e93c9400e0e5cbb0204b1
Author: Chang She <chang@lambdafoundry.com>
Date:   Fri May 4 11:40:11 2012 -0400

    Add fields from DatetimeIndex to Timestamp. GH #1115

diff --git a/doc/source/indexing.rst b/doc/source/indexing.rst
index 8f151057e..97fe068ff 100644
--- a/doc/source/indexing.rst
+++ b/doc/source/indexing.rst
@@ -295,6 +295,10 @@ and thus offers performance that is a good deal faster than indexing.
    timeit arr[indexer]
    timeit arr.take(indexer, axis=0)
 
+   ser = Series(arr[:, 0])
+   timeit ser.ix[indexer]
+   timeit ser.take(indexer)
+
 Duplicate Data
 ~~~~~~~~~~~~~~
 
diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index a09887f3a..d23a3b146 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -108,6 +108,27 @@ class Timestamp(_Timestamp):
 
         return Period(self, freq=freq)
 
+    @property
+    def dayofweek(self):
+        return self.weekday()
+
+    @property
+    def dayofyear(self):
+        return self.day
+
+    @property
+    def week(self):
+        return self._get_field('woy')
+
+    weekofyear = week
+
+    @property
+    def quarter(self):
+        return self._get_field('q')
+
+    @property
+    def freqstr(self):
+        return getattr(self.offset, 'freqstr', self.offset)
 
 cdef inline bint is_timestamp(object o):
     return isinstance(o, Timestamp)
@@ -188,6 +209,10 @@ cdef class _Timestamp(datetime):
         else:
             return datetime.__sub__(self, other)
 
+    def _get_field(self, field):
+        out = fast_field_accessor(np.array([self.value]), field)
+        return out[0]
+
 # lightweight C object to hold datetime & int64 pair
 cdef class _TSObject:
     cdef:
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index ae8665ddb..f6eae79bf 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -524,6 +524,20 @@ class TestTimeSeries(unittest.TestCase):
         pts = ts.to_period('M')
         self.assert_(pts.index.equals(exp.index.asfreq('M')))
 
+    def test_timestamp_fields(self):
+        # extra fields from DatetimeIndex like quarter and week
+        from pandas._tseries import Timestamp
+        idx = tm.makeDateIndex(10)
+
+        fields = ['dayofweek', 'dayofyear', 'week', 'weekofyear', 'quarter']
+        for f in fields:
+            expected = getattr(idx, f)[0]
+            result = getattr(Timestamp(idx[0]), f)
+            self.assertEqual(result, expected)
+
+        self.assertEqual(idx.freq, Timestamp(idx[0], idx.freq).freq)
+        self.assertEqual(idx.freqstr, Timestamp(idx[0], idx.freq).freqstr)
+
 
 def _simple_ts(start, end, freq='D'):
     rng = date_range(start, end, freq=freq)
