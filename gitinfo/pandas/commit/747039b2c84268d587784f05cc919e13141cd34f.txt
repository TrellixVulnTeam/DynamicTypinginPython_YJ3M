commit 747039b2c84268d587784f05cc919e13141cd34f
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Nov 30 18:16:31 2012 -0500

    TST: improve DataFrame.to_string perf. add vbenchmark. close #2399

diff --git a/pandas/core/format.py b/pandas/core/format.py
index ed8a99c42..47aa072ff 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -124,6 +124,8 @@ class SeriesFormatter(object):
         maxlen = max(len(x) for x in fmt_index)
         pad_space = min(maxlen, 60)
 
+        _encode_diff = _encode_diff_func()
+
         result = ['%s   %s'] * len(fmt_values)
         for i, (k, v) in enumerate(izip(fmt_index[1:], fmt_values)):
             try:
@@ -141,19 +143,30 @@ class SeriesFormatter(object):
 
         return unicode(u'\n'.join(result))
 
-if py3compat.PY3:  # pragma: no cover
-    _encode_diff = lambda x: 0
 
-    _strlen = len
-else:
-    def _encode_diff(x):
-        return len(x) - len(x.decode(get_option("print_config.encoding")))
+def _encode_diff_func():
+    if py3compat.PY3:  # pragma: no cover
+        _encode_diff = lambda x: 0
+    else:
+        encoding = get_option("print_config.encoding")
+        def _encode_diff(x):
+            return len(x) - len(x.decode(encoding))
 
-    def _strlen(x):
-        try:
-            return len(x.decode(get_option("print_config.encoding")))
-        except UnicodeError:
-            return len(x)
+    return _encode_diff
+
+
+def _strlen_func():
+    if py3compat.PY3:  # pragma: no cover
+        _strlen = len
+    else:
+        encoding = get_option("print_config.encoding")
+        def _strlen(x):
+            try:
+                return len(x.decode(encoding))
+            except UnicodeError:
+                return len(x)
+
+    return _strlen
 
 
 class DataFrameFormatter(object):
@@ -217,17 +230,20 @@ class DataFrameFormatter(object):
 
         stringified = []
 
+        _strlen = _strlen_func()
+
         for i, c in enumerate(self.columns):
             if self.header:
                 fmt_values = self._format_col(i)
                 cheader = str_columns[i]
 
-                max_colwidth = max(self.col_space or 0, *(_strlen(x) for x in cheader))
+                max_colwidth = max(self.col_space or 0,
+                                   *(_strlen(x) for x in cheader))
 
                 fmt_values = _make_fixed_width(fmt_values, self.justify,
                                                minimum=max_colwidth)
 
-                max_len = max(max(_strlen(x) for x in fmt_values),
+                max_len = max(np.max([_strlen(x) for x in fmt_values]),
                               max_colwidth)
                 if self.justify == 'left':
                     cheader = [x.ljust(max_len) for x in cheader]
@@ -1067,7 +1083,10 @@ def _make_fixed_width(strings, justify='right', minimum=None):
     if len(strings) == 0:
         return strings
 
-    max_len = max(_strlen(x) for x in strings)
+    _strlen = _strlen_func()
+    _encode_diff = _encode_diff_func()
+
+    max_len = np.max([_strlen(x) for x in strings])
 
     if minimum is not None:
         max_len = max(minimum, max_len)
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 4087a2da1..d9f280793 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -586,7 +586,7 @@ class DataFrame(NDFrame):
         """
 
         if com.in_qtconsole():
-            terminal_width, terminal_height = 10, 100
+            terminal_width, terminal_height = 100, 100
         else:
             terminal_width, terminal_height = get_terminal_size()
         max_rows = (terminal_height if get_option("print_config.max_rows") == 0
@@ -666,6 +666,9 @@ class DataFrame(NDFrame):
         Return a html representation for a particular DataFrame.
         Mainly for IPython notebook.
         """
+        if com.in_qtconsole():
+            raise ValueError('Disable HTML output in QtConsole')
+
         if get_option("print_config.notebook_repr_html"):
             if self._need_info_repr_():
                 return None
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index bd4261e2d..1379615e9 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -71,8 +71,11 @@ class TestDataFrameFormatting(unittest.TestCase):
                      max_len + 1)) for i in range(10)]})
         r = repr(df)
         r = r[r.find('\n') + 1:]
+
+        _strlen = fmt._strlen_func()
+
         for line, value in zip(r.split('\n'), df['B']):
-            if fmt._strlen(value) + 1 > max_len:
+            if _strlen(value) + 1 > max_len:
                 self.assert_('...' in line)
             else:
                 self.assert_('...' not in line)
diff --git a/vb_suite/frame_methods.py b/vb_suite/frame_methods.py
index b8b59b99e..2c56e4523 100644
--- a/vb_suite/frame_methods.py
+++ b/vb_suite/frame_methods.py
@@ -88,3 +88,13 @@ frame_iteritems = Benchmark('f()', setup,
 
 frame_iteritems_cached = Benchmark('g()', setup,
                                    start_date=datetime(2010, 6, 1))
+
+#----------------------------------------------------------------------
+# to_string
+
+setup = common_setup + """
+df = DataFrame(randn(100, 10))
+"""
+
+frame_to_string_floats = Benchmark('df.to_string()', setup,
+                                   start_date=datetime(2010, 6, 1))
