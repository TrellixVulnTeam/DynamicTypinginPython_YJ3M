commit c1206b389ec9060e3af8cbd584c2680f0dafabf8
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Nov 5 12:30:54 2012 -0500

    BUG: from_records bug when passing columns. docs clarification #2179

diff --git a/RELEASE.rst b/RELEASE.rst
index 849d7cab4..ef08672ab 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -84,6 +84,7 @@ pandas 0.9.1
   - Fix numerical precision issues in diff with integer data (#2087)
   - Fix bug in MultiIndex.__getitem__ with NA values (#2008)
   - Do not override matplotlib unit conversion fro datetime/time/date (#2173)
+  - Fix DataFrame.from_records dict-arg bug when passing columns (#2179)
 
 pandas 0.9.0
 ============
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 031ec3700..d209e076b 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -849,14 +849,18 @@ class DataFrame(NDFrame):
 
         Parameters
         ----------
-        data : ndarray (structured dtype), list of tuples, or DataFrame
+        data : ndarray (structured dtype), list of tuples, dict, or DataFrame
         index : string, list of fields, array-like
             Field of array to use as the index, alternately a specific set of
             input labels to use
         exclude: sequence, default None
             Columns or fields to exclude
         columns : sequence, default None
-            Column names to use, replacing any found in passed data
+            Column names to use. If the passed data do not have named
+            associated with them, this argument provides names for the
+            columns. Otherwise this argument indicates the order of the columns
+            in the result (any names not found in the data will become all-NA
+            columns)
         coerce_float : boolean, default False
             Attempt to convert values to non-string, non-numeric objects (like
             decimal.Decimal) to floating point, useful for SQL result sets
@@ -865,8 +869,6 @@ class DataFrame(NDFrame):
         -------
         df : DataFrame
         """
-        import warnings
-
         # Make a copy of the input columns so we can modify it
         if columns is not None:
             columns = list(columns)
@@ -876,7 +878,12 @@ class DataFrame(NDFrame):
                                  'from_records')
 
         if isinstance(data, (np.ndarray, DataFrame, dict)):
-            columns, sdict = _rec_to_dict(data)
+            keys, sdict = _rec_to_dict(data)
+            if columns is None:
+                columns = keys
+            else:
+                sdict = dict((k, v) for k, v in sdict.iteritems()
+                             if k in columns)
         else:
             arrays, columns = _to_arrays(data, columns,
                                          coerce_float=coerce_float)
@@ -891,6 +898,7 @@ class DataFrame(NDFrame):
             del sdict[col]
             columns.remove(col)
 
+        result_index = None
         if index is not None:
             if (isinstance(index, basestring) or
                 not hasattr(index, "__iter__")):
@@ -908,11 +916,6 @@ class DataFrame(NDFrame):
                     result_index = MultiIndex.from_arrays(arrays, names=index)
                 except Exception:
                     result_index = index
-        elif isinstance(data, dict) and len(data) > 0:
-            # utilize first element of sdict to get length
-            result_index = np.arange(len(data.values()[0]))
-        else:
-            result_index = np.arange(len(data))
 
         return cls(sdict, index=result_index, columns=columns)
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 88a1260bb..da95f9b86 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2295,8 +2295,7 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         assert_frame_equal(df, edf)
 
-        idf = DataFrame.from_items([('a',[8]),('a',[5])],
-                                   columns=['a','a'])
+        idf = DataFrame.from_items([('a',[8]),('a',[5])], columns=['a','a'])
         assert_frame_equal(idf, edf)
 
         self.assertRaises(ValueError, DataFrame.from_items,
@@ -2585,6 +2584,23 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
                                         index=['order_id', 'quantity'])
         self.assert_(result.index.names == ['order_id', 'quantity'])
 
+    def test_from_records_misc_brokenness(self):
+        # #2179
+
+        data = {1: ['foo'], 2: ['bar']}
+
+        result = DataFrame.from_records(data, columns=['a', 'b'])
+        exp = DataFrame(data, columns=['a', 'b'])
+        assert_frame_equal(result, exp)
+
+        # overlap in index/index_names
+
+        data = {'a': [1, 2, 3], 'b': [4, 5, 6]}
+
+        result = DataFrame.from_records(data, index=['a', 'b', 'c'])
+        exp = DataFrame(data, index=['a', 'b', 'c'])
+        assert_frame_equal(result, exp)
+
     def test_to_records_floats(self):
         df = DataFrame(np.random.rand(10,10))
         df.to_records()
