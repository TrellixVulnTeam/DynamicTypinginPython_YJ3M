commit 2a50da86bc9511894ff3a4e5d400ed2204c59fcc
Author: jreback <jeff@reback.net>
Date:   Mon Feb 24 15:38:46 2014 -0500

    COMPAT: infer_freq compat on passing an Index of strings (GH6463)

diff --git a/doc/source/release.rst b/doc/source/release.rst
index 7871e92b7..b9d9f7097 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -81,7 +81,8 @@ API Changes
   - ``microsecond,nanosecond,qyear``
   - ``min(),max()``
   - ``pd.infer_freq()``
-- ``pd.infer_freq()`` will now raise a ``TypeError`` if given an invalid ``Series/Index`` type (:issue:`6407`)
+- ``pd.infer_freq()`` will now raise a ``TypeError`` if given an invalid ``Series/Index``
+  type (:issue:`6407`, :issue:`6463`)
 
 - Local variable usage has changed in
   :func:`pandas.eval`/:meth:`DataFrame.eval`/:meth:`DataFrame.query`
diff --git a/pandas/tseries/frequencies.py b/pandas/tseries/frequencies.py
index 8d9252316..7988b01af 100644
--- a/pandas/tseries/frequencies.py
+++ b/pandas/tseries/frequencies.py
@@ -655,8 +655,11 @@ def infer_freq(index, warn=True):
     if isinstance(index, pd.PeriodIndex):
         raise TypeError("PeriodIndex given. Check the `freq` attribute "
                          "instead of using infer_freq.")
-    if not isinstance(index, pd.DatetimeIndex) and isinstance(index, pd.Index):
-        raise TypeError("cannot infer freq from a non-convertible index type {0}".format(type(index)))
+    if isinstance(index, pd.Index) and not isinstance(index, pd.DatetimeIndex):
+        if isinstance(index, (pd.Int64Index, pd.Float64Index)):
+            raise TypeError("cannot infer freq from a non-convertible index type {0}".format(type(index)))
+        index = index.values
+
     index = pd.DatetimeIndex(index)
     inferer = _FrequencyInferer(index, warn=warn)
     return inferer.get_freq()
diff --git a/pandas/tseries/tests/test_frequencies.py b/pandas/tseries/tests/test_frequencies.py
index ca88515cc..aeb6b74f7 100644
--- a/pandas/tseries/tests/test_frequencies.py
+++ b/pandas/tseries/tests/test_frequencies.py
@@ -274,11 +274,20 @@ class TestFrequencyInference(tm.TestCase):
         # test all index types
         for i in [ tm.makeIntIndex(10),
                    tm.makeFloatIndex(10),
-                   tm.makeStringIndex(10),
-                   tm.makeUnicodeIndex(10),
                    tm.makePeriodIndex(10) ]:
             self.assertRaises(TypeError, lambda : infer_freq(i))
 
+        for i in [ tm.makeStringIndex(10),
+                   tm.makeUnicodeIndex(10) ]:
+            self.assertRaises(ValueError, lambda : infer_freq(i))
+
+    def test_string_datetimelike_compat(self):
+
+        # GH 6463
+        expected = infer_freq(['2004-01', '2004-02', '2004-03', '2004-04'])
+        result = infer_freq(Index(['2004-01', '2004-02', '2004-03', '2004-04']))
+        self.assertEqual(result,expected)
+
     def test_series(self):
 
         # GH6407
