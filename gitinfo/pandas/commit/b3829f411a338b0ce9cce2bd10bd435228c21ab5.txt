commit b3829f411a338b0ce9cce2bd10bd435228c21ab5
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Dec 23 12:55:43 2011 -0500

    ENH: Cythonize AxisProperty to speed up DataFrame.index/columns properties etc., GH #528

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index a2dc6f186..4cc859d51 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -23,10 +23,9 @@ import numpy as np
 import numpy.ma as ma
 
 from pandas.core.common import (isnull, notnull, PandasError, _try_sort,
-                                _default_index, _stringify, _maybe_upcast,
-                                _max_rows, _max_columns)
+                                _default_index, _stringify, _maybe_upcast)
 from pandas.core.daterange import DateRange
-from pandas.core.generic import NDFrame, AxisProperty
+from pandas.core.generic import NDFrame
 from pandas.core.index import Index, MultiIndex, NULL_INDEX, _ensure_index
 from pandas.core.indexing import _NDFrameIndexer, _maybe_droplevels
 from pandas.core.internals import BlockManager, make_block, form_blocks
@@ -894,8 +893,8 @@ class DataFrame(NDFrame):
     #----------------------------------------------------------------------
     # properties for index and columns
 
-    columns = AxisProperty(0)
-    index = AxisProperty(1)
+    columns = lib.AxisProperty(0)
+    index = lib.AxisProperty(1)
 
     def as_matrix(self, columns=None):
         """
@@ -3144,7 +3143,7 @@ class DataFrame(NDFrame):
 
     def rank(self, axis=0):
         """
-        Compute numericaldata ranks (1 through n) along axis. Equal values are
+        Compute numerical data ranks (1 through n) along axis. Equal values are
         assigned a rank that is the average of the ranks of those values
 
         Parameters
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 5a4134ae2..bbf9fde76 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -21,18 +21,6 @@ class Picklable(object):
 class PandasError(Exception):
     pass
 
-class AxisProperty(object):
-
-    def __init__(self, axis=0):
-        self.axis = axis
-
-    def __get__(self, obj, type=None):
-        data = getattr(obj, '_data')
-        return data.axes[self.axis]
-
-    def __set__(self, obj, value):
-        obj._set_axis(self.axis, value)
-
 class PandasObject(Picklable):
 
     _AXIS_NUMBERS = {
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 40809525c..8d67c2583 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -12,11 +12,11 @@ from pandas.core.index import Factor, Index, MultiIndex, _ensure_index
 from pandas.core.indexing import _NDFrameIndexer
 from pandas.core.internals import BlockManager, make_block, form_blocks
 from pandas.core.frame import DataFrame, _union_indexes
-from pandas.core.generic import AxisProperty, NDFrame
+from pandas.core.generic import NDFrame
 from pandas.core.series import Series
 from pandas.util import py3compat
 import pandas.core.common as com
-import pandas._tseries as _tseries
+import pandas._tseries as lib
 
 
 def _ensure_like_indices(time, panels):
@@ -165,9 +165,9 @@ class Panel(NDFrame):
     _default_stat_axis = 1
     _het_axis = 0
 
-    items = AxisProperty(0)
-    major_axis = AxisProperty(1)
-    minor_axis = AxisProperty(2)
+    items = lib.AxisProperty(0)
+    major_axis = lib.AxisProperty(1)
+    minor_axis = lib.AxisProperty(2)
 
     __add__ = _arith_method(operator.add, '__add__')
     __sub__ = _arith_method(operator.sub, '__sub__')
@@ -1031,11 +1031,11 @@ class Panel(NDFrame):
         def f(arr):
             mask = com.notnull(arr)
             if skipna:
-                return _tseries.median(arr[mask])
+                return lib.median(arr[mask])
             else:
                 if not mask.all():
                     return np.nan
-                return _tseries.median(arr)
+                return lib.median(arr)
         return self.apply(f, axis=axis)
 
     _add_docs(median, 'median', 'median')
diff --git a/pandas/src/properties.pyx b/pandas/src/properties.pyx
new file mode 100644
index 000000000..a9f98c978
--- /dev/null
+++ b/pandas/src/properties.pyx
@@ -0,0 +1,43 @@
+from cpython cimport PyDict_Contains, PyDict_GetItem, PyDict_GetItem
+
+cdef class cache_readonly(object):
+
+    cdef readonly:
+        object fget, name
+
+    def __init__(self, func):
+        self.fget = func
+        self.name = func.__name__
+
+    def __get__(self, obj, type):
+        if obj is None:
+            return self.fget
+
+        # Get the cache or set a default one if needed
+
+        cache = getattr(obj, '_cache', None)
+        if cache is None:
+            cache = obj._cache = {}
+
+        if PyDict_Contains(cache, self.name):
+            # not necessary to Py_INCREF
+            val = <object> PyDict_GetItem(cache, self.name)
+            return val
+        else:
+            val = self.fget(obj)
+            PyDict_SetItem(cache, self.name, val)
+            return val
+
+cdef class AxisProperty(object):
+    cdef:
+        Py_ssize_t axis
+
+    def __init__(self, axis=0):
+        self.axis = axis
+
+    def __get__(self, obj, type):
+        cdef list axes = obj._data.axes
+        return axes[self.axis]
+
+    def __set__(self, obj, value):
+        obj._set_axis(self.axis, value)
diff --git a/pandas/src/tseries.pyx b/pandas/src/tseries.pyx
index ad49e74b3..a8fdbe2db 100644
--- a/pandas/src/tseries.pyx
+++ b/pandas/src/tseries.pyx
@@ -468,34 +468,6 @@ def fast_zip(list ndarrays):
 
     return result
 
-cdef class cache_readonly(object):
-
-    cdef readonly:
-        object fget, name
-
-    def __init__(self, func):
-        self.fget = func
-        self.name = func.__name__
-
-    def __get__(self, obj, type):
-        if obj is None:
-            return self.fget
-
-        # Get the cache or set a default one if needed
-
-        cache = getattr(obj, '_cache', None)
-        if cache is None:
-            cache = obj._cache = {}
-
-        if PyDict_Contains(cache, self.name):
-            # not necessary to Py_INCREF
-            val = <object> PyDict_GetItem(cache, self.name)
-            return val
-        else:
-            val = self.fget(obj)
-            PyDict_SetItem(cache, self.name, val)
-            return val
-
 cpdef is_array(object o):
     return np.PyArray_Check(o)
 
@@ -525,3 +497,4 @@ include "generated.pyx"
 include "parsing.pyx"
 include "reduce.pyx"
 include "stats.pyx"
+include "properties.pyx"
