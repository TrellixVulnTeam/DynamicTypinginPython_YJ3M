commit 9d89f513b5d6eb61941a162040f4694b8f03ffca
Author: Garrett Drapala <drapala@gmail.com>
Date:   Sat Apr 5 10:44:35 2014 -0400

    CLN/TST: return Timestamp for .quantile on datetime[ns] series

diff --git a/doc/source/release.rst b/doc/source/release.rst
index fb4f06ac0..cc8e271d6 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -172,6 +172,10 @@ API Changes
   (and numpy defaults)
 - add ``inplace`` keyword to ``Series.order/sort`` to make them inverses (:issue:`6859`)
 
+- Replace ``pandas.compat.scipy.scoreatpercentile`` with ``numpy.percentile`` (:issue:`6810`)
+- ``.quantile`` on a ``datetime[ns]`` series now returns ``Timestamp`` instead
+  of ``np.datetime64`` objects (:issue:`6810`)
+
 Deprecations
 ~~~~~~~~~~~~
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index ccbd15978..6172f87ea 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1235,10 +1235,11 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         valid_values = self.dropna().values
         if len(valid_values) == 0:
             return pa.NA
-        result = _quantile(valid_values, q * 100)
-        if not np.isscalar and com.is_timedelta64_dtype(result):
-            from pandas.tseries.timedeltas import to_timedelta
-            return to_timedelta(result)
+        if com.is_datetime64_dtype(self):
+            values = _values_from_object(self).view('i8')
+            result = lib.Timestamp(_quantile(values, q * 100))
+        else:
+            result = _quantile(valid_values, q * 100)
 
         return result
 
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 44a330193..d1775177d 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -2149,6 +2149,17 @@ class TestSeries(tm.TestCase, CheckNameIntegration):
         q = Series(self.ts,dtype=object).quantile(0.9)
         self.assertEqual(q, percentile(self.ts.valid(), 90))
 
+        # datetime64[ns] dtype
+        dts = self.ts.index.to_series()
+        q = dts.quantile(.2)
+        self.assertEqual(q, Timestamp('2000-01-10 19:12:00'))
+
+        if not _np_version_under1p7:
+            # timedelta64[ns] dtype
+            tds = dts.diff()
+            q = tds.quantile(.25)
+            self.assertEqual(q, pd.to_timedelta('24:00:00'))
+
     def test_describe(self):
         _ = self.series.describe()
         _ = self.ts.describe()
