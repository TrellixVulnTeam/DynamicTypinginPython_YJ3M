commit 41f384c72eec06ef618a5d97368c64419636047f
Author: onesandzeroes <onesandzeroes@github.com>
Date:   Sun Apr 27 10:06:31 2014 +1000

    ERR: Add check for iterators when creating DataFrame
    
    Add test case for iterator data argument
    
    Move the type check up to where other checks are performed
    
    Use asserRaisesRegexp for more specific checking
    
    Add fix to the release notes

diff --git a/doc/source/release.rst b/doc/source/release.rst
index fce5f2f93..705d31695 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -178,6 +178,8 @@ API Changes
 - change ``AssertionError`` to ``TypeError`` for invalid types passed to ``concat`` (:issue:`6583`)
 - Add :class:`~pandas.io.parsers.ParserWarning` class for fallback and option
   validation warnings in :func:`read_csv`/:func:`read_table` (:issue:`6607`)
+- Raise a ``TypeError`` when ``DataFrame`` is passed an iterator as the
+  ``data`` argument (:issue:`5357`)
 
 Deprecations
 ~~~~~~~~~~~~
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 10a0c9050..ba730c0c0 100755
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -253,6 +253,8 @@ class DataFrame(NDFrame):
             else:
                 mgr = self._init_ndarray(data, index, columns, dtype=dtype,
                                          copy=copy)
+        elif isinstance(data, collections.Iterator):
+            raise TypeError("data argument can't be an iterator")
         else:
             try:
                 arr = np.array(data, dtype=dtype, copy=copy)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index d96fbb9ec..fc68449f7 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3135,6 +3135,10 @@ class TestDataFrame(tm.TestCase, CheckIndexing,
         expected = DataFrame([[np.nan, 1], [1, 0]])
         assert_frame_equal(df, expected)
 
+    def test_constructor_iterator_failure(self):
+        with assertRaisesRegexp(TypeError, 'iterator'):
+            df = DataFrame(iter([1, 2, 3]))
+
     def test_constructor_column_duplicates(self):
         # it works! #2079
         df = DataFrame([[8, 5]], columns=['a', 'a'])
