commit ec169082165b4c6587feb48002cdabe2ba38caed
Author: Dale Jung <dale@dalejung.com>
Date:   Fri Apr 4 19:21:31 2014 -0400

    BUG: DataFrame._reduce was converting integers to strings in mixed-type
    case.
    BUG: Remove creating np.array. This allows us to use our own logic for
    promoting dtypes. #6806
    
    BUG: Only convert 0/1 ints to bool. #6806
    
    DOC: added release notes

diff --git a/doc/source/release.rst b/doc/source/release.rst
index 6545d21a4..c57c4560a 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -318,6 +318,8 @@ Bug Fixes
   (:issue:`6762`).
 - Bug in Makefile where it didn't remove Cython generated C files with ``make
   clean`` (:issue:`6768`)
+- Bug in ``DataFrame._reduce`` where non bool-like (0/1) integers were being
+  coverted into bools. (:issue:`6806`)
 
 pandas 0.13.1
 -------------
diff --git a/pandas/core/common.py b/pandas/core/common.py
index 84d22a315..18a3dba1a 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -840,6 +840,9 @@ def _coerce_to_dtypes(result, dtypes):
             elif dtype == _TD_DTYPE:
                 r = _coerce_scalar_to_timedelta_type(r)
             elif dtype == np.bool_:
+                # messy. non 0/1 integers do not get converted.
+                if is_integer(r) and r not in [0,1]:
+                    return int(r)
                 r = bool(r)
             elif dtype.kind == 'f':
                 r = float(r)
@@ -850,7 +853,7 @@ def _coerce_to_dtypes(result, dtypes):
 
         return r
 
-    return np.array([conv(r, dtype) for r, dtype in zip(result, dtypes)])
+    return [conv(r, dtype) for r, dtype in zip(result, dtypes)]
 
 
 def _infer_dtype_from_scalar(val):
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 877e3839e..39e8b4db9 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -10476,6 +10476,18 @@ class TestDataFrame(tm.TestCase, CheckIndexing,
         assert_almost_equal(bool_describe['mean'], 0.4)
         assert_almost_equal(bool_describe['50%'], 0)
 
+    def test_reduce_mixed_frame(self):
+        # GH 6806
+        df = DataFrame({
+            'bool_data': [True, True, False, False, False],
+            'int_data': [10, 20, 30, 40, 50],
+            'string_data': ['a', 'b', 'c', 'd', 'e'],
+        })
+        df.reindex(columns=['bool_data', 'int_data', 'string_data'])
+        test = df.sum(axis=0)
+        assert_almost_equal(test.values, [2, 150, 'abcde'])
+        assert_series_equal(test, df.T.sum(axis=1))
+
     def test_count(self):
         f = lambda s: notnull(s).sum()
         self._check_stat_op('count', f,
