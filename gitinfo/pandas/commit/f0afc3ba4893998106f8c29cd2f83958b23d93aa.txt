commit f0afc3ba4893998106f8c29cd2f83958b23d93aa
Author: Chang She <changshe@gmail.com>
Date:   Sat Jul 14 18:32:10 2012 -0400

    ENH: don't repeat numerical types

diff --git a/pandas/core/strings.py b/pandas/core/strings.py
index 5c17f5a36..2d5c261e7 100644
--- a/pandas/core/strings.py
+++ b/pandas/core/strings.py
@@ -345,14 +345,22 @@ def str_repeat(arr, repeats):
     repeated : array
     """
     if np.isscalar(repeats):
-        f = lambda x: x * repeats
-        return _na_map(f, arr)
+        def rep(x):
+            try:
+                return str.__mul__(x, repeats)
+            except TypeError:
+                return unicode.__mul__(x, repeats)
+        return _na_map(rep, arr)
     else:
+        def rep(x, r):
+            try:
+                return str.__mul__(x, r)
+            except TypeError:
+                return unicode.__mul__(x, r)
         repeats = np.asarray(repeats, dtype=object)
-        result = lib.vec_binop(arr, repeats, operator.mul)
+        result = lib.vec_binop(arr, repeats, str.__mul__)
         return result
 
-
 def str_match(arr, pat):
     """
     Find groups in each string (from beginning) using passed regular expression
diff --git a/pandas/tests/test_strings.py b/pandas/tests/test_strings.py
index 45b830b90..4ae5e6a02 100644
--- a/pandas/tests/test_strings.py
+++ b/pandas/tests/test_strings.py
@@ -179,7 +179,6 @@ class TestStringMethods(unittest.TestCase):
         exp = Series(['a', 'bb', NA, 'cccc', NA, 'dddddd'])
         tm.assert_series_equal(result, exp)
 
-        """
         #mixed
         mixed = Series(['a', NA, 'b', True, datetime.today(), 'foo',
                         None, 1, 2.])
@@ -188,7 +187,6 @@ class TestStringMethods(unittest.TestCase):
         xp = ['aaa', NA, 'bbb', NA, NA, 'foofoofoo', NA, NA, NA]
         self.assert_(isinstance(rs, Series))
         tm.assert_almost_equal(rs, xp)
-        """
 
     def test_match(self):
         values = Series(['fooBAD__barBAD', NA, 'foo'])
