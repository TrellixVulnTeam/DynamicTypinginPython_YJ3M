commit e73d7041d866a79d2457eecd0c056bec25645c12
Author: William Ayd <will_ayd@innobi.io>
Date:   Thu Jul 9 14:57:04 2020 -0700

    Json Visual Clutter cleanup (#35183)

diff --git a/pandas/_libs/src/ujson/python/objToJSON.c b/pandas/_libs/src/ujson/python/objToJSON.c
index e841f0048..59298522d 100644
--- a/pandas/_libs/src/ujson/python/objToJSON.c
+++ b/pandas/_libs/src/ujson/python/objToJSON.c
@@ -143,8 +143,6 @@ typedef struct __PyObjectEncoder {
 
 enum PANDAS_FORMAT { SPLIT, RECORDS, INDEX, COLUMNS, VALUES };
 
-#define PRINTMARK()
-
 int PdBlock_iterNext(JSOBJ, JSONTypeContext *);
 
 void *initObjToJSON(void) {
@@ -219,13 +217,11 @@ static TypeContext *createTypeContext(void) {
 static PyObject *get_values(PyObject *obj) {
     PyObject *values = NULL;
 
-    PRINTMARK();
-
-    if (PyObject_TypeCheck(obj, cls_index) || PyObject_TypeCheck(obj, cls_series)) {
+    if (PyObject_TypeCheck(obj, cls_index) ||
+        PyObject_TypeCheck(obj, cls_series)) {
         // The special cases to worry about are dt64tz and category[dt64tz].
         //  In both cases we want the UTC-localized datetime64 ndarray,
         //  without going through and object array of Timestamps.
-        PRINTMARK();
         values = PyObject_GetAttrString(obj, "values");
 
         if (values == NULL) {
@@ -236,7 +232,6 @@ static PyObject *get_values(PyObject *obj) {
             values = PyObject_CallMethod(values, "__array__", NULL);
         } else if (!PyArray_CheckExact(values)) {
             // Didn't get a numpy array, so keep trying
-            PRINTMARK();
             Py_DECREF(values);
             values = NULL;
         }
@@ -245,7 +240,6 @@ static PyObject *get_values(PyObject *obj) {
     if (values == NULL) {
         PyObject *typeRepr = PyObject_Repr((PyObject *)Py_TYPE(obj));
         PyObject *repr;
-        PRINTMARK();
         if (PyObject_HasAttrString(obj, "dtype")) {
             PyObject *dtype = PyObject_GetAttrString(obj, "dtype");
             repr = PyObject_Repr(dtype);
@@ -369,7 +363,6 @@ static char *PyTimeToJSON(JSOBJ _obj, JSONTypeContext *tc, size_t *outLen) {
 
     str = PyObject_CallMethod(obj, "isoformat", NULL);
     if (str == NULL) {
-        PRINTMARK();
         *outLen = 0;
         if (!PyErr_Occurred()) {
             PyErr_SetString(PyExc_ValueError, "Failed to convert time");
@@ -397,7 +390,6 @@ static char *PyTimeToJSON(JSOBJ _obj, JSONTypeContext *tc, size_t *outLen) {
 static void NpyArr_freeItemValue(JSOBJ Py_UNUSED(_obj), JSONTypeContext *tc) {
     if (GET_TC(tc)->npyarr &&
         GET_TC(tc)->itemValue != GET_TC(tc)->npyarr->array) {
-        PRINTMARK();
         Py_XDECREF(GET_TC(tc)->itemValue);
         GET_TC(tc)->itemValue = NULL;
     }
@@ -417,7 +409,6 @@ void NpyArr_iterBegin(JSOBJ _obj, JSONTypeContext *tc) {
         obj = (PyArrayObject *)_obj;
     }
 
-    PRINTMARK();
     npyarr = PyObject_Malloc(sizeof(NpyArrContext));
     GET_TC(tc)->npyarr = npyarr;
 
@@ -454,7 +445,6 @@ void NpyArr_iterBegin(JSOBJ _obj, JSONTypeContext *tc) {
 
 void NpyArr_iterEnd(JSOBJ obj, JSONTypeContext *tc) {
     NpyArrContext *npyarr = GET_TC(tc)->npyarr;
-    PRINTMARK();
 
     if (npyarr) {
         NpyArr_freeItemValue(obj, tc);
@@ -463,13 +453,10 @@ void NpyArr_iterEnd(JSOBJ obj, JSONTypeContext *tc) {
 }
 
 void NpyArrPassThru_iterBegin(JSOBJ Py_UNUSED(obj),
-                              JSONTypeContext *Py_UNUSED(tc)) {
-    PRINTMARK();
-}
+                              JSONTypeContext *Py_UNUSED(tc)) {}
 
 void NpyArrPassThru_iterEnd(JSOBJ obj, JSONTypeContext *tc) {
     NpyArrContext *npyarr = GET_TC(tc)->npyarr;
-    PRINTMARK();
     // finished this dimension, reset the data pointer
     npyarr->curdim--;
     npyarr->dataptr -= npyarr->stride * npyarr->index[npyarr->stridedim];
@@ -483,28 +470,24 @@ void NpyArrPassThru_iterEnd(JSOBJ obj, JSONTypeContext *tc) {
 
 int NpyArr_iterNextItem(JSOBJ obj, JSONTypeContext *tc) {
     NpyArrContext *npyarr = GET_TC(tc)->npyarr;
-    PRINTMARK();
 
     if (PyErr_Occurred()) {
         return 0;
     }
 
     if (npyarr->index[npyarr->stridedim] >= npyarr->dim) {
-        PRINTMARK();
         return 0;
     }
 
     NpyArr_freeItemValue(obj, tc);
 
     if (PyArray_ISDATETIME(npyarr->array)) {
-        PRINTMARK();
         GET_TC(tc)->itemValue = obj;
         Py_INCREF(obj);
         ((PyObjectEncoder *)tc->encoder)->npyType = PyArray_TYPE(npyarr->array);
         ((PyObjectEncoder *)tc->encoder)->npyValue = npyarr->dataptr;
         ((PyObjectEncoder *)tc->encoder)->npyCtxtPassthru = npyarr;
     } else {
-        PRINTMARK();
         GET_TC(tc)->itemValue = npyarr->getitem(npyarr->dataptr, npyarr->array);
     }
 
@@ -515,16 +498,13 @@ int NpyArr_iterNextItem(JSOBJ obj, JSONTypeContext *tc) {
 
 int NpyArr_iterNext(JSOBJ _obj, JSONTypeContext *tc) {
     NpyArrContext *npyarr = GET_TC(tc)->npyarr;
-    PRINTMARK();
 
     if (PyErr_Occurred()) {
-        PRINTMARK();
         return 0;
     }
 
     if (npyarr->curdim >= npyarr->ndim ||
         npyarr->index[npyarr->stridedim] >= npyarr->dim) {
-        PRINTMARK();
         // innermost dimension, start retrieving item values
         GET_TC(tc)->iterNext = NpyArr_iterNextItem;
         return NpyArr_iterNextItem(_obj, tc);
@@ -545,7 +525,6 @@ int NpyArr_iterNext(JSOBJ _obj, JSONTypeContext *tc) {
 }
 
 JSOBJ NpyArr_iterGetValue(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc) {
-    PRINTMARK();
     return GET_TC(tc)->itemValue;
 }
 
@@ -553,7 +532,6 @@ char *NpyArr_iterGetName(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc,
                          size_t *outLen) {
     NpyArrContext *npyarr = GET_TC(tc)->npyarr;
     npy_intp idx;
-    PRINTMARK();
     char *cStr;
 
     if (GET_TC(tc)->iterNext == NpyArr_iterNextItem) {
@@ -580,7 +558,6 @@ char *NpyArr_iterGetName(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc,
 
 void PdBlockPassThru_iterEnd(JSOBJ obj, JSONTypeContext *tc) {
     PdBlockContext *blkCtxt = GET_TC(tc)->pdblock;
-    PRINTMARK();
 
     if (blkCtxt->transpose) {
         blkCtxt->colIdx++;
@@ -593,7 +570,6 @@ void PdBlockPassThru_iterEnd(JSOBJ obj, JSONTypeContext *tc) {
 
 int PdBlock_iterNextItem(JSOBJ obj, JSONTypeContext *tc) {
     PdBlockContext *blkCtxt = GET_TC(tc)->pdblock;
-    PRINTMARK();
 
     if (blkCtxt->colIdx >= blkCtxt->ncols) {
         return 0;
@@ -610,7 +586,6 @@ char *PdBlock_iterGetName(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc,
     NpyArrContext *npyarr = blkCtxt->npyCtxts[0];
     npy_intp idx;
     char *cStr;
-    PRINTMARK();
 
     if (GET_TC(tc)->iterNext == PdBlock_iterNextItem) {
         idx = blkCtxt->colIdx - 1;
@@ -633,7 +608,6 @@ char *PdBlock_iterGetName_Transpose(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc,
     NpyArrContext *npyarr = blkCtxt->npyCtxts[blkCtxt->colIdx];
     npy_intp idx;
     char *cStr;
-    PRINTMARK();
 
     if (GET_TC(tc)->iterNext == NpyArr_iterNextItem) {
         idx = npyarr->index[npyarr->stridedim] - 1;
@@ -650,7 +624,6 @@ char *PdBlock_iterGetName_Transpose(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc,
 int PdBlock_iterNext(JSOBJ obj, JSONTypeContext *tc) {
     PdBlockContext *blkCtxt = GET_TC(tc)->pdblock;
     NpyArrContext *npyarr;
-    PRINTMARK();
 
     if (PyErr_Occurred() || ((JSONObjectEncoder *)tc->encoder)->errorMsg) {
         return 0;
@@ -675,7 +648,6 @@ int PdBlock_iterNext(JSOBJ obj, JSONTypeContext *tc) {
 
 void PdBlockPassThru_iterBegin(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc) {
     PdBlockContext *blkCtxt = GET_TC(tc)->pdblock;
-    PRINTMARK();
 
     if (blkCtxt->transpose) {
         // if transposed we exhaust each column before moving to the next
@@ -697,7 +669,6 @@ void PdBlock_iterBegin(JSOBJ _obj, JSONTypeContext *tc) {
     npy_int64 colIdx;
     npy_intp idx;
 
-    PRINTMARK();
     obj = (PyObject *)_obj;
 
     GET_TC(tc)->iterGetName = GET_TC(tc)->transpose
@@ -744,8 +715,8 @@ void PdBlock_iterBegin(JSOBJ _obj, JSONTypeContext *tc) {
         GET_TC(tc)->iterNext = NpyArr_iterNextNone;
         return;
     } else if (!PyTuple_Check(blocks)) {
-      PyErr_SetString(PyExc_TypeError, "blocks must be a tuple!");
-      goto BLKRET;
+        PyErr_SetString(PyExc_TypeError, "blocks must be a tuple!");
+        goto BLKRET;
     }
 
     // force transpose so each NpyArrContext strides down its column
@@ -836,7 +807,6 @@ void PdBlock_iterEnd(JSOBJ obj, JSONTypeContext *tc) {
     PdBlockContext *blkCtxt;
     NpyArrContext *npyarr;
     int i;
-    PRINTMARK();
 
     GET_TC(tc)->itemValue = NULL;
     npyarr = GET_TC(tc)->npyarr;
@@ -948,7 +918,7 @@ JSOBJ Set_iterGetValue(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc) {
 }
 
 char *Set_iterGetName(JSOBJ Py_UNUSED(obj), JSONTypeContext *Py_UNUSED(tc),
-                       size_t *Py_UNUSED(outLen)) {
+                      size_t *Py_UNUSED(outLen)) {
     return NULL;
 }
 
@@ -961,7 +931,6 @@ void Dir_iterBegin(JSOBJ obj, JSONTypeContext *tc) {
     GET_TC(tc)->attrList = PyObject_Dir(obj);
     GET_TC(tc)->index = 0;
     GET_TC(tc)->size = PyList_GET_SIZE(GET_TC(tc)->attrList);
-    PRINTMARK();
 }
 
 void Dir_iterEnd(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc) {
@@ -976,7 +945,6 @@ void Dir_iterEnd(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc) {
     }
 
     Py_DECREF((PyObject *)GET_TC(tc)->attrList);
-    PRINTMARK();
 }
 
 int Dir_iterNext(JSOBJ _obj, JSONTypeContext *tc) {
@@ -1007,7 +975,6 @@ int Dir_iterNext(JSOBJ _obj, JSONTypeContext *tc) {
         attrStr = PyBytes_AS_STRING(attr);
 
         if (attrStr[0] == '_') {
-            PRINTMARK();
             Py_DECREF(attr);
             continue;
         }
@@ -1016,14 +983,12 @@ int Dir_iterNext(JSOBJ _obj, JSONTypeContext *tc) {
         if (itemValue == NULL) {
             PyErr_Clear();
             Py_DECREF(attr);
-            PRINTMARK();
             continue;
         }
 
         if (PyCallable_Check(itemValue)) {
             Py_DECREF(itemValue);
             Py_DECREF(attr);
-            PRINTMARK();
             continue;
         }
 
@@ -1031,7 +996,6 @@ int Dir_iterNext(JSOBJ _obj, JSONTypeContext *tc) {
         GET_TC(tc)->itemValue = itemValue;
         GET_TC(tc)->index++;
 
-        PRINTMARK();
         itemName = attr;
         break;
     }
@@ -1046,18 +1010,15 @@ int Dir_iterNext(JSOBJ _obj, JSONTypeContext *tc) {
     GET_TC(tc)->itemValue = itemValue;
     GET_TC(tc)->index++;
 
-    PRINTMARK();
     return 1;
 }
 
 JSOBJ Dir_iterGetValue(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc) {
-    PRINTMARK();
     return GET_TC(tc)->itemValue;
 }
 
 char *Dir_iterGetName(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc,
                       size_t *outLen) {
-    PRINTMARK();
     *outLen = PyBytes_GET_SIZE(GET_TC(tc)->itemName);
     return PyBytes_AS_STRING(GET_TC(tc)->itemName);
 }
@@ -1073,7 +1034,6 @@ void List_iterBegin(JSOBJ obj, JSONTypeContext *tc) {
 
 int List_iterNext(JSOBJ obj, JSONTypeContext *tc) {
     if (GET_TC(tc)->index >= GET_TC(tc)->size) {
-        PRINTMARK();
         return 0;
     }
 
@@ -1102,7 +1062,6 @@ void Index_iterBegin(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc) {
     if (!GET_TC(tc)->cStr) {
         PyErr_NoMemory();
     }
-    PRINTMARK();
 }
 
 int Index_iterNext(JSOBJ obj, JSONTypeContext *tc) {
@@ -1123,18 +1082,14 @@ int Index_iterNext(JSOBJ obj, JSONTypeContext *tc) {
             return 0;
         }
     } else {
-        PRINTMARK();
         return 0;
     }
 
     GET_TC(tc)->index++;
-    PRINTMARK();
     return 1;
 }
 
-void Index_iterEnd(JSOBJ Py_UNUSED(obj), JSONTypeContext *Py_UNUSED(tc)) {
-    PRINTMARK();
-}
+void Index_iterEnd(JSOBJ Py_UNUSED(obj), JSONTypeContext *Py_UNUSED(tc)) {}
 
 JSOBJ Index_iterGetValue(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc) {
     return GET_TC(tc)->itemValue;
@@ -1157,7 +1112,6 @@ void Series_iterBegin(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc) {
     if (!GET_TC(tc)->cStr) {
         PyErr_NoMemory();
     }
-    PRINTMARK();
 }
 
 int Series_iterNext(JSOBJ obj, JSONTypeContext *tc) {
@@ -1181,19 +1135,16 @@ int Series_iterNext(JSOBJ obj, JSONTypeContext *tc) {
             return 0;
         }
     } else {
-        PRINTMARK();
         return 0;
     }
 
     GET_TC(tc)->index++;
-    PRINTMARK();
     return 1;
 }
 
 void Series_iterEnd(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc) {
     PyObjectEncoder *enc = (PyObjectEncoder *)tc->encoder;
     enc->outputFormat = enc->originalOutputFormat;
-    PRINTMARK();
 }
 
 JSOBJ Series_iterGetValue(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc) {
@@ -1217,7 +1168,6 @@ void DataFrame_iterBegin(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc) {
     if (!GET_TC(tc)->cStr) {
         PyErr_NoMemory();
     }
-    PRINTMARK();
 }
 
 int DataFrame_iterNext(JSOBJ obj, JSONTypeContext *tc) {
@@ -1246,19 +1196,16 @@ int DataFrame_iterNext(JSOBJ obj, JSONTypeContext *tc) {
             GET_TC(tc)->itemValue = obj;
         }
     } else {
-        PRINTMARK();
         return 0;
     }
 
     GET_TC(tc)->index++;
-    PRINTMARK();
     return 1;
 }
 
 void DataFrame_iterEnd(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc) {
     PyObjectEncoder *enc = (PyObjectEncoder *)tc->encoder;
     enc->outputFormat = enc->originalOutputFormat;
-    PRINTMARK();
 }
 
 JSOBJ DataFrame_iterGetValue(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc) {
@@ -1278,7 +1225,6 @@ char *DataFrame_iterGetName(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc,
 //=============================================================================
 void Dict_iterBegin(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc) {
     GET_TC(tc)->index = 0;
-    PRINTMARK();
 }
 
 int Dict_iterNext(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc) {
@@ -1291,7 +1237,6 @@ int Dict_iterNext(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc) {
 
     if (!PyDict_Next((PyObject *)GET_TC(tc)->dictObj, &GET_TC(tc)->index,
                      &GET_TC(tc)->itemName, &GET_TC(tc)->itemValue)) {
-        PRINTMARK();
         return 0;
     }
 
@@ -1305,7 +1250,6 @@ int Dict_iterNext(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc) {
     } else {
         Py_INCREF(GET_TC(tc)->itemName);
     }
-    PRINTMARK();
     return 1;
 }
 
@@ -1315,7 +1259,6 @@ void Dict_iterEnd(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc) {
         GET_TC(tc)->itemName = NULL;
     }
     Py_DECREF(GET_TC(tc)->dictObj);
-    PRINTMARK();
 }
 
 JSOBJ Dict_iterGetValue(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc) {
@@ -1366,7 +1309,6 @@ char **NpyArr_encodeLabels(PyArrayObject *labels, PyObjectEncoder *enc,
     char *dataptr, *cLabel;
     int type_num;
     NPY_DATETIMEUNIT base = enc->datetimeUnit;
-    PRINTMARK();
 
     if (!labels) {
         return 0;
@@ -1425,8 +1367,7 @@ char **NpyArr_encodeLabels(PyArrayObject *labels, PyObjectEncoder *enc,
                                  1000000000LL; // nanoseconds per second
                 } else {
                     // datetime.* objects don't follow above rules
-                    nanosecVal =
-                        PyDateTimeToEpoch(item, NPY_FR_ns);
+                    nanosecVal = PyDateTimeToEpoch(item, NPY_FR_ns);
                 }
             }
         }
@@ -1503,7 +1444,6 @@ char **NpyArr_encodeLabels(PyArrayObject *labels, PyObjectEncoder *enc,
 
 void Object_invokeDefaultHandler(PyObject *obj, PyObjectEncoder *enc) {
     PyObject *tmpObj = NULL;
-    PRINTMARK();
     tmpObj = PyObject_CallFunctionObjArgs(enc->defaultHandler, obj, NULL);
     if (!PyErr_Occurred()) {
         if (tmpObj == NULL) {
@@ -1524,7 +1464,6 @@ void Object_beginTypeContext(JSOBJ _obj, JSONTypeContext *tc) {
     double val;
     npy_int64 value;
     int unit;
-    PRINTMARK();
 
     tc->prv = NULL;
 
@@ -1537,11 +1476,9 @@ void Object_beginTypeContext(JSOBJ _obj, JSONTypeContext *tc) {
     enc = (PyObjectEncoder *)tc->encoder;
 
     if (PyBool_Check(obj)) {
-        PRINTMARK();
         tc->type = (obj == Py_True) ? JT_TRUE : JT_FALSE;
         return;
     } else if (obj == Py_None) {
-        PRINTMARK();
         tc->type = JT_NULL;
         return;
     }
@@ -1554,7 +1491,6 @@ void Object_beginTypeContext(JSOBJ _obj, JSONTypeContext *tc) {
     tc->prv = pc;
 
     if (PyTypeNum_ISDATETIME(enc->npyType)) {
-        PRINTMARK();
         int64_t longVal;
         PyArray_VectorUnaryFunc *castfunc =
             PyArray_GetCastFunc(PyArray_DescrFromType(enc->npyType), NPY_INT64);
@@ -1564,12 +1500,10 @@ void Object_beginTypeContext(JSOBJ _obj, JSONTypeContext *tc) {
         }
         castfunc(enc->npyValue, &longVal, 1, NULL, NULL);
         if (longVal == get_nat()) {
-            PRINTMARK();
             tc->type = JT_NULL;
         } else {
 
             if (enc->datetimeIso) {
-                PRINTMARK();
                 if (enc->npyType == NPY_TIMEDELTA) {
                     pc->PyTypeToUTF8 = NpyTimeDeltaToIsoCallback;
                 } else {
@@ -1580,7 +1514,6 @@ void Object_beginTypeContext(JSOBJ _obj, JSONTypeContext *tc) {
                 GET_TC(tc)->longValue = longVal;
                 tc->type = JT_UTF8;
             } else {
-                PRINTMARK();
                 NPY_DATETIMEUNIT base =
                     ((PyObjectEncoder *)tc->encoder)->datetimeUnit;
                 GET_TC(tc)->longValue = NpyDateTimeToEpoch(longVal, base);
@@ -1597,30 +1530,24 @@ void Object_beginTypeContext(JSOBJ _obj, JSONTypeContext *tc) {
 
     if (PyIter_Check(obj) ||
         (PyArray_Check(obj) && !PyArray_CheckScalar(obj))) {
-        PRINTMARK();
         goto ISITERABLE;
     }
 
     if (PyLong_Check(obj)) {
-        PRINTMARK();
         tc->type = JT_LONG;
         int overflow = 0;
         GET_TC(tc)->longValue = PyLong_AsLongLongAndOverflow(obj, &overflow);
         int err;
         err = (GET_TC(tc)->longValue == -1) && PyErr_Occurred();
 
-        if (overflow){
-            PRINTMARK();
+        if (overflow) {
             tc->type = JT_BIGNUM;
-        }
-        else if (err) {
-            PRINTMARK();
+        } else if (err) {
             goto INVALID;
         }
-        
+
         return;
     } else if (PyFloat_Check(obj)) {
-        PRINTMARK();
         val = PyFloat_AS_DOUBLE(obj);
         if (npy_isnan(val) || npy_isinf(val)) {
             tc->type = JT_NULL;
@@ -1630,80 +1557,61 @@ void Object_beginTypeContext(JSOBJ _obj, JSONTypeContext *tc) {
         }
         return;
     } else if (PyBytes_Check(obj)) {
-        PRINTMARK();
         pc->PyTypeToUTF8 = PyBytesToUTF8;
         tc->type = JT_UTF8;
         return;
     } else if (PyUnicode_Check(obj)) {
-        PRINTMARK();
         pc->PyTypeToUTF8 = PyUnicodeToUTF8;
         tc->type = JT_UTF8;
         return;
     } else if (PyObject_TypeCheck(obj, type_decimal)) {
-        PRINTMARK();
         GET_TC(tc)->doubleValue = PyFloat_AsDouble(obj);
         tc->type = JT_DOUBLE;
         return;
     } else if (PyDateTime_Check(obj) || PyDate_Check(obj)) {
         if (PyObject_TypeCheck(obj, cls_nat)) {
-            PRINTMARK();
             tc->type = JT_NULL;
             return;
         }
 
-        PRINTMARK();
         if (enc->datetimeIso) {
-            PRINTMARK();
             pc->PyTypeToUTF8 = PyDateTimeToIsoCallback;
             tc->type = JT_UTF8;
         } else {
-            PRINTMARK();
             NPY_DATETIMEUNIT base =
                 ((PyObjectEncoder *)tc->encoder)->datetimeUnit;
-            GET_TC(tc)->longValue =
-                PyDateTimeToEpoch(obj, base);
+            GET_TC(tc)->longValue = PyDateTimeToEpoch(obj, base);
             tc->type = JT_LONG;
         }
         return;
     } else if (PyTime_Check(obj)) {
-        PRINTMARK();
         pc->PyTypeToUTF8 = PyTimeToJSON;
         tc->type = JT_UTF8;
         return;
     } else if (PyArray_IsScalar(obj, Datetime)) {
-        PRINTMARK();
         if (((PyDatetimeScalarObject *)obj)->obval == get_nat()) {
-            PRINTMARK();
             tc->type = JT_NULL;
             return;
         }
 
-        PRINTMARK();
         if (enc->datetimeIso) {
-            PRINTMARK();
             pc->PyTypeToUTF8 = PyDateTimeToIsoCallback;
             tc->type = JT_UTF8;
         } else {
-            PRINTMARK();
             NPY_DATETIMEUNIT base =
                 ((PyObjectEncoder *)tc->encoder)->datetimeUnit;
-            GET_TC(tc)->longValue =
-                PyDateTimeToEpoch(obj, base);
+            GET_TC(tc)->longValue = PyDateTimeToEpoch(obj, base);
             tc->type = JT_LONG;
         }
         return;
     } else if (PyDelta_Check(obj)) {
         if (PyObject_HasAttrString(obj, "value")) {
-            PRINTMARK();
             value = get_long_attr(obj, "value");
         } else {
-            PRINTMARK();
             value = total_seconds(obj) * 1000000000LL; // nanoseconds per second
         }
 
-        PRINTMARK();
         if (value == get_nat()) {
-            PRINTMARK();
             tc->type = JT_NULL;
             return;
         } else if (enc->datetimeIso) {
@@ -1718,7 +1626,6 @@ void Object_beginTypeContext(JSOBJ _obj, JSONTypeContext *tc) {
             exc = PyErr_Occurred();
 
             if (exc && PyErr_ExceptionMatches(PyExc_OverflowError)) {
-                PRINTMARK();
                 goto INVALID;
             }
 
@@ -1727,7 +1634,6 @@ void Object_beginTypeContext(JSOBJ _obj, JSONTypeContext *tc) {
         GET_TC(tc)->longValue = value;
         return;
     } else if (PyArray_IsScalar(obj, Integer)) {
-        PRINTMARK();
         tc->type = JT_LONG;
         PyArray_CastScalarToCtype(obj, &(GET_TC(tc)->longValue),
                                   PyArray_DescrFromType(NPY_INT64));
@@ -1735,19 +1641,16 @@ void Object_beginTypeContext(JSOBJ _obj, JSONTypeContext *tc) {
         exc = PyErr_Occurred();
 
         if (exc && PyErr_ExceptionMatches(PyExc_OverflowError)) {
-            PRINTMARK();
             goto INVALID;
         }
 
         return;
     } else if (PyArray_IsScalar(obj, Bool)) {
-        PRINTMARK();
         PyArray_CastScalarToCtype(obj, &(GET_TC(tc)->longValue),
                                   PyArray_DescrFromType(NPY_BOOL));
         tc->type = (GET_TC(tc)->longValue) ? JT_TRUE : JT_FALSE;
         return;
     } else if (PyArray_IsScalar(obj, Float) || PyArray_IsScalar(obj, Double)) {
-        PRINTMARK();
         PyArray_CastScalarToCtype(obj, &(GET_TC(tc)->doubleValue),
                                   PyArray_DescrFromType(NPY_DOUBLE));
         tc->type = JT_DOUBLE;
@@ -1758,7 +1661,6 @@ void Object_beginTypeContext(JSOBJ _obj, JSONTypeContext *tc) {
                      obj);
         goto INVALID;
     } else if (PyObject_TypeCheck(obj, cls_na)) {
-        PRINTMARK();
         tc->type = JT_NULL;
         return;
     }
@@ -1767,7 +1669,6 @@ ISITERABLE:
 
     if (PyObject_TypeCheck(obj, cls_index)) {
         if (enc->outputFormat == SPLIT) {
-            PRINTMARK();
             tc->type = JT_OBJECT;
             pc->iterBegin = Index_iterBegin;
             pc->iterEnd = Index_iterEnd;
@@ -1779,7 +1680,6 @@ ISITERABLE:
 
         pc->newObj = get_values(obj);
         if (pc->newObj) {
-            PRINTMARK();
             tc->type = JT_ARRAY;
             pc->iterBegin = NpyArr_iterBegin;
             pc->iterEnd = NpyArr_iterEnd;
@@ -1793,7 +1693,6 @@ ISITERABLE:
         return;
     } else if (PyObject_TypeCheck(obj, cls_series)) {
         if (enc->outputFormat == SPLIT) {
-            PRINTMARK();
             tc->type = JT_OBJECT;
             pc->iterBegin = Series_iterBegin;
             pc->iterEnd = Series_iterEnd;
@@ -1809,7 +1708,6 @@ ISITERABLE:
         }
 
         if (enc->outputFormat == INDEX || enc->outputFormat == COLUMNS) {
-            PRINTMARK();
             tc->type = JT_OBJECT;
             tmpObj = PyObject_GetAttrString(obj, "index");
             if (!tmpObj) {
@@ -1827,7 +1725,6 @@ ISITERABLE:
                 goto INVALID;
             }
         } else {
-            PRINTMARK();
             tc->type = JT_ARRAY;
         }
         pc->iterBegin = NpyArr_iterBegin;
@@ -1838,7 +1735,6 @@ ISITERABLE:
         return;
     } else if (PyArray_Check(obj)) {
         if (enc->npyCtxtPassthru) {
-            PRINTMARK();
             pc->npyarr = enc->npyCtxtPassthru;
             tc->type = (pc->npyarr->columnLabels ? JT_OBJECT : JT_ARRAY);
 
@@ -1852,7 +1748,6 @@ ISITERABLE:
             return;
         }
 
-        PRINTMARK();
         tc->type = JT_ARRAY;
         pc->iterBegin = NpyArr_iterBegin;
         pc->iterEnd = NpyArr_iterEnd;
@@ -1862,7 +1757,6 @@ ISITERABLE:
         return;
     } else if (PyObject_TypeCheck(obj, cls_dataframe)) {
         if (enc->blkCtxtPassthru) {
-            PRINTMARK();
             pc->pdblock = enc->blkCtxtPassthru;
             tc->type =
                 (pc->pdblock->npyCtxts[0]->columnLabels ? JT_OBJECT : JT_ARRAY);
@@ -1878,7 +1772,6 @@ ISITERABLE:
         }
 
         if (enc->outputFormat == SPLIT) {
-            PRINTMARK();
             tc->type = JT_OBJECT;
             pc->iterBegin = DataFrame_iterBegin;
             pc->iterEnd = DataFrame_iterEnd;
@@ -1888,7 +1781,6 @@ ISITERABLE:
             return;
         }
 
-        PRINTMARK();
         if (is_simple_frame(obj)) {
             pc->iterBegin = NpyArr_iterBegin;
             pc->iterEnd = NpyArr_iterEnd;
@@ -1908,10 +1800,8 @@ ISITERABLE:
         pc->iterGetValue = NpyArr_iterGetValue;
 
         if (enc->outputFormat == VALUES) {
-            PRINTMARK();
             tc->type = JT_ARRAY;
         } else if (enc->outputFormat == RECORDS) {
-            PRINTMARK();
             tc->type = JT_ARRAY;
             tmpObj = PyObject_GetAttrString(obj, "columns");
             if (!tmpObj) {
@@ -1930,7 +1820,6 @@ ISITERABLE:
                 goto INVALID;
             }
         } else if (enc->outputFormat == INDEX || enc->outputFormat == COLUMNS) {
-            PRINTMARK();
             tc->type = JT_OBJECT;
             tmpObj = (enc->outputFormat == INDEX
                           ? PyObject_GetAttrString(obj, "index")
@@ -1973,7 +1862,6 @@ ISITERABLE:
             }
 
             if (enc->outputFormat == COLUMNS) {
-                PRINTMARK();
                 pc->transpose = 1;
             }
         } else {
@@ -1981,7 +1869,6 @@ ISITERABLE:
         }
         return;
     } else if (PyDict_Check(obj)) {
-        PRINTMARK();
         tc->type = JT_OBJECT;
         pc->iterBegin = Dict_iterBegin;
         pc->iterEnd = Dict_iterEnd;
@@ -1993,7 +1880,6 @@ ISITERABLE:
 
         return;
     } else if (PyList_Check(obj)) {
-        PRINTMARK();
         tc->type = JT_ARRAY;
         pc->iterBegin = List_iterBegin;
         pc->iterEnd = List_iterEnd;
@@ -2002,7 +1888,6 @@ ISITERABLE:
         pc->iterGetName = List_iterGetName;
         return;
     } else if (PyTuple_Check(obj)) {
-        PRINTMARK();
         tc->type = JT_ARRAY;
         pc->iterBegin = Tuple_iterBegin;
         pc->iterEnd = Tuple_iterEnd;
@@ -2011,7 +1896,6 @@ ISITERABLE:
         pc->iterGetName = Tuple_iterGetName;
         return;
     } else if (PyAnySet_Check(obj)) {
-        PRINTMARK();
         tc->type = JT_ARRAY;
         pc->iterBegin = Set_iterBegin;
         pc->iterEnd = Set_iterEnd;
@@ -2041,7 +1925,6 @@ ISITERABLE:
             return;
         }
 
-        PRINTMARK();
         tc->type = JT_OBJECT;
         pc->iterBegin = Dict_iterBegin;
         pc->iterEnd = Dict_iterEnd;
@@ -2059,7 +1942,6 @@ ISITERABLE:
         goto INVALID;
     }
 
-    PRINTMARK();
     tc->type = JT_OBJECT;
     pc->iterBegin = Dir_iterBegin;
     pc->iterEnd = Dir_iterEnd;
@@ -2076,7 +1958,6 @@ INVALID:
 }
 
 void Object_endTypeContext(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc) {
-    PRINTMARK();
     if (tc->prv) {
         Py_XDECREF(GET_TC(tc)->newObj);
         GET_TC(tc)->newObj = NULL;
@@ -2105,16 +1986,16 @@ double Object_getDoubleValue(JSOBJ Py_UNUSED(obj), JSONTypeContext *tc) {
     return GET_TC(tc)->doubleValue;
 }
 
-const char *Object_getBigNumStringValue(JSOBJ obj, JSONTypeContext *tc, 
-                                    size_t *_outLen) {
-    PyObject* repr = PyObject_Str(obj);
-    const char *str = PyUnicode_AsUTF8AndSize(repr, (Py_ssize_t *) _outLen);
-    char* bytes = PyObject_Malloc(*_outLen + 1);
+const char *Object_getBigNumStringValue(JSOBJ obj, JSONTypeContext *tc,
+                                        size_t *_outLen) {
+    PyObject *repr = PyObject_Str(obj);
+    const char *str = PyUnicode_AsUTF8AndSize(repr, (Py_ssize_t *)_outLen);
+    char *bytes = PyObject_Malloc(*_outLen + 1);
     memcpy(bytes, str, *_outLen + 1);
     GET_TC(tc)->cStr = bytes;
 
     Py_DECREF(repr);
-    
+
     return GET_TC(tc)->cStr;
 }
 
@@ -2200,8 +2081,6 @@ PyObject *objToJSON(PyObject *Py_UNUSED(self), PyObject *args,
     pyEncoder.outputFormat = COLUMNS;
     pyEncoder.defaultHandler = 0;
 
-    PRINTMARK();
-
     if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O|OiOssOOi", kwlist,
                                      &oinput, &oensureAscii, &idoublePrecision,
                                      &oencodeHTMLChars, &sOrient, &sdateFormat,
@@ -2274,16 +2153,12 @@ PyObject *objToJSON(PyObject *Py_UNUSED(self), PyObject *args,
     encoder->indent = indent;
 
     pyEncoder.originalOutputFormat = pyEncoder.outputFormat;
-    PRINTMARK();
     ret = JSON_EncodeObject(oinput, encoder, buffer, sizeof(buffer));
-    PRINTMARK();
     if (PyErr_Occurred()) {
-        PRINTMARK();
         return NULL;
     }
 
     if (encoder->errorMsg) {
-        PRINTMARK();
         if (ret != buffer) {
             encoder->free(ret);
         }
@@ -2297,7 +2172,5 @@ PyObject *objToJSON(PyObject *Py_UNUSED(self), PyObject *args,
         encoder->free(ret);
     }
 
-    PRINTMARK();
-
     return newobj;
 }
