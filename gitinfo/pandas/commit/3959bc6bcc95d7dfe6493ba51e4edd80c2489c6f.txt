commit 3959bc6bcc95d7dfe6493ba51e4edd80c2489c6f
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Sep 6 15:12:43 2011 -0400

    REF: LongPanel is now no longer a 'Panel'. added level option to Series.count. fixed up OLS classes now that LongPanel works a bit differently. more testing / spot checking of results needed

diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 4b76e901c..70d5f4ae6 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -90,19 +90,7 @@ class Panel(object):
     """
     Abstract superclass for LongPanel and WidePanel data structures
     """
-
-    __add__ = _arith_method(operator.add, '__add__')
-    __sub__ = _arith_method(operator.sub, '__sub__')
-    __mul__ = _arith_method(operator.mul, '__mul__')
-    __div__ = _arith_method(operator.div, '__div__')
-    __pow__ = _arith_method(operator.pow, '__pow__')
-
-    __radd__ = _arith_method(operator.add, '__radd__')
-    __rmul__ = _arith_method(operator.mul, '__rmul__')
-    __rsub__ = _arith_method(lambda x, y: y - x, '__rsub__')
-    __rdiv__ = _arith_method(lambda x, y: y / x, '__rdiv__')
-    __rpow__ = _arith_method(lambda x, y: y ** x, '__rpow__')
-
+    pass
 
 class WidePanel(Panel, NDFrame):
     _AXIS_NUMBERS = {
@@ -129,6 +117,18 @@ class WidePanel(Panel, NDFrame):
     major_axis = AxisProperty(1)
     minor_axis = AxisProperty(2)
 
+    __add__ = _arith_method(operator.add, '__add__')
+    __sub__ = _arith_method(operator.sub, '__sub__')
+    __mul__ = _arith_method(operator.mul, '__mul__')
+    __div__ = _arith_method(operator.div, '__div__')
+    __pow__ = _arith_method(operator.pow, '__pow__')
+
+    __radd__ = _arith_method(operator.add, '__radd__')
+    __rmul__ = _arith_method(operator.mul, '__rmul__')
+    __rsub__ = _arith_method(lambda x, y: y - x, '__rsub__')
+    __rdiv__ = _arith_method(lambda x, y: y / x, '__rdiv__')
+    __rpow__ = _arith_method(lambda x, y: y ** x, '__rpow__')
+
     def __init__(self, data, items=None, major_axis=None, minor_axis=None,
                  copy=False, dtype=None):
         """
@@ -492,7 +492,7 @@ class WidePanel(Panel, NDFrame):
                             minor=other.minor_axis, method=method)
 
     def _combine(self, other, func, axis=0):
-        if isinstance(other, Panel):
+        if isinstance(other, (Panel, LongPanel)):
             return self._combine_panel(other, func)
         elif isinstance(other, DataFrame):
             return self._combine_frame(other, func, axis=axis)
@@ -974,7 +974,7 @@ class WidePanel(Panel, NDFrame):
 # LongPanel and friends
 
 
-class LongPanel(Panel, DataFrame):
+class LongPanel(DataFrame):
     """
     Represents long or "stacked" format panel data
 
@@ -1060,13 +1060,15 @@ class LongPanel(Panel, DataFrame):
     def _combine(self, other, func, axis='items'):
         if isinstance(other, Panel):
             return self._combine_panel(other, func)
+        elif isinstance(other, LongPanel):
+            return self._combine_frame(other, func)
         elif isinstance(other, DataFrame):
-            return self._combine_frame(other, func, axis=axis)
+            return self._combine_panel_frame(other, func, axis=axis)
         elif np.isscalar(other):
             return LongPanel(func(self.values, other), columns=self.items,
                              index=self.index)
 
-    def _combine_frame(self, other, func, axis='items'):
+    def _combine_panel_frame(self, other, func, axis='items'):
         """
         Arithmetic op
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index a5583dd3b..98c2bedab 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -473,7 +473,7 @@ copy : boolean, default False
 
     # TODO: integrate bottleneck
 
-    def count(self):
+    def count(self, level=None):
         """
         Return number of non-NA/null observations in the Series
 
@@ -481,8 +481,41 @@ copy : boolean, default False
         -------
         nobs : int
         """
+        if level is not None:
+            return self._count_level(level)
+
         return notnull(self.values).sum()
 
+    def _count_level(self, level):
+        # TODO: GENERALIZE CODE OVERLAP WITH DATAFRAME
+        # TODO: deal with sortedness??
+        obj = self.sortlevel(level)
+        mask = notnull(obj.values)
+
+        level_index = obj.index.levels[level]
+
+        n = len(level_index)
+        locs = obj.index.labels[level].searchsorted(np.arange(n))
+
+        # WORKAROUND: reduceat fusses about the endpoints. should file ticket?
+        start = locs.searchsorted(0, side='right') - 1
+        end = locs.searchsorted(len(mask), side='left')
+
+        result = np.zeros((n), dtype=int)
+        out = result[start:end]
+        np.add.reduceat(mask, locs[start:end], out=out)
+
+        # WORKAROUND: to see why, try this
+        # arr = np.ones((10, 4), dtype=bool)
+        # np.add.reduceat(arr, [0, 3, 3, 7, 9], axis=0)
+
+        # this stinks
+        if len(locs) > 1:
+            workaround_mask = locs[:-1] == locs[1:]
+            result[:-1][workaround_mask] = 0
+
+        return Series(result, index=level_index)
+
     def sum(self, axis=0, dtype=None, out=None):
         """
         Sum of non-NA/null values
diff --git a/pandas/stats/fama_macbeth.py b/pandas/stats/fama_macbeth.py
index 687332a14..1e1839e24 100644
--- a/pandas/stats/fama_macbeth.py
+++ b/pandas/stats/fama_macbeth.py
@@ -155,7 +155,7 @@ class MovingFamaMacBeth(FamaMacBeth):
             x_effects=x_effects, cluster=cluster,
             dropped_dummies=dropped_dummies, verbose=verbose)
 
-        self._index = self._ols_result._y.major_axis
+        self._index = self._ols_result._index
         self._T = len(self._index)
 
     @property
diff --git a/pandas/stats/ols.py b/pandas/stats/ols.py
index 8cf20b7e3..ff231689f 100644
--- a/pandas/stats/ols.py
+++ b/pandas/stats/ols.py
@@ -10,6 +10,7 @@ from StringIO import StringIO
 import numpy as np
 
 from pandas.core.api import DataFrame, Series
+from pandas.core.index import MultiIndex
 from pandas.core.panel import WidePanel, LongPanel
 from pandas.util.decorators import cache_readonly
 import pandas.stats.common as common
@@ -767,14 +768,16 @@ class MovingOLS(OLS):
                 i = _get_index(dt)
                 return df.values[i:i+1]
 
-        if isinstance(y, Series):
-            _y_get_index = y.index.get_loc
-            _values = y.values
+        _y_get_index = y.index.get_loc
+        _values = y.values
+        if isinstance(y.index, MultiIndex):
+            def y_slicer(df, dt):
+                loc = _y_get_index(dt)
+                return _values[loc]
+        else:
             def y_slicer(df, dt):
                 i = _y_get_index(dt)
                 return _values[i:i+1]
-        else:
-            y_slicer = lambda s, dt: _y_converter(s.truncate(dt, dt))
 
         last = np.zeros(len(x.columns))
         for i, date in enumerate(dates):
diff --git a/pandas/stats/plm.py b/pandas/stats/plm.py
index 968b87747..b4132051e 100644
--- a/pandas/stats/plm.py
+++ b/pandas/stats/plm.py
@@ -90,7 +90,7 @@ class PanelOLS(OLS):
         self._x_trans_raw = self._x_trans.values
         self._y_trans_raw = self._y_trans.values.squeeze()
 
-        self._index = self._y.major_axis
+        self._index = self._x.major_axis
 
         self._T = len(self._index)
 
@@ -125,7 +125,10 @@ class PanelOLS(OLS):
 
         if self._time_effects:
             x_regressor = x.subtract(x.mean('minor', broadcast=True))
-            y_regressor = y.subtract(y.mean('minor', broadcast=True))
+
+            unstacked_y = y.unstack()
+            y_regressor = unstacked_y.sub(unstacked_y.mean(1), axis=0).stack()
+            y_regressor.index = y.index
 
         elif self._intercept:
             # only add intercept when no time effects
@@ -139,8 +142,10 @@ class PanelOLS(OLS):
             y_regressor = y
 
         if weights is not None:
-            y_regressor = y_regressor.multiply(weights)
-            x_regressor = x_regressor.multiply(weights)
+            assert(y_regressor.index is weights.index)
+            assert(x_regressor.index is weights.index)
+            y_regressor = y_regressor * weights
+            x_regressor = x_regressor.mul(weights, axis=0)
 
         return x, x_regressor, x_filtered, y, y_regressor
 
@@ -184,15 +189,15 @@ class PanelOLS(OLS):
         x_filt = filtered.filter(x_names)
 
         if self._weights:
-            weights_filt = filtered.ix[:, ['__weights__']]
+            weights_filt = filtered['__weights__']
         else:
             weights_filt = None
 
         x = data_long.filter(x_names)
-        y = data_long.ix[:, ['__y__']]
+        y = data_long['__y__']
 
         if self._weights:
-            weights = data_long.ix[:, ['__weights__']]
+            weights = data_long['__weights__']
         else:
             weights = None
 
@@ -442,7 +447,7 @@ class PanelOLS(OLS):
 
     @cache_readonly
     def _time_obs_count(self):
-        return self._y_trans.count(level=0)['__y__'].values
+        return self._y_trans.count(level=0).values
 
     @cache_readonly
     def _time_has_obs(self):
@@ -698,7 +703,9 @@ class MovingPanelOLS(MovingOLS, PanelOLS):
     def _beta_matrix(self, lag=0):
         assert(lag >= 0)
 
-        labels = self._y_trans.major_labels - lag
+        index = self._y_trans.index
+        major_labels = index.labels[0]
+        labels = major_labels - lag
         indexer = self._valid_indices.searchsorted(labels, side='left')
 
         beta_matrix = self._beta_raw[indexer]
@@ -807,11 +814,13 @@ def _var_beta_panel(y, x, beta, xx, rmse, cluster_axis,
 
     xx_inv = math.inv(xx)
 
+    yv = y.values
+
     if cluster_axis is None:
         if nw_lags is None:
             return xx_inv * (rmse ** 2)
         else:
-            resid = y.values.squeeze() - np.dot(x.values, beta)
+            resid = yv - np.dot(x.values, beta)
             m = (x.values.T * resid).T
 
             xeps = math.newey_west(m, nw_lags, nobs, df, nw_overlap)
@@ -819,7 +828,7 @@ def _var_beta_panel(y, x, beta, xx, rmse, cluster_axis,
             return np.dot(xx_inv, np.dot(xeps, xx_inv))
     else:
         Xb = np.dot(x.values, beta).reshape((len(x.values), 1))
-        resid = LongPanel(y.values - Xb, index=y.index,
+        resid = LongPanel(yv[:, None] - Xb, index=y.index,
                           columns=['resid'])
 
         if cluster_axis == 1:
@@ -847,7 +856,7 @@ def _xx_time_effects(x, y):
     xx = np.dot(x.values.T, x.values)
     xt = x.sum('minor').values
 
-    count = y.count(level=0)['__y__'].values
+    count = y.unstack().count(1).values
     selector = count > 0
 
     # X'X - (T'T)^-1 (T'X)
diff --git a/pandas/stats/tests/test_fama_macbeth.py b/pandas/stats/tests/test_fama_macbeth.py
index 85f8d1a74..080a9b0be 100644
--- a/pandas/stats/tests/test_fama_macbeth.py
+++ b/pandas/stats/tests/test_fama_macbeth.py
@@ -30,3 +30,8 @@ class TestFamaMacBeth(BaseTest):
             reference = fama_macbeth(y=y2, x=x2, **kwds)
 
             assert_almost_equal(reference._stats, result._stats[:, i])
+
+if __name__ == '__main__':
+    import nose
+    nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
+                   exit=False)
diff --git a/pandas/stats/tests/test_ols.py b/pandas/stats/tests/test_ols.py
index 6b7667cdd..062bfe75a 100644
--- a/pandas/stats/tests/test_ols.py
+++ b/pandas/stats/tests/test_ols.py
@@ -111,10 +111,7 @@ class TestOLS(BaseTest):
                             window=window, **kwds)
         _compare_ols_results(moving, sparse_moving)
 
-        if isinstance(moving.y, Series):
-            index = moving.y.index
-        elif isinstance(moving.y, LongPanel):
-            index = moving.y.major_axis
+        index = moving._index
 
         for n, i in enumerate(moving._valid_indices):
             if window_type == 'rolling' and i >= window:
@@ -571,10 +568,7 @@ class TestPanelOLS(BaseTest):
         moving = ols(y=y, x=x, window_type=window_type,
                      window=window, **kwds)
 
-        if isinstance(moving.y, Series):
-            index = moving.y.index
-        elif isinstance(moving.y, LongPanel):
-            index = moving.y.major_axis
+        index = moving._index
 
         for n, i in enumerate(moving._valid_indices):
             if window_type == 'rolling' and i >= window:
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 42d73390c..e90f3e431 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -786,10 +786,13 @@ class TestLongPanel(unittest.TestCase):
         wp2 = wp.reindex(major=wp.major_axis[:-1])
         lp2 = wp2.to_long()
 
-        self.assertRaises(Exception, self.panel.__setitem__, 'foo',
-                          lp2.filter(['ItemA']))
+        result = self.panel + lp2
+        assert_frame_equal(result.reindex(lp2.index), lp2 * 2)
 
-        self.assertRaises(Exception, self.panel.add, lp2)
+        # careful, mutation
+        self.panel['foo'] = lp2['ItemA']
+        assert_series_equal(self.panel['foo'].reindex(lp2.index),
+                            lp2['ItemA'])
 
     def test_combineFrame(self):
         wp = self.panel.to_wide()
