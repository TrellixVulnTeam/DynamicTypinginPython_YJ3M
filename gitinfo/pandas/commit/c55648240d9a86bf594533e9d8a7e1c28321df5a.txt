commit c55648240d9a86bf594533e9d8a7e1c28321df5a
Author: Adam Klein <adamklein@gmail.com>
Date:   Sun Feb 26 16:58:54 2012 -0500

    ENH: added simple fancy-indexing for datetime64 per #222

diff --git a/pandas/core/datetools.py b/pandas/core/datetools.py
index 553631464..b2c80b392 100644
--- a/pandas/core/datetools.py
+++ b/pandas/core/datetools.py
@@ -48,8 +48,9 @@ def _dt_unbox(key):
     '''
     Timestamp-like => dt64
     '''
-    if type(key) == float:
-        raise TypeError("Cannot unbox a float to datetime")
+    if not isinstance(key, datetime):
+        key = to_timestamp(key)
+
     return np.datetime64(lib.pydt_to_i8(key))
 
 def _dt_unbox_array(arr):
@@ -84,6 +85,9 @@ def to_timestamp(arg, offset=None):
     if arg is None:
         return arg
 
+    if type(arg) == float:
+        raise TypeError("Cannot convert a float to datetime")
+
     if isinstance(arg, basestring):
         try:
             arg = parser.parse(arg)
diff --git a/pandas/core/index.py b/pandas/core/index.py
index e8b384bcd..971ac3ce3 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -15,7 +15,7 @@ from pandas._tseries import Timestamp
 
 import pandas.core.datetools as datetools
 from pandas.core.datetools import (_dt_box, _dt_unbox, _dt_box_array,
-                                  _dt_unbox_array)
+                                   _dt_unbox_array)
 
 __all__ = ['Index']
 
@@ -1452,13 +1452,21 @@ class DatetimeIndex(Int64Index):
             left_chunk = left.values[lslice]
             return self._view_like(left_chunk)
 
+    def get_value(self, series, key):
+        """
+        Fast lookup of value from 1-dimensional ndarray. Only use this if you
+        know what you're doing
+        """
+        try:
+            return super(DatetimeIndex, self).get_value(series, key)
+        except KeyError:
+            return self._engine.get_value(series,
+                                          datetools.to_timestamp(key))
 
     def __getitem__(self, key):
         """Override numpy.ndarray's __getitem__ method to work as desired"""
         arr_idx = self.view(np.ndarray)
         if np.isscalar(key):
-            if type(key) == datetime:
-                key = _dt_unbox(key)
             val = arr_idx[key]
             if hasattr(self, 'offset') and self.offset is not None:
                 return _dt_box(val, offset=self.offset, tzinfo=self.tzinfo)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 515935325..9a0490b3a 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -2321,7 +2321,7 @@ copy : boolean, default False
 
         Parameters
         ----------
-        offset : DateOffset object, or string in {'WEEKDAY', 'EOM'}
+        offset : DateOffset object, or corresponding string
             DateOffset object or subclass (e.g. monthEnd)
         method : {'backfill', 'pad', None}
             Method to use for filling holes in new index
@@ -2330,6 +2330,9 @@ copy : boolean, default False
         -------
         converted : TimeSeries
         """
+
+        # TODO: this uses deprecated API, add new method?
+
         if isinstance(freq, datetools.DateOffset):
             dateRange = DateRange(self.index[0], self.index[-1], offset=freq)
         else:
diff --git a/pandas/tests/test_datetime64.py b/pandas/tests/test_datetime64.py
index 98950dfba..381f98bc0 100644
--- a/pandas/tests/test_datetime64.py
+++ b/pandas/tests/test_datetime64.py
@@ -230,6 +230,19 @@ class TestDatetime64(unittest.TestCase):
 
         lib.flush_tcache('W@TUE')
 
+    def test_fancy_getitem(self):
+        dti = DatetimeIndex(offset='WOM@1FRI', start=datetime(2005,1,1),
+                            end=datetime(2010,1,1))
+
+        s = Series(np.arange(len(dti)), index=dti) 
+
+        self.assertEquals(s[48], 48)
+        self.assertEquals(s['1/2/2009'], 48)
+        self.assertEquals(s['2009-1-2'], 48)
+        self.assertEquals(s[datetime(2009,1,2)], 48)
+        self.assertEquals(s[lib.Timestamp(datetime(2009,1,2))], 48)
+        self.assertRaises(KeyError, s.__getitem__, '2009-1-3') 
+
 if __name__ == '__main__':
     import nose
     nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
