commit a37e6662191d64de421d8037ca4d20f4d0ec9b27
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jan 16 14:45:24 2012 -0500

    BUG: convert tuples in concat to MultiIndex

diff --git a/pandas/tools/merge.py b/pandas/tools/merge.py
index a747f20b4..2fb5ae818 100644
--- a/pandas/tools/merge.py
+++ b/pandas/tools/merge.py
@@ -864,24 +864,25 @@ def _concat_indexes(indexes):
     return indexes[0].append(indexes[1:])
 
 def _make_concat_multiindex(indexes, keys, levels=None, names=None):
-    single_level = levels is None or len(levels) == 1
+    if ((levels is None and isinstance(keys[0], tuple)) or
+        (levels is not None and len(levels) > 1)):
+        zipped = zip(*keys)
+        if names is None:
+            names = [None] * len(zipped)
 
-    if single_level:
+        if levels is None:
+            levels = [Factor(zp).levels for zp in zipped]
+        else:
+            levels = [_ensure_index(x) for x in levels]
+    else:
         zipped = [keys]
         if names is None:
             names = [None]
-    else:
-        zipped = zip(*keys)
-        if names is None:
-            names = [None] * len(zipped)
 
-    if levels is None:
-        if single_level:
+        if levels is None:
             levels = [_ensure_index(keys)]
         else:
-            levels = [Factor(zp).levels for zp in zipped]
-    else:
-        levels = [_ensure_index(x) for x in levels]
+            levels = [_ensure_index(x) for x in levels]
 
     if not _all_indexes_same(indexes):
         label_list = []
diff --git a/pandas/tools/tests/test_merge.py b/pandas/tools/tests/test_merge.py
index 54baecff0..06dd244a0 100644
--- a/pandas/tools/tests/test_merge.py
+++ b/pandas/tools/tests/test_merge.py
@@ -865,6 +865,14 @@ class TestConcatenate(unittest.TestCase):
                         levels=levels)
         self.assertEqual(result.index.names, [None] * 3)
 
+        # no levels
+        result = concat([df, df2, df, df2],
+                        keys=[('foo', 'one'), ('foo', 'two'),
+                              ('baz', 'one'), ('baz', 'two')],
+                        names=['first', 'second'])
+        self.assertEqual(result.index.names, ['first', 'second'] + [None])
+        self.assert_(np.array_equal(result.index.levels[0], ['baz', 'foo']))
+
     def test_crossed_dtypes_weird_corner(self):
         columns = ['A', 'B', 'C', 'D']
         df1 = DataFrame({'A' : np.array([1, 2, 3, 4], dtype='f8'),
diff --git a/pandas/tools/tests/test_pivot.py b/pandas/tools/tests/test_pivot.py
index f1a517712..e08a07924 100644
--- a/pandas/tools/tests/test_pivot.py
+++ b/pandas/tools/tests/test_pivot.py
@@ -178,6 +178,11 @@ class TestCrosstab(unittest.TestCase):
         expected = crosstab([df['b'], df['c']], df['a'])
         tm.assert_frame_equal(result, expected)
 
+        # assign arbitrary names
+        result = crosstab(self.df['A'].values, self.df['C'].values)
+        self.assertEqual(result.index.name, 'row_0')
+        self.assertEqual(result.columns.name, 'col_0')
+
     def test_crosstab_margins(self):
         a = np.random.randint(0, 7, size=100)
         b = np.random.randint(0, 3, size=100)
