commit cda2084b50b91413fc96c6a2749561ead284f474
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Nov 13 18:51:09 2012 -0500

    BUG: 1 ** NA issue in computing new fill value in SparseSeries. close #2220

diff --git a/RELEASE.rst b/RELEASE.rst
index 7d6f2fbd3..ac9e4a633 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -102,6 +102,7 @@ pandas 0.9.1
     e.g. DataFrame.index (#2200)
   - Fix conversion of mixed-type DataFrame to ndarray with dup columns (#2236)
   - Fix duplicate columns issue (#2218, #2219)
+  - Fix SparseSeries.__pow__ issue with NA input (#2220)
 
 pandas 0.9.0
 ============
diff --git a/pandas/sparse/series.py b/pandas/sparse/series.py
index 70d356075..73f9ca30e 100644
--- a/pandas/sparse/series.py
+++ b/pandas/sparse/series.py
@@ -42,8 +42,11 @@ def _sparse_op_wrap(op, name):
         elif isinstance(other, DataFrame):
             return NotImplemented
         elif np.isscalar(other):
-            new_fill_value = op(np.float64(self.fill_value),
-                                np.float64(other))
+            if isnull(other) or isnull(self.fill_value):
+                new_fill_value = np.nan
+            else:
+                new_fill_value = op(np.float64(self.fill_value),
+                                    np.float64(other))
 
             return SparseSeries(op(self.sp_values, other),
                                 index=self.index,
diff --git a/pandas/sparse/tests/test_sparse.py b/pandas/sparse/tests/test_sparse.py
index c3df935d7..fb9b3a37c 100644
--- a/pandas/sparse/tests/test_sparse.py
+++ b/pandas/sparse/tests/test_sparse.py
@@ -1297,6 +1297,22 @@ class TestSparseDataFrame(TestCase, test_frame.SafeForSparse):
         rs = sparse_df[sparse_df.flag.isin([1.])]
         assert_frame_equal(xp, rs)
 
+    def test_sparse_pow_issue(self):
+        # #2220
+        df = SparseDataFrame({'A' : [1.1,3.3],'B' : [2.5,-3.9]})
+
+        # note : no error without nan
+        df = SparseDataFrame({'A' : [nan, 0, 1]    })
+
+        # note that 2 ** df works fine, also df ** 1
+        result = 1 ** df
+
+        r1 = result.take([0],1)['A']
+        r2 = result['A']
+
+        self.assertEqual(len(r2.sp_values), len(r1.sp_values))
+
+
 def _dense_series_compare(s, f):
     result = f(s)
     assert(isinstance(result, SparseSeries))
