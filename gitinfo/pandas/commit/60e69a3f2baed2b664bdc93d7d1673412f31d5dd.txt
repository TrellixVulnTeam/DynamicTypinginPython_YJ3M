commit 60e69a3f2baed2b664bdc93d7d1673412f31d5dd
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Nov 14 12:44:25 2012 -0500

    BUG: issue constructing DataFrame from empty Series with name. close #2234

diff --git a/RELEASE.rst b/RELEASE.rst
index 5bfcecae9..69e4c4b02 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -106,6 +106,8 @@ pandas 0.9.1
   - Fix icol with integer sequence failure (#2228)
   - Fixed resampling tz-aware time series issue (#2245)
   - SparseDataFrame.icol was not returning SparseSeries (#2227, #2229)
+  - Enable ExcelWriter to handle PeriodIndex (#2240)
+  - Fix issue constructing DataFrame from empty Series with name (#2234)
 
 pandas 0.9.0
 ============
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 22ddebd05..0bd3c2222 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -5091,6 +5091,9 @@ def extract_index(data):
 
 def _prep_ndarray(values, copy=True):
     if not isinstance(values, np.ndarray):
+        if len(values) == 0:
+            return np.empty((0, 0), dtype=object)
+
         arr = np.asarray(values)
         # NumPy strings are a pain, convert to object
         if issubclass(arr.dtype.type, basestring):
@@ -5103,11 +5106,7 @@ def _prep_ndarray(values, copy=True):
             values = values.copy()
 
     if values.ndim == 1:
-        N = values.shape[0]
-        if N == 0:
-            values = values.reshape((values.shape[0], 0))
-        else:
-            values = values.reshape((values.shape[0], 1))
+        values = values.reshape((values.shape[0], 1))
     elif values.ndim != 2:
         raise Exception('Must pass 2-d input')
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index a7120f3ea..ea5a10f24 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2269,11 +2269,16 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         assert_frame_equal(recons, expected)
 
     def test_constructor_Series_named(self):
-        a = Series([1,2,3], index=['a','b','c'], name='x')
+        a = Series([1, 2, 3], index=['a', 'b', 'c'], name='x')
         df = DataFrame(a)
         self.assert_(df.columns[0] == 'x')
         self.assert_(df.index.equals(a.index))
 
+        # #2234
+        a = Series([], name='x')
+        df = DataFrame(a)
+        self.assert_(df.columns[0] == 'x')
+
     def test_constructor_Series_differently_indexed(self):
         # name
         s1 = Series([1, 2, 3], index=['a','b','c'], name='x')
