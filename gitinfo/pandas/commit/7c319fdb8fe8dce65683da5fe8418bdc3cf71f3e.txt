commit 7c319fdb8fe8dce65683da5fe8418bdc3cf71f3e
Author: jreback <jeff@reback.net>
Date:   Sat Sep 20 09:12:06 2014 -0400

    DOC: v0.15.0.txt edits

diff --git a/doc/source/io.rst b/doc/source/io.rst
index 1ac05e6b3..1cd1f9f5b 100644
--- a/doc/source/io.rst
+++ b/doc/source/io.rst
@@ -2060,10 +2060,10 @@ files if `Xlsxwriter`_ is not available.
 To specify which writer you want to use, you can pass an engine keyword
 argument to ``to_excel`` and to ``ExcelWriter``. The built-in engines are:
 
-- `'openpyxl`': This includes stable support for OpenPyxl 1.6.1 up to but
+- ``openpyxl``: This includes stable support for OpenPyxl 1.6.1 up to but
   not including 2.0.0, and experimental support for OpenPyxl 2.0.0 and later.
-- `'xlsxwriter'`
-- `'xlwt'`
+- ``xlsxwriter``
+- ``xlwt``
 
 .. code-block:: python
 
diff --git a/doc/source/v0.15.0.txt b/doc/source/v0.15.0.txt
index fd20d98e8..338569625 100644
--- a/doc/source/v0.15.0.txt
+++ b/doc/source/v0.15.0.txt
@@ -19,6 +19,7 @@ users upgrade to this version.
   - New scalar type ``Timedelta``, and a new index type ``TimedeltaIndex``, see :ref:`here <whatsnew_0150.timedeltaindex>`
   - New datetimelike properties accessor ``.dt`` for Series, see :ref:`Datetimelike Properties <whatsnew_0150.dt>`
   - Split indexing documentation into :ref:`Indexing and Selecting Data <indexing>` and :ref:`MultiIndex / Advanced Indexing <advanced>`
+  - ``read_csv`` will now by default ignore blank lines when parsing, see :ref:`here <whatsnew_0150.blanklines>`
   - API change in using Indexes in set operations, see :ref:`here <whatsnew_0150.index_set_ops>`
   - Internal refactoring of the ``Index`` class to no longer sub-class ``ndarray``, see :ref:`Internal Refactoring <whatsnew_0150.refactoring>`
   - dropping support for ``PyTables`` less than version 3.0.0, and ``numexpr`` less than version 2.1 (:issue:`7990`)
@@ -61,9 +62,11 @@ API changes
 
 - Raise a ``ValueError`` in ``df.to_hdf`` with 'fixed' format, if ``df`` has non-unique columns as the resulting file will be broken (:issue:`7761`)
 
+.. _whatsnew_0150.blanklines:
+
 - Made both the C-based and Python engines for `read_csv` and `read_table` ignore empty lines in input as well as
-  whitespace-filled lines, as long as `sep` is not whitespace. This is an API change
-  that can be controlled by the keyword parameter `skip_blank_lines`. see :ref:`here <io.skiplines>`(:issue:`4466`)
+  whitespace-filled lines, as long as ``sep`` is not whitespace. This is an API change
+  that can be controlled by the keyword parameter ``skip_blank_lines``.  See :ref:`the docs <io.skiplines>` (:issue:`4466`)
 
 - Bug in passing a ``DatetimeIndex`` with a timezone that was not being retained in DataFrame construction from a dict (:issue:`7822`)
 
@@ -140,6 +143,10 @@ API changes
      didx
      didx.tz_localize(None)
 
+- ``tz_localize`` now accepts the ``ambiguous`` keyword which allows for passing an array of bools
+  indicating whether the date belongs in DST or not, 'NaT' for setting transition times to NaT,
+  'infer' for inferring DST/non-DST, and 'raise' (default) for an AmbiguousTimeError to be raised. See :ref:`the docs<timeseries.timezone_ambiguous>` for more details (:issue:`7943`)
+
 - ``DataFrame.tz_localize`` and ``DataFrame.tz_convert`` now accepts an optional ``level`` argument
   for localizing a specific level of a MultiIndex (:issue:`7846`)
 - ``Timestamp.tz_localize`` and ``Timestamp.tz_convert`` now raise ``TypeError`` in error cases, rather than ``Exception`` (:issue:`8025`)
@@ -158,12 +165,17 @@ API changes
 
   In prior versions there was a difference in these two constructs:
 
-  - ``df.loc[[3]]`` would (prior to 0.15.0) return a frame reindexed by 3 (with all ``np.nan`` values)
+  - ``df.loc[[3]]`` would return a frame reindexed by 3 (with all ``np.nan`` values)
   - ``df.loc[[3],:]`` would raise ``KeyError``.
 
   Both will now raise a ``KeyError``. The rule is that *at least 1* indexer must be found when using a list-like and ``.loc`` (:issue:`7999`)
 
-  There was also a difference between ``df.loc[[1,3]]`` (returns a frame reindexed by ``[1, 3]``) and ``df.loc[[1, 3],:]`` (would raise ``KeyError`` prior to 0.15.0). Both will now return a reindexed frame.
+  Furthermore in prior versions these were also different:
+
+  - ``df.loc[[1,3]]`` would return a frame reindexed by [1,3]
+  - ``df.loc[[1,3],:]`` would raise ``KeyError``.
+
+  Both will now return a frame reindex by [1,3]. E.g.
 
   .. ipython:: python
 
@@ -263,10 +275,6 @@ API changes
      # should be replaced by
      Index(['a','b','c']).difference(Index(['b','c','d']))
 
-- ``tz_localize`` now accepts the ``ambiguous`` keyword which allows for passing an array of bools
-  indicating whether the date belongs in DST or not, 'NaT' for setting transition times to NaT,
-  'infer' for inferring DST/non-DST, and 'raise' (default) for an AmbiguousTimeError to be raised. See :ref:`the docs<timeseries.timezone_ambiguous>` for more details (:issue:`7943`)
-
 - ``DataFrame.info()`` now ends its output with a newline character (:issue:`8114`)
 
 .. _whatsnew_0150.dt:
@@ -351,6 +359,7 @@ Rolling/Expanding Moments API changes
   :func:`rolling_cov`, :func:`rolling_corr`, :func:`rolling_corr_pairwise`,
   :func:`rolling_window`, and :func:`rolling_apply` with ``center=True`` previously would return a result of the same
   structure as the input ``arg`` with ``NaN`` in the final ``(window-1)/2`` entries.
+
   Now the final ``(window-1)/2`` entries of the result are calculated as if the input ``arg`` were followed
   by ``(window-1)/2`` ``NaN`` values (or with shrinking windows, in the case of :func:`rolling_apply`).
   (:issue:`7925`, :issue:`8269`)
@@ -575,7 +584,7 @@ This type is very similar to how ``Timestamp`` works for ``datetimes``. It is a
        Prior to 0.15.0 ``pd.to_timedelta`` would return a ``Series`` for list-like/Series input, and a ``np.timedelta64`` for scalar input.
        It will now return a ``TimedeltaIndex`` for list-like input, ``Series`` for Series input, and ``Timedelta`` for scalar input.
 
-       The arguments to ``pd.to_timedelta`` are now ``(arg,unit='ns',box=True)``, previously were ``(arg,box=True,unit='ns')`` as these are more logical.
+       The arguments to ``pd.to_timedelta`` are now ``(arg,unit='ns',box=True,coerce=False)``, previously were ``(arg,box=True,unit='ns')`` as these are more logical.
 
 Consruct a scalar
 
@@ -738,7 +747,7 @@ Enhancements
 
 
 
-- Added experimental compatibility with openpyxl v2. The ``DataFrame.to_excel``
+- Added experimental compatibility with ``openpyxl`` for versions >= 2.0. The ``DataFrame.to_excel``
   method ``engine`` keyword now recognizes ``openpyxl1`` and ``openpyxl2``
   which will explicitly require openpyxl v1 and v2 respectively, failing if
   the requested version is not available. The ``openpyxl`` engine is a now a
