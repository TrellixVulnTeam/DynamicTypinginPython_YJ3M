commit 9fc9adc9a4e0fd4a8af2af56fec3bf3c47f24734
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Jun 5 22:19:09 2011 +0100

    Series fancy setitem implementation, unit tests, etc.

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 5477e184f..51af61c86 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -124,3 +124,9 @@ def _check_step(obj):
     if obj.step is not None:
         raise Exception('steps other than 1 are not supported')
 
+def _ensure_index(index_like):
+    from pandas.core.index import Index
+    if not isinstance(index_like, Index):
+        index_like = Index(index_like)
+
+    return index_like
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index f38ff99e8..024d8f0f0 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -12,11 +12,11 @@ import numpy as np
 
 from pandas.core.common import (_pickle_array, _unpickle_array, isnull, notnull,
                                 _check_step, _is_list_like, _need_slice,
-                                _is_label_slice)
+                                _is_label_slice, _ensure_index)
 from pandas.core.daterange import DateRange
 from pandas.core.generic import PandasGeneric
 from pandas.core.index import Index, NULL_INDEX
-from pandas.core.series import Series, _ensure_index
+from pandas.core.series import Series
 import pandas.core.common as common
 import pandas.core.datetools as datetools
 import pandas.lib.tseries as tseries
diff --git a/pandas/core/index.py b/pandas/core/index.py
index a77e89f7b..2164b2cb6 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1,6 +1,8 @@
 # pylint: disable=E1101,E1103,W0232
 
 import numpy as np
+
+from pandas.core.common import _ensure_index
 import pandas.lib.tseries as _tseries
 
 __all__ = ['Index']
@@ -261,6 +263,8 @@ class Index(np.ndarray):
             'BFILL' : 'BACKFILL'
         }
 
+        target = _ensure_index(target)
+
         method = aliases.get(method, method)
         indexer, mask = tseries.getFillVec(self, target, self.indexMap,
                                            target.indexMap, method)
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index 5acb485e7..ae8abd843 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -9,9 +9,9 @@ import numpy as np
 
 from pandas.core.common import (_pickle_array, _unpickle_array)
 from pandas.core.frame import (DataFrame, try_sort, extract_index,
-                               _default_index)
+                               _default_index, _ensure_index)
 from pandas.core.index import Index, NULL_INDEX
-from pandas.core.series import Series, _ensure_index
+from pandas.core.series import Series
 import pandas.core.common as common
 import pandas.core.datetools as datetools
 import pandas.lib.tseries as tseries
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 53426649d..d1a16403f 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -9,9 +9,9 @@ import warnings
 
 import numpy as np
 
-from pandas.core.common import _mut_exclusive
+from pandas.core.common import _mut_exclusive, _ensure_index
 from pandas.core.index import Index
-from pandas.core.frame import DataFrame, _pfixed, _ensure_index
+from pandas.core.frame import DataFrame, _pfixed
 from pandas.core.matrix import DataMatrix
 from pandas.core.generic import PandasGeneric, Picklable
 import pandas.core.common as common
diff --git a/pandas/core/series.py b/pandas/core/series.py
index ac91f2e8d..33a971e3d 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -14,8 +14,8 @@ from numpy import NaN, ndarray
 import numpy as np
 
 from pandas.core.common import isnull, notnull
-from pandas.core.common import (_check_step, _is_list_like, _need_slice,
-                                _is_label_slice)
+from pandas.core.common import (_check_step, _need_slice, _is_label_slice,
+                                _ensure_index)
 
 from pandas.core.daterange import DateRange
 from pandas.core.generic import PandasGeneric
@@ -1167,26 +1167,7 @@ class Series(np.ndarray, PandasGeneric):
         """
         before = datetools.to_datetime(before)
         after = datetools.to_datetime(after)
-
-        if before is None:
-            beg_slice = 0
-        elif before in self.index:
-            beg_slice = self.index.indexMap[before]
-        elif before < self.index[-1]:
-            beg_slice = self.index.searchsorted(before, side='left')
-        else:
-            return Series([], index=NULL_INDEX)
-
-        if after is None:
-            end_slice = len(self)
-        elif after in self.index:
-            end_slice = self.index.indexMap[after] + 1
-        elif after > self.index[0]:
-            end_slice = self.index.searchsorted(after, side='right')
-        else:
-            return Series([], index=NULL_INDEX)
-
-        return self[beg_slice:end_slice]
+        return self.ix[before:after]
 
     def asOf(self, date):
         """
@@ -1351,6 +1332,9 @@ class Series(np.ndarray, PandasGeneric):
                                     'or unequal labels')
             return self.reindex(self.index[key])
         elif isinstance(key, slice):
+            if not _need_slice(key):
+                return self
+
             if _is_label_slice(self.index, key):
                 i, j = self.index.slice_locs(key.start, key.stop)
                 return self[i:j]
@@ -1360,12 +1344,18 @@ class Series(np.ndarray, PandasGeneric):
             return self.reindex(key)
 
     def _fancy_setitem(self, key, value):
-        if _isboolarr(key) or isinstance(key, slice):
+        if _isboolarr(key):
             if isinstance(key, Series):
                 if not key.index.equals(self.index):
                     raise Exception('Cannot use boolean index with misaligned '
                                     'or unequal labels')
             self[key] = value
+        elif isinstance(key, slice):
+            if _is_label_slice(self.index, key):
+                i, j = self.index.slice_locs(key.start, key.stop)
+                self[i:j] = value
+            else:
+                self[key] = value
         else:
             inds, mask = self.index.get_indexer(key)
             if not mask.all():
@@ -1441,9 +1431,3 @@ def _seriesRepr(index, vals, nanRep='NaN'):
 
     return '\n'.join(it)
 
-def _ensure_index(index_like):
-    if not isinstance(index_like, Index):
-        index_like = Index(index_like)
-
-    return index_like
-
diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index 7746e7e43..74c28afac 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -8,9 +8,10 @@ import numpy as np
 
 import operator
 
-from pandas.core.common import _pickle_array, _unpickle_array, _mut_exclusive
+from pandas.core.common import (_pickle_array, _unpickle_array, _mut_exclusive,
+                                _ensure_index)
 from pandas.core.index import Index
-from pandas.core.series import Series, TimeSeries, _ensure_index
+from pandas.core.series import Series, TimeSeries
 from pandas.core.frame import DataFrame, extract_index, try_sort
 from pandas.core.matrix import DataMatrix
 from pandas.core.panel import Panel, WidePanel, LongPanelIndex, LongPanel
diff --git a/pandas/core/tests/test_series.py b/pandas/core/tests/test_series.py
index 4e6c3ea07..27ea99a11 100644
--- a/pandas/core/tests/test_series.py
+++ b/pandas/core/tests/test_series.py
@@ -142,7 +142,7 @@ class TestSeries(unittest.TestCase):
         idx = np.int64(5)
         self.assertEqual(self.ts[idx], self.ts[5])
 
-    def test_fancy(self):
+    def test_getitem_fancy(self):
         slice1 = self.series[[1,2,3]]
         slice2 = self.objSeries[[1,2,3]]
         self.assertEqual(self.series.index[2], slice1.index[1])
@@ -166,6 +166,9 @@ class TestSeries(unittest.TestCase):
         self.assertRaises(Exception, ts.__getitem__, mask_shifted)
         self.assertRaises(Exception, ts.__setitem__, mask_shifted, 1)
 
+        self.assertRaises(Exception, ts.ix.__getitem__, mask_shifted)
+        self.assertRaises(Exception, ts.ix.__setitem__, mask_shifted, 1)
+
     def test_slice(self):
         numSlice = self.series[10:20]
         numSliceEnd = self.series[-10:]
@@ -199,21 +202,31 @@ class TestSeries(unittest.TestCase):
         series[::2] = 0
         self.assert_((series[::2] == 0).all())
 
+        # set item that's not contained
+        self.assertRaises(Exception, self.series.__setitem__,
+                          'foobar', 1)
+
     def test_setslice(self):
         sl = self.ts[5:20]
         self.assertEqual(len(sl), len(sl.index))
         self.assertEqual(len(sl.index.indexMap), len(sl.index))
 
-    def test_getitem_fancy(self):
+    def test_ix_getitem(self):
         inds = self.series.index[[3,4,7]]
         assert_series_equal(self.series.ix[inds], self.series.reindex(inds))
         assert_series_equal(self.series.ix[5::2], self.series[5::2])
 
+        # slice with indices
+        d1, d2 = self.series.index[[5, 15]]
+        result = self.series.ix[d1:d2]
+        expected = self.series.truncate(d1, d2)
+        assert_series_equal(result, expected)
+
         # boolean
         mask = self.series > self.series.median()
         assert_series_equal(self.series.ix[mask], self.series[mask])
 
-    def test_setitem_fancy(self):
+    def test_ix_setitem(self):
         inds = self.series.index[[3,4,7]]
 
         result = self.series.copy()
@@ -227,6 +240,27 @@ class TestSeries(unittest.TestCase):
         expected[5:10] = 10
         assert_series_equal(result, expected)
 
+        # set slice with indices
+        d1, d2 = self.series.index[[5, 15]]
+        result.ix[d1:d2] = 6
+        expected[5:16] = 6 # because it's inclusive
+        assert_series_equal(result, expected)
+
+    def test_ix_setitem_boolean(self):
+        mask = self.series > self.series.median()
+
+        result = self.series.copy()
+        result.ix[mask] = 0
+        expected = self.series
+        expected[mask] = 0
+        assert_series_equal(result, expected)
+
+    def test_ix_setitem_corner(self):
+        inds = list(self.series.index[[5, 8, 12]])
+        self.series.ix[inds] = 5
+        self.assertRaises(Exception, self.series.ix.__setitem__,
+                          inds + ['foo'], 5)
+
     def test_repr(self):
         str(self.ts)
         str(self.series)
