commit 1874267aa6f2281c30dd6df33dc59cc8ad044eb4
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Aug 30 00:27:59 2011 -0400

    DOC: chopping up old tutorial

diff --git a/doc/source/basics.rst b/doc/source/basics.rst
index 5147dbc15..0ec4fd77f 100644
--- a/doc/source/basics.rst
+++ b/doc/source/basics.rst
@@ -470,6 +470,14 @@ Note that the values in the dict need only be **convertible to
 DataFrame**. Thus, they can be any of the other valid inputs to DataFrame as
 per above.
 
+.. note::
+
+   Unfortunately WidePanel, being less commonly used than Series and DataFrame,
+   has been slightly neglected feature-wise. A number of methods and options
+   available in DataFrame are not available in WidePanel. This will get worked
+   on, of course, in future releases. And faster if you join me in working on
+   the codebase.
+
 Item selection / addition / deletion
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
@@ -638,6 +646,89 @@ replace NaN with some other value using **fillna** if you wish).
 Reindexing and modifying axis labels
 ------------------------------------
 
+Reindexing is one of the most important features of the Series and the
+other pandas data structures. In essence it means: *conform data to a
+specified index*.
+
+Using our prior example, we can see the basic behavior:
+
+::
+
+    >>> s.reindex(['f', 'a', 'd', 'e'])
+    f    nan
+    a    0.0
+    d    3.0
+    e    4.0
+
+As you can see, the new index order is as inputted, and values not
+present in the Series appear as NaN.
+
+For TimeSeries or other ordered Series, an additional argument can be
+specified to perform forward- (referred to as "padding") or
+back-filling:
+
+::
+
+    >>> ts
+    2009-01-02 00:00:00    1.0
+    2009-01-07 00:00:00    4.0
+
+    >>> ts.reindex(dates, method='pad')
+    2009-01-01 00:00:00    nan
+    2009-01-02 00:00:00    1.0
+    2009-01-05 00:00:00    1.0
+    2009-01-06 00:00:00    1.0
+    2009-01-07 00:00:00    4.0
+
+    >>> ts.reindex(dates, method='backfill')
+    2009-01-01 00:00:00    1.0
+    2009-01-02 00:00:00    1.0
+    2009-01-05 00:00:00    4.0
+    2009-01-06 00:00:00    4.0
+    2009-01-07 00:00:00    4.0
+
+.. note::
+
+    This filling logic assumes that the both the new and old Index
+    objects have ordered values.
+
+Two common reindexing methods are provided: **valid** (which we
+already mentioned) and **truncate** (for selecting intervals of index
+values).
+
+::
+
+    >>> ts
+    2009-01-01 00:00:00    0.0
+    2009-01-02 00:00:00    1.0
+    2009-01-05 00:00:00    2.0
+    2009-01-06 00:00:00    3.0
+    2009-01-07 00:00:00    4.0
+
+    >>> ts.truncate(before=datetime(2009, 1, 5), after=datetime(2009, 1, 6))
+    2009-01-05 00:00:00    2.0
+    2009-01-06 00:00:00    3.0
+
+Since writing out datetimes interactively like that can be a bit
+verbose, one can also pass a string date representation:
+
+::
+
+    >>> ts.truncate(after='1/5/2009')
+    2009-01-01 00:00:00    0.0
+    2009-01-02 00:00:00    1.0
+    2009-01-05 00:00:00    2.0
+
+
+::
+
+    >>> reindexed = df.reindex(index=new_index,
+                               columns=new_columns)
+
+For time series data, if the new index is higher frequency than the
+old one, you may wish to "fill" holes with the values as of each date:
+
+::
 
 Dropping labels from an axis
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -645,6 +736,26 @@ Dropping labels from an axis
 Renaming / mapping labels
 ~~~~~~~~~~~~~~~~~~~~~~~~~
 
+One might want to relabel the index based on a mapping or
+function. For this the :func:`Series.rename` method is provided. It
+can accept either a dict or a function:
+
+::
+
+    >>> s
+	a    -0.544970223484
+	b    -0.946388873158
+	c    0.0360854957476
+	d    -0.795018577574
+	e    0.195977583894
+
+	>>> s.rename(str.upper)
+	A    -0.544970223484
+	B    -0.946388873158
+	C    0.0360854957476
+	D    -0.795018577574
+	E    0.195977583894
+
 
 Iteration
 ---------
diff --git a/doc/source/dataframe.rst b/doc/source/dataframe.rst
index 6322bc357..6c12fb93d 100644
--- a/doc/source/dataframe.rst
+++ b/doc/source/dataframe.rst
@@ -6,35 +6,6 @@
 DataFrame
 *********
 
-Basics
-------
-
-.. note::
-
-    Unlike Series, DataFrame is not a subclass of numpy.ndarray.
-
-The canonical DataFrame containing time series data takes this form,
-which will be used for many examples to follow:
-
-.. ipython:: python
-
-    from pandas import *; from numpy.random import randn
-    index = Index(DateRange('1/1/2009', '12/1/2009', timeRule='EOM'))
-    N = len(index)
-    data = {'A' : randn(N),
-            'B' : randn(N),
-            'C' : randn(N)}
-    df = DataFrame(data, index=index)
-    df
-
-The **info** method provides a summary of a DataFrame object and will
-be printed by default when the frame is very large:
-
-.. ipython:: python
-
-    df.info()
-
-
 Transposing
 ~~~~~~~~~~~
 
@@ -360,37 +331,6 @@ old one, you may wish to "fill" holes with the values as of each date:
 
     >>> filled = df.reindex(new_index, fillMethod='pad')
 
-.. autosummary::
-   :toctree: generated/
-
-   DataFrame.reindex
-   DataFrame.fillna
-
-Filtering / selecting columns or indices
-----------------------------------------
-
-.. autosummary::
-   :toctree: generated/
-
-   DataFrame.dropEmptyRows
-   DataFrame.dropIncompleteRows
-   DataFrame.filter
-
-Sorting
--------
-
-TODO
-
-.. autosummary::
-   :toctree: generated/
-
-   DataFrame.sort
-
-Converting to ndarray
----------------------
-
-TODO
-
 Joining / merging DataFrames
 ----------------------------
 
@@ -477,77 +417,3 @@ mapping.
    :toctree: generated/
 
    DataFrame.join
-
-TimeSeries-oriented methods
----------------------------
-
-TODO
-
-.. autosummary::
-   :toctree: generated/
-
-   DataFrame.asfreq
-   DataFrame.truncate
-   DataFrame.diff
-   DataFrame.shift
-
-Sorting
--------
-
-TODO
-
-.. autosummary::
-   :toctree: generated/
-
-   Series.argsort
-   Series.sort
-   Series.order
-
-GroupBy functionality
----------------------
-
-.. seealso:: :ref:`Series GroupBy <series.groupby>`
-
-TODO
-
-.. autosummary::
-   :toctree: generated/
-
-   DataFrame.groupby
-   DataFrame.tgroupby
-
-IO
---
-
-TODO
-
-.. autosummary::
-   :toctree: generated/
-
-   DataFrame.toCSV
-   DataFrame.toString
-   DataFrame.info
-
-Miscellaneous
--------------
-
-TODO
-
-.. autosummary::
-   :toctree: generated/
-
-   DataFrame.append
-   DataFrame.asMatrix
-   DataFrame.values
-   DataFrame.copy
-   DataFrame.pivot
-   DataFrame.T
-   DataFrame.apply
-   DataFrame.tapply
-   DataFrame.applymap
-   DataFrame.sort
-   DataFrame.combineFirst
-   DataFrame.combineAdd
-   DataFrame.combineMult
-   DataFrame.plot
-
diff --git a/doc/source/series.rst b/doc/source/series.rst
index 38128ca06..ba1110060 100644
--- a/doc/source/series.rst
+++ b/doc/source/series.rst
@@ -1,237 +1,6 @@
 .. currentmodule:: pandas
 .. _series:
 
-.. _series.arithmetic:
-
-Accessing underlying data
--------------------------
-
-The data stored in a Series can be accessed via the **values**
-attribute (which is a property returning a view of the Series as an
-ndarray). The higher dimensional pandas data structures observe the
-same interface for accessing the underlying data.
-
-Handling missing data and reindexing
-------------------------------------
-
-For all of the pandas data structures, we chose to represent missing
-data as NaN. However, missing data could be represented in some other
-forms (e.g. *None* values generated from null values in SQL
-data). This problem is compounded by the fact that *numpy.isnan* is
-only valid on float arrays. For this reason, pandas includes two
-functions for testing validity, **isnull** and **notnull**. These
-functions are implemented in Cython and provide reasonably good
-performance on object arrays. For numerical arrays, the performance
-will be equivalent to *numpy.isfinite*.
-
-::
-
-    >>> s
-    a    0.0
-    b    1.0
-    c    nan
-    d    3.0
-    e    4.0
-
-    >>> isnull(s)
-    a    False
-    b    False
-    c    True
-    d    False
-    e    False
-
-    >>> isnull(None)
-    True
-
-These functions can be used, for example, to select only valid data
-from a Series. Since this is such a common operation, a method
-**valid** to do the same thing:
-
-::
-
-    >>> s[notnull(s)]
-    a    0.0
-    b    1.0
-    d    3.0
-    e    4.0
-
-    >>> s.valid()
-    a    0.0
-    b    1.0
-    d    3.0
-    e    4.0
-
-.. _series.reindexing:
-
-Reindexing
-~~~~~~~~~~
-
-Reindexing is one of the most important features of the Series and the
-other pandas data structures. In essence it means: *conform data to a
-specified index*.
-
-Using our prior example, we can see the basic behavior:
-
-::
-
-    >>> s.reindex(['f', 'a', 'd', 'e'])
-    f    nan
-    a    0.0
-    d    3.0
-    e    4.0
-
-As you can see, the new index order is as inputted, and values not
-present in the Series appear as NaN.
-
-For TimeSeries or other ordered Series, an additional argument can be
-specified to perform forward- (referred to as "padding") or
-back-filling:
-
-::
-
-    >>> ts
-    2009-01-02 00:00:00    1.0
-    2009-01-07 00:00:00    4.0
-
-    >>> ts.reindex(dates, method='pad')
-    2009-01-01 00:00:00    nan
-    2009-01-02 00:00:00    1.0
-    2009-01-05 00:00:00    1.0
-    2009-01-06 00:00:00    1.0
-    2009-01-07 00:00:00    4.0
-
-    >>> ts.reindex(dates, method='backfill')
-    2009-01-01 00:00:00    1.0
-    2009-01-02 00:00:00    1.0
-    2009-01-05 00:00:00    4.0
-    2009-01-06 00:00:00    4.0
-    2009-01-07 00:00:00    4.0
-
-.. note::
-
-    This filling logic assumes that the both the new and old Index
-    objects have ordered values.
-
-Two common reindexing methods are provided: **valid** (which we
-already mentioned) and **truncate** (for selecting intervals of index
-values).
-
-::
-
-    >>> ts
-    2009-01-01 00:00:00    0.0
-    2009-01-02 00:00:00    1.0
-    2009-01-05 00:00:00    2.0
-    2009-01-06 00:00:00    3.0
-    2009-01-07 00:00:00    4.0
-
-    >>> ts.truncate(before=datetime(2009, 1, 5), after=datetime(2009, 1, 6))
-    2009-01-05 00:00:00    2.0
-    2009-01-06 00:00:00    3.0
-
-Since writing out datetimes interactively like that can be a bit
-verbose, one can also pass a string date representation:
-
-::
-
-    >>> ts.truncate(after='1/5/2009')
-    2009-01-01 00:00:00    0.0
-    2009-01-02 00:00:00    1.0
-    2009-01-05 00:00:00    2.0
-
-
-.. autosummary::
-   :toctree: generated/
-
-   Series.reindex
-   Series.valid
-   Series.truncate
-
-Filling, padding, and interpolating values
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-It is often desirable to deal with missing values in some specific
-way, especially for time series data. As seen above, reindexing can be
-a useful approach, however we frequently will want to deal
-specifically with missing data in a particular way.
-
-The **fill** method provides two distinct behaviors: filling in NaNs
-with a static value or alternately padding / backfilling as with
-**reindex**:
-
-::
-
-    >>> ts
-    2009-01-01 00:00:00	0.0
-    2009-01-02 00:00:00	1.0
-    2009-01-05 00:00:00	nan
-    2009-01-06 00:00:00	nan
-    2009-01-07 00:00:00	4.0
-
-    >>> ts.fill(value=6)
-    2009-01-01 00:00:00	0.0
-    2009-01-02 00:00:00	1.0
-    2009-01-05 00:00:00	6.0
-    2009-01-06 00:00:00	6.0
-    2009-01-07 00:00:00	4.0
-
-    >>> ts.fill(method='pad')
-    2009-01-01 00:00:00	0.0
-    2009-01-02 00:00:00	1.0
-    2009-01-05 00:00:00	1.0
-    2009-01-06 00:00:00	1.0
-    2009-01-07 00:00:00	4.0
-
-
-In a similar vein, values can be linearly interpolated in either a
-naive way or in a time-spaced way
-
-::
-
-    >>> ts.interpolate()
-    2009-01-01 00:00:00	0.0
-    2009-01-02 00:00:00	1.0
-    2009-01-05 00:00:00	2.0
-    2009-01-06 00:00:00	3.0
-    2009-01-07 00:00:00	4.0
-
-    >>> ts.interpolate(method='time')
-    2009-01-01 00:00:00	0.0
-    2009-01-02 00:00:00	1.0
-    2009-01-05 00:00:00	2.8
-    2009-01-06 00:00:00	3.4
-    2009-01-07 00:00:00	4.0
-
-.. autosummary::
-   :toctree: generated/
-
-   Series.reindex
-   Series.fill
-   Series.interpolate
-
-Relabeling (renaming) Series index
-----------------------------------
-
-One might want to relabel the index based on a mapping or
-function. For this the :func:`Series.rename` method is provided. It
-can accept either a dict or a function:
-
-::
-
-    >>> s
-	a    -0.544970223484
-	b    -0.946388873158
-	c    0.0360854957476
-	d    -0.795018577574
-	e    0.195977583894
-
-	>>> s.rename(str.upper)
-	A    -0.544970223484
-	B    -0.946388873158
-	C    0.0360854957476
-	D    -0.795018577574
-	E    0.195977583894
-
 Iterating
 ---------
 
