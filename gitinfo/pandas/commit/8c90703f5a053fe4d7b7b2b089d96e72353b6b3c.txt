commit 8c90703f5a053fe4d7b7b2b089d96e72353b6b3c
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Sep 1 13:53:11 2011 -0400

    BUG: rolling_cov bias correction did not take into account changing number of observations

diff --git a/pandas/core/series.py b/pandas/core/series.py
index 0b389af17..5f49a5351 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -933,7 +933,7 @@ copy : boolean, default False
         self[:] = sortedSeries
         self.index = sortedSeries.index
 
-    def sort_labels(self, ascending=True):
+    def sort_index(self, ascending=True):
         """
         Sort object by labels (along an axis)
 
diff --git a/pandas/stats/moments.py b/pandas/stats/moments.py
index 763bef8b3..abf4bd394 100644
--- a/pandas/stats/moments.py
+++ b/pandas/stats/moments.py
@@ -48,7 +48,8 @@ def rolling_count(arg, window, time_rule=None):
 def rolling_cov(arg1, arg2, window, min_periods=None, time_rule=None):
     X, Y = _prep_binary(arg1, arg2)
     mean = lambda x: rolling_mean(x, window, min_periods, time_rule)
-    bias_adj = window / (window - 1)
+    count = rolling_count(X + Y, window, time_rule)
+    bias_adj = count / (count - 1)
     return (mean(X * Y) - mean(X) * mean(Y)) * bias_adj
 
 def rolling_corr(arg1, arg2, window, min_periods=None, time_rule=None):
diff --git a/pandas/stats/tests/test_moments.py b/pandas/stats/tests/test_moments.py
index 2f320a070..f12aa6ff4 100644
--- a/pandas/stats/tests/test_moments.py
+++ b/pandas/stats/tests/test_moments.py
@@ -9,6 +9,7 @@ from pandas.core.api import Series, DataFrame, DateRange
 from pandas.util.testing import assert_almost_equal
 import pandas.core.datetools as datetools
 import pandas.stats.moments as moments
+import pandas.util.testing as tm
 
 N, K = 100, 10
 
@@ -237,6 +238,15 @@ class TestMoments(unittest.TestCase):
         result = moments.rolling_corr(A, B, 50, min_periods=25)
         assert_almost_equal(result[-1], np.corrcoef(A[-50:], B[-50:])[0, 1])
 
+        # test for correct bias correction
+        a = tm.makeTimeSeries()
+        b = tm.makeTimeSeries()
+        a[:5] = np.nan
+        b[:10] = np.nan
+
+        result = moments.rolling_corr(a, b, len(a), min_periods=1)
+        assert_almost_equal(result[-1], a.corr(b))
+
     def test_ewmcov(self):
         self._check_binary_ew(moments.ewmcov)
 
