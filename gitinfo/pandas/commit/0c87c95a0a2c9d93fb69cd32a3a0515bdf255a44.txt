commit 0c87c95a0a2c9d93fb69cd32a3a0515bdf255a44
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Jun 28 19:42:07 2011 -0400

    oops, added test_parsers file, unit test coverage

diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index d20ed3d2f..cc7194359 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -79,7 +79,14 @@ def read_table(filepath_or_buffer, sep='\t', header=0, skiprows=None, index_col=
         Function to use for converting dates to strings. Defaults to
         dateutil.parser
     """
-    reader = open(filepath_or_buffer,'rb')
+    if hasattr(filepath_or_buffer, 'read'):
+        reader = filepath_or_buffer
+    else:
+        try:
+            # universal newline mode
+            reader = open(filepath_or_buffer, 'U')
+        except Exception: # pragma: no cover
+            reader = open(filepath_or_buffer, 'r')
 
     if skiprows is not None:
         skiprows = set(skiprows)
diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
new file mode 100644
index 000000000..10a52cb3f
--- /dev/null
+++ b/pandas/io/tests/test_parsers.py
@@ -0,0 +1,84 @@
+from cStringIO import StringIO
+from datetime import datetime
+import os
+import unittest
+
+from numpy import nan
+import numpy as np
+
+from pandas import DataFrame
+from pandas.io.parsers import read_csv, read_table, ExcelFile
+from pandas.util.testing import assert_almost_equal, assert_frame_equal
+
+class TestReadTable(unittest.TestCase):
+
+    def setUp(self):
+        self.dirpath = curpath()
+
+    def test_read_csv(self):
+        pass
+
+    def test_custom_na_values(self):
+        data = """A,B,C
+ignore,this,row
+1,NA,3
+-1.#IND,5,baz
+7,8,NaN
+"""
+        expected = [[1., nan, 3],
+                    [nan, 5, nan],
+                    [7, 8, nan]]
+
+        df = read_csv(StringIO(data), index_col=None, na_values=['baz'],
+                      skiprows=[1])
+        assert_almost_equal(df.values, expected)
+
+        df2 = read_table(StringIO(data), sep=',', index_col=None,
+                         na_values=['baz'], skiprows=[1])
+        assert_almost_equal(df2.values, expected)
+
+    def test_unnamed_columns(self):
+        data = """A,B,C,,
+1,2,3,4,5
+6,7,8,9,10
+11,12,13,14,15
+"""
+        expected = [[1,2,3,4,5.],
+                    [6,7,8,9,10],
+                    [11,12,13,14,15]]
+        df = read_table(StringIO(data), sep=',', index_col=None)
+        assert_almost_equal(df.values, expected)
+        self.assert_(np.array_equal(df.columns,
+                                    ['A', 'B', 'C', 'Unnamed: 3',
+                                     'Unnamed: 4']))
+
+    def test_read_csv_dataframe(self):
+        pth = os.path.join(self.dirpath, 'test1.csv')
+        df = read_csv(pth)
+        df2 = read_table(pth, sep=',')
+        self.assert_(np.array_equal(df.columns, ['A', 'B', 'C', 'D']))
+        self.assert_(isinstance(df.index[0], datetime))
+        self.assert_(df.values.dtype == np.float64)
+        assert_frame_equal(df, df2)
+
+    def test_read_csv_no_index_name(self):
+        pth = os.path.join(self.dirpath, 'test2.csv')
+        df = read_csv(pth)
+        df2 = read_table(pth, sep=',')
+        self.assert_(np.array_equal(df.columns, ['A', 'B', 'C', 'D']))
+        self.assert_(isinstance(df.index[0], datetime))
+        self.assert_(df.values.dtype == np.float64)
+        assert_frame_equal(df, df2)
+
+class TestExcelFile(unittest.TestCase):
+    pass
+
+def curpath():
+    pth, _ = os.path.split(os.path.abspath(__file__))
+    return pth
+
+if __name__ == '__main__':
+    import nose
+    nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
+                   exit=False)
+
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 713fb7592..a51193b65 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -684,12 +684,12 @@ class TestLongPanel(unittest.TestCase):
         self.assertEqual(len(torecs.dtype.names), len(lp.items) + 2)
 
         # DataFrame
-        df = DataFrame.fromRecords(recs)
+        df = DataFrame.from_records(recs)
         lp = LongPanel.fromRecords(df, 'f0', 'f1', exclude=['f2'])
         self.assertEqual(len(lp.items), 1)
 
         # dict of arrays
-        series = DataFrame.fromRecords(recs)._series
+        series = DataFrame.from_records(recs)._series
         lp = LongPanel.fromRecords(series, 'f0', 'f1', exclude=['f2'])
         self.assertEqual(len(lp.items), 1)
         self.assert_('f2' in series)
