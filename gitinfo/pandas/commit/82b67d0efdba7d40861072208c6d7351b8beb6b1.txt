commit 82b67d0efdba7d40861072208c6d7351b8beb6b1
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed May 9 16:57:31 2012 -0400

    ENH: handle non-DatetimeIndex to support statsmodels

diff --git a/pandas/tseries/api.py b/pandas/tseries/api.py
index dc5d64476..1fb2be9a5 100644
--- a/pandas/tseries/api.py
+++ b/pandas/tseries/api.py
@@ -4,6 +4,7 @@
 
 
 from pandas.tseries.index import DatetimeIndex, date_range, bdate_range
+from pandas.tseries.frequencies import infer_freq
 from pandas.tseries.offsets import *
 from pandas.tseries.period import PeriodIndex, period_range, pnow
 from pandas.tseries.resample import TimeGrouper
diff --git a/pandas/tseries/frequencies.py b/pandas/tseries/frequencies.py
index 5f7719550..e55570086 100644
--- a/pandas/tseries/frequencies.py
+++ b/pandas/tseries/frequencies.py
@@ -693,7 +693,6 @@ def infer_freq(index, warn=True):
     freq : string or None
         None if no discernable frequency
     """
-
     inferer = _FrequencyInferer(index, warn=warn)
     return inferer.get_freq()
 
@@ -704,6 +703,11 @@ class _FrequencyInferer(object):
     """
 
     def __init__(self, index, warn=True):
+        from pandas.tseries.index import DatetimeIndex
+
+        if not isinstance(index, DatetimeIndex):
+            index = DatetimeIndex(index)
+
         self.index = index
         self.values = np.asarray(index).view('i8')
         self.warn = warn
diff --git a/pandas/tseries/tests/test_frequencies.py b/pandas/tseries/tests/test_frequencies.py
index 7b87b4efe..1cbdf152a 100644
--- a/pandas/tseries/tests/test_frequencies.py
+++ b/pandas/tseries/tests/test_frequencies.py
@@ -10,6 +10,7 @@ import numpy as np
 from pandas import Index, DatetimeIndex, date_range
 
 from pandas.tseries.frequencies import to_offset, infer_freq
+from pandas.tseries.tools import to_datetime
 import pandas.tseries.offsets as offsets
 
 import pandas._tseries as lib
@@ -72,6 +73,10 @@ class TestFrequencyInference(unittest.TestCase):
         index = _dti(['1/1/2000', '1/2/2000', '1/3/2000'])
         self.assert_(infer_freq(index) == 'D')
 
+    def test_non_datetimeindex(self):
+        dates = to_datetime(['1/1/2000', '1/2/2000', '1/3/2000'])
+        self.assert_(infer_freq(dates) == 'D')
+
     def test_hour(self):
         self._check_tick(timedelta(hours=1), 'H')
 
