commit 404a1618c44530bae212f2cc163bce3286643994
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Feb 19 11:54:09 2011 -0500

    unit tests, getXS deprecation warning

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index a4918b6e2..dbff7d289 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -865,9 +865,12 @@ class DataFrame(Picklable, Groupable):
         of columns is provided.
         """
         if columns is None:
-            return np.array([self[col] for col in self.cols()]).T
-        else:
-            return np.array([self[col] for col in columns]).T
+            columns = self.cols()
+
+        if len(columns) == 0:
+            return np.zeros((0, 0))
+
+        return np.array([self[col] for col in columns]).T
 
     asMatrix = as_matrix
     # For DataMatrix compatibility
@@ -1083,7 +1086,7 @@ class DataFrame(Picklable, Groupable):
         mycopy = self.copy()
         for col in mycopy._series.keys():
             series = mycopy._series[col]
-            filledSeries = series.fill(method=method, value=value)
+            filledSeries = series.fillna(method=method, value=value)
             mycopy._series[col] = filledSeries
 
         return mycopy
@@ -1146,7 +1149,11 @@ class DataFrame(Picklable, Groupable):
         else:
             return Series(np.array(rowValues), index=subset)
 
-    getXS = lambda self, key: self.xs(key)
+    def getXS(self, key):
+        warnings.warn("'getXS' is deprecated. Use 'xs' instead",
+                      FutureWarning)
+
+        return self.xs(key)
 
     def pivot(self, index=None, columns=None, values=None):
         """
@@ -1162,9 +1169,8 @@ class DataFrame(Picklable, Groupable):
         values : string or object
             Column name to use for populating new frame's values
         """
-        from pandas.core.panel import _slow_pivot
-
-        return _slow_pivot(self[index], self[columns], self[values])
+        from pandas.core.panel import pivot
+        return pivot(self[index], self[columns], self[values])
 
     def reindex(self, index=None, columns=None, method=None, fillMethod=None):
         """
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index a0da52966..1a324b108 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -1012,7 +1012,7 @@ class DataMatrix(DataFrame):
             result = {}
             series = self._series
             for col, s in series.iteritems():
-                result[col] = s.fill(method=method, value=value)
+                result[col] = s.fillna(method=method, value=value)
 
             return DataMatrix(result, index=self.index, objects=self.objects)
         else:
@@ -1053,7 +1053,7 @@ class DataMatrix(DataFrame):
         result = Series(theSlice, index=xsIndex)
 
         if self.objects is not None and len(self.objects.columns) > 0:
-            result = result.append(self.objects.getXS(key))
+            result = result.append(self.objects.xs(key))
 
         return result
 
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index b35bfa58a..55a2ee45f 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -504,7 +504,7 @@ class WidePanel(Panel):
         if value is None:
             result = {}
             for col, s in self.iteritems():
-                result[col] = s.fill(method=method, value=value)
+                result[col] = s.fillna(method=method, value=value)
 
             return WidePanel.fromDict(result)
         else:
@@ -1962,21 +1962,20 @@ def pivot(index, columns, values):
     if len(index) == 0:
         return DataMatrix(index=[])
 
-    major_axis = Index(sorted(set(index)))
-    minor_axis = Index(sorted(set(columns)))
-
-    major_labels, _ = tseries.getMergeVec(index, major_axis.indexMap)
-    minor_labels, _ = tseries.getMergeVec(columns, minor_axis.indexMap)
+    try:
+        major_axis = Index(sorted(set(index)))
+        minor_axis = Index(sorted(set(columns)))
 
-    valueMat = values.view(np.ndarray).reshape(len(values), 1)
+        major_labels, _ = tseries.getMergeVec(index, major_axis.indexMap)
+        minor_labels, _ = tseries.getMergeVec(columns, minor_axis.indexMap)
 
-    longIndex = LongPanelIndex(major_axis, minor_axis,
-                               major_labels, minor_labels)
+        valueMat = values.view(np.ndarray).reshape(len(values), 1)
 
-    longPanel = LongPanel(valueMat, ['foo'], longIndex)
-    longPanel = longPanel.sort()
+        longIndex = LongPanelIndex(major_axis, minor_axis,
+                                   major_labels, minor_labels)
 
-    try:
+        longPanel = LongPanel(valueMat, ['foo'], longIndex)
+        longPanel = longPanel.sort()
         return longPanel.toWide()['foo']
     except PanelError:
         return _slow_pivot(index, columns, values)
diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index d82f9089a..d21ec6373 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -233,6 +233,10 @@ class TestDataFrame(unittest.TestCase):
         frame = self.klass(np.empty((3, 0)))
         self.assert_(len(frame.cols()) == 0)
 
+    def test_constructor_corner(self):
+        df = self.klass(index=[])
+        self.assertEqual(df.values.shape, (0, 0))
+
     def test_constructor_DataFrame(self):
         df = self.klass(self.frame)
         assert_frame_equal(df, self.frame)
@@ -575,7 +579,7 @@ class TestDataFrame(unittest.TestCase):
     def test_combineSeries(self):
 
         # Series
-        series = self.frame.getXS(self.frame.index[0])
+        series = self.frame.xs(self.frame.index[0])
 
         added = self.frame + series
 
@@ -855,14 +859,14 @@ class TestDataFrame(unittest.TestCase):
         samesize_frame = frame.dropIncompleteRows(specificColumns=['bar'])
         self.assert_(samesize_frame.index.equals(self.frame.index))
 
-    def test_fill(self):
+    def test_fillna(self):
         self.tsframe['A'][:5] = np.NaN
         self.tsframe['A'][-5:] = np.NaN
 
-        zero_filled = self.tsframe.fill(0)
+        zero_filled = self.tsframe.fillna(0)
         self.assert_((zero_filled['A'][:5] == 0).all())
 
-        padded = self.tsframe.fill(method='pad')
+        padded = self.tsframe.fillna(method='pad')
         self.assert_(np.isnan(padded['A'][:5]).all())
         self.assert_((padded['A'][-5:] == padded['A'][-5]).all())
 
@@ -870,7 +874,7 @@ class TestDataFrame(unittest.TestCase):
         self.mixed_frame['foo'][5:20] = np.NaN
         self.mixed_frame['A'][-10:] = np.NaN
 
-        result = self.mixed_frame.fill(value=0)
+        result = self.mixed_frame.fillna(value=0)
 
     def test_truncate(self):
         offset = datetools.bday
@@ -913,27 +917,27 @@ class TestDataFrame(unittest.TestCase):
         truncated = ts.truncate(after=end_missing)
         assert_frame_equal(truncated, expected)
 
-    def test_getXS(self):
+    def test_xs(self):
         idx = self.frame.index[5]
-        xs = self.frame.getXS(idx)
+        xs = self.frame.xs(idx)
         for item, value in xs.iteritems():
             if np.isnan(value):
                 self.assert_(np.isnan(self.frame[item][idx]))
             else:
                 self.assertEqual(value, self.frame[item][idx])
 
-        # mixed-type getXS
+        # mixed-type xs
         test_data = {
                 'A' : {'1' : 1, '2' : 2},
                 'B' : {'1' : '1', '2' : '2', '3' : '3'},
         }
         frame = self.klass(test_data)
-        xs = frame.getXS('1')
+        xs = frame.xs('1')
         self.assert_(xs.dtype == np.object_)
         self.assertEqual(xs['A'], 1)
         self.assertEqual(xs['B'], '1')
 
-        self.assertRaises(Exception, self.tsframe.getXS,
+        self.assertRaises(Exception, self.tsframe.xs,
                           self.tsframe.index[0] - datetools.bday)
 
     def test_pivot(self):
@@ -1127,8 +1131,8 @@ class TestDataFrame(unittest.TestCase):
 
         d = self.tsframe.index[0]
         shifted_d = d + datetools.BDay(5)
-        assert_series_equal(self.tsframe.getXS(d),
-                            shiftedFrame.getXS(shifted_d))
+        assert_series_equal(self.tsframe.xs(d),
+                            shiftedFrame.xs(shifted_d))
 
     def test_apply(self):
         # ufunc
@@ -1141,7 +1145,7 @@ class TestDataFrame(unittest.TestCase):
 
         d = self.frame.index[0]
         applied = self.frame.apply(np.mean, axis=1)
-        self.assertEqual(applied[d], np.mean(self.frame.getXS(d)))
+        self.assertEqual(applied[d], np.mean(self.frame.xs(d)))
         self.assert_(applied.index is self.frame.index) # want this
 
         # empty
@@ -1154,7 +1158,7 @@ class TestDataFrame(unittest.TestCase):
     def test_tapply(self):
         d = self.frame.index[0]
         tapplied = self.frame.tapply(np.mean)
-        self.assertEqual(tapplied[d], np.mean(self.frame.getXS(d)))
+        self.assertEqual(tapplied[d], np.mean(self.frame.xs(d)))
 
     def test_applymap(self):
         applied = self.frame.applymap(lambda x: x * 2)
@@ -1492,6 +1496,15 @@ class TestDataFrame(unittest.TestCase):
 
         self._check_statistic(self.frame, 'count', f)
 
+        # corner case
+
+        frame = self.klass()
+        ct1 = frame.count(1)
+        self.assert_(isinstance(ct1, Series))
+
+        ct2 = frame.count(0)
+        self.assert_(isinstance(ct2, Series))
+
     def test_sum(self):
         def f(x):
             x = np.asarray(x)
@@ -1583,7 +1596,7 @@ class TestDataFrame(unittest.TestCase):
     def test_cumsum(self):
         cumsum = self.tsframe.cumsum()
 
-        assert_series_equal(cumsum['A'], np.cumsum(self.tsframe['A'].fill(0)))
+        assert_series_equal(cumsum['A'], np.cumsum(self.tsframe['A'].fillna(0)))
 
         df = self.klass({'A' : np.arange(20)}, index=np.arange(20))
 
@@ -1598,7 +1611,7 @@ class TestDataFrame(unittest.TestCase):
         cumprod = self.tsframe.cumprod()
 
         assert_series_equal(cumprod['A'],
-                            np.cumprod(self.tsframe['A'].fill(1)))
+                            np.cumprod(self.tsframe['A'].fillna(1)))
 
         # fix issue
         cumprod_xs = self.tsframe.cumprod(axis=1)
diff --git a/pandas/core/tests/test_matrix.py b/pandas/core/tests/test_matrix.py
index 157bfae00..2ab3a024c 100644
--- a/pandas/core/tests/test_matrix.py
+++ b/pandas/core/tests/test_matrix.py
@@ -253,15 +253,15 @@ class TestDataMatrix(test_frame.TestDataFrame):
         self.mixed_frame['foo'][5:20] = np.NaN
         self.mixed_frame['A'][-10:] = np.NaN
 
-        obj_result = self.mixed_frame.objects.fill(value=0)
+        obj_result = self.mixed_frame.objects.fillna(value=0)
 
         del self.mixed_frame['foo']
 
         # XXX
-        obj_result = self.mixed_frame.objects.fill(value=0)
+        obj_result = self.mixed_frame.objects.fillna(value=0)
 
 	empty_float = self.frame.reindex(columns=[])
-        result = empty_float.fill(value=0)
+        result = empty_float.fillna(value=0)
 
     def test_count_objects(self):
         dm = DataMatrix(self.mixed_frame._series)
diff --git a/pandas/core/tests/test_panel.py b/pandas/core/tests/test_panel.py
index c41f71976..8360e414c 100644
--- a/pandas/core/tests/test_panel.py
+++ b/pandas/core/tests/test_panel.py
@@ -355,13 +355,13 @@ class TestWidePanel(unittest.TestCase, PanelTests):
         smaller_like = self.panel.reindex_like(smaller)
         assert_panel_equal(smaller, smaller_like)
 
-    def test_fill(self):
-        filled = self.panel.fill(0)
+    def test_fillna(self):
+        filled = self.panel.fillna(0)
         self.assert_(np.isfinite(filled.values).all())
 
-        filled = self.panel.fill(method='backfill')
+        filled = self.panel.fillna(method='backfill')
         assert_frame_equal(filled['ItemA'],
-                           self.panel['ItemA'].fill(method='backfill'))
+                           self.panel['ItemA'].fillna(method='backfill'))
 
     def test_combineFrame(self):
         def check_op(op, name):
@@ -417,7 +417,7 @@ class TestWidePanel(unittest.TestCase, PanelTests):
         idx = self.panel.major_axis[5]
         xs = self.panel.major_xs(idx)
 
-        assert_series_equal(xs['ItemA'], ref.getXS(idx))
+        assert_series_equal(xs['ItemA'], ref.xs(idx))
 
         # not contained
         idx = self.panel.major_axis[0] - bday
diff --git a/pandas/core/tests/test_series.py b/pandas/core/tests/test_series.py
index f7948ae60..7f6f24d02 100644
--- a/pandas/core/tests/test_series.py
+++ b/pandas/core/tests/test_series.py
@@ -720,17 +720,18 @@ class TestSeries(unittest.TestCase):
 #-------------------------------------------------------------------------------
 # TimeSeries-specific
 
-    def test_fill(self):
+    def test_fillna(self):
         ts = Series([0., 1., 2., 3., 4.], index=common.makeDateIndex(5))
 
-        self.assert_(np.array_equal(ts, ts.fill()))
+        self.assert_(np.array_equal(ts, ts.fillna()))
 
         ts[2] = np.NaN
 
-        self.assert_(np.array_equal(ts.fill(), [0., 1., 1., 3., 4.]))
-        self.assert_(np.array_equal(ts.fill(method='backfill'), [0., 1., 3., 3., 4.]))
+        self.assert_(np.array_equal(ts.fillna(), [0., 1., 1., 3., 4.]))
+        self.assert_(np.array_equal(ts.fillna(method='backfill'),
+                                    [0., 1., 3., 3., 4.]))
 
-        self.assert_(np.array_equal(ts.fill(value=5), [0., 1., 5., 3., 4.]))
+        self.assert_(np.array_equal(ts.fillna(value=5), [0., 1., 5., 3., 4.]))
 
     def test_asfreq(self):
         ts = Series([0., 1., 2.], index=[datetime(2009, 10, 30),
diff --git a/pandas/stats/ols.py b/pandas/stats/ols.py
index 51278f6ea..27609d70e 100644
--- a/pandas/stats/ols.py
+++ b/pandas/stats/ols.py
@@ -1064,7 +1064,7 @@ class MovingOLS(OLS):
             elif isinstance(value, Series):
                 value = value[self.beta.index[-1]]
             elif isinstance(value, DataFrame):
-                value = value.getXS(self.beta.index[-1])
+                value = value.xs(self.beta.index[-1])
             else:
                 raise Exception('Problem retrieving %s' % result)
             results[result] = value
