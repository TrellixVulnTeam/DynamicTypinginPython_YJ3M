commit 89632189cc2f7d1c9bfcbe42342238092e0426c1
Author: gfyoung <gfyoung17+GitHub@gmail.com>
Date:   Thu Oct 18 10:30:03 2018 -0700

    DEPR/CLN: Clean up to_dense signature deprecations (#22910)
    
    Also deprecate `fill` in `.get_values` because its
    parameter was being passed to `.to_dense`, which
    no longer accepts the `fill` parameter.
    
    xref gh-14686.

diff --git a/doc/source/whatsnew/v0.24.0.txt b/doc/source/whatsnew/v0.24.0.txt
index d5af3e51d..9159f7c80 100644
--- a/doc/source/whatsnew/v0.24.0.txt
+++ b/doc/source/whatsnew/v0.24.0.txt
@@ -751,6 +751,8 @@ Removal of prior version deprecations/changes
 - :meth:`Categorical.searchsorted` and :meth:`Series.searchsorted` have renamed the ``v`` argument to ``value`` (:issue:`14645`)
 - :meth:`TimedeltaIndex.searchsorted`, :meth:`DatetimeIndex.searchsorted`, and :meth:`PeriodIndex.searchsorted` have renamed the ``key`` argument to ``value`` (:issue:`14645`)
 - Removal of the previously deprecated module ``pandas.json`` (:issue:`19944`)
+- :meth:`SparseArray.get_values` and :meth:`SparseArray.to_dense` have dropped the ``fill`` parameter (:issue:`14686`)
+- :meth:`SparseSeries.to_dense` has dropped the ``sparse_only`` parameter (:issue:`14686`)
 
 .. _whatsnew_0240.performance:
 
diff --git a/pandas/core/arrays/sparse.py b/pandas/core/arrays/sparse.py
index e6ca7b8de..9dfffc489 100644
--- a/pandas/core/arrays/sparse.py
+++ b/pandas/core/arrays/sparse.py
@@ -1249,31 +1249,19 @@ class SparseArray(PandasObject, ExtensionArray, ExtensionOpsMixin):
         return type(self)(sp_values, sparse_index=self.sp_index,
                           fill_value=fill_value)
 
-    def get_values(self, fill=None):
-        """ return a dense representation """
-        # TODO: deprecate for to_dense?
-        return self.to_dense(fill=fill)
-
-    def to_dense(self, fill=None):
+    def to_dense(self):
         """
         Convert SparseArray to a NumPy array.
 
-        Parameters
-        ----------
-        fill: float, default None
-            .. deprecated:: 0.20.0
-               This argument is not respected by this function.
-
         Returns
         -------
         arr : NumPy array
         """
-        if fill is not None:
-            warnings.warn(("The 'fill' parameter has been deprecated and "
-                           "will be removed in a future version."),
-                          FutureWarning, stacklevel=2)
         return np.asarray(self, dtype=self.sp_values.dtype)
 
+    # TODO: Look into deprecating this in favor of `to_dense`.
+    get_values = to_dense
+
     # ------------------------------------------------------------------------
     # IO
     # ------------------------------------------------------------------------
diff --git a/pandas/core/sparse/series.py b/pandas/core/sparse/series.py
index 35ddd6238..5a747c6e4 100644
--- a/pandas/core/sparse/series.py
+++ b/pandas/core/sparse/series.py
@@ -439,33 +439,16 @@ class SparseSeries(Series):
                              kind=self.kind)
         self._data = SingleBlockManager(values, self.index)
 
-    def to_dense(self, sparse_only=False):
+    def to_dense(self):
         """
         Convert SparseSeries to a Series.
 
-        Parameters
-        ----------
-        sparse_only : bool, default False
-            .. deprecated:: 0.20.0
-                This argument will be removed in a future version.
-
-            If True, return just the non-sparse values, or the dense version
-            of `self.values` if False.
-
         Returns
         -------
         s : Series
         """
-        if sparse_only:
-            warnings.warn(("The 'sparse_only' parameter has been deprecated "
-                           "and will be removed in a future version."),
-                          FutureWarning, stacklevel=2)
-            int_index = self.sp_index.to_int_index()
-            index = self.index.take(int_index.indices)
-            return Series(self.sp_values, index=index, name=self.name)
-        else:
-            return Series(self.values.to_dense(), index=self.index,
-                          name=self.name)
+        return Series(self.values.to_dense(), index=self.index,
+                      name=self.name)
 
     @property
     def density(self):
diff --git a/pandas/tests/arrays/sparse/test_array.py b/pandas/tests/arrays/sparse/test_array.py
index c6f777863..e211b8626 100644
--- a/pandas/tests/arrays/sparse/test_array.py
+++ b/pandas/tests/arrays/sparse/test_array.py
@@ -533,33 +533,21 @@ class TestSparseArray(object):
         out = SparseArray(data, dtype=dtype)
         assert out.shape == shape
 
-    def test_to_dense(self):
-        vals = np.array([1, np.nan, np.nan, 3, np.nan])
-        res = SparseArray(vals).to_dense()
-        tm.assert_numpy_array_equal(res, vals)
-
-        res = SparseArray(vals, fill_value=0).to_dense()
-        tm.assert_numpy_array_equal(res, vals)
-
-        vals = np.array([1, np.nan, 0, 3, 0])
-        res = SparseArray(vals).to_dense()
-        tm.assert_numpy_array_equal(res, vals)
-
-        res = SparseArray(vals, fill_value=0).to_dense()
-        tm.assert_numpy_array_equal(res, vals)
-
-        vals = np.array([np.nan, np.nan, np.nan, np.nan, np.nan])
-        res = SparseArray(vals).to_dense()
-        tm.assert_numpy_array_equal(res, vals)
-
-        res = SparseArray(vals, fill_value=0).to_dense()
+    @pytest.mark.parametrize("vals", [
+        [np.nan, np.nan, np.nan, np.nan, np.nan],
+        [1, np.nan, np.nan, 3, np.nan],
+        [1, np.nan, 0, 3, 0],
+    ])
+    @pytest.mark.parametrize("method", ["to_dense", "get_values"])
+    @pytest.mark.parametrize("fill_value", [None, 0])
+    def test_dense_repr(self, vals, fill_value, method):
+        vals = np.array(vals)
+        arr = SparseArray(vals, fill_value=fill_value)
+        dense_func = getattr(arr, method)
+
+        res = dense_func()
         tm.assert_numpy_array_equal(res, vals)
 
-        # see gh-14647
-        with tm.assert_produces_warning(FutureWarning,
-                                        check_stacklevel=False):
-            SparseArray(vals).to_dense(fill=2)
-
     def test_getitem(self):
         def _checkit(i):
             assert_almost_equal(self.arr[i], self.arr.values[i])
diff --git a/pandas/tests/sparse/series/test_series.py b/pandas/tests/sparse/series/test_series.py
index 22fca1e6b..6a5821519 100644
--- a/pandas/tests/sparse/series/test_series.py
+++ b/pandas/tests/sparse/series/test_series.py
@@ -192,15 +192,6 @@ class TestSparseSeries(SharedWithSparse):
         series = self.bseries.to_dense()
         tm.assert_series_equal(series, Series(arr, name='bseries'))
 
-        # see gh-14647
-        with tm.assert_produces_warning(FutureWarning,
-                                        check_stacklevel=False):
-            series = self.bseries.to_dense(sparse_only=True)
-
-        indexer = np.isfinite(arr)
-        exp = Series(arr[indexer], index=index[indexer], name='bseries')
-        tm.assert_series_equal(series, exp)
-
         series = self.iseries.to_dense()
         tm.assert_series_equal(series, Series(arr, name='iseries'))
 
