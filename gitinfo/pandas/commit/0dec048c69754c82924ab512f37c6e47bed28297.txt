commit 0dec048c69754c82924ab512f37c6e47bed28297
Author: jreback <jeff@reback.net>
Date:   Wed May 21 18:35:38 2014 -0400

    BUG: Bug in expressions evaluation with reversed ops, showing in series-dataframe ops (GH7198)

diff --git a/doc/source/release.rst b/doc/source/release.rst
index 8586f2093..200451f14 100644
--- a/doc/source/release.rst
+++ b/doc/source/release.rst
@@ -534,6 +534,7 @@ Bug Fixes
   (:issue:`7178`)
 - Bug in recognizing out-of-bounds positional list indexers with ``iloc`` and a multi-axis tuple indexer (:issue:`7189`)
 - Bug in setitem with a single value, multi-index and integer indices (:issue:`7190`)
+- Bug in expressions evaluation with reversed ops, showing in series-dataframe ops (:issue:`7198`, :issue:`7192`)
 
 pandas 0.13.1
 -------------
diff --git a/pandas/computation/expressions.py b/pandas/computation/expressions.py
index bfb29e0d4..4aff00e3a 100644
--- a/pandas/computation/expressions.py
+++ b/pandas/computation/expressions.py
@@ -89,12 +89,18 @@ def _can_use_numexpr(op, op_str, a, b, dtype_check):
     return False
 
 
-def _evaluate_numexpr(op, op_str, a, b, raise_on_error=False, truediv=True,
+def _evaluate_numexpr(op, op_str, a, b, raise_on_error=False, truediv=True, reversed=False,
                       **eval_kwargs):
     result = None
 
     if _can_use_numexpr(op, op_str, a, b, 'evaluate'):
         try:
+
+            # we were originally called by a reversed op
+            # method
+            if reversed:
+                a,b = b,a
+
             a_value = getattr(a, "values", a)
             b_value = getattr(b, "values", b)
             result = ne.evaluate('a_value %s b_value' % op_str,
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 7ef15a9f3..6d7566bfd 100755
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2256,7 +2256,7 @@ class DataFrame(NDFrame):
                 names.append(col.name)
             elif isinstance(col, Index):
                 level = col
-                names.append(col.name)                
+                names.append(col.name)
             elif isinstance(col, (list, np.ndarray)):
                 level = col
                 names.append(None)
diff --git a/pandas/core/ops.py b/pandas/core/ops.py
index a52c1034e..72a31296b 100644
--- a/pandas/core/ops.py
+++ b/pandas/core/ops.py
@@ -68,19 +68,21 @@ def _create_methods(arith_method, radd_func, comp_method, bool_method,
         # not entirely sure why this is necessary, but previously was included
         # so it's here to maintain compatibility
         rmul=arith_method(operator.mul, names('rmul'), op('*'),
-                          default_axis=default_axis),
+                          default_axis=default_axis, reversed=True),
         rsub=arith_method(lambda x, y: y - x, names('rsub'), op('-'),
-                          default_axis=default_axis),
+                          default_axis=default_axis, reversed=True),
         rtruediv=arith_method(lambda x, y: operator.truediv(y, x),
                               names('rtruediv'), op('/'), truediv=True,
-                              fill_zeros=np.inf, default_axis=default_axis),
+                              fill_zeros=np.inf, default_axis=default_axis,
+                              reversed=True),
         rfloordiv=arith_method(lambda x, y: operator.floordiv(y, x),
                                names('rfloordiv'), op('//'),
-                               default_axis=default_axis, fill_zeros=np.inf),
+                               default_axis=default_axis, fill_zeros=np.inf,
+                               reversed=True),
         rpow=arith_method(lambda x, y: y ** x, names('rpow'), op('**'),
-                          default_axis=default_axis),
+                          default_axis=default_axis, reversed=True),
         rmod=arith_method(lambda x, y: y % x, names('rmod'), op('%'),
-                          default_axis=default_axis),
+                          default_axis=default_axis, reversed=True),
     )
     new_methods['div'] = new_methods['truediv']
     new_methods['rdiv'] = new_methods['rtruediv']
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 06a490539..7d040b2ed 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -8351,6 +8351,47 @@ class TestDataFrame(tm.TestCase, CheckIndexing,
         expected = Series(dict( float64 = 2, float32 = 2 ))
         assert_series_equal(results,expected)
 
+    def test_ops(self):
+
+        # tst ops and reversed ops in evaluation
+        # GH7198
+
+        # smaller hits python, larger hits numexpr
+        for n in [ 4, 4000 ]:
+
+            df = DataFrame(1,index=range(n),columns=list('abcd'))
+            df.iloc[0] = 2
+            m = df.mean()
+
+            for op_str, op, rop in [('+','__add__','__radd__'),
+                                    ('-','__sub__','__rsub__'),
+                                    ('*','__mul__','__rmul__'),
+                                    ('/','__truediv__','__rtruediv__')]:
+
+                base = DataFrame(np.tile(m.values,n).reshape(n,-1),columns=list('abcd'))
+                expected = eval("base{op}df".format(op=op_str))
+
+                # ops as strings
+                result = eval("m{op}df".format(op=op_str))
+                assert_frame_equal(result,expected)
+
+                # these are commutative
+                if op in ['+','*']:
+                    result = getattr(df,op)(m)
+                    assert_frame_equal(result,expected)
+
+                # these are not
+                elif op in ['-','/']:
+                    result = getattr(df,rop)(m)
+                    assert_frame_equal(result,expected)
+
+        # GH7192
+        df = DataFrame(dict(A=np.random.randn(25000)))
+        df.iloc[0:5] = np.nan
+        expected = (1-np.isnan(df.iloc[0:25]))
+        result = (1-np.isnan(df)).iloc[0:25]
+        assert_frame_equal(result,expected)
+
     def test_truncate(self):
         offset = datetools.bday
 
