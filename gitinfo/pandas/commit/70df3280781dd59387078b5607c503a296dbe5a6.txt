commit 70df3280781dd59387078b5607c503a296dbe5a6
Author: Adam Klein <adamklein@gmail.com>
Date:   Tue Dec 20 19:09:23 2011 -0500

    updated docs with whats new 0.4.1 to 0.4.3

diff --git a/doc/source/basics.rst b/doc/source/basics.rst
index 03c663565..40be80247 100644
--- a/doc/source/basics.rst
+++ b/doc/source/basics.rst
@@ -603,6 +603,10 @@ Series, it need only contain a subset of the labels as keys:
    df.rename(columns={'one' : 'foo', 'two' : 'bar'},
              index={'a' : 'apple', 'b' : 'banana', 'd' : 'durian'})
 
+The ``rename`` method also provides a ``copy`` named parameter that is by
+default ``True`` and copies the underlying data. Pass ``copy=False`` to rename
+the data in place.
+
 The Panel class has an a related ``rename_axis`` class which can rename any of
 its three axes.
 
diff --git a/doc/source/dsintro.rst b/doc/source/dsintro.rst
index c0e5cf073..8e22aa89d 100644
--- a/doc/source/dsintro.rst
+++ b/doc/source/dsintro.rst
@@ -184,6 +184,8 @@ tools for working with labeled data.
 Name attribute
 ~~~~~~~~~~~~~~
 
+.. _dsintro.name_attribute:
+
 Series can also have a ``name`` attribute:
 
 .. ipython:: python
@@ -463,6 +465,8 @@ DataFrame in tabular form, though it won't always fit the console width:
 DataFrame column types
 ~~~~~~~~~~~~~~~~~~~~~~
 
+.. _dsintro.column_types:
+
 The four main types stored in pandas objects are float, int, boolean, and
 object. A convenient ``dtypes`` attribute return a Series with the data type of
 each column:
diff --git a/doc/source/indexing.rst b/doc/source/indexing.rst
index 002dcdf04..d955fa34a 100644
--- a/doc/source/indexing.rst
+++ b/doc/source/indexing.rst
@@ -310,10 +310,13 @@ Label-based indexing with integer axis labels is a thorny topic. It has been
 discussed heavily on mailing lists and among various members of the scientific
 Python community. In pandas, our general viewpoint is that labels matter more
 than integer locations. Therefore, advanced indexing with ``.ix`` will always
+attempt label-based indexing, before falling back on integer-based indexing.
 
-Setting values in mixed-type objects
+Setting values in mixed-type DataFrame
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
+.. _indexing.mixed_type_setting:
+
 Setting values on a mixed-type DataFrame or Panel is supported when using scalar
 values, though setting arbitrary vectors is not yet supported:
 
@@ -321,9 +324,10 @@ values, though setting arbitrary vectors is not yet supported:
 
    df2 = df[:4]
    df2['foo'] = 'bar'
-   df2.ix[3]
-   df2.ix[3] = np.nan
-   df2
+   print df2
+   df2.ix[2] = np.nan
+   print df2
+   print df2.dtypes
 
 .. _indexing.class:
 
@@ -462,6 +466,8 @@ may wish to generate your own ``MultiIndex`` when preparing the data set.
 Reconstructing the level labels
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
+.. _indexing.get_level_values:
+
 The method ``get_level_values`` will return a vector of the labels for each
 location at a particular level:
 
@@ -565,6 +571,17 @@ which will lexicographically sort an axis with a ``MultiIndex``:
    s.sortlevel(0)
    s.sortlevel(1)
 
+.. _indexing.sortlevel_byname:
+
+Note, you may also pass a level name to ``sortlevel`` if the MultiIndex levels
+are named.
+
+.. ipython:: python
+
+   s.index.names = ['L1', 'L2']
+   s.sortlevel(level='L1')
+   s.sortlevel(level='L2')
+
 Some indexing will work even if the data are not sorted, but will be rather
 inefficient and will also return a copy of the data rather than a view:
 
diff --git a/doc/source/io.rst b/doc/source/io.rst
index ff5896bdc..83b216d95 100644
--- a/doc/source/io.rst
+++ b/doc/source/io.rst
@@ -31,7 +31,7 @@ data into a DataFrame object. They can take a number of arguments:
   - ``path_or_buffer``: Either a string path to a file, or any object with a
     ``read`` method (such as an open file or ``StringIO``).
   - ``sep``: A delimiter / separator to split fields on. `read_csv` is capable
-    of inferring automatically "sniffing" the delimiter in some cases
+    of inferring the delimiter automatically in some cases by "sniffing"
   - ``header``: row number to use as the column names, and the start of the data.
     Defaults to 0 (first row); specify None if there is no header row.
   - ``names``: List of column names to use. If passed, header will be
@@ -134,6 +134,8 @@ to do as before:
 Reading DataFrame objects with ``MultiIndex``
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
+.. _io.csv_multiindex:
+
 Suppose you have data indexed by two columns:
 
 .. ipython:: python
@@ -149,23 +151,24 @@ column numbers to turn multiple columns into a ``MultiIndex``:
    df
    df.ix[1978]
 
-.. .. _io.sniff:
-
-.. Automatically "sniffing" the delimiter
-.. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-.. ``read_csv`` is capable of inferring delimited, but not necessarily
-.. comma-separated, files in some cases:
+.. _io.sniff:
 
-.. .. ipython:: python
+Automatically "sniffing" the delimiter
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
-..    print open('tmp.csv').read()
-..    read_csv('tmp.csv')
+``read_csv`` is capable of inferring delimited (not necessarily
+comma-separated) files. YMMV, as pandas uses the Sniffer_ class of the csv
+module.
 
+.. ipython:: python
 
+    print open('tmp2.sv').read()
+    read_csv('tmp2.sv')
 
 .. _io.chunking:
 
+.. _Sniffer: http://docs.python.org/library/csv.html#csv.Sniffer
+
 Iterating through files chunk by chunk
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
@@ -176,6 +179,7 @@ rather than reading the entire file into memory, such as the following:
    :suppress:
 
    df[:7].to_csv('tmp.sv', sep='|')
+   df[:7].to_csv('tmp2.sv', sep=':')
 
 .. ipython:: python
 
diff --git a/doc/source/merging.rst b/doc/source/merging.rst
index a5b639f3d..df83821d9 100644
--- a/doc/source/merging.rst
+++ b/doc/source/merging.rst
@@ -54,6 +54,8 @@ and ignore the fact that they may have overlapping indexes:
    df1
    df2
 
+.. _merging.ignore_index:
+
 To do this, use the ``ignore_index`` argument:
 
 .. ipython:: python
diff --git a/doc/source/missing_data.rst b/doc/source/missing_data.rst
index 272ad9ec6..06c9eead9 100644
--- a/doc/source/missing_data.rst
+++ b/doc/source/missing_data.rst
@@ -63,6 +63,8 @@ computations. Since in NumPy divide-by-zero generates ``inf`` or ``-inf`` and
 not ``NaN``, I think you will find this is a worthwhile trade-off (Zen of
 Python: "practicality beats purity").
 
+.. _missing.isnull:
+
 To make detecting missing values easier (and across different array dtypes),
 pandas provides the :func:`~pandas.core.common.isnull` and
 :func:`~pandas.core.common.notnull` functions, which are also methods on
diff --git a/doc/source/reshaping.rst b/doc/source/reshaping.rst
index c2227511d..2247470c9 100644
--- a/doc/source/reshaping.rst
+++ b/doc/source/reshaping.rst
@@ -142,6 +142,8 @@ unstacks the **last level**:
    stacked.unstack(1)
    stacked.unstack(0)
 
+.. _reshaping.unstack_by_name:
+
 If the indexes have names, you can use the level names instead of specifying
 the level numbers:
 
diff --git a/doc/source/whatsnew/v0.4.x.rst b/doc/source/whatsnew/v0.4.x.rst
index 441db4ebb..538c26da4 100644
--- a/doc/source/whatsnew/v0.4.x.rst
+++ b/doc/source/whatsnew/v0.4.x.rst
@@ -2,3 +2,74 @@
 
 v.0.4.3 through v0.4.1 (September 25 - October 9, 2011)
 -------------------------------------------------------
+
+New Features
+============
+- Added Python 3 support using 2to3 (PR200_)
+- :ref:`Added <dsintro.name_attribute>` ``name`` attribute to ``Series``, now
+  prints as part of ``Series.__repr__``
+- :ref:`Added <missing.isnull>` instance methods ``isnull`` and ``notnull`` to
+  Series (PR209_, GH203_)
+- :ref:`Added <basics.align>` ``Series.align`` method for aligning two series
+  with choice of join method (ENH56_)
+- :ref:`Added <indexing.get_level_values>` method ``get_level_values`` to
+  ``MultiIndex`` (IS188_)
+- :ref:`Set <indexing.mixed_type_setting>` values in mixed-type
+  ``DataFrame`` objects via ``.ix`` indexing attribute (GH135_)
+- Added new ``DataFrame`` :ref:`methods <dsintro.column_types>`
+  ``get_dtype_counts`` and property ``dtypes`` (ENHdc_)
+- Added :ref:`ignore_index <merging.ignore_index>` option to
+  ``DataFrame.append`` to stack DataFrames (ENH1b_)
+- ``read_csv`` tries to :ref:`sniff <io.sniff>` delimiters using
+  ``csv.Sniffer`` (PR146_)
+- ``read_csv`` can :ref:`read <io.csv_multiindex>` multiple columns into a
+  ``MultiIndex``; DataFrame's ``to_csv`` method writes out a corresponding
+  ``MultiIndex`` (PR151_)
+- ``DataFrame.rename`` has a new ``copy`` parameter to :ref:`rename
+  <basics.rename>` a DataFrame in place (ENHed_)
+- :ref:`Enable <reshaping.unstack_by_name>` unstacking by name (PR142_)
+- :ref:`Enable <indexing.sortlevel_byname>` ``sortlevel`` to work by level (PR141_)
+
+Performance Enhancements
+========================
+- Altered binary operations on differently-indexed SparseSeries objects
+  to use the integer-based (dense) alignment logic which is faster with a
+  larger number of blocks (GH205_)
+- Wrote faster Cython data alignment / merging routines resulting in
+  substantial speed increases
+- Improved performance of ``isnull`` and ``notnull``, a regression from v0.3.0
+  (GH187_)
+- Refactored code related to ``DataFrame.join`` so that intermediate aligned
+  copies of the data in each ``DataFrame`` argument do not need to be created.
+  Substantial performance increases result (GH176_)
+- Substantially improved performance of generic ``Index.intersection`` and
+  ``Index.union``
+- Implemented ``BlockManager.take`` resulting in significantly faster ``take``
+  performance on mixed-type ``DataFrame`` objects (GH104_)
+- Improved performance of ``Series.sort_index``
+- Significant groupby performance enhancement: removed unnecessary integrity
+  checks in DataFrame internals that were slowing down slicing operations to
+  retrieve groups
+- Optimized ``_ensure_index`` function resulting in performance savings in
+  type-checking Index objects
+- Wrote fast time series merging / joining methods in Cython. Will be
+  integrated later into DataFrame.join and related functions
+
+.. _PR146: https://github.com/wesm/pandas/pull/146
+.. _ENH1b: https://github.com/wesm/pandas/commit/1ba56251f0013ff7cd8834e9486cef2b10098371
+.. _ENHdc: https://github.com/wesm/pandas/commit/dca3c5c5a6a3769ee01465baca04cfdfa66a4f76
+.. _GH135: https://github.com/wesm/pandas/issues/135
+.. _PR151: https://github.com/wesm/pandas/pull/151
+.. _ENHed: https://github.com/wesm/pandas/commit/edd9f1945fc010a57fa0ae3b3444d1fffe592591
+.. _PR142: https://github.com/wesm/pandas/pull/142
+.. _PR141: https://github.com/wesm/pandas/pull/141
+.. _IS188: https://github.com/wesm/pandas/issues/188
+.. _ENH56: https://github.com/wesm/pandas/commit/56e0c9ffafac79ce262b55a6a13e1b10a88fbe93
+.. _GH187: https://github.com/wesm/pandas/issues/187
+.. _GH176: https://github.com/wesm/pandas/issues/176
+.. _GH104: https://github.com/wesm/pandas/issues/104
+.. _GH205: https://github.com/wesm/pandas/issues/205
+.. _PR209: https://github.com/wesm/pandas/pull/209
+.. _GH203: https://github.com/wesm/pandas/issues/203
+.. _PR200: https://github.com/wesm/pandas/pull/200
+
