commit bdd143afa9dd355e86627853e29bcaad90a6b664
Author: Chang She <changshe@gmail.com>
Date:   Sat Nov 3 20:43:01 2012 -0400

    BUG: change default frequency for to_timestamp

diff --git a/pandas/tseries/period.py b/pandas/tseries/period.py
index 773ad4f34..4ed6d507b 100644
--- a/pandas/tseries/period.py
+++ b/pandas/tseries/period.py
@@ -187,14 +187,15 @@ class Period(object):
     def end_time(self):
         return self.to_timestamp('s', how='E')
 
-    def to_timestamp(self, freq='s', how='start'):
+    def to_timestamp(self, freq=None, how='start'):
         """
         Return the Timestamp representation of the Period at the target
-        frequency
+        frequency at the specified end (how) of the Period
 
         Parameters
         ----------
-        freq : string or DateOffset, default is second
+        freq : string or DateOffset, default is 'D' if self.freq is week or
+               longer and 'S' otherwise
             Target frequency
         how: str, default 'S' (start)
             'S', 'E'. Can be aliased as case insensitive
@@ -208,10 +209,10 @@ class Period(object):
 
         if freq is None:
             base, mult = _gfc(self.freq)
-            val = self
-        else:
-            base, mult = _gfc(freq)
-            val = self.asfreq(freq, how)
+            freq = _freq_mod.get_to_timestamp_base(base)
+
+        base, mult = _gfc(freq)
+        val = self.asfreq(freq, how)
 
         dt64 = plib.period_ordinal_to_dt64(val.ordinal, base)
         return Timestamp(dt64)
@@ -757,13 +758,14 @@ class PeriodIndex(Int64Index):
         # how to represent ourselves to matplotlib
         return self._get_object_array()
 
-    def to_timestamp(self, freq='s', how='start'):
+    def to_timestamp(self, freq=None, how='start'):
         """
         Cast to DatetimeIndex
 
         Parameters
         ----------
-        freq : string or DateOffset, default 's'
+        freq : string or DateOffset, default 'D' for week or longer, 'S'
+               otherwise
             Target frequency
         how : {'s', 'e', 'start', 'end'}
 
diff --git a/pandas/tseries/tests/test_period.py b/pandas/tseries/tests/test_period.py
index 456017d62..9d88e8dd7 100644
--- a/pandas/tseries/tests/test_period.py
+++ b/pandas/tseries/tests/test_period.py
@@ -215,12 +215,12 @@ class TestPeriodProperties(TestCase):
         start_ts = p.to_timestamp(how='S')
         aliases = ['s', 'StarT', 'BEGIn']
         for a in aliases:
-            self.assertEquals(start_ts, p.to_timestamp(how=a))
+            self.assertEquals(start_ts, p.to_timestamp('D', how=a))
 
         end_ts = p.to_timestamp(how='E')
         aliases = ['e', 'end', 'FINIsH']
         for a in aliases:
-            self.assertEquals(end_ts, p.to_timestamp(how=a))
+            self.assertEquals(end_ts, p.to_timestamp('D', how=a))
 
         from_lst = ['A', 'Q', 'M', 'W', 'B',
                     'D', 'H', 'Min', 'S']
@@ -231,7 +231,7 @@ class TestPeriodProperties(TestCase):
 
             self.assertEquals(p.start_time, p.to_timestamp(how='S'))
 
-            self.assertEquals(p.end_time, p.to_timestamp(how='E'))
+            self.assertEquals(p.end_time, p.to_timestamp('s', how='E'))
 
         # Frequency other than daily
 
@@ -245,8 +245,8 @@ class TestPeriodProperties(TestCase):
         expected = datetime(1985, 12, 31, 23, 59)
         self.assertEquals(result, expected)
 
-        result = p.to_timestamp('S', how='end')
-        expected = datetime(1985, 12, 31, 23, 59, 59)
+        result = p.to_timestamp(how='end')
+        expected = datetime(1985, 12, 31)
         self.assertEquals(result, expected)
 
         expected = datetime(1985, 1, 1)
