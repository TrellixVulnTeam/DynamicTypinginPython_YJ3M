commit 75ca642f1d3a1ed5c3115523969b9add97367da9
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Dec 1 16:43:45 2009 +0000

    DataMatrix will classify booleans as objects, and Series.reindex with boolean arrays will produce object array with NaNs if things are missing. Need some unit tests for these
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@60 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index d044842ce..03503a5cb 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -81,7 +81,7 @@ class DataMatrix(DataFrame):
                         assert(len(v) == len(index))
                         v = Series(v, index=index)
 
-                    if issubclass(v.dtype.type, (float, int, bool)):
+                    if issubclass(v.dtype.type, (float, int)):
                         valueDict[k] = v
                     else:
                         objectDict[k] = v
@@ -117,7 +117,10 @@ class DataMatrix(DataFrame):
                 else:
                     data = data.reshape((data.shape[0], 1))
 
-            values = np.asarray(data)
+            if issubclass(data.dtype.type, (np.bool_, np.str_, np.object_)):
+                values = np.asarray(data, dtype=object)
+            else:
+                values = np.asarray(data, dtype=float)
 
         elif data is None:
             if index is None:
@@ -266,53 +269,6 @@ class DataMatrix(DataFrame):
 
         return DataMatrix(mat, index=index, columns=colIndex)
 
-    @classmethod
-    def load(cls, baseFile):
-        """
-        Load DataMatrix from file.
-
-        Parameters
-        ----------
-        baseFile: string
-            Filename base where index/values are stored.
-            e.g. baseFile='myfile' --> 'myfile_index.npy' and
-                                       'myfile_values.npy'
-
-        Returns
-        -------
-        DataMatrix
-        """
-        import os
-
-        objectsFile = baseFile + '_objects'
-        cacheLoad = np.load(baseFile + '.npz')
-
-        if os.path.exists(objectsFile + '.npz'):
-            objectData = np.load(objectsFile + '.npz')
-            objects = DataMatrix(objectData['v'], columns=objectData['c'],
-                                 index=Index(objectData['i']))
-        else:
-            objects = None
-
-        return DataMatrix(cacheLoad['v'], index=Index(cacheLoad['i']),
-                          columns=cacheLoad['c'], objects=objects)
-
-    def save(self, baseFile):
-        """
-        Write DataFrame efficiently to file using NumPy serialization,
-        which is easily 100x faster than cPickle.
-
-        Note
-        ----
-        Saves data to 3 files, one for index, columns, and values matrix.
-        """
-
-        objectsFile = baseFile + '_objects'
-        np.savez(baseFile, i=self.index, v=self.values, c=self.columns)
-
-        if self.objects is not None and len(self.objects.columns) > 0:
-            self.objects.save(objectsFile)
-
 #-------------------------------------------------------------------------------
 # Outputting
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 73c86ea5d..33b08a6f4 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1021,7 +1021,10 @@ class Series(np.ndarray, Picklable, Groupable):
                 else:
                     thisVals = self.view(np.ndarray).astype(object)
                     vals = tseries.reindexObj(newIndex, thisVals, idxMap)
-                    vals = vals.astype(self.dtype)
+
+                    if not isnull(vals).any():
+                        vals = vals.astype(self.dtype)
+
                     return self.__class__(vals, index=newIndex)
 
         if not isinstance(newIndex, Index):
