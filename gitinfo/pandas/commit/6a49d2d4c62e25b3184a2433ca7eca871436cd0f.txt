commit 6a49d2d4c62e25b3184a2433ca7eca871436cd0f
Author: Adam Klein <adamklein@gmail.com>
Date:   Sat Feb 25 20:01:30 2012 -0500

    BUG: fix concatenation issue for M8 & object indices

diff --git a/pandas/core/index.py b/pandas/core/index.py
index 8d839f52a..4fa97d383 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -270,7 +270,12 @@ class Index(np.ndarray):
             to_concat = (self.values,) + tuple(other)
         else:
             to_concat = self.values, other.values
-        return Index(np.concatenate(to_concat))
+
+        try:
+            return Index(np.concatenate(to_concat))
+        except TypeError:
+            # need to unbox datetime64
+            return Index(np.concatenate(map(_maybe_box_dtindex, to_concat)))
 
     def take(self, *args, **kwargs):
         """
@@ -1057,6 +1062,11 @@ def _dt_index_op(opname):
             return func(other)
     return wrapper
 
+def _maybe_box_dtindex(idx):
+    if isinstance(idx, DatetimeIndex):
+        return Index(_dt_box_array(idx.asi8), dtype='object')
+    return idx
+
 class DatetimeIndex(Int64Index):
     """
     Immutable ndarray of datetime64 data, represented internally as int64, and
diff --git a/pandas/timeseries/__init__.py b/pandas/timeseries/__init__.py
index b5c468034..771d27be3 100644
--- a/pandas/timeseries/__init__.py
+++ b/pandas/timeseries/__init__.py
@@ -20,8 +20,6 @@ from trecords import *
 _c = const
 from extras import tsfromtxt, guess_freq
 
-from scikits.timeseries.version import __version__
-
 __all__ = [
     '_c', 'const', 'tdates','tseries','trecords', 'tsfromtxt', 'guess_freq']
 __all__.extend(tdates.__all__)
diff --git a/pandas/timeseries/version.py b/pandas/timeseries/version.py
deleted file mode 100644
index bcabcdd1d..000000000
--- a/pandas/timeseries/version.py
+++ /dev/null
@@ -1,23 +0,0 @@
-from pkg_resources import require, DistributionNotFound
-
-try:
-    __version__ = require('scikits.timeseries')[0].version
-except DistributionNotFound:
-    # package hasn't actually been installed. Importing directly from source
-    # folder. Explicitly import setup.py to extract version number
-    # This should only happen for developers of the package
-    import imp
-    import os
-    _parent_dir = os.path.split(os.path.dirname(__file__))[0]
-    _setup_dir = os.path.split(_parent_dir)[0]
-    _setup_py = os.path.join(_setup_dir, "setup.py")
-
-    if os.path.exists(_setup_py):
-        _setup = imp.load_source("setup", os.path.join(_setup_dir, "setup.py"))
-        __version__ = _setup.version
-    else:
-        # package not installed through setup tools, just leave version undefined
-        __version__ = None
-
-# Make an alias (sometimes it's easier to drop the _).
-version = __version__
\ No newline at end of file
