commit 60a277029a13a60d3407862b89316464d59b82c4
Author: bwignall <brianwignall@gmail.com>
Date:   Sat Feb 8 18:32:36 2014 -0500

    CLN: Convert assert_(x != y) to assertNotEqual
    
    Work on #6175. Converts instances in pandas/tests and pandas/*/tests. Tests still pass locally.

diff --git a/pandas/stats/tests/test_ols.py b/pandas/stats/tests/test_ols.py
index 476dec8c1..752d2f8ce 100644
--- a/pandas/stats/tests/test_ols.py
+++ b/pandas/stats/tests/test_ols.py
@@ -294,7 +294,7 @@ class TestOLSMisc(tm.TestCase):
         assert_series_equal(model1.beta, model2.beta)
 
         # TODO: can we infer whether the intercept is there...
-        self.assert_(model1.r2 != model2.r2)
+        self.assertNotEqual(model1.r2, model2.r2)
 
         # rolling
 
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index cca208333..a0fd992b3 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -798,7 +798,7 @@ class TestDataFrameFormatting(tm.TestCase):
             assert "10 rows x %d columns" % (max_cols - 1) in rep_str
             set_option('display.expand_frame_repr', True)
             wide_repr = repr(df)
-            self.assert_(rep_str != wide_repr)
+            self.assertNotEqual(rep_str, wide_repr)
 
             with option_context('display.width', 120):
                 wider_repr = repr(df)
@@ -824,7 +824,7 @@ class TestDataFrameFormatting(tm.TestCase):
             rep_str = repr(df)
             set_option('display.expand_frame_repr', True)
             wide_repr = repr(df)
-            self.assert_(rep_str != wide_repr)
+            self.assertNotEqual(rep_str, wide_repr)
 
             with option_context('display.width', 150):
                 wider_repr = repr(df)
@@ -848,7 +848,7 @@ class TestDataFrameFormatting(tm.TestCase):
             rep_str = repr(df)
             set_option('display.expand_frame_repr', True)
             wide_repr = repr(df)
-            self.assert_(rep_str != wide_repr)
+            self.assertNotEqual(rep_str, wide_repr)
 
             with option_context('display.width', 150):
                 wider_repr = repr(df)
@@ -874,7 +874,7 @@ class TestDataFrameFormatting(tm.TestCase):
             rep_str = repr(df)
             set_option('display.expand_frame_repr', True)
             wide_repr = repr(df)
-            self.assert_(rep_str != wide_repr)
+            self.assertNotEqual(rep_str, wide_repr)
 
         with option_context('display.width', 150):
             wider_repr = repr(df)
@@ -891,7 +891,7 @@ class TestDataFrameFormatting(tm.TestCase):
             rep_str = repr(df)
             set_option('display.expand_frame_repr', True)
             wide_repr = repr(df)
-            self.assert_(rep_str != wide_repr)
+            self.assertNotEqual(rep_str, wide_repr)
 
             with option_context('display.width', 150):
                 wider_repr = repr(df)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 9d5c449d7..a6ac80c99 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -8835,7 +8835,7 @@ class TestDataFrame(tm.TestCase, CheckIndexing,
 
         self.assert_('C' not in frame)
         self.assert_('foo' in frame)
-        self.assert_(id(frame['foo']) != c_id)
+        self.assertNotEqual(id(frame['foo']), c_id)
 
     def test_rename_bug(self):
         # GH 5344
@@ -9577,7 +9577,7 @@ class TestDataFrame(tm.TestCase, CheckIndexing,
         df.sort_index(inplace=True)
         expected = frame
         assert_frame_equal(df, expected)
-        self.assert_(a_id != id(df['A']))
+        self.assertNotEqual(a_id, id(df['A']))
 
         df = unordered.copy()
         df.sort_index(ascending=False, inplace=True)
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 581f4df58..0f66d5b29 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -1358,7 +1358,7 @@ class TestPanel(tm.TestCase, PanelTests, CheckIndexing,
         # this works, but return a copy
         result = self.panel.swapaxes('items', 'items')
         assert_panel_equal(self.panel,result)
-        self.assert_(id(self.panel) != id(result))
+        self.assertNotEqual(id(self.panel), id(result))
 
     def test_transpose(self):
         result = self.panel.transpose('minor', 'major', 'items')
diff --git a/pandas/tests/test_panel4d.py b/pandas/tests/test_panel4d.py
index 773079556..f8113b8b8 100644
--- a/pandas/tests/test_panel4d.py
+++ b/pandas/tests/test_panel4d.py
@@ -872,7 +872,7 @@ class TestPanel4d(tm.TestCase, CheckIndexing, SafeForSparse,
         # this works, but return a copy
         result = self.panel4d.swapaxes('items', 'items')
         assert_panel4d_equal(self.panel4d,result)
-        self.assert_(id(self.panel4d) != id(result))
+        self.assertNotEqual(id(self.panel4d), id(result))
 
     def test_to_frame(self):
         raise nose.SkipTest("skipping for now")
diff --git a/pandas/tseries/tests/test_offsets.py b/pandas/tseries/tests/test_offsets.py
index e37e27019..d30a646b1 100644
--- a/pandas/tseries/tests/test_offsets.py
+++ b/pandas/tseries/tests/test_offsets.py
@@ -150,7 +150,6 @@ class TestDateOffset(TestBase):
         offset1 = DateOffset(days=1)
         offset2 = DateOffset(days=365)
 
-        self.assert_(offset1 != offset2)
         self.assertNotEqual(offset1, offset2)
 
 
diff --git a/pandas/tseries/tests/test_period.py b/pandas/tseries/tests/test_period.py
index 1786a6d2a..074a8a04a 100644
--- a/pandas/tseries/tests/test_period.py
+++ b/pandas/tseries/tests/test_period.py
@@ -199,7 +199,7 @@ class TestPeriodProperties(tm.TestCase):
 
     def test_freq_str(self):
         i1 = Period('1982', freq='Min')
-        self.assert_(i1.freq[0] != '1')
+        self.assertNotEqual(i1.freq[0], '1')
 
     def test_repr(self):
         p = Period('Jan-2000')
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 5d846229e..a5d108df3 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -1729,9 +1729,9 @@ class TestTimeSeries(tm.TestCase):
         self.assertFalse(stamp == datetime.min)
         self.assertFalse(stamp == datetime(1600, 1, 1))
         self.assertFalse(stamp == datetime(2700, 1, 1))
-        self.assert_(stamp != datetime.min)
-        self.assert_(stamp != datetime(1600, 1, 1))
-        self.assert_(stamp != datetime(2700, 1, 1))
+        self.assertNotEqual(stamp, datetime.min)
+        self.assertNotEqual(stamp, datetime(1600, 1, 1))
+        self.assertNotEqual(stamp, datetime(2700, 1, 1))
         self.assert_(stamp > datetime(1600, 1, 1))
         self.assert_(stamp >= datetime(1600, 1, 1))
         self.assert_(stamp < datetime(2700, 1, 1))
@@ -2593,28 +2593,28 @@ class TestTimestamp(tm.TestCase):
         val = Timestamp(stamp)
 
         self.assertEqual(val, val)
-        self.assert_(not val != val)
-        self.assert_(not val < val)
+        self.assertFalse(val != val)
+        self.assertFalse(val < val)
         self.assert_(val <= val)
-        self.assert_(not val > val)
+        self.assertFalse(val > val)
         self.assert_(val >= val)
 
         other = datetime(2012, 5, 18)
         self.assertEqual(val, other)
-        self.assert_(not val != other)
-        self.assert_(not val < other)
-        self.assert_(val <= other)
-        self.assert_(not val > other)
-        self.assert_(val >= other)
+        self.assertFalse(val != other)
+        self.assertFalse(val < other)
+        self.assertTrue(val <= other)
+        self.assertFalse(val > other)
+        self.assertTrue(val >= other)
 
         other = Timestamp(stamp + 100)
 
         self.assertNotEqual(val, other)
-        self.assert_(val != other)
-        self.assert_(val < other)
-        self.assert_(val <= other)
-        self.assert_(other > val)
-        self.assert_(other >= val)
+        self.assertNotEqual(val, other)
+        self.assertTrue(val < other)
+        self.assertTrue(val <= other)
+        self.assertTrue(other > val)
+        self.assertTrue(other >= val)
 
     def test_cant_compare_tz_naive_w_aware(self):
         _skip_if_no_pytz()
