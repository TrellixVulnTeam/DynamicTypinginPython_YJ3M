commit 72157e15051695de0c518d161611eea144b3ba3e
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Jun 9 15:49:47 2010 +0000

    fixed reported issue with adding / subtracting Tick objects
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@194 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 5722e045c..d62acdbb4 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -18,13 +18,10 @@ def isnull(input):
     -------
     boolean ndarray or boolean
     '''
-    from pandas.core.series import Series
-
     if isinstance(input, np.ndarray):
         if input.dtype.kind in ('O', 'S'):
-            result = isnullobj(input).astype(bool)
-            if isinstance(input, Series):
-                result = Series(result, index=input.index)
+            result = input.astype(bool)
+            result[:] = isnullobj(input)
         else:
             result = -np.isfinite(input)
     else:
diff --git a/pandas/core/datetools.py b/pandas/core/datetools.py
index b7ee84dc6..bb1b3a1f0 100644
--- a/pandas/core/datetools.py
+++ b/pandas/core/datetools.py
@@ -492,12 +492,9 @@ class YearBegin(DateOffset):
 # Ticks
 
 class Tick(DateOffset):
-    pass
-
-class Hour(Tick):
     _normalizeFirst = False
     _delta = None
-    _inc = timedelta(0, 3600)
+    _inc = timedelta(microseconds=1000)
 
     @property
     def delta(self):
@@ -507,38 +504,20 @@ class Hour(Tick):
         return self._delta
 
     def apply(self, other):
-        return other + self.delta
+        if isinstance(other, (datetime, timedelta)):
+            return other + self.delta
+        elif isinstance(other, type(self)):
+            return type(self)(self.n + other.n)
+
+class Hour(Tick):
+    _inc = timedelta(0, 3600)
 
 class Minute(Tick):
-    _normalizeFirst = False
-    _delta = None
     _inc = timedelta(0, 60)
 
-    @property
-    def delta(self):
-        if self._delta is None:
-            self._delta = self.n * self._inc
-
-        return self._delta
-
-    def apply(self, other):
-        return other + self.delta
-
 class Second(Tick):
-    _normalizeFirst = False
-    _delta = None
     _inc = timedelta(0, 1)
 
-    @property
-    def delta(self):
-        if self._delta is None:
-            self._delta = self.n * self._inc
-
-        return self._delta
-
-    def apply(self, other):
-        return other + self.delta
-
 day = DateOffset()
 bday = BDay(normalize=True)
 businessDay = bday
@@ -559,9 +538,9 @@ thisYearBegin = YearBegin(0)
 thisBQuarterEnd = BQuarterEnd(0)
 
 # Functions to check where a date lies
-isBusinessDay = BDay.onOffset
-isMonthEnd = MonthEnd.onOffset
-isBMonthEnd = BMonthEnd.onOffset
+isBusinessDay = BDay().onOffset
+isMonthEnd = MonthEnd().onOffset
+isBMonthEnd = BMonthEnd().onOffset
 
 #-------------------------------------------------------------------------------
 # Offset names ("time rules") and related functions
diff --git a/pandas/core/tests/test_datetools.py b/pandas/core/tests/test_datetools.py
index 7177a6eb6..64e6472df 100644
--- a/pandas/core/tests/test_datetools.py
+++ b/pandas/core/tests/test_datetools.py
@@ -301,7 +301,6 @@ class TestWeek(unittest.TestCase):
 
         for offset, date, expected in tests:
             assertOnOffset(offset, date, expected)
-            pass
 
 class TestBMonthEnd(unittest.TestCase):
 
@@ -737,18 +736,27 @@ def test_Hour():
     assertEq(2 * Hour(), datetime(2010, 1, 1), datetime(2010, 1, 1, 2))
     assertEq(-1 * Hour(), datetime(2010, 1, 1, 1), datetime(2010, 1, 1))
 
+    assert (Hour(3) + Hour(2)) == Hour(5)
+    assert (Hour(3) - Hour(2)) == Hour()
+
 def test_Minute():
     assertEq(Minute(), datetime(2010, 1, 1), datetime(2010, 1, 1, 0, 1))
     assertEq(Minute(-1), datetime(2010, 1, 1, 0, 1), datetime(2010, 1, 1))
     assertEq(2 * Minute(), datetime(2010, 1, 1), datetime(2010, 1, 1, 0, 2))
     assertEq(-1 * Minute(), datetime(2010, 1, 1, 0, 1), datetime(2010, 1, 1))
 
+    assert (Minute(3) + Minute(2)) == Minute(5)
+    assert (Minute(3) - Minute(2)) == Minute()
+
 def test_Second():
     assertEq(Second(), datetime(2010, 1, 1), datetime(2010, 1, 1, 0, 0, 1))
     assertEq(Second(-1), datetime(2010, 1, 1, 0, 0, 1), datetime(2010, 1, 1))
     assertEq(2 * Second(), datetime(2010, 1, 1), datetime(2010, 1, 1, 0, 0, 2))
     assertEq(-1 * Second(), datetime(2010, 1, 1, 0, 0, 1), datetime(2010, 1, 1))
 
+    assert (Second(3) + Second(2)) == Second(5)
+    assert (Second(3) - Second(2)) == Second()
+
 def test_inferTimeRule():
     index1 = [datetime(2010, 1, 29, 0, 0),
               datetime(2010, 2, 26, 0, 0),
