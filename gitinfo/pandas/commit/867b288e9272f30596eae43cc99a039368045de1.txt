commit 867b288e9272f30596eae43cc99a039368045de1
Author: Victor Salgado <victor.mcsalgado@gmail.com>
Date:   Sun Nov 30 21:26:55 2014 -0200

    ENH: make Series work with map objects the same way as generators

diff --git a/doc/source/whatsnew/v0.15.2.txt b/doc/source/whatsnew/v0.15.2.txt
index 1e84762b6..2429aa2c6 100644
--- a/doc/source/whatsnew/v0.15.2.txt
+++ b/doc/source/whatsnew/v0.15.2.txt
@@ -69,6 +69,30 @@ Enhancements
 - ``Timedelta`` arithmetic returns ``NotImplemented`` in unknown cases, allowing extensions by custom classes (:issue:`8813`).
 - ``Timedelta`` now supports arithemtic with ``numpy.ndarray`` objects of the appropriate dtype (numpy 1.8 or newer only) (:issue:`8884`).
 - Added ``Timedelta.to_timedelta64`` method to the public API (:issue:`8884`).
+- ``Series`` now works with map objects the same way as generators (:issue:`8909`).
+
+  previous behaviour:
+
+  .. code-block:: python
+
+     In [1]: pd.Series(map(lambda x: x, range(3)), index=range(10, 13))
+     Out[1]: 
+     10    <map object at 0x7f817181d7f0>
+     11    <map object at 0x7f817181d7f0>
+     12    <map object at 0x7f817181d7f0>
+     dtype: object
+
+  current behavior:
+
+  .. ipython:: python
+
+     In [2]: pd.Series(map(lambda x: x, range(3)), index=range(10, 13))
+     Out[2]: 
+     10    0
+     11    1
+     12    2
+     dtype: int64
+
 
 .. _whatsnew_0152.performance:
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 68bf4f0f0..081e5c509 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -183,7 +183,8 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
                     raise ValueError("cannot specify a dtype with a Categorical")
                 if name is None:
                     name = data.name
-            elif isinstance(data, types.GeneratorType):
+            elif (isinstance(data, types.GeneratorType) or
+                  (compat.PY3 and isinstance(data, map))):
                 data = list(data)
             elif isinstance(data, (set, frozenset)):
                 raise TypeError("{0!r} type is unordered"
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index c4c2eebac..c096c44b6 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -632,6 +632,19 @@ class TestSeries(tm.TestCase, CheckNameIntegration):
         exp.index = lrange(10, 20)
         assert_series_equal(result, exp)
 
+    def test_constructor_map(self):
+        # GH8909
+        m = map(lambda x: x, range(10))
+
+        result = Series(m)
+        exp = Series(lrange(10))
+        assert_series_equal(result, exp)
+
+        m = map(lambda x: x, range(10))
+        result = Series(m, index=lrange(10, 20))
+        exp.index = lrange(10, 20)
+        assert_series_equal(result, exp)
+
     def test_constructor_categorical(self):
         cat = pd.Categorical([0, 1, 2, 0, 1, 2], ['a', 'b', 'c'], fastpath=True)
         cat.name = 'foo'
