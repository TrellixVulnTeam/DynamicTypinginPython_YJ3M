commit 428de741456502f8f38c19f48720a57061bb1399
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Sep 18 16:22:24 2012 -0400

    BUG: fix pandas.unique handling of Index subclasses. add Series.from_array alternate constructor, close #1759

diff --git a/pandas/core/algorithms.py b/pandas/core/algorithms.py
index d1092eb31..d5380b66a 100644
--- a/pandas/core/algorithms.py
+++ b/pandas/core/algorithms.py
@@ -29,7 +29,7 @@ def match(to_match, values, na_sentinel=-1):
     -------
     match : ndarray of integers
     """
-    values = np.asarray(values)
+    values = com._asarray_tuplesafe(values)
     if issubclass(values.dtype.type, basestring):
         values = np.array(values, dtype='O')
 
diff --git a/pandas/core/common.py b/pandas/core/common.py
index 962e50e36..580bdd21f 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -681,8 +681,12 @@ def intersection(*seqs):
     return type(seqs[0])(list(result))
 
 def _asarray_tuplesafe(values, dtype=None):
+    from pandas.core.index import Index
+
     if not isinstance(values, (list, tuple, np.ndarray)):
         values = list(values)
+    elif isinstance(values, Index):
+        return values.values
 
     if isinstance(values, list) and dtype in [np.object_, object]:
         return lib.list_to_object_array(values)
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 88dec0c58..8d8884238 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -3752,9 +3752,9 @@ class DataFrame(NDFrame):
             res_index = self.index
             res_columns = self.columns
             values = self.values
-            series_gen = (Series(values[i], index=res_columns,
-                                 name=res_index[i])
-                                 for i in range(len(res_index)))
+            series_gen = (Series.from_array(arr, index=res_columns, name=name)
+                          for i, (arr, name) in
+                          enumerate(izip(values, res_index)))
 
         keys = []
         results = {}
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 8f4435cb3..281f1ba55 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -354,6 +354,26 @@ class Series(np.ndarray, generic.PandasObject):
 
         return subarr
 
+    @classmethod
+    def from_array(cls, arr, index=None, name=None, copy=False):
+        """
+        Simplified alternate constructor
+        """
+        if copy:
+            arr = arr.copy()
+
+        klass = Series
+        if index.is_all_dates:
+            if not isinstance(index, (DatetimeIndex, PeriodIndex)):
+                index = DatetimeIndex(index)
+            klass = TimeSeries
+
+        result = arr.view(klass)
+        result.index = index
+        result.name = name
+
+        return result
+
     def __init__(self, data=None, index=None, dtype=None, name=None,
                  copy=False):
         """One-dimensional ndarray with axis labels (including time
diff --git a/pandas/tests/test_algos.py b/pandas/tests/test_algos.py
index 25a28c686..eb397a069 100644
--- a/pandas/tests/test_algos.py
+++ b/pandas/tests/test_algos.py
@@ -3,6 +3,7 @@ import unittest
 import numpy as np
 
 from pandas.core.api import Series
+import pandas as pd
 
 import pandas.core.algorithms as algos
 import pandas.util.testing as tm
@@ -43,8 +44,20 @@ class TestUnique(unittest.TestCase):
 
     def test_object_refcount_bug(self):
         lst = ['A', 'B', 'C', 'D', 'E']
-        for i in xrange(1000):
-            len(algos.unique(lst))
+        for i in xrange(1000): len(algos.unique(lst))
+
+    def test_on_index_object(self):
+        mindex = pd.MultiIndex.from_arrays([np.arange(5).repeat(5),
+                                            np.tile(np.arange(5), 5)])
+        mindex = mindex.repeat(2)
+
+        result = pd.unique(mindex)
+        result.sort()
+
+        expected = mindex.values
+        expected.sort()
+
+        tm.assert_almost_equal(result, expected)
 
 def test_quantile():
     s = Series(np.random.randn(100))
