commit 138b8ba853a6f4356b23d37d76e69425373f3315
Author: Skipper Seabold <jsseabold@gmail.com>
Date:   Thu Jan 7 12:25:41 2016 -0600

    BUG: Let numpy typecodes pass through. Closes #11990
    TST: Failing test for numpy typecode select
    
    BUG: Let numpy typecodes pass through.
    
    DOC: Document bug fix
    
    STY: Formatting

diff --git a/doc/source/whatsnew/v0.18.0.txt b/doc/source/whatsnew/v0.18.0.txt
index b4854b6e9..fd6da6036 100644
--- a/doc/source/whatsnew/v0.18.0.txt
+++ b/doc/source/whatsnew/v0.18.0.txt
@@ -117,6 +117,7 @@ Other enhancements
   values it contains (:issue:`11597`)
 - ``Series`` gained an ``is_unique`` attribute (:issue:`11946`)
 - ``DataFrame.quantile`` and ``Series.quantile`` now accept ``interpolation`` keyword (:issue:`10174`).
+- ``DataFrame.select_dtypes`` now allows the ``np.float16`` typecode (:issue:`11990`)
 
 .. _whatsnew_0180.enhancements.rounding:
 
diff --git a/pandas/core/common.py b/pandas/core/common.py
index e81b58a3f..3d320199e 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -1481,11 +1481,12 @@ def _get_dtype_from_object(dtype):
             dtype += '64'
 
         try:
-            return _get_dtype_from_object(getattr(np,dtype))
-        except AttributeError:
+            return _get_dtype_from_object(getattr(np, dtype))
+        except (AttributeError, TypeError):
             # handles cases like _get_dtype(int)
             # i.e., python objects that are valid dtypes (unlike user-defined
             # types, in general)
+            # TypeError handles the float16 typecode of 'e'
             # further handle internal types
             pass
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 26557e9b1..ba546b6da 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -16029,6 +16029,13 @@ starting,ending,measure
         with tm.assertRaisesRegexp(TypeError, 'data type.*not understood'):
             df.select_dtypes(['blargy, blarg, blarg'])
 
+    def test_select_dtypes_typecodes(self):
+        # GH 11990
+        df = mkdf(30, 3, data_gen_f=lambda x, y: np.random.random())
+        expected = df
+        FLOAT_TYPES = list(np.typecodes['AllFloat'])
+        assert_frame_equal(df.select_dtypes(FLOAT_TYPES), expected)
+
     def test_assign(self):
         df = DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
         original = df.copy()
