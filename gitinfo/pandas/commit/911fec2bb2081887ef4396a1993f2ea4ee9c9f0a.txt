commit 911fec2bb2081887ef4396a1993f2ea4ee9c9f0a
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Jun 3 11:53:57 2012 -0400

    BUG: fix multiindex partial slicing bug in .ix close #1352

diff --git a/RELEASE.rst b/RELEASE.rst
index 3cd2cea4e..01ca21db9 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -168,6 +168,7 @@ pandas 0.8.0
   - Consistently set name on groupby pieces (#184)
   - Treat dict return values as Series in GroupBy.apply (#823)
   - Respect column selection for DataFrame in in GroupBy.transform (#1365)
+  - Fix MultiIndex partial indexing bug (#1352)
 
 pandas 0.7.3
 ============
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 541004558..07a5dd738 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -168,11 +168,13 @@ class _NDFrameIndexer(object):
             except TypeError:
                 # slices are unhashable
                 pass
-            except Exception:
+            except Exception, e1:
                 if isinstance(tup[0], slice):
                     raise IndexingError
-                if tup[0] not in ax0: # and tup[0] not in ax0.levels[0]:
-                    raise
+                try:
+                    loc = ax0.get_loc(tup[0])
+                except KeyError:
+                    raise e1
 
         # to avoid wasted computation
         # df.ix[d1:d2, 0] -> columns first (True)
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index d0fd1a32b..dfd4d37ad 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -492,6 +492,21 @@ x   q   30      3    -0.6662 -0.5243 -0.3580  0.89145  2.5838"""
         expected = self.ymd[(lev >= 1) & (lev <= 3)]
         assert_frame_equal(result, expected)
 
+    def test_getitem_partial_column_select(self):
+        idx = MultiIndex(labels=[[0,0,0],[0,1,1],[1,0,1]],
+                         levels=[['a','b'],['x','y'],['p','q']])
+        df = DataFrame(np.random.rand(3,2),index=idx)
+
+        result = df.ix[('a', 'y'), :]
+        expected = df.ix[('a', 'y')]
+        assert_frame_equal(result, expected)
+
+        result = df.ix[('a', 'y'), [1, 0]]
+        expected = df.ix[('a', 'y')][[1, 0]]
+        assert_frame_equal(result, expected)
+
+        self.assertRaises(KeyError, df.ix.__getitem__, (('a', 'foo'), :))
+
     def test_sortlevel(self):
         df = self.frame.copy()
         df.index = np.arange(len(df))
