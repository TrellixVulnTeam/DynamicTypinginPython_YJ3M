commit 407cc5cab3cc74d8760872563a22cbf0bda2bb59
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Wed May 20 07:52:37 2020 -0700

    REF: make YearOffset a cdef class (#34264)

diff --git a/doc/source/reference/offset_frequency.rst b/doc/source/reference/offset_frequency.rst
index 62d17aa5f..20170459f 100644
--- a/doc/source/reference/offset_frequency.rst
+++ b/doc/source/reference/offset_frequency.rst
@@ -783,40 +783,6 @@ Methods
     QuarterBegin.is_on_offset
     QuarterBegin.__call__
 
-YearOffset
-----------
-.. autosummary::
-   :toctree: api/
-
-    YearOffset
-
-Properties
-~~~~~~~~~~
-.. autosummary::
-   :toctree: api/
-
-    YearOffset.freqstr
-    YearOffset.kwds
-    YearOffset.name
-    YearOffset.nanos
-    YearOffset.normalize
-    YearOffset.rule_code
-    YearOffset.n
-
-Methods
-~~~~~~~
-.. autosummary::
-   :toctree: api/
-
-    YearOffset.apply
-    YearOffset.apply_index
-    YearOffset.copy
-    YearOffset.isAnchored
-    YearOffset.onOffset
-    YearOffset.is_anchored
-    YearOffset.is_on_offset
-    YearOffset.__call__
-
 BYearEnd
 --------
 .. autosummary::
@@ -836,6 +802,7 @@ Properties
     BYearEnd.normalize
     BYearEnd.rule_code
     BYearEnd.n
+    BYearEnd.month
 
 Methods
 ~~~~~~~
@@ -870,6 +837,7 @@ Properties
     BYearBegin.normalize
     BYearBegin.rule_code
     BYearBegin.n
+    BYearBegin.month
 
 Methods
 ~~~~~~~
@@ -904,6 +872,7 @@ Properties
     YearEnd.normalize
     YearEnd.rule_code
     YearEnd.n
+    YearEnd.month
 
 Methods
 ~~~~~~~
@@ -938,6 +907,7 @@ Properties
     YearBegin.normalize
     YearBegin.rule_code
     YearBegin.n
+    YearBegin.month
 
 Methods
 ~~~~~~~
diff --git a/pandas/_libs/tslibs/offsets.pyx b/pandas/_libs/tslibs/offsets.pyx
index 17ea38961..6f044380d 100644
--- a/pandas/_libs/tslibs/offsets.pyx
+++ b/pandas/_libs/tslibs/offsets.pyx
@@ -24,7 +24,9 @@ from pandas._libs.tslibs.util cimport is_integer_object, is_datetime64_object
 
 from pandas._libs.tslibs.base cimport ABCTimestamp
 
-from pandas._libs.tslibs.ccalendar import MONTHS, DAYS, weekday_to_int, int_to_weekday
+from pandas._libs.tslibs.ccalendar import (
+    MONTHS, DAYS, MONTH_ALIASES, MONTH_TO_CAL_NUM, weekday_to_int, int_to_weekday,
+)
 from pandas._libs.tslibs.ccalendar cimport get_days_in_month, dayofweek
 from pandas._libs.tslibs.conversion cimport (
     convert_datetime_to_tsobject,
@@ -455,6 +457,11 @@ cdef class BaseOffset:
         all_paras = self.__dict__.copy()
         all_paras["n"] = self.n
         all_paras["normalize"] = self.normalize
+        for attr in self._attributes:
+            if hasattr(self, attr) and attr not in self.__dict__:
+                # cython attributes are not in __dict__
+                all_paras[attr] = getattr(self, attr)
+
         if 'holidays' in all_paras and not all_paras['holidays']:
             all_paras.pop('holidays')
         exclude = ['kwds', 'name', 'calendar']
@@ -551,8 +558,9 @@ cdef class BaseOffset:
     def _repr_attrs(self) -> str:
         exclude = {"n", "inc", "normalize"}
         attrs = []
-        for attr in sorted(self.__dict__):
-            if attr.startswith("_") or attr == "kwds":
+        for attr in sorted(self._attributes):
+            if attr.startswith("_") or attr == "kwds" or not hasattr(self, attr):
+                # DateOffset may not have some of these attributes
                 continue
             elif attr not in exclude:
                 value = getattr(self, attr)
@@ -1152,6 +1160,69 @@ class WeekOfMonthMixin(BaseOffset):
         return f"{self._prefix}-{self.week + 1}{weekday}"
 
 
+# ----------------------------------------------------------------------
+
+cdef class YearOffset(BaseOffset):
+    """
+    DateOffset that just needs a month.
+    """
+    _attributes = frozenset(["n", "normalize", "month"])
+
+    # _default_month: int  # FIXME: python annotation here breaks things
+
+    cdef readonly:
+        int month
+
+    def __init__(self, n=1, normalize=False, month=None):
+        BaseOffset.__init__(self, n, normalize)
+
+        month = month if month is not None else self._default_month
+        self.month = month
+
+        if month < 1 or month > 12:
+            raise ValueError("Month must go from 1 to 12")
+
+    def __reduce__(self):
+        return type(self), (self.n, self.normalize, self.month)
+
+    @classmethod
+    def _from_name(cls, suffix=None):
+        kwargs = {}
+        if suffix:
+            kwargs["month"] = MONTH_TO_CAL_NUM[suffix]
+        return cls(**kwargs)
+
+    @property
+    def rule_code(self) -> str:
+        month = MONTH_ALIASES[self.month]
+        return f"{self._prefix}-{month}"
+
+    def is_on_offset(self, dt) -> bool:
+        if self.normalize and not is_normalized(dt):
+            return False
+        return dt.month == self.month and dt.day == self._get_offset_day(dt)
+
+    def _get_offset_day(self, other) -> int:
+        # override BaseOffset method to use self.month instead of other.month
+        # TODO: there may be a more performant way to do this
+        return get_day_of_month(
+            other.replace(month=self.month), self._day_opt
+        )
+
+    @apply_wraps
+    def apply(self, other):
+        years = roll_yearday(other, self.n, self.month, self._day_opt)
+        months = years * 12 + (self.month - other.month)
+        return shift_month(other, months, self._day_opt)
+
+    @apply_index_wraps
+    def apply_index(self, dtindex):
+        shifted = shift_quarters(
+            dtindex.asi8, self.n, self.month, self._day_opt, modby=12
+        )
+        return type(dtindex)._simple_new(shifted, dtype=dtindex.dtype)
+
+
 # ----------------------------------------------------------------------
 # RelativeDelta Arithmetic
 
diff --git a/pandas/tseries/offsets.py b/pandas/tseries/offsets.py
index a80557da7..8aced50b7 100644
--- a/pandas/tseries/offsets.py
+++ b/pandas/tseries/offsets.py
@@ -1565,61 +1565,7 @@ class QuarterBegin(QuarterOffset):
 # Year-Based Offset Classes
 
 
-class YearOffset(SingleConstructorOffset):
-    """
-    DateOffset that just needs a month.
-    """
-
-    _attributes = frozenset(["n", "normalize", "month"])
-
-    def _get_offset_day(self, other: datetime) -> int:
-        # override BaseOffset method to use self.month instead of other.month
-        # TODO: there may be a more performant way to do this
-        return liboffsets.get_day_of_month(
-            other.replace(month=self.month), self._day_opt
-        )
-
-    @apply_wraps
-    def apply(self, other):
-        years = roll_yearday(other, self.n, self.month, self._day_opt)
-        months = years * 12 + (self.month - other.month)
-        return shift_month(other, months, self._day_opt)
-
-    @apply_index_wraps
-    def apply_index(self, dtindex):
-        shifted = liboffsets.shift_quarters(
-            dtindex.asi8, self.n, self.month, self._day_opt, modby=12
-        )
-        return type(dtindex)._simple_new(shifted, dtype=dtindex.dtype)
-
-    def is_on_offset(self, dt: datetime) -> bool:
-        if self.normalize and not is_normalized(dt):
-            return False
-        return dt.month == self.month and dt.day == self._get_offset_day(dt)
-
-    def __init__(self, n=1, normalize=False, month=None):
-        BaseOffset.__init__(self, n, normalize)
-
-        month = month if month is not None else self._default_month
-        object.__setattr__(self, "month", month)
-
-        if self.month < 1 or self.month > 12:
-            raise ValueError("Month must go from 1 to 12")
-
-    @classmethod
-    def _from_name(cls, suffix=None):
-        kwargs = {}
-        if suffix:
-            kwargs["month"] = ccalendar.MONTH_TO_CAL_NUM[suffix]
-        return cls(**kwargs)
-
-    @property
-    def rule_code(self) -> str:
-        month = ccalendar.MONTH_ALIASES[self.month]
-        return f"{self._prefix}-{month}"
-
-
-class BYearEnd(YearOffset):
+class BYearEnd(liboffsets.YearOffset):
     """
     DateOffset increments between business EOM dates.
     """
@@ -1630,7 +1576,7 @@ class BYearEnd(YearOffset):
     _day_opt = "business_end"
 
 
-class BYearBegin(YearOffset):
+class BYearBegin(liboffsets.YearOffset):
     """
     DateOffset increments between business year begin dates.
     """
@@ -1641,7 +1587,7 @@ class BYearBegin(YearOffset):
     _day_opt = "business_start"
 
 
-class YearEnd(YearOffset):
+class YearEnd(liboffsets.YearOffset):
     """
     DateOffset increments between calendar year ends.
     """
@@ -1651,7 +1597,7 @@ class YearEnd(YearOffset):
     _day_opt = "end"
 
 
-class YearBegin(YearOffset):
+class YearBegin(liboffsets.YearOffset):
     """
     DateOffset increments between calendar year begin dates.
     """
