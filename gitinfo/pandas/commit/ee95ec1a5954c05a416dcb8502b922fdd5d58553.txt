commit ee95ec1a5954c05a416dcb8502b922fdd5d58553
Author: Adam Klein <adamklein@gmail.com>
Date:   Fri Feb 24 16:43:36 2012 -0500

    ENH: rename fill_method to method, close #827

diff --git a/RELEASE.rst b/RELEASE.rst
index a0c605d96..946bd47ad 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -33,6 +33,10 @@ pandas 0.7.1
     the system clipboard (#774)
   - Add ``itertuples`` method to Dataframe for iterating through the rows of a
     dataframe as tuples (#818)
+  - Add ability to pass fill_value and method to Dataframe and Series align
+    method (#806)
+
+**API Changes**
 
 **Bug fixes**
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 4263b9198..db77981cc 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1677,7 +1677,7 @@ class DataFrame(NDFrame):
     # Reindexing and alignment
 
     def align(self, other, join='outer', axis=None, level=None, copy=True,
-              fill_value=None, fill_method=None):
+              fill_value=None, method=None):
         """
         Align two DataFrame object on their index and columns with the
         specified join method for each axis Index
@@ -1695,7 +1695,7 @@ class DataFrame(NDFrame):
             Always returns new objects. If copy=False and no reindexing is
             required then original objects are returned.
         fill_value : object, default None
-        fill_method : str, default None
+        method : str, default None
 
         Returns
         -------
@@ -1704,19 +1704,17 @@ class DataFrame(NDFrame):
         """
         if isinstance(other, DataFrame):
             return self._align_frame(other, join=join, axis=axis, level=level,
-                                     copy=copy,
-                                     fill_value=fill_value,
-                                     fill_method=fill_method)
+                                     copy=copy, fill_value=fill_value,
+                                     method=method)
         elif isinstance(other, Series):
             return self._align_series(other, join=join, axis=axis, level=level,
-                                      copy=copy,
-                                      fill_value=fill_value,
-                                      fill_method=fill_method)
+                                      copy=copy, fill_value=fill_value,
+                                      method=method)
         else:  # pragma: no cover
             raise TypeError('unsupported type: %s' % type(other))
 
     def _align_frame(self, other, join='outer', axis=None, level=None,
-                     copy=True, fill_value=None, fill_method=None):
+                     copy=True, fill_value=None, method=None):
         # defaults
         join_index, join_columns = None, None
         ilidx, iridx = None, None
@@ -1738,15 +1736,15 @@ class DataFrame(NDFrame):
                                            join_columns, clidx, copy)
         right = other._reindex_with_indexers(join_index, iridx,
                                              join_columns, cridx, copy)
-        fill_na = (fill_value is not None) or (fill_method is not None)
+        fill_na = (fill_value is not None) or (method is not None)
         if fill_na:
-            return (left.fillna(fill_value, method=fill_method),
-                    right.fillna(fill_value, method=fill_method))
+            return (left.fillna(fill_value, method=method),
+                    right.fillna(fill_value, method=method))
         else:
             return left, right
 
     def _align_series(self, other, join='outer', axis=None, level=None,
-                      copy=True, fill_value=None, fill_method=None):
+                      copy=True, fill_value=None, method=None):
         fdata = self._data
         if axis == 0:
             join_index = self.index
@@ -1776,10 +1774,10 @@ class DataFrame(NDFrame):
         left_result = DataFrame(fdata)
         right_result = other if ridx is None else other.reindex(join_index)
 
-        fill_na = (fill_value is not None) or (fill_method is not None)
+        fill_na = (fill_value is not None) or (method is not None)
         if fill_na:
-            return (left_result.fillna(fill_value, fill_method=fill_method),
-                    right_result.fillna(fill_value, fill_method=fill_method))
+            return (left_result.fillna(fill_value, method=method),
+                    right_result.fillna(fill_value, method=method))
         else:
             return left_result, right_result
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index f9d5593b1..5474cb381 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1794,7 +1794,7 @@ copy : boolean, default False
             return Series(mapped, index=self.index, name=self.name)
 
     def align(self, other, join='outer', level=None, copy=True,
-              fill_value=None, fill_method=None):
+              fill_value=None, method=None):
         """
         Align two Series object with the specified join method
 
@@ -1809,7 +1809,7 @@ copy : boolean, default False
             Always return new objects. If copy=False and no reindexing is
             required, the same object will be returned (for better performance)
         fill_value : object, default None
-        fill_method : str, default 'pad'
+        method : str, default 'pad'
 
         Returns
         -------
@@ -1822,10 +1822,10 @@ copy : boolean, default False
 
         left = self._reindex_indexer(join_index, lidx, copy)
         right = other._reindex_indexer(join_index, ridx, copy)
-        fill_na = (fill_value is not None) or (fill_method is not None)
+        fill_na = (fill_value is not None) or (method is not None)
         if fill_na:
-            return (left.fillna(fill_value, method=fill_method),
-                    right.fillna(fill_value, method=fill_method))
+            return (left.fillna(fill_value, method=method),
+                    right.fillna(fill_value, method=method))
         else:
             return left, right
 
