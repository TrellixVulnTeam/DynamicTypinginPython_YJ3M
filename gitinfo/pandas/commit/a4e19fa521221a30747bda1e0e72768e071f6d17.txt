commit a4e19fa521221a30747bda1e0e72768e071f6d17
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Thu Jul 2 10:34:51 2020 -0700

    TYP: type for get_timezone (#35096)

diff --git a/pandas/_libs/tslibs/timezones.pxd b/pandas/_libs/tslibs/timezones.pxd
index 0179be3cd..0784b090b 100644
--- a/pandas/_libs/tslibs/timezones.pxd
+++ b/pandas/_libs/tslibs/timezones.pxd
@@ -8,7 +8,7 @@ cdef bint is_tzlocal(tzinfo tz)
 cdef bint treat_tz_as_pytz(tzinfo tz)
 
 cpdef bint tz_compare(tzinfo start, tzinfo end)
-cpdef object get_timezone(object tz)
+cpdef object get_timezone(tzinfo tz)
 cpdef object maybe_get_tz(object tz)
 
 cdef get_utcoffset(tzinfo tz, obj)
diff --git a/pandas/_libs/tslibs/timezones.pyx b/pandas/_libs/tslibs/timezones.pyx
index 5bf47efec..046059104 100644
--- a/pandas/_libs/tslibs/timezones.pyx
+++ b/pandas/_libs/tslibs/timezones.pyx
@@ -1,6 +1,5 @@
 from datetime import timezone
-from cpython.datetime cimport datetime, tzinfo, PyTZInfo_Check, PyDateTime_IMPORT
-PyDateTime_IMPORT
+from cpython.datetime cimport datetime, tzinfo
 
 # dateutil compat
 from dateutil.tz import (
@@ -47,7 +46,7 @@ cdef inline bint treat_tz_as_dateutil(tzinfo tz):
     return hasattr(tz, '_trans_list') and hasattr(tz, '_trans_idx')
 
 
-cpdef inline object get_timezone(object tz):
+cpdef inline object get_timezone(tzinfo tz):
     """
     We need to do several things here:
     1) Distinguish between pytz and dateutil timezones
@@ -60,9 +59,7 @@ cpdef inline object get_timezone(object tz):
     the tz name. It needs to be a string so that we can serialize it with
     UJSON/pytables. maybe_get_tz (below) is the inverse of this process.
     """
-    if not PyTZInfo_Check(tz):
-        return tz
-    elif is_utc(tz):
+    if is_utc(tz):
         return tz
     else:
         if treat_tz_as_dateutil(tz):
diff --git a/pandas/core/arrays/datetimes.py b/pandas/core/arrays/datetimes.py
index 12eefec0c..64e8582ba 100644
--- a/pandas/core/arrays/datetimes.py
+++ b/pandas/core/arrays/datetimes.py
@@ -522,13 +522,6 @@ class DatetimeArray(dtl.DatetimeLikeArrayMixin, dtl.TimelikeOps, dtl.DatelikeOps
         """
         return self.tz
 
-    @property  # NB: override with cache_readonly in immutable subclasses
-    def _timezone(self):
-        """
-        Comparable timezone both for pytz / dateutil
-        """
-        return timezones.get_timezone(self.tzinfo)
-
     @property  # NB: override with cache_readonly in immutable subclasses
     def is_normalized(self):
         """
@@ -617,15 +610,17 @@ class DatetimeArray(dtl.DatetimeLikeArrayMixin, dtl.TimelikeOps, dtl.DatelikeOps
     # -----------------------------------------------------------------
     # Comparison Methods
 
-    def _has_same_tz(self, other):
-        zzone = self._timezone
+    def _has_same_tz(self, other) -> bool:
 
         # vzone shouldn't be None if value is non-datetime like
         if isinstance(other, np.datetime64):
             # convert to Timestamp as np.datetime64 doesn't have tz attr
             other = Timestamp(other)
-        vzone = timezones.get_timezone(getattr(other, "tzinfo", "__no_tz__"))
-        return zzone == vzone
+
+        if not hasattr(other, "tzinfo"):
+            return False
+        other_tz = other.tzinfo
+        return timezones.tz_compare(self.tzinfo, other_tz)
 
     def _assert_tzawareness_compat(self, other):
         # adapted from _Timestamp._assert_tzawareness_compat
diff --git a/pandas/core/indexes/datetimes.py b/pandas/core/indexes/datetimes.py
index f3c96db0a..86c6cdf5b 100644
--- a/pandas/core/indexes/datetimes.py
+++ b/pandas/core/indexes/datetimes.py
@@ -74,9 +74,7 @@ def _new_DatetimeIndex(cls, d):
     DatetimeArray,
     wrap=True,
 )
-@inherit_names(
-    ["_timezone", "is_normalized", "_resolution_obj"], DatetimeArray, cache=True
-)
+@inherit_names(["is_normalized", "_resolution_obj"], DatetimeArray, cache=True)
 @inherit_names(
     [
         "_bool_ops",
