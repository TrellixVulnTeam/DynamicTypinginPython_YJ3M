commit 68b1da7f53f043b21e3f722e8872e19941a10250
Author: topper-123 <contribute@tensortable.com>
Date:   Tue Apr 16 18:17:16 2019 +0100

    CLN: remove compat.lfilter (#26110)

diff --git a/pandas/compat/__init__.py b/pandas/compat/__init__.py
index 7e201920f..332b435d3 100644
--- a/pandas/compat/__init__.py
+++ b/pandas/compat/__init__.py
@@ -5,7 +5,7 @@ compat
 Cross-compatible functions for different versions of Python.
 
 Key items to import for compatible code:
-* lists: lrange(), lmap(), lzip(), lfilter()
+* lists: lrange(), lmap(), lzip()
 * add_metaclass(metaclass) - class decorator that recreates class with with the
   given metaclass instead (and avoids intermediary class creation)
 
@@ -35,10 +35,6 @@ def lmap(*args, **kwargs):
     return list(map(*args, **kwargs))
 
 
-def lfilter(*args, **kwargs):
-    return list(filter(*args, **kwargs))
-
-
 # ----------------------------------------------------------------------------
 # functions largely based / taken from the six module
 
diff --git a/pandas/tests/test_compat.py b/pandas/tests/test_compat.py
index 654de0608..fd0ae85ce 100644
--- a/pandas/tests/test_compat.py
+++ b/pandas/tests/test_compat.py
@@ -5,7 +5,7 @@ Testing that functions from compat work as expected
 import builtins
 import re
 
-from pandas.compat import lfilter, lmap, lrange, lzip, re_type
+from pandas.compat import lmap, lrange, lzip, re_type
 
 
 class TestBuiltinIterators(object):
@@ -35,14 +35,6 @@ class TestBuiltinIterators(object):
         lengths = 10,
         self.check_results(results, expecteds, lengths)
 
-    def test_lfilter(self):
-        func = lambda x: x
-        lst = list(builtins.range(10))
-        results = lfilter(lambda x: x, lst),
-        lengths = 9,
-        expecteds = list(builtins.filter(func, lst)),
-        self.check_results(results, expecteds, lengths)
-
     def test_lzip(self):
         lst = [builtins.range(10), builtins.range(10), builtins.range(10)]
         results = lzip(*lst),
