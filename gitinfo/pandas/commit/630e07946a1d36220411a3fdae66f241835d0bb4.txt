commit 630e07946a1d36220411a3fdae66f241835d0bb4
Author: Chang She <chang@lambdafoundry.com>
Date:   Tue Jun 5 23:28:07 2012 -0400

    BUG: finder place year markers on Q2 and Feb instead of Jan

diff --git a/pandas/tseries/plotting.py b/pandas/tseries/plotting.py
index 7afbfa82c..f8002276e 100644
--- a/pandas/tseries/plotting.py
+++ b/pandas/tseries/plotting.py
@@ -255,17 +255,6 @@ def _handle_period_index(curr, remaining, series, xdata, freq):
         if series is None:
             raise ValueError(noinfo_msg)
 
-def infer_min_freq(series):
-    """
-    To be used for irregular DatetimeIndex
-    figure out minimum time span between points and map to some offset alias
-
-    Returns
-    -------
-    offset alias: str
-    """
-
-
 ##### -------------------------------------------------------------------------
 #---- --- Locators ---
 ##### -------------------------------------------------------------------------
@@ -551,7 +540,7 @@ def _monthly_finder(vmin, vmax, freq):
     info['val'] = np.arange(vmin, vmax + 1)
     dates_ = info['val']
     info['fmt'] = ''
-    year_start = (dates_ % 12 == 1).nonzero()[0]
+    year_start = (dates_ % 12 == 0).nonzero()[0]
     info_maj = info['maj']
     info_fmt = info['fmt']
     #..............
@@ -570,7 +559,7 @@ def _monthly_finder(vmin, vmax, freq):
             info_fmt[idx] = '%b\n%Y'
     #..............
     elif span <= 2.5 * periodsperyear:
-        quarter_start = (dates_ % 3 == 1).nonzero()
+        quarter_start = (dates_ % 3 == 0).nonzero()
         info_maj[year_start] = True
         # TODO: Check the following : is it really info['fmt'] ?
         info['fmt'][quarter_start] = True
@@ -583,12 +572,12 @@ def _monthly_finder(vmin, vmax, freq):
         info_maj[year_start] = True
         info['min'] = True
 
-        jan_or_jul = (dates_ % 12 == 1) | (dates_ % 12 == 7)
+        jan_or_jul = (dates_ % 12 == 0) | (dates_ % 12 == 6)
         info_fmt[jan_or_jul] = '%b'
         info_fmt[year_start] = '%b\n%Y'
     #..............
     elif span <= 11 * periodsperyear:
-        quarter_start = (dates_ % 3 == 1).nonzero()
+        quarter_start = (dates_ % 3 == 0).nonzero()
         info_maj[year_start] = True
         info['min'][quarter_start] = True
 
@@ -626,7 +615,7 @@ def _quarterly_finder(vmin, vmax, freq):
     dates_ = info['val']
     info_maj = info['maj']
     info_fmt = info['fmt']
-    year_start = (dates_ % 4 == 1).nonzero()[0]
+    year_start = (dates_ % 4 == 0).nonzero()[0]
     #..............
     if span <= 3.5 * periodsperyear:
         info_maj[year_start] = True
@@ -657,7 +646,6 @@ def _quarterly_finder(vmin, vmax, freq):
     #..............
     return info
 
-
 def _annual_finder(vmin, vmax, freq):
     if isinstance(freq, basestring):
         freq = frequencies.get_freq(freq)
@@ -751,7 +739,6 @@ class TimeSeries_DateLocator(Locator):
             self.plot_obj.date_axis_info = None
         self.plot_obj.view_interval = vi
         vmin, vmax = vi
-
         if vmax < vmin:
             vmin, vmax = vmax, vmin
         if self.isdynamic:
diff --git a/pandas/tseries/tests/test_plotting.py b/pandas/tseries/tests/test_plotting.py
index ef2951114..9adb11269 100644
--- a/pandas/tseries/tests/test_plotting.py
+++ b/pandas/tseries/tests/test_plotting.py
@@ -168,6 +168,30 @@ class TestTSPlot(unittest.TestCase):
         self.assertEqual(int(result[0]), expected[0].ordinal)
         self.assertEqual(int(result[1]), expected[1].ordinal)
 
+    @slow
+    def test_finder_quarterly(self):
+        xp = Period('1988Q1').ordinal
+        yrs = [3.5, 11]
+        for n in yrs:
+            rng = period_range('1987Q2', periods=int(n * 4), freq='Q')
+            ser = Series(np.random.randn(len(rng)), rng)
+            ax = ser.plot()
+            xaxis = ax.get_xaxis()
+            rs = xaxis.get_majorticklocs()[0]
+            self.assert_(rs == xp)
+
+    @slow
+    def test_finder_monthly(self):
+        xp = Period('1988-1').ordinal
+        yrs = [1.15, 2.5, 4, 11]
+        for n in yrs:
+            rng = period_range('1987Q2', periods=int(n * 12), freq='M')
+            ser = Series(np.random.randn(len(rng)), rng)
+            ax = ser.plot()
+            xaxis = ax.get_xaxis()
+            rs = xaxis.get_majorticklocs()[0]
+            self.assert_(rs == xp)
+
 PNG_PATH = 'tmp.png'
 def _check_plot_works(f, freq=None, series=None, *args, **kwargs):
     import matplotlib.pyplot as plt
