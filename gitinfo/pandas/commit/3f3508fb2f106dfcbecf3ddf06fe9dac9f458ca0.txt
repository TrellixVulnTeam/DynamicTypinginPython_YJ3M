commit 3f3508fb2f106dfcbecf3ddf06fe9dac9f458ca0
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Sep 1 01:58:26 2010 +0000

    fixed DateRange state pickling issue, turn off rpy unit tests for now
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@201 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/daterange.py b/pandas/core/daterange.py
index 5278ce441..7d16828e4 100644
--- a/pandas/core/daterange.py
+++ b/pandas/core/daterange.py
@@ -168,6 +168,19 @@ class DateRange(Index):
 
         return index
 
+    def __reduce__(self):
+        """Necessary for making this object picklable"""
+        a, b, state = Index.__reduce__(self)
+        aug_state = state, self.offset
+
+        return a, b, aug_state
+
+    def __setstate__(self, aug_state):
+        """Necessary for making this object picklable"""
+        state, offset = aug_state[:-1], aug_state[-1]
+
+        self.offset = offset
+        Index.__setstate__(self, *state)
 
     @property
     def _allDates(self):
diff --git a/pandas/core/index.py b/pandas/core/index.py
index fa41323e9..ba4c7acec 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -3,7 +3,6 @@
 # pylint: disable-msg=W0232
 
 import numpy as np
-from pandas.core.datetools import DateOffset
 from pandas.lib.tseries import map_indices, isAllDates
 
 def _indexOp(opname):
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index e71bf845f..3635dd800 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -76,13 +76,24 @@ def _wide_arith_method(op, name):
 
     return f
 
+class PanelAxis(object):
+
+    def __init__(self, cache_field):
+        self.cache_field = cache_field
+
+    def __get__(self, obj, type=None):
+        return getattr(obj, self.cache_field)
+
+    def __set__(self, obj, value):
+        if not isinstance(value, Index):
+            value = Index(value)
+
+        setattr(obj, self.cache_field, value)
+
 class Panel(Picklable):
     """
     Abstract superclass for LongPanel and WidePanel data structures
     """
-    _items = None
-    _major_axis = None
-    _minor_axis = None
     _values = None
     factors = None
 
@@ -98,6 +109,10 @@ class Panel(Picklable):
     __rdiv__ = _arith_method(lambda x, y: y / x, '__rdiv__')
     __rpow__ = _arith_method(lambda x, y: y ** x, '__rpow__')
 
+    items = PanelAxis('_items')
+    major_axis = PanelAxis('_major_axis')
+    minor_axis = PanelAxis('_minor_axis')
+
     def __repr__(self):
         class_name = str(self.__class__)
 
@@ -130,39 +145,6 @@ class Panel(Picklable):
         for item in self:
             yield item, self[item]
 
-    def _get_items(self):
-        return self._items
-
-    def _set_items(self, items):
-        if not isinstance(items, Index):
-            items = Index(items)
-
-        self._items = items
-
-    items = property(fget=_get_items, fset=_set_items)
-
-    def _get_major_axis(self):
-        return self._major_axis
-
-    def _set_major_axis(self, major_axis):
-        if not isinstance(major_axis, Index):
-            major_axis = Index(major_axis)
-
-        self._major_axis = major_axis
-
-    major_axis = property(fget=_get_major_axis, fset=_set_major_axis)
-
-    def _get_minor_axis(self):
-        return self._minor_axis
-
-    def _set_minor_axis(self, minor_axis):
-        if not isinstance(minor_axis, Index):
-            minor_axis = Index(minor_axis)
-
-        self._minor_axis = minor_axis
-
-    minor_axis = property(fget=_get_minor_axis, fset=_set_minor_axis)
-
     @property
     def dims(self):
         return len(self.items), len(self.major_axis), len(self.minor_axis)
@@ -172,6 +154,7 @@ _WIDE_AXIS_NUMBERS = {
     'major' : 1,
     'minor' : 2
 }
+
 _WIDE_AXIS_NAMES = dict((v, k) for k, v in _WIDE_AXIS_NUMBERS.iteritems())
 
 
diff --git a/pandas/core/tests/test_daterange.py b/pandas/core/tests/test_daterange.py
index ea0e34b88..2cc85942d 100644
--- a/pandas/core/tests/test_daterange.py
+++ b/pandas/core/tests/test_daterange.py
@@ -100,6 +100,14 @@ class TestDateRange(unittest.TestCase):
         rng = DateRange(START, END, offset=datetools.bmonthEnd)
         shifted = rng.shift(1, offset=datetools.bday)
 
+    def test_pickle_unpickle(self):
+        import pickle
+
+        pickled = pickle.dumps(self.rng)
+        unpickled = pickle.loads(pickled)
+
+        self.assert_(unpickled.offset is not None)
+
 # DateRange test
 
 def testDateRange1():
diff --git a/pandas/rpy/__init__.py b/pandas/rpy/__init__.py
index 98330688d..8d89a1bfa 100644
--- a/pandas/rpy/__init__.py
+++ b/pandas/rpy/__init__.py
@@ -1 +1 @@
-from pandas.rpy.common import importr, r, load_data
+# from pandas.rpy.common import importr, r, load_data
diff --git a/pandas/rpy/common.py b/pandas/rpy/common.py
index a3042a06a..e82eca8ed 100644
--- a/pandas/rpy/common.py
+++ b/pandas/rpy/common.py
@@ -3,9 +3,9 @@ import numpy as np
 from pandas import DataFrame, DataMatrix
 
 from rpy2.robjects.packages import importr
-import rpy2.robjects as robjects
+# import rpy2.robjects as robjects
 
-r = robjects.r
+# r = robjects.r
 
 def load_data(name, package=None):
     if package:
diff --git a/pandas/stats/tests/test_ols.py b/pandas/stats/tests/test_ols.py
index 5297354f4..3ee7a3a1d 100644
--- a/pandas/stats/tests/test_ols.py
+++ b/pandas/stats/tests/test_ols.py
@@ -42,7 +42,6 @@ class TestOLS(BaseTest):
         self.checkDataSet(datasets.cpunish.Load(), skip_moving=True)
         self.checkDataSet(datasets.longley.Load(), skip_moving=True)
         self.checkDataSet(datasets.stackloss.Load(), skip_moving=True)
-
         self.checkDataSet(datasets.ccard.Load(), 39, 49) # one col in X all 0s
         self.checkDataSet(datasets.copper.Load())
         self.checkDataSet(datasets.scotland.Load())
diff --git a/pandas/stats/var.py b/pandas/stats/var.py
index b1a8a8745..e271f781c 100644
--- a/pandas/stats/var.py
+++ b/pandas/stats/var.py
@@ -1,6 +1,5 @@
 from __future__ import division
 
-from itertools import izip
 import numpy as np
 
 from pandas.util.decorators import cache_readonly
@@ -111,8 +110,6 @@ class VAR(object):
         from pandas.stats.api import ols
         from scipy.stats import f
 
-        params = self._k * self._p
-
         d = {}
         for col in self._columns:
             d[col] = {}
