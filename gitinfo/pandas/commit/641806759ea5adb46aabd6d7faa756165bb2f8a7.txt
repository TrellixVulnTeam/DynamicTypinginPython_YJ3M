commit 641806759ea5adb46aabd6d7faa756165bb2f8a7
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Nov 25 15:52:17 2011 -0500

    BUG: pass index name in GroupBy.apply, GH #416

diff --git a/RELEASE.rst b/RELEASE.rst
index 81365eb7e..fc52dee24 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -76,6 +76,7 @@ pandas 0.6.0
   - MaskedArray can be passed to DataFrame constructor and masked values will be
     converted to NaN (PR #396)
   - Add `DataFrame.boxplot` function (GH #368, others)
+  - Can pass extra args, kwds to DataFrame.apply (GH #376)
 
 **Improvements to existing features**
 
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index b61ac8c59..724695edf 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -756,12 +756,18 @@ class SeriesGroupBy(GroupBy):
 
         key_names = [ping.name for ping in self.groupings]
 
+        def _get_index():
+            if len(self.groupings) > 1:
+                index = MultiIndex.from_tuples(keys, names=key_names)
+            else:
+                index = Index(keys, name=key_names[0])
+            return index
+
         if isinstance(values[0], Series):
             if not_indexed_same:
                 data_dict = dict(zip(keys, values))
                 result = DataFrame(data_dict).T
-                if len(self.groupings) > 1:
-                    result.index = MultiIndex.from_tuples(keys, names=key_names)
+                result.index = _get_index()
                 return result
             else:
                 cat_values = np.concatenate([x.values for x in values])
@@ -774,11 +780,7 @@ class SeriesGroupBy(GroupBy):
             return self._wrap_frames(keys, values,
                                      not_indexed_same=not_indexed_same)
         else:
-            if len(self.groupings) > 1:
-                index = MultiIndex.from_tuples(keys, names=key_names)
-                return Series(values, index)
-            else:
-                return Series(values, keys)
+            return Series(values, index=_get_index())
 
     def _aggregate_multiple_funcs(self, arg):
         if not isinstance(arg, dict):
@@ -1071,6 +1073,8 @@ class DataFrameGroupBy(GroupBy):
         else:
             if len(self.groupings) > 1:
                 keys = MultiIndex.from_tuples(keys, names=key_names)
+            else:
+                keys = Index(keys, name=key_names[0])
 
             if isinstance(values[0], np.ndarray):
                 if self.axis == 0:
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index d9a0adf61..d2f79a3e0 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -732,6 +732,9 @@ class TestGroupBy(unittest.TestCase):
         expected0 = frame.groupby(deleveled['first']).sum()
         expected1 = frame.groupby(deleveled['second']).sum()
 
+        self.assert_(result0.index.name == 'first')
+        self.assert_(result1.index.name == 'second')
+
         assert_frame_equal(result0, expected0)
         assert_frame_equal(result1, expected1)
         self.assertEquals(result0.index.name, frame.index.names[0])
@@ -753,6 +756,17 @@ class TestGroupBy(unittest.TestCase):
         # raise exception for non-MultiIndex
         self.assertRaises(ValueError, self.df.groupby, level=0)
 
+    def test_groupby_level_apply(self):
+        frame = self.mframe
+
+        result = frame.groupby(level=0).count()
+        self.assert_(result.index.name == 'first')
+        result = frame.groupby(level=1).count()
+        self.assert_(result.index.name == 'second')
+
+        result = frame['A'].groupby(level=0).count()
+        self.assert_(result.index.name == 'first')
+
     def test_groupby_level_mapper(self):
         frame = self.mframe
         deleveled = frame.delevel()
