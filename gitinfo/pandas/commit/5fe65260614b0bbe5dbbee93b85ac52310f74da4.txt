commit 5fe65260614b0bbe5dbbee93b85ac52310f74da4
Author: jreback <jeff@reback.net>
Date:   Sat Jun 1 15:27:48 2013 -0400

    PERF: (GH3733) where block splitting now done in at most 2 blocks rather than
    
          item-by-item; add vb_suite tests for masking

diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 8b711f5e0..1ee2f7a44 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -558,42 +558,48 @@ class Block(object):
                     result.fill(np.nan)
                     return result
 
-        def create_block(result, items, transpose=True):
+        # see if we can operate on the entire block, or need item-by-item
+        result = func(cond,values,other)
+        if self._can_hold_na:
+
             if not isinstance(result, np.ndarray):
                 raise TypeError('Could not compare [%s] with block values'
                                 % repr(other))
 
-            if transpose and is_transposed:
+            if is_transposed:
                 result = result.T
 
             # try to cast if requested
             if try_cast:
                 result = self._try_cast_result(result)
 
-            return make_block(result, items, self.ref_items)
+            return make_block(result, self.items, self.ref_items)
 
-        # see if we can operate on the entire block, or need item-by-item
-        if not self._can_hold_na:
-            axis = cond.ndim-1
-            result_blocks = []
-            for item in self.items:
-                loc  = self.items.get_loc(item)
-                item = self.items.take([loc])
-                v    = values.take([loc],axis=axis)
-                c    = cond.take([loc],axis=axis)
-                o    = other.take([loc],axis=axis) if hasattr(other,'shape') else other
-
-                result = func(c,v,o)
-                if len(result) == 1:
-                    result = np.repeat(result,self.shape[1:])
-
-                result = _block_shape(result,ndim=self.ndim,shape=self.shape[1:])
-                result_blocks.append(create_block(result, item, transpose=False))
-
-            return result_blocks
-        else:
-            result = func(cond,values,other)
-            return create_block(result, self.items)
+        # might need to separate out blocks
+        axis = cond.ndim-1
+        cond = cond.swapaxes(axis,0)
+        mask = np.array([ cond[i].all() for i in enumerate(range(cond.shape[0]))],dtype=bool)
+        result_blocks = []
+
+        # can do the mask=true as a single block
+        if mask.any():
+            items = self.items[mask]
+            locs  = self.items.get_indexer(items)
+            slices = [slice(None)] * cond.ndim
+            slices[axis] = locs
+            r = self._try_cast_result(result[slices])
+            result_blocks.append(make_block(r.T, items, self.ref_items))
+
+        # and mask=false as a single block
+        if (~mask).any():
+            items = self.items[~mask]
+            locs  = self.items.get_indexer(items)
+            slices = [slice(None)] * cond.ndim
+            slices[axis] = locs
+            r = self._try_cast_result(result[slices])
+            result_blocks.append(make_block(r.T, items, self.ref_items))
+
+        return result_blocks
 
 class NumericBlock(Block):
     is_numeric = True
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index fa6579ca6..db9efce36 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -271,6 +271,16 @@ class CheckIndexing(object):
         expected = Series({'float64': 6, 'int32' : 1, 'int64' : 1})
         assert_series_equal(result, expected)
 
+        # where dtype conversions
+        # GH 3733
+        df = DataFrame(data = np.random.randn(1000, 500))
+        df = df.where(df > 0) # create nans
+        bools = df > 0
+        mask = isnull(df)
+        expected = bools.astype(float).mask(mask)
+        result = bools.mask(mask)
+        assert_frame_equal(result,expected)
+
     def test_getitem_boolean_list(self):
         df = DataFrame(np.arange(12).reshape(3, 4))
 
diff --git a/vb_suite/frame_methods.py b/vb_suite/frame_methods.py
index 7745450e5..122851bf9 100644
--- a/vb_suite/frame_methods.py
+++ b/vb_suite/frame_methods.py
@@ -177,3 +177,18 @@ df = DataFrame(randn(1,100000))
 """
 
 frame_xs_col = Benchmark('df.xs(50000,axis = 1)', setup)
+
+## masking
+setup = common_setup + """
+data = np.random.randn(1000, 500)
+df = DataFrame(data)
+df = df.where(df > 0) # create nans
+bools = df > 0
+mask = isnull(df)
+"""
+
+mask_bools = Benchmark('bools.mask(mask)', setup,
+                         start_date=datetime(2013,1,1))
+
+mask_floats  = Benchmark('bools.astype(float).mask(mask)', setup,
+                         start_date=datetime(2013,1,1))
diff --git a/vb_suite/suite.py b/vb_suite/suite.py
index 905c43718..339ba8e6d 100644
--- a/vb_suite/suite.py
+++ b/vb_suite/suite.py
@@ -3,27 +3,27 @@ from datetime import datetime
 
 import os
 
-modules = ['attrs_caching',
-           'binary_ops',
-           'ctors',
-           'frame_ctor',
+modules = [#'attrs_caching',
+           #'binary_ops',
+           #'ctors',
+           #'frame_ctor',
            'frame_methods',
-           'groupby',
-           'index_object',
-           'indexing',
-           'io_bench',
-           'hdfstore_bench',
-           'join_merge',
-           'miscellaneous',
-           'panel_ctor',
-           'parser',
-           'reindex',
-           'replace',
-           'sparse',
-           'reshape',
-           'stat_ops',
-           'timeseries']
-
+           #'groupby',
+           #'index_object',
+           #'indexing',
+           #'io_bench',
+           #'hdfstore_bench',
+           #'join_merge',
+           #'miscellaneous',
+           #'panel_ctor',
+           #'parser',
+           #'reindex',
+           #'replace',
+           #'sparse',
+           #'reshape',
+           #'stat_ops',
+           #'timeseries']
+]
 by_module = {}
 benchmarks = []
 
