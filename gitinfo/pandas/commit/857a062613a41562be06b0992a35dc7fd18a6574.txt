commit 857a062613a41562be06b0992a35dc7fd18a6574
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Dec 17 23:27:03 2011 -0500

    ENH: hacking around with khash, appears to be working

diff --git a/pandas/src/khash.h b/pandas/src/khash.h
index b786faaa1..4b92170cd 100644
--- a/pandas/src/khash.h
+++ b/pandas/src/khash.h
@@ -84,6 +84,19 @@ int main() {
 #include <stdlib.h>
 #include <string.h>
 
+
+#ifndef CYTHON_INLINE
+  #if defined(__GNUC__)
+    #define CYTHON_INLINE __inline__
+  #elif defined(_MSC_VER)
+    #define CYTHON_INLINE __inline
+  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
+    #define CYTHON_INLINE inline
+  #else
+    #define CYTHON_INLINE
+  #endif
+#endif
+
 typedef uint32_t khint_t;
 typedef khint_t khiter_t;
 
@@ -116,10 +129,10 @@ static const double __ac_HASH_UPPER = 0.77;
 		khkey_t *keys;													\
 		khval_t *vals;													\
 	} kh_##name##_t;													\
-	static inline kh_##name##_t *kh_init_##name() {						\
+	static CYTHON_INLINE kh_##name##_t *kh_init_##name() {						\
 		return (kh_##name##_t*)calloc(1, sizeof(kh_##name##_t));		\
 	}																	\
-	static inline void kh_destroy_##name(kh_##name##_t *h)				\
+	static CYTHON_INLINE void kh_destroy_##name(kh_##name##_t *h)				\
 	{																	\
 		if (h) {														\
 			free(h->keys); free(h->flags);								\
@@ -127,14 +140,14 @@ static const double __ac_HASH_UPPER = 0.77;
 			free(h);													\
 		}																\
 	}																	\
-	static inline void kh_clear_##name(kh_##name##_t *h)				\
+	static CYTHON_INLINE void kh_clear_##name(kh_##name##_t *h)				\
 	{																	\
 		if (h && h->flags) { \
 			memset(h->flags, 0xaa, ((h->n_buckets>>4) + 1) * sizeof(uint32_t)); \
 			h->size = h->n_occupied = 0;								\
 		}																\
 	}																	\
-	static inline khint_t kh_get_##name(kh_##name##_t *h, khkey_t key)	\
+	static CYTHON_INLINE khint_t kh_get_##name(kh_##name##_t *h, khkey_t key)	\
 	{																	\
 		if (h->n_buckets) {												\
 			khint_t inc, k, i, last;									\
@@ -148,7 +161,7 @@ static const double __ac_HASH_UPPER = 0.77;
 			return __ac_iseither(h->flags, i)? h->n_buckets : i;			\
 		} else return 0;												\
 	}																	\
-	static inline void kh_resize_##name(kh_##name##_t *h, khint_t new_n_buckets) \
+	static CYTHON_INLINE void kh_resize_##name(kh_##name##_t *h, khint_t new_n_buckets) \
 	{																	\
 		uint32_t *new_flags = 0;										\
 		khint_t j = 1;													\
@@ -208,7 +221,7 @@ static const double __ac_HASH_UPPER = 0.77;
 			h->upper_bound = (khint_t)(h->n_buckets * __ac_HASH_UPPER + 0.5); \
 		}																\
 	}																	\
-	static inline khint_t kh_put_##name(kh_##name##_t *h, khkey_t key, int *ret) \
+	static CYTHON_INLINE khint_t kh_put_##name(kh_##name##_t *h, khkey_t key, int *ret) \
 	{																	\
 		khint_t x;														\
 		if (h->n_occupied >= h->upper_bound) {							\
@@ -246,7 +259,7 @@ static const double __ac_HASH_UPPER = 0.77;
 		} else *ret = 0;												\
 		return x;														\
 	}																	\
-	static inline void kh_del_##name(kh_##name##_t *h, khint_t x)		\
+	static CYTHON_INLINE void kh_del_##name(kh_##name##_t *h, khint_t x)		\
 	{																	\
 		if (x != h->n_buckets && !__ac_iseither(h->flags, x)) {			\
 			__ac_set_isdel_true(h->flags, x);							\
@@ -260,7 +273,7 @@ static const double __ac_HASH_UPPER = 0.77;
 #define kh_int_hash_equal(a, b) (a == b)
 #define kh_int64_hash_func(key) (uint32_t)((key)>>33^(key)^(key)<<11)
 #define kh_int64_hash_equal(a, b) (a == b)
-static inline khint_t __ac_X31_hash_string(const char *s)
+static CYTHON_INLINE khint_t __ac_X31_hash_string(const char *s)
 {
 	khint_t h = *s;
 	if (h) for (++s ; *s; ++s) h = (h << 5) - h + *s;
@@ -315,12 +328,28 @@ typedef const char *kh_cstr_t;
 
 #include <Python.h>
 
-#define kh_python_hash_func(key) PyObject_Hash(key)
-#define kh_python_hash_equal(a, b) PyObject_RichCompareBool(a, b, Py_EQ)
+#define kh_python_hash_func(key) (PyObject_Hash(key))
+#define kh_python_hash_equal(a, b) (PyObject_RichCompareBool(a, b, Py_EQ))
+
+
+// Python object
+
+typedef PyObject* kh_pyobject_t;
+
+#define KHASH_MAP_INIT_PYOBJECT(name, khval_t)                                  \
+	KHASH_INIT(name, kh_pyobject_t, khval_t, 1, kh_python_hash_func, kh_python_hash_equal)
+
+KHASH_MAP_INIT_PYOBJECT(pymap, Py_ssize_t)
+
+#define KHASH_SET_INIT_PYOBJECT(name)                                  \
+	KHASH_INIT(name, kh_pyobject_t, char, 0, kh_python_hash_func, kh_python_hash_equal)
+
+KHASH_SET_INIT_PYOBJECT(pyset)
 
-#define KHASH_SET_INIT_PYOBJECT(name, khval_t)                                  \
-	KHASH_INIT(name, PyObject*, khval_t, 0, kh_python_hash_func, kh_python_hash_equal)
+#define kh_exist_pymap(h, k) (kh_exist(h, k))
+#define kh_exist_pyset(h, k) (kh_exist(h, k))
+#define kh_exist_str(h, k) (kh_exist(h, k))
 
-KHASH_MAP_INIT_PYOBJECT(python, uint32_t)
+KHASH_MAP_INIT_STR(str, Py_ssize_t)
 
 #endif /* __AC_KHASH_H */
diff --git a/pandas/src/khash.pxd b/pandas/src/khash.pxd
new file mode 100644
index 000000000..3f8c94436
--- /dev/null
+++ b/pandas/src/khash.pxd
@@ -0,0 +1,58 @@
+from cpython cimport PyObject
+
+from libc.stdint cimport uint32_t
+
+cdef extern from "khash.h":
+    ctypedef uint32_t khint_t
+    ctypedef khint_t khiter_t
+
+    ctypedef struct kh_pymap_t:
+        khint_t n_buckets, size, n_occupied, upper_bound
+        uint32_t *flags
+        PyObject **keys
+        Py_ssize_t *vals
+
+    inline kh_pymap_t* kh_init_pymap()
+    inline void kh_destroy_pymap(kh_pymap_t*)
+    inline void kh_clear_pymap(kh_pymap_t*)
+    inline khint_t kh_get_pymap(kh_pymap_t*, PyObject*)
+    inline void kh_resize_pymap(kh_pymap_t*, khint_t)
+    inline khint_t kh_put_pymap(kh_pymap_t*, PyObject*, int*)
+    inline void kh_del_pymap(kh_pymap_t*, khint_t)
+
+    bint kh_exist_pymap(kh_pymap_t*, khiter_t)
+
+    ctypedef struct kh_pyset_t:
+        khint_t n_buckets, size, n_occupied, upper_bound
+        uint32_t *flags
+        PyObject **keys
+        Py_ssize_t *vals
+
+    inline kh_pyset_t* kh_init_pyset()
+    inline void kh_destroy_pyset(kh_pyset_t*)
+    inline void kh_clear_pyset(kh_pyset_t*)
+    inline khint_t kh_get_pyset(kh_pyset_t*, PyObject*)
+    inline void kh_resize_pyset(kh_pyset_t*, khint_t)
+    inline khint_t kh_put_pyset(kh_pyset_t*, PyObject*, int*)
+    inline void kh_del_pyset(kh_pyset_t*, khint_t)
+
+    bint kh_exist_pyset(kh_pyset_t*, khiter_t)
+
+    ctypedef char* kh_cstr_t
+
+    ctypedef struct kh_str_t:
+        khint_t n_buckets, size, n_occupied, upper_bound
+        uint32_t *flags
+        kh_cstr_t *keys
+        Py_ssize_t *vals
+
+    inline kh_str_t* kh_init_str()
+    inline void kh_destroy_str(kh_str_t*)
+    inline void kh_clear_str(kh_str_t*)
+    inline khint_t kh_get_str(kh_str_t*, kh_cstr_t)
+    inline void kh_resize_str(kh_str_t*, khint_t)
+    inline khint_t kh_put_str(kh_str_t*, kh_cstr_t, int*)
+    inline void kh_del_str(kh_str_t*, khint_t)
+
+    bint kh_exist_str(kh_str_t*, khiter_t)
+
diff --git a/pandas/src/sandbox.pyx b/pandas/src/sandbox.pyx
index f04e542bf..d4c2cdebc 100644
--- a/pandas/src/sandbox.pyx
+++ b/pandas/src/sandbox.pyx
@@ -71,3 +71,136 @@ def foo(object _chunk, object _arr):
 
     # chunk.shape[0] = 100
     return chunk
+
+from khash cimport *
+
+def test(ndarray arr, Py_ssize_t size_hint):
+    cdef:
+        kh_pymap_t *table
+        int ret
+        khiter_t k
+        PyObject **data
+        Py_ssize_t i, n
+        ndarray[Py_ssize_t] indexer
+
+    table = kh_init_pymap()
+    kh_resize_pymap(table, size_hint)
+
+    data = <PyObject**> arr.data
+    n = len(arr)
+
+    indexer = np.empty(n, dtype=np.int_)
+
+    for i in range(n):
+        k = kh_put_pymap(table, data[i], &ret)
+
+        # if not ret:
+        #     kh_del_pymap(table, k)
+
+        table.vals[k] = i
+
+    for i in range(n):
+        k = kh_get_pymap(table, data[i])
+        indexer[i] = table.vals[k]
+
+    kh_destroy_pymap(table)
+
+    return indexer
+
+
+from cpython cimport PyString_AsString
+
+def test_str(ndarray arr, Py_ssize_t size_hint):
+    cdef:
+        kh_str_t *table
+        kh_cstr_t val
+        int ret
+        khiter_t k
+        PyObject **data
+        Py_ssize_t i, n
+        ndarray[Py_ssize_t] indexer
+
+    table = kh_init_str()
+    kh_resize_str(table, size_hint)
+
+    data = <PyObject**> arr.data
+    n = len(arr)
+
+    indexer = np.empty(n, dtype=np.int_)
+
+    for i in range(n):
+        k = kh_put_str(table, PyString_AsString(<object> data[i]), &ret)
+
+        # if not ret:
+        #     kh_del_str(table, k)
+
+        table.vals[k] = i
+
+    # for i in range(n):
+    #     k = kh_get_str(table, PyString_AsString(<object> data[i]))
+    #     indexer[i] = table.vals[k]
+
+    kh_destroy_str(table)
+
+    return indexer
+
+# def test2(ndarray[object] arr):
+#     cdef:
+#         dict table
+#         object obj
+#         Py_ssize_t i, loc, n
+#         ndarray[Py_ssize_t] indexer
+
+#     n = len(arr)
+#     indexer = np.empty(n, dtype=np.int_)
+
+#     table = {}
+#     for i in range(n):
+#         table[arr[i]] = i
+
+#     for i in range(n):
+#         indexer[i] =  table[arr[i]]
+
+#     return indexer
+
+from cpython cimport Py_INCREF
+
+def obj_unique(ndarray[object] arr):
+    cdef:
+        kh_pyset_t *table
+        # PyObject *obj
+        object obj
+        PyObject **data
+        int ret
+        khiter_t k
+        Py_ssize_t i, n
+        list uniques
+
+    n = len(arr)
+    uniques = []
+
+    table = kh_init_pyset()
+
+    data = <PyObject**> arr.data
+
+    # size hint
+    kh_resize_pyset(table, n // 10)
+
+    for i in range(n):
+        obj = arr[i]
+
+        k = kh_get_pyset(table, <PyObject*> obj)
+        if not kh_exist_pyset(table, k):
+            k = kh_put_pyset(table, <PyObject*> obj, &ret)
+            # uniques.append(obj)
+            # Py_INCREF(<object> obj)
+
+    kh_destroy_pyset(table)
+
+    return None
+    # try:
+    #     uniques.sort()
+    # except Exception:
+    #     pass
+
+    # return uniques
