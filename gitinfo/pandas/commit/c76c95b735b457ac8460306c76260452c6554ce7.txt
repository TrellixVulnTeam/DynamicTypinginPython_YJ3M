commit c76c95b735b457ac8460306c76260452c6554ce7
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Oct 2 00:02:29 2011 -0400

    TST: groupby test coverage

diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index bc55fe691..25d5028ce 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -478,6 +478,13 @@ class Grouping(object):
     """
     Holds the grouping information for a single key
 
+    Parameters
+    ----------
+    index : Index
+    grouper :
+    name :
+    level :
+
     Returns
     -------
     **Attributes**:
@@ -493,6 +500,7 @@ class Grouping(object):
         self.name = name
         self.level = level
         self.grouper = _convert_grouper(index, grouper)
+        self.index = index
 
         if level is not None:
             inds = index.labels[level]
@@ -503,10 +511,6 @@ class Grouping(object):
             else:
                 self.grouper = labels
 
-        if not isinstance(index, Index):
-            index = Index(index)
-        self.index = index
-
         # no level passed
         if not isinstance(self.grouper, np.ndarray):
             self.grouper = self.index.map(self.grouper)
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index f8a677fe6..d303ab2cd 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -566,6 +566,13 @@ class TestGroupBy(unittest.TestCase):
         expected.index = np.arange(len(expected))
         assert_frame_equal(result, expected)
 
+    def test_groupby_as_index_corner(self):
+        self.assertRaises(TypeError, self.ts.groupby,
+                          lambda x: x.weekday(), as_index=False)
+
+        self.assertRaises(ValueError, self.df.groupby,
+                          lambda x: x.lower(), as_index=False, axis=1)
+
     def test_groupby_multiple_key(self):
         df = tm.makeTimeDataFrame()
         grouped = df.groupby([lambda x: x.year,
@@ -833,6 +840,29 @@ class TestGroupBy(unittest.TestCase):
 
         lib.group_aggregate(values, label_list, shape)
 
+    def test_size(self):
+        grouped = self.df.groupby(['A', 'B'])
+        result = grouped.size()
+        for key, group in grouped:
+            self.assertEquals(result[key], len(group))
+
+        grouped = self.df.groupby('A')
+        result = grouped.size()
+        for key, group in grouped:
+            self.assertEquals(result[key], len(group))
+
+        grouped = self.df.groupby('B')
+        result = grouped.size()
+        for key, group in grouped:
+            self.assertEquals(result[key], len(group))
+
+    def test_grouping_ndarray(self):
+        grouped = self.df.groupby(self.df['A'].values)
+
+        result = grouped.sum()
+        expected = self.df.groupby('A').sum()
+        assert_frame_equal(result, expected)
+
 class TestPanelGroupBy(unittest.TestCase):
 
     def setUp(self):
