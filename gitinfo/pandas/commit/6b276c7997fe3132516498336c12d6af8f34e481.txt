commit 6b276c7997fe3132516498336c12d6af8f34e481
Author: Chang She <chang@lambdafoundry.com>
Date:   Sun May 6 20:17:34 2012 -0400

    ENH: as_multi keyword in Series/DataFrame constructor. #831

diff --git a/doc/source/indexing.rst b/doc/source/indexing.rst
index f8c10c2e1..7e2a0651f 100644
--- a/doc/source/indexing.rst
+++ b/doc/source/indexing.rst
@@ -215,12 +215,12 @@ more complex criteria:
 .. ipython:: python
 
    # only want 'two' or 'three'
-   criterion = df2['a'].map(lambda x: x.startswith('t')
+   criterion = df2.a.map(lambda x: x.startswith('t')
 
    df2[criterion]
 
    # equivalent but slower
-   df2[[x.startswith('t') for x in df2['a']]]
+   df2[[x.startswith('t') for x in df2.a]]
 
    # Multiple criteria
    df2[criterion & (df2['b'] == 'x')]
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 3869c9f17..834820417 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -256,7 +256,7 @@ class DataFrame(NDFrame):
     _AXIS_NAMES = dict((v, k) for k, v in _AXIS_NUMBERS.iteritems())
 
     def __init__(self, data=None, index=None, columns=None, dtype=None,
-                 copy=False):
+                 copy=False, as_multi=False):
         """Two-dimensional size-mutable, potentially heterogeneous tabular data
         structure with labeled axes (rows and columns). Arithmetic operations
         align on both row and column labels. Can be thought of as a dict-like
@@ -298,6 +298,12 @@ class DataFrame(NDFrame):
         if isinstance(data, DataFrame):
             data = data._data
 
+        if index is not None:
+            index = _ensure_index(index, as_multi)
+
+        if columns is not None:
+            columns = _ensure_index(columns, as_multi)
+
         if isinstance(data, BlockManager):
             mgr = self._init_mgr(data, index, columns, dtype=dtype, copy=copy)
         elif isinstance(data, dict):
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 25d86f50d..3893265c4 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -2237,11 +2237,17 @@ def _sparsify(label_list):
     return zip(*result)
 
 
-def _ensure_index(index_like):
+def _ensure_index(index_like, as_multi=False):
     if isinstance(index_like, Index):
         return index_like
     if hasattr(index_like, 'name'):
         return Index(index_like, name=index_like.name)
+    if (as_multi and isinstance(index_like, list)
+        and len(index_like) > 0):
+        if isinstance(index_like[0], tuple):
+            return MultiIndex.from_tuples(index_like)
+        elif isinstance(index_like[0], (list, np.ndarray)):
+            return MultiIndex.from_arrays(index_like)
     return Index(index_like)
 
 def _validate_join_method(method):
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 6413ad9f9..aa658feff 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -265,18 +265,20 @@ class Series(np.ndarray, generic.PandasObject):
     __slots__ = ['_index', 'name']
 
     def __new__(cls, data=None, index=None, dtype=None, name=None,
-                copy=False):
+                copy=False, as_multi=False):
         if data is None:
             data = {}
 
+        if index is not None:
+            index = _ensure_index(index, as_multi)
+
         if isinstance(data, Series):
             if index is None:
                 index = data.index
         elif isinstance(data, dict):
             if index is None:
                 index = Index(sorted(data))
-            else:
-                index = _ensure_index(index)
+
             try:
                 if isinstance(index, DatetimeIndex):
                     # coerce back to datetime objects for lookup
@@ -298,8 +300,6 @@ class Series(np.ndarray, generic.PandasObject):
 
         if index is None:
             index = _default_index(len(subarr))
-        else:
-            index = _ensure_index(index)
 
         # Change the class of the array to be the subclass type.
         if index.is_all_dates:
@@ -314,7 +314,7 @@ class Series(np.ndarray, generic.PandasObject):
         return subarr
 
     def __init__(self, data=None, index=None, dtype=None, name=None,
-                 copy=False):
+                 copy=False, as_multi=False):
         """One-dimensional ndarray with axis labels (including time
 series). Labels must be unique and can any hashable type. The object supports
 both integer- and label-based indexing and provides a host of methods for
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 3bf45a9e2..b2fea017a 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1231,6 +1231,30 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         df = DataFrame(data={})
         self.assert_(len(df.index) == 0)
 
+        multi = DataFrame(np.random.randn(4, 4),
+                          index=[np.array(['a', 'a', 'b', 'b']),
+                                 np.array(['x', 'y', 'x', 'y'])],
+                          as_multi=True)
+        self.assert_(isinstance(multi.index, MultiIndex))
+        self.assert_(not isinstance(multi.columns, MultiIndex))
+
+        multi = DataFrame(np.random.randn(4, 4),
+                          columns=[['a', 'a', 'b', 'b'],
+                                   ['x', 'y', 'x', 'y']],
+                          as_multi=True)
+        self.assert_(isinstance(multi.columns, MultiIndex))
+
+        multi = DataFrame(multi.values, index=zip(['a', 'a', 'b', 'b'],
+                                                  ['x', 'y', 'x', 'y']),
+                          as_multi=True)
+        self.assert_(isinstance(multi.index, MultiIndex))
+
+        notmulti = DataFrame(np.random.randn(2, 2),
+                             index=[np.array(['a', 'a', 'b', 'b']),
+                                    np.array(['x', 'y', 'x', 'y'])])
+        self.assert_(not isinstance(notmulti.index, MultiIndex))
+
+
     def test_list_to_sdict(self):
         from pandas.core.frame import _list_to_sdict
 
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 8be5d86ab..e8502241c 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -223,6 +223,25 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         self.assertRaises(Exception, Series, np.random.randn(3, 3),
                           index=np.arange(3))
 
+        multi = Series(1., index=[np.array(['a', 'a', 'b', 'b']),
+                                  np.array(['x', 'y', 'x', 'y'])],
+                       as_multi=True)
+        self.assert_(isinstance(multi.index, MultiIndex))
+
+        multi = Series(1., index=[['a', 'a', 'b', 'b'],
+                                  ['x', 'y', 'x', 'y']],
+                       as_multi=True)
+        self.assert_(isinstance(multi.index, MultiIndex))
+
+        multi = Series(1., index=zip(['a', 'a', 'b', 'b'],
+                                     ['x', 'y', 'x', 'y']),
+                       as_multi=True)
+        self.assert_(isinstance(multi.index, MultiIndex))
+
+        notmulti = Series(1., index=[np.array(['a', 'a', 'b', 'b']),
+                                     np.array(['x', 'y', 'x', 'y'])])
+        self.assert_(not isinstance(notmulti.index, MultiIndex))
+
     def test_constructor_empty(self):
         empty = Series()
         empty2 = Series([])
