commit 138f732b66380910d284982d11a832167fe75068
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Dec 28 22:57:58 2011 -0500

    BUG: fix Series agg by level also and utilize Cython methods, GH #545

diff --git a/RELEASE.rst b/RELEASE.rst
index 3cf3590ff..82a0e85b7 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -108,6 +108,8 @@ pandas 0.6.2
   - Use centered sum of squares in R-square computation if entity_effects=True
     in panel regression
   - Handle all NA case in Series.corr, was raising exception (GH #548)
+  - Aggregating by multiple levels with ``level`` argument to DataFrame, Series
+    stat method, was broken (GH #545)
 
 Thanks
 ------
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 5b30c0d76..4d4d245f5 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -776,6 +776,14 @@ copy : boolean, default False
         return nanops.nanskew(self.values, skipna=skipna, copy=True)
     _add_stat_doc(skew, 'unbiased skewness', 'skew')
 
+    def _agg_by_level(self, name, level=0, skipna=True):
+        grouped = self.groupby(level=level)
+        if hasattr(grouped, name) and skipna:
+            return getattr(grouped, name)()
+        method = getattr(type(self), name)
+        applyf = lambda x: method(x, skipna=skipna)
+        return grouped.aggregate(applyf)
+
     def idxmin(self, axis=None, out=None, skipna=True):
         """
         Index of first occurence of minimum of values.
@@ -812,11 +820,6 @@ copy : boolean, default False
             return np.nan
         return self.index[i]
 
-    def _agg_by_level(self, name, level=0, skipna=True):
-        method = getattr(type(self), name)
-        applyf = lambda x: method(x, skipna=skipna)
-        return self.groupby(level=level).aggregate(applyf)
-
     def cumsum(self, axis=0, dtype=None, out=None, skipna=True):
         """
         Cumulative sum of values. Preserves locations of NaN values
diff --git a/pandas/tests/test_multilevel.py b/pandas/tests/test_multilevel.py
index c87fc9ba9..e63b583ee 100644
--- a/pandas/tests/test_multilevel.py
+++ b/pandas/tests/test_multilevel.py
@@ -730,6 +730,10 @@ class TestMultiLevel(unittest.TestCase):
         expected = self.ymd.groupby(level=['year', 'month']).sum()
         assert_frame_equal(result, expected)
 
+        result = self.ymd['A'].sum(level=['year', 'month'])
+        expected = self.ymd['A'].groupby(level=['year', 'month']).sum()
+        assert_series_equal(result, expected)
+
     def test_groupby_multilevel(self):
         result = self.ymd.groupby(level=[0, 1]).mean()
 
diff --git a/vb_suite/stat_ops.py b/vb_suite/stat_ops.py
index e6cc611ca..19332b733 100644
--- a/vb_suite/stat_ops.py
+++ b/vb_suite/stat_ops.py
@@ -25,3 +25,11 @@ stat_ops_level_frame_sum_multiple = \
     Benchmark("df.sum(level=[0, 1])", setup, repeat=1,
               start_date=datetime(2011, 11, 15))
 
+stat_ops_level_series_sum = \
+    Benchmark("df[1].sum(level=1)", setup,
+              start_date=datetime(2011, 11, 15))
+
+stat_ops_level_series_sum_multiple = \
+    Benchmark("df[1].sum(level=[0, 1])", setup, repeat=1,
+              start_date=datetime(2011, 11, 15))
+
