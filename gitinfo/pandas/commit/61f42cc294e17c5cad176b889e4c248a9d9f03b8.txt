commit 61f42cc294e17c5cad176b889e4c248a9d9f03b8
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Mon Mar 30 13:59:40 2020 -0700

    REF: test_rename_axis (#33152)

diff --git a/pandas/tests/frame/methods/test_rename.py b/pandas/tests/frame/methods/test_rename.py
index e69a562f8..ffad526d3 100644
--- a/pandas/tests/frame/methods/test_rename.py
+++ b/pandas/tests/frame/methods/test_rename.py
@@ -67,30 +67,6 @@ class TestRename:
         expected = DataFrame({"a": colAData, "b": colBdata})
         tm.assert_frame_equal(result, expected)
 
-    @pytest.mark.parametrize(
-        "kwargs, rename_index, rename_columns",
-        [
-            ({"mapper": None, "axis": 0}, True, False),
-            ({"mapper": None, "axis": 1}, False, True),
-            ({"index": None}, True, False),
-            ({"columns": None}, False, True),
-            ({"index": None, "columns": None}, True, True),
-            ({}, False, False),
-        ],
-    )
-    def test_rename_axis_none(self, kwargs, rename_index, rename_columns):
-        # GH 25034
-        index = Index(list("abc"), name="foo")
-        columns = Index(["col1", "col2"], name="bar")
-        data = np.arange(6).reshape(3, 2)
-        df = DataFrame(data, index, columns)
-
-        result = df.rename_axis(**kwargs)
-        expected_index = index.rename(None) if rename_index else index
-        expected_columns = columns.rename(None) if rename_columns else columns
-        expected = DataFrame(data, expected_index, expected_columns)
-        tm.assert_frame_equal(result, expected)
-
     def test_rename_multiindex(self):
 
         tuples_index = [("foo1", "bar1"), ("foo2", "bar2")]
diff --git a/pandas/tests/frame/methods/test_rename_axis.py b/pandas/tests/frame/methods/test_rename_axis.py
new file mode 100644
index 000000000..9b964d842
--- /dev/null
+++ b/pandas/tests/frame/methods/test_rename_axis.py
@@ -0,0 +1,105 @@
+import numpy as np
+import pytest
+
+from pandas import DataFrame, Index, MultiIndex
+import pandas._testing as tm
+
+
+class TestDataFrameRenameAxis:
+    def test_rename_axis_inplace(self, float_frame):
+        # GH#15704
+        expected = float_frame.rename_axis("foo")
+        result = float_frame.copy()
+        no_return = result.rename_axis("foo", inplace=True)
+
+        assert no_return is None
+        tm.assert_frame_equal(result, expected)
+
+        expected = float_frame.rename_axis("bar", axis=1)
+        result = float_frame.copy()
+        no_return = result.rename_axis("bar", axis=1, inplace=True)
+
+        assert no_return is None
+        tm.assert_frame_equal(result, expected)
+
+    def test_rename_axis_raises(self):
+        # GH#17833
+        df = DataFrame({"A": [1, 2], "B": [1, 2]})
+        with pytest.raises(ValueError, match="Use `.rename`"):
+            df.rename_axis(id, axis=0)
+
+        with pytest.raises(ValueError, match="Use `.rename`"):
+            df.rename_axis({0: 10, 1: 20}, axis=0)
+
+        with pytest.raises(ValueError, match="Use `.rename`"):
+            df.rename_axis(id, axis=1)
+
+        with pytest.raises(ValueError, match="Use `.rename`"):
+            df["A"].rename_axis(id)
+
+    def test_rename_axis_mapper(self):
+        # GH#19978
+        mi = MultiIndex.from_product([["a", "b", "c"], [1, 2]], names=["ll", "nn"])
+        df = DataFrame(
+            {"x": list(range(len(mi))), "y": [i * 10 for i in range(len(mi))]}, index=mi
+        )
+
+        # Test for rename of the Index object of columns
+        result = df.rename_axis("cols", axis=1)
+        tm.assert_index_equal(result.columns, Index(["x", "y"], name="cols"))
+
+        # Test for rename of the Index object of columns using dict
+        result = result.rename_axis(columns={"cols": "new"}, axis=1)
+        tm.assert_index_equal(result.columns, Index(["x", "y"], name="new"))
+
+        # Test for renaming index using dict
+        result = df.rename_axis(index={"ll": "foo"})
+        assert result.index.names == ["foo", "nn"]
+
+        # Test for renaming index using a function
+        result = df.rename_axis(index=str.upper, axis=0)
+        assert result.index.names == ["LL", "NN"]
+
+        # Test for renaming index providing complete list
+        result = df.rename_axis(index=["foo", "goo"])
+        assert result.index.names == ["foo", "goo"]
+
+        # Test for changing index and columns at same time
+        sdf = df.reset_index().set_index("nn").drop(columns=["ll", "y"])
+        result = sdf.rename_axis(index="foo", columns="meh")
+        assert result.index.name == "foo"
+        assert result.columns.name == "meh"
+
+        # Test different error cases
+        with pytest.raises(TypeError, match="Must pass"):
+            df.rename_axis(index="wrong")
+
+        with pytest.raises(ValueError, match="Length of names"):
+            df.rename_axis(index=["wrong"])
+
+        with pytest.raises(TypeError, match="bogus"):
+            df.rename_axis(bogus=None)
+
+    @pytest.mark.parametrize(
+        "kwargs, rename_index, rename_columns",
+        [
+            ({"mapper": None, "axis": 0}, True, False),
+            ({"mapper": None, "axis": 1}, False, True),
+            ({"index": None}, True, False),
+            ({"columns": None}, False, True),
+            ({"index": None, "columns": None}, True, True),
+            ({}, False, False),
+        ],
+    )
+    def test_rename_axis_none(self, kwargs, rename_index, rename_columns):
+        # GH 25034
+        index = Index(list("abc"), name="foo")
+        columns = Index(["col1", "col2"], name="bar")
+        data = np.arange(6).reshape(3, 2)
+        df = DataFrame(data, index, columns)
+
+        result = df.rename_axis(**kwargs)
+        expected_index = index.rename(None) if rename_index else index
+        expected_columns = columns.rename(None) if rename_columns else columns
+        expected = DataFrame(data, expected_index, expected_columns)
+        tm.assert_frame_equal(result, expected)
diff --git a/pandas/tests/frame/test_alter_axes.py b/pandas/tests/frame/test_alter_axes.py
index e37170d41..74fe3bfd4 100644
--- a/pandas/tests/frame/test_alter_axes.py
+++ b/pandas/tests/frame/test_alter_axes.py
@@ -615,80 +615,6 @@ class TestDataFrameAlterAxes:
 
     # Renaming
 
-    def test_rename_axis_inplace(self, float_frame):
-        # GH 15704
-        expected = float_frame.rename_axis("foo")
-        result = float_frame.copy()
-        no_return = result.rename_axis("foo", inplace=True)
-
-        assert no_return is None
-        tm.assert_frame_equal(result, expected)
-
-        expected = float_frame.rename_axis("bar", axis=1)
-        result = float_frame.copy()
-        no_return = result.rename_axis("bar", axis=1, inplace=True)
-
-        assert no_return is None
-        tm.assert_frame_equal(result, expected)
-
-    def test_rename_axis_raises(self):
-        # https://github.com/pandas-dev/pandas/issues/17833
-        df = DataFrame({"A": [1, 2], "B": [1, 2]})
-        with pytest.raises(ValueError, match="Use `.rename`"):
-            df.rename_axis(id, axis=0)
-
-        with pytest.raises(ValueError, match="Use `.rename`"):
-            df.rename_axis({0: 10, 1: 20}, axis=0)
-
-        with pytest.raises(ValueError, match="Use `.rename`"):
-            df.rename_axis(id, axis=1)
-
-        with pytest.raises(ValueError, match="Use `.rename`"):
-            df["A"].rename_axis(id)
-
-    def test_rename_axis_mapper(self):
-        # GH 19978
-        mi = MultiIndex.from_product([["a", "b", "c"], [1, 2]], names=["ll", "nn"])
-        df = DataFrame(
-            {"x": list(range(len(mi))), "y": [i * 10 for i in range(len(mi))]}, index=mi
-        )
-
-        # Test for rename of the Index object of columns
-        result = df.rename_axis("cols", axis=1)
-        tm.assert_index_equal(result.columns, Index(["x", "y"], name="cols"))
-
-        # Test for rename of the Index object of columns using dict
-        result = result.rename_axis(columns={"cols": "new"}, axis=1)
-        tm.assert_index_equal(result.columns, Index(["x", "y"], name="new"))
-
-        # Test for renaming index using dict
-        result = df.rename_axis(index={"ll": "foo"})
-        assert result.index.names == ["foo", "nn"]
-
-        # Test for renaming index using a function
-        result = df.rename_axis(index=str.upper, axis=0)
-        assert result.index.names == ["LL", "NN"]
-
-        # Test for renaming index providing complete list
-        result = df.rename_axis(index=["foo", "goo"])
-        assert result.index.names == ["foo", "goo"]
-
-        # Test for changing index and columns at same time
-        sdf = df.reset_index().set_index("nn").drop(columns=["ll", "y"])
-        result = sdf.rename_axis(index="foo", columns="meh")
-        assert result.index.name == "foo"
-        assert result.columns.name == "meh"
-
-        # Test different error cases
-        with pytest.raises(TypeError, match="Must pass"):
-            df.rename_axis(index="wrong")
-
-        with pytest.raises(ValueError, match="Length of names"):
-            df.rename_axis(index=["wrong"])
-
-        with pytest.raises(TypeError, match="bogus"):
-            df.rename_axis(bogus=None)
-
     def test_set_index_names(self):
         df = tm.makeDataFrame()
         df.index.name = "name"
diff --git a/pandas/tests/generic/test_series.py b/pandas/tests/generic/test_series.py
index 20f6cda7c..07c02330d 100644
--- a/pandas/tests/generic/test_series.py
+++ b/pandas/tests/generic/test_series.py
@@ -21,15 +21,6 @@ class TestSeries(Generic):
         )
         s.rename(str.lower)
 
-    @pytest.mark.parametrize("func", ["rename_axis", "_set_axis_name"])
-    def test_set_axis_name(self, func):
-        s = Series([1, 2, 3], index=["a", "b", "c"])
-        name = "foo"
-
-        result = methodcaller(func, name)(s)
-        assert s.index.name is None
-        assert result.index.name == name
-
     @pytest.mark.parametrize("func", ["rename_axis", "_set_axis_name"])
     def test_set_axis_name_mi(self, func):
         s = Series(
diff --git a/pandas/tests/series/methods/test_rename_axis.py b/pandas/tests/series/methods/test_rename_axis.py
new file mode 100644
index 000000000..b519dd114
--- /dev/null
+++ b/pandas/tests/series/methods/test_rename_axis.py
@@ -0,0 +1,43 @@
+import pytest
+
+from pandas import Index, MultiIndex, Series
+import pandas._testing as tm
+
+
+class TestSeriesRenameAxis:
+    def test_rename_axis_mapper(self):
+        # GH 19978
+        mi = MultiIndex.from_product([["a", "b", "c"], [1, 2]], names=["ll", "nn"])
+        ser = Series(list(range(len(mi))), index=mi)
+
+        result = ser.rename_axis(index={"ll": "foo"})
+        assert result.index.names == ["foo", "nn"]
+
+        result = ser.rename_axis(index=str.upper, axis=0)
+        assert result.index.names == ["LL", "NN"]
+
+        result = ser.rename_axis(index=["foo", "goo"])
+        assert result.index.names == ["foo", "goo"]
+
+        with pytest.raises(TypeError, match="unexpected"):
+            ser.rename_axis(columns="wrong")
+
+    def test_rename_axis_inplace(self, datetime_series):
+        # GH 15704
+        expected = datetime_series.rename_axis("foo")
+        result = datetime_series
+        no_return = result.rename_axis("foo", inplace=True)
+
+        assert no_return is None
+        tm.assert_series_equal(result, expected)
+
+    @pytest.mark.parametrize("kwargs", [{"mapper": None}, {"index": None}, {}])
+    def test_rename_axis_none(self, kwargs):
+        # GH 25034
+        index = Index(list("abc"), name="foo")
+        ser = Series([1, 2, 3], index=index)
+
+        result = ser.rename_axis(**kwargs)
+        expected_index = index.rename(None) if kwargs else index
+        expected = Series([1, 2, 3], index=expected_index)
+        tm.assert_series_equal(result, expected)
diff --git a/pandas/tests/series/test_alter_axes.py b/pandas/tests/series/test_alter_axes.py
index 769d1ed87..c2bb498df 100644
--- a/pandas/tests/series/test_alter_axes.py
+++ b/pandas/tests/series/test_alter_axes.py
@@ -3,7 +3,7 @@ from datetime import datetime
 import numpy as np
 import pytest
 
-from pandas import Index, MultiIndex, Series
+from pandas import Index, Series
 import pandas._testing as tm
 
 
@@ -54,43 +54,6 @@ class TestSeriesAlterAxes:
         s.index = idx
         assert s.index.is_all_dates
 
-    def test_rename_axis_mapper(self):
-        # GH 19978
-        mi = MultiIndex.from_product([["a", "b", "c"], [1, 2]], names=["ll", "nn"])
-        s = Series(list(range(len(mi))), index=mi)
-
-        result = s.rename_axis(index={"ll": "foo"})
-        assert result.index.names == ["foo", "nn"]
-
-        result = s.rename_axis(index=str.upper, axis=0)
-        assert result.index.names == ["LL", "NN"]
-
-        result = s.rename_axis(index=["foo", "goo"])
-        assert result.index.names == ["foo", "goo"]
-
-        with pytest.raises(TypeError, match="unexpected"):
-            s.rename_axis(columns="wrong")
-
-    def test_rename_axis_inplace(self, datetime_series):
-        # GH 15704
-        expected = datetime_series.rename_axis("foo")
-        result = datetime_series
-        no_return = result.rename_axis("foo", inplace=True)
-
-        assert no_return is None
-        tm.assert_series_equal(result, expected)
-
-    @pytest.mark.parametrize("kwargs", [{"mapper": None}, {"index": None}, {}])
-    def test_rename_axis_none(self, kwargs):
-        # GH 25034
-        index = Index(list("abc"), name="foo")
-        df = Series([1, 2, 3], index=index)
-
-        result = df.rename_axis(**kwargs)
-        expected_index = index.rename(None) if kwargs else index
-        expected = Series([1, 2, 3], index=expected_index)
-        tm.assert_series_equal(result, expected)
-
     def test_set_axis_inplace_axes(self, axis_series):
         # GH14636
         ser = Series(np.arange(4), index=[1, 3, 5, 7], dtype="int64")
