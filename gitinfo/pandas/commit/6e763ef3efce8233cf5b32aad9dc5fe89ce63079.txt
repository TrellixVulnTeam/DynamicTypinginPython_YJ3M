commit 6e763ef3efce8233cf5b32aad9dc5fe89ce63079
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Jun 22 02:01:55 2011 -0400

    remove unit tests, enable to remove full node. docs

diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 9e43752b8..ac706a733 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -43,7 +43,10 @@ prof = LineProfiler()
 class HDFStore(object):
     """
     dict-like IO interface for storing pandas objects in PyTables
-    format
+    format.
+
+    DataFrame and WidePanel can be stored in Table format, which is slower to
+    read and write but can be searched and manipulated more like an SQL table
 
     Parameters
     ----------
@@ -194,29 +197,38 @@ class HDFStore(object):
     def _get_handler(self, op, kind):
         return getattr(self,'_%s_%s' % (op, kind))
 
-    def remove(self, key, where):
+    def remove(self, key, where=None):
         """
         Remove pandas object partially by specifying the where condition
 
+        Parameters
+        ----------
+        key : string
+            Node to remove or delete rows from
+        where : list
+            For Table node, delete specified rows. See HDFStore.select for more
+            information
+
         Parameters
         ----------
         key : object
         """
-        group = getattr(self.handle.root, key, None)
-        if group is not None:
-            return self._delete_group(group, where)
+        if where is None:
+            self.handle.removeNode(self.handle.root, key, recursive=True)
+        else:
+            group = getattr(self.handle.root, key)
+            self._delete_from_table(group, where)
 
     def append(self, key, value):
         """
-        Store object in file
+        Append to Table in file. Node must already exist and be Table format
 
         Parameters
         ----------
         key : object
-        <value : {Series, DataFrame, WidePanel, LongPanel}
-        pandas data structure
+        value : {Series, DataFrame, WidePanel, LongPanel}
         """
-        self._write_group(key, value, True)
+        self._write_to_group(key, value, table=True, append=True)
 
     def _write_to_group(self, key, value, table=False, append=False,
                         comp=None):
@@ -353,7 +365,7 @@ class HDFStore(object):
             raise
 
     def _delete_group(self,group, where):
-        return self._delete_from_table(group, where)
+        return
 
     def _read_series(self, group, where=None):
         index = self._read_index(group, 'index')
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index d7af86a9e..cef1fcd14 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -50,6 +50,43 @@ class TesttHDFStore(unittest.TestCase):
         right = self.store['a']
         tm.assert_series_equal(left, right)
 
+        self.assertRaises(AttributeError, self.store.get, 'b')
+
+    def test_put_corner(self):
+        pass
+
+    def test_remove(self):
+        ts =tm.makeTimeSeries()
+        df = tm.makeDataFrame()
+        self.store['a'] = ts
+        self.store['b'] = df
+        self.store.remove('a')
+        self.assertEquals(len(self.store), 1)
+        tm.assert_frame_equal(df, self.store['b'])
+
+        self.store.remove('b')
+        self.assertEquals(len(self.store), 0)
+
+    def test_remove_crit(self):
+        wp = tm.makeWidePanel()
+        self.store.put('wp', wp, table=True)
+        date = wp.major_axis[len(wp.major_axis) // 2]
+
+        crit1 = {
+            'field' : 'index',
+            'op' : '>',
+            'value' : date
+        }
+        crit2 = {
+            'field' : 'column',
+            'value' : ['A', 'D']
+        }
+        self.store.remove('wp', where=[crit1])
+        self.store.remove('wp', where=[crit2])
+        result = self.store['wp']
+        expected = wp.truncate(after=date).reindex(minor=['B', 'C'])
+        tm.assert_panel_equal(result, expected)
+
     def test_series(self):
         s = tm.makeStringSeries()
         self._check_roundtrip(s, tm.assert_series_equal)
@@ -135,6 +172,11 @@ class TesttHDFStore(unittest.TestCase):
         expected = df.ix[date:, ['A', 'D']]
         tm.assert_frame_equal(result, expected)
 
+        # can't select if not written as table
+        self.store['frame'] = df
+        self.assertRaises(Exception, self.store.select,
+                          'frame', [crit1, crit2])
+
     def _check_roundtrip(self, obj, comparator):
         store = HDFStore(self.scratchpath, 'w')
         store['obj'] = obj
