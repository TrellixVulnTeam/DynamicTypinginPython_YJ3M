commit 38cc8bb23257eff4ee8f3b16570a96a41f76fb6a
Author: y-p <yoval@gmx.com>
Date:   Wed Jan 29 22:04:19 2014 +0200

    CLN: clear up some cython warnings

diff --git a/pandas/algos.pyx b/pandas/algos.pyx
index d916de32b..64df9df02 100644
--- a/pandas/algos.pyx
+++ b/pandas/algos.pyx
@@ -1630,7 +1630,8 @@ def roll_generic(ndarray[float64_t, cast=True] input, int win,
                  int minp, object func):
     cdef ndarray[double_t] output, counts, bufarr
     cdef Py_ssize_t i, n
-    cdef float64_t *buf, *oldbuf
+    cdef float64_t *buf
+    cdef float64_t *oldbuf
 
     if not input.flags.c_contiguous:
         input = input.copy('C')
diff --git a/pandas/src/generate_code.py b/pandas/src/generate_code.py
index 70b68eae7..bf77b3220 100644
--- a/pandas/src/generate_code.py
+++ b/pandas/src/generate_code.py
@@ -92,7 +92,8 @@ def take_2d_axis0_%(name)s_%(dest)s(ndarray[%(c_type_in)s, ndim=2] values,
 
     IF %(can_copy)s:
         cdef:
-            %(c_type_out)s *v, *o
+            %(c_type_out)s *v
+            %(c_type_out)s *o
 
         #GH3130
         if (values.strides[1] == out.strides[1] and
@@ -141,7 +142,8 @@ def take_2d_axis1_%(name)s_%(dest)s(ndarray[%(c_type_in)s, ndim=2] values,
 
     IF %(can_copy)s:
         cdef:
-            %(c_type_out)s *v, *o
+            %(c_type_out)s *v
+            %(c_type_out)s *o
 
         #GH3130
         if (values.strides[0] == out.strides[0] and
diff --git a/pandas/src/generated.pyx b/pandas/src/generated.pyx
index 985781ee6..22f56ef14 100644
--- a/pandas/src/generated.pyx
+++ b/pandas/src/generated.pyx
@@ -2596,8 +2596,10 @@ def take_2d_axis0_bool_bool(ndarray[uint8_t, ndim=2] values,
 
     IF True:
         cdef:
-            uint8_t *v, *o
+            uint8_t *v
+            uint8_t *o
 
+        #GH3130
         if (values.strides[1] == out.strides[1] and
             values.strides[1] == sizeof(uint8_t) and
             sizeof(uint8_t) * n >= 256):
@@ -2639,8 +2641,10 @@ def take_2d_axis0_bool_object(ndarray[uint8_t, ndim=2] values,
 
     IF False:
         cdef:
-            object *v, *o
+            object *v
+            object *o
 
+        #GH3130
         if (values.strides[1] == out.strides[1] and
             values.strides[1] == sizeof(object) and
             sizeof(object) * n >= 256):
@@ -2682,8 +2686,10 @@ def take_2d_axis0_int8_int8(ndarray[int8_t, ndim=2] values,
 
     IF True:
         cdef:
-            int8_t *v, *o
+            int8_t *v
+            int8_t *o
 
+        #GH3130
         if (values.strides[1] == out.strides[1] and
             values.strides[1] == sizeof(int8_t) and
             sizeof(int8_t) * n >= 256):
@@ -2725,8 +2731,10 @@ def take_2d_axis0_int8_int32(ndarray[int8_t, ndim=2] values,
 
     IF False:
         cdef:
-            int32_t *v, *o
+            int32_t *v
+            int32_t *o
 
+        #GH3130
         if (values.strides[1] == out.strides[1] and
             values.strides[1] == sizeof(int32_t) and
             sizeof(int32_t) * n >= 256):
@@ -2768,8 +2776,10 @@ def take_2d_axis0_int8_int64(ndarray[int8_t, ndim=2] values,
 
     IF False:
         cdef:
-            int64_t *v, *o
+            int64_t *v
+            int64_t *o
 
+        #GH3130
         if (values.strides[1] == out.strides[1] and
             values.strides[1] == sizeof(int64_t) and
             sizeof(int64_t) * n >= 256):
@@ -2811,8 +2821,10 @@ def take_2d_axis0_int8_float64(ndarray[int8_t, ndim=2] values,
 
     IF False:
         cdef:
-            float64_t *v, *o
+            float64_t *v
+            float64_t *o
 
+        #GH3130
         if (values.strides[1] == out.strides[1] and
             values.strides[1] == sizeof(float64_t) and
             sizeof(float64_t) * n >= 256):
@@ -2854,8 +2866,10 @@ def take_2d_axis0_int16_int16(ndarray[int16_t, ndim=2] values,
 
     IF True:
         cdef:
-            int16_t *v, *o
+            int16_t *v
+            int16_t *o
 
+        #GH3130
         if (values.strides[1] == out.strides[1] and
             values.strides[1] == sizeof(int16_t) and
             sizeof(int16_t) * n >= 256):
@@ -2897,8 +2911,10 @@ def take_2d_axis0_int16_int32(ndarray[int16_t, ndim=2] values,
 
     IF False:
         cdef:
-            int32_t *v, *o
+            int32_t *v
+            int32_t *o
 
+        #GH3130
         if (values.strides[1] == out.strides[1] and
             values.strides[1] == sizeof(int32_t) and
             sizeof(int32_t) * n >= 256):
@@ -2940,8 +2956,10 @@ def take_2d_axis0_int16_int64(ndarray[int16_t, ndim=2] values,
 
     IF False:
         cdef:
-            int64_t *v, *o
+            int64_t *v
+            int64_t *o
 
+        #GH3130
         if (values.strides[1] == out.strides[1] and
             values.strides[1] == sizeof(int64_t) and
             sizeof(int64_t) * n >= 256):
@@ -2983,8 +3001,10 @@ def take_2d_axis0_int16_float64(ndarray[int16_t, ndim=2] values,
 
     IF False:
         cdef:
-            float64_t *v, *o
+            float64_t *v
+            float64_t *o
 
+        #GH3130
         if (values.strides[1] == out.strides[1] and
             values.strides[1] == sizeof(float64_t) and
             sizeof(float64_t) * n >= 256):
@@ -3026,8 +3046,10 @@ def take_2d_axis0_int32_int32(ndarray[int32_t, ndim=2] values,
 
     IF True:
         cdef:
-            int32_t *v, *o
+            int32_t *v
+            int32_t *o
 
+        #GH3130
         if (values.strides[1] == out.strides[1] and
             values.strides[1] == sizeof(int32_t) and
             sizeof(int32_t) * n >= 256):
@@ -3069,8 +3091,10 @@ def take_2d_axis0_int32_int64(ndarray[int32_t, ndim=2] values,
 
     IF False:
         cdef:
-            int64_t *v, *o
+            int64_t *v
+            int64_t *o
 
+        #GH3130
         if (values.strides[1] == out.strides[1] and
             values.strides[1] == sizeof(int64_t) and
             sizeof(int64_t) * n >= 256):
@@ -3112,8 +3136,10 @@ def take_2d_axis0_int32_float64(ndarray[int32_t, ndim=2] values,
 
     IF False:
         cdef:
-            float64_t *v, *o
+            float64_t *v
+            float64_t *o
 
+        #GH3130
         if (values.strides[1] == out.strides[1] and
             values.strides[1] == sizeof(float64_t) and
             sizeof(float64_t) * n >= 256):
@@ -3155,8 +3181,10 @@ def take_2d_axis0_int64_int64(ndarray[int64_t, ndim=2] values,
 
     IF True:
         cdef:
-            int64_t *v, *o
+            int64_t *v
+            int64_t *o
 
+        #GH3130
         if (values.strides[1] == out.strides[1] and
             values.strides[1] == sizeof(int64_t) and
             sizeof(int64_t) * n >= 256):
@@ -3198,8 +3226,10 @@ def take_2d_axis0_int64_float64(ndarray[int64_t, ndim=2] values,
 
     IF False:
         cdef:
-            float64_t *v, *o
+            float64_t *v
+            float64_t *o
 
+        #GH3130
         if (values.strides[1] == out.strides[1] and
             values.strides[1] == sizeof(float64_t) and
             sizeof(float64_t) * n >= 256):
@@ -3241,8 +3271,10 @@ def take_2d_axis0_float32_float32(ndarray[float32_t, ndim=2] values,
 
     IF True:
         cdef:
-            float32_t *v, *o
+            float32_t *v
+            float32_t *o
 
+        #GH3130
         if (values.strides[1] == out.strides[1] and
             values.strides[1] == sizeof(float32_t) and
             sizeof(float32_t) * n >= 256):
@@ -3284,8 +3316,10 @@ def take_2d_axis0_float32_float64(ndarray[float32_t, ndim=2] values,
 
     IF False:
         cdef:
-            float64_t *v, *o
+            float64_t *v
+            float64_t *o
 
+        #GH3130
         if (values.strides[1] == out.strides[1] and
             values.strides[1] == sizeof(float64_t) and
             sizeof(float64_t) * n >= 256):
@@ -3327,8 +3361,10 @@ def take_2d_axis0_float64_float64(ndarray[float64_t, ndim=2] values,
 
     IF True:
         cdef:
-            float64_t *v, *o
+            float64_t *v
+            float64_t *o
 
+        #GH3130
         if (values.strides[1] == out.strides[1] and
             values.strides[1] == sizeof(float64_t) and
             sizeof(float64_t) * n >= 256):
@@ -3370,8 +3406,10 @@ def take_2d_axis0_object_object(ndarray[object, ndim=2] values,
 
     IF False:
         cdef:
-            object *v, *o
+            object *v
+            object *o
 
+        #GH3130
         if (values.strides[1] == out.strides[1] and
             values.strides[1] == sizeof(object) and
             sizeof(object) * n >= 256):
@@ -3417,8 +3455,10 @@ def take_2d_axis1_bool_bool(ndarray[uint8_t, ndim=2] values,
 
     IF True:
         cdef:
-            uint8_t *v, *o
+            uint8_t *v
+            uint8_t *o
 
+        #GH3130
         if (values.strides[0] == out.strides[0] and
             values.strides[0] == sizeof(uint8_t) and
             sizeof(uint8_t) * n >= 256):
@@ -3463,8 +3503,10 @@ def take_2d_axis1_bool_object(ndarray[uint8_t, ndim=2] values,
 
     IF False:
         cdef:
-            object *v, *o
+            object *v
+            object *o
 
+        #GH3130
         if (values.strides[0] == out.strides[0] and
             values.strides[0] == sizeof(object) and
             sizeof(object) * n >= 256):
@@ -3509,8 +3551,10 @@ def take_2d_axis1_int8_int8(ndarray[int8_t, ndim=2] values,
 
     IF True:
         cdef:
-            int8_t *v, *o
+            int8_t *v
+            int8_t *o
 
+        #GH3130
         if (values.strides[0] == out.strides[0] and
             values.strides[0] == sizeof(int8_t) and
             sizeof(int8_t) * n >= 256):
@@ -3555,8 +3599,10 @@ def take_2d_axis1_int8_int32(ndarray[int8_t, ndim=2] values,
 
     IF False:
         cdef:
-            int32_t *v, *o
+            int32_t *v
+            int32_t *o
 
+        #GH3130
         if (values.strides[0] == out.strides[0] and
             values.strides[0] == sizeof(int32_t) and
             sizeof(int32_t) * n >= 256):
@@ -3601,8 +3647,10 @@ def take_2d_axis1_int8_int64(ndarray[int8_t, ndim=2] values,
 
     IF False:
         cdef:
-            int64_t *v, *o
+            int64_t *v
+            int64_t *o
 
+        #GH3130
         if (values.strides[0] == out.strides[0] and
             values.strides[0] == sizeof(int64_t) and
             sizeof(int64_t) * n >= 256):
@@ -3647,8 +3695,10 @@ def take_2d_axis1_int8_float64(ndarray[int8_t, ndim=2] values,
 
     IF False:
         cdef:
-            float64_t *v, *o
+            float64_t *v
+            float64_t *o
 
+        #GH3130
         if (values.strides[0] == out.strides[0] and
             values.strides[0] == sizeof(float64_t) and
             sizeof(float64_t) * n >= 256):
@@ -3693,8 +3743,10 @@ def take_2d_axis1_int16_int16(ndarray[int16_t, ndim=2] values,
 
     IF True:
         cdef:
-            int16_t *v, *o
+            int16_t *v
+            int16_t *o
 
+        #GH3130
         if (values.strides[0] == out.strides[0] and
             values.strides[0] == sizeof(int16_t) and
             sizeof(int16_t) * n >= 256):
@@ -3739,8 +3791,10 @@ def take_2d_axis1_int16_int32(ndarray[int16_t, ndim=2] values,
 
     IF False:
         cdef:
-            int32_t *v, *o
+            int32_t *v
+            int32_t *o
 
+        #GH3130
         if (values.strides[0] == out.strides[0] and
             values.strides[0] == sizeof(int32_t) and
             sizeof(int32_t) * n >= 256):
@@ -3785,8 +3839,10 @@ def take_2d_axis1_int16_int64(ndarray[int16_t, ndim=2] values,
 
     IF False:
         cdef:
-            int64_t *v, *o
+            int64_t *v
+            int64_t *o
 
+        #GH3130
         if (values.strides[0] == out.strides[0] and
             values.strides[0] == sizeof(int64_t) and
             sizeof(int64_t) * n >= 256):
@@ -3831,8 +3887,10 @@ def take_2d_axis1_int16_float64(ndarray[int16_t, ndim=2] values,
 
     IF False:
         cdef:
-            float64_t *v, *o
+            float64_t *v
+            float64_t *o
 
+        #GH3130
         if (values.strides[0] == out.strides[0] and
             values.strides[0] == sizeof(float64_t) and
             sizeof(float64_t) * n >= 256):
@@ -3877,8 +3935,10 @@ def take_2d_axis1_int32_int32(ndarray[int32_t, ndim=2] values,
 
     IF True:
         cdef:
-            int32_t *v, *o
+            int32_t *v
+            int32_t *o
 
+        #GH3130
         if (values.strides[0] == out.strides[0] and
             values.strides[0] == sizeof(int32_t) and
             sizeof(int32_t) * n >= 256):
@@ -3923,8 +3983,10 @@ def take_2d_axis1_int32_int64(ndarray[int32_t, ndim=2] values,
 
     IF False:
         cdef:
-            int64_t *v, *o
+            int64_t *v
+            int64_t *o
 
+        #GH3130
         if (values.strides[0] == out.strides[0] and
             values.strides[0] == sizeof(int64_t) and
             sizeof(int64_t) * n >= 256):
@@ -3969,8 +4031,10 @@ def take_2d_axis1_int32_float64(ndarray[int32_t, ndim=2] values,
 
     IF False:
         cdef:
-            float64_t *v, *o
+            float64_t *v
+            float64_t *o
 
+        #GH3130
         if (values.strides[0] == out.strides[0] and
             values.strides[0] == sizeof(float64_t) and
             sizeof(float64_t) * n >= 256):
@@ -4015,8 +4079,10 @@ def take_2d_axis1_int64_int64(ndarray[int64_t, ndim=2] values,
 
     IF True:
         cdef:
-            int64_t *v, *o
+            int64_t *v
+            int64_t *o
 
+        #GH3130
         if (values.strides[0] == out.strides[0] and
             values.strides[0] == sizeof(int64_t) and
             sizeof(int64_t) * n >= 256):
@@ -4061,8 +4127,10 @@ def take_2d_axis1_int64_float64(ndarray[int64_t, ndim=2] values,
 
     IF False:
         cdef:
-            float64_t *v, *o
+            float64_t *v
+            float64_t *o
 
+        #GH3130
         if (values.strides[0] == out.strides[0] and
             values.strides[0] == sizeof(float64_t) and
             sizeof(float64_t) * n >= 256):
@@ -4107,8 +4175,10 @@ def take_2d_axis1_float32_float32(ndarray[float32_t, ndim=2] values,
 
     IF True:
         cdef:
-            float32_t *v, *o
+            float32_t *v
+            float32_t *o
 
+        #GH3130
         if (values.strides[0] == out.strides[0] and
             values.strides[0] == sizeof(float32_t) and
             sizeof(float32_t) * n >= 256):
@@ -4153,8 +4223,10 @@ def take_2d_axis1_float32_float64(ndarray[float32_t, ndim=2] values,
 
     IF False:
         cdef:
-            float64_t *v, *o
+            float64_t *v
+            float64_t *o
 
+        #GH3130
         if (values.strides[0] == out.strides[0] and
             values.strides[0] == sizeof(float64_t) and
             sizeof(float64_t) * n >= 256):
@@ -4199,8 +4271,10 @@ def take_2d_axis1_float64_float64(ndarray[float64_t, ndim=2] values,
 
     IF True:
         cdef:
-            float64_t *v, *o
+            float64_t *v
+            float64_t *o
 
+        #GH3130
         if (values.strides[0] == out.strides[0] and
             values.strides[0] == sizeof(float64_t) and
             sizeof(float64_t) * n >= 256):
@@ -4245,8 +4319,10 @@ def take_2d_axis1_object_object(ndarray[object, ndim=2] values,
 
     IF False:
         cdef:
-            object *v, *o
+            object *v
+            object *o
 
+        #GH3130
         if (values.strides[0] == out.strides[0] and
             values.strides[0] == sizeof(object) and
             sizeof(object) * n >= 256):
diff --git a/pandas/src/numpy.pxd b/pandas/src/numpy.pxd
index f61c8762a..9ab3b9b1b 100644
--- a/pandas/src/numpy.pxd
+++ b/pandas/src/numpy.pxd
@@ -870,7 +870,8 @@ cdef extern from "numpy/ufuncobject.h":
             void **data
             int ntypes
             int check_return
-            char *name, *types
+            char *name
+            char *types
             char *doc
             void *ptr
             PyObject *obj
