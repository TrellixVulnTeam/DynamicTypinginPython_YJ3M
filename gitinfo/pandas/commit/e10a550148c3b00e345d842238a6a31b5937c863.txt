commit e10a550148c3b00e345d842238a6a31b5937c863
Author: Phillip Cloud <cpcloud@gmail.com>
Date:   Sat Jul 6 16:25:58 2013 -0400

    ENH: rewrite assignment operator as equal comparison for PyTables

diff --git a/pandas/computation/expr.py b/pandas/computation/expr.py
index 6d33f6ac5..9a9cd2262 100644
--- a/pandas/computation/expr.py
+++ b/pandas/computation/expr.py
@@ -1,7 +1,12 @@
 import ast
 import sys
+import itertools
+import tokenize
+import re
+from cStringIO import StringIO
 from functools import partial
 
+
 from pandas.core.base import StringMixin
 from pandas.computation.ops import BinOp, UnaryOp, _reductions, _mathops
 from pandas.computation.ops import _cmp_ops_syms, _bool_ops_syms
@@ -26,12 +31,38 @@ class ExprParserError(Exception):
     pass
 
 
+def _rewrite_assign(source):
+    res = []
+    g = tokenize.generate_tokens(StringIO(source).readline)
+    for toknum, tokval, _, _, _ in g:
+        res.append((toknum, '==' if tokval == '=' else tokval))
+    return tokenize.untokenize(res)
+
+
+def _parenthesize_booleans(source, ops='|&'):
+    res = source
+    for op in ops:
+        terms = res.split(op)
+
+        t = []
+        for term in terms:
+            t.append('({0})'.format(term))
+
+        res = op.join(t)
+    return res
+
+
+def preparse(source):
+    return _parenthesize_booleans(_rewrite_assign(source))
+
+
 class ExprVisitor(ast.NodeVisitor):
     """Custom ast walker
     """
     bin_ops = _cmp_ops_syms + _bool_ops_syms + _arith_ops_syms
-    bin_op_nodes = ('Gt', 'Lt', 'GtE', 'LtE', 'Eq', 'NotEq', 'BitAnd', 'BitOr',
-                    'Add', 'Sub', 'Mult', 'Div', 'Pow', 'FloorDiv', 'Mod')
+    bin_op_nodes = ('Gt', 'Lt', 'GtE', 'LtE', 'Eq', 'NotEq', None,
+                    'BitAnd', 'BitOr', 'Add', 'Sub', 'Mult', 'Div', 'Pow',
+                    'FloorDiv', 'Mod')
     bin_op_nodes_map = dict(zip(bin_ops, bin_op_nodes))
 
     unary_ops = _unary_ops_syms
@@ -39,7 +70,7 @@ class ExprVisitor(ast.NodeVisitor):
     unary_op_nodes_map = dict(zip(unary_ops, unary_op_nodes))
 
     def __init__(self, env):
-        for bin_op in self.bin_ops:
+        for bin_op in itertools.ifilter(lambda x: x is not None, self.bin_ops):
             setattr(self, 'visit_{0}'.format(self.bin_op_nodes_map[bin_op]),
                     lambda node, bin_op=bin_op: partial(BinOp, bin_op))
 
@@ -54,7 +85,7 @@ class ExprVisitor(ast.NodeVisitor):
             raise TypeError('"node" must be an AST node or a string, you'
                             ' passed a(n) {0}'.format(node.__class__))
         if isinstance(node, basestring):
-            node = ast.fix_missing_locations(ast.parse(node))
+            node = ast.fix_missing_locations(ast.parse(preparse(node)))
         return super(ExprVisitor, self).visit(node)
 
     def visit_Module(self, node):
@@ -62,7 +93,7 @@ class ExprVisitor(ast.NodeVisitor):
             raise ExprParserError('only a single expression is allowed')
 
         expr = node.body[0]
-        if not isinstance(expr, ast.Expr):
+        if not isinstance(expr, (ast.Expr, ast.Assign)):
             raise SyntaxError('only expressions are allowed')
 
         return self.visit(expr)
@@ -95,6 +126,12 @@ class ExprVisitor(ast.NodeVisitor):
             raise ExprParserError('chained comparisons not supported')
         return self.visit(ops[0])(self.visit(node.left), self.visit(comps[0]))
 
+    def visit_Assign(self, node):
+        cmpr = ast.copy_location(ast.Compare(ops=[ast.Eq()],
+                                             left=node.targets[0],
+                                             comparators=[node.value]), node)
+        return self.visit(cmpr)
+
     def visit_Call(self, node):
         if not isinstance(node.func, ast.Name):
             raise TypeError("Only named functions are supported")
diff --git a/pandas/computation/tests/test_eval.py b/pandas/computation/tests/test_eval.py
index fc1cccf32..6ec630b80 100644
--- a/pandas/computation/tests/test_eval.py
+++ b/pandas/computation/tests/test_eval.py
@@ -52,7 +52,9 @@ def _eval_from_expr(lhs, cmp1, rhs, binop, cmp2):
     env = Scope()
     typ, axes = _align_core((Term('lhs', env), Term('rhs', env)))
     lhs, rhs = env.locals['lhs'], env.locals['rhs']
-    return _reconstruct_object(typ, bf(f1(lhs, rhs), f2(lhs, rhs)), axes)
+    ret_type = np.result_type(lhs, rhs)
+    return _reconstruct_object(typ, bf(f1(lhs, rhs), f2(lhs, rhs)), axes,
+                               ret_type)
 
 
 def _eval_single_bin(lhs, cmp1, rhs, has_neg_frac):
