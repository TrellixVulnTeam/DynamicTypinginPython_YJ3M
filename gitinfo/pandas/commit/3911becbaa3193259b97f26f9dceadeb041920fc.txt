commit 3911becbaa3193259b97f26f9dceadeb041920fc
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jul 28 14:18:11 2011 -0400

    ENH: test_panel passes, but a lot of other stuff is failing

diff --git a/pandas/core/index.py b/pandas/core/index.py
index a096c7001..720028ac3 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -58,17 +58,12 @@ class Index(np.ndarray):
         # New instance creation
         if obj is None:
             pass
-
         # New from template / slicing
         elif isinstance(obj, type(self)) and len(self) != len(obj.indexMap):
             pass
-
         # View casting
         else:
             pass
-            # if hasattr(obj, '_cache_indexMap'):
-            #     self._cache_indexMap = obj._cache_indexMap
-            #     self._cache_allDates = getattr(obj, '_cache_allDates', None)
 
     def summary(self):
         if len(self) > 0:
@@ -105,8 +100,6 @@ class Index(np.ndarray):
     def __setstate__(self, state):
         """Necessary for making this object picklable"""
         np.ndarray.__setstate__(self, state)
-        self._cache_indexMap = _tseries.map_indices(self)
-        self._cache_allDates = _tseries.isAllDates(self)
 
     def __deepcopy__(self, memo={}):
         """
@@ -389,16 +382,12 @@ class MultiLevelIndex(Index):
         arr = np.empty(len(labels[0]), dtype=object)
         arr[:] = zip(*labels)
         arr = arr.view(cls)
-
-        arr.levels = [_ensure_index(lev) for lev in levels]
-        arr.labels = [np.asarray(labs, dtype=np.int32) for labs in labels]
-
         return arr
 
-    # def __init__(self, levels=None, labels=None):
-    #     self.levels = [_ensure_index(lev) for lev in levels]
-    #     self.labels = [np.asarray(labs, dtype=np.int32) for labs in labels]
-    #     self._verify_integrity()
+    def __init__(self, levels=None, labels=None):
+        self.levels = [_ensure_index(lev) for lev in levels]
+        self.labels = [np.asarray(labs, dtype=np.int32) for labs in labels]
+        self._verify_integrity()
 
     def __array_finalize__(self, obj):
         self.labels = getattr(obj, 'labels', None)
@@ -508,17 +497,6 @@ class LongPanelIndex(MultiLevelIndex):
         observation selection vector using major and minor labels, for
         converting to wide format.
     """
-    # def __new__(cls, major_axis, minor_axis, major_labels, minor_labels):
-    #     return MultiLevelIndex.__new__(cls, levels=[major_axis, minor_axis],
-    #                                    labels=[major_labels, minor_labels])
-
-    # def __init__(self, major_axis, minor_axis, major_labels,
-    #              minor_labels, mask=None):
-
-    #     assert(len(minor_labels) == len(major_labels))
-    #     MultiLevelIndex.__init__(self, levels=[major_axis, minor_axis],
-    #                              labels=[major_labels, minor_labels])
-    #     self._mask = mask
 
     @property
     def major_axis(self):
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 730a266be..430435c10 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -262,7 +262,7 @@ class BlockManager(object):
         cur_axis = self.axes[axis]
         if len(value) != len(cur_axis):
             raise Exception('Length mismatch (%d vs %d)'
-                            % (len(index), len(cur_axis)))
+                            % (len(value), len(cur_axis)))
         self.axes[axis] = _ensure_index(value)
 
         if axis == 0:
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 10ed52f6e..c8a50b8a8 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -470,10 +470,10 @@ class WidePanel(Panel, NDFrame):
                             minor=other.minor_axis, method=method)
 
     def _combine(self, other, func, axis=0):
-        if isinstance(other, DataFrame):
-            return self._combine_frame(other, func, axis=axis)
-        elif isinstance(other, Panel):
+        if isinstance(other, Panel):
             return self._combine_panel(other, func)
+        elif isinstance(other, DataFrame):
+            return self._combine_frame(other, func, axis=axis)
         elif np.isscalar(other):
             new_values = func(self.values, other)
 
@@ -681,7 +681,7 @@ class WidePanel(Panel, NDFrame):
                                        minor_labels])
                                # mask=mask)
 
-        return LongPanel(values, self.items, index)
+        return LongPanel(values, index=index, columns=self.items)
 
     toLong = to_long
 
@@ -960,7 +960,7 @@ class WidePanel(Panel, NDFrame):
 # LongPanel and friends
 
 
-class LongPanel(Panel, Picklable):
+class LongPanel(Panel, DataFrame):
     """
     Represents long or "stacked" format panel data
 
@@ -977,11 +977,9 @@ class LongPanel(Panel, Picklable):
     the LongPanelIndex
     """
 
-    def __init__(self, values, items, index, factors=None):
-        self.items = items
-        self.index = index
-        self.values = values
-        self.factors = factors or {}
+    @property
+    def items(self):
+        return self.columns
 
     def __len__(self):
         return len(self.index)
@@ -1044,14 +1042,14 @@ class LongPanel(Panel, Picklable):
         for col in exclude:
             del data[col]
 
-        factor_dict = {}
-        for col in data.keys():
-            series = data[col]
+        # factor_dict = {}
+        # for col in data.keys():
+        #     series = data[col]
 
-            # Is it a factor?
-            if not np.issctype(series.dtype):
-                factor_dict[col] = factor = Factor.fromarray(series)
-                data[col] = factor.labels
+        #     # Is it a factor?
+        #     if not np.issctype(series.dtype):
+        #         factor_dict[col] = factor = Factor.fromarray(series)
+        #         data[col] = factor.labels
 
         items = sorted(data)
         values = np.array([data[k] for k in items]).T
@@ -1059,7 +1057,8 @@ class LongPanel(Panel, Picklable):
         index = LongPanelIndex([major_axis, minor_axis],
                                [major_labels, minor_labels])
 
-        return LongPanel(values, items, index, factors=factor_dict)
+        return LongPanel(values, index=index, columns=items)
+        # , factors=factor_dict)
 
     def toRecords(self):
         major = np.asarray(self.major_axis).take(self.index.major_labels)
@@ -1072,13 +1071,6 @@ class LongPanel(Panel, Picklable):
 
         return np.rec.fromarrays(arrays, names=names)
 
-    @property
-    def columns(self):
-        """
-        So LongPanel can be DataFrame-like at times
-        """
-        return self.items
-
     def copy(self):
         """
         Return copy of LongPanel (copies ndarray)
@@ -1087,8 +1079,8 @@ class LongPanel(Panel, Picklable):
         -------
         y : LongPanel
         """
-        return LongPanel(self.values.copy(), self.items, self.index,
-                         factors=self.factors)
+        return LongPanel(self.values.copy(), columns=self.items,
+                         index=self.index)
 
     @property
     def major_axis(self):
@@ -1098,72 +1090,72 @@ class LongPanel(Panel, Picklable):
     def minor_axis(self):
         return self.index.minor_axis
 
-    def _get_values(self):
-        return self._values
+    # def _get_values(self):
+    #     return self._values
 
-    def _set_values(self, values):
-        if not values.flags.contiguous:
-            values = values.copy()
+    # def _set_values(self, values):
+    #     if not values.flags.contiguous:
+    #         values = values.copy()
 
-        shape = len(self.index.major_labels), len(self.items)
+    #     shape = len(self.index.major_labels), len(self.items)
 
-        if values.shape != shape:
-            raise ValueError('Values shape %s mismatch to %s' % (values.shape,
-                                                                shape))
+    #     if values.shape != shape:
+    #         raise ValueError('Values shape %s mismatch to %s' % (values.shape,
+    #                                                             shape))
 
-        self._values = values
+    #     self._values = values
 
-    values = property(fget=_get_values, fset=_set_values)
+    # values = property(fget=_get_values, fset=_set_values)
 
-    def __getitem__(self, key):
-        "Return column of panel as LongPanel"
-        loc = self.items.get_loc(key)
-        return LongPanel(self.values[:, loc : loc + 1].copy(),
-                        [key], self.index, factors=self.factors)
+    # def __getitem__(self, key):
+    #     "Return column of panel as LongPanel"
+    #     loc = self.items.get_loc(key)
+    #     return LongPanel(self.values[:, loc : loc + 1].copy(),
+    #                      [key], self.index, factors=self.factors)
 
-    def __setitem__(self, key, value):
-        if np.isscalar(value):
-            mat = np.empty((len(self.values), 1), dtype=float)
-            mat.fill(value)
-        elif isinstance(value, np.ndarray):
-            mat = value
-        elif isinstance(value, LongPanel):
-            if len(value.items) > 1:
-                raise ValueError('input LongPanel must only have one column')
+    # def __setitem__(self, key, value):
+    #     if np.isscalar(value):
+    #         mat = np.empty((len(self.values), 1), dtype=float)
+    #         mat.fill(value)
+    #     elif isinstance(value, np.ndarray):
+    #         mat = value
+    #     elif isinstance(value, LongPanel):
+    #         if len(value.items) > 1:
+    #             raise ValueError('input LongPanel must only have one column')
 
-            if value.index is not self.index:
-                raise ValueError('Only can set identically-indexed LongPanel '
-                                'items for now')
+    #         if value.index is not self.index:
+    #             raise ValueError('Only can set identically-indexed LongPanel '
+    #                             'items for now')
 
-            mat = value.values
+    #         mat = value.values
 
-        # Insert item at end of items for now
-        self.items = Index(list(self.items) + [key])
-        self.values = np.column_stack((self.values, mat))
+    #     # Insert item at end of items for now
+    #     self.columns = Index(list(self.columns) + [key])
+    #     self.values = np.column_stack((self.values, mat))
 
-    def __getstate__(self):
-        "Returned pickled representation of the panel"
+    # def __getstate__(self):
+    #     "Returned pickled representation of the panel"
 
-        return (common._pickle_array(self.values),
-                common._pickle_array(self.items),
-                self.index)
+    #     return (common._pickle_array(self.values),
+    #             common._pickle_array(self.items),
+    #             self.index)
 
-    def __setstate__(self, state):
-        "Unpickle the panel"
-        (vals, items, index) = state
+    # def __setstate__(self, state):
+    #     "Unpickle the panel"
+    #     (vals, items, index) = state
 
-        self.items = common._unpickle_array(items)
-        self.index = index
-        self.values = common._unpickle_array(vals)
+    #     self.items = common._unpickle_array(items)
+    #     self.index = index
+    #     self.values = common._unpickle_array(vals)
 
     def _combine(self, other, func, axis='items'):
-        if isinstance(other, DataFrame):
-            return self._combine_frame(other, func, axis=axis)
-        elif isinstance(other, Panel):
+        if isinstance(other, Panel):
             return self._combine_panel(other, func)
+        elif isinstance(other, DataFrame):
+            return self._combine_frame(other, func, axis=axis)
         elif np.isscalar(other):
-            return LongPanel(func(self.values, other), self.items,
-                             self.index, factors=self.factors)
+            return LongPanel(func(self.values, other), columns=self.items,
+                             index=self.index)
 
     def _combine_frame(self, other, func, axis='items'):
         """
@@ -1196,8 +1188,8 @@ class LongPanel(Panel, Picklable):
         else:
             new_values = func(self.values, other.values)
 
-        return LongPanel(new_values, self.items, self.index,
-                         factors=self.factors)
+        return LongPanel(new_values, columns=self.items,
+                         index=self.index)
 
     add = _long_arith_method(operator.add, 'add')
     subtract = _long_arith_method(operator.sub, 'subtract')
@@ -1234,11 +1226,11 @@ class LongPanel(Panel, Picklable):
         new_index = LongPanelIndex([self.major_axis, self.minor_axis],
                                     [new_major, new_minor])
 
-        new_factors = dict((k, v.take(indexer))
-                           for k, v in self.factors.iteritems())
+        # new_factors = dict((k, v.take(indexer))
+        #                    for k, v in self.factors.iteritems())
 
-        return LongPanel(new_values, self.items, new_index,
-                         factors=new_factors)
+        return LongPanel(new_values, columns=self.items,
+                         index=new_index)
 
     def to_wide(self):
         """
@@ -1333,7 +1325,8 @@ class LongPanel(Panel, Picklable):
                                     new_minor])
                                    # mask=self.index.mask)
 
-        return LongPanel(new_values, self.items, new_index)
+        return LongPanel(new_values, columns=self.items,
+                         index=new_index)
 
     def truncate(self, before=None, after=None):
         """
@@ -1355,7 +1348,7 @@ class LongPanel(Panel, Picklable):
         new_index = self.index.truncate(before, after)
 
         return LongPanel(self.values[left : right],
-                         self.items, new_index)
+                         columns=self.items, index=new_index)
 
     def filter(self, items):
         """
@@ -1373,7 +1366,8 @@ class LongPanel(Panel, Picklable):
         indexer = [self.items.indexMap[col] for col in intersection]
 
         new_values = self.values.take(indexer, axis=1)
-        return LongPanel(new_values, intersection, self.index)
+        return LongPanel(new_values, columns=intersection,
+                         index=self.index)
 
     def get_axis_dummies(self, axis='minor', transform=None,
                          prefix=None):
@@ -1417,7 +1411,7 @@ class LongPanel(Panel, Picklable):
         values = np.eye(dim, dtype=float)
         values = values.take(labels, axis=0)
 
-        result = LongPanel(values, items, self.index)
+        result = LongPanel(values, columns=items, index=self.index)
 
         if prefix is None:
             prefix = ''
@@ -1450,7 +1444,8 @@ class LongPanel(Panel, Picklable):
 
         dummy_mat = values.take(mapping, axis=0)
 
-        return LongPanel(dummy_mat, distinct_values, self.index)
+        return LongPanel(dummy_mat, columns=distinct_values,
+                         index=self.index)
 
     def mean(self, axis='major', broadcast=False):
         return self.apply(lambda x: np.mean(x, axis=0), axis, broadcast)
@@ -1480,7 +1475,8 @@ class LongPanel(Panel, Picklable):
         except Exception:
             # ufunc
             new_values = f(self.values)
-            return LongPanel(new_values, self.items, self.index)
+            return LongPanel(new_values, columns=self.items,
+                             index=self.index)
 
     def _apply_axis(self, f, axis='major', broadcast=False):
         if axis == 'major':
@@ -1499,7 +1495,7 @@ class LongPanel(Panel, Picklable):
         if broadcast:
             repeater = np.concatenate((np.diff(bounds), [N - bounds[-1]]))
             panel = LongPanel(result.repeat(repeater, axis=0),
-                              self.items, self.index)
+                              columns=self.items, index=self.index)
         else:
             panel = DataFrame(result, index=self.major_axis,
                                columns=self.items)
@@ -1546,7 +1542,7 @@ class LongPanel(Panel, Picklable):
         items = Index(np.concatenate((self.items, other.items)))
         items._verify_integrity()
 
-        return LongPanel(values, items, self.index)
+        return LongPanel(values, columns=items, index=self.index)
 
     def addPrefix(self, prefix=None):
         """
@@ -1566,7 +1562,8 @@ class LongPanel(Panel, Picklable):
         """
         new_items = [_prefix_item(item, prefix) for item in self.items]
 
-        return LongPanel(self.values, new_items, self.index)
+        return LongPanel(self.values, columns=new_items,
+                         index=self.index)
 
 
 def _prep_ndarray(values, copy=True):
@@ -1752,7 +1749,7 @@ def pivot(index, columns, values):
         longPanel = LongPanel(valueMat, ['foo'], longIndex)
         longPanel = longPanel.sort()
         return longPanel.to_wide()['foo']
-    except PanelError:
+    except Exception:
         return _slow_pivot(index, columns, values)
 
 def _make_long_index(major_values, minor_values):
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index 99b31e2c9..df6d1fa9f 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -10,8 +10,8 @@ import numpy as np
 
 from pandas.core.api import DataFrame, Index, notnull
 from pandas.core.datetools import bday
-from pandas.core.panel import (WidePanel, LongPanelIndex, LongPanel,
-                               group_agg, pivot)
+from pandas.core.index import LongPanelIndex
+from pandas.core.panel import (WidePanel, LongPanel, group_agg, pivot)
 import pandas.core.panel as panelmod
 
 from pandas.util.testing import (assert_panel_equal,
@@ -370,11 +370,6 @@ class TestWidePanel(unittest.TestCase, PanelTests,
         panel = self.panel.consolidate()
         self.assert_(panel._data.is_consolidated())
 
-    def test_values(self):
-        # nothing to test for the moment
-        values = self.panel.values
-        self.panel.values = values
-
     def test_from_dict(self):
         itema = self.panel['ItemA']
         itemb = self.panel['ItemB']
@@ -654,19 +649,10 @@ class TestLongPanelIndex(unittest.TestCase):
         major_labels = np.array([0, 0, 1, 2, 3, 3])
         minor_labels = np.array([0, 1, 0, 1, 0, 1])
 
-        self.index = LongPanelIndex(major_axis, minor_axis,
-                                    major_labels, minor_labels)
-
-        major_labels = np.array([0, 0, 1, 1, 1, 2, 2, 3, 3])
-        minor_labels = np.array([0, 1, 0, 1, 1, 0, 1, 0, 1])
-
-        self.incon = LongPanelIndex(major_axis, minor_axis,
-                                    major_labels, minor_labels)
+        self.index = LongPanelIndex(levels=[major_axis, minor_axis],
+                                    labels=[major_labels, minor_labels])
 
     def test_consistency(self):
-        self.assert_(self.index.consistent)
-        self.assert_(not self.incon.consistent)
-
         # need to construct an overflow
         major_axis = range(70000)
         minor_axis = range(10)
@@ -674,10 +660,18 @@ class TestLongPanelIndex(unittest.TestCase):
         major_labels = np.arange(70000)
         minor_labels = np.repeat(range(10), 7000)
 
-        index = LongPanelIndex(major_axis, minor_axis,
-                               major_labels, minor_labels)
+        # the fact that is works means it's consistent
+        index = LongPanelIndex(levels=[major_axis, minor_axis],
+                               labels=[major_labels, minor_labels])
+
+        # inconsistent
+        major_labels = np.array([0, 0, 1, 1, 1, 2, 2, 3, 3])
+        minor_labels = np.array([0, 1, 0, 1, 1, 0, 1, 0, 1])
+
+        self.assertRaises(Exception, LongPanelIndex,
+                          levels=[major_axis, minor_axis],
+                          labels=[major_labels, minor_labels])
 
-        self.assert_(index.consistent)
 
     def test_truncate(self):
         result = self.index.truncate(before=1)
@@ -793,9 +787,9 @@ class TestLongPanel(unittest.TestCase):
         self.assert_(np.array_equal(thecopy.values, self.panel.values))
         self.assert_(thecopy.values is not self.panel.values)
 
-    def test_values(self):
-        valslice = self.panel.values[:-1]
-        self.assertRaises(Exception, self.panel._set_values, valslice)
+    # def test_values(self):
+    #     valslice = self.panel.values[:-1]
+    #     self.assertRaises(Exception, self.panel._set_values, valslice)
 
     def test_getitem(self):
         col = self.panel['ItemA']
@@ -1015,9 +1009,7 @@ class TestLongPanel(unittest.TestCase):
         self.assertEqual(df['e'][5], 4)
 
         # weird overlap, TODO: test?
-        df = pivot(np.array([1, 2, 3, 4, 4]),
-                   np.array(['a', 'a', 'a', 'a', 'a']),
-                   np.array([1, 2, 3, 5, 4]))
+        df = pivot(np.array([1, 2, 3, 4, 4]), np.array(['a', 'a', 'a', 'a', 'a']), np.array([1, 2, 3, 5, 4]))
 
         # corner case, empty
         df = pivot(np.array([]), np.array([]), np.array([]))
