commit b0a19c8a9bdcf096fc857691a966af821ea626f5
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Dec 7 16:32:00 2012 -0500

    BUG: don't convert object->datetime64 when calling DataFrame.apply. close #2374

diff --git a/RELEASE.rst b/RELEASE.rst
index 5a9aeee98..e3a01caf7 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -138,6 +138,9 @@ pandas 0.10.0
   - Fixed issue with missing attributes after loading a pickled dataframe (#2431)
   - Fix Timestamp formatting with tzoffset time zone in dateutil 2.1 (#2443)
   - Fix GroupBy.apply issue when using BinGrouper to do ts binning (#2300)
+  - Fix issues resulting from datetime.datetime columns being converted to
+    datetime64 when calling DataFrame.apply. (#2374)
+
 
 pandas 0.9.1
 ============
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index bc9421c8a..cb7633e32 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1594,7 +1594,7 @@ class DataFrame(NDFrame):
     def dtypes(self):
         return self.apply(lambda x: x.dtype)
 
-    def convert_objects(self):
+    def convert_objects(self, convert_dates=True):
         """
         Attempt to infer better dtype for object columns
 
@@ -1603,7 +1603,8 @@ class DataFrame(NDFrame):
         converted : DataFrame
         """
         new_data = {}
-        convert_f = lambda x: lib.maybe_convert_objects(x, convert_datetime=1)
+        convert_f = lambda x: lib.maybe_convert_objects(
+            x, convert_datetime=convert_dates)
 
         # TODO: could be more efficient taking advantage of the block
         for col, s in self.iteritems():
@@ -4123,7 +4124,7 @@ class DataFrame(NDFrame):
 
             if axis == 1:
                 result = result.T
-            result = result.convert_objects()
+            result = result.convert_objects(convert_dates=False)
 
             return result
         else:
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 8c3c599cd..6b9a57b66 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -745,7 +745,7 @@ copy : boolean, default False
         casted = com._astype_nansafe(self.values, dtype)
         return self._constructor(casted, index=self.index, name=self.name)
 
-    def convert_objects(self):
+    def convert_objects(self, convert_dates=True):
         """
         Attempt to infer better dtype
 
@@ -754,8 +754,8 @@ copy : boolean, default False
         converted : Series
         """
         if self.dtype == np.object_:
-            return Series(lib.maybe_convert_objects(self, convert_datetime=1),
-                          self.index)
+            return Series(lib.maybe_convert_objects(
+                    self, convert_datetime=convert_dates), self.index)
         return self
 
     def repeat(self, reps):
diff --git a/pandas/sparse/frame.py b/pandas/sparse/frame.py
index 7ea13e9c3..a01290913 100644
--- a/pandas/sparse/frame.py
+++ b/pandas/sparse/frame.py
@@ -114,7 +114,7 @@ class SparseDataFrame(DataFrame):
         # do nothing when DataFrame calls this method
         pass
 
-    def convert_objects(self):
+    def convert_objects(self, convert_dates=True):
         # XXX
         return self
 
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 855eb47fe..68736631f 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -2055,6 +2055,14 @@ class TestLegacySupport(unittest.TestCase):
 
         self.assertTrue(isinstance(index.get_level_values(0)[0], Timestamp))
 
+    def test_frame_apply_dont_convert_datetime64(self):
+        from pandas.tseries.offsets import BDay
+        df = DataFrame({'x1': [datetime(1996,1,1)]})
+        df = df.applymap(lambda x: x+BDay())
+        df = df.applymap(lambda x: x+BDay())
+
+        self.assertTrue(df.x1.dtype == object)
+
 
 class TestLegacyCompat(unittest.TestCase):
 
