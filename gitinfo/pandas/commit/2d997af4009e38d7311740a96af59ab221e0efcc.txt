commit 2d997af4009e38d7311740a96af59ab221e0efcc
Author: Christopher Whelan <topherwhelan@gmail.com>
Date:   Fri Aug 21 00:03:46 2015 -0700

    PERF: Fix performance benchmark suite so it runs on Python 3

diff --git a/asv_bench/asv.conf.json b/asv_bench/asv.conf.json
index de8a84a7d..282365125 100644
--- a/asv_bench/asv.conf.json
+++ b/asv_bench/asv.conf.json
@@ -26,7 +26,7 @@
     // The Pythons you'd like to test against.  If not provided, defaults
     // to the current version of Python used to run `asv`.
     // "pythons": ["2.7", "3.4"],
-    "pythons": ["2.7"],
+    "pythons": ["2.7", "3.4"],
 
     // The matrix of dependencies to test.  Each key is the name of a
     // package (in PyPI) and the values are version numbers.  An empty
diff --git a/asv_bench/benchmarks/attrs_caching.py b/asv_bench/benchmarks/attrs_caching.py
index ecb91923d..2b10cb88a 100644
--- a/asv_bench/benchmarks/attrs_caching.py
+++ b/asv_bench/benchmarks/attrs_caching.py
@@ -1,4 +1,4 @@
-from pandas_vb_common import *
+from .pandas_vb_common import *
 
 
 class getattr_dataframe_index(object):
diff --git a/asv_bench/benchmarks/binary_ops.py b/asv_bench/benchmarks/binary_ops.py
index 13976014e..187101b1f 100644
--- a/asv_bench/benchmarks/binary_ops.py
+++ b/asv_bench/benchmarks/binary_ops.py
@@ -1,4 +1,4 @@
-from pandas_vb_common import *
+from .pandas_vb_common import *
 import pandas.computation.expressions as expr
 
 
diff --git a/asv_bench/benchmarks/categoricals.py b/asv_bench/benchmarks/categoricals.py
index 80b277336..a449639f1 100644
--- a/asv_bench/benchmarks/categoricals.py
+++ b/asv_bench/benchmarks/categoricals.py
@@ -1,4 +1,4 @@
-from pandas_vb_common import *
+from .pandas_vb_common import *
 
 
 class concat_categorical(object):
diff --git a/asv_bench/benchmarks/ctors.py b/asv_bench/benchmarks/ctors.py
index b48211b3d..265ffbc72 100644
--- a/asv_bench/benchmarks/ctors.py
+++ b/asv_bench/benchmarks/ctors.py
@@ -1,4 +1,4 @@
-from pandas_vb_common import *
+from .pandas_vb_common import *
 
 
 class frame_constructor_ndarray(object):
diff --git a/asv_bench/benchmarks/eval.py b/asv_bench/benchmarks/eval.py
index 397312355..719d92567 100644
--- a/asv_bench/benchmarks/eval.py
+++ b/asv_bench/benchmarks/eval.py
@@ -1,6 +1,6 @@
-from pandas_vb_common import *
-import pandas.computation.expressions as expr
+from .pandas_vb_common import *
 import pandas as pd
+import pandas.computation.expressions as expr
 
 
 class eval_frame_add_all_threads(object):
diff --git a/asv_bench/benchmarks/frame_ctor.py b/asv_bench/benchmarks/frame_ctor.py
index 4e10dfb39..85f3c1628 100644
--- a/asv_bench/benchmarks/frame_ctor.py
+++ b/asv_bench/benchmarks/frame_ctor.py
@@ -1,4 +1,4 @@
-from pandas_vb_common import *
+from .pandas_vb_common import *
 try:
     from pandas.tseries.offsets import *
 except:
@@ -1657,7 +1657,7 @@ class frame_ctor_nested_dict_int64(object):
     goal_time = 0.2
 
     def setup(self):
-        self.data = dict(((i, dict(((j, float(j)) for j in xrange(100)))) for i in xrange(2000)))
+        self.data = dict(((i, dict(((j, float(j)) for j in range(100)))) for i in xrange(2000)))
 
     def time_frame_ctor_nested_dict_int64(self):
         DataFrame(self.data)
diff --git a/asv_bench/benchmarks/frame_methods.py b/asv_bench/benchmarks/frame_methods.py
index 121f70759..98b0ec73f 100644
--- a/asv_bench/benchmarks/frame_methods.py
+++ b/asv_bench/benchmarks/frame_methods.py
@@ -1,4 +1,4 @@
-from pandas_vb_common import *
+from .pandas_vb_common import *
 
 
 class frame_apply_axis_1(object):
@@ -398,7 +398,7 @@ class frame_from_records_generator(object):
         self.df = DataFrame.from_records(self.get_data())
 
     def get_data(self, n=100000):
-        return ((x, (x * 20), (x * 100)) for x in xrange(n))
+        return ((x, (x * 20), (x * 100)) for x in range(n))
 
 
 class frame_from_records_generator_nrows(object):
@@ -408,7 +408,7 @@ class frame_from_records_generator_nrows(object):
         self.df = DataFrame.from_records(self.get_data(), nrows=1000)
 
     def get_data(self, n=100000):
-        return ((x, (x * 20), (x * 100)) for x in xrange(n))
+        return ((x, (x * 20), (x * 100)) for x in range(n))
 
 
 class frame_get_dtype_counts(object):
@@ -443,11 +443,11 @@ class frame_getitem_single_column(object):
             pass
 
     def h(self):
-        for i in xrange(10000):
+        for i in range(10000):
             self.df2['A']
 
     def j(self):
-        for i in xrange(10000):
+        for i in range(10000):
             self.df3[0]
 
 
@@ -473,11 +473,11 @@ class frame_getitem_single_column2(object):
             pass
 
     def h(self):
-        for i in xrange(10000):
+        for i in range(10000):
             self.df2['A']
 
     def j(self):
-        for i in xrange(10000):
+        for i in range(10000):
             self.df3[0]
 
 
@@ -607,11 +607,11 @@ class frame_iteritems(object):
             pass
 
     def h(self):
-        for i in xrange(10000):
+        for i in range(10000):
             self.df2['A']
 
     def j(self):
-        for i in xrange(10000):
+        for i in range(10000):
             self.df3[0]
 
 
@@ -637,11 +637,11 @@ class frame_iteritems_cached(object):
             pass
 
     def h(self):
-        for i in xrange(10000):
+        for i in range(10000):
             self.df2['A']
 
     def j(self):
-        for i in xrange(10000):
+        for i in range(10000):
             self.df3[0]
 
 
diff --git a/asv_bench/benchmarks/gil.py b/asv_bench/benchmarks/gil.py
index 2ed3c3cda..556dd2c36 100644
--- a/asv_bench/benchmarks/gil.py
+++ b/asv_bench/benchmarks/gil.py
@@ -1,4 +1,4 @@
-from pandas_vb_common import *
+from .pandas_vb_common import *
 from pandas.core import common as com
 try:
     from pandas.util.testing import test_parallel
diff --git a/asv_bench/benchmarks/groupby.py b/asv_bench/benchmarks/groupby.py
index 8751dbfa6..86f384659 100644
--- a/asv_bench/benchmarks/groupby.py
+++ b/asv_bench/benchmarks/groupby.py
@@ -1,6 +1,6 @@
-from pandas_vb_common import *
-from itertools import product
+from .pandas_vb_common import *
 from string import ascii_letters, digits
+from itertools import product
 
 
 class groupby_agg_builtins1(object):
@@ -1535,12 +1535,12 @@ class groupby_transform(object):
         self.secid_max = int('F0000000', 16)
         self.step = ((self.secid_max - self.secid_min) // (self.n_securities - 1))
         self.security_ids = map((lambda x: hex(x)[2:10].upper()), range(self.secid_min, (self.secid_max + 1), self.step))
-        self.data_index = MultiIndex(levels=[self.dates.values, self.security_ids], labels=[[i for i in xrange(self.n_dates) for _ in xrange(self.n_securities)], (range(self.n_securities) * self.n_dates)], names=['date', 'security_id'])
+        self.data_index = MultiIndex(levels=[self.dates.values, self.security_ids], labels=[[i for i in range(self.n_dates) for _ in xrange(self.n_securities)], (range(self.n_securities) * self.n_dates)], names=['date', 'security_id'])
         self.n_data = len(self.data_index)
-        self.columns = Index(['factor{}'.format(i) for i in xrange(1, (self.n_columns + 1))])
+        self.columns = Index(['factor{}'.format(i) for i in range(1, (self.n_columns + 1))])
         self.data = DataFrame(np.random.randn(self.n_data, self.n_columns), index=self.data_index, columns=self.columns)
         self.step = int((self.n_data * self.share_na))
-        for column_index in xrange(self.n_columns):
+        for column_index in range(self.n_columns):
             self.index = column_index
             while (self.index < self.n_data):
                 self.data.set_value(self.data_index[self.index], self.columns[column_index], np.nan)
@@ -1644,12 +1644,12 @@ class groupby_transform_ufunc(object):
         self.secid_max = int('F0000000', 16)
         self.step = ((self.secid_max - self.secid_min) // (self.n_securities - 1))
         self.security_ids = map((lambda x: hex(x)[2:10].upper()), range(self.secid_min, (self.secid_max + 1), self.step))
-        self.data_index = MultiIndex(levels=[self.dates.values, self.security_ids], labels=[[i for i in xrange(self.n_dates) for _ in xrange(self.n_securities)], (range(self.n_securities) * self.n_dates)], names=['date', 'security_id'])
+        self.data_index = MultiIndex(levels=[self.dates.values, self.security_ids], labels=[[i for i in range(self.n_dates) for _ in xrange(self.n_securities)], (range(self.n_securities) * self.n_dates)], names=['date', 'security_id'])
         self.n_data = len(self.data_index)
-        self.columns = Index(['factor{}'.format(i) for i in xrange(1, (self.n_columns + 1))])
+        self.columns = Index(['factor{}'.format(i) for i in range(1, (self.n_columns + 1))])
         self.data = DataFrame(np.random.randn(self.n_data, self.n_columns), index=self.data_index, columns=self.columns)
         self.step = int((self.n_data * self.share_na))
-        for column_index in xrange(self.n_columns):
+        for column_index in range(self.n_columns):
             self.index = column_index
             while (self.index < self.n_data):
                 self.data.set_value(self.data_index[self.index], self.columns[column_index], np.nan)
diff --git a/asv_bench/benchmarks/hdfstore_bench.py b/asv_bench/benchmarks/hdfstore_bench.py
index b0903123b..7638cc2a0 100644
--- a/asv_bench/benchmarks/hdfstore_bench.py
+++ b/asv_bench/benchmarks/hdfstore_bench.py
@@ -1,4 +1,4 @@
-from pandas_vb_common import *
+from .pandas_vb_common import *
 import os
 
 
@@ -152,7 +152,7 @@ class read_store_table_panel(object):
 
     def setup(self):
         self.f = '__test__.h5'
-        self.p = Panel(randn(20, 1000, 25), items=[('Item%03d' % i) for i in xrange(20)], major_axis=date_range('1/1/2000', periods=1000), minor_axis=[('E%03d' % i) for i in xrange(25)])
+        self.p = Panel(randn(20, 1000, 25), items=[('Item%03d' % i) for i in range(20)], major_axis=date_range('1/1/2000', periods=1000), minor_axis=[('E%03d' % i) for i in range(25)])
         self.remove(self.f)
         self.store = HDFStore(self.f)
         self.store.append('p1', self.p)
@@ -267,7 +267,7 @@ class write_store_table_dc(object):
 
     def setup(self):
         self.f = '__test__.h5'
-        self.df = DataFrame(np.random.randn(10000, 10), columns=[('C%03d' % i) for i in xrange(10)])
+        self.df = DataFrame(np.random.randn(10000, 10), columns=[('C%03d' % i) for i in range(10)])
         self.remove(self.f)
         self.store = HDFStore(self.f)
 
@@ -312,7 +312,7 @@ class write_store_table_panel(object):
 
     def setup(self):
         self.f = '__test__.h5'
-        self.p = Panel(randn(20, 1000, 25), items=[('Item%03d' % i) for i in xrange(20)], major_axis=date_range('1/1/2000', periods=1000), minor_axis=[('E%03d' % i) for i in xrange(25)])
+        self.p = Panel(randn(20, 1000, 25), items=[('Item%03d' % i) for i in range(20)], major_axis=date_range('1/1/2000', periods=1000), minor_axis=[('E%03d' % i) for i in range(25)])
         self.remove(self.f)
         self.store = HDFStore(self.f)
 
diff --git a/asv_bench/benchmarks/index_object.py b/asv_bench/benchmarks/index_object.py
index 9c181c921..8c65f0993 100644
--- a/asv_bench/benchmarks/index_object.py
+++ b/asv_bench/benchmarks/index_object.py
@@ -1,4 +1,4 @@
-from pandas_vb_common import *
+from .pandas_vb_common import *
 
 
 class datetime_index_intersection(object):
@@ -248,7 +248,7 @@ class multiindex_from_product(object):
     goal_time = 0.2
 
     def setup(self):
-        self.iterables = [tm.makeStringIndex(10000), xrange(20)]
+        self.iterables = [tm.makeStringIndex(10000), range(20)]
 
     def time_multiindex_from_product(self):
         MultiIndex.from_product(self.iterables)
diff --git a/asv_bench/benchmarks/inference.py b/asv_bench/benchmarks/inference.py
index 2addc810a..3fceed087 100644
--- a/asv_bench/benchmarks/inference.py
+++ b/asv_bench/benchmarks/inference.py
@@ -1,4 +1,4 @@
-from pandas_vb_common import *
+from .pandas_vb_common import *
 import pandas as pd
 
 
diff --git a/asv_bench/benchmarks/io_bench.py b/asv_bench/benchmarks/io_bench.py
index eec9c432b..a17164150 100644
--- a/asv_bench/benchmarks/io_bench.py
+++ b/asv_bench/benchmarks/io_bench.py
@@ -1,6 +1,9 @@
-from pandas_vb_common import *
+from .pandas_vb_common import *
 from pandas import concat, Timestamp
-from StringIO import StringIO
+try:
+    from StringIO import StringIO
+except ImportError:
+    from io import StringIO
 
 
 class frame_to_csv(object):
@@ -53,7 +56,7 @@ class frame_to_csv_mixed(object):
         self.df.to_csv('__test__.csv')
 
     def create_cols(self, name):
-        return [('%s%03d' % (name, i)) for i in xrange(5)]
+        return [('%s%03d' % (name, i)) for i in range(5)]
 
 
 class read_csv_infer_datetime_format_custom(object):
diff --git a/asv_bench/benchmarks/io_sql.py b/asv_bench/benchmarks/io_sql.py
index e75e691b6..9a6b21f9e 100644
--- a/asv_bench/benchmarks/io_sql.py
+++ b/asv_bench/benchmarks/io_sql.py
@@ -1,7 +1,7 @@
-from pandas_vb_common import *
-from sqlalchemy import create_engine
-import sqlite3
 import sqlalchemy
+from .pandas_vb_common import *
+import sqlite3
+from sqlalchemy import create_engine
 
 
 class sql_datetime_read_and_parse_sqlalchemy(object):
diff --git a/asv_bench/benchmarks/join_merge.py b/asv_bench/benchmarks/join_merge.py
index 224a3ee86..1da0d37d4 100644
--- a/asv_bench/benchmarks/join_merge.py
+++ b/asv_bench/benchmarks/join_merge.py
@@ -1,4 +1,4 @@
-from pandas_vb_common import *
+from .pandas_vb_common import *
 
 
 class append_frame_single_homogenous(object):
diff --git a/asv_bench/benchmarks/miscellaneous.py b/asv_bench/benchmarks/miscellaneous.py
index b9c02c85f..fe610ef4c 100644
--- a/asv_bench/benchmarks/miscellaneous.py
+++ b/asv_bench/benchmarks/miscellaneous.py
@@ -1,4 +1,4 @@
-from pandas_vb_common import *
+from .pandas_vb_common import *
 from pandas.util.decorators import cache_readonly
 
 
diff --git a/asv_bench/benchmarks/packers.py b/asv_bench/benchmarks/packers.py
index d73c4cf15..12e48295d 100644
--- a/asv_bench/benchmarks/packers.py
+++ b/asv_bench/benchmarks/packers.py
@@ -1,9 +1,9 @@
+from .pandas_vb_common import *
 from numpy.random import randint
 import pandas as pd
 from collections import OrderedDict
 from pandas.compat import BytesIO
 import sqlite3
-from pandas_vb_common import *
 import os
 from sqlalchemy import create_engine
 import numpy as np
diff --git a/asv_bench/benchmarks/pandas_vb_common.py b/asv_bench/benchmarks/pandas_vb_common.py
deleted file mode 120000
index 6e2e449a4..000000000
--- a/asv_bench/benchmarks/pandas_vb_common.py
+++ /dev/null
@@ -1 +0,0 @@
-../../vb_suite/pandas_vb_common.py
\ No newline at end of file
diff --git a/asv_bench/benchmarks/pandas_vb_common.py b/asv_bench/benchmarks/pandas_vb_common.py
new file mode 100644
index 000000000..a1326d63a
--- /dev/null
+++ b/asv_bench/benchmarks/pandas_vb_common.py
@@ -0,0 +1,30 @@
+from pandas import *
+import pandas as pd
+from datetime import timedelta
+from numpy.random import randn
+from numpy.random import randint
+from numpy.random import permutation
+import pandas.util.testing as tm
+import random
+import numpy as np
+try:
+    from pandas.compat import range
+except ImportError:
+    pass
+
+np.random.seed(1234)
+try:
+    import pandas._tseries as lib
+except:
+    import pandas.lib as lib
+
+try:
+    Panel = WidePanel
+except Exception:
+    pass
+
+# didn't add to namespace until later
+try:
+    from pandas.core.index import MultiIndex
+except ImportError:
+    pass
diff --git a/asv_bench/benchmarks/panel_ctor.py b/asv_bench/benchmarks/panel_ctor.py
index c755cb122..0b0e73847 100644
--- a/asv_bench/benchmarks/panel_ctor.py
+++ b/asv_bench/benchmarks/panel_ctor.py
@@ -1,4 +1,4 @@
-from pandas_vb_common import *
+from .pandas_vb_common import *
 
 
 class panel_from_dict_all_different_indexes(object):
@@ -8,7 +8,7 @@ class panel_from_dict_all_different_indexes(object):
         self.data_frames = {}
         self.start = datetime(1990, 1, 1)
         self.end = datetime(2012, 1, 1)
-        for x in xrange(100):
+        for x in range(100):
             self.end += timedelta(days=1)
             self.dr = np.asarray(date_range(self.start, self.end))
             self.df = DataFrame({'a': ([0] * len(self.dr)), 'b': ([1] * len(self.dr)), 'c': ([2] * len(self.dr)), }, index=self.dr)
@@ -23,7 +23,7 @@ class panel_from_dict_equiv_indexes(object):
 
     def setup(self):
         self.data_frames = {}
-        for x in xrange(100):
+        for x in range(100):
             self.dr = np.asarray(DatetimeIndex(start=datetime(1990, 1, 1), end=datetime(2012, 1, 1), freq=datetools.Day(1)))
             self.df = DataFrame({'a': ([0] * len(self.dr)), 'b': ([1] * len(self.dr)), 'c': ([2] * len(self.dr)), }, index=self.dr)
             self.data_frames[x] = self.df
@@ -38,7 +38,7 @@ class panel_from_dict_same_index(object):
     def setup(self):
         self.dr = np.asarray(DatetimeIndex(start=datetime(1990, 1, 1), end=datetime(2012, 1, 1), freq=datetools.Day(1)))
         self.data_frames = {}
-        for x in xrange(100):
+        for x in range(100):
             self.df = DataFrame({'a': ([0] * len(self.dr)), 'b': ([1] * len(self.dr)), 'c': ([2] * len(self.dr)), }, index=self.dr)
             self.data_frames[x] = self.df
 
@@ -53,7 +53,7 @@ class panel_from_dict_two_different_indexes(object):
         self.data_frames = {}
         self.start = datetime(1990, 1, 1)
         self.end = datetime(2012, 1, 1)
-        for x in xrange(100):
+        for x in range(100):
             if (x == 50):
                 self.end += timedelta(days=1)
             self.dr = np.asarray(date_range(self.start, self.end))
diff --git a/asv_bench/benchmarks/panel_methods.py b/asv_bench/benchmarks/panel_methods.py
index 4145b68dc..90118eaf6 100644
--- a/asv_bench/benchmarks/panel_methods.py
+++ b/asv_bench/benchmarks/panel_methods.py
@@ -1,4 +1,4 @@
-from pandas_vb_common import *
+from .pandas_vb_common import *
 
 
 class panel_pct_change_items(object):
diff --git a/asv_bench/benchmarks/parser_vb.py b/asv_bench/benchmarks/parser_vb.py
index 46167dc2b..18cd4de6c 100644
--- a/asv_bench/benchmarks/parser_vb.py
+++ b/asv_bench/benchmarks/parser_vb.py
@@ -1,7 +1,10 @@
-from cStringIO import StringIO
-from pandas_vb_common import *
+from .pandas_vb_common import *
 import os
 from pandas import read_csv, read_table
+try:
+    from cStringIO import StringIO
+except ImportError:
+    from io import StringIO
 
 
 class read_csv_comment2(object):
diff --git a/asv_bench/benchmarks/plotting.py b/asv_bench/benchmarks/plotting.py
index d1df1b429..f46082ac6 100644
--- a/asv_bench/benchmarks/plotting.py
+++ b/asv_bench/benchmarks/plotting.py
@@ -1,4 +1,4 @@
-from pandas_vb_common import *
+from .pandas_vb_common import *
 try:
     from pandas import date_range
 except ImportError:
diff --git a/asv_bench/benchmarks/reindex.py b/asv_bench/benchmarks/reindex.py
index 5586f9213..b1c039058 100644
--- a/asv_bench/benchmarks/reindex.py
+++ b/asv_bench/benchmarks/reindex.py
@@ -1,4 +1,4 @@
-from pandas_vb_common import *
+from .pandas_vb_common import *
 from random import shuffle
 
 
diff --git a/asv_bench/benchmarks/replace.py b/asv_bench/benchmarks/replace.py
index 9b78c287c..e9f33ebfc 100644
--- a/asv_bench/benchmarks/replace.py
+++ b/asv_bench/benchmarks/replace.py
@@ -1,4 +1,4 @@
-from pandas_vb_common import *
+from .pandas_vb_common import *
 from pandas.compat import range
 from datetime import timedelta
 
diff --git a/asv_bench/benchmarks/reshape.py b/asv_bench/benchmarks/reshape.py
index 61bfd36f8..604fa5092 100644
--- a/asv_bench/benchmarks/reshape.py
+++ b/asv_bench/benchmarks/reshape.py
@@ -1,4 +1,4 @@
-from pandas_vb_common import *
+from .pandas_vb_common import *
 from pandas.core.reshape import melt
 
 
diff --git a/asv_bench/benchmarks/series_methods.py b/asv_bench/benchmarks/series_methods.py
index 9cd61c741..d2167a8b6 100644
--- a/asv_bench/benchmarks/series_methods.py
+++ b/asv_bench/benchmarks/series_methods.py
@@ -1,4 +1,4 @@
-from pandas_vb_common import *
+from .pandas_vb_common import *
 
 
 class series_isin_int64(object):
diff --git a/asv_bench/benchmarks/sparse.py b/asv_bench/benchmarks/sparse.py
index dbf35f5e4..d7ee58fc9 100644
--- a/asv_bench/benchmarks/sparse.py
+++ b/asv_bench/benchmarks/sparse.py
@@ -1,6 +1,6 @@
-from pandas_vb_common import *
-import scipy.sparse
+from .pandas_vb_common import *
 import pandas.sparse.series
+import scipy.sparse
 from pandas.core.sparse import SparseSeries, SparseDataFrame
 from pandas.core.sparse import SparseDataFrame
 
diff --git a/asv_bench/benchmarks/stat_ops.py b/asv_bench/benchmarks/stat_ops.py
index 98e2bbfce..412535745 100644
--- a/asv_bench/benchmarks/stat_ops.py
+++ b/asv_bench/benchmarks/stat_ops.py
@@ -1,4 +1,4 @@
-from pandas_vb_common import *
+from .pandas_vb_common import *
 
 
 class stat_ops_frame_mean_float_axis_0(object):
diff --git a/asv_bench/benchmarks/strings.py b/asv_bench/benchmarks/strings.py
index ea747c2ca..e4f91b1b9 100644
--- a/asv_bench/benchmarks/strings.py
+++ b/asv_bench/benchmarks/strings.py
@@ -1,4 +1,4 @@
-from pandas_vb_common import *
+from .pandas_vb_common import *
 import string
 import itertools as IT
 import pandas.util.testing as testing
@@ -8,98 +8,98 @@ class strings_cat(object):
     goal_time = 0.2
 
     def setup(self):
-        self.many = self.make_series(('matchthis' + string.uppercase), strlen=19, size=10000)
-        self.few = self.make_series(('matchthis' + (string.uppercase * 42)), strlen=19, size=10000)
+        self.many = self.make_series(('matchthis' + string.ascii_uppercase), strlen=19, size=10000)
+        self.few = self.make_series(('matchthis' + (string.ascii_uppercase * 42)), strlen=19, size=10000)
 
     def time_strings_cat(self):
         self.many.str.cat(sep=',')
 
     def make_series(self, letters, strlen, size):
-        return Series(np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen)))
+        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
 
 
 class strings_center(object):
     goal_time = 0.2
 
     def setup(self):
-        self.many = self.make_series(('matchthis' + string.uppercase), strlen=19, size=10000)
-        self.few = self.make_series(('matchthis' + (string.uppercase * 42)), strlen=19, size=10000)
+        self.many = self.make_series(('matchthis' + string.ascii_uppercase), strlen=19, size=10000)
+        self.few = self.make_series(('matchthis' + (string.ascii_uppercase * 42)), strlen=19, size=10000)
 
     def time_strings_center(self):
         self.many.str.center(100)
 
     def make_series(self, letters, strlen, size):
-        return Series(np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen)))
+        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
 
 
 class strings_contains_few(object):
     goal_time = 0.2
 
     def setup(self):
-        self.many = self.make_series(('matchthis' + string.uppercase), strlen=19, size=10000)
-        self.few = self.make_series(('matchthis' + (string.uppercase * 42)), strlen=19, size=10000)
+        self.many = self.make_series(('matchthis' + string.ascii_uppercase), strlen=19, size=10000)
+        self.few = self.make_series(('matchthis' + (string.ascii_uppercase * 42)), strlen=19, size=10000)
 
     def time_strings_contains_few(self):
         self.few.str.contains('matchthis')
 
     def make_series(self, letters, strlen, size):
-        return Series(np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen)))
+        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
 
 
 class strings_contains_few_noregex(object):
     goal_time = 0.2
 
     def setup(self):
-        self.many = self.make_series(('matchthis' + string.uppercase), strlen=19, size=10000)
-        self.few = self.make_series(('matchthis' + (string.uppercase * 42)), strlen=19, size=10000)
+        self.many = self.make_series(('matchthis' + string.ascii_uppercase), strlen=19, size=10000)
+        self.few = self.make_series(('matchthis' + (string.ascii_uppercase * 42)), strlen=19, size=10000)
 
     def time_strings_contains_few_noregex(self):
         self.few.str.contains('matchthis', regex=False)
 
     def make_series(self, letters, strlen, size):
-        return Series(np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen)))
+        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
 
 
 class strings_contains_many(object):
     goal_time = 0.2
 
     def setup(self):
-        self.many = self.make_series(('matchthis' + string.uppercase), strlen=19, size=10000)
-        self.few = self.make_series(('matchthis' + (string.uppercase * 42)), strlen=19, size=10000)
+        self.many = self.make_series(('matchthis' + string.ascii_uppercase), strlen=19, size=10000)
+        self.few = self.make_series(('matchthis' + (string.ascii_uppercase * 42)), strlen=19, size=10000)
 
     def time_strings_contains_many(self):
         self.many.str.contains('matchthis')
 
     def make_series(self, letters, strlen, size):
-        return Series(np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen)))
+        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
 
 
 class strings_contains_many_noregex(object):
     goal_time = 0.2
 
     def setup(self):
-        self.many = self.make_series(('matchthis' + string.uppercase), strlen=19, size=10000)
-        self.few = self.make_series(('matchthis' + (string.uppercase * 42)), strlen=19, size=10000)
+        self.many = self.make_series(('matchthis' + string.ascii_uppercase), strlen=19, size=10000)
+        self.few = self.make_series(('matchthis' + (string.ascii_uppercase * 42)), strlen=19, size=10000)
 
     def time_strings_contains_many_noregex(self):
         self.many.str.contains('matchthis', regex=False)
 
     def make_series(self, letters, strlen, size):
-        return Series(np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen)))
+        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
 
 
 class strings_count(object):
     goal_time = 0.2
 
     def setup(self):
-        self.many = self.make_series(('matchthis' + string.uppercase), strlen=19, size=10000)
-        self.few = self.make_series(('matchthis' + (string.uppercase * 42)), strlen=19, size=10000)
+        self.many = self.make_series(('matchthis' + string.ascii_uppercase), strlen=19, size=10000)
+        self.few = self.make_series(('matchthis' + (string.ascii_uppercase * 42)), strlen=19, size=10000)
 
     def time_strings_count(self):
         self.many.str.count('matchthis')
 
     def make_series(self, letters, strlen, size):
-        return Series(np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen)))
+        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
 
 
 class strings_encode_decode(object):
@@ -116,278 +116,278 @@ class strings_endswith(object):
     goal_time = 0.2
 
     def setup(self):
-        self.many = self.make_series(('matchthis' + string.uppercase), strlen=19, size=10000)
-        self.few = self.make_series(('matchthis' + (string.uppercase * 42)), strlen=19, size=10000)
+        self.many = self.make_series(('matchthis' + string.ascii_uppercase), strlen=19, size=10000)
+        self.few = self.make_series(('matchthis' + (string.ascii_uppercase * 42)), strlen=19, size=10000)
 
     def time_strings_endswith(self):
         self.many.str.endswith('matchthis')
 
     def make_series(self, letters, strlen, size):
-        return Series(np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen)))
+        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
 
 
 class strings_extract(object):
     goal_time = 0.2
 
     def setup(self):
-        self.many = self.make_series(('matchthis' + string.uppercase), strlen=19, size=10000)
-        self.few = self.make_series(('matchthis' + (string.uppercase * 42)), strlen=19, size=10000)
+        self.many = self.make_series(('matchthis' + string.ascii_uppercase), strlen=19, size=10000)
+        self.few = self.make_series(('matchthis' + (string.ascii_uppercase * 42)), strlen=19, size=10000)
 
     def time_strings_extract(self):
         self.many.str.extract('(\\w*)matchthis(\\w*)')
 
     def make_series(self, letters, strlen, size):
-        return Series(np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen)))
+        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
 
 
 class strings_findall(object):
     goal_time = 0.2
 
     def setup(self):
-        self.many = self.make_series(('matchthis' + string.uppercase), strlen=19, size=10000)
-        self.few = self.make_series(('matchthis' + (string.uppercase * 42)), strlen=19, size=10000)
+        self.many = self.make_series(('matchthis' + string.ascii_uppercase), strlen=19, size=10000)
+        self.few = self.make_series(('matchthis' + (string.ascii_uppercase * 42)), strlen=19, size=10000)
 
     def time_strings_findall(self):
         self.many.str.findall('[A-Z]+')
 
     def make_series(self, letters, strlen, size):
-        return Series(np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen)))
+        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
 
 
 class strings_get(object):
     goal_time = 0.2
 
     def setup(self):
-        self.many = self.make_series(('matchthis' + string.uppercase), strlen=19, size=10000)
-        self.few = self.make_series(('matchthis' + (string.uppercase * 42)), strlen=19, size=10000)
+        self.many = self.make_series(('matchthis' + string.ascii_uppercase), strlen=19, size=10000)
+        self.few = self.make_series(('matchthis' + (string.ascii_uppercase * 42)), strlen=19, size=10000)
 
     def time_strings_get(self):
         self.many.str.get(0)
 
     def make_series(self, letters, strlen, size):
-        return Series(np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen)))
+        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
 
 
 class strings_get_dummies(object):
     goal_time = 0.2
 
     def setup(self):
-        self.many = self.make_series(('matchthis' + string.uppercase), strlen=19, size=10000)
-        self.few = self.make_series(('matchthis' + (string.uppercase * 42)), strlen=19, size=10000)
-        self.s = self.make_series(string.uppercase, strlen=10, size=10000).str.join('|')
+        self.many = self.make_series(('matchthis' + string.ascii_uppercase), strlen=19, size=10000)
+        self.few = self.make_series(('matchthis' + (string.ascii_uppercase * 42)), strlen=19, size=10000)
+        self.s = self.make_series(string.ascii_uppercase, strlen=10, size=10000).str.join('|')
 
     def time_strings_get_dummies(self):
         self.s.str.get_dummies('|')
 
     def make_series(self, letters, strlen, size):
-        return Series(np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen)))
+        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
 
 
 class strings_join_split(object):
     goal_time = 0.2
 
     def setup(self):
-        self.many = self.make_series(('matchthis' + string.uppercase), strlen=19, size=10000)
-        self.few = self.make_series(('matchthis' + (string.uppercase * 42)), strlen=19, size=10000)
+        self.many = self.make_series(('matchthis' + string.ascii_uppercase), strlen=19, size=10000)
+        self.few = self.make_series(('matchthis' + (string.ascii_uppercase * 42)), strlen=19, size=10000)
 
     def time_strings_join_split(self):
         self.many.str.join('--').str.split('--')
 
     def make_series(self, letters, strlen, size):
-        return Series(np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen)))
+        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
 
 
 class strings_join_split_expand(object):
     goal_time = 0.2
 
     def setup(self):
-        self.many = self.make_series(('matchthis' + string.uppercase), strlen=19, size=10000)
-        self.few = self.make_series(('matchthis' + (string.uppercase * 42)), strlen=19, size=10000)
+        self.many = self.make_series(('matchthis' + string.ascii_uppercase), strlen=19, size=10000)
+        self.few = self.make_series(('matchthis' + (string.ascii_uppercase * 42)), strlen=19, size=10000)
 
     def time_strings_join_split_expand(self):
         self.many.str.join('--').str.split('--', expand=True)
 
     def make_series(self, letters, strlen, size):
-        return Series(np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen)))
+        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
 
 
 class strings_len(object):
     goal_time = 0.2
 
     def setup(self):
-        self.many = self.make_series(('matchthis' + string.uppercase), strlen=19, size=10000)
-        self.few = self.make_series(('matchthis' + (string.uppercase * 42)), strlen=19, size=10000)
+        self.many = self.make_series(('matchthis' + string.ascii_uppercase), strlen=19, size=10000)
+        self.few = self.make_series(('matchthis' + (string.ascii_uppercase * 42)), strlen=19, size=10000)
 
     def time_strings_len(self):
         self.many.str.len()
 
     def make_series(self, letters, strlen, size):
-        return Series(np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen)))
+        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
 
 
 class strings_lower(object):
     goal_time = 0.2
 
     def setup(self):
-        self.many = self.make_series(('matchthis' + string.uppercase), strlen=19, size=10000)
-        self.few = self.make_series(('matchthis' + (string.uppercase * 42)), strlen=19, size=10000)
+        self.many = self.make_series(('matchthis' + string.ascii_uppercase), strlen=19, size=10000)
+        self.few = self.make_series(('matchthis' + (string.ascii_uppercase * 42)), strlen=19, size=10000)
 
     def time_strings_lower(self):
         self.many.str.lower()
 
     def make_series(self, letters, strlen, size):
-        return Series(np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen)))
+        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
 
 
 class strings_lstrip(object):
     goal_time = 0.2
 
     def setup(self):
-        self.many = self.make_series(('matchthis' + string.uppercase), strlen=19, size=10000)
-        self.few = self.make_series(('matchthis' + (string.uppercase * 42)), strlen=19, size=10000)
+        self.many = self.make_series(('matchthis' + string.ascii_uppercase), strlen=19, size=10000)
+        self.few = self.make_series(('matchthis' + (string.ascii_uppercase * 42)), strlen=19, size=10000)
 
     def time_strings_lstrip(self):
         self.many.str.lstrip('matchthis')
 
     def make_series(self, letters, strlen, size):
-        return Series(np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen)))
+        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
 
 
 class strings_match(object):
     goal_time = 0.2
 
     def setup(self):
-        self.many = self.make_series(('matchthis' + string.uppercase), strlen=19, size=10000)
-        self.few = self.make_series(('matchthis' + (string.uppercase * 42)), strlen=19, size=10000)
+        self.many = self.make_series(('matchthis' + string.ascii_uppercase), strlen=19, size=10000)
+        self.few = self.make_series(('matchthis' + (string.ascii_uppercase * 42)), strlen=19, size=10000)
 
     def time_strings_match(self):
         self.many.str.match('mat..this')
 
     def make_series(self, letters, strlen, size):
-        return Series(np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen)))
+        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
 
 
 class strings_pad(object):
     goal_time = 0.2
 
     def setup(self):
-        self.many = self.make_series(('matchthis' + string.uppercase), strlen=19, size=10000)
-        self.few = self.make_series(('matchthis' + (string.uppercase * 42)), strlen=19, size=10000)
+        self.many = self.make_series(('matchthis' + string.ascii_uppercase), strlen=19, size=10000)
+        self.few = self.make_series(('matchthis' + (string.ascii_uppercase * 42)), strlen=19, size=10000)
 
     def time_strings_pad(self):
         self.many.str.pad(100, side='both')
 
     def make_series(self, letters, strlen, size):
-        return Series(np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen)))
+        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
 
 
 class strings_repeat(object):
     goal_time = 0.2
 
     def setup(self):
-        self.many = self.make_series(('matchthis' + string.uppercase), strlen=19, size=10000)
-        self.few = self.make_series(('matchthis' + (string.uppercase * 42)), strlen=19, size=10000)
+        self.many = self.make_series(('matchthis' + string.ascii_uppercase), strlen=19, size=10000)
+        self.few = self.make_series(('matchthis' + (string.ascii_uppercase * 42)), strlen=19, size=10000)
 
     def time_strings_repeat(self):
         self.many.str.repeat(list(IT.islice(IT.cycle(range(1, 4)), len(self.many))))
 
     def make_series(self, letters, strlen, size):
-        return Series(np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen)))
+        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
 
 
 class strings_replace(object):
     goal_time = 0.2
 
     def setup(self):
-        self.many = self.make_series(('matchthis' + string.uppercase), strlen=19, size=10000)
-        self.few = self.make_series(('matchthis' + (string.uppercase * 42)), strlen=19, size=10000)
+        self.many = self.make_series(('matchthis' + string.ascii_uppercase), strlen=19, size=10000)
+        self.few = self.make_series(('matchthis' + (string.ascii_uppercase * 42)), strlen=19, size=10000)
 
     def time_strings_replace(self):
         self.many.str.replace('(matchthis)', '\x01\x01')
 
     def make_series(self, letters, strlen, size):
-        return Series(np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen)))
+        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
 
 
 class strings_rstrip(object):
     goal_time = 0.2
 
     def setup(self):
-        self.many = self.make_series(('matchthis' + string.uppercase), strlen=19, size=10000)
-        self.few = self.make_series(('matchthis' + (string.uppercase * 42)), strlen=19, size=10000)
+        self.many = self.make_series(('matchthis' + string.ascii_uppercase), strlen=19, size=10000)
+        self.few = self.make_series(('matchthis' + (string.ascii_uppercase * 42)), strlen=19, size=10000)
 
     def time_strings_rstrip(self):
         self.many.str.rstrip('matchthis')
 
     def make_series(self, letters, strlen, size):
-        return Series(np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen)))
+        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
 
 
 class strings_slice(object):
     goal_time = 0.2
 
     def setup(self):
-        self.many = self.make_series(('matchthis' + string.uppercase), strlen=19, size=10000)
-        self.few = self.make_series(('matchthis' + (string.uppercase * 42)), strlen=19, size=10000)
+        self.many = self.make_series(('matchthis' + string.ascii_uppercase), strlen=19, size=10000)
+        self.few = self.make_series(('matchthis' + (string.ascii_uppercase * 42)), strlen=19, size=10000)
 
     def time_strings_slice(self):
         self.many.str.slice(5, 15, 2)
 
     def make_series(self, letters, strlen, size):
-        return Series(np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen)))
+        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
 
 
 class strings_startswith(object):
     goal_time = 0.2
 
     def setup(self):
-        self.many = self.make_series(('matchthis' + string.uppercase), strlen=19, size=10000)
-        self.few = self.make_series(('matchthis' + (string.uppercase * 42)), strlen=19, size=10000)
+        self.many = self.make_series(('matchthis' + string.ascii_uppercase), strlen=19, size=10000)
+        self.few = self.make_series(('matchthis' + (string.ascii_uppercase * 42)), strlen=19, size=10000)
 
     def time_strings_startswith(self):
         self.many.str.startswith('matchthis')
 
     def make_series(self, letters, strlen, size):
-        return Series(np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen)))
+        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
 
 
 class strings_strip(object):
     goal_time = 0.2
 
     def setup(self):
-        self.many = self.make_series(('matchthis' + string.uppercase), strlen=19, size=10000)
-        self.few = self.make_series(('matchthis' + (string.uppercase * 42)), strlen=19, size=10000)
+        self.many = self.make_series(('matchthis' + string.ascii_uppercase), strlen=19, size=10000)
+        self.few = self.make_series(('matchthis' + (string.ascii_uppercase * 42)), strlen=19, size=10000)
 
     def time_strings_strip(self):
         self.many.str.strip('matchthis')
 
     def make_series(self, letters, strlen, size):
-        return Series(np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen)))
+        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
 
 
 class strings_title(object):
     goal_time = 0.2
 
     def setup(self):
-        self.many = self.make_series(('matchthis' + string.uppercase), strlen=19, size=10000)
-        self.few = self.make_series(('matchthis' + (string.uppercase * 42)), strlen=19, size=10000)
+        self.many = self.make_series(('matchthis' + string.ascii_uppercase), strlen=19, size=10000)
+        self.few = self.make_series(('matchthis' + (string.ascii_uppercase * 42)), strlen=19, size=10000)
 
     def time_strings_title(self):
         self.many.str.title()
 
     def make_series(self, letters, strlen, size):
-        return Series(np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen)))
+        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
 
 
 class strings_upper(object):
     goal_time = 0.2
 
     def setup(self):
-        self.many = self.make_series(('matchthis' + string.uppercase), strlen=19, size=10000)
-        self.few = self.make_series(('matchthis' + (string.uppercase * 42)), strlen=19, size=10000)
+        self.many = self.make_series(('matchthis' + string.ascii_uppercase), strlen=19, size=10000)
+        self.few = self.make_series(('matchthis' + (string.ascii_uppercase * 42)), strlen=19, size=10000)
 
     def time_strings_upper(self):
         self.many.str.upper()
 
     def make_series(self, letters, strlen, size):
-        return Series(np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen)))
\ No newline at end of file
+        return Series([str(x) for x in np.fromiter(IT.cycle(letters), count=(size * strlen), dtype='|S1').view('|S{}'.format(strlen))])
\ No newline at end of file
diff --git a/asv_bench/benchmarks/timedelta.py b/asv_bench/benchmarks/timedelta.py
index 36a0f98e3..2f252a4d3 100644
--- a/asv_bench/benchmarks/timedelta.py
+++ b/asv_bench/benchmarks/timedelta.py
@@ -1,4 +1,4 @@
-from pandas_vb_common import *
+from .pandas_vb_common import *
 from pandas import to_timedelta
 
 
diff --git a/asv_bench/benchmarks/timeseries.py b/asv_bench/benchmarks/timeseries.py
index 46aa2162b..db0c526f2 100644
--- a/asv_bench/benchmarks/timeseries.py
+++ b/asv_bench/benchmarks/timeseries.py
@@ -1,8 +1,8 @@
 from pandas.tseries.converter import DatetimeConverter
+from .pandas_vb_common import *
 import pandas as pd
 from datetime import timedelta
 import datetime as dt
-from pandas_vb_common import *
 try:
     import pandas.tseries.holiday
 except ImportError:
diff --git a/vb_suite/attrs_caching.py b/vb_suite/attrs_caching.py
index e196546e6..a7e3ed709 100644
--- a/vb_suite/attrs_caching.py
+++ b/vb_suite/attrs_caching.py
@@ -1,6 +1,6 @@
 from vbench.benchmark import Benchmark
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 """
 
 #----------------------------------------------------------------------
diff --git a/vb_suite/binary_ops.py b/vb_suite/binary_ops.py
index cd8d1ad93..4c74688ce 100644
--- a/vb_suite/binary_ops.py
+++ b/vb_suite/binary_ops.py
@@ -1,7 +1,7 @@
 from vbench.benchmark import Benchmark
 from datetime import datetime
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 """
 
 SECTION = 'Binary ops'
diff --git a/vb_suite/categoricals.py b/vb_suite/categoricals.py
index cb33f1bb6..a08d479df 100644
--- a/vb_suite/categoricals.py
+++ b/vb_suite/categoricals.py
@@ -1,7 +1,7 @@
 from vbench.benchmark import Benchmark
 from datetime import datetime
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 """
 
 #----------------------------------------------------------------------
diff --git a/vb_suite/ctors.py b/vb_suite/ctors.py
index 6af8e65b8..812332238 100644
--- a/vb_suite/ctors.py
+++ b/vb_suite/ctors.py
@@ -1,7 +1,7 @@
 from vbench.benchmark import Benchmark
 from datetime import datetime
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 """
 
 #----------------------------------------------------------------------
diff --git a/vb_suite/eval.py b/vb_suite/eval.py
index a350cdc54..bf80aad95 100644
--- a/vb_suite/eval.py
+++ b/vb_suite/eval.py
@@ -1,7 +1,7 @@
 from vbench.benchmark import Benchmark
 from datetime import datetime
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 import pandas as pd
 df  = DataFrame(np.random.randn(20000, 100))
 df2 = DataFrame(np.random.randn(20000, 100))
@@ -112,7 +112,7 @@ eval_frame_chained_cmp_one_thread = \
               start_date=datetime(2013, 7, 26))
 
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 """
 
 setup = common_setup + """
diff --git a/vb_suite/frame_ctor.py b/vb_suite/frame_ctor.py
index 8ad63fc55..0d57da7b8 100644
--- a/vb_suite/frame_ctor.py
+++ b/vb_suite/frame_ctor.py
@@ -5,7 +5,7 @@ try:
 except:
     import pandas.core.datetools as offsets
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 try:
     from pandas.tseries.offsets import *
 except:
@@ -40,7 +40,7 @@ series_ctor_from_dict = Benchmark("Series(some_dict)", setup)
 
 # nested dict, integer indexes, regression described in #621
 setup = common_setup + """
-data = dict((i,dict((j,float(j)) for j in xrange(100))) for i in xrange(2000))
+data = dict((i,dict((j,float(j)) for j in range(100))) for i in xrange(2000))
 """
 frame_ctor_nested_dict_int64 = Benchmark("DataFrame(data)", setup)
 
diff --git a/vb_suite/frame_methods.py b/vb_suite/frame_methods.py
index a10b4d9ad..46343e9c6 100644
--- a/vb_suite/frame_methods.py
+++ b/vb_suite/frame_methods.py
@@ -1,7 +1,7 @@
 from vbench.api import Benchmark
 from datetime import datetime
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 """
 
 #----------------------------------------------------------------------
@@ -98,11 +98,11 @@ def g():
         pass
 
 def h():
-    for i in xrange(10000):
+    for i in range(10000):
         df2['A']
 
 def j():
-    for i in xrange(10000):
+    for i in range(10000):
         df3[0]
 
 """
@@ -494,7 +494,7 @@ frame_shift_axis1 = Benchmark('df.shift(1,axis=1)', setup,
 
 setup = common_setup + """
 def get_data(n=100000):
-    return ((x, x*20, x*100) for x in xrange(n))
+    return ((x, x*20, x*100) for x in range(n))
 """
 
 frame_from_records_generator = Benchmark('df = DataFrame.from_records(get_data())',
diff --git a/vb_suite/gil.py b/vb_suite/gil.py
index 498daed3d..df2bd2dcd 100644
--- a/vb_suite/gil.py
+++ b/vb_suite/gil.py
@@ -1,7 +1,7 @@
 from vbench.api import Benchmark
 from datetime import datetime
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 """
 
 basic = common_setup + """
diff --git a/vb_suite/groupby.py b/vb_suite/groupby.py
index 1a6404b6a..bc2137222 100644
--- a/vb_suite/groupby.py
+++ b/vb_suite/groupby.py
@@ -1,7 +1,7 @@
 from vbench.api import Benchmark
 from datetime import datetime
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 """
 
 setup = common_setup + """
@@ -429,16 +429,16 @@ step = (secid_max - secid_min) // (n_securities - 1)
 security_ids = map(lambda x: hex(x)[2:10].upper(), range(secid_min, secid_max + 1, step))
 
 data_index = MultiIndex(levels=[dates.values, security_ids],
-    labels=[[i for i in xrange(n_dates) for _ in xrange(n_securities)], range(n_securities) * n_dates],
+    labels=[[i for i in range(n_dates) for _ in xrange(n_securities)], range(n_securities) * n_dates],
     names=['date', 'security_id'])
 n_data = len(data_index)
 
-columns = Index(['factor{}'.format(i) for i in xrange(1, n_columns + 1)])
+columns = Index(['factor{}'.format(i) for i in range(1, n_columns + 1)])
 
 data = DataFrame(np.random.randn(n_data, n_columns), index=data_index, columns=columns)
 
 step = int(n_data * share_na)
-for column_index in xrange(n_columns):
+for column_index in range(n_columns):
     index = column_index
     while index < n_data:
         data.set_value(data_index[index], columns[column_index], np.nan)
diff --git a/vb_suite/hdfstore_bench.py b/vb_suite/hdfstore_bench.py
index a822ad1c6..393fd4cc7 100644
--- a/vb_suite/hdfstore_bench.py
+++ b/vb_suite/hdfstore_bench.py
@@ -3,7 +3,7 @@ from datetime import datetime
 
 start_date = datetime(2012, 7, 1)
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 import os
 
 f = '__test__.h5'
@@ -234,8 +234,8 @@ query_store_table = Benchmark(
 # select from a panel table
 
 setup13 = common_setup + """
-p = Panel(randn(20, 1000, 25), items= [ 'Item%03d' % i for i in xrange(20) ],
-                   major_axis=date_range('1/1/2000', periods=1000), minor_axis = [ 'E%03d' % i for i in xrange(25) ])
+p = Panel(randn(20, 1000, 25), items= [ 'Item%03d' % i for i in range(20) ],
+                   major_axis=date_range('1/1/2000', periods=1000), minor_axis = [ 'E%03d' % i for i in range(25) ])
 
 remove(f)
 store = HDFStore(f)
@@ -251,8 +251,8 @@ read_store_table_panel = Benchmark(
 # write to a panel table
 
 setup14 = common_setup + """
-p = Panel(randn(20, 1000, 25), items= [ 'Item%03d' % i for i in xrange(20) ],
-                   major_axis=date_range('1/1/2000', periods=1000), minor_axis = [ 'E%03d' % i for i in xrange(25) ])
+p = Panel(randn(20, 1000, 25), items= [ 'Item%03d' % i for i in range(20) ],
+                   major_axis=date_range('1/1/2000', periods=1000), minor_axis = [ 'E%03d' % i for i in range(25) ])
 
 remove(f)
 store = HDFStore(f)
@@ -266,7 +266,7 @@ write_store_table_panel = Benchmark(
 # write to a table (data_columns)
 
 setup15 = common_setup + """
-df = DataFrame(np.random.randn(10000,10),columns = [ 'C%03d' % i for i in xrange(10) ])
+df = DataFrame(np.random.randn(10000,10),columns = [ 'C%03d' % i for i in range(10) ])
 
 remove(f)
 store = HDFStore(f)
diff --git a/vb_suite/index_object.py b/vb_suite/index_object.py
index 768eb2658..2ab2bc15f 100644
--- a/vb_suite/index_object.py
+++ b/vb_suite/index_object.py
@@ -4,7 +4,7 @@ from datetime import datetime
 SECTION = "Index / MultiIndex objects"
 
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 """
 
 #----------------------------------------------------------------------
@@ -111,7 +111,7 @@ index_float64_div = Benchmark('idx / 2', setup, name='index_float64_div',
 #
 
 setup = common_setup + """
-iterables = [tm.makeStringIndex(10000), xrange(20)]
+iterables = [tm.makeStringIndex(10000), range(20)]
 """
 
 multiindex_from_product = Benchmark('MultiIndex.from_product(iterables)',
diff --git a/vb_suite/indexing.py b/vb_suite/indexing.py
index ba8300aa9..3d95d52dc 100644
--- a/vb_suite/indexing.py
+++ b/vb_suite/indexing.py
@@ -3,7 +3,7 @@ from datetime import datetime
 
 SECTION = 'Indexing and scalar value access'
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 """
 
 #----------------------------------------------------------------------
diff --git a/vb_suite/inference.py b/vb_suite/inference.py
index 8855f7e65..aaa51aa51 100644
--- a/vb_suite/inference.py
+++ b/vb_suite/inference.py
@@ -4,7 +4,7 @@ import sys
 
 # from GH 7332
 
-setup = """from pandas_vb_common import *
+setup = """from .pandas_vb_common import *
 import pandas as pd
 N = 500000
 df_int64 = DataFrame(dict(A = np.arange(N,dtype='int64'), B = np.arange(N,dtype='int64')))
diff --git a/vb_suite/io_bench.py b/vb_suite/io_bench.py
index 483d61387..af5f60765 100644
--- a/vb_suite/io_bench.py
+++ b/vb_suite/io_bench.py
@@ -1,8 +1,8 @@
 from vbench.api import Benchmark
 from datetime import datetime
 
-common_setup = """from pandas_vb_common import *
-from StringIO import StringIO
+common_setup = """from .pandas_vb_common import *
+from io import StringIO
 """
 
 #----------------------------------------------------------------------
@@ -77,7 +77,7 @@ setup = common_setup + """
 from pandas import concat, Timestamp
 
 def create_cols(name):
-    return [ "%s%03d" % (name,i) for i in xrange(5) ]
+    return [ "%s%03d" % (name,i) for i in range(5) ]
 df_float  = DataFrame(np.random.randn(5000, 5),dtype='float64',columns=create_cols('float'))
 df_int    = DataFrame(np.random.randn(5000, 5),dtype='int64',columns=create_cols('int'))
 df_bool   = DataFrame(True,index=df_float.index,columns=create_cols('bool'))
diff --git a/vb_suite/io_sql.py b/vb_suite/io_sql.py
index 7f5801659..ba8367e7e 100644
--- a/vb_suite/io_sql.py
+++ b/vb_suite/io_sql.py
@@ -1,7 +1,7 @@
 from vbench.api import Benchmark
 from datetime import datetime
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 import sqlite3
 import sqlalchemy
 from sqlalchemy import create_engine
diff --git a/vb_suite/join_merge.py b/vb_suite/join_merge.py
index 244c6abe7..238a12955 100644
--- a/vb_suite/join_merge.py
+++ b/vb_suite/join_merge.py
@@ -1,7 +1,7 @@
 from vbench.benchmark import Benchmark
 from datetime import datetime
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 """
 
 setup = common_setup + """
diff --git a/vb_suite/miscellaneous.py b/vb_suite/miscellaneous.py
index 27efadc7a..da2c736e7 100644
--- a/vb_suite/miscellaneous.py
+++ b/vb_suite/miscellaneous.py
@@ -1,7 +1,7 @@
 from vbench.benchmark import Benchmark
 from datetime import datetime
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 """
 
 #----------------------------------------------------------------------
diff --git a/vb_suite/packers.py b/vb_suite/packers.py
index 60738a62b..69ec10822 100644
--- a/vb_suite/packers.py
+++ b/vb_suite/packers.py
@@ -3,7 +3,7 @@ from datetime import datetime
 
 start_date = datetime(2013, 5, 1)
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 import os
 import pandas as pd
 from pandas.core import common as com
diff --git a/vb_suite/pandas_vb_common.py b/vb_suite/pandas_vb_common.py
index 128e262d4..a1326d63a 100644
--- a/vb_suite/pandas_vb_common.py
+++ b/vb_suite/pandas_vb_common.py
@@ -7,6 +7,10 @@ from numpy.random import permutation
 import pandas.util.testing as tm
 import random
 import numpy as np
+try:
+    from pandas.compat import range
+except ImportError:
+    pass
 
 np.random.seed(1234)
 try:
diff --git a/vb_suite/panel_ctor.py b/vb_suite/panel_ctor.py
index b6637bb1e..9f497e735 100644
--- a/vb_suite/panel_ctor.py
+++ b/vb_suite/panel_ctor.py
@@ -1,7 +1,7 @@
 from vbench.benchmark import Benchmark
 from datetime import datetime
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 """
 
 #----------------------------------------------------------------------
@@ -14,7 +14,7 @@ setup_same_index = common_setup + """
 dr = np.asarray(DatetimeIndex(start=datetime(1990,1,1), end=datetime(2012,1,1),
                               freq=datetools.Day(1)))
 data_frames = {}
-for x in xrange(100):
+for x in range(100):
    df = DataFrame({"a": [0]*len(dr), "b": [1]*len(dr),
                    "c": [2]*len(dr)}, index=dr)
    data_frames[x] = df
@@ -27,7 +27,7 @@ panel_from_dict_same_index = \
 
 setup_equiv_indexes = common_setup + """
 data_frames = {}
-for x in xrange(100):
+for x in range(100):
    dr = np.asarray(DatetimeIndex(start=datetime(1990,1,1), end=datetime(2012,1,1),
                                  freq=datetools.Day(1)))
    df = DataFrame({"a": [0]*len(dr), "b": [1]*len(dr),
@@ -44,7 +44,7 @@ setup_all_different_indexes = common_setup + """
 data_frames = {}
 start = datetime(1990,1,1)
 end = datetime(2012,1,1)
-for x in xrange(100):
+for x in range(100):
    end += timedelta(days=1)
    dr = np.asarray(date_range(start, end))
    df = DataFrame({"a": [0]*len(dr), "b": [1]*len(dr),
@@ -61,7 +61,7 @@ setup_two_different_indexes = common_setup + """
 data_frames = {}
 start = datetime(1990,1,1)
 end = datetime(2012,1,1)
-for x in xrange(100):
+for x in range(100):
    if x == 50:
        end += timedelta(days=1)
    dr = np.asarray(date_range(start, end))
diff --git a/vb_suite/panel_methods.py b/vb_suite/panel_methods.py
index 5e88671a2..28586422a 100644
--- a/vb_suite/panel_methods.py
+++ b/vb_suite/panel_methods.py
@@ -1,7 +1,7 @@
 from vbench.api import Benchmark
 from datetime import datetime
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 """
 
 #----------------------------------------------------------------------
diff --git a/vb_suite/parser_vb.py b/vb_suite/parser_vb.py
index 96da3fac2..bb9ccbdb5 100644
--- a/vb_suite/parser_vb.py
+++ b/vb_suite/parser_vb.py
@@ -1,7 +1,7 @@
 from vbench.api import Benchmark
 from datetime import datetime
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 from pandas import read_csv, read_table
 """
 
@@ -44,7 +44,11 @@ read_csv_comment2 = Benchmark(stmt, setup,
                               start_date=datetime(2011, 11, 1))
 
 setup = common_setup + """
-from cStringIO import StringIO
+try:
+    from cStringIO import StringIO
+except ImportError:
+    from io import StringIO
+
 import os
 N = 10000
 K = 8
@@ -63,7 +67,11 @@ sdate = datetime(2012, 5, 7)
 read_table_multiple_date = Benchmark(cmd, setup, start_date=sdate)
 
 setup = common_setup + """
-from cStringIO import StringIO
+try:
+    from cStringIO import StringIO
+except ImportError:
+    from io import StringIO
+
 import os
 N = 10000
 K = 8
@@ -81,7 +89,11 @@ sdate = datetime(2012, 5, 7)
 read_table_multiple_date_baseline = Benchmark(cmd, setup, start_date=sdate)
 
 setup = common_setup + """
-from cStringIO import StringIO
+try:
+    from cStringIO import StringIO
+except ImportError:
+    from io import StringIO
+
 data = '''\
 0.1213700904466425978256438611,0.0525708283766902484401839501,0.4174092731488769913994474336
 0.4096341697147408700274695547,0.1587830198973579909349496119,0.1292545832485494372576795285
diff --git a/vb_suite/plotting.py b/vb_suite/plotting.py
index 88d272e7b..79e81e9ee 100644
--- a/vb_suite/plotting.py
+++ b/vb_suite/plotting.py
@@ -1,7 +1,7 @@
 from vbench.benchmark import Benchmark
 from datetime import datetime
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 
 try:
     from pandas import date_range
diff --git a/vb_suite/reindex.py b/vb_suite/reindex.py
index 07f0e0f7e..443eb4383 100644
--- a/vb_suite/reindex.py
+++ b/vb_suite/reindex.py
@@ -1,7 +1,7 @@
 from vbench.benchmark import Benchmark
 from datetime import datetime
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 """
 
 #----------------------------------------------------------------------
diff --git a/vb_suite/replace.py b/vb_suite/replace.py
index 23d41e7c8..9326aa5be 100644
--- a/vb_suite/replace.py
+++ b/vb_suite/replace.py
@@ -1,7 +1,7 @@
 from vbench.api import Benchmark
 from datetime import datetime
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 from datetime import timedelta
 
 N = 1000000
@@ -15,7 +15,7 @@ except NameError:
 ts = Series(np.random.randn(N), index=rng)
 """
 
-large_dict_setup = """from pandas_vb_common import *
+large_dict_setup = """from .pandas_vb_common import *
 from pandas.compat import range
 n = 10 ** 6
 start_value = 10 ** 5
diff --git a/vb_suite/reshape.py b/vb_suite/reshape.py
index f6eaeb353..daab96103 100644
--- a/vb_suite/reshape.py
+++ b/vb_suite/reshape.py
@@ -1,7 +1,7 @@
 from vbench.api import Benchmark
 from datetime import datetime
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 index = MultiIndex.from_arrays([np.arange(100).repeat(100),
                                np.roll(np.tile(np.arange(100), 100), 25)])
 df = DataFrame(np.random.randn(10000, 4), index=index)
diff --git a/vb_suite/series_methods.py b/vb_suite/series_methods.py
index d0c31cb04..cd8688495 100644
--- a/vb_suite/series_methods.py
+++ b/vb_suite/series_methods.py
@@ -1,7 +1,7 @@
 from vbench.api import Benchmark
 from datetime import datetime
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 """
 
 setup = common_setup + """
diff --git a/vb_suite/sparse.py b/vb_suite/sparse.py
index 5da06451f..53e2778ee 100644
--- a/vb_suite/sparse.py
+++ b/vb_suite/sparse.py
@@ -1,7 +1,7 @@
 from vbench.benchmark import Benchmark
 from datetime import datetime
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 """
 
 #----------------------------------------------------------------------
diff --git a/vb_suite/stat_ops.py b/vb_suite/stat_ops.py
index 544ad6d00..8d7c30dc9 100644
--- a/vb_suite/stat_ops.py
+++ b/vb_suite/stat_ops.py
@@ -1,7 +1,7 @@
 from vbench.benchmark import Benchmark
 from datetime import datetime
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 """
 
 #----------------------------------------------------------------------
diff --git a/vb_suite/strings.py b/vb_suite/strings.py
index f229e0dde..0948df567 100644
--- a/vb_suite/strings.py
+++ b/vb_suite/strings.py
@@ -1,6 +1,6 @@
 from vbench.api import Benchmark
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 """
 
 setup = common_setup + """
@@ -9,11 +9,11 @@ import itertools as IT
 
 def make_series(letters, strlen, size):
     return Series(
-        np.fromiter(IT.cycle(letters), count=size*strlen, dtype='|S1')
-        .view('|S{}'.format(strlen)))
+        [str(x) for x in np.fromiter(IT.cycle(letters), count=size*strlen, dtype='|S1')
+        .view('|S{}'.format(strlen))])
 
-many = make_series('matchthis'+string.uppercase, strlen=19, size=10000) # 31% matches
-few = make_series('matchthis'+string.uppercase*42, strlen=19, size=10000) # 1% matches
+many = make_series('matchthis'+string.ascii_uppercase, strlen=19, size=10000) # 31% matches
+few = make_series('matchthis'+string.ascii_uppercase*42, strlen=19, size=10000) # 1% matches
 """
 
 strings_cat = Benchmark("many.str.cat(sep=',')", setup)
@@ -47,7 +47,7 @@ strings_rstrip = Benchmark("many.str.rstrip('matchthis')", setup)
 strings_get = Benchmark("many.str.get(0)", setup)
 
 setup = setup + """
-s = make_series(string.uppercase, strlen=10, size=10000).str.join('|')
+s = make_series(string.ascii_uppercase, strlen=10, size=10000).str.join('|')
 """
 strings_get_dummies = Benchmark("s.str.get_dummies('|')", setup)
 
diff --git a/vb_suite/suite.py b/vb_suite/suite.py
index ca7a4a9b7..70a6278c0 100644
--- a/vb_suite/suite.py
+++ b/vb_suite/suite.py
@@ -136,7 +136,7 @@ Performance Benchmarks
 These historical benchmark graphs were produced with `vbench
 <http://github.com/pydata/vbench>`__.
 
-The ``pandas_vb_common`` setup script can be found here_
+The ``.pandas_vb_common`` setup script can be found here_
 
 .. _here: https://github.com/pydata/pandas/tree/master/vb_suite
 
diff --git a/vb_suite/timedelta.py b/vb_suite/timedelta.py
index febd70739..378968ea1 100644
--- a/vb_suite/timedelta.py
+++ b/vb_suite/timedelta.py
@@ -1,7 +1,7 @@
 from vbench.api import Benchmark
 from datetime import datetime
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 from pandas import to_timedelta
 """
 
diff --git a/vb_suite/timeseries.py b/vb_suite/timeseries.py
index aca173adc..7e10b333d 100644
--- a/vb_suite/timeseries.py
+++ b/vb_suite/timeseries.py
@@ -11,7 +11,7 @@ except NameError:
         return DatetimeIndex(start=start, end=end, periods=periods, offset=freq)
 
 
-common_setup = """from pandas_vb_common import *
+common_setup = """from .pandas_vb_common import *
 from datetime import timedelta
 N = 100000
 
