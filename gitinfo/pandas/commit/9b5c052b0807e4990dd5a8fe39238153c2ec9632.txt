commit 9b5c052b0807e4990dd5a8fe39238153c2ec9632
Author: Randy Carnevale <Randy.Carnevale@cba.com.au>
Date:   Thu Jan 7 13:30:52 2016 -0500

    BUG: DataFrame.round() drops column index name, #11986

diff --git a/doc/source/whatsnew/v0.18.0.txt b/doc/source/whatsnew/v0.18.0.txt
index 29b622d86..3a301f447 100644
--- a/doc/source/whatsnew/v0.18.0.txt
+++ b/doc/source/whatsnew/v0.18.0.txt
@@ -483,6 +483,8 @@ Bug Fixes
 
 - Bug in rich comparison of ``Timedelta`` with a ``numpy.array`` of ``Timedelta`` that caused an infinite recursion (:issue:`11835`)
 
+- Bug in ``DataFrame.round`` dropping column index name (:issue:`11986`)
+
 - Bug in ``df.replace`` while replacing value in mixed dtype ``Dataframe`` (:issue:`11698`)
 
 - Bug in ``Index`` prevents copying name of passed ``Index``, when a new name is not provided (:issue:`11193`)
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 851ca417d..7220b25da 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -4457,12 +4457,16 @@ class DataFrame(NDFrame):
             new_cols = [col for col in _dict_round(self, decimals)]
         elif com.is_integer(decimals):
             # Dispatch to Series.round
-            new_cols = [_series_round(v, decimals) for _, v in self.iteritems()]
+            new_cols = [_series_round(v, decimals)
+                        for _, v in self.iteritems()]
         else:
-            raise TypeError("decimals must be an integer, a dict-like or a Series")
+            raise TypeError("decimals must be an integer, "
+                            "a dict-like, or a Series")
 
         if len(new_cols) > 0:
-            return concat(new_cols, axis=1)
+            return self._constructor(concat(new_cols, axis=1),
+                                     index=self.index,
+                                     columns=self.columns)
         else:
             return self
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 960e93138..d1b8b772a 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -13545,6 +13545,20 @@ class TestDataFrame(tm.TestCase, CheckIndexing,
         # Make sure this doesn't break existing Series.round
         tm.assert_series_equal(df['col1'].round(1), expected_rounded['col1'])
 
+        # named columns
+        # GH 11986
+        decimals = 2
+        expected_rounded = DataFrame(
+            {'col1': [1.12, 2.12, 3.12], 'col2': [1.23, 2.23, 3.23]})
+        df.columns.name = "cols"
+        expected_rounded.columns.name = "cols"
+        tm.assert_frame_equal(df.round(decimals), expected_rounded)
+
+        # interaction of named columns & series
+        tm.assert_series_equal(df['col1'].round(decimals),
+                               expected_rounded['col1'])
+        tm.assert_series_equal(df.round(decimals)['col1'],
+                               expected_rounded['col1'])
 
     def test_round_mixed_type(self):
         # GH11885
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 62a3f5249..1aa757c06 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -3004,6 +3004,7 @@ class TestSeries(tm.TestCase, CheckNameIntegration):
     def test_round(self):
         # numpy.round doesn't preserve metadata, probably a numpy bug,
         # re: GH #314
+        self.ts.index.name = "index_name"
         result = self.ts.round(2)
         expected = Series(np.round(self.ts.values, 2), index=self.ts.index,
                           name='ts')
