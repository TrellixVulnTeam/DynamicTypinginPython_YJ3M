commit 3b24fb678672ecb6ef24a1915c49f3cf815d5556
Author: Adam Bull <adbull@users.noreply.github.com>
Date:   Wed May 15 02:41:42 2019 +0100

    API: groupby ffill adds labels as extra column (#21521) (#26162)

diff --git a/doc/source/whatsnew/v0.25.0.rst b/doc/source/whatsnew/v0.25.0.rst
index 9db8bef8d..49518c57f 100644
--- a/doc/source/whatsnew/v0.25.0.rst
+++ b/doc/source/whatsnew/v0.25.0.rst
@@ -154,6 +154,37 @@ Providing any ``SparseSeries`` or ``SparseDataFrame`` to :func:`concat` will
 cause a ``SparseSeries`` or ``SparseDataFrame`` to be returned, as before.
 
 
+``DataFrame`` groupby ffill/bfill no longer return group labels
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+The methods ``ffill``, ``bfill``, ``pad`` and ``backfill`` of
+:class:`DataFrameGroupBy <pandas.core.groupby.DataFrameGroupBy>`
+previously included the group labels in the return value, which was
+inconsistent with other groupby transforms. Now only the filled values
+are returned. (:issue:`21521`)
+
+.. ipython:: python
+
+    df = pd.DataFrame({"a": ["x", "y"], "b": [1, 2]})
+    df
+
+*Previous Behaviour*:
+
+.. code-block:: python
+
+   In [3]: df.groupby("a").ffill()
+   Out[3]:
+      a  b
+   0  x  1
+   1  y  2
+
+*New Behaviour*:
+
+.. ipython:: python
+
+    df.groupby("a").ffill()
+
+
 .. _whatsnew_0250.api_breaking.deps:
 
 Increased minimum versions for dependencies
diff --git a/pandas/core/groupby/generic.py b/pandas/core/groupby/generic.py
index ab60bdd86..b5b6553d2 100644
--- a/pandas/core/groupby/generic.py
+++ b/pandas/core/groupby/generic.py
@@ -1480,15 +1480,6 @@ class DataFrameGroupBy(NDFrameGroupBy):
              in self._iterate_column_groupbys()),
             keys=self._selected_obj.columns, axis=1)
 
-    def _fill(self, direction, limit=None):
-        """Overridden method to join grouped columns in output"""
-        res = super()._fill(direction, limit=limit)
-        output = OrderedDict(
-            (grp.name, grp.grouper) for grp in self.grouper.groupings)
-
-        from pandas import concat
-        return concat((self._wrap_transformed_output(output), res), axis=1)
-
     def count(self):
         """
         Compute count of group, excluding missing values.
diff --git a/pandas/core/groupby/groupby.py b/pandas/core/groupby/groupby.py
index 7bb76490e..ae28c23b8 100644
--- a/pandas/core/groupby/groupby.py
+++ b/pandas/core/groupby/groupby.py
@@ -2235,7 +2235,6 @@ class GroupBy(_GroupBy):
                                                      limit=limit, freq=freq,
                                                      axis=axis))
         filled = getattr(self, fill_method)(limit=limit)
-        filled = filled.drop(self.grouper.names, axis=1)
         fill_grp = filled.groupby(self.grouper.labels)
         shifted = fill_grp.shift(periods=periods, freq=freq)
         return (filled / shifted) - 1
diff --git a/pandas/tests/groupby/test_transform.py b/pandas/tests/groupby/test_transform.py
index e33032964..6ed2e178a 100644
--- a/pandas/tests/groupby/test_transform.py
+++ b/pandas/tests/groupby/test_transform.py
@@ -749,7 +749,7 @@ def test_group_fill_methods(mix_groupings, as_series, val1, val2,
         assert_series_equal(result, exp)
     else:
         result = getattr(df.groupby('key'), fill_method)(limit=limit)
-        exp = DataFrame({'key': keys, 'val': _exp_vals})
+        exp = DataFrame({'val': _exp_vals})
         assert_frame_equal(result, exp)
 
 
@@ -763,7 +763,7 @@ def test_pad_stable_sorting(fill_method):
         y = y[::-1]
 
     df = pd.DataFrame({'x': x, 'y': y})
-    expected = df.copy()
+    expected = df.drop('x', 1)
 
     result = getattr(df.groupby('x'), fill_method)()
 
@@ -789,7 +789,7 @@ def test_pct_change(test_series, freq, periods, fill_method, limit):
     df = DataFrame({'key': key_v, 'vals': vals * 2})
 
     df_g = getattr(df.groupby('key'), fill_method)(limit=limit)
-    grp = df_g.groupby('key')
+    grp = df_g.groupby(df.key)
 
     expected = grp['vals'].obj / grp['vals'].shift(periods) - 1
 
@@ -880,3 +880,14 @@ def test_transform_absent_categories(func):
     result = getattr(df.y.groupby(df.x), func)()
     expected = df.y
     assert_series_equal(result, expected)
+
+
+@pytest.mark.parametrize('func', ['ffill', 'bfill', 'shift'])
+@pytest.mark.parametrize('key, val', [('level', 0), ('by', Series([0]))])
+def test_ffill_not_in_axis(func, key, val):
+    # GH 21521
+    df = pd.DataFrame([[np.nan]])
+    result = getattr(df.groupby(**{key: val}), func)()
+    expected = df
+
+    assert_frame_equal(result, expected)
