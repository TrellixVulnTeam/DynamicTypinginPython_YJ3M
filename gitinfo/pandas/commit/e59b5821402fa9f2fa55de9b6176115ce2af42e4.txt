commit e59b5821402fa9f2fa55de9b6176115ce2af42e4
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon May 28 12:33:20 2012 -0400

    BUG: intercept NumPy 1.6 M8[ns] -> malformed O in DataFrame.values, Series.astype, etc. close #1323

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 1944be0f8..a284e6bed 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -749,7 +749,13 @@ _ensure_object = _algos.ensure_object
 
 
 def _astype_nansafe(arr, dtype):
-    if (np.issubdtype(arr.dtype, np.floating) and
+    if isinstance(dtype, basestring):
+        dtype = np.dtype(dtype)
+
+    if issubclass(arr.dtype.type, np.datetime64):
+        if dtype == object:
+            return lib.ints_to_pydatetime(arr.view(np.int64))
+    elif (np.issubdtype(arr.dtype, np.floating) and
         np.issubdtype(dtype, np.integer)):
 
         if np.isnan(arr).any():
diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 684b9dada..edf72d837 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -281,6 +281,9 @@ class Block(object):
                                    fill_value=fill_value)
         return make_block(new_values, self.items, self.ref_items)
 
+    def get_values(self, dtype):
+        return self.values
+
 def _mask_missing(array, missing_values):
     if not isinstance(missing_values, (list, np.ndarray)):
         missing_values = [missing_values]
@@ -392,6 +395,13 @@ class DatetimeBlock(Block):
     def should_store(self, value):
         return issubclass(value.dtype.type, np.datetime64)
 
+    def get_values(self, dtype):
+        if dtype == object:
+            flat_i8 = self.values.ravel().view(np.int64)
+            res = lib.ints_to_pydatetime(flat_i8)
+            return res.reshape(self.values.shape)
+        return self.values
+
 
 def make_block(values, items, ref_items, do_integrity_check=False):
     dtype = values.dtype
@@ -663,7 +673,7 @@ class BlockManager(object):
         for block in self.blocks:
             indexer = items.get_indexer(block.items)
             assert((indexer != -1).all())
-            result[indexer] = block.values
+            result[indexer] = block.get_values(dtype)
             itemmask[indexer] = 1
         assert(itemmask.all())
         return result
@@ -1238,20 +1248,20 @@ def _interleaved_dtype(blocks):
     have_dt64 = counts[DatetimeBlock] > 0
     have_numeric = have_float or have_complex or have_int
 
-    if have_object:
-        return np.object_
-    elif have_bool and have_numeric:
-        return np.object_
+    if (have_object or
+        (have_bool and have_numeric) or
+        (have_numeric and have_dt64)):
+        return np.dtype(object)
     elif have_bool:
-        return np.bool_
+        return np.dtype(bool)
     elif have_int and not have_float and not have_complex:
-        return np.int64
+        return np.dtype('i8')
     elif have_dt64 and not have_float and not have_complex:
-        return np.datetime64
+        return np.dtype('M8[ns]')
     elif have_complex:
-        return np.complex128
+        return np.dtype('c16')
     else:
-        return np.float64
+        return np.dtype('f8')
 
 def _consolidate(blocks, items):
     """
diff --git a/pandas/tests/test_internals.py b/pandas/tests/test_internals.py
index 3989b3496..4af2ea938 100644
--- a/pandas/tests/test_internals.py
+++ b/pandas/tests/test_internals.py
@@ -49,7 +49,7 @@ def get_int32_ex(cols):
     return make_block(mat.T, cols, TEST_COLS)
 
 def get_dt_ex(cols=['h']):
-    mat = randn(N, 1).astype(int).astype(np.datetime64)
+    mat = randn(N, 1).astype(int).astype('M8[ns]')
     return make_block(mat.T, cols, TEST_COLS)
 
 class TestBlock(unittest.TestCase):
@@ -301,7 +301,7 @@ class TestBlockManager(unittest.TestCase):
         blocks = [get_dt_ex(['h']), get_dt_ex(['g'])]
         index_sz = blocks[0].values.shape[1]
         mgr = BlockManager.from_blocks(blocks, np.arange(index_sz))
-        self.assert_(mgr.as_matrix().dtype == np.datetime64)
+        self.assert_(mgr.as_matrix().dtype == 'M8[ns]')
 
     def test_xs(self):
         pass
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 63706f0a9..6fa2bf8b3 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -1330,6 +1330,27 @@ class TestSeriesDatetime64(unittest.TestCase):
         self.series[5:7] = np.nan
         self.assert_(self.series[6] is lib.NaT)
 
+    def test_intercept_astype_object(self):
+        # Work around NumPy 1.6 bugs
+        result = self.series.astype(object)
+        result2 = self.series.astype('O')
+        expected = Series([x for x in self.series], dtype=object)
+
+        assert_series_equal(result, expected)
+        assert_series_equal(result2, expected)
+
+        df = DataFrame({'a': self.series,
+                        'b' : np.random.randn(len(self.series))})
+
+        result = df.values.squeeze()
+        self.assert_((result[:, 0] == expected.values).all())
+
+        df = DataFrame({'a': self.series,
+                        'b' : ['foo'] * len(self.series)})
+
+        result = df.values.squeeze()
+        self.assert_((result[:, 0] == expected.values).all())
+
 
 class TestTimestamp(unittest.TestCase):
 
