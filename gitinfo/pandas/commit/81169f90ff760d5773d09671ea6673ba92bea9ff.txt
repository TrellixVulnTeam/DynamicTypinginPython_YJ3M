commit 81169f90ff760d5773d09671ea6673ba92bea9ff
Author: Chang She <changshe@gmail.com>
Date:   Sat Nov 24 03:19:35 2012 -0500

    BUG: allow integer dtypes in pivot_annual #2019

diff --git a/pandas/tseries/tests/test_util.py b/pandas/tseries/tests/test_util.py
index 9edd64ebf..997400bf7 100644
--- a/pandas/tseries/tests/test_util.py
+++ b/pandas/tseries/tests/test_util.py
@@ -40,7 +40,6 @@ class TestPivotAnnual(unittest.TestCase):
     def test_hourly(self):
         rng_hourly = date_range('1/1/1994', periods=(18* 8760 + 4*24), freq='H')
         data_hourly = np.random.randint(100, 350, rng_hourly.size)
-        data_hourly = data_hourly.astype('float64')
         ts_hourly = Series(data_hourly, index=rng_hourly)
 
         grouped = ts_hourly.groupby(ts_hourly.index.year)
@@ -51,6 +50,7 @@ class TestPivotAnnual(unittest.TestCase):
 
         annual = pivot_annual(ts_hourly)
 
+        ts_hourly = ts_hourly.astype(float)
         for i in [1, 1416, 1417, 1418, 1439, 1440, 1441, 8784]:
             subset = ts_hourly[hoy == i]
             subset.index = [x.year for x in subset.index]
@@ -103,4 +103,3 @@ def test_normalize_date():
 if __name__ == '__main__':
     nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
                    exit=False)
-
diff --git a/pandas/tseries/util.py b/pandas/tseries/util.py
index 298a1389d..8fe345b69 100644
--- a/pandas/tseries/util.py
+++ b/pandas/tseries/util.py
@@ -2,6 +2,7 @@ import numpy as np
 
 import pandas as pd
 
+import pandas.core.common as com
 from pandas.core.frame import DataFrame
 import pandas.core.nanops as nanops
 
@@ -71,13 +72,8 @@ def pivot_annual(series, freq=None):
 
     flat_index = (year - years.min()) * width + offset
 
-    values = np.empty((len(years), width), dtype=series.dtype)
-
-    if not np.issubdtype(series.dtype, np.integer):
-        values.fill(np.nan)
-    else:
-        raise Exception('need to upcast')
-
+    values = np.empty((len(years), width))
+    values.fill(np.nan)
     values.put(flat_index, series.values)
 
     return DataFrame(values, index=years, columns=columns)
