commit 9dcb11396fc0cb166f579d488c9d6db062f195da
Author: Chang She <chang@lambdafoundry.com>
Date:   Sat Nov 24 17:03:29 2012 -0500

    ENH: normalize for asfreq #2137

diff --git a/RELEASE.rst b/RELEASE.rst
index f1597b03f..3ce9f2ade 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -50,6 +50,7 @@ pandas 0.10.0
     the number of observed key-tuples is much smaller than the total possible
     number that could occur (#2278). Also improves performance in most cases.
   - Support duplicate columns in DataFrame.from_records (#2179)
+  - Add ``normalize`` option to Series/DataFrame.asfreq (#2137)
 
 **Bug fixes**
 
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index a6eb95956..79493b26c 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -135,7 +135,7 @@ class PandasObject(object):
         return groupby(self, by, axis=axis, level=level, as_index=as_index,
                        sort=sort, group_keys=group_keys)
 
-    def asfreq(self, freq, method=None, how=None):
+    def asfreq(self, freq, method=None, how=None, normalize=False):
         """
         Convert all TimeSeries inside to specified frequency using DateOffset
         objects. Optionally provide fill method to pad/backfill missing values.
@@ -149,13 +149,16 @@ class PandasObject(object):
             backfill / bfill: use NEXT valid observation to fill methdo
         how : {'start', 'end'}, default end
             For PeriodIndex only, see PeriodIndex.asfreq
+        normalize : bool, default False
+            Whether to reset output index to midnight
 
         Returns
         -------
         converted : type of caller
         """
         from pandas.tseries.resample import asfreq
-        return asfreq(self, freq, method=method, how=how)
+        return asfreq(self, freq, method=method, how=how,
+                      normalize=normalize)
 
     def at_time(self, time, asof=False):
         """
diff --git a/pandas/tseries/resample.py b/pandas/tseries/resample.py
index d4e6157c9..d1ce5d8aa 100644
--- a/pandas/tseries/resample.py
+++ b/pandas/tseries/resample.py
@@ -340,7 +340,7 @@ def _adjust_dates_anchored(first, last, offset, closed='right', base=0):
             Timestamp(lresult, tz=last.tz))
 
 
-def asfreq(obj, freq, method=None, how=None):
+def asfreq(obj, freq, method=None, how=None, normalize=False):
     """
     Utility frequency conversion method for Series/DataFrame
     """
@@ -359,4 +359,7 @@ def asfreq(obj, freq, method=None, how=None):
         if len(obj.index) == 0:
             return obj.copy()
         dti = date_range(obj.index[0], obj.index[-1], freq=freq)
-        return obj.reindex(dti, method=method)
+        rs = obj.reindex(dti, method=method)
+        if normalize:
+            rs.index = rs.index.normalize()
+        return rs
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index aaa0132e0..c88360b7f 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -758,6 +758,26 @@ class TestTimeSeries(unittest.TestCase):
         expected = rng.get_indexer(ts_slice.index)
         self.assert_(np.array_equal(result, expected))
 
+    def test_asfreq_normalize(self):
+        rng = date_range('1/1/2000 09:30', periods=20)
+        norm = date_range('1/1/2000', periods=20)
+        vals = np.random.randn(20)
+        ts = Series(vals, index=rng)
+
+        result = ts.asfreq('D', normalize=True)
+        norm = date_range('1/1/2000', periods=20)
+        expected = Series(vals, index=norm)
+
+        assert_series_equal(result, expected)
+
+        vals = np.random.randn(20, 3)
+        ts = DataFrame(vals, index=rng)
+
+        result = ts.asfreq('D', normalize=True)
+        expected = DataFrame(vals, index=norm)
+
+        assert_frame_equal(result, expected)
+
     def test_date_range_gen_error(self):
         rng = date_range('1/1/2000 00:00', '1/1/2000 00:18', freq='5min')
         self.assertEquals(len(rng), 4)
