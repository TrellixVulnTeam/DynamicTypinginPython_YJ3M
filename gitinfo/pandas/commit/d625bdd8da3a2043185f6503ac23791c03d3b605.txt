commit d625bdd8da3a2043185f6503ac23791c03d3b605
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu May 12 21:10:12 2011 -0400

    more SparseWidePanel work

diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 980599c9a..56fc9c678 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -173,6 +173,14 @@ class WidePanel(Panel, Groupable):
         self.factors = {}
         self.values = values
 
+    def _get_values(self):
+        return self._values
+
+    def _set_values(self, values):
+        self._values = values
+
+    values = property(fget=_get_values, fset=_set_values)
+
     @classmethod
     def _get_axis_number(cls, axis):
         if axis in (0, 1, 2):
diff --git a/pandas/core/sparse.py b/pandas/core/sparse.py
index c39b15970..70d0a1e15 100644
--- a/pandas/core/sparse.py
+++ b/pandas/core/sparse.py
@@ -791,15 +791,14 @@ def homogenize(series_dict):
 
     return output
 
-def _convert_frames(frames, index, columns, default_fill=nan,
-                    default_kind='block'):
+def _convert_frames(frames, index, columns, fill_value=nan, kind='block'):
     from pandas.core.panel import _get_combined_index, _get_combined_columns
 
     output = {}
     for item, df in frames.iteritems():
         if not isinstance(df, SparseDataFrame):
-            df = SparseDataFrame(output, default_kind=default_kind,
-                                 default_fill_value=default_fill_value)
+            df = SparseDataFrame(df, default_kind=kind,
+                                 default_fill_value=fill_value)
 
         output[item] = df
 
@@ -832,15 +831,19 @@ class SparseWidePanel(WidePanel):
 
         # pre-filter, if necessary
         if items is None:
-            self.items = Index(sorted(frames.keys()))
+            items = Index(sorted(frames.keys()))
         items = _ensure_index(items)
 
-        clean_frames, index, columns = _convert_frames(frames, major_axis,
-                                                       minor_axis, kind=kind,
-                                                       fill_value=fill_value)
+        (clean_frames,
+         major_axis,
+         minor_axis) = _convert_frames(frames, major_axis,
+                                       minor_axis, kind=kind,
+                                       fill_value=fill_value)
 
-        self.frames = frames
-        self.major_axis = foo
+        self._frames = clean_frames
+        self.items = items
+        self.major_axis = major_axis
+        self.minor_axis = minor_axis
 
     @classmethod
     def from_dict(cls):
@@ -849,12 +852,13 @@ class SparseWidePanel(WidePanel):
     @property
     def values(self):
         # return dense values
-        pass
+        return np.array([self._frames[item].values
+                         for item in self.items])
 
     def __getitem__(self, key):
         """
         """
-        pass
+        return self._frames[key]
 
     def __setitem__(self, key, value):
         pass
@@ -874,13 +878,6 @@ class SparseWidePanel(WidePanel):
     def __setstate__(self, state):
         pass
 
-    @property
-    def values(self):
-        """
-
-        """
-        pass
-
     @classmethod
     def from_dict(cls, data, intersect=False):
         pass
diff --git a/pandas/core/tests/test_sparse.py b/pandas/core/tests/test_sparse.py
index 5d34be312..446a9d39c 100644
--- a/pandas/core/tests/test_sparse.py
+++ b/pandas/core/tests/test_sparse.py
@@ -16,11 +16,14 @@ from numpy.testing import assert_equal
 from pandas import Series, DataFrame, DateRange, WidePanel
 from pandas.core.datetools import BDay
 from pandas.core.series import remove_na
-from pandas.core.sparse import (IntIndex, BlockIndex,
-                                SparseSeries, SparseDataFrame)
-import pandas.core.sparse as spm
 import pandas.util.testing as testing
 
+import pandas.core.sparse as spm
+reload(spm)
+from pandas.core.sparse import (IntIndex, BlockIndex,
+                                SparseSeries, SparseDataFrame,
+                                SparseWidePanel)
+
 """
 Testing TODO
 
@@ -830,7 +833,12 @@ def panel_data3():
 class TestSparseWidePanel(TestCase):
 
     def setUp(self):
-        pass
+        self.data_dict = {
+            'item1' : panel_data1(),
+            'item2' : panel_data2(),
+            'item3' : panel_data3()
+        }
+        self.panel = SparseWidePanel(self.data_dict)
 
     def test_from_dict(self):
         pass
@@ -872,9 +880,16 @@ class TestSparseWidePanel(TestCase):
         pass
 
 if __name__ == '__main__':
-    import nose
-    nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
-                   exit=False)
+    data_dict = {
+        'item1' : panel_data1(),
+        'item2' : panel_data2(),
+        'item3' : panel_data3()
+    }
+    panel = SparseWidePanel(data_dict)
+
+    # import nose
+    # nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
+    #                exit=False)
 
     # nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure',
     #                      '--with-profile'],
diff --git a/pandas/stats/plm.py b/pandas/stats/plm.py
index 0649ccfea..2eceb474b 100644
--- a/pandas/stats/plm.py
+++ b/pandas/stats/plm.py
@@ -57,7 +57,8 @@ class PanelOLS(OLS):
         ENTITY or TIME, indicating entity/time clustering
         A cluster is a grouping within which observations are correlated.
 
-        For example, if you have a panel data with countries over time and you suspect that:
+        For example, if you have a panel data with countries over time and you
+        suspect that:
 
         1. Countries are correlated - use 'time'
         2. There is autocorrelation - use 'entity'
