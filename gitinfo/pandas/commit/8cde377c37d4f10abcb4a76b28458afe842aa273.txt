commit 8cde377c37d4f10abcb4a76b28458afe842aa273
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Aug 8 23:11:43 2012 -0400

    BUG: handle various 1.6/1.7 bugs with datetime64 scalar handling close #1717

diff --git a/RELEASE.rst b/RELEASE.rst
index e231545be..617ea0b51 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -43,6 +43,8 @@ pandas 0.8.2
   - Fix case where Categorical group key was not being passed into index in
     GroupBy result (#1701)
   - Handle Ellipsis in Series.__getitem__/__setitem__ (#1721)
+  - Fix some bugs with handling datetime64 scalars of other units in NumPy 1.6
+    and 1.7 (#1717)
 
 pandas 0.8.1
 ============
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 140df4c6e..443c8ed4e 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -2725,7 +2725,8 @@ def _sanitize_array(data, index, dtype=None, copy=False,
                 dtype = np.object_
 
             if dtype is None:
-                subarr = np.empty(len(index), dtype=type(value))
+                value, dtype = _dtype_from_scalar(value)
+                subarr = np.empty(len(index), dtype=dtype)
             else:
                 subarr = np.empty(len(index), dtype=dtype)
             subarr.fill(value)
@@ -2744,6 +2745,13 @@ def _sanitize_array(data, index, dtype=None, copy=False,
 
     return subarr
 
+def _dtype_from_scalar(val):
+    if isinstance(val, np.datetime64):
+        # ugly hacklet
+        val = lib.Timestamp(val).value
+        return val, np.dtype('M8[ns]')
+    return val, type(val)
+
 def _get_rename_function(mapper):
     if isinstance(mapper, (dict, Series)):
         def f(x):
diff --git a/pandas/src/inference.pyx b/pandas/src/inference.pyx
index c71e08ae5..b1c366270 100644
--- a/pandas/src/inference.pyx
+++ b/pandas/src/inference.pyx
@@ -385,18 +385,9 @@ def maybe_convert_objects(ndarray[object] objects, bint try_float=0,
         elif util.is_bool_object(val):
             seen_bool = 1
             bools[i] = val
-        elif util.is_integer_object(val):
-            seen_int = 1
-            floats[i] = <float64_t> val
-            complexes[i] = <double complex> val
-            if not seen_null:
-                ints[i] = val
         elif util.is_float_object(val):
             floats[i] = complexes[i] = val
             seen_float = 1
-        elif util.is_complex_object(val):
-            complexes[i] = val
-            seen_complex = 1
         elif util.is_datetime64_object(val):
             if convert_datetime:
                 idatetimes[i] = convert_to_tsobject(val).value
@@ -404,6 +395,15 @@ def maybe_convert_objects(ndarray[object] objects, bint try_float=0,
             else:
                 seen_object = 1
                 # objects[i] = val.astype('O')
+        elif util.is_integer_object(val):
+            seen_int = 1
+            floats[i] = <float64_t> val
+            complexes[i] = <double complex> val
+            if not seen_null:
+                ints[i] = val
+        elif util.is_complex_object(val):
+            complexes[i] = val
+            seen_complex = 1
         elif PyDateTime_Check(val):
             if convert_datetime:
                 seen_datetime = 1
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 9284a447b..c87ec9ad0 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -1035,6 +1035,14 @@ class TestTimeSeries(unittest.TestCase):
         exp = ts.interpolate()
         assert_series_equal(result, exp)
 
+    def test_frame_datetime64_handling_groupby(self):
+        # it works!
+        df = DataFrame([(3,np.datetime64('2012-07-03')),
+                        (3,np.datetime64('2012-07-04'))],
+                       columns = ['a', 'date'])
+        result = df.groupby('a').first()
+        self.assertEqual(result['date'][3].year, 2012)
+
 def _simple_ts(start, end, freq='D'):
     rng = date_range(start, end, freq=freq)
     return Series(np.random.randn(len(rng)), index=rng)
