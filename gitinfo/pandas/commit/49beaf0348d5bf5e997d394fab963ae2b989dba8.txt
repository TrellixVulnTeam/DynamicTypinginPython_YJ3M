commit 49beaf0348d5bf5e997d394fab963ae2b989dba8
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Jul 24 21:52:11 2011 -0400

    TST: raise exception when try to create empty int columns

diff --git a/RELEASE.rst b/RELEASE.rst
index 780890c42..5db9339d3 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -8,10 +8,11 @@ What is it
 ==========
 
 **pandas** is a library of powerful labeled-axis data structures, statistical
-tools, and general code for working with time series and cross-sectional
-data. It was designed with the practical needs of statistical modeling and
-large, inhomogeneous data sets in mind. It is particularly well suited for,
-among other things, financial data analysis applications.
+tools, and general code for working with relational data sets, including time
+series and cross-sectional data. It was designed with the practical needs of
+statistical modeling and large, inhomogeneous data sets in mind. It is
+particularly well suited for, among other things, financial data analysis
+applications.
 
 ===============
 Where to get it
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 0de4b7b04..82f5400b0 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2510,8 +2510,15 @@ def _rec_to_dict(arr):
 def _homogenize(data, index, columns, dtype=None):
     homogenized = {}
 
+    if dtype is not None:
+        dtype = np.dtype(dtype)
+
     for k in columns:
         if k not in data:
+            # no obvious "empty" int column
+            if dtype is not None and issubclass(dtype.type, np.integer):
+                continue
+
             v = np.empty(len(index), dtype=dtype)
             v.fill(nan)
         else:
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 0260ad8f4..700999ead 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -789,6 +789,10 @@ class TestDataFrame(unittest.TestCase, CheckIndexing):
         df = DataFrame(index=range(10), columns=['a','b'], dtype=object)
         self.assert_(df.values.dtype == np.object_)
 
+        # does not error but ends up float
+        df = DataFrame(index=range(10), columns=['a','b'], dtype=int)
+        self.assert_(df.values.dtype == np.float_)
+
     def test_constructor_scalar_inference(self):
         data = {'int' : 1, 'bool' : True,
                 'float' : 3., 'object' : 'foo'}
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index 37ccad970..9d7d108d7 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -200,8 +200,6 @@ class TestDataFrameGroupBy(unittest.TestCase):
         self.assertEqual(len(grouped.columns), 2)
 
     def test_groupby_multiple_columns(self):
-        raise nose.SkipTest
-
         data = DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',
                                  'foo', 'bar', 'foo', 'foo'],
                           'B' : ['one', 'one', 'two', 'three',
@@ -214,7 +212,7 @@ class TestDataFrameGroupBy(unittest.TestCase):
         expected = defaultdict(dict)
         for n1, gp1 in data.groupby('A'):
             for n2, gp2 in gp1.groupby('B'):
-                expected[n1][n2] = gp2.sum()
+                expected[n1][n2] = gp2.ix[:, ['C', 'D']].sum()
         expected = dict((k, DataFrame(v)) for k, v in expected.iteritems())
         expected = WidePanel.fromDict(expected)
         assert_panel_equal(result1, expected)
