commit 95be0776d61c47f8a4cdfeaf53220156a026bcf5
Author: Terji Petersen <contribute@tensortable.com>
Date:   Tue Dec 31 09:08:03 2019 +0000

    TYP: Add return types to some top-level func (#30565)

diff --git a/pandas/core/indexes/datetimes.py b/pandas/core/indexes/datetimes.py
index 108e24ffe..9ff968bc5 100644
--- a/pandas/core/indexes/datetimes.py
+++ b/pandas/core/indexes/datetimes.py
@@ -1356,7 +1356,7 @@ def date_range(
     name=None,
     closed=None,
     **kwargs,
-):
+) -> DatetimeIndex:
     """
     Return a fixed frequency DatetimeIndex.
 
@@ -1522,7 +1522,7 @@ def bdate_range(
     holidays=None,
     closed=None,
     **kwargs,
-):
+) -> DatetimeIndex:
     """
     Return a fixed frequency DatetimeIndex, with business day as the default
     frequency.
diff --git a/pandas/core/reshape/merge.py b/pandas/core/reshape/merge.py
index 37ec05c40..7a22a6c84 100644
--- a/pandas/core/reshape/merge.py
+++ b/pandas/core/reshape/merge.py
@@ -68,7 +68,7 @@ def merge(
     copy: bool = True,
     indicator: bool = False,
     validate=None,
-):
+) -> "DataFrame":
     op = _MergeOperation(
         left,
         right,
@@ -183,7 +183,7 @@ def merge_ordered(
     fill_method=None,
     suffixes=("_x", "_y"),
     how: str = "outer",
-):
+) -> "DataFrame":
     """
     Perform merge with optional filling/interpolation.
 
@@ -317,7 +317,7 @@ def merge_asof(
     tolerance=None,
     allow_exact_matches: bool = True,
     direction: str = "backward",
-):
+) -> "DataFrame":
     """
     Perform an asof merge. This is similar to a left-join except that we
     match on nearest key rather than equal keys.
diff --git a/pandas/core/reshape/pivot.py b/pandas/core/reshape/pivot.py
index 4b21045cd..2eb2990bd 100644
--- a/pandas/core/reshape/pivot.py
+++ b/pandas/core/reshape/pivot.py
@@ -35,7 +35,7 @@ def pivot_table(
     dropna=True,
     margins_name="All",
     observed=False,
-):
+) -> "DataFrame":
     index = _convert_by(index)
     columns = _convert_by(columns)
 
@@ -148,7 +148,9 @@ def pivot_table(
         table = table.sort_index(axis=1)
 
     if fill_value is not None:
-        table = table.fillna(value=fill_value, downcast="infer")
+        filled = table.fillna(value=fill_value, downcast="infer")
+        assert filled is not None  # needed for mypy
+        table = filled
 
     if margins:
         if dropna:
@@ -426,7 +428,7 @@ def _convert_by(by):
 
 @Substitution("\ndata : DataFrame")
 @Appender(_shared_docs["pivot"], indents=1)
-def pivot(data: "DataFrame", index=None, columns=None, values=None):
+def pivot(data: "DataFrame", index=None, columns=None, values=None) -> "DataFrame":
     if values is None:
         cols = [columns] if index is None else [index, columns]
         append = index is None
diff --git a/pandas/io/json/_normalize.py b/pandas/io/json/_normalize.py
index aa14c3f3a..6f2e6e844 100644
--- a/pandas/io/json/_normalize.py
+++ b/pandas/io/json/_normalize.py
@@ -118,7 +118,7 @@ def _json_normalize(
     errors: Optional[str] = "raise",
     sep: str = ".",
     max_level: Optional[int] = None,
-):
+) -> "DataFrame":
     """
     Normalize semi-structured JSON data into a flat table.
 
