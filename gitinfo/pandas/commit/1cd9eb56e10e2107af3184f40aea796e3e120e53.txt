commit 1cd9eb56e10e2107af3184f40aea796e3e120e53
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Jan 17 13:25:27 2012 -0500

    TST: NumPy 1.5.1 workaround, GH #353

diff --git a/pandas/core/series.py b/pandas/core/series.py
index 77df7070a..f7660dff5 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -33,6 +33,8 @@ from pandas.util.decorators import Appender, Substitution
 
 __all__ = ['Series', 'TimeSeries']
 
+_np_version = np.version.short_version
+
 #-------------------------------------------------------------------------------
 # Wrapper function for Series arithmetic methods
 
@@ -59,8 +61,17 @@ def _arith_method(op, name):
         elif isinstance(other, DataFrame):
             return NotImplemented
         else:
+            # GH #353, NumPy 1.5.1 workaround
+            try:
+                result_values = op(self.values, other)
+            except TypeError:
+                if _np_version.startswith('1.5'): # pragma: no cover
+                    result_values = [op(x, other) for x in self.values]
+                else:
+                    raise
+
             # scalars
-            return Series(op(self.values, other), index=self.index,
+            return Series(result_values, index=self.index,
                           name=self.name)
     return wrapper
 
diff --git a/pandas/util/decorators.py b/pandas/util/decorators.py
index 142f1239f..a8d5d97f7 100644
--- a/pandas/util/decorators.py
+++ b/pandas/util/decorators.py
@@ -113,3 +113,60 @@ def suppress_stdout(f):
             sys.stdout = sys.__stdout__
 
     return wrapped
+
+
+class KnownFailureTest(Exception):
+    '''Raise this exception to mark a test as a known failing test.'''
+    pass
+
+def knownfailureif(fail_condition, msg=None):
+    """
+    Make function raise KnownFailureTest exception if given condition is true.
+
+    If the condition is a callable, it is used at runtime to dynamically
+    make the decision. This is useful for tests that may require costly
+    imports, to delay the cost until the test suite is actually executed.
+
+    Parameters
+    ----------
+    fail_condition : bool or callable
+        Flag to determine whether to mark the decorated test as a known
+        failure (if True) or not (if False).
+    msg : str, optional
+        Message to give on raising a KnownFailureTest exception.
+        Default is None.
+
+    Returns
+    -------
+    decorator : function
+        Decorator, which, when applied to a function, causes SkipTest
+        to be raised when `skip_condition` is True, and the function
+        to be called normally otherwise.
+
+    Notes
+    -----
+    The decorator itself is decorated with the ``nose.tools.make_decorator``
+    function in order to transmit function name, and various other metadata.
+
+    """
+    if msg is None:
+        msg = 'Test skipped due to known failure'
+
+    # Allow for both boolean or callable known failure conditions.
+    if callable(fail_condition):
+        fail_val = fail_condition
+    else:
+        fail_val = lambda: fail_condition
+
+    def knownfail_decorator(f):
+        # Local import to avoid a hard nose dependency and only incur the
+        # import time overhead at actual test-time.
+        import nose
+        def knownfailer(*args, **kwargs):
+            if fail_val():
+                raise KnownFailureTest, msg
+            else:
+                return f(*args, **kwargs)
+        return nose.tools.make_decorator(f)(knownfailer)
+
+    return knownfail_decorator
