commit b6dd6fc824c85852b9bcbe0b00052a5aca61e77f
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Nov 14 19:39:54 2011 -0500

    BUG: python 3.x handle incomparables in Int64Index.union, boxplot tests and buglet

diff --git a/README.rst b/README.rst
index b134cabc6..12b79710a 100644
--- a/README.rst
+++ b/README.rst
@@ -62,8 +62,8 @@ And via ``easy_install`` or ``pip``::
 Dependencies
 ============
 
-  * `NumPy <http://www.numpy.org>`__: 1.4.0 or higher. Recommend 1.5.1 or
-    higher
+  * `NumPy <http://www.numpy.org>`__: 1.6.1 or higher. Older versions will work
+    but may not pass all of the unit tests. Bare minimum is NumPy 1.4.0.
   * `python-dateutil <http://labix.org/python-dateutil>`__ 1.5
 
 Optional dependencies
diff --git a/pandas/core/index.py b/pandas/core/index.py
index eddd4c986..aa0713d80 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -311,7 +311,16 @@ class Index(np.ndarray):
         if self.is_monotonic and other.is_monotonic:
             if other.dtype != np.object_:
                 other = Index(other, dtype=object)
-            result = lib.outer_join_indexer_object(self, other.values)[0]
+
+            try:
+                result = lib.outer_join_indexer_object(self, other.values)[0]
+            except TypeError:
+                # incomparable objects
+                result = list(self.values)
+
+                # worth making this faster? a very unusual case
+                value_set = set(self.values)
+                result.extend([x for x in other.values if x not in value_set])
         else:
             indexer = self.get_indexer(other)
             indexer = (indexer == -1).nonzero()[0]
diff --git a/pandas/tests/test_graphics.py b/pandas/tests/test_graphics.py
index 142690331..e42789975 100644
--- a/pandas/tests/test_graphics.py
+++ b/pandas/tests/test_graphics.py
@@ -1,5 +1,6 @@
 import nose
 import os
+import string
 import unittest
 
 from pandas import Series, DataFrame
@@ -62,7 +63,6 @@ class TestDataFramePlots(unittest.TestCase):
         _check_plot_works(df.plot, subplots=True, use_index=False)
 
     def test_plot_bar(self):
-        import string
         df = DataFrame(np.random.randn(6, 4),
                        index=list(string.letters[:6]),
                        columns=['one', 'two', 'three', 'four'])
@@ -76,6 +76,19 @@ class TestDataFramePlots(unittest.TestCase):
                        columns=range(15))
         _check_plot_works(df.plot, kind='bar')
 
+    def test_boxplot(self):
+        df = DataFrame(np.random.randn(6, 4),
+                       index=list(string.letters[:6]),
+                       columns=['one', 'two', 'three', 'four'])
+        df['indic'] = ['foo', 'bar'] * 3
+        df['indic2'] = ['foo', 'bar', 'foo'] * 2
+
+        _check_plot_works(df.boxplot)
+        _check_plot_works(df.boxplot, column='one', by='indic')
+        _check_plot_works(df.boxplot, column='one', by=['indic', 'indic2'])
+        _check_plot_works(df.boxplot, by='indic')
+        _check_plot_works(df.boxplot, by=['indic', 'indic2'])
+
     def test_hist(self):
         df = DataFrame(np.random.randn(100, 4))
         _check_plot_works(df.hist)
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index 77b42b1ea..c2b0dd9fe 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -544,15 +544,17 @@ class TestInt64Index(unittest.TestCase):
                                                      other.values)))
         self.assert_(np.array_equal(result, expected))
 
-    def test_union(self):
+    def test_union_noncomparable(self):
+        from datetime import datetime, timedelta
         # corner case, non-Int64Index
-        other = Index(['a', 'b', 'c', 'd'])
+        now = datetime.now()
+        other = Index([now + timedelta(i) for i in xrange(4)])
         result = self.index.union(other)
-        expected = np.unique(np.concatenate((self.index, other)))
+        expected = np.concatenate((self.index, other))
         self.assert_(np.array_equal(result, expected))
 
         result = other.union(self.index)
-        expected = np.unique(np.concatenate((other, self.index)))
+        expected = np.concatenate((other, self.index))
         self.assert_(np.array_equal(result, expected))
 
     def test_cant_or_shouldnt_cast(self):
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index f0fa10238..00eb9ee51 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -111,7 +111,7 @@ def _grouped_plot_by_column(plotf, data, columns=None, by=None,
                             numeric_only=True):
     grouped = data.groupby(by)
     if columns is None:
-        columns = data.columns - by
+        columns = data._get_numeric_data().columns - by
     ngroups = len(columns)
 
     nrows, ncols = _get_layout(ngroups)
diff --git a/setup.py b/setup.py
index 4f3a19c35..d6608ad43 100755
--- a/setup.py
+++ b/setup.py
@@ -132,6 +132,7 @@ MINOR = 5
 MICRO = 1
 ISRELEASED = False
 VERSION = '%d.%d.%d' % (MAJOR, MINOR, MICRO)
+QUALIFIER = ''
 
 FULLVERSION = VERSION
 if not ISRELEASED:
@@ -144,6 +145,8 @@ if not ISRELEASED:
         FULLVERSION += "-%s" % rev
     except:
         warnings.warn("WARNING: Couldn't get git revision")
+else:
+    FULLVERSION += QUALIFIER
 
 def write_version_py(filename='pandas/version.py'):
     cnt = """\
@@ -302,7 +305,10 @@ sandbox_ext = Extension('pandas._sandbox',
                         sources=[srcpath('sandbox', suffix=suffix)],
                         include_dirs=[np.get_include()])
 
-extensions = [tseries_ext, engines_ext, sparse_ext, sandbox_ext]
+extensions = [tseries_ext, engines_ext, sparse_ext]
+
+if not ISRELEASED:
+    extensions.append(sandbox_ext)
 
 # if _have_setuptools:
 #     setuptools_args["test_suite"] = "nose.collector"
