commit 22d31a2fee018db1965603fa0d7c5cbdccb4f97c
Author: Joris Van den Bossche <jorisvandenbossche@gmail.com>
Date:   Fri Aug 15 10:42:48 2014 +0200

    DOC: suppress warning + fix reshape example

diff --git a/doc/source/indexing.rst b/doc/source/indexing.rst
index 8ec61496c..43b11fa0a 100644
--- a/doc/source/indexing.rst
+++ b/doc/source/indexing.rst
@@ -1476,6 +1476,7 @@ You can control the action of a chained assignment via the option ``mode.chained
 which can take the values ``['raise','warn',None]``, where showing a warning is the default.
 
 .. ipython:: python
+   :okwarning:
 
    dfb = DataFrame({'a' : ['one', 'one', 'two',
                            'three', 'two', 'one', 'six'],
diff --git a/doc/source/reshaping.rst b/doc/source/reshaping.rst
index 92a35d027..8d718bacd 100644
--- a/doc/source/reshaping.rst
+++ b/doc/source/reshaping.rst
@@ -151,6 +151,15 @@ unstacks the **last level**:
    stacked.unstack(1)
    stacked.unstack(0)
 
+.. _reshaping.unstack_by_name:
+
+If the indexes have names, you can use the level names instead of specifying
+the level numbers:
+
+.. ipython:: python
+
+   stacked.unstack('second')
+
 Notice that the ``stack`` and ``unstack`` methods implicitly sort the index
 levels involved. Hence a call to ``stack`` and then ``unstack``, or viceversa,
 will result in a **sorted** copy of the original DataFrame or Series:
@@ -165,15 +174,6 @@ will result in a **sorted** copy of the original DataFrame or Series:
 while the above code will raise a ``TypeError`` if the call to ``sort`` is
 removed.
 
-.. _reshaping.unstack_by_name:
-
-If the indexes have names, you can use the level names instead of specifying
-the level numbers:
-
-.. ipython:: python
-
-   stacked.unstack('second')
-
 .. _reshaping.stack_multiple:
 
 Multiple Levels
@@ -218,6 +218,8 @@ calling ``sortlevel``, of course). Here is a more complex example:
    columns = MultiIndex.from_tuples([('A', 'cat'), ('B', 'dog'),
                                      ('B', 'cat'), ('A', 'dog')],
                                     names=['exp', 'animal'])
+   index = MultiIndex.from_product([('bar', 'baz', 'foo', 'qux'), ('one', 'two')],
+                                   names=['first', 'second'])
    df = DataFrame(randn(8, 4), index=index, columns=columns)
    df2 = df.ix[[0, 1, 2, 4, 5, 7]]
    df2
