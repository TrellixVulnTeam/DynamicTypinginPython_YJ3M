commit edae39ae30bbff845386131a17c99f8989111d69
Author: Chang She <chang@lambdafoundry.com>
Date:   Sun May 6 16:32:27 2012 -0400

    ENH: limit keyword to Series/DataFrame align methods #216
    TST: test cases for align with 'method' and 'limit' keywords #216
    TST: fixes test_align test cases that omits join kind
    BUG: self is empty case in DatetimeIndex fast_union and can_fast_union

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 3172e47e6..3869c9f17 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1766,7 +1766,7 @@ class DataFrame(NDFrame):
     # Reindexing and alignment
 
     def align(self, other, join='outer', axis=None, level=None, copy=True,
-              fill_value=np.nan, method=None):
+              fill_value=np.nan, method=None, limit=None, fill_axis=0):
         """
         Align two DataFrame object on their index and columns with the
         specified join method for each axis Index
@@ -1787,6 +1787,9 @@ class DataFrame(NDFrame):
             Value to use for missing values. Defaults to NaN, but can be any
             "compatible" value
         method : str, default None
+        limit : int, default None
+        fill_axis : {0, 1}, default 0
+            Filling axis, method and limit
 
         Returns
         -------
@@ -1796,16 +1799,19 @@ class DataFrame(NDFrame):
         if isinstance(other, DataFrame):
             return self._align_frame(other, join=join, axis=axis, level=level,
                                      copy=copy, fill_value=fill_value,
-                                     method=method)
+                                     method=method, limit=limit,
+                                     fill_axis=fill_axis)
         elif isinstance(other, Series):
             return self._align_series(other, join=join, axis=axis, level=level,
                                       copy=copy, fill_value=fill_value,
-                                      method=method)
+                                      method=method, limit=limit,
+                                      fill_axis=fill_axis)
         else:  # pragma: no cover
             raise TypeError('unsupported type: %s' % type(other))
 
     def _align_frame(self, other, join='outer', axis=None, level=None,
-                     copy=True, fill_value=np.nan, method=None):
+                     copy=True, fill_value=np.nan, method=None, limit=None,
+                     fill_axis=0):
         # defaults
         join_index, join_columns = None, None
         ilidx, iridx = None, None
@@ -1831,13 +1837,14 @@ class DataFrame(NDFrame):
                                              fill_value=fill_value)
 
         if method is not None:
-            left = left.fillna(method=method)
-            right = right.fillna(method=method)
+            left = left.fillna(axis=fill_axis, method=method, limit=limit)
+            right = right.fillna(axis=fill_axis, method=method, limit=limit)
 
         return left, right
 
     def _align_series(self, other, join='outer', axis=None, level=None,
-                      copy=True, fill_value=None, method=None):
+                      copy=True, fill_value=None, method=None, limit=None,
+                      fill_axis=0):
         fdata = self._data
         if axis == 0:
             join_index = self.index
@@ -1869,8 +1876,9 @@ class DataFrame(NDFrame):
 
         fill_na = notnull(fill_value) or (method is not None)
         if fill_na:
-            return (left_result.fillna(fill_value, method=method),
-                    right_result.fillna(fill_value, method=method))
+            return (left_result.fillna(fill_value, method=method, limit=limit,
+                                       axis=fill_axis),
+                    right_result.fillna(fill_value, method=method, limit=limit))
         else:
             return left_result, right_result
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index df8e75d8c..6413ad9f9 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1874,7 +1874,7 @@ copy : boolean, default False
             return Series(mapped, index=self.index, name=self.name)
 
     def align(self, other, join='outer', level=None, copy=True,
-              fill_value=None, method=None):
+              fill_value=None, method=None, inplace=False, limit=None):
         """
         Align two Series object with the specified join method
 
@@ -1890,6 +1890,8 @@ copy : boolean, default False
             required, the same object will be returned (for better performance)
         fill_value : object, default None
         method : str, default 'pad'
+        limit : int, default None
+           fill_value, method, inplace, limit are passed to fillna
 
         Returns
         -------
@@ -1904,8 +1906,8 @@ copy : boolean, default False
         right = other._reindex_indexer(join_index, ridx, copy)
         fill_na = (fill_value is not None) or (method is not None)
         if fill_na:
-            return (left.fillna(fill_value, method=method),
-                    right.fillna(fill_value, method=method))
+            return (left.fillna(fill_value, method=method, limit=limit),
+                    right.fillna(fill_value, method=method, limit=limit))
         else:
             return left, right
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 9072404e9..3bf45a9e2 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3586,6 +3586,63 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         self.assertRaises(ValueError, self.frame.align, af.ix[0,:3],
                           join='inner', axis=2)
 
+    def test_align_fill_method(self):
+        def _check_align(a, b, axis, fill_axis, how, method, limit=None):
+            aa, ab = a.align(b, axis=axis, join=how, method=method, limit=limit,
+                             fill_axis=fill_axis)
+
+            join_index, join_columns = None, None
+
+            ea, eb = a, b
+            if axis is None or axis == 0:
+                join_index = a.index.join(b.index, how=how)
+                ea = ea.reindex(index=join_index)
+                eb = eb.reindex(index=join_index)
+
+            if axis is None or axis == 1:
+                join_columns  = a.columns.join(b.columns, how=how)
+                ea = ea.reindex(columns=join_columns)
+                eb = eb.reindex(columns=join_columns)
+
+            ea = ea.fillna(axis=fill_axis, method=method, limit=limit)
+            eb = eb.fillna(axis=fill_axis, method=method, limit=limit)
+
+            assert_frame_equal(aa, ea)
+            assert_frame_equal(ab, eb)
+
+        for kind in JOIN_TYPES:
+            for meth in ['pad', 'bfill']:
+                for ax in [0, 1, None]:
+                    for fax in [0, 1]:
+                        left = self.frame.ix[0:4, :10]
+                        right = self.frame.ix[2:, 6:]
+                        empty = self.frame.ix[:0, :0]
+
+                        _check_align(left, right, axis=ax, fill_axis=fax,
+                                     how=kind, method=meth)
+                        _check_align(left, right, axis=ax, fill_axis=fax,
+                                     how=kind, method=meth, limit=1)
+
+                        # empty left
+                        _check_align(empty, right, axis=ax, fill_axis=fax,
+                                     how=kind, method=meth)
+                        _check_align(empty, right, axis=ax, fill_axis=fax,
+                                     how=kind, method=meth, limit=1)
+
+
+                        # empty right
+                        _check_align(left, empty, axis=ax, fill_axis=fax,
+                                     how=kind, method=meth)
+                        _check_align(left, empty, axis=ax, fill_axis=fax,
+                                     how=kind, method=meth, limit=1)
+
+                        # both empty
+                        _check_align(empty, empty, axis=ax, fill_axis=fax,
+                                     how=kind, method=meth)
+                        _check_align(empty, empty, axis=ax, fill_axis=fax,
+                                     how=kind, method=meth, limit=1)
+
+
     def test_align_int_fill_bug(self):
         # GH #910
         X = np.random.rand(10,10)
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 94059fc12..8be5d86ab 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -2069,17 +2069,52 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
             assert_series_equal(ab, eb)
 
         for kind in JOIN_TYPES:
-            _check_align(self.ts[2:], self.ts[:-5])
-            _check_align(self.ts[2:], self.ts[:-5], fill=-1)
+            _check_align(self.ts[2:], self.ts[:-5], how=kind)
+            _check_align(self.ts[2:], self.ts[:-5], how=kind, fill=-1)
 
             # empty left
-            _check_align(self.ts[:0], self.ts[:-5])
+            _check_align(self.ts[:0], self.ts[:-5], how=kind)
 
             # empty right
-            _check_align(self.ts[:-5], self.ts[:0])
+            _check_align(self.ts[:-5], self.ts[:0], how=kind)
 
             # both empty
-            _check_align(self.ts[:0], self.ts[:0])
+            _check_align(self.ts[:0], self.ts[:0], how=kind)
+
+    def test_align_fill_method(self):
+        def _check_align(a, b, how='left', method='pad', limit=None):
+            aa, ab = a.align(b, join=how, method=method, limit=limit)
+
+            join_index = a.index.join(b.index, how=how)
+            ea = a.reindex(join_index)
+            eb = b.reindex(join_index)
+
+            ea = ea.fillna(method=method, limit=limit)
+            eb = eb.fillna(method=method, limit=limit)
+
+            assert_series_equal(aa, ea)
+            assert_series_equal(ab, eb)
+
+        for kind in JOIN_TYPES:
+            for meth in ['pad', 'bfill']:
+                _check_align(self.ts[2:], self.ts[:-5], how=kind, method=meth)
+                _check_align(self.ts[2:], self.ts[:-5], how=kind,
+                             method=meth, limit=1)
+
+                # empty left
+                _check_align(self.ts[:0], self.ts[:-5], how=kind, method=meth)
+                _check_align(self.ts[:0], self.ts[:-5], how=kind, method=meth,
+                             limit=1)
+
+                # empty right
+                _check_align(self.ts[:-5], self.ts[:0], how=kind, method=meth)
+                _check_align(self.ts[:-5], self.ts[:0], how=kind, method=meth,
+                             limit=1)
+
+                # both empty
+                _check_align(self.ts[:0], self.ts[:0], how=kind, method=meth)
+                _check_align(self.ts[:0], self.ts[:0], how=kind, method=meth,
+                             limit=1)
 
     def test_align_nocopy(self):
         b = self.ts[:5].copy()
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 2f67404ae..ec3a30199 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -688,7 +688,7 @@ class DatetimeIndex(Int64Index):
         if not self.is_monotonic or not other.is_monotonic:
             return False
 
-        if len(other) == 0:
+        if len(self) == 0 or len(other) == 0:
             return True
 
         # to make our life easier, "sort" the two ranges
@@ -707,6 +707,9 @@ class DatetimeIndex(Int64Index):
         if len(other) == 0:
             return self.view(type(self))
 
+        if len(self) == 0:
+            return other.view(type(self))
+
         # to make our life easier, "sort" the two ranges
         if self[0] <= other[0]:
             left, right = self, other
