commit 659b9a64fed8b5448c4ee862fd95e3ae32ff4324
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jun 11 13:42:30 2012 -0400

    ENH: better error message with non-unique columns in DataFrame.from_records, close #1298

diff --git a/pandas/core/algorithms.py b/pandas/core/algorithms.py
index b16b035aa..4b41b0a45 100644
--- a/pandas/core/algorithms.py
+++ b/pandas/core/algorithms.py
@@ -49,6 +49,7 @@ def unique(values):
     -------
     uniques
     """
+    values = com._asarray_tuplesafe(values)
     f = lambda htype, caster: _unique_generic(values, htype, caster)
     return _hashtable_algo(f, values.dtype)
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index d70fba0e5..7ac1cf66a 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -32,17 +32,18 @@ from pandas.core.indexing import _NDFrameIndexer, _maybe_droplevels
 from pandas.core.internals import BlockManager, make_block, form_blocks
 from pandas.core.series import Series, _radd_compat
 from pandas.compat.scipy import scoreatpercentile as _quantile
-from pandas.tseries.period import PeriodIndex
 from pandas.util import py3compat
 from pandas.util.terminal import get_terminal_size
 from pandas.util.decorators import deprecate, Appender, Substitution
 
-import pandas.core.format as fmt
+from pandas.tseries.period import PeriodIndex
 
-import pandas.core.nanops as nanops
+import pandas.core.algorithms as algos
+import pandas.core.datetools as datetools
 import pandas.core.common as com
+import pandas.core.format as fmt
 import pandas.core.generic as generic
-import pandas.core.datetools as datetools
+import pandas.core.nanops as nanops
 import pandas.lib as lib
 
 #----------------------------------------------------------------------
@@ -879,6 +880,9 @@ class DataFrame(NDFrame):
         if columns is not None:
             columns = list(columns)
 
+            if len(algos.unique(columns)) < len(columns):
+                raise ValueError('Non-unique columns not yet supported in from_records')
+
         if names is not None:  # pragma: no cover
             columns = names
             warnings.warn("'names' parameter to DataFrame.from_records is "
@@ -4438,12 +4442,10 @@ class DataFrame(NDFrame):
         -------
         ranks : DataFrame
         """
-        from pandas.core.algorithms import rank
-
         if numeric_only is None:
             try:
-                ranks = rank(self.values, axis=axis, method=method,
-                             ascending=ascending)
+                ranks = algos.rank(self.values, axis=axis, method=method,
+                                   ascending=ascending)
                 return DataFrame(ranks, index=self.index, columns=self.columns)
             except TypeError:
                 numeric_only = True
@@ -4452,8 +4454,8 @@ class DataFrame(NDFrame):
             data = self._get_numeric_data()
         else:
             data = self
-        ranks = rank(data.values, axis=axis, method=method,
-                     ascending=ascending)
+        ranks = algos.rank(data.values, axis=axis, method=method,
+                           ascending=ascending)
         return DataFrame(ranks, index=data.index, columns=data.columns)
 
     def to_timestamp(self, freq=None, how='start', axis=0, copy=True):
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index ce104d6b4..0395c5a94 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2273,6 +2273,10 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         self.assert_(df['a'].dtype == np.float64)
         self.assert_(np.isnan(df['a'].values[-1]))
 
+    def test_from_records_duplicates(self):
+        self.assertRaises(ValueError, DataFrame.from_records,
+                          [(1,2,3), (4,5,6)], columns=['a','b','a'])
+
     def test_to_records_floats(self):
         df = DataFrame(np.random.rand(10,10))
         df.to_records()
