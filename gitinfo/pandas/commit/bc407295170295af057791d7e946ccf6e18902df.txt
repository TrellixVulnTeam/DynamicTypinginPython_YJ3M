commit bc407295170295af057791d7e946ccf6e18902df
Author: Luca Beltrame <luca.beltrame@marionegri.it>
Date:   Tue May 22 09:47:16 2012 +0200

    BUG: Use NA types for better conversion, and refuse matrix conversions
    of mixed-type DataFrames, fix #1282

diff --git a/pandas/rpy/common.py b/pandas/rpy/common.py
index 4bd116474..8667fb2f2 100644
--- a/pandas/rpy/common.py
+++ b/pandas/rpy/common.py
@@ -181,7 +181,18 @@ VECTOR_TYPES = {np.float64: robj.FloatVector,
                np.int32: robj.IntVector,
                np.int64: robj.IntVector,
                np.object_: robj.StrVector,
-               np.str: robj.StrVector}
+               np.str: robj.StrVector,
+               np.bool: robj.BoolVector}
+
+NA_TYPES = {np.float64: robj.NA_Real,
+            np.float32: robj.NA_Real,
+            np.float: robj.NA_Real,
+            np.int: robj.NA_Integer,
+            np.int32: robj.NA_Integer,
+            np.int64: robj.NA_Integer,
+            np.object_: robj.NA_Character,
+            np.str: robj.NA_Character,
+            np.bool: robj.NA_Logical}
 
 def convert_to_r_dataframe(df, strings_as_factors=False):
     """
@@ -207,8 +218,9 @@ def convert_to_r_dataframe(df, strings_as_factors=False):
     for column in df:
         value = df[column]
         value_type = value.dtype.type
-        value = [item if pn.notnull(item) else robj.NA_Real
+        value = [item if pn.notnull(item) else NA_TYPES[value_type]
                  for item in value]
+
         value = VECTOR_TYPES[value_type](value)
 
         if not strings_as_factors:
@@ -242,6 +254,11 @@ def convert_to_r_matrix(df, strings_as_factors=False):
 
     """
 
+    if df._is_mixed_type:
+        raise TypeError("Conversion to matrix only possible with non-mixed "
+                        "type DataFrames")
+
+
     r_dataframe = convert_to_r_dataframe(df, strings_as_factors)
     as_matrix = robj.baseenv.get("as.matrix")
     r_matrix = as_matrix(r_dataframe)
@@ -291,34 +308,67 @@ def test_convert_matrix():
 
 def test_convert_r_dataframe():
 
+    is_na = robj.baseenv.get("is.na")
+
     seriesd = _test.getSeriesData()
     frame = pn.DataFrame(seriesd, columns=['D', 'C', 'B', 'A'])
 
+    #Null data
+    frame["E"] = [np.nan for item in frame["A"]]
+    # Some mixed type data
+    frame["F"] = ["text" if item % 2 == 0 else np.nan for item in range(30)]
+
     r_dataframe = convert_to_r_dataframe(frame)
 
     assert np.array_equal(convert_robj(r_dataframe.rownames), frame.index)
     assert np.array_equal(convert_robj(r_dataframe.colnames), frame.columns)
+    assert all(is_na(item) for item in r_dataframe.rx2("E"))
 
-    for column in r_dataframe.colnames:
+    for column in frame[["A", "B", "C", "D"]]:
         coldata = r_dataframe.rx2(column)
         original_data = frame[column]
         assert np.array_equal(convert_robj(coldata), original_data)
 
+    for column in frame[["D", "E"]]:
+        for original, converted in zip(frame[column],
+                                       r_dataframe.rx2(column)):
+
+            if pn.isnull(original):
+                assert is_na(converted)
+            else:
+                assert original == converted
+
 def test_convert_r_matrix():
 
+    is_na = robj.baseenv.get("is.na")
+
     seriesd = _test.getSeriesData()
     frame = pn.DataFrame(seriesd, columns=['D', 'C', 'B', 'A'])
+    #Null data
+    frame["E"] = [np.nan for item in frame["A"]]
 
     r_dataframe = convert_to_r_matrix(frame)
 
     assert np.array_equal(convert_robj(r_dataframe.rownames), frame.index)
     assert np.array_equal(convert_robj(r_dataframe.colnames), frame.columns)
+    assert all(is_na(item) for item in r_dataframe.rx(True, "E"))
 
-    for column in r_dataframe.colnames:
+    for column in frame[["A", "B", "C", "D"]]:
         coldata = r_dataframe.rx(True, column)
         original_data = frame[column]
-        assert np.array_equal(convert_robj(coldata), original_data)
+        assert np.array_equal(convert_robj(coldata),
+                              original_data)
+
+    # Pandas bug 1282
+    frame["F"] = ["text" if item % 2 == 0 else np.nan for item in range(30)]
 
+    #FIXME: Ugly, this whole module needs to be ported to nose/unittest
+    try:
+        wrong_matrix = convert_to_r_matrix(frame)
+    except TypeError:
+        pass
+    except Exception:
+        raise
 
 
 if __name__ == '__main__':
