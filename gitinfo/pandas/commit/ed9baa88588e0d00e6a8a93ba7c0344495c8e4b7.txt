commit ed9baa88588e0d00e6a8a93ba7c0344495c8e4b7
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Jun 28 22:59:32 2011 -0400

    test coverage, more still needed

diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index c75b8a1a0..bce57d367 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -202,7 +202,7 @@ def _try_parse_dates(values, parser=None):
         try:
             from dateutil import parser
             parse_date = parser.parse
-        except ImportError:
+        except ImportError: # pragma: no cover
             def parse_date(s):
                 try:
                     return datetime.strptime(s, '%m/%d/%Y')
@@ -237,20 +237,7 @@ class ExcelFile(object):
     def __repr__(self):
         return object.__repr__(self)
 
-    def old_parse(self, sheetname, header=None, index_col=0, date_col=0):
-        from pandas.core.datetools import ole2datetime
-        sheet = self.book.sheet_by_name(sheetname)
-
-        data = [sheet.row_values(i) for i in range(sheet.nrows)]
-        if date_col is not None:
-            for row in data:
-                try:
-                    row[date_col] = ole2datetime(row[date_col])
-                except Exception:
-                    pass
-        return _simple_parser(data, header=header, indexCol=index_col)
-
-    def parse(self, sheetname, header=None, skiprows=None, index_col=0,
+    def parse(self, sheetname, header=0, skiprows=None, index_col=0,
               na_values=None):
         """
         Read Excel table into DataFrame
@@ -289,7 +276,8 @@ class ExcelFile(object):
             for value, typ in zip(sheet.row_values(i), sheet.row_types(i)):
                 if typ == XL_CELL_DATE:
                     dt = xldate_as_tuple(value, datemode)
-                    if dt[0] < MINYEAR:
+                    # how to produce this first case?
+                    if dt[0] < MINYEAR: # pragma: no cover
                         value = time(*dt[3:])
                     else:
                         value = datetime(*dt)
@@ -304,7 +292,7 @@ class ExcelFile(object):
 import warnings
 
 def parseCSV(filepath, header=0, skiprows=None, indexCol=0,
-             na_values=None):
+             na_values=None): # pragma: no cover
     """
     Parse CSV file into a DataFrame object. Try to parse dates if possible.
     """
@@ -312,7 +300,8 @@ def parseCSV(filepath, header=0, skiprows=None, indexCol=0,
     return read_csv(filepath, header=header, skiprows=skiprows,
                     index_col=indexCol, na_values=na_values)
 
-def parseText(filepath, sep='\t', header=0, indexCol=0, colNames=None):
+def parseText(filepath, sep='\t', header=0,
+              indexCol=0, colNames=None): # pragma: no cover
     """
     Parse whitespace separated file into a DataFrame object.
     Try to parse dates if possible.
@@ -323,7 +312,8 @@ def parseText(filepath, sep='\t', header=0, indexCol=0, colNames=None):
                       names=colNames)
 
 
-def parseExcel(filepath, header=None, indexCol=0, sheetname=None, **kwds):
+def parseExcel(filepath, header=None, indexCol=0,
+               sheetname=None, **kwds): # pragma: no cover
     """
 
     """
diff --git a/pandas/io/tests/test.xls b/pandas/io/tests/test.xls
new file mode 100644
index 000000000..db0f9dec7
Binary files /dev/null and b/pandas/io/tests/test.xls differ
diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index a695798cc..d76445205 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -10,10 +10,13 @@ from pandas import DataFrame
 from pandas.io.parsers import read_csv, read_table, ExcelFile
 from pandas.util.testing import assert_almost_equal, assert_frame_equal
 
-class TestReadTable(unittest.TestCase):
+class TestParsers(unittest.TestCase):
 
     def setUp(self):
         self.dirpath = curpath()
+        self.csv1 = os.path.join(self.dirpath, 'test1.csv')
+        self.csv2 = os.path.join(self.dirpath, 'test2.csv')
+        self.xls1 = os.path.join(self.dirpath, 'test.xls')
 
     def test_read_csv(self):
         pass
@@ -62,6 +65,15 @@ ignore,this,row
         self.assert_(np.array_equal(df.columns,
                                     ['A', 'A.1', 'B', 'B.1', 'B.2']))
 
+    def test_csv_mixed_type(self):
+        data = """A,B,C
+a,1,2
+b,3,4
+c,4,5
+"""
+        df = read_csv(StringIO(data), index_col=None)
+        # TODO
+
     def test_no_header(self):
         data = """1,2,3,4,5
 6,7,8,9,10
@@ -81,23 +93,30 @@ ignore,this,row
         self.assert_(np.array_equal(df2.columns, names))
 
     def test_read_csv_dataframe(self):
-        pth = os.path.join(self.dirpath, 'test1.csv')
-        df = read_csv(pth)
-        df2 = read_table(pth, sep=',')
+        df = read_csv(self.csv1)
+        df2 = read_table(self.csv1, sep=',')
         self.assert_(np.array_equal(df.columns, ['A', 'B', 'C', 'D']))
         self.assert_(isinstance(df.index[0], datetime))
         self.assert_(df.values.dtype == np.float64)
         assert_frame_equal(df, df2)
 
     def test_read_csv_no_index_name(self):
-        pth = os.path.join(self.dirpath, 'test2.csv')
-        df = read_csv(pth)
-        df2 = read_table(pth, sep=',')
+        df = read_csv(self.csv2)
+        df2 = read_table(self.csv2, sep=',')
         self.assert_(np.array_equal(df.columns, ['A', 'B', 'C', 'D']))
         self.assert_(isinstance(df.index[0], datetime))
         self.assert_(df.values.dtype == np.float64)
         assert_frame_equal(df, df2)
 
+    def test_excel_table(self):
+        pth = os.path.join(self.dirpath, 'test.xls')
+        xls = ExcelFile(pth)
+        df = xls.parse('Sheet1')
+        df2 = read_csv(self.csv1)
+        df3 = xls.parse('Sheet2', skiprows=[1])
+        assert_frame_equal(df, df2)
+        assert_frame_equal(df3, df2)
+
 class TestExcelFile(unittest.TestCase):
     pass
 
