commit e4b2e91b33f800c52c271db052ad6d51fa991e79
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Dec 19 17:09:08 2009 +0000

    miscellaneous changes, fix to Series.reindex when using fillMethod 'pad' on empty Series
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@88 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 485f73b95..60c5a0686 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -570,11 +570,15 @@ class WidePanel(Panel):
         index, columns = self._get_plane_axes(axis)
 
         values = self.values
+        mask = np.isfinite(values)
         if fill_na:
             values = values.copy()
-            values[-np.isfinite(values)] = 0
+            values[-mask] = 0
 
         result = func(values, axis=i)
+        count = mask.sum(axis=i)
+
+        result[count == 0] = np.NaN
 
         if axis != 'items':
             result = result.T
@@ -845,7 +849,7 @@ class LongPanel(Panel):
 
             # Is it a factor?
             if not np.issctype(series.dtype):
-                factor_dict[col] = fac = Factor.fromarray(series)
+                factor_dict[col] = Factor.fromarray(series)
                 del data[col]
 
         items = sorted(data)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 0588612d4..b4ff08766 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -8,11 +8,11 @@ Data structure for 1-dimensional cross-sectional and time series data
 
 from itertools import izip
 
-from numpy import array, NaN, ndarray
+from numpy import NaN, ndarray
 import numpy as np
 
 from pandas.core.daterange import DateRange
-from pandas.core.index import Index, NULL_INDEX
+from pandas.core.index import Index
 from pandas.core.mixins import Picklable, Groupable
 import pandas.core.datetools as datetools
 
@@ -49,7 +49,7 @@ def _seriesOpWrap(opname):
                                           self.index.indexMap,
                                           other.index.indexMap)
             except Exception:
-                arr = Series._combineFunc(self, other,
+                arr = Series.combineFunc(self, other,
                                          getattr(type(self[0]), opname))
             result = cls(arr, index=newIndex)
             return result
@@ -486,7 +486,7 @@ class Series(np.ndarray, Picklable, Groupable):
         newValues = np.concatenate((self, other))
         return self.__class__(newValues, index=newIndex)
 
-    def _combineFunc(self, other, func):
+    def combineFunc(self, other, func):
         """
         Combines this Series using the given function with either
           * another Series index by index
@@ -1031,6 +1031,9 @@ class Series(np.ndarray, Picklable, Groupable):
         if not isinstance(newIndex, Index):
             newIndex = Index(newIndex)
 
+        if len(self.index) == 0:
+            return self.__class__.fromValue(NaN, index=newIndex)
+
         oldMap = self.index.indexMap
         newMap = newIndex.indexMap
 
@@ -1049,7 +1052,7 @@ class Series(np.ndarray, Picklable, Groupable):
         newValues = self.values().take(fillVec)
         newValues[-mask] = NaN
 
-        return self.__class__(newValues, index = newIndex)
+        return self.__class__(newValues, index=newIndex)
 
     @property
     def weekday(self):
diff --git a/pandas/core/tests/test_frame.py b/pandas/core/tests/test_frame.py
index 7c830ceb3..a2507c3dd 100644
--- a/pandas/core/tests/test_frame.py
+++ b/pandas/core/tests/test_frame.py
@@ -1,7 +1,6 @@
 # pylint: disable-msg=W0612
 
 from copy import deepcopy
-from datetime import datetime
 import os
 import unittest
 
@@ -43,7 +42,7 @@ class TestDataFrame(unittest.TestCase):
             'col4' : self.ts4,
         }
         self.empty = DataFrame({})
-        
+
     def test_constructor(self):
         df = DataFrame()
         self.assert_(len(df.index) == 0)
@@ -104,7 +103,7 @@ class TestDataFrame(unittest.TestCase):
         for k, v in test_data.iteritems():
             for k2, v2 in v.iteritems():
                 self.assertEqual(v2, recons_data[k][k2])
-        
+
     def test_fromRecords(self):
         # from numpy documentation
         arr = np.zeros((2,),dtype=('i4,f4,a10'))
@@ -136,7 +135,7 @@ class TestDataFrame(unittest.TestCase):
         self.assertFalse(self.empty)
 
         self.assert_(self.frame)
-        
+
     def test_repr(self):
         # small one
         foo = repr(self.frame)
@@ -258,20 +257,20 @@ class TestDataFrame(unittest.TestCase):
 
         index = self.frame._firstTimeWithNValues()
         self.assert_(index == self.frame.index[5])
-        
+
     def test_firstLastValid(self):
         N = len(self.frame.index)
         mat = randn(N)
         mat[:5] = np.NaN
         mat[-5:] = np.NaN
-        
+
         frame = DataFrame({'foo' : mat}, index=self.frame.index)
         index = frame._firstTimeWithValue()
 
         self.assert_(index == frame.index[5])
 
         index = frame._lastTimeWithValue()
-        self.assert_(index == frame.index[-6])        
+        self.assert_(index == frame.index[-6])
 
     def test_combineFrame(self):
         frame_copy = self.frame.reindex(self.frame.index[::2])
@@ -286,13 +285,13 @@ class TestDataFrame(unittest.TestCase):
 
         self.assert_(np.isnan(added['C'][:5]).all())
         self.assert_(np.isnan(added['D']).all())
-            
+
         self_added = self.frame + self.frame
         self.assert_(self_added.index is self.frame.index)
-        
+
         added_rev = frame_copy + self.frame
         self.assert_(np.isnan(added['D']).all())
-        
+
         # corner cases
 
         # empty
@@ -304,7 +303,7 @@ class TestDataFrame(unittest.TestCase):
 
         empty_empty = self.empty + self.empty
         self.assert_(not empty_empty)
-        
+
     def test_combineSeries(self):
         pass
 
@@ -320,7 +319,7 @@ class TestDataFrame(unittest.TestCase):
         self.frame.toCSV(path, cols=['A', 'B'])
         self.frame.toCSV(path, header=False)
         self.frame.toCSV(path, index=False)
-        
+
         os.remove(path)
 
     def test_toDataMatrix(self):
@@ -353,22 +352,22 @@ class TestDataFrame(unittest.TestCase):
 
         appended = begin_frame.append(end_frame)
         assert_almost_equal(appended['A'], self.frame['A'])
-        
+
         del end_frame['A']
         partial_appended = begin_frame.append(end_frame)
         self.assert_('A' in partial_appended)
 
         partial_appended = end_frame.append(begin_frame)
         self.assert_('A' in partial_appended)
-        
+
     def test_asfreq(self):
         offset_monthly = self.tsframe.asfreq(datetools.bmonthEnd)
         rule_monthly = self.tsframe.asfreq('EOM')
-        
+
         assert_almost_equal(offset_monthly['A'], rule_monthly['A'])
 
         filled = rule_monthly.asfreq('WEEKDAY', fillMethod='pad')
-        
+
     def test_asMatrix(self):
         frame = self.frame
         mat = frame.asMatrix()
@@ -409,26 +408,26 @@ class TestDataFrame(unittest.TestCase):
         N = len(self.frame.index)
         mat = randn(N)
         mat[:5] = np.NaN
-        
+
         frame = DataFrame({'foo' : mat}, index=self.frame.index)
-        
+
         smaller_frame = frame.dropEmptyRows()
         self.assert_(np.array_equal(smaller_frame['foo'], mat[5:]))
-        
+
     def test_dropIncompleteRows(self):
         N = len(self.frame.index)
         mat = randn(N)
         mat[:5] = np.NaN
-        
+
         frame = DataFrame({'foo' : mat}, index=self.frame.index)
         frame['bar'] = 5
-        
+
         smaller_frame = frame.dropIncompleteRows()
         self.assert_(np.array_equal(smaller_frame['foo'], mat[5:]))
 
         samesize_frame = frame.dropIncompleteRows(specificColumns=['bar'])
         self.assert_(samesize_frame.index is self.frame.index)
-        
+
     def test_fill(self):
         self.tsframe['A'][:5] = np.NaN
         self.tsframe['A'][-5:] = np.NaN
@@ -439,7 +438,7 @@ class TestDataFrame(unittest.TestCase):
         padded = self.tsframe.fill(method='pad')
         self.assert_(np.isnan(padded['A'][:5]).all())
         self.assert_((padded['A'][-5:] == padded['A'][-5]).all())
-        
+
     def test_getTS(self):
         frame = self.tsframe
 
@@ -448,7 +447,7 @@ class TestDataFrame(unittest.TestCase):
 
         tsFrame = frame.getTS(fromDate=frame.index[5], toDate=frame.index[9])
         common.assert_frame_equal(tsFrame, frame[5:10])
-        
+
         tsFrame = frame.getTS(nPeriods=5, toDate=frame.index[9])
         common.assert_frame_equal(tsFrame, frame[5:10])
 
@@ -557,10 +556,10 @@ class TestDataFrame(unittest.TestCase):
         # pass non-Index
         newFrame = self.frame.reindex(list(self.ts1.index))
         self.assert_(newFrame.index.equals(self.ts1.index))
-        
+
     def test_reindex_mixed(self):
         pass
-        
+
     def test_transpose(self):
         frame = self.frame
         dft = frame.T
diff --git a/pandas/core/tests/test_series.py b/pandas/core/tests/test_series.py
index 78a1ea9f8..451a8b589 100644
--- a/pandas/core/tests/test_series.py
+++ b/pandas/core/tests/test_series.py
@@ -249,7 +249,7 @@ class TestSeries(unittest.TestCase):
 
         def _check_op(other, op):
             cython_or_numpy = op(series, other)
-            python = series._combineFunc(other, op)
+            python = series.combineFunc(other, op)
 
             common.assert_almost_equal(cython_or_numpy, python)
 
@@ -558,6 +558,10 @@ class TestSeries(unittest.TestCase):
         ts = self.ts[::2]
         self.assertRaises(Exception, ts.reindex, self.ts.index, fillMethod='foo')
 
+        # corner case: pad empty series
+        s = Series([], index=[])
+        reindexed = s.reindex(self.ts.index, fillMethod='pad')
+
     def test_reindex_bool(self):
 
         # A series other than float, int, string, or object
diff --git a/pandas/lib/src/tseries.c b/pandas/lib/src/tseries.c
index 987b22e84..8c6b67c45 100644
--- a/pandas/lib/src/tseries.c
+++ b/pandas/lib/src/tseries.c
@@ -1,4 +1,4 @@
-/* Generated by Cython 0.12.rc1 on Mon Dec 07 11:20:27 2009 */
+/* Generated by Cython 0.12.rc1 on Thu Dec 17 11:53:58 2009 */
 
 #define PY_SSIZE_T_CLEAN
 #include "Python.h"
diff --git a/pandas/stats/plm.py b/pandas/stats/plm.py
index 129294780..373b25f3d 100644
--- a/pandas/stats/plm.py
+++ b/pandas/stats/plm.py
@@ -115,6 +115,7 @@ class PanelOLS(OLS):
                                                 - self._x_effects)
 
         if self._time_effects:
+            x_filtered = x_filtered.subtract(x_filtered.mean(broadcast=True))
             x_regressor = x.subtract(x.mean(broadcast=True))
             y_regressor = y.subtract(y.mean(broadcast=True))
 
@@ -245,7 +246,7 @@ class PanelOLS(OLS):
 
             dummies = dummies.filterItems(dummies.items - [to_exclude])
 
-        dummies = dummies.addPrefix('fe_')
+        dummies = dummies.addPrefix('FE_')
         panel = panel.leftJoin(dummies)
 
         return panel
