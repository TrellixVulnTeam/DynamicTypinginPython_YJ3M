commit acc3f40bc6bc69836b1d6895a99b6a14e3eb4c47
Author: Stephen Lin <stephenwlin@gmail.com>
Date:   Mon Feb 25 23:29:43 2013 -0500

    BUG: timezone offset double counted using date_range

diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index c43360036..fd50efc12 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -298,7 +298,11 @@ class DatetimeIndex(Int64Index):
         if end is not None:
             end = Timestamp(end)
 
-        inferred_tz = tools._infer_tzinfo(start, end)
+        try:
+            inferred_tz = tools._infer_tzinfo(start, end)
+        except:
+            raise ValueError('Start and end cannot both be tz-aware with '
+                             'different timezones')
 
         if tz is not None and inferred_tz is not None:
             assert(inferred_tz == tz)
@@ -1538,17 +1542,21 @@ def _generate_regular_range(start, end, periods, offset):
             b = Timestamp(start).value
             e = Timestamp(end).value
             e += stride - e % stride
+            # end.tz == start.tz by this point due to _generate implementation
+            tz = start.tz
         elif start is not None:
             b = Timestamp(start).value
             e = b + periods * stride
+            tz = start.tz
         elif end is not None:
             e = Timestamp(end).value + stride
             b = e - periods * stride
+            tz = end.tz
         else:
             raise NotImplementedError
 
         data = np.arange(b, e, stride, dtype=np.int64)
-        data = data.view(_NS_DTYPE)
+        data = DatetimeIndex._simple_new(data, None, tz=tz)
     else:
         if isinstance(start, Timestamp):
             start = start.to_pydatetime()
diff --git a/pandas/tseries/tests/test_daterange.py b/pandas/tseries/tests/test_daterange.py
index 1a844cdb4..29b8d263a 100644
--- a/pandas/tseries/tests/test_daterange.py
+++ b/pandas/tseries/tests/test_daterange.py
@@ -15,10 +15,18 @@ import pandas.tseries.tools as tools
 import pandas.core.datetools as datetools
 
 
+def _skip_if_no_pytz():
+    try:
+        import pytz
+    except ImportError:
+        raise nose.SkipTest
+
+
 def eq_gen_range(kwargs, expected):
     rng = generate_range(**kwargs)
     assert(np.array_equal(list(rng), expected))
 
+
 START, END = datetime(2009, 1, 1), datetime(2010, 1, 1)
 
 
@@ -246,11 +254,11 @@ class TestDateRange(unittest.TestCase):
     def test_summary(self):
         self.rng.summary()
         self.rng[2:2].summary()
-        try:
-            import pytz
-            bdate_range('1/1/2005', '1/1/2009', tz=pytz.utc).summary()
-        except Exception:
-            pass
+
+    def test_summary_pytz(self):
+        _skip_if_no_pytz()
+        import pytz
+        bdate_range('1/1/2005', '1/1/2009', tz=pytz.utc).summary()
 
     def test_misc(self):
         end = datetime(2009, 5, 13)
@@ -298,6 +306,29 @@ class TestDateRange(unittest.TestCase):
         exp_values = [start + i * offset for i in range(5)]
         self.assert_(np.array_equal(result, DatetimeIndex(exp_values)))
 
+    def test_range_tz(self):
+        # GH 2906
+        _skip_if_no_pytz()
+        from pytz import timezone as tz
+
+        start = datetime(2011, 1, 1, tzinfo=tz('US/Eastern'))
+        end = datetime(2011, 1, 3, tzinfo=tz('US/Eastern'))
+
+        dr = date_range(start=start, periods=3)
+        self.assert_(dr.tz == tz('US/Eastern'))
+        self.assert_(dr[0] == start)
+        self.assert_(dr[2] == end)
+
+        dr = date_range(end=end, periods=3)
+        self.assert_(dr.tz == tz('US/Eastern'))
+        self.assert_(dr[0] == start)
+        self.assert_(dr[2] == end)
+
+        dr = date_range(start=start, end=end)
+        self.assert_(dr.tz == tz('US/Eastern'))
+        self.assert_(dr[0] == start)
+        self.assert_(dr[2] == end)
+
 
 if __name__ == '__main__':
     import nose
