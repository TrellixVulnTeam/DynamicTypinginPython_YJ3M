commit f009f976b3d180019f7d25abdb078610ac19cb39
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Nov 3 17:18:42 2011 -0400

    ENH: raise better error when cythonized groupby fails on non-numeric data, re: GH #315

diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 3b242b398..0ee29f42f 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -13,6 +13,10 @@ from pandas.util.decorators import cache_readonly
 import pandas._tseries as lib
 
 
+class GroupByError(Exception):
+    pass
+
+
 class GroupBy(object):
     """
     Class for grouping and aggregating relational data. See aggregate,
@@ -346,6 +350,9 @@ class GroupBy(object):
             mask = counts.ravel() > 0
             output[name] = result[mask]
 
+        if len(output) == 0:
+            raise GroupByError('No numeric types to aggregate')
+
         return self._wrap_aggregated_output(output, mask)
 
     def _get_multi_index(self, mask):
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index e1da99c4c..f615f103a 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -8,6 +8,7 @@ from pandas.core.daterange import DateRange
 from pandas.core.index import Index, MultiIndex
 from pandas.core.common import rands, groupby
 from pandas.core.frame import DataFrame
+from pandas.core.groupby import GroupByError
 from pandas.core.series import Series
 from pandas.util.testing import (assert_panel_equal, assert_frame_equal,
                                  assert_series_equal, assert_almost_equal)
@@ -659,7 +660,6 @@ class TestGroupBy(unittest.TestCase):
         _testit(lambda x: x.sum())
         _testit(lambda x: x.mean())
 
-
     def test_cython_agg_boolean(self):
         frame = DataFrame({'a': np.random.randint(0, 5, 50),
                            'b': np.random.randint(0, 2, 50).astype('bool')})
@@ -668,6 +668,11 @@ class TestGroupBy(unittest.TestCase):
 
         assert_series_equal(result, expected)
 
+    def test_cython_agg_nothing_to_agg(self):
+        frame = DataFrame({'a': np.random.randint(0, 5, 50),
+                           'b': ['foo', 'bar'] * 25})
+        self.assertRaises(GroupByError, frame.groupby('a')['b'].mean)
+
     def test_grouping_attrs(self):
         deleveled = self.mframe.delevel()
         grouped = deleveled.groupby(['first', 'second'])
