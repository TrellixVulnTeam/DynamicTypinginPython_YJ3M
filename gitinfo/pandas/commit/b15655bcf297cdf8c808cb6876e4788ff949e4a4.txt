commit b15655bcf297cdf8c808cb6876e4788ff949e4a4
Author: jreback <jeff@reback.net>
Date:   Thu Mar 28 14:30:30 2013 -0400

    ENH: add __ne__ method to period comparisons
    
    BUG: fix in spare_frame for issue with running apply on a SparseFrame didn't
         allow the setting of the columns with a rename to work properly
         something broke this......

diff --git a/pandas/sparse/frame.py b/pandas/sparse/frame.py
index b2dbca70f..383b98bfc 100644
--- a/pandas/sparse/frame.py
+++ b/pandas/sparse/frame.py
@@ -329,7 +329,23 @@ class SparseDataFrame(DataFrame):
         if len(cols) != len(self._series):
             raise Exception('Columns length %d did not match data %d!' %
                             (len(cols), len(self._series)))
-        self._columns = _ensure_index(cols)
+
+        cols = _ensure_index(cols)
+
+        # rename the _series if needed
+        existing = getattr(self,'_columns',None)
+        if existing is not None and len(existing) == len(cols):
+
+            new_series = {}
+            for i, col in enumerate(existing):
+                new_col = cols[i]
+                if new_col in new_series:  # pragma: no cover
+                    raise Exception('Non-unique mapping!')
+                new_series[new_col] = self._series.get(col)
+
+            self._series = new_series
+
+        self._columns = cols
 
     index = property(fget=_get_index, fset=_set_index)
     columns = property(fget=_get_columns, fset=_set_columns)
@@ -619,7 +635,7 @@ class SparseDataFrame(DataFrame):
 
     def _rename_index_inplace(self, mapper):
         self.index = [mapper(x) for x in self.index]
-
+ 
     def _rename_columns_inplace(self, mapper):
         new_series = {}
         new_columns = []
diff --git a/pandas/tseries/period.py b/pandas/tseries/period.py
index 9ce785085..947a2ffac 100644
--- a/pandas/tseries/period.py
+++ b/pandas/tseries/period.py
@@ -136,6 +136,9 @@ class Period(object):
             raise TypeError(other)
         return False
 
+    def __ne__(self, other):
+        return not self.__eq__(other)
+
     def __hash__(self):
         return hash((self.ordinal, self.freq))
 
