commit 9ee21391b59de46222c0a9cf4ae27cfebcaa79e3
Author: Joris Van den Bossche <jorisvandenbossche@gmail.com>
Date:   Mon Nov 9 15:46:11 2015 +0100

    VIS: only apply shared axes handling on actual SubplotAxes
    
    To fix bugs when dealing with plain Axes objects, #11556, #11520

diff --git a/doc/source/whatsnew/v0.17.1.txt b/doc/source/whatsnew/v0.17.1.txt
index 114665e28..da7885267 100755
--- a/doc/source/whatsnew/v0.17.1.txt
+++ b/doc/source/whatsnew/v0.17.1.txt
@@ -140,6 +140,8 @@ Bug Fixes
 
 
 
+- Fix plotting issues when having plain ``Axes`` instances instead of
+  ``SubplotAxes`` (:issue:`11520`, :issue:`11556`).
 
 
 
diff --git a/pandas/tests/test_graphics.py b/pandas/tests/test_graphics.py
index 7e6aaa821..93f365baa 100644
--- a/pandas/tests/test_graphics.py
+++ b/pandas/tests/test_graphics.py
@@ -3678,6 +3678,35 @@ class TestDataFramePlots(TestPlotBase):
         with tm.assertRaises(ValueError):
             df.plot(colormap='invalid_colormap')
 
+    def test_plain_axes(self):
+
+        # supplied ax itself is a SubplotAxes, but figure contains also
+        # a plain Axes object (GH11556)
+        fig, ax = self.plt.subplots()
+        fig.add_axes([0.2, 0.2, 0.2, 0.2])
+        Series(rand(10)).plot(ax=ax)
+
+        # suppliad ax itself is a plain Axes, but because the cmap keyword
+        # a new ax is created for the colorbar -> also multiples axes (GH11520)
+        df = DataFrame({'a': randn(8), 'b': randn(8)})
+        fig = self.plt.figure()
+        ax = fig.add_axes((0,0,1,1))
+        df.plot(kind='scatter', ax=ax, x='a', y='b', c='a', cmap='hsv')
+
+        # other examples
+        fig, ax = self.plt.subplots()
+        from mpl_toolkits.axes_grid1 import make_axes_locatable
+        divider = make_axes_locatable(ax)
+        cax = divider.append_axes("right", size="5%", pad=0.05)
+        Series(rand(10)).plot(ax=ax)
+        Series(rand(10)).plot(ax=cax)
+
+        fig, ax = self.plt.subplots()
+        from mpl_toolkits.axes_grid.inset_locator import inset_axes
+        iax = inset_axes(ax, width="30%", height=1., loc=3)
+        Series(rand(10)).plot(ax=ax)
+        Series(rand(10)).plot(ax=iax)
+
 
 @tm.mplskip
 class TestDataFrameGroupByPlots(TestPlotBase):
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index 9d65b19be..50e0ab66a 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -1137,7 +1137,7 @@ class MPLPlot(object):
     def _adorn_subplots(self):
         """Common post process unrelated to data"""
         if len(self.axes) > 0:
-            all_axes = self._get_axes()
+            all_axes = self._get_subplots()
             nrows, ncols = self._get_axes_layout()
             _handle_shared_axes(axarr=all_axes, nplots=len(all_axes),
                                 naxes=nrows * ncols, nrows=nrows,
@@ -1469,11 +1469,13 @@ class MPLPlot(object):
                     errors[kw] = err
         return errors
 
-    def _get_axes(self):
-        return self.axes[0].get_figure().get_axes()
+    def _get_subplots(self):
+        from matplotlib.axes import Subplot
+        return [ax for ax in self.axes[0].get_figure().get_axes()
+                    if isinstance(ax, Subplot)]
 
     def _get_axes_layout(self):
-        axes = self._get_axes()
+        axes = self._get_subplots()
         x_set = set()
         y_set = set()
         for ax in axes:
