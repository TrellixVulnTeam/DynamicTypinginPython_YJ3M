commit 6b53334c9f0389a2bbb73fa8f3405cc0d4b014c9
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Jun 3 13:40:48 2012 -0400

    ENH: handle mixed multiple function spec in SeriesGroupBy.aggregate, close #1359

diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 5e5d4f17b..b018cbeef 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -1202,7 +1202,10 @@ class SeriesGroupBy(GroupBy):
         if isinstance(arg, dict):
             columns = arg.keys()
             arg = arg.items()
-        elif isinstance(arg[0], (tuple, list)):
+        elif any(isinstance(x, (tuple, list)) for x in arg):
+            arg = [(x, x) if not isinstance(x, (tuple, list)) else x
+                   for x in arg]
+
             # indicated column order
             columns = list(zip(*arg))[0]
         else:
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index f59c3e0c8..81f779e02 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -1776,6 +1776,20 @@ class TestGroupBy(unittest.TestCase):
 
         self.assert_(np.array_equal(result.columns, exp_cols))
 
+    def test_multiple_functions_tuples_and_non_tuples(self):
+        # #1359
+
+        funcs = [('foo', 'mean'), 'std']
+        ex_funcs = [('foo', 'mean'), ('std', 'std')]
+
+        result = self.df.groupby('A')['C'].agg(funcs)
+        expected = self.df.groupby('A')['C'].agg(ex_funcs)
+        assert_frame_equal(result, expected)
+
+        result = self.df.groupby('A').agg(funcs)
+        expected = self.df.groupby('A').agg(ex_funcs)
+        assert_frame_equal(result, expected)
+
     def test_more_flexible_frame_multi_function(self):
         from pandas import concat
 
