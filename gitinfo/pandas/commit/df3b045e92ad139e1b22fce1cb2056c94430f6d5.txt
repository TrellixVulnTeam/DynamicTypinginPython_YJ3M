commit df3b045e92ad139e1b22fce1cb2056c94430f6d5
Author: Alexander Ponomaroff <33966871+alexander-ponomaroff@users.noreply.github.com>
Date:   Sat Dec 15 21:08:26 2018 -0500

    DOC: Fix order of the sections in docstrings (#24132)

diff --git a/pandas/_libs/interval.pyx b/pandas/_libs/interval.pyx
index dae88d3b7..1484a1299 100644
--- a/pandas/_libs/interval.pyx
+++ b/pandas/_libs/interval.pyx
@@ -158,6 +158,16 @@ cdef class Interval(IntervalMixin):
         Whether the interval is closed on the left-side, right-side, both or
         neither. See the Notes for more detailed explanation.
 
+    See Also
+    --------
+    IntervalIndex : An Index of Interval objects that are all closed on the
+        same side.
+    cut : Convert continuous data into discrete bins (Categorical
+        of Interval objects).
+    qcut : Convert continuous data into bins (Categorical of Interval objects)
+        based on quantiles.
+    Period : Represents a period of time.
+
     Notes
     -----
     The parameters `left` and `right` must be from the same type, you must be
@@ -226,16 +236,6 @@ cdef class Interval(IntervalMixin):
     >>> volume_1 = pd.Interval('Ant', 'Dog', closed='both')
     >>> 'Bee' in volume_1
     True
-
-    See Also
-    --------
-    IntervalIndex : An Index of Interval objects that are all closed on the
-        same side.
-    cut : Convert continuous data into discrete bins (Categorical
-        of Interval objects).
-    qcut : Convert continuous data into bins (Categorical of Interval objects)
-        based on quantiles.
-    Period : Represents a period of time.
     """
     _typ = "interval"
 
@@ -387,6 +387,11 @@ cdef class Interval(IntervalMixin):
         bool
             ``True`` if the two intervals overlap, else ``False``.
 
+        See Also
+        --------
+        IntervalArray.overlaps : The corresponding method for IntervalArray
+        IntervalIndex.overlaps : The corresponding method for IntervalIndex
+
         Examples
         --------
         >>> i1 = pd.Interval(0, 2)
@@ -409,11 +414,6 @@ cdef class Interval(IntervalMixin):
         >>> i6 = pd.Interval(1, 2, closed='neither')
         >>> i4.overlaps(i6)
         False
-
-        See Also
-        --------
-        IntervalArray.overlaps : The corresponding method for IntervalArray
-        IntervalIndex.overlaps : The corresponding method for IntervalIndex
         """
         if not isinstance(other, Interval):
             msg = '`other` must be an Interval, got {other}'
diff --git a/pandas/_libs/tslibs/nattype.pyx b/pandas/_libs/tslibs/nattype.pyx
index 42ec23599..d61b3aa31 100644
--- a/pandas/_libs/tslibs/nattype.pyx
+++ b/pandas/_libs/tslibs/nattype.pyx
@@ -471,10 +471,6 @@ class NaTType(_NaT):
         """
         Round the Timestamp to the specified resolution
 
-        Returns
-        -------
-        a new Timestamp rounded to the given resolution of `freq`
-
         Parameters
         ----------
         freq : a freq string indicating the rounding resolution
@@ -497,6 +493,10 @@ class NaTType(_NaT):
 
             .. versionadded:: 0.24.0
 
+        Returns
+        -------
+        a new Timestamp rounded to the given resolution of `freq`
+
         Raises
         ------
         ValueError if the freq cannot be converted
diff --git a/pandas/_libs/tslibs/timedeltas.pyx b/pandas/_libs/tslibs/timedeltas.pyx
index 4f5abe4ec..a70e245fa 100644
--- a/pandas/_libs/tslibs/timedeltas.pyx
+++ b/pandas/_libs/tslibs/timedeltas.pyx
@@ -1073,6 +1073,10 @@ cdef class _Timedelta(timedelta):
         -------
         formatted : str
 
+        See Also
+        --------
+        Timestamp.isoformat
+
         Notes
         -----
         The longest component is days, whose value may be larger than
@@ -1095,10 +1099,6 @@ cdef class _Timedelta(timedelta):
         'P0DT0H0M10S'
         >>> pd.Timedelta(days=500.5).isoformat()
         'P500DT12H0MS'
-
-        See Also
-        --------
-        Timestamp.isoformat
         """
         components = self.components
         seconds = '{}.{:0>3}{:0>3}{:0>3}'.format(components.seconds,
@@ -1224,14 +1224,14 @@ class Timedelta(_Timedelta):
         """
         Round the Timedelta to the specified resolution
 
-        Returns
-        -------
-        a new Timedelta rounded to the given resolution of `freq`
-
         Parameters
         ----------
         freq : a freq string indicating the rounding resolution
 
+        Returns
+        -------
+        a new Timedelta rounded to the given resolution of `freq`
+
         Raises
         ------
         ValueError if the freq cannot be converted
diff --git a/pandas/_libs/tslibs/timestamps.pyx b/pandas/_libs/tslibs/timestamps.pyx
index 472ac0ee6..eda2b2fb6 100644
--- a/pandas/_libs/tslibs/timestamps.pyx
+++ b/pandas/_libs/tslibs/timestamps.pyx
@@ -776,10 +776,6 @@ class Timestamp(_Timestamp):
         """
         Round the Timestamp to the specified resolution
 
-        Returns
-        -------
-        a new Timestamp rounded to the given resolution of `freq`
-
         Parameters
         ----------
         freq : a freq string indicating the rounding resolution
@@ -802,6 +798,10 @@ class Timestamp(_Timestamp):
 
             .. versionadded:: 0.24.0
 
+        Returns
+        -------
+        a new Timestamp rounded to the given resolution of `freq`
+
         Raises
         ------
         ValueError if the freq cannot be converted
diff --git a/pandas/core/accessor.py b/pandas/core/accessor.py
index 93b4ce31a..961488ff1 100644
--- a/pandas/core/accessor.py
+++ b/pandas/core/accessor.py
@@ -201,6 +201,10 @@ name : str
     Name under which the accessor should be registered. A warning is issued
     if this name conflicts with a preexisting attribute.
 
+See Also
+--------
+%(others)s
+
 Notes
 -----
 When accessed, your accessor will be initialized with the pandas object
@@ -250,10 +254,6 @@ Back in an interactive IPython session:
     (5.0, 10.0)
     >>> ds.geo.plot()
     # plots data on a map
-
-See Also
---------
-%(others)s
 """
 
 
diff --git a/pandas/core/groupby/groupby.py b/pandas/core/groupby/groupby.py
index 4b915922c..f8f3ea7f0 100644
--- a/pandas/core/groupby/groupby.py
+++ b/pandas/core/groupby/groupby.py
@@ -976,6 +976,14 @@ class GroupBy(_GroupBy):
     name : string
         Most users should ignore this
 
+    Returns
+    -------
+    **Attributes**
+    groups : dict
+        {group name -> group labels}
+    len(grouped) : int
+        Number of groups
+
     Notes
     -----
     After grouping, see aggregate, apply, and transform functions. Here are
@@ -1009,14 +1017,6 @@ class GroupBy(_GroupBy):
 
     See the online documentation for full exposition on these topics and much
     more
-
-    Returns
-    -------
-    **Attributes**
-    groups : dict
-        {group name -> group labels}
-    len(grouped) : int
-        Number of groups
     """
     def _bool_agg(self, val_test, skipna):
         """
diff --git a/pandas/core/resample.py b/pandas/core/resample.py
index 7b842d141..9920fcbcb 100644
--- a/pandas/core/resample.py
+++ b/pandas/core/resample.py
@@ -51,13 +51,13 @@ class Resampler(_GroupBy):
     kind : str or None
         'period', 'timestamp' to override default index treatement
 
-    Notes
-    -----
-    After resampling, see aggregate, apply, and transform functions.
-
     Returns
     -------
     a Resampler of the appropriate type
+
+    Notes
+    -----
+    After resampling, see aggregate, apply, and transform functions.
     """
 
     # to the groupby descriptor
diff --git a/pandas/core/window.py b/pandas/core/window.py
index 8c4803a73..7aa4b51e0 100644
--- a/pandas/core/window.py
+++ b/pandas/core/window.py
@@ -1294,6 +1294,13 @@ class _Rolling_and_Expanding(_Rolling):
         Returned object type is determined by the caller of the %(name)s
         calculation.
 
+    See Also
+    --------
+    pandas.Series.quantile : Computes value at the given quantile over all data
+        in Series.
+    pandas.DataFrame.quantile : Computes values at the given quantile over
+        requested axis in DataFrame.
+
     Examples
     --------
     >>> s = pd.Series([1, 2, 3, 4])
@@ -1310,13 +1317,6 @@ class _Rolling_and_Expanding(_Rolling):
     2    2.5
     3    3.5
     dtype: float64
-
-    See Also
-    --------
-    pandas.Series.quantile : Computes value at the given quantile over all data
-        in Series.
-    pandas.DataFrame.quantile : Computes values at the given quantile over
-        requested axis in DataFrame.
     """)
 
     def quantile(self, quantile, interpolation='linear', **kwargs):
