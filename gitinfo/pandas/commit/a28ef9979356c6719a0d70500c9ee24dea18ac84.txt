commit a28ef9979356c6719a0d70500c9ee24dea18ac84
Author: Chang She <changshe@gmail.com>
Date:   Tue Jul 17 02:36:09 2012 -0400

    ENH: unified color cycle for 2nd yaxis

diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index 0b5aba7ae..1ea907385 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -863,6 +863,8 @@ class LinePlot(MPLPlot):
             data = self._maybe_convert_index(self.data)
             self._make_ts_plot(data)
         else:
+            import matplotlib.pyplot as plt
+            colors = kwargs.pop('colors', str(plt.rcParams['axes.color_cycle']))
             lines = []
             labels = []
             x = self._get_xticks(convert_period=True)
@@ -871,6 +873,8 @@ class LinePlot(MPLPlot):
 
             for i, (label, y) in enumerate(self._iter_data()):
                 ax, style = self._get_ax_and_style(i, label)
+                kwds = kwargs.copy()
+                kwds['color'] = colors[i % len(colors)]
 
                 label = com._stringify(label)
 
@@ -885,6 +889,7 @@ class LinePlot(MPLPlot):
                 ax.grid(self.grid)
 
             if self.legend and not self.subplots:
+                ax = self._get_ax(0)
                 ax.legend(lines, labels, loc='best', title=self.legend_title)
 
     def _maybe_convert_index(self, data):
@@ -917,6 +922,8 @@ class LinePlot(MPLPlot):
 
     def _make_ts_plot(self, data, **kwargs):
         from pandas.tseries.plotting import tsplot
+        import matplotlib.pyplot as plt
+        colors = kwargs.pop('colors', ''.join(plt.rcParams['axes.color_cycle']))
 
         plotf = self._get_plot_function()
         lines = []
@@ -934,9 +941,12 @@ class LinePlot(MPLPlot):
         else:
             for i, col in enumerate(data.columns):
                 ax, style = self._get_ax_and_style(i, col)
+                kwds = kwargs.copy()
+                kwds['color'] = colors[i % len(colors)]
+
                 label = com._stringify(col)
                 newline = tsplot(data[col], plotf, ax=ax, label=label,
-                                 style=style, **kwargs)[0]
+                                 style=style, **kwds)[0]
                 lines.append(newline)
                 labels.append(label)
                 ax.grid(self.grid)
diff --git a/pandas/tseries/plotting.py b/pandas/tseries/plotting.py
index cdb6afe50..86f116fd1 100644
--- a/pandas/tseries/plotting.py
+++ b/pandas/tseries/plotting.py
@@ -77,8 +77,7 @@ def tsplot(series, plotf, **kwargs):
 
     lines = plotf(ax, *args,  **kwargs)
     label = kwargs.get('label', None)
-    if (ax.get_legend() is not None) and (kwargs.get('legend', True)):
-        _reset_legend(ax, lines[0], label)
+    _reset_legend(ax, lines[0], label, kwargs)
 
     # set date formatter, locators and rescale limits
     format_dateaxis(ax, ax.freq)
@@ -87,16 +86,32 @@ def tsplot(series, plotf, **kwargs):
 
     return lines
 
-def _reset_legend(ax, line, label):
+def _reset_legend(ax, line, label, kwargs):
+    ax, leg = _get_ax_legend(ax)
+    if leg and (kwargs.get('legend', True)):
+        ext_lines = leg.get_lines()
+        ext_labels = [x.get_text() for x in leg.get_texts()]
+        title = leg.get_title().get_text()
+        if title == 'None':
+            title = None
+
+        ext_lines.append(line)
+        ext_labels.append(label)
+        ax.legend(ext_lines, ext_labels, loc='best', title=title)
+
+def _get_ax_legend(ax):
     leg = ax.get_legend()
-    ext_lines = leg.get_lines()
-    ext_labels = [x.get_text() for x in leg.get_texts()]
-    ext_lines.append(line)
-    ext_labels.append(label)
-    title = leg.get_title().get_text()
-    if title == 'None':
-        title = None
-    ax.legend(ext_lines, ext_labels, loc='best', title=title)
+
+    other_ax = getattr(ax, 'right_ax', None) or getattr(ax, 'left_ax', None)
+    other_leg = None
+    if other_ax is not None:
+        other_leg = other_ax.get_legend()
+
+    if leg is None:
+        leg = other_leg
+        ax = other_ax
+
+    return ax, leg
 
 def _maybe_resample(series, ax, freq, plotf, kwargs):
     ax_freq = getattr(ax, 'freq', None)
@@ -140,7 +155,7 @@ def _upsample_others(ax, freq, ax_freq, plotf, kwargs,
 
     if other_ax is not None:
         other_leg = other_ax.get_legend()
-        rlines, rlabels = _replot_ax(ax, freq, ax_freq, plotf, kwargs,
+        rlines, rlabels = _replot_ax(other_ax, freq, ax_freq, plotf, kwargs,
                                      via_daily)
         lines.extend(rlines)
         labels.extend(rlabels)
