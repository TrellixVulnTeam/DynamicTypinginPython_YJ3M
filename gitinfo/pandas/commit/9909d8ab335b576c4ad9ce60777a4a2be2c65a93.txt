commit 9909d8ab335b576c4ad9ce60777a4a2be2c65a93
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Apr 4 18:39:29 2012 -0400

    DOC: docs for limit param, #825

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 409464422..0d2cb28df 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1863,6 +1863,8 @@ class DataFrame(NDFrame):
         fill_value : scalar, default np.NaN
             Value to use for missing values. Defaults to NaN, but can be any
             "compatible" value
+        limit : int, default None
+            Maximum size gap to forward or backward fill
 
         Examples
         --------
@@ -1909,6 +1911,8 @@ class DataFrame(NDFrame):
         level : int or name
             Broadcast across a level, matching Index values on the
             passed MultiIndex level
+        limit : int, default None
+            Maximum size gap to forward or backward fill
 
         Examples
         --------
@@ -1983,6 +1987,8 @@ class DataFrame(NDFrame):
         other : DataFrame
         method : string or None
         copy : boolean, default True
+        limit : int, default None
+            Maximum size gap to forward or backward fill
 
         Notes
         -----
@@ -2437,6 +2443,8 @@ class DataFrame(NDFrame):
             other views on this DataFrame, like if you took a no-copy slice of
             an existing DataFrame, for example a column in a DataFrame. Returns
             a reference to the filled object, which is self if inplace=True
+        limit : int, default None
+            Maximum size gap to forward or backward fill
 
         See also
         --------
diff --git a/pandas/core/index.py b/pandas/core/index.py
index bee04201c..6b8f83f15 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -58,10 +58,6 @@ class Index(np.ndarray):
     ----
     An Index instance can **only** contain hashable objects
     """
-    # _algos = {
-    #     'groupby' : _gin.groupby_index,
-    # }
-
     # Cython methods
     _groupby = lib.groupby_object
     _arrmap = lib.arrmap_object
@@ -983,8 +979,6 @@ class Index(np.ndarray):
 
 class Int64Index(Index):
 
-    # _is_monotonic = lib.is_monotonic_int64
-
     _groupby = lib.groupby_int64
     _arrmap = lib.arrmap_int64
     _left_indexer = lib.left_join_indexer_int64
@@ -1172,8 +1166,6 @@ class DatetimeIndex(Int64Index):
         time on or just past end argument
     """
 
-    # _is_monotonic  = _wrap_i8_function(lib.is_monotonic_int64)
-
     _inner_indexer = _join_i8_wrapper(lib.inner_join_indexer_int64)
     _outer_indexer = _join_i8_wrapper(lib.outer_join_indexer_int64)
     _left_indexer  = _join_i8_wrapper(lib.left_join_indexer_int64,
@@ -1238,8 +1230,7 @@ class DatetimeIndex(Int64Index):
 
             useCache = datetools._will_use_cache(offset)
 
-            start, end, tz = datetools._figure_out_timezone(start, end,
-                                                                tz)
+            start, end, tz = datetools._figure_out_timezone(start, end, tz)
 
             useCache = useCache and datetools._naive_in_cache_range(start, end)
 
@@ -1303,8 +1294,8 @@ class DatetimeIndex(Int64Index):
         else:
             subarr = np.array(data, dtype='M8[us]', copy=copy)
 
-        # TODO: this is horribly inefficient. If user passes data + offset,
-        # we need to make sure data points conform. Punting on this
+        # TODO: this is horribly inefficient. If user passes data + offset, we
+        # need to make sure data points conform. Punting on this
 
         if offset is not None:
             for i, ts in enumerate(subarr):
@@ -1423,7 +1414,7 @@ class DatetimeIndex(Int64Index):
 
     @property
     def asi8(self):
-        # to do: cache me?
+        # do not cache or you'll create a memory leak
         return self.values.view('i8')
 
     @property
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 3b95ae5ff..b797ba5bf 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1890,6 +1890,8 @@ copy : boolean, default False
         fill_value : scalar, default np.NaN
             Value to use for missing values. Defaults to NaN, but can be any
             "compatible" value
+        limit : int, default None
+            Maximum size gap to forward or backward fill
 
         Returns
         -------
@@ -1921,6 +1923,8 @@ copy : boolean, default False
         other : Series
         method : string or None
             See Series.reindex docstring
+        limit : int, default None
+            Maximum size gap to forward or backward fill
 
         Notes
         -----
@@ -1968,6 +1972,8 @@ copy : boolean, default False
             If True, fill the Series in place. Note: this will modify any other
             views on this Series, for example a column in a DataFrame. Returns
             a reference to the filled object, which is self if inplace=True
+        limit : int, default None
+            Maximum size gap to forward or backward fill
 
         See also
         --------
