commit 3e2a6f0baac228b98ff1e576339e6b625077189d
Author: Adam Klein <adamklein@gmail.com>
Date:   Fri Jan 6 10:25:12 2012 -0500

    ENH: fix to another corner case of #395, added test

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 77a9e84a3..605c908ac 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -379,7 +379,7 @@ def set_printoptions(precision=None, column_space=None, max_rows=None,
     """
     global _float_format, _column_space, _max_rows, _max_columns
     if precision is not None:
-        float_format = '%.' + '%d' % precision + 'g'
+        float_format = '% .' + '%d' % precision + 'g'
         _float_format = lambda x: float_format % x
     if column_space is not None:
         _column_space = column_space
@@ -491,7 +491,7 @@ def set_eng_float_format(precision=3, use_eng_prefix=False):
     _float_format = EngFormatter(precision, use_eng_prefix)
     _column_space = max(12, precision + 9)
 
-_float_format = lambda x: '% .4g' % x
+_float_format = lambda x: '% .6g' % x
 _column_space = 12
 _max_rows = 500
 _max_columns = 0
@@ -521,7 +521,7 @@ def _format(s, space=None, na_rep=None, float_format=None, col_width=None):
             formatted = _float_format(s)
 
         # if we pass col_width, pad-zero the floats so all are same in column
-        if col_width is not None and formatted != ' 0':
+        if col_width is not None and '.' in formatted:
             padzeros = col_width - len(formatted)
             if padzeros > 0 and 'e' in formatted:
                 num, exp = formatted.split('e')
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 3c015057e..88196ae2a 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1734,11 +1734,21 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         assert(df_s == expected)
 
+    def test_to_string_float_formatting(self):
+        com.set_printoptions(precision=6, column_space=12)
+
+        df = DataFrame({'x' : [0, 0.25, 3456.000, 1.64e+6, 1.7e+8, 1.253456]})
+        df_s = df.to_string()
+
+        expected = '   x       \n0  0       \n1  0.250000\n' \
+                   '2  3456    \n3  1.64e+06\n4  1.70e+08\n5  1.253460'
+        assert(df_s == expected)
+
 
     def test_to_html(self):
         # big mixed
         biggie = DataFrame({'A' : randn(1000),
-                             'B' : tm.makeStringIndex(1000)},
+                            'B' : tm.makeStringIndex(1000)},
                             index=range(1000))
 
         biggie['A'][:20] = nan
