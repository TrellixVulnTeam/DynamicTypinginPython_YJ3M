commit 628dfba239865adc09c94108b288bcb60c619950
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Sat Feb 22 08:08:23 2020 -0800

    BUG: Fix incorrect _is_scalar_access check in iloc (#32085)

diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 579daae2b..ac03843a0 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -3467,13 +3467,13 @@ class NDFrame(PandasObject, SelectionMixin, indexing.IndexingMixin):
             res._is_copy = self._is_copy
         return res
 
-    def _iget_item_cache(self, item):
+    def _iget_item_cache(self, item: int):
         """Return the cached item, item represents a positional indexer."""
         ax = self._info_axis
         if ax.is_unique:
             lower = self._get_item_cache(ax[item])
         else:
-            lower = self._take_with_is_copy(item, axis=self._info_axis_number)
+            return self._ixs(item, axis=1)
         return lower
 
     def _box_item_values(self, key, values):
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 745456109..c53e690b5 100755
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -1414,10 +1414,6 @@ class _iLocIndexer(_LocationIndexer):
             if not is_integer(k):
                 return False
 
-            ax = self.obj.axes[i]
-            if not ax.is_unique:
-                return False
-
         return True
 
     def _validate_integer(self, key: int, axis: int) -> None:
diff --git a/pandas/tests/indexing/test_iloc.py b/pandas/tests/indexing/test_iloc.py
index 500bd1853..683d4f260 100644
--- a/pandas/tests/indexing/test_iloc.py
+++ b/pandas/tests/indexing/test_iloc.py
@@ -47,6 +47,17 @@ class TestiLoc(Base):
 
 class TestiLoc2:
     # TODO: better name, just separating out things that dont rely on base class
+
+    def test_is_scalar_access(self):
+        # GH#32085 index with duplicates doesnt matter for _is_scalar_access
+        index = pd.Index([1, 2, 1])
+        ser = pd.Series(range(3), index=index)
+
+        assert ser.iloc._is_scalar_access((1,))
+
+        df = ser.to_frame()
+        assert df.iloc._is_scalar_access((1, 0,))
+
     def test_iloc_exceeds_bounds(self):
 
         # GH6296
