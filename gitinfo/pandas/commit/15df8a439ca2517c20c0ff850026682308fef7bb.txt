commit 15df8a439ca2517c20c0ff850026682308fef7bb
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Wed Jul 10 11:37:47 2019 -0700

    BUG: appending a Timedelta to Series incorrectly casts to integer (#27303)

diff --git a/doc/source/whatsnew/v0.25.0.rst b/doc/source/whatsnew/v0.25.0.rst
index daca08d69..237d2fec8 100644
--- a/doc/source/whatsnew/v0.25.0.rst
+++ b/doc/source/whatsnew/v0.25.0.rst
@@ -1050,6 +1050,7 @@ Indexing
 - Bug in :class:`Categorical` and  :class:`CategoricalIndex` with :class:`Interval` values when using the ``in`` operator (``__contains``) with objects that are not comparable to the values in the ``Interval`` (:issue:`23705`)
 - Bug in :meth:`DataFrame.loc` and :meth:`DataFrame.iloc` on a :class:`DataFrame` with a single timezone-aware datetime64[ns] column incorrectly returning a scalar instead of a :class:`Series` (:issue:`27110`)
 - Bug in :class:`CategoricalIndex` and :class:`Categorical` incorrectly raising ``ValueError`` instead of ``TypeError`` when a list is passed using the ``in`` operator (``__contains__``) (:issue:`21729`)
+- Bug in setting a new value in a :class:`Series` with a :class:`Timedelta` object incorrectly casting the value to an integer (:issue:`22717`)
 -
 
 Missing
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 1f25be8b9..c31d6538a 100755
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -20,6 +20,7 @@ from pandas.core.dtypes.common import (
     is_sequence,
     is_sparse,
 )
+from pandas.core.dtypes.concat import _concat_compat
 from pandas.core.dtypes.generic import ABCDataFrame, ABCSeries
 from pandas.core.dtypes.missing import _infer_fill_value, isna
 
@@ -432,11 +433,9 @@ class _NDFrameIndexer(_NDFrameIndexerBase):
                     # this preserves dtype of the value
                     new_values = Series([value])._values
                     if len(self.obj._values):
-                        try:
-                            new_values = np.concatenate([self.obj._values, new_values])
-                        except TypeError:
-                            as_obj = self.obj.astype(object)
-                            new_values = np.concatenate([as_obj, new_values])
+                        # GH#22717 handle casting compatibility that np.concatenate
+                        #  does incorrectly
+                        new_values = _concat_compat([self.obj._values, new_values])
                     self.obj._data = self.obj._constructor(
                         new_values, index=new_index, name=self.obj.name
                     )._data
diff --git a/pandas/tests/series/indexing/test_indexing.py b/pandas/tests/series/indexing/test_indexing.py
index c8342c54e..1fb1dd3bb 100644
--- a/pandas/tests/series/indexing/test_indexing.py
+++ b/pandas/tests/series/indexing/test_indexing.py
@@ -654,6 +654,29 @@ def test_timedelta_assignment():
     tm.assert_series_equal(s, expected)
 
 
+@pytest.mark.parametrize(
+    "td",
+    [
+        pd.Timedelta("9 days"),
+        pd.Timedelta("9 days").to_timedelta64(),
+        pd.Timedelta("9 days").to_pytimedelta(),
+    ],
+)
+def test_append_timedelta_does_not_cast(td):
+    # GH#22717 inserting a Timedelta should _not_ cast to int64
+    expected = pd.Series(["x", td], index=[0, "td"], dtype=object)
+
+    ser = pd.Series(["x"])
+    ser["td"] = td
+    tm.assert_series_equal(ser, expected)
+    assert isinstance(ser["td"], pd.Timedelta)
+
+    ser = pd.Series(["x"])
+    ser.loc["td"] = pd.Timedelta("9 days")
+    tm.assert_series_equal(ser, expected)
+    assert isinstance(ser["td"], pd.Timedelta)
+
+
 def test_underlying_data_conversion():
     # GH 4080
     df = DataFrame({c: [1, 2, 3] for c in ["a", "b", "c"]})
