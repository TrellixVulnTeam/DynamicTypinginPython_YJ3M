commit 61793b68a840c5c958e347a79c776c1460a7c01c
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Dec 7 20:12:01 2012 -0500

    REF: DataFrame inplace methods return None also. #1893

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index f74448386..19a3e87e8 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -643,7 +643,8 @@ class DataFrame(NDFrame):
         """
         Return a string representation for a particular DataFrame
 
-        Invoked by unicode(df) in py2 only. Yields a Unicode String in both py2/py3.
+        Invoked by unicode(df) in py2 only. Yields a Unicode String in both
+        py2/py3.
         """
         buf = StringIO(u"")
         if self._need_info_repr_():
@@ -2717,7 +2718,7 @@ class DataFrame(NDFrame):
         index._cleanup()
 
         frame.index = index
-        return frame
+        return frame if not inplace else None
 
     def reset_index(self, level=None, drop=False, inplace=False, col_level=0,
                     col_fill=''):
@@ -2813,7 +2814,7 @@ class DataFrame(NDFrame):
             new_obj.insert(0, name, _maybe_cast(values))
 
         new_obj.index = new_index
-        return new_obj
+        return new_obj if not inplace else None
 
     delevel = deprecate('delevel', reset_index)
 
@@ -2971,7 +2972,6 @@ class DataFrame(NDFrame):
             inds, = (-duplicated).nonzero()
             self._data = self._data.take(inds)
             self._clear_item_cache()
-            return self
         else:
             return self[-duplicated]
 
@@ -3113,7 +3113,6 @@ class DataFrame(NDFrame):
                 self._data = self._data.take(indexer)
 
             self._clear_item_cache()
-            return self
         else:
             return self.take(indexer, axis=axis)
 
@@ -3155,7 +3154,6 @@ class DataFrame(NDFrame):
                 self._data = self._data.take(indexer)
 
             self._clear_item_cache()
-            return self
         else:
             return self.take(indexer, axis=axis)
 
@@ -3283,7 +3281,6 @@ class DataFrame(NDFrame):
 
         if inplace:
             self._data = new_data
-            return self
         else:
             return self._constructor(new_data)
 
@@ -3363,7 +3360,7 @@ class DataFrame(NDFrame):
 
                 if inplace:
                     self._data = new_data
-                    return self
+                    return None
                 else:
                     return self._constructor(new_data)
             else:
@@ -3374,7 +3371,7 @@ class DataFrame(NDFrame):
                                                   inplace=inplace)
                     if inplace:
                         self._data = new_data
-                        return self
+                        return None
                     else:
                         return self._constructor(new_data)
 
@@ -3397,7 +3394,7 @@ class DataFrame(NDFrame):
                 if k in rs:
                     rs[k].replace(v, method=method, limit=limit,
                                   inplace=True)
-            return rs
+            return rs if not inplace else None
 
         else:
             new_blocks = []
@@ -3410,7 +3407,6 @@ class DataFrame(NDFrame):
 
             if inplace:
                 self._data = new_data
-                return self
             else:
                 return self._constructor(new_data)
 
@@ -3419,21 +3415,21 @@ class DataFrame(NDFrame):
         for k, v in value.iteritems():
             if k in rs:
                 rs[k].replace(to_replace, v, inplace=True)
-        return rs
+        return rs if not inplace else None
 
     def _replace_src_dict(self, to_replace, value, inplace):
         rs = self if inplace else self.copy()
         for k, src in to_replace.iteritems():
             if k in rs:
                 rs[k].replace(src, value, inplace=True)
-        return rs
+        return rs if not inplace else None
 
     def _replace_both_dict(self, to_replace, value, inplace):
         rs = self if inplace else self.copy()
         for c, src in to_replace.iteritems():
             if c in value and c in rs:
                 rs[c].replace(src, value[c], inplace=True)
-        return rs
+        return rs if not inplace else None
 
     #----------------------------------------------------------------------
     # Rename
@@ -3482,7 +3478,7 @@ class DataFrame(NDFrame):
         if columns is not None:
             result._rename_columns_inplace(columns_f)
 
-        return result
+        return result if not inplace else None
 
     def _rename_index_inplace(self, mapper):
         self._data = self._data.rename_axis(mapper, axis=1)
@@ -5142,10 +5138,9 @@ class DataFrame(NDFrame):
 
         if inplace:
             np.putmask(self.values, cond, other)
-            return self
-
-        rs = np.where(cond, self, other)
-        return self._constructor(rs, self.index, self.columns)
+        else:
+            rs = np.where(cond, self, other)
+            return self._constructor(rs, self.index, self.columns)
 
     def mask(self, cond):
         """
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 1351c21ab..5355db8ea 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -623,7 +623,6 @@ class NDFrame(PandasObject):
         """
         if inplace:
             self._consolidate_inplace()
-            return self
         else:
             cons_data = self._data.consolidate()
             if cons_data is self._data:
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 664c56b82..439f15b99 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -771,7 +771,9 @@ class CheckIndexing(object):
         out = b.ix[:3]
         assert_frame_equal(out, b)
 
-        b.sort_index(inplace=True)
+        res = b.sort_index(inplace=True)
+        self.assertTrue(res is None)
+
         df = df_orig.copy()
         df.ix[[0, 1, 2]] = b
         out = df.ix[[0, 1, 2]].reindex(b.index)
@@ -1580,11 +1582,16 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         # inplace, single
         df2 = df.copy()
-        df2.set_index('C', inplace=True)
+
+        res = df2.set_index('C', inplace=True)
+        self.assertTrue(res is None)
+
         assert_frame_equal(df2, expected)
 
         df3 = df.copy()
-        df3.set_index('C', drop=False, inplace=True)
+        res = df3.set_index('C', drop=False, inplace=True)
+        self.assertTrue(res is None)
+
         assert_frame_equal(df3, expected_nodrop)
 
         # create new object, multi-column
@@ -4478,7 +4485,9 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         # single column
         df = orig.copy()
-        df.drop_duplicates('A', inplace=True)
+        res = df.drop_duplicates('A', inplace=True)
+        self.assertTrue(res is None)
+
         expected = orig[:2]
         result = df
         assert_frame_equal(result, expected)
@@ -4491,7 +4500,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         # multi column
         df = orig.copy()
-        df.drop_duplicates(['A', 'B'], inplace=True)
+        res = df.drop_duplicates(['A', 'B'], inplace=True)
+        self.assertTrue(res is None)
         expected = orig.ix[[0, 1, 2, 3]]
         result = df
         assert_frame_equal(result, expected)
@@ -4581,18 +4591,18 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         expected = df.fillna(value=0)
         self.assert_(expected is not df)
 
-        df2 = df.fillna(value=0, inplace=True)
-        self.assert_(df2 is df)
-        assert_frame_equal(df2, expected)
+        res = df.fillna(value=0, inplace=True)
+        self.assert_(res is None)
+        assert_frame_equal(df, expected)
 
         df[1][:4] = np.nan
         df[3][-4:] = np.nan
         expected = df.fillna(method='ffill')
         self.assert_(expected is not df)
 
-        df2 = df.fillna(method='ffill', inplace=True)
-        self.assert_(df2 is df)
-        assert_frame_equal(df2, expected)
+        res = df.fillna(method='ffill', inplace=True)
+        self.assert_(res is None)
+        assert_frame_equal(df, expected)
 
     def test_fillna_dict_series(self):
         df = DataFrame({'a': [nan, 1, 2, nan, nan],
@@ -4641,11 +4651,13 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         self.tsframe['A'][-5:] = nan
 
         tsframe = self.tsframe.copy()
-        tsframe.replace(nan, 0, inplace=True)
+        res = tsframe.replace(nan, 0, inplace=True)
+        self.assertTrue(res is None)
         assert_frame_equal(tsframe, self.tsframe.fillna(0))
 
         tsframe = self.tsframe.copy()
-        tsframe.replace(nan, method='pad', inplace=True)
+        res = tsframe.replace(nan, method='pad', inplace=True)
+        self.assertTrue(res is None)
         assert_frame_equal(tsframe, self.tsframe.fillna(method='pad'))
 
         # mixed type
@@ -4657,7 +4669,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         assert_frame_equal(result, expected)
 
         tsframe = self.tsframe.copy()
-        tsframe.replace([nan], [0], inplace=True)
+        res = tsframe.replace([nan], [0], inplace=True)
+        self.assertTrue(res is None)
         assert_frame_equal(tsframe, self.tsframe.fillna(0))
 
     def test_replace(self):
@@ -5336,7 +5349,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         df = DataFrame(np.random.randn(5, 3))
 
         expected = df.mask(df < 0)
-        df.where(df >= 0, np.nan, inplace=True)
+        res = df.where(df >= 0, np.nan, inplace=True)
+        self.assertTrue(res is None)
         assert_frame_equal(df, expected)
 
     def test_mask(self):
@@ -5430,7 +5444,10 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         c_id = id(self.frame['C'])
         frame = self.frame.copy()
-        frame.rename(columns={'C' : 'foo'}, inplace=True)
+        res = frame.rename(columns={'C' : 'foo'}, inplace=True)
+
+        self.assertTrue(res is None)
+
         self.assert_('C' not in frame)
         self.assert_('foo' in frame)
         self.assert_(id(frame['foo']) != c_id)
@@ -5990,7 +6007,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         unordered = frame.ix[[3, 2, 4, 1]]
         a_id = id(unordered['A'])
         df = unordered.copy()
-        df.sort_index(inplace=True)
+        res = df.sort_index(inplace=True)
+        self.assertTrue(res is None)
         expected = frame
         assert_frame_equal(df, expected)
         self.assert_(a_id != id(df['A']))
@@ -6008,7 +6026,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         assert_frame_equal(df, expected)
 
         df = unordered.copy()
-        df.sort_index(axis=1, ascending=False, inplace=True)
+        res = df.sort_index(axis=1, ascending=False, inplace=True)
+        self.assertTrue(res is None)
         expected = frame.ix[:, ::-1]
         assert_frame_equal(df, expected)
 
@@ -6046,7 +6065,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
                           columns=['A', 'B', 'C', 'D'])
 
         sorted_df = frame.copy()
-        sorted_df.sort(columns='A', inplace=True)
+        res = sorted_df.sort(columns='A', inplace=True)
+        self.assertTrue(res is None)
         expected = frame.sort_index(by='A')
         assert_frame_equal(sorted_df, expected)
 
@@ -6056,7 +6076,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         assert_frame_equal(sorted_df, expected)
 
         sorted_df = frame.copy()
-        sorted_df.sort(columns=['A', 'B'], ascending=False, inplace=True)
+        res = sorted_df.sort(columns=['A', 'B'], ascending=False, inplace=True)
+        self.assertTrue(res is None)
         expected = frame.sort_index(by=['A', 'B'], ascending=False)
         assert_frame_equal(sorted_df, expected)
 
@@ -7126,7 +7147,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         #test resetting in place
         df = self.frame.copy()
         resetted = self.frame.reset_index()
-        df.reset_index(inplace=True)
+        res = df.reset_index(inplace=True)
+        self.assertTrue(res is None)
         assert_frame_equal(df, resetted)
 
         frame = self.frame.reset_index().set_index(['index', 'A', 'B'])
@@ -7251,7 +7273,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
 
         self.frame['F'] = 8.
         self.assert_(len(self.frame._data.blocks) == 3)
-        self.frame.consolidate(inplace=True)
+        res = self.frame.consolidate(inplace=True)
+        self.assertTrue(res is None)
         self.assert_(len(self.frame._data.blocks) == 1)
 
     def test_consolidate_inplace(self):
