commit dfcf74679a273395cc9d7b3db78a1fbbc17c4f57
Author: Wouter Overmeire <lodagro@gmail.com>
Date:   Fri Apr 12 14:59:15 2013 +0200

    WIP: finish on #2856

diff --git a/pandas/core/config_init.py b/pandas/core/config_init.py
index 9f599ffe9..4e036d260 100644
--- a/pandas/core/config_init.py
+++ b/pandas/core/config_init.py
@@ -40,10 +40,12 @@ pc_max_rows_doc = """
 pc_max_cols_doc = """
 : int
     max_rows and max_columns are used in __repr__() methods to decide if
-    to_string() or info() is used to render an object to a string.
-    Either one, or both can be set to 0 (experimental). Pandas will figure
-    out how big the terminal is and will not display more rows or/and
-    columns that can fit on it.
+    to_string() or info() is used to render an object to a string.  In case
+    python/IPython is running in a terminal this can be set to 0 and pandas
+    will correctly auto-detect the width the terminal and swap to a smaller
+    format in case all columns would not fit vertically. The IPython notebook,
+    IPython qtconsole, or IDLE do not run in a terminal and hence it is not
+    possible to do correct auto-detection.
 """
 
 pc_max_info_cols_doc = """
@@ -119,6 +121,26 @@ pc_line_width_doc = """
     When printing wide DataFrames, this is the width of each line.
 """
 
+pc_line_width_deprecation_warning = """\
+use display.width instead (currently both are indentical) 
+"""
+
+pc_width_doc = """
+: int
+    Width of the display. In case python/IPython is running in a terminal this
+    can be set to 0 and pandas will correctly auto-detect the width. Note that
+    the IPython notebook, IPython qtconsole, or IDLE do not run in a terminal
+    and hence it is not possible to correctly detect the width.
+"""
+
+pc_height_doc = """
+: int
+    Height of the display. In case python/IPython is running in a terminal this
+    can be set to 0 and pandas will auto-detect the width. Note that the
+    IPython notebook, IPython qtconsole, or IDLE do not run in a terminal,
+    and hence it is not possible to correctly detect the height.
+"""
+
 pc_chop_threshold_doc = """
 : float or None
     if set to a float value, all float values smaller then the given threshold
@@ -212,9 +234,11 @@ with cf.config_prefix('display'):
     cf.register_option('mpl_style', None, pc_mpl_style_doc,
                        validator=is_one_of_factory([None, False, 'default']),
                        cb=mpl_style_cb)
-    cf.register_option('height', 100, 'TODO', validator=is_int)
-    cf.register_option('width',80, 'TODO', validator=is_int)
-cf.deprecate_option('display.line_width', msg='TODO', rkey='display.width')
+    cf.register_option('height', 100, pc_height_doc, validator=is_int)
+    cf.register_option('width',80, pc_width_doc, validator=is_int)
+cf.deprecate_option('display.line_width',
+                    msg=pc_line_width_deprecation_warning,
+                    rkey='display.width')
 
 tc_sim_interactive_doc = """
 : boolean
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index ecc35a3ee..ab7d23acf 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -599,32 +599,38 @@ class DataFrame(NDFrame):
     def __nonzero__(self):
         raise ValueError("Cannot call bool() on DataFrame.")
 
-    def _repr_fits_boundaries_(self):
+    def _repr_fits_vertical_(self):
         """
-        Check if repr fits in boundaries imposed by the following sets of
-        display options:
-            * width, height
-            * max_rows, max_columns
-        In case off non-interactive session, no boundaries apply.
+        Check if full repr fits in vertical boundaries imposed by the display
+        options height and max_columns.  In case off non-interactive session,
+        no boundaries apply.
         """
         if not com.in_interactive_session():
             return True
 
         terminal_width, terminal_height = get_terminal_size()
 
-        # check vertical boundaries (excluding column axis area)
+        # excluding column axis area
         max_rows = get_option("display.max_rows") or terminal_height
         display_height = get_option("display.height") or terminal_height
-        if len(self.index) > min(max_rows, display_height):
-            return False
+        return len(self.index) <= min(max_rows, display_height)
+
+    def _repr_fits_horizontal_(self):
+        """
+        Check if full repr fits in horizontal boundaries imposed by the display
+        options width and max_columns. In case off non-interactive session, no
+        boundaries apply.
+        """
+        if not com.in_interactive_session():
+            return True
+
+        terminal_width, terminal_height = get_terminal_size()
 
-        # check horizontal boundaries (including index axis area)
         max_columns = get_option("display.max_columns")
         display_width = get_option("display.width") or terminal_width
         nb_columns = len(self.columns)
-        if max_columns and nb_columns > max_columns:
-            return False
-        if nb_columns > (display_width // 2):
+        if ((max_columns and nb_columns > max_columns) or
+            (nb_columns > (display_width // 2))):
             return False
 
         buf = StringIO()
@@ -663,7 +669,9 @@ class DataFrame(NDFrame):
         py2/py3.
         """
         buf = StringIO(u"")
-        if self._repr_fits_boundaries_():
+        fits_vertical = self._repr_fits_vertical_()
+        fits_horizontal = self._repr_fits_horizontal_()
+        if fits_vertical and fits_horizontal:
             self.to_string(buf=buf)
         else:
             terminal_width, terminal_height = get_terminal_size()
@@ -671,7 +679,7 @@ class DataFrame(NDFrame):
             # Expand or info? Decide based on option display.expand_frame_repr
             # and keep it sane for the number of display rows used by the
             # expanded repr.
-            if (get_option("display.expand_frame_repr") and
+            if (get_option("display.expand_frame_repr") and fits_vertical and
                 len(self.columns) < max_rows):
                 line_width = get_option("display.width") or terminal_width
                 self.to_string(buf=buf, line_width=line_width)
@@ -703,7 +711,7 @@ class DataFrame(NDFrame):
             raise ValueError('Disable HTML output in QtConsole')
 
         if get_option("display.notebook_repr_html"):
-            if self._repr_fits_boundaries_():
+            if self._repr_fits_horizontal_() and self._repr_fits_vertical_():
                 return ('<div style="max-height:1000px;'
                         'max-width:1500px;overflow:auto;">\n' +
                         self.to_html() + '\n</div>')
@@ -713,7 +721,10 @@ class DataFrame(NDFrame):
                 verbose = (max_info_rows is None or
                            self.shape[0] <= max_info_rows)
                 self.info(buf=buf, verbose=verbose)
-                info = buf.getvalue().replace('<', '&lt').replace('>', '&gt')
+                info = buf.getvalue()
+                info = info.replace('&', r'&amp;')
+                info = info.replace('<', r'&lt')
+                info = info.replace('>', r'&gt')
                 return ('<pre>\n' + info + '\n</pre>')
         else:
             return None
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index 0a94176a6..adbbed817 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -159,20 +159,26 @@ class TestDataFrameFormatting(unittest.TestCase):
     def test_expand_frame_repr(self):
         df_small = DataFrame('hello', [0], [0])
         df_wide = DataFrame('hello', [0], range(10))
+        df_tall = DataFrame('hello', range(30), range(5))
 
         with option_context('mode.sim_interactive', True):
-            with option_context('display.width', 50):
+            with option_context('display.width', 50, 
+                                'display.height', 20):
                 with option_context('display.expand_frame_repr', True):
                     self.assertFalse(has_info_repr(df_small))
                     self.assertFalse(has_expanded_repr(df_small))
                     self.assertFalse(has_info_repr(df_wide))
                     self.assertTrue(has_expanded_repr(df_wide))
+                    self.assertTrue(has_info_repr(df_tall))
+                    self.assertFalse(has_expanded_repr(df_tall))
 
                 with option_context('display.expand_frame_repr', False):
                     self.assertFalse(has_info_repr(df_small))
                     self.assertFalse(has_expanded_repr(df_small))
                     self.assertTrue(has_info_repr(df_wide))
                     self.assertFalse(has_expanded_repr(df_wide))
+                    self.assertTrue(has_info_repr(df_tall))
+                    self.assertFalse(has_expanded_repr(df_tall))
 
     def test_repr_max_columns_max_rows(self):
         term_width, term_height = get_terminal_size()
@@ -183,21 +189,29 @@ class TestDataFrameFormatting(unittest.TestCase):
             index = ['%05d' % i for i in range(n)]
             return DataFrame(0, index, index)
 
+        df6 = mkframe(6)
+        df10 = mkframe(10)
         with option_context('mode.sim_interactive', True):
             with option_context('display.width', term_width * 2):
                 with option_context('display.max_rows', 5,
                                     'display.max_columns', 5):
                     self.assertFalse(has_expanded_repr(mkframe(4)))
                     self.assertFalse(has_expanded_repr(mkframe(5)))
-                    self.assertFalse(has_expanded_repr(mkframe(6)))
-                    self.assertTrue(has_info_repr(mkframe(6)))
+                    self.assertFalse(has_expanded_repr(df6))
+                    self.assertTrue(has_info_repr(df6))
 
                 with option_context('display.max_rows', 20,
                                     'display.max_columns', 5):
                     # Out off max_columns boundary, but no extending
-                    # occurs ... can improve?
-                    self.assertFalse(has_expanded_repr(mkframe(6)))
-                    self.assertFalse(has_info_repr(mkframe(6)))
+                    # since not exceeding width
+                    self.assertFalse(has_expanded_repr(df6))
+                    self.assertFalse(has_info_repr(df6))
+                    
+                with option_context('display.max_rows', 9,
+                                    'display.max_columns', 10):
+                    # out vertical bounds can not result in exanded repr
+                    self.assertFalse(has_expanded_repr(df10))
+                    self.assertTrue(has_info_repr(df10))
 
             with option_context('display.max_columns', 0,
                                 'display.max_rows', term_width * 20,
