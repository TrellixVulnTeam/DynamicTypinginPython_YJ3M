commit a4c4edeb2a7e5c84b5a82a9743a12a4b66e7bcf1
Author: ante328 <ante328@hotmail.com>
Date:   Tue Aug 22 01:55:10 2017 +0200

    BUG: fillna returns frame when inplace=True if value is a dict (#16156) (#17279)

diff --git a/doc/source/whatsnew/v0.21.0.txt b/doc/source/whatsnew/v0.21.0.txt
index 0d2c52c70..dd06114f6 100644
--- a/doc/source/whatsnew/v0.21.0.txt
+++ b/doc/source/whatsnew/v0.21.0.txt
@@ -318,7 +318,7 @@ Conversion
 - Fix :func:`DataFrame.memory_usage` to support PyPy. Objects on PyPy do not have a fixed size, so an approximation is used instead (:issue:`17228`)
 - Fixed the return type of ``IntervalIndex.is_non_overlapping_monotonic`` to be a Python ``bool`` for consistency with similar attributes/methods.  Previously returned a ``numpy.bool_``. (:issue:`17237`)
 - Bug in ``IntervalIndex.is_non_overlapping_monotonic`` when intervals are closed on both sides and overlap at a point (:issue:`16560`)
-
+- Bug in :func:`Series.fillna` returns frame when ``inplace=True`` and ``value`` is dict (:issue:`16156`)
 
 Indexing
 ^^^^^^^^
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 5c9e1f22d..e84e4eac3 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -4135,7 +4135,8 @@ class NDFrame(PandasObject, SelectionMixin):
                         continue
                     obj = result[k]
                     obj.fillna(v, limit=limit, inplace=True, downcast=downcast)
-                return result
+                return result if not inplace else None
+
             elif not is_list_like(value):
                 new_data = self._data.fillna(value=value, limit=limit,
                                              inplace=inplace,
diff --git a/pandas/tests/frame/test_missing.py b/pandas/tests/frame/test_missing.py
index 77f035768..ebd15b318 100644
--- a/pandas/tests/frame/test_missing.py
+++ b/pandas/tests/frame/test_missing.py
@@ -407,6 +407,9 @@ class TestDataFrameMissingData(TestData):
         df.fillna(value=0, inplace=True)
         tm.assert_frame_equal(df, expected)
 
+        expected = df.fillna(value={0: 0}, inplace=True)
+        assert expected is None
+
         df[1][:4] = np.nan
         df[3][-4:] = np.nan
         expected = df.fillna(method='ffill')
