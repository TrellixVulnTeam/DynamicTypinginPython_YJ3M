commit 86d27ccf1769d408822398483f21135a8b679059
Author: y-p <yoval@gmx.com>
Date:   Sun Jan 26 22:30:38 2014 +0200

    CLN: remove docstrings from a handful of tests for consistency and nose -v output

diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index a764f9c1a..e4af6b601 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -63,8 +63,10 @@ looking for a quick way to help out.
     - Add deprecation warnings where needed.
   - Performance matters. Make sure your PR hasn't introduced perf regressions by using `test_perf.sh`.
   - Docstrings follow the [numpydoc](https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt) format.
+  - Write tests.
   - When writing tests, use 2.6 compatible `self.assertFoo` methods. Some polyfills such as `assertRaises`
     can be found in `pandas.util.testing`.
+  - Do not attach doctrings to tests. Make the test itself readable and use comments if needed.
   - Generally, pandas source files should not contain attributions. You can include a "thanks to..."
     in the release changelog. The rest is `git blame`/`git log`.
   - When you start working on a PR, start by creating a new branch pointing at the latest
diff --git a/pandas/io/tests/test_data.py b/pandas/io/tests/test_data.py
index bb4425198..cbd7a0fb7 100644
--- a/pandas/io/tests/test_data.py
+++ b/pandas/io/tests/test_data.py
@@ -168,8 +168,7 @@ class TestYahoo(tm.TestCase):
 
     @network
     def test_get_components_nasdaq_100(self):
-        """as of 7/12/13 the conditional will test false because the link is
-        invalid"""
+        # as of 7/12/13 the conditional will test false because the link is invalid
         raise nose.SkipTest('unreliable test, receive partial components back for nasdaq_100')
 
         df = web.get_components_yahoo('^NDX') #NASDAQ-100
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index 4478cbc6a..c583858f0 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -3200,7 +3200,7 @@ class TestHDFStore(tm.TestCase):
             #                  'frame', [crit1, crit2])
 
     def test_frame_select_complex(self):
-        """ select via complex criteria """
+        # select via complex criteria
 
         df = tm.makeTimeDataFrame()
         df['string'] = 'foo'
diff --git a/pandas/io/tests/test_sql.py b/pandas/io/tests/test_sql.py
index 38770def8..83864878f 100644
--- a/pandas/io/tests/test_sql.py
+++ b/pandas/io/tests/test_sql.py
@@ -226,10 +226,9 @@ class TestSQLite(tm.TestCase):
         sql.write_frame(df, con = self.db, name = 'testkeywords')
 
     def test_onecolumn_of_integer(self):
-        '''
-        GH 3628
-        a column_of_integers dataframe should transfer well to sql
-        '''
+        # GH 3628
+        # a column_of_integers dataframe should transfer well to sql
+
         mono_df=DataFrame([1 , 2], columns=['c0'])
         sql.write_frame(mono_df, con = self.db, name = 'mono_df')
         # computing the sum via sql
diff --git a/pandas/tests/test_config.py b/pandas/tests/test_config.py
index 6d4486525..e60c9d5bd 100644
--- a/pandas/tests/test_config.py
+++ b/pandas/tests/test_config.py
@@ -250,7 +250,7 @@ class TestConfig(unittest.TestCase):
 
         # testing warning with catch_warning was only added in 2.6
         if sys.version_info[:2] < (2, 6):
-            raise nose.SkipTest()
+            raise nose.SkipTest("Need py > 2.6")
 
         self.assertTrue(self.cf._is_deprecated('foo'))
         with warnings.catch_warnings(record=True) as w:
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 6080d8f83..557880b69 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2599,11 +2599,9 @@ class TestDataFrame(tm.TestCase, CheckIndexing,
         self.assertEqual(False, frame['C'][2])
 
     def test_constructor_mrecarray(self):
-        """
-        Ensure mrecarray produces frame identical to dict of masked arrays
-        from GH3479
+        # Ensure mrecarray produces frame identical to dict of masked arrays
+        # from GH3479
 
-        """
         assert_fr_equal = functools.partial(assert_frame_equal,
                                             check_index_type=True,
                                             check_column_type=True,
@@ -11632,10 +11630,8 @@ starting,ending,measure
         assert_array_equal(df.ending.values, ser_ending.index.values)
 
     def test_tslib_tz_convert_trans_pos_plus_1__bug(self):
-        """
-        Regression test for tslib.tz_convert(vals, tz1, tz2).
-        See https://github.com/pydata/pandas/issues/4496 for details.
-        """
+        # Regression test for tslib.tz_convert(vals, tz1, tz2).
+        # See https://github.com/pydata/pandas/issues/4496 for details.
         idx = pd.date_range(datetime(2011, 3, 26, 23), datetime(2011, 3, 27, 1), freq='1min')
         idx = idx.tz_localize('UTC')
         idx = idx.tz_convert('Europe/Moscow')
diff --git a/pandas/tests/test_indexing.py b/pandas/tests/test_indexing.py
index ec97f6292..d448eb42f 100644
--- a/pandas/tests/test_indexing.py
+++ b/pandas/tests/test_indexing.py
@@ -647,7 +647,6 @@ class TestIndexing(tm.TestCase):
         assert_frame_equal(result, expected)
 
     def test_iloc_getitem_frame(self):
-        """ originally from test_frame.py"""
         df = DataFrame(np.random.randn(10, 4), index=lrange(0, 20, 2), columns=lrange(0,8,2))
 
         result = df.iloc[2]
@@ -793,7 +792,6 @@ class TestIndexing(tm.TestCase):
         self.assertRaises(ValueError, f)
 
     def test_iloc_setitem_series(self):
-        """ originally from test_series.py """
         df = DataFrame(np.random.randn(10, 4), index=list('abcdefghij'), columns=list('ABCD'))
 
         df.iloc[1,1] = 1
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 675852027..d31717ec8 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -1677,14 +1677,12 @@ class TestSeries(tm.TestCase, CheckNameIntegration):
         repr(s)
 
     def test_repr_should_return_str(self):
-        """
-        http://docs.python.org/py3k/reference/datamodel.html#object.__repr__
-        http://docs.python.org/reference/datamodel.html#object.__repr__
-        "...The return value must be a string object."
+        # http://docs.python.org/py3k/reference/datamodel.html#object.__repr__
+        # http://docs.python.org/reference/datamodel.html#object.__repr__
+        # ...The return value must be a string object.
 
-        (str on py2.x, str (unicode) on py3)
+        # (str on py2.x, str (unicode) on py3)
 
-        """
         data = [8, 5, 3, 5]
         index1 = [u("\u03c3"), u("\u03c4"), u("\u03c5"), u("\u03c6")]
         df = Series(data, index=index1)
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index 707b05203..289c0391f 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -1045,7 +1045,7 @@ class TestResamplePeriodIndex(tm.TestCase):
         tm.assert_almost_equal(result[0], s.mean())
 
     def test_resample_doesnt_truncate(self):
-        """Test for issue #3020"""
+        # Test for issue #3020
         import pandas as pd
         dates = pd.date_range('01-Jan-2014','05-Jan-2014', freq='D')
         series = Series(1, index=dates)
diff --git a/pandas/tseries/tests/test_timezones.py b/pandas/tseries/tests/test_timezones.py
index 6b571aca2..b7582619b 100644
--- a/pandas/tseries/tests/test_timezones.py
+++ b/pandas/tseries/tests/test_timezones.py
@@ -105,10 +105,8 @@ class TestTimeZoneSupport(tm.TestCase):
         self.assertEquals(result, expected)
 
     def test_timestamp_constructed_by_date_and_tz(self):
-        """
-        Fix Issue 2993, Timestamp cannot be constructed by datetime.date
-        and tz correctly
-        """
+        # Fix Issue 2993, Timestamp cannot be constructed by datetime.date
+        # and tz correctly
 
         result = Timestamp(date(2012, 3, 11), tz='US/Eastern')
 
