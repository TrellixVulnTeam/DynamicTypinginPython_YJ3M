commit 5e1ae3fd43107b2223cdefa93a6103b3a280562a
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Nov 21 21:45:25 2009 +0000

    import fixes, removed old unit tests
    
    git-svn-id: http://pandas.googlecode.com/svn/trunk@41 d5231056-7de3-11de-ac95-d976489f1ece

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index f9b2cd13c..72903da25 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -8,12 +8,13 @@ from numpy import NaN
 import numpy as np
 
 from pandas.core.daterange import DateRange
-from pandas.core.datetools import DateOffset, to_datetime
 from pandas.core.index import Index, NULL_INDEX
 from pandas.core.mixins import Picklable, Groupable
 from pandas.core.series import Series, remove_na
 from pandas.lib.tseries import isnull, notnull
+import pandas.core.datetools as datetools
 import pandas.lib.tseries as tseries
+
 #-------------------------------------------------------------------------------
 # Factory helper methods
 
@@ -861,8 +862,8 @@ class DataFrame(Picklable, Groupable):
         """
         import bisect
 
-        before = to_datetime(before)
-        after = to_datetime(after)
+        before = datetools.to_datetime(before)
+        after = datetools.to_datetime(after)
 
         if before is not None:
             binsearch = bisect.bisect_left(self.index, before)
@@ -926,7 +927,7 @@ class DataFrame(Picklable, Groupable):
         values: string or object
             Column name to use for populating new frame's values
         """
-        from pandas.core.panel import pivot, _slow_pivot
+        from pandas.core.panel import _slow_pivot
 
         return _slow_pivot(self[index], self[columns], self[values])
 
@@ -1352,7 +1353,7 @@ class DataFrame(Picklable, Groupable):
         newSeries = {}
 
         for col, series in other.iteritems():
-            arr = series.view(ndarray).take(fillVec)
+            arr = series.view(np.ndarray).take(fillVec)
             arr[-mask] = NaN
 
             newSeries[col] = arr
@@ -1376,10 +1377,7 @@ class DataFrame(Picklable, Groupable):
         NOTE: This method doesn't make much sense for cross-sections,
         and will error.
         """
-        try:
-            plot
-        except Exception, e:
-            from pylab import plot
+        from pylab import plot
 
         for col in sorted(self.columns):
             s = self[col]
diff --git a/pandas/core/matrix.py b/pandas/core/matrix.py
index 8e4655e24..aee9aa9fc 100644
--- a/pandas/core/matrix.py
+++ b/pandas/core/matrix.py
@@ -4,14 +4,14 @@
 # pylint: disable-msg=W0231
 from cStringIO import StringIO
 
+from numpy.lib.format import read_array, write_array
 from numpy import isfinite, NaN
 import numpy as np
 
-from pandas.core.datetools import DateOffset
 from pandas.core.frame import DataFrame, _pfixed
 from pandas.core.index import Index, NULL_INDEX
-from pandas.core.series import Series, remove_na
-from pandas.lib.tseries import isnull, notnull
+from pandas.core.series import Series
+from pandas.lib.tseries import isnull
 import pandas.lib.tseries as tseries
 
 #-------------------------------------------------------------------------------
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 4ecdb302b..d640b5420 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -12,9 +12,9 @@ from numpy import array, NaN, ndarray
 import numpy as np
 
 from pandas.core.daterange import DateRange
-from pandas.core.datetools import to_datetime
 from pandas.core.index import Index, NULL_INDEX
 from pandas.core.mixins import Picklable, Groupable
+import pandas.core.datetools as datetools
 
 from pandas.lib.tseries import isnull, notnull
 import pandas.lib.tseries as tseries
@@ -1067,8 +1067,8 @@ class Series(np.ndarray, Picklable, Groupable):
         -------
         TimeSeries
         """
-        before = to_datetime(before)
-        after = to_datetime(after)
+        before = datetools.to_datetime(before)
+        after = datetools.to_datetime(after)
 
         if before is None:
             before = min(self.index)
diff --git a/pandas/core/tests/test_dataframe.py b/pandas/core/tests/test_dataframe.py
index caabbebb6..65cb967cc 100644
--- a/pandas/core/tests/test_dataframe.py
+++ b/pandas/core/tests/test_dataframe.py
@@ -1,19 +1,15 @@
 from pandas.core.daterange import DateRange
 from pandas.core.datetools import bday
 from pandas.core.frame import DataFrame
-from pandas.core.index import Index, NULL_INDEX
+from pandas.core.index import Index
 from pandas.core.series import Series
-from pandas.lib.tseries import map_indices
 from copy import deepcopy
 from datetime import datetime
-from numpy import isnan, array, NaN, alltrue
+from numpy import isnan, array
 from numpy import random
 from random import choice
 import numpy as np
-import os
-import pickle
 import string
-import sys
 import unittest
 
 def rands(n):
@@ -54,7 +50,7 @@ class TestDataFrame(unittest.TestCase):
                 else:
                     self.assert_(isnan(val))
         for col, series in newFrame.iteritems():
-            self.assert_(equalContents(series.index, newFrame.index))    
+            self.assert_(equalContents(series.index, newFrame.index))
         emptyFrame = self.frame.reindex(Index([]))
         self.assert_(len(emptyFrame.index) == 0)
 
@@ -69,7 +65,7 @@ class TestDataFrame(unittest.TestCase):
                 else:
                     self.assert_(isnan(val))
         for col, series in nonContigFrame.iteritems():
-            self.assert_(equalContents(series.index, nonContigFrame.index))    
+            self.assert_(equalContents(series.index, nonContigFrame.index))
 
     def testShift(self):
         shiftedFrame = self.frame.shift(5)
@@ -77,7 +73,7 @@ class TestDataFrame(unittest.TestCase):
             self.assert_(idx-5*bday == self.frame.index[i])
         series = shiftedFrame['col1']
         for i, idx in enumerate(series.index):
-            self.assert_(idx-5*bday == self.frame.index[i])        
+            self.assert_(idx-5*bday == self.frame.index[i])
 
     def testOperators(self):
         garbage = random.random(4)
@@ -111,28 +107,6 @@ class TestDataFrame(unittest.TestCase):
         for key, value in self.frame._series.iteritems():
             self.assert_(self.frame[key] is not None)
         self.assert_('random' not in self.frame)
-        
-    def testStack(self):
-        frameSlice = self.frame.getTS(fromDate=self.frame.index[0], nPeriods=5)
-        stacked = frameSlice.stack()
-        for idx, value in stacked.iteritems():
-            date, col = idx.split(';')
-            date = datetime.fromordinal(int(date))
-            if isnan(value):
-                self.assert_(isnan(frameSlice[col][date]))
-            else:
-                self.assertEquals(value, frameSlice[col][date])
-
-        unstacked = stacked.unstack().T
-        
-        for i, idx in enumerate(unstacked.index):
-            self.assertEquals(idx, frameSlice.index[i])
-        for col, series in unstacked.iteritems():
-            for idx, value in series.iteritems():
-                if isnan(value):
-                    self.assert_(isnan(frameSlice[col][idx]))
-                else:                
-                    self.assertEquals(value, frameSlice[col][idx])
 
     def testSetItem(self):
         # not sure what else to do here
@@ -144,7 +118,7 @@ class TestDataFrame(unittest.TestCase):
         sumFrame = self.frame.apply(np.sum)
         for col, series in self.frame.iteritems():
             self.assertEqual(sumFrame[col], series.sum())
-        
+
     def testDelItem(self):
         del self.frame['col1']
         self.assert_('col1' not in self.frame)
@@ -196,7 +170,7 @@ class TestDataFrame(unittest.TestCase):
                     self.assert_(isnan(frame[col][i]))
                 else:
                     self.assertEqual(value, frame[col][i])
-        
+
     def testDeepcopy(self):
         cp = deepcopy(self.frame)
         series = cp['col1']
@@ -206,16 +180,16 @@ class TestDataFrame(unittest.TestCase):
 
     def testFilterItems(self):
         pass
-    
+
     def testGroupBy(self):
-        
+
         pass
 
     def testApply(self):
-        pass    
+        pass
 
     def testSort(self):
-        pass    
+        pass
 
     def testToCSV(self):
         pass
@@ -225,7 +199,7 @@ class TestDataFrame(unittest.TestCase):
 
     def testToDictList(self):
         pass
-    
+
     def testDictToDataFrame(self):
         pass
 
@@ -239,11 +213,11 @@ class TestDataFrame(unittest.TestCase):
                 self.assertEqual(newFrame['col1'][idx], self.ts1[idx])
             if idx in self.ts2.index:
                 self.assertEqual(newFrame['col2'][idx], self.ts2[idx])
-            
-    
-    def testPreserveReferences(self):        
+
+
+    def testPreserveReferences(self):
         pass
-    
+
     def testCleanNaN(self):
         pass
 
diff --git a/pandas/core/tests/test_datamatrix.py b/pandas/core/tests/test_datamatrix.py
index f27855545..0b5625f4f 100644
--- a/pandas/core/tests/test_datamatrix.py
+++ b/pandas/core/tests/test_datamatrix.py
@@ -52,7 +52,7 @@ class TestDataMatrix(unittest.TestCase):
                 else:
                     self.assert_(isnan(val))
         for col, series in newFrame.iteritems():
-            self.assert_(equalContents(series.index, newFrame.index))    
+            self.assert_(equalContents(series.index, newFrame.index))
         emptyFrame = self.frame.reindex(Index([]))
         self.assert_(len(emptyFrame.index) == 0)
 
@@ -67,7 +67,7 @@ class TestDataMatrix(unittest.TestCase):
                 else:
                     self.assert_(isnan(val))
         for col, series in nonContigFrame.iteritems():
-            self.assert_(equalContents(series.index, nonContigFrame.index))    
+            self.assert_(equalContents(series.index, nonContigFrame.index))
 
     def testShift(self):
         shiftedFrame = self.frame.shift(5)
@@ -75,7 +75,7 @@ class TestDataMatrix(unittest.TestCase):
             self.assert_(idx-5*bday == self.frame.index[i])
         series = shiftedFrame['col1']
         for i, idx in enumerate(series.index):
-            self.assert_(idx-5*bday == self.frame.index[i])        
+            self.assert_(idx-5*bday == self.frame.index[i])
 
     def testOperators(self):
         garbage = random.random(4)
@@ -109,36 +109,6 @@ class TestDataMatrix(unittest.TestCase):
         for key, value in self.frame._series.iteritems():
             self.assert_(self.frame[key] is not None)
         self.assert_('random' not in self.frame)
-        
-#    def testGetRow(self):
-#        rowFrame = self.frame.getRow(self.frame.index[5])
-#        idx = rowFrame.index[0]
-#        self.assertEquals(idx, self.frame.index[5])
-#        for key, values in rowFrame.iteritems():
-#            self.assertEquals(self.frame[key][idx], values[0])
-#            self.assertEquals(self.frame[key][idx], values[idx])
-        
-    def testStack(self):
-        frameSlice = self.frame.getTS(fromDate=self.frame.index[0], nPeriods=5)
-        stacked = frameSlice.stack()
-        for idx, value in stacked.iteritems():
-            date, col = idx.split(';')
-            date = datetime.fromordinal(int(date))
-            if isnan(value):
-                self.assert_(isnan(frameSlice[col][date]))
-            else:
-                self.assertEquals(value, frameSlice[col][date])
-        
-        unstacked = stacked.unstack().T
-        
-        for i, idx in enumerate(unstacked.index):
-            self.assertEquals(idx, frameSlice.index[i])
-        for col, series in unstacked.iteritems():
-            for idx, value in series.iteritems():
-                if isnan(value):
-                    self.assert_(isnan(frameSlice[col][idx]))
-                else:                
-                    self.assertEquals(value, frameSlice[col][idx])
 
     def testSetItem(self):
         # not sure what else to do here
@@ -153,7 +123,7 @@ class TestDataMatrix(unittest.TestCase):
             if isnan(val):
                 print self.frame[col]
             self.assertEqual(val, series.sum())
-        
+
     def testDelItem(self):
         del self.frame['col1']
         self.assert_('col1' not in self.frame)
@@ -205,7 +175,7 @@ class TestDataMatrix(unittest.TestCase):
                     self.assert_(isnan(frame[col][i]))
                 else:
                     self.assertEqual(value, frame[col][i])
-        
+
     def testDeepcopy(self):
         cp = deepcopy(self.frame)
         series = cp['col1']
@@ -215,16 +185,16 @@ class TestDataMatrix(unittest.TestCase):
 
     def testFilterItems(self):
         pass
-    
+
     def testGroupBy(self):
-        
+
         pass
 
     def testApply(self):
-        pass    
+        pass
 
     def testSort(self):
-        pass    
+        pass
 
     def testToCSV(self):
         pass
@@ -234,7 +204,7 @@ class TestDataMatrix(unittest.TestCase):
 
     def testToDictList(self):
         pass
-    
+
     def testDictToDataFrame(self):
         pass
 
@@ -248,11 +218,11 @@ class TestDataMatrix(unittest.TestCase):
                 self.assertEqual(newFrame['col1'][idx], self.ts1[idx])
             if idx in self.ts2.index:
                 self.assertEqual(newFrame['col2'][idx], self.ts2[idx])
-            
-    
-    def testPreserveReferences(self):        
+
+
+    def testPreserveReferences(self):
         pass
-    
+
     def testCleanNaN(self):
         pass
 
