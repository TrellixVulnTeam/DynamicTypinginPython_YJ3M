commit a85f1d7dcbddb32eaf6b848bf184ae422b7771fa
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Fri Nov 8 06:37:44 2019 -0800

    DEPR: is_extension_type (#29457)

diff --git a/doc/source/whatsnew/v1.0.0.rst b/doc/source/whatsnew/v1.0.0.rst
index cb1d80a34..4f700cec3 100644
--- a/doc/source/whatsnew/v1.0.0.rst
+++ b/doc/source/whatsnew/v1.0.0.rst
@@ -213,7 +213,8 @@ Deprecations
 - ``Index.set_value`` has been deprecated. For a given index ``idx``, array ``arr``,
   value in ``idx`` of ``idx_val`` and a new value of ``val``, ``idx.set_value(arr, idx_val, val)``
   is equivalent to ``arr[idx.get_loc(idx_val)] = val``, which should be used instead (:issue:`28621`).
--
+- :func:`is_extension_type` is deprecated, :func:`is_extension_array_dtype` should be used instead (:issue:`29457`)
+
 
 .. _whatsnew_1000.prior_deprecations:
 
diff --git a/pandas/core/apply.py b/pandas/core/apply.py
index d0093e5b6..d9f6bdae2 100644
--- a/pandas/core/apply.py
+++ b/pandas/core/apply.py
@@ -7,7 +7,7 @@ from pandas.util._decorators import cache_readonly
 
 from pandas.core.dtypes.common import (
     is_dict_like,
-    is_extension_type,
+    is_extension_array_dtype,
     is_list_like,
     is_sequence,
 )
@@ -228,7 +228,7 @@ class FrameApply:
         # as demonstrated in gh-12244
         if (
             self.result_type in ["reduce", None]
-            and not self.dtypes.apply(is_extension_type).any()
+            and not self.dtypes.apply(is_extension_array_dtype).any()
             # Disallow complex_internals since libreduction shortcut
             #  cannot handle MultiIndex
             and not self.agg_axis._has_complex_internals
diff --git a/pandas/core/arrays/datetimes.py b/pandas/core/arrays/datetimes.py
index 788cd2a3c..7cd103d12 100644
--- a/pandas/core/arrays/datetimes.py
+++ b/pandas/core/arrays/datetimes.py
@@ -31,7 +31,7 @@ from pandas.core.dtypes.common import (
     is_datetime64_ns_dtype,
     is_datetime64tz_dtype,
     is_dtype_equal,
-    is_extension_type,
+    is_extension_array_dtype,
     is_float_dtype,
     is_object_dtype,
     is_period_dtype,
@@ -2131,7 +2131,7 @@ def maybe_convert_dtype(data, copy):
         data = data.categories.take(data.codes, fill_value=NaT)._values
         copy = False
 
-    elif is_extension_type(data) and not is_datetime64tz_dtype(data):
+    elif is_extension_array_dtype(data) and not is_datetime64tz_dtype(data):
         # Includes categorical
         # TODO: We have no tests for these
         data = np.array(data, dtype=np.object_)
diff --git a/pandas/core/base.py b/pandas/core/base.py
index 8c8037091..981ec8744 100644
--- a/pandas/core/base.py
+++ b/pandas/core/base.py
@@ -22,7 +22,6 @@ from pandas.core.dtypes.common import (
     is_datetime64_ns_dtype,
     is_datetime64tz_dtype,
     is_extension_array_dtype,
-    is_extension_type,
     is_list_like,
     is_object_dtype,
     is_scalar,
@@ -1267,7 +1266,7 @@ class IndexOpsMixin:
                 # use the built in categorical series mapper which saves
                 # time by mapping the categories instead of all values
                 return self._values.map(mapper)
-            if is_extension_type(self.dtype):
+            if is_extension_array_dtype(self.dtype):
                 values = self._values
             else:
                 values = self.values
@@ -1278,7 +1277,8 @@ class IndexOpsMixin:
             return new_values
 
         # we must convert to python types
-        if is_extension_type(self.dtype):
+        if is_extension_array_dtype(self.dtype) and hasattr(self._values, "map"):
+            # GH#23179 some EAs do not have `map`
             values = self._values
             if na_action is not None:
                 raise NotImplementedError
diff --git a/pandas/core/construction.py b/pandas/core/construction.py
index 5e8b28267..c0b08beea 100644
--- a/pandas/core/construction.py
+++ b/pandas/core/construction.py
@@ -27,7 +27,6 @@ from pandas.core.dtypes.common import (
     is_categorical_dtype,
     is_datetime64_ns_dtype,
     is_extension_array_dtype,
-    is_extension_type,
     is_float_dtype,
     is_integer_dtype,
     is_iterator,
@@ -527,7 +526,7 @@ def _try_cast(
             and not (is_iterator(subarr) or isinstance(subarr, np.ndarray))
         ):
             subarr = construct_1d_object_array_from_listlike(subarr)
-        elif not is_extension_type(subarr):
+        elif not is_extension_array_dtype(subarr):
             subarr = construct_1d_ndarray_preserving_na(subarr, dtype, copy=copy)
     except OutOfBoundsDatetime:
         # in case of out of bound datetime64 -> always raise
diff --git a/pandas/core/dtypes/cast.py b/pandas/core/dtypes/cast.py
index bbed3a545..637c42eef 100644
--- a/pandas/core/dtypes/cast.py
+++ b/pandas/core/dtypes/cast.py
@@ -29,7 +29,6 @@ from .common import (
     is_datetime_or_timedelta_dtype,
     is_dtype_equal,
     is_extension_array_dtype,
-    is_extension_type,
     is_float,
     is_float_dtype,
     is_integer,
@@ -632,7 +631,7 @@ def infer_dtype_from_array(arr, pandas_dtype: bool = False):
     if not is_list_like(arr):
         arr = [arr]
 
-    if pandas_dtype and is_extension_type(arr):
+    if pandas_dtype and is_extension_array_dtype(arr):
         return arr.dtype, arr
 
     elif isinstance(arr, ABCSeries):
@@ -694,7 +693,7 @@ def maybe_upcast(values, fill_value=np.nan, dtype=None, copy=False):
         # We allow arbitrary fill values for object dtype
         raise ValueError("fill_value must be a scalar")
 
-    if is_extension_type(values):
+    if is_extension_array_dtype(values):
         if copy:
             values = values.copy()
     else:
diff --git a/pandas/core/dtypes/common.py b/pandas/core/dtypes/common.py
index c3e98d400..aaac70755 100644
--- a/pandas/core/dtypes/common.py
+++ b/pandas/core/dtypes/common.py
@@ -1625,6 +1625,8 @@ def is_extension_type(arr):
     """
     Check whether an array-like is of a pandas extension class instance.
 
+    .. deprecated:: 1.0.0
+
     Extension classes include categoricals, pandas sparse objects (i.e.
     classes represented within the pandas library and not ones external
     to it like scipy sparse matrices), and datetime-like arrays.
@@ -1667,6 +1669,12 @@ def is_extension_type(arr):
     >>> is_extension_type(s)
     True
     """
+    warnings.warn(
+        "'is_extension_type' is deprecated and will be removed in a future "
+        "version.  Use 'is_extension_array_dtype' instead.",
+        FutureWarning,
+        stacklevel=2,
+    )
 
     if is_categorical(arr):
         return True
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index c9111812e..d0f52392d 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -71,7 +71,6 @@ from pandas.core.dtypes.common import (
     is_dict_like,
     is_dtype_equal,
     is_extension_array_dtype,
-    is_extension_type,
     is_float_dtype,
     is_hashable,
     is_integer,
@@ -3658,7 +3657,7 @@ class DataFrame(NDFrame):
             value = maybe_cast_to_datetime(value, infer_dtype)
 
         # return internal types directly
-        if is_extension_type(value) or is_extension_array_dtype(value):
+        if is_extension_array_dtype(value):
             return value
 
         # broadcast across multiple columns if necessary
diff --git a/pandas/core/internals/blocks.py b/pandas/core/internals/blocks.py
index fd5d3f224..9402a3ef9 100644
--- a/pandas/core/internals/blocks.py
+++ b/pandas/core/internals/blocks.py
@@ -37,7 +37,6 @@ from pandas.core.dtypes.common import (
     is_datetime64tz_dtype,
     is_dtype_equal,
     is_extension_array_dtype,
-    is_extension_type,
     is_float_dtype,
     is_integer,
     is_integer_dtype,
@@ -2605,10 +2604,6 @@ class ObjectBlock(Block):
                 value.dtype.type,
                 (np.integer, np.floating, np.complexfloating, np.datetime64, np.bool_),
             )
-            or
-            # TODO(ExtensionArray): remove is_extension_type
-            # when all extension arrays have been ported.
-            is_extension_type(value)
             or is_extension_array_dtype(value)
         )
 
@@ -3168,7 +3163,7 @@ def _putmask_smart(v, mask, n):
     # change the dtype if needed
     dtype, _ = maybe_promote(n.dtype)
 
-    if is_extension_type(v.dtype) and is_object_dtype(dtype):
+    if is_extension_array_dtype(v.dtype) and is_object_dtype(dtype):
         v = v._internal_get_values(dtype)
     else:
         v = v.astype(dtype)
diff --git a/pandas/core/internals/managers.py b/pandas/core/internals/managers.py
index 74cebd8b5..f86a29447 100644
--- a/pandas/core/internals/managers.py
+++ b/pandas/core/internals/managers.py
@@ -20,7 +20,6 @@ from pandas.core.dtypes.common import (
     _NS_DTYPE,
     is_datetimelike_v_numeric,
     is_extension_array_dtype,
-    is_extension_type,
     is_list_like,
     is_numeric_v_string_like,
     is_scalar,
@@ -1034,11 +1033,7 @@ class BlockManager(PandasObject):
         # FIXME: refactor, clearly separate broadcasting & zip-like assignment
         #        can prob also fix the various if tests for sparse/categorical
 
-        # TODO(EA): Remove an is_extension_ when all extension types satisfy
-        # the interface
-        value_is_extension_type = is_extension_type(value) or is_extension_array_dtype(
-            value
-        )
+        value_is_extension_type = is_extension_array_dtype(value)
 
         # categorical/sparse/datetimetz
         if value_is_extension_type:
diff --git a/pandas/core/reshape/melt.py b/pandas/core/reshape/melt.py
index 98fee491e..9ccd36871 100644
--- a/pandas/core/reshape/melt.py
+++ b/pandas/core/reshape/melt.py
@@ -4,7 +4,7 @@ import numpy as np
 
 from pandas.util._decorators import Appender
 
-from pandas.core.dtypes.common import is_extension_type, is_list_like
+from pandas.core.dtypes.common import is_extension_array_dtype, is_list_like
 from pandas.core.dtypes.concat import concat_compat
 from pandas.core.dtypes.generic import ABCMultiIndex
 from pandas.core.dtypes.missing import notna
@@ -103,7 +103,7 @@ def melt(
     mdata = {}
     for col in id_vars:
         id_data = frame.pop(col)
-        if is_extension_type(id_data):
+        if is_extension_array_dtype(id_data):
             id_data = concat([id_data] * K, ignore_index=True)
         else:
             id_data = np.tile(id_data.values, K)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index d792f54a4..cc7e4b81b 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -27,7 +27,6 @@ from pandas.core.dtypes.common import (
     is_datetime64_dtype,
     is_dict_like,
     is_extension_array_dtype,
-    is_extension_type,
     is_integer,
     is_iterator,
     is_list_like,
@@ -3957,7 +3956,8 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
                 return f(self)
 
             # row-wise access
-            if is_extension_type(self.dtype):
+            if is_extension_array_dtype(self.dtype) and hasattr(self._values, "map"):
+                # GH#23179 some EAs do not have `map`
                 mapped = self._values.map(f)
             else:
                 values = self.astype(object).values
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 8580e0069..e98802888 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -26,7 +26,7 @@ from pandas.core.dtypes.common import (
     is_categorical_dtype,
     is_datetime64_dtype,
     is_datetime64tz_dtype,
-    is_extension_type,
+    is_extension_array_dtype,
     is_list_like,
     is_timedelta64_dtype,
 )
@@ -2827,7 +2827,7 @@ class GenericFixed(Fixed):
             zip(index.levels, index.codes, index.names)
         ):
             # write the level
-            if is_extension_type(lev):
+            if is_extension_array_dtype(lev):
                 raise NotImplementedError(
                     "Saving a MultiIndex with an extension dtype is not supported."
                 )
diff --git a/pandas/tests/api/test_types.py b/pandas/tests/api/test_types.py
index 24f325643..e9f68692a 100644
--- a/pandas/tests/api/test_types.py
+++ b/pandas/tests/api/test_types.py
@@ -18,7 +18,6 @@ class TestTypes(Base):
         "is_datetime64_ns_dtype",
         "is_datetime64tz_dtype",
         "is_dtype_equal",
-        "is_extension_type",
         "is_float",
         "is_float_dtype",
         "is_int64_dtype",
@@ -51,7 +50,7 @@ class TestTypes(Base):
         "infer_dtype",
         "is_extension_array_dtype",
     ]
-    deprecated = ["is_period", "is_datetimetz"]
+    deprecated = ["is_period", "is_datetimetz", "is_extension_type"]
     dtypes = ["CategoricalDtype", "DatetimeTZDtype", "PeriodDtype", "IntervalDtype"]
 
     def test_types(self):
