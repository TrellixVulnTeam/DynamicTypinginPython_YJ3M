commit 60b623fd1fb311d8e9cf2a2f97d7160e32656248
Author: Andy Hayden <andyhayden1@gmail.com>
Date:   Tue Jul 16 14:15:06 2013 +0100

    ENH add iloc argument to DataFrame isin

diff --git a/doc/source/indexing.rst b/doc/source/indexing.rst
index d3d6fe367..213a7ab65 100644
--- a/doc/source/indexing.rst
+++ b/doc/source/indexing.rst
@@ -476,13 +476,19 @@ a list of items you want to check for.
 
 .. ipython:: python
 
-   df = DataFrame({'vals': [1, 2, 3, 4], 'ids': ['a', 'b', 'f', 'n'],
-                   'ids2': ['a', 'n', 'c', 'n']})
-
    values = {'ids': ['a', 'b'], 'vals': [1, 3]}
 
    df.isin(values)
 
+You can also describe columns using integer location:
+
+.. ipython:: python
+
+   values = {0: ['a', 'b']}
+
+   df.isin(values, iloc=True)
+
+
 Where and Masking
 ~~~~~~~~~~~~~~~~~
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 331deccaf..22dc27ff9 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -5482,14 +5482,16 @@ class DataFrame(NDFrame):
         return self._constructor(new_data)
 
 
-    def isin(self, values):
+    def isin(self, values, iloc=False):
         """
-        Return boolean DataFrame showing whether each elements in the DataFrame is
-        contained in items.
+        Return boolean DataFrame showing whether each element in the DataFrame is
+        contained in values.
 
         Parameters
         ----------
         values : iterable or dictionary of columns to values
+        iloc : boolean, if passing a dict as values, describe columns using integer
+                        locations (default is to use labels)
 
         Returns
         -------
@@ -5500,8 +5502,13 @@ class DataFrame(NDFrame):
             from collections import defaultdict
             from pandas.tools.merge import concat
             values = defaultdict(list, values)
-            return concat((self.iloc[:, [i]].isin(values[ind] or values[i])
-                             for i, ind in enumerate(self.columns)), axis=1)
+            if iloc:
+                return concat((self.iloc[:, [i]].isin(values[i])
+                                 for i, col in enumerate(self.columns)), axis=1)
+            else:
+                return concat((self.iloc[:, [i]].isin(values[col])
+                                 for i, col in enumerate(self.columns)), axis=1)
+
 
         else:
             return DataFrame(lib.ismember(self.values.ravel(),
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 916a38ae8..577cbfe9d 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -10661,12 +10661,27 @@ starting,ending,measure
         assert_frame_equal(result, expected)
 
         # non unique columns
+        df = DataFrame({'A': ['a', 'b', 'c'], 'B': ['a', 'e', 'f']})
         df.columns = ['A', 'A']
         expected = DataFrame(False, df.index, df.columns)
         expected.loc[0, 'A'] = True
         result = df.isin(d)
         assert_frame_equal(result, expected)
 
+        # iloc
+        df = DataFrame({'A': ['a', 'b', 'c'], 'B': ['a', 'e', 'f']})
+        d = {0: ['a']}
+        expected = DataFrame(False, df.index, df.columns)
+
+        # without using iloc
+        result = df.isin(d)
+        assert_frame_equal(result, expected)        
+
+        # using iloc
+        result = df.isin(d, iloc=True)
+        expected.iloc[0, 0] = True
+        assert_frame_equal(result, expected)        
+
 
 if __name__ == '__main__':
     # unittest.main()
