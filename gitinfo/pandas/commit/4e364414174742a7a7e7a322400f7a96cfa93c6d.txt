commit 4e364414174742a7a7e7a322400f7a96cfa93c6d
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sun Aug 12 16:18:31 2012 -0400

    BUG: support PeriodIndex more infrastructurally when creating MultiIndex close #1705

diff --git a/RELEASE.rst b/RELEASE.rst
index 6727421d5..950556685 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -79,6 +79,7 @@ pandas 0.8.2
   - Don't plot all-NA DataFrame columns as zeros (#1696)
   - Fix bug in scatter_plot with by option (#1716)
   - Fix performance problem in infer_freq with lots of non-unique stamps (#1686)
+  - Fix handling of PeriodIndex as argument to create MultiIndex (#1705)
 
 pandas 0.8.1
 ============
diff --git a/pandas/core/categorical.py b/pandas/core/categorical.py
index 0a3313109..34b05d1a2 100644
--- a/pandas/core/categorical.py
+++ b/pandas/core/categorical.py
@@ -3,6 +3,7 @@
 import numpy as np
 
 from pandas.core.algorithms import factorize
+from pandas.core.index import Index
 import pandas.core.common as com
 
 
@@ -47,10 +48,13 @@ class Categorical(object):
 
     @classmethod
     def from_array(cls, data):
-        try:
-            labels, levels, _ = factorize(data, sort=True)
-        except TypeError:
-            labels, levels, _ = factorize(data, sort=False)
+        if isinstance(data, Index) and hasattr(data, 'factorize'):
+            labels, levels = data.factorize()
+        else:
+            try:
+                labels, levels, _ = factorize(data, sort=True)
+            except TypeError:
+                labels, levels, _ = factorize(data, sort=False)
 
         return Categorical(labels, levels,
                            name=getattr(data, 'name', None))
diff --git a/pandas/core/index.py b/pandas/core/index.py
index fd2d77571..5466a8697 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1366,11 +1366,14 @@ class MultiIndex(Index):
             if self._tuples is not None:
                 return self._tuples
 
-            values = [ndtake(lev.values, lab)
-                      for lev, lab in zip(self.levels, self.labels)]
+            values = []
+            for lev, lab in zip(self.levels, self.labels):
+                taken = ndtake(lev.values, lab)
+                # Need to box timestamps, etc.
+                if hasattr(lev, '_box_values'):
+                    taken = lev._box_values(taken)
+                values.append(taken)
 
-            # Need to box timestamps, etc.
-            values = _clean_arrays(values)
             self._tuples = lib.fast_zip(values)
             return self._tuples
 
@@ -2513,15 +2516,6 @@ def _maybe_box_dtindex(idx):
         return idx.asobject
     return idx
 
-def _clean_arrays(values):
-    result = []
-    for arr in values:
-        if np.issubdtype(arr.dtype, np.datetime64):
-            result.append(lib.map_infer(arr, lib.Timestamp))
-        else:
-            result.append(arr)
-    return result
-
 
 def _all_indexes_same(indexes):
     first = indexes[0]
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index 7b88a00e6..bceaf41f2 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -322,6 +322,9 @@ class DatetimeIndex(Int64Index):
 
         return index
 
+    def _box_values(self, values):
+        return lib.map_infer(values, lib.Timestamp)
+
     def _local_timestamps(self):
         utc = _utc()
 
diff --git a/pandas/tseries/period.py b/pandas/tseries/period.py
index 0699edfe7..c55af2d6b 100644
--- a/pandas/tseries/period.py
+++ b/pandas/tseries/period.py
@@ -624,6 +624,10 @@ class PeriodIndex(Int64Index):
             return False
         return key.ordinal in self._engine
 
+    def _box_values(self, values):
+        f = lambda x: Period(ordinal=x, freq=self.freq)
+        return lib.map_infer(values, f)
+
     def astype(self, dtype):
         dtype = np.dtype(dtype)
         if dtype == np.object_:
@@ -655,6 +659,14 @@ class PeriodIndex(Int64Index):
         values = self.values
         return ((values[1:] - values[:-1]) < 2).all()
 
+    def factorize(self):
+        """
+        Specialized factorize that boxes uniques
+        """
+        from pandas.core.algorithms import factorize
+        labels, uniques, counts = factorize(self.values)
+        uniques = PeriodIndex(ordinal=uniques, freq=self.freq)
+        return labels, uniques
 
     @property
     def freqstr(self):
diff --git a/pandas/tseries/tests/test_period.py b/pandas/tseries/tests/test_period.py
index 9366c3f33..71b1e33d3 100644
--- a/pandas/tseries/tests/test_period.py
+++ b/pandas/tseries/tests/test_period.py
@@ -1769,6 +1769,17 @@ class TestPeriodIndex(TestCase):
         result = pd.Index(periods)
         self.assert_(isinstance(result, PeriodIndex))
 
+    def test_with_multi_index(self):
+        # #1705
+        index = date_range('1/1/2012',periods=4,freq='12H')
+        index_as_arrays = [index.to_period(freq='D'), index.hour]
+
+        s = Series([0, 1, 2, 3], index_as_arrays)
+
+        self.assert_(isinstance(s.index.levels[0], PeriodIndex))
+
+        self.assert_(isinstance(s.index.values[0][0], Period))
+
 def _permute(obj):
     return obj.take(np.random.permutation(len(obj)))
 
