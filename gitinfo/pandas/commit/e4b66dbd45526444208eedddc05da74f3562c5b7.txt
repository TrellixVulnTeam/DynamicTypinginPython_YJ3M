commit e4b66dbd45526444208eedddc05da74f3562c5b7
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Oct 24 13:41:52 2011 -0400

    BUG: more proper handling of no rows / no columns in DataFrame.apply

diff --git a/RELEASE.rst b/RELEASE.rst
index 95d226c97..549dfdf74 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -196,6 +196,7 @@ feedback on the library.
   - Fix many corner cases in MultiIndex set operations
   - Fix MultiIndex-handling bug with GroupBy.apply when returned groups are not
     indexed the same
+  - Fix corner case bugs in DataFrame.apply
 
 Thanks
 ------
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 834e1f03a..1ca66aa65 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1922,7 +1922,7 @@ class DataFrame(NDFrame):
         -------
         applied : Series or DataFrame
         """
-        if not len(self.columns):
+        if len(self.columns) == 0 and len(self.index) == 0:
             return self
 
         if isinstance(func, np.ufunc):
@@ -2902,7 +2902,7 @@ class _DataFrameFormatter(object):
         to_write = []
 
         if len(frame.columns) == 0 or len(frame.index) == 0:
-            to_write.append('Empty %s' % type(self).__name__)
+            to_write.append('Empty %s\n' % type(self.frame).__name__)
             to_write.append(repr(frame.index))
         else:
             # may include levels names also
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 39a55f29a..417ad1641 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -2347,6 +2347,15 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         applied = self.empty.apply(np.mean)
         self.assert_(not applied)
 
+        no_rows = self.frame[:0]
+        result = no_rows.apply(lambda x: x.mean())
+        expected = Series(np.nan, index=self.frame.columns)
+        assert_series_equal(result, expected)
+
+        no_cols = self.frame.ix[:, []]
+        result = no_cols.apply(lambda x: x.mean(), axis=1)
+        expected = Series(np.nan, index=self.frame.index)
+        assert_series_equal(result, expected)
 
     def test_apply_broadcast(self):
         broadcasted = self.frame.apply(np.mean, broadcast=True)
