commit 289cd6d0df66b812921ff4c5cbade937b875406d
Author: Josh Howes <josh.howes@gmail.com>
Date:   Fri Sep 9 18:27:16 2016 -0400

    BUG: fix str.contains for series containing only nan values
    
    closes #14171
    
    Author: Josh Howes <josh.howes@gmail.com>
    
    Closes #14182 from josh-howes/bugfix/14171-series-str-contains-only-nan-values and squashes the following commits:
    
    c7e9721 [Josh Howes] BUG: fix str.contains for series containing only nan values

diff --git a/doc/source/whatsnew/v0.19.0.txt b/doc/source/whatsnew/v0.19.0.txt
index be4f7473b..a3e8f0c31 100644
--- a/doc/source/whatsnew/v0.19.0.txt
+++ b/doc/source/whatsnew/v0.19.0.txt
@@ -1552,7 +1552,7 @@ Bug Fixes
 - Bug in ``.to_excel()`` when DataFrame contains a MultiIndex which contains a label with a NaN value (:issue:`13511`)
 - Bug in invalid frequency offset string like "D1", "-2-3H" may not raise ``ValueError (:issue:`13930`)
 - Bug in ``concat`` and ``groupby`` for hierarchical frames with ``RangeIndex`` levels (:issue:`13542`).
-
+- Bug in ``Series.str.contains()`` for Series containing only ``NaN`` values of ``object`` dtype (:issue:`14171`)
 - Bug in ``agg()`` function on groupby dataframe changes dtype of ``datetime64[ns]`` column to ``float64`` (:issue:`12821`)
 - Bug in using NumPy ufunc with ``PeriodIndex`` to add or subtract integer raise ``IncompatibleFrequency``. Note that using standard operator like ``+`` or ``-`` is recommended, because standard operators use more efficient path (:issue:`13980`)
 - Bug in operations on ``NaT`` returning ``float`` instead of ``datetime64[ns]`` (:issue:`12941`)
diff --git a/doc/source/whatsnew/v0.20.0.txt b/doc/source/whatsnew/v0.20.0.txt
index 695e917c7..4aee6f72b 100644
--- a/doc/source/whatsnew/v0.20.0.txt
+++ b/doc/source/whatsnew/v0.20.0.txt
@@ -81,3 +81,4 @@ Performance Improvements
 
 Bug Fixes
 ~~~~~~~~~
+
diff --git a/pandas/core/strings.py b/pandas/core/strings.py
index b49761367..3041b17b9 100644
--- a/pandas/core/strings.py
+++ b/pandas/core/strings.py
@@ -165,7 +165,8 @@ def _map(f, arr, na_mask=False, na_value=np.nan, dtype=object):
     if na_mask:
         mask = isnull(arr)
         try:
-            result = lib.map_infer_mask(arr, f, mask.view(np.uint8))
+            convert = not all(mask)
+            result = lib.map_infer_mask(arr, f, mask.view(np.uint8), convert)
         except (TypeError, AttributeError):
 
             def g(x):
diff --git a/pandas/tests/test_strings.py b/pandas/tests/test_strings.py
index 92fa7b976..4019bbe20 100644
--- a/pandas/tests/test_strings.py
+++ b/pandas/tests/test_strings.py
@@ -2439,6 +2439,26 @@ class TestStringMethods(tm.TestCase):
                            True, False, False])
         assert_series_equal(result, expected)
 
+    def test_contains_nan(self):
+        # PR #14171
+        s = Series([np.nan, np.nan, np.nan], dtype=np.object_)
+
+        result = s.str.contains('foo', na=False)
+        expected = Series([False, False, False], dtype=np.bool_)
+        assert_series_equal(result, expected)
+
+        result = s.str.contains('foo', na=True)
+        expected = Series([True, True, True], dtype=np.bool_)
+        assert_series_equal(result, expected)
+
+        result = s.str.contains('foo', na="foo")
+        expected = Series(["foo", "foo", "foo"], dtype=np.object_)
+        assert_series_equal(result, expected)
+
+        result = s.str.contains('foo')
+        expected = Series([np.nan, np.nan, np.nan], dtype=np.object_)
+        assert_series_equal(result, expected)
+
     def test_more_replace(self):
         # PR #1179
         s = Series(['A', 'B', 'C', 'Aaba', 'Baca', '', NA, 'CABA',
