commit 2fa33fbddf4ae40b2dd47e146444a41bd6bccd6e
Author: Dr-Irv <irv@princeton.com>
Date:   Fri Dec 23 16:58:20 2016 -0500

    BUG: Incorrect index label displayed on MultiIndex DataFrame
    
    closes #14882
    closes #14975

diff --git a/doc/source/whatsnew/v0.20.0.txt b/doc/source/whatsnew/v0.20.0.txt
index 4689a5a8a..1d83dee7a 100644
--- a/doc/source/whatsnew/v0.20.0.txt
+++ b/doc/source/whatsnew/v0.20.0.txt
@@ -421,12 +421,14 @@ Bug Fixes
 
 - Require at least 0.23 version of cython to avoid problems with character encodings (:issue:`14699`)
 - Bug in ``pd.pivot_table()`` where no error was raised when values argument was not in the columns (:issue:`14938`)
+
 - Bug in ``.to_json()`` where ``lines=True`` and contents (keys or values) contain escaped characters (:issue:`15096`)
 
 - Bug in ``DataFrame.groupby().describe()`` when grouping on ``Index`` containing tuples (:issue:`14848`)
 - Bug in creating a ``MultiIndex`` with tuples and not passing a list of names; this will now raise ``ValueError`` (:issue:`15110`)
 
 - Bug in catching an overflow in ``Timestamp`` + ``Timedelta/Offset`` operations (:issue:`15126`)
+- Bug in the HTML display with with a ``MultiIndex`` and truncation (:issue:`14882`)
 
 
 - Bug in ``pd.merge_asof()`` where ``left_index``/``right_index`` together caused a failure when ``tolerance`` was specified (:issue:`15135`)
@@ -445,4 +447,12 @@ Bug Fixes
 
 - Bug in ``pd.read_csv()`` with ``float_precision='round_trip'`` which caused a segfault when a text entry is parsed (:issue:`15140`)
 
+
+
+
+
+
+
+
+
 - Bug in ``DataFrame.boxplot`` where ``fontsize`` was not applied to the tick labels on both axes (:issue:`15108`)
diff --git a/pandas/formats/format.py b/pandas/formats/format.py
index a33194374..adfb54c02 100644
--- a/pandas/formats/format.py
+++ b/pandas/formats/format.py
@@ -1248,6 +1248,7 @@ class HTMLFormatter(TableFormatter):
                 # Insert ... row and adjust idx_values and
                 # level_lengths to take this into account.
                 ins_row = self.fmt.tr_row_num
+                inserted = False
                 for lnum, records in enumerate(level_lengths):
                     rec_new = {}
                     for tag, span in list(records.items()):
@@ -1255,9 +1256,17 @@ class HTMLFormatter(TableFormatter):
                             rec_new[tag + 1] = span
                         elif tag + span > ins_row:
                             rec_new[tag] = span + 1
-                            dot_row = list(idx_values[ins_row - 1])
-                            dot_row[-1] = u('...')
-                            idx_values.insert(ins_row, tuple(dot_row))
+
+                            # GH 14882 - Make sure insertion done once
+                            if not inserted:
+                                dot_row = list(idx_values[ins_row - 1])
+                                dot_row[-1] = u('...')
+                                idx_values.insert(ins_row, tuple(dot_row))
+                                inserted = True
+                            else:
+                                dot_row = list(idx_values[ins_row])
+                                dot_row[inner_lvl - lnum] = u('...')
+                                idx_values[ins_row] = tuple(dot_row)
                         else:
                             rec_new[tag] = span
                         # If ins_row lies between tags, all cols idx cols
@@ -1267,6 +1276,12 @@ class HTMLFormatter(TableFormatter):
                             if lnum == 0:
                                 idx_values.insert(ins_row, tuple(
                                     [u('...')] * len(level_lengths)))
+
+                            # GH 14882 - Place ... in correct level
+                            elif inserted:
+                                dot_row = list(idx_values[ins_row])
+                                dot_row[inner_lvl - lnum] = u('...')
+                                idx_values[ins_row] = tuple(dot_row)
                     level_lengths[lnum] = rec_new
 
                 level_lengths[inner_lvl][ins_row] = 1
diff --git a/pandas/tests/formats/test_format.py b/pandas/tests/formats/test_format.py
index b27e051d4..9eff64b40 100644
--- a/pandas/tests/formats/test_format.py
+++ b/pandas/tests/formats/test_format.py
@@ -1214,6 +1214,554 @@ class TestDataFrameFormatting(tm.TestCase):
 
         self.assertEqual(result, expected)
 
+    def test_to_html_multiindex_odd_even_truncate(self):
+        # GH 14882 - Issue on truncation with odd length DataFrame
+        mi = MultiIndex.from_product([[100, 200, 300],
+                                      [10, 20, 30],
+                                      [1, 2, 3, 4, 5, 6, 7]],
+                                     names=['a','b','c'])
+        df = DataFrame({'n' : range(len(mi))}, index = mi)
+        result = df.to_html(max_rows=60)
+        expected = """\
+<table border="1" class="dataframe">
+  <thead>
+    <tr style="text-align: right;">
+      <th></th>
+      <th></th>
+      <th></th>
+      <th>n</th>
+    </tr>
+    <tr>
+      <th>a</th>
+      <th>b</th>
+      <th>c</th>
+      <th></th>
+    </tr>
+  </thead>
+  <tbody>
+    <tr>
+      <th rowspan="21" valign="top">100</th>
+      <th rowspan="7" valign="top">10</th>
+      <th>1</th>
+      <td>0</td>
+    </tr>
+    <tr>
+      <th>2</th>
+      <td>1</td>
+    </tr>
+    <tr>
+      <th>3</th>
+      <td>2</td>
+    </tr>
+    <tr>
+      <th>4</th>
+      <td>3</td>
+    </tr>
+    <tr>
+      <th>5</th>
+      <td>4</td>
+    </tr>
+    <tr>
+      <th>6</th>
+      <td>5</td>
+    </tr>
+    <tr>
+      <th>7</th>
+      <td>6</td>
+    </tr>
+    <tr>
+      <th rowspan="7" valign="top">20</th>
+      <th>1</th>
+      <td>7</td>
+    </tr>
+    <tr>
+      <th>2</th>
+      <td>8</td>
+    </tr>
+    <tr>
+      <th>3</th>
+      <td>9</td>
+    </tr>
+    <tr>
+      <th>4</th>
+      <td>10</td>
+    </tr>
+    <tr>
+      <th>5</th>
+      <td>11</td>
+    </tr>
+    <tr>
+      <th>6</th>
+      <td>12</td>
+    </tr>
+    <tr>
+      <th>7</th>
+      <td>13</td>
+    </tr>
+    <tr>
+      <th rowspan="7" valign="top">30</th>
+      <th>1</th>
+      <td>14</td>
+    </tr>
+    <tr>
+      <th>2</th>
+      <td>15</td>
+    </tr>
+    <tr>
+      <th>3</th>
+      <td>16</td>
+    </tr>
+    <tr>
+      <th>4</th>
+      <td>17</td>
+    </tr>
+    <tr>
+      <th>5</th>
+      <td>18</td>
+    </tr>
+    <tr>
+      <th>6</th>
+      <td>19</td>
+    </tr>
+    <tr>
+      <th>7</th>
+      <td>20</td>
+    </tr>
+    <tr>
+      <th rowspan="19" valign="top">200</th>
+      <th rowspan="7" valign="top">10</th>
+      <th>1</th>
+      <td>21</td>
+    </tr>
+    <tr>
+      <th>2</th>
+      <td>22</td>
+    </tr>
+    <tr>
+      <th>3</th>
+      <td>23</td>
+    </tr>
+    <tr>
+      <th>4</th>
+      <td>24</td>
+    </tr>
+    <tr>
+      <th>5</th>
+      <td>25</td>
+    </tr>
+    <tr>
+      <th>6</th>
+      <td>26</td>
+    </tr>
+    <tr>
+      <th>7</th>
+      <td>27</td>
+    </tr>
+    <tr>
+      <th rowspan="5" valign="top">20</th>
+      <th>1</th>
+      <td>28</td>
+    </tr>
+    <tr>
+      <th>2</th>
+      <td>29</td>
+    </tr>
+    <tr>
+      <th>...</th>
+      <td>...</td>
+    </tr>
+    <tr>
+      <th>6</th>
+      <td>33</td>
+    </tr>
+    <tr>
+      <th>7</th>
+      <td>34</td>
+    </tr>
+    <tr>
+      <th rowspan="7" valign="top">30</th>
+      <th>1</th>
+      <td>35</td>
+    </tr>
+    <tr>
+      <th>2</th>
+      <td>36</td>
+    </tr>
+    <tr>
+      <th>3</th>
+      <td>37</td>
+    </tr>
+    <tr>
+      <th>4</th>
+      <td>38</td>
+    </tr>
+    <tr>
+      <th>5</th>
+      <td>39</td>
+    </tr>
+    <tr>
+      <th>6</th>
+      <td>40</td>
+    </tr>
+    <tr>
+      <th>7</th>
+      <td>41</td>
+    </tr>
+    <tr>
+      <th rowspan="21" valign="top">300</th>
+      <th rowspan="7" valign="top">10</th>
+      <th>1</th>
+      <td>42</td>
+    </tr>
+    <tr>
+      <th>2</th>
+      <td>43</td>
+    </tr>
+    <tr>
+      <th>3</th>
+      <td>44</td>
+    </tr>
+    <tr>
+      <th>4</th>
+      <td>45</td>
+    </tr>
+    <tr>
+      <th>5</th>
+      <td>46</td>
+    </tr>
+    <tr>
+      <th>6</th>
+      <td>47</td>
+    </tr>
+    <tr>
+      <th>7</th>
+      <td>48</td>
+    </tr>
+    <tr>
+      <th rowspan="7" valign="top">20</th>
+      <th>1</th>
+      <td>49</td>
+    </tr>
+    <tr>
+      <th>2</th>
+      <td>50</td>
+    </tr>
+    <tr>
+      <th>3</th>
+      <td>51</td>
+    </tr>
+    <tr>
+      <th>4</th>
+      <td>52</td>
+    </tr>
+    <tr>
+      <th>5</th>
+      <td>53</td>
+    </tr>
+    <tr>
+      <th>6</th>
+      <td>54</td>
+    </tr>
+    <tr>
+      <th>7</th>
+      <td>55</td>
+    </tr>
+    <tr>
+      <th rowspan="7" valign="top">30</th>
+      <th>1</th>
+      <td>56</td>
+    </tr>
+    <tr>
+      <th>2</th>
+      <td>57</td>
+    </tr>
+    <tr>
+      <th>3</th>
+      <td>58</td>
+    </tr>
+    <tr>
+      <th>4</th>
+      <td>59</td>
+    </tr>
+    <tr>
+      <th>5</th>
+      <td>60</td>
+    </tr>
+    <tr>
+      <th>6</th>
+      <td>61</td>
+    </tr>
+    <tr>
+      <th>7</th>
+      <td>62</td>
+    </tr>
+  </tbody>
+</table>"""
+        self.assertEqual(result, expected)
+
+        # Test that ... appears in a middle level
+        result = df.to_html(max_rows=56)
+        expected = """\
+<table border="1" class="dataframe">
+  <thead>
+    <tr style="text-align: right;">
+      <th></th>
+      <th></th>
+      <th></th>
+      <th>n</th>
+    </tr>
+    <tr>
+      <th>a</th>
+      <th>b</th>
+      <th>c</th>
+      <th></th>
+    </tr>
+  </thead>
+  <tbody>
+    <tr>
+      <th rowspan="21" valign="top">100</th>
+      <th rowspan="7" valign="top">10</th>
+      <th>1</th>
+      <td>0</td>
+    </tr>
+    <tr>
+      <th>2</th>
+      <td>1</td>
+    </tr>
+    <tr>
+      <th>3</th>
+      <td>2</td>
+    </tr>
+    <tr>
+      <th>4</th>
+      <td>3</td>
+    </tr>
+    <tr>
+      <th>5</th>
+      <td>4</td>
+    </tr>
+    <tr>
+      <th>6</th>
+      <td>5</td>
+    </tr>
+    <tr>
+      <th>7</th>
+      <td>6</td>
+    </tr>
+    <tr>
+      <th rowspan="7" valign="top">20</th>
+      <th>1</th>
+      <td>7</td>
+    </tr>
+    <tr>
+      <th>2</th>
+      <td>8</td>
+    </tr>
+    <tr>
+      <th>3</th>
+      <td>9</td>
+    </tr>
+    <tr>
+      <th>4</th>
+      <td>10</td>
+    </tr>
+    <tr>
+      <th>5</th>
+      <td>11</td>
+    </tr>
+    <tr>
+      <th>6</th>
+      <td>12</td>
+    </tr>
+    <tr>
+      <th>7</th>
+      <td>13</td>
+    </tr>
+    <tr>
+      <th rowspan="7" valign="top">30</th>
+      <th>1</th>
+      <td>14</td>
+    </tr>
+    <tr>
+      <th>2</th>
+      <td>15</td>
+    </tr>
+    <tr>
+      <th>3</th>
+      <td>16</td>
+    </tr>
+    <tr>
+      <th>4</th>
+      <td>17</td>
+    </tr>
+    <tr>
+      <th>5</th>
+      <td>18</td>
+    </tr>
+    <tr>
+      <th>6</th>
+      <td>19</td>
+    </tr>
+    <tr>
+      <th>7</th>
+      <td>20</td>
+    </tr>
+    <tr>
+      <th rowspan="15" valign="top">200</th>
+      <th rowspan="7" valign="top">10</th>
+      <th>1</th>
+      <td>21</td>
+    </tr>
+    <tr>
+      <th>2</th>
+      <td>22</td>
+    </tr>
+    <tr>
+      <th>3</th>
+      <td>23</td>
+    </tr>
+    <tr>
+      <th>4</th>
+      <td>24</td>
+    </tr>
+    <tr>
+      <th>5</th>
+      <td>25</td>
+    </tr>
+    <tr>
+      <th>6</th>
+      <td>26</td>
+    </tr>
+    <tr>
+      <th>7</th>
+      <td>27</td>
+    </tr>
+    <tr>
+      <th>...</th>
+      <th>...</th>
+      <td>...</td>
+    </tr>
+    <tr>
+      <th rowspan="7" valign="top">30</th>
+      <th>1</th>
+      <td>35</td>
+    </tr>
+    <tr>
+      <th>2</th>
+      <td>36</td>
+    </tr>
+    <tr>
+      <th>3</th>
+      <td>37</td>
+    </tr>
+    <tr>
+      <th>4</th>
+      <td>38</td>
+    </tr>
+    <tr>
+      <th>5</th>
+      <td>39</td>
+    </tr>
+    <tr>
+      <th>6</th>
+      <td>40</td>
+    </tr>
+    <tr>
+      <th>7</th>
+      <td>41</td>
+    </tr>
+    <tr>
+      <th rowspan="21" valign="top">300</th>
+      <th rowspan="7" valign="top">10</th>
+      <th>1</th>
+      <td>42</td>
+    </tr>
+    <tr>
+      <th>2</th>
+      <td>43</td>
+    </tr>
+    <tr>
+      <th>3</th>
+      <td>44</td>
+    </tr>
+    <tr>
+      <th>4</th>
+      <td>45</td>
+    </tr>
+    <tr>
+      <th>5</th>
+      <td>46</td>
+    </tr>
+    <tr>
+      <th>6</th>
+      <td>47</td>
+    </tr>
+    <tr>
+      <th>7</th>
+      <td>48</td>
+    </tr>
+    <tr>
+      <th rowspan="7" valign="top">20</th>
+      <th>1</th>
+      <td>49</td>
+    </tr>
+    <tr>
+      <th>2</th>
+      <td>50</td>
+    </tr>
+    <tr>
+      <th>3</th>
+      <td>51</td>
+    </tr>
+    <tr>
+      <th>4</th>
+      <td>52</td>
+    </tr>
+    <tr>
+      <th>5</th>
+      <td>53</td>
+    </tr>
+    <tr>
+      <th>6</th>
+      <td>54</td>
+    </tr>
+    <tr>
+      <th>7</th>
+      <td>55</td>
+    </tr>
+    <tr>
+      <th rowspan="7" valign="top">30</th>
+      <th>1</th>
+      <td>56</td>
+    </tr>
+    <tr>
+      <th>2</th>
+      <td>57</td>
+    </tr>
+    <tr>
+      <th>3</th>
+      <td>58</td>
+    </tr>
+    <tr>
+      <th>4</th>
+      <td>59</td>
+    </tr>
+    <tr>
+      <th>5</th>
+      <td>60</td>
+    </tr>
+    <tr>
+      <th>6</th>
+      <td>61</td>
+    </tr>
+    <tr>
+      <th>7</th>
+      <td>62</td>
+    </tr>
+  </tbody>
+</table>"""
+        self.assertEqual(result, expected)
+
     def test_to_html_index_formatter(self):
         df = DataFrame([[0, 1], [2, 3], [4, 5], [6, 7]], columns=['foo', None],
                        index=lrange(4))
