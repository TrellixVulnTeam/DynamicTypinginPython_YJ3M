commit 157087bf8de46077cce77b38a161e44aec0770c6
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Nov 22 14:24:12 2011 -0500

    BUG: set NA in DataFrame.min/max, fix GH #384

diff --git a/pandas/core/nanops.py b/pandas/core/nanops.py
index 3b173c49e..3c5ce9f52 100644
--- a/pandas/core/nanops.py
+++ b/pandas/core/nanops.py
@@ -100,19 +100,32 @@ def nanskew(values, axis=0, skipna=True, copy=True):
     return result
 
 def nanmin(values, axis=0, skipna=True, copy=True):
+    mask = isnull(values)
     if skipna and not issubclass(values.dtype.type, np.integer):
         if copy:
             values = values.copy()
-        np.putmask(values, isnull(values), np.inf)
-    return values.min(axis)
+        np.putmask(values, mask, np.inf)
+    result = values.min(axis)
+
+    null_mask = (mask.shape[axis] - mask.sum(axis)) == 0
+    if null_mask.any():
+        result = result.astype('f8')
+        result[null_mask] = np.nan
+    return result
 
 def nanmax(values, axis=0, skipna=True, copy=True):
+    mask = isnull(values)
     if skipna and not issubclass(values.dtype.type, np.integer):
         if copy:
             values = values.copy()
-        np.putmask(values, isnull(values), -np.inf)
+        np.putmask(values, mask, -np.inf)
+    result = values.max(axis)
 
-    return values.max(axis)
+    null_mask = (mask.shape[axis] - mask.sum(axis)) == 0
+    if null_mask.any():
+        result = result.astype('f8')
+        result[null_mask] = np.nan
+    return result
 
 def nanprod(values, axis=0, skipna=True, copy=True):
     mask = isnull(values)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index a0bb3f996..5f0a51a13 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3123,12 +3123,12 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         getattr(self.mixed_frame, name)(axis=1)
 
         # all NA case
-        # if has_skipna:
-        #     all_na = self.frame * np.NaN
-        #     r0 = getattr(all_na, name)(axis=0)
-        #     r1 = getattr(all_na, name)(axis=1)
-        #     self.assert_(np.isnan(r0).all())
-        #     self.assert_(np.isnan(r1).all())
+        if has_skipna:
+            all_na = self.frame * np.NaN
+            r0 = getattr(all_na, name)(axis=0)
+            r1 = getattr(all_na, name)(axis=1)
+            self.assert_(np.isnan(r0).all())
+            self.assert_(np.isnan(r1).all())
 
     def test_sum_corner(self):
         axis0 = self.empty.sum(0)
