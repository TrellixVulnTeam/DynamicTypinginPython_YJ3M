commit 5771612634e23dbaf4aa4cb42d79d19c458851fa
Author: Wouter Overmeire <lodagro@gmail.com>
Date:   Sun Aug 5 21:45:07 2012 +0200

    BUG: fix to_html justify and index args, close #1728

diff --git a/pandas/core/format.py b/pandas/core/format.py
index 5a4b7a4d5..d5ea02acf 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -43,7 +43,8 @@ docstring_to_string = """
         multiindex key at each row, default True
     justify : {'left', 'right'}, default None
         Left or right-justify the column labels. If None uses the option from
-        the configuration in pandas.core.common, 'left' out of the box
+        the print configuration (controlled by set_printoptions), 'right' out
+        of the box.
     index_names : bool, optional
         Prints the names of the indexes, default True
     force_unicode : bool, default False
@@ -275,8 +276,11 @@ class DataFrameFormatter(object):
         def write_td(s, indent=0):
             write('<td>%s</td>' % _str(s), indent)
 
-        def write_tr(l, indent=0, indent_delta=4, header=False):
-            write('<tr>', indent)
+        def write_tr(l, indent=0, indent_delta=4, header=False, align=None):
+            if align is None:
+                write('<tr>', indent)
+            else:
+                write('<tr style="text-align: %s;">' % align, indent)
             indent += indent_delta
             if header:
                 for s in l:
@@ -294,16 +298,22 @@ class DataFrameFormatter(object):
         write('<table border="1">', indent)
 
         def _column_header():
-            row = [''] * (frame.index.nlevels - 1)
+            if self.index:
+                row = [''] * (frame.index.nlevels - 1)
+            else:
+                row = []
 
             if isinstance(self.columns, MultiIndex):
-                if self.has_column_names:
+                if self.has_column_names and self.index:
                     row.append(single_column_table(self.columns.names))
                 else:
                     row.append('')
-                row.extend([single_column_table(c) for c in self.columns])
+                style = "text-align: %s;" % self.justify
+                row.extend([single_column_table(c, self.justify, style) for
+                    c in self.columns])
             else:
-                row.append(self.columns.name or '')
+                if self.index:
+                    row.append(self.columns.name or '')
                 row.extend(self.columns)
             return row
 
@@ -324,7 +334,12 @@ class DataFrameFormatter(object):
 
                 col_row = _column_header()
                 indent += indent_delta
-                write_tr(col_row, indent, indent_delta, header=True)
+                if isinstance(self.columns, MultiIndex):
+                    align = None
+                else:
+                    align = self.justify
+                write_tr(col_row, indent, indent_delta, header=True,
+                        align=align)
                 if self.has_index_names:
                     row = frame.index.names + [''] * len(self.columns)
                     write_tr(row, indent, indent_delta, header=True)
@@ -351,10 +366,11 @@ class DataFrameFormatter(object):
             # write values
             for i in range(len(frame)):
                 row = []
-                if isinstance(frame.index, MultiIndex):
-                    row.extend(_maybe_bold_row(frame.index[i]))
-                else:
-                    row.append(_maybe_bold_row(frame.index[i]))
+                if self.index:
+                    if isinstance(frame.index, MultiIndex):
+                        row.extend(_maybe_bold_row(frame.index[i]))
+                    else:
+                        row.append(_maybe_bold_row(frame.index[i]))
                 for j in range(len(self.columns)):
                     row.append(fmt_values[j][i])
                 write_tr(row, indent, indent_delta)
@@ -655,8 +671,13 @@ def _trim_zeros(str_floats, na_rep='NaN'):
     return [x[:-1] if x.endswith('.') and x != na_rep else x for x in trimmed]
 
 
-def single_column_table(column):
-    table = '<table><tbody>'
+def single_column_table(column, align=None, style=None):
+    table = '<table'
+    if align is not None:
+        table += (' align="%s"' % align)
+    if style is not None:
+        table += (' style="%s"' % style)
+    table += '><tbody>'
     for i in column:
         table += ('<tr><td>%s</td></tr>' % str(i))
     table += '</tbody></table>'
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index dc5c6c0f6..abd75fa9a 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1240,7 +1240,7 @@ class DataFrame(NDFrame):
     def to_html(self, buf=None, columns=None, col_space=None, colSpace=None,
                 header=True, index=True, na_rep='NaN', formatters=None,
                 float_format=None, sparsify=None, index_names=True,
-                bold_rows=True):
+                justify=None, force_unicode=False, bold_rows=True):
         """
         to_html-specific options
         bold_rows : boolean, default True
@@ -1257,12 +1257,13 @@ class DataFrame(NDFrame):
 
         formatter = fmt.DataFrameFormatter(self, buf=buf, columns=columns,
                                            col_space=col_space, na_rep=na_rep,
-                                           header=header, index=index,
                                            formatters=formatters,
                                            float_format=float_format,
-                                           bold_rows=bold_rows,
                                            sparsify=sparsify,
-                                           index_names=index_names)
+                                           justify=justify,
+                                           index_names=index_names,
+                                           header=header, index=index,
+                                           bold_rows=bold_rows)
         formatter.to_html()
 
         if buf is None:
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index 1484a41b9..5d02953d9 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -412,20 +412,24 @@ class TestDataFrameFormatting(unittest.TestCase):
                                                     np.mod(range(4), 2)),
                                                 names=['CL0', 'CL1'])
         df = pandas.DataFrame([list('abcd'), list('efgh')], columns=columns)
-        result = df.to_html()
+        result = df.to_html(justify='left')
         expected = ('<table border="1">\n'
                     '  <thead>\n'
                     '    <tr>\n'
                     '      <th><table><tbody><tr><td>CL0</td></tr><tr>'
                     '<td>CL1</td></tr></tbody></table></th>\n'
-                    '      <th><table><tbody><tr><td>0</td></tr><tr>'
-                    '<td>0</td></tr></tbody></table></th>\n'
-                    '      <th><table><tbody><tr><td>1</td></tr><tr>'
-                    '<td>1</td></tr></tbody></table></th>\n'
-                    '      <th><table><tbody><tr><td>2</td></tr><tr>'
-                    '<td>0</td></tr></tbody></table></th>\n'
-                    '      <th><table><tbody><tr><td>3</td></tr><tr>'
-                    '<td>1</td></tr></tbody></table></th>\n'
+                    '      <th><table align="left" style="text-align: left;">'
+                    '<tbody><tr><td>0</td></tr><tr><td>0</td></tr></tbody>'
+                    '</table></th>\n'
+                    '      <th><table align="left" style="text-align: left;">'
+                    '<tbody><tr><td>1</td></tr><tr><td>1</td></tr></tbody>'
+                    '</table></th>\n'
+                    '      <th><table align="left" style="text-align: left;">'
+                    '<tbody><tr><td>2</td></tr><tr><td>0</td></tr></tbody>'
+                    '</table></th>\n'
+                    '      <th><table align="left" style="text-align: left;">'
+                    '<tbody><tr><td>3</td></tr><tr><td>1</td></tr></tbody>'
+                    '</table></th>\n'
                     '    </tr>\n'
                     '  </thead>\n'
                     '  <tbody>\n'
@@ -445,24 +449,29 @@ class TestDataFrameFormatting(unittest.TestCase):
                     '    </tr>\n'
                     '  </tbody>\n'
                     '</table>')
+
         self.assertEqual(result, expected)
 
         columns = pandas.MultiIndex.from_tuples(zip(range(4),
                                                     np.mod(range(4), 2)))
         df = pandas.DataFrame([list('abcd'), list('efgh')], columns=columns)
-        result = df.to_html()
+        result = df.to_html(justify='right')
         expected = ('<table border="1">\n'
                     '  <thead>\n'
                     '    <tr>\n'
                     '      <th></th>\n'
-                    '      <th><table><tbody><tr><td>0</td></tr>'
-                    '<tr><td>0</td></tr></tbody></table></th>\n'
-                    '      <th><table><tbody><tr><td>1</td></tr>'
-                    '<tr><td>1</td></tr></tbody></table></th>\n'
-                    '      <th><table><tbody><tr><td>2</td></tr>'
-                    '<tr><td>0</td></tr></tbody></table></th>\n'
-                    '      <th><table><tbody><tr><td>3</td></tr>'
-                    '<tr><td>1</td></tr></tbody></table></th>\n'
+                    '      <th><table align="right" style="text-align:'
+                    ' right;"><tbody><tr><td>0</td></tr><tr><td>0</td></tr>'
+                    '</tbody></table></th>\n'
+                    '      <th><table align="right" style="text-align:'
+                    ' right;"><tbody><tr><td>1</td></tr><tr><td>1</td></tr>'
+                    '</tbody></table></th>\n'
+                    '      <th><table align="right" style="text-align:'
+                    ' right;"><tbody><tr><td>2</td></tr><tr><td>0</td></tr>'
+                    '</tbody></table></th>\n'
+                    '      <th><table align="right" style="text-align:'
+                    ' right;"><tbody><tr><td>3</td></tr><tr><td>1</td></tr>'
+                    '</tbody></table></th>\n'
                     '    </tr>\n'
                     '  </thead>\n'
                     '  <tbody>\n'
@@ -482,8 +491,98 @@ class TestDataFrameFormatting(unittest.TestCase):
                     '    </tr>\n'
                     '  </tbody>\n'
                     '</table>')
+
+        self.assertEqual(result, expected)
+
+    def test_to_html_justify(self):
+        df = pandas.DataFrame({'A': [6, 30000, 2],
+                               'B': [1, 2, 70000],
+                               'C': [223442, 0, 1]},
+                              columns=['A', 'B', 'C'])
+        result = df.to_html(justify='left')
+        expected = ('<table border="1">\n'
+                    '  <thead>\n'
+                    '    <tr style="text-align: left;">\n'
+                    '      <th></th>\n'
+                    '      <th>A</th>\n'
+                    '      <th>B</th>\n'
+                    '      <th>C</th>\n'
+                    '    </tr>\n'
+                    '  </thead>\n'
+                    '  <tbody>\n'
+                    '    <tr>\n'
+                    '      <td><strong>0</strong></td>\n'
+                    '      <td>     6</td>\n'
+                    '      <td>     1</td>\n'
+                    '      <td> 223442</td>\n'
+                    '    </tr>\n'
+                    '    <tr>\n'
+                    '      <td><strong>1</strong></td>\n'
+                    '      <td> 30000</td>\n'
+                    '      <td>     2</td>\n'
+                    '      <td>      0</td>\n'
+                    '    </tr>\n'
+                    '    <tr>\n'
+                    '      <td><strong>2</strong></td>\n'
+                    '      <td>     2</td>\n'
+                    '      <td> 70000</td>\n'
+                    '      <td>      1</td>\n'
+                    '    </tr>\n'
+                    '  </tbody>\n'
+                    '</table>')
+
+        self.assertEqual(result, expected)
+
+        result = df.to_html(justify='right')
+        expected = ('<table border="1">\n'
+                    '  <thead>\n'
+                    '    <tr style="text-align: right;">\n'
+                    '      <th></th>\n'
+                    '      <th>A</th>\n'
+                    '      <th>B</th>\n'
+                    '      <th>C</th>\n'
+                    '    </tr>\n'
+                    '  </thead>\n'
+                    '  <tbody>\n'
+                    '    <tr>\n'
+                    '      <td><strong>0</strong></td>\n'
+                    '      <td>     6</td>\n'
+                    '      <td>     1</td>\n'
+                    '      <td> 223442</td>\n'
+                    '    </tr>\n'
+                    '    <tr>\n'
+                    '      <td><strong>1</strong></td>\n'
+                    '      <td> 30000</td>\n'
+                    '      <td>     2</td>\n'
+                    '      <td>      0</td>\n'
+                    '    </tr>\n'
+                    '    <tr>\n'
+                    '      <td><strong>2</strong></td>\n'
+                    '      <td>     2</td>\n'
+                    '      <td> 70000</td>\n'
+                    '      <td>      1</td>\n'
+                    '    </tr>\n'
+                    '  </tbody>\n'
+                    '</table>')
         self.assertEqual(result, expected)
 
+    def test_to_html_index(self):
+        index = ['foo', 'bar', 'baz']
+        df = pandas.DataFrame({'A': [1, 2, 3],
+                               'B': [1.2, 3.4, 5.6],
+                               'C': ['one', 'two', np.NaN]},
+                              columns=['A', 'B', 'C'],
+                              index = index)
+        result = df.to_html(index=False)
+        for i in index:
+            self.assert_(i not in result)
+
+        tuples = [('foo', 'car'), ('foo', 'bike'), ('bar' ,'car')]
+        df.index = pandas.MultiIndex.from_tuples(tuples)
+        result = df.to_html(index=False)
+        for i in ['foo', 'bar', 'car', 'bike']:
+            self.assert_(i not in result)
+
     def test_repr_html(self):
         self.frame._repr_html_()
 
