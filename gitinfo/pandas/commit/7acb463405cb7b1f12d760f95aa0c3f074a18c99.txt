commit 7acb463405cb7b1f12d760f95aa0c3f074a18c99
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jun 23 14:26:07 2011 -0400

    BUG: Index.__ne__ was not implemented

diff --git a/RELEASE.rst b/RELEASE.rst
index 9eecc405d..f38589252 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -7,8 +7,8 @@ pandas 0.4 Release Notes
 What is it
 ==========
 
-**pandas** is a library of labeled data structures, statistical models, and
-general code for working with time series and cross-sectional data. It was
+**pandas** is a library of powerful labeled data structures, statistical tools,
+and general code for working with time series and cross-sectional data. It was
 designed with the practical needs of statistical modeling and large,
 inhomogeneous data sets in mind.
 
@@ -36,9 +36,9 @@ Release notes
 * `Series.describe`, `DataFrame.describe`: produces an R-like table of summary
   statistics about each data column
 * `DataFrame.quantile`, `Series.quantile`
-* Fancy indexing operator on Series / DataFrame, e.g.:
+* Fancy indexing operator on Series / DataFrame, e.g. via .ix operator:
   * series.ix[[d1, d2, d3]]
-  * frame.ix[5:10, ['C', 'B', 'A']]
+  * frame.ix[5:10, ['C', 'B', 'A']], frame.ix[5:10, 'A':'C']
   * frame.ix[date1:date2]
 * Boolean indexing with DataFrame objects: df[df > 1] = 1
 * `pytz` / tzinfo support in `DateRange`
diff --git a/pandas/core/index.py b/pandas/core/index.py
index 5014cd237..8add0f187 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -172,6 +172,7 @@ class Index(np.ndarray):
             return Index(self.view(np.ndarray) + other)
 
     __eq__ = _indexOp('__eq__')
+    __ne__ = _indexOp('__ne__')
     __lt__ = _indexOp('__lt__')
     __gt__ = _indexOp('__gt__')
     __le__ = _indexOp('__le__')
diff --git a/pandas/core/tests/test_index.py b/pandas/core/tests/test_index.py
index 6cb914645..d7bd27e13 100644
--- a/pandas/core/tests/test_index.py
+++ b/pandas/core/tests/test_index.py
@@ -1,12 +1,15 @@
 from datetime import timedelta
-from pandas.core.index import Index
-import pandas.util.testing as common
-import pandas.lib.tseries as tseries
-import numpy as np
+import operator
 import os
 import pickle
 import unittest
 
+import numpy as np
+
+from pandas.core.index import Index
+import pandas.util.testing as common
+import pandas.lib.tseries as tseries
+
 class TestIndex(unittest.TestCase):
 
     def setUp(self):
@@ -81,11 +84,20 @@ class TestIndex(unittest.TestCase):
         element = index[len(index) // 2]
         arr = np.array(index)
 
-        self.assert_(np.array_equal(arr == element, index == element))
-        self.assert_(np.array_equal(arr > element, index > element))
-        self.assert_(np.array_equal(arr < element, index < element))
-        self.assert_(np.array_equal(arr >= element, index >= element))
-        self.assert_(np.array_equal(arr <= element, index <= element))
+        def _check(op):
+            arr_result = op(arr, element)
+            index_result = op(index, element)
+
+            self.assert_(isinstance(index_result, np.ndarray))
+            self.assert_(not isinstance(index_result, Index))
+            self.assert_(np.array_equal(arr_result, index_result))
+
+        _check(operator.eq)
+        _check(operator.ne)
+        _check(operator.gt)
+        _check(operator.lt)
+        _check(operator.ge)
+        _check(operator.le)
 
     def test_booleanindex(self):
         boolIdx = np.repeat(True, len(self.strIndex)).astype(bool)
