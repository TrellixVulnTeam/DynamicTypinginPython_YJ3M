commit 6def1b760eaa6aa29d967820aa60e089263f0f0e
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Oct 5 16:34:06 2011 -0400

    BUG: intersection fails on monotonic Index.intersection(Int64Index) or vice-versa

diff --git a/pandas/core/index.py b/pandas/core/index.py
index 1d43634d3..d03058739 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -296,6 +296,9 @@ class Index(np.ndarray):
 
         other = _ensure_index(other)
 
+        if other.dtype != np.object_:
+            other = other.astype(object)
+
         if self.is_monotonic and other.is_monotonic:
             return Index(lib.inner_join_indexer_object(self, other)[0])
         else:
@@ -664,6 +667,19 @@ class Int64Index(Index):
         else:
             return join_index
 
+    def intersection(self, other):
+        if not isinstance(other, Int64Index):
+            return Index.intersection(self.astype(object), other)
+
+        if self.is_monotonic and other.is_monotonic:
+            result = lib.inner_join_indexer_int64(self, other)[0]
+        else:
+            indexer = self.get_indexer(other)
+            indexer = indexer.take((indexer != -1).nonzero()[0])
+            return self.take(indexer)
+        return Int64Index(result)
+    intersection.__doc__ = Index.intersection.__doc__
+
     def union(self, other):
         if not isinstance(other, Int64Index):
             return Index.union(self.astype(object), other)
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index c54beed33..8f713e220 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -517,6 +517,17 @@ class TestInt64Index(unittest.TestCase):
         right = self.index.join(other, how='right')
         self.assert_(right.equals(other))
 
+    def test_intersection(self):
+        other = Index([1, 2, 3, 4, 5])
+        result = self.index.intersection(other)
+        expected = np.sort(np.intersect1d(self.index.values, other.values))
+        self.assert_(np.array_equal(result, expected))
+
+        result = other.intersection(self.index)
+        expected = np.sort(np.asarray(np.intersect1d(self.index.values,
+                                                     other.values)))
+        self.assert_(np.array_equal(result, expected))
+
     def test_union(self):
 
         # corner case, non-Int64Index
