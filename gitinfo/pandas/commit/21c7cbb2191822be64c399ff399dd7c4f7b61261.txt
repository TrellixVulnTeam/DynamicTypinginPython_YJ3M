commit 21c7cbb2191822be64c399ff399dd7c4f7b61261
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Fri May 22 19:16:23 2020 -0700

    REF: make FY523Mixin a cdef class (#34322)

diff --git a/pandas/_libs/tslibs/offsets.pyx b/pandas/_libs/tslibs/offsets.pyx
index e872d1683..f9ddb6fab 100644
--- a/pandas/_libs/tslibs/offsets.pyx
+++ b/pandas/_libs/tslibs/offsets.pyx
@@ -1329,6 +1329,56 @@ cdef class MonthOffset(SingleConstructorOffset):
         return type(dtindex)._simple_new(shifted, dtype=dtindex.dtype)
 
 
+# ---------------------------------------------------------------------
+# Special Offset Classes
+
+cdef class FY5253Mixin(SingleConstructorOffset):
+    cdef readonly:
+        int startingMonth
+        int weekday
+        str variation
+
+    def __init__(
+        self, n=1, normalize=False, weekday=0, startingMonth=1, variation="nearest"
+    ):
+        BaseOffset.__init__(self, n, normalize)
+        self.startingMonth = startingMonth
+        self.weekday = weekday
+        self.variation = variation
+
+        if self.n == 0:
+            raise ValueError("N cannot be 0")
+
+        if self.variation not in ["nearest", "last"]:
+            raise ValueError(f"{self.variation} is not a valid variation")
+
+    def is_anchored(self) -> bool:
+        return (
+            self.n == 1 and self.startingMonth is not None and self.weekday is not None
+        )
+
+    # --------------------------------------------------------------------
+    # Name-related methods
+
+    @property
+    def rule_code(self) -> str:
+        prefix = self._prefix
+        suffix = self.get_rule_code_suffix()
+        return f"{prefix}-{suffix}"
+
+    def _get_suffix_prefix(self) -> str:
+        if self.variation == "nearest":
+            return "N"
+        else:
+            return "L"
+
+    def get_rule_code_suffix(self) -> str:
+        prefix = self._get_suffix_prefix()
+        month = MONTH_ALIASES[self.startingMonth]
+        weekday = int_to_weekday[self.weekday]
+        return f"{prefix}-{month}-{weekday}"
+
+
 # ----------------------------------------------------------------------
 # RelativeDelta Arithmetic
 
diff --git a/pandas/tseries/offsets.py b/pandas/tseries/offsets.py
index 1163a43f7..b8e95a9c7 100644
--- a/pandas/tseries/offsets.py
+++ b/pandas/tseries/offsets.py
@@ -1511,50 +1511,7 @@ class YearBegin(liboffsets.YearOffset):
 # Special Offset Classes
 
 
-class FY5253Mixin(SingleConstructorOffset):
-    def __init__(
-        self, n=1, normalize=False, weekday=0, startingMonth=1, variation="nearest"
-    ):
-        BaseOffset.__init__(self, n, normalize)
-        object.__setattr__(self, "startingMonth", startingMonth)
-        object.__setattr__(self, "weekday", weekday)
-
-        object.__setattr__(self, "variation", variation)
-
-        if self.n == 0:
-            raise ValueError("N cannot be 0")
-
-        if self.variation not in ["nearest", "last"]:
-            raise ValueError(f"{self.variation} is not a valid variation")
-
-    def is_anchored(self) -> bool:
-        return (
-            self.n == 1 and self.startingMonth is not None and self.weekday is not None
-        )
-
-    # --------------------------------------------------------------------
-    # Name-related methods
-
-    @property
-    def rule_code(self) -> str:
-        prefix = self._prefix
-        suffix = self.get_rule_code_suffix()
-        return f"{prefix}-{suffix}"
-
-    def _get_suffix_prefix(self) -> str:
-        if self.variation == "nearest":
-            return "N"
-        else:
-            return "L"
-
-    def get_rule_code_suffix(self) -> str:
-        prefix = self._get_suffix_prefix()
-        month = ccalendar.MONTH_ALIASES[self.startingMonth]
-        weekday = ccalendar.int_to_weekday[self.weekday]
-        return f"{prefix}-{month}-{weekday}"
-
-
-class FY5253(FY5253Mixin):
+class FY5253(liboffsets.FY5253Mixin):
     """
     Describes 52-53 week fiscal year. This is also known as a 4-4-5 calendar.
 
@@ -1605,6 +1562,10 @@ class FY5253(FY5253Mixin):
     _prefix = "RE"
     _attributes = frozenset(["weekday", "startingMonth", "variation"])
 
+    def __reduce__(self):
+        tup = (self.n, self.normalize, self.weekday, self.startingMonth, self.variation)
+        return type(self), tup
+
     def is_on_offset(self, dt: datetime) -> bool:
         if self.normalize and not is_normalized(dt):
             return False
@@ -1722,7 +1683,7 @@ class FY5253(FY5253Mixin):
         return cls(**cls._parse_suffix(*args))
 
 
-class FY5253Quarter(FY5253Mixin):
+class FY5253Quarter(liboffsets.FY5253Mixin):
     """
     DateOffset increments between business quarter dates
     for 52-53 week fiscal year (also known as a 4-4-5 calendar).
@@ -1792,9 +1753,22 @@ class FY5253Quarter(FY5253Mixin):
         qtr_with_extra_week=1,
         variation="nearest",
     ):
-        FY5253Mixin.__init__(self, n, normalize, weekday, startingMonth, variation)
+        liboffsets.FY5253Mixin.__init__(
+            self, n, normalize, weekday, startingMonth, variation
+        )
         object.__setattr__(self, "qtr_with_extra_week", qtr_with_extra_week)
 
+    def __reduce__(self):
+        tup = (
+            self.n,
+            self.normalize,
+            self.weekday,
+            self.startingMonth,
+            self.qtr_with_extra_week,
+            self.variation,
+        )
+        return type(self), tup
+
     @cache_readonly
     def _offset(self):
         return FY5253(
@@ -1918,7 +1892,7 @@ class FY5253Quarter(FY5253Mixin):
 
     @property
     def rule_code(self) -> str:
-        suffix = FY5253Mixin.rule_code.fget(self)  # type: ignore
+        suffix = liboffsets.FY5253Mixin.rule_code.__get__(self)
         qtr = self.qtr_with_extra_week
         return f"{suffix}-{qtr}"
 
