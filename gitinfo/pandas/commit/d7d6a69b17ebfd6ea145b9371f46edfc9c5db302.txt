commit d7d6a69b17ebfd6ea145b9371f46edfc9c5db302
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Jan 17 15:33:07 2012 -0500

    BUG: disable label-based slicing semantics with integer indexes in Series.__getitem__ and __setitem__, GH #641

diff --git a/doc/source/index.rst b/doc/source/index.rst
index 91ec155a9..5e142f391 100755
--- a/doc/source/index.rst
+++ b/doc/source/index.rst
@@ -120,6 +120,7 @@ See the package overview for more detail about what's in the library.
     visualization
     io
     sparse
+    gotchas
     r_interface
     related
     comparison_with_r
diff --git a/pandas/core/common.py b/pandas/core/common.py
index 3b63ffb96..13af4971d 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -504,12 +504,6 @@ def set_eng_float_format(precision=None, accuracy=3, use_eng_prefix=False):
     print_config.float_format = EngFormatter(accuracy, use_eng_prefix)
     print_config.column_space = max(12, accuracy + 9)
 
-#_float_format = None
-#_column_space = 12
-#_precision = 4
-#_max_rows = 500
-#_max_columns = 0
-
 def _stringify(col):
     # unicode workaround
     if isinstance(col, tuple):
@@ -611,7 +605,7 @@ class _GlobalPrintConfig(object):
         self.precision = 4
         self.float_format = None
         self.column_space = 12
-        self.max_rows = 500
+        self.max_rows = 200
         self.max_columns = 0
         self.colheader_justify = 'right'
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 0b1a1e9d8..07333b656 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -301,7 +301,10 @@ copy : boolean, default False
     def _get_with(self, key):
         # other: fancy integer or otherwise
         if isinstance(key, slice):
-            indexer = self.ix._convert_to_indexer(key, axis=0)
+            if self.index.inferred_type == 'integer':
+                indexer = key
+            else:
+                indexer = self.ix._convert_to_indexer(key, axis=0)
             return self._get_values(indexer)
         else:
             if isinstance(key, tuple):
@@ -383,7 +386,10 @@ copy : boolean, default False
     def _set_with(self, key, value):
         # other: fancy integer or otherwise
         if isinstance(key, slice):
-            indexer = self.ix._convert_to_indexer(key, axis=0)
+            if self.index.inferred_type == 'integer':
+                indexer = key
+            else:
+                indexer = self.ix._convert_to_indexer(key, axis=0)
             return self._set_values(indexer, value)
         else:
             if isinstance(key, tuple):
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 74f758fc2..bc37f362c 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -400,6 +400,17 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         self.assertRaises(Exception, ts.ix.__getitem__, mask_shifted)
         self.assertRaises(Exception, ts.ix.__setitem__, mask_shifted, 1)
 
+    def test_getitem_setitem_slice_integers(self):
+        s = Series(np.random.randn(8), index=[2, 4, 6, 8, 10, 12, 14, 16])
+
+        result = s[:4]
+        expected = s.reindex([2, 4, 6, 8])
+        assert_series_equal(result, expected)
+
+        s[:4] = 0
+        self.assert_((s[:4] == 0).all())
+        self.assert_(not (s[4:] == 0).any())
+
     def test_getitem_out_of_bounds(self):
         # don't segfault, GH #495
         self.assertRaises(IndexError, self.ts.__getitem__, len(self.ts))
@@ -680,6 +691,7 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         str(self.objSeries)
 
         str(Series(tm.randn(1000), index=np.arange(1000)))
+        str(Series(tm.randn(1000), index=np.arange(1000, 0, step=-1)))
 
         # empty
         str(self.empty)
