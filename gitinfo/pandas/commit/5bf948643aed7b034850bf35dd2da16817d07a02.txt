commit 5bf948643aed7b034850bf35dd2da16817d07a02
Author: gfyoung <gfyoung17@gmail.com>
Date:   Mon Dec 4 03:00:54 2017 -0800

    CLN: Remove SparseList from pandas API (#18621)
    
    Deprecated in 0.19.0.
    
    xref gh-14007.

diff --git a/doc/source/sparse.rst b/doc/source/sparse.rst
index 89efa7b4b..2e224f103 100644
--- a/doc/source/sparse.rst
+++ b/doc/source/sparse.rst
@@ -85,15 +85,6 @@ can be converted back to a regular ndarray by calling ``to_dense``:
 
    sparr.to_dense()
 
-.. _sparse.list:
-
-SparseList
-----------
-
-The ``SparseList`` class has been deprecated and will be removed in a future version.
-See the `docs of a previous version <http://pandas.pydata.org/pandas-docs/version/0.18.1/sparse.html#sparselist>`__
-for documentation on ``SparseList``.
-
 
 SparseIndex objects
 -------------------
diff --git a/doc/source/whatsnew/v0.22.0.txt b/doc/source/whatsnew/v0.22.0.txt
index 77503b465..e8f2823f3 100644
--- a/doc/source/whatsnew/v0.22.0.txt
+++ b/doc/source/whatsnew/v0.22.0.txt
@@ -136,6 +136,7 @@ Removal of prior version deprecations/changes
 - ``pd.tseries.util.pivot_annual`` has been  removed (deprecated since v0.19). Use ``pivot_table`` instead (:issue:`18370`)
 - ``pd.tseries.util.isleapyear`` has been removed (deprecated since v0.19). Use ``.is_leap_year`` property in Datetime-likes instead (:issue:`18370`)
 - ``pd.ordered_merge`` has been removed (deprecated since v0.19). Use ``pd.merge_ordered`` instead (:issue:`18459`)
+- The ``SparseList`` class has been removed (:issue:`14007`)
 
 .. _whatsnew_0220.performance:
 
diff --git a/pandas/core/sparse/api.py b/pandas/core/sparse/api.py
index f79bb4886..85941e692 100644
--- a/pandas/core/sparse/api.py
+++ b/pandas/core/sparse/api.py
@@ -1,6 +1,5 @@
 # pylint: disable=W0611
 # flake8: noqa
 from pandas.core.sparse.array import SparseArray
-from pandas.core.sparse.list import SparseList
 from pandas.core.sparse.series import SparseSeries
 from pandas.core.sparse.frame import SparseDataFrame
diff --git a/pandas/core/sparse/list.py b/pandas/core/sparse/list.py
deleted file mode 100644
index f3e64b7ef..000000000
--- a/pandas/core/sparse/list.py
+++ /dev/null
@@ -1,152 +0,0 @@
-import warnings
-import numpy as np
-from pandas.core.base import PandasObject
-from pandas.io.formats.printing import pprint_thing
-
-from pandas.core.dtypes.common import is_scalar
-from pandas.core.sparse.array import SparseArray
-from pandas.util._validators import validate_bool_kwarg
-import pandas._libs.sparse as splib
-
-
-class SparseList(PandasObject):
-
-    """
-    Data structure for accumulating data to be converted into a
-    SparseArray. Has similar API to the standard Python list
-
-    Parameters
-    ----------
-    data : scalar or array-like
-    fill_value : scalar, default NaN
-    """
-
-    def __init__(self, data=None, fill_value=np.nan):
-
-        # see gh-13784
-        warnings.warn("SparseList is deprecated and will be removed "
-                      "in a future version", FutureWarning, stacklevel=2)
-
-        self.fill_value = fill_value
-        self._chunks = []
-
-        if data is not None:
-            self.append(data)
-
-    def __unicode__(self):
-        contents = '\n'.join(repr(c) for c in self._chunks)
-        return '{self}\n{contents}'.format(self=object.__repr__(self),
-                                           contents=pprint_thing(contents))
-
-    def __len__(self):
-        return sum(len(c) for c in self._chunks)
-
-    def __getitem__(self, i):
-        if i < 0:
-            if i + len(self) < 0:  # pragma: no cover
-                raise ValueError('{index} out of range'.format(index=i))
-            i += len(self)
-
-        passed = 0
-        j = 0
-        while i >= passed + len(self._chunks[j]):
-            passed += len(self._chunks[j])
-            j += 1
-        return self._chunks[j][i - passed]
-
-    def __setitem__(self, i, value):
-        raise NotImplementedError
-
-    @property
-    def nchunks(self):
-        return len(self._chunks)
-
-    @property
-    def is_consolidated(self):
-        return self.nchunks == 1
-
-    def consolidate(self, inplace=True):
-        """
-        Internally consolidate chunks of data
-
-        Parameters
-        ----------
-        inplace : boolean, default True
-            Modify the calling object instead of constructing a new one
-
-        Returns
-        -------
-        splist : SparseList
-            If inplace=False, new object, otherwise reference to existing
-            object
-        """
-        inplace = validate_bool_kwarg(inplace, 'inplace')
-        if not inplace:
-            result = self.copy()
-        else:
-            result = self
-
-        if result.is_consolidated:
-            return result
-
-        result._consolidate_inplace()
-        return result
-
-    def _consolidate_inplace(self):
-        new_values = np.concatenate([c.sp_values for c in self._chunks])
-        new_index = _concat_sparse_indexes([c.sp_index for c in self._chunks])
-        new_arr = SparseArray(new_values, sparse_index=new_index,
-                              fill_value=self.fill_value)
-        self._chunks = [new_arr]
-
-    def copy(self):
-        """
-        Return copy of the list
-
-        Returns
-        -------
-        new_list : SparseList
-        """
-        new_splist = SparseList(fill_value=self.fill_value)
-        new_splist._chunks = list(self._chunks)
-        return new_splist
-
-    def to_array(self):
-        """
-        Return SparseArray from data stored in the SparseList
-
-        Returns
-        -------
-        sparr : SparseArray
-        """
-        self.consolidate(inplace=True)
-        return self._chunks[0]
-
-    def append(self, value):
-        """
-        Append element or array-like chunk of data to the SparseList
-
-        Parameters
-        ----------
-        value: scalar or array-like
-        """
-        if is_scalar(value):
-            value = [value]
-
-        sparr = SparseArray(value, fill_value=self.fill_value)
-        self._chunks.append(sparr)
-        self._consolidated = False
-
-
-def _concat_sparse_indexes(indexes):
-    all_indices = []
-    total_length = 0
-
-    for index in indexes:
-        # increment by offset
-        inds = index.to_int_index().indices + total_length
-
-        all_indices.append(inds)
-        total_length += index.length
-
-    return splib.IntIndex(total_length, np.concatenate(all_indices))
diff --git a/pandas/tests/api/test_api.py b/pandas/tests/api/test_api.py
index 0d1ea1c77..e47f1919f 100644
--- a/pandas/tests/api/test_api.py
+++ b/pandas/tests/api/test_api.py
@@ -52,7 +52,7 @@ class TestPDApi(Base):
 
     # these are already deprecated; awaiting removal
     deprecated_classes = ['WidePanel', 'Panel4D', 'TimeGrouper',
-                          'SparseList', 'Expr', 'Term']
+                          'Expr', 'Term']
 
     # these should be deprecated in the future
     deprecated_classes_in_future = ['Panel']
diff --git a/pandas/tests/sparse/test_list.py b/pandas/tests/sparse/test_list.py
deleted file mode 100644
index 6c721ca81..000000000
--- a/pandas/tests/sparse/test_list.py
+++ /dev/null
@@ -1,111 +0,0 @@
-from pandas.compat import range
-
-from numpy import nan
-import numpy as np
-
-from pandas.core.sparse.api import SparseList, SparseArray
-import pandas.util.testing as tm
-
-
-class TestSparseList(object):
-
-    def setup_method(self, method):
-        self.na_data = np.array([nan, nan, 1, 2, 3, nan, 4, 5, nan, 6])
-        self.zero_data = np.array([0, 0, 1, 2, 3, 0, 4, 5, 0, 6])
-
-    def test_deprecation(self):
-        # see gh-13784
-        with tm.assert_produces_warning(FutureWarning):
-            SparseList()
-
-    def test_constructor(self):
-        with tm.assert_produces_warning(FutureWarning):
-            lst1 = SparseList(self.na_data[:5])
-        with tm.assert_produces_warning(FutureWarning):
-            exp = SparseList()
-
-        exp.append(self.na_data[:5])
-        tm.assert_sp_list_equal(lst1, exp)
-
-    def test_len(self):
-        with tm.assert_produces_warning(FutureWarning):
-            arr = self.na_data
-            splist = SparseList()
-            splist.append(arr[:5])
-            assert len(splist) == 5
-            splist.append(arr[5])
-            assert len(splist) == 6
-            splist.append(arr[6:])
-            assert len(splist) == 10
-
-    def test_append_na(self):
-        with tm.assert_produces_warning(FutureWarning):
-            arr = self.na_data
-            splist = SparseList()
-            splist.append(arr[:5])
-            splist.append(arr[5])
-            splist.append(arr[6:])
-
-            sparr = splist.to_array()
-            tm.assert_sp_array_equal(sparr, SparseArray(arr))
-
-    def test_append_zero(self):
-        with tm.assert_produces_warning(FutureWarning):
-            arr = self.zero_data
-            splist = SparseList(fill_value=0)
-            splist.append(arr[:5])
-            splist.append(arr[5])
-            splist.append(arr[6:])
-
-            # list always produces int64, but SA constructor
-            # is platform dtype aware
-            sparr = splist.to_array()
-            exp = SparseArray(arr, fill_value=0)
-            tm.assert_sp_array_equal(sparr, exp, check_dtype=False)
-
-    def test_consolidate(self):
-        with tm.assert_produces_warning(FutureWarning,
-                                        check_stacklevel=False):
-            arr = self.na_data
-            exp_sparr = SparseArray(arr)
-
-            splist = SparseList()
-            splist.append(arr[:5])
-            splist.append(arr[5])
-            splist.append(arr[6:])
-
-            consol = splist.consolidate(inplace=False)
-            assert consol.nchunks == 1
-            assert splist.nchunks == 3
-            tm.assert_sp_array_equal(consol.to_array(), exp_sparr)
-
-            splist.consolidate()
-            assert splist.nchunks == 1
-            tm.assert_sp_array_equal(splist.to_array(), exp_sparr)
-
-    def test_copy(self):
-        with tm.assert_produces_warning(FutureWarning,
-                                        check_stacklevel=False):
-            arr = self.na_data
-            exp_sparr = SparseArray(arr)
-
-            splist = SparseList()
-            splist.append(arr[:5])
-            splist.append(arr[5])
-
-            cp = splist.copy()
-            cp.append(arr[6:])
-            assert splist.nchunks == 2
-            tm.assert_sp_array_equal(cp.to_array(), exp_sparr)
-
-    def test_getitem(self):
-        with tm.assert_produces_warning(FutureWarning):
-            arr = self.na_data
-            splist = SparseList()
-            splist.append(arr[:5])
-            splist.append(arr[5])
-            splist.append(arr[6:])
-
-            for i in range(len(arr)):
-                tm.assert_almost_equal(splist[i], arr[i])
-                tm.assert_almost_equal(splist[-i], arr[-i])
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 850c42a01..9db09f23e 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -1582,13 +1582,6 @@ def assert_sp_frame_equal(left, right, check_dtype=True, exact_indices=True,
     for col in right:
         assert (col in left)
 
-
-def assert_sp_list_equal(left, right):
-    assert isinstance(left, pd.SparseList)
-    assert isinstance(right, pd.SparseList)
-
-    assert_sp_array_equal(left.to_array(), right.to_array())
-
 # -----------------------------------------------------------------------------
 # Others
 
