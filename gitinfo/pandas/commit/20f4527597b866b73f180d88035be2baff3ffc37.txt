commit 20f4527597b866b73f180d88035be2baff3ffc37
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Apr 12 17:52:21 2012 -0400

    ENH: handle datetime64 in block formation from dict of arrays in DataFrame constructor, close #1037

diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 9565f2f10..5685c79b2 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -286,6 +286,7 @@ class ObjectBlock(Block):
 class DatetimeBlock(IntBlock):
     pass
 
+
 def make_block(values, items, ref_items, do_integrity_check=False):
     dtype = values.dtype
     vtype = dtype.type
@@ -308,6 +309,7 @@ def make_block(values, items, ref_items, do_integrity_check=False):
 
 # TODO: flexible with index=None and/or items=None
 
+
 class BlockManager(object):
     """
     Core internal data structure to implement DataFrame
@@ -1002,9 +1004,12 @@ def form_blocks(data, axes):
     int_dict = {}
     bool_dict = {}
     object_dict = {}
+    datetime_dict = {}
     for k, v in data.iteritems():
         if issubclass(v.dtype.type, np.floating):
             float_dict[k] = v
+        elif issubclass(v.dtype.type, np.datetime64):
+            datetime_dict[k] = v
         elif issubclass(v.dtype.type, np.integer):
             int_dict[k] = v
         elif v.dtype == np.bool_:
@@ -1021,6 +1026,10 @@ def form_blocks(data, axes):
         int_block = _simple_blockify(int_dict, items, np.int64)
         blocks.append(int_block)
 
+    if len(datetime_dict):
+        datetime_block = _simple_blockify(datetime_dict, items, np.datetime64)
+        blocks.append(datetime_block)
+
     if len(bool_dict):
         bool_block = _simple_blockify(bool_dict, items, np.bool_)
         blocks.append(bool_block)
diff --git a/pandas/tests/test_timeseries.py b/pandas/tests/test_timeseries.py
index d440214f2..179dc4a61 100644
--- a/pandas/tests/test_timeseries.py
+++ b/pandas/tests/test_timeseries.py
@@ -270,6 +270,22 @@ class TestTimeSeries(unittest.TestCase):
         exp = _ohlc(ts['1/1/2000 5:55:01':])
         self.assert_((converted.ix['1/1/2000 6:00:00'] == exp).all())
 
+    def test_frame_ctor_datetime64_column(self):
+        rng = date_range('1/1/2000 00:00:00', '1/1/2000 1:59:50',
+                         freq='10s')
+        dates = np.asarray(rng)
+
+        df = DataFrame({'A': np.random.randn(len(rng)), 'B': dates})
+        self.assert_(np.issubdtype(df['B'].dtype, np.datetime64))
+
+    def test_series_ctor_datetime64(self):
+        rng = date_range('1/1/2000 00:00:00', '1/1/2000 1:59:50',
+                         freq='10s')
+        dates = np.asarray(rng)
+
+        series = Series(dates)
+        self.assert_(np.issubdtype(series.dtype, np.datetime64))
+
 
 def _skip_if_no_pytz():
     try:
