commit dc91f4cb03208889b98dc29c1a1fe46b979e81c7
Author: Mak Sze Chun <makszechun@gmail.com>
Date:   Sun Jan 6 06:47:46 2019 +0800

    Deprecate series.nonzero (GH18262) (#24048)

diff --git a/doc/source/api/series.rst b/doc/source/api/series.rst
index 1631f04b1..aa43c8b64 100644
--- a/doc/source/api/series.rst
+++ b/doc/source/api/series.rst
@@ -188,7 +188,6 @@ Computations / Descriptive Stats
    Series.is_monotonic_decreasing
    Series.value_counts
    Series.compound
-   Series.nonzero
 
 Reindexing / Selection / Label manipulation
 -------------------------------------------
diff --git a/doc/source/whatsnew/v0.24.0.rst b/doc/source/whatsnew/v0.24.0.rst
index 53ac8bff5..7fa386935 100644
--- a/doc/source/whatsnew/v0.24.0.rst
+++ b/doc/source/whatsnew/v0.24.0.rst
@@ -1258,6 +1258,7 @@ Deprecations
 - The ``skipna`` parameter of :meth:`~pandas.api.types.infer_dtype` will switch to ``True`` by default in a future version of pandas (:issue:`17066`, :issue:`24050`)
 - In :meth:`Series.where` with Categorical data, providing an ``other`` that is not present in the categories is deprecated. Convert the categorical to a different dtype or add the ``other`` to the categories first (:issue:`24077`).
 - :meth:`Series.clip_lower`, :meth:`Series.clip_upper`, :meth:`DataFrame.clip_lower` and :meth:`DataFrame.clip_upper` are deprecated and will be removed in a future version. Use ``Series.clip(lower=threshold)``, ``Series.clip(upper=threshold)`` and the equivalent ``DataFrame`` methods (:issue:`24203`)
+- :meth:`Series.nonzero` is deprecated and will be removed in a future version (:issue:`18262`)
 
 .. _whatsnew_0240.deprecations.datetimelike_int_ops:
 
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index aa78fc6c8..7bbbdd70e 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -4589,7 +4589,7 @@ class DataFrame(NDFrame):
                 else:
                     raise TypeError('must specify how or thresh')
 
-            result = self._take(mask.nonzero()[0], axis=axis)
+            result = self.loc(axis=axis)[mask]
 
         if inplace:
             self._update_inplace(result)
@@ -4624,7 +4624,7 @@ class DataFrame(NDFrame):
         duplicated = self.duplicated(subset, keep=keep)
 
         if inplace:
-            inds, = (-duplicated).nonzero()
+            inds, = (-duplicated)._ndarray_values.nonzero()
             new_data = self._data.take(inds)
             self._update_inplace(new_data)
         else:
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 5722fcb1b..eb412add7 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -540,6 +540,9 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         """
         Return the *integer* indices of the elements that are non-zero.
 
+        .. deprecated:: 0.24.0
+           Please use .to_numpy().nonzero() as a replacement.
+
         This method is equivalent to calling `numpy.nonzero` on the
         series data. For compatibility with NumPy, the return value is
         the same (a tuple with an array of indices for each dimension),
@@ -569,6 +572,10 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         d    4
         dtype: int64
         """
+        msg = ("Series.nonzero() is deprecated "
+               "and will be removed in a future version."
+               "Use Series.to_numpy().nonzero() instead")
+        warnings.warn(msg, FutureWarning, stacklevel=2)
         return self._values.nonzero()
 
     def put(self, *args, **kwargs):
diff --git a/pandas/io/stata.py b/pandas/io/stata.py
index aad57fc48..b5e7eb244 100644
--- a/pandas/io/stata.py
+++ b/pandas/io/stata.py
@@ -1629,7 +1629,8 @@ class StataReader(StataParser, BaseIterator):
                 continue
 
             if convert_missing:  # Replacement follows Stata notation
-                missing_loc = np.argwhere(missing)
+
+                missing_loc = np.argwhere(missing._ndarray_values)
                 umissing, umissing_loc = np.unique(series[missing],
                                                    return_inverse=True)
                 replacement = Series(series, dtype=np.object)
diff --git a/pandas/tests/frame/test_indexing.py b/pandas/tests/frame/test_indexing.py
index b877ed93f..f11314026 100644
--- a/pandas/tests/frame/test_indexing.py
+++ b/pandas/tests/frame/test_indexing.py
@@ -2168,7 +2168,7 @@ class TestDataFrameIndexing(TestData):
 
         def verify_first_level(df, level, idx, check_index_type=True):
             def f(val):
-                return np.nonzero(df[level] == val)[0]
+                return np.nonzero((df[level] == val).to_numpy())[0]
             i = np.concatenate(list(map(f, idx)))
             left = df.set_index(icol).reindex(idx, level=level)
             right = df.iloc[i].set_index(icol)
diff --git a/pandas/tests/series/test_missing.py b/pandas/tests/series/test_missing.py
index ffd21fb44..90ef465c5 100644
--- a/pandas/tests/series/test_missing.py
+++ b/pandas/tests/series/test_missing.py
@@ -1324,3 +1324,9 @@ class TestSeriesInterpolateData():
         result = ts.reindex(new_index).interpolate(method='time')
 
         tm.assert_numpy_array_equal(result.values, exp.values)
+
+    def test_nonzero_warning(self):
+        # GH 24048
+        ser = pd.Series([1, 0, 3, 4])
+        with tm.assert_produces_warning(FutureWarning):
+            ser.nonzero()
