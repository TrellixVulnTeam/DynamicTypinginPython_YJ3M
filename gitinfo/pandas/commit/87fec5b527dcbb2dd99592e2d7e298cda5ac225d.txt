commit 87fec5b527dcbb2dd99592e2d7e298cda5ac225d
Author: Jeff Reback <jeff@reback.net>
Date:   Tue Mar 10 19:12:03 2015 -0400

    allow unordered categorical to order/sort (exclude only min/max)

diff --git a/doc/source/categorical.rst b/doc/source/categorical.rst
index bb246c8af..6ce93326f 100644
--- a/doc/source/categorical.rst
+++ b/doc/source/categorical.rst
@@ -280,16 +280,12 @@ Sorting and Order
    The default for construction has change in v0.16.0 to ``ordered=False``, from the prior implicit ``ordered=True``
 
 If categorical data is ordered (``s.cat.ordered == True``), then the order of the categories has a
-meaning and certain operations are possible. If the categorical is unordered, a `TypeError` is
-raised.
+meaning and certain operations are possible. If the categorical is unordered, ``.min()/.max()`` will raise a `TypeError`.
 
 .. ipython:: python
 
     s = Series(Categorical(["a","b","c","a"], ordered=False))
-    try:
-        s.sort()
-    except TypeError as e:
-        print("TypeError: " + str(e))
+    s.sort()
     s = Series(["a","b","c","a"]).astype('category', ordered=True)
     s.sort()
     s
diff --git a/doc/source/whatsnew/v0.16.0.txt b/doc/source/whatsnew/v0.16.0.txt
index 765324b3a..882dcce8c 100644
--- a/doc/source/whatsnew/v0.16.0.txt
+++ b/doc/source/whatsnew/v0.16.0.txt
@@ -428,22 +428,6 @@ For ease of creation of series of categorical data, we have added the ability to
    s = Series(["a","b","c","a"]).astype('category',categories=list('abcdef'),ordered=False)
    s
 
-.. warning::
-
-   This simple API change may have suprising effects if a user is relying on the previous defaulted behavior implicity. In particular,
-   sorting operations with a ``Categorical`` will now raise an error:
-
-   .. code-block:: python
-
-      In [1]: df = DataFrame({ 'A' : Series(list('aabc')).astype('category'), 'B' : np.arange(4) })
-
-      In [2]: df['A'].order()
-      TypeError: Categorical is not ordered for operation argsort
-      you can use .as_ordered() to change the Categorical to an ordered one
-
-   The solution is to make 'A' orderable, e.g. ``df['A'] = df['A'].cat.as_ordered()``
-
-
 Indexing Changes
 ~~~~~~~~~~~~~~~~
 
diff --git a/pandas/core/categorical.py b/pandas/core/categorical.py
index ee76527b8..991678a8e 100644
--- a/pandas/core/categorical.py
+++ b/pandas/core/categorical.py
@@ -1013,7 +1013,6 @@ class Categorical(PandasObject):
         -------
         argsorted : numpy array
         """
-        self.check_for_ordered('argsort')
         result = np.argsort(self._codes.copy(), **kwargs)
         if not ascending:
             result = result[::-1]
@@ -1044,7 +1043,6 @@ class Categorical(PandasObject):
         --------
         Category.sort
         """
-        self.check_for_ordered('sort')
         if na_position not in ['last','first']:
             raise ValueError('invalid na_position: {!r}'.format(na_position))
 
diff --git a/pandas/tests/test_categorical.py b/pandas/tests/test_categorical.py
index 55589375f..a7f241168 100644
--- a/pandas/tests/test_categorical.py
+++ b/pandas/tests/test_categorical.py
@@ -918,9 +918,11 @@ class TestCategorical(tm.TestCase):
 
     def test_sort(self):
 
-        # unordered cats are not sortable
+        # unordered cats are sortable
         cat = Categorical(["a","b","b","a"], ordered=False)
-        self.assertRaises(TypeError, lambda : cat.sort())
+        cat.order()
+        cat.sort()
+
         cat = Categorical(["a","c","b","d"], ordered=True)
 
         # order
@@ -1767,9 +1769,12 @@ class TestCategoricalAsBlock(tm.TestCase):
 
     def test_sort(self):
 
-        # unordered cats are not sortable
         cat = Series(Categorical(["a","b","b","a"], ordered=False))
-        self.assertRaises(TypeError, lambda : cat.sort())
+
+        # sort in the categories order
+        expected = Series(Categorical(["a","a","b","b"], ordered=False),index=[0,3,1,2])
+        result = cat.order()
+        tm.assert_series_equal(result, expected)
 
         cat = Series(Categorical(["a","c","b","d"], ordered=True))
 
@@ -1803,9 +1808,8 @@ class TestCategoricalAsBlock(tm.TestCase):
         self.assertEqual(res["sort"].dtype, "category")
         self.assertEqual(res["unsort"].dtype, "category")
 
-        def f():
-            df.sort(columns=["unsort"], ascending=False)
-        self.assertRaises(TypeError, f)
+        # unordered cat, but we allow this
+        df.sort(columns=["unsort"], ascending=False)
 
         # multi-columns sort
         # GH 7848
