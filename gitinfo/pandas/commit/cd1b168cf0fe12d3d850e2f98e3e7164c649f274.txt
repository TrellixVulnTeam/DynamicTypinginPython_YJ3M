commit cd1b168cf0fe12d3d850e2f98e3e7164c649f274
Author: Eric Chea <5069128+EricChea@users.noreply.github.com>
Date:   Wed Feb 21 14:53:08 2018 -0500

    DOC: Add example of how to preserve order of columns with usecols. (#19746)
    
    * Add example of how to preserve order of columns with usecols.
    
    * Encase usecols in double back ticks for consistency. Change column names from numeric to string.
    
    * Add line to separate examples.

diff --git a/doc/source/io.rst b/doc/source/io.rst
index 6120f7d25..0b9a610b5 100644
--- a/doc/source/io.rst
+++ b/doc/source/io.rst
@@ -135,8 +135,14 @@ usecols : array-like or callable, default ``None``
   be positional (i.e. integer indices into the document columns) or strings
   that correspond to column names provided either by the user in `names` or
   inferred from the document header row(s). For example, a valid array-like
-  `usecols` parameter would be ``[0, 1, 2]`` or ``['foo', 'bar', 'baz']``. 
-  Element order is ignored, so ``usecols=[0, 1]`` is the same as ``[1, 0]``.
+  `usecols` parameter would be ``[0, 1, 2]`` or ``['foo', 'bar', 'baz']``.
+
+  Element order is ignored, so ``usecols=[0, 1]`` is the same as ``[1, 0]``. To
+  instantiate a DataFrame from ``data`` with element order preserved use
+  ``pd.read_csv(data, usecols=['foo', 'bar'])[['foo', 'bar']]`` for columns
+  in ``['foo', 'bar']`` order or
+  ``pd.read_csv(data, usecols=['foo', 'bar'])[['bar', 'foo']]`` for
+  ``['bar', 'foo']`` order.
 
   If callable, the callable function will be evaluated against the column names,
   returning names where the callable function evaluates to True:
diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index 7ea6d321e..4b1385514 100755
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -102,7 +102,12 @@ usecols : array-like or callable, default None
     that correspond to column names provided either by the user in `names` or
     inferred from the document header row(s). For example, a valid array-like
     `usecols` parameter would be [0, 1, 2] or ['foo', 'bar', 'baz']. Element
-    order is ignored, so usecols=[1,0] is the same as [0,1].
+    order is ignored, so ``usecols=[0, 1]`` is the same as ``[1, 0]``.
+    To instantiate a DataFrame from ``data`` with element order preserved use
+    ``pd.read_csv(data, usecols=['foo', 'bar'])[['foo', 'bar']]`` for columns
+    in ``['foo', 'bar']`` order or
+    ``pd.read_csv(data, usecols=['foo', 'bar'])[['bar', 'foo']]``
+    for ``['bar', 'foo']`` order.
 
     If callable, the callable function will be evaluated against the column
     names, returning names where the callable function evaluates to True. An
