commit 1403700ce17d6fb2483b4536fdd85414d1f14642
Author: Chang She <chang@lambdafoundry.com>
Date:   Thu May 3 18:29:19 2012 -0400

    BUG: storing heterogenous Index types in HDFStore. GH #1078

diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 5139780f0..36e30cb45 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -9,7 +9,9 @@ from datetime import datetime, date
 import time
 
 import numpy as np
-from pandas import Series, TimeSeries, DataFrame, Panel, Index, MultiIndex
+from pandas import (
+    Series, TimeSeries, DataFrame, Panel, Index, MultiIndex, Int64Index
+)
 from pandas.tseries.api import PeriodIndex, DatetimeIndex
 from pandas.core.common import adjoin
 from pandas.core.algorithms import match, unique
@@ -782,6 +784,13 @@ class HDFStore(object):
         return len(s.values)
 
 def _convert_index(index):
+    if isinstance(index, DatetimeIndex):
+        converted = np.asarray(index, dtype='i8')
+        return converted, 'datetime64', _tables().Int64Col()
+    elif isinstance(index, (Int64Index, PeriodIndex)):
+        atom = _tables().Int64Col()
+        return np.asarray(index, dtype=np.int64), 'integer', atom
+
     inferred_type = lib.infer_dtype(index)
 
     values = np.asarray(index)
diff --git a/pandas/io/tests/test_pytables.py b/pandas/io/tests/test_pytables.py
index f8c3ccbd1..b570aeb8d 100644
--- a/pandas/io/tests/test_pytables.py
+++ b/pandas/io/tests/test_pytables.py
@@ -215,27 +215,35 @@ class TesttHDFStore(unittest.TestCase):
         DF = DataFrame(data, index=idx, columns=col)
         self._check_roundtrip(DF, tm.assert_frame_equal)
 
-    def test_mixed_index(self):
+    def test_index_types(self):
         values = np.random.randn(2)
 
+        func = lambda l, r : tm.assert_series_equal(l, r, True, True, True)
+
         ser = Series(values, [0, 'y'])
-        self._check_roundtrip(ser, tm.assert_series_equal)
+        self._check_roundtrip(ser, func)
 
         ser = Series(values, [datetime.today(), 0])
-        self._check_roundtrip(ser, tm.assert_series_equal)
+        self._check_roundtrip(ser, func)
 
         ser = Series(values, ['y', 0])
-        self._check_roundtrip(ser, tm.assert_series_equal)
+        self._check_roundtrip(ser, func)
 
         from datetime import date
         ser = Series(values, [date.today(), 'a'])
-        self._check_roundtrip(ser, tm.assert_series_equal)
+        self._check_roundtrip(ser, func)
 
         ser = Series(values, [1.23, 'b'])
-        self._check_roundtrip(ser, tm.assert_series_equal)
+        self._check_roundtrip(ser, func)
 
         ser = Series(values, [1, 1.53])
-        self._check_roundtrip(ser, tm.assert_series_equal)
+        self._check_roundtrip(ser, func)
+
+        ser = Series(values, [1, 5])
+        self._check_roundtrip(ser, func)
+
+        ser = Series(values, [datetime(2012, 1, 1), datetime(2012, 1, 2)])
+        self._check_roundtrip(ser, func)
 
     def test_timeseries_preepoch(self):
         if sys.version_info[0] == 2 and sys.version_info[1] < 7:
diff --git a/pandas/util/testing.py b/pandas/util/testing.py
index 42ad227e0..5902b10d1 100644
--- a/pandas/util/testing.py
+++ b/pandas/util/testing.py
@@ -117,13 +117,23 @@ def assert_dict_equal(a, b, compare_keys=True):
     for k in a_keys:
         assert_almost_equal(a[k], b[k])
 
-def assert_series_equal(left, right, check_dtype=True):
+def assert_series_equal(left, right, check_dtype=True,
+                        check_index_type=False,
+                        check_index_freq=False):
     assert_almost_equal(left.values, right.values)
     if check_dtype:
         assert(left.dtype == right.dtype)
     assert(left.index.equals(right.index))
-
-def assert_frame_equal(left, right):
+    if check_index_type:
+        assert(type(left.index) == type(right.index))
+        assert(left.index.dtype == right.index.dtype)
+        assert(left.index.inferred_type == right.index.inferred_type)
+    if check_index_freq:
+        assert(getattr(left, 'freqstr', None) ==
+               getattr(right, 'freqstr', None))
+
+def assert_frame_equal(left, right, check_index_type=False,
+                       check_column_type=False):
     assert(isinstance(left, DataFrame))
     assert(isinstance(right, DataFrame))
     for col, series in left.iterkv():
@@ -133,6 +143,14 @@ def assert_frame_equal(left, right):
         assert(col in left)
     assert(left.index.equals(right.index))
     assert(left.columns.equals(right.columns))
+    if check_index_type:
+        assert(type(left.index) == type(right.index))
+        assert(left.index.dtype == right.index.dtype)
+        assert(left.index.inferred_type == right.index.inferred_type)
+    if check_column_type:
+        assert(type(left.columns) == type(right.columns))
+        assert(left.columns.dtype == right.columns.dtype)
+        assert(left.columns.inferred_type == right.columns.inferred_type)
 
 def assert_panel_equal(left, right):
     assert(left.items.equals(right.items))
