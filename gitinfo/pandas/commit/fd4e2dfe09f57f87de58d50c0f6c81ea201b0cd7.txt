commit fd4e2dfe09f57f87de58d50c0f6c81ea201b0cd7
Author: Adam Klein <adamklein@gmail.com>
Date:   Thu Feb 2 18:35:22 2012 -0500

    added field extractors, testing faster accessors

diff --git a/pandas/core/datetools.py b/pandas/core/datetools.py
index ead30f30a..0a22310ce 100644
--- a/pandas/core/datetools.py
+++ b/pandas/core/datetools.py
@@ -47,6 +47,20 @@ def _dt_box(key):
         _box_cache[key] = dtlib.i8_to_pydt(key.view('i8'))
         return _box_cache[key]
 
+dtdtype = [('Y', '>i4'), # year
+           ('M', '>i4'), # month
+           ('D', '>i4'), # day
+           ('h', '>i4'), # hour
+           ('m', '>i4'), # min
+           ('s', '>i4'), # second
+           ('u', '>i4')] # microsecond
+
+def _dt_arr_to_sarr(arr):
+    return np.array(map(lambda x: (x.year, x.month, x.day, x.hour,
+                                   x.minute, x.second, x.microsecond),
+                        arr),
+                    dtype=dtdtype)
+
 #-------------------------------------------------------------------------------
 # Miscellaneous date functions
 
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index 1d1debfc9..551877917 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -552,6 +552,7 @@ class Grouping(object):
     """
     def __init__(self, index, grouper=None, name=None, level=None,
                  sort=True):
+
         self.name = name
         self.level = level
         self.grouper = _convert_grouper(index, grouper)
diff --git a/pandas/core/index.py b/pandas/core/index.py
index c80a297bf..2838b8f45 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -96,6 +96,10 @@ class Index(np.ndarray):
         return Index(self.values.astype(dtype), name=self.name,
                      dtype=dtype)
 
+    @property
+    def year(self):
+        return _dt.fast_field_accessor2(self.values, 'Y')
+
     @property
     def dtype(self):
         return self.values.dtype
@@ -984,11 +988,10 @@ def _wrap_dt_function(f):
         return f(*view_args, **kwargs)
     return wrapper
 
-def _wrap_dt_function_first_arg(f):
+def _wrap_dt_function(f):
     @staticmethod
     def wrapper(*args, **kwargs):
-        view_args = [_dt_index_box(arg) if i == 0 else arg
-                     for i, arg in enumerate(args)]
+        view_args = [_dt_index_box(arg) for arg in args]
         return f(*view_args, **kwargs)
     return wrapper
 
@@ -1047,7 +1050,7 @@ class DatetimeIndex(Int64Index):
     _backfill      = _wrap_i8_function(lib.backfill_int64)
 
     _arrmap        = _wrap_dt_function(lib.arrmap_object)
-    _groupby       = _wrap_dt_function_first_arg(lib.groupby_int64)
+    _groupby       = _wrap_dt_function(lib.groupby_object)
 
     __eq__ = _dt_index_cmp('__eq__')
     __ne__ = _dt_index_cmp('__ne__')
@@ -1109,24 +1112,42 @@ class DatetimeIndex(Int64Index):
 
             return DatetimeIndex(result, name=self.name)
 
+    # Try to run function on index first, and then on elements of index
+    # Especially important for group-by functionality
+    def map(self, func_to_map):
+        #try:
+        #    return func_to_map(self)
+        #except:
+        return super(DatetimeIndex, self).map(func_to_map)
+
+    # Fast field accessors for periods of datetime index
+    # --------------------------------------------------------------
+
+    @property
     def year(self):
         return _dt.fast_field_accessor(self.values.view('i8'), 'Y')
 
+    @property
     def month(self):
         return _dt.fast_field_accessor(self.values.view('i8'), 'M')
 
+    @property
     def day(self):
         return _dt.fast_field_accessor(self.values.view('i8'), 'D')
 
+    @property
     def hour(self):
         return _dt.fast_field_accessor(self.values.view('i8'), 'h')
 
+    @property
     def minute(self):
         return _dt.fast_field_accessor(self.values.view('i8'), 'm')
 
+    @property
     def second(self):
         return _dt.fast_field_accessor(self.values.view('i8'), 's')
 
+    @property
     def microsecond(self):
         return _dt.fast_field_accessor(self.values.view('i8'), 'us')
 
diff --git a/pandas/src/datetime.pyx b/pandas/src/datetime.pyx
index 32cfdba98..ded544a52 100644
--- a/pandas/src/datetime.pyx
+++ b/pandas/src/datetime.pyx
@@ -77,6 +77,9 @@ cdef class Timestamp:
     def __repr__(self):
         return "Timestamp(%d)" % self.value
 
+    def __hash__(self):
+        return hash(self.value)
+
     def __sub__(self, object other):
         """
         Subtract two timestamps, results in an duration.
@@ -138,8 +141,9 @@ cdef class Timestamp:
 
         return py_str
 
-    def replace(self, int year=-1, int month=-1, int day=-1, int hour=-1,
-                      int minute=-1, int second=-1, int microsecond=-1):
+    def replace(Timestamp self, int year=-1, int month=-1, int day=-1,
+                                int hour=-1, int minute=-1, int second=-1,
+                                int microsecond=-1):
         cdef:
             npy_datetimestruct dts
 
@@ -162,7 +166,7 @@ cdef class Timestamp:
 
         return Timestamp(PyArray_DatetimeStructToDatetime(NPY_FR_us, &dts))
 
-    cdef normalize(self, time_res res):
+    cdef normalize(Timestamp self, time_res res):
         cdef:
             npy_datetimestruct dts
 
@@ -186,46 +190,47 @@ cdef class Timestamp:
         return Timestamp(PyArray_DatetimeStructToDatetime(NPY_FR_us, &dts))
 
     property asint:
-        def __get__(self):
+        def __get__(Timestamp self):
             return self.value
 
     property year:
-        def __get__(self):
+        def __get__(Timestamp self):
             return self.dts.year
 
     property month:
-        def __get__(self):
+        def __get__(Timestamp self):
             return self.dts.month
 
     property day:
-        def __get__(self):
+        def __get__(Timestamp self):
             return self.dts.day
 
     property hour:
-        def __get__(self):
+        def __get__(Timestamp self):
             return self.dts.hour
 
     property minute:
-        def __get__(self):
+        def __get__(Timestamp self):
             return self.dts.min
 
     property second:
-        def __get__(self):
+        def __get__(Timestamp self):
             return self.dts.sec
 
     property microsecond:
-        def __get__(self):
+        def __get__(Timestamp self):
             return self.dts.us
 
-    def weekday(self):
-        return dayofweek(self.dts.year, self.month, self.day)
+    def weekday(Timestamp self):
+        return dayofweek(self.dts.year, self.dts.month, self.dts.day)
 
 
 cdef class Duration:
     """
-    Absolute length of time, similar to timedelta (but faster!)
+    Absolute length of time, similar to timedelta
     """
-    cdef int64_t length
+    cdef:
+        int64_t length, days, seconds, microseconds
 
     def __init__(self, int64_t days = 0,
                        int64_t seconds = 0,
@@ -235,6 +240,9 @@ cdef class Duration:
                        int64_t hours = 0,
                        int64_t weeks = 0):
 
+        self.days = days
+        self.seconds = seconds
+        self.microseconds = microseconds
         self.length = (microseconds + 1000 * (milliseconds
                                     + 1000 * (seconds
                                     + 60   * (minutes
@@ -246,24 +254,21 @@ cdef class Duration:
     def from_micros(int64_t length):
         return Duration(microseconds = length)
 
-    def __str__(self):
-        return "Duration (%d)" % self.length
-
     property length:
         def __get__(self):
             return self.length
 
     property microseconds:
         def __get__(self):
-            return self.length % 1000000
+            return self.microseconds # length % 1000000
 
     property seconds:
         def __get__(self):
-            return (self.length // 1000000) % 86400
+            return self.seconds      # (length // 1000000) % 86400
 
     property days:
         def __get__(self):
-            return (self.length // 1000000) // 86400
+            return self.days         # (self.length // 1000000) // 86400
 
     def __repr__(self):
         return "Duration(%d, %d, %d)" % (self.days, self.seconds, self.microseconds)
@@ -807,7 +812,6 @@ cdef class Delta:
 
 # End derivation from dateutil
 
-
 # Conversion routines
 # ------------------------------------------------------------------------------
 
@@ -906,6 +910,29 @@ def fast_field_accessor(ndarray[int64_t] dtindex, object field):
     else:
         raise ValueError("Field %s not supported; not in (Y,M,D,h,m,s,us)" % field)
 
+# Another accessor, for datetime object -
+# ------------------------------------------------------------------------------
+
+def fast_field_accessor2(ndarray[object] dtindex, object field):
+    '''
+    Given a int64-based datetime index, extract the year, month, etc.,
+    field and return an array of these values.
+    '''
+    cdef:
+        npy_datetimestruct dts
+        Py_ssize_t i, count = 0
+        ndarray[int32_t] out
+
+    count = len(dtindex)
+    out = np.empty(count, dtype='i4')
+
+    if field == 'Y':
+        for i in range(count):
+                out[i] = PyDateTime_GET_YEAR(dtindex[i])
+        return out
+    else:
+        raise ValueError("Field %s not supported; not in (Y,M,D,h,m,s,us)" % field)
+
 # Some general helper functions
 # ------------------------------------------------------------------------------
 
