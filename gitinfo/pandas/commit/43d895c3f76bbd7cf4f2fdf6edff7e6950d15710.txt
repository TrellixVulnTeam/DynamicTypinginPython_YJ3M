commit 43d895c3f76bbd7cf4f2fdf6edff7e6950d15710
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Nov 11 12:19:52 2011 -0500

    ENH: add orient option to Panel.from_dict, GH #359

diff --git a/RELEASE.rst b/RELEASE.rst
index 7e1dce9cb..1f135f7fc 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -47,6 +47,8 @@ pandas 0.5.1
   - Add `Series.mad`, mean absolute deviation, matching DataFrame
   - Add `QuarterEnd` DateOffset (PR #321)
   - Add matrix multiplication function `dot` to DataFrame (GH #65)
+  - Add `orient` option to `Panel.from_dict` to ease creation of mixed-type
+    Panels (GH #359)
 
 **Improvements to existing features**
 
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 95bba59e7..42784c016 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -269,7 +269,7 @@ class Panel(NDFrame):
         return len(self.items), len(self.major_axis), len(self.minor_axis)
 
     @classmethod
-    def from_dict(cls, data, intersect=False, dtype=float):
+    def from_dict(cls, data, intersect=False, orient='items', dtype=float):
         """
         Construct Panel from dict of DataFrame objects
 
@@ -278,11 +278,31 @@ class Panel(NDFrame):
         data : dict
             {field : DataFrame}
         intersect : boolean
+            Intersect indexes of input DataFrames
+        orient : {'items', 'minor'}, default 'items'
+            The "orientation" of the data. If the keys of the passed dict
+            should be the items of the result panel, pass 'items'
+            (default). Otherwise if the columns of the values of the passed
+            DataFrame objects should be the items (which in the case of
+            mixed-dtype data you should do), instead pass 'minor'
+
 
         Returns
         -------
         Panel
         """
+        from collections import defaultdict
+
+        orient = orient.lower()
+        if orient == 'minor':
+            new_data = defaultdict(dict)
+            for col, df in data.iteritems():
+                for item, s in df.iteritems():
+                    new_data[item][col] = s
+            data = new_data
+        elif orient != 'items':  # pragma: no cover
+            raise ValueError('only recognize items or minor for orientation')
+
         data, index, columns = _homogenize_dict(data, intersect=intersect,
                                                 dtype=dtype)
         items = Index(sorted(data.keys()))
diff --git a/pandas/tests/test_panel.py b/pandas/tests/test_panel.py
index e54485f2e..1e795b852 100644
--- a/pandas/tests/test_panel.py
+++ b/pandas/tests/test_panel.py
@@ -21,7 +21,7 @@ from pandas.util.testing import (assert_panel_equal,
                                  assert_series_equal,
                                  assert_almost_equal)
 import pandas.core.panel as panelm
-import pandas.util.testing as common
+import pandas.util.testing as tm
 
 class PanelTests(object):
     panel = None
@@ -42,7 +42,7 @@ class SafeForLongAndSparse(object):
         foo = repr(self.panel)
 
     def test_iter(self):
-        common.equalContents(list(self.panel), self.panel.items)
+        tm.equalContents(list(self.panel), self.panel.items)
 
     def test_count(self):
         f = lambda s: notnull(s).sum()
@@ -218,7 +218,7 @@ class SafeForSparse(object):
         assert_frame_equal(result['ItemA'], op(panel['ItemA'], 1))
 
     def test_keys(self):
-        common.equalContents(self.panel.keys(), self.panel.items)
+        tm.equalContents(self.panel.keys(), self.panel.items)
 
     def test_iteritems(self):
         """Test panel.iteritems(), aka panel.iterkv()"""
@@ -526,8 +526,8 @@ class TestPanel(unittest.TestCase, PanelTests, CheckIndexing,
         assert_panel_equal(x, y)
 
     def setUp(self):
-        self.panel = common.makePanel()
-        common.add_nans(self.panel)
+        self.panel = tm.makePanel()
+        tm.add_nans(self.panel)
 
     def test_constructor(self):
         # with BlockManager
@@ -608,8 +608,17 @@ class TestPanel(unittest.TestCase, PanelTests, CheckIndexing,
         result = Panel(d, dtype=int)
         expected = Panel(dict((k, v.astype(int)) for k, v in d.iteritems()))
 
-    def test_from_dict_mixed(self):
-        pass
+    def test_from_dict_mixed_orient(self):
+        df = tm.makeDataFrame()
+        df['foo'] = 'bar'
+
+        data = {'k1' : df,
+                'k2' : df}
+
+        panel = Panel.from_dict(data, orient='minor')
+
+        self.assert_(panel['foo'].values.dtype == np.object_)
+        self.assert_(panel['A'].values.dtype == np.float64)
 
     def test_values(self):
         self.assertRaises(Exception, Panel, np.random.randn(5, 5, 5),
@@ -872,8 +881,8 @@ class TestPanel(unittest.TestCase, PanelTests, CheckIndexing,
 class TestLongPanel(unittest.TestCase):
 
     def setUp(self):
-        panel = common.makePanel()
-        common.add_nans(panel)
+        panel = tm.makePanel()
+        tm.add_nans(panel)
 
         self.panel = panel.to_long()
         self.unfiltered_panel = panel.to_long(filter_observations=False)
