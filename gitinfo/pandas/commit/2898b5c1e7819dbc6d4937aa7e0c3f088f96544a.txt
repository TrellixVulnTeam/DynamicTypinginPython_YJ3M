commit 2898b5c1e7819dbc6d4937aa7e0c3f088f96544a
Author: Kieran O'Mahony <kieranom@gmail.com>
Date:   Sun Jun 10 17:42:43 2012 +0100

    BUG: ujson memory alignment fixes

diff --git a/pandas/src/ujson/lib/ultrajson.h b/pandas/src/ujson/lib/ultrajson.h
index 94310f535..eae665f00 100644
--- a/pandas/src/ujson/lib/ultrajson.h
+++ b/pandas/src/ujson/lib/ultrajson.h
@@ -150,7 +150,7 @@ typedef struct __JSONTypeContext
 {
     int type;
     void *encoder;
-    void *prv[32];
+    void *prv;
 } JSONTypeContext;
 
 /*
diff --git a/pandas/src/ujson/lib/ultrajsonenc.c b/pandas/src/ujson/lib/ultrajsonenc.c
index aa73abc59..228715138 100644
--- a/pandas/src/ujson/lib/ultrajsonenc.c
+++ b/pandas/src/ujson/lib/ultrajsonenc.c
@@ -263,6 +263,7 @@ int Buffer_EscapeStringValidated (JSOBJ obj, JSONObjectEncoder *enc, const char
             case 2:
             {
                 JSUTF32 in;
+                JSUTF16 in16;
 
                 if (end - io < 1)
                 {
@@ -271,7 +272,8 @@ int Buffer_EscapeStringValidated (JSOBJ obj, JSONObjectEncoder *enc, const char
                     return FALSE;
                 }
 
-                in = *((JSUTF16 *) io);
+                memcpy(&in16, io, sizeof(JSUTF16));
+                in = (JSUTF32) in16;
 
 #ifdef __LITTLE_ENDIAN__
                 ucs = ((in & 0x1f) << 6) | ((in >> 8) & 0x3f);
@@ -293,6 +295,8 @@ int Buffer_EscapeStringValidated (JSOBJ obj, JSONObjectEncoder *enc, const char
             case 3:
             {
                 JSUTF32 in;
+                JSUTF16 in16;
+                JSUINT8 in8;
 
                 if (end - io < 2)
                 {
@@ -301,13 +305,15 @@ int Buffer_EscapeStringValidated (JSOBJ obj, JSONObjectEncoder *enc, const char
                     return FALSE;
                 }
 
+                memcpy(&in16, io, sizeof(JSUTF16));
+                memcpy(&in8, io + 2, sizeof(JSUINT8));
 #ifdef __LITTLE_ENDIAN__
-                in = *((JSUTF16 *) io);
-                in |= *((JSUINT8 *) io + 2) << 16;
+                in = (JSUTF32) in16;
+                in |= in8 << 16;
                 ucs = ((in & 0x0f) << 12) | ((in & 0x3f00) >> 2) | ((in & 0x3f0000) >> 16);
 #else
-                in = *((JSUTF16 *) io) << 8;
-                in |= *((JSUINT8 *) io + 2);
+                in = in16 << 8;
+                in |= in8;
                 ucs = ((in & 0x0f0000) >> 4) | ((in & 0x3f00) >> 2) | (in & 0x3f);
 #endif
 
@@ -333,11 +339,10 @@ int Buffer_EscapeStringValidated (JSOBJ obj, JSONObjectEncoder *enc, const char
                     return FALSE;
                 }
 
+                memcpy(&in, io, sizeof(JSUTF32));
 #ifdef __LITTLE_ENDIAN__
-                in = *((JSUTF32 *) io);
                 ucs = ((in & 0x07) << 18) | ((in & 0x3f00) << 4) | ((in & 0x3f0000) >> 10) | ((in & 0x3f000000) >> 24);
 #else
-                in = *((JSUTF32 *) io);
                 ucs = ((in & 0x07000000) >> 6) | ((in & 0x3f0000) >> 4) | ((in & 0x3f00) >> 2) | (in & 0x3f);
 #endif
                 if (ucs < 0x10000)
@@ -797,6 +802,7 @@ void encode(JSOBJ obj, JSONObjectEncoder *enc, const char *name, size_t cbName)
             Buffer_Reserve(enc, ((szlen / 4) + 1) * 12);
             if (enc->errorMsg)
             {
+                enc->endTypeContext(obj, &tc);
                 return;
             }
             Buffer_AppendCharUnchecked (enc, '\"');
diff --git a/pandas/src/ujson/python/objToJSON.c b/pandas/src/ujson/python/objToJSON.c
index 5b7973874..9c1569bd3 100644
--- a/pandas/src/ujson/python/objToJSON.c
+++ b/pandas/src/ujson/python/objToJSON.c
@@ -1031,13 +1031,30 @@ void Object_beginTypeContext (JSOBJ _obj, JSONTypeContext *tc)
     }
 
     obj = (PyObject*) _obj;
-    pc = (TypeContext *) tc->prv;
     enc = (PyObjectEncoder*) tc->encoder;
 
-    for (i = 0; i < 32; i++)
+    pc = (TypeContext *) tc->prv = PyObject_Malloc(sizeof(TypeContext));
+    if (!pc)
     {
-        tc->prv[i] = 0;
+        tc->type = JT_INVALID;
+        PyErr_NoMemory();
+        return;
     }
+    pc->newObj = NULL;
+    pc->dictObj = NULL;
+    pc->itemValue = NULL;
+    pc->itemName = NULL;
+    pc->attrList = NULL;
+    pc->citemName = NULL;
+    pc->npyarr = NULL;
+    pc->rowLabels = NULL;
+    pc->columnLabels = NULL;
+    pc->index = 0;
+    pc->size = 0;
+    pc->longValue = 0;
+    pc->transpose = 0;
+    pc->rowLabelsLen = 0;
+    pc->columnLabelsLen = 0;
 
     if (PyIter_Check(obj) || PyArray_Check(obj))
     {
@@ -1063,8 +1080,7 @@ void Object_beginTypeContext (JSOBJ _obj, JSONTypeContext *tc)
         if (exc && PyErr_ExceptionMatches(PyExc_OverflowError))
         {
             PRINTMARK();
-            tc->type = JT_INVALID;
-            return;
+            goto INVALID;
         }
 
         return;
@@ -1093,8 +1109,7 @@ void Object_beginTypeContext (JSOBJ _obj, JSONTypeContext *tc)
         if (exc && PyErr_ExceptionMatches(PyExc_OverflowError))
         {
             PRINTMARK();
-            tc->type = JT_INVALID;
-            return;
+            goto INVALID;
         }
 
         return;
@@ -1253,8 +1268,7 @@ ISITERABLE:
             pc->columnLabels = NpyArr_encodeLabels((PyArrayObject*) PyObject_GetAttrString(obj, "index"), (JSONObjectEncoder*) enc, pc->columnLabelsLen);
             if (!pc->columnLabels)
             {
-                tc->type = JT_INVALID;
-                return;
+                goto INVALID;
             }
         }
         else
@@ -1332,8 +1346,7 @@ ISITERABLE:
             pc->columnLabels = NpyArr_encodeLabels((PyArrayObject*) PyObject_GetAttrString(obj, "columns"), (JSONObjectEncoder*) enc, pc->columnLabelsLen);
             if (!pc->columnLabels)
             {
-                tc->type = JT_INVALID;
-                return;
+                goto INVALID;
             }
         }
         else
@@ -1345,8 +1358,7 @@ ISITERABLE:
             pc->rowLabels = NpyArr_encodeLabels((PyArrayObject*) PyObject_GetAttrString(obj, "index"), (JSONObjectEncoder*) enc, pc->rowLabelsLen);
             if (!pc->rowLabels)
             {
-                tc->type = JT_INVALID;
-                return;
+                goto INVALID;
             }
             pc->columnLabelsLen = PyArray_DIM(pc->newObj, 1);
             pc->columnLabels = NpyArr_encodeLabels((PyArrayObject*) PyObject_GetAttrString(obj, "columns"), (JSONObjectEncoder*) enc, pc->columnLabelsLen);
@@ -1354,8 +1366,7 @@ ISITERABLE:
             {
                 NpyArr_freeLabels(pc->rowLabels, pc->rowLabelsLen);
                 pc->rowLabels = NULL;
-                tc->type = JT_INVALID;
-                return;
+                goto INVALID;
             }
         }
         else
@@ -1366,8 +1377,7 @@ ISITERABLE:
             pc->rowLabels = NpyArr_encodeLabels((PyArrayObject*) PyObject_GetAttrString(obj, "columns"), (JSONObjectEncoder*) enc, pc->rowLabelsLen);
             if (!pc->rowLabels)
             {
-                tc->type = JT_INVALID;
-                return;
+                goto INVALID;
             }
             pc->columnLabelsLen = PyArray_DIM(pc->newObj, 0);
             pc->columnLabels = NpyArr_encodeLabels((PyArrayObject*) PyObject_GetAttrString(obj, "index"), (JSONObjectEncoder*) enc, pc->columnLabelsLen);
@@ -1375,8 +1385,7 @@ ISITERABLE:
             {
                 NpyArr_freeLabels(pc->rowLabels, pc->rowLabelsLen);
                 pc->rowLabels = NULL;
-                tc->type = JT_INVALID;
-                return;
+                goto INVALID;
             }
             pc->transpose = 1;
         }
@@ -1428,6 +1437,12 @@ ISITERABLE:
     pc->iterGetName = Dir_iterGetName;
 
     return;
+
+INVALID:
+    tc->type = JT_INVALID;
+    PyObject_Free(tc->prv);
+    tc->prv = NULL;
+    return;
 }
 
 
@@ -1436,6 +1451,9 @@ void Object_endTypeContext(JSOBJ obj, JSONTypeContext *tc)
     Py_XDECREF(GET_TC(tc)->newObj);
     NpyArr_freeLabels(GET_TC(tc)->rowLabels, GET_TC(tc)->rowLabelsLen);
     NpyArr_freeLabels(GET_TC(tc)->columnLabels, GET_TC(tc)->columnLabelsLen);
+
+    PyObject_Free(tc->prv);
+    tc->prv = NULL;
 }
 
 const char *Object_getStringValue(JSOBJ obj, JSONTypeContext *tc, size_t *_outLen)
