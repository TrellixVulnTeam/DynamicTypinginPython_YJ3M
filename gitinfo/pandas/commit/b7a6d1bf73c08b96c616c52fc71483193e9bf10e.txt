commit b7a6d1bf73c08b96c616c52fc71483193e9bf10e
Author: Stephan Hoyer <shoyer@climate.com>
Date:   Thu Jan 22 22:36:50 2015 -0800

    BUG: ensure Series.str raises TypeError for inappropriate dtype
    
    Fixes GH9184
    
    Also includes a fix for Series.apply to ensure that it propagates
    metadata and dtypes properly for empty Series (this was necessary to
    fix a Stata test)

diff --git a/doc/source/whatsnew/v0.16.0.txt b/doc/source/whatsnew/v0.16.0.txt
index 597357df4..abd9d5850 100644
--- a/doc/source/whatsnew/v0.16.0.txt
+++ b/doc/source/whatsnew/v0.16.0.txt
@@ -197,6 +197,7 @@ Bug Fixes
 - Bug in groupby ``.nth()`` with a multiple column groupby (:issue:`8979`)
 - Bug in ``DataFrame.where`` and ``Series.where`` coerce numerics to string incorrectly (:issue:`9280`)
 - Bug in ``DataFrame.where`` and ``Series.where`` raise ``ValueError`` when string list-like is passed. (:issue:`9280`)
+- Accessing ``Series.str`` methods on with non-string values now raises ``TypeError`` instead of producing incorrect results (:issue:`9184`)
 
 - Fixed division by zero error for ``Series.kurt()`` when all values are equal (:issue:`9197`)
 
diff --git a/pandas/core/series.py b/pandas/core/series.py
index e01086256..ca401518a 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -2045,7 +2045,8 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         y : Series or DataFrame if func returns a Series
         """
         if len(self) == 0:
-            return Series()
+            return self._constructor(dtype=self.dtype,
+                                     index=self.index).__finalize__(self)
 
         if kwds or args and not isinstance(func, np.ufunc):
             f = lambda x: func(x, *args, **kwds)
@@ -2504,6 +2505,12 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
     # string methods
 
     def _make_str_accessor(self):
+        if not com.is_object_dtype(self.dtype):
+            # this really should exclude all series with any non-string values,
+            # but that isn't practical for performance reasons until we have a
+            # str dtype (GH 9343)
+            raise TypeError("Can only use .str accessor with string values, "
+                            "which use np.object_ dtype in pandas")
         return StringMethods(self)
 
     str = base.AccessorProperty(StringMethods, _make_str_accessor)
diff --git a/pandas/tests/test_categorical.py b/pandas/tests/test_categorical.py
index f4f8b6a94..7a8d5e0ac 100644
--- a/pandas/tests/test_categorical.py
+++ b/pandas/tests/test_categorical.py
@@ -2522,6 +2522,8 @@ class TestCategoricalAsBlock(tm.TestCase):
         self.assertIs(Series.cat, CategoricalAccessor)
         s = Series(list('aabbcde')).astype('category')
         self.assertIsInstance(s.cat, CategoricalAccessor)
+        with tm.assertRaisesRegexp(TypeError, "only use .cat accessor"):
+            Series([1]).cat
 
     def test_pickle_v0_14_1(self):
         cat = pd.Categorical(values=['a', 'b', 'c'],
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 04539a375..3f5f14a46 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -240,6 +240,9 @@ class CheckNameIntegration(object):
         s = Series(date_range('2000-01-01', periods=3))
         self.assertIsInstance(s.dt, DatetimeProperties)
 
+        with tm.assertRaisesRegexp(TypeError, "only use .dt accessor"):
+            Series([1]).dt
+
     def test_binop_maybe_preserve_name(self):
 
         # names match, preserve
@@ -5411,9 +5414,14 @@ class TestSeries(tm.TestCase, CheckNameIntegration):
         tm.assert_frame_equal(result, expected)
 
         # empty series
-        s = Series()
+        s = Series(dtype=object, name='foo', index=pd.Index([], name='bar'))
         rs = s.apply(lambda x: x)
         tm.assert_series_equal(s, rs)
+        # check all metadata (GH 9322)
+        self.assertIsNot(s, rs)
+        self.assertIs(s.index, rs.index)
+        self.assertEqual(s.dtype, rs.dtype)
+        self.assertEqual(s.name, rs.name)
 
         # index but no data
         s = Series(index=[1, 2, 3])
diff --git a/pandas/tests/test_strings.py b/pandas/tests/test_strings.py
index c301434a6..b8f1a6ac3 100644
--- a/pandas/tests/test_strings.py
+++ b/pandas/tests/test_strings.py
@@ -36,6 +36,10 @@ class TestStringMethods(tm.TestCase):
         self.assertIs(Series.str, strings.StringMethods)
         self.assertIsInstance(Series(['']).str, strings.StringMethods)
 
+        # GH 9184
+        with tm.assertRaisesRegexp(TypeError, "only use .str accessor"):
+            Series([1]).str
+
     def test_iter(self):
         # GH3638
         strs = 'google', 'wikimedia', 'wikipedia', 'wikitravel'
@@ -80,26 +84,6 @@ class TestStringMethods(tm.TestCase):
         self.assertFalse(i)
         assert_series_equal(ds, s)
 
-    def test_iter_numeric_try_string(self):
-        # behavior identical to empty series
-        dsi = Series(lrange(4))
-
-        i, s = 100, 'h'
-
-        for i, s in enumerate(dsi.str):
-            pass
-
-        self.assertEqual(i, 100)
-        self.assertEqual(s, 'h')
-
-        dsf = Series(np.arange(4.))
-
-        for i, s in enumerate(dsf.str):
-            pass
-
-        self.assertEqual(i, 100)
-        self.assertEqual(s, 'h')
-
     def test_iter_object_try_string(self):
         ds = Series([slice(None, randint(10), randint(10, 20))
                      for _ in range(4)])
