commit 432b040ef1384eb37d63d1c6dd8b85383dbfe341
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue May 15 14:28:26 2012 -0400

    ENH: very basic ordered_merge with forward filling, not with multiple groups yet

diff --git a/pandas/__init__.py b/pandas/__init__.py
index 94400d117..7ef0ba10c 100644
--- a/pandas/__init__.py
+++ b/pandas/__init__.py
@@ -34,7 +34,7 @@ from pandas.io.parsers import (read_csv, read_table, read_clipboard,
 from pandas.io.pytables import HDFStore
 from pandas.util.testing import debug
 
-from pandas.tools.merge import merge, concat
+from pandas.tools.merge import merge, concat, ordered_merge
 from pandas.tools.pivot import pivot_table, crosstab
 from pandas.tools.plotting import scatter_matrix
 from pandas.tools.describe import value_range
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 1ce3ac730..425162953 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -152,7 +152,7 @@ Examples
 3   foo  4         3   bar  8
 
 >>> merge(A, B, left_on='lkey', right_on='rkey', how='outer')
-   lkey  value.x  rkey  value.y
+   lkey  value_x  rkey  value_y
 0  bar   2        bar   6
 1  bar   2        bar   8
 2  baz   3        NaN   NaN
@@ -3424,7 +3424,7 @@ class DataFrame(NDFrame):
     @Appender(_merge_doc, indents=2)
     def merge(self, right, how='inner', on=None, left_on=None, right_on=None,
               left_index=False, right_index=False, sort=True,
-              suffixes=('.x', '.y'), copy=True):
+              suffixes=('_x', '_y'), copy=True):
         from pandas.tools.merge import merge
         return merge(self, right, how=how, on=on,
                      left_on=left_on, right_on=right_on,
diff --git a/pandas/src/join.pyx b/pandas/src/join.pyx
index 502635012..a135a1c86 100644
--- a/pandas/src/join.pyx
+++ b/pandas/src/join.pyx
@@ -118,8 +118,9 @@ def left_outer_join(ndarray[int64_t] left, ndarray[int64_t] right,
     return left_indexer, right_indexer
 
 
+
 def full_outer_join(ndarray[int64_t] left, ndarray[int64_t] right,
-                    Py_ssize_t max_groups):
+                          Py_ssize_t max_groups):
     cdef:
         Py_ssize_t i, j, k, count = 0
         ndarray[int64_t] left_count, right_count, left_sorter, right_sorter
@@ -143,8 +144,8 @@ def full_outer_join(ndarray[int64_t] left, ndarray[int64_t] right,
 
     # group 0 is the NA group
     cdef:
-        Py_ssize_t loc, left_pos = 0, right_pos = 0, position = 0
-        Py_ssize_t offset
+        int64_t left_pos = 0, right_pos = 0
+        Py_ssize_t offset, position = 0
 
     # exclude the NA group
     left_pos = left_count[0]
@@ -180,6 +181,8 @@ def full_outer_join(ndarray[int64_t] left, ndarray[int64_t] right,
     return (_get_result_indexer(left_sorter, left_indexer),
             _get_result_indexer(right_sorter, right_indexer))
 
+
+
 def _get_result_indexer(sorter, indexer):
     if indexer.dtype != np.int_:
         indexer = indexer.astype(np.int_)
@@ -188,6 +191,30 @@ def _get_result_indexer(sorter, indexer):
     return res
 
 
+def ffill_by_group(ndarray[int64_t] indexer, ndarray[int64_t] group_ids,
+                   int64_t max_group):
+    cdef:
+        Py_ssize_t i, n = len(indexer)
+        ndarray[int64_t] result, last_obs
+        int64_t gid, val
+
+    result = np.empty(n, dtype=np.int64)
+
+    last_obs = np.empty(max_group, dtype=np.int64)
+    last_obs.fill(-1)
+
+    for i in range(n):
+        gid = group_ids[i]
+        val = indexer[i]
+        if val == -1:
+            result[i] = last_obs[gid]
+        else:
+            result[i] = val
+            last_obs[gid] = val
+
+    return result
+
+
 @cython.boundscheck(False)
 @cython.wraparound(False)
 def join_sorter(ndarray[int64_t] index, Py_ssize_t ngroups):
diff --git a/pandas/tools/merge.py b/pandas/tools/merge.py
index d6f656679..680864ee5 100644
--- a/pandas/tools/merge.py
+++ b/pandas/tools/merge.py
@@ -24,7 +24,7 @@ import pandas._tseries as lib
 @Appender(_merge_doc, indents=0)
 def merge(left, right, how='inner', on=None, left_on=None, right_on=None,
           left_index=False, right_index=False, sort=True,
-          suffixes=('.x', '.y'), copy=True):
+          suffixes=('_x', '_y'), copy=True):
     op = _MergeOperation(left, right, how=how, on=on, left_on=left_on,
                          right_on=right_on, left_index=left_index,
                          right_index=right_index, sort=sort, suffixes=suffixes,
@@ -33,6 +33,19 @@ def merge(left, right, how='inner', on=None, left_on=None, right_on=None,
 if __debug__: merge.__doc__ = _merge_doc % '\nleft : DataFrame'
 
 
+def ordered_merge(left, right, on=None, by=None, left_on=None, right_on=None,
+                  left_index=False, right_index=False, fill_method=None,
+                  suffixes=('_x', '_y')):
+    """
+
+    """
+    op = _OrderedMerge(left, right, on=on, left_on=left_on,
+                       right_on=right_on, left_index=left_index,
+                       right_index=right_index, suffixes=suffixes,
+                       fill_method=fill_method, by=by)
+    return op.get_result()
+
+
 
 # TODO: NA group handling
 # TODO: transformations??
@@ -47,7 +60,7 @@ class _MergeOperation(object):
     def __init__(self, left, right, how='inner', on=None,
                  left_on=None, right_on=None, axis=1,
                  left_index=False, right_index=False, sort=True,
-                 suffixes=('.x', '.y'), copy=True):
+                 suffixes=('_x', '_y'), copy=True):
         self.left = self.orig_left = left
         self.right = self.orig_right = right
         self.how = how
@@ -325,6 +338,60 @@ class _MergeOperation(object):
                              sort=self.sort)
         return left_group_key, right_group_key, max_groups
 
+
+class _OrderedMerge(_MergeOperation):
+
+    def __init__(self, left, right, on=None, by=None, left_on=None,
+                 right_on=None, axis=1, left_index=False, right_index=False,
+                 suffixes=('_x', '_y'), copy=True,
+                 fill_method=None):
+
+        self.by = by
+        self.fill_method = fill_method
+
+        _MergeOperation.__init__(self, left, right, on=on, left_on=left_on,
+                                 right_on=right_on, axis=axis,
+                                 left_index=left_index,
+                                 right_index=right_index,
+                                 how='outer', suffixes=suffixes,
+                                 sort=True # sorts when factorizing
+                                 )
+
+
+    def get_result(self):
+        join_index, left_indexer, right_indexer = self._get_join_info()
+
+        # this is a bit kludgy
+        ldata, rdata = self._get_merge_data()
+
+        if self.fill_method == 'ffill':
+            # group_index, max_group = self._get_group_index()
+
+            group_index = np.repeat(0, len(left_indexer))
+            max_group = 1
+
+            left_join_indexer = lib.ffill_by_group(left_indexer, group_index,
+                                                   max_group)
+            right_join_indexer = lib.ffill_by_group(right_indexer, group_index,
+                                                    max_group)
+        else:
+            left_join_indexer = left_indexer
+            right_join_indexer = right_indexer
+
+        join_op = _BlockJoinOperation([ldata, rdata], join_index,
+                                      [left_join_indexer, right_join_indexer],
+                                      axis=1, copy=self.copy)
+
+        result_data = join_op.get_result()
+        result = DataFrame(result_data)
+
+        self._maybe_add_join_keys(result, left_indexer, right_indexer)
+
+        return result
+
+    def _get_group_index(self):
+        pass
+
 def _get_multiindex_indexer(join_keys, index, sort=False):
     shape = []
     labels = []
@@ -357,10 +424,6 @@ def _get_single_indexer(join_key, index, sort=False):
 
     return left_indexer, right_indexer
 
-def _right_outer_join(x, y, max_groups):
-    right_indexer, left_indexer = lib.left_outer_join(y, x, max_groups)
-    return left_indexer, right_indexer
-
 def _left_join_on_index(left_ax, right_ax, join_keys, sort=False):
     join_index = left_ax
     left_indexer = None
@@ -387,6 +450,10 @@ def _left_join_on_index(left_ax, right_ax, join_keys, sort=False):
     return join_index, left_indexer, right_indexer
 
 
+def _right_outer_join(x, y, max_groups):
+    right_indexer, left_indexer = lib.left_outer_join(y, x, max_groups)
+    return left_indexer, right_indexer
+
 _join_functions = {
     'inner' : lib.inner_join,
     'left' : lib.left_outer_join,
diff --git a/pandas/tools/tests/test_merge.py b/pandas/tools/tests/test_merge.py
index 4482e0529..75d432af9 100644
--- a/pandas/tools/tests/test_merge.py
+++ b/pandas/tools/tests/test_merge.py
@@ -4,12 +4,13 @@ import nose
 import unittest
 
 from numpy.random import randn
+from numpy import nan
 import numpy as np
 import random
 
 from pandas import *
 from pandas.tseries.index import DatetimeIndex
-from pandas.tools.merge import merge, concat
+from pandas.tools.merge import merge, concat, ordered_merge
 from pandas.util.testing import (assert_frame_equal, assert_series_equal,
                                  assert_almost_equal, rands)
 import pandas._tseries as lib
@@ -463,8 +464,8 @@ class TestMerge(unittest.TestCase):
         merged = merge(self.left, self.left, on='key')
         exp_len = (self.left['key'].value_counts() ** 2).sum()
         self.assertEqual(len(merged), exp_len)
-        self.assert_('v1.x' in merged)
-        self.assert_('v1.y' in merged)
+        self.assert_('v1_x' in merged)
+        self.assert_('v1_y' in merged)
 
     def test_merge_different_column_key_names(self):
         left = DataFrame({'lkey': ['foo', 'bar', 'baz', 'foo'],
@@ -479,8 +480,8 @@ class TestMerge(unittest.TestCase):
                             ['bar', 'baz', 'foo', 'foo', 'foo', 'foo', np.nan])
         assert_almost_equal(merged['rkey'],
                             ['bar', np.nan, 'foo', 'foo', 'foo', 'foo', 'qux'])
-        assert_almost_equal(merged['value.x'], [2, 3, 1, 1, 4, 4, np.nan])
-        assert_almost_equal(merged['value.y'], [6, np.nan, 5, 8, 5, 8, 7])
+        assert_almost_equal(merged['value_x'], [2, 3, 1, 1, 4, 4, np.nan])
+        assert_almost_equal(merged['value_y'], [6, np.nan, 5, 8, 5, 8, 7])
 
     def test_merge_nocopy(self):
         left = DataFrame({'a' : 0, 'b' : 1}, index=range(10))
@@ -656,7 +657,7 @@ class TestMergeMulti(unittest.TestCase):
         tm.assert_frame_equal(merged, expected)
 
 def _check_join(left, right, result, join_col, how='left',
-                lsuffix='.x', rsuffix='.y'):
+                lsuffix='_x', rsuffix='_y'):
 
     # some smoke tests
     for c in join_col:
@@ -1248,6 +1249,51 @@ class TestConcatenate(unittest.TestCase):
         # it works!
         mn.join(cn, rsuffix='_right')
 
+
+class TestOrderedMerge(unittest.TestCase):
+
+    def setUp(self):
+        self.left = DataFrame({'key': ['a', 'c', 'e'],
+                               'lvalue': [1, 2., 3]})
+
+        self.right = DataFrame({'key': ['b', 'c', 'd', 'f'],
+                                'rvalue': [1, 2, 3., 4]})
+
+    # GH #813
+
+    def test_basic(self):
+        result = ordered_merge(self.left, self.right, on='key')
+        expected = DataFrame({'key': ['a', 'b', 'c', 'd', 'e', 'f'],
+                              'lvalue': [1, nan, 2, nan, 3, nan],
+                              'rvalue': [nan, 1, 2, 3, nan, 4]})
+
+        assert_frame_equal(result, expected)
+
+    def test_ffill(self):
+        result = ordered_merge(self.left, self.right, on='key', fill_method='ffill')
+        expected = DataFrame({'key': ['a', 'b', 'c', 'd', 'e', 'f'],
+                              'lvalue': [1., 1, 2, 2, 3, 3.],
+                              'rvalue': [nan, 1, 2, 3, 3, 4]})
+        assert_frame_equal(result, expected)
+
+    def test_multigroup(self):
+        raise nose.SkipTest
+        left = concat([self.left, self.left], ignore_index=True)
+        right = concat([self.right, self.right], ignore_index=True)
+
+        left['group'] = ['a'] * 3 + ['b'] * 3
+        right['group'] = ['a'] * 4 + ['b'] * 4
+
+        result = ordered_merge(left, right, on='key', by='group',
+                               fill_method='ffill')
+
+        expected = DataFrame({'key': ['a', 'b', 'c', 'd', 'e', 'f'],
+                              'lvalue': [1., 1, 2, 2, 3, 3.],
+                              'rvalue': [nan, 1, 2, 3, 3, 4]})
+        expected['group'] = ['a'] * 6 + ['b'] * 6
+
+        assert_frame_equal(result, expected)
+
 if __name__ == '__main__':
     import nose
     nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
