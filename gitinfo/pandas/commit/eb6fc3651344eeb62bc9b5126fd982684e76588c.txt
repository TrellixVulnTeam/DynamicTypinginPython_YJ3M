commit eb6fc3651344eeb62bc9b5126fd982684e76588c
Author: Adam Klein <adamklein@gmail.com>
Date:   Mon Mar 5 16:57:38 2012 -0500

    ENH: handle legacy unpickling for daterange-based objects

diff --git a/pandas/core/index.py b/pandas/core/index.py
index 6120e4795..1d5224afe 100644
--- a/pandas/core/index.py
+++ b/pandas/core/index.py
@@ -1336,6 +1336,24 @@ class DatetimeIndex(Int64Index):
             self.offset = own_state[1]
             self.tzinfo = own_state[2]
             np.ndarray.__setstate__(self, nd_state)
+        elif len(state) == 3: 
+            # legacy format: daterange
+            offset = state[1]
+
+            if len(state) > 2:
+                tzinfo = state[2]
+            else: # pragma: no cover
+                tzinfo = None
+
+            self.offset = offset
+            self.tzinfo = tzinfo
+
+            # extract the raw datetime data, turn into datetime64
+            index_state = state[0]
+            raw_data = index_state[0][4]
+            raw_data = np.array(raw_data, dtype='M8[us]')
+            new_state = raw_data.__reduce__()
+            np.ndarray.__setstate__(self, new_state[2])
         else:  # pragma: no cover
             np.ndarray.__setstate__(self, state)
 
diff --git a/pandas/tests/test_datetime64.py b/pandas/tests/test_datetime64.py
index c77f85b2f..f3e5dde30 100644
--- a/pandas/tests/test_datetime64.py
+++ b/pandas/tests/test_datetime64.py
@@ -1,9 +1,14 @@
 import pandas._tseries as lib
 from datetime import datetime
 
+import cPickle as pickle
+
 from pandas.core.index import DatetimeIndex
 from pandas.core.frame import DataFrame
 
+from pandas.core.daterange import DateRange
+from pandas.core.index import Int64Index
+
 import unittest
 import numpy as np
 
@@ -14,7 +19,7 @@ from numpy.random import rand
 from pandas.util.testing import assert_series_equal
 
 from pandas.core.groupby import Tinterval
-from pandas.core.datetools import Minute
+from pandas.core.datetools import Minute, BDay
 
 try:
     import pytz
@@ -494,6 +499,36 @@ class TestDatetime64(unittest.TestCase):
         df = DataFrame(np.random.rand(len(dti), 5), index=dti)
         self.assertEquals(len(df.ix['2005-11']), 30)
 
+    def test_unpickle_legacy_frame(self):
+        f = open('pandas/tests/data/frame.pickle', 'r')
+        unpickled = pickle.loads(f.read())
+        f.close()
+
+        dtindex = DateRange(start='1/3/2005', end='1/14/2005',
+                            offset=BDay(1))
+
+        self.assertEquals(type(unpickled.index), DateRange)
+        self.assertEquals(len(unpickled), 10)
+        self.assert_((unpickled.columns == Int64Index(np.arange(5))).all())
+        self.assert_((unpickled.index == dtindex).all())
+        self.assertEquals(unpickled.index.offset, BDay(1))
+
+    def test_unpickle_legacy_series(self):
+        from pandas.core.daterange import DateRange
+        from pandas.core.datetools import BDay
+
+        f = open('pandas/tests/data/series.pickle', 'r')
+        unpickled = pickle.loads(f.read())
+        f.close()
+
+        dtindex = DateRange(start='1/3/2005', end='1/14/2005',
+                            offset=BDay(1))
+
+        self.assertEquals(type(unpickled.index), DateRange)
+        self.assertEquals(len(unpickled), 10)
+        self.assert_((unpickled.index == dtindex).all())
+        self.assertEquals(unpickled.index.offset, BDay(1))
+
 if __name__ == '__main__':
     import nose
     nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index edcc84b1a..189a1c6be 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1724,6 +1724,24 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         unpickled = pickle.loads(pickle.dumps(self.empty))
         repr(unpickled)
 
+    def test_unpickle_legacy_frame(self):
+        from pandas.core.daterange import DateRange
+        from pandas.core.datetools import BDay
+        from pandas.core.index import Int64Index
+
+        f = open('pandas/tests/data/frame.pickle', 'r')
+        unpickled = pickle.loads(f.read())
+        f.close()
+
+        dtindex = DateRange(start='1/3/2005', end='1/14/2005',
+                            offset=BDay(1))
+
+        self.assertEquals(type(unpickled.index), DateRange)
+        self.assertEquals(len(unpickled), 10)
+        self.assert_((unpickled.columns == Int64Index(np.arange(5))).all())
+        self.assert_((unpickled.index == dtindex).all())
+        self.assertEquals(unpickled.index.offset, BDay(1))
+
     def test_to_dict(self):
         test_data = {
                 'A' : {'1' : 1, '2' : 2},
