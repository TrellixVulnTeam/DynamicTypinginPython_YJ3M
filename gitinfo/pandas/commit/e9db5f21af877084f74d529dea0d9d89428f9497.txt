commit e9db5f21af877084f74d529dea0d9d89428f9497
Author: jreback <jeff@reback.net>
Date:   Thu Jun 13 15:41:23 2013 -0400

    API: more consistency in the to_datetime return types (give string/array of string inputs) (GH3888)

diff --git a/RELEASE.rst b/RELEASE.rst
index 8e4bdd3cb..500ba2df1 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -159,6 +159,7 @@ pandas 0.11.1
   - ``read_html`` now defaults to ``None`` when reading, and falls back on
     ``bs4`` + ``html5lib`` when lxml fails to parse. a list of parsers to try
     until success is also valid
+  - more consistency in the to_datetime return types (give string/array of string inputs) (GH3888_)
 
 **Bug Fixes**
 
@@ -355,6 +356,8 @@ pandas 0.11.1
 .. _GH3911: https://github.com/pydata/pandas/issues/3911
 .. _GH3912: https://github.com/pydata/pandas/issues/3912
 .. _GH3764: https://github.com/pydata/pandas/issues/3764
+.. _GH3888: https://github.com/pydata/pandas/issues/3888
+
 
 pandas 0.11.0
 =============
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index bdc603dfd..ca6e32d81 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -825,13 +825,36 @@ class TestTimeSeries(unittest.TestCase):
 
         self.assertEquals(NaT.weekday(), -1)
 
-    def test_to_datetime_empty_string(self):
+    def test_to_datetime_types(self):
+
+        # empty string
         result = to_datetime('')
-        self.assert_(result == '')
+        self.assert_(result is NaT)
 
         result = to_datetime(['', ''])
         self.assert_(isnull(result).all())
 
+        # ints
+        result = Timestamp(0)
+        expected = to_datetime(0)
+        self.assert_(result == expected)
+
+        # GH 3888 (strings)
+        expected = to_datetime(['2012'])[0]
+        result = to_datetime('2012')
+        self.assert_(result == expected)
+
+        ### array = ['2012','20120101','20120101 12:01:01']
+        array = ['20120101','20120101 12:01:01']
+        expected = to_datetime(array)
+        result = map(Timestamp,array)
+        tm.assert_almost_equal(result,expected)
+
+        ### currently fails ###
+        ### result = Timestamp('2012')
+        ### expected = to_datetime('2012')
+        ### self.assert_(result == expected)
+
     def test_to_datetime_other_datetime64_units(self):
         # 5/25/2012
         scalar = np.int64(1337904000000000).view('M8[us]')
diff --git a/pandas/tseries/tools.py b/pandas/tseries/tools.py
index 90bc0beb8..c80d2ef5d 100644
--- a/pandas/tseries/tools.py
+++ b/pandas/tseries/tools.py
@@ -99,16 +99,7 @@ def to_datetime(arg, errors='ignore', dayfirst=False, utc=None, box=True,
             except (ValueError, TypeError):
                 raise e
 
-    if arg is None:
-        return arg
-    elif isinstance(arg, datetime):
-        return arg
-    elif isinstance(arg, Series):
-        values = arg.values
-        if not com.is_datetime64_dtype(values):
-            values = _convert_f(values)
-        return Series(values, index=arg.index, name=arg.name)
-    elif isinstance(arg, (np.ndarray, list)):
+    def _convert_listlike(arg):        
         if isinstance(arg, list):
             arg = np.array(arg, dtype='O')
 
@@ -122,24 +113,23 @@ def to_datetime(arg, errors='ignore', dayfirst=False, utc=None, box=True,
                         return DatetimeIndex._simple_new(values, None, tz=tz)
                     except (ValueError, TypeError):
                         raise e
-            return arg
+                return arg
 
-        try:
-            return _convert_f(arg)
-        except ValueError:
-            raise
-        return arg
+        return _convert_f(arg)
 
-    try:
-        if not arg:
-            return arg
-        default = datetime(1, 1, 1)
-        return parse(arg, dayfirst=dayfirst, default=default)
-    except Exception:
-        if errors == 'raise':
-            raise
+    if arg is None:
         return arg
+    elif isinstance(arg, datetime):
+        return arg
+    elif isinstance(arg, Series):
+        values = arg.values
+        if not com.is_datetime64_dtype(values):
+            values = _convert_f(values)
+        return Series(values, index=arg.index, name=arg.name)
+    elif isinstance(arg, (np.ndarray, list)):
+        return _convert_listlike(arg)
 
+    return _convert_listlike(np.array([ arg ], dtype='O'))[0]
 
 class DateParseError(ValueError):
     pass
