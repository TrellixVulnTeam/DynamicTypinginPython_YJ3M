commit d4608f56ed79f04d4afab222b9ddb3c48c35d299
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Feb 6 09:50:33 2012 -0500

    BUG: test coverage and bugfix in rank_2d_generic

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 679caa300..29f866d87 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -3102,8 +3102,10 @@ class DataFrame(NDFrame):
         -------
         y : DataFrame
         """
-        cols = self._get_numeric_columns()
-        mat = self.as_matrix(cols).T
+        numeric_df = self._get_numeric_data()
+        mat = numeric_df.values.T
+        cols = numeric_df.columns
+
         corrf = nanops.get_corr_func(method)
         K = len(cols)
         correl = np.empty((K, K), dtype=float)
@@ -3128,8 +3130,9 @@ class DataFrame(NDFrame):
         -------
         y : DataFrame
         """
-        cols = self._get_numeric_columns()
-        mat = self.as_matrix(cols).T
+        numeric_df = self._get_numeric_data()
+        mat = numeric_df.values.T
+        cols = numeric_df.columns
         baseCov = np.cov(mat)
 
         for i, j, ac, bc in self._cov_helper(mat):
@@ -3205,9 +3208,9 @@ class DataFrame(NDFrame):
         -------
         DataFrame of summary statistics
         """
-        numeric_columns = self._get_numeric_columns()
+        numdata = self._get_numeric_data()
 
-        if len(numeric_columns) == 0:
+        if len(numdata.columns) == 0:
             return DataFrame(dict((k, v.describe())
                                   for k, v in self.iteritems()),
                                   columns=self.columns)
@@ -3217,13 +3220,14 @@ class DataFrame(NDFrame):
 
         destat = []
 
-        for column in numeric_columns:
+        for column in numdata.columns:
             series = self[column]
             destat.append([series.count(), series.mean(), series.std(),
                            series.min(), series.quantile(.25), series.median(),
                            series.quantile(.75), series.max()])
 
-        return self._constructor(map(list, zip(*destat)), index=destat_columns, columns=numeric_columns)
+        return self._constructor(map(list, zip(*destat)), index=destat_columns,
+                                 columns=numdata.columns)
 
     #----------------------------------------------------------------------
     # ndarray-like stats methods
@@ -3252,7 +3256,7 @@ class DataFrame(NDFrame):
                                      numeric_only=numeric_only)
 
         if numeric_only:
-            frame = self.ix[:, self._get_numeric_columns()]
+            frame = self._get_numeric_data()
         else:
             frame = self
 
@@ -3486,26 +3490,6 @@ class DataFrame(NDFrame):
         else:
             raise Exception('Must have 0<= axis <= 1')
 
-    def _get_numeric_columns(self):
-        from pandas.core.internals import ObjectBlock
-
-        cols = []
-        for col, blk in zip(self.columns, self._data.block_id_vector):
-            if not isinstance(self._data.blocks[blk], ObjectBlock):
-                cols.append(col)
-
-        return cols
-
-    def _get_nonnumeric_columns(self):
-        from pandas.core.internals import ObjectBlock
-
-        cols = []
-        for col, blk in zip(self.columns, self._data.block_id_vector):
-            if isinstance(self._data.blocks[blk], ObjectBlock):
-                cols.append(col)
-
-        return cols
-
     def _get_numeric_data(self):
         if self._is_mixed_type:
             num_data = self._data.get_numeric_data()
@@ -3516,15 +3500,6 @@ class DataFrame(NDFrame):
             else:
                 return self.ix[:, []]
 
-    def _get_nonnumeric_data(self):
-        if self._is_mixed_type:
-            return self.ix[:, self._get_nonnumeric_columns()]
-        else:
-            if self.values.dtype == np.object_:
-                return self
-            else:
-                return self.ix[:, []]
-
     def quantile(self, q=0.5, axis=0):
         """
         Return values at the given quantile over requested axis, a la
diff --git a/pandas/src/stats.pyx b/pandas/src/stats.pyx
index 6187eb356..5ce132501 100644
--- a/pandas/src/stats.pyx
+++ b/pandas/src/stats.pyx
@@ -90,7 +90,7 @@ def rank_2d_float64(object in_arr, axis=0):
     else:
         return ranks
 
-def rank_1d_generic(object in_arr):
+def rank_1d_generic(object in_arr, bint retry=1):
     """
     Fast NaN-friendly version of scipy.stats.rankdata
     """
@@ -120,8 +120,11 @@ def rank_1d_generic(object in_arr):
     try:
         _as = values.argsort()
     except TypeError:
+        if not retry:
+            raise
+
         valid_locs = (-mask).nonzero()[0]
-        ranks.put(valid_locs, rank_1d_generic(values.take(valid_locs)))
+        ranks.put(valid_locs, rank_1d_generic(values.take(valid_locs), 0))
         np.putmask(ranks, mask, np.nan)
         return ranks
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 99c4c9553..af8c4a7cd 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -3803,8 +3803,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
                          'd' : [None, None, None],
                          'e' : [3.14, 0.577, 2.773]})
 
-        self.assertEquals(df._get_numeric_columns(), ['a', 'e'])
-        # self.assertEquals(df._get_object_columns(), ['c', 'd'])
+        self.assert_(np.array_equal(df._get_numeric_data().columns,
+                                    ['a', 'e']))
 
     def test_get_numeric_data(self):
         df = DataFrame({'a' : 1., 'b' : 2, 'c' : 'foo'},
@@ -4196,6 +4196,12 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         result = df.rank(1, numeric_only=False)
         assert_frame_equal(result, expected)
 
+        # mixed-type frames
+        self.mixed_frame['foo'] = datetime.now()
+        result = self.mixed_frame.rank(1)
+        expected = self.mixed_frame.rank(1, numeric_only=True)
+        assert_frame_equal(result, expected)
+
     def test_describe(self):
         desc = self.tsframe.describe()
         desc = self.mixed_frame.describe()
