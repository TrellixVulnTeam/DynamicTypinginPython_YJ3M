commit 6cad535870bead8e142b2a01c37b7e68229e9cd2
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jun 27 23:01:27 2011 -0400

    added generic rolling_apply function

diff --git a/RELEASE.rst b/RELEASE.rst
index 12239bd31..980d8314d 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -7,11 +7,11 @@ pandas 0.4 Release Notes
 What is it
 ==========
 
-**pandas** is a library of powerful labeled data structures, statistical tools,
-and general code for working with time series and cross-sectional data. It was
-designed with the practical needs of statistical modeling and large,
-inhomogeneous data sets in mind. It is particularly well suited for, among other
-things, financial data analysis applications.
+**pandas** is a library of powerful labeled-axis data structures, statistical
+tools, and general code for working with time series and cross-sectional
+data. It was designed with the practical needs of statistical modeling and
+large, inhomogeneous data sets in mind. It is particularly well suited for,
+among other things, financial data analysis applications.
 
 ===============
 Where to get it
diff --git a/pandas/stats/moments.py b/pandas/stats/moments.py
index e39177693..616550b4c 100644
--- a/pandas/stats/moments.py
+++ b/pandas/stats/moments.py
@@ -15,8 +15,8 @@ import pandas._tseries as _tseries
 __all__ = ['rolling_count', 'rolling_max', 'rolling_min',
            'rolling_sum', 'rolling_mean', 'rolling_std', 'rolling_cov',
            'rolling_corr', 'rolling_var', 'rolling_skew', 'rolling_kurt',
-           'rolling_quantile', 'rolling_median', 'ewma', 'ewmvar', 'ewmstd',
-           'ewmvol', 'ewmcorr', 'ewmcov']
+           'rolling_quantile', 'rolling_median', 'rolling_apply',
+           'ewma', 'ewmvar', 'ewmstd', 'ewmvol', 'ewmcorr', 'ewmcov']
 
 def rolling_count(arg, window, time_rule=None):
     """
@@ -350,3 +350,27 @@ def rolling_quantile(arg, window, quantile, min_periods=None, time_rule=None):
         return _tseries.roll_quantile(arg, window, minp, quantile)
     return _rolling_moment(arg, window, call_cython, min_periods,
                            time_rule=time_rule)
+
+def rolling_apply(arg, window, func, min_periods=None, time_rule=None):
+    """Generic moving function application
+
+    Parameters
+    ----------
+    arg : Series, DataFrame
+    window : Number of observations used for calculating statistic
+    func : function
+        Must produce a single value from an ndarray input
+    min_periods : int
+        Minimum number of observations in window required to have a value
+    time_rule : {None, 'WEEKDAY', 'EOM', 'W@MON', ...}, default=None
+        Name of time rule to conform to before computing statistic
+
+    Returns
+    -------
+    y : type of input argument
+    """
+    def call_cython(arg, window, minp):
+        minp = _use_window(minp, window)
+        return _tseries.roll_generic(arg, window, minp, func)
+    return _rolling_moment(arg, window, call_cython, min_periods,
+                           time_rule=time_rule)
diff --git a/pandas/stats/tests/test_moments.py b/pandas/stats/tests/test_moments.py
index 29aa289fc..2f320a070 100644
--- a/pandas/stats/tests/test_moments.py
+++ b/pandas/stats/tests/test_moments.py
@@ -69,6 +69,14 @@ class TestMoments(unittest.TestCase):
 
             self._check_moment_func(f, alt)
 
+    def test_rolling_apply(self):
+        def roll_mean(x, window, min_periods=None, time_rule=None):
+            return moments.rolling_apply(x, window,
+                                         lambda x: x[np.isfinite(x)].mean(),
+                                         min_periods=min_periods,
+                                         time_rule=time_rule)
+        self._check_moment_func(roll_mean, np.mean)
+
     def test_rolling_std(self):
         self._check_moment_func(moments.rolling_std,
                                 lambda x: np.std(x, ddof=1))
