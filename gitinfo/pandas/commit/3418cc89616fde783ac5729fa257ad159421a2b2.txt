commit 3418cc89616fde783ac5729fa257ad159421a2b2
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Fri Apr 27 11:38:40 2012 -0400

    ENH: implement asfreq with PeriodIndex on Series/DataFrame, close #1129

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 653373a40..358956c6e 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2929,29 +2929,6 @@ class DataFrame(NDFrame):
     #----------------------------------------------------------------------
     # Time series-related
 
-    def asfreq(self, freq, method=None):
-        """
-        Convert all TimeSeries inside to specified frequency using DateOffset
-        objects. Optionally provide fill method to pad/backfill missing values.
-
-        Parameters
-        ----------
-        freq : DateOffset object, or string
-        method : {'backfill', 'bfill', 'pad', 'ffill', None}
-            Method to use for filling holes in reindexed Series
-            pad / ffill: propagate last valid observation forward to next valid
-            backfill / bfill: use NEXT valid observation to fill methdo
-
-        Returns
-        -------
-        converted : DataFrame
-        """
-        from pandas.tseries.index import date_range
-        if len(self.index) == 0:
-            return self.copy()
-        dti = date_range(self.index[0], self.index[-1], freq=freq)
-        return self.reindex(dti, method=method)
-
     def diff(self, periods=1):
         """
         1st discrete difference of object
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 7705cbd9b..2863383e3 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -135,6 +135,28 @@ class PandasObject(Picklable):
         return groupby(self, by, axis=axis, level=level, as_index=as_index,
                        sort=sort, group_keys=group_keys)
 
+    def asfreq(self, freq, method=None, how=None):
+        """
+        Convert all TimeSeries inside to specified frequency using DateOffset
+        objects. Optionally provide fill method to pad/backfill missing values.
+
+        Parameters
+        ----------
+        freq : DateOffset object, or string
+        method : {'backfill', 'bfill', 'pad', 'ffill', None}
+            Method to use for filling holes in reindexed Series
+            pad / ffill: propagate last valid observation forward to next valid
+            backfill / bfill: use NEXT valid observation to fill methdo
+        how : {'start', 'end'}, default end
+            For PeriodIndex only, see PeriodIndex.asfreq
+
+        Returns
+        -------
+        converted : type of caller
+        """
+        from pandas.tseries.resample import asfreq
+        return asfreq(self, freq, method=method, how=how)
+
     def resample(self, rule, how='mean', axis=0, as_index=True,
                  fill_method=None, closed='right', label='right', kind=None):
         """
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 88b7840e0..246541e8c 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -2295,29 +2295,6 @@ copy : boolean, default False
         else:
             return v
 
-    def asfreq(self, freq, method=None):
-        """
-        Convert all TimeSeries inside to specified frequency using DateOffset
-        objects. Optionally provide fill method to pad/backfill missing values.
-
-        Parameters
-        ----------
-        freq : DateOffset object, or string
-        method : {'backfill', 'bfill', 'pad', 'ffill', None}
-            Method to use for filling holes in reindexed Series
-            pad / ffill: propagate last valid observation forward to next valid
-            backfill / bfill: use NEXT valid observation to fill methdo
-
-        Returns
-        -------
-        converted : DataFrame
-        """
-        from pandas.tseries.index import date_range
-        if len(self.index) == 0:
-            return self.copy()
-        dti = date_range(self.index[0], self.index[-1], freq=freq)
-        return self.reindex(dti, method=method)
-
     def interpolate(self, method='linear'):
         """
         Interpolate missing values (after the first valid value)
diff --git a/pandas/tseries/period.py b/pandas/tseries/period.py
index 060c45e4e..8dbc4ed15 100644
--- a/pandas/tseries/period.py
+++ b/pandas/tseries/period.py
@@ -551,6 +551,10 @@ class PeriodIndex(Int64Index):
     def is_all_dates(self):
         return True
 
+    @property
+    def freqstr(self):
+        return self.freq
+
     def asfreq(self, freq=None, how='E'):
         how = _validate_end_alias(how)
 
diff --git a/pandas/tseries/resample.py b/pandas/tseries/resample.py
index 3ec12cd83..10ff34a9a 100644
--- a/pandas/tseries/resample.py
+++ b/pandas/tseries/resample.py
@@ -2,7 +2,7 @@ import numpy as np
 
 from pandas.core.groupby import BinGrouper
 from pandas.tseries.frequencies import to_offset
-from pandas.tseries.index import DatetimeIndex
+from pandas.tseries.index import DatetimeIndex, date_range
 from pandas.tseries.offsets import DateOffset
 from pandas.tseries.period import PeriodIndex
 from pandas.util.decorators import cache_readonly
@@ -147,26 +147,6 @@ class TimeGrouper(BinGrouper):
 
 
 def _get_range_edges(axis, begin, end, offset, closed='left'):
-    # from pandas.tseries.tools import _delta_to_microseconds
-
-    # if isinstance(offset, Tick):
-    #     if begin is None:
-    #         if closed == 'left':
-    #             first = Timestamp(offset.rollback(axis[0]))
-    #         else:
-    #             first = Timestamp(axis[0] - offset)
-    #     else:
-    #         first = Timestamp(offset.rollback(begin))
-
-    #     if end is None:
-    #         if closed == 'left':
-    #             last = Timestamp(axis[-1] + offset)
-    #         else:
-    #             last = Timestamp(offset.rollforward(axis[-1]))
-    #     else:
-    #         last = Timestamp(offset.rollforward(end))
-    # else:
-
     if begin is None:
         if closed == 'left':
             first = Timestamp(offset.rollback(axis[0]))
@@ -182,3 +162,24 @@ def _get_range_edges(axis, begin, end, offset, closed='left'):
         last = Timestamp(offset.rollforward(end))
 
     return first, last
+
+def asfreq(obj, freq, method=None, how=None):
+    """
+    Utility frequency conversion method for Series/DataFrame
+    """
+    if isinstance(obj.index, PeriodIndex):
+        if method is not None:
+            raise NotImplementedError
+
+        if how is None:
+            how = 'E'
+
+        new_index = obj.index.asfreq(freq, how=how)
+        new_obj = obj.copy()
+        new_obj.index = new_index
+        return new_obj
+    else:
+        if len(obj.index) == 0:
+            return obj.copy()
+        dti = date_range(obj.index[0], obj.index[-1], freq=freq)
+        return obj.reindex(dti, method=method)
diff --git a/pandas/tseries/tests/test_period.py b/pandas/tseries/tests/test_period.py
index 0c25ea056..30baaee80 100644
--- a/pandas/tseries/tests/test_period.py
+++ b/pandas/tseries/tests/test_period.py
@@ -18,7 +18,7 @@ from pandas.tseries.tools import to_datetime
 import pandas.core.datetools as datetools
 import numpy as np
 
-from pandas import Series, TimeSeries
+from pandas import Series, TimeSeries, DataFrame
 from pandas.util.testing import assert_series_equal
 
 class TestPeriodProperties(TestCase):
@@ -862,6 +862,9 @@ class TestPeriodIndex(TestCase):
     def __init__(self, *args, **kwds):
         TestCase.__init__(self, *args, **kwds)
 
+    def setUp(self):
+        pass
+
     def test_make_time_series(self):
         index = PeriodIndex(freq='A', start='1/1/2001', end='12/1/2009')
         series = Series(1, index=index)
@@ -1056,6 +1059,27 @@ class TestPeriodIndex(TestCase):
 
         #self.assertEquals(ii7.asfreq('A', 'E'), i_end)
 
+    def test_ts_repr(self):
+        index = PeriodIndex(freq='A', start='1/1/2001', end='12/31/2010')
+        ts = Series(np.random.randn(len(index)), index=index)
+        repr(ts)
+
+    def test_asfreq_ts(self):
+        index = PeriodIndex(freq='A', start='1/1/2001', end='12/31/2010')
+        ts = Series(np.random.randn(len(index)), index=index)
+        df = DataFrame(np.random.randn(len(index), 3), index=index)
+
+        result = ts.asfreq('D', how='end')
+        df_result = df.asfreq('D', how='end')
+        exp_index = index.asfreq('D', how='end')
+        self.assert_(len(result) == len(ts))
+        self.assert_(result.index.equals(exp_index))
+        self.assert_(df_result.index.equals(exp_index))
+
+        result = ts.asfreq('D', how='start')
+        self.assert_(len(result) == len(ts))
+        self.assert_(result.index.equals(index.asfreq('D', how='start')))
+
     def test_badinput(self):
         self.assertRaises(datetools.DateParseError, Period, '1/1/-2000', 'A')
         self.assertRaises(ValueError, Period, -2000, 'A')
