commit 9d15685dbf2d1bdf4597971a709336a2f1e7c997
Author: Chang She <changshe@gmail.com>
Date:   Tue Jul 17 22:52:31 2012 -0400

    ENH: use asfreq and reset index instead of resample for plotting

diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index 935bd0f3f..9cbae792d 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -816,7 +816,8 @@ class KdePlot(MPLPlot):
         df = self.data
 
         if self.subplots and self.legend:
-            self.axes[0].legend(loc='best')
+            for ax in self.axes:
+                ax.legend(loc='best')
 
 class LinePlot(MPLPlot):
 
@@ -994,6 +995,10 @@ class LinePlot(MPLPlot):
             if index_name is not None:
                 ax.set_xlabel(index_name)
 
+        if self.subplots and self.legend:
+            for ax in self.axes:
+                ax.legend(loc='best')
+
 
 class BarPlot(MPLPlot):
     _default_rot = {'bar' : 90, 'barh' : 0}
@@ -1064,9 +1069,9 @@ class BarPlot(MPLPlot):
             labels.append(label)
 
         if self.legend and not self.subplots:
-                patches =[r[0] for r in rects]
-                self.axes[0].legend(patches, labels, loc='best',
-                               title=self.legend_title)
+            patches =[r[0] for r in rects]
+            self.axes[0].legend(patches, labels, loc='best',
+                                title=self.legend_title)
 
     def _post_plot_logic(self):
         for ax in self.axes:
@@ -1091,6 +1096,9 @@ class BarPlot(MPLPlot):
                 if name is not None:
                     ax.set_ylabel(name)
 
+        #if self.subplots and self.legend:
+        #    self.axes[0].legend(loc='best')
+
 class BoxPlot(MPLPlot):
     pass
 
diff --git a/pandas/tseries/plotting.py b/pandas/tseries/plotting.py
index 187fe2b4d..07905d254 100644
--- a/pandas/tseries/plotting.py
+++ b/pandas/tseries/plotting.py
@@ -52,13 +52,12 @@ def tsplot(series, plotf, **kwargs):
     if freq is None: # pragma: no cover
         raise ValueError('Cannot use dynamic axis without frequency info')
     else:
+        # Convert DatetimeIndex to PeriodIndex
+        if isinstance(series.index, DatetimeIndex):
+            series = series.to_period(freq=freq)
         freq, ax_freq, series = _maybe_resample(series, ax, freq, plotf,
                                                 kwargs)
 
-    # Convert DatetimeIndex to PeriodIndex
-    if isinstance(series.index, DatetimeIndex):
-        series = series.to_period(freq=freq)
-
     # Set ax with freq info
     _decorate_axes(ax, freq, kwargs)
 
@@ -88,19 +87,17 @@ def tsplot(series, plotf, **kwargs):
 def _maybe_resample(series, ax, freq, plotf, kwargs):
     ax_freq = _get_ax_freq(ax)
     if ax_freq is not None and freq != ax_freq:
-        if frequencies.is_subperiod(freq, ax_freq): # upsample existing
-            _upsample_others(ax, freq, plotf, kwargs)
-            ax_freq = freq
-        elif frequencies.is_superperiod(freq, ax_freq): # upsample input
-            series = series.asfreq(ax_freq).dropna()
+        if frequencies.is_superperiod(freq, ax_freq): # upsample input
+            series = series.copy()
+            series.index = series.index.asfreq(ax_freq)
             freq = ax_freq
         elif _is_sup(freq, ax_freq): # one is weekly
             how = kwargs.pop('how', 'last')
             series = series.resample('D', how=how).dropna()
             series = series.resample(ax_freq, how=how).dropna()
             freq = ax_freq
-        elif _is_sub(freq, ax_freq):
-            _upsample_others(ax, freq, plotf, kwargs, True)
+        elif frequencies.is_subperiod(freq, ax_freq) or _is_sub(freq, ax_freq):
+            _upsample_others(ax, freq, plotf, kwargs)
             ax_freq = freq
         else:
             raise ValueError('Incompatible frequency conversion')
@@ -123,10 +120,9 @@ def _is_sup(f1, f2):
     return ((f1.startswith('W') and frequencies.is_superperiod('D', f2)) or
             (f2.startswith('W') and frequencies.is_superperiod(f1, 'D')))
 
-def _upsample_others(ax, freq, plotf, kwargs,
-                     via_daily=False):
+def _upsample_others(ax, freq, plotf, kwargs):
     legend = ax.get_legend()
-    lines, labels = _replot_ax(ax, freq, plotf, kwargs, via_daily)
+    lines, labels = _replot_ax(ax, freq, plotf, kwargs)
 
     other_ax = None
     if hasattr(ax, 'left_ax'):
@@ -135,8 +131,7 @@ def _upsample_others(ax, freq, plotf, kwargs,
         other_ax = ax.right_ax
 
     if other_ax is not None:
-        rlines, rlabels = _replot_ax(other_ax, freq, plotf, kwargs,
-                                     via_daily)
+        rlines, rlabels = _replot_ax(other_ax, freq, plotf, kwargs)
         lines.extend(rlines)
         labels.extend(rlabels)
 
@@ -147,17 +142,19 @@ def _upsample_others(ax, freq, plotf, kwargs,
             title = None
         ax.legend(lines, labels, loc='best', title=title)
 
-def _replot_ax(ax, freq, plotf, kwargs, via_daily):
+def _replot_ax(ax, freq, plotf, kwargs):
+    data = getattr(ax, '_plot_data', None)
     ax._plot_data = []
     ax.clear()
     _decorate_axes(ax, freq, kwargs)
 
-    data = getattr(ax, '_plot_data', None)
     lines = []
     labels = []
     if data is not None:
         for series, kwds in data:
-            series = _upsample(series, freq, via_daily)
+            series = series.copy()
+            idx = series.index.asfreq(freq)
+            series.index = idx
             ax._plot_data.append(series)
             args = _maybe_mask(series)
             lines.append(plotf(ax, *args, **kwds)[0])
@@ -165,12 +162,6 @@ def _replot_ax(ax, freq, plotf, kwargs, via_daily):
 
     return lines, labels
 
-def _upsample(series, freq, via_daily):
-    if not via_daily:
-        return series.resample(freq).dropna()
-    else:
-        return series.resample('D').resample(freq).dropna()
-
 def _decorate_axes(ax, freq, kwargs):
     ax.freq = freq
     xaxis = ax.get_xaxis()
diff --git a/pandas/tseries/tests/test_plotting.py b/pandas/tseries/tests/test_plotting.py
index fdcee4186..5ff295ba8 100644
--- a/pandas/tseries/tests/test_plotting.py
+++ b/pandas/tseries/tests/test_plotting.py
@@ -444,6 +444,26 @@ class TestTSPlot(unittest.TestCase):
         mask = data.mask
         self.assert_(mask[2:5, 1].all())
 
+    @slow
+    def test_gap_upsample(self):
+        import matplotlib.pyplot as plt
+        plt.close('all')
+        low = tm.makeTimeSeries()
+        low[5:25] = np.nan
+        ax = low.plot()
+
+        idxh = date_range(low.index[0], low.index[-1], freq='12h')
+        s = Series(np.random.randn(len(idxh)), idxh)
+        s.plot(secondary_y=True)
+        lines = ax.get_lines()
+        self.assert_(len(lines) == 1)
+        self.assert_(len(ax.right_ax.get_lines()) == 1)
+        l = lines[0]
+        data = l.get_xydata()
+        self.assert_(isinstance(data, np.ma.core.MaskedArray))
+        mask = data.mask
+        self.assert_(mask[5:25, 1].all())
+
     @slow
     def test_secondary_y(self):
         import matplotlib.pyplot as plt
@@ -713,22 +733,7 @@ class TestTSPlot(unittest.TestCase):
             self.assert_(l.get_xdata().freq == 'D')
 
     @slow
-    def test_legend(self):
-        # TS plots
-        # secondary
-        # plot series after left, right
-
-        # Irreg TS plot
-        # secondary
-        # plot series after left, right
-
-        # Non TS
-        # secondary
-        # plot series after left, right
-        pass
-
-    @slow
-    def test_secondary_color(self):
+    def test_secondary_legend(self):
         import matplotlib.pyplot as plt
         fig = plt.gcf()
         plt.clf()
@@ -740,6 +745,10 @@ class TestTSPlot(unittest.TestCase):
         leg = ax.get_legend()
         self.assert_(len(leg.get_lines()) == 4)
         self.assert_(ax.right_ax.get_legend() is None)
+        colors = set()
+        for line in leg.get_lines():
+            colors.add(line.get_color())
+        self.assert_(len(colors) == 4)
 
         plt.clf()
         ax = fig.add_subplot(211)
@@ -748,6 +757,10 @@ class TestTSPlot(unittest.TestCase):
         leg = ax.get_legend()
         self.assert_(len(leg.get_lines()) == 4)
         self.assert_(ax.right_ax.get_legend() is None)
+        colors = set()
+        for line in leg.get_lines():
+            colors.add(line.get_color())
+        self.assert_(len(colors) == 4)
 
         #non-ts
         df = tm.makeDataFrame()
@@ -757,6 +770,10 @@ class TestTSPlot(unittest.TestCase):
         leg = ax.get_legend()
         self.assert_(len(leg.get_lines()) == 4)
         self.assert_(ax.right_ax.get_legend() is None)
+        colors = set()
+        for line in leg.get_lines():
+            colors.add(line.get_color())
+        self.assert_(len(colors) == 4)
 
         plt.clf()
         ax = fig.add_subplot(211)
@@ -764,6 +781,10 @@ class TestTSPlot(unittest.TestCase):
         leg = ax.get_legend()
         self.assert_(len(leg.get_lines()) == 4)
         self.assert_(ax.right_ax.get_legend() is None)
+        colors = set()
+        for line in leg.get_lines():
+            colors.add(line.get_color())
+        self.assert_(len(colors) == 4)
 
 PNG_PATH = 'tmp.png'
 def _check_plot_works(f, freq=None, series=None, *args, **kwargs):
