commit ffdc78ba7e3e9c5aca2cc02a003bd6ae25d43bea
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Sat Oct 13 17:10:47 2012 -0400

    BUG: hack to disable type conversions for columns to be converted to strings

diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index 3feca267e..ee21fba8e 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -86,7 +86,7 @@ iterator : boolean, default False
     Return TextParser object
 chunksize : int, default None
     Return TextParser object for iteration
-skip_footer : int, default 0
+skipfooter : int, default 0
     Number of line at bottom of file to skip
 converters : dict. optional
     Dict of functions for converting values in certain columns. Keys can either
@@ -274,9 +274,10 @@ def _make_parser_function(name, sep=','):
                  index_col=None,
                  names=None,
                  skiprows=None,
+                 skipfooter=None,
+                 skip_footer=0,
                  na_values=None,
                  delimiter=None,
-                 skip_footer=0,
                  converters=None,
 
                  engine='c',
@@ -338,7 +339,7 @@ def _make_parser_function(name, sep=','):
                     nrows=nrows,
                     iterator=iterator,
                     chunksize=chunksize,
-                    skip_footer=skip_footer,
+                    skipfooter=skipfooter or skip_footer,
                     converters=converters,
                     verbose=verbose,
                     encoding=encoding,
@@ -792,9 +793,12 @@ class CParserWrapper(ParserBase):
             self.names = list(self._reader.header)
 
         if self.names is None:
-            self.names = ['X%d' % (i + 1)
+            self.names = ['X%d' % i
                           for i in range(self._reader.table_width)]
 
+        # XXX
+        self._set_noconvert_columns()
+
         self.orig_names = self.names
 
         if not self._has_complex_date_col:
@@ -806,6 +810,23 @@ class CParserWrapper(ParserBase):
 
         self._implicit_index = self._reader.leading_cols > 0
 
+    def _set_noconvert_columns(self):
+        names = self.names
+
+        def _set(x):
+            if com.is_integer(x):
+                self._reader.set_noconvert(x)
+            else:
+                self._reader.set_noconvert(names.index(x))
+
+        if isinstance(self.parse_dates, list):
+            for val in self.parse_dates:
+                if isinstance(val, list):
+                    for k in val:
+                        _set(k)
+                else:
+                    _set(val)
+
     def set_error_bad_lines(self, status):
         self._reader.set_error_bad_lines(int(status))
 
diff --git a/pandas/io/tests/test_parsers.py b/pandas/io/tests/test_parsers.py
index c3e09c02a..422a959d7 100644
--- a/pandas/io/tests/test_parsers.py
+++ b/pandas/io/tests/test_parsers.py
@@ -612,8 +612,17 @@ c,4,5
 090228,1020,3,4
 090331,0830,5,6
 """
-        rs = read_csv(StringIO(data), index_col=0,
-                      parse_dates=[['date', 'time']])
+        rs = self.read_csv(StringIO(data), index_col=0,
+                           parse_dates=[['date', 'time']])
+        idx = DatetimeIndex([datetime(2009,1,31,0,10,0),
+                             datetime(2009,2,28,10,20,0),
+                             datetime(2009,3,31,8,30,0)]).asobject
+        idx.name = 'date'
+        xp = DataFrame({'B': [1, 3, 5], 'C': [2, 4, 6]}, idx)
+        assert_frame_equal(rs, xp)
+
+        rs = self.read_csv(StringIO(data), index_col=0,
+                           parse_dates=[[0, 1]])
         idx = DatetimeIndex([datetime(2009,1,31,0,10,0),
                              datetime(2009,2,28,10,20,0),
                              datetime(2009,3,31,8,30,0)]).asobject
diff --git a/pandas/src/parser.pyx b/pandas/src/parser.pyx
index 472736969..f2dd625ea 100644
--- a/pandas/src/parser.pyx
+++ b/pandas/src/parser.pyx
@@ -224,6 +224,7 @@ cdef class TextReader:
         object low_memory
         object skiprows
         object compact_ints, use_unsigned
+        set noconvert
 
     def __cinit__(self, source,
                   delimiter=b',',
@@ -340,6 +341,9 @@ cdef class TextReader:
         self.low_memory = low_memory
         self.buffer_lines = buffer_lines
 
+        # XXX
+        self.noconvert = set()
+
         #----------------------------------------
         # header stuff
 
@@ -617,6 +621,12 @@ cdef class TextReader:
             elapsed = time.time() - self.clocks.pop(-1)
             print '%s took: %.2f ms' % (what, elapsed * 1000)
 
+    def set_noconvert(self, i):
+        self.noconvert.add(i)
+
+    def remove_noconvert(self, i):
+        self.noconvert.remove(i)
+
     def _convert_column_data(self, rows=None, upcast_na=False, footer=0):
         cdef:
             Py_ssize_t i, ncols
@@ -656,13 +666,19 @@ cdef class TextReader:
                 results[i] = _apply_converter(conv, self.parser, i, start, end)
                 continue
 
-            col_res = None
-            for func in cast_func_order:
+            if i in self.noconvert:
+                func = _string_box_factorize
                 col_res, na_count = func(self.parser, i, start, end,
                                          na_filter, na_hashset)
-                if col_res is not None:
-                    results[i] = col_res
-                    break
+                results[i] = col_res
+            else:
+                col_res = None
+                for func in cast_func_order:
+                    col_res, na_count = func(self.parser, i, start, end,
+                                             na_filter, na_hashset)
+                    if col_res is not None:
+                        results[i] = col_res
+                        break
 
             if na_filter:
                 self._free_na_set(na_hashset)
