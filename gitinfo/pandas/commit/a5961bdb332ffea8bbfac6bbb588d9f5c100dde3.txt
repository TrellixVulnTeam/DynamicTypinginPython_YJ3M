commit a5961bdb332ffea8bbfac6bbb588d9f5c100dde3
Author: PKEuS <philipp.kloke@web.de>
Date:   Sun Apr 21 21:38:22 2013 +0200

    Improvements to StataParser:
    - Moved unit test data to tests/data
    - Added unit testing for old Stata formats (SKIP per default)
    - Use py3compat.PY3 instead of own implementation

diff --git a/pandas/io/parsers.py b/pandas/io/parsers.py
index b2907a36d..5d35da5b1 100644
--- a/pandas/io/parsers.py
+++ b/pandas/io/parsers.py
@@ -2282,13 +2282,6 @@ http://statsmodels.sourceforge.net/devel/
 """
 
 
-def is_py3():
-    if sys.version_info[0] == 3:
-        return True
-    return False
-PY3 = is_py3()
-
-
 _date_formats = ["%tc", "%tC", "%td", "%tw", "%tm", "%tq", "%th", "%ty"]
 
 
@@ -2642,7 +2635,7 @@ class StataReader(StataParser):
         return d
 
     def _null_terminate(self, s):
-        if PY3:  # have bytes not strings, so must decode
+        if py3compat.PY3:  # have bytes not strings, so must decode
             null_byte = 0x00
             try:
                 s = s[:s.index(null_byte)]
@@ -3145,7 +3138,7 @@ class StataWriter(StataParser):
 
     def _null_terminate(self, s):
         null_byte = '\x00'
-        if PY3:
+        if py3compat.PY3:
             s += null_byte
             return s.encode(self._encoding)
         else:
diff --git a/pandas/io/tests/stata1.dta b/pandas/io/tests/data/stata1.dta
similarity index 100%
rename from pandas/io/tests/stata1.dta
rename to pandas/io/tests/data/stata1.dta
diff --git a/pandas/io/tests/stata2.dta b/pandas/io/tests/data/stata2.dta
similarity index 100%
rename from pandas/io/tests/stata2.dta
rename to pandas/io/tests/data/stata2.dta
diff --git a/pandas/io/tests/stata3.csv b/pandas/io/tests/data/stata3.csv
similarity index 100%
rename from pandas/io/tests/stata3.csv
rename to pandas/io/tests/data/stata3.csv
diff --git a/pandas/io/tests/stata3.dta b/pandas/io/tests/data/stata3.dta
similarity index 100%
rename from pandas/io/tests/stata3.dta
rename to pandas/io/tests/data/stata3.dta
diff --git a/pandas/io/tests/stata4.dta b/pandas/io/tests/data/stata4.dta
similarity index 100%
rename from pandas/io/tests/stata4.dta
rename to pandas/io/tests/data/stata4.dta
diff --git a/pandas/io/tests/test_stata.py b/pandas/io/tests/test_stata.py
index de59cc4de..4f6721ce8 100644
--- a/pandas/io/tests/test_stata.py
+++ b/pandas/io/tests/test_stata.py
@@ -10,7 +10,6 @@ import nose
 import numpy as np
 
 from pandas.core.frame import DataFrame
-from pandas.core.categorical import Categorical
 from pandas.io.parsers import (read_stata, read_csv, StataReader, StataWriter)
 import pandas.util.testing as tm
 
@@ -23,7 +22,9 @@ def curpath():
 class StataTests(unittest.TestCase):
 
     def setUp(self):
-        self.dirpath = curpath()
+        # Unit test datasets for dta7 - dta9 (old stata formats 104, 105 and 107) can be downloaded from:
+        # http://stata-press.com/data/glmext.html
+        self.dirpath = tm.get_data_path()
         self.dta1 = os.path.join(self.dirpath, 'stata1.dta')
         self.dta2 = os.path.join(self.dirpath, 'stata2.dta')
         self.dta3 = os.path.join(self.dirpath, 'stata3.dta')
@@ -31,6 +32,12 @@ class StataTests(unittest.TestCase):
         self.dta4 = os.path.join(self.dirpath, 'stata4.dta')
         self.dta5 = os.path.join(self.dirpath, 'stata5.dta')
         self.dta6 = os.path.join(self.dirpath, 'stata6.dta')
+        self.dta7 = os.path.join(self.dirpath, 'cancer.dta')
+        self.csv7 = os.path.join(self.dirpath, 'cancer.csv')
+        self.dta8 = os.path.join(self.dirpath, 'tbl19-3.dta')
+        self.csv8 = os.path.join(self.dirpath, 'tbl19-3.csv')
+        self.dta9 = os.path.join(self.dirpath, 'lbw.dta')
+        self.csv9 = os.path.join(self.dirpath, 'lbw.csv')
 
     def read_dta(self, file):
         return read_stata(file, convert_dates=True)
@@ -143,6 +150,42 @@ class StataTests(unittest.TestCase):
         written_and_read_again = self.read_dta(self.dta6)
         tm.assert_frame_equal(written_and_read_again, original)
 
+    @nose.tools.nottest
+    def test_read_dta7(self):
+        expected = read_csv(self.csv7, parse_dates=True, sep='\t')
+        parsed = self.read_dta(self.dta7)
+
+        for i, col in enumerate(parsed.columns):
+            np.testing.assert_almost_equal(
+                parsed[col],
+                expected[expected.columns[i]],
+                decimal=3
+            )
+
+    @nose.tools.nottest
+    def test_read_dta8(self):
+        expected = read_csv(self.csv8, parse_dates=True, sep='\t')
+        parsed = self.read_dta(self.dta8)
+
+        for i, col in enumerate(parsed.columns):
+            np.testing.assert_almost_equal(
+                parsed[col],
+                expected[expected.columns[i]],
+                decimal=3
+            )
+
+    @nose.tools.nottest
+    def test_read_dta9(self):
+        expected = read_csv(self.csv9, parse_dates=True, sep='\t')
+        parsed = self.read_dta(self.dta9)
+
+        for i, col in enumerate(parsed.columns):
+            np.testing.assert_equal(
+                parsed[col],
+                expected[expected.columns[i]],
+                decimal=3
+            )
+
 
 if __name__ == '__main__':
     nose.runmodule(argv=[__file__, '-vvs', '-x', '--pdb', '--pdb-failure'],
