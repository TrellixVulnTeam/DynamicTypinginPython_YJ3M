commit 473a7f3c186f6b0bfd9d3ce413fb627cf7a8f111
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Fri Aug 25 13:29:57 2017 -0700

    Replace usage of total_seconds compat func with timedelta method (#17289)

diff --git a/pandas/_libs/period.pyx b/pandas/_libs/period.pyx
index a1d04fea8..816b7ebff 100644
--- a/pandas/_libs/period.pyx
+++ b/pandas/_libs/period.pyx
@@ -10,9 +10,6 @@ from numpy cimport (int8_t, int32_t, int64_t, import_array, ndarray,
                     NPY_INT64, NPY_DATETIME, NPY_TIMEDELTA)
 import numpy as np
 
-cdef extern from "datetime_helper.h":
-    double total_seconds(object)
-
 from libc.stdlib cimport free
 
 from pandas import compat
@@ -552,7 +549,7 @@ cdef _reso_local(ndarray[int64_t] stamps, object tz):
                                               &dts)
             dt = datetime(dts.year, dts.month, dts.day, dts.hour,
                           dts.min, dts.sec, dts.us, tz)
-            delta = int(total_seconds(_get_utcoffset(tz, dt))) * 1000000000
+            delta = int(_get_utcoffset(tz, dt).total_seconds()) * 1000000000
             pandas_datetime_to_datetimestruct(stamps[i] + delta,
                                               PANDAS_FR_ns, &dts)
             curr_reso = _reso_stamp(&dts)
@@ -619,7 +616,7 @@ cdef ndarray[int64_t] localize_dt64arr_to_period(ndarray[int64_t] stamps,
                                               &dts)
             dt = datetime(dts.year, dts.month, dts.day, dts.hour,
                           dts.min, dts.sec, dts.us, tz)
-            delta = int(total_seconds(_get_utcoffset(tz, dt))) * 1000000000
+            delta = int(_get_utcoffset(tz, dt).total_seconds()) * 1000000000
             pandas_datetime_to_datetimestruct(stamps[i] + delta,
                                               PANDAS_FR_ns, &dts)
             result[i] = get_period_ordinal(dts.year, dts.month, dts.day,
diff --git a/pandas/_libs/src/datetime_helper.h b/pandas/_libs/src/datetime_helper.h
deleted file mode 100644
index 8023285f8..000000000
--- a/pandas/_libs/src/datetime_helper.h
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
-Copyright (c) 2016, PyData Development Team
-All rights reserved.
-
-Distributed under the terms of the BSD Simplified License.
-
-The full license is in the LICENSE file, distributed with this software.
-*/
-
-#ifndef PANDAS__LIBS_SRC_DATETIME_HELPER_H_
-#define PANDAS__LIBS_SRC_DATETIME_HELPER_H_
-
-#include <stdio.h>
-#include "datetime.h"
-#include "numpy/arrayobject.h"
-#include "numpy/arrayscalars.h"
-
-npy_int64 get_long_attr(PyObject *o, const char *attr) {
-  npy_int64 long_val;
-  PyObject *value = PyObject_GetAttrString(o, attr);
-  long_val = (PyLong_Check(value) ?
-              PyLong_AsLongLong(value) : PyInt_AS_LONG(value));
-  Py_DECREF(value);
-  return long_val;
-}
-
-npy_float64 total_seconds(PyObject *td) {
-  // Python 2.6 compat
-  npy_int64 microseconds = get_long_attr(td, "microseconds");
-  npy_int64 seconds = get_long_attr(td, "seconds");
-  npy_int64 days = get_long_attr(td, "days");
-  npy_int64 days_in_seconds = days * 24LL * 3600LL;
-  return (microseconds + (seconds + days_in_seconds) * 1000000.0) / 1000000.0;
-}
-
-#endif  // PANDAS__LIBS_SRC_DATETIME_HELPER_H_
diff --git a/pandas/_libs/src/ujson/python/objToJSON.c b/pandas/_libs/src/ujson/python/objToJSON.c
index f2c0b18d3..4beaa3fd4 100644
--- a/pandas/_libs/src/ujson/python/objToJSON.c
+++ b/pandas/_libs/src/ujson/python/objToJSON.c
@@ -47,9 +47,9 @@ http://www.opensource.apple.com/source/tcl/tcl-14/tcl/license.terms
 #include <numpy_helper.h>         // NOLINT(build/include_order)
 #include <stdio.h>                // NOLINT(build/include_order)
 #include <ultrajson.h>            // NOLINT(build/include_order)
-#include <datetime_helper.h>      // NOLINT(build/include_order)
 #include <np_datetime.h>          // NOLINT(build/include_order)
 #include <np_datetime_strings.h>  // NOLINT(build/include_order)
+#include "datetime.h"
 
 static PyObject *type_decimal;
 
@@ -329,6 +329,26 @@ static Py_ssize_t get_attr_length(PyObject *obj, char *attr) {
     return ret;
 }
 
+npy_int64 get_long_attr(PyObject *o, const char *attr) {
+  npy_int64 long_val;
+  PyObject *value = PyObject_GetAttrString(o, attr);
+  long_val = (PyLong_Check(value) ?
+              PyLong_AsLongLong(value) : PyInt_AS_LONG(value));
+  Py_DECREF(value);
+  return long_val;
+}
+
+npy_float64 total_seconds(PyObject *td) {
+  // Python 2.6 compat
+  // TODO(anyone): remove this legacy workaround with a more
+  // direct td.total_seconds()
+  npy_int64 microseconds = get_long_attr(td, "microseconds");
+  npy_int64 seconds = get_long_attr(td, "seconds");
+  npy_int64 days = get_long_attr(td, "days");
+  npy_int64 days_in_seconds = days * 24LL * 3600LL;
+  return (microseconds + (seconds + days_in_seconds) * 1000000.0) / 1000000.0;
+}
+
 static PyObject *get_item(PyObject *obj, Py_ssize_t i) {
     PyObject *tmp = PyInt_FromSsize_t(i);
     PyObject *ret;
diff --git a/pandas/_libs/tslib.pyx b/pandas/_libs/tslib.pyx
index c4a38ec66..b5aca2e3e 100644
--- a/pandas/_libs/tslib.pyx
+++ b/pandas/_libs/tslib.pyx
@@ -26,9 +26,6 @@ from cpython cimport (
 cdef extern from "Python.h":
     cdef PyTypeObject *Py_TYPE(object)
 
-cdef extern from "datetime_helper.h":
-    double total_seconds(object)
-
 # this is our datetime.pxd
 from libc.stdlib cimport free
 
@@ -1639,7 +1636,7 @@ cdef inline void _localize_tso(_TSObject obj, object tz):
         pandas_datetime_to_datetimestruct(obj.value, PANDAS_FR_ns, &obj.dts)
         dt = datetime(obj.dts.year, obj.dts.month, obj.dts.day, obj.dts.hour,
                       obj.dts.min, obj.dts.sec, obj.dts.us, tz)
-        delta = int(total_seconds(_get_utcoffset(tz, dt))) * 1000000000
+        delta = int(_get_utcoffset(tz, dt).total_seconds()) * 1000000000
         if obj.value != NPY_NAT:
             pandas_datetime_to_datetimestruct(obj.value + delta,
                                               PANDAS_FR_ns, &obj.dts)
@@ -4136,7 +4133,7 @@ def tz_convert(ndarray[int64_t] vals, object tz1, object tz2):
                     pandas_datetime_to_datetimestruct(v, PANDAS_FR_ns, &dts)
                     dt = datetime(dts.year, dts.month, dts.day, dts.hour,
                                   dts.min, dts.sec, dts.us, tz1)
-                    delta = (int(total_seconds(_get_utcoffset(tz1, dt)))
+                    delta = (int(_get_utcoffset(tz1, dt).total_seconds())
                              * 1000000000)
                     utc_dates[i] = v - delta
         else:
@@ -4176,8 +4173,8 @@ def tz_convert(ndarray[int64_t] vals, object tz1, object tz2):
                 pandas_datetime_to_datetimestruct(v, PANDAS_FR_ns, &dts)
                 dt = datetime(dts.year, dts.month, dts.day, dts.hour,
                               dts.min, dts.sec, dts.us, tz2)
-                delta = int(total_seconds(
-                    _get_utcoffset(tz2, dt))) * 1000000000
+                delta = (int(_get_utcoffset(tz2, dt).total_seconds())
+                             * 1000000000)
                 result[i] = v + delta
         return result
 
@@ -4243,7 +4240,7 @@ def tz_convert_single(int64_t val, object tz1, object tz2):
         pandas_datetime_to_datetimestruct(val, PANDAS_FR_ns, &dts)
         dt = datetime(dts.year, dts.month, dts.day, dts.hour,
                       dts.min, dts.sec, dts.us, tz1)
-        delta = int(total_seconds(_get_utcoffset(tz1, dt))) * 1000000000
+        delta = int(_get_utcoffset(tz1, dt).total_seconds()) * 1000000000
         utc_date = val - delta
     elif _get_zone(tz1) != 'UTC':
         trans, deltas, typ = _get_dst_info(tz1)
@@ -4261,7 +4258,7 @@ def tz_convert_single(int64_t val, object tz1, object tz2):
         pandas_datetime_to_datetimestruct(val, PANDAS_FR_ns, &dts)
         dt = datetime(dts.year, dts.month, dts.day, dts.hour,
                       dts.min, dts.sec, dts.us, tz2)
-        delta = int(total_seconds(_get_utcoffset(tz2, dt))) * 1000000000
+        delta = int(_get_utcoffset(tz2, dt).total_seconds()) * 1000000000
         return utc_date + delta
 
     # Convert UTC to other timezone
@@ -4333,7 +4330,7 @@ cdef object _get_dst_info(object tz):
     """
     cache_key = _tz_cache_key(tz)
     if cache_key is None:
-        num = int(total_seconds(_get_utcoffset(tz, None))) * 1000000000
+        num = int(_get_utcoffset(tz, None).total_seconds()) * 1000000000
         return (np.array([NPY_NAT + 1], dtype=np.int64),
                 np.array([num], dtype=np.int64),
                 None)
@@ -4380,7 +4377,7 @@ cdef object _get_dst_info(object tz):
         else:
             # static tzinfo
             trans = np.array([NPY_NAT + 1], dtype=np.int64)
-            num = int(total_seconds(_get_utcoffset(tz, None))) * 1000000000
+            num = int(_get_utcoffset(tz, None).total_seconds()) * 1000000000
             deltas = np.array([num], dtype=np.int64)
             typ = 'static'
 
@@ -4403,9 +4400,6 @@ cdef object _get_utc_trans_times_from_dateutil_tz(object tz):
     return new_trans
 
 
-def tot_seconds(td):
-    return total_seconds(td)
-
 cpdef ndarray _unbox_utcoffsets(object transinfo):
     cdef:
         Py_ssize_t i, sz
@@ -4415,7 +4409,7 @@ cpdef ndarray _unbox_utcoffsets(object transinfo):
     arr = np.empty(sz, dtype='i8')
 
     for i in range(sz):
-        arr[i] = int(total_seconds(transinfo[i][0])) * 1000000000
+        arr[i] = int(transinfo[i][0].total_seconds()) * 1000000000
 
     return arr
 
@@ -4458,7 +4452,7 @@ def tz_localize_to_utc(ndarray[int64_t] vals, object tz, object ambiguous=None,
             pandas_datetime_to_datetimestruct(v, PANDAS_FR_ns, &dts)
             dt = datetime(dts.year, dts.month, dts.day, dts.hour,
                           dts.min, dts.sec, dts.us, tz)
-            delta = int(total_seconds(_get_utcoffset(tz, dt))) * 1000000000
+            delta = int(_get_utcoffset(tz, dt).total_seconds()) * 1000000000
             result[i] = v - delta
         return result
 
@@ -5181,7 +5175,7 @@ cdef _normalize_local(ndarray[int64_t] stamps, object tz):
             pandas_datetime_to_datetimestruct(stamps[i], PANDAS_FR_ns, &dts)
             dt = datetime(dts.year, dts.month, dts.day, dts.hour,
                           dts.min, dts.sec, dts.us, tz)
-            delta = int(total_seconds(_get_utcoffset(tz, dt))) * 1000000000
+            delta = int(_get_utcoffset(tz, dt).total_seconds()) * 1000000000
             pandas_datetime_to_datetimestruct(stamps[i] + delta,
                                               PANDAS_FR_ns, &dts)
             result[i] = _normalized_stamp(&dts)
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index 82c80a133..712e9e990 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -4381,7 +4381,7 @@ def _get_tz(tz):
     """ for a tz-aware type, return an encoded zone """
     zone = tslib.get_timezone(tz)
     if zone is None:
-        zone = tslib.tot_seconds(tz.utcoffset())
+        zone = tz.utcoffset().total_seconds()
     return zone
 
 
diff --git a/pandas/tseries/offsets.py b/pandas/tseries/offsets.py
index 29cdda554..7ccecaa84 100644
--- a/pandas/tseries/offsets.py
+++ b/pandas/tseries/offsets.py
@@ -778,12 +778,12 @@ class BusinessHourMixin(BusinessMixin):
             # create dummy datetime to calcurate businesshours in a day
             dtstart = datetime(2014, 4, 1, self.start.hour, self.start.minute)
             until = datetime(2014, 4, 1, self.end.hour, self.end.minute)
-            return tslib.tot_seconds(until - dtstart)
+            return (until - dtstart).total_seconds()
         else:
             self.daytime = False
             dtstart = datetime(2014, 4, 1, self.start.hour, self.start.minute)
             until = datetime(2014, 4, 2, self.end.hour, self.end.minute)
-            return tslib.tot_seconds(until - dtstart)
+            return (until - dtstart).total_seconds()
 
     @apply_wraps
     def rollback(self, dt):
@@ -907,7 +907,7 @@ class BusinessHourMixin(BusinessMixin):
             op = self._prev_opening_time(dt)
         else:
             op = self._next_opening_time(dt)
-        span = tslib.tot_seconds(dt - op)
+        span = (dt - op).total_seconds()
         if span <= businesshours:
             return True
         else:
diff --git a/setup.py b/setup.py
index 04a5684c2..444db5bc4 100755
--- a/setup.py
+++ b/setup.py
@@ -467,7 +467,6 @@ lib_depends = lib_depends + ['pandas/_libs/src/numpy_helper.h',
 
 tseries_depends = ['pandas/_libs/src/datetime/np_datetime.h',
                    'pandas/_libs/src/datetime/np_datetime_strings.h',
-                   'pandas/_libs/src/datetime_helper.h',
                    'pandas/_libs/src/period_helper.h',
                    'pandas/_libs/src/datetime.pxd']
 
@@ -597,7 +596,6 @@ if suffix == '.pyx' and 'setuptools' in sys.modules:
 
 ujson_ext = Extension('pandas._libs.json',
                       depends=['pandas/_libs/src/ujson/lib/ultrajson.h',
-                               'pandas/_libs/src/datetime_helper.h',
                                'pandas/_libs/src/numpy_helper.h'],
                       sources=['pandas/_libs/src/ujson/python/ujson.c',
                                'pandas/_libs/src/ujson/python/objToJSON.c',
