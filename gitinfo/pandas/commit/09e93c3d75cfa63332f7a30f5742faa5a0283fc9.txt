commit 09e93c3d75cfa63332f7a30f5742faa5a0283fc9
Author: Chang She <chang@lambdafoundry.com>
Date:   Wed Jun 27 16:15:33 2012 -0400

    BUG: custom colors for bar chart #1540

diff --git a/pandas/tests/test_graphics.py b/pandas/tests/test_graphics.py
index 2c386076b..72dcaf492 100644
--- a/pandas/tests/test_graphics.py
+++ b/pandas/tests/test_graphics.py
@@ -39,6 +39,8 @@ class TestSeriesPlots(unittest.TestCase):
 
     @slow
     def test_plot(self):
+        import matplotlib.pyplot as plt
+        import matplotlib.colors as colors
         _check_plot_works(self.ts.plot, label='foo')
         _check_plot_works(self.ts.plot, use_index=False)
         _check_plot_works(self.ts.plot, rot=0)
@@ -53,6 +55,34 @@ class TestSeriesPlots(unittest.TestCase):
 
         Series(np.random.randn(10)).plot(kind='bar',color='black')
 
+        default_colors = 'brgyk'
+        custom_colors = 'rgcby'
+
+        plt.close('all')
+        df = DataFrame(np.random.randn(5, 5))
+        ax = df.plot(kind='bar')
+
+        rects = ax.patches
+
+        conv = colors.colorConverter
+        for i, rect in enumerate(rects[:5]):
+            xp = conv.to_rgba(default_colors[i])
+            rs = rect.get_facecolor()
+            self.assert_(xp, rs)
+
+        plt.close('all')
+
+        ax = df.plot(kind='bar', color=custom_colors)
+
+        rects = ax.patches
+
+        conv = colors.colorConverter
+        for i, rect in enumerate(rects[:5]):
+            xp = conv.to_rgba(custom_colors[i])
+            rs = rect.get_facecolor()
+            self.assert_(xp, rs)
+
+
     @slow
     def test_irregular_datetime(self):
         rng = date_range('1/1/2000', '3/1/2000')
diff --git a/pandas/tools/plotting.py b/pandas/tools/plotting.py
index 5b96beba4..56273d480 100644
--- a/pandas/tools/plotting.py
+++ b/pandas/tools/plotting.py
@@ -498,9 +498,8 @@ class MPLPlot(object):
 
     def _get_xticks(self, convert_period=False):
         index = self.data.index
-        is_datetype = (index.inferred_type in ('datetime', 'date',
-                                               'datetime64')
-                       or lib.is_time_array(index))
+        is_datetype = index.inferred_type in ('datetime', 'date',
+                                              'datetime64', 'time')
 
         if self.use_index:
             if convert_period and isinstance(index, PeriodIndex):
@@ -515,7 +514,6 @@ class MPLPlot(object):
                 """
                 x = index._mpl_repr()
             else:
-                foo
                 self._need_to_set_index = True
                 x = range(len(index))
         else:
@@ -750,7 +748,7 @@ class BarPlot(MPLPlot):
         return f
 
     def _make_plot(self):
-        colors = 'brgyk'
+        colors = self.kwds.get('color', 'brgyk')
         rects = []
         labels = []
 
@@ -765,8 +763,7 @@ class BarPlot(MPLPlot):
         for i, (label, y) in enumerate(self._iter_data()):
 
             kwds = self.kwds.copy()
-            if 'color' not in kwds:
-                kwds['color'] = colors[i % len(colors)]
+            kwds['color'] = colors[i % len(colors)]
 
             if self.subplots:
                 ax, _ = self._get_ax_and_style(i) #self.axes[i]
diff --git a/pandas/tseries/tests/test_plotting.py b/pandas/tseries/tests/test_plotting.py
index 2f2521140..198e88c36 100644
--- a/pandas/tseries/tests/test_plotting.py
+++ b/pandas/tseries/tests/test_plotting.py
@@ -587,18 +587,6 @@ class TestTSPlot(unittest.TestCase):
         df = DataFrame(np.random.randn(len(idx), 3), idx)
         _check_plot_works(df.plot)
 
-        #time
-        plt.close('all')
-        inc = Series(np.random.randint(1, 15, 3)).cumsum().values
-        idx = [time(1, 1, i) for i in inc]
-        df = DataFrame(np.random.randn(len(idx), 3), idx)
-        ax = df.plot()
-        ticks = ax.get_xticks()
-        labels = ax.get_xticklabels()
-        td = dict(zip(ticks, labels))
-        for i in range(3):
-            self.assert_(td[i].get_text() == str(idx[i]))
-
     @slow
     def test_time(self):
         import matplotlib.pyplot as plt
@@ -618,7 +606,10 @@ class TestTSPlot(unittest.TestCase):
         for t, l in zip(ticks, labels):
             m, s = divmod(int(t), 60)
             h, m = divmod(m, 60)
-            self.assert_(time(h, m, s).strftime('%H:%M:%S') == t.get_text())
+            xp = l.get_text()
+            if len(xp) > 0:
+                rs = time(h, m, s).strftime('%H:%M:%S')
+                self.assert_(xp, rs)
 
         # change xlim
         ax.set_xlim('1:30', '5:00')
@@ -629,7 +620,10 @@ class TestTSPlot(unittest.TestCase):
         for t, l in zip(ticks, labels):
             m, s = divmod(int(t), 60)
             h, m = divmod(m, 60)
-            self.assert_(time(h, m, s).strftime('%H:%M:%S') == t.get_text())
+            xp = l.get_text()
+            if len(xp) > 0:
+                rs = time(h, m, s).strftime('%H:%M:%S')
+                self.assert_(xp, rs)
 
 PNG_PATH = 'tmp.png'
 def _check_plot_works(f, freq=None, series=None, *args, **kwargs):
