commit 03284f30085e0c964cfdeb6834465a2fbae844ed
Author: jreback <jeff@reback.net>
Date:   Tue Feb 11 20:01:17 2014 -0500

    API: add in IndexSlice indexer shortcut

diff --git a/doc/source/indexing.rst b/doc/source/indexing.rst
index 2b1b238a0..521aebb6f 100644
--- a/doc/source/indexing.rst
+++ b/doc/source/indexing.rst
@@ -1785,6 +1785,13 @@ axes at the same time.
    dfmi.loc[(slice(None),slice(None), ['C1','C3']),(slice(None),'foo')]
    dfmi.loc[df[('a','foo')]>200,slice(None), ['C1','C3']),(slice(None),'foo')]
 
+You can use a ``pd.IndexSlice`` to shortcut the creation of these slices
+
+.. ipython:: python
+
+   idx = pd.IndexSlice
+   dfmi.loc[idx[:,:,['C1','C3']],idx[:,'foo']]
+
 Furthermore you can *set* the values using these methods
 
 .. ipython:: python
diff --git a/doc/source/v0.14.0.txt b/doc/source/v0.14.0.txt
index 5aa21710b..2dfb0eeb6 100644
--- a/doc/source/v0.14.0.txt
+++ b/doc/source/v0.14.0.txt
@@ -99,6 +99,13 @@ axes at the same time.
    df.loc[(slice(None),slice(None), ['C1','C3']),(slice(None),'foo')]
    df.loc[df[('a','foo')]>200,slice(None), ['C1','C3']),(slice(None),'foo')]
 
+You can use a ``pd.IndexSlice`` to shortcut the creation of these slices
+
+.. ipython:: python
+
+   idx = pd.IndexSlice
+   df.loc[idx[:,:,['C1','C3']],idx[:,'foo']]
+
 Furthermore you can *set* the values using these methods
 
 .. ipython:: python
diff --git a/pandas/core/api.py b/pandas/core/api.py
index b36c9f749..4d8d4dcda 100644
--- a/pandas/core/api.py
+++ b/pandas/core/api.py
@@ -19,6 +19,7 @@ from pandas.core.reshape import (pivot_simple as pivot, get_dummies,
 
 WidePanel = Panel
 
+from pandas.core.indexing import IndexSlice
 from pandas.tseries.offsets import DateOffset
 from pandas.tseries.tools import to_datetime
 from pandas.tseries.index import (DatetimeIndex, Timestamp,
diff --git a/pandas/core/indexing.py b/pandas/core/indexing.py
index 45ec528e6..e4707274e 100644
--- a/pandas/core/indexing.py
+++ b/pandas/core/indexing.py
@@ -12,7 +12,6 @@ import pandas.lib as lib
 
 import numpy as np
 
-
 # the supported indexers
 def get_indexers_list():
 
@@ -27,6 +26,11 @@ def get_indexers_list():
 # "null slice"
 _NS = slice(None, None)
 
+# the public IndexSlicerMaker
+class _IndexSlice(object):
+    def __getitem__(self, arg):
+        return arg
+IndexSlice = _IndexSlice()
 
 class IndexingError(Exception):
     pass
diff --git a/pandas/tests/test_indexing.py b/pandas/tests/test_indexing.py
index f5d2adbb0..e099e24e4 100644
--- a/pandas/tests/test_indexing.py
+++ b/pandas/tests/test_indexing.py
@@ -1152,6 +1152,9 @@ class TestIndexing(tm.TestCase):
 
     def test_per_axis_per_level_getitem_doc_examples(self):
 
+        # test index maker
+        idx = pd.IndexSlice
+
         # from indexing.rst / advanced
         def mklbl(prefix,n):
             return ["%s%s" % (prefix,i)  for i in range(n)]
@@ -1170,11 +1173,15 @@ class TestIndexing(tm.TestCase):
         expected = df.loc[[ tuple([a,b,c,d]) for a,b,c,d in df.index.values if (
             a == 'A1' or a == 'A2' or a == 'A3') and (c == 'C1' or c == 'C3')]]
         assert_frame_equal(result, expected)
+        result = df.loc[idx['A1':'A3',:,['C1','C3']],:]
+        assert_frame_equal(result, expected)
 
         result = df.loc[(slice(None),slice(None), ['C1','C3']),:]
         expected = df.loc[[ tuple([a,b,c,d]) for a,b,c,d in df.index.values if (
             c == 'C1' or c == 'C3')]]
         assert_frame_equal(result, expected)
+        result = df.loc[idx[:,:,['C1','C3']],:]
+        assert_frame_equal(result, expected)
 
         # not sorted
         def f():
@@ -1187,6 +1194,9 @@ class TestIndexing(tm.TestCase):
 
     def test_per_axis_per_level_setitem(self):
 
+        # test index maker
+        idx = pd.IndexSlice
+
         # test multi-index slicing with per axis and per index controls
         index = MultiIndex.from_tuples([('A',1),('A',2),('A',3),('B',1)],
                                        names=['one','two'])
@@ -1242,6 +1252,12 @@ class TestIndexing(tm.TestCase):
         expected.iloc[[0,3],[1,3]] = 100
         assert_frame_equal(df, expected)
 
+        df = df_orig.copy()
+        df.loc[idx[:,1],idx[:,['foo']]] = 100
+        expected = df_orig.copy()
+        expected.iloc[[0,3],[1,3]] = 100
+        assert_frame_equal(df, expected)
+
         df = df_orig.copy()
         df.loc['A','a'] = 100
         expected = df_orig.copy()
