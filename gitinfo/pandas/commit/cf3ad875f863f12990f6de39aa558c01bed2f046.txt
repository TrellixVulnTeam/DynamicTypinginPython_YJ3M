commit cf3ad875f863f12990f6de39aa558c01bed2f046
Author: Saurav Chakravorty <sauravchakravorty@gmail.com>
Date:   Fri Feb 8 08:21:20 2019 +0530

    DOC: exclude autogenerated c/cpp/html files from 'trailing whitespace' checks (#24549)

diff --git a/ci/code_checks.sh b/ci/code_checks.sh
index d0dea72d6..5c9d20e48 100755
--- a/ci/code_checks.sh
+++ b/ci/code_checks.sh
@@ -93,7 +93,7 @@ if [[ -z "$CHECK" || "$CHECK" == "lint" ]]; then
     # this particular codebase (e.g. src/headers, src/klib, src/msgpack). However,
     # we can lint all header files since they aren't "generated" like C files are.
     MSG='Linting .c and .h' ; echo $MSG
-    cpplint --quiet --extensions=c,h --headers=h --recursive --filter=-readability/casting,-runtime/int,-build/include_subdir pandas/_libs/src/*.h pandas/_libs/src/parser pandas/_libs/ujson pandas/_libs/tslibs/src/datetime
+    cpplint --quiet --extensions=c,h --headers=h --recursive --filter=-readability/casting,-runtime/int,-build/include_subdir pandas/_libs/src/*.h pandas/_libs/src/parser pandas/_libs/ujson pandas/_libs/tslibs/src/datetime pandas/io/msgpack pandas/_libs/*.cpp pandas/util
     RET=$(($RET + $?)) ; echo $MSG "DONE"
 
     echo "isort --version-number"
@@ -174,9 +174,10 @@ if [[ -z "$CHECK" || "$CHECK" == "patterns" ]]; then
     MSG='Check that no file in the repo contains tailing whitespaces' ; echo $MSG
     set -o pipefail
     if [[ "$AZURE" == "true" ]]; then
-        ! grep -n --exclude="*.svg" -RI "\s$" * | awk -F ":" '{print "##vso[task.logissue type=error;sourcepath=" $1 ";linenumber=" $2 ";] Tailing whitespaces found: " $3}'
+        # we exclude all c/cpp files as the c/cpp files of pandas code base are tested when Linting .c and .h files
+        ! grep -n '--exclude=*.'{svg,c,cpp,html} -RI "\s$" * | awk -F ":" '{print "##vso[task.logissue type=error;sourcepath=" $1 ";linenumber=" $2 ";] Tailing whitespaces found: " $3}'
     else
-        ! grep -n --exclude="*.svg" -RI "\s$" * | awk -F ":" '{print $1 ":" $2 ":Tailing whitespaces found: " $3}'
+        ! grep -n '--exclude=*.'{svg,c,cpp,html}  -RI "\s$" * | awk -F ":" '{print $1 ":" $2 ":Tailing whitespaces found: " $3}'
     fi
     RET=$(($RET + $?)) ; echo $MSG "DONE"
 fi
diff --git a/pandas/util/move.c b/pandas/util/move.c
index 62860adb1..9bb662d50 100644
--- a/pandas/util/move.c
+++ b/pandas/util/move.c
@@ -1,3 +1,12 @@
+/*
+Copyright (c) 2019, PyData Development Team
+All rights reserved.
+
+Distributed under the terms of the BSD Simplified License.
+
+The full license is in the LICENSE file, distributed with this software.
+*/
+
 #include <Python.h>
 
 #define COMPILING_IN_PY2 (PY_VERSION_HEX <= 0x03000000)
@@ -31,15 +40,13 @@ typedef struct {
 static PyTypeObject stolenbuf_type;  /* forward declare type */
 
 static void
-stolenbuf_dealloc(stolenbufobject *self)
-{
+stolenbuf_dealloc(stolenbufobject *self) {
     Py_DECREF(self->invalid_bytes);
     PyObject_Del(self);
 }
 
 static int
-stolenbuf_getbuffer(stolenbufobject *self, Py_buffer *view, int flags)
-{
+stolenbuf_getbuffer(stolenbufobject *self, Py_buffer *view, int flags) {
     return PyBuffer_FillInfo(view,
                              (PyObject*) self,
                              (void*) PyString_AS_STRING(self->invalid_bytes),
@@ -51,8 +58,8 @@ stolenbuf_getbuffer(stolenbufobject *self, Py_buffer *view, int flags)
 #if COMPILING_IN_PY2
 
 static Py_ssize_t
-stolenbuf_getreadwritebuf(stolenbufobject *self, Py_ssize_t segment, void **out)
-{
+stolenbuf_getreadwritebuf(stolenbufobject *self,
+                          Py_ssize_t segment, void **out) {
     if (segment != 0) {
         PyErr_SetString(PyExc_SystemError,
                         "accessing non-existent string segment");
@@ -63,8 +70,7 @@ stolenbuf_getreadwritebuf(stolenbufobject *self, Py_ssize_t segment, void **out)
 }
 
 static Py_ssize_t
-stolenbuf_getsegcount(stolenbufobject *self, Py_ssize_t *len)
-{
+stolenbuf_getsegcount(stolenbufobject *self, Py_ssize_t *len) {
     if (len) {
         *len = PyString_GET_SIZE(self->invalid_bytes);
     }
@@ -157,8 +163,7 @@ PyDoc_STRVAR(
    however, if called through *unpacking like ``stolenbuf(*(a,))`` it would
    only have the one reference (the tuple). */
 static PyObject*
-move_into_mutable_buffer(PyObject *self, PyObject *bytes_rvalue)
-{
+move_into_mutable_buffer(PyObject *self, PyObject *bytes_rvalue) {
     stolenbufobject *ret;
 
     if (!PyString_CheckExact(bytes_rvalue)) {
