commit f0ba498f71a9aed5b9cfda6ad6099fe9e7292cda
Author: Gregory Rome <gwrome@gmail.com>
Date:   Sat Mar 30 14:21:17 2019 -0500

    #25790 Updating type hints to Python3 syntax in pandas/core/array (#25829)

diff --git a/pandas/core/arrays/array_.py b/pandas/core/arrays/array_.py
index 37e6c3f23..f54955744 100644
--- a/pandas/core/arrays/array_.py
+++ b/pandas/core/arrays/array_.py
@@ -7,13 +7,13 @@ from pandas._libs import lib, tslibs
 from pandas.core.dtypes.common import (
     is_datetime64_ns_dtype, is_extension_array_dtype, is_timedelta64_ns_dtype)
 from pandas.core.dtypes.dtypes import ExtensionDtype, registry
+from pandas.core.dtypes.generic import ABCExtensionArray
 
 
-def array(data,         # type: Sequence[object]
-          dtype=None,   # type: Optional[Union[str, np.dtype, ExtensionDtype]]
-          copy=True,    # type: bool
-          ):
-    # type: (...) -> ExtensionArray
+def array(data: Sequence[object],
+          dtype: Optional[Union[str, np.dtype, ExtensionDtype]] = None,
+          copy: bool = True,
+          ) -> ABCExtensionArray:
     """
     Create an array.
 
diff --git a/pandas/core/arrays/base.py b/pandas/core/arrays/base.py
index 79ccdb3a3..44662ce83 100644
--- a/pandas/core/arrays/base.py
+++ b/pandas/core/arrays/base.py
@@ -17,7 +17,8 @@ from pandas.util._decorators import Appender, Substitution
 
 from pandas.core.dtypes.common import is_list_like
 from pandas.core.dtypes.dtypes import ExtensionDtype
-from pandas.core.dtypes.generic import ABCIndexClass, ABCSeries
+from pandas.core.dtypes.generic import (
+    ABCExtensionArray, ABCIndexClass, ABCSeries)
 from pandas.core.dtypes.missing import isna
 
 from pandas.core import ops
@@ -214,8 +215,7 @@ class ExtensionArray(object):
         """
         raise AbstractMethodError(self)
 
-    def __setitem__(self, key, value):
-        # type: (Union[int, np.ndarray], Any) -> None
+    def __setitem__(self, key: Union[int, np.ndarray], value: Any) -> None:
         """
         Set one or more values inplace.
 
@@ -262,8 +262,7 @@ class ExtensionArray(object):
             type(self), '__setitem__')
         )
 
-    def __len__(self):
-        # type: () -> int
+    def __len__(self) -> int:
         """
         Length of this array
 
@@ -287,32 +286,28 @@ class ExtensionArray(object):
     # Required attributes
     # ------------------------------------------------------------------------
     @property
-    def dtype(self):
-        # type: () -> ExtensionDtype
+    def dtype(self) -> ExtensionDtype:
         """
         An instance of 'ExtensionDtype'.
         """
         raise AbstractMethodError(self)
 
     @property
-    def shape(self):
-        # type: () -> Tuple[int, ...]
+    def shape(self) -> Tuple[int, ...]:
         """
         Return a tuple of the array dimensions.
         """
         return (len(self),)
 
     @property
-    def ndim(self):
-        # type: () -> int
+    def ndim(self) -> int:
         """
         Extension Arrays are only allowed to be 1-dimensional.
         """
         return 1
 
     @property
-    def nbytes(self):
-        # type: () -> int
+    def nbytes(self) -> int:
         """
         The number of bytes needed to store this object in memory.
         """
@@ -343,8 +338,7 @@ class ExtensionArray(object):
         """
         return np.array(self, dtype=dtype, copy=copy)
 
-    def isna(self):
-        # type: () -> Union[ExtensionArray, np.ndarray]
+    def isna(self) -> Union[ABCExtensionArray, np.ndarray]:
         """
         A 1-D array indicating if each value is missing.
 
@@ -366,8 +360,7 @@ class ExtensionArray(object):
         """
         raise AbstractMethodError(self)
 
-    def _values_for_argsort(self):
-        # type: () -> np.ndarray
+    def _values_for_argsort(self) -> np.ndarray:
         """
         Return values for sorting.
 
@@ -482,8 +475,11 @@ class ExtensionArray(object):
         """
         return self[~self.isna()]
 
-    def shift(self, periods=1, fill_value=None):
-        # type: (int, object) -> ExtensionArray
+    def shift(
+            self,
+            periods: int = 1,
+            fill_value: object = None,
+    ) -> ABCExtensionArray:
         """
         Shift values by desired number.
 
@@ -598,8 +594,7 @@ class ExtensionArray(object):
         arr = self.astype(object)
         return arr.searchsorted(value, side=side, sorter=sorter)
 
-    def _values_for_factorize(self):
-        # type: () -> Tuple[np.ndarray, Any]
+    def _values_for_factorize(self) -> Tuple[np.ndarray, Any]:
         """
         Return an array and missing value suitable for factorization.
 
@@ -623,8 +618,10 @@ class ExtensionArray(object):
         """
         return self.astype(object), np.nan
 
-    def factorize(self, na_sentinel=-1):
-        # type: (int) -> Tuple[np.ndarray, ExtensionArray]
+    def factorize(
+            self,
+            na_sentinel: int = -1,
+    ) -> Tuple[np.ndarray, ABCExtensionArray]:
         """
         Encode the extension array as an enumerated type.
 
@@ -726,8 +723,12 @@ class ExtensionArray(object):
     # Indexing methods
     # ------------------------------------------------------------------------
 
-    def take(self, indices, allow_fill=False, fill_value=None):
-        # type: (Sequence[int], bool, Optional[Any]) -> ExtensionArray
+    def take(
+            self,
+            indices: Sequence[int],
+            allow_fill: bool = False,
+            fill_value: Any = None
+    ) -> ABCExtensionArray:
         """
         Take elements from an array.
 
@@ -816,8 +817,7 @@ class ExtensionArray(object):
         # pandas.api.extensions.take
         raise AbstractMethodError(self)
 
-    def copy(self, deep=False):
-        # type: (bool) -> ExtensionArray
+    def copy(self, deep: bool = False) -> ABCExtensionArray:
         """
         Return a copy of the array.
 
@@ -853,8 +853,10 @@ class ExtensionArray(object):
                                length=len(self),
                                dtype=self.dtype)
 
-    def _formatter(self, boxed=False):
-        # type: (bool) -> Callable[[Any], Optional[str]]
+    def _formatter(
+            self,
+            boxed: bool = False,
+    ) -> Callable[[Any], Optional[str]]:
         """Formatting function for scalar values.
 
         This is used in the default '__repr__'. The returned formatting
@@ -881,8 +883,7 @@ class ExtensionArray(object):
             return str
         return repr
 
-    def _formatting_values(self):
-        # type: () -> np.ndarray
+    def _formatting_values(self) -> np.ndarray:
         # At the moment, this has to be an array since we use result.dtype
         """
         An array of values to be printed in, e.g. the Series repr
@@ -898,8 +899,10 @@ class ExtensionArray(object):
     # ------------------------------------------------------------------------
 
     @classmethod
-    def _concat_same_type(cls, to_concat):
-        # type: (Sequence[ExtensionArray]) -> ExtensionArray
+    def _concat_same_type(
+            cls,
+            to_concat: Sequence[ABCExtensionArray]
+    ) -> ABCExtensionArray:
         """
         Concatenate multiple array
 
@@ -921,8 +924,7 @@ class ExtensionArray(object):
     _can_hold_na = True
 
     @property
-    def _ndarray_values(self):
-        # type: () -> np.ndarray
+    def _ndarray_values(self) -> np.ndarray:
         """
         Internal pandas method for lossy conversion to a NumPy ndarray.
 
diff --git a/pandas/core/arrays/datetimelike.py b/pandas/core/arrays/datetimelike.py
index 4a6f04103..e1e6e2c3e 100644
--- a/pandas/core/arrays/datetimelike.py
+++ b/pandas/core/arrays/datetimelike.py
@@ -1,7 +1,7 @@
 # -*- coding: utf-8 -*-
 from datetime import datetime, timedelta
 import operator
-from typing import Any, Sequence, Tuple, Union
+from typing import Any, Sequence, Tuple, Type, Union
 import warnings
 
 import numpy as np
@@ -57,8 +57,7 @@ class AttributesMixin(object):
         return {k: getattr(self, k, None) for k in self._attributes}
 
     @property
-    def _scalar_type(self):
-        # type: () -> Union[type, Tuple[type]]
+    def _scalar_type(self) -> Union[Type, Tuple[Type]]:
         """The scalar associated with this datelike
 
         * PeriodArray : Period
@@ -67,8 +66,10 @@ class AttributesMixin(object):
         """
         raise AbstractMethodError(self)
 
-    def _scalar_from_string(self, value):
-        # type: (str) -> Union[Period, Timestamp, Timedelta, NaTType]
+    def _scalar_from_string(
+            self,
+            value: str,
+    ) -> Union[Period, Timestamp, Timedelta, NaTType]:
         """
         Construct a scalar type from a string.
 
@@ -88,8 +89,10 @@ class AttributesMixin(object):
         """
         raise AbstractMethodError(self)
 
-    def _unbox_scalar(self, value):
-        # type: (Union[Period, Timestamp, Timedelta, NaTType]) -> int
+    def _unbox_scalar(
+            self,
+            value: Union[Period, Timestamp, Timedelta, NaTType],
+    ) -> int:
         """
         Unbox the integer value of a scalar `value`.
 
@@ -108,8 +111,10 @@ class AttributesMixin(object):
         """
         raise AbstractMethodError(self)
 
-    def _check_compatible_with(self, other):
-        # type: (Union[Period, Timestamp, Timedelta, NaTType]) -> None
+    def _check_compatible_with(
+            self,
+            other: Union[Period, Timestamp, Timedelta, NaTType],
+    ) -> None:
         """
         Verify that `self` and `other` are compatible.
 
@@ -349,8 +354,7 @@ class DatetimeLikeArrayMixin(ExtensionOpsMixin,
         return (self._box_func(v) for v in self.asi8)
 
     @property
-    def asi8(self):
-        # type: () -> np.ndarray
+    def asi8(self) -> np.ndarray:
         """
         Integer representation of the values.
 
@@ -401,8 +405,7 @@ class DatetimeLikeArrayMixin(ExtensionOpsMixin,
         return (len(self),)
 
     @property
-    def size(self):
-        # type: () -> int
+    def size(self) -> int:
         """The number of elements in this array."""
         return np.prod(self.shape)
 
@@ -460,10 +463,9 @@ class DatetimeLikeArrayMixin(ExtensionOpsMixin,
 
     def __setitem__(
             self,
-            key,    # type: Union[int, Sequence[int], Sequence[bool], slice]
-            value,  # type: Union[NaTType, Any, Sequence[Any]]
-    ):
-        # type: (...) -> None
+            key: Union[int, Sequence[int], Sequence[bool], slice],
+            value: Union[NaTType, Any, Sequence[Any]]
+    ) -> None:
         # I'm fudging the types a bit here. "Any" above really depends
         # on type(self). For PeriodArray, it's Period (or stuff coercible
         # to a period in from_sequence). For DatetimeArray, it's Timestamp...
diff --git a/pandas/core/arrays/datetimes.py b/pandas/core/arrays/datetimes.py
index d1aa8cefb..a1857f7bd 100644
--- a/pandas/core/arrays/datetimes.py
+++ b/pandas/core/arrays/datetimes.py
@@ -511,8 +511,7 @@ class DatetimeArray(dtl.DatetimeLikeArrayMixin,
         return lambda x: Timestamp(x, freq=self.freq, tz=self.tz)
 
     @property
-    def dtype(self):
-        # type: () -> Union[np.dtype, DatetimeTZDtype]
+    def dtype(self) -> Union[np.dtype, DatetimeTZDtype]:
         """
         The dtype for the DatetimeArray.
 
diff --git a/pandas/core/arrays/integer.py b/pandas/core/arrays/integer.py
index 4519931ff..bbacfa307 100644
--- a/pandas/core/arrays/integer.py
+++ b/pandas/core/arrays/integer.py
@@ -452,8 +452,7 @@ class IntegerArray(ExtensionArray, ExtensionOpsMixin):
         return astype_nansafe(data, dtype, copy=None)
 
     @property
-    def _ndarray_values(self):
-        # type: () -> np.ndarray
+    def _ndarray_values(self) -> np.ndarray:
         """Internal pandas method for lossy conversion to a NumPy ndarray.
 
         This method is not part of the pandas interface.
@@ -509,8 +508,7 @@ class IntegerArray(ExtensionArray, ExtensionOpsMixin):
 
         return Series(array, index=index)
 
-    def _values_for_argsort(self):
-        # type: () -> np.ndarray
+    def _values_for_argsort(self) -> np.ndarray:
         """Return values for sorting.
 
         Returns
diff --git a/pandas/core/arrays/period.py b/pandas/core/arrays/period.py
index a48621d8f..70312f2e6 100644
--- a/pandas/core/arrays/period.py
+++ b/pandas/core/arrays/period.py
@@ -20,7 +20,7 @@ from pandas.core.dtypes.common import (
     is_list_like, is_period_dtype, pandas_dtype)
 from pandas.core.dtypes.dtypes import PeriodDtype
 from pandas.core.dtypes.generic import (
-    ABCDataFrame, ABCIndexClass, ABCPeriodIndex, ABCSeries)
+    ABCDataFrame, ABCIndexClass, ABCPeriodArray, ABCPeriodIndex, ABCSeries)
 from pandas.core.dtypes.missing import isna, notna
 
 import pandas.core.algorithms as algos
@@ -183,8 +183,12 @@ class PeriodArray(dtl.DatetimeLikeArrayMixin, dtl.DatelikeOps):
         return cls(values, freq=freq, **kwargs)
 
     @classmethod
-    def _from_sequence(cls, scalars, dtype=None, copy=False):
-        # type: (Sequence[Optional[Period]], PeriodDtype, bool) -> PeriodArray
+    def _from_sequence(
+            cls,
+            scalars: Sequence[Optional[Period]],
+            dtype: PeriodDtype = None,
+            copy: bool = False,
+    ) -> ABCPeriodArray:
         if dtype:
             freq = dtype.freq
         else:
@@ -246,8 +250,7 @@ class PeriodArray(dtl.DatetimeLikeArrayMixin, dtl.DatelikeOps):
     # -----------------------------------------------------------------
     # DatetimeLike Interface
 
-    def _unbox_scalar(self, value):
-        # type: (Union[Period, NaTType]) -> int
+    def _unbox_scalar(self, value: Union[Period, NaTType]) -> int:
         if value is NaT:
             return value.value
         elif isinstance(value, self._scalar_type):
@@ -258,8 +261,7 @@ class PeriodArray(dtl.DatetimeLikeArrayMixin, dtl.DatelikeOps):
             raise ValueError("'value' should be a Period. Got '{val}' instead."
                              .format(val=value))
 
-    def _scalar_from_string(self, value):
-        # type: (str) -> Period
+    def _scalar_from_string(self, value: str) -> Period:
         return Period(value, freq=self.freq)
 
     def _check_compatible_with(self, other):
@@ -540,14 +542,9 @@ class PeriodArray(dtl.DatetimeLikeArrayMixin, dtl.DatelikeOps):
     @Appender(dtl.DatetimeLikeArrayMixin._addsub_int_array.__doc__)
     def _addsub_int_array(
             self,
-            other,      # type: Union[ExtensionArray, np.ndarray[int]]
-            op          # type: Callable[Any, Any]
-    ):
-        # type: (...) -> PeriodArray
-
-        # TODO: ABCIndexClass is a valid type for other but had to be excluded
-        # due to length of Py2 compatability comment; add back in once migrated
-        # to Py3 syntax
+            other: Union[ExtensionArray, np.ndarray, ABCIndexClass],
+            op: Callable[[Any], Any]
+    ) -> ABCPeriodArray:
         assert op in [operator.add, operator.sub]
         if op is operator.sub:
             other = -other
@@ -716,8 +713,11 @@ def _raise_on_incompatible(left, right):
 # -------------------------------------------------------------------
 # Constructor Helpers
 
-def period_array(data, freq=None, copy=False):
-    # type: (Sequence[Optional[Period]], Optional[Tick], bool) -> PeriodArray
+def period_array(
+        data: Sequence[Optional[Period]],
+        freq: Optional[Tick] = None,
+        copy: bool = False,
+) -> PeriodArray:
     """
     Construct a new PeriodArray from a sequence of Period scalars.
 
diff --git a/pandas/core/arrays/sparse.py b/pandas/core/arrays/sparse.py
index b807382b6..3d18255e7 100644
--- a/pandas/core/arrays/sparse.py
+++ b/pandas/core/arrays/sparse.py
@@ -4,7 +4,7 @@ SparseArray data structure
 import numbers
 import operator
 import re
-from typing import Any, Callable, Union
+from typing import Any, Callable, Type, Union
 import warnings
 
 import numpy as np
@@ -27,7 +27,7 @@ from pandas.core.dtypes.common import (
     pandas_dtype)
 from pandas.core.dtypes.dtypes import register_extension_dtype
 from pandas.core.dtypes.generic import (
-    ABCIndexClass, ABCSeries, ABCSparseSeries)
+    ABCIndexClass, ABCSeries, ABCSparseArray, ABCSparseSeries)
 from pandas.core.dtypes.missing import isna, na_value_for_dtype, notna
 
 from pandas.core.accessor import PandasDelegate, delegate_names
@@ -77,8 +77,11 @@ class SparseDtype(ExtensionDtype):
     # hash(nan) is (sometimes?) 0.
     _metadata = ('_dtype', '_fill_value', '_is_na_fill_value')
 
-    def __init__(self, dtype=np.float64, fill_value=None):
-        # type: (Union[str, np.dtype, 'ExtensionDtype', type], Any) -> None
+    def __init__(
+            self,
+            dtype: Union[str, np.dtype, ExtensionDtype, Type] = np.float64,
+            fill_value: Any = None
+    ) -> None:
         from pandas.core.dtypes.missing import na_value_for_dtype
         from pandas.core.dtypes.common import (
             pandas_dtype, is_string_dtype, is_scalar
@@ -370,8 +373,7 @@ class SparseDtype(ExtensionDtype):
 _sparray_doc_kwargs = dict(klass='SparseArray')
 
 
-def _get_fill(arr):
-    # type: (SparseArray) -> np.ndarray
+def _get_fill(arr: ABCSparseArray) -> np.ndarray:
     """
     Create a 0-dim ndarray containing the fill value
 
@@ -395,8 +397,12 @@ def _get_fill(arr):
         return np.asarray(arr.fill_value)
 
 
-def _sparse_array_op(left, right, op, name):
-    # type: (SparseArray, SparseArray, Callable, str) -> Any
+def _sparse_array_op(
+        left: ABCSparseArray,
+        right: ABCSparseArray,
+        op: Callable,
+        name: str
+) -> Any:
     """
     Perform a binary operation between two arrays.
 
@@ -669,8 +675,12 @@ class SparseArray(PandasObject, ExtensionArray, ExtensionOpsMixin):
         self._dtype = SparseDtype(sparse_values.dtype, fill_value)
 
     @classmethod
-    def _simple_new(cls, sparse_array, sparse_index, dtype):
-        # type: (np.ndarray, SparseIndex, SparseDtype) -> 'SparseArray'
+    def _simple_new(
+            cls,
+            sparse_array: np.ndarray,
+            sparse_index: SparseIndex,
+            dtype: SparseDtype
+    ) -> ABCSparseArray:
         new = cls([])
         new._sparse_index = sparse_index
         new._sparse_values = sparse_array
