commit 1cae09c27f816cd67df15f6774df181052a189f7
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jan 23 18:42:03 2012 -0500

    ENH: can pass sequence of integers to DataFrame.{irow/icol} and Series.iget, GH #654"

diff --git a/RELEASE.rst b/RELEASE.rst
index 630e912bb..57bc42bcf 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -157,6 +157,8 @@ pandas 0.7.0
     console-formatted DataFrames (can read the row of index names, etc.)
   - Can pass list of group labels (without having to convert to an ndarray
     yourself) to ``groupby`` in some cases (GH #659)
+  - Use ``kind`` argument to Series.order for selecting different sort kinds
+    (GH #668)
 
 **Bug fixes**
 
@@ -225,6 +227,7 @@ pandas 0.7.0
   - Could not create a new column in a DataFrame from a list of tuples
   - Fix bugs preventing SparseDataFrame and SparseSeries working with groupby
     (GH #666)
+  - Use sort kind in Series.sort / argsort (GH #668)
 
 Thanks
 ------
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 3f019fc1a..c2aeaa9c3 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -1220,38 +1220,48 @@ class DataFrame(NDFrame):
 
     def irow(self, i):
         """
-        Retrieve the i-th row of the DataFrame by location as a Series. Can
-        also pass a slice object
+        Retrieve the i-th row or rows of the DataFrame by location
 
         Parameters
         ----------
-        i : int or slice
+        i : int, slice, or sequence of integers
+
+        Notes
+        -----
+        If slice passed, the resulting data will be a view
 
         Returns
         -------
-        row : Series
+        row : Series (int) or DataFrame (slice, sequence)
         """
         if isinstance(i, slice):
             return self[i]
         else:
             label = self.index[i]
-            return self.xs(label)
+            if isinstance(label, Index):
+                return self.reindex(label)
+            else:
+                return self.xs(label)
 
     def icol(self, i):
         """
-        Retrieve the i-th column of the DataFrame by location as a Series. Can
-        also pass a slice object
+        Retrieve the i-th column or columns of the DataFrame by location
 
         Parameters
         ----------
-        i : int or slice
+        i : int, slice, or sequence of integers
+
+        Notes
+        -----
+        If slice passed, the resulting data will be a view
 
         Returns
         -------
-        column : Series
+        column : Series (int) or DataFrame (slice, sequence)
         """
         label = self.columns[i]
         if isinstance(i, slice):
+            # need to return view
             lab_slice = slice(label[0], label[-1])
             return self.ix[:, lab_slice]
         else:
diff --git a/pandas/core/series.py b/pandas/core/series.py
index a65e3df27..cf3d8b881 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -483,21 +483,24 @@ copy : boolean, default False
 
     def iget_value(self, i):
         """
-        Return the i-th value in the Series by location
+        Return the i-th value or values in the Series by location
 
         Parameters
         ----------
-        i : int or slice
+        i : int, slice, or sequence of integers
 
         Returns
         -------
-        value : scalar
+        value : scalar (int) or Series (slice, sequence)
         """
         if isinstance(i, slice):
             return self[i]
         else:
             label = self.index[i]
-            return self[label]
+            if isinstance(label, Index):
+                return self.reindex(label)
+            else:
+                return self[label]
 
     iget = iget_value
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index b181330ff..138a95770 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -847,6 +847,17 @@ class CheckIndexing(object):
         expected = df.ix[8:14]
         assert_frame_equal(result, expected)
 
+        # verify slice is view
+        result[2] = 0.
+        exp_col = df[2].copy()
+        exp_col[4:8] = 0.
+        assert_series_equal(df[2], exp_col)
+
+        # list of integers
+        result = df.irow([1, 2, 4, 6])
+        expected = df.reindex(df.index[[1, 2, 4, 6]])
+        assert_frame_equal(result, expected)
+
     def test_icol(self):
         df = DataFrame(np.random.randn(4, 10), columns=range(0, 20, 2))
 
@@ -863,6 +874,15 @@ class CheckIndexing(object):
         expected = df.ix[:, 8:14]
         assert_frame_equal(result, expected)
 
+        # verify slice is view
+        result[8] = 0.
+        self.assert_((df[8] == 0).all())
+
+        # list of integers
+        result = df.icol([1, 2, 4, 6])
+        expected = df.reindex(columns=df.columns[[1, 2, 4, 6]])
+        assert_frame_equal(result, expected)
+
     def test_iget_value(self):
         for i, row in enumerate(self.frame.index):
             for j, col in enumerate(self.frame.columns):
diff --git a/pandas/tests/test_series.py b/pandas/tests/test_series.py
index 2944f84a8..aba50e42d 100644
--- a/pandas/tests/test_series.py
+++ b/pandas/tests/test_series.py
@@ -342,6 +342,15 @@ class TestSeries(unittest.TestCase, CheckNameIntegration):
         expected = s.ix[2:4]
         assert_series_equal(result, expected)
 
+        # test slice is a view
+        result[:] = 0
+        self.assert_((s[1:3] == 0).all())
+
+        # list of integers
+        result = s.iget([0, 2, 3, 4, 5])
+        expected = s.reindex(s.index[[0, 2, 3, 4, 5]])
+        assert_series_equal(result, expected)
+
     def test_getitem_regression(self):
         s = Series(range(5), index=range(5))
         result = s[range(5)]
