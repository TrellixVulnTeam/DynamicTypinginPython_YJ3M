commit 80a2d530bae32ef7ecf93aa275d17659ee8e8ac1
Author: Manuel Leonhardt <skycaptain@users.noreply.github.com>
Date:   Mon Nov 16 17:37:56 2015 +0100

    BUG: fix col iteration in DataFrame.round, #11611
    
    BUG: decimals must be unique indexed, #11618
    
    BUG: Added test, added whatsnew entry, #11618
    
    TST: move round testing to test_format.py

diff --git a/doc/source/whatsnew/v0.17.1.txt b/doc/source/whatsnew/v0.17.1.txt
index cdfc90d84..ca20d2705 100755
--- a/doc/source/whatsnew/v0.17.1.txt
+++ b/doc/source/whatsnew/v0.17.1.txt
@@ -191,7 +191,11 @@ Bug Fixes
 - Bug in the link-time error caused by C ``inline`` functions on FreeBSD 10+ (with ``clang``) (:issue:`10510`)
 - Bug in ``DataFrame.to_csv`` in passing through arguments for formatting ``MultiIndexes``, including ``date_format`` (:issue:`7791`)
 - Bug in ``DataFrame.join()`` with ``how='right'`` producing a ``TypeError`` (:issue:`11519`)
+
 - Bug in ``Series.quantile`` with empty list results has ``Index`` with ``object`` dtype (:issue:`11588`)
 - Bug in ``pd.merge`` results in empty ``Int64Index`` rather than ``Index(dtype=object)`` when the merge result is empty (:issue:`11588`)
 - Bug in ``Categorical.remove_unused_categories`` when having ``NaN`` values (:issue:`11599`)
 - Bug in ``DataFrame.to_sparse()`` loses column names for MultiIndexes (:issue:`11600`)
+
+- Bug in ``DataFrame.round()`` with non-unique column index producing a Fatal Python error (:issue:`11611`)
+- Bug in ``DataFrame.round()`` with ``decimals`` being a non-unique indexed Series producing extra columns (:issue:`11618`)
diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 64a166390..15a840ff3 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -4380,17 +4380,20 @@ class DataFrame(NDFrame):
         from pandas.tools.merge import concat
 
         def _dict_round(df, decimals):
-            for col in df:
+            for col, vals in df.iteritems():
                 try:
-                    yield np.round(df[col], decimals[col])
+                    yield np.round(vals, decimals[col])
                 except KeyError:
-                    yield df[col]
+                    yield vals
 
         if isinstance(decimals, (dict, Series)):
+            if isinstance(decimals, Series):
+                if not decimals.index.is_unique:
+                    raise ValueError("Index of decimals must be unique")
             new_cols = [col for col in _dict_round(self, decimals)]
         elif com.is_integer(decimals):
             # Dispatch to numpy.round
-            new_cols = [np.round(self[col], decimals) for col in self]
+            new_cols = [np.round(v, decimals) for _, v in self.iteritems()]
         else:
             raise TypeError("decimals must be an integer, a dict-like or a Series")
 
diff --git a/pandas/tests/test_format.py b/pandas/tests/test_format.py
index 22555a84c..c076ef047 100644
--- a/pandas/tests/test_format.py
+++ b/pandas/tests/test_format.py
@@ -3079,6 +3079,19 @@ $1$,$2$
         # Make sure this doesn't break existing Series.round
         tm.assert_series_equal(df['col1'].round(1), expected_rounded['col1'])
 
+    def test_round_issue(self):
+        # GH11611
+
+        df = pd.DataFrame(np.random.random([3, 3]), columns=['A', 'B', 'C'],
+                          index=['first', 'second', 'third'])
+
+        dfs = pd.concat((df, df), axis=1)
+        rounded = dfs.round()
+        self.assertTrue(rounded.index.equals(dfs.index))
+
+        decimals = pd.Series([1, 0, 2], index=['A', 'B', 'A'])
+        self.assertRaises(ValueError, df.round, decimals)
+
 class TestSeriesFormatting(tm.TestCase):
     _multiprocess_can_split_ = True
 
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 0f6c6f0a6..5c4fa5a2e 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -15859,7 +15859,6 @@ starting,ending,measure
                                    dtype='int64')
         tm.assert_panel_equal(result, expected)
 
-
 def skip_if_no_ne(engine='numexpr'):
     if engine == 'numexpr':
         try:
