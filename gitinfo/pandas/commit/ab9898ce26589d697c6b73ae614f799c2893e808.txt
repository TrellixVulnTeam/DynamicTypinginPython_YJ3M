commit ab9898ce26589d697c6b73ae614f799c2893e808
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Wed Feb 15 20:27:09 2012 -0500

    BUG: handle list of Series properly, close #792

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index de42c07d6..0461cf8c0 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -298,12 +298,16 @@ class DataFrame(NDFrame):
                                          copy=copy)
         elif isinstance(data, list):
             if len(data) > 0:
-                if isinstance(data[0], (list, tuple)):
-                    data, columns = _list_to_sdict(data, columns)
-                    mgr = self._init_dict(data, index, columns, dtype=dtype)
-                elif isinstance(data[0], dict):
-                    data, columns = _list_of_dict_to_sdict(data, columns)
-                    mgr = self._init_dict(data, index, columns, dtype=dtype)
+                if isinstance(data[0], (list, tuple, dict, Series)):
+                    conv_data, columns = _to_sdict(data, columns)
+                    if isinstance(conv_data, dict):
+                        if len(conv_data) == 0 and index is None:
+                            index = np.arange(len(data))
+                        mgr = self._init_dict(conv_data, index, columns,
+                                              dtype=dtype)
+                    else:
+                        mgr = self._init_ndarray(conv_data, index, columns,
+                                                 dtype=dtype, copy=copy)
                 else:
                     mgr = self._init_ndarray(data, index, columns, dtype=dtype,
                                              copy=copy)
@@ -4040,6 +4044,16 @@ def _rec_to_dict(arr):
     return columns, sdict
 
 
+def _to_sdict(data, columns):
+    if isinstance(data[0], (list, tuple)):
+        return _list_to_sdict(data, columns)
+    elif isinstance(data[0], dict):
+        return _list_of_dict_to_sdict(data, columns)
+    elif isinstance(data[0], Series):
+        return _list_of_series_to_sdict(data, columns)
+    else:  # pragma: no cover
+        raise TypeError('No logic to handle %s type' % type(data[0]))
+
 def _list_to_sdict(data, columns):
     if len(data) > 0 and isinstance(data[0], tuple):
         content = list(lib.to_object_array_tuples(data).T)
@@ -4052,6 +4066,20 @@ def _list_to_sdict(data, columns):
         return {}, columns
     return _convert_object_array(content, columns)
 
+def _list_of_series_to_sdict(data, columns):
+    from pandas.core.index import _get_combined_index
+
+    if columns is None:
+        columns = _get_combined_index([s.index for s in data])
+
+    values = np.vstack([s.reindex(columns, copy=False).values
+                        for s in data])
+
+    if values.dtype == np.object_:
+        content = list(values.T)
+        return _convert_object_array(content, columns)
+    else:
+        return values, columns
 
 def _list_of_dict_to_sdict(data, columns):
     if columns is None:
diff --git a/pandas/core/panel.py b/pandas/core/panel.py
index 65bbbcf83..4010abc52 100644
--- a/pandas/core/panel.py
+++ b/pandas/core/panel.py
@@ -60,8 +60,9 @@ def panel_index(time, panels, names=['time', 'panel']):
     >>> panels = ['A', 'B', 'C']
     >>> panel_idx = panel_index(years, panels)
     >>> panel_idx
-    MultiIndex([(1960, 'A'), (1961, 'A'), (1962, 'A'), (1960, 'B'), (1961, 'B'),
-       (1962, 'B'), (1960, 'C'), (1961, 'C'), (1962, 'C')], dtype=object)
+    MultiIndex([(1960, 'A'), (1961, 'A'), (1962, 'A'), (1960, 'B'),
+                (1961, 'B'), (1962, 'B'), (1960, 'C'), (1961, 'C'),
+                (1962, 'C')], dtype=object)
 
     or
 
@@ -70,8 +71,9 @@ def panel_index(time, panels, names=['time', 'panel']):
     >>> panels = np.tile(['A', 'B', 'C'], 3)
     >>> panel_idx = panel_index(years, panels)
     >>> panel_idx
-    MultiIndex([(1960, 'A'), (1960, 'B'), (1960, 'C'), (1961, 'A'), (1961, 'B'),
-       (1961, 'C'), (1962, 'A'), (1962, 'B'), (1962, 'C')], dtype=object)
+    MultiIndex([(1960, 'A'), (1960, 'B'), (1960, 'C'), (1961, 'A'),
+                (1961, 'B'), (1961, 'C'), (1962, 'A'), (1962, 'B'),
+                (1962, 'C')], dtype=object)
     """
     time, panels = _ensure_like_indices(time, panels)
     time_factor = Factor(time)
@@ -458,12 +460,12 @@ class Panel(NDFrame):
 
     def to_excel(self, path, na_rep=''):
         """
-        Write each DataFrame in Panel to a separate excel sheet 
+        Write each DataFrame in Panel to a separate excel sheet
 
         Parameters
         ----------
         excel_writer : string or ExcelWriter object
-            File path or existing ExcelWriter 
+            File path or existing ExcelWriter
         na_rep : string, default ''
             Missing data rep'n
         """
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 858c89911..7f5d1cd10 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1505,9 +1505,31 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         assert_frame_equal(result, expected.reindex(result.index))
 
         result = DataFrame([{}])
-        expected = DataFrame([])
+        expected = DataFrame(index=[0])
         assert_frame_equal(result, expected)
 
+    def test_constructor_list_of_series(self):
+        data = [{'a': 1.5, 'b': 3, 'c':4, 'd':6},
+                {'a': 1.5, 'b': 3, 'd':6},
+                {'a': 1.5, 'd':6},
+                {},
+                {'a': 1.5, 'b': 3, 'c':4},
+                {'b': 3, 'c':4, 'd':6}]
+        data = [Series(d) for d in data]
+
+        result = DataFrame(data)
+        expected = DataFrame.from_dict(dict(zip(range(len(data)), data)),
+                                       orient='index')
+        assert_frame_equal(result, expected.reindex(result.index))
+
+        result2 = DataFrame(data, index=np.arange(6))
+        assert_frame_equal(result, result2)
+
+        result = DataFrame([Series({})])
+        expected = DataFrame(index=[0])
+        assert_frame_equal(result, expected)
+
+
     def test_constructor_ragged(self):
         data = {'A' : randn(10),
                 'B' : randn(8)}
diff --git a/vb_suite/groupby.py b/vb_suite/groupby.py
index 0ebd320ba..1c8475211 100644
--- a/vb_suite/groupby.py
+++ b/vb_suite/groupby.py
@@ -91,3 +91,10 @@ groupby_multi_different_functions = \
                                                    'value2' : 'var',
                                                    'value3' : 'sum'})""",
               setup, start_date=datetime(2011, 9, 1))
+
+groupby_multi_different_numpy_functions = \
+    Benchmark("""df.groupby(['key1', 'key2']).agg({'value1' : np.mean,
+                                                   'value2' : np.var,
+                                                   'value3' : np.sum})""",
+              setup, start_date=datetime(2011, 9, 1))
+
