commit 7351b435975188ef0f645b2529751b2a51fc1cde
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Wed Jan 10 04:58:23 2018 -0800

    simplify CBMonth.apply to remove roll_monthday (#19146)

diff --git a/pandas/_libs/tslibs/offsets.pyx b/pandas/_libs/tslibs/offsets.pyx
index 585c904a6..1dea41801 100644
--- a/pandas/_libs/tslibs/offsets.pyx
+++ b/pandas/_libs/tslibs/offsets.pyx
@@ -847,29 +847,6 @@ cpdef int roll_convention(int other, int n, int compare):
     return n
 
 
-cpdef int roll_monthday(datetime other, int n, datetime compare):
-    """
-    Possibly increment or decrement the number of periods to shift
-    based on rollforward/rollbackward conventions.
-
-    Parameters
-    ----------
-    other : datetime
-    n : number of periods to increment, before adjusting for rolling
-    compare : datetime
-
-    Returns
-    -------
-    n : int number of periods to increment
-    """
-    if n > 0 and other < compare:
-        n -= 1
-    elif n <= 0 and other > compare:
-        # as if rolled forward already
-        n += 1
-    return n
-
-
 cpdef int roll_qtrday(datetime other, int n, int month, object day_opt,
                       int modby=3) except? -1:
     """
diff --git a/pandas/tests/tseries/offsets/test_liboffsets.py b/pandas/tests/tseries/offsets/test_liboffsets.py
index 1e0ecc390..a31a79d2f 100644
--- a/pandas/tests/tseries/offsets/test_liboffsets.py
+++ b/pandas/tests/tseries/offsets/test_liboffsets.py
@@ -156,22 +156,6 @@ def test_roll_qtrday():
     assert roll_qtrday(other, n, month, 'business_end', modby=3) == n
 
 
-def test_roll_monthday():
-    other = Timestamp('2017-12-29', tz='US/Pacific')
-    before = Timestamp('2017-12-01', tz='US/Pacific')
-    after = Timestamp('2017-12-31', tz='US/Pacific')
-
-    n = 42
-    assert liboffsets.roll_monthday(other, n, other) == n
-    assert liboffsets.roll_monthday(other, n, before) == n
-    assert liboffsets.roll_monthday(other, n, after) == n - 1
-
-    n = -4
-    assert liboffsets.roll_monthday(other, n, other) == n
-    assert liboffsets.roll_monthday(other, n, before) == n + 1
-    assert liboffsets.roll_monthday(other, n, after) == n
-
-
 def test_roll_convention():
     other = 29
     before = 1
diff --git a/pandas/tseries/offsets.py b/pandas/tseries/offsets.py
index 7c5fe2f03..3c842affd 100644
--- a/pandas/tseries/offsets.py
+++ b/pandas/tseries/offsets.py
@@ -1039,55 +1039,62 @@ class _CustomBusinessMonth(_CustomMixin, BusinessMixin, MonthOffset):
         _CustomMixin.__init__(self, weekmask, holidays, calendar)
 
     @cache_readonly
-    def cbday(self):
-        kwds = self.kwds
-        return CustomBusinessDay(n=self.n, normalize=self.normalize, **kwds)
+    def cbday_roll(self):
+        """Define default roll function to be called in apply method"""
+        cbday = CustomBusinessDay(n=self.n, normalize=False, **self.kwds)
+
+        if self._prefix.endswith('S'):
+            # MonthBegin
+            roll_func = cbday.rollforward
+        else:
+            # MonthEnd
+            roll_func = cbday.rollback
+        return roll_func
 
     @cache_readonly
     def m_offset(self):
         if self._prefix.endswith('S'):
-            # MonthBegin:
-            return MonthBegin(n=1, normalize=self.normalize)
+            # MonthBegin
+            moff = MonthBegin(n=1, normalize=False)
         else:
             # MonthEnd
-            return MonthEnd(n=1, normalize=self.normalize)
+            moff = MonthEnd(n=1, normalize=False)
+        return moff
 
-
-class CustomBusinessMonthEnd(_CustomBusinessMonth):
-    __doc__ = _CustomBusinessMonth.__doc__.replace('[BEGIN/END]', 'end')
-    _prefix = 'CBM'
+    @cache_readonly
+    def month_roll(self):
+        """Define default roll function to be called in apply method"""
+        if self._prefix.endswith('S'):
+            # MonthBegin
+            roll_func = self.m_offset.rollback
+        else:
+            # MonthEnd
+            roll_func = self.m_offset.rollforward
+        return roll_func
 
     @apply_wraps
     def apply(self, other):
         # First move to month offset
-        cur_mend = self.m_offset.rollforward(other)
+        cur_month_offset_date = self.month_roll(other)
 
         # Find this custom month offset
-        compare_date = self.cbday.rollback(cur_mend)
-        n = liboffsets.roll_monthday(other, self.n, compare_date)
+        compare_date = self.cbday_roll(cur_month_offset_date)
+        n = liboffsets.roll_convention(other.day, self.n, compare_date.day)
 
-        new = cur_mend + n * self.m_offset
-        result = self.cbday.rollback(new)
+        new = cur_month_offset_date + n * self.m_offset
+        result = self.cbday_roll(new)
         return result
 
 
+class CustomBusinessMonthEnd(_CustomBusinessMonth):
+    __doc__ = _CustomBusinessMonth.__doc__.replace('[BEGIN/END]', 'end')
+    _prefix = 'CBM'
+
+
 class CustomBusinessMonthBegin(_CustomBusinessMonth):
     __doc__ = _CustomBusinessMonth.__doc__.replace('[BEGIN/END]', 'beginning')
     _prefix = 'CBMS'
 
-    @apply_wraps
-    def apply(self, other):
-        # First move to month offset
-        cur_mbegin = self.m_offset.rollback(other)
-
-        # Find this custom month offset
-        compare_date = self.cbday.rollforward(cur_mbegin)
-        n = liboffsets.roll_monthday(other, self.n, compare_date)
-
-        new = cur_mbegin + n * self.m_offset
-        result = self.cbday.rollforward(new)
-        return result
-
 
 # ---------------------------------------------------------------------
 # Semi-Month Based Offset Classes
