commit bef9baedafc83df47963f2c4f4e7e465ece44342
Author: Simon Hawkins <simonjayhawkins@gmail.com>
Date:   Tue Oct 22 22:27:28 2019 +0100

    TYPING : Series.name -> Optional[Hashable] (#29164)
    
    * TYPING : Series.name -> Optional[Hashable]

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index f2074bab2..a4d3e7058 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -871,7 +871,7 @@ class DataFrame(NDFrame):
         """
 
     @Appender(_shared_docs["items"])
-    def items(self) -> Iterable[Tuple[Hashable, Series]]:
+    def items(self) -> Iterable[Tuple[Optional[Hashable], Series]]:
         if self.columns.is_unique and hasattr(self, "_item_cache"):
             for k in self.columns:
                 yield k, self._get_item_cache(k)
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index 75bbfd9c1..d3c32511b 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -194,7 +194,7 @@ class NDFrame(PandasObject, SelectionMixin):
         # TODO(PY36): replace with _attrs : Dict[Hashable, Any]
         # We need the TYPE_CHECKING, because _attrs is not a class attribute
         # and Py35 doesn't support the new syntax.
-        _attrs = {}  # type: Dict[Hashable, Any]
+        _attrs = {}  # type: Dict[Optional[Hashable], Any]
 
     # ----------------------------------------------------------------------
     # Constructors
@@ -205,7 +205,7 @@ class NDFrame(PandasObject, SelectionMixin):
         axes: Optional[List[Index]] = None,
         copy: bool = False,
         dtype: Optional[Dtype] = None,
-        attrs: Optional[Mapping[Hashable, Any]] = None,
+        attrs: Optional[Mapping[Optional[Hashable], Any]] = None,
         fastpath: bool = False,
     ):
 
@@ -248,7 +248,7 @@ class NDFrame(PandasObject, SelectionMixin):
     # ----------------------------------------------------------------------
 
     @property
-    def attrs(self) -> Dict[Hashable, Any]:
+    def attrs(self) -> Dict[Optional[Hashable], Any]:
         """
         Dictionary of global attributes on this object.
         """
@@ -257,7 +257,7 @@ class NDFrame(PandasObject, SelectionMixin):
         return self._attrs
 
     @attrs.setter
-    def attrs(self, value: Mapping[Hashable, Any]) -> None:
+    def attrs(self, value: Mapping[Optional[Hashable], Any]) -> None:
         self._attrs = dict(value)
 
     @property
@@ -3149,10 +3149,10 @@ class NDFrame(PandasObject, SelectionMixin):
         sep: str = ",",
         na_rep: str = "",
         float_format: Optional[str] = None,
-        columns: Optional[Sequence[Hashable]] = None,
+        columns: Optional[Sequence[Optional[Hashable]]] = None,
         header: Union[bool_t, List[str]] = True,
         index: bool_t = True,
-        index_label: Optional[Union[bool_t, str, Sequence[Hashable]]] = None,
+        index_label: Optional[Union[bool_t, str, Sequence[Optional[Hashable]]]] = None,
         mode: str = "w",
         encoding: Optional[str] = None,
         compression: Optional[Union[str, Mapping[str, str]]] = "infer",
diff --git a/pandas/core/groupby/generic.py b/pandas/core/groupby/generic.py
index 5c7c56e2a..8ba9dbcc5 100644
--- a/pandas/core/groupby/generic.py
+++ b/pandas/core/groupby/generic.py
@@ -17,6 +17,7 @@ from typing import (
     FrozenSet,
     Hashable,
     Iterable,
+    Optional,
     Sequence,
     Tuple,
     Type,
@@ -142,7 +143,7 @@ def pin_whitelisted_properties(klass: Type[FrameOrSeries], whitelist: FrozenSet[
 class SeriesGroupBy(GroupBy):
     _apply_whitelist = base.series_apply_whitelist
 
-    def _iterate_slices(self) -> Iterable[Tuple[Hashable, Series]]:
+    def _iterate_slices(self) -> Iterable[Tuple[Optional[Hashable], Series]]:
         yield self._selection_name, self._selected_obj
 
     @property
@@ -926,7 +927,7 @@ class DataFrameGroupBy(GroupBy):
 
     agg = aggregate
 
-    def _iterate_slices(self) -> Iterable[Tuple[Hashable, Series]]:
+    def _iterate_slices(self) -> Iterable[Tuple[Optional[Hashable], Series]]:
         obj = self._selected_obj
         if self.axis == 1:
             obj = obj.T
diff --git a/pandas/core/groupby/groupby.py b/pandas/core/groupby/groupby.py
index f88f2e21b..7d1c74e41 100644
--- a/pandas/core/groupby/groupby.py
+++ b/pandas/core/groupby/groupby.py
@@ -745,7 +745,7 @@ b  2""",
             keys, values, not_indexed_same=mutated or self.mutated
         )
 
-    def _iterate_slices(self) -> Iterable[Tuple[Hashable, Series]]:
+    def _iterate_slices(self) -> Iterable[Tuple[Optional[Hashable], Series]]:
         raise AbstractMethodError(self)
 
     def transform(self, func, *args, **kwargs):
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 5f1a7624f..3e9d3d5c0 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -5,7 +5,7 @@ from collections import OrderedDict
 from io import StringIO
 from shutil import get_terminal_size
 from textwrap import dedent
-from typing import Any, Callable, Hashable, List
+from typing import Any, Callable, Hashable, List, Optional
 import warnings
 
 import numpy as np
@@ -472,11 +472,11 @@ class Series(base.IndexOpsMixin, generic.NDFrame):
         return self._data.dtype
 
     @property
-    def name(self) -> Hashable:
+    def name(self) -> Optional[Hashable]:
         return self.attrs.get("name", None)
 
     @name.setter
-    def name(self, value: Hashable) -> None:
+    def name(self, value: Optional[Hashable]) -> None:
         if not is_hashable(value):
             raise TypeError("Series.name must be a hashable type")
         self.attrs["name"] = value
