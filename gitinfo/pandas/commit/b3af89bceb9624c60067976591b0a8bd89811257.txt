commit b3af89bceb9624c60067976591b0a8bd89811257
Author: Chang She <chang@lambdafoundry.com>
Date:   Mon Sep 24 17:35:51 2012 -0400

    ENH: between_time across midnight #1871

diff --git a/RELEASE.rst b/RELEASE.rst
index 7ba7900b7..4ca5f34f3 100644
--- a/RELEASE.rst
+++ b/RELEASE.rst
@@ -56,6 +56,7 @@ pandas 0.9.0
     (dropping both columns and rows) (#924)
   - Improve DataFrame.to_html output for hierarchically-indexed rows (do not
     repeat levels) (#1929)
+  - TimeSeries.between_time can now select times across midnight (#1871)
 
 **API Changes**
 
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index ef3d8f743..be7193418 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -1,4 +1,5 @@
 # pylint: disable=E1101
+import operator
 
 from datetime import time, datetime
 from datetime import timedelta
@@ -1358,18 +1359,25 @@ class DatetimeIndex(Int64Index):
         start_micros = _time_to_micros(start_time)
         end_micros = _time_to_micros(end_time)
 
+
         if include_start and include_end:
-            mask = ((start_micros <= time_micros) &
-                    (time_micros <= end_micros))
+            lop = rop = operator.le
         elif include_start:
-            mask = ((start_micros <= time_micros) &
-                    (time_micros < end_micros))
+            lop = operator.le
+            rop = operator.lt
         elif include_end:
-            mask = ((start_micros < time_micros) &
-                    (time_micros <= end_micros))
+            lop = operator.lt
+            rop = operator.le
+        else:
+            lop = rop = operator.lt
+
+        if start_time <= end_time:
+            join_op = operator.and_
         else:
-            mask = ((start_micros < time_micros) &
-                    (time_micros < end_micros))
+            join_op = operator.or_
+
+        mask = join_op(lop(start_micros, time_micros),
+                       rop(time_micros, end_micros))
 
         return mask.nonzero()[0]
 
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 39922e521..29a128e63 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -879,6 +879,34 @@ class TestTimeSeries(unittest.TestCase):
         expected = ts.between_time(stime, etime)
         assert_series_equal(result, expected)
 
+        #across midnight
+        rng = date_range('1/1/2000', '1/5/2000', freq='5min')
+        ts = Series(np.random.randn(len(rng)), index=rng)
+        stime = time(22, 0)
+        etime = time(9, 0)
+
+        close_open = itertools.product([True, False], [True, False])
+        for inc_start, inc_end in close_open:
+            filtered = ts.between_time(stime, etime, inc_start, inc_end)
+            exp_len = (12 * 11 + 1) * 4 + 1
+            if not inc_start:
+                exp_len -= 4
+            if not inc_end:
+                exp_len -= 4
+
+            self.assert_(len(filtered) == exp_len)
+            for rs in filtered.index:
+                t = rs.time()
+                if inc_start:
+                    self.assert_((t >= stime) or (t <= etime))
+                else:
+                    self.assert_((t > stime) or (t <= etime))
+
+                if inc_end:
+                    self.assert_((t <= etime) or (t >= stime))
+                else:
+                    self.assert_((t < etime) or (t >= stime))
+
     def test_dti_constructor_preserve_dti_freq(self):
         rng = date_range('1/1/2000', '1/2/2000', freq='5min')
 
