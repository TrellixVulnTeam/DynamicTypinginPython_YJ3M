commit 967bd957195fa0c1331e4bd24d56f3c0042f304a
Author: Paul <leeyspaul@users.noreply.github.com>
Date:   Tue Jul 9 14:00:11 2019 -0700

    PERF: Suppress ix warnings benchmarks (#27304)

diff --git a/asv_bench/benchmarks/frame_methods.py b/asv_bench/benchmarks/frame_methods.py
index af4741f94..5008b77d9 100644
--- a/asv_bench/benchmarks/frame_methods.py
+++ b/asv_bench/benchmarks/frame_methods.py
@@ -1,3 +1,4 @@
+import warnings
 import string
 
 import numpy as np
@@ -320,9 +321,10 @@ class Dropna:
 
     def setup(self, how, axis):
         self.df = DataFrame(np.random.randn(10000, 1000))
-        self.df.ix[50:1000, 20:50] = np.nan
-        self.df.ix[2000:3000] = np.nan
-        self.df.ix[:, 60:70] = np.nan
+        with warnings.catch_warnings(record=True):
+            self.df.ix[50:1000, 20:50] = np.nan
+            self.df.ix[2000:3000] = np.nan
+            self.df.ix[:, 60:70] = np.nan
         self.df_mixed = self.df.copy()
         self.df_mixed["foo"] = "bar"
 
@@ -340,9 +342,10 @@ class Count:
 
     def setup(self, axis):
         self.df = DataFrame(np.random.randn(10000, 1000))
-        self.df.ix[50:1000, 20:50] = np.nan
-        self.df.ix[2000:3000] = np.nan
-        self.df.ix[:, 60:70] = np.nan
+        with warnings.catch_warnings(record=True):
+            self.df.ix[50:1000, 20:50] = np.nan
+            self.df.ix[2000:3000] = np.nan
+            self.df.ix[:, 60:70] = np.nan
         self.df_mixed = self.df.copy()
         self.df_mixed["foo"] = "bar"
 
@@ -561,7 +564,8 @@ class GetDtypeCounts:
         self.df = DataFrame(np.random.randn(10, 10000))
 
     def time_frame_get_dtype_counts(self):
-        self.df.get_dtype_counts()
+        with warnings.catch_warnings(record=True):
+            self.df.get_dtype_counts()
 
     def time_info(self):
         self.df.info()
diff --git a/asv_bench/benchmarks/indexing.py b/asv_bench/benchmarks/indexing.py
index eb730f91b..720bd0245 100644
--- a/asv_bench/benchmarks/indexing.py
+++ b/asv_bench/benchmarks/indexing.py
@@ -67,16 +67,20 @@ class NumericSeriesIndexing:
         self.data.iloc[:800000]
 
     def time_ix_array(self, index, index_structure):
-        self.data.ix[self.array]
+        with warnings.catch_warnings(record=True):
+            self.data.ix[self.array]
 
     def time_ix_list_like(self, index, index_structure):
-        self.data.ix[[800000]]
+        with warnings.catch_warnings(record=True):
+            self.data.ix[[800000]]
 
     def time_ix_scalar(self, index, index_structure):
-        self.data.ix[800000]
+        with warnings.catch_warnings(record=True):
+            self.data.ix[800000]
 
     def time_ix_slice(self, index, index_structure):
-        self.data.ix[:800000]
+        with warnings.catch_warnings(record=True):
+            self.data.ix[:800000]
 
     def time_loc_array(self, index, index_structure):
         self.data.loc[self.array]
@@ -140,7 +144,8 @@ class DataFrameStringIndexing:
     def setup(self):
         index = tm.makeStringIndex(1000)
         columns = tm.makeStringIndex(30)
-        self.df = DataFrame(np.random.randn(1000, 30), index=index, columns=columns)
+        with warnings.catch_warnings(record=True):
+            self.df = DataFrame(np.random.randn(1000, 30), index=index, columns=columns)
         self.idx_scalar = index[100]
         self.col_scalar = columns[10]
         self.bool_indexer = self.df[self.col_scalar] > 0
@@ -151,7 +156,8 @@ class DataFrameStringIndexing:
             self.df.get_value(self.idx_scalar, self.col_scalar)
 
     def time_ix(self):
-        self.df.ix[self.idx_scalar, self.col_scalar]
+        with warnings.catch_warnings(record=True):
+            self.df.ix[self.idx_scalar, self.col_scalar]
 
     def time_loc(self):
         self.df.loc[self.idx_scalar, self.col_scalar]
@@ -215,24 +221,27 @@ class MultiIndexing:
         self.df = DataFrame(self.s)
 
         n = 100000
-        self.mdt = DataFrame(
-            {
-                "A": np.random.choice(range(10000, 45000, 1000), n),
-                "B": np.random.choice(range(10, 400), n),
-                "C": np.random.choice(range(1, 150), n),
-                "D": np.random.choice(range(10000, 45000), n),
-                "x": np.random.choice(range(400), n),
-                "y": np.random.choice(range(25), n),
-            }
-        )
+        with warnings.catch_warnings(record=True):
+            self.mdt = DataFrame(
+                {
+                    "A": np.random.choice(range(10000, 45000, 1000), n),
+                    "B": np.random.choice(range(10, 400), n),
+                    "C": np.random.choice(range(1, 150), n),
+                    "D": np.random.choice(range(10000, 45000), n),
+                    "x": np.random.choice(range(400), n),
+                    "y": np.random.choice(range(25), n),
+                }
+            )
         self.idx = IndexSlice[20000:30000, 20:30, 35:45, 30000:40000]
         self.mdt = self.mdt.set_index(["A", "B", "C", "D"]).sort_index()
 
     def time_series_ix(self):
-        self.s.ix[999]
+        with warnings.catch_warnings(record=True):
+            self.s.ix[999]
 
     def time_frame_ix(self):
-        self.df.ix[999]
+        with warnings.catch_warnings(record=True):
+            self.df.ix[999]
 
     def time_index_slice(self):
         self.mdt.loc[self.idx, :]
@@ -309,7 +318,8 @@ class MethodLookup:
         s.iloc
 
     def time_lookup_ix(self, s):
-        s.ix
+        with warnings.catch_warnings(record=True):
+            s.ix
 
     def time_lookup_loc(self, s):
         s.loc
diff --git a/asv_bench/benchmarks/io/msgpack.py b/asv_bench/benchmarks/io/msgpack.py
index c43df7c2e..d97b4ae13 100644
--- a/asv_bench/benchmarks/io/msgpack.py
+++ b/asv_bench/benchmarks/io/msgpack.py
@@ -1,3 +1,4 @@
+import warnings
 import numpy as np
 from pandas import DataFrame, date_range, read_msgpack
 import pandas.util.testing as tm
@@ -16,7 +17,8 @@ class MSGPack(BaseIO):
             index=date_range("20000101", periods=N, freq="H"),
         )
         self.df["object"] = tm.makeStringIndex(N)
-        self.df.to_msgpack(self.fname)
+        with warnings.catch_warnings(record=True):
+            self.df.to_msgpack(self.fname)
 
     def time_read_msgpack(self):
         read_msgpack(self.fname)
diff --git a/pandas/core/generic.py b/pandas/core/generic.py
index b79bde9cc..5db06d328 100644
--- a/pandas/core/generic.py
+++ b/pandas/core/generic.py
@@ -5603,6 +5603,7 @@ class NDFrame(PandasObject, SelectionMixin):
             FutureWarning,
             stacklevel=2,
         )
+
         from pandas import Series
 
         return Series(self._data.get_dtype_counts())
