commit c863d2b07a6e8b1f2b627e3cd18989b4dcd5e9c2
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Wed Mar 25 16:53:25 2020 -0700

    REF: CategoricalIndex indexing tests (#33018)

diff --git a/pandas/tests/indexes/categorical/test_category.py b/pandas/tests/indexes/categorical/test_category.py
index 956258239..6e8e81230 100644
--- a/pandas/tests/indexes/categorical/test_category.py
+++ b/pandas/tests/indexes/categorical/test_category.py
@@ -1,8 +1,6 @@
 import numpy as np
 import pytest
 
-import pandas._config.config as cf
-
 from pandas._libs import index as libindex
 
 from pandas.core.dtypes.dtypes import CategoricalDtype
@@ -100,65 +98,6 @@ class TestCategoricalIndex(Base):
         with pytest.raises(ValueError, match=msg):
             ci.set_categories(list("cab"), inplace=True)
 
-    def test_contains(self):
-
-        ci = self.create_index(categories=list("cabdef"))
-
-        assert "a" in ci
-        assert "z" not in ci
-        assert "e" not in ci
-        assert np.nan not in ci
-
-        # assert codes NOT in index
-        assert 0 not in ci
-        assert 1 not in ci
-
-        ci = CategoricalIndex(list("aabbca") + [np.nan], categories=list("cabdef"))
-        assert np.nan in ci
-
-    @pytest.mark.parametrize(
-        "item, expected",
-        [
-            (pd.Interval(0, 1), True),
-            (1.5, True),
-            (pd.Interval(0.5, 1.5), False),
-            ("a", False),
-            (pd.Timestamp(1), False),
-            (pd.Timedelta(1), False),
-        ],
-        ids=str,
-    )
-    def test_contains_interval(self, item, expected):
-        # GH 23705
-        ci = CategoricalIndex(IntervalIndex.from_breaks(range(3)))
-        result = item in ci
-        assert result is expected
-
-    def test_contains_list(self):
-        # GH#21729
-        idx = pd.CategoricalIndex([1, 2, 3])
-
-        assert "a" not in idx
-
-        with pytest.raises(TypeError, match="unhashable type"):
-            ["a"] in idx
-
-        with pytest.raises(TypeError, match="unhashable type"):
-            ["a", "b"] in idx
-
-    @pytest.mark.parametrize("klass", [list, tuple, np.array, pd.Series])
-    def test_where(self, klass):
-        i = self.create_index()
-        cond = [True] * len(i)
-        expected = i
-        result = i.where(klass(cond))
-        tm.assert_index_equal(result, expected)
-
-        cond = [False] + [True] * (len(i) - 1)
-        expected = CategoricalIndex([np.nan] + i[1:].tolist(), categories=i.categories)
-        result = i.where(klass(cond))
-        tm.assert_index_equal(result, expected)
-
     def test_append(self):
 
         ci = self.create_index()
@@ -503,106 +442,6 @@ class TestCategoricalIndex(Base):
         expected = "   A\na  1\nb  2\nc  3"
         assert result == expected
 
-    def test_string_categorical_index_repr(self):
-        # short
-        idx = pd.CategoricalIndex(["a", "bb", "ccc"])
-        expected = """CategoricalIndex(['a', 'bb', 'ccc'], categories=['a', 'bb', 'ccc'], ordered=False, dtype='category')"""  # noqa
-        assert repr(idx) == expected
-
-        # multiple lines
-        idx = pd.CategoricalIndex(["a", "bb", "ccc"] * 10)
-        expected = """CategoricalIndex(['a', 'bb', 'ccc', 'a', 'bb', 'ccc', 'a', 'bb', 'ccc', 'a',
-                  'bb', 'ccc', 'a', 'bb', 'ccc', 'a', 'bb', 'ccc', 'a', 'bb',
-                  'ccc', 'a', 'bb', 'ccc', 'a', 'bb', 'ccc', 'a', 'bb', 'ccc'],
-                 categories=['a', 'bb', 'ccc'], ordered=False, dtype='category')"""  # noqa
-
-        assert repr(idx) == expected
-
-        # truncated
-        idx = pd.CategoricalIndex(["a", "bb", "ccc"] * 100)
-        expected = """CategoricalIndex(['a', 'bb', 'ccc', 'a', 'bb', 'ccc', 'a', 'bb', 'ccc', 'a',
-                  ...
-                  'ccc', 'a', 'bb', 'ccc', 'a', 'bb', 'ccc', 'a', 'bb', 'ccc'],
-                 categories=['a', 'bb', 'ccc'], ordered=False, dtype='category', length=300)"""  # noqa
-
-        assert repr(idx) == expected
-
-        # larger categories
-        idx = pd.CategoricalIndex(list("abcdefghijklmmo"))
-        expected = """CategoricalIndex(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',
-                  'm', 'm', 'o'],
-                 categories=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', ...], ordered=False, dtype='category')"""  # noqa
-
-        assert repr(idx) == expected
-
-        # short
-        idx = pd.CategoricalIndex(["あ", "いい", "ううう"])
-        expected = """CategoricalIndex(['あ', 'いい', 'ううう'], categories=['あ', 'いい', 'ううう'], ordered=False, dtype='category')"""  # noqa
-        assert repr(idx) == expected
-
-        # multiple lines
-        idx = pd.CategoricalIndex(["あ", "いい", "ううう"] * 10)
-        expected = """CategoricalIndex(['あ', 'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ',
-                  'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい',
-                  'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう'],
-                 categories=['あ', 'いい', 'ううう'], ordered=False, dtype='category')"""  # noqa
-
-        assert repr(idx) == expected
-
-        # truncated
-        idx = pd.CategoricalIndex(["あ", "いい", "ううう"] * 100)
-        expected = """CategoricalIndex(['あ', 'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ',
-                  ...
-                  'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう'],
-                 categories=['あ', 'いい', 'ううう'], ordered=False, dtype='category', length=300)"""  # noqa
-
-        assert repr(idx) == expected
-
-        # larger categories
-        idx = pd.CategoricalIndex(list("あいうえおかきくけこさしすせそ"))
-        expected = """CategoricalIndex(['あ', 'い', 'う', 'え', 'お', 'か', 'き', 'く', 'け', 'こ', 'さ', 'し',
-                  'す', 'せ', 'そ'],
-                 categories=['あ', 'い', 'う', 'え', 'お', 'か', 'き', 'く', ...], ordered=False, dtype='category')"""  # noqa
-
-        assert repr(idx) == expected
-
-        # Emable Unicode option -----------------------------------------
-        with cf.option_context("display.unicode.east_asian_width", True):
-
-            # short
-            idx = pd.CategoricalIndex(["あ", "いい", "ううう"])
-            expected = """CategoricalIndex(['あ', 'いい', 'ううう'], categories=['あ', 'いい', 'ううう'], ordered=False, dtype='category')"""  # noqa
-            assert repr(idx) == expected
-
-            # multiple lines
-            idx = pd.CategoricalIndex(["あ", "いい", "ううう"] * 10)
-            expected = """CategoricalIndex(['あ', 'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい',
-                  'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう',
-                  'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい',
-                  'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう'],
-                 categories=['あ', 'いい', 'ううう'], ordered=False, dtype='category')"""  # noqa
-
-            assert repr(idx) == expected
-
-            # truncated
-            idx = pd.CategoricalIndex(["あ", "いい", "ううう"] * 100)
-            expected = """CategoricalIndex(['あ', 'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい',
-                  'ううう', 'あ',
-                  ...
-                  'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう',
-                  'あ', 'いい', 'ううう'],
-                 categories=['あ', 'いい', 'ううう'], ordered=False, dtype='category', length=300)"""  # noqa
-
-            assert repr(idx) == expected
-
-            # larger categories
-            idx = pd.CategoricalIndex(list("あいうえおかきくけこさしすせそ"))
-            expected = """CategoricalIndex(['あ', 'い', 'う', 'え', 'お', 'か', 'き', 'く', 'け', 'こ',
-                  'さ', 'し', 'す', 'せ', 'そ'],
-                 categories=['あ', 'い', 'う', 'え', 'お', 'か', 'き', 'く', ...], ordered=False, dtype='category')"""  # noqa
-
-            assert repr(idx) == expected
-
     def test_fillna_categorical(self):
         # GH 11343
         idx = CategoricalIndex([1.0, np.nan, 3.0, 1.0], name="x")
diff --git a/pandas/tests/indexes/categorical/test_formats.py b/pandas/tests/indexes/categorical/test_formats.py
new file mode 100644
index 000000000..a5607224f
--- /dev/null
+++ b/pandas/tests/indexes/categorical/test_formats.py
@@ -0,0 +1,108 @@
+"""
+Tests for CategoricalIndex.__repr__ and related methods.
+"""
+import pandas._config.config as cf
+
+import pandas as pd
+
+
+class TestCategoricalIndexRepr:
+    def test_string_categorical_index_repr(self):
+        # short
+        idx = pd.CategoricalIndex(["a", "bb", "ccc"])
+        expected = """CategoricalIndex(['a', 'bb', 'ccc'], categories=['a', 'bb', 'ccc'], ordered=False, dtype='category')"""  # noqa
+        assert repr(idx) == expected
+
+        # multiple lines
+        idx = pd.CategoricalIndex(["a", "bb", "ccc"] * 10)
+        expected = """CategoricalIndex(['a', 'bb', 'ccc', 'a', 'bb', 'ccc', 'a', 'bb', 'ccc', 'a',
+                  'bb', 'ccc', 'a', 'bb', 'ccc', 'a', 'bb', 'ccc', 'a', 'bb',
+                  'ccc', 'a', 'bb', 'ccc', 'a', 'bb', 'ccc', 'a', 'bb', 'ccc'],
+                 categories=['a', 'bb', 'ccc'], ordered=False, dtype='category')"""  # noqa
+
+        assert repr(idx) == expected
+
+        # truncated
+        idx = pd.CategoricalIndex(["a", "bb", "ccc"] * 100)
+        expected = """CategoricalIndex(['a', 'bb', 'ccc', 'a', 'bb', 'ccc', 'a', 'bb', 'ccc', 'a',
+                  ...
+                  'ccc', 'a', 'bb', 'ccc', 'a', 'bb', 'ccc', 'a', 'bb', 'ccc'],
+                 categories=['a', 'bb', 'ccc'], ordered=False, dtype='category', length=300)"""  # noqa
+
+        assert repr(idx) == expected
+
+        # larger categories
+        idx = pd.CategoricalIndex(list("abcdefghijklmmo"))
+        expected = """CategoricalIndex(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',
+                  'm', 'm', 'o'],
+                 categories=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', ...], ordered=False, dtype='category')"""  # noqa
+
+        assert repr(idx) == expected
+
+        # short
+        idx = pd.CategoricalIndex(["あ", "いい", "ううう"])
+        expected = """CategoricalIndex(['あ', 'いい', 'ううう'], categories=['あ', 'いい', 'ううう'], ordered=False, dtype='category')"""  # noqa
+        assert repr(idx) == expected
+
+        # multiple lines
+        idx = pd.CategoricalIndex(["あ", "いい", "ううう"] * 10)
+        expected = """CategoricalIndex(['あ', 'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ',
+                  'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい',
+                  'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう'],
+                 categories=['あ', 'いい', 'ううう'], ordered=False, dtype='category')"""  # noqa
+
+        assert repr(idx) == expected
+
+        # truncated
+        idx = pd.CategoricalIndex(["あ", "いい", "ううう"] * 100)
+        expected = """CategoricalIndex(['あ', 'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ',
+                  ...
+                  'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう'],
+                 categories=['あ', 'いい', 'ううう'], ordered=False, dtype='category', length=300)"""  # noqa
+
+        assert repr(idx) == expected
+
+        # larger categories
+        idx = pd.CategoricalIndex(list("あいうえおかきくけこさしすせそ"))
+        expected = """CategoricalIndex(['あ', 'い', 'う', 'え', 'お', 'か', 'き', 'く', 'け', 'こ', 'さ', 'し',
+                  'す', 'せ', 'そ'],
+                 categories=['あ', 'い', 'う', 'え', 'お', 'か', 'き', 'く', ...], ordered=False, dtype='category')"""  # noqa
+
+        assert repr(idx) == expected
+
+        # Emable Unicode option -----------------------------------------
+        with cf.option_context("display.unicode.east_asian_width", True):
+
+            # short
+            idx = pd.CategoricalIndex(["あ", "いい", "ううう"])
+            expected = """CategoricalIndex(['あ', 'いい', 'ううう'], categories=['あ', 'いい', 'ううう'], ordered=False, dtype='category')"""  # noqa
+            assert repr(idx) == expected
+
+            # multiple lines
+            idx = pd.CategoricalIndex(["あ", "いい", "ううう"] * 10)
+            expected = """CategoricalIndex(['あ', 'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい',
+                  'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう',
+                  'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい',
+                  'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう'],
+                 categories=['あ', 'いい', 'ううう'], ordered=False, dtype='category')"""  # noqa
+
+            assert repr(idx) == expected
+
+            # truncated
+            idx = pd.CategoricalIndex(["あ", "いい", "ううう"] * 100)
+            expected = """CategoricalIndex(['あ', 'いい', 'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい',
+                  'ううう', 'あ',
+                  ...
+                  'ううう', 'あ', 'いい', 'ううう', 'あ', 'いい', 'ううう',
+                  'あ', 'いい', 'ううう'],
+                 categories=['あ', 'いい', 'ううう'], ordered=False, dtype='category', length=300)"""  # noqa
+
+            assert repr(idx) == expected
+
+            # larger categories
+            idx = pd.CategoricalIndex(list("あいうえおかきくけこさしすせそ"))
+            expected = """CategoricalIndex(['あ', 'い', 'う', 'え', 'お', 'か', 'き', 'く', 'け', 'こ',
+                  'さ', 'し', 'す', 'せ', 'そ'],
+                 categories=['あ', 'い', 'う', 'え', 'お', 'か', 'き', 'く', ...], ordered=False, dtype='category')"""  # noqa
+
+            assert repr(idx) == expected
diff --git a/pandas/tests/indexes/categorical/test_indexing.py b/pandas/tests/indexes/categorical/test_indexing.py
index 1d41e17e3..a36568bbb 100644
--- a/pandas/tests/indexes/categorical/test_indexing.py
+++ b/pandas/tests/indexes/categorical/test_indexing.py
@@ -2,7 +2,7 @@ import numpy as np
 import pytest
 
 import pandas as pd
-from pandas import CategoricalIndex, Index
+from pandas import CategoricalIndex, Index, IntervalIndex
 import pandas._testing as tm
 
 
@@ -250,3 +250,67 @@ class TestGetIndexer:
         msg = "method='nearest' not implemented yet for CategoricalIndex"
         with pytest.raises(NotImplementedError, match=msg):
             idx2.get_indexer(idx1, method="nearest")
+
+
+class TestWhere:
+    @pytest.mark.parametrize("klass", [list, tuple, np.array, pd.Series])
+    def test_where(self, klass):
+        i = CategoricalIndex(list("aabbca"), categories=list("cab"), ordered=False)
+        cond = [True] * len(i)
+        expected = i
+        result = i.where(klass(cond))
+        tm.assert_index_equal(result, expected)
+
+        cond = [False] + [True] * (len(i) - 1)
+        expected = CategoricalIndex([np.nan] + i[1:].tolist(), categories=i.categories)
+        result = i.where(klass(cond))
+        tm.assert_index_equal(result, expected)
+
+
+class TestContains:
+    def test_contains(self):
+
+        ci = CategoricalIndex(list("aabbca"), categories=list("cabdef"), ordered=False)
+
+        assert "a" in ci
+        assert "z" not in ci
+        assert "e" not in ci
+        assert np.nan not in ci
+
+        # assert codes NOT in index
+        assert 0 not in ci
+        assert 1 not in ci
+
+    def test_contains_nan(self):
+        ci = CategoricalIndex(list("aabbca") + [np.nan], categories=list("cabdef"))
+        assert np.nan in ci
+
+    @pytest.mark.parametrize(
+        "item, expected",
+        [
+            (pd.Interval(0, 1), True),
+            (1.5, True),
+            (pd.Interval(0.5, 1.5), False),
+            ("a", False),
+            (pd.Timestamp(1), False),
+            (pd.Timedelta(1), False),
+        ],
+        ids=str,
+    )
+    def test_contains_interval(self, item, expected):
+        # GH 23705
+        ci = CategoricalIndex(IntervalIndex.from_breaks(range(3)))
+        result = item in ci
+        assert result is expected
+
+    def test_contains_list(self):
+        # GH#21729
+        idx = pd.CategoricalIndex([1, 2, 3])
+
+        assert "a" not in idx
+
+        with pytest.raises(TypeError, match="unhashable type"):
+            ["a"] in idx
+
+        with pytest.raises(TypeError, match="unhashable type"):
+            ["a", "b"] in idx
diff --git a/pandas/tests/indexes/multi/test_format.py b/pandas/tests/indexes/multi/test_formats.py
similarity index 100%
rename from pandas/tests/indexes/multi/test_format.py
rename to pandas/tests/indexes/multi/test_formats.py
