commit 6bac89441c4f70a496c876bf9890f7e2ab2f3e12
Author: jreback <jeff@reback.net>
Date:   Wed Dec 26 17:48:12 2012 -0500

    BUG: minor change in way expectedrows works (better defaults)

diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index a389ccf00..577f0ea99 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -1507,6 +1507,11 @@ class Table(object):
     def nrows(self):
         return getattr(self.table,'nrows',None)
 
+    @property
+    def nrows_expected(self):
+        """ based on our axes, compute the expected nrows """
+        return np.prod([ i.cvalues.shape[0] for i in self.index_axes ])
+
     @property
     def table(self):
         """ return the table group """
@@ -1868,8 +1873,10 @@ class Table(object):
     def create_description(self, compression = None, complevel = None, expectedrows = None):
         """ create the description of the table from the axes & values """
 
-        d = dict( name = 'table',
-                  expectedrows = expectedrows )
+        # expected rows estimate
+        if expectedrows is None:
+            expectedrows = max(self.nrows_expected,10000)
+        d = dict( name = 'table', expectedrows = expectedrows )
 
         # description from the axes & values
         d['description'] = dict([ (a.cname,a.typ) for a in self.axes ])
@@ -2097,7 +2104,7 @@ class AppendableTable(LegacyTable):
         values  = [ a.take_data() for a in self.values_axes ]
 
         # write the chunks
-        rows   = np.prod([ i.shape[0] for i in indexes ])
+        rows   = self.nrows_expected
         chunks = int(rows / chunksize) + 1
         for i in xrange(chunks):
             start_i = i*chunksize
diff --git a/pandas/lib.pyx b/pandas/lib.pyx
index 94936db47..39911c88e 100644
--- a/pandas/lib.pyx
+++ b/pandas/lib.pyx
@@ -15,7 +15,9 @@ from cpython cimport (PyDict_New, PyDict_GetItem, PyDict_SetItem,
                       PyList_Check, PyFloat_Check,
                       PyString_Check,
                       PyTuple_SetItem,
-                      PyTuple_New)
+                      PyTuple_New,
+                      PyObject_SetAttrString)
+
 cimport cpython
 
 isnan = np.isnan
@@ -740,13 +742,6 @@ def clean_index_list(list obj):
 
     return maybe_convert_objects(converted), 0
 
-from cpython cimport (PyDict_New, PyDict_GetItem, PyDict_SetItem,
-                      PyDict_Contains, PyDict_Keys,
-                      Py_INCREF, PyTuple_SET_ITEM,
-                      PyTuple_SetItem,
-                      PyTuple_New,
-                      PyObject_SetAttrString)
-
 @cython.boundscheck(False)
 @cython.wraparound(False)
 def max_len_string_array(ndarray[object, ndim=1] arr):
