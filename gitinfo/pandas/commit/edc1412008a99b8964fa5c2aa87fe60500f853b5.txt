commit edc1412008a99b8964fa5c2aa87fe60500f853b5
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Mon Jun 13 20:57:56 2011 -0400

    more renaming

diff --git a/pandas/core/internals.py b/pandas/core/internals.py
index 77f81bf52..88d546dfb 100644
--- a/pandas/core/internals.py
+++ b/pandas/core/internals.py
@@ -11,7 +11,7 @@ import pandas.core.common as common
 
 class Block(object):
     """
-    Canonical unit of homogeneous dtype contained in DataMatrix
+    Canonical unit of homogeneous dtype contained in DataFrame
 
     Index-ignorant; let the container take care of that
     """
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 276e3fccc..f14063ca1 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -1126,7 +1126,7 @@ class Series(np.ndarray, PandasGeneric):
 
     def shift(self, periods, offset=None, timeRule=None):
         """
-        Shift the underlying series of the DataMatrix and Series objects within
+        Shift the underlying series of the DataFrame and Series objects within
         by given number (positive or negative) of business/weekdays.
 
         Parameters
diff --git a/pandas/core/tests/test_series.py b/pandas/core/tests/test_series.py
index a244ac674..2feebe4e4 100644
--- a/pandas/core/tests/test_series.py
+++ b/pandas/core/tests/test_series.py
@@ -161,7 +161,7 @@ class TestSeries(unittest.TestCase):
         self.assert_(np.array_equal(result.index, s.index[mask]))
 
     def test_getitem_boolean_object(self):
-        # using column from DataMatrix
+        # using column from DataFrame
         s = self.series
         mask = s > s.median()
         omask = mask.astype(object)
diff --git a/pandas/info.py b/pandas/info.py
index 0d5515f81..2bbff9663 100644
--- a/pandas/info.py
+++ b/pandas/info.py
@@ -12,8 +12,8 @@ Series / TimeSeries
     As an numpy.ndarray subclass, compatible with ufuncs and other NumPy
     functions
 
-DataFrame / DataMatrix
-    Represent collections of Series objects, enable easy management
+DataFrame
+    Represents collections of Series objects, enable easy management
     of multiple time series / cross-sections
 
 DateRange
@@ -31,4 +31,3 @@ lib
 stats
     Statistical and econometric functions
 """
-
diff --git a/pandas/io/pytables.py b/pandas/io/pytables.py
index dd8c1892e..5b6f1808a 100644
--- a/pandas/io/pytables.py
+++ b/pandas/io/pytables.py
@@ -1,8 +1,7 @@
 from datetime import datetime
 import numpy as np
 
-from pandas import (Series, TimeSeries, DataFrame, DataMatrix, WidePanel,
-                    LongPanel)
+from pandas import Series, TimeSeries, DataFrame, WidePanel, LongPanel
 from pandas.core.pytools import adjoin
 import pandas.lib.tseries as tseries
 
diff --git a/pandas/io/sql.py b/pandas/io/sql.py
index ad07eda00..6f6bb9ce4 100644
--- a/pandas/io/sql.py
+++ b/pandas/io/sql.py
@@ -10,8 +10,7 @@ from numpy import NaN
 
 from pandas.core.datetools import format, to_datetime
 from pandas.core.panel import pivot
-from pandas.core.api import (DataFrame, DataMatrix, Series, Index,
-                             isnull)
+from pandas.core.api import DataFrame, Series, Index, isnull
 
 #-------------------------------------------------------------------------------
 # Query formatting
@@ -400,7 +399,7 @@ def uquery(sql, con=None, cur=None, retry=True, params=()):
             return uquery(sql, con, retry=False)
     return result
 
-def frame_query(sql, con, indexField='Time', asDataMatrix=False):
+def frame_query(sql, con, indexField='Time'):
     """
     Returns a DataFrame corresponding to the result set of the query
     string.
@@ -425,10 +424,7 @@ def frame_query(sql, con, indexField='Time', asDataMatrix=False):
     else:
         idx = Index(np.arange(len(data.values()[0])))
 
-    if asDataMatrix:
-        return DataMatrix(data, index=idx)
-    else:
-        return DataFrame(data=data, index=idx)
+    return DataFrame(data=data, index=idx)
 
 def pivot_query(sql, rows, columns, values, con):
     """
diff --git a/pandas/lib/bench_sparse.py b/pandas/lib/bench_sparse.py
index c22980fb5..ed4603d17 100644
--- a/pandas/lib/bench_sparse.py
+++ b/pandas/lib/bench_sparse.py
@@ -34,7 +34,7 @@ if 'linux' in sys.platform:
 else:
     pth = '/Users/wesm/code/pandas/example'
 
-dm = DataMatrix.load(pth)
+dm = DataFrame.load(pth)
 
 sdf = dm.to_sparse()
 
diff --git a/pandas/rpy/common.py b/pandas/rpy/common.py
index 9ae7efe61..0492dc448 100644
--- a/pandas/rpy/common.py
+++ b/pandas/rpy/common.py
@@ -80,9 +80,8 @@ def _convert_Matrix(mat):
     columns = None if _is_null(columns) else list(columns)
     index = None if _is_null(rows) else list(rows)
 
-    return pandas.DataMatrix(np.array(mat),
-                             index=_check_int(index),
-                             columns=columns)
+    return pandas.DataFrame(np.array(mat), index=_check_int(index),
+                            columns=columns)
 
 def _check_int(vec):
     try:
diff --git a/pandas/stats/fama_macbeth.py b/pandas/stats/fama_macbeth.py
index c4b723d20..d4f480ba1 100644
--- a/pandas/stats/fama_macbeth.py
+++ b/pandas/stats/fama_macbeth.py
@@ -2,7 +2,7 @@ from cStringIO import StringIO
 
 import numpy as np
 
-from pandas.core.api import Series, DataMatrix
+from pandas.core.api import Series, DataFrame
 import pandas.stats.common as common
 from pandas.util.decorators import cache_readonly
 import pandas.lib.tseries as tseries
@@ -192,7 +192,7 @@ class MovingFamaMacBeth(FamaMacBeth):
     _stats = cache_readonly(_calc_stats)
 
     def _make_result(self, result):
-        return DataMatrix(result, index=self._result_index, columns=self._cols)
+        return DataFrame(result, index=self._result_index, columns=self._cols)
 
     @cache_readonly
     def _result_index(self):
