commit 184de3d318a4a641ccb156f3c0263ba14e7062c9
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Tue Feb 7 18:52:00 2012 -0500

    ENH: more testing for PR #757 and don't copy data

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 7615dfe35..59a9ae855 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -4031,9 +4031,11 @@ def _homogenize(data, index, columns, dtype=None):
             if isinstance(v, dict):
                 if oindex is None:
                     oindex = index.astype('O')
-                if type(v) != dict:
-                    v = dict(v)
-                v = lib.fast_multiget(v, oindex, default=np.nan)
+                if type(v) == dict:
+                    # fast cython method
+                    v = lib.fast_multiget(v, oindex, default=np.nan)
+                else:
+                    v = lib.map_infer(oindex, v.get)
 
             v = _sanitize_array(v, index, dtype=dtype, copy=False,
                                 raise_cast_failure=False)
diff --git a/pandas/tests/test_frame.py b/pandas/tests/test_frame.py
index 589d9355e..6552b510e 100644
--- a/pandas/tests/test_frame.py
+++ b/pandas/tests/test_frame.py
@@ -1217,8 +1217,8 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         self.assert_(frame.index is NULL_INDEX)
 
     def test_constructor_subclass_dict(self):
-        #Test for passing dict subclass to constructor
-        data = {'col1': tm.TestSubDict((x, 10.0 * x) for x in xrange(10)), 
+        # Test for passing dict subclass to constructor
+        data = {'col1': tm.TestSubDict((x, 10.0 * x) for x in xrange(10)),
                 'col2': tm.TestSubDict((x, 20.0 * x) for x in xrange(10))}
         df = DataFrame(data)
         refdf = DataFrame(dict((col, dict(val.iteritems())) for col, val in data.iteritems()))
@@ -1228,6 +1228,17 @@ class TestDataFrame(unittest.TestCase, CheckIndexing,
         df = DataFrame(data)
         assert_frame_equal(refdf, df)
 
+        # try with defaultdict
+        from collections import defaultdict
+        data = {}
+        self.frame['B'][:10] = np.nan
+        for k, v in self.frame.iterkv():
+            dct = defaultdict(dict)
+            dct.update(v.to_dict())
+            data[k] = dct
+        frame = DataFrame(data)
+        assert_frame_equal(self.frame.sort_index(), frame)
+
     def test_constructor_dict_block(self):
         expected = [[4., 3., 2., 1.]]
         df = DataFrame({'d' : [4.],'c' : [3.],'b' : [2.],'a' : [1.]},
