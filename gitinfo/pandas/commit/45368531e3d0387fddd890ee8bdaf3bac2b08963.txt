commit 45368531e3d0387fddd890ee8bdaf3bac2b08963
Author: Simon Hawkins <simonjayhawkins@gmail.com>
Date:   Fri Jul 12 15:14:34 2019 +0100

    TST/CLN: Add message checks to raises KeyError tests (#27354)

diff --git a/pandas/tests/frame/test_axis_select_reindex.py b/pandas/tests/frame/test_axis_select_reindex.py
index 77be95250..1ef10ea58 100644
--- a/pandas/tests/frame/test_axis_select_reindex.py
+++ b/pandas/tests/frame/test_axis_select_reindex.py
@@ -1,4 +1,5 @@
 from datetime import datetime
+import re
 
 import numpy as np
 import pytest
@@ -1120,9 +1121,10 @@ class TestDataFrameSelectReindex:
 
         # issue 19186
         level = 0 if isinstance(actual.index, MultiIndex) else None
-        with pytest.raises(KeyError):
+        msg = re.escape("\"['c'] not found in axis\"")
+        with pytest.raises(KeyError, match=msg):
             actual.drop("c", level=level, axis=0)
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match=msg):
             actual.T.drop("c", level=level, axis=1)
         expected_no_err = actual.drop("c", axis=0, level=level, errors="ignore")
         assert_frame_equal(expected_no_err, actual)
diff --git a/pandas/tests/frame/test_duplicates.py b/pandas/tests/frame/test_duplicates.py
index 0ea24777a..d2a1fc43d 100644
--- a/pandas/tests/frame/test_duplicates.py
+++ b/pandas/tests/frame/test_duplicates.py
@@ -1,3 +1,5 @@
+import re
+
 import numpy as np
 import pytest
 
@@ -9,11 +11,12 @@ import pandas.util.testing as tm
 def test_duplicated_with_misspelled_column_name(subset):
     # GH 19730
     df = DataFrame({"A": [0, 0, 1], "B": [0, 0, 1], "C": [0, 0, 1]})
+    msg = re.escape("Index(['a'], dtype='object')")
 
-    with pytest.raises(KeyError):
+    with pytest.raises(KeyError, match=msg):
         df.duplicated(subset)
 
-    with pytest.raises(KeyError):
+    with pytest.raises(KeyError, match=msg):
         df.drop_duplicates(subset)
 
 
diff --git a/pandas/tests/frame/test_indexing.py b/pandas/tests/frame/test_indexing.py
index ae24ad65d..0cb7db0e4 100644
--- a/pandas/tests/frame/test_indexing.py
+++ b/pandas/tests/frame/test_indexing.py
@@ -1,4 +1,5 @@
 from datetime import date, datetime, time, timedelta
+import re
 from warnings import catch_warnings, simplefilter
 
 import numpy as np
@@ -59,7 +60,7 @@ class TestDataFrameIndexing(TestData):
         ad = np.random.randn(len(df))
         df["@awesome_domain"] = ad
 
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match=re.escape("'df[\"$10\"]'")):
             df.__getitem__('df["$10"]')
 
         res = df["@awesome_domain"]
@@ -67,7 +68,8 @@ class TestDataFrameIndexing(TestData):
 
     def test_getitem_dupe_cols(self):
         df = DataFrame([[1, 2, 3], [4, 5, 6]], columns=["a", "a", "b"])
-        with pytest.raises(KeyError):
+        msg = "\"None of [Index(['baf'], dtype='object')] are in the [columns]\""
+        with pytest.raises(KeyError, match=re.escape(msg)):
             df[["baf"]]
 
     def test_get(self, float_frame):
@@ -446,14 +448,16 @@ class TestDataFrameIndexing(TestData):
 
         df = DataFrame(np.random.randn(8, 4))
         # ix does label-based indexing when having an integer index
+        msg = "\"None of [Int64Index([-1], dtype='int64')] are in the [index]\""
         with catch_warnings(record=True):
             simplefilter("ignore", FutureWarning)
-            with pytest.raises(KeyError):
+            with pytest.raises(KeyError, match=re.escape(msg)):
                 df.ix[[-1]]
 
+        msg = "\"None of [Int64Index([-1], dtype='int64')] are in the [columns]\""
         with catch_warnings(record=True):
             simplefilter("ignore", FutureWarning)
-            with pytest.raises(KeyError):
+            with pytest.raises(KeyError, match=re.escape(msg)):
                 df.ix[:, [-1]]
 
         # #1942
@@ -497,7 +501,11 @@ class TestDataFrameIndexing(TestData):
         float_frame["col6"] = series
         tm.assert_series_equal(series, float_frame["col6"], check_names=False)
 
-        with pytest.raises(KeyError):
+        msg = (
+            r"\"None of \[Float64Index\(\[.*dtype='float64'\)\] are in the"
+            r" \[columns\]\""
+        )
+        with pytest.raises(KeyError, match=msg):
             float_frame[np.random.randn(len(float_frame) + 1)] = 1
 
         # set ndarray
@@ -1885,10 +1893,10 @@ class TestDataFrameIndexing(TestData):
         assert df["mask"].dtype == np.bool_
 
     def test_lookup_raises(self, float_frame):
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="'One or more row labels was not found'"):
             float_frame.lookup(["xyz"], ["A"])
 
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="'One or more column labels was not found'"):
             float_frame.lookup([float_frame.index[0]], ["xyz"])
 
         with pytest.raises(ValueError, match="same size"):
@@ -2544,7 +2552,9 @@ class TestDataFrameIndexing(TestData):
         assert xs["A"] == 1
         assert xs["B"] == "1"
 
-        with pytest.raises(KeyError):
+        with pytest.raises(
+            KeyError, match=re.escape("Timestamp('1999-12-31 00:00:00', freq='B')")
+        ):
             datetime_frame.xs(datetime_frame.index[0] - BDay())
 
         # xs get column
diff --git a/pandas/tests/frame/test_mutate_columns.py b/pandas/tests/frame/test_mutate_columns.py
index ed9eeb594..7ad5abca8 100644
--- a/pandas/tests/frame/test_mutate_columns.py
+++ b/pandas/tests/frame/test_mutate_columns.py
@@ -1,3 +1,5 @@
+import re
+
 import numpy as np
 import pytest
 
@@ -88,9 +90,9 @@ class TestDataFrameMutateColumns:
         df = DataFrame({"A": [1, 2, 3], "B": [4, 5, 6]})
 
         # Key C does not exist at definition time of df
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="^'C'$"):
             df.assign(C=lambda df: df.A, D=lambda df: df["A"] + df["C"])
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="^'C'$"):
             df.assign(C=df.A, D=lambda x: x["A"] + x["C"])
 
     @pytest.mark.skipif(
@@ -219,14 +221,14 @@ class TestDataFrameMutateColumns:
         # A still in the levels, BUT get a KeyError if trying
         # to delete
         assert ("A",) not in df.columns
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match=re.escape("('A',)")):
             del df[("A",)]
 
         # behavior of dropped/deleted MultiIndex levels changed from
         # GH 2770 to GH 19027: MultiIndex no longer '.__contains__'
         # levels which are dropped/deleted
         assert "A" not in df.columns
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match=re.escape("('A',)")):
             del df["A"]
 
     def test_pop(self, float_frame):
diff --git a/pandas/tests/generic/test_generic.py b/pandas/tests/generic/test_generic.py
index b2b38980d..7b9e50ebb 100644
--- a/pandas/tests/generic/test_generic.py
+++ b/pandas/tests/generic/test_generic.py
@@ -618,7 +618,9 @@ class TestNDFrame:
             df.sample(n=1, weights="weight_column", axis=1)
 
         # Check weighting key error
-        with pytest.raises(KeyError):
+        with pytest.raises(
+            KeyError, match="'String passed to weights not a valid column'"
+        ):
             df.sample(n=3, weights="not_a_real_column_name")
 
         # Check that re-normalizes weights that don't sum to one.
diff --git a/pandas/tests/groupby/test_timegrouper.py b/pandas/tests/groupby/test_timegrouper.py
index d201b8877..e1e35d8eb 100644
--- a/pandas/tests/groupby/test_timegrouper.py
+++ b/pandas/tests/groupby/test_timegrouper.py
@@ -206,7 +206,7 @@ class TestGroupBy:
             result = df.groupby([pd.Grouper(freq="1M", key="Date"), "Buyer"]).sum()
             assert_frame_equal(result, expected)
 
-            with pytest.raises(KeyError):
+            with pytest.raises(KeyError, match="'The grouper name foo is not found'"):
                 df.groupby([pd.Grouper(freq="1M", key="foo"), "Buyer"]).sum()
 
             # passing the level
diff --git a/pandas/tests/indexes/datetimes/test_indexing.py b/pandas/tests/indexes/datetimes/test_indexing.py
index 2a5bbdbb1..cd5efc863 100644
--- a/pandas/tests/indexes/datetimes/test_indexing.py
+++ b/pandas/tests/indexes/datetimes/test_indexing.py
@@ -614,7 +614,7 @@ class TestDatetimeIndex:
         )
         with pytest.raises(ValueError, match="unit abbreviation w/o a number"):
             idx.get_loc("2000-01-01T12", method="nearest", tolerance="foo")
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="'2000-01-01T03'"):
             idx.get_loc("2000-01-01T03", method="nearest", tolerance="2 hours")
         with pytest.raises(
             ValueError, match="tolerance size must match target index size"
@@ -634,12 +634,12 @@ class TestDatetimeIndex:
         assert idx.get_loc("1999", method="nearest") == 0
         assert idx.get_loc("2001", method="nearest") == 2
 
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="'1999'"):
             idx.get_loc("1999", method="pad")
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="'2001'"):
             idx.get_loc("2001", method="backfill")
 
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="'foobar'"):
             idx.get_loc("foobar")
         with pytest.raises(TypeError):
             idx.get_loc(slice(2))
diff --git a/pandas/tests/indexes/interval/test_interval.py b/pandas/tests/indexes/interval/test_interval.py
index 962ed2b1c..c61af1ce7 100644
--- a/pandas/tests/indexes/interval/test_interval.py
+++ b/pandas/tests/indexes/interval/test_interval.py
@@ -445,7 +445,7 @@ class TestIntervalIndex(Base):
             result = index.get_loc(scalar)
             assert result == 0
         else:
-            with pytest.raises(KeyError):
+            with pytest.raises(KeyError, match=str(scalar)):
                 index.get_loc(scalar)
 
     @pytest.mark.parametrize("other_closed", ["left", "right", "both", "neither"])
@@ -458,7 +458,14 @@ class TestIntervalIndex(Base):
             result = index.get_loc(interval)
             assert result == 0
         else:
-            with pytest.raises(KeyError):
+            with pytest.raises(
+                KeyError,
+                match=re.escape(
+                    "Interval({left}, {right}, closed='{other_closed}')".format(
+                        left=left, right=right, other_closed=other_closed
+                    )
+                ),
+            ):
                 index.get_loc(interval)
 
     # Make consistent with test_interval_new.py (see #16316, #16386)
diff --git a/pandas/tests/indexes/interval/test_interval_new.py b/pandas/tests/indexes/interval/test_interval_new.py
index ab9f7ef1c..d92559d2e 100644
--- a/pandas/tests/indexes/interval/test_interval_new.py
+++ b/pandas/tests/indexes/interval/test_interval_new.py
@@ -1,3 +1,5 @@
+import re
+
 import numpy as np
 import pytest
 
@@ -15,16 +17,21 @@ class TestIntervalIndex:
         for bound in [[0, 1], [1, 2], [2, 3], [3, 4], [0, 2], [2.5, 3], [-1, 4]]:
             # if get_loc is supplied an interval, it should only search
             # for exact matches, not overlaps or covers, else KeyError.
+            msg = re.escape(
+                "Interval({bound[0]}, {bound[1]}, closed='{side}')".format(
+                    bound=bound, side=side
+                )
+            )
             if closed == side:
                 if bound == [0, 1]:
                     assert idx.get_loc(Interval(0, 1, closed=side)) == 0
                 elif bound == [2, 3]:
                     assert idx.get_loc(Interval(2, 3, closed=side)) == 1
                 else:
-                    with pytest.raises(KeyError):
+                    with pytest.raises(KeyError, match=msg):
                         idx.get_loc(Interval(*bound, closed=side))
             else:
-                with pytest.raises(KeyError):
+                with pytest.raises(KeyError, match=msg):
                     idx.get_loc(Interval(*bound, closed=side))
 
     @pytest.mark.parametrize("scalar", [-0.5, 0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5])
@@ -81,18 +88,42 @@ class TestIntervalIndex:
         # unsorted duplicates
         index = IntervalIndex.from_tuples([(0, 2), (2, 4), (0, 2)])
 
-        with pytest.raises(KeyError):
+        with pytest.raises(
+            KeyError,
+            match=re.escape(
+                '"Cannot get left slice bound for non-unique label:'
+                " Interval(0, 2, closed='right')\""
+            ),
+        ):
             index.slice_locs(start=Interval(0, 2), end=Interval(2, 4))
 
-        with pytest.raises(KeyError):
+        with pytest.raises(
+            KeyError,
+            match=re.escape(
+                '"Cannot get left slice bound for non-unique label:'
+                " Interval(0, 2, closed='right')\""
+            ),
+        ):
             index.slice_locs(start=Interval(0, 2))
 
         assert index.slice_locs(end=Interval(2, 4)) == (0, 2)
 
-        with pytest.raises(KeyError):
+        with pytest.raises(
+            KeyError,
+            match=re.escape(
+                '"Cannot get right slice bound for non-unique label:'
+                " Interval(0, 2, closed='right')\""
+            ),
+        ):
             index.slice_locs(end=Interval(0, 2))
 
-        with pytest.raises(KeyError):
+        with pytest.raises(
+            KeyError,
+            match=re.escape(
+                '"Cannot get right slice bound for non-unique label:'
+                " Interval(0, 2, closed='right')\""
+            ),
+        ):
             index.slice_locs(start=Interval(2, 4), end=Interval(0, 2))
 
         # another unsorted duplicates
@@ -139,7 +170,13 @@ class TestIntervalIndex:
     def test_slice_locs_with_ints_and_floats_errors(self, tuples, query):
         start, stop = query
         index = IntervalIndex.from_tuples(tuples)
-        with pytest.raises(KeyError):
+        with pytest.raises(
+            KeyError,
+            match=(
+                "'can only get slices from an IntervalIndex if bounds are"
+                " non-overlapping and all monotonic increasing or decreasing'"
+            ),
+        ):
             index.slice_locs(start, stop)
 
     @pytest.mark.parametrize(
diff --git a/pandas/tests/indexes/interval/test_interval_tree.py b/pandas/tests/indexes/interval/test_interval_tree.py
index b7104242b..87f9eaa20 100644
--- a/pandas/tests/indexes/interval/test_interval_tree.py
+++ b/pandas/tests/indexes/interval/test_interval_tree.py
@@ -62,7 +62,7 @@ class TestIntervalTree:
         expected = np.array([0, 1], dtype="intp")
         tm.assert_numpy_array_equal(result, expected)
 
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="-1"):
             tree.get_loc(-1)
 
     def test_get_indexer(self, tree):
@@ -70,7 +70,9 @@ class TestIntervalTree:
         expected = np.array([0, 4, -1], dtype="intp")
         tm.assert_numpy_array_equal(result, expected)
 
-        with pytest.raises(KeyError):
+        with pytest.raises(
+            KeyError, match="'indexer does not intersect a unique set of intervals'"
+        ):
             tree.get_indexer(np.array([3.0]))
 
     def test_get_indexer_non_unique(self, tree):
@@ -100,7 +102,9 @@ class TestIntervalTree:
         expected = np.array([0, 1, 2], dtype="intp")
         tm.assert_numpy_array_equal(result, expected)
 
-        with pytest.raises(KeyError):
+        with pytest.raises(
+            KeyError, match="'indexer does not intersect a unique set of intervals'"
+        ):
             tree.get_indexer(np.array([0.5]))
 
         indexer, missing = tree.get_indexer_non_unique(np.array([0.5]))
@@ -116,7 +120,7 @@ class TestIntervalTree:
         tree = IntervalTree([0], [1], closed=closed)
         for p, errors in [(0, tree.open_left), (1, tree.open_right)]:
             if errors:
-                with pytest.raises(KeyError):
+                with pytest.raises(KeyError, match=str(p)):
                     tree.get_loc(p)
             else:
                 result = tree.get_loc(p)
diff --git a/pandas/tests/indexes/multi/test_partial_indexing.py b/pandas/tests/indexes/multi/test_partial_indexing.py
index d6799e866..5db1296d8 100644
--- a/pandas/tests/indexes/multi/test_partial_indexing.py
+++ b/pandas/tests/indexes/multi/test_partial_indexing.py
@@ -54,7 +54,7 @@ def test_partial_string_timestamp_multiindex():
     # ambiguous and we don't want to extend this behavior forward to work
     # in multi-indexes. This would amount to selecting a scalar from a
     # column.
-    with pytest.raises(KeyError):
+    with pytest.raises(KeyError, match="'2016-01-01'"):
         df["2016-01-01"]
 
     # partial string match on year only
@@ -83,7 +83,7 @@ def test_partial_string_timestamp_multiindex():
     tm.assert_frame_equal(result, expected)
 
     # Slicing date on first level should break (of course)
-    with pytest.raises(KeyError):
+    with pytest.raises(KeyError, match="'2016-01-01'"):
         df_swap.loc["2016-01-01"]
 
     # GH12685 (partial string with daily resolution or below)
diff --git a/pandas/tests/indexes/multi/test_sorting.py b/pandas/tests/indexes/multi/test_sorting.py
index c62bc80cf..3dee1dbec 100644
--- a/pandas/tests/indexes/multi/test_sorting.py
+++ b/pandas/tests/indexes/multi/test_sorting.py
@@ -115,7 +115,7 @@ def test_unsortedindex():
     df.sort_index(inplace=True)
     assert len(df.loc(axis=0)["z", :]) == 2
 
-    with pytest.raises(KeyError):
+    with pytest.raises(KeyError, match="'q'"):
         df.loc(axis=0)["q", :]
 
 
diff --git a/pandas/tests/indexes/period/test_indexing.py b/pandas/tests/indexes/period/test_indexing.py
index 3f66891ca..cf03e2c78 100644
--- a/pandas/tests/indexes/period/test_indexing.py
+++ b/pandas/tests/indexes/period/test_indexing.py
@@ -200,7 +200,7 @@ class TestGetItem:
 
             invalid = ["2013/02/01 9H", "2013/02/01 09:00"]
             for v in invalid:
-                with pytest.raises(KeyError):
+                with pytest.raises(KeyError, match=v):
                     s[v]
 
 
diff --git a/pandas/tests/indexes/test_category.py b/pandas/tests/indexes/test_category.py
index 2b9632acd..e79991f65 100644
--- a/pandas/tests/indexes/test_category.py
+++ b/pandas/tests/indexes/test_category.py
@@ -697,7 +697,7 @@ class TestCategoricalIndex(Base):
         assert cidx1.get_loc("e") == idx1.get_loc("e")
 
         for i in [cidx1, idx1]:
-            with pytest.raises(KeyError):
+            with pytest.raises(KeyError, match="'NOT-EXIST'"):
                 i.get_loc("NOT-EXIST")
 
         # non-unique
@@ -716,7 +716,7 @@ class TestCategoricalIndex(Base):
         assert res == 4
 
         for i in [cidx2, idx2]:
-            with pytest.raises(KeyError):
+            with pytest.raises(KeyError, match="'NOT-EXIST'"):
                 i.get_loc("NOT-EXIST")
 
         # non-unique, sliceable
@@ -733,7 +733,7 @@ class TestCategoricalIndex(Base):
         assert res == slice(2, 5, None)
 
         for i in [cidx3, idx3]:
-            with pytest.raises(KeyError):
+            with pytest.raises(KeyError, match="'c'"):
                 i.get_loc("c")
 
     def test_repr_roundtrip(self):
diff --git a/pandas/tests/indexes/test_common.py b/pandas/tests/indexes/test_common.py
index 0400b7810..605df9971 100644
--- a/pandas/tests/indexes/test_common.py
+++ b/pandas/tests/indexes/test_common.py
@@ -34,7 +34,9 @@ class TestCommon:
                 indices.droplevel(level)
 
         for level in "wrong", ["wrong"]:
-            with pytest.raises(KeyError):
+            with pytest.raises(
+                KeyError, match=re.escape("'Level wrong must be same as name (None)'")
+            ):
                 indices.droplevel(level)
 
     def test_constructor_non_hashable_name(self, indices):
diff --git a/pandas/tests/indexes/test_range.py b/pandas/tests/indexes/test_range.py
index 213d9c650..58b98297f 100644
--- a/pandas/tests/indexes/test_range.py
+++ b/pandas/tests/indexes/test_range.py
@@ -311,7 +311,7 @@ class TestRangeIndex(Numeric):
         df.loc[50]
         assert idx._cached_data is None
 
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="51"):
             df.loc[51]
         assert idx._cached_data is None
 
@@ -1027,13 +1027,13 @@ class TestRangeIndex(Numeric):
         tm.assert_numpy_array_equal(
             idx.get_indexer([2, 8]), ensure_platform_int(np.array([0, 2]))
         )
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="3"):
             idx.get_loc(3)
 
         assert "_engine" not in idx._cache
 
         # The engine is still required for lookup of a different dtype scalar:
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="'a'"):
             assert idx.get_loc("a") == -1
 
         assert "_engine" in idx._cache
diff --git a/pandas/tests/indexing/interval/test_interval.py b/pandas/tests/indexing/interval/test_interval.py
index 1bdb66510..7ae427827 100644
--- a/pandas/tests/indexing/interval/test_interval.py
+++ b/pandas/tests/indexing/interval/test_interval.py
@@ -41,9 +41,9 @@ class TestIntervalIndex:
                 assert s[key] == expected
                 assert s.loc[key] == expected
             else:
-                with pytest.raises(KeyError):
+                with pytest.raises(KeyError, match=str(key)):
                     s[key]
-                with pytest.raises(KeyError):
+                with pytest.raises(KeyError, match=str(key)):
                     s.loc[key]
 
         for key, expected in zip(idx.right, s):
@@ -51,9 +51,9 @@ class TestIntervalIndex:
                 assert s[key] == expected
                 assert s.loc[key] == expected
             else:
-                with pytest.raises(KeyError):
+                with pytest.raises(KeyError, match=str(key)):
                     s[key]
-                with pytest.raises(KeyError):
+                with pytest.raises(KeyError, match=str(key)):
                     s.loc[key]
 
         for key, expected in zip(idx.mid, s):
@@ -65,10 +65,10 @@ class TestIntervalIndex:
 
         # this is a departure from our current
         # indexin scheme, but simpler
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="^$"):
             s.loc[[-1, 3, 4, 5]]
 
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="^$"):
             s.loc[[-1, 3]]
 
     def test_large_series(self):
@@ -93,7 +93,7 @@ class TestIntervalIndex:
         expected = df.iloc[4:6]
         tm.assert_frame_equal(result, expected)
 
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="10"):
             df.loc[10]
 
         # single list-like
@@ -106,9 +106,9 @@ class TestIntervalIndex:
         expected = df.take([4, 5, 4, 5])
         tm.assert_frame_equal(result, expected)
 
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="^$"):
             df.loc[[10]]
 
         # partial missing
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="^$"):
             df.loc[[10, 4]]
diff --git a/pandas/tests/indexing/interval/test_interval_new.py b/pandas/tests/indexing/interval/test_interval_new.py
index 92c71bbc6..a86a9d16d 100644
--- a/pandas/tests/indexing/interval/test_interval_new.py
+++ b/pandas/tests/indexing/interval/test_interval_new.py
@@ -1,3 +1,5 @@
+import re
+
 import numpy as np
 import pytest
 
@@ -30,31 +32,35 @@ class TestIntervalIndex:
         tm.assert_series_equal(expected, result)
 
         # missing or not exact
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match=re.escape("Interval(3, 5, closed='left')")):
             s.loc[Interval(3, 5, closed="left")]
 
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match=re.escape("Interval(3, 5, closed='left')")):
             s[Interval(3, 5, closed="left")]
 
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match=re.escape("Interval(3, 5, closed='right')")):
             s[Interval(3, 5)]
 
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match=re.escape("Interval(3, 5, closed='right')")):
             s.loc[Interval(3, 5)]
 
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match=re.escape("Interval(3, 5, closed='right')")):
             s[Interval(3, 5)]
 
-        with pytest.raises(KeyError):
+        with pytest.raises(
+            KeyError, match=re.escape("Interval(-2, 0, closed='right')")
+        ):
             s.loc[Interval(-2, 0)]
 
-        with pytest.raises(KeyError):
+        with pytest.raises(
+            KeyError, match=re.escape("Interval(-2, 0, closed='right')")
+        ):
             s[Interval(-2, 0)]
 
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match=re.escape("Interval(5, 6, closed='right')")):
             s.loc[Interval(5, 6)]
 
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match=re.escape("Interval(5, 6, closed='right')")):
             s[Interval(5, 6)]
 
     def test_loc_with_scalar(self):
@@ -175,16 +181,16 @@ class TestIntervalIndex:
         result = s[[Interval(1, 5), Interval(3, 7)]]
         tm.assert_series_equal(expected, result)
 
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match=re.escape("Interval(3, 5, closed='right')")):
             s.loc[Interval(3, 5)]
 
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="^$"):
             s.loc[[Interval(3, 5)]]
 
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match=re.escape("Interval(3, 5, closed='right')")):
             s[Interval(3, 5)]
 
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="^$"):
             s[[Interval(3, 5)]]
 
         # slices with interval (only exact matches)
@@ -195,15 +201,17 @@ class TestIntervalIndex:
         result = s[Interval(1, 5) : Interval(3, 7)]
         tm.assert_series_equal(expected, result)
 
-        with pytest.raises(KeyError):
+        msg = "'can only get slices from an IntervalIndex if bounds are"
+        " non-overlapping and all monotonic increasing or decreasing'"
+        with pytest.raises(KeyError, match=msg):
             s.loc[Interval(1, 6) : Interval(3, 8)]
 
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match=msg):
             s[Interval(1, 6) : Interval(3, 8)]
 
         # slices with scalar raise for overlapping intervals
         # TODO KeyError is the appropriate error?
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match=msg):
             s.loc[1:4]
 
     def test_non_unique(self):
diff --git a/pandas/tests/indexing/test_categorical.py b/pandas/tests/indexing/test_categorical.py
index 0dccf023c..c365c985e 100644
--- a/pandas/tests/indexing/test_categorical.py
+++ b/pandas/tests/indexing/test_categorical.py
@@ -355,7 +355,11 @@ class TestCategoricalIndex:
         assert_frame_equal(result, expected, check_index_type=True)
 
         # not all labels in the categories
-        with pytest.raises(KeyError):
+        with pytest.raises(
+            KeyError,
+            match="'a list-indexer must only include values that are in the"
+            " categories'",
+        ):
             self.df2.loc[["a", "d"]]
 
     def test_loc_listlike_dtypes(self):
diff --git a/pandas/tests/indexing/test_indexing.py b/pandas/tests/indexing/test_indexing.py
index a2a22bf60..77052de5e 100644
--- a/pandas/tests/indexing/test_indexing.py
+++ b/pandas/tests/indexing/test_indexing.py
@@ -1,6 +1,7 @@
 """ test fancy indexing & misc """
 
 from datetime import datetime
+import re
 from warnings import catch_warnings, simplefilter
 import weakref
 
@@ -336,7 +337,12 @@ class TestFancy(Base):
 
         # List containing only missing label
         dfnu = DataFrame(np.random.randn(5, 3), index=list("AABCD"))
-        with pytest.raises(KeyError):
+        with pytest.raises(
+            KeyError,
+            match=re.escape(
+                "\"None of [Index(['E'], dtype='object')] are in the [index]\""
+            ),
+        ):
             dfnu.loc[["E"]]
 
         # ToDo: check_index_type can be True after GH 11497
@@ -425,7 +431,7 @@ class TestFancy(Base):
         # GH 10610
         df = DataFrame(np.random.random((10, 5)), columns=["a"] + [20, 21, 22, 23])
 
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match=re.escape("'[-8, 26] not in index'")):
             df[[22, 26, -8]]
         assert df[21].shape[0] == df.shape[0]
 
@@ -641,18 +647,18 @@ class TestFancy(Base):
         # dtype should properly raises KeyError
         df = DataFrame([1], Index([pd.Timestamp("2011-01-01")], dtype=object))
         assert df.index.is_all_dates
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="'2011'"):
             df["2011"]
 
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="'2011'"):
             df.loc["2011", 0]
 
         df = DataFrame()
         assert not df.index.is_all_dates
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="'2011'"):
             df["2011"]
 
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="'2011'"):
             df.loc["2011", 0]
 
     def test_astype_assignment(self):
@@ -855,9 +861,9 @@ class TestMisc(Base):
     def test_mixed_index_no_fallback(self):
         # GH 19860
         s = Series([1, 2, 3, 4, 5], index=["a", "b", "c", 1, 2])
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="^0$"):
             s.at[0]
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="^4$"):
             s.at[4]
 
     def test_rhs_alignment(self):
diff --git a/pandas/tests/indexing/test_loc.py b/pandas/tests/indexing/test_loc.py
index 90d1b0b1e..06d71d1b1 100644
--- a/pandas/tests/indexing/test_loc.py
+++ b/pandas/tests/indexing/test_loc.py
@@ -1,5 +1,6 @@
 """ test label based indexing with loc """
 from io import StringIO
+import re
 from warnings import catch_warnings, filterwarnings
 
 import numpy as np
@@ -425,7 +426,12 @@ class TestLoc(Base):
 
         s.loc[[2]]
 
-        with pytest.raises(KeyError):
+        with pytest.raises(
+            KeyError,
+            match=re.escape(
+                "\"None of [Int64Index([3], dtype='int64')] are in the [index]\""
+            ),
+        ):
             s.loc[[3]]
 
         # a non-match and a match
diff --git a/pandas/tests/indexing/test_scalar.py b/pandas/tests/indexing/test_scalar.py
index 38b4897e5..0b8f3af76 100644
--- a/pandas/tests/indexing/test_scalar.py
+++ b/pandas/tests/indexing/test_scalar.py
@@ -203,9 +203,9 @@ class TestScalar(Base):
         for i in range(len(s)):
             assert s.iat[i] == s.iloc[i] == i + 1
 
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="^4$"):
             s.at[4]
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="^4$"):
             s.loc[4]
 
     def test_mixed_index_at_iat_loc_iloc_dataframe(self):
@@ -221,9 +221,9 @@ class TestScalar(Base):
             for i in range(5):
                 assert df.iat[row, i] == df.iloc[row, i] == row * 5 + i
 
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="^3$"):
             df.at[0, 3]
-        with pytest.raises(KeyError):
+        with pytest.raises(KeyError, match="^3$"):
             df.loc[0, 3]
 
     def test_iat_setter_incompatible_assignment(self):
diff --git a/pandas/tests/io/excel/test_writers.py b/pandas/tests/io/excel/test_writers.py
index 0908ed885..8ad09549f 100644
--- a/pandas/tests/io/excel/test_writers.py
+++ b/pandas/tests/io/excel/test_writers.py
@@ -1024,7 +1024,9 @@ class TestExcelWriter(_WriterBase):
         read_frame = pd.read_excel(self.path, "test1", index_col=0)
         tm.assert_frame_equal(expected, read_frame)
 
-        with pytest.raises(KeyError):
+        with pytest.raises(
+            KeyError, match="'passes columns are not ALL present dataframe'"
+        ):
             write_frame.to_excel(self.path, "test1", columns=["C", "D"])
 
     def test_comment_arg(self, engine, ext):
diff --git a/pandas/tests/io/pytables/test_pytables.py b/pandas/tests/io/pytables/test_pytables.py
index 946334b5d..d67f2c3b7 100644
--- a/pandas/tests/io/pytables/test_pytables.py
+++ b/pandas/tests/io/pytables/test_pytables.py
@@ -4,6 +4,7 @@ from datetime import timedelta
 from distutils.version import LooseVersion
 from io import BytesIO
 import os
+import re
 import tempfile
 from warnings import catch_warnings, simplefilter
 
@@ -648,7 +649,7 @@ class TestHDFStore(Base):
             right = store["/a"]
             tm.assert_series_equal(left, right)
 
-            with pytest.raises(KeyError):
+            with pytest.raises(KeyError, match="'No object named b in the file'"):
                 store.get("b")
 
     @pytest.mark.parametrize(
@@ -1300,7 +1301,7 @@ class TestHDFStore(Base):
             df = pd.DataFrame({"a": range(2), "b": range(2)})
             df.to_hdf(path, "k1")
 
-            with pytest.raises(KeyError):
+            with pytest.raises(KeyError, match="'No object named k2 in the file'"):
                 pd.read_hdf(path, "k2")
 
             # smoke test to test that file is properly closed after
@@ -1953,7 +1954,7 @@ class TestHDFStore(Base):
             # 0 len
             df_empty = DataFrame(columns=list("ABC"))
             store.append("df", df_empty)
-            with pytest.raises(KeyError):
+            with pytest.raises(KeyError, match="'No object named df in the file'"):
                 store.select("df")
 
             # repeated append of 0/non-zero frames
@@ -2237,7 +2238,9 @@ class TestHDFStore(Base):
             assert len(store) == 0
 
             # nonexistence
-            with pytest.raises(KeyError):
+            with pytest.raises(
+                KeyError, match="'No object named a_nonexistent_store in the file'"
+            ):
                 store.remove("a_nonexistent_store")
 
             # pathing
@@ -3530,7 +3533,9 @@ class TestHDFStore(Base):
 
             store.append("df", df)
             # error
-            with pytest.raises(KeyError):
+            with pytest.raises(
+                KeyError, match=re.escape("'column [foo] not found in the table'")
+            ):
                 store.select_column("df", "foo")
 
             with pytest.raises(Exception):
@@ -3780,15 +3785,16 @@ class TestHDFStore(Base):
             with pytest.raises(Exception):
                 store.select_as_multiple([None], where=["A>0", "B>0"], selector="df1")
 
-            with pytest.raises(KeyError):
+            msg = "'No object named df3 in the file'"
+            with pytest.raises(KeyError, match=msg):
                 store.select_as_multiple(
                     ["df1", "df3"], where=["A>0", "B>0"], selector="df1"
                 )
 
-            with pytest.raises(KeyError):
+            with pytest.raises(KeyError, match=msg):
                 store.select_as_multiple(["df3"], where=["A>0", "B>0"], selector="df1")
 
-            with pytest.raises(KeyError):
+            with pytest.raises(KeyError, match="'No object named df4 in the file'"):
                 store.select_as_multiple(
                     ["df1", "df2"], where=["A>0", "B>0"], selector="df4"
                 )
@@ -4502,7 +4508,9 @@ class TestHDFStore(Base):
             assert result is not None
             store.remove("df3")
 
-            with pytest.raises(KeyError):
+            with pytest.raises(
+                KeyError, match="'No object named df3/meta/s/meta in the file'"
+            ):
                 store.select("df3/meta/s/meta")
 
     def test_categorical_conversion(self):
