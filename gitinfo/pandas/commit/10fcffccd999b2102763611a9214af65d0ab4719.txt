commit 10fcffccd999b2102763611a9214af65d0ab4719
Author: Wes McKinney <wesmckinn@gmail.com>
Date:   Thu Jun 7 20:34:24 2012 -0400

    ENH: implement comparison methods on Factor, close #1405

diff --git a/pandas/core/factor.py b/pandas/core/factor.py
index dcbf45569..5df3beaee 100644
--- a/pandas/core/factor.py
+++ b/pandas/core/factor.py
@@ -4,6 +4,23 @@ import numpy as np
 import pandas.core.common as com
 
 
+def _factor_compare_op(op):
+    def f(self, other):
+        if isinstance(other, (Factor, np.ndarray)):
+            values = np.asarray(self)
+            f = getattr(values, op)
+            return f(np.asarray(other))
+        else:
+            if other in self.levels:
+                i = self.levels.get_loc(other)
+                return getattr(self.labels, op)(i)
+            else:
+                return np.repeat(False, len(self))
+
+    f.__name__ = op
+
+    return f
+
 class Factor(object):
     """
     Represents a categorical variable in classic R / S-plus fashion
@@ -45,6 +62,13 @@ class Factor(object):
 
     levels = None
 
+    __eq__ = _factor_compare_op('__eq__')
+    __ne__ = _factor_compare_op('__ne__')
+    __lt__ = _factor_compare_op('__lt__')
+    __gt__ = _factor_compare_op('__gt__')
+    __le__ = _factor_compare_op('__le__')
+    __ge__ = _factor_compare_op('__ge__')
+
     def __array__(self, dtype=None):
         return com.take_1d(self.levels, self.labels)
 
@@ -67,4 +91,20 @@ class Factor(object):
         else:
             return Factor(self.labels[key], self.levels)
 
+    def equals(self, other):
+        """
+        Returns True if factors are equal
+
+        Parameters
+        ----------
+        other : Factor
+
+        Returns
+        -------
+        are_equal : boolean
+        """
+        if not isinstance(other, Factor):
+            return False
 
+        return (self.levels.equals(other.levels) and
+                np.array_equal(self.labels, other.labels))
diff --git a/pandas/tests/test_factor.py b/pandas/tests/test_factor.py
new file mode 100644
index 000000000..94421eed5
--- /dev/null
+++ b/pandas/tests/test_factor.py
@@ -0,0 +1,91 @@
+# pylint: disable=E1101,E1103,W0232
+
+from datetime import datetime
+import unittest
+import nose
+
+import numpy as np
+
+from pandas.core.factor import Factor
+from pandas.core.index import Index, Int64Index, MultiIndex
+from pandas.util.testing import assert_almost_equal
+
+import pandas.util.testing as tm
+
+
+class TestFactor(unittest.TestCase):
+
+    def setUp(self):
+        self.factor = Factor.from_array(['a', 'b', 'b', 'a',
+                                         'a', 'c', 'c', 'c'])
+
+    def test_getitem(self):
+        self.assertEqual(self.factor[0], 'a')
+        self.assertEqual(self.factor[-1], 'c')
+
+        subf = self.factor[[0, 1, 2]]
+        tm.assert_almost_equal(subf.labels, [0, 1, 1])
+
+        subf = self.factor[np.asarray(self.factor) == 'c']
+        tm.assert_almost_equal(subf.labels, [2, 2, 2])
+
+    def test_constructor_unsortable(self):
+        arr = np.array([1, 2, 3, datetime.now()], dtype='O')
+
+        # it works!
+        factor = Factor.from_array(arr)
+
+    def test_factor_agg(self):
+        import pandas.core.frame as frame
+
+        arr = np.arange(len(self.factor))
+
+        f = np.sum
+        agged = frame.factor_agg(self.factor, arr, f)
+        labels = self.factor.labels
+        for i, idx in enumerate(self.factor.levels):
+            self.assertEqual(f(arr[labels == i]), agged[i])
+
+    def test_comparisons(self):
+        result = self.factor[self.factor == 'a']
+        expected = self.factor[np.asarray(self.factor) == 'a']
+        self.assert_(result.equals(expected))
+
+        result = self.factor[self.factor != 'a']
+        expected = self.factor[np.asarray(self.factor) != 'a']
+        self.assert_(result.equals(expected))
+
+        result = self.factor[self.factor < 'c']
+        expected = self.factor[np.asarray(self.factor) < 'c']
+        self.assert_(result.equals(expected))
+
+        result = self.factor[self.factor > 'a']
+        expected = self.factor[np.asarray(self.factor) > 'a']
+        self.assert_(result.equals(expected))
+
+        result = self.factor[self.factor >= 'b']
+        expected = self.factor[np.asarray(self.factor) >= 'b']
+        self.assert_(result.equals(expected))
+
+        result = self.factor[self.factor <= 'b']
+        expected = self.factor[np.asarray(self.factor) <= 'b']
+        self.assert_(result.equals(expected))
+
+        n = len(self.factor)
+
+        other = self.factor[np.random.permutation(n)]
+        result = self.factor == other
+        expected = np.asarray(self.factor) == np.asarray(other)
+        self.assert_(np.array_equal(result, expected))
+
+        result = self.factor == 'd'
+        expected = np.repeat(False, len(self.factor))
+        self.assert_(np.array_equal(result, expected))
+
+if __name__ == '__main__':
+    import nose
+    nose.runmodule(argv=[__file__,'-vvs','-x','--pdb', '--pdb-failure'],
+                         # '--with-coverage', '--cover-package=pandas.core'],
+                   exit=False)
+
+
diff --git a/pandas/tests/test_index.py b/pandas/tests/test_index.py
index f039b4f8a..4fadf4865 100644
--- a/pandas/tests/test_index.py
+++ b/pandas/tests/test_index.py
@@ -1531,38 +1531,6 @@ class TestMultiIndex(unittest.TestCase):
                                    [0, 1, 2, 0, 0, 1, 2]])
         self.assert_(index.has_duplicates)
 
-class TestFactor(unittest.TestCase):
-
-    def setUp(self):
-        self.factor = Factor.from_array(['a', 'b', 'b', 'a',
-                                         'a', 'c', 'c', 'c'])
-
-    def test_getitem(self):
-        self.assertEqual(self.factor[0], 'a')
-        self.assertEqual(self.factor[-1], 'c')
-
-        subf = self.factor[[0, 1, 2]]
-        tm.assert_almost_equal(subf.labels, [0, 1, 1])
-
-        subf = self.factor[np.asarray(self.factor) == 'c']
-        tm.assert_almost_equal(subf.labels, [2, 2, 2])
-
-    def test_constructor_unsortable(self):
-        arr = np.array([1, 2, 3, datetime.now()], dtype='O')
-
-        # it works!
-        factor = Factor.from_array(arr)
-
-    def test_factor_agg(self):
-        import pandas.core.frame as frame
-
-        arr = np.arange(len(self.factor))
-
-        f = np.sum
-        agged = frame.factor_agg(self.factor, arr, f)
-        labels = self.factor.labels
-        for i, idx in enumerate(self.factor.levels):
-            self.assertEqual(f(arr[labels == i]), agged[i])
 
 
 def test_get_combined_index():
