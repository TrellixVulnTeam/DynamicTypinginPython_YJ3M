commit 5d9b513a2f1ed75517d18e3652ae10f1b03d890d
Author: Adam Klein <adamklein@gmail.com>
Date:   Thu Jan 5 16:41:37 2012 -0500

    PR#576 changes per wesm comments

diff --git a/pandas/core/common.py b/pandas/core/common.py
index 174921e08..23e697315 100644
--- a/pandas/core/common.py
+++ b/pandas/core/common.py
@@ -491,7 +491,10 @@ def set_eng_float_format(precision=3, use_eng_prefix=False):
     _float_format = EngFormatter(precision, use_eng_prefix)
     _column_space = max(12, precision + 9)
 
-_float_format = lambda x: '% .4f' % x
+def _float_format(x):
+    str_repr = '% .4g' % x
+    return str_repr
+
 _column_space = 12
 _max_rows = 500
 _max_columns = 0
@@ -503,7 +506,7 @@ def _stringify(col):
     else:
         return '%s' % col
 
-def _format(s, space=None, na_rep=None, float_format=None):
+def _format(s, space=None, na_rep=None, float_format=None, col_width=None):
     def _just_help(x):
         if space is None:
             return x
@@ -520,6 +523,12 @@ def _format(s, space=None, na_rep=None, float_format=None):
         else:
             formatted = _float_format(s)
 
+        # if we pass max_width, pad-zero the floats so all are same in column
+        if col_width is not None and formatted != ' 0':
+            padzeros = col_width - len(formatted)
+            if padzeros > 0:
+                formatted = formatted + ('0' * padzeros)
+
         return _just_help(formatted)
     elif isinstance(s, int):
         return _just_help('% d' % s)
diff --git a/pandas/core/format.py b/pandas/core/format.py
index 29f5ce5a1..50919cc4f 100644
--- a/pandas/core/format.py
+++ b/pandas/core/format.py
@@ -194,14 +194,24 @@ class DataFrameFormatter(object):
 
         col_space = self.col_space
 
-        def _myformat(v):
-            return _format(v, space=col_space, na_rep=self.na_rep,
-                           float_format=self.float_format)
+        def _myformat(col):
+            formatter = lambda v: _format(v, space=col_space,
+                                          na_rep=self.na_rep,
+                                          float_format=self.float_format)
+            # one pass through when float to stringify column, to pad with
+            # zeros
+            if issubclass(col.dtype.type, np.floating):
+                col_width = max(map(len, map(formatter, col)))
+                formatter = lambda v: _format(v, space=col_space,
+                                            na_rep=self.na_rep,
+                                            float_format=self.float_format,
+                                            col_width=col_width)
+            return formatter
 
         formatters = {} if self.formatters is None else self.formatters
 
         def _format_col(col, i=None):
-            formatter = formatters.get(col, _myformat)
+            formatter = formatters.get(col, _myformat(self.frame[col]))
             if i == None:
                 return [formatter(x) for x in self.frame[col]]
             else:
@@ -217,8 +227,7 @@ class DataFrameFormatter(object):
             formatters = {}
 
         def is_numeric_dtype(dtype):
-            return (issubclass(dtype.type, np.integer) or
-                    issubclass(dtype.type, np.floating))
+            return issubclass(dtype.type, np.number)
 
         if isinstance(self.columns, MultiIndex):
             fmt_columns = self.columns.format(sparsify=False, adjoin=False)
