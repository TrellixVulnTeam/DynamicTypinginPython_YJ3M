commit 60a335e457bc40d009d5be99b384a62fa34ba3fc
Author: Brandon M. Burroughs <brandonmburroughs@gmail.com>
Date:   Mon Oct 31 16:53:51 2016 -0400

    BUG: Dataframe constructor when given dict with None value (#14392)

diff --git a/doc/source/whatsnew/v0.19.1.txt b/doc/source/whatsnew/v0.19.1.txt
index ab999643d..cb02c3a50 100644
--- a/doc/source/whatsnew/v0.19.1.txt
+++ b/doc/source/whatsnew/v0.19.1.txt
@@ -41,6 +41,7 @@ Bug Fixes
 - Bug in localizing an ambiguous timezone when a boolean is passed (:issue:`14402`)
 - Bug in ``TimedeltaIndex`` addition with a Datetime-like object where addition overflow in the negative direction was not being caught (:issue:`14068`, :issue:`14453`)
 
+- Bug in ``pd.DataFrame`` where constructor fails when given dict with ``None`` value (:issue:`14381`)
 
 
 - Bug in string indexing against data with ``object`` ``Index`` may raise ``AttributeError`` (:issue:`14424`)
diff --git a/pandas/core/series.py b/pandas/core/series.py
index 1c6b13885..188204d83 100644
--- a/pandas/core/series.py
+++ b/pandas/core/series.py
@@ -2915,8 +2915,8 @@ def _sanitize_array(data, index, dtype=None, copy=False,
 
         return subarr
 
-    # scalar like
-    if subarr.ndim == 0:
+    # scalar like, GH
+    if getattr(subarr, 'ndim', 0) == 0:
         if isinstance(data, list):  # pragma: no cover
             subarr = np.array(data, dtype=object)
         elif index is not None:
diff --git a/pandas/tests/frame/test_constructors.py b/pandas/tests/frame/test_constructors.py
index d21db5ba5..e55ba3e16 100644
--- a/pandas/tests/frame/test_constructors.py
+++ b/pandas/tests/frame/test_constructors.py
@@ -259,6 +259,14 @@ class TestDataFrameConstructors(tm.TestCase, TestData):
         frame = DataFrame({'A': [], 'B': []}, columns=['A', 'B'])
         self.assert_index_equal(frame.index, Index([], dtype=np.int64))
 
+        # GH 14381
+        # Dict with None value
+        frame_none = DataFrame(dict(a=None), index=[0])
+        frame_none_list = DataFrame(dict(a=[None]), index=[0])
+        tm.assert_equal(frame_none.get_value(0, 'a'), None)
+        tm.assert_equal(frame_none_list.get_value(0, 'a'), None)
+        tm.assert_frame_equal(frame_none, frame_none_list)
+
         # GH10856
         # dict with scalar values should raise error, even if columns passed
         with tm.assertRaises(ValueError):
