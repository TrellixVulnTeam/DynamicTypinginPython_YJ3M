commit 77d5f0403905544f576ce9298c42163dc5e35827
Author: Benjamin Thyreau <benjamin.thyreau@gmail.com>
Date:   Mon Sep 8 11:05:41 2014 +0900

    BUG: fix groupby crash on duplicated columns (GH7511)

diff --git a/doc/source/v0.15.0.txt b/doc/source/v0.15.0.txt
index 8354a8a18..f0f52d373 100644
--- a/doc/source/v0.15.0.txt
+++ b/doc/source/v0.15.0.txt
@@ -684,6 +684,7 @@ Bug Fixes
 - Bug in ``groupby`` where callable objects without name attributes would take the wrong path,
   and produce a ``DataFrame`` instead of a ``Series`` (:issue:`7929`)
 
+- Bug in ``groupby`` error message when a DataFrame grouping column is duplicated (:issue:`7511`)
 
 - Bug in ``read_html`` where the ``infer_types`` argument forced coercion of
   date-likes incorrectly (:issue:`7762`, :issue:`7032`).
diff --git a/pandas/core/groupby.py b/pandas/core/groupby.py
index afebdb306..2a87563b8 100644
--- a/pandas/core/groupby.py
+++ b/pandas/core/groupby.py
@@ -1940,6 +1940,8 @@ class Grouping(object):
 
             # no level passed
             if not isinstance(self.grouper, (Series, Index, np.ndarray)):
+                if getattr(self.grouper,'ndim', 1) != 1:
+                    raise ValueError("Grouper result with an ndim != 1")
                 self.grouper = self.index.map(self.grouper)
                 if not (hasattr(self.grouper, "__len__") and
                         len(self.grouper) == len(self.index)):
@@ -2098,8 +2100,7 @@ def _get_grouper(obj, key=None, axis=0, level=None, sort=True):
             gpr = obj[gpr]
 
         if isinstance(gpr, Categorical) and len(gpr) != len(obj):
-            errmsg = "Categorical grouper must have len(grouper) == len(data)"
-            raise AssertionError(errmsg)
+            raise ValueError("Categorical grouper must have len(grouper) == len(data)")
 
         ping = Grouping(group_axis, gpr, obj=obj, name=name, level=level, sort=sort)
         groupings.append(ping)
diff --git a/pandas/tests/test_groupby.py b/pandas/tests/test_groupby.py
index b89450ca9..f34ac434e 100644
--- a/pandas/tests/test_groupby.py
+++ b/pandas/tests/test_groupby.py
@@ -387,6 +387,19 @@ class TestGroupBy(tm.TestCase):
         expected = grouped.mean()
         assert_frame_equal(result, expected)
 
+    def test_groupby_duplicated_column_errormsg(self):
+        # GH7511
+        df = DataFrame(columns=['A','B','A','C'], \
+                data=[range(4), range(2,6), range(0, 8, 2)])
+
+        self.assertRaises(ValueError, df.groupby, 'A')
+        self.assertRaises(ValueError, df.groupby, ['A', 'B'])
+
+        grouped = df.groupby('B')
+        c = grouped.count()
+        self.assertTrue(c.columns.nlevels == 1)
+        self.assertTrue(c.columns.size == 3)
+
     def test_groupby_dict_mapping(self):
         # GH #679
         from pandas import Series
@@ -695,6 +708,11 @@ class TestGroupBy(tm.TestCase):
         expected = grouped.mean()
         tm.assert_frame_equal(result, expected)
 
+    def test_grouping_error_on_multidim_input(self):
+        from pandas.core.groupby import Grouping
+        self.assertRaises(ValueError, \
+            Grouping, self.df.index, self.df[['A','A']])
+
     def test_agg_python_multiindex(self):
         grouped = self.mframe.groupby(['A', 'B'])
 
@@ -3298,7 +3316,7 @@ class TestGroupBy(tm.TestCase):
         bins =  pd.cut(series.dropna(), 4)
 
         # len(bins) != len(series) here
-        self.assertRaises(AssertionError,lambda : series.groupby(bins).mean())
+        self.assertRaises(ValueError,lambda : series.groupby(bins).mean())
 
     def test_gb_apply_list_of_unequal_len_arrays(self):
 
