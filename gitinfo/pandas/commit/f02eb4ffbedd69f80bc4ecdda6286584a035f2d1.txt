commit f02eb4ffbedd69f80bc4ecdda6286584a035f2d1
Author: Chang She <chang@lambdafoundry.com>
Date:   Mon May 7 17:49:27 2012 -0400

    ENH: to_timestamp and to_period for DataFrame #1191

diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index a827f5f1b..1daec19fa 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -3957,6 +3957,82 @@ class DataFrame(NDFrame):
                      ascending=ascending)
         return DataFrame(ranks, index=data.index, columns=data.columns)
 
+    def to_timestamp(self, freq=None, how='start', axis=0, copy=True):
+        """
+        Cast to DatetimeIndex of timestamps, at *beginning* of period
+
+        Parameters
+        ----------
+        freq : string, default frequency of PeriodIndex
+            Desired frequency
+        how : {'s', 'e', 'start', 'end'}
+            Convention for converting period to timestamp; start of period
+            vs. end
+        axis : {0, 1} default 0
+            The axis to convert (the index by default)
+        copy : boolean, default True
+            If false then underlying input data is not copied
+
+        Returns
+        -------
+        df : DataFrame with DatetimeIndex
+        """
+        new_data = self._data
+        if copy:
+            new_data = new_data.copy()
+
+        new_index, new_columns = self.index, self.columns
+
+        if axis == 0:
+            new_index = self.index.to_timestamp(freq=freq, how=how)
+        elif axis == 1:
+            new_columns = self.columns.to_timestamp(freq=freq, how=how)
+        else:
+            raise ValueError('Axis must be 0 or 1. Got %s' % str(axis))
+
+        axes = [new_columns, new_index]
+        new_data = BlockManager(new_data.blocks, axes)
+        return DataFrame(new_data, index=new_index, columns=new_columns)
+
+    def to_period(self, freq=None, axis=0, copy=True):
+        """
+        Convert DataFrame from DatetimeIndex to PeriodIndex with desired
+        frequency (inferred from index if not passed)
+
+        Parameters
+        ----------
+        freq : string, default
+        axis : {0, 1}, default 0
+            The axis to convert (the index by default)
+        copy : boolean, default True
+            If False then underlying input data is not copied
+
+        Returns
+        -------
+        ts : TimeSeries with PeriodIndex
+        """
+        new_data = self._data
+        if copy:
+            new_data = new_data.copy()
+
+        new_index, new_columns = self.index, self.columns
+
+        if axis == 0:
+            if freq is None:
+                freq = self.index.freqstr or self.index.inferred_freq
+            new_index = self.index.to_period(freq=freq)
+        elif axis == 1:
+            if freq is None:
+                freq = self.columns.freqstr or self.columns.inferred_freq
+            new_columns = self.columns.to_period(freq=freq)
+        else:
+            raise ValueError('Axis must be 0 or 1. Got %s' % str(axis))
+
+        axes = [new_columns, new_index]
+        new_data = BlockManager(new_data.blocks, axes)
+
+        return DataFrame(new_data, index=new_index, columns=new_columns)
+
     #----------------------------------------------------------------------
     # Deprecated stuff
 
diff --git a/pandas/tseries/index.py b/pandas/tseries/index.py
index ec3a30199..0ce69fd9e 100644
--- a/pandas/tseries/index.py
+++ b/pandas/tseries/index.py
@@ -525,7 +525,7 @@ class DatetimeIndex(Int64Index):
             raise ValueError(msg)
 
         if freq is None:
-            freq = self.freq
+            freq = self.freqstr
 
         return PeriodIndex(self.values, freq=freq)
 
diff --git a/pandas/tseries/tests/test_period.py b/pandas/tseries/tests/test_period.py
index ed56d81f5..b5217fbd3 100644
--- a/pandas/tseries/tests/test_period.py
+++ b/pandas/tseries/tests/test_period.py
@@ -18,9 +18,10 @@ from pandas.tseries.tools import to_datetime
 
 import pandas.core.datetools as datetools
 import numpy as np
+randn = np.random.randn
 
 from pandas import Series, TimeSeries, DataFrame
-from pandas.util.testing import assert_series_equal
+from pandas.util.testing import assert_series_equal, assert_almost_equal
 import pandas.util.testing as tm
 
 class TestPeriodProperties(TestCase):
@@ -945,6 +946,67 @@ class TestPeriodIndex(TestCase):
         exp_index = _get_with_delta(delta)
         self.assert_(result.index.equals(exp_index))
 
+    def test_frame_to_time_stamp(self):
+        K = 5
+        index = PeriodIndex(freq='A', start='1/1/2001', end='12/1/2009')
+        df = DataFrame(randn(len(index), K), index=index)
+        df['mix'] = 'a'
+
+        exp_index = date_range('1/1/2001', end='12/31/2009', freq='A-DEC')
+        result = df.to_timestamp('D', 'end')
+        self.assert_(result.index.equals(exp_index))
+        assert_almost_equal(result.values, df.values)
+
+        exp_index = date_range('1/1/2001', end='1/1/2009', freq='AS-DEC')
+        result = df.to_timestamp('D', 'start')
+        self.assert_(result.index.equals(exp_index))
+
+        def _get_with_delta(delta, freq='A-DEC'):
+            return date_range(to_datetime('1/1/2001') + delta,
+                              to_datetime('12/31/2009') + delta, freq=freq)
+
+        delta = timedelta(hours=23)
+        result = df.to_timestamp('H', 'end')
+        exp_index = _get_with_delta(delta)
+        self.assert_(result.index.equals(exp_index))
+
+        delta = timedelta(hours=23, minutes=59)
+        result = df.to_timestamp('T', 'end')
+        exp_index = _get_with_delta(delta)
+        self.assert_(result.index.equals(exp_index))
+
+        result = df.to_timestamp('S', 'end')
+        delta = timedelta(hours=23, minutes=59, seconds=59)
+        exp_index = _get_with_delta(delta)
+        self.assert_(result.index.equals(exp_index))
+
+        # columns
+        df = df.T
+
+        exp_index = date_range('1/1/2001', end='12/31/2009', freq='A-DEC')
+        result = df.to_timestamp('D', 'end', axis=1)
+        self.assert_(result.columns.equals(exp_index))
+        assert_almost_equal(result.values, df.values)
+
+        exp_index = date_range('1/1/2001', end='1/1/2009', freq='AS-DEC')
+        result = df.to_timestamp('D', 'start', axis=1)
+        self.assert_(result.columns.equals(exp_index))
+
+        delta = timedelta(hours=23)
+        result = df.to_timestamp('H', 'end', axis=1)
+        exp_index = _get_with_delta(delta)
+        self.assert_(result.columns.equals(exp_index))
+
+        delta = timedelta(hours=23, minutes=59)
+        result = df.to_timestamp('T', 'end', axis=1)
+        exp_index = _get_with_delta(delta)
+        self.assert_(result.columns.equals(exp_index))
+
+        result = df.to_timestamp('S', 'end', axis=1)
+        delta = timedelta(hours=23, minutes=59, seconds=59)
+        exp_index = _get_with_delta(delta)
+        self.assert_(result.columns.equals(exp_index))
+
     def test_index_duplicate_periods(self):
         # monotonic
         idx = PeriodIndex([2000, 2007, 2007, 2009, 2009], freq='A-JUN')
diff --git a/pandas/tseries/tests/test_timeseries.py b/pandas/tseries/tests/test_timeseries.py
index 3c1d5c06e..4eff342e5 100644
--- a/pandas/tseries/tests/test_timeseries.py
+++ b/pandas/tseries/tests/test_timeseries.py
@@ -8,6 +8,7 @@ import unittest
 import nose
 
 import numpy as np
+randn = np.random.randn
 
 from pandas import (Index, Series, TimeSeries, DataFrame, isnull,
                     date_range, Timestamp)
@@ -599,6 +600,34 @@ class TestTimeSeries(unittest.TestCase):
         pts = ts.to_period('M')
         self.assert_(pts.index.equals(exp.index.asfreq('M')))
 
+    def test_frame_to_period(self):
+        K = 5
+        from pandas.tseries.period import period_range
+
+        dr = date_range('1/1/2000', '1/1/2001')
+        pr = period_range('1/1/2000', '1/1/2001')
+        df = DataFrame(randn(len(dr), K), index=dr)
+        df['mix'] = 'a'
+
+        pts = df.to_period()
+        exp = df.copy()
+        exp.index = pr
+        assert_frame_equal(pts, exp)
+
+        pts = df.to_period('M')
+        self.assert_(pts.index.equals(exp.index.asfreq('M')))
+
+        """ Put me back in after fixing DataFrame bug
+        df = df.T
+        pts = df.to_period(axis=1)
+        exp = df.copy()
+        exp.columns = pr
+        assert_frame_equal(pts, exp)
+
+        pts = df.to_period('M', axis=1)
+        self.assert_(pts.columns.equals(exp.columns.asfreq('M')))
+        """
+
     def test_timestamp_fields(self):
         # extra fields from DatetimeIndex like quarter and week
         from pandas._tseries import Timestamp
