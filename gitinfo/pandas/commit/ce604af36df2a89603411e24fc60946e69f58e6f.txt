commit ce604af36df2a89603411e24fc60946e69f58e6f
Author: Chang She <changshe@gmail.com>
Date:   Mon Dec 3 09:18:47 2012 -0500

    TST: more tests for resample closed and label inference

diff --git a/pandas/tseries/resample.py b/pandas/tseries/resample.py
index 42954df3c..39cbb26f4 100644
--- a/pandas/tseries/resample.py
+++ b/pandas/tseries/resample.py
@@ -44,7 +44,7 @@ class TimeGrouper(CustomGrouper):
         end_types = set(['M', 'A', 'Q', 'BM', 'BA', 'BQ', 'W'])
         rule = self.freq.rule_code
         if (rule in end_types or
-            ('-' in rule and rule[:rule.find('-')])):
+            ('-' in rule and rule[:rule.find('-')] in end_types)):
             if closed is None:
                 closed = 'right'
             if label is None:
diff --git a/pandas/tseries/tests/test_resample.py b/pandas/tseries/tests/test_resample.py
index b651c2136..dee9a9ed7 100644
--- a/pandas/tseries/tests/test_resample.py
+++ b/pandas/tseries/tests/test_resample.py
@@ -16,7 +16,8 @@ import pandas as pd
 import unittest
 import nose
 
-from pandas.util.testing import assert_series_equal, assert_almost_equal
+from pandas.util.testing import (assert_series_equal, assert_almost_equal,
+                                 assert_frame_equal)
 import pandas.util.testing as tm
 
 bday = BDay()
@@ -894,6 +895,33 @@ class TestResamplePeriodIndex(unittest.TestCase):
 
     #     assert_series_equal(result, expected)
 
+    def test_default_right_closed_label(self):
+        end_freq = ['D', 'Q', 'M', 'D']
+        end_types = ['M', 'A', 'Q', 'W']
+
+        for from_freq, to_freq in zip(end_freq, end_types):
+            idx = DatetimeIndex(start='8/15/2012', periods=100,
+                                freq=from_freq)
+            df = DataFrame(np.random.randn(len(idx), 2), idx)
+
+            resampled = df.resample(to_freq)
+            assert_frame_equal(resampled, df.resample(to_freq, closed='right',
+                                                      label='right'))
+
+    def test_default_left_closed_label(self):
+        others = ['MS', 'AS', 'QS', 'D', 'H']
+        others_freq = ['D', 'Q', 'M', 'H', 'T']
+
+        for from_freq, to_freq in zip(others_freq, others):
+            idx = DatetimeIndex(start='8/15/2012', periods=100,
+                                freq=from_freq)
+            df = DataFrame(np.random.randn(len(idx), 2), idx)
+
+            resampled = df.resample(to_freq)
+            assert_frame_equal(resampled, df.resample(to_freq, closed='left',
+                                                      label='left'))
+
+
 class TestTimeGrouper(unittest.TestCase):
 
     def setUp(self):
