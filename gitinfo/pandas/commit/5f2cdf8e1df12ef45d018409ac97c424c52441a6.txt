commit 5f2cdf8e1df12ef45d018409ac97c424c52441a6
Author: jbrockmendel <jbrockmendel@gmail.com>
Date:   Fri Apr 10 09:02:47 2020 -0700

    REF: call _block_shape from EABlock.make_block (#33308)

diff --git a/pandas/core/internals/__init__.py b/pandas/core/internals/__init__.py
index 1090f862a..7f06fb3a7 100644
--- a/pandas/core/internals/__init__.py
+++ b/pandas/core/internals/__init__.py
@@ -10,7 +10,6 @@ from pandas.core.internals.blocks import (  # io.pytables, io.packers
     IntBlock,
     ObjectBlock,
     TimeDeltaBlock,
-    _block_shape,
     _safe_reshape,
     make_block,
 )
@@ -31,7 +30,6 @@ __all__ = [
     "TimeDeltaBlock",
     "_safe_reshape",
     "make_block",
-    "_block_shape",
     "BlockManager",
     "SingleBlockManager",
     "concatenate_block_managers",
diff --git a/pandas/core/internals/blocks.py b/pandas/core/internals/blocks.py
index d12b78f8d..0791e21db 100644
--- a/pandas/core/internals/blocks.py
+++ b/pandas/core/internals/blocks.py
@@ -243,6 +243,8 @@ class Block(PandasObject):
         """
         if placement is None:
             placement = self.mgr_locs
+        if self.is_extension:
+            values = _block_shape(values, ndim=self.ndim)
 
         return make_block(values, placement=placement, ndim=self.ndim)
 
@@ -354,13 +356,12 @@ class Block(PandasObject):
             nbs = []
             for i, loc in enumerate(self.mgr_locs):
                 vals = result[i]
-                nv = _block_shape(vals, ndim=self.ndim)
-                block = self.make_block(values=nv, placement=[loc])
+                block = self.make_block(values=vals, placement=[loc])
                 nbs.append(block)
             return nbs
 
         if not isinstance(result, Block):
-            result = self.make_block(values=_block_shape(result, ndim=self.ndim))
+            result = self.make_block(result)
 
         return [result]
 
@@ -1264,9 +1265,6 @@ class Block(PandasObject):
     def diff(self, n: int, axis: int = 1) -> List["Block"]:
         """ return block for the diff of the values """
         new_values = algos.diff(self.values, n, axis=axis, stacklevel=7)
-        # We use block_shape for ExtensionBlock subclasses, which may call here
-        # via a super.
-        new_values = _block_shape(new_values, ndim=self.ndim)
         return [self.make_block(values=new_values)]
 
     def shift(self, periods: int, axis: int = 0, fill_value=None):
@@ -2254,7 +2252,7 @@ class DatetimeTZBlock(ExtensionBlock, DatetimeBlock):
             values = values.astype(object, copy=False)
             placement = self.mgr_locs if self.ndim == 2 else slice(len(values))
 
-            return self.make_block(_block_shape(values, self.ndim), placement=placement)
+            return self.make_block(values, placement=placement)
         return super().concat_same_type(to_concat)
 
     def fillna(self, value, limit=None, inplace=False, downcast=None):
@@ -2420,7 +2418,6 @@ class ObjectBlock(Block):
                 # TODO: allow EA once reshape is supported
                 values = values.reshape(shape)
 
-            values = _block_shape(values, ndim=self.ndim)
             return values
 
         if self.ndim == 2:
@@ -2660,9 +2657,7 @@ class CategoricalBlock(ExtensionBlock):
         )
         placement = self.mgr_locs if self.ndim == 2 else slice(len(values))
         # not using self.make_block_same_class as values can be object dtype
-        return self.make_block(
-            _block_shape(values, ndim=self.ndim), placement=placement
-        )
+        return self.make_block(values, placement=placement)
 
     def replace(
         self,
@@ -2771,16 +2766,15 @@ def _extend_blocks(result, blocks=None):
     return blocks
 
 
-def _block_shape(values, ndim=1, shape=None):
+def _block_shape(values: ArrayLike, ndim: int = 1) -> ArrayLike:
     """ guarantee the shape of the values to be at least 1 d """
     if values.ndim < ndim:
-        if shape is None:
-            shape = values.shape
-        if not is_extension_array_dtype(values):
-            # TODO: https://github.com/pandas-dev/pandas/issues/23023
+        shape = values.shape
+        if not is_extension_array_dtype(values.dtype):
+            # TODO(EA2D): https://github.com/pandas-dev/pandas/issues/23023
             # block.shape is incorrect for "2D" ExtensionArrays
             # We can't, and don't need to, reshape.
-            values = values.reshape(tuple((1,) + shape))
+            values = values.reshape(tuple((1,) + shape))  # type: ignore
     return values
 
 
